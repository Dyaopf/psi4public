#! RHF aug-cc-pVQZ energy for the BH molecule, with Cartesian input.
#! Various gradients for a strained helium dimer and water molecule
import numpy as np
memory 500 mb

# <<<  energies  >>>


molecule h2o {
    O
    H 1 1.0
    H 1 1.0 2 104.5
}

# Get a reasonable guess, to save some iterations
set globals = {
    scf_type      df
    mp2_type      df
    e_convergence 7
    reference     rhf
}

h2o.update_geometry()

# SCF TESTS

scf_dz = energy(cbs, scf_wfn='SCF', scf_basis='cc-pVDZ')
compare_values(scf_dz_ref, scf_dz, 6, "[1] SCF/DZ Energy Check")

#scf_tzvp = energy(cbs, scf_basis='def2-TZVP')
scf_tzvp = energy(cbs, scf_wfn='SCF', scf_basis='def2-TZVP')
compare_values(scf_tzvp_ref, scf_tzvp, 6, "[2] SCF/TZVP Energy Check")

scf_adtz = energy(cbs, scf_wfn='SCF', scf_basis='aug-cc-pV[23]Z')
compare_values(scf_adtz_ref, scf_adtz, 6, "[3] SCF/a[DT]Z Energy Check")

# Three point extrapolation
scf_adtqz = energy(cbs, scf_wfn='SCF', scf_basis='aug-cc-pV[D3Q]Z')
compare_values(scf_adtqz_ref, scf_adtqz, 6, "[4] SCF/a[DTQ]Z Energy Check")


# MP2 TESTS

mp2_addz = energy(cbs, corl_wfn='MP2', corl_basis='aug-cc-pV(D+d)Z')
compare_values(mp2_addz_ref, mp2_addz, 6, "[5] MP2/a(D+d)Z Energy Check")

mp2_atz = energy(cbs, corl_wfn='MP2', corl_basis='aug-cc-pVTZ')
compare_values(mp2_atz_ref, mp2_atz, 6, "[6] MP2/aTZ Energy Check")

mp2_adtz = energy(cbs, corl_wfn='MP2', corl_basis='aug-cc-pV[2T]Z')
compare_values(mp2_adtz_ref, mp2_adtz, 6, "[7] MP2/a[DT]Z Energy Check")

mp2_atqz = energy(cbs, corl_wfn='MP2', corl_basis='aug-cc-pV[T,Q]Z')
compare_values(mp2_atqz_ref, mp2_atqz, 6, "[8] MP2/a[TQ]Z Energy Check")


# <<<  gradients  >>>


nucenergy_ref = 1.17594935242

molecule he_dimer {
    He 0 0 0
    He 0 0 1.8
}

# Get a reasonable guess, to save some iterations
set globals = {
    scf_type      pk
    mp2_type      conv
    reference     rhf
}

clean()

he_dimer.update_geometry()

# SCF TESTS

scf_dz = gradient(cbs, scf_wfn='SCF', scf_basis='cc-pVDZ')

scf_tz = gradient(cbs, scf_wfn='SCF', scf_basis='cc-pVTZ')

scf_dtz = gradient(cbs, scf_wfn='SCF', scf_basis='cc-pV[23]Z')

scf_dtqz = gradient(cbs, scf_wfn='SCF', scf_basis='cc-pV[DTQ]Z')


# MP2 TESTS
mp2_dtz = gradient(cbs, corl_wfn='MP2', corl_basis='cc-pV[DT]Z')

mp2_dtz = gradient(cbs, corl_wfn='MP2', corl_basis='cc-pV[DT]Z', dertype='energy')

# <<<  optimize  >>>

molecule h2 {
    H
    H 1 R
    R = 1
}

# Conventional to keep angular momentum low
set {
    scf_type      pk
    mp2_type      conv
    g_convergence GAU_VERYTIGHT
    e_convergence 1.e-10
}

h2.update_geometry()

optimize(cbs, scf_wfn='SCF', scf_basis='cc-pvdz')
compare_values(0.747953788665, h2.R, 4, "[17] SCF/cc-pVDZ Optimized R")

optimize(cbs, scf_wfn='SCF', scf_basis='cc-pV[DT]Z')
compare_values(0.730953222371, h2.R, 4, "[18] SCF/cc-pV[DT]Z Optimized R")
