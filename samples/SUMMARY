basis_extrap:  Various basis set extrapolation tests


castup1:      Test of SAD/Cast-up (mainly not dying due to file weirdness)


cc1:          RHF-CCSD 6-31G** all-electron optimization of the H2O molecule


cc13:         cc-pVDZ UCCSD optimization of triplet methtylene, with Z-matrix input


cc2:          6-31G** H2O Test CCSD energy, with Z-Matrix input


cc4:          RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. After the computation, the checkpoint file is renamed, using the PSIO handler.


cc4a:         RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. This version tests the FROZEN_DOCC option explicitly


cc5:          RHF CCSD(T) aug-cc-pvtz frozen-core energy of C4NH4 Anion


cc5a:         RHF CCSD(T) STO-3G frozen-core energy of C4NH4 Anion


cc8:          UHF-CCSD(T) cc-pVDZ frozen-core energy for the $^2\Sigma^+$ state of the CN radical, with Z-matrix input.


cc8a:         ROHF-CCSD(T) cc-pVDZ frozen-core energy for the $^2\Sigma^+$ state of the CN radical, with Cartesian input.


cc9:          UHF-CCSD(T) cc-pVDZ frozen-core energy for the $^2\Sigma^+$ state of the CN radical, with Z-matrix input.


cisd-h2o+-0:  6-31G** H2O+ Test CISD Energy Point


cisd-h2o+-1:  6-31G** H2O+ Test CISD Energy Point


cisd-h2o+-2:  6-31G** H2O+ Test CISD Energy Point


cisd-h2o-clpse:  6-31G** H2O Test CISD Energy Point with subspace collapse


cisd-opt-fd:  H2O CISD/6-31G** Optimize Geometry by Energies


cisd-sp:      6-31G** H2O Test CISD Energy Point


cisd-sp-2:    6-31G** H2O Test CISD Energy Point


dcft1:        DCFT calculation for the He dimer, with the K06 functional. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis.


dcft2:        DCFT calculation for the He dimer, with the K06 functional. This performs a two-step update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis.


dcft3:        DCFT calculation for the He dimer, with the K06 functional. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the AO Basis, using integrals stored on disk.


dcft4:        DCFT calculation for the Ne atom, with the K06 functional. This performs both two-step and simultaneous update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. The reference DCFT energy is taken from the JCP 133 174122 (2010) paper


dcft5:        DCFT calculation for the Ne+ ion (doublet ground state). This performs both two-step and simultaneous update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis.


dfmp2_1:      Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using automatic counterpoise correction.  Monomers are specified using Cartesian coordinates.


dfmp2_2:      Density fitted MP2 energy of H2, using density fitted reference and automatic looping over cc-pVDZ and cc-pVTZ basis sets. Results are tabulated using the built in table functions by using the default options and by specifiying the format.


dfscf-bz2:    Benzene Dimer DF-HF/cc-pVDZ


fci-dipole:   6-31G H2O Test FCI Energy Point


fci-h2o:      6-31G H2O Test FCI Energy Point


fci-h2o-2:    6-31G H2O Test FCI Energy Point


fci-h2o-fzcv:  6-31G H2O Test FCI Energy Point


fci-tdm:      He2+ FCI/cc-pVDZ Transition Dipole Moment


fci-tdm-2:    BH-H2+ FCI/cc-pVDZ Transition Dipole Moment


matrix1:      An example of using BLAS and LAPACK calls directly from the Psi input file, demonstrating matrix multiplication, eigendecomposition, Cholesky decomposition and LU decomposition. These operations are performed on vectors and matrices provided from the Psi library.


mcscf1:       ROHF 6-31G** energy of the $^3B_1$ state of CH$_2$, with Z-matrix input. The occupations are specified explicitly.


mcscf2:       TCSCF cc-pVDZ  energy of asymmetrically displaced ozone, with Z-matrix input.


mcscf3:       RHF 6-31G** energy of water, using the MCSCF module and Z-matrix input.


mints1:       Symmetry tests for a range of molecules.  This doesn't actually compute any energies, but serves as an example of the many ways to specify geometries in Psi4.


mints2:       A test of the basis specification.  A benzene atom is defined using a ZMatrix containing dummy atoms and various basis sets are assigned to different atoms.  The symmetry of the molecule is automatically lowered to account for the different basis sets.


mints3:       Test individual integral objects for correctness.


mints4:       A demonstration of mixed Cartesian/ZMatrix geometry specification, using variables, for the benzene-hydronium complex.  Atoms can be placed using ZMatrix coordinates, whether they belong to the same fragment or not.  Note that the Cartesian specification must come before the ZMatrix entries because the former define absolute positions, while the latter are relative.


mp2_1:        All-electron MP2 6-31G** geometry optimization of water


opt1:         SCF STO-3G geometry optimzation, with Z-matrix input


opt1-fd:      SCF STO-3G geometry optimzation, with Z-matrix input, by finite-differences


opt2:         SCF DZ allene geometry optimzation, with Cartesian input


opt2-fd:      SCF DZ allene geometry optimzation, with Cartesian input


opt3:         SCF cc-pVDZ geometry optimzation, with Z-matrix input


opt4:         SCF cc-pVTZ geometry optimzation, with Z-matrix input


opt5:         6-31G** UHF CH2 3B1 optimization


props1:       RHF STO-3G dipole moment computation, performed by applying a finite electric field and numerical differentiation.


props2:       DF-SCF cc-pVDZ of benzene-hydronium ion, scanning the dissociation coordinate with Python's built-in loop mechanism. The geometry is specified by a Z-matrix with dummy atoms, fixed parameters, updated parameters, and separate charge/multiplicity specifiers for each monomer. One-electron properties computed for dimer and one monomer.


pywrap_all:   Intercalls among python wrappers- database, cbs, optimize, energy, etc. Though each call below functions individually, running them all in sequence or mixing up the sequence is aspirational at present. Also aspirational is using the intended types of gradients.


pywrap_cbs1:  Various basis set extrapolation tests


pywrap_db1:   Database calculation, so no molecule section in input file. Portions of the full databases, restricted by subset keyword, are computed by sapt0 and dfmp2 methods.


pywrap_db2:   Database calculation with psi4-generated input. Should not be used as a model input file but as a canary to avoid breaking database/input parser dependencies.


rasci-c2-active:  6-31G* C2 Test RASCI Energy Point, testing two different ways of specifying the active space, either with the ACTIVE keyword, or with RAS1, RAS2, RESTRICTED_DOCC, and RESTRICTED_UOCC


rasci-h2o:    RASCI/6-31G** H2O Energy Point


sad1:         Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set.  This is just a test of the code and the user need only specify guess=sad to the SCF module's (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1.


sapt1:        SAPT0 cc-pVDZ computation of the ethane-ethyne binding energy, using the cc-pVDZ-JKFIT RI basis for SCF and cc-pVDZ-RI for SAPT.  Monomer geometries are specified using Cartesian coordinates.


scf-bz2:      Benzene Dimer Out-of-Core HF/cc-pVDZ


scf1:         RHF cc-pVQZ energy for the BH molecule, with Cartesian input.


scf11-freq-from-energies:  Test frequencies by finite differences of energies for planar C4NH4 TS


scf2:         RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxilliary basis. This compuation runs in C1 symmetry, which is currently required for RI-SCF.


scf3:         UHF 6-31G** energy of the $^3B_1$ state of CH$_2$, with Z-matrix input. The occupations are specified explicitly.


scf4:         RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python's built-in loop mechanisms.  The geometry is apecified using a Z-matrix with variables that are updated during the potential energy surface scan.


scf5:         Test of all different algorithms and reference types for SCF, on singlet and triplet O2, using the cc-pVTZ basis set.


