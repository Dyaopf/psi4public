function(get_cc_sources list_of_sources)
    file(GLOB _listcc *.cc)
    foreach(file_path ${_listcc})
    	get_filename_component(dir_path ${file_path} NAME)
    	list(APPEND list_of_sources ${dir_path})
    endforeach()
    list(REMOVE_DUPLICATES list_of_sources)
    set(${list_of_sources} PARENT_SCOPE)
endfunction()

function(get_cpp_sources list_of_sources)
    file(GLOB _listcpp *.cpp)
    foreach(file_path ${_listcpp})
    	get_filename_component(dir_path ${file_path} NAME)
    	list(APPEND list_of_sources ${dir_path})
    endforeach()
    list(REMOVE_DUPLICATES list_of_sources)
    set(${list_of_sources} PARENT_SCOPE)
endfunction()

function(get_c_sources list_of_sources)
    file(GLOB _listc *.c)
    foreach(file_path ${_listc})
    	get_filename_component(dir_path ${file_path} NAME)
    	list(APPEND list_of_sources ${dir_path})
    endforeach()
    list(REMOVE_DUPLICATES list_of_sources)
    set(${list_of_sources} PARENT_SCOPE)
endfunction()

function(get_fortran_sources list_of_sources)
    file(GLOB _listfortran *.F *.f *.F90 *.f90)
    foreach(file_path ${_listfortran})
    	get_filename_component(dir_path ${file_path} NAME)
    	list(APPEND list_of_sources ${dir_path})
    endforeach()
    list(REMOVE_DUPLICATES list_of_sources)
    set(${list_of_sources} PARENT_SCOPE)
endfunction()

function(get_hpp_headers list_of_headers)
    file(GLOB _listhpp *.hpp)
    foreach(file_path ${_listhpp})
    	get_filename_component(dir_path ${file_path} NAME)
    	list(APPEND list_of_headers ${dir_path})
    endforeach()
    list(REMOVE_DUPLICATES list_of_headers)
    set(${list_of_headers} PARENT_SCOPE)
endfunction()

function(get_h_headers list_of_headers)
    file(GLOB _listh *.h)
    foreach(file_path ${_listh})
    	get_filename_component(dir_path ${file_path} NAME)
    	list(APPEND list_of_headers ${dir_path})
    endforeach()
    list(REMOVE_DUPLICATES list_of_headers)
    set(${list_of_headers} PARENT_SCOPE)
endfunction()

# Convenient wrapper for the install(FILES ... DESTINATION ...) command
# for a list of elements (we tipically use it for header files)
macro(install_list_FILES list_of_files where)
	foreach(filename ${list_of_files})
		install(FILES ${filename} DESTINATION ${where})
	endforeach()
endmacro()

# Writes list of files in given directory to a file to be used by the
# cloc Perl script to count lines of code
macro(write_to_cloc_list list_of_sources)
     # It might be that sources are not under src/${lib} but under src/${dir}/${lib}
     get_filename_component(dir ${CMAKE_CURRENT_SOURCE_DIR} DIRECTORY)
     get_filename_component(dir ${dir} NAME)
     get_filename_component(lib ${CMAKE_CURRENT_SOURCE_DIR} NAME)
     if(EXISTS "${PROJECT_BINARY_DIR}/doc/cloc/cloc_list-${lib}")
     	file(REMOVE ${PROJECT_BINARY_DIR}/doc/cloc/cloc_list-${lib})
     endif()
     foreach(source ${list_of_sources})
     	file(APPEND ${PROJECT_BINARY_DIR}/doc/cloc/cloc_list-${lib} "${PROJECT_SOURCE_DIR}/src/${dir}/${lib}/${source}\n")
     endforeach()
endmacro()
