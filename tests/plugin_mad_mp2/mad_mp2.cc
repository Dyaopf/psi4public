<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
  
  

  


  

  <head>
    <title>
      /trunk/tests/plugin_mad_mp2/mad_mp2.cc – Psi4
    </title>
        <link rel="search" href="/trac/search" />
        <link rel="help" href="/trac/wiki/TracGuide" />
        <link rel="alternate" href="/trac/browser/trunk/tests/plugin_mad_mp2/mad_mp2.cc?format=txt" type="text/plain" title="Plain Text" /><link rel="alternate" href="/trac/export/1983/trunk/tests/plugin_mad_mp2/mad_mp2.cc" type="text/x-c++src; charset=iso-8859-15" title="Original Format" />
        <link rel="up" href="/trac/browser/trunk/tests/plugin_mad_mp2" title="Parent directory" />
        <link rel="start" href="/trac/wiki" />
        <link rel="stylesheet" href="/trac/chrome/common/css/trac.css" type="text/css" /><link rel="stylesheet" href="/trac/chrome/common/css/code.css" type="text/css" /><link rel="stylesheet" href="/trac/pygments/trac.css" type="text/css" /><link rel="stylesheet" href="/trac/chrome/common/css/browser.css" type="text/css" /><link rel="stylesheet" href="/trac/chrome/googlemap/tracgooglemap.css" type="text/css" />
        <link rel="google-key" href="" class="google-key" title="ABQIAAAAEm-sB5Hq7DJNrZXGU2EXlxTthLP7MnSeoBrJ-Mt6ZcDfmRQM3RTqr4vj7oIAm9RhoGjV8d0hktaebQ" />
        <link rel="shortcut icon" href="/trac/chrome/site/logo.png" type="image/png" />
        <link rel="icon" href="/trac/chrome/site/logo.png" type="image/png" />
      <link type="application/opensearchdescription+xml" rel="search" href="/trac/search/opensearch" title="Search Psi4" />
    <script type="text/javascript" src="/trac/chrome/common/js/jquery.js"></script><script type="text/javascript" src="/trac/chrome/common/js/trac.js"></script><script type="text/javascript" src="/trac/chrome/common/js/search.js"></script><script type="text/javascript" src="/trac/chrome/googlemap/tracgooglemap.js"></script>
    <!--[if lt IE 7]>
    <script type="text/javascript" src="/trac/chrome/common/js/ie_pre7_hacks.js"></script>
    <![endif]-->
    <script type="text/javascript">
      jQuery(document).ready(function($) {
        $(".trac-toggledeleted").show().click(function() {
                  $(this).siblings().find(".trac-deleted").toggle();
                  return false;
        }).click();
        $("#jumploc input").hide();
        $("#jumploc select").change(function () {
          this.parentNode.parentNode.submit();
        });
      });
    </script>
  </head>
  <body>
    <div id="banner">
      <div id="header">
        <a id="logo" href="/trac/wiki"><img src="/trac/chrome/site/PSI4_3.png" alt="Welcome to the Psi4 Trac page" height="120" width="480" /></a>
      </div>
      <form id="search" action="/trac/search" method="get">
        <div>
          <label for="proj-search">Search:</label>
          <input type="text" id="proj-search" name="q" size="18" value="" />
          <input type="submit" value="Search" />
        </div>
      </form>
      <div id="metanav" class="nav">
    <ul>
      <li class="first">logged in as rparrish6</li><li><a href="/trac/logout">Logout</a></li><li><a href="/trac/prefs">Preferences</a></li><li><a href="/trac/wiki/TracGuide">Help/Guide</a></li><li class="last"><a href="/trac/about">About Trac</a></li>
    </ul>
  </div>
    </div>
    <div id="mainnav" class="nav">
    <ul>
      <li class="first"><a href="/trac/wiki">Wiki</a></li><li><a href="/trac/timeline">Timeline</a></li><li><a href="/trac/roadmap">Roadmap</a></li><li class="active"><a href="/trac/log/trunk?rev=latest">Browse Source</a></li><li><a href="/trac/report">View Tickets</a></li><li><a href="/trac/newticket">New Ticket</a></li><li><a href="/trac/search">Search</a></li><li><a href="/trac/doxygen">Doxygen</a></li><li><a href="/trac/admin" title="Administration">Admin</a></li><li class="last"><a href="/trac/discussion">Forum</a></li>
    </ul>
  </div>
    <div id="main">
      <div id="ctxtnav" class="nav">
        <h2>Context Navigation</h2>
          <ul>
              <li class="first"><a href="/trac/changeset/1981/trunk/tests/plugin_mad_mp2/mad_mp2.cc">Last Change</a></li><li><a href="/trac/browser/trunk/tests/plugin_mad_mp2/mad_mp2.cc?annotate=blame&amp;rev=1981" title="Annotate each line with the last changed revision (this can be time consuming...)">Annotate</a></li><li class="last"><a href="/trac/log/trunk/tests/plugin_mad_mp2/mad_mp2.cc">Revision Log</a></li>
          </ul>
        <hr />
      </div>
    <div id="content" class="browser">
      <h1>
    <a class="pathentry first" title="Go to root directory" href="/trac/browser">root</a><span class="pathentry sep">/</span><a class="pathentry" title="View trunk" href="/trac/browser/trunk">trunk</a><span class="pathentry sep">/</span><a class="pathentry" title="View tests" href="/trac/browser/trunk/tests">tests</a><span class="pathentry sep">/</span><a class="pathentry" title="View plugin_mad_mp2" href="/trac/browser/trunk/tests/plugin_mad_mp2">plugin_mad_mp2</a><span class="pathentry sep">/</span><a class="pathentry" title="View mad_mp2.cc" href="/trac/browser/trunk/tests/plugin_mad_mp2/mad_mp2.cc">mad_mp2.cc</a>
    <br style="clear: both" />
  </h1>
      <div id="jumprev">
        <form action="" method="get">
          <div>
            <label for="rev">
              View revision:</label>
            <input type="text" id="rev" name="rev" size="6" />
          </div>
        </form>
      </div>
      <div id="jumploc">
        <form action="" method="get">
          <div class="buttons">
            <label for="preselected">Visit:</label>
            <select id="preselected" name="preselected">
              <option selected="selected"></option>
              <optgroup label="branches">
                <option value="/trac/browser/trunk">trunk</option><option value="/trac/browser/branches/madpsi4">branches/madpsi4</option><option value="/trac/browser/branches/psi4-alpha-0">branches/psi4-alpha-0</option>
              </optgroup>
            </select>
            <input type="submit" value="Go!" title="Jump to the chosen preselected path" />
          </div>
        </form>
      </div>
      <table id="info" summary="Revision info">
        <tr>
          <th scope="col">
            Revision <a href="/trac/changeset/1981">1981</a>, <span title="39864 bytes">38.9 KB</span>
            (checked in by bmintz, <a class="timeline" href="/trac/timeline?from=2011-07-12T10%3A19%3A50-0400&amp;precision=second" title="2011-07-12T10:19:50-0400 in Timeline">35 minutes</a> ago)
          </th>
        </tr>
        <tr>
          <td class="message searchable">
              <p>
changes made to mad_mp2<br />
</p>
          </td>
        </tr>
      </table>
      <div id="preview" class="searchable">
    <table class="code"><thead><tr><th class="lineno" title="Line numbers">Line</th><th class="content"> </th></tr></thead><tbody><tr><th id="L1"><a href="#L1">1</a></th><td><span class="cp">#include &lt;stdlib.h&gt;</span></td></tr><tr><th id="L2"><a href="#L2">2</a></th><td><span class="cp">#include &lt;stdio.h&gt;</span></td></tr><tr><th id="L3"><a href="#L3">3</a></th><td><span class="cp">#include &lt;math.h&gt;</span></td></tr><tr><th id="L4"><a href="#L4">4</a></th><td><span class="cp">#include &lt;algorithm&gt;</span></td></tr><tr><th id="L5"><a href="#L5">5</a></th><td><span class="cp">#include &lt;vector&gt;</span></td></tr><tr><th id="L6"><a href="#L6">6</a></th><td><span class="cp">#include &lt;utility&gt;</span></td></tr><tr><th id="L7"><a href="#L7">7</a></th><td><span class="cp">#include &lt;string&gt;</span></td></tr><tr><th id="L8"><a href="#L8">8</a></th><td><span class="cp">#include &lt;cstring&gt;</span></td></tr><tr><th id="L9"><a href="#L9">9</a></th><td><span class="cp"></span></td></tr><tr><th id="L10"><a href="#L10">10</a></th><td><span class="cp">#include &lt;psifiles.h&gt;</span></td></tr><tr><th id="L11"><a href="#L11">11</a></th><td><span class="cp">#include &lt;physconst.h&gt;</span></td></tr><tr><th id="L12"><a href="#L12">12</a></th><td><span class="cp">#include &lt;libciomr/libciomr.h&gt;</span></td></tr><tr><th id="L13"><a href="#L13">13</a></th><td><span class="cp">#include &lt;libpsio/psio.hpp&gt;</span></td></tr><tr><th id="L14"><a href="#L14">14</a></th><td><span class="cp">#include &lt;libchkpt/chkpt.hpp&gt;</span></td></tr><tr><th id="L15"><a href="#L15">15</a></th><td><span class="cp">#include &lt;libiwl/iwl.hpp&gt;</span></td></tr><tr><th id="L16"><a href="#L16">16</a></th><td><span class="cp">#include &lt;libqt/qt.h&gt;</span></td></tr><tr><th id="L17"><a href="#L17">17</a></th><td><span class="cp"></span></td></tr><tr><th id="L18"><a href="#L18">18</a></th><td><span class="cp">#include &lt;libmints/mints.h&gt;</span></td></tr><tr><th id="L19"><a href="#L19">19</a></th><td><span class="cp">#include &lt;lib3index/3index.h&gt;</span></td></tr><tr><th id="L20"><a href="#L20">20</a></th><td><span class="cp"></span></td></tr><tr><th id="L21"><a href="#L21">21</a></th><td><span class="cp">#include "mad_mp2.h"</span></td></tr><tr><th id="L22"><a href="#L22">22</a></th><td><span class="cp"></span></td></tr><tr><th id="L23"><a href="#L23">23</a></th><td><span class="cp">#ifdef _OPENMP</span></td></tr><tr><th id="L24"><a href="#L24">24</a></th><td><span class="cp">#include &lt;omp.h&gt;</span></td></tr><tr><th id="L25"><a href="#L25">25</a></th><td><span class="cp">#endif</span></td></tr><tr><th id="L26"><a href="#L26">26</a></th><td><span class="cp"></span></td></tr><tr><th id="L27"><a href="#L27">27</a></th><td><span class="c1">//#define ORDER_PRINT_START int dummycommvar = 0;\</span></td></tr><tr><th id="L28"><a href="#L28">28</a></th><td><span class="c1">//                MPI::Intracomm dummycomm;\</span></td></tr><tr><th id="L29"><a href="#L29">29</a></th><td><span class="c1">//                dummycom-&gt;create();\</span></td></tr><tr><th id="L30"><a href="#L30">30</a></th><td><span class="c1">//                if (Communicator::world-&gt;me() != 0) { \</span></td></tr><tr><th id="L31"><a href="#L31">31</a></th><td><span class="c1">//                    dummycomm-&gt;send(&amp;dummycommvar, 1, MPI::INT, Communicator::world-&gt;me() - 1, 1);\</span></td></tr><tr><th id="L32"><a href="#L32">32</a></th><td><span class="c1">//                }</span></td></tr><tr><th id="L33"><a href="#L33">33</a></th><td><span class="c1"></span></td></tr><tr><th id="L34"><a href="#L34">34</a></th><td><span class="c1">//#define ORDER_PRINT_END if (Communicator::world-&gt;me() != Communicator::world-&gt;nproc() - 1){\</span></td></tr><tr><th id="L35"><a href="#L35">35</a></th><td><span class="c1">//                dummycomm-&gt;recv(&amp;dummycommvar, 1, MPI::INT, Communicator::world-&gt;me() + 1, 1);}\</span></td></tr><tr><th id="L36"><a href="#L36">36</a></th><td><span class="c1">//                }</span></td></tr><tr><th id="L37"><a href="#L37">37</a></th><td><span class="c1"></span></td></tr><tr><th id="L38"><a href="#L38">38</a></th><td><span class="k">using</span> <span class="k">namespace</span> std<span class="p">;</span></td></tr><tr><th id="L39"><a href="#L39">39</a></th><td><span class="k">using</span> <span class="k">namespace</span> psi<span class="p">;</span></td></tr><tr><th id="L40"><a href="#L40">40</a></th><td><span class="k">using</span> <span class="k">namespace</span> boost<span class="p">;</span></td></tr><tr><th id="L41"><a href="#L41">41</a></th><td></td></tr><tr><th id="L42"><a href="#L42">42</a></th><td><span class="k">namespace</span> psi<span class="p">{</span> <span class="k">namespace</span> mad_mp2 <span class="p">{</span></td></tr><tr><th id="L43"><a href="#L43">43</a></th><td></td></tr><tr><th id="L44"><a href="#L44">44</a></th><td>MAD_MP2<span class="o">::</span>MAD_MP2<span class="p">(</span>Options<span class="o">&amp;</span> options<span class="p">,</span> boost<span class="o">::</span>shared_ptr<span class="o">&lt;</span>PSIO<span class="o">&gt;</span> psio<span class="p">)</span> <span class="o">:</span></td></tr><tr><th id="L45"><a href="#L45">45</a></th><td>    Wavefunction<span class="p">(</span>options<span class="p">,</span> psio<span class="p">),</span> madness<span class="o">::</span>WorldObject<span class="o">&lt;</span>MAD_MP2<span class="o">&gt;</span><span class="p">(</span><span class="o">*</span>Communicator<span class="o">::</span>world<span class="o">-&gt;</span>get_madworld<span class="p">())</span></td></tr><tr><th id="L46"><a href="#L46">46</a></th><td><span class="p">{</span></td></tr><tr><th id="L47"><a href="#L47">47</a></th><td>    common_init<span class="p">();</span></td></tr><tr><th id="L48"><a href="#L48">48</a></th><td>    parallel_init<span class="p">();</span></td></tr><tr><th id="L49"><a href="#L49">49</a></th><td>    process_pending<span class="p">();</span></td></tr><tr><th id="L50"><a href="#L50">50</a></th><td><span class="p">}</span></td></tr><tr><th id="L51"><a href="#L51">51</a></th><td>MAD_MP2<span class="o">::~</span>MAD_MP2<span class="p">()</span></td></tr><tr><th id="L52"><a href="#L52">52</a></th><td><span class="p">{</span></td></tr><tr><th id="L53"><a href="#L53">53</a></th><td><span class="p">}</span></td></tr><tr><th id="L54"><a href="#L54">54</a></th><td><span class="kt">void</span> MAD_MP2<span class="o">::</span>common_init<span class="p">()</span></td></tr><tr><th id="L55"><a href="#L55">55</a></th><td><span class="p">{</span></td></tr><tr><th id="L56"><a href="#L56">56</a></th><td>    print_ <span class="o">=</span> options_<span class="p">.</span>get_int<span class="p">(</span><span class="s">"PRINT"</span><span class="p">);</span></td></tr><tr><th id="L57"><a href="#L57">57</a></th><td>    debug_ <span class="o">=</span> options_<span class="p">.</span>get_int<span class="p">(</span><span class="s">"DEBUG"</span><span class="p">);</span></td></tr><tr><th id="L58"><a href="#L58">58</a></th><td></td></tr><tr><th id="L59"><a href="#L59">59</a></th><td><span class="c1">//    std::ofstream debug_str;</span></td></tr><tr><th id="L60"><a href="#L60">60</a></th><td><span class="c1">//    if(debug_){</span></td></tr><tr><th id="L61"><a href="#L61">61</a></th><td><span class="c1">//        char* file = new char[10];</span></td></tr><tr><th id="L62"><a href="#L62">62</a></th><td><span class="c1">//        sprintf(file, "debug_%d", Communicator::world-&gt;me());</span></td></tr><tr><th id="L63"><a href="#L63">63</a></th><td><span class="c1">//        file += itoa(Communicator::world-&gt;rank);</span></td></tr><tr><th id="L64"><a href="#L64">64</a></th><td><span class="c1">//        debug_str.</span></td></tr><tr><th id="L65"><a href="#L65">65</a></th><td><span class="c1">//        delete [] file;</span></td></tr><tr><th id="L66"><a href="#L66">66</a></th><td><span class="c1">//    }</span></td></tr><tr><th id="L67"><a href="#L67">67</a></th><td><span class="c1"></span></td></tr><tr><th id="L68"><a href="#L68">68</a></th><td>    omp_nthread_ <span class="o">=</span> <span class="mi">1</span><span class="p">;</span></td></tr><tr><th id="L69"><a href="#L69">69</a></th><td><span class="cp">    #ifdef _OPENMP</span></td></tr><tr><th id="L70"><a href="#L70">70</a></th><td><span class="cp"></span>        omp_nthread_ <span class="o">=</span> omp_get_max_threads<span class="p">();</span></td></tr><tr><th id="L71"><a href="#L71">71</a></th><td><span class="cp">    #endif</span></td></tr><tr><th id="L72"><a href="#L72">72</a></th><td><span class="cp"></span></td></tr><tr><th id="L73"><a href="#L73">73</a></th><td>    scale_ss_ <span class="o">=</span> options_<span class="p">.</span>get_double<span class="p">(</span><span class="s">"SCALE_SS"</span><span class="p">);</span></td></tr><tr><th id="L74"><a href="#L74">74</a></th><td>    scale_os_ <span class="o">=</span> options_<span class="p">.</span>get_double<span class="p">(</span><span class="s">"SCALE_OS"</span><span class="p">);</span></td></tr><tr><th id="L75"><a href="#L75">75</a></th><td></td></tr><tr><th id="L76"><a href="#L76">76</a></th><td>    reference_ <span class="o">=</span> Process<span class="o">::</span>environment<span class="p">.</span>reference_wavefunction<span class="p">();</span></td></tr><tr><th id="L77"><a href="#L77">77</a></th><td></td></tr><tr><th id="L78"><a href="#L78">78</a></th><td>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span>reference_<span class="p">.</span>get<span class="p">())</span> <span class="p">{</span></td></tr><tr><th id="L79"><a href="#L79">79</a></th><td>        <span class="k">throw</span> PSIEXCEPTION<span class="p">(</span><span class="s">"Tell Rob to code the chkpt initializer"</span><span class="p">);</span></td></tr><tr><th id="L80"><a href="#L80">80</a></th><td>    <span class="p">}</span></td></tr><tr><th id="L81"><a href="#L81">81</a></th><td></td></tr><tr><th id="L82"><a href="#L82">82</a></th><td>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span>reference_<span class="o">-&gt;</span>restricted<span class="p">())</span> <span class="p">{</span></td></tr><tr><th id="L83"><a href="#L83">83</a></th><td>        <span class="k">throw</span> PSIEXCEPTION<span class="p">(</span><span class="s">"DFMP2 MADNESS is only closed-shell for now"</span><span class="p">);</span></td></tr><tr><th id="L84"><a href="#L84">84</a></th><td>    <span class="p">}</span></td></tr><tr><th id="L85"><a href="#L85">85</a></th><td></td></tr><tr><th id="L86"><a href="#L86">86</a></th><td>    boost<span class="o">::</span>shared_ptr<span class="o">&lt;</span>IntegralFactory<span class="o">&gt;</span> integral<span class="p">(</span><span class="k">new</span> IntegralFactory<span class="p">(</span>basisset_<span class="p">,</span>basisset_<span class="p">,</span>basisset_<span class="p">,</span>basisset_<span class="p">));</span></td></tr><tr><th id="L87"><a href="#L87">87</a></th><td>    boost<span class="o">::</span>shared_ptr<span class="o">&lt;</span>PetiteList<span class="o">&gt;</span> pet<span class="p">(</span><span class="k">new</span> PetiteList<span class="p">(</span>basisset_<span class="p">,</span> integral<span class="p">));</span></td></tr><tr><th id="L88"><a href="#L88">88</a></th><td>    AO2USO_ <span class="o">=</span> boost<span class="o">::</span>shared_ptr<span class="o">&lt;</span>Matrix<span class="o">&gt;</span><span class="p">(</span>pet<span class="o">-&gt;</span>aotoso<span class="p">());</span></td></tr><tr><th id="L89"><a href="#L89">89</a></th><td></td></tr><tr><th id="L90"><a href="#L90">90</a></th><td>    <span class="c1">// Might be good place for a copy constructor</span></td></tr><tr><th id="L91"><a href="#L91">91</a></th><td><span class="c1"></span>    Ca_ <span class="o">=</span> reference_<span class="o">-&gt;</span>Ca<span class="p">();</span> </td></tr><tr><th id="L92"><a href="#L92">92</a></th><td>    Cb_ <span class="o">=</span> reference_<span class="o">-&gt;</span>Cb<span class="p">();</span></td></tr><tr><th id="L93"><a href="#L93">93</a></th><td></td></tr><tr><th id="L94"><a href="#L94">94</a></th><td>    epsilon_a_ <span class="o">=</span> reference_<span class="o">-&gt;</span>epsilon_a<span class="p">();</span></td></tr><tr><th id="L95"><a href="#L95">95</a></th><td>    epsilon_b_ <span class="o">=</span> reference_<span class="o">-&gt;</span>epsilon_b<span class="p">();</span></td></tr><tr><th id="L96"><a href="#L96">96</a></th><td></td></tr><tr><th id="L97"><a href="#L97">97</a></th><td>    <span class="k">if</span> <span class="p">(</span>debug_<span class="p">)</span> <span class="p">{</span></td></tr><tr><th id="L98"><a href="#L98">98</a></th><td>        Ca_<span class="o">-&gt;</span>print<span class="p">();</span></td></tr><tr><th id="L99"><a href="#L99">99</a></th><td>        Cb_<span class="o">-&gt;</span>print<span class="p">();</span></td></tr><tr><th id="L100"><a href="#L100">100</a></th><td>        AO2USO_<span class="o">-&gt;</span>print<span class="p">();</span></td></tr><tr><th id="L101"><a href="#L101">101</a></th><td>        epsilon_a_<span class="o">-&gt;</span>print<span class="p">();</span></td></tr><tr><th id="L102"><a href="#L102">102</a></th><td>        epsilon_b_<span class="o">-&gt;</span>print<span class="p">();</span></td></tr><tr><th id="L103"><a href="#L103">103</a></th><td>        fflush<span class="p">(</span>outfile<span class="p">);</span></td></tr><tr><th id="L104"><a href="#L104">104</a></th><td>    <span class="p">}</span></td></tr><tr><th id="L105"><a href="#L105">105</a></th><td></td></tr><tr><th id="L106"><a href="#L106">106</a></th><td>    nirrep_ <span class="o">=</span> reference_<span class="o">-&gt;</span>nirrep<span class="p">();</span> </td></tr><tr><th id="L107"><a href="#L107">107</a></th><td>    nso_    <span class="o">=</span> reference_<span class="o">-&gt;</span>nso<span class="p">();</span> </td></tr><tr><th id="L108"><a href="#L108">108</a></th><td>    nmo_    <span class="o">=</span> reference_<span class="o">-&gt;</span>nmo<span class="p">();</span></td></tr><tr><th id="L109"><a href="#L109">109</a></th><td></td></tr><tr><th id="L110"><a href="#L110">110</a></th><td>    <span class="o">::</span>memcpy<span class="p">(</span><span class="k">static_cast</span><span class="o">&lt;</span><span class="kt">void</span><span class="o">*&gt;</span><span class="p">(</span>doccpi_<span class="p">),</span> <span class="k">static_cast</span><span class="o">&lt;</span><span class="kt">void</span><span class="o">*&gt;</span><span class="p">(</span>reference_<span class="o">-&gt;</span>doccpi<span class="p">()),</span> <span class="mi">8</span> <span class="o">*</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">int</span><span class="p">));</span></td></tr><tr><th id="L111"><a href="#L111">111</a></th><td>    <span class="o">::</span>memcpy<span class="p">(</span><span class="k">static_cast</span><span class="o">&lt;</span><span class="kt">void</span><span class="o">*&gt;</span><span class="p">(</span>soccpi_<span class="p">),</span> <span class="k">static_cast</span><span class="o">&lt;</span><span class="kt">void</span><span class="o">*&gt;</span><span class="p">(</span>reference_<span class="o">-&gt;</span>soccpi<span class="p">()),</span> <span class="mi">8</span> <span class="o">*</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">int</span><span class="p">));</span></td></tr><tr><th id="L112"><a href="#L112">112</a></th><td>    <span class="o">::</span>memcpy<span class="p">(</span><span class="k">static_cast</span><span class="o">&lt;</span><span class="kt">void</span><span class="o">*&gt;</span><span class="p">(</span>nsopi_<span class="p">),</span> <span class="k">static_cast</span><span class="o">&lt;</span><span class="kt">void</span><span class="o">*&gt;</span><span class="p">(</span>reference_<span class="o">-&gt;</span>nsopi<span class="p">()),</span> <span class="mi">8</span> <span class="o">*</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">int</span><span class="p">));</span></td></tr><tr><th id="L113"><a href="#L113">113</a></th><td>    <span class="o">::</span>memcpy<span class="p">(</span><span class="k">static_cast</span><span class="o">&lt;</span><span class="kt">void</span><span class="o">*&gt;</span><span class="p">(</span>nmopi_<span class="p">),</span> <span class="k">static_cast</span><span class="o">&lt;</span><span class="kt">void</span><span class="o">*&gt;</span><span class="p">(</span>reference_<span class="o">-&gt;</span>nmopi<span class="p">()),</span> <span class="mi">8</span> <span class="o">*</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">int</span><span class="p">));</span></td></tr><tr><th id="L114"><a href="#L114">114</a></th><td>    <span class="o">::</span>memcpy<span class="p">(</span><span class="k">static_cast</span><span class="o">&lt;</span><span class="kt">void</span><span class="o">*&gt;</span><span class="p">(</span>nalphapi_<span class="p">),</span> <span class="k">static_cast</span><span class="o">&lt;</span><span class="kt">void</span><span class="o">*&gt;</span><span class="p">(</span>reference_<span class="o">-&gt;</span>nalphapi<span class="p">()),</span> <span class="mi">8</span> <span class="o">*</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">int</span><span class="p">));</span></td></tr><tr><th id="L115"><a href="#L115">115</a></th><td>    <span class="o">::</span>memcpy<span class="p">(</span><span class="k">static_cast</span><span class="o">&lt;</span><span class="kt">void</span><span class="o">*&gt;</span><span class="p">(</span>nbetapi_<span class="p">),</span> <span class="k">static_cast</span><span class="o">&lt;</span><span class="kt">void</span><span class="o">*&gt;</span><span class="p">(</span>reference_<span class="o">-&gt;</span>nbetapi<span class="p">()),</span> <span class="mi">8</span> <span class="o">*</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">int</span><span class="p">));</span></td></tr><tr><th id="L116"><a href="#L116">116</a></th><td>    <span class="o">::</span>memcpy<span class="p">(</span><span class="k">static_cast</span><span class="o">&lt;</span><span class="kt">void</span><span class="o">*&gt;</span><span class="p">(</span>frzcpi_<span class="p">),</span> <span class="k">static_cast</span><span class="o">&lt;</span><span class="kt">void</span><span class="o">*&gt;</span><span class="p">(</span>reference_<span class="o">-&gt;</span>frzcpi<span class="p">()),</span> <span class="mi">8</span> <span class="o">*</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">int</span><span class="p">));</span></td></tr><tr><th id="L117"><a href="#L117">117</a></th><td>    <span class="o">::</span>memcpy<span class="p">(</span><span class="k">static_cast</span><span class="o">&lt;</span><span class="kt">void</span><span class="o">*&gt;</span><span class="p">(</span>frzvpi_<span class="p">),</span> <span class="k">static_cast</span><span class="o">&lt;</span><span class="kt">void</span><span class="o">*&gt;</span><span class="p">(</span>reference_<span class="o">-&gt;</span>frzvpi<span class="p">()),</span> <span class="mi">8</span> <span class="o">*</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">int</span><span class="p">));</span></td></tr><tr><th id="L118"><a href="#L118">118</a></th><td>    <span class="c1">// End copy constructor opportunity     </span></td></tr><tr><th id="L119"><a href="#L119">119</a></th><td><span class="c1"></span></td></tr><tr><th id="L120"><a href="#L120">120</a></th><td>    nfocc_  <span class="o">=</span> <span class="mi">0</span><span class="p">;</span></td></tr><tr><th id="L121"><a href="#L121">121</a></th><td>    nfvir_  <span class="o">=</span> <span class="mi">0</span><span class="p">;</span></td></tr><tr><th id="L122"><a href="#L122">122</a></th><td>    naocc_  <span class="o">=</span> <span class="mi">0</span><span class="p">;</span></td></tr><tr><th id="L123"><a href="#L123">123</a></th><td>    navir_  <span class="o">=</span> <span class="mi">0</span><span class="p">;</span></td></tr><tr><th id="L124"><a href="#L124">124</a></th><td>    nalpha_ <span class="o">=</span> <span class="mi">0</span><span class="p">;</span></td></tr><tr><th id="L125"><a href="#L125">125</a></th><td>    nbeta_  <span class="o">=</span> <span class="mi">0</span><span class="p">;</span></td></tr><tr><th id="L126"><a href="#L126">126</a></th><td>    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> h <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> h <span class="o">&lt;</span> nirrep_<span class="p">;</span> h<span class="o">++</span><span class="p">)</span> <span class="p">{</span></td></tr><tr><th id="L127"><a href="#L127">127</a></th><td>        naocc_  <span class="o">+=</span> doccpi_<span class="p">[</span>h<span class="p">]</span> <span class="o">-</span> frzcpi_<span class="p">[</span>h<span class="p">];</span></td></tr><tr><th id="L128"><a href="#L128">128</a></th><td>        navir_  <span class="o">+=</span> nmopi_<span class="p">[</span>h<span class="p">]</span> <span class="o">-</span> doccpi_<span class="p">[</span>h<span class="p">]</span> <span class="o">-</span> frzvpi_<span class="p">[</span>h<span class="p">];</span></td></tr><tr><th id="L129"><a href="#L129">129</a></th><td>        nfocc_  <span class="o">+=</span> frzcpi_<span class="p">[</span>h<span class="p">];</span></td></tr><tr><th id="L130"><a href="#L130">130</a></th><td>        nfvir_  <span class="o">+=</span> frzvpi_<span class="p">[</span>h<span class="p">];</span></td></tr><tr><th id="L131"><a href="#L131">131</a></th><td>        nalpha_ <span class="o">+=</span> nalphapi_<span class="p">[</span>h<span class="p">];</span></td></tr><tr><th id="L132"><a href="#L132">132</a></th><td>        nbeta_  <span class="o">+=</span> nbetapi_<span class="p">[</span>h<span class="p">];</span></td></tr><tr><th id="L133"><a href="#L133">133</a></th><td>    <span class="p">}</span></td></tr><tr><th id="L134"><a href="#L134">134</a></th><td></td></tr><tr><th id="L135"><a href="#L135">135</a></th><td>    <span class="o">::</span>memset<span class="p">(</span><span class="k">static_cast</span><span class="o">&lt;</span><span class="kt">void</span><span class="o">*&gt;</span> <span class="p">(</span>naoccpi_<span class="p">),</span> <span class="sc">'\0'</span><span class="p">,</span> <span class="mi">8</span> <span class="o">*</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">int</span><span class="p">));</span></td></tr><tr><th id="L136"><a href="#L136">136</a></th><td>    <span class="o">::</span>memset<span class="p">(</span><span class="k">static_cast</span><span class="o">&lt;</span><span class="kt">void</span><span class="o">*&gt;</span> <span class="p">(</span>navirpi_<span class="p">),</span> <span class="sc">'\0'</span><span class="p">,</span> <span class="mi">8</span> <span class="o">*</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">int</span><span class="p">));</span></td></tr><tr><th id="L137"><a href="#L137">137</a></th><td>    <span class="o">::</span>memset<span class="p">(</span><span class="k">static_cast</span><span class="o">&lt;</span><span class="kt">void</span><span class="o">*&gt;</span> <span class="p">(</span>offset_aocc_<span class="p">),</span> <span class="sc">'\0'</span><span class="p">,</span> <span class="mi">8</span> <span class="o">*</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">int</span><span class="p">));</span></td></tr><tr><th id="L138"><a href="#L138">138</a></th><td>    <span class="o">::</span>memset<span class="p">(</span><span class="k">static_cast</span><span class="o">&lt;</span><span class="kt">void</span><span class="o">*&gt;</span> <span class="p">(</span>offset_avir_<span class="p">),</span> <span class="sc">'\0'</span><span class="p">,</span> <span class="mi">8</span> <span class="o">*</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">int</span><span class="p">));</span></td></tr><tr><th id="L139"><a href="#L139">139</a></th><td></td></tr><tr><th id="L140"><a href="#L140">140</a></th><td>    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> h <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> h <span class="o">&lt;</span> nirrep_<span class="p">;</span> h<span class="o">++</span><span class="p">)</span> <span class="p">{</span></td></tr><tr><th id="L141"><a href="#L141">141</a></th><td>        naoccpi_<span class="p">[</span>h<span class="p">]</span> <span class="o">=</span> doccpi_<span class="p">[</span>h<span class="p">]</span> <span class="o">-</span> frzcpi_<span class="p">[</span>h<span class="p">];</span></td></tr><tr><th id="L142"><a href="#L142">142</a></th><td>        navirpi_<span class="p">[</span>h<span class="p">]</span> <span class="o">=</span> nmopi_<span class="p">[</span>h<span class="p">]</span> <span class="o">-</span> doccpi_<span class="p">[</span>h<span class="p">]</span> <span class="o">-</span> frzvpi_<span class="p">[</span>h<span class="p">];</span></td></tr><tr><th id="L143"><a href="#L143">143</a></th><td>    <span class="p">}</span></td></tr><tr><th id="L144"><a href="#L144">144</a></th><td></td></tr><tr><th id="L145"><a href="#L145">145</a></th><td>    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> h <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> h <span class="o">&lt;</span> nirrep_<span class="p">;</span> h<span class="o">++</span><span class="p">)</span> <span class="p">{</span></td></tr><tr><th id="L146"><a href="#L146">146</a></th><td>        offset_aocc_<span class="p">[</span>h<span class="p">]</span> <span class="o">=</span> naoccpi_<span class="p">[</span>h <span class="o">-</span> <span class="mi">1</span><span class="p">]</span> <span class="o">+</span> offset_aocc_<span class="p">[</span>h <span class="o">-</span> <span class="mi">1</span><span class="p">];</span></td></tr><tr><th id="L147"><a href="#L147">147</a></th><td>        offset_avir_<span class="p">[</span>h<span class="p">]</span> <span class="o">=</span> navirpi_<span class="p">[</span>h <span class="o">-</span> <span class="mi">1</span><span class="p">]</span> <span class="o">+</span> offset_avir_<span class="p">[</span>h <span class="o">-</span> <span class="mi">1</span><span class="p">];</span></td></tr><tr><th id="L148"><a href="#L148">148</a></th><td>    <span class="p">}</span></td></tr><tr><th id="L149"><a href="#L149">149</a></th><td></td></tr><tr><th id="L150"><a href="#L150">150</a></th><td>    <span class="k">if</span> <span class="p">(</span>debug_<span class="p">)</span> <span class="p">{</span>   </td></tr><tr><th id="L151"><a href="#L151">151</a></th><td>        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> h <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> h <span class="o">&lt;</span> nirrep_<span class="p">;</span> h<span class="o">++</span><span class="p">)</span> <span class="p">{</span></td></tr><tr><th id="L152"><a href="#L152">152</a></th><td>            fprintf<span class="p">(</span>outfile<span class="p">,</span> <span class="s">"  h = %1d: naocc = %4d aocc_off = %4d navir = %4d avir_off = %4d</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> </td></tr><tr><th id="L153"><a href="#L153">153</a></th><td>                h<span class="p">,</span> naoccpi_<span class="p">[</span>h<span class="p">],</span> offset_aocc_<span class="p">[</span>h<span class="p">],</span> navirpi_<span class="p">[</span>h<span class="p">],</span> offset_avir_<span class="p">[</span>h<span class="p">]);</span></td></tr><tr><th id="L154"><a href="#L154">154</a></th><td>        <span class="p">}</span>    </td></tr><tr><th id="L155"><a href="#L155">155</a></th><td>    <span class="p">}</span></td></tr><tr><th id="L156"><a href="#L156">156</a></th><td></td></tr><tr><th id="L157"><a href="#L157">157</a></th><td>    Caocc_ <span class="o">=</span> boost<span class="o">::</span>shared_ptr<span class="o">&lt;</span>Matrix<span class="o">&gt;</span><span class="p">(</span><span class="k">new</span> Matrix<span class="p">(</span><span class="s">"Caocc"</span><span class="p">,</span> nso_<span class="p">,</span> naocc_<span class="p">));</span></td></tr><tr><th id="L158"><a href="#L158">158</a></th><td>    Cavir_ <span class="o">=</span> boost<span class="o">::</span>shared_ptr<span class="o">&lt;</span>Matrix<span class="o">&gt;</span><span class="p">(</span><span class="k">new</span> Matrix<span class="p">(</span><span class="s">"Cavir"</span><span class="p">,</span> nso_<span class="p">,</span> navir_<span class="p">));</span></td></tr><tr><th id="L159"><a href="#L159">159</a></th><td>    eps_aocc_ <span class="o">=</span> boost<span class="o">::</span>shared_ptr<span class="o">&lt;</span>Vector<span class="o">&gt;</span><span class="p">(</span><span class="k">new</span> Vector<span class="p">(</span><span class="s">"eps_aocc"</span><span class="p">,</span> naocc_<span class="p">));</span></td></tr><tr><th id="L160"><a href="#L160">160</a></th><td>    eps_avir_ <span class="o">=</span> boost<span class="o">::</span>shared_ptr<span class="o">&lt;</span>Vector<span class="o">&gt;</span><span class="p">(</span><span class="k">new</span> Vector<span class="p">(</span><span class="s">"eps_avir"</span><span class="p">,</span> navir_<span class="p">));</span></td></tr><tr><th id="L161"><a href="#L161">161</a></th><td>    irrep_aocc_ <span class="o">=</span> boost<span class="o">::</span>shared_ptr<span class="o">&lt;</span>IntVector<span class="o">&gt;</span><span class="p">(</span><span class="k">new</span> IntVector<span class="p">(</span><span class="s">"irrep_aocc"</span><span class="p">,</span> naocc_<span class="p">));</span></td></tr><tr><th id="L162"><a href="#L162">162</a></th><td>    irrep_avir_ <span class="o">=</span> boost<span class="o">::</span>shared_ptr<span class="o">&lt;</span>IntVector<span class="o">&gt;</span><span class="p">(</span><span class="k">new</span> IntVector<span class="p">(</span><span class="s">"irrep_avir"</span><span class="p">,</span> navir_<span class="p">));</span></td></tr><tr><th id="L163"><a href="#L163">163</a></th><td></td></tr><tr><th id="L164"><a href="#L164">164</a></th><td>    <span class="kt">int</span> occ_counter <span class="o">=</span> <span class="mi">0</span><span class="p">;</span></td></tr><tr><th id="L165"><a href="#L165">165</a></th><td>    <span class="kt">int</span> vir_counter <span class="o">=</span> <span class="mi">0</span><span class="p">;</span></td></tr><tr><th id="L166"><a href="#L166">166</a></th><td>    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> h <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> h <span class="o">&lt;</span> nirrep_<span class="p">;</span> h<span class="o">++</span><span class="p">)</span> <span class="p">{</span></td></tr><tr><th id="L167"><a href="#L167">167</a></th><td>        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> i <span class="o">=</span> frzcpi_<span class="p">[</span>h<span class="p">];</span> i <span class="o">&lt;</span> doccpi_<span class="p">[</span>h<span class="p">];</span> i<span class="o">++</span><span class="p">)</span> <span class="p">{</span></td></tr><tr><th id="L168"><a href="#L168">168</a></th><td>            eps_aocc_<span class="o">-&gt;</span>set<span class="p">(</span><span class="mi">0</span><span class="p">,</span> occ_counter<span class="p">,</span> epsilon_a_<span class="o">-&gt;</span>get<span class="p">(</span>h<span class="p">,</span> i<span class="p">));</span></td></tr><tr><th id="L169"><a href="#L169">169</a></th><td>            C_DGEMV<span class="p">(</span><span class="sc">'N'</span><span class="p">,</span>nso_<span class="p">,</span>nsopi_<span class="p">[</span>h<span class="p">],</span><span class="mf">1.0</span><span class="p">,</span>AO2USO_<span class="o">-&gt;</span>pointer<span class="p">(</span>h<span class="p">)[</span><span class="mi">0</span><span class="p">],</span>nsopi_<span class="p">[</span>h<span class="p">],</span><span class="o">&amp;</span>Ca_<span class="o">-&gt;</span>pointer<span class="p">(</span>h<span class="p">)[</span><span class="mi">0</span><span class="p">][</span>i<span class="p">],</span>nmopi_<span class="p">[</span>h<span class="p">],</span><span class="mf">0.0</span><span class="p">,</span><span class="o">&amp;</span>Caocc_<span class="o">-&gt;</span>pointer<span class="p">(</span><span class="mi">0</span><span class="p">)[</span><span class="mi">0</span><span class="p">][</span>occ_counter<span class="p">],</span>naocc_<span class="p">);</span></td></tr><tr><th id="L170"><a href="#L170">170</a></th><td>            irrep_aocc_<span class="o">-&gt;</span>set<span class="p">(</span><span class="mi">0</span><span class="p">,</span> occ_counter<span class="p">,</span> h<span class="p">);</span></td></tr><tr><th id="L171"><a href="#L171">171</a></th><td>            occ_counter<span class="o">++</span><span class="p">;</span></td></tr><tr><th id="L172"><a href="#L172">172</a></th><td>        <span class="p">}</span></td></tr><tr><th id="L173"><a href="#L173">173</a></th><td>        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> a <span class="o">=</span> doccpi_<span class="p">[</span>h<span class="p">];</span> a <span class="o">&lt;</span> nmopi_<span class="p">[</span>h<span class="p">]</span> <span class="o">-</span> frzvpi_<span class="p">[</span>h<span class="p">];</span> a<span class="o">++</span><span class="p">)</span> <span class="p">{</span></td></tr><tr><th id="L174"><a href="#L174">174</a></th><td>            eps_avir_<span class="o">-&gt;</span>set<span class="p">(</span><span class="mi">0</span><span class="p">,</span> vir_counter<span class="p">,</span> epsilon_a_<span class="o">-&gt;</span>get<span class="p">(</span>h<span class="p">,</span> a<span class="p">));</span></td></tr><tr><th id="L175"><a href="#L175">175</a></th><td>            C_DGEMV<span class="p">(</span><span class="sc">'N'</span><span class="p">,</span>nso_<span class="p">,</span>nsopi_<span class="p">[</span>h<span class="p">],</span><span class="mf">1.0</span><span class="p">,</span>AO2USO_<span class="o">-&gt;</span>pointer<span class="p">(</span>h<span class="p">)[</span><span class="mi">0</span><span class="p">],</span>nsopi_<span class="p">[</span>h<span class="p">],</span><span class="o">&amp;</span>Ca_<span class="o">-&gt;</span>pointer<span class="p">(</span>h<span class="p">)[</span><span class="mi">0</span><span class="p">][</span>a<span class="p">],</span>nmopi_<span class="p">[</span>h<span class="p">],</span><span class="mf">0.0</span><span class="p">,</span><span class="o">&amp;</span>Cavir_<span class="o">-&gt;</span>pointer<span class="p">(</span><span class="mi">0</span><span class="p">)[</span><span class="mi">0</span><span class="p">][</span>vir_counter<span class="p">],</span>navir_<span class="p">);</span></td></tr><tr><th id="L176"><a href="#L176">176</a></th><td>            irrep_avir_<span class="o">-&gt;</span>set<span class="p">(</span><span class="mi">0</span><span class="p">,</span> vir_counter<span class="p">,</span> h<span class="p">);</span></td></tr><tr><th id="L177"><a href="#L177">177</a></th><td>            vir_counter<span class="o">++</span><span class="p">;</span></td></tr><tr><th id="L178"><a href="#L178">178</a></th><td>        <span class="p">}</span></td></tr><tr><th id="L179"><a href="#L179">179</a></th><td>    <span class="p">}</span></td></tr><tr><th id="L180"><a href="#L180">180</a></th><td>    AO2USO_<span class="p">.</span>reset<span class="p">();</span></td></tr><tr><th id="L181"><a href="#L181">181</a></th><td></td></tr><tr><th id="L182"><a href="#L182">182</a></th><td>    <span class="k">if</span> <span class="p">(</span>debug_<span class="p">)</span> <span class="p">{</span></td></tr><tr><th id="L183"><a href="#L183">183</a></th><td>        Caocc_<span class="o">-&gt;</span>print<span class="p">();</span></td></tr><tr><th id="L184"><a href="#L184">184</a></th><td>        Cavir_<span class="o">-&gt;</span>print<span class="p">();</span></td></tr><tr><th id="L185"><a href="#L185">185</a></th><td>        eps_aocc_<span class="o">-&gt;</span>print<span class="p">();</span></td></tr><tr><th id="L186"><a href="#L186">186</a></th><td>        eps_avir_<span class="o">-&gt;</span>print<span class="p">();</span></td></tr><tr><th id="L187"><a href="#L187">187</a></th><td>        irrep_aocc_<span class="o">-&gt;</span>print<span class="p">(</span>outfile<span class="p">);</span></td></tr><tr><th id="L188"><a href="#L188">188</a></th><td>        irrep_avir_<span class="o">-&gt;</span>print<span class="p">(</span>outfile<span class="p">);</span></td></tr><tr><th id="L189"><a href="#L189">189</a></th><td>    <span class="p">}</span></td></tr><tr><th id="L190"><a href="#L190">190</a></th><td></td></tr><tr><th id="L191"><a href="#L191">191</a></th><td>    Eref_ <span class="o">=</span> reference_<span class="o">-&gt;</span>reference_energy<span class="p">();</span></td></tr><tr><th id="L192"><a href="#L192">192</a></th><td></td></tr><tr><th id="L193"><a href="#L193">193</a></th><td>    <span class="c1">// Auxiliary basis information</span></td></tr><tr><th id="L194"><a href="#L194">194</a></th><td><span class="c1"></span>    auxiliary_automatic_ <span class="o">=</span> <span class="kc">false</span><span class="p">;</span></td></tr><tr><th id="L195"><a href="#L195">195</a></th><td>    <span class="k">if</span> <span class="p">(</span>options_<span class="p">.</span>get_str<span class="p">(</span><span class="s">"RI_BASIS_MP2"</span><span class="p">)</span> <span class="o">==</span> <span class="s">""</span><span class="p">)</span> <span class="p">{</span></td></tr><tr><th id="L196"><a href="#L196">196</a></th><td>        auxiliary_automatic_ <span class="o">=</span> <span class="kc">true</span><span class="p">;</span></td></tr><tr><th id="L197"><a href="#L197">197</a></th><td>        basisset_<span class="o">-&gt;</span>molecule<span class="p">()</span><span class="o">-&gt;</span>set_basis_all_atoms<span class="p">(</span>options_<span class="p">.</span>get_str<span class="p">(</span><span class="s">"BASIS"</span><span class="p">)</span> <span class="o">+</span> <span class="s">"-RI"</span><span class="p">,</span> <span class="s">"RI_BASIS_MP2"</span><span class="p">);</span></td></tr><tr><th id="L198"><a href="#L198">198</a></th><td>    <span class="p">}</span></td></tr><tr><th id="L199"><a href="#L199">199</a></th><td></td></tr><tr><th id="L200"><a href="#L200">200</a></th><td>    boost<span class="o">::</span>shared_ptr<span class="o">&lt;</span>BasisSetParser<span class="o">&gt;</span> parser<span class="p">(</span><span class="k">new</span> Gaussian94BasisSetParser<span class="p">());</span></td></tr><tr><th id="L201"><a href="#L201">201</a></th><td>    auxiliary_ <span class="o">=</span> BasisSet<span class="o">::</span>construct<span class="p">(</span>parser<span class="p">,</span> basisset_<span class="o">-&gt;</span>molecule<span class="p">(),</span> <span class="s">"RI_BASIS_MP2"</span><span class="p">);</span></td></tr><tr><th id="L202"><a href="#L202">202</a></th><td>    parser<span class="p">.</span>reset<span class="p">();</span></td></tr><tr><th id="L203"><a href="#L203">203</a></th><td></td></tr><tr><th id="L204"><a href="#L204">204</a></th><td>    naux_ <span class="o">=</span> auxiliary_<span class="o">-&gt;</span>nbf<span class="p">();</span></td></tr><tr><th id="L205"><a href="#L205">205</a></th><td></td></tr><tr><th id="L206"><a href="#L206">206</a></th><td>    boost<span class="o">::</span>shared_ptr<span class="o">&lt;</span>IntegralFactory<span class="o">&gt;</span> integral2<span class="p">(</span><span class="k">new</span> IntegralFactory<span class="p">(</span>auxiliary_<span class="p">,</span>auxiliary_<span class="p">,</span>auxiliary_<span class="p">,</span>auxiliary_<span class="p">));</span></td></tr><tr><th id="L207"><a href="#L207">207</a></th><td>    boost<span class="o">::</span>shared_ptr<span class="o">&lt;</span>PetiteList<span class="o">&gt;</span> pet2<span class="p">(</span><span class="k">new</span> PetiteList<span class="p">(</span>auxiliary_<span class="p">,</span> integral2<span class="p">));</span></td></tr><tr><th id="L208"><a href="#L208">208</a></th><td>    AO2USO_aux_ <span class="o">=</span> boost<span class="o">::</span>shared_ptr<span class="o">&lt;</span>Matrix<span class="o">&gt;</span><span class="p">(</span>pet2<span class="o">-&gt;</span>aotoso<span class="p">());</span></td></tr><tr><th id="L209"><a href="#L209">209</a></th><td>  </td></tr><tr><th id="L210"><a href="#L210">210</a></th><td>    <span class="k">if</span> <span class="p">(</span>debug_<span class="p">)</span> <span class="p">{</span></td></tr><tr><th id="L211"><a href="#L211">211</a></th><td>        AO2USO_aux_<span class="o">-&gt;</span>print<span class="p">();</span></td></tr><tr><th id="L212"><a href="#L212">212</a></th><td>        fflush<span class="p">(</span>outfile<span class="p">);</span></td></tr><tr><th id="L213"><a href="#L213">213</a></th><td>    <span class="p">}</span></td></tr><tr><th id="L214"><a href="#L214">214</a></th><td> </td></tr><tr><th id="L215"><a href="#L215">215</a></th><td>    Dimension dim <span class="o">=</span> pet2<span class="o">-&gt;</span>SO_basisdim<span class="p">();</span></td></tr><tr><th id="L216"><a href="#L216">216</a></th><td>    <span class="o">::</span>memset<span class="p">(</span><span class="k">static_cast</span><span class="o">&lt;</span><span class="kt">void</span><span class="o">*&gt;</span><span class="p">(</span>nauxpi_<span class="p">),</span> <span class="sc">'\0'</span><span class="p">,</span> <span class="mi">8</span> <span class="o">*</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">int</span><span class="p">));</span></td></tr><tr><th id="L217"><a href="#L217">217</a></th><td>    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> h <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> h <span class="o">&lt;</span> nirrep_<span class="p">;</span> h<span class="o">++</span><span class="p">)</span> <span class="p">{</span></td></tr><tr><th id="L218"><a href="#L218">218</a></th><td>        nauxpi_<span class="p">[</span>h<span class="p">]</span> <span class="o">=</span> dim<span class="p">[</span>h<span class="p">];</span></td></tr><tr><th id="L219"><a href="#L219">219</a></th><td>    <span class="p">}</span> </td></tr><tr><th id="L220"><a href="#L220">220</a></th><td></td></tr><tr><th id="L221"><a href="#L221">221</a></th><td>    zero_ <span class="o">=</span> BasisSet<span class="o">::</span>zero_ao_basis_set<span class="p">();</span></td></tr><tr><th id="L222"><a href="#L222">222</a></th><td></td></tr><tr><th id="L223"><a href="#L223">223</a></th><td>    max_nauxpi_ <span class="o">=</span> <span class="mi">0</span><span class="p">;</span></td></tr><tr><th id="L224"><a href="#L224">224</a></th><td>    max_naoccpi_ <span class="o">=</span> <span class="mi">0</span><span class="p">;</span></td></tr><tr><th id="L225"><a href="#L225">225</a></th><td>    max_navirpi_ <span class="o">=</span> <span class="mi">0</span><span class="p">;</span></td></tr><tr><th id="L226"><a href="#L226">226</a></th><td></td></tr><tr><th id="L227"><a href="#L227">227</a></th><td>    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> h <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> h <span class="o">&lt;</span> nirrep_<span class="p">;</span> h<span class="o">++</span><span class="p">)</span> <span class="p">{</span></td></tr><tr><th id="L228"><a href="#L228">228</a></th><td>        max_nauxpi_ <span class="o">+=</span> nauxpi_<span class="p">[</span>h<span class="p">];</span></td></tr><tr><th id="L229"><a href="#L229">229</a></th><td>        max_naoccpi_ <span class="o">+=</span> naoccpi_<span class="p">[</span>h<span class="p">];</span></td></tr><tr><th id="L230"><a href="#L230">230</a></th><td>        max_navirpi_ <span class="o">+=</span> navirpi_<span class="p">[</span>h<span class="p">];</span></td></tr><tr><th id="L231"><a href="#L231">231</a></th><td>    <span class="p">}</span></td></tr><tr><th id="L232"><a href="#L232">232</a></th><td><span class="p">}</span></td></tr><tr><th id="L233"><a href="#L233">233</a></th><td><span class="kt">void</span> MAD_MP2<span class="o">::</span>parallel_init<span class="p">()</span></td></tr><tr><th id="L234"><a href="#L234">234</a></th><td><span class="p">{</span></td></tr><tr><th id="L235"><a href="#L235">235</a></th><td>    nproc_   <span class="o">=</span> Communicator<span class="o">::</span>world<span class="o">-&gt;</span>nproc<span class="p">();</span></td></tr><tr><th id="L236"><a href="#L236">236</a></th><td>    mad_nthread_ <span class="o">=</span> Communicator<span class="o">::</span>world<span class="o">-&gt;</span>nthread<span class="p">();</span></td></tr><tr><th id="L237"><a href="#L237">237</a></th><td>    rank_    <span class="o">=</span> Communicator<span class="o">::</span>world<span class="o">-&gt;</span>me<span class="p">();</span></td></tr><tr><th id="L238"><a href="#L238">238</a></th><td>    comm_    <span class="o">=</span> Communicator<span class="o">::</span>world<span class="o">-&gt;</span>communicator<span class="p">();</span></td></tr><tr><th id="L239"><a href="#L239">239</a></th><td></td></tr><tr><th id="L240"><a href="#L240">240</a></th><td>    nia_ <span class="o">=</span> naocc_ <span class="o">*</span> <span class="p">(</span>ULI<span class="p">)</span> navir_<span class="p">;</span></td></tr><tr><th id="L241"><a href="#L241">241</a></th><td></td></tr><tr><th id="L242"><a href="#L242">242</a></th><td>    <span class="kt">int</span> na_delta<span class="p">;</span></td></tr><tr><th id="L243"><a href="#L243">243</a></th><td>    <span class="kt">int</span> na_delta_extra<span class="p">;</span></td></tr><tr><th id="L244"><a href="#L244">244</a></th><td>    <span class="kt">int</span> na_deltac<span class="p">;</span></td></tr><tr><th id="L245"><a href="#L245">245</a></th><td>    <span class="kt">int</span> na_deltac_extra<span class="p">;</span></td></tr><tr><th id="L246"><a href="#L246">246</a></th><td>    std<span class="o">::</span>vector<span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> na_delta_per<span class="p">;</span></td></tr><tr><th id="L247"><a href="#L247">247</a></th><td>    std<span class="o">::</span>vector<span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> na_deltac_per<span class="p">;</span></td></tr><tr><th id="L248"><a href="#L248">248</a></th><td>    std<span class="o">::</span>vector<span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> a_delta_owner<span class="p">;</span></td></tr><tr><th id="L249"><a href="#L249">249</a></th><td>    std<span class="o">::</span>vector<span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> a_deltac_owner<span class="p">;</span></td></tr><tr><th id="L250"><a href="#L250">250</a></th><td></td></tr><tr><th id="L251"><a href="#L251">251</a></th><td>    <span class="c1">// Check for hipsters</span></td></tr><tr><th id="L252"><a href="#L252">252</a></th><td><span class="c1"></span>    <span class="k">if</span> <span class="p">(</span>nproc_ <span class="o">&gt;</span> naocc_ <span class="o">*</span> <span class="p">(</span>ULI<span class="p">)</span> navir_<span class="p">)</span></td></tr><tr><th id="L253"><a href="#L253">253</a></th><td>        <span class="k">throw</span> PSIEXCEPTION<span class="p">(</span><span class="s">"What are you thinking?"</span><span class="p">);</span></td></tr><tr><th id="L254"><a href="#L254">254</a></th><td></td></tr><tr><th id="L255"><a href="#L255">255</a></th><td>    <span class="c1">// Maximum blocks</span></td></tr><tr><th id="L256"><a href="#L256">256</a></th><td><span class="c1"></span>    <span class="k">if</span> <span class="p">(</span>nproc_ <span class="o">&lt;=</span> naocc_<span class="p">)</span> <span class="p">{</span></td></tr><tr><th id="L257"><a href="#L257">257</a></th><td>        <span class="c1">// nproc_ &lt;= naocc_ Case</span></td></tr><tr><th id="L258"><a href="#L258">258</a></th><td><span class="c1"></span>        <span class="kt">int</span> ni_per_proc <span class="o">=</span> naocc_ <span class="o">/</span> nproc_<span class="p">;</span></td></tr><tr><th id="L259"><a href="#L259">259</a></th><td>        <span class="kt">int</span> ni_extra <span class="o">=</span> naocc_ <span class="o">%</span> nproc_<span class="p">;</span></td></tr><tr><th id="L260"><a href="#L260">260</a></th><td></td></tr><tr><th id="L261"><a href="#L261">261</a></th><td>        std<span class="o">::</span>vector<span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> ni_per<span class="p">;</span></td></tr><tr><th id="L262"><a href="#L262">262</a></th><td>        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> ind <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> ind <span class="o">&lt;</span> nproc_<span class="p">;</span> ind<span class="o">++</span><span class="p">)</span> <span class="p">{</span></td></tr><tr><th id="L263"><a href="#L263">263</a></th><td>            <span class="k">if</span> <span class="p">(</span>ind <span class="o">&lt;</span> ni_extra<span class="p">)</span></td></tr><tr><th id="L264"><a href="#L264">264</a></th><td>                ni_per<span class="p">.</span>push_back<span class="p">(</span>ni_per_proc <span class="o">+</span> <span class="mi">1</span><span class="p">);</span></td></tr><tr><th id="L265"><a href="#L265">265</a></th><td>            <span class="k">else</span></td></tr><tr><th id="L266"><a href="#L266">266</a></th><td>                ni_per<span class="p">.</span>push_back<span class="p">(</span>ni_per_proc<span class="p">);</span></td></tr><tr><th id="L267"><a href="#L267">267</a></th><td>        <span class="p">}</span></td></tr><tr><th id="L268"><a href="#L268">268</a></th><td></td></tr><tr><th id="L269"><a href="#L269">269</a></th><td>        std<span class="o">::</span>vector<span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> i_owner<span class="p">;</span></td></tr><tr><th id="L270"><a href="#L270">270</a></th><td>        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> ind <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> ind <span class="o">&lt;</span> nproc_<span class="p">;</span> ind<span class="o">++</span><span class="p">)</span> <span class="p">{</span></td></tr><tr><th id="L271"><a href="#L271">271</a></th><td>            <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> ind2 <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> ind2 <span class="o">&lt;</span> ni_per<span class="p">[</span>ind<span class="p">];</span> ind2<span class="o">++</span><span class="p">)</span> <span class="p">{</span></td></tr><tr><th id="L272"><a href="#L272">272</a></th><td>                i_owner<span class="p">.</span>push_back<span class="p">(</span>ind<span class="p">);</span></td></tr><tr><th id="L273"><a href="#L273">273</a></th><td>            <span class="p">}</span></td></tr><tr><th id="L274"><a href="#L274">274</a></th><td>        <span class="p">}</span></td></tr><tr><th id="L275"><a href="#L275">275</a></th><td></td></tr><tr><th id="L276"><a href="#L276">276</a></th><td>        ULI counter <span class="o">=</span> <span class="mi">0</span><span class="p">;</span></td></tr><tr><th id="L277"><a href="#L277">277</a></th><td>        <span class="k">for</span> <span class="p">(</span>ULI ia <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> ia <span class="o">&lt;</span> nia_<span class="p">;</span> ia<span class="o">++</span><span class="p">)</span> <span class="p">{</span></td></tr><tr><th id="L278"><a href="#L278">278</a></th><td>            <span class="kt">int</span> i <span class="o">=</span> ia <span class="o">/</span> navir_<span class="p">;</span></td></tr><tr><th id="L279"><a href="#L279">279</a></th><td>            <span class="kt">int</span> a <span class="o">=</span> ia <span class="o">%</span> navir_<span class="p">;</span></td></tr><tr><th id="L280"><a href="#L280">280</a></th><td></td></tr><tr><th id="L281"><a href="#L281">281</a></th><td>            ia_owner_<span class="p">.</span>push_back<span class="p">(</span>i_owner<span class="p">[</span>i<span class="p">]);</span></td></tr><tr><th id="L282"><a href="#L282">282</a></th><td>            <span class="k">if</span> <span class="p">(</span>i_owner<span class="p">[</span>i<span class="p">]</span> <span class="o">==</span> rank_<span class="p">)</span> <span class="p">{</span></td></tr><tr><th id="L283"><a href="#L283">283</a></th><td>                ia_local_to_global_<span class="p">.</span>push_back<span class="p">(</span>ia<span class="p">);</span></td></tr><tr><th id="L284"><a href="#L284">284</a></th><td>                ia_global_to_local_<span class="p">[</span>ia<span class="p">]</span><span class="o">=</span> counter<span class="o">++</span><span class="p">;</span></td></tr><tr><th id="L285"><a href="#L285">285</a></th><td>            <span class="p">}</span></td></tr><tr><th id="L286"><a href="#L286">286</a></th><td>        <span class="p">}</span></td></tr><tr><th id="L287"><a href="#L287">287</a></th><td></td></tr><tr><th id="L288"><a href="#L288">288</a></th><td>        <span class="kt">int</span> counter3 <span class="o">=</span> <span class="mi">0</span><span class="p">;</span></td></tr><tr><th id="L289"><a href="#L289">289</a></th><td>        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> i <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> i <span class="o">&lt;</span> naocc_<span class="p">;</span> i<span class="o">++</span><span class="p">)</span> <span class="p">{</span></td></tr><tr><th id="L290"><a href="#L290">290</a></th><td>            <span class="k">if</span> <span class="p">(</span>i_owner<span class="p">[</span>i<span class="p">]</span> <span class="o">==</span> rank_<span class="p">)</span></td></tr><tr><th id="L291"><a href="#L291">291</a></th><td>                i_global_to_local_<span class="p">[</span>i<span class="p">]</span> <span class="o">=</span> counter3<span class="o">++</span><span class="p">;</span></td></tr><tr><th id="L292"><a href="#L292">292</a></th><td></td></tr><tr><th id="L293"><a href="#L293">293</a></th><td>            std<span class="o">::</span>vector<span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> blank1<span class="p">;</span></td></tr><tr><th id="L294"><a href="#L294">294</a></th><td>            blank1<span class="p">.</span>push_back<span class="p">(</span>i_owner<span class="p">[</span>i<span class="p">]);</span></td></tr><tr><th id="L295"><a href="#L295">295</a></th><td>            ablock_owner_<span class="p">.</span>push_back<span class="p">(</span>blank1<span class="p">);</span></td></tr><tr><th id="L296"><a href="#L296">296</a></th><td></td></tr><tr><th id="L297"><a href="#L297">297</a></th><td>            std<span class="o">::</span>vector<span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> blank2<span class="p">;</span></td></tr><tr><th id="L298"><a href="#L298">298</a></th><td>            blank2<span class="p">.</span>push_back<span class="p">(</span><span class="mi">0</span><span class="p">);</span></td></tr><tr><th id="L299"><a href="#L299">299</a></th><td>            ablock_start_<span class="p">.</span>push_back<span class="p">(</span>blank2<span class="p">);</span></td></tr><tr><th id="L300"><a href="#L300">300</a></th><td></td></tr><tr><th id="L301"><a href="#L301">301</a></th><td>            std<span class="o">::</span>vector<span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> blank3<span class="p">;</span></td></tr><tr><th id="L302"><a href="#L302">302</a></th><td>            blank3<span class="p">.</span>push_back<span class="p">(</span>navir_<span class="p">);</span></td></tr><tr><th id="L303"><a href="#L303">303</a></th><td>            ablock_size_<span class="p">.</span>push_back<span class="p">(</span>blank3<span class="p">);</span></td></tr><tr><th id="L304"><a href="#L304">304</a></th><td>        <span class="p">}</span></td></tr><tr><th id="L305"><a href="#L305">305</a></th><td></td></tr><tr><th id="L306"><a href="#L306">306</a></th><td>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span></td></tr><tr><th id="L307"><a href="#L307">307</a></th><td>        <span class="c1">// nproc_ &gt; naocc_ Case</span></td></tr><tr><th id="L308"><a href="#L308">308</a></th><td><span class="c1"></span>        <span class="kt">int</span> na_per_i <span class="o">=</span> nproc_ <span class="o">/</span> naocc_ <span class="o">+</span> <span class="p">(</span>nproc_ <span class="o">%</span> naocc_ <span class="o">==</span> <span class="mi">0</span> <span class="o">?</span> <span class="mi">0</span> <span class="o">:</span> <span class="mi">1</span><span class="p">);</span></td></tr><tr><th id="L309"><a href="#L309">309</a></th><td>        <span class="kt">int</span> ni_delta <span class="o">=</span> na_per_i <span class="o">*</span> naocc_ <span class="o">-</span> nproc_<span class="p">;</span></td></tr><tr><th id="L310"><a href="#L310">310</a></th><td></td></tr><tr><th id="L311"><a href="#L311">311</a></th><td>        na_delta <span class="o">=</span> navir_ <span class="o">/</span> <span class="p">(</span>na_per_i <span class="o">-</span> <span class="mi">1</span><span class="p">);</span></td></tr><tr><th id="L312"><a href="#L312">312</a></th><td>        na_delta_extra <span class="o">=</span> navir_ <span class="o">%</span> <span class="p">(</span>na_per_i <span class="o">-</span> <span class="mi">1</span><span class="p">);</span></td></tr><tr><th id="L313"><a href="#L313">313</a></th><td>        na_deltac <span class="o">=</span> navir_ <span class="o">/</span> <span class="p">(</span>na_per_i<span class="p">);</span></td></tr><tr><th id="L314"><a href="#L314">314</a></th><td>        na_deltac_extra <span class="o">=</span> navir_ <span class="o">%</span> <span class="p">(</span>na_per_i<span class="p">);</span></td></tr><tr><th id="L315"><a href="#L315">315</a></th><td></td></tr><tr><th id="L316"><a href="#L316">316</a></th><td>        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> ind <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> ind <span class="o">&lt;</span> na_per_i <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> ind<span class="o">++</span><span class="p">)</span> <span class="p">{</span></td></tr><tr><th id="L317"><a href="#L317">317</a></th><td>            <span class="k">if</span> <span class="p">(</span>ind <span class="o">&lt;</span> na_delta_extra<span class="p">)</span></td></tr><tr><th id="L318"><a href="#L318">318</a></th><td>                na_delta_per<span class="p">.</span>push_back<span class="p">(</span>na_delta <span class="o">+</span> <span class="mi">1</span><span class="p">);</span></td></tr><tr><th id="L319"><a href="#L319">319</a></th><td>            <span class="k">else</span></td></tr><tr><th id="L320"><a href="#L320">320</a></th><td>                na_delta_per<span class="p">.</span>push_back<span class="p">(</span>na_delta<span class="p">);</span></td></tr><tr><th id="L321"><a href="#L321">321</a></th><td>        <span class="p">}</span></td></tr><tr><th id="L322"><a href="#L322">322</a></th><td>        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> ind <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> ind <span class="o">&lt;</span> na_per_i<span class="p">;</span> ind<span class="o">++</span><span class="p">)</span> <span class="p">{</span></td></tr><tr><th id="L323"><a href="#L323">323</a></th><td>            <span class="k">if</span> <span class="p">(</span>ind <span class="o">&lt;</span> na_deltac_extra<span class="p">)</span></td></tr><tr><th id="L324"><a href="#L324">324</a></th><td>                na_deltac_per<span class="p">.</span>push_back<span class="p">(</span>na_deltac <span class="o">+</span> <span class="mi">1</span><span class="p">);</span></td></tr><tr><th id="L325"><a href="#L325">325</a></th><td>            <span class="k">else</span></td></tr><tr><th id="L326"><a href="#L326">326</a></th><td>                na_deltac_per<span class="p">.</span>push_back<span class="p">(</span>na_deltac<span class="p">);</span></td></tr><tr><th id="L327"><a href="#L327">327</a></th><td>        <span class="p">}</span></td></tr><tr><th id="L328"><a href="#L328">328</a></th><td></td></tr><tr><th id="L329"><a href="#L329">329</a></th><td>        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> ind <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> ind <span class="o">&lt;</span> na_per_i <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> ind<span class="o">++</span><span class="p">)</span> <span class="p">{</span></td></tr><tr><th id="L330"><a href="#L330">330</a></th><td>            <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> ind2 <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> ind2 <span class="o">&lt;</span> na_delta_per<span class="p">[</span>ind<span class="p">];</span> ind2<span class="o">++</span><span class="p">)</span> <span class="p">{</span></td></tr><tr><th id="L331"><a href="#L331">331</a></th><td>                a_delta_owner<span class="p">.</span>push_back<span class="p">(</span>ind<span class="p">);</span></td></tr><tr><th id="L332"><a href="#L332">332</a></th><td>            <span class="p">}</span></td></tr><tr><th id="L333"><a href="#L333">333</a></th><td>        <span class="p">}</span></td></tr><tr><th id="L334"><a href="#L334">334</a></th><td></td></tr><tr><th id="L335"><a href="#L335">335</a></th><td>        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> ind <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> ind <span class="o">&lt;</span> na_per_i<span class="p">;</span> ind<span class="o">++</span><span class="p">)</span> <span class="p">{</span></td></tr><tr><th id="L336"><a href="#L336">336</a></th><td>            <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> ind2 <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> ind2 <span class="o">&lt;</span> na_deltac_per<span class="p">[</span>ind<span class="p">];</span> ind2<span class="o">++</span><span class="p">)</span> <span class="p">{</span></td></tr><tr><th id="L337"><a href="#L337">337</a></th><td>                a_deltac_owner<span class="p">.</span>push_back<span class="p">(</span>ind<span class="p">);</span></td></tr><tr><th id="L338"><a href="#L338">338</a></th><td>            <span class="p">}</span></td></tr><tr><th id="L339"><a href="#L339">339</a></th><td>        <span class="p">}</span></td></tr><tr><th id="L340"><a href="#L340">340</a></th><td></td></tr><tr><th id="L341"><a href="#L341">341</a></th><td>        ULI counter <span class="o">=</span> <span class="mi">0L</span><span class="p">;</span></td></tr><tr><th id="L342"><a href="#L342">342</a></th><td>        <span class="kt">int</span> start_proc <span class="o">=</span> <span class="mi">0</span><span class="p">;</span></td></tr><tr><th id="L343"><a href="#L343">343</a></th><td>        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> i <span class="o">=</span> <span class="mi">0</span> <span class="p">;</span> i <span class="o">&lt;</span> naocc_<span class="p">;</span> i<span class="o">++</span><span class="p">)</span> <span class="p">{</span></td></tr><tr><th id="L344"><a href="#L344">344</a></th><td>            <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> a <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> a <span class="o">&lt;</span> navir_<span class="p">;</span> a<span class="o">++</span><span class="p">)</span> <span class="p">{</span></td></tr><tr><th id="L345"><a href="#L345">345</a></th><td>                <span class="kt">int</span> owner_proc<span class="p">;</span></td></tr><tr><th id="L346"><a href="#L346">346</a></th><td>                <span class="k">if</span> <span class="p">(</span>i <span class="o">&lt;</span> ni_delta<span class="p">)</span> <span class="p">{</span></td></tr><tr><th id="L347"><a href="#L347">347</a></th><td>                    owner_proc <span class="o">=</span> start_proc <span class="o">+</span> a_delta_owner<span class="p">[</span>a<span class="p">];</span></td></tr><tr><th id="L348"><a href="#L348">348</a></th><td>                    <span class="c1">// In the N - 1 block region</span></td></tr><tr><th id="L349"><a href="#L349">349</a></th><td><span class="c1"></span>                <span class="p">}</span> <span class="k">else</span> <span class="p">{</span></td></tr><tr><th id="L350"><a href="#L350">350</a></th><td>                    <span class="c1">// In the N block region</span></td></tr><tr><th id="L351"><a href="#L351">351</a></th><td><span class="c1"></span>                    owner_proc <span class="o">=</span> start_proc <span class="o">+</span> a_deltac_owner<span class="p">[</span>a<span class="p">];</span></td></tr><tr><th id="L352"><a href="#L352">352</a></th><td>                <span class="p">}</span></td></tr><tr><th id="L353"><a href="#L353">353</a></th><td></td></tr><tr><th id="L354"><a href="#L354">354</a></th><td>                <span class="k">if</span> <span class="p">(</span>owner_proc <span class="o">==</span> rank_<span class="p">)</span></td></tr><tr><th id="L355"><a href="#L355">355</a></th><td>                    i_global_to_local_<span class="p">[</span>i<span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span></td></tr><tr><th id="L356"><a href="#L356">356</a></th><td></td></tr><tr><th id="L357"><a href="#L357">357</a></th><td>                ia_owner_<span class="p">.</span>push_back<span class="p">(</span>owner_proc<span class="p">);</span></td></tr><tr><th id="L358"><a href="#L358">358</a></th><td>                <span class="k">if</span> <span class="p">(</span>rank_ <span class="o">==</span> owner_proc<span class="p">)</span> <span class="p">{</span></td></tr><tr><th id="L359"><a href="#L359">359</a></th><td>                    ia_local_to_global_<span class="p">.</span>push_back<span class="p">(</span>i <span class="o">*</span> navir_ <span class="o">+</span> a<span class="p">);</span></td></tr><tr><th id="L360"><a href="#L360">360</a></th><td>                    ia_global_to_local_<span class="p">[</span>i <span class="o">*</span> navir_ <span class="o">+</span> a<span class="p">]</span> <span class="o">=</span> counter<span class="o">++</span><span class="p">;</span></td></tr><tr><th id="L361"><a href="#L361">361</a></th><td>                <span class="p">}</span></td></tr><tr><th id="L362"><a href="#L362">362</a></th><td>            <span class="p">}</span></td></tr><tr><th id="L363"><a href="#L363">363</a></th><td></td></tr><tr><th id="L364"><a href="#L364">364</a></th><td>            std<span class="o">::</span>vector<span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> blank1<span class="p">;</span></td></tr><tr><th id="L365"><a href="#L365">365</a></th><td>            std<span class="o">::</span>vector<span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> blank2<span class="p">;</span></td></tr><tr><th id="L366"><a href="#L366">366</a></th><td>            std<span class="o">::</span>vector<span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> blank3<span class="p">;</span></td></tr><tr><th id="L367"><a href="#L367">367</a></th><td></td></tr><tr><th id="L368"><a href="#L368">368</a></th><td>            <span class="k">if</span> <span class="p">(</span>i <span class="o">&lt;</span> ni_delta<span class="p">)</span> <span class="p">{</span></td></tr><tr><th id="L369"><a href="#L369">369</a></th><td>                <span class="kt">int</span> counter2 <span class="o">=</span> <span class="mi">0</span><span class="p">;</span></td></tr><tr><th id="L370"><a href="#L370">370</a></th><td>                <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> ind <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> ind <span class="o">&lt;</span> na_delta_per<span class="p">.</span>size<span class="p">();</span> ind<span class="o">++</span><span class="p">)</span> <span class="p">{</span></td></tr><tr><th id="L371"><a href="#L371">371</a></th><td>                    blank1<span class="p">.</span>push_back<span class="p">(</span>start_proc <span class="o">+</span> ind<span class="p">);</span></td></tr><tr><th id="L372"><a href="#L372">372</a></th><td>                    blank2<span class="p">.</span>push_back<span class="p">(</span>counter2 <span class="o">+</span> na_delta_per<span class="p">[</span>ind<span class="p">]);</span></td></tr><tr><th id="L373"><a href="#L373">373</a></th><td>                    blank3<span class="p">.</span>push_back<span class="p">(</span>na_delta_per<span class="p">[</span>ind<span class="p">]);</span></td></tr><tr><th id="L374"><a href="#L374">374</a></th><td>                    counter <span class="o">+=</span> na_delta_per<span class="p">[</span>ind<span class="p">];</span></td></tr><tr><th id="L375"><a href="#L375">375</a></th><td>                <span class="p">}</span></td></tr><tr><th id="L376"><a href="#L376">376</a></th><td>            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span></td></tr><tr><th id="L377"><a href="#L377">377</a></th><td>                <span class="kt">int</span> counter2 <span class="o">=</span> <span class="mi">0</span><span class="p">;</span></td></tr><tr><th id="L378"><a href="#L378">378</a></th><td>                <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> ind <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> ind <span class="o">&lt;</span> na_deltac_per<span class="p">.</span>size<span class="p">();</span> ind<span class="o">++</span><span class="p">)</span> <span class="p">{</span></td></tr><tr><th id="L379"><a href="#L379">379</a></th><td>                    blank1<span class="p">.</span>push_back<span class="p">(</span>start_proc <span class="o">+</span> ind<span class="p">);</span></td></tr><tr><th id="L380"><a href="#L380">380</a></th><td>                    blank2<span class="p">.</span>push_back<span class="p">(</span>counter2 <span class="o">+</span> na_deltac_per<span class="p">[</span>ind<span class="p">]);</span></td></tr><tr><th id="L381"><a href="#L381">381</a></th><td>                    blank3<span class="p">.</span>push_back<span class="p">(</span>na_deltac_per<span class="p">[</span>ind<span class="p">]);</span></td></tr><tr><th id="L382"><a href="#L382">382</a></th><td>                    counter <span class="o">+=</span> na_deltac_per<span class="p">[</span>ind<span class="p">];</span></td></tr><tr><th id="L383"><a href="#L383">383</a></th><td>                <span class="p">}</span></td></tr><tr><th id="L384"><a href="#L384">384</a></th><td>            <span class="p">}</span></td></tr><tr><th id="L385"><a href="#L385">385</a></th><td></td></tr><tr><th id="L386"><a href="#L386">386</a></th><td>            ablock_owner_<span class="p">.</span>push_back<span class="p">(</span>blank1<span class="p">);</span></td></tr><tr><th id="L387"><a href="#L387">387</a></th><td>            ablock_start_<span class="p">.</span>push_back<span class="p">(</span>blank2<span class="p">);</span></td></tr><tr><th id="L388"><a href="#L388">388</a></th><td>            ablock_size_<span class="p">.</span>push_back<span class="p">(</span>blank3<span class="p">);</span></td></tr><tr><th id="L389"><a href="#L389">389</a></th><td></td></tr><tr><th id="L390"><a href="#L390">390</a></th><td>            <span class="k">if</span> <span class="p">(</span>i <span class="o">&lt;</span> ni_delta<span class="p">)</span> start_proc <span class="o">+=</span> na_per_i <span class="o">-</span> <span class="mi">1</span><span class="p">;</span></td></tr><tr><th id="L391"><a href="#L391">391</a></th><td>            <span class="k">else</span> start_proc <span class="o">+=</span> na_per_i<span class="p">;</span></td></tr><tr><th id="L392"><a href="#L392">392</a></th><td>        <span class="p">}</span></td></tr><tr><th id="L393"><a href="#L393">393</a></th><td>    <span class="p">}</span></td></tr><tr><th id="L394"><a href="#L394">394</a></th><td>    nia_local_ <span class="o">=</span> ia_local_to_global_<span class="p">.</span>size<span class="p">();</span></td></tr><tr><th id="L395"><a href="#L395">395</a></th><td></td></tr><tr><th id="L396"><a href="#L396">396</a></th><td>    std<span class="o">::</span>set<span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> unique_i<span class="p">;</span></td></tr><tr><th id="L397"><a href="#L397">397</a></th><td>    std<span class="o">::</span>set<span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> unique_a<span class="p">;</span></td></tr><tr><th id="L398"><a href="#L398">398</a></th><td>    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> ia_local <span class="o">=</span> <span class="mi">0</span> <span class="p">;</span> ia_local <span class="o">&lt;</span> nia_local_<span class="p">;</span> ia_local<span class="o">++</span><span class="p">)</span> <span class="p">{</span></td></tr><tr><th id="L399"><a href="#L399">399</a></th><td>        <span class="kt">int</span> ia_global <span class="o">=</span> ia_local_to_global_<span class="p">[</span>ia_local<span class="p">];</span></td></tr><tr><th id="L400"><a href="#L400">400</a></th><td>        <span class="kt">int</span> i <span class="o">=</span> ia_global <span class="o">/</span> navir_<span class="p">;</span></td></tr><tr><th id="L401"><a href="#L401">401</a></th><td>        <span class="kt">int</span> a <span class="o">=</span> ia_global <span class="o">%</span> navir_<span class="p">;</span></td></tr><tr><th id="L402"><a href="#L402">402</a></th><td></td></tr><tr><th id="L403"><a href="#L403">403</a></th><td>        unique_i<span class="p">.</span>insert<span class="p">(</span>i<span class="p">);</span></td></tr><tr><th id="L404"><a href="#L404">404</a></th><td>        unique_a<span class="p">.</span>insert<span class="p">(</span>a<span class="p">);</span></td></tr><tr><th id="L405"><a href="#L405">405</a></th><td>    <span class="p">}</span> </td></tr><tr><th id="L406"><a href="#L406">406</a></th><td>    naocc_local_ <span class="o">=</span> unique_i<span class="p">.</span>size<span class="p">();</span></td></tr><tr><th id="L407"><a href="#L407">407</a></th><td>    navir_local_ <span class="o">=</span> unique_a<span class="p">.</span>size<span class="p">();</span></td></tr><tr><th id="L408"><a href="#L408">408</a></th><td></td></tr><tr><th id="L409"><a href="#L409">409</a></th><td>    <span class="k">for</span> <span class="p">(</span>std<span class="o">::</span>set<span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;::</span>iterator it <span class="o">=</span> unique_i<span class="p">.</span>begin<span class="p">();</span> it <span class="o">!=</span> unique_i<span class="p">.</span>end<span class="p">();</span> it<span class="o">++</span><span class="p">)</span> </td></tr><tr><th id="L410"><a href="#L410">410</a></th><td>        aocc_local_<span class="p">.</span>push_back<span class="p">(</span><span class="o">*</span>it<span class="p">);</span></td></tr><tr><th id="L411"><a href="#L411">411</a></th><td>    <span class="k">for</span> <span class="p">(</span>std<span class="o">::</span>set<span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;::</span>iterator it <span class="o">=</span> unique_a<span class="p">.</span>begin<span class="p">();</span> it <span class="o">!=</span> unique_a<span class="p">.</span>end<span class="p">();</span> it<span class="o">++</span><span class="p">)</span> </td></tr><tr><th id="L412"><a href="#L412">412</a></th><td>        avir_local_<span class="p">.</span>push_back<span class="p">(</span><span class="o">*</span>it<span class="p">);</span></td></tr><tr><th id="L413"><a href="#L413">413</a></th><td></td></tr><tr><th id="L414"><a href="#L414">414</a></th><td>    std<span class="o">::</span>sort<span class="p">(</span>aocc_local_<span class="p">.</span>begin<span class="p">(),</span> aocc_local_<span class="p">.</span>end<span class="p">());</span></td></tr><tr><th id="L415"><a href="#L415">415</a></th><td>    std<span class="o">::</span>sort<span class="p">(</span>avir_local_<span class="p">.</span>begin<span class="p">(),</span> avir_local_<span class="p">.</span>end<span class="p">());</span></td></tr><tr><th id="L416"><a href="#L416">416</a></th><td>    <span class="k">if</span> <span class="p">(</span>debug_<span class="p">)</span> <span class="p">{</span></td></tr><tr><th id="L417"><a href="#L417">417</a></th><td><span class="c1">//        ORDER_PRINT_START</span></td></tr><tr><th id="L418"><a href="#L418">418</a></th><td><span class="c1"></span></td></tr><tr><th id="L419"><a href="#L419">419</a></th><td>        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> dummyproc <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> dummyproc <span class="o">&lt;</span> nproc_<span class="p">;</span> <span class="o">++</span>dummyproc<span class="p">){</span></td></tr><tr><th id="L420"><a href="#L420">420</a></th><td><span class="c1">//            Communicator::world-&gt;bcast(&amp;dummyproc, 1, rank_);</span></td></tr><tr><th id="L421"><a href="#L421">421</a></th><td><span class="c1"></span>            Communicator<span class="o">::</span>world<span class="o">-&gt;</span>sync<span class="p">();</span></td></tr><tr><th id="L422"><a href="#L422">422</a></th><td>            <span class="k">if</span><span class="p">(</span>dummyproc <span class="o">==</span> rank_<span class="p">){</span></td></tr><tr><th id="L423"><a href="#L423">423</a></th><td>                printf<span class="p">(</span><span class="s">"Number of processors: %d</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> nproc_<span class="p">);</span></td></tr><tr><th id="L424"><a href="#L424">424</a></th><td>                printf<span class="p">(</span><span class="s">"Number of threads:    %d</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> omp_nthread_<span class="p">);</span></td></tr><tr><th id="L425"><a href="#L425">425</a></th><td>                printf<span class="p">(</span><span class="s">"Current processors:   %d</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> rank_<span class="p">);</span></td></tr><tr><th id="L426"><a href="#L426">426</a></th><td>                printf<span class="p">(</span><span class="s">"Communicator Type:    %s</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> comm_<span class="p">.</span>c_str<span class="p">());</span></td></tr><tr><th id="L427"><a href="#L427">427</a></th><td>                printf<span class="p">(</span><span class="s">"na_delta:             %d</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> na_delta<span class="p">);</span></td></tr><tr><th id="L428"><a href="#L428">428</a></th><td>                printf<span class="p">(</span><span class="s">"na_delta_extra:       %d</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> na_delta_extra<span class="p">);</span></td></tr><tr><th id="L429"><a href="#L429">429</a></th><td>                printf<span class="p">(</span><span class="s">"na_deltac:            %d</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> na_deltac<span class="p">);</span></td></tr><tr><th id="L430"><a href="#L430">430</a></th><td>                printf<span class="p">(</span><span class="s">"na_deltac_extr        %d</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> na_deltac_extra<span class="p">);</span></td></tr><tr><th id="L431"><a href="#L431">431</a></th><td></td></tr><tr><th id="L432"><a href="#L432">432</a></th><td>                std<span class="o">::</span>vector<span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;::</span>const_iterator iter <span class="o">=</span> na_delta_per<span class="p">.</span>begin<span class="p">();</span></td></tr><tr><th id="L433"><a href="#L433">433</a></th><td>                printf<span class="p">(</span><span class="s">"na_delta_per: "</span><span class="p">);</span></td></tr><tr><th id="L434"><a href="#L434">434</a></th><td>                <span class="k">for</span><span class="p">(;</span> iter <span class="o">!=</span> na_delta_per<span class="p">.</span>end<span class="p">();</span> <span class="o">++</span>iter<span class="p">)</span></td></tr><tr><th id="L435"><a href="#L435">435</a></th><td>                    printf<span class="p">(</span><span class="s">"%d "</span><span class="p">,</span> <span class="o">*</span>iter<span class="p">);</span></td></tr><tr><th id="L436"><a href="#L436">436</a></th><td>                printf<span class="p">(</span><span class="s">"</span><span class="se">\n\n</span><span class="s">"</span><span class="p">);</span></td></tr><tr><th id="L437"><a href="#L437">437</a></th><td></td></tr><tr><th id="L438"><a href="#L438">438</a></th><td>                iter <span class="o">=</span> na_deltac_per<span class="p">.</span>begin<span class="p">();</span></td></tr><tr><th id="L439"><a href="#L439">439</a></th><td>                printf<span class="p">(</span><span class="s">"na_deltac_per: "</span><span class="p">);</span></td></tr><tr><th id="L440"><a href="#L440">440</a></th><td>                <span class="k">for</span><span class="p">(;</span> iter <span class="o">!=</span> na_deltac_per<span class="p">.</span>end<span class="p">();</span> <span class="o">++</span>iter<span class="p">)</span></td></tr><tr><th id="L441"><a href="#L441">441</a></th><td>                    printf<span class="p">(</span><span class="s">"%d "</span><span class="p">,</span> <span class="o">*</span>iter<span class="p">);</span></td></tr><tr><th id="L442"><a href="#L442">442</a></th><td>                printf<span class="p">(</span><span class="s">"</span><span class="se">\n\n</span><span class="s">"</span><span class="p">);</span></td></tr><tr><th id="L443"><a href="#L443">443</a></th><td></td></tr><tr><th id="L444"><a href="#L444">444</a></th><td>                iter <span class="o">=</span> a_delta_owner<span class="p">.</span>begin<span class="p">();</span></td></tr><tr><th id="L445"><a href="#L445">445</a></th><td>                printf<span class="p">(</span><span class="s">"a_delta_owner: "</span><span class="p">);</span></td></tr><tr><th id="L446"><a href="#L446">446</a></th><td>                <span class="k">for</span><span class="p">(;</span> iter <span class="o">!=</span> a_delta_owner<span class="p">.</span>end<span class="p">();</span> <span class="o">++</span>iter<span class="p">)</span></td></tr><tr><th id="L447"><a href="#L447">447</a></th><td>                    printf<span class="p">(</span><span class="s">"%d "</span><span class="p">,</span> <span class="o">*</span>iter<span class="p">);</span></td></tr><tr><th id="L448"><a href="#L448">448</a></th><td>                printf<span class="p">(</span><span class="s">"</span><span class="se">\n\n</span><span class="s">"</span><span class="p">);</span></td></tr><tr><th id="L449"><a href="#L449">449</a></th><td></td></tr><tr><th id="L450"><a href="#L450">450</a></th><td>                iter <span class="o">=</span> a_deltac_owner<span class="p">.</span>begin<span class="p">();</span></td></tr><tr><th id="L451"><a href="#L451">451</a></th><td>                printf<span class="p">(</span><span class="s">"a_deltac_owner: "</span><span class="p">);</span></td></tr><tr><th id="L452"><a href="#L452">452</a></th><td>                <span class="k">for</span><span class="p">(;</span> iter <span class="o">!=</span> a_deltac_owner<span class="p">.</span>end<span class="p">();</span> <span class="o">++</span>iter<span class="p">)</span></td></tr><tr><th id="L453"><a href="#L453">453</a></th><td>                    printf<span class="p">(</span><span class="s">"%d "</span><span class="p">,</span> <span class="o">*</span>iter<span class="p">);</span></td></tr><tr><th id="L454"><a href="#L454">454</a></th><td>                printf<span class="p">(</span><span class="s">"</span><span class="se">\n\n</span><span class="s">"</span><span class="p">);</span></td></tr><tr><th id="L455"><a href="#L455">455</a></th><td></td></tr><tr><th id="L456"><a href="#L456">456</a></th><td>                printf<span class="p">(</span><span class="s">"IA Owner array: "</span><span class="p">);</span></td></tr><tr><th id="L457"><a href="#L457">457</a></th><td>                <span class="k">for</span><span class="p">(</span><span class="kt">int</span> ia <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> ia <span class="o">&lt;</span> nia_<span class="p">;</span> ia<span class="o">++</span><span class="p">)</span></td></tr><tr><th id="L458"><a href="#L458">458</a></th><td>                    printf<span class="p">(</span><span class="s">"%d "</span><span class="p">,</span> ia_owner_<span class="p">[</span>ia<span class="p">]);</span></td></tr><tr><th id="L459"><a href="#L459">459</a></th><td>                printf<span class="p">(</span><span class="s">"</span><span class="se">\n\n</span><span class="s">"</span><span class="p">);</span></td></tr><tr><th id="L460"><a href="#L460">460</a></th><td></td></tr><tr><th id="L461"><a href="#L461">461</a></th><td>                std<span class="o">::</span>map<span class="o">&lt;</span>ULI<span class="p">,</span> <span class="kt">int</span><span class="o">&gt;::</span>const_iterator global_it <span class="o">=</span> ia_global_to_local_<span class="p">.</span>begin<span class="p">();</span></td></tr><tr><th id="L462"><a href="#L462">462</a></th><td>                printf<span class="p">(</span><span class="s">"Global to local array: "</span><span class="p">);</span></td></tr><tr><th id="L463"><a href="#L463">463</a></th><td>                <span class="k">for</span><span class="p">(;</span> global_it <span class="o">!=</span> ia_global_to_local_<span class="p">.</span>end<span class="p">();</span> <span class="o">++</span>global_it<span class="p">)</span></td></tr><tr><th id="L464"><a href="#L464">464</a></th><td>                    printf<span class="p">(</span><span class="s">"%ld -&gt; %d "</span><span class="p">,</span> global_it<span class="o">-&gt;</span>first<span class="p">,</span> global_it<span class="o">-&gt;</span>second<span class="p">);</span></td></tr><tr><th id="L465"><a href="#L465">465</a></th><td>                printf<span class="p">(</span><span class="s">"</span><span class="se">\n\n</span><span class="s">"</span><span class="p">);</span></td></tr><tr><th id="L466"><a href="#L466">466</a></th><td></td></tr><tr><th id="L467"><a href="#L467">467</a></th><td>                std<span class="o">::</span>vector<span class="o">&lt;</span>ULI<span class="o">&gt;::</span>const_iterator local_it <span class="o">=</span> ia_local_to_global_<span class="p">.</span>begin<span class="p">();</span></td></tr><tr><th id="L468"><a href="#L468">468</a></th><td>                printf<span class="p">(</span><span class="s">"Local to global array: "</span><span class="p">);</span></td></tr><tr><th id="L469"><a href="#L469">469</a></th><td>                <span class="k">for</span><span class="p">(;</span> local_it <span class="o">!=</span> ia_local_to_global_<span class="p">.</span>end<span class="p">();</span> <span class="o">++</span>local_it<span class="p">)</span></td></tr><tr><th id="L470"><a href="#L470">470</a></th><td>                    printf<span class="p">(</span><span class="s">"%ld "</span><span class="p">,</span> <span class="o">*</span>local_it<span class="p">);</span></td></tr><tr><th id="L471"><a href="#L471">471</a></th><td>                printf<span class="p">(</span><span class="s">"</span><span class="se">\n\n</span><span class="s">"</span><span class="p">);</span></td></tr><tr><th id="L472"><a href="#L472">472</a></th><td></td></tr><tr><th id="L473"><a href="#L473">473</a></th><td>                printf<span class="p">(</span><span class="s">"There are %d local occ and %d local vir orbitals, giving %ld local pairs</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span></td></tr><tr><th id="L474"><a href="#L474">474</a></th><td>                      naocc_local_<span class="p">,</span> navir_local_<span class="p">,</span> nia_local_<span class="p">);</span></td></tr><tr><th id="L475"><a href="#L475">475</a></th><td></td></tr><tr><th id="L476"><a href="#L476">476</a></th><td>                std<span class="o">::</span>vector<span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;::</span>const_iterator aocc_it <span class="o">=</span> aocc_local_<span class="p">.</span>begin<span class="p">();</span></td></tr><tr><th id="L477"><a href="#L477">477</a></th><td>                printf<span class="p">(</span><span class="s">"aocc_local values: "</span><span class="p">);</span></td></tr><tr><th id="L478"><a href="#L478">478</a></th><td>                <span class="k">for</span><span class="p">(;</span> aocc_it <span class="o">!=</span> aocc_local_<span class="p">.</span>end<span class="p">();</span> <span class="o">++</span>aocc_it<span class="p">)</span></td></tr><tr><th id="L479"><a href="#L479">479</a></th><td>                    printf<span class="p">(</span><span class="s">"%d "</span><span class="p">,</span> <span class="o">*</span>aocc_it<span class="p">);</span></td></tr><tr><th id="L480"><a href="#L480">480</a></th><td>                printf<span class="p">(</span><span class="s">"</span><span class="se">\n\n</span><span class="s">"</span><span class="p">);</span></td></tr><tr><th id="L481"><a href="#L481">481</a></th><td></td></tr><tr><th id="L482"><a href="#L482">482</a></th><td>                std<span class="o">::</span>vector<span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;::</span>const_iterator avir_it <span class="o">=</span> avir_local_<span class="p">.</span>begin<span class="p">();</span></td></tr><tr><th id="L483"><a href="#L483">483</a></th><td>                printf<span class="p">(</span><span class="s">"avir_local values: "</span><span class="p">);</span></td></tr><tr><th id="L484"><a href="#L484">484</a></th><td>                <span class="k">for</span><span class="p">(;</span> avir_it <span class="o">!=</span> avir_local_<span class="p">.</span>end<span class="p">();</span> <span class="o">++</span>avir_it<span class="p">)</span></td></tr><tr><th id="L485"><a href="#L485">485</a></th><td>                    printf<span class="p">(</span><span class="s">"%d "</span><span class="p">,</span> <span class="o">*</span>avir_it<span class="p">);</span></td></tr><tr><th id="L486"><a href="#L486">486</a></th><td>                printf<span class="p">(</span><span class="s">"</span><span class="se">\n\n</span><span class="s">"</span><span class="p">);</span></td></tr><tr><th id="L487"><a href="#L487">487</a></th><td></td></tr><tr><th id="L488"><a href="#L488">488</a></th><td>                std<span class="o">::</span>map<span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="o">&gt;::</span>const_iterator i_global_it <span class="o">=</span> i_global_to_local_<span class="p">.</span>begin<span class="p">();</span></td></tr><tr><th id="L489"><a href="#L489">489</a></th><td>                printf<span class="p">(</span><span class="s">"i Global to local array: "</span><span class="p">);</span></td></tr><tr><th id="L490"><a href="#L490">490</a></th><td>                <span class="k">for</span><span class="p">(;</span> i_global_it <span class="o">!=</span> i_global_to_local_<span class="p">.</span>end<span class="p">();</span> <span class="o">++</span>i_global_it<span class="p">)</span></td></tr><tr><th id="L491"><a href="#L491">491</a></th><td>                    printf<span class="p">(</span><span class="s">"%d -&gt; %d "</span><span class="p">,</span> i_global_it<span class="o">-&gt;</span>first<span class="p">,</span> i_global_it<span class="o">-&gt;</span>second<span class="p">);</span></td></tr><tr><th id="L492"><a href="#L492">492</a></th><td>                printf<span class="p">(</span><span class="s">"</span><span class="se">\n\n</span><span class="s">"</span><span class="p">);</span></td></tr><tr><th id="L493"><a href="#L493">493</a></th><td>            <span class="p">}</span></td></tr><tr><th id="L494"><a href="#L494">494</a></th><td>        <span class="p">}</span></td></tr><tr><th id="L495"><a href="#L495">495</a></th><td></td></tr><tr><th id="L496"><a href="#L496">496</a></th><td><span class="c1">//        ORDER_PRINT_END</span></td></tr><tr><th id="L497"><a href="#L497">497</a></th><td><span class="c1"></span>    <span class="p">}</span></td></tr><tr><th id="L498"><a href="#L498">498</a></th><td></td></tr><tr><th id="L499"><a href="#L499">499</a></th><td><span class="p">}</span></td></tr><tr><th id="L500"><a href="#L500">500</a></th><td><span class="kt">void</span> MAD_MP2<span class="o">::</span>print_header<span class="p">()</span></td></tr><tr><th id="L501"><a href="#L501">501</a></th><td><span class="p">{</span></td></tr><tr><th id="L502"><a href="#L502">502</a></th><td>    fprintf<span class="p">(</span>outfile<span class="p">,</span> <span class="s">"</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span></td></tr><tr><th id="L503"><a href="#L503">503</a></th><td>    fprintf<span class="p">(</span>outfile<span class="p">,</span> <span class="s">"         ------------------------------------------------------------</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span></td></tr><tr><th id="L504"><a href="#L504">504</a></th><td>    fprintf<span class="p">(</span>outfile<span class="p">,</span> <span class="s">"                                DFMP2 MADNESS</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span></td></tr><tr><th id="L505"><a href="#L505">505</a></th><td>    fprintf<span class="p">(</span>outfile<span class="p">,</span> <span class="s">"                          %8s Implementation</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="p">(</span>options_<span class="p">.</span>get_bool<span class="p">(</span><span class="s">"PARALLEL"</span><span class="p">)</span> <span class="o">?</span> <span class="s">"MADNESS"</span> <span class="o">:</span> <span class="s">"SERIAL"</span><span class="p">));</span></td></tr><tr><th id="L506"><a href="#L506">506</a></th><td>    fprintf<span class="p">(</span>outfile<span class="p">,</span> <span class="s">"                              %6s Algorithm</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> options_<span class="p">.</span>get_str<span class="p">(</span><span class="s">"MP2_ALGORITHM"</span><span class="p">).</span>c_str<span class="p">());</span></td></tr><tr><th id="L507"><a href="#L507">507</a></th><td>    fprintf<span class="p">(</span>outfile<span class="p">,</span> <span class="s">"                        %3d Threads, %6ld MiB Core</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> omp_nthread_<span class="p">,</span> memory_ <span class="o">/</span> <span class="mi">1000000L</span><span class="p">);</span></td></tr><tr><th id="L508"><a href="#L508">508</a></th><td>    fprintf<span class="p">(</span>outfile<span class="p">,</span> <span class="s">"          Ben Mintz, Rob Parrish, Andy Simmonnett, and Justin Turney</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span> </td></tr><tr><th id="L509"><a href="#L509">509</a></th><td>    fprintf<span class="p">(</span>outfile<span class="p">,</span> <span class="s">"         ------------------------------------------------------------</span><span class="se">\n\n</span><span class="s">"</span><span class="p">);</span></td></tr><tr><th id="L510"><a href="#L510">510</a></th><td></td></tr><tr><th id="L511"><a href="#L511">511</a></th><td>    fprintf<span class="p">(</span>outfile<span class="p">,</span> <span class="s">" ==&gt; Geometry &lt;==</span><span class="se">\n\n</span><span class="s">"</span><span class="p">);</span></td></tr><tr><th id="L512"><a href="#L512">512</a></th><td>    molecule_<span class="o">-&gt;</span>print<span class="p">();</span></td></tr><tr><th id="L513"><a href="#L513">513</a></th><td>    fprintf<span class="p">(</span>outfile<span class="p">,</span> <span class="s">"  Nuclear repulsion = %20.15f</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> basisset_<span class="o">-&gt;</span>molecule<span class="p">()</span><span class="o">-&gt;</span>nuclear_repulsion_energy<span class="p">());</span></td></tr><tr><th id="L514"><a href="#L514">514</a></th><td>    fprintf<span class="p">(</span>outfile<span class="p">,</span> <span class="s">"  Reference energy  = %20.15f</span><span class="se">\n\n</span><span class="s">"</span><span class="p">,</span> Eref_<span class="p">);</span> </td></tr><tr><th id="L515"><a href="#L515">515</a></th><td></td></tr><tr><th id="L516"><a href="#L516">516</a></th><td>    fprintf<span class="p">(</span>outfile<span class="p">,</span> <span class="s">"  ==&gt; Primary Basis &lt;==</span><span class="se">\n\n</span><span class="s">"</span><span class="p">);</span></td></tr><tr><th id="L517"><a href="#L517">517</a></th><td>    basisset_<span class="o">-&gt;</span>print_by_level<span class="p">(</span>outfile<span class="p">,</span> print_<span class="p">);</span></td></tr><tr><th id="L518"><a href="#L518">518</a></th><td></td></tr><tr><th id="L519"><a href="#L519">519</a></th><td>    fprintf<span class="p">(</span>outfile<span class="p">,</span> <span class="s">"  ==&gt; Auxiliary Basis &lt;==</span><span class="se">\n\n</span><span class="s">"</span><span class="p">);</span></td></tr><tr><th id="L520"><a href="#L520">520</a></th><td>    <span class="k">if</span> <span class="p">(</span>auxiliary_automatic_<span class="p">)</span> <span class="p">{</span></td></tr><tr><th id="L521"><a href="#L521">521</a></th><td>        fprintf<span class="p">(</span>outfile<span class="p">,</span> <span class="s">"  No auxiliary basis selected, defaulting to %s-RI</span><span class="se">\n\n</span><span class="s">"</span><span class="p">,</span> options_<span class="p">.</span>get_str<span class="p">(</span><span class="s">"BASIS"</span><span class="p">).</span>c_str<span class="p">());</span> </td></tr><tr><th id="L522"><a href="#L522">522</a></th><td>    <span class="p">}</span></td></tr><tr><th id="L523"><a href="#L523">523</a></th><td>    auxiliary_<span class="o">-&gt;</span>print_by_level<span class="p">(</span>outfile<span class="p">,</span> print_<span class="p">);</span></td></tr><tr><th id="L524"><a href="#L524">524</a></th><td></td></tr><tr><th id="L525"><a href="#L525">525</a></th><td>    fprintf<span class="p">(</span>outfile<span class="p">,</span> <span class="s">"  ==&gt; Orbital Dimensions &lt;==</span><span class="se">\n\n</span><span class="s">"</span><span class="p">);</span></td></tr><tr><th id="L526"><a href="#L526">526</a></th><td>    CharacterTable ct <span class="o">=</span> molecule_<span class="o">-&gt;</span>point_group<span class="p">()</span><span class="o">-&gt;</span>char_table<span class="p">();</span></td></tr><tr><th id="L527"><a href="#L527">527</a></th><td>    fprintf<span class="p">(</span>outfile<span class="p">,</span> <span class="s">"   ------------------------------------------------------------------</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span></td></tr><tr><th id="L528"><a href="#L528">528</a></th><td>    fprintf<span class="p">(</span>outfile<span class="p">,</span> <span class="s">"    Irrep    %6s %6s %6s %6s %6s %6s %6s %6s</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> </td></tr><tr><th id="L529"><a href="#L529">529</a></th><td>            <span class="s">"Nso"</span><span class="p">,</span> <span class="s">"Nmo"</span><span class="p">,</span> <span class="s">"Nfocc"</span><span class="p">,</span> <span class="s">"Nocc"</span><span class="p">,</span> <span class="s">"Naocc"</span><span class="p">,</span> <span class="s">"Navir"</span><span class="p">,</span> <span class="s">"Nvir"</span><span class="p">,</span> <span class="s">"Nfvir"</span><span class="p">);</span></td></tr><tr><th id="L530"><a href="#L530">530</a></th><td>    fprintf<span class="p">(</span>outfile<span class="p">,</span> <span class="s">"   ------------------------------------------------------------------</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span></td></tr><tr><th id="L531"><a href="#L531">531</a></th><td>    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> h<span class="o">=</span> <span class="mi">0</span><span class="p">;</span> h <span class="o">&lt;</span> nirrep_<span class="p">;</span> h<span class="o">++</span><span class="p">)</span> <span class="p">{</span></td></tr><tr><th id="L532"><a href="#L532">532</a></th><td>        fprintf<span class="p">(</span>outfile<span class="p">,</span> <span class="s">"    %-3s      %6d %6d %6d %6d %6d %6d %6d %6d</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> </td></tr><tr><th id="L533"><a href="#L533">533</a></th><td>            ct<span class="p">.</span>gamma<span class="p">(</span>h<span class="p">).</span>symbol<span class="p">(),</span> nsopi_<span class="p">[</span>h<span class="p">],</span> nmopi_<span class="p">[</span>h<span class="p">],</span> frzcpi_<span class="p">[</span>h<span class="p">],</span> doccpi_<span class="p">[</span>h<span class="p">],</span> </td></tr><tr><th id="L534"><a href="#L534">534</a></th><td>            doccpi_<span class="p">[</span>h<span class="p">]</span> <span class="o">-</span> frzcpi_<span class="p">[</span>h<span class="p">],</span> nmopi_<span class="p">[</span>h<span class="p">]</span> <span class="o">-</span> doccpi_<span class="p">[</span>h<span class="p">]</span> <span class="o">-</span> frzvpi_<span class="p">[</span>h<span class="p">],</span> nmopi_<span class="p">[</span>h<span class="p">]</span> <span class="o">-</span> doccpi_<span class="p">[</span>h<span class="p">],</span></td></tr><tr><th id="L535"><a href="#L535">535</a></th><td>            frzvpi_<span class="p">[</span>h<span class="p">]);</span></td></tr><tr><th id="L536"><a href="#L536">536</a></th><td>    <span class="p">}</span></td></tr><tr><th id="L537"><a href="#L537">537</a></th><td>    fprintf<span class="p">(</span>outfile<span class="p">,</span> <span class="s">"   ------------------------------------------------------------------</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span></td></tr><tr><th id="L538"><a href="#L538">538</a></th><td>    fprintf<span class="p">(</span>outfile<span class="p">,</span> <span class="s">"    Total    %6d %6d %6d %6d %6d %6d %6d %6d</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> </td></tr><tr><th id="L539"><a href="#L539">539</a></th><td>        nso_<span class="p">,</span> nmo_<span class="p">,</span> nfocc_<span class="p">,</span> nfocc_ <span class="o">+</span> naocc_<span class="p">,</span> naocc_<span class="p">,</span> navir_<span class="p">,</span> navir_ <span class="o">+</span> nfvir_<span class="p">,</span> nfvir_<span class="p">);</span>  </td></tr><tr><th id="L540"><a href="#L540">540</a></th><td>    fprintf<span class="p">(</span>outfile<span class="p">,</span> <span class="s">"   ------------------------------------------------------------------</span><span class="se">\n\n</span><span class="s">"</span><span class="p">);</span></td></tr><tr><th id="L541"><a href="#L541">541</a></th><td>    fflush<span class="p">(</span>outfile<span class="p">);</span></td></tr><tr><th id="L542"><a href="#L542">542</a></th><td><span class="p">}</span></td></tr><tr><th id="L543"><a href="#L543">543</a></th><td><span class="kt">void</span> MAD_MP2<span class="o">::</span>check_memory<span class="p">()</span></td></tr><tr><th id="L544"><a href="#L544">544</a></th><td><span class="p">{</span></td></tr><tr><th id="L545"><a href="#L545">545</a></th><td><span class="cp">    #define MEM_SAFETY 0.8</span></td></tr><tr><th id="L546"><a href="#L546">546</a></th><td><span class="cp"></span></td></tr><tr><th id="L547"><a href="#L547">547</a></th><td>    fprintf<span class="p">(</span>outfile<span class="p">,</span> <span class="s">"  ==&gt; Memory Checking &lt;==</span><span class="se">\n\n</span><span class="s">"</span><span class="p">);</span></td></tr><tr><th id="L548"><a href="#L548">548</a></th><td></td></tr><tr><th id="L549"><a href="#L549">549</a></th><td>    <span class="kt">int</span> max_pshell <span class="o">=</span> auxiliary_<span class="o">-&gt;</span>max_function_per_shell<span class="p">();</span></td></tr><tr><th id="L550"><a href="#L550">550</a></th><td></td></tr><tr><th id="L551"><a href="#L551">551</a></th><td>    <span class="c1">// Required memory, doubles</span></td></tr><tr><th id="L552"><a href="#L552">552</a></th><td><span class="c1"></span>    ULI required <span class="o">=</span> <span class="mi">0L</span><span class="p">;</span></td></tr><tr><th id="L553"><a href="#L553">553</a></th><td>    ULI overhead <span class="o">=</span> <span class="mi">0L</span><span class="p">;</span></td></tr><tr><th id="L554"><a href="#L554">554</a></th><td></td></tr><tr><th id="L555"><a href="#L555">555</a></th><td>    <span class="c1">// Tensor Sizes</span></td></tr><tr><th id="L556"><a href="#L556">556</a></th><td><span class="c1"></span>    ULI Qia_mem_AO <span class="o">=</span> naux_ <span class="o">*</span> <span class="p">(</span>ULI<span class="p">)</span> naocc_ <span class="o">*</span> navir_<span class="p">;</span></td></tr><tr><th id="L557"><a href="#L557">557</a></th><td>    ULI J_mem_AO   <span class="o">=</span> naux_ <span class="o">*</span> <span class="p">(</span>ULI<span class="p">)</span> naux_<span class="p">;</span></td></tr><tr><th id="L558"><a href="#L558">558</a></th><td></td></tr><tr><th id="L559"><a href="#L559">559</a></th><td>    ULI J_mem_SO   <span class="o">=</span> <span class="mi">0L</span><span class="p">;</span></td></tr><tr><th id="L560"><a href="#L560">560</a></th><td>    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> h <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> h <span class="o">&lt;</span> nirrep_<span class="p">;</span> h<span class="o">++</span><span class="p">)</span> <span class="p">{</span></td></tr><tr><th id="L561"><a href="#L561">561</a></th><td>        J_mem_SO <span class="o">+=</span> nauxpi_<span class="p">[</span>h<span class="p">]</span> <span class="o">*</span> <span class="p">(</span>ULI<span class="p">)</span> nauxpi_<span class="p">[</span>h<span class="p">];</span></td></tr><tr><th id="L562"><a href="#L562">562</a></th><td>    <span class="p">}</span></td></tr><tr><th id="L563"><a href="#L563">563</a></th><td>    ULI Qia_mem_SO <span class="o">=</span> <span class="mi">0L</span><span class="p">;</span></td></tr><tr><th id="L564"><a href="#L564">564</a></th><td>    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> hQ <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> hQ <span class="o">&lt;</span> nirrep_<span class="p">;</span> hQ<span class="o">++</span><span class="p">)</span> <span class="p">{</span></td></tr><tr><th id="L565"><a href="#L565">565</a></th><td>        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> hi <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> hi <span class="o">&lt;</span> nirrep_<span class="p">;</span> hi<span class="o">++</span><span class="p">)</span> <span class="p">{</span></td></tr><tr><th id="L566"><a href="#L566">566</a></th><td>            <span class="kt">int</span> ha <span class="o">=</span> hi <span class="o">^</span> hQ<span class="p">;</span></td></tr><tr><th id="L567"><a href="#L567">567</a></th><td>            Qia_mem_SO <span class="o">+=</span> nauxpi_<span class="p">[</span>hQ<span class="p">]</span> <span class="o">*</span> naoccpi_<span class="p">[</span>hi<span class="p">]</span> <span class="o">*</span> navirpi_<span class="p">[</span>ha<span class="p">];</span></td></tr><tr><th id="L568"><a href="#L568">568</a></th><td>        <span class="p">}</span></td></tr><tr><th id="L569"><a href="#L569">569</a></th><td>    <span class="p">}</span></td></tr><tr><th id="L570"><a href="#L570">570</a></th><td>    ULI I_SO <span class="o">=</span> <span class="mi">0L</span><span class="p">;</span></td></tr><tr><th id="L571"><a href="#L571">571</a></th><td>    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> hi <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> hi <span class="o">&lt;</span> nirrep_<span class="p">;</span> hi<span class="o">++</span><span class="p">)</span> <span class="p">{</span></td></tr><tr><th id="L572"><a href="#L572">572</a></th><td>        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> hj <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> hj <span class="o">&lt;</span> nirrep_<span class="p">;</span> hj<span class="o">++</span><span class="p">)</span> <span class="p">{</span></td></tr><tr><th id="L573"><a href="#L573">573</a></th><td>            ULI trial <span class="o">=</span> <span class="mi">0L</span><span class="p">;</span></td></tr><tr><th id="L574"><a href="#L574">574</a></th><td>            <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> hQ <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> hQ <span class="o">&lt;</span> nirrep_<span class="p">;</span> hQ<span class="o">++</span><span class="p">)</span> <span class="p">{</span></td></tr><tr><th id="L575"><a href="#L575">575</a></th><td>                <span class="kt">int</span> ha <span class="o">=</span> hi <span class="o">^</span> hQ<span class="p">;</span></td></tr><tr><th id="L576"><a href="#L576">576</a></th><td>                <span class="kt">int</span> hb <span class="o">=</span> hj <span class="o">^</span> hQ<span class="p">;</span></td></tr><tr><th id="L577"><a href="#L577">577</a></th><td>                trial <span class="o">+=</span> navirpi_<span class="p">[</span>ha<span class="p">]</span> <span class="o">*</span> <span class="p">(</span>ULI<span class="p">)</span> navirpi_<span class="p">[</span>hb<span class="p">];</span></td></tr><tr><th id="L578"><a href="#L578">578</a></th><td>            <span class="p">}</span></td></tr><tr><th id="L579"><a href="#L579">579</a></th><td>            I_SO <span class="o">=</span> <span class="p">(</span>I_SO <span class="o">&gt;</span> trial <span class="o">?</span> I_SO <span class="o">:</span> trial<span class="p">);</span> </td></tr><tr><th id="L580"><a href="#L580">580</a></th><td>        <span class="p">}</span></td></tr><tr><th id="L581"><a href="#L581">581</a></th><td>    <span class="p">}</span></td></tr><tr><th id="L582"><a href="#L582">582</a></th><td></td></tr><tr><th id="L583"><a href="#L583">583</a></th><td>    <span class="c1">// Rate Limiting Operations</span></td></tr><tr><th id="L584"><a href="#L584">584</a></th><td><span class="c1"></span>    ULI Amn_mem <span class="o">=</span> naux_ <span class="o">*</span> <span class="p">(</span>ULI<span class="p">)</span> <span class="p">(</span>nso_ <span class="o">*</span> <span class="p">(</span>ULI<span class="p">)</span> nso_ <span class="o">+</span></td></tr><tr><th id="L585"><a href="#L585">585</a></th><td>                                 nso_ <span class="o">*</span> <span class="p">(</span>ULI<span class="p">)</span> naocc_<span class="p">)</span> <span class="o">+</span></td></tr><tr><th id="L586"><a href="#L586">586</a></th><td>        Qia_mem_AO<span class="p">;</span> <span class="c1">// (A|ia) </span></td></tr><tr><th id="L587"><a href="#L587">587</a></th><td><span class="c1"></span>    ULI Aia_USO_mem <span class="o">=</span> Qia_mem_SO <span class="o">+</span> Qia_mem_AO <span class="o">+</span> </td></tr><tr><th id="L588"><a href="#L588">588</a></th><td>        max_naoccpi_ <span class="o">*</span> <span class="p">(</span>ULI<span class="p">)</span> max_navirpi_ <span class="o">*</span> naux_<span class="p">;</span> <span class="c1">// (A'|ia) </span></td></tr><tr><th id="L589"><a href="#L589">589</a></th><td><span class="c1"></span>    ULI Aia_mem <span class="o">=</span> Qia_mem_SO <span class="o">+</span> J_mem_SO <span class="o">+</span> </td></tr><tr><th id="L590"><a href="#L590">590</a></th><td>        max_nauxpi_ <span class="o">*</span> <span class="p">(</span>ULI<span class="p">)</span> max_nauxpi_<span class="p">;</span> <span class="c1">// (Q'|ia)</span></td></tr><tr><th id="L591"><a href="#L591">591</a></th><td><span class="c1"></span>    ULI J_USO_mem <span class="o">=</span> J_mem_AO <span class="o">+</span> J_mem_SO <span class="o">+</span> </td></tr><tr><th id="L592"><a href="#L592">592</a></th><td>        naux_ <span class="o">*</span> <span class="p">(</span>ULI<span class="p">)</span> max_nauxpi_ <span class="o">+</span> Qia_mem_SO<span class="p">;</span> <span class="c1">// (A'|B')</span></td></tr><tr><th id="L593"><a href="#L593">593</a></th><td><span class="c1"></span>    ULI I_mem <span class="o">=</span> omp_nthread_ <span class="o">*</span> I_SO <span class="o">+</span> Qia_mem_SO<span class="p">;</span> <span class="c1">// Conventional energy</span></td></tr><tr><th id="L594"><a href="#L594">594</a></th><td><span class="c1"></span>    <span class="k">if</span> <span class="p">(</span>options_<span class="p">.</span>get_str<span class="p">(</span><span class="s">"MP2_ALGORITHM"</span><span class="p">)</span> <span class="o">==</span> <span class="s">"DFMP2J"</span><span class="p">)</span> </td></tr><tr><th id="L595"><a href="#L595">595</a></th><td>        I_mem <span class="o">=</span> <span class="mi">2L</span> <span class="o">*</span> Qia_mem_SO <span class="o">+</span> J_mem_SO<span class="p">;</span> <span class="c1">// Rough estimate for now </span></td></tr><tr><th id="L596"><a href="#L596">596</a></th><td><span class="c1"></span></td></tr><tr><th id="L597"><a href="#L597">597</a></th><td>    required <span class="o">=</span> <span class="p">(</span>required <span class="o">&gt;</span> Amn_mem <span class="o">?</span> required <span class="o">:</span> Amn_mem<span class="p">);</span></td></tr><tr><th id="L598"><a href="#L598">598</a></th><td>    <span class="k">if</span> <span class="p">(</span>nirrep_ <span class="o">&gt;</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span></td></tr><tr><th id="L599"><a href="#L599">599</a></th><td>        required <span class="o">=</span> <span class="p">(</span>required <span class="o">&gt;</span> Aia_USO_mem <span class="o">?</span> required <span class="o">:</span> Aia_USO_mem<span class="p">);</span></td></tr><tr><th id="L600"><a href="#L600">600</a></th><td>        required <span class="o">=</span> <span class="p">(</span>required <span class="o">&gt;</span> J_USO_mem <span class="o">?</span> required <span class="o">:</span> J_USO_mem<span class="p">);</span></td></tr><tr><th id="L601"><a href="#L601">601</a></th><td>    <span class="p">}</span></td></tr><tr><th id="L602"><a href="#L602">602</a></th><td>    required <span class="o">=</span> <span class="p">(</span>required <span class="o">&gt;</span> Aia_mem <span class="o">?</span> required <span class="o">:</span> Aia_mem<span class="p">);</span></td></tr><tr><th id="L603"><a href="#L603">603</a></th><td>    required <span class="o">=</span> <span class="p">(</span>required <span class="o">&gt;</span> I_mem <span class="o">?</span> required <span class="o">:</span> I_mem<span class="p">);</span></td></tr><tr><th id="L604"><a href="#L604">604</a></th><td></td></tr><tr><th id="L605"><a href="#L605">605</a></th><td>    <span class="c1">//Overhead</span></td></tr><tr><th id="L606"><a href="#L606">606</a></th><td><span class="c1"></span>    overhead <span class="o">+=</span> J_mem_AO<span class="p">;</span> <span class="c1">// AO2USO_aux_</span></td></tr><tr><th id="L607"><a href="#L607">607</a></th><td><span class="c1"></span>    required <span class="o">+=</span> overhead<span class="p">;</span></td></tr><tr><th id="L608"><a href="#L608">608</a></th><td></td></tr><tr><th id="L609"><a href="#L609">609</a></th><td>    fprintf<span class="p">(</span>outfile<span class="p">,</span> <span class="s">"    ------------------------------------------------------------</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span></td></tr><tr><th id="L610"><a href="#L610">610</a></th><td>    fprintf<span class="p">(</span>outfile<span class="p">,</span> <span class="s">"     %-20s %18s %18s</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="s">"Tensor/Operation"</span><span class="p">,</span> <span class="s">"Doubles"</span><span class="p">,</span> <span class="s">"MiB"</span><span class="p">);</span></td></tr><tr><th id="L611"><a href="#L611">611</a></th><td>    fprintf<span class="p">(</span>outfile<span class="p">,</span> <span class="s">"    ------------------------------------------------------------</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span></td></tr><tr><th id="L612"><a href="#L612">612</a></th><td>    fprintf<span class="p">(</span>outfile<span class="p">,</span> <span class="s">"     %-20s %18ld %18ld</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="s">"(A|B) Tensor AO"</span><span class="p">,</span> J_mem_AO<span class="p">,</span> J_mem_AO <span class="o">*</span> <span class="mi">8L</span> <span class="o">/</span> <span class="mi">1000000L</span><span class="p">);</span></td></tr><tr><th id="L613"><a href="#L613">613</a></th><td>    fprintf<span class="p">(</span>outfile<span class="p">,</span> <span class="s">"     %-20s %18ld %18ld</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="s">"(A|B) Tensor USO"</span><span class="p">,</span> J_mem_SO<span class="p">,</span> J_mem_SO <span class="o">*</span> <span class="mi">8L</span> <span class="o">/</span> <span class="mi">1000000L</span><span class="p">);</span></td></tr><tr><th id="L614"><a href="#L614">614</a></th><td>    fprintf<span class="p">(</span>outfile<span class="p">,</span> <span class="s">"     %-20s %18ld %18ld</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="s">"(Q|ia) Tensor AO"</span><span class="p">,</span> Qia_mem_AO<span class="p">,</span> Qia_mem_AO <span class="o">*</span> <span class="mi">8L</span> <span class="o">/</span> <span class="mi">1000000L</span><span class="p">);</span></td></tr><tr><th id="L615"><a href="#L615">615</a></th><td>    fprintf<span class="p">(</span>outfile<span class="p">,</span> <span class="s">"     %-20s %18ld %18ld</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="s">"(Q|ia) Tensor USO"</span><span class="p">,</span> Qia_mem_SO<span class="p">,</span> Qia_mem_SO <span class="o">*</span> <span class="mi">8L</span> <span class="o">/</span> <span class="mi">1000000L</span><span class="p">);</span></td></tr><tr><th id="L616"><a href="#L616">616</a></th><td>    fprintf<span class="p">(</span>outfile<span class="p">,</span> <span class="s">"     %-20s %18ld %18ld</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="s">"I_ab Tensor USO"</span><span class="p">,</span> I_SO<span class="p">,</span> I_SO <span class="o">*</span> <span class="mi">8L</span> <span class="o">/</span> <span class="mi">1000000L</span><span class="p">);</span></td></tr><tr><th id="L617"><a href="#L617">617</a></th><td>    fprintf<span class="p">(</span>outfile<span class="p">,</span> <span class="s">"     %-20s %18ld %18ld</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="s">"MO Transform (A|ia)"</span><span class="p">,</span> Amn_mem<span class="p">,</span> Amn_mem <span class="o">*</span> <span class="mi">8L</span> <span class="o">/</span> <span class="mi">1000000L</span><span class="p">);</span></td></tr><tr><th id="L618"><a href="#L618">618</a></th><td>    <span class="k">if</span> <span class="p">(</span>nirrep_ <span class="o">&gt;</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span></td></tr><tr><th id="L619"><a href="#L619">619</a></th><td>        fprintf<span class="p">(</span>outfile<span class="p">,</span> <span class="s">"     %-20s %18ld %18ld</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="s">"USO Transform (A|ia)"</span><span class="p">,</span> Aia_USO_mem<span class="p">,</span> Amn_mem <span class="o">*</span> <span class="mi">8L</span> <span class="o">/</span> <span class="mi">1000000L</span><span class="p">);</span></td></tr><tr><th id="L620"><a href="#L620">620</a></th><td>        fprintf<span class="p">(</span>outfile<span class="p">,</span> <span class="s">"     %-20s %18ld %18ld</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="s">"USO Transform (A|B)"</span><span class="p">,</span> J_USO_mem<span class="p">,</span> J_USO_mem <span class="o">*</span> <span class="mi">8L</span> <span class="o">/</span> <span class="mi">1000000L</span><span class="p">);</span></td></tr><tr><th id="L621"><a href="#L621">621</a></th><td>    <span class="p">}</span></td></tr><tr><th id="L622"><a href="#L622">622</a></th><td>    fprintf<span class="p">(</span>outfile<span class="p">,</span> <span class="s">"     %-20s %18ld %18ld</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="s">"Fitting Transform"</span><span class="p">,</span> Aia_mem<span class="p">,</span> Aia_mem <span class="o">*</span> <span class="mi">8L</span> <span class="o">/</span> <span class="mi">1000000L</span><span class="p">);</span></td></tr><tr><th id="L623"><a href="#L623">623</a></th><td>    fprintf<span class="p">(</span>outfile<span class="p">,</span> <span class="s">"     %-20s %18ld %18ld</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="s">"Energy Computation"</span><span class="p">,</span> I_mem<span class="p">,</span> I_mem <span class="o">*</span> <span class="mi">8L</span> <span class="o">/</span> <span class="mi">1000000L</span><span class="p">);</span></td></tr><tr><th id="L624"><a href="#L624">624</a></th><td>    fprintf<span class="p">(</span>outfile<span class="p">,</span> <span class="s">"     %-20s %18ld %18ld</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="s">"Overhead"</span><span class="p">,</span> overhead<span class="p">,</span> overhead <span class="o">*</span> <span class="mi">8L</span> <span class="o">/</span> <span class="mi">1000000L</span><span class="p">);</span></td></tr><tr><th id="L625"><a href="#L625">625</a></th><td>    fprintf<span class="p">(</span>outfile<span class="p">,</span> <span class="s">"    ------------------------------------------------------------</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span></td></tr><tr><th id="L626"><a href="#L626">626</a></th><td>    fprintf<span class="p">(</span>outfile<span class="p">,</span> <span class="s">"     %-20s %18ld %18ld</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="s">"Required Memory"</span><span class="p">,</span> required<span class="p">,</span> required <span class="o">*</span> <span class="mi">8L</span> <span class="o">/</span> <span class="mi">1000000L</span><span class="p">);</span></td></tr><tr><th id="L627"><a href="#L627">627</a></th><td>    fprintf<span class="p">(</span>outfile<span class="p">,</span> <span class="s">"     %-20s %18ld %18ld</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="s">"Available Memory"</span><span class="p">,</span> <span class="p">((</span>ULI<span class="p">)(</span> MEM_SAFETY <span class="o">*</span> memory_<span class="p">))</span> <span class="o">/</span> <span class="mi">8L</span><span class="p">,</span> <span class="p">((</span>ULI<span class="p">)</span> <span class="p">(</span>MEM_SAFETY <span class="o">*</span> memory_<span class="p">))</span> <span class="o">/</span> <span class="mi">1000000L</span><span class="p">);</span></td></tr><tr><th id="L628"><a href="#L628">628</a></th><td>    fprintf<span class="p">(</span>outfile<span class="p">,</span> <span class="s">"    ------------------------------------------------------------</span><span class="se">\n\n</span><span class="s">"</span><span class="p">);</span></td></tr><tr><th id="L629"><a href="#L629">629</a></th><td>    fflush<span class="p">(</span>outfile<span class="p">);</span></td></tr><tr><th id="L630"><a href="#L630">630</a></th><td></td></tr><tr><th id="L631"><a href="#L631">631</a></th><td>    <span class="k">if</span> <span class="p">((</span><span class="kt">double</span><span class="p">)</span>required <span class="o">&gt;</span> MEM_SAFETY <span class="o">*</span> <span class="p">((</span><span class="kt">double</span><span class="p">)</span> memory_ <span class="o">/</span> <span class="mi">8L</span><span class="p">))</span> <span class="p">{</span></td></tr><tr><th id="L632"><a href="#L632">632</a></th><td>        <span class="k">throw</span> PSIEXCEPTION<span class="p">(</span><span class="s">"MAD_MP2 does not have enough memory"</span><span class="p">);</span></td></tr><tr><th id="L633"><a href="#L633">633</a></th><td>    <span class="p">}</span></td></tr><tr><th id="L634"><a href="#L634">634</a></th><td><span class="p">}</span></td></tr><tr><th id="L635"><a href="#L635">635</a></th><td><span class="kt">double</span> MAD_MP2<span class="o">::</span>compute_energy<span class="p">()</span></td></tr><tr><th id="L636"><a href="#L636">636</a></th><td><span class="p">{</span></td></tr><tr><th id="L637"><a href="#L637">637</a></th><td>    print_header<span class="p">();</span></td></tr><tr><th id="L638"><a href="#L638">638</a></th><td></td></tr><tr><th id="L639"><a href="#L639">639</a></th><td>    <span class="k">if</span> <span class="p">(</span>options_<span class="p">.</span>get_str<span class="p">(</span><span class="s">"MP2_ALGORITHM"</span><span class="p">)</span> <span class="o">==</span> <span class="s">"DFMP2J"</span><span class="p">)</span> <span class="p">{</span></td></tr><tr><th id="L640"><a href="#L640">640</a></th><td>        denominator<span class="p">();</span> </td></tr><tr><th id="L641"><a href="#L641">641</a></th><td>    <span class="p">}</span></td></tr><tr><th id="L642"><a href="#L642">642</a></th><td></td></tr><tr><th id="L643"><a href="#L643">643</a></th><td>    check_memory<span class="p">();</span></td></tr><tr><th id="L644"><a href="#L644">644</a></th><td></td></tr><tr><th id="L645"><a href="#L645">645</a></th><td>    J<span class="p">();</span></td></tr><tr><th id="L646"><a href="#L646">646</a></th><td>    Jm12<span class="p">();</span></td></tr><tr><th id="L647"><a href="#L647">647</a></th><td></td></tr><tr><th id="L648"><a href="#L648">648</a></th><td>    Aia<span class="p">();</span></td></tr><tr><th id="L649"><a href="#L649">649</a></th><td></td></tr><tr><th id="L650"><a href="#L650">650</a></th><td>    <span class="k">if</span> <span class="p">(</span>options_<span class="p">.</span>get_str<span class="p">(</span><span class="s">"MP2_ALGORITHM"</span><span class="p">)</span> <span class="o">==</span> <span class="s">"DFMP2"</span><span class="p">)</span></td></tr><tr><th id="L651"><a href="#L651">651</a></th><td>        I<span class="p">();</span></td></tr><tr><th id="L652"><a href="#L652">652</a></th><td>    <span class="k">else</span> <span class="k">if</span> <span class="p">(</span>options_<span class="p">.</span>get_str<span class="p">(</span><span class="s">"MP2_ALGORITHM"</span><span class="p">)</span> <span class="o">==</span> <span class="s">"DFMP2J"</span><span class="p">)</span></td></tr><tr><th id="L653"><a href="#L653">653</a></th><td>        IJ<span class="p">();</span></td></tr><tr><th id="L654"><a href="#L654">654</a></th><td></td></tr><tr><th id="L655"><a href="#L655">655</a></th><td>    print_energy<span class="p">();</span></td></tr><tr><th id="L656"><a href="#L656">656</a></th><td></td></tr><tr><th id="L657"><a href="#L657">657</a></th><td>    <span class="k">return</span> energy_<span class="p">;</span></td></tr><tr><th id="L658"><a href="#L658">658</a></th><td><span class="p">}</span></td></tr><tr><th id="L659"><a href="#L659">659</a></th><td><span class="kt">void</span> MAD_MP2<span class="o">::</span>J<span class="p">()</span></td></tr><tr><th id="L660"><a href="#L660">660</a></th><td><span class="p">{</span></td></tr><tr><th id="L661"><a href="#L661">661</a></th><td>    <span class="c1">// =&gt; AO Basis J &lt;= //</span></td></tr><tr><th id="L662"><a href="#L662">662</a></th><td><span class="c1"></span></td></tr><tr><th id="L663"><a href="#L663">663</a></th><td>    boost<span class="o">::</span>shared_ptr<span class="o">&lt;</span>IntegralFactory<span class="o">&gt;</span> fact<span class="p">(</span><span class="k">new</span> IntegralFactory<span class="p">(</span>auxiliary_<span class="p">,</span>zero_<span class="p">,</span>auxiliary_<span class="p">,</span>zero_<span class="p">));</span></td></tr><tr><th id="L664"><a href="#L664">664</a></th><td>    boost<span class="o">::</span>shared_ptr<span class="o">&lt;</span>TwoBodyAOInt<span class="o">&gt;</span> eri<span class="p">(</span>fact<span class="o">-&gt;</span>eri<span class="p">());</span></td></tr><tr><th id="L665"><a href="#L665">665</a></th><td>    <span class="k">const</span> <span class="kt">double</span><span class="o">*</span> buffer <span class="o">=</span> eri<span class="o">-&gt;</span>buffer<span class="p">();</span></td></tr><tr><th id="L666"><a href="#L666">666</a></th><td></td></tr><tr><th id="L667"><a href="#L667">667</a></th><td>    boost<span class="o">::</span>shared_ptr<span class="o">&lt;</span>Matrix<span class="o">&gt;</span> J<span class="p">(</span><span class="k">new</span> Matrix<span class="p">(</span><span class="s">"J^-1/2"</span><span class="p">,</span> naux_<span class="p">,</span> naux_<span class="p">));</span></td></tr><tr><th id="L668"><a href="#L668">668</a></th><td>    <span class="kt">double</span><span class="o">**</span> Jp <span class="o">=</span> J<span class="o">-&gt;</span>pointer<span class="p">();</span></td></tr><tr><th id="L669"><a href="#L669">669</a></th><td></td></tr><tr><th id="L670"><a href="#L670">670</a></th><td>    timer_on<span class="p">(</span><span class="s">"MP2 J AO"</span><span class="p">);</span></td></tr><tr><th id="L671"><a href="#L671">671</a></th><td>    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> P <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> P <span class="o">&lt;</span> auxiliary_<span class="o">-&gt;</span>nshell<span class="p">();</span> P<span class="o">++</span><span class="p">)</span> <span class="p">{</span></td></tr><tr><th id="L672"><a href="#L672">672</a></th><td>        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> Q <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> Q <span class="o">&lt;=</span> P <span class="p">;</span> Q<span class="o">++</span><span class="p">)</span> <span class="p">{</span></td></tr><tr><th id="L673"><a href="#L673">673</a></th><td>            eri<span class="o">-&gt;</span>compute_shell<span class="p">(</span>P<span class="p">,</span><span class="mi">0</span><span class="p">,</span>Q<span class="p">,</span><span class="mi">0</span><span class="p">);</span></td></tr><tr><th id="L674"><a href="#L674">674</a></th><td>            <span class="kt">int</span> nP     <span class="o">=</span> auxiliary_<span class="o">-&gt;</span>shell<span class="p">(</span>P<span class="p">)</span><span class="o">-&gt;</span>nfunction<span class="p">();</span></td></tr><tr><th id="L675"><a href="#L675">675</a></th><td>            <span class="kt">int</span> Pstart <span class="o">=</span> auxiliary_<span class="o">-&gt;</span>shell<span class="p">(</span>P<span class="p">)</span><span class="o">-&gt;</span>function_index<span class="p">();</span></td></tr><tr><th id="L676"><a href="#L676">676</a></th><td>            <span class="kt">int</span> nQ     <span class="o">=</span> auxiliary_<span class="o">-&gt;</span>shell<span class="p">(</span>Q<span class="p">)</span><span class="o">-&gt;</span>nfunction<span class="p">();</span></td></tr><tr><th id="L677"><a href="#L677">677</a></th><td>            <span class="kt">int</span> Qstart <span class="o">=</span> auxiliary_<span class="o">-&gt;</span>shell<span class="p">(</span>Q<span class="p">)</span><span class="o">-&gt;</span>function_index<span class="p">();</span></td></tr><tr><th id="L678"><a href="#L678">678</a></th><td>            <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> op <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> index <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> op <span class="o">&lt;</span> nP<span class="p">;</span> op<span class="o">++</span><span class="p">)</span> <span class="p">{</span></td></tr><tr><th id="L679"><a href="#L679">679</a></th><td>                <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> oq <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> oq <span class="o">&lt;</span> nQ<span class="p">;</span> oq<span class="o">++</span><span class="p">,</span> index<span class="o">++</span><span class="p">)</span> <span class="p">{</span></td></tr><tr><th id="L680"><a href="#L680">680</a></th><td>                    Jp<span class="p">[</span>Pstart <span class="o">+</span> op<span class="p">][</span>Qstart <span class="o">+</span> oq<span class="p">]</span> <span class="o">=</span> buffer<span class="p">[</span>index<span class="p">];</span></td></tr><tr><th id="L681"><a href="#L681">681</a></th><td>                    Jp<span class="p">[</span>Qstart <span class="o">+</span> oq<span class="p">][</span>Pstart <span class="o">+</span> op<span class="p">]</span> <span class="o">=</span> buffer<span class="p">[</span>index<span class="p">];</span></td></tr><tr><th id="L682"><a href="#L682">682</a></th><td>                <span class="p">}</span></td></tr><tr><th id="L683"><a href="#L683">683</a></th><td>            <span class="p">}</span></td></tr><tr><th id="L684"><a href="#L684">684</a></th><td>        <span class="p">}</span>    </td></tr><tr><th id="L685"><a href="#L685">685</a></th><td>    <span class="p">}</span>    </td></tr><tr><th id="L686"><a href="#L686">686</a></th><td>    timer_off<span class="p">(</span><span class="s">"MP2 J AO"</span><span class="p">);</span></td></tr><tr><th id="L687"><a href="#L687">687</a></th><td></td></tr><tr><th id="L688"><a href="#L688">688</a></th><td>    <span class="k">if</span> <span class="p">(</span>debug_ <span class="o">&gt;</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span></td></tr><tr><th id="L689"><a href="#L689">689</a></th><td>        fprintf<span class="p">(</span>outfile<span class="p">,</span> <span class="s">"  ==&gt; After J Generation &lt;==</span><span class="se">\n\n</span><span class="s">"</span><span class="p">);</span></td></tr><tr><th id="L690"><a href="#L690">690</a></th><td>        J<span class="o">-&gt;</span>print<span class="p">();</span></td></tr><tr><th id="L691"><a href="#L691">691</a></th><td>    <span class="p">}</span> </td></tr><tr><th id="L692"><a href="#L692">692</a></th><td>   </td></tr><tr><th id="L693"><a href="#L693">693</a></th><td>    Jm12_ <span class="o">=</span> J<span class="p">;</span> </td></tr><tr><th id="L694"><a href="#L694">694</a></th><td><span class="p">}</span></td></tr><tr><th id="L695"><a href="#L695">695</a></th><td><span class="kt">void</span> MAD_MP2<span class="o">::</span>Jm12<span class="p">()</span></td></tr><tr><th id="L696"><a href="#L696">696</a></th><td><span class="p">{</span></td></tr><tr><th id="L697"><a href="#L697">697</a></th><td>    timer_on<span class="p">(</span><span class="s">"MP2 J^-1/2"</span><span class="p">);</span></td></tr><tr><th id="L698"><a href="#L698">698</a></th><td>    Jm12_<span class="o">-&gt;</span>power<span class="p">(</span><span class="o">-</span><span class="mf">1.0</span><span class="o">/</span><span class="mf">2.0</span><span class="p">);</span></td></tr><tr><th id="L699"><a href="#L699">699</a></th><td>    timer_off<span class="p">(</span><span class="s">"MP2 J^-1/2"</span><span class="p">);</span></td></tr><tr><th id="L700"><a href="#L700">700</a></th><td></td></tr><tr><th id="L701"><a href="#L701">701</a></th><td>    <span class="k">if</span> <span class="p">(</span>debug_ <span class="o">&gt;</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span></td></tr><tr><th id="L702"><a href="#L702">702</a></th><td>        fprintf<span class="p">(</span>outfile<span class="p">,</span> <span class="s">"  ==&gt; After J^-1/2 &lt;==</span><span class="se">\n\n</span><span class="s">"</span><span class="p">);</span></td></tr><tr><th id="L703"><a href="#L703">703</a></th><td>        Jm12_<span class="o">-&gt;</span>print<span class="p">();</span></td></tr><tr><th id="L704"><a href="#L704">704</a></th><td>    <span class="p">}</span> </td></tr><tr><th id="L705"><a href="#L705">705</a></th><td><span class="p">}</span></td></tr><tr><th id="L706"><a href="#L706">706</a></th><td><span class="kt">void</span> MAD_MP2<span class="o">::</span>Aia<span class="p">()</span></td></tr><tr><th id="L707"><a href="#L707">707</a></th><td><span class="p">{</span></td></tr><tr><th id="L708"><a href="#L708">708</a></th><td>    <span class="c1">// =&gt; AO Basis A: (A|ia) &lt;= //</span></td></tr><tr><th id="L709"><a href="#L709">709</a></th><td><span class="c1"></span></td></tr><tr><th id="L710"><a href="#L710">710</a></th><td>    boost<span class="o">::</span>shared_ptr<span class="o">&lt;</span>Matrix<span class="o">&gt;</span> Aia<span class="p">(</span><span class="k">new</span> Matrix<span class="p">(</span><span class="s">"(A|ia)"</span><span class="p">,</span> naux_<span class="p">,</span> nia_local_<span class="p">));</span></td></tr><tr><th id="L711"><a href="#L711">711</a></th><td>    <span class="kt">double</span><span class="o">**</span> Aiap <span class="o">=</span> Aia<span class="o">-&gt;</span>pointer<span class="p">();</span></td></tr><tr><th id="L712"><a href="#L712">712</a></th><td></td></tr><tr><th id="L713"><a href="#L713">713</a></th><td>    boost<span class="o">::</span>shared_ptr<span class="o">&lt;</span>IntegralFactory<span class="o">&gt;</span> fact<span class="p">(</span><span class="k">new</span> IntegralFactory<span class="p">(</span>auxiliary_<span class="p">,</span>zero_<span class="p">,</span>basisset_<span class="p">,</span>basisset_<span class="p">));</span></td></tr><tr><th id="L714"><a href="#L714">714</a></th><td>    boost<span class="o">::</span>shared_ptr<span class="o">&lt;</span>TwoBodyAOInt<span class="o">&gt;</span> <span class="o">*</span>eri <span class="o">=</span> <span class="k">new</span> boost<span class="o">::</span>shared_ptr<span class="o">&lt;</span>TwoBodyAOInt<span class="o">&gt;</span><span class="p">[</span>omp_nthread_<span class="p">];</span></td></tr><tr><th id="L715"><a href="#L715">715</a></th><td>    <span class="k">const</span> <span class="kt">double</span><span class="o">**</span> buffer <span class="o">=</span> <span class="k">new</span> <span class="k">const</span> <span class="kt">double</span><span class="o">*</span><span class="p">[</span>omp_nthread_<span class="p">];</span></td></tr><tr><th id="L716"><a href="#L716">716</a></th><td>    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="kr">thread</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="kr">thread</span> <span class="o">&lt;</span> omp_nthread_<span class="p">;</span> <span class="kr">thread</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span></td></tr><tr><th id="L717"><a href="#L717">717</a></th><td>        eri<span class="p">[</span><span class="kr">thread</span><span class="p">]</span> <span class="o">=</span> boost<span class="o">::</span>shared_ptr<span class="o">&lt;</span>TwoBodyAOInt<span class="o">&gt;</span><span class="p">(</span>fact<span class="o">-&gt;</span>eri<span class="p">());</span></td></tr><tr><th id="L718"><a href="#L718">718</a></th><td>        buffer<span class="p">[</span><span class="kr">thread</span><span class="p">]</span> <span class="o">=</span> eri<span class="p">[</span><span class="kr">thread</span><span class="p">]</span><span class="o">-&gt;</span>buffer<span class="p">();</span></td></tr><tr><th id="L719"><a href="#L719">719</a></th><td>    <span class="p">}</span></td></tr><tr><th id="L720"><a href="#L720">720</a></th><td></td></tr><tr><th id="L721"><a href="#L721">721</a></th><td>    <span class="kt">int</span> max_pshell <span class="o">=</span> auxiliary_<span class="o">-&gt;</span>max_function_per_shell<span class="p">();</span> </td></tr><tr><th id="L722"><a href="#L722">722</a></th><td></td></tr><tr><th id="L723"><a href="#L723">723</a></th><td>    boost<span class="o">::</span>shared_ptr<span class="o">&lt;</span>Matrix<span class="o">&gt;</span> Amn<span class="p">(</span><span class="k">new</span> Matrix<span class="p">(</span><span class="s">"(A|mn) Chunk"</span><span class="p">,</span> max_pshell<span class="p">,</span> nso_ <span class="o">*</span> <span class="p">(</span>ULI<span class="p">)</span> nso_<span class="p">));</span></td></tr><tr><th id="L724"><a href="#L724">724</a></th><td>    <span class="kt">double</span><span class="o">**</span> Amnp <span class="o">=</span> Amn<span class="o">-&gt;</span>pointer<span class="p">();</span></td></tr><tr><th id="L725"><a href="#L725">725</a></th><td>    boost<span class="o">::</span>shared_ptr<span class="o">&lt;</span>Matrix<span class="o">&gt;</span> Ami<span class="p">(</span><span class="k">new</span> Matrix<span class="p">(</span><span class="s">"(A|mi) Chunk"</span><span class="p">,</span> max_pshell<span class="p">,</span> nso_ <span class="o">*</span> <span class="p">(</span>ULI<span class="p">)</span> naocc_local_<span class="p">));</span></td></tr><tr><th id="L726"><a href="#L726">726</a></th><td>    <span class="kt">double</span><span class="o">**</span> Amip <span class="o">=</span> Ami<span class="o">-&gt;</span>pointer<span class="p">();</span></td></tr><tr><th id="L727"><a href="#L727">727</a></th><td></td></tr><tr><th id="L728"><a href="#L728">728</a></th><td>    boost<span class="o">::</span>shared_ptr<span class="o">&lt;</span>Matrix<span class="o">&gt;</span> Ci<span class="p">(</span><span class="k">new</span> Matrix<span class="p">(</span><span class="s">"C_mi local"</span><span class="p">,</span> nso_<span class="p">,</span> naocc_local_<span class="p">));</span></td></tr><tr><th id="L729"><a href="#L729">729</a></th><td>    <span class="kt">double</span><span class="o">**</span> Cip <span class="o">=</span> Ci<span class="o">-&gt;</span>pointer<span class="p">();</span></td></tr><tr><th id="L730"><a href="#L730">730</a></th><td>    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> ind <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> ind <span class="o">&lt;</span> naocc_local_<span class="p">;</span> ind<span class="o">++</span><span class="p">)</span> <span class="p">{</span></td></tr><tr><th id="L731"><a href="#L731">731</a></th><td>        <span class="kt">int</span> i <span class="o">=</span> aocc_local_<span class="p">[</span>ind<span class="p">];</span></td></tr><tr><th id="L732"><a href="#L732">732</a></th><td>        C_DCOPY<span class="p">(</span>nso_<span class="p">,</span> <span class="o">&amp;</span>Caocc_<span class="o">-&gt;</span>pointer<span class="p">(</span><span class="mi">0</span><span class="p">)[</span><span class="mi">0</span><span class="p">][</span>i<span class="p">],</span> naocc_<span class="p">,</span> <span class="o">&amp;</span>Cip<span class="p">[</span><span class="mi">0</span><span class="p">][</span>ind<span class="p">],</span> naocc_local_<span class="p">);</span></td></tr><tr><th id="L733"><a href="#L733">733</a></th><td>    <span class="p">}</span></td></tr><tr><th id="L734"><a href="#L734">734</a></th><td></td></tr><tr><th id="L735"><a href="#L735">735</a></th><td>    <span class="c1">// Schwarz Sieve object</span></td></tr><tr><th id="L736"><a href="#L736">736</a></th><td><span class="c1"></span>    boost<span class="o">::</span>shared_ptr<span class="o">&lt;</span>SchwarzSieve<span class="o">&gt;</span> schwarz<span class="p">(</span><span class="k">new</span> SchwarzSieve<span class="p">(</span>basisset_<span class="p">,</span> options_<span class="p">.</span>get_double<span class="p">(</span><span class="s">"SCHWARZ_CUTOFF"</span><span class="p">)));</span> </td></tr><tr><th id="L737"><a href="#L737">737</a></th><td>    <span class="kt">long</span> <span class="kt">int</span><span class="o">*</span> schwarz_shells <span class="o">=</span> schwarz<span class="o">-&gt;</span>get_schwarz_shells_reverse<span class="p">();</span></td></tr><tr><th id="L738"><a href="#L738">738</a></th><td></td></tr><tr><th id="L739"><a href="#L739">739</a></th><td>    timer_on<span class="p">(</span><span class="s">"MP2 AO -&gt; MO"</span><span class="p">);</span></td></tr><tr><th id="L740"><a href="#L740">740</a></th><td>    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> P <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> P <span class="o">&lt;</span> auxiliary_<span class="o">-&gt;</span>nshell<span class="p">();</span> P<span class="o">++</span><span class="p">)</span> <span class="p">{</span></td></tr><tr><th id="L741"><a href="#L741">741</a></th><td>        <span class="kt">int</span> nP <span class="o">=</span> auxiliary_<span class="o">-&gt;</span>shell<span class="p">(</span>P<span class="p">)</span><span class="o">-&gt;</span>nfunction<span class="p">();</span></td></tr><tr><th id="L742"><a href="#L742">742</a></th><td>        <span class="kt">int</span> pstart <span class="o">=</span> auxiliary_<span class="o">-&gt;</span>shell<span class="p">(</span>P<span class="p">)</span><span class="o">-&gt;</span>function_index<span class="p">();</span></td></tr><tr><th id="L743"><a href="#L743">743</a></th><td></td></tr><tr><th id="L744"><a href="#L744">744</a></th><td>        <span class="o">::</span>memset<span class="p">(</span><span class="k">static_cast</span><span class="o">&lt;</span><span class="kt">void</span><span class="o">*&gt;</span><span class="p">(</span>Amnp<span class="p">[</span><span class="mi">0</span><span class="p">]),</span> <span class="sc">'\0'</span><span class="p">,</span> nP <span class="o">*</span> <span class="p">(</span>ULI<span class="p">)</span> nso_ <span class="o">*</span> nso_ <span class="o">*</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">double</span><span class="p">));</span></td></tr><tr><th id="L745"><a href="#L745">745</a></th><td>        <span class="o">::</span>memset<span class="p">(</span><span class="k">static_cast</span><span class="o">&lt;</span><span class="kt">void</span><span class="o">*&gt;</span><span class="p">(</span>Amip<span class="p">[</span><span class="mi">0</span><span class="p">]),</span> <span class="sc">'\0'</span><span class="p">,</span> nP <span class="o">*</span> <span class="p">(</span>ULI<span class="p">)</span> nso_ <span class="o">*</span> naocc_local_ <span class="o">*</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">double</span><span class="p">));</span></td></tr><tr><th id="L746"><a href="#L746">746</a></th><td></td></tr><tr><th id="L747"><a href="#L747">747</a></th><td>        <span class="c1">// (A|mn) block</span></td></tr><tr><th id="L748"><a href="#L748">748</a></th><td><span class="c1"></span>        timer_on<span class="p">(</span><span class="s">"MP2 (A|mn)"</span><span class="p">);</span></td></tr><tr><th id="L749"><a href="#L749">749</a></th><td><span class="cp">        #pragma omp parallel for schedule(guided)</span></td></tr><tr><th id="L750"><a href="#L750">750</a></th><td><span class="cp"></span>        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> M <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> M <span class="o">&lt;</span> basisset_<span class="o">-&gt;</span>nshell<span class="p">();</span> M<span class="o">++</span><span class="p">)</span> <span class="p">{</span></td></tr><tr><th id="L751"><a href="#L751">751</a></th><td></td></tr><tr><th id="L752"><a href="#L752">752</a></th><td>            <span class="kt">int</span> rank <span class="o">=</span> <span class="mi">0</span><span class="p">;</span></td></tr><tr><th id="L753"><a href="#L753">753</a></th><td><span class="cp">            #ifdef _OPENMP</span></td></tr><tr><th id="L754"><a href="#L754">754</a></th><td><span class="cp"></span>                rank <span class="o">=</span> omp_get_thread_num<span class="p">();</span></td></tr><tr><th id="L755"><a href="#L755">755</a></th><td><span class="cp">            #endif</span></td></tr><tr><th id="L756"><a href="#L756">756</a></th><td><span class="cp"></span></td></tr><tr><th id="L757"><a href="#L757">757</a></th><td>            <span class="kt">int</span> nM <span class="o">=</span> basisset_<span class="o">-&gt;</span>shell<span class="p">(</span>M<span class="p">)</span><span class="o">-&gt;</span>nfunction<span class="p">();</span></td></tr><tr><th id="L758"><a href="#L758">758</a></th><td>            <span class="kt">int</span> mstart <span class="o">=</span> basisset_<span class="o">-&gt;</span>shell<span class="p">(</span>M<span class="p">)</span><span class="o">-&gt;</span>function_index<span class="p">();</span></td></tr><tr><th id="L759"><a href="#L759">759</a></th><td></td></tr><tr><th id="L760"><a href="#L760">760</a></th><td>            <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> N <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> N <span class="o">&lt;=</span> M<span class="p">;</span> N<span class="o">++</span><span class="p">)</span> <span class="p">{</span></td></tr><tr><th id="L761"><a href="#L761">761</a></th><td>                <span class="kt">int</span> nN <span class="o">=</span> basisset_<span class="o">-&gt;</span>shell<span class="p">(</span>N<span class="p">)</span><span class="o">-&gt;</span>nfunction<span class="p">();</span></td></tr><tr><th id="L762"><a href="#L762">762</a></th><td>                <span class="kt">int</span> nstart <span class="o">=</span> basisset_<span class="o">-&gt;</span>shell<span class="p">(</span>N<span class="p">)</span><span class="o">-&gt;</span>function_index<span class="p">();</span></td></tr><tr><th id="L763"><a href="#L763">763</a></th><td>             </td></tr><tr><th id="L764"><a href="#L764">764</a></th><td>                <span class="c1">// Schwarz </span></td></tr><tr><th id="L765"><a href="#L765">765</a></th><td><span class="c1"></span>                <span class="k">if</span> <span class="p">(</span>schwarz_shells<span class="p">[</span>M <span class="o">*</span> <span class="p">(</span>M <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">/</span> <span class="mi">2</span> <span class="o">+</span> N<span class="p">]</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="k">continue</span><span class="p">;</span></td></tr><tr><th id="L766"><a href="#L766">766</a></th><td>             </td></tr><tr><th id="L767"><a href="#L767">767</a></th><td>                eri<span class="p">[</span>rank<span class="p">]</span><span class="o">-&gt;</span>compute_shell<span class="p">(</span>P<span class="p">,</span><span class="mi">0</span><span class="p">,</span>M<span class="p">,</span>N<span class="p">);</span></td></tr><tr><th id="L768"><a href="#L768">768</a></th><td></td></tr><tr><th id="L769"><a href="#L769">769</a></th><td>                <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> op <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> index <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> op <span class="o">&lt;</span> nP<span class="p">;</span> op<span class="o">++</span><span class="p">)</span> <span class="p">{</span></td></tr><tr><th id="L770"><a href="#L770">770</a></th><td>                    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> om <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> om <span class="o">&lt;</span> nM<span class="p">;</span> om<span class="o">++</span><span class="p">)</span> <span class="p">{</span></td></tr><tr><th id="L771"><a href="#L771">771</a></th><td>                        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> on <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> on <span class="o">&lt;</span> nN<span class="p">;</span> on<span class="o">++</span><span class="p">,</span> index<span class="o">++</span><span class="p">)</span> <span class="p">{</span></td></tr><tr><th id="L772"><a href="#L772">772</a></th><td>                            Amnp<span class="p">[</span>op<span class="p">][(</span>om <span class="o">+</span> mstart<span class="p">)</span> <span class="o">*</span> nso_ <span class="o">+</span> <span class="p">(</span>on <span class="o">+</span> nstart<span class="p">)]</span> <span class="o">=</span> buffer<span class="p">[</span>rank<span class="p">][</span>index<span class="p">];</span></td></tr><tr><th id="L773"><a href="#L773">773</a></th><td>                            Amnp<span class="p">[</span>op<span class="p">][(</span>on <span class="o">+</span> nstart<span class="p">)</span> <span class="o">*</span> nso_ <span class="o">+</span> <span class="p">(</span>om <span class="o">+</span> mstart<span class="p">)]</span> <span class="o">=</span> buffer<span class="p">[</span>rank<span class="p">][</span>index<span class="p">];</span></td></tr><tr><th id="L774"><a href="#L774">774</a></th><td>                        <span class="p">}</span></td></tr><tr><th id="L775"><a href="#L775">775</a></th><td>                    <span class="p">}</span></td></tr><tr><th id="L776"><a href="#L776">776</a></th><td>                <span class="p">}</span></td></tr><tr><th id="L777"><a href="#L777">777</a></th><td>            <span class="p">}</span></td></tr><tr><th id="L778"><a href="#L778">778</a></th><td>        <span class="p">}</span></td></tr><tr><th id="L779"><a href="#L779">779</a></th><td>        timer_off<span class="p">(</span><span class="s">"MP2 (A|mn)"</span><span class="p">);</span></td></tr><tr><th id="L780"><a href="#L780">780</a></th><td>    </td></tr><tr><th id="L781"><a href="#L781">781</a></th><td>        <span class="c1">// (A|mi) block</span></td></tr><tr><th id="L782"><a href="#L782">782</a></th><td><span class="c1"></span>        timer_on<span class="p">(</span><span class="s">"MP2 (A|mi)"</span><span class="p">);</span></td></tr><tr><th id="L783"><a href="#L783">783</a></th><td>        C_DGEMM<span class="p">(</span><span class="sc">'N'</span><span class="p">,</span><span class="sc">'N'</span><span class="p">,</span>nP <span class="o">*</span> <span class="p">(</span>ULI<span class="p">)</span> nso_<span class="p">,</span> naocc_local_<span class="p">,</span> nso_<span class="p">,</span> <span class="mf">1.0</span><span class="p">,</span> Amnp<span class="p">[</span><span class="mi">0</span><span class="p">],</span> nso_<span class="p">,</span> Cip<span class="p">[</span><span class="mi">0</span><span class="p">],</span> naocc_local_<span class="p">,</span> <span class="mf">0.0</span><span class="p">,</span> Amip<span class="p">[</span><span class="mi">0</span><span class="p">],</span> naocc_local_<span class="p">);</span></td></tr><tr><th id="L784"><a href="#L784">784</a></th><td>        timer_off<span class="p">(</span><span class="s">"MP2 (A|mi)"</span><span class="p">);</span></td></tr><tr><th id="L785"><a href="#L785">785</a></th><td></td></tr><tr><th id="L786"><a href="#L786">786</a></th><td>        <span class="c1">// (A|ia) block</span></td></tr><tr><th id="L787"><a href="#L787">787</a></th><td><span class="c1"></span>        timer_on<span class="p">(</span><span class="s">"MP2 (A|ia)"</span><span class="p">);</span></td></tr><tr><th id="L788"><a href="#L788">788</a></th><td><span class="cp">        #pragma omp parallel for </span></td></tr><tr><th id="L789"><a href="#L789">789</a></th><td><span class="cp"></span>        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> index <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> index <span class="o">&lt;</span> nia_local_ <span class="o">*</span> nP<span class="p">;</span> index<span class="o">++</span><span class="p">)</span> <span class="p">{</span></td></tr><tr><th id="L790"><a href="#L790">790</a></th><td>            <span class="kt">int</span> ia_local <span class="o">=</span> index <span class="o">/</span> nP<span class="p">;</span></td></tr><tr><th id="L791"><a href="#L791">791</a></th><td>            <span class="kt">int</span> op <span class="o">=</span> index <span class="o">%</span> nP<span class="p">;</span></td></tr><tr><th id="L792"><a href="#L792">792</a></th><td>            <span class="kt">int</span> ia_global <span class="o">=</span> ia_local_to_global_<span class="p">[</span>ia_local<span class="p">];</span></td></tr><tr><th id="L793"><a href="#L793">793</a></th><td>            <span class="kt">int</span> i <span class="o">=</span> ia_global <span class="o">/</span> navir_<span class="p">;</span></td></tr><tr><th id="L794"><a href="#L794">794</a></th><td>            <span class="kt">int</span> a <span class="o">=</span> ia_global <span class="o">%</span> navir_<span class="p">;</span></td></tr><tr><th id="L795"><a href="#L795">795</a></th><td></td></tr><tr><th id="L796"><a href="#L796">796</a></th><td>            Aiap<span class="p">[</span>op <span class="o">+</span> pstart<span class="p">][</span>ia_local<span class="p">]</span> <span class="o">=</span> C_DDOT<span class="p">(</span>nso_<span class="p">,</span> <span class="o">&amp;</span>Amip<span class="p">[</span>op<span class="p">][</span>i<span class="p">],</span> naocc_local_<span class="p">,</span> <span class="o">&amp;</span>Cavir_<span class="o">-&gt;</span>pointer<span class="p">(</span><span class="mi">0</span><span class="p">)[</span><span class="mi">0</span><span class="p">][</span>a<span class="p">],</span> navir_<span class="p">);</span></td></tr><tr><th id="L797"><a href="#L797">797</a></th><td>        <span class="p">}</span></td></tr><tr><th id="L798"><a href="#L798">798</a></th><td>        timer_off<span class="p">(</span><span class="s">"MP2 (A|ia)"</span><span class="p">);</span></td></tr><tr><th id="L799"><a href="#L799">799</a></th><td>    <span class="p">}</span></td></tr><tr><th id="L800"><a href="#L800">800</a></th><td>    timer_off<span class="p">(</span><span class="s">"MP2 AO -&gt; MO"</span><span class="p">);</span></td></tr><tr><th id="L801"><a href="#L801">801</a></th><td>    Amn<span class="p">.</span>reset<span class="p">();</span></td></tr><tr><th id="L802"><a href="#L802">802</a></th><td>    Ami<span class="p">.</span>reset<span class="p">();</span></td></tr><tr><th id="L803"><a href="#L803">803</a></th><td>    Ci<span class="p">.</span>reset<span class="p">();</span></td></tr><tr><th id="L804"><a href="#L804">804</a></th><td>    </td></tr><tr><th id="L805"><a href="#L805">805</a></th><td>    <span class="k">if</span> <span class="p">(</span>debug_ <span class="o">&gt;</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span></td></tr><tr><th id="L806"><a href="#L806">806</a></th><td>        fprintf<span class="p">(</span>outfile<span class="p">,</span> <span class="s">"  ==&gt; After MO Transform &lt;==</span><span class="se">\n\n</span><span class="s">"</span><span class="p">);</span> </td></tr><tr><th id="L807"><a href="#L807">807</a></th><td>        Aia<span class="o">-&gt;</span>print<span class="p">();</span> </td></tr><tr><th id="L808"><a href="#L808">808</a></th><td>    <span class="p">}</span></td></tr><tr><th id="L809"><a href="#L809">809</a></th><td></td></tr><tr><th id="L810"><a href="#L810">810</a></th><td>    <span class="c1">// =&gt; J^-1/2 (A|ia) Fitting &lt;= //</span></td></tr><tr><th id="L811"><a href="#L811">811</a></th><td><span class="c1"></span></td></tr><tr><th id="L812"><a href="#L812">812</a></th><td>    <span class="kt">int</span> n2 <span class="o">=</span> <span class="p">(</span>naux_ <span class="o">&lt;</span> nia_local_ <span class="o">?</span> <span class="nl">naux_:</span> nia_local_<span class="p">);</span></td></tr><tr><th id="L813"><a href="#L813">813</a></th><td>    boost<span class="o">::</span>shared_ptr<span class="o">&lt;</span>Matrix<span class="o">&gt;</span> T<span class="p">(</span><span class="k">new</span> Matrix<span class="p">(</span><span class="s">"Temp"</span><span class="p">,</span> naux_<span class="p">,</span> n2<span class="p">));</span></td></tr><tr><th id="L814"><a href="#L814">814</a></th><td>    <span class="kt">double</span><span class="o">**</span> Tp <span class="o">=</span> T<span class="o">-&gt;</span>pointer<span class="p">();</span></td></tr><tr><th id="L815"><a href="#L815">815</a></th><td>    <span class="kt">double</span><span class="o">**</span> Jp <span class="o">=</span> Jm12_<span class="o">-&gt;</span>pointer<span class="p">();</span></td></tr><tr><th id="L816"><a href="#L816">816</a></th><td></td></tr><tr><th id="L817"><a href="#L817">817</a></th><td>    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> ia <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> ia <span class="o">&lt;</span> nia_local_<span class="p">;</span> ia<span class="o">+=</span> n2<span class="p">)</span> </td></tr><tr><th id="L818"><a href="#L818">818</a></th><td>    <span class="p">{</span></td></tr><tr><th id="L819"><a href="#L819">819</a></th><td>        <span class="kt">int</span> nmult <span class="o">=</span> <span class="p">(</span>ia <span class="o">+</span> n2 <span class="o">&gt;</span> nia_local_ <span class="o">?</span> nia_local_ <span class="o">-</span> ia <span class="o">:</span> n2<span class="p">);</span></td></tr><tr><th id="L820"><a href="#L820">820</a></th><td>        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> Q <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> Q <span class="o">&lt;</span> naux_<span class="p">;</span> Q<span class="o">++</span><span class="p">)</span> <span class="p">{</span></td></tr><tr><th id="L821"><a href="#L821">821</a></th><td>            <span class="o">::</span>memcpy<span class="p">(</span><span class="k">static_cast</span><span class="o">&lt;</span><span class="kt">void</span><span class="o">*&gt;</span><span class="p">(</span>Tp<span class="p">[</span>Q<span class="p">]),</span> <span class="k">static_cast</span><span class="o">&lt;</span><span class="kt">void</span><span class="o">*&gt;</span><span class="p">(</span><span class="o">&amp;</span>Aiap<span class="p">[</span>Q<span class="p">][</span>ia<span class="p">]),</span> nmult <span class="o">*</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">double</span><span class="p">));</span></td></tr><tr><th id="L822"><a href="#L822">822</a></th><td>        <span class="p">}</span></td></tr><tr><th id="L823"><a href="#L823">823</a></th><td>        C_DGEMM<span class="p">(</span><span class="sc">'N'</span><span class="p">,</span><span class="sc">'N'</span><span class="p">,</span>naux_<span class="p">,</span>nmult<span class="p">,</span>naux_<span class="p">,</span><span class="mf">1.0</span><span class="p">,</span>Jp<span class="p">[</span><span class="mi">0</span><span class="p">],</span>naux_<span class="p">,</span>Tp<span class="p">[</span><span class="mi">0</span><span class="p">],</span>n2<span class="p">,</span><span class="mf">0.0</span><span class="p">,</span><span class="o">&amp;</span>Aiap<span class="p">[</span><span class="mi">0</span><span class="p">][</span>ia<span class="p">],</span>nia_local_<span class="p">);</span></td></tr><tr><th id="L824"><a href="#L824">824</a></th><td>    <span class="p">}</span>     </td></tr><tr><th id="L825"><a href="#L825">825</a></th><td></td></tr><tr><th id="L826"><a href="#L826">826</a></th><td>    <span class="k">if</span> <span class="p">(</span>debug_ <span class="o">&gt;</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span></td></tr><tr><th id="L827"><a href="#L827">827</a></th><td>        fprintf<span class="p">(</span>outfile<span class="p">,</span> <span class="s">"  ==&gt; After Fitting &lt;==</span><span class="se">\n\n</span><span class="s">"</span><span class="p">);</span> </td></tr><tr><th id="L828"><a href="#L828">828</a></th><td>        Aia<span class="o">-&gt;</span>print<span class="p">();</span> </td></tr><tr><th id="L829"><a href="#L829">829</a></th><td>    <span class="p">}</span></td></tr><tr><th id="L830"><a href="#L830">830</a></th><td>    Aia_ <span class="o">=</span> Aia<span class="p">;</span></td></tr><tr><th id="L831"><a href="#L831">831</a></th><td><span class="p">}</span></td></tr><tr><th id="L832"><a href="#L832">832</a></th><td>madness<span class="o">::</span>Future<span class="o">&lt;</span>std<span class="o">::</span>vector<span class="o">&lt;</span><span class="kt">double</span><span class="o">&gt;</span> <span class="o">&gt;</span> MAD_MP2<span class="o">::</span>fetch_Qia_block<span class="p">(</span><span class="k">const</span> <span class="kt">int</span><span class="o">&amp;</span> i<span class="p">,</span> <span class="k">const</span> <span class="kt">int</span><span class="o">&amp;</span> ablock<span class="p">)</span></td></tr><tr><th id="L833"><a href="#L833">833</a></th><td><span class="p">{</span></td></tr><tr><th id="L834"><a href="#L834">834</a></th><td>    <span class="kt">int</span> na <span class="o">=</span> ablock_size_<span class="p">[</span>i<span class="p">][</span>ablock<span class="p">];</span></td></tr><tr><th id="L835"><a href="#L835">835</a></th><td>    std<span class="o">::</span>vector<span class="o">&lt;</span><span class="kt">double</span><span class="o">&gt;</span> block<span class="p">(</span>na <span class="o">*</span> naux_<span class="p">);</span></td></tr><tr><th id="L836"><a href="#L836">836</a></th><td>    <span class="kt">int</span> i_local <span class="o">=</span> i_global_to_local_<span class="p">[</span>i<span class="p">];</span></td></tr><tr><th id="L837"><a href="#L837">837</a></th><td></td></tr><tr><th id="L838"><a href="#L838">838</a></th><td>    <span class="kt">double</span><span class="o">**</span> Qp <span class="o">=</span> Aia_<span class="o">-&gt;</span>pointer<span class="p">();</span></td></tr><tr><th id="L839"><a href="#L839">839</a></th><td></td></tr><tr><th id="L840"><a href="#L840">840</a></th><td>    ULI index <span class="o">=</span> <span class="mi">0L</span><span class="p">;</span></td></tr><tr><th id="L841"><a href="#L841">841</a></th><td>    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> Q <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> Q <span class="o">&lt;</span> naux_<span class="p">;</span> Q<span class="o">++</span><span class="p">)</span> <span class="p">{</span></td></tr><tr><th id="L842"><a href="#L842">842</a></th><td>        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> a <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> a <span class="o">&lt;</span> na<span class="p">;</span> a<span class="o">++</span><span class="p">,</span> index<span class="o">++</span><span class="p">)</span> <span class="p">{</span></td></tr><tr><th id="L843"><a href="#L843">843</a></th><td>            block<span class="p">[</span>index<span class="p">]</span> <span class="o">=</span> Qp<span class="p">[</span>Q<span class="p">][</span>i_local <span class="o">*</span> na <span class="o">+</span> a<span class="p">];</span></td></tr><tr><th id="L844"><a href="#L844">844</a></th><td>        <span class="p">}</span></td></tr><tr><th id="L845"><a href="#L845">845</a></th><td>    <span class="p">}</span></td></tr><tr><th id="L846"><a href="#L846">846</a></th><td></td></tr><tr><th id="L847"><a href="#L847">847</a></th><td>    <span class="k">return</span> madness<span class="o">::</span>Future<span class="o">&lt;</span>std<span class="o">::</span>vector<span class="o">&lt;</span><span class="kt">double</span><span class="o">&gt;</span> <span class="o">&gt;</span><span class="p">(</span>block<span class="p">);</span></td></tr><tr><th id="L848"><a href="#L848">848</a></th><td><span class="p">}</span></td></tr><tr><th id="L849"><a href="#L849">849</a></th><td>madness<span class="o">::</span>Void MAD_MP2<span class="o">::</span>unpack_Qia_block<span class="p">(</span><span class="k">const</span> std<span class="o">::</span>vector<span class="o">&lt;</span><span class="kt">double</span><span class="o">&gt;&amp;</span> block<span class="p">,</span> SharedMatrix Q<span class="p">,</span> <span class="k">const</span> <span class="kt">int</span><span class="o">&amp;</span> astart<span class="p">,</span> <span class="k">const</span> <span class="kt">int</span><span class="o">&amp;</span> asize<span class="p">)</span></td></tr><tr><th id="L850"><a href="#L850">850</a></th><td><span class="p">{</span></td></tr><tr><th id="L851"><a href="#L851">851</a></th><td>    <span class="kt">double</span><span class="o">**</span> Qp <span class="o">=</span> Q<span class="o">-&gt;</span>pointer<span class="p">();</span></td></tr><tr><th id="L852"><a href="#L852">852</a></th><td>    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> P <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> P <span class="o">&lt;</span> naux_<span class="p">;</span> P<span class="o">++</span><span class="p">)</span> <span class="p">{</span></td></tr><tr><th id="L853"><a href="#L853">853</a></th><td>        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> a <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> a <span class="o">&lt;</span> asize<span class="p">;</span> a<span class="o">++</span><span class="p">)</span> <span class="p">{</span></td></tr><tr><th id="L854"><a href="#L854">854</a></th><td>            Qp<span class="p">[</span>P<span class="p">][</span>astart <span class="o">+</span> a<span class="p">]</span> <span class="o">=</span> block<span class="p">[</span>P <span class="o">*</span> asize <span class="o">+</span> a<span class="p">];</span></td></tr><tr><th id="L855"><a href="#L855">855</a></th><td>        <span class="p">}</span></td></tr><tr><th id="L856"><a href="#L856">856</a></th><td>    <span class="p">}</span></td></tr><tr><th id="L857"><a href="#L857">857</a></th><td></td></tr><tr><th id="L858"><a href="#L858">858</a></th><td>    <span class="k">return</span> madness<span class="o">::</span>None<span class="p">;</span></td></tr><tr><th id="L859"><a href="#L859">859</a></th><td><span class="p">}</span></td></tr><tr><th id="L860"><a href="#L860">860</a></th><td></td></tr><tr><th id="L861"><a href="#L861">861</a></th><td><span class="kt">void</span> MAD_MP2<span class="o">::</span>I<span class="p">()</span></td></tr><tr><th id="L862"><a href="#L862">862</a></th><td><span class="p">{</span></td></tr><tr><th id="L863"><a href="#L863">863</a></th><td>    E_MP2J_ <span class="o">=</span> <span class="mf">0.0</span><span class="p">;</span></td></tr><tr><th id="L864"><a href="#L864">864</a></th><td>    E_MP2K_ <span class="o">=</span> <span class="mf">0.0</span><span class="p">;</span></td></tr><tr><th id="L865"><a href="#L865">865</a></th><td></td></tr><tr><th id="L866"><a href="#L866">866</a></th><td>    boost<span class="o">::</span>shared_ptr<span class="o">&lt;</span>Matrix<span class="o">&gt;</span> I<span class="p">(</span><span class="k">new</span> Matrix<span class="p">(</span><span class="s">"I"</span><span class="p">,</span> navir_<span class="p">,</span> navir_<span class="p">));</span></td></tr><tr><th id="L867"><a href="#L867">867</a></th><td>    <span class="kt">double</span><span class="o">**</span> Ip <span class="o">=</span> I<span class="o">-&gt;</span>pointer<span class="p">();</span></td></tr><tr><th id="L868"><a href="#L868">868</a></th><td>    boost<span class="o">::</span>shared_ptr<span class="o">&lt;</span>Matrix<span class="o">&gt;</span> Qa<span class="p">(</span><span class="k">new</span> Matrix<span class="p">(</span><span class="s">"Qa"</span><span class="p">,</span> naux_<span class="p">,</span> navir_<span class="p">));</span></td></tr><tr><th id="L869"><a href="#L869">869</a></th><td>    <span class="kt">double</span><span class="o">**</span> Qap <span class="o">=</span> Qa<span class="o">-&gt;</span>pointer<span class="p">();</span></td></tr><tr><th id="L870"><a href="#L870">870</a></th><td>    boost<span class="o">::</span>shared_ptr<span class="o">&lt;</span>Matrix<span class="o">&gt;</span> Qb<span class="p">(</span><span class="k">new</span> Matrix<span class="p">(</span><span class="s">"Qb"</span><span class="p">,</span> naux_<span class="p">,</span> navir_<span class="p">));</span></td></tr><tr><th id="L871"><a href="#L871">871</a></th><td>    <span class="kt">double</span><span class="o">**</span> Qbp <span class="o">=</span> Qb<span class="o">-&gt;</span>pointer<span class="p">();</span></td></tr><tr><th id="L872"><a href="#L872">872</a></th><td></td></tr><tr><th id="L873"><a href="#L873">873</a></th><td>    <span class="kt">double</span><span class="o">**</span> Qiap <span class="o">=</span> Aia_<span class="o">-&gt;</span>pointer<span class="p">();</span></td></tr><tr><th id="L874"><a href="#L874">874</a></th><td></td></tr><tr><th id="L875"><a href="#L875">875</a></th><td>    std<span class="o">::</span>map<span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span><span class="kt">int</span><span class="o">&gt;</span> ij_i_map<span class="p">,</span> ij_j_map<span class="p">;</span></td></tr><tr><th id="L876"><a href="#L876">876</a></th><td>    <span class="kt">int</span> counter <span class="o">=</span> <span class="mi">0L</span><span class="p">;</span></td></tr><tr><th id="L877"><a href="#L877">877</a></th><td>    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> i <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> ij<span class="o">=</span><span class="mi">0</span> <span class="p">;</span> i <span class="o">&lt;</span> naocc_<span class="p">;</span> i<span class="o">++</span><span class="p">)</span> <span class="p">{</span></td></tr><tr><th id="L878"><a href="#L878">878</a></th><td>        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> j <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> j <span class="o">&lt;=</span> i<span class="p">;</span> j<span class="o">++</span><span class="p">,</span> ij<span class="o">++</span><span class="p">)</span> <span class="p">{</span></td></tr><tr><th id="L879"><a href="#L879">879</a></th><td>            ij_i_map<span class="p">.</span>insert<span class="p">(</span>std<span class="o">::</span>pair<span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span><span class="kt">int</span><span class="o">&gt;</span><span class="p">(</span>counter<span class="p">,</span> i<span class="p">));</span></td></tr><tr><th id="L880"><a href="#L880">880</a></th><td>            ij_j_map<span class="p">.</span>insert<span class="p">(</span>std<span class="o">::</span>pair<span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span><span class="kt">int</span><span class="o">&gt;</span><span class="p">(</span>counter<span class="p">,</span> j<span class="p">));</span></td></tr><tr><th id="L881"><a href="#L881">881</a></th><td>            counter<span class="o">++</span><span class="p">;</span></td></tr><tr><th id="L882"><a href="#L882">882</a></th><td>        <span class="p">}</span></td></tr><tr><th id="L883"><a href="#L883">883</a></th><td>    <span class="p">}</span></td></tr><tr><th id="L884"><a href="#L884">884</a></th><td></td></tr><tr><th id="L885"><a href="#L885">885</a></th><td>    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> ij <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> ij <span class="o">&lt;</span> naocc_ <span class="o">*</span> <span class="p">(</span>naocc_ <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">/</span> <span class="mi">2</span><span class="p">;</span> ij<span class="o">++</span><span class="p">)</span> <span class="p">{</span></td></tr><tr><th id="L886"><a href="#L886">886</a></th><td></td></tr><tr><th id="L887"><a href="#L887">887</a></th><td>        <span class="k">if</span> <span class="p">(</span>ij <span class="o">%</span> nproc_ <span class="o">!=</span> rank_<span class="p">)</span> <span class="k">continue</span><span class="p">;</span></td></tr><tr><th id="L888"><a href="#L888">888</a></th><td></td></tr><tr><th id="L889"><a href="#L889">889</a></th><td>        <span class="kt">int</span> i <span class="o">=</span> ij_i_map<span class="p">[</span>ij<span class="p">];</span></td></tr><tr><th id="L890"><a href="#L890">890</a></th><td>        <span class="kt">int</span> j <span class="o">=</span> ij <span class="o">-</span> i <span class="o">*</span> <span class="p">(</span>i<span class="o">+</span><span class="mi">1</span><span class="p">)</span> <span class="o">/</span> <span class="mi">2</span><span class="p">;</span></td></tr><tr><th id="L891"><a href="#L891">891</a></th><td></td></tr><tr><th id="L892"><a href="#L892">892</a></th><td></td></tr><tr><th id="L893"><a href="#L893">893</a></th><td>        <span class="c1">// build_Qa(ind)</span></td></tr><tr><th id="L894"><a href="#L894">894</a></th><td><span class="c1"></span>        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> ind <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> ind <span class="o">&lt;</span> ablock_owner_<span class="p">[</span>i<span class="p">].</span>size<span class="p">();</span> ind<span class="o">++</span><span class="p">)</span> <span class="p">{</span></td></tr><tr><th id="L895"><a href="#L895">895</a></th><td>            printf<span class="p">(</span><span class="s">"i = %3d: Must fetch from process %3d, a block of %4d a, starting at a = %4d</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span></td></tr><tr><th id="L896"><a href="#L896">896</a></th><td>                   i<span class="p">,</span> ablock_owner_<span class="p">[</span>i<span class="p">][</span>ind<span class="p">],</span> ablock_size_<span class="p">[</span>i<span class="p">][</span>ind<span class="p">],</span> ablock_start_<span class="p">[</span>i<span class="p">][</span>ind<span class="p">]);</span></td></tr><tr><th id="L897"><a href="#L897">897</a></th><td></td></tr><tr><th id="L898"><a href="#L898">898</a></th><td>            <span class="kt">int</span> astart <span class="o">=</span> ablock_start_<span class="p">[</span>i<span class="p">][</span>ind<span class="p">];</span></td></tr><tr><th id="L899"><a href="#L899">899</a></th><td>            <span class="kt">int</span> asize  <span class="o">=</span> ablock_size_<span class="p">[</span>i<span class="p">][</span>ind<span class="p">];</span></td></tr><tr><th id="L900"><a href="#L900">900</a></th><td>            <span class="kt">int</span> aowner <span class="o">=</span> ablock_owner_<span class="p">[</span>i<span class="p">][</span>ind<span class="p">];</span></td></tr><tr><th id="L901"><a href="#L901">901</a></th><td></td></tr><tr><th id="L902"><a href="#L902">902</a></th><td>            madness<span class="o">::</span>Future<span class="o">&lt;</span>std<span class="o">::</span>vector<span class="o">&lt;</span><span class="kt">double</span><span class="o">&gt;</span> <span class="o">&gt;</span> fut <span class="o">=</span> task<span class="p">(</span>aowner<span class="p">,</span><span class="o">&amp;</span>MAD_MP2<span class="o">::</span>fetch_Qia_block<span class="p">,</span>i<span class="p">,</span>ind<span class="p">);</span></td></tr><tr><th id="L903"><a href="#L903">903</a></th><td>            task<span class="p">(</span>rank_<span class="p">,</span><span class="o">&amp;</span>MAD_MP2<span class="o">::</span>unpack_Qia_block<span class="p">,</span> fut<span class="p">,</span> Qa<span class="p">,</span> astart<span class="p">,</span> asize<span class="p">);</span></td></tr><tr><th id="L904"><a href="#L904">904</a></th><td>        <span class="p">}</span></td></tr><tr><th id="L905"><a href="#L905">905</a></th><td></td></tr><tr><th id="L906"><a href="#L906">906</a></th><td>        <span class="c1">// build_Qb</span></td></tr><tr><th id="L907"><a href="#L907">907</a></th><td><span class="c1"></span>        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> ind <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> ind <span class="o">&lt;</span> ablock_owner_<span class="p">[</span>j<span class="p">].</span>size<span class="p">();</span> ind<span class="o">++</span><span class="p">)</span> <span class="p">{</span></td></tr><tr><th id="L908"><a href="#L908">908</a></th><td>            printf<span class="p">(</span><span class="s">"j = %3d: Must fetch from process %3d, b block of %4d b, starting at b = %4d</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span></td></tr><tr><th id="L909"><a href="#L909">909</a></th><td>                   j<span class="p">,</span> ablock_owner_<span class="p">[</span>j<span class="p">][</span>ind<span class="p">],</span> ablock_size_<span class="p">[</span>j<span class="p">][</span>ind<span class="p">],</span> ablock_start_<span class="p">[</span>j<span class="p">][</span>ind<span class="p">]);</span></td></tr><tr><th id="L910"><a href="#L910">910</a></th><td></td></tr><tr><th id="L911"><a href="#L911">911</a></th><td>            <span class="kt">int</span> astart <span class="o">=</span> ablock_start_<span class="p">[</span>j<span class="p">][</span>ind<span class="p">];</span></td></tr><tr><th id="L912"><a href="#L912">912</a></th><td>            <span class="kt">int</span> asize  <span class="o">=</span> ablock_size_<span class="p">[</span>j<span class="p">][</span>ind<span class="p">];</span></td></tr><tr><th id="L913"><a href="#L913">913</a></th><td>            <span class="kt">int</span> aowner <span class="o">=</span> ablock_owner_<span class="p">[</span>j<span class="p">][</span>ind<span class="p">];</span></td></tr><tr><th id="L914"><a href="#L914">914</a></th><td></td></tr><tr><th id="L915"><a href="#L915">915</a></th><td>            madness<span class="o">::</span>Future<span class="o">&lt;</span>std<span class="o">::</span>vector<span class="o">&lt;</span><span class="kt">double</span><span class="o">&gt;</span> <span class="o">&gt;</span> fut <span class="o">=</span> task<span class="p">(</span>aowner<span class="p">,</span><span class="o">&amp;</span>MAD_MP2<span class="o">::</span>fetch_Qia_block<span class="p">,</span>j<span class="p">,</span>ind<span class="p">);</span></td></tr><tr><th id="L916"><a href="#L916">916</a></th><td>            task<span class="p">(</span>rank_<span class="p">,</span><span class="o">&amp;</span>MAD_MP2<span class="o">::</span>unpack_Qia_block<span class="p">,</span> fut<span class="p">,</span> Qb<span class="p">,</span> astart<span class="p">,</span> asize<span class="p">);</span></td></tr><tr><th id="L917"><a href="#L917">917</a></th><td>        <span class="p">}</span></td></tr><tr><th id="L918"><a href="#L918">918</a></th><td></td></tr><tr><th id="L919"><a href="#L919">919</a></th><td>        Communicator<span class="o">::</span>world<span class="o">-&gt;</span>get_madworld<span class="p">()</span><span class="o">-&gt;</span>taskq<span class="p">.</span>fence<span class="p">();</span></td></tr><tr><th id="L920"><a href="#L920">920</a></th><td></td></tr><tr><th id="L921"><a href="#L921">921</a></th><td><span class="c1">//        for (int Q = 0; Q &lt; naux_; Q++) {</span></td></tr><tr><th id="L922"><a href="#L922">922</a></th><td><span class="c1">//            C_DCOPY(navir_, &amp;Qiap[Q][i * navir_], 1, Qap[Q], 1);</span></td></tr><tr><th id="L923"><a href="#L923">923</a></th><td><span class="c1">//            C_DCOPY(navir_, &amp;Qiap[Q][j * navir_], 1, Qbp[Q], 1);</span></td></tr><tr><th id="L924"><a href="#L924">924</a></th><td><span class="c1">//        }</span></td></tr><tr><th id="L925"><a href="#L925">925</a></th><td><span class="c1"></span></td></tr><tr><th id="L926"><a href="#L926">926</a></th><td>        C_DGEMM<span class="p">(</span><span class="sc">'T'</span><span class="p">,</span><span class="sc">'N'</span><span class="p">,</span>navir_<span class="p">,</span>navir_<span class="p">,</span>naux_<span class="p">,</span> <span class="mf">1.0</span><span class="p">,</span> Qap<span class="p">[</span><span class="mi">0</span><span class="p">],</span> navir_<span class="p">,</span></td></tr><tr><th id="L927"><a href="#L927">927</a></th><td>                Qbp<span class="p">[</span><span class="mi">0</span><span class="p">],</span> navir_<span class="p">,</span> <span class="mf">0.0</span><span class="p">,</span> Ip<span class="p">[</span><span class="mi">0</span><span class="p">],</span> navir_<span class="p">);</span></td></tr><tr><th id="L928"><a href="#L928">928</a></th><td></td></tr><tr><th id="L929"><a href="#L929">929</a></th><td>        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> a <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> a <span class="o">&lt;</span> navir_<span class="p">;</span> a<span class="o">++</span><span class="p">)</span> <span class="p">{</span></td></tr><tr><th id="L930"><a href="#L930">930</a></th><td>            <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> b <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> b <span class="o">&lt;</span> navir_<span class="p">;</span> b<span class="o">++</span><span class="p">)</span> <span class="p">{</span></td></tr><tr><th id="L931"><a href="#L931">931</a></th><td>                <span class="kt">double</span> iajb <span class="o">=</span> Ip<span class="p">[</span>a<span class="p">][</span>b<span class="p">];</span></td></tr><tr><th id="L932"><a href="#L932">932</a></th><td>                <span class="kt">double</span> ibja <span class="o">=</span> Ip<span class="p">[</span>b<span class="p">][</span>a<span class="p">];</span></td></tr><tr><th id="L933"><a href="#L933">933</a></th><td>                <span class="kt">double</span> denom <span class="o">=</span> <span class="p">(</span>i <span class="o">==</span> j <span class="o">?</span> <span class="mf">1.0</span> <span class="o">:</span> <span class="mf">2.0</span><span class="p">)</span> <span class="o">/</span></td></tr><tr><th id="L934"><a href="#L934">934</a></th><td>                        <span class="p">(</span>eps_avir_<span class="o">-&gt;</span>get<span class="p">(</span>a<span class="p">)</span> <span class="o">+</span></td></tr><tr><th id="L935"><a href="#L935">935</a></th><td>                         eps_avir_<span class="o">-&gt;</span>get<span class="p">(</span>b<span class="p">)</span> <span class="o">-</span></td></tr><tr><th id="L936"><a href="#L936">936</a></th><td>                         eps_aocc_<span class="o">-&gt;</span>get<span class="p">(</span>i<span class="p">)</span> <span class="o">-</span></td></tr><tr><th id="L937"><a href="#L937">937</a></th><td>                         eps_aocc_<span class="o">-&gt;</span>get<span class="p">(</span>j<span class="p">));</span></td></tr><tr><th id="L938"><a href="#L938">938</a></th><td>                E_MP2J_ <span class="o">-=</span> <span class="mf">2.0</span> <span class="o">*</span> denom <span class="o">*</span> iajb <span class="o">*</span> iajb<span class="p">;</span></td></tr><tr><th id="L939"><a href="#L939">939</a></th><td>                E_MP2K_ <span class="o">+=</span> <span class="mf">1.0</span> <span class="o">*</span> denom <span class="o">*</span> iajb <span class="o">*</span> ibja<span class="p">;</span></td></tr><tr><th id="L940"><a href="#L940">940</a></th><td>            <span class="p">}</span></td></tr><tr><th id="L941"><a href="#L941">941</a></th><td>        <span class="p">}</span></td></tr><tr><th id="L942"><a href="#L942">942</a></th><td>    <span class="p">}</span></td></tr><tr><th id="L943"><a href="#L943">943</a></th><td></td></tr><tr><th id="L944"><a href="#L944">944</a></th><td>    Communicator<span class="o">::</span>world<span class="o">-&gt;</span>sync<span class="p">();</span></td></tr><tr><th id="L945"><a href="#L945">945</a></th><td>    Communicator<span class="o">::</span>world<span class="o">-&gt;</span>sum<span class="p">(</span><span class="o">&amp;</span>E_MP2J_<span class="p">,</span> <span class="mi">1</span><span class="p">);</span></td></tr><tr><th id="L946"><a href="#L946">946</a></th><td>    Communicator<span class="o">::</span>world<span class="o">-&gt;</span>sum<span class="p">(</span><span class="o">&amp;</span>E_MP2K_<span class="p">,</span> <span class="mi">1</span><span class="p">);</span></td></tr><tr><th id="L947"><a href="#L947">947</a></th><td><span class="p">}</span></td></tr><tr><th id="L948"><a href="#L948">948</a></th><td><span class="kt">void</span> MAD_MP2<span class="o">::</span>denominator<span class="p">()</span></td></tr><tr><th id="L949"><a href="#L949">949</a></th><td><span class="p">{</span></td></tr><tr><th id="L950"><a href="#L950">950</a></th><td>    denom_ <span class="o">=</span> boost<span class="o">::</span>shared_ptr<span class="o">&lt;</span>Denominator<span class="o">&gt;</span><span class="p">(</span>Denominator<span class="o">::</span>buildDenominator<span class="p">(</span></td></tr><tr><th id="L951"><a href="#L951">951</a></th><td>        options_<span class="p">.</span>get_str<span class="p">(</span><span class="s">"DENOMINATOR_ALGORITHM"</span><span class="p">),</span> eps_aocc_<span class="p">,</span> eps_avir_<span class="p">,</span></td></tr><tr><th id="L952"><a href="#L952">952</a></th><td>        options_<span class="p">.</span>get_double<span class="p">(</span><span class="s">"DENOMINATOR_DELTA"</span><span class="p">)));</span></td></tr><tr><th id="L953"><a href="#L953">953</a></th><td><span class="p">}</span></td></tr><tr><th id="L954"><a href="#L954">954</a></th><td><span class="kt">void</span> MAD_MP2<span class="o">::</span>IJ<span class="p">()</span></td></tr><tr><th id="L955"><a href="#L955">955</a></th><td><span class="p">{</span></td></tr><tr><th id="L956"><a href="#L956">956</a></th><td><span class="cp">#if 0</span><span class="c"></span></td></tr><tr><th id="L957"><a href="#L957">957</a></th><td><span class="c">    E_MP2J_ = 0.0;</span></td></tr><tr><th id="L958"><a href="#L958">958</a></th><td><span class="c">    E_MP2K_ = 0.0;</span></td></tr><tr><th id="L959"><a href="#L959">959</a></th><td><span class="c"></span></td></tr><tr><th id="L960"><a href="#L960">960</a></th><td><span class="c">    int nw = denom_-&gt;nvector();</span></td></tr><tr><th id="L961"><a href="#L961">961</a></th><td><span class="c">    double** tau = denom_-&gt;denominator()-&gt;pointer();</span></td></tr><tr><th id="L962"><a href="#L962">962</a></th><td><span class="c"></span></td></tr><tr><th id="L963"><a href="#L963">963</a></th><td><span class="c">    timer_on("MP2J Energy");</span></td></tr><tr><th id="L964"><a href="#L964">964</a></th><td><span class="c">    for (int hQ = 0; hQ &lt; nirrep_; hQ++) {</span></td></tr><tr><th id="L965"><a href="#L965">965</a></th><td><span class="c">        for (int hi = 0; hi &lt; nirrep_; hi++) {  </span></td></tr><tr><th id="L966"><a href="#L966">966</a></th><td><span class="c">            int ha = hi ^ hQ;</span></td></tr><tr><th id="L967"><a href="#L967">967</a></th><td><span class="c"></span></td></tr><tr><th id="L968"><a href="#L968">968</a></th><td><span class="c">            int nQ = nauxpi_[hQ];</span></td></tr><tr><th id="L969"><a href="#L969">969</a></th><td><span class="c">            int ni = naoccpi_[hi];</span></td></tr><tr><th id="L970"><a href="#L970">970</a></th><td><span class="c">            int na = navirpi_[ha];</span></td></tr><tr><th id="L971"><a href="#L971">971</a></th><td><span class="c"></span></td></tr><tr><th id="L972"><a href="#L972">972</a></th><td><span class="c">            if (!nQ || !ni || !na) continue;</span></td></tr><tr><th id="L973"><a href="#L973">973</a></th><td><span class="c">        </span></td></tr><tr><th id="L974"><a href="#L974">974</a></th><td><span class="c">            double** Qiap = Aia_[std::pair&lt;int,int&gt;(hQ,hi)]-&gt;pointer();</span></td></tr><tr><th id="L975"><a href="#L975">975</a></th><td><span class="c">            boost::shared_ptr&lt;Matrix&gt; Qiaw(new Matrix("(Q|ia)^w)", nQ, ni * (ULI) na));</span></td></tr><tr><th id="L976"><a href="#L976">976</a></th><td><span class="c">            double** Qiawp = Qiaw-&gt;pointer();</span></td></tr><tr><th id="L977"><a href="#L977">977</a></th><td><span class="c"></span></td></tr><tr><th id="L978"><a href="#L978">978</a></th><td><span class="c">            boost::shared_ptr&lt;Matrix&gt; Z(new Matrix("Z^QQ", nQ, nQ)); </span></td></tr><tr><th id="L979"><a href="#L979">979</a></th><td><span class="c">            double** Zp = Z-&gt;pointer();</span></td></tr><tr><th id="L980"><a href="#L980">980</a></th><td><span class="c"></span></td></tr><tr><th id="L981"><a href="#L981">981</a></th><td><span class="c">            for (int w = 0; w &lt; nw; w++) {</span></td></tr><tr><th id="L982"><a href="#L982">982</a></th><td><span class="c">                ::memcpy(static_cast&lt;void*&gt;(Qiawp[0]), static_cast&lt;void*&gt;(Qiap[0]), nQ * (ULI) na * ni * sizeof(double));</span></td></tr><tr><th id="L983"><a href="#L983">983</a></th><td><span class="c">                for (int i = 0; i &lt; ni; i++) {</span></td></tr><tr><th id="L984"><a href="#L984">984</a></th><td><span class="c">                    for (int a = 0; a &lt; na; a++) {</span></td></tr><tr><th id="L985"><a href="#L985">985</a></th><td><span class="c">                        C_DSCAL(nQ, tau[w][(offset_aocc_[hi] + i) * navir_ + (offset_avir_[ha] + a)], </span></td></tr><tr><th id="L986"><a href="#L986">986</a></th><td><span class="c">                            &amp;Qiawp[0][i * na + a], ni * (ULI) na);</span></td></tr><tr><th id="L987"><a href="#L987">987</a></th><td><span class="c">                    }</span></td></tr><tr><th id="L988"><a href="#L988">988</a></th><td><span class="c">                }</span></td></tr><tr><th id="L989"><a href="#L989">989</a></th><td><span class="c">                C_DGEMM('N','T',nQ,nQ,ni*(ULI)na,1.0,Qiawp[0],ni*(ULI)na,Qiap[0],ni*(ULI)na,0.0,Zp[0],nQ);</span></td></tr><tr><th id="L990"><a href="#L990">990</a></th><td><span class="c">                E_MP2J_ -= 2.0 * C_DDOT(nQ * (ULI) nQ, Zp[0], 1, Zp[0], 1); </span></td></tr><tr><th id="L991"><a href="#L991">991</a></th><td><span class="c">            }        </span></td></tr><tr><th id="L992"><a href="#L992">992</a></th><td><span class="c">        }</span></td></tr><tr><th id="L993"><a href="#L993">993</a></th><td><span class="c">    } </span></td></tr><tr><th id="L994"><a href="#L994">994</a></th><td><span class="c">    timer_off("MP2J Energy");</span></td></tr><tr><th id="L995"><a href="#L995">995</a></th><td><span class="c"></span><span class="cp">#endif</span></td></tr><tr><th id="L996"><a href="#L996">996</a></th><td><span class="cp"></span><span class="p">}</span></td></tr><tr><th id="L997"><a href="#L997">997</a></th><td><span class="kt">void</span> MAD_MP2<span class="o">::</span>print_energy<span class="p">()</span></td></tr><tr><th id="L998"><a href="#L998">998</a></th><td><span class="p">{</span></td></tr><tr><th id="L999"><a href="#L999">999</a></th><td>    fprintf<span class="p">(</span>outfile<span class="p">,</span> <span class="s">"  ==&gt; Energies &lt;==</span><span class="se">\n\n</span><span class="s">"</span><span class="p">);</span></td></tr><tr><th id="L1000"><a href="#L1000">1000</a></th><td>    energies_<span class="p">[</span><span class="s">"Reference Energy"</span><span class="p">]</span>         <span class="o">=</span> Eref_<span class="p">;</span></td></tr><tr><th id="L1001"><a href="#L1001">1001</a></th><td>    energies_<span class="p">[</span><span class="s">"MP2J Energy"</span><span class="p">]</span>              <span class="o">=</span> E_MP2J_<span class="p">;</span></td></tr><tr><th id="L1002"><a href="#L1002">1002</a></th><td>    energies_<span class="p">[</span><span class="s">"MP2K Energy"</span><span class="p">]</span>              <span class="o">=</span> E_MP2K_<span class="p">;</span></td></tr><tr><th id="L1003"><a href="#L1003">1003</a></th><td>    energies_<span class="p">[</span><span class="s">"Same-Spin Energy"</span><span class="p">]</span>         <span class="o">=</span> <span class="mf">0.5</span> <span class="o">*</span> E_MP2J_ <span class="o">+</span> E_MP2K_<span class="p">;</span></td></tr><tr><th id="L1004"><a href="#L1004">1004</a></th><td>    energies_<span class="p">[</span><span class="s">"Opposite-Spin Energy"</span><span class="p">]</span>     <span class="o">=</span> <span class="mf">0.5</span> <span class="o">*</span> E_MP2J_<span class="p">;</span></td></tr><tr><th id="L1005"><a href="#L1005">1005</a></th><td>    energies_<span class="p">[</span><span class="s">"Correlation Energy"</span><span class="p">]</span>       <span class="o">=</span> E_MP2J_ <span class="o">+</span> E_MP2K_<span class="p">;</span></td></tr><tr><th id="L1006"><a href="#L1006">1006</a></th><td>    energies_<span class="p">[</span><span class="s">"Total Energy"</span><span class="p">]</span>             <span class="o">=</span> Eref_ <span class="o">+</span> E_MP2J_ <span class="o">+</span> E_MP2K_<span class="p">;</span></td></tr><tr><th id="L1007"><a href="#L1007">1007</a></th><td>    energies_<span class="p">[</span><span class="s">"SCS Same-Spin Energy"</span><span class="p">]</span>     <span class="o">=</span> scale_ss_ <span class="o">*</span> <span class="p">(</span><span class="mf">0.5</span> <span class="o">*</span> E_MP2J_ <span class="o">+</span> E_MP2K_<span class="p">);</span></td></tr><tr><th id="L1008"><a href="#L1008">1008</a></th><td>    energies_<span class="p">[</span><span class="s">"SCS Opposite-Spin Energy"</span><span class="p">]</span> <span class="o">=</span> scale_os_ <span class="o">*</span> <span class="p">(</span><span class="mf">0.5</span> <span class="o">*</span> E_MP2J_<span class="p">);</span></td></tr><tr><th id="L1009"><a href="#L1009">1009</a></th><td>    energies_<span class="p">[</span><span class="s">"SCS Correlation Energy"</span><span class="p">]</span>   <span class="o">=</span> energies_<span class="p">[</span><span class="s">"SCS Opposite-Spin Energy"</span><span class="p">]</span> <span class="o">+</span> energies_<span class="p">[</span><span class="s">"SCS Same-Spin Energy"</span><span class="p">];</span></td></tr><tr><th id="L1010"><a href="#L1010">1010</a></th><td>    energies_<span class="p">[</span><span class="s">"SCS Total Energy"</span><span class="p">]</span>         <span class="o">=</span> Eref_ <span class="o">+</span> energies_<span class="p">[</span><span class="s">"SCS Correlation Energy"</span><span class="p">];</span> </td></tr><tr><th id="L1011"><a href="#L1011">1011</a></th><td></td></tr><tr><th id="L1012"><a href="#L1012">1012</a></th><td>    energy_ <span class="o">=</span> energies_<span class="p">[</span><span class="s">"Total Energy"</span><span class="p">];</span></td></tr><tr><th id="L1013"><a href="#L1013">1013</a></th><td></td></tr><tr><th id="L1014"><a href="#L1014">1014</a></th><td>    Process<span class="o">::</span>environment<span class="p">.</span>globals<span class="p">[</span><span class="s">"E_MP2J"</span><span class="p">]</span> <span class="o">=</span> E_MP2J_<span class="p">;</span></td></tr><tr><th id="L1015"><a href="#L1015">1015</a></th><td>    Process<span class="o">::</span>environment<span class="p">.</span>globals<span class="p">[</span><span class="s">"E_MP2K"</span><span class="p">]</span> <span class="o">=</span> E_MP2K_<span class="p">;</span></td></tr><tr><th id="L1016"><a href="#L1016">1016</a></th><td></td></tr><tr><th id="L1017"><a href="#L1017">1017</a></th><td>    fprintf<span class="p">(</span>outfile<span class="p">,</span> <span class="s">"</span><span class="se">\t</span><span class="s">----------------------------------------------------------</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span></td></tr><tr><th id="L1018"><a href="#L1018">1018</a></th><td>    fprintf<span class="p">(</span>outfile<span class="p">,</span> <span class="s">"</span><span class="se">\t</span><span class="s"> ====================&gt; MP2 Energies &lt;==================== </span><span class="se">\n</span><span class="s">"</span><span class="p">);</span></td></tr><tr><th id="L1019"><a href="#L1019">1019</a></th><td>    fprintf<span class="p">(</span>outfile<span class="p">,</span> <span class="s">"</span><span class="se">\t</span><span class="s">----------------------------------------------------------</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span></td></tr><tr><th id="L1020"><a href="#L1020">1020</a></th><td>    fprintf<span class="p">(</span>outfile<span class="p">,</span> <span class="s">"</span><span class="se">\t</span><span class="s"> %-25s = %24.16f [H]</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="s">"Reference Energy"</span><span class="p">,</span>         energies_<span class="p">[</span><span class="s">"Reference Energy"</span><span class="p">]);</span></td></tr><tr><th id="L1021"><a href="#L1021">1021</a></th><td>    fprintf<span class="p">(</span>outfile<span class="p">,</span> <span class="s">"</span><span class="se">\t</span><span class="s"> %-25s = %24.16f [H]</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="s">"MP2J Energy"</span><span class="p">,</span>              energies_<span class="p">[</span><span class="s">"MP2J Energy"</span><span class="p">]);</span></td></tr><tr><th id="L1022"><a href="#L1022">1022</a></th><td>    fprintf<span class="p">(</span>outfile<span class="p">,</span> <span class="s">"</span><span class="se">\t</span><span class="s"> %-25s = %24.16f [H]</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="s">"MP2K Energy"</span><span class="p">,</span>              energies_<span class="p">[</span><span class="s">"MP2K Energy"</span><span class="p">]);</span></td></tr><tr><th id="L1023"><a href="#L1023">1023</a></th><td>    fprintf<span class="p">(</span>outfile<span class="p">,</span> <span class="s">"</span><span class="se">\t</span><span class="s"> %-25s = %24.16f [H]</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="s">"Same-Spin Energy"</span><span class="p">,</span>         energies_<span class="p">[</span><span class="s">"Same-Spin Energy"</span><span class="p">]);</span></td></tr><tr><th id="L1024"><a href="#L1024">1024</a></th><td>    fprintf<span class="p">(</span>outfile<span class="p">,</span> <span class="s">"</span><span class="se">\t</span><span class="s"> %-25s = %24.16f [H]</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="s">"Opposite-Spin Energy"</span><span class="p">,</span>     energies_<span class="p">[</span><span class="s">"Opposite-Spin Energy"</span><span class="p">]);</span></td></tr><tr><th id="L1025"><a href="#L1025">1025</a></th><td>    fprintf<span class="p">(</span>outfile<span class="p">,</span> <span class="s">"</span><span class="se">\t</span><span class="s"> %-25s = %24.16f [H]</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="s">"Correlation Energy"</span><span class="p">,</span>       energies_<span class="p">[</span><span class="s">"Correlation Energy"</span><span class="p">]);</span></td></tr><tr><th id="L1026"><a href="#L1026">1026</a></th><td>    fprintf<span class="p">(</span>outfile<span class="p">,</span> <span class="s">"</span><span class="se">\t</span><span class="s"> %-25s = %24.16f [H]</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="s">"Total Energy"</span><span class="p">,</span>             energies_<span class="p">[</span><span class="s">"Total Energy"</span><span class="p">]);</span></td></tr><tr><th id="L1027"><a href="#L1027">1027</a></th><td>    fprintf<span class="p">(</span>outfile<span class="p">,</span> <span class="s">"</span><span class="se">\t</span><span class="s">----------------------------------------------------------</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span></td></tr><tr><th id="L1028"><a href="#L1028">1028</a></th><td>    fprintf<span class="p">(</span>outfile<span class="p">,</span> <span class="s">"</span><span class="se">\t</span><span class="s"> ==================&gt; SCS-MP2 Energies &lt;================== </span><span class="se">\n</span><span class="s">"</span><span class="p">);</span></td></tr><tr><th id="L1029"><a href="#L1029">1029</a></th><td>    fprintf<span class="p">(</span>outfile<span class="p">,</span> <span class="s">"</span><span class="se">\t</span><span class="s">----------------------------------------------------------</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span></td></tr><tr><th id="L1030"><a href="#L1030">1030</a></th><td>    fprintf<span class="p">(</span>outfile<span class="p">,</span> <span class="s">"</span><span class="se">\t</span><span class="s"> %-25s = %24.16f [-]</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="s">"SCS Same-Spin Scale"</span><span class="p">,</span>      scale_ss_<span class="p">);</span></td></tr><tr><th id="L1031"><a href="#L1031">1031</a></th><td>    fprintf<span class="p">(</span>outfile<span class="p">,</span> <span class="s">"</span><span class="se">\t</span><span class="s"> %-25s = %24.16f [-]</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="s">"SCS Opposite-Spin Scale"</span><span class="p">,</span>  scale_os_<span class="p">);</span></td></tr><tr><th id="L1032"><a href="#L1032">1032</a></th><td>    fprintf<span class="p">(</span>outfile<span class="p">,</span> <span class="s">"</span><span class="se">\t</span><span class="s"> %-25s = %24.16f [H]</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="s">"SCS Same-Spin Energy"</span><span class="p">,</span>     energies_<span class="p">[</span><span class="s">"SCS Same-Spin Energy"</span><span class="p">]);</span></td></tr><tr><th id="L1033"><a href="#L1033">1033</a></th><td>    fprintf<span class="p">(</span>outfile<span class="p">,</span> <span class="s">"</span><span class="se">\t</span><span class="s"> %-25s = %24.16f [H]</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="s">"SCS Opposite-Spin Energy"</span><span class="p">,</span> energies_<span class="p">[</span><span class="s">"SCS Opposite-Spin Energy"</span><span class="p">]);</span></td></tr><tr><th id="L1034"><a href="#L1034">1034</a></th><td>    fprintf<span class="p">(</span>outfile<span class="p">,</span> <span class="s">"</span><span class="se">\t</span><span class="s"> %-25s = %24.16f [H]</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="s">"SCS Correlation Energy"</span><span class="p">,</span>   energies_<span class="p">[</span><span class="s">"SCS Correlation Energy"</span><span class="p">]);</span></td></tr><tr><th id="L1035"><a href="#L1035">1035</a></th><td>    fprintf<span class="p">(</span>outfile<span class="p">,</span> <span class="s">"</span><span class="se">\t</span><span class="s"> %-25s = %24.16f [H]</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="s">"SCS Total Energy"</span><span class="p">,</span>         energies_<span class="p">[</span><span class="s">"SCS Total Energy"</span><span class="p">]);</span></td></tr><tr><th id="L1036"><a href="#L1036">1036</a></th><td>    fprintf<span class="p">(</span>outfile<span class="p">,</span> <span class="s">"</span><span class="se">\t</span><span class="s">----------------------------------------------------------</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span></td></tr><tr><th id="L1037"><a href="#L1037">1037</a></th><td>    fprintf<span class="p">(</span>outfile<span class="p">,</span> <span class="s">"</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span></td></tr><tr><th id="L1038"><a href="#L1038">1038</a></th><td>    fflush<span class="p">(</span>outfile<span class="p">);</span></td></tr><tr><th id="L1039"><a href="#L1039">1039</a></th><td></td></tr><tr><th id="L1040"><a href="#L1040">1040</a></th><td><span class="p">}</span></td></tr><tr><th id="L1041"><a href="#L1041">1041</a></th><td></td></tr><tr><th id="L1042"><a href="#L1042">1042</a></th><td><span class="p">}}</span> <span class="c1">// End Namespaces</span></td></tr></tbody></table>
      </div>
      <div id="help">
        <strong>Note:</strong> See <a href="/trac/wiki/TracBrowser">TracBrowser</a>
        for help on using the browser.
      </div>
      <div id="anydiff">
        <form action="/trac/diff" method="get">
          <div class="buttons">
            <input type="hidden" name="new_path" value="/trunk/tests/plugin_mad_mp2/mad_mp2.cc" />
            <input type="hidden" name="old_path" value="/trunk/tests/plugin_mad_mp2/mad_mp2.cc" />
            <input type="hidden" name="new_rev" />
            <input type="hidden" name="old_rev" />
            <input type="submit" value="View changes..." title="Select paths and revs for Diff" />
          </div>
        </form>
      </div>
    </div>
    <div id="altlinks">
      <h3>Download in other formats:</h3>
      <ul>
        <li class="first">
          <a rel="nofollow" href="/trac/browser/trunk/tests/plugin_mad_mp2/mad_mp2.cc?format=txt">Plain Text</a>
        </li><li class="last">
          <a rel="nofollow" href="/trac/export/1983/trunk/tests/plugin_mad_mp2/mad_mp2.cc">Original Format</a>
        </li>
      </ul>
    </div>
    </div>
    <div id="footer" lang="en" xml:lang="en"><hr />
      <a id="tracpowered" href="http://trac.edgewall.org/"><img src="/trac/chrome/common/trac_logo_mini.png" height="30" width="107" alt="Trac Powered" /></a>
      <p class="left">
        Powered by <a href="/trac/about"><strong>Trac 0.11.7</strong></a><br />
        By <a href="http://www.edgewall.org/">Edgewall Software</a>.
      </p>
      <p class="right">www.psicode.org - The home of Psi4 on the internet.</p>
    </div>
  </body>
</html>