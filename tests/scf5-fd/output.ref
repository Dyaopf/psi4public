    -----------------------------------------------------------------------
          PSI4: An Open-Source Ab Initio Electronic Structure Package
                              PSI 4.0.0-alpha Driver
    T. D. Crawford, C. D. Sherrill, E. F. Valeev, J. T. Fermann, R. A. King,
    M. L. Leininger, S. T. Brown, C. L. Janssen, E. T. Seidl, J. P. Kenny,
    and W. D. Allen, J. Comput. Chem. 28, 1610-1616 (2007)

                         Additional Contributions by
    Francesco Evangelista, Andrew Simmonett, Justin Turney, Jeremiah Wilke
    -----------------------------------------------------------------------


    Using LocalCommunicator (Number of processes = 1)

    Memory level set to 256.000 MB

  ==> Input File <==

--------------------------------------------------------------------------
#! SCF STO-3G geometry optimzation, with Z-matrix input, by finite-differences

# Same test case as scf5
nucenergy = 8.9064890670                            #TEST
refenergy = -74.965901192                           #TEST

molecule h2o {
     O
     H 1 1.0
     H 1 1.0 2 104.5
}

set globals {
  diis false
  basis sto-3g
  e_converge 10
  d_converge 10
}

set findif {
  points 3
}

cycle = 0
returnValue = 0
thisenergy = 0.0

# initialize global molecule
h2o.update_geometry()

# optimization loop
while (cycle < 20 and returnValue != PsiReturnType.EndLoop):
    # generate geometry list for finite differences (undisplaced geometry is last)
    geoms = fd_geoms_1_0()
    #initialize vector of correct length
    if cycle == 0:
        E = PsiMod.Vector(len(geoms))
    # compute energy for each geometry
    for i in range(len(geoms)):
        h2o.set_geometry(geoms[i])
        E.set(0, i, energy('scf'))
    thisenergy = E.get(0,len(geoms)-1)
    # pass energies to function to compute gradient
    fd_grad_1_0(E)
    #take optimization step
    returnValue = optking()
    cycle = cycle + 1

# if you want to print energies from python
#print 'Energies\n'
#for i in range(len(geoms)):
#    print '{0:5} {1:20.10f}\n'.format(i,E[i])

compare_values(nucenergy, h2o.nuclear_repulsion_energy(), 3, "Nuclear repulsion energy")    #TEST
compare_values(refenergy, thisenergy, 3, "Reference energy")                                #TEST

clean()

--------------------------------------------------------------------------
	Using finite-differences of energies to determine gradients.
	Generating geometries for use with 3-point formula.
	Displacement size will be 1.00e-02.
	Number of atoms is 3.
    -Cartesian displacement SALCs per irrep:
    Irrep  #SALCs
    -----  ------
      0       3
      1       1
      2       2
      3       3

	Number of SALC's is 3.
	irrep = 0, ncomponent = 1
		0: atom 0, direction 2, coef 1.000000
	irrep = 0, ncomponent = 2
		0: atom 1, direction 1, coef 0.707107
		1: atom 2, direction 1, coef -0.707107
	irrep = 0, ncomponent = 2
		0: atom 1, direction 2, coef 0.707107
		1: atom 2, direction 2, coef 0.707107
	Number of displacements (including reference) is 7.

*** tstart() called on mac10147
*** at Tue Jun 14 09:57:11 2011

	There are an even number of electrons - assuming singlet.
	Specify the multiplicity with the MULTP option in the
	input if this is incorrect


         ---------------------------------------------------------
                                   SCF
            by Justin Turney, Rob Parrish, and Andy Simmonnett
                              RHF Reference
                        1 Threads,    256 MiB Core
         ---------------------------------------------------------

  ==> Geometry <==

    Molecular point group: c2v

    Geometry (in Angstrom), charge = 0, multiplicity = 1:

       Center              X                  Y                   Z       
    ------------   -----------------  -----------------  -----------------
           O          0.000000000000     0.000000000000    -0.068664299857
           H          0.000000000000     0.790689573744     0.544876133590
           H          0.000000000000    -0.790689573744     0.544876133590

    Number of unique atoms: 2

    Atoms equivalency:
       unique atom 0: 0 
       unique atom 1: 1 2 

  Running in c2v symmetry.

  Nuclear repulsion =    8.794608508058701

  Charge       = 0
  Multiplicity = 1
  Electrons    = 10
  Nalpha       = 5
  Nbeta        = 5

  ==> Algorithm <==

  SCF Algorithm Type is PK.
  DIIS disabled.
  MOM disabled.
  Guess Type is CORE.
  Energy threshold   = 1.00e-10
  Density threshold  = 1.00e-10
  Integral threshold = 0.00e+00

  ==> Primary Basis: STO-3G <==

  Basis Set
    Number of shells: 5
    Number of basis function: 7
    Number of Cartesian functions: 7
    Spherical Harmonics?: true
    Max angular momentum: 1

  ==> Pre-Iterations <==

  Minimum eigenvalue in the overlap matrix is 3.7080108292E-01.
  Using Symmetric Orthogonalization.
  SCF Guess: Core (One-Electron) Hamiltonian.

  Initial RHF energy:   -54.63652886810936

   -------------------------------------------------------
    Irrep   Nso     Nmo     Nalpha   Nbeta   Ndocc  Nsocc
   -------------------------------------------------------
     A1         4       4       3       3       3       0
     A2         0       0       0       0       0       0
     B1         1       1       1       1       1       0
     B2         2       2       1       1       1       0
   -------------------------------------------------------
    Total       7       7       5       5       5       0
   -------------------------------------------------------

  ==> Integral Setup <==

 MINTS: Wrapper to libmints.
   by Justin Turney

   Calculation information:
      Number of atoms:                   3
      Number of AO shells:               5
      Number of SO shells:               4
      Number of primitives:             15
      Number of atomic orbitals:         7
      Number of basis functions:         7

      Number of irreps:                  4
      Number of functions per irrep: [   4    0    1    2 ]

      Computing integrals...for (0 0 | 0 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(0 0 | 0 0)
for (1 0 | 0 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 0 | 0 0)
for (1 1 | 0 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 1 | 0 0)
for (1 0 | 1 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 0 | 1 0)
for (1 1 | 1 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 1 | 1 0)
for (1 1 | 1 1) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 1 | 1 1)
for (0 0 | 2 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (0 0 | 2 1) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (1 0 | 2 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (1 0 | 2 1) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (1 1 | 2 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (1 1 | 2 1) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (0 0 | 2 2) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(0 0 | 2 2)
for (2 0 | 2 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 0 | 2 0)
for (1 0 | 2 2) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 0 | 2 2)
for (2 1 | 2 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 1 | 2 0)
for (1 1 | 2 2) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 1 | 2 2)
for (2 1 | 2 1) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 1 | 2 1)
for (2 0 | 2 2) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (2 1 | 2 2) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (2 2 | 2 2) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 2 | 2 2)
for (3 0 | 0 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 0 | 0 0)
for (3 1 | 0 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 1 | 0 0)
for (3 0 | 1 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 0 | 1 0)
for (3 1 | 1 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 1 | 1 0)
for (3 0 | 1 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 0 | 1 1)
for (3 1 | 1 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 1 | 1 1)
for (0 0 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 4
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(0 0 | 2 3)
for (3 0 | 2 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 0 | 2 0)
for (1 0 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 4
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 0 | 2 3)
for (3 1 | 2 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 1 | 2 0)
for (3 0 | 2 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 0 | 2 1)
for (1 1 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 4
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 1 | 2 3)
for (3 1 | 2 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 1 | 2 1)
for (2 3 | 2 0) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 3 | 2 0)
for (3 0 | 2 2) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 0 | 2 2)
for (2 3 | 2 1) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 3 | 2 1)
for (3 1 | 2 2) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 1 | 2 2)
for (2 3 | 2 2) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 3 | 2 2)
for (3 3 | 0 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 1
	0
	(3 3 | 0 0)
	(3 4 | 0 0)
for (3 0 | 3 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 3
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 0 | 3 0)
	(3 0 | 4 0)
for (3 3 | 1 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 1
	0
	(3 3 | 1 0)
	(3 4 | 1 0)
for (3 1 | 3 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 3
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 1 | 3 0)
	(3 1 | 4 0)
for (3 3 | 1 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 1
	0
	(3 3 | 1 1)
	(3 4 | 1 1)
for (3 1 | 3 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 3
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 1 | 3 1)
	(3 1 | 4 1)
for (3 3 | 2 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 1
	0
	(3 3 | 2 0)
	(3 4 | 2 0)
for (3 0 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 3
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 0 | 2 3)
	(3 0 | 2 4)
for (3 3 | 2 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 1
	0
	(3 3 | 2 1)
	(3 4 | 2 1)
for (3 1 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 3
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 1 | 2 3)
	(3 1 | 2 4)
for (3 3 | 2 2) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 1
	0
	(3 3 | 2 2)
	(3 4 | 2 2)
for (2 3 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 3
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 3
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 2
	0
	1
	(2 3 | 2 3)
	(2 3 | 2 4)
for (3 3 | 3 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 3
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 3
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 3 | 3 0)
	(3 3 | 4 0)
	(3 4 | 3 0)
	(3 4 | 4 0)
for (3 3 | 3 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 3
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 3
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 3 | 3 1)
	(3 3 | 4 1)
	(3 4 | 3 1)
	(3 4 | 4 1)
for (3 3 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 3
	klstablizer: 3
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 3 | 2 3)
	(3 3 | 2 4)
	(3 4 | 2 3)
	(3 4 | 2 4)
for (3 3 | 3 3) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 3
	lstablizer: 3
	ijstablizer: 3
	klstablizer: 3
	R.size = 2
	0
	1
	S.size = 2
	0
	1
	T.size = 2
	0
	1
	(3 3 | 3 3)
	(3 3 | 3 4)
	(3 3 | 4 4)
	(3 3 | 4 3)
	(3 4 | 3 3)
	(3 4 | 3 4)
	(3 4 | 4 4)
	(3 4 | 4 3)
done

      Computed 138 non-zero integrals.

  ==> Iterations <==

                        Total Energy        Delta E      Density RMS

   @RHF iter   1:   -73.25317044092078   -1.86166e+01    0.00000e+00 
   @RHF iter   2:   -74.93093382862781   -1.67776e+00    3.98385e-01 
   @RHF iter   3:   -74.96314904255331   -3.22152e-02    5.63046e-02 
   @RHF iter   4:   -74.96447454481236   -1.32550e-03    9.73554e-03 
   @RHF iter   5:   -74.96463012318104   -1.55578e-04    3.85117e-03 
   @RHF iter   6:   -74.96465824064133   -2.81175e-05    1.54351e-03 
   @RHF iter   7:   -74.96466372785473   -5.48721e-06    6.72995e-04 
   @RHF iter   8:   -74.96466481991015   -1.09206e-06    2.95835e-04 
   @RHF iter   9:   -74.96466503843268   -2.18523e-07    1.31384e-04 
   @RHF iter  10:   -74.96466508222878   -4.37961e-08    5.85630e-05 
   @RHF iter  11:   -74.96466509101046   -8.78168e-09    2.61621e-05 
   @RHF iter  12:   -74.96466509277154   -1.76108e-09    1.17004e-05 
   @RHF iter  13:   -74.96466509312468   -3.53140e-10    5.23596e-06 
   @RHF iter  14:   -74.96466509319548   -7.07985e-11    2.34387e-06 
   @RHF iter  15:   -74.96466509320970   -1.42251e-11    1.04942e-06 
   @RHF iter  16:   -74.96466509321255   -2.84217e-12    4.69901e-07 
   @RHF iter  17:   -74.96466509321313   -5.82645e-13    2.10420e-07 
   @RHF iter  18:   -74.96466509321324   -1.13687e-13    9.42282e-08 
   @RHF iter  19:   -74.96466509321323    1.42109e-14    4.21970e-08 
   @RHF iter  20:   -74.96466509321327   -4.26326e-14    1.88967e-08 
   @RHF iter  21:   -74.96466509321323    4.26326e-14    8.46237e-09 
   @RHF iter  22:   -74.96466509321328   -5.68434e-14    3.78965e-09 
   @RHF iter  23:   -74.96466509321327    1.42109e-14    1.69710e-09 
   @RHF iter  24:   -74.96466509321323    4.26326e-14    7.60006e-10 
   @RHF iter  25:   -74.96466509321323    0.00000e+00    3.40349e-10 
   @RHF iter  26:   -74.96466509321320    2.84217e-14    1.52416e-10 

  ==> Post-Iterations <==

	Orbital Energies (a.u.)
	-----------------------

	Doubly Occupied:                                                      

	   1A1   -20.247549     2A1    -1.247541     1B2    -0.595262  
	   3A1    -0.448073     1B1    -0.389015  

	Virtual:                                                              

	   4A1     0.563615     2B2     0.691764  

	Final Occupation by Irrep:
	         A1    A2    B1    B2 
	DOCC [     3,    0,    1,    1 ]

  Energy converged.

  @RHF Final Energy:   -74.96466509321320

  ==> Properties <==

 OEPROP: One-electron properties/analyses.
  by Rob Parrish and Justin Turney.
  built on LIBMINTS.

 Dipole Moment: (a.u.)
     X:     0.0000      Y:     0.0000      Z:     0.6565     Total:     0.6565

 Dipole Moment: (Debye)
     X:     0.0000      Y:     0.0000      Z:     1.6686     Total:     1.6686


  Saving occupied orbitals to File 100.

*** tstop() called on mac10147 at Tue Jun 14 09:57:11 2011
	user time   =       0.07 seconds =       0.00 minutes
	system time =       0.02 seconds =       0.00 minutes
	total time  =          0 seconds =       0.00 minutes

*** tstart() called on mac10147
*** at Tue Jun 14 09:57:11 2011

	There are an even number of electrons - assuming singlet.
	Specify the multiplicity with the MULTP option in the
	input if this is incorrect


         ---------------------------------------------------------
                                   SCF
            by Justin Turney, Rob Parrish, and Andy Simmonnett
                              RHF Reference
                        1 Threads,    256 MiB Core
         ---------------------------------------------------------

  ==> Geometry <==

    Molecular point group: c2v

    Geometry (in Angstrom), charge = 0, multiplicity = 1:

       Center              X                  Y                   Z       
    ------------   -----------------  -----------------  -----------------
           O          0.000000000000     0.000000000000    -0.068368138764
           H          0.000000000000     0.790689573744     0.542525987858
           H          0.000000000000    -0.790689573744     0.542525987858

    Number of unique atoms: 2

    Atoms equivalency:
       unique atom 0: 0 
       unique atom 1: 1 2 

  Running in c2v symmetry.

  Nuclear repulsion =    8.808325740540036

  Charge       = 0
  Multiplicity = 1
  Electrons    = 10
  Nalpha       = 5
  Nbeta        = 5

  ==> Algorithm <==

  SCF Algorithm Type is PK.
  DIIS disabled.
  MOM disabled.
  Guess Type is CORE.
  Energy threshold   = 1.00e-10
  Density threshold  = 1.00e-10
  Integral threshold = 0.00e+00

  ==> Primary Basis: STO-3G <==

  Basis Set
    Number of shells: 5
    Number of basis function: 7
    Number of Cartesian functions: 7
    Spherical Harmonics?: true
    Max angular momentum: 1

  ==> Pre-Iterations <==

  Minimum eigenvalue in the overlap matrix is 3.6976784588E-01.
  Using Symmetric Orthogonalization.
  SCF Guess: Core (One-Electron) Hamiltonian.

  Initial RHF energy:   -54.63199061564679

   -------------------------------------------------------
    Irrep   Nso     Nmo     Nalpha   Nbeta   Ndocc  Nsocc
   -------------------------------------------------------
     A1         4       4       3       3       3       0
     A2         0       0       0       0       0       0
     B1         1       1       1       1       1       0
     B2         2       2       1       1       1       0
   -------------------------------------------------------
    Total       7       7       5       5       5       0
   -------------------------------------------------------

  ==> Integral Setup <==

 MINTS: Wrapper to libmints.
   by Justin Turney

   Calculation information:
      Number of atoms:                   3
      Number of AO shells:               5
      Number of SO shells:               4
      Number of primitives:             15
      Number of atomic orbitals:         7
      Number of basis functions:         7

      Number of irreps:                  4
      Number of functions per irrep: [   4    0    1    2 ]

      Computing integrals...for (0 0 | 0 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(0 0 | 0 0)
for (1 0 | 0 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 0 | 0 0)
for (1 1 | 0 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 1 | 0 0)
for (1 0 | 1 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 0 | 1 0)
for (1 1 | 1 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 1 | 1 0)
for (1 1 | 1 1) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 1 | 1 1)
for (0 0 | 2 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (0 0 | 2 1) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (1 0 | 2 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (1 0 | 2 1) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (1 1 | 2 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (1 1 | 2 1) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (0 0 | 2 2) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(0 0 | 2 2)
for (2 0 | 2 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 0 | 2 0)
for (1 0 | 2 2) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 0 | 2 2)
for (2 1 | 2 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 1 | 2 0)
for (1 1 | 2 2) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 1 | 2 2)
for (2 1 | 2 1) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 1 | 2 1)
for (2 0 | 2 2) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (2 1 | 2 2) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (2 2 | 2 2) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 2 | 2 2)
for (3 0 | 0 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 0 | 0 0)
for (3 1 | 0 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 1 | 0 0)
for (3 0 | 1 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 0 | 1 0)
for (3 1 | 1 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 1 | 1 0)
for (3 0 | 1 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 0 | 1 1)
for (3 1 | 1 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 1 | 1 1)
for (0 0 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 4
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(0 0 | 2 3)
for (3 0 | 2 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 0 | 2 0)
for (1 0 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 4
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 0 | 2 3)
for (3 1 | 2 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 1 | 2 0)
for (3 0 | 2 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 0 | 2 1)
for (1 1 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 4
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 1 | 2 3)
for (3 1 | 2 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 1 | 2 1)
for (2 3 | 2 0) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 3 | 2 0)
for (3 0 | 2 2) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 0 | 2 2)
for (2 3 | 2 1) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 3 | 2 1)
for (3 1 | 2 2) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 1 | 2 2)
for (2 3 | 2 2) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 3 | 2 2)
for (3 3 | 0 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 1
	0
	(3 3 | 0 0)
	(3 4 | 0 0)
for (3 0 | 3 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 3
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 0 | 3 0)
	(3 0 | 4 0)
for (3 3 | 1 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 1
	0
	(3 3 | 1 0)
	(3 4 | 1 0)
for (3 1 | 3 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 3
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 1 | 3 0)
	(3 1 | 4 0)
for (3 3 | 1 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 1
	0
	(3 3 | 1 1)
	(3 4 | 1 1)
for (3 1 | 3 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 3
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 1 | 3 1)
	(3 1 | 4 1)
for (3 3 | 2 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 1
	0
	(3 3 | 2 0)
	(3 4 | 2 0)
for (3 0 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 3
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 0 | 2 3)
	(3 0 | 2 4)
for (3 3 | 2 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 1
	0
	(3 3 | 2 1)
	(3 4 | 2 1)
for (3 1 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 3
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 1 | 2 3)
	(3 1 | 2 4)
for (3 3 | 2 2) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 1
	0
	(3 3 | 2 2)
	(3 4 | 2 2)
for (2 3 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 3
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 3
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 2
	0
	1
	(2 3 | 2 3)
	(2 3 | 2 4)
for (3 3 | 3 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 3
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 3
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 3 | 3 0)
	(3 3 | 4 0)
	(3 4 | 3 0)
	(3 4 | 4 0)
for (3 3 | 3 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 3
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 3
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 3 | 3 1)
	(3 3 | 4 1)
	(3 4 | 3 1)
	(3 4 | 4 1)
for (3 3 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 3
	klstablizer: 3
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 3 | 2 3)
	(3 3 | 2 4)
	(3 4 | 2 3)
	(3 4 | 2 4)
for (3 3 | 3 3) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 3
	lstablizer: 3
	ijstablizer: 3
	klstablizer: 3
	R.size = 2
	0
	1
	S.size = 2
	0
	1
	T.size = 2
	0
	1
	(3 3 | 3 3)
	(3 3 | 3 4)
	(3 3 | 4 4)
	(3 3 | 4 3)
	(3 4 | 3 3)
	(3 4 | 3 4)
	(3 4 | 4 4)
	(3 4 | 4 3)
done

      Computed 138 non-zero integrals.

  ==> Iterations <==

                        Total Energy        Delta E      Density RMS

   @RHF iter   1:   -73.25285160277389   -1.86209e+01    0.00000e+00 
   @RHF iter   2:   -74.93204882909679   -1.67920e+00    3.98374e-01 
   @RHF iter   3:   -74.96318240565043   -3.11336e-02    5.53443e-02 
   @RHF iter   4:   -74.96446911500962   -1.28671e-03    9.63827e-03 
   @RHF iter   5:   -74.96462198798540   -1.52873e-04    3.82019e-03 
   @RHF iter   6:   -74.96464962816277   -2.76402e-05    1.53397e-03 
   @RHF iter   7:   -74.96465501302436   -5.38486e-06    6.68057e-04 
   @RHF iter   8:   -74.96465608254516   -1.06952e-06    2.93430e-04 
   @RHF iter   9:   -74.96465629611659   -2.13571e-07    1.30183e-04 
   @RHF iter  10:   -74.96465633883167   -4.27151e-08    5.79689e-05 
   @RHF iter  11:   -74.96465634737882   -8.54715e-09    2.58699e-05 
   @RHF iter  12:   -74.96465634908930   -1.71048e-09    1.15578e-05 
   @RHF iter  13:   -74.96465634943162   -3.42325e-10    5.16677e-06 
   @RHF iter  14:   -74.96465634950009   -6.84679e-11    2.31050e-06 
   @RHF iter  15:   -74.96465634951383   -1.37419e-11    1.03341e-06 
   @RHF iter  16:   -74.96465634951663   -2.79954e-12    4.62251e-07 
   @RHF iter  17:   -74.96465634951716   -5.25802e-13    2.06780e-07 
   @RHF iter  18:   -74.96465634951726   -9.94760e-14    9.25021e-08 
   @RHF iter  19:   -74.96465634951730   -4.26326e-14    4.13811e-08 
   @RHF iter  20:   -74.96465634951726    4.26326e-14    1.85121e-08 
   @RHF iter  21:   -74.96465634951731   -5.68434e-14    8.28156e-09 
   @RHF iter  22:   -74.96465634951731    0.00000e+00    3.70484e-09 
   @RHF iter  23:   -74.96465634951726    5.68434e-14    1.65740e-09 
   @RHF iter  24:   -74.96465634951730   -4.26326e-14    7.41458e-10 
   @RHF iter  25:   -74.96465634951728    1.42109e-14    3.31701e-10 
   @RHF iter  26:   -74.96465634951726    2.84217e-14    1.48389e-10 

  ==> Post-Iterations <==

	Orbital Energies (a.u.)
	-----------------------

	Doubly Occupied:                                                      

	   1A1   -20.246991     2A1    -1.248007     1B2    -0.596440  
	   3A1    -0.447695     1B1    -0.388898  

	Virtual:                                                              

	   4A1     0.564689     2B2     0.694252  

	Final Occupation by Irrep:
	         A1    A2    B1    B2 
	DOCC [     3,    0,    1,    1 ]

  Energy converged.

  @RHF Final Energy:   -74.96465634951726

  ==> Properties <==

 OEPROP: One-electron properties/analyses.
  by Rob Parrish and Justin Turney.
  built on LIBMINTS.

 Dipole Moment: (a.u.)
     X:     0.0000      Y:     0.0000      Z:     0.6568     Total:     0.6568

 Dipole Moment: (Debye)
     X:     0.0000      Y:     0.0000      Z:     1.6694     Total:     1.6694


  Saving occupied orbitals to File 100.

*** tstop() called on mac10147 at Tue Jun 14 09:57:11 2011
	user time   =       0.11 seconds =       0.00 minutes
	system time =       0.03 seconds =       0.00 minutes
	total time  =          0 seconds =       0.00 minutes

*** tstart() called on mac10147
*** at Tue Jun 14 09:57:11 2011

	There are an even number of electrons - assuming singlet.
	Specify the multiplicity with the MULTP option in the
	input if this is incorrect


         ---------------------------------------------------------
                                   SCF
            by Justin Turney, Rob Parrish, and Andy Simmonnett
                              RHF Reference
                        1 Threads,    256 MiB Core
         ---------------------------------------------------------

  ==> Geometry <==

    Molecular point group: c2v

    Geometry (in Angstrom), charge = 0, multiplicity = 1:

       Center              X                  Y                   Z       
    ------------   -----------------  -----------------  -----------------
           O          0.000000000000     0.000000000000    -0.068516219310
           H          0.000000000000     0.786962280210     0.543701060724
           H          0.000000000000    -0.786962280210     0.543701060724

    Number of unique atoms: 2

    Atoms equivalency:
       unique atom 0: 0 
       unique atom 1: 1 2 

  Running in c2v symmetry.

  Nuclear repulsion =    8.828055514235817

  Charge       = 0
  Multiplicity = 1
  Electrons    = 10
  Nalpha       = 5
  Nbeta        = 5

  ==> Algorithm <==

  SCF Algorithm Type is PK.
  DIIS disabled.
  MOM disabled.
  Guess Type is CORE.
  Energy threshold   = 1.00e-10
  Density threshold  = 1.00e-10
  Integral threshold = 0.00e+00

  ==> Primary Basis: STO-3G <==

  Basis Set
    Number of shells: 5
    Number of basis function: 7
    Number of Cartesian functions: 7
    Spherical Harmonics?: true
    Max angular momentum: 1

  ==> Pre-Iterations <==

  Minimum eigenvalue in the overlap matrix is 3.6833536103E-01.
  Using Symmetric Orthogonalization.
  SCF Guess: Core (One-Electron) Hamiltonian.

  Initial RHF energy:   -54.62399578631825

   -------------------------------------------------------
    Irrep   Nso     Nmo     Nalpha   Nbeta   Ndocc  Nsocc
   -------------------------------------------------------
     A1         4       4       3       3       3       0
     A2         0       0       0       0       0       0
     B1         1       1       1       1       1       0
     B2         2       2       1       1       1       0
   -------------------------------------------------------
    Total       7       7       5       5       5       0
   -------------------------------------------------------

  ==> Integral Setup <==

 MINTS: Wrapper to libmints.
   by Justin Turney

   Calculation information:
      Number of atoms:                   3
      Number of AO shells:               5
      Number of SO shells:               4
      Number of primitives:             15
      Number of atomic orbitals:         7
      Number of basis functions:         7

      Number of irreps:                  4
      Number of functions per irrep: [   4    0    1    2 ]

      Computing integrals...for (0 0 | 0 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(0 0 | 0 0)
for (1 0 | 0 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 0 | 0 0)
for (1 1 | 0 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 1 | 0 0)
for (1 0 | 1 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 0 | 1 0)
for (1 1 | 1 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 1 | 1 0)
for (1 1 | 1 1) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 1 | 1 1)
for (0 0 | 2 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (0 0 | 2 1) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (1 0 | 2 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (1 0 | 2 1) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (1 1 | 2 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (1 1 | 2 1) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (0 0 | 2 2) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(0 0 | 2 2)
for (2 0 | 2 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 0 | 2 0)
for (1 0 | 2 2) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 0 | 2 2)
for (2 1 | 2 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 1 | 2 0)
for (1 1 | 2 2) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 1 | 2 2)
for (2 1 | 2 1) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 1 | 2 1)
for (2 0 | 2 2) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (2 1 | 2 2) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (2 2 | 2 2) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 2 | 2 2)
for (3 0 | 0 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 0 | 0 0)
for (3 1 | 0 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 1 | 0 0)
for (3 0 | 1 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 0 | 1 0)
for (3 1 | 1 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 1 | 1 0)
for (3 0 | 1 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 0 | 1 1)
for (3 1 | 1 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 1 | 1 1)
for (0 0 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 4
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(0 0 | 2 3)
for (3 0 | 2 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 0 | 2 0)
for (1 0 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 4
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 0 | 2 3)
for (3 1 | 2 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 1 | 2 0)
for (3 0 | 2 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 0 | 2 1)
for (1 1 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 4
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 1 | 2 3)
for (3 1 | 2 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 1 | 2 1)
for (2 3 | 2 0) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 3 | 2 0)
for (3 0 | 2 2) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 0 | 2 2)
for (2 3 | 2 1) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 3 | 2 1)
for (3 1 | 2 2) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 1 | 2 2)
for (2 3 | 2 2) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 3 | 2 2)
for (3 3 | 0 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 1
	0
	(3 3 | 0 0)
	(3 4 | 0 0)
for (3 0 | 3 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 3
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 0 | 3 0)
	(3 0 | 4 0)
for (3 3 | 1 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 1
	0
	(3 3 | 1 0)
	(3 4 | 1 0)
for (3 1 | 3 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 3
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 1 | 3 0)
	(3 1 | 4 0)
for (3 3 | 1 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 1
	0
	(3 3 | 1 1)
	(3 4 | 1 1)
for (3 1 | 3 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 3
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 1 | 3 1)
	(3 1 | 4 1)
for (3 3 | 2 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 1
	0
	(3 3 | 2 0)
	(3 4 | 2 0)
for (3 0 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 3
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 0 | 2 3)
	(3 0 | 2 4)
for (3 3 | 2 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 1
	0
	(3 3 | 2 1)
	(3 4 | 2 1)
for (3 1 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 3
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 1 | 2 3)
	(3 1 | 2 4)
for (3 3 | 2 2) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 1
	0
	(3 3 | 2 2)
	(3 4 | 2 2)
for (2 3 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 3
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 3
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 2
	0
	1
	(2 3 | 2 3)
	(2 3 | 2 4)
for (3 3 | 3 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 3
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 3
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 3 | 3 0)
	(3 3 | 4 0)
	(3 4 | 3 0)
	(3 4 | 4 0)
for (3 3 | 3 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 3
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 3
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 3 | 3 1)
	(3 3 | 4 1)
	(3 4 | 3 1)
	(3 4 | 4 1)
for (3 3 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 3
	klstablizer: 3
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 3 | 2 3)
	(3 3 | 2 4)
	(3 4 | 2 3)
	(3 4 | 2 4)
for (3 3 | 3 3) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 3
	lstablizer: 3
	ijstablizer: 3
	klstablizer: 3
	R.size = 2
	0
	1
	S.size = 2
	0
	1
	T.size = 2
	0
	1
	(3 3 | 3 3)
	(3 3 | 3 4)
	(3 3 | 4 4)
	(3 3 | 4 3)
	(3 4 | 3 3)
	(3 4 | 3 4)
	(3 4 | 4 4)
	(3 4 | 4 3)
done

      Computed 138 non-zero integrals.

  ==> Iterations <==

                        Total Energy        Delta E      Density RMS

   @RHF iter   1:   -73.25131932777838   -1.86273e+01    0.00000e+00 
   @RHF iter   2:   -74.93275460837255   -1.68144e+00    3.98729e-01 
   @RHF iter   3:   -74.96346801158053   -3.07134e-02    5.50082e-02 
   @RHF iter   4:   -74.96473048801464   -1.26248e-03    9.56836e-03 
   @RHF iter   5:   -74.96487974822792   -1.49260e-04    3.77928e-03 
   @RHF iter   6:   -74.96490659141315   -2.68432e-05    1.51388e-03 
   @RHF iter   7:   -74.96491179796698   -5.20655e-06    6.57582e-04 
   @RHF iter   8:   -74.96491282794337   -1.02998e-06    2.88206e-04 
   @RHF iter   9:   -74.96491303282654   -2.04883e-07    1.27602e-04 
   @RHF iter  10:   -74.96491307364815   -4.08216e-08    5.67072e-05 
   @RHF iter  11:   -74.96491308178540   -8.13725e-09    2.52577e-05 
   @RHF iter  12:   -74.96491308340769   -1.62230e-09    1.12626e-05 
   @RHF iter  13:   -74.96491308373110   -3.23411e-10    5.02523e-06 
   @RHF iter  14:   -74.96491308379561   -6.45031e-11    2.24293e-06 
   @RHF iter  15:   -74.96491308380847   -1.28608e-11    1.00128e-06 
   @RHF iter  16:   -74.96491308381104   -2.57216e-12    4.47032e-07 
   @RHF iter  17:   -74.96491308381154   -4.97380e-13    1.99593e-07 
   @RHF iter  18:   -74.96491308381161   -7.10543e-14    8.91180e-08 
   @RHF iter  19:   -74.96491308381162   -1.42109e-14    3.97917e-08 
   @RHF iter  20:   -74.96491308381162    0.00000e+00    1.77674e-08 
   @RHF iter  21:   -74.96491308381167   -4.26326e-14    7.93335e-09 
   @RHF iter  22:   -74.96491308381165    1.42109e-14    3.54235e-09 
   @RHF iter  23:   -74.96491308381164    1.42109e-14    1.58171e-09 
   @RHF iter  24:   -74.96491308381168   -4.26326e-14    7.06253e-10 
   @RHF iter  25:   -74.96491308381161    7.10543e-14    3.15354e-10 
   @RHF iter  26:   -74.96491308381165   -4.26326e-14    1.40809e-10 

  ==> Post-Iterations <==

	Orbital Energies (a.u.)
	-----------------------

	Doubly Occupied:                                                      

	   1A1   -20.247230     2A1    -1.249402     1B2    -0.596929  
	   3A1    -0.448867     1B1    -0.389281  

	Virtual:                                                              

	   4A1     0.567426     2B2     0.695559  

	Final Occupation by Irrep:
	         A1    A2    B1    B2 
	DOCC [     3,    0,    1,    1 ]

  Energy converged.

  @RHF Final Energy:   -74.96491308381165

  ==> Properties <==

 OEPROP: One-electron properties/analyses.
  by Rob Parrish and Justin Turney.
  built on LIBMINTS.

 Dipole Moment: (a.u.)
     X:     0.0000      Y:     0.0000      Z:     0.6588     Total:     0.6588

 Dipole Moment: (Debye)
     X:     0.0000      Y:     0.0000      Z:     1.6745     Total:     1.6745


  Saving occupied orbitals to File 100.

*** tstop() called on mac10147 at Tue Jun 14 09:57:11 2011
	user time   =       0.16 seconds =       0.00 minutes
	system time =       0.03 seconds =       0.00 minutes
	total time  =          0 seconds =       0.00 minutes

*** tstart() called on mac10147
*** at Tue Jun 14 09:57:11 2011

	There are an even number of electrons - assuming singlet.
	Specify the multiplicity with the MULTP option in the
	input if this is incorrect


         ---------------------------------------------------------
                                   SCF
            by Justin Turney, Rob Parrish, and Andy Simmonnett
                              RHF Reference
                        1 Threads,    256 MiB Core
         ---------------------------------------------------------

  ==> Geometry <==

    Molecular point group: c2v

    Geometry (in Angstrom), charge = 0, multiplicity = 1:

       Center              X                  Y                   Z       
    ------------   -----------------  -----------------  -----------------
           O          0.000000000000     0.000000000000    -0.068516219310
           H          0.000000000000     0.794416867278     0.543701060724
           H          0.000000000000    -0.794416867278     0.543701060724

    Number of unique atoms: 2

    Atoms equivalency:
       unique atom 0: 0 
       unique atom 1: 1 2 

  Running in c2v symmetry.

  Nuclear repulsion =    8.774994752436060

  Charge       = 0
  Multiplicity = 1
  Electrons    = 10
  Nalpha       = 5
  Nbeta        = 5

  ==> Algorithm <==

  SCF Algorithm Type is PK.
  DIIS disabled.
  MOM disabled.
  Guess Type is CORE.
  Energy threshold   = 1.00e-10
  Density threshold  = 1.00e-10
  Integral threshold = 0.00e+00

  ==> Primary Basis: STO-3G <==

  Basis Set
    Number of shells: 5
    Number of basis function: 7
    Number of Cartesian functions: 7
    Spherical Harmonics?: true
    Max angular momentum: 1

  ==> Pre-Iterations <==

  Minimum eigenvalue in the overlap matrix is 3.7223583086E-01.
  Using Symmetric Orthogonalization.
  SCF Guess: Core (One-Electron) Hamiltonian.

  Initial RHF energy:   -54.64445492366322

   -------------------------------------------------------
    Irrep   Nso     Nmo     Nalpha   Nbeta   Ndocc  Nsocc
   -------------------------------------------------------
     A1         4       4       3       3       3       0
     A2         0       0       0       0       0       0
     B1         1       1       1       1       1       0
     B2         2       2       1       1       1       0
   -------------------------------------------------------
    Total       7       7       5       5       5       0
   -------------------------------------------------------

  ==> Integral Setup <==

 MINTS: Wrapper to libmints.
   by Justin Turney

   Calculation information:
      Number of atoms:                   3
      Number of AO shells:               5
      Number of SO shells:               4
      Number of primitives:             15
      Number of atomic orbitals:         7
      Number of basis functions:         7

      Number of irreps:                  4
      Number of functions per irrep: [   4    0    1    2 ]

      Computing integrals...for (0 0 | 0 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(0 0 | 0 0)
for (1 0 | 0 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 0 | 0 0)
for (1 1 | 0 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 1 | 0 0)
for (1 0 | 1 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 0 | 1 0)
for (1 1 | 1 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 1 | 1 0)
for (1 1 | 1 1) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 1 | 1 1)
for (0 0 | 2 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (0 0 | 2 1) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (1 0 | 2 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (1 0 | 2 1) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (1 1 | 2 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (1 1 | 2 1) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (0 0 | 2 2) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(0 0 | 2 2)
for (2 0 | 2 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 0 | 2 0)
for (1 0 | 2 2) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 0 | 2 2)
for (2 1 | 2 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 1 | 2 0)
for (1 1 | 2 2) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 1 | 2 2)
for (2 1 | 2 1) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 1 | 2 1)
for (2 0 | 2 2) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (2 1 | 2 2) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (2 2 | 2 2) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 2 | 2 2)
for (3 0 | 0 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 0 | 0 0)
for (3 1 | 0 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 1 | 0 0)
for (3 0 | 1 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 0 | 1 0)
for (3 1 | 1 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 1 | 1 0)
for (3 0 | 1 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 0 | 1 1)
for (3 1 | 1 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 1 | 1 1)
for (0 0 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 4
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(0 0 | 2 3)
for (3 0 | 2 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 0 | 2 0)
for (1 0 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 4
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 0 | 2 3)
for (3 1 | 2 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 1 | 2 0)
for (3 0 | 2 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 0 | 2 1)
for (1 1 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 4
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 1 | 2 3)
for (3 1 | 2 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 1 | 2 1)
for (2 3 | 2 0) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 3 | 2 0)
for (3 0 | 2 2) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 0 | 2 2)
for (2 3 | 2 1) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 3 | 2 1)
for (3 1 | 2 2) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 1 | 2 2)
for (2 3 | 2 2) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 3 | 2 2)
for (3 3 | 0 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 1
	0
	(3 3 | 0 0)
	(3 4 | 0 0)
for (3 0 | 3 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 3
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 0 | 3 0)
	(3 0 | 4 0)
for (3 3 | 1 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 1
	0
	(3 3 | 1 0)
	(3 4 | 1 0)
for (3 1 | 3 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 3
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 1 | 3 0)
	(3 1 | 4 0)
for (3 3 | 1 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 1
	0
	(3 3 | 1 1)
	(3 4 | 1 1)
for (3 1 | 3 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 3
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 1 | 3 1)
	(3 1 | 4 1)
for (3 3 | 2 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 1
	0
	(3 3 | 2 0)
	(3 4 | 2 0)
for (3 0 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 3
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 0 | 2 3)
	(3 0 | 2 4)
for (3 3 | 2 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 1
	0
	(3 3 | 2 1)
	(3 4 | 2 1)
for (3 1 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 3
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 1 | 2 3)
	(3 1 | 2 4)
for (3 3 | 2 2) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 1
	0
	(3 3 | 2 2)
	(3 4 | 2 2)
for (2 3 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 3
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 3
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 2
	0
	1
	(2 3 | 2 3)
	(2 3 | 2 4)
for (3 3 | 3 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 3
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 3
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 3 | 3 0)
	(3 3 | 4 0)
	(3 4 | 3 0)
	(3 4 | 4 0)
for (3 3 | 3 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 3
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 3
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 3 | 3 1)
	(3 3 | 4 1)
	(3 4 | 3 1)
	(3 4 | 4 1)
for (3 3 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 3
	klstablizer: 3
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 3 | 2 3)
	(3 3 | 2 4)
	(3 4 | 2 3)
	(3 4 | 2 4)
for (3 3 | 3 3) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 3
	lstablizer: 3
	ijstablizer: 3
	klstablizer: 3
	R.size = 2
	0
	1
	S.size = 2
	0
	1
	T.size = 2
	0
	1
	(3 3 | 3 3)
	(3 3 | 3 4)
	(3 3 | 4 4)
	(3 3 | 4 3)
	(3 4 | 3 3)
	(3 4 | 3 4)
	(3 4 | 4 4)
	(3 4 | 4 3)
done

      Computed 138 non-zero integrals.

  ==> Iterations <==

                        Total Energy        Delta E      Density RMS

   @RHF iter   1:   -73.25468418559758   -1.86102e+01    0.00000e+00 
   @RHF iter   2:   -74.93015880275313   -1.67547e+00    3.98042e-01 
   @RHF iter   3:   -74.96282031476656   -3.26615e-02    5.66565e-02 
   @RHF iter   4:   -74.96417183881788   -1.35152e-03    9.80893e-03 
   @RHF iter   5:   -74.96433123221145   -1.59393e-04    3.89357e-03 
   @RHF iter   6:   -74.96436019217886   -2.89600e-05    1.56419e-03 
   @RHF iter   7:   -74.96436586878558   -5.67661e-06    6.83813e-04 
   @RHF iter   8:   -74.96436700306721   -1.13428e-06    3.01238e-04 
   @RHF iter   9:   -74.96436723091767   -2.27850e-07    1.34061e-04 
   @RHF iter  10:   -74.96436727675795   -4.58403e-08    5.98746e-05 
   @RHF iter  11:   -74.96436728598449   -9.22654e-09    2.68001e-05 
   @RHF iter  12:   -74.96436728784177   -1.85727e-09    1.20088e-05 
   @RHF iter  13:   -74.96436728821566   -3.73888e-10    5.38426e-06 
   @RHF iter  14:   -74.96436728829090   -7.52465e-11    2.41486e-06 
   @RHF iter  15:   -74.96436728830606   -1.51630e-11    1.08326e-06 
   @RHF iter  16:   -74.96436728830911   -3.04112e-12    4.85977e-07 
   @RHF iter  17:   -74.96436728830979   -6.82121e-13    2.18033e-07 
   @RHF iter  18:   -74.96436728830992   -1.27898e-13    9.78228e-08 
   @RHF iter  19:   -74.96436728830989    2.84217e-14    4.38900e-08 
   @RHF iter  20:   -74.96436728830990   -1.42109e-14    1.96922e-08 
   @RHF iter  21:   -74.96436728830987    2.84217e-14    8.83538e-09 
   @RHF iter  22:   -74.96436728830993   -5.68434e-14    3.96421e-09 
   @RHF iter  23:   -74.96436728830986    7.10543e-14    1.77865e-09 
   @RHF iter  24:   -74.96436728830987   -1.42109e-14    7.98037e-10 
   @RHF iter  25:   -74.96436728830993   -5.68434e-14    3.58060e-10 
   @RHF iter  26:   -74.96436728830989    4.26326e-14    1.60652e-10 

  ==> Post-Iterations <==

	Orbital Energies (a.u.)
	-----------------------

	Doubly Occupied:                                                      

	   1A1   -20.247313     2A1    -1.246162     1B2    -0.594767  
	   3A1    -0.446905     1B1    -0.388636  

	Virtual:                                                              

	   4A1     0.560881     2B2     0.690461  

	Final Occupation by Irrep:
	         A1    A2    B1    B2 
	DOCC [     3,    0,    1,    1 ]

  Energy converged.

  @RHF Final Energy:   -74.96436728830989

  ==> Properties <==

 OEPROP: One-electron properties/analyses.
  by Rob Parrish and Justin Turney.
  built on LIBMINTS.

 Dipole Moment: (a.u.)
     X:     0.0000      Y:     0.0000      Z:     0.6545     Total:     0.6545

 Dipole Moment: (Debye)
     X:     0.0000      Y:     0.0000      Z:     1.6635     Total:     1.6635


  Saving occupied orbitals to File 100.

*** tstop() called on mac10147 at Tue Jun 14 09:57:11 2011
	user time   =       0.21 seconds =       0.00 minutes
	system time =       0.04 seconds =       0.00 minutes
	total time  =          0 seconds =       0.00 minutes

*** tstart() called on mac10147
*** at Tue Jun 14 09:57:11 2011

	There are an even number of electrons - assuming singlet.
	Specify the multiplicity with the MULTP option in the
	input if this is incorrect


         ---------------------------------------------------------
                                   SCF
            by Justin Turney, Rob Parrish, and Andy Simmonnett
                              RHF Reference
                        1 Threads,    256 MiB Core
         ---------------------------------------------------------

  ==> Geometry <==

    Molecular point group: c2v

    Geometry (in Angstrom), charge = 0, multiplicity = 1:

       Center              X                  Y                   Z       
    ------------   -----------------  -----------------  -----------------
           O          0.000000000000     0.000000000000    -0.068099079727
           H          0.000000000000     0.790689573744     0.540390906774
           H          0.000000000000    -0.790689573744     0.540390906774

    Number of unique atoms: 2

    Atoms equivalency:
       unique atom 0: 0 
       unique atom 1: 1 2 

  Running in c2v symmetry.

  Nuclear repulsion =    8.820793955890426

  Charge       = 0
  Multiplicity = 1
  Electrons    = 10
  Nalpha       = 5
  Nbeta        = 5

  ==> Algorithm <==

  SCF Algorithm Type is PK.
  DIIS disabled.
  MOM disabled.
  Guess Type is CORE.
  Energy threshold   = 1.00e-10
  Density threshold  = 1.00e-10
  Integral threshold = 0.00e+00

  ==> Primary Basis: STO-3G <==

  Basis Set
    Number of shells: 5
    Number of basis function: 7
    Number of Cartesian functions: 7
    Spherical Harmonics?: true
    Max angular momentum: 1

  ==> Pre-Iterations <==

  Minimum eigenvalue in the overlap matrix is 3.6883269490E-01.
  Using Symmetric Orthogonalization.
  SCF Guess: Core (One-Electron) Hamiltonian.

  Initial RHF energy:   -54.62786182555226

   -------------------------------------------------------
    Irrep   Nso     Nmo     Nalpha   Nbeta   Ndocc  Nsocc
   -------------------------------------------------------
     A1         4       4       3       3       3       0
     A2         0       0       0       0       0       0
     B1         1       1       1       1       1       0
     B2         2       2       1       1       1       0
   -------------------------------------------------------
    Total       7       7       5       5       5       0
   -------------------------------------------------------

  ==> Integral Setup <==

 MINTS: Wrapper to libmints.
   by Justin Turney

   Calculation information:
      Number of atoms:                   3
      Number of AO shells:               5
      Number of SO shells:               4
      Number of primitives:             15
      Number of atomic orbitals:         7
      Number of basis functions:         7

      Number of irreps:                  4
      Number of functions per irrep: [   4    0    1    2 ]

      Computing integrals...for (0 0 | 0 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(0 0 | 0 0)
for (1 0 | 0 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 0 | 0 0)
for (1 1 | 0 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 1 | 0 0)
for (1 0 | 1 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 0 | 1 0)
for (1 1 | 1 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 1 | 1 0)
for (1 1 | 1 1) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 1 | 1 1)
for (0 0 | 2 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (0 0 | 2 1) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (1 0 | 2 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (1 0 | 2 1) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (1 1 | 2 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (1 1 | 2 1) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (0 0 | 2 2) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(0 0 | 2 2)
for (2 0 | 2 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 0 | 2 0)
for (1 0 | 2 2) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 0 | 2 2)
for (2 1 | 2 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 1 | 2 0)
for (1 1 | 2 2) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 1 | 2 2)
for (2 1 | 2 1) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 1 | 2 1)
for (2 0 | 2 2) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (2 1 | 2 2) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (2 2 | 2 2) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 2 | 2 2)
for (3 0 | 0 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 0 | 0 0)
for (3 1 | 0 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 1 | 0 0)
for (3 0 | 1 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 0 | 1 0)
for (3 1 | 1 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 1 | 1 0)
for (3 0 | 1 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 0 | 1 1)
for (3 1 | 1 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 1 | 1 1)
for (0 0 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 4
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(0 0 | 2 3)
for (3 0 | 2 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 0 | 2 0)
for (1 0 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 4
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 0 | 2 3)
for (3 1 | 2 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 1 | 2 0)
for (3 0 | 2 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 0 | 2 1)
for (1 1 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 4
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 1 | 2 3)
for (3 1 | 2 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 1 | 2 1)
for (2 3 | 2 0) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 3 | 2 0)
for (3 0 | 2 2) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 0 | 2 2)
for (2 3 | 2 1) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 3 | 2 1)
for (3 1 | 2 2) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 1 | 2 2)
for (2 3 | 2 2) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 3 | 2 2)
for (3 3 | 0 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 1
	0
	(3 3 | 0 0)
	(3 4 | 0 0)
for (3 0 | 3 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 3
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 0 | 3 0)
	(3 0 | 4 0)
for (3 3 | 1 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 1
	0
	(3 3 | 1 0)
	(3 4 | 1 0)
for (3 1 | 3 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 3
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 1 | 3 0)
	(3 1 | 4 0)
for (3 3 | 1 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 1
	0
	(3 3 | 1 1)
	(3 4 | 1 1)
for (3 1 | 3 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 3
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 1 | 3 1)
	(3 1 | 4 1)
for (3 3 | 2 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 1
	0
	(3 3 | 2 0)
	(3 4 | 2 0)
for (3 0 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 3
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 0 | 2 3)
	(3 0 | 2 4)
for (3 3 | 2 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 1
	0
	(3 3 | 2 1)
	(3 4 | 2 1)
for (3 1 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 3
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 1 | 2 3)
	(3 1 | 2 4)
for (3 3 | 2 2) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 1
	0
	(3 3 | 2 2)
	(3 4 | 2 2)
for (2 3 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 3
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 3
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 2
	0
	1
	(2 3 | 2 3)
	(2 3 | 2 4)
for (3 3 | 3 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 3
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 3
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 3 | 3 0)
	(3 3 | 4 0)
	(3 4 | 3 0)
	(3 4 | 4 0)
for (3 3 | 3 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 3
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 3
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 3 | 3 1)
	(3 3 | 4 1)
	(3 4 | 3 1)
	(3 4 | 4 1)
for (3 3 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 3
	klstablizer: 3
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 3 | 2 3)
	(3 3 | 2 4)
	(3 4 | 2 3)
	(3 4 | 2 4)
for (3 3 | 3 3) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 3
	lstablizer: 3
	ijstablizer: 3
	klstablizer: 3
	R.size = 2
	0
	1
	S.size = 2
	0
	1
	T.size = 2
	0
	1
	(3 3 | 3 3)
	(3 3 | 3 4)
	(3 3 | 4 4)
	(3 3 | 4 3)
	(3 4 | 3 3)
	(3 4 | 3 4)
	(3 4 | 4 4)
	(3 4 | 4 3)
done

      Computed 138 non-zero integrals.

  ==> Iterations <==

                        Total Energy        Delta E      Density RMS

   @RHF iter   1:   -73.25255755952466   -1.86247e+01    0.00000e+00 
   @RHF iter   2:   -74.93302572871582   -1.68047e+00    3.98368e-01 
   @RHF iter   3:   -74.96319890522261   -3.01732e-02    5.44788e-02 
   @RHF iter   4:   -74.96445150583119   -1.25260e-03    9.55168e-03 
   @RHF iter   5:   -74.96460194811914   -1.50442e-04    3.79219e-03 
   @RHF iter   6:   -74.96462915727348   -2.72092e-05    1.52520e-03 
   @RHF iter   7:   -74.96463445003546   -5.29276e-06    6.63559e-04 
   @RHF iter   8:   -74.96463549936446   -1.04933e-06    2.91245e-04 
   @RHF iter   9:   -74.96463570851682   -2.09152e-07    1.29096e-04 
   @RHF iter  10:   -74.96463575027057   -4.17538e-08    5.74328e-05 
   @RHF iter  11:   -74.96463575860990   -8.33933e-09    2.56070e-05 
   @RHF iter  12:   -74.96463576027567   -1.66577e-09    1.14298e-05 
   @RHF iter  13:   -74.96463576060846   -3.32790e-10    5.10480e-06 
   @RHF iter  14:   -74.96463576067492   -6.64642e-11    2.28067e-06 
   @RHF iter  15:   -74.96463576068818   -1.32587e-11    1.01912e-06 
   @RHF iter  16:   -74.96463576069084   -2.65743e-12    4.55437e-07 
   @RHF iter  17:   -74.96463576069135   -5.11591e-13    2.03543e-07 
   @RHF iter  18:   -74.96463576069148   -1.27898e-13    9.09697e-08 
   @RHF iter  19:   -74.96463576069149   -1.42109e-14    4.06578e-08 
   @RHF iter  20:   -74.96463576069151   -1.42109e-14    1.81717e-08 
   @RHF iter  21:   -74.96463576069149    1.42109e-14    8.12174e-09 
   @RHF iter  22:   -74.96463576069151   -1.42109e-14    3.62997e-09 
   @RHF iter  23:   -74.96463576069146    4.26326e-14    1.62240e-09 
   @RHF iter  24:   -74.96463576069149   -2.84217e-14    7.25128e-10 
   @RHF iter  25:   -74.96463576069148    1.42109e-14    3.24092e-10 
   @RHF iter  26:   -74.96463576069149   -1.42109e-14    1.44855e-10 

  ==> Post-Iterations <==

	Orbital Energies (a.u.)
	-----------------------

	Doubly Occupied:                                                      

	   1A1   -20.246481     2A1    -1.248429     1B2    -0.597509  
	   3A1    -0.447347     1B1    -0.388790  

	Virtual:                                                              

	   4A1     0.565659     2B2     0.696518  

	Final Occupation by Irrep:
	         A1    A2    B1    B2 
	DOCC [     3,    0,    1,    1 ]

  Energy converged.

  @RHF Final Energy:   -74.96463576069149

  ==> Properties <==

 OEPROP: One-electron properties/analyses.
  by Rob Parrish and Justin Turney.
  built on LIBMINTS.

 Dipole Moment: (a.u.)
     X:     0.0000      Y:     0.0000      Z:     0.6571     Total:     0.6571

 Dipole Moment: (Debye)
     X:     0.0000      Y:     0.0000      Z:     1.6701     Total:     1.6701


  Saving occupied orbitals to File 100.

*** tstop() called on mac10147 at Tue Jun 14 09:57:11 2011
	user time   =       0.26 seconds =       0.00 minutes
	system time =       0.05 seconds =       0.00 minutes
	total time  =          0 seconds =       0.00 minutes

*** tstart() called on mac10147
*** at Tue Jun 14 09:57:11 2011

	There are an even number of electrons - assuming singlet.
	Specify the multiplicity with the MULTP option in the
	input if this is incorrect


         ---------------------------------------------------------
                                   SCF
            by Justin Turney, Rob Parrish, and Andy Simmonnett
                              RHF Reference
                        1 Threads,    256 MiB Core
         ---------------------------------------------------------

  ==> Geometry <==

    Molecular point group: c2v

    Geometry (in Angstrom), charge = 0, multiplicity = 1:

       Center              X                  Y                   Z       
    ------------   -----------------  -----------------  -----------------
           O          0.000000000000     0.000000000000    -0.068933358894
           H          0.000000000000     0.790689573744     0.547011214674
           H          0.000000000000    -0.790689573744     0.547011214674

    Number of unique atoms: 2

    Atoms equivalency:
       unique atom 0: 0 
       unique atom 1: 1 2 

  Running in c2v symmetry.

  Nuclear repulsion =    8.782153083292927

  Charge       = 0
  Multiplicity = 1
  Electrons    = 10
  Nalpha       = 5
  Nbeta        = 5

  ==> Algorithm <==

  SCF Algorithm Type is PK.
  DIIS disabled.
  MOM disabled.
  Guess Type is CORE.
  Energy threshold   = 1.00e-10
  Density threshold  = 1.00e-10
  Integral threshold = 0.00e+00

  ==> Primary Basis: STO-3G <==

  Basis Set
    Number of shells: 5
    Number of basis function: 7
    Number of Cartesian functions: 7
    Spherical Harmonics?: true
    Max angular momentum: 1

  ==> Pre-Iterations <==

  Minimum eigenvalue in the overlap matrix is 3.7174327771E-01.
  Using Symmetric Orthogonalization.
  SCF Guess: Core (One-Electron) Hamiltonian.

  Initial RHF energy:   -54.64064590883764

   -------------------------------------------------------
    Irrep   Nso     Nmo     Nalpha   Nbeta   Ndocc  Nsocc
   -------------------------------------------------------
     A1         4       4       3       3       3       0
     A2         0       0       0       0       0       0
     B1         1       1       1       1       1       0
     B2         2       2       1       1       1       0
   -------------------------------------------------------
    Total       7       7       5       5       5       0
   -------------------------------------------------------

  ==> Integral Setup <==

 MINTS: Wrapper to libmints.
   by Justin Turney

   Calculation information:
      Number of atoms:                   3
      Number of AO shells:               5
      Number of SO shells:               4
      Number of primitives:             15
      Number of atomic orbitals:         7
      Number of basis functions:         7

      Number of irreps:                  4
      Number of functions per irrep: [   4    0    1    2 ]

      Computing integrals...for (0 0 | 0 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(0 0 | 0 0)
for (1 0 | 0 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 0 | 0 0)
for (1 1 | 0 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 1 | 0 0)
for (1 0 | 1 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 0 | 1 0)
for (1 1 | 1 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 1 | 1 0)
for (1 1 | 1 1) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 1 | 1 1)
for (0 0 | 2 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (0 0 | 2 1) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (1 0 | 2 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (1 0 | 2 1) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (1 1 | 2 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (1 1 | 2 1) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (0 0 | 2 2) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(0 0 | 2 2)
for (2 0 | 2 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 0 | 2 0)
for (1 0 | 2 2) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 0 | 2 2)
for (2 1 | 2 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 1 | 2 0)
for (1 1 | 2 2) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 1 | 2 2)
for (2 1 | 2 1) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 1 | 2 1)
for (2 0 | 2 2) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (2 1 | 2 2) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (2 2 | 2 2) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 2 | 2 2)
for (3 0 | 0 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 0 | 0 0)
for (3 1 | 0 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 1 | 0 0)
for (3 0 | 1 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 0 | 1 0)
for (3 1 | 1 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 1 | 1 0)
for (3 0 | 1 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 0 | 1 1)
for (3 1 | 1 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 1 | 1 1)
for (0 0 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 4
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(0 0 | 2 3)
for (3 0 | 2 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 0 | 2 0)
for (1 0 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 4
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 0 | 2 3)
for (3 1 | 2 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 1 | 2 0)
for (3 0 | 2 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 0 | 2 1)
for (1 1 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 4
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 1 | 2 3)
for (3 1 | 2 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 1 | 2 1)
for (2 3 | 2 0) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 3 | 2 0)
for (3 0 | 2 2) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 0 | 2 2)
for (2 3 | 2 1) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 3 | 2 1)
for (3 1 | 2 2) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 1 | 2 2)
for (2 3 | 2 2) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 3 | 2 2)
for (3 3 | 0 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 1
	0
	(3 3 | 0 0)
	(3 4 | 0 0)
for (3 0 | 3 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 3
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 0 | 3 0)
	(3 0 | 4 0)
for (3 3 | 1 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 1
	0
	(3 3 | 1 0)
	(3 4 | 1 0)
for (3 1 | 3 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 3
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 1 | 3 0)
	(3 1 | 4 0)
for (3 3 | 1 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 1
	0
	(3 3 | 1 1)
	(3 4 | 1 1)
for (3 1 | 3 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 3
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 1 | 3 1)
	(3 1 | 4 1)
for (3 3 | 2 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 1
	0
	(3 3 | 2 0)
	(3 4 | 2 0)
for (3 0 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 3
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 0 | 2 3)
	(3 0 | 2 4)
for (3 3 | 2 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 1
	0
	(3 3 | 2 1)
	(3 4 | 2 1)
for (3 1 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 3
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 1 | 2 3)
	(3 1 | 2 4)
for (3 3 | 2 2) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 1
	0
	(3 3 | 2 2)
	(3 4 | 2 2)
for (2 3 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 3
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 3
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 2
	0
	1
	(2 3 | 2 3)
	(2 3 | 2 4)
for (3 3 | 3 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 3
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 3
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 3 | 3 0)
	(3 3 | 4 0)
	(3 4 | 3 0)
	(3 4 | 4 0)
for (3 3 | 3 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 3
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 3
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 3 | 3 1)
	(3 3 | 4 1)
	(3 4 | 3 1)
	(3 4 | 4 1)
for (3 3 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 3
	klstablizer: 3
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 3 | 2 3)
	(3 3 | 2 4)
	(3 4 | 2 3)
	(3 4 | 2 4)
for (3 3 | 3 3) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 3
	lstablizer: 3
	ijstablizer: 3
	klstablizer: 3
	R.size = 2
	0
	1
	S.size = 2
	0
	1
	T.size = 2
	0
	1
	(3 3 | 3 3)
	(3 3 | 3 4)
	(3 3 | 4 4)
	(3 3 | 4 3)
	(3 4 | 3 3)
	(3 4 | 3 4)
	(3 4 | 4 4)
	(3 4 | 4 3)
done

      Computed 138 non-zero integrals.

  ==> Iterations <==

                        Total Energy        Delta E      Density RMS

   @RHF iter   1:   -73.25345573265118   -1.86128e+01    0.00000e+00 
   @RHF iter   2:   -74.92988451565820   -1.67643e+00    3.98398e-01 
   @RHF iter   3:   -74.96310489524672   -3.32204e-02    5.71839e-02 
   @RHF iter   4:   -74.96446682161940   -1.36193e-03    9.82583e-03 
   @RHF iter   5:   -74.96462488630868   -1.58065e-04    3.87948e-03 
   @RHF iter   6:   -74.96465343993134   -2.85536e-05    1.55208e-03 
   @RHF iter   7:   -74.96465902101208   -5.58108e-06    6.77469e-04 
   @RHF iter   8:   -74.96466013382287   -1.11281e-06    2.98019e-04 
   @RHF iter   9:   -74.96466035692353   -2.23101e-07    1.32480e-04 
   @RHF iter  10:   -74.96466040172288   -4.47994e-08    5.91066e-05 
   @RHF iter  11:   -74.96466041072279   -8.99990e-09    2.64301e-05 
   @RHF iter  12:   -74.96466041253109   -1.80830e-09    1.18316e-05 
   @RHF iter  13:   -74.96466041289442   -3.63329e-10    5.29973e-06 
   @RHF iter  14:   -74.96466041296745   -7.30296e-11    2.37469e-06 
   @RHF iter  15:   -74.96466041298207   -1.46230e-11    1.06423e-06 
   @RHF iter  16:   -74.96466041298505   -2.98428e-12    4.76991e-07 
   @RHF iter  17:   -74.96466041298564   -5.82645e-13    2.13799e-07 
   @RHF iter  18:   -74.96466041298574   -9.94760e-14    9.58330e-08 
   @RHF iter  19:   -74.96466041298581   -7.10543e-14    4.29567e-08 
   @RHF iter  20:   -74.96466041298582   -1.42109e-14    1.92553e-08 
   @RHF iter  21:   -74.96466041298579    2.84217e-14    8.63121e-09 
   @RHF iter  22:   -74.96466041298582   -2.84217e-14    3.86896e-09 
   @RHF iter  23:   -74.96466041298581    1.42109e-14    1.73427e-09 
   @RHF iter  24:   -74.96466041298578    2.84217e-14    7.77396e-10 
   @RHF iter  25:   -74.96466041298578    0.00000e+00    3.48470e-10 
   @RHF iter  26:   -74.96466041298576    1.42109e-14    1.56203e-10 

  ==> Post-Iterations <==

	Orbital Energies (a.u.)
	-----------------------

	Doubly Occupied:                                                      

	   1A1   -20.248054     2A1    -1.247116     1B2    -0.594193  
	   3A1    -0.448413     1B1    -0.389121  

	Virtual:                                                              

	   4A1     0.562635     2B2     0.689509  

	Final Occupation by Irrep:
	         A1    A2    B1    B2 
	DOCC [     3,    0,    1,    1 ]

  Energy converged.

  @RHF Final Energy:   -74.96466041298576

  ==> Properties <==

 OEPROP: One-electron properties/analyses.
  by Rob Parrish and Justin Turney.
  built on LIBMINTS.

 Dipole Moment: (a.u.)
     X:     0.0000      Y:    -0.0000      Z:     0.6562     Total:     0.6562

 Dipole Moment: (Debye)
     X:     0.0000      Y:    -0.0000      Z:     1.6678     Total:     1.6678


  Saving occupied orbitals to File 100.

*** tstop() called on mac10147 at Tue Jun 14 09:57:12 2011
	user time   =       0.31 seconds =       0.01 minutes
	system time =       0.06 seconds =       0.00 minutes
	total time  =          1 seconds =       0.02 minutes

*** tstart() called on mac10147
*** at Tue Jun 14 09:57:12 2011

	There are an even number of electrons - assuming singlet.
	Specify the multiplicity with the MULTP option in the
	input if this is incorrect


         ---------------------------------------------------------
                                   SCF
            by Justin Turney, Rob Parrish, and Andy Simmonnett
                              RHF Reference
                        1 Threads,    256 MiB Core
         ---------------------------------------------------------

  ==> Geometry <==

    Molecular point group: c2v

    Geometry (in Angstrom), charge = 0, multiplicity = 1:

       Center              X                  Y                   Z       
    ------------   -----------------  -----------------  -----------------
           O          0.000000000000     0.000000000000    -0.068516219310
           H          0.000000000000     0.790689573744     0.543701060724
           H          0.000000000000    -0.790689573744     0.543701060724

    Number of unique atoms: 2

    Atoms equivalency:
       unique atom 0: 0 
       unique atom 1: 1 2 

  Running in c2v symmetry.

  Nuclear repulsion =    8.801466202085710

  Charge       = 0
  Multiplicity = 1
  Electrons    = 10
  Nalpha       = 5
  Nbeta        = 5

  ==> Algorithm <==

  SCF Algorithm Type is PK.
  DIIS disabled.
  MOM disabled.
  Guess Type is CORE.
  Energy threshold   = 1.00e-10
  Density threshold  = 1.00e-10
  Integral threshold = 0.00e+00

  ==> Primary Basis: STO-3G <==

  Basis Set
    Number of shells: 5
    Number of basis function: 7
    Number of Cartesian functions: 7
    Spherical Harmonics?: true
    Max angular momentum: 1

  ==> Pre-Iterations <==

  Minimum eigenvalue in the overlap matrix is 3.7028395658E-01.
  Using Symmetric Orthogonalization.
  SCF Guess: Core (One-Electron) Hamiltonian.

  Initial RHF energy:   -54.63426058898565

   -------------------------------------------------------
    Irrep   Nso     Nmo     Nalpha   Nbeta   Ndocc  Nsocc
   -------------------------------------------------------
     A1         4       4       3       3       3       0
     A2         0       0       0       0       0       0
     B1         1       1       1       1       1       0
     B2         2       2       1       1       1       0
   -------------------------------------------------------
    Total       7       7       5       5       5       0
   -------------------------------------------------------

  ==> Integral Setup <==

 MINTS: Wrapper to libmints.
   by Justin Turney

   Calculation information:
      Number of atoms:                   3
      Number of AO shells:               5
      Number of SO shells:               4
      Number of primitives:             15
      Number of atomic orbitals:         7
      Number of basis functions:         7

      Number of irreps:                  4
      Number of functions per irrep: [   4    0    1    2 ]

      Computing integrals...for (0 0 | 0 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(0 0 | 0 0)
for (1 0 | 0 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 0 | 0 0)
for (1 1 | 0 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 1 | 0 0)
for (1 0 | 1 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 0 | 1 0)
for (1 1 | 1 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 1 | 1 0)
for (1 1 | 1 1) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 1 | 1 1)
for (0 0 | 2 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (0 0 | 2 1) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (1 0 | 2 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (1 0 | 2 1) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (1 1 | 2 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (1 1 | 2 1) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (0 0 | 2 2) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(0 0 | 2 2)
for (2 0 | 2 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 0 | 2 0)
for (1 0 | 2 2) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 0 | 2 2)
for (2 1 | 2 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 1 | 2 0)
for (1 1 | 2 2) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 1 | 2 2)
for (2 1 | 2 1) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 1 | 2 1)
for (2 0 | 2 2) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (2 1 | 2 2) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (2 2 | 2 2) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 2 | 2 2)
for (3 0 | 0 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 0 | 0 0)
for (3 1 | 0 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 1 | 0 0)
for (3 0 | 1 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 0 | 1 0)
for (3 1 | 1 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 1 | 1 0)
for (3 0 | 1 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 0 | 1 1)
for (3 1 | 1 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 1 | 1 1)
for (0 0 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 4
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(0 0 | 2 3)
for (3 0 | 2 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 0 | 2 0)
for (1 0 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 4
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 0 | 2 3)
for (3 1 | 2 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 1 | 2 0)
for (3 0 | 2 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 0 | 2 1)
for (1 1 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 4
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 1 | 2 3)
for (3 1 | 2 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 1 | 2 1)
for (2 3 | 2 0) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 3 | 2 0)
for (3 0 | 2 2) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 0 | 2 2)
for (2 3 | 2 1) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 3 | 2 1)
for (3 1 | 2 2) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 1 | 2 2)
for (2 3 | 2 2) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 3 | 2 2)
for (3 3 | 0 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 1
	0
	(3 3 | 0 0)
	(3 4 | 0 0)
for (3 0 | 3 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 3
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 0 | 3 0)
	(3 0 | 4 0)
for (3 3 | 1 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 1
	0
	(3 3 | 1 0)
	(3 4 | 1 0)
for (3 1 | 3 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 3
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 1 | 3 0)
	(3 1 | 4 0)
for (3 3 | 1 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 1
	0
	(3 3 | 1 1)
	(3 4 | 1 1)
for (3 1 | 3 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 3
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 1 | 3 1)
	(3 1 | 4 1)
for (3 3 | 2 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 1
	0
	(3 3 | 2 0)
	(3 4 | 2 0)
for (3 0 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 3
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 0 | 2 3)
	(3 0 | 2 4)
for (3 3 | 2 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 1
	0
	(3 3 | 2 1)
	(3 4 | 2 1)
for (3 1 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 3
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 1 | 2 3)
	(3 1 | 2 4)
for (3 3 | 2 2) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 1
	0
	(3 3 | 2 2)
	(3 4 | 2 2)
for (2 3 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 3
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 3
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 2
	0
	1
	(2 3 | 2 3)
	(2 3 | 2 4)
for (3 3 | 3 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 3
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 3
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 3 | 3 0)
	(3 3 | 4 0)
	(3 4 | 3 0)
	(3 4 | 4 0)
for (3 3 | 3 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 3
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 3
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 3 | 3 1)
	(3 3 | 4 1)
	(3 4 | 3 1)
	(3 4 | 4 1)
for (3 3 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 3
	klstablizer: 3
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 3 | 2 3)
	(3 3 | 2 4)
	(3 4 | 2 3)
	(3 4 | 2 4)
for (3 3 | 3 3) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 3
	lstablizer: 3
	ijstablizer: 3
	klstablizer: 3
	R.size = 2
	0
	1
	S.size = 2
	0
	1
	T.size = 2
	0
	1
	(3 3 | 3 3)
	(3 3 | 3 4)
	(3 3 | 4 4)
	(3 3 | 4 3)
	(3 4 | 3 3)
	(3 4 | 3 4)
	(3 4 | 4 4)
	(3 4 | 4 3)
done

      Computed 138 non-zero integrals.

  ==> Iterations <==

                        Total Energy        Delta E      Density RMS

   @RHF iter   1:   -73.25301165277945   -1.86188e+01    0.00000e+00 
   @RHF iter   2:   -74.93149654949069   -1.67848e+00    3.98379e-01 
   @RHF iter   3:   -74.96316771732830   -3.16712e-02    5.58234e-02 
   @RHF iter   4:   -74.96447365626071   -1.30594e-03    9.68664e-03 
   @RHF iter   5:   -74.96462787792542   -1.54222e-04    3.83566e-03 
   @RHF iter   6:   -74.96465575637373   -2.78784e-05    1.53875e-03 
   @RHF iter   7:   -74.96466119228383   -5.43591e-06    6.70528e-04 
   @RHF iter   8:   -74.96466227303124   -1.08075e-06    2.94632e-04 
   @RHF iter   9:   -74.96466248906674   -2.16036e-07    1.30783e-04 
   @RHF iter  10:   -74.96466253231938   -4.32526e-08    5.82654e-05 
   @RHF iter  11:   -74.96466254098301   -8.66363e-09    2.60156e-05 
   @RHF iter  12:   -74.96466254271859   -1.73557e-09    1.16289e-05 
   @RHF iter  13:   -74.96466254306630   -3.47711e-10    5.20124e-06 
   @RHF iter  14:   -74.96466254313593   -6.96332e-11    2.32711e-06 
   @RHF iter  15:   -74.96466254314990   -1.39693e-11    1.04137e-06 
   @RHF iter  16:   -74.96466254315267   -2.77112e-12    4.66056e-07 
   @RHF iter  17:   -74.96466254315324   -5.68434e-13    2.08590e-07 
   @RHF iter  18:   -74.96466254315335   -1.13687e-13    9.33599e-08 
   @RHF iter  19:   -74.96466254315339   -4.26326e-14    4.17864e-08 
   @RHF iter  20:   -74.96466254315334    5.68434e-14    1.87031e-08 
   @RHF iter  21:   -74.96466254315337   -2.84217e-14    8.37132e-09 
   @RHF iter  22:   -74.96466254315337    0.00000e+00    3.74693e-09 
   @RHF iter  23:   -74.96466254315335    1.42109e-14    1.67709e-09 
   @RHF iter  24:   -74.96466254315337   -1.42109e-14    7.50654e-10 
   @RHF iter  25:   -74.96466254315341   -4.26326e-14    3.35986e-10 
   @RHF iter  26:   -74.96466254315339    1.42109e-14    1.50385e-10 

  ==> Post-Iterations <==

	Orbital Energies (a.u.)
	-----------------------

	Doubly Occupied:                                                      

	   1A1   -20.247270     2A1    -1.247775     1B2    -0.595851  
	   3A1    -0.447884     1B1    -0.388956  

	Virtual:                                                              

	   4A1     0.564152     2B2     0.693007  

	Final Occupation by Irrep:
	         A1    A2    B1    B2 
	DOCC [     3,    0,    1,    1 ]

  Energy converged.

  @RHF Final Energy:   -74.96466254315339

  ==> Properties <==

 OEPROP: One-electron properties/analyses.
  by Rob Parrish and Justin Turney.
  built on LIBMINTS.

 Dipole Moment: (a.u.)
     X:     0.0000      Y:     0.0000      Z:     0.6566     Total:     0.6566

 Dipole Moment: (Debye)
     X:     0.0000      Y:     0.0000      Z:     1.6690     Total:     1.6690


  Saving occupied orbitals to File 100.

*** tstop() called on mac10147 at Tue Jun 14 09:57:12 2011
	user time   =       0.36 seconds =       0.01 minutes
	system time =       0.06 seconds =       0.00 minutes
	total time  =          0 seconds =       0.00 minutes
    -Cartesian displacement SALCs per irrep:
    Irrep  #SALCs
    -----  ------
      0       3
      1       1
      2       2
      3       3

	Finite difference computation of gradient using 3-point formula
	Check for precision!
	Energy without displacment:  -74.9646625432
	Gradients are in mass-weighted, symmetry-adapted cartesians (in au).
 Coord      Energy(-)        Energy(+)        Force
    0    -74.9646650932   -74.9646563495     0.0004371848
    1    -74.9649130838   -74.9643672883     0.0272897751
    2    -74.9646357607   -74.9646604130    -0.0012326147


			----------------------------------
			 OPTKING: for geometry optimizations  
			  - R.A. King,  Bethel University   
			------------------------------------

	Internal coordinates to be generated automatically.
	Detected frag with atoms:  1 2 3
	---Fragment 1 Bond Connectivity---
	 1 : 2 3
	 2 : 1
	 3 : 1

	---Fragment 1 Geometry and Gradient---
	 O           0.0000000000        0.0000000000       -0.1294768803
	 H           0.0000000000        1.4941866364        1.0274460245
	 H           0.0000000000       -1.4941866364        1.0274460245
	             0.0000000000        0.0000000000        0.0004371848
	             0.0000000000        0.0192967850       -0.0008715902
	             0.0000000000       -0.0192967850       -0.0008715902

	Previous optimization step data not found.  Starting new optimization.

	---Fragment 1 Intrafragment Coordinates---
	 * Coordinate *           * BOHR/RAD *       * ANG/DEG *
	 R(1,2)           =         1.889726	       1.000000
	 R(1,3)           =         1.889726	       1.000000
	 B(2,1,3)         =         1.823869	     104.500000

	Current energy   :       -74.9646625432

	Generating empirical Hessian (Fischer & Almlof '92) for each fragment.
	Following RFO solution 0.
	Projected energy change by RFO approximation:        -0.0016802244

	Back-transformation to cartesian coordinates...
	Successfully converged to displaced geometry.

	---Internal Coordinate Step in ANG or DEG, aJ/ANG or AJ/DEG ---
	 ----------------------------------------------------------------------
	 Coordinate             Previous        Force       Change         New 
	 ----------             --------       ------       ------       ------
	 R(1,2)          =      1.000000    -0.123504    -0.024342     0.975658
	 R(1,3)          =      1.000000    -0.123504    -0.024342     0.975658
	 B(2,1,3)        =    104.500000    -0.001748    -4.940653    99.559347
	 ----------------------------------------------------------------------

	Convergence Check Cycle    1: (using internal coordinates in au)
	                    Actual        Tolerance     Converged?
	----------------------------------------------------------
	MAX Force           2.3e-02        3.0e-04          no
	Energy Change      -7.5e+01        1.0e-06          no
	MAX Displacement    8.6e-02        1.2e-03          no
	----------------------------------------------------------
	Writing optimization data to binary file.
	Structure for next step:
	Cartesian Geometry (au)
	    O     0.0000000000   0.0000000000  -0.1332398611
	    H     0.0000000000   1.4078081556   1.0573066427
	    H     0.0000000000  -1.4078081556   1.0573066427
			--------------------------
			 OPTKING Finished Execution 
			--------------------------
	Using finite-differences of energies to determine gradients.
	Generating geometries for use with 3-point formula.
	Displacement size will be 1.00e-02.
	Number of atoms is 3.
    -Cartesian displacement SALCs per irrep:
    Irrep  #SALCs
    -----  ------
      0       3
      1       1
      2       2
      3       3

	Number of SALC's is 3.
	irrep = 0, ncomponent = 1
		0: atom 0, direction 2, coef 1.000000
	irrep = 0, ncomponent = 2
		0: atom 1, direction 1, coef 0.707107
		1: atom 2, direction 1, coef -0.707107
	irrep = 0, ncomponent = 2
		0: atom 1, direction 2, coef 0.707107
		1: atom 2, direction 2, coef 0.707107
	Number of displacements (including reference) is 7.

*** tstart() called on mac10147
*** at Tue Jun 14 09:57:12 2011

	There are an even number of electrons - assuming singlet.
	Specify the multiplicity with the MULTP option in the
	input if this is incorrect


         ---------------------------------------------------------
                                   SCF
            by Justin Turney, Rob Parrish, and Andy Simmonnett
                              RHF Reference
                        1 Threads,    256 MiB Core
         ---------------------------------------------------------

  ==> Geometry <==

    Molecular point group: c2v

    Geometry (in Angstrom), charge = 0, multiplicity = 1:

       Center              X                  Y                   Z       
    ------------   -----------------  -----------------  -----------------
           O          0.000000000000     0.000000000000    -0.070655583697
           H          0.000000000000     0.744980046917     0.560677693380
           H          0.000000000000    -0.744980046917     0.560677693380

    Number of unique atoms: 2

    Atoms equivalency:
       unique atom 0: 0 
       unique atom 1: 1 2 

  Running in c2v symmetry.

  Nuclear repulsion =    9.025644575370963

  Charge       = 0
  Multiplicity = 1
  Electrons    = 10
  Nalpha       = 5
  Nbeta        = 5

  ==> Algorithm <==

  SCF Algorithm Type is PK.
  DIIS disabled.
  MOM disabled.
  Guess Type is CORE.
  Energy threshold   = 1.00e-10
  Density threshold  = 1.00e-10
  Integral threshold = 0.00e+00

  ==> Primary Basis: STO-3G <==

  Basis Set
    Number of shells: 5
    Number of basis function: 7
    Number of Cartesian functions: 7
    Spherical Harmonics?: true
    Max angular momentum: 1

  ==> Pre-Iterations <==

  Minimum eigenvalue in the overlap matrix is 3.5473861364E-01.
  Using Symmetric Orthogonalization.
  SCF Guess: Core (One-Electron) Hamiltonian.

  Initial RHF energy:   -54.54043648516186

   -------------------------------------------------------
    Irrep   Nso     Nmo     Nalpha   Nbeta   Ndocc  Nsocc
   -------------------------------------------------------
     A1         4       4       3       3       3       0
     A2         0       0       0       0       0       0
     B1         1       1       1       1       1       0
     B2         2       2       1       1       1       0
   -------------------------------------------------------
    Total       7       7       5       5       5       0
   -------------------------------------------------------

  ==> Integral Setup <==

 MINTS: Wrapper to libmints.
   by Justin Turney

   Calculation information:
      Number of atoms:                   3
      Number of AO shells:               5
      Number of SO shells:               4
      Number of primitives:             15
      Number of atomic orbitals:         7
      Number of basis functions:         7

      Number of irreps:                  4
      Number of functions per irrep: [   4    0    1    2 ]

      Computing integrals...for (0 0 | 0 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(0 0 | 0 0)
for (1 0 | 0 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 0 | 0 0)
for (1 1 | 0 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 1 | 0 0)
for (1 0 | 1 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 0 | 1 0)
for (1 1 | 1 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 1 | 1 0)
for (1 1 | 1 1) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 1 | 1 1)
for (0 0 | 2 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (0 0 | 2 1) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (1 0 | 2 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (1 0 | 2 1) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (1 1 | 2 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (1 1 | 2 1) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (0 0 | 2 2) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(0 0 | 2 2)
for (2 0 | 2 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 0 | 2 0)
for (1 0 | 2 2) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 0 | 2 2)
for (2 1 | 2 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 1 | 2 0)
for (1 1 | 2 2) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 1 | 2 2)
for (2 1 | 2 1) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 1 | 2 1)
for (2 0 | 2 2) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (2 1 | 2 2) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (2 2 | 2 2) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 2 | 2 2)
for (3 0 | 0 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 0 | 0 0)
for (3 1 | 0 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 1 | 0 0)
for (3 0 | 1 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 0 | 1 0)
for (3 1 | 1 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 1 | 1 0)
for (3 0 | 1 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 0 | 1 1)
for (3 1 | 1 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 1 | 1 1)
for (0 0 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 4
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(0 0 | 2 3)
for (3 0 | 2 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 0 | 2 0)
for (1 0 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 4
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 0 | 2 3)
for (3 1 | 2 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 1 | 2 0)
for (3 0 | 2 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 0 | 2 1)
for (1 1 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 4
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 1 | 2 3)
for (3 1 | 2 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 1 | 2 1)
for (2 3 | 2 0) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 3 | 2 0)
for (3 0 | 2 2) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 0 | 2 2)
for (2 3 | 2 1) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 3 | 2 1)
for (3 1 | 2 2) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 1 | 2 2)
for (2 3 | 2 2) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 3 | 2 2)
for (3 3 | 0 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 1
	0
	(3 3 | 0 0)
	(3 4 | 0 0)
for (3 0 | 3 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 3
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 0 | 3 0)
	(3 0 | 4 0)
for (3 3 | 1 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 1
	0
	(3 3 | 1 0)
	(3 4 | 1 0)
for (3 1 | 3 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 3
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 1 | 3 0)
	(3 1 | 4 0)
for (3 3 | 1 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 1
	0
	(3 3 | 1 1)
	(3 4 | 1 1)
for (3 1 | 3 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 3
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 1 | 3 1)
	(3 1 | 4 1)
for (3 3 | 2 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 1
	0
	(3 3 | 2 0)
	(3 4 | 2 0)
for (3 0 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 3
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 0 | 2 3)
	(3 0 | 2 4)
for (3 3 | 2 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 1
	0
	(3 3 | 2 1)
	(3 4 | 2 1)
for (3 1 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 3
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 1 | 2 3)
	(3 1 | 2 4)
for (3 3 | 2 2) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 1
	0
	(3 3 | 2 2)
	(3 4 | 2 2)
for (2 3 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 3
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 3
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 2
	0
	1
	(2 3 | 2 3)
	(2 3 | 2 4)
for (3 3 | 3 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 3
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 3
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 3 | 3 0)
	(3 3 | 4 0)
	(3 4 | 3 0)
	(3 4 | 4 0)
for (3 3 | 3 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 3
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 3
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 3 | 3 1)
	(3 3 | 4 1)
	(3 4 | 3 1)
	(3 4 | 4 1)
for (3 3 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 3
	klstablizer: 3
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 3 | 2 3)
	(3 3 | 2 4)
	(3 4 | 2 3)
	(3 4 | 2 4)
for (3 3 | 3 3) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 3
	lstablizer: 3
	ijstablizer: 3
	klstablizer: 3
	R.size = 2
	0
	1
	S.size = 2
	0
	1
	T.size = 2
	0
	1
	(3 3 | 3 3)
	(3 3 | 3 4)
	(3 3 | 4 4)
	(3 3 | 4 3)
	(3 4 | 3 3)
	(3 4 | 3 4)
	(3 4 | 4 4)
	(3 4 | 4 3)
done

      Computed 138 non-zero integrals.

  ==> Iterations <==

                        Total Energy        Delta E      Density RMS

   @RHF iter   1:   -73.23399212356057   -1.86936e+01    0.00000e+00 
   @RHF iter   2:   -74.93552264393929   -1.70153e+00    4.03012e-01 
   @RHF iter   3:   -74.96423496858471   -2.87123e-02    5.37269e-02 
   @RHF iter   4:   -74.96534109951421   -1.10613e-03    9.08292e-03 
   @RHF iter   5:   -74.96546164697250   -1.20547e-04    3.44019e-03 
   @RHF iter   6:   -74.96548207346734   -2.04265e-05    1.33658e-03 
   @RHF iter   7:   -74.96548586748710   -3.79402e-06    5.65899e-04 
   @RHF iter   8:   -74.96548659041140   -7.22924e-07    2.42855e-04 
   @RHF iter   9:   -74.96548672918262   -1.38771e-07    1.05458e-04 
   @RHF iter  10:   -74.96548675587940   -2.66968e-08    4.60117e-05 
   @RHF iter  11:   -74.96548676101865   -5.13926e-09    2.01294e-05 
   @RHF iter  12:   -74.96548676200813   -9.89473e-10    8.81848e-06 
   @RHF iter  13:   -74.96548676219867   -1.90539e-10    3.86619e-06 
   @RHF iter  14:   -74.96548676223536   -3.66924e-11    1.69570e-06 
   @RHF iter  15:   -74.96548676224243   -7.07701e-12    7.43893e-07 
   @RHF iter  16:   -74.96548676224378   -1.35003e-12    3.26381e-07 
   @RHF iter  17:   -74.96548676224398   -1.98952e-13    1.43208e-07 
   @RHF iter  18:   -74.96548676224408   -9.94760e-14    6.28387e-08 
   @RHF iter  19:   -74.96548676224417   -8.52651e-14    2.75737e-08 
   @RHF iter  20:   -74.96548676224411    5.68434e-14    1.20995e-08 
   @RHF iter  21:   -74.96548676224411    0.00000e+00    5.30937e-09 
   @RHF iter  22:   -74.96548676224408    2.84217e-14    2.32980e-09 
   @RHF iter  23:   -74.96548676224413   -4.26326e-14    1.02234e-09 
   @RHF iter  24:   -74.96548676224413    0.00000e+00    4.48616e-10 
   @RHF iter  25:   -74.96548676224408    4.26326e-14    1.96859e-10 

  ==> Post-Iterations <==

	Orbital Energies (a.u.)
	-----------------------

	Doubly Occupied:                                                      

	   1A1   -20.250578     2A1    -1.264485     1B2    -0.599274  
	   3A1    -0.462687     1B1    -0.393658  

	Virtual:                                                              

	   4A1     0.594975     2B2     0.705806  

	Final Occupation by Irrep:
	         A1    A2    B1    B2 
	DOCC [     3,    0,    1,    1 ]

  Energy converged.

  @RHF Final Energy:   -74.96548676224408

  ==> Properties <==

 OEPROP: One-electron properties/analyses.
  by Rob Parrish and Justin Turney.
  built on LIBMINTS.

 Dipole Moment: (a.u.)
     X:     0.0000      Y:     0.0000      Z:     0.6810     Total:     0.6810

 Dipole Moment: (Debye)
     X:     0.0000      Y:     0.0000      Z:     1.7309     Total:     1.7309


  Saving occupied orbitals to File 100.

*** tstop() called on mac10147 at Tue Jun 14 09:57:12 2011
	user time   =       0.41 seconds =       0.01 minutes
	system time =       0.07 seconds =       0.00 minutes
	total time  =          0 seconds =       0.00 minutes

*** tstart() called on mac10147
*** at Tue Jun 14 09:57:12 2011

	There are an even number of electrons - assuming singlet.
	Specify the multiplicity with the MULTP option in the
	input if this is incorrect


         ---------------------------------------------------------
                                   SCF
            by Justin Turney, Rob Parrish, and Andy Simmonnett
                              RHF Reference
                        1 Threads,    256 MiB Core
         ---------------------------------------------------------

  ==> Geometry <==

    Molecular point group: c2v

    Geometry (in Angstrom), charge = 0, multiplicity = 1:

       Center              X                  Y                   Z       
    ------------   -----------------  -----------------  -----------------
           O          0.000000000000     0.000000000000    -0.070359422604
           H          0.000000000000     0.744980046917     0.558327547648
           H          0.000000000000    -0.744980046917     0.558327547648

    Number of unique atoms: 2

    Atoms equivalency:
       unique atom 0: 0 
       unique atom 1: 1 2 

  Running in c2v symmetry.

  Nuclear repulsion =    9.040843610660943

  Charge       = 0
  Multiplicity = 1
  Electrons    = 10
  Nalpha       = 5
  Nbeta        = 5

  ==> Algorithm <==

  SCF Algorithm Type is PK.
  DIIS disabled.
  MOM disabled.
  Guess Type is CORE.
  Energy threshold   = 1.00e-10
  Density threshold  = 1.00e-10
  Integral threshold = 0.00e+00

  ==> Primary Basis: STO-3G <==

  Basis Set
    Number of shells: 5
    Number of basis function: 7
    Number of Cartesian functions: 7
    Spherical Harmonics?: true
    Max angular momentum: 1

  ==> Pre-Iterations <==

  Minimum eigenvalue in the overlap matrix is 3.5360707690E-01.
  Using Symmetric Orthogonalization.
  SCF Guess: Core (One-Electron) Hamiltonian.

  Initial RHF energy:   -54.53533053053186

   -------------------------------------------------------
    Irrep   Nso     Nmo     Nalpha   Nbeta   Ndocc  Nsocc
   -------------------------------------------------------
     A1         4       4       3       3       3       0
     A2         0       0       0       0       0       0
     B1         1       1       1       1       1       0
     B2         2       2       1       1       1       0
   -------------------------------------------------------
    Total       7       7       5       5       5       0
   -------------------------------------------------------

  ==> Integral Setup <==

 MINTS: Wrapper to libmints.
   by Justin Turney

   Calculation information:
      Number of atoms:                   3
      Number of AO shells:               5
      Number of SO shells:               4
      Number of primitives:             15
      Number of atomic orbitals:         7
      Number of basis functions:         7

      Number of irreps:                  4
      Number of functions per irrep: [   4    0    1    2 ]

      Computing integrals...for (0 0 | 0 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(0 0 | 0 0)
for (1 0 | 0 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 0 | 0 0)
for (1 1 | 0 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 1 | 0 0)
for (1 0 | 1 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 0 | 1 0)
for (1 1 | 1 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 1 | 1 0)
for (1 1 | 1 1) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 1 | 1 1)
for (0 0 | 2 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (0 0 | 2 1) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (1 0 | 2 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (1 0 | 2 1) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (1 1 | 2 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (1 1 | 2 1) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (0 0 | 2 2) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(0 0 | 2 2)
for (2 0 | 2 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 0 | 2 0)
for (1 0 | 2 2) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 0 | 2 2)
for (2 1 | 2 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 1 | 2 0)
for (1 1 | 2 2) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 1 | 2 2)
for (2 1 | 2 1) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 1 | 2 1)
for (2 0 | 2 2) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (2 1 | 2 2) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (2 2 | 2 2) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 2 | 2 2)
for (3 0 | 0 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 0 | 0 0)
for (3 1 | 0 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 1 | 0 0)
for (3 0 | 1 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 0 | 1 0)
for (3 1 | 1 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 1 | 1 0)
for (3 0 | 1 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 0 | 1 1)
for (3 1 | 1 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 1 | 1 1)
for (0 0 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 4
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(0 0 | 2 3)
for (3 0 | 2 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 0 | 2 0)
for (1 0 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 4
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 0 | 2 3)
for (3 1 | 2 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 1 | 2 0)
for (3 0 | 2 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 0 | 2 1)
for (1 1 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 4
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 1 | 2 3)
for (3 1 | 2 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 1 | 2 1)
for (2 3 | 2 0) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 3 | 2 0)
for (3 0 | 2 2) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 0 | 2 2)
for (2 3 | 2 1) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 3 | 2 1)
for (3 1 | 2 2) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 1 | 2 2)
for (2 3 | 2 2) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 3 | 2 2)
for (3 3 | 0 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 1
	0
	(3 3 | 0 0)
	(3 4 | 0 0)
for (3 0 | 3 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 3
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 0 | 3 0)
	(3 0 | 4 0)
for (3 3 | 1 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 1
	0
	(3 3 | 1 0)
	(3 4 | 1 0)
for (3 1 | 3 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 3
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 1 | 3 0)
	(3 1 | 4 0)
for (3 3 | 1 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 1
	0
	(3 3 | 1 1)
	(3 4 | 1 1)
for (3 1 | 3 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 3
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 1 | 3 1)
	(3 1 | 4 1)
for (3 3 | 2 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 1
	0
	(3 3 | 2 0)
	(3 4 | 2 0)
for (3 0 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 3
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 0 | 2 3)
	(3 0 | 2 4)
for (3 3 | 2 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 1
	0
	(3 3 | 2 1)
	(3 4 | 2 1)
for (3 1 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 3
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 1 | 2 3)
	(3 1 | 2 4)
for (3 3 | 2 2) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 1
	0
	(3 3 | 2 2)
	(3 4 | 2 2)
for (2 3 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 3
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 3
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 2
	0
	1
	(2 3 | 2 3)
	(2 3 | 2 4)
for (3 3 | 3 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 3
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 3
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 3 | 3 0)
	(3 3 | 4 0)
	(3 4 | 3 0)
	(3 4 | 4 0)
for (3 3 | 3 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 3
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 3
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 3 | 3 1)
	(3 3 | 4 1)
	(3 4 | 3 1)
	(3 4 | 4 1)
for (3 3 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 3
	klstablizer: 3
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 3 | 2 3)
	(3 3 | 2 4)
	(3 4 | 2 3)
	(3 4 | 2 4)
for (3 3 | 3 3) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 3
	lstablizer: 3
	ijstablizer: 3
	klstablizer: 3
	R.size = 2
	0
	1
	S.size = 2
	0
	1
	T.size = 2
	0
	1
	(3 3 | 3 3)
	(3 3 | 3 4)
	(3 3 | 4 4)
	(3 3 | 4 3)
	(3 4 | 3 3)
	(3 4 | 3 4)
	(3 4 | 4 4)
	(3 4 | 4 3)
done

      Computed 138 non-zero integrals.

  ==> Iterations <==

                        Total Energy        Delta E      Density RMS

   @RHF iter   1:   -73.23357595862933   -1.86982e+01    0.00000e+00 
   @RHF iter   2:   -74.93648702116320   -1.70291e+00    4.03070e-01 
   @RHF iter   3:   -74.96417830626133   -2.76913e-02    5.27667e-02 
   @RHF iter   4:   -74.96525135837511   -1.07305e-03    8.99389e-03 
   @RHF iter   5:   -74.96536974944715   -1.18391e-04    3.41207e-03 
   @RHF iter   6:   -74.96538981090285   -2.00615e-05    1.32781e-03 
   @RHF iter   7:   -74.96539352881335   -3.71791e-06    5.61416e-04 
   @RHF iter   8:   -74.96539423541189   -7.06599e-07    2.40670e-04 
   @RHF iter   9:   -74.96539437069326   -1.35281e-07    1.04373e-04 
   @RHF iter  10:   -74.96539439665014   -2.59569e-08    4.54793e-05 
   @RHF iter  11:   -74.96539440163382   -4.98368e-09    1.98704e-05 
   @RHF iter  12:   -74.96539440259089   -9.57073e-10    8.69352e-06 
   @RHF iter  13:   -74.96539440277462   -1.83732e-10    3.80638e-06 
   @RHF iter  14:   -74.96539440280998   -3.53566e-11    1.66727e-06 
   @RHF iter  15:   -74.96539440281674   -6.76437e-12    7.30457e-07 
   @RHF iter  16:   -74.96539440281802   -1.27898e-12    3.20064e-07 
   @RHF iter  17:   -74.96539440281828   -2.55795e-13    1.40252e-07 
   @RHF iter  18:   -74.96539440281836   -8.52651e-14    6.14604e-08 
   @RHF iter  19:   -74.96539440281839   -2.84217e-14    2.69334e-08 
   @RHF iter  20:   -74.96539440281835    4.26326e-14    1.18030e-08 
   @RHF iter  21:   -74.96539440281832    2.84217e-14    5.17243e-09 
   @RHF iter  22:   -74.96539440281838   -5.68434e-14    2.26673e-09 
   @RHF iter  23:   -74.96539440281833    4.26326e-14    9.93355e-10 
   @RHF iter  24:   -74.96539440281839   -5.68434e-14    4.35323e-10 
   @RHF iter  25:   -74.96539440281836    2.84217e-14    1.90773e-10 

  ==> Post-Iterations <==

	Orbital Energies (a.u.)
	-----------------------

	Doubly Occupied:                                                      

	   1A1   -20.250088     2A1    -1.265080     1B2    -0.600562  
	   3A1    -0.462345     1B1    -0.393599  

	Virtual:                                                              

	   4A1     0.596282     2B2     0.708388  

	Final Occupation by Irrep:
	         A1    A2    B1    B2 
	DOCC [     3,    0,    1,    1 ]

  Energy converged.

  @RHF Final Energy:   -74.96539440281836

  ==> Properties <==

 OEPROP: One-electron properties/analyses.
  by Rob Parrish and Justin Turney.
  built on LIBMINTS.

 Dipole Moment: (a.u.)
     X:     0.0000      Y:     0.0000      Z:     0.6814     Total:     0.6814

 Dipole Moment: (Debye)
     X:     0.0000      Y:     0.0000      Z:     1.7319     Total:     1.7319


  Saving occupied orbitals to File 100.

*** tstop() called on mac10147 at Tue Jun 14 09:57:12 2011
	user time   =       0.46 seconds =       0.01 minutes
	system time =       0.08 seconds =       0.00 minutes
	total time  =          0 seconds =       0.00 minutes

*** tstart() called on mac10147
*** at Tue Jun 14 09:57:12 2011

	There are an even number of electrons - assuming singlet.
	Specify the multiplicity with the MULTP option in the
	input if this is incorrect


         ---------------------------------------------------------
                                   SCF
            by Justin Turney, Rob Parrish, and Andy Simmonnett
                              RHF Reference
                        1 Threads,    256 MiB Core
         ---------------------------------------------------------

  ==> Geometry <==

    Molecular point group: c2v

    Geometry (in Angstrom), charge = 0, multiplicity = 1:

       Center              X                  Y                   Z       
    ------------   -----------------  -----------------  -----------------
           O          0.000000000000     0.000000000000    -0.070507503150
           H          0.000000000000     0.741252753383     0.559502620514
           H          0.000000000000    -0.741252753383     0.559502620514

    Number of unique atoms: 2

    Atoms equivalency:
       unique atom 0: 0 
       unique atom 1: 1 2 

  Running in c2v symmetry.

  Nuclear repulsion =    9.060389755989181

  Charge       = 0
  Multiplicity = 1
  Electrons    = 10
  Nalpha       = 5
  Nbeta        = 5

  ==> Algorithm <==

  SCF Algorithm Type is PK.
  DIIS disabled.
  MOM disabled.
  Guess Type is CORE.
  Energy threshold   = 1.00e-10
  Density threshold  = 1.00e-10
  Integral threshold = 0.00e+00

  ==> Primary Basis: STO-3G <==

  Basis Set
    Number of shells: 5
    Number of basis function: 7
    Number of Cartesian functions: 7
    Spherical Harmonics?: true
    Max angular momentum: 1

  ==> Pre-Iterations <==

  Minimum eigenvalue in the overlap matrix is 3.5231555622E-01.
  Using Symmetric Orthogonalization.
  SCF Guess: Core (One-Electron) Hamiltonian.

  Initial RHF energy:   -54.52707513077799

   -------------------------------------------------------
    Irrep   Nso     Nmo     Nalpha   Nbeta   Ndocc  Nsocc
   -------------------------------------------------------
     A1         4       4       3       3       3       0
     A2         0       0       0       0       0       0
     B1         1       1       1       1       1       0
     B2         2       2       1       1       1       0
   -------------------------------------------------------
    Total       7       7       5       5       5       0
   -------------------------------------------------------

  ==> Integral Setup <==

 MINTS: Wrapper to libmints.
   by Justin Turney

   Calculation information:
      Number of atoms:                   3
      Number of AO shells:               5
      Number of SO shells:               4
      Number of primitives:             15
      Number of atomic orbitals:         7
      Number of basis functions:         7

      Number of irreps:                  4
      Number of functions per irrep: [   4    0    1    2 ]

      Computing integrals...for (0 0 | 0 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(0 0 | 0 0)
for (1 0 | 0 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 0 | 0 0)
for (1 1 | 0 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 1 | 0 0)
for (1 0 | 1 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 0 | 1 0)
for (1 1 | 1 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 1 | 1 0)
for (1 1 | 1 1) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 1 | 1 1)
for (0 0 | 2 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (0 0 | 2 1) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (1 0 | 2 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (1 0 | 2 1) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (1 1 | 2 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (1 1 | 2 1) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (0 0 | 2 2) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(0 0 | 2 2)
for (2 0 | 2 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 0 | 2 0)
for (1 0 | 2 2) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 0 | 2 2)
for (2 1 | 2 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 1 | 2 0)
for (1 1 | 2 2) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 1 | 2 2)
for (2 1 | 2 1) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 1 | 2 1)
for (2 0 | 2 2) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (2 1 | 2 2) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (2 2 | 2 2) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 2 | 2 2)
for (3 0 | 0 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 0 | 0 0)
for (3 1 | 0 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 1 | 0 0)
for (3 0 | 1 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 0 | 1 0)
for (3 1 | 1 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 1 | 1 0)
for (3 0 | 1 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 0 | 1 1)
for (3 1 | 1 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 1 | 1 1)
for (0 0 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 4
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(0 0 | 2 3)
for (3 0 | 2 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 0 | 2 0)
for (1 0 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 4
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 0 | 2 3)
for (3 1 | 2 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 1 | 2 0)
for (3 0 | 2 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 0 | 2 1)
for (1 1 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 4
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 1 | 2 3)
for (3 1 | 2 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 1 | 2 1)
for (2 3 | 2 0) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 3 | 2 0)
for (3 0 | 2 2) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 0 | 2 2)
for (2 3 | 2 1) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 3 | 2 1)
for (3 1 | 2 2) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 1 | 2 2)
for (2 3 | 2 2) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 3 | 2 2)
for (3 3 | 0 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 1
	0
	(3 3 | 0 0)
	(3 4 | 0 0)
for (3 0 | 3 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 3
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 0 | 3 0)
	(3 0 | 4 0)
for (3 3 | 1 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 1
	0
	(3 3 | 1 0)
	(3 4 | 1 0)
for (3 1 | 3 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 3
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 1 | 3 0)
	(3 1 | 4 0)
for (3 3 | 1 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 1
	0
	(3 3 | 1 1)
	(3 4 | 1 1)
for (3 1 | 3 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 3
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 1 | 3 1)
	(3 1 | 4 1)
for (3 3 | 2 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 1
	0
	(3 3 | 2 0)
	(3 4 | 2 0)
for (3 0 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 3
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 0 | 2 3)
	(3 0 | 2 4)
for (3 3 | 2 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 1
	0
	(3 3 | 2 1)
	(3 4 | 2 1)
for (3 1 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 3
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 1 | 2 3)
	(3 1 | 2 4)
for (3 3 | 2 2) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 1
	0
	(3 3 | 2 2)
	(3 4 | 2 2)
for (2 3 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 3
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 3
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 2
	0
	1
	(2 3 | 2 3)
	(2 3 | 2 4)
for (3 3 | 3 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 3
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 3
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 3 | 3 0)
	(3 3 | 4 0)
	(3 4 | 3 0)
	(3 4 | 4 0)
for (3 3 | 3 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 3
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 3
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 3 | 3 1)
	(3 3 | 4 1)
	(3 4 | 3 1)
	(3 4 | 4 1)
for (3 3 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 3
	klstablizer: 3
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 3 | 2 3)
	(3 3 | 2 4)
	(3 4 | 2 3)
	(3 4 | 2 4)
for (3 3 | 3 3) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 3
	lstablizer: 3
	ijstablizer: 3
	klstablizer: 3
	R.size = 2
	0
	1
	S.size = 2
	0
	1
	T.size = 2
	0
	1
	(3 3 | 3 3)
	(3 3 | 3 4)
	(3 3 | 4 4)
	(3 3 | 4 3)
	(3 4 | 3 3)
	(3 4 | 3 4)
	(3 4 | 4 4)
	(3 4 | 4 3)
done

      Computed 138 non-zero integrals.

  ==> Iterations <==

                        Total Energy        Delta E      Density RMS

   @RHF iter   1:   -73.23191987770375   -1.87048e+01    0.00000e+00 
   @RHF iter   2:   -74.93655438241248   -1.70463e+00    4.03484e-01 
   @RHF iter   3:   -74.96401128997887   -2.74569e-02    5.26004e-02 
   @RHF iter   4:   -74.96507042606736   -1.05914e-03    8.95086e-03 
   @RHF iter   5:   -74.96518657683302   -1.16151e-04    3.38402e-03 
   @RHF iter   6:   -74.96520615710489   -1.95803e-05    1.31359e-03 
   @RHF iter   7:   -74.96520977187987   -3.61477e-06    5.54133e-04 
   @RHF iter   8:   -74.96521045659142   -6.84712e-07    2.37107e-04 
   @RHF iter   9:   -74.96521058726869   -1.30677e-07    1.02651e-04 
   @RHF iter  10:   -74.96521061226444   -2.49958e-08    4.46562e-05 
   @RHF iter  11:   -74.96521061704870   -4.78425e-09    1.94797e-05 
   @RHF iter  12:   -74.96521061796467   -9.15975e-10    8.50927e-06 
   @RHF iter  13:   -74.96521061814008   -1.75405e-10    3.71992e-06 
   @RHF iter  14:   -74.96521061817364   -3.35660e-11    1.62687e-06 
   @RHF iter  15:   -74.96521061818009   -6.45173e-12    7.11658e-07 
   @RHF iter  16:   -74.96521061818129   -1.19371e-12    3.11346e-07 
   @RHF iter  17:   -74.96521061818154   -2.55795e-13    1.36221e-07 
   @RHF iter  18:   -74.96521061818156   -1.42109e-14    5.96021e-08 
   @RHF iter  19:   -74.96521061818157   -1.42109e-14    2.60788e-08 
   @RHF iter  20:   -74.96521061818153    4.26326e-14    1.14109e-08 
   @RHF iter  21:   -74.96521061818152    1.42109e-14    4.99289e-09 
   @RHF iter  22:   -74.96521061818156   -4.26326e-14    2.18468e-09 
   @RHF iter  23:   -74.96521061818162   -5.68434e-14    9.55922e-10 
   @RHF iter  24:   -74.96521061818156    5.68434e-14    4.18273e-10 
   @RHF iter  25:   -74.96521061818152    4.26326e-14    1.83019e-10 

  ==> Post-Iterations <==

	Orbital Energies (a.u.)
	-----------------------

	Doubly Occupied:                                                      

	   1A1   -20.250299     2A1    -1.266524     1B2    -0.600843  
	   3A1    -0.463527     1B1    -0.393971  

	Virtual:                                                              

	   4A1     0.598776     2B2     0.709632  

	Final Occupation by Irrep:
	         A1    A2    B1    B2 
	DOCC [     3,    0,    1,    1 ]

  Energy converged.

  @RHF Final Energy:   -74.96521061818152

  ==> Properties <==

 OEPROP: One-electron properties/analyses.
  by Rob Parrish and Justin Turney.
  built on LIBMINTS.

 Dipole Moment: (a.u.)
     X:     0.0000      Y:     0.0000      Z:     0.6834     Total:     0.6834

 Dipole Moment: (Debye)
     X:     0.0000      Y:     0.0000      Z:     1.7371     Total:     1.7371


  Saving occupied orbitals to File 100.

*** tstop() called on mac10147 at Tue Jun 14 09:57:12 2011
	user time   =       0.52 seconds =       0.01 minutes
	system time =       0.08 seconds =       0.00 minutes
	total time  =          0 seconds =       0.00 minutes

*** tstart() called on mac10147
*** at Tue Jun 14 09:57:12 2011

	There are an even number of electrons - assuming singlet.
	Specify the multiplicity with the MULTP option in the
	input if this is incorrect


         ---------------------------------------------------------
                                   SCF
            by Justin Turney, Rob Parrish, and Andy Simmonnett
                              RHF Reference
                        1 Threads,    256 MiB Core
         ---------------------------------------------------------

  ==> Geometry <==

    Molecular point group: c2v

    Geometry (in Angstrom), charge = 0, multiplicity = 1:

       Center              X                  Y                   Z       
    ------------   -----------------  -----------------  -----------------
           O          0.000000000000     0.000000000000    -0.070507503150
           H          0.000000000000     0.748707340450     0.559502620514
           H          0.000000000000    -0.748707340450     0.559502620514

    Number of unique atoms: 2

    Atoms equivalency:
       unique atom 0: 0 
       unique atom 1: 1 2 

  Running in c2v symmetry.

  Nuclear repulsion =    9.006207082095440

  Charge       = 0
  Multiplicity = 1
  Electrons    = 10
  Nalpha       = 5
  Nbeta        = 5

  ==> Algorithm <==

  SCF Algorithm Type is PK.
  DIIS disabled.
  MOM disabled.
  Guess Type is CORE.
  Energy threshold   = 1.00e-10
  Density threshold  = 1.00e-10
  Integral threshold = 0.00e+00

  ==> Primary Basis: STO-3G <==

  Basis Set
    Number of shells: 5
    Number of basis function: 7
    Number of Cartesian functions: 7
    Spherical Harmonics?: true
    Max angular momentum: 1

  ==> Pre-Iterations <==

  Minimum eigenvalue in the overlap matrix is 3.5603432609E-01.
  Using Symmetric Orthogonalization.
  SCF Guess: Core (One-Electron) Hamiltonian.

  Initial RHF energy:   -54.54862048816074

   -------------------------------------------------------
    Irrep   Nso     Nmo     Nalpha   Nbeta   Ndocc  Nsocc
   -------------------------------------------------------
     A1         4       4       3       3       3       0
     A2         0       0       0       0       0       0
     B1         1       1       1       1       1       0
     B2         2       2       1       1       1       0
   -------------------------------------------------------
    Total       7       7       5       5       5       0
   -------------------------------------------------------

  ==> Integral Setup <==

 MINTS: Wrapper to libmints.
   by Justin Turney

   Calculation information:
      Number of atoms:                   3
      Number of AO shells:               5
      Number of SO shells:               4
      Number of primitives:             15
      Number of atomic orbitals:         7
      Number of basis functions:         7

      Number of irreps:                  4
      Number of functions per irrep: [   4    0    1    2 ]

      Computing integrals...for (0 0 | 0 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(0 0 | 0 0)
for (1 0 | 0 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 0 | 0 0)
for (1 1 | 0 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 1 | 0 0)
for (1 0 | 1 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 0 | 1 0)
for (1 1 | 1 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 1 | 1 0)
for (1 1 | 1 1) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 1 | 1 1)
for (0 0 | 2 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (0 0 | 2 1) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (1 0 | 2 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (1 0 | 2 1) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (1 1 | 2 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (1 1 | 2 1) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (0 0 | 2 2) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(0 0 | 2 2)
for (2 0 | 2 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 0 | 2 0)
for (1 0 | 2 2) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 0 | 2 2)
for (2 1 | 2 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 1 | 2 0)
for (1 1 | 2 2) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 1 | 2 2)
for (2 1 | 2 1) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 1 | 2 1)
for (2 0 | 2 2) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (2 1 | 2 2) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (2 2 | 2 2) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 2 | 2 2)
for (3 0 | 0 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 0 | 0 0)
for (3 1 | 0 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 1 | 0 0)
for (3 0 | 1 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 0 | 1 0)
for (3 1 | 1 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 1 | 1 0)
for (3 0 | 1 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 0 | 1 1)
for (3 1 | 1 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 1 | 1 1)
for (0 0 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 4
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(0 0 | 2 3)
for (3 0 | 2 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 0 | 2 0)
for (1 0 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 4
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 0 | 2 3)
for (3 1 | 2 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 1 | 2 0)
for (3 0 | 2 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 0 | 2 1)
for (1 1 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 4
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 1 | 2 3)
for (3 1 | 2 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 1 | 2 1)
for (2 3 | 2 0) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 3 | 2 0)
for (3 0 | 2 2) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 0 | 2 2)
for (2 3 | 2 1) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 3 | 2 1)
for (3 1 | 2 2) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 1 | 2 2)
for (2 3 | 2 2) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 3 | 2 2)
for (3 3 | 0 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 1
	0
	(3 3 | 0 0)
	(3 4 | 0 0)
for (3 0 | 3 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 3
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 0 | 3 0)
	(3 0 | 4 0)
for (3 3 | 1 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 1
	0
	(3 3 | 1 0)
	(3 4 | 1 0)
for (3 1 | 3 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 3
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 1 | 3 0)
	(3 1 | 4 0)
for (3 3 | 1 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 1
	0
	(3 3 | 1 1)
	(3 4 | 1 1)
for (3 1 | 3 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 3
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 1 | 3 1)
	(3 1 | 4 1)
for (3 3 | 2 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 1
	0
	(3 3 | 2 0)
	(3 4 | 2 0)
for (3 0 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 3
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 0 | 2 3)
	(3 0 | 2 4)
for (3 3 | 2 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 1
	0
	(3 3 | 2 1)
	(3 4 | 2 1)
for (3 1 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 3
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 1 | 2 3)
	(3 1 | 2 4)
for (3 3 | 2 2) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 1
	0
	(3 3 | 2 2)
	(3 4 | 2 2)
for (2 3 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 3
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 3
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 2
	0
	1
	(2 3 | 2 3)
	(2 3 | 2 4)
for (3 3 | 3 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 3
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 3
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 3 | 3 0)
	(3 3 | 4 0)
	(3 4 | 3 0)
	(3 4 | 4 0)
for (3 3 | 3 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 3
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 3
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 3 | 3 1)
	(3 3 | 4 1)
	(3 4 | 3 1)
	(3 4 | 4 1)
for (3 3 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 3
	klstablizer: 3
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 3 | 2 3)
	(3 3 | 2 4)
	(3 4 | 2 3)
	(3 4 | 2 4)
for (3 3 | 3 3) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 3
	lstablizer: 3
	ijstablizer: 3
	klstablizer: 3
	R.size = 2
	0
	1
	S.size = 2
	0
	1
	T.size = 2
	0
	1
	(3 3 | 3 3)
	(3 3 | 3 4)
	(3 3 | 4 4)
	(3 3 | 4 3)
	(3 4 | 3 3)
	(3 4 | 3 4)
	(3 4 | 4 4)
	(3 4 | 4 3)
done

      Computed 138 non-zero integrals.

  ==> Iterations <==

                        Total Energy        Delta E      Density RMS

   @RHF iter   1:   -73.23562935528744   -1.86870e+01    0.00000e+00 
   @RHF iter   2:   -74.93538958586790   -1.69976e+00    4.02608e-01 
   @RHF iter   3:   -74.96435451415388   -2.89649e-02    5.39063e-02 
   @RHF iter   4:   -74.96547567141752   -1.12116e-03    9.12859e-03 
   @RHF iter   5:   -74.96559858926587   -1.22918e-04    3.46940e-03 
   @RHF iter   6:   -74.96561952525600   -2.09360e-05    1.35130e-03 
   @RHF iter   7:   -74.96562342895987   -3.90370e-06    5.73446e-04 
   @RHF iter   8:   -74.96562417527676   -7.46317e-07    2.46553e-04 
   @RHF iter   9:   -74.96562431899402   -1.43717e-07    1.07249e-04 
   @RHF iter  10:   -74.96562434672879   -2.77348e-08    4.68696e-05 
   @RHF iter  11:   -74.96562435208450   -5.35572e-09    2.05375e-05 
   @RHF iter  12:   -74.96562435311890   -1.03439e-09    9.01145e-06 
   @RHF iter  13:   -74.96562435331865   -1.99748e-10    3.95697e-06 
   @RHF iter  14:   -74.96562435335727   -3.86251e-11    1.73822e-06 
   @RHF iter  15:   -74.96562435336469   -7.41807e-12    7.63733e-07 
   @RHF iter  16:   -74.96562435336615   -1.46372e-12    3.35606e-07 
   @RHF iter  17:   -74.96562435336639   -2.41585e-13    1.47485e-07 
   @RHF iter  18:   -74.96562435336644   -4.26326e-14    6.48155e-08 
   @RHF iter  19:   -74.96562435336645   -1.42109e-14    2.84852e-08 
   @RHF iter  20:   -74.96562435336651   -5.68434e-14    1.25189e-08 
   @RHF iter  21:   -74.96562435336654   -2.84217e-14    5.50191e-09 
   @RHF iter  22:   -74.96562435336649    4.26326e-14    2.41804e-09 
   @RHF iter  23:   -74.96562435336651   -1.42109e-14    1.06271e-09 
   @RHF iter  24:   -74.96562435336651    0.00000e+00    4.67050e-10 
   @RHF iter  25:   -74.96562435336651    0.00000e+00    2.05265e-10 

  ==> Post-Iterations <==

	Orbital Energies (a.u.)
	-----------------------

	Doubly Occupied:                                                      

	   1A1   -20.250371     2A1    -1.263056     1B2    -0.598984  
	   3A1    -0.461509     1B1    -0.393290  

	Virtual:                                                              

	   4A1     0.592478     2B2     0.704565  

	Final Occupation by Irrep:
	         A1    A2    B1    B2 
	DOCC [     3,    0,    1,    1 ]

  Energy converged.

  @RHF Final Energy:   -74.96562435336651

  ==> Properties <==

 OEPROP: One-electron properties/analyses.
  by Rob Parrish and Justin Turney.
  built on LIBMINTS.

 Dipole Moment: (a.u.)
     X:     0.0000      Y:     0.0000      Z:     0.6789     Total:     0.6789

 Dipole Moment: (Debye)
     X:     0.0000      Y:     0.0000      Z:     1.7257     Total:     1.7257


  Saving occupied orbitals to File 100.

*** tstop() called on mac10147 at Tue Jun 14 09:57:12 2011
	user time   =       0.57 seconds =       0.01 minutes
	system time =       0.09 seconds =       0.00 minutes
	total time  =          0 seconds =       0.00 minutes

*** tstart() called on mac10147
*** at Tue Jun 14 09:57:12 2011

	There are an even number of electrons - assuming singlet.
	Specify the multiplicity with the MULTP option in the
	input if this is incorrect


         ---------------------------------------------------------
                                   SCF
            by Justin Turney, Rob Parrish, and Andy Simmonnett
                              RHF Reference
                        1 Threads,    256 MiB Core
         ---------------------------------------------------------

  ==> Geometry <==

    Molecular point group: c2v

    Geometry (in Angstrom), charge = 0, multiplicity = 1:

       Center              X                  Y                   Z       
    ------------   -----------------  -----------------  -----------------
           O          0.000000000000     0.000000000000    -0.070090363567
           H          0.000000000000     0.744980046917     0.556192466564
           H          0.000000000000    -0.744980046917     0.556192466564

    Number of unique atoms: 2

    Atoms equivalency:
       unique atom 0: 0 
       unique atom 1: 1 2 

  Running in c2v symmetry.

  Nuclear repulsion =    9.054665524492346

  Charge       = 0
  Multiplicity = 1
  Electrons    = 10
  Nalpha       = 5
  Nbeta        = 5

  ==> Algorithm <==

  SCF Algorithm Type is PK.
  DIIS disabled.
  MOM disabled.
  Guess Type is CORE.
  Energy threshold   = 1.00e-10
  Density threshold  = 1.00e-10
  Integral threshold = 0.00e+00

  ==> Primary Basis: STO-3G <==

  Basis Set
    Number of shells: 5
    Number of basis function: 7
    Number of Cartesian functions: 7
    Spherical Harmonics?: true
    Max angular momentum: 1

  ==> Pre-Iterations <==

  Minimum eigenvalue in the overlap matrix is 3.5258274105E-01.
  Using Symmetric Orthogonalization.
  SCF Guess: Core (One-Electron) Hamiltonian.

  Initial RHF energy:   -54.53068221964838

   -------------------------------------------------------
    Irrep   Nso     Nmo     Nalpha   Nbeta   Ndocc  Nsocc
   -------------------------------------------------------
     A1         4       4       3       3       3       0
     A2         0       0       0       0       0       0
     B1         1       1       1       1       1       0
     B2         2       2       1       1       1       0
   -------------------------------------------------------
    Total       7       7       5       5       5       0
   -------------------------------------------------------

  ==> Integral Setup <==

 MINTS: Wrapper to libmints.
   by Justin Turney

   Calculation information:
      Number of atoms:                   3
      Number of AO shells:               5
      Number of SO shells:               4
      Number of primitives:             15
      Number of atomic orbitals:         7
      Number of basis functions:         7

      Number of irreps:                  4
      Number of functions per irrep: [   4    0    1    2 ]

      Computing integrals...for (0 0 | 0 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(0 0 | 0 0)
for (1 0 | 0 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 0 | 0 0)
for (1 1 | 0 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 1 | 0 0)
for (1 0 | 1 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 0 | 1 0)
for (1 1 | 1 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 1 | 1 0)
for (1 1 | 1 1) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 1 | 1 1)
for (0 0 | 2 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (0 0 | 2 1) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (1 0 | 2 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (1 0 | 2 1) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (1 1 | 2 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (1 1 | 2 1) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (0 0 | 2 2) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(0 0 | 2 2)
for (2 0 | 2 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 0 | 2 0)
for (1 0 | 2 2) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 0 | 2 2)
for (2 1 | 2 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 1 | 2 0)
for (1 1 | 2 2) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 1 | 2 2)
for (2 1 | 2 1) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 1 | 2 1)
for (2 0 | 2 2) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (2 1 | 2 2) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (2 2 | 2 2) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 2 | 2 2)
for (3 0 | 0 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 0 | 0 0)
for (3 1 | 0 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 1 | 0 0)
for (3 0 | 1 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 0 | 1 0)
for (3 1 | 1 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 1 | 1 0)
for (3 0 | 1 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 0 | 1 1)
for (3 1 | 1 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 1 | 1 1)
for (0 0 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 4
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(0 0 | 2 3)
for (3 0 | 2 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 0 | 2 0)
for (1 0 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 4
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 0 | 2 3)
for (3 1 | 2 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 1 | 2 0)
for (3 0 | 2 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 0 | 2 1)
for (1 1 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 4
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 1 | 2 3)
for (3 1 | 2 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 1 | 2 1)
for (2 3 | 2 0) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 3 | 2 0)
for (3 0 | 2 2) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 0 | 2 2)
for (2 3 | 2 1) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 3 | 2 1)
for (3 1 | 2 2) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 1 | 2 2)
for (2 3 | 2 2) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 3 | 2 2)
for (3 3 | 0 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 1
	0
	(3 3 | 0 0)
	(3 4 | 0 0)
for (3 0 | 3 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 3
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 0 | 3 0)
	(3 0 | 4 0)
for (3 3 | 1 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 1
	0
	(3 3 | 1 0)
	(3 4 | 1 0)
for (3 1 | 3 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 3
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 1 | 3 0)
	(3 1 | 4 0)
for (3 3 | 1 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 1
	0
	(3 3 | 1 1)
	(3 4 | 1 1)
for (3 1 | 3 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 3
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 1 | 3 1)
	(3 1 | 4 1)
for (3 3 | 2 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 1
	0
	(3 3 | 2 0)
	(3 4 | 2 0)
for (3 0 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 3
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 0 | 2 3)
	(3 0 | 2 4)
for (3 3 | 2 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 1
	0
	(3 3 | 2 1)
	(3 4 | 2 1)
for (3 1 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 3
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 1 | 2 3)
	(3 1 | 2 4)
for (3 3 | 2 2) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 1
	0
	(3 3 | 2 2)
	(3 4 | 2 2)
for (2 3 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 3
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 3
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 2
	0
	1
	(2 3 | 2 3)
	(2 3 | 2 4)
for (3 3 | 3 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 3
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 3
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 3 | 3 0)
	(3 3 | 4 0)
	(3 4 | 3 0)
	(3 4 | 4 0)
for (3 3 | 3 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 3
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 3
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 3 | 3 1)
	(3 3 | 4 1)
	(3 4 | 3 1)
	(3 4 | 4 1)
for (3 3 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 3
	klstablizer: 3
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 3 | 2 3)
	(3 3 | 2 4)
	(3 4 | 2 3)
	(3 4 | 2 4)
for (3 3 | 3 3) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 3
	lstablizer: 3
	ijstablizer: 3
	klstablizer: 3
	R.size = 2
	0
	1
	S.size = 2
	0
	1
	T.size = 2
	0
	1
	(3 3 | 3 3)
	(3 3 | 3 4)
	(3 3 | 4 4)
	(3 3 | 4 3)
	(3 4 | 3 3)
	(3 4 | 3 4)
	(3 4 | 4 4)
	(3 4 | 4 3)
done

      Computed 138 non-zero integrals.

  ==> Iterations <==

                        Total Energy        Delta E      Density RMS

   @RHF iter   1:   -73.23319245258403   -1.87025e+01    0.00000e+00 
   @RHF iter   2:   -74.93732514735598   -1.70413e+00    4.03126e-01 
   @RHF iter   3:   -74.96411126654793   -2.67861e-02    5.19016e-02 
   @RHF iter   4:   -74.96515528500562   -1.04402e-03    8.91469e-03 
   @RHF iter   5:   -74.96527173844551   -1.16453e-04    3.38663e-03 
   @RHF iter   6:   -74.96529147026655   -1.97318e-05    1.31976e-03 
   @RHF iter   7:   -74.96529511973559   -3.64947e-06    5.57331e-04 
   @RHF iter   8:   -74.96529581172277   -6.91987e-07    2.38685e-04 
   @RHF iter   9:   -74.96529594389420   -1.32171e-07    1.03392e-04 
   @RHF iter  10:   -74.96529596919444   -2.53002e-08    4.49992e-05 
   @RHF iter  11:   -74.96529597404056   -4.84611e-09    1.96374e-05 
   @RHF iter  12:   -74.96529597496895   -9.28395e-10    8.58143e-06 
   @RHF iter  13:   -74.96529597514686   -1.77906e-10    3.75286e-06 
   @RHF iter  14:   -74.96529597518098   -3.41203e-11    1.64188e-06 
   @RHF iter  15:   -74.96529597518747   -6.49436e-12    7.18481e-07 
   @RHF iter  16:   -74.96529597518872   -1.25056e-12    3.14444e-07 
   @RHF iter  17:   -74.96529597518898   -2.55795e-13    1.37626e-07 
   @RHF iter  18:   -74.96529597518901   -2.84217e-14    6.02385e-08 
   @RHF iter  19:   -74.96529597518899    1.42109e-14    2.63667e-08 
   @RHF iter  20:   -74.96529597518901   -1.42109e-14    1.15410e-08 
   @RHF iter  21:   -74.96529597518905   -4.26326e-14    5.05164e-09 
   @RHF iter  22:   -74.96529597518898    7.10543e-14    2.21117e-09 
   @RHF iter  23:   -74.96529597518897    1.42109e-14    9.67866e-10 
   @RHF iter  24:   -74.96529597518902   -5.68434e-14    4.23649e-10 
   @RHF iter  25:   -74.96529597518899    2.84217e-14    1.85438e-10 

  ==> Post-Iterations <==

	Orbital Energies (a.u.)
	-----------------------

	Doubly Occupied:                                                      

	   1A1   -20.249641     2A1    -1.265619     1B2    -0.601732  
	   3A1    -0.462031     1B1    -0.393545  

	Virtual:                                                              

	   4A1     0.597465     2B2     0.710740  

	Final Occupation by Irrep:
	         A1    A2    B1    B2 
	DOCC [     3,    0,    1,    1 ]

  Energy converged.

  @RHF Final Energy:   -74.96529597518899

  ==> Properties <==

 OEPROP: One-electron properties/analyses.
  by Rob Parrish and Justin Turney.
  built on LIBMINTS.

 Dipole Moment: (a.u.)
     X:     0.0000      Y:     0.0000      Z:     0.6817     Total:     0.6817

 Dipole Moment: (Debye)
     X:     0.0000      Y:     0.0000      Z:     1.7328     Total:     1.7328


  Saving occupied orbitals to File 100.

*** tstop() called on mac10147 at Tue Jun 14 09:57:12 2011
	user time   =       0.62 seconds =       0.01 minutes
	system time =       0.10 seconds =       0.00 minutes
	total time  =          0 seconds =       0.00 minutes

*** tstart() called on mac10147
*** at Tue Jun 14 09:57:12 2011

	There are an even number of electrons - assuming singlet.
	Specify the multiplicity with the MULTP option in the
	input if this is incorrect


         ---------------------------------------------------------
                                   SCF
            by Justin Turney, Rob Parrish, and Andy Simmonnett
                              RHF Reference
                        1 Threads,    256 MiB Core
         ---------------------------------------------------------

  ==> Geometry <==

    Molecular point group: c2v

    Geometry (in Angstrom), charge = 0, multiplicity = 1:

       Center              X                  Y                   Z       
    ------------   -----------------  -----------------  -----------------
           O          0.000000000000     0.000000000000    -0.070924642734
           H          0.000000000000     0.744980046917     0.562812774464
           H          0.000000000000    -0.744980046917     0.562812774464

    Number of unique atoms: 2

    Atoms equivalency:
       unique atom 0: 0 
       unique atom 1: 1 2 

  Running in c2v symmetry.

  Nuclear repulsion =    9.011850432329460

  Charge       = 0
  Multiplicity = 1
  Electrons    = 10
  Nalpha       = 5
  Nbeta        = 5

  ==> Algorithm <==

  SCF Algorithm Type is PK.
  DIIS disabled.
  MOM disabled.
  Guess Type is CORE.
  Energy threshold   = 1.00e-10
  Density threshold  = 1.00e-10
  Integral threshold = 0.00e+00

  ==> Primary Basis: STO-3G <==

  Basis Set
    Number of shells: 5
    Number of basis function: 7
    Number of Cartesian functions: 7
    Spherical Harmonics?: true
    Max angular momentum: 1

  ==> Pre-Iterations <==

  Minimum eigenvalue in the overlap matrix is 3.5577022783E-01.
  Using Symmetric Orthogonalization.
  SCF Guess: Core (One-Electron) Hamiltonian.

  Initial RHF energy:   -54.54506552895592

   -------------------------------------------------------
    Irrep   Nso     Nmo     Nalpha   Nbeta   Ndocc  Nsocc
   -------------------------------------------------------
     A1         4       4       3       3       3       0
     A2         0       0       0       0       0       0
     B1         1       1       1       1       1       0
     B2         2       2       1       1       1       0
   -------------------------------------------------------
    Total       7       7       5       5       5       0
   -------------------------------------------------------

  ==> Integral Setup <==

 MINTS: Wrapper to libmints.
   by Justin Turney

   Calculation information:
      Number of atoms:                   3
      Number of AO shells:               5
      Number of SO shells:               4
      Number of primitives:             15
      Number of atomic orbitals:         7
      Number of basis functions:         7

      Number of irreps:                  4
      Number of functions per irrep: [   4    0    1    2 ]

      Computing integrals...for (0 0 | 0 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(0 0 | 0 0)
for (1 0 | 0 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 0 | 0 0)
for (1 1 | 0 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 1 | 0 0)
for (1 0 | 1 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 0 | 1 0)
for (1 1 | 1 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 1 | 1 0)
for (1 1 | 1 1) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 1 | 1 1)
for (0 0 | 2 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (0 0 | 2 1) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (1 0 | 2 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (1 0 | 2 1) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (1 1 | 2 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (1 1 | 2 1) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (0 0 | 2 2) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(0 0 | 2 2)
for (2 0 | 2 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 0 | 2 0)
for (1 0 | 2 2) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 0 | 2 2)
for (2 1 | 2 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 1 | 2 0)
for (1 1 | 2 2) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 1 | 2 2)
for (2 1 | 2 1) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 1 | 2 1)
for (2 0 | 2 2) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (2 1 | 2 2) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (2 2 | 2 2) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 2 | 2 2)
for (3 0 | 0 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 0 | 0 0)
for (3 1 | 0 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 1 | 0 0)
for (3 0 | 1 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 0 | 1 0)
for (3 1 | 1 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 1 | 1 0)
for (3 0 | 1 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 0 | 1 1)
for (3 1 | 1 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 1 | 1 1)
for (0 0 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 4
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(0 0 | 2 3)
for (3 0 | 2 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 0 | 2 0)
for (1 0 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 4
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 0 | 2 3)
for (3 1 | 2 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 1 | 2 0)
for (3 0 | 2 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 0 | 2 1)
for (1 1 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 4
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 1 | 2 3)
for (3 1 | 2 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 1 | 2 1)
for (2 3 | 2 0) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 3 | 2 0)
for (3 0 | 2 2) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 0 | 2 2)
for (2 3 | 2 1) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 3 | 2 1)
for (3 1 | 2 2) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 1 | 2 2)
for (2 3 | 2 2) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 3 | 2 2)
for (3 3 | 0 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 1
	0
	(3 3 | 0 0)
	(3 4 | 0 0)
for (3 0 | 3 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 3
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 0 | 3 0)
	(3 0 | 4 0)
for (3 3 | 1 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 1
	0
	(3 3 | 1 0)
	(3 4 | 1 0)
for (3 1 | 3 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 3
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 1 | 3 0)
	(3 1 | 4 0)
for (3 3 | 1 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 1
	0
	(3 3 | 1 1)
	(3 4 | 1 1)
for (3 1 | 3 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 3
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 1 | 3 1)
	(3 1 | 4 1)
for (3 3 | 2 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 1
	0
	(3 3 | 2 0)
	(3 4 | 2 0)
for (3 0 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 3
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 0 | 2 3)
	(3 0 | 2 4)
for (3 3 | 2 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 1
	0
	(3 3 | 2 1)
	(3 4 | 2 1)
for (3 1 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 3
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 1 | 2 3)
	(3 1 | 2 4)
for (3 3 | 2 2) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 1
	0
	(3 3 | 2 2)
	(3 4 | 2 2)
for (2 3 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 3
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 3
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 2
	0
	1
	(2 3 | 2 3)
	(2 3 | 2 4)
for (3 3 | 3 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 3
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 3
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 3 | 3 0)
	(3 3 | 4 0)
	(3 4 | 3 0)
	(3 4 | 4 0)
for (3 3 | 3 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 3
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 3
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 3 | 3 1)
	(3 3 | 4 1)
	(3 4 | 3 1)
	(3 4 | 4 1)
for (3 3 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 3
	klstablizer: 3
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 3 | 2 3)
	(3 3 | 2 4)
	(3 4 | 2 3)
	(3 4 | 2 4)
for (3 3 | 3 3) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 3
	lstablizer: 3
	ijstablizer: 3
	klstablizer: 3
	R.size = 2
	0
	1
	S.size = 2
	0
	1
	T.size = 2
	0
	1
	(3 3 | 3 3)
	(3 3 | 3 4)
	(3 3 | 4 4)
	(3 3 | 4 3)
	(3 4 | 3 3)
	(3 4 | 3 4)
	(3 4 | 4 4)
	(3 4 | 4 3)
done

      Computed 138 non-zero integrals.

  ==> Iterations <==

                        Total Energy        Delta E      Density RMS

   @RHF iter   1:   -73.23436480291659   -1.86893e+01    0.00000e+00 
   @RHF iter   2:   -74.93460822975786   -1.70024e+00    4.02965e-01 
   @RHF iter   3:   -74.96427087815229   -2.96626e-02    5.46067e-02 
   @RHF iter   4:   -74.96540812436652   -1.13725e-03    9.16562e-03 
   @RHF iter   5:   -74.96553065343994   -1.22529e-04    3.46588e-03 
   @RHF iter   6:   -74.96555141353181   -2.07601e-05    1.34446e-03 
   @RHF iter   7:   -74.96555527739355   -3.86386e-06    5.69959e-04 
   @RHF iter   8:   -74.96555601537071   -7.37977e-07    2.44841e-04 
   @RHF iter   9:   -74.96555615737395   -1.42003e-07    1.06448e-04 
   @RHF iter  10:   -74.96555618475881   -2.73849e-08    4.64989e-05 
   @RHF iter  11:   -74.96555619004326   -5.28445e-09    2.03672e-05 
   @RHF iter  12:   -74.96555619106320   -1.01994e-09    8.93345e-06 
   @RHF iter  13:   -74.96555619126005   -1.96849e-10    3.92134e-06 
   @RHF iter  14:   -74.96555619129802   -3.79714e-11    1.72197e-06 
   @RHF iter  15:   -74.96555619130538   -7.36122e-12    7.56334e-07 
   @RHF iter  16:   -74.96555619130686   -1.47793e-12    3.32242e-07 
   @RHF iter  17:   -74.96555619130709   -2.27374e-13    1.45956e-07 
   @RHF iter  18:   -74.96555619130712   -2.84217e-14    6.41220e-08 
   @RHF iter  19:   -74.96555619130714   -2.84217e-14    2.81709e-08 
   @RHF iter  20:   -74.96555619130714    0.00000e+00    1.23765e-08 
   @RHF iter  21:   -74.96555619130714    0.00000e+00    5.43749e-09 
   @RHF iter  22:   -74.96555619130714    0.00000e+00    2.38891e-09 
   @RHF iter  23:   -74.96555619130714    0.00000e+00    1.04955e-09 
   @RHF iter  24:   -74.96555619130717   -2.84217e-14    4.61111e-10 
   @RHF iter  25:   -74.96555619130717    0.00000e+00    2.02584e-10 

  ==> Post-Iterations <==

	Orbital Energies (a.u.)
	-----------------------

	Doubly Occupied:                                                      

	   1A1   -20.251021     2A1    -1.263944     1B2    -0.598106  
	   3A1    -0.462994     1B1    -0.393712  

	Virtual:                                                              

	   4A1     0.593784     2B2     0.703466  

	Final Occupation by Irrep:
	         A1    A2    B1    B2 
	DOCC [     3,    0,    1,    1 ]

  Energy converged.

  @RHF Final Energy:   -74.96555619130717

  ==> Properties <==

 OEPROP: One-electron properties/analyses.
  by Rob Parrish and Justin Turney.
  built on LIBMINTS.

 Dipole Moment: (a.u.)
     X:     0.0000      Y:     0.0000      Z:     0.6806     Total:     0.6806

 Dipole Moment: (Debye)
     X:     0.0000      Y:     0.0000      Z:     1.7299     Total:     1.7299


  Saving occupied orbitals to File 100.

*** tstop() called on mac10147 at Tue Jun 14 09:57:12 2011
	user time   =       0.67 seconds =       0.01 minutes
	system time =       0.11 seconds =       0.00 minutes
	total time  =          0 seconds =       0.00 minutes

*** tstart() called on mac10147
*** at Tue Jun 14 09:57:12 2011

	There are an even number of electrons - assuming singlet.
	Specify the multiplicity with the MULTP option in the
	input if this is incorrect


         ---------------------------------------------------------
                                   SCF
            by Justin Turney, Rob Parrish, and Andy Simmonnett
                              RHF Reference
                        1 Threads,    256 MiB Core
         ---------------------------------------------------------

  ==> Geometry <==

    Molecular point group: c2v

    Geometry (in Angstrom), charge = 0, multiplicity = 1:

       Center              X                  Y                   Z       
    ------------   -----------------  -----------------  -----------------
           O          0.000000000000     0.000000000000    -0.070507503150
           H          0.000000000000     0.744980046917     0.559502620514
           H          0.000000000000    -0.744980046917     0.559502620514

    Number of unique atoms: 2

    Atoms equivalency:
       unique atom 0: 0 
       unique atom 1: 1 2 

  Running in c2v symmetry.

  Nuclear repulsion =    9.033242090801121

  Charge       = 0
  Multiplicity = 1
  Electrons    = 10
  Nalpha       = 5
  Nbeta        = 5

  ==> Algorithm <==

  SCF Algorithm Type is PK.
  DIIS disabled.
  MOM disabled.
  Guess Type is CORE.
  Energy threshold   = 1.00e-10
  Density threshold  = 1.00e-10
  Integral threshold = 0.00e+00

  ==> Primary Basis: STO-3G <==

  Basis Set
    Number of shells: 5
    Number of basis function: 7
    Number of Cartesian functions: 7
    Spherical Harmonics?: true
    Max angular momentum: 1

  ==> Pre-Iterations <==

  Minimum eigenvalue in the overlap matrix is 3.5417232054E-01.
  Using Symmetric Orthogonalization.
  SCF Guess: Core (One-Electron) Hamiltonian.

  Initial RHF energy:   -54.53788489694350

   -------------------------------------------------------
    Irrep   Nso     Nmo     Nalpha   Nbeta   Ndocc  Nsocc
   -------------------------------------------------------
     A1         4       4       3       3       3       0
     A2         0       0       0       0       0       0
     B1         1       1       1       1       1       0
     B2         2       2       1       1       1       0
   -------------------------------------------------------
    Total       7       7       5       5       5       0
   -------------------------------------------------------

  ==> Integral Setup <==

 MINTS: Wrapper to libmints.
   by Justin Turney

   Calculation information:
      Number of atoms:                   3
      Number of AO shells:               5
      Number of SO shells:               4
      Number of primitives:             15
      Number of atomic orbitals:         7
      Number of basis functions:         7

      Number of irreps:                  4
      Number of functions per irrep: [   4    0    1    2 ]

      Computing integrals...for (0 0 | 0 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(0 0 | 0 0)
for (1 0 | 0 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 0 | 0 0)
for (1 1 | 0 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 1 | 0 0)
for (1 0 | 1 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 0 | 1 0)
for (1 1 | 1 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 1 | 1 0)
for (1 1 | 1 1) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 1 | 1 1)
for (0 0 | 2 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (0 0 | 2 1) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (1 0 | 2 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (1 0 | 2 1) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (1 1 | 2 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (1 1 | 2 1) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (0 0 | 2 2) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(0 0 | 2 2)
for (2 0 | 2 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 0 | 2 0)
for (1 0 | 2 2) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 0 | 2 2)
for (2 1 | 2 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 1 | 2 0)
for (1 1 | 2 2) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 1 | 2 2)
for (2 1 | 2 1) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 1 | 2 1)
for (2 0 | 2 2) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (2 1 | 2 2) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (2 2 | 2 2) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 2 | 2 2)
for (3 0 | 0 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 0 | 0 0)
for (3 1 | 0 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 1 | 0 0)
for (3 0 | 1 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 0 | 1 0)
for (3 1 | 1 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 1 | 1 0)
for (3 0 | 1 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 0 | 1 1)
for (3 1 | 1 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 1 | 1 1)
for (0 0 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 4
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(0 0 | 2 3)
for (3 0 | 2 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 0 | 2 0)
for (1 0 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 4
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 0 | 2 3)
for (3 1 | 2 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 1 | 2 0)
for (3 0 | 2 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 0 | 2 1)
for (1 1 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 4
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 1 | 2 3)
for (3 1 | 2 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 1 | 2 1)
for (2 3 | 2 0) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 3 | 2 0)
for (3 0 | 2 2) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 0 | 2 2)
for (2 3 | 2 1) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 3 | 2 1)
for (3 1 | 2 2) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 1 | 2 2)
for (2 3 | 2 2) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 3 | 2 2)
for (3 3 | 0 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 1
	0
	(3 3 | 0 0)
	(3 4 | 0 0)
for (3 0 | 3 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 3
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 0 | 3 0)
	(3 0 | 4 0)
for (3 3 | 1 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 1
	0
	(3 3 | 1 0)
	(3 4 | 1 0)
for (3 1 | 3 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 3
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 1 | 3 0)
	(3 1 | 4 0)
for (3 3 | 1 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 1
	0
	(3 3 | 1 1)
	(3 4 | 1 1)
for (3 1 | 3 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 3
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 1 | 3 1)
	(3 1 | 4 1)
for (3 3 | 2 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 1
	0
	(3 3 | 2 0)
	(3 4 | 2 0)
for (3 0 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 3
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 0 | 2 3)
	(3 0 | 2 4)
for (3 3 | 2 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 1
	0
	(3 3 | 2 1)
	(3 4 | 2 1)
for (3 1 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 3
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 1 | 2 3)
	(3 1 | 2 4)
for (3 3 | 2 2) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 1
	0
	(3 3 | 2 2)
	(3 4 | 2 2)
for (2 3 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 3
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 3
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 2
	0
	1
	(2 3 | 2 3)
	(2 3 | 2 4)
for (3 3 | 3 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 3
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 3
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 3 | 3 0)
	(3 3 | 4 0)
	(3 4 | 3 0)
	(3 4 | 4 0)
for (3 3 | 3 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 3
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 3
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 3 | 3 1)
	(3 3 | 4 1)
	(3 4 | 3 1)
	(3 4 | 4 1)
for (3 3 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 3
	klstablizer: 3
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 3 | 2 3)
	(3 3 | 2 4)
	(3 4 | 2 3)
	(3 4 | 2 4)
for (3 3 | 3 3) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 3
	lstablizer: 3
	ijstablizer: 3
	klstablizer: 3
	R.size = 2
	0
	1
	S.size = 2
	0
	1
	T.size = 2
	0
	1
	(3 3 | 3 3)
	(3 3 | 3 4)
	(3 3 | 4 4)
	(3 3 | 4 3)
	(3 4 | 3 3)
	(3 4 | 3 4)
	(3 4 | 4 4)
	(3 4 | 4 3)
done

      Computed 138 non-zero integrals.

  ==> Iterations <==

                        Total Energy        Delta E      Density RMS

   @RHF iter   1:   -73.23378482163169   -1.86959e+01    0.00000e+00 
   @RHF iter   2:   -74.93601033250128   -1.70223e+00    4.03040e-01 
   @RHF iter   3:   -74.96420888171062   -2.81985e-02    5.32457e-02 
   @RHF iter   4:   -74.96529832320772   -1.08944e-03    9.03816e-03 
   @RHF iter   5:   -74.96541778930495   -1.19466e-04    3.42611e-03 
   @RHF iter   6:   -74.96543803299451   -2.02437e-05    1.33221e-03 
   @RHF iter   7:   -74.96544178885868   -3.75586e-06    5.63659e-04 
   @RHF iter   8:   -74.96544250358828   -7.14730e-07    2.41763e-04 
   @RHF iter   9:   -74.96544264060570   -1.37017e-07    1.04915e-04 
   @RHF iter  10:   -74.96544266693029   -2.63246e-08    4.57450e-05 
   @RHF iter  11:   -74.96544267199123   -5.06094e-09    1.99996e-05 
   @RHF iter  12:   -74.96544267296434   -9.73117e-10    8.75579e-06 
   @RHF iter  13:   -74.96544267315149   -1.87143e-10    3.83617e-06 
   @RHF iter  14:   -74.96544267318748   -3.59961e-11    1.68142e-06 
   @RHF iter  15:   -74.96544267319443   -6.94911e-12    7.37142e-07 
   @RHF iter  16:   -74.96544267319575   -1.32161e-12    3.23205e-07 
   @RHF iter  17:   -74.96544267319601   -2.55795e-13    1.41721e-07 
   @RHF iter  18:   -74.96544267319604   -2.84217e-14    6.21451e-08 
   @RHF iter  19:   -74.96544267319609   -5.68434e-14    2.72514e-08 
   @RHF iter  20:   -74.96544267319607    2.84217e-14    1.19502e-08 
   @RHF iter  21:   -74.96544267319602    4.26326e-14    5.24037e-09 
   @RHF iter  22:   -74.96544267319605   -2.84217e-14    2.29801e-09 
   @RHF iter  23:   -74.96544267319608   -2.84217e-14    1.00772e-09 
   @RHF iter  24:   -74.96544267319604    4.26326e-14    4.41910e-10 
   @RHF iter  25:   -74.96544267319604    0.00000e+00    1.93788e-10 

  ==> Post-Iterations <==

	Orbital Energies (a.u.)
	-----------------------

	Doubly Occupied:                                                      

	   1A1   -20.250334     2A1    -1.264783     1B2    -0.599918  
	   3A1    -0.462517     1B1    -0.393629  

	Virtual:                                                              

	   4A1     0.595629     2B2     0.707096  

	Final Occupation by Irrep:
	         A1    A2    B1    B2 
	DOCC [     3,    0,    1,    1 ]

  Energy converged.

  @RHF Final Energy:   -74.96544267319604

  ==> Properties <==

 OEPROP: One-electron properties/analyses.
  by Rob Parrish and Justin Turney.
  built on LIBMINTS.

 Dipole Moment: (a.u.)
     X:     0.0000      Y:     0.0000      Z:     0.6812     Total:     0.6812

 Dipole Moment: (Debye)
     X:     0.0000      Y:     0.0000      Z:     1.7314     Total:     1.7314


  Saving occupied orbitals to File 100.

*** tstop() called on mac10147 at Tue Jun 14 09:57:12 2011
	user time   =       0.72 seconds =       0.01 minutes
	system time =       0.12 seconds =       0.00 minutes
	total time  =          0 seconds =       0.00 minutes
    -Cartesian displacement SALCs per irrep:
    Irrep  #SALCs
    -----  ------
      0       3
      1       1
      2       2
      3       3

	Finite difference computation of gradient using 3-point formula
	Check for precision!
	Energy without displacment:  -74.9654426732
	Gradients are in mass-weighted, symmetry-adapted cartesians (in au).
 Coord      Energy(-)        Energy(+)        Force
    0    -74.9654867622   -74.9653944028     0.0046179713
    1    -74.9652106182   -74.9656243534    -0.0206867592
    2    -74.9652959752   -74.9655561913    -0.0130108059


			----------------------------------
			 OPTKING: for geometry optimizations  
			  - R.A. King,  Bethel University   
			------------------------------------

	Prevous internal coordinate definitions found.
	---Fragment 1 Geometry and Gradient---
	 O           0.0000000000        0.0000000000       -0.1332398611
	 H           0.0000000000        1.4078081556        1.0573066427
	 H           0.0000000000       -1.4078081556        1.0573066427
	             0.0000000000        0.0000000000        0.0046179713
	             0.0000000000       -0.0146277477       -0.0092000291
	             0.0000000000        0.0146277477       -0.0092000291

	---Fragment 1 Intrafragment Coordinates---
	 * Coordinate *           * BOHR/RAD *       * ANG/DEG *
	 R(1,2)           =         1.843726	       0.975658
	 R(1,3)           =         1.843726	       0.975658
	 B(2,1,3)         =         1.737638	      99.559347

	Current energy   :       -74.9654426732

	Energy change for the previous step:
		Projected    :        -0.0016802244
		Actual       :        -0.0007801300

	Performing BFGS update with previous 1 gradient(s).
	Following RFO solution 0.
	Projected energy change by RFO approximation:        -0.0004800655

	Back-transformation to cartesian coordinates...
	Successfully converged to displaced geometry.

	---Internal Coordinate Step in ANG or DEG, aJ/ANG or AJ/DEG ---
	 ----------------------------------------------------------------------
	 Coordinate             Previous        Force       Change         New 
	 ----------             --------       ------       ------       ------
	 R(1,2)          =      0.975658     0.116524     0.013261     0.988918
	 R(1,3)          =      0.975658     0.116524     0.013261     0.988918
	 B(2,1,3)        =     99.559347     0.000832     1.317162   100.876509
	 ----------------------------------------------------------------------

	Convergence Check Cycle    2: (using internal coordinates in au)
	                    Actual        Tolerance     Converged?
	----------------------------------------------------------
	MAX Force           1.4e-02        3.0e-04          no
	Energy Change      -7.8e-04        1.0e-06          no
	MAX Displacement    2.5e-02        1.2e-03          no
	----------------------------------------------------------
	Writing optimization data to binary file.
	Structure for next step:
	Cartesian Geometry (au)
	    O     0.0000000000   0.0000000000  -0.1332063100
	    H     0.0000000000   1.4407185649   1.0570404027
	    H     0.0000000000  -1.4407185649   1.0570404027
			--------------------------
			 OPTKING Finished Execution 
			--------------------------
	Using finite-differences of energies to determine gradients.
	Generating geometries for use with 3-point formula.
	Displacement size will be 1.00e-02.
	Number of atoms is 3.
    -Cartesian displacement SALCs per irrep:
    Irrep  #SALCs
    -----  ------
      0       3
      1       1
      2       2
      3       3

	Number of SALC's is 3.
	irrep = 0, ncomponent = 1
		0: atom 0, direction 2, coef 1.000000
	irrep = 0, ncomponent = 2
		0: atom 1, direction 1, coef 0.707107
		1: atom 2, direction 1, coef -0.707107
	irrep = 0, ncomponent = 2
		0: atom 1, direction 2, coef 0.707107
		1: atom 2, direction 2, coef 0.707107
	Number of displacements (including reference) is 7.

*** tstart() called on mac10147
*** at Tue Jun 14 09:57:12 2011

	There are an even number of electrons - assuming singlet.
	Specify the multiplicity with the MULTP option in the
	input if this is incorrect


         ---------------------------------------------------------
                                   SCF
            by Justin Turney, Rob Parrish, and Andy Simmonnett
                              RHF Reference
                        1 Threads,    256 MiB Core
         ---------------------------------------------------------

  ==> Geometry <==

    Molecular point group: c2v

    Geometry (in Angstrom), charge = 0, multiplicity = 1:

       Center              X                  Y                   Z       
    ------------   -----------------  -----------------  -----------------
           O          0.000000000000     0.000000000000    -0.070637829231
           H          0.000000000000     0.762395486768     0.560536805250
           H          0.000000000000    -0.762395486768     0.560536805250

    Number of unique atoms: 2

    Atoms equivalency:
       unique atom 0: 0 
       unique atom 1: 1 2 

  Running in c2v symmetry.

  Nuclear repulsion =    8.901467406405470

  Charge       = 0
  Multiplicity = 1
  Electrons    = 10
  Nalpha       = 5
  Nbeta        = 5

  ==> Algorithm <==

  SCF Algorithm Type is PK.
  DIIS disabled.
  MOM disabled.
  Guess Type is CORE.
  Energy threshold   = 1.00e-10
  Density threshold  = 1.00e-10
  Integral threshold = 0.00e+00

  ==> Primary Basis: STO-3G <==

  Basis Set
    Number of shells: 5
    Number of basis function: 7
    Number of Cartesian functions: 7
    Spherical Harmonics?: true
    Max angular momentum: 1

  ==> Pre-Iterations <==

  Minimum eigenvalue in the overlap matrix is 3.6340104528E-01.
  Using Symmetric Orthogonalization.
  SCF Guess: Core (One-Electron) Hamiltonian.

  Initial RHF energy:   -54.58955821027212

   -------------------------------------------------------
    Irrep   Nso     Nmo     Nalpha   Nbeta   Ndocc  Nsocc
   -------------------------------------------------------
     A1         4       4       3       3       3       0
     A2         0       0       0       0       0       0
     B1         1       1       1       1       1       0
     B2         2       2       1       1       1       0
   -------------------------------------------------------
    Total       7       7       5       5       5       0
   -------------------------------------------------------

  ==> Integral Setup <==

 MINTS: Wrapper to libmints.
   by Justin Turney

   Calculation information:
      Number of atoms:                   3
      Number of AO shells:               5
      Number of SO shells:               4
      Number of primitives:             15
      Number of atomic orbitals:         7
      Number of basis functions:         7

      Number of irreps:                  4
      Number of functions per irrep: [   4    0    1    2 ]

      Computing integrals...for (0 0 | 0 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(0 0 | 0 0)
for (1 0 | 0 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 0 | 0 0)
for (1 1 | 0 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 1 | 0 0)
for (1 0 | 1 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 0 | 1 0)
for (1 1 | 1 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 1 | 1 0)
for (1 1 | 1 1) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 1 | 1 1)
for (0 0 | 2 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (0 0 | 2 1) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (1 0 | 2 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (1 0 | 2 1) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (1 1 | 2 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (1 1 | 2 1) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (0 0 | 2 2) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(0 0 | 2 2)
for (2 0 | 2 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 0 | 2 0)
for (1 0 | 2 2) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 0 | 2 2)
for (2 1 | 2 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 1 | 2 0)
for (1 1 | 2 2) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 1 | 2 2)
for (2 1 | 2 1) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 1 | 2 1)
for (2 0 | 2 2) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (2 1 | 2 2) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (2 2 | 2 2) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 2 | 2 2)
for (3 0 | 0 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 0 | 0 0)
for (3 1 | 0 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 1 | 0 0)
for (3 0 | 1 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 0 | 1 0)
for (3 1 | 1 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 1 | 1 0)
for (3 0 | 1 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 0 | 1 1)
for (3 1 | 1 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 1 | 1 1)
for (0 0 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 4
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(0 0 | 2 3)
for (3 0 | 2 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 0 | 2 0)
for (1 0 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 4
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 0 | 2 3)
for (3 1 | 2 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 1 | 2 0)
for (3 0 | 2 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 0 | 2 1)
for (1 1 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 4
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 1 | 2 3)
for (3 1 | 2 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 1 | 2 1)
for (2 3 | 2 0) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 3 | 2 0)
for (3 0 | 2 2) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 0 | 2 2)
for (2 3 | 2 1) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 3 | 2 1)
for (3 1 | 2 2) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 1 | 2 2)
for (2 3 | 2 2) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 3 | 2 2)
for (3 3 | 0 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 1
	0
	(3 3 | 0 0)
	(3 4 | 0 0)
for (3 0 | 3 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 3
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 0 | 3 0)
	(3 0 | 4 0)
for (3 3 | 1 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 1
	0
	(3 3 | 1 0)
	(3 4 | 1 0)
for (3 1 | 3 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 3
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 1 | 3 0)
	(3 1 | 4 0)
for (3 3 | 1 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 1
	0
	(3 3 | 1 1)
	(3 4 | 1 1)
for (3 1 | 3 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 3
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 1 | 3 1)
	(3 1 | 4 1)
for (3 3 | 2 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 1
	0
	(3 3 | 2 0)
	(3 4 | 2 0)
for (3 0 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 3
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 0 | 2 3)
	(3 0 | 2 4)
for (3 3 | 2 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 1
	0
	(3 3 | 2 1)
	(3 4 | 2 1)
for (3 1 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 3
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 1 | 2 3)
	(3 1 | 2 4)
for (3 3 | 2 2) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 1
	0
	(3 3 | 2 2)
	(3 4 | 2 2)
for (2 3 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 3
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 3
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 2
	0
	1
	(2 3 | 2 3)
	(2 3 | 2 4)
for (3 3 | 3 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 3
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 3
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 3 | 3 0)
	(3 3 | 4 0)
	(3 4 | 3 0)
	(3 4 | 4 0)
for (3 3 | 3 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 3
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 3
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 3 | 3 1)
	(3 3 | 4 1)
	(3 4 | 3 1)
	(3 4 | 4 1)
for (3 3 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 3
	klstablizer: 3
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 3 | 2 3)
	(3 3 | 2 4)
	(3 4 | 2 3)
	(3 4 | 2 4)
for (3 3 | 3 3) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 3
	lstablizer: 3
	ijstablizer: 3
	klstablizer: 3
	R.size = 2
	0
	1
	S.size = 2
	0
	1
	T.size = 2
	0
	1
	(3 3 | 3 3)
	(3 3 | 3 4)
	(3 3 | 4 4)
	(3 3 | 4 3)
	(3 4 | 3 3)
	(3 4 | 3 4)
	(3 4 | 4 4)
	(3 4 | 4 3)
done

      Computed 138 non-zero integrals.

  ==> Iterations <==

                        Total Energy        Delta E      Density RMS

   @RHF iter   1:   -73.24238998089383   -1.86528e+01    0.00000e+00 
   @RHF iter   2:   -74.93194749218959   -1.68956e+00    4.01112e-01 
   @RHF iter   3:   -74.96444079914384   -3.24933e-02    5.68979e-02 
   @RHF iter   4:   -74.96570866553762   -1.26787e-03    9.53247e-03 
   @RHF iter   5:   -74.96584659613733   -1.37931e-04    3.65219e-03 
   @RHF iter   6:   -74.96587052396332   -2.39278e-05    1.42936e-03 
   @RHF iter   7:   -74.96587507244271   -4.54848e-06    6.13749e-04 
   @RHF iter   8:   -74.96587595807169   -8.85629e-07    2.66351e-04 
   @RHF iter   9:   -74.96587613167617   -1.73604e-07    1.16954e-04 
   @RHF iter  10:   -74.96587616577378   -3.40976e-08    5.15746e-05 
   @RHF iter  11:   -74.96587617247476   -6.70099e-09    2.28021e-05 
   @RHF iter  12:   -74.96587617379187   -1.31710e-09    1.00941e-05 
   @RHF iter  13:   -74.96587617405073   -2.58865e-10    4.47161e-06 
   @RHF iter  14:   -74.96587617410165   -5.09175e-11    1.98164e-06 
   @RHF iter  15:   -74.96587617411164   -9.99023e-12    8.78362e-07 
   @RHF iter  16:   -74.96587617411362   -1.97531e-12    3.89378e-07 
   @RHF iter  17:   -74.96587617411403   -4.12115e-13    1.72622e-07 
   @RHF iter  18:   -74.96587617411403    0.00000e+00    7.65303e-08 
   @RHF iter  19:   -74.96587617411404   -1.42109e-14    3.39297e-08 
   @RHF iter  20:   -74.96587617411409   -4.26326e-14    1.50429e-08 
   @RHF iter  21:   -74.96587617411410   -1.42109e-14    6.66935e-09 
   @RHF iter  22:   -74.96587617411406    4.26326e-14    2.95691e-09 
   @RHF iter  23:   -74.96587617411410   -4.26326e-14    1.31097e-09 
   @RHF iter  24:   -74.96587617411406    4.26326e-14    5.81229e-10 
   @RHF iter  25:   -74.96587617411410   -4.26326e-14    2.57694e-10 
   @RHF iter  26:   -74.96587617411411   -1.42109e-14    1.14251e-10 

  ==> Post-Iterations <==

	Orbital Energies (a.u.)
	-----------------------

	Doubly Occupied:                                                      

	   1A1   -20.250754     2A1    -1.256599     1B2    -0.594939  
	   3A1    -0.457981     1B1    -0.392112  

	Virtual:                                                              

	   4A1     0.580333     2B2     0.694205  

	Final Occupation by Irrep:
	         A1    A2    B1    B2 
	DOCC [     3,    0,    1,    1 ]

  Energy converged.

  @RHF Final Energy:   -74.96587617411411

  ==> Properties <==

 OEPROP: One-electron properties/analyses.
  by Rob Parrish and Justin Turney.
  built on LIBMINTS.

 Dipole Moment: (a.u.)
     X:     0.0000      Y:     0.0000      Z:     0.6706     Total:     0.6706

 Dipole Moment: (Debye)
     X:     0.0000      Y:     0.0000      Z:     1.7045     Total:     1.7045


  Saving occupied orbitals to File 100.

*** tstop() called on mac10147 at Tue Jun 14 09:57:12 2011
	user time   =       0.78 seconds =       0.01 minutes
	system time =       0.13 seconds =       0.00 minutes
	total time  =          0 seconds =       0.00 minutes

*** tstart() called on mac10147
*** at Tue Jun 14 09:57:12 2011

	There are an even number of electrons - assuming singlet.
	Specify the multiplicity with the MULTP option in the
	input if this is incorrect


         ---------------------------------------------------------
                                   SCF
            by Justin Turney, Rob Parrish, and Andy Simmonnett
                              RHF Reference
                        1 Threads,    256 MiB Core
         ---------------------------------------------------------

  ==> Geometry <==

    Molecular point group: c2v

    Geometry (in Angstrom), charge = 0, multiplicity = 1:

       Center              X                  Y                   Z       
    ------------   -----------------  -----------------  -----------------
           O          0.000000000000     0.000000000000    -0.070341668138
           H          0.000000000000     0.762395486768     0.558186659518
           H          0.000000000000    -0.762395486768     0.558186659518

    Number of unique atoms: 2

    Atoms equivalency:
       unique atom 0: 0 
       unique atom 1: 1 2 

  Running in c2v symmetry.

  Nuclear repulsion =    8.916059501076720

  Charge       = 0
  Multiplicity = 1
  Electrons    = 10
  Nalpha       = 5
  Nbeta        = 5

  ==> Algorithm <==

  SCF Algorithm Type is PK.
  DIIS disabled.
  MOM disabled.
  Guess Type is CORE.
  Energy threshold   = 1.00e-10
  Density threshold  = 1.00e-10
  Integral threshold = 0.00e+00

  ==> Primary Basis: STO-3G <==

  Basis Set
    Number of shells: 5
    Number of basis function: 7
    Number of Cartesian functions: 7
    Spherical Harmonics?: true
    Max angular momentum: 1

  ==> Pre-Iterations <==

  Minimum eigenvalue in the overlap matrix is 3.6229722137E-01.
  Using Symmetric Orthogonalization.
  SCF Guess: Core (One-Electron) Hamiltonian.

  Initial RHF energy:   -54.58469734219413

   -------------------------------------------------------
    Irrep   Nso     Nmo     Nalpha   Nbeta   Ndocc  Nsocc
   -------------------------------------------------------
     A1         4       4       3       3       3       0
     A2         0       0       0       0       0       0
     B1         1       1       1       1       1       0
     B2         2       2       1       1       1       0
   -------------------------------------------------------
    Total       7       7       5       5       5       0
   -------------------------------------------------------

  ==> Integral Setup <==

 MINTS: Wrapper to libmints.
   by Justin Turney

   Calculation information:
      Number of atoms:                   3
      Number of AO shells:               5
      Number of SO shells:               4
      Number of primitives:             15
      Number of atomic orbitals:         7
      Number of basis functions:         7

      Number of irreps:                  4
      Number of functions per irrep: [   4    0    1    2 ]

      Computing integrals...for (0 0 | 0 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(0 0 | 0 0)
for (1 0 | 0 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 0 | 0 0)
for (1 1 | 0 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 1 | 0 0)
for (1 0 | 1 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 0 | 1 0)
for (1 1 | 1 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 1 | 1 0)
for (1 1 | 1 1) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 1 | 1 1)
for (0 0 | 2 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (0 0 | 2 1) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (1 0 | 2 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (1 0 | 2 1) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (1 1 | 2 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (1 1 | 2 1) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (0 0 | 2 2) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(0 0 | 2 2)
for (2 0 | 2 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 0 | 2 0)
for (1 0 | 2 2) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 0 | 2 2)
for (2 1 | 2 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 1 | 2 0)
for (1 1 | 2 2) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 1 | 2 2)
for (2 1 | 2 1) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 1 | 2 1)
for (2 0 | 2 2) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (2 1 | 2 2) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (2 2 | 2 2) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 2 | 2 2)
for (3 0 | 0 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 0 | 0 0)
for (3 1 | 0 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 1 | 0 0)
for (3 0 | 1 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 0 | 1 0)
for (3 1 | 1 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 1 | 1 0)
for (3 0 | 1 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 0 | 1 1)
for (3 1 | 1 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 1 | 1 1)
for (0 0 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 4
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(0 0 | 2 3)
for (3 0 | 2 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 0 | 2 0)
for (1 0 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 4
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 0 | 2 3)
for (3 1 | 2 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 1 | 2 0)
for (3 0 | 2 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 0 | 2 1)
for (1 1 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 4
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 1 | 2 3)
for (3 1 | 2 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 1 | 2 1)
for (2 3 | 2 0) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 3 | 2 0)
for (3 0 | 2 2) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 0 | 2 2)
for (2 3 | 2 1) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 3 | 2 1)
for (3 1 | 2 2) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 1 | 2 2)
for (2 3 | 2 2) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 3 | 2 2)
for (3 3 | 0 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 1
	0
	(3 3 | 0 0)
	(3 4 | 0 0)
for (3 0 | 3 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 3
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 0 | 3 0)
	(3 0 | 4 0)
for (3 3 | 1 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 1
	0
	(3 3 | 1 0)
	(3 4 | 1 0)
for (3 1 | 3 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 3
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 1 | 3 0)
	(3 1 | 4 0)
for (3 3 | 1 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 1
	0
	(3 3 | 1 1)
	(3 4 | 1 1)
for (3 1 | 3 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 3
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 1 | 3 1)
	(3 1 | 4 1)
for (3 3 | 2 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 1
	0
	(3 3 | 2 0)
	(3 4 | 2 0)
for (3 0 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 3
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 0 | 2 3)
	(3 0 | 2 4)
for (3 3 | 2 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 1
	0
	(3 3 | 2 1)
	(3 4 | 2 1)
for (3 1 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 3
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 1 | 2 3)
	(3 1 | 2 4)
for (3 3 | 2 2) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 1
	0
	(3 3 | 2 2)
	(3 4 | 2 2)
for (2 3 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 3
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 3
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 2
	0
	1
	(2 3 | 2 3)
	(2 3 | 2 4)
for (3 3 | 3 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 3
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 3
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 3 | 3 0)
	(3 3 | 4 0)
	(3 4 | 3 0)
	(3 4 | 4 0)
for (3 3 | 3 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 3
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 3
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 3 | 3 1)
	(3 3 | 4 1)
	(3 4 | 3 1)
	(3 4 | 4 1)
for (3 3 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 3
	klstablizer: 3
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 3 | 2 3)
	(3 3 | 2 4)
	(3 4 | 2 3)
	(3 4 | 2 4)
for (3 3 | 3 3) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 3
	lstablizer: 3
	ijstablizer: 3
	klstablizer: 3
	R.size = 2
	0
	1
	S.size = 2
	0
	1
	T.size = 2
	0
	1
	(3 3 | 3 3)
	(3 3 | 3 4)
	(3 3 | 4 4)
	(3 3 | 4 3)
	(3 4 | 3 3)
	(3 4 | 3 4)
	(3 4 | 4 4)
	(3 4 | 4 3)
done

      Computed 138 non-zero integrals.

  ==> Iterations <==

                        Total Energy        Delta E      Density RMS

   @RHF iter   1:   -73.24202650102573   -1.86573e+01    0.00000e+00 
   @RHF iter   2:   -74.93307591740249   -1.69105e+00    4.01131e-01 
   @RHF iter   3:   -74.96446400490186   -3.13881e-02    5.59182e-02 
   @RHF iter   4:   -74.96569369255793   -1.22969e-03    9.43501e-03 
   @RHF iter   5:   -74.96582920397572   -1.35511e-04    3.62254e-03 
   @RHF iter   6:   -74.96585272162349   -2.35176e-05    1.42053e-03 
   @RHF iter   7:   -74.96585718285804   -4.46123e-06    6.09118e-04 
   @RHF iter   8:   -74.96585804938061   -8.66523e-07    2.64077e-04 
   @RHF iter   9:   -74.96585821881685   -1.69436e-07    1.15811e-04 
   @RHF iter  10:   -74.96585825201284   -3.31960e-08    5.10082e-05 
   @RHF iter  11:   -74.96585825852024   -6.50741e-09    2.25235e-05 
   @RHF iter  12:   -74.96585825979615   -1.27591e-09    9.95831e-06 
   @RHF iter  13:   -74.96585826004630   -2.50154e-10    4.40595e-06 
   @RHF iter  14:   -74.96585826009536   -4.90559e-11    1.95010e-06 
   @RHF iter  15:   -74.96585826010499   -9.63496e-12    8.63304e-07 
   @RHF iter  16:   -74.96585826010686   -1.86162e-12    3.82225e-07 
   @RHF iter  17:   -74.96585826010725   -3.97904e-13    1.69239e-07 
   @RHF iter  18:   -74.96585826010731   -5.68434e-14    7.49370e-08 
   @RHF iter  19:   -74.96585826010731    0.00000e+00    3.31818e-08 
   @RHF iter  20:   -74.96585826010732   -1.42109e-14    1.46929e-08 
   @RHF iter  21:   -74.96585826010730    2.84217e-14    6.50608e-09 
   @RHF iter  22:   -74.96585826010732   -2.84217e-14    2.88092e-09 
   @RHF iter  23:   -74.96585826010732    0.00000e+00    1.27569e-09 
   @RHF iter  24:   -74.96585826010730    2.84217e-14    5.64883e-10 
   @RHF iter  25:   -74.96585826010734   -4.26326e-14    2.50132e-10 
   @RHF iter  26:   -74.96585826010732    1.42109e-14    1.10761e-10 

  ==> Post-Iterations <==

	Orbital Energies (a.u.)
	-----------------------

	Doubly Occupied:                                                      

	   1A1   -20.250243     2A1    -1.257147     1B2    -0.596183  
	   3A1    -0.457635     1B1    -0.392031  

	Virtual:                                                              

	   4A1     0.581562     2B2     0.696737  

	Final Occupation by Irrep:
	         A1    A2    B1    B2 
	DOCC [     3,    0,    1,    1 ]

  Energy converged.

  @RHF Final Energy:   -74.96585826010732

  ==> Properties <==

 OEPROP: One-electron properties/analyses.
  by Rob Parrish and Justin Turney.
  built on LIBMINTS.

 Dipole Moment: (a.u.)
     X:     0.0000      Y:     0.0000      Z:     0.6710     Total:     0.6710

 Dipole Moment: (Debye)
     X:     0.0000      Y:     0.0000      Z:     1.7055     Total:     1.7055


  Saving occupied orbitals to File 100.

*** tstop() called on mac10147 at Tue Jun 14 09:57:12 2011
	user time   =       0.82 seconds =       0.01 minutes
	system time =       0.14 seconds =       0.00 minutes
	total time  =          0 seconds =       0.00 minutes

*** tstart() called on mac10147
*** at Tue Jun 14 09:57:12 2011

	There are an even number of electrons - assuming singlet.
	Specify the multiplicity with the MULTP option in the
	input if this is incorrect


         ---------------------------------------------------------
                                   SCF
            by Justin Turney, Rob Parrish, and Andy Simmonnett
                              RHF Reference
                        1 Threads,    256 MiB Core
         ---------------------------------------------------------

  ==> Geometry <==

    Molecular point group: c2v

    Geometry (in Angstrom), charge = 0, multiplicity = 1:

       Center              X                  Y                   Z       
    ------------   -----------------  -----------------  -----------------
           O          0.000000000000     0.000000000000    -0.070489748684
           H          0.000000000000     0.758668193235     0.559361732384
           H          0.000000000000    -0.758668193235     0.559361732384

    Number of unique atoms: 2

    Atoms equivalency:
       unique atom 0: 0 
       unique atom 1: 1 2 

  Running in c2v symmetry.

  Nuclear repulsion =    8.935392328637098

  Charge       = 0
  Multiplicity = 1
  Electrons    = 10
  Nalpha       = 5
  Nbeta        = 5

  ==> Algorithm <==

  SCF Algorithm Type is PK.
  DIIS disabled.
  MOM disabled.
  Guess Type is CORE.
  Energy threshold   = 1.00e-10
  Density threshold  = 1.00e-10
  Integral threshold = 0.00e+00

  ==> Primary Basis: STO-3G <==

  Basis Set
    Number of shells: 5
    Number of basis function: 7
    Number of Cartesian functions: 7
    Spherical Harmonics?: true
    Max angular momentum: 1

  ==> Pre-Iterations <==

  Minimum eigenvalue in the overlap matrix is 3.6096835920E-01.
  Using Symmetric Orthogonalization.
  SCF Guess: Core (One-Electron) Hamiltonian.

  Initial RHF energy:   -54.57665701482170

   -------------------------------------------------------
    Irrep   Nso     Nmo     Nalpha   Nbeta   Ndocc  Nsocc
   -------------------------------------------------------
     A1         4       4       3       3       3       0
     A2         0       0       0       0       0       0
     B1         1       1       1       1       1       0
     B2         2       2       1       1       1       0
   -------------------------------------------------------
    Total       7       7       5       5       5       0
   -------------------------------------------------------

  ==> Integral Setup <==

 MINTS: Wrapper to libmints.
   by Justin Turney

   Calculation information:
      Number of atoms:                   3
      Number of AO shells:               5
      Number of SO shells:               4
      Number of primitives:             15
      Number of atomic orbitals:         7
      Number of basis functions:         7

      Number of irreps:                  4
      Number of functions per irrep: [   4    0    1    2 ]

      Computing integrals...for (0 0 | 0 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(0 0 | 0 0)
for (1 0 | 0 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 0 | 0 0)
for (1 1 | 0 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 1 | 0 0)
for (1 0 | 1 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 0 | 1 0)
for (1 1 | 1 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 1 | 1 0)
for (1 1 | 1 1) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 1 | 1 1)
for (0 0 | 2 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (0 0 | 2 1) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (1 0 | 2 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (1 0 | 2 1) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (1 1 | 2 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (1 1 | 2 1) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (0 0 | 2 2) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(0 0 | 2 2)
for (2 0 | 2 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 0 | 2 0)
for (1 0 | 2 2) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 0 | 2 2)
for (2 1 | 2 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 1 | 2 0)
for (1 1 | 2 2) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 1 | 2 2)
for (2 1 | 2 1) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 1 | 2 1)
for (2 0 | 2 2) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (2 1 | 2 2) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (2 2 | 2 2) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 2 | 2 2)
for (3 0 | 0 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 0 | 0 0)
for (3 1 | 0 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 1 | 0 0)
for (3 0 | 1 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 0 | 1 0)
for (3 1 | 1 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 1 | 1 0)
for (3 0 | 1 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 0 | 1 1)
for (3 1 | 1 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 1 | 1 1)
for (0 0 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 4
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(0 0 | 2 3)
for (3 0 | 2 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 0 | 2 0)
for (1 0 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 4
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 0 | 2 3)
for (3 1 | 2 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 1 | 2 0)
for (3 0 | 2 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 0 | 2 1)
for (1 1 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 4
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 1 | 2 3)
for (3 1 | 2 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 1 | 2 1)
for (2 3 | 2 0) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 3 | 2 0)
for (3 0 | 2 2) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 0 | 2 2)
for (2 3 | 2 1) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 3 | 2 1)
for (3 1 | 2 2) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 1 | 2 2)
for (2 3 | 2 2) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 3 | 2 2)
for (3 3 | 0 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 1
	0
	(3 3 | 0 0)
	(3 4 | 0 0)
for (3 0 | 3 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 3
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 0 | 3 0)
	(3 0 | 4 0)
for (3 3 | 1 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 1
	0
	(3 3 | 1 0)
	(3 4 | 1 0)
for (3 1 | 3 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 3
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 1 | 3 0)
	(3 1 | 4 0)
for (3 3 | 1 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 1
	0
	(3 3 | 1 1)
	(3 4 | 1 1)
for (3 1 | 3 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 3
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 1 | 3 1)
	(3 1 | 4 1)
for (3 3 | 2 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 1
	0
	(3 3 | 2 0)
	(3 4 | 2 0)
for (3 0 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 3
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 0 | 2 3)
	(3 0 | 2 4)
for (3 3 | 2 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 1
	0
	(3 3 | 2 1)
	(3 4 | 2 1)
for (3 1 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 3
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 1 | 2 3)
	(3 1 | 2 4)
for (3 3 | 2 2) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 1
	0
	(3 3 | 2 2)
	(3 4 | 2 2)
for (2 3 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 3
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 3
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 2
	0
	1
	(2 3 | 2 3)
	(2 3 | 2 4)
for (3 3 | 3 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 3
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 3
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 3 | 3 0)
	(3 3 | 4 0)
	(3 4 | 3 0)
	(3 4 | 4 0)
for (3 3 | 3 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 3
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 3
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 3 | 3 1)
	(3 3 | 4 1)
	(3 4 | 3 1)
	(3 4 | 4 1)
for (3 3 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 3
	klstablizer: 3
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 3 | 2 3)
	(3 3 | 2 4)
	(3 4 | 2 3)
	(3 4 | 2 4)
for (3 3 | 3 3) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 3
	lstablizer: 3
	ijstablizer: 3
	klstablizer: 3
	R.size = 2
	0
	1
	S.size = 2
	0
	1
	T.size = 2
	0
	1
	(3 3 | 3 3)
	(3 3 | 3 4)
	(3 3 | 4 4)
	(3 3 | 4 3)
	(3 4 | 3 3)
	(3 4 | 3 4)
	(3 4 | 4 4)
	(3 4 | 4 3)
done

      Computed 138 non-zero integrals.

  ==> Iterations <==

                        Total Energy        Delta E      Density RMS

   @RHF iter   1:   -73.24043734478433   -1.86638e+01    0.00000e+00 
   @RHF iter   2:   -74.93341881889042   -1.69298e+00    4.01511e-01 
   @RHF iter   3:   -74.96449368317703   -3.10749e-02    5.56892e-02 
   @RHF iter   4:   -74.96570484045370   -1.21116e-03    9.38072e-03 
   @RHF iter   5:   -74.96583755621384   -1.32716e-04    3.58942e-03 
   @RHF iter   6:   -74.96586046976786   -2.29136e-05    1.40411e-03 
   @RHF iter   7:   -74.96586479913491   -4.32937e-06    6.00645e-04 
   @RHF iter   8:   -74.96586563711189   -8.37977e-07    2.59903e-04 
   @RHF iter   9:   -74.96586580042181   -1.63310e-07    1.13775e-04 
   @RHF iter  10:   -74.96586583231273   -3.18909e-08    5.00256e-05 
   @RHF iter  11:   -74.96586583854395   -6.23122e-09    2.20526e-05 
   @RHF iter  12:   -74.96586583976169   -1.21774e-09    9.73402e-06 
   @RHF iter  13:   -74.96586583999969   -2.38003e-10    4.29965e-06 
   @RHF iter  14:   -74.96586584004625   -4.65548e-11    1.89994e-06 
   @RHF iter  15:   -74.96586584005532   -9.06653e-12    8.39727e-07 
   @RHF iter  16:   -74.96586584005709   -1.77636e-12    3.71180e-07 
   @RHF iter  17:   -74.96586584005742   -3.26850e-13    1.64081e-07 
   @RHF iter  18:   -74.96586584005753   -1.13687e-13    7.25350e-08 
   @RHF iter  19:   -74.96586584005750    2.84217e-14    3.20660e-08 
   @RHF iter  20:   -74.96586584005755   -4.26326e-14    1.41757e-08 
   @RHF iter  21:   -74.96586584005748    7.10543e-14    6.26685e-09 
   @RHF iter  22:   -74.96586584005750   -2.84217e-14    2.77047e-09 
   @RHF iter  23:   -74.96586584005746    4.26326e-14    1.22478e-09 
   @RHF iter  24:   -74.96586584005748   -1.42109e-14    5.41460e-10 
   @RHF iter  25:   -74.96586584005749   -1.42109e-14    2.39370e-10 
   @RHF iter  26:   -74.96586584005752   -2.84217e-14    1.05822e-10 

  ==> Post-Iterations <==

	Orbital Energies (a.u.)
	-----------------------

	Doubly Occupied:                                                      

	   1A1   -20.250453     2A1    -1.258547     1B2    -0.596525  
	   3A1    -0.458807     1B1    -0.392397  

	Virtual:                                                              

	   4A1     0.584113     2B2     0.697982  

	Final Occupation by Irrep:
	         A1    A2    B1    B2 
	DOCC [     3,    0,    1,    1 ]

  Energy converged.

  @RHF Final Energy:   -74.96586584005752

  ==> Properties <==

 OEPROP: One-electron properties/analyses.
  by Rob Parrish and Justin Turney.
  built on LIBMINTS.

 Dipole Moment: (a.u.)
     X:     0.0000      Y:     0.0000      Z:     0.6730     Total:     0.6730

 Dipole Moment: (Debye)
     X:     0.0000      Y:     0.0000      Z:     1.7106     Total:     1.7106


  Saving occupied orbitals to File 100.

*** tstop() called on mac10147 at Tue Jun 14 09:57:12 2011
	user time   =       0.87 seconds =       0.01 minutes
	system time =       0.14 seconds =       0.00 minutes
	total time  =          0 seconds =       0.00 minutes

*** tstart() called on mac10147
*** at Tue Jun 14 09:57:12 2011

	There are an even number of electrons - assuming singlet.
	Specify the multiplicity with the MULTP option in the
	input if this is incorrect


         ---------------------------------------------------------
                                   SCF
            by Justin Turney, Rob Parrish, and Andy Simmonnett
                              RHF Reference
                        1 Threads,    256 MiB Core
         ---------------------------------------------------------

  ==> Geometry <==

    Molecular point group: c2v

    Geometry (in Angstrom), charge = 0, multiplicity = 1:

       Center              X                  Y                   Z       
    ------------   -----------------  -----------------  -----------------
           O          0.000000000000     0.000000000000    -0.070489748684
           H          0.000000000000     0.766122780302     0.559361732384
           H          0.000000000000    -0.766122780302     0.559361732384

    Number of unique atoms: 2

    Atoms equivalency:
       unique atom 0: 0 
       unique atom 1: 1 2 

  Running in c2v symmetry.

  Nuclear repulsion =    8.882243080883480

  Charge       = 0
  Multiplicity = 1
  Electrons    = 10
  Nalpha       = 5
  Nbeta        = 5

  ==> Algorithm <==

  SCF Algorithm Type is PK.
  DIIS disabled.
  MOM disabled.
  Guess Type is CORE.
  Energy threshold   = 1.00e-10
  Density threshold  = 1.00e-10
  Integral threshold = 0.00e+00

  ==> Primary Basis: STO-3G <==

  Basis Set
    Number of shells: 5
    Number of basis function: 7
    Number of Cartesian functions: 7
    Spherical Harmonics?: true
    Max angular momentum: 1

  ==> Pre-Iterations <==

  Minimum eigenvalue in the overlap matrix is 3.6473340182E-01.
  Using Symmetric Orthogonalization.
  SCF Guess: Core (One-Electron) Hamiltonian.

  Initial RHF energy:   -54.59752977605365

   -------------------------------------------------------
    Irrep   Nso     Nmo     Nalpha   Nbeta   Ndocc  Nsocc
   -------------------------------------------------------
     A1         4       4       3       3       3       0
     A2         0       0       0       0       0       0
     B1         1       1       1       1       1       0
     B2         2       2       1       1       1       0
   -------------------------------------------------------
    Total       7       7       5       5       5       0
   -------------------------------------------------------

  ==> Integral Setup <==

 MINTS: Wrapper to libmints.
   by Justin Turney

   Calculation information:
      Number of atoms:                   3
      Number of AO shells:               5
      Number of SO shells:               4
      Number of primitives:             15
      Number of atomic orbitals:         7
      Number of basis functions:         7

      Number of irreps:                  4
      Number of functions per irrep: [   4    0    1    2 ]

      Computing integrals...for (0 0 | 0 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(0 0 | 0 0)
for (1 0 | 0 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 0 | 0 0)
for (1 1 | 0 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 1 | 0 0)
for (1 0 | 1 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 0 | 1 0)
for (1 1 | 1 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 1 | 1 0)
for (1 1 | 1 1) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 1 | 1 1)
for (0 0 | 2 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (0 0 | 2 1) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (1 0 | 2 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (1 0 | 2 1) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (1 1 | 2 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (1 1 | 2 1) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (0 0 | 2 2) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(0 0 | 2 2)
for (2 0 | 2 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 0 | 2 0)
for (1 0 | 2 2) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 0 | 2 2)
for (2 1 | 2 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 1 | 2 0)
for (1 1 | 2 2) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 1 | 2 2)
for (2 1 | 2 1) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 1 | 2 1)
for (2 0 | 2 2) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (2 1 | 2 2) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (2 2 | 2 2) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 2 | 2 2)
for (3 0 | 0 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 0 | 0 0)
for (3 1 | 0 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 1 | 0 0)
for (3 0 | 1 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 0 | 1 0)
for (3 1 | 1 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 1 | 1 0)
for (3 0 | 1 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 0 | 1 1)
for (3 1 | 1 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 1 | 1 1)
for (0 0 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 4
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(0 0 | 2 3)
for (3 0 | 2 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 0 | 2 0)
for (1 0 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 4
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 0 | 2 3)
for (3 1 | 2 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 1 | 2 0)
for (3 0 | 2 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 0 | 2 1)
for (1 1 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 4
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 1 | 2 3)
for (3 1 | 2 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 1 | 2 1)
for (2 3 | 2 0) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 3 | 2 0)
for (3 0 | 2 2) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 0 | 2 2)
for (2 3 | 2 1) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 3 | 2 1)
for (3 1 | 2 2) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 1 | 2 2)
for (2 3 | 2 2) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 3 | 2 2)
for (3 3 | 0 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 1
	0
	(3 3 | 0 0)
	(3 4 | 0 0)
for (3 0 | 3 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 3
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 0 | 3 0)
	(3 0 | 4 0)
for (3 3 | 1 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 1
	0
	(3 3 | 1 0)
	(3 4 | 1 0)
for (3 1 | 3 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 3
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 1 | 3 0)
	(3 1 | 4 0)
for (3 3 | 1 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 1
	0
	(3 3 | 1 1)
	(3 4 | 1 1)
for (3 1 | 3 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 3
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 1 | 3 1)
	(3 1 | 4 1)
for (3 3 | 2 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 1
	0
	(3 3 | 2 0)
	(3 4 | 2 0)
for (3 0 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 3
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 0 | 2 3)
	(3 0 | 2 4)
for (3 3 | 2 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 1
	0
	(3 3 | 2 1)
	(3 4 | 2 1)
for (3 1 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 3
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 1 | 2 3)
	(3 1 | 2 4)
for (3 3 | 2 2) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 1
	0
	(3 3 | 2 2)
	(3 4 | 2 2)
for (2 3 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 3
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 3
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 2
	0
	1
	(2 3 | 2 3)
	(2 3 | 2 4)
for (3 3 | 3 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 3
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 3
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 3 | 3 0)
	(3 3 | 4 0)
	(3 4 | 3 0)
	(3 4 | 4 0)
for (3 3 | 3 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 3
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 3
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 3 | 3 1)
	(3 3 | 4 1)
	(3 4 | 3 1)
	(3 4 | 4 1)
for (3 3 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 3
	klstablizer: 3
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 3 | 2 3)
	(3 3 | 2 4)
	(3 4 | 2 3)
	(3 4 | 2 4)
for (3 3 | 3 3) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 3
	lstablizer: 3
	ijstablizer: 3
	klstablizer: 3
	R.size = 2
	0
	1
	S.size = 2
	0
	1
	T.size = 2
	0
	1
	(3 3 | 3 3)
	(3 3 | 3 4)
	(3 3 | 4 4)
	(3 3 | 4 3)
	(3 4 | 3 3)
	(3 4 | 3 4)
	(3 4 | 4 4)
	(3 4 | 4 3)
done

      Computed 138 non-zero integrals.

  ==> Iterations <==

                        Total Energy        Delta E      Density RMS

   @RHF iter   1:   -73.24396086496064   -1.86464e+01    0.00000e+00 
   @RHF iter   2:   -74.93153802221687   -1.68758e+00    4.00742e-01 
   @RHF iter   3:   -74.96436614629356   -3.28281e-02    5.71410e-02 
   @RHF iter   4:   -74.96565395931069   -1.28781e-03    9.58977e-03 
   @RHF iter   5:   -74.96579484360777   -1.40884e-04    3.68659e-03 
   @RHF iter   6:   -74.96581941006842   -2.45665e-05    1.44630e-03 
   @RHF iter   7:   -74.96582409859214   -4.68852e-06    6.22512e-04 
   @RHF iter   8:   -74.96582501469292   -9.16101e-07    2.70674e-04 
   @RHF iter   9:   -74.96582519487158   -1.80179e-07    1.19068e-04 
   @RHF iter  10:   -74.96582523037712   -3.55055e-08    5.25971e-05 
   @RHF iter  11:   -74.96582523737769   -7.00057e-09    2.32933e-05 
   @RHF iter  12:   -74.96582523875817   -1.38049e-09    1.03287e-05 
   @RHF iter  13:   -74.96582523903044   -2.72266e-10    4.58308e-06 
   @RHF iter  14:   -74.96582523908415   -5.37170e-11    2.03437e-06 
   @RHF iter  15:   -74.96582523909468   -1.05302e-11    9.03216e-07 
   @RHF iter  16:   -74.96582523909677   -2.08900e-12    4.01052e-07 
   @RHF iter  17:   -74.96582523909727   -4.97380e-13    1.78088e-07 
   @RHF iter  18:   -74.96582523909730   -2.84217e-14    7.90830e-08 
   @RHF iter  19:   -74.96582523909730    0.00000e+00    3.51188e-08 
   @RHF iter  20:   -74.96582523909731   -1.42109e-14    1.55955e-08 
   @RHF iter  21:   -74.96582523909730    1.42109e-14    6.92569e-09 
   @RHF iter  22:   -74.96582523909733   -2.84217e-14    3.07558e-09 
   @RHF iter  23:   -74.96582523909730    2.84217e-14    1.36582e-09 
   @RHF iter  24:   -74.96582523909734   -4.26326e-14    6.06537e-10 
   @RHF iter  25:   -74.96582523909728    5.68434e-14    2.69354e-10 
   @RHF iter  26:   -74.96582523909731   -2.84217e-14    1.19615e-10 

  ==> Post-Iterations <==

	Orbital Energies (a.u.)
	-----------------------

	Doubly Occupied:                                                      

	   1A1   -20.250548     2A1    -1.255213     1B2    -0.594590  
	   3A1    -0.456812     1B1    -0.391750  

	Virtual:                                                              

	   4A1     0.577781     2B2     0.692964  

	Final Occupation by Irrep:
	         A1    A2    B1    B2 
	DOCC [     3,    0,    1,    1 ]

  Energy converged.

  @RHF Final Energy:   -74.96582523909731

  ==> Properties <==

 OEPROP: One-electron properties/analyses.
  by Rob Parrish and Justin Turney.
  built on LIBMINTS.

 Dipole Moment: (a.u.)
     X:     0.0000      Y:     0.0000      Z:     0.6686     Total:     0.6686

 Dipole Moment: (Debye)
     X:     0.0000      Y:     0.0000      Z:     1.6994     Total:     1.6994


  Saving occupied orbitals to File 100.

*** tstop() called on mac10147 at Tue Jun 14 09:57:12 2011
	user time   =       0.91 seconds =       0.02 minutes
	system time =       0.15 seconds =       0.00 minutes
	total time  =          0 seconds =       0.00 minutes

*** tstart() called on mac10147
*** at Tue Jun 14 09:57:12 2011

	There are an even number of electrons - assuming singlet.
	Specify the multiplicity with the MULTP option in the
	input if this is incorrect


         ---------------------------------------------------------
                                   SCF
            by Justin Turney, Rob Parrish, and Andy Simmonnett
                              RHF Reference
                        1 Threads,    256 MiB Core
         ---------------------------------------------------------

  ==> Geometry <==

    Molecular point group: c2v

    Geometry (in Angstrom), charge = 0, multiplicity = 1:

       Center              X                  Y                   Z       
    ------------   -----------------  -----------------  -----------------
           O          0.000000000000     0.000000000000    -0.070072609101
           H          0.000000000000     0.762395486768     0.556051578434
           H          0.000000000000    -0.762395486768     0.556051578434

    Number of unique atoms: 2

    Atoms equivalency:
       unique atom 0: 0 
       unique atom 1: 1 2 

  Running in c2v symmetry.

  Nuclear repulsion =    8.929327662359048

  Charge       = 0
  Multiplicity = 1
  Electrons    = 10
  Nalpha       = 5
  Nbeta        = 5

  ==> Algorithm <==

  SCF Algorithm Type is PK.
  DIIS disabled.
  MOM disabled.
  Guess Type is CORE.
  Energy threshold   = 1.00e-10
  Density threshold  = 1.00e-10
  Integral threshold = 0.00e+00

  ==> Primary Basis: STO-3G <==

  Basis Set
    Number of shells: 5
    Number of basis function: 7
    Number of Cartesian functions: 7
    Spherical Harmonics?: true
    Max angular momentum: 1

  ==> Pre-Iterations <==

  Minimum eigenvalue in the overlap matrix is 3.6129795383E-01.
  Using Symmetric Orthogonalization.
  SCF Guess: Core (One-Electron) Hamiltonian.

  Initial RHF energy:   -54.58027305939331

   -------------------------------------------------------
    Irrep   Nso     Nmo     Nalpha   Nbeta   Ndocc  Nsocc
   -------------------------------------------------------
     A1         4       4       3       3       3       0
     A2         0       0       0       0       0       0
     B1         1       1       1       1       1       0
     B2         2       2       1       1       1       0
   -------------------------------------------------------
    Total       7       7       5       5       5       0
   -------------------------------------------------------

  ==> Integral Setup <==

 MINTS: Wrapper to libmints.
   by Justin Turney

   Calculation information:
      Number of atoms:                   3
      Number of AO shells:               5
      Number of SO shells:               4
      Number of primitives:             15
      Number of atomic orbitals:         7
      Number of basis functions:         7

      Number of irreps:                  4
      Number of functions per irrep: [   4    0    1    2 ]

      Computing integrals...for (0 0 | 0 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(0 0 | 0 0)
for (1 0 | 0 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 0 | 0 0)
for (1 1 | 0 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 1 | 0 0)
for (1 0 | 1 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 0 | 1 0)
for (1 1 | 1 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 1 | 1 0)
for (1 1 | 1 1) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 1 | 1 1)
for (0 0 | 2 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (0 0 | 2 1) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (1 0 | 2 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (1 0 | 2 1) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (1 1 | 2 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (1 1 | 2 1) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (0 0 | 2 2) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(0 0 | 2 2)
for (2 0 | 2 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 0 | 2 0)
for (1 0 | 2 2) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 0 | 2 2)
for (2 1 | 2 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 1 | 2 0)
for (1 1 | 2 2) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 1 | 2 2)
for (2 1 | 2 1) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 1 | 2 1)
for (2 0 | 2 2) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (2 1 | 2 2) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (2 2 | 2 2) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 2 | 2 2)
for (3 0 | 0 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 0 | 0 0)
for (3 1 | 0 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 1 | 0 0)
for (3 0 | 1 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 0 | 1 0)
for (3 1 | 1 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 1 | 1 0)
for (3 0 | 1 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 0 | 1 1)
for (3 1 | 1 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 1 | 1 1)
for (0 0 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 4
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(0 0 | 2 3)
for (3 0 | 2 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 0 | 2 0)
for (1 0 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 4
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 0 | 2 3)
for (3 1 | 2 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 1 | 2 0)
for (3 0 | 2 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 0 | 2 1)
for (1 1 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 4
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 1 | 2 3)
for (3 1 | 2 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 1 | 2 1)
for (2 3 | 2 0) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 3 | 2 0)
for (3 0 | 2 2) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 0 | 2 2)
for (2 3 | 2 1) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 3 | 2 1)
for (3 1 | 2 2) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 1 | 2 2)
for (2 3 | 2 2) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 3 | 2 2)
for (3 3 | 0 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 1
	0
	(3 3 | 0 0)
	(3 4 | 0 0)
for (3 0 | 3 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 3
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 0 | 3 0)
	(3 0 | 4 0)
for (3 3 | 1 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 1
	0
	(3 3 | 1 0)
	(3 4 | 1 0)
for (3 1 | 3 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 3
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 1 | 3 0)
	(3 1 | 4 0)
for (3 3 | 1 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 1
	0
	(3 3 | 1 1)
	(3 4 | 1 1)
for (3 1 | 3 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 3
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 1 | 3 1)
	(3 1 | 4 1)
for (3 3 | 2 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 1
	0
	(3 3 | 2 0)
	(3 4 | 2 0)
for (3 0 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 3
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 0 | 2 3)
	(3 0 | 2 4)
for (3 3 | 2 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 1
	0
	(3 3 | 2 1)
	(3 4 | 2 1)
for (3 1 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 3
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 1 | 2 3)
	(3 1 | 2 4)
for (3 3 | 2 2) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 1
	0
	(3 3 | 2 2)
	(3 4 | 2 2)
for (2 3 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 3
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 3
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 2
	0
	1
	(2 3 | 2 3)
	(2 3 | 2 4)
for (3 3 | 3 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 3
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 3
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 3 | 3 0)
	(3 3 | 4 0)
	(3 4 | 3 0)
	(3 4 | 4 0)
for (3 3 | 3 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 3
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 3
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 3 | 3 1)
	(3 3 | 4 1)
	(3 4 | 3 1)
	(3 4 | 4 1)
for (3 3 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 3
	klstablizer: 3
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 3 | 2 3)
	(3 3 | 2 4)
	(3 4 | 2 3)
	(3 4 | 2 4)
for (3 3 | 3 3) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 3
	lstablizer: 3
	ijstablizer: 3
	klstablizer: 3
	R.size = 2
	0
	1
	S.size = 2
	0
	1
	T.size = 2
	0
	1
	(3 3 | 3 3)
	(3 3 | 3 4)
	(3 3 | 4 4)
	(3 3 | 4 3)
	(3 4 | 3 3)
	(3 4 | 3 4)
	(3 4 | 4 4)
	(3 4 | 4 3)
done

      Computed 138 non-zero integrals.

  ==> Iterations <==

                        Total Energy        Delta E      Density RMS

   @RHF iter   1:   -73.24169134011967   -1.86614e+01    0.00000e+00 
   @RHF iter   2:   -74.93406312964075   -1.69237e+00    4.01153e-01 
   @RHF iter   3:   -74.96447020374744   -3.04071e-02    5.50353e-02 
   @RHF iter   4:   -74.96566638524929   -1.19618e-03    9.34851e-03 
   @RHF iter   5:   -74.96579972567665   -1.33340e-04    3.59577e-03 
   @RHF iter   6:   -74.96582287284136   -2.31472e-05    1.41241e-03 
   @RHF iter   7:   -74.96582725557720   -4.38274e-06    6.04899e-04 
   @RHF iter   8:   -74.96582810498839   -8.49411e-07    2.62012e-04 
   @RHF iter   9:   -74.96582827070762   -1.65719e-07    1.14778e-04 
   @RHF iter  10:   -74.96582830310253   -3.23949e-08    5.04973e-05 
   @RHF iter  11:   -74.96582830943879   -6.33626e-09    2.22730e-05 
   @RHF iter  12:   -74.96582831067829   -1.23950e-09    9.83650e-06 
   @RHF iter  13:   -74.96582831092078   -2.42494e-10    4.34718e-06 
   @RHF iter  14:   -74.96582831096825   -4.74643e-11    1.92193e-06 
   @RHF iter  15:   -74.96582831097746   -9.20863e-12    8.49879e-07 
   @RHF iter  16:   -74.96582831097935   -1.89004e-12    3.75859e-07 
   @RHF iter  17:   -74.96582831097969   -3.41061e-13    1.66234e-07 
   @RHF iter  18:   -74.96582831097980   -1.13687e-13    7.35239e-08 
   @RHF iter  19:   -74.96582831097979    1.42109e-14    3.25196e-08 
   @RHF iter  20:   -74.96582831097977    1.42109e-14    1.43836e-08 
   @RHF iter  21:   -74.96582831097977    0.00000e+00    6.36196e-09 
   @RHF iter  22:   -74.96582831097979   -1.42109e-14    2.81395e-09 
   @RHF iter  23:   -74.96582831097977    1.42109e-14    1.24464e-09 
   @RHF iter  24:   -74.96582831097977    0.00000e+00    5.50514e-10 
   @RHF iter  25:   -74.96582831097976    1.42109e-14    2.43497e-10 
   @RHF iter  26:   -74.96582831097977   -1.42109e-14    1.07702e-10 

  ==> Post-Iterations <==

	Orbital Energies (a.u.)
	-----------------------

	Doubly Occupied:                                                      

	   1A1   -20.249777     2A1    -1.257644     1B2    -0.597315  
	   3A1    -0.457317     1B1    -0.391958  

	Virtual:                                                              

	   4A1     0.582673     2B2     0.699042  

	Final Occupation by Irrep:
	         A1    A2    B1    B2 
	DOCC [     3,    0,    1,    1 ]

  Energy converged.

  @RHF Final Energy:   -74.96582831097977

  ==> Properties <==

 OEPROP: One-electron properties/analyses.
  by Rob Parrish and Justin Turney.
  built on LIBMINTS.

 Dipole Moment: (a.u.)
     X:     0.0000      Y:     0.0000      Z:     0.6714     Total:     0.6714

 Dipole Moment: (Debye)
     X:     0.0000      Y:     0.0000      Z:     1.7064     Total:     1.7064


  Saving occupied orbitals to File 100.

*** tstop() called on mac10147 at Tue Jun 14 09:57:13 2011
	user time   =       0.95 seconds =       0.02 minutes
	system time =       0.16 seconds =       0.00 minutes
	total time  =          1 seconds =       0.02 minutes

*** tstart() called on mac10147
*** at Tue Jun 14 09:57:13 2011

	There are an even number of electrons - assuming singlet.
	Specify the multiplicity with the MULTP option in the
	input if this is incorrect


         ---------------------------------------------------------
                                   SCF
            by Justin Turney, Rob Parrish, and Andy Simmonnett
                              RHF Reference
                        1 Threads,    256 MiB Core
         ---------------------------------------------------------

  ==> Geometry <==

    Molecular point group: c2v

    Geometry (in Angstrom), charge = 0, multiplicity = 1:

       Center              X                  Y                   Z       
    ------------   -----------------  -----------------  -----------------
           O          0.000000000000     0.000000000000    -0.070906888268
           H          0.000000000000     0.762395486768     0.562671886334
           H          0.000000000000    -0.762395486768     0.562671886334

    Number of unique atoms: 2

    Atoms equivalency:
       unique atom 0: 0 
       unique atom 1: 1 2 

  Running in c2v symmetry.

  Nuclear repulsion =    8.888222306389761

  Charge       = 0
  Multiplicity = 1
  Electrons    = 10
  Nalpha       = 5
  Nbeta        = 5

  ==> Algorithm <==

  SCF Algorithm Type is PK.
  DIIS disabled.
  MOM disabled.
  Guess Type is CORE.
  Energy threshold   = 1.00e-10
  Density threshold  = 1.00e-10
  Integral threshold = 0.00e+00

  ==> Primary Basis: STO-3G <==

  Basis Set
    Number of shells: 5
    Number of basis function: 7
    Number of Cartesian functions: 7
    Spherical Harmonics?: true
    Max angular momentum: 1

  ==> Pre-Iterations <==

  Minimum eigenvalue in the overlap matrix is 3.6440737521E-01.
  Using Symmetric Orthogonalization.
  SCF Guess: Core (One-Electron) Hamiltonian.

  Initial RHF energy:   -54.59396596025661

   -------------------------------------------------------
    Irrep   Nso     Nmo     Nalpha   Nbeta   Ndocc  Nsocc
   -------------------------------------------------------
     A1         4       4       3       3       3       0
     A2         0       0       0       0       0       0
     B1         1       1       1       1       1       0
     B2         2       2       1       1       1       0
   -------------------------------------------------------
    Total       7       7       5       5       5       0
   -------------------------------------------------------

  ==> Integral Setup <==

 MINTS: Wrapper to libmints.
   by Justin Turney

   Calculation information:
      Number of atoms:                   3
      Number of AO shells:               5
      Number of SO shells:               4
      Number of primitives:             15
      Number of atomic orbitals:         7
      Number of basis functions:         7

      Number of irreps:                  4
      Number of functions per irrep: [   4    0    1    2 ]

      Computing integrals...for (0 0 | 0 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(0 0 | 0 0)
for (1 0 | 0 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 0 | 0 0)
for (1 1 | 0 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 1 | 0 0)
for (1 0 | 1 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 0 | 1 0)
for (1 1 | 1 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 1 | 1 0)
for (1 1 | 1 1) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 1 | 1 1)
for (0 0 | 2 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (0 0 | 2 1) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (1 0 | 2 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (1 0 | 2 1) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (1 1 | 2 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (1 1 | 2 1) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (0 0 | 2 2) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(0 0 | 2 2)
for (2 0 | 2 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 0 | 2 0)
for (1 0 | 2 2) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 0 | 2 2)
for (2 1 | 2 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 1 | 2 0)
for (1 1 | 2 2) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 1 | 2 2)
for (2 1 | 2 1) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 1 | 2 1)
for (2 0 | 2 2) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (2 1 | 2 2) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (2 2 | 2 2) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 2 | 2 2)
for (3 0 | 0 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 0 | 0 0)
for (3 1 | 0 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 1 | 0 0)
for (3 0 | 1 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 0 | 1 0)
for (3 1 | 1 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 1 | 1 0)
for (3 0 | 1 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 0 | 1 1)
for (3 1 | 1 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 1 | 1 1)
for (0 0 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 4
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(0 0 | 2 3)
for (3 0 | 2 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 0 | 2 0)
for (1 0 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 4
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 0 | 2 3)
for (3 1 | 2 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 1 | 2 0)
for (3 0 | 2 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 0 | 2 1)
for (1 1 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 4
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 1 | 2 3)
for (3 1 | 2 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 1 | 2 1)
for (2 3 | 2 0) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 3 | 2 0)
for (3 0 | 2 2) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 0 | 2 2)
for (2 3 | 2 1) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 3 | 2 1)
for (3 1 | 2 2) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 1 | 2 2)
for (2 3 | 2 2) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 3 | 2 2)
for (3 3 | 0 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 1
	0
	(3 3 | 0 0)
	(3 4 | 0 0)
for (3 0 | 3 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 3
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 0 | 3 0)
	(3 0 | 4 0)
for (3 3 | 1 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 1
	0
	(3 3 | 1 0)
	(3 4 | 1 0)
for (3 1 | 3 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 3
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 1 | 3 0)
	(3 1 | 4 0)
for (3 3 | 1 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 1
	0
	(3 3 | 1 1)
	(3 4 | 1 1)
for (3 1 | 3 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 3
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 1 | 3 1)
	(3 1 | 4 1)
for (3 3 | 2 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 1
	0
	(3 3 | 2 0)
	(3 4 | 2 0)
for (3 0 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 3
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 0 | 2 3)
	(3 0 | 2 4)
for (3 3 | 2 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 1
	0
	(3 3 | 2 1)
	(3 4 | 2 1)
for (3 1 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 3
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 1 | 2 3)
	(3 1 | 2 4)
for (3 3 | 2 2) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 1
	0
	(3 3 | 2 2)
	(3 4 | 2 2)
for (2 3 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 3
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 3
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 2
	0
	1
	(2 3 | 2 3)
	(2 3 | 2 4)
for (3 3 | 3 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 3
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 3
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 3 | 3 0)
	(3 3 | 4 0)
	(3 4 | 3 0)
	(3 4 | 4 0)
for (3 3 | 3 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 3
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 3
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 3 | 3 1)
	(3 3 | 4 1)
	(3 4 | 3 1)
	(3 4 | 4 1)
for (3 3 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 3
	klstablizer: 3
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 3 | 2 3)
	(3 3 | 2 4)
	(3 4 | 2 3)
	(3 4 | 2 4)
for (3 3 | 3 3) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 3
	lstablizer: 3
	ijstablizer: 3
	klstablizer: 3
	R.size = 2
	0
	1
	S.size = 2
	0
	1
	T.size = 2
	0
	1
	(3 3 | 3 3)
	(3 3 | 3 4)
	(3 3 | 4 4)
	(3 3 | 4 3)
	(3 4 | 3 3)
	(3 4 | 3 4)
	(3 4 | 4 4)
	(3 4 | 4 3)
done

      Computed 138 non-zero integrals.

  ==> Iterations <==

                        Total Energy        Delta E      Density RMS

   @RHF iter   1:   -73.24271527322117   -1.86487e+01    0.00000e+00 
   @RHF iter   2:   -74.93088409680919   -1.68817e+00    4.01098e-01 
   @RHF iter   3:   -74.96440481787383   -3.35207e-02    5.77952e-02 
   @RHF iter   4:   -74.96570859872857   -1.30378e-03    9.62321e-03 
   @RHF iter   5:   -74.96584875546738   -1.40157e-04    3.67933e-03 
   @RHF iter   6:   -74.96587305806652   -2.43026e-05    1.43728e-03 
   @RHF iter   7:   -74.96587768656289   -4.62850e-06    6.17944e-04 
   @RHF iter   8:   -74.96587858979763   -9.03235e-07    2.68417e-04 
   @RHF iter   9:   -74.96587876725938   -1.77462e-07    1.17996e-04 
   @RHF iter  10:   -74.96587880219478   -3.49354e-08    5.20930e-05 
   @RHF iter  11:   -74.96587880907616   -6.88138e-09    2.30577e-05 
   @RHF iter  12:   -74.96587881043187   -1.35572e-09    1.02190e-05 
   @RHF iter  13:   -74.96587881069892   -2.67050e-10    4.53214e-06 
   @RHF iter  14:   -74.96587881075158   -5.26512e-11    2.01077e-06 
   @RHF iter  15:   -74.96587881076189   -1.03171e-11    8.92301e-07 
   @RHF iter  16:   -74.96587881076402   -2.13163e-12    3.96012e-07 
   @RHF iter  17:   -74.96587881076439   -3.69482e-13    1.75764e-07 
   @RHF iter  18:   -74.96587881076447   -7.10543e-14    7.80131e-08 
   @RHF iter  19:   -74.96587881076445    1.42109e-14    3.46268e-08 
   @RHF iter  20:   -74.96587881076448   -2.84217e-14    1.53696e-08 
   @RHF iter  21:   -74.96587881076451   -2.84217e-14    6.82202e-09 
   @RHF iter  22:   -74.96587881076442    8.52651e-14    3.02807e-09 
   @RHF iter  23:   -74.96587881076447   -4.26326e-14    1.34406e-09 
   @RHF iter  24:   -74.96587881076449   -2.84217e-14    5.96585e-10 
   @RHF iter  25:   -74.96587881076445    4.26326e-14    2.64805e-10 
   @RHF iter  26:   -74.96587881076444    1.42109e-14    1.17540e-10 

  ==> Post-Iterations <==

	Orbital Energies (a.u.)
	-----------------------

	Doubly Occupied:                                                      

	   1A1   -20.251216     2A1    -1.256099     1B2    -0.593809  
	   3A1    -0.458291     1B1    -0.392184  

	Virtual:                                                              

	   4A1     0.579213     2B2     0.691912  

	Final Occupation by Irrep:
	         A1    A2    B1    B2 
	DOCC [     3,    0,    1,    1 ]

  Energy converged.

  @RHF Final Energy:   -74.96587881076444

  ==> Properties <==

 OEPROP: One-electron properties/analyses.
  by Rob Parrish and Justin Turney.
  built on LIBMINTS.

 Dipole Moment: (a.u.)
     X:     0.0000      Y:     0.0000      Z:     0.6702     Total:     0.6702

 Dipole Moment: (Debye)
     X:     0.0000      Y:     0.0000      Z:     1.7036     Total:     1.7036


  Saving occupied orbitals to File 100.

*** tstop() called on mac10147 at Tue Jun 14 09:57:13 2011
	user time   =       0.99 seconds =       0.02 minutes
	system time =       0.16 seconds =       0.00 minutes
	total time  =          0 seconds =       0.00 minutes

*** tstart() called on mac10147
*** at Tue Jun 14 09:57:13 2011

	There are an even number of electrons - assuming singlet.
	Specify the multiplicity with the MULTP option in the
	input if this is incorrect


         ---------------------------------------------------------
                                   SCF
            by Justin Turney, Rob Parrish, and Andy Simmonnett
                              RHF Reference
                        1 Threads,    256 MiB Core
         ---------------------------------------------------------

  ==> Geometry <==

    Molecular point group: c2v

    Geometry (in Angstrom), charge = 0, multiplicity = 1:

       Center              X                  Y                   Z       
    ------------   -----------------  -----------------  -----------------
           O          0.000000000000     0.000000000000    -0.070489748684
           H          0.000000000000     0.762395486768     0.559361732384
           H          0.000000000000    -0.762395486768     0.559361732384

    Number of unique atoms: 2

    Atoms equivalency:
       unique atom 0: 0 
       unique atom 1: 1 2 

  Running in c2v symmetry.

  Nuclear repulsion =    8.908761791062837

  Charge       = 0
  Multiplicity = 1
  Electrons    = 10
  Nalpha       = 5
  Nbeta        = 5

  ==> Algorithm <==

  SCF Algorithm Type is PK.
  DIIS disabled.
  MOM disabled.
  Guess Type is CORE.
  Energy threshold   = 1.00e-10
  Density threshold  = 1.00e-10
  Integral threshold = 0.00e+00

  ==> Primary Basis: STO-3G <==

  Basis Set
    Number of shells: 5
    Number of basis function: 7
    Number of Cartesian functions: 7
    Spherical Harmonics?: true
    Max angular momentum: 1

  ==> Pre-Iterations <==

  Minimum eigenvalue in the overlap matrix is 3.6284862416E-01.
  Using Symmetric Orthogonalization.
  SCF Guess: Core (One-Electron) Hamiltonian.

  Initial RHF energy:   -54.58712896820143

   -------------------------------------------------------
    Irrep   Nso     Nmo     Nalpha   Nbeta   Ndocc  Nsocc
   -------------------------------------------------------
     A1         4       4       3       3       3       0
     A2         0       0       0       0       0       0
     B1         1       1       1       1       1       0
     B2         2       2       1       1       1       0
   -------------------------------------------------------
    Total       7       7       5       5       5       0
   -------------------------------------------------------

  ==> Integral Setup <==

 MINTS: Wrapper to libmints.
   by Justin Turney

   Calculation information:
      Number of atoms:                   3
      Number of AO shells:               5
      Number of SO shells:               4
      Number of primitives:             15
      Number of atomic orbitals:         7
      Number of basis functions:         7

      Number of irreps:                  4
      Number of functions per irrep: [   4    0    1    2 ]

      Computing integrals...for (0 0 | 0 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(0 0 | 0 0)
for (1 0 | 0 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 0 | 0 0)
for (1 1 | 0 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 1 | 0 0)
for (1 0 | 1 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 0 | 1 0)
for (1 1 | 1 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 1 | 1 0)
for (1 1 | 1 1) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 1 | 1 1)
for (0 0 | 2 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (0 0 | 2 1) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (1 0 | 2 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (1 0 | 2 1) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (1 1 | 2 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (1 1 | 2 1) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (0 0 | 2 2) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(0 0 | 2 2)
for (2 0 | 2 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 0 | 2 0)
for (1 0 | 2 2) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 0 | 2 2)
for (2 1 | 2 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 1 | 2 0)
for (1 1 | 2 2) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 1 | 2 2)
for (2 1 | 2 1) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 1 | 2 1)
for (2 0 | 2 2) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (2 1 | 2 2) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (2 2 | 2 2) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 2 | 2 2)
for (3 0 | 0 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 0 | 0 0)
for (3 1 | 0 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 1 | 0 0)
for (3 0 | 1 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 0 | 1 0)
for (3 1 | 1 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 1 | 1 0)
for (3 0 | 1 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 0 | 1 1)
for (3 1 | 1 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 1 | 1 1)
for (0 0 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 4
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(0 0 | 2 3)
for (3 0 | 2 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 0 | 2 0)
for (1 0 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 4
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 0 | 2 3)
for (3 1 | 2 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 1 | 2 0)
for (3 0 | 2 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 0 | 2 1)
for (1 1 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 4
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 1 | 2 3)
for (3 1 | 2 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 1 | 2 1)
for (2 3 | 2 0) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 3 | 2 0)
for (3 0 | 2 2) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 0 | 2 2)
for (2 3 | 2 1) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 3 | 2 1)
for (3 1 | 2 2) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 1 | 2 2)
for (2 3 | 2 2) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 3 | 2 2)
for (3 3 | 0 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 1
	0
	(3 3 | 0 0)
	(3 4 | 0 0)
for (3 0 | 3 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 3
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 0 | 3 0)
	(3 0 | 4 0)
for (3 3 | 1 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 1
	0
	(3 3 | 1 0)
	(3 4 | 1 0)
for (3 1 | 3 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 3
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 1 | 3 0)
	(3 1 | 4 0)
for (3 3 | 1 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 1
	0
	(3 3 | 1 1)
	(3 4 | 1 1)
for (3 1 | 3 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 3
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 1 | 3 1)
	(3 1 | 4 1)
for (3 3 | 2 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 1
	0
	(3 3 | 2 0)
	(3 4 | 2 0)
for (3 0 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 3
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 0 | 2 3)
	(3 0 | 2 4)
for (3 3 | 2 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 1
	0
	(3 3 | 2 1)
	(3 4 | 2 1)
for (3 1 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 3
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 1 | 2 3)
	(3 1 | 2 4)
for (3 3 | 2 2) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 1
	0
	(3 3 | 2 2)
	(3 4 | 2 2)
for (2 3 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 3
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 3
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 2
	0
	1
	(2 3 | 2 3)
	(2 3 | 2 4)
for (3 3 | 3 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 3
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 3
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 3 | 3 0)
	(3 3 | 4 0)
	(3 4 | 3 0)
	(3 4 | 4 0)
for (3 3 | 3 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 3
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 3
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 3 | 3 1)
	(3 3 | 4 1)
	(3 4 | 3 1)
	(3 4 | 4 1)
for (3 3 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 3
	klstablizer: 3
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 3 | 2 3)
	(3 3 | 2 4)
	(3 4 | 2 3)
	(3 4 | 2 4)
for (3 3 | 3 3) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 3
	lstablizer: 3
	ijstablizer: 3
	klstablizer: 3
	R.size = 2
	0
	1
	S.size = 2
	0
	1
	T.size = 2
	0
	1
	(3 3 | 3 3)
	(3 3 | 3 4)
	(3 3 | 4 4)
	(3 3 | 4 3)
	(3 4 | 3 3)
	(3 4 | 3 4)
	(3 4 | 4 4)
	(3 4 | 4 3)
done

      Computed 138 non-zero integrals.

  ==> Iterations <==

                        Total Energy        Delta E      Density RMS

   @RHF iter   1:   -73.24220895242323   -1.86551e+01    0.00000e+00 
   @RHF iter   2:   -74.93251719720007   -1.69031e+00    4.01121e-01 
   @RHF iter   3:   -74.96445454914294   -3.19374e-02    5.64070e-02 
   @RHF iter   4:   -74.96570315259441   -1.24860e-03    9.48343e-03 
   @RHF iter   5:   -74.96583986963080   -1.36717e-04    3.63734e-03 
   @RHF iter   6:   -74.96586359205844   -2.37224e-05    1.42496e-03 
   @RHF iter   7:   -74.96586809680588   -4.50475e-06    6.11435e-04 
   @RHF iter   8:   -74.96586897284607   -8.76040e-07    2.65214e-04 
   @RHF iter   9:   -74.96586914435639   -1.71510e-07    1.16382e-04 
   @RHF iter  10:   -74.96586917800050   -3.36441e-08    5.12908e-05 
   @RHF iter  11:   -74.96586918460397   -6.60347e-09    2.26624e-05 
   @RHF iter  12:   -74.96586918590032   -1.29634e-09    1.00260e-05 
   @RHF iter  13:   -74.96586918615483   -2.54516e-10    4.43865e-06 
   @RHF iter  14:   -74.96586918620480   -4.99654e-11    1.96580e-06 
   @RHF iter  15:   -74.96586918621458   -9.77707e-12    8.70796e-07 
   @RHF iter  16:   -74.96586918621654   -1.96110e-12    3.85782e-07 
   @RHF iter  17:   -74.96586918621691   -3.69482e-13    1.70920e-07 
   @RHF iter  18:   -74.96586918621705   -1.42109e-13    7.57286e-08 
   @RHF iter  19:   -74.96586918621702    2.84217e-14    3.35532e-08 
   @RHF iter  20:   -74.96586918621702    0.00000e+00    1.48666e-08 
   @RHF iter  21:   -74.96586918621699    2.84217e-14    6.58710e-09 
   @RHF iter  22:   -74.96586918621702   -2.84217e-14    2.91861e-09 
   @RHF iter  23:   -74.96586918621699    2.84217e-14    1.29318e-09 
   @RHF iter  24:   -74.96586918621702   -2.84217e-14    5.72984e-10 
   @RHF iter  25:   -74.96586918621699    2.84217e-14    2.53880e-10 
   @RHF iter  26:   -74.96586918621705   -5.68434e-14    1.12487e-10 

  ==> Post-Iterations <==

	Orbital Energies (a.u.)
	-----------------------

	Doubly Occupied:                                                      

	   1A1   -20.250499     2A1    -1.256873     1B2    -0.595561  
	   3A1    -0.457808     1B1    -0.392072  

	Virtual:                                                              

	   4A1     0.580948     2B2     0.695470  

	Final Occupation by Irrep:
	         A1    A2    B1    B2 
	DOCC [     3,    0,    1,    1 ]

  Energy converged.

  @RHF Final Energy:   -74.96586918621705

  ==> Properties <==

 OEPROP: One-electron properties/analyses.
  by Rob Parrish and Justin Turney.
  built on LIBMINTS.

 Dipole Moment: (a.u.)
     X:     0.0000      Y:     0.0000      Z:     0.6708     Total:     0.6708

 Dipole Moment: (Debye)
     X:     0.0000      Y:     0.0000      Z:     1.7050     Total:     1.7050


  Saving occupied orbitals to File 100.

*** tstop() called on mac10147 at Tue Jun 14 09:57:13 2011
	user time   =       1.03 seconds =       0.02 minutes
	system time =       0.17 seconds =       0.00 minutes
	total time  =          0 seconds =       0.00 minutes
    -Cartesian displacement SALCs per irrep:
    Irrep  #SALCs
    -----  ------
      0       3
      1       1
      2       2
      3       3

	Finite difference computation of gradient using 3-point formula
	Check for precision!
	Energy without displacment:  -74.9658691862
	Gradients are in mass-weighted, symmetry-adapted cartesians (in au).
 Coord      Energy(-)        Energy(+)        Force
    0    -74.9658761741   -74.9658582601     0.0008957003
    1    -74.9658658401   -74.9658252391     0.0020300480
    2    -74.9658283110   -74.9658788108    -0.0025249892


			----------------------------------
			 OPTKING: for geometry optimizations  
			  - R.A. King,  Bethel University   
			------------------------------------

	Prevous internal coordinate definitions found.
	---Fragment 1 Geometry and Gradient---
	 O           0.0000000000        0.0000000000       -0.1332063100
	 H           0.0000000000        1.4407185649        1.0570404027
	 H           0.0000000000       -1.4407185649        1.0570404027
	             0.0000000000        0.0000000000        0.0008957003
	             0.0000000000        0.0014354607       -0.0017854370
	             0.0000000000       -0.0014354607       -0.0017854370

	---Fragment 1 Intrafragment Coordinates---
	 * Coordinate *           * BOHR/RAD *       * ANG/DEG *
	 R(1,2)           =         1.868785	       0.988918
	 R(1,3)           =         1.868785	       0.988918
	 B(2,1,3)         =         1.760627	     100.876509

	Current energy   :       -74.9658691862

	Energy change for the previous step:
		Projected    :        -0.0004800655
		Actual       :        -0.0004265130
	Energy ratio large: Trust radius increased.


	Performing BFGS update with previous 2 gradient(s).
	Following RFO solution 0.
	Projected energy change by RFO approximation:        -0.0000123565

	Back-transformation to cartesian coordinates...
	Successfully converged to displaced geometry.

	---Internal Coordinate Step in ANG or DEG, aJ/ANG or AJ/DEG ---
	 ----------------------------------------------------------------------
	 Coordinate             Previous        Force       Change         New 
	 ----------             --------       ------       ------       ------
	 R(1,2)          =      0.988918    -0.004428     0.000414     0.989332
	 R(1,3)          =      0.988918    -0.004428     0.000414     0.989332
	 B(2,1,3)        =    100.876509    -0.000228    -0.488673   100.387835
	 ----------------------------------------------------------------------

	Convergence Check Cycle    3: (using internal coordinates in au)
	                    Actual        Tolerance     Converged?
	----------------------------------------------------------
	MAX Force           3.0e-03        3.0e-04          no
	Energy Change      -4.3e-04        1.0e-06          no
	MAX Displacement    8.5e-03        1.2e-03          no
	----------------------------------------------------------
	Writing optimization data to binary file.
	Structure for next step:
	Cartesian Geometry (au)
	    O     0.0000000000   0.0000000000  -0.1339487461
	    H     0.0000000000   1.4362307214   1.0629319025
	    H     0.0000000000  -1.4362307214   1.0629319025
			--------------------------
			 OPTKING Finished Execution 
			--------------------------
	Using finite-differences of energies to determine gradients.
	Generating geometries for use with 3-point formula.
	Displacement size will be 1.00e-02.
	Number of atoms is 3.
    -Cartesian displacement SALCs per irrep:
    Irrep  #SALCs
    -----  ------
      0       3
      1       1
      2       2
      3       3

	Number of SALC's is 3.
	irrep = 0, ncomponent = 1
		0: atom 0, direction 2, coef 1.000000
	irrep = 0, ncomponent = 2
		0: atom 1, direction 1, coef 0.707107
		1: atom 2, direction 1, coef -0.707107
	irrep = 0, ncomponent = 2
		0: atom 1, direction 2, coef 0.707107
		1: atom 2, direction 2, coef 0.707107
	Number of displacements (including reference) is 7.

*** tstart() called on mac10147
*** at Tue Jun 14 09:57:13 2011

	There are an even number of electrons - assuming singlet.
	Specify the multiplicity with the MULTP option in the
	input if this is incorrect


         ---------------------------------------------------------
                                   SCF
            by Justin Turney, Rob Parrish, and Andy Simmonnett
                              RHF Reference
                        1 Threads,    256 MiB Core
         ---------------------------------------------------------

  ==> Geometry <==

    Molecular point group: c2v

    Geometry (in Angstrom), charge = 0, multiplicity = 1:

       Center              X                  Y                   Z       
    ------------   -----------------  -----------------  -----------------
           O          0.000000000000     0.000000000000    -0.071030709523
           H          0.000000000000     0.760020622083     0.563654452927
           H          0.000000000000    -0.760020622083     0.563654452927

    Number of unique atoms: 2

    Atoms equivalency:
       unique atom 0: 0 
       unique atom 1: 1 2 

  Running in c2v symmetry.

  Nuclear repulsion =    8.898937631555107

  Charge       = 0
  Multiplicity = 1
  Electrons    = 10
  Nalpha       = 5
  Nbeta        = 5

  ==> Algorithm <==

  SCF Algorithm Type is PK.
  DIIS disabled.
  MOM disabled.
  Guess Type is CORE.
  Energy threshold   = 1.00e-10
  Density threshold  = 1.00e-10
  Integral threshold = 0.00e+00

  ==> Primary Basis: STO-3G <==

  Basis Set
    Number of shells: 5
    Number of basis function: 7
    Number of Cartesian functions: 7
    Spherical Harmonics?: true
    Max angular momentum: 1

  ==> Pre-Iterations <==

  Minimum eigenvalue in the overlap matrix is 3.6367990238E-01.
  Using Symmetric Orthogonalization.
  SCF Guess: Core (One-Electron) Hamiltonian.

  Initial RHF energy:   -54.58938707302593

   -------------------------------------------------------
    Irrep   Nso     Nmo     Nalpha   Nbeta   Ndocc  Nsocc
   -------------------------------------------------------
     A1         4       4       3       3       3       0
     A2         0       0       0       0       0       0
     B1         1       1       1       1       1       0
     B2         2       2       1       1       1       0
   -------------------------------------------------------
    Total       7       7       5       5       5       0
   -------------------------------------------------------

  ==> Integral Setup <==

 MINTS: Wrapper to libmints.
   by Justin Turney

   Calculation information:
      Number of atoms:                   3
      Number of AO shells:               5
      Number of SO shells:               4
      Number of primitives:             15
      Number of atomic orbitals:         7
      Number of basis functions:         7

      Number of irreps:                  4
      Number of functions per irrep: [   4    0    1    2 ]

      Computing integrals...for (0 0 | 0 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(0 0 | 0 0)
for (1 0 | 0 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 0 | 0 0)
for (1 1 | 0 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 1 | 0 0)
for (1 0 | 1 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 0 | 1 0)
for (1 1 | 1 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 1 | 1 0)
for (1 1 | 1 1) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 1 | 1 1)
for (0 0 | 2 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (0 0 | 2 1) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (1 0 | 2 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (1 0 | 2 1) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (1 1 | 2 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (1 1 | 2 1) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (0 0 | 2 2) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(0 0 | 2 2)
for (2 0 | 2 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 0 | 2 0)
for (1 0 | 2 2) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 0 | 2 2)
for (2 1 | 2 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 1 | 2 0)
for (1 1 | 2 2) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 1 | 2 2)
for (2 1 | 2 1) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 1 | 2 1)
for (2 0 | 2 2) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (2 1 | 2 2) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (2 2 | 2 2) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 2 | 2 2)
for (3 0 | 0 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 0 | 0 0)
for (3 1 | 0 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 1 | 0 0)
for (3 0 | 1 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 0 | 1 0)
for (3 1 | 1 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 1 | 1 0)
for (3 0 | 1 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 0 | 1 1)
for (3 1 | 1 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 1 | 1 1)
for (0 0 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 4
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(0 0 | 2 3)
for (3 0 | 2 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 0 | 2 0)
for (1 0 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 4
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 0 | 2 3)
for (3 1 | 2 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 1 | 2 0)
for (3 0 | 2 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 0 | 2 1)
for (1 1 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 4
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 1 | 2 3)
for (3 1 | 2 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 1 | 2 1)
for (2 3 | 2 0) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 3 | 2 0)
for (3 0 | 2 2) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 0 | 2 2)
for (2 3 | 2 1) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 3 | 2 1)
for (3 1 | 2 2) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 1 | 2 2)
for (2 3 | 2 2) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 3 | 2 2)
for (3 3 | 0 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 1
	0
	(3 3 | 0 0)
	(3 4 | 0 0)
for (3 0 | 3 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 3
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 0 | 3 0)
	(3 0 | 4 0)
for (3 3 | 1 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 1
	0
	(3 3 | 1 0)
	(3 4 | 1 0)
for (3 1 | 3 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 3
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 1 | 3 0)
	(3 1 | 4 0)
for (3 3 | 1 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 1
	0
	(3 3 | 1 1)
	(3 4 | 1 1)
for (3 1 | 3 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 3
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 1 | 3 1)
	(3 1 | 4 1)
for (3 3 | 2 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 1
	0
	(3 3 | 2 0)
	(3 4 | 2 0)
for (3 0 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 3
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 0 | 2 3)
	(3 0 | 2 4)
for (3 3 | 2 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 1
	0
	(3 3 | 2 1)
	(3 4 | 2 1)
for (3 1 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 3
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 1 | 2 3)
	(3 1 | 2 4)
for (3 3 | 2 2) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 1
	0
	(3 3 | 2 2)
	(3 4 | 2 2)
for (2 3 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 3
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 3
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 2
	0
	1
	(2 3 | 2 3)
	(2 3 | 2 4)
for (3 3 | 3 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 3
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 3
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 3 | 3 0)
	(3 3 | 4 0)
	(3 4 | 3 0)
	(3 4 | 4 0)
for (3 3 | 3 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 3
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 3
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 3 | 3 1)
	(3 3 | 4 1)
	(3 4 | 3 1)
	(3 4 | 4 1)
for (3 3 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 3
	klstablizer: 3
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 3 | 2 3)
	(3 3 | 2 4)
	(3 4 | 2 3)
	(3 4 | 2 4)
for (3 3 | 3 3) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 3
	lstablizer: 3
	ijstablizer: 3
	klstablizer: 3
	R.size = 2
	0
	1
	S.size = 2
	0
	1
	T.size = 2
	0
	1
	(3 3 | 3 3)
	(3 3 | 3 4)
	(3 3 | 4 4)
	(3 3 | 4 3)
	(3 4 | 3 3)
	(3 4 | 3 4)
	(3 4 | 4 4)
	(3 4 | 4 3)
done

      Computed 138 non-zero integrals.

  ==> Iterations <==

                        Total Energy        Delta E      Density RMS

   @RHF iter   1:   -73.24174955634248   -1.86524e+01    0.00000e+00 
   @RHF iter   2:   -74.93100737637670   -1.68926e+00    4.01332e-01 
   @RHF iter   3:   -74.96443337663092   -3.34260e-02    5.77462e-02 
   @RHF iter   4:   -74.96572858695643   -1.29521e-03    9.59744e-03 
   @RHF iter   5:   -74.96586713682814   -1.38550e-04    3.66078e-03 
   @RHF iter   6:   -74.96589108128683   -2.39445e-05    1.42755e-03 
   @RHF iter   7:   -74.96589563118241   -4.54990e-06    6.12927e-04 
   @RHF iter   8:   -74.96589651736699   -8.86185e-07    2.65945e-04 
   @RHF iter   9:   -74.96589669116236   -1.73795e-07    1.16793e-04 
   @RHF iter  10:   -74.96589672531493   -3.41526e-08    5.15132e-05 
   @RHF iter  11:   -74.96589673203013   -6.71520e-09    2.27802e-05 
   @RHF iter  12:   -74.96589673335075   -1.32061e-09    1.00869e-05 
   @RHF iter  13:   -74.96589673361049   -2.59746e-10    4.46956e-06 
   @RHF iter  14:   -74.96589673366154   -5.10454e-11    1.98124e-06 
   @RHF iter  15:   -74.96589673367157   -1.00329e-11    8.78415e-07 
   @RHF iter  16:   -74.96589673367359   -2.01794e-12    3.89503e-07 
   @RHF iter  17:   -74.96589673367387   -2.84217e-13    1.72722e-07 
   @RHF iter  18:   -74.96589673367399   -1.13687e-13    7.65949e-08 
   @RHF iter  19:   -74.96589673367407   -8.52651e-14    3.39672e-08 
   @RHF iter  20:   -74.96589673367404    2.84217e-14    1.50634e-08 
   @RHF iter  21:   -74.96589673367401    2.84217e-14    6.68022e-09 
   @RHF iter  22:   -74.96589673367404   -2.84217e-14    2.96250e-09 
   @RHF iter  23:   -74.96589673367404    0.00000e+00    1.31379e-09 
   @RHF iter  24:   -74.96589673367407   -2.84217e-14    5.82633e-10 
   @RHF iter  25:   -74.96589673367407    0.00000e+00    2.58383e-10 
   @RHF iter  26:   -74.96589673367404    2.84217e-14    1.14588e-10 

  ==> Post-Iterations <==

	Orbital Energies (a.u.)
	-----------------------

	Doubly Occupied:                                                      

	   1A1   -20.251393     2A1    -1.256922     1B2    -0.593893  
	   3A1    -0.459068     1B1    -0.392420  

	Virtual:                                                              

	   4A1     0.580694     2B2     0.692445  

	Final Occupation by Irrep:
	         A1    A2    B1    B2 
	DOCC [     3,    0,    1,    1 ]

  Energy converged.

  @RHF Final Energy:   -74.96589673367404

  ==> Properties <==

 OEPROP: One-electron properties/analyses.
  by Rob Parrish and Justin Turney.
  built on LIBMINTS.

 Dipole Moment: (a.u.)
     X:     0.0000      Y:     0.0000      Z:     0.6715     Total:     0.6715

 Dipole Moment: (Debye)
     X:     0.0000      Y:     0.0000      Z:     1.7067     Total:     1.7067


  Saving occupied orbitals to File 100.

*** tstop() called on mac10147 at Tue Jun 14 09:57:13 2011
	user time   =       1.08 seconds =       0.02 minutes
	system time =       0.18 seconds =       0.00 minutes
	total time  =          0 seconds =       0.00 minutes

*** tstart() called on mac10147
*** at Tue Jun 14 09:57:13 2011

	There are an even number of electrons - assuming singlet.
	Specify the multiplicity with the MULTP option in the
	input if this is incorrect


         ---------------------------------------------------------
                                   SCF
            by Justin Turney, Rob Parrish, and Andy Simmonnett
                              RHF Reference
                        1 Threads,    256 MiB Core
         ---------------------------------------------------------

  ==> Geometry <==

    Molecular point group: c2v

    Geometry (in Angstrom), charge = 0, multiplicity = 1:

       Center              X                  Y                   Z       
    ------------   -----------------  -----------------  -----------------
           O          0.000000000000     0.000000000000    -0.070734548431
           H          0.000000000000     0.760020622083     0.561304307195
           H          0.000000000000    -0.760020622083     0.561304307195

    Number of unique atoms: 2

    Atoms equivalency:
       unique atom 0: 0 
       unique atom 1: 1 2 

  Running in c2v symmetry.

  Nuclear repulsion =    8.913592643128030

  Charge       = 0
  Multiplicity = 1
  Electrons    = 10
  Nalpha       = 5
  Nbeta        = 5

  ==> Algorithm <==

  SCF Algorithm Type is PK.
  DIIS disabled.
  MOM disabled.
  Guess Type is CORE.
  Energy threshold   = 1.00e-10
  Density threshold  = 1.00e-10
  Integral threshold = 0.00e+00

  ==> Primary Basis: STO-3G <==

  Basis Set
    Number of shells: 5
    Number of basis function: 7
    Number of Cartesian functions: 7
    Spherical Harmonics?: true
    Max angular momentum: 1

  ==> Pre-Iterations <==

  Minimum eigenvalue in the overlap matrix is 3.6256694758E-01.
  Using Symmetric Orthogonalization.
  SCF Guess: Core (One-Electron) Hamiltonian.

  Initial RHF energy:   -54.58450651977707

   -------------------------------------------------------
    Irrep   Nso     Nmo     Nalpha   Nbeta   Ndocc  Nsocc
   -------------------------------------------------------
     A1         4       4       3       3       3       0
     A2         0       0       0       0       0       0
     B1         1       1       1       1       1       0
     B2         2       2       1       1       1       0
   -------------------------------------------------------
    Total       7       7       5       5       5       0
   -------------------------------------------------------

  ==> Integral Setup <==

 MINTS: Wrapper to libmints.
   by Justin Turney

   Calculation information:
      Number of atoms:                   3
      Number of AO shells:               5
      Number of SO shells:               4
      Number of primitives:             15
      Number of atomic orbitals:         7
      Number of basis functions:         7

      Number of irreps:                  4
      Number of functions per irrep: [   4    0    1    2 ]

      Computing integrals...for (0 0 | 0 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(0 0 | 0 0)
for (1 0 | 0 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 0 | 0 0)
for (1 1 | 0 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 1 | 0 0)
for (1 0 | 1 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 0 | 1 0)
for (1 1 | 1 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 1 | 1 0)
for (1 1 | 1 1) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 1 | 1 1)
for (0 0 | 2 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (0 0 | 2 1) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (1 0 | 2 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (1 0 | 2 1) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (1 1 | 2 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (1 1 | 2 1) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (0 0 | 2 2) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(0 0 | 2 2)
for (2 0 | 2 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 0 | 2 0)
for (1 0 | 2 2) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 0 | 2 2)
for (2 1 | 2 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 1 | 2 0)
for (1 1 | 2 2) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 1 | 2 2)
for (2 1 | 2 1) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 1 | 2 1)
for (2 0 | 2 2) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (2 1 | 2 2) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (2 2 | 2 2) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 2 | 2 2)
for (3 0 | 0 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 0 | 0 0)
for (3 1 | 0 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 1 | 0 0)
for (3 0 | 1 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 0 | 1 0)
for (3 1 | 1 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 1 | 1 0)
for (3 0 | 1 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 0 | 1 1)
for (3 1 | 1 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 1 | 1 1)
for (0 0 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 4
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(0 0 | 2 3)
for (3 0 | 2 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 0 | 2 0)
for (1 0 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 4
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 0 | 2 3)
for (3 1 | 2 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 1 | 2 0)
for (3 0 | 2 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 0 | 2 1)
for (1 1 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 4
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 1 | 2 3)
for (3 1 | 2 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 1 | 2 1)
for (2 3 | 2 0) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 3 | 2 0)
for (3 0 | 2 2) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 0 | 2 2)
for (2 3 | 2 1) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 3 | 2 1)
for (3 1 | 2 2) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 1 | 2 2)
for (2 3 | 2 2) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 3 | 2 2)
for (3 3 | 0 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 1
	0
	(3 3 | 0 0)
	(3 4 | 0 0)
for (3 0 | 3 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 3
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 0 | 3 0)
	(3 0 | 4 0)
for (3 3 | 1 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 1
	0
	(3 3 | 1 0)
	(3 4 | 1 0)
for (3 1 | 3 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 3
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 1 | 3 0)
	(3 1 | 4 0)
for (3 3 | 1 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 1
	0
	(3 3 | 1 1)
	(3 4 | 1 1)
for (3 1 | 3 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 3
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 1 | 3 1)
	(3 1 | 4 1)
for (3 3 | 2 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 1
	0
	(3 3 | 2 0)
	(3 4 | 2 0)
for (3 0 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 3
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 0 | 2 3)
	(3 0 | 2 4)
for (3 3 | 2 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 1
	0
	(3 3 | 2 1)
	(3 4 | 2 1)
for (3 1 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 3
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 1 | 2 3)
	(3 1 | 2 4)
for (3 3 | 2 2) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 1
	0
	(3 3 | 2 2)
	(3 4 | 2 2)
for (2 3 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 3
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 3
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 2
	0
	1
	(2 3 | 2 3)
	(2 3 | 2 4)
for (3 3 | 3 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 3
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 3
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 3 | 3 0)
	(3 3 | 4 0)
	(3 4 | 3 0)
	(3 4 | 4 0)
for (3 3 | 3 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 3
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 3
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 3 | 3 1)
	(3 3 | 4 1)
	(3 4 | 3 1)
	(3 4 | 4 1)
for (3 3 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 3
	klstablizer: 3
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 3 | 2 3)
	(3 3 | 2 4)
	(3 4 | 2 3)
	(3 4 | 2 4)
for (3 3 | 3 3) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 3
	lstablizer: 3
	ijstablizer: 3
	klstablizer: 3
	R.size = 2
	0
	1
	S.size = 2
	0
	1
	T.size = 2
	0
	1
	(3 3 | 3 3)
	(3 3 | 3 4)
	(3 3 | 4 4)
	(3 3 | 4 3)
	(3 4 | 3 3)
	(3 4 | 3 4)
	(3 4 | 4 4)
	(3 4 | 4 3)
done

      Computed 138 non-zero integrals.

  ==> Iterations <==

                        Total Energy        Delta E      Density RMS

   @RHF iter   1:   -73.24138670680355   -1.86569e+01    0.00000e+00 
   @RHF iter   2:   -74.93217165644157   -1.69078e+00    4.01350e-01 
   @RHF iter   3:   -74.96446890248733   -3.22972e-02    5.67582e-02 
   @RHF iter   4:   -74.96572484083156   -1.25594e-03    9.49792e-03 
   @RHF iter   5:   -74.96586096785893   -1.36127e-04    3.63105e-03 
   @RHF iter   6:   -74.96588450543346   -2.35376e-05    1.41887e-03 
   @RHF iter   7:   -74.96588896856139   -4.46313e-06    6.08335e-04 
   @RHF iter   8:   -74.96588983567538   -8.67114e-07    2.63683e-04 
   @RHF iter   9:   -74.96589000529730   -1.69622e-07    1.15651e-04 
   @RHF iter  10:   -74.96589003854456   -3.32473e-08    5.09458e-05 
   @RHF iter  11:   -74.96589004506508   -6.52052e-09    2.25005e-05 
   @RHF iter  12:   -74.96589004634416   -1.27908e-09    9.95028e-06 
   @RHF iter  13:   -74.96589004659504   -2.50878e-10    4.40339e-06 
   @RHF iter  14:   -74.96589004664423   -4.91980e-11    1.94941e-06 
   @RHF iter  15:   -74.96589004665394   -9.70601e-12    8.63199e-07 
   @RHF iter  16:   -74.96589004665579   -1.84741e-12    3.82267e-07 
   @RHF iter  17:   -74.96589004665620   -4.12115e-13    1.69297e-07 
   @RHF iter  18:   -74.96589004665630   -9.94760e-14    7.49800e-08 
   @RHF iter  19:   -74.96589004665628    1.42109e-14    3.32086e-08 
   @RHF iter  20:   -74.96589004665628    0.00000e+00    1.47082e-08 
   @RHF iter  21:   -74.96589004665630   -1.42109e-14    6.51434e-09 
   @RHF iter  22:   -74.96589004665623    7.10543e-14    2.88525e-09 
   @RHF iter  23:   -74.96589004665628   -5.68434e-14    1.27790e-09 
   @RHF iter  24:   -74.96589004665623    5.68434e-14    5.65994e-10 
   @RHF iter  25:   -74.96589004665628   -5.68434e-14    2.50681e-10 
   @RHF iter  26:   -74.96589004665626    2.84217e-14    1.11031e-10 

  ==> Post-Iterations <==

	Orbital Energies (a.u.)
	-----------------------

	Doubly Occupied:                                                      

	   1A1   -20.250888     2A1    -1.257479     1B2    -0.595143  
	   3A1    -0.458728     1B1    -0.392343  

	Virtual:                                                              

	   4A1     0.581939     2B2     0.694974  

	Final Occupation by Irrep:
	         A1    A2    B1    B2 
	DOCC [     3,    0,    1,    1 ]

  Energy converged.

  @RHF Final Energy:   -74.96589004665626

  ==> Properties <==

 OEPROP: One-electron properties/analyses.
  by Rob Parrish and Justin Turney.
  built on LIBMINTS.

 Dipole Moment: (a.u.)
     X:     0.0000      Y:     0.0000      Z:     0.6719     Total:     0.6719

 Dipole Moment: (Debye)
     X:     0.0000      Y:     0.0000      Z:     1.7078     Total:     1.7078


  Saving occupied orbitals to File 100.

*** tstop() called on mac10147 at Tue Jun 14 09:57:13 2011
	user time   =       1.12 seconds =       0.02 minutes
	system time =       0.19 seconds =       0.00 minutes
	total time  =          0 seconds =       0.00 minutes

*** tstart() called on mac10147
*** at Tue Jun 14 09:57:13 2011

	There are an even number of electrons - assuming singlet.
	Specify the multiplicity with the MULTP option in the
	input if this is incorrect


         ---------------------------------------------------------
                                   SCF
            by Justin Turney, Rob Parrish, and Andy Simmonnett
                              RHF Reference
                        1 Threads,    256 MiB Core
         ---------------------------------------------------------

  ==> Geometry <==

    Molecular point group: c2v

    Geometry (in Angstrom), charge = 0, multiplicity = 1:

       Center              X                  Y                   Z       
    ------------   -----------------  -----------------  -----------------
           O          0.000000000000     0.000000000000    -0.070882628977
           H          0.000000000000     0.756293328549     0.562479380061
           H          0.000000000000    -0.756293328549     0.562479380061

    Number of unique atoms: 2

    Atoms equivalency:
       unique atom 0: 0 
       unique atom 1: 1 2 

  Running in c2v symmetry.

  Nuclear repulsion =    8.932795172911112

  Charge       = 0
  Multiplicity = 1
  Electrons    = 10
  Nalpha       = 5
  Nbeta        = 5

  ==> Algorithm <==

  SCF Algorithm Type is PK.
  DIIS disabled.
  MOM disabled.
  Guess Type is CORE.
  Energy threshold   = 1.00e-10
  Density threshold  = 1.00e-10
  Integral threshold = 0.00e+00

  ==> Primary Basis: STO-3G <==

  Basis Set
    Number of shells: 5
    Number of basis function: 7
    Number of Cartesian functions: 7
    Spherical Harmonics?: true
    Max angular momentum: 1

  ==> Pre-Iterations <==

  Minimum eigenvalue in the overlap matrix is 3.6125341591E-01.
  Using Symmetric Orthogonalization.
  SCF Guess: Core (One-Electron) Hamiltonian.

  Initial RHF energy:   -54.57649883255483

   -------------------------------------------------------
    Irrep   Nso     Nmo     Nalpha   Nbeta   Ndocc  Nsocc
   -------------------------------------------------------
     A1         4       4       3       3       3       0
     A2         0       0       0       0       0       0
     B1         1       1       1       1       1       0
     B2         2       2       1       1       1       0
   -------------------------------------------------------
    Total       7       7       5       5       5       0
   -------------------------------------------------------

  ==> Integral Setup <==

 MINTS: Wrapper to libmints.
   by Justin Turney

   Calculation information:
      Number of atoms:                   3
      Number of AO shells:               5
      Number of SO shells:               4
      Number of primitives:             15
      Number of atomic orbitals:         7
      Number of basis functions:         7

      Number of irreps:                  4
      Number of functions per irrep: [   4    0    1    2 ]

      Computing integrals...for (0 0 | 0 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(0 0 | 0 0)
for (1 0 | 0 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 0 | 0 0)
for (1 1 | 0 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 1 | 0 0)
for (1 0 | 1 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 0 | 1 0)
for (1 1 | 1 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 1 | 1 0)
for (1 1 | 1 1) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 1 | 1 1)
for (0 0 | 2 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (0 0 | 2 1) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (1 0 | 2 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (1 0 | 2 1) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (1 1 | 2 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (1 1 | 2 1) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (0 0 | 2 2) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(0 0 | 2 2)
for (2 0 | 2 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 0 | 2 0)
for (1 0 | 2 2) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 0 | 2 2)
for (2 1 | 2 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 1 | 2 0)
for (1 1 | 2 2) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 1 | 2 2)
for (2 1 | 2 1) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 1 | 2 1)
for (2 0 | 2 2) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (2 1 | 2 2) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (2 2 | 2 2) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 2 | 2 2)
for (3 0 | 0 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 0 | 0 0)
for (3 1 | 0 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 1 | 0 0)
for (3 0 | 1 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 0 | 1 0)
for (3 1 | 1 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 1 | 1 0)
for (3 0 | 1 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 0 | 1 1)
for (3 1 | 1 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 1 | 1 1)
for (0 0 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 4
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(0 0 | 2 3)
for (3 0 | 2 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 0 | 2 0)
for (1 0 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 4
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 0 | 2 3)
for (3 1 | 2 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 1 | 2 0)
for (3 0 | 2 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 0 | 2 1)
for (1 1 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 4
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 1 | 2 3)
for (3 1 | 2 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 1 | 2 1)
for (2 3 | 2 0) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 3 | 2 0)
for (3 0 | 2 2) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 0 | 2 2)
for (2 3 | 2 1) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 3 | 2 1)
for (3 1 | 2 2) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 1 | 2 2)
for (2 3 | 2 2) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 3 | 2 2)
for (3 3 | 0 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 1
	0
	(3 3 | 0 0)
	(3 4 | 0 0)
for (3 0 | 3 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 3
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 0 | 3 0)
	(3 0 | 4 0)
for (3 3 | 1 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 1
	0
	(3 3 | 1 0)
	(3 4 | 1 0)
for (3 1 | 3 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 3
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 1 | 3 0)
	(3 1 | 4 0)
for (3 3 | 1 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 1
	0
	(3 3 | 1 1)
	(3 4 | 1 1)
for (3 1 | 3 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 3
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 1 | 3 1)
	(3 1 | 4 1)
for (3 3 | 2 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 1
	0
	(3 3 | 2 0)
	(3 4 | 2 0)
for (3 0 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 3
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 0 | 2 3)
	(3 0 | 2 4)
for (3 3 | 2 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 1
	0
	(3 3 | 2 1)
	(3 4 | 2 1)
for (3 1 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 3
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 1 | 2 3)
	(3 1 | 2 4)
for (3 3 | 2 2) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 1
	0
	(3 3 | 2 2)
	(3 4 | 2 2)
for (2 3 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 3
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 3
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 2
	0
	1
	(2 3 | 2 3)
	(2 3 | 2 4)
for (3 3 | 3 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 3
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 3
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 3 | 3 0)
	(3 3 | 4 0)
	(3 4 | 3 0)
	(3 4 | 4 0)
for (3 3 | 3 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 3
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 3
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 3 | 3 1)
	(3 3 | 4 1)
	(3 4 | 3 1)
	(3 4 | 4 1)
for (3 3 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 3
	klstablizer: 3
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 3 | 2 3)
	(3 3 | 2 4)
	(3 4 | 2 3)
	(3 4 | 2 4)
for (3 3 | 3 3) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 3
	lstablizer: 3
	ijstablizer: 3
	klstablizer: 3
	R.size = 2
	0
	1
	S.size = 2
	0
	1
	T.size = 2
	0
	1
	(3 3 | 3 3)
	(3 3 | 3 4)
	(3 3 | 4 4)
	(3 3 | 4 3)
	(3 4 | 3 3)
	(3 4 | 3 4)
	(3 4 | 4 4)
	(3 4 | 4 3)
done

      Computed 138 non-zero integrals.

  ==> Iterations <==

                        Total Energy        Delta E      Density RMS

   @RHF iter   1:   -73.23979927616213   -1.86633e+01    0.00000e+00 
   @RHF iter   2:   -74.93249472279102   -1.69270e+00    4.01727e-01 
   @RHF iter   3:   -74.96448305753681   -3.19883e-02    5.65378e-02 
   @RHF iter   4:   -74.96572050480840   -1.23745e-03    9.44426e-03 
   @RHF iter   5:   -74.96585386023095   -1.33355e-04    3.59834e-03 
   @RHF iter   6:   -74.96587680041515   -2.29402e-05    1.40268e-03 
   @RHF iter   7:   -74.96588113328443   -4.33287e-06    5.99982e-04 
   @RHF iter   8:   -74.96588197222118   -8.38937e-07    2.59572e-04 
   @RHF iter   9:   -74.96588213579859   -1.63577e-07    1.13648e-04 
   @RHF iter  10:   -74.96588216775885   -3.19603e-08    4.99794e-05 
   @RHF iter  11:   -74.96588217400698   -6.24813e-09    2.20376e-05 
   @RHF iter  12:   -74.96588217522876   -1.22178e-09    9.72988e-06 
   @RHF iter  13:   -74.96588217546763   -2.38870e-10    4.29897e-06 
   @RHF iter  14:   -74.96588217551432   -4.66969e-11    1.90015e-06 
   @RHF iter  15:   -74.96588217552346   -9.13758e-12    8.40046e-07 
   @RHF iter  16:   -74.96588217552527   -1.80478e-12    3.71422e-07 
   @RHF iter  17:   -74.96588217552562   -3.55271e-13    1.64233e-07 
   @RHF iter  18:   -74.96588217552568   -5.68434e-14    7.26218e-08 
   @RHF iter  19:   -74.96588217552572   -4.26326e-14    3.21131e-08 
   @RHF iter  20:   -74.96588217552572    0.00000e+00    1.42004e-08 
   @RHF iter  21:   -74.96588217552571    1.42109e-14    6.27947e-09 
   @RHF iter  22:   -74.96588217552569    1.42109e-14    2.77681e-09 
   @RHF iter  23:   -74.96588217552572   -2.84217e-14    1.22792e-09 
   @RHF iter  24:   -74.96588217552571    1.42109e-14    5.42993e-10 
   @RHF iter  25:   -74.96588217552568    2.84217e-14    2.40114e-10 
   @RHF iter  26:   -74.96588217552571   -2.84217e-14    1.06180e-10 

  ==> Post-Iterations <==

	Orbital Energies (a.u.)
	-----------------------

	Doubly Occupied:                                                      

	   1A1   -20.251091     2A1    -1.258871     1B2    -0.595464  
	   3A1    -0.459898     1B1    -0.392703  

	Virtual:                                                              

	   4A1     0.584458     2B2     0.696209  

	Final Occupation by Irrep:
	         A1    A2    B1    B2 
	DOCC [     3,    0,    1,    1 ]

  Energy converged.

  @RHF Final Energy:   -74.96588217552571

  ==> Properties <==

 OEPROP: One-electron properties/analyses.
  by Rob Parrish and Justin Turney.
  built on LIBMINTS.

 Dipole Moment: (a.u.)
     X:     0.0000      Y:     0.0000      Z:     0.6739     Total:     0.6739

 Dipole Moment: (Debye)
     X:     0.0000      Y:     0.0000      Z:     1.7129     Total:     1.7129


  Saving occupied orbitals to File 100.

*** tstop() called on mac10147 at Tue Jun 14 09:57:13 2011
	user time   =       1.16 seconds =       0.02 minutes
	system time =       0.19 seconds =       0.00 minutes
	total time  =          0 seconds =       0.00 minutes

*** tstart() called on mac10147
*** at Tue Jun 14 09:57:13 2011

	There are an even number of electrons - assuming singlet.
	Specify the multiplicity with the MULTP option in the
	input if this is incorrect


         ---------------------------------------------------------
                                   SCF
            by Justin Turney, Rob Parrish, and Andy Simmonnett
                              RHF Reference
                        1 Threads,    256 MiB Core
         ---------------------------------------------------------

  ==> Geometry <==

    Molecular point group: c2v

    Geometry (in Angstrom), charge = 0, multiplicity = 1:

       Center              X                  Y                   Z       
    ------------   -----------------  -----------------  -----------------
           O          0.000000000000     0.000000000000    -0.070882628977
           H          0.000000000000     0.763747915616     0.562479380061
           H          0.000000000000    -0.763747915616     0.562479380061

    Number of unique atoms: 2

    Atoms equivalency:
       unique atom 0: 0 
       unique atom 1: 1 2 

  Running in c2v symmetry.

  Nuclear repulsion =    8.879841924606280

  Charge       = 0
  Multiplicity = 1
  Electrons    = 10
  Nalpha       = 5
  Nbeta        = 5

  ==> Algorithm <==

  SCF Algorithm Type is PK.
  DIIS disabled.
  MOM disabled.
  Guess Type is CORE.
  Energy threshold   = 1.00e-10
  Density threshold  = 1.00e-10
  Integral threshold = 0.00e+00

  ==> Primary Basis: STO-3G <==

  Basis Set
    Number of shells: 5
    Number of basis function: 7
    Number of Cartesian functions: 7
    Spherical Harmonics?: true
    Max angular momentum: 1

  ==> Pre-Iterations <==

  Minimum eigenvalue in the overlap matrix is 3.6499704632E-01.
  Using Symmetric Orthogonalization.
  SCF Guess: Core (One-Electron) Hamiltonian.

  Initial RHF energy:   -54.59732651574866

   -------------------------------------------------------
    Irrep   Nso     Nmo     Nalpha   Nbeta   Ndocc  Nsocc
   -------------------------------------------------------
     A1         4       4       3       3       3       0
     A2         0       0       0       0       0       0
     B1         1       1       1       1       1       0
     B2         2       2       1       1       1       0
   -------------------------------------------------------
    Total       7       7       5       5       5       0
   -------------------------------------------------------

  ==> Integral Setup <==

 MINTS: Wrapper to libmints.
   by Justin Turney

   Calculation information:
      Number of atoms:                   3
      Number of AO shells:               5
      Number of SO shells:               4
      Number of primitives:             15
      Number of atomic orbitals:         7
      Number of basis functions:         7

      Number of irreps:                  4
      Number of functions per irrep: [   4    0    1    2 ]

      Computing integrals...for (0 0 | 0 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(0 0 | 0 0)
for (1 0 | 0 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 0 | 0 0)
for (1 1 | 0 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 1 | 0 0)
for (1 0 | 1 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 0 | 1 0)
for (1 1 | 1 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 1 | 1 0)
for (1 1 | 1 1) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 1 | 1 1)
for (0 0 | 2 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (0 0 | 2 1) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (1 0 | 2 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (1 0 | 2 1) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (1 1 | 2 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (1 1 | 2 1) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (0 0 | 2 2) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(0 0 | 2 2)
for (2 0 | 2 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 0 | 2 0)
for (1 0 | 2 2) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 0 | 2 2)
for (2 1 | 2 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 1 | 2 0)
for (1 1 | 2 2) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 1 | 2 2)
for (2 1 | 2 1) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 1 | 2 1)
for (2 0 | 2 2) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (2 1 | 2 2) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (2 2 | 2 2) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 2 | 2 2)
for (3 0 | 0 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 0 | 0 0)
for (3 1 | 0 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 1 | 0 0)
for (3 0 | 1 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 0 | 1 0)
for (3 1 | 1 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 1 | 1 0)
for (3 0 | 1 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 0 | 1 1)
for (3 1 | 1 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 1 | 1 1)
for (0 0 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 4
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(0 0 | 2 3)
for (3 0 | 2 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 0 | 2 0)
for (1 0 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 4
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 0 | 2 3)
for (3 1 | 2 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 1 | 2 0)
for (3 0 | 2 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 0 | 2 1)
for (1 1 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 4
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 1 | 2 3)
for (3 1 | 2 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 1 | 2 1)
for (2 3 | 2 0) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 3 | 2 0)
for (3 0 | 2 2) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 0 | 2 2)
for (2 3 | 2 1) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 3 | 2 1)
for (3 1 | 2 2) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 1 | 2 2)
for (2 3 | 2 2) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 3 | 2 2)
for (3 3 | 0 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 1
	0
	(3 3 | 0 0)
	(3 4 | 0 0)
for (3 0 | 3 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 3
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 0 | 3 0)
	(3 0 | 4 0)
for (3 3 | 1 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 1
	0
	(3 3 | 1 0)
	(3 4 | 1 0)
for (3 1 | 3 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 3
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 1 | 3 0)
	(3 1 | 4 0)
for (3 3 | 1 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 1
	0
	(3 3 | 1 1)
	(3 4 | 1 1)
for (3 1 | 3 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 3
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 1 | 3 1)
	(3 1 | 4 1)
for (3 3 | 2 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 1
	0
	(3 3 | 2 0)
	(3 4 | 2 0)
for (3 0 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 3
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 0 | 2 3)
	(3 0 | 2 4)
for (3 3 | 2 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 1
	0
	(3 3 | 2 1)
	(3 4 | 2 1)
for (3 1 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 3
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 1 | 2 3)
	(3 1 | 2 4)
for (3 3 | 2 2) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 1
	0
	(3 3 | 2 2)
	(3 4 | 2 2)
for (2 3 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 3
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 3
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 2
	0
	1
	(2 3 | 2 3)
	(2 3 | 2 4)
for (3 3 | 3 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 3
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 3
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 3 | 3 0)
	(3 3 | 4 0)
	(3 4 | 3 0)
	(3 4 | 4 0)
for (3 3 | 3 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 3
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 3
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 3 | 3 1)
	(3 3 | 4 1)
	(3 4 | 3 1)
	(3 4 | 4 1)
for (3 3 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 3
	klstablizer: 3
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 3 | 2 3)
	(3 3 | 2 4)
	(3 4 | 2 3)
	(3 4 | 2 4)
for (3 3 | 3 3) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 3
	lstablizer: 3
	ijstablizer: 3
	klstablizer: 3
	R.size = 2
	0
	1
	S.size = 2
	0
	1
	T.size = 2
	0
	1
	(3 3 | 3 3)
	(3 3 | 3 4)
	(3 3 | 4 4)
	(3 3 | 4 3)
	(3 4 | 3 3)
	(3 4 | 3 4)
	(3 4 | 4 4)
	(3 4 | 4 3)
done

      Computed 138 non-zero integrals.

  ==> Iterations <==

                        Total Energy        Delta E      Density RMS

   @RHF iter   1:   -73.24331887190043   -1.86460e+01    0.00000e+00 
   @RHF iter   2:   -74.93061797901123   -1.68730e+00    4.00965e-01 
   @RHF iter   3:   -74.96437434041623   -3.37564e-02    5.79805e-02 
   @RHF iter   4:   -74.96568945839741   -1.31512e-03    9.65410e-03 
   @RHF iter   5:   -74.96583093620956   -1.41478e-04    3.69476e-03 
   @RHF iter   6:   -74.96585551204252   -2.45758e-05    1.44426e-03 
   @RHF iter   7:   -74.96586020023275   -4.68819e-06    6.21567e-04 
   @RHF iter   8:   -74.96586111648685   -9.16254e-07    2.70203e-04 
   @RHF iter   9:   -74.96586129676646   -1.80280e-07    1.18873e-04 
   @RHF iter  10:   -74.96586133230721   -3.55408e-08    5.25189e-05 
   @RHF iter  11:   -74.96586133931777   -7.01056e-09    2.32631e-05 
   @RHF iter  12:   -74.96586134070087   -1.38310e-09    1.03174e-05 
   @RHF iter  13:   -74.96586134097369   -2.72820e-10    4.57907e-06 
   @RHF iter  14:   -74.96586134102760   -5.39160e-11    2.03304e-06 
   @RHF iter  15:   -74.96586134103821   -1.06013e-11    9.02821e-07 
   @RHF iter  16:   -74.96586134104025   -2.04636e-12    4.00965e-07 
   @RHF iter  17:   -74.96586134104075   -4.97380e-13    1.78089e-07 
   @RHF iter  18:   -74.96586134104078   -2.84217e-14    7.91010e-08 
   @RHF iter  19:   -74.96586134104082   -4.26326e-14    3.51345e-08 
   @RHF iter  20:   -74.96586134104081    1.42109e-14    1.56060e-08 
   @RHF iter  21:   -74.96586134104083   -2.84217e-14    6.93187e-09 
   @RHF iter  22:   -74.96586134104079    4.26326e-14    3.07901e-09 
   @RHF iter  23:   -74.96586134104079    0.00000e+00    1.36764e-09 
   @RHF iter  24:   -74.96586134104082   -2.84217e-14    6.07480e-10 
   @RHF iter  25:   -74.96586134104079    2.84217e-14    2.69833e-10 
   @RHF iter  26:   -74.96586134104081   -1.42109e-14    1.19857e-10 

  ==> Post-Iterations <==

	Orbital Energies (a.u.)
	-----------------------

	Doubly Occupied:                                                      

	   1A1   -20.251194     2A1    -1.255545     1B2    -0.593563  
	   3A1    -0.457902     1B1    -0.392063  

	Virtual:                                                              

	   4A1     0.578173     2B2     0.691213  

	Final Occupation by Irrep:
	         A1    A2    B1    B2 
	DOCC [     3,    0,    1,    1 ]

  Energy converged.

  @RHF Final Energy:   -74.96586134104081

  ==> Properties <==

 OEPROP: One-electron properties/analyses.
  by Rob Parrish and Justin Turney.
  built on LIBMINTS.

 Dipole Moment: (a.u.)
     X:     0.0000      Y:     0.0000      Z:     0.6695     Total:     0.6695

 Dipole Moment: (Debye)
     X:     0.0000      Y:     0.0000      Z:     1.7016     Total:     1.7016


  Saving occupied orbitals to File 100.

*** tstop() called on mac10147 at Tue Jun 14 09:57:13 2011
	user time   =       1.20 seconds =       0.02 minutes
	system time =       0.20 seconds =       0.00 minutes
	total time  =          0 seconds =       0.00 minutes

*** tstart() called on mac10147
*** at Tue Jun 14 09:57:13 2011

	There are an even number of electrons - assuming singlet.
	Specify the multiplicity with the MULTP option in the
	input if this is incorrect


         ---------------------------------------------------------
                                   SCF
            by Justin Turney, Rob Parrish, and Andy Simmonnett
                              RHF Reference
                        1 Threads,    256 MiB Core
         ---------------------------------------------------------

  ==> Geometry <==

    Molecular point group: c2v

    Geometry (in Angstrom), charge = 0, multiplicity = 1:

       Center              X                  Y                   Z       
    ------------   -----------------  -----------------  -----------------
           O          0.000000000000     0.000000000000    -0.070465489394
           H          0.000000000000     0.760020622083     0.559169226110
           H          0.000000000000    -0.760020622083     0.559169226110

    Number of unique atoms: 2

    Atoms equivalency:
       unique atom 0: 0 
       unique atom 1: 1 2 

  Running in c2v symmetry.

  Nuclear repulsion =    8.926918618943922

  Charge       = 0
  Multiplicity = 1
  Electrons    = 10
  Nalpha       = 5
  Nbeta        = 5

  ==> Algorithm <==

  SCF Algorithm Type is PK.
  DIIS disabled.
  MOM disabled.
  Guess Type is CORE.
  Energy threshold   = 1.00e-10
  Density threshold  = 1.00e-10
  Integral threshold = 0.00e+00

  ==> Primary Basis: STO-3G <==

  Basis Set
    Number of shells: 5
    Number of basis function: 7
    Number of Cartesian functions: 7
    Spherical Harmonics?: true
    Max angular momentum: 1

  ==> Pre-Iterations <==

  Minimum eigenvalue in the overlap matrix is 3.6155936293E-01.
  Using Symmetric Orthogonalization.
  SCF Guess: Core (One-Electron) Hamiltonian.

  Initial RHF energy:   -54.58006409828782

   -------------------------------------------------------
    Irrep   Nso     Nmo     Nalpha   Nbeta   Ndocc  Nsocc
   -------------------------------------------------------
     A1         4       4       3       3       3       0
     A2         0       0       0       0       0       0
     B1         1       1       1       1       1       0
     B2         2       2       1       1       1       0
   -------------------------------------------------------
    Total       7       7       5       5       5       0
   -------------------------------------------------------

  ==> Integral Setup <==

 MINTS: Wrapper to libmints.
   by Justin Turney

   Calculation information:
      Number of atoms:                   3
      Number of AO shells:               5
      Number of SO shells:               4
      Number of primitives:             15
      Number of atomic orbitals:         7
      Number of basis functions:         7

      Number of irreps:                  4
      Number of functions per irrep: [   4    0    1    2 ]

      Computing integrals...for (0 0 | 0 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(0 0 | 0 0)
for (1 0 | 0 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 0 | 0 0)
for (1 1 | 0 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 1 | 0 0)
for (1 0 | 1 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 0 | 1 0)
for (1 1 | 1 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 1 | 1 0)
for (1 1 | 1 1) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 1 | 1 1)
for (0 0 | 2 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (0 0 | 2 1) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (1 0 | 2 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (1 0 | 2 1) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (1 1 | 2 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (1 1 | 2 1) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (0 0 | 2 2) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(0 0 | 2 2)
for (2 0 | 2 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 0 | 2 0)
for (1 0 | 2 2) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 0 | 2 2)
for (2 1 | 2 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 1 | 2 0)
for (1 1 | 2 2) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 1 | 2 2)
for (2 1 | 2 1) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 1 | 2 1)
for (2 0 | 2 2) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (2 1 | 2 2) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (2 2 | 2 2) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 2 | 2 2)
for (3 0 | 0 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 0 | 0 0)
for (3 1 | 0 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 1 | 0 0)
for (3 0 | 1 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 0 | 1 0)
for (3 1 | 1 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 1 | 1 0)
for (3 0 | 1 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 0 | 1 1)
for (3 1 | 1 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 1 | 1 1)
for (0 0 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 4
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(0 0 | 2 3)
for (3 0 | 2 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 0 | 2 0)
for (1 0 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 4
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 0 | 2 3)
for (3 1 | 2 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 1 | 2 0)
for (3 0 | 2 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 0 | 2 1)
for (1 1 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 4
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 1 | 2 3)
for (3 1 | 2 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 1 | 2 1)
for (2 3 | 2 0) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 3 | 2 0)
for (3 0 | 2 2) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 0 | 2 2)
for (2 3 | 2 1) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 3 | 2 1)
for (3 1 | 2 2) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 1 | 2 2)
for (2 3 | 2 2) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 3 | 2 2)
for (3 3 | 0 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 1
	0
	(3 3 | 0 0)
	(3 4 | 0 0)
for (3 0 | 3 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 3
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 0 | 3 0)
	(3 0 | 4 0)
for (3 3 | 1 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 1
	0
	(3 3 | 1 0)
	(3 4 | 1 0)
for (3 1 | 3 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 3
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 1 | 3 0)
	(3 1 | 4 0)
for (3 3 | 1 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 1
	0
	(3 3 | 1 1)
	(3 4 | 1 1)
for (3 1 | 3 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 3
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 1 | 3 1)
	(3 1 | 4 1)
for (3 3 | 2 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 1
	0
	(3 3 | 2 0)
	(3 4 | 2 0)
for (3 0 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 3
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 0 | 2 3)
	(3 0 | 2 4)
for (3 3 | 2 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 1
	0
	(3 3 | 2 1)
	(3 4 | 2 1)
for (3 1 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 3
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 1 | 2 3)
	(3 1 | 2 4)
for (3 3 | 2 2) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 1
	0
	(3 3 | 2 2)
	(3 4 | 2 2)
for (2 3 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 3
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 3
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 2
	0
	1
	(2 3 | 2 3)
	(2 3 | 2 4)
for (3 3 | 3 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 3
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 3
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 3 | 3 0)
	(3 3 | 4 0)
	(3 4 | 3 0)
	(3 4 | 4 0)
for (3 3 | 3 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 3
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 3
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 3 | 3 1)
	(3 3 | 4 1)
	(3 4 | 3 1)
	(3 4 | 4 1)
for (3 3 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 3
	klstablizer: 3
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 3 | 2 3)
	(3 3 | 2 4)
	(3 4 | 2 3)
	(3 4 | 2 4)
for (3 3 | 3 3) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 3
	lstablizer: 3
	ijstablizer: 3
	klstablizer: 3
	R.size = 2
	0
	1
	S.size = 2
	0
	1
	T.size = 2
	0
	1
	(3 3 | 3 3)
	(3 3 | 3 4)
	(3 3 | 4 4)
	(3 3 | 4 3)
	(3 4 | 3 3)
	(3 4 | 3 4)
	(3 4 | 4 4)
	(3 4 | 4 3)
done

      Computed 138 non-zero integrals.

  ==> Iterations <==

                        Total Energy        Delta E      Density RMS

   @RHF iter   1:   -73.24105208346961   -1.86610e+01    0.00000e+00 
   @RHF iter   2:   -74.93319104027904   -1.69214e+00    4.01370e-01 
   @RHF iter   3:   -74.96448618767127   -3.12951e-02    5.58678e-02 
   @RHF iter   4:   -74.96570767385637   -1.22149e-03    9.40970e-03 
   @RHF iter   5:   -74.96584162784237   -1.33954e-04    3.60425e-03 
   @RHF iter   6:   -74.96586479786291   -2.31700e-05    1.41089e-03 
   @RHF iter   7:   -74.96586918290896   -4.38505e-06    6.04150e-04 
   @RHF iter   8:   -74.96587003294195   -8.50033e-07    2.61628e-04 
   @RHF iter   9:   -74.96587019884200   -1.65900e-07    1.14619e-04 
   @RHF iter  10:   -74.96587023128518   -3.24432e-08    5.04340e-05 
   @RHF iter  11:   -74.96587023763342   -6.34824e-09    2.22489e-05 
   @RHF iter  12:   -74.96587023887574   -1.24231e-09    9.82774e-06 
   @RHF iter  13:   -74.96587023911891   -2.43176e-10    4.34417e-06 
   @RHF iter  14:   -74.96587023916649   -4.75779e-11    1.92099e-06 
   @RHF iter  15:   -74.96587023917576   -9.26548e-12    8.49634e-07 
   @RHF iter  16:   -74.96587023917766   -1.90425e-12    3.75828e-07 
   @RHF iter  17:   -74.96587023917800   -3.41061e-13    1.66254e-07 
   @RHF iter  18:   -74.96587023917806   -5.68434e-14    7.35479e-08 
   @RHF iter  19:   -74.96587023917812   -5.68434e-14    3.25369e-08 
   @RHF iter  20:   -74.96587023917806    5.68434e-14    1.43942e-08 
   @RHF iter  21:   -74.96587023917814   -8.52651e-14    6.36796e-09 
   @RHF iter  22:   -74.96587023917809    5.68434e-14    2.81718e-09 
   @RHF iter  23:   -74.96587023917812   -2.84217e-14    1.24632e-09 
   @RHF iter  24:   -74.96587023917809    2.84217e-14    5.51372e-10 
   @RHF iter  25:   -74.96587023917809    0.00000e+00    2.43928e-10 
   @RHF iter  26:   -74.96587023917806    2.84217e-14    1.07912e-10 

  ==> Post-Iterations <==

	Orbital Energies (a.u.)
	-----------------------

	Doubly Occupied:                                                      

	   1A1   -20.250428     2A1    -1.257983     1B2    -0.596278  
	   3A1    -0.458416     1B1    -0.392272  

	Virtual:                                                              

	   4A1     0.583066     2B2     0.697278  

	Final Occupation by Irrep:
	         A1    A2    B1    B2 
	DOCC [     3,    0,    1,    1 ]

  Energy converged.

  @RHF Final Energy:   -74.96587023917806

  ==> Properties <==

 OEPROP: One-electron properties/analyses.
  by Rob Parrish and Justin Turney.
  built on LIBMINTS.

 Dipole Moment: (a.u.)
     X:     0.0000      Y:     0.0000      Z:     0.6722     Total:     0.6722

 Dipole Moment: (Debye)
     X:     0.0000      Y:     0.0000      Z:     1.7087     Total:     1.7087


  Saving occupied orbitals to File 100.

*** tstop() called on mac10147 at Tue Jun 14 09:57:13 2011
	user time   =       1.24 seconds =       0.02 minutes
	system time =       0.21 seconds =       0.00 minutes
	total time  =          0 seconds =       0.00 minutes

*** tstart() called on mac10147
*** at Tue Jun 14 09:57:13 2011

	There are an even number of electrons - assuming singlet.
	Specify the multiplicity with the MULTP option in the
	input if this is incorrect


         ---------------------------------------------------------
                                   SCF
            by Justin Turney, Rob Parrish, and Andy Simmonnett
                              RHF Reference
                        1 Threads,    256 MiB Core
         ---------------------------------------------------------

  ==> Geometry <==

    Molecular point group: c2v

    Geometry (in Angstrom), charge = 0, multiplicity = 1:

       Center              X                  Y                   Z       
    ------------   -----------------  -----------------  -----------------
           O          0.000000000000     0.000000000000    -0.071299768560
           H          0.000000000000     0.760020622083     0.565789534011
           H          0.000000000000    -0.760020622083     0.565789534011

    Number of unique atoms: 2

    Atoms equivalency:
       unique atom 0: 0 
       unique atom 1: 1 2 

  Running in c2v symmetry.

  Nuclear repulsion =    8.885636022966239

  Charge       = 0
  Multiplicity = 1
  Electrons    = 10
  Nalpha       = 5
  Nbeta        = 5

  ==> Algorithm <==

  SCF Algorithm Type is PK.
  DIIS disabled.
  MOM disabled.
  Guess Type is CORE.
  Energy threshold   = 1.00e-10
  Density threshold  = 1.00e-10
  Integral threshold = 0.00e+00

  ==> Primary Basis: STO-3G <==

  Basis Set
    Number of shells: 5
    Number of basis function: 7
    Number of Cartesian functions: 7
    Spherical Harmonics?: true
    Max angular momentum: 1

  ==> Pre-Iterations <==

  Minimum eigenvalue in the overlap matrix is 3.6469450537E-01.
  Using Symmetric Orthogonalization.
  SCF Guess: Core (One-Electron) Hamiltonian.

  Initial RHF energy:   -54.59381245486523

   -------------------------------------------------------
    Irrep   Nso     Nmo     Nalpha   Nbeta   Ndocc  Nsocc
   -------------------------------------------------------
     A1         4       4       3       3       3       0
     A2         0       0       0       0       0       0
     B1         1       1       1       1       1       0
     B2         2       2       1       1       1       0
   -------------------------------------------------------
    Total       7       7       5       5       5       0
   -------------------------------------------------------

  ==> Integral Setup <==

 MINTS: Wrapper to libmints.
   by Justin Turney

   Calculation information:
      Number of atoms:                   3
      Number of AO shells:               5
      Number of SO shells:               4
      Number of primitives:             15
      Number of atomic orbitals:         7
      Number of basis functions:         7

      Number of irreps:                  4
      Number of functions per irrep: [   4    0    1    2 ]

      Computing integrals...for (0 0 | 0 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(0 0 | 0 0)
for (1 0 | 0 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 0 | 0 0)
for (1 1 | 0 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 1 | 0 0)
for (1 0 | 1 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 0 | 1 0)
for (1 1 | 1 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 1 | 1 0)
for (1 1 | 1 1) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 1 | 1 1)
for (0 0 | 2 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (0 0 | 2 1) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (1 0 | 2 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (1 0 | 2 1) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (1 1 | 2 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (1 1 | 2 1) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (0 0 | 2 2) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(0 0 | 2 2)
for (2 0 | 2 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 0 | 2 0)
for (1 0 | 2 2) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 0 | 2 2)
for (2 1 | 2 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 1 | 2 0)
for (1 1 | 2 2) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 1 | 2 2)
for (2 1 | 2 1) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 1 | 2 1)
for (2 0 | 2 2) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (2 1 | 2 2) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (2 2 | 2 2) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 2 | 2 2)
for (3 0 | 0 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 0 | 0 0)
for (3 1 | 0 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 1 | 0 0)
for (3 0 | 1 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 0 | 1 0)
for (3 1 | 1 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 1 | 1 0)
for (3 0 | 1 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 0 | 1 1)
for (3 1 | 1 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 1 | 1 1)
for (0 0 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 4
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(0 0 | 2 3)
for (3 0 | 2 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 0 | 2 0)
for (1 0 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 4
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 0 | 2 3)
for (3 1 | 2 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 1 | 2 0)
for (3 0 | 2 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 0 | 2 1)
for (1 1 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 4
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 1 | 2 3)
for (3 1 | 2 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 1 | 2 1)
for (2 3 | 2 0) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 3 | 2 0)
for (3 0 | 2 2) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 0 | 2 2)
for (2 3 | 2 1) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 3 | 2 1)
for (3 1 | 2 2) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 1 | 2 2)
for (2 3 | 2 2) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 3 | 2 2)
for (3 3 | 0 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 1
	0
	(3 3 | 0 0)
	(3 4 | 0 0)
for (3 0 | 3 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 3
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 0 | 3 0)
	(3 0 | 4 0)
for (3 3 | 1 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 1
	0
	(3 3 | 1 0)
	(3 4 | 1 0)
for (3 1 | 3 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 3
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 1 | 3 0)
	(3 1 | 4 0)
for (3 3 | 1 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 1
	0
	(3 3 | 1 1)
	(3 4 | 1 1)
for (3 1 | 3 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 3
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 1 | 3 1)
	(3 1 | 4 1)
for (3 3 | 2 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 1
	0
	(3 3 | 2 0)
	(3 4 | 2 0)
for (3 0 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 3
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 0 | 2 3)
	(3 0 | 2 4)
for (3 3 | 2 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 1
	0
	(3 3 | 2 1)
	(3 4 | 2 1)
for (3 1 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 3
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 1 | 2 3)
	(3 1 | 2 4)
for (3 3 | 2 2) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 1
	0
	(3 3 | 2 2)
	(3 4 | 2 2)
for (2 3 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 3
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 3
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 2
	0
	1
	(2 3 | 2 3)
	(2 3 | 2 4)
for (3 3 | 3 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 3
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 3
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 3 | 3 0)
	(3 3 | 4 0)
	(3 4 | 3 0)
	(3 4 | 4 0)
for (3 3 | 3 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 3
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 3
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 3 | 3 1)
	(3 3 | 4 1)
	(3 4 | 3 1)
	(3 4 | 4 1)
for (3 3 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 3
	klstablizer: 3
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 3 | 2 3)
	(3 3 | 2 4)
	(3 4 | 2 3)
	(3 4 | 2 4)
for (3 3 | 3 3) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 3
	lstablizer: 3
	ijstablizer: 3
	klstablizer: 3
	R.size = 2
	0
	1
	S.size = 2
	0
	1
	T.size = 2
	0
	1
	(3 3 | 3 3)
	(3 3 | 3 4)
	(3 3 | 4 4)
	(3 3 | 4 3)
	(3 4 | 3 3)
	(3 4 | 3 4)
	(3 4 | 4 4)
	(3 4 | 4 3)
done

      Computed 138 non-zero integrals.

  ==> Iterations <==

                        Total Energy        Delta E      Density RMS

   @RHF iter   1:   -73.24207424127478   -1.86483e+01    0.00000e+00 
   @RHF iter   2:   -74.92991100614928   -1.68784e+00    4.01320e-01 
   @RHF iter   3:   -74.96438609661971   -3.44751e-02    5.86509e-02 
   @RHF iter   4:   -74.96571826375957   -1.33217e-03    9.69019e-03 
   @RHF iter   5:   -74.96585904450342   -1.40781e-04    3.68800e-03 
   @RHF iter   6:   -74.96588336068078   -2.43162e-05    1.43534e-03 
   @RHF iter   7:   -74.96588799014246   -4.62946e-06    6.17088e-04 
   @RHF iter   8:   -74.96588889389803   -9.03756e-07    2.68001e-04 
   @RHF iter   9:   -74.96588907155540   -1.77657e-07    1.17834e-04 
   @RHF iter  10:   -74.96588910654908   -3.49937e-08    5.20325e-05 
   @RHF iter  11:   -74.96588911344581   -6.89673e-09    2.30369e-05 
   @RHF iter  12:   -74.96588911480536   -1.35955e-09    1.02125e-05 
   @RHF iter  13:   -74.96588911507334   -2.67974e-10    4.53057e-06 
   @RHF iter  14:   -74.96588911512617   -5.28360e-11    2.01065e-06 
   @RHF iter  15:   -74.96588911513660   -1.04308e-11    8.92502e-07 
   @RHF iter  16:   -74.96588911513867   -2.06057e-12    3.96215e-07 
   @RHF iter  17:   -74.96588911513911   -4.40536e-13    1.75905e-07 
   @RHF iter  18:   -74.96588911513911    0.00000e+00    7.80981e-08 
   @RHF iter  19:   -74.96588911513916   -5.68434e-14    3.46745e-08 
   @RHF iter  20:   -74.96588911513922   -5.68434e-14    1.53952e-08 
   @RHF iter  21:   -74.96588911513918    4.26326e-14    6.83535e-09 
   @RHF iter  22:   -74.96588911513916    1.42109e-14    3.03486e-09 
   @RHF iter  23:   -74.96588911513916    0.00000e+00    1.34746e-09 
   @RHF iter  24:   -74.96588911513922   -5.68434e-14    5.98270e-10 
   @RHF iter  25:   -74.96588911513916    5.68434e-14    2.65628e-10 
   @RHF iter  26:   -74.96588911513915    1.42109e-14    1.17939e-10 

  ==> Post-Iterations <==

	Orbital Energies (a.u.)
	-----------------------

	Doubly Occupied:                                                      

	   1A1   -20.251849     2A1    -1.256415     1B2    -0.592759  
	   3A1    -0.459374     1B1    -0.392489  

	Virtual:                                                              

	   4A1     0.579559     2B2     0.690153  

	Final Occupation by Irrep:
	         A1    A2    B1    B2 
	DOCC [     3,    0,    1,    1 ]

  Energy converged.

  @RHF Final Energy:   -74.96588911513915

  ==> Properties <==

 OEPROP: One-electron properties/analyses.
  by Rob Parrish and Justin Turney.
  built on LIBMINTS.

 Dipole Moment: (a.u.)
     X:     0.0000      Y:     0.0000      Z:     0.6711     Total:     0.6711

 Dipole Moment: (Debye)
     X:     0.0000      Y:     0.0000      Z:     1.7058     Total:     1.7058


  Saving occupied orbitals to File 100.

*** tstop() called on mac10147 at Tue Jun 14 09:57:13 2011
	user time   =       1.28 seconds =       0.02 minutes
	system time =       0.21 seconds =       0.00 minutes
	total time  =          0 seconds =       0.00 minutes

*** tstart() called on mac10147
*** at Tue Jun 14 09:57:13 2011

	There are an even number of electrons - assuming singlet.
	Specify the multiplicity with the MULTP option in the
	input if this is incorrect


         ---------------------------------------------------------
                                   SCF
            by Justin Turney, Rob Parrish, and Andy Simmonnett
                              RHF Reference
                        1 Threads,    256 MiB Core
         ---------------------------------------------------------

  ==> Geometry <==

    Molecular point group: c2v

    Geometry (in Angstrom), charge = 0, multiplicity = 1:

       Center              X                  Y                   Z       
    ------------   -----------------  -----------------  -----------------
           O          0.000000000000     0.000000000000    -0.070882628977
           H          0.000000000000     0.760020622083     0.562479380061
           H          0.000000000000    -0.760020622083     0.562479380061

    Number of unique atoms: 2

    Atoms equivalency:
       unique atom 0: 0 
       unique atom 1: 1 2 

  Running in c2v symmetry.

  Nuclear repulsion =    8.906263380511062

  Charge       = 0
  Multiplicity = 1
  Electrons    = 10
  Nalpha       = 5
  Nbeta        = 5

  ==> Algorithm <==

  SCF Algorithm Type is PK.
  DIIS disabled.
  MOM disabled.
  Guess Type is CORE.
  Energy threshold   = 1.00e-10
  Density threshold  = 1.00e-10
  Integral threshold = 0.00e+00

  ==> Primary Basis: STO-3G <==

  Basis Set
    Number of shells: 5
    Number of basis function: 7
    Number of Cartesian functions: 7
    Spherical Harmonics?: true
    Max angular momentum: 1

  ==> Pre-Iterations <==

  Minimum eigenvalue in the overlap matrix is 3.6312291899E-01.
  Using Symmetric Orthogonalization.
  SCF Guess: Core (One-Electron) Hamiltonian.

  Initial RHF energy:   -54.58694802490892

   -------------------------------------------------------
    Irrep   Nso     Nmo     Nalpha   Nbeta   Ndocc  Nsocc
   -------------------------------------------------------
     A1         4       4       3       3       3       0
     A2         0       0       0       0       0       0
     B1         1       1       1       1       1       0
     B2         2       2       1       1       1       0
   -------------------------------------------------------
    Total       7       7       5       5       5       0
   -------------------------------------------------------

  ==> Integral Setup <==

 MINTS: Wrapper to libmints.
   by Justin Turney

   Calculation information:
      Number of atoms:                   3
      Number of AO shells:               5
      Number of SO shells:               4
      Number of primitives:             15
      Number of atomic orbitals:         7
      Number of basis functions:         7

      Number of irreps:                  4
      Number of functions per irrep: [   4    0    1    2 ]

      Computing integrals...for (0 0 | 0 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(0 0 | 0 0)
for (1 0 | 0 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 0 | 0 0)
for (1 1 | 0 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 1 | 0 0)
for (1 0 | 1 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 0 | 1 0)
for (1 1 | 1 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 1 | 1 0)
for (1 1 | 1 1) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 1 | 1 1)
for (0 0 | 2 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (0 0 | 2 1) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (1 0 | 2 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (1 0 | 2 1) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (1 1 | 2 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (1 1 | 2 1) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (0 0 | 2 2) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(0 0 | 2 2)
for (2 0 | 2 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 0 | 2 0)
for (1 0 | 2 2) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 0 | 2 2)
for (2 1 | 2 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 1 | 2 0)
for (1 1 | 2 2) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 1 | 2 2)
for (2 1 | 2 1) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 1 | 2 1)
for (2 0 | 2 2) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (2 1 | 2 2) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (2 2 | 2 2) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 2 | 2 2)
for (3 0 | 0 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 0 | 0 0)
for (3 1 | 0 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 1 | 0 0)
for (3 0 | 1 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 0 | 1 0)
for (3 1 | 1 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 1 | 1 0)
for (3 0 | 1 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 0 | 1 1)
for (3 1 | 1 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 1 | 1 1)
for (0 0 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 4
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(0 0 | 2 3)
for (3 0 | 2 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 0 | 2 0)
for (1 0 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 4
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 0 | 2 3)
for (3 1 | 2 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 1 | 2 0)
for (3 0 | 2 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 0 | 2 1)
for (1 1 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 4
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 1 | 2 3)
for (3 1 | 2 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 1 | 2 1)
for (2 3 | 2 0) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 3 | 2 0)
for (3 0 | 2 2) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 0 | 2 2)
for (2 3 | 2 1) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 3 | 2 1)
for (3 1 | 2 2) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 1 | 2 2)
for (2 3 | 2 2) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 3 | 2 2)
for (3 3 | 0 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 1
	0
	(3 3 | 0 0)
	(3 4 | 0 0)
for (3 0 | 3 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 3
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 0 | 3 0)
	(3 0 | 4 0)
for (3 3 | 1 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 1
	0
	(3 3 | 1 0)
	(3 4 | 1 0)
for (3 1 | 3 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 3
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 1 | 3 0)
	(3 1 | 4 0)
for (3 3 | 1 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 1
	0
	(3 3 | 1 1)
	(3 4 | 1 1)
for (3 1 | 3 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 3
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 1 | 3 1)
	(3 1 | 4 1)
for (3 3 | 2 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 1
	0
	(3 3 | 2 0)
	(3 4 | 2 0)
for (3 0 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 3
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 0 | 2 3)
	(3 0 | 2 4)
for (3 3 | 2 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 1
	0
	(3 3 | 2 1)
	(3 4 | 2 1)
for (3 1 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 3
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 1 | 2 3)
	(3 1 | 2 4)
for (3 3 | 2 2) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 1
	0
	(3 3 | 2 2)
	(3 4 | 2 2)
for (2 3 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 3
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 3
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 2
	0
	1
	(2 3 | 2 3)
	(2 3 | 2 4)
for (3 3 | 3 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 3
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 3
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 3 | 3 0)
	(3 3 | 4 0)
	(3 4 | 3 0)
	(3 4 | 4 0)
for (3 3 | 3 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 3
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 3
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 3 | 3 1)
	(3 3 | 4 1)
	(3 4 | 3 1)
	(3 4 | 4 1)
for (3 3 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 3
	klstablizer: 3
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 3 | 2 3)
	(3 3 | 2 4)
	(3 4 | 2 3)
	(3 4 | 2 4)
for (3 3 | 3 3) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 3
	lstablizer: 3
	ijstablizer: 3
	klstablizer: 3
	R.size = 2
	0
	1
	S.size = 2
	0
	1
	T.size = 2
	0
	1
	(3 3 | 3 3)
	(3 3 | 3 4)
	(3 3 | 4 4)
	(3 3 | 4 3)
	(3 4 | 3 3)
	(3 4 | 3 4)
	(3 4 | 4 4)
	(3 4 | 4 3)
done

      Computed 138 non-zero integrals.

  ==> Iterations <==

                        Total Energy        Delta E      Density RMS

   @RHF iter   1:   -73.24156884806993   -1.86546e+01    0.00000e+00 
   @RHF iter   2:   -74.93159506672424   -1.69003e+00    4.01340e-01 
   @RHF iter   3:   -74.96445330199015   -3.28582e-02    5.72511e-02 
   @RHF iter   4:   -74.96572869580665   -1.27539e-03    9.54735e-03 
   @RHF iter   5:   -74.96586603009068   -1.37334e-04    3.64589e-03 
   @RHF iter   6:   -74.96588977080708   -2.37407e-05    1.42323e-03 
   @RHF iter   7:   -74.96589427721177   -4.50640e-06    6.10633e-04 
   @RHF iter   8:   -74.96589515382577   -8.76614e-07    2.64814e-04 
   @RHF iter   9:   -74.96589532552429   -1.71699e-07    1.16221e-04 
   @RHF iter  10:   -74.96589535922151   -3.36972e-08    5.12289e-05 
   @RHF iter  11:   -74.96589536583878   -6.61727e-09    2.26400e-05 
   @RHF iter  12:   -74.96589536713842   -1.29964e-09    1.00184e-05 
   @RHF iter  13:   -74.96589536739368   -2.55270e-10    4.43635e-06 
   @RHF iter  14:   -74.96589536744381   -5.01217e-11    1.96526e-06 
   @RHF iter  15:   -74.96589536745364   -9.83391e-12    8.70769e-07 
   @RHF iter  16:   -74.96589536745562   -1.97531e-12    3.85865e-07 
   @RHF iter  17:   -74.96589536745604   -4.26326e-13    1.70999e-07 
   @RHF iter  18:   -74.96589536745604    0.00000e+00    7.57823e-08 
   @RHF iter  19:   -74.96589536745610   -5.68434e-14    3.35853e-08 
   @RHF iter  20:   -74.96589536745610    0.00000e+00    1.48845e-08 
   @RHF iter  21:   -74.96589536745611   -1.42109e-14    6.59665e-09 
   @RHF iter  22:   -74.96589536745608    2.84217e-14    2.92357e-09 
   @RHF iter  23:   -74.96589536745613   -4.26326e-14    1.29570e-09 
   @RHF iter  24:   -74.96589536745604    8.52651e-14    5.74241e-10 
   @RHF iter  25:   -74.96589536745604    0.00000e+00    2.54497e-10 
   @RHF iter  26:   -74.96589536745608   -4.26326e-14    1.12791e-10 

  ==> Post-Iterations <==

	Orbital Energies (a.u.)
	-----------------------

	Doubly Occupied:                                                      

	   1A1   -20.251141     2A1    -1.257201     1B2    -0.594518  
	   3A1    -0.458899     1B1    -0.392381  

	Virtual:                                                              

	   4A1     0.581317     2B2     0.693709  

	Final Occupation by Irrep:
	         A1    A2    B1    B2 
	DOCC [     3,    0,    1,    1 ]

  Energy converged.

  @RHF Final Energy:   -74.96589536745608

  ==> Properties <==

 OEPROP: One-electron properties/analyses.
  by Rob Parrish and Justin Turney.
  built on LIBMINTS.

 Dipole Moment: (a.u.)
     X:     0.0000      Y:     0.0000      Z:     0.6717     Total:     0.6717

 Dipole Moment: (Debye)
     X:     0.0000      Y:     0.0000      Z:     1.7073     Total:     1.7073


  Saving occupied orbitals to File 100.

*** tstop() called on mac10147 at Tue Jun 14 09:57:13 2011
	user time   =       1.32 seconds =       0.02 minutes
	system time =       0.22 seconds =       0.00 minutes
	total time  =          0 seconds =       0.00 minutes
    -Cartesian displacement SALCs per irrep:
    Irrep  #SALCs
    -----  ------
      0       3
      1       1
      2       2
      3       3

	Finite difference computation of gradient using 3-point formula
	Check for precision!
	Energy without displacment:  -74.9658953675
	Gradients are in mass-weighted, symmetry-adapted cartesians (in au).
 Coord      Energy(-)        Energy(+)        Force
    0    -74.9658967337   -74.9658900467     0.0003343509
    1    -74.9658821755   -74.9658613410     0.0010417242
    2    -74.9658702392   -74.9658891151    -0.0009437981


			----------------------------------
			 OPTKING: for geometry optimizations  
			  - R.A. King,  Bethel University   
			------------------------------------

	Prevous internal coordinate definitions found.
	---Fragment 1 Geometry and Gradient---
	 O           0.0000000000        0.0000000000       -0.1339487461
	 H           0.0000000000        1.4362307214        1.0629319025
	 H           0.0000000000       -1.4362307214        1.0629319025
	             0.0000000000        0.0000000000        0.0003343509
	             0.0000000000        0.0007366103       -0.0006673660
	             0.0000000000       -0.0007366103       -0.0006673660

	---Fragment 1 Intrafragment Coordinates---
	 * Coordinate *           * BOHR/RAD *       * ANG/DEG *
	 R(1,2)           =         1.869567	       0.989332
	 R(1,3)           =         1.869567	       0.989332
	 B(2,1,3)         =         1.752098	     100.387835

	Current energy   :       -74.9658953675

	Energy change for the previous step:
		Projected    :        -0.0000123565
		Actual       :        -0.0000261813
	Energy ratio large: Trust radius increased.


	Performing BFGS update with previous 3 gradient(s).
	Following RFO solution 0.
	Projected energy change by RFO approximation:        -0.0000045680

	Back-transformation to cartesian coordinates...
	Successfully converged to displaced geometry.

	---Internal Coordinate Step in ANG or DEG, aJ/ANG or AJ/DEG ---
	 ----------------------------------------------------------------------
	 Coordinate             Previous        Force       Change         New 
	 ----------             --------       ------       ------       ------
	 R(1,2)          =      0.989332    -0.002901     0.000095     0.989427
	 R(1,3)          =      0.989332    -0.002901     0.000095     0.989427
	 B(2,1,3)        =    100.387835    -0.000104    -0.389848    99.997988
	 ----------------------------------------------------------------------

	Convergence Check Cycle    4: (using internal coordinates in au)
	                    Actual        Tolerance     Converged?
	----------------------------------------------------------
	MAX Force           1.4e-03        3.0e-04          no
	Energy Change      -2.6e-05        1.0e-06          no
	MAX Displacement    6.8e-03        1.2e-03          no
	----------------------------------------------------------
	Writing optimization data to binary file.
	Structure for next step:
	Cartesian Geometry (au)
	    O     0.0000000000   0.0000000000  -0.1345076524
	    H     0.0000000000   1.4322873891   1.0673670269
	    H     0.0000000000  -1.4322873891   1.0673670269
			--------------------------
			 OPTKING Finished Execution 
			--------------------------
	Using finite-differences of energies to determine gradients.
	Generating geometries for use with 3-point formula.
	Displacement size will be 1.00e-02.
	Number of atoms is 3.
    -Cartesian displacement SALCs per irrep:
    Irrep  #SALCs
    -----  ------
      0       3
      1       1
      2       2
      3       3

	Number of SALC's is 3.
	irrep = 0, ncomponent = 1
		0: atom 0, direction 2, coef 1.000000
	irrep = 0, ncomponent = 2
		0: atom 1, direction 1, coef 0.707107
		1: atom 2, direction 1, coef -0.707107
	irrep = 0, ncomponent = 2
		0: atom 1, direction 2, coef 0.707107
		1: atom 2, direction 2, coef 0.707107
	Number of displacements (including reference) is 7.

*** tstart() called on mac10147
*** at Tue Jun 14 09:57:13 2011

	There are an even number of electrons - assuming singlet.
	Specify the multiplicity with the MULTP option in the
	input if this is incorrect


         ---------------------------------------------------------
                                   SCF
            by Justin Turney, Rob Parrish, and Andy Simmonnett
                              RHF Reference
                        1 Threads,    256 MiB Core
         ---------------------------------------------------------

  ==> Geometry <==

    Molecular point group: c2v

    Geometry (in Angstrom), charge = 0, multiplicity = 1:

       Center              X                  Y                   Z       
    ------------   -----------------  -----------------  -----------------
           O          0.000000000000     0.000000000000    -0.071326470028
           H          0.000000000000     0.757933900350     0.566001419842
           H          0.000000000000    -0.757933900350     0.566001419842

    Number of unique atoms: 2

    Atoms equivalency:
       unique atom 0: 0 
       unique atom 1: 1 2 

  Running in c2v symmetry.

  Nuclear repulsion =    8.899050114244627

  Charge       = 0
  Multiplicity = 1
  Electrons    = 10
  Nalpha       = 5
  Nbeta        = 5

  ==> Algorithm <==

  SCF Algorithm Type is PK.
  DIIS disabled.
  MOM disabled.
  Guess Type is CORE.
  Energy threshold   = 1.00e-10
  Density threshold  = 1.00e-10
  Integral threshold = 0.00e+00

  ==> Primary Basis: STO-3G <==

  Basis Set
    Number of shells: 5
    Number of basis function: 7
    Number of Cartesian functions: 7
    Spherical Harmonics?: true
    Max angular momentum: 1

  ==> Pre-Iterations <==

  Minimum eigenvalue in the overlap matrix is 3.6375312286E-01.
  Using Symmetric Orthogonalization.
  SCF Guess: Core (One-Electron) Hamiltonian.

  Initial RHF energy:   -54.58845274133442

   -------------------------------------------------------
    Irrep   Nso     Nmo     Nalpha   Nbeta   Ndocc  Nsocc
   -------------------------------------------------------
     A1         4       4       3       3       3       0
     A2         0       0       0       0       0       0
     B1         1       1       1       1       1       0
     B2         2       2       1       1       1       0
   -------------------------------------------------------
    Total       7       7       5       5       5       0
   -------------------------------------------------------

  ==> Integral Setup <==

 MINTS: Wrapper to libmints.
   by Justin Turney

   Calculation information:
      Number of atoms:                   3
      Number of AO shells:               5
      Number of SO shells:               4
      Number of primitives:             15
      Number of atomic orbitals:         7
      Number of basis functions:         7

      Number of irreps:                  4
      Number of functions per irrep: [   4    0    1    2 ]

      Computing integrals...for (0 0 | 0 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(0 0 | 0 0)
for (1 0 | 0 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 0 | 0 0)
for (1 1 | 0 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 1 | 0 0)
for (1 0 | 1 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 0 | 1 0)
for (1 1 | 1 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 1 | 1 0)
for (1 1 | 1 1) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 1 | 1 1)
for (0 0 | 2 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (0 0 | 2 1) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (1 0 | 2 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (1 0 | 2 1) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (1 1 | 2 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (1 1 | 2 1) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (0 0 | 2 2) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(0 0 | 2 2)
for (2 0 | 2 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 0 | 2 0)
for (1 0 | 2 2) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 0 | 2 2)
for (2 1 | 2 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 1 | 2 0)
for (1 1 | 2 2) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 1 | 2 2)
for (2 1 | 2 1) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 1 | 2 1)
for (2 0 | 2 2) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (2 1 | 2 2) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (2 2 | 2 2) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 2 | 2 2)
for (3 0 | 0 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 0 | 0 0)
for (3 1 | 0 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 1 | 0 0)
for (3 0 | 1 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 0 | 1 0)
for (3 1 | 1 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 1 | 1 0)
for (3 0 | 1 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 0 | 1 1)
for (3 1 | 1 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 1 | 1 1)
for (0 0 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 4
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(0 0 | 2 3)
for (3 0 | 2 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 0 | 2 0)
for (1 0 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 4
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 0 | 2 3)
for (3 1 | 2 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 1 | 2 0)
for (3 0 | 2 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 0 | 2 1)
for (1 1 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 4
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 1 | 2 3)
for (3 1 | 2 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 1 | 2 1)
for (2 3 | 2 0) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 3 | 2 0)
for (3 0 | 2 2) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 0 | 2 2)
for (2 3 | 2 1) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 3 | 2 1)
for (3 1 | 2 2) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 1 | 2 2)
for (2 3 | 2 2) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 3 | 2 2)
for (3 3 | 0 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 1
	0
	(3 3 | 0 0)
	(3 4 | 0 0)
for (3 0 | 3 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 3
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 0 | 3 0)
	(3 0 | 4 0)
for (3 3 | 1 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 1
	0
	(3 3 | 1 0)
	(3 4 | 1 0)
for (3 1 | 3 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 3
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 1 | 3 0)
	(3 1 | 4 0)
for (3 3 | 1 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 1
	0
	(3 3 | 1 1)
	(3 4 | 1 1)
for (3 1 | 3 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 3
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 1 | 3 1)
	(3 1 | 4 1)
for (3 3 | 2 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 1
	0
	(3 3 | 2 0)
	(3 4 | 2 0)
for (3 0 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 3
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 0 | 2 3)
	(3 0 | 2 4)
for (3 3 | 2 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 1
	0
	(3 3 | 2 1)
	(3 4 | 2 1)
for (3 1 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 3
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 1 | 2 3)
	(3 1 | 2 4)
for (3 3 | 2 2) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 1
	0
	(3 3 | 2 2)
	(3 4 | 2 2)
for (2 3 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 3
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 3
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 2
	0
	1
	(2 3 | 2 3)
	(2 3 | 2 4)
for (3 3 | 3 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 3
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 3
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 3 | 3 0)
	(3 3 | 4 0)
	(3 4 | 3 0)
	(3 4 | 4 0)
for (3 3 | 3 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 3
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 3
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 3 | 3 1)
	(3 3 | 4 1)
	(3 4 | 3 1)
	(3 4 | 4 1)
for (3 3 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 3
	klstablizer: 3
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 3 | 2 3)
	(3 3 | 2 4)
	(3 4 | 2 3)
	(3 4 | 2 4)
for (3 3 | 3 3) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 3
	lstablizer: 3
	ijstablizer: 3
	klstablizer: 3
	R.size = 2
	0
	1
	S.size = 2
	0
	1
	T.size = 2
	0
	1
	(3 3 | 3 3)
	(3 3 | 3 4)
	(3 3 | 4 4)
	(3 3 | 4 3)
	(3 4 | 3 3)
	(3 4 | 3 4)
	(3 4 | 4 4)
	(3 4 | 4 3)
done

      Computed 138 non-zero integrals.

  ==> Iterations <==

                        Total Energy        Delta E      Density RMS

   @RHF iter   1:   -73.24112703696456   -1.86527e+01    0.00000e+00 
   @RHF iter   2:   -74.93034331088775   -1.68922e+00    4.01528e-01 
   @RHF iter   3:   -74.96441724829351   -3.40739e-02    5.83362e-02 
   @RHF iter   4:   -74.96573063138725   -1.31338e-03    9.63957e-03 
   @RHF iter   5:   -74.96586933489547   -1.38704e-04    3.66362e-03 
   @RHF iter   6:   -74.96589322720838   -2.38923e-05    1.42454e-03 
   @RHF iter   7:   -74.96589776433848   -4.53713e-06    6.11476e-04 
   @RHF iter   8:   -74.96589864798212   -8.83644e-07    2.65236e-04 
   @RHF iter   9:   -74.96589882129103   -1.73309e-07    1.16476e-04 
   @RHF iter  10:   -74.96589885535151   -3.40605e-08    5.13734e-05 
   @RHF iter  11:   -74.96589886204939   -6.69787e-09    2.27191e-05 
   @RHF iter  12:   -74.96589886336669   -1.31730e-09    1.00603e-05 
   @RHF iter  13:   -74.96589886362578   -2.59092e-10    4.45799e-06 
   @RHF iter  14:   -74.96589886367673   -5.09459e-11    1.97622e-06 
   @RHF iter  15:   -74.96589886368682   -1.00897e-11    8.76236e-07 
   @RHF iter  16:   -74.96589886368875   -1.93268e-12    3.88558e-07 
   @RHF iter  17:   -74.96589886368916   -4.12115e-13    1.72313e-07 
   @RHF iter  18:   -74.96589886368922   -5.68434e-14    7.64178e-08 
   @RHF iter  19:   -74.96589886368925   -2.84217e-14    3.38906e-08 
   @RHF iter  20:   -74.96589886368920    4.26326e-14    1.50303e-08 
   @RHF iter  21:   -74.96589886368923   -2.84217e-14    6.66589e-09 
   @RHF iter  22:   -74.96589886368928   -4.26326e-14    2.95632e-09 
   @RHF iter  23:   -74.96589886368923    4.26326e-14    1.31112e-09 
   @RHF iter  24:   -74.96589886368925   -1.42109e-14    5.81482e-10 
   @RHF iter  25:   -74.96589886368922    2.84217e-14    2.57888e-10 
   @RHF iter  26:   -74.96589886368929   -7.10543e-14    1.14372e-10 

  ==> Post-Iterations <==

	Orbital Energies (a.u.)
	-----------------------

	Doubly Occupied:                                                      

	   1A1   -20.251863     2A1    -1.257289     1B2    -0.593169  
	   3A1    -0.459962     1B1    -0.392672  

	Virtual:                                                              

	   4A1     0.581191     2B2     0.691316  

	Final Occupation by Irrep:
	         A1    A2    B1    B2 
	DOCC [     3,    0,    1,    1 ]

  Energy converged.

  @RHF Final Energy:   -74.96589886368929

  ==> Properties <==

 OEPROP: One-electron properties/analyses.
  by Rob Parrish and Justin Turney.
  built on LIBMINTS.

 Dipole Moment: (a.u.)
     X:     0.0000      Y:     0.0000      Z:     0.6723     Total:     0.6723

 Dipole Moment: (Debye)
     X:     0.0000      Y:     0.0000      Z:     1.7088     Total:     1.7088


  Saving occupied orbitals to File 100.

*** tstop() called on mac10147 at Tue Jun 14 09:57:13 2011
	user time   =       1.36 seconds =       0.02 minutes
	system time =       0.23 seconds =       0.00 minutes
	total time  =          0 seconds =       0.00 minutes

*** tstart() called on mac10147
*** at Tue Jun 14 09:57:13 2011

	There are an even number of electrons - assuming singlet.
	Specify the multiplicity with the MULTP option in the
	input if this is incorrect


         ---------------------------------------------------------
                                   SCF
            by Justin Turney, Rob Parrish, and Andy Simmonnett
                              RHF Reference
                        1 Threads,    256 MiB Core
         ---------------------------------------------------------

  ==> Geometry <==

    Molecular point group: c2v

    Geometry (in Angstrom), charge = 0, multiplicity = 1:

       Center              X                  Y                   Z       
    ------------   -----------------  -----------------  -----------------
           O          0.000000000000     0.000000000000    -0.071030308935
           H          0.000000000000     0.757933900350     0.563651274110
           H          0.000000000000    -0.757933900350     0.563651274110

    Number of unique atoms: 2

    Atoms equivalency:
       unique atom 0: 0 
       unique atom 1: 1 2 

  Running in c2v symmetry.

  Nuclear repulsion =    8.913762057329432

  Charge       = 0
  Multiplicity = 1
  Electrons    = 10
  Nalpha       = 5
  Nbeta        = 5

  ==> Algorithm <==

  SCF Algorithm Type is PK.
  DIIS disabled.
  MOM disabled.
  Guess Type is CORE.
  Energy threshold   = 1.00e-10
  Density threshold  = 1.00e-10
  Integral threshold = 0.00e+00

  ==> Primary Basis: STO-3G <==

  Basis Set
    Number of shells: 5
    Number of basis function: 7
    Number of Cartesian functions: 7
    Spherical Harmonics?: true
    Max angular momentum: 1

  ==> Pre-Iterations <==

  Minimum eigenvalue in the overlap matrix is 3.6263282396E-01.
  Using Symmetric Orthogonalization.
  SCF Guess: Core (One-Electron) Hamiltonian.

  Initial RHF energy:   -54.58355353738700

   -------------------------------------------------------
    Irrep   Nso     Nmo     Nalpha   Nbeta   Ndocc  Nsocc
   -------------------------------------------------------
     A1         4       4       3       3       3       0
     A2         0       0       0       0       0       0
     B1         1       1       1       1       1       0
     B2         2       2       1       1       1       0
   -------------------------------------------------------
    Total       7       7       5       5       5       0
   -------------------------------------------------------

  ==> Integral Setup <==

 MINTS: Wrapper to libmints.
   by Justin Turney

   Calculation information:
      Number of atoms:                   3
      Number of AO shells:               5
      Number of SO shells:               4
      Number of primitives:             15
      Number of atomic orbitals:         7
      Number of basis functions:         7

      Number of irreps:                  4
      Number of functions per irrep: [   4    0    1    2 ]

      Computing integrals...for (0 0 | 0 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(0 0 | 0 0)
for (1 0 | 0 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 0 | 0 0)
for (1 1 | 0 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 1 | 0 0)
for (1 0 | 1 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 0 | 1 0)
for (1 1 | 1 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 1 | 1 0)
for (1 1 | 1 1) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 1 | 1 1)
for (0 0 | 2 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (0 0 | 2 1) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (1 0 | 2 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (1 0 | 2 1) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (1 1 | 2 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (1 1 | 2 1) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (0 0 | 2 2) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(0 0 | 2 2)
for (2 0 | 2 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 0 | 2 0)
for (1 0 | 2 2) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 0 | 2 2)
for (2 1 | 2 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 1 | 2 0)
for (1 1 | 2 2) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 1 | 2 2)
for (2 1 | 2 1) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 1 | 2 1)
for (2 0 | 2 2) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (2 1 | 2 2) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (2 2 | 2 2) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 2 | 2 2)
for (3 0 | 0 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 0 | 0 0)
for (3 1 | 0 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 1 | 0 0)
for (3 0 | 1 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 0 | 1 0)
for (3 1 | 1 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 1 | 1 0)
for (3 0 | 1 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 0 | 1 1)
for (3 1 | 1 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 1 | 1 1)
for (0 0 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 4
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(0 0 | 2 3)
for (3 0 | 2 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 0 | 2 0)
for (1 0 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 4
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 0 | 2 3)
for (3 1 | 2 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 1 | 2 0)
for (3 0 | 2 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 0 | 2 1)
for (1 1 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 4
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 1 | 2 3)
for (3 1 | 2 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 1 | 2 1)
for (2 3 | 2 0) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 3 | 2 0)
for (3 0 | 2 2) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 0 | 2 2)
for (2 3 | 2 1) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 3 | 2 1)
for (3 1 | 2 2) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 1 | 2 2)
for (2 3 | 2 2) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 3 | 2 2)
for (3 3 | 0 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 1
	0
	(3 3 | 0 0)
	(3 4 | 0 0)
for (3 0 | 3 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 3
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 0 | 3 0)
	(3 0 | 4 0)
for (3 3 | 1 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 1
	0
	(3 3 | 1 0)
	(3 4 | 1 0)
for (3 1 | 3 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 3
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 1 | 3 0)
	(3 1 | 4 0)
for (3 3 | 1 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 1
	0
	(3 3 | 1 1)
	(3 4 | 1 1)
for (3 1 | 3 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 3
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 1 | 3 1)
	(3 1 | 4 1)
for (3 3 | 2 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 1
	0
	(3 3 | 2 0)
	(3 4 | 2 0)
for (3 0 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 3
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 0 | 2 3)
	(3 0 | 2 4)
for (3 3 | 2 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 1
	0
	(3 3 | 2 1)
	(3 4 | 2 1)
for (3 1 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 3
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 1 | 2 3)
	(3 1 | 2 4)
for (3 3 | 2 2) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 1
	0
	(3 3 | 2 2)
	(3 4 | 2 2)
for (2 3 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 3
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 3
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 2
	0
	1
	(2 3 | 2 3)
	(2 3 | 2 4)
for (3 3 | 3 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 3
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 3
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 3 | 3 0)
	(3 3 | 4 0)
	(3 4 | 3 0)
	(3 4 | 4 0)
for (3 3 | 3 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 3
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 3
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 3 | 3 1)
	(3 3 | 4 1)
	(3 4 | 3 1)
	(3 4 | 4 1)
for (3 3 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 3
	klstablizer: 3
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 3 | 2 3)
	(3 3 | 2 4)
	(3 4 | 2 3)
	(3 4 | 2 4)
for (3 3 | 3 3) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 3
	lstablizer: 3
	ijstablizer: 3
	klstablizer: 3
	R.size = 2
	0
	1
	S.size = 2
	0
	1
	T.size = 2
	0
	1
	(3 3 | 3 3)
	(3 3 | 3 4)
	(3 3 | 4 4)
	(3 3 | 4 3)
	(3 4 | 3 3)
	(3 4 | 3 4)
	(3 4 | 4 4)
	(3 4 | 4 3)
done

      Computed 138 non-zero integrals.

  ==> Iterations <==

                        Total Energy        Delta E      Density RMS

   @RHF iter   1:   -73.24076383945162   -1.86572e+01    0.00000e+00 
   @RHF iter   2:   -74.93153213680891   -1.69077e+00    4.01545e-01 
   @RHF iter   3:   -74.96446082829141   -3.29287e-02    5.73423e-02 
   @RHF iter   4:   -74.96573417962385   -1.27335e-03    9.53856e-03 
   @RHF iter   5:   -74.96587046145702   -1.36282e-04    3.63385e-03 
   @RHF iter   6:   -74.96589395019105   -2.34887e-05    1.41598e-03 
   @RHF iter   7:   -74.96589840111930   -4.45093e-06    6.06915e-04 
   @RHF iter   8:   -74.96589926577037   -8.64651e-07    2.62984e-04 
   @RHF iter   9:   -74.96589943491429   -1.69144e-07    1.15337e-04 
   @RHF iter  10:   -74.96589946806971   -3.31554e-08    5.08058e-05 
   @RHF iter  11:   -74.96589947457257   -6.50286e-09    2.24388e-05 
   @RHF iter  12:   -74.96589947584826   -1.27569e-09    9.92323e-06 
   @RHF iter  13:   -74.96589947609853   -2.50267e-10    4.39154e-06 
   @RHF iter  14:   -74.96589947614765   -4.91269e-11    1.94423e-06 
   @RHF iter  15:   -74.96589947615722   -9.56391e-12    8.60929e-07 
   @RHF iter  16:   -74.96589947615915   -1.93268e-12    3.81274e-07 
   @RHF iter  17:   -74.96589947615949   -3.41061e-13    1.68863e-07 
   @RHF iter  18:   -74.96589947615961   -1.13687e-13    7.47902e-08 
   @RHF iter  19:   -74.96589947615961    0.00000e+00    3.31256e-08 
   @RHF iter  20:   -74.96589947615961    0.00000e+00    1.46719e-08 
   @RHF iter  21:   -74.96589947615963   -2.84217e-14    6.49850e-09 
   @RHF iter  22:   -74.96589947615963    0.00000e+00    2.87833e-09 
   @RHF iter  23:   -74.96589947615958    5.68434e-14    1.27488e-09 
   @RHF iter  24:   -74.96589947615958    0.00000e+00    5.64672e-10 
   @RHF iter  25:   -74.96589947615965   -7.10543e-14    2.50107e-10 
   @RHF iter  26:   -74.96589947615963    1.42109e-14    1.10778e-10 

  ==> Post-Iterations <==

	Orbital Energies (a.u.)
	-----------------------

	Doubly Occupied:                                                      

	   1A1   -20.251363     2A1    -1.257853     1B2    -0.594423  
	   3A1    -0.459627     1B1    -0.392598  

	Virtual:                                                              

	   4A1     0.582450     2B2     0.693844  

	Final Occupation by Irrep:
	         A1    A2    B1    B2 
	DOCC [     3,    0,    1,    1 ]

  Energy converged.

  @RHF Final Energy:   -74.96589947615963

  ==> Properties <==

 OEPROP: One-electron properties/analyses.
  by Rob Parrish and Justin Turney.
  built on LIBMINTS.

 Dipole Moment: (a.u.)
     X:     0.0000      Y:     0.0000      Z:     0.6727     Total:     0.6727

 Dipole Moment: (Debye)
     X:     0.0000      Y:     0.0000      Z:     1.7099     Total:     1.7099


  Saving occupied orbitals to File 100.

*** tstop() called on mac10147 at Tue Jun 14 09:57:13 2011
	user time   =       1.40 seconds =       0.02 minutes
	system time =       0.24 seconds =       0.00 minutes
	total time  =          0 seconds =       0.00 minutes

*** tstart() called on mac10147
*** at Tue Jun 14 09:57:13 2011

	There are an even number of electrons - assuming singlet.
	Specify the multiplicity with the MULTP option in the
	input if this is incorrect


         ---------------------------------------------------------
                                   SCF
            by Justin Turney, Rob Parrish, and Andy Simmonnett
                              RHF Reference
                        1 Threads,    256 MiB Core
         ---------------------------------------------------------

  ==> Geometry <==

    Molecular point group: c2v

    Geometry (in Angstrom), charge = 0, multiplicity = 1:

       Center              X                  Y                   Z       
    ------------   -----------------  -----------------  -----------------
           O          0.000000000000     0.000000000000    -0.071178389481
           H          0.000000000000     0.754206606816     0.564826346976
           H          0.000000000000    -0.754206606816     0.564826346976

    Number of unique atoms: 2

    Atoms equivalency:
       unique atom 0: 0 
       unique atom 1: 1 2 

  Running in c2v symmetry.

  Nuclear repulsion =    8.932869816923981

  Charge       = 0
  Multiplicity = 1
  Electrons    = 10
  Nalpha       = 5
  Nbeta        = 5

  ==> Algorithm <==

  SCF Algorithm Type is PK.
  DIIS disabled.
  MOM disabled.
  Guess Type is CORE.
  Energy threshold   = 1.00e-10
  Density threshold  = 1.00e-10
  Integral threshold = 0.00e+00

  ==> Primary Basis: STO-3G <==

  Basis Set
    Number of shells: 5
    Number of basis function: 7
    Number of Cartesian functions: 7
    Spherical Harmonics?: true
    Max angular momentum: 1

  ==> Pre-Iterations <==

  Minimum eigenvalue in the overlap matrix is 3.6133153558E-01.
  Using Symmetric Orthogonalization.
  SCF Guess: Core (One-Electron) Hamiltonian.

  Initial RHF energy:   -54.57556683888701

   -------------------------------------------------------
    Irrep   Nso     Nmo     Nalpha   Nbeta   Ndocc  Nsocc
   -------------------------------------------------------
     A1         4       4       3       3       3       0
     A2         0       0       0       0       0       0
     B1         1       1       1       1       1       0
     B2         2       2       1       1       1       0
   -------------------------------------------------------
    Total       7       7       5       5       5       0
   -------------------------------------------------------

  ==> Integral Setup <==

 MINTS: Wrapper to libmints.
   by Justin Turney

   Calculation information:
      Number of atoms:                   3
      Number of AO shells:               5
      Number of SO shells:               4
      Number of primitives:             15
      Number of atomic orbitals:         7
      Number of basis functions:         7

      Number of irreps:                  4
      Number of functions per irrep: [   4    0    1    2 ]

      Computing integrals...for (0 0 | 0 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(0 0 | 0 0)
for (1 0 | 0 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 0 | 0 0)
for (1 1 | 0 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 1 | 0 0)
for (1 0 | 1 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 0 | 1 0)
for (1 1 | 1 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 1 | 1 0)
for (1 1 | 1 1) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 1 | 1 1)
for (0 0 | 2 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (0 0 | 2 1) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (1 0 | 2 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (1 0 | 2 1) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (1 1 | 2 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (1 1 | 2 1) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (0 0 | 2 2) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(0 0 | 2 2)
for (2 0 | 2 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 0 | 2 0)
for (1 0 | 2 2) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 0 | 2 2)
for (2 1 | 2 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 1 | 2 0)
for (1 1 | 2 2) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 1 | 2 2)
for (2 1 | 2 1) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 1 | 2 1)
for (2 0 | 2 2) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (2 1 | 2 2) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (2 2 | 2 2) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 2 | 2 2)
for (3 0 | 0 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 0 | 0 0)
for (3 1 | 0 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 1 | 0 0)
for (3 0 | 1 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 0 | 1 0)
for (3 1 | 1 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 1 | 1 0)
for (3 0 | 1 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 0 | 1 1)
for (3 1 | 1 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 1 | 1 1)
for (0 0 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 4
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(0 0 | 2 3)
for (3 0 | 2 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 0 | 2 0)
for (1 0 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 4
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 0 | 2 3)
for (3 1 | 2 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 1 | 2 0)
for (3 0 | 2 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 0 | 2 1)
for (1 1 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 4
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 1 | 2 3)
for (3 1 | 2 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 1 | 2 1)
for (2 3 | 2 0) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 3 | 2 0)
for (3 0 | 2 2) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 0 | 2 2)
for (2 3 | 2 1) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 3 | 2 1)
for (3 1 | 2 2) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 1 | 2 2)
for (2 3 | 2 2) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 3 | 2 2)
for (3 3 | 0 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 1
	0
	(3 3 | 0 0)
	(3 4 | 0 0)
for (3 0 | 3 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 3
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 0 | 3 0)
	(3 0 | 4 0)
for (3 3 | 1 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 1
	0
	(3 3 | 1 0)
	(3 4 | 1 0)
for (3 1 | 3 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 3
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 1 | 3 0)
	(3 1 | 4 0)
for (3 3 | 1 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 1
	0
	(3 3 | 1 1)
	(3 4 | 1 1)
for (3 1 | 3 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 3
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 1 | 3 1)
	(3 1 | 4 1)
for (3 3 | 2 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 1
	0
	(3 3 | 2 0)
	(3 4 | 2 0)
for (3 0 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 3
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 0 | 2 3)
	(3 0 | 2 4)
for (3 3 | 2 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 1
	0
	(3 3 | 2 1)
	(3 4 | 2 1)
for (3 1 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 3
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 1 | 2 3)
	(3 1 | 2 4)
for (3 3 | 2 2) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 1
	0
	(3 3 | 2 2)
	(3 4 | 2 2)
for (2 3 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 3
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 3
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 2
	0
	1
	(2 3 | 2 3)
	(2 3 | 2 4)
for (3 3 | 3 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 3
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 3
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 3 | 3 0)
	(3 3 | 4 0)
	(3 4 | 3 0)
	(3 4 | 4 0)
for (3 3 | 3 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 3
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 3
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 3 | 3 1)
	(3 3 | 4 1)
	(3 4 | 3 1)
	(3 4 | 4 1)
for (3 3 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 3
	klstablizer: 3
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 3 | 2 3)
	(3 3 | 2 4)
	(3 4 | 2 3)
	(3 4 | 2 4)
for (3 3 | 3 3) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 3
	lstablizer: 3
	ijstablizer: 3
	klstablizer: 3
	R.size = 2
	0
	1
	S.size = 2
	0
	1
	T.size = 2
	0
	1
	(3 3 | 3 3)
	(3 3 | 3 4)
	(3 3 | 4 4)
	(3 3 | 4 3)
	(3 4 | 3 3)
	(3 4 | 3 4)
	(3 4 | 4 4)
	(3 4 | 4 3)
done

      Computed 138 non-zero integrals.

  ==> Iterations <==

                        Total Energy        Delta E      Density RMS

   @RHF iter   1:   -73.23917658716692   -1.86636e+01    0.00000e+00 
   @RHF iter   2:   -74.93183533463271   -1.69266e+00    4.01921e-01 
   @RHF iter   3:   -74.96445996734506   -3.26246e-02    5.71296e-02 
   @RHF iter   4:   -74.96571494833906   -1.25498e-03    9.48557e-03 
   @RHF iter   5:   -74.96584848643054   -1.33538e-04    3.60153e-03 
   @RHF iter   6:   -74.96587138495195   -2.28985e-05    1.39999e-03 
   @RHF iter   7:   -74.96587570733320   -4.32238e-06    5.98670e-04 
   @RHF iter   8:   -74.96587654420107   -8.36868e-07    2.58931e-04 
   @RHF iter   9:   -74.96587670738919   -1.63188e-07    1.13363e-04 
   @RHF iter  10:   -74.96587673927709   -3.18879e-08    4.98542e-05 
   @RHF iter  11:   -74.96587674551193   -6.23484e-09    2.19833e-05 
   @RHF iter  12:   -74.96587674673120   -1.21926e-09    9.70639e-06 
   @RHF iter  13:   -74.96587674696966   -2.38458e-10    4.28884e-06 
   @RHF iter  14:   -74.96587674701628   -4.66258e-11    1.89579e-06 
   @RHF iter  15:   -74.96587674702538   -9.09495e-12    8.38173e-07 
   @RHF iter  16:   -74.96587674702715   -1.77636e-12    3.70618e-07 
   @RHF iter  17:   -74.96587674702752   -3.69482e-13    1.63888e-07 
   @RHF iter  18:   -74.96587674702758   -5.68434e-14    7.24740e-08 
   @RHF iter  19:   -74.96587674702755    2.84217e-14    3.20498e-08 
   @RHF iter  20:   -74.96587674702762   -7.10543e-14    1.41734e-08 
   @RHF iter  21:   -74.96587674702759    2.84217e-14    6.26791e-09 
   @RHF iter  22:   -74.96587674702758    1.42109e-14    2.77188e-09 
   @RHF iter  23:   -74.96587674702755    2.84217e-14    1.22582e-09 
   @RHF iter  24:   -74.96587674702761   -5.68434e-14    5.42098e-10 
   @RHF iter  25:   -74.96587674702758    2.84217e-14    2.39736e-10 
   @RHF iter  26:   -74.96587674702764   -5.68434e-14    1.06019e-10 

  ==> Post-Iterations <==

	Orbital Energies (a.u.)
	-----------------------

	Doubly Occupied:                                                      

	   1A1   -20.251560     2A1    -1.259240     1B2    -0.594729  
	   3A1    -0.460795     1B1    -0.392955  

	Virtual:                                                              

	   4A1     0.584944     2B2     0.695071  

	Final Occupation by Irrep:
	         A1    A2    B1    B2 
	DOCC [     3,    0,    1,    1 ]

  Energy converged.

  @RHF Final Energy:   -74.96587674702764

  ==> Properties <==

 OEPROP: One-electron properties/analyses.
  by Rob Parrish and Justin Turney.
  built on LIBMINTS.

 Dipole Moment: (a.u.)
     X:     0.0000      Y:     0.0000      Z:     0.6747     Total:     0.6747

 Dipole Moment: (Debye)
     X:     0.0000      Y:     0.0000      Z:     1.7150     Total:     1.7150


  Saving occupied orbitals to File 100.

*** tstop() called on mac10147 at Tue Jun 14 09:57:13 2011
	user time   =       1.45 seconds =       0.02 minutes
	system time =       0.24 seconds =       0.00 minutes
	total time  =          0 seconds =       0.00 minutes

*** tstart() called on mac10147
*** at Tue Jun 14 09:57:13 2011

	There are an even number of electrons - assuming singlet.
	Specify the multiplicity with the MULTP option in the
	input if this is incorrect


         ---------------------------------------------------------
                                   SCF
            by Justin Turney, Rob Parrish, and Andy Simmonnett
                              RHF Reference
                        1 Threads,    256 MiB Core
         ---------------------------------------------------------

  ==> Geometry <==

    Molecular point group: c2v

    Geometry (in Angstrom), charge = 0, multiplicity = 1:

       Center              X                  Y                   Z       
    ------------   -----------------  -----------------  -----------------
           O          0.000000000000     0.000000000000    -0.071178389481
           H          0.000000000000     0.761661193883     0.564826346976
           H          0.000000000000    -0.761661193883     0.564826346976

    Number of unique atoms: 2

    Atoms equivalency:
       unique atom 0: 0 
       unique atom 1: 1 2 

  Running in c2v symmetry.

  Nuclear repulsion =    8.880047916768582

  Charge       = 0
  Multiplicity = 1
  Electrons    = 10
  Nalpha       = 5
  Nbeta        = 5

  ==> Algorithm <==

  SCF Algorithm Type is PK.
  DIIS disabled.
  MOM disabled.
  Guess Type is CORE.
  Energy threshold   = 1.00e-10
  Density threshold  = 1.00e-10
  Integral threshold = 0.00e+00

  ==> Primary Basis: STO-3G <==

  Basis Set
    Number of shells: 5
    Number of basis function: 7
    Number of Cartesian functions: 7
    Spherical Harmonics?: true
    Max angular momentum: 1

  ==> Pre-Iterations <==

  Minimum eigenvalue in the overlap matrix is 3.6505812419E-01.
  Using Symmetric Orthogonalization.
  SCF Guess: Core (One-Electron) Hamiltonian.

  Initial RHF energy:   -54.59637153885439

   -------------------------------------------------------
    Irrep   Nso     Nmo     Nalpha   Nbeta   Ndocc  Nsocc
   -------------------------------------------------------
     A1         4       4       3       3       3       0
     A2         0       0       0       0       0       0
     B1         1       1       1       1       1       0
     B2         2       2       1       1       1       0
   -------------------------------------------------------
    Total       7       7       5       5       5       0
   -------------------------------------------------------

  ==> Integral Setup <==

 MINTS: Wrapper to libmints.
   by Justin Turney

   Calculation information:
      Number of atoms:                   3
      Number of AO shells:               5
      Number of SO shells:               4
      Number of primitives:             15
      Number of atomic orbitals:         7
      Number of basis functions:         7

      Number of irreps:                  4
      Number of functions per irrep: [   4    0    1    2 ]

      Computing integrals...for (0 0 | 0 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(0 0 | 0 0)
for (1 0 | 0 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 0 | 0 0)
for (1 1 | 0 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 1 | 0 0)
for (1 0 | 1 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 0 | 1 0)
for (1 1 | 1 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 1 | 1 0)
for (1 1 | 1 1) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 1 | 1 1)
for (0 0 | 2 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (0 0 | 2 1) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (1 0 | 2 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (1 0 | 2 1) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (1 1 | 2 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (1 1 | 2 1) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (0 0 | 2 2) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(0 0 | 2 2)
for (2 0 | 2 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 0 | 2 0)
for (1 0 | 2 2) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 0 | 2 2)
for (2 1 | 2 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 1 | 2 0)
for (1 1 | 2 2) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 1 | 2 2)
for (2 1 | 2 1) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 1 | 2 1)
for (2 0 | 2 2) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (2 1 | 2 2) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (2 2 | 2 2) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 2 | 2 2)
for (3 0 | 0 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 0 | 0 0)
for (3 1 | 0 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 1 | 0 0)
for (3 0 | 1 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 0 | 1 0)
for (3 1 | 1 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 1 | 1 0)
for (3 0 | 1 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 0 | 1 1)
for (3 1 | 1 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 1 | 1 1)
for (0 0 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 4
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(0 0 | 2 3)
for (3 0 | 2 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 0 | 2 0)
for (1 0 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 4
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 0 | 2 3)
for (3 1 | 2 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 1 | 2 0)
for (3 0 | 2 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 0 | 2 1)
for (1 1 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 4
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 1 | 2 3)
for (3 1 | 2 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 1 | 2 1)
for (2 3 | 2 0) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 3 | 2 0)
for (3 0 | 2 2) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 0 | 2 2)
for (2 3 | 2 1) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 3 | 2 1)
for (3 1 | 2 2) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 1 | 2 2)
for (2 3 | 2 2) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 3 | 2 2)
for (3 3 | 0 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 1
	0
	(3 3 | 0 0)
	(3 4 | 0 0)
for (3 0 | 3 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 3
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 0 | 3 0)
	(3 0 | 4 0)
for (3 3 | 1 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 1
	0
	(3 3 | 1 0)
	(3 4 | 1 0)
for (3 1 | 3 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 3
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 1 | 3 0)
	(3 1 | 4 0)
for (3 3 | 1 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 1
	0
	(3 3 | 1 1)
	(3 4 | 1 1)
for (3 1 | 3 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 3
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 1 | 3 1)
	(3 1 | 4 1)
for (3 3 | 2 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 1
	0
	(3 3 | 2 0)
	(3 4 | 2 0)
for (3 0 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 3
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 0 | 2 3)
	(3 0 | 2 4)
for (3 3 | 2 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 1
	0
	(3 3 | 2 1)
	(3 4 | 2 1)
for (3 1 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 3
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 1 | 2 3)
	(3 1 | 2 4)
for (3 3 | 2 2) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 1
	0
	(3 3 | 2 2)
	(3 4 | 2 2)
for (2 3 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 3
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 3
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 2
	0
	1
	(2 3 | 2 3)
	(2 3 | 2 4)
for (3 3 | 3 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 3
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 3
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 3 | 3 0)
	(3 3 | 4 0)
	(3 4 | 3 0)
	(3 4 | 4 0)
for (3 3 | 3 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 3
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 3
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 3 | 3 1)
	(3 3 | 4 1)
	(3 4 | 3 1)
	(3 4 | 4 1)
for (3 3 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 3
	klstablizer: 3
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 3 | 2 3)
	(3 3 | 2 4)
	(3 4 | 2 3)
	(3 4 | 2 4)
for (3 3 | 3 3) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 3
	lstablizer: 3
	ijstablizer: 3
	klstablizer: 3
	R.size = 2
	0
	1
	S.size = 2
	0
	1
	T.size = 2
	0
	1
	(3 3 | 3 3)
	(3 3 | 3 4)
	(3 3 | 4 4)
	(3 3 | 4 3)
	(3 4 | 3 3)
	(3 4 | 3 4)
	(3 4 | 4 4)
	(3 4 | 4 3)
done

      Computed 138 non-zero integrals.

  ==> Iterations <==

                        Total Energy        Delta E      Density RMS

   @RHF iter   1:   -73.24269628228669   -1.86463e+01    0.00000e+00 
   @RHF iter   2:   -74.92997397970169   -1.68728e+00    4.01161e-01 
   @RHF iter   3:   -74.96437325730332   -3.43993e-02    5.85628e-02 
   @RHF iter   4:   -74.96570642171670   -1.33316e-03    9.69554e-03 
   @RHF iter   5:   -74.96584802354204   -1.41602e-04    3.69721e-03 
   @RHF iter   6:   -74.96587253953044   -2.45160e-05    1.44104e-03 
   @RHF iter   7:   -74.96587721311087   -4.67358e-06    6.20004e-04 
   @RHF iter   8:   -74.96587812639746   -9.13287e-07    2.69435e-04 
   @RHF iter   9:   -74.96587830609428   -1.79697e-07    1.18526e-04 
   @RHF iter  10:   -74.96587834152152   -3.54272e-08    5.23638e-05 
   @RHF iter  11:   -74.96587834851002   -6.98850e-09    2.31944e-05 
   @RHF iter  12:   -74.96587834988887   -1.37885e-09    1.02871e-05 
   @RHF iter  13:   -74.96587835016089   -2.72024e-10    4.56568e-06 
   @RHF iter  14:   -74.96587835021455   -5.36602e-11    2.02714e-06 
   @RHF iter  15:   -74.96587835022518   -1.06297e-11    9.00224e-07 
   @RHF iter  16:   -74.96587835022720   -2.01794e-12    3.99821e-07 
   @RHF iter  17:   -74.96587835022768   -4.83169e-13    1.77585e-07 
   @RHF iter  18:   -74.96587835022774   -5.68434e-14    7.88792e-08 
   @RHF iter  19:   -74.96587835022777   -2.84217e-14    3.50369e-08 
   @RHF iter  20:   -74.96587835022780   -2.84217e-14    1.55630e-08 
   @RHF iter  21:   -74.96587835022777    2.84217e-14    6.91295e-09 
   @RHF iter  22:   -74.96587835022777    0.00000e+00    3.07068e-09 
   @RHF iter  23:   -74.96587835022774    2.84217e-14    1.36397e-09 
   @RHF iter  24:   -74.96587835022777   -2.84217e-14    6.05869e-10 
   @RHF iter  25:   -74.96587835022771    5.68434e-14    2.69122e-10 
   @RHF iter  26:   -74.96587835022780   -8.52651e-14    1.19543e-10 

  ==> Post-Iterations <==

	Orbital Energies (a.u.)
	-----------------------

	Doubly Occupied:                                                      

	   1A1   -20.251669     2A1    -1.255917     1B2    -0.592855  
	   3A1    -0.458798     1B1    -0.392319  

	Virtual:                                                              

	   4A1     0.578695     2B2     0.690092  

	Final Occupation by Irrep:
	         A1    A2    B1    B2 
	DOCC [     3,    0,    1,    1 ]

  Energy converged.

  @RHF Final Energy:   -74.96587835022780

  ==> Properties <==

 OEPROP: One-electron properties/analyses.
  by Rob Parrish and Justin Turney.
  built on LIBMINTS.

 Dipole Moment: (a.u.)
     X:     0.0000      Y:     0.0000      Z:     0.6703     Total:     0.6703

 Dipole Moment: (Debye)
     X:     0.0000      Y:     0.0000      Z:     1.7037     Total:     1.7037


  Saving occupied orbitals to File 100.

*** tstop() called on mac10147 at Tue Jun 14 09:57:13 2011
	user time   =       1.49 seconds =       0.02 minutes
	system time =       0.25 seconds =       0.00 minutes
	total time  =          0 seconds =       0.00 minutes

*** tstart() called on mac10147
*** at Tue Jun 14 09:57:13 2011

	There are an even number of electrons - assuming singlet.
	Specify the multiplicity with the MULTP option in the
	input if this is incorrect


         ---------------------------------------------------------
                                   SCF
            by Justin Turney, Rob Parrish, and Andy Simmonnett
                              RHF Reference
                        1 Threads,    256 MiB Core
         ---------------------------------------------------------

  ==> Geometry <==

    Molecular point group: c2v

    Geometry (in Angstrom), charge = 0, multiplicity = 1:

       Center              X                  Y                   Z       
    ------------   -----------------  -----------------  -----------------
           O          0.000000000000     0.000000000000    -0.070761249898
           H          0.000000000000     0.757933900350     0.561516193026
           H          0.000000000000    -0.757933900350     0.561516193026

    Number of unique atoms: 2

    Atoms equivalency:
       unique atom 0: 0 
       unique atom 1: 1 2 

  Running in c2v symmetry.

  Nuclear repulsion =    8.927140286064668

  Charge       = 0
  Multiplicity = 1
  Electrons    = 10
  Nalpha       = 5
  Nbeta        = 5

  ==> Algorithm <==

  SCF Algorithm Type is PK.
  DIIS disabled.
  MOM disabled.
  Guess Type is CORE.
  Energy threshold   = 1.00e-10
  Density threshold  = 1.00e-10
  Integral threshold = 0.00e+00

  ==> Primary Basis: STO-3G <==

  Basis Set
    Number of shells: 5
    Number of basis function: 7
    Number of Cartesian functions: 7
    Spherical Harmonics?: true
    Max angular momentum: 1

  ==> Pre-Iterations <==

  Minimum eigenvalue in the overlap matrix is 3.6161855218E-01.
  Using Symmetric Orthogonalization.
  SCF Guess: Core (One-Electron) Hamiltonian.

  Initial RHF energy:   -54.57909395909976

   -------------------------------------------------------
    Irrep   Nso     Nmo     Nalpha   Nbeta   Ndocc  Nsocc
   -------------------------------------------------------
     A1         4       4       3       3       3       0
     A2         0       0       0       0       0       0
     B1         1       1       1       1       1       0
     B2         2       2       1       1       1       0
   -------------------------------------------------------
    Total       7       7       5       5       5       0
   -------------------------------------------------------

  ==> Integral Setup <==

 MINTS: Wrapper to libmints.
   by Justin Turney

   Calculation information:
      Number of atoms:                   3
      Number of AO shells:               5
      Number of SO shells:               4
      Number of primitives:             15
      Number of atomic orbitals:         7
      Number of basis functions:         7

      Number of irreps:                  4
      Number of functions per irrep: [   4    0    1    2 ]

      Computing integrals...for (0 0 | 0 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(0 0 | 0 0)
for (1 0 | 0 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 0 | 0 0)
for (1 1 | 0 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 1 | 0 0)
for (1 0 | 1 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 0 | 1 0)
for (1 1 | 1 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 1 | 1 0)
for (1 1 | 1 1) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 1 | 1 1)
for (0 0 | 2 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (0 0 | 2 1) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (1 0 | 2 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (1 0 | 2 1) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (1 1 | 2 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (1 1 | 2 1) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (0 0 | 2 2) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(0 0 | 2 2)
for (2 0 | 2 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 0 | 2 0)
for (1 0 | 2 2) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 0 | 2 2)
for (2 1 | 2 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 1 | 2 0)
for (1 1 | 2 2) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 1 | 2 2)
for (2 1 | 2 1) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 1 | 2 1)
for (2 0 | 2 2) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (2 1 | 2 2) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (2 2 | 2 2) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 2 | 2 2)
for (3 0 | 0 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 0 | 0 0)
for (3 1 | 0 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 1 | 0 0)
for (3 0 | 1 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 0 | 1 0)
for (3 1 | 1 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 1 | 1 0)
for (3 0 | 1 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 0 | 1 1)
for (3 1 | 1 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 1 | 1 1)
for (0 0 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 4
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(0 0 | 2 3)
for (3 0 | 2 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 0 | 2 0)
for (1 0 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 4
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 0 | 2 3)
for (3 1 | 2 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 1 | 2 0)
for (3 0 | 2 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 0 | 2 1)
for (1 1 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 4
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 1 | 2 3)
for (3 1 | 2 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 1 | 2 1)
for (2 3 | 2 0) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 3 | 2 0)
for (3 0 | 2 2) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 0 | 2 2)
for (2 3 | 2 1) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 3 | 2 1)
for (3 1 | 2 2) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 1 | 2 2)
for (2 3 | 2 2) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 3 | 2 2)
for (3 3 | 0 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 1
	0
	(3 3 | 0 0)
	(3 4 | 0 0)
for (3 0 | 3 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 3
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 0 | 3 0)
	(3 0 | 4 0)
for (3 3 | 1 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 1
	0
	(3 3 | 1 0)
	(3 4 | 1 0)
for (3 1 | 3 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 3
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 1 | 3 0)
	(3 1 | 4 0)
for (3 3 | 1 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 1
	0
	(3 3 | 1 1)
	(3 4 | 1 1)
for (3 1 | 3 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 3
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 1 | 3 1)
	(3 1 | 4 1)
for (3 3 | 2 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 1
	0
	(3 3 | 2 0)
	(3 4 | 2 0)
for (3 0 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 3
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 0 | 2 3)
	(3 0 | 2 4)
for (3 3 | 2 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 1
	0
	(3 3 | 2 1)
	(3 4 | 2 1)
for (3 1 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 3
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 1 | 2 3)
	(3 1 | 2 4)
for (3 3 | 2 2) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 1
	0
	(3 3 | 2 2)
	(3 4 | 2 2)
for (2 3 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 3
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 3
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 2
	0
	1
	(2 3 | 2 3)
	(2 3 | 2 4)
for (3 3 | 3 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 3
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 3
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 3 | 3 0)
	(3 3 | 4 0)
	(3 4 | 3 0)
	(3 4 | 4 0)
for (3 3 | 3 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 3
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 3
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 3 | 3 1)
	(3 3 | 4 1)
	(3 4 | 3 1)
	(3 4 | 4 1)
for (3 3 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 3
	klstablizer: 3
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 3 | 2 3)
	(3 3 | 2 4)
	(3 4 | 2 3)
	(3 4 | 2 4)
for (3 3 | 3 3) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 3
	lstablizer: 3
	ijstablizer: 3
	klstablizer: 3
	R.size = 2
	0
	1
	S.size = 2
	0
	1
	T.size = 2
	0
	1
	(3 3 | 3 3)
	(3 3 | 3 4)
	(3 3 | 4 4)
	(3 3 | 4 3)
	(3 4 | 3 3)
	(3 4 | 3 4)
	(3 4 | 4 4)
	(3 4 | 4 3)
done

      Computed 138 non-zero integrals.

  ==> Iterations <==

                        Total Energy        Delta E      Density RMS

   @RHF iter   1:   -73.24042886584859   -1.86613e+01    0.00000e+00 
   @RHF iter   2:   -74.93257351647667   -1.69214e+00    4.01565e-01 
   @RHF iter   3:   -74.96448534009765   -3.19118e-02    5.64466e-02 
   @RHF iter   4:   -74.96572358285502   -1.23824e-03    9.44910e-03 
   @RHF iter   5:   -74.96585769363649   -1.34111e-04    3.60703e-03 
   @RHF iter   6:   -74.96588081776879   -2.31241e-05    1.40810e-03 
   @RHF iter   7:   -74.96588519111519   -4.37335e-06    6.02759e-04 
   @RHF iter   8:   -74.96588603875404   -8.47639e-07    2.60939e-04 
   @RHF iter   9:   -74.96588620418349   -1.65429e-07    1.14307e-04 
   @RHF iter  10:   -74.96588623653504   -3.23516e-08    5.02940e-05 
   @RHF iter  11:   -74.96588624286541   -6.33037e-09    2.21868e-05 
   @RHF iter  12:   -74.96588624410441   -1.23900e-09    9.80030e-06 
   @RHF iter  13:   -74.96588624434688   -2.42466e-10    4.33206e-06 
   @RHF iter  14:   -74.96588624439435   -4.74785e-11    1.91565e-06 
   @RHF iter  15:   -74.96588624440359   -9.23706e-12    8.47283e-07 
   @RHF iter  16:   -74.96588624440534   -1.74794e-12    3.74792e-07 
   @RHF iter  17:   -74.96588624440572   -3.83693e-13    1.65798e-07 
   @RHF iter  18:   -74.96588624440584   -1.13687e-13    7.33470e-08 
   @RHF iter  19:   -74.96588624440584    0.00000e+00    3.24484e-08 
   @RHF iter  20:   -74.96588624440588   -4.26326e-14    1.43552e-08 
   @RHF iter  21:   -74.96588624440585    2.84217e-14    6.35079e-09 
   @RHF iter  22:   -74.96588624440585    0.00000e+00    2.80962e-09 
   @RHF iter  23:   -74.96588624440589   -4.26326e-14    1.24299e-09 
   @RHF iter  24:   -74.96588624440584    5.68434e-14    5.49906e-10 
   @RHF iter  25:   -74.96588624440585   -1.42109e-14    2.43282e-10 
   @RHF iter  26:   -74.96588624440588   -2.84217e-14    1.07629e-10 

  ==> Post-Iterations <==

	Orbital Energies (a.u.)
	-----------------------

	Doubly Occupied:                                                      

	   1A1   -20.250906     2A1    -1.258364     1B2    -0.595563  
	   3A1    -0.459319     1B1    -0.392531  

	Virtual:                                                              

	   4A1     0.583590     2B2     0.696147  

	Final Occupation by Irrep:
	         A1    A2    B1    B2 
	DOCC [     3,    0,    1,    1 ]

  Energy converged.

  @RHF Final Energy:   -74.96588624440588

  ==> Properties <==

 OEPROP: One-electron properties/analyses.
  by Rob Parrish and Justin Turney.
  built on LIBMINTS.

 Dipole Moment: (a.u.)
     X:     0.0000      Y:    -0.0000      Z:     0.6731     Total:     0.6731

 Dipole Moment: (Debye)
     X:     0.0000      Y:    -0.0000      Z:     1.7108     Total:     1.7108


  Saving occupied orbitals to File 100.

*** tstop() called on mac10147 at Tue Jun 14 09:57:13 2011
	user time   =       1.53 seconds =       0.03 minutes
	system time =       0.26 seconds =       0.00 minutes
	total time  =          0 seconds =       0.00 minutes

*** tstart() called on mac10147
*** at Tue Jun 14 09:57:13 2011

	There are an even number of electrons - assuming singlet.
	Specify the multiplicity with the MULTP option in the
	input if this is incorrect


         ---------------------------------------------------------
                                   SCF
            by Justin Turney, Rob Parrish, and Andy Simmonnett
                              RHF Reference
                        1 Threads,    256 MiB Core
         ---------------------------------------------------------

  ==> Geometry <==

    Molecular point group: c2v

    Geometry (in Angstrom), charge = 0, multiplicity = 1:

       Center              X                  Y                   Z       
    ------------   -----------------  -----------------  -----------------
           O          0.000000000000     0.000000000000    -0.071595529065
           H          0.000000000000     0.757933900350     0.568136500926
           H          0.000000000000    -0.757933900350     0.568136500926

    Number of unique atoms: 2

    Atoms equivalency:
       unique atom 0: 0 
       unique atom 1: 1 2 

  Running in c2v symmetry.

  Nuclear repulsion =    8.885697311889217

  Charge       = 0
  Multiplicity = 1
  Electrons    = 10
  Nalpha       = 5
  Nbeta        = 5

  ==> Algorithm <==

  SCF Algorithm Type is PK.
  DIIS disabled.
  MOM disabled.
  Guess Type is CORE.
  Energy threshold   = 1.00e-10
  Density threshold  = 1.00e-10
  Integral threshold = 0.00e+00

  ==> Primary Basis: STO-3G <==

  Basis Set
    Number of shells: 5
    Number of basis function: 7
    Number of Cartesian functions: 7
    Spherical Harmonics?: true
    Max angular momentum: 1

  ==> Pre-Iterations <==

  Minimum eigenvalue in the overlap matrix is 3.6477438243E-01.
  Using Symmetric Orthogonalization.
  SCF Guess: Core (One-Electron) Hamiltonian.

  Initial RHF energy:   -54.59289485665157

   -------------------------------------------------------
    Irrep   Nso     Nmo     Nalpha   Nbeta   Ndocc  Nsocc
   -------------------------------------------------------
     A1         4       4       3       3       3       0
     A2         0       0       0       0       0       0
     B1         1       1       1       1       1       0
     B2         2       2       1       1       1       0
   -------------------------------------------------------
    Total       7       7       5       5       5       0
   -------------------------------------------------------

  ==> Integral Setup <==

 MINTS: Wrapper to libmints.
   by Justin Turney

   Calculation information:
      Number of atoms:                   3
      Number of AO shells:               5
      Number of SO shells:               4
      Number of primitives:             15
      Number of atomic orbitals:         7
      Number of basis functions:         7

      Number of irreps:                  4
      Number of functions per irrep: [   4    0    1    2 ]

      Computing integrals...for (0 0 | 0 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(0 0 | 0 0)
for (1 0 | 0 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 0 | 0 0)
for (1 1 | 0 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 1 | 0 0)
for (1 0 | 1 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 0 | 1 0)
for (1 1 | 1 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 1 | 1 0)
for (1 1 | 1 1) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 1 | 1 1)
for (0 0 | 2 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (0 0 | 2 1) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (1 0 | 2 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (1 0 | 2 1) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (1 1 | 2 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (1 1 | 2 1) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (0 0 | 2 2) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(0 0 | 2 2)
for (2 0 | 2 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 0 | 2 0)
for (1 0 | 2 2) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 0 | 2 2)
for (2 1 | 2 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 1 | 2 0)
for (1 1 | 2 2) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 1 | 2 2)
for (2 1 | 2 1) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 1 | 2 1)
for (2 0 | 2 2) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (2 1 | 2 2) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (2 2 | 2 2) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 2 | 2 2)
for (3 0 | 0 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 0 | 0 0)
for (3 1 | 0 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 1 | 0 0)
for (3 0 | 1 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 0 | 1 0)
for (3 1 | 1 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 1 | 1 0)
for (3 0 | 1 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 0 | 1 1)
for (3 1 | 1 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 1 | 1 1)
for (0 0 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 4
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(0 0 | 2 3)
for (3 0 | 2 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 0 | 2 0)
for (1 0 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 4
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 0 | 2 3)
for (3 1 | 2 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 1 | 2 0)
for (3 0 | 2 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 0 | 2 1)
for (1 1 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 4
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 1 | 2 3)
for (3 1 | 2 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 1 | 2 1)
for (2 3 | 2 0) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 3 | 2 0)
for (3 0 | 2 2) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 0 | 2 2)
for (2 3 | 2 1) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 3 | 2 1)
for (3 1 | 2 2) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 1 | 2 2)
for (2 3 | 2 2) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 3 | 2 2)
for (3 3 | 0 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 1
	0
	(3 3 | 0 0)
	(3 4 | 0 0)
for (3 0 | 3 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 3
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 0 | 3 0)
	(3 0 | 4 0)
for (3 3 | 1 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 1
	0
	(3 3 | 1 0)
	(3 4 | 1 0)
for (3 1 | 3 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 3
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 1 | 3 0)
	(3 1 | 4 0)
for (3 3 | 1 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 1
	0
	(3 3 | 1 1)
	(3 4 | 1 1)
for (3 1 | 3 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 3
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 1 | 3 1)
	(3 1 | 4 1)
for (3 3 | 2 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 1
	0
	(3 3 | 2 0)
	(3 4 | 2 0)
for (3 0 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 3
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 0 | 2 3)
	(3 0 | 2 4)
for (3 3 | 2 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 1
	0
	(3 3 | 2 1)
	(3 4 | 2 1)
for (3 1 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 3
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 1 | 2 3)
	(3 1 | 2 4)
for (3 3 | 2 2) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 1
	0
	(3 3 | 2 2)
	(3 4 | 2 2)
for (2 3 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 3
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 3
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 2
	0
	1
	(2 3 | 2 3)
	(2 3 | 2 4)
for (3 3 | 3 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 3
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 3
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 3 | 3 0)
	(3 3 | 4 0)
	(3 4 | 3 0)
	(3 4 | 4 0)
for (3 3 | 3 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 3
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 3
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 3 | 3 1)
	(3 3 | 4 1)
	(3 4 | 3 1)
	(3 4 | 4 1)
for (3 3 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 3
	klstablizer: 3
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 3 | 2 3)
	(3 3 | 2 4)
	(3 4 | 2 3)
	(3 4 | 2 4)
for (3 3 | 3 3) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 3
	lstablizer: 3
	ijstablizer: 3
	klstablizer: 3
	R.size = 2
	0
	1
	S.size = 2
	0
	1
	T.size = 2
	0
	1
	(3 3 | 3 3)
	(3 3 | 3 4)
	(3 3 | 4 4)
	(3 3 | 4 3)
	(3 4 | 3 3)
	(3 4 | 3 4)
	(3 4 | 4 4)
	(3 4 | 4 3)
done

      Computed 138 non-zero integrals.

  ==> Iterations <==

                        Total Energy        Delta E      Density RMS

   @RHF iter   1:   -73.24145200420286   -1.86486e+01    0.00000e+00 
   @RHF iter   2:   -74.92922433791566   -1.68777e+00    4.01516e-01 
   @RHF iter   3:   -74.96436256105119   -3.51382e-02    5.92463e-02 
   @RHF iter   4:   -74.96571362646546   -1.35107e-03    9.73378e-03 
   @RHF iter   5:   -74.96585456080601   -1.40934e-04    3.69089e-03 
   @RHF iter   6:   -74.96587882178547   -2.42610e-05    1.43222e-03 
   @RHF iter   7:   -74.96588343795287   -4.61617e-06    6.15608e-04 
   @RHF iter   8:   -74.96588433909426   -9.01141e-07    2.67282e-04 
   @RHF iter   9:   -74.96588451625730   -1.77163e-07    1.17516e-04 
   @RHF iter  10:   -74.96588455115869   -3.49014e-08    5.18928e-05 
   @RHF iter  11:   -74.96588455803834   -6.87965e-09    2.29763e-05 
   @RHF iter  12:   -74.96588455939469   -1.35636e-09    1.01863e-05 
   @RHF iter  13:   -74.96588455966210   -2.67406e-10    4.51927e-06 
   @RHF iter  14:   -74.96588455971478   -5.26796e-11    2.00578e-06 
   @RHF iter  15:   -74.96588455972524   -1.04592e-11    8.90409e-07 
   @RHF iter  16:   -74.96588455972731   -2.07478e-12    3.95316e-07 
   @RHF iter  17:   -74.96588455972771   -3.97904e-13    1.75520e-07 
   @RHF iter  18:   -74.96588455972773   -1.42109e-14    7.79329e-08 
   @RHF iter  19:   -74.96588455972778   -5.68434e-14    3.46039e-08 
   @RHF iter  20:   -74.96588455972775    2.84217e-14    1.53650e-08 
   @RHF iter  21:   -74.96588455972778   -2.84217e-14    6.82248e-09 
   @RHF iter  22:   -74.96588455972780   -1.42109e-14    3.02938e-09 
   @RHF iter  23:   -74.96588455972777    2.84217e-14    1.34513e-09 
   @RHF iter  24:   -74.96588455972778   -1.42109e-14    5.97279e-10 
   @RHF iter  25:   -74.96588455972775    2.84217e-14    2.65211e-10 
   @RHF iter  26:   -74.96588455972777   -1.42109e-14    1.17762e-10 

  ==> Post-Iterations <==

	Orbital Energies (a.u.)
	-----------------------

	Doubly Occupied:                                                      

	   1A1   -20.252315     2A1    -1.256776     1B2    -0.592031  
	   3A1    -0.460263     1B1    -0.392739  

	Virtual:                                                              

	   4A1     0.580043     2B2     0.689025  

	Final Occupation by Irrep:
	         A1    A2    B1    B2 
	DOCC [     3,    0,    1,    1 ]

  Energy converged.

  @RHF Final Energy:   -74.96588455972777

  ==> Properties <==

 OEPROP: One-electron properties/analyses.
  by Rob Parrish and Justin Turney.
  built on LIBMINTS.

 Dipole Moment: (a.u.)
     X:     0.0000      Y:     0.0000      Z:     0.6719     Total:     0.6719

 Dipole Moment: (Debye)
     X:     0.0000      Y:     0.0000      Z:     1.7078     Total:     1.7078


  Saving occupied orbitals to File 100.

*** tstop() called on mac10147 at Tue Jun 14 09:57:13 2011
	user time   =       1.57 seconds =       0.03 minutes
	system time =       0.26 seconds =       0.00 minutes
	total time  =          0 seconds =       0.00 minutes

*** tstart() called on mac10147
*** at Tue Jun 14 09:57:13 2011

	There are an even number of electrons - assuming singlet.
	Specify the multiplicity with the MULTP option in the
	input if this is incorrect


         ---------------------------------------------------------
                                   SCF
            by Justin Turney, Rob Parrish, and Andy Simmonnett
                              RHF Reference
                        1 Threads,    256 MiB Core
         ---------------------------------------------------------

  ==> Geometry <==

    Molecular point group: c2v

    Geometry (in Angstrom), charge = 0, multiplicity = 1:

       Center              X                  Y                   Z       
    ------------   -----------------  -----------------  -----------------
           O          0.000000000000     0.000000000000    -0.071178389481
           H          0.000000000000     0.757933900350     0.564826346976
           H          0.000000000000    -0.757933900350     0.564826346976

    Number of unique atoms: 2

    Atoms equivalency:
       unique atom 0: 0 
       unique atom 1: 1 2 

  Running in c2v symmetry.

  Nuclear repulsion =    8.906404252597596

  Charge       = 0
  Multiplicity = 1
  Electrons    = 10
  Nalpha       = 5
  Nbeta        = 5

  ==> Algorithm <==

  SCF Algorithm Type is PK.
  DIIS disabled.
  MOM disabled.
  Guess Type is CORE.
  Energy threshold   = 1.00e-10
  Density threshold  = 1.00e-10
  Integral threshold = 0.00e+00

  ==> Primary Basis: STO-3G <==

  Basis Set
    Number of shells: 5
    Number of basis function: 7
    Number of Cartesian functions: 7
    Spherical Harmonics?: true
    Max angular momentum: 1

  ==> Pre-Iterations <==

  Minimum eigenvalue in the overlap matrix is 3.6319246962E-01.
  Using Symmetric Orthogonalization.
  SCF Guess: Core (One-Electron) Hamiltonian.

  Initial RHF energy:   -54.58600439838673

   -------------------------------------------------------
    Irrep   Nso     Nmo     Nalpha   Nbeta   Ndocc  Nsocc
   -------------------------------------------------------
     A1         4       4       3       3       3       0
     A2         0       0       0       0       0       0
     B1         1       1       1       1       1       0
     B2         2       2       1       1       1       0
   -------------------------------------------------------
    Total       7       7       5       5       5       0
   -------------------------------------------------------

  ==> Integral Setup <==

 MINTS: Wrapper to libmints.
   by Justin Turney

   Calculation information:
      Number of atoms:                   3
      Number of AO shells:               5
      Number of SO shells:               4
      Number of primitives:             15
      Number of atomic orbitals:         7
      Number of basis functions:         7

      Number of irreps:                  4
      Number of functions per irrep: [   4    0    1    2 ]

      Computing integrals...for (0 0 | 0 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(0 0 | 0 0)
for (1 0 | 0 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 0 | 0 0)
for (1 1 | 0 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 1 | 0 0)
for (1 0 | 1 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 0 | 1 0)
for (1 1 | 1 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 1 | 1 0)
for (1 1 | 1 1) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 1 | 1 1)
for (0 0 | 2 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (0 0 | 2 1) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (1 0 | 2 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (1 0 | 2 1) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (1 1 | 2 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (1 1 | 2 1) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (0 0 | 2 2) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(0 0 | 2 2)
for (2 0 | 2 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 0 | 2 0)
for (1 0 | 2 2) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 0 | 2 2)
for (2 1 | 2 0) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 1 | 2 0)
for (1 1 | 2 2) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 1 | 2 2)
for (2 1 | 2 1) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 1 | 2 1)
for (2 0 | 2 2) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (2 1 | 2 2) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
for (2 2 | 2 2) need to compute:
	lambda_T: 1
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 4
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 2 | 2 2)
for (3 0 | 0 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 0 | 0 0)
for (3 1 | 0 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 1 | 0 0)
for (3 0 | 1 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 0 | 1 0)
for (3 1 | 1 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 1 | 1 0)
for (3 0 | 1 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 0 | 1 1)
for (3 1 | 1 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 1 | 1 1)
for (0 0 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 4
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(0 0 | 2 3)
for (3 0 | 2 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 0 | 2 0)
for (1 0 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 4
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 0 | 2 3)
for (3 1 | 2 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 1 | 2 0)
for (3 0 | 2 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 0 | 2 1)
for (1 1 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 4
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 4
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(1 1 | 2 3)
for (3 1 | 2 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 1 | 2 1)
for (2 3 | 2 0) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 3 | 2 0)
for (3 0 | 2 2) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 0 | 2 2)
for (2 3 | 2 1) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 3 | 2 1)
for (3 1 | 2 2) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(3 1 | 2 2)
for (2 3 | 2 2) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 1
	0
	S.size = 1
	0
	T.size = 1
	0
	(2 3 | 2 2)
for (3 3 | 0 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 1
	0
	(3 3 | 0 0)
	(3 4 | 0 0)
for (3 0 | 3 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 3
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 0 | 3 0)
	(3 0 | 4 0)
for (3 3 | 1 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 1
	0
	(3 3 | 1 0)
	(3 4 | 1 0)
for (3 1 | 3 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 3
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 1 | 3 0)
	(3 1 | 4 0)
for (3 3 | 1 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 1
	0
	(3 3 | 1 1)
	(3 4 | 1 1)
for (3 1 | 3 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 3
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 1 | 3 1)
	(3 1 | 4 1)
for (3 3 | 2 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 1
	0
	(3 3 | 2 0)
	(3 4 | 2 0)
for (3 0 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 3
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 0 | 2 3)
	(3 0 | 2 4)
for (3 3 | 2 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 1
	0
	(3 3 | 2 1)
	(3 4 | 2 1)
for (3 1 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 4
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 3
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 1 | 2 3)
	(3 1 | 2 4)
for (3 3 | 2 2) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 4
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 1
	0
	(3 3 | 2 2)
	(3 4 | 2 2)
for (2 3 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 4
	jstablizer: 3
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 3
	klstablizer: 3
	R.size = 1
	0
	S.size = 1
	0
	T.size = 2
	0
	1
	(2 3 | 2 3)
	(2 3 | 2 4)
for (3 3 | 3 0) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 3
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 3
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 3 | 3 0)
	(3 3 | 4 0)
	(3 4 | 3 0)
	(3 4 | 4 0)
for (3 3 | 3 1) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 3
	lstablizer: 4
	ijstablizer: 3
	klstablizer: 3
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 3 | 3 1)
	(3 3 | 4 1)
	(3 4 | 3 1)
	(3 4 | 4 1)
for (3 3 | 2 3) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 4
	lstablizer: 3
	ijstablizer: 3
	klstablizer: 3
	R.size = 2
	0
	1
	S.size = 1
	0
	T.size = 2
	0
	1
	(3 3 | 2 3)
	(3 3 | 2 4)
	(3 4 | 2 3)
	(3 4 | 2 4)
for (3 3 | 3 3) need to compute:
	lambda_T: 2
	istablizer: 3
	jstablizer: 3
	kstablizer: 3
	lstablizer: 3
	ijstablizer: 3
	klstablizer: 3
	R.size = 2
	0
	1
	S.size = 2
	0
	1
	T.size = 2
	0
	1
	(3 3 | 3 3)
	(3 3 | 3 4)
	(3 3 | 4 4)
	(3 3 | 4 3)
	(3 4 | 3 3)
	(3 4 | 3 4)
	(3 4 | 4 4)
	(3 4 | 4 3)
done

      Computed 138 non-zero integrals.

  ==> Iterations <==

                        Total Energy        Delta E      Density RMS

   @RHF iter   1:   -73.24094615960452   -1.86549e+01    0.00000e+00 
   @RHF iter   2:   -74.93094331791967   -1.69000e+00    4.01536e-01 
   @RHF iter   3:   -74.96444121374275   -3.34979e-02    5.78382e-02 
   @RHF iter   4:   -74.96573439545752   -1.29318e-03    9.58872e-03 
   @RHF iter   5:   -74.96587188382226   -1.37488e-04    3.64870e-03 
   @RHF iter   6:   -74.96589557405281   -2.36902e-05    1.42027e-03 
   @RHF iter   7:   -74.96590006797699   -4.49392e-06    6.09197e-04 
   @RHF iter   8:   -74.96590094208936   -8.74112e-07    2.64110e-04 
   @RHF iter   9:   -74.96590111330565   -1.71216e-07    1.15906e-04 
   @RHF iter  10:   -74.96590114691095   -3.36053e-08    5.10891e-05 
   @RHF iter  11:   -74.96590115351067   -6.59972e-09    2.25786e-05 
   @RHF iter  12:   -74.96590115480699   -1.29631e-09    9.99152e-06 
   @RHF iter  13:   -74.96590115506164   -2.54659e-10    4.42463e-06 
   @RHF iter  14:   -74.96590115511169   -5.00506e-11    1.96015e-06 
   @RHF iter  15:   -74.96590115512150   -9.80549e-12    8.68544e-07 
   @RHF iter  16:   -74.96590115512343   -1.93268e-12    3.84896e-07 
   @RHF iter  17:   -74.96590115512380   -3.69482e-13    1.70578e-07 
   @RHF iter  18:   -74.96590115512392   -1.13687e-13    7.55988e-08 
   @RHF iter  19:   -74.96590115512389    2.84217e-14    3.35055e-08 
   @RHF iter  20:   -74.96590115512390   -1.42109e-14    1.48498e-08 
   @RHF iter  21:   -74.96590115512390    0.00000e+00    6.58156e-09 
   @RHF iter  22:   -74.96590115512392   -1.42109e-14    2.91701e-09 
   @RHF iter  23:   -74.96590115512393   -1.42109e-14    1.29285e-09 
   @RHF iter  24:   -74.96590115512396   -2.84217e-14    5.73004e-10 
   @RHF iter  25:   -74.96590115512394    1.42109e-14    2.53962e-10 
   @RHF iter  26:   -74.96590115512392    2.84217e-14    1.12559e-10 

  ==> Post-Iterations <==

	Orbital Energies (a.u.)
	-----------------------

	Doubly Occupied:                                                      

	   1A1   -20.251613     2A1    -1.257571     1B2    -0.593796  
	   3A1    -0.459795     1B1    -0.392635  

	Virtual:                                                              

	   4A1     0.581821     2B2     0.692579  

	Final Occupation by Irrep:
	         A1    A2    B1    B2 
	DOCC [     3,    0,    1,    1 ]

  Energy converged.

  @RHF Final Energy:   -74.96590115512392

  ==> Properties <==

 OEPROP: One-electron properties/analyses.
  by Rob Parrish and Justin Turney.
  built on LIBMINTS.

 Dipole Moment: (a.u.)
     X:     0.0000      Y:     0.0000      Z:     0.6725     Total:     0.6725

 Dipole Moment: (Debye)
     X:     0.0000      Y:     0.0000      Z:     1.7094     Total:     1.7094


  Saving occupied orbitals to File 100.

*** tstop() called on mac10147 at Tue Jun 14 09:57:13 2011
	user time   =       1.61 seconds =       0.03 minutes
	system time =       0.27 seconds =       0.00 minutes
	total time  =          0 seconds =       0.00 minutes
    -Cartesian displacement SALCs per irrep:
    Irrep  #SALCs
    -----  ------
      0       3
      1       1
      2       2
      3       3

	Finite difference computation of gradient using 3-point formula
	Check for precision!
	Energy without displacment:  -74.9659011551
	Gradients are in mass-weighted, symmetry-adapted cartesians (in au).
 Coord      Energy(-)        Energy(+)        Force
    0    -74.9658988637   -74.9658994762    -0.0000306235
    1    -74.9658767470   -74.9658783502    -0.0000801600
    2    -74.9658862444   -74.9658845597     0.0000842339


			----------------------------------
			 OPTKING: for geometry optimizations  
			  - R.A. King,  Bethel University   
			------------------------------------

	Prevous internal coordinate definitions found.
	---Fragment 1 Geometry and Gradient---
	 O           0.0000000000        0.0000000000       -0.1345076524
	 H           0.0000000000        1.4322873891        1.0673670269
	 H           0.0000000000       -1.4322873891        1.0673670269
	             0.0000000000        0.0000000000       -0.0000306235
	             0.0000000000       -0.0000566817        0.0000595624
	             0.0000000000        0.0000566817        0.0000595624

	---Fragment 1 Intrafragment Coordinates---
	 * Coordinate *           * BOHR/RAD *       * ANG/DEG *
	 R(1,2)           =         1.869746	       0.989427
	 R(1,3)           =         1.869746	       0.989427
	 B(2,1,3)         =         1.745294	      99.997988

	Current energy   :       -74.9659011551

	Energy change for the previous step:
		Projected    :        -0.0000045680
		Actual       :        -0.0000057876
	Energy ratio large: Trust radius increased.


	Performing BFGS update with previous 4 gradient(s).
	Following RFO solution 0.
	Projected energy change by RFO approximation:        -0.0000000283

	Back-transformation to cartesian coordinates...
	Successfully converged to displaced geometry.

	---Internal Coordinate Step in ANG or DEG, aJ/ANG or AJ/DEG ---
	 ----------------------------------------------------------------------
	 Coordinate             Previous        Force       Change         New 
	 ----------             --------       ------       ------       ------
	 R(1,2)          =      0.989427     0.000199    -0.000013     0.989414
	 R(1,3)          =      0.989427     0.000199    -0.000013     0.989414
	 B(2,1,3)        =     99.997988     0.000008     0.029812   100.027800
	 ----------------------------------------------------------------------

	Convergence Check Cycle    5: (using internal coordinates in au)
	                    Actual        Tolerance     Converged?
	----------------------------------------------------------
	MAX Force           1.1e-04        3.0e-04         yes
	Energy Change      -5.8e-06        1.0e-06          no
	MAX Displacement    5.2e-04        1.2e-03         yes
	----------------------------------------------------------

	 **** Optimization is complete! ****

	            ****  Optimization Summary  ****
	----------------------------------------------------------------------------
	 Step         Energy             Delta(E)      MAX force    MAX Delta(q)  
	----------------------------------------------------------------------------
	   1    -74.964662543200    -74.964662543200    2.30e-02     2.30e-02
	   2    -74.965442673200     -0.000780130000    1.41e-02     1.41e-02
	   3    -74.965869186200     -0.000426513000    3.00e-03     3.00e-03
	   4    -74.965895367500     -0.000026181300    1.36e-03     1.36e-03
	   5    -74.965901155100     -0.000005787600    1.11e-04     1.11e-04
	----------------------------------------------------------------------

	Writing optimization data to binary file.
	Final energy is    -74.9659011551000
	Final (previous) structure:
	Cartesian Geometry (au)
	    O     0.0000000000   0.0000000000  -0.1345076524
	    H     0.0000000000   1.4322873891   1.0673670269
	    H     0.0000000000  -1.4322873891   1.0673670269
	Saving final (previous) structure.
			--------------------------
			 OPTKING Finished Execution 
			--------------------------

*** PSI4 exiting successfully, buy a developer a beer!
