#! SCF STO-3G geometry optimzation, with Z-matrix input, by finite-differences

# Same test case as scf5
nucenergy = 8.9064890670                            #TEST
refenergy = -74.965901192                           #TEST

molecule h2o {
     O
     H 1 1.0
     H 1 1.0 2 104.5
}

set globals {
  diis false
  basis sto-3g
  e_converge 10
  d_converge 10
}

set findif {
  points 3
}

cycle = 0
returnValue = 0
thisenergy = 0.0

# initialize global molecule
h2o.update_geometry()

# optimization loop
while (cycle < 20 and returnValue != PsiReturnType.EndLoop):
    # generate geometry list for finite differences (undisplaced geometry is last)
    geoms = fd_geoms_1_0()
    #initialize vector of correct length
    if cycle == 0:
        E = PsiMod.Vector(len(geoms))
    # compute energy for each geometry
    for i in range(len(geoms)):
        h2o.set_geometry(geoms[i])
        E.set(0, i, energy('scf'))
    thisenergy = E.get(0,len(geoms)-1)
    # pass energies to function to compute gradient
    fd_grad_1_0(E)
    #take optimization step
    returnValue = optking()
    cycle = cycle + 1

# if you want to print energies from python
#print 'Energies\n'
#for i in range(len(geoms)):
#    print '{0:5} {1:20.10f}\n'.format(i,E[i])

compare_values(nucenergy, h2o.nuclear_repulsion_energy(), 3, "Nuclear repulsion energy")    #TEST
compare_values(refenergy, thisenergy, 3, "Reference energy")                                #TEST

clean()

