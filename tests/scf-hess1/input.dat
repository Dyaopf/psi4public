#! RHF STO-3G water Hessian test, against Psi3 reference values.

import numpy as np

psi3_hess = np.array([
    [ 0.6349786,-0.0002790,-0.0000000,-0.3185355, 0.2164913, 0.0000000,-0.3164431,-0.2162124, 0.0000000],
    [-0.0002790, 0.8039939,-0.0000000, 0.3373248,-0.4009174,-0.0000000,-0.3370458,-0.4030765, 0.0000000],
    [-0.0000000,-0.0000000,-0.0000130, 0.0000000,-0.0000000,-0.0000008, 0.0000000, 0.0000000, 0.0000138],
    [-0.3185355, 0.3373248, 0.0000000, 0.3011910,-0.2770123,-0.0000000, 0.0173445,-0.0603125, 0.0000000],
    [ 0.2164913,-0.4009174,-0.0000000,-0.2770123, 0.4378681, 0.0000000, 0.0605209,-0.0369508,-0.0000000],
    [ 0.0000000,-0.0000000,-0.0000008,-0.0000000, 0.0000000,-0.0000069, 0.0000000, 0.0000000, 0.0000077],
    [-0.3164431,-0.3370458, 0.0000000, 0.0173445, 0.0605209, 0.0000000, 0.2990986, 0.2765248,-0.0000000],
    [-0.2162124,-0.4030765, 0.0000000,-0.0603125,-0.0369508, 0.0000000, 0.2765248, 0.4400273,-0.0000000],
    [ 0.0000000, 0.0000000, 0.0000138, 0.0000000,-0.0000000, 0.0000077,-0.0000000,-0.0000000,-0.0000215]
])


molecule {
symmetry c1
units bohr
nocom
noreorient
  O            0.134467872279     0.000255539126     0.000000000000
  H           -1.069804624577     1.430455315728    -0.000000000000
  H           -1.064298089419    -1.434510907104    -0.000000000000
}

set {
  puream false
  df_scf_guess false
  scf_type pk
  guess sad
  basis sto-3g
  d_convergence 10
  print 2
}

energy,wfn = energy('scf', return_wfn=True)
psi4.scfhess(wfn)
psi4_hess = np.asarray(wfn.hessian())

if not np.allclose(psi3_hess, psi4_hess, atol=1E-7):
    raise ValidationError("Hessian test failed")
