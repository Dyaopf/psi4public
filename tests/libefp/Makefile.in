
.PHONY: tests quicktests cc_tests clean quicktestsclean longtests longtestsclean

efpefp_sp_subdirs = efp1 efp2 qc-efpefp-sp1

efpefp_opt_subdirs = efp3

efpscf_sp_subdirs = qc-scfefp-sp1

efpscf_opt_subdirs =

subdirs = \
$(efpefp_sp_subdirs) \
$(efpefp_opt_subdirs) \
$(efpscf_sp_subdirs) \
$(efpscf_opt_subdirs)

# Compile the plugins, if we activated them
HAVE_PLUGINS=@HAVE_PLUGINS@
ifeq ($(HAVE_PLUGINS),yes)
   subdirs += $(plugin_subdirs)
endif

# only short tests, only one from each type of computation
# the idea is that all these should run in ~ 5-10 minutes
quicktestdirs = tu1-h2o-energy tu2-ch2-energy tu3-h2o-opt tu4-h2o-freq \
  tu5-sapt castup1 scf1 scf2 scf3 scf5 scf-guess-read dft1 dfmp2-1 \
  cc1 cc2 cc3 cc4 cc8 cc8a cc12 \
  cc15 cc16 cc17 cc18 cc19 cc23 cc24 cc28 cc32 cc49 \
  fci-dipole cisd-h2o+-0 ci-multi \
  cisd-opt-fd rasci-h2o mpn-bh \
  mcscf1 sapt1 sad1 \
  psimrcc-sp1 mints1 mints2 matrix1 opt1 opt1-fd gibbs omp2-2 \
  omp3-1 omp2_5-2 ocepa1 fnocc2 fnocc4 \
  mp2_5-grad1 ocepa-grad2 omp2-grad1 dcft-grad1 \
  dcft1 dcft2 dcft3 dcft4 pywrap-db1 pywrap-db2 pywrap-cbs1 pywrap-all pywrap-alias \
  pywrap-molecule 

#HAVE_MADNESS=@HAVE_MPI@
#ifeq ($(HAVE_MADNESS),1)
#   subdirs += $(maddness_subdirs)
#endif
# 
#have_dftd3 := $(shell which dftd3)
#ifneq ($(have_dftd3),)
#   subdirs += $(dftd3_subdirs)
#   quicktestdirs += dftd3-energy
#endif
#
#have_dmrcc := $(shell which dmrcc)
#ifneq ($(have_mrcc),)
#   subdirs += $(mrcc_subdirs)
#endif

define gatherresults
    ERRORS=0; \
    echo > ../test-case-results; \
    for dir in $1; do \
        if [ -e $${dir}/$${dir}.passed ]; \
        then echo "Testing $${dir}..." >> ../test-case-results; \
             cat $${dir}/$${dir}.passed >> ../test-case-results;\
        else ERRORS=1; \
        fi; \
    done; \
    for dir in $1; do \
        if [ ! -e $${dir}/$${dir}.passed ]; \
        then echo "\n\nTEST FAILURE in $${dir}$$!!!";           \
             cat $${dir}/$${dir}.test;                          \
             echo;                                              \
             echo "Testing $${dir}..." >> ../test-case-results; \
             cat $${dir}/$${dir}.test >> ../test-case-results;  \
             echo "\tFAILED" >>../test-case-results; \
        fi; \
    done; \
    if [ $$ERRORS -eq 1 ]; then echo "One or more tests failed! Check test-case-results for more information.\n" && exit 1; fi;\
    echo ERRORS = $$ERRORS
endef

tests: $(subdirs)
	$(call gatherresults, $(subdirs))

#quicktests: $(quicktestdirs)
#	$(call gatherresults, $(quicktestdirs))

#longtests: $(longtest_subdirs)
#	$(call gatherresults, $(longtest_subdirs)

efpefp_sp_tests: $(efpefp_sp_subdirs)
	$(call gatherresults, $(sp_rhf_subdirs))

efpefp_opt_tests: $(efpefp_opt_subdirs)
	$(call gatherresults, $(sp_uhf_subdirs))

efpscf_sp_tests: $(efpscf_sp_subdirs)
	$(call gatherresults, $(sp_rohf_subdirs))

efpscf_opt_tests: $(efpscf_opt_subdirs)
	$(call gatherresults, $(efpscf_subdirs))

plugins:
	for dir in $(plugin_subdirs); \
	do \
	 (cd $${dir} && echo ...Testing $${dir}... && $(MAKE)) || exit 1; \
	done

clean:
	for dir in $(subdirs); \
	do \
	 (cd $${dir} && echo ...Cleaning $${dir}... && $(MAKE) clean) || exit 1; \
	done
	rm -f ../test-case-results

quicktestsclean:
	for dir in $(quicktestdirs); \
	do \
	 (cd $${dir} && echo ...Cleaning $${dir}... && $(MAKE) clean) || exit 1; \
	done
	rm -f ../test-case-results

longtestsclean:
	for dir in $(longtest_subdirs); \
	do \
	 (cd $${dir} && echo ...Cleaning $${dir}... && $(MAKE) clean) || exit 1; \
	done

libefptests:
	do \
	 (cd libefp && $(MAKE) tests) || exit 1; \
	done

top_srcdir = @top_srcdir@
srcdir = @srcdir@
top_objdir = ../..

$(top_srcdir)/configure: $(top_srcdir)/configure.ac $(top_srcdir)/aclocal.m4
	cd $(top_srcdir) && autoconf

$(top_objdir)/config.status: $(top_srcdir)/configure
	cd $(top_objdir) && ./config.status --recheck

Makefile: $(srcdir)/Makefile.in $(top_objdir)/config.status
	cd $(top_objdir) && CONFIG_FILES=tests/libefp/Makefile ./config.status

.PHONY: $(subdirs)
$(subdirs):
	echo "Testing $@..."
	$(MAKE) -C $@; true

