#! Test individual integral objects for correctness.
print_stdout(' Case Study Test of Integrals')

molecule h2o {
  symmetry c1
  o
  h 1 1.0
  h 1 1.0 2 103.1
}

set {
  basis sto-3g
}

input_directory = get_input_directory() + "/"                        #TEST

mints = MintsHelper()
nbf = mints.basisset().nbf()                                         #TEST

Li = mints.ao_angular_momentum()

#Li[0].save("Lx-STO-3G.dat", False, False, True)                     #TEST
#Li[1].save("Ly-STO-3G.dat", False, False, True)                     #TEST
#Li[2].save("Lz-STO-3G.dat", False, False, True)                     #TEST

RefX = Matrix(nbf, nbf)                                              #TEST
RefY = Matrix(nbf, nbf)                                              #TEST
RefZ = Matrix(nbf, nbf)                                              #TEST

RefX.load(input_directory + "Lx-STO-3G.dat")                         #TEST
RefY.load(input_directory + "Ly-STO-3G.dat")                         #TEST
RefZ.load(input_directory + "Lz-STO-3G.dat")                         #TEST

print_stdout("   -H2O STO-3G Angular Momentum Integrals:")           #TEST
compare_matrices(RefX, Li[0], 13, "AO Lx")                           #TEST
compare_matrices(RefX, Li[0], 13, "AO Ly")                           #TEST
compare_matrices(RefX, Li[0], 13, "AO Lz")                           #TEST

set {
  basis 6-311G**
}

input_directory = get_input_directory() + "/"                        #TEST

mints = MintsHelper()
nbf = mints.basisset().nbf()                                         #TEST

Li = mints.ao_angular_momentum()

#Li[0].save("Lx-6-311Gss.dat", False, False, True)                   #TEST
#Li[1].save("Ly-6-311Gss.dat", False, False, True)                   #TEST
#Li[2].save("Lz-6-311Gss.dat", False, False, True)                   #TEST

RefX = Matrix(nbf, nbf)                                              #TEST
RefY = Matrix(nbf, nbf)                                              #TEST
RefZ = Matrix(nbf, nbf)                                              #TEST

RefX.load(input_directory + "Lx-6-311Gss.dat")                       #TEST
RefY.load(input_directory + "Ly-6-311Gss.dat")                       #TEST
RefZ.load(input_directory + "Lz-6-311Gss.dat")                       #TEST

print_stdout("   -H2O 6-311G** Angular Momentum Integrals:")         #TEST
compare_matrices(RefX, Li[0], 13, "AO Lx")                           #TEST
compare_matrices(RefX, Li[0], 13, "AO Ly")                           #TEST
compare_matrices(RefX, Li[0], 13, "AO Lz")                           #TEST

set {
  basis cc-pVTZ
  puream false
}

input_directory = get_input_directory() + "/"                        #TEST

mints = MintsHelper()
nbf = mints.basisset().nbf()                                         #TEST

Li = mints.ao_angular_momentum()

#Li[0].save("Lx-cc-pVTZ.dat", False, False, True)                    #TEST
#Li[1].save("Ly-cc-pVTZ.dat", False, False, True)                    #TEST
#Li[2].save("Lz-cc-pVTZ.dat", False, False, True)                    #TEST

RefX = Matrix(nbf, nbf)                                              #TEST
RefY = Matrix(nbf, nbf)                                              #TEST
RefZ = Matrix(nbf, nbf)                                              #TEST

RefX.load(input_directory + "Lx-cc-pVTZ.dat")                        #TEST
RefY.load(input_directory + "Ly-cc-pVTZ.dat")                        #TEST
RefZ.load(input_directory + "Lz-cc-pVTZ.dat")                        #TEST

print_stdout("   -H2O cc-pVTZ Angular Momentum Integrals:")          #TEST
compare_matrices(RefX, Li[0], 13, "AO Lx")                           #TEST
compare_matrices(RefX, Li[0], 13, "AO Ly")                           #TEST
compare_matrices(RefX, Li[0], 13, "AO Lz")                           #TEST

# There shouldn't be anything to clean
clean()
