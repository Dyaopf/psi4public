#ifndef SAPTDFT_H
#define SAPTDFT_H

#include "sapt0.h"

namespace psi { 

class Quadrature;

namespace sapt {

class SAPT_DFT : public SAPT0 {

private:

protected:

    /// The auxiliary basis for monomer A
    boost::shared_ptr<BasisSet> aux_A_;
    /// The auxiliary basis for monomer B
    boost::shared_ptr<BasisSet> aux_B_;

    /// The quadrature over i*omega
    boost::shared_ptr<Quadrature> quad_;
    
    /// The off diagonal J block (A|B)  
    boost::shared_ptr<Matrix> J_AB_;
    /// The on diagonal J block (A|A)  
    boost::shared_ptr<Matrix> J_A_;
    /// The on diagonal J block (B|B)  
    boost::shared_ptr<Matrix> J_B_;
    /// The on-diagonal J block inverse (A|A)^-1
    boost::shared_ptr<Matrix> J_A_inv_;
    /// The on-diagonal J block inverse (B|B)^-1
    boost::shared_ptr<Matrix> J_B_inv_;
    /// The on-diagonal S block (AA)
    boost::shared_ptr<Matrix> S_A_;
    /// The on-diagonal S block (BB)
    boost::shared_ptr<Matrix> S_B_;
    /// The on-diagonal S block inverse (AA)^-1
    boost::shared_ptr<Matrix> S_A_inv_;
    /// The on-diagonal S block inverse (BB)^-1
    boost::shared_ptr<Matrix> S_B_inv_;
    /// The D matrix for monomer A
    boost::shared_ptr<Matrix> D_A_;
    /// The D matrix for monomer B
    boost::shared_ptr<Matrix> D_B_;
    /// The vector of X0 matrices for monomer A
    std::vector<boost::shared_ptr<Matrix> > X0_A_;
    /// The vector of X0 matrices for monomer B
    std::vector<boost::shared_ptr<Matrix> > X0_B_;
    /// The coupling matrix for monomer A
    boost::shared_ptr<Matrix> W_A_;
    /// The coupling matrix for monomer B
    boost::shared_ptr<Matrix> W_B_;
    /// The vector of XC matrices for monomer A
    std::vector<boost::shared_ptr<Matrix> > XC_A_;
    /// The vector of XC matrices for monomer B
    std::vector<boost::shared_ptr<Matrix> > XC_B_;
    
    /// Print the header
    virtual void print_header(); 
    /// Print the results
    virtual void print_results();
    
    /// Form the omega quadrature
    void form_quadrature();
    /// Form the monomer local auxiliary bases
    void form_bases(); 
    /// Form the various J matrices and inverses
    void form_J();
    /// Form the various S matrices and inverses
    void form_S();
    /// Form the D matrices 
    void form_D();    
    /// Form the W coupling matrices
    void form_W();
    /// Form the X0 response tensors
    void form_X0();
    /// Form the XC response tensors
    void form_XC();

    /// Do a Casimir-Polder Quadrature for the given X
    std::vector<double> casimirPolder(std::vector<boost::shared_ptr<Matrix> > XA,
        std::vector<boost::shared_ptr<Matrix> > XB);

    /// Helper method for XC response tensors
    boost::shared_ptr<Matrix> XC(boost::shared_ptr<Matrix> X0,
                                 boost::shared_ptr<Matrix> W,
                                 boost::shared_ptr<Matrix> S,
                                 boost::shared_ptr<Matrix> Sinv);

    /// Helper method for W coupling matrices
    boost::shared_ptr<Matrix> W(boost::shared_ptr<BasisSet> aux,
                                boost::shared_ptr<Matrix>   J,
                                boost::shared_ptr<Matrix>   Jinv,
                                boost::shared_ptr<Matrix>   S,
                                boost::shared_ptr<Matrix>   D);

public:
    SAPT_DFT(Options& options, boost::shared_ptr<PSIO> psio, boost::shared_ptr<Chkpt> chkpt);
    virtual ~SAPT_DFT();

    virtual double compute_energy();
};

}}

#endif
