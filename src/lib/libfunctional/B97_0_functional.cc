/**********************************************************
* B97_0_functional.cc: definitions for B97_0_functional for KS-DFT
* Robert Parrish, robparrish@gmail.com
* Autogenerated by MATLAB Script on 25-May-2011
*
***********************************************************/
#include <libmints/points.h>
#include <libmints/vector.h>
#include <libciomr/libciomr.h>
#include "B97_0_functional.h"
#include <stdlib.h>
#include <cmath>
#include <string>
#include <string>
#include <vector>

using namespace psi;
using namespace boost;
using namespace std;

namespace psi { namespace functional {

B97_0_Functional::B97_0_Functional(int npoints, int deriv) : Functional(npoints, deriv)
{
    
    name_ = "B97_0";
    description_ = "B97-0 Power Series GGA";
    citation_ = "A.D. Becke, J. Chem. Phys., 107(20), 8554-8560, 1997";
    
    double c0 = -9.3052573634909974E-01;
    params_.push_back(make_pair("c0",c0));
    double two_13 = 1.2599210498948732E+00;
    params_.push_back(make_pair("two_13",two_13));
    double d2fz0 = 1.7099210000000000E+00;
    params_.push_back(make_pair("d2fz0",d2fz0));
    double c = 6.2035049089939986E-01;
    params_.push_back(make_pair("c",c));
    double Aa = 1.6886999999999999E-02;
    params_.push_back(make_pair("Aa",Aa));
    double a1a = 1.1125000000000000E-01;
    params_.push_back(make_pair("a1a",a1a));
    double b1a = 1.0356999999999999E+01;
    params_.push_back(make_pair("b1a",b1a));
    double b2a = 3.6231000000000000E+00;
    params_.push_back(make_pair("b2a",b2a));
    double b3a = 8.8026000000000004E-01;
    params_.push_back(make_pair("b3a",b3a));
    double b4a = 4.9670999999999998E-01;
    params_.push_back(make_pair("b4a",b4a));
    double c0p = 3.1091000000000001E-02;
    params_.push_back(make_pair("c0p",c0p));
    double a1p = 2.1370000000000000E-01;
    params_.push_back(make_pair("a1p",a1p));
    double b1p = 7.5956999999999999E+00;
    params_.push_back(make_pair("b1p",b1p));
    double b2p = 3.5876000000000001E+00;
    params_.push_back(make_pair("b2p",b2p));
    double b3p = 1.6382000000000001E+00;
    params_.push_back(make_pair("b3p",b3p));
    double b4p = 4.9293999999999999E-01;
    params_.push_back(make_pair("b4p",b4p));
    double c0f = 1.5545000000000000E-02;
    params_.push_back(make_pair("c0f",c0f));
    double a1f = 2.0548000000000000E-01;
    params_.push_back(make_pair("a1f",a1f));
    double b1f = 1.4118900000000000E+01;
    params_.push_back(make_pair("b1f",b1f));
    double b2f = 6.1977000000000002E+00;
    params_.push_back(make_pair("b2f",b2f));
    double b3f = 3.3662000000000001E+00;
    params_.push_back(make_pair("b3f",b3f));
    double b4f = 6.2517000000000000E-01;
    params_.push_back(make_pair("b4f",b4f));
    double gcab = 6.0000000000000001E-03;
    params_.push_back(make_pair("gcab",gcab));
    double gcaa = 2.0000000000000001E-01;
    params_.push_back(make_pair("gcaa",gcaa));
    double gx = 4.0000000000000001E-03;
    params_.push_back(make_pair("gx",gx));
    double ccab0 = 9.4540000000000002E-01;
    params_.push_back(make_pair("ccab0",ccab0));
    double ccab1 = 7.4709999999999999E-01;
    params_.push_back(make_pair("ccab1",ccab1));
    double ccab2 = -4.5960999999999999E+00;
    params_.push_back(make_pair("ccab2",ccab2));
    double ccaa0 = 1.7369999999999999E-01;
    params_.push_back(make_pair("ccaa0",ccaa0));
    double ccaa1 = 2.3487000000000000E+00;
    params_.push_back(make_pair("ccaa1",ccaa1));
    double ccaa2 = -2.4868000000000001E+00;
    params_.push_back(make_pair("ccaa2",ccaa2));
    double cx0 = 8.0940000000000001E-01;
    params_.push_back(make_pair("cx0",cx0));
    double cx1 = 5.0729999999999997E-01;
    params_.push_back(make_pair("cx1",cx1));
    double cx2 = 7.4809999999999999E-01;
    params_.push_back(make_pair("cx2",cx2));

    is_gga_ = true;
    is_meta_ = false;

    //Required allocateion
    allocate();
}
B97_0_Functional::~B97_0_Functional()
{
}
void B97_0_Functional::computeRKSFunctional(boost::shared_ptr<RKSFunctions> prop)
{
    int ntrue = prop->npoints();

    const double* restrict rho_a;
    const double* restrict gamma_aa;
    const double* restrict tau_a;

    rho_a = prop->property_value("RHO_A")->pointer();
    if (is_gga_) {
        gamma_aa = prop->property_value("GAMMA_AA")->pointer();
    }
    if (is_meta_) {
        tau_a = prop->property_value("TAU_A")->pointer();
    }

    double c0 = params_[0].second;
    double two_13 = params_[1].second;
    double d2fz0 = params_[2].second;
    double c = params_[3].second;
    double Aa = params_[4].second;
    double a1a = params_[5].second;
    double b1a = params_[6].second;
    double b2a = params_[7].second;
    double b3a = params_[8].second;
    double b4a = params_[9].second;
    double c0p = params_[10].second;
    double a1p = params_[11].second;
    double b1p = params_[12].second;
    double b2p = params_[13].second;
    double b3p = params_[14].second;
    double b4p = params_[15].second;
    double c0f = params_[16].second;
    double a1f = params_[17].second;
    double b1f = params_[18].second;
    double b2f = params_[19].second;
    double b3f = params_[20].second;
    double b4f = params_[21].second;
    double gcab = params_[22].second;
    double gcaa = params_[23].second;
    double gx = params_[24].second;
    double ccab0 = params_[25].second;
    double ccab1 = params_[26].second;
    double ccab2 = params_[27].second;
    double ccaa0 = params_[28].second;
    double ccaa1 = params_[29].second;
    double ccaa2 = params_[30].second;
    double cx0 = params_[31].second;
    double cx1 = params_[32].second;
    double cx2 = params_[33].second;

    //Functional
    for (int index = 0; index < ntrue; index++) {

        //Functional Value
        if (rho_a[index] > cutoff_) {
            double t32507 = 1.0/pow(rho_a[index],1.0/3.0);
            double t32508 = c*t32507;
            double t32509 = sqrt(t32508);
            double t32510 = pow(t32508,3.0/2.0);
            double t32511 = c*c;
            double t32512 = 1.0/pow(rho_a[index],2.0/3.0);
            double t32513 = 1.0/c0p;
            double t32514 = b1p*t32509;
            double t32515 = b3p*t32510;
            double t32516 = b4p*t32511*t32512;
            double t32517 = b2p*c*t32507;
            double t32518 = t32514+t32515+t32516+t32517;
            double t32519 = 1.0/t32518;
            double t32520 = t32513*t32519*(1.0/2.0);
            double t32521 = t32520+1.0;
            double t32522 = log(t32521);
            double t32523 = a1p*c*t32507;
            double t32524 = t32523+1.0;
            double t32525 = rho_a[index]*2.0;
            double t32526 = 1.0/pow(t32525,1.0/3.0);
            double t32527 = c*t32526;
            double t32528 = 1.0/pow(rho_a[index],8.0/3.0);
            double t32529 = gamma_aa[index]*gamma_aa[index];
            double t32530 = gcab*gcab;
            double t32531 = 1.0/pow(rho_a[index],1.6E1/3.0);
            double t32532 = gx*gx;
            double t32533 = pow(2.0,1.0/3.0);
            double t32534 = t32533*2.0;
            double t32535 = t32534-2.0;
            double t32536 = two_13*2.0;
            double t32537 = t32536-2.0;
            double t32538 = 1.0/t32537;
            double t32539 = 1.0/c0f;
            double t32540 = b1f*t32509;
            double t32541 = b3f*t32510;
            double t32542 = b4f*t32511*t32512;
            double t32543 = b2f*c*t32507;
            double t32544 = t32540+t32541+t32542+t32543;
            double t32545 = 1.0/t32544;
            double t32546 = t32545*t32539*(1.0/2.0);
            double t32547 = t32546+1.0;
            double t32548 = log(t32547);
            double t32549 = a1f*c*t32507;
            double t32550 = t32549+1.0;
            double t32551 = c0f*t32550*t32548*2.0;
            double t32552 = c0p*t32522*t32524*2.0;
            double t32553 = gcaa*gcaa;
            functional_[index] = (rho_a[index]*(t32552+t32535*t32538*(t32551-c0p*t32522*t32524*2.0))*2.0-c0p* \
               rho_a[index]*log((t32513*(1.0/2.0))/(b1p*sqrt(t32527)+b3p*pow(t32527,3.0/2.0)+b4p*t32511*1.0/pow(t32525,2.0/ \
               3.0)+b2p*c*t32526)+1.0)*(a1p*c*t32526+1.0)*4.0)*(ccab0+(ccab2*t32530*t32531*t32529)/(gamma_aa[index]* \
               gcab*t32528*2.0+t32530*t32531*t32529+1.0)+(ccab1*gamma_aa[index]*gcab*t32528)/(gamma_aa[index]*gcab* \
               t32528+1.0))-rho_a[index]*(t32552+t32535*t32538*(t32551-t32552))*(ccaa0+(ccaa2*t32531*t32553*t32529) \
               /(gamma_aa[index]*gcaa*t32528*2.0+t32531*t32553*t32529+1.0)+(ccaa1*gamma_aa[index]*gcaa*t32528)/(gamma_aa[index]* \
               gcaa*t32528+1.0))*2.0+c0*pow(rho_a[index],4.0/3.0)*(cx0+(cx2*t32531*t32532*t32529)/(gamma_aa[index]* \
               gx*t32528*2.0+t32531*t32532*t32529+1.0)+(cx1*gamma_aa[index]*gx*t32528)/(gamma_aa[index]*gx*t32528+ \
               1.0))*2.0;
        } else {
            functional_[index] = 0.0;
        } 

    }
    //First Partials
    for (int index = 0; index < ntrue && deriv_ >= 1; index++) {
        
        //V_rho_a
        if (rho_a[index] > cutoff_) {
            double t32555 = 1.0/pow(rho_a[index],1.0/3.0);
            double t32556 = c*t32555;
            double t32557 = sqrt(t32556);
            double t32558 = pow(t32556,3.0/2.0);
            double t32559 = c*c;
            double t32560 = 1.0/pow(rho_a[index],2.0/3.0);
            double t32561 = 1.0/c0p;
            double t32562 = b1p*t32557;
            double t32563 = b3p*t32558;
            double t32564 = b4p*t32560*t32559;
            double t32565 = b2p*c*t32555;
            double t32566 = t32562+t32563+t32564+t32565;
            double t32567 = 1.0/t32566;
            double t32568 = t32561*t32567*(1.0/2.0);
            double t32569 = t32568+1.0;
            double t32570 = log(t32569);
            double t32571 = a1p*c*t32555;
            double t32572 = t32571+1.0;
            double t32573 = 1.0/pow(rho_a[index],8.0/3.0);
            double t32574 = gamma_aa[index]*gamma_aa[index];
            double t32575 = gcaa*gcaa;
            double t32576 = 1.0/pow(rho_a[index],1.6E1/3.0);
            double t32577 = pow(2.0,1.0/3.0);
            double t32578 = t32577*2.0;
            double t32579 = t32578-2.0;
            double t32580 = two_13*2.0;
            double t32581 = t32580-2.0;
            double t32582 = 1.0/t32581;
            double t32583 = 1.0/c0f;
            double t32584 = b1f*t32557;
            double t32585 = b3f*t32558;
            double t32586 = b4f*t32560*t32559;
            double t32587 = b2f*c*t32555;
            double t32588 = t32584+t32585+t32586+t32587;
            double t32589 = 1.0/t32588;
            double t32590 = t32583*t32589*(1.0/2.0);
            double t32591 = t32590+1.0;
            double t32592 = log(t32591);
            double t32593 = a1f*c*t32555;
            double t32594 = t32593+1.0;
            double t32595 = c0f*t32592*t32594*2.0;
            double t32596 = c0p*t32570*t32572*2.0;
            double t32597 = rho_a[index]*2.0;
            double t32598 = 1.0/pow(t32597,1.0/3.0);
            double t32599 = c*t32598;
            double t32600 = gcab*gcab;
            double t32601 = 1.0/pow(rho_a[index],1.9E1/3.0);
            double t32602 = gamma_aa[index]*gcab*t32573;
            double t32603 = t32602+1.0;
            double t32604 = 1.0/pow(rho_a[index],1.1E1/3.0);
            double t32605 = gamma_aa[index]*gcab*t32573*2.0;
            double t32606 = t32600*t32574*t32576;
            double t32607 = t32605+t32606+1.0;
            double t32608 = 1.0/t32603;
            double t32609 = 1.0/t32607;
            double t32610 = sqrt(t32599);
            double t32611 = b1p*t32610;
            double t32612 = pow(t32599,3.0/2.0);
            double t32613 = b3p*t32612;
            double t32614 = b2p*c*t32598;
            double t32615 = 1.0/pow(t32597,2.0/3.0);
            double t32616 = b4p*t32615*t32559;
            double t32617 = t32611+t32613+t32614+t32616;
            double t32618 = 1.0/t32617;
            double t32619 = t32561*t32618*(1.0/2.0);
            double t32620 = t32619+1.0;
            double t32621 = a1p*c*t32598;
            double t32622 = t32621+1.0;
            double t32623 = 1.0/pow(t32597,4.0/3.0);
            double t32624 = log(t32620);
            double t32625 = 1.0/pow(rho_a[index],4.0/3.0);
            double t32626 = 1.0/pow(rho_a[index],5.0/3.0);
            double t32627 = 1.0/sqrt(t32556);
            double t32628 = 1.0/t32569;
            double t32629 = 1.0/(t32566*t32566);
            double t32630 = b4p*t32626*t32559*(2.0/3.0);
            double t32631 = b2p*c*t32625*(1.0/3.0);
            double t32632 = b1p*c*t32625*t32627*(1.0/6.0);
            double t32633 = b3p*c*t32625*t32557*(1.0/2.0);
            double t32634 = t32630+t32631+t32632+t32633;
            double t32635 = t32634*t32572*t32628*t32629;
            double t32636 = t32595-t32596;
            double t32637 = t32582*t32636*t32579;
            double t32638 = gx*gx;
            double t32639 = gamma_aa[index]*gx*t32573;
            double t32640 = t32639+1.0;
            double t32641 = 1.0/t32640;
            double t32642 = gamma_aa[index]*gx*t32573*2.0;
            double t32643 = t32574*t32638*t32576;
            double t32644 = t32642+t32643+1.0;
            double t32645 = 1.0/t32644;
            double t32646 = 1.0/t32591;
            double t32647 = 1.0/(t32588*t32588);
            double t32648 = b4f*t32626*t32559*(2.0/3.0);
            double t32649 = b2f*c*t32625*(1.0/3.0);
            double t32650 = b1f*c*t32625*t32627*(1.0/6.0);
            double t32651 = b3f*c*t32625*t32557*(1.0/2.0);
            double t32652 = t32650+t32651+t32648+t32649;
            double t32653 = a1f*c*c0f*t32625*t32592*(2.0/3.0);
            double t32654 = a1p*c*c0p*t32570*t32625*(2.0/3.0);
            double t32655 = gamma_aa[index]*gcaa*t32573;
            double t32656 = t32655+1.0;
            double t32657 = 1.0/t32656;
            double t32658 = ccaa1*gamma_aa[index]*gcaa*t32573*t32657;
            double t32659 = gamma_aa[index]*gcaa*t32573*2.0;
            double t32660 = t32574*t32575*t32576;
            double t32661 = t32660+t32659+1.0;
            double t32662 = 1.0/t32661;
            double t32663 = ccaa2*t32662*t32574*t32575*t32576;
            double t32664 = ccaa0+t32663+t32658;
            double t32665 = t32637+t32596;
            v_rho_a_[index] = -(ccab0+ccab1*gamma_aa[index]*gcab*t32608*t32573+ccab2*t32600*t32609*t32574*t32576) \
               *(-t32637-t32596+rho_a[index]*((t32622*1.0/(t32617*t32617)*(b4p*t32559*1.0/pow(t32597,5.0/3.0)*(2.0/ \
               3.0)+b2p*c*t32623*(1.0/3.0)+b3p*c*t32610*t32623*(1.0/2.0)+b1p*c*t32623*1.0/sqrt(t32599)*(1.0/6.0)) \
               )/t32620-a1p*c*c0p*t32623*t32624*(2.0/3.0))*2.0+rho_a[index]*(-t32635+t32654+t32582*t32579*(t32635+ \
               t32653-t32652*t32646*t32647*t32594-a1p*c*c0p*t32570*t32625*(2.0/3.0)))+c0p*t32622*t32624*2.0)-(rho_a[index]* \
               t32665*2.0-c0p*rho_a[index]*t32622*t32624*4.0)*(ccab1*gamma_aa[index]*gcab*t32604*t32608*(4.0/3.0) \
               +ccab2*t32600*t32601*t32609*t32574*(8.0/3.0)-ccab1*t32600*t32601*1.0/(t32603*t32603)*t32574*(4.0/3.0) \
               -ccab2*t32600*1.0/(t32607*t32607)*t32574*t32576*(gamma_aa[index]*gcab*t32604*(8.0/3.0)+t32600*t32601* \
               t32574*(8.0/3.0)))-t32664*(t32596+t32582*t32579*(t32595-c0p*t32570*t32572*2.0))+rho_a[index]*t32665* \
               (ccaa1*gamma_aa[index]*gcaa*t32604*t32657*(8.0/3.0)+ccaa2*t32601*t32662*t32574*t32575*(1.6E1/3.0)- \
               ccaa1*t32601*t32574*t32575*1.0/(t32656*t32656)*(8.0/3.0)-ccaa2*1.0/(t32661*t32661)*t32574*t32575*t32576* \
               (gamma_aa[index]*gcaa*t32604*(1.6E1/3.0)+t32601*t32574*t32575*(1.6E1/3.0)))+c0*pow(rho_a[index],1.0/ \
               3.0)*(cx0+cx1*gamma_aa[index]*gx*t32641*t32573+cx2*t32645*t32574*t32638*t32576)*(4.0/3.0)+rho_a[index]* \
               t32664*(-t32635+t32654+t32582*t32579*(t32635+t32653-t32654-t32652*t32646*t32647*t32594))-c0*pow(rho_a[index],4.0/ \
               3.0)*(cx1*gamma_aa[index]*gx*t32604*t32641*(8.0/3.0)+cx2*t32601*t32645*t32574*t32638*(1.6E1/3.0)-cx1* \
               t32601*1.0/(t32640*t32640)*t32574*t32638*(8.0/3.0)-cx2*1.0/(t32644*t32644)*t32574*t32638*t32576*(gamma_aa[index]* \
               gx*t32604*(1.6E1/3.0)+t32601*t32574*t32638*(1.6E1/3.0)));
        } else {
            v_rho_a_[index] = 0.0;
        } 
        
        if (is_gga_) {
            
            if (rho_a[index] > cutoff_) {
                double t32667 = 1.0/pow(rho_a[index],1.0/3.0);
                double t32668 = c*t32667;
                double t32669 = sqrt(t32668);
                double t32670 = pow(t32668,3.0/2.0);
                double t32671 = c*c;
                double t32672 = 1.0/pow(rho_a[index],2.0/3.0);
                double t32673 = 1.0/c0p;
                double t32674 = b1p*t32669;
                double t32675 = b3p*t32670;
                double t32676 = b4p*t32671*t32672;
                double t32677 = b2p*c*t32667;
                double t32678 = t32674+t32675+t32676+t32677;
                double t32679 = 1.0/t32678;
                double t32680 = t32673*t32679*(1.0/2.0);
                double t32681 = t32680+1.0;
                double t32682 = log(t32681);
                double t32683 = a1p*c*t32667;
                double t32684 = t32683+1.0;
                double t32685 = rho_a[index]*2.0;
                double t32686 = 1.0/pow(t32685,1.0/3.0);
                double t32687 = c*t32686;
                double t32688 = 1.0/pow(rho_a[index],8.0/3.0);
                double t32689 = gcab*gcab;
                double t32690 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t32691 = gamma_aa[index]*gcab*t32688;
                double t32692 = t32691+1.0;
                double t32693 = gamma_aa[index]*gamma_aa[index];
                double t32694 = gamma_aa[index]*gcab*t32688*2.0;
                double t32695 = t32690*t32693*t32689;
                double t32696 = t32694+t32695+1.0;
                double t32697 = gx*gx;
                double t32698 = gamma_aa[index]*gx*t32688;
                double t32699 = t32698+1.0;
                double t32700 = gamma_aa[index]*gx*t32688*2.0;
                double t32701 = t32690*t32693*t32697;
                double t32702 = t32700+t32701+1.0;
                double t32703 = pow(2.0,1.0/3.0);
                double t32704 = t32703*2.0;
                double t32705 = t32704-2.0;
                double t32706 = two_13*2.0;
                double t32707 = t32706-2.0;
                double t32708 = 1.0/t32707;
                double t32709 = 1.0/c0f;
                double t32710 = b1f*t32669;
                double t32711 = b3f*t32670;
                double t32712 = b4f*t32671*t32672;
                double t32713 = b2f*c*t32667;
                double t32714 = t32710+t32711+t32712+t32713;
                double t32715 = 1.0/t32714;
                double t32716 = t32715*t32709*(1.0/2.0);
                double t32717 = t32716+1.0;
                double t32718 = log(t32717);
                double t32719 = a1f*c*t32667;
                double t32720 = t32719+1.0;
                double t32721 = c0f*t32720*t32718*2.0;
                double t32722 = c0p*t32682*t32684*2.0;
                double t32723 = gcaa*gcaa;
                double t32724 = gamma_aa[index]*gcaa*t32688;
                double t32725 = t32724+1.0;
                double t32726 = gamma_aa[index]*gcaa*t32688*2.0;
                double t32727 = t32723*t32690*t32693;
                double t32728 = t32726+t32727+1.0;
                v_gamma_aa_[index] = (rho_a[index]*(t32722+t32705*t32708*(t32721-c0p*t32682*t32684*2.0))*2.0-c0p* \
                   rho_a[index]*log((t32673*(1.0/2.0))/(b1p*sqrt(t32687)+b3p*pow(t32687,3.0/2.0)+b4p*t32671*1.0/pow(t32685,2.0/ \
                   3.0)+b2p*c*t32686)+1.0)*(a1p*c*t32686+1.0)*4.0)*((ccab1*gcab*t32688*(1.0/2.0))/t32692-ccab1*gamma_aa[index]* \
                   t32690*1.0/(t32692*t32692)*t32689*(1.0/2.0)+(ccab2*gamma_aa[index]*t32690*t32689)/t32696-ccab2*t32690* \
                   t32693*1.0/(t32696*t32696)*t32689*(gcab*t32688+gamma_aa[index]*t32690*t32689))*2.0-rho_a[index]*(t32722+ \
                   t32705*t32708*(t32721-t32722))*((ccaa1*gcaa*t32688)/t32725-ccaa1*gamma_aa[index]*t32723*1.0/(t32725* \
                   t32725)*t32690+(ccaa2*gamma_aa[index]*t32723*t32690*2.0)/t32728-ccaa2*t32723*t32690*1.0/(t32728*t32728) \
                   *t32693*(gcaa*t32688*2.0+gamma_aa[index]*t32723*t32690*2.0))*2.0+c0*pow(rho_a[index],4.0/3.0)*((cx1* \
                   gx*t32688)/t32699-cx1*gamma_aa[index]*t32690*t32697*1.0/(t32699*t32699)+(cx2*gamma_aa[index]*t32690* \
                   t32697*2.0)/t32702-cx2*1.0/(t32702*t32702)*t32690*t32693*t32697*(gx*t32688*2.0+gamma_aa[index]*t32690* \
                   t32697*2.0))*2.0;
            } else {
                v_gamma_aa_[index] = 0.0;
            } 
        
        }
        if (is_meta_) {
        
            //V_tau_a
            if (rho_a[index] > cutoff_) {
                v_tau_a_[index] = 0.0;
            } else {
                v_tau_a_[index] = 0.0;
            } 
        
        }
    }
    //Second Partials
    for (int index = 0; index < ntrue && deriv_ >= 2; index++) {
        
        //V_rho_a_rho_a
        if (rho_a[index] > cutoff_) {
            double t32731 = 1.0/pow(rho_a[index],1.0/3.0);
            double t32732 = c*t32731;
            double t32733 = sqrt(t32732);
            double t32734 = pow(t32732,3.0/2.0);
            double t32735 = c*c;
            double t32736 = 1.0/pow(rho_a[index],2.0/3.0);
            double t32737 = 1.0/c0p;
            double t32738 = b1p*t32733;
            double t32739 = b3p*t32734;
            double t32740 = b4p*t32735*t32736;
            double t32741 = b2p*c*t32731;
            double t32742 = t32740+t32741+t32738+t32739;
            double t32743 = 1.0/t32742;
            double t32744 = t32743*t32737*(1.0/2.0);
            double t32745 = t32744+1.0;
            double t32746 = log(t32745);
            double t32747 = a1p*c*t32731;
            double t32748 = t32747+1.0;
            double t32749 = rho_a[index]*2.0;
            double t32750 = 1.0/pow(t32749,1.0/3.0);
            double t32751 = c*t32750;
            double t32752 = 1.0/pow(rho_a[index],8.0/3.0);
            double t32753 = gamma_aa[index]*gamma_aa[index];
            double t32754 = gcab*gcab;
            double t32755 = gamma_aa[index]*gcab*t32752;
            double t32756 = t32755+1.0;
            double t32757 = 1.0/pow(rho_a[index],2.2E1/3.0);
            double t32758 = 1.0/pow(rho_a[index],1.6E1/3.0);
            double t32763 = 1.0/pow(rho_a[index],1.9E1/3.0);
            double t32764 = 1.0/pow(rho_a[index],1.1E1/3.0);
            double t32765 = gamma_aa[index]*gcab*t32764*(8.0/3.0);
            double t32766 = t32753*t32754*t32763*(8.0/3.0);
            double t32759 = t32765+t32766;
            double t32760 = gamma_aa[index]*gcab*t32752*2.0;
            double t32761 = t32753*t32754*t32758;
            double t32762 = t32760+t32761+1.0;
            double t32767 = 1.0/pow(rho_a[index],1.4E1/3.0);
            double t32768 = 1.0/(t32762*t32762);
            double t32769 = 1.0/t32756;
            double t32770 = 1.0/t32762;
            double t32771 = sqrt(t32751);
            double t32772 = b1p*t32771;
            double t32773 = pow(t32751,3.0/2.0);
            double t32774 = b3p*t32773;
            double t32775 = b2p*c*t32750;
            double t32776 = 1.0/pow(t32749,2.0/3.0);
            double t32777 = b4p*t32735*t32776;
            double t32778 = t32772+t32774+t32775+t32777;
            double t32779 = 1.0/t32778;
            double t32780 = t32737*t32779*(1.0/2.0);
            double t32781 = t32780+1.0;
            double t32782 = a1p*c*t32750;
            double t32783 = t32782+1.0;
            double t32784 = 1.0/pow(t32749,8.0/3.0);
            double t32785 = 1.0/pow(t32749,7.0/3.0);
            double t32786 = 1.0/sqrt(t32751);
            double t32787 = 1.0/t32781;
            double t32788 = 1.0/pow(t32749,4.0/3.0);
            double t32791 = b2p*c*t32788*(1.0/3.0);
            double t32792 = 1.0/pow(t32749,5.0/3.0);
            double t32793 = b4p*t32735*t32792*(2.0/3.0);
            double t32794 = b1p*c*t32786*t32788*(1.0/6.0);
            double t32795 = b3p*c*t32771*t32788*(1.0/2.0);
            double t32789 = t32791+t32793+t32794+t32795;
            double t32790 = log(t32781);
            double t32796 = t32789*t32789;
            double t32797 = two_13*2.0;
            double t32798 = t32797-2.0;
            double t32799 = 1.0/t32798;
            double t32800 = 1.0/(t32778*t32778);
            double t32801 = pow(2.0,1.0/3.0);
            double t32802 = t32801*2.0;
            double t32803 = t32802-2.0;
            double t32804 = a1f*c*t32731;
            double t32805 = t32804+1.0;
            double t32806 = 1.0/c0f;
            double t32807 = b1f*t32733;
            double t32808 = b3f*t32734;
            double t32809 = b4f*t32735*t32736;
            double t32810 = b2f*c*t32731;
            double t32811 = t32810+t32807+t32808+t32809;
            double t32812 = 1.0/t32811;
            double t32813 = t32812*t32806*(1.0/2.0);
            double t32814 = t32813+1.0;
            double t32815 = 1.0/pow(rho_a[index],4.0/3.0);
            double t32817 = 1.0/pow(rho_a[index],5.0/3.0);
            double t32818 = 1.0/sqrt(t32732);
            double t32824 = b4f*t32735*t32817*(2.0/3.0);
            double t32825 = b2f*c*t32815*(1.0/3.0);
            double t32826 = b1f*c*t32815*t32818*(1.0/6.0);
            double t32827 = b3f*c*t32733*t32815*(1.0/2.0);
            double t32816 = t32824+t32825+t32826+t32827;
            double t32829 = b4p*t32735*t32817*(2.0/3.0);
            double t32830 = b2p*c*t32815*(1.0/3.0);
            double t32831 = b1p*c*t32815*t32818*(1.0/6.0);
            double t32832 = b3p*c*t32733*t32815*(1.0/2.0);
            double t32819 = t32830+t32831+t32832+t32829;
            double t32820 = 1.0/t32814;
            double t32821 = 1.0/pow(rho_a[index],7.0/3.0);
            double t32822 = 1.0/t32745;
            double t32823 = 1.0/pow(t32732,3.0/2.0);
            double t32828 = t32816*t32816;
            double t32833 = t32819*t32819;
            double t32834 = log(t32814);
            double t32835 = 1.0/(t32811*t32811);
            double t32836 = 1.0/(t32742*t32742);
            double t32837 = 1.0/(t32742*t32742*t32742);
            double t32838 = t32822*t32833*t32837*t32748*2.0;
            double t32839 = b4p*t32752*t32735*(1.0E1/9.0);
            double t32840 = b2p*c*t32821*(4.0/9.0);
            double t32841 = b3p*t32752*t32735*t32818*(1.0/1.2E1);
            double t32842 = b1p*c*t32821*t32818*(2.0/9.0);
            double t32843 = b3p*c*t32821*t32733*(2.0/3.0);
            double t32931 = b1p*t32823*t32752*t32735*(1.0/3.6E1);
            double t32844 = t32840+t32841-t32931+t32842+t32843+t32839;
            double t32845 = 1.0/(t32745*t32745);
            double t32846 = 1.0/(t32742*t32742*t32742*t32742);
            double t32847 = a1p*c*c0p*t32821*t32746*(8.0/9.0);
            double t32848 = c0f*t32805*t32834*2.0;
            double t32849 = c0p*t32746*t32748*2.0;
            double t32850 = gcaa*gcaa;
            double t32851 = gamma_aa[index]*gcaa*t32752;
            double t32852 = t32851+1.0;
            double t32853 = gamma_aa[index]*gcaa*t32752*2.0;
            double t32854 = t32850*t32753*t32758;
            double t32855 = t32853+t32854+1.0;
            double t32856 = ccab1*gamma_aa[index]*gcab*t32752*t32769;
            double t32857 = ccab2*t32770*t32753*t32754*t32758;
            double t32858 = ccab0+t32856+t32857;
            double t32859 = b2p*c*t32785*(4.0/9.0);
            double t32860 = b4p*t32735*t32784*(1.0E1/9.0);
            double t32861 = 1.0/pow(t32751,3.0/2.0);
            double t32862 = b3p*t32735*t32784*t32786*(1.0/1.2E1);
            double t32863 = b1p*c*t32785*t32786*(2.0/9.0);
            double t32864 = b3p*c*t32771*t32785*(2.0/3.0);
            double t32865 = t32860+t32862+t32863+t32864+t32859-b1p*t32735*t32861*t32784*(1.0/3.6E1);
            double t32866 = t32800*t32783*t32865*t32787;
            double t32867 = 1.0/(t32778*t32778*t32778);
            double t32868 = 1.0/(t32781*t32781);
            double t32869 = 1.0/(t32778*t32778*t32778*t32778);
            double t32870 = t32737*t32783*t32796*t32868*t32869*(1.0/2.0);
            double t32871 = 1.0/d2fz0;
            double t32872 = 1.0/(rho_a[index]*rho_a[index]);
            double t32873 = 1.0/Aa;
            double t32874 = b1a*t32771;
            double t32875 = b3a*t32773;
            double t32876 = b2a*c*t32750;
            double t32877 = b4a*t32735*t32776;
            double t32878 = t32874+t32875+t32876+t32877;
            double t32879 = 1.0/t32878;
            double t32880 = t32873*t32879*(1.0/2.0);
            double t32881 = t32880+1.0;
            double t32882 = log(t32881);
            double t32883 = a1a*c*t32750;
            double t32884 = t32883+1.0;
            double t32885 = Aa*t32871*t32872*t32882*t32884*t32799*(4.0/9.0);
            double t32886 = a1p*c*t32800*t32787*t32788*t32789*(2.0/3.0);
            double t32887 = a1p*c*c0p*t32790*t32788*(4.0/3.0);
            double t32888 = t32848-t32849;
            double t32889 = t32803*t32888*t32799;
            double t32890 = t32849+t32889;
            double t32891 = 1.0/pow(rho_a[index],1.0E1);
            double t32892 = 1.0/(t32756*t32756*t32756);
            double t32893 = ccab1*gamma_aa[index]*gcab*t32753*t32754*t32891*t32892*(3.2E1/9.0);
            double t32894 = 1.0/(t32756*t32756);
            double t32895 = t32759*t32759;
            double t32896 = 1.0/(t32762*t32762*t32762);
            double t32897 = ccab2*t32753*t32754*t32758*t32895*t32896*2.0;
            double t32898 = t32820*t32805*t32816*t32835;
            double t32899 = a1p*c*c0p*t32815*t32746*(2.0/3.0);
            double t32901 = t32822*t32836*t32819*t32748;
            double t32904 = a1f*c*c0f*t32815*t32834*(2.0/3.0);
            double t32900 = -t32901-t32904+t32898+t32899;
            double t32902 = 1.0/t32852;
            double t32903 = 1.0/t32855;
            double t32905 = t32900*t32803*t32799;
            double t32906 = t32901+t32905-t32899;
            double t32907 = gx*gx;
            double t32908 = gamma_aa[index]*gx*t32752;
            double t32909 = t32908+1.0;
            double t32914 = gamma_aa[index]*gx*t32764*(1.6E1/3.0);
            double t32915 = t32753*t32763*t32907*(1.6E1/3.0);
            double t32910 = t32914+t32915;
            double t32911 = gamma_aa[index]*gx*t32752*2.0;
            double t32912 = t32753*t32907*t32758;
            double t32913 = t32911+t32912+1.0;
            double t32916 = 1.0/(t32913*t32913);
            double t32917 = 1.0/t32909;
            double t32918 = 1.0/t32913;
            double t32919 = 1.0/(t32909*t32909);
            double t32920 = ccaa1*gamma_aa[index]*gcaa*t32902*t32752;
            double t32921 = ccaa2*t32903*t32850*t32753*t32758;
            double t32922 = ccaa0+t32920+t32921;
            double t32923 = 1.0/(t32811*t32811*t32811);
            double t32924 = b4f*t32752*t32735*(1.0E1/9.0);
            double t32925 = b2f*c*t32821*(4.0/9.0);
            double t32926 = b3f*t32752*t32735*t32818*(1.0/1.2E1);
            double t32927 = b1f*c*t32821*t32818*(2.0/9.0);
            double t32928 = b3f*c*t32821*t32733*(2.0/3.0);
            double t32929 = t32924+t32925+t32926+t32927+t32928-b1f*t32823*t32752*t32735*(1.0/3.6E1);
            double t32930 = t32820*t32805*t32835*t32929;
            double t32932 = t32822*t32844*t32836*t32748;
            double t32933 = 1.0/(t32814*t32814);
            double t32934 = 1.0/(t32811*t32811*t32811*t32811);
            double t32935 = t32805*t32806*t32933*t32934*t32828*(1.0/2.0);
            double t32936 = t32833*t32737*t32845*t32846*t32748*(1.0/2.0);
            double t32937 = a1f*c*t32820*t32815*t32816*t32835*(2.0/3.0);
            double t32938 = a1p*c*t32822*t32815*t32836*t32819*(2.0/3.0);
            double t32939 = 1.0/(t32852*t32852);
            double t32940 = gamma_aa[index]*gcaa*t32764*(1.6E1/3.0);
            double t32941 = t32850*t32753*t32763*(1.6E1/3.0);
            double t32942 = t32940+t32941;
            double t32943 = 1.0/(t32855*t32855);
            double t32944 = ccaa1*gamma_aa[index]*gcaa*t32902*t32764*(8.0/3.0);
            double t32945 = ccaa2*t32903*t32850*t32753*t32763*(1.6E1/3.0);
            double t32946 = t32944+t32945-ccaa1*t32850*t32753*t32763*t32939*(8.0/3.0)-ccaa2*t32850*t32753*t32942* \
               t32943*t32758;
            v_rho_a_rho_a_[index] = t32922*t32906*-2.0+t32890*t32946*2.0+(rho_a[index]*t32890*2.0-c0p*rho_a[index]* \
               t32790*t32783*4.0)*(t32893+t32897+ccab2*t32770*t32753*t32754*t32757*(3.2E1/9.0)-ccab1*t32753*t32754* \
               t32757*t32894*(3.2E1/9.0)-ccab2*1.0/pow(rho_a[index],3.8E1/3.0)*(t32753*t32753)*(t32754*t32754)*t32768* \
               (3.2E1/9.0)-ccab2*t32753*t32754*t32763*t32759*t32768*(1.6E1/3.0))+t32858*(t32887-rho_a[index]*(t32932+ \
               t32936-t32838-t32847+t32938+t32803*t32799*(t32930+t32935+t32838+t32847+t32937-t32820*t32805*t32923* \
               t32828*2.0-t32822*t32844*t32836*t32748-a1f*c*c0f*t32821*t32834*(8.0/9.0)-t32833*t32737*t32845*t32846* \
               t32748*(1.0/2.0)-a1p*c*t32822*t32815*t32836*t32819*(2.0/3.0)))+rho_a[index]*(t32870+t32866+t32885+ \
               t32886-t32783*t32867*t32787*t32796*2.0-a1p*c*c0p*t32790*t32785*(8.0/9.0))*2.0+t32900*t32803*t32799* \
               2.0+t32822*t32836*t32819*t32748*2.0-t32800*t32783*t32787*t32789*2.0-a1p*c*c0p*t32815*t32746*(4.0/3.0) \
               )-(ccab1*gamma_aa[index]*gcab*t32764*t32769*(4.0/3.0)+ccab2*t32770*t32753*t32754*t32763*(8.0/3.0)- \
               ccab1*t32753*t32754*t32763*t32894*(4.0/3.0)-ccab2*t32753*t32754*t32758*t32759*t32768)*(t32849+t32889+ \
               rho_a[index]*t32906-rho_a[index]*(t32800*t32783*t32787*t32789-a1p*c*c0p*t32790*t32788*(2.0/3.0))*2.0- \
               c0p*t32790*t32783*2.0)*4.0+(rho_a[index]*(t32849+t32803*t32799*(t32848-c0p*t32746*t32748*2.0))*2.0- \
               c0p*rho_a[index]*t32790*t32783*4.0)*(t32893+t32897+ccab1*gamma_aa[index]*gcab*t32767*t32769*(4.4E1/ \
               9.0)+ccab2*t32770*t32753*t32754*t32757*(4.0E1/3.0)-ccab1*t32753*t32754*t32757*t32894*(7.6E1/9.0)-ccab2* \
               t32753*t32754*t32763*t32759*t32768*(1.6E1/3.0)-ccab2*t32753*t32754*t32758*t32768*(gamma_aa[index]* \
               gcab*t32767*(8.8E1/9.0)+t32753*t32754*t32757*(4.0E1/3.0)))+t32858*(t32887+rho_a[index]*(t32870+t32866- \
               t32885+t32886-t32783*t32867*t32787*t32796*2.0-a1p*c*c0p*t32790*t32785*(8.0/9.0))*2.0-t32800*t32783* \
               t32787*t32789*2.0)+c0*t32736*(cx0+cx1*gamma_aa[index]*gx*t32752*t32917+cx2*t32753*t32907*t32918*t32758) \
               *(4.0/9.0)-rho_a[index]*t32890*(ccaa1*gamma_aa[index]*gcaa*t32902*t32767*(8.8E1/9.0)+ccaa2*t32903* \
               t32850*t32753*t32757*(3.04E2/9.0)-ccaa1*t32850*t32753*t32757*t32939*2.4E1-ccaa2*t32850*t32753*t32942* \
               t32763*t32943*(3.2E1/3.0)-ccaa2*t32850*t32753*t32943*t32758*(gamma_aa[index]*gcaa*t32767*(1.76E2/9.0) \
               +t32850*t32753*t32757*(3.04E2/9.0))+ccaa2*t32850*t32753*(t32942*t32942)*1.0/(t32855*t32855*t32855) \
               *t32758*2.0+ccaa1*gamma_aa[index]*gcaa*t32850*t32753*1.0/(t32852*t32852*t32852)*t32891*(1.28E2/9.0) \
               )+c0*pow(rho_a[index],4.0/3.0)*(cx1*gamma_aa[index]*gx*t32917*t32767*(8.8E1/9.0)-cx1*t32753*t32907* \
               t32757*t32919*2.4E1+cx2*t32753*t32907*t32918*t32757*(3.04E2/9.0)-cx2*t32910*t32753*t32763*t32907*t32916* \
               (3.2E1/3.0)-cx2*t32753*t32907*t32916*t32758*(gamma_aa[index]*gx*t32767*(1.76E2/9.0)+t32753*t32907* \
               t32757*(3.04E2/9.0))+cx2*(t32910*t32910)*1.0/(t32913*t32913*t32913)*t32753*t32907*t32758*2.0+cx1*gamma_aa[index]* \
               gx*t32753*t32907*t32891*1.0/(t32909*t32909*t32909)*(1.28E2/9.0))-c0*pow(rho_a[index],1.0/3.0)*(cx1* \
               gamma_aa[index]*gx*t32764*t32917*(8.0/3.0)-cx1*t32753*t32763*t32907*t32919*(8.0/3.0)+cx2*t32753*t32763* \
               t32907*t32918*(1.6E1/3.0)-cx2*t32910*t32753*t32907*t32916*t32758)*(8.0/3.0)+rho_a[index]*t32922*(t32932+ \
               t32936-t32838-t32847+t32938+t32803*t32799*(t32930-t32932+t32935-t32936+t32838+t32847+t32937-t32938- \
               t32820*t32805*t32923*t32828*2.0-a1f*c*c0f*t32821*t32834*(8.0/9.0)))+rho_a[index]*t32906*t32946*2.0;
        } else {
            v_rho_a_rho_a_[index] = 0.0;
        } 
        
        if (is_gga_) {
        
            //V_rho_a_gamma_aa
            if (rho_a[index] > cutoff_) {
                double t32948 = 1.0/pow(rho_a[index],8.0/3.0);
                double t32949 = gcab*gcab;
                double t32950 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t32951 = gamma_aa[index]*gcab*t32948;
                double t32952 = t32951+1.0;
                double t32953 = gamma_aa[index]*gamma_aa[index];
                double t32954 = gamma_aa[index]*gcab*t32948*2.0;
                double t32955 = t32950*t32953*t32949;
                double t32956 = t32954+t32955+1.0;
                double t32957 = rho_a[index]*2.0;
                double t32958 = 1.0/pow(t32957,1.0/3.0);
                double t32959 = c*t32958;
                double t32960 = sqrt(t32959);
                double t32961 = b1p*t32960;
                double t32962 = pow(t32959,3.0/2.0);
                double t32963 = b3p*t32962;
                double t32964 = b2p*c*t32958;
                double t32965 = c*c;
                double t32966 = 1.0/pow(t32957,2.0/3.0);
                double t32967 = b4p*t32965*t32966;
                double t32968 = t32961+t32963+t32964+t32967;
                double t32969 = 1.0/pow(t32957,4.0/3.0);
                double t32970 = 1.0/c0p;
                double t32971 = 1.0/t32968;
                double t32972 = t32970*t32971*(1.0/2.0);
                double t32973 = t32972+1.0;
                double t32974 = 1.0/pow(rho_a[index],1.0/3.0);
                double t32975 = c*t32974;
                double t32976 = sqrt(t32975);
                double t32977 = b1f*t32976;
                double t32978 = pow(t32975,3.0/2.0);
                double t32979 = b3f*t32978;
                double t32980 = 1.0/pow(rho_a[index],2.0/3.0);
                double t32981 = b4f*t32980*t32965;
                double t32982 = b2f*c*t32974;
                double t32983 = t32981+t32982+t32977+t32979;
                double t32984 = 1.0/pow(rho_a[index],4.0/3.0);
                double t32985 = b1p*t32976;
                double t32986 = b3p*t32978;
                double t32987 = b4p*t32980*t32965;
                double t32988 = b2p*c*t32974;
                double t32989 = t32985+t32986+t32987+t32988;
                double t32990 = 1.0/pow(rho_a[index],5.0/3.0);
                double t32991 = 1.0/sqrt(t32975);
                double t32992 = 1.0/c0f;
                double t32993 = 1.0/t32983;
                double t32994 = t32992*t32993*(1.0/2.0);
                double t32995 = t32994+1.0;
                double t32996 = 1.0/t32989;
                double t32997 = t32970*t32996*(1.0/2.0);
                double t32998 = t32997+1.0;
                double t32999 = a1p*c*t32974;
                double t33000 = t32999+1.0;
                double t33001 = 1.0/t32998;
                double t33002 = 1.0/(t32989*t32989);
                double t33003 = b4p*t32990*t32965*(2.0/3.0);
                double t33004 = b2p*c*t32984*(1.0/3.0);
                double t33005 = b1p*c*t32991*t32984*(1.0/6.0);
                double t33006 = b3p*c*t32984*t32976*(1.0/2.0);
                double t33007 = t33003+t33004+t33005+t33006;
                double t33008 = t33000*t33001*t33002*t33007;
                double t33009 = log(t32998);
                double t33010 = log(t32973);
                double t33011 = a1p*c*t32958;
                double t33012 = t33011+1.0;
                double t33013 = pow(2.0,1.0/3.0);
                double t33014 = t33013*2.0;
                double t33015 = t33014-2.0;
                double t33016 = two_13*2.0;
                double t33017 = t33016-2.0;
                double t33018 = 1.0/t33017;
                double t33019 = log(t32995);
                double t33020 = a1f*c*t32974;
                double t33021 = t33020+1.0;
                double t33022 = c0f*t33021*t33019*2.0;
                double t33024 = c0p*t33000*t33009*2.0;
                double t33023 = t33022-t33024;
                double t33025 = gcaa*gcaa;
                double t33026 = gamma_aa[index]*gcaa*t32948;
                double t33027 = t33026+1.0;
                double t33028 = gamma_aa[index]*gcaa*t32948*2.0;
                double t33029 = t32950*t32953*t33025;
                double t33030 = t33028+t33029+1.0;
                double t33031 = t33023*t33015*t33018;
                double t33032 = t33031+t33024;
                double t33033 = 1.0/t32956;
                double t33034 = 1.0/pow(rho_a[index],1.9E1/3.0);
                double t33035 = 1.0/(t32952*t32952);
                double t33036 = 1.0/(t32956*t32956);
                double t33037 = gcab*t32948;
                double t33038 = gamma_aa[index]*t32950*t32949;
                double t33039 = t33037+t33038;
                double t33040 = 1.0/pow(rho_a[index],1.1E1/3.0);
                double t33041 = gamma_aa[index]*gcab*t33040*(8.0/3.0);
                double t33042 = t32953*t32949*t33034*(8.0/3.0);
                double t33043 = t33041+t33042;
                double t33044 = rho_a[index]*t33032*2.0;
                double t33045 = t33044-c0p*rho_a[index]*t33010*t33012*4.0;
                double t33046 = 1.0/t32952;
                double t33047 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]*rho_a[index]);
                double t33048 = 1.0/(t32952*t32952*t32952);
                double t33049 = ccab2*gamma_aa[index]*t32950*t32949*t33043*t33036;
                double t33050 = ccab2*t32953*t32949*t33034*t33036*t33039*(8.0/3.0);
                double t33051 = 1.0/(t32956*t32956*t32956);
                double t33052 = 1.0/t33027;
                double t33053 = 1.0/t33030;
                double t33054 = 1.0/(t33027*t33027);
                double t33055 = 1.0/(t33030*t33030);
                double t33056 = gcaa*t32948*2.0;
                double t33057 = gamma_aa[index]*t32950*t33025*2.0;
                double t33058 = t33056+t33057;
                double t33059 = gamma_aa[index]*gcaa*t33040*(1.6E1/3.0);
                double t33060 = t32953*t33025*t33034*(1.6E1/3.0);
                double t33061 = t33060+t33059;
                double t33062 = gx*gx;
                double t33063 = gamma_aa[index]*gx*t32948;
                double t33064 = t33063+1.0;
                double t33065 = gamma_aa[index]*gx*t32948*2.0;
                double t33066 = t32950*t32953*t33062;
                double t33067 = t33065+t33066+1.0;
                double t33068 = 1.0/t32995;
                double t33069 = 1.0/(t32983*t32983);
                double t33070 = b4f*t32990*t32965*(2.0/3.0);
                double t33071 = b2f*c*t32984*(1.0/3.0);
                double t33072 = b1f*c*t32991*t32984*(1.0/6.0);
                double t33073 = b3f*c*t32984*t32976*(1.0/2.0);
                double t33074 = t33070+t33071+t33072+t33073;
                double t33075 = a1f*c*c0f*t32984*t33019*(2.0/3.0);
                double t33076 = a1p*c*c0p*t32984*t33009*(2.0/3.0);
                double t33077 = ccaa1*gcaa*t32948*t33052;
                double t33078 = ccaa2*gamma_aa[index]*t32950*t33025*t33053*2.0;
                double t33079 = t33077+t33078-ccaa1*gamma_aa[index]*t32950*t33025*t33054-ccaa2*t32950*t32953*t33025* \
                   t33055*t33058;
                double t33080 = 1.0/t33064;
                double t33081 = 1.0/t33067;
                double t33082 = 1.0/(t33064*t33064);
                double t33083 = 1.0/(t33067*t33067);
                double t33084 = gx*t32948*2.0;
                double t33085 = gamma_aa[index]*t32950*t33062*2.0;
                double t33086 = t33084+t33085;
                double t33087 = gamma_aa[index]*gx*t33040*(1.6E1/3.0);
                double t33088 = t32953*t33034*t33062*(1.6E1/3.0);
                double t33089 = t33087+t33088;
                v_rho_a_gamma_aa_[index] = -t33032*t33079+t33045*(t33050+t33049-ccab2*gamma_aa[index]*t32949*t33033* \
                   t33034*(4.0/3.0)+ccab1*gamma_aa[index]*t32949*t33034*t33035*(4.0/3.0)+ccab2*gamma_aa[index]*1.0/pow(rho_a[index],3.5E1/ \
                   3.0)*t32953*(t32949*t32949)*t33036*(4.0/3.0)-ccab1*gcab*t32953*t32949*t33047*t33048*(4.0/3.0)-ccab2* \
                   t32950*t32953*t32949*t33051*t33043*t33039*2.0)+t33045*(t33050+t33049-ccab1*gcab*t33040*t33046*(4.0/ \
                   3.0)-ccab2*gamma_aa[index]*t32949*t33033*t33034*4.0+ccab1*gamma_aa[index]*t32949*t33034*t33035*(8.0/ \
                   3.0)+ccab2*t32950*t32953*t32949*t33036*(gcab*t33040*(8.0/3.0)+gamma_aa[index]*t32949*t33034*4.0)-ccab1* \
                   gcab*t32953*t32949*t33047*t33048*(4.0/3.0)-ccab2*t32950*t32953*t32949*t33051*t33043*t33039*2.0)-(ccab1* \
                   gcab*t32948*t33046*(1.0/2.0)+ccab2*gamma_aa[index]*t32950*t32949*t33033-ccab1*gamma_aa[index]*t32950* \
                   t32949*t33035*(1.0/2.0)-ccab2*t32950*t32953*t32949*t33036*t33039)*(rho_a[index]*((1.0/(t32968*t32968) \
                   *t33012*(b4p*t32965*1.0/pow(t32957,5.0/3.0)*(2.0/3.0)+b2p*c*t32969*(1.0/3.0)+b3p*c*t32960*t32969*(1.0/ \
                   2.0)+b1p*c*1.0/sqrt(t32959)*t32969*(1.0/6.0)))/t32973-a1p*c*c0p*t32969*t33010*(2.0/3.0))*2.0+rho_a[index]* \
                   (-t33008+t33076+t33015*t33018*(t33008+t33075-t33021*t33074*t33068*t33069-a1p*c*c0p*t32984*t33009*(2.0/ \
                   3.0)))+c0p*t33010*t33012*2.0-c0p*t33000*t33009*2.0-t33023*t33015*t33018)*2.0+c0*pow(rho_a[index],1.0/ \
                   3.0)*(cx1*gx*t32948*t33080-cx1*gamma_aa[index]*t32950*t33062*t33082+cx2*gamma_aa[index]*t32950*t33062* \
                   t33081*2.0-cx2*t32950*t32953*t33062*t33083*t33086)*(4.0/3.0)-c0*pow(rho_a[index],4.0/3.0)*(cx1*gx* \
                   t33040*t33080*(8.0/3.0)-cx1*gamma_aa[index]*t33034*t33062*t33082*8.0+cx2*gamma_aa[index]*t33034*t33062* \
                   t33081*(3.2E1/3.0)-cx2*t32953*t33034*t33062*t33083*t33086*(1.6E1/3.0)+cx1*gx*t32953*t33062*1.0/(t33064* \
                   t33064*t33064)*t33047*(1.6E1/3.0)-cx2*t32950*t32953*t33062*t33083*(gx*t33040*(1.6E1/3.0)+gamma_aa[index]* \
                   t33034*t33062*(3.2E1/3.0))-cx2*gamma_aa[index]*t32950*t33062*t33083*t33089*2.0+cx2*t32950*t32953*t33062* \
                   1.0/(t33067*t33067*t33067)*t33086*t33089*2.0)+rho_a[index]*t33079*(-t33008+t33076+t33015*t33018*(t33008+ \
                   t33075-t33076-t33021*t33074*t33068*t33069))+rho_a[index]*t33032*(ccaa1*gcaa*t33040*t33052*(8.0/3.0) \
                   -ccaa1*gamma_aa[index]*t33025*t33034*t33054*8.0+ccaa2*gamma_aa[index]*t33025*t33034*t33053*(3.2E1/ \
                   3.0)-ccaa2*t32953*t33025*t33034*t33055*t33058*(1.6E1/3.0)+ccaa1*gcaa*t32953*t33025*1.0/(t33027*t33027* \
                   t33027)*t33047*(1.6E1/3.0)-ccaa2*t32950*t32953*t33025*t33055*(gcaa*t33040*(1.6E1/3.0)+gamma_aa[index]* \
                   t33025*t33034*(3.2E1/3.0))-ccaa2*gamma_aa[index]*t32950*t33025*t33061*t33055*2.0+ccaa2*t32950*t32953* \
                   1.0/(t33030*t33030*t33030)*t33025*t33061*t33058*2.0);
            } else {
                v_rho_a_gamma_aa_[index] = 0.0;
            } 
        
            //V_gamma_aa_gamma_aa
            if (rho_a[index] > cutoff_) {
                double t33091 = 1.0/pow(rho_a[index],1.0/3.0);
                double t33092 = c*t33091;
                double t33093 = sqrt(t33092);
                double t33094 = pow(t33092,3.0/2.0);
                double t33095 = c*c;
                double t33096 = 1.0/pow(rho_a[index],2.0/3.0);
                double t33097 = 1.0/c0p;
                double t33098 = b1p*t33093;
                double t33099 = b3p*t33094;
                double t33100 = b4p*t33095*t33096;
                double t33101 = b2p*c*t33091;
                double t33102 = t33100+t33101+t33098+t33099;
                double t33103 = 1.0/t33102;
                double t33104 = t33103*t33097*(1.0/2.0);
                double t33105 = t33104+1.0;
                double t33106 = log(t33105);
                double t33107 = a1p*c*t33091;
                double t33108 = t33107+1.0;
                double t33109 = rho_a[index]*2.0;
                double t33110 = 1.0/pow(t33109,1.0/3.0);
                double t33111 = c*t33110;
                double t33112 = gcab*gcab;
                double t33113 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t33114 = 1.0/pow(rho_a[index],8.0/3.0);
                double t33115 = gamma_aa[index]*gcab*t33114;
                double t33116 = t33115+1.0;
                double t33117 = gamma_aa[index]*gamma_aa[index];
                double t33118 = gamma_aa[index]*gcab*t33114*2.0;
                double t33119 = t33112*t33113*t33117;
                double t33120 = t33118+t33119+1.0;
                double t33122 = gcab*t33114;
                double t33123 = gamma_aa[index]*t33112*t33113;
                double t33121 = t33122+t33123;
                double t33124 = 1.0/(t33120*t33120);
                double t33125 = pow(2.0,1.0/3.0);
                double t33126 = t33125*2.0;
                double t33127 = t33126-2.0;
                double t33128 = two_13*2.0;
                double t33129 = t33128-2.0;
                double t33130 = 1.0/t33129;
                double t33131 = 1.0/c0f;
                double t33132 = b1f*t33093;
                double t33133 = b3f*t33094;
                double t33134 = b4f*t33095*t33096;
                double t33135 = b2f*c*t33091;
                double t33136 = t33132+t33133+t33134+t33135;
                double t33137 = 1.0/t33136;
                double t33138 = t33131*t33137*(1.0/2.0);
                double t33139 = t33138+1.0;
                double t33140 = log(t33139);
                double t33141 = a1f*c*t33091;
                double t33142 = t33141+1.0;
                double t33143 = c0f*t33140*t33142*2.0;
                double t33144 = c0p*t33106*t33108*2.0;
                double t33145 = gcaa*gcaa;
                double t33146 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t33147 = gamma_aa[index]*gcaa*t33114;
                double t33148 = t33147+1.0;
                double t33149 = 1.0/pow(rho_a[index],3.2E1/3.0);
                double t33150 = gamma_aa[index]*gcaa*t33114*2.0;
                double t33151 = t33113*t33117*t33145;
                double t33152 = t33150+t33151+1.0;
                double t33154 = gcaa*t33114*2.0;
                double t33155 = gamma_aa[index]*t33113*t33145*2.0;
                double t33153 = t33154+t33155;
                double t33156 = 1.0/(t33152*t33152);
                double t33157 = gx*gx;
                double t33158 = gamma_aa[index]*gx*t33114;
                double t33159 = t33158+1.0;
                double t33160 = gamma_aa[index]*gx*t33114*2.0;
                double t33161 = t33113*t33117*t33157;
                double t33162 = t33160+t33161+1.0;
                double t33164 = gx*t33114*2.0;
                double t33165 = gamma_aa[index]*t33113*t33157*2.0;
                double t33163 = t33164+t33165;
                double t33166 = 1.0/(t33162*t33162);
                v_gamma_aa_gamma_aa_[index] = (rho_a[index]*(t33144+t33130*t33127*(t33143-c0p*t33106*t33108*2.0)) \
                   *2.0-c0p*rho_a[index]*log((t33097*(1.0/2.0))/(b1p*sqrt(t33111)+b3p*pow(t33111,3.0/2.0)+b4p*1.0/pow(t33109,2.0/ \
                   3.0)*t33095+b2p*c*t33110)+1.0)*(a1p*c*t33110+1.0)*4.0)*((ccab2*t33112*t33113*(1.0/2.0))/t33120-ccab1* \
                   t33112*t33113*1.0/(t33116*t33116)*(1.0/2.0)-ccab2*(t33112*t33112)*t33124*t33117*t33149*(1.0/2.0)+ccab1* \
                   gamma_aa[index]*gcab*t33112*1.0/(t33116*t33116*t33116)*t33146*(1.0/2.0)+ccab2*1.0/(t33120*t33120*t33120) \
                   *t33112*(t33121*t33121)*t33113*t33117*2.0-ccab2*gamma_aa[index]*t33112*t33121*t33113*t33124*2.0)*4.0- \
                   rho_a[index]*(t33144+t33130*t33127*(t33143-t33144))*((ccaa2*t33113*t33145*2.0)/t33152-ccaa1*t33113* \
                   t33145*1.0/(t33148*t33148)*2.0-ccaa2*t33117*(t33145*t33145)*t33156*t33149*2.0+ccaa1*gamma_aa[index]* \
                   gcaa*t33145*t33146*1.0/(t33148*t33148*t33148)*2.0+ccaa2*t33113*1.0/(t33152*t33152*t33152)*t33117*(t33153* \
                   t33153)*t33145*2.0-ccaa2*gamma_aa[index]*t33113*t33153*t33145*t33156*4.0)*2.0-c0*pow(rho_a[index],4.0/ \
                   3.0)*(cx1*t33113*t33157*1.0/(t33159*t33159)*2.0-(cx2*t33113*t33157*2.0)/t33162+cx2*t33117*(t33157* \
                   t33157)*t33166*t33149*2.0-cx1*gamma_aa[index]*gx*t33146*t33157*1.0/(t33159*t33159*t33159)*2.0-cx2* \
                   t33113*t33117*1.0/(t33162*t33162*t33162)*(t33163*t33163)*t33157*2.0+cx2*gamma_aa[index]*t33113*t33163* \
                   t33157*t33166*4.0)*2.0;
            } else {
                v_gamma_aa_gamma_aa_[index] = 0.0;
            } 
        
        }
        if (is_meta_) {
        
            //V_rho_a_tau_a
            if (rho_a[index] > cutoff_) {
                v_rho_a_tau_a_[index] = 0.0;
            } else {
                v_rho_a_tau_a_[index] = 0.0;
            } 
        
            //V_tau_a_tau_a
            if (rho_a[index] > cutoff_) {
                v_tau_a_tau_a_[index] = 0.0;
            } else {
                v_tau_a_tau_a_[index] = 0.0;
            } 
       
            if (is_gga_) {
        
                //V_gamma_aa_tau_a
                if (rho_a[index] > cutoff_) {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } else {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } 
       
            }
        }
    }
}
void B97_0_Functional::computeUKSFunctional(boost::shared_ptr<UKSFunctions> prop)
{
    int ntrue = prop->npoints();

    const double* restrict rho_a;
    const double* restrict rho_b;
    const double* restrict gamma_aa;
    const double* restrict gamma_ab;
    const double* restrict gamma_bb;
    const double* restrict tau_a;
    const double* restrict tau_b;

    rho_a = prop->property_value("RHO_A")->pointer();
    rho_b = prop->property_value("RHO_B")->pointer();
    if (is_gga_) {
        gamma_aa = prop->property_value("GAMMA_AA")->pointer();
        gamma_ab = prop->property_value("GAMMA_AB")->pointer();
        gamma_bb = prop->property_value("GAMMA_BB")->pointer();
    }
    if (is_meta_) {
        tau_a = prop->property_value("TAU_A")->pointer();
        tau_b = prop->property_value("TAU_B")->pointer();
    }

    double c0 = params_[0].second;
    double two_13 = params_[1].second;
    double d2fz0 = params_[2].second;
    double c = params_[3].second;
    double Aa = params_[4].second;
    double a1a = params_[5].second;
    double b1a = params_[6].second;
    double b2a = params_[7].second;
    double b3a = params_[8].second;
    double b4a = params_[9].second;
    double c0p = params_[10].second;
    double a1p = params_[11].second;
    double b1p = params_[12].second;
    double b2p = params_[13].second;
    double b3p = params_[14].second;
    double b4p = params_[15].second;
    double c0f = params_[16].second;
    double a1f = params_[17].second;
    double b1f = params_[18].second;
    double b2f = params_[19].second;
    double b3f = params_[20].second;
    double b4f = params_[21].second;
    double gcab = params_[22].second;
    double gcaa = params_[23].second;
    double gx = params_[24].second;
    double ccab0 = params_[25].second;
    double ccab1 = params_[26].second;
    double ccab2 = params_[27].second;
    double ccaa0 = params_[28].second;
    double ccaa1 = params_[29].second;
    double ccaa2 = params_[30].second;
    double cx0 = params_[31].second;
    double cx1 = params_[32].second;
    double cx2 = params_[33].second;
    
    //Functional
    for (int index = 0; index < ntrue; index++) {

        //Functional Value
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t28941 = 1.0/pow(rho_a[index],8.0/3.0);
            double t28942 = gamma_aa[index]*t28941*(1.0/2.0);
            double t28943 = 1.0/pow(rho_b[index],8.0/3.0);
            double t28944 = gamma_bb[index]*t28943*(1.0/2.0);
            double t28939 = t28942+t28944;
            double t28940 = gcab*gcab;
            double t28945 = t28939*t28939;
            double t28946 = 1.0/pow(rho_a[index],1.0/3.0);
            double t28947 = c*t28946;
            double t28948 = sqrt(t28947);
            double t28949 = pow(t28947,3.0/2.0);
            double t28950 = c*c;
            double t28951 = 1.0/pow(rho_a[index],2.0/3.0);
            double t28952 = 1.0/c0p;
            double t28953 = b1p*t28948;
            double t28954 = b3p*t28949;
            double t28955 = b4p*t28950*t28951;
            double t28956 = b2p*c*t28946;
            double t28957 = t28953+t28954+t28955+t28956;
            double t28958 = 1.0/t28957;
            double t28959 = t28952*t28958*(1.0/2.0);
            double t28960 = t28959+1.0;
            double t28961 = log(t28960);
            double t28962 = a1p*c*t28946;
            double t28963 = t28962+1.0;
            double t28964 = pow(2.0,1.0/3.0);
            double t28965 = t28964*2.0;
            double t28966 = t28965-2.0;
            double t28967 = two_13*2.0;
            double t28968 = t28967-2.0;
            double t28969 = 1.0/t28968;
            double t28970 = 1.0/c0f;
            double t28971 = 1.0/pow(rho_b[index],1.0/3.0);
            double t28972 = c*t28971;
            double t28973 = sqrt(t28972);
            double t28974 = pow(t28972,3.0/2.0);
            double t28975 = 1.0/pow(rho_b[index],2.0/3.0);
            double t28976 = b1p*t28973;
            double t28977 = b3p*t28974;
            double t28978 = b4p*t28950*t28975;
            double t28979 = b2p*c*t28971;
            double t28980 = t28976+t28977+t28978+t28979;
            double t28981 = 1.0/t28980;
            double t28982 = t28952*t28981*(1.0/2.0);
            double t28983 = t28982+1.0;
            double t28984 = log(t28983);
            double t28985 = a1p*c*t28971;
            double t28986 = t28985+1.0;
            double t28987 = c0p*t28984*t28986*2.0;
            double t28988 = rho_a[index]+rho_b[index];
            double t28989 = 1.0/pow(t28988,1.0/3.0);
            double t28990 = c*t28989;
            double t28991 = sqrt(t28990);
            double t28992 = pow(t28990,3.0/2.0);
            double t28993 = 1.0/pow(t28988,2.0/3.0);
            double t28994 = b1p*t28991;
            double t28995 = b3p*t28992;
            double t28996 = b4p*t28950*t28993;
            double t28997 = b2p*c*t28989;
            double t28998 = t28994+t28995+t28996+t28997;
            double t28999 = 1.0/t28998;
            double t29000 = t28952*t28999*(1.0/2.0);
            double t29001 = t29000+1.0;
            double t29002 = log(t29001);
            double t29003 = a1p*c*t28989;
            double t29004 = t29003+1.0;
            double t29005 = c0p*t29002*t29004*2.0;
            double t29006 = rho_a[index]-rho_b[index];
            double t29007 = t29006*t29006;
            double t29008 = 1.0/t28988;
            double t29009 = t29006*t29008;
            double t29010 = 1.0/(t28988*t28988*t28988*t28988);
            double t29011 = t29007*t29007;
            double t29012 = t29009+1.0;
            double t29013 = pow(t29012,4.0/3.0);
            double t29014 = -t29009+1.0;
            double t29015 = pow(t29014,4.0/3.0);
            double t29016 = t29013+t29015-2.0;
            double t29017 = c0p*t28961*t28963*2.0;
            double t29018 = gamma_aa[index]*gamma_aa[index];
            double t29019 = gx*gx;
            double t29020 = 1.0/pow(rho_a[index],1.6E1/3.0);
            double t29021 = gamma_bb[index]*gamma_bb[index];
            double t29022 = 1.0/pow(rho_b[index],1.6E1/3.0);
            double t29023 = b1f*t28948;
            double t29024 = b3f*t28949;
            double t29025 = b4f*t28950*t28951;
            double t29026 = b2f*c*t28946;
            double t29027 = t29023+t29024+t29025+t29026;
            double t29028 = 1.0/t29027;
            double t29029 = t28970*t29028*(1.0/2.0);
            double t29030 = t29029+1.0;
            double t29031 = log(t29030);
            double t29032 = a1f*c*t28946;
            double t29033 = t29032+1.0;
            double t29034 = t29017-c0f*t29031*t29033*2.0;
            double t29035 = t29017-t28966*t28969*t29034;
            double t29036 = gcaa*gcaa;
            double t29037 = b1f*t28973;
            double t29038 = b3f*t28974;
            double t29039 = b4f*t28950*t28975;
            double t29040 = b2f*c*t28971;
            double t29041 = t29040+t29037+t29038+t29039;
            double t29042 = 1.0/t29041;
            double t29043 = t28970*t29042*(1.0/2.0);
            double t29044 = t29043+1.0;
            double t29045 = log(t29044);
            double t29046 = a1f*c*t28971;
            double t29047 = t29046+1.0;
            double t29048 = t28987-c0f*t29045*t29047*2.0;
            double t29049 = t28987-t28966*t28969*t29048;
            functional_[index] = (ccab0+(ccab1*gcab*t28939)/(gcab*t28939+1.0)+(ccab2*t28940*t28945)/(gcab*t28939* \
               2.0+t28940*t28945+1.0))*(rho_a[index]*t29035+rho_b[index]*t29049-t28988*(t29005-t28969*t29010*t29011* \
               t29016*(t29005-c0f*log((t28970*(1.0/2.0))/(b1f*t28991+b3f*t28992+b2f*c*t28989+b4f*t28950*t28993)+1.0) \
               *(a1f*c*t28989+1.0)*2.0)+(Aa*t28969*t29016*log((1.0/2.0)/(Aa*(b1a*t28991+b3a*t28992+b2a*c*t28989+b4a* \
               t28950*t28993))+1.0)*(t29010*t29011-1.0)*(a1a*c*t28989+1.0)*2.0)/d2fz0))-rho_a[index]*t29035*(ccaa0+ \
               (ccaa2*t29020*t29018*t29036)/(gamma_aa[index]*gcaa*t28941*2.0+t29020*t29018*t29036+1.0)+(ccaa1*gamma_aa[index]* \
               gcaa*t28941)/(gamma_aa[index]*gcaa*t28941+1.0))-rho_b[index]*t29049*(ccaa0+(ccaa2*t29021*t29022*t29036) \
               /(gamma_bb[index]*gcaa*t28943*2.0+t29021*t29022*t29036+1.0)+(ccaa1*gamma_bb[index]*gcaa*t28943)/(gamma_bb[index]* \
               gcaa*t28943+1.0))+c0*pow(rho_a[index],4.0/3.0)*(cx0+(cx2*t29020*t29018*t29019)/(gamma_aa[index]*gx* \
               t28941*2.0+t29020*t29018*t29019+1.0)+(cx1*gamma_aa[index]*gx*t28941)/(gamma_aa[index]*gx*t28941+1.0) \
               )+c0*pow(rho_b[index],4.0/3.0)*(cx0+(cx2*t29021*t29022*t29019)/(gamma_bb[index]*gx*t28943*2.0+t29021* \
               t29022*t29019+1.0)+(cx1*gamma_bb[index]*gx*t28943)/(gamma_bb[index]*gx*t28943+1.0));
        } else if (rho_a[index] > cutoff_) {
            double t32060 = 1.0/pow(rho_a[index],8.0/3.0);
            double t32061 = gamma_aa[index]*gamma_aa[index];
            double t32062 = gx*gx;
            double t32063 = 1.0/pow(rho_a[index],1.6E1/3.0);
            double t32064 = 1.0/pow(rho_a[index],1.0/3.0);
            double t32065 = c*t32064;
            double t32066 = sqrt(t32065);
            double t32067 = pow(t32065,3.0/2.0);
            double t32068 = c*c;
            double t32069 = 1.0/pow(rho_a[index],2.0/3.0);
            double t32070 = 1.0/c0p;
            double t32071 = b1p*t32066;
            double t32072 = b3p*t32067;
            double t32073 = b4p*t32068*t32069;
            double t32074 = b2p*c*t32064;
            double t32075 = t32071+t32072+t32073+t32074;
            double t32076 = 1.0/t32075;
            double t32077 = t32070*t32076*(1.0/2.0);
            double t32078 = t32077+1.0;
            double t32079 = log(t32078);
            double t32080 = a1p*c*t32064;
            double t32081 = t32080+1.0;
            double t32082 = gcaa*gcaa;
            functional_[index] = -rho_a[index]*(((pow(2.0,1.0/3.0)*2.0-2.0)*(c0f*log((1.0/2.0)/(c0f*(b1f*t32066+ \
               b3f*t32067+b2f*c*t32064+b4f*t32068*t32069))+1.0)*(a1f*c*t32064+1.0)*2.0-c0p*t32081*t32079*2.0))/(two_13* \
               2.0-2.0)+c0p*t32081*t32079*2.0)*(ccaa0+(ccaa2*t32061*t32063*t32082)/(gamma_aa[index]*gcaa*t32060*2.0+ \
               t32061*t32063*t32082+1.0)+(ccaa1*gamma_aa[index]*gcaa*t32060)/(gamma_aa[index]*gcaa*t32060+1.0))+c0* \
               pow(rho_a[index],4.0/3.0)*(cx0+(cx2*t32061*t32062*t32063)/(gamma_aa[index]*gx*t32060*2.0+t32061*t32062* \
               t32063+1.0)+(cx1*gamma_aa[index]*gx*t32060)/(gamma_aa[index]*gx*t32060+1.0));
        } else if (rho_b[index] > cutoff_) {
            double t31649 = 1.0/pow(rho_b[index],8.0/3.0);
            double t31650 = gamma_bb[index]*gamma_bb[index];
            double t31651 = gx*gx;
            double t31652 = 1.0/pow(rho_b[index],1.6E1/3.0);
            double t31653 = 1.0/pow(rho_b[index],1.0/3.0);
            double t31654 = c*t31653;
            double t31655 = sqrt(t31654);
            double t31656 = pow(t31654,3.0/2.0);
            double t31657 = c*c;
            double t31658 = 1.0/pow(rho_b[index],2.0/3.0);
            double t31659 = 1.0/c0p;
            double t31660 = b1p*t31655;
            double t31661 = b3p*t31656;
            double t31662 = b4p*t31657*t31658;
            double t31663 = b2p*c*t31653;
            double t31664 = t31660+t31661+t31662+t31663;
            double t31665 = 1.0/t31664;
            double t31666 = t31665*t31659*(1.0/2.0);
            double t31667 = t31666+1.0;
            double t31668 = log(t31667);
            double t31669 = a1p*c*t31653;
            double t31670 = t31669+1.0;
            double t31671 = gcaa*gcaa;
            functional_[index] = -rho_b[index]*(((pow(2.0,1.0/3.0)*2.0-2.0)*(c0f*log((1.0/2.0)/(c0f*(b1f*t31655+ \
               b3f*t31656+b2f*c*t31653+b4f*t31657*t31658))+1.0)*(a1f*c*t31653+1.0)*2.0-c0p*t31670*t31668*2.0))/(two_13* \
               2.0-2.0)+c0p*t31670*t31668*2.0)*(ccaa0+(ccaa2*t31650*t31652*t31671)/(gamma_bb[index]*gcaa*t31649*2.0+ \
               t31650*t31652*t31671+1.0)+(ccaa1*gamma_bb[index]*gcaa*t31649)/(gamma_bb[index]*gcaa*t31649+1.0))+c0* \
               pow(rho_b[index],4.0/3.0)*(cx0+(cx2*t31650*t31651*t31652)/(gamma_bb[index]*gx*t31649*2.0+t31650*t31651* \
               t31652+1.0)+(cx1*gamma_bb[index]*gx*t31649)/(gamma_bb[index]*gx*t31649+1.0));
        } else {
            functional_[index] = 0.0;
        } 
   
    }
    //First Partials
    for (int index = 0; index < ntrue && deriv_ >= 1; index++) {

        //V_rho_a
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t29051 = 1.0/pow(rho_a[index],1.0/3.0);
            double t29052 = c*t29051;
            double t29053 = sqrt(t29052);
            double t29054 = pow(t29052,3.0/2.0);
            double t29055 = c*c;
            double t29056 = 1.0/pow(rho_a[index],2.0/3.0);
            double t29057 = 1.0/c0p;
            double t29058 = b1p*t29053;
            double t29059 = b3p*t29054;
            double t29060 = b4p*t29055*t29056;
            double t29061 = b2p*c*t29051;
            double t29062 = t29060+t29061+t29058+t29059;
            double t29063 = 1.0/t29062;
            double t29064 = t29063*t29057*(1.0/2.0);
            double t29065 = t29064+1.0;
            double t29066 = log(t29065);
            double t29067 = a1p*c*t29051;
            double t29068 = t29067+1.0;
            double t29069 = 1.0/pow(rho_a[index],8.0/3.0);
            double t29070 = gamma_aa[index]*gamma_aa[index];
            double t29071 = gcaa*gcaa;
            double t29072 = 1.0/pow(rho_a[index],1.6E1/3.0);
            double t29075 = gamma_aa[index]*t29069*(1.0/2.0);
            double t29076 = 1.0/pow(rho_b[index],8.0/3.0);
            double t29077 = gamma_bb[index]*t29076*(1.0/2.0);
            double t29073 = t29075+t29077;
            double t29074 = gcab*gcab;
            double t29078 = t29073*t29073;
            double t29079 = rho_a[index]+rho_b[index];
            double t29080 = 1.0/pow(t29079,1.0/3.0);
            double t29081 = c*t29080;
            double t29082 = sqrt(t29081);
            double t29083 = b1p*t29082;
            double t29084 = pow(t29081,3.0/2.0);
            double t29085 = b3p*t29084;
            double t29086 = 1.0/pow(t29079,2.0/3.0);
            double t29087 = b4p*t29055*t29086;
            double t29088 = b2p*c*t29080;
            double t29089 = t29083+t29085+t29087+t29088;
            double t29090 = 1.0/pow(t29079,4.0/3.0);
            double t29091 = two_13*2.0;
            double t29092 = t29091-2.0;
            double t29093 = 1.0/t29092;
            double t29094 = 1.0/c0f;
            double t29095 = 1.0/t29089;
            double t29096 = t29057*t29095*(1.0/2.0);
            double t29097 = t29096+1.0;
            double t29098 = a1p*c*t29080;
            double t29099 = t29098+1.0;
            double t29100 = rho_a[index]-rho_b[index];
            double t29101 = t29100*t29100;
            double t29102 = 1.0/t29079;
            double t29103 = t29100*t29102;
            double t29104 = b1f*t29082;
            double t29105 = b3f*t29084;
            double t29106 = b4f*t29055*t29086;
            double t29107 = b2f*c*t29080;
            double t29108 = t29104+t29105+t29106+t29107;
            double t29109 = 1.0/t29108;
            double t29110 = t29109*t29094*(1.0/2.0);
            double t29111 = t29110+1.0;
            double t29112 = log(t29111);
            double t29113 = a1f*c*t29080;
            double t29114 = t29113+1.0;
            double t29115 = log(t29097);
            double t29125 = c0f*t29112*t29114*2.0;
            double t29126 = c0p*t29115*t29099*2.0;
            double t29116 = t29125-t29126;
            double t29117 = t29103+1.0;
            double t29118 = pow(t29117,4.0/3.0);
            double t29119 = -t29103+1.0;
            double t29120 = pow(t29119,4.0/3.0);
            double t29121 = t29120+t29118-2.0;
            double t29122 = 1.0/(t29079*t29079);
            double t29153 = t29100*t29122;
            double t29123 = t29102-t29153;
            double t29124 = 1.0/(t29079*t29079*t29079*t29079);
            double t29127 = t29101*t29101;
            double t29128 = 1.0/pow(t29079,5.0/3.0);
            double t29129 = 1.0/sqrt(t29081);
            double t29130 = 1.0/t29097;
            double t29131 = 1.0/(t29089*t29089);
            double t29132 = b4p*t29055*t29128*(2.0/3.0);
            double t29133 = b2p*c*t29090*(1.0/3.0);
            double t29134 = b1p*c*t29090*t29129*(1.0/6.0);
            double t29135 = b3p*c*t29090*t29082*(1.0/2.0);
            double t29136 = t29132+t29133+t29134+t29135;
            double t29137 = t29130*t29131*t29136*t29099;
            double t29138 = 1.0/(t29079*t29079*t29079*t29079*t29079);
            double t29139 = 1.0/d2fz0;
            double t29140 = 1.0/Aa;
            double t29141 = b1a*t29082;
            double t29142 = b3a*t29084;
            double t29143 = b4a*t29055*t29086;
            double t29144 = b2a*c*t29080;
            double t29145 = t29141+t29142+t29143+t29144;
            double t29146 = 1.0/t29145;
            double t29147 = t29140*t29146*(1.0/2.0);
            double t29148 = t29147+1.0;
            double t29149 = log(t29148);
            double t29150 = a1a*c*t29080;
            double t29151 = t29150+1.0;
            double t29152 = pow(t29117,1.0/3.0);
            double t29154 = t29123*t29152*(4.0/3.0);
            double t29155 = pow(t29119,1.0/3.0);
            double t29156 = t29154-t29123*t29155*(4.0/3.0);
            double t29157 = t29124*t29127;
            double t29158 = t29157-1.0;
            double t29159 = pow(2.0,1.0/3.0);
            double t29160 = t29159*2.0;
            double t29161 = t29160-2.0;
            double t29162 = a1f*c*t29051;
            double t29163 = t29162+1.0;
            double t29164 = b1f*t29053;
            double t29165 = b3f*t29054;
            double t29166 = b4f*t29055*t29056;
            double t29167 = b2f*c*t29051;
            double t29168 = t29164+t29165+t29166+t29167;
            double t29169 = 1.0/t29168;
            double t29170 = t29094*t29169*(1.0/2.0);
            double t29171 = t29170+1.0;
            double t29172 = 1.0/pow(rho_a[index],4.0/3.0);
            double t29173 = 1.0/pow(rho_a[index],5.0/3.0);
            double t29174 = 1.0/sqrt(t29052);
            double t29175 = log(t29171);
            double t29176 = 1.0/t29065;
            double t29177 = 1.0/(t29062*t29062);
            double t29178 = b4p*t29055*t29173*(2.0/3.0);
            double t29179 = b2p*c*t29172*(1.0/3.0);
            double t29180 = b1p*c*t29172*t29174*(1.0/6.0);
            double t29181 = b3p*c*t29053*t29172*(1.0/2.0);
            double t29182 = t29180+t29181+t29178+t29179;
            double t29183 = t29182*t29068*t29176*t29177;
            double t29184 = c0f*t29163*t29175*2.0;
            double t29185 = c0p*t29066*t29068*2.0;
            double t29186 = t29184-t29185;
            double t29187 = 1.0/pow(rho_b[index],1.0/3.0);
            double t29188 = c*t29187;
            double t29189 = sqrt(t29188);
            double t29190 = pow(t29188,3.0/2.0);
            double t29191 = 1.0/pow(rho_b[index],2.0/3.0);
            double t29192 = b1p*t29189;
            double t29193 = b3p*t29190;
            double t29194 = b4p*t29055*t29191;
            double t29195 = b2p*c*t29187;
            double t29196 = t29192+t29193+t29194+t29195;
            double t29197 = 1.0/t29196;
            double t29198 = t29057*t29197*(1.0/2.0);
            double t29199 = t29198+1.0;
            double t29200 = log(t29199);
            double t29201 = a1p*c*t29187;
            double t29202 = t29201+1.0;
            double t29203 = c0p*t29200*t29202*2.0;
            double t29204 = t29121*t29124*t29116*t29127*t29093;
            double t29205 = Aa*t29121*t29151*t29093*t29139*t29149*t29158*2.0;
            double t29206 = gcab*t29073;
            double t29207 = t29206+1.0;
            double t29208 = 1.0/t29207;
            double t29209 = 1.0/pow(rho_a[index],1.1E1/3.0);
            double t29210 = t29074*t29078;
            double t29211 = gcab*t29073*2.0;
            double t29212 = t29210+t29211+1.0;
            double t29213 = 1.0/t29212;
            double t29214 = gx*gx;
            double t29215 = gamma_aa[index]*gx*t29069;
            double t29216 = t29215+1.0;
            double t29217 = 1.0/t29216;
            double t29218 = gamma_aa[index]*gx*t29069*2.0;
            double t29219 = t29070*t29214*t29072;
            double t29220 = t29218+t29219+1.0;
            double t29221 = 1.0/t29220;
            double t29222 = 1.0/pow(rho_a[index],1.9E1/3.0);
            double t29223 = 1.0/t29171;
            double t29224 = 1.0/(t29168*t29168);
            double t29225 = b4f*t29055*t29173*(2.0/3.0);
            double t29226 = b2f*c*t29172*(1.0/3.0);
            double t29227 = b1f*c*t29172*t29174*(1.0/6.0);
            double t29228 = b3f*c*t29053*t29172*(1.0/2.0);
            double t29229 = t29225+t29226+t29227+t29228;
            double t29230 = a1f*c*c0f*t29172*t29175*(2.0/3.0);
            double t29231 = a1p*c*c0p*t29172*t29066*(2.0/3.0);
            double t29232 = gamma_aa[index]*gcaa*t29069;
            double t29233 = t29232+1.0;
            double t29234 = 1.0/t29233;
            double t29235 = ccaa1*gamma_aa[index]*gcaa*t29234*t29069;
            double t29236 = gamma_aa[index]*gcaa*t29069*2.0;
            double t29237 = t29070*t29071*t29072;
            double t29238 = t29236+t29237+1.0;
            double t29239 = 1.0/t29238;
            double t29240 = ccaa2*t29070*t29071*t29072*t29239;
            double t29241 = ccaa0+t29240+t29235;
            double t29242 = t29161*t29093*t29186;
            double t29243 = t29242+t29185;
            v_rho_a_[index] = -t29241*(t29185+t29161*t29093*(t29184-c0p*t29066*t29068*2.0))-(ccab0+ccab1*gcab* \
               t29073*t29208+ccab2*t29213*t29074*t29078)*(t29204+t29205+t29126-t29185+t29079*(t29137-t29121*t29124* \
               t29127*t29093*(t29137-(t29114*1.0/(t29108*t29108)*(b2f*c*t29090*(1.0/3.0)+b4f*t29055*t29128*(2.0/3.0) \
               +b1f*c*t29090*t29129*(1.0/6.0)+b3f*c*t29090*t29082*(1.0/2.0)))/t29111+a1f*c*c0f*t29112*t29090*(2.0/ \
               3.0)-a1p*c*c0p*t29115*t29090*(2.0/3.0))-a1p*c*c0p*t29115*t29090*(2.0/3.0)-t29121*t29116*t29127*t29093* \
               t29138*4.0+t29124*t29116*t29127*t29093*t29156+t29100*t29101*t29121*t29124*t29116*t29093*4.0-Aa*t29121* \
               t29151*t29093*t29139*t29149*(t29127*t29138*4.0-t29100*t29101*t29124*4.0)*2.0+Aa*t29151*t29093*t29156* \
               t29139*t29149*t29158*2.0+(t29121*t29151*1.0/(t29145*t29145)*t29093*t29139*t29158*(b2a*c*t29090*(1.0/ \
               3.0)+b4a*t29055*t29128*(2.0/3.0)+b1a*c*t29090*t29129*(1.0/6.0)+b3a*c*t29090*t29082*(1.0/2.0)))/t29148- \
               Aa*a1a*c*t29121*t29090*t29093*t29139*t29149*t29158*(2.0/3.0))+rho_a[index]*(t29231-t29183+t29161*t29093* \
               (t29230+t29183-t29223*t29224*t29163*t29229-a1p*c*c0p*t29172*t29066*(2.0/3.0)))-t29161*t29093*t29186) \
               -(rho_a[index]*t29243+rho_b[index]*(t29203-t29161*t29093*(t29203-c0f*log((t29094*(1.0/2.0))/(b1f*t29189+ \
               b3f*t29190+b2f*c*t29187+b4f*t29055*t29191)+1.0)*(a1f*c*t29187+1.0)*2.0))-t29079*(t29204+t29205+t29126) \
               )*(ccab1*gamma_aa[index]*gcab*t29208*t29209*(4.0/3.0)-ccab2*1.0/(t29212*t29212)*t29074*t29078*(gamma_aa[index]* \
               gcab*t29209*(8.0/3.0)+gamma_aa[index]*t29073*t29074*t29209*(8.0/3.0))-ccab1*gamma_aa[index]*1.0/(t29207* \
               t29207)*t29073*t29074*t29209*(4.0/3.0)+ccab2*gamma_aa[index]*t29213*t29073*t29074*t29209*(8.0/3.0) \
               )+rho_a[index]*t29243*(ccaa1*gamma_aa[index]*gcaa*t29234*t29209*(8.0/3.0)+ccaa2*t29222*t29070*t29071* \
               t29239*(1.6E1/3.0)-ccaa1*t29222*t29070*t29071*1.0/(t29233*t29233)*(8.0/3.0)-ccaa2*t29070*t29071*t29072* \
               1.0/(t29238*t29238)*(gamma_aa[index]*gcaa*t29209*(1.6E1/3.0)+t29222*t29070*t29071*(1.6E1/3.0)))+c0* \
               pow(rho_a[index],1.0/3.0)*(cx0+cx1*gamma_aa[index]*gx*t29217*t29069+cx2*t29221*t29070*t29214*t29072) \
               *(4.0/3.0)+rho_a[index]*t29241*(t29231-t29183+t29161*t29093*(t29230-t29231+t29183-t29223*t29224*t29163* \
               t29229))-c0*pow(rho_a[index],4.0/3.0)*(cx1*gamma_aa[index]*gx*t29217*t29209*(8.0/3.0)+cx2*t29221*t29222* \
               t29070*t29214*(1.6E1/3.0)-cx1*t29222*t29070*t29214*1.0/(t29216*t29216)*(8.0/3.0)-cx2*1.0/(t29220*t29220) \
               *t29070*t29214*t29072*(gamma_aa[index]*gx*t29209*(1.6E1/3.0)+t29222*t29070*t29214*(1.6E1/3.0)));
        } else if (rho_a[index] > cutoff_) {
            double t32084 = 1.0/pow(rho_a[index],1.0/3.0);
            double t32085 = c*t32084;
            double t32086 = sqrt(t32085);
            double t32087 = pow(t32085,3.0/2.0);
            double t32088 = c*c;
            double t32089 = 1.0/pow(rho_a[index],2.0/3.0);
            double t32090 = 1.0/c0p;
            double t32091 = b1p*t32086;
            double t32092 = b3p*t32087;
            double t32093 = b4p*t32088*t32089;
            double t32094 = b2p*c*t32084;
            double t32095 = t32091+t32092+t32093+t32094;
            double t32096 = 1.0/t32095;
            double t32097 = t32090*t32096*(1.0/2.0);
            double t32098 = t32097+1.0;
            double t32099 = log(t32098);
            double t32100 = a1p*c*t32084;
            double t32101 = t32100+1.0;
            double t32102 = 1.0/pow(rho_a[index],8.0/3.0);
            double t32103 = gamma_aa[index]*gamma_aa[index];
            double t32104 = gcaa*gcaa;
            double t32105 = 1.0/pow(rho_a[index],1.6E1/3.0);
            double t32106 = gx*gx;
            double t32107 = gamma_aa[index]*gx*t32102;
            double t32108 = t32107+1.0;
            double t32109 = 1.0/t32108;
            double t32110 = gamma_aa[index]*gx*t32102*2.0;
            double t32111 = t32103*t32105*t32106;
            double t32112 = t32110+t32111+1.0;
            double t32113 = 1.0/t32112;
            double t32114 = 1.0/pow(rho_a[index],1.9E1/3.0);
            double t32115 = 1.0/pow(rho_a[index],1.1E1/3.0);
            double t32116 = pow(2.0,1.0/3.0);
            double t32117 = t32116*2.0;
            double t32118 = t32117-2.0;
            double t32119 = two_13*2.0;
            double t32120 = t32119-2.0;
            double t32121 = 1.0/t32120;
            double t32122 = a1f*c*t32084;
            double t32123 = t32122+1.0;
            double t32124 = 1.0/c0f;
            double t32125 = b1f*t32086;
            double t32126 = b3f*t32087;
            double t32127 = b4f*t32088*t32089;
            double t32128 = b2f*c*t32084;
            double t32129 = t32125+t32126+t32127+t32128;
            double t32130 = 1.0/t32129;
            double t32131 = t32130*t32124*(1.0/2.0);
            double t32132 = t32131+1.0;
            double t32133 = 1.0/pow(rho_a[index],4.0/3.0);
            double t32134 = 1.0/pow(rho_a[index],5.0/3.0);
            double t32135 = 1.0/sqrt(t32085);
            double t32136 = log(t32132);
            double t32137 = 1.0/t32098;
            double t32138 = 1.0/(t32095*t32095);
            double t32139 = b4p*t32134*t32088*(2.0/3.0);
            double t32140 = b2p*c*t32133*(1.0/3.0);
            double t32141 = b1p*c*t32133*t32135*(1.0/6.0);
            double t32142 = b3p*c*t32133*t32086*(1.0/2.0);
            double t32143 = t32140+t32141+t32142+t32139;
            double t32144 = t32101*t32143*t32137*t32138;
            double t32145 = gamma_aa[index]*gcaa*t32102;
            double t32146 = t32145+1.0;
            double t32147 = 1.0/t32146;
            double t32148 = ccaa1*gamma_aa[index]*gcaa*t32102*t32147;
            double t32149 = gamma_aa[index]*gcaa*t32102*2.0;
            double t32150 = t32103*t32104*t32105;
            double t32151 = t32150+t32149+1.0;
            double t32152 = 1.0/t32151;
            double t32153 = ccaa2*t32103*t32104*t32105*t32152;
            double t32154 = ccaa0+t32153+t32148;
            double t32155 = c0f*t32123*t32136*2.0;
            double t32156 = c0p*t32101*t32099*2.0;
            v_rho_a_[index] = -t32154*(t32156+t32121*t32118*(t32155-c0p*t32101*t32099*2.0))+rho_a[index]*t32154* \
               (-t32144+t32121*t32118*(t32144-(t32123*1.0/(t32129*t32129)*(b2f*c*t32133*(1.0/3.0)+b4f*t32134*t32088* \
               (2.0/3.0)+b1f*c*t32133*t32135*(1.0/6.0)+b3f*c*t32133*t32086*(1.0/2.0)))/t32132+a1f*c*c0f*t32133*t32136* \
               (2.0/3.0)-a1p*c*c0p*t32133*t32099*(2.0/3.0))+a1p*c*c0p*t32133*t32099*(2.0/3.0))+c0*pow(rho_a[index],1.0/ \
               3.0)*(cx0+cx1*gamma_aa[index]*gx*t32102*t32109+cx2*t32103*t32113*t32105*t32106)*(4.0/3.0)+rho_a[index]* \
               (t32156+t32121*t32118*(t32155-t32156))*(ccaa1*gamma_aa[index]*gcaa*t32115*t32147*(8.0/3.0)+ccaa2*t32103* \
               t32104*t32114*t32152*(1.6E1/3.0)-ccaa1*t32103*t32104*t32114*1.0/(t32146*t32146)*(8.0/3.0)-ccaa2*t32103* \
               t32104*t32105*1.0/(t32151*t32151)*(gamma_aa[index]*gcaa*t32115*(1.6E1/3.0)+t32103*t32104*t32114*(1.6E1/ \
               3.0)))-c0*pow(rho_a[index],4.0/3.0)*(cx1*gamma_aa[index]*gx*t32115*t32109*(8.0/3.0)+cx2*t32103*t32113* \
               t32114*t32106*(1.6E1/3.0)-cx1*t32103*t32114*t32106*1.0/(t32108*t32108)*(8.0/3.0)-cx2*t32103*1.0/(t32112* \
               t32112)*t32105*t32106*(gamma_aa[index]*gx*t32115*(1.6E1/3.0)+t32103*t32114*t32106*(1.6E1/3.0)));
        } else if (rho_b[index] > cutoff_) {
            v_rho_a_[index] = 0.0;
        } else {
            v_rho_a_[index] = 0.0;
        } 

        //V_rho_b
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t29245 = 1.0/pow(rho_b[index],1.0/3.0);
            double t29246 = c*t29245;
            double t29247 = sqrt(t29246);
            double t29248 = pow(t29246,3.0/2.0);
            double t29249 = c*c;
            double t29250 = 1.0/pow(rho_b[index],2.0/3.0);
            double t29251 = 1.0/c0p;
            double t29252 = b1p*t29247;
            double t29253 = b3p*t29248;
            double t29254 = b4p*t29250*t29249;
            double t29255 = b2p*c*t29245;
            double t29256 = t29252+t29253+t29254+t29255;
            double t29257 = 1.0/t29256;
            double t29258 = t29251*t29257*(1.0/2.0);
            double t29259 = t29258+1.0;
            double t29260 = log(t29259);
            double t29261 = a1p*c*t29245;
            double t29262 = t29261+1.0;
            double t29263 = 1.0/pow(rho_b[index],8.0/3.0);
            double t29264 = gamma_bb[index]*gamma_bb[index];
            double t29265 = gcaa*gcaa;
            double t29266 = 1.0/pow(rho_b[index],1.6E1/3.0);
            double t29269 = 1.0/pow(rho_a[index],8.0/3.0);
            double t29270 = gamma_aa[index]*t29269*(1.0/2.0);
            double t29271 = gamma_bb[index]*t29263*(1.0/2.0);
            double t29267 = t29270+t29271;
            double t29268 = gcab*gcab;
            double t29272 = t29267*t29267;
            double t29273 = rho_a[index]+rho_b[index];
            double t29274 = 1.0/pow(t29273,1.0/3.0);
            double t29275 = c*t29274;
            double t29276 = sqrt(t29275);
            double t29277 = b1p*t29276;
            double t29278 = pow(t29275,3.0/2.0);
            double t29279 = b3p*t29278;
            double t29280 = 1.0/pow(t29273,2.0/3.0);
            double t29281 = b4p*t29280*t29249;
            double t29282 = b2p*c*t29274;
            double t29283 = t29281+t29282+t29277+t29279;
            double t29284 = 1.0/pow(t29273,4.0/3.0);
            double t29285 = two_13*2.0;
            double t29286 = t29285-2.0;
            double t29287 = 1.0/t29286;
            double t29288 = 1.0/c0f;
            double t29289 = 1.0/t29283;
            double t29290 = t29251*t29289*(1.0/2.0);
            double t29291 = t29290+1.0;
            double t29292 = a1p*c*t29274;
            double t29293 = t29292+1.0;
            double t29294 = rho_a[index]-rho_b[index];
            double t29295 = t29294*t29294;
            double t29296 = 1.0/t29273;
            double t29297 = t29294*t29296;
            double t29298 = b1f*t29276;
            double t29299 = b3f*t29278;
            double t29300 = b4f*t29280*t29249;
            double t29301 = b2f*c*t29274;
            double t29302 = t29300+t29301+t29298+t29299;
            double t29303 = 1.0/t29302;
            double t29304 = t29303*t29288*(1.0/2.0);
            double t29305 = t29304+1.0;
            double t29306 = log(t29305);
            double t29307 = a1f*c*t29274;
            double t29308 = t29307+1.0;
            double t29309 = log(t29291);
            double t29320 = c0f*t29306*t29308*2.0;
            double t29321 = c0p*t29309*t29293*2.0;
            double t29310 = t29320-t29321;
            double t29311 = t29297+1.0;
            double t29312 = pow(t29311,4.0/3.0);
            double t29313 = -t29297+1.0;
            double t29314 = pow(t29313,4.0/3.0);
            double t29315 = t29312+t29314-2.0;
            double t29316 = 1.0/(t29273*t29273);
            double t29317 = t29316*t29294;
            double t29318 = t29317+t29296;
            double t29319 = 1.0/(t29273*t29273*t29273*t29273);
            double t29322 = t29295*t29295;
            double t29323 = 1.0/pow(t29273,5.0/3.0);
            double t29324 = 1.0/sqrt(t29275);
            double t29325 = 1.0/t29291;
            double t29326 = 1.0/(t29283*t29283);
            double t29327 = b4p*t29323*t29249*(2.0/3.0);
            double t29328 = b2p*c*t29284*(1.0/3.0);
            double t29329 = b1p*c*t29324*t29284*(1.0/6.0);
            double t29330 = b3p*c*t29284*t29276*(1.0/2.0);
            double t29331 = t29330+t29327+t29328+t29329;
            double t29332 = 1.0/(t29273*t29273*t29273*t29273*t29273);
            double t29333 = 1.0/d2fz0;
            double t29334 = 1.0/Aa;
            double t29335 = b1a*t29276;
            double t29336 = b3a*t29278;
            double t29337 = b4a*t29280*t29249;
            double t29338 = b2a*c*t29274;
            double t29339 = t29335+t29336+t29337+t29338;
            double t29340 = 1.0/t29339;
            double t29341 = t29340*t29334*(1.0/2.0);
            double t29342 = t29341+1.0;
            double t29343 = log(t29342);
            double t29344 = a1a*c*t29274;
            double t29345 = t29344+1.0;
            double t29346 = pow(t29311,1.0/3.0);
            double t29347 = t29318*t29346*(4.0/3.0);
            double t29348 = pow(t29313,1.0/3.0);
            double t29349 = t29347-t29318*t29348*(4.0/3.0);
            double t29350 = t29322*t29319;
            double t29351 = t29350-1.0;
            double t29352 = pow(2.0,1.0/3.0);
            double t29353 = t29352*2.0;
            double t29354 = t29353-2.0;
            double t29355 = a1f*c*t29245;
            double t29356 = t29355+1.0;
            double t29357 = b1f*t29247;
            double t29358 = b3f*t29248;
            double t29359 = b4f*t29250*t29249;
            double t29360 = b2f*c*t29245;
            double t29361 = t29360+t29357+t29358+t29359;
            double t29362 = 1.0/t29361;
            double t29363 = t29362*t29288*(1.0/2.0);
            double t29364 = t29363+1.0;
            double t29365 = 1.0/pow(rho_b[index],4.0/3.0);
            double t29366 = 1.0/pow(rho_b[index],5.0/3.0);
            double t29367 = 1.0/sqrt(t29246);
            double t29368 = log(t29364);
            double t29369 = 1.0/t29259;
            double t29370 = 1.0/(t29256*t29256);
            double t29371 = b4p*t29249*t29366*(2.0/3.0);
            double t29372 = b2p*c*t29365*(1.0/3.0);
            double t29373 = b1p*c*t29365*t29367*(1.0/6.0);
            double t29374 = b3p*c*t29247*t29365*(1.0/2.0);
            double t29375 = t29371+t29372+t29373+t29374;
            double t29376 = t29262*t29370*t29375*t29369;
            double t29377 = c0f*t29356*t29368*2.0;
            double t29378 = c0p*t29260*t29262*2.0;
            double t29379 = a1p*c*c0p*t29309*t29284*(2.0/3.0);
            double t29380 = 1.0/pow(rho_a[index],1.0/3.0);
            double t29381 = c*t29380;
            double t29382 = sqrt(t29381);
            double t29383 = pow(t29381,3.0/2.0);
            double t29384 = 1.0/pow(rho_a[index],2.0/3.0);
            double t29385 = b1p*t29382;
            double t29386 = b3p*t29383;
            double t29387 = b4p*t29249*t29384;
            double t29388 = b2p*c*t29380;
            double t29389 = t29385+t29386+t29387+t29388;
            double t29390 = 1.0/t29389;
            double t29391 = t29251*t29390*(1.0/2.0);
            double t29392 = t29391+1.0;
            double t29393 = log(t29392);
            double t29394 = a1p*c*t29380;
            double t29395 = t29394+1.0;
            double t29396 = c0p*t29393*t29395*2.0;
            double t29397 = t29377-t29378;
            double t29398 = t29310*t29322*t29315*t29319*t29287;
            double t29399 = Aa*t29315*t29333*t29351*t29343*t29345*t29287*2.0;
            double t29400 = gcab*t29267;
            double t29401 = t29400+1.0;
            double t29402 = 1.0/t29401;
            double t29403 = 1.0/pow(rho_b[index],1.1E1/3.0);
            double t29404 = t29272*t29268;
            double t29405 = gcab*t29267*2.0;
            double t29406 = t29404+t29405+1.0;
            double t29407 = 1.0/t29406;
            double t29408 = gx*gx;
            double t29409 = gamma_bb[index]*gx*t29263;
            double t29410 = t29409+1.0;
            double t29411 = 1.0/t29410;
            double t29412 = gamma_bb[index]*gx*t29263*2.0;
            double t29413 = t29264*t29408*t29266;
            double t29414 = t29412+t29413+1.0;
            double t29415 = 1.0/t29414;
            double t29416 = 1.0/pow(rho_b[index],1.9E1/3.0);
            double t29417 = 1.0/t29364;
            double t29418 = 1.0/(t29361*t29361);
            double t29419 = b4f*t29249*t29366*(2.0/3.0);
            double t29420 = b2f*c*t29365*(1.0/3.0);
            double t29421 = b1f*c*t29365*t29367*(1.0/6.0);
            double t29422 = b3f*c*t29247*t29365*(1.0/2.0);
            double t29423 = t29420+t29421+t29422+t29419;
            double t29424 = a1f*c*c0f*t29365*t29368*(2.0/3.0);
            double t29425 = a1p*c*c0p*t29260*t29365*(2.0/3.0);
            double t29426 = gamma_bb[index]*gcaa*t29263;
            double t29427 = t29426+1.0;
            double t29428 = 1.0/t29427;
            double t29429 = ccaa1*gamma_bb[index]*gcaa*t29263*t29428;
            double t29430 = gamma_bb[index]*gcaa*t29263*2.0;
            double t29431 = t29264*t29265*t29266;
            double t29432 = t29430+t29431+1.0;
            double t29433 = 1.0/t29432;
            double t29434 = ccaa2*t29433*t29264*t29265*t29266;
            double t29435 = ccaa0+t29434+t29429;
            double t29436 = t29354*t29287*t29397;
            double t29437 = t29436+t29378;
            v_rho_b_[index] = -(ccab0+ccab1*gcab*t29402*t29267+ccab2*t29272*t29407*t29268)*(t29321-t29378+t29398+ \
               t29399+rho_b[index]*(t29425-t29376+t29354*t29287*(t29424+t29376-t29423*t29417*t29418*t29356-a1p*c* \
               c0p*t29260*t29365*(2.0/3.0)))-t29273*(t29379-t29331*t29325*t29326*t29293+t29310*t29322*t29332*t29315* \
               t29287*4.0+t29310*t29322*t29319*t29349*t29287-t29322*t29315*t29319*t29287*(t29379-t29331*t29325*t29326* \
               t29293+(1.0/(t29302*t29302)*t29308*(b2f*c*t29284*(1.0/3.0)+b4f*t29323*t29249*(2.0/3.0)+b1f*c*t29324* \
               t29284*(1.0/6.0)+b3f*c*t29284*t29276*(1.0/2.0)))/t29305-a1f*c*c0f*t29306*t29284*(2.0/3.0))+t29310* \
               t29315*t29319*t29294*t29295*t29287*4.0+Aa*t29315*t29333*t29343*t29345*t29287*(t29322*t29332*4.0+t29319* \
               t29294*t29295*4.0)*2.0+Aa*t29333*t29351*t29343*t29345*t29349*t29287*2.0-(t29315*t29333*t29351*t29345* \
               1.0/(t29339*t29339)*t29287*(b2a*c*t29284*(1.0/3.0)+b4a*t29323*t29249*(2.0/3.0)+b1a*c*t29324*t29284* \
               (1.0/6.0)+b3a*c*t29284*t29276*(1.0/2.0)))/t29342+Aa*a1a*c*t29315*t29333*t29351*t29343*t29284*t29287* \
               (2.0/3.0))-t29354*t29287*t29397)-t29435*(t29378+t29354*t29287*(t29377-c0p*t29260*t29262*2.0))-(rho_b[index]* \
               t29437+rho_a[index]*(t29396-t29354*t29287*(t29396-c0f*log((t29288*(1.0/2.0))/(b1f*t29382+b3f*t29383+ \
               b2f*c*t29380+b4f*t29249*t29384)+1.0)*(a1f*c*t29380+1.0)*2.0))-t29273*(t29321+t29398+t29399))*(ccab1* \
               gamma_bb[index]*gcab*t29402*t29403*(4.0/3.0)-ccab2*1.0/(t29406*t29406)*t29272*t29268*(gamma_bb[index]* \
               gcab*t29403*(8.0/3.0)+gamma_bb[index]*t29403*t29267*t29268*(8.0/3.0))-ccab1*gamma_bb[index]*1.0/(t29401* \
               t29401)*t29403*t29267*t29268*(4.0/3.0)+ccab2*gamma_bb[index]*t29403*t29407*t29267*t29268*(8.0/3.0) \
               )+rho_b[index]*t29437*(ccaa1*gamma_bb[index]*gcaa*t29403*t29428*(8.0/3.0)+ccaa2*t29433*t29416*t29264* \
               t29265*(1.6E1/3.0)-ccaa1*t29416*t29264*t29265*1.0/(t29427*t29427)*(8.0/3.0)-ccaa2*1.0/(t29432*t29432) \
               *t29264*t29265*t29266*(gamma_bb[index]*gcaa*t29403*(1.6E1/3.0)+t29416*t29264*t29265*(1.6E1/3.0)))+ \
               c0*pow(rho_b[index],1.0/3.0)*(cx0+cx1*gamma_bb[index]*gx*t29411*t29263+cx2*t29415*t29264*t29408*t29266) \
               *(4.0/3.0)+rho_b[index]*t29435*(t29425-t29376+t29354*t29287*(t29424-t29425+t29376-t29423*t29417*t29418* \
               t29356))-c0*pow(rho_b[index],4.0/3.0)*(cx1*gamma_bb[index]*gx*t29411*t29403*(8.0/3.0)+cx2*t29415*t29416* \
               t29264*t29408*(1.6E1/3.0)-cx1*1.0/(t29410*t29410)*t29416*t29264*t29408*(8.0/3.0)-cx2*1.0/(t29414*t29414) \
               *t29264*t29408*t29266*(gamma_bb[index]*gx*t29403*(1.6E1/3.0)+t29416*t29264*t29408*(1.6E1/3.0)));
        } else if (rho_a[index] > cutoff_) {
            v_rho_b_[index] = 0.0;
        } else if (rho_b[index] > cutoff_) {
            double t31674 = 1.0/pow(rho_b[index],1.0/3.0);
            double t31675 = c*t31674;
            double t31676 = sqrt(t31675);
            double t31677 = pow(t31675,3.0/2.0);
            double t31678 = c*c;
            double t31679 = 1.0/pow(rho_b[index],2.0/3.0);
            double t31680 = 1.0/c0p;
            double t31681 = b1p*t31676;
            double t31682 = b3p*t31677;
            double t31683 = b4p*t31678*t31679;
            double t31684 = b2p*c*t31674;
            double t31685 = t31681+t31682+t31683+t31684;
            double t31686 = 1.0/t31685;
            double t31687 = t31680*t31686*(1.0/2.0);
            double t31688 = t31687+1.0;
            double t31689 = log(t31688);
            double t31690 = a1p*c*t31674;
            double t31691 = t31690+1.0;
            double t31692 = 1.0/pow(rho_b[index],8.0/3.0);
            double t31693 = gamma_bb[index]*gamma_bb[index];
            double t31694 = gcaa*gcaa;
            double t31695 = 1.0/pow(rho_b[index],1.6E1/3.0);
            double t31696 = gx*gx;
            double t31697 = gamma_bb[index]*gx*t31692;
            double t31698 = t31697+1.0;
            double t31699 = 1.0/t31698;
            double t31700 = gamma_bb[index]*gx*t31692*2.0;
            double t31701 = t31693*t31695*t31696;
            double t31702 = t31700+t31701+1.0;
            double t31703 = 1.0/t31702;
            double t31704 = 1.0/pow(rho_b[index],1.9E1/3.0);
            double t31705 = 1.0/pow(rho_b[index],1.1E1/3.0);
            double t31706 = pow(2.0,1.0/3.0);
            double t31707 = t31706*2.0;
            double t31708 = t31707-2.0;
            double t31709 = two_13*2.0;
            double t31710 = t31709-2.0;
            double t31711 = 1.0/t31710;
            double t31712 = a1f*c*t31674;
            double t31713 = t31712+1.0;
            double t31714 = 1.0/c0f;
            double t31715 = b1f*t31676;
            double t31716 = b3f*t31677;
            double t31717 = b4f*t31678*t31679;
            double t31718 = b2f*c*t31674;
            double t31719 = t31715+t31716+t31717+t31718;
            double t31720 = 1.0/t31719;
            double t31721 = t31720*t31714*(1.0/2.0);
            double t31722 = t31721+1.0;
            double t31723 = 1.0/pow(rho_b[index],4.0/3.0);
            double t31724 = 1.0/pow(rho_b[index],5.0/3.0);
            double t31725 = 1.0/sqrt(t31675);
            double t31726 = log(t31722);
            double t31727 = 1.0/t31688;
            double t31728 = 1.0/(t31685*t31685);
            double t31729 = b4p*t31724*t31678*(2.0/3.0);
            double t31730 = b2p*c*t31723*(1.0/3.0);
            double t31731 = b1p*c*t31723*t31725*(1.0/6.0);
            double t31732 = b3p*c*t31723*t31676*(1.0/2.0);
            double t31733 = t31730+t31731+t31732+t31729;
            double t31734 = t31733*t31691*t31727*t31728;
            double t31735 = gamma_bb[index]*gcaa*t31692;
            double t31736 = t31735+1.0;
            double t31737 = 1.0/t31736;
            double t31738 = ccaa1*gamma_bb[index]*gcaa*t31692*t31737;
            double t31739 = gamma_bb[index]*gcaa*t31692*2.0;
            double t31740 = t31693*t31694*t31695;
            double t31741 = t31740+t31739+1.0;
            double t31742 = 1.0/t31741;
            double t31743 = ccaa2*t31742*t31693*t31694*t31695;
            double t31744 = ccaa0+t31743+t31738;
            double t31745 = c0f*t31713*t31726*2.0;
            double t31746 = c0p*t31691*t31689*2.0;
            v_rho_b_[index] = -t31744*(t31746+t31711*t31708*(t31745-c0p*t31691*t31689*2.0))+rho_b[index]*t31744* \
               (-t31734+t31711*t31708*(t31734-(t31713*1.0/(t31719*t31719)*(b2f*c*t31723*(1.0/3.0)+b4f*t31724*t31678* \
               (2.0/3.0)+b1f*c*t31723*t31725*(1.0/6.0)+b3f*c*t31723*t31676*(1.0/2.0)))/t31722+a1f*c*c0f*t31723*t31726* \
               (2.0/3.0)-a1p*c*c0p*t31723*t31689*(2.0/3.0))+a1p*c*c0p*t31723*t31689*(2.0/3.0))+c0*pow(rho_b[index],1.0/ \
               3.0)*(cx0+cx1*gamma_bb[index]*gx*t31692*t31699+cx2*t31703*t31693*t31695*t31696)*(4.0/3.0)+rho_b[index]* \
               (t31746+t31711*t31708*(t31745-t31746))*(ccaa1*gamma_bb[index]*gcaa*t31705*t31737*(8.0/3.0)+ccaa2*t31704* \
               t31742*t31693*t31694*(1.6E1/3.0)-ccaa1*t31704*1.0/(t31736*t31736)*t31693*t31694*(8.0/3.0)-ccaa2*1.0/ \
               (t31741*t31741)*t31693*t31694*t31695*(gamma_bb[index]*gcaa*t31705*(1.6E1/3.0)+t31704*t31693*t31694* \
               (1.6E1/3.0)))-c0*pow(rho_b[index],4.0/3.0)*(cx1*gamma_bb[index]*gx*t31705*t31699*(8.0/3.0)+cx2*t31703* \
               t31704*t31693*t31696*(1.6E1/3.0)-cx1*t31704*t31693*t31696*1.0/(t31698*t31698)*(8.0/3.0)-cx2*1.0/(t31702* \
               t31702)*t31693*t31695*t31696*(gamma_bb[index]*gx*t31705*(1.6E1/3.0)+t31704*t31693*t31696*(1.6E1/3.0) \
               ));
        } else {
            v_rho_b_[index] = 0.0;
        } 

        if (is_gga_) {

            //V_gamma_aa
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t29439 = 1.0/pow(rho_a[index],1.0/3.0);
                double t29440 = c*t29439;
                double t29441 = sqrt(t29440);
                double t29442 = pow(t29440,3.0/2.0);
                double t29443 = c*c;
                double t29444 = 1.0/pow(rho_a[index],2.0/3.0);
                double t29445 = 1.0/c0p;
                double t29446 = b1p*t29441;
                double t29447 = b3p*t29442;
                double t29448 = b4p*t29443*t29444;
                double t29449 = b2p*c*t29439;
                double t29450 = t29446+t29447+t29448+t29449;
                double t29451 = 1.0/t29450;
                double t29452 = t29451*t29445*(1.0/2.0);
                double t29453 = t29452+1.0;
                double t29454 = log(t29453);
                double t29455 = a1p*c*t29439;
                double t29456 = t29455+1.0;
                double t29457 = pow(2.0,1.0/3.0);
                double t29458 = t29457*2.0;
                double t29459 = t29458-2.0;
                double t29460 = two_13*2.0;
                double t29461 = t29460-2.0;
                double t29462 = 1.0/t29461;
                double t29463 = 1.0/c0f;
                double t29464 = 1.0/pow(rho_b[index],1.0/3.0);
                double t29465 = c*t29464;
                double t29466 = sqrt(t29465);
                double t29467 = pow(t29465,3.0/2.0);
                double t29468 = 1.0/pow(rho_b[index],2.0/3.0);
                double t29469 = b1p*t29466;
                double t29470 = b3p*t29467;
                double t29471 = b4p*t29443*t29468;
                double t29472 = b2p*c*t29464;
                double t29473 = t29470+t29471+t29472+t29469;
                double t29474 = 1.0/t29473;
                double t29475 = t29445*t29474*(1.0/2.0);
                double t29476 = t29475+1.0;
                double t29477 = log(t29476);
                double t29478 = a1p*c*t29464;
                double t29479 = t29478+1.0;
                double t29480 = c0p*t29477*t29479*2.0;
                double t29481 = rho_a[index]+rho_b[index];
                double t29482 = 1.0/pow(t29481,1.0/3.0);
                double t29483 = c*t29482;
                double t29484 = sqrt(t29483);
                double t29485 = pow(t29483,3.0/2.0);
                double t29486 = 1.0/pow(t29481,2.0/3.0);
                double t29487 = b1p*t29484;
                double t29488 = b3p*t29485;
                double t29489 = b4p*t29443*t29486;
                double t29490 = b2p*c*t29482;
                double t29491 = t29490+t29487+t29488+t29489;
                double t29492 = 1.0/t29491;
                double t29493 = t29445*t29492*(1.0/2.0);
                double t29494 = t29493+1.0;
                double t29495 = log(t29494);
                double t29496 = a1p*c*t29482;
                double t29497 = t29496+1.0;
                double t29498 = c0p*t29495*t29497*2.0;
                double t29499 = rho_a[index]-rho_b[index];
                double t29500 = t29499*t29499;
                double t29501 = 1.0/t29481;
                double t29502 = t29501*t29499;
                double t29503 = 1.0/(t29481*t29481*t29481*t29481);
                double t29504 = t29500*t29500;
                double t29505 = t29502+1.0;
                double t29506 = pow(t29505,4.0/3.0);
                double t29507 = -t29502+1.0;
                double t29508 = pow(t29507,4.0/3.0);
                double t29509 = t29506+t29508-2.0;
                double t29510 = 1.0/pow(rho_a[index],8.0/3.0);
                double t29511 = gamma_aa[index]*t29510*(1.0/2.0);
                double t29512 = 1.0/pow(rho_b[index],8.0/3.0);
                double t29513 = gamma_bb[index]*t29512*(1.0/2.0);
                double t29514 = t29511+t29513;
                double t29515 = gcab*t29514;
                double t29516 = t29515+1.0;
                double t29517 = gcab*gcab;
                double t29518 = t29514*t29514;
                double t29519 = t29517*t29518;
                double t29520 = gcab*t29514*2.0;
                double t29521 = t29520+t29519+1.0;
                double t29522 = c0p*t29454*t29456*2.0;
                double t29523 = gx*gx;
                double t29524 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t29525 = gamma_aa[index]*gx*t29510;
                double t29526 = t29525+1.0;
                double t29527 = gamma_aa[index]*gamma_aa[index];
                double t29528 = gamma_aa[index]*gx*t29510*2.0;
                double t29529 = t29523*t29524*t29527;
                double t29530 = t29528+t29529+1.0;
                double t29531 = b1f*t29441;
                double t29532 = b3f*t29442;
                double t29533 = b4f*t29443*t29444;
                double t29534 = b2f*c*t29439;
                double t29535 = t29531+t29532+t29533+t29534;
                double t29536 = 1.0/t29535;
                double t29537 = t29463*t29536*(1.0/2.0);
                double t29538 = t29537+1.0;
                double t29539 = log(t29538);
                double t29540 = a1f*c*t29439;
                double t29541 = t29540+1.0;
                double t29542 = t29522-c0f*t29541*t29539*2.0;
                double t29543 = t29522-t29542*t29462*t29459;
                double t29544 = gcaa*gcaa;
                double t29545 = gamma_aa[index]*gcaa*t29510;
                double t29546 = t29545+1.0;
                double t29547 = gamma_aa[index]*gcaa*t29510*2.0;
                double t29548 = t29524*t29544*t29527;
                double t29549 = t29547+t29548+1.0;
                v_gamma_aa_[index] = (rho_a[index]*t29543+rho_b[index]*(t29480-t29462*t29459*(t29480-c0f*log((t29463* \
                   (1.0/2.0))/(b1f*t29466+b3f*t29467+b2f*c*t29464+b4f*t29443*t29468)+1.0)*(a1f*c*t29464+1.0)*2.0))-t29481* \
                   (t29498-t29503*t29504*t29462*t29509*(t29498-c0f*log((t29463*(1.0/2.0))/(b1f*t29484+b3f*t29485+b2f* \
                   c*t29482+b4f*t29443*t29486)+1.0)*(a1f*c*t29482+1.0)*2.0)+(Aa*t29462*t29509*log((1.0/2.0)/(Aa*(b1a* \
                   t29484+b3a*t29485+b2a*c*t29482+b4a*t29443*t29486))+1.0)*(t29503*t29504-1.0)*(a1a*c*t29482+1.0)*2.0) \
                   /d2fz0))*((ccab1*gcab*t29510*(1.0/2.0))/t29516-ccab2*1.0/(t29521*t29521)*t29517*t29518*(gcab*t29510+ \
                   t29510*t29514*t29517)+(ccab2*t29510*t29514*t29517)/t29521-ccab1*t29510*t29514*1.0/(t29516*t29516)* \
                   t29517*(1.0/2.0))-rho_a[index]*t29543*((ccaa1*gcaa*t29510)/t29546-ccaa1*gamma_aa[index]*t29524*t29544* \
                   1.0/(t29546*t29546)+(ccaa2*gamma_aa[index]*t29524*t29544*2.0)/t29549-ccaa2*t29524*t29544*t29527*1.0/ \
                   (t29549*t29549)*(gcaa*t29510*2.0+gamma_aa[index]*t29524*t29544*2.0))+c0*pow(rho_a[index],4.0/3.0)* \
                   ((cx1*gx*t29510)/t29526-cx1*gamma_aa[index]*t29523*t29524*1.0/(t29526*t29526)+(cx2*gamma_aa[index]* \
                   t29523*t29524*2.0)/t29530-cx2*1.0/(t29530*t29530)*t29523*t29524*t29527*(gx*t29510*2.0+gamma_aa[index]* \
                   t29523*t29524*2.0));
            } else if (rho_a[index] > cutoff_) {
                double t32159 = 1.0/pow(rho_a[index],8.0/3.0);
                double t32160 = gx*gx;
                double t32161 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t32162 = gamma_aa[index]*gx*t32159;
                double t32163 = t32162+1.0;
                double t32164 = gamma_aa[index]*gamma_aa[index];
                double t32165 = gamma_aa[index]*gx*t32159*2.0;
                double t32166 = t32160*t32161*t32164;
                double t32167 = t32165+t32166+1.0;
                double t32168 = 1.0/pow(rho_a[index],1.0/3.0);
                double t32169 = c*t32168;
                double t32170 = sqrt(t32169);
                double t32171 = pow(t32169,3.0/2.0);
                double t32172 = c*c;
                double t32173 = 1.0/pow(rho_a[index],2.0/3.0);
                double t32174 = 1.0/c0p;
                double t32175 = b1p*t32170;
                double t32176 = b3p*t32171;
                double t32177 = b4p*t32172*t32173;
                double t32178 = b2p*c*t32168;
                double t32179 = t32175+t32176+t32177+t32178;
                double t32180 = 1.0/t32179;
                double t32181 = t32180*t32174*(1.0/2.0);
                double t32182 = t32181+1.0;
                double t32183 = log(t32182);
                double t32184 = a1p*c*t32168;
                double t32185 = t32184+1.0;
                double t32186 = gcaa*gcaa;
                double t32187 = gamma_aa[index]*gcaa*t32159;
                double t32188 = t32187+1.0;
                double t32189 = gamma_aa[index]*gcaa*t32159*2.0;
                double t32190 = t32161*t32164*t32186;
                double t32191 = t32190+t32189+1.0;
                v_gamma_aa_[index] = c0*pow(rho_a[index],4.0/3.0)*((cx1*gx*t32159)/t32163-cx1*gamma_aa[index]*t32160* \
                   t32161*1.0/(t32163*t32163)+(cx2*gamma_aa[index]*t32160*t32161*2.0)/t32167-cx2*t32160*t32161*t32164* \
                   1.0/(t32167*t32167)*(gx*t32159*2.0+gamma_aa[index]*t32160*t32161*2.0))-rho_a[index]*(((pow(2.0,1.0/ \
                   3.0)*2.0-2.0)*(c0f*log((1.0/2.0)/(c0f*(b1f*t32170+b3f*t32171+b2f*c*t32168+b4f*t32172*t32173))+1.0) \
                   *(a1f*c*t32168+1.0)*2.0-c0p*t32183*t32185*2.0))/(two_13*2.0-2.0)+c0p*t32183*t32185*2.0)*((ccaa1*gcaa* \
                   t32159)/t32188+(ccaa2*gamma_aa[index]*t32161*t32186*2.0)/t32191-ccaa1*gamma_aa[index]*t32161*t32186* \
                   1.0/(t32188*t32188)-ccaa2*t32161*t32164*1.0/(t32191*t32191)*t32186*(gcaa*t32159*2.0+gamma_aa[index]* \
                   t32161*t32186*2.0));
            } else if (rho_b[index] > cutoff_) {
                v_gamma_aa_[index] = 0.0;
            } else {
                v_gamma_aa_[index] = 0.0;
            } 

            //V_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_ab_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_ab_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_ab_[index] = 0.0;
            } else {
                v_gamma_ab_[index] = 0.0;
            } 

            //V_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t29552 = 1.0/pow(rho_a[index],1.0/3.0);
                double t29553 = c*t29552;
                double t29554 = sqrt(t29553);
                double t29555 = pow(t29553,3.0/2.0);
                double t29556 = c*c;
                double t29557 = 1.0/pow(rho_a[index],2.0/3.0);
                double t29558 = 1.0/c0p;
                double t29559 = b1p*t29554;
                double t29560 = b3p*t29555;
                double t29561 = b4p*t29556*t29557;
                double t29562 = b2p*c*t29552;
                double t29563 = t29560+t29561+t29562+t29559;
                double t29564 = 1.0/t29563;
                double t29565 = t29564*t29558*(1.0/2.0);
                double t29566 = t29565+1.0;
                double t29567 = log(t29566);
                double t29568 = a1p*c*t29552;
                double t29569 = t29568+1.0;
                double t29570 = pow(2.0,1.0/3.0);
                double t29571 = t29570*2.0;
                double t29572 = t29571-2.0;
                double t29573 = two_13*2.0;
                double t29574 = t29573-2.0;
                double t29575 = 1.0/t29574;
                double t29576 = 1.0/c0f;
                double t29577 = 1.0/pow(rho_b[index],1.0/3.0);
                double t29578 = c*t29577;
                double t29579 = sqrt(t29578);
                double t29580 = pow(t29578,3.0/2.0);
                double t29581 = 1.0/pow(rho_b[index],2.0/3.0);
                double t29582 = b1p*t29579;
                double t29583 = b3p*t29580;
                double t29584 = b4p*t29581*t29556;
                double t29585 = b2p*c*t29577;
                double t29586 = t29582+t29583+t29584+t29585;
                double t29587 = 1.0/t29586;
                double t29588 = t29558*t29587*(1.0/2.0);
                double t29589 = t29588+1.0;
                double t29590 = log(t29589);
                double t29591 = a1p*c*t29577;
                double t29592 = t29591+1.0;
                double t29593 = c0p*t29590*t29592*2.0;
                double t29594 = rho_a[index]+rho_b[index];
                double t29595 = 1.0/pow(t29594,1.0/3.0);
                double t29596 = c*t29595;
                double t29597 = sqrt(t29596);
                double t29598 = pow(t29596,3.0/2.0);
                double t29599 = 1.0/pow(t29594,2.0/3.0);
                double t29600 = b1p*t29597;
                double t29601 = b3p*t29598;
                double t29602 = b4p*t29556*t29599;
                double t29603 = b2p*c*t29595;
                double t29604 = t29600+t29601+t29602+t29603;
                double t29605 = 1.0/t29604;
                double t29606 = t29605*t29558*(1.0/2.0);
                double t29607 = t29606+1.0;
                double t29608 = log(t29607);
                double t29609 = a1p*c*t29595;
                double t29610 = t29609+1.0;
                double t29611 = c0p*t29610*t29608*2.0;
                double t29612 = rho_a[index]-rho_b[index];
                double t29613 = t29612*t29612;
                double t29614 = 1.0/t29594;
                double t29615 = t29612*t29614;
                double t29616 = 1.0/(t29594*t29594*t29594*t29594);
                double t29617 = t29613*t29613;
                double t29618 = t29615+1.0;
                double t29619 = pow(t29618,4.0/3.0);
                double t29620 = -t29615+1.0;
                double t29621 = pow(t29620,4.0/3.0);
                double t29622 = t29621+t29619-2.0;
                double t29623 = 1.0/pow(rho_b[index],8.0/3.0);
                double t29624 = 1.0/pow(rho_a[index],8.0/3.0);
                double t29625 = gamma_aa[index]*t29624*(1.0/2.0);
                double t29626 = gamma_bb[index]*t29623*(1.0/2.0);
                double t29627 = t29625+t29626;
                double t29628 = gcab*t29627;
                double t29629 = t29628+1.0;
                double t29630 = gcab*gcab;
                double t29631 = t29627*t29627;
                double t29632 = t29630*t29631;
                double t29633 = gcab*t29627*2.0;
                double t29634 = t29632+t29633+1.0;
                double t29635 = c0p*t29567*t29569*2.0;
                double t29636 = gx*gx;
                double t29637 = 1.0/pow(rho_b[index],1.6E1/3.0);
                double t29638 = gamma_bb[index]*gx*t29623;
                double t29639 = t29638+1.0;
                double t29640 = gamma_bb[index]*gamma_bb[index];
                double t29641 = gamma_bb[index]*gx*t29623*2.0;
                double t29642 = t29640*t29636*t29637;
                double t29643 = t29641+t29642+1.0;
                double t29644 = b1f*t29579;
                double t29645 = b3f*t29580;
                double t29646 = b4f*t29581*t29556;
                double t29647 = b2f*c*t29577;
                double t29648 = t29644+t29645+t29646+t29647;
                double t29649 = 1.0/t29648;
                double t29650 = t29576*t29649*(1.0/2.0);
                double t29651 = t29650+1.0;
                double t29652 = log(t29651);
                double t29653 = a1f*c*t29577;
                double t29654 = t29653+1.0;
                double t29655 = t29593-c0f*t29652*t29654*2.0;
                double t29656 = t29593-t29572*t29655*t29575;
                double t29657 = gcaa*gcaa;
                double t29658 = gamma_bb[index]*gcaa*t29623;
                double t29659 = t29658+1.0;
                double t29660 = gamma_bb[index]*gcaa*t29623*2.0;
                double t29661 = t29640*t29637*t29657;
                double t29662 = t29660+t29661+1.0;
                v_gamma_bb_[index] = (rho_b[index]*t29656+rho_a[index]*(t29635-t29572*t29575*(t29635-c0f*log((t29576* \
                   (1.0/2.0))/(b1f*t29554+b3f*t29555+b2f*c*t29552+b4f*t29556*t29557)+1.0)*(a1f*c*t29552+1.0)*2.0))-t29594* \
                   (t29611-t29622*t29616*t29617*t29575*(t29611-c0f*log((t29576*(1.0/2.0))/(b1f*t29597+b3f*t29598+b2f* \
                   c*t29595+b4f*t29556*t29599)+1.0)*(a1f*c*t29595+1.0)*2.0)+(Aa*t29622*t29575*log((1.0/2.0)/(Aa*(b1a* \
                   t29597+b3a*t29598+b2a*c*t29595+b4a*t29556*t29599))+1.0)*(t29616*t29617-1.0)*(a1a*c*t29595+1.0)*2.0) \
                   /d2fz0))*((ccab1*gcab*t29623*(1.0/2.0))/t29629-ccab2*t29630*t29631*1.0/(t29634*t29634)*(gcab*t29623+ \
                   t29630*t29623*t29627)+(ccab2*t29630*t29623*t29627)/t29634-ccab1*t29630*t29623*t29627*1.0/(t29629*t29629) \
                   *(1.0/2.0))-rho_b[index]*t29656*((ccaa1*gcaa*t29623)/t29659+(ccaa2*gamma_bb[index]*t29637*t29657*2.0) \
                   /t29662-ccaa1*gamma_bb[index]*t29637*t29657*1.0/(t29659*t29659)-ccaa2*t29640*1.0/(t29662*t29662)*t29637* \
                   t29657*(gcaa*t29623*2.0+gamma_bb[index]*t29637*t29657*2.0))+c0*pow(rho_b[index],4.0/3.0)*((cx1*gx* \
                   t29623)/t29639-cx1*gamma_bb[index]*t29636*t29637*1.0/(t29639*t29639)+(cx2*gamma_bb[index]*t29636*t29637* \
                   2.0)/t29643-cx2*t29640*1.0/(t29643*t29643)*t29636*t29637*(gx*t29623*2.0+gamma_bb[index]*t29636*t29637* \
                   2.0));
            } else if (rho_a[index] > cutoff_) {
                v_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                double t31750 = 1.0/pow(rho_b[index],8.0/3.0);
                double t31751 = gx*gx;
                double t31752 = 1.0/pow(rho_b[index],1.6E1/3.0);
                double t31753 = gamma_bb[index]*gx*t31750;
                double t31754 = t31753+1.0;
                double t31755 = gamma_bb[index]*gamma_bb[index];
                double t31756 = gamma_bb[index]*gx*t31750*2.0;
                double t31757 = t31751*t31752*t31755;
                double t31758 = t31756+t31757+1.0;
                double t31759 = 1.0/pow(rho_b[index],1.0/3.0);
                double t31760 = c*t31759;
                double t31761 = sqrt(t31760);
                double t31762 = pow(t31760,3.0/2.0);
                double t31763 = c*c;
                double t31764 = 1.0/pow(rho_b[index],2.0/3.0);
                double t31765 = 1.0/c0p;
                double t31766 = b1p*t31761;
                double t31767 = b3p*t31762;
                double t31768 = b4p*t31763*t31764;
                double t31769 = b2p*c*t31759;
                double t31770 = t31766+t31767+t31768+t31769;
                double t31771 = 1.0/t31770;
                double t31772 = t31771*t31765*(1.0/2.0);
                double t31773 = t31772+1.0;
                double t31774 = log(t31773);
                double t31775 = a1p*c*t31759;
                double t31776 = t31775+1.0;
                double t31777 = gcaa*gcaa;
                double t31778 = gamma_bb[index]*gcaa*t31750;
                double t31779 = t31778+1.0;
                double t31780 = gamma_bb[index]*gcaa*t31750*2.0;
                double t31781 = t31752*t31755*t31777;
                double t31782 = t31780+t31781+1.0;
                v_gamma_bb_[index] = c0*pow(rho_b[index],4.0/3.0)*((cx1*gx*t31750)/t31754-cx1*gamma_bb[index]*t31751* \
                   t31752*1.0/(t31754*t31754)+(cx2*gamma_bb[index]*t31751*t31752*2.0)/t31758-cx2*t31751*t31752*t31755* \
                   1.0/(t31758*t31758)*(gx*t31750*2.0+gamma_bb[index]*t31751*t31752*2.0))-rho_b[index]*(((pow(2.0,1.0/ \
                   3.0)*2.0-2.0)*(c0f*log((1.0/2.0)/(c0f*(b1f*t31761+b3f*t31762+b2f*c*t31759+b4f*t31763*t31764))+1.0) \
                   *(a1f*c*t31759+1.0)*2.0-c0p*t31774*t31776*2.0))/(two_13*2.0-2.0)+c0p*t31774*t31776*2.0)*((ccaa1*gcaa* \
                   t31750)/t31779+(ccaa2*gamma_bb[index]*t31752*t31777*2.0)/t31782-ccaa1*gamma_bb[index]*t31752*t31777* \
                   1.0/(t31779*t31779)-ccaa2*t31752*t31755*1.0/(t31782*t31782)*t31777*(gcaa*t31750*2.0+gamma_bb[index]* \
                   t31752*t31777*2.0));
            } else {
                v_gamma_bb_[index] = 0.0;
            } 
        }
        if (is_meta_) {

            //V_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_tau_a_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_tau_a_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_tau_a_[index] = 0.0;
            } else {
                v_tau_a_[index] = 0.0;
            } 

            //V_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_tau_b_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_tau_b_[index] = 0.0;
            } else {
                v_tau_b_[index] = 0.0;
            } 
        }
    }
    //Second Partials
    for (int index = 0; index < ntrue && deriv_ >= 2; index++) {

        //V_rho_a_rho_a
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t29666 = 1.0/pow(rho_a[index],1.0/3.0);
            double t29667 = c*t29666;
            double t29668 = sqrt(t29667);
            double t29669 = pow(t29667,3.0/2.0);
            double t29670 = c*c;
            double t29671 = 1.0/pow(rho_a[index],2.0/3.0);
            double t29672 = 1.0/c0p;
            double t29673 = b1p*t29668;
            double t29674 = b3p*t29669;
            double t29675 = b4p*t29670*t29671;
            double t29676 = b2p*c*t29666;
            double t29677 = t29673+t29674+t29675+t29676;
            double t29678 = 1.0/t29677;
            double t29679 = t29672*t29678*(1.0/2.0);
            double t29680 = t29679+1.0;
            double t29681 = log(t29680);
            double t29682 = a1p*c*t29666;
            double t29683 = t29682+1.0;
            double t29684 = 1.0/pow(rho_a[index],8.0/3.0);
            double t29685 = gamma_aa[index]*gamma_aa[index];
            double t29686 = gcaa*gcaa;
            double t29687 = 1.0/pow(rho_a[index],1.9E1/3.0);
            double t29688 = gamma_aa[index]*gcaa*t29684;
            double t29689 = t29688+1.0;
            double t29690 = 1.0/pow(rho_a[index],1.6E1/3.0);
            double t29691 = 1.0/pow(rho_a[index],1.1E1/3.0);
            double t29692 = gamma_aa[index]*gcaa*t29684*2.0;
            double t29693 = t29690*t29685*t29686;
            double t29694 = t29692+t29693+1.0;
            double t29697 = gamma_aa[index]*t29684*(1.0/2.0);
            double t29698 = 1.0/pow(rho_b[index],8.0/3.0);
            double t29699 = gamma_bb[index]*t29698*(1.0/2.0);
            double t29695 = t29697+t29699;
            double t29696 = gcab*gcab;
            double t29700 = t29695*t29695;
            double t29701 = rho_a[index]+rho_b[index];
            double t29702 = 1.0/pow(t29701,1.0/3.0);
            double t29703 = c*t29702;
            double t29704 = sqrt(t29703);
            double t29705 = b1p*t29704;
            double t29706 = pow(t29703,3.0/2.0);
            double t29707 = b3p*t29706;
            double t29708 = 1.0/pow(t29701,2.0/3.0);
            double t29709 = b4p*t29670*t29708;
            double t29710 = b2p*c*t29702;
            double t29711 = t29710+t29705+t29707+t29709;
            double t29712 = 1.0/pow(t29701,7.0/3.0);
            double t29713 = 1.0/pow(t29701,8.0/3.0);
            double t29714 = 1.0/sqrt(t29703);
            double t29715 = a1p*c*t29702;
            double t29716 = t29715+1.0;
            double t29717 = 1.0/t29711;
            double t29718 = t29672*t29717*(1.0/2.0);
            double t29719 = t29718+1.0;
            double t29720 = 1.0/t29719;
            double t29721 = 1.0/pow(t29701,4.0/3.0);
            double t29761 = 1.0/pow(t29701,5.0/3.0);
            double t29763 = b4p*t29670*t29761*(2.0/3.0);
            double t29764 = b2p*c*t29721*(1.0/3.0);
            double t29765 = b1p*c*t29721*t29714*(1.0/6.0);
            double t29766 = b3p*c*t29721*t29704*(1.0/2.0);
            double t29722 = t29763+t29764+t29765+t29766;
            double t29723 = two_13*2.0;
            double t29724 = t29723-2.0;
            double t29725 = 1.0/t29724;
            double t29726 = 1.0/c0f;
            double t29727 = rho_a[index]-rho_b[index];
            double t29728 = 1.0/t29701;
            double t29729 = t29727*t29728;
            double t29730 = b1f*t29704;
            double t29731 = b3f*t29706;
            double t29732 = b4f*t29670*t29708;
            double t29733 = b2f*c*t29702;
            double t29734 = t29730+t29731+t29732+t29733;
            double t29735 = 1.0/t29734;
            double t29736 = t29726*t29735*(1.0/2.0);
            double t29737 = t29736+1.0;
            double t29738 = log(t29737);
            double t29739 = a1f*c*t29702;
            double t29740 = t29739+1.0;
            double t29741 = log(t29719);
            double t29749 = c0f*t29740*t29738*2.0;
            double t29750 = c0p*t29741*t29716*2.0;
            double t29742 = -t29750+t29749;
            double t29743 = t29727*t29727;
            double t29744 = t29729+1.0;
            double t29745 = pow(t29744,4.0/3.0);
            double t29746 = -t29729+1.0;
            double t29747 = pow(t29746,4.0/3.0);
            double t29748 = t29745+t29747-2.0;
            double t29751 = 1.0/(t29701*t29701);
            double t29755 = t29751*t29727;
            double t29752 = t29728-t29755;
            double t29753 = 1.0/(t29701*t29701*t29701*t29701);
            double t29754 = pow(t29744,1.0/3.0);
            double t29756 = t29752*t29754*(4.0/3.0);
            double t29757 = pow(t29746,1.0/3.0);
            double t29789 = t29752*t29757*(4.0/3.0);
            double t29758 = t29756-t29789;
            double t29759 = 1.0/(t29701*t29701*t29701*t29701*t29701);
            double t29760 = t29743*t29743;
            double t29762 = 1.0/(t29711*t29711);
            double t29767 = 1.0/t29737;
            double t29768 = 1.0/(t29734*t29734);
            double t29769 = b4f*t29670*t29761*(2.0/3.0);
            double t29770 = b2f*c*t29721*(1.0/3.0);
            double t29771 = b1f*c*t29721*t29714*(1.0/6.0);
            double t29772 = b3f*c*t29721*t29704*(1.0/2.0);
            double t29773 = t29770+t29771+t29772+t29769;
            double t29774 = t29720*t29722*t29716*t29762;
            double t29775 = a1f*c*c0f*t29721*t29738*(2.0/3.0);
            double t29776 = t29722*t29722;
            double t29777 = 1.0/pow(t29703,3.0/2.0);
            double t29778 = b4p*t29713*t29670*(1.0E1/9.0);
            double t29779 = b2p*c*t29712*(4.0/9.0);
            double t29780 = b1p*c*t29712*t29714*(2.0/9.0);
            double t29781 = b3p*c*t29712*t29704*(2.0/3.0);
            double t29782 = b3p*t29713*t29714*t29670*(1.0/1.2E1);
            double t29783 = t29780+t29781+t29782+t29778+t29779-b1p*t29713*t29670*t29777*(1.0/3.6E1);
            double t29784 = 1.0/(t29711*t29711*t29711);
            double t29785 = t29720*t29716*t29784*t29776*2.0;
            double t29786 = t29773*t29773;
            double t29787 = 1.0/(t29719*t29719);
            double t29788 = 1.0/(t29711*t29711*t29711*t29711);
            double t29879 = t29740*t29773*t29767*t29768;
            double t29880 = a1p*c*c0p*t29721*t29741*(2.0/3.0);
            double t29790 = -t29880+t29774+t29775-t29879;
            double t29791 = t29751*2.0;
            double t29792 = 1.0/(t29701*t29701*t29701);
            double t29810 = t29727*t29792*2.0;
            double t29793 = -t29810+t29791;
            double t29794 = t29752*t29752;
            double t29795 = a1p*c*c0p*t29712*t29741*(8.0/9.0);
            double t29796 = 1.0/(t29701*t29701*t29701*t29701*t29701*t29701);
            double t29797 = 1.0/d2fz0;
            double t29798 = 1.0/Aa;
            double t29799 = b1a*t29704;
            double t29800 = b3a*t29706;
            double t29801 = b4a*t29670*t29708;
            double t29802 = b2a*c*t29702;
            double t29803 = t29800+t29801+t29802+t29799;
            double t29804 = 1.0/t29803;
            double t29805 = t29804*t29798*(1.0/2.0);
            double t29806 = t29805+1.0;
            double t29807 = log(t29806);
            double t29808 = a1a*c*t29702;
            double t29809 = t29808+1.0;
            double t29811 = t29757*t29793*(4.0/3.0);
            double t29812 = 1.0/pow(t29744,2.0/3.0);
            double t29813 = t29812*t29794*(4.0/9.0);
            double t29814 = 1.0/pow(t29746,2.0/3.0);
            double t29815 = t29814*t29794*(4.0/9.0);
            double t29816 = t29811+t29813+t29815-t29754*t29793*(4.0/3.0);
            double t29817 = t29760*t29759*4.0;
            double t29829 = t29743*t29753*t29727*4.0;
            double t29818 = t29817-t29829;
            double t29819 = 1.0/t29806;
            double t29820 = t29760*t29753;
            double t29821 = t29820-1.0;
            double t29822 = 1.0/(t29803*t29803);
            double t29823 = b4a*t29670*t29761*(2.0/3.0);
            double t29824 = b2a*c*t29721*(1.0/3.0);
            double t29825 = b1a*c*t29721*t29714*(1.0/6.0);
            double t29826 = b3a*c*t29721*t29704*(1.0/2.0);
            double t29827 = t29823+t29824+t29825+t29826;
            double t29828 = t29827*t29827;
            double t29830 = t29720*t29716*t29762*t29783;
            double t29831 = t29716*t29672*t29776*t29787*t29788*(1.0/2.0);
            double t29832 = a1p*c*t29720*t29721*t29722*t29762*(2.0/3.0);
            double t29833 = pow(2.0,1.0/3.0);
            double t29834 = t29833*2.0;
            double t29835 = t29834-2.0;
            double t29836 = a1f*c*t29666;
            double t29837 = t29836+1.0;
            double t29838 = b1f*t29668;
            double t29839 = b3f*t29669;
            double t29840 = b4f*t29670*t29671;
            double t29841 = b2f*c*t29666;
            double t29842 = t29840+t29841+t29838+t29839;
            double t29843 = 1.0/t29842;
            double t29844 = t29726*t29843*(1.0/2.0);
            double t29845 = t29844+1.0;
            double t29846 = 1.0/pow(rho_a[index],4.0/3.0);
            double t29848 = 1.0/pow(rho_a[index],5.0/3.0);
            double t29849 = 1.0/sqrt(t29667);
            double t29855 = b4f*t29670*t29848*(2.0/3.0);
            double t29856 = b2f*c*t29846*(1.0/3.0);
            double t29857 = b1f*c*t29846*t29849*(1.0/6.0);
            double t29858 = b3f*c*t29846*t29668*(1.0/2.0);
            double t29847 = t29855+t29856+t29857+t29858;
            double t29860 = b4p*t29670*t29848*(2.0/3.0);
            double t29861 = b2p*c*t29846*(1.0/3.0);
            double t29862 = b1p*c*t29846*t29849*(1.0/6.0);
            double t29863 = b3p*c*t29846*t29668*(1.0/2.0);
            double t29850 = t29860+t29861+t29862+t29863;
            double t29851 = 1.0/t29845;
            double t29852 = 1.0/pow(rho_a[index],7.0/3.0);
            double t29853 = 1.0/t29680;
            double t29854 = 1.0/pow(t29667,3.0/2.0);
            double t29859 = t29847*t29847;
            double t29864 = t29850*t29850;
            double t29865 = log(t29845);
            double t29866 = 1.0/(t29842*t29842);
            double t29867 = 1.0/(t29677*t29677);
            double t29868 = 1.0/(t29677*t29677*t29677);
            double t29869 = t29853*t29683*t29864*t29868*2.0;
            double t29870 = b4p*t29670*t29684*(1.0E1/9.0);
            double t29871 = b2p*c*t29852*(4.0/9.0);
            double t29872 = b3p*t29670*t29684*t29849*(1.0/1.2E1);
            double t29873 = b1p*c*t29852*t29849*(2.0/9.0);
            double t29874 = b3p*c*t29852*t29668*(2.0/3.0);
            double t29950 = b1p*t29670*t29854*t29684*(1.0/3.6E1);
            double t29875 = -t29950+t29870+t29871+t29872+t29873+t29874;
            double t29876 = 1.0/(t29680*t29680);
            double t29877 = 1.0/(t29677*t29677*t29677*t29677);
            double t29878 = a1p*c*c0p*t29681*t29852*(8.0/9.0);
            double t29881 = gcab*t29695;
            double t29882 = t29881+1.0;
            double t29883 = 1.0/t29882;
            double t29884 = t29700*t29696;
            double t29885 = gcab*t29695*2.0;
            double t29886 = t29884+t29885+1.0;
            double t29887 = 1.0/t29886;
            double t29888 = t29880-t29774-t29775+t29879;
            double t29889 = t29850*t29853*t29683*t29867;
            double t29890 = a1f*c*c0f*t29846*t29865*(2.0/3.0);
            double t29892 = a1p*c*c0p*t29681*t29846*(2.0/3.0);
            double t29895 = t29851*t29837*t29847*t29866;
            double t29891 = t29890-t29892-t29895+t29889;
            double t29893 = c0f*t29837*t29865*2.0;
            double t29894 = c0p*t29681*t29683*2.0;
            double t29896 = t29725*t29835*t29891;
            double t29897 = 1.0/t29689;
            double t29898 = 1.0/t29694;
            double t29899 = t29893-t29894;
            double t29900 = 1.0/pow(rho_b[index],1.0/3.0);
            double t29901 = c*t29900;
            double t29902 = sqrt(t29901);
            double t29903 = pow(t29901,3.0/2.0);
            double t29904 = 1.0/pow(rho_b[index],2.0/3.0);
            double t29905 = b1p*t29902;
            double t29906 = b3p*t29903;
            double t29907 = b4p*t29670*t29904;
            double t29908 = b2p*c*t29900;
            double t29909 = t29905+t29906+t29907+t29908;
            double t29910 = 1.0/t29909;
            double t29911 = t29910*t29672*(1.0/2.0);
            double t29912 = t29911+1.0;
            double t29913 = log(t29912);
            double t29914 = a1p*c*t29900;
            double t29915 = t29914+1.0;
            double t29916 = c0p*t29913*t29915*2.0;
            double t29917 = t29742*t29760*t29725*t29753*t29748;
            double t29918 = Aa*t29821*t29725*t29807*t29809*t29748*t29797*2.0;
            double t29919 = 1.0/(t29882*t29882);
            double t29920 = 1.0/pow(rho_a[index],2.2E1/3.0);
            double t29921 = gamma_aa[index]*gcab*t29691*(8.0/3.0);
            double t29922 = gamma_aa[index]*t29691*t29695*t29696*(8.0/3.0);
            double t29923 = t29921+t29922;
            double t29924 = 1.0/pow(rho_a[index],1.4E1/3.0);
            double t29925 = 1.0/(t29886*t29886);
            double t29926 = gx*gx;
            double t29927 = gamma_aa[index]*gx*t29684;
            double t29928 = t29927+1.0;
            double t29933 = gamma_aa[index]*gx*t29691*(1.6E1/3.0);
            double t29934 = t29926*t29685*t29687*(1.6E1/3.0);
            double t29929 = t29933+t29934;
            double t29930 = gamma_aa[index]*gx*t29684*2.0;
            double t29931 = t29690*t29926*t29685;
            double t29932 = t29930+t29931+1.0;
            double t29935 = 1.0/(t29932*t29932);
            double t29936 = 1.0/t29928;
            double t29937 = 1.0/t29932;
            double t29938 = 1.0/(t29928*t29928);
            double t29939 = ccaa1*gamma_aa[index]*gcaa*t29684*t29897;
            double t29940 = ccaa2*t29690*t29685*t29686*t29898;
            double t29941 = ccaa0+t29940+t29939;
            double t29942 = 1.0/(t29842*t29842*t29842);
            double t29943 = b4f*t29670*t29684*(1.0E1/9.0);
            double t29944 = b2f*c*t29852*(4.0/9.0);
            double t29945 = b3f*t29670*t29684*t29849*(1.0/1.2E1);
            double t29946 = b1f*c*t29852*t29849*(2.0/9.0);
            double t29947 = b3f*c*t29852*t29668*(2.0/3.0);
            double t29948 = t29943+t29944+t29945+t29946+t29947-b1f*t29670*t29854*t29684*(1.0/3.6E1);
            double t29949 = t29851*t29837*t29866*t29948;
            double t29951 = t29853*t29683*t29875*t29867;
            double t29952 = 1.0/(t29845*t29845);
            double t29953 = 1.0/(t29842*t29842*t29842*t29842);
            double t29954 = t29726*t29952*t29953*t29837*t29859*(1.0/2.0);
            double t29955 = t29672*t29683*t29864*t29876*t29877*(1.0/2.0);
            double t29956 = a1f*c*t29851*t29846*t29847*t29866*(2.0/3.0);
            double t29957 = a1p*c*t29850*t29853*t29846*t29867*(2.0/3.0);
            double t29958 = t29725*t29835*t29899;
            double t29959 = t29894+t29958;
            double t29960 = 1.0/pow(rho_a[index],1.0E1);
            double t29961 = 1.0/(t29689*t29689);
            double t29962 = gamma_aa[index]*gcaa*t29691*(1.6E1/3.0);
            double t29963 = t29685*t29686*t29687*(1.6E1/3.0);
            double t29964 = t29962+t29963;
            double t29965 = 1.0/(t29694*t29694);
            double t29966 = ccaa1*gamma_aa[index]*gcaa*t29691*t29897*(8.0/3.0);
            double t29967 = ccaa2*t29685*t29686*t29687*t29898*(1.6E1/3.0);
            double t29968 = t29966+t29967-ccaa1*t29961*t29685*t29686*t29687*(8.0/3.0)-ccaa2*t29690*t29685*t29964* \
               t29686*t29965;
            double t29969 = t29892+t29896-t29889;
            v_rho_a_rho_a_[index] = t29941*t29969*2.0+t29968*(t29894+t29725*t29835*(t29893-c0p*t29681*t29683* \
               2.0))*2.0+(rho_a[index]*t29959+rho_b[index]*(t29916-t29725*t29835*(t29916-c0f*log((t29726*(1.0/2.0) \
               )/(b1f*t29902+b3f*t29903+b2f*c*t29900+b4f*t29670*t29904)+1.0)*(a1f*c*t29900+1.0)*2.0))-t29701*(t29750+ \
               t29917+t29918))*(-ccab2*t29700*t29925*t29696*(gamma_aa[index]*gcab*t29924*(8.8E1/9.0)+t29920*t29685* \
               t29696*(3.2E1/9.0)+gamma_aa[index]*t29924*t29695*t29696*(8.8E1/9.0))+ccab2*t29700*(t29923*t29923)* \
               t29696*1.0/(t29886*t29886*t29886)*2.0+ccab1*gamma_aa[index]*gcab*t29924*t29883*(4.4E1/9.0)-ccab1*t29920* \
               t29685*t29919*t29696*(3.2E1/9.0)+ccab2*t29920*t29685*t29696*t29887*(3.2E1/9.0)-ccab1*gamma_aa[index]* \
               t29924*t29919*t29695*t29696*(4.4E1/9.0)+ccab2*gamma_aa[index]*t29924*t29695*t29696*t29887*(8.8E1/9.0) \
               -ccab2*gamma_aa[index]*t29923*t29691*t29925*t29695*t29696*(1.6E1/3.0)+ccab1*gcab*t29920*1.0/(t29882* \
               t29882*t29882)*t29685*t29695*t29696*(3.2E1/9.0))+(ccab1*gamma_aa[index]*gcab*t29691*t29883*(4.0/3.0) \
               -ccab2*t29700*t29923*t29925*t29696-ccab1*gamma_aa[index]*t29691*t29919*t29695*t29696*(4.0/3.0)+ccab2* \
               gamma_aa[index]*t29691*t29695*t29696*t29887*(8.0/3.0))*(t29750+t29917+t29918-t29894+rho_a[index]*t29969+ \
               t29701*(-t29880+t29774+t29742*t29760*t29725*t29753*t29758-t29742*t29760*t29725*t29748*t29759*4.0+t29760* \
               t29725*t29753*t29748*t29888+t29742*t29725*t29743*t29753*t29727*t29748*4.0+Aa*t29821*t29725*t29807* \
               t29809*t29758*t29797*2.0-Aa*t29725*t29807*t29809*t29818*t29748*t29797*2.0+t29821*t29822*t29725*t29809* \
               t29827*t29819*t29748*t29797-Aa*a1a*c*t29721*t29821*t29725*t29807*t29748*t29797*(2.0/3.0))-t29725*t29835* \
               t29899)*2.0-(ccab0+ccab1*gcab*t29883*t29695+ccab2*t29700*t29696*t29887)*(rho_a[index]*(t29951+t29955+ \
               t29957-t29869-t29878+t29725*t29835*(t29954+t29956+t29949+t29869+t29878-t29851*t29942*t29837*t29859* \
               2.0-t29853*t29683*t29875*t29867-a1f*c*c0f*t29852*t29865*(8.0/9.0)-t29672*t29683*t29864*t29876*t29877* \
               (1.0/2.0)-a1p*c*t29850*t29853*t29846*t29867*(2.0/3.0)))+t29701*(-t29830-t29831-t29832+t29785+t29795+ \
               t29760*t29725*t29753*t29748*(t29830+t29831+t29832-t29785-t29795+t29740*1.0/(t29734*t29734*t29734)* \
               t29767*t29786*2.0-t29740*t29767*t29768*(b2f*c*t29712*(4.0/9.0)+b4f*t29713*t29670*(1.0E1/9.0)+b1f*c* \
               t29712*t29714*(2.0/9.0)+b3f*c*t29712*t29704*(2.0/3.0)-b1f*t29713*t29670*t29777*(1.0/3.6E1)+b3f*t29713* \
               t29714*t29670*(1.0/1.2E1))-t29740*1.0/(t29734*t29734*t29734*t29734)*t29726*1.0/(t29737*t29737)*t29786* \
               (1.0/2.0)+a1f*c*c0f*t29712*t29738*(8.0/9.0)-a1f*c*t29721*t29773*t29767*t29768*(2.0/3.0))+t29742*t29760* \
               t29725*t29753*t29816+t29742*t29725*t29743*t29753*t29748*1.2E1-t29760*t29725*t29753*t29790*t29758*2.0+ \
               t29742*t29760*t29725*t29748*t29796*2.0E1-t29742*t29760*t29725*t29758*t29759*8.0+t29760*t29725*t29790* \
               t29748*t29759*8.0+t29742*t29725*t29743*t29753*t29727*t29758*8.0-t29725*t29743*t29753*t29727*t29790* \
               t29748*8.0-t29742*t29725*t29743*t29727*t29748*t29759*3.2E1+Aa*t29821*t29725*t29807*t29816*t29809*t29797* \
               2.0-Aa*t29725*t29807*t29809*t29818*t29758*t29797*4.0+Aa*t29725*t29807*t29809*t29748*t29797*(t29743* \
               t29753*1.2E1+t29760*t29796*2.0E1-t29743*t29727*t29759*3.2E1)*2.0+t29821*t29822*t29725*t29809*t29827* \
               t29819*t29758*t29797*2.0-t29822*t29725*t29809*t29818*t29827*t29819*t29748*t29797*2.0+1.0/(t29803*t29803* \
               t29803)*t29821*t29725*t29809*t29819*t29828*t29748*t29797*2.0-t29821*t29822*t29725*t29809*t29819*t29748* \
               t29797*(b2a*c*t29712*(4.0/9.0)+b4a*t29713*t29670*(1.0E1/9.0)+b1a*c*t29712*t29714*(2.0/9.0)+b3a*c*t29712* \
               t29704*(2.0/3.0)-b1a*t29713*t29670*t29777*(1.0/3.6E1)+b3a*t29713*t29714*t29670*(1.0/1.2E1))+Aa*a1a* \
               c*t29712*t29821*t29725*t29807*t29748*t29797*(8.0/9.0)-Aa*a1a*c*t29721*t29821*t29725*t29807*t29758* \
               t29797*(4.0/3.0)+Aa*a1a*c*t29721*t29725*t29807*t29818*t29748*t29797*(4.0/3.0)-1.0/(t29803*t29803*t29803* \
               t29803)*t29821*t29725*1.0/(t29806*t29806)*t29809*t29828*t29748*t29797*t29798*(1.0/2.0)-a1a*c*t29721* \
               t29821*t29822*t29725*t29827*t29819*t29748*t29797*(2.0/3.0))+t29725*t29835*t29891*2.0+t29720*t29722* \
               t29716*t29762*2.0-t29850*t29853*t29683*t29867*2.0-a1p*c*c0p*t29721*t29741*(4.0/3.0)+a1p*c*c0p*t29681* \
               t29846*(4.0/3.0)+t29742*t29760*t29725*t29753*t29758*2.0-t29742*t29760*t29725*t29748*t29759*8.0+t29760* \
               t29725*t29753*t29748*t29888*2.0+t29742*t29725*t29743*t29753*t29727*t29748*8.0+Aa*t29821*t29725*t29807* \
               t29809*t29758*t29797*4.0-Aa*t29725*t29807*t29809*t29818*t29748*t29797*4.0+t29821*t29822*t29725*t29809* \
               t29827*t29819*t29748*t29797*2.0-Aa*a1a*c*t29721*t29821*t29725*t29807*t29748*t29797*(4.0/3.0))+c0*t29671* \
               (cx0+cx1*gamma_aa[index]*gx*t29684*t29936+cx2*t29690*t29926*t29685*t29937)*(4.0/9.0)-rho_a[index]* \
               t29959*(ccaa1*gamma_aa[index]*gcaa*t29924*t29897*(8.8E1/9.0)-ccaa1*t29920*t29961*t29685*t29686*2.4E1+ \
               ccaa2*t29920*t29685*t29686*t29898*(3.04E2/9.0)-ccaa2*t29685*t29964*t29686*t29965*t29687*(3.2E1/3.0) \
               -ccaa2*t29690*t29685*t29686*t29965*(gamma_aa[index]*gcaa*t29924*(1.76E2/9.0)+t29920*t29685*t29686* \
               (3.04E2/9.0))+ccaa2*t29690*t29685*1.0/(t29694*t29694*t29694)*(t29964*t29964)*t29686*2.0+ccaa1*gamma_aa[index]* \
               gcaa*t29960*t29685*t29686*1.0/(t29689*t29689*t29689)*(1.28E2/9.0))+rho_a[index]*t29941*(t29951+t29955+ \
               t29957-t29869-t29878-t29725*t29835*(t29951-t29954+t29955-t29956+t29957-t29949-t29869-t29878+t29851* \
               t29942*t29837*t29859*2.0+a1f*c*c0f*t29852*t29865*(8.0/9.0)))+c0*pow(rho_a[index],4.0/3.0)*(cx1*gamma_aa[index]* \
               gx*t29924*t29936*(8.8E1/9.0)-cx1*t29920*t29926*t29685*t29938*2.4E1+cx2*t29920*t29926*t29685*t29937* \
               (3.04E2/9.0)-cx2*t29926*t29935*t29685*t29929*t29687*(3.2E1/3.0)-cx2*t29690*t29926*t29935*t29685*(gamma_aa[index]* \
               gx*t29924*(1.76E2/9.0)+t29920*t29926*t29685*(3.04E2/9.0))+cx2*1.0/(t29932*t29932*t29932)*t29690*t29926* \
               t29685*(t29929*t29929)*2.0+cx1*gamma_aa[index]*gx*t29960*t29926*t29685*1.0/(t29928*t29928*t29928)* \
               (1.28E2/9.0))-c0*pow(rho_a[index],1.0/3.0)*(cx1*gamma_aa[index]*gx*t29691*t29936*(8.0/3.0)-cx1*t29926* \
               t29685*t29938*t29687*(8.0/3.0)+cx2*t29926*t29685*t29937*t29687*(1.6E1/3.0)-cx2*t29690*t29926*t29935* \
               t29685*t29929)*(8.0/3.0)-rho_a[index]*t29968*t29969*2.0;
        } else if (rho_a[index] > cutoff_) {
            double t32197 = 1.0/pow(rho_a[index],1.0/3.0);
            double t32198 = c*t32197;
            double t32199 = sqrt(t32198);
            double t32200 = pow(t32198,3.0/2.0);
            double t32201 = c*c;
            double t32202 = 1.0/pow(rho_a[index],2.0/3.0);
            double t32203 = 1.0/c0p;
            double t32204 = b1p*t32199;
            double t32205 = b3p*t32200;
            double t32206 = b4p*t32201*t32202;
            double t32207 = b2p*c*t32197;
            double t32208 = t32204+t32205+t32206+t32207;
            double t32209 = 1.0/t32208;
            double t32210 = t32203*t32209*(1.0/2.0);
            double t32211 = t32210+1.0;
            double t32212 = log(t32211);
            double t32213 = a1p*c*t32197;
            double t32214 = t32213+1.0;
            double t32215 = 1.0/pow(rho_a[index],8.0/3.0);
            double t32216 = gamma_aa[index]*gamma_aa[index];
            double t32217 = gcaa*gcaa;
            double t32218 = 1.0/pow(rho_a[index],1.9E1/3.0);
            double t32219 = gamma_aa[index]*gcaa*t32215;
            double t32220 = t32219+1.0;
            double t32221 = 1.0/pow(rho_a[index],1.6E1/3.0);
            double t32222 = 1.0/pow(rho_a[index],1.1E1/3.0);
            double t32223 = gamma_aa[index]*gcaa*t32215*2.0;
            double t32224 = t32221*t32216*t32217;
            double t32225 = t32223+t32224+1.0;
            double t32226 = pow(2.0,1.0/3.0);
            double t32227 = t32226*2.0;
            double t32228 = t32227-2.0;
            double t32229 = two_13*2.0;
            double t32230 = t32229-2.0;
            double t32231 = 1.0/t32230;
            double t32232 = a1f*c*t32197;
            double t32233 = t32232+1.0;
            double t32234 = 1.0/c0f;
            double t32235 = b1f*t32199;
            double t32236 = b3f*t32200;
            double t32237 = b4f*t32201*t32202;
            double t32238 = b2f*c*t32197;
            double t32239 = t32235+t32236+t32237+t32238;
            double t32240 = 1.0/t32239;
            double t32241 = t32240*t32234*(1.0/2.0);
            double t32242 = t32241+1.0;
            double t32243 = 1.0/pow(rho_a[index],4.0/3.0);
            double t32244 = 1.0/pow(rho_a[index],5.0/3.0);
            double t32245 = 1.0/sqrt(t32198);
            double t32246 = log(t32242);
            double t32247 = 1.0/t32211;
            double t32248 = 1.0/(t32208*t32208);
            double t32249 = b4p*t32201*t32244*(2.0/3.0);
            double t32250 = b2p*c*t32243*(1.0/3.0);
            double t32251 = b1p*c*t32243*t32245*(1.0/6.0);
            double t32252 = b3p*c*t32243*t32199*(1.0/2.0);
            double t32253 = t32250+t32251+t32252+t32249;
            double t32254 = t32214*t32253*t32247*t32248;
            double t32255 = 1.0/t32220;
            double t32256 = 1.0/t32225;
            double t32257 = gx*gx;
            double t32258 = gamma_aa[index]*gx*t32215;
            double t32259 = t32258+1.0;
            double t32260 = 1.0/pow(rho_a[index],2.2E1/3.0);
            double t32265 = gamma_aa[index]*gx*t32222*(1.6E1/3.0);
            double t32266 = t32216*t32218*t32257*(1.6E1/3.0);
            double t32261 = t32265+t32266;
            double t32262 = gamma_aa[index]*gx*t32215*2.0;
            double t32263 = t32221*t32216*t32257;
            double t32264 = t32262+t32263+1.0;
            double t32267 = 1.0/pow(rho_a[index],1.4E1/3.0);
            double t32268 = 1.0/(t32264*t32264);
            double t32269 = 1.0/t32259;
            double t32270 = 1.0/t32264;
            double t32271 = 1.0/(t32259*t32259);
            double t32272 = ccaa1*gamma_aa[index]*gcaa*t32215*t32255;
            double t32273 = ccaa2*t32221*t32216*t32217*t32256;
            double t32274 = ccaa0+t32272+t32273;
            double t32275 = 1.0/t32242;
            double t32276 = b4f*t32201*t32244*(2.0/3.0);
            double t32277 = b2f*c*t32243*(1.0/3.0);
            double t32278 = b1f*c*t32243*t32245*(1.0/6.0);
            double t32279 = b3f*c*t32243*t32199*(1.0/2.0);
            double t32280 = t32276+t32277+t32278+t32279;
            double t32281 = 1.0/(t32239*t32239);
            double t32282 = 1.0/pow(rho_a[index],7.0/3.0);
            double t32283 = 1.0/pow(t32198,3.0/2.0);
            double t32284 = t32280*t32280;
            double t32285 = t32253*t32253;
            double t32286 = 1.0/(t32208*t32208*t32208);
            double t32287 = t32214*t32247*t32285*t32286*2.0;
            double t32288 = b4p*t32201*t32215*(1.0E1/9.0);
            double t32289 = b2p*c*t32282*(4.0/9.0);
            double t32290 = b3p*t32201*t32215*t32245*(1.0/1.2E1);
            double t32291 = b1p*c*t32245*t32282*(2.0/9.0);
            double t32292 = b3p*c*t32282*t32199*(2.0/3.0);
            double t32293 = t32290+t32291+t32292+t32288+t32289-b1p*t32201*t32215*t32283*(1.0/3.6E1);
            double t32294 = 1.0/(t32211*t32211);
            double t32295 = 1.0/(t32208*t32208*t32208*t32208);
            double t32296 = a1p*c*c0p*t32212*t32282*(8.0/9.0);
            double t32297 = c0f*t32233*t32246*2.0;
            double t32298 = c0p*t32212*t32214*2.0;
            double t32299 = 1.0/pow(rho_a[index],1.0E1);
            double t32300 = 1.0/(t32220*t32220);
            double t32301 = gamma_aa[index]*gcaa*t32222*(1.6E1/3.0);
            double t32302 = t32216*t32217*t32218*(1.6E1/3.0);
            double t32303 = t32301+t32302;
            double t32304 = 1.0/(t32225*t32225);
            double t32305 = a1f*c*c0f*t32243*t32246*(2.0/3.0);
            double t32306 = a1p*c*c0p*t32212*t32243*(2.0/3.0);
            double t32307 = ccaa1*gamma_aa[index]*gcaa*t32222*t32255*(8.0/3.0);
            double t32308 = ccaa2*t32216*t32217*t32218*t32256*(1.6E1/3.0);
            double t32309 = t32307+t32308-ccaa1*t32300*t32216*t32217*t32218*(8.0/3.0)-ccaa2*t32221*t32303*t32304* \
               t32216*t32217;
            v_rho_a_rho_a_[index] = t32309*(t32298+t32231*t32228*(t32297-c0p*t32212*t32214*2.0))*2.0+t32274*(t32306- \
               t32254+t32231*t32228*(t32305+t32254-t32233*t32280*t32281*t32275-a1p*c*c0p*t32212*t32243*(2.0/3.0)) \
               )*2.0+c0*t32202*(cx0+cx1*gamma_aa[index]*gx*t32215*t32269+cx2*t32221*t32216*t32270*t32257)*(4.0/9.0) \
               -rho_a[index]*(t32298+t32231*t32228*(t32297-t32298))*(ccaa1*gamma_aa[index]*gcaa*t32255*t32267*(8.8E1/ \
               9.0)-ccaa1*t32300*t32260*t32216*t32217*2.4E1+ccaa2*t32260*t32216*t32217*t32256*(3.04E2/9.0)-ccaa2* \
               t32303*t32304*t32216*t32217*t32218*(3.2E1/3.0)-ccaa2*t32221*t32304*t32216*t32217*(gamma_aa[index]* \
               gcaa*t32267*(1.76E2/9.0)+t32260*t32216*t32217*(3.04E2/9.0))+ccaa2*t32221*(t32303*t32303)*t32216*1.0/ \
               (t32225*t32225*t32225)*t32217*2.0+ccaa1*gamma_aa[index]*gcaa*1.0/(t32220*t32220*t32220)*t32216*t32217* \
               t32299*(1.28E2/9.0))+c0*pow(rho_a[index],4.0/3.0)*(cx1*gamma_aa[index]*gx*t32267*t32269*(8.8E1/9.0) \
               -cx1*t32260*t32216*t32271*t32257*2.4E1+cx2*t32260*t32216*t32270*t32257*(3.04E2/9.0)-cx2*t32216*t32261* \
               t32218*t32257*t32268*(3.2E1/3.0)-cx2*t32221*t32216*t32257*t32268*(gamma_aa[index]*gx*t32267*(1.76E2/ \
               9.0)+t32260*t32216*t32257*(3.04E2/9.0))+cx2*t32221*t32216*(t32261*t32261)*1.0/(t32264*t32264*t32264) \
               *t32257*2.0+cx1*gamma_aa[index]*gx*t32216*t32257*1.0/(t32259*t32259*t32259)*t32299*(1.28E2/9.0))+rho_a[index]* \
               t32274*(-t32287-t32296+t32231*t32228*(t32287+t32296-t32214*t32247*t32248*t32293-t32233*1.0/(t32239* \
               t32239*t32239)*t32275*t32284*2.0+t32233*t32281*t32275*(b2f*c*t32282*(4.0/9.0)+b4f*t32201*t32215*(1.0E1/ \
               9.0)+b1f*c*t32245*t32282*(2.0/9.0)+b3f*c*t32282*t32199*(2.0/3.0)-b1f*t32201*t32215*t32283*(1.0/3.6E1) \
               +b3f*t32201*t32215*t32245*(1.0/1.2E1))+t32233*1.0/(t32242*t32242)*t32234*1.0/(t32239*t32239*t32239* \
               t32239)*t32284*(1.0/2.0)-a1f*c*c0f*t32246*t32282*(8.0/9.0)-t32203*t32214*t32285*t32294*t32295*(1.0/ \
               2.0)+a1f*c*t32243*t32280*t32281*t32275*(2.0/3.0)-a1p*c*t32243*t32253*t32247*t32248*(2.0/3.0))+t32214* \
               t32247*t32248*t32293+t32203*t32214*t32285*t32294*t32295*(1.0/2.0)+a1p*c*t32243*t32253*t32247*t32248* \
               (2.0/3.0))-rho_a[index]*t32309*(t32306-t32254+t32231*t32228*(t32305-t32306+t32254-t32233*t32280*t32281* \
               t32275))*2.0-c0*pow(rho_a[index],1.0/3.0)*(cx1*gamma_aa[index]*gx*t32222*t32269*(8.0/3.0)-cx1*t32216* \
               t32271*t32218*t32257*(8.0/3.0)+cx2*t32216*t32270*t32218*t32257*(1.6E1/3.0)-cx2*t32221*t32216*t32261* \
               t32257*t32268)*(8.0/3.0);
        } else if (rho_b[index] > cutoff_) {
            v_rho_a_rho_a_[index] = 0.0;
        } else {
            v_rho_a_rho_a_[index] = 0.0;
        } 

        //V_rho_a_rho_b
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t29971 = 1.0/pow(rho_a[index],1.0/3.0);
            double t29972 = c*t29971;
            double t29973 = sqrt(t29972);
            double t29974 = pow(t29972,3.0/2.0);
            double t29975 = c*c;
            double t29976 = 1.0/pow(rho_a[index],2.0/3.0);
            double t29977 = 1.0/c0p;
            double t29978 = b1p*t29973;
            double t29979 = b3p*t29974;
            double t29980 = b4p*t29975*t29976;
            double t29981 = b2p*c*t29971;
            double t29982 = t29980+t29981+t29978+t29979;
            double t29983 = 1.0/t29982;
            double t29984 = t29983*t29977*(1.0/2.0);
            double t29985 = t29984+1.0;
            double t29986 = log(t29985);
            double t29987 = a1p*c*t29971;
            double t29988 = t29987+1.0;
            double t29989 = pow(2.0,1.0/3.0);
            double t29990 = t29989*2.0;
            double t29991 = t29990-2.0;
            double t29992 = two_13*2.0;
            double t29993 = t29992-2.0;
            double t29994 = 1.0/t29993;
            double t29995 = 1.0/c0f;
            double t29996 = 1.0/pow(rho_b[index],1.0/3.0);
            double t29997 = c*t29996;
            double t29998 = sqrt(t29997);
            double t29999 = pow(t29997,3.0/2.0);
            double t30000 = 1.0/pow(rho_b[index],2.0/3.0);
            double t30001 = b1p*t29998;
            double t30002 = b3p*t29999;
            double t30003 = b4p*t29975*t30000;
            double t30004 = b2p*c*t29996;
            double t30005 = t30001+t30002+t30003+t30004;
            double t30006 = 1.0/t30005;
            double t30007 = t29977*t30006*(1.0/2.0);
            double t30008 = t30007+1.0;
            double t30009 = log(t30008);
            double t30010 = a1p*c*t29996;
            double t30011 = t30010+1.0;
            double t30012 = c0p*t30011*t30009*2.0;
            double t30013 = rho_a[index]+rho_b[index];
            double t30014 = 1.0/pow(t30013,1.0/3.0);
            double t30015 = c*t30014;
            double t30016 = sqrt(t30015);
            double t30017 = pow(t30015,3.0/2.0);
            double t30018 = 1.0/pow(t30013,2.0/3.0);
            double t30019 = b1p*t30016;
            double t30020 = b3p*t30017;
            double t30021 = b4p*t29975*t30018;
            double t30022 = b2p*c*t30014;
            double t30023 = t30020+t30021+t30022+t30019;
            double t30024 = 1.0/t30023;
            double t30025 = t29977*t30024*(1.0/2.0);
            double t30026 = t30025+1.0;
            double t30027 = log(t30026);
            double t30028 = a1p*c*t30014;
            double t30029 = t30028+1.0;
            double t30030 = c0p*t30027*t30029*2.0;
            double t30031 = rho_a[index]-rho_b[index];
            double t30032 = t30031*t30031;
            double t30033 = 1.0/t30013;
            double t30034 = t30031*t30033;
            double t30035 = 1.0/(t30013*t30013*t30013*t30013);
            double t30036 = t30032*t30032;
            double t30037 = t30034+1.0;
            double t30038 = pow(t30037,4.0/3.0);
            double t30039 = -t30034+1.0;
            double t30040 = pow(t30039,4.0/3.0);
            double t30041 = t30040+t30038-2.0;
            double t30042 = gcab*gcab;
            double t30043 = 1.0/pow(rho_a[index],1.1E1/3.0);
            double t30044 = 1.0/pow(rho_b[index],1.1E1/3.0);
            double t30045 = 1.0/pow(rho_a[index],8.0/3.0);
            double t30046 = gamma_aa[index]*t30045*(1.0/2.0);
            double t30047 = 1.0/pow(rho_b[index],8.0/3.0);
            double t30048 = gamma_bb[index]*t30047*(1.0/2.0);
            double t30049 = t30046+t30048;
            double t30050 = t30049*t30049;
            double t30051 = t30050*t30042;
            double t30052 = gcab*t30049*2.0;
            double t30053 = t30051+t30052+1.0;
            double t30054 = gamma_aa[index]*gcab*t30043*(8.0/3.0);
            double t30055 = gamma_aa[index]*t30042*t30043*t30049*(8.0/3.0);
            double t30056 = t30054+t30055;
            double t30057 = gamma_bb[index]*gcab*t30044*(8.0/3.0);
            double t30058 = gamma_bb[index]*t30042*t30044*t30049*(8.0/3.0);
            double t30059 = t30057+t30058;
            double t30060 = 1.0/(t30053*t30053);
            double t30061 = gcab*t30049;
            double t30062 = t30061+1.0;
            double t30063 = 1.0/(t30062*t30062);
            double t30064 = 1.0/t30053;
            double t30065 = 1.0/pow(t30013,4.0/3.0);
            double t30066 = b1f*t30016;
            double t30067 = b3f*t30017;
            double t30068 = b4f*t29975*t30018;
            double t30069 = b2f*c*t30014;
            double t30070 = t30066+t30067+t30068+t30069;
            double t30071 = 1.0/t30070;
            double t30072 = t29995*t30071*(1.0/2.0);
            double t30073 = t30072+1.0;
            double t30074 = log(t30073);
            double t30075 = a1f*c*t30014;
            double t30076 = t30075+1.0;
            double t30078 = c0f*t30074*t30076*2.0;
            double t30077 = t30030-t30078;
            double t30079 = 1.0/(t30013*t30013);
            double t30106 = t30031*t30079;
            double t30080 = t30033-t30106;
            double t30081 = 1.0/pow(t30013,5.0/3.0);
            double t30082 = 1.0/sqrt(t30015);
            double t30083 = 1.0/t30026;
            double t30084 = 1.0/(t30023*t30023);
            double t30085 = b4p*t29975*t30081*(2.0/3.0);
            double t30086 = b2p*c*t30065*(1.0/3.0);
            double t30087 = b1p*c*t30082*t30065*(1.0/6.0);
            double t30088 = b3p*c*t30016*t30065*(1.0/2.0);
            double t30089 = t30085+t30086+t30087+t30088;
            double t30090 = t30029*t30083*t30084*t30089;
            double t30091 = 1.0/d2fz0;
            double t30092 = 1.0/Aa;
            double t30093 = b1a*t30016;
            double t30094 = b3a*t30017;
            double t30095 = b4a*t29975*t30018;
            double t30096 = b2a*c*t30014;
            double t30097 = t30093+t30094+t30095+t30096;
            double t30098 = 1.0/t30097;
            double t30099 = t30092*t30098*(1.0/2.0);
            double t30100 = t30099+1.0;
            double t30101 = log(t30100);
            double t30102 = a1a*c*t30014;
            double t30103 = t30102+1.0;
            double t30104 = 1.0/(t30013*t30013*t30013*t30013*t30013);
            double t30105 = pow(t30037,1.0/3.0);
            double t30107 = t30105*t30080*(4.0/3.0);
            double t30108 = pow(t30039,1.0/3.0);
            double t30186 = t30080*t30108*(4.0/3.0);
            double t30109 = t30107-t30186;
            double t30110 = t30035*t30036;
            double t30111 = t30110-1.0;
            double t30112 = a1f*c*t29971;
            double t30113 = t30112+1.0;
            double t30114 = b1f*t29973;
            double t30115 = b3f*t29974;
            double t30116 = b4f*t29975*t29976;
            double t30117 = b2f*c*t29971;
            double t30118 = t30114+t30115+t30116+t30117;
            double t30119 = 1.0/t30118;
            double t30120 = t29995*t30119*(1.0/2.0);
            double t30121 = t30120+1.0;
            double t30122 = 1.0/pow(rho_a[index],4.0/3.0);
            double t30123 = 1.0/pow(rho_a[index],5.0/3.0);
            double t30124 = 1.0/sqrt(t29972);
            double t30125 = log(t30121);
            double t30126 = 1.0/t29985;
            double t30127 = 1.0/(t29982*t29982);
            double t30128 = b4p*t29975*t30123*(2.0/3.0);
            double t30129 = b2p*c*t30122*(1.0/3.0);
            double t30130 = b1p*c*t30122*t30124*(1.0/6.0);
            double t30131 = b3p*c*t29973*t30122*(1.0/2.0);
            double t30132 = t30130+t30131+t30128+t30129;
            double t30133 = t29988*t30132*t30126*t30127;
            double t30134 = c0p*t29986*t29988*2.0;
            double t30135 = Aa*t29994*t30101*t30111*t30103*t30041*t30091*2.0;
            double t30136 = t30134-c0f*t30113*t30125*2.0;
            double t30137 = 1.0/t30062;
            double t30138 = t29994*t30031*t30032*t30041*t30035*t30077*4.0;
            double t30139 = t30033+t30106;
            double t30140 = 1.0/t30073;
            double t30141 = 1.0/(t30070*t30070);
            double t30142 = b4f*t29975*t30081*(2.0/3.0);
            double t30143 = b2f*c*t30065*(1.0/3.0);
            double t30144 = b1f*c*t30082*t30065*(1.0/6.0);
            double t30145 = b3f*c*t30016*t30065*(1.0/2.0);
            double t30146 = t30142+t30143+t30144+t30145;
            double t30147 = a1f*c*c0f*t30065*t30074*(2.0/3.0);
            double t30148 = a1p*c*c0p*t30027*t30065*(2.0/3.0);
            double t30149 = t30104*t30036*4.0;
            double t30150 = t30105*t30139*(4.0/3.0);
            double t30185 = t30108*t30139*(4.0/3.0);
            double t30151 = t30150-t30185;
            double t30152 = 1.0/t30100;
            double t30153 = 1.0/(t30097*t30097);
            double t30154 = b4a*t29975*t30081*(2.0/3.0);
            double t30155 = b2a*c*t30065*(1.0/3.0);
            double t30156 = b1a*c*t30082*t30065*(1.0/6.0);
            double t30157 = b3a*c*t30016*t30065*(1.0/2.0);
            double t30158 = t30154+t30155+t30156+t30157;
            double t30159 = Aa*a1a*c*t29994*t30101*t30111*t30041*t30091*t30065*(2.0/3.0);
            double t30160 = a1f*c*t29996;
            double t30161 = t30160+1.0;
            double t30162 = b1f*t29998;
            double t30163 = b3f*t29999;
            double t30164 = b4f*t29975*t30000;
            double t30165 = b2f*c*t29996;
            double t30166 = t30162+t30163+t30164+t30165;
            double t30167 = 1.0/t30166;
            double t30168 = t29995*t30167*(1.0/2.0);
            double t30169 = t30168+1.0;
            double t30170 = 1.0/pow(rho_b[index],4.0/3.0);
            double t30171 = 1.0/pow(rho_b[index],5.0/3.0);
            double t30172 = 1.0/sqrt(t29997);
            double t30173 = log(t30169);
            double t30174 = 1.0/t30008;
            double t30175 = 1.0/(t30005*t30005);
            double t30176 = b4p*t29975*t30171*(2.0/3.0);
            double t30177 = b2p*c*t30170*(1.0/3.0);
            double t30178 = b1p*c*t30170*t30172*(1.0/6.0);
            double t30179 = b3p*c*t29998*t30170*(1.0/2.0);
            double t30180 = t30176+t30177+t30178+t30179;
            double t30181 = t30011*t30180*t30174*t30175;
            double t30182 = t30012-c0f*t30161*t30173*2.0;
            double t30183 = 1.0/pow(t30013,7.0/3.0);
            double t30184 = 1.0/pow(t30013,8.0/3.0);
            double t30202 = t30140*t30141*t30146*t30076;
            double t30187 = -t30202+t30090+t30147-t30148;
            double t30188 = t30089*t30089;
            double t30189 = 1.0/pow(t30015,3.0/2.0);
            double t30190 = b4p*t29975*t30184*(1.0E1/9.0);
            double t30191 = b2p*c*t30183*(4.0/9.0);
            double t30192 = b1p*c*t30082*t30183*(2.0/9.0);
            double t30193 = b3p*c*t30016*t30183*(2.0/3.0);
            double t30194 = b3p*t29975*t30082*t30184*(1.0/1.2E1);
            double t30195 = t30190+t30191+t30192+t30193+t30194-b1p*t29975*t30184*t30189*(1.0/3.6E1);
            double t30196 = t30029*t30083*t30084*t30195;
            double t30197 = 1.0/(t30023*t30023*t30023);
            double t30198 = t30146*t30146;
            double t30199 = 1.0/(t30026*t30026);
            double t30200 = 1.0/(t30023*t30023*t30023*t30023);
            double t30201 = t29977*t30200*t30029*t30188*t30199*(1.0/2.0);
            double t30203 = t30202-t30090-t30147+t30148;
            double t30204 = 1.0/(t30013*t30013*t30013);
            double t30205 = a1p*c*t30065*t30083*t30084*t30089*(2.0/3.0);
            double t30206 = 1.0/(t30013*t30013*t30013*t30013*t30013*t30013);
            double t30207 = t30031*t30032*t30035*4.0;
            double t30208 = t30207+t30149;
            double t30209 = t30031*t30204*t30108*(8.0/3.0);
            double t30210 = 1.0/pow(t30037,2.0/3.0);
            double t30211 = t30210*t30080*t30139*(4.0/9.0);
            double t30212 = 1.0/pow(t30039,2.0/3.0);
            double t30213 = t30212*t30080*t30139*(4.0/9.0);
            double t30214 = t30211+t30213+t30209-t30031*t30105*t30204*(8.0/3.0);
            double t30215 = t30207-t30149;
            double t30216 = t30158*t30158;
            double t30217 = t29994*t30151*t30035*t30036*t30077;
            double t30218 = t29994*t30035*t30036*t30109*t30077;
            v_rho_a_rho_b_[index] = (ccab1*gamma_bb[index]*gcab*t30044*t30137*(4.0/3.0)-ccab2*t30050*t30042*t30060* \
               t30059-ccab1*gamma_bb[index]*t30042*t30044*t30063*t30049*(4.0/3.0)+ccab2*gamma_bb[index]*t30042*t30044* \
               t30064*t30049*(8.0/3.0))*(t30030-t30134+t30135-t30013*(-t30090+t30218+t30138+t30148+t30159+t29994* \
               t30041*t30035*t30036*(t30090+t30147-t30140*t30141*t30146*t30076-a1p*c*c0p*t30027*t30065*(2.0/3.0)) \
               -t29994*t30041*t30104*t30036*t30077*4.0-Aa*t29994*t30101*t30111*t30103*t30091*t30109*2.0+Aa*t29994* \
               t30101*t30103*t30041*t30091*(t30149-t30031*t30032*t30035*4.0)*2.0-t29994*t30111*t30103*t30041*t30152* \
               t30153*t30091*t30158)+rho_a[index]*(-t30133+t29991*t29994*(t30133-(t30113*1.0/(t30118*t30118)*(b2f* \
               c*t30122*(1.0/3.0)+b4f*t29975*t30123*(2.0/3.0)+b1f*c*t30122*t30124*(1.0/6.0)+b3f*c*t29973*t30122*(1.0/ \
               2.0)))/t30121-a1p*c*c0p*t29986*t30122*(2.0/3.0)+a1f*c*c0f*t30122*t30125*(2.0/3.0))+a1p*c*c0p*t29986* \
               t30122*(2.0/3.0))+t29991*t29994*t30136-t29994*t30041*t30035*t30036*t30077)+(ccab1*gamma_aa[index]* \
               gcab*t30043*t30137*(4.0/3.0)-ccab2*t30050*t30042*t30060*t30056-ccab1*gamma_aa[index]*t30042*t30043* \
               t30063*t30049*(4.0/3.0)+ccab2*gamma_aa[index]*t30042*t30043*t30064*t30049*(8.0/3.0))*(-t30012+t30030+ \
               t30135+t30013*(t30090+t30217+t30138-t30148-t30159+t29994*t30041*t30104*t30036*t30077*4.0-t29994*t30041* \
               t30035*t30036*t30187-Aa*t29994*t30101*t30111*t30103*t30151*t30091*2.0-Aa*t29994*t30101*t30103*t30041* \
               t30091*t30208*2.0+t29994*t30111*t30103*t30041*t30152*t30153*t30091*t30158)+rho_b[index]*(-t30181+t29991* \
               t29994*(t30181-(t30161*1.0/(t30166*t30166)*(b2f*c*t30170*(1.0/3.0)+b4f*t29975*t30171*(2.0/3.0)+b1f* \
               c*t30170*t30172*(1.0/6.0)+b3f*c*t29998*t30170*(1.0/2.0)))/t30169+a1f*c*c0f*t30170*t30173*(2.0/3.0) \
               -a1p*c*c0p*t30170*t30009*(2.0/3.0))+a1p*c*c0p*t30170*t30009*(2.0/3.0))+t29991*t29994*t30182-t29994* \
               t30041*t30035*t30036*(t30030-t30078))-(rho_b[index]*(t30012-t29991*t29994*t30182)+rho_a[index]*(t30134- \
               t29991*t29994*t30136)-t30013*(t30030+t30135-t29994*t30041*t30035*t30036*t30077))*(ccab2*t30050*t30042* \
               1.0/(t30053*t30053*t30053)*t30056*t30059*-2.0+ccab1*gamma_aa[index]*gamma_bb[index]*t30042*t30043* \
               t30044*t30063*(3.2E1/9.0)-ccab2*gamma_aa[index]*gamma_bb[index]*t30042*t30043*t30044*t30064*(3.2E1/ \
               9.0)+ccab2*gamma_aa[index]*t30042*t30060*t30043*t30049*t30059*(8.0/3.0)+ccab2*gamma_bb[index]*t30042* \
               t30060*t30044*t30056*t30049*(8.0/3.0)+ccab2*gamma_aa[index]*gamma_bb[index]*t30050*(t30042*t30042) \
               *t30060*t30043*t30044*(3.2E1/9.0)-ccab1*gamma_aa[index]*gamma_bb[index]*gcab*t30042*t30043*t30044* \
               1.0/(t30062*t30062*t30062)*t30049*(3.2E1/9.0))-(ccab0+ccab1*gcab*t30137*t30049+ccab2*t30050*t30042* \
               t30064)*(t30217-t30218-t30013*(t30201+t30205+t30196-t30029*t30083*t30188*t30197*2.0-a1p*c*c0p*t30027* \
               t30183*(8.0/9.0)-t29994*t30041*t30035*t30036*(t30201+t30205+t30196-t30029*t30083*t30188*t30197*2.0+ \
               t30140*1.0/(t30070*t30070*t30070)*t30076*t30198*2.0-t30140*t30141*t30076*(b2f*c*t30183*(4.0/9.0)+b4f* \
               t29975*t30184*(1.0E1/9.0)+b1f*c*t30082*t30183*(2.0/9.0)+b3f*c*t30016*t30183*(2.0/3.0)-b1f*t29975*t30184* \
               t30189*(1.0/3.6E1)+b3f*t29975*t30082*t30184*(1.0/1.2E1))-t29995*1.0/(t30070*t30070*t30070*t30070)* \
               1.0/(t30073*t30073)*t30076*t30198*(1.0/2.0)+a1f*c*c0f*t30074*t30183*(8.0/9.0)-a1p*c*c0p*t30027*t30183* \
               (8.0/9.0)-a1f*c*t30140*t30141*t30065*t30146*(2.0/3.0))+t29994*t30203*t30151*t30035*t30036-t29994*t30032* \
               t30041*t30035*t30077*1.2E1-t29994*t30203*t30035*t30036*t30109-t29994*t30041*t30104*t30036*t30187*8.0+ \
               t29994*t30104*t30151*t30036*t30077*4.0+t29994*t30041*t30206*t30036*t30077*2.0E1-t29994*t30104*t30036* \
               t30109*t30077*4.0-t29994*t30214*t30035*t30036*t30077-t29994*t30031*t30032*t30151*t30035*t30077*4.0- \
               t29994*t30031*t30032*t30035*t30109*t30077*4.0+Aa*t29994*t30101*t30111*t30103*t30214*t30091*2.0+Aa* \
               t29994*t30101*t30103*t30151*t30215*t30091*2.0+Aa*t29994*t30101*t30103*t30091*t30109*t30208*2.0+Aa* \
               t29994*t30101*t30103*t30041*t30091*(t30032*t30035*1.2E1-t30206*t30036*2.0E1)*2.0+t29994*t30111*t30103* \
               t30151*t30152*t30153*t30091*t30158-t29994*t30111*t30103*t30152*t30153*t30091*t30109*t30158-t29994* \
               t30103*t30041*t30152*t30215*t30153*t30091*t30158+t29994*t30103*t30041*t30152*t30153*t30091*t30208* \
               t30158-t29994*t30111*t30103*t30041*t30152*t30216*t30091*1.0/(t30097*t30097*t30097)*2.0+t29994*t30111* \
               t30103*t30041*t30152*t30153*t30091*(b2a*c*t30183*(4.0/9.0)+b4a*t29975*t30184*(1.0E1/9.0)+b1a*c*t30082* \
               t30183*(2.0/9.0)+b3a*c*t30016*t30183*(2.0/3.0)-b1a*t29975*t30184*t30189*(1.0/3.6E1)+b3a*t29975*t30082* \
               t30184*(1.0/1.2E1))-Aa*a1a*c*t29994*t30101*t30111*t30041*t30091*t30183*(8.0/9.0)-Aa*a1a*c*t29994*t30101* \
               t30111*t30151*t30091*t30065*(2.0/3.0)+Aa*a1a*c*t29994*t30101*t30111*t30091*t30109*t30065*(2.0/3.0) \
               +Aa*a1a*c*t29994*t30101*t30041*t30215*t30091*t30065*(2.0/3.0)-Aa*a1a*c*t29994*t30101*t30041*t30091* \
               t30208*t30065*(2.0/3.0)+t29994*1.0/(t30100*t30100)*t30111*t30103*t30041*t30216*t30091*t30092*1.0/(t30097* \
               t30097*t30097*t30097)*(1.0/2.0)+a1a*c*t29994*t30111*t30041*t30152*t30153*t30091*t30065*t30158*(2.0/ \
               3.0))+t30029*t30083*t30084*t30089*2.0-a1p*c*c0p*t30027*t30065*(4.0/3.0)+t29994*t30041*t30203*t30035* \
               t30036*2.0+t29994*t30041*t30104*t30036*t30077*8.0-Aa*t29994*t30101*t30111*t30103*t30151*t30091*2.0+ \
               Aa*t29994*t30101*t30111*t30103*t30091*t30109*2.0+Aa*t29994*t30101*t30103*t30041*t30215*t30091*2.0- \
               Aa*t29994*t30101*t30103*t30041*t30091*t30208*2.0+t29994*t30111*t30103*t30041*t30152*t30153*t30091* \
               t30158*2.0-Aa*a1a*c*t29994*t30101*t30111*t30041*t30091*t30065*(4.0/3.0));
        } else if (rho_a[index] > cutoff_) {
            v_rho_a_rho_b_[index] = 0.0;
        } else if (rho_b[index] > cutoff_) {
            v_rho_a_rho_b_[index] = 0.0;
        } else {
            v_rho_a_rho_b_[index] = 0.0;
        } 

        //V_rho_b_rho_b
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t30220 = 1.0/pow(rho_b[index],1.0/3.0);
            double t30221 = c*t30220;
            double t30222 = sqrt(t30221);
            double t30223 = pow(t30221,3.0/2.0);
            double t30224 = c*c;
            double t30225 = 1.0/pow(rho_b[index],2.0/3.0);
            double t30226 = 1.0/c0p;
            double t30227 = b1p*t30222;
            double t30228 = b3p*t30223;
            double t30229 = b4p*t30224*t30225;
            double t30230 = b2p*c*t30220;
            double t30231 = t30230+t30227+t30228+t30229;
            double t30232 = 1.0/t30231;
            double t30233 = t30232*t30226*(1.0/2.0);
            double t30234 = t30233+1.0;
            double t30235 = log(t30234);
            double t30236 = a1p*c*t30220;
            double t30237 = t30236+1.0;
            double t30238 = 1.0/pow(rho_b[index],8.0/3.0);
            double t30239 = gamma_bb[index]*gamma_bb[index];
            double t30240 = gcaa*gcaa;
            double t30241 = 1.0/pow(rho_b[index],1.9E1/3.0);
            double t30242 = gamma_bb[index]*gcaa*t30238;
            double t30243 = t30242+1.0;
            double t30244 = 1.0/pow(rho_b[index],1.6E1/3.0);
            double t30245 = 1.0/pow(rho_b[index],1.1E1/3.0);
            double t30246 = gamma_bb[index]*gcaa*t30238*2.0;
            double t30247 = t30240*t30244*t30239;
            double t30248 = t30246+t30247+1.0;
            double t30251 = 1.0/pow(rho_a[index],8.0/3.0);
            double t30252 = gamma_aa[index]*t30251*(1.0/2.0);
            double t30253 = gamma_bb[index]*t30238*(1.0/2.0);
            double t30249 = t30252+t30253;
            double t30250 = gcab*gcab;
            double t30254 = t30249*t30249;
            double t30255 = rho_a[index]+rho_b[index];
            double t30256 = 1.0/pow(t30255,1.0/3.0);
            double t30257 = c*t30256;
            double t30258 = sqrt(t30257);
            double t30259 = b1p*t30258;
            double t30260 = pow(t30257,3.0/2.0);
            double t30261 = b3p*t30260;
            double t30262 = 1.0/pow(t30255,2.0/3.0);
            double t30263 = b4p*t30224*t30262;
            double t30264 = b2p*c*t30256;
            double t30265 = t30261+t30263+t30264+t30259;
            double t30266 = 1.0/pow(t30255,7.0/3.0);
            double t30267 = 1.0/pow(t30255,8.0/3.0);
            double t30268 = 1.0/sqrt(t30257);
            double t30269 = a1p*c*t30256;
            double t30270 = t30269+1.0;
            double t30271 = 1.0/t30265;
            double t30272 = t30226*t30271*(1.0/2.0);
            double t30273 = t30272+1.0;
            double t30274 = 1.0/t30273;
            double t30275 = 1.0/pow(t30255,4.0/3.0);
            double t30315 = 1.0/pow(t30255,5.0/3.0);
            double t30317 = b4p*t30224*t30315*(2.0/3.0);
            double t30318 = b2p*c*t30275*(1.0/3.0);
            double t30319 = b1p*c*t30275*t30268*(1.0/6.0);
            double t30320 = b3p*c*t30275*t30258*(1.0/2.0);
            double t30276 = t30320+t30317+t30318+t30319;
            double t30277 = two_13*2.0;
            double t30278 = t30277-2.0;
            double t30279 = 1.0/t30278;
            double t30280 = 1.0/c0f;
            double t30281 = rho_a[index]-rho_b[index];
            double t30282 = 1.0/t30255;
            double t30283 = t30281*t30282;
            double t30284 = b1f*t30258;
            double t30285 = b3f*t30260;
            double t30286 = b4f*t30224*t30262;
            double t30287 = b2f*c*t30256;
            double t30288 = t30284+t30285+t30286+t30287;
            double t30289 = 1.0/t30288;
            double t30290 = t30280*t30289*(1.0/2.0);
            double t30291 = t30290+1.0;
            double t30292 = log(t30291);
            double t30293 = a1f*c*t30256;
            double t30294 = t30293+1.0;
            double t30295 = log(t30273);
            double t30303 = c0f*t30292*t30294*2.0;
            double t30304 = c0p*t30270*t30295*2.0;
            double t30296 = t30303-t30304;
            double t30297 = t30281*t30281;
            double t30298 = t30283+1.0;
            double t30299 = pow(t30298,4.0/3.0);
            double t30300 = -t30283+1.0;
            double t30301 = pow(t30300,4.0/3.0);
            double t30302 = t30301+t30299-2.0;
            double t30305 = 1.0/(t30255*t30255);
            double t30306 = t30305*t30281;
            double t30307 = t30306+t30282;
            double t30308 = 1.0/(t30255*t30255*t30255*t30255);
            double t30309 = pow(t30298,1.0/3.0);
            double t30310 = t30307*t30309*(4.0/3.0);
            double t30311 = pow(t30300,1.0/3.0);
            double t30344 = t30311*t30307*(4.0/3.0);
            double t30312 = t30310-t30344;
            double t30313 = 1.0/(t30255*t30255*t30255*t30255*t30255);
            double t30314 = t30297*t30297;
            double t30316 = 1.0/(t30265*t30265);
            double t30321 = 1.0/t30291;
            double t30322 = 1.0/(t30288*t30288);
            double t30323 = b4f*t30224*t30315*(2.0/3.0);
            double t30324 = b2f*c*t30275*(1.0/3.0);
            double t30325 = b1f*c*t30275*t30268*(1.0/6.0);
            double t30326 = b3f*c*t30275*t30258*(1.0/2.0);
            double t30327 = t30323+t30324+t30325+t30326;
            double t30328 = t30321*t30322*t30327*t30294;
            double t30329 = a1p*c*c0p*t30275*t30295*(2.0/3.0);
            double t30345 = t30270*t30316*t30274*t30276;
            double t30346 = a1f*c*c0f*t30292*t30275*(2.0/3.0);
            double t30330 = -t30345+t30328-t30346+t30329;
            double t30331 = t30276*t30276;
            double t30332 = 1.0/pow(t30257,3.0/2.0);
            double t30333 = b4p*t30224*t30267*(1.0E1/9.0);
            double t30334 = b2p*c*t30266*(4.0/9.0);
            double t30335 = b1p*c*t30266*t30268*(2.0/9.0);
            double t30336 = b3p*c*t30266*t30258*(2.0/3.0);
            double t30337 = b3p*t30224*t30267*t30268*(1.0/1.2E1);
            double t30338 = t30333+t30334+t30335+t30336+t30337-b1p*t30224*t30332*t30267*(1.0/3.6E1);
            double t30339 = 1.0/(t30265*t30265*t30265);
            double t30340 = t30331*t30270*t30274*t30339*2.0;
            double t30341 = t30327*t30327;
            double t30342 = 1.0/(t30273*t30273);
            double t30343 = 1.0/(t30265*t30265*t30265*t30265);
            double t30347 = t30305*2.0;
            double t30348 = 1.0/(t30255*t30255*t30255);
            double t30349 = t30281*t30348*2.0;
            double t30350 = t30347+t30349;
            double t30351 = t30307*t30307;
            double t30352 = a1p*c*c0p*t30266*t30295*(8.0/9.0);
            double t30353 = 1.0/(t30255*t30255*t30255*t30255*t30255*t30255);
            double t30354 = 1.0/d2fz0;
            double t30355 = 1.0/Aa;
            double t30356 = b1a*t30258;
            double t30357 = b3a*t30260;
            double t30358 = b4a*t30224*t30262;
            double t30359 = b2a*c*t30256;
            double t30360 = t30356+t30357+t30358+t30359;
            double t30361 = 1.0/t30360;
            double t30362 = t30361*t30355*(1.0/2.0);
            double t30363 = t30362+1.0;
            double t30364 = log(t30363);
            double t30365 = a1a*c*t30256;
            double t30366 = t30365+1.0;
            double t30367 = t30350*t30309*(4.0/3.0);
            double t30368 = 1.0/pow(t30298,2.0/3.0);
            double t30369 = t30351*t30368*(4.0/9.0);
            double t30370 = 1.0/pow(t30300,2.0/3.0);
            double t30371 = t30351*t30370*(4.0/9.0);
            double t30372 = t30371+t30367+t30369-t30311*t30350*(4.0/3.0);
            double t30373 = t30281*t30308*t30297*4.0;
            double t30374 = t30313*t30314*4.0;
            double t30375 = t30373+t30374;
            double t30376 = 1.0/t30363;
            double t30377 = t30314*t30308;
            double t30378 = t30377-1.0;
            double t30379 = 1.0/(t30360*t30360);
            double t30380 = b4a*t30224*t30315*(2.0/3.0);
            double t30381 = b2a*c*t30275*(1.0/3.0);
            double t30382 = b1a*c*t30275*t30268*(1.0/6.0);
            double t30383 = b3a*c*t30275*t30258*(1.0/2.0);
            double t30384 = t30380+t30381+t30382+t30383;
            double t30385 = t30384*t30384;
            double t30386 = pow(2.0,1.0/3.0);
            double t30387 = t30386*2.0;
            double t30388 = t30387-2.0;
            double t30389 = a1f*c*t30220;
            double t30390 = t30389+1.0;
            double t30391 = b1f*t30222;
            double t30392 = b3f*t30223;
            double t30393 = b4f*t30224*t30225;
            double t30394 = b2f*c*t30220;
            double t30395 = t30391+t30392+t30393+t30394;
            double t30396 = 1.0/t30395;
            double t30397 = t30280*t30396*(1.0/2.0);
            double t30398 = t30397+1.0;
            double t30399 = 1.0/pow(rho_b[index],4.0/3.0);
            double t30401 = 1.0/pow(rho_b[index],5.0/3.0);
            double t30402 = 1.0/sqrt(t30221);
            double t30408 = b4f*t30401*t30224*(2.0/3.0);
            double t30409 = b2f*c*t30399*(1.0/3.0);
            double t30410 = b1f*c*t30402*t30399*(1.0/6.0);
            double t30411 = b3f*c*t30222*t30399*(1.0/2.0);
            double t30400 = t30410+t30411+t30408+t30409;
            double t30413 = b4p*t30401*t30224*(2.0/3.0);
            double t30414 = b2p*c*t30399*(1.0/3.0);
            double t30415 = b1p*c*t30402*t30399*(1.0/6.0);
            double t30416 = b3p*c*t30222*t30399*(1.0/2.0);
            double t30403 = t30413+t30414+t30415+t30416;
            double t30404 = 1.0/t30398;
            double t30405 = 1.0/pow(rho_b[index],7.0/3.0);
            double t30406 = 1.0/t30234;
            double t30407 = 1.0/pow(t30221,3.0/2.0);
            double t30412 = t30400*t30400;
            double t30417 = t30403*t30403;
            double t30418 = log(t30398);
            double t30419 = 1.0/(t30395*t30395);
            double t30420 = 1.0/(t30231*t30231);
            double t30421 = 1.0/(t30231*t30231*t30231);
            double t30422 = t30421*t30406*t30237*t30417*2.0;
            double t30423 = b4p*t30224*t30238*(1.0E1/9.0);
            double t30424 = b2p*c*t30405*(4.0/9.0);
            double t30425 = b3p*t30402*t30224*t30238*(1.0/1.2E1);
            double t30426 = b1p*c*t30402*t30405*(2.0/9.0);
            double t30427 = b3p*c*t30222*t30405*(2.0/3.0);
            double t30500 = b1p*t30224*t30407*t30238*(1.0/3.6E1);
            double t30428 = -t30500+t30423+t30424+t30425+t30426+t30427;
            double t30429 = 1.0/(t30234*t30234);
            double t30430 = 1.0/(t30231*t30231*t30231*t30231);
            double t30431 = a1p*c*c0p*t30405*t30235*(8.0/9.0);
            double t30432 = gcab*t30249;
            double t30433 = t30432+1.0;
            double t30434 = 1.0/t30433;
            double t30435 = t30250*t30254;
            double t30436 = gcab*t30249*2.0;
            double t30437 = t30435+t30436+1.0;
            double t30438 = 1.0/t30437;
            double t30439 = t30420*t30403*t30406*t30237;
            double t30440 = a1f*c*c0f*t30418*t30399*(2.0/3.0);
            double t30442 = a1p*c*c0p*t30235*t30399*(2.0/3.0);
            double t30445 = t30400*t30404*t30390*t30419;
            double t30441 = t30440-t30442-t30445+t30439;
            double t30443 = c0f*t30390*t30418*2.0;
            double t30444 = c0p*t30235*t30237*2.0;
            double t30446 = t30441*t30279*t30388;
            double t30447 = 1.0/t30243;
            double t30448 = 1.0/t30248;
            double t30449 = 1.0/pow(rho_a[index],1.0/3.0);
            double t30450 = c*t30449;
            double t30451 = sqrt(t30450);
            double t30452 = pow(t30450,3.0/2.0);
            double t30453 = 1.0/pow(rho_a[index],2.0/3.0);
            double t30454 = b1p*t30451;
            double t30455 = b3p*t30452;
            double t30456 = b4p*t30224*t30453;
            double t30457 = b2p*c*t30449;
            double t30458 = t30454+t30455+t30456+t30457;
            double t30459 = 1.0/t30458;
            double t30460 = t30226*t30459*(1.0/2.0);
            double t30461 = t30460+1.0;
            double t30462 = log(t30461);
            double t30463 = a1p*c*t30449;
            double t30464 = t30463+1.0;
            double t30465 = c0p*t30462*t30464*2.0;
            double t30466 = t30443-t30444;
            double t30467 = t30302*t30314*t30308*t30296*t30279;
            double t30468 = Aa*t30302*t30354*t30364*t30366*t30279*t30378*2.0;
            double t30469 = 1.0/(t30433*t30433);
            double t30470 = 1.0/pow(rho_b[index],2.2E1/3.0);
            double t30471 = gamma_bb[index]*gcab*t30245*(8.0/3.0);
            double t30472 = gamma_bb[index]*t30250*t30245*t30249*(8.0/3.0);
            double t30473 = t30471+t30472;
            double t30474 = 1.0/pow(rho_b[index],1.4E1/3.0);
            double t30475 = 1.0/(t30437*t30437);
            double t30476 = gx*gx;
            double t30477 = gamma_bb[index]*gx*t30238;
            double t30478 = t30477+1.0;
            double t30483 = gamma_bb[index]*gx*t30245*(1.6E1/3.0);
            double t30484 = t30241*t30239*t30476*(1.6E1/3.0);
            double t30479 = t30483+t30484;
            double t30480 = gamma_bb[index]*gx*t30238*2.0;
            double t30481 = t30244*t30239*t30476;
            double t30482 = t30480+t30481+1.0;
            double t30485 = 1.0/(t30482*t30482);
            double t30486 = 1.0/t30478;
            double t30487 = 1.0/t30482;
            double t30488 = 1.0/(t30478*t30478);
            double t30489 = ccaa1*gamma_bb[index]*gcaa*t30238*t30447;
            double t30490 = ccaa2*t30240*t30244*t30239*t30448;
            double t30491 = ccaa0+t30490+t30489;
            double t30492 = 1.0/(t30395*t30395*t30395);
            double t30493 = b4f*t30224*t30238*(1.0E1/9.0);
            double t30494 = b2f*c*t30405*(4.0/9.0);
            double t30495 = b3f*t30402*t30224*t30238*(1.0/1.2E1);
            double t30496 = b1f*c*t30402*t30405*(2.0/9.0);
            double t30497 = b3f*c*t30222*t30405*(2.0/3.0);
            double t30498 = t30493+t30494+t30495+t30496+t30497-b1f*t30224*t30407*t30238*(1.0/3.6E1);
            double t30499 = t30404*t30390*t30419*t30498;
            double t30501 = t30420*t30406*t30237*t30428;
            double t30502 = 1.0/(t30398*t30398);
            double t30503 = 1.0/(t30395*t30395*t30395*t30395);
            double t30504 = t30412*t30502*t30503*t30280*t30390*(1.0/2.0);
            double t30505 = t30430*t30226*t30237*t30417*t30429*(1.0/2.0);
            double t30506 = a1f*c*t30400*t30404*t30419*t30399*(2.0/3.0);
            double t30507 = a1p*c*t30420*t30403*t30406*t30399*(2.0/3.0);
            double t30508 = t30466*t30279*t30388;
            double t30509 = t30444+t30508;
            double t30510 = 1.0/pow(rho_b[index],1.0E1);
            double t30511 = 1.0/(t30243*t30243);
            double t30512 = gamma_bb[index]*gcaa*t30245*(1.6E1/3.0);
            double t30513 = t30240*t30241*t30239*(1.6E1/3.0);
            double t30514 = t30512+t30513;
            double t30515 = 1.0/(t30248*t30248);
            double t30516 = ccaa1*gamma_bb[index]*gcaa*t30245*t30447*(8.0/3.0);
            double t30517 = ccaa2*t30240*t30241*t30239*t30448*(1.6E1/3.0);
            double t30518 = t30516+t30517-ccaa1*t30240*t30241*t30511*t30239*(8.0/3.0)-ccaa2*t30240*t30244*t30514* \
               t30515*t30239;
            double t30519 = t30442+t30446-t30439;
            v_rho_b_rho_b_[index] = t30491*t30519*2.0+t30518*(t30444+t30279*t30388*(t30443-c0p*t30235*t30237* \
               2.0))*2.0+(rho_b[index]*t30509+rho_a[index]*(t30465-t30279*t30388*(t30465-c0f*log((t30280*(1.0/2.0) \
               )/(b1f*t30451+b3f*t30452+b2f*c*t30449+b4f*t30224*t30453)+1.0)*(a1f*c*t30449+1.0)*2.0))-t30255*(t30304+ \
               t30467+t30468))*(-ccab2*t30250*t30254*t30475*(gamma_bb[index]*gcab*t30474*(8.8E1/9.0)+t30250*t30470* \
               t30239*(3.2E1/9.0)+gamma_bb[index]*t30250*t30249*t30474*(8.8E1/9.0))+ccab2*t30250*t30254*1.0/(t30437* \
               t30437*t30437)*(t30473*t30473)*2.0+ccab1*gamma_bb[index]*gcab*t30434*t30474*(4.4E1/9.0)+ccab2*t30250* \
               t30470*t30239*t30438*(3.2E1/9.0)-ccab1*t30250*t30470*t30239*t30469*(3.2E1/9.0)+ccab2*gamma_bb[index]* \
               t30250*t30249*t30438*t30474*(8.8E1/9.0)-ccab1*gamma_bb[index]*t30250*t30249*t30474*t30469*(4.4E1/9.0) \
               -ccab2*gamma_bb[index]*t30250*t30245*t30473*t30249*t30475*(1.6E1/3.0)+ccab1*gcab*t30250*1.0/(t30433* \
               t30433*t30433)*t30470*t30239*t30249*(3.2E1/9.0))+(ccab1*gamma_bb[index]*gcab*t30245*t30434*(4.0/3.0) \
               -ccab2*t30250*t30254*t30473*t30475+ccab2*gamma_bb[index]*t30250*t30245*t30249*t30438*(8.0/3.0)-ccab1* \
               gamma_bb[index]*t30250*t30245*t30249*t30469*(4.0/3.0))*(t30304-t30444+t30467+t30468+rho_b[index]*t30519- \
               t30255*(-t30345+t30329-t30302*t30330*t30314*t30308*t30279+t30302*t30313*t30314*t30296*t30279*4.0+t30312* \
               t30314*t30308*t30296*t30279+t30302*t30281*t30308*t30296*t30279*t30297*4.0+Aa*t30302*t30354*t30364* \
               t30366*t30375*t30279*2.0+Aa*t30312*t30354*t30364*t30366*t30279*t30378*2.0-t30302*t30354*t30366*t30384* \
               t30376*t30279*t30378*t30379+Aa*a1a*c*t30302*t30354*t30364*t30275*t30279*t30378*(2.0/3.0))-t30466*t30279* \
               t30388)*2.0+(ccab0+ccab1*gcab*t30434*t30249+ccab2*t30250*t30254*t30438)*(-rho_b[index]*(t30501-t30422- \
               t30431+t30505+t30507+t30279*t30388*(t30422+t30431+t30504+t30506+t30499-t30420*t30406*t30237*t30428- \
               t30412*t30404*t30390*t30492*2.0-a1f*c*c0f*t30405*t30418*(8.0/9.0)-t30430*t30226*t30237*t30417*t30429* \
               (1.0/2.0)-a1p*c*t30420*t30403*t30406*t30399*(2.0/3.0)))-t30255*(t30340+t30352-t30270*t30316*t30274* \
               t30338-t30302*t30314*t30308*t30279*(t30340+t30352-t30270*t30316*t30274*t30338-t30321*t30341*t30294* \
               1.0/(t30288*t30288*t30288)*2.0+t30321*t30322*t30294*(b2f*c*t30266*(4.0/9.0)+b4f*t30224*t30267*(1.0E1/ \
               9.0)+b1f*c*t30266*t30268*(2.0/9.0)+b3f*c*t30266*t30258*(2.0/3.0)-b1f*t30224*t30332*t30267*(1.0/3.6E1) \
               +b3f*t30224*t30267*t30268*(1.0/1.2E1))+t30341*t30280*1.0/(t30291*t30291)*t30294*1.0/(t30288*t30288* \
               t30288*t30288)*(1.0/2.0)-a1f*c*c0f*t30292*t30266*(8.0/9.0)-t30331*t30270*t30342*t30226*t30343*(1.0/ \
               2.0)+a1f*c*t30321*t30322*t30327*t30275*(2.0/3.0)-a1p*c*t30316*t30274*t30275*t30276*(2.0/3.0))-t30302* \
               t30330*t30313*t30314*t30279*8.0-t30331*t30270*t30342*t30226*t30343*(1.0/2.0)-t30312*t30330*t30314* \
               t30308*t30279*2.0+t30312*t30313*t30314*t30296*t30279*8.0+t30302*t30314*t30353*t30296*t30279*2.0E1+ \
               t30314*t30308*t30372*t30296*t30279+t30302*t30308*t30296*t30279*t30297*1.2E1-t30302*t30330*t30281*t30308* \
               t30279*t30297*8.0+t30302*t30313*t30281*t30296*t30279*t30297*3.2E1+t30312*t30281*t30308*t30296*t30279* \
               t30297*8.0-a1p*c*t30316*t30274*t30275*t30276*(2.0/3.0)+Aa*t30312*t30354*t30364*t30366*t30375*t30279* \
               4.0+Aa*t30354*t30372*t30364*t30366*t30279*t30378*2.0+Aa*t30302*t30354*t30364*t30366*t30279*(t30314* \
               t30353*2.0E1+t30308*t30297*1.2E1+t30313*t30281*t30297*3.2E1)*2.0-t30302*t30354*t30366*t30375*t30384* \
               t30376*t30279*t30379*2.0-t30312*t30354*t30366*t30384*t30376*t30279*t30378*t30379*2.0+t30302*1.0/(t30360* \
               t30360*t30360)*t30354*t30366*t30376*t30385*t30279*t30378*2.0-t30302*t30354*t30366*t30376*t30279*t30378* \
               t30379*(b2a*c*t30266*(4.0/9.0)+b4a*t30224*t30267*(1.0E1/9.0)+b1a*c*t30266*t30268*(2.0/9.0)+b3a*c*t30266* \
               t30258*(2.0/3.0)-b1a*t30224*t30332*t30267*(1.0/3.6E1)+b3a*t30224*t30267*t30268*(1.0/1.2E1))+Aa*a1a* \
               c*t30302*t30354*t30364*t30275*t30375*t30279*(4.0/3.0)+Aa*a1a*c*t30302*t30354*t30364*t30266*t30279* \
               t30378*(8.0/9.0)+Aa*a1a*c*t30312*t30354*t30364*t30275*t30279*t30378*(4.0/3.0)-t30302*1.0/(t30360*t30360* \
               t30360*t30360)*t30354*1.0/(t30363*t30363)*t30355*t30366*t30385*t30279*t30378*(1.0/2.0)-a1a*c*t30302* \
               t30354*t30275*t30384*t30376*t30279*t30378*t30379*(2.0/3.0))-t30441*t30279*t30388*2.0+t30420*t30403* \
               t30406*t30237*2.0-t30270*t30316*t30274*t30276*2.0+a1p*c*c0p*t30275*t30295*(4.0/3.0)-a1p*c*c0p*t30235* \
               t30399*(4.0/3.0)-t30302*t30330*t30314*t30308*t30279*2.0+t30302*t30313*t30314*t30296*t30279*8.0+t30312* \
               t30314*t30308*t30296*t30279*2.0+t30302*t30281*t30308*t30296*t30279*t30297*8.0+Aa*t30302*t30354*t30364* \
               t30366*t30375*t30279*4.0+Aa*t30312*t30354*t30364*t30366*t30279*t30378*4.0-t30302*t30354*t30366*t30384* \
               t30376*t30279*t30378*t30379*2.0+Aa*a1a*c*t30302*t30354*t30364*t30275*t30279*t30378*(4.0/3.0))+c0*t30225* \
               (cx0+cx1*gamma_bb[index]*gx*t30238*t30486+cx2*t30244*t30239*t30476*t30487)*(4.0/9.0)-rho_b[index]* \
               t30509*(ccaa1*gamma_bb[index]*gcaa*t30447*t30474*(8.8E1/9.0)-ccaa1*t30240*t30511*t30470*t30239*2.4E1+ \
               ccaa2*t30240*t30470*t30239*t30448*(3.04E2/9.0)-ccaa2*t30240*t30241*t30514*t30515*t30239*(3.2E1/3.0) \
               -ccaa2*t30240*t30244*t30515*t30239*(gamma_bb[index]*gcaa*t30474*(1.76E2/9.0)+t30240*t30470*t30239* \
               (3.04E2/9.0))+ccaa2*t30240*t30244*(t30514*t30514)*t30239*1.0/(t30248*t30248*t30248)*2.0+ccaa1*gamma_bb[index]* \
               gcaa*t30240*t30510*1.0/(t30243*t30243*t30243)*t30239*(1.28E2/9.0))+rho_b[index]*t30491*(t30501-t30422- \
               t30431+t30505+t30507-t30279*t30388*(t30501-t30422-t30431-t30504+t30505-t30506+t30507-t30499+t30412* \
               t30404*t30390*t30492*2.0+a1f*c*c0f*t30405*t30418*(8.0/9.0)))+c0*pow(rho_b[index],4.0/3.0)*(cx1*gamma_bb[index]* \
               gx*t30474*t30486*(8.8E1/9.0)-cx1*t30470*t30239*t30476*t30488*2.4E1+cx2*t30470*t30239*t30476*t30487* \
               (3.04E2/9.0)-cx2*t30241*t30239*t30476*t30485*t30479*(3.2E1/3.0)-cx2*t30244*t30239*t30476*t30485*(gamma_bb[index]* \
               gx*t30474*(1.76E2/9.0)+t30470*t30239*t30476*(3.04E2/9.0))+cx2*t30244*t30239*1.0/(t30482*t30482*t30482) \
               *t30476*(t30479*t30479)*2.0+cx1*gamma_bb[index]*gx*t30510*t30239*t30476*1.0/(t30478*t30478*t30478) \
               *(1.28E2/9.0))-c0*pow(rho_b[index],1.0/3.0)*(cx1*gamma_bb[index]*gx*t30245*t30486*(8.0/3.0)-cx1*t30241* \
               t30239*t30476*t30488*(8.0/3.0)+cx2*t30241*t30239*t30476*t30487*(1.6E1/3.0)-cx2*t30244*t30239*t30476* \
               t30485*t30479)*(8.0/3.0)-rho_b[index]*t30518*t30519*2.0;
        } else if (rho_a[index] > cutoff_) {
            v_rho_b_rho_b_[index] = 0.0;
        } else if (rho_b[index] > cutoff_) {
            double t31788 = 1.0/pow(rho_b[index],1.0/3.0);
            double t31789 = c*t31788;
            double t31790 = sqrt(t31789);
            double t31791 = pow(t31789,3.0/2.0);
            double t31792 = c*c;
            double t31793 = 1.0/pow(rho_b[index],2.0/3.0);
            double t31794 = 1.0/c0p;
            double t31795 = b1p*t31790;
            double t31796 = b3p*t31791;
            double t31797 = b4p*t31792*t31793;
            double t31798 = b2p*c*t31788;
            double t31799 = t31795+t31796+t31797+t31798;
            double t31800 = 1.0/t31799;
            double t31801 = t31800*t31794*(1.0/2.0);
            double t31802 = t31801+1.0;
            double t31803 = log(t31802);
            double t31804 = a1p*c*t31788;
            double t31805 = t31804+1.0;
            double t31806 = 1.0/pow(rho_b[index],8.0/3.0);
            double t31807 = gamma_bb[index]*gamma_bb[index];
            double t31808 = gcaa*gcaa;
            double t31809 = 1.0/pow(rho_b[index],1.9E1/3.0);
            double t31810 = gamma_bb[index]*gcaa*t31806;
            double t31811 = t31810+1.0;
            double t31812 = 1.0/pow(rho_b[index],1.6E1/3.0);
            double t31813 = 1.0/pow(rho_b[index],1.1E1/3.0);
            double t31814 = gamma_bb[index]*gcaa*t31806*2.0;
            double t31815 = t31812*t31807*t31808;
            double t31816 = t31814+t31815+1.0;
            double t31817 = pow(2.0,1.0/3.0);
            double t31818 = t31817*2.0;
            double t31819 = t31818-2.0;
            double t31820 = two_13*2.0;
            double t31821 = t31820-2.0;
            double t31822 = 1.0/t31821;
            double t31823 = a1f*c*t31788;
            double t31824 = t31823+1.0;
            double t31825 = 1.0/c0f;
            double t31826 = b1f*t31790;
            double t31827 = b3f*t31791;
            double t31828 = b4f*t31792*t31793;
            double t31829 = b2f*c*t31788;
            double t31830 = t31826+t31827+t31828+t31829;
            double t31831 = 1.0/t31830;
            double t31832 = t31831*t31825*(1.0/2.0);
            double t31833 = t31832+1.0;
            double t31834 = 1.0/pow(rho_b[index],4.0/3.0);
            double t31835 = 1.0/pow(rho_b[index],5.0/3.0);
            double t31836 = 1.0/sqrt(t31789);
            double t31837 = log(t31833);
            double t31838 = 1.0/t31802;
            double t31839 = 1.0/(t31799*t31799);
            double t31840 = b4p*t31835*t31792*(2.0/3.0);
            double t31841 = b2p*c*t31834*(1.0/3.0);
            double t31842 = b1p*c*t31834*t31836*(1.0/6.0);
            double t31843 = b3p*c*t31834*t31790*(1.0/2.0);
            double t31844 = t31840+t31841+t31842+t31843;
            double t31845 = t31805*t31844*t31838*t31839;
            double t31846 = 1.0/t31811;
            double t31847 = 1.0/t31816;
            double t31848 = gx*gx;
            double t31849 = gamma_bb[index]*gx*t31806;
            double t31850 = t31849+1.0;
            double t31851 = 1.0/pow(rho_b[index],2.2E1/3.0);
            double t31856 = gamma_bb[index]*gx*t31813*(1.6E1/3.0);
            double t31857 = t31807*t31809*t31848*(1.6E1/3.0);
            double t31852 = t31856+t31857;
            double t31853 = gamma_bb[index]*gx*t31806*2.0;
            double t31854 = t31812*t31807*t31848;
            double t31855 = t31853+t31854+1.0;
            double t31858 = 1.0/pow(rho_b[index],1.4E1/3.0);
            double t31859 = 1.0/(t31855*t31855);
            double t31860 = 1.0/t31850;
            double t31861 = 1.0/t31855;
            double t31862 = 1.0/(t31850*t31850);
            double t31863 = ccaa1*gamma_bb[index]*gcaa*t31806*t31846;
            double t31864 = ccaa2*t31812*t31807*t31808*t31847;
            double t31865 = ccaa0+t31863+t31864;
            double t31866 = 1.0/t31833;
            double t31867 = b4f*t31835*t31792*(2.0/3.0);
            double t31868 = b2f*c*t31834*(1.0/3.0);
            double t31869 = b1f*c*t31834*t31836*(1.0/6.0);
            double t31870 = b3f*c*t31834*t31790*(1.0/2.0);
            double t31871 = t31870+t31867+t31868+t31869;
            double t31872 = 1.0/(t31830*t31830);
            double t31873 = 1.0/pow(rho_b[index],7.0/3.0);
            double t31874 = 1.0/pow(t31789,3.0/2.0);
            double t31875 = t31871*t31871;
            double t31876 = t31844*t31844;
            double t31877 = 1.0/(t31799*t31799*t31799);
            double t31878 = t31805*t31838*t31876*t31877*2.0;
            double t31879 = b4p*t31806*t31792*(1.0E1/9.0);
            double t31880 = b2p*c*t31873*(4.0/9.0);
            double t31881 = b3p*t31806*t31836*t31792*(1.0/1.2E1);
            double t31882 = b1p*c*t31836*t31873*(2.0/9.0);
            double t31883 = b3p*c*t31790*t31873*(2.0/3.0);
            double t31884 = t31880+t31881+t31882+t31883+t31879-b1p*t31806*t31792*t31874*(1.0/3.6E1);
            double t31885 = 1.0/(t31802*t31802);
            double t31886 = 1.0/(t31799*t31799*t31799*t31799);
            double t31887 = a1p*c*c0p*t31803*t31873*(8.0/9.0);
            double t31888 = c0f*t31824*t31837*2.0;
            double t31889 = c0p*t31803*t31805*2.0;
            double t31890 = 1.0/pow(rho_b[index],1.0E1);
            double t31891 = 1.0/(t31811*t31811);
            double t31892 = gamma_bb[index]*gcaa*t31813*(1.6E1/3.0);
            double t31893 = t31807*t31808*t31809*(1.6E1/3.0);
            double t31894 = t31892+t31893;
            double t31895 = 1.0/(t31816*t31816);
            double t31896 = a1f*c*c0f*t31834*t31837*(2.0/3.0);
            double t31897 = a1p*c*c0p*t31803*t31834*(2.0/3.0);
            double t31898 = ccaa1*gamma_bb[index]*gcaa*t31813*t31846*(8.0/3.0);
            double t31899 = ccaa2*t31807*t31808*t31809*t31847*(1.6E1/3.0);
            double t31900 = t31898+t31899-ccaa1*t31807*t31808*t31809*t31891*(8.0/3.0)-ccaa2*t31812*t31807*t31808* \
               t31894*t31895;
            v_rho_b_rho_b_[index] = t31900*(t31889+t31822*t31819*(t31888-c0p*t31803*t31805*2.0))*2.0+t31865*(- \
               t31845+t31897+t31822*t31819*(t31845+t31896-t31824*t31871*t31872*t31866-a1p*c*c0p*t31803*t31834*(2.0/ \
               3.0)))*2.0+c0*t31793*(cx0+cx1*gamma_bb[index]*gx*t31806*t31860+cx2*t31812*t31807*t31861*t31848)*(4.0/ \
               9.0)-rho_b[index]*(t31889+t31822*t31819*(t31888-t31889))*(ccaa1*gamma_bb[index]*gcaa*t31846*t31858* \
               (8.8E1/9.0)-ccaa1*t31851*t31807*t31808*t31891*2.4E1+ccaa2*t31851*t31807*t31808*t31847*(3.04E2/9.0) \
               -ccaa2*t31807*t31808*t31809*t31894*t31895*(3.2E1/3.0)-ccaa2*t31812*t31807*t31808*t31895*(gamma_bb[index]* \
               gcaa*t31858*(1.76E2/9.0)+t31851*t31807*t31808*(3.04E2/9.0))+ccaa2*t31812*t31807*1.0/(t31816*t31816* \
               t31816)*t31808*(t31894*t31894)*2.0+ccaa1*gamma_bb[index]*gcaa*1.0/(t31811*t31811*t31811)*t31807*t31808* \
               t31890*(1.28E2/9.0))+c0*pow(rho_b[index],4.0/3.0)*(cx1*gamma_bb[index]*gx*t31860*t31858*(8.8E1/9.0) \
               -cx1*t31851*t31807*t31862*t31848*2.4E1+cx2*t31851*t31807*t31861*t31848*(3.04E2/9.0)-cx2*t31807*t31852* \
               t31809*t31848*t31859*(3.2E1/3.0)-cx2*t31812*t31807*t31848*t31859*(gamma_bb[index]*gx*t31858*(1.76E2/ \
               9.0)+t31851*t31807*t31848*(3.04E2/9.0))+cx2*t31812*t31807*(t31852*t31852)*1.0/(t31855*t31855*t31855) \
               *t31848*2.0+cx1*gamma_bb[index]*gx*1.0/(t31850*t31850*t31850)*t31807*t31890*t31848*(1.28E2/9.0))+rho_b[index]* \
               t31865*(-t31878-t31887+t31822*t31819*(t31878+t31887-t31805*t31838*t31839*t31884-1.0/(t31830*t31830* \
               t31830)*t31824*t31866*t31875*2.0+t31824*t31872*t31866*(b2f*c*t31873*(4.0/9.0)+b4f*t31806*t31792*(1.0E1/ \
               9.0)+b1f*c*t31836*t31873*(2.0/9.0)+b3f*c*t31790*t31873*(2.0/3.0)-b1f*t31806*t31792*t31874*(1.0/3.6E1) \
               +b3f*t31806*t31836*t31792*(1.0/1.2E1))+1.0/(t31830*t31830*t31830*t31830)*t31824*1.0/(t31833*t31833) \
               *t31825*t31875*(1.0/2.0)-a1f*c*c0f*t31837*t31873*(8.0/9.0)-t31805*t31794*t31876*t31885*t31886*(1.0/ \
               2.0)+a1f*c*t31834*t31871*t31872*t31866*(2.0/3.0)-a1p*c*t31834*t31844*t31838*t31839*(2.0/3.0))+t31805* \
               t31838*t31839*t31884+t31805*t31794*t31876*t31885*t31886*(1.0/2.0)+a1p*c*t31834*t31844*t31838*t31839* \
               (2.0/3.0))-rho_b[index]*t31900*(-t31845+t31897+t31822*t31819*(t31845+t31896-t31897-t31824*t31871*t31872* \
               t31866))*2.0-c0*pow(rho_b[index],1.0/3.0)*(cx1*gamma_bb[index]*gx*t31813*t31860*(8.0/3.0)-cx1*t31807* \
               t31862*t31809*t31848*(8.0/3.0)+cx2*t31807*t31861*t31809*t31848*(1.6E1/3.0)-cx2*t31812*t31807*t31852* \
               t31848*t31859)*(8.0/3.0);
        } else {
            v_rho_b_rho_b_[index] = 0.0;
        } 

        if (is_gga_) {

            //V_rho_a_gamma_aa
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t30521 = 1.0/pow(rho_a[index],1.0/3.0);
                double t30522 = c*t30521;
                double t30523 = sqrt(t30522);
                double t30524 = pow(t30522,3.0/2.0);
                double t30525 = c*c;
                double t30526 = 1.0/pow(rho_a[index],2.0/3.0);
                double t30527 = 1.0/c0p;
                double t30528 = b1p*t30523;
                double t30529 = b3p*t30524;
                double t30530 = b4p*t30525*t30526;
                double t30531 = b2p*c*t30521;
                double t30532 = t30530+t30531+t30528+t30529;
                double t30533 = 1.0/t30532;
                double t30534 = t30533*t30527*(1.0/2.0);
                double t30535 = t30534+1.0;
                double t30536 = log(t30535);
                double t30537 = a1p*c*t30521;
                double t30538 = t30537+1.0;
                double t30539 = pow(2.0,1.0/3.0);
                double t30540 = t30539*2.0;
                double t30541 = t30540-2.0;
                double t30542 = two_13*2.0;
                double t30543 = t30542-2.0;
                double t30544 = 1.0/t30543;
                double t30545 = 1.0/c0f;
                double t30546 = 1.0/pow(rho_b[index],1.0/3.0);
                double t30547 = c*t30546;
                double t30548 = sqrt(t30547);
                double t30549 = pow(t30547,3.0/2.0);
                double t30550 = 1.0/pow(rho_b[index],2.0/3.0);
                double t30551 = b1p*t30548;
                double t30552 = b3p*t30549;
                double t30553 = b4p*t30550*t30525;
                double t30554 = b2p*c*t30546;
                double t30555 = t30551+t30552+t30553+t30554;
                double t30556 = 1.0/t30555;
                double t30557 = t30527*t30556*(1.0/2.0);
                double t30558 = t30557+1.0;
                double t30559 = log(t30558);
                double t30560 = a1p*c*t30546;
                double t30561 = t30560+1.0;
                double t30562 = c0p*t30561*t30559*2.0;
                double t30563 = rho_a[index]+rho_b[index];
                double t30564 = 1.0/pow(t30563,1.0/3.0);
                double t30565 = c*t30564;
                double t30566 = sqrt(t30565);
                double t30567 = pow(t30565,3.0/2.0);
                double t30568 = 1.0/pow(t30563,2.0/3.0);
                double t30569 = b1p*t30566;
                double t30570 = b3p*t30567;
                double t30571 = b4p*t30525*t30568;
                double t30572 = b2p*c*t30564;
                double t30573 = t30570+t30571+t30572+t30569;
                double t30574 = 1.0/t30573;
                double t30575 = t30527*t30574*(1.0/2.0);
                double t30576 = t30575+1.0;
                double t30577 = log(t30576);
                double t30578 = a1p*c*t30564;
                double t30579 = t30578+1.0;
                double t30580 = c0p*t30577*t30579*2.0;
                double t30581 = rho_a[index]-rho_b[index];
                double t30582 = t30581*t30581;
                double t30583 = 1.0/t30563;
                double t30584 = t30581*t30583;
                double t30585 = 1.0/(t30563*t30563*t30563*t30563);
                double t30586 = t30582*t30582;
                double t30587 = t30584+1.0;
                double t30588 = pow(t30587,4.0/3.0);
                double t30589 = -t30584+1.0;
                double t30590 = pow(t30589,4.0/3.0);
                double t30591 = t30590+t30588-2.0;
                double t30592 = 1.0/pow(rho_a[index],1.1E1/3.0);
                double t30593 = 1.0/pow(rho_a[index],8.0/3.0);
                double t30594 = gamma_aa[index]*t30593*(1.0/2.0);
                double t30595 = 1.0/pow(rho_b[index],8.0/3.0);
                double t30596 = gamma_bb[index]*t30595*(1.0/2.0);
                double t30597 = t30594+t30596;
                double t30598 = gcab*t30597;
                double t30599 = t30598+1.0;
                double t30600 = gcab*gcab;
                double t30601 = t30597*t30597;
                double t30602 = t30600*t30601;
                double t30603 = gcab*t30597*2.0;
                double t30604 = t30602+t30603+1.0;
                double t30605 = 1.0/pow(rho_a[index],1.9E1/3.0);
                double t30606 = 1.0/(t30599*t30599);
                double t30607 = 1.0/t30604;
                double t30608 = 1.0/(t30604*t30604);
                double t30609 = gamma_aa[index]*gcab*t30592*(8.0/3.0);
                double t30610 = gamma_aa[index]*t30600*t30592*t30597*(8.0/3.0);
                double t30611 = t30610+t30609;
                double t30612 = gcab*t30593;
                double t30613 = t30600*t30593*t30597;
                double t30614 = t30612+t30613;
                double t30615 = b1f*t30523;
                double t30616 = b3f*t30524;
                double t30617 = b4f*t30525*t30526;
                double t30618 = b2f*c*t30521;
                double t30619 = t30615+t30616+t30617+t30618;
                double t30620 = 1.0/t30619;
                double t30621 = t30620*t30545*(1.0/2.0);
                double t30622 = t30621+1.0;
                double t30623 = log(t30622);
                double t30624 = a1f*c*t30521;
                double t30625 = t30624+1.0;
                double t30626 = c0f*t30623*t30625*2.0;
                double t30627 = c0p*t30536*t30538*2.0;
                double t30628 = gcaa*gcaa;
                double t30629 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t30630 = gamma_aa[index]*gcaa*t30593;
                double t30631 = t30630+1.0;
                double t30632 = gamma_aa[index]*gamma_aa[index];
                double t30633 = gamma_aa[index]*gcaa*t30593*2.0;
                double t30634 = t30632*t30628*t30629;
                double t30635 = t30633+t30634+1.0;
                double t30636 = 1.0/t30599;
                double t30637 = 1.0/pow(t30563,4.0/3.0);
                double t30638 = b1f*t30566;
                double t30639 = b3f*t30567;
                double t30640 = b4f*t30525*t30568;
                double t30641 = b2f*c*t30564;
                double t30642 = t30640+t30641+t30638+t30639;
                double t30643 = 1.0/t30642;
                double t30644 = t30643*t30545*(1.0/2.0);
                double t30645 = t30644+1.0;
                double t30646 = log(t30645);
                double t30647 = a1f*c*t30564;
                double t30648 = t30647+1.0;
                double t30650 = c0f*t30646*t30648*2.0;
                double t30649 = -t30650+t30580;
                double t30651 = 1.0/(t30563*t30563);
                double t30679 = t30651*t30581;
                double t30652 = t30583-t30679;
                double t30653 = t30650-t30580;
                double t30654 = 1.0/pow(t30563,5.0/3.0);
                double t30655 = 1.0/sqrt(t30565);
                double t30656 = 1.0/t30576;
                double t30657 = 1.0/(t30573*t30573);
                double t30658 = b4p*t30525*t30654*(2.0/3.0);
                double t30659 = b2p*c*t30637*(1.0/3.0);
                double t30660 = b1p*c*t30637*t30655*(1.0/6.0);
                double t30661 = b3p*c*t30637*t30566*(1.0/2.0);
                double t30662 = t30660+t30661+t30658+t30659;
                double t30663 = t30662*t30656*t30657*t30579;
                double t30664 = 1.0/d2fz0;
                double t30665 = 1.0/Aa;
                double t30666 = b1a*t30566;
                double t30667 = b3a*t30567;
                double t30668 = b4a*t30525*t30568;
                double t30669 = b2a*c*t30564;
                double t30670 = t30666+t30667+t30668+t30669;
                double t30671 = 1.0/t30670;
                double t30672 = t30671*t30665*(1.0/2.0);
                double t30673 = t30672+1.0;
                double t30674 = log(t30673);
                double t30675 = a1a*c*t30564;
                double t30676 = t30675+1.0;
                double t30677 = 1.0/(t30563*t30563*t30563*t30563*t30563);
                double t30678 = pow(t30587,1.0/3.0);
                double t30680 = t30652*t30678*(4.0/3.0);
                double t30681 = pow(t30589,1.0/3.0);
                double t30682 = t30680-t30652*t30681*(4.0/3.0);
                double t30683 = t30585*t30586;
                double t30684 = t30683-1.0;
                double t30685 = 1.0/pow(rho_a[index],4.0/3.0);
                double t30686 = 1.0/pow(rho_a[index],5.0/3.0);
                double t30687 = 1.0/sqrt(t30522);
                double t30688 = 1.0/t30535;
                double t30689 = 1.0/(t30532*t30532);
                double t30690 = b4p*t30525*t30686*(2.0/3.0);
                double t30691 = b2p*c*t30685*(1.0/3.0);
                double t30692 = b1p*c*t30685*t30687*(1.0/6.0);
                double t30693 = b3p*c*t30523*t30685*(1.0/2.0);
                double t30694 = t30690+t30691+t30692+t30693;
                double t30695 = t30538*t30694*t30688*t30689;
                double t30696 = t30626-t30627;
                double t30697 = t30541*t30544*t30696;
                double t30698 = Aa*t30544*t30591*t30664*t30674*t30684*t30676*2.0;
                double t30699 = t30627+t30697;
                double t30700 = 1.0/t30631;
                double t30701 = 1.0/t30635;
                double t30702 = 1.0/(t30631*t30631);
                double t30703 = 1.0/(t30635*t30635);
                double t30704 = gcaa*t30593*2.0;
                double t30705 = gamma_aa[index]*t30628*t30629*2.0;
                double t30706 = t30704+t30705;
                double t30707 = gamma_aa[index]*gcaa*t30592*(1.6E1/3.0);
                double t30708 = t30605*t30632*t30628*(1.6E1/3.0);
                double t30709 = t30707+t30708;
                double t30710 = gx*gx;
                double t30711 = gamma_aa[index]*gx*t30593;
                double t30712 = t30711+1.0;
                double t30713 = gamma_aa[index]*gx*t30593*2.0;
                double t30714 = t30710*t30632*t30629;
                double t30715 = t30713+t30714+1.0;
                double t30716 = 1.0/t30622;
                double t30717 = 1.0/(t30619*t30619);
                double t30718 = b4f*t30525*t30686*(2.0/3.0);
                double t30719 = b2f*c*t30685*(1.0/3.0);
                double t30720 = b1f*c*t30685*t30687*(1.0/6.0);
                double t30721 = b3f*c*t30523*t30685*(1.0/2.0);
                double t30722 = t30720+t30721+t30718+t30719;
                double t30723 = a1f*c*c0f*t30623*t30685*(2.0/3.0);
                double t30724 = a1p*c*c0p*t30536*t30685*(2.0/3.0);
                double t30725 = ccaa1*gcaa*t30700*t30593;
                double t30726 = ccaa2*gamma_aa[index]*t30701*t30628*t30629*2.0;
                double t30727 = t30725+t30726-ccaa1*gamma_aa[index]*t30702*t30628*t30629-ccaa2*t30703*t30632*t30706* \
                   t30628*t30629;
                double t30728 = 1.0/t30712;
                double t30729 = 1.0/t30715;
                double t30730 = 1.0/(t30712*t30712);
                double t30731 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]*rho_a[index]);
                double t30732 = 1.0/(t30715*t30715);
                double t30733 = gx*t30593*2.0;
                double t30734 = gamma_aa[index]*t30710*t30629*2.0;
                double t30735 = t30733+t30734;
                double t30736 = gamma_aa[index]*gx*t30592*(1.6E1/3.0);
                double t30737 = t30710*t30605*t30632*(1.6E1/3.0);
                double t30738 = t30736+t30737;
                v_rho_a_gamma_aa_[index] = -t30727*t30699-(ccab1*gcab*t30636*t30593*(1.0/2.0)-ccab2*t30600*t30601* \
                   t30614*t30608-ccab1*t30600*t30606*t30593*t30597*(1.0/2.0)+ccab2*t30600*t30607*t30593*t30597)*(t30580- \
                   t30627-t30697+t30698+rho_a[index]*(t30724-t30695+t30541*t30544*(t30723+t30695-t30722*t30625*t30716* \
                   t30717-a1p*c*c0p*t30536*t30685*(2.0/3.0)))-t30563*(-t30663+t30544*t30591*t30585*t30586*(t30663-(1.0/ \
                   (t30642*t30642)*t30648*(b2f*c*t30637*(1.0/3.0)+b4f*t30525*t30654*(2.0/3.0)+b1f*c*t30637*t30655*(1.0/ \
                   6.0)+b3f*c*t30637*t30566*(1.0/2.0)))/t30645+a1f*c*c0f*t30637*t30646*(2.0/3.0)-a1p*c*c0p*t30637*t30577* \
                   (2.0/3.0))+a1p*c*c0p*t30637*t30577*(2.0/3.0)-t30544*t30653*t30682*t30585*t30586+t30544*t30653*t30591* \
                   t30586*t30677*4.0+t30544*t30581*t30582*t30591*t30585*t30649*4.0+Aa*t30544*t30591*t30664*t30674*t30676* \
                   (t30586*t30677*4.0-t30581*t30582*t30585*4.0)*2.0-Aa*t30544*t30664*t30682*t30674*t30684*t30676*2.0- \
                   (t30544*1.0/(t30670*t30670)*t30591*t30664*t30684*t30676*(b2a*c*t30637*(1.0/3.0)+b4a*t30525*t30654* \
                   (2.0/3.0)+b1a*c*t30637*t30655*(1.0/6.0)+b3a*c*t30637*t30566*(1.0/2.0)))/t30673+Aa*a1a*c*t30544*t30591* \
                   t30637*t30664*t30674*t30684*(2.0/3.0))+t30544*t30653*t30591*t30585*t30586)-(rho_a[index]*(t30627+t30541* \
                   t30544*(t30626-c0p*t30536*t30538*2.0))+rho_b[index]*(t30562-t30541*t30544*(t30562-c0f*log((t30545* \
                   (1.0/2.0))/(b1f*t30548+b3f*t30549+b2f*c*t30546+b4f*t30550*t30525)+1.0)*(a1f*c*t30546+1.0)*2.0))-t30563* \
                   (t30580+t30698-t30544*t30591*t30585*t30586*t30649))*(ccab1*gcab*t30636*t30592*(4.0/3.0)-ccab2*t30600* \
                   t30601*t30608*(gcab*t30592*(8.0/3.0)+gamma_aa[index]*t30600*t30605*(4.0/3.0)+t30600*t30592*t30597* \
                   (8.0/3.0))-ccab1*gamma_aa[index]*t30600*t30605*t30606*(4.0/3.0)+ccab2*gamma_aa[index]*t30600*t30605* \
                   t30607*(4.0/3.0)-ccab1*t30600*t30606*t30592*t30597*(4.0/3.0)+ccab2*t30600*t30607*t30592*t30597*(8.0/ \
                   3.0)-ccab2*t30600*t30611*t30608*t30593*t30597+ccab2*t30600*t30601*t30611*1.0/(t30604*t30604*t30604) \
                   *t30614*2.0-ccab2*gamma_aa[index]*t30600*t30614*t30608*t30592*t30597*(8.0/3.0)+ccab1*gamma_aa[index]* \
                   gcab*t30600*t30605*t30597*1.0/(t30599*t30599*t30599)*(4.0/3.0))+c0*pow(rho_a[index],1.0/3.0)*(cx1* \
                   gx*t30593*t30728-cx1*gamma_aa[index]*t30710*t30730*t30629+cx2*gamma_aa[index]*t30710*t30629*t30729* \
                   2.0-cx2*t30710*t30632*t30732*t30735*t30629)*(4.0/3.0)-c0*pow(rho_a[index],4.0/3.0)*(cx1*gx*t30592* \
                   t30728*(8.0/3.0)-cx1*gamma_aa[index]*t30710*t30730*t30605*8.0+cx2*gamma_aa[index]*t30710*t30605*t30729* \
                   (3.2E1/3.0)-cx2*t30710*t30605*t30632*t30732*t30735*(1.6E1/3.0)+cx1*gx*t30710*1.0/(t30712*t30712*t30712) \
                   *t30632*t30731*(1.6E1/3.0)-cx2*t30710*t30632*t30732*t30629*(gx*t30592*(1.6E1/3.0)+gamma_aa[index]* \
                   t30710*t30605*(3.2E1/3.0))-cx2*gamma_aa[index]*t30710*t30732*t30629*t30738*2.0+cx2*t30710*t30632*1.0/ \
                   (t30715*t30715*t30715)*t30735*t30629*t30738*2.0)+rho_a[index]*t30727*(t30724-t30695+t30541*t30544* \
                   (t30723-t30724+t30695-t30722*t30625*t30716*t30717))+rho_a[index]*t30699*(ccaa1*gcaa*t30700*t30592* \
                   (8.0/3.0)-ccaa1*gamma_aa[index]*t30702*t30605*t30628*8.0+ccaa2*gamma_aa[index]*t30701*t30605*t30628* \
                   (3.2E1/3.0)-ccaa2*t30703*t30605*t30632*t30706*t30628*(1.6E1/3.0)+ccaa1*gcaa*1.0/(t30631*t30631*t30631) \
                   *t30632*t30731*t30628*(1.6E1/3.0)-ccaa2*t30703*t30632*t30628*t30629*(gcaa*t30592*(1.6E1/3.0)+gamma_aa[index]* \
                   t30605*t30628*(3.2E1/3.0))-ccaa2*gamma_aa[index]*t30703*t30628*t30709*t30629*2.0+ccaa2*t30632*t30706* \
                   1.0/(t30635*t30635*t30635)*t30628*t30709*t30629*2.0);
            } else if (rho_a[index] > cutoff_) {
                double t32313 = 1.0/pow(rho_a[index],1.0/3.0);
                double t32314 = c*t32313;
                double t32315 = sqrt(t32314);
                double t32316 = pow(t32314,3.0/2.0);
                double t32317 = c*c;
                double t32318 = 1.0/pow(rho_a[index],2.0/3.0);
                double t32319 = 1.0/c0p;
                double t32320 = b1p*t32315;
                double t32321 = b3p*t32316;
                double t32322 = b4p*t32317*t32318;
                double t32323 = b2p*c*t32313;
                double t32324 = t32320+t32321+t32322+t32323;
                double t32325 = 1.0/t32324;
                double t32326 = t32325*t32319*(1.0/2.0);
                double t32327 = t32326+1.0;
                double t32328 = log(t32327);
                double t32329 = a1p*c*t32313;
                double t32330 = t32329+1.0;
                double t32331 = 1.0/pow(rho_a[index],8.0/3.0);
                double t32332 = gcaa*gcaa;
                double t32333 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t32334 = gamma_aa[index]*gcaa*t32331;
                double t32335 = t32334+1.0;
                double t32336 = gamma_aa[index]*gamma_aa[index];
                double t32337 = gamma_aa[index]*gcaa*t32331*2.0;
                double t32338 = t32332*t32333*t32336;
                double t32339 = t32337+t32338+1.0;
                double t32340 = pow(2.0,1.0/3.0);
                double t32341 = t32340*2.0;
                double t32342 = t32341-2.0;
                double t32343 = two_13*2.0;
                double t32344 = t32343-2.0;
                double t32345 = 1.0/t32344;
                double t32346 = 1.0/c0f;
                double t32347 = b1f*t32315;
                double t32348 = b3f*t32316;
                double t32349 = b4f*t32317*t32318;
                double t32350 = b2f*c*t32313;
                double t32351 = t32350+t32347+t32348+t32349;
                double t32352 = 1.0/t32351;
                double t32353 = t32352*t32346*(1.0/2.0);
                double t32354 = t32353+1.0;
                double t32355 = log(t32354);
                double t32356 = a1f*c*t32313;
                double t32357 = t32356+1.0;
                double t32358 = c0f*t32355*t32357*2.0;
                double t32359 = c0p*t32330*t32328*2.0;
                double t32360 = 1.0/t32335;
                double t32361 = 1.0/t32339;
                double t32362 = 1.0/pow(rho_a[index],1.9E1/3.0);
                double t32363 = 1.0/(t32335*t32335);
                double t32364 = 1.0/pow(rho_a[index],1.1E1/3.0);
                double t32365 = 1.0/(t32339*t32339);
                double t32366 = gcaa*t32331*2.0;
                double t32367 = gamma_aa[index]*t32332*t32333*2.0;
                double t32368 = t32366+t32367;
                double t32369 = gamma_aa[index]*gcaa*t32364*(1.6E1/3.0);
                double t32370 = t32332*t32362*t32336*(1.6E1/3.0);
                double t32371 = t32370+t32369;
                double t32372 = gx*gx;
                double t32373 = gamma_aa[index]*gx*t32331;
                double t32374 = t32373+1.0;
                double t32375 = gamma_aa[index]*gx*t32331*2.0;
                double t32376 = t32333*t32336*t32372;
                double t32377 = t32375+t32376+1.0;
                double t32378 = 1.0/pow(rho_a[index],4.0/3.0);
                double t32379 = 1.0/pow(rho_a[index],5.0/3.0);
                double t32380 = 1.0/sqrt(t32314);
                double t32381 = 1.0/t32327;
                double t32382 = 1.0/(t32324*t32324);
                double t32383 = b4p*t32317*t32379*(2.0/3.0);
                double t32384 = b2p*c*t32378*(1.0/3.0);
                double t32385 = b1p*c*t32380*t32378*(1.0/6.0);
                double t32386 = b3p*c*t32315*t32378*(1.0/2.0);
                double t32387 = t32383+t32384+t32385+t32386;
                double t32388 = t32330*t32381*t32382*t32387;
                double t32389 = ccaa1*gcaa*t32331*t32360;
                double t32390 = ccaa2*gamma_aa[index]*t32332*t32333*t32361*2.0;
                double t32391 = t32390+t32389-ccaa1*gamma_aa[index]*t32332*t32333*t32363-ccaa2*t32332*t32333*t32336* \
                   t32365*t32368;
                double t32392 = 1.0/t32374;
                double t32393 = 1.0/t32377;
                double t32394 = 1.0/(t32374*t32374);
                double t32395 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]*rho_a[index]);
                double t32396 = 1.0/(t32377*t32377);
                double t32397 = gx*t32331*2.0;
                double t32398 = gamma_aa[index]*t32333*t32372*2.0;
                double t32399 = t32397+t32398;
                double t32400 = gamma_aa[index]*gx*t32364*(1.6E1/3.0);
                double t32401 = t32362*t32336*t32372*(1.6E1/3.0);
                double t32402 = t32400+t32401;
                v_rho_a_gamma_aa_[index] = -t32391*(t32359+t32342*t32345*(t32358-c0p*t32330*t32328*2.0))+rho_a[index]* \
                   t32391*(-t32388+t32342*t32345*(t32388-(1.0/(t32351*t32351)*t32357*(b2f*c*t32378*(1.0/3.0)+b4f*t32317* \
                   t32379*(2.0/3.0)+b1f*c*t32380*t32378*(1.0/6.0)+b3f*c*t32315*t32378*(1.0/2.0)))/t32354+a1f*c*c0f*t32355* \
                   t32378*(2.0/3.0)-a1p*c*c0p*t32328*t32378*(2.0/3.0))+a1p*c*c0p*t32328*t32378*(2.0/3.0))+c0*pow(rho_a[index],1.0/ \
                   3.0)*(cx1*gx*t32331*t32392-cx1*gamma_aa[index]*t32333*t32372*t32394+cx2*gamma_aa[index]*t32333*t32372* \
                   t32393*2.0-cx2*t32333*t32336*t32372*t32396*t32399)*(4.0/3.0)+rho_a[index]*(t32359+t32342*t32345*(t32358- \
                   t32359))*(ccaa1*gcaa*t32360*t32364*(8.0/3.0)+ccaa2*gamma_aa[index]*t32332*t32361*t32362*(3.2E1/3.0) \
                   -ccaa1*gamma_aa[index]*t32332*t32362*t32363*8.0-ccaa2*t32332*t32362*t32336*t32365*t32368*(1.6E1/3.0) \
                   +ccaa1*gcaa*t32332*1.0/(t32335*t32335*t32335)*t32336*t32395*(1.6E1/3.0)-ccaa2*t32332*t32333*t32336* \
                   t32365*(gcaa*t32364*(1.6E1/3.0)+gamma_aa[index]*t32332*t32362*(3.2E1/3.0))-ccaa2*gamma_aa[index]*t32332* \
                   t32333*t32371*t32365*2.0+ccaa2*t32332*t32333*t32371*t32336*1.0/(t32339*t32339*t32339)*t32368*2.0)- \
                   c0*pow(rho_a[index],4.0/3.0)*(cx1*gx*t32364*t32392*(8.0/3.0)-cx1*gamma_aa[index]*t32362*t32372*t32394* \
                   8.0+cx2*gamma_aa[index]*t32362*t32372*t32393*(3.2E1/3.0)-cx2*t32362*t32336*t32372*t32396*t32399*(1.6E1/ \
                   3.0)+cx1*gx*t32336*t32372*1.0/(t32374*t32374*t32374)*t32395*(1.6E1/3.0)-cx2*t32333*t32336*t32372*t32396* \
                   (gx*t32364*(1.6E1/3.0)+gamma_aa[index]*t32362*t32372*(3.2E1/3.0))-cx2*gamma_aa[index]*t32402*t32333* \
                   t32372*t32396*2.0+cx2*t32402*t32333*t32336*t32372*1.0/(t32377*t32377*t32377)*t32399*2.0);
            } else if (rho_b[index] > cutoff_) {
                v_rho_a_gamma_aa_[index] = 0.0;
            } else {
                v_rho_a_gamma_aa_[index] = 0.0;
            } 

            //V_rho_a_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_a_gamma_ab_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_a_gamma_ab_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_a_gamma_ab_[index] = 0.0;
            } else {
                v_rho_a_gamma_ab_[index] = 0.0;
            } 

            //V_rho_a_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t30741 = 1.0/pow(rho_a[index],1.0/3.0);
                double t30742 = c*t30741;
                double t30743 = sqrt(t30742);
                double t30744 = pow(t30742,3.0/2.0);
                double t30745 = c*c;
                double t30746 = 1.0/pow(rho_a[index],2.0/3.0);
                double t30747 = 1.0/c0p;
                double t30748 = b1p*t30743;
                double t30749 = b3p*t30744;
                double t30750 = b4p*t30745*t30746;
                double t30751 = b2p*c*t30741;
                double t30752 = t30750+t30751+t30748+t30749;
                double t30753 = 1.0/t30752;
                double t30754 = t30753*t30747*(1.0/2.0);
                double t30755 = t30754+1.0;
                double t30756 = log(t30755);
                double t30757 = a1p*c*t30741;
                double t30758 = t30757+1.0;
                double t30759 = pow(2.0,1.0/3.0);
                double t30760 = t30759*2.0;
                double t30761 = t30760-2.0;
                double t30762 = two_13*2.0;
                double t30763 = t30762-2.0;
                double t30764 = 1.0/t30763;
                double t30765 = 1.0/c0f;
                double t30766 = 1.0/pow(rho_b[index],1.0/3.0);
                double t30767 = c*t30766;
                double t30768 = sqrt(t30767);
                double t30769 = pow(t30767,3.0/2.0);
                double t30770 = 1.0/pow(rho_b[index],2.0/3.0);
                double t30771 = b1p*t30768;
                double t30772 = b3p*t30769;
                double t30773 = b4p*t30770*t30745;
                double t30774 = b2p*c*t30766;
                double t30775 = t30771+t30772+t30773+t30774;
                double t30776 = 1.0/t30775;
                double t30777 = t30747*t30776*(1.0/2.0);
                double t30778 = t30777+1.0;
                double t30779 = log(t30778);
                double t30780 = a1p*c*t30766;
                double t30781 = t30780+1.0;
                double t30782 = c0p*t30781*t30779*2.0;
                double t30783 = rho_a[index]+rho_b[index];
                double t30784 = 1.0/pow(t30783,1.0/3.0);
                double t30785 = c*t30784;
                double t30786 = sqrt(t30785);
                double t30787 = pow(t30785,3.0/2.0);
                double t30788 = 1.0/pow(t30783,2.0/3.0);
                double t30789 = b1p*t30786;
                double t30790 = b3p*t30787;
                double t30791 = b4p*t30745*t30788;
                double t30792 = b2p*c*t30784;
                double t30793 = t30790+t30791+t30792+t30789;
                double t30794 = 1.0/t30793;
                double t30795 = t30747*t30794*(1.0/2.0);
                double t30796 = t30795+1.0;
                double t30797 = log(t30796);
                double t30798 = a1p*c*t30784;
                double t30799 = t30798+1.0;
                double t30800 = c0p*t30797*t30799*2.0;
                double t30801 = rho_a[index]-rho_b[index];
                double t30802 = t30801*t30801;
                double t30803 = 1.0/t30783;
                double t30804 = t30801*t30803;
                double t30805 = 1.0/(t30783*t30783*t30783*t30783);
                double t30806 = t30802*t30802;
                double t30807 = t30804+1.0;
                double t30808 = pow(t30807,4.0/3.0);
                double t30809 = -t30804+1.0;
                double t30810 = pow(t30809,4.0/3.0);
                double t30811 = t30810+t30808-2.0;
                double t30812 = gcab*gcab;
                double t30813 = 1.0/pow(rho_a[index],1.1E1/3.0);
                double t30814 = 1.0/pow(rho_b[index],8.0/3.0);
                double t30815 = 1.0/pow(rho_a[index],8.0/3.0);
                double t30816 = gamma_aa[index]*t30815*(1.0/2.0);
                double t30817 = gamma_bb[index]*t30814*(1.0/2.0);
                double t30818 = t30816+t30817;
                double t30819 = gamma_aa[index]*gcab*t30813*(8.0/3.0);
                double t30820 = gamma_aa[index]*t30812*t30813*t30818*(8.0/3.0);
                double t30821 = t30820+t30819;
                double t30822 = t30818*t30818;
                double t30823 = t30812*t30822;
                double t30824 = gcab*t30818*2.0;
                double t30825 = t30823+t30824+1.0;
                double t30826 = gcab*t30814;
                double t30827 = t30812*t30814*t30818;
                double t30828 = t30826+t30827;
                double t30829 = 1.0/(t30825*t30825);
                double t30830 = gcab*t30818;
                double t30831 = t30830+1.0;
                double t30832 = c0p*t30756*t30758*2.0;
                double t30833 = 1.0/(t30831*t30831);
                double t30834 = 1.0/t30825;
                double t30835 = 1.0/pow(t30783,4.0/3.0);
                double t30836 = b1f*t30786;
                double t30837 = b3f*t30787;
                double t30838 = b4f*t30745*t30788;
                double t30839 = b2f*c*t30784;
                double t30840 = t30836+t30837+t30838+t30839;
                double t30841 = 1.0/t30840;
                double t30842 = t30841*t30765*(1.0/2.0);
                double t30843 = t30842+1.0;
                double t30844 = log(t30843);
                double t30845 = a1f*c*t30784;
                double t30846 = t30845+1.0;
                double t30848 = c0f*t30844*t30846*2.0;
                double t30847 = t30800-t30848;
                double t30849 = 1.0/(t30783*t30783);
                double t30876 = t30801*t30849;
                double t30850 = t30803-t30876;
                double t30851 = 1.0/pow(t30783,5.0/3.0);
                double t30852 = 1.0/sqrt(t30785);
                double t30853 = 1.0/t30796;
                double t30854 = 1.0/(t30793*t30793);
                double t30855 = b4p*t30851*t30745*(2.0/3.0);
                double t30856 = b2p*c*t30835*(1.0/3.0);
                double t30857 = b1p*c*t30852*t30835*(1.0/6.0);
                double t30858 = b3p*c*t30835*t30786*(1.0/2.0);
                double t30859 = t30855+t30856+t30857+t30858;
                double t30860 = t30853*t30854*t30859*t30799;
                double t30861 = 1.0/d2fz0;
                double t30862 = 1.0/Aa;
                double t30863 = b1a*t30786;
                double t30864 = b3a*t30787;
                double t30865 = b4a*t30745*t30788;
                double t30866 = b2a*c*t30784;
                double t30867 = t30863+t30864+t30865+t30866;
                double t30868 = 1.0/t30867;
                double t30869 = t30862*t30868*(1.0/2.0);
                double t30870 = t30869+1.0;
                double t30871 = log(t30870);
                double t30872 = a1a*c*t30784;
                double t30873 = t30872+1.0;
                double t30874 = 1.0/(t30783*t30783*t30783*t30783*t30783);
                double t30875 = pow(t30807,1.0/3.0);
                double t30877 = t30850*t30875*(4.0/3.0);
                double t30878 = pow(t30809,1.0/3.0);
                double t30879 = t30877-t30850*t30878*(4.0/3.0);
                double t30880 = t30805*t30806;
                double t30881 = t30880-1.0;
                double t30882 = a1f*c*t30741;
                double t30883 = t30882+1.0;
                double t30884 = b1f*t30743;
                double t30885 = b3f*t30744;
                double t30886 = b4f*t30745*t30746;
                double t30887 = b2f*c*t30741;
                double t30888 = t30884+t30885+t30886+t30887;
                double t30889 = 1.0/t30888;
                double t30890 = t30765*t30889*(1.0/2.0);
                double t30891 = t30890+1.0;
                double t30892 = 1.0/pow(rho_a[index],4.0/3.0);
                double t30893 = 1.0/pow(rho_a[index],5.0/3.0);
                double t30894 = 1.0/sqrt(t30742);
                double t30895 = log(t30891);
                double t30896 = 1.0/t30755;
                double t30897 = 1.0/(t30752*t30752);
                double t30898 = b4p*t30745*t30893*(2.0/3.0);
                double t30899 = b2p*c*t30892*(1.0/3.0);
                double t30900 = b1p*c*t30892*t30894*(1.0/6.0);
                double t30901 = b3p*c*t30743*t30892*(1.0/2.0);
                double t30902 = t30900+t30901+t30898+t30899;
                double t30903 = t30902*t30758*t30896*t30897;
                double t30904 = Aa*t30811*t30861*t30871*t30764*t30881*t30873*2.0;
                double t30905 = t30832-c0f*t30883*t30895*2.0;
                v_rho_a_gamma_bb_[index] = (rho_a[index]*(t30832-t30761*t30905*t30764)+rho_b[index]*(t30782-t30761* \
                   t30764*(t30782-c0f*log((t30765*(1.0/2.0))/(b1f*t30768+b3f*t30769+b2f*c*t30766+b4f*t30770*t30745)+1.0) \
                   *(a1f*c*t30766+1.0)*2.0))-t30783*(t30800+t30904-t30811*t30805*t30806*t30764*t30847))*(ccab2*t30812* \
                   t30821*t30814*t30818*t30829-ccab2*t30812*t30821*t30822*1.0/(t30825*t30825*t30825)*t30828*2.0+ccab1* \
                   gamma_aa[index]*t30812*t30813*t30814*t30833*(4.0/3.0)-ccab2*gamma_aa[index]*t30812*t30813*t30814*t30834* \
                   (4.0/3.0)+ccab2*gamma_aa[index]*t30812*t30813*t30818*t30828*t30829*(8.0/3.0)+ccab2*gamma_aa[index]* \
                   (t30812*t30812)*t30813*t30822*t30814*t30829*(4.0/3.0)-ccab1*gamma_aa[index]*gcab*t30812*t30813*1.0/ \
                   (t30831*t30831*t30831)*t30814*t30818*(4.0/3.0))-((ccab1*gcab*t30814*(1.0/2.0))/t30831-ccab1*t30812* \
                   t30814*t30833*t30818*(1.0/2.0)+ccab2*t30812*t30814*t30834*t30818-ccab2*t30812*t30822*t30828*t30829) \
                   *(t30800-t30832+t30904+rho_a[index]*(-t30903+t30761*t30764*(t30903-(t30883*1.0/(t30888*t30888)*(b2f* \
                   c*t30892*(1.0/3.0)+b4f*t30745*t30893*(2.0/3.0)+b1f*c*t30892*t30894*(1.0/6.0)+b3f*c*t30743*t30892*(1.0/ \
                   2.0)))/t30891+a1f*c*c0f*t30892*t30895*(2.0/3.0)-a1p*c*c0p*t30756*t30892*(2.0/3.0))+a1p*c*c0p*t30756* \
                   t30892*(2.0/3.0))-t30783*(-t30860+t30811*t30805*t30806*t30764*(t30860-(1.0/(t30840*t30840)*t30846* \
                   (b2f*c*t30835*(1.0/3.0)+b4f*t30851*t30745*(2.0/3.0)+b1f*c*t30852*t30835*(1.0/6.0)+b3f*c*t30835*t30786* \
                   (1.0/2.0)))/t30843+a1f*c*c0f*t30835*t30844*(2.0/3.0)-a1p*c*c0p*t30835*t30797*(2.0/3.0))+a1p*c*c0p* \
                   t30835*t30797*(2.0/3.0)-t30811*t30806*t30764*t30847*t30874*4.0+t30805*t30806*t30764*t30847*t30879+ \
                   t30801*t30802*t30811*t30805*t30764*t30847*4.0+Aa*t30811*t30861*t30871*t30764*t30873*(t30806*t30874* \
                   4.0-t30801*t30802*t30805*4.0)*2.0-Aa*t30861*t30871*t30764*t30881*t30873*t30879*2.0-(t30811*t30861* \
                   t30764*t30881*t30873*1.0/(t30867*t30867)*(b2a*c*t30835*(1.0/3.0)+b4a*t30851*t30745*(2.0/3.0)+b1a*c* \
                   t30852*t30835*(1.0/6.0)+b3a*c*t30835*t30786*(1.0/2.0)))/t30870+Aa*a1a*c*t30811*t30861*t30835*t30871* \
                   t30764*t30881*(2.0/3.0))+t30761*t30905*t30764-t30811*t30805*t30806*t30764*t30847);
            } else if (rho_a[index] > cutoff_) {
                v_rho_a_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_a_gamma_bb_[index] = 0.0;
            } else {
                v_rho_a_gamma_bb_[index] = 0.0;
            } 

            //V_rho_b_gamma_aa
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t30907 = 1.0/pow(rho_a[index],1.0/3.0);
                double t30908 = c*t30907;
                double t30909 = sqrt(t30908);
                double t30910 = pow(t30908,3.0/2.0);
                double t30911 = c*c;
                double t30912 = 1.0/pow(rho_a[index],2.0/3.0);
                double t30913 = 1.0/c0p;
                double t30914 = b1p*t30909;
                double t30915 = b3p*t30910;
                double t30916 = b4p*t30911*t30912;
                double t30917 = b2p*c*t30907;
                double t30918 = t30914+t30915+t30916+t30917;
                double t30919 = 1.0/t30918;
                double t30920 = t30913*t30919*(1.0/2.0);
                double t30921 = t30920+1.0;
                double t30922 = log(t30921);
                double t30923 = a1p*c*t30907;
                double t30924 = t30923+1.0;
                double t30925 = pow(2.0,1.0/3.0);
                double t30926 = t30925*2.0;
                double t30927 = t30926-2.0;
                double t30928 = two_13*2.0;
                double t30929 = t30928-2.0;
                double t30930 = 1.0/t30929;
                double t30931 = 1.0/c0f;
                double t30932 = 1.0/pow(rho_b[index],1.0/3.0);
                double t30933 = c*t30932;
                double t30934 = sqrt(t30933);
                double t30935 = pow(t30933,3.0/2.0);
                double t30936 = 1.0/pow(rho_b[index],2.0/3.0);
                double t30937 = b1p*t30934;
                double t30938 = b3p*t30935;
                double t30939 = b4p*t30911*t30936;
                double t30940 = b2p*c*t30932;
                double t30941 = t30940+t30937+t30938+t30939;
                double t30942 = 1.0/t30941;
                double t30943 = t30913*t30942*(1.0/2.0);
                double t30944 = t30943+1.0;
                double t30945 = log(t30944);
                double t30946 = a1p*c*t30932;
                double t30947 = t30946+1.0;
                double t30948 = c0p*t30945*t30947*2.0;
                double t30949 = rho_a[index]+rho_b[index];
                double t30950 = 1.0/pow(t30949,1.0/3.0);
                double t30951 = c*t30950;
                double t30952 = sqrt(t30951);
                double t30953 = pow(t30951,3.0/2.0);
                double t30954 = 1.0/pow(t30949,2.0/3.0);
                double t30955 = b1p*t30952;
                double t30956 = b3p*t30953;
                double t30957 = b4p*t30911*t30954;
                double t30958 = b2p*c*t30950;
                double t30959 = t30955+t30956+t30957+t30958;
                double t30960 = 1.0/t30959;
                double t30961 = t30913*t30960*(1.0/2.0);
                double t30962 = t30961+1.0;
                double t30963 = log(t30962);
                double t30964 = a1p*c*t30950;
                double t30965 = t30964+1.0;
                double t30966 = c0p*t30963*t30965*2.0;
                double t30967 = rho_a[index]-rho_b[index];
                double t30968 = t30967*t30967;
                double t30969 = 1.0/t30949;
                double t30970 = t30967*t30969;
                double t30971 = 1.0/(t30949*t30949*t30949*t30949);
                double t30972 = t30968*t30968;
                double t30973 = t30970+1.0;
                double t30974 = pow(t30973,4.0/3.0);
                double t30975 = -t30970+1.0;
                double t30976 = pow(t30975,4.0/3.0);
                double t30977 = t30974+t30976-2.0;
                double t30978 = gcab*gcab;
                double t30979 = 1.0/pow(rho_b[index],1.1E1/3.0);
                double t30980 = 1.0/pow(rho_a[index],8.0/3.0);
                double t30981 = gamma_aa[index]*t30980*(1.0/2.0);
                double t30982 = 1.0/pow(rho_b[index],8.0/3.0);
                double t30983 = gamma_bb[index]*t30982*(1.0/2.0);
                double t30984 = t30981+t30983;
                double t30985 = gamma_bb[index]*gcab*t30979*(8.0/3.0);
                double t30986 = gamma_bb[index]*t30984*t30978*t30979*(8.0/3.0);
                double t30987 = t30985+t30986;
                double t30988 = t30984*t30984;
                double t30989 = t30978*t30988;
                double t30990 = gcab*t30984*2.0;
                double t30991 = t30990+t30989+1.0;
                double t30992 = gcab*t30980;
                double t30993 = t30980*t30984*t30978;
                double t30994 = t30992+t30993;
                double t30995 = 1.0/(t30991*t30991);
                double t30996 = gcab*t30984;
                double t30997 = t30996+1.0;
                double t30998 = c0p*t30922*t30924*2.0;
                double t30999 = 1.0/(t30997*t30997);
                double t31000 = 1.0/t30991;
                double t31001 = 1.0/pow(t30949,4.0/3.0);
                double t31002 = b1f*t30952;
                double t31003 = b3f*t30953;
                double t31004 = b4f*t30911*t30954;
                double t31005 = b2f*c*t30950;
                double t31006 = t31002+t31003+t31004+t31005;
                double t31007 = 1.0/t31006;
                double t31008 = t30931*t31007*(1.0/2.0);
                double t31009 = t31008+1.0;
                double t31010 = log(t31009);
                double t31011 = a1f*c*t30950;
                double t31012 = t31011+1.0;
                double t31014 = c0f*t31010*t31012*2.0;
                double t31013 = t30966-t31014;
                double t31015 = 1.0/(t30949*t30949);
                double t31016 = t30967*t31015;
                double t31017 = t30969+t31016;
                double t31018 = 1.0/pow(t30949,5.0/3.0);
                double t31019 = 1.0/sqrt(t30951);
                double t31020 = 1.0/t30962;
                double t31021 = 1.0/(t30959*t30959);
                double t31022 = b4p*t30911*t31018*(2.0/3.0);
                double t31023 = b2p*c*t31001*(1.0/3.0);
                double t31024 = b1p*c*t31001*t31019*(1.0/6.0);
                double t31025 = b3p*c*t30952*t31001*(1.0/2.0);
                double t31026 = t31022+t31023+t31024+t31025;
                double t31027 = 1.0/d2fz0;
                double t31028 = 1.0/Aa;
                double t31029 = b1a*t30952;
                double t31030 = b3a*t30953;
                double t31031 = b4a*t30911*t30954;
                double t31032 = b2a*c*t30950;
                double t31033 = t31030+t31031+t31032+t31029;
                double t31034 = 1.0/t31033;
                double t31035 = t31034*t31028*(1.0/2.0);
                double t31036 = t31035+1.0;
                double t31037 = log(t31036);
                double t31038 = a1a*c*t30950;
                double t31039 = t31038+1.0;
                double t31040 = 1.0/(t30949*t30949*t30949*t30949*t30949);
                double t31041 = pow(t30973,1.0/3.0);
                double t31042 = t31041*t31017*(4.0/3.0);
                double t31043 = pow(t30975,1.0/3.0);
                double t31044 = t31042-t31043*t31017*(4.0/3.0);
                double t31045 = t30971*t30972;
                double t31046 = t31045-1.0;
                double t31047 = t30965*t31020*t31021*t31026;
                double t31048 = a1f*c*t30932;
                double t31049 = t31048+1.0;
                double t31050 = b1f*t30934;
                double t31051 = b3f*t30935;
                double t31052 = b4f*t30911*t30936;
                double t31053 = b2f*c*t30932;
                double t31054 = t31050+t31051+t31052+t31053;
                double t31055 = 1.0/t31054;
                double t31056 = t30931*t31055*(1.0/2.0);
                double t31057 = t31056+1.0;
                double t31058 = 1.0/pow(rho_b[index],4.0/3.0);
                double t31059 = 1.0/pow(rho_b[index],5.0/3.0);
                double t31060 = 1.0/sqrt(t30933);
                double t31061 = log(t31057);
                double t31062 = 1.0/t30944;
                double t31063 = 1.0/(t30941*t30941);
                double t31064 = b4p*t30911*t31059*(2.0/3.0);
                double t31065 = b2p*c*t31058*(1.0/3.0);
                double t31066 = b1p*c*t31060*t31058*(1.0/6.0);
                double t31067 = b3p*c*t30934*t31058*(1.0/2.0);
                double t31068 = t31064+t31065+t31066+t31067;
                double t31069 = t30947*t31062*t31063*t31068;
                double t31070 = t30948-c0f*t31061*t31049*2.0;
                double t31071 = Aa*t30930*t30977*t31027*t31037*t31046*t31039*2.0;
                v_rho_b_gamma_aa_[index] = -((ccab1*gcab*t30980*(1.0/2.0))/t30997-ccab1*t30980*t30984*t30978*t30999* \
                   (1.0/2.0)-ccab2*t30994*t30995*t30978*t30988+ccab2*t30980*t30984*t30978*t31000)*(-t30948+t30966+t31071+ \
                   t30949*(t31047-t30930*t30971*t30972*t30977*(t31047-(t31012*1.0/(t31006*t31006)*(b2f*c*t31001*(1.0/ \
                   3.0)+b4f*t30911*t31018*(2.0/3.0)+b1f*c*t31001*t31019*(1.0/6.0)+b3f*c*t30952*t31001*(1.0/2.0)))/t31009+ \
                   a1f*c*c0f*t31001*t31010*(2.0/3.0)-a1p*c*c0p*t30963*t31001*(2.0/3.0))-a1p*c*c0p*t30963*t31001*(2.0/ \
                   3.0)+t30930*t30971*t30972*t31013*t31044+t30930*t30972*t30977*t31013*t31040*4.0+t30930*t30971*t30967* \
                   t30968*t30977*t31013*4.0-Aa*t30930*t30977*t31027*t31037*t31039*(t30972*t31040*4.0+t30971*t30967*t30968* \
                   4.0)*2.0-Aa*t30930*t31044*t31027*t31037*t31046*t31039*2.0+(t30930*t30977*1.0/(t31033*t31033)*t31027* \
                   t31046*t31039*(b2a*c*t31001*(1.0/3.0)+b4a*t30911*t31018*(2.0/3.0)+b1a*c*t31001*t31019*(1.0/6.0)+b3a* \
                   c*t30952*t31001*(1.0/2.0)))/t31036-Aa*a1a*c*t30930*t30977*t31001*t31027*t31037*t31046*(2.0/3.0))+rho_b[index]* \
                   (-t31069+t30930*t30927*(t31069-(1.0/(t31054*t31054)*t31049*(b2f*c*t31058*(1.0/3.0)+b4f*t30911*t31059* \
                   (2.0/3.0)+b1f*c*t31060*t31058*(1.0/6.0)+b3f*c*t30934*t31058*(1.0/2.0)))/t31057+a1f*c*c0f*t31061*t31058* \
                   (2.0/3.0)-a1p*c*c0p*t30945*t31058*(2.0/3.0))+a1p*c*c0p*t30945*t31058*(2.0/3.0))+t30930*t30927*t31070- \
                   t30930*t30971*t30972*t30977*t31013)+(rho_b[index]*(t30948-t30930*t30927*t31070)+rho_a[index]*(t30998- \
                   t30930*t30927*(t30998-c0f*log((t30931*(1.0/2.0))/(b1f*t30909+b3f*t30910+b2f*c*t30907+b4f*t30911*t30912) \
                   +1.0)*(a1f*c*t30907+1.0)*2.0))-t30949*(t30966+t31071-t30930*t30971*t30972*t30977*t31013))*(ccab2*t30980* \
                   t30984*t30995*t30978*t30987-ccab2*1.0/(t30991*t30991*t30991)*t30994*t30978*t30987*t30988*2.0+ccab1* \
                   gamma_bb[index]*t30980*t30978*t30979*t30999*(4.0/3.0)-ccab2*gamma_bb[index]*t30980*t30978*t30979*t31000* \
                   (4.0/3.0)+ccab2*gamma_bb[index]*t30984*t30994*t30995*t30978*t30979*(8.0/3.0)+ccab2*gamma_bb[index]* \
                   t30980*t30995*(t30978*t30978)*t30979*t30988*(4.0/3.0)-ccab1*gamma_bb[index]*gcab*t30980*t30984*t30978* \
                   t30979*1.0/(t30997*t30997*t30997)*(4.0/3.0));
            } else if (rho_a[index] > cutoff_) {
                v_rho_b_gamma_aa_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_b_gamma_aa_[index] = 0.0;
            } else {
                v_rho_b_gamma_aa_[index] = 0.0;
            } 

            //V_rho_b_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_b_gamma_ab_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_b_gamma_ab_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_b_gamma_ab_[index] = 0.0;
            } else {
                v_rho_b_gamma_ab_[index] = 0.0;
            } 

            //V_rho_b_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t31074 = 1.0/pow(rho_a[index],1.0/3.0);
                double t31075 = c*t31074;
                double t31076 = sqrt(t31075);
                double t31077 = pow(t31075,3.0/2.0);
                double t31078 = c*c;
                double t31079 = 1.0/pow(rho_a[index],2.0/3.0);
                double t31080 = 1.0/c0p;
                double t31081 = b1p*t31076;
                double t31082 = b3p*t31077;
                double t31083 = b4p*t31078*t31079;
                double t31084 = b2p*c*t31074;
                double t31085 = t31081+t31082+t31083+t31084;
                double t31086 = 1.0/t31085;
                double t31087 = t31080*t31086*(1.0/2.0);
                double t31088 = t31087+1.0;
                double t31089 = log(t31088);
                double t31090 = a1p*c*t31074;
                double t31091 = t31090+1.0;
                double t31092 = pow(2.0,1.0/3.0);
                double t31093 = t31092*2.0;
                double t31094 = t31093-2.0;
                double t31095 = two_13*2.0;
                double t31096 = t31095-2.0;
                double t31097 = 1.0/t31096;
                double t31098 = 1.0/c0f;
                double t31099 = 1.0/pow(rho_b[index],1.0/3.0);
                double t31100 = c*t31099;
                double t31101 = sqrt(t31100);
                double t31102 = pow(t31100,3.0/2.0);
                double t31103 = 1.0/pow(rho_b[index],2.0/3.0);
                double t31104 = b1p*t31101;
                double t31105 = b3p*t31102;
                double t31106 = b4p*t31103*t31078;
                double t31107 = b2p*c*t31099;
                double t31108 = t31104+t31105+t31106+t31107;
                double t31109 = 1.0/t31108;
                double t31110 = t31080*t31109*(1.0/2.0);
                double t31111 = t31110+1.0;
                double t31112 = log(t31111);
                double t31113 = a1p*c*t31099;
                double t31114 = t31113+1.0;
                double t31115 = c0p*t31112*t31114*2.0;
                double t31116 = rho_a[index]+rho_b[index];
                double t31117 = 1.0/pow(t31116,1.0/3.0);
                double t31118 = c*t31117;
                double t31119 = sqrt(t31118);
                double t31120 = pow(t31118,3.0/2.0);
                double t31121 = 1.0/pow(t31116,2.0/3.0);
                double t31122 = b1p*t31119;
                double t31123 = b3p*t31120;
                double t31124 = b4p*t31121*t31078;
                double t31125 = b2p*c*t31117;
                double t31126 = t31122+t31123+t31124+t31125;
                double t31127 = 1.0/t31126;
                double t31128 = t31080*t31127*(1.0/2.0);
                double t31129 = t31128+1.0;
                double t31130 = log(t31129);
                double t31131 = a1p*c*t31117;
                double t31132 = t31131+1.0;
                double t31133 = c0p*t31130*t31132*2.0;
                double t31134 = rho_a[index]-rho_b[index];
                double t31135 = t31134*t31134;
                double t31136 = 1.0/t31116;
                double t31137 = t31134*t31136;
                double t31138 = 1.0/(t31116*t31116*t31116*t31116);
                double t31139 = t31135*t31135;
                double t31140 = t31137+1.0;
                double t31141 = pow(t31140,4.0/3.0);
                double t31142 = -t31137+1.0;
                double t31143 = pow(t31142,4.0/3.0);
                double t31144 = t31141+t31143-2.0;
                double t31145 = 1.0/pow(rho_b[index],1.1E1/3.0);
                double t31146 = 1.0/pow(rho_a[index],8.0/3.0);
                double t31147 = gamma_aa[index]*t31146*(1.0/2.0);
                double t31148 = 1.0/pow(rho_b[index],8.0/3.0);
                double t31149 = gamma_bb[index]*t31148*(1.0/2.0);
                double t31150 = t31147+t31149;
                double t31151 = gcab*t31150;
                double t31152 = t31151+1.0;
                double t31153 = gcab*gcab;
                double t31154 = t31150*t31150;
                double t31155 = t31153*t31154;
                double t31156 = gcab*t31150*2.0;
                double t31157 = t31155+t31156+1.0;
                double t31158 = 1.0/pow(rho_b[index],1.9E1/3.0);
                double t31159 = 1.0/(t31152*t31152);
                double t31160 = 1.0/t31157;
                double t31161 = 1.0/(t31157*t31157);
                double t31162 = gamma_bb[index]*gcab*t31145*(8.0/3.0);
                double t31163 = gamma_bb[index]*t31150*t31153*t31145*(8.0/3.0);
                double t31164 = t31162+t31163;
                double t31165 = gcab*t31148;
                double t31166 = t31150*t31153*t31148;
                double t31167 = t31165+t31166;
                double t31168 = b1f*t31101;
                double t31169 = b3f*t31102;
                double t31170 = b4f*t31103*t31078;
                double t31171 = b2f*c*t31099;
                double t31172 = t31170+t31171+t31168+t31169;
                double t31173 = 1.0/t31172;
                double t31174 = t31173*t31098*(1.0/2.0);
                double t31175 = t31174+1.0;
                double t31176 = log(t31175);
                double t31177 = a1f*c*t31099;
                double t31178 = t31177+1.0;
                double t31248 = c0f*t31176*t31178*2.0;
                double t31179 = t31115-t31248;
                double t31249 = t31094*t31097*t31179;
                double t31180 = t31115-t31249;
                double t31181 = gcaa*gcaa;
                double t31182 = 1.0/pow(rho_b[index],1.6E1/3.0);
                double t31183 = gamma_bb[index]*gcaa*t31148;
                double t31184 = t31183+1.0;
                double t31185 = gamma_bb[index]*gamma_bb[index];
                double t31186 = gamma_bb[index]*gcaa*t31148*2.0;
                double t31187 = t31181*t31182*t31185;
                double t31188 = t31186+t31187+1.0;
                double t31189 = 1.0/t31152;
                double t31190 = 1.0/pow(t31116,4.0/3.0);
                double t31191 = b1f*t31119;
                double t31192 = b3f*t31120;
                double t31193 = b4f*t31121*t31078;
                double t31194 = b2f*c*t31117;
                double t31195 = t31191+t31192+t31193+t31194;
                double t31196 = 1.0/t31195;
                double t31197 = t31196*t31098*(1.0/2.0);
                double t31198 = t31197+1.0;
                double t31199 = log(t31198);
                double t31200 = a1f*c*t31117;
                double t31201 = t31200+1.0;
                double t31203 = c0f*t31201*t31199*2.0;
                double t31202 = -t31203+t31133;
                double t31204 = 1.0/(t31116*t31116);
                double t31205 = t31204*t31134;
                double t31206 = t31205+t31136;
                double t31207 = t31203-t31133;
                double t31208 = 1.0/pow(t31116,5.0/3.0);
                double t31209 = 1.0/sqrt(t31118);
                double t31210 = 1.0/t31129;
                double t31211 = 1.0/(t31126*t31126);
                double t31212 = b4p*t31208*t31078*(2.0/3.0);
                double t31213 = b2p*c*t31190*(1.0/3.0);
                double t31214 = b1p*c*t31190*t31209*(1.0/6.0);
                double t31215 = b3p*c*t31190*t31119*(1.0/2.0);
                double t31216 = t31212+t31213+t31214+t31215;
                double t31217 = 1.0/d2fz0;
                double t31218 = 1.0/Aa;
                double t31219 = b1a*t31119;
                double t31220 = b3a*t31120;
                double t31221 = b4a*t31121*t31078;
                double t31222 = b2a*c*t31117;
                double t31223 = t31220+t31221+t31222+t31219;
                double t31224 = 1.0/t31223;
                double t31225 = t31224*t31218*(1.0/2.0);
                double t31226 = t31225+1.0;
                double t31227 = log(t31226);
                double t31228 = a1a*c*t31117;
                double t31229 = t31228+1.0;
                double t31230 = 1.0/(t31116*t31116*t31116*t31116*t31116);
                double t31231 = pow(t31140,1.0/3.0);
                double t31232 = t31231*t31206*(4.0/3.0);
                double t31233 = pow(t31142,1.0/3.0);
                double t31234 = t31232-t31206*t31233*(4.0/3.0);
                double t31235 = t31138*t31139;
                double t31236 = t31235-1.0;
                double t31237 = 1.0/pow(rho_b[index],4.0/3.0);
                double t31238 = 1.0/pow(rho_b[index],5.0/3.0);
                double t31239 = 1.0/sqrt(t31100);
                double t31240 = 1.0/t31111;
                double t31241 = 1.0/(t31108*t31108);
                double t31242 = b4p*t31238*t31078*(2.0/3.0);
                double t31243 = b2p*c*t31237*(1.0/3.0);
                double t31244 = b1p*c*t31237*t31239*(1.0/6.0);
                double t31245 = b3p*c*t31101*t31237*(1.0/2.0);
                double t31246 = t31242+t31243+t31244+t31245;
                double t31247 = t31114*t31240*t31241*t31246;
                double t31250 = Aa*t31144*t31217*t31227*t31236*t31229*t31097*2.0;
                double t31251 = a1p*c*c0p*t31130*t31190*(2.0/3.0);
                double t31252 = 1.0/t31184;
                double t31253 = 1.0/t31188;
                double t31254 = 1.0/(t31184*t31184);
                double t31255 = 1.0/(t31188*t31188);
                double t31256 = gcaa*t31148*2.0;
                double t31257 = gamma_bb[index]*t31181*t31182*2.0;
                double t31258 = t31256+t31257;
                double t31259 = gamma_bb[index]*gcaa*t31145*(1.6E1/3.0);
                double t31260 = t31181*t31158*t31185*(1.6E1/3.0);
                double t31261 = t31260+t31259;
                double t31262 = gx*gx;
                double t31263 = gamma_bb[index]*gx*t31148;
                double t31264 = t31263+1.0;
                double t31265 = gamma_bb[index]*gx*t31148*2.0;
                double t31266 = t31262*t31182*t31185;
                double t31267 = t31265+t31266+1.0;
                double t31268 = 1.0/t31175;
                double t31269 = 1.0/(t31172*t31172);
                double t31270 = b4f*t31238*t31078*(2.0/3.0);
                double t31271 = b2f*c*t31237*(1.0/3.0);
                double t31272 = b1f*c*t31237*t31239*(1.0/6.0);
                double t31273 = b3f*c*t31101*t31237*(1.0/2.0);
                double t31274 = t31270+t31271+t31272+t31273;
                double t31275 = a1f*c*c0f*t31237*t31176*(2.0/3.0);
                double t31276 = a1p*c*c0p*t31112*t31237*(2.0/3.0);
                double t31277 = ccaa1*gcaa*t31252*t31148;
                double t31278 = ccaa2*gamma_bb[index]*t31181*t31253*t31182*2.0;
                double t31279 = t31277+t31278-ccaa1*gamma_bb[index]*t31181*t31182*t31254-ccaa2*t31181*t31182*t31255* \
                   t31185*t31258;
                double t31280 = 1.0/t31264;
                double t31281 = 1.0/t31267;
                double t31282 = 1.0/(t31264*t31264);
                double t31283 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]*rho_b[index]);
                double t31284 = 1.0/(t31267*t31267);
                double t31285 = gx*t31148*2.0;
                double t31286 = gamma_bb[index]*t31262*t31182*2.0;
                double t31287 = t31285+t31286;
                double t31288 = gamma_bb[index]*gx*t31145*(1.6E1/3.0);
                double t31289 = t31262*t31158*t31185*(1.6E1/3.0);
                double t31290 = t31288+t31289;
                v_rho_b_gamma_bb_[index] = (-rho_b[index]*t31180+t31116*(t31133+t31250-t31202*t31144*t31138*t31139* \
                   t31097)+rho_a[index]*(t31094*t31097*(c0p*t31091*t31089*2.0-c0f*log((t31098*(1.0/2.0))/(b1f*t31076+ \
                   b3f*t31077+b2f*c*t31074+b4f*t31078*t31079)+1.0)*(a1f*c*t31074+1.0)*2.0)-c0p*t31091*t31089*2.0))*(ccab1* \
                   gcab*t31145*t31189*(4.0/3.0)-ccab2*t31161*t31153*t31154*(gcab*t31145*(8.0/3.0)+gamma_bb[index]*t31153* \
                   t31158*(4.0/3.0)+t31150*t31153*t31145*(8.0/3.0))+ccab2*gamma_bb[index]*t31160*t31153*t31158*(4.0/3.0) \
                   -ccab1*gamma_bb[index]*t31153*t31158*t31159*(4.0/3.0)+ccab2*t31150*t31160*t31153*t31145*(8.0/3.0)- \
                   ccab1*t31150*t31153*t31145*t31159*(4.0/3.0)-ccab2*t31150*t31161*t31153*t31164*t31148+ccab2*t31153* \
                   t31154*t31164*1.0/(t31157*t31157*t31157)*t31167*2.0-ccab2*gamma_bb[index]*t31150*t31161*t31153*t31145* \
                   t31167*(8.0/3.0)+ccab1*gamma_bb[index]*gcab*t31150*1.0/(t31152*t31152*t31152)*t31153*t31158*(4.0/3.0) \
                   )-(ccab1*gcab*t31148*t31189*(1.0/2.0)+ccab2*t31150*t31160*t31153*t31148-ccab2*t31161*t31153*t31154* \
                   t31167-ccab1*t31150*t31153*t31148*t31159*(1.0/2.0))*(-t31115+t31133+t31250+t31249+rho_b[index]*(-t31247+ \
                   t31276+t31094*t31097*(t31247+t31275-t31274*t31178*t31268*t31269-a1p*c*c0p*t31112*t31237*(2.0/3.0)) \
                   )-t31116*(t31251-t31210*t31211*t31132*t31216+t31230*t31144*t31207*t31139*t31097*4.0+t31207*t31234* \
                   t31138*t31139*t31097-t31144*t31138*t31139*t31097*(t31251-t31210*t31211*t31132*t31216+(t31201*1.0/(t31195* \
                   t31195)*(b2f*c*t31190*(1.0/3.0)+b4f*t31208*t31078*(2.0/3.0)+b1f*c*t31190*t31209*(1.0/6.0)+b3f*c*t31190* \
                   t31119*(1.0/2.0)))/t31198-a1f*c*c0f*t31190*t31199*(2.0/3.0))-t31202*t31134*t31135*t31144*t31138*t31097* \
                   4.0+Aa*t31144*t31217*t31227*t31229*t31097*(t31230*t31139*4.0+t31134*t31135*t31138*4.0)*2.0+Aa*t31234* \
                   t31217*t31227*t31236*t31229*t31097*2.0-(1.0/(t31223*t31223)*t31144*t31217*t31236*t31229*t31097*(b2a* \
                   c*t31190*(1.0/3.0)+b4a*t31208*t31078*(2.0/3.0)+b1a*c*t31190*t31209*(1.0/6.0)+b3a*c*t31190*t31119*(1.0/ \
                   2.0)))/t31226+Aa*a1a*c*t31144*t31190*t31217*t31227*t31236*t31097*(2.0/3.0))+t31144*t31207*t31138*t31139* \
                   t31097)-t31180*t31279+c0*pow(rho_b[index],1.0/3.0)*(cx1*gx*t31280*t31148-cx1*gamma_bb[index]*t31262* \
                   t31182*t31282+cx2*gamma_bb[index]*t31262*t31182*t31281*2.0-cx2*t31262*t31182*t31185*t31284*t31287) \
                   *(4.0/3.0)-c0*pow(rho_b[index],4.0/3.0)*(cx1*gx*t31145*t31280*(8.0/3.0)-cx1*gamma_bb[index]*t31262* \
                   t31282*t31158*8.0+cx2*gamma_bb[index]*t31262*t31281*t31158*(3.2E1/3.0)-cx2*t31262*t31158*t31185*t31284* \
                   t31287*(1.6E1/3.0)+cx1*gx*t31262*1.0/(t31264*t31264*t31264)*t31283*t31185*(1.6E1/3.0)-cx2*t31262*t31182* \
                   t31185*t31284*(gx*t31145*(1.6E1/3.0)+gamma_bb[index]*t31262*t31158*(3.2E1/3.0))-cx2*gamma_bb[index]* \
                   t31262*t31182*t31290*t31284*2.0+cx2*t31262*t31182*t31290*t31185*1.0/(t31267*t31267*t31267)*t31287* \
                   2.0)+rho_b[index]*t31279*(-t31247+t31276+t31094*t31097*(t31247+t31275-t31276-t31274*t31178*t31268* \
                   t31269))+rho_b[index]*t31180*(ccaa1*gcaa*t31252*t31145*(8.0/3.0)-ccaa1*gamma_bb[index]*t31181*t31254* \
                   t31158*8.0+ccaa2*gamma_bb[index]*t31181*t31253*t31158*(3.2E1/3.0)-ccaa2*t31181*t31255*t31158*t31185* \
                   t31258*(1.6E1/3.0)+ccaa1*gcaa*t31181*1.0/(t31184*t31184*t31184)*t31283*t31185*(1.6E1/3.0)-ccaa2*t31181* \
                   t31182*t31255*t31185*(gcaa*t31145*(1.6E1/3.0)+gamma_bb[index]*t31181*t31158*(3.2E1/3.0))-ccaa2*gamma_bb[index]* \
                   t31261*t31181*t31182*t31255*2.0+ccaa2*t31261*t31181*t31182*t31185*t31258*1.0/(t31188*t31188*t31188) \
                   *2.0);
            } else if (rho_a[index] > cutoff_) {
                v_rho_b_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                double t31907 = 1.0/pow(rho_b[index],1.0/3.0);
                double t31908 = c*t31907;
                double t31909 = sqrt(t31908);
                double t31910 = pow(t31908,3.0/2.0);
                double t31911 = c*c;
                double t31912 = 1.0/pow(rho_b[index],2.0/3.0);
                double t31913 = 1.0/c0p;
                double t31914 = b1p*t31909;
                double t31915 = b3p*t31910;
                double t31916 = b4p*t31911*t31912;
                double t31917 = b2p*c*t31907;
                double t31918 = t31914+t31915+t31916+t31917;
                double t31919 = 1.0/t31918;
                double t31920 = t31913*t31919*(1.0/2.0);
                double t31921 = t31920+1.0;
                double t31922 = log(t31921);
                double t31923 = a1p*c*t31907;
                double t31924 = t31923+1.0;
                double t31925 = 1.0/pow(rho_b[index],8.0/3.0);
                double t31926 = gcaa*gcaa;
                double t31927 = 1.0/pow(rho_b[index],1.6E1/3.0);
                double t31928 = gamma_bb[index]*gcaa*t31925;
                double t31929 = t31928+1.0;
                double t31930 = gamma_bb[index]*gamma_bb[index];
                double t31931 = gamma_bb[index]*gcaa*t31925*2.0;
                double t31932 = t31930*t31926*t31927;
                double t31933 = t31931+t31932+1.0;
                double t31934 = pow(2.0,1.0/3.0);
                double t31935 = t31934*2.0;
                double t31936 = t31935-2.0;
                double t31937 = two_13*2.0;
                double t31938 = t31937-2.0;
                double t31939 = 1.0/t31938;
                double t31940 = 1.0/c0f;
                double t31941 = b1f*t31909;
                double t31942 = b3f*t31910;
                double t31943 = b4f*t31911*t31912;
                double t31944 = b2f*c*t31907;
                double t31945 = t31941+t31942+t31943+t31944;
                double t31946 = 1.0/t31945;
                double t31947 = t31940*t31946*(1.0/2.0);
                double t31948 = t31947+1.0;
                double t31949 = log(t31948);
                double t31950 = a1f*c*t31907;
                double t31951 = t31950+1.0;
                double t31952 = c0f*t31951*t31949*2.0;
                double t31953 = c0p*t31922*t31924*2.0;
                double t31954 = 1.0/t31929;
                double t31955 = 1.0/t31933;
                double t31956 = 1.0/pow(rho_b[index],1.9E1/3.0);
                double t31957 = 1.0/(t31929*t31929);
                double t31958 = 1.0/pow(rho_b[index],1.1E1/3.0);
                double t31959 = 1.0/(t31933*t31933);
                double t31960 = gcaa*t31925*2.0;
                double t31961 = gamma_bb[index]*t31926*t31927*2.0;
                double t31962 = t31960+t31961;
                double t31963 = gamma_bb[index]*gcaa*t31958*(1.6E1/3.0);
                double t31964 = t31930*t31926*t31956*(1.6E1/3.0);
                double t31965 = t31963+t31964;
                double t31966 = gx*gx;
                double t31967 = gamma_bb[index]*gx*t31925;
                double t31968 = t31967+1.0;
                double t31969 = gamma_bb[index]*gx*t31925*2.0;
                double t31970 = t31930*t31927*t31966;
                double t31971 = t31970+t31969+1.0;
                double t31972 = 1.0/pow(rho_b[index],4.0/3.0);
                double t31973 = 1.0/pow(rho_b[index],5.0/3.0);
                double t31974 = 1.0/sqrt(t31908);
                double t31975 = 1.0/t31921;
                double t31976 = 1.0/(t31918*t31918);
                double t31977 = b4p*t31911*t31973*(2.0/3.0);
                double t31978 = b2p*c*t31972*(1.0/3.0);
                double t31979 = b1p*c*t31972*t31974*(1.0/6.0);
                double t31980 = b3p*c*t31909*t31972*(1.0/2.0);
                double t31981 = t31980+t31977+t31978+t31979;
                double t31982 = t31924*t31981*t31975*t31976;
                double t31983 = ccaa1*gcaa*t31925*t31954;
                double t31984 = ccaa2*gamma_bb[index]*t31926*t31927*t31955*2.0;
                double t31985 = t31983+t31984-ccaa1*gamma_bb[index]*t31926*t31927*t31957-ccaa2*t31930*t31926*t31962* \
                   t31927*t31959;
                double t31986 = 1.0/t31968;
                double t31987 = 1.0/t31971;
                double t31988 = 1.0/(t31968*t31968);
                double t31989 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]*rho_b[index]);
                double t31990 = 1.0/(t31971*t31971);
                double t31991 = gx*t31925*2.0;
                double t31992 = gamma_bb[index]*t31927*t31966*2.0;
                double t31993 = t31991+t31992;
                double t31994 = gamma_bb[index]*gx*t31958*(1.6E1/3.0);
                double t31995 = t31930*t31956*t31966*(1.6E1/3.0);
                double t31996 = t31994+t31995;
                v_rho_b_gamma_bb_[index] = -t31985*(t31953+t31936*t31939*(t31952-c0p*t31922*t31924*2.0))+rho_b[index]* \
                   t31985*(-t31982+t31936*t31939*(t31982-(t31951*1.0/(t31945*t31945)*(b2f*c*t31972*(1.0/3.0)+b4f*t31911* \
                   t31973*(2.0/3.0)+b1f*c*t31972*t31974*(1.0/6.0)+b3f*c*t31909*t31972*(1.0/2.0)))/t31948+a1f*c*c0f*t31972* \
                   t31949*(2.0/3.0)-a1p*c*c0p*t31922*t31972*(2.0/3.0))+a1p*c*c0p*t31922*t31972*(2.0/3.0))+c0*pow(rho_b[index],1.0/ \
                   3.0)*(cx1*gx*t31925*t31986-cx1*gamma_bb[index]*t31927*t31966*t31988+cx2*gamma_bb[index]*t31927*t31966* \
                   t31987*2.0-cx2*t31930*t31927*t31990*t31966*t31993)*(4.0/3.0)+rho_b[index]*(t31953+t31936*t31939*(t31952- \
                   t31953))*(ccaa1*gcaa*t31954*t31958*(8.0/3.0)+ccaa2*gamma_bb[index]*t31926*t31955*t31956*(3.2E1/3.0) \
                   -ccaa1*gamma_bb[index]*t31926*t31956*t31957*8.0-ccaa2*t31930*t31926*t31962*t31956*t31959*(1.6E1/3.0) \
                   +ccaa1*gcaa*t31930*t31926*1.0/(t31929*t31929*t31929)*t31989*(1.6E1/3.0)-ccaa2*t31930*t31926*t31927* \
                   t31959*(gcaa*t31958*(1.6E1/3.0)+gamma_bb[index]*t31926*t31956*(3.2E1/3.0))-ccaa2*gamma_bb[index]*t31926* \
                   t31927*t31965*t31959*2.0+ccaa2*t31930*1.0/(t31933*t31933*t31933)*t31926*t31962*t31927*t31965*2.0)- \
                   c0*pow(rho_b[index],4.0/3.0)*(cx1*gx*t31958*t31986*(8.0/3.0)-cx1*gamma_bb[index]*t31956*t31966*t31988* \
                   8.0+cx2*gamma_bb[index]*t31956*t31966*t31987*(3.2E1/3.0)-cx2*t31930*t31990*t31956*t31966*t31993*(1.6E1/ \
                   3.0)+cx1*gx*t31930*t31966*1.0/(t31968*t31968*t31968)*t31989*(1.6E1/3.0)-cx2*t31930*t31927*t31990*t31966* \
                   (gx*t31958*(1.6E1/3.0)+gamma_bb[index]*t31956*t31966*(3.2E1/3.0))-cx2*gamma_bb[index]*t31927*t31990* \
                   t31966*t31996*2.0+cx2*t31930*1.0/(t31971*t31971*t31971)*t31927*t31966*t31993*t31996*2.0);
            } else {
                v_rho_b_gamma_bb_[index] = 0.0;
            } 

            //V_gamma_aa_gamma_aa
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t31292 = 1.0/pow(rho_a[index],1.0/3.0);
                double t31293 = c*t31292;
                double t31294 = sqrt(t31293);
                double t31295 = pow(t31293,3.0/2.0);
                double t31296 = c*c;
                double t31297 = 1.0/pow(rho_a[index],2.0/3.0);
                double t31298 = 1.0/c0p;
                double t31299 = b1p*t31294;
                double t31300 = b3p*t31295;
                double t31301 = b4p*t31296*t31297;
                double t31302 = b2p*c*t31292;
                double t31303 = t31300+t31301+t31302+t31299;
                double t31304 = 1.0/t31303;
                double t31305 = t31304*t31298*(1.0/2.0);
                double t31306 = t31305+1.0;
                double t31307 = log(t31306);
                double t31308 = a1p*c*t31292;
                double t31309 = t31308+1.0;
                double t31310 = pow(2.0,1.0/3.0);
                double t31311 = t31310*2.0;
                double t31312 = t31311-2.0;
                double t31313 = two_13*2.0;
                double t31314 = t31313-2.0;
                double t31315 = 1.0/t31314;
                double t31316 = 1.0/c0f;
                double t31317 = 1.0/pow(rho_b[index],1.0/3.0);
                double t31318 = c*t31317;
                double t31319 = sqrt(t31318);
                double t31320 = pow(t31318,3.0/2.0);
                double t31321 = 1.0/pow(rho_b[index],2.0/3.0);
                double t31322 = b1p*t31319;
                double t31323 = b3p*t31320;
                double t31324 = b4p*t31321*t31296;
                double t31325 = b2p*c*t31317;
                double t31326 = t31322+t31323+t31324+t31325;
                double t31327 = 1.0/t31326;
                double t31328 = t31327*t31298*(1.0/2.0);
                double t31329 = t31328+1.0;
                double t31330 = log(t31329);
                double t31331 = a1p*c*t31317;
                double t31332 = t31331+1.0;
                double t31333 = c0p*t31330*t31332*2.0;
                double t31334 = rho_a[index]+rho_b[index];
                double t31335 = 1.0/pow(t31334,1.0/3.0);
                double t31336 = c*t31335;
                double t31337 = sqrt(t31336);
                double t31338 = pow(t31336,3.0/2.0);
                double t31339 = 1.0/pow(t31334,2.0/3.0);
                double t31340 = b1p*t31337;
                double t31341 = b3p*t31338;
                double t31342 = b4p*t31339*t31296;
                double t31343 = b2p*c*t31335;
                double t31344 = t31340+t31341+t31342+t31343;
                double t31345 = 1.0/t31344;
                double t31346 = t31345*t31298*(1.0/2.0);
                double t31347 = t31346+1.0;
                double t31348 = log(t31347);
                double t31349 = a1p*c*t31335;
                double t31350 = t31349+1.0;
                double t31351 = c0p*t31350*t31348*2.0;
                double t31352 = rho_a[index]-rho_b[index];
                double t31353 = t31352*t31352;
                double t31354 = 1.0/t31334;
                double t31355 = t31352*t31354;
                double t31356 = 1.0/(t31334*t31334*t31334*t31334);
                double t31357 = t31353*t31353;
                double t31358 = t31355+1.0;
                double t31359 = pow(t31358,4.0/3.0);
                double t31360 = -t31355+1.0;
                double t31361 = pow(t31360,4.0/3.0);
                double t31362 = t31361+t31359-2.0;
                double t31363 = gcab*gcab;
                double t31364 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t31365 = 1.0/pow(rho_a[index],8.0/3.0);
                double t31366 = gamma_aa[index]*t31365*(1.0/2.0);
                double t31367 = 1.0/pow(rho_b[index],8.0/3.0);
                double t31368 = gamma_bb[index]*t31367*(1.0/2.0);
                double t31369 = t31366+t31368;
                double t31370 = gcab*t31369;
                double t31371 = t31370+1.0;
                double t31372 = t31369*t31369;
                double t31373 = t31363*t31372;
                double t31374 = gcab*t31369*2.0;
                double t31375 = t31373+t31374+1.0;
                double t31377 = gcab*t31365;
                double t31378 = t31363*t31365*t31369;
                double t31376 = t31377+t31378;
                double t31379 = 1.0/(t31375*t31375);
                double t31380 = b1f*t31294;
                double t31381 = b3f*t31295;
                double t31382 = b4f*t31296*t31297;
                double t31383 = b2f*c*t31292;
                double t31384 = t31380+t31381+t31382+t31383;
                double t31385 = 1.0/t31384;
                double t31386 = t31316*t31385*(1.0/2.0);
                double t31387 = t31386+1.0;
                double t31388 = log(t31387);
                double t31389 = a1f*c*t31292;
                double t31390 = t31389+1.0;
                double t31391 = c0f*t31390*t31388*2.0;
                double t31392 = c0p*t31307*t31309*2.0;
                double t31393 = gcaa*gcaa;
                double t31394 = gamma_aa[index]*gcaa*t31365;
                double t31395 = t31394+1.0;
                double t31396 = gamma_aa[index]*gamma_aa[index];
                double t31397 = gamma_aa[index]*gcaa*t31365*2.0;
                double t31398 = t31364*t31393*t31396;
                double t31399 = t31397+t31398+1.0;
                double t31401 = gcaa*t31365*2.0;
                double t31402 = gamma_aa[index]*t31364*t31393*2.0;
                double t31400 = t31401+t31402;
                double t31403 = 1.0/(t31399*t31399);
                double t31404 = gx*gx;
                double t31405 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t31406 = gamma_aa[index]*gx*t31365;
                double t31407 = t31406+1.0;
                double t31408 = 1.0/pow(rho_a[index],3.2E1/3.0);
                double t31409 = gamma_aa[index]*gx*t31365*2.0;
                double t31410 = t31404*t31364*t31396;
                double t31411 = t31410+t31409+1.0;
                double t31413 = gx*t31365*2.0;
                double t31414 = gamma_aa[index]*t31404*t31364*2.0;
                double t31412 = t31413+t31414;
                double t31415 = 1.0/(t31411*t31411);
                v_gamma_aa_gamma_aa_[index] = -(rho_a[index]*(t31392+t31312*t31315*(t31391-c0p*t31307*t31309*2.0) \
                   )+rho_b[index]*(t31333-t31312*t31315*(t31333-c0f*log((t31316*(1.0/2.0))/(b1f*t31319+b3f*t31320+b2f* \
                   c*t31317+b4f*t31321*t31296)+1.0)*(a1f*c*t31317+1.0)*2.0))-t31334*(t31351-t31315*t31362*t31356*t31357* \
                   (t31351-c0f*log((t31316*(1.0/2.0))/(b1f*t31337+b3f*t31338+b2f*c*t31335+b4f*t31339*t31296)+1.0)*(a1f* \
                   c*t31335+1.0)*2.0)+(Aa*t31315*t31362*log((1.0/2.0)/(Aa*(b1a*t31337+b3a*t31338+b2a*c*t31335+b4a*t31339* \
                   t31296))+1.0)*(t31356*t31357-1.0)*(a1a*c*t31335+1.0)*2.0)/d2fz0))*(ccab1*1.0/(t31371*t31371)*t31363* \
                   t31364*(1.0/2.0)-(ccab2*t31363*t31364*(1.0/2.0))/t31375-ccab2*t31363*t31372*1.0/(t31375*t31375*t31375) \
                   *(t31376*t31376)*2.0+ccab2*(t31363*t31363)*t31372*t31364*t31379*(1.0/2.0)+ccab2*t31363*t31365*t31376* \
                   t31369*t31379*2.0-ccab1*gcab*1.0/(t31371*t31371*t31371)*t31363*t31364*t31369*(1.0/2.0))+rho_a[index]* \
                   (t31392+t31312*t31315*(t31391-t31392))*(ccaa1*t31364*t31393*1.0/(t31395*t31395)*2.0-(ccaa2*t31364* \
                   t31393*2.0)/t31399+ccaa2*t31403*t31408*(t31393*t31393)*t31396*2.0-ccaa1*gamma_aa[index]*gcaa*t31405* \
                   t31393*1.0/(t31395*t31395*t31395)*2.0-ccaa2*(t31400*t31400)*t31364*t31393*t31396*1.0/(t31399*t31399* \
                   t31399)*2.0+ccaa2*gamma_aa[index]*t31400*t31403*t31364*t31393*4.0)-c0*pow(rho_a[index],4.0/3.0)*(cx1* \
                   t31404*1.0/(t31407*t31407)*t31364*2.0-(cx2*t31404*t31364*2.0)/t31411+cx2*(t31404*t31404)*t31415*t31408* \
                   t31396*2.0-cx1*gamma_aa[index]*gx*t31404*t31405*1.0/(t31407*t31407*t31407)*2.0-cx2*1.0/(t31411*t31411* \
                   t31411)*(t31412*t31412)*t31404*t31364*t31396*2.0+cx2*gamma_aa[index]*t31412*t31404*t31415*t31364*4.0) \
                   ;
            } else if (rho_a[index] > cutoff_) {
                double t32409 = 1.0/pow(rho_a[index],1.0/3.0);
                double t32410 = c*t32409;
                double t32411 = sqrt(t32410);
                double t32412 = pow(t32410,3.0/2.0);
                double t32413 = c*c;
                double t32414 = 1.0/pow(rho_a[index],2.0/3.0);
                double t32415 = 1.0/c0p;
                double t32416 = b1p*t32411;
                double t32417 = b3p*t32412;
                double t32418 = b4p*t32413*t32414;
                double t32419 = b2p*c*t32409;
                double t32420 = t32416+t32417+t32418+t32419;
                double t32421 = 1.0/t32420;
                double t32422 = t32421*t32415*(1.0/2.0);
                double t32423 = t32422+1.0;
                double t32424 = log(t32423);
                double t32425 = a1p*c*t32409;
                double t32426 = t32425+1.0;
                double t32427 = gcaa*gcaa;
                double t32428 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t32429 = 1.0/pow(rho_a[index],8.0/3.0);
                double t32430 = gamma_aa[index]*gcaa*t32429;
                double t32431 = t32430+1.0;
                double t32432 = gamma_aa[index]*gamma_aa[index];
                double t32433 = gamma_aa[index]*gcaa*t32429*2.0;
                double t32434 = t32432*t32427*t32428;
                double t32435 = t32433+t32434+1.0;
                double t32437 = gcaa*t32429*2.0;
                double t32438 = gamma_aa[index]*t32427*t32428*2.0;
                double t32436 = t32437+t32438;
                double t32439 = 1.0/(t32435*t32435);
                double t32440 = gx*gx;
                double t32441 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t32442 = gamma_aa[index]*gx*t32429;
                double t32443 = t32442+1.0;
                double t32444 = 1.0/pow(rho_a[index],3.2E1/3.0);
                double t32445 = gamma_aa[index]*gx*t32429*2.0;
                double t32446 = t32440*t32432*t32428;
                double t32447 = t32445+t32446+1.0;
                double t32449 = gx*t32429*2.0;
                double t32450 = gamma_aa[index]*t32440*t32428*2.0;
                double t32448 = t32450+t32449;
                double t32451 = 1.0/(t32447*t32447);
                v_gamma_aa_gamma_aa_[index] = rho_a[index]*(((pow(2.0,1.0/3.0)*2.0-2.0)*(c0f*log((1.0/2.0)/(c0f*(b1f* \
                   t32411+b3f*t32412+b2f*c*t32409+b4f*t32413*t32414))+1.0)*(a1f*c*t32409+1.0)*2.0-c0p*t32424*t32426*2.0) \
                   )/(two_13*2.0-2.0)+c0p*t32424*t32426*2.0)*(ccaa1*1.0/(t32431*t32431)*t32427*t32428*2.0-(ccaa2*t32427* \
                   t32428*2.0)/t32435+ccaa2*t32432*t32444*(t32427*t32427)*t32439*2.0-ccaa1*gamma_aa[index]*gcaa*1.0/(t32431* \
                   t32431*t32431)*t32441*t32427*2.0-ccaa2*t32432*1.0/(t32435*t32435*t32435)*t32427*(t32436*t32436)*t32428* \
                   2.0+ccaa2*gamma_aa[index]*t32427*t32436*t32428*t32439*4.0)-c0*pow(rho_a[index],4.0/3.0)*(cx1*t32440* \
                   1.0/(t32443*t32443)*t32428*2.0-(cx2*t32440*t32428*2.0)/t32447+cx2*(t32440*t32440)*t32432*t32451*t32444* \
                   2.0-cx1*gamma_aa[index]*gx*t32440*t32441*1.0/(t32443*t32443*t32443)*2.0-cx2*t32440*t32432*t32428*1.0/ \
                   (t32447*t32447*t32447)*(t32448*t32448)*2.0+cx2*gamma_aa[index]*t32440*t32451*t32428*t32448*4.0);
            } else if (rho_b[index] > cutoff_) {
                v_gamma_aa_gamma_aa_[index] = 0.0;
            } else {
                v_gamma_aa_gamma_aa_[index] = 0.0;
            } 

            //V_gamma_aa_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_aa_gamma_ab_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_aa_gamma_ab_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_aa_gamma_ab_[index] = 0.0;
            } else {
                v_gamma_aa_gamma_ab_[index] = 0.0;
            } 

            //V_gamma_aa_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t31418 = 1.0/pow(rho_a[index],1.0/3.0);
                double t31419 = c*t31418;
                double t31420 = sqrt(t31419);
                double t31421 = pow(t31419,3.0/2.0);
                double t31422 = c*c;
                double t31423 = 1.0/pow(rho_a[index],2.0/3.0);
                double t31424 = 1.0/c0p;
                double t31425 = b1p*t31420;
                double t31426 = b3p*t31421;
                double t31427 = b4p*t31422*t31423;
                double t31428 = b2p*c*t31418;
                double t31429 = t31425+t31426+t31427+t31428;
                double t31430 = 1.0/t31429;
                double t31431 = t31430*t31424*(1.0/2.0);
                double t31432 = t31431+1.0;
                double t31433 = log(t31432);
                double t31434 = a1p*c*t31418;
                double t31435 = t31434+1.0;
                double t31436 = pow(2.0,1.0/3.0);
                double t31437 = t31436*2.0;
                double t31438 = t31437-2.0;
                double t31439 = two_13*2.0;
                double t31440 = t31439-2.0;
                double t31441 = 1.0/t31440;
                double t31442 = 1.0/c0f;
                double t31443 = 1.0/pow(rho_b[index],1.0/3.0);
                double t31444 = c*t31443;
                double t31445 = sqrt(t31444);
                double t31446 = pow(t31444,3.0/2.0);
                double t31447 = 1.0/pow(rho_b[index],2.0/3.0);
                double t31448 = b1p*t31445;
                double t31449 = b3p*t31446;
                double t31450 = b4p*t31422*t31447;
                double t31451 = b2p*c*t31443;
                double t31452 = t31450+t31451+t31448+t31449;
                double t31453 = 1.0/t31452;
                double t31454 = t31424*t31453*(1.0/2.0);
                double t31455 = t31454+1.0;
                double t31456 = log(t31455);
                double t31457 = a1p*c*t31443;
                double t31458 = t31457+1.0;
                double t31459 = c0p*t31456*t31458*2.0;
                double t31460 = rho_a[index]+rho_b[index];
                double t31461 = 1.0/pow(t31460,1.0/3.0);
                double t31462 = c*t31461;
                double t31463 = sqrt(t31462);
                double t31464 = pow(t31462,3.0/2.0);
                double t31465 = 1.0/pow(t31460,2.0/3.0);
                double t31466 = b1p*t31463;
                double t31467 = b3p*t31464;
                double t31468 = b4p*t31422*t31465;
                double t31469 = b2p*c*t31461;
                double t31470 = t31466+t31467+t31468+t31469;
                double t31471 = 1.0/t31470;
                double t31472 = t31424*t31471*(1.0/2.0);
                double t31473 = t31472+1.0;
                double t31474 = log(t31473);
                double t31475 = a1p*c*t31461;
                double t31476 = t31475+1.0;
                double t31477 = c0p*t31474*t31476*2.0;
                double t31478 = rho_a[index]-rho_b[index];
                double t31479 = t31478*t31478;
                double t31480 = 1.0/t31460;
                double t31481 = t31480*t31478;
                double t31482 = 1.0/(t31460*t31460*t31460*t31460);
                double t31483 = t31479*t31479;
                double t31484 = t31481+1.0;
                double t31485 = pow(t31484,4.0/3.0);
                double t31486 = -t31481+1.0;
                double t31487 = pow(t31486,4.0/3.0);
                double t31488 = t31485+t31487-2.0;
                double t31489 = 1.0/pow(rho_a[index],8.0/3.0);
                double t31490 = 1.0/pow(rho_b[index],8.0/3.0);
                double t31491 = gcab*gcab;
                double t31492 = gamma_aa[index]*t31489*(1.0/2.0);
                double t31493 = gamma_bb[index]*t31490*(1.0/2.0);
                double t31494 = t31492+t31493;
                double t31495 = t31494*t31494;
                double t31496 = t31491*t31495;
                double t31497 = gcab*t31494*2.0;
                double t31498 = t31496+t31497+1.0;
                double t31499 = 1.0/(t31498*t31498);
                double t31500 = gcab*t31489;
                double t31501 = t31491*t31494*t31489;
                double t31502 = t31500+t31501;
                double t31503 = gcab*t31490;
                double t31504 = t31490*t31491*t31494;
                double t31505 = t31503+t31504;
                double t31506 = gcab*t31494;
                double t31507 = t31506+1.0;
                v_gamma_aa_gamma_bb_[index] = (-rho_b[index]*(t31459-t31441*t31438*(t31459-c0f*log((t31442*(1.0/2.0) \
                   )/(b1f*t31445+b3f*t31446+b2f*c*t31443+b4f*t31422*t31447)+1.0)*(a1f*c*t31443+1.0)*2.0))+t31460*(t31477- \
                   t31441*t31482*t31483*t31488*(t31477-c0f*log((t31442*(1.0/2.0))/(b1f*t31463+b3f*t31464+b2f*c*t31461+ \
                   b4f*t31422*t31465)+1.0)*(a1f*c*t31461+1.0)*2.0)+(Aa*t31441*t31488*log((1.0/2.0)/(Aa*(b1a*t31463+b3a* \
                   t31464+b2a*c*t31461+b4a*t31422*t31465))+1.0)*(t31482*t31483-1.0)*(a1a*c*t31461+1.0)*2.0)/d2fz0)+rho_a[index]* \
                   (t31441*t31438*(c0p*t31433*t31435*2.0-c0f*log((t31442*(1.0/2.0))/(b1f*t31420+b3f*t31421+b2f*c*t31418+ \
                   b4f*t31422*t31423)+1.0)*(a1f*c*t31418+1.0)*2.0)-c0p*t31433*t31435*2.0))*(ccab1*1.0/(t31507*t31507) \
                   *t31490*t31491*t31489*(1.0/2.0)-(ccab2*t31490*t31491*t31489*(1.0/2.0))/t31498+ccab2*t31502*t31490* \
                   t31491*t31494*t31499+ccab2*t31505*t31491*t31494*t31489*t31499-ccab2*t31502*t31505*t31491*t31495*1.0/ \
                   (t31498*t31498*t31498)*2.0+ccab2*t31490*(t31491*t31491)*t31495*t31489*t31499*(1.0/2.0)-ccab1*gcab* \
                   1.0/(t31507*t31507*t31507)*t31490*t31491*t31494*t31489*(1.0/2.0));
            } else if (rho_a[index] > cutoff_) {
                v_gamma_aa_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_aa_gamma_bb_[index] = 0.0;
            } else {
                v_gamma_aa_gamma_bb_[index] = 0.0;
            } 

            //V_gamma_ab_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_ab_gamma_ab_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_ab_gamma_ab_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_ab_gamma_ab_[index] = 0.0;
            } else {
                v_gamma_ab_gamma_ab_[index] = 0.0;
            } 

            //V_gamma_ab_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_ab_gamma_bb_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_ab_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_ab_gamma_bb_[index] = 0.0;
            } else {
                v_gamma_ab_gamma_bb_[index] = 0.0;
            } 

            //V_gamma_bb_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t31511 = 1.0/pow(rho_a[index],1.0/3.0);
                double t31512 = c*t31511;
                double t31513 = sqrt(t31512);
                double t31514 = pow(t31512,3.0/2.0);
                double t31515 = c*c;
                double t31516 = 1.0/pow(rho_a[index],2.0/3.0);
                double t31517 = 1.0/c0p;
                double t31518 = b1p*t31513;
                double t31519 = b3p*t31514;
                double t31520 = b4p*t31515*t31516;
                double t31521 = b2p*c*t31511;
                double t31522 = t31520+t31521+t31518+t31519;
                double t31523 = 1.0/t31522;
                double t31524 = t31523*t31517*(1.0/2.0);
                double t31525 = t31524+1.0;
                double t31526 = log(t31525);
                double t31527 = a1p*c*t31511;
                double t31528 = t31527+1.0;
                double t31529 = pow(2.0,1.0/3.0);
                double t31530 = t31529*2.0;
                double t31531 = t31530-2.0;
                double t31532 = two_13*2.0;
                double t31533 = t31532-2.0;
                double t31534 = 1.0/t31533;
                double t31535 = 1.0/c0f;
                double t31536 = 1.0/pow(rho_b[index],1.0/3.0);
                double t31537 = c*t31536;
                double t31538 = sqrt(t31537);
                double t31539 = pow(t31537,3.0/2.0);
                double t31540 = 1.0/pow(rho_b[index],2.0/3.0);
                double t31541 = b1p*t31538;
                double t31542 = b3p*t31539;
                double t31543 = b4p*t31540*t31515;
                double t31544 = b2p*c*t31536;
                double t31545 = t31541+t31542+t31543+t31544;
                double t31546 = 1.0/t31545;
                double t31547 = t31517*t31546*(1.0/2.0);
                double t31548 = t31547+1.0;
                double t31549 = log(t31548);
                double t31550 = a1p*c*t31536;
                double t31551 = t31550+1.0;
                double t31552 = c0p*t31551*t31549*2.0;
                double t31553 = rho_a[index]+rho_b[index];
                double t31554 = 1.0/pow(t31553,1.0/3.0);
                double t31555 = c*t31554;
                double t31556 = sqrt(t31555);
                double t31557 = pow(t31555,3.0/2.0);
                double t31558 = 1.0/pow(t31553,2.0/3.0);
                double t31559 = b1p*t31556;
                double t31560 = b3p*t31557;
                double t31561 = b4p*t31515*t31558;
                double t31562 = b2p*c*t31554;
                double t31563 = t31560+t31561+t31562+t31559;
                double t31564 = 1.0/t31563;
                double t31565 = t31517*t31564*(1.0/2.0);
                double t31566 = t31565+1.0;
                double t31567 = log(t31566);
                double t31568 = a1p*c*t31554;
                double t31569 = t31568+1.0;
                double t31570 = c0p*t31567*t31569*2.0;
                double t31571 = rho_a[index]-rho_b[index];
                double t31572 = t31571*t31571;
                double t31573 = 1.0/t31553;
                double t31574 = t31571*t31573;
                double t31575 = 1.0/(t31553*t31553*t31553*t31553);
                double t31576 = t31572*t31572;
                double t31577 = t31574+1.0;
                double t31578 = pow(t31577,4.0/3.0);
                double t31579 = -t31574+1.0;
                double t31580 = pow(t31579,4.0/3.0);
                double t31581 = t31580+t31578-2.0;
                double t31582 = gcab*gcab;
                double t31583 = 1.0/pow(rho_b[index],1.6E1/3.0);
                double t31584 = 1.0/pow(rho_a[index],8.0/3.0);
                double t31585 = gamma_aa[index]*t31584*(1.0/2.0);
                double t31586 = 1.0/pow(rho_b[index],8.0/3.0);
                double t31587 = gamma_bb[index]*t31586*(1.0/2.0);
                double t31588 = t31585+t31587;
                double t31589 = gcab*t31588;
                double t31590 = t31589+1.0;
                double t31591 = t31588*t31588;
                double t31592 = t31582*t31591;
                double t31593 = gcab*t31588*2.0;
                double t31594 = t31592+t31593+1.0;
                double t31596 = gcab*t31586;
                double t31597 = t31582*t31586*t31588;
                double t31595 = t31596+t31597;
                double t31598 = 1.0/(t31594*t31594);
                double t31599 = b1f*t31538;
                double t31600 = b3f*t31539;
                double t31601 = b4f*t31540*t31515;
                double t31602 = b2f*c*t31536;
                double t31603 = t31600+t31601+t31602+t31599;
                double t31604 = 1.0/t31603;
                double t31605 = t31604*t31535*(1.0/2.0);
                double t31606 = t31605+1.0;
                double t31607 = log(t31606);
                double t31608 = a1f*c*t31536;
                double t31609 = t31608+1.0;
                double t31610 = t31552-c0f*t31607*t31609*2.0;
                double t31611 = t31552-t31610*t31531*t31534;
                double t31612 = gcaa*gcaa;
                double t31613 = gamma_bb[index]*gcaa*t31586;
                double t31614 = t31613+1.0;
                double t31615 = gamma_bb[index]*gamma_bb[index];
                double t31616 = gamma_bb[index]*gcaa*t31586*2.0;
                double t31617 = t31612*t31615*t31583;
                double t31618 = t31616+t31617+1.0;
                double t31620 = gcaa*t31586*2.0;
                double t31621 = gamma_bb[index]*t31612*t31583*2.0;
                double t31619 = t31620+t31621;
                double t31622 = 1.0/(t31618*t31618);
                double t31623 = gx*gx;
                double t31624 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]);
                double t31625 = gamma_bb[index]*gx*t31586;
                double t31626 = t31625+1.0;
                double t31627 = 1.0/pow(rho_b[index],3.2E1/3.0);
                double t31628 = gamma_bb[index]*gx*t31586*2.0;
                double t31629 = t31623*t31615*t31583;
                double t31630 = t31628+t31629+1.0;
                double t31632 = gx*t31586*2.0;
                double t31633 = gamma_bb[index]*t31623*t31583*2.0;
                double t31631 = t31632+t31633;
                double t31634 = 1.0/(t31630*t31630);
                v_gamma_bb_gamma_bb_[index] = (-rho_b[index]*t31611+t31553*(t31570-t31534*t31581*t31575*t31576*(t31570- \
                   c0f*log((t31535*(1.0/2.0))/(b1f*t31556+b3f*t31557+b2f*c*t31554+b4f*t31515*t31558)+1.0)*(a1f*c*t31554+ \
                   1.0)*2.0)+(Aa*t31534*t31581*log((1.0/2.0)/(Aa*(b1a*t31556+b3a*t31557+b2a*c*t31554+b4a*t31515*t31558) \
                   )+1.0)*(t31575*t31576-1.0)*(a1a*c*t31554+1.0)*2.0)/d2fz0)+rho_a[index]*(t31531*t31534*(c0p*t31526* \
                   t31528*2.0-c0f*log((t31535*(1.0/2.0))/(b1f*t31513+b3f*t31514+b2f*c*t31511+b4f*t31515*t31516)+1.0)* \
                   (a1f*c*t31511+1.0)*2.0)-c0p*t31526*t31528*2.0))*(ccab1*1.0/(t31590*t31590)*t31582*t31583*(1.0/2.0) \
                   -(ccab2*t31582*t31583*(1.0/2.0))/t31594-ccab2*t31582*t31591*1.0/(t31594*t31594*t31594)*(t31595*t31595) \
                   *2.0+ccab2*(t31582*t31582)*t31591*t31583*t31598*(1.0/2.0)+ccab2*t31582*t31586*t31595*t31588*t31598* \
                   2.0-ccab1*gcab*1.0/(t31590*t31590*t31590)*t31582*t31583*t31588*(1.0/2.0))+rho_b[index]*t31611*(ccaa1* \
                   t31612*1.0/(t31614*t31614)*t31583*2.0-(ccaa2*t31612*t31583*2.0)/t31618+ccaa2*(t31612*t31612)*t31622* \
                   t31615*t31627*2.0-ccaa1*gamma_bb[index]*gcaa*t31612*1.0/(t31614*t31614*t31614)*t31624*2.0-ccaa2*t31612* \
                   t31615*1.0/(t31618*t31618*t31618)*t31583*(t31619*t31619)*2.0+ccaa2*gamma_bb[index]*t31612*t31622*t31583* \
                   t31619*4.0)-c0*pow(rho_b[index],4.0/3.0)*(cx1*t31623*1.0/(t31626*t31626)*t31583*2.0-(cx2*t31623*t31583* \
                   2.0)/t31630+cx2*(t31623*t31623)*t31615*t31634*t31627*2.0-cx1*gamma_bb[index]*gx*t31623*t31624*1.0/ \
                   (t31626*t31626*t31626)*2.0-cx2*1.0/(t31630*t31630*t31630)*(t31631*t31631)*t31623*t31615*t31583*2.0+ \
                   cx2*gamma_bb[index]*t31631*t31623*t31634*t31583*4.0);
            } else if (rho_a[index] > cutoff_) {
                v_gamma_bb_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                double t32003 = 1.0/pow(rho_b[index],1.0/3.0);
                double t32004 = c*t32003;
                double t32005 = sqrt(t32004);
                double t32006 = pow(t32004,3.0/2.0);
                double t32007 = c*c;
                double t32008 = 1.0/pow(rho_b[index],2.0/3.0);
                double t32009 = 1.0/c0p;
                double t32010 = b1p*t32005;
                double t32011 = b3p*t32006;
                double t32012 = b4p*t32007*t32008;
                double t32013 = b2p*c*t32003;
                double t32014 = t32010+t32011+t32012+t32013;
                double t32015 = 1.0/t32014;
                double t32016 = t32015*t32009*(1.0/2.0);
                double t32017 = t32016+1.0;
                double t32018 = log(t32017);
                double t32019 = a1p*c*t32003;
                double t32020 = t32019+1.0;
                double t32021 = gcaa*gcaa;
                double t32022 = 1.0/pow(rho_b[index],1.6E1/3.0);
                double t32023 = 1.0/pow(rho_b[index],8.0/3.0);
                double t32024 = gamma_bb[index]*gcaa*t32023;
                double t32025 = t32024+1.0;
                double t32026 = gamma_bb[index]*gamma_bb[index];
                double t32027 = gamma_bb[index]*gcaa*t32023*2.0;
                double t32028 = t32021*t32022*t32026;
                double t32029 = t32027+t32028+1.0;
                double t32031 = gcaa*t32023*2.0;
                double t32032 = gamma_bb[index]*t32021*t32022*2.0;
                double t32030 = t32031+t32032;
                double t32033 = 1.0/(t32029*t32029);
                double t32034 = gx*gx;
                double t32035 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]);
                double t32036 = gamma_bb[index]*gx*t32023;
                double t32037 = t32036+1.0;
                double t32038 = 1.0/pow(rho_b[index],3.2E1/3.0);
                double t32039 = gamma_bb[index]*gx*t32023*2.0;
                double t32040 = t32022*t32034*t32026;
                double t32041 = t32040+t32039+1.0;
                double t32043 = gx*t32023*2.0;
                double t32044 = gamma_bb[index]*t32022*t32034*2.0;
                double t32042 = t32043+t32044;
                double t32045 = 1.0/(t32041*t32041);
                v_gamma_bb_gamma_bb_[index] = rho_b[index]*(((pow(2.0,1.0/3.0)*2.0-2.0)*(c0f*log((1.0/2.0)/(c0f*(b1f* \
                   t32005+b3f*t32006+b2f*c*t32003+b4f*t32007*t32008))+1.0)*(a1f*c*t32003+1.0)*2.0-c0p*t32020*t32018*2.0) \
                   )/(two_13*2.0-2.0)+c0p*t32020*t32018*2.0)*(ccaa1*t32021*t32022*1.0/(t32025*t32025)*2.0-(ccaa2*t32021* \
                   t32022*2.0)/t32029+ccaa2*(t32021*t32021)*t32033*t32026*t32038*2.0-ccaa1*gamma_bb[index]*gcaa*t32021* \
                   1.0/(t32025*t32025*t32025)*t32035*2.0-ccaa2*t32021*(t32030*t32030)*t32022*t32026*1.0/(t32029*t32029* \
                   t32029)*2.0+ccaa2*gamma_bb[index]*t32021*t32030*t32022*t32033*4.0)-c0*pow(rho_b[index],4.0/3.0)*(cx1* \
                   t32022*t32034*1.0/(t32037*t32037)*2.0-(cx2*t32022*t32034*2.0)/t32041+cx2*(t32034*t32034)*t32026*t32045* \
                   t32038*2.0-cx1*gamma_bb[index]*gx*t32034*t32035*1.0/(t32037*t32037*t32037)*2.0-cx2*t32022*1.0/(t32041* \
                   t32041*t32041)*(t32042*t32042)*t32034*t32026*2.0+cx2*gamma_bb[index]*t32022*t32042*t32034*t32045*4.0) \
                   ;
            } else {
                v_gamma_bb_gamma_bb_[index] = 0.0;
            } 

        }                       
        if (is_meta_) {

            //V_rho_a_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_a_tau_a_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_a_tau_a_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_a_tau_a_[index] = 0.0;
            } else {
                v_rho_a_tau_a_[index] = 0.0;
            } 

            //V_rho_a_tau_b
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_a_tau_b_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_a_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_a_tau_b_[index] = 0.0;
            } else {
                v_rho_a_tau_b_[index] = 0.0;
            } 

            //V_rho_b_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_b_tau_a_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_b_tau_a_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_b_tau_a_[index] = 0.0;
            } else {
                v_rho_b_tau_a_[index] = 0.0;
            } 

            //V_rho_b_tau_b
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_b_tau_b_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_b_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_b_tau_b_[index] = 0.0;
            } else {
                v_rho_b_tau_b_[index] = 0.0;
            } 

            //V_tau_a_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_tau_a_tau_a_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_tau_a_tau_a_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_tau_a_tau_a_[index] = 0.0;
            } else {
                v_tau_a_tau_a_[index] = 0.0;
            } 

            //V_tau_a_tau_b
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_tau_a_tau_b_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_tau_a_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_tau_a_tau_b_[index] = 0.0;
            } else {
                v_tau_a_tau_b_[index] = 0.0;
            } 

            //V_tau_b_tau_b
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_tau_b_tau_b_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_tau_b_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_tau_b_tau_b_[index] = 0.0;
            } else {
                v_tau_b_tau_b_[index] = 0.0;
            } 

            if (is_gga_) {
            	
                //V_gamma_aa_tau_a
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } else {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } 
            	
                //V_gamma_aa_tau_b
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_aa_tau_b_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_aa_tau_b_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_aa_tau_b_[index] = 0.0;
                } else {
                    v_gamma_aa_tau_b_[index] = 0.0;
                } 
            	
                //V_gamma_ab_tau_a
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_ab_tau_a_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_ab_tau_a_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_ab_tau_a_[index] = 0.0;
                } else {
                    v_gamma_ab_tau_a_[index] = 0.0;
                } 
            	
                //V_gamma_ab_tau_b
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_ab_tau_b_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_ab_tau_b_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_ab_tau_b_[index] = 0.0;
                } else {
                    v_gamma_ab_tau_b_[index] = 0.0;
                } 
            	
                //V_gamma_bb_tau_a
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_bb_tau_a_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_bb_tau_a_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_bb_tau_a_[index] = 0.0;
                } else {
                    v_gamma_bb_tau_a_[index] = 0.0;
                } 
            	
                //V_gamma_bb_tau_b
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_bb_tau_b_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_bb_tau_b_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_bb_tau_b_[index] = 0.0;
                } else {
                    v_gamma_bb_tau_b_[index] = 0.0;
                } 
          
            }  
        }
    }
}

}}

