/**********************************************************
* PBE_X_functional.cc: definitions for PBE_X_functional for KS-DFT
* Robert Parrish, robparrish@gmail.com
* Autogenerated by MATLAB Script on 07-Mar-2012
*
***********************************************************/
#include <libmints/mints.h>
#include <libfock/points.h>
#include "PBE_X_functional.h"
#include <stdlib.h>
#include <cmath>
#include <string>
#include <string>
#include <vector>

using namespace psi;
using namespace boost;
using namespace std;

namespace psi { namespace functional {

PBE_X_Functional::PBE_X_Functional(int npoints, int deriv) : Functional(npoints, deriv)
{

    name_ = "PBE_X";
    description_ = "PBE Exchange Functional";
    citation_ = "J.P. Perdew et. al., Phys. Rev. Lett., 77(18), 3865-3868, 1996";

    double k = 3.0936677262801355E+00;
    params_.push_back(make_pair("k",k));
    double e = -2.3873241463784300E-01;
    params_.push_back(make_pair("e",e));
    double kp = 8.0400000000000005E-01;
    params_.push_back(make_pair("kp",kp));
    double mu_ = 2.1951497276451709E-01;
    params_.push_back(make_pair("mu_",mu_));

    is_gga_ = true;
    is_meta_ = false;

    //Required allocateion
    allocate();
}
PBE_X_Functional::~PBE_X_Functional()
{
}
void PBE_X_Functional::computeRKSFunctional(boost::shared_ptr<RKSFunctions> prop)
{
    int ntrue = prop->npoints();

    const double* restrict rho_a;
    const double* restrict gamma_aa;
    const double* restrict tau_a;

    rho_a = prop->property_value("RHO_A")->pointer();
    if (is_gga_) {
        gamma_aa = prop->property_value("GAMMA_AA")->pointer();
    }
    if (is_meta_) {
        tau_a = prop->property_value("TAU_A")->pointer();
    }

    double k = params_[0].second;
    double e = params_[1].second;
    double kp = params_[2].second;
    double mu_ = params_[3].second;

    //Functional
    for (int index = 0; index < ntrue; index++) {

        //Functional Value
        if (rho_a[index] > cutoff_) {
            double t129139 = rho_a[index]*2.0;
            functional_[index] = e*k*rho_a[index]*pow(t129139,1.0/3.0)*(kp-kp/((gamma_aa[index]*1.0/(k*k)*mu_* \
               1.0/pow(t129139,8.0/3.0))/kp+1.0)+1.0)*2.0;
        } else {
            functional_[index] = 0.0;
        } 

    }
    //First Partials
    for (int index = 0; index < ntrue && deriv_ >= 1; index++) {

        //V_rho_a
        if (rho_a[index] > cutoff_) {
            double t129141 = rho_a[index]*2.0;
            double t129142 = 1.0/(k*k);
            double t129143 = 1.0/kp;
            double t129144 = 1.0/pow(t129141,8.0/3.0);
            double t129145 = gamma_aa[index]*mu_*t129142*t129143*t129144;
            double t129146 = t129145+1.0;
            double t129147 = 1.0/t129146;
            double t129148 = kp-kp*t129147+1.0;
            v_rho_a_[index] = e*k*pow(t129141,1.0/3.0)*t129148+e*k*rho_a[index]*1.0/pow(t129141,2.0/3.0)*t129148* \
               (2.0/3.0)-(e*gamma_aa[index]*mu_*rho_a[index]*1.0/pow(t129141,1.0E1/3.0)*1.0/(t129146*t129146)*(1.6E1/ \
               3.0))/k;
        } else {
            v_rho_a_[index] = 0.0;
        } 

        if (is_gga_) {

            if (rho_a[index] > cutoff_) {
                double t129150 = rho_a[index]*2.0;
                v_gamma_aa_[index] = (e*mu_*rho_a[index]*1.0/pow(t129150,7.0/3.0)*1.0/pow((gamma_aa[index]*1.0/(k* \
                   k)*mu_*1.0/pow(t129150,8.0/3.0))/kp+1.0,2.0)*2.0)/k;
            } else {
                v_gamma_aa_[index] = 0.0;
            } 

        }
        if (is_meta_) {

            //V_tau_a
            if (rho_a[index] > cutoff_) {
                v_tau_a_[index] = 0.0;
            } else {
                v_tau_a_[index] = 0.0;
            } 

        }
    }
    //Second Partials
    for (int index = 0; index < ntrue && deriv_ >= 2; index++) {

        //V_rho_a_rho_a
        if (rho_a[index] > cutoff_) {
            double t129153 = rho_a[index]*2.0;
            double t129154 = 1.0/(k*k);
            double t129155 = 1.0/kp;
            double t129156 = 1.0/pow(t129153,8.0/3.0);
            double t129157 = gamma_aa[index]*mu_*t129154*t129155*t129156;
            double t129158 = t129157+1.0;
            double t129159 = 1.0/t129158;
            double t129160 = kp-kp*t129159+1.0;
            double t129161 = 1.0/k;
            double t129162 = 1.0/(t129158*t129158);
            v_rho_a_rho_a_[index] = e*k*t129160*1.0/pow(t129153,2.0/3.0)*(4.0/3.0)-e*k*rho_a[index]*t129160*1.0/ \
               pow(t129153,5.0/3.0)*(8.0/9.0)-e*gamma_aa[index]*mu_*t129161*1.0/pow(t129153,1.0E1/3.0)*t129162*(3.2E1/ \
               3.0)-e*(gamma_aa[index]*gamma_aa[index])*1.0/(k*k*k)*(mu_*mu_)*1.0/(rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]*rho_a[index])*t129155*1.0/(t129158*t129158*t129158)*(4.0/9.0)+e*gamma_aa[index]* \
               mu_*rho_a[index]*t129161*1.0/pow(t129153,1.3E1/3.0)*t129162*3.2E1;
        } else {
            v_rho_a_rho_a_[index] = 0.0;
        } 

        if (is_gga_) {

            //V_rho_a_gamma_aa
            if (rho_a[index] > cutoff_) {
                double t129164 = rho_a[index]*2.0;
                double t129165 = 1.0/k;
                double t129166 = 1.0/(k*k);
                double t129167 = 1.0/kp;
                double t129168 = 1.0/pow(t129164,8.0/3.0);
                double t129169 = gamma_aa[index]*mu_*t129166*t129167*t129168;
                double t129170 = t129169+1.0;
                double t129171 = 1.0/(t129170*t129170);
                v_rho_a_gamma_aa_[index] = e*mu_*t129171*1.0/pow(t129164,7.0/3.0)*t129165-e*mu_*rho_a[index]*t129171* \
                   1.0/pow(t129164,1.0E1/3.0)*t129165*(1.4E1/3.0)+e*gamma_aa[index]*1.0/(k*k*k)*(mu_*mu_)*1.0/(rho_a[index]* \
                   rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index])*1.0/(t129170*t129170*t129170)*t129167*(1.0/6.0) \
                   ;
            } else {
                v_rho_a_gamma_aa_[index] = 0.0;
            } 

            //V_gamma_aa_gamma_aa
            if (rho_a[index] > cutoff_) {
                double t129173 = 1.0/kp;
                v_gamma_aa_gamma_aa_[index] = e*1.0/(k*k*k)*(mu_*mu_)*1.0/(rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index])*t129173*1.0/pow(gamma_aa[index]*1.0/(k*k)*mu_*t129173*1.0/pow(rho_a[index]*2.0,8.0/3.0) \
                   +1.0,3.0)*(-1.0/8.0);
            } else {
                v_gamma_aa_gamma_aa_[index] = 0.0;
            } 

        }
        if (is_meta_) {

            //V_rho_a_tau_a
            if (rho_a[index] > cutoff_) {
                v_rho_a_tau_a_[index] = 0.0;
            } else {
                v_rho_a_tau_a_[index] = 0.0;
            } 

            //V_tau_a_tau_a
            if (rho_a[index] > cutoff_) {
                v_tau_a_tau_a_[index] = 0.0;
            } else {
                v_tau_a_tau_a_[index] = 0.0;
            } 

            if (is_gga_) {

                //V_gamma_aa_tau_a
                if (rho_a[index] > cutoff_) {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } else {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } 

            }
        }
    }
}
void PBE_X_Functional::computeUKSFunctional(boost::shared_ptr<UKSFunctions> prop)
{
    int ntrue = prop->npoints();

    const double* restrict rho_a;
    const double* restrict rho_b;
    const double* restrict gamma_aa;
    const double* restrict gamma_ab;
    const double* restrict gamma_bb;
    const double* restrict tau_a;
    const double* restrict tau_b;

    rho_a = prop->property_value("RHO_A")->pointer();
    rho_b = prop->property_value("RHO_B")->pointer();
    if (is_gga_) {
        gamma_aa = prop->property_value("GAMMA_AA")->pointer();
        gamma_ab = prop->property_value("GAMMA_AB")->pointer();
        gamma_bb = prop->property_value("GAMMA_BB")->pointer();
    }
    if (is_meta_) {
        tau_a = prop->property_value("TAU_A")->pointer();
        tau_b = prop->property_value("TAU_B")->pointer();
    }

    double k = params_[0].second;
    double e = params_[1].second;
    double kp = params_[2].second;
    double mu_ = params_[3].second;

    //Functional
    for (int index = 0; index < ntrue; index++) {

        //Functional Value
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t128877 = rho_a[index]*2.0;
            double t128878 = 1.0/(k*k);
            double t128879 = 1.0/kp;
            double t128880 = rho_b[index]*2.0;
            functional_[index] = e*k*rho_b[index]*pow(t128880,1.0/3.0)*(kp-kp/(gamma_bb[index]*mu_*1.0/pow(t128880,8.0/ \
               3.0)*t128878*t128879+1.0)+1.0)+e*k*rho_a[index]*pow(t128877,1.0/3.0)*(kp-kp/(gamma_aa[index]*mu_*1.0/ \
               pow(t128877,8.0/3.0)*t128878*t128879+1.0)+1.0);
        } else if (rho_a[index] > cutoff_) {
            double t129038 = rho_a[index]*2.0;
            functional_[index] = e*k*rho_a[index]*pow(t129038,1.0/3.0)*(kp-kp/((gamma_aa[index]*1.0/(k*k)*mu_* \
               1.0/pow(t129038,8.0/3.0))/kp+1.0)+1.0);
        } else if (rho_b[index] > cutoff_) {
            double t128973 = rho_b[index]*2.0;
            functional_[index] = e*k*rho_b[index]*pow(t128973,1.0/3.0)*(kp-kp/((gamma_bb[index]*1.0/(k*k)*mu_* \
               1.0/pow(t128973,8.0/3.0))/kp+1.0)+1.0);
        } else {
            functional_[index] = 0.0;
        } 

    }
    //First Partials
    for (int index = 0; index < ntrue && deriv_ >= 1; index++) {

        //V_rho_a
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t128882 = rho_a[index]*2.0;
            double t128883 = 1.0/(k*k);
            double t128884 = 1.0/kp;
            double t128885 = 1.0/pow(t128882,8.0/3.0);
            double t128886 = gamma_aa[index]*mu_*t128883*t128884*t128885;
            double t128887 = t128886+1.0;
            double t128888 = 1.0/t128887;
            double t128889 = kp-kp*t128888+1.0;
            v_rho_a_[index] = e*k*pow(t128882,1.0/3.0)*t128889+e*k*rho_a[index]*1.0/pow(t128882,2.0/3.0)*t128889* \
               (2.0/3.0)-(e*gamma_aa[index]*mu_*rho_a[index]*1.0/pow(t128882,1.0E1/3.0)*1.0/(t128887*t128887)*(1.6E1/ \
               3.0))/k;
        } else if (rho_a[index] > cutoff_) {
            double t129040 = rho_a[index]*2.0;
            double t129041 = 1.0/(k*k);
            double t129042 = 1.0/kp;
            double t129043 = 1.0/pow(t129040,8.0/3.0);
            double t129044 = gamma_aa[index]*mu_*t129041*t129042*t129043;
            double t129045 = t129044+1.0;
            double t129046 = 1.0/t129045;
            double t129047 = kp-kp*t129046+1.0;
            v_rho_a_[index] = e*k*pow(t129040,1.0/3.0)*t129047+e*k*rho_a[index]*1.0/pow(t129040,2.0/3.0)*t129047* \
               (2.0/3.0)-(e*gamma_aa[index]*mu_*rho_a[index]*1.0/pow(t129040,1.0E1/3.0)*1.0/(t129045*t129045)*(1.6E1/ \
               3.0))/k;
        } else if (rho_b[index] > cutoff_) {
            v_rho_a_[index] = 0.0;
        } else {
            v_rho_a_[index] = 0.0;
        } 

        //V_rho_b
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t128891 = rho_b[index]*2.0;
            double t128892 = 1.0/(k*k);
            double t128893 = 1.0/kp;
            double t128894 = 1.0/pow(t128891,8.0/3.0);
            double t128895 = gamma_bb[index]*mu_*t128892*t128893*t128894;
            double t128896 = t128895+1.0;
            double t128897 = 1.0/t128896;
            double t128898 = kp-kp*t128897+1.0;
            v_rho_b_[index] = e*k*pow(t128891,1.0/3.0)*t128898+e*k*rho_b[index]*1.0/pow(t128891,2.0/3.0)*t128898* \
               (2.0/3.0)-(e*gamma_bb[index]*mu_*rho_b[index]*1.0/pow(t128891,1.0E1/3.0)*1.0/(t128896*t128896)*(1.6E1/ \
               3.0))/k;
        } else if (rho_a[index] > cutoff_) {
            v_rho_b_[index] = 0.0;
        } else if (rho_b[index] > cutoff_) {
            double t128976 = rho_b[index]*2.0;
            double t128977 = 1.0/(k*k);
            double t128978 = 1.0/kp;
            double t128979 = 1.0/pow(t128976,8.0/3.0);
            double t128980 = gamma_bb[index]*mu_*t128977*t128978*t128979;
            double t128981 = t128980+1.0;
            double t128982 = 1.0/t128981;
            double t128983 = kp-kp*t128982+1.0;
            v_rho_b_[index] = e*k*t128983*pow(t128976,1.0/3.0)+e*k*rho_b[index]*t128983*1.0/pow(t128976,2.0/3.0) \
               *(2.0/3.0)-(e*gamma_bb[index]*mu_*rho_b[index]*1.0/(t128981*t128981)*1.0/pow(t128976,1.0E1/3.0)*(1.6E1/ \
               3.0))/k;
        } else {
            v_rho_b_[index] = 0.0;
        } 

        if (is_gga_) {

            //V_gamma_aa
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t128900 = rho_a[index]*2.0;
                v_gamma_aa_[index] = (e*mu_*rho_a[index]*1.0/pow(t128900,7.0/3.0)*1.0/pow((gamma_aa[index]*1.0/(k* \
                   k)*mu_*1.0/pow(t128900,8.0/3.0))/kp+1.0,2.0))/k;
            } else if (rho_a[index] > cutoff_) {
                double t129050 = rho_a[index]*2.0;
                v_gamma_aa_[index] = (e*mu_*rho_a[index]*1.0/pow(t129050,7.0/3.0)*1.0/pow((gamma_aa[index]*1.0/(k* \
                   k)*mu_*1.0/pow(t129050,8.0/3.0))/kp+1.0,2.0))/k;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_aa_[index] = 0.0;
            } else {
                v_gamma_aa_[index] = 0.0;
            } 

            //V_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_ab_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_ab_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_ab_[index] = 0.0;
            } else {
                v_gamma_ab_[index] = 0.0;
            } 

            //V_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t128903 = rho_b[index]*2.0;
                v_gamma_bb_[index] = (e*mu_*rho_b[index]*1.0/pow(t128903,7.0/3.0)*1.0/pow((gamma_bb[index]*1.0/(k* \
                   k)*mu_*1.0/pow(t128903,8.0/3.0))/kp+1.0,2.0))/k;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                double t128987 = rho_b[index]*2.0;
                v_gamma_bb_[index] = (e*mu_*rho_b[index]*1.0/pow(t128987,7.0/3.0)*1.0/pow((gamma_bb[index]*1.0/(k* \
                   k)*mu_*1.0/pow(t128987,8.0/3.0))/kp+1.0,2.0))/k;
            } else {
                v_gamma_bb_[index] = 0.0;
            } 
        }
        if (is_meta_) {

            //V_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_tau_a_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_tau_a_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_tau_a_[index] = 0.0;
            } else {
                v_tau_a_[index] = 0.0;
            } 

            //V_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_tau_b_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_tau_b_[index] = 0.0;
            } else {
                v_tau_b_[index] = 0.0;
            } 
        }
    }
    //Second Partials
    for (int index = 0; index < ntrue && deriv_ >= 2; index++) {

        //V_rho_a_rho_a
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t128907 = rho_a[index]*2.0;
            double t128908 = 1.0/(k*k);
            double t128909 = 1.0/kp;
            double t128910 = 1.0/pow(t128907,8.0/3.0);
            double t128911 = gamma_aa[index]*mu_*t128910*t128908*t128909;
            double t128912 = t128911+1.0;
            double t128913 = 1.0/t128912;
            double t128914 = kp-kp*t128913+1.0;
            double t128915 = 1.0/k;
            double t128916 = 1.0/(t128912*t128912);
            v_rho_a_rho_a_[index] = e*k*t128914*1.0/pow(t128907,2.0/3.0)*(4.0/3.0)-e*k*rho_a[index]*t128914*1.0/ \
               pow(t128907,5.0/3.0)*(8.0/9.0)-e*gamma_aa[index]*mu_*t128915*1.0/pow(t128907,1.0E1/3.0)*t128916*(3.2E1/ \
               3.0)-e*(gamma_aa[index]*gamma_aa[index])*1.0/(k*k*k)*(mu_*mu_)*1.0/(rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]*rho_a[index])*1.0/(t128912*t128912*t128912)*t128909*(4.0/9.0)+e*gamma_aa[index]* \
               mu_*rho_a[index]*t128915*1.0/pow(t128907,1.3E1/3.0)*t128916*3.2E1;
        } else if (rho_a[index] > cutoff_) {
            double t129056 = rho_a[index]*2.0;
            double t129057 = 1.0/(k*k);
            double t129058 = 1.0/kp;
            double t129059 = 1.0/pow(t129056,8.0/3.0);
            double t129060 = gamma_aa[index]*mu_*t129057*t129058*t129059;
            double t129061 = t129060+1.0;
            double t129062 = 1.0/t129061;
            double t129063 = kp-kp*t129062+1.0;
            double t129064 = 1.0/k;
            double t129065 = 1.0/(t129061*t129061);
            v_rho_a_rho_a_[index] = e*k*t129063*1.0/pow(t129056,2.0/3.0)*(4.0/3.0)-e*k*rho_a[index]*t129063*1.0/ \
               pow(t129056,5.0/3.0)*(8.0/9.0)-e*gamma_aa[index]*mu_*t129064*1.0/pow(t129056,1.0E1/3.0)*t129065*(3.2E1/ \
               3.0)-e*(gamma_aa[index]*gamma_aa[index])*1.0/(k*k*k)*(mu_*mu_)*1.0/(rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]*rho_a[index])*1.0/(t129061*t129061*t129061)*t129058*(4.0/9.0)+e*gamma_aa[index]* \
               mu_*rho_a[index]*t129064*1.0/pow(t129056,1.3E1/3.0)*t129065*3.2E1;
        } else if (rho_b[index] > cutoff_) {
            v_rho_a_rho_a_[index] = 0.0;
        } else {
            v_rho_a_rho_a_[index] = 0.0;
        } 

        //V_rho_a_rho_b
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            v_rho_a_rho_b_[index] = 0.0;
        } else if (rho_a[index] > cutoff_) {
            v_rho_a_rho_b_[index] = 0.0;
        } else if (rho_b[index] > cutoff_) {
            v_rho_a_rho_b_[index] = 0.0;
        } else {
            v_rho_a_rho_b_[index] = 0.0;
        } 

        //V_rho_b_rho_b
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t128919 = rho_b[index]*2.0;
            double t128920 = 1.0/(k*k);
            double t128921 = 1.0/kp;
            double t128922 = 1.0/pow(t128919,8.0/3.0);
            double t128923 = gamma_bb[index]*mu_*t128920*t128921*t128922;
            double t128924 = t128923+1.0;
            double t128925 = 1.0/t128924;
            double t128926 = kp-kp*t128925+1.0;
            double t128927 = 1.0/k;
            double t128928 = 1.0/(t128924*t128924);
            v_rho_b_rho_b_[index] = e*k*t128926*1.0/pow(t128919,2.0/3.0)*(4.0/3.0)-e*k*rho_b[index]*t128926*1.0/ \
               pow(t128919,5.0/3.0)*(8.0/9.0)-e*gamma_bb[index]*mu_*t128927*1.0/pow(t128919,1.0E1/3.0)*t128928*(3.2E1/ \
               3.0)-e*(gamma_bb[index]*gamma_bb[index])*1.0/(k*k*k)*(mu_*mu_)*1.0/(rho_b[index]*rho_b[index]*rho_b[index]* \
               rho_b[index]*rho_b[index]*rho_b[index])*t128921*1.0/(t128924*t128924*t128924)*(4.0/9.0)+e*gamma_bb[index]* \
               mu_*rho_b[index]*t128927*1.0/pow(t128919,1.3E1/3.0)*t128928*3.2E1;
        } else if (rho_a[index] > cutoff_) {
            v_rho_b_rho_b_[index] = 0.0;
        } else if (rho_b[index] > cutoff_) {
            double t128993 = rho_b[index]*2.0;
            double t128994 = 1.0/(k*k);
            double t128995 = 1.0/kp;
            double t128996 = 1.0/pow(t128993,8.0/3.0);
            double t128997 = gamma_bb[index]*mu_*t128994*t128995*t128996;
            double t128998 = t128997+1.0;
            double t128999 = 1.0/t128998;
            double t129000 = kp-kp*t128999+1.0;
            double t129001 = 1.0/k;
            double t129002 = 1.0/(t128998*t128998);
            v_rho_b_rho_b_[index] = e*k*t129000*1.0/pow(t128993,2.0/3.0)*(4.0/3.0)-e*k*rho_b[index]*t129000*1.0/ \
               pow(t128993,5.0/3.0)*(8.0/9.0)-e*gamma_bb[index]*mu_*t129001*t129002*1.0/pow(t128993,1.0E1/3.0)*(3.2E1/ \
               3.0)-e*(gamma_bb[index]*gamma_bb[index])*1.0/(k*k*k)*(mu_*mu_)*1.0/(rho_b[index]*rho_b[index]*rho_b[index]* \
               rho_b[index]*rho_b[index]*rho_b[index])*t128995*1.0/(t128998*t128998*t128998)*(4.0/9.0)+e*gamma_bb[index]* \
               mu_*rho_b[index]*t129001*t129002*1.0/pow(t128993,1.3E1/3.0)*3.2E1;
        } else {
            v_rho_b_rho_b_[index] = 0.0;
        } 

        if (is_gga_) {

            //V_rho_a_gamma_aa
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t128930 = rho_a[index]*2.0;
                double t128931 = 1.0/k;
                double t128932 = 1.0/(k*k);
                double t128933 = 1.0/kp;
                double t128934 = 1.0/pow(t128930,8.0/3.0);
                double t128935 = gamma_aa[index]*mu_*t128932*t128933*t128934;
                double t128936 = t128935+1.0;
                double t128937 = 1.0/(t128936*t128936);
                v_rho_a_gamma_aa_[index] = e*mu_*1.0/pow(t128930,7.0/3.0)*t128931*t128937-e*mu_*rho_a[index]*1.0/ \
                   pow(t128930,1.0E1/3.0)*t128931*t128937*(1.4E1/3.0)+e*gamma_aa[index]*1.0/(k*k*k)*(mu_*mu_)*1.0/(rho_a[index]* \
                   rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index])*t128933*1.0/(t128936*t128936*t128936)*(1.0/6.0) \
                   ;
            } else if (rho_a[index] > cutoff_) {
                double t129069 = rho_a[index]*2.0;
                double t129070 = 1.0/k;
                double t129071 = 1.0/(k*k);
                double t129072 = 1.0/kp;
                double t129073 = 1.0/pow(t129069,8.0/3.0);
                double t129074 = gamma_aa[index]*mu_*t129071*t129072*t129073;
                double t129075 = t129074+1.0;
                double t129076 = 1.0/(t129075*t129075);
                v_rho_a_gamma_aa_[index] = e*mu_*t129070*t129076*1.0/pow(t129069,7.0/3.0)-e*mu_*rho_a[index]*t129070* \
                   t129076*1.0/pow(t129069,1.0E1/3.0)*(1.4E1/3.0)+e*gamma_aa[index]*1.0/(k*k*k)*(mu_*mu_)*1.0/(rho_a[index]* \
                   rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index])*t129072*1.0/(t129075*t129075*t129075)*(1.0/6.0) \
                   ;
            } else if (rho_b[index] > cutoff_) {
                v_rho_a_gamma_aa_[index] = 0.0;
            } else {
                v_rho_a_gamma_aa_[index] = 0.0;
            } 

            //V_rho_a_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_a_gamma_ab_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_a_gamma_ab_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_a_gamma_ab_[index] = 0.0;
            } else {
                v_rho_a_gamma_ab_[index] = 0.0;
            } 

            //V_rho_a_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_a_gamma_bb_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_a_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_a_gamma_bb_[index] = 0.0;
            } else {
                v_rho_a_gamma_bb_[index] = 0.0;
            } 

            //V_rho_b_gamma_aa
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_b_gamma_aa_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_b_gamma_aa_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_b_gamma_aa_[index] = 0.0;
            } else {
                v_rho_b_gamma_aa_[index] = 0.0;
            } 

            //V_rho_b_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_b_gamma_ab_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_b_gamma_ab_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_b_gamma_ab_[index] = 0.0;
            } else {
                v_rho_b_gamma_ab_[index] = 0.0;
            } 

            //V_rho_b_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t128943 = rho_b[index]*2.0;
                double t128944 = 1.0/k;
                double t128945 = 1.0/(k*k);
                double t128946 = 1.0/kp;
                double t128947 = 1.0/pow(t128943,8.0/3.0);
                double t128948 = gamma_bb[index]*mu_*t128945*t128946*t128947;
                double t128949 = t128948+1.0;
                double t128950 = 1.0/(t128949*t128949);
                v_rho_b_gamma_bb_[index] = e*mu_*t128950*1.0/pow(t128943,7.0/3.0)*t128944-e*mu_*rho_b[index]*t128950* \
                   1.0/pow(t128943,1.0E1/3.0)*t128944*(1.4E1/3.0)+e*gamma_bb[index]*1.0/(k*k*k)*(mu_*mu_)*1.0/(rho_b[index]* \
                   rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index])*t128946*1.0/(t128949*t128949*t128949)*(1.0/6.0) \
                   ;
            } else if (rho_a[index] > cutoff_) {
                v_rho_b_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                double t129009 = rho_b[index]*2.0;
                double t129010 = 1.0/k;
                double t129011 = 1.0/(k*k);
                double t129012 = 1.0/kp;
                double t129013 = 1.0/pow(t129009,8.0/3.0);
                double t129014 = gamma_bb[index]*mu_*t129011*t129012*t129013;
                double t129015 = t129014+1.0;
                double t129016 = 1.0/(t129015*t129015);
                v_rho_b_gamma_bb_[index] = e*mu_*t129010*t129016*1.0/pow(t129009,7.0/3.0)-e*mu_*rho_b[index]*t129010* \
                   t129016*1.0/pow(t129009,1.0E1/3.0)*(1.4E1/3.0)+e*gamma_bb[index]*1.0/(k*k*k)*(mu_*mu_)*1.0/(rho_b[index]* \
                   rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index])*t129012*1.0/(t129015*t129015*t129015)*(1.0/6.0) \
                   ;
            } else {
                v_rho_b_gamma_bb_[index] = 0.0;
            } 

            //V_gamma_aa_gamma_aa
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t128952 = 1.0/kp;
                v_gamma_aa_gamma_aa_[index] = e*1.0/(k*k*k)*(mu_*mu_)*1.0/(rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index])*t128952*1.0/pow(gamma_aa[index]*1.0/(k*k)*mu_*t128952*1.0/pow(rho_a[index]*2.0,8.0/3.0) \
                   +1.0,3.0)*(-1.0/1.6E1);
            } else if (rho_a[index] > cutoff_) {
                double t129083 = 1.0/kp;
                v_gamma_aa_gamma_aa_[index] = e*1.0/(k*k*k)*(mu_*mu_)*1.0/(rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index])*t129083*1.0/pow(gamma_aa[index]*1.0/(k*k)*mu_*t129083*1.0/pow(rho_a[index]*2.0,8.0/3.0) \
                   +1.0,3.0)*(-1.0/1.6E1);
            } else if (rho_b[index] > cutoff_) {
                v_gamma_aa_gamma_aa_[index] = 0.0;
            } else {
                v_gamma_aa_gamma_aa_[index] = 0.0;
            } 

            //V_gamma_aa_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_aa_gamma_ab_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_aa_gamma_ab_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_aa_gamma_ab_[index] = 0.0;
            } else {
                v_gamma_aa_gamma_ab_[index] = 0.0;
            } 

            //V_gamma_aa_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_aa_gamma_bb_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_aa_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_aa_gamma_bb_[index] = 0.0;
            } else {
                v_gamma_aa_gamma_bb_[index] = 0.0;
            } 

            //V_gamma_ab_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_ab_gamma_ab_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_ab_gamma_ab_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_ab_gamma_ab_[index] = 0.0;
            } else {
                v_gamma_ab_gamma_ab_[index] = 0.0;
            } 

            //V_gamma_ab_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_ab_gamma_bb_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_ab_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_ab_gamma_bb_[index] = 0.0;
            } else {
                v_gamma_ab_gamma_bb_[index] = 0.0;
            } 

            //V_gamma_bb_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t128958 = 1.0/kp;
                v_gamma_bb_gamma_bb_[index] = e*1.0/(k*k*k)*(mu_*mu_)*1.0/(rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index])*t128958*1.0/pow(gamma_bb[index]*1.0/(k*k)*mu_*t128958*1.0/pow(rho_b[index]*2.0,8.0/3.0) \
                   +1.0,3.0)*(-1.0/1.6E1);
            } else if (rho_a[index] > cutoff_) {
                v_gamma_bb_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                double t129023 = 1.0/kp;
                v_gamma_bb_gamma_bb_[index] = e*1.0/(k*k*k)*(mu_*mu_)*1.0/(rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index])*t129023*1.0/pow(gamma_bb[index]*1.0/(k*k)*mu_*t129023*1.0/pow(rho_b[index]*2.0,8.0/3.0) \
                   +1.0,3.0)*(-1.0/1.6E1);
            } else {
                v_gamma_bb_gamma_bb_[index] = 0.0;
            } 

        }
        if (is_meta_) {

            //V_rho_a_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_a_tau_a_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_a_tau_a_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_a_tau_a_[index] = 0.0;
            } else {
                v_rho_a_tau_a_[index] = 0.0;
            } 

            //V_rho_a_tau_b
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_a_tau_b_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_a_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_a_tau_b_[index] = 0.0;
            } else {
                v_rho_a_tau_b_[index] = 0.0;
            } 

            //V_rho_b_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_b_tau_a_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_b_tau_a_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_b_tau_a_[index] = 0.0;
            } else {
                v_rho_b_tau_a_[index] = 0.0;
            } 

            //V_rho_b_tau_b
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_b_tau_b_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_b_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_b_tau_b_[index] = 0.0;
            } else {
                v_rho_b_tau_b_[index] = 0.0;
            } 

            //V_tau_a_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_tau_a_tau_a_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_tau_a_tau_a_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_tau_a_tau_a_[index] = 0.0;
            } else {
                v_tau_a_tau_a_[index] = 0.0;
            } 

            //V_tau_a_tau_b
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_tau_a_tau_b_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_tau_a_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_tau_a_tau_b_[index] = 0.0;
            } else {
                v_tau_a_tau_b_[index] = 0.0;
            } 

            //V_tau_b_tau_b
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_tau_b_tau_b_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_tau_b_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_tau_b_tau_b_[index] = 0.0;
            } else {
                v_tau_b_tau_b_[index] = 0.0;
            } 

            if (is_gga_) {

                //V_gamma_aa_tau_a
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } else {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } 

                //V_gamma_aa_tau_b
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_aa_tau_b_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_aa_tau_b_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_aa_tau_b_[index] = 0.0;
                } else {
                    v_gamma_aa_tau_b_[index] = 0.0;
                } 

                //V_gamma_ab_tau_a
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_ab_tau_a_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_ab_tau_a_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_ab_tau_a_[index] = 0.0;
                } else {
                    v_gamma_ab_tau_a_[index] = 0.0;
                } 

                //V_gamma_ab_tau_b
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_ab_tau_b_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_ab_tau_b_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_ab_tau_b_[index] = 0.0;
                } else {
                    v_gamma_ab_tau_b_[index] = 0.0;
                } 

                //V_gamma_bb_tau_a
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_bb_tau_a_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_bb_tau_a_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_bb_tau_a_[index] = 0.0;
                } else {
                    v_gamma_bb_tau_a_[index] = 0.0;
                } 

                //V_gamma_bb_tau_b
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_bb_tau_b_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_bb_tau_b_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_bb_tau_b_[index] = 0.0;
                } else {
                    v_gamma_bb_tau_b_[index] = 0.0;
                } 

            }
        }
    }
}

}}

