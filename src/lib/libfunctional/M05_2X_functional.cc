/**********************************************************
* M05_2X_functional.cc: definitions for M05_2X_functional for KS-DFT
* Robert Parrish, robparrish@gmail.com
* Autogenerated by MATLAB Script on 25-May-2011
*
***********************************************************/
#include <libmints/properties.h>
#include <libciomr/libciomr.h>
#include "M05_2X_functional.h"
#include <stdlib.h>
#include <cmath>
#include <string>
#include <string>
#include <vector>

using namespace psi;
using namespace boost;
using namespace std;

namespace psi { namespace functional {

M05_2X_Functional::M05_2X_Functional(int npoints, int deriv) : Functional(npoints, deriv)
{
    
    name_ = "M05_2X";
    description_ = "M05-2X Meta-GGA Functional";
    citation_ = "Zhao, Y., Schultz, N. E., Truhlar, D. G., J. Chem. Theory Comput. 2, 364, 2006";
    
    double X = 5.6000000000000005E-01;
    params_.push_back(make_pair("X",X));
    double C_k = 9.1155997446911918E+00;
    params_.push_back(make_pair("C_k",C_k));
    double k = 3.0936677262801355E+00;
    params_.push_back(make_pair("k",k));
    double e = -2.3873241463784300E-01;
    params_.push_back(make_pair("e",e));
    double kp = 8.0400000000000005E-01;
    params_.push_back(make_pair("kp",kp));
    double mu_ = 2.1951497276451709E-01;
    params_.push_back(make_pair("mu_",mu_));
    double a_1 = -5.6833000000000000E-01;
    params_.push_back(make_pair("a_1",a_1));
    double a_2 = -1.3005700000000000E+00;
    params_.push_back(make_pair("a_2",a_2));
    double a_3 = 5.5007000000000001E+00;
    params_.push_back(make_pair("a_3",a_3));
    double a_4 = 9.0640199999999993E+00;
    params_.push_back(make_pair("a_4",a_4));
    double a_5 = -3.2210749999999997E+01;
    params_.push_back(make_pair("a_5",a_5));
    double a_6 = -2.3732980000000001E+01;
    params_.push_back(make_pair("a_6",a_6));
    double a_7 = 7.0229960000000005E+01;
    params_.push_back(make_pair("a_7",a_7));
    double a_8 = 2.9886140000000001E+01;
    params_.push_back(make_pair("a_8",a_8));
    double a_9 = -6.0257779999999997E+01;
    params_.push_back(make_pair("a_9",a_9));
    double a_10 = -1.3222049999999999E+01;
    params_.push_back(make_pair("a_10",a_10));
    double a_11 = 1.5236960000000000E+01;
    params_.push_back(make_pair("a_11",a_11));
    double two_13 = 1.2599210498948732E+00;
    params_.push_back(make_pair("two_13",two_13));
    double d2fz0 = 1.7099210000000000E+00;
    params_.push_back(make_pair("d2fz0",d2fz0));
    double c = 6.2035049089939986E-01;
    params_.push_back(make_pair("c",c));
    double Aa = 1.6886999999999999E-02;
    params_.push_back(make_pair("Aa",Aa));
    double a1a = 1.1125000000000000E-01;
    params_.push_back(make_pair("a1a",a1a));
    double b1a = 1.0356999999999999E+01;
    params_.push_back(make_pair("b1a",b1a));
    double b2a = 3.6231000000000000E+00;
    params_.push_back(make_pair("b2a",b2a));
    double b3a = 8.8026000000000004E-01;
    params_.push_back(make_pair("b3a",b3a));
    double b4a = 4.9670999999999998E-01;
    params_.push_back(make_pair("b4a",b4a));
    double c0p = 3.1091000000000001E-02;
    params_.push_back(make_pair("c0p",c0p));
    double a1p = 2.1370000000000000E-01;
    params_.push_back(make_pair("a1p",a1p));
    double b1p = 7.5956999999999999E+00;
    params_.push_back(make_pair("b1p",b1p));
    double b2p = 3.5876000000000001E+00;
    params_.push_back(make_pair("b2p",b2p));
    double b3p = 1.6382000000000001E+00;
    params_.push_back(make_pair("b3p",b3p));
    double b4p = 4.9293999999999999E-01;
    params_.push_back(make_pair("b4p",b4p));
    double c0f = 1.5545000000000000E-02;
    params_.push_back(make_pair("c0f",c0f));
    double a1f = 2.0548000000000000E-01;
    params_.push_back(make_pair("a1f",a1f));
    double b1f = 1.4118900000000000E+01;
    params_.push_back(make_pair("b1f",b1f));
    double b2f = 6.1977000000000002E+00;
    params_.push_back(make_pair("b2f",b2f));
    double b3f = 3.3662000000000001E+00;
    params_.push_back(make_pair("b3f",b3f));
    double b4f = 6.2517000000000000E-01;
    params_.push_back(make_pair("b4f",b4f));
    double gcab = 3.0999999999999999E-03;
    params_.push_back(make_pair("gcab",gcab));
    double gcaa = 5.9999999999999998E-02;
    params_.push_back(make_pair("gcaa",gcaa));
    double ccab0 = 1.0000000000000000E+00;
    params_.push_back(make_pair("ccab0",ccab0));
    double ccab1 = 1.0929700000000000E+00;
    params_.push_back(make_pair("ccab1",ccab1));
    double ccab2 = -3.7917100000000001E+00;
    params_.push_back(make_pair("ccab2",ccab2));
    double ccab3 = 2.8281000000000001E+00;
    params_.push_back(make_pair("ccab3",ccab3));
    double ccab4 = -1.0589090000000001E+01;
    params_.push_back(make_pair("ccab4",ccab4));
    double ccaa0 = 1.0000000000000000E+00;
    params_.push_back(make_pair("ccaa0",ccaa0));
    double ccaa1 = -3.0543000000000000E+00;
    params_.push_back(make_pair("ccaa1",ccaa1));
    double ccaa2 = 7.6185400000000003E+00;
    params_.push_back(make_pair("ccaa2",ccaa2));
    double ccaa3 = 1.4766500000000000E+00;
    params_.push_back(make_pair("ccaa3",ccaa3));
    double ccaa4 = -1.1923650000000000E+01;
    params_.push_back(make_pair("ccaa4",ccaa4));

    is_gga_ = true;
    is_meta_ = true;

    //Required allocateion
    allocate();
}
M05_2X_Functional::~M05_2X_Functional()
{
}
void M05_2X_Functional::computeRKSFunctional(boost::shared_ptr<Properties> prop)
{
    int ntrue = prop->getTrueSize();

    const double* rho_a;
    const double* gamma_aa;
    const double* tau_a;

    rho_a = prop->getDensityA();
    if (is_gga_) {
        gamma_aa = prop->getDensityGradientSquaredAA();
    }
    if (is_meta_) {
        tau_a = prop->getKEDensityA();
    }

    double X = params_[0].second;
    double C_k = params_[1].second;
    double k = params_[2].second;
    double e = params_[3].second;
    double kp = params_[4].second;
    double mu_ = params_[5].second;
    double a_1 = params_[6].second;
    double a_2 = params_[7].second;
    double a_3 = params_[8].second;
    double a_4 = params_[9].second;
    double a_5 = params_[10].second;
    double a_6 = params_[11].second;
    double a_7 = params_[12].second;
    double a_8 = params_[13].second;
    double a_9 = params_[14].second;
    double a_10 = params_[15].second;
    double a_11 = params_[16].second;
    double two_13 = params_[17].second;
    double d2fz0 = params_[18].second;
    double c = params_[19].second;
    double Aa = params_[20].second;
    double a1a = params_[21].second;
    double b1a = params_[22].second;
    double b2a = params_[23].second;
    double b3a = params_[24].second;
    double b4a = params_[25].second;
    double c0p = params_[26].second;
    double a1p = params_[27].second;
    double b1p = params_[28].second;
    double b2p = params_[29].second;
    double b3p = params_[30].second;
    double b4p = params_[31].second;
    double c0f = params_[32].second;
    double a1f = params_[33].second;
    double b1f = params_[34].second;
    double b2f = params_[35].second;
    double b3f = params_[36].second;
    double b4f = params_[37].second;
    double gcab = params_[38].second;
    double gcaa = params_[39].second;
    double ccab0 = params_[40].second;
    double ccab1 = params_[41].second;
    double ccab2 = params_[42].second;
    double ccab3 = params_[43].second;
    double ccab4 = params_[44].second;
    double ccaa0 = params_[45].second;
    double ccaa1 = params_[46].second;
    double ccaa2 = params_[47].second;
    double ccaa3 = params_[48].second;
    double ccaa4 = params_[49].second;

    //Functional
    for (int index = 0; index < ntrue; index++) {

        //Functional Value
        if (rho_a[index] > cutoff_) {
            double t84023 = 1.0/pow(rho_a[index],1.0/3.0);
            double t84024 = c*t84023;
            double t84025 = sqrt(t84024);
            double t84026 = pow(t84024,3.0/2.0);
            double t84027 = c*c;
            double t84028 = 1.0/pow(rho_a[index],2.0/3.0);
            double t84029 = 1.0/c0p;
            double t84030 = b1p*t84025;
            double t84031 = b3p*t84026;
            double t84032 = b4p*t84027*t84028;
            double t84033 = b2p*c*t84023;
            double t84034 = t84030+t84031+t84032+t84033;
            double t84035 = 1.0/t84034;
            double t84036 = t84035*t84029*(1.0/2.0);
            double t84037 = t84036+1.0;
            double t84038 = log(t84037);
            double t84039 = a1p*c*t84023;
            double t84040 = t84039+1.0;
            double t84041 = rho_a[index]*2.0;
            double t84042 = 1.0/pow(t84041,1.0/3.0);
            double t84043 = c*t84042;
            double t84044 = gamma_aa[index]*gamma_aa[index];
            double t84045 = gcab*gcab;
            double t84046 = t84044*t84044;
            double t84047 = t84045*t84045;
            double t84048 = 1.0/pow(rho_a[index],3.2E1/3.0);
            double t84049 = 1.0/pow(rho_a[index],8.0/3.0);
            double t84050 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]);
            double t84051 = 1.0/pow(rho_a[index],1.6E1/3.0);
            double t84052 = 1.0/pow(t84041,2.0/3.0);
            double t84053 = pow(rho_a[index],5.0/3.0);
            double t84054 = 1.0/tau_a[index];
            double t84055 = C_k*t84053*t84054;
            double t84056 = t84055-1.0;
            double t84057 = t84056*t84056;
            double t84058 = t84057*t84057;
            double t84059 = t84058*t84058;
            double t84060 = t84055+1.0;
            double t84061 = pow(2.0,1.0/3.0);
            double t84062 = t84061*2.0;
            double t84063 = t84062-2.0;
            double t84064 = two_13*2.0;
            double t84065 = t84064-2.0;
            double t84066 = 1.0/t84065;
            double t84067 = 1.0/c0f;
            double t84068 = b1f*t84025;
            double t84069 = b3f*t84026;
            double t84070 = b4f*t84027*t84028;
            double t84071 = b2f*c*t84023;
            double t84072 = t84070+t84071+t84068+t84069;
            double t84073 = 1.0/t84072;
            double t84074 = t84073*t84067*(1.0/2.0);
            double t84075 = t84074+1.0;
            double t84076 = log(t84075);
            double t84077 = a1f*c*t84023;
            double t84078 = t84077+1.0;
            double t84079 = c0f*t84076*t84078*2.0;
            double t84080 = c0p*t84040*t84038*2.0;
            double t84081 = gcaa*gcaa;
            double t84082 = t84081*t84081;
            functional_[index] = (rho_a[index]*(t84080+t84063*t84066*(t84079-c0p*t84040*t84038*2.0))*2.0-c0p* \
               rho_a[index]*log((t84029*(1.0/2.0))/(b1p*sqrt(t84043)+b3p*pow(t84043,3.0/2.0)+b2p*c*t84042+b4p*t84052* \
               t84027)+1.0)*(a1p*c*t84042+1.0)*4.0)*(ccab0+(ccab2*t84051*t84044*t84045)/(gamma_aa[index]*gcab*t84049* \
               2.0+t84051*t84044*t84045+1.0)+(ccab1*gamma_aa[index]*gcab*t84049)/(gamma_aa[index]*gcab*t84049+1.0) \
               +(ccab4*t84046*t84047*t84048)/(gamma_aa[index]*gcab*t84049*4.0+t84051*t84044*t84045*6.0+t84046*t84047* \
               t84048+gamma_aa[index]*gcab*t84050*t84044*t84045*4.0+1.0)+(ccab3*gamma_aa[index]*gcab*t84050*t84044* \
               t84045)/(gamma_aa[index]*gcab*t84049*3.0+t84051*t84044*t84045*3.0+gamma_aa[index]*gcab*t84050*t84044* \
               t84045+1.0))-rho_a[index]*( ( (tau_a[index]-1.0/1.0E20 > 0.0) ? 1.0*(t84054*(tau_a[index]*2.0-(gamma_aa[index]* \
               (1.0/4.0))/rho_a[index])*(1.0/2.0)-1.0) : 0.0 ) +1.0)*(t84080-t84063*t84066*(t84080-t84079))*(ccaa0+ \
               (ccaa2*t84051*t84044*t84081)/(gamma_aa[index]*gcaa*t84049*2.0+t84051*t84044*t84081+1.0)+(ccaa1*gamma_aa[index]* \
               gcaa*t84049)/(gamma_aa[index]*gcaa*t84049+1.0)+(ccaa4*t84046*t84082*t84048)/(gamma_aa[index]*gcaa* \
               t84049*4.0+t84051*t84044*t84081*6.0+t84046*t84082*t84048+gamma_aa[index]*gcaa*t84050*t84044*t84081* \
               4.0+1.0)+(ccaa3*gamma_aa[index]*gcaa*t84050*t84044*t84081)/(gamma_aa[index]*gcaa*t84049*3.0+t84051* \
               t84044*t84081*3.0+gamma_aa[index]*gcaa*t84050*t84044*t84081+1.0))*2.0-rho_a[index]*(X-1.0)*(kp-kp/ \
               ((gamma_aa[index]*1.0/(k*k)*mu_*1.0/(rho_a[index]*rho_a[index])*t84052*(1.0/4.0))/kp+1.0)+1.0)*((a_1* \
               t84056)/t84060+a_2*1.0/(t84060*t84060)*t84057+a_4*1.0/(t84060*t84060*t84060*t84060)*t84058+a_8*1.0/ \
               (t84060*t84060*t84060*t84060*t84060*t84060*t84060*t84060)*t84059+a_10*1.0/pow(t84060,1.0E1)*t84057* \
               t84059+a_3*1.0/(t84060*t84060*t84060)*t84056*t84057+a_5*1.0/(t84060*t84060*t84060*t84060*t84060)*t84056* \
               t84058+a_6*1.0/(t84060*t84060*t84060*t84060*t84060*t84060)*t84057*t84058+a_9*1.0/(t84060*t84060*t84060* \
               t84060*t84060*t84060*t84060*t84060*t84060)*t84056*t84059+a_11*1.0/pow(t84060,1.1E1)*t84056*t84057* \
               t84059+a_7*1.0/(t84060*t84060*t84060*t84060*t84060*t84060*t84060)*t84056*t84057*t84058+1.0)*2.0;
        } else {
            functional_[index] = 0.0;
        } 

    }
    //First Partials
    for (int index = 0; index < ntrue && deriv_ >= 1; index++) {
        
        //V_rho_a
        if (rho_a[index] > cutoff_) {
            double t84084 = gamma_aa[index]*gamma_aa[index];
            double t84085 = gcab*gcab;
            double t84086 = t84084*t84084;
            double t84087 = t84085*t84085;
            double t84088 = 1.0/pow(rho_a[index],3.2E1/3.0);
            double t84089 = 1.0/pow(rho_a[index],8.0/3.0);
            double t84090 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]);
            double t84091 = 1.0/pow(rho_a[index],1.6E1/3.0);
            double t84092 = rho_a[index]*2.0;
            double t84093 = 1.0/pow(t84092,1.0/3.0);
            double t84094 = c*t84093;
            double t84095 = sqrt(t84094);
            double t84096 = b1p*t84095;
            double t84097 = pow(t84094,3.0/2.0);
            double t84098 = b3p*t84097;
            double t84099 = b2p*c*t84093;
            double t84100 = c*c;
            double t84101 = 1.0/pow(t84092,2.0/3.0);
            double t84102 = b4p*t84100*t84101;
            double t84103 = t84102+t84096+t84098+t84099;
            double t84104 = 1.0/pow(t84092,4.0/3.0);
            double t84105 = 1.0/c0p;
            double t84106 = 1.0/t84103;
            double t84107 = t84105*t84106*(1.0/2.0);
            double t84108 = t84107+1.0;
            double t84109 = 1.0/pow(rho_a[index],1.0/3.0);
            double t84110 = c*t84109;
            double t84111 = sqrt(t84110);
            double t84112 = b1f*t84111;
            double t84113 = pow(t84110,3.0/2.0);
            double t84114 = b3f*t84113;
            double t84115 = 1.0/pow(rho_a[index],2.0/3.0);
            double t84116 = b4f*t84100*t84115;
            double t84117 = b2f*c*t84109;
            double t84118 = t84112+t84114+t84116+t84117;
            double t84119 = 1.0/pow(rho_a[index],4.0/3.0);
            double t84120 = b1p*t84111;
            double t84121 = b3p*t84113;
            double t84122 = b4p*t84100*t84115;
            double t84123 = b2p*c*t84109;
            double t84124 = t84120+t84121+t84122+t84123;
            double t84125 = 1.0/pow(rho_a[index],5.0/3.0);
            double t84126 = 1.0/sqrt(t84110);
            double t84127 = 1.0/c0f;
            double t84128 = 1.0/t84118;
            double t84129 = t84127*t84128*(1.0/2.0);
            double t84130 = t84129+1.0;
            double t84131 = 1.0/t84124;
            double t84132 = t84131*t84105*(1.0/2.0);
            double t84133 = t84132+1.0;
            double t84134 = a1p*c*t84109;
            double t84135 = t84134+1.0;
            double t84136 = 1.0/t84133;
            double t84137 = 1.0/(t84124*t84124);
            double t84138 = b4p*t84100*t84125*(2.0/3.0);
            double t84139 = b2p*c*t84119*(1.0/3.0);
            double t84140 = b1p*c*t84126*t84119*(1.0/6.0);
            double t84141 = b3p*c*t84111*t84119*(1.0/2.0);
            double t84142 = t84140+t84141+t84138+t84139;
            double t84143 = t84142*t84135*t84136*t84137;
            double t84144 = log(t84133);
            double t84145 = log(t84108);
            double t84146 = a1p*c*t84093;
            double t84147 = t84146+1.0;
            double t84148 = pow(2.0,1.0/3.0);
            double t84149 = t84148*2.0;
            double t84150 = t84149-2.0;
            double t84151 = two_13*2.0;
            double t84152 = t84151-2.0;
            double t84153 = 1.0/t84152;
            double t84154 = log(t84130);
            double t84155 = a1f*c*t84109;
            double t84156 = t84155+1.0;
            double t84157 = c0f*t84154*t84156*2.0;
            double t84159 = c0p*t84135*t84144*2.0;
            double t84158 = t84157-t84159;
            double t84160 = gamma_aa[index]*gcab*t84089*4.0;
            double t84161 = gamma_aa[index]*gcab*t84090*t84084*t84085*4.0;
            double t84162 = t84091*t84084*t84085*6.0;
            double t84163 = t84086*t84087*t84088;
            double t84164 = t84160+t84161+t84162+t84163+1.0;
            double t84165 = 1.0/t84164;
            double t84166 = gamma_aa[index]*gcab*t84089;
            double t84167 = t84166+1.0;
            double t84168 = 1.0/t84167;
            double t84169 = gamma_aa[index]*gcab*t84089*3.0;
            double t84170 = gamma_aa[index]*gcab*t84090*t84084*t84085;
            double t84171 = t84091*t84084*t84085*3.0;
            double t84172 = t84170+t84171+t84169+1.0;
            double t84173 = 1.0/t84172;
            double t84174 = gamma_aa[index]*gcab*t84089*2.0;
            double t84175 = t84091*t84084*t84085;
            double t84176 = t84174+t84175+1.0;
            double t84177 = 1.0/t84176;
            double t84178 = 1.0/pow(rho_a[index],1.9E1/3.0);
            double t84179 = 1.0/pow(rho_a[index],1.1E1/3.0);
            double t84180 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]*rho_a[index]);
            double t84181 = 1.0/pow(rho_a[index],3.5E1/3.0);
            double t84182 = pow(rho_a[index],5.0/3.0);
            double t84183 = 1.0/tau_a[index];
            double t84184 = C_k*t84182*t84183;
            double t84185 = t84184-1.0;
            double t84186 = t84185*t84185;
            double t84187 = t84186*t84186;
            double t84188 = t84187*t84187;
            double t84189 = t84184+1.0;
            double t84190 = 1.0/(k*k);
            double t84191 = 1.0/kp;
            double t84192 = 1.0/(rho_a[index]*rho_a[index]);
            double t84193 = gamma_aa[index]*mu_*t84101*t84190*t84191*t84192*(1.0/4.0);
            double t84194 = t84193+1.0;
            double t84195 = 1.0/t84194;
            double t84196 = kp-kp*t84195+1.0;
            double t84197 = 1.0/t84189;
            double t84198 = pow(rho_a[index],2.0/3.0);
            double t84199 = 1.0/(t84189*t84189);
            double t84200 = 1.0/pow(t84189,1.0E1);
            double t84201 = 1.0/pow(t84189,1.1E1);
            double t84202 = 1.0/(t84189*t84189*t84189);
            double t84203 = 1.0/(t84189*t84189*t84189*t84189);
            double t84204 = 1.0/(t84189*t84189*t84189*t84189*t84189);
            double t84205 = 1.0/(t84189*t84189*t84189*t84189*t84189*t84189);
            double t84206 = 1.0/(t84189*t84189*t84189*t84189*t84189*t84189*t84189);
            double t84207 = 1.0/(t84189*t84189*t84189*t84189*t84189*t84189*t84189*t84189);
            double t84208 = 1.0/(t84189*t84189*t84189*t84189*t84189*t84189*t84189*t84189*t84189);
            double t84209 = 1.0/pow(t84092,5.0/3.0);
            double t84210 = a_1*t84185*t84197;
            double t84211 = a_10*t84200*t84186*t84188;
            double t84212 = a_11*t84201*t84185*t84186*t84188;
            double t84213 = a_2*t84186*t84199;
            double t84214 = a_3*t84202*t84185*t84186;
            double t84215 = a_4*t84203*t84187;
            double t84216 = a_5*t84204*t84185*t84187;
            double t84217 = a_6*t84205*t84186*t84187;
            double t84218 = a_7*t84206*t84185*t84186*t84187;
            double t84219 = a_8*t84207*t84188;
            double t84220 = a_9*t84208*t84185*t84188;
            double t84221 = t84210+t84211+t84220+t84212+t84213+t84214+t84215+t84216+t84217+t84218+t84219+1.0;
            double t84222 = t84150*t84153*t84158;
            double t84223 = t84222+t84159;
            double t84224 = gcaa*gcaa;
            double t84225 = t84224*t84224;
            double t84226 = tau_a[index]-1.0/1.0E20;
            double t84227 = ( (t84226 > 0.0) ?  1.0 : 0.0 ) ;
            double t84228 = tau_a[index]*2.0;
            double t84229 = 1.0/rho_a[index];
            double t84253 = gamma_aa[index]*t84229*(1.0/4.0);
            double t84230 = -t84253+t84228;
            double t84231 = t84230*t84183*(1.0/2.0);
            double t84232 = t84231-1.0;
            double t84233 = t84232*t84227;
            double t84234 = t84233+1.0;
            double t84235 = gamma_aa[index]*gcaa*t84089*4.0;
            double t84236 = gamma_aa[index]*gcaa*t84224*t84090*t84084*4.0;
            double t84237 = t84224*t84091*t84084*6.0;
            double t84238 = t84225*t84086*t84088;
            double t84239 = t84235+t84236+t84237+t84238+1.0;
            double t84240 = 1.0/t84239;
            double t84241 = gamma_aa[index]*gcaa*t84089;
            double t84242 = t84241+1.0;
            double t84243 = 1.0/t84242;
            double t84244 = gamma_aa[index]*gcaa*t84089*3.0;
            double t84245 = gamma_aa[index]*gcaa*t84224*t84090*t84084;
            double t84246 = t84224*t84091*t84084*3.0;
            double t84247 = t84244+t84245+t84246+1.0;
            double t84248 = 1.0/t84247;
            double t84249 = gamma_aa[index]*gcaa*t84089*2.0;
            double t84250 = t84224*t84091*t84084;
            double t84251 = t84250+t84249+1.0;
            double t84252 = 1.0/t84251;
            double t84254 = 1.0/t84130;
            double t84255 = 1.0/(t84118*t84118);
            double t84256 = b4f*t84100*t84125*(2.0/3.0);
            double t84257 = b2f*c*t84119*(1.0/3.0);
            double t84258 = b1f*c*t84126*t84119*(1.0/6.0);
            double t84259 = b3f*c*t84111*t84119*(1.0/2.0);
            double t84260 = t84256+t84257+t84258+t84259;
            double t84261 = a1f*c*c0f*t84154*t84119*(2.0/3.0);
            double t84262 = a1p*c*c0p*t84144*t84119*(2.0/3.0);
            double t84263 = ccaa4*t84240*t84225*t84086*t84088;
            double t84264 = ccaa1*gamma_aa[index]*gcaa*t84243*t84089;
            double t84265 = ccaa3*gamma_aa[index]*gcaa*t84224*t84090*t84084*t84248;
            double t84266 = ccaa2*t84224*t84252*t84091*t84084;
            double t84267 = ccaa0+t84263+t84264+t84265+t84266;
            v_rho_a_[index] = -(rho_a[index]*t84223*2.0-c0p*rho_a[index]*t84145*t84147*4.0)*(ccab1*gamma_aa[index]* \
               gcab*t84168*t84179*(4.0/3.0)+ccab4*t84181*t84165*t84086*t84087*(1.6E1/3.0)+ccab2*t84084*t84085*t84177* \
               t84178*(8.0/3.0)-ccab1*t84084*t84085*1.0/(t84167*t84167)*t84178*(4.0/3.0)-ccab2*t84091*t84084*t84085* \
               1.0/(t84176*t84176)*(gamma_aa[index]*gcab*t84179*(8.0/3.0)+t84084*t84085*t84178*(8.0/3.0))-ccab4*1.0/ \
               (t84164*t84164)*t84086*t84087*t84088*(gamma_aa[index]*gcab*t84179*(1.6E1/3.0)+t84181*t84086*t84087* \
               (1.6E1/3.0)+t84084*t84085*t84178*1.6E1+gamma_aa[index]*gcab*t84180*t84084*t84085*1.6E1)+ccab3*gamma_aa[index]* \
               gcab*t84180*t84173*t84084*t84085*4.0-ccab3*gamma_aa[index]*gcab*t84090*1.0/(t84172*t84172)*t84084* \
               t84085*(gamma_aa[index]*gcab*t84179*4.0+t84084*t84085*t84178*8.0+gamma_aa[index]*gcab*t84180*t84084* \
               t84085*4.0))-(X-1.0)*(t84221*t84196+rho_a[index]*t84196*(C_k*a_1*t84183*t84197*t84198*(5.0/3.0)-C_k* \
               a_1*t84183*t84185*t84198*t84199*(5.0/3.0)-C_k*a_2*t84202*t84183*t84186*t84198*(1.0E1/3.0)+C_k*a_2* \
               t84183*t84185*t84198*t84199*(1.0E1/3.0)+C_k*a_3*t84202*t84183*t84186*t84198*5.0-C_k*a_4*t84204*t84183* \
               t84187*t84198*(2.0E1/3.0)+C_k*a_5*t84204*t84183*t84187*t84198*(2.5E1/3.0)-C_k*a_8*t84208*t84183*t84188* \
               t84198*(4.0E1/3.0)+C_k*a_9*t84208*t84183*t84188*t84198*1.5E1+C_k*a_10*t84200*t84183*t84185*t84188* \
               t84198*(5.0E1/3.0)-C_k*a_10*t84201*t84183*t84186*t84188*t84198*(5.0E1/3.0)+C_k*a_11*t84201*t84183* \
               t84186*t84188*t84198*(5.5E1/3.0)-C_k*a_3*t84203*t84183*t84185*t84186*t84198*5.0+C_k*a_4*t84203*t84183* \
               t84185*t84186*t84198*(2.0E1/3.0)-C_k*a_5*t84205*t84183*t84185*t84187*t84198*(2.5E1/3.0)+C_k*a_6*t84205* \
               t84183*t84185*t84187*t84198*1.0E1-C_k*a_6*t84206*t84183*t84186*t84187*t84198*1.0E1+C_k*a_7*t84206* \
               t84183*t84186*t84187*t84198*(3.5E1/3.0)-C_k*a_9*t84200*t84183*t84185*t84188*t84198*1.5E1-C_k*a_11* \
               t84183*t84185*t84186*t84188*1.0/pow(t84189,1.2E1)*t84198*(5.5E1/3.0)-C_k*a_7*t84207*t84183*t84185* \
               t84186*t84187*t84198*(3.5E1/3.0)+C_k*a_8*t84207*t84183*t84185*t84186*t84187*t84198*(4.0E1/3.0))-kp* \
               rho_a[index]*t84221*1.0/(t84194*t84194)*(gamma_aa[index]*mu_*t84190*t84191*t84209*t84192*(1.0/3.0) \
               +gamma_aa[index]*mu_*1.0/(rho_a[index]*rho_a[index]*rho_a[index])*t84101*t84190*t84191*(1.0/2.0))) \
               -(rho_a[index]*((1.0/(t84103*t84103)*t84147*(b2p*c*t84104*(1.0/3.0)+b4p*t84100*t84209*(2.0/3.0)+b3p* \
               c*t84104*t84095*(1.0/2.0)+b1p*c*t84104*1.0/sqrt(t84094)*(1.0/6.0)))/t84108-a1p*c*c0p*t84104*t84145* \
               (2.0/3.0))*2.0+rho_a[index]*(-t84143+t84262+t84150*t84153*(t84143+t84261-t84260*t84254*t84156*t84255- \
               a1p*c*c0p*t84144*t84119*(2.0/3.0)))-c0p*t84135*t84144*2.0+c0p*t84145*t84147*2.0-t84150*t84153*t84158) \
               *(ccab0+ccab1*gamma_aa[index]*gcab*t84168*t84089+ccab2*t84091*t84084*t84085*t84177+ccab4*t84165*t84086* \
               t84087*t84088+ccab3*gamma_aa[index]*gcab*t84090*t84173*t84084*t84085)-t84223*t84234*t84267+rho_a[index]* \
               t84223*t84234*(ccaa1*gamma_aa[index]*gcaa*t84243*t84179*(8.0/3.0)+ccaa4*t84240*t84225*t84181*t84086* \
               (3.2E1/3.0)+ccaa2*t84224*t84252*t84084*t84178*(1.6E1/3.0)-ccaa1*t84224*1.0/(t84242*t84242)*t84084* \
               t84178*(8.0/3.0)-ccaa2*t84224*1.0/(t84251*t84251)*t84091*t84084*(gamma_aa[index]*gcaa*t84179*(1.6E1/ \
               3.0)+t84224*t84084*t84178*(1.6E1/3.0))-ccaa4*t84225*t84086*1.0/(t84239*t84239)*t84088*(gamma_aa[index]* \
               gcaa*t84179*(3.2E1/3.0)+t84225*t84181*t84086*(3.2E1/3.0)+t84224*t84084*t84178*3.2E1+gamma_aa[index]* \
               gcaa*t84224*t84180*t84084*3.2E1)+ccaa3*gamma_aa[index]*gcaa*t84224*t84180*t84084*t84248*8.0-ccaa3* \
               gamma_aa[index]*gcaa*t84224*t84090*t84084*1.0/(t84247*t84247)*(gamma_aa[index]*gcaa*t84179*8.0+t84224* \
               t84084*t84178*1.6E1+gamma_aa[index]*gcaa*t84224*t84180*t84084*8.0))+rho_a[index]*t84234*t84267*(-t84143+ \
               t84262+t84150*t84153*(t84143+t84261-t84262-t84260*t84254*t84156*t84255))-gamma_aa[index]*t84223*t84227* \
               t84183*t84229*t84267*(1.0/8.0);
        } else {
            v_rho_a_[index] = 0.0;
        } 
        
        if (is_gga_) {
            
            if (rho_a[index] > cutoff_) {
                double t84269 = 1.0/pow(rho_a[index],1.0/3.0);
                double t84270 = c*t84269;
                double t84271 = sqrt(t84270);
                double t84272 = pow(t84270,3.0/2.0);
                double t84273 = c*c;
                double t84274 = 1.0/pow(rho_a[index],2.0/3.0);
                double t84275 = 1.0/c0p;
                double t84276 = b1p*t84271;
                double t84277 = b3p*t84272;
                double t84278 = b4p*t84273*t84274;
                double t84279 = b2p*c*t84269;
                double t84280 = t84276+t84277+t84278+t84279;
                double t84281 = 1.0/t84280;
                double t84282 = t84281*t84275*(1.0/2.0);
                double t84283 = t84282+1.0;
                double t84284 = log(t84283);
                double t84285 = a1p*c*t84269;
                double t84286 = t84285+1.0;
                double t84287 = rho_a[index]*2.0;
                double t84288 = 1.0/pow(t84287,1.0/3.0);
                double t84289 = c*t84288;
                double t84290 = 1.0/pow(rho_a[index],8.0/3.0);
                double t84291 = gamma_aa[index]*gamma_aa[index];
                double t84292 = gcab*gcab;
                double t84293 = t84292*t84292;
                double t84294 = 1.0/pow(rho_a[index],3.2E1/3.0);
                double t84295 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t84296 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t84297 = gamma_aa[index]*gcab*t84290;
                double t84298 = t84297+1.0;
                double t84299 = gamma_aa[index]*gcab*t84290*3.0;
                double t84300 = gamma_aa[index]*gcab*t84291*t84292*t84296;
                double t84301 = t84291*t84292*t84295*3.0;
                double t84302 = t84300+t84301+t84299+1.0;
                double t84303 = t84291*t84291;
                double t84304 = gamma_aa[index]*gcab*t84290*4.0;
                double t84305 = gamma_aa[index]*gcab*t84291*t84292*t84296*4.0;
                double t84306 = t84291*t84292*t84295*6.0;
                double t84307 = t84303*t84293*t84294;
                double t84308 = t84304+t84305+t84306+t84307+1.0;
                double t84309 = gamma_aa[index]*gcab*t84290*2.0;
                double t84310 = t84291*t84292*t84295;
                double t84311 = t84310+t84309+1.0;
                double t84312 = pow(2.0,1.0/3.0);
                double t84313 = t84312*2.0;
                double t84314 = t84313-2.0;
                double t84315 = two_13*2.0;
                double t84316 = t84315-2.0;
                double t84317 = 1.0/t84316;
                double t84318 = 1.0/c0f;
                double t84319 = b1f*t84271;
                double t84320 = b3f*t84272;
                double t84321 = b4f*t84273*t84274;
                double t84322 = b2f*c*t84269;
                double t84323 = t84320+t84321+t84322+t84319;
                double t84324 = 1.0/t84323;
                double t84325 = t84324*t84318*(1.0/2.0);
                double t84326 = t84325+1.0;
                double t84327 = log(t84326);
                double t84328 = a1f*c*t84269;
                double t84329 = t84328+1.0;
                double t84330 = c0f*t84327*t84329*2.0;
                double t84331 = c0p*t84284*t84286*2.0;
                double t84332 = gcaa*gcaa;
                double t84333 = t84332*t84332;
                double t84334 = t84330-t84331;
                double t84335 = t84314*t84334*t84317;
                double t84336 = t84331+t84335;
                double t84337 = tau_a[index]-1.0/1.0E20;
                double t84338 = ( (t84337 > 0.0) ?  1.0 : 0.0 ) ;
                double t84339 = 1.0/tau_a[index];
                double t84340 = gamma_aa[index]*gcaa*t84290;
                double t84341 = t84340+1.0;
                double t84342 = 1.0/t84341;
                double t84343 = gamma_aa[index]*gcaa*t84290*4.0;
                double t84344 = gamma_aa[index]*gcaa*t84332*t84291*t84296*4.0;
                double t84345 = t84332*t84291*t84295*6.0;
                double t84346 = t84303*t84333*t84294;
                double t84347 = t84343+t84344+t84345+t84346+1.0;
                double t84348 = 1.0/t84347;
                double t84349 = gamma_aa[index]*gcaa*t84290*2.0;
                double t84350 = t84332*t84291*t84295;
                double t84351 = t84350+t84349+1.0;
                double t84352 = 1.0/t84351;
                double t84353 = gamma_aa[index]*gcaa*t84290*3.0;
                double t84354 = gamma_aa[index]*gcaa*t84332*t84291*t84296;
                double t84355 = t84332*t84291*t84295*3.0;
                double t84356 = t84353+t84354+t84355+1.0;
                double t84357 = 1.0/t84356;
                double t84358 = 1.0/rho_a[index];
                double t84359 = 1.0/(k*k);
                double t84360 = 1.0/pow(t84287,2.0/3.0);
                double t84361 = pow(rho_a[index],5.0/3.0);
                double t84362 = C_k*t84361*t84339;
                double t84363 = t84362-1.0;
                double t84364 = t84363*t84363;
                double t84365 = t84364*t84364;
                double t84366 = t84365*t84365;
                double t84367 = t84362+1.0;
                v_gamma_aa_[index] = (rho_a[index]*(t84331+t84314*t84317*(t84330-c0p*t84284*t84286*2.0))*2.0-c0p* \
                   rho_a[index]*log((t84275*(1.0/2.0))/(b1p*sqrt(t84289)+b3p*pow(t84289,3.0/2.0)+b2p*c*t84288+b4p*t84360* \
                   t84273)+1.0)*(a1p*c*t84288+1.0)*4.0)*((ccab1*gcab*t84290*(1.0/2.0))/t84298+(ccab2*gamma_aa[index]* \
                   t84292*t84295)/t84311-ccab1*gamma_aa[index]*t84292*t84295*1.0/(t84298*t84298)*(1.0/2.0)-ccab2*1.0/ \
                   (t84311*t84311)*t84291*t84292*t84295*(gcab*t84290+gamma_aa[index]*t84292*t84295)+(ccab4*gamma_aa[index]* \
                   t84291*t84293*t84294*2.0)/t84308+(ccab3*gcab*t84291*t84292*t84296*(3.0/2.0))/t84302-ccab4*t84303*1.0/ \
                   (t84308*t84308)*t84293*t84294*(gcab*t84290*2.0+gamma_aa[index]*t84292*t84295*6.0+gamma_aa[index]*t84291* \
                   t84293*t84294*2.0+gcab*t84291*t84292*t84296*6.0)-ccab3*gamma_aa[index]*gcab*1.0/(t84302*t84302)*t84291* \
                   t84292*t84296*(gcab*t84290*(3.0/2.0)+gamma_aa[index]*t84292*t84295*3.0+gcab*t84291*t84292*t84296*(3.0/ \
                   2.0)))*2.0+t84336*t84338*t84339*(ccaa0+ccaa1*gamma_aa[index]*gcaa*t84342*t84290+ccaa2*t84332*t84352* \
                   t84291*t84295+ccaa4*t84303*t84333*t84294*t84348+ccaa3*gamma_aa[index]*gcaa*t84332*t84291*t84357*t84296) \
                   *(1.0/4.0)-rho_a[index]*t84336*(t84338*(t84339*(tau_a[index]*2.0-gamma_aa[index]*t84358*(1.0/4.0)) \
                   *(1.0/2.0)-1.0)+1.0)*(ccaa1*gcaa*t84342*t84290+ccaa2*gamma_aa[index]*t84332*t84352*t84295*2.0-ccaa1* \
                   gamma_aa[index]*t84332*1.0/(t84341*t84341)*t84295-ccaa2*t84332*1.0/(t84351*t84351)*t84291*t84295*(gcaa* \
                   t84290*2.0+gamma_aa[index]*t84332*t84295*2.0)-ccaa4*t84303*t84333*1.0/(t84347*t84347)*t84294*(gcaa* \
                   t84290*4.0+gamma_aa[index]*t84332*t84295*1.2E1+gamma_aa[index]*t84333*t84291*t84294*4.0+gcaa*t84332* \
                   t84291*t84296*1.2E1)+ccaa4*gamma_aa[index]*t84333*t84291*t84294*t84348*4.0+ccaa3*gcaa*t84332*t84291* \
                   t84357*t84296*3.0-ccaa3*gamma_aa[index]*gcaa*t84332*t84291*1.0/(t84356*t84356)*t84296*(gcaa*t84290* \
                   3.0+gamma_aa[index]*t84332*t84295*6.0+gcaa*t84332*t84291*t84296*3.0))*2.0-mu_*t84360*t84358*t84359* \
                   1.0/pow((gamma_aa[index]*mu_*1.0/(rho_a[index]*rho_a[index])*t84360*t84359*(1.0/4.0))/kp+1.0,2.0)* \
                   (X-1.0)*((a_1*t84363)/t84367+a_2*t84364*1.0/(t84367*t84367)+a_4*t84365*1.0/(t84367*t84367*t84367*t84367) \
                   +a_8*t84366*1.0/(t84367*t84367*t84367*t84367*t84367*t84367*t84367*t84367)+a_10*t84364*t84366*1.0/pow(t84367,1.0E1) \
                   +a_3*t84363*t84364*1.0/(t84367*t84367*t84367)+a_5*t84363*t84365*1.0/(t84367*t84367*t84367*t84367*t84367) \
                   +a_6*t84364*t84365*1.0/(t84367*t84367*t84367*t84367*t84367*t84367)+a_9*t84363*t84366*1.0/(t84367*t84367* \
                   t84367*t84367*t84367*t84367*t84367*t84367*t84367)+a_11*t84363*t84364*t84366*1.0/pow(t84367,1.1E1)+ \
                   a_7*t84363*t84364*t84365*1.0/(t84367*t84367*t84367*t84367*t84367*t84367*t84367)+1.0)*(1.0/2.0);
            } else {
                v_gamma_aa_[index] = 0.0;
            } 
        
        }
        if (is_meta_) {
        
            //V_tau_a
            if (rho_a[index] > cutoff_) {
                double t84369 = pow(rho_a[index],5.0/3.0);
                double t84370 = 1.0/(tau_a[index]*tau_a[index]);
                double t84371 = 1.0/tau_a[index];
                double t84372 = C_k*t84371*t84369;
                double t84373 = t84372+1.0;
                double t84374 = t84372-1.0;
                double t84375 = 1.0/(t84373*t84373);
                double t84376 = t84374*t84374;
                double t84377 = t84376*t84376;
                double t84378 = t84377*t84377;
                double t84379 = 1.0/pow(t84373,1.1E1);
                double t84380 = 1.0/(t84373*t84373*t84373);
                double t84381 = 1.0/(t84373*t84373*t84373*t84373);
                double t84382 = 1.0/(t84373*t84373*t84373*t84373*t84373);
                double t84383 = 1.0/(t84373*t84373*t84373*t84373*t84373*t84373);
                double t84384 = 1.0/(t84373*t84373*t84373*t84373*t84373*t84373*t84373);
                double t84385 = 1.0/(t84373*t84373*t84373*t84373*t84373*t84373*t84373*t84373);
                double t84386 = 1.0/(t84373*t84373*t84373*t84373*t84373*t84373*t84373*t84373*t84373);
                double t84387 = 1.0/pow(t84373,1.0E1);
                double t84388 = 1.0/pow(rho_a[index],1.0/3.0);
                double t84389 = c*t84388;
                double t84390 = sqrt(t84389);
                double t84391 = pow(t84389,3.0/2.0);
                double t84392 = c*c;
                double t84393 = 1.0/pow(rho_a[index],2.0/3.0);
                double t84394 = 1.0/c0p;
                double t84395 = b1p*t84390;
                double t84396 = b3p*t84391;
                double t84397 = b4p*t84392*t84393;
                double t84398 = b2p*c*t84388;
                double t84399 = t84395+t84396+t84397+t84398;
                double t84400 = 1.0/t84399;
                double t84401 = t84400*t84394*(1.0/2.0);
                double t84402 = t84401+1.0;
                double t84403 = log(t84402);
                double t84404 = a1p*c*t84388;
                double t84405 = t84404+1.0;
                double t84406 = tau_a[index]-1.0/1.0E20;
                double t84407 = tau_a[index]*2.0;
                double t84408 = 1.0/rho_a[index];
                double t84409 = t84407-gamma_aa[index]*t84408*(1.0/4.0);
                double t84410 = gamma_aa[index]*gamma_aa[index];
                double t84411 = gcaa*gcaa;
                double t84412 = t84410*t84410;
                double t84413 = t84411*t84411;
                double t84414 = 1.0/pow(rho_a[index],3.2E1/3.0);
                double t84415 = 1.0/pow(rho_a[index],8.0/3.0);
                double t84416 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t84417 = 1.0/pow(rho_a[index],1.6E1/3.0);
                v_tau_a_[index] = -rho_a[index]*(((pow(2.0,1.0/3.0)*2.0-2.0)*(c0f*log((1.0/2.0)/(c0f*(b1f*t84390+ \
                   b3f*t84391+b2f*c*t84388+b4f*t84392*t84393))+1.0)*(a1f*c*t84388+1.0)*2.0-c0p*t84403*t84405*2.0))/(two_13* \
                   2.0-2.0)+c0p*t84403*t84405*2.0)*( ( (t84406 > 0.0) ? 1.0*(t84371-t84370*t84409*(1.0/2.0)) : 0.0 )  \
                   + 0.0 )*(ccaa0+(ccaa2*t84410*t84411*t84417)/(gamma_aa[index]*gcaa*t84415*2.0+t84410*t84411*t84417+ \
                   1.0)+(ccaa1*gamma_aa[index]*gcaa*t84415)/(gamma_aa[index]*gcaa*t84415+1.0)+(ccaa4*t84412*t84413*t84414) \
                   /(gamma_aa[index]*gcaa*t84415*4.0+t84410*t84411*t84417*6.0+t84412*t84413*t84414+gamma_aa[index]*gcaa* \
                   t84410*t84411*t84416*4.0+1.0)+(ccaa3*gamma_aa[index]*gcaa*t84410*t84411*t84416)/(gamma_aa[index]*gcaa* \
                   t84415*3.0+t84410*t84411*t84417*3.0+gamma_aa[index]*gcaa*t84410*t84411*t84416+1.0))+rho_a[index]*(X- \
                   1.0)*(kp-kp/((gamma_aa[index]*1.0/(k*k)*mu_*1.0/(rho_a[index]*rho_a[index])*1.0/pow(rho_a[index]*2.0,2.0/ \
                   3.0)*(1.0/4.0))/kp+1.0)+1.0)*((C_k*a_1*t84370*t84369)/t84373-C_k*a_1*t84370*t84374*t84375*t84369-C_k* \
                   a_2*t84370*t84380*t84376*t84369*2.0+C_k*a_2*t84370*t84374*t84375*t84369*2.0+C_k*a_3*t84370*t84380* \
                   t84376*t84369*3.0-C_k*a_4*t84370*t84382*t84377*t84369*4.0+C_k*a_5*t84370*t84382*t84377*t84369*5.0- \
                   C_k*a_8*t84370*t84386*t84369*t84378*8.0+C_k*a_9*t84370*t84386*t84369*t84378*9.0+C_k*a_10*t84370*t84374* \
                   t84369*t84378*t84387*1.0E1-C_k*a_10*t84370*t84376*t84369*t84378*t84379*1.0E1+C_k*a_11*t84370*t84376* \
                   t84369*t84378*t84379*1.1E1-C_k*a_3*t84370*t84381*t84374*t84376*t84369*3.0+C_k*a_4*t84370*t84381*t84374* \
                   t84376*t84369*4.0-C_k*a_5*t84370*t84374*t84383*t84377*t84369*5.0+C_k*a_6*t84370*t84374*t84383*t84377* \
                   t84369*6.0-C_k*a_6*t84370*t84384*t84376*t84377*t84369*6.0+C_k*a_7*t84370*t84384*t84376*t84377*t84369* \
                   7.0-C_k*a_9*t84370*t84374*t84369*t84378*t84387*9.0-C_k*a_11*t84370*1.0/pow(t84373,1.2E1)*t84374*t84376* \
                   t84369*t84378*1.1E1-C_k*a_7*t84370*t84374*t84376*t84385*t84377*t84369*7.0+C_k*a_8*t84370*t84374*t84376* \
                   t84385*t84377*t84369*8.0);
            } else {
                v_tau_a_[index] = 0.0;
            } 
        
        }
    }
    //Second Partials
    for (int index = 0; index < ntrue && deriv_ >= 2; index++) {
        
        //V_rho_a_rho_a
        if (rho_a[index] > cutoff_) {
            double t84419 = rho_a[index]*2.0;
            double t84420 = 1.0/pow(t84419,1.0/3.0);
            double t84421 = c*t84420;
            double t84422 = sqrt(t84421);
            double t84423 = b1p*t84422;
            double t84424 = pow(t84421,3.0/2.0);
            double t84425 = b3p*t84424;
            double t84426 = b2p*c*t84420;
            double t84427 = c*c;
            double t84428 = 1.0/pow(t84419,2.0/3.0);
            double t84429 = b4p*t84427*t84428;
            double t84430 = t84423+t84425+t84426+t84429;
            double t84431 = 1.0/pow(t84419,8.0/3.0);
            double t84432 = 1.0/pow(t84419,7.0/3.0);
            double t84433 = 1.0/sqrt(t84421);
            double t84434 = 1.0/c0p;
            double t84435 = 1.0/t84430;
            double t84436 = t84434*t84435*(1.0/2.0);
            double t84437 = t84436+1.0;
            double t84438 = 1.0/t84437;
            double t84439 = a1p*c*t84420;
            double t84440 = t84439+1.0;
            double t84441 = 1.0/pow(t84419,4.0/3.0);
            double t84443 = b2p*c*t84441*(1.0/3.0);
            double t84444 = 1.0/pow(t84419,5.0/3.0);
            double t84445 = b4p*t84444*t84427*(2.0/3.0);
            double t84446 = b1p*c*t84441*t84433*(1.0/6.0);
            double t84447 = b3p*c*t84422*t84441*(1.0/2.0);
            double t84442 = t84443+t84445+t84446+t84447;
            double t84448 = t84442*t84442;
            double t84449 = 1.0/(t84430*t84430);
            double t84450 = log(t84437);
            double t84451 = gamma_aa[index]*gamma_aa[index];
            double t84452 = gcab*gcab;
            double t84453 = t84451*t84451;
            double t84454 = t84452*t84452;
            double t84455 = 1.0/pow(rho_a[index],3.2E1/3.0);
            double t84456 = 1.0/pow(rho_a[index],8.0/3.0);
            double t84457 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]);
            double t84458 = 1.0/pow(rho_a[index],1.6E1/3.0);
            double t84459 = two_13*2.0;
            double t84460 = t84459-2.0;
            double t84461 = 1.0/t84460;
            double t84462 = 1.0/pow(rho_a[index],1.0/3.0);
            double t84463 = c*t84462;
            double t84464 = sqrt(t84463);
            double t84465 = pow(t84463,3.0/2.0);
            double t84466 = 1.0/pow(rho_a[index],2.0/3.0);
            double t84467 = b1p*t84464;
            double t84468 = b3p*t84465;
            double t84469 = b4p*t84427*t84466;
            double t84470 = b2p*c*t84462;
            double t84471 = t84470+t84467+t84468+t84469;
            double t84472 = 1.0/t84471;
            double t84473 = t84434*t84472*(1.0/2.0);
            double t84474 = t84473+1.0;
            double t84475 = log(t84474);
            double t84476 = a1p*c*t84462;
            double t84477 = t84476+1.0;
            double t84478 = gamma_aa[index]*gcab*t84456*4.0;
            double t84479 = gamma_aa[index]*gcab*t84451*t84452*t84457*4.0;
            double t84480 = t84451*t84452*t84458*6.0;
            double t84481 = t84453*t84454*t84455;
            double t84482 = t84480+t84481+t84478+t84479+1.0;
            double t84483 = 1.0/t84482;
            double t84484 = gamma_aa[index]*gcab*t84456;
            double t84485 = t84484+1.0;
            double t84486 = 1.0/t84485;
            double t84487 = gamma_aa[index]*gcab*t84456*3.0;
            double t84488 = gamma_aa[index]*gcab*t84451*t84452*t84457;
            double t84489 = t84451*t84452*t84458*3.0;
            double t84490 = t84487+t84488+t84489+1.0;
            double t84491 = 1.0/t84490;
            double t84492 = gamma_aa[index]*gcab*t84456*2.0;
            double t84493 = t84451*t84452*t84458;
            double t84494 = t84492+t84493+1.0;
            double t84495 = 1.0/t84494;
            double t84496 = 1.0/pow(rho_a[index],1.0E1);
            double t84497 = 1.0/pow(rho_a[index],2.2E1/3.0);
            double t84499 = 1.0/pow(rho_a[index],1.1E1/3.0);
            double t84500 = 1.0/pow(rho_a[index],1.9E1/3.0);
            double t84502 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]*rho_a[index]);
            double t84509 = 1.0/pow(rho_a[index],3.5E1/3.0);
            double t84510 = gamma_aa[index]*gcab*t84499*(1.6E1/3.0);
            double t84511 = gamma_aa[index]*gcab*t84502*t84451*t84452*1.6E1;
            double t84512 = t84500*t84451*t84452*1.6E1;
            double t84513 = t84453*t84454*t84509*(1.6E1/3.0);
            double t84498 = t84510+t84511+t84512+t84513;
            double t84516 = gamma_aa[index]*gcab*t84499*(8.0/3.0);
            double t84517 = t84500*t84451*t84452*(8.0/3.0);
            double t84501 = t84516+t84517;
            double t84503 = 1.0/pow(rho_a[index],1.4E1/3.0);
            double t84504 = 1.0/(t84490*t84490);
            double t84505 = gamma_aa[index]*gcab*t84499*4.0;
            double t84506 = gamma_aa[index]*gcab*t84502*t84451*t84452*4.0;
            double t84507 = t84500*t84451*t84452*8.0;
            double t84508 = t84505+t84506+t84507;
            double t84514 = 1.0/pow(rho_a[index],3.8E1/3.0);
            double t84515 = 1.0/(t84482*t84482);
            double t84518 = 1.0/(t84494*t84494);
            double t84519 = pow(2.0,1.0/3.0);
            double t84520 = t84519*2.0;
            double t84521 = t84520-2.0;
            double t84522 = a1f*c*t84462;
            double t84523 = t84522+1.0;
            double t84524 = 1.0/c0f;
            double t84525 = b1f*t84464;
            double t84526 = b3f*t84465;
            double t84527 = b4f*t84427*t84466;
            double t84528 = b2f*c*t84462;
            double t84529 = t84525+t84526+t84527+t84528;
            double t84530 = 1.0/t84529;
            double t84531 = t84530*t84524*(1.0/2.0);
            double t84532 = t84531+1.0;
            double t84533 = 1.0/pow(rho_a[index],4.0/3.0);
            double t84534 = 1.0/pow(rho_a[index],5.0/3.0);
            double t84535 = 1.0/sqrt(t84463);
            double t84536 = log(t84532);
            double t84537 = 1.0/t84474;
            double t84538 = 1.0/(t84471*t84471);
            double t84539 = b4p*t84534*t84427*(2.0/3.0);
            double t84540 = b2p*c*t84533*(1.0/3.0);
            double t84541 = b1p*c*t84533*t84535*(1.0/6.0);
            double t84542 = b3p*c*t84533*t84464*(1.0/2.0);
            double t84543 = t84540+t84541+t84542+t84539;
            double t84544 = t84543*t84537*t84538*t84477;
            double t84545 = c0f*t84523*t84536*2.0;
            double t84546 = c0p*t84475*t84477*2.0;
            double t84547 = 1.0/(t84485*t84485);
            double t84548 = 1.0/(rho_a[index]*rho_a[index]);
            double t84549 = 1.0/tau_a[index];
            double t84550 = pow(rho_a[index],2.0/3.0);
            double t84551 = pow(rho_a[index],5.0/3.0);
            double t84552 = C_k*t84551*t84549;
            double t84553 = t84552+1.0;
            double t84554 = t84552-1.0;
            double t84555 = 1.0/(t84553*t84553);
            double t84556 = t84554*t84554;
            double t84557 = t84556*t84556;
            double t84558 = t84557*t84557;
            double t84559 = 1.0/pow(t84553,1.1E1);
            double t84560 = 1.0/(t84553*t84553*t84553);
            double t84561 = 1.0/(t84553*t84553*t84553*t84553);
            double t84562 = 1.0/(t84553*t84553*t84553*t84553*t84553);
            double t84563 = 1.0/(t84553*t84553*t84553*t84553*t84553*t84553);
            double t84564 = 1.0/(t84553*t84553*t84553*t84553*t84553*t84553*t84553);
            double t84565 = 1.0/(t84553*t84553*t84553*t84553*t84553*t84553*t84553*t84553);
            double t84566 = 1.0/(t84553*t84553*t84553*t84553*t84553*t84553*t84553*t84553*t84553);
            double t84567 = 1.0/pow(t84553,1.0E1);
            double t84568 = 1.0/(k*k);
            double t84569 = 1.0/kp;
            double t84570 = gamma_aa[index]*mu_*t84428*t84548*t84568*t84569*(1.0/4.0);
            double t84571 = t84570+1.0;
            double t84572 = 1.0/t84571;
            double t84573 = kp-kp*t84572+1.0;
            double t84574 = C_k*C_k;
            double t84575 = pow(rho_a[index],4.0/3.0);
            double t84576 = 1.0/(tau_a[index]*tau_a[index]);
            double t84577 = 1.0/t84553;
            double t84578 = 1.0/pow(t84553,1.2E1);
            double t84579 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]);
            double t84580 = gamma_aa[index]*mu_*t84428*t84568*t84569*t84579*(1.0/2.0);
            double t84581 = gamma_aa[index]*mu_*t84444*t84548*t84568*t84569*(1.0/3.0);
            double t84582 = t84580+t84581;
            double t84583 = a_1*t84554*t84577;
            double t84584 = a_10*t84556*t84558*t84567;
            double t84585 = a_11*t84554*t84556*t84558*t84559;
            double t84586 = a_2*t84555*t84556;
            double t84587 = a_3*t84560*t84554*t84556;
            double t84588 = a_4*t84561*t84557;
            double t84589 = a_5*t84562*t84554*t84557;
            double t84590 = a_6*t84563*t84556*t84557;
            double t84591 = a_7*t84554*t84564*t84556*t84557;
            double t84592 = a_8*t84565*t84558;
            double t84593 = a_9*t84554*t84566*t84558;
            double t84594 = t84590+t84591+t84583+t84592+t84584+t84593+t84585+t84586+t84587+t84588+t84589+1.0;
            double t84595 = 1.0/(t84571*t84571);
            double t84596 = C_k*a_1*t84550*t84549*t84577*(5.0/3.0);
            double t84597 = C_k*a_2*t84550*t84554*t84555*t84549*(1.0E1/3.0);
            double t84598 = C_k*a_10*t84550*t84554*t84549*t84558*t84567*(5.0E1/3.0);
            double t84599 = C_k*a_11*t84550*t84556*t84549*t84558*t84559*(5.5E1/3.0);
            double t84600 = C_k*a_3*t84550*t84560*t84556*t84549*5.0;
            double t84601 = C_k*a_4*t84550*t84561*t84554*t84556*t84549*(2.0E1/3.0);
            double t84602 = C_k*a_5*t84550*t84562*t84557*t84549*(2.5E1/3.0);
            double t84603 = C_k*a_6*t84550*t84554*t84563*t84557*t84549*1.0E1;
            double t84604 = C_k*a_7*t84550*t84564*t84556*t84557*t84549*(3.5E1/3.0);
            double t84605 = C_k*a_8*t84550*t84554*t84556*t84565*t84557*t84549*(4.0E1/3.0);
            double t84606 = C_k*a_9*t84550*t84566*t84549*t84558*1.5E1;
            double t84607 = t84600+t84601+t84602+t84603+t84604+t84605+t84606+t84596+t84597+t84598+t84599-C_k* \
               a_1*t84550*t84554*t84555*t84549*(5.0/3.0)-C_k*a_2*t84550*t84560*t84556*t84549*(1.0E1/3.0)-C_k*a_4* \
               t84550*t84562*t84557*t84549*(2.0E1/3.0)-C_k*a_8*t84550*t84566*t84549*t84558*(4.0E1/3.0)-C_k*a_10*t84550* \
               t84556*t84549*t84558*t84559*(5.0E1/3.0)-C_k*a_3*t84550*t84561*t84554*t84556*t84549*5.0-C_k*a_5*t84550* \
               t84554*t84563*t84557*t84549*(2.5E1/3.0)-C_k*a_6*t84550*t84564*t84556*t84557*t84549*1.0E1-C_k*a_9*t84550* \
               t84554*t84549*t84558*t84567*1.5E1-C_k*a_11*t84550*t84554*t84556*t84549*t84558*t84578*(5.5E1/3.0)-C_k* \
               a_7*t84550*t84554*t84556*t84565*t84557*t84549*(3.5E1/3.0);
            double t84608 = ccab4*t84453*t84454*t84455*t84483;
            double t84609 = ccab1*gamma_aa[index]*gcab*t84456*t84486;
            double t84610 = ccab3*gamma_aa[index]*gcab*t84451*t84452*t84491*t84457;
            double t84611 = ccab2*t84451*t84452*t84458*t84495;
            double t84612 = ccab0+t84610+t84611+t84608+t84609;
            double t84613 = b2p*c*t84432*(4.0/9.0);
            double t84614 = b4p*t84431*t84427*(1.0E1/9.0);
            double t84615 = 1.0/pow(t84421,3.0/2.0);
            double t84616 = b3p*t84431*t84433*t84427*(1.0/1.2E1);
            double t84617 = b1p*c*t84432*t84433*(2.0/9.0);
            double t84618 = b3p*c*t84422*t84432*(2.0/3.0);
            double t84619 = t84613+t84614+t84616+t84617+t84618-b1p*t84431*t84615*t84427*(1.0/3.6E1);
            double t84620 = t84440*t84438*t84619*t84449;
            double t84621 = 1.0/(t84430*t84430*t84430);
            double t84622 = 1.0/(t84437*t84437);
            double t84623 = 1.0/(t84430*t84430*t84430*t84430);
            double t84624 = t84440*t84622*t84434*t84623*t84448*(1.0/2.0);
            double t84625 = 1.0/d2fz0;
            double t84626 = 1.0/Aa;
            double t84627 = b1a*t84422;
            double t84628 = b3a*t84424;
            double t84629 = b2a*c*t84420;
            double t84630 = b4a*t84427*t84428;
            double t84631 = t84630+t84627+t84628+t84629;
            double t84632 = 1.0/t84631;
            double t84633 = t84632*t84626*(1.0/2.0);
            double t84634 = t84633+1.0;
            double t84635 = log(t84634);
            double t84636 = a1a*c*t84420;
            double t84637 = t84636+1.0;
            double t84638 = a1p*c*t84441*t84442*t84438*t84449*(2.0/3.0);
            double t84639 = 1.0/t84532;
            double t84640 = b4f*t84534*t84427*(2.0/3.0);
            double t84641 = b2f*c*t84533*(1.0/3.0);
            double t84642 = b1f*c*t84533*t84535*(1.0/6.0);
            double t84643 = b3f*c*t84533*t84464*(1.0/2.0);
            double t84644 = t84640+t84641+t84642+t84643;
            double t84645 = 1.0/(t84529*t84529);
            double t84646 = 1.0/pow(rho_a[index],7.0/3.0);
            double t84647 = 1.0/pow(t84463,3.0/2.0);
            double t84648 = t84644*t84644;
            double t84649 = t84543*t84543;
            double t84650 = 1.0/(t84471*t84471*t84471);
            double t84651 = t84650*t84537*t84477*t84649*2.0;
            double t84652 = b4p*t84427*t84456*(1.0E1/9.0);
            double t84653 = b2p*c*t84646*(4.0/9.0);
            double t84654 = b3p*t84427*t84535*t84456*(1.0/1.2E1);
            double t84655 = b1p*c*t84535*t84646*(2.0/9.0);
            double t84656 = b3p*c*t84464*t84646*(2.0/3.0);
            double t84738 = b1p*t84427*t84456*t84647*(1.0/3.6E1);
            double t84657 = t84652+t84653+t84654+t84655+t84656-t84738;
            double t84658 = 1.0/(t84474*t84474);
            double t84659 = 1.0/(t84471*t84471*t84471*t84471);
            double t84660 = a1p*c*c0p*t84475*t84646*(8.0/9.0);
            double t84661 = a1f*c*c0f*t84533*t84536*(2.0/3.0);
            double t84662 = a1p*c*c0p*t84533*t84475*(2.0/3.0);
            double t84663 = a1p*c*c0p*t84441*t84450*(4.0/3.0);
            double t84664 = t84545-t84546;
            double t84665 = 1.0/(t84485*t84485*t84485);
            double t84666 = ccab1*gamma_aa[index]*gcab*t84451*t84452*t84665*t84496*(3.2E1/9.0);
            double t84667 = t84498*t84498;
            double t84668 = 1.0/(t84482*t84482*t84482);
            double t84669 = ccab4*t84453*t84454*t84455*t84667*t84668*2.0;
            double t84670 = t84501*t84501;
            double t84671 = 1.0/(t84494*t84494*t84494);
            double t84672 = ccab2*t84451*t84452*t84670*t84671*t84458*2.0;
            double t84673 = t84508*t84508;
            double t84674 = 1.0/(t84490*t84490*t84490);
            double t84675 = ccab3*gamma_aa[index]*gcab*t84451*t84452*t84457*t84673*t84674*2.0;
            double t84746 = t84523*t84644*t84645*t84639;
            double t84676 = t84544+t84661-t84662-t84746;
            double t84677 = gcaa*gcaa;
            double t84678 = t84677*t84677;
            double t84679 = t84521*t84461*t84664;
            double t84680 = t84546+t84679;
            double t84681 = tau_a[index]-1.0/1.0E20;
            double t84682 = ( (t84681 > 0.0) ?  1.0 : 0.0 ) ;
            double t84683 = tau_a[index]*2.0;
            double t84684 = 1.0/rho_a[index];
            double t84708 = gamma_aa[index]*t84684*(1.0/4.0);
            double t84685 = -t84708+t84683;
            double t84686 = t84549*t84685*(1.0/2.0);
            double t84687 = t84686-1.0;
            double t84688 = t84682*t84687;
            double t84689 = t84688+1.0;
            double t84690 = gamma_aa[index]*gcaa*t84456*4.0;
            double t84691 = gamma_aa[index]*gcaa*t84451*t84457*t84677*4.0;
            double t84692 = t84451*t84458*t84677*6.0;
            double t84693 = t84453*t84455*t84678;
            double t84694 = t84690+t84691+t84692+t84693+1.0;
            double t84695 = 1.0/t84694;
            double t84696 = gamma_aa[index]*gcaa*t84456;
            double t84697 = t84696+1.0;
            double t84698 = 1.0/t84697;
            double t84699 = gamma_aa[index]*gcaa*t84456*3.0;
            double t84700 = gamma_aa[index]*gcaa*t84451*t84457*t84677;
            double t84701 = t84451*t84458*t84677*3.0;
            double t84702 = t84700+t84701+t84699+1.0;
            double t84703 = 1.0/t84702;
            double t84704 = gamma_aa[index]*gcaa*t84456*2.0;
            double t84705 = t84451*t84458*t84677;
            double t84706 = t84704+t84705+1.0;
            double t84707 = 1.0/t84706;
            double t84709 = 1.0/(t84697*t84697);
            double t84710 = gamma_aa[index]*gcaa*t84499*(3.2E1/3.0);
            double t84711 = gamma_aa[index]*gcaa*t84502*t84451*t84677*3.2E1;
            double t84712 = t84500*t84451*t84677*3.2E1;
            double t84713 = t84453*t84509*t84678*(3.2E1/3.0);
            double t84714 = t84710+t84711+t84712+t84713;
            double t84715 = gamma_aa[index]*gcaa*t84499*(1.6E1/3.0);
            double t84716 = t84500*t84451*t84677*(1.6E1/3.0);
            double t84717 = t84715+t84716;
            double t84718 = gamma_aa[index]*gcaa*t84499*8.0;
            double t84719 = gamma_aa[index]*gcaa*t84502*t84451*t84677*8.0;
            double t84720 = t84500*t84451*t84677*1.6E1;
            double t84721 = t84720+t84718+t84719;
            double t84722 = 1.0/(t84702*t84702);
            double t84723 = 1.0/(t84694*t84694);
            double t84724 = 1.0/(t84706*t84706);
            double t84725 = ccaa4*t84453*t84455*t84695*t84678;
            double t84726 = ccaa1*gamma_aa[index]*gcaa*t84456*t84698;
            double t84727 = ccaa3*gamma_aa[index]*gcaa*t84451*t84703*t84457*t84677;
            double t84728 = ccaa2*t84451*t84707*t84458*t84677;
            double t84729 = ccaa0+t84725+t84726+t84727+t84728;
            double t84730 = 1.0/(t84529*t84529*t84529);
            double t84731 = b4f*t84427*t84456*(1.0E1/9.0);
            double t84732 = b2f*c*t84646*(4.0/9.0);
            double t84733 = b3f*t84427*t84535*t84456*(1.0/1.2E1);
            double t84734 = b1f*c*t84535*t84646*(2.0/9.0);
            double t84735 = b3f*c*t84464*t84646*(2.0/3.0);
            double t84736 = t84731+t84732+t84733+t84734+t84735-b1f*t84427*t84456*t84647*(1.0/3.6E1);
            double t84737 = t84523*t84645*t84736*t84639;
            double t84739 = t84537*t84538*t84477*t84657;
            double t84740 = 1.0/(t84532*t84532);
            double t84741 = 1.0/(t84529*t84529*t84529*t84529);
            double t84742 = t84523*t84524*t84740*t84741*t84648*(1.0/2.0);
            double t84743 = t84434*t84477*t84649*t84658*t84659*(1.0/2.0);
            double t84744 = a1f*c*t84533*t84644*t84645*t84639*(2.0/3.0);
            double t84745 = a1p*c*t84533*t84543*t84537*t84538*(2.0/3.0);
            double t84747 = t84521*t84461*t84676;
            double t84748 = ccaa4*t84453*t84509*t84695*t84678*(3.2E1/3.0);
            double t84749 = ccaa1*gamma_aa[index]*gcaa*t84499*t84698*(8.0/3.0);
            double t84750 = ccaa3*gamma_aa[index]*gcaa*t84502*t84451*t84703*t84677*8.0;
            double t84751 = ccaa2*t84500*t84451*t84707*t84677*(1.6E1/3.0);
            double t84754 = ccaa1*t84500*t84451*t84709*t84677*(8.0/3.0);
            double t84755 = ccaa3*gamma_aa[index]*gcaa*t84451*t84721*t84722*t84457*t84677;
            double t84756 = ccaa4*t84453*t84714*t84723*t84455*t84678;
            double t84757 = ccaa2*t84451*t84724*t84717*t84458*t84677;
            double t84752 = t84750+t84751-t84754-t84755-t84756+t84748-t84757+t84749;
            double t84753 = -t84544+t84662+t84747;
            v_rho_a_rho_a_[index] = -t84612*(-t84663-rho_a[index]*(t84620+t84624+t84638-t84440*t84621*t84438* \
               t84448*2.0-a1p*c*c0p*t84432*t84450*(8.0/9.0)+Aa*t84461*t84625*t84635*t84637*t84548*(4.0/9.0))*2.0+ \
               rho_a[index]*(-t84651-t84660+t84743+t84745+t84739+t84521*t84461*(t84651+t84660+t84742+t84744+t84737- \
               t84523*t84730*t84639*t84648*2.0-t84537*t84538*t84477*t84657-a1f*c*c0f*t84536*t84646*(8.0/9.0)-t84434* \
               t84477*t84649*t84658*t84659*(1.0/2.0)-a1p*c*t84533*t84543*t84537*t84538*(2.0/3.0)))+t84521*t84461* \
               t84676*2.0+t84440*t84442*t84438*t84449*2.0-t84543*t84537*t84538*t84477*2.0+a1p*c*c0p*t84533*t84475* \
               (4.0/3.0))+(-t84546+rho_a[index]*(-t84544+t84662+t84521*t84461*(t84544+t84661-t84523*t84644*t84645* \
               t84639-a1p*c*c0p*t84533*t84475*(2.0/3.0)))+rho_a[index]*(t84440*t84442*t84438*t84449-a1p*c*c0p*t84441* \
               t84450*(2.0/3.0))*2.0+c0p*t84440*t84450*2.0-t84521*t84461*t84664)*(ccab1*gamma_aa[index]*gcab*t84486* \
               t84499*(4.0/3.0)-ccab1*t84500*t84451*t84452*t84547*(4.0/3.0)+ccab2*t84500*t84451*t84452*t84495*(8.0/ \
               3.0)+ccab4*t84453*t84454*t84509*t84483*(1.6E1/3.0)-ccab2*t84501*t84451*t84452*t84518*t84458-ccab4* \
               t84515*t84453*t84454*t84455*t84498+ccab3*gamma_aa[index]*gcab*t84502*t84451*t84452*t84491*4.0-ccab3* \
               gamma_aa[index]*gcab*t84504*t84451*t84452*t84508*t84457)*4.0+(rho_a[index]*(t84546+t84521*t84461*(t84545- \
               c0p*t84475*t84477*2.0))*2.0-c0p*rho_a[index]*t84440*t84450*4.0)*(t84672+t84666+t84675+t84669+ccab1* \
               gamma_aa[index]*gcab*t84503*t84486*(4.4E1/9.0)+ccab4*t84514*t84453*t84454*t84483*(3.68E2/9.0)-ccab1* \
               t84451*t84452*t84547*t84497*(7.6E1/9.0)+ccab2*t84451*t84452*t84495*t84497*(4.0E1/3.0)-ccab2*t84500* \
               t84501*t84451*t84452*t84518*(1.6E1/3.0)-ccab4*t84515*t84453*t84454*t84509*t84498*(3.2E1/3.0)-ccab2* \
               t84451*t84452*t84518*t84458*(gamma_aa[index]*gcab*t84503*(8.8E1/9.0)+t84451*t84452*t84497*(4.0E1/3.0) \
               )-ccab4*t84515*t84453*t84454*t84455*(gamma_aa[index]*gcab*t84503*(1.76E2/9.0)+t84514*t84453*t84454* \
               (3.68E2/9.0)+t84451*t84452*t84497*8.0E1+gamma_aa[index]*gcab*t84451*t84452*t84496*(3.04E2/3.0))+ccab3* \
               gamma_aa[index]*gcab*t84451*t84452*t84491*t84496*(7.6E1/3.0)-ccab3*gamma_aa[index]*gcab*t84504*t84451* \
               t84452*t84457*(gamma_aa[index]*gcab*t84503*(4.4E1/3.0)+t84451*t84452*t84497*4.0E1+gamma_aa[index]* \
               gcab*t84451*t84452*t84496*(7.6E1/3.0))-ccab3*gamma_aa[index]*gcab*t84502*t84504*t84451*t84452*t84508* \
               8.0)-(X-1.0)*(t84607*t84573*2.0+rho_a[index]*t84573*(C_k*a_1*t84462*t84549*t84577*(1.0E1/9.0)-a_1* \
               t84555*t84574*t84575*t84576*(5.0E1/9.0)+a_2*t84555*t84574*t84575*t84576*(5.0E1/9.0)+a_1*t84560*t84554* \
               t84574*t84575*t84576*(5.0E1/9.0)+a_10*t84574*t84575*t84558*t84567*t84576*2.5E2-a_2*t84560*t84554*t84574* \
               t84575*t84576*(2.0E2/9.0)+a_2*t84561*t84556*t84574*t84575*t84576*(5.0E1/3.0)+a_3*t84560*t84554*t84574* \
               t84575*t84576*(5.0E1/3.0)-a_3*t84561*t84556*t84574*t84575*t84576*5.0E1+a_4*t84561*t84556*t84574*t84575* \
               t84576*(1.0E2/3.0)+a_4*t84563*t84574*t84557*t84575*t84576*(5.0E2/9.0)-a_5*t84563*t84574*t84557*t84575* \
               t84576*(1.25E3/9.0)+a_6*t84563*t84574*t84557*t84575*t84576*(2.5E2/3.0)+a_8*t84574*t84575*t84558*t84567* \
               t84576*2.0E2-a_9*t84574*t84575*t84558*t84567*t84576*4.5E2-C_k*a_1*t84462*t84554*t84555*t84549*(1.0E1/ \
               9.0)-C_k*a_2*t84560*t84462*t84556*t84549*(2.0E1/9.0)+C_k*a_2*t84462*t84554*t84555*t84549*(2.0E1/9.0) \
               +C_k*a_3*t84560*t84462*t84556*t84549*(1.0E1/3.0)-C_k*a_4*t84462*t84562*t84557*t84549*(4.0E1/9.0)+C_k* \
               a_5*t84462*t84562*t84557*t84549*(5.0E1/9.0)-C_k*a_8*t84462*t84566*t84549*t84558*(8.0E1/9.0)+C_k*a_9* \
               t84462*t84566*t84549*t84558*1.0E1+C_k*a_10*t84462*t84554*t84549*t84558*t84567*(1.0E2/9.0)-C_k*a_10* \
               t84462*t84556*t84549*t84558*t84559*(1.0E2/9.0)+C_k*a_11*t84462*t84556*t84549*t84558*t84559*(1.1E2/ \
               9.0)-C_k*a_3*t84462*t84561*t84554*t84556*t84549*(1.0E1/3.0)+C_k*a_4*t84462*t84561*t84554*t84556*t84549* \
               (4.0E1/9.0)-C_k*a_5*t84462*t84554*t84563*t84557*t84549*(5.0E1/9.0)+C_k*a_6*t84462*t84554*t84563*t84557* \
               t84549*(2.0E1/3.0)-C_k*a_6*t84462*t84564*t84556*t84557*t84549*(2.0E1/3.0)+C_k*a_7*t84462*t84564*t84556* \
               t84557*t84549*(7.0E1/9.0)-C_k*a_9*t84462*t84554*t84549*t84558*t84567*1.0E1-a_10*t84554*t84574*t84575* \
               t84558*t84576*t84559*(5.0E3/9.0)+a_11*t84554*t84574*t84575*t84558*t84576*t84559*(2.75E3/9.0)+a_10* \
               t84556*t84574*t84575*t84558*t84576*t84578*(2.75E3/9.0)-a_11*t84556*t84574*t84575*t84558*t84576*t84578* \
               (6.05E3/9.0)+a_3*t84562*t84554*t84556*t84574*t84575*t84576*(1.0E2/3.0)-a_4*t84562*t84554*t84556*t84574* \
               t84575*t84576*(8.0E2/9.0)+a_5*t84562*t84554*t84556*t84574*t84575*t84576*(5.0E2/9.0)+a_5*t84554*t84564* \
               t84574*t84557*t84575*t84576*(2.5E2/3.0)-a_6*t84554*t84564*t84574*t84557*t84575*t84576*2.0E2+a_6*t84556* \
               t84565*t84574*t84557*t84575*t84576*(3.5E2/3.0)+a_7*t84554*t84564*t84574*t84557*t84575*t84576*(3.5E2/ \
               3.0)-a_7*t84556*t84565*t84574*t84557*t84575*t84576*(2.45E3/9.0)+a_8*t84556*t84565*t84574*t84557*t84575* \
               t84576*(1.4E3/9.0)+a_9*t84554*t84574*t84575*t84558*t84576*t84559*2.5E2+a_11*1.0/pow(t84553,1.3E1)* \
               t84554*t84556*t84574*t84575*t84558*t84576*(1.1E3/3.0)-C_k*a_11*t84462*t84554*t84556*t84549*t84558* \
               t84578*(1.1E2/9.0)-C_k*a_7*t84462*t84554*t84556*t84565*t84557*t84549*(7.0E1/9.0)+C_k*a_8*t84462*t84554* \
               t84556*t84565*t84557*t84549*(8.0E1/9.0)+a_7*t84554*t84556*t84574*t84557*t84566*t84575*t84576*(1.4E3/ \
               9.0)-a_8*t84554*t84556*t84574*t84557*t84566*t84575*t84576*(3.2E3/9.0)+a_9*t84554*t84556*t84574*t84557* \
               t84566*t84575*t84576*2.0E2)-kp*t84582*t84594*t84595*2.0-kp*rho_a[index]*1.0/(t84571*t84571*t84571) \
               *(t84582*t84582)*t84594*2.0-kp*rho_a[index]*t84607*t84582*t84595*2.0+kp*rho_a[index]*t84594*t84595* \
               (gamma_aa[index]*mu_*t84431*t84548*t84568*t84569*(1.0E1/9.0)+gamma_aa[index]*mu_*t84444*t84568*t84569* \
               t84579*(4.0/3.0)+gamma_aa[index]*mu_*1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index])*t84428* \
               t84568*t84569*(3.0/2.0)))+(rho_a[index]*t84680*2.0-c0p*rho_a[index]*t84440*t84450*4.0)*(t84672+t84666+ \
               t84675+t84669-ccab2*t84514*t84453*t84454*t84518*(3.2E1/9.0)+ccab4*t84514*t84453*t84454*t84483*(6.4E1/ \
               3.0)-ccab1*t84451*t84452*t84547*t84497*(3.2E1/9.0)+ccab2*t84451*t84452*t84495*t84497*(3.2E1/9.0)-ccab2* \
               t84500*t84501*t84451*t84452*t84518*(1.6E1/3.0)-ccab4*t84515*t84453*t84454*t84509*t84498*(3.2E1/3.0) \
               -ccab4*t84515*t84453*t84454*t84455*(t84514*t84453*t84454*(6.4E1/3.0)+t84451*t84452*t84497*(6.4E1/3.0) \
               +gamma_aa[index]*gcab*t84451*t84452*t84496*(1.28E2/3.0))+ccab3*gamma_aa[index]*gcab*t84451*t84452* \
               t84491*t84496*(3.2E1/3.0)-ccab3*gamma_aa[index]*gcab*t84504*t84451*t84452*t84457*(t84451*t84452*t84497* \
               (3.2E1/3.0)+gamma_aa[index]*gcab*t84451*t84452*t84496*(3.2E1/3.0))-ccab3*gamma_aa[index]*gcab*t84502* \
               t84504*t84451*t84452*t84508*8.0)+t84612*(t84663+rho_a[index]*(t84620+t84624+t84638-t84440*t84621*t84438* \
               t84448*2.0-a1p*c*c0p*t84432*t84450*(8.0/9.0)-Aa*t84461*t84625*t84635*t84637*t84548*(4.0/9.0))*2.0- \
               t84440*t84442*t84438*t84449*2.0)+t84680*t84752*t84689*2.0+t84753*t84729*t84689*2.0-rho_a[index]*t84680* \
               t84689*(ccaa1*gamma_aa[index]*gcaa*t84503*t84698*(8.8E1/9.0)+ccaa2*t84451*t84707*t84497*t84677*(3.04E2/ \
               9.0)-ccaa1*t84451*t84709*t84497*t84677*2.4E1+ccaa4*t84514*t84453*t84695*t84678*(1.12E3/9.0)-ccaa2* \
               t84500*t84451*t84724*t84717*t84677*(3.2E1/3.0)-ccaa4*t84453*t84714*t84723*t84509*t84678*(6.4E1/3.0) \
               -ccaa2*t84451*t84724*t84458*t84677*(gamma_aa[index]*gcaa*t84503*(1.76E2/9.0)+t84451*t84497*t84677* \
               (3.04E2/9.0))-ccaa4*t84453*t84723*t84455*t84678*(gamma_aa[index]*gcaa*t84503*(3.52E2/9.0)+t84514*t84453* \
               t84678*(1.12E3/9.0)+t84451*t84497*t84677*(6.08E2/3.0)+gamma_aa[index]*gcaa*t84451*t84496*t84677*2.88E2) \
               +ccaa2*t84451*1.0/(t84706*t84706*t84706)*(t84717*t84717)*t84458*t84677*2.0+ccaa4*t84453*(t84714*t84714) \
               *t84455*1.0/(t84694*t84694*t84694)*t84678*2.0+ccaa3*gamma_aa[index]*gcaa*t84451*t84703*t84496*t84677* \
               7.2E1+ccaa1*gamma_aa[index]*gcaa*t84451*t84496*t84677*1.0/(t84697*t84697*t84697)*(1.28E2/9.0)+ccaa3* \
               gamma_aa[index]*gcaa*1.0/(t84702*t84702*t84702)*t84451*(t84721*t84721)*t84457*t84677*2.0-ccaa3*gamma_aa[index]* \
               gcaa*t84451*t84722*t84457*t84677*(gamma_aa[index]*gcaa*t84503*(8.8E1/3.0)+t84451*t84497*t84677*(3.04E2/ \
               3.0)+gamma_aa[index]*gcaa*t84451*t84496*t84677*7.2E1)-ccaa3*gamma_aa[index]*gcaa*t84502*t84451*t84721* \
               t84722*t84677*1.6E1)+rho_a[index]*t84729*t84689*(-t84651-t84660+t84743+t84745+t84739+t84521*t84461* \
               (t84651+t84660+t84742-t84743+t84744-t84745+t84737-t84739-t84523*t84730*t84639*t84648*2.0-a1f*c*c0f* \
               t84536*t84646*(8.0/9.0)))-rho_a[index]*t84752*t84753*t84689*2.0+gamma_aa[index]*t84680*t84752*t84682* \
               t84549*t84684*(1.0/4.0)+gamma_aa[index]*t84682*t84549*t84684*t84729*(-t84544+t84662+t84747)*(1.0/4.0) \
               ;
        } else {
            v_rho_a_rho_a_[index] = 0.0;
        } 
        
        if (is_gga_) {
        
            //V_rho_a_gamma_aa
            if (rho_a[index] > cutoff_) {
                double t84759 = 1.0/(k*k);
                double t84760 = 1.0/kp;
                double t84761 = rho_a[index]*2.0;
                double t84762 = 1.0/(rho_a[index]*rho_a[index]);
                double t84763 = 1.0/pow(t84761,2.0/3.0);
                double t84764 = pow(rho_a[index],5.0/3.0);
                double t84765 = 1.0/tau_a[index];
                double t84766 = C_k*t84764*t84765;
                double t84767 = t84766-1.0;
                double t84768 = t84767*t84767;
                double t84769 = t84768*t84768;
                double t84770 = t84769*t84769;
                double t84771 = t84766+1.0;
                double t84772 = gamma_aa[index]*mu_*t84760*t84762*t84763*t84759*(1.0/4.0);
                double t84773 = t84772+1.0;
                double t84774 = 1.0/(t84773*t84773);
                double t84775 = 1.0/t84771;
                double t84776 = a_1*t84775*t84767;
                double t84777 = 1.0/pow(t84771,1.0E1);
                double t84778 = a_10*t84770*t84768*t84777;
                double t84779 = 1.0/pow(t84771,1.1E1);
                double t84780 = a_11*t84770*t84767*t84768*t84779;
                double t84781 = 1.0/(t84771*t84771);
                double t84782 = a_2*t84781*t84768;
                double t84783 = 1.0/(t84771*t84771*t84771);
                double t84784 = a_3*t84783*t84767*t84768;
                double t84785 = 1.0/(t84771*t84771*t84771*t84771);
                double t84786 = a_4*t84785*t84769;
                double t84787 = 1.0/(t84771*t84771*t84771*t84771*t84771);
                double t84788 = a_5*t84767*t84769*t84787;
                double t84789 = 1.0/(t84771*t84771*t84771*t84771*t84771*t84771);
                double t84790 = a_6*t84768*t84769*t84789;
                double t84791 = 1.0/(t84771*t84771*t84771*t84771*t84771*t84771*t84771);
                double t84792 = a_7*t84791*t84767*t84768*t84769;
                double t84793 = 1.0/(t84771*t84771*t84771*t84771*t84771*t84771*t84771*t84771);
                double t84794 = a_8*t84770*t84793;
                double t84795 = 1.0/(t84771*t84771*t84771*t84771*t84771*t84771*t84771*t84771*t84771);
                double t84796 = a_9*t84770*t84767*t84795;
                double t84797 = t84780+t84790+t84782+t84792+t84784+t84776+t84794+t84786+t84778+t84796+t84788+1.0;
                double t84798 = pow(rho_a[index],2.0/3.0);
                double t84799 = 1.0/rho_a[index];
                double t84800 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]);
                double t84801 = 1.0/pow(t84761,5.0/3.0);
                double t84802 = 1.0/pow(rho_a[index],1.0/3.0);
                double t84803 = c*t84802;
                double t84804 = sqrt(t84803);
                double t84805 = pow(t84803,3.0/2.0);
                double t84806 = c*c;
                double t84807 = 1.0/pow(rho_a[index],2.0/3.0);
                double t84808 = 1.0/c0p;
                double t84809 = b1p*t84804;
                double t84810 = b3p*t84805;
                double t84811 = b4p*t84806*t84807;
                double t84812 = b2p*c*t84802;
                double t84813 = t84810+t84811+t84812+t84809;
                double t84814 = 1.0/t84813;
                double t84815 = t84814*t84808*(1.0/2.0);
                double t84816 = t84815+1.0;
                double t84817 = log(t84816);
                double t84818 = a1p*c*t84802;
                double t84819 = t84818+1.0;
                double t84820 = 1.0/pow(t84761,1.0/3.0);
                double t84821 = c*t84820;
                double t84822 = gamma_aa[index]*gamma_aa[index];
                double t84823 = gcab*gcab;
                double t84824 = t84823*t84823;
                double t84825 = 1.0/pow(rho_a[index],8.0/3.0);
                double t84826 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t84827 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t84828 = 1.0/pow(rho_a[index],1.9E1/3.0);
                double t84829 = 1.0/pow(rho_a[index],3.5E1/3.0);
                double t84830 = gamma_aa[index]*gcab*t84825*2.0;
                double t84831 = t84822*t84823*t84826;
                double t84832 = t84830+t84831+1.0;
                double t84833 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]*rho_a[index]);
                double t84834 = gamma_aa[index]*gcab*t84825;
                double t84835 = t84834+1.0;
                double t84836 = gamma_aa[index]*gcab*t84825*3.0;
                double t84837 = gamma_aa[index]*gcab*t84822*t84823*t84827;
                double t84838 = t84822*t84823*t84826*3.0;
                double t84839 = t84836+t84837+t84838+1.0;
                double t84840 = t84822*t84822;
                double t84841 = 1.0/pow(rho_a[index],3.2E1/3.0);
                double t84842 = gamma_aa[index]*gcab*t84825*4.0;
                double t84843 = gamma_aa[index]*gcab*t84822*t84823*t84827*4.0;
                double t84844 = t84822*t84823*t84826*6.0;
                double t84845 = t84840*t84841*t84824;
                double t84846 = t84842+t84843+t84844+t84845+1.0;
                double t84847 = 1.0/pow(rho_a[index],1.1E1/3.0);
                double t84848 = 1.0/(t84832*t84832);
                double t84849 = 1.0/(t84839*t84839);
                double t84850 = 1.0/(t84846*t84846);
                double t84851 = gamma_aa[index]*gcab*t84847*(8.0/3.0);
                double t84852 = t84822*t84823*t84828*(8.0/3.0);
                double t84853 = t84851+t84852;
                double t84854 = gcab*t84825;
                double t84855 = gamma_aa[index]*t84823*t84826;
                double t84856 = t84854+t84855;
                double t84857 = gcab*t84825*(3.0/2.0);
                double t84858 = gamma_aa[index]*t84823*t84826*3.0;
                double t84859 = gcab*t84822*t84823*t84827*(3.0/2.0);
                double t84860 = t84857+t84858+t84859;
                double t84861 = gamma_aa[index]*gcab*t84847*4.0;
                double t84862 = gamma_aa[index]*gcab*t84822*t84823*t84833*4.0;
                double t84863 = t84822*t84823*t84828*8.0;
                double t84864 = t84861+t84862+t84863;
                double t84865 = gamma_aa[index]*gcab*t84847*(1.6E1/3.0);
                double t84866 = gamma_aa[index]*gcab*t84822*t84823*t84833*1.6E1;
                double t84867 = t84822*t84823*t84828*1.6E1;
                double t84868 = t84840*t84824*t84829*(1.6E1/3.0);
                double t84869 = t84865+t84866+t84867+t84868;
                double t84870 = gcab*t84825*2.0;
                double t84871 = gamma_aa[index]*t84823*t84826*6.0;
                double t84872 = gcab*t84822*t84823*t84827*6.0;
                double t84873 = gamma_aa[index]*t84822*t84841*t84824*2.0;
                double t84874 = t84870+t84871+t84872+t84873;
                double t84875 = pow(2.0,1.0/3.0);
                double t84876 = t84875*2.0;
                double t84877 = t84876-2.0;
                double t84878 = two_13*2.0;
                double t84879 = t84878-2.0;
                double t84880 = 1.0/t84879;
                double t84881 = 1.0/c0f;
                double t84882 = b1f*t84804;
                double t84883 = b3f*t84805;
                double t84884 = b4f*t84806*t84807;
                double t84885 = b2f*c*t84802;
                double t84886 = t84882+t84883+t84884+t84885;
                double t84887 = 1.0/t84886;
                double t84888 = t84881*t84887*(1.0/2.0);
                double t84889 = t84888+1.0;
                double t84890 = log(t84889);
                double t84891 = a1f*c*t84802;
                double t84892 = t84891+1.0;
                double t84893 = c0f*t84890*t84892*2.0;
                double t84894 = c0p*t84817*t84819*2.0;
                double t84895 = sqrt(t84821);
                double t84896 = b1p*t84895;
                double t84897 = pow(t84821,3.0/2.0);
                double t84898 = b3p*t84897;
                double t84899 = b2p*c*t84820;
                double t84900 = b4p*t84806*t84763;
                double t84901 = t84900+t84896+t84898+t84899;
                double t84902 = 1.0/t84901;
                double t84903 = t84902*t84808*(1.0/2.0);
                double t84904 = t84903+1.0;
                double t84905 = log(t84904);
                double t84906 = a1p*c*t84820;
                double t84907 = t84906+1.0;
                double t84908 = 1.0/t84846;
                double t84909 = 1.0/t84832;
                double t84910 = 1.0/t84839;
                double t84911 = 1.0/(t84835*t84835);
                double t84912 = 1.0/(t84835*t84835*t84835);
                double t84913 = ccab3*gcab*t84822*t84823*t84827*t84864*t84849*(3.0/2.0);
                double t84914 = ccab2*gamma_aa[index]*t84823*t84826*t84853*t84848;
                double t84915 = ccab3*gamma_aa[index]*gcab*t84822*t84823*t84833*t84860*t84849*4.0;
                double t84916 = ccab4*gamma_aa[index]*t84822*t84841*t84850*t84824*t84869*2.0;
                double t84917 = ccab4*t84840*t84850*t84824*t84829*t84874*(1.6E1/3.0);
                double t84918 = ccab2*t84822*t84823*t84828*t84856*t84848*(8.0/3.0);
                double t84919 = gamma_aa[index]*t84823*t84828*4.0;
                double t84920 = 1.0/(t84832*t84832*t84832);
                double t84921 = 1.0/(t84839*t84839*t84839);
                double t84922 = 1.0/(t84846*t84846*t84846);
                double t84923 = 1.0/pow(t84761,4.0/3.0);
                double t84924 = 1.0/pow(rho_a[index],4.0/3.0);
                double t84925 = 1.0/pow(rho_a[index],5.0/3.0);
                double t84926 = 1.0/sqrt(t84803);
                double t84927 = 1.0/t84816;
                double t84928 = 1.0/(t84813*t84813);
                double t84929 = b4p*t84806*t84925*(2.0/3.0);
                double t84930 = b2p*c*t84924*(1.0/3.0);
                double t84931 = b1p*c*t84924*t84926*(1.0/6.0);
                double t84932 = b3p*c*t84804*t84924*(1.0/2.0);
                double t84933 = t84930+t84931+t84932+t84929;
                double t84934 = t84933*t84819*t84927*t84928;
                double t84935 = t84893-t84894;
                double t84936 = t84880*t84935*t84877;
                double t84937 = 1.0/t84835;
                double t84938 = t84936+t84894;
                double t84939 = gcaa*gcaa;
                double t84940 = t84939*t84939;
                double t84941 = gamma_aa[index]*gcaa*t84825;
                double t84942 = t84941+1.0;
                double t84943 = gamma_aa[index]*gcaa*t84825*3.0;
                double t84944 = gamma_aa[index]*gcaa*t84822*t84827*t84939;
                double t84945 = t84822*t84826*t84939*3.0;
                double t84946 = t84943+t84944+t84945+1.0;
                double t84947 = gamma_aa[index]*gcaa*t84825*4.0;
                double t84948 = gamma_aa[index]*gcaa*t84822*t84827*t84939*4.0;
                double t84949 = t84822*t84826*t84939*6.0;
                double t84950 = t84840*t84841*t84940;
                double t84951 = t84950+t84947+t84948+t84949+1.0;
                double t84952 = gamma_aa[index]*gcaa*t84825*2.0;
                double t84953 = t84822*t84826*t84939;
                double t84954 = t84952+t84953+1.0;
                double t84955 = tau_a[index]-1.0/1.0E20;
                double t84956 = ( (t84955 > 0.0) ?  1.0 : 0.0 ) ;
                double t84957 = tau_a[index]*2.0;
                double t84995 = gamma_aa[index]*t84799*(1.0/4.0);
                double t84958 = t84957-t84995;
                double t84959 = t84765*t84958*(1.0/2.0);
                double t84960 = t84959-1.0;
                double t84961 = t84960*t84956;
                double t84962 = t84961+1.0;
                double t84963 = 1.0/t84942;
                double t84964 = 1.0/t84951;
                double t84965 = 1.0/t84954;
                double t84966 = 1.0/t84946;
                double t84967 = 1.0/(t84942*t84942);
                double t84968 = 1.0/(t84946*t84946);
                double t84969 = 1.0/(t84954*t84954);
                double t84970 = gcaa*t84825*3.0;
                double t84971 = gamma_aa[index]*t84826*t84939*6.0;
                double t84972 = gcaa*t84822*t84827*t84939*3.0;
                double t84973 = t84970+t84971+t84972;
                double t84974 = 1.0/(t84951*t84951);
                double t84975 = gcaa*t84825*4.0;
                double t84976 = gamma_aa[index]*t84826*t84939*1.2E1;
                double t84977 = gcaa*t84822*t84827*t84939*1.2E1;
                double t84978 = gamma_aa[index]*t84822*t84841*t84940*4.0;
                double t84979 = t84975+t84976+t84977+t84978;
                double t84980 = gcaa*t84825*2.0;
                double t84981 = gamma_aa[index]*t84826*t84939*2.0;
                double t84982 = t84980+t84981;
                double t84983 = gamma_aa[index]*gcaa*t84847*(1.6E1/3.0);
                double t84984 = t84822*t84828*t84939*(1.6E1/3.0);
                double t84985 = t84983+t84984;
                double t84986 = gamma_aa[index]*gcaa*t84847*8.0;
                double t84987 = gamma_aa[index]*gcaa*t84822*t84833*t84939*8.0;
                double t84988 = t84822*t84828*t84939*1.6E1;
                double t84989 = t84986+t84987+t84988;
                double t84990 = gamma_aa[index]*gcaa*t84847*(3.2E1/3.0);
                double t84991 = gamma_aa[index]*gcaa*t84822*t84833*t84939*3.2E1;
                double t84992 = t84822*t84828*t84939*3.2E1;
                double t84993 = t84840*t84940*t84829*(3.2E1/3.0);
                double t84994 = t84990+t84991+t84992+t84993;
                double t84996 = 1.0/t84889;
                double t84997 = 1.0/(t84886*t84886);
                double t84998 = b4f*t84806*t84925*(2.0/3.0);
                double t84999 = b2f*c*t84924*(1.0/3.0);
                double t85000 = b1f*c*t84924*t84926*(1.0/6.0);
                double t85001 = b3f*c*t84804*t84924*(1.0/2.0);
                double t85002 = t84998+t84999+t85000+t85001;
                double t85003 = a1f*c*c0f*t84924*t84890*(2.0/3.0);
                double t85004 = a1p*c*c0p*t84924*t84817*(2.0/3.0);
                double t85005 = ccaa1*gcaa*t84825*t84963;
                double t85006 = ccaa4*gamma_aa[index]*t84822*t84841*t84940*t84964*4.0;
                double t85007 = ccaa2*gamma_aa[index]*t84826*t84965*t84939*2.0;
                double t85008 = ccaa3*gcaa*t84822*t84827*t84939*t84966*3.0;
                double t85013 = ccaa1*gamma_aa[index]*t84826*t84939*t84967;
                double t85014 = ccaa3*gamma_aa[index]*gcaa*t84822*t84827*t84973*t84939*t84968;
                double t85015 = ccaa4*t84840*t84841*t84940*t84974*t84979;
                double t85016 = ccaa2*t84822*t84826*t84982*t84939*t84969;
                double t85009 = -t85013+t85005-t85014+t85006-t85015+t85007-t85016+t85008;
                double t85010 = t84934+t85003-t85004-t84892*t84996*t84997*t85002;
                double t85011 = t84880*t84877*t85010;
                double t85012 = -t84934+t85011+t85004;
                v_rho_a_gamma_aa_[index] = (rho_a[index]*t84938*2.0-c0p*rho_a[index]*t84905*t84907*4.0)*(t84913+t84914+ \
                   t84915+t84916+t84917+t84918-ccab1*gcab*t84847*t84937*(4.0/3.0)+ccab1*gamma_aa[index]*t84911*t84823* \
                   t84828*(8.0/3.0)-ccab2*gamma_aa[index]*t84823*t84828*t84909*4.0+ccab4*t84840*t84841*t84850*t84824* \
                   (gcab*t84847*(1.6E1/3.0)+gamma_aa[index]*t84823*t84828*2.4E1+gamma_aa[index]*t84822*t84824*t84829* \
                   (4.0E1/3.0)+gcab*t84822*t84823*t84833*3.2E1)+ccab2*t84822*t84823*t84826*t84848*(t84919+gcab*t84847* \
                   (8.0/3.0))-ccab4*gamma_aa[index]*t84822*t84824*t84908*t84829*(4.0E1/3.0)-ccab1*gcab*t84822*t84912* \
                   t84823*t84833*(4.0/3.0)-ccab3*gcab*t84910*t84822*t84823*t84833*8.0-ccab2*t84920*t84822*t84823*t84826* \
                   t84853*t84856*2.0-ccab4*t84840*t84841*t84922*t84824*t84874*t84869*2.0+ccab3*gamma_aa[index]*gcab*t84822* \
                   t84823*t84827*t84849*(gcab*t84847*4.0+gamma_aa[index]*t84823*t84828*1.2E1+gcab*t84822*t84823*t84833* \
                   8.0)-ccab3*gamma_aa[index]*gcab*t84822*t84921*t84823*t84860*t84827*t84864*2.0)-(-t84936-t84894+rho_a[index]* \
                   ((1.0/(t84901*t84901)*t84907*(b2p*c*t84923*(1.0/3.0)+b4p*t84801*t84806*(2.0/3.0)+b3p*c*t84923*t84895* \
                   (1.0/2.0)+b1p*c*1.0/sqrt(t84821)*t84923*(1.0/6.0)))/t84904-a1p*c*c0p*t84905*t84923*(2.0/3.0))*2.0+ \
                   rho_a[index]*(-t84934+t85004+t84880*t84877*(t84934+t85003-t84892*t84996*t84997*t85002-a1p*c*c0p*t84924* \
                   t84817*(2.0/3.0)))+c0p*t84905*t84907*2.0)*(ccab1*gcab*t84825*t84937*(1.0/2.0)-ccab1*gamma_aa[index]* \
                   t84911*t84823*t84826*(1.0/2.0)+ccab2*gamma_aa[index]*t84823*t84826*t84909-ccab4*t84840*t84841*t84850* \
                   t84824*t84874-ccab2*t84822*t84823*t84826*t84856*t84848+ccab4*gamma_aa[index]*t84822*t84841*t84824* \
                   t84908*2.0+ccab3*gcab*t84910*t84822*t84823*t84827*(3.0/2.0)-ccab3*gamma_aa[index]*gcab*t84822*t84823* \
                   t84860*t84827*t84849)*2.0-(X-1.0)*(-kp*rho_a[index]*t84774*t84797*(mu_*t84800*t84760*t84763*t84759* \
                   (1.0/2.0)+mu_*t84801*t84760*t84762*t84759*(1.0/3.0))+mu_*t84762*t84763*t84774*t84759*t84797*(1.0/4.0) \
                   +mu_*t84763*t84774*t84759*t84799*(C_k*a_1*t84765*t84775*t84798*(5.0/3.0)-C_k*a_1*t84781*t84765*t84767* \
                   t84798*(5.0/3.0)+C_k*a_2*t84781*t84765*t84767*t84798*(1.0E1/3.0)-C_k*a_2*t84765*t84783*t84768*t84798* \
                   (1.0E1/3.0)+C_k*a_3*t84765*t84783*t84768*t84798*5.0-C_k*a_4*t84765*t84769*t84787*t84798*(2.0E1/3.0) \
                   +C_k*a_5*t84765*t84769*t84787*t84798*(2.5E1/3.0)-C_k*a_8*t84770*t84765*t84795*t84798*(4.0E1/3.0)+C_k* \
                   a_9*t84770*t84765*t84795*t84798*1.5E1+C_k*a_10*t84770*t84765*t84767*t84777*t84798*(5.0E1/3.0)-C_k* \
                   a_10*t84770*t84765*t84768*t84779*t84798*(5.0E1/3.0)+C_k*a_11*t84770*t84765*t84768*t84779*t84798*(5.5E1/ \
                   3.0)-C_k*a_3*t84765*t84767*t84785*t84768*t84798*5.0+C_k*a_4*t84765*t84767*t84785*t84768*t84798*(2.0E1/ \
                   3.0)-C_k*a_5*t84765*t84767*t84769*t84789*t84798*(2.5E1/3.0)-C_k*a_6*t84791*t84765*t84768*t84769*t84798* \
                   1.0E1+C_k*a_6*t84765*t84767*t84769*t84789*t84798*1.0E1+C_k*a_7*t84791*t84765*t84768*t84769*t84798* \
                   (3.5E1/3.0)-C_k*a_9*t84770*t84765*t84767*t84777*t84798*1.5E1-C_k*a_11*t84770*1.0/pow(t84771,1.2E1) \
                   *t84765*t84767*t84768*t84798*(5.5E1/3.0)-C_k*a_7*t84765*t84793*t84767*t84768*t84769*t84798*(3.5E1/ \
                   3.0)+C_k*a_8*t84765*t84793*t84767*t84768*t84769*t84798*(4.0E1/3.0))*(1.0/4.0)+mu_*t84763*1.0/(t84773* \
                   t84773*t84773)*t84759*t84797*t84799*(gamma_aa[index]*mu_*t84800*t84760*t84763*t84759*(1.0/2.0)+gamma_aa[index]* \
                   mu_*t84801*t84760*t84762*t84759*(1.0/3.0))*(1.0/2.0))+(rho_a[index]*(t84894+t84880*t84877*(t84893- \
                   c0p*t84817*t84819*2.0))*2.0-c0p*rho_a[index]*t84905*t84907*4.0)*(t84913+t84914+t84915+t84916+t84917+ \
                   t84918+ccab1*gamma_aa[index]*t84911*t84823*t84828*(4.0/3.0)-ccab2*gamma_aa[index]*t84823*t84828*t84909* \
                   (4.0/3.0)+ccab4*t84840*t84841*t84850*t84824*(gamma_aa[index]*t84823*t84828*8.0+gamma_aa[index]*t84822* \
                   t84824*t84829*8.0+gcab*t84822*t84823*t84833*1.6E1)-ccab4*gamma_aa[index]*t84822*t84824*t84908*t84829* \
                   8.0+ccab2*gamma_aa[index]*t84822*t84824*t84829*t84848*(4.0/3.0)-ccab1*gcab*t84822*t84912*t84823*t84833* \
                   (4.0/3.0)-ccab3*gcab*t84910*t84822*t84823*t84833*4.0-ccab2*t84920*t84822*t84823*t84826*t84853*t84856* \
                   2.0-ccab4*t84840*t84841*t84922*t84824*t84874*t84869*2.0+ccab3*gamma_aa[index]*gcab*t84822*t84823*t84827* \
                   t84849*(t84919+gcab*t84822*t84823*t84833*4.0)-ccab3*gamma_aa[index]*gcab*t84822*t84921*t84823*t84860* \
                   t84827*t84864*2.0)-t84962*t84938*t85009+rho_a[index]*t84962*t85012*t85009-rho_a[index]*t84962*t84938* \
                   (ccaa1*gcaa*t84963*t84847*(-8.0/3.0)-ccaa2*gamma_aa[index]*t84828*t84965*t84939*(3.2E1/3.0)+ccaa1* \
                   gamma_aa[index]*t84828*t84939*t84967*8.0+ccaa4*t84840*t84940*t84829*t84974*t84979*(3.2E1/3.0)+ccaa2* \
                   t84822*t84828*t84982*t84939*t84969*(1.6E1/3.0)+ccaa4*t84840*t84841*t84940*t84974*(gcaa*t84847*(3.2E1/ \
                   3.0)+gamma_aa[index]*t84828*t84939*6.4E1+gamma_aa[index]*t84822*t84940*t84829*(1.28E2/3.0)+gcaa*t84822* \
                   t84833*t84939*9.6E1)-ccaa1*gcaa*t84822*t84833*1.0/(t84942*t84942*t84942)*t84939*(1.6E1/3.0)+ccaa2* \
                   t84822*t84826*t84939*t84969*(gcaa*t84847*(1.6E1/3.0)+gamma_aa[index]*t84828*t84939*(3.2E1/3.0))-ccaa4* \
                   gamma_aa[index]*t84822*t84940*t84829*t84964*(1.28E2/3.0)+ccaa2*gamma_aa[index]*t84826*t84939*t84985* \
                   t84969*2.0-ccaa3*gcaa*t84822*t84833*t84939*t84966*2.4E1+ccaa4*gamma_aa[index]*t84822*t84841*t84940* \
                   t84974*t84994*4.0+ccaa3*gcaa*t84822*t84827*t84939*t84968*t84989*3.0-ccaa4*t84840*t84841*t84940*1.0/ \
                   (t84951*t84951*t84951)*t84994*t84979*2.0-ccaa2*t84822*t84826*1.0/(t84954*t84954*t84954)*t84982*t84939* \
                   t84985*2.0+ccaa3*gamma_aa[index]*gcaa*t84822*t84827*t84939*t84968*(gcaa*t84847*8.0+gamma_aa[index]* \
                   t84828*t84939*3.2E1+gcaa*t84822*t84833*t84939*2.4E1)+ccaa3*gamma_aa[index]*gcaa*t84822*t84833*t84973* \
                   t84939*t84968*8.0-ccaa3*gamma_aa[index]*gcaa*t84822*t84827*1.0/(t84946*t84946*t84946)*t84973*t84939* \
                   t84989*2.0)-t84765*t84956*t85012*(ccaa0+ccaa1*gamma_aa[index]*gcaa*t84825*t84963+ccaa4*t84840*t84841* \
                   t84940*t84964+ccaa2*t84822*t84826*t84965*t84939+ccaa3*gamma_aa[index]*gcaa*t84822*t84827*t84939*t84966) \
                   *(1.0/8.0)-t84765*t84938*t84956*(ccaa1*gamma_aa[index]*gcaa*t84963*t84847*(8.0/3.0)+ccaa4*t84840*t84940* \
                   t84829*t84964*(3.2E1/3.0)+ccaa2*t84822*t84828*t84965*t84939*(1.6E1/3.0)-ccaa1*t84822*t84828*t84939* \
                   t84967*(8.0/3.0)-ccaa4*t84840*t84841*t84940*t84974*t84994-ccaa2*t84822*t84826*t84939*t84985*t84969+ \
                   ccaa3*gamma_aa[index]*gcaa*t84822*t84833*t84939*t84966*8.0-ccaa3*gamma_aa[index]*gcaa*t84822*t84827* \
                   t84939*t84968*t84989)*(1.0/8.0)-gamma_aa[index]*t84765*t84938*t84956*t84799*t85009*(1.0/8.0);
            } else {
                v_rho_a_gamma_aa_[index] = 0.0;
            } 
        
            //V_gamma_aa_gamma_aa
            if (rho_a[index] > cutoff_) {
                double t85018 = 1.0/pow(rho_a[index],1.0/3.0);
                double t85019 = c*t85018;
                double t85020 = sqrt(t85019);
                double t85021 = pow(t85019,3.0/2.0);
                double t85022 = c*c;
                double t85023 = 1.0/pow(rho_a[index],2.0/3.0);
                double t85024 = 1.0/c0p;
                double t85025 = b1p*t85020;
                double t85026 = b3p*t85021;
                double t85027 = b4p*t85022*t85023;
                double t85028 = b2p*c*t85018;
                double t85029 = t85025+t85026+t85027+t85028;
                double t85030 = 1.0/t85029;
                double t85031 = t85030*t85024*(1.0/2.0);
                double t85032 = t85031+1.0;
                double t85033 = log(t85032);
                double t85034 = a1p*c*t85018;
                double t85035 = t85034+1.0;
                double t85036 = rho_a[index]*2.0;
                double t85037 = 1.0/pow(t85036,1.0/3.0);
                double t85038 = c*t85037;
                double t85039 = gcab*gcab;
                double t85040 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t85041 = 1.0/pow(rho_a[index],8.0/3.0);
                double t85042 = gamma_aa[index]*gamma_aa[index];
                double t85043 = t85039*t85039;
                double t85044 = 1.0/pow(rho_a[index],3.2E1/3.0);
                double t85045 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t85046 = gamma_aa[index]*gcab*t85041;
                double t85047 = t85046+1.0;
                double t85048 = gamma_aa[index]*gcab*t85041*2.0;
                double t85049 = t85040*t85042*t85039;
                double t85050 = t85048+t85049+1.0;
                double t85051 = gamma_aa[index]*gcab*t85041*3.0;
                double t85052 = gamma_aa[index]*gcab*t85042*t85045*t85039;
                double t85053 = t85040*t85042*t85039*3.0;
                double t85054 = t85051+t85052+t85053+1.0;
                double t85055 = t85042*t85042;
                double t85071 = gcab*t85041*2.0;
                double t85072 = gamma_aa[index]*t85040*t85039*6.0;
                double t85073 = gcab*t85042*t85045*t85039*6.0;
                double t85074 = gamma_aa[index]*t85042*t85043*t85044*2.0;
                double t85056 = t85071+t85072+t85073+t85074;
                double t85057 = gamma_aa[index]*gcab*t85041*4.0;
                double t85058 = gamma_aa[index]*gcab*t85042*t85045*t85039*4.0;
                double t85059 = t85040*t85042*t85039*6.0;
                double t85060 = t85043*t85044*t85055;
                double t85061 = t85060+t85057+t85058+t85059+1.0;
                double t85064 = gcab*t85041;
                double t85065 = gamma_aa[index]*t85040*t85039;
                double t85062 = t85064+t85065;
                double t85063 = 1.0/(t85054*t85054);
                double t85066 = 1.0/(t85050*t85050);
                double t85067 = gcab*t85041*(3.0/2.0);
                double t85068 = gamma_aa[index]*t85040*t85039*3.0;
                double t85069 = gcab*t85042*t85045*t85039*(3.0/2.0);
                double t85070 = t85067+t85068+t85069;
                double t85075 = 1.0/(t85061*t85061);
                double t85076 = pow(2.0,1.0/3.0);
                double t85077 = t85076*2.0;
                double t85078 = t85077-2.0;
                double t85079 = two_13*2.0;
                double t85080 = t85079-2.0;
                double t85081 = 1.0/t85080;
                double t85082 = 1.0/c0f;
                double t85083 = b1f*t85020;
                double t85084 = b3f*t85021;
                double t85085 = b4f*t85022*t85023;
                double t85086 = b2f*c*t85018;
                double t85087 = t85083+t85084+t85085+t85086;
                double t85088 = 1.0/t85087;
                double t85089 = t85082*t85088*(1.0/2.0);
                double t85090 = t85089+1.0;
                double t85091 = log(t85090);
                double t85092 = a1f*c*t85018;
                double t85093 = t85092+1.0;
                double t85094 = c0f*t85091*t85093*2.0;
                double t85095 = c0p*t85033*t85035*2.0;
                double t85096 = gcaa*gcaa;
                double t85097 = t85096*t85096;
                double t85098 = gamma_aa[index]*gcaa*t85041;
                double t85099 = t85098+1.0;
                double t85100 = gamma_aa[index]*gcaa*t85041*2.0;
                double t85101 = t85040*t85042*t85096;
                double t85102 = t85100+t85101+1.0;
                double t85103 = gamma_aa[index]*gcaa*t85041*3.0;
                double t85104 = gamma_aa[index]*gcaa*t85042*t85045*t85096;
                double t85105 = t85040*t85042*t85096*3.0;
                double t85106 = t85103+t85104+t85105+1.0;
                double t85122 = gcaa*t85041*4.0;
                double t85123 = gamma_aa[index]*t85040*t85096*1.2E1;
                double t85124 = gcaa*t85042*t85045*t85096*1.2E1;
                double t85125 = gamma_aa[index]*t85042*t85044*t85097*4.0;
                double t85107 = t85122+t85123+t85124+t85125;
                double t85108 = gamma_aa[index]*gcaa*t85041*4.0;
                double t85109 = gamma_aa[index]*gcaa*t85042*t85045*t85096*4.0;
                double t85110 = t85040*t85042*t85096*6.0;
                double t85111 = t85044*t85055*t85097;
                double t85112 = t85110+t85111+t85108+t85109+1.0;
                double t85115 = gcaa*t85041*2.0;
                double t85116 = gamma_aa[index]*t85040*t85096*2.0;
                double t85113 = t85115+t85116;
                double t85114 = 1.0/(t85106*t85106);
                double t85117 = 1.0/(t85102*t85102);
                double t85118 = gcaa*t85041*3.0;
                double t85119 = gamma_aa[index]*t85040*t85096*6.0;
                double t85120 = gcaa*t85042*t85045*t85096*3.0;
                double t85121 = t85120+t85118+t85119;
                double t85126 = 1.0/(t85112*t85112);
                double t85127 = 1.0/tau_a[index];
                double t85128 = tau_a[index]-1.0/1.0E20;
                double t85129 = ( (t85128 > 0.0) ?  1.0 : 0.0 ) ;
                double t85130 = t85094-t85095;
                double t85131 = t85130*t85081*t85078;
                double t85132 = t85131+t85095;
                double t85133 = 1.0/t85112;
                double t85134 = 1.0/t85102;
                double t85135 = 1.0/t85106;
                double t85136 = 1.0/(t85099*t85099);
                double t85137 = 1.0/kp;
                double t85138 = 1.0/pow(t85036,2.0/3.0);
                double t85139 = pow(rho_a[index],5.0/3.0);
                double t85140 = C_k*t85127*t85139;
                double t85141 = t85140-1.0;
                double t85142 = t85141*t85141;
                double t85143 = t85142*t85142;
                double t85144 = t85143*t85143;
                double t85145 = t85140+1.0;
                v_gamma_aa_gamma_aa_[index] = (rho_a[index]*(t85095+t85081*t85078*(t85094-c0p*t85033*t85035*2.0)) \
                   *2.0-c0p*rho_a[index]*log((t85024*(1.0/2.0))/(b1p*sqrt(t85038)+b3p*pow(t85038,3.0/2.0)+b2p*c*t85037+ \
                   b4p*t85022*t85138)+1.0)*(a1p*c*t85037+1.0)*4.0)*((ccab2*t85040*t85039*(1.0/2.0))/t85050-ccab1*t85040* \
                   1.0/(t85047*t85047)*t85039*(1.0/2.0)-ccab2*t85042*t85043*t85044*t85066*(1.0/2.0)+(ccab4*t85042*t85043* \
                   t85044*3.0)/t85061-ccab4*t85043*t85044*t85055*t85075*(t85040*t85039*3.0+t85042*t85043*t85044*3.0+gamma_aa[index]* \
                   gcab*t85045*t85039*6.0)+(ccab3*gamma_aa[index]*gcab*t85045*t85039*(3.0/2.0))/t85054+ccab1*gamma_aa[index]* \
                   gcab*t85045*1.0/(t85047*t85047*t85047)*t85039*(1.0/2.0)+ccab2*t85040*1.0/(t85050*t85050*t85050)*t85042* \
                   (t85062*t85062)*t85039*2.0+ccab4*t85043*1.0/(t85061*t85061*t85061)*t85044*t85055*(t85056*t85056)*2.0- \
                   ccab2*gamma_aa[index]*t85040*t85062*t85039*t85066*2.0-ccab4*gamma_aa[index]*t85042*t85043*t85044*t85056* \
                   t85075*4.0-ccab3*gcab*t85042*t85070*t85045*t85063*t85039*3.0-ccab3*gamma_aa[index]*gcab*t85042*t85045* \
                   t85063*t85039*(t85040*t85039*(3.0/2.0)+gamma_aa[index]*gcab*t85045*t85039*(3.0/2.0))+ccab3*gamma_aa[index]* \
                   gcab*t85042*(t85070*t85070)*t85045*1.0/(t85054*t85054*t85054)*t85039*2.0)*4.0+t85132*t85127*t85129* \
                   ((ccaa1*gcaa*t85041)/t85099+ccaa2*gamma_aa[index]*t85040*t85134*t85096*2.0-ccaa1*gamma_aa[index]*t85040* \
                   t85136*t85096-ccaa2*t85040*t85113*t85042*t85117*t85096-ccaa4*t85044*t85107*t85126*t85055*t85097+ccaa4* \
                   gamma_aa[index]*t85042*t85133*t85044*t85097*4.0+ccaa3*gcaa*t85042*t85045*t85135*t85096*3.0-ccaa3*gamma_aa[index]* \
                   gcaa*t85121*t85042*t85114*t85045*t85096)*(1.0/2.0)-rho_a[index]*t85132*(t85129*(t85127*(tau_a[index]* \
                   2.0-(gamma_aa[index]*(1.0/4.0))/rho_a[index])*(1.0/2.0)-1.0)+1.0)*(ccaa2*t85040*t85134*t85096*2.0- \
                   ccaa1*t85040*t85136*t85096*2.0-ccaa2*t85042*t85044*t85117*t85097*2.0+ccaa4*t85042*t85133*t85044*t85097* \
                   1.2E1-ccaa4*t85044*t85126*t85055*t85097*(t85040*t85096*1.2E1+t85042*t85044*t85097*1.2E1+gamma_aa[index]* \
                   gcaa*t85045*t85096*2.4E1)+ccaa1*gamma_aa[index]*gcaa*t85045*t85096*1.0/(t85099*t85099*t85099)*2.0+ \
                   ccaa2*1.0/(t85102*t85102*t85102)*t85040*(t85113*t85113)*t85042*t85096*2.0+ccaa4*1.0/(t85112*t85112* \
                   t85112)*t85044*(t85107*t85107)*t85055*t85097*2.0+ccaa3*gamma_aa[index]*gcaa*t85045*t85135*t85096*6.0- \
                   ccaa2*gamma_aa[index]*t85040*t85113*t85117*t85096*4.0-ccaa4*gamma_aa[index]*t85042*t85044*t85107*t85126* \
                   t85097*8.0-ccaa3*gcaa*t85121*t85042*t85114*t85045*t85096*6.0-ccaa3*gamma_aa[index]*gcaa*t85042*t85114* \
                   t85045*t85096*(t85040*t85096*6.0+gamma_aa[index]*gcaa*t85045*t85096*6.0)+ccaa3*gamma_aa[index]*gcaa* \
                   (t85121*t85121)*t85042*1.0/(t85106*t85106*t85106)*t85045*t85096*2.0)*2.0+1.0/(k*k*k*k)*(mu_*mu_)*1.0/ \
                   (rho_a[index]*rho_a[index]*rho_a[index])*1.0/pow(t85036,4.0/3.0)*t85137*1.0/pow(gamma_aa[index]*1.0/ \
                   (k*k)*mu_*1.0/(rho_a[index]*rho_a[index])*t85137*t85138*(1.0/4.0)+1.0,3.0)*(X-1.0)*((a_1*t85141)/t85145+ \
                   a_2*t85142*1.0/(t85145*t85145)+a_4*t85143*1.0/(t85145*t85145*t85145*t85145)+a_8*t85144*1.0/(t85145* \
                   t85145*t85145*t85145*t85145*t85145*t85145*t85145)+a_10*t85142*t85144*1.0/pow(t85145,1.0E1)+a_3*t85141* \
                   t85142*1.0/(t85145*t85145*t85145)+a_5*t85141*t85143*1.0/(t85145*t85145*t85145*t85145*t85145)+a_6*t85142* \
                   t85143*1.0/(t85145*t85145*t85145*t85145*t85145*t85145)+a_9*t85141*t85144*1.0/(t85145*t85145*t85145* \
                   t85145*t85145*t85145*t85145*t85145*t85145)+a_11*t85141*t85142*t85144*1.0/pow(t85145,1.1E1)+a_7*t85141* \
                   t85142*t85143*1.0/(t85145*t85145*t85145*t85145*t85145*t85145*t85145)+1.0)*(1.0/4.0);
            } else {
                v_gamma_aa_gamma_aa_[index] = 0.0;
            } 
        
        }
        if (is_meta_) {
        
            //V_rho_a_tau_a
            if (rho_a[index] > cutoff_) {
                double t85147 = pow(rho_a[index],5.0/3.0);
                double t85148 = 1.0/(tau_a[index]*tau_a[index]);
                double t85149 = 1.0/tau_a[index];
                double t85150 = C_k*t85147*t85149;
                double t85151 = t85150+1.0;
                double t85152 = t85150-1.0;
                double t85153 = 1.0/(t85151*t85151);
                double t85154 = t85152*t85152;
                double t85155 = t85154*t85154;
                double t85156 = t85155*t85155;
                double t85157 = 1.0/pow(t85151,1.1E1);
                double t85158 = 1.0/(t85151*t85151*t85151);
                double t85159 = 1.0/(t85151*t85151*t85151*t85151);
                double t85160 = 1.0/(t85151*t85151*t85151*t85151*t85151);
                double t85161 = 1.0/(t85151*t85151*t85151*t85151*t85151*t85151);
                double t85162 = 1.0/(t85151*t85151*t85151*t85151*t85151*t85151*t85151);
                double t85163 = 1.0/(t85151*t85151*t85151*t85151*t85151*t85151*t85151*t85151);
                double t85164 = 1.0/(t85151*t85151*t85151*t85151*t85151*t85151*t85151*t85151*t85151);
                double t85165 = 1.0/pow(t85151,1.0E1);
                double t85166 = 1.0/(k*k);
                double t85167 = 1.0/kp;
                double t85168 = 1.0/(rho_a[index]*rho_a[index]);
                double t85169 = rho_a[index]*2.0;
                double t85170 = 1.0/pow(t85169,2.0/3.0);
                double t85171 = gamma_aa[index]*mu_*t85170*t85166*t85167*t85168*(1.0/4.0);
                double t85172 = t85171+1.0;
                double t85173 = 1.0/t85172;
                double t85174 = kp-kp*t85173+1.0;
                double t85175 = C_k*C_k;
                double t85176 = pow(rho_a[index],7.0/3.0);
                double t85177 = 1.0/(tau_a[index]*tau_a[index]*tau_a[index]);
                double t85178 = 1.0/t85151;
                double t85179 = 1.0/pow(t85151,1.2E1);
                double t85180 = pow(rho_a[index],2.0/3.0);
                double t85181 = C_k*a_1*t85147*t85148*t85178;
                double t85182 = C_k*a_2*t85152*t85153*t85147*t85148*2.0;
                double t85183 = C_k*a_10*t85152*t85147*t85156*t85165*t85148*1.0E1;
                double t85184 = C_k*a_11*t85154*t85147*t85156*t85148*t85157*1.1E1;
                double t85185 = C_k*a_3*t85154*t85147*t85148*t85158*3.0;
                double t85186 = C_k*a_4*t85152*t85154*t85147*t85148*t85159*4.0;
                double t85187 = C_k*a_5*t85160*t85155*t85147*t85148*5.0;
                double t85188 = C_k*a_6*t85152*t85161*t85155*t85147*t85148*6.0;
                double t85189 = C_k*a_7*t85162*t85154*t85155*t85147*t85148*7.0;
                double t85190 = C_k*a_8*t85152*t85154*t85163*t85155*t85147*t85148*8.0;
                double t85191 = C_k*a_9*t85164*t85147*t85156*t85148*9.0;
                double t85192 = t85181+t85190+t85182+t85191+t85183+t85184+t85185+t85186+t85187+t85188+t85189-C_k* \
                   a_1*t85152*t85153*t85147*t85148-C_k*a_2*t85154*t85147*t85148*t85158*2.0-C_k*a_4*t85160*t85155*t85147* \
                   t85148*4.0-C_k*a_8*t85164*t85147*t85156*t85148*8.0-C_k*a_10*t85154*t85147*t85156*t85148*t85157*1.0E1- \
                   C_k*a_3*t85152*t85154*t85147*t85148*t85159*3.0-C_k*a_5*t85152*t85161*t85155*t85147*t85148*5.0-C_k* \
                   a_6*t85162*t85154*t85155*t85147*t85148*6.0-C_k*a_9*t85152*t85147*t85156*t85165*t85148*9.0-C_k*a_11* \
                   t85152*t85154*t85147*t85156*t85148*t85179*1.1E1-C_k*a_7*t85152*t85154*t85163*t85155*t85147*t85148* \
                   7.0;
                double t85193 = 1.0/pow(rho_a[index],1.0/3.0);
                double t85194 = c*t85193;
                double t85195 = sqrt(t85194);
                double t85196 = pow(t85194,3.0/2.0);
                double t85197 = c*c;
                double t85198 = 1.0/pow(rho_a[index],2.0/3.0);
                double t85199 = 1.0/c0p;
                double t85200 = b1p*t85195;
                double t85201 = b3p*t85196;
                double t85202 = b4p*t85197*t85198;
                double t85203 = b2p*c*t85193;
                double t85204 = t85200+t85201+t85202+t85203;
                double t85205 = 1.0/t85204;
                double t85206 = t85205*t85199*(1.0/2.0);
                double t85207 = t85206+1.0;
                double t85208 = log(t85207);
                double t85209 = a1p*c*t85193;
                double t85210 = t85209+1.0;
                double t85211 = tau_a[index]-1.0/1.0E20;
                double t85212 = tau_a[index]*2.0;
                double t85213 = 1.0/rho_a[index];
                double t85244 = gamma_aa[index]*t85213*(1.0/4.0);
                double t85214 = t85212-t85244;
                double t85215 = gamma_aa[index]*gamma_aa[index];
                double t85216 = gcaa*gcaa;
                double t85217 = t85215*t85215;
                double t85218 = t85216*t85216;
                double t85219 = 1.0/pow(rho_a[index],3.2E1/3.0);
                double t85220 = 1.0/pow(rho_a[index],8.0/3.0);
                double t85221 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t85222 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t85223 = pow(2.0,1.0/3.0);
                double t85224 = t85223*2.0;
                double t85225 = t85224-2.0;
                double t85226 = two_13*2.0;
                double t85227 = t85226-2.0;
                double t85228 = 1.0/t85227;
                double t85229 = 1.0/c0f;
                double t85230 = b1f*t85195;
                double t85231 = b3f*t85196;
                double t85232 = b4f*t85197*t85198;
                double t85233 = b2f*c*t85193;
                double t85234 = t85230+t85231+t85232+t85233;
                double t85235 = 1.0/t85234;
                double t85236 = t85235*t85229*(1.0/2.0);
                double t85237 = t85236+1.0;
                double t85238 = log(t85237);
                double t85239 = a1f*c*t85193;
                double t85240 = t85239+1.0;
                double t85241 = c0f*t85240*t85238*2.0;
                double t85242 = c0p*t85210*t85208*2.0;
                double t85243 = ( (t85211 > 0.0) ?  1.0 : 0.0 ) ;
                double t85274 = t85214*t85148*(1.0/2.0);
                double t85245 = -t85274+t85149;
                double t85246 = t85243*t85245;
                double t85247 = 0.0 ;
                double t85248 = t85214*t85149*(1.0/2.0);
                double t85249 = t85248-1.0;
                double t85250 = t85247*t85249;
                double t85251 = t85250+t85246;
                double t85252 = gamma_aa[index]*gcaa*t85220*4.0;
                double t85253 = gamma_aa[index]*gcaa*t85221*t85215*t85216*4.0;
                double t85254 = t85222*t85215*t85216*6.0;
                double t85255 = t85217*t85218*t85219;
                double t85256 = t85252+t85253+t85254+t85255+1.0;
                double t85257 = 1.0/t85256;
                double t85258 = gamma_aa[index]*gcaa*t85220;
                double t85259 = t85258+1.0;
                double t85260 = 1.0/t85259;
                double t85261 = gamma_aa[index]*gcaa*t85220*3.0;
                double t85262 = gamma_aa[index]*gcaa*t85221*t85215*t85216;
                double t85263 = t85222*t85215*t85216*3.0;
                double t85264 = t85261+t85262+t85263+1.0;
                double t85265 = 1.0/t85264;
                double t85266 = gamma_aa[index]*gcaa*t85220*2.0;
                double t85267 = t85222*t85215*t85216;
                double t85268 = t85266+t85267+1.0;
                double t85269 = 1.0/t85268;
                double t85270 = 1.0/pow(rho_a[index],1.9E1/3.0);
                double t85271 = 1.0/pow(rho_a[index],1.1E1/3.0);
                double t85272 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]*rho_a[index]);
                double t85273 = 1.0/pow(rho_a[index],3.5E1/3.0);
                double t85275 = 1.0/pow(rho_a[index],4.0/3.0);
                double t85276 = 1.0/pow(rho_a[index],5.0/3.0);
                double t85277 = 1.0/sqrt(t85194);
                double t85278 = 1.0/t85207;
                double t85279 = 1.0/(t85204*t85204);
                double t85280 = b4p*t85276*t85197*(2.0/3.0);
                double t85281 = b2p*c*t85275*(1.0/3.0);
                double t85282 = b1p*c*t85275*t85277*(1.0/6.0);
                double t85283 = b3p*c*t85275*t85195*(1.0/2.0);
                double t85284 = t85280+t85281+t85282+t85283;
                double t85285 = t85210*t85284*t85278*t85279;
                double t85286 = ccaa4*t85217*t85218*t85219*t85257;
                double t85287 = ccaa1*gamma_aa[index]*gcaa*t85220*t85260;
                double t85288 = ccaa3*gamma_aa[index]*gcaa*t85221*t85215*t85216*t85265;
                double t85289 = ccaa2*t85222*t85215*t85216*t85269;
                double t85290 = ccaa0+t85286+t85287+t85288+t85289;
                double t85291 = t85241-t85242;
                double t85292 = t85225*t85228*t85291;
                double t85293 = t85242+t85292;
                v_rho_a_tau_a_[index] = (X-1.0)*(t85174*t85192+rho_a[index]*t85174*(C_k*a_1*t85180*t85148*t85178* \
                   (5.0/3.0)-a_1*t85153*t85175*t85176*t85177*(1.0E1/3.0)+a_2*t85153*t85175*t85176*t85177*(1.0E1/3.0)+ \
                   a_1*t85152*t85175*t85158*t85176*t85177*(1.0E1/3.0)+a_10*t85156*t85165*t85175*t85176*t85177*1.5E2-a_2* \
                   t85152*t85175*t85158*t85176*t85177*(4.0E1/3.0)+a_2*t85154*t85175*t85176*t85159*t85177*1.0E1+a_3*t85152* \
                   t85175*t85158*t85176*t85177*1.0E1-a_3*t85154*t85175*t85176*t85159*t85177*3.0E1+a_4*t85161*t85155*t85175* \
                   t85176*t85177*(1.0E2/3.0)+a_4*t85154*t85175*t85176*t85159*t85177*2.0E1-a_5*t85161*t85155*t85175*t85176* \
                   t85177*(2.5E2/3.0)+a_6*t85161*t85155*t85175*t85176*t85177*5.0E1+a_8*t85156*t85165*t85175*t85176*t85177* \
                   1.2E2-a_9*t85156*t85165*t85175*t85176*t85177*2.7E2-C_k*a_1*t85152*t85153*t85180*t85148*(5.0/3.0)+C_k* \
                   a_2*t85152*t85153*t85180*t85148*(1.0E1/3.0)-C_k*a_2*t85180*t85154*t85148*t85158*(1.0E1/3.0)+C_k*a_3* \
                   t85180*t85154*t85148*t85158*5.0-C_k*a_4*t85160*t85180*t85155*t85148*(2.0E1/3.0)+C_k*a_5*t85160*t85180* \
                   t85155*t85148*(2.5E1/3.0)-C_k*a_8*t85180*t85164*t85156*t85148*(4.0E1/3.0)+C_k*a_9*t85180*t85164*t85156* \
                   t85148*1.5E1+C_k*a_10*t85152*t85180*t85156*t85165*t85148*(5.0E1/3.0)-C_k*a_10*t85180*t85154*t85156* \
                   t85148*t85157*(5.0E1/3.0)+C_k*a_11*t85180*t85154*t85156*t85148*t85157*(5.5E1/3.0)-C_k*a_3*t85152*t85180* \
                   t85154*t85148*t85159*5.0+C_k*a_4*t85152*t85180*t85154*t85148*t85159*(2.0E1/3.0)-C_k*a_5*t85152*t85161* \
                   t85180*t85155*t85148*(2.5E1/3.0)+C_k*a_6*t85152*t85161*t85180*t85155*t85148*1.0E1-C_k*a_6*t85162*t85180* \
                   t85154*t85155*t85148*1.0E1+C_k*a_7*t85162*t85180*t85154*t85155*t85148*(3.5E1/3.0)-C_k*a_9*t85152*t85180* \
                   t85156*t85165*t85148*1.5E1-a_10*t85152*t85156*t85157*t85175*t85176*t85177*(1.0E3/3.0)+a_11*t85152* \
                   t85156*t85157*t85175*t85176*t85177*(5.5E2/3.0)+a_10*t85154*t85156*t85175*t85176*t85177*t85179*(5.5E2/ \
                   3.0)-a_11*t85154*t85156*t85175*t85176*t85177*t85179*(1.21E3/3.0)+a_3*t85160*t85152*t85154*t85175*t85176* \
                   t85177*2.0E1-a_4*t85160*t85152*t85154*t85175*t85176*t85177*(1.6E2/3.0)+a_5*t85160*t85152*t85154*t85175* \
                   t85176*t85177*(1.0E2/3.0)+a_5*t85152*t85162*t85155*t85175*t85176*t85177*5.0E1-a_6*t85152*t85162*t85155* \
                   t85175*t85176*t85177*1.2E2+a_6*t85154*t85163*t85155*t85175*t85176*t85177*7.0E1+a_7*t85152*t85162*t85155* \
                   t85175*t85176*t85177*7.0E1-a_7*t85154*t85163*t85155*t85175*t85176*t85177*(4.9E2/3.0)+a_8*t85154*t85163* \
                   t85155*t85175*t85176*t85177*(2.8E2/3.0)+a_9*t85152*t85156*t85157*t85175*t85176*t85177*1.5E2+a_11*1.0/ \
                   pow(t85151,1.3E1)*t85152*t85154*t85156*t85175*t85176*t85177*2.2E2-C_k*a_11*t85152*t85180*t85154*t85156* \
                   t85148*t85179*(5.5E1/3.0)-C_k*a_7*t85152*t85180*t85154*t85163*t85155*t85148*(3.5E1/3.0)+C_k*a_8*t85152* \
                   t85180*t85154*t85163*t85155*t85148*(4.0E1/3.0)+a_7*t85152*t85154*t85155*t85164*t85175*t85176*t85177* \
                   (2.8E2/3.0)-a_8*t85152*t85154*t85155*t85164*t85175*t85176*t85177*(6.4E2/3.0)+a_9*t85152*t85154*t85155* \
                   t85164*t85175*t85176*t85177*1.2E2)-kp*rho_a[index]*1.0/(t85172*t85172)*t85192*(gamma_aa[index]*mu_* \
                   1.0/(rho_a[index]*rho_a[index]*rho_a[index])*t85170*t85166*t85167*(1.0/2.0)+gamma_aa[index]*mu_*t85166* \
                   t85167*t85168*1.0/pow(t85169,5.0/3.0)*(1.0/3.0)))-t85251*t85290*(t85242+t85225*t85228*(t85241-c0p* \
                   t85210*t85208*2.0))+rho_a[index]*t85251*t85290*(-t85285+t85225*t85228*(t85285-(t85240*1.0/(t85234* \
                   t85234)*(b2f*c*t85275*(1.0/3.0)+b4f*t85276*t85197*(2.0/3.0)+b1f*c*t85275*t85277*(1.0/6.0)+b3f*c*t85275* \
                   t85195*(1.0/2.0)))/t85237+a1f*c*c0f*t85238*t85275*(2.0/3.0)-a1p*c*c0p*t85208*t85275*(2.0/3.0))+a1p* \
                   c*c0p*t85208*t85275*(2.0/3.0))+rho_a[index]*t85251*t85293*(ccaa1*gamma_aa[index]*gcaa*t85260*t85271* \
                   (8.0/3.0)+ccaa2*t85215*t85216*t85270*t85269*(1.6E1/3.0)+ccaa4*t85217*t85218*t85273*t85257*(3.2E1/3.0) \
                   -ccaa1*t85215*t85216*t85270*1.0/(t85259*t85259)*(8.0/3.0)-ccaa2*t85222*t85215*t85216*1.0/(t85268*t85268) \
                   *(gamma_aa[index]*gcaa*t85271*(1.6E1/3.0)+t85215*t85216*t85270*(1.6E1/3.0))-ccaa4*t85217*t85218*t85219* \
                   1.0/(t85256*t85256)*(gamma_aa[index]*gcaa*t85271*(3.2E1/3.0)+t85215*t85216*t85270*3.2E1+t85217*t85218* \
                   t85273*(3.2E1/3.0)+gamma_aa[index]*gcaa*t85215*t85216*t85272*3.2E1)+ccaa3*gamma_aa[index]*gcaa*t85215* \
                   t85216*t85272*t85265*8.0-ccaa3*gamma_aa[index]*gcaa*t85221*t85215*t85216*1.0/(t85264*t85264)*(gamma_aa[index]* \
                   gcaa*t85271*8.0+t85215*t85216*t85270*1.6E1+gamma_aa[index]*gcaa*t85215*t85216*t85272*8.0))+gamma_aa[index]* \
                   t85213*t85243*t85290*t85148*t85293*(1.0/8.0)-gamma_aa[index]*t85213*t85290*t85247*t85149*t85293*(1.0/ \
                   8.0);
            } else {
                v_rho_a_tau_a_[index] = 0.0;
            } 
        
            //V_tau_a_tau_a
            if (rho_a[index] > cutoff_) {
                double t85295 = 1.0/pow(rho_a[index],1.0/3.0);
                double t85296 = c*t85295;
                double t85297 = sqrt(t85296);
                double t85298 = pow(t85296,3.0/2.0);
                double t85299 = c*c;
                double t85300 = 1.0/pow(rho_a[index],2.0/3.0);
                double t85301 = 1.0/c0p;
                double t85302 = b1p*t85297;
                double t85303 = b3p*t85298;
                double t85304 = b4p*t85300*t85299;
                double t85305 = b2p*c*t85295;
                double t85306 = t85302+t85303+t85304+t85305;
                double t85307 = 1.0/t85306;
                double t85308 = t85301*t85307*(1.0/2.0);
                double t85309 = t85308+1.0;
                double t85310 = log(t85309);
                double t85311 = a1p*c*t85295;
                double t85312 = t85311+1.0;
                double t85313 = 1.0/tau_a[index];
                double t85314 = tau_a[index]*2.0;
                double t85315 = 1.0/rho_a[index];
                double t85319 = gamma_aa[index]*t85315*(1.0/4.0);
                double t85316 = t85314-t85319;
                double t85317 = tau_a[index]-1.0/1.0E20;
                double t85318 = 1.0/(tau_a[index]*tau_a[index]);
                double t85320 = gamma_aa[index]*gamma_aa[index];
                double t85321 = gcaa*gcaa;
                double t85322 = t85320*t85320;
                double t85323 = t85321*t85321;
                double t85324 = 1.0/pow(rho_a[index],3.2E1/3.0);
                double t85325 = 1.0/pow(rho_a[index],8.0/3.0);
                double t85326 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t85327 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t85328 = C_k*C_k;
                double t85329 = pow(rho_a[index],1.0E1/3.0);
                double t85330 = 1.0/(tau_a[index]*tau_a[index]*tau_a[index]*tau_a[index]);
                double t85331 = pow(rho_a[index],5.0/3.0);
                double t85332 = C_k*t85313*t85331;
                double t85333 = t85332+1.0;
                double t85334 = 1.0/(t85333*t85333);
                double t85335 = 1.0/(tau_a[index]*tau_a[index]*tau_a[index]);
                double t85336 = t85332-1.0;
                double t85337 = t85336*t85336;
                double t85338 = t85337*t85337;
                double t85339 = t85338*t85338;
                double t85340 = 1.0/pow(t85333,1.1E1);
                double t85341 = 1.0/pow(t85333,1.2E1);
                double t85342 = 1.0/(t85333*t85333*t85333*t85333);
                double t85343 = 1.0/(t85333*t85333*t85333*t85333*t85333);
                double t85344 = 1.0/(t85333*t85333*t85333*t85333*t85333*t85333);
                double t85345 = 1.0/(t85333*t85333*t85333*t85333*t85333*t85333*t85333);
                double t85346 = 1.0/(t85333*t85333*t85333*t85333*t85333*t85333*t85333*t85333);
                double t85347 = 1.0/(t85333*t85333*t85333*t85333*t85333*t85333*t85333*t85333*t85333);
                double t85348 = 1.0/pow(t85333,1.0E1);
                double t85349 = 1.0/(t85333*t85333*t85333);
                v_tau_a_tau_a_[index] = -rho_a[index]*(X-1.0)*(kp-kp/((gamma_aa[index]*1.0/(k*k)*mu_*1.0/(rho_a[index]* \
                   rho_a[index])*1.0/pow(rho_a[index]*2.0,2.0/3.0)*(1.0/4.0))/kp+1.0)+1.0)*(a_1*t85330*t85334*t85328* \
                   t85329*-2.0+a_2*t85330*t85334*t85328*t85329*2.0+(C_k*a_1*t85331*t85335*2.0)/t85333+a_1*t85330*t85336* \
                   t85328*t85329*t85349*2.0+a_10*t85330*t85328*t85329*t85339*t85348*9.0E1+a_2*t85330*t85342*t85328*t85337* \
                   t85329*6.0-a_2*t85330*t85336*t85328*t85329*t85349*8.0-a_3*t85330*t85342*t85328*t85337*t85329*1.8E1+ \
                   a_3*t85330*t85336*t85328*t85329*t85349*6.0+a_4*t85330*t85342*t85328*t85337*t85329*1.2E1+a_4*t85330* \
                   t85344*t85328*t85329*t85338*2.0E1-a_5*t85330*t85344*t85328*t85329*t85338*5.0E1+a_6*t85330*t85344*t85328* \
                   t85329*t85338*3.0E1+a_8*t85330*t85328*t85329*t85339*t85348*7.2E1-a_9*t85330*t85328*t85329*t85339*t85348* \
                   1.62E2-C_k*a_1*t85331*t85334*t85335*t85336*2.0+C_k*a_2*t85331*t85334*t85335*t85336*4.0-C_k*a_2*t85331* \
                   t85335*t85337*t85349*4.0+C_k*a_3*t85331*t85335*t85337*t85349*6.0-C_k*a_4*t85331*t85343*t85335*t85338* \
                   8.0+C_k*a_5*t85331*t85343*t85335*t85338*1.0E1-C_k*a_8*t85331*t85335*t85347*t85339*1.6E1+C_k*a_9*t85331* \
                   t85335*t85347*t85339*1.8E1-C_k*a_10*t85331*t85340*t85335*t85337*t85339*2.0E1+C_k*a_11*t85331*t85340* \
                   t85335*t85337*t85339*2.2E1+C_k*a_10*t85331*t85335*t85336*t85339*t85348*2.0E1-C_k*a_3*t85331*t85342* \
                   t85335*t85336*t85337*6.0+C_k*a_4*t85331*t85342*t85335*t85336*t85337*8.0-C_k*a_5*t85331*t85335*t85344* \
                   t85336*t85338*1.0E1+C_k*a_6*t85331*t85335*t85344*t85336*t85338*1.2E1-C_k*a_6*t85331*t85335*t85345* \
                   t85337*t85338*1.2E1+C_k*a_7*t85331*t85335*t85345*t85337*t85338*1.4E1-C_k*a_9*t85331*t85335*t85336* \
                   t85339*t85348*1.8E1-a_10*t85330*t85340*t85336*t85328*t85329*t85339*2.0E2+a_11*t85330*t85340*t85336* \
                   t85328*t85329*t85339*1.1E2+a_10*t85330*t85341*t85328*t85337*t85329*t85339*1.1E2-a_11*t85330*t85341* \
                   t85328*t85337*t85329*t85339*2.42E2+a_3*t85330*t85343*t85336*t85328*t85337*t85329*1.2E1-a_4*t85330* \
                   t85343*t85336*t85328*t85337*t85329*3.2E1+a_5*t85330*t85343*t85336*t85328*t85337*t85329*2.0E1+a_5*t85330* \
                   t85336*t85345*t85328*t85329*t85338*3.0E1-a_6*t85330*t85336*t85345*t85328*t85329*t85338*7.2E1+a_6*t85330* \
                   t85328*t85337*t85346*t85329*t85338*4.2E1+a_7*t85330*t85336*t85345*t85328*t85329*t85338*4.2E1-a_7*t85330* \
                   t85328*t85337*t85346*t85329*t85338*9.8E1+a_8*t85330*t85328*t85337*t85346*t85329*t85338*5.6E1+a_9*t85330* \
                   t85340*t85336*t85328*t85329*t85339*9.0E1+a_11*t85330*1.0/pow(t85333,1.3E1)*t85336*t85328*t85337*t85329* \
                   t85339*1.32E2-C_k*a_11*t85331*t85341*t85335*t85336*t85337*t85339*2.2E1-C_k*a_7*t85331*t85335*t85336* \
                   t85337*t85346*t85338*1.4E1+C_k*a_8*t85331*t85335*t85336*t85337*t85346*t85338*1.6E1+a_7*t85330*t85336* \
                   t85328*t85337*t85329*t85338*t85347*5.6E1-a_8*t85330*t85336*t85328*t85337*t85329*t85338*t85347*1.28E2+ \
                   a_9*t85330*t85336*t85328*t85337*t85329*t85338*t85347*7.2E1)-rho_a[index]*(((pow(2.0,1.0/3.0)*2.0-2.0) \
                   *(c0f*log((1.0/2.0)/(c0f*(b1f*t85297+b3f*t85298+b2f*c*t85295+b4f*t85300*t85299))+1.0)*(a1f*c*t85295+ \
                   1.0)*2.0-c0p*t85310*t85312*2.0))/(two_13*2.0-2.0)+c0p*t85310*t85312*2.0)*( 0.0 - ( (t85317 > 0.0)  \
                   ? 1.0*(t85318*2.0-t85316*t85335) : 0.0 ) + 0.0 )*(ccaa0+(ccaa2*t85320*t85321*t85327)/(gamma_aa[index]* \
                   gcaa*t85325*2.0+t85320*t85321*t85327+1.0)+(ccaa1*gamma_aa[index]*gcaa*t85325)/(gamma_aa[index]*gcaa* \
                   t85325+1.0)+(ccaa4*t85322*t85323*t85324)/(gamma_aa[index]*gcaa*t85325*4.0+t85320*t85321*t85327*6.0+ \
                   t85322*t85323*t85324+gamma_aa[index]*gcaa*t85320*t85321*t85326*4.0+1.0)+(ccaa3*gamma_aa[index]*gcaa* \
                   t85320*t85321*t85326)/(gamma_aa[index]*gcaa*t85325*3.0+t85320*t85321*t85327*3.0+gamma_aa[index]*gcaa* \
                   t85320*t85321*t85326+1.0));
            } else {
                v_tau_a_tau_a_[index] = 0.0;
            } 
       
            if (is_gga_) {
        
                //V_gamma_aa_tau_a
                if (rho_a[index] > cutoff_) {
                    double t85351 = 1.0/pow(rho_a[index],1.0/3.0);
                    double t85352 = c*t85351;
                    double t85353 = sqrt(t85352);
                    double t85354 = pow(t85352,3.0/2.0);
                    double t85355 = c*c;
                    double t85356 = 1.0/pow(rho_a[index],2.0/3.0);
                    double t85357 = 1.0/c0p;
                    double t85358 = b1p*t85353;
                    double t85359 = b3p*t85354;
                    double t85360 = b4p*t85355*t85356;
                    double t85361 = b2p*c*t85351;
                    double t85362 = t85360+t85361+t85358+t85359;
                    double t85363 = 1.0/t85362;
                    double t85364 = t85363*t85357*(1.0/2.0);
                    double t85365 = t85364+1.0;
                    double t85366 = log(t85365);
                    double t85367 = a1p*c*t85351;
                    double t85368 = t85367+1.0;
                    double t85369 = tau_a[index]-1.0/1.0E20;
                    double t85370 = 1.0/tau_a[index];
                    double t85371 = tau_a[index]*2.0;
                    double t85372 = 1.0/rho_a[index];
                    double t85373 = t85371-gamma_aa[index]*t85372*(1.0/4.0);
                    double t85374 = 1.0/pow(rho_a[index],8.0/3.0);
                    double t85375 = gamma_aa[index]*gamma_aa[index];
                    double t85376 = gcaa*gcaa;
                    double t85377 = t85376*t85376;
                    double t85378 = 1.0/pow(rho_a[index],3.2E1/3.0);
                    double t85379 = 1.0/pow(rho_a[index],1.6E1/3.0);
                    double t85380 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                       rho_a[index]*rho_a[index]);
                    double t85381 = gamma_aa[index]*gcaa*t85374;
                    double t85382 = t85381+1.0;
                    double t85383 = gamma_aa[index]*gcaa*t85374*3.0;
                    double t85384 = gamma_aa[index]*gcaa*t85380*t85375*t85376;
                    double t85385 = t85375*t85376*t85379*3.0;
                    double t85386 = t85383+t85384+t85385+1.0;
                    double t85387 = t85375*t85375;
                    double t85388 = gamma_aa[index]*gcaa*t85374*4.0;
                    double t85389 = gamma_aa[index]*gcaa*t85380*t85375*t85376*4.0;
                    double t85390 = t85375*t85376*t85379*6.0;
                    double t85391 = t85377*t85378*t85387;
                    double t85392 = t85390+t85391+t85388+t85389+1.0;
                    double t85393 = gamma_aa[index]*gcaa*t85374*2.0;
                    double t85394 = t85375*t85376*t85379;
                    double t85395 = t85393+t85394+1.0;
                    double t85396 = pow(2.0,1.0/3.0);
                    double t85397 = t85396*2.0;
                    double t85398 = t85397-2.0;
                    double t85399 = two_13*2.0;
                    double t85400 = t85399-2.0;
                    double t85401 = 1.0/t85400;
                    double t85402 = 1.0/c0f;
                    double t85403 = b1f*t85353;
                    double t85404 = b3f*t85354;
                    double t85405 = b4f*t85355*t85356;
                    double t85406 = b2f*c*t85351;
                    double t85407 = t85403+t85404+t85405+t85406;
                    double t85408 = 1.0/t85407;
                    double t85409 = t85402*t85408*(1.0/2.0);
                    double t85410 = t85409+1.0;
                    double t85411 = log(t85410);
                    double t85412 = a1f*c*t85351;
                    double t85413 = t85412+1.0;
                    double t85414 = c0f*t85411*t85413*2.0;
                    double t85415 = c0p*t85366*t85368*2.0;
                    double t85416 = 0.0 ;
                    double t85417 = 1.0/(tau_a[index]*tau_a[index]);
                    double t85418 = ( (t85369 > 0.0) ?  1.0 : 0.0 ) ;
                    double t85419 = 1.0/t85392;
                    double t85420 = 1.0/t85382;
                    double t85421 = 1.0/t85386;
                    double t85422 = 1.0/t85395;
                    double t85423 = 1.0/(k*k);
                    double t85424 = rho_a[index]*2.0;
                    double t85425 = 1.0/pow(t85424,2.0/3.0);
                    double t85426 = pow(rho_a[index],5.0/3.0);
                    double t85427 = C_k*t85370*t85426;
                    double t85428 = t85427+1.0;
                    double t85429 = t85427-1.0;
                    double t85430 = 1.0/(t85428*t85428);
                    double t85431 = t85429*t85429;
                    double t85432 = t85431*t85431;
                    double t85433 = t85432*t85432;
                    double t85434 = 1.0/pow(t85428,1.1E1);
                    double t85435 = 1.0/(t85428*t85428*t85428);
                    double t85436 = 1.0/(t85428*t85428*t85428*t85428);
                    double t85437 = 1.0/(t85428*t85428*t85428*t85428*t85428);
                    double t85438 = 1.0/(t85428*t85428*t85428*t85428*t85428*t85428);
                    double t85439 = 1.0/(t85428*t85428*t85428*t85428*t85428*t85428*t85428);
                    double t85440 = 1.0/(t85428*t85428*t85428*t85428*t85428*t85428*t85428*t85428);
                    double t85441 = 1.0/(t85428*t85428*t85428*t85428*t85428*t85428*t85428*t85428*t85428);
                    double t85442 = 1.0/pow(t85428,1.0E1);
                    v_gamma_aa_tau_a_[index] = rho_a[index]*(t85415+t85401*t85398*(t85414-t85415))*(t85370*t85416*t85372* \
                       (1.0/8.0)-t85372*t85417*t85418*(1.0/8.0))*(ccaa0+ccaa1*gamma_aa[index]*gcaa*t85420*t85374+ccaa2*t85422* \
                       t85375*t85376*t85379+ccaa4*t85419*t85377*t85378*t85387+ccaa3*gamma_aa[index]*gcaa*t85421*t85380*t85375* \
                       t85376)-rho_a[index]*(t85415+t85401*t85398*(t85414-c0p*t85366*t85368*2.0))*(t85416*(t85370*t85373* \
                       (1.0/2.0)-1.0)+t85418*(t85370-t85417*t85373*(1.0/2.0)))*(ccaa1*gcaa*t85420*t85374+ccaa2*gamma_aa[index]* \
                       t85422*t85376*t85379*2.0-ccaa1*gamma_aa[index]*1.0/(t85382*t85382)*t85376*t85379-ccaa2*t85375*t85376* \
                       1.0/(t85395*t85395)*t85379*(gcaa*t85374*2.0+gamma_aa[index]*t85376*t85379*2.0)-ccaa4*1.0/(t85392*t85392) \
                       *t85377*t85378*t85387*(gcaa*t85374*4.0+gamma_aa[index]*t85376*t85379*1.2E1+gamma_aa[index]*t85375* \
                       t85377*t85378*4.0+gcaa*t85380*t85375*t85376*1.2E1)+ccaa4*gamma_aa[index]*t85419*t85375*t85377*t85378* \
                       4.0+ccaa3*gcaa*t85421*t85380*t85375*t85376*3.0-ccaa3*gamma_aa[index]*gcaa*t85380*t85375*t85376*1.0/ \
                       (t85386*t85386)*(gcaa*t85374*3.0+gamma_aa[index]*t85376*t85379*6.0+gcaa*t85380*t85375*t85376*3.0)) \
                       +mu_*t85423*t85425*t85372*1.0/pow((gamma_aa[index]*mu_*1.0/(rho_a[index]*rho_a[index])*t85423*t85425* \
                       (1.0/4.0))/kp+1.0,2.0)*(X-1.0)*((C_k*a_1*t85417*t85426)/t85428-C_k*a_1*t85430*t85417*t85426*t85429- \
                       C_k*a_2*t85431*t85417*t85426*t85435*2.0+C_k*a_2*t85430*t85417*t85426*t85429*2.0+C_k*a_3*t85431*t85417* \
                       t85426*t85435*3.0-C_k*a_4*t85432*t85417*t85426*t85437*4.0+C_k*a_5*t85432*t85417*t85426*t85437*5.0- \
                       C_k*a_8*t85441*t85433*t85417*t85426*8.0+C_k*a_9*t85441*t85433*t85417*t85426*9.0-C_k*a_10*t85431*t85433* \
                       t85434*t85417*t85426*1.0E1+C_k*a_11*t85431*t85433*t85434*t85417*t85426*1.1E1+C_k*a_10*t85433*t85442* \
                       t85417*t85426*t85429*1.0E1-C_k*a_3*t85431*t85417*t85426*t85436*t85429*3.0+C_k*a_4*t85431*t85417*t85426* \
                       t85436*t85429*4.0-C_k*a_5*t85432*t85417*t85426*t85429*t85438*5.0-C_k*a_6*t85431*t85432*t85417*t85426* \
                       t85439*6.0+C_k*a_6*t85432*t85417*t85426*t85429*t85438*6.0+C_k*a_7*t85431*t85432*t85417*t85426*t85439* \
                       7.0-C_k*a_9*t85433*t85442*t85417*t85426*t85429*9.0-C_k*a_11*t85431*t85433*t85417*t85426*1.0/pow(t85428,1.2E1) \
                       *t85429*1.1E1-C_k*a_7*t85431*t85440*t85432*t85417*t85426*t85429*7.0+C_k*a_8*t85431*t85440*t85432*t85417* \
                       t85426*t85429*8.0)*(1.0/4.0);
                } else {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } 
       
            }
        }
    }
}
void M05_2X_Functional::computeUKSFunctional(boost::shared_ptr<Properties> prop)
{
    int ntrue = prop->getTrueSize();

    const double* rho_a;
    const double* rho_b;
    const double* gamma_aa;
    const double* gamma_ab;
    const double* gamma_bb;
    const double* tau_a;
    const double* tau_b;

    rho_a = prop->getDensityA();
    rho_b = prop->getDensityB();
    if (is_gga_) {
        gamma_aa = prop->getDensityGradientSquaredAA();
        gamma_ab = prop->getDensityGradientSquaredAB();
        gamma_bb = prop->getDensityGradientSquaredBB();
    }
    if (is_meta_) {
        tau_a = prop->getKEDensityA();
        tau_b = prop->getKEDensityB();
    }

    double X = params_[0].second;
    double C_k = params_[1].second;
    double k = params_[2].second;
    double e = params_[3].second;
    double kp = params_[4].second;
    double mu_ = params_[5].second;
    double a_1 = params_[6].second;
    double a_2 = params_[7].second;
    double a_3 = params_[8].second;
    double a_4 = params_[9].second;
    double a_5 = params_[10].second;
    double a_6 = params_[11].second;
    double a_7 = params_[12].second;
    double a_8 = params_[13].second;
    double a_9 = params_[14].second;
    double a_10 = params_[15].second;
    double a_11 = params_[16].second;
    double two_13 = params_[17].second;
    double d2fz0 = params_[18].second;
    double c = params_[19].second;
    double Aa = params_[20].second;
    double a1a = params_[21].second;
    double b1a = params_[22].second;
    double b2a = params_[23].second;
    double b3a = params_[24].second;
    double b4a = params_[25].second;
    double c0p = params_[26].second;
    double a1p = params_[27].second;
    double b1p = params_[28].second;
    double b2p = params_[29].second;
    double b3p = params_[30].second;
    double b4p = params_[31].second;
    double c0f = params_[32].second;
    double a1f = params_[33].second;
    double b1f = params_[34].second;
    double b2f = params_[35].second;
    double b3f = params_[36].second;
    double b4f = params_[37].second;
    double gcab = params_[38].second;
    double gcaa = params_[39].second;
    double ccab0 = params_[40].second;
    double ccab1 = params_[41].second;
    double ccab2 = params_[42].second;
    double ccab3 = params_[43].second;
    double ccab4 = params_[44].second;
    double ccaa0 = params_[45].second;
    double ccaa1 = params_[46].second;
    double ccaa2 = params_[47].second;
    double ccaa3 = params_[48].second;
    double ccaa4 = params_[49].second;
    
    //Functional
    for (int index = 0; index < ntrue; index++) {

        //Functional Value
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t77354 = pow(rho_a[index],5.0/3.0);
            double t77355 = 1.0/tau_a[index];
            double t77356 = C_k*t77354*t77355;
            double t77357 = t77356-1.0;
            double t77358 = t77357*t77357;
            double t77359 = t77358*t77358;
            double t77360 = t77359*t77359;
            double t77361 = t77356+1.0;
            double t77362 = 1.0/(k*k);
            double t77363 = 1.0/kp;
            double t77364 = pow(rho_b[index],5.0/3.0);
            double t77365 = 1.0/tau_b[index];
            double t77366 = C_k*t77364*t77365;
            double t77367 = t77366-1.0;
            double t77368 = t77367*t77367;
            double t77369 = t77368*t77368;
            double t77370 = t77369*t77369;
            double t77371 = t77366+1.0;
            double t77372 = 1.0/pow(rho_a[index],1.0/3.0);
            double t77373 = c*t77372;
            double t77374 = sqrt(t77373);
            double t77375 = pow(t77373,3.0/2.0);
            double t77376 = c*c;
            double t77377 = 1.0/pow(rho_a[index],2.0/3.0);
            double t77378 = 1.0/c0p;
            double t77379 = b1p*t77374;
            double t77380 = b3p*t77375;
            double t77381 = b4p*t77376*t77377;
            double t77382 = b2p*c*t77372;
            double t77383 = t77380+t77381+t77382+t77379;
            double t77384 = 1.0/t77383;
            double t77385 = t77384*t77378*(1.0/2.0);
            double t77386 = t77385+1.0;
            double t77387 = log(t77386);
            double t77388 = a1p*c*t77372;
            double t77389 = t77388+1.0;
            double t77390 = pow(2.0,1.0/3.0);
            double t77391 = t77390*2.0;
            double t77392 = t77391-2.0;
            double t77393 = two_13*2.0;
            double t77394 = t77393-2.0;
            double t77395 = 1.0/t77394;
            double t77396 = 1.0/c0f;
            double t77397 = 1.0/pow(rho_b[index],1.0/3.0);
            double t77398 = c*t77397;
            double t77399 = sqrt(t77398);
            double t77400 = pow(t77398,3.0/2.0);
            double t77401 = 1.0/pow(rho_b[index],2.0/3.0);
            double t77402 = b1p*t77399;
            double t77403 = b3p*t77400;
            double t77404 = b4p*t77401*t77376;
            double t77405 = b2p*c*t77397;
            double t77406 = t77402+t77403+t77404+t77405;
            double t77407 = 1.0/t77406;
            double t77408 = t77407*t77378*(1.0/2.0);
            double t77409 = t77408+1.0;
            double t77410 = log(t77409);
            double t77411 = a1p*c*t77397;
            double t77412 = t77411+1.0;
            double t77413 = c0p*t77410*t77412*2.0;
            double t77414 = rho_a[index]+rho_b[index];
            double t77415 = 1.0/pow(t77414,1.0/3.0);
            double t77416 = c*t77415;
            double t77417 = sqrt(t77416);
            double t77418 = pow(t77416,3.0/2.0);
            double t77419 = 1.0/pow(t77414,2.0/3.0);
            double t77420 = b1p*t77417;
            double t77421 = b3p*t77418;
            double t77422 = b4p*t77419*t77376;
            double t77423 = b2p*c*t77415;
            double t77424 = t77420+t77421+t77422+t77423;
            double t77425 = 1.0/t77424;
            double t77426 = t77425*t77378*(1.0/2.0);
            double t77427 = t77426+1.0;
            double t77428 = log(t77427);
            double t77429 = a1p*c*t77415;
            double t77430 = t77429+1.0;
            double t77431 = c0p*t77430*t77428*2.0;
            double t77432 = rho_a[index]-rho_b[index];
            double t77433 = t77432*t77432;
            double t77434 = 1.0/t77414;
            double t77435 = t77432*t77434;
            double t77436 = 1.0/(t77414*t77414*t77414*t77414);
            double t77437 = t77433*t77433;
            double t77438 = t77435+1.0;
            double t77439 = pow(t77438,4.0/3.0);
            double t77440 = -t77435+1.0;
            double t77441 = pow(t77440,4.0/3.0);
            double t77442 = t77441+t77439-2.0;
            double t77445 = 1.0/pow(rho_a[index],8.0/3.0);
            double t77446 = gamma_aa[index]*t77445*(1.0/2.0);
            double t77447 = 1.0/pow(rho_b[index],8.0/3.0);
            double t77448 = gamma_bb[index]*t77447*(1.0/2.0);
            double t77443 = t77446+t77448;
            double t77444 = gcab*gcab;
            double t77449 = t77443*t77443;
            double t77450 = t77444*t77444;
            double t77451 = t77449*t77449;
            double t77452 = c0p*t77387*t77389*2.0;
            double t77453 = b1f*t77374;
            double t77454 = b3f*t77375;
            double t77455 = b4f*t77376*t77377;
            double t77456 = b2f*c*t77372;
            double t77457 = t77453+t77454+t77455+t77456;
            double t77458 = 1.0/t77457;
            double t77459 = t77458*t77396*(1.0/2.0);
            double t77460 = t77459+1.0;
            double t77461 = log(t77460);
            double t77462 = a1f*c*t77372;
            double t77463 = t77462+1.0;
            double t77464 = t77452-c0f*t77461*t77463*2.0;
            double t77465 = t77452-t77392*t77464*t77395;
            double t77466 = gamma_aa[index]*gamma_aa[index];
            double t77467 = gcaa*gcaa;
            double t77468 = t77466*t77466;
            double t77469 = t77467*t77467;
            double t77470 = 1.0/pow(rho_a[index],3.2E1/3.0);
            double t77471 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]);
            double t77472 = 1.0/pow(rho_a[index],1.6E1/3.0);
            double t77473 = b1f*t77399;
            double t77474 = b3f*t77400;
            double t77475 = b4f*t77401*t77376;
            double t77476 = b2f*c*t77397;
            double t77477 = t77473+t77474+t77475+t77476;
            double t77478 = 1.0/t77477;
            double t77479 = t77396*t77478*(1.0/2.0);
            double t77480 = t77479+1.0;
            double t77481 = log(t77480);
            double t77482 = a1f*c*t77397;
            double t77483 = t77482+1.0;
            double t77484 = t77413-c0f*t77481*t77483*2.0;
            double t77485 = t77413-t77392*t77484*t77395;
            double t77486 = gamma_bb[index]*gamma_bb[index];
            double t77487 = t77486*t77486;
            double t77488 = 1.0/pow(rho_b[index],3.2E1/3.0);
            double t77489 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
               rho_b[index]*rho_b[index]);
            double t77490 = 1.0/pow(rho_b[index],1.6E1/3.0);
            functional_[index] = (rho_a[index]*t77465+rho_b[index]*t77485-t77414*(t77431-t77442*t77436*t77437* \
               t77395*(t77431-c0f*log((t77396*(1.0/2.0))/(b1f*t77417+b3f*t77418+b2f*c*t77415+b4f*t77419*t77376)+1.0) \
               *(a1f*c*t77415+1.0)*2.0)+(Aa*t77442*t77395*log((1.0/2.0)/(Aa*(b1a*t77417+b3a*t77418+b2a*c*t77415+b4a* \
               t77419*t77376))+1.0)*(t77436*t77437-1.0)*(a1a*c*t77415+1.0)*2.0)/d2fz0))*(ccab0+(ccab4*t77450*t77451) \
               /(gcab*t77443*4.0+t77450*t77451+t77444*t77449*6.0+gcab*t77443*t77444*t77449*4.0+1.0)+(ccab1*gcab*t77443) \
               /(gcab*t77443+1.0)+(ccab2*t77444*t77449)/(gcab*t77443*2.0+t77444*t77449+1.0)+(ccab3*gcab*t77443*t77444* \
               t77449)/(gcab*t77443*3.0+t77444*t77449*3.0+gcab*t77443*t77444*t77449+1.0))-(rho_a[index]*(kp-kp/(gamma_aa[index]* \
               mu_*1.0/(rho_a[index]*rho_a[index])*t77362*t77363*1.0/pow(rho_a[index]*2.0,2.0/3.0)*(1.0/4.0)+1.0) \
               +1.0)*((a_1*t77357)/t77361+a_2*1.0/(t77361*t77361)*t77358+a_4*1.0/(t77361*t77361*t77361*t77361)*t77359+ \
               a_8*t77360*1.0/(t77361*t77361*t77361*t77361*t77361*t77361*t77361*t77361)+a_10*t77360*1.0/pow(t77361,1.0E1) \
               *t77358+a_3*1.0/(t77361*t77361*t77361)*t77357*t77358+a_5*1.0/(t77361*t77361*t77361*t77361*t77361)* \
               t77357*t77359+a_6*1.0/(t77361*t77361*t77361*t77361*t77361*t77361)*t77358*t77359+a_9*t77360*1.0/(t77361* \
               t77361*t77361*t77361*t77361*t77361*t77361*t77361*t77361)*t77357+a_11*t77360*1.0/pow(t77361,1.1E1)* \
               t77357*t77358+a_7*1.0/(t77361*t77361*t77361*t77361*t77361*t77361*t77361)*t77357*t77358*t77359+1.0) \
               +rho_b[index]*(kp-kp/(gamma_bb[index]*mu_*1.0/(rho_b[index]*rho_b[index])*t77362*t77363*1.0/pow(rho_b[index]* \
               2.0,2.0/3.0)*(1.0/4.0)+1.0)+1.0)*((a_1*t77367)/t77371+a_2*1.0/(t77371*t77371)*t77368+a_4*1.0/(t77371* \
               t77371*t77371*t77371)*t77369+a_8*t77370*1.0/(t77371*t77371*t77371*t77371*t77371*t77371*t77371*t77371) \
               +a_10*t77370*1.0/pow(t77371,1.0E1)*t77368+a_3*1.0/(t77371*t77371*t77371)*t77367*t77368+a_5*1.0/(t77371* \
               t77371*t77371*t77371*t77371)*t77367*t77369+a_6*1.0/(t77371*t77371*t77371*t77371*t77371*t77371)*t77368* \
               t77369+a_9*t77370*1.0/(t77371*t77371*t77371*t77371*t77371*t77371*t77371*t77371*t77371)*t77367+a_11* \
               t77370*1.0/pow(t77371,1.1E1)*t77367*t77368+a_7*1.0/(t77371*t77371*t77371*t77371*t77371*t77371*t77371) \
               *t77367*t77368*t77369+1.0))*(X-1.0)-rho_a[index]*t77465*( ( (tau_a[index]-1.0/1.0E20 > 0.0) ? 1.0* \
               (t77355*(tau_a[index]*2.0-(gamma_aa[index]*(1.0/4.0))/rho_a[index])*(1.0/2.0)-1.0) : 0.0 ) +1.0)*(ccaa0+ \
               (ccaa2*t77472*t77466*t77467)/(gamma_aa[index]*gcaa*t77445*2.0+t77472*t77466*t77467+1.0)+(ccaa1*gamma_aa[index]* \
               gcaa*t77445)/(gamma_aa[index]*gcaa*t77445+1.0)+(ccaa4*t77470*t77468*t77469)/(gamma_aa[index]*gcaa* \
               t77445*4.0+t77472*t77466*t77467*6.0+t77470*t77468*t77469+gamma_aa[index]*gcaa*t77471*t77466*t77467* \
               4.0+1.0)+(ccaa3*gamma_aa[index]*gcaa*t77471*t77466*t77467)/(gamma_aa[index]*gcaa*t77445*3.0+t77472* \
               t77466*t77467*3.0+gamma_aa[index]*gcaa*t77471*t77466*t77467+1.0))-rho_b[index]*t77485*( ( (tau_b[index]- \
               1.0/1.0E20 > 0.0) ? 1.0*(t77365*(tau_b[index]*2.0-(gamma_bb[index]*(1.0/4.0))/rho_b[index])*(1.0/2.0) \
               -1.0) : 0.0 ) +1.0)*(ccaa0+(ccaa2*t77490*t77467*t77486)/(gamma_bb[index]*gcaa*t77447*2.0+t77490*t77467* \
               t77486+1.0)+(ccaa1*gamma_bb[index]*gcaa*t77447)/(gamma_bb[index]*gcaa*t77447+1.0)+(ccaa4*t77469*t77487* \
               t77488)/(gamma_bb[index]*gcaa*t77447*4.0+t77490*t77467*t77486*6.0+t77469*t77487*t77488+gamma_bb[index]* \
               gcaa*t77467*t77486*t77489*4.0+1.0)+(ccaa3*gamma_bb[index]*gcaa*t77467*t77486*t77489)/(gamma_bb[index]* \
               gcaa*t77447*3.0+t77490*t77467*t77486*3.0+gamma_bb[index]*gcaa*t77467*t77486*t77489+1.0));
        } else if (rho_a[index] > cutoff_) {
            double t82860 = pow(rho_a[index],5.0/3.0);
            double t82861 = 1.0/tau_a[index];
            double t82862 = C_k*t82860*t82861;
            double t82863 = t82862-1.0;
            double t82864 = t82863*t82863;
            double t82865 = t82864*t82864;
            double t82866 = t82865*t82865;
            double t82867 = t82862+1.0;
            double t82868 = 1.0/pow(rho_a[index],1.0/3.0);
            double t82869 = c*t82868;
            double t82870 = sqrt(t82869);
            double t82871 = pow(t82869,3.0/2.0);
            double t82872 = c*c;
            double t82873 = 1.0/pow(rho_a[index],2.0/3.0);
            double t82874 = 1.0/c0p;
            double t82875 = b1p*t82870;
            double t82876 = b3p*t82871;
            double t82877 = b4p*t82872*t82873;
            double t82878 = b2p*c*t82868;
            double t82879 = t82875+t82876+t82877+t82878;
            double t82880 = 1.0/t82879;
            double t82881 = t82880*t82874*(1.0/2.0);
            double t82882 = t82881+1.0;
            double t82883 = log(t82882);
            double t82884 = a1p*c*t82868;
            double t82885 = t82884+1.0;
            double t82886 = gamma_aa[index]*gamma_aa[index];
            double t82887 = gcaa*gcaa;
            double t82888 = t82886*t82886;
            double t82889 = t82887*t82887;
            double t82890 = 1.0/pow(rho_a[index],3.2E1/3.0);
            double t82891 = 1.0/pow(rho_a[index],8.0/3.0);
            double t82892 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]);
            double t82893 = 1.0/pow(rho_a[index],1.6E1/3.0);
            functional_[index] = -rho_a[index]*(X-1.0)*(kp-kp/((gamma_aa[index]*1.0/(k*k)*mu_*1.0/(rho_a[index]* \
               rho_a[index])*1.0/pow(rho_a[index]*2.0,2.0/3.0)*(1.0/4.0))/kp+1.0)+1.0)*((a_1*t82863)/t82867+a_2*t82864* \
               1.0/(t82867*t82867)+a_4*t82865*1.0/(t82867*t82867*t82867*t82867)+a_8*t82866*1.0/(t82867*t82867*t82867* \
               t82867*t82867*t82867*t82867*t82867)+a_10*t82864*t82866*1.0/pow(t82867,1.0E1)+a_3*t82863*t82864*1.0/ \
               (t82867*t82867*t82867)+a_5*t82863*t82865*1.0/(t82867*t82867*t82867*t82867*t82867)+a_6*t82864*t82865* \
               1.0/(t82867*t82867*t82867*t82867*t82867*t82867)+a_9*t82863*t82866*1.0/(t82867*t82867*t82867*t82867* \
               t82867*t82867*t82867*t82867*t82867)+a_11*t82863*t82864*t82866*1.0/pow(t82867,1.1E1)+a_7*t82863*t82864* \
               t82865*1.0/(t82867*t82867*t82867*t82867*t82867*t82867*t82867)+1.0)-rho_a[index]*(((pow(2.0,1.0/3.0) \
               *2.0-2.0)*(c0f*log((1.0/2.0)/(c0f*(b1f*t82870+b3f*t82871+b2f*c*t82868+b4f*t82872*t82873))+1.0)*(a1f* \
               c*t82868+1.0)*2.0-c0p*t82883*t82885*2.0))/(two_13*2.0-2.0)+c0p*t82883*t82885*2.0)*( ( (tau_a[index]- \
               1.0/1.0E20 > 0.0) ? 1.0*(t82861*(tau_a[index]*2.0-(gamma_aa[index]*(1.0/4.0))/rho_a[index])*(1.0/2.0) \
               -1.0) : 0.0 ) +1.0)*(ccaa0+(ccaa2*t82893*t82886*t82887)/(gamma_aa[index]*gcaa*t82891*2.0+t82893*t82886* \
               t82887+1.0)+(ccaa1*gamma_aa[index]*gcaa*t82891)/(gamma_aa[index]*gcaa*t82891+1.0)+(ccaa4*t82890*t82888* \
               t82889)/(gamma_aa[index]*gcaa*t82891*4.0+t82893*t82886*t82887*6.0+t82890*t82888*t82889+gamma_aa[index]* \
               gcaa*t82892*t82886*t82887*4.0+1.0)+(ccaa3*gamma_aa[index]*gcaa*t82892*t82886*t82887)/(gamma_aa[index]* \
               gcaa*t82891*3.0+t82893*t82886*t82887*3.0+gamma_aa[index]*gcaa*t82892*t82886*t82887+1.0));
        } else if (rho_b[index] > cutoff_) {
            double t81733 = pow(rho_b[index],5.0/3.0);
            double t81734 = 1.0/tau_b[index];
            double t81735 = C_k*t81733*t81734;
            double t81736 = t81735-1.0;
            double t81737 = t81736*t81736;
            double t81738 = t81737*t81737;
            double t81739 = t81738*t81738;
            double t81740 = t81735+1.0;
            double t81741 = 1.0/pow(rho_b[index],1.0/3.0);
            double t81742 = c*t81741;
            double t81743 = sqrt(t81742);
            double t81744 = pow(t81742,3.0/2.0);
            double t81745 = c*c;
            double t81746 = 1.0/pow(rho_b[index],2.0/3.0);
            double t81747 = 1.0/c0p;
            double t81748 = b1p*t81743;
            double t81749 = b3p*t81744;
            double t81750 = b4p*t81745*t81746;
            double t81751 = b2p*c*t81741;
            double t81752 = t81750+t81751+t81748+t81749;
            double t81753 = 1.0/t81752;
            double t81754 = t81753*t81747*(1.0/2.0);
            double t81755 = t81754+1.0;
            double t81756 = log(t81755);
            double t81757 = a1p*c*t81741;
            double t81758 = t81757+1.0;
            double t81759 = gamma_bb[index]*gamma_bb[index];
            double t81760 = gcaa*gcaa;
            double t81761 = t81759*t81759;
            double t81762 = t81760*t81760;
            double t81763 = 1.0/pow(rho_b[index],3.2E1/3.0);
            double t81764 = 1.0/pow(rho_b[index],8.0/3.0);
            double t81765 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
               rho_b[index]*rho_b[index]);
            double t81766 = 1.0/pow(rho_b[index],1.6E1/3.0);
            functional_[index] = -rho_b[index]*(X-1.0)*(kp-kp/((gamma_bb[index]*1.0/(k*k)*mu_*1.0/(rho_b[index]* \
               rho_b[index])*1.0/pow(rho_b[index]*2.0,2.0/3.0)*(1.0/4.0))/kp+1.0)+1.0)*((a_1*t81736)/t81740+a_2*1.0/ \
               (t81740*t81740)*t81737+a_4*1.0/(t81740*t81740*t81740*t81740)*t81738+a_8*1.0/(t81740*t81740*t81740* \
               t81740*t81740*t81740*t81740*t81740)*t81739+a_10*1.0/pow(t81740,1.0E1)*t81737*t81739+a_3*1.0/(t81740* \
               t81740*t81740)*t81736*t81737+a_5*1.0/(t81740*t81740*t81740*t81740*t81740)*t81736*t81738+a_6*1.0/(t81740* \
               t81740*t81740*t81740*t81740*t81740)*t81737*t81738+a_9*1.0/(t81740*t81740*t81740*t81740*t81740*t81740* \
               t81740*t81740*t81740)*t81736*t81739+a_11*1.0/pow(t81740,1.1E1)*t81736*t81737*t81739+a_7*1.0/(t81740* \
               t81740*t81740*t81740*t81740*t81740*t81740)*t81736*t81737*t81738+1.0)-rho_b[index]*(((pow(2.0,1.0/3.0) \
               *2.0-2.0)*(c0f*log((1.0/2.0)/(c0f*(b1f*t81743+b3f*t81744+b2f*c*t81741+b4f*t81745*t81746))+1.0)*(a1f* \
               c*t81741+1.0)*2.0-c0p*t81756*t81758*2.0))/(two_13*2.0-2.0)+c0p*t81756*t81758*2.0)*( ( (tau_b[index]- \
               1.0/1.0E20 > 0.0) ? 1.0*(t81734*(tau_b[index]*2.0-(gamma_bb[index]*(1.0/4.0))/rho_b[index])*(1.0/2.0) \
               -1.0) : 0.0 ) +1.0)*(ccaa0+(ccaa2*t81760*t81766*t81759)/(gamma_bb[index]*gcaa*t81764*2.0+t81760*t81766* \
               t81759+1.0)+(ccaa1*gamma_bb[index]*gcaa*t81764)/(gamma_bb[index]*gcaa*t81764+1.0)+(ccaa4*t81761*t81762* \
               t81763)/(gamma_bb[index]*gcaa*t81764*4.0+t81761*t81762*t81763+t81760*t81766*t81759*6.0+gamma_bb[index]* \
               gcaa*t81760*t81765*t81759*4.0+1.0)+(ccaa3*gamma_bb[index]*gcaa*t81760*t81765*t81759)/(gamma_bb[index]* \
               gcaa*t81764*3.0+t81760*t81766*t81759*3.0+gamma_bb[index]*gcaa*t81760*t81765*t81759+1.0));
        } else {
            functional_[index] = 0.0;
        } 
   
    }
    //First Partials
    for (int index = 0; index < ntrue && deriv_ >= 1; index++) {

        //V_rho_a
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t77492 = 1.0/pow(rho_a[index],1.0/3.0);
            double t77493 = c*t77492;
            double t77494 = sqrt(t77493);
            double t77495 = pow(t77493,3.0/2.0);
            double t77496 = c*c;
            double t77497 = 1.0/pow(rho_a[index],2.0/3.0);
            double t77498 = 1.0/c0p;
            double t77499 = b1p*t77494;
            double t77500 = b3p*t77495;
            double t77501 = b4p*t77496*t77497;
            double t77502 = b2p*c*t77492;
            double t77503 = t77500+t77501+t77502+t77499;
            double t77504 = 1.0/t77503;
            double t77505 = t77504*t77498*(1.0/2.0);
            double t77506 = t77505+1.0;
            double t77507 = log(t77506);
            double t77508 = a1p*c*t77492;
            double t77509 = t77508+1.0;
            double t77510 = pow(2.0,1.0/3.0);
            double t77511 = t77510*2.0;
            double t77512 = t77511-2.0;
            double t77513 = two_13*2.0;
            double t77514 = t77513-2.0;
            double t77515 = 1.0/t77514;
            double t77516 = 1.0/c0f;
            double t77517 = 1.0/pow(rho_b[index],1.0/3.0);
            double t77518 = c*t77517;
            double t77519 = sqrt(t77518);
            double t77520 = pow(t77518,3.0/2.0);
            double t77521 = 1.0/pow(rho_b[index],2.0/3.0);
            double t77522 = b1p*t77519;
            double t77523 = b3p*t77520;
            double t77524 = b4p*t77521*t77496;
            double t77525 = b2p*c*t77517;
            double t77526 = t77522+t77523+t77524+t77525;
            double t77527 = 1.0/t77526;
            double t77528 = t77527*t77498*(1.0/2.0);
            double t77529 = t77528+1.0;
            double t77530 = log(t77529);
            double t77531 = a1p*c*t77517;
            double t77532 = t77531+1.0;
            double t77533 = c0p*t77530*t77532*2.0;
            double t77534 = rho_a[index]+rho_b[index];
            double t77535 = 1.0/pow(t77534,1.0/3.0);
            double t77536 = c*t77535;
            double t77537 = sqrt(t77536);
            double t77538 = pow(t77536,3.0/2.0);
            double t77539 = 1.0/pow(t77534,2.0/3.0);
            double t77540 = b1p*t77537;
            double t77541 = b3p*t77538;
            double t77542 = b4p*t77539*t77496;
            double t77543 = b2p*c*t77535;
            double t77544 = t77540+t77541+t77542+t77543;
            double t77545 = 1.0/t77544;
            double t77546 = t77545*t77498*(1.0/2.0);
            double t77547 = t77546+1.0;
            double t77548 = log(t77547);
            double t77549 = a1p*c*t77535;
            double t77550 = t77549+1.0;
            double t77551 = c0p*t77550*t77548*2.0;
            double t77552 = rho_a[index]-rho_b[index];
            double t77553 = t77552*t77552;
            double t77554 = 1.0/t77534;
            double t77555 = t77552*t77554;
            double t77556 = 1.0/(t77534*t77534*t77534*t77534);
            double t77557 = t77553*t77553;
            double t77558 = t77555+1.0;
            double t77559 = pow(t77558,4.0/3.0);
            double t77560 = -t77555+1.0;
            double t77561 = pow(t77560,4.0/3.0);
            double t77562 = t77561+t77559-2.0;
            double t77563 = gcab*gcab;
            double t77567 = 1.0/pow(rho_a[index],8.0/3.0);
            double t77568 = gamma_aa[index]*t77567*(1.0/2.0);
            double t77569 = 1.0/pow(rho_b[index],8.0/3.0);
            double t77570 = gamma_bb[index]*t77569*(1.0/2.0);
            double t77564 = t77570+t77568;
            double t77565 = t77564*t77564;
            double t77566 = 1.0/pow(rho_a[index],1.1E1/3.0);
            double t77571 = t77563*t77563;
            double t77572 = t77565*t77565;
            double t77573 = t77563*t77565*6.0;
            double t77574 = gcab*t77563*t77564*t77565*4.0;
            double t77575 = t77571*t77572;
            double t77576 = gcab*t77564*4.0;
            double t77577 = t77573+t77574+t77575+t77576+1.0;
            double t77578 = gcab*t77564;
            double t77579 = t77578+1.0;
            double t77580 = t77563*t77565;
            double t77581 = gcab*t77564*2.0;
            double t77582 = t77580+t77581+1.0;
            double t77583 = t77563*t77565*3.0;
            double t77584 = gcab*t77563*t77564*t77565;
            double t77585 = gcab*t77564*3.0;
            double t77586 = t77583+t77584+t77585+1.0;
            double t77587 = c0p*t77507*t77509*2.0;
            double t77588 = pow(rho_a[index],5.0/3.0);
            double t77589 = 1.0/tau_a[index];
            double t77590 = C_k*t77588*t77589;
            double t77591 = t77590-1.0;
            double t77592 = t77591*t77591;
            double t77593 = t77592*t77592;
            double t77594 = t77593*t77593;
            double t77595 = t77590+1.0;
            double t77596 = 1.0/(k*k);
            double t77597 = 1.0/kp;
            double t77598 = 1.0/(rho_a[index]*rho_a[index]);
            double t77599 = rho_a[index]*2.0;
            double t77600 = 1.0/pow(t77599,2.0/3.0);
            double t77601 = gamma_aa[index]*mu_*t77600*t77596*t77597*t77598*(1.0/4.0);
            double t77602 = t77601+1.0;
            double t77603 = 1.0/t77602;
            double t77604 = kp-kp*t77603+1.0;
            double t77605 = 1.0/t77595;
            double t77606 = pow(rho_a[index],2.0/3.0);
            double t77607 = 1.0/(t77595*t77595);
            double t77608 = 1.0/pow(t77595,1.0E1);
            double t77609 = 1.0/pow(t77595,1.1E1);
            double t77610 = 1.0/(t77595*t77595*t77595);
            double t77611 = 1.0/(t77595*t77595*t77595*t77595);
            double t77612 = 1.0/(t77595*t77595*t77595*t77595*t77595);
            double t77613 = 1.0/(t77595*t77595*t77595*t77595*t77595*t77595);
            double t77614 = 1.0/(t77595*t77595*t77595*t77595*t77595*t77595*t77595);
            double t77615 = 1.0/(t77595*t77595*t77595*t77595*t77595*t77595*t77595*t77595);
            double t77616 = 1.0/(t77595*t77595*t77595*t77595*t77595*t77595*t77595*t77595*t77595);
            double t77617 = a_1*t77605*t77591;
            double t77618 = a_10*t77608*t77592*t77594;
            double t77619 = a_11*t77591*t77609*t77592*t77594;
            double t77620 = a_2*t77607*t77592;
            double t77621 = a_3*t77610*t77591*t77592;
            double t77622 = a_4*t77611*t77593;
            double t77623 = a_5*t77612*t77591*t77593;
            double t77624 = a_6*t77613*t77592*t77593;
            double t77625 = a_7*t77614*t77591*t77592*t77593;
            double t77626 = a_8*t77615*t77594;
            double t77627 = a_9*t77616*t77591*t77594;
            double t77628 = t77620+t77621+t77622+t77623+t77624+t77625+t77617+t77626+t77618+t77627+t77619+1.0;
            double t77629 = 1.0/t77582;
            double t77630 = 1.0/t77586;
            double t77631 = 1.0/t77579;
            double t77632 = 1.0/t77577;
            double t77633 = 1.0/pow(t77534,4.0/3.0);
            double t77634 = b1f*t77537;
            double t77635 = b3f*t77538;
            double t77636 = b4f*t77539*t77496;
            double t77637 = b2f*c*t77535;
            double t77638 = t77634+t77635+t77636+t77637;
            double t77639 = 1.0/t77638;
            double t77640 = t77516*t77639*(1.0/2.0);
            double t77641 = t77640+1.0;
            double t77642 = log(t77641);
            double t77643 = a1f*c*t77535;
            double t77644 = t77643+1.0;
            double t77646 = c0f*t77642*t77644*2.0;
            double t77645 = t77551-t77646;
            double t77647 = 1.0/(t77534*t77534);
            double t77674 = t77552*t77647;
            double t77648 = t77554-t77674;
            double t77649 = 1.0/pow(t77534,5.0/3.0);
            double t77650 = 1.0/sqrt(t77536);
            double t77651 = 1.0/t77547;
            double t77652 = 1.0/(t77544*t77544);
            double t77653 = b4p*t77496*t77649*(2.0/3.0);
            double t77654 = b2p*c*t77633*(1.0/3.0);
            double t77655 = b1p*c*t77650*t77633*(1.0/6.0);
            double t77656 = b3p*c*t77633*t77537*(1.0/2.0);
            double t77657 = t77653+t77654+t77655+t77656;
            double t77658 = t77550*t77651*t77652*t77657;
            double t77659 = 1.0/d2fz0;
            double t77660 = 1.0/Aa;
            double t77661 = b1a*t77537;
            double t77662 = b3a*t77538;
            double t77663 = b4a*t77539*t77496;
            double t77664 = b2a*c*t77535;
            double t77665 = t77661+t77662+t77663+t77664;
            double t77666 = 1.0/t77665;
            double t77667 = t77660*t77666*(1.0/2.0);
            double t77668 = t77667+1.0;
            double t77669 = log(t77668);
            double t77670 = a1a*c*t77535;
            double t77671 = t77670+1.0;
            double t77672 = 1.0/(t77534*t77534*t77534*t77534*t77534);
            double t77673 = pow(t77558,1.0/3.0);
            double t77675 = t77673*t77648*(4.0/3.0);
            double t77676 = pow(t77560,1.0/3.0);
            double t77677 = t77675-t77648*t77676*(4.0/3.0);
            double t77678 = t77556*t77557;
            double t77679 = t77678-1.0;
            double t77680 = a1f*c*t77492;
            double t77681 = t77680+1.0;
            double t77682 = b1f*t77494;
            double t77683 = b3f*t77495;
            double t77684 = b4f*t77496*t77497;
            double t77685 = b2f*c*t77492;
            double t77686 = t77682+t77683+t77684+t77685;
            double t77687 = 1.0/t77686;
            double t77688 = t77516*t77687*(1.0/2.0);
            double t77689 = t77688+1.0;
            double t77690 = 1.0/pow(rho_a[index],4.0/3.0);
            double t77691 = 1.0/pow(rho_a[index],5.0/3.0);
            double t77692 = 1.0/sqrt(t77493);
            double t77693 = log(t77689);
            double t77694 = 1.0/t77506;
            double t77695 = 1.0/(t77503*t77503);
            double t77696 = b4p*t77691*t77496*(2.0/3.0);
            double t77697 = b2p*c*t77690*(1.0/3.0);
            double t77698 = b1p*c*t77690*t77692*(1.0/6.0);
            double t77699 = b3p*c*t77690*t77494*(1.0/2.0);
            double t77700 = t77696+t77697+t77698+t77699;
            double t77701 = t77700*t77509*t77694*t77695;
            double t77702 = Aa*t77515*t77562*t77671*t77659*t77669*t77679*2.0;
            double t77704 = c0f*t77681*t77693*2.0;
            double t77703 = -t77704+t77587;
            double t77705 = gamma_aa[index]*gamma_aa[index];
            double t77706 = gcaa*gcaa;
            double t77707 = t77705*t77705;
            double t77708 = t77706*t77706;
            double t77709 = 1.0/pow(rho_a[index],3.2E1/3.0);
            double t77710 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]);
            double t77711 = 1.0/pow(rho_a[index],1.6E1/3.0);
            double t77712 = t77704-t77587;
            double t77713 = t77512*t77712*t77515;
            double t77714 = t77713+t77587;
            double t77715 = tau_a[index]-1.0/1.0E20;
            double t77716 = ( (t77715 > 0.0) ?  1.0 : 0.0 ) ;
            double t77717 = tau_a[index]*2.0;
            double t77718 = 1.0/rho_a[index];
            double t77745 = gamma_aa[index]*t77718*(1.0/4.0);
            double t77719 = t77717-t77745;
            double t77720 = t77719*t77589*(1.0/2.0);
            double t77721 = t77720-1.0;
            double t77722 = t77721*t77716;
            double t77723 = t77722+1.0;
            double t77724 = gamma_aa[index]*gcaa*t77567*4.0;
            double t77725 = gamma_aa[index]*gcaa*t77710*t77705*t77706*4.0;
            double t77726 = t77711*t77705*t77706*6.0;
            double t77727 = t77707*t77708*t77709;
            double t77728 = t77724+t77725+t77726+t77727+1.0;
            double t77729 = 1.0/t77728;
            double t77730 = gamma_aa[index]*gcaa*t77567;
            double t77731 = t77730+1.0;
            double t77732 = 1.0/t77731;
            double t77733 = gamma_aa[index]*gcaa*t77567*3.0;
            double t77734 = gamma_aa[index]*gcaa*t77710*t77705*t77706;
            double t77735 = t77711*t77705*t77706*3.0;
            double t77736 = t77733+t77734+t77735+1.0;
            double t77737 = 1.0/t77736;
            double t77738 = gamma_aa[index]*gcaa*t77567*2.0;
            double t77739 = t77711*t77705*t77706;
            double t77740 = t77738+t77739+1.0;
            double t77741 = 1.0/t77740;
            double t77742 = 1.0/pow(rho_a[index],1.9E1/3.0);
            double t77743 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]*rho_a[index]);
            double t77744 = 1.0/pow(rho_a[index],3.5E1/3.0);
            double t77746 = 1.0/t77689;
            double t77747 = 1.0/(t77686*t77686);
            double t77748 = b4f*t77691*t77496*(2.0/3.0);
            double t77749 = b2f*c*t77690*(1.0/3.0);
            double t77750 = b1f*c*t77690*t77692*(1.0/6.0);
            double t77751 = b3f*c*t77690*t77494*(1.0/2.0);
            double t77752 = t77750+t77751+t77748+t77749;
            double t77753 = a1f*c*c0f*t77690*t77693*(2.0/3.0);
            double t77754 = a1p*c*c0p*t77507*t77690*(2.0/3.0);
            double t77755 = ccaa4*t77707*t77708*t77709*t77729;
            double t77756 = ccaa1*gamma_aa[index]*gcaa*t77732*t77567;
            double t77757 = ccaa3*gamma_aa[index]*gcaa*t77710*t77705*t77706*t77737;
            double t77758 = ccaa2*t77711*t77705*t77741*t77706;
            double t77759 = ccaa0+t77755+t77756+t77757+t77758;
            v_rho_a_[index] = -(ccab0+ccab1*gcab*t77631*t77564+ccab4*t77632*t77571*t77572+ccab2*t77563*t77565* \
               t77629+ccab3*gcab*t77630*t77563*t77564*t77565)*(t77702+t77551-t77587+rho_a[index]*(-t77701+t77754+ \
               t77512*t77515*(t77701+t77753-t77752*t77681*t77746*t77747-a1p*c*c0p*t77507*t77690*(2.0/3.0)))-t77534* \
               (-t77658+t77515*t77562*t77556*t77557*(t77658-(t77644*1.0/(t77638*t77638)*(b2f*c*t77633*(1.0/3.0)+b4f* \
               t77496*t77649*(2.0/3.0)+b1f*c*t77650*t77633*(1.0/6.0)+b3f*c*t77633*t77537*(1.0/2.0)))/t77641+a1f*c* \
               c0f*t77633*t77642*(2.0/3.0)-a1p*c*c0p*t77633*t77548*(2.0/3.0))+a1p*c*c0p*t77633*t77548*(2.0/3.0)-t77515* \
               t77562*t77645*t77672*t77557*4.0+t77515*t77645*t77556*t77557*t77677+t77515*t77552*t77553*t77562*t77645* \
               t77556*4.0+Aa*t77515*t77562*t77671*t77659*t77669*(t77672*t77557*4.0-t77552*t77553*t77556*4.0)*2.0- \
               Aa*t77515*t77671*t77659*t77677*t77669*t77679*2.0-(t77515*t77562*t77671*1.0/(t77665*t77665)*t77659* \
               t77679*(b2a*c*t77633*(1.0/3.0)+b4a*t77496*t77649*(2.0/3.0)+b1a*c*t77650*t77633*(1.0/6.0)+b3a*c*t77633* \
               t77537*(1.0/2.0)))/t77668+Aa*a1a*c*t77515*t77633*t77562*t77659*t77669*t77679*(2.0/3.0))+t77512*t77703* \
               t77515-t77515*t77562*t77645*t77556*t77557)-(X-1.0)*(t77604*t77628+rho_a[index]*t77604*(C_k*a_1*t77605* \
               t77606*t77589*(5.0/3.0)-C_k*a_1*t77606*t77607*t77591*t77589*(5.0/3.0)-C_k*a_2*t77610*t77606*t77592* \
               t77589*(1.0E1/3.0)+C_k*a_2*t77606*t77607*t77591*t77589*(1.0E1/3.0)+C_k*a_3*t77610*t77606*t77592*t77589* \
               5.0-C_k*a_4*t77612*t77606*t77593*t77589*(2.0E1/3.0)+C_k*a_5*t77612*t77606*t77593*t77589*(2.5E1/3.0) \
               -C_k*a_8*t77606*t77616*t77594*t77589*(4.0E1/3.0)+C_k*a_9*t77606*t77616*t77594*t77589*1.5E1+C_k*a_10* \
               t77606*t77608*t77591*t77594*t77589*(5.0E1/3.0)-C_k*a_10*t77606*t77609*t77592*t77594*t77589*(5.0E1/ \
               3.0)+C_k*a_11*t77606*t77609*t77592*t77594*t77589*(5.5E1/3.0)-C_k*a_3*t77611*t77606*t77591*t77592*t77589* \
               5.0+C_k*a_4*t77611*t77606*t77591*t77592*t77589*(2.0E1/3.0)-C_k*a_5*t77613*t77606*t77591*t77593*t77589* \
               (2.5E1/3.0)+C_k*a_6*t77613*t77606*t77591*t77593*t77589*1.0E1-C_k*a_6*t77614*t77606*t77592*t77593*t77589* \
               1.0E1+C_k*a_7*t77614*t77606*t77592*t77593*t77589*(3.5E1/3.0)-C_k*a_9*t77606*t77608*t77591*t77594*t77589* \
               1.5E1-C_k*a_11*t77606*t77591*t77592*t77594*1.0/pow(t77595,1.2E1)*t77589*(5.5E1/3.0)-C_k*a_7*t77606* \
               t77615*t77591*t77592*t77593*t77589*(3.5E1/3.0)+C_k*a_8*t77606*t77615*t77591*t77592*t77593*t77589*(4.0E1/ \
               3.0))-kp*rho_a[index]*1.0/(t77602*t77602)*t77628*(gamma_aa[index]*mu_*1.0/(rho_a[index]*rho_a[index]* \
               rho_a[index])*t77600*t77596*t77597*(1.0/2.0)+gamma_aa[index]*mu_*t77596*t77597*t77598*1.0/pow(t77599,5.0/ \
               3.0)*(1.0/3.0)))-(rho_a[index]*(t77587-t77512*t77703*t77515)+rho_b[index]*(t77533-t77512*t77515*(t77533- \
               c0f*log((t77516*(1.0/2.0))/(b1f*t77519+b3f*t77520+b2f*c*t77517+b4f*t77521*t77496)+1.0)*(a1f*c*t77517+ \
               1.0)*2.0))-t77534*(t77702+t77551-t77515*t77562*t77645*t77556*t77557))*(ccab1*gamma_aa[index]*gcab* \
               t77631*t77566*(4.0/3.0)-ccab2*t77563*1.0/(t77582*t77582)*t77565*(gamma_aa[index]*gcab*t77566*(8.0/ \
               3.0)+gamma_aa[index]*t77563*t77564*t77566*(8.0/3.0))-ccab4*t77571*t77572*1.0/(t77577*t77577)*(gamma_aa[index]* \
               gcab*t77566*(1.6E1/3.0)+gamma_aa[index]*t77563*t77564*t77566*1.6E1+gamma_aa[index]*gcab*t77563*t77565* \
               t77566*1.6E1+gamma_aa[index]*t77571*t77564*t77565*t77566*(1.6E1/3.0))-ccab1*gamma_aa[index]*t77563* \
               t77564*t77566*1.0/(t77579*t77579)*(4.0/3.0)+ccab2*gamma_aa[index]*t77563*t77564*t77566*t77629*(8.0/ \
               3.0)-ccab3*gcab*t77563*t77564*t77565*1.0/(t77586*t77586)*(gamma_aa[index]*gcab*t77566*4.0+gamma_aa[index]* \
               t77563*t77564*t77566*8.0+gamma_aa[index]*gcab*t77563*t77565*t77566*4.0)+ccab3*gamma_aa[index]*gcab* \
               t77630*t77563*t77565*t77566*4.0+ccab4*gamma_aa[index]*t77632*t77571*t77564*t77565*t77566*(1.6E1/3.0) \
               )-t77714*t77723*t77759+rho_a[index]*t77714*t77723*(ccaa1*gamma_aa[index]*gcaa*t77732*t77566*(8.0/3.0) \
               +ccaa2*t77705*t77741*t77706*t77742*(1.6E1/3.0)+ccaa4*t77707*t77708*t77744*t77729*(3.2E1/3.0)-ccaa1* \
               1.0/(t77731*t77731)*t77705*t77706*t77742*(8.0/3.0)-ccaa2*t77711*1.0/(t77740*t77740)*t77705*t77706* \
               (gamma_aa[index]*gcaa*t77566*(1.6E1/3.0)+t77705*t77706*t77742*(1.6E1/3.0))-ccaa4*t77707*t77708*t77709* \
               1.0/(t77728*t77728)*(gamma_aa[index]*gcaa*t77566*(3.2E1/3.0)+t77705*t77706*t77742*3.2E1+t77707*t77708* \
               t77744*(3.2E1/3.0)+gamma_aa[index]*gcaa*t77705*t77706*t77743*3.2E1)+ccaa3*gamma_aa[index]*gcaa*t77705* \
               t77706*t77743*t77737*8.0-ccaa3*gamma_aa[index]*gcaa*t77710*t77705*t77706*1.0/(t77736*t77736)*(gamma_aa[index]* \
               gcaa*t77566*8.0+t77705*t77706*t77742*1.6E1+gamma_aa[index]*gcaa*t77705*t77706*t77743*8.0))+rho_a[index]* \
               t77723*t77759*(-t77701+t77754+t77512*t77515*(t77701+t77753-t77754-t77752*t77681*t77746*t77747))-gamma_aa[index]* \
               t77714*t77716*t77718*t77759*t77589*(1.0/8.0);
        } else if (rho_a[index] > cutoff_) {
            double t82895 = pow(rho_a[index],5.0/3.0);
            double t82896 = 1.0/tau_a[index];
            double t82897 = C_k*t82895*t82896;
            double t82898 = t82897-1.0;
            double t82899 = t82898*t82898;
            double t82900 = t82899*t82899;
            double t82901 = t82900*t82900;
            double t82902 = t82897+1.0;
            double t82903 = 1.0/pow(rho_a[index],1.0/3.0);
            double t82904 = c*t82903;
            double t82905 = sqrt(t82904);
            double t82906 = pow(t82904,3.0/2.0);
            double t82907 = c*c;
            double t82908 = 1.0/pow(rho_a[index],2.0/3.0);
            double t82909 = 1.0/c0p;
            double t82910 = b1p*t82905;
            double t82911 = b3p*t82906;
            double t82912 = b4p*t82907*t82908;
            double t82913 = b2p*c*t82903;
            double t82914 = t82910+t82911+t82912+t82913;
            double t82915 = 1.0/t82914;
            double t82916 = t82915*t82909*(1.0/2.0);
            double t82917 = t82916+1.0;
            double t82918 = log(t82917);
            double t82919 = a1p*c*t82903;
            double t82920 = t82919+1.0;
            double t82921 = gamma_aa[index]*gamma_aa[index];
            double t82922 = gcaa*gcaa;
            double t82923 = t82921*t82921;
            double t82924 = t82922*t82922;
            double t82925 = 1.0/pow(rho_a[index],3.2E1/3.0);
            double t82926 = 1.0/pow(rho_a[index],8.0/3.0);
            double t82927 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]);
            double t82928 = 1.0/pow(rho_a[index],1.6E1/3.0);
            double t82929 = pow(2.0,1.0/3.0);
            double t82930 = t82929*2.0;
            double t82931 = t82930-2.0;
            double t82932 = two_13*2.0;
            double t82933 = t82932-2.0;
            double t82934 = 1.0/t82933;
            double t82935 = 1.0/c0f;
            double t82936 = b1f*t82905;
            double t82937 = b3f*t82906;
            double t82938 = b4f*t82907*t82908;
            double t82939 = b2f*c*t82903;
            double t82940 = t82936+t82937+t82938+t82939;
            double t82941 = 1.0/t82940;
            double t82942 = t82941*t82935*(1.0/2.0);
            double t82943 = t82942+1.0;
            double t82944 = log(t82943);
            double t82945 = a1f*c*t82903;
            double t82946 = t82945+1.0;
            double t82947 = c0f*t82944*t82946*2.0;
            double t82948 = c0p*t82920*t82918*2.0;
            double t82949 = tau_a[index]-1.0/1.0E20;
            double t82950 = ( (t82949 > 0.0) ?  1.0 : 0.0 ) ;
            double t82951 = tau_a[index]*2.0;
            double t82952 = 1.0/rho_a[index];
            double t83002 = gamma_aa[index]*t82952*(1.0/4.0);
            double t82953 = t82951-t83002;
            double t82954 = t82953*t82896*(1.0/2.0);
            double t82955 = t82954-1.0;
            double t82956 = t82950*t82955;
            double t82957 = t82956+1.0;
            double t82958 = gamma_aa[index]*gcaa*t82926*4.0;
            double t82959 = gamma_aa[index]*gcaa*t82921*t82922*t82927*4.0;
            double t82960 = t82921*t82922*t82928*6.0;
            double t82961 = t82923*t82924*t82925;
            double t82962 = t82960+t82961+t82958+t82959+1.0;
            double t82963 = 1.0/t82962;
            double t82964 = gamma_aa[index]*gcaa*t82926;
            double t82965 = t82964+1.0;
            double t82966 = 1.0/t82965;
            double t82967 = gamma_aa[index]*gcaa*t82926*3.0;
            double t82968 = gamma_aa[index]*gcaa*t82921*t82922*t82927;
            double t82969 = t82921*t82922*t82928*3.0;
            double t82970 = t82967+t82968+t82969+1.0;
            double t82971 = 1.0/t82970;
            double t82972 = gamma_aa[index]*gcaa*t82926*2.0;
            double t82973 = t82921*t82922*t82928;
            double t82974 = t82972+t82973+1.0;
            double t82975 = 1.0/t82974;
            double t82976 = 1.0/pow(rho_a[index],1.9E1/3.0);
            double t82977 = 1.0/pow(rho_a[index],1.1E1/3.0);
            double t82978 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]*rho_a[index]);
            double t82979 = 1.0/pow(rho_a[index],3.5E1/3.0);
            double t82980 = X-1.0;
            double t82981 = 1.0/(k*k);
            double t82982 = 1.0/kp;
            double t82983 = 1.0/(rho_a[index]*rho_a[index]);
            double t82984 = rho_a[index]*2.0;
            double t82985 = 1.0/pow(t82984,2.0/3.0);
            double t82986 = gamma_aa[index]*mu_*t82981*t82982*t82983*t82985*(1.0/4.0);
            double t82987 = t82986+1.0;
            double t82988 = 1.0/t82987;
            double t82989 = kp-kp*t82988+1.0;
            double t82990 = 1.0/t82902;
            double t82991 = pow(rho_a[index],2.0/3.0);
            double t82992 = 1.0/(t82902*t82902);
            double t82993 = 1.0/pow(t82902,1.0E1);
            double t82994 = 1.0/pow(t82902,1.1E1);
            double t82995 = 1.0/(t82902*t82902*t82902);
            double t82996 = 1.0/(t82902*t82902*t82902*t82902);
            double t82997 = 1.0/(t82902*t82902*t82902*t82902*t82902);
            double t82998 = 1.0/(t82902*t82902*t82902*t82902*t82902*t82902);
            double t82999 = 1.0/(t82902*t82902*t82902*t82902*t82902*t82902*t82902);
            double t83000 = 1.0/(t82902*t82902*t82902*t82902*t82902*t82902*t82902*t82902);
            double t83001 = 1.0/(t82902*t82902*t82902*t82902*t82902*t82902*t82902*t82902*t82902);
            double t83003 = 1.0/pow(rho_a[index],4.0/3.0);
            double t83004 = 1.0/pow(rho_a[index],5.0/3.0);
            double t83005 = 1.0/sqrt(t82904);
            double t83006 = 1.0/t82917;
            double t83007 = 1.0/(t82914*t82914);
            double t83008 = b4p*t82907*t83004*(2.0/3.0);
            double t83009 = b2p*c*t83003*(1.0/3.0);
            double t83010 = b1p*c*t83003*t83005*(1.0/6.0);
            double t83011 = b3p*c*t82905*t83003*(1.0/2.0);
            double t83012 = t83010+t83011+t83008+t83009;
            double t83013 = t82920*t83012*t83006*t83007;
            double t83014 = ccaa4*t82923*t82924*t82925*t82963;
            double t83015 = ccaa1*gamma_aa[index]*gcaa*t82926*t82966;
            double t83016 = ccaa3*gamma_aa[index]*gcaa*t82921*t82922*t82971*t82927;
            double t83017 = ccaa2*t82921*t82922*t82928*t82975;
            double t83018 = ccaa0+t83014+t83015+t83016+t83017;
            double t83019 = t82947-t82948;
            double t83020 = t82931*t82934*t83019;
            double t83021 = t82948+t83020;
            double t83022 = a_1*t82990*t82898;
            double t83023 = a_10*t82901*t82993*t82899;
            double t83024 = a_11*t82901*t82994*t82898*t82899;
            double t83025 = a_2*t82992*t82899;
            double t83026 = a_3*t82995*t82898*t82899;
            double t83027 = a_4*t82900*t82996;
            double t83028 = a_5*t82900*t82898*t82997;
            double t83029 = a_6*t82900*t82899*t82998;
            double t83030 = a_7*t82900*t82898*t82899*t82999;
            double t83031 = a_8*t82901*t83000;
            double t83032 = a_9*t82901*t82898*t83001;
            double t83033 = t83030+t83022+t83031+t83023+t83032+t83024+t83025+t83026+t83027+t83028+t83029+1.0;
            v_rho_a_[index] = -t82980*t82989*t83033-t82957*t83018*(t82948+t82931*t82934*(t82947-c0p*t82920*t82918* \
               2.0))+rho_a[index]*t82957*t83018*(-t83013+t82931*t82934*(t83013-(1.0/(t82940*t82940)*t82946*(b2f*c* \
               t83003*(1.0/3.0)+b4f*t82907*t83004*(2.0/3.0)+b1f*c*t83003*t83005*(1.0/6.0)+b3f*c*t82905*t83003*(1.0/ \
               2.0)))/t82943+a1f*c*c0f*t82944*t83003*(2.0/3.0)-a1p*c*c0p*t82918*t83003*(2.0/3.0))+a1p*c*c0p*t82918* \
               t83003*(2.0/3.0))-rho_a[index]*t82980*t82989*(C_k*a_1*t82990*t82991*t82896*(5.0/3.0)-C_k*a_1*t82991* \
               t82992*t82896*t82898*(5.0/3.0)+C_k*a_2*t82991*t82992*t82896*t82898*(1.0E1/3.0)-C_k*a_2*t82991*t82896* \
               t82995*t82899*(1.0E1/3.0)+C_k*a_3*t82991*t82896*t82995*t82899*5.0-C_k*a_4*t82900*t82991*t82896*t82997* \
               (2.0E1/3.0)+C_k*a_5*t82900*t82991*t82896*t82997*(2.5E1/3.0)-C_k*a_8*t82901*t82991*t82896*t83001*(4.0E1/ \
               3.0)+C_k*a_9*t82901*t82991*t82896*t83001*1.5E1+C_k*a_10*t82901*t82991*t82993*t82896*t82898*(5.0E1/ \
               3.0)-C_k*a_10*t82901*t82991*t82994*t82896*t82899*(5.0E1/3.0)+C_k*a_11*t82901*t82991*t82994*t82896* \
               t82899*(5.5E1/3.0)-C_k*a_3*t82991*t82896*t82996*t82898*t82899*5.0+C_k*a_4*t82991*t82896*t82996*t82898* \
               t82899*(2.0E1/3.0)-C_k*a_5*t82900*t82991*t82896*t82898*t82998*(2.5E1/3.0)+C_k*a_6*t82900*t82991*t82896* \
               t82898*t82998*1.0E1-C_k*a_6*t82900*t82991*t82896*t82899*t82999*1.0E1+C_k*a_7*t82900*t82991*t82896* \
               t82899*t82999*(3.5E1/3.0)-C_k*a_9*t82901*t82991*t82993*t82896*t82898*1.5E1-C_k*a_11*t82901*1.0/pow(t82902,1.2E1) \
               *t82991*t82896*t82898*t82899*(5.5E1/3.0)-C_k*a_7*t82900*t82991*t82896*t82898*t82899*t83000*(3.5E1/ \
               3.0)+C_k*a_8*t82900*t82991*t82896*t82898*t82899*t83000*(4.0E1/3.0))+rho_a[index]*t82957*t83021*(ccaa1* \
               gamma_aa[index]*gcaa*t82966*t82977*(8.0/3.0)+ccaa2*t82921*t82922*t82975*t82976*(1.6E1/3.0)+ccaa4*t82923* \
               t82924*t82963*t82979*(3.2E1/3.0)-ccaa1*t82921*t82922*1.0/(t82965*t82965)*t82976*(8.0/3.0)-ccaa2*t82921* \
               t82922*t82928*1.0/(t82974*t82974)*(gamma_aa[index]*gcaa*t82977*(1.6E1/3.0)+t82921*t82922*t82976*(1.6E1/ \
               3.0))-ccaa4*t82923*t82924*t82925*1.0/(t82962*t82962)*(gamma_aa[index]*gcaa*t82977*(3.2E1/3.0)+t82921* \
               t82922*t82976*3.2E1+t82923*t82924*t82979*(3.2E1/3.0)+gamma_aa[index]*gcaa*t82921*t82922*t82978*3.2E1) \
               +ccaa3*gamma_aa[index]*gcaa*t82921*t82922*t82971*t82978*8.0-ccaa3*gamma_aa[index]*gcaa*t82921*t82922* \
               1.0/(t82970*t82970)*t82927*(gamma_aa[index]*gcaa*t82977*8.0+t82921*t82922*t82976*1.6E1+gamma_aa[index]* \
               gcaa*t82921*t82922*t82978*8.0))-gamma_aa[index]*t82950*t82952*t82896*t83021*t83018*(1.0/8.0)+kp*rho_a[index]* \
               t82980*1.0/(t82987*t82987)*t83033*(gamma_aa[index]*mu_*1.0/(rho_a[index]*rho_a[index]*rho_a[index]) \
               *t82981*t82982*t82985*(1.0/2.0)+gamma_aa[index]*mu_*t82981*t82982*t82983*1.0/pow(t82984,5.0/3.0)*(1.0/ \
               3.0));
        } else if (rho_b[index] > cutoff_) {
            v_rho_a_[index] = 0.0;
        } else {
            v_rho_a_[index] = 0.0;
        } 

        //V_rho_b
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t77761 = 1.0/pow(rho_a[index],1.0/3.0);
            double t77762 = c*t77761;
            double t77763 = sqrt(t77762);
            double t77764 = pow(t77762,3.0/2.0);
            double t77765 = c*c;
            double t77766 = 1.0/pow(rho_a[index],2.0/3.0);
            double t77767 = 1.0/c0p;
            double t77768 = b1p*t77763;
            double t77769 = b3p*t77764;
            double t77770 = b4p*t77765*t77766;
            double t77771 = b2p*c*t77761;
            double t77772 = t77770+t77771+t77768+t77769;
            double t77773 = 1.0/t77772;
            double t77774 = t77773*t77767*(1.0/2.0);
            double t77775 = t77774+1.0;
            double t77776 = log(t77775);
            double t77777 = a1p*c*t77761;
            double t77778 = t77777+1.0;
            double t77779 = pow(2.0,1.0/3.0);
            double t77780 = t77779*2.0;
            double t77781 = t77780-2.0;
            double t77782 = two_13*2.0;
            double t77783 = t77782-2.0;
            double t77784 = 1.0/t77783;
            double t77785 = 1.0/c0f;
            double t77786 = 1.0/pow(rho_b[index],1.0/3.0);
            double t77787 = c*t77786;
            double t77788 = sqrt(t77787);
            double t77789 = pow(t77787,3.0/2.0);
            double t77790 = 1.0/pow(rho_b[index],2.0/3.0);
            double t77791 = b1p*t77788;
            double t77792 = b3p*t77789;
            double t77793 = b4p*t77790*t77765;
            double t77794 = b2p*c*t77786;
            double t77795 = t77791+t77792+t77793+t77794;
            double t77796 = 1.0/t77795;
            double t77797 = t77767*t77796*(1.0/2.0);
            double t77798 = t77797+1.0;
            double t77799 = log(t77798);
            double t77800 = a1p*c*t77786;
            double t77801 = t77800+1.0;
            double t77802 = c0p*t77801*t77799*2.0;
            double t77803 = rho_a[index]+rho_b[index];
            double t77804 = 1.0/pow(t77803,1.0/3.0);
            double t77805 = c*t77804;
            double t77806 = sqrt(t77805);
            double t77807 = pow(t77805,3.0/2.0);
            double t77808 = 1.0/pow(t77803,2.0/3.0);
            double t77809 = b1p*t77806;
            double t77810 = b3p*t77807;
            double t77811 = b4p*t77808*t77765;
            double t77812 = b2p*c*t77804;
            double t77813 = t77810+t77811+t77812+t77809;
            double t77814 = 1.0/t77813;
            double t77815 = t77814*t77767*(1.0/2.0);
            double t77816 = t77815+1.0;
            double t77817 = log(t77816);
            double t77818 = a1p*c*t77804;
            double t77819 = t77818+1.0;
            double t77820 = c0p*t77817*t77819*2.0;
            double t77821 = rho_a[index]-rho_b[index];
            double t77822 = t77821*t77821;
            double t77823 = 1.0/t77803;
            double t77824 = t77821*t77823;
            double t77825 = 1.0/(t77803*t77803*t77803*t77803);
            double t77826 = t77822*t77822;
            double t77827 = t77824+1.0;
            double t77828 = pow(t77827,4.0/3.0);
            double t77829 = -t77824+1.0;
            double t77830 = pow(t77829,4.0/3.0);
            double t77831 = t77830+t77828-2.0;
            double t77832 = gcab*gcab;
            double t77836 = 1.0/pow(rho_a[index],8.0/3.0);
            double t77837 = gamma_aa[index]*t77836*(1.0/2.0);
            double t77838 = 1.0/pow(rho_b[index],8.0/3.0);
            double t77839 = gamma_bb[index]*t77838*(1.0/2.0);
            double t77833 = t77837+t77839;
            double t77834 = t77833*t77833;
            double t77835 = 1.0/pow(rho_b[index],1.1E1/3.0);
            double t77840 = t77832*t77832;
            double t77841 = t77834*t77834;
            double t77842 = t77832*t77834*6.0;
            double t77843 = gcab*t77832*t77833*t77834*4.0;
            double t77844 = t77840*t77841;
            double t77845 = gcab*t77833*4.0;
            double t77846 = t77842+t77843+t77844+t77845+1.0;
            double t77847 = gcab*t77833;
            double t77848 = t77847+1.0;
            double t77849 = t77832*t77834;
            double t77850 = gcab*t77833*2.0;
            double t77851 = t77850+t77849+1.0;
            double t77852 = t77832*t77834*3.0;
            double t77853 = gcab*t77832*t77833*t77834;
            double t77854 = gcab*t77833*3.0;
            double t77855 = t77852+t77853+t77854+1.0;
            double t77856 = c0p*t77776*t77778*2.0;
            double t77857 = pow(rho_b[index],5.0/3.0);
            double t77858 = 1.0/tau_b[index];
            double t77859 = C_k*t77857*t77858;
            double t77860 = t77859-1.0;
            double t77861 = t77860*t77860;
            double t77862 = t77861*t77861;
            double t77863 = t77862*t77862;
            double t77864 = t77859+1.0;
            double t77865 = 1.0/(k*k);
            double t77866 = 1.0/kp;
            double t77867 = 1.0/(rho_b[index]*rho_b[index]);
            double t77868 = rho_b[index]*2.0;
            double t77869 = 1.0/pow(t77868,2.0/3.0);
            double t77870 = gamma_bb[index]*mu_*t77865*t77866*t77867*t77869*(1.0/4.0);
            double t77871 = t77870+1.0;
            double t77872 = 1.0/t77871;
            double t77873 = kp-kp*t77872+1.0;
            double t77874 = 1.0/t77864;
            double t77875 = pow(rho_b[index],2.0/3.0);
            double t77876 = 1.0/(t77864*t77864);
            double t77877 = 1.0/pow(t77864,1.0E1);
            double t77878 = 1.0/pow(t77864,1.1E1);
            double t77879 = 1.0/(t77864*t77864*t77864);
            double t77880 = 1.0/(t77864*t77864*t77864*t77864);
            double t77881 = 1.0/(t77864*t77864*t77864*t77864*t77864);
            double t77882 = 1.0/(t77864*t77864*t77864*t77864*t77864*t77864);
            double t77883 = 1.0/(t77864*t77864*t77864*t77864*t77864*t77864*t77864);
            double t77884 = 1.0/(t77864*t77864*t77864*t77864*t77864*t77864*t77864*t77864);
            double t77885 = 1.0/(t77864*t77864*t77864*t77864*t77864*t77864*t77864*t77864*t77864);
            double t77886 = a_1*t77860*t77874;
            double t77887 = a_10*t77861*t77863*t77877;
            double t77888 = a_11*t77860*t77861*t77863*t77878;
            double t77889 = a_2*t77861*t77876;
            double t77890 = a_3*t77860*t77861*t77879;
            double t77891 = a_4*t77862*t77880;
            double t77892 = a_5*t77860*t77862*t77881;
            double t77893 = a_6*t77861*t77862*t77882;
            double t77894 = a_7*t77860*t77861*t77862*t77883;
            double t77895 = a_8*t77863*t77884;
            double t77896 = a_9*t77860*t77863*t77885;
            double t77897 = t77890+t77891+t77892+t77893+t77894+t77886+t77895+t77887+t77896+t77888+t77889+1.0;
            double t77898 = 1.0/t77851;
            double t77899 = 1.0/t77855;
            double t77900 = 1.0/t77848;
            double t77901 = 1.0/t77846;
            double t77902 = 1.0/pow(t77803,4.0/3.0);
            double t77903 = b1f*t77806;
            double t77904 = b3f*t77807;
            double t77905 = b4f*t77808*t77765;
            double t77906 = b2f*c*t77804;
            double t77907 = t77903+t77904+t77905+t77906;
            double t77908 = 1.0/t77907;
            double t77909 = t77908*t77785*(1.0/2.0);
            double t77910 = t77909+1.0;
            double t77911 = log(t77910);
            double t77912 = a1f*c*t77804;
            double t77913 = t77912+1.0;
            double t77915 = c0f*t77911*t77913*2.0;
            double t77914 = t77820-t77915;
            double t77916 = 1.0/(t77803*t77803);
            double t77917 = t77821*t77916;
            double t77918 = t77823+t77917;
            double t77919 = 1.0/pow(t77803,5.0/3.0);
            double t77920 = 1.0/sqrt(t77805);
            double t77921 = 1.0/t77816;
            double t77922 = 1.0/(t77813*t77813);
            double t77923 = b4p*t77765*t77919*(2.0/3.0);
            double t77924 = b2p*c*t77902*(1.0/3.0);
            double t77925 = b1p*c*t77902*t77920*(1.0/6.0);
            double t77926 = b3p*c*t77902*t77806*(1.0/2.0);
            double t77927 = t77923+t77924+t77925+t77926;
            double t77928 = 1.0/d2fz0;
            double t77929 = 1.0/Aa;
            double t77930 = b1a*t77806;
            double t77931 = b3a*t77807;
            double t77932 = b4a*t77808*t77765;
            double t77933 = b2a*c*t77804;
            double t77934 = t77930+t77931+t77932+t77933;
            double t77935 = 1.0/t77934;
            double t77936 = t77935*t77929*(1.0/2.0);
            double t77937 = t77936+1.0;
            double t77938 = log(t77937);
            double t77939 = a1a*c*t77804;
            double t77940 = t77939+1.0;
            double t77941 = 1.0/(t77803*t77803*t77803*t77803*t77803);
            double t77942 = pow(t77827,1.0/3.0);
            double t77943 = t77942*t77918*(4.0/3.0);
            double t77944 = pow(t77829,1.0/3.0);
            double t77945 = t77943-t77944*t77918*(4.0/3.0);
            double t77946 = t77825*t77826;
            double t77947 = t77946-1.0;
            double t77948 = t77921*t77922*t77819*t77927;
            double t77949 = a1f*c*t77786;
            double t77950 = t77949+1.0;
            double t77951 = b1f*t77788;
            double t77952 = b3f*t77789;
            double t77953 = b4f*t77790*t77765;
            double t77954 = b2f*c*t77786;
            double t77955 = t77951+t77952+t77953+t77954;
            double t77956 = 1.0/t77955;
            double t77957 = t77785*t77956*(1.0/2.0);
            double t77958 = t77957+1.0;
            double t77959 = 1.0/pow(rho_b[index],4.0/3.0);
            double t77960 = 1.0/pow(rho_b[index],5.0/3.0);
            double t77961 = 1.0/sqrt(t77787);
            double t77962 = log(t77958);
            double t77963 = 1.0/t77798;
            double t77964 = 1.0/(t77795*t77795);
            double t77965 = b4p*t77960*t77765*(2.0/3.0);
            double t77966 = b2p*c*t77959*(1.0/3.0);
            double t77967 = b1p*c*t77961*t77959*(1.0/6.0);
            double t77968 = b3p*c*t77788*t77959*(1.0/2.0);
            double t77969 = t77965+t77966+t77967+t77968;
            double t77970 = t77801*t77963*t77964*t77969;
            double t77973 = c0f*t77950*t77962*2.0;
            double t77971 = t77802-t77973;
            double t77972 = Aa*t77831*t77940*t77784*t77928*t77938*t77947*2.0;
            double t77974 = t77781*t77971*t77784;
            double t77975 = gamma_bb[index]*gamma_bb[index];
            double t77976 = gcaa*gcaa;
            double t77977 = t77975*t77975;
            double t77978 = t77976*t77976;
            double t77979 = 1.0/pow(rho_b[index],3.2E1/3.0);
            double t77980 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
               rho_b[index]*rho_b[index]);
            double t77981 = 1.0/pow(rho_b[index],1.6E1/3.0);
            double t77982 = t77802-t77974;
            double t77983 = tau_b[index]-1.0/1.0E20;
            double t77984 = ( (t77983 > 0.0) ?  1.0 : 0.0 ) ;
            double t77985 = tau_b[index]*2.0;
            double t77986 = 1.0/rho_b[index];
            double t78013 = gamma_bb[index]*t77986*(1.0/4.0);
            double t77987 = t77985-t78013;
            double t77988 = t77858*t77987*(1.0/2.0);
            double t77989 = t77988-1.0;
            double t77990 = t77984*t77989;
            double t77991 = t77990+1.0;
            double t77992 = gamma_bb[index]*gcaa*t77838*4.0;
            double t77993 = gamma_bb[index]*gcaa*t77980*t77975*t77976*4.0;
            double t77994 = t77981*t77975*t77976*6.0;
            double t77995 = t77977*t77978*t77979;
            double t77996 = t77992+t77993+t77994+t77995+1.0;
            double t77997 = 1.0/t77996;
            double t77998 = gamma_bb[index]*gcaa*t77838;
            double t77999 = t77998+1.0;
            double t78000 = 1.0/t77999;
            double t78001 = gamma_bb[index]*gcaa*t77838*3.0;
            double t78002 = gamma_bb[index]*gcaa*t77980*t77975*t77976;
            double t78003 = t77981*t77975*t77976*3.0;
            double t78004 = t78001+t78002+t78003+1.0;
            double t78005 = 1.0/t78004;
            double t78006 = gamma_bb[index]*gcaa*t77838*2.0;
            double t78007 = t77981*t77975*t77976;
            double t78008 = t78006+t78007+1.0;
            double t78009 = 1.0/t78008;
            double t78010 = 1.0/pow(rho_b[index],1.9E1/3.0);
            double t78011 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
               rho_b[index]*rho_b[index]*rho_b[index]);
            double t78012 = 1.0/pow(rho_b[index],3.5E1/3.0);
            double t78014 = 1.0/t77958;
            double t78015 = 1.0/(t77955*t77955);
            double t78016 = b4f*t77960*t77765*(2.0/3.0);
            double t78017 = b2f*c*t77959*(1.0/3.0);
            double t78018 = b1f*c*t77961*t77959*(1.0/6.0);
            double t78019 = b3f*c*t77788*t77959*(1.0/2.0);
            double t78020 = t78016+t78017+t78018+t78019;
            double t78021 = a1f*c*c0f*t77962*t77959*(2.0/3.0);
            double t78022 = a1p*c*c0p*t77959*t77799*(2.0/3.0);
            double t78023 = ccaa4*t77977*t77978*t77979*t77997;
            double t78024 = ccaa1*gamma_bb[index]*gcaa*t77838*t78000;
            double t78025 = ccaa3*gamma_bb[index]*gcaa*t77980*t77975*t77976*t78005;
            double t78026 = ccaa2*t77981*t77975*t77976*t78009;
            double t78027 = ccaa0+t78023+t78024+t78025+t78026;
            v_rho_b_[index] = -(X-1.0)*(t77873*t77897+rho_b[index]*t77873*(C_k*a_1*t77874*t77875*t77858*(5.0/ \
               3.0)-C_k*a_1*t77860*t77875*t77858*t77876*(5.0/3.0)+C_k*a_2*t77860*t77875*t77858*t77876*(1.0E1/3.0) \
               -C_k*a_2*t77861*t77875*t77858*t77879*(1.0E1/3.0)+C_k*a_3*t77861*t77875*t77858*t77879*5.0-C_k*a_4*t77862* \
               t77881*t77875*t77858*(2.0E1/3.0)+C_k*a_5*t77862*t77881*t77875*t77858*(2.5E1/3.0)-C_k*a_8*t77863*t77875* \
               t77858*t77885*(4.0E1/3.0)+C_k*a_9*t77863*t77875*t77858*t77885*1.5E1+C_k*a_10*t77860*t77863*t77875* \
               t77858*t77877*(5.0E1/3.0)-C_k*a_10*t77861*t77863*t77875*t77858*t77878*(5.0E1/3.0)+C_k*a_11*t77861* \
               t77863*t77875*t77858*t77878*(5.5E1/3.0)-C_k*a_3*t77860*t77861*t77880*t77875*t77858*5.0+C_k*a_4*t77860* \
               t77861*t77880*t77875*t77858*(2.0E1/3.0)-C_k*a_5*t77860*t77862*t77882*t77875*t77858*(2.5E1/3.0)+C_k* \
               a_6*t77860*t77862*t77882*t77875*t77858*1.0E1-C_k*a_6*t77861*t77862*t77883*t77875*t77858*1.0E1+C_k* \
               a_7*t77861*t77862*t77883*t77875*t77858*(3.5E1/3.0)-C_k*a_9*t77860*t77863*t77875*t77858*t77877*1.5E1- \
               C_k*a_11*t77860*t77861*t77863*1.0/pow(t77864,1.2E1)*t77875*t77858*(5.5E1/3.0)-C_k*a_7*t77860*t77861* \
               t77862*t77875*t77884*t77858*(3.5E1/3.0)+C_k*a_8*t77860*t77861*t77862*t77875*t77884*t77858*(4.0E1/3.0) \
               )-kp*rho_b[index]*1.0/(t77871*t77871)*t77897*(gamma_bb[index]*mu_*1.0/(rho_b[index]*rho_b[index]*rho_b[index]) \
               *t77865*t77866*t77869*(1.0/2.0)+gamma_bb[index]*mu_*t77865*t77866*t77867*1.0/pow(t77868,5.0/3.0)*(1.0/ \
               3.0)))-(ccab0+ccab1*gcab*t77900*t77833+ccab4*t77901*t77840*t77841+ccab2*t77832*t77834*t77898+ccab3* \
               gcab*t77832*t77833*t77834*t77899)*(-t77802+t77820+t77972+t77974+t77803*(t77948-t77831*t77825*t77826* \
               t77784*(t77948-(t77913*1.0/(t77907*t77907)*(b2f*c*t77902*(1.0/3.0)+b4f*t77765*t77919*(2.0/3.0)+b1f* \
               c*t77902*t77920*(1.0/6.0)+b3f*c*t77902*t77806*(1.0/2.0)))/t77910+a1f*c*c0f*t77902*t77911*(2.0/3.0) \
               -a1p*c*c0p*t77902*t77817*(2.0/3.0))-a1p*c*c0p*t77902*t77817*(2.0/3.0)+t77831*t77914*t77941*t77826* \
               t77784*4.0+t77914*t77825*t77826*t77945*t77784+t77821*t77822*t77831*t77914*t77825*t77784*4.0-Aa*t77831* \
               t77940*t77784*t77928*t77938*(t77941*t77826*4.0+t77821*t77822*t77825*4.0)*2.0-Aa*t77940*t77945*t77784* \
               t77928*t77938*t77947*2.0+(t77831*t77940*1.0/(t77934*t77934)*t77784*t77928*t77947*(b2a*c*t77902*(1.0/ \
               3.0)+b4a*t77765*t77919*(2.0/3.0)+b1a*c*t77902*t77920*(1.0/6.0)+b3a*c*t77902*t77806*(1.0/2.0)))/t77937- \
               Aa*a1a*c*t77902*t77831*t77784*t77928*t77938*t77947*(2.0/3.0))+rho_b[index]*(-t77970+t78022+t77781* \
               t77784*(t77970+t78021-t77950*t78020*t78014*t78015-a1p*c*c0p*t77959*t77799*(2.0/3.0)))-t77831*t77914* \
               t77825*t77826*t77784)-(rho_b[index]*(t77802-t77781*t77971*t77784)+rho_a[index]*(t77856-t77781*t77784* \
               (t77856-c0f*log((t77785*(1.0/2.0))/(b1f*t77763+b3f*t77764+b2f*c*t77761+b4f*t77765*t77766)+1.0)*(a1f* \
               c*t77761+1.0)*2.0))-t77803*(t77820+t77972-t77831*t77914*t77825*t77826*t77784))*(ccab1*gamma_bb[index]* \
               gcab*t77900*t77835*(4.0/3.0)-ccab2*t77832*1.0/(t77851*t77851)*t77834*(gamma_bb[index]*gcab*t77835* \
               (8.0/3.0)+gamma_bb[index]*t77832*t77833*t77835*(8.0/3.0))-ccab4*t77840*t77841*1.0/(t77846*t77846)* \
               (gamma_bb[index]*gcab*t77835*(1.6E1/3.0)+gamma_bb[index]*t77832*t77833*t77835*1.6E1+gamma_bb[index]* \
               gcab*t77832*t77834*t77835*1.6E1+gamma_bb[index]*t77840*t77833*t77834*t77835*(1.6E1/3.0))-ccab1*gamma_bb[index]* \
               t77832*t77833*t77835*1.0/(t77848*t77848)*(4.0/3.0)+ccab2*gamma_bb[index]*t77832*t77833*t77835*t77898* \
               (8.0/3.0)-ccab3*gcab*t77832*t77833*t77834*1.0/(t77855*t77855)*(gamma_bb[index]*gcab*t77835*4.0+gamma_bb[index]* \
               t77832*t77833*t77835*8.0+gamma_bb[index]*gcab*t77832*t77834*t77835*4.0)+ccab3*gamma_bb[index]*gcab* \
               t77832*t77834*t77835*t77899*4.0+ccab4*gamma_bb[index]*t77901*t77840*t77833*t77834*t77835*(1.6E1/3.0) \
               )-t77982*t77991*t78027+rho_b[index]*t77982*t77991*(ccaa1*gamma_bb[index]*gcaa*t77835*t78000*(8.0/3.0) \
               +ccaa4*t77977*t77978*t77997*t78012*(3.2E1/3.0)+ccaa2*t77975*t77976*t78010*t78009*(1.6E1/3.0)-ccaa1* \
               t77975*t77976*1.0/(t77999*t77999)*t78010*(8.0/3.0)-ccaa2*t77981*t77975*t77976*1.0/(t78008*t78008)* \
               (gamma_bb[index]*gcaa*t77835*(1.6E1/3.0)+t77975*t77976*t78010*(1.6E1/3.0))-ccaa4*t77977*t77978*1.0/ \
               (t77996*t77996)*t77979*(gamma_bb[index]*gcaa*t77835*(3.2E1/3.0)+t77975*t77976*t78010*3.2E1+t77977* \
               t77978*t78012*(3.2E1/3.0)+gamma_bb[index]*gcaa*t77975*t77976*t78011*3.2E1)+ccaa3*gamma_bb[index]*gcaa* \
               t77975*t77976*t78011*t78005*8.0-ccaa3*gamma_bb[index]*gcaa*t77980*t77975*t77976*1.0/(t78004*t78004) \
               *(gamma_bb[index]*gcaa*t77835*8.0+t77975*t77976*t78010*1.6E1+gamma_bb[index]*gcaa*t77975*t77976*t78011* \
               8.0))+rho_b[index]*t77991*t78027*(-t77970+t78022+t77781*t77784*(t77970+t78021-t78022-t77950*t78020* \
               t78014*t78015))-gamma_bb[index]*t77982*t77858*t77984*t77986*t78027*(1.0/8.0);
        } else if (rho_a[index] > cutoff_) {
            v_rho_b_[index] = 0.0;
        } else if (rho_b[index] > cutoff_) {
            double t81769 = pow(rho_b[index],5.0/3.0);
            double t81770 = 1.0/tau_b[index];
            double t81771 = C_k*t81770*t81769;
            double t81772 = t81771-1.0;
            double t81773 = t81772*t81772;
            double t81774 = t81773*t81773;
            double t81775 = t81774*t81774;
            double t81776 = t81771+1.0;
            double t81777 = 1.0/pow(rho_b[index],1.0/3.0);
            double t81778 = c*t81777;
            double t81779 = sqrt(t81778);
            double t81780 = pow(t81778,3.0/2.0);
            double t81781 = c*c;
            double t81782 = 1.0/pow(rho_b[index],2.0/3.0);
            double t81783 = 1.0/c0p;
            double t81784 = b1p*t81779;
            double t81785 = b3p*t81780;
            double t81786 = b4p*t81781*t81782;
            double t81787 = b2p*c*t81777;
            double t81788 = t81784+t81785+t81786+t81787;
            double t81789 = 1.0/t81788;
            double t81790 = t81783*t81789*(1.0/2.0);
            double t81791 = t81790+1.0;
            double t81792 = log(t81791);
            double t81793 = a1p*c*t81777;
            double t81794 = t81793+1.0;
            double t81795 = gamma_bb[index]*gamma_bb[index];
            double t81796 = gcaa*gcaa;
            double t81797 = t81795*t81795;
            double t81798 = t81796*t81796;
            double t81799 = 1.0/pow(rho_b[index],3.2E1/3.0);
            double t81800 = 1.0/pow(rho_b[index],8.0/3.0);
            double t81801 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
               rho_b[index]*rho_b[index]);
            double t81802 = 1.0/pow(rho_b[index],1.6E1/3.0);
            double t81803 = pow(2.0,1.0/3.0);
            double t81804 = t81803*2.0;
            double t81805 = t81804-2.0;
            double t81806 = two_13*2.0;
            double t81807 = t81806-2.0;
            double t81808 = 1.0/t81807;
            double t81809 = 1.0/c0f;
            double t81810 = b1f*t81779;
            double t81811 = b3f*t81780;
            double t81812 = b4f*t81781*t81782;
            double t81813 = b2f*c*t81777;
            double t81814 = t81810+t81811+t81812+t81813;
            double t81815 = 1.0/t81814;
            double t81816 = t81815*t81809*(1.0/2.0);
            double t81817 = t81816+1.0;
            double t81818 = log(t81817);
            double t81819 = a1f*c*t81777;
            double t81820 = t81819+1.0;
            double t81821 = c0f*t81820*t81818*2.0;
            double t81822 = c0p*t81792*t81794*2.0;
            double t81823 = tau_b[index]-1.0/1.0E20;
            double t81824 = ( (t81823 > 0.0) ?  1.0 : 0.0 ) ;
            double t81825 = tau_b[index]*2.0;
            double t81826 = 1.0/rho_b[index];
            double t81876 = gamma_bb[index]*t81826*(1.0/4.0);
            double t81827 = t81825-t81876;
            double t81828 = t81770*t81827*(1.0/2.0);
            double t81829 = t81828-1.0;
            double t81830 = t81824*t81829;
            double t81831 = t81830+1.0;
            double t81832 = gamma_bb[index]*gcaa*t81800*4.0;
            double t81833 = gamma_bb[index]*gcaa*t81801*t81795*t81796*4.0;
            double t81834 = t81802*t81795*t81796*6.0;
            double t81835 = t81797*t81798*t81799;
            double t81836 = t81832+t81833+t81834+t81835+1.0;
            double t81837 = 1.0/t81836;
            double t81838 = gamma_bb[index]*gcaa*t81800;
            double t81839 = t81838+1.0;
            double t81840 = 1.0/t81839;
            double t81841 = gamma_bb[index]*gcaa*t81800*3.0;
            double t81842 = gamma_bb[index]*gcaa*t81801*t81795*t81796;
            double t81843 = t81802*t81795*t81796*3.0;
            double t81844 = t81841+t81842+t81843+1.0;
            double t81845 = 1.0/t81844;
            double t81846 = gamma_bb[index]*gcaa*t81800*2.0;
            double t81847 = t81802*t81795*t81796;
            double t81848 = t81846+t81847+1.0;
            double t81849 = 1.0/t81848;
            double t81850 = 1.0/pow(rho_b[index],1.9E1/3.0);
            double t81851 = 1.0/pow(rho_b[index],1.1E1/3.0);
            double t81852 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
               rho_b[index]*rho_b[index]*rho_b[index]);
            double t81853 = 1.0/pow(rho_b[index],3.5E1/3.0);
            double t81854 = X-1.0;
            double t81855 = 1.0/(k*k);
            double t81856 = 1.0/kp;
            double t81857 = 1.0/(rho_b[index]*rho_b[index]);
            double t81858 = rho_b[index]*2.0;
            double t81859 = 1.0/pow(t81858,2.0/3.0);
            double t81860 = gamma_bb[index]*mu_*t81855*t81856*t81857*t81859*(1.0/4.0);
            double t81861 = t81860+1.0;
            double t81862 = 1.0/t81861;
            double t81863 = kp-kp*t81862+1.0;
            double t81864 = 1.0/t81776;
            double t81865 = pow(rho_b[index],2.0/3.0);
            double t81866 = 1.0/(t81776*t81776);
            double t81867 = 1.0/pow(t81776,1.0E1);
            double t81868 = 1.0/pow(t81776,1.1E1);
            double t81869 = 1.0/(t81776*t81776*t81776);
            double t81870 = 1.0/(t81776*t81776*t81776*t81776);
            double t81871 = 1.0/(t81776*t81776*t81776*t81776*t81776);
            double t81872 = 1.0/(t81776*t81776*t81776*t81776*t81776*t81776);
            double t81873 = 1.0/(t81776*t81776*t81776*t81776*t81776*t81776*t81776);
            double t81874 = 1.0/(t81776*t81776*t81776*t81776*t81776*t81776*t81776*t81776);
            double t81875 = 1.0/(t81776*t81776*t81776*t81776*t81776*t81776*t81776*t81776*t81776);
            double t81877 = 1.0/pow(rho_b[index],4.0/3.0);
            double t81878 = 1.0/pow(rho_b[index],5.0/3.0);
            double t81879 = 1.0/sqrt(t81778);
            double t81880 = 1.0/t81791;
            double t81881 = 1.0/(t81788*t81788);
            double t81882 = b4p*t81781*t81878*(2.0/3.0);
            double t81883 = b2p*c*t81877*(1.0/3.0);
            double t81884 = b1p*c*t81877*t81879*(1.0/6.0);
            double t81885 = b3p*c*t81877*t81779*(1.0/2.0);
            double t81886 = t81882+t81883+t81884+t81885;
            double t81887 = t81880*t81881*t81794*t81886;
            double t81888 = ccaa4*t81837*t81797*t81798*t81799;
            double t81889 = ccaa1*gamma_bb[index]*gcaa*t81800*t81840;
            double t81890 = ccaa3*gamma_bb[index]*gcaa*t81801*t81845*t81795*t81796;
            double t81891 = ccaa2*t81802*t81795*t81849*t81796;
            double t81892 = ccaa0+t81890+t81891+t81888+t81889;
            double t81893 = t81821-t81822;
            double t81894 = t81805*t81808*t81893;
            double t81895 = t81822+t81894;
            double t81896 = a_1*t81772*t81864;
            double t81897 = a_10*t81773*t81775*t81867;
            double t81898 = a_11*t81772*t81773*t81775*t81868;
            double t81899 = a_2*t81773*t81866;
            double t81900 = a_3*t81772*t81773*t81869;
            double t81901 = a_4*t81870*t81774;
            double t81902 = a_5*t81772*t81871*t81774;
            double t81903 = a_6*t81773*t81872*t81774;
            double t81904 = a_7*t81772*t81773*t81774*t81873;
            double t81905 = a_8*t81775*t81874;
            double t81906 = a_9*t81772*t81775*t81875;
            double t81907 = t81900+t81901+t81902+t81903+t81904+t81905+t81906+t81896+t81897+t81898+t81899+1.0;
            v_rho_b_[index] = -t81907*t81854*t81863-t81831*t81892*(t81822+t81805*t81808*(t81821-c0p*t81792*t81794* \
               2.0))+rho_b[index]*t81831*t81892*(-t81887+t81805*t81808*(t81887-(t81820*1.0/(t81814*t81814)*(b2f*c* \
               t81877*(1.0/3.0)+b4f*t81781*t81878*(2.0/3.0)+b1f*c*t81877*t81879*(1.0/6.0)+b3f*c*t81877*t81779*(1.0/ \
               2.0)))/t81817+a1f*c*c0f*t81818*t81877*(2.0/3.0)-a1p*c*c0p*t81792*t81877*(2.0/3.0))+a1p*c*c0p*t81792* \
               t81877*(2.0/3.0))-rho_b[index]*t81854*t81863*(C_k*a_1*t81770*t81864*t81865*(5.0/3.0)-C_k*a_1*t81770* \
               t81772*t81865*t81866*(5.0/3.0)+C_k*a_2*t81770*t81772*t81865*t81866*(1.0E1/3.0)-C_k*a_2*t81770*t81773* \
               t81865*t81869*(1.0E1/3.0)+C_k*a_3*t81770*t81773*t81865*t81869*5.0-C_k*a_4*t81770*t81871*t81774*t81865* \
               (2.0E1/3.0)+C_k*a_5*t81770*t81871*t81774*t81865*(2.5E1/3.0)-C_k*a_8*t81770*t81775*t81865*t81875*(4.0E1/ \
               3.0)+C_k*a_9*t81770*t81775*t81865*t81875*1.5E1+C_k*a_10*t81770*t81772*t81775*t81865*t81867*(5.0E1/ \
               3.0)-C_k*a_10*t81770*t81773*t81775*t81865*t81868*(5.0E1/3.0)+C_k*a_11*t81770*t81773*t81775*t81865* \
               t81868*(5.5E1/3.0)-C_k*a_3*t81770*t81870*t81772*t81773*t81865*5.0+C_k*a_4*t81770*t81870*t81772*t81773* \
               t81865*(2.0E1/3.0)-C_k*a_5*t81770*t81772*t81872*t81774*t81865*(2.5E1/3.0)+C_k*a_6*t81770*t81772*t81872* \
               t81774*t81865*1.0E1-C_k*a_6*t81770*t81773*t81774*t81873*t81865*1.0E1+C_k*a_7*t81770*t81773*t81774* \
               t81873*t81865*(3.5E1/3.0)-C_k*a_9*t81770*t81772*t81775*t81865*t81867*1.5E1-C_k*a_11*t81770*t81772* \
               t81773*t81775*t81865*1.0/pow(t81776,1.2E1)*(5.5E1/3.0)-C_k*a_7*t81770*t81772*t81773*t81774*t81865* \
               t81874*(3.5E1/3.0)+C_k*a_8*t81770*t81772*t81773*t81774*t81865*t81874*(4.0E1/3.0))+rho_b[index]*t81831* \
               t81895*(ccaa1*gamma_bb[index]*gcaa*t81840*t81851*(8.0/3.0)+ccaa2*t81850*t81795*t81849*t81796*(1.6E1/ \
               3.0)+ccaa4*t81853*t81837*t81797*t81798*(3.2E1/3.0)-ccaa1*t81850*1.0/(t81839*t81839)*t81795*t81796* \
               (8.0/3.0)-ccaa2*t81802*1.0/(t81848*t81848)*t81795*t81796*(gamma_bb[index]*gcaa*t81851*(1.6E1/3.0)+ \
               t81850*t81795*t81796*(1.6E1/3.0))-ccaa4*1.0/(t81836*t81836)*t81797*t81798*t81799*(gamma_bb[index]* \
               gcaa*t81851*(3.2E1/3.0)+t81850*t81795*t81796*3.2E1+t81853*t81797*t81798*(3.2E1/3.0)+gamma_bb[index]* \
               gcaa*t81852*t81795*t81796*3.2E1)+ccaa3*gamma_bb[index]*gcaa*t81852*t81845*t81795*t81796*8.0-ccaa3* \
               gamma_bb[index]*gcaa*t81801*1.0/(t81844*t81844)*t81795*t81796*(gamma_bb[index]*gcaa*t81851*8.0+t81850* \
               t81795*t81796*1.6E1+gamma_bb[index]*gcaa*t81852*t81795*t81796*8.0))-gamma_bb[index]*t81770*t81824* \
               t81826*t81892*t81895*(1.0/8.0)+kp*rho_b[index]*1.0/(t81861*t81861)*t81907*t81854*(gamma_bb[index]* \
               mu_*1.0/(rho_b[index]*rho_b[index]*rho_b[index])*t81855*t81856*t81859*(1.0/2.0)+gamma_bb[index]*mu_* \
               t81855*t81856*t81857*1.0/pow(t81858,5.0/3.0)*(1.0/3.0));
        } else {
            v_rho_b_[index] = 0.0;
        } 

        if (is_gga_) {

            //V_gamma_aa
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t78029 = 1.0/pow(rho_a[index],1.0/3.0);
                double t78030 = c*t78029;
                double t78031 = sqrt(t78030);
                double t78032 = pow(t78030,3.0/2.0);
                double t78033 = c*c;
                double t78034 = 1.0/pow(rho_a[index],2.0/3.0);
                double t78035 = 1.0/c0p;
                double t78036 = b1p*t78031;
                double t78037 = b3p*t78032;
                double t78038 = b4p*t78033*t78034;
                double t78039 = b2p*c*t78029;
                double t78040 = t78036+t78037+t78038+t78039;
                double t78041 = 1.0/t78040;
                double t78042 = t78041*t78035*(1.0/2.0);
                double t78043 = t78042+1.0;
                double t78044 = log(t78043);
                double t78045 = a1p*c*t78029;
                double t78046 = t78045+1.0;
                double t78047 = pow(2.0,1.0/3.0);
                double t78048 = t78047*2.0;
                double t78049 = t78048-2.0;
                double t78050 = two_13*2.0;
                double t78051 = t78050-2.0;
                double t78052 = 1.0/t78051;
                double t78053 = 1.0/c0f;
                double t78054 = 1.0/pow(rho_b[index],1.0/3.0);
                double t78055 = c*t78054;
                double t78056 = sqrt(t78055);
                double t78057 = pow(t78055,3.0/2.0);
                double t78058 = 1.0/pow(rho_b[index],2.0/3.0);
                double t78059 = b1p*t78056;
                double t78060 = b3p*t78057;
                double t78061 = b4p*t78033*t78058;
                double t78062 = b2p*c*t78054;
                double t78063 = t78060+t78061+t78062+t78059;
                double t78064 = 1.0/t78063;
                double t78065 = t78035*t78064*(1.0/2.0);
                double t78066 = t78065+1.0;
                double t78067 = log(t78066);
                double t78068 = a1p*c*t78054;
                double t78069 = t78068+1.0;
                double t78070 = c0p*t78067*t78069*2.0;
                double t78071 = rho_a[index]+rho_b[index];
                double t78072 = 1.0/pow(t78071,1.0/3.0);
                double t78073 = c*t78072;
                double t78074 = sqrt(t78073);
                double t78075 = pow(t78073,3.0/2.0);
                double t78076 = 1.0/pow(t78071,2.0/3.0);
                double t78077 = b1p*t78074;
                double t78078 = b3p*t78075;
                double t78079 = b4p*t78033*t78076;
                double t78080 = b2p*c*t78072;
                double t78081 = t78080+t78077+t78078+t78079;
                double t78082 = 1.0/t78081;
                double t78083 = t78035*t78082*(1.0/2.0);
                double t78084 = t78083+1.0;
                double t78085 = log(t78084);
                double t78086 = a1p*c*t78072;
                double t78087 = t78086+1.0;
                double t78088 = c0p*t78085*t78087*2.0;
                double t78089 = rho_a[index]-rho_b[index];
                double t78090 = t78089*t78089;
                double t78091 = 1.0/t78071;
                double t78092 = t78091*t78089;
                double t78093 = 1.0/(t78071*t78071*t78071*t78071);
                double t78094 = t78090*t78090;
                double t78095 = t78092+1.0;
                double t78096 = pow(t78095,4.0/3.0);
                double t78097 = -t78092+1.0;
                double t78098 = pow(t78097,4.0/3.0);
                double t78099 = t78096+t78098-2.0;
                double t78100 = 1.0/pow(rho_a[index],8.0/3.0);
                double t78101 = gamma_aa[index]*t78100*(1.0/2.0);
                double t78102 = 1.0/pow(rho_b[index],8.0/3.0);
                double t78103 = gamma_bb[index]*t78102*(1.0/2.0);
                double t78104 = t78101+t78103;
                double t78105 = gcab*t78104;
                double t78106 = t78105+1.0;
                double t78107 = gcab*gcab;
                double t78108 = t78104*t78104;
                double t78109 = t78107*t78107;
                double t78110 = t78108*t78108;
                double t78111 = t78107*t78108;
                double t78112 = gcab*t78104*2.0;
                double t78113 = t78111+t78112+1.0;
                double t78114 = t78107*t78108*3.0;
                double t78115 = gcab*t78104*t78107*t78108;
                double t78116 = gcab*t78104*3.0;
                double t78117 = t78114+t78115+t78116+1.0;
                double t78118 = t78107*t78108*6.0;
                double t78119 = gcab*t78104*t78107*t78108*4.0;
                double t78120 = t78110*t78109;
                double t78121 = gcab*t78104*4.0;
                double t78122 = t78120+t78121+t78118+t78119+1.0;
                double t78123 = c0p*t78044*t78046*2.0;
                double t78124 = b1f*t78031;
                double t78125 = b3f*t78032;
                double t78126 = b4f*t78033*t78034;
                double t78127 = b2f*c*t78029;
                double t78128 = t78124+t78125+t78126+t78127;
                double t78129 = 1.0/t78128;
                double t78130 = t78053*t78129*(1.0/2.0);
                double t78131 = t78130+1.0;
                double t78132 = log(t78131);
                double t78133 = a1f*c*t78029;
                double t78134 = t78133+1.0;
                double t78144 = c0f*t78132*t78134*2.0;
                double t78135 = t78123-t78144;
                double t78145 = t78052*t78135*t78049;
                double t78136 = t78123-t78145;
                double t78137 = gamma_aa[index]*gamma_aa[index];
                double t78138 = gcaa*gcaa;
                double t78139 = t78137*t78137;
                double t78140 = t78138*t78138;
                double t78141 = 1.0/pow(rho_a[index],3.2E1/3.0);
                double t78142 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t78143 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t78146 = tau_a[index]-1.0/1.0E20;
                double t78147 = ( (t78146 > 0.0) ?  1.0 : 0.0 ) ;
                double t78148 = 1.0/tau_a[index];
                double t78149 = gamma_aa[index]*gcaa*t78100;
                double t78150 = t78149+1.0;
                double t78151 = 1.0/t78150;
                double t78152 = gamma_aa[index]*gcaa*t78100*4.0;
                double t78153 = gamma_aa[index]*gcaa*t78142*t78137*t78138*4.0;
                double t78154 = t78143*t78137*t78138*6.0;
                double t78155 = t78140*t78141*t78139;
                double t78156 = t78152+t78153+t78154+t78155+1.0;
                double t78157 = 1.0/t78156;
                double t78158 = gamma_aa[index]*gcaa*t78100*2.0;
                double t78159 = t78143*t78137*t78138;
                double t78160 = t78158+t78159+1.0;
                double t78161 = 1.0/t78160;
                double t78162 = gamma_aa[index]*gcaa*t78100*3.0;
                double t78163 = gamma_aa[index]*gcaa*t78142*t78137*t78138;
                double t78164 = t78143*t78137*t78138*3.0;
                double t78165 = t78162+t78163+t78164+1.0;
                double t78166 = 1.0/t78165;
                double t78167 = 1.0/rho_a[index];
                double t78168 = 1.0/(k*k);
                double t78169 = rho_a[index]*2.0;
                double t78170 = 1.0/pow(t78169,2.0/3.0);
                double t78171 = pow(rho_a[index],5.0/3.0);
                double t78172 = C_k*t78171*t78148;
                double t78173 = t78172-1.0;
                double t78174 = t78173*t78173;
                double t78175 = t78174*t78174;
                double t78176 = t78175*t78175;
                double t78177 = t78172+1.0;
                v_gamma_aa_[index] = (rho_a[index]*t78136+rho_b[index]*(t78070-t78052*t78049*(t78070-c0f*log((t78053* \
                   (1.0/2.0))/(b1f*t78056+b3f*t78057+b2f*c*t78054+b4f*t78033*t78058)+1.0)*(a1f*c*t78054+1.0)*2.0))-t78071* \
                   (t78088-t78052*t78093*t78094*t78099*(t78088-c0f*log((t78053*(1.0/2.0))/(b1f*t78074+b3f*t78075+b2f* \
                   c*t78072+b4f*t78033*t78076)+1.0)*(a1f*c*t78072+1.0)*2.0)+(Aa*t78052*t78099*log((1.0/2.0)/(Aa*(b1a* \
                   t78074+b3a*t78075+b2a*c*t78072+b4a*t78033*t78076))+1.0)*(t78093*t78094-1.0)*(a1a*c*t78072+1.0)*2.0) \
                   /d2fz0))*((ccab1*gcab*t78100*(1.0/2.0))/t78106-ccab4*t78110*1.0/(t78122*t78122)*t78109*(gcab*t78100* \
                   2.0+t78100*t78104*t78107*6.0+gcab*t78100*t78107*t78108*6.0+t78100*t78104*t78108*t78109*2.0)-ccab2* \
                   1.0/(t78113*t78113)*t78107*t78108*(gcab*t78100+t78100*t78104*t78107)+(ccab2*t78100*t78104*t78107)/ \
                   t78113-ccab1*t78100*t78104*1.0/(t78106*t78106)*t78107*(1.0/2.0)+(ccab3*gcab*t78100*t78107*t78108*(3.0/ \
                   2.0))/t78117+(ccab4*t78100*t78104*t78108*t78109*2.0)/t78122-ccab3*gcab*t78104*t78107*t78108*1.0/(t78117* \
                   t78117)*(gcab*t78100*(3.0/2.0)+t78100*t78104*t78107*3.0+gcab*t78100*t78107*t78108*(3.0/2.0)))+t78136* \
                   t78147*t78148*(ccaa0+ccaa1*gamma_aa[index]*gcaa*t78100*t78151+ccaa2*t78143*t78161*t78137*t78138+ccaa4* \
                   t78140*t78141*t78139*t78157+ccaa3*gamma_aa[index]*gcaa*t78142*t78137*t78138*t78166)*(1.0/8.0)-rho_a[index]* \
                   t78136*(t78147*(t78148*(tau_a[index]*2.0-gamma_aa[index]*t78167*(1.0/4.0))*(1.0/2.0)-1.0)+1.0)*(ccaa1* \
                   gcaa*t78100*t78151+ccaa2*gamma_aa[index]*t78143*t78161*t78138*2.0-ccaa1*gamma_aa[index]*1.0/(t78150* \
                   t78150)*t78143*t78138-ccaa2*1.0/(t78160*t78160)*t78143*t78137*t78138*(gcaa*t78100*2.0+gamma_aa[index]* \
                   t78143*t78138*2.0)-ccaa4*t78140*t78141*1.0/(t78156*t78156)*t78139*(gcaa*t78100*4.0+gamma_aa[index]* \
                   t78143*t78138*1.2E1+gamma_aa[index]*t78140*t78141*t78137*4.0+gcaa*t78142*t78137*t78138*1.2E1)+ccaa4* \
                   gamma_aa[index]*t78140*t78141*t78137*t78157*4.0+ccaa3*gcaa*t78142*t78137*t78138*t78166*3.0-ccaa3*gamma_aa[index]* \
                   gcaa*t78142*t78137*t78138*1.0/(t78165*t78165)*(gcaa*t78100*3.0+gamma_aa[index]*t78143*t78138*6.0+gcaa* \
                   t78142*t78137*t78138*3.0))-mu_*t78170*t78167*t78168*1.0/pow((gamma_aa[index]*mu_*1.0/(rho_a[index]* \
                   rho_a[index])*t78170*t78168*(1.0/4.0))/kp+1.0,2.0)*(X-1.0)*((a_1*t78173)/t78177+a_2*t78174*1.0/(t78177* \
                   t78177)+a_4*t78175*1.0/(t78177*t78177*t78177*t78177)+a_8*t78176*1.0/(t78177*t78177*t78177*t78177*t78177* \
                   t78177*t78177*t78177)+a_10*t78174*t78176*1.0/pow(t78177,1.0E1)+a_3*t78173*t78174*1.0/(t78177*t78177* \
                   t78177)+a_5*t78173*t78175*1.0/(t78177*t78177*t78177*t78177*t78177)+a_6*t78174*t78175*1.0/(t78177*t78177* \
                   t78177*t78177*t78177*t78177)+a_9*t78173*t78176*1.0/(t78177*t78177*t78177*t78177*t78177*t78177*t78177* \
                   t78177*t78177)+a_11*t78173*t78174*t78176*1.0/pow(t78177,1.1E1)+a_7*t78173*t78174*t78175*1.0/(t78177* \
                   t78177*t78177*t78177*t78177*t78177*t78177)+1.0)*(1.0/4.0);
            } else if (rho_a[index] > cutoff_) {
                double t83036 = 1.0/pow(rho_a[index],1.0/3.0);
                double t83037 = c*t83036;
                double t83038 = sqrt(t83037);
                double t83039 = pow(t83037,3.0/2.0);
                double t83040 = c*c;
                double t83041 = 1.0/pow(rho_a[index],2.0/3.0);
                double t83042 = 1.0/c0p;
                double t83043 = b1p*t83038;
                double t83044 = b3p*t83039;
                double t83045 = b4p*t83040*t83041;
                double t83046 = b2p*c*t83036;
                double t83047 = t83043+t83044+t83045+t83046;
                double t83048 = 1.0/t83047;
                double t83049 = t83042*t83048*(1.0/2.0);
                double t83050 = t83049+1.0;
                double t83051 = log(t83050);
                double t83052 = a1p*c*t83036;
                double t83053 = t83052+1.0;
                double t83054 = gamma_aa[index]*gamma_aa[index];
                double t83055 = gcaa*gcaa;
                double t83056 = t83054*t83054;
                double t83057 = t83055*t83055;
                double t83058 = 1.0/pow(rho_a[index],3.2E1/3.0);
                double t83059 = 1.0/pow(rho_a[index],8.0/3.0);
                double t83060 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t83061 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t83062 = pow(2.0,1.0/3.0);
                double t83063 = t83062*2.0;
                double t83064 = t83063-2.0;
                double t83065 = two_13*2.0;
                double t83066 = t83065-2.0;
                double t83067 = 1.0/t83066;
                double t83068 = 1.0/c0f;
                double t83069 = b1f*t83038;
                double t83070 = b3f*t83039;
                double t83071 = b4f*t83040*t83041;
                double t83072 = b2f*c*t83036;
                double t83073 = t83070+t83071+t83072+t83069;
                double t83074 = 1.0/t83073;
                double t83075 = t83074*t83068*(1.0/2.0);
                double t83076 = t83075+1.0;
                double t83077 = log(t83076);
                double t83078 = a1f*c*t83036;
                double t83079 = t83078+1.0;
                double t83080 = c0f*t83077*t83079*2.0;
                double t83081 = c0p*t83051*t83053*2.0;
                double t83082 = tau_a[index]-1.0/1.0E20;
                double t83083 = ( (t83082 > 0.0) ?  1.0 : 0.0 ) ;
                double t83084 = 1.0/tau_a[index];
                double t83085 = gamma_aa[index]*gcaa*t83059;
                double t83086 = t83085+1.0;
                double t83087 = 1.0/t83086;
                double t83088 = gamma_aa[index]*gcaa*t83059*4.0;
                double t83089 = gamma_aa[index]*gcaa*t83060*t83054*t83055*4.0;
                double t83090 = t83061*t83054*t83055*6.0;
                double t83091 = t83056*t83057*t83058;
                double t83092 = t83090+t83091+t83088+t83089+1.0;
                double t83093 = 1.0/t83092;
                double t83094 = gamma_aa[index]*gcaa*t83059*2.0;
                double t83095 = t83061*t83054*t83055;
                double t83096 = t83094+t83095+1.0;
                double t83097 = 1.0/t83096;
                double t83098 = gamma_aa[index]*gcaa*t83059*3.0;
                double t83099 = gamma_aa[index]*gcaa*t83060*t83054*t83055;
                double t83100 = t83061*t83054*t83055*3.0;
                double t83101 = t83100+t83098+t83099+1.0;
                double t83102 = 1.0/t83101;
                double t83103 = 1.0/rho_a[index];
                double t83104 = 1.0/(k*k);
                double t83105 = rho_a[index]*2.0;
                double t83106 = 1.0/pow(t83105,2.0/3.0);
                double t83107 = pow(rho_a[index],5.0/3.0);
                double t83108 = C_k*t83107*t83084;
                double t83109 = t83108-1.0;
                double t83110 = t83109*t83109;
                double t83111 = t83110*t83110;
                double t83112 = t83111*t83111;
                double t83113 = t83108+1.0;
                v_gamma_aa_[index] = -rho_a[index]*(t83081+t83064*t83067*(t83080-t83081))*(t83083*(t83084*(tau_a[index]* \
                   2.0-gamma_aa[index]*t83103*(1.0/4.0))*(1.0/2.0)-1.0)+1.0)*(ccaa1*gcaa*t83059*t83087+ccaa2*gamma_aa[index]* \
                   t83061*t83055*t83097*2.0-ccaa1*gamma_aa[index]*t83061*t83055*1.0/(t83086*t83086)-ccaa2*t83061*t83054* \
                   t83055*1.0/(t83096*t83096)*(gcaa*t83059*2.0+gamma_aa[index]*t83061*t83055*2.0)-ccaa4*t83056*1.0/(t83092* \
                   t83092)*t83057*t83058*(gcaa*t83059*4.0+gamma_aa[index]*t83061*t83055*1.2E1+gamma_aa[index]*t83054* \
                   t83057*t83058*4.0+gcaa*t83060*t83054*t83055*1.2E1)+ccaa4*gamma_aa[index]*t83054*t83057*t83093*t83058* \
                   4.0+ccaa3*gcaa*t83102*t83060*t83054*t83055*3.0-ccaa3*gamma_aa[index]*gcaa*1.0/(t83101*t83101)*t83060* \
                   t83054*t83055*(gcaa*t83059*3.0+gamma_aa[index]*t83061*t83055*6.0+gcaa*t83060*t83054*t83055*3.0))+t83083* \
                   t83084*(t83081+t83064*t83067*(t83080-c0p*t83051*t83053*2.0))*(ccaa0+ccaa1*gamma_aa[index]*gcaa*t83059* \
                   t83087+ccaa2*t83061*t83054*t83055*t83097+ccaa4*t83056*t83057*t83093*t83058+ccaa3*gamma_aa[index]*gcaa* \
                   t83102*t83060*t83054*t83055)*(1.0/8.0)-mu_*t83103*t83104*t83106*1.0/pow((gamma_aa[index]*mu_*1.0/(rho_a[index]* \
                   rho_a[index])*t83104*t83106*(1.0/4.0))/kp+1.0,2.0)*(X-1.0)*((a_1*t83109)/t83113+a_2*t83110*1.0/(t83113* \
                   t83113)+a_4*t83111*1.0/(t83113*t83113*t83113*t83113)+a_8*t83112*1.0/(t83113*t83113*t83113*t83113*t83113* \
                   t83113*t83113*t83113)+a_10*t83110*t83112*1.0/pow(t83113,1.0E1)+a_3*t83110*1.0/(t83113*t83113*t83113) \
                   *t83109+a_5*t83111*1.0/(t83113*t83113*t83113*t83113*t83113)*t83109+a_6*t83110*t83111*1.0/(t83113*t83113* \
                   t83113*t83113*t83113*t83113)+a_9*t83112*1.0/(t83113*t83113*t83113*t83113*t83113*t83113*t83113*t83113* \
                   t83113)*t83109+a_11*t83110*t83112*1.0/pow(t83113,1.1E1)*t83109+a_7*t83110*t83111*1.0/(t83113*t83113* \
                   t83113*t83113*t83113*t83113*t83113)*t83109+1.0)*(1.0/4.0);
            } else if (rho_b[index] > cutoff_) {
                v_gamma_aa_[index] = 0.0;
            } else {
                v_gamma_aa_[index] = 0.0;
            } 

            //V_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_ab_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_ab_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_ab_[index] = 0.0;
            } else {
                v_gamma_ab_[index] = 0.0;
            } 

            //V_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t78180 = 1.0/pow(rho_a[index],1.0/3.0);
                double t78181 = c*t78180;
                double t78182 = sqrt(t78181);
                double t78183 = pow(t78181,3.0/2.0);
                double t78184 = c*c;
                double t78185 = 1.0/pow(rho_a[index],2.0/3.0);
                double t78186 = 1.0/c0p;
                double t78187 = b1p*t78182;
                double t78188 = b3p*t78183;
                double t78189 = b4p*t78184*t78185;
                double t78190 = b2p*c*t78180;
                double t78191 = t78190+t78187+t78188+t78189;
                double t78192 = 1.0/t78191;
                double t78193 = t78192*t78186*(1.0/2.0);
                double t78194 = t78193+1.0;
                double t78195 = log(t78194);
                double t78196 = a1p*c*t78180;
                double t78197 = t78196+1.0;
                double t78198 = pow(2.0,1.0/3.0);
                double t78199 = t78198*2.0;
                double t78200 = t78199-2.0;
                double t78201 = two_13*2.0;
                double t78202 = t78201-2.0;
                double t78203 = 1.0/t78202;
                double t78204 = 1.0/c0f;
                double t78205 = 1.0/pow(rho_b[index],1.0/3.0);
                double t78206 = c*t78205;
                double t78207 = sqrt(t78206);
                double t78208 = pow(t78206,3.0/2.0);
                double t78209 = 1.0/pow(rho_b[index],2.0/3.0);
                double t78210 = b1p*t78207;
                double t78211 = b3p*t78208;
                double t78212 = b4p*t78209*t78184;
                double t78213 = b2p*c*t78205;
                double t78214 = t78210+t78211+t78212+t78213;
                double t78215 = 1.0/t78214;
                double t78216 = t78215*t78186*(1.0/2.0);
                double t78217 = t78216+1.0;
                double t78218 = log(t78217);
                double t78219 = a1p*c*t78205;
                double t78220 = t78219+1.0;
                double t78221 = c0p*t78220*t78218*2.0;
                double t78222 = rho_a[index]+rho_b[index];
                double t78223 = 1.0/pow(t78222,1.0/3.0);
                double t78224 = c*t78223;
                double t78225 = sqrt(t78224);
                double t78226 = pow(t78224,3.0/2.0);
                double t78227 = 1.0/pow(t78222,2.0/3.0);
                double t78228 = b1p*t78225;
                double t78229 = b3p*t78226;
                double t78230 = b4p*t78227*t78184;
                double t78231 = b2p*c*t78223;
                double t78232 = t78230+t78231+t78228+t78229;
                double t78233 = 1.0/t78232;
                double t78234 = t78233*t78186*(1.0/2.0);
                double t78235 = t78234+1.0;
                double t78236 = log(t78235);
                double t78237 = a1p*c*t78223;
                double t78238 = t78237+1.0;
                double t78239 = c0p*t78236*t78238*2.0;
                double t78240 = rho_a[index]-rho_b[index];
                double t78241 = t78240*t78240;
                double t78242 = 1.0/t78222;
                double t78243 = t78240*t78242;
                double t78244 = 1.0/(t78222*t78222*t78222*t78222);
                double t78245 = t78241*t78241;
                double t78246 = t78243+1.0;
                double t78247 = pow(t78246,4.0/3.0);
                double t78248 = -t78243+1.0;
                double t78249 = pow(t78248,4.0/3.0);
                double t78250 = t78247+t78249-2.0;
                double t78251 = 1.0/pow(rho_b[index],8.0/3.0);
                double t78252 = 1.0/pow(rho_a[index],8.0/3.0);
                double t78253 = gamma_aa[index]*t78252*(1.0/2.0);
                double t78254 = gamma_bb[index]*t78251*(1.0/2.0);
                double t78255 = t78253+t78254;
                double t78256 = gcab*t78255;
                double t78257 = t78256+1.0;
                double t78258 = gcab*gcab;
                double t78259 = t78255*t78255;
                double t78260 = t78258*t78258;
                double t78261 = t78259*t78259;
                double t78262 = t78258*t78259;
                double t78263 = gcab*t78255*2.0;
                double t78264 = t78262+t78263+1.0;
                double t78265 = t78258*t78259*3.0;
                double t78266 = gcab*t78255*t78258*t78259;
                double t78267 = gcab*t78255*3.0;
                double t78268 = t78265+t78266+t78267+1.0;
                double t78269 = t78258*t78259*6.0;
                double t78270 = gcab*t78255*t78258*t78259*4.0;
                double t78271 = t78260*t78261;
                double t78272 = gcab*t78255*4.0;
                double t78273 = t78270+t78271+t78272+t78269+1.0;
                double t78274 = c0p*t78195*t78197*2.0;
                double t78275 = b1f*t78207;
                double t78276 = b3f*t78208;
                double t78277 = b4f*t78209*t78184;
                double t78278 = b2f*c*t78205;
                double t78279 = t78275+t78276+t78277+t78278;
                double t78280 = 1.0/t78279;
                double t78281 = t78204*t78280*(1.0/2.0);
                double t78282 = t78281+1.0;
                double t78283 = log(t78282);
                double t78284 = a1f*c*t78205;
                double t78285 = t78284+1.0;
                double t78295 = c0f*t78283*t78285*2.0;
                double t78286 = t78221-t78295;
                double t78296 = t78200*t78203*t78286;
                double t78287 = t78221-t78296;
                double t78288 = gamma_bb[index]*gamma_bb[index];
                double t78289 = gcaa*gcaa;
                double t78290 = t78288*t78288;
                double t78291 = t78289*t78289;
                double t78292 = 1.0/pow(rho_b[index],3.2E1/3.0);
                double t78293 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]);
                double t78294 = 1.0/pow(rho_b[index],1.6E1/3.0);
                double t78297 = tau_b[index]-1.0/1.0E20;
                double t78298 = ( (t78297 > 0.0) ?  1.0 : 0.0 ) ;
                double t78299 = 1.0/tau_b[index];
                double t78300 = gamma_bb[index]*gcaa*t78251;
                double t78301 = t78300+1.0;
                double t78302 = 1.0/t78301;
                double t78303 = gamma_bb[index]*gcaa*t78251*4.0;
                double t78304 = gamma_bb[index]*gcaa*t78293*t78288*t78289*4.0;
                double t78305 = t78294*t78288*t78289*6.0;
                double t78306 = t78290*t78291*t78292;
                double t78307 = t78303+t78304+t78305+t78306+1.0;
                double t78308 = 1.0/t78307;
                double t78309 = gamma_bb[index]*gcaa*t78251*2.0;
                double t78310 = t78294*t78288*t78289;
                double t78311 = t78310+t78309+1.0;
                double t78312 = 1.0/t78311;
                double t78313 = gamma_bb[index]*gcaa*t78251*3.0;
                double t78314 = gamma_bb[index]*gcaa*t78293*t78288*t78289;
                double t78315 = t78294*t78288*t78289*3.0;
                double t78316 = t78313+t78314+t78315+1.0;
                double t78317 = 1.0/t78316;
                double t78318 = 1.0/rho_b[index];
                double t78319 = 1.0/(k*k);
                double t78320 = rho_b[index]*2.0;
                double t78321 = 1.0/pow(t78320,2.0/3.0);
                double t78322 = pow(rho_b[index],5.0/3.0);
                double t78323 = C_k*t78322*t78299;
                double t78324 = t78323-1.0;
                double t78325 = t78324*t78324;
                double t78326 = t78325*t78325;
                double t78327 = t78326*t78326;
                double t78328 = t78323+1.0;
                v_gamma_bb_[index] = (rho_b[index]*t78287+rho_a[index]*(t78274-t78200*t78203*(t78274-c0f*log((t78204* \
                   (1.0/2.0))/(b1f*t78182+b3f*t78183+b2f*c*t78180+b4f*t78184*t78185)+1.0)*(a1f*c*t78180+1.0)*2.0))-t78222* \
                   (t78239-t78203*t78250*t78244*t78245*(t78239-c0f*log((t78204*(1.0/2.0))/(b1f*t78225+b3f*t78226+b2f* \
                   c*t78223+b4f*t78227*t78184)+1.0)*(a1f*c*t78223+1.0)*2.0)+(Aa*t78203*t78250*log((1.0/2.0)/(Aa*(b1a* \
                   t78225+b3a*t78226+b2a*c*t78223+b4a*t78227*t78184))+1.0)*(t78244*t78245-1.0)*(a1a*c*t78223+1.0)*2.0) \
                   /d2fz0))*((ccab1*gcab*t78251*(1.0/2.0))/t78257-ccab4*t78260*t78261*1.0/(t78273*t78273)*(gcab*t78251* \
                   2.0+t78251*t78255*t78258*6.0+gcab*t78251*t78258*t78259*6.0+t78251*t78260*t78255*t78259*2.0)-ccab2* \
                   1.0/(t78264*t78264)*t78258*t78259*(gcab*t78251+t78251*t78255*t78258)+(ccab2*t78251*t78255*t78258)/ \
                   t78264-ccab1*t78251*t78255*1.0/(t78257*t78257)*t78258*(1.0/2.0)+(ccab3*gcab*t78251*t78258*t78259*(3.0/ \
                   2.0))/t78268+(ccab4*t78251*t78260*t78255*t78259*2.0)/t78273-ccab3*gcab*t78255*t78258*t78259*1.0/(t78268* \
                   t78268)*(gcab*t78251*(3.0/2.0)+t78251*t78255*t78258*3.0+gcab*t78251*t78258*t78259*(3.0/2.0)))+t78287* \
                   t78298*t78299*(ccaa0+ccaa1*gamma_bb[index]*gcaa*t78302*t78251+ccaa4*t78290*t78308*t78291*t78292+ccaa2* \
                   t78312*t78294*t78288*t78289+ccaa3*gamma_bb[index]*gcaa*t78317*t78293*t78288*t78289)*(1.0/8.0)-rho_b[index]* \
                   t78287*(t78298*(t78299*(tau_b[index]*2.0-gamma_bb[index]*t78318*(1.0/4.0))*(1.0/2.0)-1.0)+1.0)*(ccaa1* \
                   gcaa*t78302*t78251+ccaa2*gamma_bb[index]*t78312*t78294*t78289*2.0-ccaa1*gamma_bb[index]*1.0/(t78301* \
                   t78301)*t78294*t78289-ccaa2*1.0/(t78311*t78311)*t78294*t78288*t78289*(gcaa*t78251*2.0+gamma_bb[index]* \
                   t78294*t78289*2.0)-ccaa4*1.0/(t78307*t78307)*t78290*t78291*t78292*(gcaa*t78251*4.0+gamma_bb[index]* \
                   t78294*t78289*1.2E1+gamma_bb[index]*t78291*t78292*t78288*4.0+gcaa*t78293*t78288*t78289*1.2E1)+ccaa4* \
                   gamma_bb[index]*t78308*t78291*t78292*t78288*4.0+ccaa3*gcaa*t78317*t78293*t78288*t78289*3.0-ccaa3*gamma_bb[index]* \
                   gcaa*1.0/(t78316*t78316)*t78293*t78288*t78289*(gcaa*t78251*3.0+gamma_bb[index]*t78294*t78289*6.0+gcaa* \
                   t78293*t78288*t78289*3.0))-mu_*t78321*t78318*t78319*1.0/pow((gamma_bb[index]*mu_*1.0/(rho_b[index]* \
                   rho_b[index])*t78321*t78319*(1.0/4.0))/kp+1.0,2.0)*(X-1.0)*((a_1*t78324)/t78328+a_2*t78325*1.0/(t78328* \
                   t78328)+a_4*t78326*1.0/(t78328*t78328*t78328*t78328)+a_8*t78327*1.0/(t78328*t78328*t78328*t78328*t78328* \
                   t78328*t78328*t78328)+a_10*t78325*t78327*1.0/pow(t78328,1.0E1)+a_3*t78324*t78325*1.0/(t78328*t78328* \
                   t78328)+a_5*t78324*t78326*1.0/(t78328*t78328*t78328*t78328*t78328)+a_6*t78325*t78326*1.0/(t78328*t78328* \
                   t78328*t78328*t78328*t78328)+a_9*t78324*t78327*1.0/(t78328*t78328*t78328*t78328*t78328*t78328*t78328* \
                   t78328*t78328)+a_11*t78324*t78325*t78327*1.0/pow(t78328,1.1E1)+a_7*t78324*t78325*t78326*1.0/(t78328* \
                   t78328*t78328*t78328*t78328*t78328*t78328)+1.0)*(1.0/4.0);
            } else if (rho_a[index] > cutoff_) {
                v_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                double t81911 = 1.0/pow(rho_b[index],1.0/3.0);
                double t81912 = c*t81911;
                double t81913 = sqrt(t81912);
                double t81914 = pow(t81912,3.0/2.0);
                double t81915 = c*c;
                double t81916 = 1.0/pow(rho_b[index],2.0/3.0);
                double t81917 = 1.0/c0p;
                double t81918 = b1p*t81913;
                double t81919 = b3p*t81914;
                double t81920 = b4p*t81915*t81916;
                double t81921 = b2p*c*t81911;
                double t81922 = t81920+t81921+t81918+t81919;
                double t81923 = 1.0/t81922;
                double t81924 = t81923*t81917*(1.0/2.0);
                double t81925 = t81924+1.0;
                double t81926 = log(t81925);
                double t81927 = a1p*c*t81911;
                double t81928 = t81927+1.0;
                double t81929 = gamma_bb[index]*gamma_bb[index];
                double t81930 = gcaa*gcaa;
                double t81931 = t81929*t81929;
                double t81932 = t81930*t81930;
                double t81933 = 1.0/pow(rho_b[index],3.2E1/3.0);
                double t81934 = 1.0/pow(rho_b[index],8.0/3.0);
                double t81935 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]);
                double t81936 = 1.0/pow(rho_b[index],1.6E1/3.0);
                double t81937 = pow(2.0,1.0/3.0);
                double t81938 = t81937*2.0;
                double t81939 = t81938-2.0;
                double t81940 = two_13*2.0;
                double t81941 = t81940-2.0;
                double t81942 = 1.0/t81941;
                double t81943 = 1.0/c0f;
                double t81944 = b1f*t81913;
                double t81945 = b3f*t81914;
                double t81946 = b4f*t81915*t81916;
                double t81947 = b2f*c*t81911;
                double t81948 = t81944+t81945+t81946+t81947;
                double t81949 = 1.0/t81948;
                double t81950 = t81943*t81949*(1.0/2.0);
                double t81951 = t81950+1.0;
                double t81952 = log(t81951);
                double t81953 = a1f*c*t81911;
                double t81954 = t81953+1.0;
                double t81955 = c0f*t81952*t81954*2.0;
                double t81956 = c0p*t81926*t81928*2.0;
                double t81957 = tau_b[index]-1.0/1.0E20;
                double t81958 = ( (t81957 > 0.0) ?  1.0 : 0.0 ) ;
                double t81959 = 1.0/tau_b[index];
                double t81960 = gamma_bb[index]*gcaa*t81934;
                double t81961 = t81960+1.0;
                double t81962 = 1.0/t81961;
                double t81963 = gamma_bb[index]*gcaa*t81934*4.0;
                double t81964 = gamma_bb[index]*gcaa*t81930*t81935*t81929*4.0;
                double t81965 = t81930*t81936*t81929*6.0;
                double t81966 = t81931*t81932*t81933;
                double t81967 = t81963+t81964+t81965+t81966+1.0;
                double t81968 = 1.0/t81967;
                double t81969 = gamma_bb[index]*gcaa*t81934*2.0;
                double t81970 = t81930*t81936*t81929;
                double t81971 = t81970+t81969+1.0;
                double t81972 = 1.0/t81971;
                double t81973 = gamma_bb[index]*gcaa*t81934*3.0;
                double t81974 = gamma_bb[index]*gcaa*t81930*t81935*t81929;
                double t81975 = t81930*t81936*t81929*3.0;
                double t81976 = t81973+t81974+t81975+1.0;
                double t81977 = 1.0/t81976;
                double t81978 = 1.0/rho_b[index];
                double t81979 = 1.0/(k*k);
                double t81980 = rho_b[index]*2.0;
                double t81981 = 1.0/pow(t81980,2.0/3.0);
                double t81982 = pow(rho_b[index],5.0/3.0);
                double t81983 = C_k*t81982*t81959;
                double t81984 = t81983-1.0;
                double t81985 = t81984*t81984;
                double t81986 = t81985*t81985;
                double t81987 = t81986*t81986;
                double t81988 = t81983+1.0;
                v_gamma_bb_[index] = -rho_b[index]*(t81956+t81942*t81939*(t81955-t81956))*(t81958*(t81959*(tau_b[index]* \
                   2.0-gamma_bb[index]*t81978*(1.0/4.0))*(1.0/2.0)-1.0)+1.0)*(ccaa1*gcaa*t81934*t81962+ccaa2*gamma_bb[index]* \
                   t81930*t81936*t81972*2.0-ccaa1*gamma_bb[index]*t81930*1.0/(t81961*t81961)*t81936-ccaa2*t81930*1.0/ \
                   (t81971*t81971)*t81936*t81929*(gcaa*t81934*2.0+gamma_bb[index]*t81930*t81936*2.0)-ccaa4*t81931*t81932* \
                   t81933*1.0/(t81967*t81967)*(gcaa*t81934*4.0+gamma_bb[index]*t81930*t81936*1.2E1+gamma_bb[index]*t81932* \
                   t81933*t81929*4.0+gcaa*t81930*t81935*t81929*1.2E1)+ccaa4*gamma_bb[index]*t81932*t81933*t81929*t81968* \
                   4.0+ccaa3*gcaa*t81930*t81935*t81929*t81977*3.0-ccaa3*gamma_bb[index]*gcaa*t81930*t81935*t81929*1.0/ \
                   (t81976*t81976)*(gcaa*t81934*3.0+gamma_bb[index]*t81930*t81936*6.0+gcaa*t81930*t81935*t81929*3.0)) \
                   +t81958*t81959*(t81956+t81942*t81939*(t81955-c0p*t81926*t81928*2.0))*(ccaa0+ccaa1*gamma_bb[index]* \
                   gcaa*t81934*t81962+ccaa4*t81931*t81932*t81933*t81968+ccaa2*t81930*t81936*t81972*t81929+ccaa3*gamma_bb[index]* \
                   gcaa*t81930*t81935*t81929*t81977)*(1.0/8.0)-mu_*t81981*t81978*t81979*1.0/pow((gamma_bb[index]*mu_* \
                   1.0/(rho_b[index]*rho_b[index])*t81981*t81979*(1.0/4.0))/kp+1.0,2.0)*(X-1.0)*((a_1*t81984)/t81988+ \
                   a_2*t81985*1.0/(t81988*t81988)+a_4*t81986*1.0/(t81988*t81988*t81988*t81988)+a_8*t81987*1.0/(t81988* \
                   t81988*t81988*t81988*t81988*t81988*t81988*t81988)+a_10*t81985*t81987*1.0/pow(t81988,1.0E1)+a_3*t81984* \
                   t81985*1.0/(t81988*t81988*t81988)+a_5*t81984*t81986*1.0/(t81988*t81988*t81988*t81988*t81988)+a_6*t81985* \
                   t81986*1.0/(t81988*t81988*t81988*t81988*t81988*t81988)+a_9*t81984*t81987*1.0/(t81988*t81988*t81988* \
                   t81988*t81988*t81988*t81988*t81988*t81988)+a_11*t81984*t81985*t81987*1.0/pow(t81988,1.1E1)+a_7*t81984* \
                   t81985*t81986*1.0/(t81988*t81988*t81988*t81988*t81988*t81988*t81988)+1.0)*(1.0/4.0);
            } else {
                v_gamma_bb_[index] = 0.0;
            } 
        }
        if (is_meta_) {

            //V_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t78330 = pow(rho_a[index],5.0/3.0);
                double t78331 = 1.0/(tau_a[index]*tau_a[index]);
                double t78332 = 1.0/tau_a[index];
                double t78333 = C_k*t78330*t78332;
                double t78334 = t78333+1.0;
                double t78335 = t78333-1.0;
                double t78336 = 1.0/(t78334*t78334);
                double t78337 = t78335*t78335;
                double t78338 = t78337*t78337;
                double t78339 = t78338*t78338;
                double t78340 = 1.0/pow(t78334,1.1E1);
                double t78341 = 1.0/(t78334*t78334*t78334);
                double t78342 = 1.0/(t78334*t78334*t78334*t78334);
                double t78343 = 1.0/(t78334*t78334*t78334*t78334*t78334);
                double t78344 = 1.0/(t78334*t78334*t78334*t78334*t78334*t78334);
                double t78345 = 1.0/(t78334*t78334*t78334*t78334*t78334*t78334*t78334);
                double t78346 = 1.0/(t78334*t78334*t78334*t78334*t78334*t78334*t78334*t78334);
                double t78347 = 1.0/(t78334*t78334*t78334*t78334*t78334*t78334*t78334*t78334*t78334);
                double t78348 = 1.0/pow(t78334,1.0E1);
                double t78349 = 1.0/pow(rho_a[index],1.0/3.0);
                double t78350 = c*t78349;
                double t78351 = sqrt(t78350);
                double t78352 = pow(t78350,3.0/2.0);
                double t78353 = c*c;
                double t78354 = 1.0/pow(rho_a[index],2.0/3.0);
                double t78355 = 1.0/c0p;
                double t78356 = b1p*t78351;
                double t78357 = b3p*t78352;
                double t78358 = b4p*t78353*t78354;
                double t78359 = b2p*c*t78349;
                double t78360 = t78356+t78357+t78358+t78359;
                double t78361 = 1.0/t78360;
                double t78362 = t78361*t78355*(1.0/2.0);
                double t78363 = t78362+1.0;
                double t78364 = log(t78363);
                double t78365 = a1p*c*t78349;
                double t78366 = t78365+1.0;
                double t78367 = tau_a[index]-1.0/1.0E20;
                double t78368 = tau_a[index]*2.0;
                double t78369 = 1.0/rho_a[index];
                double t78370 = t78368-gamma_aa[index]*t78369*(1.0/4.0);
                double t78371 = gamma_aa[index]*gamma_aa[index];
                double t78372 = gcaa*gcaa;
                double t78373 = t78371*t78371;
                double t78374 = t78372*t78372;
                double t78375 = 1.0/pow(rho_a[index],3.2E1/3.0);
                double t78376 = 1.0/pow(rho_a[index],8.0/3.0);
                double t78377 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t78378 = 1.0/pow(rho_a[index],1.6E1/3.0);
                v_tau_a_[index] = -rho_a[index]*(((pow(2.0,1.0/3.0)*2.0-2.0)*(c0f*log((1.0/2.0)/(c0f*(b1f*t78351+ \
                   b3f*t78352+b2f*c*t78349+b4f*t78353*t78354))+1.0)*(a1f*c*t78349+1.0)*2.0-c0p*t78364*t78366*2.0))/(two_13* \
                   2.0-2.0)+c0p*t78364*t78366*2.0)*( ( (t78367 > 0.0) ? 1.0*(t78332-t78331*t78370*(1.0/2.0)) : 0.0 )  \
                   + 0.0 )*(ccaa0+(ccaa2*t78371*t78372*t78378)/(gamma_aa[index]*gcaa*t78376*2.0+t78371*t78372*t78378+ \
                   1.0)+(ccaa1*gamma_aa[index]*gcaa*t78376)/(gamma_aa[index]*gcaa*t78376+1.0)+(ccaa4*t78373*t78374*t78375) \
                   /(gamma_aa[index]*gcaa*t78376*4.0+t78371*t78372*t78378*6.0+t78373*t78374*t78375+gamma_aa[index]*gcaa* \
                   t78371*t78372*t78377*4.0+1.0)+(ccaa3*gamma_aa[index]*gcaa*t78371*t78372*t78377)/(gamma_aa[index]*gcaa* \
                   t78376*3.0+t78371*t78372*t78378*3.0+gamma_aa[index]*gcaa*t78371*t78372*t78377+1.0))+rho_a[index]*(X- \
                   1.0)*(kp-kp/((gamma_aa[index]*1.0/(k*k)*mu_*1.0/(rho_a[index]*rho_a[index])*1.0/pow(rho_a[index]*2.0,2.0/ \
                   3.0)*(1.0/4.0))/kp+1.0)+1.0)*((C_k*a_1*t78330*t78331)/t78334-C_k*a_1*t78330*t78331*t78335*t78336-C_k* \
                   a_2*t78330*t78331*t78341*t78337*2.0+C_k*a_2*t78330*t78331*t78335*t78336*2.0+C_k*a_3*t78330*t78331* \
                   t78341*t78337*3.0-C_k*a_4*t78330*t78331*t78343*t78338*4.0+C_k*a_5*t78330*t78331*t78343*t78338*5.0- \
                   C_k*a_8*t78330*t78331*t78347*t78339*8.0+C_k*a_9*t78330*t78331*t78347*t78339*9.0-C_k*a_10*t78330*t78331* \
                   t78340*t78337*t78339*1.0E1+C_k*a_11*t78330*t78331*t78340*t78337*t78339*1.1E1+C_k*a_10*t78330*t78331* \
                   t78335*t78339*t78348*1.0E1-C_k*a_3*t78330*t78331*t78342*t78335*t78337*3.0+C_k*a_4*t78330*t78331*t78342* \
                   t78335*t78337*4.0-C_k*a_5*t78330*t78331*t78335*t78344*t78338*5.0+C_k*a_6*t78330*t78331*t78335*t78344* \
                   t78338*6.0-C_k*a_6*t78330*t78331*t78345*t78337*t78338*6.0+C_k*a_7*t78330*t78331*t78345*t78337*t78338* \
                   7.0-C_k*a_9*t78330*t78331*t78335*t78339*t78348*9.0-C_k*a_11*t78330*t78331*1.0/pow(t78334,1.2E1)*t78335* \
                   t78337*t78339*1.1E1-C_k*a_7*t78330*t78331*t78335*t78337*t78346*t78338*7.0+C_k*a_8*t78330*t78331*t78335* \
                   t78337*t78346*t78338*8.0);
            } else if (rho_a[index] > cutoff_) {
                double t83117 = pow(rho_a[index],5.0/3.0);
                double t83118 = 1.0/(tau_a[index]*tau_a[index]);
                double t83119 = 1.0/tau_a[index];
                double t83120 = C_k*t83117*t83119;
                double t83121 = t83120+1.0;
                double t83122 = t83120-1.0;
                double t83123 = 1.0/(t83121*t83121);
                double t83124 = t83122*t83122;
                double t83125 = t83124*t83124;
                double t83126 = t83125*t83125;
                double t83127 = 1.0/pow(t83121,1.1E1);
                double t83128 = 1.0/(t83121*t83121*t83121);
                double t83129 = 1.0/(t83121*t83121*t83121*t83121);
                double t83130 = 1.0/(t83121*t83121*t83121*t83121*t83121);
                double t83131 = 1.0/(t83121*t83121*t83121*t83121*t83121*t83121);
                double t83132 = 1.0/(t83121*t83121*t83121*t83121*t83121*t83121*t83121);
                double t83133 = 1.0/(t83121*t83121*t83121*t83121*t83121*t83121*t83121*t83121);
                double t83134 = 1.0/(t83121*t83121*t83121*t83121*t83121*t83121*t83121*t83121*t83121);
                double t83135 = 1.0/pow(t83121,1.0E1);
                double t83136 = 1.0/pow(rho_a[index],1.0/3.0);
                double t83137 = c*t83136;
                double t83138 = sqrt(t83137);
                double t83139 = pow(t83137,3.0/2.0);
                double t83140 = c*c;
                double t83141 = 1.0/pow(rho_a[index],2.0/3.0);
                double t83142 = 1.0/c0p;
                double t83143 = b1p*t83138;
                double t83144 = b3p*t83139;
                double t83145 = b4p*t83140*t83141;
                double t83146 = b2p*c*t83136;
                double t83147 = t83143+t83144+t83145+t83146;
                double t83148 = 1.0/t83147;
                double t83149 = t83142*t83148*(1.0/2.0);
                double t83150 = t83149+1.0;
                double t83151 = log(t83150);
                double t83152 = a1p*c*t83136;
                double t83153 = t83152+1.0;
                double t83154 = tau_a[index]-1.0/1.0E20;
                double t83155 = tau_a[index]*2.0;
                double t83156 = 1.0/rho_a[index];
                double t83157 = t83155-gamma_aa[index]*t83156*(1.0/4.0);
                double t83158 = gamma_aa[index]*gamma_aa[index];
                double t83159 = gcaa*gcaa;
                double t83160 = t83158*t83158;
                double t83161 = t83159*t83159;
                double t83162 = 1.0/pow(rho_a[index],3.2E1/3.0);
                double t83163 = 1.0/pow(rho_a[index],8.0/3.0);
                double t83164 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t83165 = 1.0/pow(rho_a[index],1.6E1/3.0);
                v_tau_a_[index] = -rho_a[index]*(((pow(2.0,1.0/3.0)*2.0-2.0)*(c0f*log((1.0/2.0)/(c0f*(b1f*t83138+ \
                   b3f*t83139+b2f*c*t83136+b4f*t83140*t83141))+1.0)*(a1f*c*t83136+1.0)*2.0-c0p*t83151*t83153*2.0))/(two_13* \
                   2.0-2.0)+c0p*t83151*t83153*2.0)*( ( (t83154 > 0.0) ? 1.0*(t83119-t83118*t83157*(1.0/2.0)) : 0.0 )  \
                   + 0.0 )*(ccaa0+(ccaa2*t83165*t83158*t83159)/(gamma_aa[index]*gcaa*t83163*2.0+t83165*t83158*t83159+ \
                   1.0)+(ccaa1*gamma_aa[index]*gcaa*t83163)/(gamma_aa[index]*gcaa*t83163+1.0)+(ccaa4*t83160*t83161*t83162) \
                   /(gamma_aa[index]*gcaa*t83163*4.0+t83160*t83161*t83162+t83165*t83158*t83159*6.0+gamma_aa[index]*gcaa* \
                   t83164*t83158*t83159*4.0+1.0)+(ccaa3*gamma_aa[index]*gcaa*t83164*t83158*t83159)/(gamma_aa[index]*gcaa* \
                   t83163*3.0+t83165*t83158*t83159*3.0+gamma_aa[index]*gcaa*t83164*t83158*t83159+1.0))+rho_a[index]*(X- \
                   1.0)*(kp-kp/((gamma_aa[index]*1.0/(k*k)*mu_*1.0/(rho_a[index]*rho_a[index])*1.0/pow(rho_a[index]*2.0,2.0/ \
                   3.0)*(1.0/4.0))/kp+1.0)+1.0)*((C_k*a_1*t83117*t83118)/t83121-C_k*a_1*t83122*t83123*t83117*t83118+C_k* \
                   a_2*t83122*t83123*t83117*t83118*2.0-C_k*a_2*t83124*t83117*t83118*t83128*2.0+C_k*a_3*t83124*t83117* \
                   t83118*t83128*3.0-C_k*a_4*t83130*t83125*t83117*t83118*4.0+C_k*a_5*t83130*t83125*t83117*t83118*5.0- \
                   C_k*a_8*t83134*t83117*t83126*t83118*8.0+C_k*a_9*t83134*t83117*t83126*t83118*9.0+C_k*a_10*t83122*t83117* \
                   t83126*t83135*t83118*1.0E1-C_k*a_10*t83124*t83117*t83126*t83118*t83127*1.0E1+C_k*a_11*t83124*t83117* \
                   t83126*t83118*t83127*1.1E1-C_k*a_3*t83122*t83124*t83117*t83118*t83129*3.0+C_k*a_4*t83122*t83124*t83117* \
                   t83118*t83129*4.0-C_k*a_5*t83122*t83131*t83125*t83117*t83118*5.0+C_k*a_6*t83122*t83131*t83125*t83117* \
                   t83118*6.0-C_k*a_6*t83132*t83124*t83125*t83117*t83118*6.0+C_k*a_7*t83132*t83124*t83125*t83117*t83118* \
                   7.0-C_k*a_9*t83122*t83117*t83126*t83135*t83118*9.0-C_k*a_11*1.0/pow(t83121,1.2E1)*t83122*t83124*t83117* \
                   t83126*t83118*1.1E1-C_k*a_7*t83122*t83124*t83133*t83125*t83117*t83118*7.0+C_k*a_8*t83122*t83124*t83133* \
                   t83125*t83117*t83118*8.0);
            } else if (rho_b[index] > cutoff_) {
                v_tau_a_[index] = 0.0;
            } else {
                v_tau_a_[index] = 0.0;
            } 

            //V_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t78380 = pow(rho_b[index],5.0/3.0);
                double t78381 = 1.0/(tau_b[index]*tau_b[index]);
                double t78382 = 1.0/tau_b[index];
                double t78383 = C_k*t78380*t78382;
                double t78384 = t78383+1.0;
                double t78385 = t78383-1.0;
                double t78386 = 1.0/(t78384*t78384);
                double t78387 = t78385*t78385;
                double t78388 = t78387*t78387;
                double t78389 = t78388*t78388;
                double t78390 = 1.0/pow(t78384,1.1E1);
                double t78391 = 1.0/(t78384*t78384*t78384);
                double t78392 = 1.0/(t78384*t78384*t78384*t78384);
                double t78393 = 1.0/(t78384*t78384*t78384*t78384*t78384);
                double t78394 = 1.0/(t78384*t78384*t78384*t78384*t78384*t78384);
                double t78395 = 1.0/(t78384*t78384*t78384*t78384*t78384*t78384*t78384);
                double t78396 = 1.0/(t78384*t78384*t78384*t78384*t78384*t78384*t78384*t78384);
                double t78397 = 1.0/(t78384*t78384*t78384*t78384*t78384*t78384*t78384*t78384*t78384);
                double t78398 = 1.0/pow(t78384,1.0E1);
                double t78399 = 1.0/pow(rho_b[index],1.0/3.0);
                double t78400 = c*t78399;
                double t78401 = sqrt(t78400);
                double t78402 = pow(t78400,3.0/2.0);
                double t78403 = c*c;
                double t78404 = 1.0/pow(rho_b[index],2.0/3.0);
                double t78405 = 1.0/c0p;
                double t78406 = b1p*t78401;
                double t78407 = b3p*t78402;
                double t78408 = b4p*t78403*t78404;
                double t78409 = b2p*c*t78399;
                double t78410 = t78406+t78407+t78408+t78409;
                double t78411 = 1.0/t78410;
                double t78412 = t78411*t78405*(1.0/2.0);
                double t78413 = t78412+1.0;
                double t78414 = log(t78413);
                double t78415 = a1p*c*t78399;
                double t78416 = t78415+1.0;
                double t78417 = tau_b[index]-1.0/1.0E20;
                double t78418 = tau_b[index]*2.0;
                double t78419 = 1.0/rho_b[index];
                double t78420 = t78418-gamma_bb[index]*t78419*(1.0/4.0);
                double t78421 = gamma_bb[index]*gamma_bb[index];
                double t78422 = gcaa*gcaa;
                double t78423 = t78421*t78421;
                double t78424 = t78422*t78422;
                double t78425 = 1.0/pow(rho_b[index],3.2E1/3.0);
                double t78426 = 1.0/pow(rho_b[index],8.0/3.0);
                double t78427 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]);
                double t78428 = 1.0/pow(rho_b[index],1.6E1/3.0);
                v_tau_b_[index] = -rho_b[index]*(((pow(2.0,1.0/3.0)*2.0-2.0)*(c0f*log((1.0/2.0)/(c0f*(b1f*t78401+ \
                   b3f*t78402+b2f*c*t78399+b4f*t78403*t78404))+1.0)*(a1f*c*t78399+1.0)*2.0-c0p*t78414*t78416*2.0))/(two_13* \
                   2.0-2.0)+c0p*t78414*t78416*2.0)*( ( (t78417 > 0.0) ? 1.0*(t78382-t78420*t78381*(1.0/2.0)) : 0.0 )  \
                   + 0.0 )*(ccaa0+(ccaa2*t78421*t78422*t78428)/(gamma_bb[index]*gcaa*t78426*2.0+t78421*t78422*t78428+ \
                   1.0)+(ccaa1*gamma_bb[index]*gcaa*t78426)/(gamma_bb[index]*gcaa*t78426+1.0)+(ccaa4*t78423*t78424*t78425) \
                   /(gamma_bb[index]*gcaa*t78426*4.0+t78421*t78422*t78428*6.0+t78423*t78424*t78425+gamma_bb[index]*gcaa* \
                   t78421*t78422*t78427*4.0+1.0)+(ccaa3*gamma_bb[index]*gcaa*t78421*t78422*t78427)/(gamma_bb[index]*gcaa* \
                   t78426*3.0+t78421*t78422*t78428*3.0+gamma_bb[index]*gcaa*t78421*t78422*t78427+1.0))+rho_b[index]*(X- \
                   1.0)*(kp-kp/((gamma_bb[index]*1.0/(k*k)*mu_*1.0/(rho_b[index]*rho_b[index])*1.0/pow(rho_b[index]*2.0,2.0/ \
                   3.0)*(1.0/4.0))/kp+1.0)+1.0)*((C_k*a_1*t78380*t78381)/t78384-C_k*a_1*t78380*t78381*t78385*t78386-C_k* \
                   a_2*t78380*t78381*t78391*t78387*2.0+C_k*a_2*t78380*t78381*t78385*t78386*2.0+C_k*a_3*t78380*t78381* \
                   t78391*t78387*3.0-C_k*a_4*t78380*t78381*t78393*t78388*4.0+C_k*a_5*t78380*t78381*t78393*t78388*5.0- \
                   C_k*a_8*t78380*t78381*t78397*t78389*8.0+C_k*a_9*t78380*t78381*t78397*t78389*9.0-C_k*a_10*t78380*t78381* \
                   t78390*t78387*t78389*1.0E1+C_k*a_11*t78380*t78381*t78390*t78387*t78389*1.1E1+C_k*a_10*t78380*t78381* \
                   t78385*t78389*t78398*1.0E1-C_k*a_3*t78380*t78381*t78392*t78385*t78387*3.0+C_k*a_4*t78380*t78381*t78392* \
                   t78385*t78387*4.0-C_k*a_5*t78380*t78381*t78385*t78394*t78388*5.0+C_k*a_6*t78380*t78381*t78385*t78394* \
                   t78388*6.0-C_k*a_6*t78380*t78381*t78395*t78387*t78388*6.0+C_k*a_7*t78380*t78381*t78395*t78387*t78388* \
                   7.0-C_k*a_9*t78380*t78381*t78385*t78389*t78398*9.0-C_k*a_11*t78380*t78381*1.0/pow(t78384,1.2E1)*t78385* \
                   t78387*t78389*1.1E1-C_k*a_7*t78380*t78381*t78385*t78387*t78396*t78388*7.0+C_k*a_8*t78380*t78381*t78385* \
                   t78387*t78396*t78388*8.0);
            } else if (rho_a[index] > cutoff_) {
                v_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                double t81991 = pow(rho_b[index],5.0/3.0);
                double t81992 = 1.0/(tau_b[index]*tau_b[index]);
                double t81993 = 1.0/tau_b[index];
                double t81994 = C_k*t81991*t81993;
                double t81995 = t81994+1.0;
                double t81996 = t81994-1.0;
                double t81997 = 1.0/(t81995*t81995);
                double t81998 = t81996*t81996;
                double t81999 = t81998*t81998;
                double t82000 = t81999*t81999;
                double t82001 = 1.0/pow(t81995,1.1E1);
                double t82002 = 1.0/(t81995*t81995*t81995);
                double t82003 = 1.0/(t81995*t81995*t81995*t81995);
                double t82004 = 1.0/(t81995*t81995*t81995*t81995*t81995);
                double t82005 = 1.0/(t81995*t81995*t81995*t81995*t81995*t81995);
                double t82006 = 1.0/(t81995*t81995*t81995*t81995*t81995*t81995*t81995);
                double t82007 = 1.0/(t81995*t81995*t81995*t81995*t81995*t81995*t81995*t81995);
                double t82008 = 1.0/(t81995*t81995*t81995*t81995*t81995*t81995*t81995*t81995*t81995);
                double t82009 = 1.0/pow(t81995,1.0E1);
                double t82010 = 1.0/pow(rho_b[index],1.0/3.0);
                double t82011 = c*t82010;
                double t82012 = sqrt(t82011);
                double t82013 = pow(t82011,3.0/2.0);
                double t82014 = c*c;
                double t82015 = 1.0/pow(rho_b[index],2.0/3.0);
                double t82016 = 1.0/c0p;
                double t82017 = b1p*t82012;
                double t82018 = b3p*t82013;
                double t82019 = b4p*t82014*t82015;
                double t82020 = b2p*c*t82010;
                double t82021 = t82020+t82017+t82018+t82019;
                double t82022 = 1.0/t82021;
                double t82023 = t82022*t82016*(1.0/2.0);
                double t82024 = t82023+1.0;
                double t82025 = log(t82024);
                double t82026 = a1p*c*t82010;
                double t82027 = t82026+1.0;
                double t82028 = tau_b[index]-1.0/1.0E20;
                double t82029 = tau_b[index]*2.0;
                double t82030 = 1.0/rho_b[index];
                double t82031 = t82029-gamma_bb[index]*t82030*(1.0/4.0);
                double t82032 = gamma_bb[index]*gamma_bb[index];
                double t82033 = gcaa*gcaa;
                double t82034 = t82032*t82032;
                double t82035 = t82033*t82033;
                double t82036 = 1.0/pow(rho_b[index],3.2E1/3.0);
                double t82037 = 1.0/pow(rho_b[index],8.0/3.0);
                double t82038 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]);
                double t82039 = 1.0/pow(rho_b[index],1.6E1/3.0);
                v_tau_b_[index] = -rho_b[index]*(((pow(2.0,1.0/3.0)*2.0-2.0)*(c0f*log((1.0/2.0)/(c0f*(b1f*t82012+ \
                   b3f*t82013+b2f*c*t82010+b4f*t82014*t82015))+1.0)*(a1f*c*t82010+1.0)*2.0-c0p*t82025*t82027*2.0))/(two_13* \
                   2.0-2.0)+c0p*t82025*t82027*2.0)*( ( (t82028 > 0.0) ? 1.0*(t81993-t81992*t82031*(1.0/2.0)) : 0.0 )  \
                   + 0.0 )*(ccaa0+(ccaa2*t82032*t82033*t82039)/(gamma_bb[index]*gcaa*t82037*2.0+t82032*t82033*t82039+ \
                   1.0)+(ccaa1*gamma_bb[index]*gcaa*t82037)/(gamma_bb[index]*gcaa*t82037+1.0)+(ccaa4*t82034*t82035*t82036) \
                   /(gamma_bb[index]*gcaa*t82037*4.0+t82032*t82033*t82039*6.0+t82034*t82035*t82036+gamma_bb[index]*gcaa* \
                   t82032*t82033*t82038*4.0+1.0)+(ccaa3*gamma_bb[index]*gcaa*t82032*t82033*t82038)/(gamma_bb[index]*gcaa* \
                   t82037*3.0+t82032*t82033*t82039*3.0+gamma_bb[index]*gcaa*t82032*t82033*t82038+1.0))+rho_b[index]*(X- \
                   1.0)*(kp-kp/((gamma_bb[index]*1.0/(k*k)*mu_*1.0/(rho_b[index]*rho_b[index])*1.0/pow(rho_b[index]*2.0,2.0/ \
                   3.0)*(1.0/4.0))/kp+1.0)+1.0)*((C_k*a_1*t81991*t81992)/t81995-C_k*a_1*t81991*t81992*t81996*t81997+C_k* \
                   a_2*t81991*t81992*t81996*t81997*2.0-C_k*a_2*t81991*t81992*t81998*t82002*2.0+C_k*a_3*t81991*t81992* \
                   t81998*t82002*3.0-C_k*a_4*t81991*t81992*t81999*t82004*4.0+C_k*a_5*t81991*t81992*t81999*t82004*5.0- \
                   C_k*a_8*t81991*t81992*t82000*t82008*8.0+C_k*a_9*t81991*t81992*t82000*t82008*9.0-C_k*a_10*t81991*t81992* \
                   t81998*t82000*t82001*1.0E1+C_k*a_11*t81991*t81992*t81998*t82000*t82001*1.1E1+C_k*a_10*t81991*t81992* \
                   t81996*t82000*t82009*1.0E1-C_k*a_3*t81991*t81992*t81996*t81998*t82003*3.0+C_k*a_4*t81991*t81992*t81996* \
                   t81998*t82003*4.0-C_k*a_5*t81991*t81992*t81996*t81999*t82005*5.0+C_k*a_6*t81991*t81992*t81996*t81999* \
                   t82005*6.0-C_k*a_6*t81991*t81992*t81998*t81999*t82006*6.0+C_k*a_7*t81991*t81992*t81998*t81999*t82006* \
                   7.0-C_k*a_9*t81991*t81992*t81996*t82000*t82009*9.0-C_k*a_11*t81991*t81992*1.0/pow(t81995,1.2E1)*t81996* \
                   t81998*t82000*1.1E1-C_k*a_7*t81991*t81992*t81996*t81998*t81999*t82007*7.0+C_k*a_8*t81991*t81992*t81996* \
                   t81998*t81999*t82007*8.0);
            } else {
                v_tau_b_[index] = 0.0;
            } 
        }
    }
    //Second Partials
    for (int index = 0; index < ntrue && deriv_ >= 2; index++) {

        //V_rho_a_rho_a
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t78430 = rho_a[index]+rho_b[index];
            double t78431 = 1.0/pow(t78430,1.0/3.0);
            double t78432 = c*t78431;
            double t78433 = sqrt(t78432);
            double t78434 = b1p*t78433;
            double t78435 = pow(t78432,3.0/2.0);
            double t78436 = b3p*t78435;
            double t78437 = c*c;
            double t78438 = 1.0/pow(t78430,2.0/3.0);
            double t78439 = b4p*t78437*t78438;
            double t78440 = b2p*c*t78431;
            double t78441 = t78440+t78434+t78436+t78439;
            double t78442 = 1.0/pow(t78430,4.0/3.0);
            double t78443 = 1.0/c0p;
            double t78444 = 1.0/t78441;
            double t78445 = t78443*t78444*(1.0/2.0);
            double t78446 = t78445+1.0;
            double t78447 = a1p*c*t78431;
            double t78448 = t78447+1.0;
            double t78449 = rho_a[index]-rho_b[index];
            double t78450 = t78449*t78449;
            double t78451 = 1.0/t78430;
            double t78452 = t78451*t78449;
            double t78453 = two_13*2.0;
            double t78454 = t78453-2.0;
            double t78455 = 1.0/t78454;
            double t78456 = 1.0/c0f;
            double t78457 = b1f*t78433;
            double t78458 = b3f*t78435;
            double t78459 = b4f*t78437*t78438;
            double t78460 = b2f*c*t78431;
            double t78461 = t78460+t78457+t78458+t78459;
            double t78462 = 1.0/t78461;
            double t78463 = t78462*t78456*(1.0/2.0);
            double t78464 = t78463+1.0;
            double t78465 = log(t78464);
            double t78466 = a1f*c*t78431;
            double t78467 = t78466+1.0;
            double t78468 = log(t78446);
            double t78478 = c0f*t78465*t78467*2.0;
            double t78479 = c0p*t78448*t78468*2.0;
            double t78469 = t78478-t78479;
            double t78470 = t78452+1.0;
            double t78471 = pow(t78470,4.0/3.0);
            double t78472 = -t78452+1.0;
            double t78473 = pow(t78472,4.0/3.0);
            double t78474 = t78471+t78473-2.0;
            double t78475 = 1.0/(t78430*t78430);
            double t78506 = t78475*t78449;
            double t78476 = t78451-t78506;
            double t78477 = 1.0/(t78430*t78430*t78430*t78430);
            double t78480 = t78450*t78450;
            double t78481 = 1.0/pow(t78430,5.0/3.0);
            double t78482 = 1.0/sqrt(t78432);
            double t78483 = 1.0/t78446;
            double t78484 = 1.0/(t78441*t78441);
            double t78485 = b4p*t78481*t78437*(2.0/3.0);
            double t78486 = b2p*c*t78442*(1.0/3.0);
            double t78487 = b1p*c*t78442*t78482*(1.0/6.0);
            double t78488 = b3p*c*t78433*t78442*(1.0/2.0);
            double t78489 = t78485+t78486+t78487+t78488;
            double t78490 = t78483*t78448*t78484*t78489;
            double t78491 = 1.0/(t78430*t78430*t78430*t78430*t78430);
            double t78492 = 1.0/d2fz0;
            double t78493 = 1.0/Aa;
            double t78494 = b1a*t78433;
            double t78495 = b3a*t78435;
            double t78496 = b4a*t78437*t78438;
            double t78497 = b2a*c*t78431;
            double t78498 = t78494+t78495+t78496+t78497;
            double t78499 = 1.0/t78498;
            double t78500 = t78493*t78499*(1.0/2.0);
            double t78501 = t78500+1.0;
            double t78502 = log(t78501);
            double t78503 = a1a*c*t78431;
            double t78504 = t78503+1.0;
            double t78505 = pow(t78470,1.0/3.0);
            double t78507 = t78505*t78476*(4.0/3.0);
            double t78508 = pow(t78472,1.0/3.0);
            double t78583 = t78508*t78476*(4.0/3.0);
            double t78509 = t78507-t78583;
            double t78510 = t78480*t78477;
            double t78511 = t78510-1.0;
            double t78512 = 1.0/pow(rho_a[index],1.0/3.0);
            double t78513 = c*t78512;
            double t78514 = sqrt(t78513);
            double t78515 = b1f*t78514;
            double t78516 = pow(t78513,3.0/2.0);
            double t78517 = b3f*t78516;
            double t78518 = 1.0/pow(rho_a[index],2.0/3.0);
            double t78519 = b4f*t78437*t78518;
            double t78520 = b2f*c*t78512;
            double t78521 = t78520+t78515+t78517+t78519;
            double t78522 = 1.0/pow(rho_a[index],4.0/3.0);
            double t78523 = b1p*t78514;
            double t78524 = b3p*t78516;
            double t78525 = b4p*t78437*t78518;
            double t78526 = b2p*c*t78512;
            double t78527 = t78523+t78524+t78525+t78526;
            double t78528 = 1.0/pow(rho_a[index],5.0/3.0);
            double t78529 = 1.0/sqrt(t78513);
            double t78530 = 1.0/t78521;
            double t78531 = t78530*t78456*(1.0/2.0);
            double t78532 = t78531+1.0;
            double t78533 = 1.0/t78527;
            double t78534 = t78443*t78533*(1.0/2.0);
            double t78535 = t78534+1.0;
            double t78536 = a1p*c*t78512;
            double t78537 = t78536+1.0;
            double t78538 = 1.0/t78535;
            double t78539 = 1.0/(t78527*t78527);
            double t78540 = b4p*t78437*t78528*(2.0/3.0);
            double t78541 = b2p*c*t78522*(1.0/3.0);
            double t78542 = b1p*c*t78522*t78529*(1.0/6.0);
            double t78543 = b3p*c*t78522*t78514*(1.0/2.0);
            double t78544 = t78540+t78541+t78542+t78543;
            double t78545 = t78544*t78537*t78538*t78539;
            double t78546 = log(t78535);
            double t78547 = pow(2.0,1.0/3.0);
            double t78548 = t78547*2.0;
            double t78549 = t78548-2.0;
            double t78550 = log(t78532);
            double t78551 = a1f*c*t78512;
            double t78552 = t78551+1.0;
            double t78553 = gcab*gcab;
            double t78557 = 1.0/pow(rho_a[index],8.0/3.0);
            double t78558 = gamma_aa[index]*t78557*(1.0/2.0);
            double t78559 = 1.0/pow(rho_b[index],8.0/3.0);
            double t78560 = gamma_bb[index]*t78559*(1.0/2.0);
            double t78554 = t78560+t78558;
            double t78555 = t78554*t78554;
            double t78556 = 1.0/pow(rho_a[index],1.1E1/3.0);
            double t78561 = t78553*t78553;
            double t78562 = t78555*t78555;
            double t78563 = t78553*t78555*6.0;
            double t78564 = gcab*t78553*t78554*t78555*4.0;
            double t78565 = t78561*t78562;
            double t78566 = gcab*t78554*4.0;
            double t78567 = t78563+t78564+t78565+t78566+1.0;
            double t78568 = gcab*t78554;
            double t78569 = t78568+1.0;
            double t78570 = t78553*t78555;
            double t78571 = gcab*t78554*2.0;
            double t78572 = t78570+t78571+1.0;
            double t78573 = t78553*t78555*3.0;
            double t78574 = gcab*t78553*t78554*t78555;
            double t78575 = gcab*t78554*3.0;
            double t78576 = t78573+t78574+t78575+1.0;
            double t78577 = 1.0/t78572;
            double t78578 = 1.0/t78576;
            double t78579 = 1.0/t78569;
            double t78580 = 1.0/t78567;
            double t78581 = 1.0/pow(t78430,7.0/3.0);
            double t78582 = 1.0/pow(t78430,8.0/3.0);
            double t78584 = 1.0/t78464;
            double t78585 = 1.0/(t78461*t78461);
            double t78586 = b4f*t78481*t78437*(2.0/3.0);
            double t78587 = b2f*c*t78442*(1.0/3.0);
            double t78588 = b1f*c*t78442*t78482*(1.0/6.0);
            double t78589 = b3f*c*t78433*t78442*(1.0/2.0);
            double t78590 = t78586+t78587+t78588+t78589;
            double t78591 = a1f*c*c0f*t78442*t78465*(2.0/3.0);
            double t78593 = t78590*t78467*t78584*t78585;
            double t78594 = a1p*c*c0p*t78442*t78468*(2.0/3.0);
            double t78592 = t78490+t78591-t78593-t78594;
            double t78595 = t78489*t78489;
            double t78596 = 1.0/pow(t78432,3.0/2.0);
            double t78597 = b4p*t78437*t78582*(1.0E1/9.0);
            double t78598 = b2p*c*t78581*(4.0/9.0);
            double t78599 = b1p*c*t78482*t78581*(2.0/9.0);
            double t78600 = b3p*c*t78433*t78581*(2.0/3.0);
            double t78601 = b3p*t78437*t78482*t78582*(1.0/1.2E1);
            double t78602 = t78600+t78601+t78597+t78598+t78599-b1p*t78437*t78582*t78596*(1.0/3.6E1);
            double t78603 = 1.0/(t78441*t78441*t78441);
            double t78604 = t78603*t78483*t78448*t78595*2.0;
            double t78605 = t78590*t78590;
            double t78606 = 1.0/(t78446*t78446);
            double t78607 = 1.0/(t78441*t78441*t78441*t78441);
            double t78608 = t78475*2.0;
            double t78609 = 1.0/(t78430*t78430*t78430);
            double t78616 = t78609*t78449*2.0;
            double t78610 = -t78616+t78608;
            double t78611 = t78476*t78476;
            double t78612 = a1p*c*c0p*t78581*t78468*(8.0/9.0);
            double t78613 = 1.0/(t78430*t78430*t78430*t78430*t78430*t78430);
            double t78614 = t78480*t78491*4.0;
            double t78624 = t78450*t78449*t78477*4.0;
            double t78615 = t78614-t78624;
            double t78617 = t78610*t78508*(4.0/3.0);
            double t78618 = 1.0/pow(t78470,2.0/3.0);
            double t78619 = t78611*t78618*(4.0/9.0);
            double t78620 = 1.0/pow(t78472,2.0/3.0);
            double t78621 = t78611*t78620*(4.0/9.0);
            double t78622 = t78621+t78617+t78619-t78610*t78505*(4.0/3.0);
            double t78623 = 1.0/t78501;
            double t78625 = 1.0/(t78498*t78498);
            double t78626 = b4a*t78481*t78437*(2.0/3.0);
            double t78627 = b2a*c*t78442*(1.0/3.0);
            double t78628 = b1a*c*t78442*t78482*(1.0/6.0);
            double t78629 = b3a*c*t78433*t78442*(1.0/2.0);
            double t78630 = t78626+t78627+t78628+t78629;
            double t78631 = t78630*t78630;
            double t78632 = t78602*t78483*t78448*t78484;
            double t78633 = 1.0/t78532;
            double t78634 = b4f*t78437*t78528*(2.0/3.0);
            double t78635 = b2f*c*t78522*(1.0/3.0);
            double t78636 = b1f*c*t78522*t78529*(1.0/6.0);
            double t78637 = b3f*c*t78522*t78514*(1.0/2.0);
            double t78638 = t78634+t78635+t78636+t78637;
            double t78639 = 1.0/(t78521*t78521);
            double t78640 = 1.0/pow(rho_a[index],7.0/3.0);
            double t78641 = 1.0/pow(t78513,3.0/2.0);
            double t78642 = t78638*t78638;
            double t78643 = t78544*t78544;
            double t78644 = 1.0/(t78527*t78527*t78527);
            double t78645 = t78643*t78644*t78537*t78538*2.0;
            double t78646 = b4p*t78437*t78557*(1.0E1/9.0);
            double t78647 = b2p*c*t78640*(4.0/9.0);
            double t78648 = b3p*t78437*t78529*t78557*(1.0/1.2E1);
            double t78649 = b1p*c*t78640*t78529*(2.0/9.0);
            double t78650 = b3p*c*t78514*t78640*(2.0/3.0);
            double t78833 = b1p*t78641*t78437*t78557*(1.0/3.6E1);
            double t78651 = t78650-t78833+t78646+t78647+t78648+t78649;
            double t78652 = 1.0/(t78535*t78535);
            double t78653 = 1.0/(t78527*t78527*t78527*t78527);
            double t78654 = a1p*c*c0p*t78640*t78546*(8.0/9.0);
            double t78655 = a1f*c*c0f*t78522*t78550*(2.0/3.0);
            double t78656 = a1p*c*c0p*t78522*t78546*(2.0/3.0);
            double t78657 = t78443*t78606*t78607*t78448*t78595*(1.0/2.0);
            double t78658 = 1.0/tau_a[index];
            double t78659 = pow(rho_a[index],2.0/3.0);
            double t78660 = pow(rho_a[index],5.0/3.0);
            double t78661 = C_k*t78660*t78658;
            double t78662 = t78661+1.0;
            double t78663 = t78661-1.0;
            double t78664 = 1.0/(t78662*t78662);
            double t78665 = t78663*t78663;
            double t78666 = t78665*t78665;
            double t78667 = t78666*t78666;
            double t78668 = 1.0/pow(t78662,1.1E1);
            double t78669 = 1.0/(t78662*t78662*t78662);
            double t78670 = 1.0/(t78662*t78662*t78662*t78662);
            double t78671 = 1.0/(t78662*t78662*t78662*t78662*t78662);
            double t78672 = 1.0/(t78662*t78662*t78662*t78662*t78662*t78662);
            double t78673 = 1.0/(t78662*t78662*t78662*t78662*t78662*t78662*t78662);
            double t78674 = 1.0/(t78662*t78662*t78662*t78662*t78662*t78662*t78662*t78662);
            double t78675 = 1.0/(t78662*t78662*t78662*t78662*t78662*t78662*t78662*t78662*t78662);
            double t78676 = 1.0/pow(t78662,1.0E1);
            double t78677 = 1.0/(k*k);
            double t78678 = 1.0/kp;
            double t78679 = 1.0/(rho_a[index]*rho_a[index]);
            double t78680 = rho_a[index]*2.0;
            double t78681 = 1.0/pow(t78680,2.0/3.0);
            double t78682 = gamma_aa[index]*mu_*t78681*t78677*t78678*t78679*(1.0/4.0);
            double t78683 = t78682+1.0;
            double t78684 = 1.0/t78683;
            double t78685 = kp-kp*t78684+1.0;
            double t78686 = C_k*C_k;
            double t78687 = pow(rho_a[index],4.0/3.0);
            double t78688 = 1.0/(tau_a[index]*tau_a[index]);
            double t78689 = 1.0/t78662;
            double t78690 = 1.0/pow(t78662,1.2E1);
            double t78691 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]);
            double t78692 = gamma_aa[index]*mu_*t78681*t78691*t78677*t78678*(1.0/2.0);
            double t78693 = 1.0/pow(t78680,5.0/3.0);
            double t78694 = gamma_aa[index]*mu_*t78693*t78677*t78678*t78679*(1.0/3.0);
            double t78695 = t78692+t78694;
            double t78696 = a_1*t78663*t78689;
            double t78697 = a_10*t78665*t78667*t78676;
            double t78698 = a_11*t78663*t78665*t78667*t78668;
            double t78699 = a_2*t78664*t78665;
            double t78700 = a_3*t78663*t78665*t78669;
            double t78701 = a_4*t78670*t78666;
            double t78702 = a_5*t78671*t78663*t78666;
            double t78703 = a_6*t78672*t78665*t78666;
            double t78704 = a_7*t78663*t78673*t78665*t78666;
            double t78705 = a_8*t78674*t78667;
            double t78706 = a_9*t78663*t78675*t78667;
            double t78707 = t78700+t78701+t78702+t78703+t78704+t78705+t78706+t78696+t78697+t78698+t78699+1.0;
            double t78708 = 1.0/(t78683*t78683);
            double t78709 = C_k*a_1*t78658*t78659*t78689*(5.0/3.0);
            double t78710 = C_k*a_2*t78663*t78664*t78658*t78659*(1.0E1/3.0);
            double t78711 = C_k*a_10*t78663*t78658*t78667*t78676*t78659*(5.0E1/3.0);
            double t78712 = C_k*a_11*t78665*t78658*t78667*t78659*t78668*(5.5E1/3.0);
            double t78713 = C_k*a_3*t78665*t78658*t78659*t78669*5.0;
            double t78714 = C_k*a_4*t78670*t78663*t78665*t78658*t78659*(2.0E1/3.0);
            double t78715 = C_k*a_5*t78671*t78666*t78658*t78659*(2.5E1/3.0);
            double t78716 = C_k*a_6*t78663*t78672*t78666*t78658*t78659*1.0E1;
            double t78717 = C_k*a_7*t78673*t78665*t78666*t78658*t78659*(3.5E1/3.0);
            double t78718 = C_k*a_8*t78663*t78665*t78674*t78666*t78658*t78659*(4.0E1/3.0);
            double t78719 = C_k*a_9*t78675*t78658*t78667*t78659*1.5E1;
            double t78720 = t78710+t78711+t78712+t78713+t78714+t78715+t78716+t78717+t78709+t78718+t78719-C_k* \
               a_1*t78663*t78664*t78658*t78659*(5.0/3.0)-C_k*a_2*t78665*t78658*t78659*t78669*(1.0E1/3.0)-C_k*a_4* \
               t78671*t78666*t78658*t78659*(2.0E1/3.0)-C_k*a_8*t78675*t78658*t78667*t78659*(4.0E1/3.0)-C_k*a_10*t78665* \
               t78658*t78667*t78659*t78668*(5.0E1/3.0)-C_k*a_3*t78670*t78663*t78665*t78658*t78659*5.0-C_k*a_5*t78663* \
               t78672*t78666*t78658*t78659*(2.5E1/3.0)-C_k*a_6*t78673*t78665*t78666*t78658*t78659*1.0E1-C_k*a_9*t78663* \
               t78658*t78667*t78676*t78659*1.5E1-C_k*a_11*t78663*t78690*t78665*t78658*t78667*t78659*(5.5E1/3.0)-C_k* \
               a_7*t78663*t78665*t78674*t78666*t78658*t78659*(3.5E1/3.0);
            double t78721 = c0f*t78550*t78552*2.0;
            double t78723 = c0p*t78537*t78546*2.0;
            double t78722 = t78721-t78723;
            double t78724 = 1.0/pow(rho_b[index],1.0/3.0);
            double t78725 = c*t78724;
            double t78726 = sqrt(t78725);
            double t78727 = pow(t78725,3.0/2.0);
            double t78728 = 1.0/pow(rho_b[index],2.0/3.0);
            double t78729 = b1p*t78726;
            double t78730 = b3p*t78727;
            double t78731 = b4p*t78437*t78728;
            double t78732 = b2p*c*t78724;
            double t78733 = t78730+t78731+t78732+t78729;
            double t78734 = 1.0/t78733;
            double t78735 = t78443*t78734*(1.0/2.0);
            double t78736 = t78735+1.0;
            double t78737 = log(t78736);
            double t78738 = a1p*c*t78724;
            double t78739 = t78738+1.0;
            double t78740 = c0p*t78737*t78739*2.0;
            double t78741 = t78480*t78455*t78474*t78477*t78469;
            double t78742 = Aa*t78502*t78511*t78504*t78455*t78474*t78492*2.0;
            double t78743 = gamma_aa[index]*gcab*t78556*(1.6E1/3.0);
            double t78744 = gamma_aa[index]*gcab*t78553*t78555*t78556*1.6E1;
            double t78745 = gamma_aa[index]*t78561*t78554*t78555*t78556*(1.6E1/3.0);
            double t78746 = gamma_aa[index]*t78553*t78554*t78556*1.6E1;
            double t78747 = t78743+t78744+t78745+t78746;
            double t78748 = 1.0/(t78569*t78569);
            double t78749 = gamma_aa[index]*gamma_aa[index];
            double t78750 = 1.0/pow(rho_a[index],2.2E1/3.0);
            double t78751 = gamma_aa[index]*gcab*t78556*(8.0/3.0);
            double t78752 = gamma_aa[index]*t78553*t78554*t78556*(8.0/3.0);
            double t78753 = t78751+t78752;
            double t78754 = 1.0/(t78576*t78576);
            double t78755 = 1.0/pow(rho_a[index],1.4E1/3.0);
            double t78756 = 1.0/(t78567*t78567);
            double t78757 = 1.0/(t78572*t78572);
            double t78758 = gamma_aa[index]*gcab*t78556*4.0;
            double t78759 = gamma_aa[index]*gcab*t78553*t78555*t78556*4.0;
            double t78760 = gamma_aa[index]*t78553*t78554*t78556*8.0;
            double t78761 = t78760+t78758+t78759;
            double t78841 = t78552*t78633*t78638*t78639;
            double t78762 = -t78841+t78545+t78655-t78656;
            double t78763 = gcaa*gcaa;
            double t78764 = t78749*t78749;
            double t78765 = t78763*t78763;
            double t78766 = 1.0/pow(rho_a[index],3.2E1/3.0);
            double t78767 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]);
            double t78768 = 1.0/pow(rho_a[index],1.6E1/3.0);
            double t78769 = t78722*t78455*t78549;
            double t78770 = t78723+t78769;
            double t78771 = tau_a[index]-1.0/1.0E20;
            double t78772 = ( (t78771 > 0.0) ?  1.0 : 0.0 ) ;
            double t78773 = tau_a[index]*2.0;
            double t78774 = 1.0/rho_a[index];
            double t78801 = gamma_aa[index]*t78774*(1.0/4.0);
            double t78775 = -t78801+t78773;
            double t78776 = t78658*t78775*(1.0/2.0);
            double t78777 = t78776-1.0;
            double t78778 = t78772*t78777;
            double t78779 = t78778+1.0;
            double t78780 = gamma_aa[index]*gcaa*t78557*4.0;
            double t78781 = gamma_aa[index]*gcaa*t78763*t78749*t78767*4.0;
            double t78782 = t78763*t78749*t78768*6.0;
            double t78783 = t78764*t78765*t78766;
            double t78784 = t78780+t78781+t78782+t78783+1.0;
            double t78785 = 1.0/t78784;
            double t78786 = gamma_aa[index]*gcaa*t78557;
            double t78787 = t78786+1.0;
            double t78788 = 1.0/t78787;
            double t78789 = gamma_aa[index]*gcaa*t78557*3.0;
            double t78790 = gamma_aa[index]*gcaa*t78763*t78749*t78767;
            double t78791 = t78763*t78749*t78768*3.0;
            double t78792 = t78790+t78791+t78789+1.0;
            double t78793 = 1.0/t78792;
            double t78794 = gamma_aa[index]*gcaa*t78557*2.0;
            double t78795 = t78763*t78749*t78768;
            double t78796 = t78794+t78795+1.0;
            double t78797 = 1.0/t78796;
            double t78798 = 1.0/pow(rho_a[index],1.9E1/3.0);
            double t78799 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]*rho_a[index]);
            double t78800 = 1.0/pow(rho_a[index],3.5E1/3.0);
            double t78802 = 1.0/pow(rho_a[index],1.0E1);
            double t78803 = 1.0/(t78787*t78787);
            double t78804 = gamma_aa[index]*gcaa*t78556*(3.2E1/3.0);
            double t78805 = gamma_aa[index]*gcaa*t78763*t78749*t78799*3.2E1;
            double t78806 = t78763*t78749*t78798*3.2E1;
            double t78807 = t78800*t78764*t78765*(3.2E1/3.0);
            double t78808 = t78804+t78805+t78806+t78807;
            double t78809 = gamma_aa[index]*gcaa*t78556*(1.6E1/3.0);
            double t78810 = t78763*t78749*t78798*(1.6E1/3.0);
            double t78811 = t78810+t78809;
            double t78812 = gamma_aa[index]*gcaa*t78556*8.0;
            double t78813 = gamma_aa[index]*gcaa*t78763*t78749*t78799*8.0;
            double t78814 = t78763*t78749*t78798*1.6E1;
            double t78815 = t78812+t78813+t78814;
            double t78816 = 1.0/(t78792*t78792);
            double t78817 = 1.0/(t78784*t78784);
            double t78818 = 1.0/pow(rho_a[index],3.8E1/3.0);
            double t78819 = 1.0/(t78796*t78796);
            double t78820 = ccaa4*t78764*t78765*t78766*t78785;
            double t78821 = ccaa1*gamma_aa[index]*gcaa*t78557*t78788;
            double t78822 = ccaa3*gamma_aa[index]*gcaa*t78763*t78793*t78749*t78767;
            double t78823 = ccaa2*t78763*t78749*t78768*t78797;
            double t78824 = ccaa0+t78820+t78821+t78822+t78823;
            double t78825 = 1.0/(t78521*t78521*t78521);
            double t78826 = b4f*t78437*t78557*(1.0E1/9.0);
            double t78827 = b2f*c*t78640*(4.0/9.0);
            double t78828 = b3f*t78437*t78529*t78557*(1.0/1.2E1);
            double t78829 = b1f*c*t78640*t78529*(2.0/9.0);
            double t78830 = b3f*c*t78514*t78640*(2.0/3.0);
            double t78831 = t78830+t78826+t78827+t78828+t78829-b1f*t78641*t78437*t78557*(1.0/3.6E1);
            double t78832 = t78552*t78633*t78831*t78639;
            double t78834 = t78651*t78537*t78538*t78539;
            double t78835 = 1.0/(t78532*t78532);
            double t78836 = 1.0/(t78521*t78521*t78521*t78521);
            double t78837 = t78552*t78642*t78456*t78835*t78836*(1.0/2.0);
            double t78838 = t78443*t78643*t78652*t78653*t78537*(1.0/2.0);
            double t78839 = a1f*c*t78522*t78633*t78638*t78639*(2.0/3.0);
            double t78840 = a1p*c*t78522*t78544*t78538*t78539*(2.0/3.0);
            double t78842 = ccaa4*t78800*t78764*t78765*t78785*(3.2E1/3.0);
            double t78843 = ccaa1*gamma_aa[index]*gcaa*t78556*t78788*(8.0/3.0);
            double t78844 = ccaa3*gamma_aa[index]*gcaa*t78763*t78793*t78749*t78799*8.0;
            double t78845 = ccaa2*t78763*t78749*t78797*t78798*(1.6E1/3.0);
            double t78850 = ccaa1*t78803*t78763*t78749*t78798*(8.0/3.0);
            double t78851 = ccaa3*gamma_aa[index]*gcaa*t78815*t78816*t78763*t78749*t78767;
            double t78852 = ccaa4*t78808*t78817*t78764*t78765*t78766;
            double t78853 = ccaa2*t78811*t78763*t78819*t78749*t78768;
            double t78846 = -t78850+t78842-t78851+t78843-t78852+t78844-t78853+t78845;
            double t78847 = t78841-t78545-t78655+t78656;
            double t78848 = t78455*t78549*t78847;
            double t78849 = t78545-t78656+t78848;
            v_rho_a_rho_a_[index] = (rho_a[index]*t78770+rho_b[index]*(t78740-t78455*t78549*(t78740-c0f*log((t78456* \
               (1.0/2.0))/(b1f*t78726+b3f*t78727+b2f*c*t78724+b4f*t78437*t78728)+1.0)*(a1f*c*t78724+1.0)*2.0))-t78430* \
               (t78741+t78742+t78479))*(-ccab2*t78553*t78555*t78757*(gamma_aa[index]*gcab*t78755*(8.8E1/9.0)+t78750* \
               t78553*t78749*(3.2E1/9.0)+gamma_aa[index]*t78553*t78554*t78755*(8.8E1/9.0))+ccab2*t78553*1.0/(t78572* \
               t78572*t78572)*t78555*(t78753*t78753)*2.0+ccab4*t78561*t78562*1.0/(t78567*t78567*t78567)*(t78747*t78747) \
               *2.0+ccab1*gamma_aa[index]*gcab*t78755*t78579*(4.4E1/9.0)-ccab1*t78750*t78553*t78748*t78749*(3.2E1/ \
               9.0)+ccab2*t78750*t78553*t78577*t78749*(3.2E1/9.0)-ccab4*t78561*t78562*t78756*(gamma_aa[index]*gcab* \
               t78755*(1.76E2/9.0)+t78750*t78553*t78749*(6.4E1/3.0)+gamma_aa[index]*t78553*t78554*t78755*(1.76E2/ \
               3.0)+t78561*t78750*t78555*t78749*(6.4E1/3.0)+gamma_aa[index]*gcab*t78553*t78555*t78755*(1.76E2/3.0) \
               +gamma_aa[index]*t78561*t78554*t78555*t78755*(1.76E2/9.0)+gcab*t78750*t78553*t78554*t78749*(1.28E2/ \
               3.0))+ccab4*t78561*t78750*t78580*t78555*t78749*(6.4E1/3.0)-ccab1*gamma_aa[index]*t78553*t78554*t78755* \
               t78748*(4.4E1/9.0)+ccab2*gamma_aa[index]*t78553*t78554*t78755*t78577*(8.8E1/9.0)+ccab3*gcab*t78553* \
               t78554*(t78761*t78761)*t78555*1.0/(t78576*t78576*t78576)*2.0+ccab3*gamma_aa[index]*gcab*t78553*t78555* \
               t78755*t78578*(4.4E1/3.0)+ccab4*gamma_aa[index]*t78561*t78580*t78554*t78555*t78755*(1.76E2/9.0)-ccab2* \
               gamma_aa[index]*t78553*t78554*t78753*t78556*t78757*(1.6E1/3.0)+ccab3*gcab*t78750*t78553*t78554*t78578* \
               t78749*(3.2E1/3.0)+ccab1*gcab*t78750*t78553*t78554*1.0/(t78569*t78569*t78569)*t78749*(3.2E1/9.0)-ccab3* \
               gcab*t78553*t78554*t78555*t78754*(gamma_aa[index]*gcab*t78755*(4.4E1/3.0)+t78750*t78553*t78749*(3.2E1/ \
               3.0)+gamma_aa[index]*t78553*t78554*t78755*(8.8E1/3.0)+gamma_aa[index]*gcab*t78553*t78555*t78755*(4.4E1/ \
               3.0)+gcab*t78750*t78553*t78554*t78749*(3.2E1/3.0))-ccab3*gamma_aa[index]*gcab*t78553*t78761*t78555* \
               t78556*t78754*8.0-ccab4*gamma_aa[index]*t78561*t78554*t78555*t78556*t78747*t78756*(3.2E1/3.0))-(X- \
               1.0)*(t78720*t78685*2.0+rho_a[index]*t78685*(C_k*a_1*t78512*t78658*t78689*(1.0E1/9.0)-a_1*t78664*t78686* \
               t78687*t78688*(5.0E1/9.0)+a_2*t78664*t78686*t78687*t78688*(5.0E1/9.0)+a_1*t78663*t78686*t78669*t78687* \
               t78688*(5.0E1/9.0)+a_10*t78667*t78676*t78686*t78687*t78688*2.5E2+a_2*t78670*t78665*t78686*t78687*t78688* \
               (5.0E1/3.0)-a_2*t78663*t78686*t78669*t78687*t78688*(2.0E2/9.0)-a_3*t78670*t78665*t78686*t78687*t78688* \
               5.0E1+a_3*t78663*t78686*t78669*t78687*t78688*(5.0E1/3.0)+a_4*t78670*t78665*t78686*t78687*t78688*(1.0E2/ \
               3.0)+a_4*t78672*t78666*t78686*t78687*t78688*(5.0E2/9.0)-a_5*t78672*t78666*t78686*t78687*t78688*(1.25E3/ \
               9.0)+a_6*t78672*t78666*t78686*t78687*t78688*(2.5E2/3.0)+a_8*t78667*t78676*t78686*t78687*t78688*2.0E2- \
               a_9*t78667*t78676*t78686*t78687*t78688*4.5E2-C_k*a_1*t78512*t78663*t78664*t78658*(1.0E1/9.0)+C_k*a_2* \
               t78512*t78663*t78664*t78658*(2.0E1/9.0)-C_k*a_2*t78512*t78665*t78658*t78669*(2.0E1/9.0)+C_k*a_3*t78512* \
               t78665*t78658*t78669*(1.0E1/3.0)-C_k*a_4*t78512*t78671*t78666*t78658*(4.0E1/9.0)+C_k*a_5*t78512*t78671* \
               t78666*t78658*(5.0E1/9.0)-C_k*a_8*t78512*t78675*t78658*t78667*(8.0E1/9.0)+C_k*a_9*t78512*t78675*t78658* \
               t78667*1.0E1+C_k*a_10*t78512*t78663*t78658*t78667*t78676*(1.0E2/9.0)-C_k*a_10*t78512*t78665*t78658* \
               t78667*t78668*(1.0E2/9.0)+C_k*a_11*t78512*t78665*t78658*t78667*t78668*(1.1E2/9.0)-C_k*a_3*t78512*t78670* \
               t78663*t78665*t78658*(1.0E1/3.0)+C_k*a_4*t78512*t78670*t78663*t78665*t78658*(4.0E1/9.0)-C_k*a_5*t78512* \
               t78663*t78672*t78666*t78658*(5.0E1/9.0)+C_k*a_6*t78512*t78663*t78672*t78666*t78658*(2.0E1/3.0)-C_k* \
               a_6*t78512*t78673*t78665*t78666*t78658*(2.0E1/3.0)+C_k*a_7*t78512*t78673*t78665*t78666*t78658*(7.0E1/ \
               9.0)-C_k*a_9*t78512*t78663*t78658*t78667*t78676*1.0E1+a_10*t78690*t78665*t78667*t78686*t78687*t78688* \
               (2.75E3/9.0)-a_11*t78690*t78665*t78667*t78686*t78687*t78688*(6.05E3/9.0)-a_10*t78663*t78667*t78668* \
               t78686*t78687*t78688*(5.0E3/9.0)+a_11*t78663*t78667*t78668*t78686*t78687*t78688*(2.75E3/9.0)+a_3*t78671* \
               t78663*t78665*t78686*t78687*t78688*(1.0E2/3.0)-a_4*t78671*t78663*t78665*t78686*t78687*t78688*(8.0E2/ \
               9.0)+a_5*t78671*t78663*t78665*t78686*t78687*t78688*(5.0E2/9.0)+a_5*t78663*t78673*t78666*t78686*t78687* \
               t78688*(2.5E2/3.0)-a_6*t78663*t78673*t78666*t78686*t78687*t78688*2.0E2+a_6*t78665*t78674*t78666*t78686* \
               t78687*t78688*(3.5E2/3.0)+a_7*t78663*t78673*t78666*t78686*t78687*t78688*(3.5E2/3.0)-a_7*t78665*t78674* \
               t78666*t78686*t78687*t78688*(2.45E3/9.0)+a_8*t78665*t78674*t78666*t78686*t78687*t78688*(1.4E3/9.0) \
               +a_9*t78663*t78667*t78668*t78686*t78687*t78688*2.5E2+a_11*1.0/pow(t78662,1.3E1)*t78663*t78665*t78667* \
               t78686*t78687*t78688*(1.1E3/3.0)-C_k*a_11*t78512*t78663*t78690*t78665*t78658*t78667*(1.1E2/9.0)-C_k* \
               a_7*t78512*t78663*t78665*t78674*t78666*t78658*(7.0E1/9.0)+C_k*a_8*t78512*t78663*t78665*t78674*t78666* \
               t78658*(8.0E1/9.0)+a_7*t78663*t78665*t78666*t78675*t78686*t78687*t78688*(1.4E3/9.0)-a_8*t78663*t78665* \
               t78666*t78675*t78686*t78687*t78688*(3.2E3/9.0)+a_9*t78663*t78665*t78666*t78675*t78686*t78687*t78688* \
               2.0E2)-kp*t78707*t78708*t78695*2.0+kp*rho_a[index]*t78707*t78708*(gamma_aa[index]*mu_*t78691*t78693* \
               t78677*t78678*(4.0/3.0)+gamma_aa[index]*mu_*1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]) \
               *t78681*t78677*t78678*(3.0/2.0)+gamma_aa[index]*mu_*1.0/pow(t78680,8.0/3.0)*t78677*t78678*t78679*(1.0E1/ \
               9.0))-kp*rho_a[index]*t78707*1.0/(t78683*t78683*t78683)*(t78695*t78695)*2.0-kp*rho_a[index]*t78720* \
               t78708*t78695*2.0)+(t78741+t78742+t78479+rho_a[index]*(-t78545+t78656+t78455*t78549*(t78545+t78655- \
               t78552*t78633*t78638*t78639-a1p*c*c0p*t78522*t78546*(2.0/3.0)))+t78430*(t78490-a1p*c*c0p*t78442*t78468* \
               (2.0/3.0)-t78480*t78455*t78491*t78474*t78469*4.0-t78480*t78455*t78474*t78592*t78477+t78480*t78455* \
               t78509*t78477*t78469+t78450*t78455*t78474*t78449*t78477*t78469*4.0+Aa*t78502*t78511*t78504*t78455* \
               t78509*t78492*2.0-Aa*t78502*t78504*t78615*t78455*t78474*t78492*2.0+t78511*t78504*t78630*t78623*t78625* \
               t78455*t78474*t78492-Aa*a1a*c*t78502*t78511*t78442*t78455*t78474*t78492*(2.0/3.0))-c0p*t78537*t78546* \
               2.0-t78722*t78455*t78549)*(ccab1*gamma_aa[index]*gcab*t78556*t78579*(4.0/3.0)-ccab2*t78553*t78555* \
               t78753*t78757-ccab4*t78561*t78562*t78747*t78756-ccab1*gamma_aa[index]*t78553*t78554*t78556*t78748* \
               (4.0/3.0)+ccab2*gamma_aa[index]*t78553*t78554*t78556*t78577*(8.0/3.0)+ccab3*gamma_aa[index]*gcab*t78553* \
               t78555*t78556*t78578*4.0+ccab4*gamma_aa[index]*t78561*t78580*t78554*t78555*t78556*(1.6E1/3.0)-ccab3* \
               gcab*t78553*t78554*t78761*t78555*t78754)*2.0-(ccab0+ccab1*gcab*t78554*t78579+ccab4*t78561*t78562*t78580+ \
               ccab2*t78553*t78555*t78577+ccab3*gcab*t78553*t78554*t78555*t78578)*(-t78430*(-t78612-t78604+t78632+ \
               t78657+t78480*t78455*t78474*t78477*(t78612+t78604-t78632-t78657-1.0/(t78461*t78461*t78461)*t78605* \
               t78467*t78584*2.0+t78467*t78584*t78585*(b2f*c*t78581*(4.0/9.0)+b4f*t78437*t78582*(1.0E1/9.0)+b1f*c* \
               t78482*t78581*(2.0/9.0)+b3f*c*t78433*t78581*(2.0/3.0)-b1f*t78437*t78582*t78596*(1.0/3.6E1)+b3f*t78437* \
               t78482*t78582*(1.0/1.2E1))+1.0/(t78461*t78461*t78461*t78461)*t78605*1.0/(t78464*t78464)*t78456*t78467* \
               (1.0/2.0)-a1f*c*c0f*t78581*t78465*(8.0/9.0)+a1f*c*t78442*t78590*t78584*t78585*(2.0/3.0)-a1p*c*t78442* \
               t78483*t78484*t78489*(2.0/3.0))-t78613*t78480*t78455*t78474*t78469*2.0E1-t78480*t78455*t78491*t78474* \
               t78592*8.0-t78622*t78480*t78455*t78477*t78469+t78480*t78455*t78491*t78509*t78469*8.0+t78480*t78455* \
               t78509*t78592*t78477*2.0-t78450*t78455*t78474*t78477*t78469*1.2E1+t78450*t78455*t78491*t78474*t78449* \
               t78469*3.2E1+t78450*t78455*t78474*t78592*t78449*t78477*8.0-t78450*t78455*t78509*t78449*t78477*t78469* \
               8.0+a1p*c*t78442*t78483*t78484*t78489*(2.0/3.0)-Aa*t78502*t78511*t78504*t78622*t78455*t78492*2.0+Aa* \
               t78502*t78504*t78615*t78455*t78509*t78492*4.0-Aa*t78502*t78504*t78455*t78474*t78492*(t78613*t78480* \
               2.0E1+t78450*t78477*1.2E1-t78450*t78491*t78449*3.2E1)*2.0-t78511*t78504*t78630*t78623*t78625*t78455* \
               t78509*t78492*2.0+t78504*t78630*t78623*t78615*t78625*t78455*t78474*t78492*2.0-t78511*t78504*t78631* \
               t78623*t78455*t78474*t78492*1.0/(t78498*t78498*t78498)*2.0+t78511*t78504*t78623*t78625*t78455*t78474* \
               t78492*(b2a*c*t78581*(4.0/9.0)+b4a*t78437*t78582*(1.0E1/9.0)+b1a*c*t78482*t78581*(2.0/9.0)+b3a*c*t78433* \
               t78581*(2.0/3.0)-b1a*t78437*t78582*t78596*(1.0/3.6E1)+b3a*t78437*t78482*t78582*(1.0/1.2E1))+Aa*a1a* \
               c*t78502*t78511*t78442*t78455*t78509*t78492*(4.0/3.0)-Aa*a1a*c*t78502*t78511*t78455*t78581*t78474* \
               t78492*(8.0/9.0)-Aa*a1a*c*t78502*t78442*t78615*t78455*t78474*t78492*(4.0/3.0)+1.0/(t78501*t78501)* \
               t78511*t78504*t78631*t78455*t78474*t78492*t78493*1.0/(t78498*t78498*t78498*t78498)*(1.0/2.0)+a1a*c* \
               t78511*t78630*t78442*t78623*t78625*t78455*t78474*t78492*(2.0/3.0))+rho_a[index]*(t78840-t78645-t78654+ \
               t78834+t78838+t78455*t78549*(t78832+t78645+t78654+t78837+t78839-t78552*t78633*t78642*t78825*2.0-t78651* \
               t78537*t78538*t78539-a1f*c*c0f*t78550*t78640*(8.0/9.0)-t78443*t78643*t78652*t78653*t78537*(1.0/2.0) \
               -a1p*c*t78522*t78544*t78538*t78539*(2.0/3.0)))+t78455*t78762*t78549*2.0-t78544*t78537*t78538*t78539* \
               2.0+t78483*t78448*t78484*t78489*2.0+a1p*c*c0p*t78522*t78546*(4.0/3.0)-a1p*c*c0p*t78442*t78468*(4.0/ \
               3.0)-t78480*t78455*t78491*t78474*t78469*8.0-t78480*t78455*t78474*t78592*t78477*2.0+t78480*t78455*t78509* \
               t78477*t78469*2.0+t78450*t78455*t78474*t78449*t78477*t78469*8.0+Aa*t78502*t78511*t78504*t78455*t78509* \
               t78492*4.0-Aa*t78502*t78504*t78615*t78455*t78474*t78492*4.0+t78511*t78504*t78630*t78623*t78625*t78455* \
               t78474*t78492*2.0-Aa*a1a*c*t78502*t78511*t78442*t78455*t78474*t78492*(4.0/3.0))+t78824*t78779*(-t78545+ \
               t78656+t78455*t78762*t78549)*2.0+t78770*t78846*t78779*2.0-rho_a[index]*t78770*t78779*(ccaa1*gamma_aa[index]* \
               gcaa*t78755*t78788*(8.8E1/9.0)-ccaa1*t78803*t78750*t78763*t78749*2.4E1+ccaa2*t78750*t78763*t78749* \
               t78797*(3.04E2/9.0)+ccaa4*t78764*t78818*t78765*t78785*(1.12E3/9.0)-ccaa4*t78800*t78808*t78817*t78764* \
               t78765*(6.4E1/3.0)-ccaa2*t78811*t78763*t78819*t78749*t78798*(3.2E1/3.0)-ccaa2*t78763*t78819*t78749* \
               t78768*(gamma_aa[index]*gcaa*t78755*(1.76E2/9.0)+t78750*t78763*t78749*(3.04E2/9.0))-ccaa4*t78817*t78764* \
               t78765*t78766*(gamma_aa[index]*gcaa*t78755*(3.52E2/9.0)+t78750*t78763*t78749*(6.08E2/3.0)+t78764*t78818* \
               t78765*(1.12E3/9.0)+gamma_aa[index]*gcaa*t78802*t78763*t78749*2.88E2)+ccaa2*(t78811*t78811)*t78763* \
               t78749*t78768*1.0/(t78796*t78796*t78796)*2.0+ccaa4*(t78808*t78808)*t78764*t78765*t78766*1.0/(t78784* \
               t78784*t78784)*2.0+ccaa3*gamma_aa[index]*gcaa*t78802*t78763*t78793*t78749*7.2E1+ccaa1*gamma_aa[index]* \
               gcaa*t78802*t78763*t78749*1.0/(t78787*t78787*t78787)*(1.28E2/9.0)+ccaa3*gamma_aa[index]*gcaa*(t78815* \
               t78815)*t78763*1.0/(t78792*t78792*t78792)*t78749*t78767*2.0-ccaa3*gamma_aa[index]*gcaa*t78816*t78763* \
               t78749*t78767*(gamma_aa[index]*gcaa*t78755*(8.8E1/3.0)+t78750*t78763*t78749*(3.04E2/3.0)+gamma_aa[index]* \
               gcaa*t78802*t78763*t78749*7.2E1)-ccaa3*gamma_aa[index]*gcaa*t78815*t78816*t78763*t78749*t78799*1.6E1) \
               +rho_a[index]*t78846*t78849*t78779*2.0+rho_a[index]*t78824*t78779*(t78840-t78645-t78654+t78834+t78838- \
               t78455*t78549*(t78840-t78832-t78645-t78654+t78834-t78837+t78838-t78839+t78552*t78633*t78642*t78825* \
               2.0+a1f*c*c0f*t78550*t78640*(8.0/9.0)))+gamma_aa[index]*t78770*t78772*t78774*t78846*t78658*(1.0/4.0) \
               -gamma_aa[index]*t78824*t78772*t78774*t78658*t78849*(1.0/4.0);
        } else if (rho_a[index] > cutoff_) {
            double t83168 = 1.0/pow(rho_a[index],1.0/3.0);
            double t83169 = c*t83168;
            double t83170 = sqrt(t83169);
            double t83171 = b1f*t83170;
            double t83172 = pow(t83169,3.0/2.0);
            double t83173 = b3f*t83172;
            double t83174 = c*c;
            double t83175 = 1.0/pow(rho_a[index],2.0/3.0);
            double t83176 = b4f*t83174*t83175;
            double t83177 = b2f*c*t83168;
            double t83178 = t83171+t83173+t83176+t83177;
            double t83179 = 1.0/pow(rho_a[index],4.0/3.0);
            double t83180 = b1p*t83170;
            double t83181 = b3p*t83172;
            double t83182 = b4p*t83174*t83175;
            double t83183 = b2p*c*t83168;
            double t83184 = t83180+t83181+t83182+t83183;
            double t83185 = 1.0/pow(rho_a[index],5.0/3.0);
            double t83186 = 1.0/sqrt(t83169);
            double t83187 = 1.0/c0f;
            double t83188 = 1.0/t83178;
            double t83189 = t83187*t83188*(1.0/2.0);
            double t83190 = t83189+1.0;
            double t83191 = 1.0/c0p;
            double t83192 = 1.0/t83184;
            double t83193 = t83191*t83192*(1.0/2.0);
            double t83194 = t83193+1.0;
            double t83195 = a1p*c*t83168;
            double t83196 = t83195+1.0;
            double t83197 = 1.0/t83194;
            double t83198 = 1.0/(t83184*t83184);
            double t83199 = b4p*t83174*t83185*(2.0/3.0);
            double t83200 = b2p*c*t83179*(1.0/3.0);
            double t83201 = b1p*c*t83186*t83179*(1.0/6.0);
            double t83202 = b3p*c*t83170*t83179*(1.0/2.0);
            double t83203 = t83200+t83201+t83202+t83199;
            double t83204 = t83203*t83196*t83197*t83198;
            double t83205 = log(t83194);
            double t83206 = gamma_aa[index]*gamma_aa[index];
            double t83207 = gcaa*gcaa;
            double t83208 = t83206*t83206;
            double t83209 = t83207*t83207;
            double t83210 = 1.0/pow(rho_a[index],3.2E1/3.0);
            double t83211 = 1.0/pow(rho_a[index],8.0/3.0);
            double t83212 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]);
            double t83213 = 1.0/pow(rho_a[index],1.6E1/3.0);
            double t83214 = pow(2.0,1.0/3.0);
            double t83215 = t83214*2.0;
            double t83216 = t83215-2.0;
            double t83217 = two_13*2.0;
            double t83218 = t83217-2.0;
            double t83219 = 1.0/t83218;
            double t83220 = log(t83190);
            double t83221 = a1f*c*t83168;
            double t83222 = t83221+1.0;
            double t83223 = tau_a[index]-1.0/1.0E20;
            double t83224 = ( (t83223 > 0.0) ?  1.0 : 0.0 ) ;
            double t83225 = 1.0/tau_a[index];
            double t83226 = tau_a[index]*2.0;
            double t83227 = 1.0/rho_a[index];
            double t83275 = gamma_aa[index]*t83227*(1.0/4.0);
            double t83228 = t83226-t83275;
            double t83229 = t83225*t83228*(1.0/2.0);
            double t83230 = t83229-1.0;
            double t83231 = t83230*t83224;
            double t83232 = t83231+1.0;
            double t83233 = gamma_aa[index]*gcaa*t83211*4.0;
            double t83234 = gamma_aa[index]*gcaa*t83212*t83206*t83207*4.0;
            double t83235 = t83213*t83206*t83207*6.0;
            double t83236 = t83210*t83208*t83209;
            double t83237 = t83233+t83234+t83235+t83236+1.0;
            double t83238 = 1.0/t83237;
            double t83239 = gamma_aa[index]*gcaa*t83211;
            double t83240 = t83239+1.0;
            double t83241 = 1.0/t83240;
            double t83242 = gamma_aa[index]*gcaa*t83211*3.0;
            double t83243 = gamma_aa[index]*gcaa*t83212*t83206*t83207;
            double t83244 = t83213*t83206*t83207*3.0;
            double t83245 = t83242+t83243+t83244+1.0;
            double t83246 = 1.0/t83245;
            double t83247 = gamma_aa[index]*gcaa*t83211*2.0;
            double t83248 = t83213*t83206*t83207;
            double t83249 = t83247+t83248+1.0;
            double t83250 = 1.0/t83249;
            double t83251 = 1.0/pow(rho_a[index],1.9E1/3.0);
            double t83252 = 1.0/pow(rho_a[index],1.1E1/3.0);
            double t83253 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]*rho_a[index]);
            double t83254 = 1.0/pow(rho_a[index],3.5E1/3.0);
            double t83255 = pow(rho_a[index],2.0/3.0);
            double t83256 = pow(rho_a[index],5.0/3.0);
            double t83257 = C_k*t83225*t83256;
            double t83258 = t83257+1.0;
            double t83259 = t83257-1.0;
            double t83260 = 1.0/(t83258*t83258);
            double t83261 = t83259*t83259;
            double t83262 = t83261*t83261;
            double t83263 = t83262*t83262;
            double t83264 = 1.0/pow(t83258,1.1E1);
            double t83265 = 1.0/(t83258*t83258*t83258);
            double t83266 = 1.0/(t83258*t83258*t83258*t83258);
            double t83267 = 1.0/(t83258*t83258*t83258*t83258*t83258);
            double t83268 = 1.0/(t83258*t83258*t83258*t83258*t83258*t83258);
            double t83269 = 1.0/(t83258*t83258*t83258*t83258*t83258*t83258*t83258);
            double t83270 = 1.0/(t83258*t83258*t83258*t83258*t83258*t83258*t83258*t83258);
            double t83271 = 1.0/(t83258*t83258*t83258*t83258*t83258*t83258*t83258*t83258*t83258);
            double t83272 = 1.0/pow(t83258,1.0E1);
            double t83273 = c0f*t83220*t83222*2.0;
            double t83274 = c0p*t83205*t83196*2.0;
            double t83276 = 1.0/pow(rho_a[index],1.0E1);
            double t83277 = 1.0/pow(rho_a[index],2.2E1/3.0);
            double t83278 = 1.0/(t83240*t83240);
            double t83279 = gamma_aa[index]*gcaa*t83252*(3.2E1/3.0);
            double t83280 = gamma_aa[index]*gcaa*t83206*t83207*t83253*3.2E1;
            double t83281 = t83206*t83251*t83207*3.2E1;
            double t83282 = t83208*t83209*t83254*(3.2E1/3.0);
            double t83283 = t83280+t83281+t83282+t83279;
            double t83284 = gamma_aa[index]*gcaa*t83252*(1.6E1/3.0);
            double t83285 = t83206*t83251*t83207*(1.6E1/3.0);
            double t83286 = t83284+t83285;
            double t83287 = gamma_aa[index]*gcaa*t83252*8.0;
            double t83288 = gamma_aa[index]*gcaa*t83206*t83207*t83253*8.0;
            double t83289 = t83206*t83251*t83207*1.6E1;
            double t83290 = t83287+t83288+t83289;
            double t83291 = 1.0/(t83245*t83245);
            double t83292 = 1.0/pow(rho_a[index],1.4E1/3.0);
            double t83293 = 1.0/(t83237*t83237);
            double t83294 = 1.0/pow(rho_a[index],3.8E1/3.0);
            double t83295 = 1.0/(t83249*t83249);
            double t83296 = ccaa4*t83210*t83208*t83209*t83238;
            double t83297 = ccaa1*gamma_aa[index]*gcaa*t83211*t83241;
            double t83298 = ccaa3*gamma_aa[index]*gcaa*t83212*t83206*t83207*t83246;
            double t83299 = ccaa2*t83213*t83250*t83206*t83207;
            double t83300 = ccaa0+t83296+t83297+t83298+t83299;
            double t83301 = 1.0/t83190;
            double t83302 = b4f*t83174*t83185*(2.0/3.0);
            double t83303 = b2f*c*t83179*(1.0/3.0);
            double t83304 = b1f*c*t83186*t83179*(1.0/6.0);
            double t83305 = b3f*c*t83170*t83179*(1.0/2.0);
            double t83306 = t83302+t83303+t83304+t83305;
            double t83307 = 1.0/(t83178*t83178);
            double t83308 = 1.0/pow(rho_a[index],7.0/3.0);
            double t83309 = 1.0/pow(t83169,3.0/2.0);
            double t83310 = t83306*t83306;
            double t83311 = t83203*t83203;
            double t83312 = 1.0/(t83184*t83184*t83184);
            double t83313 = t83311*t83312*t83196*t83197*2.0;
            double t83314 = b4p*t83211*t83174*(1.0E1/9.0);
            double t83315 = b2p*c*t83308*(4.0/9.0);
            double t83316 = b3p*t83211*t83174*t83186*(1.0/1.2E1);
            double t83317 = b1p*c*t83308*t83186*(2.0/9.0);
            double t83318 = b3p*c*t83170*t83308*(2.0/3.0);
            double t83319 = t83314+t83315+t83316+t83317+t83318-b1p*t83211*t83174*t83309*(1.0/3.6E1);
            double t83320 = 1.0/(t83194*t83194);
            double t83321 = 1.0/(t83184*t83184*t83184*t83184);
            double t83322 = a1p*c*c0p*t83205*t83308*(8.0/9.0);
            double t83323 = a1f*c*c0f*t83220*t83179*(2.0/3.0);
            double t83324 = a1p*c*c0p*t83205*t83179*(2.0/3.0);
            double t83325 = ccaa4*t83208*t83209*t83254*t83238*(3.2E1/3.0);
            double t83326 = ccaa1*gamma_aa[index]*gcaa*t83241*t83252*(8.0/3.0);
            double t83327 = ccaa3*gamma_aa[index]*gcaa*t83206*t83207*t83253*t83246*8.0;
            double t83328 = ccaa2*t83250*t83206*t83251*t83207*(1.6E1/3.0);
            double t83365 = ccaa1*t83206*t83251*t83207*t83278*(8.0/3.0);
            double t83366 = ccaa3*gamma_aa[index]*gcaa*t83212*t83206*t83207*t83290*t83291;
            double t83367 = ccaa4*t83210*t83208*t83209*t83283*t83293;
            double t83368 = ccaa2*t83213*t83206*t83207*t83286*t83295;
            double t83329 = t83325+t83326+t83327+t83328-t83365-t83366-t83367-t83368;
            double t83330 = X-1.0;
            double t83331 = 1.0/(k*k);
            double t83332 = 1.0/kp;
            double t83333 = 1.0/(rho_a[index]*rho_a[index]);
            double t83334 = rho_a[index]*2.0;
            double t83335 = 1.0/pow(t83334,2.0/3.0);
            double t83336 = gamma_aa[index]*mu_*t83331*t83332*t83333*t83335*(1.0/4.0);
            double t83337 = t83336+1.0;
            double t83338 = 1.0/t83337;
            double t83339 = kp-kp*t83338+1.0;
            double t83340 = C_k*C_k;
            double t83341 = pow(rho_a[index],4.0/3.0);
            double t83342 = 1.0/(tau_a[index]*tau_a[index]);
            double t83343 = 1.0/t83258;
            double t83344 = 1.0/pow(t83258,1.2E1);
            double t83345 = t83204+t83323-t83324-t83301*t83222*t83306*t83307;
            double t83346 = t83216*t83219*t83345;
            double t83347 = 1.0/(t83337*t83337);
            double t83348 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]);
            double t83349 = 1.0/pow(t83334,5.0/3.0);
            double t83350 = a_1*t83343*t83259;
            double t83351 = a_10*t83261*t83263*t83272;
            double t83352 = a_11*t83261*t83263*t83264*t83259;
            double t83353 = a_2*t83260*t83261;
            double t83354 = a_3*t83261*t83265*t83259;
            double t83355 = a_4*t83262*t83266;
            double t83356 = a_5*t83262*t83267*t83259;
            double t83357 = a_6*t83261*t83262*t83268;
            double t83358 = a_7*t83261*t83262*t83259*t83269;
            double t83359 = a_8*t83270*t83263;
            double t83360 = a_9*t83271*t83263*t83259;
            double t83361 = t83350+t83351+t83360+t83352+t83353+t83354+t83355+t83356+t83357+t83358+t83359+1.0;
            double t83362 = t83273-t83274;
            double t83363 = t83216*t83362*t83219;
            double t83364 = t83363+t83274;
            double t83369 = gamma_aa[index]*mu_*t83331*t83332*t83335*t83348*(1.0/2.0);
            double t83370 = gamma_aa[index]*mu_*t83331*t83332*t83333*t83349*(1.0/3.0);
            double t83371 = t83370+t83369;
            double t83372 = C_k*a_1*t83225*t83343*t83255*(5.0/3.0);
            double t83373 = C_k*a_2*t83260*t83225*t83255*t83259*(1.0E1/3.0);
            double t83374 = C_k*a_10*t83225*t83263*t83272*t83255*t83259*(5.0E1/3.0);
            double t83375 = C_k*a_11*t83225*t83261*t83263*t83255*t83264*(5.5E1/3.0);
            double t83376 = C_k*a_3*t83225*t83261*t83255*t83265*5.0;
            double t83377 = C_k*a_4*t83225*t83261*t83255*t83266*t83259*(2.0E1/3.0);
            double t83378 = C_k*a_5*t83225*t83262*t83255*t83267*(2.5E1/3.0);
            double t83379 = C_k*a_6*t83225*t83262*t83255*t83259*t83268*1.0E1;
            double t83380 = C_k*a_7*t83225*t83261*t83262*t83255*t83269*(3.5E1/3.0);
            double t83381 = C_k*a_8*t83225*t83261*t83270*t83262*t83255*t83259*(4.0E1/3.0);
            double t83382 = C_k*a_9*t83225*t83271*t83263*t83255*1.5E1;
            double t83383 = t83380+t83372+t83381+t83373+t83382+t83374+t83375+t83376+t83377+t83378+t83379-C_k* \
               a_1*t83260*t83225*t83255*t83259*(5.0/3.0)-C_k*a_2*t83225*t83261*t83255*t83265*(1.0E1/3.0)-C_k*a_4* \
               t83225*t83262*t83255*t83267*(2.0E1/3.0)-C_k*a_8*t83225*t83271*t83263*t83255*(4.0E1/3.0)-C_k*a_10*t83225* \
               t83261*t83263*t83255*t83264*(5.0E1/3.0)-C_k*a_3*t83225*t83261*t83255*t83266*t83259*5.0-C_k*a_5*t83225* \
               t83262*t83255*t83259*t83268*(2.5E1/3.0)-C_k*a_6*t83225*t83261*t83262*t83255*t83269*1.0E1-C_k*a_9*t83225* \
               t83263*t83272*t83255*t83259*1.5E1-C_k*a_11*t83225*t83261*t83263*t83344*t83255*t83259*(5.5E1/3.0)-C_k* \
               a_7*t83225*t83261*t83270*t83262*t83255*t83259*(3.5E1/3.0);
            v_rho_a_rho_a_[index] = t83300*t83232*(-t83204+t83324+t83216*t83219*(t83204+t83323-t83301*t83222* \
               t83306*t83307-a1p*c*c0p*t83205*t83179*(2.0/3.0)))*2.0-t83330*t83383*t83339*2.0+t83232*t83329*(t83274+ \
               t83216*t83219*(t83273-c0p*t83205*t83196*2.0))*2.0-rho_a[index]*t83232*t83364*(ccaa1*gamma_aa[index]* \
               gcaa*t83241*t83292*(8.8E1/9.0)+ccaa2*t83250*t83206*t83207*t83277*(3.04E2/9.0)-ccaa1*t83206*t83207* \
               t83277*t83278*2.4E1+ccaa4*t83208*t83209*t83238*t83294*(1.12E3/9.0)-ccaa2*t83206*t83251*t83207*t83286* \
               t83295*(3.2E1/3.0)-ccaa4*t83208*t83209*t83254*t83283*t83293*(6.4E1/3.0)-ccaa2*t83213*t83206*t83207* \
               t83295*(gamma_aa[index]*gcaa*t83292*(1.76E2/9.0)+t83206*t83207*t83277*(3.04E2/9.0))-ccaa4*t83210*t83208* \
               t83209*t83293*(gamma_aa[index]*gcaa*t83292*(3.52E2/9.0)+t83206*t83207*t83277*(6.08E2/3.0)+t83208*t83209* \
               t83294*(1.12E3/9.0)+gamma_aa[index]*gcaa*t83206*t83207*t83276*2.88E2)+ccaa4*t83210*t83208*t83209*1.0/ \
               (t83237*t83237*t83237)*(t83283*t83283)*2.0+ccaa2*t83213*t83206*t83207*1.0/(t83249*t83249*t83249)*(t83286* \
               t83286)*2.0+ccaa3*gamma_aa[index]*gcaa*t83206*t83207*t83246*t83276*7.2E1+ccaa1*gamma_aa[index]*gcaa* \
               1.0/(t83240*t83240*t83240)*t83206*t83207*t83276*(1.28E2/9.0)+ccaa3*gamma_aa[index]*gcaa*t83212*t83206* \
               t83207*1.0/(t83245*t83245*t83245)*(t83290*t83290)*2.0-ccaa3*gamma_aa[index]*gcaa*t83212*t83206*t83207* \
               t83291*(gamma_aa[index]*gcaa*t83292*(8.8E1/3.0)+t83206*t83207*t83277*(3.04E2/3.0)+gamma_aa[index]* \
               gcaa*t83206*t83207*t83276*7.2E1)-ccaa3*gamma_aa[index]*gcaa*t83206*t83207*t83253*t83290*t83291*1.6E1) \
               -rho_a[index]*t83330*t83339*(C_k*a_1*t83225*t83343*t83168*(1.0E1/9.0)-a_1*t83340*t83260*t83341*t83342* \
               (5.0E1/9.0)+a_2*t83340*t83260*t83341*t83342*(5.0E1/9.0)+a_1*t83340*t83341*t83342*t83265*t83259*(5.0E1/ \
               9.0)+a_10*t83340*t83341*t83342*t83263*t83272*2.5E2+a_2*t83340*t83341*t83261*t83342*t83266*(5.0E1/3.0) \
               -a_2*t83340*t83341*t83342*t83265*t83259*(2.0E2/9.0)-a_3*t83340*t83341*t83261*t83342*t83266*5.0E1+a_3* \
               t83340*t83341*t83342*t83265*t83259*(5.0E1/3.0)+a_4*t83340*t83341*t83261*t83342*t83266*(1.0E2/3.0)+ \
               a_4*t83340*t83341*t83342*t83262*t83268*(5.0E2/9.0)-a_5*t83340*t83341*t83342*t83262*t83268*(1.25E3/ \
               9.0)+a_6*t83340*t83341*t83342*t83262*t83268*(2.5E2/3.0)+a_8*t83340*t83341*t83342*t83263*t83272*2.0E2- \
               a_9*t83340*t83341*t83342*t83263*t83272*4.5E2-C_k*a_1*t83260*t83225*t83168*t83259*(1.0E1/9.0)-C_k*a_2* \
               t83225*t83261*t83265*t83168*(2.0E1/9.0)+C_k*a_2*t83260*t83225*t83168*t83259*(2.0E1/9.0)+C_k*a_3*t83225* \
               t83261*t83265*t83168*(1.0E1/3.0)-C_k*a_4*t83225*t83262*t83168*t83267*(4.0E1/9.0)+C_k*a_5*t83225*t83262* \
               t83168*t83267*(5.0E1/9.0)-C_k*a_8*t83225*t83271*t83263*t83168*(8.0E1/9.0)+C_k*a_9*t83225*t83271*t83263* \
               t83168*1.0E1-C_k*a_10*t83225*t83261*t83263*t83264*t83168*(1.0E2/9.0)+C_k*a_11*t83225*t83261*t83263* \
               t83264*t83168*(1.1E2/9.0)+C_k*a_10*t83225*t83263*t83272*t83168*t83259*(1.0E2/9.0)-C_k*a_3*t83225*t83261* \
               t83266*t83168*t83259*(1.0E1/3.0)+C_k*a_4*t83225*t83261*t83266*t83168*t83259*(4.0E1/9.0)-C_k*a_5*t83225* \
               t83262*t83168*t83259*t83268*(5.0E1/9.0)-C_k*a_6*t83225*t83261*t83262*t83168*t83269*(2.0E1/3.0)+C_k* \
               a_6*t83225*t83262*t83168*t83259*t83268*(2.0E1/3.0)+C_k*a_7*t83225*t83261*t83262*t83168*t83269*(7.0E1/ \
               9.0)-C_k*a_9*t83225*t83263*t83272*t83168*t83259*1.0E1+a_10*t83340*t83341*t83261*t83342*t83263*t83344* \
               (2.75E3/9.0)-a_11*t83340*t83341*t83261*t83342*t83263*t83344*(6.05E3/9.0)-a_10*t83340*t83341*t83342* \
               t83263*t83264*t83259*(5.0E3/9.0)+a_11*t83340*t83341*t83342*t83263*t83264*t83259*(2.75E3/9.0)+a_3*t83340* \
               t83341*t83261*t83342*t83267*t83259*(1.0E2/3.0)-a_4*t83340*t83341*t83261*t83342*t83267*t83259*(8.0E2/ \
               9.0)+a_5*t83340*t83341*t83261*t83342*t83267*t83259*(5.0E2/9.0)+a_5*t83340*t83341*t83342*t83262*t83259* \
               t83269*(2.5E2/3.0)+a_6*t83340*t83341*t83261*t83270*t83342*t83262*(3.5E2/3.0)-a_6*t83340*t83341*t83342* \
               t83262*t83259*t83269*2.0E2-a_7*t83340*t83341*t83261*t83270*t83342*t83262*(2.45E3/9.0)+a_7*t83340*t83341* \
               t83342*t83262*t83259*t83269*(3.5E2/3.0)+a_8*t83340*t83341*t83261*t83270*t83342*t83262*(1.4E3/9.0)+ \
               a_9*t83340*t83341*t83342*t83263*t83264*t83259*2.5E2+a_11*t83340*t83341*t83261*t83342*t83263*1.0/pow(t83258,1.3E1) \
               *t83259*(1.1E3/3.0)-C_k*a_11*t83225*t83261*t83263*t83344*t83168*t83259*(1.1E2/9.0)-C_k*a_7*t83225* \
               t83261*t83270*t83262*t83168*t83259*(7.0E1/9.0)+C_k*a_8*t83225*t83261*t83270*t83262*t83168*t83259*(8.0E1/ \
               9.0)+a_7*t83340*t83341*t83261*t83342*t83262*t83271*t83259*(1.4E3/9.0)-a_8*t83340*t83341*t83261*t83342* \
               t83262*t83271*t83259*(3.2E3/9.0)+a_9*t83340*t83341*t83261*t83342*t83262*t83271*t83259*2.0E2)-rho_a[index]* \
               t83232*t83329*(-t83204+t83324+t83346)*2.0+rho_a[index]*t83300*t83232*(-t83313-t83322+t83216*t83219* \
               (t83313+t83322-t83319*t83196*t83197*t83198-t83301*t83310*t83222*1.0/(t83178*t83178*t83178)*2.0+t83301* \
               t83222*t83307*(b2f*c*t83308*(4.0/9.0)+b4f*t83211*t83174*(1.0E1/9.0)+b1f*c*t83308*t83186*(2.0/9.0)+ \
               b3f*c*t83170*t83308*(2.0/3.0)-b1f*t83211*t83174*t83309*(1.0/3.6E1)+b3f*t83211*t83174*t83186*(1.0/1.2E1) \
               )+t83310*t83222*1.0/(t83190*t83190)*1.0/(t83178*t83178*t83178*t83178)*t83187*(1.0/2.0)-a1f*c*c0f*t83220* \
               t83308*(8.0/9.0)-t83311*t83320*t83321*t83191*t83196*(1.0/2.0)+a1f*c*t83301*t83306*t83307*t83179*(2.0/ \
               3.0)-a1p*c*t83203*t83179*t83197*t83198*(2.0/3.0))+t83319*t83196*t83197*t83198+t83311*t83320*t83321* \
               t83191*t83196*(1.0/2.0)+a1p*c*t83203*t83179*t83197*t83198*(2.0/3.0))+kp*t83330*t83361*t83371*t83347* \
               2.0+gamma_aa[index]*t83224*t83225*t83227*t83364*t83329*(1.0/4.0)+kp*rho_a[index]*t83330*t83371*t83347* \
               t83383*2.0+gamma_aa[index]*t83300*t83224*t83225*t83227*(-t83204+t83324+t83346)*(1.0/4.0)-kp*rho_a[index]* \
               t83330*t83361*t83347*(gamma_aa[index]*mu_*t83331*t83332*t83348*t83349*(4.0/3.0)+gamma_aa[index]*mu_* \
               1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index])*t83331*t83332*t83335*(3.0/2.0)+gamma_aa[index]* \
               mu_*t83331*t83332*t83333*1.0/pow(t83334,8.0/3.0)*(1.0E1/9.0))+kp*rho_a[index]*t83330*t83361*(t83371* \
               t83371)*1.0/(t83337*t83337*t83337)*2.0;
        } else if (rho_b[index] > cutoff_) {
            v_rho_a_rho_a_[index] = 0.0;
        } else {
            v_rho_a_rho_a_[index] = 0.0;
        } 

        //V_rho_a_rho_b
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t78855 = rho_a[index]+rho_b[index];
            double t78856 = 1.0/pow(t78855,1.0/3.0);
            double t78857 = c*t78856;
            double t78858 = sqrt(t78857);
            double t78859 = b1p*t78858;
            double t78860 = pow(t78857,3.0/2.0);
            double t78861 = b3p*t78860;
            double t78862 = c*c;
            double t78863 = 1.0/pow(t78855,2.0/3.0);
            double t78864 = b4p*t78862*t78863;
            double t78865 = b2p*c*t78856;
            double t78866 = t78861+t78864+t78865+t78859;
            double t78867 = 1.0/pow(t78855,4.0/3.0);
            double t78868 = 1.0/c0p;
            double t78869 = 1.0/t78866;
            double t78870 = t78868*t78869*(1.0/2.0);
            double t78871 = t78870+1.0;
            double t78872 = a1p*c*t78856;
            double t78873 = t78872+1.0;
            double t78874 = rho_a[index]-rho_b[index];
            double t78875 = t78874*t78874;
            double t78876 = 1.0/t78855;
            double t78877 = t78874*t78876;
            double t78878 = two_13*2.0;
            double t78879 = t78878-2.0;
            double t78880 = 1.0/t78879;
            double t78881 = 1.0/c0f;
            double t78882 = b1f*t78858;
            double t78883 = b3f*t78860;
            double t78884 = b4f*t78862*t78863;
            double t78885 = b2f*c*t78856;
            double t78886 = t78882+t78883+t78884+t78885;
            double t78887 = 1.0/t78886;
            double t78888 = t78881*t78887*(1.0/2.0);
            double t78889 = t78888+1.0;
            double t78890 = log(t78889);
            double t78891 = a1f*c*t78856;
            double t78892 = t78891+1.0;
            double t78893 = log(t78871);
            double t78903 = c0f*t78890*t78892*2.0;
            double t78904 = c0p*t78873*t78893*2.0;
            double t78894 = t78903-t78904;
            double t78895 = t78877+1.0;
            double t78896 = pow(t78895,4.0/3.0);
            double t78897 = -t78877+1.0;
            double t78898 = pow(t78897,4.0/3.0);
            double t78899 = t78896+t78898-2.0;
            double t78900 = 1.0/(t78855*t78855);
            double t78931 = t78900*t78874;
            double t78901 = -t78931+t78876;
            double t78902 = 1.0/(t78855*t78855*t78855*t78855);
            double t78905 = t78875*t78875;
            double t78906 = 1.0/pow(t78855,5.0/3.0);
            double t78907 = 1.0/sqrt(t78857);
            double t78908 = 1.0/t78871;
            double t78909 = 1.0/(t78866*t78866);
            double t78910 = b4p*t78906*t78862*(2.0/3.0);
            double t78911 = b2p*c*t78867*(1.0/3.0);
            double t78912 = b1p*c*t78907*t78867*(1.0/6.0);
            double t78913 = b3p*c*t78858*t78867*(1.0/2.0);
            double t78914 = t78910+t78911+t78912+t78913;
            double t78915 = t78914*t78908*t78873*t78909;
            double t78916 = 1.0/(t78855*t78855*t78855*t78855*t78855);
            double t78917 = 1.0/d2fz0;
            double t78918 = 1.0/Aa;
            double t78919 = b1a*t78858;
            double t78920 = b3a*t78860;
            double t78921 = b4a*t78862*t78863;
            double t78922 = b2a*c*t78856;
            double t78923 = t78920+t78921+t78922+t78919;
            double t78924 = 1.0/t78923;
            double t78925 = t78924*t78918*(1.0/2.0);
            double t78926 = t78925+1.0;
            double t78927 = log(t78926);
            double t78928 = a1a*c*t78856;
            double t78929 = t78928+1.0;
            double t78930 = pow(t78895,1.0/3.0);
            double t78932 = t78901*t78930*(4.0/3.0);
            double t78933 = pow(t78897,1.0/3.0);
            double t79077 = t78901*t78933*(4.0/3.0);
            double t78934 = t78932-t79077;
            double t78935 = t78902*t78905;
            double t78936 = t78935-1.0;
            double t78937 = 1.0/pow(rho_a[index],1.0/3.0);
            double t78938 = c*t78937;
            double t78939 = sqrt(t78938);
            double t78940 = b1f*t78939;
            double t78941 = pow(t78938,3.0/2.0);
            double t78942 = b3f*t78941;
            double t78943 = 1.0/pow(rho_a[index],2.0/3.0);
            double t78944 = b4f*t78862*t78943;
            double t78945 = b2f*c*t78937;
            double t78946 = t78940+t78942+t78944+t78945;
            double t78947 = 1.0/pow(rho_a[index],4.0/3.0);
            double t78948 = b1p*t78939;
            double t78949 = b3p*t78941;
            double t78950 = b4p*t78862*t78943;
            double t78951 = b2p*c*t78937;
            double t78952 = t78950+t78951+t78948+t78949;
            double t78953 = 1.0/pow(rho_a[index],5.0/3.0);
            double t78954 = 1.0/sqrt(t78938);
            double t78955 = 1.0/t78946;
            double t78956 = t78881*t78955*(1.0/2.0);
            double t78957 = t78956+1.0;
            double t78958 = 1.0/t78952;
            double t78959 = t78868*t78958*(1.0/2.0);
            double t78960 = t78959+1.0;
            double t78961 = a1p*c*t78937;
            double t78962 = t78961+1.0;
            double t78963 = 1.0/t78960;
            double t78964 = 1.0/(t78952*t78952);
            double t78965 = b4p*t78862*t78953*(2.0/3.0);
            double t78966 = b2p*c*t78947*(1.0/3.0);
            double t78967 = b1p*c*t78954*t78947*(1.0/6.0);
            double t78968 = b3p*c*t78947*t78939*(1.0/2.0);
            double t78969 = t78965+t78966+t78967+t78968;
            double t78970 = t78962*t78963*t78964*t78969;
            double t78971 = log(t78960);
            double t78972 = pow(2.0,1.0/3.0);
            double t78973 = t78972*2.0;
            double t78974 = t78973-2.0;
            double t78975 = log(t78957);
            double t78976 = a1f*c*t78937;
            double t78977 = t78976+1.0;
            double t78978 = gcab*gcab;
            double t78982 = 1.0/pow(rho_a[index],8.0/3.0);
            double t78983 = gamma_aa[index]*t78982*(1.0/2.0);
            double t78984 = 1.0/pow(rho_b[index],8.0/3.0);
            double t78985 = gamma_bb[index]*t78984*(1.0/2.0);
            double t78979 = t78983+t78985;
            double t78980 = t78979*t78979;
            double t78981 = 1.0/pow(rho_b[index],1.1E1/3.0);
            double t78986 = t78978*t78978;
            double t78987 = t78980*t78980;
            double t78988 = t78980*t78978*6.0;
            double t78989 = gcab*t78980*t78978*t78979*4.0;
            double t78990 = t78986*t78987;
            double t78991 = gcab*t78979*4.0;
            double t78992 = t78990+t78991+t78988+t78989+1.0;
            double t78993 = gcab*t78979;
            double t78994 = t78993+1.0;
            double t78995 = t78980*t78978;
            double t78996 = gcab*t78979*2.0;
            double t78997 = t78995+t78996+1.0;
            double t78998 = t78980*t78978*3.0;
            double t78999 = gcab*t78980*t78978*t78979;
            double t79000 = gcab*t78979*3.0;
            double t79001 = t78998+t78999+t79000+1.0;
            double t79002 = t78902*t78880*t78874*t78875*t78894*t78899*4.0;
            double t79003 = t78931+t78876;
            double t79004 = 1.0/t78889;
            double t79005 = 1.0/(t78886*t78886);
            double t79006 = b4f*t78906*t78862*(2.0/3.0);
            double t79007 = b2f*c*t78867*(1.0/3.0);
            double t79008 = b1f*c*t78907*t78867*(1.0/6.0);
            double t79009 = b3f*c*t78858*t78867*(1.0/2.0);
            double t79010 = t79006+t79007+t79008+t79009;
            double t79011 = a1f*c*c0f*t78890*t78867*(2.0/3.0);
            double t79012 = t78905*t78916*4.0;
            double t79013 = t78930*t79003*(4.0/3.0);
            double t79076 = t78933*t79003*(4.0/3.0);
            double t79014 = t79013-t79076;
            double t79015 = 1.0/t78926;
            double t79016 = 1.0/(t78923*t78923);
            double t79017 = b4a*t78906*t78862*(2.0/3.0);
            double t79018 = b2a*c*t78867*(1.0/3.0);
            double t79019 = b1a*c*t78907*t78867*(1.0/6.0);
            double t79020 = b3a*c*t78858*t78867*(1.0/2.0);
            double t79021 = t79020+t79017+t79018+t79019;
            double t79022 = t78880*t78917*t78936*t78929*t78899*t79021*t79015*t79016;
            double t79023 = 1.0/pow(rho_b[index],1.0/3.0);
            double t79024 = c*t79023;
            double t79025 = sqrt(t79024);
            double t79026 = b1f*t79025;
            double t79027 = pow(t79024,3.0/2.0);
            double t79028 = b3f*t79027;
            double t79029 = 1.0/pow(rho_b[index],2.0/3.0);
            double t79030 = b4f*t78862*t79029;
            double t79031 = b2f*c*t79023;
            double t79032 = t79030+t79031+t79026+t79028;
            double t79033 = 1.0/pow(rho_b[index],4.0/3.0);
            double t79034 = b1p*t79025;
            double t79035 = b3p*t79027;
            double t79036 = b4p*t78862*t79029;
            double t79037 = b2p*c*t79023;
            double t79038 = t79034+t79035+t79036+t79037;
            double t79039 = 1.0/pow(rho_b[index],5.0/3.0);
            double t79040 = 1.0/sqrt(t79024);
            double t79041 = 1.0/t79032;
            double t79042 = t78881*t79041*(1.0/2.0);
            double t79043 = t79042+1.0;
            double t79044 = 1.0/t79038;
            double t79045 = t78868*t79044*(1.0/2.0);
            double t79046 = t79045+1.0;
            double t79047 = a1p*c*t79023;
            double t79048 = t79047+1.0;
            double t79049 = 1.0/t79046;
            double t79050 = 1.0/(t79038*t79038);
            double t79051 = b4p*t78862*t79039*(2.0/3.0);
            double t79052 = b2p*c*t79033*(1.0/3.0);
            double t79053 = b1p*c*t79040*t79033*(1.0/6.0);
            double t79054 = b3p*c*t79033*t79025*(1.0/2.0);
            double t79055 = t79051+t79052+t79053+t79054;
            double t79056 = t79050*t79055*t79048*t79049;
            double t79057 = log(t79046);
            double t79058 = log(t79043);
            double t79059 = a1f*c*t79023;
            double t79060 = t79059+1.0;
            double t79061 = t78902*t78905*t78880*t78894*t78899;
            double t79062 = Aa*t78880*t78917*t78927*t78936*t78929*t78899*2.0;
            double t79063 = 1.0/pow(rho_a[index],1.1E1/3.0);
            double t79064 = 1.0/(t79001*t79001);
            double t79065 = 1.0/t78994;
            double t79066 = 1.0/(t78992*t78992);
            double t79067 = 1.0/(t78997*t78997);
            double t79068 = 1.0/t78992;
            double t79069 = 1.0/(t78994*t78994);
            double t79070 = 1.0/t78997;
            double t79071 = 1.0/t79001;
            double t79073 = a1p*c*c0p*t78893*t78867*(2.0/3.0);
            double t79078 = t78892*t79010*t79004*t79005;
            double t79072 = t78915+t79011-t79073-t79078;
            double t79074 = 1.0/pow(t78855,7.0/3.0);
            double t79075 = 1.0/pow(t78855,8.0/3.0);
            double t79079 = t78914*t78914;
            double t79080 = 1.0/pow(t78857,3.0/2.0);
            double t79081 = b4p*t78862*t79075*(1.0E1/9.0);
            double t79082 = b2p*c*t79074*(4.0/9.0);
            double t79083 = b1p*c*t78907*t79074*(2.0/9.0);
            double t79084 = b3p*c*t78858*t79074*(2.0/3.0);
            double t79085 = b3p*t78862*t78907*t79075*(1.0/1.2E1);
            double t79086 = t79081+t79082+t79083+t79084+t79085-b1p*t78862*t79080*t79075*(1.0/3.6E1);
            double t79087 = t78908*t78873*t78909*t79086;
            double t79088 = 1.0/(t78866*t78866*t78866);
            double t79089 = t79010*t79010;
            double t79090 = 1.0/(t78871*t78871);
            double t79091 = 1.0/(t78866*t78866*t78866*t78866);
            double t79092 = t78873*t78868*t79090*t79091*t79079*(1.0/2.0);
            double t79093 = 1.0/(t78855*t78855*t78855);
            double t79094 = a1p*c*t78914*t78908*t78909*t78867*(2.0/3.0);
            double t79095 = 1.0/(t78855*t78855*t78855*t78855*t78855*t78855);
            double t79096 = t78902*t78874*t78875*4.0;
            double t79097 = t79012+t79096;
            double t79098 = t78933*t78874*t79093*(8.0/3.0);
            double t79099 = 1.0/pow(t78895,2.0/3.0);
            double t79100 = t78901*t79003*t79099*(4.0/9.0);
            double t79101 = 1.0/pow(t78897,2.0/3.0);
            double t79102 = t78901*t79101*t79003*(4.0/9.0);
            double t79103 = t79100+t79102+t79098-t78930*t78874*t79093*(8.0/3.0);
            double t79104 = t79021*t79021;
            double t79105 = t79012-t79096;
            double t79106 = t78902*t78905*t78880*t78894*t79014;
            double t79107 = t78902*t78905*t78880*t78934*t78894;
            double t79108 = Aa*t78880*t78917*t78927*t78929*t78899*t79097*2.0;
            double t79109 = Aa*t78880*t78917*t78927*t78936*t78929*t79014*2.0;
            double t79110 = Aa*t78880*t78934*t78917*t78927*t78936*t78929*2.0;
            double t79111 = c0f*t78975*t78977*2.0;
            double t79113 = c0p*t78962*t78971*2.0;
            double t79112 = t79111-t79113;
            double t79114 = c0f*t79060*t79058*2.0;
            double t79116 = c0p*t79048*t79057*2.0;
            double t79115 = t79114-t79116;
            double t79117 = gamma_aa[index]*gcab*t79063*(8.0/3.0);
            double t79118 = gamma_aa[index]*t78978*t78979*t79063*(8.0/3.0);
            double t79119 = t79117+t79118;
            double t79120 = gamma_bb[index]*gcab*t78981*(8.0/3.0);
            double t79121 = gamma_bb[index]*t78981*t78978*t78979*(8.0/3.0);
            double t79122 = t79120+t79121;
            double t79123 = gamma_aa[index]*gcab*t79063*(1.6E1/3.0);
            double t79124 = gamma_aa[index]*gcab*t78980*t78978*t79063*1.6E1;
            double t79125 = gamma_aa[index]*t78980*t78986*t78979*t79063*(1.6E1/3.0);
            double t79126 = gamma_aa[index]*t78978*t78979*t79063*1.6E1;
            double t79127 = t79123+t79124+t79125+t79126;
            double t79128 = gamma_bb[index]*gcab*t78981*(1.6E1/3.0);
            double t79129 = gamma_bb[index]*gcab*t78980*t78981*t78978*1.6E1;
            double t79130 = gamma_bb[index]*t78980*t78981*t78986*t78979*(1.6E1/3.0);
            double t79131 = gamma_bb[index]*t78981*t78978*t78979*1.6E1;
            double t79132 = t79130+t79131+t79128+t79129;
            double t79133 = gamma_aa[index]*gcab*t79063*4.0;
            double t79134 = gamma_aa[index]*gcab*t78980*t78978*t79063*4.0;
            double t79135 = gamma_aa[index]*t78978*t78979*t79063*8.0;
            double t79136 = t79133+t79134+t79135;
            double t79137 = gamma_bb[index]*gcab*t78981*4.0;
            double t79138 = gamma_bb[index]*gcab*t78980*t78981*t78978*4.0;
            double t79139 = gamma_bb[index]*t78981*t78978*t78979*8.0;
            double t79140 = t79137+t79138+t79139;
            v_rho_a_rho_b_[index] = (t78904+t79061+t79062+rho_a[index]*(-t78970+t78880*t78974*(t78970-(1.0/(t78946* \
               t78946)*t78977*(b2f*c*t78947*(1.0/3.0)+b4f*t78862*t78953*(2.0/3.0)+b1f*c*t78954*t78947*(1.0/6.0)+b3f* \
               c*t78947*t78939*(1.0/2.0)))/t78957+a1f*c*c0f*t78947*t78975*(2.0/3.0)-a1p*c*c0p*t78971*t78947*(2.0/ \
               3.0))+a1p*c*c0p*t78971*t78947*(2.0/3.0))+t78855*(t78915+t79002+t79110+t79022+t79107-a1p*c*c0p*t78893* \
               t78867*(2.0/3.0)-t78905*t78880*t78916*t78894*t78899*4.0-t78902*t78905*t78880*t78899*t79072-Aa*t78880* \
               t78917*t78927*t78929*t78899*(t79012-t78902*t78874*t78875*4.0)*2.0-Aa*a1a*c*t78880*t78917*t78927*t78936* \
               t78867*t78899*(2.0/3.0))-c0p*t78962*t78971*2.0-t78880*t78974*t79112)*(ccab1*gamma_bb[index]*gcab*t78981* \
               t79065*(4.0/3.0)-ccab2*t78980*t78978*t79122*t79067-ccab4*t78986*t78987*t79132*t79066+ccab2*gamma_bb[index]* \
               t78981*t78978*t78979*t79070*(8.0/3.0)-ccab1*gamma_bb[index]*t78981*t78978*t78979*t79069*(4.0/3.0)+ \
               ccab3*gamma_bb[index]*gcab*t78980*t78981*t78978*t79071*4.0+ccab4*gamma_bb[index]*t78980*t78981*t78986* \
               t78979*t79068*(1.6E1/3.0)-ccab3*gcab*t78980*t78978*t78979*t79140*t79064)+(ccab0+ccab1*gcab*t78979* \
               t79065+ccab2*t78980*t78978*t79070+ccab4*t78986*t78987*t79068+ccab3*gcab*t78980*t78978*t78979*t79071) \
               *(-t79110+t79106-t79107+t79108+t79109+t78855*(t79092+t79094+t79087-t78908*t78873*t79079*t79088*2.0+ \
               t78902*t78905*t78880*t78934*(t78915+t79011-t79073-t79078)-a1p*c*c0p*t78893*t79074*(8.0/9.0)-t78902* \
               t78905*t78880*t78899*(t79092+t79094+t79087-t78908*t78873*t79079*t79088*2.0+t78892*1.0/(t78886*t78886* \
               t78886)*t79004*t79089*2.0-t78892*t79004*t79005*(b2f*c*t79074*(4.0/9.0)+b4f*t78862*t79075*(1.0E1/9.0) \
               +b1f*c*t78907*t79074*(2.0/9.0)+b3f*c*t78858*t79074*(2.0/3.0)-b1f*t78862*t79080*t79075*(1.0/3.6E1)+ \
               b3f*t78862*t78907*t79075*(1.0/1.2E1))-t78881*t78892*1.0/(t78886*t78886*t78886*t78886)*1.0/(t78889* \
               t78889)*t79089*(1.0/2.0)+a1f*c*c0f*t78890*t79074*(8.0/9.0)-a1p*c*c0p*t78893*t79074*(8.0/9.0)-a1f*c* \
               t78867*t79010*t79004*t79005*(2.0/3.0))+t78905*t78880*t78916*t78934*t78894*4.0+t78902*t78880*t78875* \
               t78894*t78899*1.2E1+t78902*t78905*t78880*t78894*t79103-t78905*t78880*t78916*t78894*t79014*4.0-t78905* \
               t78880*t78916*t78899*t79072*8.0-t78905*t78880*t78894*t78899*t79095*2.0E1-t78902*t78905*t78880*t79014* \
               t79072+t78902*t78880*t78934*t78874*t78875*t78894*4.0+t78902*t78880*t78874*t78875*t78894*t79014*4.0+ \
               Aa*t78880*t78917*t78927*t78936*t78929*t79103*2.0+Aa*t78880*t78934*t78917*t78927*t78929*t79097*2.0- \
               Aa*t78880*t78917*t78927*t78929*t79014*t79105*2.0+Aa*t78880*t78917*t78927*t78929*t78899*(t78902*t78875* \
               1.2E1-t78905*t79095*2.0E1)*2.0-t78880*t78934*t78917*t78936*t78929*t79021*t79015*t79016+t78880*t78917* \
               t78936*t78929*t79021*t79014*t79015*t79016+t78880*t78917*t78929*t78899*t79021*t79015*t79105*t79016+ \
               t78880*t78917*t78929*t78899*t79021*t79015*t79016*t79097-1.0/(t78923*t78923*t78923)*t78880*t78917*t78936* \
               t78929*t78899*t79104*t79015*2.0+t78880*t78917*t78936*t78929*t78899*t79015*t79016*(b2a*c*t79074*(4.0/ \
               9.0)+b4a*t78862*t79075*(1.0E1/9.0)+b1a*c*t78907*t79074*(2.0/9.0)+b3a*c*t78858*t79074*(2.0/3.0)-b1a* \
               t78862*t79080*t79075*(1.0/3.6E1)+b3a*t78862*t78907*t79075*(1.0/1.2E1))+Aa*a1a*c*t78880*t78934*t78917* \
               t78927*t78936*t78867*(2.0/3.0)-Aa*a1a*c*t78880*t78917*t78927*t78936*t78867*t79014*(2.0/3.0)-Aa*a1a* \
               c*t78880*t78917*t78927*t78867*t78899*t79105*(2.0/3.0)-Aa*a1a*c*t78880*t78917*t78927*t78936*t78899* \
               t79074*(8.0/9.0)-Aa*a1a*c*t78880*t78917*t78927*t78867*t78899*t79097*(2.0/3.0)+1.0/(t78923*t78923*t78923* \
               t78923)*t78880*t78917*1.0/(t78926*t78926)*t78918*t78936*t78929*t78899*t79104*(1.0/2.0)+a1a*c*t78880* \
               t78917*t78936*t78867*t78899*t79021*t79015*t79016*(2.0/3.0))-t78914*t78908*t78873*t78909*2.0+t78902* \
               t78905*t78880*t78899*(t78915+t79011-t79073-t79078)*2.0+a1p*c*c0p*t78893*t78867*(4.0/3.0)+t78905*t78880* \
               t78916*t78894*t78899*8.0+Aa*t78880*t78917*t78927*t78929*t78899*(t79012-t79096)*2.0-t78880*t78917*t78936* \
               t78929*t78899*t79021*t79015*t79016*2.0+Aa*a1a*c*t78880*t78917*t78927*t78936*t78867*t78899*(4.0/3.0) \
               )-(rho_a[index]*(t79113+t78880*t78974*t79112)+rho_b[index]*(t79116+t78880*t78974*t79115)-t78855*(t78904+ \
               t79061+t79062))*(ccab4*t78986*t78987*t79066*(gamma_aa[index]*gamma_bb[index]*t78981*t78978*t79063* \
               (6.4E1/3.0)+gamma_aa[index]*gamma_bb[index]*t78980*t78981*t78986*t79063*(6.4E1/3.0)+gamma_aa[index]* \
               gamma_bb[index]*gcab*t78981*t78978*t78979*t79063*(1.28E2/3.0))-ccab2*t78980*t78978*1.0/(t78997*t78997* \
               t78997)*t79122*t79119*2.0-ccab4*1.0/(t78992*t78992*t78992)*t78986*t78987*t79132*t79127*2.0+ccab3*gcab* \
               t78980*t78978*t78979*t79064*(gamma_aa[index]*gamma_bb[index]*t78981*t78978*t79063*(3.2E1/3.0)+gamma_aa[index]* \
               gamma_bb[index]*gcab*t78981*t78978*t78979*t79063*(3.2E1/3.0))-ccab2*gamma_aa[index]*gamma_bb[index]* \
               t78981*t78978*t79070*t79063*(3.2E1/9.0)+ccab1*gamma_aa[index]*gamma_bb[index]*t78981*t78978*t79063* \
               t79069*(3.2E1/9.0)+ccab2*gamma_bb[index]*t78981*t78978*t78979*t79119*t79067*(8.0/3.0)+ccab2*gamma_aa[index]* \
               t78978*t78979*t79122*t79063*t79067*(8.0/3.0)-ccab3*gcab*t78980*t78978*t78979*1.0/(t79001*t79001*t79001) \
               *t79140*t79136*2.0+ccab2*gamma_aa[index]*gamma_bb[index]*t78980*t78981*t78986*t79063*t79067*(3.2E1/ \
               9.0)-ccab4*gamma_aa[index]*gamma_bb[index]*t78980*t78981*t78986*t79063*t79068*(6.4E1/3.0)+ccab3*gamma_bb[index]* \
               gcab*t78980*t78981*t78978*t79064*t79136*4.0+ccab3*gamma_aa[index]*gcab*t78980*t78978*t79140*t79063* \
               t79064*4.0+ccab4*gamma_bb[index]*t78980*t78981*t78986*t78979*t79127*t79066*(1.6E1/3.0)+ccab4*gamma_aa[index]* \
               t78980*t78986*t78979*t79132*t79063*t79066*(1.6E1/3.0)-ccab3*gamma_aa[index]*gamma_bb[index]*gcab*t78981* \
               t78978*t78979*t79071*t79063*(3.2E1/3.0)-ccab1*gamma_aa[index]*gamma_bb[index]*gcab*t78981*1.0/(t78994* \
               t78994*t78994)*t78978*t78979*t79063*(3.2E1/9.0))+(t78904+t79061+t79062-t78855*(-t78915+t79002-t79022+ \
               t79106+t79108+t79073+t79109+t78905*t78880*t78916*t78894*t78899*4.0+t78902*t78905*t78880*t78899*t79072+ \
               Aa*a1a*c*t78880*t78917*t78927*t78936*t78867*t78899*(2.0/3.0))+rho_b[index]*(-t79056+t78880*t78974* \
               (t79056-(1.0/(t79032*t79032)*t79060*(b2f*c*t79033*(1.0/3.0)+b4f*t78862*t79039*(2.0/3.0)+b1f*c*t79040* \
               t79033*(1.0/6.0)+b3f*c*t79033*t79025*(1.0/2.0)))/t79043+a1f*c*c0f*t79033*t79058*(2.0/3.0)-a1p*c*c0p* \
               t79033*t79057*(2.0/3.0))+a1p*c*c0p*t79033*t79057*(2.0/3.0))-c0p*t79048*t79057*2.0-t78880*t78974*t79115) \
               *(ccab1*gamma_aa[index]*gcab*t79063*t79065*(4.0/3.0)-ccab2*t78980*t78978*t79119*t79067-ccab4*t78986* \
               t78987*t79127*t79066+ccab2*gamma_aa[index]*t78978*t78979*t79070*t79063*(8.0/3.0)-ccab1*gamma_aa[index]* \
               t78978*t78979*t79063*t79069*(4.0/3.0)+ccab3*gamma_aa[index]*gcab*t78980*t78978*t79071*t79063*4.0+ccab4* \
               gamma_aa[index]*t78980*t78986*t78979*t79063*t79068*(1.6E1/3.0)-ccab3*gcab*t78980*t78978*t78979*t79064* \
               t79136);
        } else if (rho_a[index] > cutoff_) {
            v_rho_a_rho_b_[index] = 0.0;
        } else if (rho_b[index] > cutoff_) {
            v_rho_a_rho_b_[index] = 0.0;
        } else {
            v_rho_a_rho_b_[index] = 0.0;
        } 

        //V_rho_b_rho_b
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t79142 = rho_a[index]+rho_b[index];
            double t79143 = 1.0/pow(t79142,1.0/3.0);
            double t79144 = c*t79143;
            double t79145 = sqrt(t79144);
            double t79146 = b1p*t79145;
            double t79147 = pow(t79144,3.0/2.0);
            double t79148 = b3p*t79147;
            double t79149 = c*c;
            double t79150 = 1.0/pow(t79142,2.0/3.0);
            double t79151 = b4p*t79150*t79149;
            double t79152 = b2p*c*t79143;
            double t79153 = t79151+t79152+t79146+t79148;
            double t79154 = 1.0/pow(t79142,4.0/3.0);
            double t79155 = 1.0/c0p;
            double t79156 = 1.0/t79153;
            double t79157 = t79155*t79156*(1.0/2.0);
            double t79158 = t79157+1.0;
            double t79159 = a1p*c*t79143;
            double t79160 = t79159+1.0;
            double t79161 = rho_a[index]-rho_b[index];
            double t79162 = t79161*t79161;
            double t79163 = 1.0/t79142;
            double t79164 = t79161*t79163;
            double t79165 = two_13*2.0;
            double t79166 = t79165-2.0;
            double t79167 = 1.0/t79166;
            double t79168 = 1.0/c0f;
            double t79169 = b1f*t79145;
            double t79170 = b3f*t79147;
            double t79171 = b4f*t79150*t79149;
            double t79172 = b2f*c*t79143;
            double t79173 = t79170+t79171+t79172+t79169;
            double t79174 = 1.0/t79173;
            double t79175 = t79174*t79168*(1.0/2.0);
            double t79176 = t79175+1.0;
            double t79177 = log(t79176);
            double t79178 = a1f*c*t79143;
            double t79179 = t79178+1.0;
            double t79180 = log(t79158);
            double t79191 = c0f*t79177*t79179*2.0;
            double t79192 = c0p*t79160*t79180*2.0;
            double t79181 = t79191-t79192;
            double t79182 = t79164+1.0;
            double t79183 = pow(t79182,4.0/3.0);
            double t79184 = -t79164+1.0;
            double t79185 = pow(t79184,4.0/3.0);
            double t79186 = t79183+t79185-2.0;
            double t79187 = 1.0/(t79142*t79142);
            double t79188 = t79161*t79187;
            double t79189 = t79163+t79188;
            double t79190 = 1.0/(t79142*t79142*t79142*t79142);
            double t79193 = t79162*t79162;
            double t79194 = 1.0/pow(t79142,5.0/3.0);
            double t79195 = 1.0/sqrt(t79144);
            double t79196 = 1.0/t79158;
            double t79197 = 1.0/(t79153*t79153);
            double t79198 = b4p*t79149*t79194*(2.0/3.0);
            double t79199 = b2p*c*t79154*(1.0/3.0);
            double t79200 = b1p*c*t79154*t79195*(1.0/6.0);
            double t79201 = b3p*c*t79145*t79154*(1.0/2.0);
            double t79202 = t79200+t79201+t79198+t79199;
            double t79203 = 1.0/(t79142*t79142*t79142*t79142*t79142);
            double t79204 = 1.0/d2fz0;
            double t79205 = 1.0/Aa;
            double t79206 = b1a*t79145;
            double t79207 = b3a*t79147;
            double t79208 = b4a*t79150*t79149;
            double t79209 = b2a*c*t79143;
            double t79210 = t79206+t79207+t79208+t79209;
            double t79211 = 1.0/t79210;
            double t79212 = t79211*t79205*(1.0/2.0);
            double t79213 = t79212+1.0;
            double t79214 = log(t79213);
            double t79215 = a1a*c*t79143;
            double t79216 = t79215+1.0;
            double t79217 = pow(t79182,1.0/3.0);
            double t79218 = t79217*t79189*(4.0/3.0);
            double t79219 = pow(t79184,1.0/3.0);
            double t79295 = t79219*t79189*(4.0/3.0);
            double t79220 = t79218-t79295;
            double t79221 = t79190*t79193;
            double t79222 = t79221-1.0;
            double t79223 = 1.0/pow(rho_b[index],1.0/3.0);
            double t79224 = c*t79223;
            double t79225 = sqrt(t79224);
            double t79226 = b1f*t79225;
            double t79227 = pow(t79224,3.0/2.0);
            double t79228 = b3f*t79227;
            double t79229 = 1.0/pow(rho_b[index],2.0/3.0);
            double t79230 = b4f*t79229*t79149;
            double t79231 = b2f*c*t79223;
            double t79232 = t79230+t79231+t79226+t79228;
            double t79233 = 1.0/pow(rho_b[index],4.0/3.0);
            double t79234 = b1p*t79225;
            double t79235 = b3p*t79227;
            double t79236 = b4p*t79229*t79149;
            double t79237 = b2p*c*t79223;
            double t79238 = t79234+t79235+t79236+t79237;
            double t79239 = 1.0/pow(rho_b[index],5.0/3.0);
            double t79240 = 1.0/sqrt(t79224);
            double t79241 = 1.0/t79232;
            double t79242 = t79241*t79168*(1.0/2.0);
            double t79243 = t79242+1.0;
            double t79244 = 1.0/t79238;
            double t79245 = t79244*t79155*(1.0/2.0);
            double t79246 = t79245+1.0;
            double t79247 = a1p*c*t79223;
            double t79248 = t79247+1.0;
            double t79249 = 1.0/t79246;
            double t79250 = 1.0/(t79238*t79238);
            double t79251 = b4p*t79149*t79239*(2.0/3.0);
            double t79252 = b2p*c*t79233*(1.0/3.0);
            double t79253 = b1p*c*t79240*t79233*(1.0/6.0);
            double t79254 = b3p*c*t79233*t79225*(1.0/2.0);
            double t79255 = t79251+t79252+t79253+t79254;
            double t79256 = t79250*t79255*t79248*t79249;
            double t79257 = log(t79246);
            double t79258 = pow(2.0,1.0/3.0);
            double t79259 = t79258*2.0;
            double t79260 = t79259-2.0;
            double t79261 = log(t79243);
            double t79262 = a1f*c*t79223;
            double t79263 = t79262+1.0;
            double t79264 = gcab*gcab;
            double t79268 = 1.0/pow(rho_a[index],8.0/3.0);
            double t79269 = gamma_aa[index]*t79268*(1.0/2.0);
            double t79270 = 1.0/pow(rho_b[index],8.0/3.0);
            double t79271 = gamma_bb[index]*t79270*(1.0/2.0);
            double t79265 = t79271+t79269;
            double t79266 = t79265*t79265;
            double t79267 = 1.0/pow(rho_b[index],1.1E1/3.0);
            double t79272 = t79264*t79264;
            double t79273 = t79266*t79266;
            double t79274 = t79264*t79266*6.0;
            double t79275 = gcab*t79264*t79265*t79266*4.0;
            double t79276 = t79272*t79273;
            double t79277 = gcab*t79265*4.0;
            double t79278 = t79274+t79275+t79276+t79277+1.0;
            double t79279 = gcab*t79265;
            double t79280 = t79279+1.0;
            double t79281 = t79264*t79266;
            double t79282 = gcab*t79265*2.0;
            double t79283 = t79281+t79282+1.0;
            double t79284 = t79264*t79266*3.0;
            double t79285 = gcab*t79264*t79265*t79266;
            double t79286 = gcab*t79265*3.0;
            double t79287 = t79284+t79285+t79286+1.0;
            double t79288 = a1p*c*c0p*t79180*t79154*(2.0/3.0);
            double t79289 = 1.0/t79283;
            double t79290 = 1.0/t79287;
            double t79291 = 1.0/t79280;
            double t79292 = 1.0/t79278;
            double t79293 = 1.0/pow(t79142,7.0/3.0);
            double t79294 = 1.0/pow(t79142,8.0/3.0);
            double t79296 = 1.0/t79176;
            double t79297 = 1.0/(t79173*t79173);
            double t79298 = b4f*t79149*t79194*(2.0/3.0);
            double t79299 = b2f*c*t79154*(1.0/3.0);
            double t79300 = b1f*c*t79154*t79195*(1.0/6.0);
            double t79301 = b3f*c*t79145*t79154*(1.0/2.0);
            double t79302 = t79300+t79301+t79298+t79299;
            double t79303 = t79302*t79179*t79296*t79297;
            double t79305 = t79202*t79160*t79196*t79197;
            double t79306 = a1f*c*c0f*t79154*t79177*(2.0/3.0);
            double t79304 = t79303-t79305-t79306+t79288;
            double t79307 = t79202*t79202;
            double t79308 = 1.0/pow(t79144,3.0/2.0);
            double t79309 = b4p*t79149*t79294*(1.0E1/9.0);
            double t79310 = b2p*c*t79293*(4.0/9.0);
            double t79311 = b1p*c*t79293*t79195*(2.0/9.0);
            double t79312 = b3p*c*t79145*t79293*(2.0/3.0);
            double t79313 = b3p*t79149*t79195*t79294*(1.0/1.2E1);
            double t79314 = t79310+t79311+t79312+t79313+t79309-b1p*t79308*t79149*t79294*(1.0/3.6E1);
            double t79315 = 1.0/(t79153*t79153*t79153);
            double t79316 = t79160*t79315*t79307*t79196*2.0;
            double t79317 = t79302*t79302;
            double t79318 = 1.0/(t79158*t79158);
            double t79319 = 1.0/(t79153*t79153*t79153*t79153);
            double t79320 = t79187*2.0;
            double t79321 = 1.0/(t79142*t79142*t79142);
            double t79322 = t79321*t79161*2.0;
            double t79323 = t79320+t79322;
            double t79324 = t79189*t79189;
            double t79325 = a1p*c*c0p*t79180*t79293*(8.0/9.0);
            double t79326 = 1.0/(t79142*t79142*t79142*t79142*t79142*t79142);
            double t79327 = t79161*t79162*t79190*4.0;
            double t79328 = t79203*t79193*4.0;
            double t79329 = t79327+t79328;
            double t79330 = t79323*t79217*(4.0/3.0);
            double t79331 = 1.0/pow(t79182,2.0/3.0);
            double t79332 = t79331*t79324*(4.0/9.0);
            double t79333 = 1.0/pow(t79184,2.0/3.0);
            double t79334 = t79324*t79333*(4.0/9.0);
            double t79335 = t79330+t79332+t79334-t79323*t79219*(4.0/3.0);
            double t79336 = 1.0/t79213;
            double t79337 = 1.0/(t79210*t79210);
            double t79338 = b4a*t79149*t79194*(2.0/3.0);
            double t79339 = b2a*c*t79154*(1.0/3.0);
            double t79340 = b1a*c*t79154*t79195*(1.0/6.0);
            double t79341 = b3a*c*t79145*t79154*(1.0/2.0);
            double t79342 = t79340+t79341+t79338+t79339;
            double t79343 = t79342*t79342;
            double t79344 = 1.0/t79243;
            double t79345 = b4f*t79149*t79239*(2.0/3.0);
            double t79346 = b2f*c*t79233*(1.0/3.0);
            double t79347 = b1f*c*t79240*t79233*(1.0/6.0);
            double t79348 = b3f*c*t79233*t79225*(1.0/2.0);
            double t79349 = t79345+t79346+t79347+t79348;
            double t79350 = 1.0/(t79232*t79232);
            double t79351 = 1.0/pow(rho_b[index],7.0/3.0);
            double t79352 = 1.0/pow(t79224,3.0/2.0);
            double t79353 = t79349*t79349;
            double t79354 = t79255*t79255;
            double t79355 = 1.0/(t79238*t79238*t79238);
            double t79356 = t79354*t79355*t79248*t79249*2.0;
            double t79357 = b4p*t79270*t79149*(1.0E1/9.0);
            double t79358 = b2p*c*t79351*(4.0/9.0);
            double t79359 = b3p*t79240*t79270*t79149*(1.0/1.2E1);
            double t79360 = b1p*c*t79240*t79351*(2.0/9.0);
            double t79361 = b3p*c*t79225*t79351*(2.0/3.0);
            double t79543 = b1p*t79270*t79352*t79149*(1.0/3.6E1);
            double t79362 = t79360+t79361-t79543+t79357+t79358+t79359;
            double t79363 = 1.0/(t79246*t79246);
            double t79364 = 1.0/(t79238*t79238*t79238*t79238);
            double t79365 = a1p*c*c0p*t79351*t79257*(8.0/9.0);
            double t79366 = a1f*c*c0f*t79233*t79261*(2.0/3.0);
            double t79367 = a1p*c*c0p*t79233*t79257*(2.0/3.0);
            double t79368 = 1.0/tau_b[index];
            double t79369 = pow(rho_b[index],2.0/3.0);
            double t79370 = pow(rho_b[index],5.0/3.0);
            double t79371 = C_k*t79370*t79368;
            double t79372 = t79371+1.0;
            double t79373 = t79371-1.0;
            double t79374 = 1.0/(t79372*t79372);
            double t79375 = t79373*t79373;
            double t79376 = t79375*t79375;
            double t79377 = t79376*t79376;
            double t79378 = 1.0/pow(t79372,1.1E1);
            double t79379 = 1.0/(t79372*t79372*t79372);
            double t79380 = 1.0/(t79372*t79372*t79372*t79372);
            double t79381 = 1.0/(t79372*t79372*t79372*t79372*t79372);
            double t79382 = 1.0/(t79372*t79372*t79372*t79372*t79372*t79372);
            double t79383 = 1.0/(t79372*t79372*t79372*t79372*t79372*t79372*t79372);
            double t79384 = 1.0/(t79372*t79372*t79372*t79372*t79372*t79372*t79372*t79372);
            double t79385 = 1.0/(t79372*t79372*t79372*t79372*t79372*t79372*t79372*t79372*t79372);
            double t79386 = 1.0/pow(t79372,1.0E1);
            double t79387 = 1.0/(k*k);
            double t79388 = 1.0/kp;
            double t79389 = 1.0/(rho_b[index]*rho_b[index]);
            double t79390 = rho_b[index]*2.0;
            double t79391 = 1.0/pow(t79390,2.0/3.0);
            double t79392 = gamma_bb[index]*mu_*t79391*t79387*t79388*t79389*(1.0/4.0);
            double t79393 = t79392+1.0;
            double t79394 = 1.0/t79393;
            double t79395 = kp-kp*t79394+1.0;
            double t79396 = C_k*C_k;
            double t79397 = pow(rho_b[index],4.0/3.0);
            double t79398 = 1.0/(tau_b[index]*tau_b[index]);
            double t79399 = 1.0/t79372;
            double t79400 = 1.0/pow(t79372,1.2E1);
            double t79401 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]);
            double t79402 = gamma_bb[index]*mu_*t79401*t79391*t79387*t79388*(1.0/2.0);
            double t79403 = 1.0/pow(t79390,5.0/3.0);
            double t79404 = gamma_bb[index]*mu_*t79403*t79387*t79388*t79389*(1.0/3.0);
            double t79405 = t79402+t79404;
            double t79406 = a_1*t79373*t79399;
            double t79407 = a_10*t79375*t79377*t79386;
            double t79408 = a_11*t79373*t79375*t79377*t79378;
            double t79409 = a_2*t79374*t79375;
            double t79410 = a_3*t79373*t79375*t79379;
            double t79411 = a_4*t79380*t79376;
            double t79412 = a_5*t79381*t79373*t79376;
            double t79413 = a_6*t79382*t79375*t79376;
            double t79414 = a_7*t79373*t79383*t79375*t79376;
            double t79415 = a_8*t79384*t79377;
            double t79416 = a_9*t79373*t79385*t79377;
            double t79417 = t79410+t79411+t79412+t79413+t79414+t79406+t79415+t79407+t79416+t79408+t79409+1.0;
            double t79418 = 1.0/(t79393*t79393);
            double t79419 = C_k*a_1*t79368*t79369*t79399*(5.0/3.0);
            double t79420 = C_k*a_2*t79373*t79374*t79368*t79369*(1.0E1/3.0);
            double t79421 = C_k*a_10*t79373*t79368*t79377*t79386*t79369*(5.0E1/3.0);
            double t79422 = C_k*a_11*t79375*t79368*t79377*t79369*t79378*(5.5E1/3.0);
            double t79423 = C_k*a_3*t79375*t79368*t79369*t79379*5.0;
            double t79424 = C_k*a_4*t79380*t79373*t79375*t79368*t79369*(2.0E1/3.0);
            double t79425 = C_k*a_5*t79381*t79376*t79368*t79369*(2.5E1/3.0);
            double t79426 = C_k*a_6*t79373*t79382*t79376*t79368*t79369*1.0E1;
            double t79427 = C_k*a_7*t79383*t79375*t79376*t79368*t79369*(3.5E1/3.0);
            double t79428 = C_k*a_8*t79373*t79375*t79384*t79376*t79368*t79369*(4.0E1/3.0);
            double t79429 = C_k*a_9*t79385*t79368*t79377*t79369*1.5E1;
            double t79430 = t79420+t79421+t79422+t79423+t79424+t79425+t79426+t79427+t79419+t79428+t79429-C_k* \
               a_1*t79373*t79374*t79368*t79369*(5.0/3.0)-C_k*a_2*t79375*t79368*t79369*t79379*(1.0E1/3.0)-C_k*a_4* \
               t79381*t79376*t79368*t79369*(2.0E1/3.0)-C_k*a_8*t79385*t79368*t79377*t79369*(4.0E1/3.0)-C_k*a_10*t79375* \
               t79368*t79377*t79369*t79378*(5.0E1/3.0)-C_k*a_3*t79380*t79373*t79375*t79368*t79369*5.0-C_k*a_5*t79373* \
               t79382*t79376*t79368*t79369*(2.5E1/3.0)-C_k*a_6*t79383*t79375*t79376*t79368*t79369*1.0E1-C_k*a_9*t79373* \
               t79368*t79377*t79386*t79369*1.5E1-C_k*a_11*t79400*t79373*t79375*t79368*t79377*t79369*(5.5E1/3.0)-C_k* \
               a_7*t79373*t79375*t79384*t79376*t79368*t79369*(3.5E1/3.0);
            double t79431 = 1.0/pow(rho_a[index],1.0/3.0);
            double t79432 = c*t79431;
            double t79433 = sqrt(t79432);
            double t79434 = pow(t79432,3.0/2.0);
            double t79435 = 1.0/pow(rho_a[index],2.0/3.0);
            double t79436 = b1p*t79433;
            double t79437 = b3p*t79434;
            double t79438 = b4p*t79435*t79149;
            double t79439 = b2p*c*t79431;
            double t79440 = t79436+t79437+t79438+t79439;
            double t79441 = 1.0/t79440;
            double t79442 = t79441*t79155*(1.0/2.0);
            double t79443 = t79442+1.0;
            double t79444 = log(t79443);
            double t79445 = a1p*c*t79431;
            double t79446 = t79445+1.0;
            double t79447 = c0p*t79444*t79446*2.0;
            double t79448 = c0f*t79261*t79263*2.0;
            double t79450 = c0p*t79248*t79257*2.0;
            double t79449 = -t79450+t79448;
            double t79451 = t79181*t79190*t79193*t79167*t79186;
            double t79452 = Aa*t79204*t79222*t79214*t79216*t79167*t79186*2.0;
            double t79453 = gamma_bb[index]*gcab*t79267*(1.6E1/3.0);
            double t79454 = gamma_bb[index]*gcab*t79264*t79266*t79267*1.6E1;
            double t79455 = gamma_bb[index]*t79272*t79265*t79266*t79267*(1.6E1/3.0);
            double t79456 = gamma_bb[index]*t79264*t79265*t79267*1.6E1;
            double t79457 = t79453+t79454+t79455+t79456;
            double t79458 = 1.0/(t79280*t79280);
            double t79459 = gamma_bb[index]*gamma_bb[index];
            double t79460 = 1.0/pow(rho_b[index],2.2E1/3.0);
            double t79461 = gamma_bb[index]*gcab*t79267*(8.0/3.0);
            double t79462 = gamma_bb[index]*t79264*t79265*t79267*(8.0/3.0);
            double t79463 = t79461+t79462;
            double t79464 = 1.0/(t79287*t79287);
            double t79465 = 1.0/pow(rho_b[index],1.4E1/3.0);
            double t79466 = 1.0/(t79278*t79278);
            double t79467 = 1.0/(t79283*t79283);
            double t79468 = gamma_bb[index]*gcab*t79267*4.0;
            double t79469 = gamma_bb[index]*gcab*t79264*t79266*t79267*4.0;
            double t79470 = gamma_bb[index]*t79264*t79265*t79267*8.0;
            double t79471 = t79470+t79468+t79469;
            double t79551 = t79350*t79263*t79344*t79349;
            double t79472 = -t79551+t79256+t79366-t79367;
            double t79473 = gcaa*gcaa;
            double t79474 = t79459*t79459;
            double t79475 = t79473*t79473;
            double t79476 = 1.0/pow(rho_b[index],3.2E1/3.0);
            double t79477 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
               rho_b[index]*rho_b[index]);
            double t79478 = 1.0/pow(rho_b[index],1.6E1/3.0);
            double t79479 = t79260*t79167*t79449;
            double t79480 = t79450+t79479;
            double t79481 = tau_b[index]-1.0/1.0E20;
            double t79482 = ( (t79481 > 0.0) ?  1.0 : 0.0 ) ;
            double t79483 = tau_b[index]*2.0;
            double t79484 = 1.0/rho_b[index];
            double t79511 = gamma_bb[index]*t79484*(1.0/4.0);
            double t79485 = -t79511+t79483;
            double t79486 = t79368*t79485*(1.0/2.0);
            double t79487 = t79486-1.0;
            double t79488 = t79482*t79487;
            double t79489 = t79488+1.0;
            double t79490 = gamma_bb[index]*gcaa*t79270*4.0;
            double t79491 = gamma_bb[index]*gcaa*t79473*t79459*t79477*4.0;
            double t79492 = t79473*t79459*t79478*6.0;
            double t79493 = t79474*t79475*t79476;
            double t79494 = t79490+t79491+t79492+t79493+1.0;
            double t79495 = 1.0/t79494;
            double t79496 = gamma_bb[index]*gcaa*t79270;
            double t79497 = t79496+1.0;
            double t79498 = 1.0/t79497;
            double t79499 = gamma_bb[index]*gcaa*t79270*3.0;
            double t79500 = gamma_bb[index]*gcaa*t79473*t79459*t79477;
            double t79501 = t79473*t79459*t79478*3.0;
            double t79502 = t79500+t79501+t79499+1.0;
            double t79503 = 1.0/t79502;
            double t79504 = gamma_bb[index]*gcaa*t79270*2.0;
            double t79505 = t79473*t79459*t79478;
            double t79506 = t79504+t79505+1.0;
            double t79507 = 1.0/t79506;
            double t79508 = 1.0/pow(rho_b[index],1.9E1/3.0);
            double t79509 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
               rho_b[index]*rho_b[index]*rho_b[index]);
            double t79510 = 1.0/pow(rho_b[index],3.5E1/3.0);
            double t79512 = 1.0/pow(rho_b[index],1.0E1);
            double t79513 = 1.0/(t79497*t79497);
            double t79514 = gamma_bb[index]*gcaa*t79267*(3.2E1/3.0);
            double t79515 = gamma_bb[index]*gcaa*t79473*t79509*t79459*3.2E1;
            double t79516 = t79508*t79473*t79459*3.2E1;
            double t79517 = t79510*t79474*t79475*(3.2E1/3.0);
            double t79518 = t79514+t79515+t79516+t79517;
            double t79519 = gamma_bb[index]*gcaa*t79267*(1.6E1/3.0);
            double t79520 = t79508*t79473*t79459*(1.6E1/3.0);
            double t79521 = t79520+t79519;
            double t79522 = gamma_bb[index]*gcaa*t79267*8.0;
            double t79523 = gamma_bb[index]*gcaa*t79473*t79509*t79459*8.0;
            double t79524 = t79508*t79473*t79459*1.6E1;
            double t79525 = t79522+t79523+t79524;
            double t79526 = 1.0/(t79502*t79502);
            double t79527 = 1.0/(t79494*t79494);
            double t79528 = 1.0/pow(rho_b[index],3.8E1/3.0);
            double t79529 = 1.0/(t79506*t79506);
            double t79530 = ccaa4*t79474*t79475*t79476*t79495;
            double t79531 = ccaa1*gamma_bb[index]*gcaa*t79270*t79498;
            double t79532 = ccaa3*gamma_bb[index]*gcaa*t79503*t79473*t79459*t79477;
            double t79533 = ccaa2*t79507*t79473*t79459*t79478;
            double t79534 = ccaa0+t79530+t79531+t79532+t79533;
            double t79535 = 1.0/(t79232*t79232*t79232);
            double t79536 = b4f*t79270*t79149*(1.0E1/9.0);
            double t79537 = b2f*c*t79351*(4.0/9.0);
            double t79538 = b3f*t79240*t79270*t79149*(1.0/1.2E1);
            double t79539 = b1f*c*t79240*t79351*(2.0/9.0);
            double t79540 = b3f*c*t79225*t79351*(2.0/3.0);
            double t79541 = t79540+t79536+t79537+t79538+t79539-b1f*t79270*t79352*t79149*(1.0/3.6E1);
            double t79542 = t79350*t79541*t79263*t79344;
            double t79544 = t79250*t79362*t79248*t79249;
            double t79545 = 1.0/(t79243*t79243);
            double t79546 = 1.0/(t79232*t79232*t79232*t79232);
            double t79547 = t79263*t79353*t79545*t79168*t79546*(1.0/2.0);
            double t79548 = t79155*t79354*t79363*t79364*t79248*(1.0/2.0);
            double t79549 = a1f*c*t79233*t79350*t79344*t79349*(2.0/3.0);
            double t79550 = a1p*c*t79250*t79233*t79255*t79249*(2.0/3.0);
            double t79552 = ccaa4*t79510*t79474*t79475*t79495*(3.2E1/3.0);
            double t79553 = ccaa1*gamma_bb[index]*gcaa*t79267*t79498*(8.0/3.0);
            double t79554 = ccaa3*gamma_bb[index]*gcaa*t79503*t79473*t79509*t79459*8.0;
            double t79555 = ccaa2*t79507*t79508*t79473*t79459*(1.6E1/3.0);
            double t79560 = ccaa1*t79513*t79508*t79473*t79459*(8.0/3.0);
            double t79561 = ccaa3*gamma_bb[index]*gcaa*t79525*t79526*t79473*t79459*t79477;
            double t79562 = ccaa4*t79518*t79527*t79474*t79475*t79476;
            double t79563 = ccaa2*t79521*t79473*t79529*t79459*t79478;
            double t79556 = -t79560+t79552-t79561+t79553-t79562+t79554-t79563+t79555;
            double t79557 = t79551-t79256-t79366+t79367;
            double t79558 = t79260*t79167*t79557;
            double t79559 = t79256-t79367+t79558;
            v_rho_b_rho_b_[index] = (ccab0+ccab1*gcab*t79291*t79265+ccab4*t79272*t79273*t79292+ccab2*t79264*t79266* \
               t79289+ccab3*gcab*t79290*t79264*t79265*t79266)*(-rho_b[index]*(t79550+t79544-t79356-t79365+t79548+ \
               t79260*t79167*(t79542+t79356+t79365+t79547+t79549-t79263*t79344*t79353*t79535*2.0-t79250*t79362*t79248* \
               t79249-a1f*c*c0f*t79261*t79351*(8.0/9.0)-t79155*t79354*t79363*t79364*t79248*(1.0/2.0)-a1p*c*t79250* \
               t79233*t79255*t79249*(2.0/3.0)))-t79142*(t79316+t79325-t79160*t79314*t79196*t79197-t79190*t79193*t79167* \
               t79186*(t79316+t79325-t79160*t79314*t79196*t79197-1.0/(t79173*t79173*t79173)*t79317*t79179*t79296* \
               2.0+t79179*t79296*t79297*(b2f*c*t79293*(4.0/9.0)+b4f*t79149*t79294*(1.0E1/9.0)+b1f*c*t79293*t79195* \
               (2.0/9.0)+b3f*c*t79145*t79293*(2.0/3.0)-b1f*t79308*t79149*t79294*(1.0/3.6E1)+b3f*t79149*t79195*t79294* \
               (1.0/1.2E1))+1.0/(t79173*t79173*t79173*t79173)*t79317*1.0/(t79176*t79176)*t79168*t79179*(1.0/2.0)- \
               a1f*c*c0f*t79293*t79177*(8.0/9.0)-t79160*t79307*t79155*t79318*t79319*(1.0/2.0)+a1f*c*t79302*t79154* \
               t79296*t79297*(2.0/3.0)-a1p*c*t79202*t79154*t79196*t79197*(2.0/3.0))+t79220*t79203*t79181*t79193*t79167* \
               8.0-t79220*t79304*t79190*t79193*t79167*2.0-t79160*t79307*t79155*t79318*t79319*(1.0/2.0)-t79203*t79304* \
               t79193*t79167*t79186*8.0+t79162*t79181*t79190*t79167*t79186*1.2E1+t79181*t79190*t79335*t79193*t79167+ \
               t79181*t79326*t79193*t79167*t79186*2.0E1+t79220*t79161*t79162*t79181*t79190*t79167*8.0+t79203*t79161* \
               t79162*t79181*t79167*t79186*3.2E1-t79304*t79161*t79162*t79190*t79167*t79186*8.0-a1p*c*t79202*t79154* \
               t79196*t79197*(2.0/3.0)+Aa*t79204*t79222*t79214*t79216*t79335*t79167*2.0+Aa*t79220*t79204*t79214*t79216* \
               t79167*t79329*4.0+Aa*t79204*t79214*t79216*t79167*t79186*(t79162*t79190*1.2E1+t79326*t79193*2.0E1+t79203* \
               t79161*t79162*3.2E1)*2.0-t79220*t79204*t79222*t79216*t79342*t79336*t79337*t79167*2.0-t79204*t79216* \
               t79342*t79336*t79337*t79167*t79329*t79186*2.0+1.0/(t79210*t79210*t79210)*t79204*t79222*t79216*t79343* \
               t79336*t79167*t79186*2.0-t79204*t79222*t79216*t79336*t79337*t79167*t79186*(b2a*c*t79293*(4.0/9.0)+ \
               b4a*t79149*t79294*(1.0E1/9.0)+b1a*c*t79293*t79195*(2.0/9.0)+b3a*c*t79145*t79293*(2.0/3.0)-b1a*t79308* \
               t79149*t79294*(1.0/3.6E1)+b3a*t79149*t79195*t79294*(1.0/1.2E1))+Aa*a1a*c*t79220*t79204*t79222*t79214* \
               t79154*t79167*(4.0/3.0)+Aa*a1a*c*t79204*t79222*t79214*t79167*t79293*t79186*(8.0/9.0)+Aa*a1a*c*t79204* \
               t79214*t79154*t79167*t79329*t79186*(4.0/3.0)-1.0/(t79210*t79210*t79210*t79210)*t79204*1.0/(t79213* \
               t79213)*t79222*t79205*t79216*t79343*t79167*t79186*(1.0/2.0)-a1a*c*t79204*t79222*t79342*t79154*t79336* \
               t79337*t79167*t79186*(2.0/3.0))-t79260*t79472*t79167*2.0-t79202*t79160*t79196*t79197*2.0+t79250*t79255* \
               t79248*t79249*2.0+a1p*c*c0p*t79180*t79154*(4.0/3.0)-a1p*c*c0p*t79233*t79257*(4.0/3.0)+t79220*t79181* \
               t79190*t79193*t79167*2.0+t79203*t79181*t79193*t79167*t79186*8.0-t79304*t79190*t79193*t79167*t79186* \
               2.0+t79161*t79162*t79181*t79190*t79167*t79186*8.0+Aa*t79220*t79204*t79222*t79214*t79216*t79167*4.0+ \
               Aa*t79204*t79214*t79216*t79167*t79329*t79186*4.0-t79204*t79222*t79216*t79342*t79336*t79337*t79167* \
               t79186*2.0+Aa*a1a*c*t79204*t79222*t79214*t79154*t79167*t79186*(4.0/3.0))+(rho_b[index]*t79480+rho_a[index]* \
               (t79447-t79260*t79167*(t79447-c0f*log((t79168*(1.0/2.0))/(b1f*t79433+b3f*t79434+b2f*c*t79431+b4f*t79435* \
               t79149)+1.0)*(a1f*c*t79431+1.0)*2.0))-t79142*(t79451+t79452+t79192))*(-ccab2*t79264*t79266*t79467* \
               (gamma_bb[index]*gcab*t79465*(8.8E1/9.0)+t79460*t79264*t79459*(3.2E1/9.0)+gamma_bb[index]*t79264*t79265* \
               t79465*(8.8E1/9.0))+ccab2*t79264*1.0/(t79283*t79283*t79283)*(t79463*t79463)*t79266*2.0+ccab4*t79272* \
               t79273*(t79457*t79457)*1.0/(t79278*t79278*t79278)*2.0+ccab1*gamma_bb[index]*gcab*t79291*t79465*(4.4E1/ \
               9.0)-ccab1*t79460*t79264*t79458*t79459*(3.2E1/9.0)+ccab2*t79460*t79264*t79459*t79289*(3.2E1/9.0)-ccab4* \
               t79272*t79273*t79466*(gamma_bb[index]*gcab*t79465*(1.76E2/9.0)+t79460*t79264*t79459*(6.4E1/3.0)+gamma_bb[index]* \
               t79264*t79265*t79465*(1.76E2/3.0)+t79460*t79272*t79266*t79459*(6.4E1/3.0)+gamma_bb[index]*gcab*t79264* \
               t79266*t79465*(1.76E2/3.0)+gamma_bb[index]*t79272*t79265*t79266*t79465*(1.76E2/9.0)+gcab*t79460*t79264* \
               t79265*t79459*(1.28E2/3.0))+ccab4*t79460*t79272*t79292*t79266*t79459*(6.4E1/3.0)-ccab1*gamma_bb[index]* \
               t79264*t79265*t79465*t79458*(4.4E1/9.0)+ccab2*gamma_bb[index]*t79264*t79265*t79465*t79289*(8.8E1/9.0) \
               +ccab3*gcab*t79264*(t79471*t79471)*t79265*t79266*1.0/(t79287*t79287*t79287)*2.0+ccab3*gamma_bb[index]* \
               gcab*t79290*t79264*t79266*t79465*(4.4E1/3.0)+ccab4*gamma_bb[index]*t79272*t79265*t79292*t79266*t79465* \
               (1.76E2/9.0)-ccab2*gamma_bb[index]*t79264*t79265*t79463*t79267*t79467*(1.6E1/3.0)+ccab3*gcab*t79460* \
               t79290*t79264*t79265*t79459*(3.2E1/3.0)+ccab1*gcab*1.0/(t79280*t79280*t79280)*t79460*t79264*t79265* \
               t79459*(3.2E1/9.0)-ccab3*gcab*t79264*t79265*t79266*t79464*(gamma_bb[index]*gcab*t79465*(4.4E1/3.0) \
               +t79460*t79264*t79459*(3.2E1/3.0)+gamma_bb[index]*t79264*t79265*t79465*(8.8E1/3.0)+gamma_bb[index]* \
               gcab*t79264*t79266*t79465*(4.4E1/3.0)+gcab*t79460*t79264*t79265*t79459*(3.2E1/3.0))-ccab3*gamma_bb[index]* \
               gcab*t79264*t79471*t79266*t79464*t79267*8.0-ccab4*gamma_bb[index]*t79272*t79265*t79266*t79267*t79457* \
               t79466*(3.2E1/3.0))+(t79451+t79452+t79192+rho_b[index]*(-t79256+t79367+t79260*t79167*(t79256+t79366- \
               t79350*t79263*t79344*t79349-a1p*c*c0p*t79233*t79257*(2.0/3.0)))-t79142*(t79288-t79202*t79160*t79196* \
               t79197+t79220*t79181*t79190*t79193*t79167+t79203*t79181*t79193*t79167*t79186*4.0-t79304*t79190*t79193* \
               t79167*t79186+t79161*t79162*t79181*t79190*t79167*t79186*4.0+Aa*t79220*t79204*t79222*t79214*t79216* \
               t79167*2.0+Aa*t79204*t79214*t79216*t79167*t79329*t79186*2.0-t79204*t79222*t79216*t79342*t79336*t79337* \
               t79167*t79186+Aa*a1a*c*t79204*t79222*t79214*t79154*t79167*t79186*(2.0/3.0))-c0p*t79248*t79257*2.0- \
               t79260*t79167*t79449)*(ccab1*gamma_bb[index]*gcab*t79291*t79267*(4.0/3.0)-ccab2*t79264*t79463*t79266* \
               t79467-ccab4*t79272*t79273*t79457*t79466-ccab1*gamma_bb[index]*t79264*t79265*t79267*t79458*(4.0/3.0) \
               +ccab2*gamma_bb[index]*t79264*t79265*t79267*t79289*(8.0/3.0)+ccab3*gamma_bb[index]*gcab*t79290*t79264* \
               t79266*t79267*4.0+ccab4*gamma_bb[index]*t79272*t79265*t79292*t79266*t79267*(1.6E1/3.0)-ccab3*gcab* \
               t79264*t79471*t79265*t79266*t79464)*2.0-(X-1.0)*(t79430*t79395*2.0+rho_b[index]*t79395*(C_k*a_1*t79223* \
               t79368*t79399*(1.0E1/9.0)-a_1*t79374*t79396*t79397*t79398*(5.0E1/9.0)+a_2*t79374*t79396*t79397*t79398* \
               (5.0E1/9.0)+a_1*t79373*t79396*t79379*t79397*t79398*(5.0E1/9.0)+a_10*t79377*t79386*t79396*t79397*t79398* \
               2.5E2+a_2*t79380*t79375*t79396*t79397*t79398*(5.0E1/3.0)-a_2*t79373*t79396*t79379*t79397*t79398*(2.0E2/ \
               9.0)-a_3*t79380*t79375*t79396*t79397*t79398*5.0E1+a_3*t79373*t79396*t79379*t79397*t79398*(5.0E1/3.0) \
               +a_4*t79380*t79375*t79396*t79397*t79398*(1.0E2/3.0)+a_4*t79382*t79376*t79396*t79397*t79398*(5.0E2/ \
               9.0)-a_5*t79382*t79376*t79396*t79397*t79398*(1.25E3/9.0)+a_6*t79382*t79376*t79396*t79397*t79398*(2.5E2/ \
               3.0)+a_8*t79377*t79386*t79396*t79397*t79398*2.0E2-a_9*t79377*t79386*t79396*t79397*t79398*4.5E2-C_k* \
               a_1*t79223*t79373*t79374*t79368*(1.0E1/9.0)+C_k*a_2*t79223*t79373*t79374*t79368*(2.0E1/9.0)-C_k*a_2* \
               t79223*t79375*t79368*t79379*(2.0E1/9.0)+C_k*a_3*t79223*t79375*t79368*t79379*(1.0E1/3.0)-C_k*a_4*t79223* \
               t79381*t79376*t79368*(4.0E1/9.0)+C_k*a_5*t79223*t79381*t79376*t79368*(5.0E1/9.0)-C_k*a_8*t79223*t79385* \
               t79368*t79377*(8.0E1/9.0)+C_k*a_9*t79223*t79385*t79368*t79377*1.0E1+C_k*a_10*t79223*t79373*t79368* \
               t79377*t79386*(1.0E2/9.0)-C_k*a_10*t79223*t79375*t79368*t79377*t79378*(1.0E2/9.0)+C_k*a_11*t79223* \
               t79375*t79368*t79377*t79378*(1.1E2/9.0)-C_k*a_3*t79223*t79380*t79373*t79375*t79368*(1.0E1/3.0)+C_k* \
               a_4*t79223*t79380*t79373*t79375*t79368*(4.0E1/9.0)-C_k*a_5*t79223*t79373*t79382*t79376*t79368*(5.0E1/ \
               9.0)+C_k*a_6*t79223*t79373*t79382*t79376*t79368*(2.0E1/3.0)-C_k*a_6*t79223*t79383*t79375*t79376*t79368* \
               (2.0E1/3.0)+C_k*a_7*t79223*t79383*t79375*t79376*t79368*(7.0E1/9.0)-C_k*a_9*t79223*t79373*t79368*t79377* \
               t79386*1.0E1+a_10*t79400*t79375*t79377*t79396*t79397*t79398*(2.75E3/9.0)-a_11*t79400*t79375*t79377* \
               t79396*t79397*t79398*(6.05E3/9.0)-a_10*t79373*t79377*t79378*t79396*t79397*t79398*(5.0E3/9.0)+a_11* \
               t79373*t79377*t79378*t79396*t79397*t79398*(2.75E3/9.0)+a_3*t79381*t79373*t79375*t79396*t79397*t79398* \
               (1.0E2/3.0)-a_4*t79381*t79373*t79375*t79396*t79397*t79398*(8.0E2/9.0)+a_5*t79381*t79373*t79375*t79396* \
               t79397*t79398*(5.0E2/9.0)+a_5*t79373*t79383*t79376*t79396*t79397*t79398*(2.5E2/3.0)-a_6*t79373*t79383* \
               t79376*t79396*t79397*t79398*2.0E2+a_6*t79375*t79384*t79376*t79396*t79397*t79398*(3.5E2/3.0)+a_7*t79373* \
               t79383*t79376*t79396*t79397*t79398*(3.5E2/3.0)-a_7*t79375*t79384*t79376*t79396*t79397*t79398*(2.45E3/ \
               9.0)+a_8*t79375*t79384*t79376*t79396*t79397*t79398*(1.4E3/9.0)+a_9*t79373*t79377*t79378*t79396*t79397* \
               t79398*2.5E2+a_11*1.0/pow(t79372,1.3E1)*t79373*t79375*t79377*t79396*t79397*t79398*(1.1E3/3.0)-C_k* \
               a_11*t79400*t79223*t79373*t79375*t79368*t79377*(1.1E2/9.0)-C_k*a_7*t79223*t79373*t79375*t79384*t79376* \
               t79368*(7.0E1/9.0)+C_k*a_8*t79223*t79373*t79375*t79384*t79376*t79368*(8.0E1/9.0)+a_7*t79373*t79375* \
               t79376*t79385*t79396*t79397*t79398*(1.4E3/9.0)-a_8*t79373*t79375*t79376*t79385*t79396*t79397*t79398* \
               (3.2E3/9.0)+a_9*t79373*t79375*t79376*t79385*t79396*t79397*t79398*2.0E2)-kp*t79405*t79417*t79418*2.0+ \
               kp*rho_b[index]*t79417*t79418*(gamma_bb[index]*mu_*t79401*t79403*t79387*t79388*(4.0/3.0)+gamma_bb[index]* \
               mu_*1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index])*t79391*t79387*t79388*(3.0/2.0)+gamma_bb[index]* \
               mu_*1.0/pow(t79390,8.0/3.0)*t79387*t79388*t79389*(1.0E1/9.0))-kp*rho_b[index]*(t79405*t79405)*t79417* \
               1.0/(t79393*t79393*t79393)*2.0-kp*rho_b[index]*t79430*t79405*t79418*2.0)+t79534*t79489*(-t79256+t79367+ \
               t79260*t79472*t79167)*2.0+t79480*t79556*t79489*2.0-rho_b[index]*t79480*t79489*(ccaa1*gamma_bb[index]* \
               gcaa*t79465*t79498*(8.8E1/9.0)-ccaa1*t79513*t79460*t79473*t79459*2.4E1+ccaa2*t79460*t79507*t79473* \
               t79459*(3.04E2/9.0)+ccaa4*t79474*t79528*t79475*t79495*(1.12E3/9.0)-ccaa4*t79510*t79518*t79527*t79474* \
               t79475*(6.4E1/3.0)-ccaa2*t79521*t79508*t79473*t79529*t79459*(3.2E1/3.0)-ccaa2*t79473*t79529*t79459* \
               t79478*(gamma_bb[index]*gcaa*t79465*(1.76E2/9.0)+t79460*t79473*t79459*(3.04E2/9.0))-ccaa4*t79527*t79474* \
               t79475*t79476*(gamma_bb[index]*gcaa*t79465*(3.52E2/9.0)+t79460*t79473*t79459*(6.08E2/3.0)+t79474*t79528* \
               t79475*(1.12E3/9.0)+gamma_bb[index]*gcaa*t79512*t79473*t79459*2.88E2)+ccaa2*(t79521*t79521)*1.0/(t79506* \
               t79506*t79506)*t79473*t79459*t79478*2.0+ccaa4*(t79518*t79518)*t79474*t79475*t79476*1.0/(t79494*t79494* \
               t79494)*2.0+ccaa3*gamma_bb[index]*gcaa*t79503*t79512*t79473*t79459*7.2E1+ccaa1*gamma_bb[index]*gcaa* \
               t79512*t79473*t79459*1.0/(t79497*t79497*t79497)*(1.28E2/9.0)+ccaa3*gamma_bb[index]*gcaa*1.0/(t79502* \
               t79502*t79502)*(t79525*t79525)*t79473*t79459*t79477*2.0-ccaa3*gamma_bb[index]*gcaa*t79526*t79473*t79459* \
               t79477*(gamma_bb[index]*gcaa*t79465*(8.8E1/3.0)+t79460*t79473*t79459*(3.04E2/3.0)+gamma_bb[index]* \
               gcaa*t79512*t79473*t79459*7.2E1)-ccaa3*gamma_bb[index]*gcaa*t79525*t79526*t79473*t79509*t79459*1.6E1) \
               +rho_b[index]*t79556*t79559*t79489*2.0+rho_b[index]*t79534*t79489*(t79550+t79544-t79356-t79365+t79548- \
               t79260*t79167*(t79550-t79542+t79544-t79356-t79365-t79547+t79548-t79549+t79263*t79344*t79353*t79535* \
               2.0+a1f*c*c0f*t79261*t79351*(8.0/9.0)))+gamma_bb[index]*t79480*t79482*t79484*t79556*t79368*(1.0/4.0) \
               -gamma_bb[index]*t79534*t79482*t79484*t79368*t79559*(1.0/4.0);
        } else if (rho_a[index] > cutoff_) {
            v_rho_b_rho_b_[index] = 0.0;
        } else if (rho_b[index] > cutoff_) {
            double t82043 = 1.0/pow(rho_b[index],1.0/3.0);
            double t82044 = c*t82043;
            double t82045 = sqrt(t82044);
            double t82046 = b1f*t82045;
            double t82047 = pow(t82044,3.0/2.0);
            double t82048 = b3f*t82047;
            double t82049 = c*c;
            double t82050 = 1.0/pow(rho_b[index],2.0/3.0);
            double t82051 = b4f*t82050*t82049;
            double t82052 = b2f*c*t82043;
            double t82053 = t82051+t82052+t82046+t82048;
            double t82054 = 1.0/pow(rho_b[index],4.0/3.0);
            double t82055 = b1p*t82045;
            double t82056 = b3p*t82047;
            double t82057 = b4p*t82050*t82049;
            double t82058 = b2p*c*t82043;
            double t82059 = t82055+t82056+t82057+t82058;
            double t82060 = 1.0/pow(rho_b[index],5.0/3.0);
            double t82061 = 1.0/sqrt(t82044);
            double t82062 = 1.0/c0f;
            double t82063 = 1.0/t82053;
            double t82064 = t82062*t82063*(1.0/2.0);
            double t82065 = t82064+1.0;
            double t82066 = 1.0/c0p;
            double t82067 = 1.0/t82059;
            double t82068 = t82066*t82067*(1.0/2.0);
            double t82069 = t82068+1.0;
            double t82070 = a1p*c*t82043;
            double t82071 = t82070+1.0;
            double t82072 = 1.0/t82069;
            double t82073 = 1.0/(t82059*t82059);
            double t82074 = b4p*t82060*t82049*(2.0/3.0);
            double t82075 = b2p*c*t82054*(1.0/3.0);
            double t82076 = b1p*c*t82061*t82054*(1.0/6.0);
            double t82077 = b3p*c*t82045*t82054*(1.0/2.0);
            double t82078 = t82074+t82075+t82076+t82077;
            double t82079 = t82071*t82072*t82073*t82078;
            double t82080 = log(t82069);
            double t82081 = gamma_bb[index]*gamma_bb[index];
            double t82082 = gcaa*gcaa;
            double t82083 = t82081*t82081;
            double t82084 = t82082*t82082;
            double t82085 = 1.0/pow(rho_b[index],3.2E1/3.0);
            double t82086 = 1.0/pow(rho_b[index],8.0/3.0);
            double t82087 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
               rho_b[index]*rho_b[index]);
            double t82088 = 1.0/pow(rho_b[index],1.6E1/3.0);
            double t82089 = pow(2.0,1.0/3.0);
            double t82090 = t82089*2.0;
            double t82091 = t82090-2.0;
            double t82092 = two_13*2.0;
            double t82093 = t82092-2.0;
            double t82094 = 1.0/t82093;
            double t82095 = log(t82065);
            double t82096 = a1f*c*t82043;
            double t82097 = t82096+1.0;
            double t82098 = tau_b[index]-1.0/1.0E20;
            double t82099 = ( (t82098 > 0.0) ?  1.0 : 0.0 ) ;
            double t82100 = 1.0/tau_b[index];
            double t82101 = tau_b[index]*2.0;
            double t82102 = 1.0/rho_b[index];
            double t82150 = gamma_bb[index]*t82102*(1.0/4.0);
            double t82103 = t82101-t82150;
            double t82104 = t82100*t82103*(1.0/2.0);
            double t82105 = t82104-1.0;
            double t82106 = t82105*t82099;
            double t82107 = t82106+1.0;
            double t82108 = gamma_bb[index]*gcaa*t82086*4.0;
            double t82109 = gamma_bb[index]*gcaa*t82081*t82082*t82087*4.0;
            double t82110 = t82081*t82082*t82088*6.0;
            double t82111 = t82083*t82084*t82085;
            double t82112 = t82110+t82111+t82108+t82109+1.0;
            double t82113 = 1.0/t82112;
            double t82114 = gamma_bb[index]*gcaa*t82086;
            double t82115 = t82114+1.0;
            double t82116 = 1.0/t82115;
            double t82117 = gamma_bb[index]*gcaa*t82086*3.0;
            double t82118 = gamma_bb[index]*gcaa*t82081*t82082*t82087;
            double t82119 = t82081*t82082*t82088*3.0;
            double t82120 = t82117+t82118+t82119+1.0;
            double t82121 = 1.0/t82120;
            double t82122 = gamma_bb[index]*gcaa*t82086*2.0;
            double t82123 = t82081*t82082*t82088;
            double t82124 = t82122+t82123+1.0;
            double t82125 = 1.0/t82124;
            double t82126 = 1.0/pow(rho_b[index],1.9E1/3.0);
            double t82127 = 1.0/pow(rho_b[index],1.1E1/3.0);
            double t82128 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
               rho_b[index]*rho_b[index]*rho_b[index]);
            double t82129 = 1.0/pow(rho_b[index],3.5E1/3.0);
            double t82130 = pow(rho_b[index],2.0/3.0);
            double t82131 = pow(rho_b[index],5.0/3.0);
            double t82132 = C_k*t82100*t82131;
            double t82133 = t82132+1.0;
            double t82134 = t82132-1.0;
            double t82135 = 1.0/(t82133*t82133);
            double t82136 = t82134*t82134;
            double t82137 = t82136*t82136;
            double t82138 = t82137*t82137;
            double t82139 = 1.0/pow(t82133,1.1E1);
            double t82140 = 1.0/(t82133*t82133*t82133);
            double t82141 = 1.0/(t82133*t82133*t82133*t82133);
            double t82142 = 1.0/(t82133*t82133*t82133*t82133*t82133);
            double t82143 = 1.0/(t82133*t82133*t82133*t82133*t82133*t82133);
            double t82144 = 1.0/(t82133*t82133*t82133*t82133*t82133*t82133*t82133);
            double t82145 = 1.0/(t82133*t82133*t82133*t82133*t82133*t82133*t82133*t82133);
            double t82146 = 1.0/(t82133*t82133*t82133*t82133*t82133*t82133*t82133*t82133*t82133);
            double t82147 = 1.0/pow(t82133,1.0E1);
            double t82148 = c0f*t82095*t82097*2.0;
            double t82149 = c0p*t82071*t82080*2.0;
            double t82151 = 1.0/pow(rho_b[index],1.0E1);
            double t82152 = 1.0/pow(rho_b[index],2.2E1/3.0);
            double t82153 = 1.0/(t82115*t82115);
            double t82154 = gamma_bb[index]*gcaa*t82127*(3.2E1/3.0);
            double t82155 = gamma_bb[index]*gcaa*t82081*t82082*t82128*3.2E1;
            double t82156 = t82081*t82126*t82082*3.2E1;
            double t82157 = t82083*t82084*t82129*(3.2E1/3.0);
            double t82158 = t82154+t82155+t82156+t82157;
            double t82159 = gamma_bb[index]*gcaa*t82127*(1.6E1/3.0);
            double t82160 = t82081*t82126*t82082*(1.6E1/3.0);
            double t82161 = t82160+t82159;
            double t82162 = gamma_bb[index]*gcaa*t82127*8.0;
            double t82163 = gamma_bb[index]*gcaa*t82081*t82082*t82128*8.0;
            double t82164 = t82081*t82126*t82082*1.6E1;
            double t82165 = t82162+t82163+t82164;
            double t82166 = 1.0/(t82120*t82120);
            double t82167 = 1.0/pow(rho_b[index],1.4E1/3.0);
            double t82168 = 1.0/(t82112*t82112);
            double t82169 = 1.0/pow(rho_b[index],3.8E1/3.0);
            double t82170 = 1.0/(t82124*t82124);
            double t82171 = ccaa4*t82113*t82083*t82084*t82085;
            double t82172 = ccaa1*gamma_bb[index]*gcaa*t82116*t82086;
            double t82173 = ccaa3*gamma_bb[index]*gcaa*t82121*t82081*t82082*t82087;
            double t82174 = ccaa2*t82125*t82081*t82082*t82088;
            double t82175 = ccaa0+t82171+t82172+t82173+t82174;
            double t82176 = 1.0/t82065;
            double t82177 = b4f*t82060*t82049*(2.0/3.0);
            double t82178 = b2f*c*t82054*(1.0/3.0);
            double t82179 = b1f*c*t82061*t82054*(1.0/6.0);
            double t82180 = b3f*c*t82045*t82054*(1.0/2.0);
            double t82181 = t82180+t82177+t82178+t82179;
            double t82182 = 1.0/(t82053*t82053);
            double t82183 = 1.0/pow(rho_b[index],7.0/3.0);
            double t82184 = 1.0/pow(t82044,3.0/2.0);
            double t82185 = t82181*t82181;
            double t82186 = t82078*t82078;
            double t82187 = 1.0/(t82059*t82059*t82059);
            double t82188 = t82071*t82072*t82186*t82187*2.0;
            double t82189 = b4p*t82049*t82086*(1.0E1/9.0);
            double t82190 = b2p*c*t82183*(4.0/9.0);
            double t82191 = b3p*t82061*t82049*t82086*(1.0/1.2E1);
            double t82192 = b1p*c*t82061*t82183*(2.0/9.0);
            double t82193 = b3p*c*t82045*t82183*(2.0/3.0);
            double t82194 = t82190+t82191+t82192+t82193+t82189-b1p*t82049*t82184*t82086*(1.0/3.6E1);
            double t82195 = 1.0/(t82069*t82069);
            double t82196 = 1.0/(t82059*t82059*t82059*t82059);
            double t82197 = a1p*c*c0p*t82080*t82183*(8.0/9.0);
            double t82198 = a1f*c*c0f*t82054*t82095*(2.0/3.0);
            double t82199 = a1p*c*c0p*t82080*t82054*(2.0/3.0);
            double t82200 = ccaa4*t82113*t82083*t82084*t82129*(3.2E1/3.0);
            double t82201 = ccaa1*gamma_bb[index]*gcaa*t82116*t82127*(8.0/3.0);
            double t82202 = ccaa3*gamma_bb[index]*gcaa*t82121*t82081*t82082*t82128*8.0;
            double t82203 = ccaa2*t82125*t82081*t82126*t82082*(1.6E1/3.0);
            double t82240 = ccaa1*t82081*t82126*t82153*t82082*(8.0/3.0);
            double t82241 = ccaa3*gamma_bb[index]*gcaa*t82081*t82082*t82165*t82166*t82087;
            double t82242 = ccaa4*t82083*t82084*t82085*t82158*t82168;
            double t82243 = ccaa2*t82161*t82170*t82081*t82082*t82088;
            double t82204 = t82200+t82201+t82202+t82203-t82240-t82241-t82242-t82243;
            double t82205 = X-1.0;
            double t82206 = 1.0/(k*k);
            double t82207 = 1.0/kp;
            double t82208 = 1.0/(rho_b[index]*rho_b[index]);
            double t82209 = rho_b[index]*2.0;
            double t82210 = 1.0/pow(t82209,2.0/3.0);
            double t82211 = gamma_bb[index]*mu_*t82210*t82206*t82207*t82208*(1.0/4.0);
            double t82212 = t82211+1.0;
            double t82213 = 1.0/t82212;
            double t82214 = kp-kp*t82213+1.0;
            double t82215 = C_k*C_k;
            double t82216 = pow(rho_b[index],4.0/3.0);
            double t82217 = 1.0/(tau_b[index]*tau_b[index]);
            double t82218 = 1.0/t82133;
            double t82219 = 1.0/pow(t82133,1.2E1);
            double t82220 = t82079+t82198-t82199-t82181*t82182*t82176*t82097;
            double t82221 = t82220*t82091*t82094;
            double t82222 = 1.0/(t82212*t82212);
            double t82223 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]);
            double t82224 = 1.0/pow(t82209,5.0/3.0);
            double t82225 = a_1*t82134*t82218;
            double t82226 = a_10*t82136*t82138*t82147;
            double t82227 = a_11*t82134*t82136*t82138*t82139;
            double t82228 = a_2*t82135*t82136;
            double t82229 = a_3*t82140*t82134*t82136;
            double t82230 = a_4*t82141*t82137;
            double t82231 = a_5*t82142*t82134*t82137;
            double t82232 = a_6*t82143*t82136*t82137;
            double t82233 = a_7*t82134*t82144*t82136*t82137;
            double t82234 = a_8*t82145*t82138;
            double t82235 = a_9*t82134*t82146*t82138;
            double t82236 = t82230+t82231+t82232+t82233+t82225+t82234+t82226+t82235+t82227+t82228+t82229+1.0;
            double t82237 = t82148-t82149;
            double t82238 = t82091*t82237*t82094;
            double t82239 = t82238+t82149;
            double t82244 = gamma_bb[index]*mu_*t82210*t82223*t82206*t82207*(1.0/2.0);
            double t82245 = gamma_bb[index]*mu_*t82206*t82224*t82207*t82208*(1.0/3.0);
            double t82246 = t82244+t82245;
            double t82247 = C_k*a_1*t82100*t82130*t82218*(5.0/3.0);
            double t82248 = C_k*a_2*t82100*t82130*t82134*t82135*(1.0E1/3.0);
            double t82249 = C_k*a_10*t82100*t82130*t82134*t82138*t82147*(5.0E1/3.0);
            double t82250 = C_k*a_11*t82100*t82130*t82136*t82138*t82139*(5.5E1/3.0);
            double t82251 = C_k*a_3*t82100*t82130*t82140*t82136*5.0;
            double t82252 = C_k*a_4*t82100*t82130*t82141*t82134*t82136*(2.0E1/3.0);
            double t82253 = C_k*a_5*t82100*t82130*t82142*t82137*(2.5E1/3.0);
            double t82254 = C_k*a_6*t82100*t82130*t82134*t82143*t82137*1.0E1;
            double t82255 = C_k*a_7*t82100*t82130*t82144*t82136*t82137*(3.5E1/3.0);
            double t82256 = C_k*a_8*t82100*t82130*t82134*t82136*t82145*t82137*(4.0E1/3.0);
            double t82257 = C_k*a_9*t82100*t82130*t82146*t82138*1.5E1;
            double t82258 = t82250+t82251+t82252+t82253+t82254+t82255+t82247+t82256+t82248+t82257+t82249-C_k* \
               a_1*t82100*t82130*t82134*t82135*(5.0/3.0)-C_k*a_2*t82100*t82130*t82140*t82136*(1.0E1/3.0)-C_k*a_4* \
               t82100*t82130*t82142*t82137*(2.0E1/3.0)-C_k*a_8*t82100*t82130*t82146*t82138*(4.0E1/3.0)-C_k*a_10*t82100* \
               t82130*t82136*t82138*t82139*(5.0E1/3.0)-C_k*a_3*t82100*t82130*t82141*t82134*t82136*5.0-C_k*a_5*t82100* \
               t82130*t82134*t82143*t82137*(2.5E1/3.0)-C_k*a_6*t82100*t82130*t82144*t82136*t82137*1.0E1-C_k*a_9*t82100* \
               t82130*t82134*t82138*t82147*1.5E1-C_k*a_11*t82100*t82130*t82134*t82136*t82138*t82219*(5.5E1/3.0)-C_k* \
               a_7*t82100*t82130*t82134*t82136*t82145*t82137*(3.5E1/3.0);
            v_rho_b_rho_b_[index] = t82107*t82175*(-t82079+t82199+t82091*t82094*(t82079+t82198-t82181*t82182* \
               t82176*t82097-a1p*c*c0p*t82080*t82054*(2.0/3.0)))*2.0-t82205*t82214*t82258*2.0+t82204*t82107*(t82149+ \
               t82091*t82094*(t82148-c0p*t82071*t82080*2.0))*2.0-rho_b[index]*t82107*t82239*(ccaa1*gamma_bb[index]* \
               gcaa*t82116*t82167*(8.8E1/9.0)-ccaa1*t82152*t82081*t82153*t82082*2.4E1+ccaa2*t82125*t82152*t82081* \
               t82082*(3.04E2/9.0)+ccaa4*t82113*t82083*t82084*t82169*(1.12E3/9.0)-ccaa2*t82161*t82170*t82081*t82126* \
               t82082*(3.2E1/3.0)-ccaa4*t82083*t82084*t82129*t82158*t82168*(6.4E1/3.0)-ccaa2*t82170*t82081*t82082* \
               t82088*(gamma_bb[index]*gcaa*t82167*(1.76E2/9.0)+t82152*t82081*t82082*(3.04E2/9.0))-ccaa4*t82083*t82084* \
               t82085*t82168*(gamma_bb[index]*gcaa*t82167*(3.52E2/9.0)+t82152*t82081*t82082*(6.08E2/3.0)+t82083*t82084* \
               t82169*(1.12E3/9.0)+gamma_bb[index]*gcaa*t82151*t82081*t82082*2.88E2)+ccaa2*1.0/(t82124*t82124*t82124) \
               *(t82161*t82161)*t82081*t82082*t82088*2.0+ccaa4*1.0/(t82112*t82112*t82112)*t82083*t82084*t82085*(t82158* \
               t82158)*2.0+ccaa3*gamma_bb[index]*gcaa*t82121*t82151*t82081*t82082*7.2E1+ccaa1*gamma_bb[index]*gcaa* \
               1.0/(t82115*t82115*t82115)*t82151*t82081*t82082*(1.28E2/9.0)+ccaa3*gamma_bb[index]*gcaa*1.0/(t82120* \
               t82120*t82120)*t82081*t82082*(t82165*t82165)*t82087*2.0-ccaa3*gamma_bb[index]*gcaa*t82081*t82082*t82166* \
               t82087*(gamma_bb[index]*gcaa*t82167*(8.8E1/3.0)+t82152*t82081*t82082*(3.04E2/3.0)+gamma_bb[index]* \
               gcaa*t82151*t82081*t82082*7.2E1)-ccaa3*gamma_bb[index]*gcaa*t82081*t82082*t82128*t82165*t82166*1.6E1) \
               -rho_b[index]*t82205*t82214*(C_k*a_1*t82100*t82043*t82218*(1.0E1/9.0)-a_1*t82215*t82135*t82216*t82217* \
               (5.0E1/9.0)+a_2*t82215*t82135*t82216*t82217*(5.0E1/9.0)+a_1*t82140*t82134*t82215*t82216*t82217*(5.0E1/ \
               9.0)+a_10*t82215*t82216*t82217*t82138*t82147*2.5E2-a_2*t82140*t82134*t82215*t82216*t82217*(2.0E2/9.0) \
               +a_2*t82141*t82215*t82216*t82136*t82217*(5.0E1/3.0)+a_3*t82140*t82134*t82215*t82216*t82217*(5.0E1/ \
               3.0)-a_3*t82141*t82215*t82216*t82136*t82217*5.0E1+a_4*t82141*t82215*t82216*t82136*t82217*(1.0E2/3.0) \
               +a_4*t82143*t82215*t82216*t82217*t82137*(5.0E2/9.0)-a_5*t82143*t82215*t82216*t82217*t82137*(1.25E3/ \
               9.0)+a_6*t82143*t82215*t82216*t82217*t82137*(2.5E2/3.0)+a_8*t82215*t82216*t82217*t82138*t82147*2.0E2- \
               a_9*t82215*t82216*t82217*t82138*t82147*4.5E2-C_k*a_1*t82100*t82043*t82134*t82135*(1.0E1/9.0)-C_k*a_2* \
               t82100*t82140*t82043*t82136*(2.0E1/9.0)+C_k*a_2*t82100*t82043*t82134*t82135*(2.0E1/9.0)+C_k*a_3*t82100* \
               t82140*t82043*t82136*(1.0E1/3.0)-C_k*a_4*t82100*t82043*t82142*t82137*(4.0E1/9.0)+C_k*a_5*t82100*t82043* \
               t82142*t82137*(5.0E1/9.0)-C_k*a_8*t82100*t82043*t82146*t82138*(8.0E1/9.0)+C_k*a_9*t82100*t82043*t82146* \
               t82138*1.0E1+C_k*a_10*t82100*t82043*t82134*t82138*t82147*(1.0E2/9.0)-C_k*a_10*t82100*t82043*t82136* \
               t82138*t82139*(1.0E2/9.0)+C_k*a_11*t82100*t82043*t82136*t82138*t82139*(1.1E2/9.0)-C_k*a_3*t82100*t82141* \
               t82043*t82134*t82136*(1.0E1/3.0)+C_k*a_4*t82100*t82141*t82043*t82134*t82136*(4.0E1/9.0)-C_k*a_5*t82100* \
               t82043*t82134*t82143*t82137*(5.0E1/9.0)+C_k*a_6*t82100*t82043*t82134*t82143*t82137*(2.0E1/3.0)-C_k* \
               a_6*t82100*t82043*t82144*t82136*t82137*(2.0E1/3.0)+C_k*a_7*t82100*t82043*t82144*t82136*t82137*(7.0E1/ \
               9.0)-C_k*a_9*t82100*t82043*t82134*t82138*t82147*1.0E1-a_10*t82134*t82215*t82216*t82217*t82138*t82139* \
               (5.0E3/9.0)+a_10*t82215*t82216*t82136*t82217*t82138*t82219*(2.75E3/9.0)+a_11*t82134*t82215*t82216* \
               t82217*t82138*t82139*(2.75E3/9.0)-a_11*t82215*t82216*t82136*t82217*t82138*t82219*(6.05E3/9.0)+a_3* \
               t82142*t82134*t82215*t82216*t82136*t82217*(1.0E2/3.0)-a_4*t82142*t82134*t82215*t82216*t82136*t82217* \
               (8.0E2/9.0)+a_5*t82142*t82134*t82215*t82216*t82136*t82217*(5.0E2/9.0)+a_5*t82134*t82215*t82144*t82216* \
               t82217*t82137*(2.5E2/3.0)-a_6*t82134*t82215*t82144*t82216*t82217*t82137*2.0E2+a_6*t82215*t82216*t82136* \
               t82145*t82217*t82137*(3.5E2/3.0)+a_7*t82134*t82215*t82144*t82216*t82217*t82137*(3.5E2/3.0)-a_7*t82215* \
               t82216*t82136*t82145*t82217*t82137*(2.45E3/9.0)+a_8*t82215*t82216*t82136*t82145*t82217*t82137*(1.4E3/ \
               9.0)+a_9*t82134*t82215*t82216*t82217*t82138*t82139*2.5E2+a_11*1.0/pow(t82133,1.3E1)*t82134*t82215* \
               t82216*t82136*t82217*t82138*(1.1E3/3.0)-C_k*a_11*t82100*t82043*t82134*t82136*t82138*t82219*(1.1E2/ \
               9.0)-C_k*a_7*t82100*t82043*t82134*t82136*t82145*t82137*(7.0E1/9.0)+C_k*a_8*t82100*t82043*t82134*t82136* \
               t82145*t82137*(8.0E1/9.0)+a_7*t82134*t82215*t82216*t82136*t82217*t82137*t82146*(1.4E3/9.0)-a_8*t82134* \
               t82215*t82216*t82136*t82217*t82137*t82146*(3.2E3/9.0)+a_9*t82134*t82215*t82216*t82136*t82217*t82137* \
               t82146*2.0E2)-rho_b[index]*t82204*t82107*(t82221-t82079+t82199)*2.0+rho_b[index]*t82107*t82175*(-t82188- \
               t82197+t82091*t82094*(t82188+t82197-t82071*t82072*t82073*t82194-1.0/(t82053*t82053*t82053)*t82176* \
               t82185*t82097*2.0+t82182*t82176*t82097*(b2f*c*t82183*(4.0/9.0)+b4f*t82049*t82086*(1.0E1/9.0)+b1f*c* \
               t82061*t82183*(2.0/9.0)+b3f*c*t82045*t82183*(2.0/3.0)-b1f*t82049*t82184*t82086*(1.0/3.6E1)+b3f*t82061* \
               t82049*t82086*(1.0/1.2E1))+1.0/(t82053*t82053*t82053*t82053)*t82062*1.0/(t82065*t82065)*t82185*t82097* \
               (1.0/2.0)-a1f*c*c0f*t82183*t82095*(8.0/9.0)-t82071*t82066*t82186*t82195*t82196*(1.0/2.0)+a1f*c*t82054* \
               t82181*t82182*t82176*(2.0/3.0)-a1p*c*t82054*t82072*t82073*t82078*(2.0/3.0))+t82071*t82072*t82073*t82194+ \
               t82071*t82066*t82186*t82195*t82196*(1.0/2.0)+a1p*c*t82054*t82072*t82073*t82078*(2.0/3.0))+kp*t82222* \
               t82205*t82236*t82246*2.0+gamma_bb[index]*t82100*t82102*t82204*t82239*t82099*(1.0/4.0)+kp*rho_b[index]* \
               t82222*t82205*t82246*t82258*2.0+gamma_bb[index]*t82100*t82102*t82175*t82099*(t82221-t82079+t82199) \
               *(1.0/4.0)-kp*rho_b[index]*t82222*t82205*t82236*(gamma_bb[index]*mu_*t82223*t82206*t82224*t82207*(4.0/ \
               3.0)+gamma_bb[index]*mu_*1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index])*t82210*t82206*t82207* \
               (3.0/2.0)+gamma_bb[index]*mu_*t82206*t82207*t82208*1.0/pow(t82209,8.0/3.0)*(1.0E1/9.0))+kp*rho_b[index]* \
               1.0/(t82212*t82212*t82212)*t82205*t82236*(t82246*t82246)*2.0;
        } else {
            v_rho_b_rho_b_[index] = 0.0;
        } 

        if (is_gga_) {

            //V_rho_a_gamma_aa
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t79565 = 1.0/(k*k);
                double t79566 = 1.0/kp;
                double t79567 = rho_a[index]*2.0;
                double t79568 = 1.0/(rho_a[index]*rho_a[index]);
                double t79569 = 1.0/pow(t79567,2.0/3.0);
                double t79570 = pow(rho_a[index],5.0/3.0);
                double t79571 = 1.0/tau_a[index];
                double t79572 = C_k*t79570*t79571;
                double t79573 = t79572-1.0;
                double t79574 = t79573*t79573;
                double t79575 = t79574*t79574;
                double t79576 = t79575*t79575;
                double t79577 = t79572+1.0;
                double t79578 = gamma_aa[index]*mu_*t79565*t79566*t79568*t79569*(1.0/4.0);
                double t79579 = t79578+1.0;
                double t79580 = 1.0/(t79579*t79579);
                double t79581 = 1.0/t79577;
                double t79582 = a_1*t79581*t79573;
                double t79583 = 1.0/pow(t79577,1.0E1);
                double t79584 = a_10*t79574*t79583*t79576;
                double t79585 = 1.0/pow(t79577,1.1E1);
                double t79586 = a_11*t79573*t79574*t79576*t79585;
                double t79587 = 1.0/(t79577*t79577);
                double t79588 = a_2*t79574*t79587;
                double t79589 = 1.0/(t79577*t79577*t79577);
                double t79590 = a_3*t79573*t79574*t79589;
                double t79591 = 1.0/(t79577*t79577*t79577*t79577);
                double t79592 = a_4*t79591*t79575;
                double t79593 = 1.0/(t79577*t79577*t79577*t79577*t79577);
                double t79594 = a_5*t79573*t79575*t79593;
                double t79595 = 1.0/(t79577*t79577*t79577*t79577*t79577*t79577);
                double t79596 = a_6*t79574*t79575*t79595;
                double t79597 = 1.0/(t79577*t79577*t79577*t79577*t79577*t79577*t79577);
                double t79598 = a_7*t79573*t79574*t79575*t79597;
                double t79599 = 1.0/(t79577*t79577*t79577*t79577*t79577*t79577*t79577*t79577);
                double t79600 = a_8*t79576*t79599;
                double t79601 = 1.0/(t79577*t79577*t79577*t79577*t79577*t79577*t79577*t79577*t79577);
                double t79602 = a_9*t79601*t79573*t79576;
                double t79603 = t79600+t79602+t79590+t79582+t79592+t79584+t79594+t79586+t79596+t79588+t79598+1.0;
                double t79604 = pow(rho_a[index],2.0/3.0);
                double t79605 = 1.0/rho_a[index];
                double t79606 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]);
                double t79607 = 1.0/pow(t79567,5.0/3.0);
                double t79608 = rho_a[index]+rho_b[index];
                double t79609 = 1.0/pow(t79608,1.0/3.0);
                double t79610 = c*t79609;
                double t79611 = sqrt(t79610);
                double t79612 = b1p*t79611;
                double t79613 = pow(t79610,3.0/2.0);
                double t79614 = b3p*t79613;
                double t79615 = c*c;
                double t79616 = 1.0/pow(t79608,2.0/3.0);
                double t79617 = b4p*t79615*t79616;
                double t79618 = b2p*c*t79609;
                double t79619 = t79612+t79614+t79617+t79618;
                double t79620 = 1.0/pow(t79608,4.0/3.0);
                double t79621 = 1.0/c0p;
                double t79622 = 1.0/t79619;
                double t79623 = t79621*t79622*(1.0/2.0);
                double t79624 = t79623+1.0;
                double t79625 = a1p*c*t79609;
                double t79626 = t79625+1.0;
                double t79627 = rho_a[index]-rho_b[index];
                double t79628 = t79627*t79627;
                double t79629 = 1.0/t79608;
                double t79630 = t79627*t79629;
                double t79631 = two_13*2.0;
                double t79632 = t79631-2.0;
                double t79633 = 1.0/t79632;
                double t79634 = 1.0/c0f;
                double t79635 = b1f*t79611;
                double t79636 = b3f*t79613;
                double t79637 = b4f*t79615*t79616;
                double t79638 = b2f*c*t79609;
                double t79639 = t79635+t79636+t79637+t79638;
                double t79640 = 1.0/t79639;
                double t79641 = t79640*t79634*(1.0/2.0);
                double t79642 = t79641+1.0;
                double t79643 = log(t79642);
                double t79644 = a1f*c*t79609;
                double t79645 = t79644+1.0;
                double t79646 = log(t79624);
                double t79656 = c0f*t79643*t79645*2.0;
                double t79657 = c0p*t79626*t79646*2.0;
                double t79647 = t79656-t79657;
                double t79648 = t79630+1.0;
                double t79649 = pow(t79648,4.0/3.0);
                double t79650 = -t79630+1.0;
                double t79651 = pow(t79650,4.0/3.0);
                double t79652 = t79651+t79649-2.0;
                double t79653 = 1.0/(t79608*t79608);
                double t79684 = t79653*t79627;
                double t79654 = t79629-t79684;
                double t79655 = 1.0/(t79608*t79608*t79608*t79608);
                double t79658 = t79628*t79628;
                double t79659 = 1.0/pow(t79608,5.0/3.0);
                double t79660 = 1.0/sqrt(t79610);
                double t79661 = 1.0/t79624;
                double t79662 = 1.0/(t79619*t79619);
                double t79663 = b4p*t79615*t79659*(2.0/3.0);
                double t79664 = b2p*c*t79620*(1.0/3.0);
                double t79665 = b1p*c*t79620*t79660*(1.0/6.0);
                double t79666 = b3p*c*t79611*t79620*(1.0/2.0);
                double t79667 = t79663+t79664+t79665+t79666;
                double t79668 = t79661*t79626*t79662*t79667;
                double t79669 = 1.0/(t79608*t79608*t79608*t79608*t79608);
                double t79670 = 1.0/d2fz0;
                double t79671 = 1.0/Aa;
                double t79672 = b1a*t79611;
                double t79673 = b3a*t79613;
                double t79674 = b4a*t79615*t79616;
                double t79675 = b2a*c*t79609;
                double t79676 = t79672+t79673+t79674+t79675;
                double t79677 = 1.0/t79676;
                double t79678 = t79671*t79677*(1.0/2.0);
                double t79679 = t79678+1.0;
                double t79680 = log(t79679);
                double t79681 = a1a*c*t79609;
                double t79682 = t79681+1.0;
                double t79683 = pow(t79648,1.0/3.0);
                double t79685 = t79654*t79683*(4.0/3.0);
                double t79686 = pow(t79650,1.0/3.0);
                double t79687 = t79685-t79654*t79686*(4.0/3.0);
                double t79688 = t79655*t79658;
                double t79689 = t79688-1.0;
                double t79690 = 1.0/pow(rho_a[index],1.0/3.0);
                double t79691 = c*t79690;
                double t79692 = sqrt(t79691);
                double t79693 = b1f*t79692;
                double t79694 = pow(t79691,3.0/2.0);
                double t79695 = b3f*t79694;
                double t79696 = 1.0/pow(rho_a[index],2.0/3.0);
                double t79697 = b4f*t79615*t79696;
                double t79698 = b2f*c*t79690;
                double t79699 = t79693+t79695+t79697+t79698;
                double t79700 = 1.0/pow(rho_a[index],4.0/3.0);
                double t79701 = b1p*t79692;
                double t79702 = b3p*t79694;
                double t79703 = b4p*t79615*t79696;
                double t79704 = b2p*c*t79690;
                double t79705 = t79701+t79702+t79703+t79704;
                double t79706 = 1.0/pow(rho_a[index],5.0/3.0);
                double t79707 = 1.0/sqrt(t79691);
                double t79708 = 1.0/t79699;
                double t79709 = t79634*t79708*(1.0/2.0);
                double t79710 = t79709+1.0;
                double t79711 = 1.0/t79705;
                double t79712 = t79621*t79711*(1.0/2.0);
                double t79713 = t79712+1.0;
                double t79714 = a1p*c*t79690;
                double t79715 = t79714+1.0;
                double t79716 = 1.0/t79713;
                double t79717 = 1.0/(t79705*t79705);
                double t79718 = b4p*t79615*t79706*(2.0/3.0);
                double t79719 = b2p*c*t79700*(1.0/3.0);
                double t79720 = b1p*c*t79700*t79707*(1.0/6.0);
                double t79721 = b3p*c*t79700*t79692*(1.0/2.0);
                double t79722 = t79720+t79721+t79718+t79719;
                double t79723 = t79722*t79715*t79716*t79717;
                double t79724 = log(t79713);
                double t79725 = pow(2.0,1.0/3.0);
                double t79726 = t79725*2.0;
                double t79727 = t79726-2.0;
                double t79728 = log(t79710);
                double t79729 = a1f*c*t79690;
                double t79730 = t79729+1.0;
                double t79731 = 1.0/pow(rho_a[index],8.0/3.0);
                double t79732 = gamma_aa[index]*t79731*(1.0/2.0);
                double t79733 = 1.0/pow(rho_b[index],8.0/3.0);
                double t79734 = gamma_bb[index]*t79733*(1.0/2.0);
                double t79735 = t79732+t79734;
                double t79736 = gcab*t79735;
                double t79737 = t79736+1.0;
                double t79738 = gcab*gcab;
                double t79739 = t79735*t79735;
                double t79740 = t79738*t79738;
                double t79741 = t79739*t79739;
                double t79742 = t79738*t79739;
                double t79743 = gcab*t79735*2.0;
                double t79744 = t79742+t79743+1.0;
                double t79745 = t79738*t79739*3.0;
                double t79746 = gcab*t79735*t79738*t79739;
                double t79747 = gcab*t79735*3.0;
                double t79748 = t79745+t79746+t79747+1.0;
                double t79749 = t79738*t79739*6.0;
                double t79750 = gcab*t79735*t79738*t79739*4.0;
                double t79751 = t79740*t79741;
                double t79752 = gcab*t79735*4.0;
                double t79753 = t79750+t79751+t79752+t79749+1.0;
                double t79754 = c0f*t79730*t79728*2.0;
                double t79756 = c0p*t79715*t79724*2.0;
                double t79755 = t79754-t79756;
                double t79757 = 1.0/pow(rho_b[index],1.0/3.0);
                double t79758 = c*t79757;
                double t79759 = sqrt(t79758);
                double t79760 = pow(t79758,3.0/2.0);
                double t79761 = 1.0/pow(rho_b[index],2.0/3.0);
                double t79762 = b1p*t79759;
                double t79763 = b3p*t79760;
                double t79764 = b4p*t79615*t79761;
                double t79765 = b2p*c*t79757;
                double t79766 = t79762+t79763+t79764+t79765;
                double t79767 = 1.0/t79766;
                double t79768 = t79621*t79767*(1.0/2.0);
                double t79769 = t79768+1.0;
                double t79770 = log(t79769);
                double t79771 = a1p*c*t79757;
                double t79772 = t79771+1.0;
                double t79773 = c0p*t79770*t79772*2.0;
                double t79774 = t79633*t79652*t79655*t79647*t79658;
                double t79775 = Aa*t79633*t79652*t79670*t79680*t79682*t79689*2.0;
                double t79776 = 1.0/t79737;
                double t79777 = 1.0/pow(rho_a[index],1.1E1/3.0);
                double t79778 = 1.0/(t79737*t79737);
                double t79779 = 1.0/t79744;
                double t79780 = 1.0/(t79748*t79748);
                double t79781 = 1.0/pow(rho_a[index],1.9E1/3.0);
                double t79782 = 1.0/(t79744*t79744);
                double t79783 = 1.0/t79748;
                double t79784 = 1.0/t79753;
                double t79785 = 1.0/(t79753*t79753);
                double t79786 = gcab*t79731*2.0;
                double t79787 = t79731*t79735*t79738*6.0;
                double t79788 = gcab*t79731*t79738*t79739*6.0;
                double t79789 = t79731*t79740*t79735*t79739*2.0;
                double t79790 = t79786+t79787+t79788+t79789;
                double t79791 = gamma_aa[index]*gcab*t79777*(8.0/3.0);
                double t79792 = gamma_aa[index]*t79735*t79738*t79777*(8.0/3.0);
                double t79793 = t79791+t79792;
                double t79794 = gcab*t79731;
                double t79795 = t79731*t79735*t79738;
                double t79796 = t79794+t79795;
                double t79797 = gamma_aa[index]*gcab*t79777*(1.6E1/3.0);
                double t79798 = gamma_aa[index]*gcab*t79738*t79739*t79777*1.6E1;
                double t79799 = gamma_aa[index]*t79740*t79735*t79739*t79777*(1.6E1/3.0);
                double t79800 = gamma_aa[index]*t79735*t79738*t79777*1.6E1;
                double t79801 = t79800+t79797+t79798+t79799;
                double t79802 = gcab*t79731*(3.0/2.0);
                double t79803 = t79731*t79735*t79738*3.0;
                double t79804 = gcab*t79731*t79738*t79739*(3.0/2.0);
                double t79805 = t79802+t79803+t79804;
                double t79806 = gamma_aa[index]*gcab*t79777*4.0;
                double t79807 = gamma_aa[index]*gcab*t79738*t79739*t79777*4.0;
                double t79808 = gamma_aa[index]*t79735*t79738*t79777*8.0;
                double t79809 = t79806+t79807+t79808;
                double t79810 = t79633*t79727*t79755;
                double t79811 = t79810+t79756;
                double t79812 = gamma_aa[index]*gamma_aa[index];
                double t79813 = gcaa*gcaa;
                double t79814 = t79813*t79813;
                double t79815 = 1.0/pow(rho_a[index],3.2E1/3.0);
                double t79816 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t79817 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t79818 = gamma_aa[index]*gcaa*t79731;
                double t79819 = t79818+1.0;
                double t79820 = gamma_aa[index]*gcaa*t79731*3.0;
                double t79821 = gamma_aa[index]*gcaa*t79812*t79813*t79817;
                double t79822 = t79812*t79813*t79816*3.0;
                double t79823 = t79820+t79821+t79822+1.0;
                double t79824 = t79812*t79812;
                double t79825 = gamma_aa[index]*gcaa*t79731*4.0;
                double t79826 = gamma_aa[index]*gcaa*t79812*t79813*t79817*4.0;
                double t79827 = t79812*t79813*t79816*6.0;
                double t79828 = t79814*t79815*t79824;
                double t79829 = t79825+t79826+t79827+t79828+1.0;
                double t79830 = gamma_aa[index]*gcaa*t79731*2.0;
                double t79831 = t79812*t79813*t79816;
                double t79832 = t79830+t79831+1.0;
                double t79833 = tau_a[index]-1.0/1.0E20;
                double t79834 = ( (t79833 > 0.0) ?  1.0 : 0.0 ) ;
                double t79835 = tau_a[index]*2.0;
                double t79875 = gamma_aa[index]*t79605*(1.0/4.0);
                double t79836 = t79835-t79875;
                double t79837 = t79571*t79836*(1.0/2.0);
                double t79838 = t79837-1.0;
                double t79839 = t79834*t79838;
                double t79840 = t79839+1.0;
                double t79841 = 1.0/t79819;
                double t79842 = 1.0/t79829;
                double t79843 = 1.0/t79832;
                double t79844 = 1.0/t79823;
                double t79845 = 1.0/(t79819*t79819);
                double t79846 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]*rho_a[index]);
                double t79847 = 1.0/(t79823*t79823);
                double t79848 = 1.0/(t79832*t79832);
                double t79849 = gcaa*t79731*3.0;
                double t79850 = gamma_aa[index]*t79813*t79816*6.0;
                double t79851 = gcaa*t79812*t79813*t79817*3.0;
                double t79852 = t79850+t79851+t79849;
                double t79853 = 1.0/pow(rho_a[index],3.5E1/3.0);
                double t79854 = 1.0/(t79829*t79829);
                double t79855 = gcaa*t79731*4.0;
                double t79856 = gamma_aa[index]*t79813*t79816*1.2E1;
                double t79857 = gcaa*t79812*t79813*t79817*1.2E1;
                double t79858 = gamma_aa[index]*t79812*t79814*t79815*4.0;
                double t79859 = t79855+t79856+t79857+t79858;
                double t79860 = gcaa*t79731*2.0;
                double t79861 = gamma_aa[index]*t79813*t79816*2.0;
                double t79862 = t79860+t79861;
                double t79863 = gamma_aa[index]*gcaa*t79777*(1.6E1/3.0);
                double t79864 = t79812*t79813*t79781*(1.6E1/3.0);
                double t79865 = t79863+t79864;
                double t79866 = gamma_aa[index]*gcaa*t79777*8.0;
                double t79867 = gamma_aa[index]*gcaa*t79812*t79813*t79846*8.0;
                double t79868 = t79812*t79813*t79781*1.6E1;
                double t79869 = t79866+t79867+t79868;
                double t79870 = gamma_aa[index]*gcaa*t79777*(3.2E1/3.0);
                double t79871 = gamma_aa[index]*gcaa*t79812*t79813*t79846*3.2E1;
                double t79872 = t79812*t79813*t79781*3.2E1;
                double t79873 = t79814*t79824*t79853*(3.2E1/3.0);
                double t79874 = t79870+t79871+t79872+t79873;
                double t79876 = 1.0/t79710;
                double t79877 = 1.0/(t79699*t79699);
                double t79878 = b4f*t79615*t79706*(2.0/3.0);
                double t79879 = b2f*c*t79700*(1.0/3.0);
                double t79880 = b1f*c*t79700*t79707*(1.0/6.0);
                double t79881 = b3f*c*t79700*t79692*(1.0/2.0);
                double t79882 = t79880+t79881+t79878+t79879;
                double t79883 = a1f*c*c0f*t79700*t79728*(2.0/3.0);
                double t79884 = a1p*c*c0p*t79700*t79724*(2.0/3.0);
                double t79885 = ccaa1*gcaa*t79731*t79841;
                double t79886 = ccaa4*gamma_aa[index]*t79812*t79814*t79815*t79842*4.0;
                double t79887 = ccaa2*gamma_aa[index]*t79813*t79816*t79843*2.0;
                double t79888 = ccaa3*gcaa*t79812*t79813*t79817*t79844*3.0;
                double t79893 = ccaa1*gamma_aa[index]*t79813*t79816*t79845;
                double t79894 = ccaa3*gamma_aa[index]*gcaa*t79812*t79813*t79852*t79817*t79847;
                double t79895 = ccaa4*t79814*t79815*t79824*t79854*t79859;
                double t79896 = ccaa2*t79812*t79813*t79816*t79862*t79848;
                double t79889 = -t79893+t79885-t79894+t79886-t79895+t79887-t79896+t79888;
                double t79890 = t79723+t79883-t79884-t79730*t79882*t79876*t79877;
                double t79891 = t79633*t79727*t79890;
                double t79892 = -t79723+t79891+t79884;
                v_rho_a_gamma_aa_[index] = -(rho_a[index]*t79811+rho_b[index]*(t79773-t79633*t79727*(t79773-c0f*log((t79634* \
                   (1.0/2.0))/(b1f*t79759+b3f*t79760+b2f*c*t79757+b4f*t79615*t79761)+1.0)*(a1f*c*t79757+1.0)*2.0))-t79608* \
                   (t79657+t79774+t79775))*(ccab1*gcab*t79776*t79777*(4.0/3.0)-ccab2*t79782*t79738*t79739*(gcab*t79777* \
                   (8.0/3.0)+gamma_aa[index]*t79781*t79738*(4.0/3.0)+t79735*t79738*t79777*(8.0/3.0))-ccab4*t79740*t79741* \
                   t79785*(gcab*t79777*(1.6E1/3.0)+gamma_aa[index]*t79781*t79738*8.0+t79735*t79738*t79777*1.6E1+gamma_aa[index]* \
                   t79740*t79781*t79739*8.0+gcab*t79738*t79739*t79777*1.6E1+t79740*t79735*t79739*t79777*(1.6E1/3.0)+gamma_aa[index]* \
                   gcab*t79735*t79781*t79738*1.6E1)-ccab1*gamma_aa[index]*t79781*t79738*t79778*(4.0/3.0)+ccab2*gamma_aa[index]* \
                   t79781*t79738*t79779*(4.0/3.0)-ccab1*t79735*t79738*t79777*t79778*(4.0/3.0)+ccab2*t79735*t79738*t79777* \
                   t79779*(8.0/3.0)-ccab2*t79731*t79735*t79782*t79738*t79793+ccab4*t79740*t79735*t79739*t79784*t79777* \
                   (1.6E1/3.0)+ccab4*t79801*t79740*t79741*1.0/(t79753*t79753*t79753)*t79790*2.0+ccab2*1.0/(t79744*t79744* \
                   t79744)*t79738*t79739*t79793*t79796*2.0+ccab4*gamma_aa[index]*t79740*t79781*t79739*t79784*8.0+ccab3* \
                   gcab*t79738*t79783*t79739*t79777*4.0+ccab3*gamma_aa[index]*gcab*t79735*t79781*t79738*t79783*4.0-ccab2* \
                   gamma_aa[index]*t79735*t79782*t79738*t79777*t79796*(8.0/3.0)-ccab3*gcab*t79731*t79780*t79809*t79738* \
                   t79739*(3.0/2.0)-ccab4*t79801*t79731*t79740*t79735*t79739*t79785*2.0-ccab3*gcab*t79735*t79780*t79738* \
                   t79739*(gcab*t79777*4.0+gamma_aa[index]*t79781*t79738*4.0+t79735*t79738*t79777*8.0+gcab*t79738*t79739* \
                   t79777*4.0+gamma_aa[index]*gcab*t79735*t79781*t79738*4.0)+ccab1*gamma_aa[index]*gcab*t79735*t79781* \
                   1.0/(t79737*t79737*t79737)*t79738*(4.0/3.0)+ccab3*gcab*t79805*t79735*t79809*t79738*t79739*1.0/(t79748* \
                   t79748*t79748)*2.0-ccab3*gamma_aa[index]*gcab*t79805*t79780*t79738*t79739*t79777*4.0-ccab4*gamma_aa[index]* \
                   t79740*t79735*t79790*t79739*t79785*t79777*(1.6E1/3.0))-(X-1.0)*(-kp*rho_a[index]*t79603*t79580*(mu_* \
                   t79606*t79565*t79566*t79569*(1.0/2.0)+mu_*t79607*t79565*t79566*t79568*(1.0/3.0))+mu_*t79603*t79580* \
                   t79565*t79568*t79569*(1.0/4.0)+mu_*t79605*t79580*t79565*t79569*(C_k*a_1*t79604*t79571*t79581*(5.0/ \
                   3.0)-C_k*a_1*t79604*t79571*t79573*t79587*(5.0/3.0)+C_k*a_2*t79604*t79571*t79573*t79587*(1.0E1/3.0) \
                   -C_k*a_2*t79604*t79571*t79574*t79589*(1.0E1/3.0)+C_k*a_3*t79604*t79571*t79574*t79589*5.0-C_k*a_4*t79604* \
                   t79571*t79575*t79593*(2.0E1/3.0)+C_k*a_5*t79604*t79571*t79575*t79593*(2.5E1/3.0)-C_k*a_8*t79601*t79604* \
                   t79571*t79576*(4.0E1/3.0)+C_k*a_9*t79601*t79604*t79571*t79576*1.5E1+C_k*a_10*t79604*t79571*t79573* \
                   t79583*t79576*(5.0E1/3.0)-C_k*a_10*t79604*t79571*t79574*t79576*t79585*(5.0E1/3.0)+C_k*a_11*t79604* \
                   t79571*t79574*t79576*t79585*(5.5E1/3.0)-C_k*a_3*t79604*t79571*t79573*t79591*t79574*5.0+C_k*a_4*t79604* \
                   t79571*t79573*t79591*t79574*(2.0E1/3.0)-C_k*a_5*t79604*t79571*t79573*t79575*t79595*(2.5E1/3.0)+C_k* \
                   a_6*t79604*t79571*t79573*t79575*t79595*1.0E1-C_k*a_6*t79604*t79571*t79574*t79575*t79597*1.0E1+C_k* \
                   a_7*t79604*t79571*t79574*t79575*t79597*(3.5E1/3.0)-C_k*a_9*t79604*t79571*t79573*t79583*t79576*1.5E1- \
                   C_k*a_11*t79604*t79571*t79573*t79574*t79576*1.0/pow(t79577,1.2E1)*(5.5E1/3.0)-C_k*a_7*t79604*t79571* \
                   t79573*t79574*t79575*t79599*(3.5E1/3.0)+C_k*a_8*t79604*t79571*t79573*t79574*t79575*t79599*(4.0E1/3.0) \
                   )*(1.0/4.0)+mu_*t79603*t79605*t79565*t79569*1.0/(t79579*t79579*t79579)*(gamma_aa[index]*mu_*t79606* \
                   t79565*t79566*t79569*(1.0/2.0)+gamma_aa[index]*mu_*t79607*t79565*t79566*t79568*(1.0/3.0))*(1.0/2.0) \
                   )-(t79657+t79774+t79775+t79608*(t79668-t79633*t79652*t79655*t79658*(t79668-(t79645*1.0/(t79639*t79639) \
                   *(b2f*c*t79620*(1.0/3.0)+b4f*t79615*t79659*(2.0/3.0)+b1f*c*t79620*t79660*(1.0/6.0)+b3f*c*t79611*t79620* \
                   (1.0/2.0)))/t79642+a1f*c*c0f*t79620*t79643*(2.0/3.0)-a1p*c*c0p*t79620*t79646*(2.0/3.0))-a1p*c*c0p* \
                   t79620*t79646*(2.0/3.0)-t79633*t79652*t79647*t79658*t79669*4.0+t79633*t79655*t79647*t79658*t79687+ \
                   t79633*t79652*t79627*t79628*t79655*t79647*4.0-Aa*t79633*t79652*t79670*t79680*t79682*(t79658*t79669* \
                   4.0-t79627*t79628*t79655*4.0)*2.0+Aa*t79633*t79670*t79680*t79682*t79687*t79689*2.0+(t79633*t79652* \
                   t79670*t79682*1.0/(t79676*t79676)*t79689*(b2a*c*t79620*(1.0/3.0)+b4a*t79615*t79659*(2.0/3.0)+b1a*c* \
                   t79620*t79660*(1.0/6.0)+b3a*c*t79611*t79620*(1.0/2.0)))/t79679-Aa*a1a*c*t79620*t79633*t79652*t79670* \
                   t79680*t79689*(2.0/3.0))+rho_a[index]*(-t79723+t79884+t79633*t79727*(t79723+t79883-t79730*t79882*t79876* \
                   t79877-a1p*c*c0p*t79700*t79724*(2.0/3.0)))-c0p*t79715*t79724*2.0-t79633*t79727*t79755)*(ccab1*gcab* \
                   t79731*t79776*(1.0/2.0)-ccab4*t79740*t79741*t79790*t79785-ccab1*t79731*t79735*t79738*t79778*(1.0/2.0) \
                   +ccab2*t79731*t79735*t79738*t79779-ccab2*t79782*t79738*t79739*t79796+ccab4*t79731*t79740*t79735*t79739* \
                   t79784*2.0+ccab3*gcab*t79731*t79738*t79783*t79739*(3.0/2.0)-ccab3*gcab*t79805*t79735*t79780*t79738* \
                   t79739)-t79811*t79840*t79889+rho_a[index]*t79840*t79892*t79889-rho_a[index]*t79811*t79840*(ccaa1*gcaa* \
                   t79841*t79777*(-8.0/3.0)-ccaa2*gamma_aa[index]*t79813*t79843*t79781*(3.2E1/3.0)+ccaa1*gamma_aa[index]* \
                   t79813*t79781*t79845*8.0+ccaa2*t79812*t79813*t79781*t79862*t79848*(1.6E1/3.0)+ccaa4*t79814*t79824* \
                   t79853*t79854*t79859*(3.2E1/3.0)+ccaa4*t79814*t79815*t79824*t79854*(gcaa*t79777*(3.2E1/3.0)+gamma_aa[index]* \
                   t79813*t79781*6.4E1+gamma_aa[index]*t79812*t79814*t79853*(1.28E2/3.0)+gcaa*t79812*t79813*t79846*9.6E1) \
                   -ccaa1*gcaa*t79812*t79813*1.0/(t79819*t79819*t79819)*t79846*(1.6E1/3.0)+ccaa2*t79812*t79813*t79816* \
                   t79848*(gcaa*t79777*(1.6E1/3.0)+gamma_aa[index]*t79813*t79781*(3.2E1/3.0))-ccaa4*gamma_aa[index]*t79812* \
                   t79814*t79842*t79853*(1.28E2/3.0)+ccaa2*gamma_aa[index]*t79813*t79816*t79865*t79848*2.0-ccaa3*gcaa* \
                   t79812*t79813*t79844*t79846*2.4E1+ccaa4*gamma_aa[index]*t79812*t79814*t79815*t79854*t79874*4.0+ccaa3* \
                   gcaa*t79812*t79813*t79817*t79847*t79869*3.0-ccaa2*t79812*t79813*1.0/(t79832*t79832*t79832)*t79816* \
                   t79862*t79865*2.0-ccaa4*t79814*t79815*t79824*1.0/(t79829*t79829*t79829)*t79874*t79859*2.0+ccaa3*gamma_aa[index]* \
                   gcaa*t79812*t79813*t79817*t79847*(gcaa*t79777*8.0+gamma_aa[index]*t79813*t79781*3.2E1+gcaa*t79812* \
                   t79813*t79846*2.4E1)+ccaa3*gamma_aa[index]*gcaa*t79812*t79813*t79852*t79846*t79847*8.0-ccaa3*gamma_aa[index]* \
                   gcaa*t79812*t79813*1.0/(t79823*t79823*t79823)*t79852*t79817*t79869*2.0)-t79571*t79834*t79892*(ccaa0+ \
                   ccaa1*gamma_aa[index]*gcaa*t79731*t79841+ccaa2*t79812*t79813*t79816*t79843+ccaa4*t79814*t79815*t79824* \
                   t79842+ccaa3*gamma_aa[index]*gcaa*t79812*t79813*t79817*t79844)*(1.0/8.0)-t79811*t79571*t79834*(ccaa1* \
                   gamma_aa[index]*gcaa*t79841*t79777*(8.0/3.0)+ccaa2*t79812*t79813*t79843*t79781*(1.6E1/3.0)-ccaa1*t79812* \
                   t79813*t79781*t79845*(8.0/3.0)+ccaa4*t79814*t79824*t79842*t79853*(3.2E1/3.0)-ccaa2*t79812*t79813*t79816* \
                   t79865*t79848-ccaa4*t79814*t79815*t79824*t79854*t79874+ccaa3*gamma_aa[index]*gcaa*t79812*t79813*t79844* \
                   t79846*8.0-ccaa3*gamma_aa[index]*gcaa*t79812*t79813*t79817*t79847*t79869)*(1.0/8.0)-gamma_aa[index]* \
                   t79811*t79605*t79571*t79834*t79889*(1.0/8.0);
            } else if (rho_a[index] > cutoff_) {
                double t83387 = 1.0/pow(rho_a[index],1.0/3.0);
                double t83388 = c*t83387;
                double t83389 = sqrt(t83388);
                double t83390 = pow(t83388,3.0/2.0);
                double t83391 = c*c;
                double t83392 = 1.0/pow(rho_a[index],2.0/3.0);
                double t83393 = 1.0/c0p;
                double t83394 = b1p*t83389;
                double t83395 = b3p*t83390;
                double t83396 = b4p*t83391*t83392;
                double t83397 = b2p*c*t83387;
                double t83398 = t83394+t83395+t83396+t83397;
                double t83399 = 1.0/t83398;
                double t83400 = t83393*t83399*(1.0/2.0);
                double t83401 = t83400+1.0;
                double t83402 = log(t83401);
                double t83403 = a1p*c*t83387;
                double t83404 = t83403+1.0;
                double t83405 = 1.0/pow(rho_a[index],8.0/3.0);
                double t83406 = gamma_aa[index]*gamma_aa[index];
                double t83407 = gcaa*gcaa;
                double t83408 = t83407*t83407;
                double t83409 = 1.0/pow(rho_a[index],3.2E1/3.0);
                double t83410 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t83411 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t83412 = gamma_aa[index]*gcaa*t83405;
                double t83413 = t83412+1.0;
                double t83414 = gamma_aa[index]*gcaa*t83405*3.0;
                double t83415 = gamma_aa[index]*gcaa*t83411*t83406*t83407;
                double t83416 = t83410*t83406*t83407*3.0;
                double t83417 = t83414+t83415+t83416+1.0;
                double t83418 = t83406*t83406;
                double t83419 = gamma_aa[index]*gcaa*t83405*4.0;
                double t83420 = gamma_aa[index]*gcaa*t83411*t83406*t83407*4.0;
                double t83421 = t83410*t83406*t83407*6.0;
                double t83422 = t83408*t83409*t83418;
                double t83423 = t83420+t83421+t83422+t83419+1.0;
                double t83424 = gamma_aa[index]*gcaa*t83405*2.0;
                double t83425 = t83410*t83406*t83407;
                double t83426 = t83424+t83425+1.0;
                double t83427 = pow(2.0,1.0/3.0);
                double t83428 = t83427*2.0;
                double t83429 = t83428-2.0;
                double t83430 = two_13*2.0;
                double t83431 = t83430-2.0;
                double t83432 = 1.0/t83431;
                double t83433 = 1.0/c0f;
                double t83434 = b1f*t83389;
                double t83435 = b3f*t83390;
                double t83436 = b4f*t83391*t83392;
                double t83437 = b2f*c*t83387;
                double t83438 = t83434+t83435+t83436+t83437;
                double t83439 = 1.0/t83438;
                double t83440 = t83433*t83439*(1.0/2.0);
                double t83441 = t83440+1.0;
                double t83442 = log(t83441);
                double t83443 = a1f*c*t83387;
                double t83444 = t83443+1.0;
                double t83445 = c0f*t83442*t83444*2.0;
                double t83446 = c0p*t83402*t83404*2.0;
                double t83447 = tau_a[index]-1.0/1.0E20;
                double t83448 = ( (t83447 > 0.0) ?  1.0 : 0.0 ) ;
                double t83449 = 1.0/tau_a[index];
                double t83450 = tau_a[index]*2.0;
                double t83451 = 1.0/rho_a[index];
                double t83496 = gamma_aa[index]*t83451*(1.0/4.0);
                double t83452 = t83450-t83496;
                double t83453 = t83452*t83449*(1.0/2.0);
                double t83454 = t83453-1.0;
                double t83455 = t83454*t83448;
                double t83456 = t83455+1.0;
                double t83457 = 1.0/t83413;
                double t83458 = 1.0/t83423;
                double t83459 = 1.0/t83426;
                double t83460 = 1.0/t83417;
                double t83461 = 1.0/pow(rho_a[index],1.9E1/3.0);
                double t83462 = 1.0/(t83413*t83413);
                double t83463 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]*rho_a[index]);
                double t83464 = 1.0/pow(rho_a[index],1.1E1/3.0);
                double t83465 = 1.0/(t83417*t83417);
                double t83466 = 1.0/(t83426*t83426);
                double t83467 = gcaa*t83405*3.0;
                double t83468 = gamma_aa[index]*t83410*t83407*6.0;
                double t83469 = gcaa*t83411*t83406*t83407*3.0;
                double t83470 = t83467+t83468+t83469;
                double t83471 = 1.0/pow(rho_a[index],3.5E1/3.0);
                double t83472 = 1.0/(t83423*t83423);
                double t83473 = gcaa*t83405*4.0;
                double t83474 = gamma_aa[index]*t83410*t83407*1.2E1;
                double t83475 = gcaa*t83411*t83406*t83407*1.2E1;
                double t83476 = gamma_aa[index]*t83406*t83408*t83409*4.0;
                double t83477 = t83473+t83474+t83475+t83476;
                double t83478 = gcaa*t83405*2.0;
                double t83479 = gamma_aa[index]*t83410*t83407*2.0;
                double t83480 = t83478+t83479;
                double t83481 = gamma_aa[index]*gcaa*t83464*(1.6E1/3.0);
                double t83482 = t83406*t83407*t83461*(1.6E1/3.0);
                double t83483 = t83481+t83482;
                double t83484 = gamma_aa[index]*gcaa*t83464*8.0;
                double t83485 = gamma_aa[index]*gcaa*t83406*t83407*t83463*8.0;
                double t83486 = t83406*t83407*t83461*1.6E1;
                double t83487 = t83484+t83485+t83486;
                double t83488 = gamma_aa[index]*gcaa*t83464*(3.2E1/3.0);
                double t83489 = gamma_aa[index]*gcaa*t83406*t83407*t83463*3.2E1;
                double t83490 = t83406*t83407*t83461*3.2E1;
                double t83491 = t83408*t83471*t83418*(3.2E1/3.0);
                double t83492 = t83490+t83491+t83488+t83489;
                double t83493 = t83445-t83446;
                double t83494 = t83432*t83429*t83493;
                double t83495 = t83446+t83494;
                double t83497 = 1.0/pow(rho_a[index],4.0/3.0);
                double t83498 = 1.0/pow(rho_a[index],5.0/3.0);
                double t83499 = 1.0/sqrt(t83388);
                double t83500 = 1.0/t83401;
                double t83501 = 1.0/(t83398*t83398);
                double t83502 = b4p*t83391*t83498*(2.0/3.0);
                double t83503 = b2p*c*t83497*(1.0/3.0);
                double t83504 = b1p*c*t83497*t83499*(1.0/6.0);
                double t83505 = b3p*c*t83389*t83497*(1.0/2.0);
                double t83506 = t83502+t83503+t83504+t83505;
                double t83507 = t83500*t83501*t83404*t83506;
                double t83508 = ccaa1*gcaa*t83405*t83457;
                double t83509 = ccaa4*gamma_aa[index]*t83406*t83408*t83409*t83458*4.0;
                double t83510 = ccaa2*gamma_aa[index]*t83410*t83407*t83459*2.0;
                double t83511 = ccaa3*gcaa*t83411*t83406*t83460*t83407*3.0;
                double t83522 = ccaa1*gamma_aa[index]*t83410*t83407*t83462;
                double t83523 = ccaa3*gamma_aa[index]*gcaa*t83411*t83406*t83407*t83470*t83465;
                double t83524 = ccaa4*t83408*t83409*t83418*t83472*t83477;
                double t83525 = ccaa2*t83410*t83406*t83407*t83480*t83466;
                double t83512 = t83510+t83511-t83522-t83523-t83524-t83525+t83508+t83509;
                double t83513 = 1.0/t83441;
                double t83514 = 1.0/(t83438*t83438);
                double t83515 = b4f*t83391*t83498*(2.0/3.0);
                double t83516 = b2f*c*t83497*(1.0/3.0);
                double t83517 = b1f*c*t83497*t83499*(1.0/6.0);
                double t83518 = b3f*c*t83389*t83497*(1.0/2.0);
                double t83519 = t83515+t83516+t83517+t83518;
                double t83520 = a1f*c*c0f*t83442*t83497*(2.0/3.0);
                double t83521 = a1p*c*c0p*t83402*t83497*(2.0/3.0);
                double t83526 = 1.0/(k*k);
                double t83527 = 1.0/kp;
                double t83528 = rho_a[index]*2.0;
                double t83529 = 1.0/(rho_a[index]*rho_a[index]);
                double t83530 = 1.0/pow(t83528,2.0/3.0);
                double t83531 = pow(rho_a[index],5.0/3.0);
                double t83532 = C_k*t83531*t83449;
                double t83533 = t83532-1.0;
                double t83534 = t83533*t83533;
                double t83535 = t83534*t83534;
                double t83536 = t83535*t83535;
                double t83537 = t83532+1.0;
                double t83538 = gamma_aa[index]*mu_*t83530*t83526*t83527*t83529*(1.0/4.0);
                double t83539 = t83538+1.0;
                double t83540 = 1.0/(t83539*t83539);
                double t83541 = X-1.0;
                double t83542 = 1.0/t83537;
                double t83543 = pow(rho_a[index],2.0/3.0);
                double t83544 = 1.0/(t83537*t83537);
                double t83545 = 1.0/pow(t83537,1.0E1);
                double t83546 = 1.0/pow(t83537,1.1E1);
                double t83547 = 1.0/(t83537*t83537*t83537);
                double t83548 = 1.0/(t83537*t83537*t83537*t83537);
                double t83549 = 1.0/(t83537*t83537*t83537*t83537*t83537);
                double t83550 = 1.0/(t83537*t83537*t83537*t83537*t83537*t83537);
                double t83551 = 1.0/(t83537*t83537*t83537*t83537*t83537*t83537*t83537);
                double t83552 = 1.0/(t83537*t83537*t83537*t83537*t83537*t83537*t83537*t83537);
                double t83553 = 1.0/(t83537*t83537*t83537*t83537*t83537*t83537*t83537*t83537*t83537);
                double t83554 = a_1*t83533*t83542;
                double t83555 = a_10*t83534*t83536*t83545;
                double t83556 = a_11*t83533*t83534*t83536*t83546;
                double t83557 = a_2*t83534*t83544;
                double t83558 = a_3*t83533*t83534*t83547;
                double t83559 = a_4*t83535*t83548;
                double t83560 = a_5*t83533*t83535*t83549;
                double t83561 = a_6*t83550*t83534*t83535;
                double t83562 = a_7*t83533*t83551*t83534*t83535;
                double t83563 = a_8*t83552*t83536;
                double t83564 = a_9*t83533*t83553*t83536;
                double t83565 = t83560+t83561+t83562+t83554+t83563+t83555+t83564+t83556+t83557+t83558+t83559+1.0;
                double t83566 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]);
                double t83567 = 1.0/pow(t83528,5.0/3.0);
                v_rho_a_gamma_aa_[index] = -t83512*t83456*(t83446+t83432*t83429*(t83445-c0p*t83402*t83404*2.0))-t83448* \
                   t83449*(t83521-t83507+t83432*t83429*(t83520-t83521+t83507-t83513*t83514*t83444*t83519))*(ccaa0+ccaa1* \
                   gamma_aa[index]*gcaa*t83405*t83457+ccaa2*t83410*t83406*t83407*t83459+ccaa4*t83408*t83409*t83418*t83458+ \
                   ccaa3*gamma_aa[index]*gcaa*t83411*t83406*t83460*t83407)*(1.0/8.0)-rho_a[index]*t83456*t83495*(ccaa1* \
                   gcaa*t83464*t83457*(-8.0/3.0)+ccaa1*gamma_aa[index]*t83407*t83461*t83462*8.0-ccaa2*gamma_aa[index]* \
                   t83407*t83461*t83459*(3.2E1/3.0)+ccaa2*t83406*t83407*t83461*t83480*t83466*(1.6E1/3.0)+ccaa4*t83408* \
                   t83471*t83418*t83472*t83477*(3.2E1/3.0)+ccaa4*t83408*t83409*t83418*t83472*(gcaa*t83464*(3.2E1/3.0) \
                   +gamma_aa[index]*t83407*t83461*6.4E1+gamma_aa[index]*t83406*t83408*t83471*(1.28E2/3.0)+gcaa*t83406* \
                   t83407*t83463*9.6E1)-ccaa1*gcaa*1.0/(t83413*t83413*t83413)*t83406*t83407*t83463*(1.6E1/3.0)+ccaa2* \
                   t83410*t83406*t83407*t83466*(gcaa*t83464*(1.6E1/3.0)+gamma_aa[index]*t83407*t83461*(3.2E1/3.0))+ccaa2* \
                   gamma_aa[index]*t83410*t83407*t83483*t83466*2.0-ccaa4*gamma_aa[index]*t83406*t83408*t83471*t83458* \
                   (1.28E2/3.0)-ccaa3*gcaa*t83406*t83460*t83407*t83463*2.4E1+ccaa4*gamma_aa[index]*t83406*t83408*t83409* \
                   t83472*t83492*4.0+ccaa3*gcaa*t83411*t83406*t83407*t83465*t83487*3.0-ccaa2*t83410*t83406*t83407*1.0/ \
                   (t83426*t83426*t83426)*t83480*t83483*2.0-ccaa4*1.0/(t83423*t83423*t83423)*t83408*t83409*t83418*t83492* \
                   t83477*2.0+ccaa3*gamma_aa[index]*gcaa*t83411*t83406*t83407*t83465*(gcaa*t83464*8.0+gamma_aa[index]* \
                   t83407*t83461*3.2E1+gcaa*t83406*t83407*t83463*2.4E1)+ccaa3*gamma_aa[index]*gcaa*t83406*t83407*t83470* \
                   t83463*t83465*8.0-ccaa3*gamma_aa[index]*gcaa*t83411*t83406*t83407*t83470*1.0/(t83417*t83417*t83417) \
                   *t83487*2.0)+rho_a[index]*t83512*t83456*(t83521-t83507+t83432*t83429*(t83520+t83507-t83513*t83514* \
                   t83444*t83519-a1p*c*c0p*t83402*t83497*(2.0/3.0)))-t83448*t83449*t83495*(ccaa1*gamma_aa[index]*gcaa* \
                   t83464*t83457*(8.0/3.0)-ccaa1*t83406*t83407*t83461*t83462*(8.0/3.0)+ccaa2*t83406*t83407*t83461*t83459* \
                   (1.6E1/3.0)+ccaa4*t83408*t83471*t83418*t83458*(3.2E1/3.0)-ccaa2*t83410*t83406*t83407*t83483*t83466- \
                   ccaa4*t83408*t83409*t83418*t83472*t83492+ccaa3*gamma_aa[index]*gcaa*t83406*t83460*t83407*t83463*8.0- \
                   ccaa3*gamma_aa[index]*gcaa*t83411*t83406*t83407*t83465*t83487)*(1.0/8.0)-gamma_aa[index]*t83512*t83451* \
                   t83448*t83449*t83495*(1.0/8.0)+kp*rho_a[index]*t83540*t83541*t83565*(mu_*t83530*t83526*t83527*t83566* \
                   (1.0/2.0)+mu_*t83526*t83527*t83529*t83567*(1.0/3.0))-mu_*t83530*t83540*t83541*t83526*t83529*t83565* \
                   (1.0/4.0)-mu_*t83530*t83540*t83451*t83541*t83526*(C_k*a_1*t83542*t83543*t83449*(5.0/3.0)-C_k*a_1*t83533* \
                   t83543*t83544*t83449*(5.0/3.0)+C_k*a_2*t83533*t83543*t83544*t83449*(1.0E1/3.0)-C_k*a_2*t83534*t83543* \
                   t83547*t83449*(1.0E1/3.0)+C_k*a_3*t83534*t83543*t83547*t83449*5.0-C_k*a_4*t83543*t83535*t83449*t83549* \
                   (2.0E1/3.0)+C_k*a_5*t83543*t83535*t83449*t83549*(2.5E1/3.0)-C_k*a_8*t83543*t83553*t83536*t83449*(4.0E1/ \
                   3.0)+C_k*a_9*t83543*t83553*t83536*t83449*1.5E1+C_k*a_10*t83533*t83543*t83536*t83545*t83449*(5.0E1/ \
                   3.0)-C_k*a_10*t83534*t83543*t83536*t83546*t83449*(5.0E1/3.0)+C_k*a_11*t83534*t83543*t83536*t83546* \
                   t83449*(5.5E1/3.0)-C_k*a_3*t83533*t83534*t83543*t83449*t83548*5.0+C_k*a_4*t83533*t83534*t83543*t83449* \
                   t83548*(2.0E1/3.0)-C_k*a_5*t83550*t83533*t83543*t83535*t83449*(2.5E1/3.0)+C_k*a_6*t83550*t83533*t83543* \
                   t83535*t83449*1.0E1-C_k*a_6*t83551*t83534*t83543*t83535*t83449*1.0E1+C_k*a_7*t83551*t83534*t83543* \
                   t83535*t83449*(3.5E1/3.0)-C_k*a_9*t83533*t83543*t83536*t83545*t83449*1.5E1-C_k*a_11*t83533*t83534* \
                   t83543*t83536*1.0/pow(t83537,1.2E1)*t83449*(5.5E1/3.0)-C_k*a_7*t83533*t83534*t83543*t83552*t83535* \
                   t83449*(3.5E1/3.0)+C_k*a_8*t83533*t83534*t83543*t83552*t83535*t83449*(4.0E1/3.0))*(1.0/4.0)-mu_*t83530* \
                   t83451*t83541*t83526*t83565*1.0/(t83539*t83539*t83539)*(gamma_aa[index]*mu_*t83530*t83526*t83527*t83566* \
                   (1.0/2.0)+gamma_aa[index]*mu_*t83526*t83527*t83529*t83567*(1.0/3.0))*(1.0/2.0);
            } else if (rho_b[index] > cutoff_) {
                v_rho_a_gamma_aa_[index] = 0.0;
            } else {
                v_rho_a_gamma_aa_[index] = 0.0;
            } 

            //V_rho_a_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_a_gamma_ab_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_a_gamma_ab_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_a_gamma_ab_[index] = 0.0;
            } else {
                v_rho_a_gamma_ab_[index] = 0.0;
            } 

            //V_rho_a_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t79899 = rho_a[index]+rho_b[index];
                double t79900 = 1.0/pow(t79899,1.0/3.0);
                double t79901 = c*t79900;
                double t79902 = sqrt(t79901);
                double t79903 = b1p*t79902;
                double t79904 = pow(t79901,3.0/2.0);
                double t79905 = b3p*t79904;
                double t79906 = c*c;
                double t79907 = 1.0/pow(t79899,2.0/3.0);
                double t79908 = b4p*t79906*t79907;
                double t79909 = b2p*c*t79900;
                double t79910 = t79903+t79905+t79908+t79909;
                double t79911 = 1.0/pow(t79899,4.0/3.0);
                double t79912 = 1.0/c0p;
                double t79913 = 1.0/t79910;
                double t79914 = t79912*t79913*(1.0/2.0);
                double t79915 = t79914+1.0;
                double t79916 = a1p*c*t79900;
                double t79917 = t79916+1.0;
                double t79918 = rho_a[index]-rho_b[index];
                double t79919 = t79918*t79918;
                double t79920 = 1.0/t79899;
                double t79921 = t79920*t79918;
                double t79922 = two_13*2.0;
                double t79923 = t79922-2.0;
                double t79924 = 1.0/t79923;
                double t79925 = 1.0/c0f;
                double t79926 = b1f*t79902;
                double t79927 = b3f*t79904;
                double t79928 = b4f*t79906*t79907;
                double t79929 = b2f*c*t79900;
                double t79930 = t79926+t79927+t79928+t79929;
                double t79931 = 1.0/t79930;
                double t79932 = t79931*t79925*(1.0/2.0);
                double t79933 = t79932+1.0;
                double t79934 = log(t79933);
                double t79935 = a1f*c*t79900;
                double t79936 = t79935+1.0;
                double t79937 = log(t79915);
                double t79947 = c0f*t79934*t79936*2.0;
                double t79948 = c0p*t79917*t79937*2.0;
                double t79938 = t79947-t79948;
                double t79939 = t79921+1.0;
                double t79940 = pow(t79939,4.0/3.0);
                double t79941 = -t79921+1.0;
                double t79942 = pow(t79941,4.0/3.0);
                double t79943 = t79940+t79942-2.0;
                double t79944 = 1.0/(t79899*t79899);
                double t79975 = t79944*t79918;
                double t79945 = t79920-t79975;
                double t79946 = 1.0/(t79899*t79899*t79899*t79899);
                double t79949 = t79919*t79919;
                double t79950 = 1.0/pow(t79899,5.0/3.0);
                double t79951 = 1.0/sqrt(t79901);
                double t79952 = 1.0/t79915;
                double t79953 = 1.0/(t79910*t79910);
                double t79954 = b4p*t79950*t79906*(2.0/3.0);
                double t79955 = b2p*c*t79911*(1.0/3.0);
                double t79956 = b1p*c*t79911*t79951*(1.0/6.0);
                double t79957 = b3p*c*t79902*t79911*(1.0/2.0);
                double t79958 = t79954+t79955+t79956+t79957;
                double t79959 = t79952*t79917*t79953*t79958;
                double t79960 = 1.0/(t79899*t79899*t79899*t79899*t79899);
                double t79961 = 1.0/d2fz0;
                double t79962 = 1.0/Aa;
                double t79963 = b1a*t79902;
                double t79964 = b3a*t79904;
                double t79965 = b4a*t79906*t79907;
                double t79966 = b2a*c*t79900;
                double t79967 = t79963+t79964+t79965+t79966;
                double t79968 = 1.0/t79967;
                double t79969 = t79962*t79968*(1.0/2.0);
                double t79970 = t79969+1.0;
                double t79971 = log(t79970);
                double t79972 = a1a*c*t79900;
                double t79973 = t79972+1.0;
                double t79974 = pow(t79939,1.0/3.0);
                double t79976 = t79945*t79974*(4.0/3.0);
                double t79977 = pow(t79941,1.0/3.0);
                double t79978 = t79976-t79945*t79977*(4.0/3.0);
                double t79979 = t79946*t79949;
                double t79980 = t79979-1.0;
                double t79981 = 1.0/pow(rho_a[index],1.0/3.0);
                double t79982 = c*t79981;
                double t79983 = sqrt(t79982);
                double t79984 = b1f*t79983;
                double t79985 = pow(t79982,3.0/2.0);
                double t79986 = b3f*t79985;
                double t79987 = 1.0/pow(rho_a[index],2.0/3.0);
                double t79988 = b4f*t79906*t79987;
                double t79989 = b2f*c*t79981;
                double t79990 = t79984+t79986+t79988+t79989;
                double t79991 = 1.0/pow(rho_a[index],4.0/3.0);
                double t79992 = b1p*t79983;
                double t79993 = b3p*t79985;
                double t79994 = b4p*t79906*t79987;
                double t79995 = b2p*c*t79981;
                double t79996 = t79992+t79993+t79994+t79995;
                double t79997 = 1.0/pow(rho_a[index],5.0/3.0);
                double t79998 = 1.0/sqrt(t79982);
                double t79999 = 1.0/t79990;
                double t80000 = t79925*t79999*(1.0/2.0);
                double t80001 = t80000+1.0;
                double t80002 = 1.0/t79996;
                double t80003 = t79912*t80002*(1.0/2.0);
                double t80004 = t80003+1.0;
                double t80005 = a1p*c*t79981;
                double t80006 = t80005+1.0;
                double t80007 = 1.0/t80004;
                double t80008 = 1.0/(t79996*t79996);
                double t80009 = b4p*t79906*t79997*(2.0/3.0);
                double t80010 = b2p*c*t79991*(1.0/3.0);
                double t80011 = b1p*c*t79991*t79998*(1.0/6.0);
                double t80012 = b3p*c*t79991*t79983*(1.0/2.0);
                double t80013 = t80010+t80011+t80012+t80009;
                double t80014 = t80013*t80006*t80007*t80008;
                double t80015 = log(t80004);
                double t80016 = pow(2.0,1.0/3.0);
                double t80017 = t80016*2.0;
                double t80018 = t80017-2.0;
                double t80019 = log(t80001);
                double t80020 = a1f*c*t79981;
                double t80021 = t80020+1.0;
                double t80022 = 1.0/pow(rho_b[index],8.0/3.0);
                double t80023 = 1.0/pow(rho_a[index],8.0/3.0);
                double t80024 = gamma_aa[index]*t80023*(1.0/2.0);
                double t80025 = gamma_bb[index]*t80022*(1.0/2.0);
                double t80026 = t80024+t80025;
                double t80027 = gcab*t80026;
                double t80028 = t80027+1.0;
                double t80029 = gcab*gcab;
                double t80030 = t80026*t80026;
                double t80031 = t80029*t80029;
                double t80032 = t80030*t80030;
                double t80033 = t80030*t80029;
                double t80034 = gcab*t80026*2.0;
                double t80035 = t80033+t80034+1.0;
                double t80036 = t80030*t80029*3.0;
                double t80037 = gcab*t80030*t80026*t80029;
                double t80038 = gcab*t80026*3.0;
                double t80039 = t80036+t80037+t80038+1.0;
                double t80040 = t80030*t80029*6.0;
                double t80041 = gcab*t80030*t80026*t80029*4.0;
                double t80042 = t80031*t80032;
                double t80043 = gcab*t80026*4.0;
                double t80044 = t80040+t80041+t80042+t80043+1.0;
                double t80045 = c0f*t80021*t80019*2.0;
                double t80047 = c0p*t80006*t80015*2.0;
                double t80046 = t80045-t80047;
                double t80048 = 1.0/pow(rho_b[index],1.0/3.0);
                double t80049 = c*t80048;
                double t80050 = sqrt(t80049);
                double t80051 = pow(t80049,3.0/2.0);
                double t80052 = 1.0/pow(rho_b[index],2.0/3.0);
                double t80053 = b1p*t80050;
                double t80054 = b3p*t80051;
                double t80055 = b4p*t79906*t80052;
                double t80056 = b2p*c*t80048;
                double t80057 = t80053+t80054+t80055+t80056;
                double t80058 = 1.0/t80057;
                double t80059 = t79912*t80058*(1.0/2.0);
                double t80060 = t80059+1.0;
                double t80061 = log(t80060);
                double t80062 = a1p*c*t80048;
                double t80063 = t80062+1.0;
                double t80064 = c0p*t80061*t80063*2.0;
                double t80065 = t79924*t79943*t79946*t79938*t79949;
                double t80066 = Aa*t79924*t79943*t79961*t79971*t79980*t79973*2.0;
                double t80067 = 1.0/pow(rho_a[index],1.1E1/3.0);
                double t80068 = 1.0/(t80039*t80039);
                double t80069 = 1.0/(t80044*t80044);
                double t80070 = gcab*t80022*2.0;
                double t80071 = t80022*t80026*t80029*6.0;
                double t80072 = gcab*t80030*t80022*t80029*6.0;
                double t80073 = t80030*t80022*t80031*t80026*2.0;
                double t80074 = t80070+t80071+t80072+t80073;
                double t80075 = 1.0/(t80035*t80035);
                double t80076 = gamma_aa[index]*gcab*t80067*(8.0/3.0);
                double t80077 = gamma_aa[index]*t80026*t80029*t80067*(8.0/3.0);
                double t80078 = t80076+t80077;
                double t80079 = gcab*t80022;
                double t80080 = t80022*t80026*t80029;
                double t80081 = t80080+t80079;
                double t80082 = gamma_aa[index]*gcab*t80067*(1.6E1/3.0);
                double t80083 = gamma_aa[index]*gcab*t80030*t80029*t80067*1.6E1;
                double t80084 = gamma_aa[index]*t80030*t80031*t80026*t80067*(1.6E1/3.0);
                double t80085 = gamma_aa[index]*t80026*t80029*t80067*1.6E1;
                double t80086 = t80082+t80083+t80084+t80085;
                double t80087 = 1.0/(t80028*t80028);
                double t80088 = 1.0/t80035;
                double t80089 = gcab*t80022*(3.0/2.0);
                double t80090 = t80022*t80026*t80029*3.0;
                double t80091 = gcab*t80030*t80022*t80029*(3.0/2.0);
                double t80092 = t80090+t80091+t80089;
                double t80093 = gamma_aa[index]*gcab*t80067*4.0;
                double t80094 = gamma_aa[index]*gcab*t80030*t80029*t80067*4.0;
                double t80095 = gamma_aa[index]*t80026*t80029*t80067*8.0;
                double t80096 = t80093+t80094+t80095;
                double t80097 = 1.0/t80039;
                double t80098 = 1.0/t80044;
                v_rho_a_gamma_bb_[index] = -(t79948+t80065+t80066+t79899*(t79959-t79924*t79943*t79946*t79949*(t79959- \
                   (1.0/(t79930*t79930)*t79936*(b2f*c*t79911*(1.0/3.0)+b4f*t79950*t79906*(2.0/3.0)+b1f*c*t79911*t79951* \
                   (1.0/6.0)+b3f*c*t79902*t79911*(1.0/2.0)))/t79933+a1f*c*c0f*t79911*t79934*(2.0/3.0)-a1p*c*c0p*t79911* \
                   t79937*(2.0/3.0))-a1p*c*c0p*t79911*t79937*(2.0/3.0)-t79924*t79960*t79943*t79938*t79949*4.0+t79924* \
                   t79946*t79938*t79949*t79978+t79924*t79943*t79918*t79919*t79946*t79938*4.0-Aa*t79924*t79943*t79961* \
                   t79971*t79973*(t79960*t79949*4.0-t79918*t79919*t79946*4.0)*2.0+Aa*t79924*t79961*t79971*t79980*t79973* \
                   t79978*2.0+(t79924*t79943*t79961*t79980*t79973*1.0/(t79967*t79967)*(b2a*c*t79911*(1.0/3.0)+b4a*t79950* \
                   t79906*(2.0/3.0)+b1a*c*t79911*t79951*(1.0/6.0)+b3a*c*t79902*t79911*(1.0/2.0)))/t79970-Aa*a1a*c*t79911* \
                   t79924*t79943*t79961*t79971*t79980*(2.0/3.0))+rho_a[index]*(-t80014+t79924*t80018*(t80014-(1.0/(t79990* \
                   t79990)*t80021*(b2f*c*t79991*(1.0/3.0)+b4f*t79906*t79997*(2.0/3.0)+b1f*c*t79991*t79998*(1.0/6.0)+b3f* \
                   c*t79991*t79983*(1.0/2.0)))/t80001+a1f*c*c0f*t79991*t80019*(2.0/3.0)-a1p*c*c0p*t79991*t80015*(2.0/ \
                   3.0))+a1p*c*c0p*t79991*t80015*(2.0/3.0))-c0p*t80006*t80015*2.0-t79924*t80018*t80046)*((ccab1*gcab* \
                   t80022*(1.0/2.0))/t80028-ccab2*t80030*t80081*t80029*t80075-ccab1*t80022*t80026*t80029*t80087*(1.0/ \
                   2.0)-ccab4*t80031*t80032*t80074*t80069+ccab2*t80022*t80026*t80029*t80088+ccab4*t80030*t80022*t80031* \
                   t80026*t80098*2.0+ccab3*gcab*t80030*t80022*t80029*t80097*(3.0/2.0)-ccab3*gcab*t80030*t80026*t80029* \
                   t80092*t80068)+(rho_a[index]*(t80047+t79924*t80018*t80046)+rho_b[index]*(t80064-t79924*t80018*(t80064- \
                   c0f*log((t79925*(1.0/2.0))/(b1f*t80050+b3f*t80051+b2f*c*t80048+b4f*t79906*t80052)+1.0)*(a1f*c*t80048+ \
                   1.0)*2.0))-t79899*(t79948+t80065+t80066))*(ccab4*t80031*t80032*t80069*(gamma_aa[index]*t80022*t80029* \
                   t80067*8.0+gamma_aa[index]*t80030*t80022*t80031*t80067*8.0+gamma_aa[index]*gcab*t80022*t80026*t80029* \
                   t80067*1.6E1)+ccab2*t80022*t80026*t80029*t80075*t80078-ccab4*t80031*t80032*1.0/(t80044*t80044*t80044) \
                   *t80074*t80086*2.0-ccab2*t80030*1.0/(t80035*t80035*t80035)*t80081*t80029*t80078*2.0+ccab1*gamma_aa[index]* \
                   t80022*t80029*t80067*t80087*(4.0/3.0)-ccab2*gamma_aa[index]*t80022*t80029*t80067*t80088*(4.0/3.0)+ \
                   ccab2*gamma_aa[index]*t80030*t80022*t80031*t80075*t80067*(4.0/3.0)-ccab4*gamma_aa[index]*t80030*t80022* \
                   t80031*t80067*t80098*8.0+ccab2*gamma_aa[index]*t80026*t80081*t80029*t80075*t80067*(8.0/3.0)+ccab3* \
                   gcab*t80030*t80022*t80029*t80068*t80096*(3.0/2.0)+ccab4*t80030*t80022*t80031*t80026*t80086*t80069* \
                   2.0+ccab3*gcab*t80030*t80026*t80029*t80068*(gamma_aa[index]*t80022*t80029*t80067*4.0+gamma_aa[index]* \
                   gcab*t80022*t80026*t80029*t80067*4.0)-ccab1*gamma_aa[index]*gcab*t80022*t80026*1.0/(t80028*t80028* \
                   t80028)*t80029*t80067*(4.0/3.0)-ccab3*gcab*t80030*t80026*t80029*t80092*1.0/(t80039*t80039*t80039)* \
                   t80096*2.0+ccab3*gamma_aa[index]*gcab*t80030*t80029*t80092*t80067*t80068*4.0-ccab3*gamma_aa[index]* \
                   gcab*t80022*t80026*t80029*t80067*t80097*4.0+ccab4*gamma_aa[index]*t80030*t80031*t80026*t80074*t80067* \
                   t80069*(1.6E1/3.0));
            } else if (rho_a[index] > cutoff_) {
                v_rho_a_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_a_gamma_bb_[index] = 0.0;
            } else {
                v_rho_a_gamma_bb_[index] = 0.0;
            } 

            //V_rho_b_gamma_aa
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t80100 = rho_a[index]+rho_b[index];
                double t80101 = 1.0/pow(t80100,1.0/3.0);
                double t80102 = c*t80101;
                double t80103 = sqrt(t80102);
                double t80104 = b1p*t80103;
                double t80105 = pow(t80102,3.0/2.0);
                double t80106 = b3p*t80105;
                double t80107 = c*c;
                double t80108 = 1.0/pow(t80100,2.0/3.0);
                double t80109 = b4p*t80107*t80108;
                double t80110 = b2p*c*t80101;
                double t80111 = t80110+t80104+t80106+t80109;
                double t80112 = 1.0/pow(t80100,4.0/3.0);
                double t80113 = 1.0/c0p;
                double t80114 = 1.0/t80111;
                double t80115 = t80113*t80114*(1.0/2.0);
                double t80116 = t80115+1.0;
                double t80117 = a1p*c*t80101;
                double t80118 = t80117+1.0;
                double t80119 = rho_a[index]-rho_b[index];
                double t80120 = t80119*t80119;
                double t80121 = 1.0/t80100;
                double t80122 = t80121*t80119;
                double t80123 = two_13*2.0;
                double t80124 = t80123-2.0;
                double t80125 = 1.0/t80124;
                double t80126 = 1.0/c0f;
                double t80127 = b1f*t80103;
                double t80128 = b3f*t80105;
                double t80129 = b4f*t80107*t80108;
                double t80130 = b2f*c*t80101;
                double t80131 = t80130+t80127+t80128+t80129;
                double t80132 = 1.0/t80131;
                double t80133 = t80132*t80126*(1.0/2.0);
                double t80134 = t80133+1.0;
                double t80135 = log(t80134);
                double t80136 = a1f*c*t80101;
                double t80137 = t80136+1.0;
                double t80138 = log(t80116);
                double t80149 = c0f*t80135*t80137*2.0;
                double t80150 = c0p*t80118*t80138*2.0;
                double t80139 = -t80150+t80149;
                double t80140 = t80122+1.0;
                double t80141 = pow(t80140,4.0/3.0);
                double t80142 = -t80122+1.0;
                double t80143 = pow(t80142,4.0/3.0);
                double t80144 = t80141+t80143-2.0;
                double t80145 = 1.0/(t80100*t80100);
                double t80146 = t80145*t80119;
                double t80147 = t80121+t80146;
                double t80148 = 1.0/(t80100*t80100*t80100*t80100);
                double t80151 = t80120*t80120;
                double t80152 = 1.0/pow(t80100,5.0/3.0);
                double t80153 = 1.0/sqrt(t80102);
                double t80154 = 1.0/t80116;
                double t80155 = 1.0/(t80111*t80111);
                double t80156 = b4p*t80107*t80152*(2.0/3.0);
                double t80157 = b2p*c*t80112*(1.0/3.0);
                double t80158 = b1p*c*t80112*t80153*(1.0/6.0);
                double t80159 = b3p*c*t80103*t80112*(1.0/2.0);
                double t80160 = t80156+t80157+t80158+t80159;
                double t80161 = 1.0/(t80100*t80100*t80100*t80100*t80100);
                double t80162 = 1.0/d2fz0;
                double t80163 = 1.0/Aa;
                double t80164 = b1a*t80103;
                double t80165 = b3a*t80105;
                double t80166 = b4a*t80107*t80108;
                double t80167 = b2a*c*t80101;
                double t80168 = t80164+t80165+t80166+t80167;
                double t80169 = 1.0/t80168;
                double t80170 = t80163*t80169*(1.0/2.0);
                double t80171 = t80170+1.0;
                double t80172 = log(t80171);
                double t80173 = a1a*c*t80101;
                double t80174 = t80173+1.0;
                double t80175 = pow(t80140,1.0/3.0);
                double t80176 = t80147*t80175*(4.0/3.0);
                double t80177 = pow(t80142,1.0/3.0);
                double t80178 = t80176-t80147*t80177*(4.0/3.0);
                double t80179 = t80151*t80148;
                double t80180 = t80179-1.0;
                double t80181 = 1.0/pow(rho_b[index],1.0/3.0);
                double t80182 = c*t80181;
                double t80183 = sqrt(t80182);
                double t80184 = b1f*t80183;
                double t80185 = pow(t80182,3.0/2.0);
                double t80186 = b3f*t80185;
                double t80187 = 1.0/pow(rho_b[index],2.0/3.0);
                double t80188 = b4f*t80107*t80187;
                double t80189 = b2f*c*t80181;
                double t80190 = t80184+t80186+t80188+t80189;
                double t80191 = 1.0/pow(rho_b[index],4.0/3.0);
                double t80192 = b1p*t80183;
                double t80193 = b3p*t80185;
                double t80194 = b4p*t80107*t80187;
                double t80195 = b2p*c*t80181;
                double t80196 = t80192+t80193+t80194+t80195;
                double t80197 = 1.0/pow(rho_b[index],5.0/3.0);
                double t80198 = 1.0/sqrt(t80182);
                double t80199 = 1.0/t80190;
                double t80200 = t80126*t80199*(1.0/2.0);
                double t80201 = t80200+1.0;
                double t80202 = 1.0/t80196;
                double t80203 = t80202*t80113*(1.0/2.0);
                double t80204 = t80203+1.0;
                double t80205 = a1p*c*t80181;
                double t80206 = t80205+1.0;
                double t80207 = 1.0/t80204;
                double t80208 = 1.0/(t80196*t80196);
                double t80209 = b4p*t80107*t80197*(2.0/3.0);
                double t80210 = b2p*c*t80191*(1.0/3.0);
                double t80211 = b1p*c*t80191*t80198*(1.0/6.0);
                double t80212 = b3p*c*t80191*t80183*(1.0/2.0);
                double t80213 = t80210+t80211+t80212+t80209;
                double t80214 = t80213*t80206*t80207*t80208;
                double t80215 = log(t80204);
                double t80216 = pow(2.0,1.0/3.0);
                double t80217 = t80216*2.0;
                double t80218 = t80217-2.0;
                double t80219 = log(t80201);
                double t80220 = a1f*c*t80181;
                double t80221 = t80220+1.0;
                double t80222 = 1.0/pow(rho_a[index],8.0/3.0);
                double t80223 = gamma_aa[index]*t80222*(1.0/2.0);
                double t80224 = 1.0/pow(rho_b[index],8.0/3.0);
                double t80225 = gamma_bb[index]*t80224*(1.0/2.0);
                double t80226 = t80223+t80225;
                double t80227 = gcab*t80226;
                double t80228 = t80227+1.0;
                double t80229 = gcab*gcab;
                double t80230 = t80226*t80226;
                double t80231 = t80229*t80229;
                double t80232 = t80230*t80230;
                double t80233 = t80230*t80229;
                double t80234 = gcab*t80226*2.0;
                double t80235 = t80233+t80234+1.0;
                double t80236 = t80230*t80229*3.0;
                double t80237 = gcab*t80230*t80226*t80229;
                double t80238 = gcab*t80226*3.0;
                double t80239 = t80236+t80237+t80238+1.0;
                double t80240 = t80230*t80229*6.0;
                double t80241 = gcab*t80230*t80226*t80229*4.0;
                double t80242 = t80231*t80232;
                double t80243 = gcab*t80226*4.0;
                double t80244 = t80240+t80241+t80242+t80243+1.0;
                double t80245 = a1p*c*c0p*t80112*t80138*(2.0/3.0);
                double t80246 = 1.0/pow(rho_a[index],1.0/3.0);
                double t80247 = c*t80246;
                double t80248 = sqrt(t80247);
                double t80249 = pow(t80247,3.0/2.0);
                double t80250 = 1.0/pow(rho_a[index],2.0/3.0);
                double t80251 = b1p*t80248;
                double t80252 = b3p*t80249;
                double t80253 = b4p*t80250*t80107;
                double t80254 = b2p*c*t80246;
                double t80255 = t80251+t80252+t80253+t80254;
                double t80256 = 1.0/t80255;
                double t80257 = t80113*t80256*(1.0/2.0);
                double t80258 = t80257+1.0;
                double t80259 = log(t80258);
                double t80260 = a1p*c*t80246;
                double t80261 = t80260+1.0;
                double t80262 = c0p*t80261*t80259*2.0;
                double t80263 = c0f*t80221*t80219*2.0;
                double t80265 = c0p*t80206*t80215*2.0;
                double t80264 = t80263-t80265;
                double t80266 = t80151*t80125*t80144*t80139*t80148;
                double t80267 = Aa*t80125*t80144*t80162*t80180*t80172*t80174*2.0;
                double t80268 = 1.0/pow(rho_b[index],1.1E1/3.0);
                double t80269 = 1.0/(t80239*t80239);
                double t80270 = 1.0/(t80244*t80244);
                double t80271 = gcab*t80222*2.0;
                double t80272 = t80222*t80226*t80229*6.0;
                double t80273 = gcab*t80230*t80222*t80229*6.0;
                double t80274 = t80230*t80222*t80231*t80226*2.0;
                double t80275 = t80271+t80272+t80273+t80274;
                double t80276 = 1.0/(t80235*t80235);
                double t80277 = gamma_bb[index]*gcab*t80268*(8.0/3.0);
                double t80278 = gamma_bb[index]*t80226*t80229*t80268*(8.0/3.0);
                double t80279 = t80277+t80278;
                double t80280 = gcab*t80222;
                double t80281 = t80222*t80226*t80229;
                double t80282 = t80280+t80281;
                double t80283 = gamma_bb[index]*gcab*t80268*(1.6E1/3.0);
                double t80284 = gamma_bb[index]*gcab*t80230*t80229*t80268*1.6E1;
                double t80285 = gamma_bb[index]*t80230*t80231*t80226*t80268*(1.6E1/3.0);
                double t80286 = gamma_bb[index]*t80226*t80229*t80268*1.6E1;
                double t80287 = t80283+t80284+t80285+t80286;
                double t80288 = 1.0/(t80228*t80228);
                double t80289 = 1.0/t80235;
                double t80290 = gcab*t80222*(3.0/2.0);
                double t80291 = t80222*t80226*t80229*3.0;
                double t80292 = gcab*t80230*t80222*t80229*(3.0/2.0);
                double t80293 = t80290+t80291+t80292;
                double t80294 = gamma_bb[index]*gcab*t80268*4.0;
                double t80295 = gamma_bb[index]*gcab*t80230*t80229*t80268*4.0;
                double t80296 = gamma_bb[index]*t80226*t80229*t80268*8.0;
                double t80297 = t80294+t80295+t80296;
                double t80298 = 1.0/t80239;
                double t80299 = 1.0/t80244;
                v_rho_b_gamma_aa_[index] = (rho_b[index]*(t80265+t80125*t80218*t80264)+rho_a[index]*(t80262-t80125* \
                   t80218*(t80262-c0f*log((t80126*(1.0/2.0))/(b1f*t80248+b3f*t80249+b2f*c*t80246+b4f*t80250*t80107)+1.0) \
                   *(a1f*c*t80246+1.0)*2.0))-t80100*(t80150+t80266+t80267))*(ccab4*t80231*t80232*t80270*(gamma_bb[index]* \
                   t80222*t80229*t80268*8.0+gamma_bb[index]*t80230*t80222*t80231*t80268*8.0+gamma_bb[index]*gcab*t80222* \
                   t80226*t80229*t80268*1.6E1)+ccab2*t80222*t80226*t80229*t80276*t80279-ccab4*t80231*t80232*1.0/(t80244* \
                   t80244*t80244)*t80275*t80287*2.0-ccab2*t80230*1.0/(t80235*t80235*t80235)*t80282*t80229*t80279*2.0+ \
                   ccab1*gamma_bb[index]*t80222*t80229*t80268*t80288*(4.0/3.0)-ccab2*gamma_bb[index]*t80222*t80229*t80268* \
                   t80289*(4.0/3.0)+ccab2*gamma_bb[index]*t80230*t80222*t80231*t80276*t80268*(4.0/3.0)-ccab4*gamma_bb[index]* \
                   t80230*t80222*t80231*t80268*t80299*8.0+ccab2*gamma_bb[index]*t80226*t80282*t80229*t80276*t80268*(8.0/ \
                   3.0)+ccab3*gcab*t80230*t80222*t80229*t80269*t80297*(3.0/2.0)+ccab4*t80230*t80222*t80231*t80270*t80226* \
                   t80287*2.0+ccab3*gcab*t80230*t80226*t80229*t80269*(gamma_bb[index]*t80222*t80229*t80268*4.0+gamma_bb[index]* \
                   gcab*t80222*t80226*t80229*t80268*4.0)-ccab1*gamma_bb[index]*gcab*t80222*t80226*1.0/(t80228*t80228* \
                   t80228)*t80229*t80268*(4.0/3.0)-ccab3*gcab*t80230*t80226*t80229*1.0/(t80239*t80239*t80239)*t80293* \
                   t80297*2.0-ccab3*gamma_bb[index]*gcab*t80222*t80226*t80229*t80268*t80298*4.0+ccab3*gamma_bb[index]* \
                   gcab*t80230*t80229*t80293*t80268*t80269*4.0+ccab4*gamma_bb[index]*t80230*t80231*t80270*t80226*t80275* \
                   t80268*(1.6E1/3.0))-(t80150+t80266+t80267+rho_b[index]*(-t80214+t80125*t80218*(t80214-(t80221*1.0/ \
                   (t80190*t80190)*(b2f*c*t80191*(1.0/3.0)+b4f*t80107*t80197*(2.0/3.0)+b1f*c*t80191*t80198*(1.0/6.0)+ \
                   b3f*c*t80191*t80183*(1.0/2.0)))/t80201+a1f*c*c0f*t80191*t80219*(2.0/3.0)-a1p*c*c0p*t80215*t80191*(2.0/ \
                   3.0))+a1p*c*c0p*t80215*t80191*(2.0/3.0))-t80100*(t80245-t80160*t80118*t80154*t80155+t80151*t80125* \
                   t80161*t80144*t80139*4.0+t80151*t80125*t80139*t80148*t80178-t80151*t80125*t80144*t80148*(t80245-t80160* \
                   t80118*t80154*t80155+(1.0/(t80131*t80131)*t80137*(b2f*c*t80112*(1.0/3.0)+b4f*t80107*t80152*(2.0/3.0) \
                   +b1f*c*t80112*t80153*(1.0/6.0)+b3f*c*t80103*t80112*(1.0/2.0)))/t80134-a1f*c*c0f*t80112*t80135*(2.0/ \
                   3.0))+t80120*t80125*t80144*t80119*t80139*t80148*4.0+Aa*t80125*t80144*t80162*t80172*t80174*(t80151* \
                   t80161*4.0+t80120*t80119*t80148*4.0)*2.0+Aa*t80125*t80162*t80180*t80172*t80174*t80178*2.0-(t80125* \
                   t80144*t80162*t80180*t80174*1.0/(t80168*t80168)*(b2a*c*t80112*(1.0/3.0)+b4a*t80107*t80152*(2.0/3.0) \
                   +b1a*c*t80112*t80153*(1.0/6.0)+b3a*c*t80103*t80112*(1.0/2.0)))/t80171+Aa*a1a*c*t80112*t80125*t80144* \
                   t80162*t80180*t80172*(2.0/3.0))-c0p*t80206*t80215*2.0-t80125*t80218*t80264)*((ccab1*gcab*t80222*(1.0/ \
                   2.0))/t80228-ccab4*t80231*t80232*t80270*t80275-ccab2*t80230*t80282*t80229*t80276-ccab1*t80222*t80226* \
                   t80229*t80288*(1.0/2.0)+ccab2*t80222*t80226*t80229*t80289+ccab4*t80230*t80222*t80231*t80226*t80299* \
                   2.0+ccab3*gcab*t80230*t80222*t80229*t80298*(3.0/2.0)-ccab3*gcab*t80230*t80226*t80229*t80293*t80269) \
                   ;
            } else if (rho_a[index] > cutoff_) {
                v_rho_b_gamma_aa_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_b_gamma_aa_[index] = 0.0;
            } else {
                v_rho_b_gamma_aa_[index] = 0.0;
            } 

            //V_rho_b_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_b_gamma_ab_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_b_gamma_ab_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_b_gamma_ab_[index] = 0.0;
            } else {
                v_rho_b_gamma_ab_[index] = 0.0;
            } 

            //V_rho_b_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t80302 = 1.0/(k*k);
                double t80303 = 1.0/kp;
                double t80304 = rho_b[index]*2.0;
                double t80305 = 1.0/(rho_b[index]*rho_b[index]);
                double t80306 = 1.0/pow(t80304,2.0/3.0);
                double t80307 = pow(rho_b[index],5.0/3.0);
                double t80308 = 1.0/tau_b[index];
                double t80309 = C_k*t80307*t80308;
                double t80310 = t80309-1.0;
                double t80311 = t80310*t80310;
                double t80312 = t80311*t80311;
                double t80313 = t80312*t80312;
                double t80314 = t80309+1.0;
                double t80315 = gamma_bb[index]*mu_*t80302*t80303*t80305*t80306*(1.0/4.0);
                double t80316 = t80315+1.0;
                double t80317 = 1.0/(t80316*t80316);
                double t80318 = 1.0/t80314;
                double t80319 = a_1*t80310*t80318;
                double t80320 = 1.0/pow(t80314,1.0E1);
                double t80321 = a_10*t80311*t80320*t80313;
                double t80322 = 1.0/pow(t80314,1.1E1);
                double t80323 = a_11*t80310*t80311*t80313*t80322;
                double t80324 = 1.0/(t80314*t80314);
                double t80325 = a_2*t80311*t80324;
                double t80326 = 1.0/(t80314*t80314*t80314);
                double t80327 = a_3*t80310*t80311*t80326;
                double t80328 = 1.0/(t80314*t80314*t80314*t80314);
                double t80329 = a_4*t80312*t80328;
                double t80330 = 1.0/(t80314*t80314*t80314*t80314*t80314);
                double t80331 = a_5*t80310*t80312*t80330;
                double t80332 = 1.0/(t80314*t80314*t80314*t80314*t80314*t80314);
                double t80333 = a_6*t80311*t80312*t80332;
                double t80334 = 1.0/(t80314*t80314*t80314*t80314*t80314*t80314*t80314);
                double t80335 = a_7*t80310*t80311*t80312*t80334;
                double t80336 = 1.0/(t80314*t80314*t80314*t80314*t80314*t80314*t80314*t80314);
                double t80337 = a_8*t80313*t80336;
                double t80338 = 1.0/(t80314*t80314*t80314*t80314*t80314*t80314*t80314*t80314*t80314);
                double t80339 = a_9*t80310*t80313*t80338;
                double t80340 = t80321+t80331+t80323+t80333+t80325+t80335+t80327+t80319+t80337+t80329+t80339+1.0;
                double t80341 = pow(rho_b[index],2.0/3.0);
                double t80342 = 1.0/rho_b[index];
                double t80343 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]);
                double t80344 = 1.0/pow(t80304,5.0/3.0);
                double t80345 = rho_a[index]+rho_b[index];
                double t80346 = 1.0/pow(t80345,1.0/3.0);
                double t80347 = c*t80346;
                double t80348 = sqrt(t80347);
                double t80349 = b1p*t80348;
                double t80350 = pow(t80347,3.0/2.0);
                double t80351 = b3p*t80350;
                double t80352 = c*c;
                double t80353 = 1.0/pow(t80345,2.0/3.0);
                double t80354 = b4p*t80352*t80353;
                double t80355 = b2p*c*t80346;
                double t80356 = t80351+t80354+t80355+t80349;
                double t80357 = 1.0/pow(t80345,4.0/3.0);
                double t80358 = 1.0/c0p;
                double t80359 = 1.0/t80356;
                double t80360 = t80358*t80359*(1.0/2.0);
                double t80361 = t80360+1.0;
                double t80362 = a1p*c*t80346;
                double t80363 = t80362+1.0;
                double t80364 = rho_a[index]-rho_b[index];
                double t80365 = t80364*t80364;
                double t80366 = 1.0/t80345;
                double t80367 = t80364*t80366;
                double t80368 = two_13*2.0;
                double t80369 = t80368-2.0;
                double t80370 = 1.0/t80369;
                double t80371 = 1.0/c0f;
                double t80372 = b1f*t80348;
                double t80373 = b3f*t80350;
                double t80374 = b4f*t80352*t80353;
                double t80375 = b2f*c*t80346;
                double t80376 = t80372+t80373+t80374+t80375;
                double t80377 = 1.0/t80376;
                double t80378 = t80371*t80377*(1.0/2.0);
                double t80379 = t80378+1.0;
                double t80380 = log(t80379);
                double t80381 = a1f*c*t80346;
                double t80382 = t80381+1.0;
                double t80383 = log(t80361);
                double t80394 = c0f*t80380*t80382*2.0;
                double t80395 = c0p*t80363*t80383*2.0;
                double t80384 = t80394-t80395;
                double t80385 = t80367+1.0;
                double t80386 = pow(t80385,4.0/3.0);
                double t80387 = -t80367+1.0;
                double t80388 = pow(t80387,4.0/3.0);
                double t80389 = t80386+t80388-2.0;
                double t80390 = 1.0/(t80345*t80345);
                double t80391 = t80390*t80364;
                double t80392 = t80391+t80366;
                double t80393 = 1.0/(t80345*t80345*t80345*t80345);
                double t80396 = t80365*t80365;
                double t80397 = 1.0/pow(t80345,5.0/3.0);
                double t80398 = 1.0/sqrt(t80347);
                double t80399 = 1.0/t80361;
                double t80400 = 1.0/(t80356*t80356);
                double t80401 = b4p*t80352*t80397*(2.0/3.0);
                double t80402 = b2p*c*t80357*(1.0/3.0);
                double t80403 = b1p*c*t80357*t80398*(1.0/6.0);
                double t80404 = b3p*c*t80348*t80357*(1.0/2.0);
                double t80405 = t80401+t80402+t80403+t80404;
                double t80406 = 1.0/(t80345*t80345*t80345*t80345*t80345);
                double t80407 = 1.0/d2fz0;
                double t80408 = 1.0/Aa;
                double t80409 = b1a*t80348;
                double t80410 = b3a*t80350;
                double t80411 = b4a*t80352*t80353;
                double t80412 = b2a*c*t80346;
                double t80413 = t80410+t80411+t80412+t80409;
                double t80414 = 1.0/t80413;
                double t80415 = t80414*t80408*(1.0/2.0);
                double t80416 = t80415+1.0;
                double t80417 = log(t80416);
                double t80418 = a1a*c*t80346;
                double t80419 = t80418+1.0;
                double t80420 = pow(t80385,1.0/3.0);
                double t80421 = t80420*t80392*(4.0/3.0);
                double t80422 = pow(t80387,1.0/3.0);
                double t80423 = t80421-t80422*t80392*(4.0/3.0);
                double t80424 = t80393*t80396;
                double t80425 = t80424-1.0;
                double t80426 = 1.0/pow(rho_b[index],1.0/3.0);
                double t80427 = c*t80426;
                double t80428 = sqrt(t80427);
                double t80429 = b1f*t80428;
                double t80430 = pow(t80427,3.0/2.0);
                double t80431 = b3f*t80430;
                double t80432 = 1.0/pow(rho_b[index],2.0/3.0);
                double t80433 = b4f*t80432*t80352;
                double t80434 = b2f*c*t80426;
                double t80435 = t80431+t80433+t80434+t80429;
                double t80436 = 1.0/pow(rho_b[index],4.0/3.0);
                double t80437 = b1p*t80428;
                double t80438 = b3p*t80430;
                double t80439 = b4p*t80432*t80352;
                double t80440 = b2p*c*t80426;
                double t80441 = t80440+t80437+t80438+t80439;
                double t80442 = 1.0/pow(rho_b[index],5.0/3.0);
                double t80443 = 1.0/sqrt(t80427);
                double t80444 = 1.0/t80435;
                double t80445 = t80371*t80444*(1.0/2.0);
                double t80446 = t80445+1.0;
                double t80447 = 1.0/t80441;
                double t80448 = t80447*t80358*(1.0/2.0);
                double t80449 = t80448+1.0;
                double t80450 = a1p*c*t80426;
                double t80451 = t80450+1.0;
                double t80452 = 1.0/t80449;
                double t80453 = 1.0/(t80441*t80441);
                double t80454 = b4p*t80352*t80442*(2.0/3.0);
                double t80455 = b2p*c*t80436*(1.0/3.0);
                double t80456 = b1p*c*t80443*t80436*(1.0/6.0);
                double t80457 = b3p*c*t80436*t80428*(1.0/2.0);
                double t80458 = t80454+t80455+t80456+t80457;
                double t80459 = t80451*t80452*t80453*t80458;
                double t80460 = log(t80449);
                double t80461 = pow(2.0,1.0/3.0);
                double t80462 = t80461*2.0;
                double t80463 = t80462-2.0;
                double t80464 = log(t80446);
                double t80465 = a1f*c*t80426;
                double t80466 = t80465+1.0;
                double t80467 = 1.0/pow(rho_b[index],8.0/3.0);
                double t80468 = 1.0/pow(rho_a[index],8.0/3.0);
                double t80469 = gamma_aa[index]*t80468*(1.0/2.0);
                double t80470 = gamma_bb[index]*t80467*(1.0/2.0);
                double t80471 = t80470+t80469;
                double t80472 = gcab*t80471;
                double t80473 = t80472+1.0;
                double t80474 = gcab*gcab;
                double t80475 = t80471*t80471;
                double t80476 = t80474*t80474;
                double t80477 = t80475*t80475;
                double t80478 = t80474*t80475;
                double t80479 = gcab*t80471*2.0;
                double t80480 = t80478+t80479+1.0;
                double t80481 = t80474*t80475*3.0;
                double t80482 = gcab*t80471*t80474*t80475;
                double t80483 = gcab*t80471*3.0;
                double t80484 = t80481+t80482+t80483+1.0;
                double t80485 = t80474*t80475*6.0;
                double t80486 = gcab*t80471*t80474*t80475*4.0;
                double t80487 = t80476*t80477;
                double t80488 = gcab*t80471*4.0;
                double t80489 = t80485+t80486+t80487+t80488+1.0;
                double t80490 = a1p*c*c0p*t80383*t80357*(2.0/3.0);
                double t80491 = 1.0/pow(rho_a[index],1.0/3.0);
                double t80492 = c*t80491;
                double t80493 = sqrt(t80492);
                double t80494 = pow(t80492,3.0/2.0);
                double t80495 = 1.0/pow(rho_a[index],2.0/3.0);
                double t80496 = b1p*t80493;
                double t80497 = b3p*t80494;
                double t80498 = b4p*t80352*t80495;
                double t80499 = b2p*c*t80491;
                double t80500 = t80496+t80497+t80498+t80499;
                double t80501 = 1.0/t80500;
                double t80502 = t80501*t80358*(1.0/2.0);
                double t80503 = t80502+1.0;
                double t80504 = log(t80503);
                double t80505 = a1p*c*t80491;
                double t80506 = t80505+1.0;
                double t80507 = c0p*t80504*t80506*2.0;
                double t80508 = c0f*t80464*t80466*2.0;
                double t80510 = c0p*t80451*t80460*2.0;
                double t80509 = -t80510+t80508;
                double t80511 = t80370*t80384*t80393*t80396*t80389;
                double t80512 = Aa*t80370*t80407*t80425*t80417*t80419*t80389*2.0;
                double t80513 = 1.0/t80473;
                double t80514 = 1.0/pow(rho_b[index],1.1E1/3.0);
                double t80515 = 1.0/(t80473*t80473);
                double t80516 = 1.0/t80480;
                double t80517 = 1.0/(t80484*t80484);
                double t80518 = 1.0/pow(rho_b[index],1.9E1/3.0);
                double t80519 = 1.0/(t80480*t80480);
                double t80520 = 1.0/t80484;
                double t80521 = 1.0/t80489;
                double t80522 = 1.0/(t80489*t80489);
                double t80523 = gcab*t80467*2.0;
                double t80524 = t80471*t80474*t80467*6.0;
                double t80525 = gcab*t80474*t80475*t80467*6.0;
                double t80526 = t80471*t80475*t80467*t80476*2.0;
                double t80527 = t80523+t80524+t80525+t80526;
                double t80528 = gamma_bb[index]*gcab*t80514*(8.0/3.0);
                double t80529 = gamma_bb[index]*t80514*t80471*t80474*(8.0/3.0);
                double t80530 = t80528+t80529;
                double t80531 = gcab*t80467;
                double t80532 = t80471*t80474*t80467;
                double t80533 = t80531+t80532;
                double t80534 = gamma_bb[index]*gcab*t80514*(1.6E1/3.0);
                double t80535 = gamma_bb[index]*gcab*t80514*t80474*t80475*1.6E1;
                double t80536 = gamma_bb[index]*t80514*t80471*t80475*t80476*(1.6E1/3.0);
                double t80537 = gamma_bb[index]*t80514*t80471*t80474*1.6E1;
                double t80538 = t80534+t80535+t80536+t80537;
                double t80539 = gcab*t80467*(3.0/2.0);
                double t80540 = t80471*t80474*t80467*3.0;
                double t80541 = gcab*t80474*t80475*t80467*(3.0/2.0);
                double t80542 = t80540+t80541+t80539;
                double t80543 = gamma_bb[index]*gcab*t80514*4.0;
                double t80544 = gamma_bb[index]*gcab*t80514*t80474*t80475*4.0;
                double t80545 = gamma_bb[index]*t80514*t80471*t80474*8.0;
                double t80546 = t80543+t80544+t80545;
                double t80547 = t80370*t80463*t80509;
                double t80548 = t80510+t80547;
                double t80549 = gamma_bb[index]*gamma_bb[index];
                double t80550 = gcaa*gcaa;
                double t80551 = t80550*t80550;
                double t80552 = 1.0/pow(rho_b[index],3.2E1/3.0);
                double t80553 = 1.0/pow(rho_b[index],1.6E1/3.0);
                double t80554 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]);
                double t80555 = gamma_bb[index]*gcaa*t80467;
                double t80556 = t80555+1.0;
                double t80557 = gamma_bb[index]*gcaa*t80467*3.0;
                double t80558 = gamma_bb[index]*gcaa*t80550*t80554*t80549;
                double t80559 = t80550*t80553*t80549*3.0;
                double t80560 = t80557+t80558+t80559+1.0;
                double t80561 = t80549*t80549;
                double t80562 = gamma_bb[index]*gcaa*t80467*4.0;
                double t80563 = gamma_bb[index]*gcaa*t80550*t80554*t80549*4.0;
                double t80564 = t80550*t80553*t80549*6.0;
                double t80565 = t80551*t80552*t80561;
                double t80566 = t80562+t80563+t80564+t80565+1.0;
                double t80567 = gamma_bb[index]*gcaa*t80467*2.0;
                double t80568 = t80550*t80553*t80549;
                double t80569 = t80567+t80568+1.0;
                double t80570 = tau_b[index]-1.0/1.0E20;
                double t80571 = ( (t80570 > 0.0) ?  1.0 : 0.0 ) ;
                double t80572 = tau_b[index]*2.0;
                double t80612 = gamma_bb[index]*t80342*(1.0/4.0);
                double t80573 = -t80612+t80572;
                double t80574 = t80308*t80573*(1.0/2.0);
                double t80575 = t80574-1.0;
                double t80576 = t80571*t80575;
                double t80577 = t80576+1.0;
                double t80578 = 1.0/t80556;
                double t80579 = 1.0/t80566;
                double t80580 = 1.0/t80569;
                double t80581 = 1.0/t80560;
                double t80582 = 1.0/(t80556*t80556);
                double t80583 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]*rho_b[index]);
                double t80584 = 1.0/(t80560*t80560);
                double t80585 = 1.0/(t80569*t80569);
                double t80586 = gcaa*t80467*3.0;
                double t80587 = gamma_bb[index]*t80550*t80553*6.0;
                double t80588 = gcaa*t80550*t80554*t80549*3.0;
                double t80589 = t80586+t80587+t80588;
                double t80590 = 1.0/pow(rho_b[index],3.5E1/3.0);
                double t80591 = 1.0/(t80566*t80566);
                double t80592 = gcaa*t80467*4.0;
                double t80593 = gamma_bb[index]*t80550*t80553*1.2E1;
                double t80594 = gcaa*t80550*t80554*t80549*1.2E1;
                double t80595 = gamma_bb[index]*t80551*t80552*t80549*4.0;
                double t80596 = t80592+t80593+t80594+t80595;
                double t80597 = gcaa*t80467*2.0;
                double t80598 = gamma_bb[index]*t80550*t80553*2.0;
                double t80599 = t80597+t80598;
                double t80600 = gamma_bb[index]*gcaa*t80514*(1.6E1/3.0);
                double t80601 = t80550*t80518*t80549*(1.6E1/3.0);
                double t80602 = t80600+t80601;
                double t80603 = gamma_bb[index]*gcaa*t80514*8.0;
                double t80604 = gamma_bb[index]*gcaa*t80550*t80583*t80549*8.0;
                double t80605 = t80550*t80518*t80549*1.6E1;
                double t80606 = t80603+t80604+t80605;
                double t80607 = gamma_bb[index]*gcaa*t80514*(3.2E1/3.0);
                double t80608 = gamma_bb[index]*gcaa*t80550*t80583*t80549*3.2E1;
                double t80609 = t80550*t80518*t80549*3.2E1;
                double t80610 = t80551*t80561*t80590*(3.2E1/3.0);
                double t80611 = t80610+t80607+t80608+t80609;
                double t80613 = 1.0/t80446;
                double t80614 = 1.0/(t80435*t80435);
                double t80615 = b4f*t80352*t80442*(2.0/3.0);
                double t80616 = b2f*c*t80436*(1.0/3.0);
                double t80617 = b1f*c*t80443*t80436*(1.0/6.0);
                double t80618 = b3f*c*t80436*t80428*(1.0/2.0);
                double t80619 = t80615+t80616+t80617+t80618;
                double t80620 = a1f*c*c0f*t80436*t80464*(2.0/3.0);
                double t80621 = a1p*c*c0p*t80460*t80436*(2.0/3.0);
                double t80622 = ccaa1*gcaa*t80467*t80578;
                double t80623 = ccaa4*gamma_bb[index]*t80551*t80552*t80549*t80579*4.0;
                double t80624 = ccaa2*gamma_bb[index]*t80550*t80553*t80580*2.0;
                double t80625 = ccaa3*gcaa*t80550*t80554*t80581*t80549*3.0;
                double t80630 = ccaa1*gamma_bb[index]*t80550*t80553*t80582;
                double t80631 = ccaa3*gamma_bb[index]*gcaa*t80550*t80554*t80584*t80549*t80589;
                double t80632 = ccaa4*t80551*t80552*t80561*t80591*t80596;
                double t80633 = ccaa2*t80550*t80553*t80549*t80585*t80599;
                double t80626 = -t80630+t80622-t80631+t80623-t80632+t80624-t80633+t80625;
                double t80627 = t80620-t80621+t80459-t80613*t80614*t80466*t80619;
                double t80628 = t80370*t80463*t80627;
                double t80629 = t80621+t80628-t80459;
                v_rho_b_gamma_bb_[index] = -(rho_b[index]*t80548+rho_a[index]*(t80507-t80370*t80463*(t80507-c0f*log((t80371* \
                   (1.0/2.0))/(b1f*t80493+b3f*t80494+b2f*c*t80491+b4f*t80352*t80495)+1.0)*(a1f*c*t80491+1.0)*2.0))-t80345* \
                   (t80511+t80512+t80395))*(ccab1*gcab*t80513*t80514*(4.0/3.0)-ccab2*t80474*t80519*t80475*(gcab*t80514* \
                   (8.0/3.0)+gamma_bb[index]*t80518*t80474*(4.0/3.0)+t80514*t80471*t80474*(8.0/3.0))-ccab4*t80522*t80476* \
                   t80477*(gcab*t80514*(1.6E1/3.0)+gamma_bb[index]*t80518*t80474*8.0+t80514*t80471*t80474*1.6E1+gamma_bb[index]* \
                   t80518*t80475*t80476*8.0+gcab*t80514*t80474*t80475*1.6E1+t80514*t80471*t80475*t80476*(1.6E1/3.0)+gamma_bb[index]* \
                   gcab*t80471*t80518*t80474*1.6E1)-ccab1*gamma_bb[index]*t80515*t80518*t80474*(4.0/3.0)+ccab2*gamma_bb[index]* \
                   t80516*t80518*t80474*(4.0/3.0)-ccab1*t80514*t80515*t80471*t80474*(4.0/3.0)+ccab2*t80514*t80471*t80516* \
                   t80474*(8.0/3.0)+ccab4*t80521*t80514*t80471*t80475*t80476*(1.6E1/3.0)-ccab2*t80530*t80471*t80474*t80519* \
                   t80467+ccab2*t80530*t80533*1.0/(t80480*t80480*t80480)*t80474*t80475*2.0+ccab4*t80527*t80538*t80476* \
                   t80477*1.0/(t80489*t80489*t80489)*2.0+ccab4*gamma_bb[index]*t80521*t80518*t80475*t80476*8.0+ccab3* \
                   gcab*t80520*t80514*t80474*t80475*4.0+ccab3*gamma_bb[index]*gcab*t80520*t80471*t80518*t80474*4.0-ccab2* \
                   gamma_bb[index]*t80514*t80533*t80471*t80474*t80519*(8.0/3.0)-ccab3*gcab*t80517*t80474*t80546*t80475* \
                   t80467*(3.0/2.0)-ccab4*t80522*t80471*t80475*t80538*t80467*t80476*2.0-ccab3*gcab*t80471*t80517*t80474* \
                   t80475*(gcab*t80514*4.0+gamma_bb[index]*t80518*t80474*4.0+t80514*t80471*t80474*8.0+gcab*t80514*t80474* \
                   t80475*4.0+gamma_bb[index]*gcab*t80471*t80518*t80474*4.0)+ccab1*gamma_bb[index]*gcab*t80471*1.0/(t80473* \
                   t80473*t80473)*t80518*t80474*(4.0/3.0)+ccab3*gcab*t80542*t80471*t80474*t80546*t80475*1.0/(t80484*t80484* \
                   t80484)*2.0-ccab3*gamma_bb[index]*gcab*t80514*t80542*t80517*t80474*t80475*4.0-ccab4*gamma_bb[index]* \
                   t80522*t80514*t80471*t80527*t80475*t80476*(1.6E1/3.0))-(t80511+t80512+t80395+rho_b[index]*(t80621- \
                   t80459+t80370*t80463*(t80620+t80459-t80613*t80614*t80466*t80619-a1p*c*c0p*t80460*t80436*(2.0/3.0)) \
                   )-t80345*(t80490-t80400*t80405*t80363*t80399+t80423*t80370*t80384*t80393*t80396+t80370*t80406*t80384* \
                   t80396*t80389*4.0-t80370*t80393*t80396*t80389*(t80490-t80400*t80405*t80363*t80399+(t80382*1.0/(t80376* \
                   t80376)*(b2f*c*t80357*(1.0/3.0)+b4f*t80352*t80397*(2.0/3.0)+b1f*c*t80357*t80398*(1.0/6.0)+b3f*c*t80348* \
                   t80357*(1.0/2.0)))/t80379-a1f*c*c0f*t80380*t80357*(2.0/3.0))+t80370*t80364*t80365*t80384*t80393*t80389* \
                   4.0+Aa*t80370*t80407*t80417*t80419*t80389*(t80406*t80396*4.0+t80364*t80365*t80393*4.0)*2.0+Aa*t80423* \
                   t80370*t80407*t80425*t80417*t80419*2.0-(1.0/(t80413*t80413)*t80370*t80407*t80425*t80419*t80389*(b2a* \
                   c*t80357*(1.0/3.0)+b4a*t80352*t80397*(2.0/3.0)+b1a*c*t80357*t80398*(1.0/6.0)+b3a*c*t80348*t80357*(1.0/ \
                   2.0)))/t80416+Aa*a1a*c*t80370*t80407*t80425*t80417*t80357*t80389*(2.0/3.0))-c0p*t80451*t80460*2.0- \
                   t80370*t80463*t80509)*(ccab1*gcab*t80513*t80467*(1.0/2.0)-ccab1*t80515*t80471*t80474*t80467*(1.0/2.0) \
                   +ccab2*t80471*t80516*t80474*t80467-ccab2*t80533*t80474*t80519*t80475-ccab4*t80522*t80527*t80476*t80477+ \
                   ccab4*t80521*t80471*t80475*t80467*t80476*2.0+ccab3*gcab*t80520*t80474*t80475*t80467*(3.0/2.0)-ccab3* \
                   gcab*t80542*t80471*t80517*t80474*t80475)-(X-1.0)*(-kp*rho_b[index]*t80340*t80317*(mu_*t80302*t80303* \
                   t80305*t80344*(1.0/3.0)+mu_*t80302*t80303*t80306*t80343*(1.0/2.0))+mu_*t80302*t80340*t80305*t80306* \
                   t80317*(1.0/4.0)+mu_*t80302*t80306*t80342*t80317*(C_k*a_1*t80341*t80308*t80318*(5.0/3.0)-C_k*a_1*t80310* \
                   t80341*t80324*t80308*(5.0/3.0)+C_k*a_2*t80310*t80341*t80324*t80308*(1.0E1/3.0)-C_k*a_2*t80311*t80341* \
                   t80308*t80326*(1.0E1/3.0)+C_k*a_3*t80311*t80341*t80308*t80326*5.0-C_k*a_4*t80312*t80330*t80341*t80308* \
                   (2.0E1/3.0)+C_k*a_5*t80312*t80330*t80341*t80308*(2.5E1/3.0)-C_k*a_8*t80313*t80341*t80308*t80338*(4.0E1/ \
                   3.0)+C_k*a_9*t80313*t80341*t80308*t80338*1.5E1+C_k*a_10*t80310*t80320*t80313*t80341*t80308*(5.0E1/ \
                   3.0)-C_k*a_10*t80311*t80313*t80322*t80341*t80308*(5.0E1/3.0)+C_k*a_11*t80311*t80313*t80322*t80341* \
                   t80308*(5.5E1/3.0)-C_k*a_3*t80310*t80311*t80341*t80308*t80328*5.0+C_k*a_4*t80310*t80311*t80341*t80308* \
                   t80328*(2.0E1/3.0)-C_k*a_5*t80310*t80312*t80332*t80341*t80308*(2.5E1/3.0)+C_k*a_6*t80310*t80312*t80332* \
                   t80341*t80308*1.0E1-C_k*a_6*t80311*t80312*t80341*t80334*t80308*1.0E1+C_k*a_7*t80311*t80312*t80341* \
                   t80334*t80308*(3.5E1/3.0)-C_k*a_9*t80310*t80320*t80313*t80341*t80308*1.5E1-C_k*a_11*t80310*t80311* \
                   t80313*1.0/pow(t80314,1.2E1)*t80341*t80308*(5.5E1/3.0)-C_k*a_7*t80310*t80311*t80312*t80341*t80308* \
                   t80336*(3.5E1/3.0)+C_k*a_8*t80310*t80311*t80312*t80341*t80308*t80336*(4.0E1/3.0))*(1.0/4.0)+mu_*t80302* \
                   t80340*t80306*t80342*1.0/(t80316*t80316*t80316)*(gamma_bb[index]*mu_*t80302*t80303*t80305*t80344*(1.0/ \
                   3.0)+gamma_bb[index]*mu_*t80302*t80303*t80306*t80343*(1.0/2.0))*(1.0/2.0))-t80626*t80548*t80577+rho_b[index]* \
                   t80626*t80629*t80577-rho_b[index]*t80548*t80577*(ccaa1*gcaa*t80514*t80578*(-8.0/3.0)-ccaa2*gamma_bb[index]* \
                   t80550*t80580*t80518*(3.2E1/3.0)+ccaa1*gamma_bb[index]*t80550*t80518*t80582*8.0+ccaa4*t80551*t80561* \
                   t80590*t80591*t80596*(3.2E1/3.0)+ccaa2*t80550*t80518*t80549*t80585*t80599*(1.6E1/3.0)+ccaa4*t80551* \
                   t80552*t80561*t80591*(gcaa*t80514*(3.2E1/3.0)+gamma_bb[index]*t80550*t80518*6.4E1+gamma_bb[index]* \
                   t80551*t80590*t80549*(1.28E2/3.0)+gcaa*t80550*t80583*t80549*9.6E1)-ccaa1*gcaa*t80550*1.0/(t80556*t80556* \
                   t80556)*t80583*t80549*(1.6E1/3.0)+ccaa2*t80550*t80553*t80549*t80585*(gcaa*t80514*(1.6E1/3.0)+gamma_bb[index]* \
                   t80550*t80518*(3.2E1/3.0))+ccaa2*gamma_bb[index]*t80602*t80550*t80553*t80585*2.0-ccaa4*gamma_bb[index]* \
                   t80551*t80590*t80549*t80579*(1.28E2/3.0)-ccaa3*gcaa*t80550*t80581*t80583*t80549*2.4E1+ccaa4*gamma_bb[index]* \
                   t80611*t80551*t80552*t80591*t80549*4.0+ccaa3*gcaa*t80550*t80606*t80554*t80584*t80549*3.0-ccaa4*t80611* \
                   t80551*t80552*t80561*1.0/(t80566*t80566*t80566)*t80596*2.0-ccaa2*t80602*t80550*t80553*t80549*1.0/(t80569* \
                   t80569*t80569)*t80599*2.0+ccaa3*gamma_bb[index]*gcaa*t80550*t80554*t80584*t80549*(gcaa*t80514*8.0+ \
                   gamma_bb[index]*t80550*t80518*3.2E1+gcaa*t80550*t80583*t80549*2.4E1)+ccaa3*gamma_bb[index]*gcaa*t80550* \
                   t80583*t80584*t80549*t80589*8.0-ccaa3*gamma_bb[index]*gcaa*t80550*1.0/(t80560*t80560*t80560)*t80606* \
                   t80554*t80549*t80589*2.0)-t80308*t80571*t80629*(ccaa0+ccaa1*gamma_bb[index]*gcaa*t80467*t80578+ccaa2* \
                   t80550*t80553*t80580*t80549+ccaa4*t80551*t80552*t80561*t80579+ccaa3*gamma_bb[index]*gcaa*t80550*t80554* \
                   t80581*t80549)*(1.0/8.0)-t80308*t80571*t80548*(ccaa1*gamma_bb[index]*gcaa*t80514*t80578*(8.0/3.0)+ \
                   ccaa2*t80550*t80580*t80518*t80549*(1.6E1/3.0)-ccaa1*t80550*t80518*t80582*t80549*(8.0/3.0)+ccaa4*t80551* \
                   t80561*t80590*t80579*(3.2E1/3.0)-ccaa4*t80611*t80551*t80552*t80561*t80591-ccaa2*t80602*t80550*t80553* \
                   t80549*t80585+ccaa3*gamma_bb[index]*gcaa*t80550*t80581*t80583*t80549*8.0-ccaa3*gamma_bb[index]*gcaa* \
                   t80550*t80606*t80554*t80584*t80549)*(1.0/8.0)-gamma_bb[index]*t80342*t80308*t80571*t80626*t80548*(1.0/ \
                   8.0);
            } else if (rho_a[index] > cutoff_) {
                v_rho_b_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                double t82265 = 1.0/pow(rho_b[index],1.0/3.0);
                double t82266 = c*t82265;
                double t82267 = sqrt(t82266);
                double t82268 = pow(t82266,3.0/2.0);
                double t82269 = c*c;
                double t82270 = 1.0/pow(rho_b[index],2.0/3.0);
                double t82271 = 1.0/c0p;
                double t82272 = b1p*t82267;
                double t82273 = b3p*t82268;
                double t82274 = b4p*t82270*t82269;
                double t82275 = b2p*c*t82265;
                double t82276 = t82272+t82273+t82274+t82275;
                double t82277 = 1.0/t82276;
                double t82278 = t82271*t82277*(1.0/2.0);
                double t82279 = t82278+1.0;
                double t82280 = log(t82279);
                double t82281 = a1p*c*t82265;
                double t82282 = t82281+1.0;
                double t82283 = 1.0/pow(rho_b[index],8.0/3.0);
                double t82284 = gamma_bb[index]*gamma_bb[index];
                double t82285 = gcaa*gcaa;
                double t82286 = t82285*t82285;
                double t82287 = 1.0/pow(rho_b[index],3.2E1/3.0);
                double t82288 = 1.0/pow(rho_b[index],1.6E1/3.0);
                double t82289 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]);
                double t82290 = gamma_bb[index]*gcaa*t82283;
                double t82291 = t82290+1.0;
                double t82292 = gamma_bb[index]*gcaa*t82283*3.0;
                double t82293 = gamma_bb[index]*gcaa*t82284*t82285*t82289;
                double t82294 = t82284*t82285*t82288*3.0;
                double t82295 = t82292+t82293+t82294+1.0;
                double t82296 = t82284*t82284;
                double t82297 = gamma_bb[index]*gcaa*t82283*4.0;
                double t82298 = gamma_bb[index]*gcaa*t82284*t82285*t82289*4.0;
                double t82299 = t82284*t82285*t82288*6.0;
                double t82300 = t82286*t82287*t82296;
                double t82301 = t82300+t82297+t82298+t82299+1.0;
                double t82302 = gamma_bb[index]*gcaa*t82283*2.0;
                double t82303 = t82284*t82285*t82288;
                double t82304 = t82302+t82303+1.0;
                double t82305 = pow(2.0,1.0/3.0);
                double t82306 = t82305*2.0;
                double t82307 = t82306-2.0;
                double t82308 = two_13*2.0;
                double t82309 = t82308-2.0;
                double t82310 = 1.0/t82309;
                double t82311 = 1.0/c0f;
                double t82312 = b1f*t82267;
                double t82313 = b3f*t82268;
                double t82314 = b4f*t82270*t82269;
                double t82315 = b2f*c*t82265;
                double t82316 = t82312+t82313+t82314+t82315;
                double t82317 = 1.0/t82316;
                double t82318 = t82311*t82317*(1.0/2.0);
                double t82319 = t82318+1.0;
                double t82320 = log(t82319);
                double t82321 = a1f*c*t82265;
                double t82322 = t82321+1.0;
                double t82323 = c0f*t82320*t82322*2.0;
                double t82324 = c0p*t82280*t82282*2.0;
                double t82325 = tau_b[index]-1.0/1.0E20;
                double t82326 = ( (t82325 > 0.0) ?  1.0 : 0.0 ) ;
                double t82327 = 1.0/tau_b[index];
                double t82328 = tau_b[index]*2.0;
                double t82329 = 1.0/rho_b[index];
                double t82374 = gamma_bb[index]*t82329*(1.0/4.0);
                double t82330 = t82328-t82374;
                double t82331 = t82330*t82327*(1.0/2.0);
                double t82332 = t82331-1.0;
                double t82333 = t82332*t82326;
                double t82334 = t82333+1.0;
                double t82335 = 1.0/t82291;
                double t82336 = 1.0/t82301;
                double t82337 = 1.0/t82304;
                double t82338 = 1.0/t82295;
                double t82339 = 1.0/pow(rho_b[index],1.9E1/3.0);
                double t82340 = 1.0/(t82291*t82291);
                double t82341 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]*rho_b[index]);
                double t82342 = 1.0/pow(rho_b[index],1.1E1/3.0);
                double t82343 = 1.0/(t82295*t82295);
                double t82344 = 1.0/(t82304*t82304);
                double t82345 = gcaa*t82283*3.0;
                double t82346 = gamma_bb[index]*t82285*t82288*6.0;
                double t82347 = gcaa*t82284*t82285*t82289*3.0;
                double t82348 = t82345+t82346+t82347;
                double t82349 = 1.0/pow(rho_b[index],3.5E1/3.0);
                double t82350 = 1.0/(t82301*t82301);
                double t82351 = gcaa*t82283*4.0;
                double t82352 = gamma_bb[index]*t82285*t82288*1.2E1;
                double t82353 = gcaa*t82284*t82285*t82289*1.2E1;
                double t82354 = gamma_bb[index]*t82284*t82286*t82287*4.0;
                double t82355 = t82351+t82352+t82353+t82354;
                double t82356 = gcaa*t82283*2.0;
                double t82357 = gamma_bb[index]*t82285*t82288*2.0;
                double t82358 = t82356+t82357;
                double t82359 = gamma_bb[index]*gcaa*t82342*(1.6E1/3.0);
                double t82360 = t82284*t82285*t82339*(1.6E1/3.0);
                double t82361 = t82360+t82359;
                double t82362 = gamma_bb[index]*gcaa*t82342*8.0;
                double t82363 = gamma_bb[index]*gcaa*t82341*t82284*t82285*8.0;
                double t82364 = t82284*t82285*t82339*1.6E1;
                double t82365 = t82362+t82363+t82364;
                double t82366 = gamma_bb[index]*gcaa*t82342*(3.2E1/3.0);
                double t82367 = gamma_bb[index]*gcaa*t82341*t82284*t82285*3.2E1;
                double t82368 = t82284*t82285*t82339*3.2E1;
                double t82369 = t82286*t82349*t82296*(3.2E1/3.0);
                double t82370 = t82366+t82367+t82368+t82369;
                double t82371 = t82323-t82324;
                double t82372 = t82310*t82307*t82371;
                double t82373 = t82324+t82372;
                double t82375 = 1.0/pow(rho_b[index],4.0/3.0);
                double t82376 = 1.0/pow(rho_b[index],5.0/3.0);
                double t82377 = 1.0/sqrt(t82266);
                double t82378 = 1.0/t82279;
                double t82379 = 1.0/(t82276*t82276);
                double t82380 = b4p*t82376*t82269*(2.0/3.0);
                double t82381 = b2p*c*t82375*(1.0/3.0);
                double t82382 = b1p*c*t82375*t82377*(1.0/6.0);
                double t82383 = b3p*c*t82267*t82375*(1.0/2.0);
                double t82384 = t82380+t82381+t82382+t82383;
                double t82385 = t82282*t82384*t82378*t82379;
                double t82386 = ccaa1*gcaa*t82335*t82283;
                double t82387 = ccaa4*gamma_bb[index]*t82336*t82284*t82286*t82287*4.0;
                double t82388 = ccaa2*gamma_bb[index]*t82337*t82285*t82288*2.0;
                double t82389 = ccaa3*gcaa*t82284*t82338*t82285*t82289*3.0;
                double t82400 = ccaa1*gamma_bb[index]*t82340*t82285*t82288;
                double t82401 = ccaa3*gamma_bb[index]*gcaa*t82343*t82284*t82285*t82348*t82289;
                double t82402 = ccaa4*t82350*t82355*t82286*t82287*t82296;
                double t82403 = ccaa2*t82344*t82284*t82285*t82358*t82288;
                double t82390 = -t82400-t82401-t82402-t82403+t82386+t82387+t82388+t82389;
                double t82391 = 1.0/t82319;
                double t82392 = 1.0/(t82316*t82316);
                double t82393 = b4f*t82376*t82269*(2.0/3.0);
                double t82394 = b2f*c*t82375*(1.0/3.0);
                double t82395 = b1f*c*t82375*t82377*(1.0/6.0);
                double t82396 = b3f*c*t82267*t82375*(1.0/2.0);
                double t82397 = t82393+t82394+t82395+t82396;
                double t82398 = a1f*c*c0f*t82320*t82375*(2.0/3.0);
                double t82399 = a1p*c*c0p*t82280*t82375*(2.0/3.0);
                double t82404 = 1.0/(k*k);
                double t82405 = 1.0/kp;
                double t82406 = rho_b[index]*2.0;
                double t82407 = 1.0/(rho_b[index]*rho_b[index]);
                double t82408 = 1.0/pow(t82406,2.0/3.0);
                double t82409 = pow(rho_b[index],5.0/3.0);
                double t82410 = C_k*t82327*t82409;
                double t82411 = t82410-1.0;
                double t82412 = t82411*t82411;
                double t82413 = t82412*t82412;
                double t82414 = t82413*t82413;
                double t82415 = t82410+1.0;
                double t82416 = gamma_bb[index]*mu_*t82404*t82405*t82407*t82408*(1.0/4.0);
                double t82417 = t82416+1.0;
                double t82418 = 1.0/(t82417*t82417);
                double t82419 = X-1.0;
                double t82420 = 1.0/t82415;
                double t82421 = pow(rho_b[index],2.0/3.0);
                double t82422 = 1.0/(t82415*t82415);
                double t82423 = 1.0/pow(t82415,1.0E1);
                double t82424 = 1.0/pow(t82415,1.1E1);
                double t82425 = 1.0/(t82415*t82415*t82415);
                double t82426 = 1.0/(t82415*t82415*t82415*t82415);
                double t82427 = 1.0/(t82415*t82415*t82415*t82415*t82415);
                double t82428 = 1.0/(t82415*t82415*t82415*t82415*t82415*t82415);
                double t82429 = 1.0/(t82415*t82415*t82415*t82415*t82415*t82415*t82415);
                double t82430 = 1.0/(t82415*t82415*t82415*t82415*t82415*t82415*t82415*t82415);
                double t82431 = 1.0/(t82415*t82415*t82415*t82415*t82415*t82415*t82415*t82415*t82415);
                double t82432 = a_1*t82411*t82420;
                double t82433 = a_10*t82412*t82414*t82423;
                double t82434 = a_11*t82411*t82412*t82414*t82424;
                double t82435 = a_2*t82412*t82422;
                double t82436 = a_3*t82411*t82412*t82425;
                double t82437 = a_4*t82413*t82426;
                double t82438 = a_5*t82411*t82413*t82427;
                double t82439 = a_6*t82412*t82413*t82428;
                double t82440 = a_7*t82411*t82412*t82413*t82429;
                double t82441 = a_8*t82430*t82414;
                double t82442 = a_9*t82411*t82431*t82414;
                double t82443 = t82440+t82432+t82441+t82433+t82442+t82434+t82435+t82436+t82437+t82438+t82439+1.0;
                double t82444 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]);
                double t82445 = 1.0/pow(t82406,5.0/3.0);
                v_rho_b_gamma_bb_[index] = -t82334*t82390*(t82324+t82310*t82307*(t82323-c0p*t82280*t82282*2.0))-t82326* \
                   t82327*(-t82385+t82399+t82310*t82307*(t82385+t82398-t82399-t82322*t82391*t82392*t82397))*(ccaa0+ccaa1* \
                   gamma_bb[index]*gcaa*t82335*t82283+ccaa2*t82337*t82284*t82285*t82288+ccaa4*t82336*t82286*t82287*t82296+ \
                   ccaa3*gamma_bb[index]*gcaa*t82284*t82338*t82285*t82289)*(1.0/8.0)-rho_b[index]*t82334*t82373*(ccaa1* \
                   gcaa*t82342*t82335*(-8.0/3.0)+ccaa1*gamma_bb[index]*t82340*t82285*t82339*8.0-ccaa2*gamma_bb[index]* \
                   t82337*t82285*t82339*(3.2E1/3.0)+ccaa2*t82344*t82284*t82285*t82339*t82358*(1.6E1/3.0)+ccaa4*t82350* \
                   t82355*t82286*t82349*t82296*(3.2E1/3.0)+ccaa4*t82350*t82286*t82287*t82296*(gcaa*t82342*(3.2E1/3.0) \
                   +gamma_bb[index]*t82285*t82339*6.4E1+gamma_bb[index]*t82284*t82286*t82349*(1.28E2/3.0)+gcaa*t82341* \
                   t82284*t82285*9.6E1)-ccaa1*gcaa*t82341*1.0/(t82291*t82291*t82291)*t82284*t82285*(1.6E1/3.0)+ccaa2* \
                   t82344*t82284*t82285*t82288*(gcaa*t82342*(1.6E1/3.0)+gamma_bb[index]*t82285*t82339*(3.2E1/3.0))+ccaa2* \
                   gamma_bb[index]*t82361*t82344*t82285*t82288*2.0-ccaa4*gamma_bb[index]*t82336*t82284*t82286*t82349* \
                   (1.28E2/3.0)-ccaa3*gcaa*t82341*t82284*t82338*t82285*2.4E1+ccaa4*gamma_bb[index]*t82350*t82370*t82284* \
                   t82286*t82287*4.0+ccaa3*gcaa*t82343*t82284*t82365*t82285*t82289*3.0-ccaa4*1.0/(t82301*t82301*t82301) \
                   *t82370*t82355*t82286*t82287*t82296*2.0-ccaa2*1.0/(t82304*t82304*t82304)*t82361*t82284*t82285*t82358* \
                   t82288*2.0+ccaa3*gamma_bb[index]*gcaa*t82343*t82284*t82285*t82289*(gcaa*t82342*8.0+gamma_bb[index]* \
                   t82285*t82339*3.2E1+gcaa*t82341*t82284*t82285*2.4E1)+ccaa3*gamma_bb[index]*gcaa*t82341*t82343*t82284* \
                   t82285*t82348*8.0-ccaa3*gamma_bb[index]*gcaa*t82284*t82365*t82285*t82348*1.0/(t82295*t82295*t82295) \
                   *t82289*2.0)+rho_b[index]*t82334*t82390*(-t82385+t82399+t82310*t82307*(t82385+t82398-t82322*t82391* \
                   t82392*t82397-a1p*c*c0p*t82280*t82375*(2.0/3.0)))-t82326*t82327*t82373*(ccaa1*gamma_bb[index]*gcaa* \
                   t82342*t82335*(8.0/3.0)-ccaa1*t82340*t82284*t82285*t82339*(8.0/3.0)+ccaa2*t82337*t82284*t82285*t82339* \
                   (1.6E1/3.0)+ccaa4*t82336*t82286*t82349*t82296*(3.2E1/3.0)-ccaa2*t82361*t82344*t82284*t82285*t82288- \
                   ccaa4*t82350*t82370*t82286*t82287*t82296+ccaa3*gamma_bb[index]*gcaa*t82341*t82284*t82338*t82285*8.0- \
                   ccaa3*gamma_bb[index]*gcaa*t82343*t82284*t82365*t82285*t82289)*(1.0/8.0)-gamma_bb[index]*t82326*t82327* \
                   t82390*t82373*t82329*(1.0/8.0)+kp*rho_b[index]*t82443*t82418*t82419*(mu_*t82404*t82405*t82407*t82445* \
                   (1.0/3.0)+mu_*t82404*t82405*t82408*t82444*(1.0/2.0))-mu_*t82404*t82407*t82443*t82408*t82418*t82419* \
                   (1.0/4.0)-mu_*t82404*t82408*t82418*t82329*t82419*(C_k*a_1*t82420*t82421*t82327*(5.0/3.0)-C_k*a_1*t82411* \
                   t82421*t82422*t82327*(5.0/3.0)+C_k*a_2*t82411*t82421*t82422*t82327*(1.0E1/3.0)-C_k*a_2*t82412*t82421* \
                   t82425*t82327*(1.0E1/3.0)+C_k*a_3*t82412*t82421*t82425*t82327*5.0-C_k*a_4*t82421*t82413*t82327*t82427* \
                   (2.0E1/3.0)+C_k*a_5*t82421*t82413*t82327*t82427*(2.5E1/3.0)-C_k*a_8*t82421*t82431*t82414*t82327*(4.0E1/ \
                   3.0)+C_k*a_9*t82421*t82431*t82414*t82327*1.5E1+C_k*a_10*t82411*t82421*t82414*t82423*t82327*(5.0E1/ \
                   3.0)-C_k*a_10*t82412*t82421*t82414*t82424*t82327*(5.0E1/3.0)+C_k*a_11*t82412*t82421*t82414*t82424* \
                   t82327*(5.5E1/3.0)-C_k*a_3*t82411*t82412*t82421*t82327*t82426*5.0+C_k*a_4*t82411*t82412*t82421*t82327* \
                   t82426*(2.0E1/3.0)-C_k*a_5*t82411*t82421*t82413*t82327*t82428*(2.5E1/3.0)+C_k*a_6*t82411*t82421*t82413* \
                   t82327*t82428*1.0E1-C_k*a_6*t82412*t82421*t82413*t82327*t82429*1.0E1+C_k*a_7*t82412*t82421*t82413* \
                   t82327*t82429*(3.5E1/3.0)-C_k*a_9*t82411*t82421*t82414*t82423*t82327*1.5E1-C_k*a_11*t82411*t82412* \
                   t82421*t82414*1.0/pow(t82415,1.2E1)*t82327*(5.5E1/3.0)-C_k*a_7*t82411*t82412*t82421*t82430*t82413* \
                   t82327*(3.5E1/3.0)+C_k*a_8*t82411*t82412*t82421*t82430*t82413*t82327*(4.0E1/3.0))*(1.0/4.0)-mu_*t82404* \
                   t82443*t82408*1.0/(t82417*t82417*t82417)*t82329*t82419*(gamma_bb[index]*mu_*t82404*t82405*t82407*t82445* \
                   (1.0/3.0)+gamma_bb[index]*mu_*t82404*t82405*t82408*t82444*(1.0/2.0))*(1.0/2.0);
            } else {
                v_rho_b_gamma_bb_[index] = 0.0;
            } 

            //V_gamma_aa_gamma_aa
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t80635 = 1.0/pow(rho_a[index],1.0/3.0);
                double t80636 = c*t80635;
                double t80637 = sqrt(t80636);
                double t80638 = pow(t80636,3.0/2.0);
                double t80639 = c*c;
                double t80640 = 1.0/pow(rho_a[index],2.0/3.0);
                double t80641 = 1.0/c0p;
                double t80642 = b1p*t80637;
                double t80643 = b3p*t80638;
                double t80644 = b4p*t80640*t80639;
                double t80645 = b2p*c*t80635;
                double t80646 = t80642+t80643+t80644+t80645;
                double t80647 = 1.0/t80646;
                double t80648 = t80641*t80647*(1.0/2.0);
                double t80649 = t80648+1.0;
                double t80650 = log(t80649);
                double t80651 = a1p*c*t80635;
                double t80652 = t80651+1.0;
                double t80653 = pow(2.0,1.0/3.0);
                double t80654 = t80653*2.0;
                double t80655 = t80654-2.0;
                double t80656 = two_13*2.0;
                double t80657 = t80656-2.0;
                double t80658 = 1.0/t80657;
                double t80659 = 1.0/c0f;
                double t80660 = 1.0/pow(rho_b[index],1.0/3.0);
                double t80661 = c*t80660;
                double t80662 = sqrt(t80661);
                double t80663 = pow(t80661,3.0/2.0);
                double t80664 = 1.0/pow(rho_b[index],2.0/3.0);
                double t80665 = b1p*t80662;
                double t80666 = b3p*t80663;
                double t80667 = b4p*t80664*t80639;
                double t80668 = b2p*c*t80660;
                double t80669 = t80665+t80666+t80667+t80668;
                double t80670 = 1.0/t80669;
                double t80671 = t80641*t80670*(1.0/2.0);
                double t80672 = t80671+1.0;
                double t80673 = log(t80672);
                double t80674 = a1p*c*t80660;
                double t80675 = t80674+1.0;
                double t80676 = c0p*t80673*t80675*2.0;
                double t80677 = rho_a[index]+rho_b[index];
                double t80678 = 1.0/pow(t80677,1.0/3.0);
                double t80679 = c*t80678;
                double t80680 = sqrt(t80679);
                double t80681 = pow(t80679,3.0/2.0);
                double t80682 = 1.0/pow(t80677,2.0/3.0);
                double t80683 = b1p*t80680;
                double t80684 = b3p*t80681;
                double t80685 = b4p*t80682*t80639;
                double t80686 = b2p*c*t80678;
                double t80687 = t80683+t80684+t80685+t80686;
                double t80688 = 1.0/t80687;
                double t80689 = t80641*t80688*(1.0/2.0);
                double t80690 = t80689+1.0;
                double t80691 = log(t80690);
                double t80692 = a1p*c*t80678;
                double t80693 = t80692+1.0;
                double t80694 = c0p*t80691*t80693*2.0;
                double t80695 = rho_a[index]-rho_b[index];
                double t80696 = t80695*t80695;
                double t80697 = 1.0/t80677;
                double t80698 = t80695*t80697;
                double t80699 = 1.0/(t80677*t80677*t80677*t80677);
                double t80700 = t80696*t80696;
                double t80701 = t80698+1.0;
                double t80702 = pow(t80701,4.0/3.0);
                double t80703 = -t80698+1.0;
                double t80704 = pow(t80703,4.0/3.0);
                double t80705 = t80702+t80704-2.0;
                double t80706 = gcab*gcab;
                double t80707 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t80708 = 1.0/pow(rho_a[index],8.0/3.0);
                double t80709 = gamma_aa[index]*t80708*(1.0/2.0);
                double t80710 = 1.0/pow(rho_b[index],8.0/3.0);
                double t80711 = gamma_bb[index]*t80710*(1.0/2.0);
                double t80712 = t80711+t80709;
                double t80713 = gcab*t80712;
                double t80714 = t80713+1.0;
                double t80715 = t80712*t80712;
                double t80716 = t80706*t80715;
                double t80717 = gcab*t80712*2.0;
                double t80718 = t80716+t80717+1.0;
                double t80719 = t80706*t80706;
                double t80736 = gcab*t80708*2.0;
                double t80737 = t80712*t80706*t80708*6.0;
                double t80738 = gcab*t80706*t80715*t80708*6.0;
                double t80739 = t80712*t80715*t80708*t80719*2.0;
                double t80720 = t80736+t80737+t80738+t80739;
                double t80721 = t80715*t80715;
                double t80741 = gcab*t80708*(3.0/2.0);
                double t80742 = t80712*t80706*t80708*3.0;
                double t80743 = gcab*t80706*t80715*t80708*(3.0/2.0);
                double t80722 = t80741+t80742+t80743;
                double t80723 = t80706*t80715*3.0;
                double t80724 = gcab*t80712*t80706*t80715;
                double t80725 = gcab*t80712*3.0;
                double t80726 = t80723+t80724+t80725+1.0;
                double t80733 = gcab*t80708;
                double t80734 = t80712*t80706*t80708;
                double t80727 = t80733+t80734;
                double t80728 = t80706*t80715*6.0;
                double t80729 = gcab*t80712*t80706*t80715*4.0;
                double t80730 = t80721*t80719;
                double t80731 = gcab*t80712*4.0;
                double t80732 = t80730+t80731+t80728+t80729+1.0;
                double t80735 = 1.0/(t80718*t80718);
                double t80740 = 1.0/(t80732*t80732);
                double t80744 = 1.0/(t80726*t80726);
                double t80745 = b1f*t80637;
                double t80746 = b3f*t80638;
                double t80747 = b4f*t80640*t80639;
                double t80748 = b2f*c*t80635;
                double t80749 = t80745+t80746+t80747+t80748;
                double t80750 = 1.0/t80749;
                double t80751 = t80750*t80659*(1.0/2.0);
                double t80752 = t80751+1.0;
                double t80753 = log(t80752);
                double t80754 = a1f*c*t80635;
                double t80755 = t80754+1.0;
                double t80756 = c0f*t80753*t80755*2.0;
                double t80757 = c0p*t80650*t80652*2.0;
                double t80758 = gcaa*gcaa;
                double t80759 = gamma_aa[index]*gamma_aa[index];
                double t80760 = t80758*t80758;
                double t80761 = 1.0/pow(rho_a[index],3.2E1/3.0);
                double t80762 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t80763 = gamma_aa[index]*gcaa*t80708;
                double t80764 = t80763+1.0;
                double t80765 = gamma_aa[index]*gcaa*t80708*2.0;
                double t80766 = t80707*t80758*t80759;
                double t80767 = t80765+t80766+1.0;
                double t80768 = gamma_aa[index]*gcaa*t80708*3.0;
                double t80769 = gamma_aa[index]*gcaa*t80762*t80758*t80759;
                double t80770 = t80707*t80758*t80759*3.0;
                double t80771 = t80770+t80768+t80769+1.0;
                double t80772 = t80759*t80759;
                double t80788 = gcaa*t80708*4.0;
                double t80789 = gamma_aa[index]*t80707*t80758*1.2E1;
                double t80790 = gcaa*t80762*t80758*t80759*1.2E1;
                double t80791 = gamma_aa[index]*t80760*t80761*t80759*4.0;
                double t80773 = t80790+t80791+t80788+t80789;
                double t80774 = gamma_aa[index]*gcaa*t80708*4.0;
                double t80775 = gamma_aa[index]*gcaa*t80762*t80758*t80759*4.0;
                double t80776 = t80707*t80758*t80759*6.0;
                double t80777 = t80760*t80761*t80772;
                double t80778 = t80774+t80775+t80776+t80777+1.0;
                double t80781 = gcaa*t80708*2.0;
                double t80782 = gamma_aa[index]*t80707*t80758*2.0;
                double t80779 = t80781+t80782;
                double t80780 = 1.0/(t80771*t80771);
                double t80783 = 1.0/(t80767*t80767);
                double t80784 = gcaa*t80708*3.0;
                double t80785 = gamma_aa[index]*t80707*t80758*6.0;
                double t80786 = gcaa*t80762*t80758*t80759*3.0;
                double t80787 = t80784+t80785+t80786;
                double t80792 = 1.0/(t80778*t80778);
                double t80793 = 1.0/tau_a[index];
                double t80794 = tau_a[index]-1.0/1.0E20;
                double t80795 = ( (t80794 > 0.0) ?  1.0 : 0.0 ) ;
                double t80796 = t80756-t80757;
                double t80797 = t80655*t80658*t80796;
                double t80798 = t80757+t80797;
                double t80799 = 1.0/t80778;
                double t80800 = 1.0/t80767;
                double t80801 = 1.0/t80771;
                double t80802 = 1.0/(t80764*t80764);
                double t80803 = 1.0/kp;
                double t80804 = rho_a[index]*2.0;
                double t80805 = pow(rho_a[index],5.0/3.0);
                double t80806 = C_k*t80805*t80793;
                double t80807 = t80806-1.0;
                double t80808 = t80807*t80807;
                double t80809 = t80808*t80808;
                double t80810 = t80809*t80809;
                double t80811 = t80806+1.0;
                v_gamma_aa_gamma_aa_[index] = -(rho_a[index]*(t80757+t80655*t80658*(t80756-c0p*t80650*t80652*2.0) \
                   )+rho_b[index]*(t80676-t80655*t80658*(t80676-c0f*log((t80659*(1.0/2.0))/(b1f*t80662+b3f*t80663+b2f* \
                   c*t80660+b4f*t80664*t80639)+1.0)*(a1f*c*t80660+1.0)*2.0))-t80677*(t80694-t80700*t80705*t80658*t80699* \
                   (t80694-c0f*log((t80659*(1.0/2.0))/(b1f*t80680+b3f*t80681+b2f*c*t80678+b4f*t80682*t80639)+1.0)*(a1f* \
                   c*t80678+1.0)*2.0)+(Aa*t80705*t80658*log((1.0/2.0)/(Aa*(b1a*t80680+b3a*t80681+b2a*c*t80678+b4a*t80682* \
                   t80639))+1.0)*(t80700*t80699-1.0)*(a1a*c*t80678+1.0)*2.0)/d2fz0))*(ccab1*1.0/(t80714*t80714)*t80706* \
                   t80707*(1.0/2.0)-(ccab2*t80706*t80707*(1.0/2.0))/t80718-ccab4*(t80720*t80720)*t80721*1.0/(t80732*t80732* \
                   t80732)*t80719*2.0-ccab2*t80706*t80715*1.0/(t80718*t80718*t80718)*(t80727*t80727)*2.0+ccab2*t80715* \
                   t80707*t80735*t80719*(1.0/2.0)+ccab4*t80721*t80740*t80719*(t80706*t80707*3.0+t80715*t80707*t80719* \
                   3.0+gcab*t80712*t80706*t80707*6.0)-(ccab4*t80715*t80707*t80719*3.0)/t80732+ccab2*t80712*t80706*t80708* \
                   t80735*t80727*2.0-ccab1*gcab*t80712*1.0/(t80714*t80714*t80714)*t80706*t80707*(1.0/2.0)-(ccab3*gcab* \
                   t80712*t80706*t80707*(3.0/2.0))/t80726-ccab3*gcab*t80712*(t80722*t80722)*t80706*t80715*1.0/(t80726* \
                   t80726*t80726)*2.0+ccab3*gcab*t80722*t80706*t80715*t80708*t80744*3.0+ccab4*t80720*t80712*t80740*t80715* \
                   t80708*t80719*4.0+ccab3*gcab*t80712*t80706*t80715*t80744*(t80706*t80707*(3.0/2.0)+gcab*t80712*t80706* \
                   t80707*(3.0/2.0)))+t80793*t80795*t80798*((ccaa1*gcaa*t80708)/t80764+ccaa2*gamma_aa[index]*t80800*t80707* \
                   t80758*2.0-ccaa1*gamma_aa[index]*t80802*t80707*t80758-ccaa4*t80760*t80761*t80772*t80773*t80792-ccaa2* \
                   t80707*t80783*t80758*t80759*t80779+ccaa4*gamma_aa[index]*t80760*t80761*t80759*t80799*4.0+ccaa3*gcaa* \
                   t80801*t80762*t80758*t80759*3.0-ccaa3*gamma_aa[index]*gcaa*t80762*t80780*t80758*t80759*t80787)*(1.0/ \
                   4.0)-rho_a[index]*t80798*(t80795*(t80793*(tau_a[index]*2.0-(gamma_aa[index]*(1.0/4.0))/rho_a[index]) \
                   *(1.0/2.0)-1.0)+1.0)*(ccaa2*t80800*t80707*t80758*2.0-ccaa1*t80802*t80707*t80758*2.0-ccaa2*t80760*t80761* \
                   t80783*t80759*2.0+ccaa4*t80760*t80761*t80759*t80799*1.2E1-ccaa4*t80760*t80761*t80772*t80792*(t80707* \
                   t80758*1.2E1+t80760*t80761*t80759*1.2E1+gamma_aa[index]*gcaa*t80762*t80758*2.4E1)+ccaa1*gamma_aa[index]* \
                   gcaa*t80762*1.0/(t80764*t80764*t80764)*t80758*2.0+ccaa4*t80760*t80761*t80772*(t80773*t80773)*1.0/(t80778* \
                   t80778*t80778)*2.0+ccaa2*t80707*t80758*1.0/(t80767*t80767*t80767)*t80759*(t80779*t80779)*2.0+ccaa3* \
                   gamma_aa[index]*gcaa*t80801*t80762*t80758*6.0-ccaa2*gamma_aa[index]*t80707*t80783*t80758*t80779*4.0- \
                   ccaa4*gamma_aa[index]*t80760*t80761*t80773*t80792*t80759*8.0-ccaa3*gcaa*t80762*t80780*t80758*t80759* \
                   t80787*6.0-ccaa3*gamma_aa[index]*gcaa*t80762*t80780*t80758*t80759*(t80707*t80758*6.0+gamma_aa[index]* \
                   gcaa*t80762*t80758*6.0)+ccaa3*gamma_aa[index]*gcaa*t80762*1.0/(t80771*t80771*t80771)*t80758*t80759* \
                   (t80787*t80787)*2.0)+1.0/(k*k*k*k)*(mu_*mu_)*1.0/(rho_a[index]*rho_a[index]*rho_a[index])*t80803*1.0/ \
                   pow(t80804,4.0/3.0)*1.0/pow(gamma_aa[index]*1.0/(k*k)*mu_*1.0/(rho_a[index]*rho_a[index])*t80803*1.0/ \
                   pow(t80804,2.0/3.0)*(1.0/4.0)+1.0,3.0)*(X-1.0)*((a_1*t80807)/t80811+a_2*1.0/(t80811*t80811)*t80808+ \
                   a_4*1.0/(t80811*t80811*t80811*t80811)*t80809+a_8*t80810*1.0/(t80811*t80811*t80811*t80811*t80811*t80811* \
                   t80811*t80811)+a_10*t80810*1.0/pow(t80811,1.0E1)*t80808+a_3*1.0/(t80811*t80811*t80811)*t80807*t80808+ \
                   a_5*1.0/(t80811*t80811*t80811*t80811*t80811)*t80807*t80809+a_6*1.0/(t80811*t80811*t80811*t80811*t80811* \
                   t80811)*t80808*t80809+a_9*t80810*1.0/(t80811*t80811*t80811*t80811*t80811*t80811*t80811*t80811*t80811) \
                   *t80807+a_11*t80810*1.0/pow(t80811,1.1E1)*t80807*t80808+a_7*1.0/(t80811*t80811*t80811*t80811*t80811* \
                   t80811*t80811)*t80807*t80808*t80809+1.0)*(1.0/8.0);
            } else if (rho_a[index] > cutoff_) {
                double t83574 = 1.0/pow(rho_a[index],1.0/3.0);
                double t83575 = c*t83574;
                double t83576 = sqrt(t83575);
                double t83577 = pow(t83575,3.0/2.0);
                double t83578 = c*c;
                double t83579 = 1.0/pow(rho_a[index],2.0/3.0);
                double t83580 = 1.0/c0p;
                double t83581 = b1p*t83576;
                double t83582 = b3p*t83577;
                double t83583 = b4p*t83578*t83579;
                double t83584 = b2p*c*t83574;
                double t83585 = t83581+t83582+t83583+t83584;
                double t83586 = 1.0/t83585;
                double t83587 = t83580*t83586*(1.0/2.0);
                double t83588 = t83587+1.0;
                double t83589 = log(t83588);
                double t83590 = a1p*c*t83574;
                double t83591 = t83590+1.0;
                double t83592 = gcaa*gcaa;
                double t83593 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t83594 = 1.0/pow(rho_a[index],8.0/3.0);
                double t83595 = gamma_aa[index]*gamma_aa[index];
                double t83596 = t83592*t83592;
                double t83597 = 1.0/pow(rho_a[index],3.2E1/3.0);
                double t83598 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t83599 = gamma_aa[index]*gcaa*t83594;
                double t83600 = t83599+1.0;
                double t83601 = gamma_aa[index]*gcaa*t83594*2.0;
                double t83602 = t83592*t83593*t83595;
                double t83603 = t83601+t83602+1.0;
                double t83604 = gamma_aa[index]*gcaa*t83594*3.0;
                double t83605 = gamma_aa[index]*gcaa*t83592*t83595*t83598;
                double t83606 = t83592*t83593*t83595*3.0;
                double t83607 = t83604+t83605+t83606+1.0;
                double t83608 = t83595*t83595;
                double t83624 = gcaa*t83594*4.0;
                double t83625 = gamma_aa[index]*t83592*t83593*1.2E1;
                double t83626 = gcaa*t83592*t83595*t83598*1.2E1;
                double t83627 = gamma_aa[index]*t83595*t83596*t83597*4.0;
                double t83609 = t83624+t83625+t83626+t83627;
                double t83610 = gamma_aa[index]*gcaa*t83594*4.0;
                double t83611 = gamma_aa[index]*gcaa*t83592*t83595*t83598*4.0;
                double t83612 = t83592*t83593*t83595*6.0;
                double t83613 = t83608*t83596*t83597;
                double t83614 = t83610+t83611+t83612+t83613+1.0;
                double t83617 = gcaa*t83594*2.0;
                double t83618 = gamma_aa[index]*t83592*t83593*2.0;
                double t83615 = t83617+t83618;
                double t83616 = 1.0/(t83607*t83607);
                double t83619 = 1.0/(t83603*t83603);
                double t83620 = gcaa*t83594*3.0;
                double t83621 = gamma_aa[index]*t83592*t83593*6.0;
                double t83622 = gcaa*t83592*t83595*t83598*3.0;
                double t83623 = t83620+t83621+t83622;
                double t83628 = 1.0/(t83614*t83614);
                double t83629 = 1.0/tau_a[index];
                double t83630 = tau_a[index]-1.0/1.0E20;
                double t83631 = ( (t83630 > 0.0) ?  1.0 : 0.0 ) ;
                double t83632 = pow(2.0,1.0/3.0);
                double t83633 = t83632*2.0;
                double t83634 = t83633-2.0;
                double t83635 = two_13*2.0;
                double t83636 = t83635-2.0;
                double t83637 = 1.0/t83636;
                double t83638 = 1.0/c0f;
                double t83639 = b1f*t83576;
                double t83640 = b3f*t83577;
                double t83641 = b4f*t83578*t83579;
                double t83642 = b2f*c*t83574;
                double t83643 = t83640+t83641+t83642+t83639;
                double t83644 = 1.0/t83643;
                double t83645 = t83644*t83638*(1.0/2.0);
                double t83646 = t83645+1.0;
                double t83647 = log(t83646);
                double t83648 = a1f*c*t83574;
                double t83649 = t83648+1.0;
                double t83650 = c0f*t83647*t83649*2.0;
                double t83651 = c0p*t83591*t83589*2.0;
                double t83652 = 1.0/t83614;
                double t83653 = 1.0/t83603;
                double t83654 = 1.0/t83607;
                double t83655 = 1.0/(t83600*t83600);
                double t83656 = 1.0/kp;
                double t83657 = rho_a[index]*2.0;
                double t83658 = pow(rho_a[index],5.0/3.0);
                double t83659 = C_k*t83629*t83658;
                double t83660 = t83659-1.0;
                double t83661 = t83660*t83660;
                double t83662 = t83661*t83661;
                double t83663 = t83662*t83662;
                double t83664 = t83659+1.0;
                v_gamma_aa_gamma_aa_[index] = t83631*t83629*(t83651+t83634*t83637*(t83650-t83651))*((ccaa1*gcaa*t83594) \
                   /t83600+ccaa2*gamma_aa[index]*t83653*t83592*t83593*2.0-ccaa1*gamma_aa[index]*t83592*t83655*t83593- \
                   ccaa2*t83615*t83592*t83619*t83593*t83595-ccaa4*t83608*t83609*t83628*t83596*t83597+ccaa4*gamma_aa[index]* \
                   t83652*t83595*t83596*t83597*4.0+ccaa3*gcaa*t83654*t83592*t83595*t83598*3.0-ccaa3*gamma_aa[index]*gcaa* \
                   t83623*t83616*t83592*t83595*t83598)*(1.0/4.0)-rho_a[index]*(t83631*(t83629*(tau_a[index]*2.0-(gamma_aa[index]* \
                   (1.0/4.0))/rho_a[index])*(1.0/2.0)-1.0)+1.0)*(t83651+t83634*t83637*(t83650-c0p*t83591*t83589*2.0)) \
                   *(ccaa2*t83653*t83592*t83593*2.0-ccaa1*t83592*t83655*t83593*2.0+ccaa4*t83652*t83595*t83596*t83597* \
                   1.2E1-ccaa2*t83619*t83595*t83596*t83597*2.0-ccaa4*t83608*t83628*t83596*t83597*(t83592*t83593*1.2E1+ \
                   t83595*t83596*t83597*1.2E1+gamma_aa[index]*gcaa*t83592*t83598*2.4E1)+ccaa1*gamma_aa[index]*gcaa*1.0/ \
                   (t83600*t83600*t83600)*t83592*t83598*2.0+ccaa2*1.0/(t83603*t83603*t83603)*(t83615*t83615)*t83592*t83593* \
                   t83595*2.0+ccaa4*1.0/(t83614*t83614*t83614)*t83608*(t83609*t83609)*t83596*t83597*2.0+ccaa3*gamma_aa[index]* \
                   gcaa*t83654*t83592*t83598*6.0-ccaa2*gamma_aa[index]*t83615*t83592*t83619*t83593*4.0-ccaa4*gamma_aa[index]* \
                   t83609*t83628*t83595*t83596*t83597*8.0-ccaa3*gcaa*t83623*t83616*t83592*t83595*t83598*6.0-ccaa3*gamma_aa[index]* \
                   gcaa*t83616*t83592*t83595*t83598*(t83592*t83593*6.0+gamma_aa[index]*gcaa*t83592*t83598*6.0)+ccaa3* \
                   gamma_aa[index]*gcaa*(t83623*t83623)*1.0/(t83607*t83607*t83607)*t83592*t83595*t83598*2.0)+1.0/(k*k* \
                   k*k)*(mu_*mu_)*1.0/(rho_a[index]*rho_a[index]*rho_a[index])*t83656*1.0/pow(t83657,4.0/3.0)*1.0/pow(gamma_aa[index]* \
                   1.0/(k*k)*mu_*1.0/(rho_a[index]*rho_a[index])*t83656*1.0/pow(t83657,2.0/3.0)*(1.0/4.0)+1.0,3.0)*(X- \
                   1.0)*((a_1*t83660)/t83664+a_2*t83661*1.0/(t83664*t83664)+a_4*t83662*1.0/(t83664*t83664*t83664*t83664) \
                   +a_8*t83663*1.0/(t83664*t83664*t83664*t83664*t83664*t83664*t83664*t83664)+a_10*t83661*t83663*1.0/pow(t83664,1.0E1) \
                   +a_3*t83660*t83661*1.0/(t83664*t83664*t83664)+a_5*t83660*t83662*1.0/(t83664*t83664*t83664*t83664*t83664) \
                   +a_6*t83661*t83662*1.0/(t83664*t83664*t83664*t83664*t83664*t83664)+a_9*t83660*t83663*1.0/(t83664*t83664* \
                   t83664*t83664*t83664*t83664*t83664*t83664*t83664)+a_11*t83660*t83661*t83663*1.0/pow(t83664,1.1E1)+ \
                   a_7*t83660*t83661*t83662*1.0/(t83664*t83664*t83664*t83664*t83664*t83664*t83664)+1.0)*(1.0/8.0);
            } else if (rho_b[index] > cutoff_) {
                v_gamma_aa_gamma_aa_[index] = 0.0;
            } else {
                v_gamma_aa_gamma_aa_[index] = 0.0;
            } 

            //V_gamma_aa_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_aa_gamma_ab_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_aa_gamma_ab_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_aa_gamma_ab_[index] = 0.0;
            } else {
                v_gamma_aa_gamma_ab_[index] = 0.0;
            } 

            //V_gamma_aa_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t80814 = 1.0/pow(rho_a[index],1.0/3.0);
                double t80815 = c*t80814;
                double t80816 = sqrt(t80815);
                double t80817 = pow(t80815,3.0/2.0);
                double t80818 = c*c;
                double t80819 = 1.0/pow(rho_a[index],2.0/3.0);
                double t80820 = 1.0/c0p;
                double t80821 = b1p*t80816;
                double t80822 = b3p*t80817;
                double t80823 = b4p*t80818*t80819;
                double t80824 = b2p*c*t80814;
                double t80825 = t80821+t80822+t80823+t80824;
                double t80826 = 1.0/t80825;
                double t80827 = t80820*t80826*(1.0/2.0);
                double t80828 = t80827+1.0;
                double t80829 = log(t80828);
                double t80830 = a1p*c*t80814;
                double t80831 = t80830+1.0;
                double t80832 = pow(2.0,1.0/3.0);
                double t80833 = t80832*2.0;
                double t80834 = t80833-2.0;
                double t80835 = two_13*2.0;
                double t80836 = t80835-2.0;
                double t80837 = 1.0/t80836;
                double t80838 = 1.0/c0f;
                double t80839 = 1.0/pow(rho_b[index],1.0/3.0);
                double t80840 = c*t80839;
                double t80841 = sqrt(t80840);
                double t80842 = pow(t80840,3.0/2.0);
                double t80843 = 1.0/pow(rho_b[index],2.0/3.0);
                double t80844 = b1p*t80841;
                double t80845 = b3p*t80842;
                double t80846 = b4p*t80843*t80818;
                double t80847 = b2p*c*t80839;
                double t80848 = t80844+t80845+t80846+t80847;
                double t80849 = 1.0/t80848;
                double t80850 = t80820*t80849*(1.0/2.0);
                double t80851 = t80850+1.0;
                double t80852 = log(t80851);
                double t80853 = a1p*c*t80839;
                double t80854 = t80853+1.0;
                double t80855 = c0p*t80852*t80854*2.0;
                double t80856 = rho_a[index]+rho_b[index];
                double t80857 = 1.0/pow(t80856,1.0/3.0);
                double t80858 = c*t80857;
                double t80859 = sqrt(t80858);
                double t80860 = pow(t80858,3.0/2.0);
                double t80861 = 1.0/pow(t80856,2.0/3.0);
                double t80862 = b1p*t80859;
                double t80863 = b3p*t80860;
                double t80864 = b4p*t80861*t80818;
                double t80865 = b2p*c*t80857;
                double t80866 = t80862+t80863+t80864+t80865;
                double t80867 = 1.0/t80866;
                double t80868 = t80820*t80867*(1.0/2.0);
                double t80869 = t80868+1.0;
                double t80870 = log(t80869);
                double t80871 = a1p*c*t80857;
                double t80872 = t80871+1.0;
                double t80873 = c0p*t80870*t80872*2.0;
                double t80874 = rho_a[index]-rho_b[index];
                double t80875 = t80874*t80874;
                double t80876 = 1.0/t80856;
                double t80877 = t80874*t80876;
                double t80878 = 1.0/(t80856*t80856*t80856*t80856);
                double t80879 = t80875*t80875;
                double t80880 = t80877+1.0;
                double t80881 = pow(t80880,4.0/3.0);
                double t80882 = -t80877+1.0;
                double t80883 = pow(t80882,4.0/3.0);
                double t80884 = t80881+t80883-2.0;
                double t80885 = gcab*gcab;
                double t80888 = 1.0/pow(rho_a[index],8.0/3.0);
                double t80889 = 1.0/pow(rho_b[index],8.0/3.0);
                double t80890 = gamma_aa[index]*t80888*(1.0/2.0);
                double t80891 = gamma_bb[index]*t80889*(1.0/2.0);
                double t80886 = t80890+t80891;
                double t80887 = t80886*t80886;
                double t80892 = t80885*t80885;
                double t80893 = t80887*t80887;
                double t80894 = t80885*t80887*3.0;
                double t80895 = gcab*t80885*t80886*t80887;
                double t80896 = gcab*t80886*3.0;
                double t80897 = t80894+t80895+t80896+1.0;
                double t80898 = t80885*t80887;
                double t80899 = gcab*t80886*2.0;
                double t80900 = t80898+t80899+1.0;
                double t80901 = t80885*t80887*6.0;
                double t80902 = gcab*t80885*t80886*t80887*4.0;
                double t80903 = t80892*t80893;
                double t80904 = gcab*t80886*4.0;
                double t80905 = t80901+t80902+t80903+t80904+1.0;
                double t80906 = 1.0/(t80900*t80900);
                double t80907 = gcab*t80888;
                double t80908 = t80885*t80886*t80888;
                double t80909 = t80907+t80908;
                double t80910 = gcab*t80889;
                double t80911 = t80885*t80886*t80889;
                double t80912 = t80910+t80911;
                double t80913 = gcab*t80886;
                double t80914 = t80913+1.0;
                double t80915 = gcab*t80888*2.0;
                double t80916 = t80885*t80886*t80888*6.0;
                double t80917 = gcab*t80885*t80887*t80888*6.0;
                double t80918 = t80892*t80886*t80887*t80888*2.0;
                double t80919 = t80915+t80916+t80917+t80918;
                double t80920 = 1.0/(t80905*t80905);
                double t80921 = gcab*t80889*2.0;
                double t80922 = t80885*t80886*t80889*6.0;
                double t80923 = gcab*t80885*t80887*t80889*6.0;
                double t80924 = t80892*t80886*t80887*t80889*2.0;
                double t80925 = t80921+t80922+t80923+t80924;
                double t80926 = gcab*t80888*(3.0/2.0);
                double t80927 = t80885*t80886*t80888*3.0;
                double t80928 = gcab*t80885*t80887*t80888*(3.0/2.0);
                double t80929 = t80926+t80927+t80928;
                double t80930 = 1.0/(t80897*t80897);
                double t80931 = gcab*t80889*(3.0/2.0);
                double t80932 = t80885*t80886*t80889*3.0;
                double t80933 = gcab*t80885*t80887*t80889*(3.0/2.0);
                double t80934 = t80931+t80932+t80933;
                v_gamma_aa_gamma_bb_[index] = (-rho_b[index]*(t80855-t80834*t80837*(t80855-c0f*log((t80838*(1.0/2.0) \
                   )/(b1f*t80841+b3f*t80842+b2f*c*t80839+b4f*t80843*t80818)+1.0)*(a1f*c*t80839+1.0)*2.0))+t80856*(t80873- \
                   t80837*t80884*t80878*t80879*(t80873-c0f*log((t80838*(1.0/2.0))/(b1f*t80859+b3f*t80860+b2f*c*t80857+ \
                   b4f*t80861*t80818)+1.0)*(a1f*c*t80857+1.0)*2.0)+(Aa*t80837*t80884*log((1.0/2.0)/(Aa*(b1a*t80859+b3a* \
                   t80860+b2a*c*t80857+b4a*t80861*t80818))+1.0)*(t80878*t80879-1.0)*(a1a*c*t80857+1.0)*2.0)/d2fz0)+rho_a[index]* \
                   (t80834*t80837*(c0p*t80831*t80829*2.0-c0f*log((t80838*(1.0/2.0))/(b1f*t80816+b3f*t80817+b2f*c*t80814+ \
                   b4f*t80818*t80819)+1.0)*(a1f*c*t80814+1.0)*2.0)-c0p*t80831*t80829*2.0))*(ccab4*t80920*t80892*t80893* \
                   (t80885*t80888*t80889*3.0+t80892*t80887*t80888*t80889*3.0+gcab*t80885*t80886*t80888*t80889*6.0)-(ccab2* \
                   t80885*t80888*t80889*(1.0/2.0))/t80900+ccab1*1.0/(t80914*t80914)*t80885*t80888*t80889*(1.0/2.0)+ccab2* \
                   t80912*t80906*t80885*t80886*t80888+ccab2*t80906*t80909*t80885*t80886*t80889+ccab2*t80906*t80892*t80887* \
                   t80888*t80889*(1.0/2.0)-ccab2*1.0/(t80900*t80900*t80900)*t80912*t80909*t80885*t80887*2.0-ccab4*1.0/ \
                   (t80905*t80905*t80905)*t80925*t80892*t80919*t80893*2.0-(ccab4*t80892*t80887*t80888*t80889*3.0)/t80905+ \
                   ccab3*gcab*t80930*t80934*t80885*t80887*t80888*(3.0/2.0)+ccab3*gcab*t80930*t80929*t80885*t80887*t80889* \
                   (3.0/2.0)+ccab4*t80920*t80925*t80892*t80886*t80887*t80888*2.0+ccab4*t80920*t80892*t80919*t80886*t80887* \
                   t80889*2.0+ccab3*gcab*t80930*t80885*t80886*t80887*(t80885*t80888*t80889*(3.0/2.0)+gcab*t80885*t80886* \
                   t80888*t80889*(3.0/2.0))-ccab1*gcab*1.0/(t80914*t80914*t80914)*t80885*t80886*t80888*t80889*(1.0/2.0) \
                   -(ccab3*gcab*t80885*t80886*t80888*t80889*(3.0/2.0))/t80897-ccab3*gcab*t80934*t80929*t80885*t80886* \
                   t80887*1.0/(t80897*t80897*t80897)*2.0);
            } else if (rho_a[index] > cutoff_) {
                v_gamma_aa_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_aa_gamma_bb_[index] = 0.0;
            } else {
                v_gamma_aa_gamma_bb_[index] = 0.0;
            } 

            //V_gamma_ab_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_ab_gamma_ab_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_ab_gamma_ab_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_ab_gamma_ab_[index] = 0.0;
            } else {
                v_gamma_ab_gamma_ab_[index] = 0.0;
            } 

            //V_gamma_ab_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_ab_gamma_bb_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_ab_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_ab_gamma_bb_[index] = 0.0;
            } else {
                v_gamma_ab_gamma_bb_[index] = 0.0;
            } 

            //V_gamma_bb_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t80938 = 1.0/pow(rho_a[index],1.0/3.0);
                double t80939 = c*t80938;
                double t80940 = sqrt(t80939);
                double t80941 = pow(t80939,3.0/2.0);
                double t80942 = c*c;
                double t80943 = 1.0/pow(rho_a[index],2.0/3.0);
                double t80944 = 1.0/c0p;
                double t80945 = b1p*t80940;
                double t80946 = b3p*t80941;
                double t80947 = b4p*t80942*t80943;
                double t80948 = b2p*c*t80938;
                double t80949 = t80945+t80946+t80947+t80948;
                double t80950 = 1.0/t80949;
                double t80951 = t80950*t80944*(1.0/2.0);
                double t80952 = t80951+1.0;
                double t80953 = log(t80952);
                double t80954 = a1p*c*t80938;
                double t80955 = t80954+1.0;
                double t80956 = pow(2.0,1.0/3.0);
                double t80957 = t80956*2.0;
                double t80958 = t80957-2.0;
                double t80959 = two_13*2.0;
                double t80960 = t80959-2.0;
                double t80961 = 1.0/t80960;
                double t80962 = 1.0/c0f;
                double t80963 = 1.0/pow(rho_b[index],1.0/3.0);
                double t80964 = c*t80963;
                double t80965 = sqrt(t80964);
                double t80966 = pow(t80964,3.0/2.0);
                double t80967 = 1.0/pow(rho_b[index],2.0/3.0);
                double t80968 = b1p*t80965;
                double t80969 = b3p*t80966;
                double t80970 = b4p*t80942*t80967;
                double t80971 = b2p*c*t80963;
                double t80972 = t80970+t80971+t80968+t80969;
                double t80973 = 1.0/t80972;
                double t80974 = t80944*t80973*(1.0/2.0);
                double t80975 = t80974+1.0;
                double t80976 = log(t80975);
                double t80977 = a1p*c*t80963;
                double t80978 = t80977+1.0;
                double t80979 = c0p*t80976*t80978*2.0;
                double t80980 = rho_a[index]+rho_b[index];
                double t80981 = 1.0/pow(t80980,1.0/3.0);
                double t80982 = c*t80981;
                double t80983 = sqrt(t80982);
                double t80984 = pow(t80982,3.0/2.0);
                double t80985 = 1.0/pow(t80980,2.0/3.0);
                double t80986 = b1p*t80983;
                double t80987 = b3p*t80984;
                double t80988 = b4p*t80942*t80985;
                double t80989 = b2p*c*t80981;
                double t80990 = t80986+t80987+t80988+t80989;
                double t80991 = 1.0/t80990;
                double t80992 = t80944*t80991*(1.0/2.0);
                double t80993 = t80992+1.0;
                double t80994 = log(t80993);
                double t80995 = a1p*c*t80981;
                double t80996 = t80995+1.0;
                double t80997 = c0p*t80994*t80996*2.0;
                double t80998 = rho_a[index]-rho_b[index];
                double t80999 = t80998*t80998;
                double t81000 = 1.0/t80980;
                double t81001 = t80998*t81000;
                double t81002 = 1.0/(t80980*t80980*t80980*t80980);
                double t81003 = t80999*t80999;
                double t81004 = t81001+1.0;
                double t81005 = pow(t81004,4.0/3.0);
                double t81006 = -t81001+1.0;
                double t81007 = pow(t81006,4.0/3.0);
                double t81008 = t81005+t81007-2.0;
                double t81009 = gcab*gcab;
                double t81010 = 1.0/pow(rho_b[index],1.6E1/3.0);
                double t81011 = 1.0/pow(rho_a[index],8.0/3.0);
                double t81012 = gamma_aa[index]*t81011*(1.0/2.0);
                double t81013 = 1.0/pow(rho_b[index],8.0/3.0);
                double t81014 = gamma_bb[index]*t81013*(1.0/2.0);
                double t81015 = t81012+t81014;
                double t81016 = gcab*t81015;
                double t81017 = t81016+1.0;
                double t81018 = t81015*t81015;
                double t81019 = t81009*t81018;
                double t81020 = gcab*t81015*2.0;
                double t81021 = t81020+t81019+1.0;
                double t81022 = t81009*t81009;
                double t81039 = gcab*t81013*2.0;
                double t81040 = t81013*t81015*t81009*6.0;
                double t81041 = gcab*t81013*t81009*t81018*6.0;
                double t81042 = t81013*t81022*t81015*t81018*2.0;
                double t81023 = t81040+t81041+t81042+t81039;
                double t81024 = t81018*t81018;
                double t81044 = gcab*t81013*(3.0/2.0);
                double t81045 = t81013*t81015*t81009*3.0;
                double t81046 = gcab*t81013*t81009*t81018*(3.0/2.0);
                double t81025 = t81044+t81045+t81046;
                double t81026 = t81009*t81018*3.0;
                double t81027 = gcab*t81015*t81009*t81018;
                double t81028 = gcab*t81015*3.0;
                double t81029 = t81026+t81027+t81028+1.0;
                double t81036 = gcab*t81013;
                double t81037 = t81013*t81015*t81009;
                double t81030 = t81036+t81037;
                double t81031 = t81009*t81018*6.0;
                double t81032 = gcab*t81015*t81009*t81018*4.0;
                double t81033 = t81022*t81024;
                double t81034 = gcab*t81015*4.0;
                double t81035 = t81031+t81032+t81033+t81034+1.0;
                double t81038 = 1.0/(t81021*t81021);
                double t81043 = 1.0/(t81035*t81035);
                double t81047 = 1.0/(t81029*t81029);
                double t81048 = c0p*t80953*t80955*2.0;
                double t81049 = b1f*t80965;
                double t81050 = b3f*t80966;
                double t81051 = b4f*t80942*t80967;
                double t81052 = b2f*c*t80963;
                double t81053 = t81050+t81051+t81052+t81049;
                double t81054 = 1.0/t81053;
                double t81055 = t80962*t81054*(1.0/2.0);
                double t81056 = t81055+1.0;
                double t81057 = log(t81056);
                double t81058 = a1f*c*t80963;
                double t81059 = t81058+1.0;
                double t81100 = c0f*t81057*t81059*2.0;
                double t81060 = t80979-t81100;
                double t81101 = t80961*t80958*t81060;
                double t81061 = t80979-t81101;
                double t81062 = gcaa*gcaa;
                double t81063 = gamma_bb[index]*gamma_bb[index];
                double t81064 = t81062*t81062;
                double t81065 = 1.0/pow(rho_b[index],3.2E1/3.0);
                double t81066 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]);
                double t81067 = gamma_bb[index]*gcaa*t81013;
                double t81068 = t81067+1.0;
                double t81069 = gamma_bb[index]*gcaa*t81013*2.0;
                double t81070 = t81010*t81062*t81063;
                double t81071 = t81070+t81069+1.0;
                double t81072 = gamma_bb[index]*gcaa*t81013*3.0;
                double t81073 = gamma_bb[index]*gcaa*t81062*t81063*t81066;
                double t81074 = t81010*t81062*t81063*3.0;
                double t81075 = t81072+t81073+t81074+1.0;
                double t81076 = t81063*t81063;
                double t81092 = gcaa*t81013*4.0;
                double t81093 = gamma_bb[index]*t81010*t81062*1.2E1;
                double t81094 = gcaa*t81062*t81063*t81066*1.2E1;
                double t81095 = gamma_bb[index]*t81063*t81064*t81065*4.0;
                double t81077 = t81092+t81093+t81094+t81095;
                double t81078 = gamma_bb[index]*gcaa*t81013*4.0;
                double t81079 = gamma_bb[index]*gcaa*t81062*t81063*t81066*4.0;
                double t81080 = t81010*t81062*t81063*6.0;
                double t81081 = t81064*t81065*t81076;
                double t81082 = t81080+t81081+t81078+t81079+1.0;
                double t81085 = gcaa*t81013*2.0;
                double t81086 = gamma_bb[index]*t81010*t81062*2.0;
                double t81083 = t81085+t81086;
                double t81084 = 1.0/(t81075*t81075);
                double t81087 = 1.0/(t81071*t81071);
                double t81088 = gcaa*t81013*3.0;
                double t81089 = gamma_bb[index]*t81010*t81062*6.0;
                double t81090 = gcaa*t81062*t81063*t81066*3.0;
                double t81091 = t81090+t81088+t81089;
                double t81096 = 1.0/(t81082*t81082);
                double t81097 = 1.0/tau_b[index];
                double t81098 = tau_b[index]-1.0/1.0E20;
                double t81099 = ( (t81098 > 0.0) ?  1.0 : 0.0 ) ;
                double t81102 = 1.0/t81082;
                double t81103 = 1.0/t81071;
                double t81104 = 1.0/t81075;
                double t81105 = 1.0/(t81068*t81068);
                double t81106 = 1.0/kp;
                double t81107 = rho_b[index]*2.0;
                double t81108 = pow(rho_b[index],5.0/3.0);
                double t81109 = C_k*t81108*t81097;
                double t81110 = t81109-1.0;
                double t81111 = t81110*t81110;
                double t81112 = t81111*t81111;
                double t81113 = t81112*t81112;
                double t81114 = t81109+1.0;
                v_gamma_bb_gamma_bb_[index] = (rho_b[index]*t81061+rho_a[index]*(t81048-t80961*t80958*(t81048-c0f* \
                   log((t80962*(1.0/2.0))/(b1f*t80940+b3f*t80941+b2f*c*t80938+b4f*t80942*t80943)+1.0)*(a1f*c*t80938+1.0) \
                   *2.0))-t80980*(t80997-t80961*t81002*t81003*t81008*(t80997-c0f*log((t80962*(1.0/2.0))/(b1f*t80983+b3f* \
                   t80984+b2f*c*t80981+b4f*t80942*t80985)+1.0)*(a1f*c*t80981+1.0)*2.0)+(Aa*t80961*t81008*log((1.0/2.0) \
                   /(Aa*(b1a*t80983+b3a*t80984+b2a*c*t80981+b4a*t80942*t80985))+1.0)*(t81002*t81003-1.0)*(a1a*c*t80981+ \
                   1.0)*2.0)/d2fz0))*((ccab2*t81010*t81009*(1.0/2.0))/t81021-ccab1*t81010*1.0/(t81017*t81017)*t81009* \
                   (1.0/2.0)+ccab2*1.0/(t81021*t81021*t81021)*(t81030*t81030)*t81009*t81018*2.0+ccab4*t81022*(t81023* \
                   t81023)*t81024*1.0/(t81035*t81035*t81035)*2.0-ccab2*t81010*t81022*t81018*t81038*(1.0/2.0)-ccab4*t81022* \
                   t81024*t81043*(t81010*t81009*3.0+t81010*t81022*t81018*3.0+gcab*t81010*t81015*t81009*6.0)+(ccab4*t81010* \
                   t81022*t81018*3.0)/t81035-ccab2*t81030*t81013*t81015*t81009*t81038*2.0+ccab1*gcab*t81010*t81015*1.0/ \
                   (t81017*t81017*t81017)*t81009*(1.0/2.0)+(ccab3*gcab*t81010*t81015*t81009*(3.0/2.0))/t81029+ccab3*gcab* \
                   t81015*(t81025*t81025)*t81009*t81018*1.0/(t81029*t81029*t81029)*2.0-ccab3*gcab*t81013*t81025*t81009* \
                   t81018*t81047*3.0-ccab4*t81013*t81022*t81023*t81015*t81043*t81018*4.0-ccab3*gcab*t81015*t81009*t81018* \
                   t81047*(t81010*t81009*(3.0/2.0)+gcab*t81010*t81015*t81009*(3.0/2.0)))+t81061*t81097*t81099*((ccaa1* \
                   gcaa*t81013)/t81068+ccaa2*gamma_bb[index]*t81010*t81103*t81062*2.0-ccaa1*gamma_bb[index]*t81010*t81105* \
                   t81062-ccaa2*t81010*t81062*t81063*t81083*t81087-ccaa4*t81064*t81065*t81076*t81077*t81096+ccaa4*gamma_bb[index]* \
                   t81102*t81063*t81064*t81065*4.0+ccaa3*gcaa*t81104*t81062*t81063*t81066*3.0-ccaa3*gamma_bb[index]*gcaa* \
                   t81062*t81063*t81091*t81066*t81084)*(1.0/4.0)-rho_b[index]*t81061*(t81099*(t81097*(tau_b[index]*2.0- \
                   (gamma_bb[index]*(1.0/4.0))/rho_b[index])*(1.0/2.0)-1.0)+1.0)*(ccaa2*t81010*t81103*t81062*2.0-ccaa1* \
                   t81010*t81105*t81062*2.0+ccaa4*t81102*t81063*t81064*t81065*1.2E1-ccaa2*t81063*t81064*t81065*t81087* \
                   2.0-ccaa4*t81064*t81065*t81076*t81096*(t81010*t81062*1.2E1+t81063*t81064*t81065*1.2E1+gamma_bb[index]* \
                   gcaa*t81062*t81066*2.4E1)+ccaa1*gamma_bb[index]*gcaa*t81062*t81066*1.0/(t81068*t81068*t81068)*2.0+ \
                   ccaa2*t81010*t81062*1.0/(t81071*t81071*t81071)*t81063*(t81083*t81083)*2.0+ccaa4*t81064*1.0/(t81082* \
                   t81082*t81082)*t81065*t81076*(t81077*t81077)*2.0+ccaa3*gamma_bb[index]*gcaa*t81104*t81062*t81066*6.0- \
                   ccaa2*gamma_bb[index]*t81010*t81062*t81083*t81087*4.0-ccaa4*gamma_bb[index]*t81063*t81064*t81065*t81077* \
                   t81096*8.0-ccaa3*gcaa*t81062*t81063*t81091*t81066*t81084*6.0-ccaa3*gamma_bb[index]*gcaa*t81062*t81063* \
                   t81066*t81084*(t81010*t81062*6.0+gamma_bb[index]*gcaa*t81062*t81066*6.0)+ccaa3*gamma_bb[index]*gcaa* \
                   t81062*t81063*(t81091*t81091)*t81066*1.0/(t81075*t81075*t81075)*2.0)+1.0/(k*k*k*k)*(mu_*mu_)*1.0/(rho_b[index]* \
                   rho_b[index]*rho_b[index])*t81106*1.0/pow(t81107,4.0/3.0)*1.0/pow(gamma_bb[index]*1.0/(k*k)*mu_*1.0/ \
                   (rho_b[index]*rho_b[index])*t81106*1.0/pow(t81107,2.0/3.0)*(1.0/4.0)+1.0,3.0)*(X-1.0)*((a_1*t81110) \
                   /t81114+a_2*t81111*1.0/(t81114*t81114)+a_4*t81112*1.0/(t81114*t81114*t81114*t81114)+a_8*t81113*1.0/ \
                   (t81114*t81114*t81114*t81114*t81114*t81114*t81114*t81114)+a_10*t81111*t81113*1.0/pow(t81114,1.0E1) \
                   +a_3*t81110*t81111*1.0/(t81114*t81114*t81114)+a_5*t81110*t81112*1.0/(t81114*t81114*t81114*t81114*t81114) \
                   +a_6*t81111*t81112*1.0/(t81114*t81114*t81114*t81114*t81114*t81114)+a_9*t81110*t81113*1.0/(t81114*t81114* \
                   t81114*t81114*t81114*t81114*t81114*t81114*t81114)+a_11*t81110*t81111*t81113*1.0/pow(t81114,1.1E1)+ \
                   a_7*t81110*t81111*t81112*1.0/(t81114*t81114*t81114*t81114*t81114*t81114*t81114)+1.0)*(1.0/8.0);
            } else if (rho_a[index] > cutoff_) {
                v_gamma_bb_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                double t82452 = 1.0/pow(rho_b[index],1.0/3.0);
                double t82453 = c*t82452;
                double t82454 = sqrt(t82453);
                double t82455 = pow(t82453,3.0/2.0);
                double t82456 = c*c;
                double t82457 = 1.0/pow(rho_b[index],2.0/3.0);
                double t82458 = 1.0/c0p;
                double t82459 = b1p*t82454;
                double t82460 = b3p*t82455;
                double t82461 = b4p*t82456*t82457;
                double t82462 = b2p*c*t82452;
                double t82463 = t82460+t82461+t82462+t82459;
                double t82464 = 1.0/t82463;
                double t82465 = t82464*t82458*(1.0/2.0);
                double t82466 = t82465+1.0;
                double t82467 = log(t82466);
                double t82468 = a1p*c*t82452;
                double t82469 = t82468+1.0;
                double t82470 = gcaa*gcaa;
                double t82471 = 1.0/pow(rho_b[index],1.6E1/3.0);
                double t82472 = 1.0/pow(rho_b[index],8.0/3.0);
                double t82473 = gamma_bb[index]*gamma_bb[index];
                double t82474 = t82470*t82470;
                double t82475 = 1.0/pow(rho_b[index],3.2E1/3.0);
                double t82476 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]);
                double t82477 = gamma_bb[index]*gcaa*t82472;
                double t82478 = t82477+1.0;
                double t82479 = gamma_bb[index]*gcaa*t82472*2.0;
                double t82480 = t82470*t82471*t82473;
                double t82481 = t82480+t82479+1.0;
                double t82482 = gamma_bb[index]*gcaa*t82472*3.0;
                double t82483 = gamma_bb[index]*gcaa*t82470*t82473*t82476;
                double t82484 = t82470*t82471*t82473*3.0;
                double t82485 = t82482+t82483+t82484+1.0;
                double t82486 = t82473*t82473;
                double t82502 = gcaa*t82472*4.0;
                double t82503 = gamma_bb[index]*t82470*t82471*1.2E1;
                double t82504 = gcaa*t82470*t82473*t82476*1.2E1;
                double t82505 = gamma_bb[index]*t82473*t82474*t82475*4.0;
                double t82487 = t82502+t82503+t82504+t82505;
                double t82488 = gamma_bb[index]*gcaa*t82472*4.0;
                double t82489 = gamma_bb[index]*gcaa*t82470*t82473*t82476*4.0;
                double t82490 = t82470*t82471*t82473*6.0;
                double t82491 = t82474*t82475*t82486;
                double t82492 = t82490+t82491+t82488+t82489+1.0;
                double t82495 = gcaa*t82472*2.0;
                double t82496 = gamma_bb[index]*t82470*t82471*2.0;
                double t82493 = t82495+t82496;
                double t82494 = 1.0/(t82485*t82485);
                double t82497 = 1.0/(t82481*t82481);
                double t82498 = gcaa*t82472*3.0;
                double t82499 = gamma_bb[index]*t82470*t82471*6.0;
                double t82500 = gcaa*t82470*t82473*t82476*3.0;
                double t82501 = t82500+t82498+t82499;
                double t82506 = 1.0/(t82492*t82492);
                double t82507 = 1.0/tau_b[index];
                double t82508 = tau_b[index]-1.0/1.0E20;
                double t82509 = ( (t82508 > 0.0) ?  1.0 : 0.0 ) ;
                double t82510 = pow(2.0,1.0/3.0);
                double t82511 = t82510*2.0;
                double t82512 = t82511-2.0;
                double t82513 = two_13*2.0;
                double t82514 = t82513-2.0;
                double t82515 = 1.0/t82514;
                double t82516 = 1.0/c0f;
                double t82517 = b1f*t82454;
                double t82518 = b3f*t82455;
                double t82519 = b4f*t82456*t82457;
                double t82520 = b2f*c*t82452;
                double t82521 = t82520+t82517+t82518+t82519;
                double t82522 = 1.0/t82521;
                double t82523 = t82522*t82516*(1.0/2.0);
                double t82524 = t82523+1.0;
                double t82525 = log(t82524);
                double t82526 = a1f*c*t82452;
                double t82527 = t82526+1.0;
                double t82528 = c0f*t82525*t82527*2.0;
                double t82529 = c0p*t82467*t82469*2.0;
                double t82530 = 1.0/t82492;
                double t82531 = 1.0/t82481;
                double t82532 = 1.0/t82485;
                double t82533 = 1.0/(t82478*t82478);
                double t82534 = 1.0/kp;
                double t82535 = rho_b[index]*2.0;
                double t82536 = pow(rho_b[index],5.0/3.0);
                double t82537 = C_k*t82507*t82536;
                double t82538 = t82537-1.0;
                double t82539 = t82538*t82538;
                double t82540 = t82539*t82539;
                double t82541 = t82540*t82540;
                double t82542 = t82537+1.0;
                v_gamma_bb_gamma_bb_[index] = t82507*t82509*(t82529+t82512*t82515*(t82528-t82529))*((ccaa1*gcaa*t82472) \
                   /t82478+ccaa2*gamma_bb[index]*t82531*t82470*t82471*2.0-ccaa1*gamma_bb[index]*t82470*t82533*t82471- \
                   ccaa2*t82470*t82471*t82473*t82493*t82497-ccaa4*t82506*t82474*t82475*t82486*t82487+ccaa4*gamma_bb[index]* \
                   t82530*t82473*t82474*t82475*4.0+ccaa3*gcaa*t82532*t82470*t82473*t82476*3.0-ccaa3*gamma_bb[index]*gcaa* \
                   t82501*t82470*t82473*t82476*t82494)*(1.0/4.0)-rho_b[index]*(t82509*(t82507*(tau_b[index]*2.0-(gamma_bb[index]* \
                   (1.0/4.0))/rho_b[index])*(1.0/2.0)-1.0)+1.0)*(t82529+t82512*t82515*(t82528-c0p*t82467*t82469*2.0)) \
                   *(ccaa2*t82531*t82470*t82471*2.0-ccaa1*t82470*t82533*t82471*2.0+ccaa4*t82530*t82473*t82474*t82475* \
                   1.2E1-ccaa2*t82473*t82474*t82475*t82497*2.0-ccaa4*t82506*t82474*t82475*t82486*(t82470*t82471*1.2E1+ \
                   t82473*t82474*t82475*1.2E1+gamma_bb[index]*gcaa*t82470*t82476*2.4E1)+ccaa1*gamma_bb[index]*gcaa*t82470* \
                   t82476*1.0/(t82478*t82478*t82478)*2.0+ccaa2*t82470*t82471*1.0/(t82481*t82481*t82481)*t82473*(t82493* \
                   t82493)*2.0+ccaa4*t82474*1.0/(t82492*t82492*t82492)*t82475*t82486*(t82487*t82487)*2.0+ccaa3*gamma_bb[index]* \
                   gcaa*t82532*t82470*t82476*6.0-ccaa2*gamma_bb[index]*t82470*t82471*t82493*t82497*4.0-ccaa4*gamma_bb[index]* \
                   t82506*t82473*t82474*t82475*t82487*8.0-ccaa3*gcaa*t82501*t82470*t82473*t82476*t82494*6.0-ccaa3*gamma_bb[index]* \
                   gcaa*t82470*t82473*t82476*t82494*(t82470*t82471*6.0+gamma_bb[index]*gcaa*t82470*t82476*6.0)+ccaa3* \
                   gamma_bb[index]*gcaa*(t82501*t82501)*t82470*t82473*t82476*1.0/(t82485*t82485*t82485)*2.0)+1.0/(k*k* \
                   k*k)*(mu_*mu_)*1.0/(rho_b[index]*rho_b[index]*rho_b[index])*t82534*1.0/pow(t82535,4.0/3.0)*1.0/pow(gamma_bb[index]* \
                   1.0/(k*k)*mu_*1.0/(rho_b[index]*rho_b[index])*t82534*1.0/pow(t82535,2.0/3.0)*(1.0/4.0)+1.0,3.0)*(X- \
                   1.0)*((a_1*t82538)/t82542+a_2*1.0/(t82542*t82542)*t82539+a_4*t82540*1.0/(t82542*t82542*t82542*t82542) \
                   +a_8*t82541*1.0/(t82542*t82542*t82542*t82542*t82542*t82542*t82542*t82542)+a_10*t82541*1.0/pow(t82542,1.0E1) \
                   *t82539+a_3*1.0/(t82542*t82542*t82542)*t82538*t82539+a_5*t82540*1.0/(t82542*t82542*t82542*t82542*t82542) \
                   *t82538+a_6*t82540*1.0/(t82542*t82542*t82542*t82542*t82542*t82542)*t82539+a_9*t82541*1.0/(t82542*t82542* \
                   t82542*t82542*t82542*t82542*t82542*t82542*t82542)*t82538+a_11*t82541*1.0/pow(t82542,1.1E1)*t82538* \
                   t82539+a_7*t82540*1.0/(t82542*t82542*t82542*t82542*t82542*t82542*t82542)*t82538*t82539+1.0)*(1.0/8.0) \
                   ;
            } else {
                v_gamma_bb_gamma_bb_[index] = 0.0;
            } 

        }                       
        if (is_meta_) {

            //V_rho_a_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t81116 = pow(rho_a[index],5.0/3.0);
                double t81117 = 1.0/(tau_a[index]*tau_a[index]);
                double t81118 = 1.0/tau_a[index];
                double t81119 = C_k*t81116*t81118;
                double t81120 = t81119+1.0;
                double t81121 = t81119-1.0;
                double t81122 = 1.0/(t81120*t81120);
                double t81123 = t81121*t81121;
                double t81124 = t81123*t81123;
                double t81125 = t81124*t81124;
                double t81126 = 1.0/pow(t81120,1.1E1);
                double t81127 = 1.0/(t81120*t81120*t81120);
                double t81128 = 1.0/(t81120*t81120*t81120*t81120);
                double t81129 = 1.0/(t81120*t81120*t81120*t81120*t81120);
                double t81130 = 1.0/(t81120*t81120*t81120*t81120*t81120*t81120);
                double t81131 = 1.0/(t81120*t81120*t81120*t81120*t81120*t81120*t81120);
                double t81132 = 1.0/(t81120*t81120*t81120*t81120*t81120*t81120*t81120*t81120);
                double t81133 = 1.0/(t81120*t81120*t81120*t81120*t81120*t81120*t81120*t81120*t81120);
                double t81134 = 1.0/pow(t81120,1.0E1);
                double t81135 = 1.0/(k*k);
                double t81136 = 1.0/kp;
                double t81137 = 1.0/(rho_a[index]*rho_a[index]);
                double t81138 = rho_a[index]*2.0;
                double t81139 = 1.0/pow(t81138,2.0/3.0);
                double t81140 = gamma_aa[index]*mu_*t81135*t81136*t81137*t81139*(1.0/4.0);
                double t81141 = t81140+1.0;
                double t81142 = 1.0/t81141;
                double t81143 = kp-kp*t81142+1.0;
                double t81144 = C_k*C_k;
                double t81145 = pow(rho_a[index],7.0/3.0);
                double t81146 = 1.0/(tau_a[index]*tau_a[index]*tau_a[index]);
                double t81147 = 1.0/t81120;
                double t81148 = 1.0/pow(t81120,1.2E1);
                double t81149 = pow(rho_a[index],2.0/3.0);
                double t81150 = C_k*a_1*t81116*t81117*t81147;
                double t81151 = C_k*a_2*t81121*t81122*t81116*t81117*2.0;
                double t81152 = C_k*a_10*t81121*t81116*t81125*t81134*t81117*1.0E1;
                double t81153 = C_k*a_11*t81123*t81116*t81125*t81117*t81126*1.1E1;
                double t81154 = C_k*a_3*t81123*t81116*t81117*t81127*3.0;
                double t81155 = C_k*a_4*t81121*t81123*t81116*t81117*t81128*4.0;
                double t81156 = C_k*a_5*t81124*t81116*t81117*t81129*5.0;
                double t81157 = C_k*a_6*t81121*t81130*t81124*t81116*t81117*6.0;
                double t81158 = C_k*a_7*t81131*t81123*t81124*t81116*t81117*7.0;
                double t81159 = C_k*a_8*t81121*t81123*t81132*t81124*t81116*t81117*8.0;
                double t81160 = C_k*a_9*t81133*t81116*t81125*t81117*9.0;
                double t81161 = t81150+t81151+t81160+t81152+t81153+t81154+t81155+t81156+t81157+t81158+t81159-C_k* \
                   a_1*t81121*t81122*t81116*t81117-C_k*a_2*t81123*t81116*t81117*t81127*2.0-C_k*a_4*t81124*t81116*t81117* \
                   t81129*4.0-C_k*a_8*t81133*t81116*t81125*t81117*8.0-C_k*a_10*t81123*t81116*t81125*t81117*t81126*1.0E1- \
                   C_k*a_3*t81121*t81123*t81116*t81117*t81128*3.0-C_k*a_5*t81121*t81130*t81124*t81116*t81117*5.0-C_k* \
                   a_6*t81131*t81123*t81124*t81116*t81117*6.0-C_k*a_9*t81121*t81116*t81125*t81134*t81117*9.0-C_k*a_11* \
                   t81121*t81123*t81116*t81125*t81117*t81148*1.1E1-C_k*a_7*t81121*t81123*t81132*t81124*t81116*t81117* \
                   7.0;
                double t81162 = 1.0/pow(rho_a[index],1.0/3.0);
                double t81163 = c*t81162;
                double t81164 = sqrt(t81163);
                double t81165 = pow(t81163,3.0/2.0);
                double t81166 = c*c;
                double t81167 = 1.0/pow(rho_a[index],2.0/3.0);
                double t81168 = 1.0/c0p;
                double t81169 = b1p*t81164;
                double t81170 = b3p*t81165;
                double t81171 = b4p*t81166*t81167;
                double t81172 = b2p*c*t81162;
                double t81173 = t81170+t81171+t81172+t81169;
                double t81174 = 1.0/t81173;
                double t81175 = t81174*t81168*(1.0/2.0);
                double t81176 = t81175+1.0;
                double t81177 = log(t81176);
                double t81178 = a1p*c*t81162;
                double t81179 = t81178+1.0;
                double t81180 = tau_a[index]-1.0/1.0E20;
                double t81181 = tau_a[index]*2.0;
                double t81182 = 1.0/rho_a[index];
                double t81213 = gamma_aa[index]*t81182*(1.0/4.0);
                double t81183 = -t81213+t81181;
                double t81184 = gamma_aa[index]*gamma_aa[index];
                double t81185 = gcaa*gcaa;
                double t81186 = t81184*t81184;
                double t81187 = t81185*t81185;
                double t81188 = 1.0/pow(rho_a[index],3.2E1/3.0);
                double t81189 = 1.0/pow(rho_a[index],8.0/3.0);
                double t81190 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t81191 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t81192 = pow(2.0,1.0/3.0);
                double t81193 = t81192*2.0;
                double t81194 = t81193-2.0;
                double t81195 = two_13*2.0;
                double t81196 = t81195-2.0;
                double t81197 = 1.0/t81196;
                double t81198 = 1.0/c0f;
                double t81199 = b1f*t81164;
                double t81200 = b3f*t81165;
                double t81201 = b4f*t81166*t81167;
                double t81202 = b2f*c*t81162;
                double t81203 = t81200+t81201+t81202+t81199;
                double t81204 = 1.0/t81203;
                double t81205 = t81204*t81198*(1.0/2.0);
                double t81206 = t81205+1.0;
                double t81207 = log(t81206);
                double t81208 = a1f*c*t81162;
                double t81209 = t81208+1.0;
                double t81210 = c0f*t81207*t81209*2.0;
                double t81211 = c0p*t81177*t81179*2.0;
                double t81212 = ( (t81180 > 0.0) ?  1.0 : 0.0 ) ;
                double t81243 = t81117*t81183*(1.0/2.0);
                double t81214 = -t81243+t81118;
                double t81215 = t81212*t81214;
                double t81216 = 0.0 ;
                double t81217 = t81118*t81183*(1.0/2.0);
                double t81218 = t81217-1.0;
                double t81219 = t81216*t81218;
                double t81220 = t81215+t81219;
                double t81221 = gamma_aa[index]*gcaa*t81189*4.0;
                double t81222 = gamma_aa[index]*gcaa*t81190*t81184*t81185*4.0;
                double t81223 = t81191*t81184*t81185*6.0;
                double t81224 = t81186*t81187*t81188;
                double t81225 = t81221+t81222+t81223+t81224+1.0;
                double t81226 = 1.0/t81225;
                double t81227 = gamma_aa[index]*gcaa*t81189;
                double t81228 = t81227+1.0;
                double t81229 = 1.0/t81228;
                double t81230 = gamma_aa[index]*gcaa*t81189*3.0;
                double t81231 = gamma_aa[index]*gcaa*t81190*t81184*t81185;
                double t81232 = t81191*t81184*t81185*3.0;
                double t81233 = t81230+t81231+t81232+1.0;
                double t81234 = 1.0/t81233;
                double t81235 = gamma_aa[index]*gcaa*t81189*2.0;
                double t81236 = t81191*t81184*t81185;
                double t81237 = t81235+t81236+1.0;
                double t81238 = 1.0/t81237;
                double t81239 = 1.0/pow(rho_a[index],1.9E1/3.0);
                double t81240 = 1.0/pow(rho_a[index],1.1E1/3.0);
                double t81241 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]*rho_a[index]);
                double t81242 = 1.0/pow(rho_a[index],3.5E1/3.0);
                double t81244 = 1.0/pow(rho_a[index],4.0/3.0);
                double t81245 = 1.0/pow(rho_a[index],5.0/3.0);
                double t81246 = 1.0/sqrt(t81163);
                double t81247 = 1.0/t81176;
                double t81248 = 1.0/(t81173*t81173);
                double t81249 = b4p*t81245*t81166*(2.0/3.0);
                double t81250 = b2p*c*t81244*(1.0/3.0);
                double t81251 = b1p*c*t81244*t81246*(1.0/6.0);
                double t81252 = b3p*c*t81244*t81164*(1.0/2.0);
                double t81253 = t81250+t81251+t81252+t81249;
                double t81254 = t81253*t81247*t81248*t81179;
                double t81255 = ccaa4*t81226*t81186*t81187*t81188;
                double t81256 = ccaa1*gamma_aa[index]*gcaa*t81229*t81189;
                double t81257 = ccaa3*gamma_aa[index]*gcaa*t81234*t81190*t81184*t81185;
                double t81258 = ccaa2*t81191*t81184*t81238*t81185;
                double t81259 = ccaa0+t81255+t81256+t81257+t81258;
                double t81260 = t81210-t81211;
                double t81261 = t81260*t81194*t81197;
                double t81262 = t81211+t81261;
                v_rho_a_tau_a_[index] = (X-1.0)*(t81143*t81161+rho_a[index]*t81143*(C_k*a_1*t81117*t81147*t81149* \
                   (5.0/3.0)-a_1*t81122*t81144*t81145*t81146*(1.0E1/3.0)+a_2*t81122*t81144*t81145*t81146*(1.0E1/3.0)+ \
                   a_1*t81121*t81144*t81127*t81145*t81146*(1.0E1/3.0)+a_10*t81125*t81134*t81144*t81145*t81146*1.5E2-a_2* \
                   t81121*t81144*t81127*t81145*t81146*(4.0E1/3.0)+a_2*t81123*t81144*t81145*t81128*t81146*1.0E1+a_3*t81121* \
                   t81144*t81127*t81145*t81146*1.0E1-a_3*t81123*t81144*t81145*t81128*t81146*3.0E1+a_4*t81130*t81124*t81144* \
                   t81145*t81146*(1.0E2/3.0)+a_4*t81123*t81144*t81145*t81128*t81146*2.0E1-a_5*t81130*t81124*t81144*t81145* \
                   t81146*(2.5E2/3.0)+a_6*t81130*t81124*t81144*t81145*t81146*5.0E1+a_8*t81125*t81134*t81144*t81145*t81146* \
                   1.2E2-a_9*t81125*t81134*t81144*t81145*t81146*2.7E2-C_k*a_1*t81121*t81122*t81117*t81149*(5.0/3.0)+C_k* \
                   a_2*t81121*t81122*t81117*t81149*(1.0E1/3.0)-C_k*a_2*t81123*t81117*t81127*t81149*(1.0E1/3.0)+C_k*a_3* \
                   t81123*t81117*t81127*t81149*5.0-C_k*a_4*t81124*t81117*t81129*t81149*(2.0E1/3.0)+C_k*a_5*t81124*t81117* \
                   t81129*t81149*(2.5E1/3.0)-C_k*a_8*t81133*t81125*t81117*t81149*(4.0E1/3.0)+C_k*a_9*t81133*t81125*t81117* \
                   t81149*1.5E1+C_k*a_10*t81121*t81125*t81134*t81117*t81149*(5.0E1/3.0)-C_k*a_10*t81123*t81125*t81117* \
                   t81126*t81149*(5.0E1/3.0)+C_k*a_11*t81123*t81125*t81117*t81126*t81149*(5.5E1/3.0)-C_k*a_3*t81121*t81123* \
                   t81117*t81128*t81149*5.0+C_k*a_4*t81121*t81123*t81117*t81128*t81149*(2.0E1/3.0)-C_k*a_5*t81121*t81130* \
                   t81124*t81117*t81149*(2.5E1/3.0)+C_k*a_6*t81121*t81130*t81124*t81117*t81149*1.0E1-C_k*a_6*t81131*t81123* \
                   t81124*t81117*t81149*1.0E1+C_k*a_7*t81131*t81123*t81124*t81117*t81149*(3.5E1/3.0)-C_k*a_9*t81121*t81125* \
                   t81134*t81117*t81149*1.5E1-a_10*t81121*t81125*t81126*t81144*t81145*t81146*(1.0E3/3.0)+a_11*t81121* \
                   t81125*t81126*t81144*t81145*t81146*(5.5E2/3.0)+a_10*t81123*t81125*t81144*t81145*t81146*t81148*(5.5E2/ \
                   3.0)-a_11*t81123*t81125*t81144*t81145*t81146*t81148*(1.21E3/3.0)+a_3*t81121*t81123*t81144*t81145*t81146* \
                   t81129*2.0E1-a_4*t81121*t81123*t81144*t81145*t81146*t81129*(1.6E2/3.0)+a_5*t81121*t81131*t81124*t81144* \
                   t81145*t81146*5.0E1+a_5*t81121*t81123*t81144*t81145*t81146*t81129*(1.0E2/3.0)-a_6*t81121*t81131*t81124* \
                   t81144*t81145*t81146*1.2E2+a_6*t81123*t81132*t81124*t81144*t81145*t81146*7.0E1+a_7*t81121*t81131*t81124* \
                   t81144*t81145*t81146*7.0E1-a_7*t81123*t81132*t81124*t81144*t81145*t81146*(4.9E2/3.0)+a_8*t81123*t81132* \
                   t81124*t81144*t81145*t81146*(2.8E2/3.0)+a_9*t81121*t81125*t81126*t81144*t81145*t81146*1.5E2+a_11*1.0/ \
                   pow(t81120,1.3E1)*t81121*t81123*t81125*t81144*t81145*t81146*2.2E2-C_k*a_11*t81121*t81123*t81125*t81117* \
                   t81148*t81149*(5.5E1/3.0)-C_k*a_7*t81121*t81123*t81132*t81124*t81117*t81149*(3.5E1/3.0)+C_k*a_8*t81121* \
                   t81123*t81132*t81124*t81117*t81149*(4.0E1/3.0)+a_7*t81121*t81123*t81124*t81133*t81144*t81145*t81146* \
                   (2.8E2/3.0)-a_8*t81121*t81123*t81124*t81133*t81144*t81145*t81146*(6.4E2/3.0)+a_9*t81121*t81123*t81124* \
                   t81133*t81144*t81145*t81146*1.2E2)-kp*rho_a[index]*1.0/(t81141*t81141)*t81161*(gamma_aa[index]*mu_* \
                   1.0/(rho_a[index]*rho_a[index]*rho_a[index])*t81135*t81136*t81139*(1.0/2.0)+gamma_aa[index]*mu_*t81135* \
                   t81136*t81137*1.0/pow(t81138,5.0/3.0)*(1.0/3.0)))-t81220*t81259*(t81211+t81194*t81197*(t81210-c0p* \
                   t81177*t81179*2.0))+rho_a[index]*t81220*t81259*(-t81254+t81194*t81197*(t81254-(1.0/(t81203*t81203) \
                   *t81209*(b2f*c*t81244*(1.0/3.0)+b4f*t81245*t81166*(2.0/3.0)+b1f*c*t81244*t81246*(1.0/6.0)+b3f*c*t81244* \
                   t81164*(1.0/2.0)))/t81206+a1f*c*c0f*t81207*t81244*(2.0/3.0)-a1p*c*c0p*t81244*t81177*(2.0/3.0))+a1p* \
                   c*c0p*t81244*t81177*(2.0/3.0))+rho_a[index]*t81220*t81262*(ccaa1*gamma_aa[index]*gcaa*t81240*t81229* \
                   (8.0/3.0)+ccaa4*t81242*t81226*t81186*t81187*(3.2E1/3.0)+ccaa2*t81184*t81238*t81185*t81239*(1.6E1/3.0) \
                   -ccaa1*1.0/(t81228*t81228)*t81184*t81185*t81239*(8.0/3.0)-ccaa2*t81191*1.0/(t81237*t81237)*t81184* \
                   t81185*(gamma_aa[index]*gcaa*t81240*(1.6E1/3.0)+t81184*t81185*t81239*(1.6E1/3.0))-ccaa4*1.0/(t81225* \
                   t81225)*t81186*t81187*t81188*(gamma_aa[index]*gcaa*t81240*(3.2E1/3.0)+t81242*t81186*t81187*(3.2E1/ \
                   3.0)+t81184*t81185*t81239*3.2E1+gamma_aa[index]*gcaa*t81241*t81184*t81185*3.2E1)+ccaa3*gamma_aa[index]* \
                   gcaa*t81241*t81234*t81184*t81185*8.0-ccaa3*gamma_aa[index]*gcaa*1.0/(t81233*t81233)*t81190*t81184* \
                   t81185*(gamma_aa[index]*gcaa*t81240*8.0+t81184*t81185*t81239*1.6E1+gamma_aa[index]*gcaa*t81241*t81184* \
                   t81185*8.0))+gamma_aa[index]*t81212*t81117*t81262*t81182*t81259*(1.0/8.0)-gamma_aa[index]*t81216*t81118* \
                   t81262*t81182*t81259*(1.0/8.0);
            } else if (rho_a[index] > cutoff_) {
                double t83671 = 1.0/pow(rho_a[index],1.0/3.0);
                double t83672 = c*t83671;
                double t83673 = sqrt(t83672);
                double t83674 = pow(t83672,3.0/2.0);
                double t83675 = c*c;
                double t83676 = 1.0/pow(rho_a[index],2.0/3.0);
                double t83677 = 1.0/c0p;
                double t83678 = b1p*t83673;
                double t83679 = b3p*t83674;
                double t83680 = b4p*t83675*t83676;
                double t83681 = b2p*c*t83671;
                double t83682 = t83680+t83681+t83678+t83679;
                double t83683 = 1.0/t83682;
                double t83684 = t83683*t83677*(1.0/2.0);
                double t83685 = t83684+1.0;
                double t83686 = log(t83685);
                double t83687 = a1p*c*t83671;
                double t83688 = t83687+1.0;
                double t83689 = tau_a[index]-1.0/1.0E20;
                double t83690 = 1.0/tau_a[index];
                double t83691 = tau_a[index]*2.0;
                double t83692 = 1.0/rho_a[index];
                double t83741 = gamma_aa[index]*t83692*(1.0/4.0);
                double t83693 = -t83741+t83691;
                double t83694 = gamma_aa[index]*gamma_aa[index];
                double t83695 = gcaa*gcaa;
                double t83696 = t83694*t83694;
                double t83697 = t83695*t83695;
                double t83698 = 1.0/pow(rho_a[index],3.2E1/3.0);
                double t83699 = 1.0/pow(rho_a[index],8.0/3.0);
                double t83700 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t83701 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t83702 = 1.0/(tau_a[index]*tau_a[index]);
                double t83703 = pow(rho_a[index],5.0/3.0);
                double t83704 = C_k*t83703*t83690;
                double t83705 = t83704+1.0;
                double t83706 = t83704-1.0;
                double t83707 = 1.0/(t83705*t83705);
                double t83708 = t83706*t83706;
                double t83709 = t83708*t83708;
                double t83710 = t83709*t83709;
                double t83711 = 1.0/pow(t83705,1.1E1);
                double t83712 = 1.0/(t83705*t83705*t83705);
                double t83713 = 1.0/(t83705*t83705*t83705*t83705);
                double t83714 = 1.0/(t83705*t83705*t83705*t83705*t83705);
                double t83715 = 1.0/(t83705*t83705*t83705*t83705*t83705*t83705);
                double t83716 = 1.0/(t83705*t83705*t83705*t83705*t83705*t83705*t83705);
                double t83717 = 1.0/(t83705*t83705*t83705*t83705*t83705*t83705*t83705*t83705);
                double t83718 = 1.0/(t83705*t83705*t83705*t83705*t83705*t83705*t83705*t83705*t83705);
                double t83719 = 1.0/pow(t83705,1.0E1);
                double t83720 = pow(2.0,1.0/3.0);
                double t83721 = t83720*2.0;
                double t83722 = t83721-2.0;
                double t83723 = two_13*2.0;
                double t83724 = t83723-2.0;
                double t83725 = 1.0/t83724;
                double t83726 = 1.0/c0f;
                double t83727 = b1f*t83673;
                double t83728 = b3f*t83674;
                double t83729 = b4f*t83675*t83676;
                double t83730 = b2f*c*t83671;
                double t83731 = t83730+t83727+t83728+t83729;
                double t83732 = 1.0/t83731;
                double t83733 = t83732*t83726*(1.0/2.0);
                double t83734 = t83733+1.0;
                double t83735 = log(t83734);
                double t83736 = a1f*c*t83671;
                double t83737 = t83736+1.0;
                double t83738 = c0f*t83735*t83737*2.0;
                double t83739 = c0p*t83686*t83688*2.0;
                double t83740 = ( (t83689 > 0.0) ?  1.0 : 0.0 ) ;
                double t83771 = t83702*t83693*(1.0/2.0);
                double t83742 = t83690-t83771;
                double t83743 = t83740*t83742;
                double t83744 = 0.0 ;
                double t83745 = t83690*t83693*(1.0/2.0);
                double t83746 = t83745-1.0;
                double t83747 = t83744*t83746;
                double t83748 = t83743+t83747;
                double t83749 = gamma_aa[index]*gcaa*t83699*4.0;
                double t83750 = gamma_aa[index]*gcaa*t83700*t83694*t83695*4.0;
                double t83751 = t83701*t83694*t83695*6.0;
                double t83752 = t83696*t83697*t83698;
                double t83753 = t83750+t83751+t83752+t83749+1.0;
                double t83754 = 1.0/t83753;
                double t83755 = gamma_aa[index]*gcaa*t83699;
                double t83756 = t83755+1.0;
                double t83757 = 1.0/t83756;
                double t83758 = gamma_aa[index]*gcaa*t83699*3.0;
                double t83759 = gamma_aa[index]*gcaa*t83700*t83694*t83695;
                double t83760 = t83701*t83694*t83695*3.0;
                double t83761 = t83760+t83758+t83759+1.0;
                double t83762 = 1.0/t83761;
                double t83763 = gamma_aa[index]*gcaa*t83699*2.0;
                double t83764 = t83701*t83694*t83695;
                double t83765 = t83763+t83764+1.0;
                double t83766 = 1.0/t83765;
                double t83767 = 1.0/pow(rho_a[index],1.9E1/3.0);
                double t83768 = 1.0/pow(rho_a[index],1.1E1/3.0);
                double t83769 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]*rho_a[index]);
                double t83770 = 1.0/pow(rho_a[index],3.5E1/3.0);
                double t83772 = 1.0/pow(rho_a[index],4.0/3.0);
                double t83773 = 1.0/pow(rho_a[index],5.0/3.0);
                double t83774 = 1.0/sqrt(t83672);
                double t83775 = 1.0/t83685;
                double t83776 = 1.0/(t83682*t83682);
                double t83777 = b4p*t83773*t83675*(2.0/3.0);
                double t83778 = b2p*c*t83772*(1.0/3.0);
                double t83779 = b1p*c*t83772*t83774*(1.0/6.0);
                double t83780 = b3p*c*t83673*t83772*(1.0/2.0);
                double t83781 = t83780+t83777+t83778+t83779;
                double t83782 = t83781*t83775*t83776*t83688;
                double t83783 = ccaa4*t83754*t83696*t83697*t83698;
                double t83784 = ccaa1*gamma_aa[index]*gcaa*t83757*t83699;
                double t83785 = ccaa3*gamma_aa[index]*gcaa*t83700*t83762*t83694*t83695;
                double t83786 = ccaa2*t83701*t83694*t83766*t83695;
                double t83787 = ccaa0+t83783+t83784+t83785+t83786;
                double t83788 = X-1.0;
                double t83789 = 1.0/(k*k);
                double t83790 = 1.0/kp;
                double t83791 = 1.0/(rho_a[index]*rho_a[index]);
                double t83792 = rho_a[index]*2.0;
                double t83793 = 1.0/pow(t83792,2.0/3.0);
                double t83794 = gamma_aa[index]*mu_*t83790*t83791*t83793*t83789*(1.0/4.0);
                double t83795 = t83794+1.0;
                double t83796 = 1.0/t83795;
                double t83797 = kp-kp*t83796+1.0;
                double t83798 = C_k*C_k;
                double t83799 = pow(rho_a[index],7.0/3.0);
                double t83800 = 1.0/(tau_a[index]*tau_a[index]*tau_a[index]);
                double t83801 = 1.0/t83705;
                double t83802 = 1.0/pow(t83705,1.2E1);
                double t83803 = pow(rho_a[index],2.0/3.0);
                double t83804 = t83738-t83739;
                double t83805 = t83722*t83804*t83725;
                double t83806 = t83805+t83739;
                double t83807 = C_k*a_1*t83702*t83801*t83703;
                double t83808 = C_k*a_2*t83702*t83703*t83706*t83707*2.0;
                double t83809 = C_k*a_10*t83710*t83702*t83703*t83706*t83719*1.0E1;
                double t83810 = C_k*a_11*t83710*t83702*t83711*t83703*t83708*1.1E1;
                double t83811 = C_k*a_3*t83702*t83703*t83712*t83708*3.0;
                double t83812 = C_k*a_4*t83702*t83703*t83713*t83706*t83708*4.0;
                double t83813 = C_k*a_5*t83702*t83703*t83714*t83709*5.0;
                double t83814 = C_k*a_6*t83702*t83703*t83706*t83715*t83709*6.0;
                double t83815 = C_k*a_7*t83702*t83703*t83716*t83708*t83709*7.0;
                double t83816 = C_k*a_8*t83702*t83703*t83706*t83708*t83717*t83709*8.0;
                double t83817 = C_k*a_9*t83710*t83702*t83703*t83718*9.0;
                double t83818 = t83810+t83811+t83812+t83813+t83814+t83815+t83807+t83816+t83808+t83817+t83809-C_k* \
                   a_1*t83702*t83703*t83706*t83707-C_k*a_2*t83702*t83703*t83712*t83708*2.0-C_k*a_4*t83702*t83703*t83714* \
                   t83709*4.0-C_k*a_8*t83710*t83702*t83703*t83718*8.0-C_k*a_10*t83710*t83702*t83711*t83703*t83708*1.0E1- \
                   C_k*a_3*t83702*t83703*t83713*t83706*t83708*3.0-C_k*a_5*t83702*t83703*t83706*t83715*t83709*5.0-C_k* \
                   a_6*t83702*t83703*t83716*t83708*t83709*6.0-C_k*a_9*t83710*t83702*t83703*t83706*t83719*9.0-C_k*a_11* \
                   t83710*t83702*t83703*t83802*t83706*t83708*1.1E1-C_k*a_7*t83702*t83703*t83706*t83708*t83717*t83709* \
                   7.0;
                v_rho_a_tau_a_[index] = t83818*t83788*t83797-t83748*t83787*(t83739+t83722*t83725*(t83738-c0p*t83686* \
                   t83688*2.0))+rho_a[index]*t83788*t83797*(C_k*a_1*t83702*t83801*t83803*(5.0/3.0)-a_1*t83800*t83707* \
                   t83798*t83799*(1.0E1/3.0)+a_2*t83800*t83707*t83798*t83799*(1.0E1/3.0)+a_1*t83800*t83712*t83706*t83798* \
                   t83799*(1.0E1/3.0)+a_10*t83710*t83800*t83719*t83798*t83799*1.5E2-a_2*t83800*t83712*t83706*t83798*t83799* \
                   (4.0E1/3.0)+a_2*t83800*t83713*t83708*t83798*t83799*1.0E1+a_3*t83800*t83712*t83706*t83798*t83799*1.0E1- \
                   a_3*t83800*t83713*t83708*t83798*t83799*3.0E1+a_4*t83800*t83713*t83708*t83798*t83799*2.0E1+a_4*t83800* \
                   t83715*t83709*t83798*t83799*(1.0E2/3.0)-a_5*t83800*t83715*t83709*t83798*t83799*(2.5E2/3.0)+a_6*t83800* \
                   t83715*t83709*t83798*t83799*5.0E1+a_8*t83710*t83800*t83719*t83798*t83799*1.2E2-a_9*t83710*t83800*t83719* \
                   t83798*t83799*2.7E2-C_k*a_1*t83702*t83803*t83706*t83707*(5.0/3.0)-C_k*a_2*t83702*t83712*t83803*t83708* \
                   (1.0E1/3.0)+C_k*a_2*t83702*t83803*t83706*t83707*(1.0E1/3.0)+C_k*a_3*t83702*t83712*t83803*t83708*5.0- \
                   C_k*a_4*t83702*t83803*t83714*t83709*(2.0E1/3.0)+C_k*a_5*t83702*t83803*t83714*t83709*(2.5E1/3.0)-C_k* \
                   a_8*t83710*t83702*t83803*t83718*(4.0E1/3.0)+C_k*a_9*t83710*t83702*t83803*t83718*1.5E1-C_k*a_10*t83710* \
                   t83702*t83711*t83803*t83708*(5.0E1/3.0)+C_k*a_11*t83710*t83702*t83711*t83803*t83708*(5.5E1/3.0)+C_k* \
                   a_10*t83710*t83702*t83803*t83706*t83719*(5.0E1/3.0)-C_k*a_3*t83702*t83713*t83803*t83706*t83708*5.0+ \
                   C_k*a_4*t83702*t83713*t83803*t83706*t83708*(2.0E1/3.0)-C_k*a_5*t83702*t83803*t83706*t83715*t83709* \
                   (2.5E1/3.0)+C_k*a_6*t83702*t83803*t83706*t83715*t83709*1.0E1-C_k*a_6*t83702*t83803*t83716*t83708*t83709* \
                   1.0E1+C_k*a_7*t83702*t83803*t83716*t83708*t83709*(3.5E1/3.0)-C_k*a_9*t83710*t83702*t83803*t83706*t83719* \
                   1.5E1-a_10*t83710*t83800*t83711*t83706*t83798*t83799*(1.0E3/3.0)+a_11*t83710*t83800*t83711*t83706* \
                   t83798*t83799*(5.5E2/3.0)+a_10*t83710*t83800*t83802*t83708*t83798*t83799*(5.5E2/3.0)-a_11*t83710*t83800* \
                   t83802*t83708*t83798*t83799*(1.21E3/3.0)+a_3*t83800*t83714*t83706*t83708*t83798*t83799*2.0E1-a_4*t83800* \
                   t83714*t83706*t83708*t83798*t83799*(1.6E2/3.0)+a_5*t83800*t83714*t83706*t83708*t83798*t83799*(1.0E2/ \
                   3.0)+a_5*t83800*t83706*t83716*t83709*t83798*t83799*5.0E1-a_6*t83800*t83706*t83716*t83709*t83798*t83799* \
                   1.2E2+a_6*t83800*t83708*t83717*t83709*t83798*t83799*7.0E1+a_7*t83800*t83706*t83716*t83709*t83798*t83799* \
                   7.0E1-a_7*t83800*t83708*t83717*t83709*t83798*t83799*(4.9E2/3.0)+a_8*t83800*t83708*t83717*t83709*t83798* \
                   t83799*(2.8E2/3.0)+a_9*t83710*t83800*t83711*t83706*t83798*t83799*1.5E2+a_11*t83710*t83800*1.0/pow(t83705,1.3E1) \
                   *t83706*t83708*t83798*t83799*2.2E2-C_k*a_11*t83710*t83702*t83802*t83803*t83706*t83708*(5.5E1/3.0)- \
                   C_k*a_7*t83702*t83803*t83706*t83708*t83717*t83709*(3.5E1/3.0)+C_k*a_8*t83702*t83803*t83706*t83708* \
                   t83717*t83709*(4.0E1/3.0)+a_7*t83800*t83706*t83708*t83709*t83718*t83798*t83799*(2.8E2/3.0)-a_8*t83800* \
                   t83706*t83708*t83709*t83718*t83798*t83799*(6.4E2/3.0)+a_9*t83800*t83706*t83708*t83709*t83718*t83798* \
                   t83799*1.2E2)+rho_a[index]*t83748*t83787*(-t83782+t83722*t83725*(t83782-(1.0/(t83731*t83731)*t83737* \
                   (b2f*c*t83772*(1.0/3.0)+b4f*t83773*t83675*(2.0/3.0)+b1f*c*t83772*t83774*(1.0/6.0)+b3f*c*t83673*t83772* \
                   (1.0/2.0)))/t83734+a1f*c*c0f*t83735*t83772*(2.0/3.0)-a1p*c*c0p*t83772*t83686*(2.0/3.0))+a1p*c*c0p* \
                   t83772*t83686*(2.0/3.0))+rho_a[index]*t83806*t83748*(ccaa1*gamma_aa[index]*gcaa*t83757*t83768*(8.0/ \
                   3.0)+ccaa4*t83770*t83754*t83696*t83697*(3.2E1/3.0)+ccaa2*t83694*t83766*t83695*t83767*(1.6E1/3.0)-ccaa1* \
                   1.0/(t83756*t83756)*t83694*t83695*t83767*(8.0/3.0)-ccaa2*t83701*1.0/(t83765*t83765)*t83694*t83695* \
                   (gamma_aa[index]*gcaa*t83768*(1.6E1/3.0)+t83694*t83695*t83767*(1.6E1/3.0))-ccaa4*1.0/(t83753*t83753) \
                   *t83696*t83697*t83698*(gamma_aa[index]*gcaa*t83768*(3.2E1/3.0)+t83770*t83696*t83697*(3.2E1/3.0)+t83694* \
                   t83695*t83767*3.2E1+gamma_aa[index]*gcaa*t83694*t83695*t83769*3.2E1)+ccaa3*gamma_aa[index]*gcaa*t83762* \
                   t83694*t83695*t83769*8.0-ccaa3*gamma_aa[index]*gcaa*t83700*1.0/(t83761*t83761)*t83694*t83695*(gamma_aa[index]* \
                   gcaa*t83768*8.0+t83694*t83695*t83767*1.6E1+gamma_aa[index]*gcaa*t83694*t83695*t83769*8.0))+gamma_aa[index]* \
                   t83702*t83740*t83806*t83692*t83787*(1.0/8.0)-gamma_aa[index]*t83806*t83690*t83744*t83692*t83787*(1.0/ \
                   8.0)-kp*rho_a[index]*t83818*1.0/(t83795*t83795)*t83788*(gamma_aa[index]*mu_*1.0/(rho_a[index]*rho_a[index]* \
                   rho_a[index])*t83790*t83793*t83789*(1.0/2.0)+gamma_aa[index]*mu_*t83790*t83791*1.0/pow(t83792,5.0/ \
                   3.0)*t83789*(1.0/3.0));
            } else if (rho_b[index] > cutoff_) {
                v_rho_a_tau_a_[index] = 0.0;
            } else {
                v_rho_a_tau_a_[index] = 0.0;
            } 

            //V_rho_a_tau_b
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_a_tau_b_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_a_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_a_tau_b_[index] = 0.0;
            } else {
                v_rho_a_tau_b_[index] = 0.0;
            } 

            //V_rho_b_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_b_tau_a_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_b_tau_a_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_b_tau_a_[index] = 0.0;
            } else {
                v_rho_b_tau_a_[index] = 0.0;
            } 

            //V_rho_b_tau_b
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t81266 = pow(rho_b[index],5.0/3.0);
                double t81267 = 1.0/(tau_b[index]*tau_b[index]);
                double t81268 = 1.0/tau_b[index];
                double t81269 = C_k*t81266*t81268;
                double t81270 = t81269+1.0;
                double t81271 = t81269-1.0;
                double t81272 = 1.0/(t81270*t81270);
                double t81273 = t81271*t81271;
                double t81274 = t81273*t81273;
                double t81275 = t81274*t81274;
                double t81276 = 1.0/pow(t81270,1.1E1);
                double t81277 = 1.0/(t81270*t81270*t81270);
                double t81278 = 1.0/(t81270*t81270*t81270*t81270);
                double t81279 = 1.0/(t81270*t81270*t81270*t81270*t81270);
                double t81280 = 1.0/(t81270*t81270*t81270*t81270*t81270*t81270);
                double t81281 = 1.0/(t81270*t81270*t81270*t81270*t81270*t81270*t81270);
                double t81282 = 1.0/(t81270*t81270*t81270*t81270*t81270*t81270*t81270*t81270);
                double t81283 = 1.0/(t81270*t81270*t81270*t81270*t81270*t81270*t81270*t81270*t81270);
                double t81284 = 1.0/pow(t81270,1.0E1);
                double t81285 = 1.0/(k*k);
                double t81286 = 1.0/kp;
                double t81287 = 1.0/(rho_b[index]*rho_b[index]);
                double t81288 = rho_b[index]*2.0;
                double t81289 = 1.0/pow(t81288,2.0/3.0);
                double t81290 = gamma_bb[index]*mu_*t81285*t81286*t81287*t81289*(1.0/4.0);
                double t81291 = t81290+1.0;
                double t81292 = 1.0/t81291;
                double t81293 = kp-kp*t81292+1.0;
                double t81294 = C_k*C_k;
                double t81295 = pow(rho_b[index],7.0/3.0);
                double t81296 = 1.0/(tau_b[index]*tau_b[index]*tau_b[index]);
                double t81297 = 1.0/t81270;
                double t81298 = 1.0/pow(t81270,1.2E1);
                double t81299 = pow(rho_b[index],2.0/3.0);
                double t81300 = C_k*a_1*t81266*t81267*t81297;
                double t81301 = C_k*a_2*t81271*t81272*t81266*t81267*2.0;
                double t81302 = C_k*a_10*t81271*t81266*t81275*t81284*t81267*1.0E1;
                double t81303 = C_k*a_11*t81273*t81266*t81275*t81267*t81276*1.1E1;
                double t81304 = C_k*a_3*t81273*t81266*t81267*t81277*3.0;
                double t81305 = C_k*a_4*t81271*t81273*t81266*t81267*t81278*4.0;
                double t81306 = C_k*a_5*t81274*t81266*t81267*t81279*5.0;
                double t81307 = C_k*a_6*t81271*t81280*t81274*t81266*t81267*6.0;
                double t81308 = C_k*a_7*t81281*t81273*t81274*t81266*t81267*7.0;
                double t81309 = C_k*a_8*t81271*t81273*t81282*t81274*t81266*t81267*8.0;
                double t81310 = C_k*a_9*t81283*t81266*t81275*t81267*9.0;
                double t81311 = t81300+t81301+t81310+t81302+t81303+t81304+t81305+t81306+t81307+t81308+t81309-C_k* \
                   a_1*t81271*t81272*t81266*t81267-C_k*a_2*t81273*t81266*t81267*t81277*2.0-C_k*a_4*t81274*t81266*t81267* \
                   t81279*4.0-C_k*a_8*t81283*t81266*t81275*t81267*8.0-C_k*a_10*t81273*t81266*t81275*t81267*t81276*1.0E1- \
                   C_k*a_3*t81271*t81273*t81266*t81267*t81278*3.0-C_k*a_5*t81271*t81280*t81274*t81266*t81267*5.0-C_k* \
                   a_6*t81281*t81273*t81274*t81266*t81267*6.0-C_k*a_9*t81271*t81266*t81275*t81284*t81267*9.0-C_k*a_11* \
                   t81271*t81273*t81266*t81275*t81267*t81298*1.1E1-C_k*a_7*t81271*t81273*t81282*t81274*t81266*t81267* \
                   7.0;
                double t81312 = 1.0/pow(rho_b[index],1.0/3.0);
                double t81313 = c*t81312;
                double t81314 = sqrt(t81313);
                double t81315 = pow(t81313,3.0/2.0);
                double t81316 = c*c;
                double t81317 = 1.0/pow(rho_b[index],2.0/3.0);
                double t81318 = 1.0/c0p;
                double t81319 = b1p*t81314;
                double t81320 = b3p*t81315;
                double t81321 = b4p*t81316*t81317;
                double t81322 = b2p*c*t81312;
                double t81323 = t81320+t81321+t81322+t81319;
                double t81324 = 1.0/t81323;
                double t81325 = t81324*t81318*(1.0/2.0);
                double t81326 = t81325+1.0;
                double t81327 = log(t81326);
                double t81328 = a1p*c*t81312;
                double t81329 = t81328+1.0;
                double t81330 = tau_b[index]-1.0/1.0E20;
                double t81331 = tau_b[index]*2.0;
                double t81332 = 1.0/rho_b[index];
                double t81363 = gamma_bb[index]*t81332*(1.0/4.0);
                double t81333 = t81331-t81363;
                double t81334 = gamma_bb[index]*gamma_bb[index];
                double t81335 = gcaa*gcaa;
                double t81336 = t81334*t81334;
                double t81337 = t81335*t81335;
                double t81338 = 1.0/pow(rho_b[index],3.2E1/3.0);
                double t81339 = 1.0/pow(rho_b[index],8.0/3.0);
                double t81340 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]);
                double t81341 = 1.0/pow(rho_b[index],1.6E1/3.0);
                double t81342 = pow(2.0,1.0/3.0);
                double t81343 = t81342*2.0;
                double t81344 = t81343-2.0;
                double t81345 = two_13*2.0;
                double t81346 = t81345-2.0;
                double t81347 = 1.0/t81346;
                double t81348 = 1.0/c0f;
                double t81349 = b1f*t81314;
                double t81350 = b3f*t81315;
                double t81351 = b4f*t81316*t81317;
                double t81352 = b2f*c*t81312;
                double t81353 = t81350+t81351+t81352+t81349;
                double t81354 = 1.0/t81353;
                double t81355 = t81354*t81348*(1.0/2.0);
                double t81356 = t81355+1.0;
                double t81357 = log(t81356);
                double t81358 = a1f*c*t81312;
                double t81359 = t81358+1.0;
                double t81360 = c0f*t81357*t81359*2.0;
                double t81361 = c0p*t81327*t81329*2.0;
                double t81362 = ( (t81330 > 0.0) ?  1.0 : 0.0 ) ;
                double t81393 = t81333*t81267*(1.0/2.0);
                double t81364 = -t81393+t81268;
                double t81365 = t81362*t81364;
                double t81366 = 0.0 ;
                double t81367 = t81333*t81268*(1.0/2.0);
                double t81368 = t81367-1.0;
                double t81369 = t81366*t81368;
                double t81370 = t81365+t81369;
                double t81371 = gamma_bb[index]*gcaa*t81339*4.0;
                double t81372 = gamma_bb[index]*gcaa*t81340*t81334*t81335*4.0;
                double t81373 = t81341*t81334*t81335*6.0;
                double t81374 = t81336*t81337*t81338;
                double t81375 = t81371+t81372+t81373+t81374+1.0;
                double t81376 = 1.0/t81375;
                double t81377 = gamma_bb[index]*gcaa*t81339;
                double t81378 = t81377+1.0;
                double t81379 = 1.0/t81378;
                double t81380 = gamma_bb[index]*gcaa*t81339*3.0;
                double t81381 = gamma_bb[index]*gcaa*t81340*t81334*t81335;
                double t81382 = t81341*t81334*t81335*3.0;
                double t81383 = t81380+t81381+t81382+1.0;
                double t81384 = 1.0/t81383;
                double t81385 = gamma_bb[index]*gcaa*t81339*2.0;
                double t81386 = t81341*t81334*t81335;
                double t81387 = t81385+t81386+1.0;
                double t81388 = 1.0/t81387;
                double t81389 = 1.0/pow(rho_b[index],1.9E1/3.0);
                double t81390 = 1.0/pow(rho_b[index],1.1E1/3.0);
                double t81391 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]*rho_b[index]);
                double t81392 = 1.0/pow(rho_b[index],3.5E1/3.0);
                double t81394 = 1.0/pow(rho_b[index],4.0/3.0);
                double t81395 = 1.0/pow(rho_b[index],5.0/3.0);
                double t81396 = 1.0/sqrt(t81313);
                double t81397 = 1.0/t81326;
                double t81398 = 1.0/(t81323*t81323);
                double t81399 = b4p*t81316*t81395*(2.0/3.0);
                double t81400 = b2p*c*t81394*(1.0/3.0);
                double t81401 = b1p*c*t81394*t81396*(1.0/6.0);
                double t81402 = b3p*c*t81314*t81394*(1.0/2.0);
                double t81403 = t81400+t81401+t81402+t81399;
                double t81404 = t81403*t81329*t81397*t81398;
                double t81405 = ccaa4*t81336*t81337*t81338*t81376;
                double t81406 = ccaa1*gamma_bb[index]*gcaa*t81339*t81379;
                double t81407 = ccaa3*gamma_bb[index]*gcaa*t81340*t81334*t81335*t81384;
                double t81408 = ccaa2*t81341*t81334*t81335*t81388;
                double t81409 = ccaa0+t81405+t81406+t81407+t81408;
                double t81410 = t81360-t81361;
                double t81411 = t81410*t81344*t81347;
                double t81412 = t81411+t81361;
                v_rho_b_tau_b_[index] = (X-1.0)*(t81311*t81293+rho_b[index]*t81293*(C_k*a_1*t81267*t81297*t81299* \
                   (5.0/3.0)-a_1*t81272*t81294*t81295*t81296*(1.0E1/3.0)+a_2*t81272*t81294*t81295*t81296*(1.0E1/3.0)+ \
                   a_1*t81271*t81294*t81277*t81295*t81296*(1.0E1/3.0)+a_10*t81275*t81284*t81294*t81295*t81296*1.5E2-a_2* \
                   t81271*t81294*t81277*t81295*t81296*(4.0E1/3.0)+a_2*t81273*t81294*t81295*t81278*t81296*1.0E1+a_3*t81271* \
                   t81294*t81277*t81295*t81296*1.0E1-a_3*t81273*t81294*t81295*t81278*t81296*3.0E1+a_4*t81280*t81274*t81294* \
                   t81295*t81296*(1.0E2/3.0)+a_4*t81273*t81294*t81295*t81278*t81296*2.0E1-a_5*t81280*t81274*t81294*t81295* \
                   t81296*(2.5E2/3.0)+a_6*t81280*t81274*t81294*t81295*t81296*5.0E1+a_8*t81275*t81284*t81294*t81295*t81296* \
                   1.2E2-a_9*t81275*t81284*t81294*t81295*t81296*2.7E2-C_k*a_1*t81271*t81272*t81267*t81299*(5.0/3.0)+C_k* \
                   a_2*t81271*t81272*t81267*t81299*(1.0E1/3.0)-C_k*a_2*t81273*t81267*t81277*t81299*(1.0E1/3.0)+C_k*a_3* \
                   t81273*t81267*t81277*t81299*5.0-C_k*a_4*t81274*t81267*t81279*t81299*(2.0E1/3.0)+C_k*a_5*t81274*t81267* \
                   t81279*t81299*(2.5E1/3.0)-C_k*a_8*t81283*t81275*t81267*t81299*(4.0E1/3.0)+C_k*a_9*t81283*t81275*t81267* \
                   t81299*1.5E1+C_k*a_10*t81271*t81275*t81284*t81267*t81299*(5.0E1/3.0)-C_k*a_10*t81273*t81275*t81267* \
                   t81276*t81299*(5.0E1/3.0)+C_k*a_11*t81273*t81275*t81267*t81276*t81299*(5.5E1/3.0)-C_k*a_3*t81271*t81273* \
                   t81267*t81278*t81299*5.0+C_k*a_4*t81271*t81273*t81267*t81278*t81299*(2.0E1/3.0)-C_k*a_5*t81271*t81280* \
                   t81274*t81267*t81299*(2.5E1/3.0)+C_k*a_6*t81271*t81280*t81274*t81267*t81299*1.0E1-C_k*a_6*t81281*t81273* \
                   t81274*t81267*t81299*1.0E1+C_k*a_7*t81281*t81273*t81274*t81267*t81299*(3.5E1/3.0)-C_k*a_9*t81271*t81275* \
                   t81284*t81267*t81299*1.5E1-a_10*t81271*t81275*t81276*t81294*t81295*t81296*(1.0E3/3.0)+a_11*t81271* \
                   t81275*t81276*t81294*t81295*t81296*(5.5E2/3.0)+a_10*t81273*t81275*t81294*t81295*t81296*t81298*(5.5E2/ \
                   3.0)-a_11*t81273*t81275*t81294*t81295*t81296*t81298*(1.21E3/3.0)+a_3*t81271*t81273*t81294*t81295*t81296* \
                   t81279*2.0E1-a_4*t81271*t81273*t81294*t81295*t81296*t81279*(1.6E2/3.0)+a_5*t81271*t81281*t81274*t81294* \
                   t81295*t81296*5.0E1+a_5*t81271*t81273*t81294*t81295*t81296*t81279*(1.0E2/3.0)-a_6*t81271*t81281*t81274* \
                   t81294*t81295*t81296*1.2E2+a_6*t81273*t81282*t81274*t81294*t81295*t81296*7.0E1+a_7*t81271*t81281*t81274* \
                   t81294*t81295*t81296*7.0E1-a_7*t81273*t81282*t81274*t81294*t81295*t81296*(4.9E2/3.0)+a_8*t81273*t81282* \
                   t81274*t81294*t81295*t81296*(2.8E2/3.0)+a_9*t81271*t81275*t81276*t81294*t81295*t81296*1.5E2+a_11*1.0/ \
                   pow(t81270,1.3E1)*t81271*t81273*t81275*t81294*t81295*t81296*2.2E2-C_k*a_11*t81271*t81273*t81275*t81267* \
                   t81298*t81299*(5.5E1/3.0)-C_k*a_7*t81271*t81273*t81282*t81274*t81267*t81299*(3.5E1/3.0)+C_k*a_8*t81271* \
                   t81273*t81282*t81274*t81267*t81299*(4.0E1/3.0)+a_7*t81271*t81273*t81274*t81283*t81294*t81295*t81296* \
                   (2.8E2/3.0)-a_8*t81271*t81273*t81274*t81283*t81294*t81295*t81296*(6.4E2/3.0)+a_9*t81271*t81273*t81274* \
                   t81283*t81294*t81295*t81296*1.2E2)-kp*rho_b[index]*t81311*1.0/(t81291*t81291)*(gamma_bb[index]*mu_* \
                   1.0/(rho_b[index]*rho_b[index]*rho_b[index])*t81285*t81286*t81289*(1.0/2.0)+gamma_bb[index]*mu_*t81285* \
                   t81286*t81287*1.0/pow(t81288,5.0/3.0)*(1.0/3.0)))-t81370*t81409*(t81361+t81344*t81347*(t81360-c0p* \
                   t81327*t81329*2.0))+rho_b[index]*t81370*t81409*(-t81404+t81344*t81347*(t81404-(1.0/(t81353*t81353) \
                   *t81359*(b2f*c*t81394*(1.0/3.0)+b4f*t81316*t81395*(2.0/3.0)+b1f*c*t81394*t81396*(1.0/6.0)+b3f*c*t81314* \
                   t81394*(1.0/2.0)))/t81356+a1f*c*c0f*t81357*t81394*(2.0/3.0)-a1p*c*c0p*t81327*t81394*(2.0/3.0))+a1p* \
                   c*c0p*t81327*t81394*(2.0/3.0))+rho_b[index]*t81412*t81370*(ccaa1*gamma_bb[index]*gcaa*t81390*t81379* \
                   (8.0/3.0)+ccaa4*t81336*t81337*t81392*t81376*(3.2E1/3.0)+ccaa2*t81334*t81335*t81388*t81389*(1.6E1/3.0) \
                   -ccaa1*t81334*t81335*1.0/(t81378*t81378)*t81389*(8.0/3.0)-ccaa2*t81341*t81334*t81335*1.0/(t81387*t81387) \
                   *(gamma_bb[index]*gcaa*t81390*(1.6E1/3.0)+t81334*t81335*t81389*(1.6E1/3.0))-ccaa4*t81336*t81337*t81338* \
                   1.0/(t81375*t81375)*(gamma_bb[index]*gcaa*t81390*(3.2E1/3.0)+t81336*t81337*t81392*(3.2E1/3.0)+t81334* \
                   t81335*t81389*3.2E1+gamma_bb[index]*gcaa*t81334*t81335*t81391*3.2E1)+ccaa3*gamma_bb[index]*gcaa*t81334* \
                   t81335*t81391*t81384*8.0-ccaa3*gamma_bb[index]*gcaa*t81340*t81334*t81335*1.0/(t81383*t81383)*(gamma_bb[index]* \
                   gcaa*t81390*8.0+t81334*t81335*t81389*1.6E1+gamma_bb[index]*gcaa*t81334*t81335*t81391*8.0))+gamma_bb[index]* \
                   t81412*t81332*t81362*t81409*t81267*(1.0/8.0)-gamma_bb[index]*t81412*t81332*t81409*t81366*t81268*(1.0/ \
                   8.0);
            } else if (rho_a[index] > cutoff_) {
                v_rho_b_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                double t82547 = 1.0/pow(rho_b[index],1.0/3.0);
                double t82548 = c*t82547;
                double t82549 = sqrt(t82548);
                double t82550 = pow(t82548,3.0/2.0);
                double t82551 = c*c;
                double t82552 = 1.0/pow(rho_b[index],2.0/3.0);
                double t82553 = 1.0/c0p;
                double t82554 = b1p*t82549;
                double t82555 = b3p*t82550;
                double t82556 = b4p*t82551*t82552;
                double t82557 = b2p*c*t82547;
                double t82558 = t82554+t82555+t82556+t82557;
                double t82559 = 1.0/t82558;
                double t82560 = t82553*t82559*(1.0/2.0);
                double t82561 = t82560+1.0;
                double t82562 = log(t82561);
                double t82563 = a1p*c*t82547;
                double t82564 = t82563+1.0;
                double t82565 = tau_b[index]-1.0/1.0E20;
                double t82566 = 1.0/tau_b[index];
                double t82567 = tau_b[index]*2.0;
                double t82568 = 1.0/rho_b[index];
                double t82617 = gamma_bb[index]*t82568*(1.0/4.0);
                double t82569 = -t82617+t82567;
                double t82570 = gamma_bb[index]*gamma_bb[index];
                double t82571 = gcaa*gcaa;
                double t82572 = t82570*t82570;
                double t82573 = t82571*t82571;
                double t82574 = 1.0/pow(rho_b[index],3.2E1/3.0);
                double t82575 = 1.0/pow(rho_b[index],8.0/3.0);
                double t82576 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]);
                double t82577 = 1.0/pow(rho_b[index],1.6E1/3.0);
                double t82578 = 1.0/(tau_b[index]*tau_b[index]);
                double t82579 = pow(rho_b[index],5.0/3.0);
                double t82580 = C_k*t82566*t82579;
                double t82581 = t82580+1.0;
                double t82582 = t82580-1.0;
                double t82583 = 1.0/(t82581*t82581);
                double t82584 = t82582*t82582;
                double t82585 = t82584*t82584;
                double t82586 = t82585*t82585;
                double t82587 = 1.0/pow(t82581,1.1E1);
                double t82588 = 1.0/(t82581*t82581*t82581);
                double t82589 = 1.0/(t82581*t82581*t82581*t82581);
                double t82590 = 1.0/(t82581*t82581*t82581*t82581*t82581);
                double t82591 = 1.0/(t82581*t82581*t82581*t82581*t82581*t82581);
                double t82592 = 1.0/(t82581*t82581*t82581*t82581*t82581*t82581*t82581);
                double t82593 = 1.0/(t82581*t82581*t82581*t82581*t82581*t82581*t82581*t82581);
                double t82594 = 1.0/(t82581*t82581*t82581*t82581*t82581*t82581*t82581*t82581*t82581);
                double t82595 = 1.0/pow(t82581,1.0E1);
                double t82596 = pow(2.0,1.0/3.0);
                double t82597 = t82596*2.0;
                double t82598 = t82597-2.0;
                double t82599 = two_13*2.0;
                double t82600 = t82599-2.0;
                double t82601 = 1.0/t82600;
                double t82602 = 1.0/c0f;
                double t82603 = b1f*t82549;
                double t82604 = b3f*t82550;
                double t82605 = b4f*t82551*t82552;
                double t82606 = b2f*c*t82547;
                double t82607 = t82603+t82604+t82605+t82606;
                double t82608 = 1.0/t82607;
                double t82609 = t82602*t82608*(1.0/2.0);
                double t82610 = t82609+1.0;
                double t82611 = log(t82610);
                double t82612 = a1f*c*t82547;
                double t82613 = t82612+1.0;
                double t82614 = c0f*t82611*t82613*2.0;
                double t82615 = c0p*t82562*t82564*2.0;
                double t82616 = ( (t82565 > 0.0) ?  1.0 : 0.0 ) ;
                double t82647 = t82569*t82578*(1.0/2.0);
                double t82618 = t82566-t82647;
                double t82619 = t82616*t82618;
                double t82620 = 0.0 ;
                double t82621 = t82566*t82569*(1.0/2.0);
                double t82622 = t82621-1.0;
                double t82623 = t82620*t82622;
                double t82624 = t82623+t82619;
                double t82625 = gamma_bb[index]*gcaa*t82575*4.0;
                double t82626 = gamma_bb[index]*gcaa*t82570*t82571*t82576*4.0;
                double t82627 = t82570*t82571*t82577*6.0;
                double t82628 = t82572*t82573*t82574;
                double t82629 = t82625+t82626+t82627+t82628+1.0;
                double t82630 = 1.0/t82629;
                double t82631 = gamma_bb[index]*gcaa*t82575;
                double t82632 = t82631+1.0;
                double t82633 = 1.0/t82632;
                double t82634 = gamma_bb[index]*gcaa*t82575*3.0;
                double t82635 = gamma_bb[index]*gcaa*t82570*t82571*t82576;
                double t82636 = t82570*t82571*t82577*3.0;
                double t82637 = t82634+t82635+t82636+1.0;
                double t82638 = 1.0/t82637;
                double t82639 = gamma_bb[index]*gcaa*t82575*2.0;
                double t82640 = t82570*t82571*t82577;
                double t82641 = t82640+t82639+1.0;
                double t82642 = 1.0/t82641;
                double t82643 = 1.0/pow(rho_b[index],1.9E1/3.0);
                double t82644 = 1.0/pow(rho_b[index],1.1E1/3.0);
                double t82645 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]*rho_b[index]);
                double t82646 = 1.0/pow(rho_b[index],3.5E1/3.0);
                double t82648 = 1.0/pow(rho_b[index],4.0/3.0);
                double t82649 = 1.0/pow(rho_b[index],5.0/3.0);
                double t82650 = 1.0/sqrt(t82548);
                double t82651 = 1.0/t82561;
                double t82652 = 1.0/(t82558*t82558);
                double t82653 = b4p*t82551*t82649*(2.0/3.0);
                double t82654 = b2p*c*t82648*(1.0/3.0);
                double t82655 = b1p*c*t82650*t82648*(1.0/6.0);
                double t82656 = b3p*c*t82549*t82648*(1.0/2.0);
                double t82657 = t82653+t82654+t82655+t82656;
                double t82658 = t82651*t82652*t82564*t82657;
                double t82659 = ccaa4*t82630*t82572*t82573*t82574;
                double t82660 = ccaa1*gamma_bb[index]*gcaa*t82633*t82575;
                double t82661 = ccaa3*gamma_bb[index]*gcaa*t82570*t82571*t82638*t82576;
                double t82662 = ccaa2*t82570*t82642*t82571*t82577;
                double t82663 = ccaa0+t82660+t82661+t82662+t82659;
                double t82664 = X-1.0;
                double t82665 = 1.0/(k*k);
                double t82666 = 1.0/kp;
                double t82667 = 1.0/(rho_b[index]*rho_b[index]);
                double t82668 = rho_b[index]*2.0;
                double t82669 = 1.0/pow(t82668,2.0/3.0);
                double t82670 = gamma_bb[index]*mu_*t82665*t82666*t82667*t82669*(1.0/4.0);
                double t82671 = t82670+1.0;
                double t82672 = 1.0/t82671;
                double t82673 = kp-kp*t82672+1.0;
                double t82674 = C_k*C_k;
                double t82675 = pow(rho_b[index],7.0/3.0);
                double t82676 = 1.0/(tau_b[index]*tau_b[index]*tau_b[index]);
                double t82677 = 1.0/t82581;
                double t82678 = 1.0/pow(t82581,1.2E1);
                double t82679 = pow(rho_b[index],2.0/3.0);
                double t82680 = t82614-t82615;
                double t82681 = t82601*t82680*t82598;
                double t82682 = t82615+t82681;
                double t82683 = C_k*a_1*t82578*t82677*t82579;
                double t82684 = C_k*a_2*t82582*t82583*t82578*t82579*2.0;
                double t82685 = C_k*a_10*t82582*t82586*t82595*t82578*t82579*1.0E1;
                double t82686 = C_k*a_11*t82584*t82586*t82578*t82587*t82579*1.1E1;
                double t82687 = C_k*a_3*t82584*t82578*t82579*t82588*3.0;
                double t82688 = C_k*a_4*t82582*t82584*t82578*t82579*t82589*4.0;
                double t82689 = C_k*a_5*t82590*t82585*t82578*t82579*5.0;
                double t82690 = C_k*a_6*t82582*t82591*t82585*t82578*t82579*6.0;
                double t82691 = C_k*a_7*t82592*t82584*t82585*t82578*t82579*7.0;
                double t82692 = C_k*a_8*t82582*t82584*t82593*t82585*t82578*t82579*8.0;
                double t82693 = C_k*a_9*t82594*t82586*t82578*t82579*9.0;
                double t82694 = t82690+t82691+t82683+t82692+t82684+t82693+t82685+t82686+t82687+t82688+t82689-C_k* \
                   a_1*t82582*t82583*t82578*t82579-C_k*a_2*t82584*t82578*t82579*t82588*2.0-C_k*a_4*t82590*t82585*t82578* \
                   t82579*4.0-C_k*a_8*t82594*t82586*t82578*t82579*8.0-C_k*a_10*t82584*t82586*t82578*t82587*t82579*1.0E1- \
                   C_k*a_3*t82582*t82584*t82578*t82579*t82589*3.0-C_k*a_5*t82582*t82591*t82585*t82578*t82579*5.0-C_k* \
                   a_6*t82592*t82584*t82585*t82578*t82579*6.0-C_k*a_9*t82582*t82586*t82595*t82578*t82579*9.0-C_k*a_11* \
                   t82582*t82584*t82586*t82578*t82579*t82678*1.1E1-C_k*a_7*t82582*t82584*t82593*t82585*t82578*t82579* \
                   7.0;
                v_rho_b_tau_b_[index] = t82664*t82673*t82694-t82624*t82663*(t82615+t82601*t82598*(t82614-c0p*t82562* \
                   t82564*2.0))+rho_b[index]*t82664*t82673*(C_k*a_1*t82578*t82677*t82679*(5.0/3.0)-a_1*t82583*t82674* \
                   t82675*t82676*(1.0E1/3.0)+a_2*t82583*t82674*t82675*t82676*(1.0E1/3.0)+a_1*t82582*t82674*t82675*t82676* \
                   t82588*(1.0E1/3.0)+a_10*t82674*t82675*t82586*t82595*t82676*1.5E2-a_2*t82582*t82674*t82675*t82676*t82588* \
                   (4.0E1/3.0)+a_2*t82584*t82674*t82675*t82676*t82589*1.0E1+a_3*t82582*t82674*t82675*t82676*t82588*1.0E1- \
                   a_3*t82584*t82674*t82675*t82676*t82589*3.0E1+a_4*t82591*t82674*t82585*t82675*t82676*(1.0E2/3.0)+a_4* \
                   t82584*t82674*t82675*t82676*t82589*2.0E1-a_5*t82591*t82674*t82585*t82675*t82676*(2.5E2/3.0)+a_6*t82591* \
                   t82674*t82585*t82675*t82676*5.0E1+a_8*t82674*t82675*t82586*t82595*t82676*1.2E2-a_9*t82674*t82675*t82586* \
                   t82595*t82676*2.7E2-C_k*a_1*t82582*t82583*t82578*t82679*(5.0/3.0)+C_k*a_2*t82582*t82583*t82578*t82679* \
                   (1.0E1/3.0)-C_k*a_2*t82584*t82578*t82588*t82679*(1.0E1/3.0)+C_k*a_3*t82584*t82578*t82588*t82679*5.0- \
                   C_k*a_4*t82590*t82585*t82578*t82679*(2.0E1/3.0)+C_k*a_5*t82590*t82585*t82578*t82679*(2.5E1/3.0)-C_k* \
                   a_8*t82594*t82586*t82578*t82679*(4.0E1/3.0)+C_k*a_9*t82594*t82586*t82578*t82679*1.5E1+C_k*a_10*t82582* \
                   t82586*t82595*t82578*t82679*(5.0E1/3.0)-C_k*a_10*t82584*t82586*t82578*t82587*t82679*(5.0E1/3.0)+C_k* \
                   a_11*t82584*t82586*t82578*t82587*t82679*(5.5E1/3.0)-C_k*a_3*t82582*t82584*t82578*t82589*t82679*5.0+ \
                   C_k*a_4*t82582*t82584*t82578*t82589*t82679*(2.0E1/3.0)-C_k*a_5*t82582*t82591*t82585*t82578*t82679* \
                   (2.5E1/3.0)+C_k*a_6*t82582*t82591*t82585*t82578*t82679*1.0E1-C_k*a_6*t82592*t82584*t82585*t82578*t82679* \
                   1.0E1+C_k*a_7*t82592*t82584*t82585*t82578*t82679*(3.5E1/3.0)-C_k*a_9*t82582*t82586*t82595*t82578*t82679* \
                   1.5E1-a_10*t82582*t82674*t82675*t82586*t82676*t82587*(1.0E3/3.0)+a_11*t82582*t82674*t82675*t82586* \
                   t82676*t82587*(5.5E2/3.0)+a_10*t82584*t82674*t82675*t82586*t82676*t82678*(5.5E2/3.0)-a_11*t82584*t82674* \
                   t82675*t82586*t82676*t82678*(1.21E3/3.0)+a_3*t82590*t82582*t82584*t82674*t82675*t82676*2.0E1-a_4*t82590* \
                   t82582*t82584*t82674*t82675*t82676*(1.6E2/3.0)+a_5*t82590*t82582*t82584*t82674*t82675*t82676*(1.0E2/ \
                   3.0)+a_5*t82582*t82592*t82674*t82585*t82675*t82676*5.0E1-a_6*t82582*t82592*t82674*t82585*t82675*t82676* \
                   1.2E2+a_6*t82584*t82593*t82674*t82585*t82675*t82676*7.0E1+a_7*t82582*t82592*t82674*t82585*t82675*t82676* \
                   7.0E1-a_7*t82584*t82593*t82674*t82585*t82675*t82676*(4.9E2/3.0)+a_8*t82584*t82593*t82674*t82585*t82675* \
                   t82676*(2.8E2/3.0)+a_9*t82582*t82674*t82675*t82586*t82676*t82587*1.5E2+a_11*1.0/pow(t82581,1.3E1)* \
                   t82582*t82584*t82674*t82675*t82586*t82676*2.2E2-C_k*a_11*t82582*t82584*t82586*t82578*t82678*t82679* \
                   (5.5E1/3.0)-C_k*a_7*t82582*t82584*t82593*t82585*t82578*t82679*(3.5E1/3.0)+C_k*a_8*t82582*t82584*t82593* \
                   t82585*t82578*t82679*(4.0E1/3.0)+a_7*t82582*t82584*t82674*t82585*t82594*t82675*t82676*(2.8E2/3.0)- \
                   a_8*t82582*t82584*t82674*t82585*t82594*t82675*t82676*(6.4E2/3.0)+a_9*t82582*t82584*t82674*t82585*t82594* \
                   t82675*t82676*1.2E2)+rho_b[index]*t82624*t82663*(-t82658+t82601*t82598*(t82658-(t82613*1.0/(t82607* \
                   t82607)*(b2f*c*t82648*(1.0/3.0)+b4f*t82551*t82649*(2.0/3.0)+b1f*c*t82650*t82648*(1.0/6.0)+b3f*c*t82549* \
                   t82648*(1.0/2.0)))/t82610+a1f*c*c0f*t82611*t82648*(2.0/3.0)-a1p*c*c0p*t82562*t82648*(2.0/3.0))+a1p* \
                   c*c0p*t82562*t82648*(2.0/3.0))+rho_b[index]*t82624*t82682*(ccaa1*gamma_bb[index]*gcaa*t82633*t82644* \
                   (8.0/3.0)+ccaa2*t82570*t82642*t82571*t82643*(1.6E1/3.0)+ccaa4*t82630*t82572*t82573*t82646*(3.2E1/3.0) \
                   -ccaa1*1.0/(t82632*t82632)*t82570*t82571*t82643*(8.0/3.0)-ccaa2*1.0/(t82641*t82641)*t82570*t82571* \
                   t82577*(gamma_bb[index]*gcaa*t82644*(1.6E1/3.0)+t82570*t82571*t82643*(1.6E1/3.0))-ccaa4*t82572*t82573* \
                   t82574*1.0/(t82629*t82629)*(gamma_bb[index]*gcaa*t82644*(3.2E1/3.0)+t82570*t82571*t82643*3.2E1+t82572* \
                   t82573*t82646*(3.2E1/3.0)+gamma_bb[index]*gcaa*t82570*t82571*t82645*3.2E1)+ccaa3*gamma_bb[index]*gcaa* \
                   t82570*t82571*t82645*t82638*8.0-ccaa3*gamma_bb[index]*gcaa*t82570*t82571*1.0/(t82637*t82637)*t82576* \
                   (gamma_bb[index]*gcaa*t82644*8.0+t82570*t82571*t82643*1.6E1+gamma_bb[index]*gcaa*t82570*t82571*t82645* \
                   8.0))-gamma_bb[index]*t82620*t82663*t82682*t82566*t82568*(1.0/8.0)+gamma_bb[index]*t82616*t82663*t82682* \
                   t82568*t82578*(1.0/8.0)-kp*rho_b[index]*1.0/(t82671*t82671)*t82664*t82694*(gamma_bb[index]*mu_*1.0/ \
                   (rho_b[index]*rho_b[index]*rho_b[index])*t82665*t82666*t82669*(1.0/2.0)+gamma_bb[index]*mu_*t82665* \
                   t82666*t82667*1.0/pow(t82668,5.0/3.0)*(1.0/3.0));
            } else {
                v_rho_b_tau_b_[index] = 0.0;
            } 

            //V_tau_a_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t81414 = 1.0/pow(rho_a[index],1.0/3.0);
                double t81415 = c*t81414;
                double t81416 = sqrt(t81415);
                double t81417 = pow(t81415,3.0/2.0);
                double t81418 = c*c;
                double t81419 = 1.0/pow(rho_a[index],2.0/3.0);
                double t81420 = 1.0/c0p;
                double t81421 = b1p*t81416;
                double t81422 = b3p*t81417;
                double t81423 = b4p*t81418*t81419;
                double t81424 = b2p*c*t81414;
                double t81425 = t81421+t81422+t81423+t81424;
                double t81426 = 1.0/t81425;
                double t81427 = t81420*t81426*(1.0/2.0);
                double t81428 = t81427+1.0;
                double t81429 = log(t81428);
                double t81430 = a1p*c*t81414;
                double t81431 = t81430+1.0;
                double t81432 = 1.0/tau_a[index];
                double t81433 = tau_a[index]*2.0;
                double t81434 = 1.0/rho_a[index];
                double t81438 = gamma_aa[index]*t81434*(1.0/4.0);
                double t81435 = t81433-t81438;
                double t81436 = tau_a[index]-1.0/1.0E20;
                double t81437 = 1.0/(tau_a[index]*tau_a[index]);
                double t81439 = gamma_aa[index]*gamma_aa[index];
                double t81440 = gcaa*gcaa;
                double t81441 = t81439*t81439;
                double t81442 = t81440*t81440;
                double t81443 = 1.0/pow(rho_a[index],3.2E1/3.0);
                double t81444 = 1.0/pow(rho_a[index],8.0/3.0);
                double t81445 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t81446 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t81447 = C_k*C_k;
                double t81448 = pow(rho_a[index],1.0E1/3.0);
                double t81449 = 1.0/(tau_a[index]*tau_a[index]*tau_a[index]*tau_a[index]);
                double t81450 = pow(rho_a[index],5.0/3.0);
                double t81451 = C_k*t81432*t81450;
                double t81452 = t81451+1.0;
                double t81453 = 1.0/(t81452*t81452);
                double t81454 = 1.0/(tau_a[index]*tau_a[index]*tau_a[index]);
                double t81455 = t81451-1.0;
                double t81456 = t81455*t81455;
                double t81457 = t81456*t81456;
                double t81458 = t81457*t81457;
                double t81459 = 1.0/pow(t81452,1.1E1);
                double t81460 = 1.0/pow(t81452,1.2E1);
                double t81461 = 1.0/(t81452*t81452*t81452*t81452);
                double t81462 = 1.0/(t81452*t81452*t81452*t81452*t81452);
                double t81463 = 1.0/(t81452*t81452*t81452*t81452*t81452*t81452);
                double t81464 = 1.0/(t81452*t81452*t81452*t81452*t81452*t81452*t81452);
                double t81465 = 1.0/(t81452*t81452*t81452*t81452*t81452*t81452*t81452*t81452);
                double t81466 = 1.0/(t81452*t81452*t81452*t81452*t81452*t81452*t81452*t81452*t81452);
                double t81467 = 1.0/pow(t81452,1.0E1);
                double t81468 = 1.0/(t81452*t81452*t81452);
                v_tau_a_tau_a_[index] = -rho_a[index]*(X-1.0)*(kp-kp/((gamma_aa[index]*1.0/(k*k)*mu_*1.0/(rho_a[index]* \
                   rho_a[index])*1.0/pow(rho_a[index]*2.0,2.0/3.0)*(1.0/4.0))/kp+1.0)+1.0)*(a_1*t81453*t81447*t81448* \
                   t81449*-2.0+a_2*t81453*t81447*t81448*t81449*2.0+(C_k*a_1*t81450*t81454*2.0)/t81452+a_1*t81455*t81447* \
                   t81448*t81449*t81468*2.0+a_10*t81447*t81448*t81449*t81458*t81467*9.0E1+a_2*t81461*t81447*t81456*t81448* \
                   t81449*6.0-a_2*t81455*t81447*t81448*t81449*t81468*8.0-a_3*t81461*t81447*t81456*t81448*t81449*1.8E1+ \
                   a_3*t81455*t81447*t81448*t81449*t81468*6.0+a_4*t81461*t81447*t81456*t81448*t81449*1.2E1+a_4*t81463* \
                   t81447*t81448*t81457*t81449*2.0E1-a_5*t81463*t81447*t81448*t81457*t81449*5.0E1+a_6*t81463*t81447*t81448* \
                   t81457*t81449*3.0E1+a_8*t81447*t81448*t81449*t81458*t81467*7.2E1-a_9*t81447*t81448*t81449*t81458*t81467* \
                   1.62E2-C_k*a_1*t81450*t81453*t81454*t81455*2.0+C_k*a_2*t81450*t81453*t81454*t81455*4.0-C_k*a_2*t81450* \
                   t81454*t81456*t81468*4.0+C_k*a_3*t81450*t81454*t81456*t81468*6.0-C_k*a_4*t81450*t81462*t81454*t81457* \
                   8.0+C_k*a_5*t81450*t81462*t81454*t81457*1.0E1-C_k*a_8*t81450*t81454*t81466*t81458*1.6E1+C_k*a_9*t81450* \
                   t81454*t81466*t81458*1.8E1+C_k*a_10*t81450*t81454*t81455*t81458*t81467*2.0E1-C_k*a_10*t81450*t81454* \
                   t81456*t81458*t81459*2.0E1+C_k*a_11*t81450*t81454*t81456*t81458*t81459*2.2E1-C_k*a_3*t81450*t81461* \
                   t81454*t81455*t81456*6.0+C_k*a_4*t81450*t81461*t81454*t81455*t81456*8.0-C_k*a_5*t81450*t81454*t81463* \
                   t81455*t81457*1.0E1+C_k*a_6*t81450*t81454*t81463*t81455*t81457*1.2E1-C_k*a_6*t81450*t81454*t81464* \
                   t81456*t81457*1.2E1+C_k*a_7*t81450*t81454*t81464*t81456*t81457*1.4E1-C_k*a_9*t81450*t81454*t81455* \
                   t81458*t81467*1.8E1+a_10*t81460*t81447*t81456*t81448*t81449*t81458*1.1E2-a_11*t81460*t81447*t81456* \
                   t81448*t81449*t81458*2.42E2-a_10*t81455*t81447*t81448*t81449*t81458*t81459*2.0E2+a_11*t81455*t81447* \
                   t81448*t81449*t81458*t81459*1.1E2+a_3*t81462*t81455*t81447*t81456*t81448*t81449*1.2E1-a_4*t81462*t81455* \
                   t81447*t81456*t81448*t81449*3.2E1+a_5*t81462*t81455*t81447*t81456*t81448*t81449*2.0E1+a_5*t81455*t81464* \
                   t81447*t81448*t81457*t81449*3.0E1-a_6*t81455*t81464*t81447*t81448*t81457*t81449*7.2E1+a_6*t81447*t81456* \
                   t81465*t81448*t81457*t81449*4.2E1+a_7*t81455*t81464*t81447*t81448*t81457*t81449*4.2E1-a_7*t81447*t81456* \
                   t81465*t81448*t81457*t81449*9.8E1+a_8*t81447*t81456*t81465*t81448*t81457*t81449*5.6E1+a_9*t81455*t81447* \
                   t81448*t81449*t81458*t81459*9.0E1+a_11*1.0/pow(t81452,1.3E1)*t81455*t81447*t81456*t81448*t81449*t81458* \
                   1.32E2-C_k*a_11*t81450*t81460*t81454*t81455*t81456*t81458*2.2E1-C_k*a_7*t81450*t81454*t81455*t81456* \
                   t81465*t81457*1.4E1+C_k*a_8*t81450*t81454*t81455*t81456*t81465*t81457*1.6E1+a_7*t81455*t81447*t81456* \
                   t81448*t81457*t81466*t81449*5.6E1-a_8*t81455*t81447*t81456*t81448*t81457*t81466*t81449*1.28E2+a_9* \
                   t81455*t81447*t81456*t81448*t81457*t81466*t81449*7.2E1)-rho_a[index]*(((pow(2.0,1.0/3.0)*2.0-2.0)* \
                   (c0f*log((1.0/2.0)/(c0f*(b1f*t81416+b3f*t81417+b2f*c*t81414+b4f*t81418*t81419))+1.0)*(a1f*c*t81414+ \
                   1.0)*2.0-c0p*t81431*t81429*2.0))/(two_13*2.0-2.0)+c0p*t81431*t81429*2.0)*( 0.0 - ( (t81436 > 0.0)  \
                   ? 1.0*(t81437*2.0-t81435*t81454) : 0.0 ) + 0.0 )*(ccaa0+(ccaa2*t81440*t81446*t81439)/(gamma_aa[index]* \
                   gcaa*t81444*2.0+t81440*t81446*t81439+1.0)+(ccaa1*gamma_aa[index]*gcaa*t81444)/(gamma_aa[index]*gcaa* \
                   t81444+1.0)+(ccaa4*t81441*t81442*t81443)/(gamma_aa[index]*gcaa*t81444*4.0+t81441*t81442*t81443+t81440* \
                   t81446*t81439*6.0+gamma_aa[index]*gcaa*t81440*t81445*t81439*4.0+1.0)+(ccaa3*gamma_aa[index]*gcaa*t81440* \
                   t81445*t81439)/(gamma_aa[index]*gcaa*t81444*3.0+t81440*t81446*t81439*3.0+gamma_aa[index]*gcaa*t81440* \
                   t81445*t81439+1.0));
            } else if (rho_a[index] > cutoff_) {
                double t83823 = 1.0/pow(rho_a[index],1.0/3.0);
                double t83824 = c*t83823;
                double t83825 = sqrt(t83824);
                double t83826 = pow(t83824,3.0/2.0);
                double t83827 = c*c;
                double t83828 = 1.0/pow(rho_a[index],2.0/3.0);
                double t83829 = 1.0/c0p;
                double t83830 = b1p*t83825;
                double t83831 = b3p*t83826;
                double t83832 = b4p*t83827*t83828;
                double t83833 = b2p*c*t83823;
                double t83834 = t83830+t83831+t83832+t83833;
                double t83835 = 1.0/t83834;
                double t83836 = t83835*t83829*(1.0/2.0);
                double t83837 = t83836+1.0;
                double t83838 = log(t83837);
                double t83839 = a1p*c*t83823;
                double t83840 = t83839+1.0;
                double t83841 = 1.0/tau_a[index];
                double t83842 = tau_a[index]*2.0;
                double t83843 = 1.0/rho_a[index];
                double t83847 = gamma_aa[index]*t83843*(1.0/4.0);
                double t83844 = t83842-t83847;
                double t83845 = tau_a[index]-1.0/1.0E20;
                double t83846 = 1.0/(tau_a[index]*tau_a[index]);
                double t83848 = gamma_aa[index]*gamma_aa[index];
                double t83849 = gcaa*gcaa;
                double t83850 = t83848*t83848;
                double t83851 = t83849*t83849;
                double t83852 = 1.0/pow(rho_a[index],3.2E1/3.0);
                double t83853 = 1.0/pow(rho_a[index],8.0/3.0);
                double t83854 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t83855 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t83856 = C_k*C_k;
                double t83857 = pow(rho_a[index],1.0E1/3.0);
                double t83858 = 1.0/(tau_a[index]*tau_a[index]*tau_a[index]*tau_a[index]);
                double t83859 = pow(rho_a[index],5.0/3.0);
                double t83860 = C_k*t83841*t83859;
                double t83861 = t83860+1.0;
                double t83862 = 1.0/(t83861*t83861);
                double t83863 = 1.0/(tau_a[index]*tau_a[index]*tau_a[index]);
                double t83864 = t83860-1.0;
                double t83865 = t83864*t83864;
                double t83866 = t83865*t83865;
                double t83867 = t83866*t83866;
                double t83868 = 1.0/pow(t83861,1.1E1);
                double t83869 = 1.0/pow(t83861,1.2E1);
                double t83870 = 1.0/(t83861*t83861*t83861*t83861);
                double t83871 = 1.0/(t83861*t83861*t83861*t83861*t83861);
                double t83872 = 1.0/(t83861*t83861*t83861*t83861*t83861*t83861);
                double t83873 = 1.0/(t83861*t83861*t83861*t83861*t83861*t83861*t83861);
                double t83874 = 1.0/(t83861*t83861*t83861*t83861*t83861*t83861*t83861*t83861);
                double t83875 = 1.0/(t83861*t83861*t83861*t83861*t83861*t83861*t83861*t83861*t83861);
                double t83876 = 1.0/pow(t83861,1.0E1);
                double t83877 = 1.0/(t83861*t83861*t83861);
                v_tau_a_tau_a_[index] = -rho_a[index]*(X-1.0)*(kp-kp/((gamma_aa[index]*1.0/(k*k)*mu_*1.0/(rho_a[index]* \
                   rho_a[index])*1.0/pow(rho_a[index]*2.0,2.0/3.0)*(1.0/4.0))/kp+1.0)+1.0)*(a_1*t83862*t83856*t83857* \
                   t83858*-2.0+a_2*t83862*t83856*t83857*t83858*2.0+(C_k*a_1*t83863*t83859*2.0)/t83861+a_1*t83864*t83856* \
                   t83857*t83858*t83877*2.0+a_10*t83856*t83857*t83858*t83867*t83876*9.0E1+a_2*t83870*t83856*t83865*t83857* \
                   t83858*6.0-a_2*t83864*t83856*t83857*t83858*t83877*8.0-a_3*t83870*t83856*t83865*t83857*t83858*1.8E1+ \
                   a_3*t83864*t83856*t83857*t83858*t83877*6.0+a_4*t83870*t83856*t83865*t83857*t83858*1.2E1+a_4*t83872* \
                   t83856*t83857*t83866*t83858*2.0E1-a_5*t83872*t83856*t83857*t83866*t83858*5.0E1+a_6*t83872*t83856*t83857* \
                   t83866*t83858*3.0E1+a_8*t83856*t83857*t83858*t83867*t83876*7.2E1-a_9*t83856*t83857*t83858*t83867*t83876* \
                   1.62E2-C_k*a_1*t83862*t83863*t83864*t83859*2.0+C_k*a_2*t83862*t83863*t83864*t83859*4.0-C_k*a_2*t83863* \
                   t83865*t83859*t83877*4.0+C_k*a_3*t83863*t83865*t83859*t83877*6.0-C_k*a_4*t83871*t83863*t83866*t83859* \
                   8.0+C_k*a_5*t83871*t83863*t83866*t83859*1.0E1-C_k*a_8*t83863*t83875*t83867*t83859*1.6E1+C_k*a_9*t83863* \
                   t83875*t83867*t83859*1.8E1+C_k*a_10*t83863*t83864*t83867*t83876*t83859*2.0E1-C_k*a_10*t83863*t83865* \
                   t83867*t83859*t83868*2.0E1+C_k*a_11*t83863*t83865*t83867*t83859*t83868*2.2E1-C_k*a_3*t83870*t83863* \
                   t83864*t83865*t83859*6.0+C_k*a_4*t83870*t83863*t83864*t83865*t83859*8.0-C_k*a_5*t83863*t83872*t83864* \
                   t83866*t83859*1.0E1+C_k*a_6*t83863*t83872*t83864*t83866*t83859*1.2E1-C_k*a_6*t83863*t83873*t83865* \
                   t83866*t83859*1.2E1+C_k*a_7*t83863*t83873*t83865*t83866*t83859*1.4E1-C_k*a_9*t83863*t83864*t83867* \
                   t83876*t83859*1.8E1-a_10*t83864*t83856*t83857*t83858*t83867*t83868*2.0E2+a_11*t83864*t83856*t83857* \
                   t83858*t83867*t83868*1.1E2+a_10*t83856*t83865*t83857*t83858*t83867*t83869*1.1E2-a_11*t83856*t83865* \
                   t83857*t83858*t83867*t83869*2.42E2+a_3*t83871*t83864*t83856*t83865*t83857*t83858*1.2E1-a_4*t83871* \
                   t83864*t83856*t83865*t83857*t83858*3.2E1+a_5*t83871*t83864*t83856*t83865*t83857*t83858*2.0E1+a_5*t83864* \
                   t83873*t83856*t83857*t83866*t83858*3.0E1-a_6*t83864*t83873*t83856*t83857*t83866*t83858*7.2E1+a_6*t83856* \
                   t83865*t83874*t83857*t83866*t83858*4.2E1+a_7*t83864*t83873*t83856*t83857*t83866*t83858*4.2E1-a_7*t83856* \
                   t83865*t83874*t83857*t83866*t83858*9.8E1+a_8*t83856*t83865*t83874*t83857*t83866*t83858*5.6E1+a_9*t83864* \
                   t83856*t83857*t83858*t83867*t83868*9.0E1+a_11*1.0/pow(t83861,1.3E1)*t83864*t83856*t83865*t83857*t83858* \
                   t83867*1.32E2-C_k*a_11*t83863*t83864*t83865*t83867*t83859*t83869*2.2E1-C_k*a_7*t83863*t83864*t83865* \
                   t83874*t83866*t83859*1.4E1+C_k*a_8*t83863*t83864*t83865*t83874*t83866*t83859*1.6E1+a_7*t83864*t83856* \
                   t83865*t83857*t83866*t83875*t83858*5.6E1-a_8*t83864*t83856*t83865*t83857*t83866*t83875*t83858*1.28E2+ \
                   a_9*t83864*t83856*t83865*t83857*t83866*t83875*t83858*7.2E1)-rho_a[index]*(((pow(2.0,1.0/3.0)*2.0-2.0) \
                   *(c0f*log((1.0/2.0)/(c0f*(b1f*t83825+b3f*t83826+b2f*c*t83823+b4f*t83827*t83828))+1.0)*(a1f*c*t83823+ \
                   1.0)*2.0-c0p*t83840*t83838*2.0))/(two_13*2.0-2.0)+c0p*t83840*t83838*2.0)*( 0.0 - ( (t83845 > 0.0)  \
                   ? 1.0*(t83846*2.0-t83844*t83863) : 0.0 ) + 0.0 )*(ccaa0+(ccaa2*t83855*t83848*t83849)/(gamma_aa[index]* \
                   gcaa*t83853*2.0+t83855*t83848*t83849+1.0)+(ccaa1*gamma_aa[index]*gcaa*t83853)/(gamma_aa[index]*gcaa* \
                   t83853+1.0)+(ccaa4*t83850*t83851*t83852)/(gamma_aa[index]*gcaa*t83853*4.0+t83850*t83851*t83852+t83855* \
                   t83848*t83849*6.0+gamma_aa[index]*gcaa*t83854*t83848*t83849*4.0+1.0)+(ccaa3*gamma_aa[index]*gcaa*t83854* \
                   t83848*t83849)/(gamma_aa[index]*gcaa*t83853*3.0+t83855*t83848*t83849*3.0+gamma_aa[index]*gcaa*t83854* \
                   t83848*t83849+1.0));
            } else if (rho_b[index] > cutoff_) {
                v_tau_a_tau_a_[index] = 0.0;
            } else {
                v_tau_a_tau_a_[index] = 0.0;
            } 

            //V_tau_a_tau_b
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_tau_a_tau_b_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_tau_a_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_tau_a_tau_b_[index] = 0.0;
            } else {
                v_tau_a_tau_b_[index] = 0.0;
            } 

            //V_tau_b_tau_b
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t81471 = 1.0/pow(rho_b[index],1.0/3.0);
                double t81472 = c*t81471;
                double t81473 = sqrt(t81472);
                double t81474 = pow(t81472,3.0/2.0);
                double t81475 = c*c;
                double t81476 = 1.0/pow(rho_b[index],2.0/3.0);
                double t81477 = 1.0/c0p;
                double t81478 = b1p*t81473;
                double t81479 = b3p*t81474;
                double t81480 = b4p*t81475*t81476;
                double t81481 = b2p*c*t81471;
                double t81482 = t81480+t81481+t81478+t81479;
                double t81483 = 1.0/t81482;
                double t81484 = t81483*t81477*(1.0/2.0);
                double t81485 = t81484+1.0;
                double t81486 = log(t81485);
                double t81487 = a1p*c*t81471;
                double t81488 = t81487+1.0;
                double t81489 = 1.0/tau_b[index];
                double t81490 = tau_b[index]*2.0;
                double t81491 = 1.0/rho_b[index];
                double t81495 = gamma_bb[index]*t81491*(1.0/4.0);
                double t81492 = t81490-t81495;
                double t81493 = tau_b[index]-1.0/1.0E20;
                double t81494 = 1.0/(tau_b[index]*tau_b[index]);
                double t81496 = gamma_bb[index]*gamma_bb[index];
                double t81497 = gcaa*gcaa;
                double t81498 = t81496*t81496;
                double t81499 = t81497*t81497;
                double t81500 = 1.0/pow(rho_b[index],3.2E1/3.0);
                double t81501 = 1.0/pow(rho_b[index],8.0/3.0);
                double t81502 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]);
                double t81503 = 1.0/pow(rho_b[index],1.6E1/3.0);
                double t81504 = C_k*C_k;
                double t81505 = pow(rho_b[index],1.0E1/3.0);
                double t81506 = 1.0/(tau_b[index]*tau_b[index]*tau_b[index]*tau_b[index]);
                double t81507 = pow(rho_b[index],5.0/3.0);
                double t81508 = C_k*t81507*t81489;
                double t81509 = t81508+1.0;
                double t81510 = 1.0/(t81509*t81509);
                double t81511 = 1.0/(tau_b[index]*tau_b[index]*tau_b[index]);
                double t81512 = t81508-1.0;
                double t81513 = t81512*t81512;
                double t81514 = t81513*t81513;
                double t81515 = t81514*t81514;
                double t81516 = 1.0/pow(t81509,1.1E1);
                double t81517 = 1.0/pow(t81509,1.2E1);
                double t81518 = 1.0/(t81509*t81509*t81509*t81509);
                double t81519 = 1.0/(t81509*t81509*t81509*t81509*t81509);
                double t81520 = 1.0/(t81509*t81509*t81509*t81509*t81509*t81509);
                double t81521 = 1.0/(t81509*t81509*t81509*t81509*t81509*t81509*t81509);
                double t81522 = 1.0/(t81509*t81509*t81509*t81509*t81509*t81509*t81509*t81509);
                double t81523 = 1.0/(t81509*t81509*t81509*t81509*t81509*t81509*t81509*t81509*t81509);
                double t81524 = 1.0/pow(t81509,1.0E1);
                double t81525 = 1.0/(t81509*t81509*t81509);
                v_tau_b_tau_b_[index] = -rho_b[index]*(X-1.0)*(kp-kp/((gamma_bb[index]*1.0/(k*k)*mu_*1.0/(rho_b[index]* \
                   rho_b[index])*1.0/pow(rho_b[index]*2.0,2.0/3.0)*(1.0/4.0))/kp+1.0)+1.0)*(a_1*t81510*t81504*t81505* \
                   t81506*-2.0+a_2*t81510*t81504*t81505*t81506*2.0+(C_k*a_1*t81511*t81507*2.0)/t81509+a_1*t81512*t81504* \
                   t81505*t81506*t81525*2.0+a_10*t81504*t81505*t81506*t81515*t81524*9.0E1-a_2*t81512*t81504*t81505*t81506* \
                   t81525*8.0+a_2*t81504*t81513*t81505*t81506*t81518*6.0+a_3*t81512*t81504*t81505*t81506*t81525*6.0-a_3* \
                   t81504*t81513*t81505*t81506*t81518*1.8E1+a_4*t81520*t81504*t81505*t81514*t81506*2.0E1+a_4*t81504*t81513* \
                   t81505*t81506*t81518*1.2E1-a_5*t81520*t81504*t81505*t81514*t81506*5.0E1+a_6*t81520*t81504*t81505*t81514* \
                   t81506*3.0E1+a_8*t81504*t81505*t81506*t81515*t81524*7.2E1-a_9*t81504*t81505*t81506*t81515*t81524*1.62E2- \
                   C_k*a_1*t81510*t81511*t81512*t81507*2.0+C_k*a_2*t81510*t81511*t81512*t81507*4.0-C_k*a_2*t81511*t81513* \
                   t81507*t81525*4.0+C_k*a_3*t81511*t81513*t81507*t81525*6.0-C_k*a_4*t81511*t81514*t81507*t81519*8.0+ \
                   C_k*a_5*t81511*t81514*t81507*t81519*1.0E1-C_k*a_8*t81511*t81523*t81515*t81507*1.6E1+C_k*a_9*t81511* \
                   t81523*t81515*t81507*1.8E1+C_k*a_10*t81511*t81512*t81515*t81524*t81507*2.0E1-C_k*a_10*t81511*t81513* \
                   t81515*t81507*t81516*2.0E1+C_k*a_11*t81511*t81513*t81515*t81507*t81516*2.2E1-C_k*a_3*t81511*t81512* \
                   t81513*t81507*t81518*6.0+C_k*a_4*t81511*t81512*t81513*t81507*t81518*8.0-C_k*a_5*t81511*t81520*t81512* \
                   t81514*t81507*1.0E1+C_k*a_6*t81511*t81520*t81512*t81514*t81507*1.2E1-C_k*a_6*t81511*t81521*t81513* \
                   t81514*t81507*1.2E1+C_k*a_7*t81511*t81521*t81513*t81514*t81507*1.4E1-C_k*a_9*t81511*t81512*t81515* \
                   t81524*t81507*1.8E1-a_10*t81512*t81504*t81505*t81506*t81515*t81516*2.0E2+a_11*t81512*t81504*t81505* \
                   t81506*t81515*t81516*1.1E2+a_10*t81504*t81513*t81505*t81506*t81515*t81517*1.1E2-a_11*t81504*t81513* \
                   t81505*t81506*t81515*t81517*2.42E2+a_3*t81512*t81504*t81513*t81505*t81506*t81519*1.2E1-a_4*t81512* \
                   t81504*t81513*t81505*t81506*t81519*3.2E1+a_5*t81512*t81521*t81504*t81505*t81514*t81506*3.0E1+a_5*t81512* \
                   t81504*t81513*t81505*t81506*t81519*2.0E1-a_6*t81512*t81521*t81504*t81505*t81514*t81506*7.2E1+a_6*t81504* \
                   t81513*t81522*t81505*t81514*t81506*4.2E1+a_7*t81512*t81521*t81504*t81505*t81514*t81506*4.2E1-a_7*t81504* \
                   t81513*t81522*t81505*t81514*t81506*9.8E1+a_8*t81504*t81513*t81522*t81505*t81514*t81506*5.6E1+a_9*t81512* \
                   t81504*t81505*t81506*t81515*t81516*9.0E1+a_11*t81512*t81504*t81513*t81505*t81506*t81515*1.0/pow(t81509,1.3E1) \
                   *1.32E2-C_k*a_11*t81511*t81512*t81513*t81515*t81507*t81517*2.2E1-C_k*a_7*t81511*t81512*t81513*t81522* \
                   t81514*t81507*1.4E1+C_k*a_8*t81511*t81512*t81513*t81522*t81514*t81507*1.6E1+a_7*t81512*t81504*t81513* \
                   t81505*t81514*t81523*t81506*5.6E1-a_8*t81512*t81504*t81513*t81505*t81514*t81523*t81506*1.28E2+a_9* \
                   t81512*t81504*t81513*t81505*t81514*t81523*t81506*7.2E1)-rho_b[index]*(((pow(2.0,1.0/3.0)*2.0-2.0)* \
                   (c0f*log((1.0/2.0)/(c0f*(b1f*t81473+b3f*t81474+b2f*c*t81471+b4f*t81475*t81476))+1.0)*(a1f*c*t81471+ \
                   1.0)*2.0-c0p*t81486*t81488*2.0))/(two_13*2.0-2.0)+c0p*t81486*t81488*2.0)*( 0.0 - ( (t81493 > 0.0)  \
                   ? 1.0*(t81494*2.0-t81511*t81492) : 0.0 ) + 0.0 )*(ccaa0+(ccaa2*t81503*t81496*t81497)/(gamma_bb[index]* \
                   gcaa*t81501*2.0+t81503*t81496*t81497+1.0)+(ccaa1*gamma_bb[index]*gcaa*t81501)/(gamma_bb[index]*gcaa* \
                   t81501+1.0)+(ccaa4*t81500*t81498*t81499)/(gamma_bb[index]*gcaa*t81501*4.0+t81503*t81496*t81497*6.0+ \
                   t81500*t81498*t81499+gamma_bb[index]*gcaa*t81502*t81496*t81497*4.0+1.0)+(ccaa3*gamma_bb[index]*gcaa* \
                   t81502*t81496*t81497)/(gamma_bb[index]*gcaa*t81501*3.0+t81503*t81496*t81497*3.0+gamma_bb[index]*gcaa* \
                   t81502*t81496*t81497+1.0));
            } else if (rho_a[index] > cutoff_) {
                v_tau_b_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                double t82698 = 1.0/pow(rho_b[index],1.0/3.0);
                double t82699 = c*t82698;
                double t82700 = sqrt(t82699);
                double t82701 = pow(t82699,3.0/2.0);
                double t82702 = c*c;
                double t82703 = 1.0/pow(rho_b[index],2.0/3.0);
                double t82704 = 1.0/c0p;
                double t82705 = b1p*t82700;
                double t82706 = b3p*t82701;
                double t82707 = b4p*t82702*t82703;
                double t82708 = b2p*c*t82698;
                double t82709 = t82705+t82706+t82707+t82708;
                double t82710 = 1.0/t82709;
                double t82711 = t82710*t82704*(1.0/2.0);
                double t82712 = t82711+1.0;
                double t82713 = log(t82712);
                double t82714 = a1p*c*t82698;
                double t82715 = t82714+1.0;
                double t82716 = 1.0/tau_b[index];
                double t82717 = tau_b[index]*2.0;
                double t82718 = 1.0/rho_b[index];
                double t82722 = gamma_bb[index]*t82718*(1.0/4.0);
                double t82719 = -t82722+t82717;
                double t82720 = tau_b[index]-1.0/1.0E20;
                double t82721 = 1.0/(tau_b[index]*tau_b[index]);
                double t82723 = gamma_bb[index]*gamma_bb[index];
                double t82724 = gcaa*gcaa;
                double t82725 = t82723*t82723;
                double t82726 = t82724*t82724;
                double t82727 = 1.0/pow(rho_b[index],3.2E1/3.0);
                double t82728 = 1.0/pow(rho_b[index],8.0/3.0);
                double t82729 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]);
                double t82730 = 1.0/pow(rho_b[index],1.6E1/3.0);
                double t82731 = C_k*C_k;
                double t82732 = pow(rho_b[index],1.0E1/3.0);
                double t82733 = 1.0/(tau_b[index]*tau_b[index]*tau_b[index]*tau_b[index]);
                double t82734 = pow(rho_b[index],5.0/3.0);
                double t82735 = C_k*t82716*t82734;
                double t82736 = t82735+1.0;
                double t82737 = 1.0/(t82736*t82736);
                double t82738 = 1.0/(tau_b[index]*tau_b[index]*tau_b[index]);
                double t82739 = t82735-1.0;
                double t82740 = t82739*t82739;
                double t82741 = t82740*t82740;
                double t82742 = t82741*t82741;
                double t82743 = 1.0/pow(t82736,1.1E1);
                double t82744 = 1.0/pow(t82736,1.2E1);
                double t82745 = 1.0/(t82736*t82736*t82736*t82736);
                double t82746 = 1.0/(t82736*t82736*t82736*t82736*t82736);
                double t82747 = 1.0/(t82736*t82736*t82736*t82736*t82736*t82736);
                double t82748 = 1.0/(t82736*t82736*t82736*t82736*t82736*t82736*t82736);
                double t82749 = 1.0/(t82736*t82736*t82736*t82736*t82736*t82736*t82736*t82736);
                double t82750 = 1.0/(t82736*t82736*t82736*t82736*t82736*t82736*t82736*t82736*t82736);
                double t82751 = 1.0/pow(t82736,1.0E1);
                double t82752 = 1.0/(t82736*t82736*t82736);
                v_tau_b_tau_b_[index] = -rho_b[index]*(X-1.0)*(kp-kp/((gamma_bb[index]*1.0/(k*k)*mu_*1.0/(rho_b[index]* \
                   rho_b[index])*1.0/pow(rho_b[index]*2.0,2.0/3.0)*(1.0/4.0))/kp+1.0)+1.0)*(a_1*t82731*t82732*t82733* \
                   t82737*-2.0+a_2*t82731*t82732*t82733*t82737*2.0+(C_k*a_1*t82734*t82738*2.0)/t82736+a_1*t82731*t82732* \
                   t82733*t82752*t82739*2.0+a_10*t82731*t82732*t82733*t82742*t82751*9.0E1+a_2*t82731*t82740*t82732*t82733* \
                   t82745*6.0-a_2*t82731*t82732*t82733*t82752*t82739*8.0-a_3*t82731*t82740*t82732*t82733*t82745*1.8E1+ \
                   a_3*t82731*t82732*t82733*t82752*t82739*6.0+a_4*t82731*t82740*t82732*t82733*t82745*1.2E1+a_4*t82731* \
                   t82732*t82741*t82733*t82747*2.0E1-a_5*t82731*t82732*t82741*t82733*t82747*5.0E1+a_6*t82731*t82732*t82741* \
                   t82733*t82747*3.0E1+a_8*t82731*t82732*t82733*t82742*t82751*7.2E1-a_9*t82731*t82732*t82733*t82742*t82751* \
                   1.62E2-C_k*a_1*t82734*t82737*t82738*t82739*2.0-C_k*a_2*t82740*t82734*t82752*t82738*4.0+C_k*a_2*t82734* \
                   t82737*t82738*t82739*4.0+C_k*a_3*t82740*t82734*t82752*t82738*6.0-C_k*a_4*t82741*t82734*t82746*t82738* \
                   8.0+C_k*a_5*t82741*t82734*t82746*t82738*1.0E1-C_k*a_8*t82750*t82742*t82734*t82738*1.6E1+C_k*a_9*t82750* \
                   t82742*t82734*t82738*1.8E1-C_k*a_10*t82740*t82742*t82734*t82743*t82738*2.0E1+C_k*a_11*t82740*t82742* \
                   t82734*t82743*t82738*2.2E1+C_k*a_10*t82742*t82751*t82734*t82738*t82739*2.0E1-C_k*a_3*t82740*t82734* \
                   t82745*t82738*t82739*6.0+C_k*a_4*t82740*t82734*t82745*t82738*t82739*8.0-C_k*a_5*t82741*t82734*t82738* \
                   t82747*t82739*1.0E1-C_k*a_6*t82740*t82741*t82734*t82738*t82748*1.2E1+C_k*a_6*t82741*t82734*t82738* \
                   t82747*t82739*1.2E1+C_k*a_7*t82740*t82741*t82734*t82738*t82748*1.4E1-C_k*a_9*t82742*t82751*t82734* \
                   t82738*t82739*1.8E1+a_10*t82731*t82740*t82732*t82733*t82742*t82744*1.1E2-a_11*t82731*t82740*t82732* \
                   t82733*t82742*t82744*2.42E2-a_10*t82731*t82732*t82733*t82742*t82743*t82739*2.0E2+a_11*t82731*t82732* \
                   t82733*t82742*t82743*t82739*1.1E2+a_3*t82731*t82740*t82732*t82733*t82746*t82739*1.2E1-a_4*t82731*t82740* \
                   t82732*t82733*t82746*t82739*3.2E1+a_5*t82731*t82740*t82732*t82733*t82746*t82739*2.0E1+a_5*t82731*t82732* \
                   t82741*t82733*t82739*t82748*3.0E1+a_6*t82731*t82740*t82732*t82741*t82733*t82749*4.2E1-a_6*t82731*t82732* \
                   t82741*t82733*t82739*t82748*7.2E1-a_7*t82731*t82740*t82732*t82741*t82733*t82749*9.8E1+a_7*t82731*t82732* \
                   t82741*t82733*t82739*t82748*4.2E1+a_8*t82731*t82740*t82732*t82741*t82733*t82749*5.6E1+a_9*t82731*t82732* \
                   t82733*t82742*t82743*t82739*9.0E1+a_11*t82731*t82740*t82732*t82733*t82742*1.0/pow(t82736,1.3E1)*t82739* \
                   1.32E2-C_k*a_11*t82740*t82742*t82734*t82744*t82738*t82739*2.2E1-C_k*a_7*t82740*t82741*t82734*t82738* \
                   t82739*t82749*1.4E1+C_k*a_8*t82740*t82741*t82734*t82738*t82739*t82749*1.6E1+a_7*t82731*t82740*t82732* \
                   t82741*t82750*t82733*t82739*5.6E1-a_8*t82731*t82740*t82732*t82741*t82750*t82733*t82739*1.28E2+a_9* \
                   t82731*t82740*t82732*t82741*t82750*t82733*t82739*7.2E1)-rho_b[index]*(((pow(2.0,1.0/3.0)*2.0-2.0)* \
                   (c0f*log((1.0/2.0)/(c0f*(b1f*t82700+b3f*t82701+b2f*c*t82698+b4f*t82702*t82703))+1.0)*(a1f*c*t82698+ \
                   1.0)*2.0-c0p*t82713*t82715*2.0))/(two_13*2.0-2.0)+c0p*t82713*t82715*2.0)*( 0.0 - ( (t82720 > 0.0)  \
                   ? 1.0*(t82721*2.0-t82719*t82738) : 0.0 ) + 0.0 )*(ccaa0+(ccaa2*t82730*t82723*t82724)/(gamma_bb[index]* \
                   gcaa*t82728*2.0+t82730*t82723*t82724+1.0)+(ccaa1*gamma_bb[index]*gcaa*t82728)/(gamma_bb[index]*gcaa* \
                   t82728+1.0)+(ccaa4*t82725*t82726*t82727)/(gamma_bb[index]*gcaa*t82728*4.0+t82730*t82723*t82724*6.0+ \
                   t82725*t82726*t82727+gamma_bb[index]*gcaa*t82723*t82724*t82729*4.0+1.0)+(ccaa3*gamma_bb[index]*gcaa* \
                   t82723*t82724*t82729)/(gamma_bb[index]*gcaa*t82728*3.0+t82730*t82723*t82724*3.0+gamma_bb[index]*gcaa* \
                   t82723*t82724*t82729+1.0));
            } else {
                v_tau_b_tau_b_[index] = 0.0;
            } 

            if (is_gga_) {
            	
                //V_gamma_aa_tau_a
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    double t81527 = 1.0/pow(rho_a[index],1.0/3.0);
                    double t81528 = c*t81527;
                    double t81529 = sqrt(t81528);
                    double t81530 = pow(t81528,3.0/2.0);
                    double t81531 = c*c;
                    double t81532 = 1.0/pow(rho_a[index],2.0/3.0);
                    double t81533 = 1.0/c0p;
                    double t81534 = b1p*t81529;
                    double t81535 = b3p*t81530;
                    double t81536 = b4p*t81531*t81532;
                    double t81537 = b2p*c*t81527;
                    double t81538 = t81534+t81535+t81536+t81537;
                    double t81539 = 1.0/t81538;
                    double t81540 = t81533*t81539*(1.0/2.0);
                    double t81541 = t81540+1.0;
                    double t81542 = log(t81541);
                    double t81543 = a1p*c*t81527;
                    double t81544 = t81543+1.0;
                    double t81545 = gamma_aa[index]*gamma_aa[index];
                    double t81546 = gcaa*gcaa;
                    double t81547 = t81545*t81545;
                    double t81548 = t81546*t81546;
                    double t81549 = 1.0/pow(rho_a[index],3.2E1/3.0);
                    double t81550 = 1.0/pow(rho_a[index],8.0/3.0);
                    double t81551 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                       rho_a[index]*rho_a[index]);
                    double t81552 = 1.0/pow(rho_a[index],1.6E1/3.0);
                    double t81553 = tau_a[index]-1.0/1.0E20;
                    double t81554 = pow(2.0,1.0/3.0);
                    double t81555 = t81554*2.0;
                    double t81556 = t81555-2.0;
                    double t81557 = two_13*2.0;
                    double t81558 = t81557-2.0;
                    double t81559 = 1.0/t81558;
                    double t81560 = 1.0/c0f;
                    double t81561 = b1f*t81529;
                    double t81562 = b3f*t81530;
                    double t81563 = b4f*t81531*t81532;
                    double t81564 = b2f*c*t81527;
                    double t81565 = t81561+t81562+t81563+t81564;
                    double t81566 = 1.0/t81565;
                    double t81567 = t81560*t81566*(1.0/2.0);
                    double t81568 = t81567+1.0;
                    double t81569 = log(t81568);
                    double t81570 = a1f*c*t81527;
                    double t81571 = t81570+1.0;
                    double t81572 = c0f*t81571*t81569*2.0;
                    double t81573 = c0p*t81542*t81544*2.0;
                    double t81574 = gamma_aa[index]*gcaa*t81550*4.0;
                    double t81575 = gamma_aa[index]*gcaa*t81551*t81545*t81546*4.0;
                    double t81576 = t81552*t81545*t81546*6.0;
                    double t81577 = t81547*t81548*t81549;
                    double t81578 = t81574+t81575+t81576+t81577+1.0;
                    double t81579 = 1.0/t81578;
                    double t81580 = ccaa4*t81547*t81548*t81549*t81579;
                    double t81581 = gamma_aa[index]*gcaa*t81550;
                    double t81582 = t81581+1.0;
                    double t81583 = 1.0/t81582;
                    double t81584 = ccaa1*gamma_aa[index]*gcaa*t81550*t81583;
                    double t81585 = gamma_aa[index]*gcaa*t81550*3.0;
                    double t81586 = gamma_aa[index]*gcaa*t81551*t81545*t81546;
                    double t81587 = t81552*t81545*t81546*3.0;
                    double t81588 = t81585+t81586+t81587+1.0;
                    double t81589 = 1.0/t81588;
                    double t81590 = ccaa3*gamma_aa[index]*gcaa*t81551*t81545*t81546*t81589;
                    double t81591 = gamma_aa[index]*gcaa*t81550*2.0;
                    double t81592 = t81552*t81545*t81546;
                    double t81593 = t81591+t81592+1.0;
                    double t81594 = 1.0/t81593;
                    double t81595 = ccaa2*t81552*t81545*t81546*t81594;
                    double t81596 = ccaa0+t81580+t81590+t81584+t81595;
                    double t81597 = t81572-t81573;
                    double t81598 = t81556*t81559*t81597;
                    double t81599 = t81573+t81598;
                    double t81600 = ( (t81553 > 0.0) ?  1.0 : 0.0 ) ;
                    double t81601 = 1.0/tau_a[index];
                    double t81602 = 1.0/(tau_a[index]*tau_a[index]);
                    double t81603 = 0.0 ;
                    double t81604 = tau_a[index]*2.0;
                    double t81605 = 1.0/rho_a[index];
                    double t81606 = t81604-gamma_aa[index]*t81605*(1.0/4.0);
                    double t81607 = 1.0/(k*k);
                    double t81608 = rho_a[index]*2.0;
                    double t81609 = 1.0/pow(t81608,2.0/3.0);
                    double t81610 = pow(rho_a[index],5.0/3.0);
                    double t81611 = C_k*t81601*t81610;
                    double t81612 = t81611+1.0;
                    double t81613 = t81611-1.0;
                    double t81614 = 1.0/(t81612*t81612);
                    double t81615 = t81613*t81613;
                    double t81616 = t81615*t81615;
                    double t81617 = t81616*t81616;
                    double t81618 = 1.0/pow(t81612,1.1E1);
                    double t81619 = 1.0/(t81612*t81612*t81612);
                    double t81620 = 1.0/(t81612*t81612*t81612*t81612);
                    double t81621 = 1.0/(t81612*t81612*t81612*t81612*t81612);
                    double t81622 = 1.0/(t81612*t81612*t81612*t81612*t81612*t81612);
                    double t81623 = 1.0/(t81612*t81612*t81612*t81612*t81612*t81612*t81612);
                    double t81624 = 1.0/(t81612*t81612*t81612*t81612*t81612*t81612*t81612*t81612);
                    double t81625 = 1.0/(t81612*t81612*t81612*t81612*t81612*t81612*t81612*t81612*t81612);
                    double t81626 = 1.0/pow(t81612,1.0E1);
                    v_gamma_aa_tau_a_[index] = t81600*t81602*t81596*t81599*(-1.0/8.0)+t81601*t81603*t81596*(t81573+t81556* \
                       t81559*(t81572-c0p*t81542*t81544*2.0))*(1.0/8.0)-rho_a[index]*t81599*(t81603*(t81601*t81606*(1.0/2.0) \
                       -1.0)+t81600*(t81601-t81602*t81606*(1.0/2.0)))*(ccaa1*gcaa*t81550*t81583+ccaa2*gamma_aa[index]*t81552* \
                       t81546*t81594*2.0-ccaa1*gamma_aa[index]*t81552*t81546*1.0/(t81582*t81582)-ccaa2*t81552*t81545*t81546* \
                       1.0/(t81593*t81593)*(gcaa*t81550*2.0+gamma_aa[index]*t81552*t81546*2.0)-ccaa4*t81547*t81548*t81549* \
                       1.0/(t81578*t81578)*(gcaa*t81550*4.0+gamma_aa[index]*t81552*t81546*1.2E1+gamma_aa[index]*t81545*t81548* \
                       t81549*4.0+gcaa*t81551*t81545*t81546*1.2E1)+ccaa4*gamma_aa[index]*t81545*t81548*t81549*t81579*4.0+ \
                       ccaa3*gcaa*t81551*t81545*t81546*t81589*3.0-ccaa3*gamma_aa[index]*gcaa*t81551*t81545*t81546*1.0/(t81588* \
                       t81588)*(gcaa*t81550*3.0+gamma_aa[index]*t81552*t81546*6.0+gcaa*t81551*t81545*t81546*3.0))+mu_*t81605* \
                       t81607*t81609*1.0/pow((gamma_aa[index]*mu_*1.0/(rho_a[index]*rho_a[index])*t81607*t81609*(1.0/4.0) \
                       )/kp+1.0,2.0)*(X-1.0)*((C_k*a_1*t81610*t81602)/t81612-C_k*a_1*t81610*t81602*t81613*t81614+C_k*a_2* \
                       t81610*t81602*t81613*t81614*2.0-C_k*a_2*t81610*t81602*t81615*t81619*2.0+C_k*a_3*t81610*t81602*t81615* \
                       t81619*3.0-C_k*a_4*t81610*t81602*t81621*t81616*4.0+C_k*a_5*t81610*t81602*t81621*t81616*5.0-C_k*a_8* \
                       t81610*t81602*t81625*t81617*8.0+C_k*a_9*t81610*t81602*t81625*t81617*9.0+C_k*a_10*t81610*t81602*t81613* \
                       t81617*t81626*1.0E1-C_k*a_10*t81610*t81602*t81615*t81617*t81618*1.0E1+C_k*a_11*t81610*t81602*t81615* \
                       t81617*t81618*1.1E1-C_k*a_3*t81610*t81602*t81620*t81613*t81615*3.0+C_k*a_4*t81610*t81602*t81620*t81613* \
                       t81615*4.0-C_k*a_5*t81610*t81602*t81613*t81622*t81616*5.0+C_k*a_6*t81610*t81602*t81613*t81622*t81616* \
                       6.0-C_k*a_6*t81610*t81602*t81623*t81615*t81616*6.0+C_k*a_7*t81610*t81602*t81623*t81615*t81616*7.0- \
                       C_k*a_9*t81610*t81602*t81613*t81617*t81626*9.0-C_k*a_11*t81610*t81602*1.0/pow(t81612,1.2E1)*t81613* \
                       t81615*t81617*1.1E1-C_k*a_7*t81610*t81602*t81613*t81615*t81624*t81616*7.0+C_k*a_8*t81610*t81602*t81613* \
                       t81615*t81624*t81616*8.0)*(1.0/4.0);
                } else if (rho_a[index] > cutoff_) {
                    double t83881 = 1.0/pow(rho_a[index],1.0/3.0);
                    double t83882 = c*t83881;
                    double t83883 = sqrt(t83882);
                    double t83884 = pow(t83882,3.0/2.0);
                    double t83885 = c*c;
                    double t83886 = 1.0/pow(rho_a[index],2.0/3.0);
                    double t83887 = 1.0/c0p;
                    double t83888 = b1p*t83883;
                    double t83889 = b3p*t83884;
                    double t83890 = b4p*t83885*t83886;
                    double t83891 = b2p*c*t83881;
                    double t83892 = t83890+t83891+t83888+t83889;
                    double t83893 = 1.0/t83892;
                    double t83894 = t83893*t83887*(1.0/2.0);
                    double t83895 = t83894+1.0;
                    double t83896 = log(t83895);
                    double t83897 = a1p*c*t83881;
                    double t83898 = t83897+1.0;
                    double t83899 = gamma_aa[index]*gamma_aa[index];
                    double t83900 = gcaa*gcaa;
                    double t83901 = t83899*t83899;
                    double t83902 = t83900*t83900;
                    double t83903 = 1.0/pow(rho_a[index],3.2E1/3.0);
                    double t83904 = 1.0/pow(rho_a[index],8.0/3.0);
                    double t83905 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                       rho_a[index]*rho_a[index]);
                    double t83906 = 1.0/pow(rho_a[index],1.6E1/3.0);
                    double t83907 = tau_a[index]-1.0/1.0E20;
                    double t83908 = pow(2.0,1.0/3.0);
                    double t83909 = t83908*2.0;
                    double t83910 = t83909-2.0;
                    double t83911 = two_13*2.0;
                    double t83912 = t83911-2.0;
                    double t83913 = 1.0/t83912;
                    double t83914 = 1.0/c0f;
                    double t83915 = b1f*t83883;
                    double t83916 = b3f*t83884;
                    double t83917 = b4f*t83885*t83886;
                    double t83918 = b2f*c*t83881;
                    double t83919 = t83915+t83916+t83917+t83918;
                    double t83920 = 1.0/t83919;
                    double t83921 = t83920*t83914*(1.0/2.0);
                    double t83922 = t83921+1.0;
                    double t83923 = log(t83922);
                    double t83924 = a1f*c*t83881;
                    double t83925 = t83924+1.0;
                    double t83926 = c0f*t83923*t83925*2.0;
                    double t83927 = c0p*t83896*t83898*2.0;
                    double t83928 = gamma_aa[index]*gcaa*t83904*4.0;
                    double t83929 = gamma_aa[index]*gcaa*t83900*t83905*t83899*4.0;
                    double t83930 = t83900*t83906*t83899*6.0;
                    double t83931 = t83901*t83902*t83903;
                    double t83932 = t83930+t83931+t83928+t83929+1.0;
                    double t83933 = 1.0/t83932;
                    double t83934 = ccaa4*t83901*t83902*t83903*t83933;
                    double t83935 = gamma_aa[index]*gcaa*t83904;
                    double t83936 = t83935+1.0;
                    double t83937 = 1.0/t83936;
                    double t83938 = ccaa1*gamma_aa[index]*gcaa*t83904*t83937;
                    double t83939 = gamma_aa[index]*gcaa*t83904*3.0;
                    double t83940 = gamma_aa[index]*gcaa*t83900*t83905*t83899;
                    double t83941 = t83900*t83906*t83899*3.0;
                    double t83942 = t83940+t83941+t83939+1.0;
                    double t83943 = 1.0/t83942;
                    double t83944 = ccaa3*gamma_aa[index]*gcaa*t83900*t83905*t83943*t83899;
                    double t83945 = gamma_aa[index]*gcaa*t83904*2.0;
                    double t83946 = t83900*t83906*t83899;
                    double t83947 = t83945+t83946+1.0;
                    double t83948 = 1.0/t83947;
                    double t83949 = ccaa2*t83900*t83906*t83948*t83899;
                    double t83950 = ccaa0+t83934+t83944+t83938+t83949;
                    double t83951 = t83926-t83927;
                    double t83952 = t83910*t83913*t83951;
                    double t83953 = t83952+t83927;
                    double t83954 = ( (t83907 > 0.0) ?  1.0 : 0.0 ) ;
                    double t83955 = 1.0/tau_a[index];
                    double t83956 = 1.0/(tau_a[index]*tau_a[index]);
                    double t83957 = 0.0 ;
                    double t83958 = tau_a[index]*2.0;
                    double t83959 = 1.0/rho_a[index];
                    double t83960 = t83958-gamma_aa[index]*t83959*(1.0/4.0);
                    double t83961 = 1.0/(k*k);
                    double t83962 = rho_a[index]*2.0;
                    double t83963 = 1.0/pow(t83962,2.0/3.0);
                    double t83964 = pow(rho_a[index],5.0/3.0);
                    double t83965 = C_k*t83955*t83964;
                    double t83966 = t83965+1.0;
                    double t83967 = t83965-1.0;
                    double t83968 = 1.0/(t83966*t83966);
                    double t83969 = t83967*t83967;
                    double t83970 = t83969*t83969;
                    double t83971 = t83970*t83970;
                    double t83972 = 1.0/pow(t83966,1.1E1);
                    double t83973 = 1.0/(t83966*t83966*t83966);
                    double t83974 = 1.0/(t83966*t83966*t83966*t83966);
                    double t83975 = 1.0/(t83966*t83966*t83966*t83966*t83966);
                    double t83976 = 1.0/(t83966*t83966*t83966*t83966*t83966*t83966);
                    double t83977 = 1.0/(t83966*t83966*t83966*t83966*t83966*t83966*t83966);
                    double t83978 = 1.0/(t83966*t83966*t83966*t83966*t83966*t83966*t83966*t83966);
                    double t83979 = 1.0/(t83966*t83966*t83966*t83966*t83966*t83966*t83966*t83966*t83966);
                    double t83980 = 1.0/pow(t83966,1.0E1);
                    v_gamma_aa_tau_a_[index] = t83950*t83953*t83954*t83956*(-1.0/8.0)+t83950*t83955*t83957*(t83927+t83910* \
                       t83913*(t83926-c0p*t83896*t83898*2.0))*(1.0/8.0)-rho_a[index]*t83953*(t83957*(t83960*t83955*(1.0/2.0) \
                       -1.0)+t83954*(t83955-t83960*t83956*(1.0/2.0)))*(ccaa1*gcaa*t83904*t83937+ccaa2*gamma_aa[index]*t83900* \
                       t83906*t83948*2.0-ccaa1*gamma_aa[index]*t83900*t83906*1.0/(t83936*t83936)-ccaa2*t83900*t83906*1.0/ \
                       (t83947*t83947)*t83899*(gcaa*t83904*2.0+gamma_aa[index]*t83900*t83906*2.0)-ccaa4*t83901*t83902*t83903* \
                       1.0/(t83932*t83932)*(gcaa*t83904*4.0+gamma_aa[index]*t83900*t83906*1.2E1+gamma_aa[index]*t83902*t83903* \
                       t83899*4.0+gcaa*t83900*t83905*t83899*1.2E1)+ccaa4*gamma_aa[index]*t83902*t83903*t83933*t83899*4.0+ \
                       ccaa3*gcaa*t83900*t83905*t83943*t83899*3.0-ccaa3*gamma_aa[index]*gcaa*t83900*t83905*1.0/(t83942*t83942) \
                       *t83899*(gcaa*t83904*3.0+gamma_aa[index]*t83900*t83906*6.0+gcaa*t83900*t83905*t83899*3.0))+mu_*t83961* \
                       t83963*t83959*1.0/pow((gamma_aa[index]*mu_*1.0/(rho_a[index]*rho_a[index])*t83961*t83963*(1.0/4.0) \
                       )/kp+1.0,2.0)*(X-1.0)*((C_k*a_1*t83964*t83956)/t83966-C_k*a_1*t83964*t83956*t83967*t83968-C_k*a_2* \
                       t83964*t83973*t83956*t83969*2.0+C_k*a_2*t83964*t83956*t83967*t83968*2.0+C_k*a_3*t83964*t83973*t83956* \
                       t83969*3.0-C_k*a_4*t83970*t83964*t83956*t83975*4.0+C_k*a_5*t83970*t83964*t83956*t83975*5.0-C_k*a_8* \
                       t83971*t83964*t83956*t83979*8.0+C_k*a_9*t83971*t83964*t83956*t83979*9.0+C_k*a_10*t83971*t83980*t83964* \
                       t83956*t83967*1.0E1-C_k*a_10*t83971*t83972*t83964*t83956*t83969*1.0E1+C_k*a_11*t83971*t83972*t83964* \
                       t83956*t83969*1.1E1-C_k*a_3*t83964*t83956*t83974*t83967*t83969*3.0+C_k*a_4*t83964*t83956*t83974*t83967* \
                       t83969*4.0-C_k*a_5*t83970*t83964*t83956*t83967*t83976*5.0+C_k*a_6*t83970*t83964*t83956*t83967*t83976* \
                       6.0-C_k*a_6*t83970*t83964*t83956*t83977*t83969*6.0+C_k*a_7*t83970*t83964*t83956*t83977*t83969*7.0- \
                       C_k*a_9*t83971*t83980*t83964*t83956*t83967*9.0-C_k*a_11*t83971*t83964*t83956*1.0/pow(t83966,1.2E1) \
                       *t83967*t83969*1.1E1-C_k*a_7*t83970*t83964*t83956*t83967*t83969*t83978*7.0+C_k*a_8*t83970*t83964*t83956* \
                       t83967*t83969*t83978*8.0)*(1.0/4.0);
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } else {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } 
            	
                //V_gamma_aa_tau_b
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_aa_tau_b_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_aa_tau_b_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_aa_tau_b_[index] = 0.0;
                } else {
                    v_gamma_aa_tau_b_[index] = 0.0;
                } 
            	
                //V_gamma_ab_tau_a
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_ab_tau_a_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_ab_tau_a_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_ab_tau_a_[index] = 0.0;
                } else {
                    v_gamma_ab_tau_a_[index] = 0.0;
                } 
            	
                //V_gamma_ab_tau_b
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_ab_tau_b_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_ab_tau_b_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_ab_tau_b_[index] = 0.0;
                } else {
                    v_gamma_ab_tau_b_[index] = 0.0;
                } 
            	
                //V_gamma_bb_tau_a
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_bb_tau_a_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_bb_tau_a_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_bb_tau_a_[index] = 0.0;
                } else {
                    v_gamma_bb_tau_a_[index] = 0.0;
                } 
            	
                //V_gamma_bb_tau_b
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    double t81632 = 1.0/pow(rho_b[index],1.0/3.0);
                    double t81633 = c*t81632;
                    double t81634 = sqrt(t81633);
                    double t81635 = pow(t81633,3.0/2.0);
                    double t81636 = c*c;
                    double t81637 = 1.0/pow(rho_b[index],2.0/3.0);
                    double t81638 = 1.0/c0p;
                    double t81639 = b1p*t81634;
                    double t81640 = b3p*t81635;
                    double t81641 = b4p*t81636*t81637;
                    double t81642 = b2p*c*t81632;
                    double t81643 = t81640+t81641+t81642+t81639;
                    double t81644 = 1.0/t81643;
                    double t81645 = t81644*t81638*(1.0/2.0);
                    double t81646 = t81645+1.0;
                    double t81647 = log(t81646);
                    double t81648 = a1p*c*t81632;
                    double t81649 = t81648+1.0;
                    double t81650 = gamma_bb[index]*gamma_bb[index];
                    double t81651 = gcaa*gcaa;
                    double t81652 = t81650*t81650;
                    double t81653 = t81651*t81651;
                    double t81654 = 1.0/pow(rho_b[index],3.2E1/3.0);
                    double t81655 = 1.0/pow(rho_b[index],8.0/3.0);
                    double t81656 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                       rho_b[index]*rho_b[index]);
                    double t81657 = 1.0/pow(rho_b[index],1.6E1/3.0);
                    double t81658 = tau_b[index]-1.0/1.0E20;
                    double t81659 = pow(2.0,1.0/3.0);
                    double t81660 = t81659*2.0;
                    double t81661 = t81660-2.0;
                    double t81662 = two_13*2.0;
                    double t81663 = t81662-2.0;
                    double t81664 = 1.0/t81663;
                    double t81665 = 1.0/c0f;
                    double t81666 = b1f*t81634;
                    double t81667 = b3f*t81635;
                    double t81668 = b4f*t81636*t81637;
                    double t81669 = b2f*c*t81632;
                    double t81670 = t81666+t81667+t81668+t81669;
                    double t81671 = 1.0/t81670;
                    double t81672 = t81671*t81665*(1.0/2.0);
                    double t81673 = t81672+1.0;
                    double t81674 = log(t81673);
                    double t81675 = a1f*c*t81632;
                    double t81676 = t81675+1.0;
                    double t81677 = c0f*t81674*t81676*2.0;
                    double t81678 = c0p*t81647*t81649*2.0;
                    double t81679 = gamma_bb[index]*gcaa*t81655*4.0;
                    double t81680 = gamma_bb[index]*gcaa*t81650*t81651*t81656*4.0;
                    double t81681 = t81650*t81651*t81657*6.0;
                    double t81682 = t81652*t81653*t81654;
                    double t81683 = t81680+t81681+t81682+t81679+1.0;
                    double t81684 = 1.0/t81683;
                    double t81685 = ccaa4*t81652*t81653*t81654*t81684;
                    double t81686 = gamma_bb[index]*gcaa*t81655;
                    double t81687 = t81686+1.0;
                    double t81688 = 1.0/t81687;
                    double t81689 = ccaa1*gamma_bb[index]*gcaa*t81655*t81688;
                    double t81690 = gamma_bb[index]*gcaa*t81655*3.0;
                    double t81691 = gamma_bb[index]*gcaa*t81650*t81651*t81656;
                    double t81692 = t81650*t81651*t81657*3.0;
                    double t81693 = t81690+t81691+t81692+1.0;
                    double t81694 = 1.0/t81693;
                    double t81695 = ccaa3*gamma_bb[index]*gcaa*t81650*t81651*t81656*t81694;
                    double t81696 = gamma_bb[index]*gcaa*t81655*2.0;
                    double t81697 = t81650*t81651*t81657;
                    double t81698 = t81696+t81697+1.0;
                    double t81699 = 1.0/t81698;
                    double t81700 = ccaa2*t81650*t81651*t81657*t81699;
                    double t81701 = ccaa0+t81700+t81685+t81695+t81689;
                    double t81702 = t81677-t81678;
                    double t81703 = t81702*t81661*t81664;
                    double t81704 = t81703+t81678;
                    double t81705 = ( (t81658 > 0.0) ?  1.0 : 0.0 ) ;
                    double t81706 = 1.0/tau_b[index];
                    double t81707 = 1.0/(tau_b[index]*tau_b[index]);
                    double t81708 = 0.0 ;
                    double t81709 = tau_b[index]*2.0;
                    double t81710 = 1.0/rho_b[index];
                    double t81711 = t81709-gamma_bb[index]*t81710*(1.0/4.0);
                    double t81712 = 1.0/(k*k);
                    double t81713 = rho_b[index]*2.0;
                    double t81714 = 1.0/pow(t81713,2.0/3.0);
                    double t81715 = pow(rho_b[index],5.0/3.0);
                    double t81716 = C_k*t81706*t81715;
                    double t81717 = t81716+1.0;
                    double t81718 = t81716-1.0;
                    double t81719 = 1.0/(t81717*t81717);
                    double t81720 = t81718*t81718;
                    double t81721 = t81720*t81720;
                    double t81722 = t81721*t81721;
                    double t81723 = 1.0/pow(t81717,1.1E1);
                    double t81724 = 1.0/(t81717*t81717*t81717);
                    double t81725 = 1.0/(t81717*t81717*t81717*t81717);
                    double t81726 = 1.0/(t81717*t81717*t81717*t81717*t81717);
                    double t81727 = 1.0/(t81717*t81717*t81717*t81717*t81717*t81717);
                    double t81728 = 1.0/(t81717*t81717*t81717*t81717*t81717*t81717*t81717);
                    double t81729 = 1.0/(t81717*t81717*t81717*t81717*t81717*t81717*t81717*t81717);
                    double t81730 = 1.0/(t81717*t81717*t81717*t81717*t81717*t81717*t81717*t81717*t81717);
                    double t81731 = 1.0/pow(t81717,1.0E1);
                    v_gamma_bb_tau_b_[index] = t81701*t81704*t81705*t81707*(-1.0/8.0)+t81701*t81706*t81708*(t81678+t81661* \
                       t81664*(t81677-c0p*t81647*t81649*2.0))*(1.0/8.0)-rho_b[index]*t81704*(t81708*(t81711*t81706*(1.0/2.0) \
                       -1.0)+t81705*(t81706-t81711*t81707*(1.0/2.0)))*(ccaa1*gcaa*t81655*t81688+ccaa2*gamma_bb[index]*t81651* \
                       t81657*t81699*2.0-ccaa1*gamma_bb[index]*t81651*t81657*1.0/(t81687*t81687)-ccaa2*t81650*t81651*t81657* \
                       1.0/(t81698*t81698)*(gcaa*t81655*2.0+gamma_bb[index]*t81651*t81657*2.0)-ccaa4*t81652*t81653*t81654* \
                       1.0/(t81683*t81683)*(gcaa*t81655*4.0+gamma_bb[index]*t81651*t81657*1.2E1+gamma_bb[index]*t81650*t81653* \
                       t81654*4.0+gcaa*t81650*t81651*t81656*1.2E1)+ccaa4*gamma_bb[index]*t81650*t81653*t81654*t81684*4.0+ \
                       ccaa3*gcaa*t81650*t81651*t81656*t81694*3.0-ccaa3*gamma_bb[index]*gcaa*t81650*t81651*t81656*1.0/(t81693* \
                       t81693)*(gcaa*t81655*3.0+gamma_bb[index]*t81651*t81657*6.0+gcaa*t81650*t81651*t81656*3.0))+mu_*t81710* \
                       t81712*t81714*1.0/pow((gamma_bb[index]*mu_*1.0/(rho_b[index]*rho_b[index])*t81712*t81714*(1.0/4.0) \
                       )/kp+1.0,2.0)*(X-1.0)*((C_k*a_1*t81715*t81707)/t81717-C_k*a_1*t81715*t81707*t81718*t81719-C_k*a_2* \
                       t81720*t81715*t81724*t81707*2.0+C_k*a_2*t81715*t81707*t81718*t81719*2.0+C_k*a_3*t81720*t81715*t81724* \
                       t81707*3.0-C_k*a_4*t81721*t81715*t81707*t81726*4.0+C_k*a_5*t81721*t81715*t81707*t81726*5.0-C_k*a_8* \
                       t81730*t81722*t81715*t81707*8.0+C_k*a_9*t81730*t81722*t81715*t81707*9.0-C_k*a_10*t81720*t81722*t81723* \
                       t81715*t81707*1.0E1+C_k*a_11*t81720*t81722*t81723*t81715*t81707*1.1E1+C_k*a_10*t81722*t81731*t81715* \
                       t81707*t81718*1.0E1-C_k*a_3*t81720*t81715*t81707*t81725*t81718*3.0+C_k*a_4*t81720*t81715*t81707*t81725* \
                       t81718*4.0-C_k*a_5*t81721*t81715*t81707*t81718*t81727*5.0-C_k*a_6*t81720*t81721*t81715*t81707*t81728* \
                       6.0+C_k*a_6*t81721*t81715*t81707*t81718*t81727*6.0+C_k*a_7*t81720*t81721*t81715*t81707*t81728*7.0- \
                       C_k*a_9*t81722*t81731*t81715*t81707*t81718*9.0-C_k*a_11*t81720*t81722*t81715*t81707*1.0/pow(t81717,1.2E1) \
                       *t81718*1.1E1-C_k*a_7*t81720*t81721*t81715*t81707*t81718*t81729*7.0+C_k*a_8*t81720*t81721*t81715*t81707* \
                       t81718*t81729*8.0)*(1.0/4.0);
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_bb_tau_b_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    double t82759 = 1.0/pow(rho_b[index],1.0/3.0);
                    double t82760 = c*t82759;
                    double t82761 = sqrt(t82760);
                    double t82762 = pow(t82760,3.0/2.0);
                    double t82763 = c*c;
                    double t82764 = 1.0/pow(rho_b[index],2.0/3.0);
                    double t82765 = 1.0/c0p;
                    double t82766 = b1p*t82761;
                    double t82767 = b3p*t82762;
                    double t82768 = b4p*t82763*t82764;
                    double t82769 = b2p*c*t82759;
                    double t82770 = t82766+t82767+t82768+t82769;
                    double t82771 = 1.0/t82770;
                    double t82772 = t82771*t82765*(1.0/2.0);
                    double t82773 = t82772+1.0;
                    double t82774 = log(t82773);
                    double t82775 = a1p*c*t82759;
                    double t82776 = t82775+1.0;
                    double t82777 = gamma_bb[index]*gamma_bb[index];
                    double t82778 = gcaa*gcaa;
                    double t82779 = t82777*t82777;
                    double t82780 = t82778*t82778;
                    double t82781 = 1.0/pow(rho_b[index],3.2E1/3.0);
                    double t82782 = 1.0/pow(rho_b[index],8.0/3.0);
                    double t82783 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                       rho_b[index]*rho_b[index]);
                    double t82784 = 1.0/pow(rho_b[index],1.6E1/3.0);
                    double t82785 = tau_b[index]-1.0/1.0E20;
                    double t82786 = pow(2.0,1.0/3.0);
                    double t82787 = t82786*2.0;
                    double t82788 = t82787-2.0;
                    double t82789 = two_13*2.0;
                    double t82790 = t82789-2.0;
                    double t82791 = 1.0/t82790;
                    double t82792 = 1.0/c0f;
                    double t82793 = b1f*t82761;
                    double t82794 = b3f*t82762;
                    double t82795 = b4f*t82763*t82764;
                    double t82796 = b2f*c*t82759;
                    double t82797 = t82793+t82794+t82795+t82796;
                    double t82798 = 1.0/t82797;
                    double t82799 = t82792*t82798*(1.0/2.0);
                    double t82800 = t82799+1.0;
                    double t82801 = log(t82800);
                    double t82802 = a1f*c*t82759;
                    double t82803 = t82802+1.0;
                    double t82804 = c0f*t82801*t82803*2.0;
                    double t82805 = c0p*t82774*t82776*2.0;
                    double t82806 = gamma_bb[index]*gcaa*t82782*4.0;
                    double t82807 = gamma_bb[index]*gcaa*t82783*t82777*t82778*4.0;
                    double t82808 = t82784*t82777*t82778*6.0;
                    double t82809 = t82780*t82781*t82779;
                    double t82810 = t82806+t82807+t82808+t82809+1.0;
                    double t82811 = 1.0/t82810;
                    double t82812 = ccaa4*t82811*t82780*t82781*t82779;
                    double t82813 = gamma_bb[index]*gcaa*t82782;
                    double t82814 = t82813+1.0;
                    double t82815 = 1.0/t82814;
                    double t82816 = ccaa1*gamma_bb[index]*gcaa*t82815*t82782;
                    double t82817 = gamma_bb[index]*gcaa*t82782*3.0;
                    double t82818 = gamma_bb[index]*gcaa*t82783*t82777*t82778;
                    double t82819 = t82784*t82777*t82778*3.0;
                    double t82820 = t82817+t82818+t82819+1.0;
                    double t82821 = 1.0/t82820;
                    double t82822 = ccaa3*gamma_bb[index]*gcaa*t82821*t82783*t82777*t82778;
                    double t82823 = gamma_bb[index]*gcaa*t82782*2.0;
                    double t82824 = t82784*t82777*t82778;
                    double t82825 = t82823+t82824+1.0;
                    double t82826 = 1.0/t82825;
                    double t82827 = ccaa2*t82826*t82784*t82777*t82778;
                    double t82828 = ccaa0+t82812+t82822+t82816+t82827;
                    double t82829 = t82804-t82805;
                    double t82830 = t82791*t82829*t82788;
                    double t82831 = t82830+t82805;
                    double t82832 = ( (t82785 > 0.0) ?  1.0 : 0.0 ) ;
                    double t82833 = 1.0/tau_b[index];
                    double t82834 = 1.0/(tau_b[index]*tau_b[index]);
                    double t82835 = 0.0 ;
                    double t82836 = tau_b[index]*2.0;
                    double t82837 = 1.0/rho_b[index];
                    double t82838 = t82836-gamma_bb[index]*t82837*(1.0/4.0);
                    double t82839 = 1.0/(k*k);
                    double t82840 = rho_b[index]*2.0;
                    double t82841 = 1.0/pow(t82840,2.0/3.0);
                    double t82842 = pow(rho_b[index],5.0/3.0);
                    double t82843 = C_k*t82833*t82842;
                    double t82844 = t82843+1.0;
                    double t82845 = t82843-1.0;
                    double t82846 = 1.0/(t82844*t82844);
                    double t82847 = t82845*t82845;
                    double t82848 = t82847*t82847;
                    double t82849 = t82848*t82848;
                    double t82850 = 1.0/pow(t82844,1.1E1);
                    double t82851 = 1.0/(t82844*t82844*t82844);
                    double t82852 = 1.0/(t82844*t82844*t82844*t82844);
                    double t82853 = 1.0/(t82844*t82844*t82844*t82844*t82844);
                    double t82854 = 1.0/(t82844*t82844*t82844*t82844*t82844*t82844);
                    double t82855 = 1.0/(t82844*t82844*t82844*t82844*t82844*t82844*t82844);
                    double t82856 = 1.0/(t82844*t82844*t82844*t82844*t82844*t82844*t82844*t82844);
                    double t82857 = 1.0/(t82844*t82844*t82844*t82844*t82844*t82844*t82844*t82844*t82844);
                    double t82858 = 1.0/pow(t82844,1.0E1);
                    v_gamma_bb_tau_b_[index] = t82831*t82832*t82834*t82828*(-1.0/8.0)+t82833*t82835*t82828*(t82805+t82791* \
                       t82788*(t82804-c0p*t82774*t82776*2.0))*(1.0/8.0)-rho_b[index]*t82831*(t82835*(t82833*t82838*(1.0/2.0) \
                       -1.0)+t82832*(t82833-t82834*t82838*(1.0/2.0)))*(ccaa1*gcaa*t82815*t82782+ccaa2*gamma_bb[index]*t82826* \
                       t82784*t82778*2.0-ccaa1*gamma_bb[index]*1.0/(t82814*t82814)*t82784*t82778-ccaa2*1.0/(t82825*t82825) \
                       *t82784*t82777*t82778*(gcaa*t82782*2.0+gamma_bb[index]*t82784*t82778*2.0)-ccaa4*1.0/(t82810*t82810) \
                       *t82780*t82781*t82779*(gcaa*t82782*4.0+gamma_bb[index]*t82784*t82778*1.2E1+gamma_bb[index]*t82780* \
                       t82781*t82777*4.0+gcaa*t82783*t82777*t82778*1.2E1)+ccaa4*gamma_bb[index]*t82811*t82780*t82781*t82777* \
                       4.0+ccaa3*gcaa*t82821*t82783*t82777*t82778*3.0-ccaa3*gamma_bb[index]*gcaa*1.0/(t82820*t82820)*t82783* \
                       t82777*t82778*(gcaa*t82782*3.0+gamma_bb[index]*t82784*t82778*6.0+gcaa*t82783*t82777*t82778*3.0))+mu_* \
                       t82841*t82837*t82839*1.0/pow((gamma_bb[index]*mu_*1.0/(rho_b[index]*rho_b[index])*t82841*t82839*(1.0/ \
                       4.0))/kp+1.0,2.0)*(X-1.0)*((C_k*a_1*t82842*t82834)/t82844-C_k*a_1*t82842*t82834*t82845*t82846-C_k* \
                       a_2*t82842*t82851*t82834*t82847*2.0+C_k*a_2*t82842*t82834*t82845*t82846*2.0+C_k*a_3*t82842*t82851* \
                       t82834*t82847*3.0-C_k*a_4*t82842*t82834*t82853*t82848*4.0+C_k*a_5*t82842*t82834*t82853*t82848*5.0- \
                       C_k*a_8*t82842*t82834*t82857*t82849*8.0+C_k*a_9*t82842*t82834*t82857*t82849*9.0-C_k*a_10*t82850*t82842* \
                       t82834*t82847*t82849*1.0E1+C_k*a_11*t82850*t82842*t82834*t82847*t82849*1.1E1+C_k*a_10*t82842*t82834* \
                       t82845*t82849*t82858*1.0E1-C_k*a_3*t82842*t82834*t82852*t82845*t82847*3.0+C_k*a_4*t82842*t82834*t82852* \
                       t82845*t82847*4.0-C_k*a_5*t82842*t82834*t82845*t82854*t82848*5.0+C_k*a_6*t82842*t82834*t82845*t82854* \
                       t82848*6.0-C_k*a_6*t82842*t82834*t82855*t82847*t82848*6.0+C_k*a_7*t82842*t82834*t82855*t82847*t82848* \
                       7.0-C_k*a_9*t82842*t82834*t82845*t82849*t82858*9.0-C_k*a_11*t82842*t82834*1.0/pow(t82844,1.2E1)*t82845* \
                       t82847*t82849*1.1E1-C_k*a_7*t82842*t82834*t82845*t82847*t82856*t82848*7.0+C_k*a_8*t82842*t82834*t82845* \
                       t82847*t82856*t82848*8.0)*(1.0/4.0);
                } else {
                    v_gamma_bb_tau_b_[index] = 0.0;
                } 
          
            }  
        }
    }
}

}}

