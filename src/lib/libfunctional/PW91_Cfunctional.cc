#include <libmints/vector.h>
#include "PW91_Cfunctional.h"
#include "utility.h"
#include <cmath>

using namespace psi;

namespace psi {

PW91_CFunctional::PW91_CFunctional()
{
    name_ = "PW91_C";
    description_ = "    PW91 Correlation\n";
    citation_ = "    J.P. Perdew, et. al., Phys. Rev. B., 46(11), 6671-6687, 1992\n";
    alpha_ = 1.0;
    omega_ = 0.0;
    lrc_ = false;
    gga_ = true;
    meta_ = false;
    parameters_["c"] =   6.2035049089939986E-01;
    parameters_["two_13"] =   1.2599210498948732E+00;
    parameters_["k"] =   3.0936677262801355E+00;
    parameters_["pi_m12"] =   5.6418958354775628E-01;
    parameters_["d2fz0"] =   1.7099210000000000E+00;
    parameters_["Aa"] =   1.6886999999999999E-02;
    parameters_["a1a"] =   1.1125000000000000E-01;
    parameters_["b1a"] =   1.0356999999999999E+01;
    parameters_["b2a"] =   3.6231000000000000E+00;
    parameters_["b3a"] =   8.8026000000000004E-01;
    parameters_["b4a"] =   4.9670999999999998E-01;
    parameters_["c0p"] =   3.1091000000000001E-02;
    parameters_["a1p"] =   2.1370000000000000E-01;
    parameters_["b1p"] =   7.5956999999999999E+00;
    parameters_["b2p"] =   3.5876000000000001E+00;
    parameters_["b3p"] =   1.6382000000000001E+00;
    parameters_["b4p"] =   4.9293999999999999E-01;
    parameters_["c0f"] =   1.5545000000000000E-02;
    parameters_["a1f"] =   2.0548000000000000E-01;
    parameters_["b1f"] =   1.4118900000000000E+01;
    parameters_["b2f"] =   6.1977000000000002E+00;
    parameters_["b3f"] =   3.3662000000000001E+00;
    parameters_["b4f"] =   6.2517000000000000E-01;
    parameters_["alph"] =   8.9999999999999997E-02;
    parameters_["bet"] =   6.6726322680061109E-02;
    parameters_["nu"] =   1.5755920349483143E+01;
    parameters_["Cc0"] =   4.2350000000000000E-03;
    parameters_["Cx"] =  -1.6670000000000001E-03;
    parameters_["Cc1"] =   2.5680000000000001E+00;
    parameters_["Cc2"] =   2.3265999999999998E+01;
    parameters_["Cc3"] =   7.3889999999999997E-03;
    parameters_["Cc4"] =   8.7230000000000008E+00;
    parameters_["Cc5"] =   4.7199999999999998E-01;
    parameters_["Cc6"] =   7.3889999999999997E-02;
}
PW91_CFunctional::~PW91_CFunctional()
{
}
void PW91_CFunctional::compute_functional(const std::map<std::string,SharedVector>& in, const std::map<std::string,SharedVector>& out, int npoints, int deriv, double alpha)
{
    double c = parameters_["c"];
    double two_13 = parameters_["two_13"];
    double k = parameters_["k"];
    double pi_m12 = parameters_["pi_m12"];
    double d2fz0 = parameters_["d2fz0"];
    double Aa = parameters_["Aa"];
    double a1a = parameters_["a1a"];
    double b1a = parameters_["b1a"];
    double b2a = parameters_["b2a"];
    double b3a = parameters_["b3a"];
    double b4a = parameters_["b4a"];
    double c0p = parameters_["c0p"];
    double a1p = parameters_["a1p"];
    double b1p = parameters_["b1p"];
    double b2p = parameters_["b2p"];
    double b3p = parameters_["b3p"];
    double b4p = parameters_["b4p"];
    double c0f = parameters_["c0f"];
    double a1f = parameters_["a1f"];
    double b1f = parameters_["b1f"];
    double b2f = parameters_["b2f"];
    double b3f = parameters_["b3f"];
    double b4f = parameters_["b4f"];
    double alph = parameters_["alph"];
    double bet = parameters_["bet"];
    double nu = parameters_["nu"];
    double Cc0 = parameters_["Cc0"];
    double Cx = parameters_["Cx"];
    double Cc1 = parameters_["Cc1"];
    double Cc2 = parameters_["Cc2"];
    double Cc3 = parameters_["Cc3"];
    double Cc4 = parameters_["Cc4"];
    double Cc5 = parameters_["Cc5"];
    double Cc6 = parameters_["Cc6"];

    // Overall scale factor
    double scale = alpha_ * alpha;

    // => Input variables <= //

    double* rho_ap = NULL;
    double* rho_bp = NULL;
    double* gamma_aap = NULL;
    double* gamma_abp = NULL;
    double* gamma_bbp = NULL;
    double* tau_ap = NULL;
    double* tau_bp = NULL;

    if (true) {
        rho_ap = in.find("RHO_A")->second->pointer();
        rho_bp = in.find("RHO_B")->second->pointer();
    }
    if (gga_) {  
        gamma_aap = in.find("GAMMA_AA")->second->pointer();
        gamma_abp = in.find("GAMMA_AB")->second->pointer();
        gamma_bbp = in.find("GAMMA_BB")->second->pointer();
    } 
    if (meta_)  {
        tau_ap = in.find("TAU_A")->second->pointer();
        tau_bp = in.find("TAU_B")->second->pointer();
    }

    // => Outut variables <= //

    double* v = NULL;

    double* v_rho_a = NULL;
    double* v_rho_b = NULL;
    double* v_gamma_aa = NULL;
    double* v_gamma_ab = NULL;
    double* v_gamma_bb = NULL;
    double* v_tau_a = NULL;
    double* v_tau_b = NULL;
     
    double* v_rho_a_rho_a = NULL;
    double* v_rho_a_rho_b = NULL;
    double* v_rho_b_rho_b = NULL;
    double* v_gamma_aa_gamma_aa = NULL;
    double* v_gamma_aa_gamma_ab = NULL;
    double* v_gamma_aa_gamma_bb = NULL;
    double* v_gamma_ab_gamma_ab = NULL;
    double* v_gamma_ab_gamma_bb = NULL;
    double* v_gamma_bb_gamma_bb = NULL;
    double* v_tau_a_tau_a = NULL;
    double* v_tau_a_tau_b = NULL;
    double* v_tau_b_tau_b = NULL;
    double* v_rho_a_gamma_aa = NULL;
    double* v_rho_a_gamma_ab = NULL;
    double* v_rho_a_gamma_bb = NULL;
    double* v_rho_b_gamma_aa = NULL;
    double* v_rho_b_gamma_ab = NULL;
    double* v_rho_b_gamma_bb = NULL;
    double* v_rho_a_tau_a = NULL;
    double* v_rho_a_tau_b = NULL;
    double* v_rho_b_tau_a = NULL;
    double* v_rho_b_tau_b = NULL;
    double* v_gamma_aa_tau_a = NULL;
    double* v_gamma_aa_tau_b = NULL;
    double* v_gamma_ab_tau_a = NULL;
    double* v_gamma_ab_tau_b = NULL;
    double* v_gamma_bb_tau_a = NULL;
    double* v_gamma_bb_tau_b = NULL;

    if (deriv >= 0) {
        v = out.find("V")->second->pointer();
    } 
    if (deriv >= 1) {
        if (true) {
            v_rho_a = out.find("V_RHO_A")->second->pointer();
            v_rho_b = out.find("V_RHO_B")->second->pointer();
        }
        if (gga_) {
            v_gamma_aa = out.find("V_GAMMA_AA")->second->pointer();
            v_gamma_ab = out.find("V_GAMMA_AB")->second->pointer();
            v_gamma_bb = out.find("V_GAMMA_BB")->second->pointer();
        }
        if (meta_) {    
            v_tau_a = out.find("V_TAU_A")->second->pointer();
            v_tau_b = out.find("V_TAU_B")->second->pointer();
        }
    }
    if (deriv >= 2) {
        if (true) {
            v_rho_a_rho_a = out.find("V_RHO_A_RHO_A")->second->pointer();
            v_rho_a_rho_b = out.find("V_RHO_A_RHO_B")->second->pointer();
            v_rho_b_rho_b = out.find("V_RHO_B_RHO_B")->second->pointer();
        }
        if (gga_) {
            v_gamma_aa_gamma_aa = out.find("V_GAMMA_AA_GAMMA_AA")->second->pointer();
            v_gamma_aa_gamma_ab = out.find("V_GAMMA_AA_GAMMA_AB")->second->pointer();
            v_gamma_aa_gamma_bb = out.find("V_GAMMA_AA_GAMMA_BB")->second->pointer();
            v_gamma_ab_gamma_ab = out.find("V_GAMMA_AB_GAMMA_AB")->second->pointer();
            v_gamma_ab_gamma_bb = out.find("V_GAMMA_AB_GAMMA_BB")->second->pointer();
            v_gamma_bb_gamma_bb = out.find("V_GAMMA_BB_GAMMA_BB")->second->pointer();
        }
        if (meta_) {
            v_tau_a_tau_a = out.find("V_TAU_A_TAU_A")->second->pointer();
            v_tau_a_tau_b = out.find("V_TAU_A_TAU_B")->second->pointer();
            v_tau_b_tau_b = out.find("V_TAU_B_TAU_B")->second->pointer();
        }
        if (gga_) {
            v_rho_a_gamma_aa = out.find("V_RHO_A_GAMMA_AA")->second->pointer();
            v_rho_a_gamma_ab = out.find("V_RHO_A_GAMMA_AB")->second->pointer();
            v_rho_a_gamma_bb = out.find("V_RHO_A_GAMMA_BB")->second->pointer();
            v_rho_b_gamma_aa = out.find("V_RHO_B_GAMMA_AA")->second->pointer();
            v_rho_b_gamma_ab = out.find("V_RHO_B_GAMMA_AB")->second->pointer();
            v_rho_b_gamma_bb = out.find("V_RHO_B_GAMMA_BB")->second->pointer();
        }
        if (meta_) {
            v_rho_a_tau_a = out.find("V_RHO_A_TAU_A")->second->pointer();
            v_rho_a_tau_b = out.find("V_RHO_A_TAU_B")->second->pointer();
            v_rho_b_tau_a = out.find("V_RHO_B_TAU_A")->second->pointer();
            v_rho_b_tau_b = out.find("V_RHO_B_TAU_B")->second->pointer();
        }
        if (gga_ && meta_) {
            v_gamma_aa_tau_a = out.find("V_GAMMA_AA_TAU_A")->second->pointer();
            v_gamma_aa_tau_b = out.find("V_GAMMA_AA_TAU_B")->second->pointer();
            v_gamma_ab_tau_a = out.find("V_GAMMA_AB_TAU_A")->second->pointer();
            v_gamma_ab_tau_b = out.find("V_GAMMA_AB_TAU_B")->second->pointer();
            v_gamma_bb_tau_a = out.find("V_GAMMA_BB_TAU_A")->second->pointer();
            v_gamma_bb_tau_b = out.find("V_GAMMA_BB_TAU_B")->second->pointer();
        }
    }

    // => Loop over points <= //

    for (int Q = 0; Q < npoints; Q++) {

        // Input variables 
        double rho_a;
        double rho_b;
        double gamma_aa;
        double gamma_ab;
        double gamma_bb;
        double tau_a;
        double tau_b;

        if (true) {
            rho_a = rho_ap[Q];
            rho_b = rho_bp[Q];
        }        
        if (gga_) {
            gamma_aa = gamma_aap[Q];
            gamma_ab = gamma_abp[Q];
            gamma_bb = gamma_bbp[Q];
        }        
        if (meta_) {
            tau_a = tau_ap[Q];
            tau_b = tau_bp[Q];
        }        

        // Definitions (asymptotics to prevent numerical problems)
        if (rho_a < lsda_cutoff_ && rho_b < lsda_cutoff_) {
            continue;
        } else if (rho_a < lsda_cutoff_) {
            // v
            if (deriv >= 0) {
                double t21295 = rho_a+rho_b;
                double t21296 = 1.0/bet;
                double t21297 = 1.0/pow(t21295,1.0/3.0);
                double t21298 = c*t21297;
                double t21299 = pow(2.0,1.0/3.0);
                double t21300 = sqrt(t21298);
                double t21301 = pow(t21298,3.0/2.0);
                double t21302 = c*c;
                double t21303 = 1.0/pow(t21295,2.0/3.0);
                double t21304 = 1.0/c0p;
                double t21305 = b1p*t21300;
                double t21306 = b3p*t21301;
                double t21307 = b4p*t21302*t21303;
                double t21308 = b2p*c*t21297;
                double t21309 = t21305+t21306+t21307+t21308;
                double t21310 = 1.0/t21309;
                double t21311 = t21310*t21304*(1.0/2.0);
                double t21312 = t21311+1.0;
                double t21313 = log(t21312);
                double t21314 = a1p*c*t21297;
                double t21315 = t21314+1.0;
                double t21316 = c0p*t21313*t21315*2.0;
                double t21317 = gamma_ab*2.0;
                double t21318 = gamma_aa+gamma_bb+t21317;
                double t21319 = 1.0/(bet*bet);
                double t21320 = 1.0/(k*k);
                double t21321 = 1.0/(pi_m12*pi_m12*pi_m12*pi_m12);
                double t21322 = 1.0/pow(t21295,1.4E1/3.0);
                double t21323 = t21299*2.0;
                double t21324 = t21323-2.0;
                double t21325 = two_13*2.0;
                double t21326 = t21325-2.0;
                double t21327 = 1.0/t21326;
                double t21328 = 1.0/c0f;
                double t21329 = b1f*t21300;
                double t21330 = b3f*t21301;
                double t21331 = b4f*t21302*t21303;
                double t21332 = b2f*c*t21297;
                double t21333 = t21330+t21331+t21332+t21329;
                double t21334 = 1.0/t21333;
                double t21335 = t21334*t21328*(1.0/2.0);
                double t21336 = t21335+1.0;
                double t21337 = log(t21336);
                double t21338 = a1f*c*t21297;
                double t21339 = t21338+1.0;
                double t21350 = c0f*t21337*t21339*2.0;
                double t21340 = -t21350+t21316;
                double t21341 = t21316-t21340*t21324*t21327;
                double t21342 = alph*t21341*t21319*4.0;
                double t21343 = exp(t21342);
                double t21344 = t21343-1.0;
                double t21345 = t21318*t21318;
                double t21346 = pow(2.0,2.0/3.0);
                double t21347 = 1.0/k;
                double t21348 = 1.0/(pi_m12*pi_m12);
                double t21349 = 1.0/pow(t21295,7.0/3.0);
                double t21351 = t21350-t21316;
                double t21352 = t21324*t21351*t21327;
                v[Q] += scale * -t21295*(t21316+t21352-((bet*bet)*log((alph*t21296*(t21318*t21346*t21347*t21348*t21349*(1.0/1.6E1)+(alph*t21320*t21321*t21322*t21345*t21296*t21299*(1.0/6.4E1))/t21344)*2.0)/((alph*t21318*t21346*t21347*t21348*t21349*t21296*(1.0/8.0))/(exp(alph*t21319*(t21316+t21352)*4.0)-1.0)+(alph*alph)*t21320*t21321*t21322*1.0/(t21344*t21344)*t21345*t21319*t21299*(1.0/3.2E1)+1.0)+1.0)*(1.0/4.0))/alph+nu*t21318*t21346*t21347*t21348*t21349*exp(t21320*t21318*1.0/pow(t21295,8.0/3.0)*t21299*(-2.5E1/2.0))*(Cc0+Cx*(1.0E1/7.0)-(Cc1*(1.0/1.0E3)+Cc2*c*t21297*(1.0/1.0E3)+Cc3*t21302*t21303*(1.0/1.0E3))/(Cc4*c*t21297+Cc5*t21302*t21303+(Cc6*c*t21302)/t21295+1.0))*(1.0/3.2E1));
            }
            
            // v_rho_a
            if (deriv >= 1) {
                double t21354 = rho_a+rho_b;
                double t21355 = 1.0/pow(t21354,1.0/3.0);
                double t21356 = c*t21355;
                double t21357 = sqrt(t21356);
                double t21358 = b1f*t21357;
                double t21359 = pow(t21356,3.0/2.0);
                double t21360 = b3f*t21359;
                double t21361 = c*c;
                double t21362 = 1.0/pow(t21354,2.0/3.0);
                double t21363 = b4f*t21361*t21362;
                double t21364 = b2f*c*t21355;
                double t21365 = t21360+t21363+t21364+t21358;
                double t21366 = 1.0/pow(t21354,4.0/3.0);
                double t21367 = b1p*t21357;
                double t21368 = b3p*t21359;
                double t21369 = b4p*t21361*t21362;
                double t21370 = b2p*c*t21355;
                double t21371 = t21370+t21367+t21368+t21369;
                double t21372 = 1.0/pow(t21354,5.0/3.0);
                double t21373 = 1.0/sqrt(t21356);
                double t21374 = 1.0/c0f;
                double t21375 = 1.0/t21365;
                double t21376 = t21374*t21375*(1.0/2.0);
                double t21377 = t21376+1.0;
                double t21378 = 1.0/c0p;
                double t21379 = 1.0/t21371;
                double t21380 = t21378*t21379*(1.0/2.0);
                double t21381 = t21380+1.0;
                double t21382 = pow(2.0,1.0/3.0);
                double t21383 = 1.0/bet;
                double t21384 = log(t21381);
                double t21385 = a1p*c*t21355;
                double t21386 = t21385+1.0;
                double t21387 = t21382*2.0;
                double t21388 = t21387-2.0;
                double t21389 = two_13*2.0;
                double t21390 = t21389-2.0;
                double t21391 = 1.0/t21390;
                double t21392 = log(t21377);
                double t21393 = a1f*c*t21355;
                double t21394 = t21393+1.0;
                double t21395 = c0p*t21384*t21386*2.0;
                double t21396 = gamma_ab*2.0;
                double t21397 = gamma_aa+gamma_bb+t21396;
                double t21398 = 1.0/(bet*bet);
                double t21399 = 1.0/(k*k);
                double t21400 = 1.0/(pi_m12*pi_m12*pi_m12*pi_m12);
                double t21401 = 1.0/pow(t21354,1.4E1/3.0);
                double t21412 = c0f*t21392*t21394*2.0;
                double t21402 = -t21412+t21395;
                double t21403 = t21395-t21402*t21391*t21388;
                double t21404 = alph*t21403*t21398*4.0;
                double t21405 = exp(t21404);
                double t21406 = t21405-1.0;
                double t21407 = t21397*t21397;
                double t21408 = pow(2.0,2.0/3.0);
                double t21409 = 1.0/k;
                double t21410 = 1.0/(pi_m12*pi_m12);
                double t21411 = 1.0/pow(t21354,7.0/3.0);
                double t21413 = t21412-t21395;
                double t21414 = t21413*t21391*t21388;
                double t21415 = t21414+t21395;
                double t21416 = alph*t21415*t21398*4.0;
                double t21417 = exp(t21416);
                double t21418 = t21417-1.0;
                double t21419 = 1.0/t21418;
                double t21420 = alph*alph;
                double t21421 = 1.0/t21377;
                double t21422 = 1.0/(t21365*t21365);
                double t21423 = b4f*t21361*t21372*(2.0/3.0);
                double t21424 = b2f*c*t21366*(1.0/3.0);
                double t21425 = b1f*c*t21373*t21366*(1.0/6.0);
                double t21426 = b3f*c*t21357*t21366*(1.0/2.0);
                double t21427 = t21423+t21424+t21425+t21426;
                double t21428 = t21421*t21422*t21427*t21394;
                double t21429 = 1.0/t21381;
                double t21430 = 1.0/(t21371*t21371);
                double t21431 = b4p*t21361*t21372*(2.0/3.0);
                double t21432 = b2p*c*t21366*(1.0/3.0);
                double t21433 = b1p*c*t21373*t21366*(1.0/6.0);
                double t21434 = b3p*c*t21357*t21366*(1.0/2.0);
                double t21435 = t21431+t21432+t21433+t21434;
                double t21436 = a1p*c*c0p*t21366*t21384*(2.0/3.0);
                double t21439 = t21430*t21435*t21429*t21386;
                double t21448 = a1f*c*c0f*t21392*t21366*(2.0/3.0);
                double t21437 = t21436+t21428-t21439-t21448;
                double t21438 = t21391*t21437*t21388;
                double t21440 = 1.0/(t21418*t21418);
                double t21441 = alph*t21410*t21411*t21408*t21409*t21383*t21419*t21397*(1.0/8.0);
                double t21442 = t21410*t21411*t21408*t21409*t21397*(1.0/1.6E1);
                double t21443 = t21400*t21401*t21420*t21440*t21407*t21382*t21398*t21399*(1.0/3.2E1);
                double t21444 = t21441+t21443+1.0;
                double t21445 = 1.0/pow(t21354,1.7E1/3.0);
                double t21446 = 1.0/pow(t21354,1.0E1/3.0);
                double t21447 = 1.0/(bet*bet*bet);
                double t21449 = -t21436+t21438+t21439;
                double t21450 = 1.0/pow(t21354,8.0/3.0);
                double t21464 = t21450*t21382*t21397*t21399*(2.5E1/2.0);
                double t21451 = exp(-t21464);
                double t21452 = Cx*(1.0E1/7.0);
                double t21453 = Cc1*(1.0/1.0E3);
                double t21454 = Cc3*t21361*t21362*(1.0/1.0E3);
                double t21455 = Cc2*c*t21355*(1.0/1.0E3);
                double t21456 = t21453+t21454+t21455;
                double t21457 = Cc5*t21361*t21362;
                double t21458 = 1.0/t21354;
                double t21459 = Cc6*c*t21361*t21458;
                double t21460 = Cc4*c*t21355;
                double t21461 = t21460+t21457+t21459+1.0;
                double t21462 = 1.0/t21461;
                double t21470 = t21462*t21456;
                double t21463 = Cc0+t21452-t21470;
                double t21465 = 1.0/alph;
                double t21466 = bet*bet;
                double t21467 = alph*t21400*t21401*t21407*t21382*t21383*t21419*t21399*(1.0/6.4E1);
                double t21468 = t21442+t21467;
                double t21469 = 1.0/t21444;
                v_rho_a[Q] += scale * -t21414-t21395-t21354*(-t21436+t21438+t21439+(t21465*t21466*(alph*t21383*t21469*(t21410*t21408*t21409*t21446*t21397*(7.0/4.8E1)+alph*t21400*t21407*t21382*t21445*t21383*t21419*t21399*(7.0/9.6E1)+t21400*t21401*t21420*t21440*t21407*t21417*t21382*t21447*t21449*t21399*(1.0/1.6E1))*2.0-alph*1.0/(t21444*t21444)*t21383*t21468*(t21400*t21420*t21440*t21407*t21382*t21445*t21398*t21399*(7.0/4.8E1)+alph*t21410*t21408*t21409*t21383*t21419*t21446*t21397*(7.0/2.4E1)+t21410*t21411*t21420*t21440*t21408*t21417*t21409*t21447*t21449*t21397*(1.0/2.0)+alph*1.0/(bet*bet*bet*bet)*t21400*t21401*t21420*t21407*t21417*t21382*1.0/(t21418*t21418*t21418)*t21449*t21399*(1.0/4.0))*2.0)*(1.0/4.0))/((alph*t21383*(t21442+(alph*t21400*t21401*t21407*t21382*t21383*t21399*(1.0/6.4E1))/t21406)*2.0)/(t21441+t21400*t21401*t21420*1.0/(t21406*t21406)*t21407*t21382*t21398*t21399*(1.0/3.2E1)+1.0)+1.0)+1.0/(k*k*k)*nu*t21410*t21451*t21407*1.0/(t21354*t21354*t21354*t21354*t21354*t21354)*t21463*(2.5E1/1.2E1)+nu*t21410*t21411*t21451*t21408*t21409*t21397*(t21462*(Cc2*c*t21366*(1.0/3.0E3)+Cc3*t21361*t21372*(1.0/1.5E3))-1.0/(t21461*t21461)*t21456*(Cc4*c*t21366*(1.0/3.0)+Cc5*t21361*t21372*(2.0/3.0)+Cc6*c*t21361*1.0/(t21354*t21354)))*(1.0/3.2E1)-nu*t21410*t21451*t21408*t21409*t21463*t21446*t21397*(7.0/9.6E1))+t21465*t21466*log(alph*t21383*t21468*t21469*2.0+1.0)*(1.0/4.0)-nu*t21410*t21411*t21451*t21408*t21409*t21463*t21397*(1.0/3.2E1);
            }
            
            // v_rho_b
            if (deriv >= 1) {
                double t21472 = rho_a+rho_b;
                double t21473 = 1.0/pow(t21472,1.0/3.0);
                double t21474 = c*t21473;
                double t21475 = sqrt(t21474);
                double t21476 = b1f*t21475;
                double t21477 = pow(t21474,3.0/2.0);
                double t21478 = b3f*t21477;
                double t21479 = c*c;
                double t21480 = 1.0/pow(t21472,2.0/3.0);
                double t21481 = b4f*t21480*t21479;
                double t21482 = b2f*c*t21473;
                double t21483 = t21481+t21482+t21476+t21478;
                double t21484 = 1.0/pow(t21472,4.0/3.0);
                double t21485 = b1p*t21475;
                double t21486 = b3p*t21477;
                double t21487 = b4p*t21480*t21479;
                double t21488 = b2p*c*t21473;
                double t21489 = t21485+t21486+t21487+t21488;
                double t21490 = 1.0/pow(t21472,5.0/3.0);
                double t21491 = 1.0/sqrt(t21474);
                double t21492 = 1.0/c0f;
                double t21493 = 1.0/t21483;
                double t21494 = t21492*t21493*(1.0/2.0);
                double t21495 = t21494+1.0;
                double t21496 = 1.0/c0p;
                double t21497 = 1.0/t21489;
                double t21498 = t21496*t21497*(1.0/2.0);
                double t21499 = t21498+1.0;
                double t21500 = pow(2.0,1.0/3.0);
                double t21501 = 1.0/bet;
                double t21502 = log(t21499);
                double t21503 = a1p*c*t21473;
                double t21504 = t21503+1.0;
                double t21505 = t21500*2.0;
                double t21506 = t21505-2.0;
                double t21507 = two_13*2.0;
                double t21508 = t21507-2.0;
                double t21509 = 1.0/t21508;
                double t21510 = log(t21495);
                double t21511 = a1f*c*t21473;
                double t21512 = t21511+1.0;
                double t21513 = c0p*t21502*t21504*2.0;
                double t21514 = gamma_ab*2.0;
                double t21515 = gamma_aa+gamma_bb+t21514;
                double t21516 = 1.0/(bet*bet);
                double t21517 = 1.0/(k*k);
                double t21518 = 1.0/(pi_m12*pi_m12*pi_m12*pi_m12);
                double t21519 = 1.0/pow(t21472,1.4E1/3.0);
                double t21530 = c0f*t21510*t21512*2.0;
                double t21520 = -t21530+t21513;
                double t21521 = t21513-t21520*t21506*t21509;
                double t21522 = alph*t21521*t21516*4.0;
                double t21523 = exp(t21522);
                double t21524 = t21523-1.0;
                double t21525 = t21515*t21515;
                double t21526 = pow(2.0,2.0/3.0);
                double t21527 = 1.0/k;
                double t21528 = 1.0/(pi_m12*pi_m12);
                double t21529 = 1.0/pow(t21472,7.0/3.0);
                double t21531 = t21530-t21513;
                double t21532 = t21531*t21506*t21509;
                double t21533 = t21513+t21532;
                double t21534 = alph*t21533*t21516*4.0;
                double t21535 = exp(t21534);
                double t21536 = t21535-1.0;
                double t21537 = 1.0/t21536;
                double t21538 = alph*alph;
                double t21539 = 1.0/t21495;
                double t21540 = 1.0/(t21483*t21483);
                double t21541 = b4f*t21490*t21479*(2.0/3.0);
                double t21542 = b2f*c*t21484*(1.0/3.0);
                double t21543 = b1f*c*t21491*t21484*(1.0/6.0);
                double t21544 = b3f*c*t21475*t21484*(1.0/2.0);
                double t21545 = t21541+t21542+t21543+t21544;
                double t21546 = t21512*t21540*t21545*t21539;
                double t21547 = 1.0/t21499;
                double t21548 = 1.0/(t21489*t21489);
                double t21549 = b4p*t21490*t21479*(2.0/3.0);
                double t21550 = b2p*c*t21484*(1.0/3.0);
                double t21551 = b1p*c*t21491*t21484*(1.0/6.0);
                double t21552 = b3p*c*t21475*t21484*(1.0/2.0);
                double t21553 = t21550+t21551+t21552+t21549;
                double t21554 = a1p*c*c0p*t21502*t21484*(2.0/3.0);
                double t21557 = t21504*t21553*t21547*t21548;
                double t21566 = a1f*c*c0f*t21510*t21484*(2.0/3.0);
                double t21555 = t21554+t21546-t21557-t21566;
                double t21556 = t21506*t21509*t21555;
                double t21558 = 1.0/(t21536*t21536);
                double t21559 = alph*t21501*t21515*t21526*t21527*t21528*t21537*t21529*(1.0/8.0);
                double t21560 = t21515*t21526*t21527*t21528*t21529*(1.0/1.6E1);
                double t21561 = t21500*t21516*t21525*t21517*t21518*t21519*t21538*t21558*(1.0/3.2E1);
                double t21562 = t21561+t21559+1.0;
                double t21563 = 1.0/pow(t21472,1.7E1/3.0);
                double t21564 = 1.0/pow(t21472,1.0E1/3.0);
                double t21565 = 1.0/(bet*bet*bet);
                double t21567 = -t21554+t21556+t21557;
                double t21568 = 1.0/pow(t21472,8.0/3.0);
                double t21582 = t21500*t21515*t21517*t21568*(2.5E1/2.0);
                double t21569 = exp(-t21582);
                double t21570 = Cx*(1.0E1/7.0);
                double t21571 = Cc1*(1.0/1.0E3);
                double t21572 = Cc3*t21480*t21479*(1.0/1.0E3);
                double t21573 = Cc2*c*t21473*(1.0/1.0E3);
                double t21574 = t21571+t21572+t21573;
                double t21575 = Cc5*t21480*t21479;
                double t21576 = 1.0/t21472;
                double t21577 = Cc6*c*t21576*t21479;
                double t21578 = Cc4*c*t21473;
                double t21579 = t21575+t21577+t21578+1.0;
                double t21580 = 1.0/t21579;
                double t21588 = t21580*t21574;
                double t21581 = Cc0+t21570-t21588;
                double t21583 = 1.0/alph;
                double t21584 = bet*bet;
                double t21585 = alph*t21500*t21501*t21525*t21517*t21518*t21519*t21537*(1.0/6.4E1);
                double t21586 = t21560+t21585;
                double t21587 = 1.0/t21562;
                v_rho_b[Q] += scale * -t21513-t21532-t21472*(-t21554+t21556+t21557+(t21583*t21584*(alph*t21501*t21587*(t21515*t21526*t21527*t21528*t21564*(7.0/4.8E1)+alph*t21500*t21501*t21525*t21517*t21518*t21563*t21537*(7.0/9.6E1)+t21500*t21525*t21517*t21535*t21518*t21519*t21538*t21565*t21558*t21567*(1.0/1.6E1))*2.0-alph*t21501*1.0/(t21562*t21562)*t21586*(t21500*t21516*t21525*t21517*t21518*t21563*t21538*t21558*(7.0/4.8E1)+alph*t21501*t21515*t21526*t21527*t21528*t21537*t21564*(7.0/2.4E1)+t21515*t21526*t21535*t21527*t21528*t21529*t21538*t21565*t21558*t21567*(1.0/2.0)+alph*1.0/(bet*bet*bet*bet)*t21500*t21525*t21517*t21535*t21518*1.0/(t21536*t21536*t21536)*t21519*t21538*t21567*(1.0/4.0))*2.0)*(1.0/4.0))/((alph*t21501*(t21560+(alph*t21500*t21501*t21525*t21517*t21518*t21519*(1.0/6.4E1))/t21524)*2.0)/(t21559+t21500*1.0/(t21524*t21524)*t21516*t21525*t21517*t21518*t21519*t21538*(1.0/3.2E1)+1.0)+1.0)+1.0/(k*k*k)*nu*t21525*1.0/(t21472*t21472*t21472*t21472*t21472*t21472)*t21581*t21528*t21569*(2.5E1/1.2E1)+nu*t21515*t21526*t21527*t21528*t21529*t21569*(t21580*(Cc2*c*t21484*(1.0/3.0E3)+Cc3*t21490*t21479*(1.0/1.5E3))-t21574*1.0/(t21579*t21579)*(Cc4*c*t21484*(1.0/3.0)+Cc5*t21490*t21479*(2.0/3.0)+Cc6*c*1.0/(t21472*t21472)*t21479))*(1.0/3.2E1)-nu*t21515*t21526*t21527*t21581*t21528*t21564*t21569*(7.0/9.6E1))+t21583*t21584*log(alph*t21501*t21586*t21587*2.0+1.0)*(1.0/4.0)-nu*t21515*t21526*t21527*t21581*t21528*t21529*t21569*(1.0/3.2E1);
            }
            
            // v_gamma_aa
            if (deriv >= 1) {
                double t21590 = rho_a+rho_b;
                double t21591 = 1.0/bet;
                double t21592 = 1.0/pow(t21590,1.0/3.0);
                double t21593 = c*t21592;
                double t21594 = pow(2.0,1.0/3.0);
                double t21595 = sqrt(t21593);
                double t21596 = pow(t21593,3.0/2.0);
                double t21597 = c*c;
                double t21598 = 1.0/pow(t21590,2.0/3.0);
                double t21599 = 1.0/c0p;
                double t21600 = b1p*t21595;
                double t21601 = b3p*t21596;
                double t21602 = b4p*t21597*t21598;
                double t21603 = b2p*c*t21592;
                double t21604 = t21600+t21601+t21602+t21603;
                double t21605 = 1.0/t21604;
                double t21606 = t21605*t21599*(1.0/2.0);
                double t21607 = t21606+1.0;
                double t21608 = log(t21607);
                double t21609 = a1p*c*t21592;
                double t21610 = t21609+1.0;
                double t21611 = c0p*t21610*t21608*2.0;
                double t21612 = 1.0/(bet*bet);
                double t21613 = 1.0/(k*k);
                double t21614 = 1.0/(pi_m12*pi_m12*pi_m12*pi_m12);
                double t21615 = 1.0/pow(t21590,1.4E1/3.0);
                double t21616 = t21594*2.0;
                double t21617 = t21616-2.0;
                double t21618 = two_13*2.0;
                double t21619 = t21618-2.0;
                double t21620 = 1.0/t21619;
                double t21621 = 1.0/c0f;
                double t21622 = b1f*t21595;
                double t21623 = b3f*t21596;
                double t21624 = b4f*t21597*t21598;
                double t21625 = b2f*c*t21592;
                double t21626 = t21622+t21623+t21624+t21625;
                double t21627 = 1.0/t21626;
                double t21628 = t21621*t21627*(1.0/2.0);
                double t21629 = t21628+1.0;
                double t21630 = log(t21629);
                double t21631 = a1f*c*t21592;
                double t21632 = t21631+1.0;
                double t21643 = c0f*t21630*t21632*2.0;
                double t21633 = t21611-t21643;
                double t21644 = t21620*t21633*t21617;
                double t21634 = t21611-t21644;
                double t21635 = alph*t21612*t21634*4.0;
                double t21636 = exp(t21635);
                double t21637 = t21636-1.0;
                double t21646 = gamma_ab*2.0;
                double t21638 = gamma_aa+gamma_bb+t21646;
                double t21639 = pow(2.0,2.0/3.0);
                double t21640 = 1.0/k;
                double t21641 = 1.0/(pi_m12*pi_m12);
                double t21642 = 1.0/pow(t21590,7.0/3.0);
                double t21645 = 1.0/t21637;
                double t21647 = alph*alph;
                double t21648 = 1.0/(t21637*t21637);
                double t21649 = gamma_aa*2.0;
                double t21650 = gamma_ab*4.0;
                double t21651 = gamma_bb*2.0;
                double t21652 = t21650+t21651+t21649;
                double t21653 = t21638*t21638;
                double t21654 = t21612*t21613*t21614*t21615*t21653*t21647*t21594*t21648*(1.0/3.2E1);
                double t21655 = alph*t21640*t21641*t21642*t21591*t21645*t21638*t21639*(1.0/8.0);
                double t21656 = t21654+t21655+1.0;
                double t21657 = t21640*t21641*t21642*t21638*t21639*(1.0/1.6E1);
                double t21658 = alph*t21613*t21614*t21615*t21653*t21591*t21645*t21594*(1.0/6.4E1);
                double t21659 = t21657+t21658;
                double t21660 = 1.0/t21656;
                double t21661 = 1.0/pow(t21590,8.0/3.0);
                double t21662 = exp(t21613*t21661*t21638*t21594*(-2.5E1/2.0));
                double t21663 = Cx*(1.0E1/7.0);
                double t21664 = Cc1*(1.0/1.0E3);
                double t21665 = Cc3*t21597*t21598*(1.0/1.0E3);
                double t21666 = Cc2*c*t21592*(1.0/1.0E3);
                double t21667 = t21664+t21665+t21666;
                double t21668 = Cc5*t21597*t21598;
                double t21669 = 1.0/t21590;
                double t21670 = Cc6*c*t21597*t21669;
                double t21671 = Cc4*c*t21592;
                double t21672 = t21670+t21671+t21668+1.0;
                double t21673 = 1.0/t21672;
                double t21674 = Cc0+t21663-t21673*t21667;
                v_gamma_aa[Q] += scale * t21590*(((bet*bet)*(alph*t21660*t21591*(t21640*t21641*t21642*t21639*(1.0/1.6E1)+alph*t21613*t21614*t21615*t21652*t21591*t21645*t21594*(1.0/6.4E1))*2.0-alph*t21591*1.0/(t21656*t21656)*t21659*(alph*t21640*t21641*t21642*t21591*t21645*t21639*(1.0/8.0)+t21612*t21613*t21614*t21615*t21652*t21647*t21594*t21648*(1.0/3.2E1))*2.0)*(1.0/4.0))/(alph*(alph*t21660*t21591*t21659*2.0+1.0))+1.0/(k*k*k)*nu*t21641*1.0/(t21590*t21590*t21590*t21590*t21590)*t21662*t21638*t21674*(2.5E1/3.2E1)-nu*t21640*t21641*t21642*t21662*t21674*t21639*(1.0/3.2E1));
            }
            
            // v_gamma_ab
            if (deriv >= 1) {
                double t21676 = rho_a+rho_b;
                double t21677 = 1.0/bet;
                double t21678 = 1.0/pow(t21676,1.0/3.0);
                double t21679 = c*t21678;
                double t21680 = pow(2.0,1.0/3.0);
                double t21681 = sqrt(t21679);
                double t21682 = pow(t21679,3.0/2.0);
                double t21683 = c*c;
                double t21684 = 1.0/pow(t21676,2.0/3.0);
                double t21685 = 1.0/c0p;
                double t21686 = b1p*t21681;
                double t21687 = b3p*t21682;
                double t21688 = b4p*t21683*t21684;
                double t21689 = b2p*c*t21678;
                double t21690 = t21686+t21687+t21688+t21689;
                double t21691 = 1.0/t21690;
                double t21692 = t21691*t21685*(1.0/2.0);
                double t21693 = t21692+1.0;
                double t21694 = log(t21693);
                double t21695 = a1p*c*t21678;
                double t21696 = t21695+1.0;
                double t21697 = c0p*t21694*t21696*2.0;
                double t21698 = 1.0/(bet*bet);
                double t21699 = 1.0/(k*k);
                double t21700 = 1.0/(pi_m12*pi_m12*pi_m12*pi_m12);
                double t21701 = 1.0/pow(t21676,1.4E1/3.0);
                double t21702 = t21680*2.0;
                double t21703 = t21702-2.0;
                double t21704 = two_13*2.0;
                double t21705 = t21704-2.0;
                double t21706 = 1.0/t21705;
                double t21707 = 1.0/c0f;
                double t21708 = b1f*t21681;
                double t21709 = b3f*t21682;
                double t21710 = b4f*t21683*t21684;
                double t21711 = b2f*c*t21678;
                double t21712 = t21710+t21711+t21708+t21709;
                double t21713 = 1.0/t21712;
                double t21714 = t21713*t21707*(1.0/2.0);
                double t21715 = t21714+1.0;
                double t21716 = log(t21715);
                double t21717 = a1f*c*t21678;
                double t21718 = t21717+1.0;
                double t21729 = c0f*t21716*t21718*2.0;
                double t21719 = -t21729+t21697;
                double t21720 = t21697-t21703*t21706*t21719;
                double t21721 = alph*t21720*t21698*4.0;
                double t21722 = exp(t21721);
                double t21723 = t21722-1.0;
                double t21730 = gamma_ab*2.0;
                double t21724 = gamma_aa+gamma_bb+t21730;
                double t21725 = pow(2.0,2.0/3.0);
                double t21726 = 1.0/k;
                double t21727 = 1.0/(pi_m12*pi_m12);
                double t21728 = 1.0/pow(t21676,7.0/3.0);
                double t21731 = t21729-t21697;
                double t21732 = t21703*t21731*t21706;
                double t21733 = t21732+t21697;
                double t21734 = alph*t21733*t21698*4.0;
                double t21735 = exp(t21734);
                double t21736 = t21735-1.0;
                double t21737 = 1.0/t21736;
                double t21738 = alph*alph;
                double t21739 = gamma_aa*4.0;
                double t21740 = gamma_ab*8.0;
                double t21741 = gamma_bb*4.0;
                double t21742 = t21740+t21741+t21739;
                double t21743 = t21724*t21724;
                double t21744 = 1.0/(t21736*t21736);
                double t21745 = alph*t21724*t21725*t21726*t21727*t21728*t21737*t21677*(1.0/8.0);
                double t21746 = t21724*t21725*t21726*t21727*t21728*(1.0/1.6E1);
                double t21747 = alph*t21700*t21701*t21680*t21743*t21737*t21677*t21699*(1.0/6.4E1);
                double t21748 = t21746+t21747;
                double t21749 = t21700*t21701*t21680*t21743*t21744*t21738*t21698*t21699*(1.0/3.2E1);
                double t21750 = t21745+t21749+1.0;
                double t21751 = 1.0/pow(t21676,8.0/3.0);
                double t21752 = exp(t21724*t21751*t21680*t21699*(-2.5E1/2.0));
                double t21753 = Cx*(1.0E1/7.0);
                double t21754 = Cc1*(1.0/1.0E3);
                double t21755 = Cc3*t21683*t21684*(1.0/1.0E3);
                double t21756 = Cc2*c*t21678*(1.0/1.0E3);
                double t21757 = t21754+t21755+t21756;
                double t21758 = Cc5*t21683*t21684;
                double t21759 = 1.0/t21676;
                double t21760 = Cc6*c*t21683*t21759;
                double t21761 = Cc4*c*t21678;
                double t21762 = t21760+t21761+t21758+1.0;
                double t21763 = 1.0/t21762;
                double t21764 = Cc0+t21753-t21763*t21757;
                v_gamma_ab[Q] += scale * t21676*(((bet*bet)*((alph*t21677*(t21725*t21726*t21727*t21728*(1.0/8.0)+(alph*t21700*t21701*t21742*t21680*t21677*t21699*(1.0/6.4E1))/t21723)*2.0)/(t21745+t21700*t21701*1.0/(t21723*t21723)*t21680*t21743*t21738*t21698*t21699*(1.0/3.2E1)+1.0)-alph*1.0/(t21750*t21750)*t21748*t21677*(alph*t21725*t21726*t21727*t21728*t21737*t21677*(1.0/4.0)+t21700*t21701*t21742*t21680*t21744*t21738*t21698*t21699*(1.0/3.2E1))*2.0)*(1.0/4.0))/(alph*((alph*t21748*t21677*2.0)/t21750+1.0))+1.0/(k*k*k)*nu*t21724*t21752*t21727*t21764*1.0/(t21676*t21676*t21676*t21676*t21676)*(2.5E1/1.6E1)-nu*t21725*t21752*t21726*t21727*t21728*t21764*(1.0/1.6E1));
            }
            
            // v_gamma_bb
            if (deriv >= 1) {
                double t21766 = rho_a+rho_b;
                double t21767 = 1.0/bet;
                double t21768 = 1.0/pow(t21766,1.0/3.0);
                double t21769 = c*t21768;
                double t21770 = pow(2.0,1.0/3.0);
                double t21771 = sqrt(t21769);
                double t21772 = pow(t21769,3.0/2.0);
                double t21773 = c*c;
                double t21774 = 1.0/pow(t21766,2.0/3.0);
                double t21775 = 1.0/c0p;
                double t21776 = b1p*t21771;
                double t21777 = b3p*t21772;
                double t21778 = b4p*t21773*t21774;
                double t21779 = b2p*c*t21768;
                double t21780 = t21776+t21777+t21778+t21779;
                double t21781 = 1.0/t21780;
                double t21782 = t21781*t21775*(1.0/2.0);
                double t21783 = t21782+1.0;
                double t21784 = log(t21783);
                double t21785 = a1p*c*t21768;
                double t21786 = t21785+1.0;
                double t21787 = c0p*t21784*t21786*2.0;
                double t21788 = 1.0/(bet*bet);
                double t21789 = 1.0/(k*k);
                double t21790 = 1.0/(pi_m12*pi_m12*pi_m12*pi_m12);
                double t21791 = 1.0/pow(t21766,1.4E1/3.0);
                double t21792 = t21770*2.0;
                double t21793 = t21792-2.0;
                double t21794 = two_13*2.0;
                double t21795 = t21794-2.0;
                double t21796 = 1.0/t21795;
                double t21797 = 1.0/c0f;
                double t21798 = b1f*t21771;
                double t21799 = b3f*t21772;
                double t21800 = b4f*t21773*t21774;
                double t21801 = b2f*c*t21768;
                double t21802 = t21800+t21801+t21798+t21799;
                double t21803 = 1.0/t21802;
                double t21804 = t21803*t21797*(1.0/2.0);
                double t21805 = t21804+1.0;
                double t21806 = log(t21805);
                double t21807 = a1f*c*t21768;
                double t21808 = t21807+1.0;
                double t21819 = c0f*t21806*t21808*2.0;
                double t21809 = -t21819+t21787;
                double t21810 = t21787-t21809*t21793*t21796;
                double t21811 = alph*t21810*t21788*4.0;
                double t21812 = exp(t21811);
                double t21813 = t21812-1.0;
                double t21820 = gamma_ab*2.0;
                double t21814 = gamma_aa+gamma_bb+t21820;
                double t21815 = pow(2.0,2.0/3.0);
                double t21816 = 1.0/k;
                double t21817 = 1.0/(pi_m12*pi_m12);
                double t21818 = 1.0/pow(t21766,7.0/3.0);
                double t21821 = t21819-t21787;
                double t21822 = t21821*t21793*t21796;
                double t21823 = t21822+t21787;
                double t21824 = alph*t21823*t21788*4.0;
                double t21825 = exp(t21824);
                double t21826 = t21825-1.0;
                double t21827 = 1.0/t21826;
                double t21828 = alph*alph;
                double t21829 = gamma_aa*2.0;
                double t21830 = gamma_ab*4.0;
                double t21831 = gamma_bb*2.0;
                double t21832 = t21830+t21831+t21829;
                double t21833 = t21814*t21814;
                double t21834 = 1.0/(t21826*t21826);
                double t21835 = alph*t21814*t21815*t21816*t21817*t21818*t21827*t21767*(1.0/8.0);
                double t21836 = t21814*t21815*t21816*t21817*t21818*(1.0/1.6E1);
                double t21837 = alph*t21770*t21833*t21790*t21791*t21827*t21767*t21789*(1.0/6.4E1);
                double t21838 = t21836+t21837;
                double t21839 = t21770*t21833*t21834*t21790*t21791*t21828*t21788*t21789*(1.0/3.2E1);
                double t21840 = t21835+t21839+1.0;
                double t21841 = 1.0/pow(t21766,8.0/3.0);
                double t21842 = exp(t21814*t21841*t21770*t21789*(-2.5E1/2.0));
                double t21843 = Cx*(1.0E1/7.0);
                double t21844 = Cc1*(1.0/1.0E3);
                double t21845 = Cc3*t21773*t21774*(1.0/1.0E3);
                double t21846 = Cc2*c*t21768*(1.0/1.0E3);
                double t21847 = t21844+t21845+t21846;
                double t21848 = Cc5*t21773*t21774;
                double t21849 = 1.0/t21766;
                double t21850 = Cc6*c*t21773*t21849;
                double t21851 = Cc4*c*t21768;
                double t21852 = t21850+t21851+t21848+1.0;
                double t21853 = 1.0/t21852;
                double t21854 = Cc0+t21843-t21853*t21847;
                v_gamma_bb[Q] += scale * t21766*(((bet*bet)*((alph*t21767*(t21815*t21816*t21817*t21818*(1.0/1.6E1)+(alph*t21832*t21770*t21790*t21791*t21767*t21789*(1.0/6.4E1))/t21813)*2.0)/(t21835+1.0/(t21813*t21813)*t21770*t21833*t21790*t21791*t21828*t21788*t21789*(1.0/3.2E1)+1.0)-alph*1.0/(t21840*t21840)*t21838*t21767*(alph*t21815*t21816*t21817*t21818*t21827*t21767*(1.0/8.0)+t21832*t21770*t21834*t21790*t21791*t21828*t21788*t21789*(1.0/3.2E1))*2.0)*(1.0/4.0))/(alph*((alph*t21838*t21767*2.0)/t21840+1.0))+1.0/(k*k*k)*nu*t21814*t21842*t21817*t21854*1.0/(t21766*t21766*t21766*t21766*t21766)*(2.5E1/3.2E1)-nu*t21815*t21842*t21816*t21817*t21818*t21854*(1.0/3.2E1));
            }
            
        } else if (rho_b < lsda_cutoff_) {
            // v
            if (deriv >= 0) {
                double t21858 = rho_a+rho_b;
                double t21859 = 1.0/bet;
                double t21860 = 1.0/pow(t21858,1.0/3.0);
                double t21861 = c*t21860;
                double t21862 = pow(2.0,1.0/3.0);
                double t21863 = sqrt(t21861);
                double t21864 = pow(t21861,3.0/2.0);
                double t21865 = c*c;
                double t21866 = 1.0/pow(t21858,2.0/3.0);
                double t21867 = 1.0/c0p;
                double t21868 = b1p*t21863;
                double t21869 = b3p*t21864;
                double t21870 = b4p*t21865*t21866;
                double t21871 = b2p*c*t21860;
                double t21872 = t21870+t21871+t21868+t21869;
                double t21873 = 1.0/t21872;
                double t21874 = t21873*t21867*(1.0/2.0);
                double t21875 = t21874+1.0;
                double t21876 = log(t21875);
                double t21877 = a1p*c*t21860;
                double t21878 = t21877+1.0;
                double t21879 = c0p*t21876*t21878*2.0;
                double t21880 = gamma_ab*2.0;
                double t21881 = gamma_aa+gamma_bb+t21880;
                double t21882 = 1.0/(bet*bet);
                double t21883 = 1.0/(k*k);
                double t21884 = 1.0/(pi_m12*pi_m12*pi_m12*pi_m12);
                double t21885 = 1.0/pow(t21858,1.4E1/3.0);
                double t21886 = t21862*2.0;
                double t21887 = t21886-2.0;
                double t21888 = two_13*2.0;
                double t21889 = t21888-2.0;
                double t21890 = 1.0/t21889;
                double t21891 = 1.0/c0f;
                double t21892 = b1f*t21863;
                double t21893 = b3f*t21864;
                double t21894 = b4f*t21865*t21866;
                double t21895 = b2f*c*t21860;
                double t21896 = t21892+t21893+t21894+t21895;
                double t21897 = 1.0/t21896;
                double t21898 = t21891*t21897*(1.0/2.0);
                double t21899 = t21898+1.0;
                double t21900 = log(t21899);
                double t21901 = a1f*c*t21860;
                double t21902 = t21901+1.0;
                double t21913 = c0f*t21900*t21902*2.0;
                double t21903 = -t21913+t21879;
                double t21904 = t21879-t21903*t21890*t21887;
                double t21905 = alph*t21904*t21882*4.0;
                double t21906 = exp(t21905);
                double t21907 = t21906-1.0;
                double t21908 = t21881*t21881;
                double t21909 = pow(2.0,2.0/3.0);
                double t21910 = 1.0/k;
                double t21911 = 1.0/(pi_m12*pi_m12);
                double t21912 = 1.0/pow(t21858,7.0/3.0);
                double t21914 = t21913-t21879;
                double t21915 = t21914*t21890*t21887;
                v[Q] += scale * -t21858*(t21915+t21879-((bet*bet)*log((alph*t21859*(t21910*t21911*t21912*t21881*t21909*(1.0/1.6E1)+(alph*t21862*t21908*t21883*t21884*t21885*t21859*(1.0/6.4E1))/t21907)*2.0)/((alph*t21910*t21911*t21912*t21881*t21909*t21859*(1.0/8.0))/(exp(alph*t21882*(t21915+t21879)*4.0)-1.0)+(alph*alph)*t21862*1.0/(t21907*t21907)*t21908*t21882*t21883*t21884*t21885*(1.0/3.2E1)+1.0)+1.0)*(1.0/4.0))/alph+nu*t21910*t21911*t21912*t21881*t21909*exp(t21862*t21881*t21883*1.0/pow(t21858,8.0/3.0)*(-2.5E1/2.0))*(Cc0+Cx*(1.0E1/7.0)-(Cc1*(1.0/1.0E3)+Cc2*c*t21860*(1.0/1.0E3)+Cc3*t21865*t21866*(1.0/1.0E3))/(Cc4*c*t21860+Cc5*t21865*t21866+(Cc6*c*t21865)/t21858+1.0))*(1.0/3.2E1));
            }
            
            // v_rho_a
            if (deriv >= 1) {
                double t21917 = rho_a+rho_b;
                double t21918 = 1.0/pow(t21917,1.0/3.0);
                double t21919 = c*t21918;
                double t21920 = sqrt(t21919);
                double t21921 = b1f*t21920;
                double t21922 = pow(t21919,3.0/2.0);
                double t21923 = b3f*t21922;
                double t21924 = c*c;
                double t21925 = 1.0/pow(t21917,2.0/3.0);
                double t21926 = b4f*t21924*t21925;
                double t21927 = b2f*c*t21918;
                double t21928 = t21921+t21923+t21926+t21927;
                double t21929 = 1.0/pow(t21917,4.0/3.0);
                double t21930 = b1p*t21920;
                double t21931 = b3p*t21922;
                double t21932 = b4p*t21924*t21925;
                double t21933 = b2p*c*t21918;
                double t21934 = t21930+t21931+t21932+t21933;
                double t21935 = 1.0/pow(t21917,5.0/3.0);
                double t21936 = 1.0/sqrt(t21919);
                double t21937 = 1.0/c0f;
                double t21938 = 1.0/t21928;
                double t21939 = t21937*t21938*(1.0/2.0);
                double t21940 = t21939+1.0;
                double t21941 = 1.0/c0p;
                double t21942 = 1.0/t21934;
                double t21943 = t21941*t21942*(1.0/2.0);
                double t21944 = t21943+1.0;
                double t21945 = pow(2.0,1.0/3.0);
                double t21946 = 1.0/bet;
                double t21947 = log(t21944);
                double t21948 = a1p*c*t21918;
                double t21949 = t21948+1.0;
                double t21950 = t21945*2.0;
                double t21951 = t21950-2.0;
                double t21952 = two_13*2.0;
                double t21953 = t21952-2.0;
                double t21954 = 1.0/t21953;
                double t21955 = log(t21940);
                double t21956 = a1f*c*t21918;
                double t21957 = t21956+1.0;
                double t21958 = c0p*t21947*t21949*2.0;
                double t21959 = gamma_ab*2.0;
                double t21960 = gamma_aa+gamma_bb+t21959;
                double t21961 = 1.0/(bet*bet);
                double t21962 = 1.0/(k*k);
                double t21963 = 1.0/(pi_m12*pi_m12*pi_m12*pi_m12);
                double t21964 = 1.0/pow(t21917,1.4E1/3.0);
                double t21975 = c0f*t21955*t21957*2.0;
                double t21965 = -t21975+t21958;
                double t21966 = t21958-t21951*t21954*t21965;
                double t21967 = alph*t21961*t21966*4.0;
                double t21968 = exp(t21967);
                double t21969 = t21968-1.0;
                double t21970 = t21960*t21960;
                double t21971 = pow(2.0,2.0/3.0);
                double t21972 = 1.0/k;
                double t21973 = 1.0/(pi_m12*pi_m12);
                double t21974 = 1.0/pow(t21917,7.0/3.0);
                double t21976 = t21975-t21958;
                double t21977 = t21951*t21954*t21976;
                double t21978 = t21958+t21977;
                double t21979 = alph*t21961*t21978*4.0;
                double t21980 = exp(t21979);
                double t21981 = t21980-1.0;
                double t21982 = 1.0/t21981;
                double t21983 = alph*alph;
                double t21984 = 1.0/t21940;
                double t21985 = 1.0/(t21928*t21928);
                double t21986 = b4f*t21924*t21935*(2.0/3.0);
                double t21987 = b2f*c*t21929*(1.0/3.0);
                double t21988 = b1f*c*t21936*t21929*(1.0/6.0);
                double t21989 = b3f*c*t21920*t21929*(1.0/2.0);
                double t21990 = t21986+t21987+t21988+t21989;
                double t21991 = t21990*t21957*t21984*t21985;
                double t21992 = 1.0/t21944;
                double t21993 = 1.0/(t21934*t21934);
                double t21994 = b4p*t21924*t21935*(2.0/3.0);
                double t21995 = b2p*c*t21929*(1.0/3.0);
                double t21996 = b1p*c*t21936*t21929*(1.0/6.0);
                double t21997 = b3p*c*t21920*t21929*(1.0/2.0);
                double t21998 = t21994+t21995+t21996+t21997;
                double t21999 = a1p*c*c0p*t21929*t21947*(2.0/3.0);
                double t22002 = t21992*t21993*t21949*t21998;
                double t22011 = a1f*c*c0f*t21955*t21929*(2.0/3.0);
                double t22000 = t21991+t21999-t22002-t22011;
                double t22001 = t21951*t21954*t22000;
                double t22003 = 1.0/(t21981*t21981);
                double t22004 = alph*t21960*t21971*t21972*t21946*t21973*t21982*t21974*(1.0/8.0);
                double t22005 = t21960*t21971*t21972*t21973*t21974*(1.0/1.6E1);
                double t22006 = t21961*t21970*t21962*t21945*t21963*t21964*t21983*t22003*(1.0/3.2E1);
                double t22007 = t22004+t22006+1.0;
                double t22008 = 1.0/pow(t21917,1.7E1/3.0);
                double t22009 = 1.0/pow(t21917,1.0E1/3.0);
                double t22010 = 1.0/(bet*bet*bet);
                double t22012 = -t21999+t22001+t22002;
                double t22013 = 1.0/pow(t21917,8.0/3.0);
                double t22027 = t21960*t21962*t21945*t22013*(2.5E1/2.0);
                double t22014 = exp(-t22027);
                double t22015 = Cx*(1.0E1/7.0);
                double t22016 = Cc1*(1.0/1.0E3);
                double t22017 = Cc3*t21924*t21925*(1.0/1.0E3);
                double t22018 = Cc2*c*t21918*(1.0/1.0E3);
                double t22019 = t22016+t22017+t22018;
                double t22020 = Cc5*t21924*t21925;
                double t22021 = 1.0/t21917;
                double t22022 = Cc6*c*t21924*t22021;
                double t22023 = Cc4*c*t21918;
                double t22024 = t22020+t22022+t22023+1.0;
                double t22025 = 1.0/t22024;
                double t22033 = t22025*t22019;
                double t22026 = Cc0+t22015-t22033;
                double t22028 = 1.0/alph;
                double t22029 = bet*bet;
                double t22030 = alph*t21970*t21962*t21945*t21963*t21946*t21964*t21982*(1.0/6.4E1);
                double t22031 = t22030+t22005;
                double t22032 = 1.0/t22007;
                v_rho_a[Q] += scale * -t21958-t21977-t21917*(-t21999+t22001+t22002+(t22028*t22029*(alph*t21946*t22032*(t21960*t21971*t21972*t21973*t22009*(7.0/4.8E1)+alph*t21970*t21962*t21945*t21963*t21946*t21982*t22008*(7.0/9.6E1)+t21970*t21962*t21980*t21945*t21963*t21964*t21983*t22010*t22003*t22012*(1.0/1.6E1))*2.0-alph*t21946*t22031*1.0/(t22007*t22007)*(t21961*t21970*t21962*t21945*t21963*t21983*t22003*t22008*(7.0/4.8E1)+alph*t21960*t21971*t21972*t21946*t21973*t21982*t22009*(7.0/2.4E1)+t21960*t21971*t21980*t21972*t21973*t21974*t21983*t22010*t22003*t22012*(1.0/2.0)+alph*1.0/(bet*bet*bet*bet)*t21970*t21962*t21980*t21945*t21963*1.0/(t21981*t21981*t21981)*t21964*t21983*t22012*(1.0/4.0))*2.0)*(1.0/4.0))/((alph*t21946*(t22005+(alph*t21970*t21962*t21945*t21963*t21946*t21964*(1.0/6.4E1))/t21969)*2.0)/(t22004+t21961*t21970*t21962*t21945*t21963*t21964*t21983*1.0/(t21969*t21969)*(1.0/3.2E1)+1.0)+1.0)+1.0/(k*k*k)*nu*t21970*1.0/(t21917*t21917*t21917*t21917*t21917*t21917)*t21973*t22014*t22026*(2.5E1/1.2E1)+nu*t21960*t21971*t21972*t21973*t21974*t22014*(t22025*(Cc2*c*t21929*(1.0/3.0E3)+Cc3*t21924*t21935*(1.0/1.5E3))-1.0/(t22024*t22024)*t22019*(Cc4*c*t21929*(1.0/3.0)+Cc5*t21924*t21935*(2.0/3.0)+Cc6*c*t21924*1.0/(t21917*t21917)))*(1.0/3.2E1)-nu*t21960*t21971*t21972*t21973*t22014*t22026*t22009*(7.0/9.6E1))+t22028*t22029*log(alph*t21946*t22031*t22032*2.0+1.0)*(1.0/4.0)-nu*t21960*t21971*t21972*t21973*t21974*t22014*t22026*(1.0/3.2E1);
            }
            
            // v_rho_b
            if (deriv >= 1) {
                double t22035 = rho_a+rho_b;
                double t22036 = 1.0/pow(t22035,1.0/3.0);
                double t22037 = c*t22036;
                double t22038 = sqrt(t22037);
                double t22039 = b1f*t22038;
                double t22040 = pow(t22037,3.0/2.0);
                double t22041 = b3f*t22040;
                double t22042 = c*c;
                double t22043 = 1.0/pow(t22035,2.0/3.0);
                double t22044 = b4f*t22042*t22043;
                double t22045 = b2f*c*t22036;
                double t22046 = t22041+t22044+t22045+t22039;
                double t22047 = 1.0/pow(t22035,4.0/3.0);
                double t22048 = b1p*t22038;
                double t22049 = b3p*t22040;
                double t22050 = b4p*t22042*t22043;
                double t22051 = b2p*c*t22036;
                double t22052 = t22050+t22051+t22048+t22049;
                double t22053 = 1.0/pow(t22035,5.0/3.0);
                double t22054 = 1.0/sqrt(t22037);
                double t22055 = 1.0/c0f;
                double t22056 = 1.0/t22046;
                double t22057 = t22055*t22056*(1.0/2.0);
                double t22058 = t22057+1.0;
                double t22059 = 1.0/c0p;
                double t22060 = 1.0/t22052;
                double t22061 = t22060*t22059*(1.0/2.0);
                double t22062 = t22061+1.0;
                double t22063 = pow(2.0,1.0/3.0);
                double t22064 = 1.0/bet;
                double t22065 = log(t22062);
                double t22066 = a1p*c*t22036;
                double t22067 = t22066+1.0;
                double t22068 = t22063*2.0;
                double t22069 = t22068-2.0;
                double t22070 = two_13*2.0;
                double t22071 = t22070-2.0;
                double t22072 = 1.0/t22071;
                double t22073 = log(t22058);
                double t22074 = a1f*c*t22036;
                double t22075 = t22074+1.0;
                double t22076 = c0p*t22065*t22067*2.0;
                double t22077 = gamma_ab*2.0;
                double t22078 = gamma_aa+gamma_bb+t22077;
                double t22079 = 1.0/(bet*bet);
                double t22080 = 1.0/(k*k);
                double t22081 = 1.0/(pi_m12*pi_m12*pi_m12*pi_m12);
                double t22082 = 1.0/pow(t22035,1.4E1/3.0);
                double t22093 = c0f*t22073*t22075*2.0;
                double t22083 = -t22093+t22076;
                double t22084 = t22076-t22072*t22083*t22069;
                double t22085 = alph*t22084*t22079*4.0;
                double t22086 = exp(t22085);
                double t22087 = t22086-1.0;
                double t22088 = t22078*t22078;
                double t22089 = pow(2.0,2.0/3.0);
                double t22090 = 1.0/k;
                double t22091 = 1.0/(pi_m12*pi_m12);
                double t22092 = 1.0/pow(t22035,7.0/3.0);
                double t22094 = t22093-t22076;
                double t22095 = t22072*t22094*t22069;
                double t22096 = t22076+t22095;
                double t22097 = alph*t22096*t22079*4.0;
                double t22098 = exp(t22097);
                double t22099 = t22098-1.0;
                double t22100 = 1.0/t22099;
                double t22101 = alph*alph;
                double t22102 = 1.0/t22058;
                double t22103 = 1.0/(t22046*t22046);
                double t22104 = b4f*t22042*t22053*(2.0/3.0);
                double t22105 = b2f*c*t22047*(1.0/3.0);
                double t22106 = b1f*c*t22054*t22047*(1.0/6.0);
                double t22107 = b3f*c*t22038*t22047*(1.0/2.0);
                double t22108 = t22104+t22105+t22106+t22107;
                double t22109 = t22102*t22103*t22108*t22075;
                double t22110 = 1.0/t22062;
                double t22111 = 1.0/(t22052*t22052);
                double t22112 = b4p*t22042*t22053*(2.0/3.0);
                double t22113 = b2p*c*t22047*(1.0/3.0);
                double t22114 = b1p*c*t22054*t22047*(1.0/6.0);
                double t22115 = b3p*c*t22038*t22047*(1.0/2.0);
                double t22116 = t22112+t22113+t22114+t22115;
                double t22117 = a1p*c*c0p*t22047*t22065*(2.0/3.0);
                double t22120 = t22110*t22111*t22116*t22067;
                double t22129 = a1f*c*c0f*t22073*t22047*(2.0/3.0);
                double t22118 = -t22120+t22117+t22109-t22129;
                double t22119 = t22072*t22118*t22069;
                double t22121 = 1.0/(t22099*t22099);
                double t22122 = alph*t22100*t22090*t22064*t22091*t22092*t22078*t22089*(1.0/8.0);
                double t22123 = t22090*t22091*t22092*t22078*t22089*(1.0/1.6E1);
                double t22124 = t22101*t22121*t22080*t22063*t22081*t22082*t22079*t22088*(1.0/3.2E1);
                double t22125 = t22122+t22124+1.0;
                double t22126 = 1.0/pow(t22035,1.7E1/3.0);
                double t22127 = 1.0/pow(t22035,1.0E1/3.0);
                double t22128 = 1.0/(bet*bet*bet);
                double t22130 = t22120-t22117+t22119;
                double t22131 = 1.0/pow(t22035,8.0/3.0);
                double t22145 = t22131*t22080*t22063*t22078*(2.5E1/2.0);
                double t22132 = exp(-t22145);
                double t22133 = Cx*(1.0E1/7.0);
                double t22134 = Cc1*(1.0/1.0E3);
                double t22135 = Cc3*t22042*t22043*(1.0/1.0E3);
                double t22136 = Cc2*c*t22036*(1.0/1.0E3);
                double t22137 = t22134+t22135+t22136;
                double t22138 = Cc5*t22042*t22043;
                double t22139 = 1.0/t22035;
                double t22140 = Cc6*c*t22042*t22139;
                double t22141 = Cc4*c*t22036;
                double t22142 = t22140+t22141+t22138+1.0;
                double t22143 = 1.0/t22142;
                double t22151 = t22143*t22137;
                double t22144 = Cc0+t22133-t22151;
                double t22146 = 1.0/alph;
                double t22147 = bet*bet;
                double t22148 = alph*t22100*t22080*t22063*t22081*t22064*t22082*t22088*(1.0/6.4E1);
                double t22149 = t22123+t22148;
                double t22150 = 1.0/t22125;
                v_rho_b[Q] += scale * -t22076-t22095-t22035*(t22120-t22117+t22119+(t22146*t22147*(alph*t22150*t22064*(t22090*t22091*t22127*t22078*t22089*(7.0/4.8E1)+alph*t22100*t22080*t22063*t22081*t22126*t22064*t22088*(7.0/9.6E1)+t22101*t22121*t22130*t22080*t22063*t22081*t22082*t22128*t22088*t22098*(1.0/1.6E1))*2.0-alph*1.0/(t22125*t22125)*t22064*t22149*(t22101*t22121*t22080*t22063*t22081*t22126*t22079*t22088*(7.0/4.8E1)+alph*t22100*t22090*t22064*t22091*t22127*t22078*t22089*(7.0/2.4E1)+t22101*t22121*t22130*t22090*t22091*t22092*t22128*t22078*t22089*t22098*(1.0/2.0)+alph*1.0/(bet*bet*bet*bet)*t22101*t22130*t22080*t22063*t22081*t22082*t22088*t22098*1.0/(t22099*t22099*t22099)*(1.0/4.0))*2.0)*(1.0/4.0))/((alph*t22064*(t22123+(alph*t22080*t22063*t22081*t22064*t22082*t22088*(1.0/6.4E1))/t22087)*2.0)/(t22122+t22101*t22080*t22063*t22081*t22082*1.0/(t22087*t22087)*t22079*t22088*(1.0/3.2E1)+1.0)+1.0)+1.0/(k*k*k)*nu*t22132*1.0/(t22035*t22035*t22035*t22035*t22035*t22035)*t22144*t22091*t22088*(2.5E1/1.2E1)+nu*t22132*t22090*t22091*t22092*t22078*t22089*(t22143*(Cc2*c*t22047*(1.0/3.0E3)+Cc3*t22042*t22053*(1.0/1.5E3))-1.0/(t22142*t22142)*t22137*(Cc4*c*t22047*(1.0/3.0)+Cc5*t22042*t22053*(2.0/3.0)+Cc6*c*t22042*1.0/(t22035*t22035)))*(1.0/3.2E1)-nu*t22132*t22090*t22144*t22091*t22127*t22078*t22089*(7.0/9.6E1))+t22146*t22147*log(alph*t22150*t22064*t22149*2.0+1.0)*(1.0/4.0)-nu*t22132*t22090*t22144*t22091*t22092*t22078*t22089*(1.0/3.2E1);
            }
            
            // v_gamma_aa
            if (deriv >= 1) {
                double t22153 = rho_a+rho_b;
                double t22154 = 1.0/bet;
                double t22155 = 1.0/pow(t22153,1.0/3.0);
                double t22156 = c*t22155;
                double t22157 = pow(2.0,1.0/3.0);
                double t22158 = sqrt(t22156);
                double t22159 = pow(t22156,3.0/2.0);
                double t22160 = c*c;
                double t22161 = 1.0/pow(t22153,2.0/3.0);
                double t22162 = 1.0/c0p;
                double t22163 = b1p*t22158;
                double t22164 = b3p*t22159;
                double t22165 = b4p*t22160*t22161;
                double t22166 = b2p*c*t22155;
                double t22167 = t22163+t22164+t22165+t22166;
                double t22168 = 1.0/t22167;
                double t22169 = t22162*t22168*(1.0/2.0);
                double t22170 = t22169+1.0;
                double t22171 = log(t22170);
                double t22172 = a1p*c*t22155;
                double t22173 = t22172+1.0;
                double t22174 = c0p*t22171*t22173*2.0;
                double t22175 = 1.0/(bet*bet);
                double t22176 = 1.0/(k*k);
                double t22177 = 1.0/(pi_m12*pi_m12*pi_m12*pi_m12);
                double t22178 = 1.0/pow(t22153,1.4E1/3.0);
                double t22179 = t22157*2.0;
                double t22180 = t22179-2.0;
                double t22181 = two_13*2.0;
                double t22182 = t22181-2.0;
                double t22183 = 1.0/t22182;
                double t22184 = 1.0/c0f;
                double t22185 = b1f*t22158;
                double t22186 = b3f*t22159;
                double t22187 = b4f*t22160*t22161;
                double t22188 = b2f*c*t22155;
                double t22189 = t22185+t22186+t22187+t22188;
                double t22190 = 1.0/t22189;
                double t22191 = t22190*t22184*(1.0/2.0);
                double t22192 = t22191+1.0;
                double t22193 = log(t22192);
                double t22194 = a1f*c*t22155;
                double t22195 = t22194+1.0;
                double t22206 = c0f*t22193*t22195*2.0;
                double t22196 = -t22206+t22174;
                double t22197 = t22174-t22180*t22183*t22196;
                double t22198 = alph*t22175*t22197*4.0;
                double t22199 = exp(t22198);
                double t22200 = t22199-1.0;
                double t22207 = gamma_ab*2.0;
                double t22201 = gamma_aa+gamma_bb+t22207;
                double t22202 = pow(2.0,2.0/3.0);
                double t22203 = 1.0/k;
                double t22204 = 1.0/(pi_m12*pi_m12);
                double t22205 = 1.0/pow(t22153,7.0/3.0);
                double t22208 = t22206-t22174;
                double t22209 = t22180*t22208*t22183;
                double t22210 = t22209+t22174;
                double t22211 = alph*t22210*t22175*4.0;
                double t22212 = exp(t22211);
                double t22213 = t22212-1.0;
                double t22214 = 1.0/t22213;
                double t22215 = alph*alph;
                double t22216 = gamma_aa*2.0;
                double t22217 = gamma_ab*4.0;
                double t22218 = gamma_bb*2.0;
                double t22219 = t22216+t22217+t22218;
                double t22220 = t22201*t22201;
                double t22221 = 1.0/(t22213*t22213);
                double t22222 = alph*t22201*t22202*t22203*t22204*t22205*t22214*t22154*(1.0/8.0);
                double t22223 = t22201*t22202*t22203*t22204*t22205*(1.0/1.6E1);
                double t22224 = alph*t22220*t22214*t22154*t22157*t22176*t22177*t22178*(1.0/6.4E1);
                double t22225 = t22223+t22224;
                double t22226 = t22220*t22221*t22215*t22157*t22175*t22176*t22177*t22178*(1.0/3.2E1);
                double t22227 = t22222+t22226+1.0;
                double t22228 = 1.0/pow(t22153,8.0/3.0);
                double t22229 = exp(t22201*t22228*t22157*t22176*(-2.5E1/2.0));
                double t22230 = Cx*(1.0E1/7.0);
                double t22231 = Cc1*(1.0/1.0E3);
                double t22232 = Cc3*t22160*t22161*(1.0/1.0E3);
                double t22233 = Cc2*c*t22155*(1.0/1.0E3);
                double t22234 = t22231+t22232+t22233;
                double t22235 = Cc5*t22160*t22161;
                double t22236 = 1.0/t22153;
                double t22237 = Cc6*c*t22160*t22236;
                double t22238 = Cc4*c*t22155;
                double t22239 = t22235+t22237+t22238+1.0;
                double t22240 = 1.0/t22239;
                double t22241 = Cc0+t22230-t22240*t22234;
                v_gamma_aa[Q] += scale * t22153*(((bet*bet)*((alph*t22154*(t22202*t22203*t22204*t22205*(1.0/1.6E1)+(alph*t22154*t22219*t22157*t22176*t22177*t22178*(1.0/6.4E1))/t22200)*2.0)/(t22222+1.0/(t22200*t22200)*t22220*t22215*t22157*t22175*t22176*t22177*t22178*(1.0/3.2E1)+1.0)-alph*t22225*t22154*1.0/(t22227*t22227)*(alph*t22202*t22203*t22204*t22205*t22214*t22154*(1.0/8.0)+t22221*t22215*t22219*t22157*t22175*t22176*t22177*t22178*(1.0/3.2E1))*2.0)*(1.0/4.0))/(alph*((alph*t22225*t22154*2.0)/t22227+1.0))+1.0/(k*k*k)*nu*t22201*t22204*t22241*1.0/(t22153*t22153*t22153*t22153*t22153)*t22229*(2.5E1/3.2E1)-nu*t22202*t22203*t22204*t22205*t22241*t22229*(1.0/3.2E1));
            }
            
            // v_gamma_ab
            if (deriv >= 1) {
                double t22243 = rho_a+rho_b;
                double t22244 = 1.0/bet;
                double t22245 = 1.0/pow(t22243,1.0/3.0);
                double t22246 = c*t22245;
                double t22247 = pow(2.0,1.0/3.0);
                double t22248 = sqrt(t22246);
                double t22249 = pow(t22246,3.0/2.0);
                double t22250 = c*c;
                double t22251 = 1.0/pow(t22243,2.0/3.0);
                double t22252 = 1.0/c0p;
                double t22253 = b1p*t22248;
                double t22254 = b3p*t22249;
                double t22255 = b4p*t22250*t22251;
                double t22256 = b2p*c*t22245;
                double t22257 = t22253+t22254+t22255+t22256;
                double t22258 = 1.0/t22257;
                double t22259 = t22252*t22258*(1.0/2.0);
                double t22260 = t22259+1.0;
                double t22261 = log(t22260);
                double t22262 = a1p*c*t22245;
                double t22263 = t22262+1.0;
                double t22264 = c0p*t22261*t22263*2.0;
                double t22265 = 1.0/(bet*bet);
                double t22266 = 1.0/(k*k);
                double t22267 = 1.0/(pi_m12*pi_m12*pi_m12*pi_m12);
                double t22268 = 1.0/pow(t22243,1.4E1/3.0);
                double t22269 = t22247*2.0;
                double t22270 = t22269-2.0;
                double t22271 = two_13*2.0;
                double t22272 = t22271-2.0;
                double t22273 = 1.0/t22272;
                double t22274 = 1.0/c0f;
                double t22275 = b1f*t22248;
                double t22276 = b3f*t22249;
                double t22277 = b4f*t22250*t22251;
                double t22278 = b2f*c*t22245;
                double t22279 = t22275+t22276+t22277+t22278;
                double t22280 = 1.0/t22279;
                double t22281 = t22280*t22274*(1.0/2.0);
                double t22282 = t22281+1.0;
                double t22283 = log(t22282);
                double t22284 = a1f*c*t22245;
                double t22285 = t22284+1.0;
                double t22296 = c0f*t22283*t22285*2.0;
                double t22286 = t22264-t22296;
                double t22297 = t22270*t22273*t22286;
                double t22287 = t22264-t22297;
                double t22288 = alph*t22265*t22287*4.0;
                double t22289 = exp(t22288);
                double t22290 = t22289-1.0;
                double t22299 = gamma_ab*2.0;
                double t22291 = gamma_aa+gamma_bb+t22299;
                double t22292 = pow(2.0,2.0/3.0);
                double t22293 = 1.0/k;
                double t22294 = 1.0/(pi_m12*pi_m12);
                double t22295 = 1.0/pow(t22243,7.0/3.0);
                double t22298 = 1.0/t22290;
                double t22300 = alph*alph;
                double t22301 = 1.0/(t22290*t22290);
                double t22302 = gamma_aa*4.0;
                double t22303 = gamma_ab*8.0;
                double t22304 = gamma_bb*4.0;
                double t22305 = t22302+t22303+t22304;
                double t22306 = t22291*t22291;
                double t22307 = t22300*t22301*t22306*t22247*t22265*t22266*t22267*t22268*(1.0/3.2E1);
                double t22308 = alph*t22244*t22291*t22292*t22293*t22294*t22295*t22298*(1.0/8.0);
                double t22309 = t22307+t22308+1.0;
                double t22310 = t22291*t22292*t22293*t22294*t22295*(1.0/1.6E1);
                double t22311 = alph*t22306*t22244*t22247*t22266*t22267*t22268*t22298*(1.0/6.4E1);
                double t22312 = t22310+t22311;
                double t22313 = 1.0/t22309;
                double t22314 = 1.0/pow(t22243,8.0/3.0);
                double t22315 = exp(t22314*t22291*t22247*t22266*(-2.5E1/2.0));
                double t22316 = Cx*(1.0E1/7.0);
                double t22317 = Cc1*(1.0/1.0E3);
                double t22318 = Cc3*t22250*t22251*(1.0/1.0E3);
                double t22319 = Cc2*c*t22245*(1.0/1.0E3);
                double t22320 = t22317+t22318+t22319;
                double t22321 = Cc5*t22250*t22251;
                double t22322 = 1.0/t22243;
                double t22323 = Cc6*c*t22250*t22322;
                double t22324 = Cc4*c*t22245;
                double t22325 = t22321+t22323+t22324+1.0;
                double t22326 = 1.0/t22325;
                double t22327 = Cc0+t22316-t22320*t22326;
                v_gamma_ab[Q] += scale * t22243*(((bet*bet)*(alph*t22313*t22244*(t22292*t22293*t22294*t22295*(1.0/8.0)+alph*t22305*t22244*t22247*t22266*t22267*t22268*t22298*(1.0/6.4E1))*2.0-alph*t22312*t22244*1.0/(t22309*t22309)*(alph*t22244*t22292*t22293*t22294*t22295*t22298*(1.0/4.0)+t22300*t22301*t22305*t22247*t22265*t22266*t22267*t22268*(1.0/3.2E1))*2.0)*(1.0/4.0))/(alph*(alph*t22312*t22313*t22244*2.0+1.0))+1.0/(k*k*k)*nu*1.0/(t22243*t22243*t22243*t22243*t22243)*t22315*t22291*t22327*t22294*(2.5E1/1.6E1)-nu*t22315*t22327*t22292*t22293*t22294*t22295*(1.0/1.6E1));
            }
            
            // v_gamma_bb
            if (deriv >= 1) {
                double t22329 = rho_a+rho_b;
                double t22330 = 1.0/bet;
                double t22331 = 1.0/pow(t22329,1.0/3.0);
                double t22332 = c*t22331;
                double t22333 = pow(2.0,1.0/3.0);
                double t22334 = sqrt(t22332);
                double t22335 = pow(t22332,3.0/2.0);
                double t22336 = c*c;
                double t22337 = 1.0/pow(t22329,2.0/3.0);
                double t22338 = 1.0/c0p;
                double t22339 = b1p*t22334;
                double t22340 = b3p*t22335;
                double t22341 = b4p*t22336*t22337;
                double t22342 = b2p*c*t22331;
                double t22343 = t22340+t22341+t22342+t22339;
                double t22344 = 1.0/t22343;
                double t22345 = t22344*t22338*(1.0/2.0);
                double t22346 = t22345+1.0;
                double t22347 = log(t22346);
                double t22348 = a1p*c*t22331;
                double t22349 = t22348+1.0;
                double t22350 = c0p*t22347*t22349*2.0;
                double t22351 = 1.0/(bet*bet);
                double t22352 = 1.0/(k*k);
                double t22353 = 1.0/(pi_m12*pi_m12*pi_m12*pi_m12);
                double t22354 = 1.0/pow(t22329,1.4E1/3.0);
                double t22355 = t22333*2.0;
                double t22356 = t22355-2.0;
                double t22357 = two_13*2.0;
                double t22358 = t22357-2.0;
                double t22359 = 1.0/t22358;
                double t22360 = 1.0/c0f;
                double t22361 = b1f*t22334;
                double t22362 = b3f*t22335;
                double t22363 = b4f*t22336*t22337;
                double t22364 = b2f*c*t22331;
                double t22365 = t22361+t22362+t22363+t22364;
                double t22366 = 1.0/t22365;
                double t22367 = t22360*t22366*(1.0/2.0);
                double t22368 = t22367+1.0;
                double t22369 = log(t22368);
                double t22370 = a1f*c*t22331;
                double t22371 = t22370+1.0;
                double t22382 = c0f*t22371*t22369*2.0;
                double t22372 = t22350-t22382;
                double t22383 = t22372*t22356*t22359;
                double t22373 = t22350-t22383;
                double t22374 = alph*t22351*t22373*4.0;
                double t22375 = exp(t22374);
                double t22376 = t22375-1.0;
                double t22385 = gamma_ab*2.0;
                double t22377 = gamma_aa+gamma_bb+t22385;
                double t22378 = pow(2.0,2.0/3.0);
                double t22379 = 1.0/k;
                double t22380 = 1.0/(pi_m12*pi_m12);
                double t22381 = 1.0/pow(t22329,7.0/3.0);
                double t22384 = 1.0/t22376;
                double t22386 = alph*alph;
                double t22387 = 1.0/(t22376*t22376);
                double t22388 = gamma_aa*2.0;
                double t22389 = gamma_ab*4.0;
                double t22390 = gamma_bb*2.0;
                double t22391 = t22390+t22388+t22389;
                double t22392 = t22377*t22377;
                double t22393 = t22333*t22351*t22352*t22353*t22354*t22392*t22386*t22387*(1.0/3.2E1);
                double t22394 = alph*t22330*t22380*t22381*t22384*t22377*t22378*t22379*(1.0/8.0);
                double t22395 = t22393+t22394+1.0;
                double t22396 = t22380*t22381*t22377*t22378*t22379*(1.0/1.6E1);
                double t22397 = alph*t22330*t22333*t22352*t22353*t22354*t22392*t22384*(1.0/6.4E1);
                double t22398 = t22396+t22397;
                double t22399 = 1.0/t22395;
                double t22400 = 1.0/pow(t22329,8.0/3.0);
                double t22401 = exp(t22400*t22333*t22352*t22377*(-2.5E1/2.0));
                double t22402 = Cx*(1.0E1/7.0);
                double t22403 = Cc1*(1.0/1.0E3);
                double t22404 = Cc3*t22336*t22337*(1.0/1.0E3);
                double t22405 = Cc2*c*t22331*(1.0/1.0E3);
                double t22406 = t22403+t22404+t22405;
                double t22407 = Cc5*t22336*t22337;
                double t22408 = 1.0/t22329;
                double t22409 = Cc6*c*t22336*t22408;
                double t22410 = Cc4*c*t22331;
                double t22411 = t22410+t22407+t22409+1.0;
                double t22412 = 1.0/t22411;
                double t22413 = Cc0+t22402-t22412*t22406;
                v_gamma_bb[Q] += scale * t22329*(((bet*bet)*(alph*t22330*t22399*(t22380*t22381*t22378*t22379*(1.0/1.6E1)+alph*t22330*t22333*t22352*t22353*t22354*t22391*t22384*(1.0/6.4E1))*2.0-alph*t22330*1.0/(t22395*t22395)*t22398*(alph*t22330*t22380*t22381*t22384*t22378*t22379*(1.0/8.0)+t22333*t22351*t22352*t22353*t22354*t22391*t22386*t22387*(1.0/3.2E1))*2.0)*(1.0/4.0))/(alph*(alph*t22330*t22398*t22399*2.0+1.0))+1.0/(k*k*k)*nu*t22401*t22413*t22380*1.0/(t22329*t22329*t22329*t22329*t22329)*t22377*(2.5E1/3.2E1)-nu*t22401*t22413*t22380*t22381*t22378*t22379*(1.0/3.2E1));
            }
            
        } else {
            // v
            if (deriv >= 0) {
                double t20484 = rho_a+rho_b;
                double t20485 = 1.0/pow(t20484,1.0/3.0);
                double t20486 = c*t20485;
                double t20487 = 1.0/t20484;
                double t20488 = rho_a-rho_b;
                double t20489 = t20487*t20488;
                double t20490 = 1.0/bet;
                double t20491 = t20489+1.0;
                double t20492 = pow(t20491,2.0/3.0);
                double t20493 = t20492*(1.0/2.0);
                double t20494 = -t20489+1.0;
                double t20495 = pow(t20494,2.0/3.0);
                double t20496 = t20495*(1.0/2.0);
                double t20497 = t20493+t20496;
                double t20498 = 1.0/c0p;
                double t20499 = sqrt(t20486);
                double t20500 = b1p*t20499;
                double t20501 = pow(t20486,3.0/2.0);
                double t20502 = b3p*t20501;
                double t20503 = c*c;
                double t20504 = 1.0/pow(t20484,2.0/3.0);
                double t20505 = b4p*t20503*t20504;
                double t20506 = b2p*c*t20485;
                double t20507 = t20500+t20502+t20505+t20506;
                double t20508 = 1.0/t20507;
                double t20509 = t20508*t20498*(1.0/2.0);
                double t20510 = t20509+1.0;
                double t20511 = log(t20510);
                double t20512 = a1p*c*t20485;
                double t20513 = t20512+1.0;
                double t20514 = c0p*t20511*t20513*2.0;
                double t20515 = t20488*t20488;
                double t20516 = two_13*2.0;
                double t20517 = t20516-2.0;
                double t20518 = 1.0/t20517;
                double t20519 = 1.0/(t20484*t20484*t20484*t20484);
                double t20520 = t20515*t20515;
                double t20521 = pow(t20491,4.0/3.0);
                double t20522 = pow(t20494,4.0/3.0);
                double t20523 = t20521+t20522-2.0;
                double t20524 = gamma_ab*2.0;
                double t20525 = gamma_aa+gamma_bb+t20524;
                double t20526 = 1.0/(bet*bet);
                double t20527 = 1.0/(k*k);
                double t20528 = 1.0/(pi_m12*pi_m12*pi_m12*pi_m12);
                double t20529 = 1.0/(t20497*t20497*t20497);
                double t20530 = 1.0/c0f;
                double t20531 = b1f*t20499;
                double t20532 = b3f*t20501;
                double t20533 = b4f*t20503*t20504;
                double t20534 = b2f*c*t20485;
                double t20535 = t20531+t20532+t20533+t20534;
                double t20536 = 1.0/t20535;
                double t20537 = t20530*t20536*(1.0/2.0);
                double t20538 = t20537+1.0;
                double t20539 = log(t20538);
                double t20540 = a1f*c*t20485;
                double t20541 = t20540+1.0;
                double t20568 = c0f*t20541*t20539*2.0;
                double t20542 = t20514-t20568;
                double t20543 = 1.0/d2fz0;
                double t20544 = 1.0/Aa;
                double t20545 = b1a*t20499;
                double t20546 = b3a*t20501;
                double t20547 = b4a*t20503*t20504;
                double t20548 = b2a*c*t20485;
                double t20549 = t20545+t20546+t20547+t20548;
                double t20550 = 1.0/t20549;
                double t20551 = t20550*t20544*(1.0/2.0);
                double t20552 = t20551+1.0;
                double t20553 = log(t20552);
                double t20554 = a1a*c*t20485;
                double t20555 = t20554+1.0;
                double t20556 = t20520*t20519;
                double t20557 = t20556-1.0;
                double t20558 = Aa*t20523*t20543*t20553*t20518*t20555*t20557*2.0;
                double t20569 = t20520*t20523*t20542*t20518*t20519;
                double t20559 = t20514+t20558-t20569;
                double t20560 = alph*t20526*t20529*t20559*2.0;
                double t20561 = exp(t20560);
                double t20562 = t20561-1.0;
                double t20563 = 1.0/pow(t20484,1.4E1/3.0);
                double t20564 = 1.0/(t20497*t20497*t20497*t20497);
                double t20565 = t20525*t20525;
                double t20566 = 1.0/k;
                double t20567 = 1.0/(pi_m12*pi_m12);
                double t20570 = 1.0/t20562;
                double t20571 = 1.0/pow(t20484,7.0/3.0);
                double t20572 = 1.0/(t20497*t20497);
                double t20573 = t20497*t20497;
                v[Q] += scale * -t20484*(t20514+t20558-t20569-((bet*bet)*t20573*t20497*log((alph*t20490*(t20525*t20571*t20572*t20566*t20567*(1.0/1.6E1)+alph*t20570*t20490*t20527*t20563*t20528*t20564*t20565*(1.0/1.28E2))*2.0)/((alph*alph)*t20526*1.0/(t20562*t20562)*t20527*t20563*t20528*t20564*t20565*(1.0/6.4E1)+alph*t20525*t20570*t20490*t20571*t20572*t20566*t20567*(1.0/8.0)+1.0)+1.0)*(1.0/2.0))/alph+nu*t20525*t20571*t20566*t20567*t20497*exp(t20525*t20527*t20573*1.0/pow(t20484,8.0/3.0)*-2.5E1)*(Cc0+Cx*(1.0E1/7.0)-(Cc1*(1.0/1.0E3)+Cc2*c*t20485*(1.0/1.0E3)+Cc3*t20503*t20504*(1.0/1.0E3))/(Cc4*c*t20485+Cc5*t20503*t20504+Cc6*c*t20503*t20487+1.0))*(1.0/1.6E1));
            }
            
            // v_rho_a
            if (deriv >= 1) {
                double t20575 = rho_a+rho_b;
                double t20576 = 1.0/pow(t20575,1.0/3.0);
                double t20577 = c*t20576;
                double t20578 = sqrt(t20577);
                double t20579 = b1p*t20578;
                double t20580 = pow(t20577,3.0/2.0);
                double t20581 = b3p*t20580;
                double t20582 = c*c;
                double t20583 = 1.0/pow(t20575,2.0/3.0);
                double t20584 = b4p*t20582*t20583;
                double t20585 = b2p*c*t20576;
                double t20586 = t20581+t20584+t20585+t20579;
                double t20587 = 1.0/pow(t20575,4.0/3.0);
                double t20588 = 1.0/t20575;
                double t20589 = rho_a-rho_b;
                double t20590 = t20588*t20589;
                double t20591 = 1.0/bet;
                double t20592 = t20590+1.0;
                double t20593 = pow(t20592,2.0/3.0);
                double t20594 = t20593*(1.0/2.0);
                double t20595 = -t20590+1.0;
                double t20596 = pow(t20595,2.0/3.0);
                double t20597 = t20596*(1.0/2.0);
                double t20598 = t20594+t20597;
                double t20599 = 1.0/c0p;
                double t20600 = 1.0/t20586;
                double t20601 = t20600*t20599*(1.0/2.0);
                double t20602 = t20601+1.0;
                double t20603 = a1p*c*t20576;
                double t20604 = t20603+1.0;
                double t20605 = log(t20602);
                double t20606 = c0p*t20604*t20605*2.0;
                double t20607 = t20589*t20589;
                double t20608 = two_13*2.0;
                double t20609 = t20608-2.0;
                double t20610 = 1.0/t20609;
                double t20611 = 1.0/(t20575*t20575*t20575*t20575);
                double t20612 = t20607*t20607;
                double t20613 = pow(t20592,4.0/3.0);
                double t20614 = pow(t20595,4.0/3.0);
                double t20615 = t20613+t20614-2.0;
                double t20616 = gamma_ab*2.0;
                double t20617 = gamma_aa+gamma_bb+t20616;
                double t20618 = 1.0/(bet*bet);
                double t20619 = 1.0/(k*k);
                double t20620 = 1.0/(pi_m12*pi_m12*pi_m12*pi_m12);
                double t20621 = 1.0/(t20598*t20598*t20598);
                double t20622 = 1.0/c0f;
                double t20623 = b1f*t20578;
                double t20624 = b3f*t20580;
                double t20625 = b4f*t20582*t20583;
                double t20626 = b2f*c*t20576;
                double t20627 = t20623+t20624+t20625+t20626;
                double t20628 = 1.0/t20627;
                double t20629 = t20622*t20628*(1.0/2.0);
                double t20630 = t20629+1.0;
                double t20631 = log(t20630);
                double t20632 = a1f*c*t20576;
                double t20633 = t20632+1.0;
                double t20660 = c0f*t20631*t20633*2.0;
                double t20634 = t20606-t20660;
                double t20635 = 1.0/d2fz0;
                double t20636 = 1.0/Aa;
                double t20637 = b1a*t20578;
                double t20638 = b3a*t20580;
                double t20639 = b4a*t20582*t20583;
                double t20640 = b2a*c*t20576;
                double t20641 = t20640+t20637+t20638+t20639;
                double t20642 = 1.0/t20641;
                double t20643 = t20642*t20636*(1.0/2.0);
                double t20644 = t20643+1.0;
                double t20645 = log(t20644);
                double t20646 = a1a*c*t20576;
                double t20647 = t20646+1.0;
                double t20648 = t20611*t20612;
                double t20649 = t20648-1.0;
                double t20650 = Aa*t20610*t20615*t20635*t20645*t20647*t20649*2.0;
                double t20661 = t20610*t20611*t20612*t20615*t20634;
                double t20651 = t20650+t20606-t20661;
                double t20652 = alph*t20621*t20651*t20618*2.0;
                double t20653 = exp(t20652);
                double t20654 = t20653-1.0;
                double t20655 = 1.0/pow(t20575,1.4E1/3.0);
                double t20656 = 1.0/(t20598*t20598*t20598*t20598);
                double t20657 = t20617*t20617;
                double t20658 = 1.0/k;
                double t20659 = 1.0/(pi_m12*pi_m12);
                double t20662 = 1.0/t20654;
                double t20663 = 1.0/pow(t20575,7.0/3.0);
                double t20664 = 1.0/(t20598*t20598);
                double t20665 = 1.0/(t20575*t20575);
                double t20681 = t20665*t20589;
                double t20666 = -t20681+t20588;
                double t20667 = 1.0/alph;
                double t20668 = bet*bet;
                double t20669 = t20617*t20663*t20664*t20658*t20659*(1.0/1.6E1);
                double t20670 = alph*t20620*t20662*t20591*t20619*t20655*t20656*t20657*(1.0/1.28E2);
                double t20671 = t20670+t20669;
                double t20672 = alph*alph;
                double t20673 = 1.0/(t20654*t20654);
                double t20674 = t20620*t20618*t20672*t20619*t20655*t20673*t20656*t20657*(1.0/6.4E1);
                double t20675 = alph*t20617*t20662*t20591*t20663*t20664*t20658*t20659*(1.0/8.0);
                double t20676 = t20674+t20675+1.0;
                double t20677 = 1.0/t20676;
                double t20678 = alph*t20671*t20591*t20677*2.0;
                double t20679 = t20678+1.0;
                double t20680 = 1.0/pow(t20592,1.0/3.0);
                double t20682 = t20680*t20666*(1.0/3.0);
                double t20683 = 1.0/pow(t20595,1.0/3.0);
                double t20685 = t20683*t20666*(1.0/3.0);
                double t20684 = t20682-t20685;
                double t20686 = 1.0/t20602;
                double t20687 = 1.0/(t20586*t20586);
                double t20688 = 1.0/pow(t20575,5.0/3.0);
                double t20689 = b4p*t20582*t20688*(2.0/3.0);
                double t20690 = b2p*c*t20587*(1.0/3.0);
                double t20691 = 1.0/sqrt(t20577);
                double t20692 = b1p*c*t20691*t20587*(1.0/6.0);
                double t20693 = b3p*c*t20578*t20587*(1.0/2.0);
                double t20694 = t20690+t20692+t20693+t20689;
                double t20695 = t20604*t20694*t20686*t20687;
                double t20696 = 1.0/(t20575*t20575*t20575*t20575*t20575);
                double t20697 = pow(t20592,1.0/3.0);
                double t20698 = t20666*t20697*(4.0/3.0);
                double t20699 = pow(t20595,1.0/3.0);
                double t20705 = t20666*t20699*(4.0/3.0);
                double t20700 = -t20705+t20698;
                double t20701 = 1.0/pow(t20575,1.7E1/3.0);
                double t20702 = 1.0/pow(t20575,1.0E1/3.0);
                double t20703 = 1.0/(t20598*t20598*t20598*t20598*t20598);
                double t20704 = t20610*t20611*t20615*t20607*t20634*t20589*4.0;
                double t20706 = t20610*t20700*t20611*t20612*t20634;
                double t20707 = 1.0/t20630;
                double t20708 = 1.0/(t20627*t20627);
                double t20709 = b4f*t20582*t20688*(2.0/3.0);
                double t20710 = b2f*c*t20587*(1.0/3.0);
                double t20711 = b1f*c*t20691*t20587*(1.0/6.0);
                double t20712 = b3f*c*t20578*t20587*(1.0/2.0);
                double t20713 = t20710+t20711+t20712+t20709;
                double t20714 = a1f*c*c0f*t20631*t20587*(2.0/3.0);
                double t20715 = a1p*c*c0p*t20605*t20587*(2.0/3.0);
                double t20716 = t20612*t20696*4.0;
                double t20730 = t20611*t20607*t20589*4.0;
                double t20717 = -t20730+t20716;
                double t20718 = Aa*t20610*t20615*t20635*t20645*t20717*t20647*2.0;
                double t20719 = 1.0/t20644;
                double t20720 = 1.0/(t20641*t20641);
                double t20721 = b4a*t20582*t20688*(2.0/3.0);
                double t20722 = b2a*c*t20587*(1.0/3.0);
                double t20723 = b1a*c*t20691*t20587*(1.0/6.0);
                double t20724 = b3a*c*t20578*t20587*(1.0/2.0);
                double t20725 = t20721+t20722+t20723+t20724;
                double t20726 = Aa*a1a*c*t20610*t20615*t20635*t20645*t20649*t20587*(2.0/3.0);
                double t20727 = alph*t20651*t20618*t20656*t20684*6.0;
                double t20732 = t20713*t20633*t20707*t20708;
                double t20728 = t20714-t20732-t20715+t20695;
                double t20729 = t20610*t20611*t20612*t20615*t20728;
                double t20731 = t20598*t20598;
                double t20733 = t20730-t20716;
                double t20734 = 1.0/pow(t20575,8.0/3.0);
                double t20745 = t20731*t20617*t20734*t20619*2.5E1;
                double t20735 = exp(-t20745);
                double t20736 = Cc5*t20582*t20583;
                double t20737 = Cc6*c*t20582*t20588;
                double t20738 = Cc4*c*t20576;
                double t20739 = t20736+t20737+t20738+1.0;
                double t20740 = 1.0/t20739;
                double t20741 = Cc1*(1.0/1.0E3);
                double t20742 = Cc3*t20582*t20583*(1.0/1.0E3);
                double t20743 = Cc2*c*t20576*(1.0/1.0E3);
                double t20744 = t20741+t20742+t20743;
                double t20746 = Cx*(1.0E1/7.0);
                double t20748 = t20740*t20744;
                double t20747 = Cc0+t20746-t20748;
                double t20749 = t20610*t20612*t20615*t20634*t20696*4.0;
                double t20753 = Aa*t20610*t20700*t20635*t20645*t20647*t20649*2.0;
                double t20754 = t20610*t20720*t20615*t20635*t20725*t20647*t20719*t20649;
                double t20750 = t20704+t20706+t20715+t20726-t20753+t20718-t20754+t20729-t20695-t20749;
                double t20751 = alph*t20621*t20750*t20618*2.0;
                double t20752 = t20751+t20727;
                double t20755 = log(t20679);
                v_rho_a[Q] += scale * -t20650-t20606-t20575*(-t20704-t20706-t20715-t20726+t20753+t20754-t20729+t20695+t20749-t20731*t20755*t20684*t20667*t20668*(3.0/2.0)+(t20731*t20667*t20668*t20598*(alph*t20591*t20677*(t20702*t20617*t20664*t20658*t20659*(7.0/4.8E1)+t20621*t20617*t20663*t20684*t20658*t20659*(1.0/8.0)+alph*t20620*t20701*t20662*t20591*t20619*t20656*t20657*(7.0/1.92E2)+alph*t20620*t20703*t20662*t20591*t20619*t20655*t20657*t20684*(1.0/3.2E1)-alph*t20620*t20653*t20752*t20591*t20619*t20655*t20673*t20656*t20657*(1.0/1.28E2))*2.0-alph*t20671*t20591*1.0/(t20676*t20676)*(t20620*t20701*t20618*t20672*t20619*t20673*t20656*t20657*(7.0/9.6E1)+alph*t20702*t20617*t20662*t20591*t20664*t20658*t20659*(7.0/2.4E1)+alph*t20621*t20617*t20662*t20591*t20663*t20684*t20658*t20659*(1.0/4.0)+t20620*t20703*t20618*t20672*t20619*t20655*t20673*t20657*t20684*(1.0/1.6E1)-alph*t20617*t20653*t20591*t20663*t20664*t20673*t20658*t20659*(t20727+alph*t20621*t20618*(t20704+t20706+t20715+t20726-t20753-t20754+t20729-t20695-t20749-Aa*t20610*t20615*t20733*t20635*t20645*t20647*2.0)*2.0)*(1.0/8.0)-t20620*t20653*t20752*t20618*1.0/(t20654*t20654*t20654)*t20672*t20619*t20655*t20656*t20657*(1.0/3.2E1))*2.0)*(1.0/2.0))/t20679+Aa*t20610*t20615*t20733*t20635*t20645*t20647*2.0+nu*t20617*t20663*t20735*t20658*t20659*t20598*(t20740*(Cc2*c*t20587*(1.0/3.0E3)+Cc3*t20582*t20688*(1.0/1.5E3))-t20744*1.0/(t20739*t20739)*(Cc4*c*t20587*(1.0/3.0)+Cc5*t20582*t20688*(2.0/3.0)+Cc6*c*t20582*t20665))*(1.0/1.6E1)-nu*t20702*t20617*t20735*t20747*t20658*t20659*t20598*(7.0/4.8E1)+nu*t20617*t20663*t20735*t20684*t20747*t20658*t20659*(1.0/1.6E1)+nu*t20617*t20663*t20735*t20747*t20658*t20659*t20598*(t20731*t20617*t20619*1.0/pow(t20575,1.1E1/3.0)*(2.0E2/3.0)-t20617*t20734*t20619*t20684*t20598*5.0E1)*(1.0/1.6E1))+t20731*t20755*t20667*t20668*t20598*(1.0/2.0)+t20610*t20611*t20612*t20615*(t20606-t20660)-nu*t20617*t20663*t20735*t20747*t20658*t20659*t20598*(1.0/1.6E1);
            }
            
            // v_rho_b
            if (deriv >= 1) {
                double t20757 = rho_a+rho_b;
                double t20758 = 1.0/pow(t20757,1.0/3.0);
                double t20759 = c*t20758;
                double t20760 = sqrt(t20759);
                double t20761 = b1p*t20760;
                double t20762 = pow(t20759,3.0/2.0);
                double t20763 = b3p*t20762;
                double t20764 = c*c;
                double t20765 = 1.0/pow(t20757,2.0/3.0);
                double t20766 = b4p*t20764*t20765;
                double t20767 = b2p*c*t20758;
                double t20768 = t20761+t20763+t20766+t20767;
                double t20769 = 1.0/pow(t20757,4.0/3.0);
                double t20770 = 1.0/t20757;
                double t20771 = rho_a-rho_b;
                double t20772 = t20770*t20771;
                double t20773 = 1.0/bet;
                double t20774 = t20772+1.0;
                double t20775 = pow(t20774,2.0/3.0);
                double t20776 = t20775*(1.0/2.0);
                double t20777 = -t20772+1.0;
                double t20778 = pow(t20777,2.0/3.0);
                double t20779 = t20778*(1.0/2.0);
                double t20780 = t20776+t20779;
                double t20781 = 1.0/c0p;
                double t20782 = 1.0/t20768;
                double t20783 = t20781*t20782*(1.0/2.0);
                double t20784 = t20783+1.0;
                double t20785 = a1p*c*t20758;
                double t20786 = t20785+1.0;
                double t20787 = log(t20784);
                double t20788 = c0p*t20786*t20787*2.0;
                double t20789 = t20771*t20771;
                double t20790 = two_13*2.0;
                double t20791 = t20790-2.0;
                double t20792 = 1.0/t20791;
                double t20793 = 1.0/(t20757*t20757*t20757*t20757);
                double t20794 = t20789*t20789;
                double t20795 = pow(t20774,4.0/3.0);
                double t20796 = pow(t20777,4.0/3.0);
                double t20797 = t20795+t20796-2.0;
                double t20798 = gamma_ab*2.0;
                double t20799 = gamma_aa+gamma_bb+t20798;
                double t20800 = 1.0/(bet*bet);
                double t20801 = 1.0/(k*k);
                double t20802 = 1.0/(pi_m12*pi_m12*pi_m12*pi_m12);
                double t20803 = 1.0/(t20780*t20780*t20780);
                double t20804 = 1.0/c0f;
                double t20805 = b1f*t20760;
                double t20806 = b3f*t20762;
                double t20807 = b4f*t20764*t20765;
                double t20808 = b2f*c*t20758;
                double t20809 = t20805+t20806+t20807+t20808;
                double t20810 = 1.0/t20809;
                double t20811 = t20810*t20804*(1.0/2.0);
                double t20812 = t20811+1.0;
                double t20813 = log(t20812);
                double t20814 = a1f*c*t20758;
                double t20815 = t20814+1.0;
                double t20842 = c0f*t20813*t20815*2.0;
                double t20816 = -t20842+t20788;
                double t20817 = 1.0/d2fz0;
                double t20818 = 1.0/Aa;
                double t20819 = b1a*t20760;
                double t20820 = b3a*t20762;
                double t20821 = b4a*t20764*t20765;
                double t20822 = b2a*c*t20758;
                double t20823 = t20820+t20821+t20822+t20819;
                double t20824 = 1.0/t20823;
                double t20825 = t20824*t20818*(1.0/2.0);
                double t20826 = t20825+1.0;
                double t20827 = log(t20826);
                double t20828 = a1a*c*t20758;
                double t20829 = t20828+1.0;
                double t20830 = t20793*t20794;
                double t20831 = t20830-1.0;
                double t20832 = Aa*t20831*t20817*t20827*t20792*t20829*t20797*2.0;
                double t20833 = t20832+t20788-t20816*t20792*t20793*t20794*t20797;
                double t20834 = alph*t20800*t20803*t20833*2.0;
                double t20835 = exp(t20834);
                double t20836 = t20835-1.0;
                double t20837 = 1.0/pow(t20757,1.4E1/3.0);
                double t20838 = 1.0/(t20780*t20780*t20780*t20780);
                double t20839 = t20799*t20799;
                double t20840 = 1.0/k;
                double t20841 = 1.0/(pi_m12*pi_m12);
                double t20843 = 1.0/pow(t20757,7.0/3.0);
                double t20844 = 1.0/(t20780*t20780);
                double t20845 = 1.0/(t20757*t20757);
                double t20846 = t20771*t20845;
                double t20847 = t20770+t20846;
                double t20848 = 1.0/alph;
                double t20849 = bet*bet;
                double t20850 = t20840*t20841*t20843*t20844*t20799*(1.0/1.6E1);
                double t20851 = t20842-t20788;
                double t20852 = t20851*t20792*t20793*t20794*t20797;
                double t20853 = t20832+t20852+t20788;
                double t20854 = alph*t20800*t20803*t20853*2.0;
                double t20855 = exp(t20854);
                double t20856 = t20855-1.0;
                double t20857 = 1.0/t20856;
                double t20858 = alph*alph;
                double t20859 = alph*t20840*t20841*t20843*t20844*t20773*t20857*t20799*(1.0/8.0);
                double t20860 = 1.0/(t20856*t20856);
                double t20861 = t20800*t20801*t20802*t20860*t20837*t20838*t20839*t20858*(1.0/6.4E1);
                double t20862 = t20861+t20859+1.0;
                double t20863 = 1.0/t20862;
                double t20864 = 1.0/pow(t20774,1.0/3.0);
                double t20865 = t20864*t20847*(1.0/3.0);
                double t20866 = 1.0/pow(t20777,1.0/3.0);
                double t20868 = t20847*t20866*(1.0/3.0);
                double t20867 = t20865-t20868;
                double t20869 = 1.0/t20784;
                double t20870 = 1.0/(t20768*t20768);
                double t20871 = 1.0/pow(t20757,5.0/3.0);
                double t20872 = b4p*t20871*t20764*(2.0/3.0);
                double t20873 = b2p*c*t20769*(1.0/3.0);
                double t20874 = 1.0/sqrt(t20759);
                double t20875 = b1p*c*t20874*t20769*(1.0/6.0);
                double t20876 = b3p*c*t20760*t20769*(1.0/2.0);
                double t20877 = t20872+t20873+t20875+t20876;
                double t20878 = 1.0/(t20757*t20757*t20757*t20757*t20757);
                double t20879 = pow(t20774,1.0/3.0);
                double t20880 = t20847*t20879*(4.0/3.0);
                double t20881 = pow(t20777,1.0/3.0);
                double t20891 = t20881*t20847*(4.0/3.0);
                double t20882 = t20880-t20891;
                double t20883 = alph*t20801*t20802*t20773*t20837*t20838*t20839*t20857*(1.0/1.28E2);
                double t20884 = t20850+t20883;
                double t20885 = 1.0/pow(t20757,1.7E1/3.0);
                double t20886 = 1.0/pow(t20757,1.0E1/3.0);
                double t20887 = 1.0/(t20780*t20780*t20780*t20780*t20780);
                double t20888 = t20870*t20786*t20877*t20869;
                double t20889 = t20851*t20771*t20792*t20793*t20797*t20789*4.0;
                double t20890 = t20851*t20792*t20794*t20797*t20878*4.0;
                double t20892 = t20851*t20792*t20882*t20793*t20794;
                double t20893 = 1.0/t20812;
                double t20894 = 1.0/(t20809*t20809);
                double t20895 = b4f*t20871*t20764*(2.0/3.0);
                double t20896 = b2f*c*t20769*(1.0/3.0);
                double t20897 = b1f*c*t20874*t20769*(1.0/6.0);
                double t20898 = b3f*c*t20760*t20769*(1.0/2.0);
                double t20899 = t20895+t20896+t20897+t20898;
                double t20900 = a1f*c*c0f*t20813*t20769*(2.0/3.0);
                double t20901 = a1p*c*c0p*t20769*t20787*(2.0/3.0);
                double t20902 = t20771*t20793*t20789*4.0;
                double t20903 = t20794*t20878*4.0;
                double t20904 = t20902+t20903;
                double t20905 = Aa*t20904*t20817*t20827*t20792*t20829*t20797*2.0;
                double t20906 = Aa*t20831*t20817*t20827*t20792*t20882*t20829*2.0;
                double t20907 = 1.0/t20826;
                double t20908 = 1.0/(t20823*t20823);
                double t20909 = b4a*t20871*t20764*(2.0/3.0);
                double t20910 = b2a*c*t20769*(1.0/3.0);
                double t20911 = b1a*c*t20874*t20769*(1.0/6.0);
                double t20912 = b3a*c*t20760*t20769*(1.0/2.0);
                double t20913 = t20910+t20911+t20912+t20909;
                double t20914 = Aa*a1a*c*t20831*t20817*t20827*t20792*t20769*t20797*(2.0/3.0);
                double t20920 = t20815*t20893*t20894*t20899;
                double t20915 = t20792*t20793*t20794*t20797*(t20900-t20901-t20920+t20888);
                double t20921 = t20831*t20913*t20817*t20907*t20908*t20792*t20829*t20797;
                double t20916 = t20901-t20921+t20905+t20914+t20906+t20915+t20890+t20892-t20888+t20889;
                double t20917 = alph*t20800*t20803*t20916*2.0;
                double t20918 = t20917-alph*t20800*t20853*t20838*t20867*6.0;
                double t20919 = t20780*t20780;
                double t20922 = 1.0/pow(t20757,8.0/3.0);
                double t20933 = t20801*t20922*t20919*t20799*2.5E1;
                double t20923 = exp(-t20933);
                double t20924 = Cc5*t20764*t20765;
                double t20925 = Cc6*c*t20770*t20764;
                double t20926 = Cc4*c*t20758;
                double t20927 = t20924+t20925+t20926+1.0;
                double t20928 = 1.0/t20927;
                double t20929 = Cc1*(1.0/1.0E3);
                double t20930 = Cc3*t20764*t20765*(1.0/1.0E3);
                double t20931 = Cc2*c*t20758*(1.0/1.0E3);
                double t20932 = t20930+t20931+t20929;
                double t20934 = Cx*(1.0E1/7.0);
                double t20936 = t20932*t20928;
                double t20935 = Cc0+t20934-t20936;
                double t20937 = alph*t20773*t20863*t20884*2.0;
                double t20938 = t20937+1.0;
                v_rho_b[Q] += scale * -t20832-t20852-t20788+t20757*(t20901-t20921+t20905+t20914+t20906+t20915+t20890+t20892+t20889-t20870*t20786*t20877*t20869-t20919*t20848*t20849*t20867*log((alph*t20773*(t20850+(alph*t20801*t20802*t20773*t20837*t20838*t20839*(1.0/1.28E2))/t20836)*2.0)/(t20859+t20800*t20801*t20802*1.0/(t20836*t20836)*t20837*t20838*t20839*t20858*(1.0/6.4E1)+1.0)+1.0)*(3.0/2.0)+(t20780*t20919*t20848*t20849*(alph*t20773*t20863*(t20840*t20841*t20844*t20886*t20799*(-7.0/4.8E1)+t20803*t20840*t20841*t20843*t20867*t20799*(1.0/8.0)-alph*t20801*t20802*t20773*t20838*t20839*t20857*t20885*(7.0/1.92E2)+alph*t20801*t20802*t20773*t20837*t20839*t20857*t20867*t20887*(1.0/3.2E1)+alph*t20801*t20802*t20860*t20773*t20837*t20855*t20838*t20839*(alph*t20800*t20803*(t20901+t20905+t20914+t20906+t20890+t20892+t20889-t20870*t20786*t20877*t20869+t20792*t20793*t20794*t20797*(t20900+t20888-t20815*t20893*t20894*t20899-a1p*c*c0p*t20769*t20787*(2.0/3.0))-t20831*t20913*t20817*t20907*t20908*t20792*t20829*t20797)*2.0-alph*t20800*t20853*t20838*t20867*6.0)*(1.0/1.28E2))*2.0-alph*1.0/(t20862*t20862)*t20773*t20884*(t20800*t20801*t20802*t20860*t20838*t20839*t20858*t20885*(-7.0/9.6E1)-alph*t20840*t20841*t20844*t20773*t20857*t20886*t20799*(7.0/2.4E1)+alph*t20803*t20840*t20841*t20843*t20773*t20857*t20867*t20799*(1.0/4.0)+t20800*t20801*t20802*t20860*t20837*t20839*t20858*t20867*t20887*(1.0/1.6E1)+t20800*t20801*t20802*t20837*t20855*t20918*t20838*1.0/(t20856*t20856*t20856)*t20839*t20858*(1.0/3.2E1)+alph*t20840*t20841*t20860*t20843*t20844*t20773*t20855*t20918*t20799*(1.0/8.0))*2.0)*(1.0/2.0))/t20938-nu*t20840*t20841*t20923*t20780*t20843*t20799*(t20928*(Cc2*c*t20769*(1.0/3.0E3)+Cc3*t20871*t20764*(1.0/1.5E3))-t20932*1.0/(t20927*t20927)*(Cc4*c*t20769*(1.0/3.0)+Cc5*t20871*t20764*(2.0/3.0)+Cc6*c*t20764*t20845))*(1.0/1.6E1)+nu*t20840*t20841*t20923*t20843*t20935*t20867*t20799*(1.0/1.6E1)+nu*t20840*t20841*t20923*t20780*t20935*t20886*t20799*(7.0/4.8E1)-nu*t20840*t20841*t20923*t20780*t20843*t20935*t20799*(t20801*1.0/pow(t20757,1.1E1/3.0)*t20919*t20799*(2.0E2/3.0)+t20801*t20922*t20780*t20867*t20799*5.0E1)*(1.0/1.6E1))+t20780*t20919*t20848*t20849*log(t20938)*(1.0/2.0)-nu*t20840*t20841*t20923*t20780*t20843*t20935*t20799*(1.0/1.6E1);
            }
            
            // v_gamma_aa
            if (deriv >= 1) {
                double t20940 = rho_a+rho_b;
                double t20941 = 1.0/t20940;
                double t20942 = rho_a-rho_b;
                double t20943 = t20941*t20942;
                double t20944 = 1.0/bet;
                double t20945 = t20943+1.0;
                double t20946 = pow(t20945,2.0/3.0);
                double t20947 = t20946*(1.0/2.0);
                double t20948 = -t20943+1.0;
                double t20949 = pow(t20948,2.0/3.0);
                double t20950 = t20949*(1.0/2.0);
                double t20951 = t20950+t20947;
                double t20952 = 1.0/pow(t20940,1.0/3.0);
                double t20953 = c*t20952;
                double t20954 = sqrt(t20953);
                double t20955 = pow(t20953,3.0/2.0);
                double t20956 = c*c;
                double t20957 = 1.0/pow(t20940,2.0/3.0);
                double t20958 = 1.0/c0p;
                double t20959 = b1p*t20954;
                double t20960 = b3p*t20955;
                double t20961 = b4p*t20956*t20957;
                double t20962 = b2p*c*t20952;
                double t20963 = t20960+t20961+t20962+t20959;
                double t20964 = 1.0/t20963;
                double t20965 = t20964*t20958*(1.0/2.0);
                double t20966 = t20965+1.0;
                double t20967 = log(t20966);
                double t20968 = a1p*c*t20952;
                double t20969 = t20968+1.0;
                double t20970 = c0p*t20967*t20969*2.0;
                double t20971 = t20942*t20942;
                double t20972 = two_13*2.0;
                double t20973 = t20972-2.0;
                double t20974 = 1.0/t20973;
                double t20975 = 1.0/(t20940*t20940*t20940*t20940);
                double t20976 = t20971*t20971;
                double t20977 = pow(t20945,4.0/3.0);
                double t20978 = pow(t20948,4.0/3.0);
                double t20979 = t20977+t20978-2.0;
                double t20980 = gamma_ab*2.0;
                double t20981 = gamma_aa+gamma_bb+t20980;
                double t20982 = 1.0/(bet*bet);
                double t20983 = 1.0/(k*k);
                double t20984 = 1.0/(pi_m12*pi_m12*pi_m12*pi_m12);
                double t20985 = 1.0/(t20951*t20951*t20951);
                double t20986 = 1.0/c0f;
                double t20987 = b1f*t20954;
                double t20988 = b3f*t20955;
                double t20989 = b4f*t20956*t20957;
                double t20990 = b2f*c*t20952;
                double t20991 = t20990+t20987+t20988+t20989;
                double t20992 = 1.0/t20991;
                double t20993 = t20992*t20986*(1.0/2.0);
                double t20994 = t20993+1.0;
                double t20995 = log(t20994);
                double t20996 = a1f*c*t20952;
                double t20997 = t20996+1.0;
                double t21024 = c0f*t20995*t20997*2.0;
                double t20998 = t20970-t21024;
                double t20999 = 1.0/d2fz0;
                double t21000 = 1.0/Aa;
                double t21001 = b1a*t20954;
                double t21002 = b3a*t20955;
                double t21003 = b4a*t20956*t20957;
                double t21004 = b2a*c*t20952;
                double t21005 = t21001+t21002+t21003+t21004;
                double t21006 = 1.0/t21005;
                double t21007 = t21000*t21006*(1.0/2.0);
                double t21008 = t21007+1.0;
                double t21009 = log(t21008);
                double t21010 = a1a*c*t20952;
                double t21011 = t21010+1.0;
                double t21012 = t20975*t20976;
                double t21013 = t21012-1.0;
                double t21014 = Aa*t20974*t20979*t20999*t21011*t21013*t21009*2.0;
                double t21025 = t20974*t20975*t20976*t20979*t20998;
                double t21015 = t20970+t21014-t21025;
                double t21016 = alph*t20982*t20985*t21015*2.0;
                double t21017 = exp(t21016);
                double t21018 = t21017-1.0;
                double t21019 = 1.0/pow(t20940,1.4E1/3.0);
                double t21020 = 1.0/(t20951*t20951*t20951*t20951);
                double t21021 = t20981*t20981;
                double t21022 = 1.0/k;
                double t21023 = 1.0/(pi_m12*pi_m12);
                double t21026 = 1.0/t21018;
                double t21027 = 1.0/pow(t20940,7.0/3.0);
                double t21028 = 1.0/(t20951*t20951);
                double t21029 = alph*alph;
                double t21030 = 1.0/(t21018*t21018);
                double t21031 = t20982*t20983*t20984*t21020*t21021*t21030*t21019*t21029*(1.0/6.4E1);
                double t21032 = alph*t20944*t20981*t21022*t21023*t21026*t21027*t21028*(1.0/8.0);
                double t21033 = t21031+t21032+1.0;
                double t21034 = 1.0/t21033;
                double t21035 = t20981*t21022*t21023*t21027*t21028*(1.0/1.6E1);
                double t21036 = alph*t20944*t20983*t20984*t21020*t21021*t21026*t21019*(1.0/1.28E2);
                double t21037 = t21035+t21036;
                double t21038 = gamma_aa*2.0;
                double t21039 = gamma_ab*4.0;
                double t21040 = gamma_bb*2.0;
                double t21041 = t21040+t21038+t21039;
                double t21042 = t20951*t20951;
                double t21043 = 1.0/pow(t20940,8.0/3.0);
                double t21044 = exp(t20981*t20983*t21042*t21043*-2.5E1);
                double t21045 = Cx*(1.0E1/7.0);
                double t21046 = Cc1*(1.0/1.0E3);
                double t21047 = Cc3*t20956*t20957*(1.0/1.0E3);
                double t21048 = Cc2*c*t20952*(1.0/1.0E3);
                double t21049 = t21046+t21047+t21048;
                double t21050 = Cc5*t20956*t20957;
                double t21051 = Cc6*c*t20941*t20956;
                double t21052 = Cc4*c*t20952;
                double t21053 = t21050+t21051+t21052+1.0;
                double t21054 = 1.0/t21053;
                double t21055 = Cc0+t21045-t21054*t21049;
                v_gamma_aa[Q] += scale * t20940*(((bet*bet)*t20951*t21042*(alph*t20944*t21034*(t21022*t21023*t21027*t21028*(1.0/1.6E1)+alph*t20944*t20983*t20984*t21020*t21041*t21026*t21019*(1.0/1.28E2))*2.0-alph*t20944*1.0/(t21033*t21033)*t21037*(alph*t20944*t21022*t21023*t21026*t21027*t21028*(1.0/8.0)+t20982*t20983*t20984*t21020*t21030*t21041*t21019*t21029*(1.0/6.4E1))*2.0)*(1.0/2.0))/(alph*(alph*t20944*t21034*t21037*2.0+1.0))-nu*t20951*t21022*t21023*t21044*t21027*t21055*(1.0/1.6E1)+1.0/(k*k*k)*nu*1.0/(t20940*t20940*t20940*t20940*t20940)*t20951*t20981*t21023*t21042*t21044*t21055*(2.5E1/1.6E1));
            }
            
            // v_gamma_ab
            if (deriv >= 1) {
                double t21057 = rho_a+rho_b;
                double t21058 = 1.0/t21057;
                double t21059 = rho_a-rho_b;
                double t21060 = t21058*t21059;
                double t21061 = 1.0/bet;
                double t21062 = t21060+1.0;
                double t21063 = pow(t21062,2.0/3.0);
                double t21064 = t21063*(1.0/2.0);
                double t21065 = -t21060+1.0;
                double t21066 = pow(t21065,2.0/3.0);
                double t21067 = t21066*(1.0/2.0);
                double t21068 = t21064+t21067;
                double t21069 = 1.0/pow(t21057,1.0/3.0);
                double t21070 = c*t21069;
                double t21071 = sqrt(t21070);
                double t21072 = pow(t21070,3.0/2.0);
                double t21073 = c*c;
                double t21074 = 1.0/pow(t21057,2.0/3.0);
                double t21075 = 1.0/c0p;
                double t21076 = b1p*t21071;
                double t21077 = b3p*t21072;
                double t21078 = b4p*t21073*t21074;
                double t21079 = b2p*c*t21069;
                double t21080 = t21076+t21077+t21078+t21079;
                double t21081 = 1.0/t21080;
                double t21082 = t21081*t21075*(1.0/2.0);
                double t21083 = t21082+1.0;
                double t21084 = log(t21083);
                double t21085 = a1p*c*t21069;
                double t21086 = t21085+1.0;
                double t21087 = c0p*t21084*t21086*2.0;
                double t21088 = t21059*t21059;
                double t21089 = two_13*2.0;
                double t21090 = t21089-2.0;
                double t21091 = 1.0/t21090;
                double t21092 = 1.0/(t21057*t21057*t21057*t21057);
                double t21093 = t21088*t21088;
                double t21094 = pow(t21062,4.0/3.0);
                double t21095 = pow(t21065,4.0/3.0);
                double t21096 = t21094+t21095-2.0;
                double t21097 = gamma_ab*2.0;
                double t21098 = gamma_aa+gamma_bb+t21097;
                double t21099 = 1.0/(bet*bet);
                double t21100 = 1.0/(k*k);
                double t21101 = 1.0/(pi_m12*pi_m12*pi_m12*pi_m12);
                double t21102 = 1.0/(t21068*t21068*t21068);
                double t21103 = 1.0/c0f;
                double t21104 = b1f*t21071;
                double t21105 = b3f*t21072;
                double t21106 = b4f*t21073*t21074;
                double t21107 = b2f*c*t21069;
                double t21108 = t21104+t21105+t21106+t21107;
                double t21109 = 1.0/t21108;
                double t21110 = t21103*t21109*(1.0/2.0);
                double t21111 = t21110+1.0;
                double t21112 = log(t21111);
                double t21113 = a1f*c*t21069;
                double t21114 = t21113+1.0;
                double t21141 = c0f*t21112*t21114*2.0;
                double t21115 = -t21141+t21087;
                double t21116 = 1.0/d2fz0;
                double t21117 = 1.0/Aa;
                double t21118 = b1a*t21071;
                double t21119 = b3a*t21072;
                double t21120 = b4a*t21073*t21074;
                double t21121 = b2a*c*t21069;
                double t21122 = t21120+t21121+t21118+t21119;
                double t21123 = 1.0/t21122;
                double t21124 = t21123*t21117*(1.0/2.0);
                double t21125 = t21124+1.0;
                double t21126 = log(t21125);
                double t21127 = a1a*c*t21069;
                double t21128 = t21127+1.0;
                double t21129 = t21092*t21093;
                double t21130 = t21129-1.0;
                double t21131 = Aa*t21130*t21116*t21126*t21091*t21128*t21096*2.0;
                double t21132 = t21131+t21087-t21115*t21091*t21092*t21093*t21096;
                double t21133 = alph*t21102*t21132*t21099*2.0;
                double t21134 = exp(t21133);
                double t21135 = t21134-1.0;
                double t21136 = 1.0/pow(t21057,1.4E1/3.0);
                double t21137 = 1.0/(t21068*t21068*t21068*t21068);
                double t21138 = t21098*t21098;
                double t21139 = 1.0/k;
                double t21140 = 1.0/(pi_m12*pi_m12);
                double t21142 = 1.0/pow(t21057,7.0/3.0);
                double t21143 = 1.0/(t21068*t21068);
                double t21144 = t21141-t21087;
                double t21145 = t21144*t21091*t21092*t21093*t21096;
                double t21146 = t21131+t21145+t21087;
                double t21147 = alph*t21102*t21146*t21099*2.0;
                double t21148 = exp(t21147);
                double t21149 = t21148-1.0;
                double t21150 = 1.0/t21149;
                double t21151 = alph*alph;
                double t21152 = alph*t21140*t21150*t21061*t21142*t21143*t21139*t21098*(1.0/8.0);
                double t21153 = t21140*t21142*t21143*t21139*t21098*(1.0/1.6E1);
                double t21154 = 1.0/(t21149*t21149);
                double t21155 = gamma_aa*4.0;
                double t21156 = gamma_ab*8.0;
                double t21157 = gamma_bb*4.0;
                double t21158 = t21155+t21156+t21157;
                double t21159 = t21100*t21101*t21151*t21136*t21154*t21137*t21138*t21099*(1.0/6.4E1);
                double t21160 = t21152+t21159+1.0;
                double t21161 = t21068*t21068;
                double t21162 = 1.0/pow(t21057,8.0/3.0);
                double t21163 = exp(t21100*t21161*t21162*t21098*-2.5E1);
                double t21164 = Cx*(1.0E1/7.0);
                double t21165 = Cc1*(1.0/1.0E3);
                double t21166 = Cc3*t21073*t21074*(1.0/1.0E3);
                double t21167 = Cc2*c*t21069*(1.0/1.0E3);
                double t21168 = t21165+t21166+t21167;
                double t21169 = Cc5*t21073*t21074;
                double t21170 = Cc6*c*t21073*t21058;
                double t21171 = Cc4*c*t21069;
                double t21172 = t21170+t21171+t21169+1.0;
                double t21173 = 1.0/t21172;
                double t21174 = Cc0+t21164-t21173*t21168;
                v_gamma_ab[Q] += scale * t21057*(((bet*bet)*t21161*t21068*((alph*t21061*(t21140*t21142*t21143*t21139*(1.0/8.0)+alph*t21100*t21101*t21150*t21061*t21136*t21137*t21158*(1.0/1.28E2))*2.0)/t21160-alph*t21061*1.0/(t21160*t21160)*(t21153+alph*t21100*t21101*t21150*t21061*t21136*t21137*t21138*(1.0/1.28E2))*(alph*t21140*t21150*t21061*t21142*t21143*t21139*(1.0/4.0)+t21100*t21101*t21151*t21136*t21154*t21137*t21158*t21099*(1.0/6.4E1))*2.0)*(1.0/2.0))/(alph*((alph*t21061*(t21153+(alph*t21100*t21101*t21061*t21136*t21137*t21138*(1.0/1.28E2))/t21135)*2.0)/(t21152+t21100*t21101*t21151*1.0/(t21135*t21135)*t21136*t21137*t21138*t21099*(1.0/6.4E1)+1.0)+1.0))-nu*t21140*t21142*t21163*t21174*t21139*t21068*(1.0/8.0)+1.0/(k*k*k)*nu*t21140*t21161*t21163*1.0/(t21057*t21057*t21057*t21057*t21057)*t21174*t21068*t21098*(2.5E1/8.0));
            }
            
            // v_gamma_bb
            if (deriv >= 1) {
                double t21176 = rho_a+rho_b;
                double t21177 = 1.0/t21176;
                double t21178 = rho_a-rho_b;
                double t21179 = t21177*t21178;
                double t21180 = 1.0/bet;
                double t21181 = t21179+1.0;
                double t21182 = pow(t21181,2.0/3.0);
                double t21183 = t21182*(1.0/2.0);
                double t21184 = -t21179+1.0;
                double t21185 = pow(t21184,2.0/3.0);
                double t21186 = t21185*(1.0/2.0);
                double t21187 = t21183+t21186;
                double t21188 = 1.0/pow(t21176,1.0/3.0);
                double t21189 = c*t21188;
                double t21190 = sqrt(t21189);
                double t21191 = pow(t21189,3.0/2.0);
                double t21192 = c*c;
                double t21193 = 1.0/pow(t21176,2.0/3.0);
                double t21194 = 1.0/c0p;
                double t21195 = b1p*t21190;
                double t21196 = b3p*t21191;
                double t21197 = b4p*t21192*t21193;
                double t21198 = b2p*c*t21188;
                double t21199 = t21195+t21196+t21197+t21198;
                double t21200 = 1.0/t21199;
                double t21201 = t21200*t21194*(1.0/2.0);
                double t21202 = t21201+1.0;
                double t21203 = log(t21202);
                double t21204 = a1p*c*t21188;
                double t21205 = t21204+1.0;
                double t21206 = c0p*t21203*t21205*2.0;
                double t21207 = t21178*t21178;
                double t21208 = two_13*2.0;
                double t21209 = t21208-2.0;
                double t21210 = 1.0/t21209;
                double t21211 = 1.0/(t21176*t21176*t21176*t21176);
                double t21212 = t21207*t21207;
                double t21213 = pow(t21181,4.0/3.0);
                double t21214 = pow(t21184,4.0/3.0);
                double t21215 = t21213+t21214-2.0;
                double t21216 = gamma_ab*2.0;
                double t21217 = gamma_aa+gamma_bb+t21216;
                double t21218 = 1.0/(bet*bet);
                double t21219 = 1.0/(k*k);
                double t21220 = 1.0/(pi_m12*pi_m12*pi_m12*pi_m12);
                double t21221 = 1.0/(t21187*t21187*t21187);
                double t21222 = 1.0/c0f;
                double t21223 = b1f*t21190;
                double t21224 = b3f*t21191;
                double t21225 = b4f*t21192*t21193;
                double t21226 = b2f*c*t21188;
                double t21227 = t21223+t21224+t21225+t21226;
                double t21228 = 1.0/t21227;
                double t21229 = t21222*t21228*(1.0/2.0);
                double t21230 = t21229+1.0;
                double t21231 = log(t21230);
                double t21232 = a1f*c*t21188;
                double t21233 = t21232+1.0;
                double t21260 = c0f*t21231*t21233*2.0;
                double t21234 = t21206-t21260;
                double t21235 = 1.0/d2fz0;
                double t21236 = 1.0/Aa;
                double t21237 = b1a*t21190;
                double t21238 = b3a*t21191;
                double t21239 = b4a*t21192*t21193;
                double t21240 = b2a*c*t21188;
                double t21241 = t21240+t21237+t21238+t21239;
                double t21242 = 1.0/t21241;
                double t21243 = t21242*t21236*(1.0/2.0);
                double t21244 = t21243+1.0;
                double t21245 = log(t21244);
                double t21246 = a1a*c*t21188;
                double t21247 = t21246+1.0;
                double t21248 = t21211*t21212;
                double t21249 = t21248-1.0;
                double t21250 = Aa*t21210*t21215*t21235*t21245*t21247*t21249*2.0;
                double t21261 = t21210*t21211*t21212*t21215*t21234;
                double t21251 = t21250+t21206-t21261;
                double t21252 = alph*t21221*t21251*t21218*2.0;
                double t21253 = exp(t21252);
                double t21254 = t21253-1.0;
                double t21255 = 1.0/pow(t21176,1.4E1/3.0);
                double t21256 = 1.0/(t21187*t21187*t21187*t21187);
                double t21257 = t21217*t21217;
                double t21258 = 1.0/k;
                double t21259 = 1.0/(pi_m12*pi_m12);
                double t21262 = 1.0/t21254;
                double t21263 = 1.0/pow(t21176,7.0/3.0);
                double t21264 = 1.0/(t21187*t21187);
                double t21265 = alph*alph;
                double t21266 = 1.0/(t21254*t21254);
                double t21267 = t21220*t21218*t21219*t21255*t21256*t21265*t21257*t21266*(1.0/6.4E1);
                double t21268 = alph*t21180*t21217*t21262*t21263*t21264*t21258*t21259*(1.0/8.0);
                double t21269 = t21267+t21268+1.0;
                double t21270 = 1.0/t21269;
                double t21271 = t21217*t21263*t21264*t21258*t21259*(1.0/1.6E1);
                double t21272 = alph*t21220*t21180*t21262*t21219*t21255*t21256*t21257*(1.0/1.28E2);
                double t21273 = t21271+t21272;
                double t21274 = gamma_aa*2.0;
                double t21275 = gamma_ab*4.0;
                double t21276 = gamma_bb*2.0;
                double t21277 = t21274+t21275+t21276;
                double t21278 = t21187*t21187;
                double t21279 = 1.0/pow(t21176,8.0/3.0);
                double t21280 = exp(t21217*t21219*t21278*t21279*-2.5E1);
                double t21281 = Cx*(1.0E1/7.0);
                double t21282 = Cc1*(1.0/1.0E3);
                double t21283 = Cc3*t21192*t21193*(1.0/1.0E3);
                double t21284 = Cc2*c*t21188*(1.0/1.0E3);
                double t21285 = t21282+t21283+t21284;
                double t21286 = Cc5*t21192*t21193;
                double t21287 = Cc6*c*t21192*t21177;
                double t21288 = Cc4*c*t21188;
                double t21289 = t21286+t21287+t21288+1.0;
                double t21290 = 1.0/t21289;
                double t21291 = Cc0+t21281-t21290*t21285;
                v_gamma_bb[Q] += scale * t21176*(((bet*bet)*t21187*t21278*(alph*t21180*t21270*(t21263*t21264*t21258*t21259*(1.0/1.6E1)+alph*t21220*t21180*t21262*t21219*t21255*t21256*t21277*(1.0/1.28E2))*2.0-alph*t21180*t21273*1.0/(t21269*t21269)*(alph*t21180*t21262*t21263*t21264*t21258*t21259*(1.0/8.0)+t21220*t21218*t21219*t21255*t21256*t21265*t21266*t21277*(1.0/6.4E1))*2.0)*(1.0/2.0))/(alph*(alph*t21180*t21270*t21273*2.0+1.0))-nu*t21280*t21263*t21291*t21258*t21187*t21259*(1.0/1.6E1)+1.0/(k*k*k)*nu*t21217*t21280*t21291*1.0/(t21176*t21176*t21176*t21176*t21176)*t21187*t21259*t21278*(2.5E1/1.6E1));
            }
            
        }
    }
}

}
