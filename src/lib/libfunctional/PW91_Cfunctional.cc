#include <libmints/vector.h>
#include "PW91_Cfunctional.h"
#include "utility.h"
#include <cmath>

using namespace psi;

namespace psi {

PW91_CFunctional::PW91_CFunctional()
{
    name_ = "PW91_C";
    description_ = "    PW91 Correlation\n";
    citation_ = "    J.P. Perdew, et. al., Phys. Rev. B., 46(11), 6671-6687, 1992\n";
    alpha_ = 1.0;
    omega_ = 0.0;
    lrc_ = false;
    gga_ = true;
    meta_ = false;
    parameters_["c"] =   6.2035049089939986E-01;
    parameters_["two_13"] =   1.2599210498948732E+00;
    parameters_["k"] =   3.0936677262801355E+00;
    parameters_["pi_m12"] =   5.6418958354775628E-01;
    parameters_["d2fz0"] =   1.7099210000000000E+00;
    parameters_["Aa"] =   1.6886999999999999E-02;
    parameters_["a1a"] =   1.1125000000000000E-01;
    parameters_["b1a"] =   1.0356999999999999E+01;
    parameters_["b2a"] =   3.6231000000000000E+00;
    parameters_["b3a"] =   8.8026000000000004E-01;
    parameters_["b4a"] =   4.9670999999999998E-01;
    parameters_["c0p"] =   3.1091000000000001E-02;
    parameters_["a1p"] =   2.1370000000000000E-01;
    parameters_["b1p"] =   7.5956999999999999E+00;
    parameters_["b2p"] =   3.5876000000000001E+00;
    parameters_["b3p"] =   1.6382000000000001E+00;
    parameters_["b4p"] =   4.9293999999999999E-01;
    parameters_["c0f"] =   1.5545000000000000E-02;
    parameters_["a1f"] =   2.0548000000000000E-01;
    parameters_["b1f"] =   1.4118900000000000E+01;
    parameters_["b2f"] =   6.1977000000000002E+00;
    parameters_["b3f"] =   3.3662000000000001E+00;
    parameters_["b4f"] =   6.2517000000000000E-01;
    parameters_["alph"] =   8.9999999999999997E-02;
    parameters_["bet"] =   6.6726322680061109E-02;
    parameters_["nu"] =   1.5755920349483143E+01;
    parameters_["Cc0"] =   4.2350000000000000E-03;
    parameters_["Cx"] =  -1.6670000000000001E-03;
    parameters_["Cc1"] =   2.5680000000000001E+00;
    parameters_["Cc2"] =   2.3265999999999998E+01;
    parameters_["Cc3"] =   7.3889999999999997E-03;
    parameters_["Cc4"] =   8.7230000000000008E+00;
    parameters_["Cc5"] =   4.7199999999999998E-01;
    parameters_["Cc6"] =   7.3889999999999997E-02;
}
PW91_CFunctional::~PW91_CFunctional()
{
}
void PW91_CFunctional::compute_functional(const std::map<std::string,SharedVector>& in, const std::map<std::string,SharedVector>& out, int npoints, int deriv, double alpha)
{
    double c = parameters_["c"];
    double two_13 = parameters_["two_13"];
    double k = parameters_["k"];
    double pi_m12 = parameters_["pi_m12"];
    double d2fz0 = parameters_["d2fz0"];
    double Aa = parameters_["Aa"];
    double a1a = parameters_["a1a"];
    double b1a = parameters_["b1a"];
    double b2a = parameters_["b2a"];
    double b3a = parameters_["b3a"];
    double b4a = parameters_["b4a"];
    double c0p = parameters_["c0p"];
    double a1p = parameters_["a1p"];
    double b1p = parameters_["b1p"];
    double b2p = parameters_["b2p"];
    double b3p = parameters_["b3p"];
    double b4p = parameters_["b4p"];
    double c0f = parameters_["c0f"];
    double a1f = parameters_["a1f"];
    double b1f = parameters_["b1f"];
    double b2f = parameters_["b2f"];
    double b3f = parameters_["b3f"];
    double b4f = parameters_["b4f"];
    double alph = parameters_["alph"];
    double bet = parameters_["bet"];
    double nu = parameters_["nu"];
    double Cc0 = parameters_["Cc0"];
    double Cx = parameters_["Cx"];
    double Cc1 = parameters_["Cc1"];
    double Cc2 = parameters_["Cc2"];
    double Cc3 = parameters_["Cc3"];
    double Cc4 = parameters_["Cc4"];
    double Cc5 = parameters_["Cc5"];
    double Cc6 = parameters_["Cc6"];

    // Overall scale factor
    double scale = alpha_ * alpha;

    // => Input variables <= //

    double* rho_ap = NULL;
    double* rho_bp = NULL;
    double* gamma_aap = NULL;
    double* gamma_abp = NULL;
    double* gamma_bbp = NULL;
    double* tau_ap = NULL;
    double* tau_bp = NULL;

    if (true) {
        rho_ap = in.find("RHO_A")->second->pointer();
        rho_bp = in.find("RHO_B")->second->pointer();
    }
    if (gga_) {  
        gamma_aap = in.find("GAMMA_AA")->second->pointer();
        gamma_abp = in.find("GAMMA_AB")->second->pointer();
        gamma_bbp = in.find("GAMMA_BB")->second->pointer();
    } 
    if (meta_)  {
        tau_ap = in.find("TAU_A")->second->pointer();
        tau_bp = in.find("TAU_B")->second->pointer();
    }

    // => Outut variables <= //

    double* v = NULL;

    double* v_rho_a = NULL;
    double* v_rho_b = NULL;
    double* v_gamma_aa = NULL;
    double* v_gamma_ab = NULL;
    double* v_gamma_bb = NULL;
    double* v_tau_a = NULL;
    double* v_tau_b = NULL;
     
    double* v_rho_a_rho_a = NULL;
    double* v_rho_a_rho_b = NULL;
    double* v_rho_b_rho_b = NULL;
    double* v_gamma_aa_gamma_aa = NULL;
    double* v_gamma_aa_gamma_ab = NULL;
    double* v_gamma_aa_gamma_bb = NULL;
    double* v_gamma_ab_gamma_ab = NULL;
    double* v_gamma_ab_gamma_bb = NULL;
    double* v_gamma_bb_gamma_bb = NULL;
    double* v_tau_a_tau_a = NULL;
    double* v_tau_a_tau_b = NULL;
    double* v_tau_b_tau_b = NULL;
    double* v_rho_a_gamma_aa = NULL;
    double* v_rho_a_gamma_ab = NULL;
    double* v_rho_a_gamma_bb = NULL;
    double* v_rho_b_gamma_aa = NULL;
    double* v_rho_b_gamma_ab = NULL;
    double* v_rho_b_gamma_bb = NULL;
    double* v_rho_a_tau_a = NULL;
    double* v_rho_a_tau_b = NULL;
    double* v_rho_b_tau_a = NULL;
    double* v_rho_b_tau_b = NULL;
    double* v_gamma_aa_tau_a = NULL;
    double* v_gamma_aa_tau_b = NULL;
    double* v_gamma_ab_tau_a = NULL;
    double* v_gamma_ab_tau_b = NULL;
    double* v_gamma_bb_tau_a = NULL;
    double* v_gamma_bb_tau_b = NULL;

    if (deriv >= 0) {
        v = out.find("V")->second->pointer();
    } 
    if (deriv >= 1) {
        if (true) {
            v_rho_a = out.find("V_RHO_A")->second->pointer();
            v_rho_b = out.find("V_RHO_B")->second->pointer();
        }
        if (gga_) {
            v_gamma_aa = out.find("V_GAMMA_AA")->second->pointer();
            v_gamma_ab = out.find("V_GAMMA_AB")->second->pointer();
            v_gamma_bb = out.find("V_GAMMA_BB")->second->pointer();
        }
        if (meta_) {    
            v_tau_a = out.find("V_TAU_A")->second->pointer();
            v_tau_b = out.find("V_TAU_B")->second->pointer();
        }
    }
    if (deriv >= 2) {
        if (true) {
            v_rho_a_rho_a = out.find("V_RHO_A_RHO_A")->second->pointer();
            v_rho_a_rho_b = out.find("V_RHO_A_RHO_B")->second->pointer();
            v_rho_b_rho_b = out.find("V_RHO_B_RHO_B")->second->pointer();
        }
        if (gga_) {
            v_gamma_aa_gamma_aa = out.find("V_GAMMA_AA_GAMMA_AA")->second->pointer();
            v_gamma_aa_gamma_ab = out.find("V_GAMMA_AA_GAMMA_AB")->second->pointer();
            v_gamma_aa_gamma_bb = out.find("V_GAMMA_AA_GAMMA_BB")->second->pointer();
            v_gamma_ab_gamma_ab = out.find("V_GAMMA_AB_GAMMA_AB")->second->pointer();
            v_gamma_ab_gamma_bb = out.find("V_GAMMA_AB_GAMMA_BB")->second->pointer();
            v_gamma_bb_gamma_bb = out.find("V_GAMMA_BB_GAMMA_BB")->second->pointer();
        }
        if (meta_) {
            v_tau_a_tau_a = out.find("V_TAU_A_TAU_A")->second->pointer();
            v_tau_a_tau_b = out.find("V_TAU_A_TAU_B")->second->pointer();
            v_tau_b_tau_b = out.find("V_TAU_B_TAU_B")->second->pointer();
        }
        if (gga_) {
            v_rho_a_gamma_aa = out.find("V_RHO_A_GAMMA_AA")->second->pointer();
            v_rho_a_gamma_ab = out.find("V_RHO_A_GAMMA_AB")->second->pointer();
            v_rho_a_gamma_bb = out.find("V_RHO_A_GAMMA_BB")->second->pointer();
            v_rho_b_gamma_aa = out.find("V_RHO_B_GAMMA_AA")->second->pointer();
            v_rho_b_gamma_ab = out.find("V_RHO_B_GAMMA_AB")->second->pointer();
            v_rho_b_gamma_bb = out.find("V_RHO_B_GAMMA_BB")->second->pointer();
        }
        if (meta_) {
            v_rho_a_tau_a = out.find("V_RHO_A_TAU_A")->second->pointer();
            v_rho_a_tau_b = out.find("V_RHO_A_TAU_B")->second->pointer();
            v_rho_b_tau_a = out.find("V_RHO_B_TAU_A")->second->pointer();
            v_rho_b_tau_b = out.find("V_RHO_B_TAU_B")->second->pointer();
        }
        if (gga_ && meta_) {
            v_gamma_aa_tau_a = out.find("V_GAMMA_AA_TAU_A")->second->pointer();
            v_gamma_aa_tau_b = out.find("V_GAMMA_AA_TAU_B")->second->pointer();
            v_gamma_ab_tau_a = out.find("V_GAMMA_AB_TAU_A")->second->pointer();
            v_gamma_ab_tau_b = out.find("V_GAMMA_AB_TAU_B")->second->pointer();
            v_gamma_bb_tau_a = out.find("V_GAMMA_BB_TAU_A")->second->pointer();
            v_gamma_bb_tau_b = out.find("V_GAMMA_BB_TAU_B")->second->pointer();
        }
    }

    // => Loop over points <= //

    for (int Q = 0; Q < npoints; Q++) {

        // Input variables 
        double rho_a;
        double rho_b;
        double gamma_aa;
        double gamma_ab;
        double gamma_bb;
        double tau_a;
        double tau_b;

        if (true) {
            rho_a = rho_ap[Q];
            rho_b = rho_bp[Q];
        }        
        if (gga_) {
            gamma_aa = gamma_aap[Q];
            gamma_ab = gamma_abp[Q];
            gamma_bb = gamma_bbp[Q];
        }        
        if (meta_) {
            tau_a = tau_ap[Q];
            tau_b = tau_bp[Q];
        }        

        // Definitions (asymptotics to prevent numerical problems)
        if (rho_a < lsda_cutoff_ && rho_b < lsda_cutoff_) {
            continue;
        } else if (rho_a < lsda_cutoff_) {
            // v
            if (deriv >= 0) {
                double t47439 = rho_a+rho_b;
                double t47440 = 1.0/bet;
                double t47441 = 1.0/pow(t47439,1.0/3.0);
                double t47442 = c*t47441;
                double t47443 = pow(2.0,1.0/3.0);
                double t47444 = sqrt(t47442);
                double t47445 = pow(t47442,3.0/2.0);
                double t47446 = c*c;
                double t47447 = 1.0/pow(t47439,2.0/3.0);
                double t47448 = 1.0/c0p;
                double t47449 = b1p*t47444;
                double t47450 = b3p*t47445;
                double t47451 = b4p*t47446*t47447;
                double t47452 = b2p*c*t47441;
                double t47453 = t47450+t47451+t47452+t47449;
                double t47454 = 1.0/t47453;
                double t47455 = t47454*t47448*(1.0/2.0);
                double t47456 = t47455+1.0;
                double t47457 = log(t47456);
                double t47458 = a1p*c*t47441;
                double t47459 = t47458+1.0;
                double t47460 = c0p*t47457*t47459*2.0;
                double t47461 = gamma_ab*2.0;
                double t47462 = gamma_aa+gamma_bb+t47461;
                double t47463 = 1.0/(bet*bet);
                double t47464 = 1.0/(k*k);
                double t47465 = 1.0/(pi_m12*pi_m12*pi_m12*pi_m12);
                double t47466 = 1.0/pow(t47439,1.4E1/3.0);
                double t47467 = t47443*2.0;
                double t47468 = t47467-2.0;
                double t47469 = two_13*2.0;
                double t47470 = t47469-2.0;
                double t47471 = 1.0/t47470;
                double t47472 = 1.0/c0f;
                double t47473 = b1f*t47444;
                double t47474 = b3f*t47445;
                double t47475 = b4f*t47446*t47447;
                double t47476 = b2f*c*t47441;
                double t47477 = t47473+t47474+t47475+t47476;
                double t47478 = 1.0/t47477;
                double t47479 = t47472*t47478*(1.0/2.0);
                double t47480 = t47479+1.0;
                double t47481 = log(t47480);
                double t47482 = a1f*c*t47441;
                double t47483 = t47482+1.0;
                double t47494 = c0f*t47481*t47483*2.0;
                double t47484 = t47460-t47494;
                double t47495 = t47471*t47484*t47468;
                double t47485 = t47460-t47495;
                double t47486 = alph*t47463*t47485*4.0;
                double t47487 = exp(t47486);
                double t47488 = t47487-1.0;
                double t47489 = t47462*t47462;
                double t47490 = pow(2.0,2.0/3.0);
                double t47491 = 1.0/k;
                double t47492 = 1.0/(pi_m12*pi_m12);
                double t47493 = 1.0/pow(t47439,7.0/3.0);
                double t47496 = 1.0/t47488;
                v[Q] += scale * -t47439*(t47460-t47495-((bet*bet)*log((alph*t47440*(t47462*t47490*t47491*t47492*t47493*(1.0/1.6E1)+alph*t47440*t47443*t47464*t47465*t47466*t47496*t47489*(1.0/6.4E1))*2.0)/((alph*alph)*t47443*t47463*t47464*t47465*t47466*1.0/(t47488*t47488)*t47489*(1.0/3.2E1)+alph*t47440*t47462*t47490*t47491*t47492*t47493*t47496*(1.0/8.0)+1.0)+1.0)*(1.0/4.0))/alph+nu*t47462*t47490*t47491*t47492*t47493*exp(t47443*t47462*t47464*1.0/pow(t47439,8.0/3.0)*(-2.5E1/2.0))*(Cc0+Cx*(1.0E1/7.0)-(Cc1*(1.0/1.0E3)+Cc2*c*t47441*(1.0/1.0E3)+Cc3*t47446*t47447*(1.0/1.0E3))/(Cc4*c*t47441+Cc5*t47446*t47447+(Cc6*c*t47446)/t47439+1.0))*(1.0/3.2E1));
            }
            
            // v_rho_a
            if (deriv >= 1) {
                double t47498 = rho_a+rho_b;
                double t47499 = 1.0/pow(t47498,1.0/3.0);
                double t47500 = c*t47499;
                double t47501 = sqrt(t47500);
                double t47502 = b1f*t47501;
                double t47503 = pow(t47500,3.0/2.0);
                double t47504 = b3f*t47503;
                double t47505 = c*c;
                double t47506 = 1.0/pow(t47498,2.0/3.0);
                double t47507 = b4f*t47505*t47506;
                double t47508 = b2f*c*t47499;
                double t47509 = t47502+t47504+t47507+t47508;
                double t47510 = 1.0/pow(t47498,4.0/3.0);
                double t47511 = b1p*t47501;
                double t47512 = b3p*t47503;
                double t47513 = b4p*t47505*t47506;
                double t47514 = b2p*c*t47499;
                double t47515 = t47511+t47512+t47513+t47514;
                double t47516 = 1.0/pow(t47498,5.0/3.0);
                double t47517 = 1.0/sqrt(t47500);
                double t47518 = 1.0/c0f;
                double t47519 = 1.0/t47509;
                double t47520 = t47518*t47519*(1.0/2.0);
                double t47521 = t47520+1.0;
                double t47522 = 1.0/c0p;
                double t47523 = 1.0/t47515;
                double t47524 = t47522*t47523*(1.0/2.0);
                double t47525 = t47524+1.0;
                double t47526 = pow(2.0,1.0/3.0);
                double t47527 = 1.0/bet;
                double t47528 = log(t47525);
                double t47529 = a1p*c*t47499;
                double t47530 = t47529+1.0;
                double t47531 = t47526*2.0;
                double t47532 = t47531-2.0;
                double t47533 = two_13*2.0;
                double t47534 = t47533-2.0;
                double t47535 = 1.0/t47534;
                double t47536 = log(t47521);
                double t47537 = a1f*c*t47499;
                double t47538 = t47537+1.0;
                double t47539 = c0p*t47530*t47528*2.0;
                double t47540 = gamma_ab*2.0;
                double t47541 = gamma_aa+gamma_bb+t47540;
                double t47542 = 1.0/(bet*bet);
                double t47543 = 1.0/(k*k);
                double t47544 = 1.0/(pi_m12*pi_m12*pi_m12*pi_m12);
                double t47545 = 1.0/pow(t47498,1.4E1/3.0);
                double t47556 = c0f*t47536*t47538*2.0;
                double t47546 = -t47556+t47539;
                double t47547 = t47539-t47532*t47535*t47546;
                double t47548 = alph*t47542*t47547*4.0;
                double t47549 = exp(t47548);
                double t47550 = t47549-1.0;
                double t47551 = t47541*t47541;
                double t47552 = pow(2.0,2.0/3.0);
                double t47553 = 1.0/k;
                double t47554 = 1.0/(pi_m12*pi_m12);
                double t47555 = 1.0/pow(t47498,7.0/3.0);
                double t47557 = t47556-t47539;
                double t47558 = t47532*t47535*t47557;
                double t47559 = t47539+t47558;
                double t47560 = alph*t47542*t47559*4.0;
                double t47561 = exp(t47560);
                double t47562 = t47561-1.0;
                double t47563 = 1.0/t47562;
                double t47564 = alph*alph;
                double t47565 = 1.0/t47521;
                double t47566 = 1.0/(t47509*t47509);
                double t47567 = b4f*t47505*t47516*(2.0/3.0);
                double t47568 = b2f*c*t47510*(1.0/3.0);
                double t47569 = b1f*c*t47510*t47517*(1.0/6.0);
                double t47570 = b3f*c*t47501*t47510*(1.0/2.0);
                double t47571 = t47570+t47567+t47568+t47569;
                double t47572 = t47571*t47538*t47565*t47566;
                double t47573 = 1.0/t47525;
                double t47574 = 1.0/(t47515*t47515);
                double t47575 = b4p*t47505*t47516*(2.0/3.0);
                double t47576 = b2p*c*t47510*(1.0/3.0);
                double t47577 = b1p*c*t47510*t47517*(1.0/6.0);
                double t47578 = b3p*c*t47501*t47510*(1.0/2.0);
                double t47579 = t47575+t47576+t47577+t47578;
                double t47580 = a1p*c*c0p*t47510*t47528*(2.0/3.0);
                double t47583 = t47530*t47573*t47574*t47579;
                double t47592 = a1f*c*c0f*t47510*t47536*(2.0/3.0);
                double t47581 = t47580+t47572-t47583-t47592;
                double t47582 = t47532*t47535*t47581;
                double t47584 = 1.0/(t47562*t47562);
                double t47585 = alph*t47541*t47552*t47553*t47527*t47554*t47563*t47555*(1.0/8.0);
                double t47586 = t47541*t47552*t47553*t47554*t47555*(1.0/1.6E1);
                double t47587 = t47542*t47551*t47543*t47526*t47544*t47545*t47564*t47584*(1.0/3.2E1);
                double t47588 = t47585+t47587+1.0;
                double t47589 = 1.0/pow(t47498,1.7E1/3.0);
                double t47590 = 1.0/pow(t47498,1.0E1/3.0);
                double t47591 = 1.0/(bet*bet*bet);
                double t47593 = -t47580+t47582+t47583;
                double t47594 = 1.0/pow(t47498,8.0/3.0);
                double t47608 = t47541*t47543*t47526*t47594*(2.5E1/2.0);
                double t47595 = exp(-t47608);
                double t47596 = Cx*(1.0E1/7.0);
                double t47597 = Cc1*(1.0/1.0E3);
                double t47598 = Cc3*t47505*t47506*(1.0/1.0E3);
                double t47599 = Cc2*c*t47499*(1.0/1.0E3);
                double t47600 = t47597+t47598+t47599;
                double t47601 = Cc5*t47505*t47506;
                double t47602 = 1.0/t47498;
                double t47603 = Cc6*c*t47602*t47505;
                double t47604 = Cc4*c*t47499;
                double t47605 = t47601+t47603+t47604+1.0;
                double t47606 = 1.0/t47605;
                double t47614 = t47600*t47606;
                double t47607 = Cc0-t47614+t47596;
                double t47609 = 1.0/alph;
                double t47610 = bet*bet;
                double t47611 = alph*t47551*t47543*t47526*t47544*t47527*t47545*t47563*(1.0/6.4E1);
                double t47612 = t47611+t47586;
                double t47613 = 1.0/t47588;
                v_rho_a[Q] += scale * -t47539-t47558-t47498*(-t47580+t47582+t47583+(t47610*t47609*(alph*t47613*t47527*(t47541*t47552*t47553*t47554*t47590*(7.0/4.8E1)+alph*t47551*t47543*t47526*t47544*t47527*t47563*t47589*(7.0/9.6E1)+t47551*t47543*t47561*t47526*t47544*t47545*t47564*t47591*t47584*t47593*(1.0/1.6E1))*2.0-alph*t47612*t47527*1.0/(t47588*t47588)*(t47542*t47551*t47543*t47526*t47544*t47564*t47584*t47589*(7.0/4.8E1)+alph*t47541*t47552*t47553*t47527*t47554*t47563*t47590*(7.0/2.4E1)+t47541*t47552*t47561*t47553*t47554*t47555*t47564*t47591*t47584*t47593*(1.0/2.0)+alph*1.0/(bet*bet*bet*bet)*t47551*t47543*t47561*t47526*t47544*1.0/(t47562*t47562*t47562)*t47545*t47564*t47593*(1.0/4.0))*2.0)*(1.0/4.0))/((alph*t47527*(t47586+(alph*t47551*t47543*t47526*t47544*t47527*t47545*(1.0/6.4E1))/t47550)*2.0)/(t47585+1.0/(t47550*t47550)*t47542*t47551*t47543*t47526*t47544*t47545*t47564*(1.0/3.2E1)+1.0)+1.0)+1.0/(k*k*k)*nu*t47551*t47607*t47554*t47595*1.0/(t47498*t47498*t47498*t47498*t47498*t47498)*(2.5E1/1.2E1)+nu*t47541*t47552*t47553*t47554*t47555*t47595*(t47606*(Cc2*c*t47510*(1.0/3.0E3)+Cc3*t47505*t47516*(1.0/1.5E3))-t47600*1.0/(t47605*t47605)*(Cc4*c*t47510*(1.0/3.0)+Cc5*t47505*t47516*(2.0/3.0)+Cc6*c*t47505*1.0/(t47498*t47498)))*(1.0/3.2E1)-nu*t47541*t47552*t47553*t47607*t47554*t47590*t47595*(7.0/9.6E1))+t47610*t47609*log(alph*t47612*t47613*t47527*2.0+1.0)*(1.0/4.0)-nu*t47541*t47552*t47553*t47607*t47554*t47555*t47595*(1.0/3.2E1);
            }
            
            // v_rho_b
            if (deriv >= 1) {
                double t47616 = rho_a+rho_b;
                double t47617 = 1.0/pow(t47616,1.0/3.0);
                double t47618 = c*t47617;
                double t47619 = sqrt(t47618);
                double t47620 = b1f*t47619;
                double t47621 = pow(t47618,3.0/2.0);
                double t47622 = b3f*t47621;
                double t47623 = c*c;
                double t47624 = 1.0/pow(t47616,2.0/3.0);
                double t47625 = b4f*t47623*t47624;
                double t47626 = b2f*c*t47617;
                double t47627 = t47620+t47622+t47625+t47626;
                double t47628 = 1.0/pow(t47616,4.0/3.0);
                double t47629 = b1p*t47619;
                double t47630 = b3p*t47621;
                double t47631 = b4p*t47623*t47624;
                double t47632 = b2p*c*t47617;
                double t47633 = t47630+t47631+t47632+t47629;
                double t47634 = 1.0/pow(t47616,5.0/3.0);
                double t47635 = 1.0/sqrt(t47618);
                double t47636 = 1.0/c0f;
                double t47637 = 1.0/t47627;
                double t47638 = t47636*t47637*(1.0/2.0);
                double t47639 = t47638+1.0;
                double t47640 = 1.0/c0p;
                double t47641 = 1.0/t47633;
                double t47642 = t47640*t47641*(1.0/2.0);
                double t47643 = t47642+1.0;
                double t47644 = pow(2.0,1.0/3.0);
                double t47645 = 1.0/bet;
                double t47646 = log(t47643);
                double t47647 = a1p*c*t47617;
                double t47648 = t47647+1.0;
                double t47649 = t47644*2.0;
                double t47650 = t47649-2.0;
                double t47651 = two_13*2.0;
                double t47652 = t47651-2.0;
                double t47653 = 1.0/t47652;
                double t47654 = log(t47639);
                double t47655 = a1f*c*t47617;
                double t47656 = t47655+1.0;
                double t47657 = c0p*t47646*t47648*2.0;
                double t47658 = gamma_ab*2.0;
                double t47659 = gamma_aa+gamma_bb+t47658;
                double t47660 = 1.0/(bet*bet);
                double t47661 = 1.0/(k*k);
                double t47662 = 1.0/(pi_m12*pi_m12*pi_m12*pi_m12);
                double t47663 = 1.0/pow(t47616,1.4E1/3.0);
                double t47674 = c0f*t47654*t47656*2.0;
                double t47664 = -t47674+t47657;
                double t47665 = t47657-t47650*t47653*t47664;
                double t47666 = alph*t47660*t47665*4.0;
                double t47667 = exp(t47666);
                double t47668 = t47667-1.0;
                double t47669 = t47659*t47659;
                double t47670 = pow(2.0,2.0/3.0);
                double t47671 = 1.0/k;
                double t47672 = 1.0/(pi_m12*pi_m12);
                double t47673 = 1.0/pow(t47616,7.0/3.0);
                double t47675 = t47674-t47657;
                double t47676 = t47650*t47653*t47675;
                double t47677 = t47657+t47676;
                double t47678 = alph*t47660*t47677*4.0;
                double t47679 = exp(t47678);
                double t47680 = t47679-1.0;
                double t47681 = 1.0/t47680;
                double t47682 = alph*alph;
                double t47683 = 1.0/t47639;
                double t47684 = 1.0/(t47627*t47627);
                double t47685 = b4f*t47623*t47634*(2.0/3.0);
                double t47686 = b2f*c*t47628*(1.0/3.0);
                double t47687 = b1f*c*t47635*t47628*(1.0/6.0);
                double t47688 = b3f*c*t47619*t47628*(1.0/2.0);
                double t47689 = t47685+t47686+t47687+t47688;
                double t47690 = t47656*t47683*t47684*t47689;
                double t47691 = 1.0/t47643;
                double t47692 = 1.0/(t47633*t47633);
                double t47693 = b4p*t47623*t47634*(2.0/3.0);
                double t47694 = b2p*c*t47628*(1.0/3.0);
                double t47695 = b1p*c*t47635*t47628*(1.0/6.0);
                double t47696 = b3p*c*t47619*t47628*(1.0/2.0);
                double t47697 = t47693+t47694+t47695+t47696;
                double t47698 = a1p*c*c0p*t47628*t47646*(2.0/3.0);
                double t47701 = t47691*t47692*t47648*t47697;
                double t47710 = a1f*c*c0f*t47654*t47628*(2.0/3.0);
                double t47699 = -t47701-t47710+t47690+t47698;
                double t47700 = t47650*t47653*t47699;
                double t47702 = 1.0/(t47680*t47680);
                double t47703 = alph*t47670*t47671*t47645*t47672*t47681*t47673*t47659*(1.0/8.0);
                double t47704 = t47670*t47671*t47672*t47673*t47659*(1.0/1.6E1);
                double t47705 = t47702*t47660*t47661*t47644*t47662*t47663*t47682*t47669*(1.0/3.2E1);
                double t47706 = t47703+t47705+1.0;
                double t47707 = 1.0/pow(t47616,1.7E1/3.0);
                double t47708 = 1.0/pow(t47616,1.0E1/3.0);
                double t47709 = 1.0/(bet*bet*bet);
                double t47711 = t47700+t47701-t47698;
                double t47712 = 1.0/pow(t47616,8.0/3.0);
                double t47726 = t47712*t47661*t47644*t47659*(2.5E1/2.0);
                double t47713 = exp(-t47726);
                double t47714 = Cx*(1.0E1/7.0);
                double t47715 = Cc1*(1.0/1.0E3);
                double t47716 = Cc3*t47623*t47624*(1.0/1.0E3);
                double t47717 = Cc2*c*t47617*(1.0/1.0E3);
                double t47718 = t47715+t47716+t47717;
                double t47719 = Cc5*t47623*t47624;
                double t47720 = 1.0/t47616;
                double t47721 = Cc6*c*t47720*t47623;
                double t47722 = Cc4*c*t47617;
                double t47723 = t47721+t47722+t47719+1.0;
                double t47724 = 1.0/t47723;
                double t47732 = t47724*t47718;
                double t47725 = Cc0+t47714-t47732;
                double t47727 = 1.0/alph;
                double t47728 = bet*bet;
                double t47729 = alph*t47661*t47644*t47662*t47645*t47663*t47681*t47669*(1.0/6.4E1);
                double t47730 = t47704+t47729;
                double t47731 = 1.0/t47706;
                v_rho_b[Q] += scale * -t47657-t47676-t47616*(t47700+t47701-t47698+(t47727*t47728*(alph*t47731*t47645*(t47670*t47671*t47672*t47708*t47659*(7.0/4.8E1)+alph*t47661*t47644*t47662*t47707*t47645*t47681*t47669*(7.0/9.6E1)+t47702*t47711*t47661*t47644*t47662*t47663*t47682*t47709*t47669*t47679*(1.0/1.6E1))*2.0-alph*t47730*1.0/(t47706*t47706)*t47645*(t47702*t47660*t47661*t47644*t47662*t47707*t47682*t47669*(7.0/4.8E1)+alph*t47670*t47671*t47645*t47672*t47681*t47708*t47659*(7.0/2.4E1)+t47702*t47711*t47670*t47671*t47672*t47673*t47682*t47709*t47659*t47679*(1.0/2.0)+alph*1.0/(bet*bet*bet*bet)*t47711*t47661*t47644*t47662*1.0/(t47680*t47680*t47680)*t47663*t47682*t47669*t47679*(1.0/4.0))*2.0)*(1.0/4.0))/((alph*t47645*(t47704+(alph*t47661*t47644*t47662*t47645*t47663*t47669*(1.0/6.4E1))/t47668)*2.0)/(t47703+t47660*t47661*t47644*t47662*t47663*t47682*1.0/(t47668*t47668)*t47669*(1.0/3.2E1)+1.0)+1.0)+1.0/(k*k*k)*nu*t47713*1.0/(t47616*t47616*t47616*t47616*t47616*t47616)*t47725*t47672*t47669*(2.5E1/1.2E1)+nu*t47713*t47670*t47671*t47672*t47673*t47659*(t47724*(Cc2*c*t47628*(1.0/3.0E3)+Cc3*t47623*t47634*(1.0/1.5E3))-1.0/(t47723*t47723)*t47718*(Cc4*c*t47628*(1.0/3.0)+Cc5*t47623*t47634*(2.0/3.0)+Cc6*c*t47623*1.0/(t47616*t47616)))*(1.0/3.2E1)-nu*t47713*t47670*t47671*t47725*t47672*t47708*t47659*(7.0/9.6E1))+t47727*t47728*log(alph*t47730*t47731*t47645*2.0+1.0)*(1.0/4.0)-nu*t47713*t47670*t47671*t47725*t47672*t47673*t47659*(1.0/3.2E1);
            }
            
            // v_gamma_aa
            if (deriv >= 1) {
                double t47734 = rho_a+rho_b;
                double t47735 = 1.0/bet;
                double t47736 = 1.0/pow(t47734,1.0/3.0);
                double t47737 = c*t47736;
                double t47738 = pow(2.0,1.0/3.0);
                double t47739 = sqrt(t47737);
                double t47740 = pow(t47737,3.0/2.0);
                double t47741 = c*c;
                double t47742 = 1.0/pow(t47734,2.0/3.0);
                double t47743 = 1.0/c0p;
                double t47744 = b1p*t47739;
                double t47745 = b3p*t47740;
                double t47746 = b4p*t47741*t47742;
                double t47747 = b2p*c*t47736;
                double t47748 = t47744+t47745+t47746+t47747;
                double t47749 = 1.0/t47748;
                double t47750 = t47743*t47749*(1.0/2.0);
                double t47751 = t47750+1.0;
                double t47752 = log(t47751);
                double t47753 = a1p*c*t47736;
                double t47754 = t47753+1.0;
                double t47755 = c0p*t47752*t47754*2.0;
                double t47756 = 1.0/(bet*bet);
                double t47757 = 1.0/(k*k);
                double t47758 = 1.0/(pi_m12*pi_m12*pi_m12*pi_m12);
                double t47759 = 1.0/pow(t47734,1.4E1/3.0);
                double t47760 = t47738*2.0;
                double t47761 = t47760-2.0;
                double t47762 = two_13*2.0;
                double t47763 = t47762-2.0;
                double t47764 = 1.0/t47763;
                double t47765 = 1.0/c0f;
                double t47766 = b1f*t47739;
                double t47767 = b3f*t47740;
                double t47768 = b4f*t47741*t47742;
                double t47769 = b2f*c*t47736;
                double t47770 = t47766+t47767+t47768+t47769;
                double t47771 = 1.0/t47770;
                double t47772 = t47771*t47765*(1.0/2.0);
                double t47773 = t47772+1.0;
                double t47774 = log(t47773);
                double t47775 = a1f*c*t47736;
                double t47776 = t47775+1.0;
                double t47787 = c0f*t47774*t47776*2.0;
                double t47777 = t47755-t47787;
                double t47788 = t47761*t47764*t47777;
                double t47778 = t47755-t47788;
                double t47779 = alph*t47756*t47778*4.0;
                double t47780 = exp(t47779);
                double t47781 = t47780-1.0;
                double t47790 = gamma_ab*2.0;
                double t47782 = gamma_aa+gamma_bb+t47790;
                double t47783 = pow(2.0,2.0/3.0);
                double t47784 = 1.0/k;
                double t47785 = 1.0/(pi_m12*pi_m12);
                double t47786 = 1.0/pow(t47734,7.0/3.0);
                double t47789 = 1.0/t47781;
                double t47791 = alph*alph;
                double t47792 = 1.0/(t47781*t47781);
                double t47793 = gamma_aa*2.0;
                double t47794 = gamma_ab*4.0;
                double t47795 = gamma_bb*2.0;
                double t47796 = t47793+t47794+t47795;
                double t47797 = t47782*t47782;
                double t47798 = t47791*t47738*t47756*t47792*t47757*t47758*t47759*t47797*(1.0/3.2E1);
                double t47799 = alph*t47735*t47782*t47783*t47784*t47785*t47786*t47789*(1.0/8.0);
                double t47800 = t47798+t47799+1.0;
                double t47801 = t47782*t47783*t47784*t47785*t47786*(1.0/1.6E1);
                double t47802 = alph*t47735*t47738*t47757*t47758*t47759*t47797*t47789*(1.0/6.4E1);
                double t47803 = t47801+t47802;
                double t47804 = 1.0/t47800;
                double t47805 = 1.0/pow(t47734,8.0/3.0);
                double t47806 = exp(t47805*t47782*t47738*t47757*(-2.5E1/2.0));
                double t47807 = Cx*(1.0E1/7.0);
                double t47808 = Cc1*(1.0/1.0E3);
                double t47809 = Cc3*t47741*t47742*(1.0/1.0E3);
                double t47810 = Cc2*c*t47736*(1.0/1.0E3);
                double t47811 = t47810+t47808+t47809;
                double t47812 = Cc5*t47741*t47742;
                double t47813 = 1.0/t47734;
                double t47814 = Cc6*c*t47741*t47813;
                double t47815 = Cc4*c*t47736;
                double t47816 = t47812+t47814+t47815+1.0;
                double t47817 = 1.0/t47816;
                double t47818 = Cc0+t47807-t47811*t47817;
                v_gamma_aa[Q] += scale * t47734*(((bet*bet)*(alph*t47804*t47735*(t47783*t47784*t47785*t47786*(1.0/1.6E1)+alph*t47735*t47738*t47757*t47758*t47759*t47796*t47789*(1.0/6.4E1))*2.0-alph*1.0/(t47800*t47800)*t47803*t47735*(alph*t47735*t47783*t47784*t47785*t47786*t47789*(1.0/8.0)+t47791*t47738*t47756*t47792*t47757*t47758*t47759*t47796*(1.0/3.2E1))*2.0)*(1.0/4.0))/(alph*(alph*t47803*t47804*t47735*2.0+1.0))+1.0/(k*k*k)*nu*1.0/(t47734*t47734*t47734*t47734*t47734)*t47806*t47782*t47818*t47785*(2.5E1/3.2E1)-nu*t47806*t47818*t47783*t47784*t47785*t47786*(1.0/3.2E1));
            }
            
            // v_gamma_ab
            if (deriv >= 1) {
                double t47820 = rho_a+rho_b;
                double t47821 = 1.0/bet;
                double t47822 = 1.0/pow(t47820,1.0/3.0);
                double t47823 = c*t47822;
                double t47824 = pow(2.0,1.0/3.0);
                double t47825 = sqrt(t47823);
                double t47826 = pow(t47823,3.0/2.0);
                double t47827 = c*c;
                double t47828 = 1.0/pow(t47820,2.0/3.0);
                double t47829 = 1.0/c0p;
                double t47830 = b1p*t47825;
                double t47831 = b3p*t47826;
                double t47832 = b4p*t47827*t47828;
                double t47833 = b2p*c*t47822;
                double t47834 = t47830+t47831+t47832+t47833;
                double t47835 = 1.0/t47834;
                double t47836 = t47835*t47829*(1.0/2.0);
                double t47837 = t47836+1.0;
                double t47838 = log(t47837);
                double t47839 = a1p*c*t47822;
                double t47840 = t47839+1.0;
                double t47841 = c0p*t47840*t47838*2.0;
                double t47842 = 1.0/(bet*bet);
                double t47843 = 1.0/(k*k);
                double t47844 = 1.0/(pi_m12*pi_m12*pi_m12*pi_m12);
                double t47845 = 1.0/pow(t47820,1.4E1/3.0);
                double t47846 = t47824*2.0;
                double t47847 = t47846-2.0;
                double t47848 = two_13*2.0;
                double t47849 = t47848-2.0;
                double t47850 = 1.0/t47849;
                double t47851 = 1.0/c0f;
                double t47852 = b1f*t47825;
                double t47853 = b3f*t47826;
                double t47854 = b4f*t47827*t47828;
                double t47855 = b2f*c*t47822;
                double t47856 = t47852+t47853+t47854+t47855;
                double t47857 = 1.0/t47856;
                double t47858 = t47851*t47857*(1.0/2.0);
                double t47859 = t47858+1.0;
                double t47860 = log(t47859);
                double t47861 = a1f*c*t47822;
                double t47862 = t47861+1.0;
                double t47873 = c0f*t47860*t47862*2.0;
                double t47863 = t47841-t47873;
                double t47874 = t47850*t47863*t47847;
                double t47864 = t47841-t47874;
                double t47865 = alph*t47842*t47864*4.0;
                double t47866 = exp(t47865);
                double t47867 = t47866-1.0;
                double t47876 = gamma_ab*2.0;
                double t47868 = gamma_aa+gamma_bb+t47876;
                double t47869 = pow(2.0,2.0/3.0);
                double t47870 = 1.0/k;
                double t47871 = 1.0/(pi_m12*pi_m12);
                double t47872 = 1.0/pow(t47820,7.0/3.0);
                double t47875 = 1.0/t47867;
                double t47877 = alph*alph;
                double t47878 = 1.0/(t47867*t47867);
                double t47879 = gamma_aa*4.0;
                double t47880 = gamma_ab*8.0;
                double t47881 = gamma_bb*4.0;
                double t47882 = t47880+t47881+t47879;
                double t47883 = t47868*t47868;
                double t47884 = t47824*t47842*t47843*t47844*t47845*t47883*t47877*t47878*(1.0/3.2E1);
                double t47885 = alph*t47821*t47870*t47871*t47872*t47875*t47868*t47869*(1.0/8.0);
                double t47886 = t47884+t47885+1.0;
                double t47887 = t47870*t47871*t47872*t47868*t47869*(1.0/1.6E1);
                double t47888 = alph*t47821*t47824*t47843*t47844*t47845*t47883*t47875*(1.0/6.4E1);
                double t47889 = t47887+t47888;
                double t47890 = 1.0/t47886;
                double t47891 = 1.0/pow(t47820,8.0/3.0);
                double t47892 = exp(t47824*t47843*t47891*t47868*(-2.5E1/2.0));
                double t47893 = Cx*(1.0E1/7.0);
                double t47894 = Cc1*(1.0/1.0E3);
                double t47895 = Cc3*t47827*t47828*(1.0/1.0E3);
                double t47896 = Cc2*c*t47822*(1.0/1.0E3);
                double t47897 = t47894+t47895+t47896;
                double t47898 = Cc5*t47827*t47828;
                double t47899 = 1.0/t47820;
                double t47900 = Cc6*c*t47827*t47899;
                double t47901 = Cc4*c*t47822;
                double t47902 = t47900+t47901+t47898+1.0;
                double t47903 = 1.0/t47902;
                double t47904 = Cc0+t47893-t47903*t47897;
                v_gamma_ab[Q] += scale * t47820*(((bet*bet)*(alph*t47821*t47890*(t47870*t47871*t47872*t47869*(1.0/8.0)+alph*t47821*t47824*t47843*t47844*t47845*t47882*t47875*(1.0/6.4E1))*2.0-alph*t47821*1.0/(t47886*t47886)*t47889*(alph*t47821*t47870*t47871*t47872*t47875*t47869*(1.0/4.0)+t47824*t47842*t47843*t47844*t47845*t47882*t47877*t47878*(1.0/3.2E1))*2.0)*(1.0/4.0))/(alph*(alph*t47821*t47890*t47889*2.0+1.0))+1.0/(k*k*k)*nu*1.0/(t47820*t47820*t47820*t47820*t47820)*t47904*t47871*t47892*t47868*(2.5E1/1.6E1)-nu*t47904*t47870*t47871*t47872*t47892*t47869*(1.0/1.6E1));
            }
            
            // v_gamma_bb
            if (deriv >= 1) {
                double t47906 = rho_a+rho_b;
                double t47907 = 1.0/bet;
                double t47908 = 1.0/pow(t47906,1.0/3.0);
                double t47909 = c*t47908;
                double t47910 = pow(2.0,1.0/3.0);
                double t47911 = sqrt(t47909);
                double t47912 = pow(t47909,3.0/2.0);
                double t47913 = c*c;
                double t47914 = 1.0/pow(t47906,2.0/3.0);
                double t47915 = 1.0/c0p;
                double t47916 = b1p*t47911;
                double t47917 = b3p*t47912;
                double t47918 = b4p*t47913*t47914;
                double t47919 = b2p*c*t47908;
                double t47920 = t47916+t47917+t47918+t47919;
                double t47921 = 1.0/t47920;
                double t47922 = t47921*t47915*(1.0/2.0);
                double t47923 = t47922+1.0;
                double t47924 = log(t47923);
                double t47925 = a1p*c*t47908;
                double t47926 = t47925+1.0;
                double t47927 = c0p*t47924*t47926*2.0;
                double t47928 = 1.0/(bet*bet);
                double t47929 = 1.0/(k*k);
                double t47930 = 1.0/(pi_m12*pi_m12*pi_m12*pi_m12);
                double t47931 = 1.0/pow(t47906,1.4E1/3.0);
                double t47932 = t47910*2.0;
                double t47933 = t47932-2.0;
                double t47934 = two_13*2.0;
                double t47935 = t47934-2.0;
                double t47936 = 1.0/t47935;
                double t47937 = 1.0/c0f;
                double t47938 = b1f*t47911;
                double t47939 = b3f*t47912;
                double t47940 = b4f*t47913*t47914;
                double t47941 = b2f*c*t47908;
                double t47942 = t47940+t47941+t47938+t47939;
                double t47943 = 1.0/t47942;
                double t47944 = t47943*t47937*(1.0/2.0);
                double t47945 = t47944+1.0;
                double t47946 = log(t47945);
                double t47947 = a1f*c*t47908;
                double t47948 = t47947+1.0;
                double t47959 = c0f*t47946*t47948*2.0;
                double t47949 = t47927-t47959;
                double t47960 = t47933*t47936*t47949;
                double t47950 = -t47960+t47927;
                double t47951 = alph*t47950*t47928*4.0;
                double t47952 = exp(t47951);
                double t47953 = t47952-1.0;
                double t47962 = gamma_ab*2.0;
                double t47954 = gamma_aa+gamma_bb+t47962;
                double t47955 = pow(2.0,2.0/3.0);
                double t47956 = 1.0/k;
                double t47957 = 1.0/(pi_m12*pi_m12);
                double t47958 = 1.0/pow(t47906,7.0/3.0);
                double t47961 = 1.0/t47953;
                double t47963 = alph*alph;
                double t47964 = 1.0/(t47953*t47953);
                double t47965 = gamma_aa*2.0;
                double t47966 = gamma_ab*4.0;
                double t47967 = gamma_bb*2.0;
                double t47968 = t47965+t47966+t47967;
                double t47969 = t47954*t47954;
                double t47970 = t47910*t47930*t47931*t47963*t47928*t47964*t47929*t47969*(1.0/3.2E1);
                double t47971 = alph*t47907*t47961*t47954*t47955*t47956*t47957*t47958*(1.0/8.0);
                double t47972 = t47970+t47971+1.0;
                double t47973 = t47954*t47955*t47956*t47957*t47958*(1.0/1.6E1);
                double t47974 = alph*t47910*t47930*t47931*t47907*t47961*t47929*t47969*(1.0/6.4E1);
                double t47975 = t47973+t47974;
                double t47976 = 1.0/t47972;
                double t47977 = 1.0/pow(t47906,8.0/3.0);
                double t47978 = exp(t47910*t47954*t47929*t47977*(-2.5E1/2.0));
                double t47979 = Cx*(1.0E1/7.0);
                double t47980 = Cc1*(1.0/1.0E3);
                double t47981 = Cc3*t47913*t47914*(1.0/1.0E3);
                double t47982 = Cc2*c*t47908*(1.0/1.0E3);
                double t47983 = t47980+t47981+t47982;
                double t47984 = Cc5*t47913*t47914;
                double t47985 = 1.0/t47906;
                double t47986 = Cc6*c*t47913*t47985;
                double t47987 = Cc4*c*t47908;
                double t47988 = t47984+t47986+t47987+1.0;
                double t47989 = 1.0/t47988;
                double t47990 = Cc0+t47979-t47983*t47989;
                v_gamma_bb[Q] += scale * t47906*(((bet*bet)*(alph*t47907*t47976*(t47955*t47956*t47957*t47958*(1.0/1.6E1)+alph*t47910*t47930*t47931*t47907*t47961*t47929*t47968*(1.0/6.4E1))*2.0-alph*t47907*1.0/(t47972*t47972)*t47975*(alph*t47907*t47961*t47955*t47956*t47957*t47958*(1.0/8.0)+t47910*t47930*t47931*t47963*t47928*t47964*t47929*t47968*(1.0/3.2E1))*2.0)*(1.0/4.0))/(alph*(alph*t47907*t47975*t47976*2.0+1.0))+1.0/(k*k*k)*nu*1.0/(t47906*t47906*t47906*t47906*t47906)*t47954*t47990*t47957*t47978*(2.5E1/3.2E1)-nu*t47990*t47955*t47956*t47957*t47958*t47978*(1.0/3.2E1));
            }
            
        } else if (rho_b < lsda_cutoff_) {
            // v
            if (deriv >= 0) {
                double t47994 = rho_a+rho_b;
                double t47995 = 1.0/bet;
                double t47996 = 1.0/pow(t47994,1.0/3.0);
                double t47997 = c*t47996;
                double t47998 = pow(2.0,1.0/3.0);
                double t47999 = sqrt(t47997);
                double t48000 = pow(t47997,3.0/2.0);
                double t48001 = c*c;
                double t48002 = 1.0/pow(t47994,2.0/3.0);
                double t48003 = 1.0/c0p;
                double t48004 = b1p*t47999;
                double t48005 = b3p*t48000;
                double t48006 = b4p*t48001*t48002;
                double t48007 = b2p*c*t47996;
                double t48008 = t48004+t48005+t48006+t48007;
                double t48009 = 1.0/t48008;
                double t48010 = t48003*t48009*(1.0/2.0);
                double t48011 = t48010+1.0;
                double t48012 = log(t48011);
                double t48013 = a1p*c*t47996;
                double t48014 = t48013+1.0;
                double t48015 = c0p*t48012*t48014*2.0;
                double t48016 = gamma_ab*2.0;
                double t48017 = gamma_aa+gamma_bb+t48016;
                double t48018 = 1.0/(bet*bet);
                double t48019 = 1.0/(k*k);
                double t48020 = 1.0/(pi_m12*pi_m12*pi_m12*pi_m12);
                double t48021 = 1.0/pow(t47994,1.4E1/3.0);
                double t48022 = t47998*2.0;
                double t48023 = t48022-2.0;
                double t48024 = two_13*2.0;
                double t48025 = t48024-2.0;
                double t48026 = 1.0/t48025;
                double t48027 = 1.0/c0f;
                double t48028 = b1f*t47999;
                double t48029 = b3f*t48000;
                double t48030 = b4f*t48001*t48002;
                double t48031 = b2f*c*t47996;
                double t48032 = t48030+t48031+t48028+t48029;
                double t48033 = 1.0/t48032;
                double t48034 = t48033*t48027*(1.0/2.0);
                double t48035 = t48034+1.0;
                double t48036 = log(t48035);
                double t48037 = a1f*c*t47996;
                double t48038 = t48037+1.0;
                double t48049 = c0f*t48036*t48038*2.0;
                double t48039 = t48015-t48049;
                double t48050 = t48023*t48026*t48039;
                double t48040 = -t48050+t48015;
                double t48041 = alph*t48040*t48018*4.0;
                double t48042 = exp(t48041);
                double t48043 = t48042-1.0;
                double t48044 = t48017*t48017;
                double t48045 = pow(2.0,2.0/3.0);
                double t48046 = 1.0/k;
                double t48047 = 1.0/(pi_m12*pi_m12);
                double t48048 = 1.0/pow(t47994,7.0/3.0);
                double t48051 = 1.0/t48043;
                v[Q] += scale * t47994*(t48050-t48015+((bet*bet)*log((alph*t47995*(t48017*t48045*t48046*t48047*t48048*(1.0/1.6E1)+alph*t47995*t47998*t48020*t48021*t48051*t48044*t48019*(1.0/6.4E1))*2.0)/((alph*alph)*t47998*t48020*t48021*1.0/(t48043*t48043)*t48044*t48018*t48019*(1.0/3.2E1)+alph*t47995*t48051*t48017*t48045*t48046*t48047*t48048*(1.0/8.0)+1.0)+1.0)*(1.0/4.0))/alph-nu*t48017*t48045*t48046*t48047*t48048*exp(1.0/pow(t47994,8.0/3.0)*t47998*t48017*t48019*(-2.5E1/2.0))*(Cc0+Cx*(1.0E1/7.0)-(Cc1*(1.0/1.0E3)+Cc2*c*t47996*(1.0/1.0E3)+Cc3*t48001*t48002*(1.0/1.0E3))/(Cc4*c*t47996+Cc5*t48001*t48002+(Cc6*c*t48001)/t47994+1.0))*(1.0/3.2E1));
            }
            
            // v_rho_a
            if (deriv >= 1) {
                double t48053 = rho_a+rho_b;
                double t48054 = 1.0/pow(t48053,1.0/3.0);
                double t48055 = c*t48054;
                double t48056 = sqrt(t48055);
                double t48057 = b1f*t48056;
                double t48058 = pow(t48055,3.0/2.0);
                double t48059 = b3f*t48058;
                double t48060 = c*c;
                double t48061 = 1.0/pow(t48053,2.0/3.0);
                double t48062 = b4f*t48060*t48061;
                double t48063 = b2f*c*t48054;
                double t48064 = t48062+t48063+t48057+t48059;
                double t48065 = 1.0/pow(t48053,4.0/3.0);
                double t48066 = b1p*t48056;
                double t48067 = b3p*t48058;
                double t48068 = b4p*t48060*t48061;
                double t48069 = b2p*c*t48054;
                double t48070 = t48066+t48067+t48068+t48069;
                double t48071 = 1.0/pow(t48053,5.0/3.0);
                double t48072 = 1.0/sqrt(t48055);
                double t48073 = 1.0/c0f;
                double t48074 = 1.0/t48064;
                double t48075 = t48073*t48074*(1.0/2.0);
                double t48076 = t48075+1.0;
                double t48077 = 1.0/c0p;
                double t48078 = 1.0/t48070;
                double t48079 = t48077*t48078*(1.0/2.0);
                double t48080 = t48079+1.0;
                double t48081 = pow(2.0,1.0/3.0);
                double t48082 = 1.0/bet;
                double t48083 = log(t48080);
                double t48084 = a1p*c*t48054;
                double t48085 = t48084+1.0;
                double t48086 = t48081*2.0;
                double t48087 = t48086-2.0;
                double t48088 = two_13*2.0;
                double t48089 = t48088-2.0;
                double t48090 = 1.0/t48089;
                double t48091 = log(t48076);
                double t48092 = a1f*c*t48054;
                double t48093 = t48092+1.0;
                double t48094 = c0p*t48083*t48085*2.0;
                double t48095 = gamma_ab*2.0;
                double t48096 = gamma_aa+gamma_bb+t48095;
                double t48097 = 1.0/(bet*bet);
                double t48098 = 1.0/(k*k);
                double t48099 = 1.0/(pi_m12*pi_m12*pi_m12*pi_m12);
                double t48100 = 1.0/pow(t48053,1.4E1/3.0);
                double t48111 = c0f*t48091*t48093*2.0;
                double t48101 = -t48111+t48094;
                double t48102 = t48094-t48101*t48090*t48087;
                double t48103 = alph*t48102*t48097*4.0;
                double t48104 = exp(t48103);
                double t48105 = t48104-1.0;
                double t48106 = t48096*t48096;
                double t48107 = pow(2.0,2.0/3.0);
                double t48108 = 1.0/k;
                double t48109 = 1.0/(pi_m12*pi_m12);
                double t48110 = 1.0/pow(t48053,7.0/3.0);
                double t48112 = t48111-t48094;
                double t48113 = t48112*t48090*t48087;
                double t48114 = t48113+t48094;
                double t48115 = alph*t48114*t48097*4.0;
                double t48116 = exp(t48115);
                double t48117 = t48116-1.0;
                double t48118 = 1.0/t48117;
                double t48119 = alph*alph;
                double t48120 = 1.0/t48076;
                double t48121 = 1.0/(t48064*t48064);
                double t48122 = b4f*t48060*t48071*(2.0/3.0);
                double t48123 = b2f*c*t48065*(1.0/3.0);
                double t48124 = b1f*c*t48072*t48065*(1.0/6.0);
                double t48125 = b3f*c*t48056*t48065*(1.0/2.0);
                double t48126 = t48122+t48123+t48124+t48125;
                double t48127 = t48120*t48121*t48126*t48093;
                double t48128 = 1.0/t48080;
                double t48129 = 1.0/(t48070*t48070);
                double t48130 = b4p*t48060*t48071*(2.0/3.0);
                double t48131 = b2p*c*t48065*(1.0/3.0);
                double t48132 = b1p*c*t48072*t48065*(1.0/6.0);
                double t48133 = b3p*c*t48056*t48065*(1.0/2.0);
                double t48134 = t48130+t48131+t48132+t48133;
                double t48135 = a1p*c*c0p*t48065*t48083*(2.0/3.0);
                double t48138 = t48134*t48128*t48129*t48085;
                double t48147 = a1f*c*c0f*t48091*t48065*(2.0/3.0);
                double t48136 = t48135+t48127-t48138-t48147;
                double t48137 = t48090*t48136*t48087;
                double t48139 = 1.0/(t48117*t48117);
                double t48140 = alph*t48110*t48107*t48108*t48082*t48109*t48118*t48096*(1.0/8.0);
                double t48141 = t48110*t48107*t48108*t48109*t48096*(1.0/1.6E1);
                double t48142 = t48100*t48106*t48081*t48119*t48139*t48097*t48098*t48099*(1.0/3.2E1);
                double t48143 = t48140+t48142+1.0;
                double t48144 = 1.0/pow(t48053,1.7E1/3.0);
                double t48145 = 1.0/pow(t48053,1.0E1/3.0);
                double t48146 = 1.0/(bet*bet*bet);
                double t48148 = -t48135+t48137+t48138;
                double t48149 = 1.0/pow(t48053,8.0/3.0);
                double t48163 = t48081*t48149*t48096*t48098*(2.5E1/2.0);
                double t48150 = exp(-t48163);
                double t48151 = Cx*(1.0E1/7.0);
                double t48152 = Cc1*(1.0/1.0E3);
                double t48153 = Cc3*t48060*t48061*(1.0/1.0E3);
                double t48154 = Cc2*c*t48054*(1.0/1.0E3);
                double t48155 = t48152+t48153+t48154;
                double t48156 = Cc5*t48060*t48061;
                double t48157 = 1.0/t48053;
                double t48158 = Cc6*c*t48060*t48157;
                double t48159 = Cc4*c*t48054;
                double t48160 = t48156+t48158+t48159+1.0;
                double t48161 = 1.0/t48160;
                double t48169 = t48161*t48155;
                double t48162 = Cc0+t48151-t48169;
                double t48164 = 1.0/alph;
                double t48165 = bet*bet;
                double t48166 = alph*t48100*t48106*t48081*t48082*t48118*t48098*t48099*(1.0/6.4E1);
                double t48167 = t48141+t48166;
                double t48168 = 1.0/t48143;
                v_rho_a[Q] += scale * -t48113-t48094-t48053*(-t48135+t48137+t48138+(t48164*t48165*(alph*t48082*t48168*(t48107*t48108*t48109*t48145*t48096*(7.0/4.8E1)+alph*t48106*t48081*t48144*t48082*t48118*t48098*t48099*(7.0/9.6E1)+t48100*t48106*t48116*t48081*t48119*t48146*t48139*t48148*t48098*t48099*(1.0/1.6E1))*2.0-alph*1.0/(t48143*t48143)*t48082*t48167*(t48106*t48081*t48144*t48119*t48139*t48097*t48098*t48099*(7.0/4.8E1)+alph*t48107*t48108*t48082*t48109*t48118*t48145*t48096*(7.0/2.4E1)+t48110*t48107*t48116*t48108*t48109*t48119*t48146*t48139*t48148*t48096*(1.0/2.0)+alph*1.0/(bet*bet*bet*bet)*t48100*t48106*t48116*t48081*1.0/(t48117*t48117*t48117)*t48119*t48148*t48098*t48099*(1.0/4.0))*2.0)*(1.0/4.0))/((alph*t48082*(t48141+(alph*t48100*t48106*t48081*t48082*t48098*t48099*(1.0/6.4E1))/t48105)*2.0)/(t48140+t48100*1.0/(t48105*t48105)*t48106*t48081*t48119*t48097*t48098*t48099*(1.0/3.2E1)+1.0)+1.0)+1.0/(k*k*k)*nu*t48150*t48106*1.0/(t48053*t48053*t48053*t48053*t48053*t48053)*t48162*t48109*(2.5E1/1.2E1)+nu*t48110*t48150*t48107*t48108*t48109*t48096*(t48161*(Cc2*c*t48065*(1.0/3.0E3)+Cc3*t48060*t48071*(1.0/1.5E3))-1.0/(t48160*t48160)*t48155*(Cc4*c*t48065*(1.0/3.0)+Cc5*t48060*t48071*(2.0/3.0)+Cc6*c*t48060*1.0/(t48053*t48053)))*(1.0/3.2E1)-nu*t48150*t48107*t48108*t48162*t48109*t48145*t48096*(7.0/9.6E1))+t48164*t48165*log(alph*t48082*t48167*t48168*2.0+1.0)*(1.0/4.0)-nu*t48110*t48150*t48107*t48108*t48162*t48109*t48096*(1.0/3.2E1);
            }
            
            // v_rho_b
            if (deriv >= 1) {
                double t48171 = rho_a+rho_b;
                double t48172 = 1.0/pow(t48171,1.0/3.0);
                double t48173 = c*t48172;
                double t48174 = sqrt(t48173);
                double t48175 = b1f*t48174;
                double t48176 = pow(t48173,3.0/2.0);
                double t48177 = b3f*t48176;
                double t48178 = c*c;
                double t48179 = 1.0/pow(t48171,2.0/3.0);
                double t48180 = b4f*t48178*t48179;
                double t48181 = b2f*c*t48172;
                double t48182 = t48180+t48181+t48175+t48177;
                double t48183 = 1.0/pow(t48171,4.0/3.0);
                double t48184 = b1p*t48174;
                double t48185 = b3p*t48176;
                double t48186 = b4p*t48178*t48179;
                double t48187 = b2p*c*t48172;
                double t48188 = t48184+t48185+t48186+t48187;
                double t48189 = 1.0/pow(t48171,5.0/3.0);
                double t48190 = 1.0/sqrt(t48173);
                double t48191 = 1.0/c0f;
                double t48192 = 1.0/t48182;
                double t48193 = t48191*t48192*(1.0/2.0);
                double t48194 = t48193+1.0;
                double t48195 = 1.0/c0p;
                double t48196 = 1.0/t48188;
                double t48197 = t48195*t48196*(1.0/2.0);
                double t48198 = t48197+1.0;
                double t48199 = pow(2.0,1.0/3.0);
                double t48200 = 1.0/bet;
                double t48201 = log(t48198);
                double t48202 = a1p*c*t48172;
                double t48203 = t48202+1.0;
                double t48204 = t48199*2.0;
                double t48205 = t48204-2.0;
                double t48206 = two_13*2.0;
                double t48207 = t48206-2.0;
                double t48208 = 1.0/t48207;
                double t48209 = log(t48194);
                double t48210 = a1f*c*t48172;
                double t48211 = t48210+1.0;
                double t48212 = c0p*t48201*t48203*2.0;
                double t48213 = gamma_ab*2.0;
                double t48214 = gamma_aa+gamma_bb+t48213;
                double t48215 = 1.0/(bet*bet);
                double t48216 = 1.0/(k*k);
                double t48217 = 1.0/(pi_m12*pi_m12*pi_m12*pi_m12);
                double t48218 = 1.0/pow(t48171,1.4E1/3.0);
                double t48229 = c0f*t48211*t48209*2.0;
                double t48219 = t48212-t48229;
                double t48230 = t48205*t48208*t48219;
                double t48220 = t48212-t48230;
                double t48221 = alph*t48220*t48215*4.0;
                double t48222 = exp(t48221);
                double t48223 = t48222-1.0;
                double t48224 = t48214*t48214;
                double t48225 = pow(2.0,2.0/3.0);
                double t48226 = 1.0/k;
                double t48227 = 1.0/(pi_m12*pi_m12);
                double t48228 = 1.0/pow(t48171,7.0/3.0);
                double t48231 = 1.0/t48223;
                double t48232 = alph*alph;
                double t48233 = 1.0/(t48223*t48223);
                double t48234 = 1.0/t48194;
                double t48235 = 1.0/(t48182*t48182);
                double t48236 = b4f*t48178*t48189*(2.0/3.0);
                double t48237 = b2f*c*t48183*(1.0/3.0);
                double t48238 = b1f*c*t48190*t48183*(1.0/6.0);
                double t48239 = b3f*c*t48174*t48183*(1.0/2.0);
                double t48240 = t48236+t48237+t48238+t48239;
                double t48241 = t48211*t48240*t48234*t48235;
                double t48242 = 1.0/t48198;
                double t48243 = 1.0/(t48188*t48188);
                double t48244 = b4p*t48178*t48189*(2.0/3.0);
                double t48245 = b2p*c*t48183*(1.0/3.0);
                double t48246 = b1p*c*t48190*t48183*(1.0/6.0);
                double t48247 = b3p*c*t48174*t48183*(1.0/2.0);
                double t48248 = t48244+t48245+t48246+t48247;
                double t48249 = a1p*c*c0p*t48201*t48183*(2.0/3.0);
                double t48252 = t48203*t48242*t48243*t48248;
                double t48263 = a1f*c*c0f*t48209*t48183*(2.0/3.0);
                double t48250 = t48241-t48252-t48263+t48249;
                double t48251 = t48205*t48250*t48208;
                double t48253 = t48232*t48215*t48224*t48233*t48216*t48217*t48218*t48199*(1.0/3.2E1);
                double t48254 = alph*t48200*t48231*t48214*t48225*t48226*t48227*t48228*(1.0/8.0);
                double t48255 = t48253+t48254+1.0;
                double t48256 = 1.0/t48255;
                double t48257 = t48214*t48225*t48226*t48227*t48228*(1.0/1.6E1);
                double t48258 = alph*t48200*t48231*t48224*t48216*t48217*t48218*t48199*(1.0/6.4E1);
                double t48259 = t48257+t48258;
                double t48260 = 1.0/pow(t48171,1.7E1/3.0);
                double t48261 = 1.0/pow(t48171,1.0E1/3.0);
                double t48262 = 1.0/(bet*bet*bet);
                double t48264 = t48251+t48252-t48249;
                double t48265 = 1.0/pow(t48171,8.0/3.0);
                double t48279 = t48214*t48216*t48265*t48199*(2.5E1/2.0);
                double t48266 = exp(-t48279);
                double t48267 = Cx*(1.0E1/7.0);
                double t48268 = Cc1*(1.0/1.0E3);
                double t48269 = Cc3*t48178*t48179*(1.0/1.0E3);
                double t48270 = Cc2*c*t48172*(1.0/1.0E3);
                double t48271 = t48270+t48268+t48269;
                double t48272 = Cc5*t48178*t48179;
                double t48273 = 1.0/t48171;
                double t48274 = Cc6*c*t48273*t48178;
                double t48275 = Cc4*c*t48172;
                double t48276 = t48272+t48274+t48275+1.0;
                double t48277 = 1.0/t48276;
                double t48284 = t48271*t48277;
                double t48278 = Cc0-t48284+t48267;
                double t48280 = 1.0/alph;
                double t48281 = bet*bet;
                double t48282 = alph*t48200*t48256*t48259*2.0;
                double t48283 = t48282+1.0;
                v_rho_b[Q] += scale * -t48212-t48171*(t48251+t48252-t48249+(t48280*t48281*(alph*t48200*t48256*(t48214*t48225*t48261*t48226*t48227*(7.0/4.8E1)+alph*t48200*t48231*t48224*t48260*t48216*t48217*t48199*(7.0/9.6E1)+t48222*t48232*t48224*t48233*t48216*t48217*t48262*t48218*t48264*t48199*(1.0/1.6E1))*2.0-alph*t48200*1.0/(t48255*t48255)*t48259*(t48232*t48215*t48224*t48233*t48260*t48216*t48217*t48199*(7.0/4.8E1)+alph*t48200*t48231*t48214*t48225*t48261*t48226*t48227*(7.0/2.4E1)+t48222*t48214*t48232*t48233*t48225*t48226*t48262*t48227*t48228*t48264*(1.0/2.0)+alph*1.0/(bet*bet*bet*bet)*t48222*1.0/(t48223*t48223*t48223)*t48232*t48224*t48216*t48217*t48218*t48264*t48199*(1.0/4.0))*2.0)*(1.0/4.0))/t48283+1.0/(k*k*k)*nu*t48224*1.0/(t48171*t48171*t48171*t48171*t48171*t48171)*t48227*t48266*t48278*(2.5E1/1.2E1)+nu*t48214*t48225*t48226*t48227*t48228*t48266*(t48277*(Cc2*c*t48183*(1.0/3.0E3)+Cc3*t48178*t48189*(1.0/1.5E3))-t48271*1.0/(t48276*t48276)*(Cc4*c*t48183*(1.0/3.0)+Cc5*t48178*t48189*(2.0/3.0)+Cc6*c*1.0/(t48171*t48171)*t48178))*(1.0/3.2E1)-nu*t48214*t48225*t48261*t48226*t48227*t48266*t48278*(7.0/9.6E1))+t48280*t48281*log(t48283)*(1.0/4.0)+t48205*t48208*(t48212-t48229)-nu*t48214*t48225*t48226*t48227*t48228*t48266*t48278*(1.0/3.2E1);
            }
            
            // v_gamma_aa
            if (deriv >= 1) {
                double t48286 = rho_a+rho_b;
                double t48287 = 1.0/bet;
                double t48288 = 1.0/pow(t48286,1.0/3.0);
                double t48289 = c*t48288;
                double t48290 = pow(2.0,1.0/3.0);
                double t48291 = sqrt(t48289);
                double t48292 = pow(t48289,3.0/2.0);
                double t48293 = c*c;
                double t48294 = 1.0/pow(t48286,2.0/3.0);
                double t48295 = 1.0/c0p;
                double t48296 = b1p*t48291;
                double t48297 = b3p*t48292;
                double t48298 = b4p*t48293*t48294;
                double t48299 = b2p*c*t48288;
                double t48300 = t48296+t48297+t48298+t48299;
                double t48301 = 1.0/t48300;
                double t48302 = t48301*t48295*(1.0/2.0);
                double t48303 = t48302+1.0;
                double t48304 = log(t48303);
                double t48305 = a1p*c*t48288;
                double t48306 = t48305+1.0;
                double t48307 = c0p*t48304*t48306*2.0;
                double t48308 = 1.0/(bet*bet);
                double t48309 = 1.0/(k*k);
                double t48310 = 1.0/(pi_m12*pi_m12*pi_m12*pi_m12);
                double t48311 = 1.0/pow(t48286,1.4E1/3.0);
                double t48312 = t48290*2.0;
                double t48313 = t48312-2.0;
                double t48314 = two_13*2.0;
                double t48315 = t48314-2.0;
                double t48316 = 1.0/t48315;
                double t48317 = 1.0/c0f;
                double t48318 = b1f*t48291;
                double t48319 = b3f*t48292;
                double t48320 = b4f*t48293*t48294;
                double t48321 = b2f*c*t48288;
                double t48322 = t48320+t48321+t48318+t48319;
                double t48323 = 1.0/t48322;
                double t48324 = t48323*t48317*(1.0/2.0);
                double t48325 = t48324+1.0;
                double t48326 = log(t48325);
                double t48327 = a1f*c*t48288;
                double t48328 = t48327+1.0;
                double t48339 = c0f*t48326*t48328*2.0;
                double t48329 = t48307-t48339;
                double t48340 = t48313*t48316*t48329;
                double t48330 = -t48340+t48307;
                double t48331 = alph*t48330*t48308*4.0;
                double t48332 = exp(t48331);
                double t48333 = t48332-1.0;
                double t48342 = gamma_ab*2.0;
                double t48334 = gamma_aa+gamma_bb+t48342;
                double t48335 = pow(2.0,2.0/3.0);
                double t48336 = 1.0/k;
                double t48337 = 1.0/(pi_m12*pi_m12);
                double t48338 = 1.0/pow(t48286,7.0/3.0);
                double t48341 = 1.0/t48333;
                double t48343 = alph*alph;
                double t48344 = 1.0/(t48333*t48333);
                double t48345 = gamma_aa*2.0;
                double t48346 = gamma_ab*4.0;
                double t48347 = gamma_bb*2.0;
                double t48348 = t48345+t48346+t48347;
                double t48349 = t48334*t48334;
                double t48350 = t48310*t48311*t48343*t48290*t48308*t48344*t48309*t48349*(1.0/3.2E1);
                double t48351 = alph*t48341*t48334*t48335*t48336*t48337*t48338*t48287*(1.0/8.0);
                double t48352 = t48350+t48351+1.0;
                double t48353 = t48334*t48335*t48336*t48337*t48338*(1.0/1.6E1);
                double t48354 = alph*t48310*t48311*t48341*t48290*t48309*t48349*t48287*(1.0/6.4E1);
                double t48355 = t48353+t48354;
                double t48356 = 1.0/t48352;
                double t48357 = 1.0/pow(t48286,8.0/3.0);
                double t48358 = exp(t48334*t48290*t48309*t48357*(-2.5E1/2.0));
                double t48359 = Cx*(1.0E1/7.0);
                double t48360 = Cc1*(1.0/1.0E3);
                double t48361 = Cc3*t48293*t48294*(1.0/1.0E3);
                double t48362 = Cc2*c*t48288*(1.0/1.0E3);
                double t48363 = t48360+t48361+t48362;
                double t48364 = Cc5*t48293*t48294;
                double t48365 = 1.0/t48286;
                double t48366 = Cc6*c*t48293*t48365;
                double t48367 = Cc4*c*t48288;
                double t48368 = t48364+t48366+t48367+1.0;
                double t48369 = 1.0/t48368;
                double t48370 = Cc0+t48359-t48363*t48369;
                v_gamma_aa[Q] += scale * t48286*(((bet*bet)*(alph*t48356*t48287*(t48335*t48336*t48337*t48338*(1.0/1.6E1)+alph*t48310*t48311*t48341*t48290*t48309*t48348*t48287*(1.0/6.4E1))*2.0-alph*1.0/(t48352*t48352)*t48355*t48287*(alph*t48341*t48335*t48336*t48337*t48338*t48287*(1.0/8.0)+t48310*t48311*t48343*t48290*t48308*t48344*t48309*t48348*(1.0/3.2E1))*2.0)*(1.0/4.0))/(alph*(alph*t48355*t48356*t48287*2.0+1.0))+1.0/(k*k*k)*nu*t48334*t48370*t48337*1.0/(t48286*t48286*t48286*t48286*t48286)*t48358*(2.5E1/3.2E1)-nu*t48370*t48335*t48336*t48337*t48338*t48358*(1.0/3.2E1));
            }
            
            // v_gamma_ab
            if (deriv >= 1) {
                double t48372 = rho_a+rho_b;
                double t48373 = 1.0/bet;
                double t48374 = 1.0/pow(t48372,1.0/3.0);
                double t48375 = c*t48374;
                double t48376 = pow(2.0,1.0/3.0);
                double t48377 = sqrt(t48375);
                double t48378 = pow(t48375,3.0/2.0);
                double t48379 = c*c;
                double t48380 = 1.0/pow(t48372,2.0/3.0);
                double t48381 = 1.0/c0p;
                double t48382 = b1p*t48377;
                double t48383 = b3p*t48378;
                double t48384 = b4p*t48380*t48379;
                double t48385 = b2p*c*t48374;
                double t48386 = t48382+t48383+t48384+t48385;
                double t48387 = 1.0/t48386;
                double t48388 = t48381*t48387*(1.0/2.0);
                double t48389 = t48388+1.0;
                double t48390 = log(t48389);
                double t48391 = a1p*c*t48374;
                double t48392 = t48391+1.0;
                double t48393 = c0p*t48390*t48392*2.0;
                double t48394 = 1.0/(bet*bet);
                double t48395 = 1.0/(k*k);
                double t48396 = 1.0/(pi_m12*pi_m12*pi_m12*pi_m12);
                double t48397 = 1.0/pow(t48372,1.4E1/3.0);
                double t48398 = t48376*2.0;
                double t48399 = t48398-2.0;
                double t48400 = two_13*2.0;
                double t48401 = t48400-2.0;
                double t48402 = 1.0/t48401;
                double t48403 = 1.0/c0f;
                double t48404 = b1f*t48377;
                double t48405 = b3f*t48378;
                double t48406 = b4f*t48380*t48379;
                double t48407 = b2f*c*t48374;
                double t48408 = t48404+t48405+t48406+t48407;
                double t48409 = 1.0/t48408;
                double t48410 = t48403*t48409*(1.0/2.0);
                double t48411 = t48410+1.0;
                double t48412 = log(t48411);
                double t48413 = a1f*c*t48374;
                double t48414 = t48413+1.0;
                double t48425 = c0f*t48412*t48414*2.0;
                double t48415 = -t48425+t48393;
                double t48416 = t48393-t48402*t48415*t48399;
                double t48417 = alph*t48416*t48394*4.0;
                double t48418 = exp(t48417);
                double t48419 = t48418-1.0;
                double t48426 = gamma_ab*2.0;
                double t48420 = gamma_aa+gamma_bb+t48426;
                double t48421 = pow(2.0,2.0/3.0);
                double t48422 = 1.0/k;
                double t48423 = 1.0/(pi_m12*pi_m12);
                double t48424 = 1.0/pow(t48372,7.0/3.0);
                double t48427 = t48425-t48393;
                double t48428 = t48402*t48427*t48399;
                double t48429 = t48428+t48393;
                double t48430 = alph*t48429*t48394*4.0;
                double t48431 = exp(t48430);
                double t48432 = t48431-1.0;
                double t48433 = 1.0/t48432;
                double t48434 = alph*alph;
                double t48435 = gamma_aa*4.0;
                double t48436 = gamma_ab*8.0;
                double t48437 = gamma_bb*4.0;
                double t48438 = t48435+t48436+t48437;
                double t48439 = t48420*t48420;
                double t48440 = 1.0/(t48432*t48432);
                double t48441 = alph*t48420*t48421*t48422*t48423*t48424*t48433*t48373*(1.0/8.0);
                double t48442 = t48420*t48421*t48422*t48423*t48424*(1.0/1.6E1);
                double t48443 = alph*t48433*t48373*t48376*t48439*t48395*t48396*t48397*(1.0/6.4E1);
                double t48444 = t48442+t48443;
                double t48445 = t48440*t48434*t48376*t48394*t48439*t48395*t48396*t48397*(1.0/3.2E1);
                double t48446 = t48441+t48445+1.0;
                double t48447 = 1.0/pow(t48372,8.0/3.0);
                double t48448 = exp(t48420*t48447*t48376*t48395*(-2.5E1/2.0));
                double t48449 = Cx*(1.0E1/7.0);
                double t48450 = Cc1*(1.0/1.0E3);
                double t48451 = Cc3*t48380*t48379*(1.0/1.0E3);
                double t48452 = Cc2*c*t48374*(1.0/1.0E3);
                double t48453 = t48450+t48451+t48452;
                double t48454 = Cc5*t48380*t48379;
                double t48455 = 1.0/t48372;
                double t48456 = Cc6*c*t48455*t48379;
                double t48457 = Cc4*c*t48374;
                double t48458 = t48454+t48456+t48457+1.0;
                double t48459 = 1.0/t48458;
                double t48460 = Cc0+t48449-t48453*t48459;
                v_gamma_ab[Q] += scale * t48372*(((bet*bet)*((alph*t48373*(t48421*t48422*t48423*t48424*(1.0/8.0)+(alph*t48373*t48438*t48376*t48395*t48396*t48397*(1.0/6.4E1))/t48419)*2.0)/(t48441+t48434*1.0/(t48419*t48419)*t48376*t48394*t48439*t48395*t48396*t48397*(1.0/3.2E1)+1.0)-alph*t48444*t48373*1.0/(t48446*t48446)*(alph*t48421*t48422*t48423*t48424*t48433*t48373*(1.0/4.0)+t48440*t48434*t48438*t48376*t48394*t48395*t48396*t48397*(1.0/3.2E1))*2.0)*(1.0/4.0))/(alph*((alph*t48444*t48373*2.0)/t48446+1.0))+1.0/(k*k*k)*nu*t48420*t48423*t48460*1.0/(t48372*t48372*t48372*t48372*t48372)*t48448*(2.5E1/1.6E1)-nu*t48421*t48422*t48423*t48424*t48460*t48448*(1.0/1.6E1));
            }
            
            // v_gamma_bb
            if (deriv >= 1) {
                double t48462 = rho_a+rho_b;
                double t48463 = 1.0/bet;
                double t48464 = 1.0/pow(t48462,1.0/3.0);
                double t48465 = c*t48464;
                double t48466 = pow(2.0,1.0/3.0);
                double t48467 = sqrt(t48465);
                double t48468 = pow(t48465,3.0/2.0);
                double t48469 = c*c;
                double t48470 = 1.0/pow(t48462,2.0/3.0);
                double t48471 = 1.0/c0p;
                double t48472 = b1p*t48467;
                double t48473 = b3p*t48468;
                double t48474 = b4p*t48470*t48469;
                double t48475 = b2p*c*t48464;
                double t48476 = t48472+t48473+t48474+t48475;
                double t48477 = 1.0/t48476;
                double t48478 = t48471*t48477*(1.0/2.0);
                double t48479 = t48478+1.0;
                double t48480 = log(t48479);
                double t48481 = a1p*c*t48464;
                double t48482 = t48481+1.0;
                double t48483 = c0p*t48480*t48482*2.0;
                double t48484 = 1.0/(bet*bet);
                double t48485 = 1.0/(k*k);
                double t48486 = 1.0/(pi_m12*pi_m12*pi_m12*pi_m12);
                double t48487 = 1.0/pow(t48462,1.4E1/3.0);
                double t48488 = t48466*2.0;
                double t48489 = t48488-2.0;
                double t48490 = two_13*2.0;
                double t48491 = t48490-2.0;
                double t48492 = 1.0/t48491;
                double t48493 = 1.0/c0f;
                double t48494 = b1f*t48467;
                double t48495 = b3f*t48468;
                double t48496 = b4f*t48470*t48469;
                double t48497 = b2f*c*t48464;
                double t48498 = t48494+t48495+t48496+t48497;
                double t48499 = 1.0/t48498;
                double t48500 = t48493*t48499*(1.0/2.0);
                double t48501 = t48500+1.0;
                double t48502 = log(t48501);
                double t48503 = a1f*c*t48464;
                double t48504 = t48503+1.0;
                double t48515 = c0f*t48502*t48504*2.0;
                double t48505 = -t48515+t48483;
                double t48506 = t48483-t48505*t48492*t48489;
                double t48507 = alph*t48506*t48484*4.0;
                double t48508 = exp(t48507);
                double t48509 = t48508-1.0;
                double t48516 = gamma_ab*2.0;
                double t48510 = gamma_aa+gamma_bb+t48516;
                double t48511 = pow(2.0,2.0/3.0);
                double t48512 = 1.0/k;
                double t48513 = 1.0/(pi_m12*pi_m12);
                double t48514 = 1.0/pow(t48462,7.0/3.0);
                double t48517 = t48515-t48483;
                double t48518 = t48517*t48492*t48489;
                double t48519 = t48518+t48483;
                double t48520 = alph*t48519*t48484*4.0;
                double t48521 = exp(t48520);
                double t48522 = t48521-1.0;
                double t48523 = 1.0/t48522;
                double t48524 = alph*alph;
                double t48525 = gamma_aa*2.0;
                double t48526 = gamma_ab*4.0;
                double t48527 = gamma_bb*2.0;
                double t48528 = t48525+t48526+t48527;
                double t48529 = t48510*t48510;
                double t48530 = 1.0/(t48522*t48522);
                double t48531 = alph*t48510*t48511*t48512*t48513*t48514*t48523*t48463*(1.0/8.0);
                double t48532 = t48510*t48511*t48512*t48513*t48514*(1.0/1.6E1);
                double t48533 = alph*t48523*t48463*t48466*t48529*t48485*t48486*t48487*(1.0/6.4E1);
                double t48534 = t48532+t48533;
                double t48535 = t48530*t48524*t48466*t48484*t48529*t48485*t48486*t48487*(1.0/3.2E1);
                double t48536 = t48531+t48535+1.0;
                double t48537 = 1.0/pow(t48462,8.0/3.0);
                double t48538 = exp(t48510*t48537*t48466*t48485*(-2.5E1/2.0));
                double t48539 = Cx*(1.0E1/7.0);
                double t48540 = Cc1*(1.0/1.0E3);
                double t48541 = Cc3*t48470*t48469*(1.0/1.0E3);
                double t48542 = Cc2*c*t48464*(1.0/1.0E3);
                double t48543 = t48540+t48541+t48542;
                double t48544 = Cc5*t48470*t48469;
                double t48545 = 1.0/t48462;
                double t48546 = Cc6*c*t48545*t48469;
                double t48547 = Cc4*c*t48464;
                double t48548 = t48544+t48546+t48547+1.0;
                double t48549 = 1.0/t48548;
                double t48550 = Cc0+t48539-t48543*t48549;
                v_gamma_bb[Q] += scale * t48462*(((bet*bet)*((alph*t48463*(t48511*t48512*t48513*t48514*(1.0/1.6E1)+(alph*t48463*t48528*t48466*t48485*t48486*t48487*(1.0/6.4E1))/t48509)*2.0)/(t48531+t48524*1.0/(t48509*t48509)*t48466*t48484*t48529*t48485*t48486*t48487*(1.0/3.2E1)+1.0)-alph*t48534*t48463*1.0/(t48536*t48536)*(alph*t48511*t48512*t48513*t48514*t48523*t48463*(1.0/8.0)+t48530*t48524*t48528*t48466*t48484*t48485*t48486*t48487*(1.0/3.2E1))*2.0)*(1.0/4.0))/(alph*((alph*t48534*t48463*2.0)/t48536+1.0))+1.0/(k*k*k)*nu*t48510*t48513*t48550*1.0/(t48462*t48462*t48462*t48462*t48462)*t48538*(2.5E1/3.2E1)-nu*t48511*t48512*t48513*t48514*t48550*t48538*(1.0/3.2E1));
            }
            
        } else {
            // v
            if (deriv >= 0) {
                double t46626 = rho_a+rho_b;
                double t46627 = 1.0/pow(t46626,1.0/3.0);
                double t46628 = c*t46627;
                double t46629 = 1.0/t46626;
                double t46630 = rho_a-rho_b;
                double t46631 = t46630*t46629;
                double t46632 = 1.0/bet;
                double t46633 = t46631+1.0;
                double t46634 = pow(t46633,2.0/3.0);
                double t46635 = t46634*(1.0/2.0);
                double t46636 = -t46631+1.0;
                double t46637 = pow(t46636,2.0/3.0);
                double t46638 = t46637*(1.0/2.0);
                double t46639 = t46635+t46638;
                double t46640 = 1.0/c0p;
                double t46641 = sqrt(t46628);
                double t46642 = b1p*t46641;
                double t46643 = pow(t46628,3.0/2.0);
                double t46644 = b3p*t46643;
                double t46645 = c*c;
                double t46646 = 1.0/pow(t46626,2.0/3.0);
                double t46647 = b4p*t46645*t46646;
                double t46648 = b2p*c*t46627;
                double t46649 = t46642+t46644+t46647+t46648;
                double t46650 = 1.0/t46649;
                double t46651 = t46640*t46650*(1.0/2.0);
                double t46652 = t46651+1.0;
                double t46653 = log(t46652);
                double t46654 = a1p*c*t46627;
                double t46655 = t46654+1.0;
                double t46656 = c0p*t46653*t46655*2.0;
                double t46657 = t46630*t46630;
                double t46658 = two_13*2.0;
                double t46659 = t46658-2.0;
                double t46660 = 1.0/t46659;
                double t46661 = 1.0/(t46626*t46626*t46626*t46626);
                double t46662 = t46657*t46657;
                double t46663 = pow(t46633,4.0/3.0);
                double t46664 = pow(t46636,4.0/3.0);
                double t46665 = t46663+t46664-2.0;
                double t46666 = gamma_ab*2.0;
                double t46667 = gamma_aa+gamma_bb+t46666;
                double t46668 = 1.0/(bet*bet);
                double t46669 = 1.0/(k*k);
                double t46670 = 1.0/(pi_m12*pi_m12*pi_m12*pi_m12);
                double t46671 = 1.0/(t46639*t46639*t46639);
                double t46672 = 1.0/c0f;
                double t46673 = b1f*t46641;
                double t46674 = b3f*t46643;
                double t46675 = b4f*t46645*t46646;
                double t46676 = b2f*c*t46627;
                double t46677 = t46673+t46674+t46675+t46676;
                double t46678 = 1.0/t46677;
                double t46679 = t46672*t46678*(1.0/2.0);
                double t46680 = t46679+1.0;
                double t46681 = log(t46680);
                double t46682 = a1f*c*t46627;
                double t46683 = t46682+1.0;
                double t46710 = c0f*t46681*t46683*2.0;
                double t46684 = -t46710+t46656;
                double t46685 = 1.0/d2fz0;
                double t46686 = 1.0/Aa;
                double t46687 = b1a*t46641;
                double t46688 = b3a*t46643;
                double t46689 = b4a*t46645*t46646;
                double t46690 = b2a*c*t46627;
                double t46691 = t46690+t46687+t46688+t46689;
                double t46692 = 1.0/t46691;
                double t46693 = t46692*t46686*(1.0/2.0);
                double t46694 = t46693+1.0;
                double t46695 = log(t46694);
                double t46696 = a1a*c*t46627;
                double t46697 = t46696+1.0;
                double t46698 = t46661*t46662;
                double t46699 = t46698-1.0;
                double t46700 = Aa*t46660*t46665*t46685*t46695*t46697*t46699*2.0;
                double t46701 = t46700+t46656-t46660*t46661*t46662*t46665*t46684;
                double t46702 = alph*t46701*t46671*t46668*2.0;
                double t46703 = exp(t46702);
                double t46704 = t46703-1.0;
                double t46705 = 1.0/pow(t46626,1.4E1/3.0);
                double t46706 = 1.0/(t46639*t46639*t46639*t46639);
                double t46707 = t46667*t46667;
                double t46708 = 1.0/k;
                double t46709 = 1.0/(pi_m12*pi_m12);
                double t46711 = 1.0/pow(t46626,7.0/3.0);
                double t46712 = 1.0/(t46639*t46639);
                double t46713 = t46639*t46639;
                double t46714 = t46710-t46656;
                double t46715 = t46660*t46714*t46661*t46662*t46665;
                v[Q] += scale * -t46626*(t46700+t46715+t46656-((bet*bet)*t46713*t46639*log((alph*t46632*(t46711*t46712*t46708*t46709*t46667*(1.0/1.6E1)+(alph*t46632*t46705*t46670*t46706*t46707*t46669*(1.0/1.28E2))/t46704)*2.0)/((alph*t46711*t46712*t46632*t46708*t46709*t46667*(1.0/8.0))/(exp(alph*t46671*t46668*(t46700+t46715+t46656)*2.0)-1.0)+(alph*alph)*1.0/(t46704*t46704)*t46705*t46670*t46706*t46707*t46668*t46669*(1.0/6.4E1)+1.0)+1.0)*(1.0/2.0))/alph+nu*t46711*t46708*t46709*t46639*t46667*exp(t46713*1.0/pow(t46626,8.0/3.0)*t46667*t46669*-2.5E1)*(Cc0+Cx*(1.0E1/7.0)-(Cc1*(1.0/1.0E3)+Cc2*c*t46627*(1.0/1.0E3)+Cc3*t46645*t46646*(1.0/1.0E3))/(Cc4*c*t46627+Cc5*t46645*t46646+Cc6*c*t46645*t46629+1.0))*(1.0/1.6E1));
            }
            
            // v_rho_a
            if (deriv >= 1) {
                double t46717 = rho_a+rho_b;
                double t46718 = 1.0/pow(t46717,1.0/3.0);
                double t46719 = c*t46718;
                double t46720 = sqrt(t46719);
                double t46721 = b1p*t46720;
                double t46722 = pow(t46719,3.0/2.0);
                double t46723 = b3p*t46722;
                double t46724 = c*c;
                double t46725 = 1.0/pow(t46717,2.0/3.0);
                double t46726 = b4p*t46724*t46725;
                double t46727 = b2p*c*t46718;
                double t46728 = t46721+t46723+t46726+t46727;
                double t46729 = 1.0/pow(t46717,4.0/3.0);
                double t46730 = 1.0/t46717;
                double t46731 = rho_a-rho_b;
                double t46732 = t46730*t46731;
                double t46733 = 1.0/bet;
                double t46734 = t46732+1.0;
                double t46735 = pow(t46734,2.0/3.0);
                double t46736 = t46735*(1.0/2.0);
                double t46737 = -t46732+1.0;
                double t46738 = pow(t46737,2.0/3.0);
                double t46739 = t46738*(1.0/2.0);
                double t46740 = t46736+t46739;
                double t46741 = 1.0/c0p;
                double t46742 = 1.0/t46728;
                double t46743 = t46741*t46742*(1.0/2.0);
                double t46744 = t46743+1.0;
                double t46745 = a1p*c*t46718;
                double t46746 = t46745+1.0;
                double t46747 = log(t46744);
                double t46748 = c0p*t46746*t46747*2.0;
                double t46749 = t46731*t46731;
                double t46750 = two_13*2.0;
                double t46751 = t46750-2.0;
                double t46752 = 1.0/t46751;
                double t46753 = 1.0/(t46717*t46717*t46717*t46717);
                double t46754 = t46749*t46749;
                double t46755 = pow(t46734,4.0/3.0);
                double t46756 = pow(t46737,4.0/3.0);
                double t46757 = t46755+t46756-2.0;
                double t46758 = gamma_ab*2.0;
                double t46759 = gamma_aa+gamma_bb+t46758;
                double t46760 = 1.0/(bet*bet);
                double t46761 = 1.0/(k*k);
                double t46762 = 1.0/(pi_m12*pi_m12*pi_m12*pi_m12);
                double t46763 = 1.0/(t46740*t46740*t46740);
                double t46764 = 1.0/c0f;
                double t46765 = b1f*t46720;
                double t46766 = b3f*t46722;
                double t46767 = b4f*t46724*t46725;
                double t46768 = b2f*c*t46718;
                double t46769 = t46765+t46766+t46767+t46768;
                double t46770 = 1.0/t46769;
                double t46771 = t46770*t46764*(1.0/2.0);
                double t46772 = t46771+1.0;
                double t46773 = log(t46772);
                double t46774 = a1f*c*t46718;
                double t46775 = t46774+1.0;
                double t46802 = c0f*t46773*t46775*2.0;
                double t46776 = -t46802+t46748;
                double t46777 = 1.0/d2fz0;
                double t46778 = 1.0/Aa;
                double t46779 = b1a*t46720;
                double t46780 = b3a*t46722;
                double t46781 = b4a*t46724*t46725;
                double t46782 = b2a*c*t46718;
                double t46783 = t46780+t46781+t46782+t46779;
                double t46784 = 1.0/t46783;
                double t46785 = t46784*t46778*(1.0/2.0);
                double t46786 = t46785+1.0;
                double t46787 = log(t46786);
                double t46788 = a1a*c*t46718;
                double t46789 = t46788+1.0;
                double t46790 = t46753*t46754;
                double t46791 = t46790-1.0;
                double t46792 = Aa*t46752*t46791*t46757*t46777*t46787*t46789*2.0;
                double t46793 = t46792+t46748-t46752*t46753*t46754*t46757*t46776;
                double t46794 = alph*t46760*t46763*t46793*2.0;
                double t46795 = exp(t46794);
                double t46796 = t46795-1.0;
                double t46797 = 1.0/pow(t46717,1.4E1/3.0);
                double t46798 = 1.0/(t46740*t46740*t46740*t46740);
                double t46799 = t46759*t46759;
                double t46800 = 1.0/k;
                double t46801 = 1.0/(pi_m12*pi_m12);
                double t46803 = 1.0/pow(t46717,7.0/3.0);
                double t46804 = 1.0/(t46740*t46740);
                double t46805 = 1.0/(t46717*t46717);
                double t46824 = t46731*t46805;
                double t46806 = t46730-t46824;
                double t46807 = 1.0/alph;
                double t46808 = bet*bet;
                double t46809 = t46800*t46801*t46803*t46804*t46759*(1.0/1.6E1);
                double t46810 = t46802-t46748;
                double t46811 = t46810*t46752*t46753*t46754*t46757;
                double t46812 = t46811+t46792+t46748;
                double t46813 = alph*t46812*t46760*t46763*2.0;
                double t46814 = exp(t46813);
                double t46815 = t46814-1.0;
                double t46816 = 1.0/t46815;
                double t46817 = alph*alph;
                double t46818 = alph*t46800*t46801*t46803*t46804*t46733*t46816*t46759*(1.0/8.0);
                double t46819 = 1.0/(t46815*t46815);
                double t46820 = t46760*t46761*t46762*t46817*t46819*t46797*t46798*t46799*(1.0/6.4E1);
                double t46821 = t46820+t46818+1.0;
                double t46822 = 1.0/t46821;
                double t46823 = 1.0/pow(t46734,1.0/3.0);
                double t46825 = t46823*t46806*(1.0/3.0);
                double t46826 = 1.0/pow(t46737,1.0/3.0);
                double t46828 = t46806*t46826*(1.0/3.0);
                double t46827 = t46825-t46828;
                double t46829 = 1.0/t46744;
                double t46830 = 1.0/(t46728*t46728);
                double t46831 = 1.0/pow(t46717,5.0/3.0);
                double t46832 = b4p*t46831*t46724*(2.0/3.0);
                double t46833 = b2p*c*t46729*(1.0/3.0);
                double t46834 = 1.0/sqrt(t46719);
                double t46835 = b1p*c*t46834*t46729*(1.0/6.0);
                double t46836 = b3p*c*t46720*t46729*(1.0/2.0);
                double t46837 = t46832+t46833+t46835+t46836;
                double t46838 = t46830*t46746*t46837*t46829;
                double t46839 = 1.0/(t46717*t46717*t46717*t46717*t46717);
                double t46840 = pow(t46734,1.0/3.0);
                double t46841 = t46840*t46806*(4.0/3.0);
                double t46842 = pow(t46737,1.0/3.0);
                double t46850 = t46806*t46842*(4.0/3.0);
                double t46843 = t46841-t46850;
                double t46844 = alph*t46733*t46761*t46762*t46816*t46797*t46798*t46799*(1.0/1.28E2);
                double t46845 = t46844+t46809;
                double t46846 = 1.0/pow(t46717,1.7E1/3.0);
                double t46847 = 1.0/pow(t46717,1.0E1/3.0);
                double t46848 = 1.0/(t46740*t46740*t46740*t46740*t46740);
                double t46849 = t46810*t46731*t46752*t46753*t46757*t46749*4.0;
                double t46851 = t46810*t46752*t46753*t46843*t46754;
                double t46852 = 1.0/t46772;
                double t46853 = 1.0/(t46769*t46769);
                double t46854 = b4f*t46831*t46724*(2.0/3.0);
                double t46855 = b2f*c*t46729*(1.0/3.0);
                double t46856 = b1f*c*t46834*t46729*(1.0/6.0);
                double t46857 = b3f*c*t46720*t46729*(1.0/2.0);
                double t46858 = t46854+t46855+t46856+t46857;
                double t46859 = a1f*c*c0f*t46773*t46729*(2.0/3.0);
                double t46861 = a1p*c*c0p*t46729*t46747*(2.0/3.0);
                double t46873 = t46852*t46853*t46775*t46858;
                double t46860 = -t46861-t46873+t46838+t46859;
                double t46862 = t46754*t46839*4.0;
                double t46874 = t46731*t46753*t46749*4.0;
                double t46863 = t46862-t46874;
                double t46864 = Aa*t46752*t46843*t46791*t46777*t46787*t46789*2.0;
                double t46865 = 1.0/t46786;
                double t46866 = 1.0/(t46783*t46783);
                double t46867 = b4a*t46831*t46724*(2.0/3.0);
                double t46868 = b2a*c*t46729*(1.0/3.0);
                double t46869 = b1a*c*t46834*t46729*(1.0/6.0);
                double t46870 = b3a*c*t46720*t46729*(1.0/2.0);
                double t46871 = t46870+t46867+t46868+t46869;
                double t46872 = t46752*t46871*t46791*t46757*t46865*t46866*t46777*t46789;
                double t46875 = t46740*t46740;
                double t46876 = t46861+t46873-t46838-t46859;
                double t46877 = t46752*t46753*t46754*t46757*t46876;
                double t46878 = 1.0/pow(t46717,8.0/3.0);
                double t46889 = t46761*t46875*t46759*t46878*2.5E1;
                double t46879 = exp(-t46889);
                double t46880 = Cc5*t46724*t46725;
                double t46881 = Cc6*c*t46730*t46724;
                double t46882 = Cc4*c*t46718;
                double t46883 = t46880+t46881+t46882+1.0;
                double t46884 = 1.0/t46883;
                double t46885 = Cc1*(1.0/1.0E3);
                double t46886 = Cc3*t46724*t46725*(1.0/1.0E3);
                double t46887 = Cc2*c*t46718*(1.0/1.0E3);
                double t46888 = t46885+t46886+t46887;
                double t46890 = Cx*(1.0E1/7.0);
                double t46892 = t46884*t46888;
                double t46891 = Cc0+t46890-t46892;
                double t46896 = t46810*t46752*t46754*t46757*t46839*4.0;
                double t46897 = Aa*t46752*t46863*t46757*t46777*t46787*t46789*2.0;
                double t46898 = Aa*a1a*c*t46752*t46791*t46729*t46757*t46777*t46787*(2.0/3.0);
                double t46893 = t46851-t46861+t46872+t46864+t46838+t46849-t46896-t46897-t46898-t46752*t46860*t46753*t46754*t46757;
                double t46894 = alph*t46760*t46763*t46893*2.0;
                double t46899 = alph*t46812*t46760*t46827*t46798*6.0;
                double t46895 = t46894-t46899;
                double t46900 = alph*t46822*t46733*t46845*2.0;
                double t46901 = t46900+1.0;
                v_rho_a[Q] += scale * -t46811-t46792-t46748-t46717*(t46851-t46861+t46872+t46864+t46838+t46849+t46877-t46897-t46898-t46810*t46752*t46754*t46757*t46839*4.0-t46807*t46808*t46827*t46875*log((alph*t46733*(t46809+(alph*t46733*t46761*t46762*t46797*t46798*t46799*(1.0/1.28E2))/t46796)*2.0)/(t46818+t46760*t46761*t46762*t46817*1.0/(t46796*t46796)*t46797*t46798*t46799*(1.0/6.4E1)+1.0)+1.0)*(3.0/2.0)+(t46740*t46807*t46808*t46875*(alph*t46822*t46733*(t46800*t46801*t46804*t46847*t46759*(7.0/4.8E1)+t46800*t46801*t46803*t46763*t46827*t46759*(1.0/8.0)+alph*t46733*t46761*t46762*t46816*t46846*t46798*t46799*(7.0/1.92E2)+alph*t46733*t46761*t46762*t46816*t46827*t46848*t46797*t46799*(1.0/3.2E1)+alph*t46733*t46814*t46761*t46762*t46819*t46895*t46797*t46798*t46799*(1.0/1.28E2))*2.0-alph*1.0/(t46821*t46821)*t46733*t46845*(t46760*t46761*t46762*t46817*t46819*t46846*t46798*t46799*(7.0/9.6E1)+alph*t46800*t46801*t46804*t46733*t46816*t46847*t46759*(7.0/2.4E1)+alph*t46800*t46801*t46803*t46733*t46816*t46763*t46827*t46759*(1.0/4.0)+t46760*t46761*t46762*t46817*t46827*t46819*t46848*t46797*t46799*(1.0/1.6E1)-alph*t46800*t46801*t46803*t46804*t46733*t46814*t46819*t46759*(t46899-alph*t46760*t46763*(t46851-t46861+t46872+t46864+t46838+t46849+t46877-t46896-t46897-t46898)*2.0)*(1.0/8.0)+t46760*t46814*t46761*1.0/(t46815*t46815*t46815)*t46762*t46817*t46895*t46797*t46798*t46799*(1.0/3.2E1))*2.0)*(1.0/2.0))/t46901+nu*t46800*t46801*t46740*t46803*t46759*t46879*(t46884*(Cc2*c*t46729*(1.0/3.0E3)+Cc3*t46831*t46724*(1.0/1.5E3))-1.0/(t46883*t46883)*t46888*(Cc4*c*t46729*(1.0/3.0)+Cc5*t46831*t46724*(2.0/3.0)+Cc6*c*t46724*t46805))*(1.0/1.6E1)+nu*t46800*t46801*t46803*t46827*t46891*t46759*t46879*(1.0/1.6E1)-nu*t46800*t46801*t46740*t46891*t46847*t46759*t46879*(7.0/4.8E1)+nu*t46800*t46801*t46740*t46803*t46891*t46759*t46879*(t46761*1.0/pow(t46717,1.1E1/3.0)*t46875*t46759*(2.0E2/3.0)-t46740*t46761*t46827*t46759*t46878*5.0E1)*(1.0/1.6E1))+t46740*t46807*t46808*t46875*log(t46901)*(1.0/2.0)-nu*t46800*t46801*t46740*t46803*t46891*t46759*t46879*(1.0/1.6E1);
            }
            
            // v_rho_b
            if (deriv >= 1) {
                double t46903 = rho_a+rho_b;
                double t46904 = 1.0/pow(t46903,1.0/3.0);
                double t46905 = c*t46904;
                double t46906 = sqrt(t46905);
                double t46907 = b1p*t46906;
                double t46908 = pow(t46905,3.0/2.0);
                double t46909 = b3p*t46908;
                double t46910 = c*c;
                double t46911 = 1.0/pow(t46903,2.0/3.0);
                double t46912 = b4p*t46910*t46911;
                double t46913 = b2p*c*t46904;
                double t46914 = t46912+t46913+t46907+t46909;
                double t46915 = 1.0/pow(t46903,4.0/3.0);
                double t46916 = 1.0/t46903;
                double t46917 = rho_a-rho_b;
                double t46918 = t46916*t46917;
                double t46919 = 1.0/bet;
                double t46920 = t46918+1.0;
                double t46921 = pow(t46920,2.0/3.0);
                double t46922 = t46921*(1.0/2.0);
                double t46923 = -t46918+1.0;
                double t46924 = pow(t46923,2.0/3.0);
                double t46925 = t46924*(1.0/2.0);
                double t46926 = t46922+t46925;
                double t46927 = 1.0/c0p;
                double t46928 = 1.0/t46914;
                double t46929 = t46927*t46928*(1.0/2.0);
                double t46930 = t46929+1.0;
                double t46931 = a1p*c*t46904;
                double t46932 = t46931+1.0;
                double t46933 = log(t46930);
                double t46934 = c0p*t46932*t46933*2.0;
                double t46935 = t46917*t46917;
                double t46936 = two_13*2.0;
                double t46937 = t46936-2.0;
                double t46938 = 1.0/t46937;
                double t46939 = 1.0/(t46903*t46903*t46903*t46903);
                double t46940 = t46935*t46935;
                double t46941 = pow(t46920,4.0/3.0);
                double t46942 = pow(t46923,4.0/3.0);
                double t46943 = t46941+t46942-2.0;
                double t46944 = gamma_ab*2.0;
                double t46945 = gamma_aa+gamma_bb+t46944;
                double t46946 = 1.0/(bet*bet);
                double t46947 = 1.0/(k*k);
                double t46948 = 1.0/(pi_m12*pi_m12*pi_m12*pi_m12);
                double t46949 = 1.0/(t46926*t46926*t46926);
                double t46950 = 1.0/c0f;
                double t46951 = b1f*t46906;
                double t46952 = b3f*t46908;
                double t46953 = b4f*t46910*t46911;
                double t46954 = b2f*c*t46904;
                double t46955 = t46951+t46952+t46953+t46954;
                double t46956 = 1.0/t46955;
                double t46957 = t46950*t46956*(1.0/2.0);
                double t46958 = t46957+1.0;
                double t46959 = log(t46958);
                double t46960 = a1f*c*t46904;
                double t46961 = t46960+1.0;
                double t46988 = c0f*t46961*t46959*2.0;
                double t46962 = t46934-t46988;
                double t46963 = 1.0/d2fz0;
                double t46964 = 1.0/Aa;
                double t46965 = b1a*t46906;
                double t46966 = b3a*t46908;
                double t46967 = b4a*t46910*t46911;
                double t46968 = b2a*c*t46904;
                double t46969 = t46965+t46966+t46967+t46968;
                double t46970 = 1.0/t46969;
                double t46971 = t46970*t46964*(1.0/2.0);
                double t46972 = t46971+1.0;
                double t46973 = log(t46972);
                double t46974 = a1a*c*t46904;
                double t46975 = t46974+1.0;
                double t46976 = t46940*t46939;
                double t46977 = t46976-1.0;
                double t46978 = Aa*t46943*t46963*t46973*t46938*t46975*t46977*2.0;
                double t46989 = t46940*t46943*t46962*t46938*t46939;
                double t46979 = t46934+t46978-t46989;
                double t46980 = alph*t46946*t46949*t46979*2.0;
                double t46981 = exp(t46980);
                double t46982 = t46981-1.0;
                double t46983 = 1.0/pow(t46903,1.4E1/3.0);
                double t46984 = 1.0/(t46926*t46926*t46926*t46926);
                double t46985 = t46945*t46945;
                double t46986 = 1.0/k;
                double t46987 = 1.0/(pi_m12*pi_m12);
                double t46990 = 1.0/t46982;
                double t46991 = 1.0/pow(t46903,7.0/3.0);
                double t46992 = 1.0/(t46926*t46926);
                double t46993 = 1.0/(t46903*t46903);
                double t46994 = t46917*t46993;
                double t46995 = t46916+t46994;
                double t46996 = 1.0/alph;
                double t46997 = bet*bet;
                double t46998 = t46945*t46991*t46992*t46986*t46987*(1.0/1.6E1);
                double t46999 = alph*t46990*t46919*t46947*t46983*t46948*t46984*t46985*(1.0/1.28E2);
                double t47000 = t46998+t46999;
                double t47001 = alph*alph;
                double t47002 = 1.0/(t46982*t46982);
                double t47003 = t46946*t46947*t46983*t46948*t46984*t46985*t47001*t47002*(1.0/6.4E1);
                double t47004 = alph*t46945*t46990*t46919*t46991*t46992*t46986*t46987*(1.0/8.0);
                double t47005 = t47003+t47004+1.0;
                double t47006 = 1.0/t47005;
                double t47007 = alph*t46919*t47000*t47006*2.0;
                double t47008 = t47007+1.0;
                double t47009 = 1.0/pow(t46920,1.0/3.0);
                double t47010 = t46995*t47009*(1.0/3.0);
                double t47011 = 1.0/pow(t46923,1.0/3.0);
                double t47013 = t46995*t47011*(1.0/3.0);
                double t47012 = t47010-t47013;
                double t47014 = 1.0/t46930;
                double t47015 = 1.0/(t46914*t46914);
                double t47016 = 1.0/pow(t46903,5.0/3.0);
                double t47017 = b4p*t46910*t47016*(2.0/3.0);
                double t47018 = b2p*c*t46915*(1.0/3.0);
                double t47019 = 1.0/sqrt(t46905);
                double t47020 = b1p*c*t46915*t47019*(1.0/6.0);
                double t47021 = b3p*c*t46906*t46915*(1.0/2.0);
                double t47022 = t47020+t47021+t47017+t47018;
                double t47023 = 1.0/(t46903*t46903*t46903*t46903*t46903);
                double t47024 = pow(t46920,1.0/3.0);
                double t47025 = t46995*t47024*(4.0/3.0);
                double t47026 = pow(t46923,1.0/3.0);
                double t47034 = t46995*t47026*(4.0/3.0);
                double t47027 = t47025-t47034;
                double t47028 = t46932*t47022*t47014*t47015;
                double t47029 = 1.0/pow(t46903,1.7E1/3.0);
                double t47030 = 1.0/pow(t46903,1.0E1/3.0);
                double t47031 = 1.0/(t46926*t46926*t46926*t46926*t46926);
                double t47032 = t46943*t46917*t46935*t46962*t46938*t46939*4.0;
                double t47033 = t46940*t46943*t46962*t46938*t47023*4.0;
                double t47035 = t46940*t46962*t46938*t46939*t47027;
                double t47036 = 1.0/t46958;
                double t47037 = 1.0/(t46955*t46955);
                double t47038 = b4f*t46910*t47016*(2.0/3.0);
                double t47039 = b2f*c*t46915*(1.0/3.0);
                double t47040 = b1f*c*t46915*t47019*(1.0/6.0);
                double t47041 = b3f*c*t46906*t46915*(1.0/2.0);
                double t47042 = t47040+t47041+t47038+t47039;
                double t47043 = a1f*c*c0f*t46915*t46959*(2.0/3.0);
                double t47044 = t46917*t46935*t46939*4.0;
                double t47045 = t46940*t47023*4.0;
                double t47046 = t47044+t47045;
                double t47047 = 1.0/t46972;
                double t47048 = 1.0/(t46969*t46969);
                double t47049 = b4a*t46910*t47016*(2.0/3.0);
                double t47050 = b2a*c*t46915*(1.0/3.0);
                double t47051 = b1a*c*t46915*t47019*(1.0/6.0);
                double t47052 = b3a*c*t46906*t46915*(1.0/2.0);
                double t47053 = t47050+t47051+t47052+t47049;
                double t47054 = t46943*t46963*t46938*t46975*t46977*t47053*t47047*t47048;
                double t47056 = a1p*c*c0p*t46915*t46933*(2.0/3.0);
                double t47058 = t46961*t47042*t47036*t47037;
                double t47055 = t47043+t47028-t47056-t47058;
                double t47057 = alph*t46946*t46984*t46979*t47012*6.0;
                double t47063 = t46940*t46943*t46938*t46939*t47055;
                double t47064 = Aa*t46943*t46963*t46973*t46938*t46975*t47046*2.0;
                double t47065 = Aa*t46963*t46973*t46938*t46975*t46977*t47027*2.0;
                double t47066 = Aa*a1a*c*t46915*t46943*t46963*t46973*t46938*t46977*(2.0/3.0);
                double t47059 = t47032+t47033+t47035+t47054-t47063+t47028-t47064-t47056-t47065-t47066;
                double t47060 = alph*t46946*t46949*t47059*2.0;
                double t47061 = t47060+t47057;
                double t47062 = t46926*t46926;
                double t47067 = 1.0/pow(t46903,8.0/3.0);
                double t47078 = t46945*t46947*t47062*t47067*2.5E1;
                double t47068 = exp(-t47078);
                double t47069 = Cc5*t46910*t46911;
                double t47070 = Cc6*c*t46910*t46916;
                double t47071 = Cc4*c*t46904;
                double t47072 = t47070+t47071+t47069+1.0;
                double t47073 = 1.0/t47072;
                double t47074 = Cc1*(1.0/1.0E3);
                double t47075 = Cc3*t46910*t46911*(1.0/1.0E3);
                double t47076 = Cc2*c*t46904*(1.0/1.0E3);
                double t47077 = t47074+t47075+t47076;
                double t47079 = Cx*(1.0E1/7.0);
                double t47081 = t47073*t47077;
                double t47080 = Cc0-t47081+t47079;
                double t47082 = log(t47008);
                v_rho_b[Q] += scale * -t46934-t46978-t46903*(t47032+t47033+t47035+t47054-t47063+t47028-t47064-t47056-t47065-t47066+t46996*t46997*t47012*t47062*t47082*(3.0/2.0)+(t46926*t46996*t46997*t47062*(alph*t46919*t47006*(t46945*t46992*t46986*t46987*t47030*(7.0/4.8E1)-t46945*t46991*t46949*t46986*t46987*t47012*(1.0/8.0)+alph*t46990*t46919*t46947*t46948*t46984*t46985*t47029*(7.0/1.92E2)-alph*t46990*t46919*t46947*t46983*t46948*t46985*t47012*t47031*(1.0/3.2E1)+alph*t46981*t46919*t46947*t46983*t46948*t46984*t46985*t47002*t47061*(1.0/1.28E2))*2.0-alph*t46919*t47000*1.0/(t47005*t47005)*(t46946*t46947*t46948*t46984*t46985*t47001*t47002*t47029*(7.0/9.6E1)+alph*t46945*t46990*t46919*t46992*t46986*t46987*t47030*(7.0/2.4E1)-alph*t46945*t46990*t46919*t46991*t46949*t46986*t46987*t47012*(1.0/4.0)-t46946*t46947*t46983*t46948*t46985*t47001*t47002*t47012*t47031*(1.0/1.6E1)+t46981*t46946*1.0/(t46982*t46982*t46982)*t46947*t46983*t46948*t46984*t46985*t47001*t47061*(1.0/3.2E1)+alph*t46945*t46981*t46919*t46991*t46992*t46986*t46987*t47002*t47061*(1.0/8.0))*2.0)*(1.0/2.0))/t47008+nu*t46926*t46945*t46991*t46986*t46987*t47068*(t47073*(Cc2*c*t46915*(1.0/3.0E3)+Cc3*t46910*t47016*(1.0/1.5E3))-1.0/(t47072*t47072)*t47077*(Cc4*c*t46915*(1.0/3.0)+Cc5*t46910*t47016*(2.0/3.0)+Cc6*c*t46910*t46993))*(1.0/1.6E1)-nu*t46926*t46945*t46986*t46987*t47030*t47080*t47068*(7.0/4.8E1)-nu*t46945*t46991*t46986*t46987*t47012*t47080*t47068*(1.0/1.6E1)+nu*t46926*t46945*t46991*t46986*t46987*t47080*t47068*(1.0/pow(t46903,1.1E1/3.0)*t46945*t46947*t47062*(2.0E2/3.0)+t46926*t46945*t46947*t47012*t47067*5.0E1)*(1.0/1.6E1))+t46926*t46996*t46997*t47062*t47082*(1.0/2.0)+t46940*t46943*t46938*t46939*(t46934-t46988)-nu*t46926*t46945*t46991*t46986*t46987*t47080*t47068*(1.0/1.6E1);
            }
            
            // v_gamma_aa
            if (deriv >= 1) {
                double t47084 = rho_a+rho_b;
                double t47085 = 1.0/t47084;
                double t47086 = rho_a-rho_b;
                double t47087 = t47085*t47086;
                double t47088 = 1.0/bet;
                double t47089 = t47087+1.0;
                double t47090 = pow(t47089,2.0/3.0);
                double t47091 = t47090*(1.0/2.0);
                double t47092 = -t47087+1.0;
                double t47093 = pow(t47092,2.0/3.0);
                double t47094 = t47093*(1.0/2.0);
                double t47095 = t47091+t47094;
                double t47096 = 1.0/pow(t47084,1.0/3.0);
                double t47097 = c*t47096;
                double t47098 = sqrt(t47097);
                double t47099 = pow(t47097,3.0/2.0);
                double t47100 = c*c;
                double t47101 = 1.0/pow(t47084,2.0/3.0);
                double t47102 = 1.0/c0p;
                double t47103 = b1p*t47098;
                double t47104 = b3p*t47099;
                double t47105 = b4p*t47100*t47101;
                double t47106 = b2p*c*t47096;
                double t47107 = t47103+t47104+t47105+t47106;
                double t47108 = 1.0/t47107;
                double t47109 = t47102*t47108*(1.0/2.0);
                double t47110 = t47109+1.0;
                double t47111 = log(t47110);
                double t47112 = a1p*c*t47096;
                double t47113 = t47112+1.0;
                double t47114 = c0p*t47111*t47113*2.0;
                double t47115 = t47086*t47086;
                double t47116 = two_13*2.0;
                double t47117 = t47116-2.0;
                double t47118 = 1.0/t47117;
                double t47119 = 1.0/(t47084*t47084*t47084*t47084);
                double t47120 = t47115*t47115;
                double t47121 = pow(t47089,4.0/3.0);
                double t47122 = pow(t47092,4.0/3.0);
                double t47123 = t47121+t47122-2.0;
                double t47124 = gamma_ab*2.0;
                double t47125 = gamma_aa+gamma_bb+t47124;
                double t47126 = 1.0/(bet*bet);
                double t47127 = 1.0/(k*k);
                double t47128 = 1.0/(pi_m12*pi_m12*pi_m12*pi_m12);
                double t47129 = 1.0/(t47095*t47095*t47095);
                double t47130 = 1.0/c0f;
                double t47131 = b1f*t47098;
                double t47132 = b3f*t47099;
                double t47133 = b4f*t47100*t47101;
                double t47134 = b2f*c*t47096;
                double t47135 = t47131+t47132+t47133+t47134;
                double t47136 = 1.0/t47135;
                double t47137 = t47130*t47136*(1.0/2.0);
                double t47138 = t47137+1.0;
                double t47139 = log(t47138);
                double t47140 = a1f*c*t47096;
                double t47141 = t47140+1.0;
                double t47168 = c0f*t47141*t47139*2.0;
                double t47142 = t47114-t47168;
                double t47143 = 1.0/d2fz0;
                double t47144 = 1.0/Aa;
                double t47145 = b1a*t47098;
                double t47146 = b3a*t47099;
                double t47147 = b4a*t47100*t47101;
                double t47148 = b2a*c*t47096;
                double t47149 = t47145+t47146+t47147+t47148;
                double t47150 = 1.0/t47149;
                double t47151 = t47150*t47144*(1.0/2.0);
                double t47152 = t47151+1.0;
                double t47153 = log(t47152);
                double t47154 = a1a*c*t47096;
                double t47155 = t47154+1.0;
                double t47156 = t47120*t47119;
                double t47157 = t47156-1.0;
                double t47158 = Aa*t47123*t47143*t47153*t47118*t47155*t47157*2.0;
                double t47169 = t47120*t47123*t47142*t47118*t47119;
                double t47159 = t47114+t47158-t47169;
                double t47160 = alph*t47126*t47129*t47159*2.0;
                double t47161 = exp(t47160);
                double t47162 = t47161-1.0;
                double t47163 = 1.0/pow(t47084,1.4E1/3.0);
                double t47164 = 1.0/(t47095*t47095*t47095*t47095);
                double t47165 = t47125*t47125;
                double t47166 = 1.0/k;
                double t47167 = 1.0/(pi_m12*pi_m12);
                double t47170 = 1.0/t47162;
                double t47171 = 1.0/pow(t47084,7.0/3.0);
                double t47172 = 1.0/(t47095*t47095);
                double t47173 = alph*alph;
                double t47174 = 1.0/(t47162*t47162);
                double t47175 = t47126*t47127*t47163*t47128*t47164*t47173*t47165*t47174*(1.0/6.4E1);
                double t47176 = alph*t47125*t47170*t47171*t47172*t47166*t47167*t47088*(1.0/8.0);
                double t47177 = t47175+t47176+1.0;
                double t47178 = 1.0/t47177;
                double t47179 = t47125*t47171*t47172*t47166*t47167*(1.0/1.6E1);
                double t47180 = alph*t47170*t47127*t47163*t47128*t47164*t47165*t47088*(1.0/1.28E2);
                double t47181 = t47180+t47179;
                double t47182 = gamma_aa*2.0;
                double t47183 = gamma_ab*4.0;
                double t47184 = gamma_bb*2.0;
                double t47185 = t47182+t47183+t47184;
                double t47186 = t47095*t47095;
                double t47187 = 1.0/pow(t47084,8.0/3.0);
                double t47188 = exp(t47125*t47127*t47186*t47187*-2.5E1);
                double t47189 = Cx*(1.0E1/7.0);
                double t47190 = Cc1*(1.0/1.0E3);
                double t47191 = Cc3*t47100*t47101*(1.0/1.0E3);
                double t47192 = Cc2*c*t47096*(1.0/1.0E3);
                double t47193 = t47190+t47191+t47192;
                double t47194 = Cc5*t47100*t47101;
                double t47195 = Cc6*c*t47100*t47085;
                double t47196 = Cc4*c*t47096;
                double t47197 = t47194+t47195+t47196+1.0;
                double t47198 = 1.0/t47197;
                double t47199 = Cc0+t47189-t47193*t47198;
                v_gamma_aa[Q] += scale * t47084*(((bet*bet)*t47095*t47186*(alph*t47088*t47178*(t47171*t47172*t47166*t47167*(1.0/1.6E1)+alph*t47170*t47127*t47163*t47128*t47164*t47185*t47088*(1.0/1.28E2))*2.0-alph*t47181*1.0/(t47177*t47177)*t47088*(alph*t47170*t47171*t47172*t47166*t47167*t47088*(1.0/8.0)+t47126*t47127*t47163*t47128*t47164*t47173*t47174*t47185*(1.0/6.4E1))*2.0)*(1.0/2.0))/(alph*(alph*t47181*t47088*t47178*2.0+1.0))-nu*t47171*t47166*t47095*t47167*t47188*t47199*(1.0/1.6E1)+1.0/(k*k*k)*nu*t47125*1.0/(t47084*t47084*t47084*t47084*t47084)*t47095*t47167*t47186*t47188*t47199*(2.5E1/1.6E1));
            }
            
            // v_gamma_ab
            if (deriv >= 1) {
                double t47201 = rho_a+rho_b;
                double t47202 = 1.0/t47201;
                double t47203 = rho_a-rho_b;
                double t47204 = t47202*t47203;
                double t47205 = 1.0/bet;
                double t47206 = t47204+1.0;
                double t47207 = pow(t47206,2.0/3.0);
                double t47208 = t47207*(1.0/2.0);
                double t47209 = -t47204+1.0;
                double t47210 = pow(t47209,2.0/3.0);
                double t47211 = t47210*(1.0/2.0);
                double t47212 = t47211+t47208;
                double t47213 = 1.0/pow(t47201,1.0/3.0);
                double t47214 = c*t47213;
                double t47215 = sqrt(t47214);
                double t47216 = pow(t47214,3.0/2.0);
                double t47217 = c*c;
                double t47218 = 1.0/pow(t47201,2.0/3.0);
                double t47219 = 1.0/c0p;
                double t47220 = b1p*t47215;
                double t47221 = b3p*t47216;
                double t47222 = b4p*t47217*t47218;
                double t47223 = b2p*c*t47213;
                double t47224 = t47220+t47221+t47222+t47223;
                double t47225 = 1.0/t47224;
                double t47226 = t47225*t47219*(1.0/2.0);
                double t47227 = t47226+1.0;
                double t47228 = log(t47227);
                double t47229 = a1p*c*t47213;
                double t47230 = t47229+1.0;
                double t47231 = c0p*t47230*t47228*2.0;
                double t47232 = t47203*t47203;
                double t47233 = two_13*2.0;
                double t47234 = t47233-2.0;
                double t47235 = 1.0/t47234;
                double t47236 = 1.0/(t47201*t47201*t47201*t47201);
                double t47237 = t47232*t47232;
                double t47238 = pow(t47206,4.0/3.0);
                double t47239 = pow(t47209,4.0/3.0);
                double t47240 = t47238+t47239-2.0;
                double t47241 = gamma_ab*2.0;
                double t47242 = gamma_aa+gamma_bb+t47241;
                double t47243 = 1.0/(bet*bet);
                double t47244 = 1.0/(k*k);
                double t47245 = 1.0/(pi_m12*pi_m12*pi_m12*pi_m12);
                double t47246 = 1.0/(t47212*t47212*t47212);
                double t47247 = 1.0/c0f;
                double t47248 = b1f*t47215;
                double t47249 = b3f*t47216;
                double t47250 = b4f*t47217*t47218;
                double t47251 = b2f*c*t47213;
                double t47252 = t47250+t47251+t47248+t47249;
                double t47253 = 1.0/t47252;
                double t47254 = t47253*t47247*(1.0/2.0);
                double t47255 = t47254+1.0;
                double t47256 = log(t47255);
                double t47257 = a1f*c*t47213;
                double t47258 = t47257+1.0;
                double t47285 = c0f*t47256*t47258*2.0;
                double t47259 = t47231-t47285;
                double t47260 = 1.0/d2fz0;
                double t47261 = 1.0/Aa;
                double t47262 = b1a*t47215;
                double t47263 = b3a*t47216;
                double t47264 = b4a*t47217*t47218;
                double t47265 = b2a*c*t47213;
                double t47266 = t47262+t47263+t47264+t47265;
                double t47267 = 1.0/t47266;
                double t47268 = t47261*t47267*(1.0/2.0);
                double t47269 = t47268+1.0;
                double t47270 = log(t47269);
                double t47271 = a1a*c*t47213;
                double t47272 = t47271+1.0;
                double t47273 = t47236*t47237;
                double t47274 = t47273-1.0;
                double t47275 = Aa*t47240*t47260*t47270*t47235*t47272*t47274*2.0;
                double t47286 = t47240*t47235*t47236*t47237*t47259;
                double t47276 = t47231+t47275-t47286;
                double t47277 = alph*t47243*t47246*t47276*2.0;
                double t47278 = exp(t47277);
                double t47279 = t47278-1.0;
                double t47280 = 1.0/pow(t47201,1.4E1/3.0);
                double t47281 = 1.0/(t47212*t47212*t47212*t47212);
                double t47282 = t47242*t47242;
                double t47283 = 1.0/k;
                double t47284 = 1.0/(pi_m12*pi_m12);
                double t47287 = 1.0/t47279;
                double t47288 = 1.0/pow(t47201,7.0/3.0);
                double t47289 = 1.0/(t47212*t47212);
                double t47290 = alph*alph;
                double t47291 = 1.0/(t47279*t47279);
                double t47292 = t47243*t47244*t47280*t47245*t47281*t47290*t47282*t47291*(1.0/6.4E1);
                double t47293 = alph*t47205*t47242*t47283*t47284*t47287*t47288*t47289*(1.0/8.0);
                double t47294 = t47292+t47293+1.0;
                double t47295 = 1.0/t47294;
                double t47296 = t47242*t47283*t47284*t47288*t47289*(1.0/1.6E1);
                double t47297 = alph*t47205*t47244*t47280*t47245*t47281*t47282*t47287*(1.0/1.28E2);
                double t47298 = t47296+t47297;
                double t47299 = gamma_aa*4.0;
                double t47300 = gamma_ab*8.0;
                double t47301 = gamma_bb*4.0;
                double t47302 = t47300+t47301+t47299;
                double t47303 = t47212*t47212;
                double t47304 = 1.0/pow(t47201,8.0/3.0);
                double t47305 = exp(t47303*t47304*t47242*t47244*-2.5E1);
                double t47306 = Cx*(1.0E1/7.0);
                double t47307 = Cc1*(1.0/1.0E3);
                double t47308 = Cc3*t47217*t47218*(1.0/1.0E3);
                double t47309 = Cc2*c*t47213*(1.0/1.0E3);
                double t47310 = t47307+t47308+t47309;
                double t47311 = Cc5*t47217*t47218;
                double t47312 = Cc6*c*t47202*t47217;
                double t47313 = Cc4*c*t47213;
                double t47314 = t47311+t47312+t47313+1.0;
                double t47315 = 1.0/t47314;
                double t47316 = Cc0+t47306-t47310*t47315;
                v_gamma_ab[Q] += scale * t47201*(((bet*bet)*t47212*t47303*(alph*t47205*t47295*(t47283*t47284*t47288*t47289*(1.0/8.0)+alph*t47302*t47205*t47244*t47280*t47245*t47281*t47287*(1.0/1.28E2))*2.0-alph*t47205*1.0/(t47294*t47294)*t47298*(alph*t47205*t47283*t47284*t47287*t47288*t47289*(1.0/4.0)+t47302*t47243*t47244*t47280*t47245*t47281*t47290*t47291*(1.0/6.4E1))*2.0)*(1.0/2.0))/(alph*(alph*t47205*t47295*t47298*2.0+1.0))-nu*t47212*t47305*t47316*t47283*t47284*t47288*(1.0/8.0)+1.0/(k*k*k)*nu*1.0/(t47201*t47201*t47201*t47201*t47201)*t47212*t47303*t47242*t47305*t47316*t47284*(2.5E1/8.0));
            }
            
            // v_gamma_bb
            if (deriv >= 1) {
                double t47318 = rho_a+rho_b;
                double t47319 = 1.0/t47318;
                double t47320 = rho_a-rho_b;
                double t47321 = t47320*t47319;
                double t47322 = 1.0/bet;
                double t47323 = t47321+1.0;
                double t47324 = pow(t47323,2.0/3.0);
                double t47325 = t47324*(1.0/2.0);
                double t47326 = -t47321+1.0;
                double t47327 = pow(t47326,2.0/3.0);
                double t47328 = t47327*(1.0/2.0);
                double t47329 = t47325+t47328;
                double t47330 = 1.0/pow(t47318,1.0/3.0);
                double t47331 = c*t47330;
                double t47332 = sqrt(t47331);
                double t47333 = pow(t47331,3.0/2.0);
                double t47334 = c*c;
                double t47335 = 1.0/pow(t47318,2.0/3.0);
                double t47336 = 1.0/c0p;
                double t47337 = b1p*t47332;
                double t47338 = b3p*t47333;
                double t47339 = b4p*t47334*t47335;
                double t47340 = b2p*c*t47330;
                double t47341 = t47340+t47337+t47338+t47339;
                double t47342 = 1.0/t47341;
                double t47343 = t47342*t47336*(1.0/2.0);
                double t47344 = t47343+1.0;
                double t47345 = log(t47344);
                double t47346 = a1p*c*t47330;
                double t47347 = t47346+1.0;
                double t47348 = c0p*t47345*t47347*2.0;
                double t47349 = t47320*t47320;
                double t47350 = two_13*2.0;
                double t47351 = t47350-2.0;
                double t47352 = 1.0/t47351;
                double t47353 = 1.0/(t47318*t47318*t47318*t47318);
                double t47354 = t47349*t47349;
                double t47355 = pow(t47323,4.0/3.0);
                double t47356 = pow(t47326,4.0/3.0);
                double t47357 = t47355+t47356-2.0;
                double t47358 = gamma_ab*2.0;
                double t47359 = gamma_aa+gamma_bb+t47358;
                double t47360 = 1.0/(bet*bet);
                double t47361 = 1.0/(k*k);
                double t47362 = 1.0/(pi_m12*pi_m12*pi_m12*pi_m12);
                double t47363 = 1.0/(t47329*t47329*t47329);
                double t47364 = 1.0/c0f;
                double t47365 = b1f*t47332;
                double t47366 = b3f*t47333;
                double t47367 = b4f*t47334*t47335;
                double t47368 = b2f*c*t47330;
                double t47369 = t47365+t47366+t47367+t47368;
                double t47370 = 1.0/t47369;
                double t47371 = t47370*t47364*(1.0/2.0);
                double t47372 = t47371+1.0;
                double t47373 = log(t47372);
                double t47374 = a1f*c*t47330;
                double t47375 = t47374+1.0;
                double t47402 = c0f*t47373*t47375*2.0;
                double t47376 = -t47402+t47348;
                double t47377 = 1.0/d2fz0;
                double t47378 = 1.0/Aa;
                double t47379 = b1a*t47332;
                double t47380 = b3a*t47333;
                double t47381 = b4a*t47334*t47335;
                double t47382 = b2a*c*t47330;
                double t47383 = t47380+t47381+t47382+t47379;
                double t47384 = 1.0/t47383;
                double t47385 = t47384*t47378*(1.0/2.0);
                double t47386 = t47385+1.0;
                double t47387 = log(t47386);
                double t47388 = a1a*c*t47330;
                double t47389 = t47388+1.0;
                double t47390 = t47353*t47354;
                double t47391 = t47390-1.0;
                double t47392 = Aa*t47352*t47391*t47357*t47377*t47387*t47389*2.0;
                double t47393 = t47392+t47348-t47352*t47353*t47354*t47357*t47376;
                double t47394 = alph*t47360*t47363*t47393*2.0;
                double t47395 = exp(t47394);
                double t47396 = t47395-1.0;
                double t47397 = 1.0/pow(t47318,1.4E1/3.0);
                double t47398 = 1.0/(t47329*t47329*t47329*t47329);
                double t47399 = t47359*t47359;
                double t47400 = 1.0/k;
                double t47401 = 1.0/(pi_m12*pi_m12);
                double t47403 = 1.0/pow(t47318,7.0/3.0);
                double t47404 = 1.0/(t47329*t47329);
                double t47405 = t47402-t47348;
                double t47406 = t47405*t47352*t47353*t47354*t47357;
                double t47407 = t47406+t47392+t47348;
                double t47408 = alph*t47360*t47407*t47363*2.0;
                double t47409 = exp(t47408);
                double t47410 = t47409-1.0;
                double t47411 = 1.0/t47410;
                double t47412 = alph*alph;
                double t47413 = alph*t47400*t47401*t47411*t47322*t47403*t47404*t47359*(1.0/8.0);
                double t47414 = t47400*t47401*t47403*t47404*t47359*(1.0/1.6E1);
                double t47415 = 1.0/(t47410*t47410);
                double t47416 = gamma_aa*2.0;
                double t47417 = gamma_ab*4.0;
                double t47418 = gamma_bb*2.0;
                double t47419 = t47416+t47417+t47418;
                double t47420 = t47412*t47360*t47361*t47415*t47362*t47397*t47398*t47399*(1.0/6.4E1);
                double t47421 = t47420+t47413+1.0;
                double t47422 = t47329*t47329;
                double t47423 = 1.0/pow(t47318,8.0/3.0);
                double t47424 = exp(t47422*t47423*t47361*t47359*-2.5E1);
                double t47425 = Cx*(1.0E1/7.0);
                double t47426 = Cc1*(1.0/1.0E3);
                double t47427 = Cc3*t47334*t47335*(1.0/1.0E3);
                double t47428 = Cc2*c*t47330*(1.0/1.0E3);
                double t47429 = t47426+t47427+t47428;
                double t47430 = Cc5*t47334*t47335;
                double t47431 = Cc6*c*t47334*t47319;
                double t47432 = Cc4*c*t47330;
                double t47433 = t47430+t47431+t47432+1.0;
                double t47434 = 1.0/t47433;
                double t47435 = Cc0+t47425-t47434*t47429;
                v_gamma_bb[Q] += scale * t47318*(((bet*bet)*t47422*t47329*((alph*t47322*(t47400*t47401*t47403*t47404*(1.0/1.6E1)+alph*t47411*t47322*t47361*t47362*t47419*t47397*t47398*(1.0/1.28E2))*2.0)/t47421-alph*t47322*1.0/(t47421*t47421)*(t47414+alph*t47411*t47322*t47361*t47362*t47397*t47398*t47399*(1.0/1.28E2))*(alph*t47400*t47401*t47411*t47322*t47403*t47404*(1.0/8.0)+t47412*t47360*t47361*t47415*t47362*t47419*t47397*t47398*(1.0/6.4E1))*2.0)*(1.0/2.0))/(alph*((alph*t47322*(t47414+(alph*t47322*t47361*t47362*t47397*t47398*t47399*(1.0/1.28E2))/t47396)*2.0)/(t47413+t47412*t47360*t47361*t47362*1.0/(t47396*t47396)*t47397*t47398*t47399*(1.0/6.4E1)+1.0)+1.0))-nu*t47400*t47401*t47403*t47424*t47435*t47329*(1.0/1.6E1)+1.0/(k*k*k)*nu*t47401*t47422*t47424*1.0/(t47318*t47318*t47318*t47318*t47318)*t47435*t47329*t47359*(2.5E1/1.6E1));
            }
            
        }
    }
}

}
