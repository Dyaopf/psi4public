#include <libmints/vector.h>
#include "VWN3_Cfunctional.h"
#include "utility.h"
#include <cmath>

using namespace psi;

namespace psi {

VWN3_CFunctional::VWN3_CFunctional()
{
    name_ = "VWN3_C";
    description_ = "    VWN3 Correlation Functional\n";
    citation_ = "    S.H. Vosko, L. Wilk, and M. Nusair, Can. J. Phys., 58, 1200-1211, 1980\n";
    alpha_ = 1.0;
    omega_ = 0.0;
    lrc_ = false;
    gga_ = false;
    meta_ = false;
    parameters_["c"] =   6.2035049089939986E-01;
    parameters_["EcP_1"] =   3.1090699999999999E-02;
    parameters_["EcP_2"] =  -1.0498000000000000E-01;
    parameters_["EcP_3"] =   3.7274400000000001E+00;
    parameters_["EcP_4"] =   1.2935200000000000E+01;
    parameters_["EcF_1"] =   1.5545349999999999E-02;
    parameters_["EcF_2"] =  -3.2500000000000001E-01;
    parameters_["EcF_3"] =   7.0604199999999997E+00;
    parameters_["EcF_4"] =   1.8057800000000000E+01;
    parameters_["two_13"] =   1.2599210498948732E+00;
}
VWN3_CFunctional::~VWN3_CFunctional()
{
}
void VWN3_CFunctional::compute_functional(const std::map<std::string,SharedVector>& in, const std::map<std::string,SharedVector>& out, int npoints, int deriv, double alpha)
{
    double c = parameters_["c"];
    double EcP_1 = parameters_["EcP_1"];
    double EcP_2 = parameters_["EcP_2"];
    double EcP_3 = parameters_["EcP_3"];
    double EcP_4 = parameters_["EcP_4"];
    double EcF_1 = parameters_["EcF_1"];
    double EcF_2 = parameters_["EcF_2"];
    double EcF_3 = parameters_["EcF_3"];
    double EcF_4 = parameters_["EcF_4"];
    double two_13 = parameters_["two_13"];

    // Overall scale factor
    double scale = alpha_ * alpha;

    // => Input variables <= //

    double* rho_ap = NULL;
    double* rho_bp = NULL;
    double* gamma_aap = NULL;
    double* gamma_abp = NULL;
    double* gamma_bbp = NULL;
    double* tau_ap = NULL;
    double* tau_bp = NULL;

    if (true) {
        rho_ap = in.find("RHO_A")->second->pointer();
        rho_bp = in.find("RHO_B")->second->pointer();
    }
    if (gga_) {  
        gamma_aap = in.find("GAMMA_AA")->second->pointer();
        gamma_abp = in.find("GAMMA_AB")->second->pointer();
        gamma_bbp = in.find("GAMMA_BB")->second->pointer();
    } 
    if (meta_)  {
        tau_ap = in.find("TAU_A")->second->pointer();
        tau_bp = in.find("TAU_B")->second->pointer();
    }

    // => Outut variables <= //

    double* v = NULL;

    double* v_rho_a = NULL;
    double* v_rho_b = NULL;
    double* v_gamma_aa = NULL;
    double* v_gamma_ab = NULL;
    double* v_gamma_bb = NULL;
    double* v_tau_a = NULL;
    double* v_tau_b = NULL;
     
    double* v_rho_a_rho_a = NULL;
    double* v_rho_a_rho_b = NULL;
    double* v_rho_b_rho_b = NULL;
    double* v_gamma_aa_gamma_aa = NULL;
    double* v_gamma_aa_gamma_ab = NULL;
    double* v_gamma_aa_gamma_bb = NULL;
    double* v_gamma_ab_gamma_ab = NULL;
    double* v_gamma_ab_gamma_bb = NULL;
    double* v_gamma_bb_gamma_bb = NULL;
    double* v_tau_a_tau_a = NULL;
    double* v_tau_a_tau_b = NULL;
    double* v_tau_b_tau_b = NULL;
    double* v_rho_a_gamma_aa = NULL;
    double* v_rho_a_gamma_ab = NULL;
    double* v_rho_a_gamma_bb = NULL;
    double* v_rho_b_gamma_aa = NULL;
    double* v_rho_b_gamma_ab = NULL;
    double* v_rho_b_gamma_bb = NULL;
    double* v_rho_a_tau_a = NULL;
    double* v_rho_a_tau_b = NULL;
    double* v_rho_b_tau_a = NULL;
    double* v_rho_b_tau_b = NULL;
    double* v_gamma_aa_tau_a = NULL;
    double* v_gamma_aa_tau_b = NULL;
    double* v_gamma_ab_tau_a = NULL;
    double* v_gamma_ab_tau_b = NULL;
    double* v_gamma_bb_tau_a = NULL;
    double* v_gamma_bb_tau_b = NULL;

    if (deriv >= 0) {
        v = out.find("V")->second->pointer();
    } 
    if (deriv >= 1) {
        if (true) {
            v_rho_a = out.find("V_RHO_A")->second->pointer();
            v_rho_b = out.find("V_RHO_B")->second->pointer();
        }
        if (gga_) {
            v_gamma_aa = out.find("V_GAMMA_AA")->second->pointer();
            v_gamma_ab = out.find("V_GAMMA_AB")->second->pointer();
            v_gamma_bb = out.find("V_GAMMA_BB")->second->pointer();
        }
        if (meta_) {    
            v_tau_a = out.find("V_TAU_A")->second->pointer();
            v_tau_b = out.find("V_TAU_B")->second->pointer();
        }
    }
    if (deriv >= 2) {
        if (true) {
            v_rho_a_rho_a = out.find("V_RHO_A_RHO_A")->second->pointer();
            v_rho_a_rho_b = out.find("V_RHO_A_RHO_B")->second->pointer();
            v_rho_b_rho_b = out.find("V_RHO_B_RHO_B")->second->pointer();
        }
        if (gga_) {
            v_gamma_aa_gamma_aa = out.find("V_GAMMA_AA_GAMMA_AA")->second->pointer();
            v_gamma_aa_gamma_ab = out.find("V_GAMMA_AA_GAMMA_AB")->second->pointer();
            v_gamma_aa_gamma_bb = out.find("V_GAMMA_AA_GAMMA_BB")->second->pointer();
            v_gamma_ab_gamma_ab = out.find("V_GAMMA_AB_GAMMA_AB")->second->pointer();
            v_gamma_ab_gamma_bb = out.find("V_GAMMA_AB_GAMMA_BB")->second->pointer();
            v_gamma_bb_gamma_bb = out.find("V_GAMMA_BB_GAMMA_BB")->second->pointer();
        }
        if (meta_) {
            v_tau_a_tau_a = out.find("V_TAU_A_TAU_A")->second->pointer();
            v_tau_a_tau_b = out.find("V_TAU_A_TAU_B")->second->pointer();
            v_tau_b_tau_b = out.find("V_TAU_B_TAU_B")->second->pointer();
        }
        if (gga_) {
            v_rho_a_gamma_aa = out.find("V_RHO_A_GAMMA_AA")->second->pointer();
            v_rho_a_gamma_ab = out.find("V_RHO_A_GAMMA_AB")->second->pointer();
            v_rho_a_gamma_bb = out.find("V_RHO_A_GAMMA_BB")->second->pointer();
            v_rho_b_gamma_aa = out.find("V_RHO_B_GAMMA_AA")->second->pointer();
            v_rho_b_gamma_ab = out.find("V_RHO_B_GAMMA_AB")->second->pointer();
            v_rho_b_gamma_bb = out.find("V_RHO_B_GAMMA_BB")->second->pointer();
        }
        if (meta_) {
            v_rho_a_tau_a = out.find("V_RHO_A_TAU_A")->second->pointer();
            v_rho_a_tau_b = out.find("V_RHO_A_TAU_B")->second->pointer();
            v_rho_b_tau_a = out.find("V_RHO_B_TAU_A")->second->pointer();
            v_rho_b_tau_b = out.find("V_RHO_B_TAU_B")->second->pointer();
        }
        if (gga_ && meta_) {
            v_gamma_aa_tau_a = out.find("V_GAMMA_AA_TAU_A")->second->pointer();
            v_gamma_aa_tau_b = out.find("V_GAMMA_AA_TAU_B")->second->pointer();
            v_gamma_ab_tau_a = out.find("V_GAMMA_AB_TAU_A")->second->pointer();
            v_gamma_ab_tau_b = out.find("V_GAMMA_AB_TAU_B")->second->pointer();
            v_gamma_bb_tau_a = out.find("V_GAMMA_BB_TAU_A")->second->pointer();
            v_gamma_bb_tau_b = out.find("V_GAMMA_BB_TAU_B")->second->pointer();
        }
    }

    // => Loop over points <= //

    for (int Q = 0; Q < npoints; Q++) {

        // Input variables 
        double rho_a;
        double rho_b;
        double gamma_aa;
        double gamma_ab;
        double gamma_bb;
        double tau_a;
        double tau_b;

        if (true) {
            rho_a = rho_ap[Q];
            rho_b = rho_bp[Q];
        }        
        if (gga_) {
            gamma_aa = gamma_aap[Q];
            gamma_ab = gamma_abp[Q];
            gamma_bb = gamma_bbp[Q];
        }        
        if (meta_) {
            tau_a = tau_ap[Q];
            tau_b = tau_bp[Q];
        }        

        // Definitions (asymptotics to prevent numerical problems)
        if (rho_a < lsda_cutoff_ && rho_b < lsda_cutoff_) {
            continue;
        } else if (rho_a < lsda_cutoff_) {
            // v
            if (deriv >= 0) {
                double t848 = rho_a+rho_b;
                double t849 = 1.0/pow(t848,1.0/3.0);
                double t850 = c*t849;
                double t851 = sqrt(t850);
                double t852 = EcP_4*4.0;
                double t853 = EcP_3*EcP_3;
                double t854 = t852-t853;
                double t855 = EcP_2-t851;
                double t856 = EcP_3*t851;
                double t857 = EcP_4+t850+t856;
                double t858 = 1.0/t857;
                double t859 = sqrt(t854);
                double t860 = t851*2.0;
                double t861 = EcP_3+t860;
                double t862 = 1.0/t861;
                double t863 = t859*t862;
                double t864 = atan(t863);
                double t865 = 1.0/sqrt(t854);
                double t866 = EcF_4*4.0;
                double t867 = EcF_3*EcF_3;
                double t868 = t866-t867;
                double t869 = EcF_2-t851;
                double t870 = EcF_3*t851;
                double t871 = EcF_4+t850+t870;
                double t872 = 1.0/t871;
                double t873 = sqrt(t868);
                double t874 = EcF_3+t860;
                double t875 = 1.0/t874;
                double t876 = t873*t875;
                double t877 = atan(t876);
                double t878 = 1.0/sqrt(t868);
                double t879 = c*t849*t858;
                double t880 = log(t879);
                double t881 = EcP_3*t864*t865*2.0;
                double t882 = t855*t855;
                double t883 = t858*t882;
                double t884 = log(t883);
                double t885 = EcP_2*4.0;
                double t886 = EcP_3*2.0;
                double t887 = t885+t886;
                double t888 = t864*t865*t887;
                double t889 = t884+t888;
                double t890 = EcP_2*EcP_2;
                double t891 = EcP_2*EcP_3;
                double t892 = EcP_4+t890+t891;
                double t893 = 1.0/t892;
                double t894 = t880+t881-EcP_2*EcP_3*t889*t893;
                double t895 = EcP_1*t894;
                v[Q] += scale * t848*(t895-((pow(2.0,1.0/3.0)*2.0-2.0)*(t895-EcF_1*(log(c*t849*t872)+EcF_3*t877*t878*2.0-(EcF_2*EcF_3*(log((t869*t869)*t872)+t877*t878*(EcF_2*4.0+EcF_3*2.0)))/(EcF_4+EcF_2*EcF_2+EcF_2*EcF_3))))/(two_13*2.0-2.0));
            }
            
            // v_rho_a
            if (deriv >= 1) {
                double t897 = rho_a+rho_b;
                double t898 = 1.0/pow(t897,1.0/3.0);
                double t899 = c*t898;
                double t900 = sqrt(t899);
                double t901 = EcP_4*4.0;
                double t902 = EcP_3*EcP_3;
                double t903 = t901-t902;
                double t904 = EcP_2-t900;
                double t905 = EcP_3*t900;
                double t906 = EcP_4+t899+t905;
                double t907 = 1.0/t906;
                double t908 = sqrt(t903);
                double t909 = t900*2.0;
                double t910 = EcP_3+t909;
                double t911 = 1.0/t910;
                double t912 = t908*t911;
                double t913 = atan(t912);
                double t914 = 1.0/sqrt(t903);
                double t915 = 1.0/pow(t897,4.0/3.0);
                double t916 = c*t915*(1.0/3.0);
                double t917 = 1.0/sqrt(t899);
                double t918 = EcP_3*c*t915*t917*(1.0/6.0);
                double t919 = t916+t918;
                double t920 = t904*t904;
                double t921 = 1.0/(t906*t906);
                double t922 = EcP_2*4.0;
                double t923 = EcP_3*2.0;
                double t924 = t922+t923;
                double t925 = 1.0/(t910*t910);
                double t926 = EcP_2*EcP_2;
                double t927 = EcP_2*EcP_3;
                double t928 = EcP_4+t926+t927;
                double t929 = 1.0/t928;
                double t930 = t903*t925;
                double t931 = t930+1.0;
                double t932 = 1.0/t931;
                double t933 = 1.0/c;
                double t934 = EcF_3*t900;
                double t935 = EcF_4+t899+t934;
                double t936 = pow(t897,1.0/3.0);
                double t937 = EcF_3*c*t915*t917*(1.0/6.0);
                double t938 = t916+t937;
                double t939 = EcF_2-t900;
                double t940 = 1.0/(t935*t935);
                double t941 = 1.0/t935;
                double t942 = EcF_3+t909;
                double t943 = 1.0/(t942*t942);
                double t944 = EcF_4*4.0;
                double t945 = EcF_3*EcF_3;
                double t946 = t944-t945;
                double t947 = t943*t946;
                double t948 = t947+1.0;
                double t949 = 1.0/t948;
                double t950 = c*t907*t915*(1.0/3.0);
                double t951 = t950-c*t898*t919*t921;
                double t952 = t906*t933*t936*t951;
                double t953 = t919*t920*t921;
                double t954 = c*t904*t907*t915*t917*(1.0/3.0);
                double t955 = t953+t954;
                double t956 = 1.0/(t904*t904);
                double t957 = t906*t955*t956;
                double t958 = c*t915*t917*t924*t925*t932*(1.0/3.0);
                double t959 = t957+t958;
                double t960 = EcP_2*EcP_3*t929*t959;
                double t961 = t952+t960-EcP_3*c*t915*t917*t925*t932*(2.0/3.0);
                double t962 = EcP_1*t961;
                double t963 = pow(2.0,1.0/3.0);
                double t964 = t963*2.0;
                double t965 = t964-2.0;
                double t966 = two_13*2.0;
                double t967 = t966-2.0;
                double t968 = 1.0/t967;
                double t969 = t939*t939;
                double t970 = sqrt(t946);
                double t971 = 1.0/t942;
                double t972 = t970*t971;
                double t973 = atan(t972);
                double t974 = 1.0/sqrt(t946);
                double t975 = EcF_2*4.0;
                double t976 = EcF_3*2.0;
                double t977 = t975+t976;
                double t978 = EcF_2*EcF_2;
                double t979 = EcF_2*EcF_3;
                double t980 = EcF_4+t978+t979;
                double t981 = 1.0/t980;
                double t982 = c*t898*t907;
                double t983 = log(t982);
                double t984 = EcP_3*t913*t914*2.0;
                double t985 = t907*t920;
                double t986 = log(t985);
                double t987 = t913*t914*t924;
                double t988 = t986+t987;
                double t989 = t983+t984-EcP_2*EcP_3*t929*t988;
                double t990 = EcP_1*t989;
                v_rho_a[Q] += scale * t990-t897*(t962-t965*t968*(t962-EcF_1*(EcF_2*EcF_3*t981*(t935*1.0/(t939*t939)*(t938*t940*t969+c*t915*t917*t939*t941*(1.0/3.0))+c*t915*t917*t943*t949*t977*(1.0/3.0))+t933*t935*t936*(c*t915*t941*(1.0/3.0)-c*t898*t938*t940)-EcF_3*c*t915*t917*t943*t949*(2.0/3.0))))-t965*t968*(t990-EcF_1*(log(c*t898*t941)+EcF_3*t973*t974*2.0-EcF_2*EcF_3*t981*(log(t941*t969)+t973*t974*t977)));
            }
            
            // v_rho_b
            if (deriv >= 1) {
                double t992 = rho_a+rho_b;
                double t993 = 1.0/pow(t992,1.0/3.0);
                double t994 = c*t993;
                double t995 = sqrt(t994);
                double t996 = EcP_4*4.0;
                double t997 = EcP_3*EcP_3;
                double t998 = t996-t997;
                double t999 = EcP_2-t995;
                double t1000 = EcP_3*t995;
                double t1001 = EcP_4+t1000+t994;
                double t1002 = 1.0/t1001;
                double t1003 = sqrt(t998);
                double t1004 = t995*2.0;
                double t1005 = EcP_3+t1004;
                double t1006 = 1.0/t1005;
                double t1007 = t1003*t1006;
                double t1008 = atan(t1007);
                double t1009 = 1.0/sqrt(t998);
                double t1010 = 1.0/pow(t992,4.0/3.0);
                double t1011 = c*t1010*(1.0/3.0);
                double t1012 = 1.0/sqrt(t994);
                double t1013 = EcP_3*c*t1010*t1012*(1.0/6.0);
                double t1014 = t1011+t1013;
                double t1015 = t999*t999;
                double t1016 = 1.0/(t1001*t1001);
                double t1017 = EcP_2*4.0;
                double t1018 = EcP_3*2.0;
                double t1019 = t1017+t1018;
                double t1020 = 1.0/(t1005*t1005);
                double t1021 = EcP_2*EcP_2;
                double t1022 = EcP_2*EcP_3;
                double t1023 = EcP_4+t1021+t1022;
                double t1024 = 1.0/t1023;
                double t1025 = t1020*t998;
                double t1026 = t1025+1.0;
                double t1027 = 1.0/t1026;
                double t1028 = 1.0/c;
                double t1029 = EcF_3*t995;
                double t1030 = EcF_4+t1029+t994;
                double t1031 = pow(t992,1.0/3.0);
                double t1032 = EcF_3*c*t1010*t1012*(1.0/6.0);
                double t1033 = t1011+t1032;
                double t1034 = EcF_2-t995;
                double t1035 = 1.0/(t1030*t1030);
                double t1036 = 1.0/t1030;
                double t1037 = EcF_3+t1004;
                double t1038 = 1.0/(t1037*t1037);
                double t1039 = EcF_4*4.0;
                double t1040 = EcF_3*EcF_3;
                double t1041 = t1040-t1039;
                double t1042 = t1041*t1038;
                double t1043 = t1042-1.0;
                double t1044 = 1.0/t1043;
                double t1045 = c*t1010*t1002*(1.0/3.0);
                double t1046 = t1045-c*t1014*t1016*t993;
                double t1047 = t1001*t1031*t1028*t1046;
                double t1048 = t1014*t1015*t1016;
                double t1049 = c*t1010*t1002*t1012*t999*(1.0/3.0);
                double t1050 = t1048+t1049;
                double t1051 = 1.0/(t999*t999);
                double t1052 = t1001*t1050*t1051;
                double t1053 = c*t1010*t1020*t1012*t1027*t1019*(1.0/3.0);
                double t1054 = t1052+t1053;
                double t1055 = EcP_2*EcP_3*t1024*t1054;
                double t1056 = t1055+t1047-EcP_3*c*t1010*t1020*t1012*t1027*(2.0/3.0);
                double t1057 = EcP_1*t1056;
                double t1058 = pow(2.0,1.0/3.0);
                double t1059 = t1058*2.0;
                double t1060 = t1059-2.0;
                double t1061 = two_13*2.0;
                double t1062 = t1061-2.0;
                double t1063 = 1.0/t1062;
                double t1064 = -t1040+t1039;
                double t1065 = t1034*t1034;
                double t1066 = sqrt(t1064);
                double t1067 = 1.0/t1037;
                double t1068 = t1066*t1067;
                double t1069 = atan(t1068);
                double t1070 = 1.0/sqrt(t1064);
                double t1071 = EcF_2*4.0;
                double t1072 = EcF_3*2.0;
                double t1073 = t1071+t1072;
                double t1074 = EcF_2*EcF_2;
                double t1075 = EcF_2*EcF_3;
                double t1076 = EcF_4+t1074+t1075;
                double t1077 = 1.0/t1076;
                double t1078 = c*t1002*t993;
                double t1079 = log(t1078);
                double t1080 = EcP_3*t1008*t1009*2.0;
                double t1081 = t1002*t1015;
                double t1082 = log(t1081);
                double t1083 = t1008*t1009*t1019;
                double t1084 = t1082+t1083;
                double t1085 = t1080+t1079-EcP_2*EcP_3*t1024*t1084;
                double t1086 = EcP_1*t1085;
                v_rho_b[Q] += scale * t1086-t992*(t1057-t1060*t1063*(t1057-EcF_1*(EcF_2*EcF_3*t1077*(t1030*1.0/(t1034*t1034)*(t1033*t1035*t1065+c*t1010*t1012*t1034*t1036*(1.0/3.0))-c*t1010*t1012*t1044*t1073*t1038*(1.0/3.0))+t1030*t1031*t1028*(c*t1010*t1036*(1.0/3.0)-c*t1033*t1035*t993)+EcF_3*c*t1010*t1012*t1044*t1038*(2.0/3.0))))-t1060*t1063*(t1086-EcF_1*(log(c*t1036*t993)+EcF_3*t1070*t1069*2.0-EcF_2*EcF_3*t1077*(log(t1036*t1065)+t1070*t1073*t1069)));
            }
            
            // v_rho_a_rho_a
            if (deriv >= 2) {
                double t1093 = rho_a+rho_b;
                double t1094 = 1.0/pow(t1093,1.0/3.0);
                double t1095 = c*t1094;
                double t1096 = 1.0/pow(t1093,4.0/3.0);
                double t1097 = sqrt(t1095);
                double t1098 = EcP_3*t1097;
                double t1099 = EcP_4+t1095+t1098;
                double t1100 = c*t1096*(1.0/3.0);
                double t1101 = 1.0/sqrt(t1095);
                double t1102 = EcP_3*c*t1096*t1101*(1.0/6.0);
                double t1103 = t1100+t1102;
                double t1104 = EcP_2-t1097;
                double t1105 = 1.0/(t1099*t1099);
                double t1106 = 1.0/t1099;
                double t1107 = t1097*2.0;
                double t1108 = EcP_3+t1107;
                double t1109 = 1.0/(t1108*t1108);
                double t1110 = EcP_4*4.0;
                double t1111 = EcP_3*EcP_3;
                double t1112 = t1110-t1111;
                double t1113 = t1112*t1109;
                double t1114 = t1113+1.0;
                double t1115 = 1.0/t1114;
                double t1116 = 1.0/c;
                double t1117 = c*t1096*t1106*(1.0/3.0);
                double t1120 = c*t1094*t1103*t1105;
                double t1118 = -t1120+t1117;
                double t1119 = pow(t1093,1.0/3.0);
                double t1121 = 1.0/pow(t1093,7.0/3.0);
                double t1122 = EcP_2*EcP_2;
                double t1123 = EcP_2*EcP_3;
                double t1124 = EcP_4+t1122+t1123;
                double t1125 = 1.0/t1124;
                double t1126 = t1104*t1104;
                double t1127 = t1103*t1105*t1126;
                double t1128 = c*t1096*t1101*t1104*t1106*(1.0/3.0);
                double t1129 = t1127+t1128;
                double t1130 = 1.0/(t1104*t1104);
                double t1131 = c*t1121*(4.0/9.0);
                double t1132 = EcP_3*c*t1101*t1121*(2.0/9.0);
                double t1133 = c*c;
                double t1134 = 1.0/pow(t1093,8.0/3.0);
                double t1135 = 1.0/pow(t1095,3.0/2.0);
                double t1180 = EcP_3*t1133*t1134*t1135*(1.0/3.6E1);
                double t1136 = t1131+t1132-t1180;
                double t1137 = t1103*t1103;
                double t1138 = 1.0/(t1099*t1099*t1099);
                double t1139 = EcP_2*4.0;
                double t1140 = EcP_3*2.0;
                double t1141 = t1140+t1139;
                double t1142 = 1.0/(t1108*t1108*t1108);
                double t1143 = 1.0/(t1108*t1108*t1108*t1108*t1108);
                double t1144 = 1.0/(t1114*t1114);
                double t1145 = EcF_3*t1097;
                double t1146 = EcF_4+t1095+t1145;
                double t1147 = EcF_3*c*t1096*t1101*(1.0/6.0);
                double t1148 = t1100+t1147;
                double t1149 = 1.0/t1146;
                double t1150 = c*t1096*t1149*(1.0/3.0);
                double t1151 = 1.0/(t1146*t1146);
                double t1206 = c*t1094*t1151*t1148;
                double t1152 = t1150-t1206;
                double t1153 = 1.0/pow(t1093,2.0/3.0);
                double t1154 = EcF_2-t1097;
                double t1155 = 1.0/(t1154*t1154);
                double t1156 = t1154*t1154;
                double t1157 = EcF_3*c*t1101*t1121*(2.0/9.0);
                double t1158 = t1131+t1157-EcF_3*t1133*t1134*t1135*(1.0/3.6E1);
                double t1159 = t1148*t1148;
                double t1160 = 1.0/(t1146*t1146*t1146);
                double t1161 = EcF_3+t1107;
                double t1162 = EcF_2*4.0;
                double t1163 = EcF_3*2.0;
                double t1164 = t1162+t1163;
                double t1165 = 1.0/(t1161*t1161);
                double t1166 = EcF_4*4.0;
                double t1167 = EcF_3*EcF_3;
                double t1168 = t1166-t1167;
                double t1169 = t1165*t1168;
                double t1170 = t1169+1.0;
                double t1171 = 1.0/t1170;
                double t1172 = t1151*t1156*t1148;
                double t1173 = c*t1096*t1101*t1154*t1149*(1.0/3.0);
                double t1174 = t1172+t1173;
                double t1175 = 1.0/(t1161*t1161*t1161);
                double t1176 = 1.0/(t1161*t1161*t1161*t1161*t1161);
                double t1177 = 1.0/(t1170*t1170);
                double t1178 = t1103*t1116*t1118*t1119;
                double t1179 = c*t1121*t1106*(4.0/9.0);
                double t1181 = c*t1094*t1137*t1138*2.0;
                double t1182 = t1181+t1179-c*t1096*t1103*t1105*(2.0/3.0)-c*t1094*t1105*t1136;
                double t1183 = t1099*t1116*t1119*t1182;
                double t1184 = t1103*t1130*t1129;
                double t1185 = c*t1121*t1106*(1.0/1.8E1);
                double t1186 = t1126*t1137*t1138*2.0;
                double t1187 = t1104*t1106*t1133*t1134*t1135*(1.0/1.8E1);
                double t1188 = c*t1096*t1101*t1103*t1104*t1105*(2.0/3.0);
                double t1189 = t1185+t1186+t1187+t1188-t1105*t1126*t1136-c*t1101*t1121*t1104*t1106*(4.0/9.0);
                double t1190 = c*t1101*t1121*t1141*t1115*t1109*(4.0/9.0);
                double t1191 = 1.0/(t1104*t1104*t1104);
                double t1192 = c*t1096*t1099*t1101*t1191*t1129*(1.0/3.0);
                double t1193 = c*t1112*t1121*t1141*t1143*t1144*(2.0/9.0);
                double t1194 = t1190+t1192+t1184+t1193-t1099*t1130*t1189-c*t1121*t1141*t1115*t1142*(2.0/9.0)-t1141*t1115*t1133*t1134*t1135*t1109*(1.0/1.8E1);
                double t1195 = EcP_2*EcP_3*t1125*t1194;
                double t1196 = EcP_3*c*t1121*t1115*t1142*(4.0/9.0);
                double t1197 = EcP_3*t1115*t1133*t1134*t1135*t1109*(1.0/9.0);
                double t1198 = t1183+t1195+t1178+t1196+t1197-t1099*t1116*t1153*t1118*(1.0/3.0)-EcP_3*c*t1101*t1121*t1115*t1109*(8.0/9.0)-EcP_3*c*t1112*t1121*t1143*t1144*(4.0/9.0);
                double t1199 = EcP_1*t1198;
                double t1200 = pow(2.0,1.0/3.0);
                double t1201 = t1200*2.0;
                double t1202 = t1201-2.0;
                double t1203 = two_13*2.0;
                double t1204 = t1203-2.0;
                double t1205 = 1.0/t1204;
                double t1207 = EcF_2*EcF_2;
                double t1208 = EcF_2*EcF_3;
                double t1209 = EcF_4+t1207+t1208;
                double t1210 = 1.0/t1209;
                double t1211 = t1099*t1116*t1118*t1119;
                double t1212 = t1099*t1130*t1129;
                double t1213 = c*t1096*t1101*t1141*t1115*t1109*(1.0/3.0);
                double t1214 = t1212+t1213;
                double t1215 = EcP_2*EcP_3*t1125*t1214;
                double t1216 = t1211+t1215-EcP_3*c*t1096*t1101*t1115*t1109*(2.0/3.0);
                v_rho_a_rho_a[Q] += scale * EcP_1*t1216*-2.0+t1093*(t1199-t1202*t1205*(t1199-EcF_1*(t1116*t1119*t1146*(c*t1121*t1149*(4.0/9.0)-c*t1094*t1151*t1158+c*t1094*t1160*t1159*2.0-c*t1096*t1151*t1148*(2.0/3.0))-t1116*t1152*t1153*t1146*(1.0/3.0)+t1116*t1152*t1119*t1148+EcF_2*EcF_3*t1210*(-t1146*t1155*(c*t1121*t1149*(1.0/1.8E1)-t1151*t1156*t1158+t1160*t1156*t1159*2.0-c*t1101*t1121*t1154*t1149*(4.0/9.0)+t1133*t1134*t1135*t1154*t1149*(1.0/1.8E1)+c*t1096*t1101*t1151*t1154*t1148*(2.0/3.0))+t1155*t1174*t1148-c*t1121*t1171*t1164*t1175*(2.0/9.0)+c*t1101*t1121*t1171*t1164*t1165*(4.0/9.0)+c*t1121*t1164*t1176*t1168*t1177*(2.0/9.0)-t1133*t1134*t1135*t1171*t1164*t1165*(1.0/1.8E1)+c*t1096*t1101*1.0/(t1154*t1154*t1154)*t1146*t1174*(1.0/3.0))+EcF_3*c*t1121*t1171*t1175*(4.0/9.0)-EcF_3*c*t1101*t1121*t1171*t1165*(8.0/9.0)-EcF_3*c*t1121*t1176*t1168*t1177*(4.0/9.0)+EcF_3*t1133*t1134*t1135*t1171*t1165*(1.0/9.0))))+t1202*t1205*(EcP_1*t1216-EcF_1*(t1116*t1152*t1119*t1146+EcF_2*EcF_3*t1210*(t1146*t1155*t1174+c*t1096*t1101*t1171*t1164*t1165*(1.0/3.0))-EcF_3*c*t1096*t1101*t1171*t1165*(2.0/3.0)))*2.0;
            }
            
            // v_rho_a_rho_b
            if (deriv >= 2) {
                double t1218 = rho_a+rho_b;
                double t1219 = 1.0/pow(t1218,1.0/3.0);
                double t1220 = c*t1219;
                double t1221 = 1.0/pow(t1218,4.0/3.0);
                double t1222 = sqrt(t1220);
                double t1223 = EcP_3*t1222;
                double t1224 = EcP_4+t1220+t1223;
                double t1225 = c*t1221*(1.0/3.0);
                double t1226 = 1.0/sqrt(t1220);
                double t1227 = EcP_3*c*t1221*t1226*(1.0/6.0);
                double t1228 = t1225+t1227;
                double t1229 = EcP_2-t1222;
                double t1230 = 1.0/(t1224*t1224);
                double t1231 = 1.0/t1224;
                double t1232 = t1222*2.0;
                double t1233 = EcP_3+t1232;
                double t1234 = 1.0/(t1233*t1233);
                double t1235 = EcP_4*4.0;
                double t1236 = EcP_3*EcP_3;
                double t1237 = t1235-t1236;
                double t1238 = t1234*t1237;
                double t1239 = t1238+1.0;
                double t1240 = 1.0/t1239;
                double t1241 = 1.0/c;
                double t1242 = c*t1221*t1231*(1.0/3.0);
                double t1245 = c*t1230*t1219*t1228;
                double t1243 = t1242-t1245;
                double t1244 = pow(t1218,1.0/3.0);
                double t1246 = 1.0/pow(t1218,7.0/3.0);
                double t1247 = EcP_2*EcP_2;
                double t1248 = EcP_2*EcP_3;
                double t1249 = EcP_4+t1247+t1248;
                double t1250 = 1.0/t1249;
                double t1251 = t1229*t1229;
                double t1252 = t1230*t1251*t1228;
                double t1253 = c*t1221*t1231*t1226*t1229*(1.0/3.0);
                double t1254 = t1252+t1253;
                double t1255 = 1.0/(t1229*t1229);
                double t1256 = c*t1246*(4.0/9.0);
                double t1257 = EcP_3*c*t1226*t1246*(2.0/9.0);
                double t1258 = c*c;
                double t1259 = 1.0/pow(t1218,8.0/3.0);
                double t1260 = 1.0/pow(t1220,3.0/2.0);
                double t1305 = EcP_3*t1260*t1258*t1259*(1.0/3.6E1);
                double t1261 = t1256+t1257-t1305;
                double t1262 = t1228*t1228;
                double t1263 = 1.0/(t1224*t1224*t1224);
                double t1264 = EcP_2*4.0;
                double t1265 = EcP_3*2.0;
                double t1266 = t1264+t1265;
                double t1267 = 1.0/(t1233*t1233*t1233);
                double t1268 = 1.0/(t1233*t1233*t1233*t1233*t1233);
                double t1269 = 1.0/(t1239*t1239);
                double t1270 = EcF_3*t1222;
                double t1271 = EcF_4+t1220+t1270;
                double t1272 = EcF_3*c*t1221*t1226*(1.0/6.0);
                double t1273 = t1225+t1272;
                double t1274 = 1.0/t1271;
                double t1275 = c*t1221*t1274*(1.0/3.0);
                double t1276 = 1.0/(t1271*t1271);
                double t1331 = c*t1219*t1273*t1276;
                double t1277 = t1275-t1331;
                double t1278 = 1.0/pow(t1218,2.0/3.0);
                double t1279 = EcF_2-t1222;
                double t1280 = 1.0/(t1279*t1279);
                double t1281 = t1279*t1279;
                double t1282 = EcF_3*c*t1226*t1246*(2.0/9.0);
                double t1283 = t1282+t1256-EcF_3*t1260*t1258*t1259*(1.0/3.6E1);
                double t1284 = t1273*t1273;
                double t1285 = 1.0/(t1271*t1271*t1271);
                double t1286 = EcF_3+t1232;
                double t1287 = EcF_2*4.0;
                double t1288 = EcF_3*2.0;
                double t1289 = t1287+t1288;
                double t1290 = 1.0/(t1286*t1286);
                double t1291 = EcF_4*4.0;
                double t1292 = EcF_3*EcF_3;
                double t1293 = t1291-t1292;
                double t1294 = t1290*t1293;
                double t1295 = t1294+1.0;
                double t1296 = 1.0/t1295;
                double t1297 = t1281*t1273*t1276;
                double t1298 = c*t1221*t1226*t1274*t1279*(1.0/3.0);
                double t1299 = t1297+t1298;
                double t1300 = 1.0/(t1286*t1286*t1286);
                double t1301 = 1.0/(t1286*t1286*t1286*t1286*t1286);
                double t1302 = 1.0/(t1295*t1295);
                double t1303 = t1241*t1243*t1244*t1228;
                double t1304 = c*t1231*t1246*(4.0/9.0);
                double t1306 = c*t1262*t1263*t1219*2.0;
                double t1307 = t1304+t1306-c*t1221*t1230*t1228*(2.0/3.0)-c*t1230*t1261*t1219;
                double t1308 = t1241*t1224*t1244*t1307;
                double t1309 = t1254*t1228*t1255;
                double t1310 = c*t1231*t1246*(1.0/1.8E1);
                double t1311 = t1251*t1262*t1263*2.0;
                double t1312 = t1231*t1260*t1229*t1258*t1259*(1.0/1.8E1);
                double t1313 = c*t1221*t1230*t1226*t1228*t1229*(2.0/3.0);
                double t1314 = t1310+t1311+t1312+t1313-t1230*t1251*t1261-c*t1231*t1226*t1246*t1229*(4.0/9.0);
                double t1315 = c*t1240*t1234*t1226*t1246*t1266*(4.0/9.0);
                double t1316 = 1.0/(t1229*t1229*t1229);
                double t1317 = c*t1221*t1224*t1226*t1254*t1316*(1.0/3.0);
                double t1318 = c*t1237*t1246*t1266*t1268*t1269*(2.0/9.0);
                double t1319 = t1315+t1317+t1309+t1318-t1224*t1255*t1314-c*t1240*t1246*t1266*t1267*(2.0/9.0)-t1240*t1260*t1234*t1266*t1258*t1259*(1.0/1.8E1);
                double t1320 = EcP_2*EcP_3*t1250*t1319;
                double t1321 = EcP_3*c*t1240*t1246*t1267*(4.0/9.0);
                double t1322 = EcP_3*t1240*t1260*t1234*t1258*t1259*(1.0/9.0);
                double t1323 = t1320+t1303+t1321+t1322+t1308-t1241*t1224*t1243*t1278*(1.0/3.0)-EcP_3*c*t1240*t1234*t1226*t1246*(8.0/9.0)-EcP_3*c*t1237*t1246*t1268*t1269*(4.0/9.0);
                double t1324 = EcP_1*t1323;
                double t1325 = pow(2.0,1.0/3.0);
                double t1326 = t1325*2.0;
                double t1327 = t1326-2.0;
                double t1328 = two_13*2.0;
                double t1329 = t1328-2.0;
                double t1330 = 1.0/t1329;
                double t1332 = EcF_2*EcF_2;
                double t1333 = EcF_2*EcF_3;
                double t1334 = EcF_4+t1332+t1333;
                double t1335 = 1.0/t1334;
                double t1336 = t1241*t1224*t1243*t1244;
                double t1337 = t1224*t1254*t1255;
                double t1338 = c*t1221*t1240*t1234*t1226*t1266*(1.0/3.0);
                double t1339 = t1337+t1338;
                double t1340 = EcP_2*EcP_3*t1250*t1339;
                double t1341 = t1340+t1336-EcP_3*c*t1221*t1240*t1234*t1226*(2.0/3.0);
                v_rho_a_rho_b[Q] += scale * EcP_1*t1341*-2.0+t1218*(t1324-t1330*t1327*(t1324-EcF_1*(t1241*t1244*t1271*(c*t1246*t1274*(4.0/9.0)-c*t1221*t1273*t1276*(2.0/3.0)-c*t1219*t1283*t1276+c*t1219*t1284*t1285*2.0)+t1241*t1244*t1273*t1277-t1241*t1271*t1277*t1278*(1.0/3.0)+EcF_2*EcF_3*t1335*(-t1271*t1280*(c*t1246*t1274*(1.0/1.8E1)-t1281*t1283*t1276+t1281*t1284*t1285*2.0-c*t1226*t1246*t1274*t1279*(4.0/9.0)+t1260*t1274*t1258*t1259*t1279*(1.0/1.8E1)+c*t1221*t1226*t1273*t1276*t1279*(2.0/3.0))+t1280*t1273*t1299-c*t1246*t1296*t1289*t1300*(2.0/9.0)+c*t1226*t1290*t1246*t1296*t1289*(4.0/9.0)+c*t1246*t1293*t1289*t1301*t1302*(2.0/9.0)-t1260*t1290*t1258*t1259*t1296*t1289*(1.0/1.8E1)+c*t1221*t1226*t1271*1.0/(t1279*t1279*t1279)*t1299*(1.0/3.0))+EcF_3*c*t1246*t1296*t1300*(4.0/9.0)-EcF_3*c*t1226*t1290*t1246*t1296*(8.0/9.0)-EcF_3*c*t1246*t1293*t1301*t1302*(4.0/9.0)+EcF_3*t1260*t1290*t1258*t1259*t1296*(1.0/9.0))))+t1330*t1327*(EcP_1*t1341-EcF_1*(t1241*t1244*t1271*t1277+EcF_2*EcF_3*t1335*(t1271*t1280*t1299+c*t1221*t1226*t1290*t1296*t1289*(1.0/3.0))-EcF_3*c*t1221*t1226*t1290*t1296*(2.0/3.0)))*2.0;
            }
            
            // v_rho_b_rho_b
            if (deriv >= 2) {
                double t1343 = rho_a+rho_b;
                double t1344 = 1.0/pow(t1343,1.0/3.0);
                double t1345 = c*t1344;
                double t1346 = 1.0/pow(t1343,4.0/3.0);
                double t1347 = sqrt(t1345);
                double t1348 = EcP_3*t1347;
                double t1349 = EcP_4+t1345+t1348;
                double t1350 = c*t1346*(1.0/3.0);
                double t1351 = 1.0/sqrt(t1345);
                double t1352 = EcP_3*c*t1351*t1346*(1.0/6.0);
                double t1353 = t1350+t1352;
                double t1354 = EcP_2-t1347;
                double t1355 = 1.0/(t1349*t1349);
                double t1356 = 1.0/t1349;
                double t1357 = t1347*2.0;
                double t1358 = EcP_3+t1357;
                double t1359 = 1.0/(t1358*t1358);
                double t1360 = EcP_4*4.0;
                double t1361 = EcP_3*EcP_3;
                double t1362 = t1360-t1361;
                double t1363 = t1362*t1359;
                double t1364 = t1363+1.0;
                double t1365 = 1.0/t1364;
                double t1366 = 1.0/c;
                double t1367 = c*t1346*t1356*(1.0/3.0);
                double t1370 = c*t1344*t1353*t1355;
                double t1368 = -t1370+t1367;
                double t1369 = pow(t1343,1.0/3.0);
                double t1371 = 1.0/pow(t1343,7.0/3.0);
                double t1372 = EcP_2*EcP_2;
                double t1373 = EcP_2*EcP_3;
                double t1374 = EcP_4+t1372+t1373;
                double t1375 = 1.0/t1374;
                double t1376 = t1354*t1354;
                double t1377 = t1353*t1355*t1376;
                double t1378 = c*t1351*t1354*t1346*t1356*(1.0/3.0);
                double t1379 = t1377+t1378;
                double t1380 = 1.0/(t1354*t1354);
                double t1381 = c*t1371*(4.0/9.0);
                double t1382 = EcP_3*c*t1351*t1371*(2.0/9.0);
                double t1383 = c*c;
                double t1384 = 1.0/pow(t1343,8.0/3.0);
                double t1385 = 1.0/pow(t1345,3.0/2.0);
                double t1430 = EcP_3*t1383*t1384*t1385*(1.0/3.6E1);
                double t1386 = t1381+t1382-t1430;
                double t1387 = t1353*t1353;
                double t1388 = 1.0/(t1349*t1349*t1349);
                double t1389 = EcP_2*4.0;
                double t1390 = EcP_3*2.0;
                double t1391 = t1390+t1389;
                double t1392 = 1.0/(t1358*t1358*t1358);
                double t1393 = 1.0/(t1358*t1358*t1358*t1358*t1358);
                double t1394 = 1.0/(t1364*t1364);
                double t1395 = EcF_3*t1347;
                double t1396 = EcF_4+t1345+t1395;
                double t1397 = EcF_3*c*t1351*t1346*(1.0/6.0);
                double t1398 = t1350+t1397;
                double t1399 = 1.0/t1396;
                double t1400 = c*t1346*t1399*(1.0/3.0);
                double t1401 = 1.0/(t1396*t1396);
                double t1456 = c*t1344*t1398*t1401;
                double t1402 = t1400-t1456;
                double t1403 = 1.0/pow(t1343,2.0/3.0);
                double t1404 = EcF_2-t1347;
                double t1405 = 1.0/(t1404*t1404);
                double t1406 = t1404*t1404;
                double t1407 = EcF_3*c*t1351*t1371*(2.0/9.0);
                double t1408 = t1381+t1407-EcF_3*t1383*t1384*t1385*(1.0/3.6E1);
                double t1409 = t1398*t1398;
                double t1410 = 1.0/(t1396*t1396*t1396);
                double t1411 = EcF_3+t1357;
                double t1412 = EcF_2*4.0;
                double t1413 = EcF_3*2.0;
                double t1414 = t1412+t1413;
                double t1415 = 1.0/(t1411*t1411);
                double t1416 = EcF_4*4.0;
                double t1417 = EcF_3*EcF_3;
                double t1418 = t1416-t1417;
                double t1419 = t1415*t1418;
                double t1420 = t1419+1.0;
                double t1421 = 1.0/t1420;
                double t1422 = t1398*t1401*t1406;
                double t1423 = c*t1351*t1346*t1399*t1404*(1.0/3.0);
                double t1424 = t1422+t1423;
                double t1425 = 1.0/(t1411*t1411*t1411);
                double t1426 = 1.0/(t1411*t1411*t1411*t1411*t1411);
                double t1427 = 1.0/(t1420*t1420);
                double t1428 = t1353*t1366*t1368*t1369;
                double t1429 = c*t1371*t1356*(4.0/9.0);
                double t1431 = c*t1344*t1387*t1388*2.0;
                double t1432 = t1431+t1429-c*t1353*t1346*t1355*(2.0/3.0)-c*t1344*t1355*t1386;
                double t1433 = t1366*t1349*t1369*t1432;
                double t1434 = t1353*t1380*t1379;
                double t1435 = c*t1371*t1356*(1.0/1.8E1);
                double t1436 = t1376*t1387*t1388*2.0;
                double t1437 = t1354*t1356*t1383*t1384*t1385*(1.0/1.8E1);
                double t1438 = c*t1351*t1353*t1354*t1346*t1355*(2.0/3.0);
                double t1439 = t1435+t1436+t1437+t1438-t1355*t1376*t1386-c*t1351*t1371*t1354*t1356*(4.0/9.0);
                double t1440 = c*t1351*t1371*t1391*t1365*t1359*(4.0/9.0);
                double t1441 = 1.0/(t1354*t1354*t1354);
                double t1442 = c*t1351*t1346*t1349*t1379*t1441*(1.0/3.0);
                double t1443 = c*t1362*t1371*t1391*t1393*t1394*(2.0/9.0);
                double t1444 = t1440+t1442+t1434+t1443-t1380*t1349*t1439-c*t1371*t1391*t1365*t1392*(2.0/9.0)-t1391*t1365*t1383*t1384*t1385*t1359*(1.0/1.8E1);
                double t1445 = EcP_2*EcP_3*t1375*t1444;
                double t1446 = EcP_3*c*t1371*t1365*t1392*(4.0/9.0);
                double t1447 = EcP_3*t1365*t1383*t1384*t1385*t1359*(1.0/9.0);
                double t1448 = t1433+t1445+t1428+t1446+t1447-t1366*t1349*t1368*t1403*(1.0/3.0)-EcP_3*c*t1351*t1371*t1365*t1359*(8.0/9.0)-EcP_3*c*t1362*t1371*t1393*t1394*(4.0/9.0);
                double t1449 = EcP_1*t1448;
                double t1450 = pow(2.0,1.0/3.0);
                double t1451 = t1450*2.0;
                double t1452 = t1451-2.0;
                double t1453 = two_13*2.0;
                double t1454 = t1453-2.0;
                double t1455 = 1.0/t1454;
                double t1457 = EcF_2*EcF_2;
                double t1458 = EcF_2*EcF_3;
                double t1459 = EcF_4+t1457+t1458;
                double t1460 = 1.0/t1459;
                double t1461 = t1366*t1349*t1368*t1369;
                double t1462 = t1380*t1349*t1379;
                double t1463 = c*t1351*t1346*t1391*t1365*t1359*(1.0/3.0);
                double t1464 = t1462+t1463;
                double t1465 = EcP_2*EcP_3*t1375*t1464;
                double t1466 = t1461+t1465-EcP_3*c*t1351*t1346*t1365*t1359*(2.0/3.0);
                v_rho_b_rho_b[Q] += scale * EcP_1*t1466*-2.0+t1343*(t1449-t1452*t1455*(t1449-EcF_1*(t1366*t1369*t1396*(c*t1371*t1399*(4.0/9.0)-c*t1346*t1398*t1401*(2.0/3.0)-c*t1344*t1401*t1408+c*t1344*t1410*t1409*2.0)+t1366*t1369*t1398*t1402-t1366*t1396*t1402*t1403*(1.0/3.0)+EcF_2*EcF_3*t1460*(-t1396*t1405*(c*t1371*t1399*(1.0/1.8E1)-t1401*t1406*t1408+t1410*t1406*t1409*2.0-c*t1351*t1371*t1399*t1404*(4.0/9.0)+t1383*t1384*t1385*t1399*t1404*(1.0/1.8E1)+c*t1351*t1346*t1398*t1401*t1404*(2.0/3.0))+t1398*t1405*t1424-c*t1371*t1421*t1414*t1425*(2.0/9.0)+c*t1351*t1371*t1421*t1414*t1415*(4.0/9.0)+c*t1371*t1414*t1426*t1418*t1427*(2.0/9.0)-t1383*t1384*t1385*t1421*t1414*t1415*(1.0/1.8E1)+c*t1351*t1346*t1396*1.0/(t1404*t1404*t1404)*t1424*(1.0/3.0))+EcF_3*c*t1371*t1421*t1425*(4.0/9.0)-EcF_3*c*t1351*t1371*t1421*t1415*(8.0/9.0)-EcF_3*c*t1371*t1426*t1418*t1427*(4.0/9.0)+EcF_3*t1383*t1384*t1385*t1421*t1415*(1.0/9.0))))+t1452*t1455*(EcP_1*t1466-EcF_1*(t1366*t1369*t1396*t1402+EcF_2*EcF_3*t1460*(t1396*t1405*t1424+c*t1351*t1346*t1421*t1414*t1415*(1.0/3.0))-EcF_3*c*t1351*t1346*t1421*t1415*(2.0/3.0)))*2.0;
            }
            
        } else if (rho_b < lsda_cutoff_) {
            // v
            if (deriv >= 0) {
                double t1493 = rho_a+rho_b;
                double t1494 = 1.0/pow(t1493,1.0/3.0);
                double t1495 = c*t1494;
                double t1496 = sqrt(t1495);
                double t1497 = EcP_4*4.0;
                double t1498 = EcP_3*EcP_3;
                double t1499 = t1497-t1498;
                double t1500 = EcP_2-t1496;
                double t1501 = EcP_3*t1496;
                double t1502 = EcP_4+t1495+t1501;
                double t1503 = 1.0/t1502;
                double t1504 = sqrt(t1499);
                double t1505 = t1496*2.0;
                double t1506 = EcP_3+t1505;
                double t1507 = 1.0/t1506;
                double t1508 = t1504*t1507;
                double t1509 = atan(t1508);
                double t1510 = 1.0/sqrt(t1499);
                double t1511 = EcF_4*4.0;
                double t1512 = EcF_3*EcF_3;
                double t1513 = t1511-t1512;
                double t1514 = EcF_2-t1496;
                double t1515 = EcF_3*t1496;
                double t1516 = EcF_4+t1495+t1515;
                double t1517 = 1.0/t1516;
                double t1518 = sqrt(t1513);
                double t1519 = EcF_3+t1505;
                double t1520 = 1.0/t1519;
                double t1521 = t1520*t1518;
                double t1522 = atan(t1521);
                double t1523 = 1.0/sqrt(t1513);
                double t1524 = c*t1494*t1503;
                double t1525 = log(t1524);
                double t1526 = EcP_3*t1510*t1509*2.0;
                double t1527 = t1500*t1500;
                double t1528 = t1503*t1527;
                double t1529 = log(t1528);
                double t1530 = EcP_2*4.0;
                double t1531 = EcP_3*2.0;
                double t1532 = t1530+t1531;
                double t1533 = t1510*t1532*t1509;
                double t1534 = t1533+t1529;
                double t1535 = EcP_2*EcP_2;
                double t1536 = EcP_2*EcP_3;
                double t1537 = EcP_4+t1535+t1536;
                double t1538 = 1.0/t1537;
                double t1539 = t1525+t1526-EcP_2*EcP_3*t1534*t1538;
                double t1540 = EcP_1*t1539;
                v[Q] += scale * t1493*(t1540-((pow(2.0,1.0/3.0)*2.0-2.0)*(t1540-EcF_1*(log(c*t1494*t1517)+EcF_3*t1522*t1523*2.0-(EcF_2*EcF_3*(log((t1514*t1514)*t1517)+t1522*t1523*(EcF_2*4.0+EcF_3*2.0)))/(EcF_4+EcF_2*EcF_2+EcF_2*EcF_3))))/(two_13*2.0-2.0));
            }
            
            // v_rho_a
            if (deriv >= 1) {
                double t1542 = rho_a+rho_b;
                double t1543 = 1.0/pow(t1542,1.0/3.0);
                double t1544 = c*t1543;
                double t1545 = sqrt(t1544);
                double t1546 = EcP_4*4.0;
                double t1547 = EcP_3*EcP_3;
                double t1548 = t1546-t1547;
                double t1549 = EcP_2-t1545;
                double t1550 = EcP_3*t1545;
                double t1551 = EcP_4+t1550+t1544;
                double t1552 = 1.0/t1551;
                double t1553 = sqrt(t1548);
                double t1554 = t1545*2.0;
                double t1555 = EcP_3+t1554;
                double t1556 = 1.0/t1555;
                double t1557 = t1553*t1556;
                double t1558 = atan(t1557);
                double t1559 = 1.0/sqrt(t1548);
                double t1560 = 1.0/pow(t1542,4.0/3.0);
                double t1561 = c*t1560*(1.0/3.0);
                double t1562 = 1.0/sqrt(t1544);
                double t1563 = EcP_3*c*t1560*t1562*(1.0/6.0);
                double t1564 = t1561+t1563;
                double t1565 = t1549*t1549;
                double t1566 = 1.0/(t1551*t1551);
                double t1567 = EcP_2*4.0;
                double t1568 = EcP_3*2.0;
                double t1569 = t1567+t1568;
                double t1570 = 1.0/(t1555*t1555);
                double t1571 = EcP_2*EcP_2;
                double t1572 = EcP_2*EcP_3;
                double t1573 = EcP_4+t1571+t1572;
                double t1574 = 1.0/t1573;
                double t1575 = t1570*t1548;
                double t1576 = t1575+1.0;
                double t1577 = 1.0/t1576;
                double t1578 = 1.0/c;
                double t1579 = EcF_3*t1545;
                double t1580 = EcF_4+t1544+t1579;
                double t1581 = pow(t1542,1.0/3.0);
                double t1582 = EcF_3*c*t1560*t1562*(1.0/6.0);
                double t1583 = t1561+t1582;
                double t1584 = EcF_2-t1545;
                double t1585 = 1.0/(t1580*t1580);
                double t1586 = 1.0/t1580;
                double t1587 = EcF_3+t1554;
                double t1588 = 1.0/(t1587*t1587);
                double t1589 = EcF_4*4.0;
                double t1590 = EcF_3*EcF_3;
                double t1591 = t1590-t1589;
                double t1592 = t1591*t1588;
                double t1593 = t1592-1.0;
                double t1594 = 1.0/t1593;
                double t1595 = c*t1560*t1552*(1.0/3.0);
                double t1596 = t1595-c*t1543*t1564*t1566;
                double t1597 = t1551*t1581*t1578*t1596;
                double t1598 = t1564*t1565*t1566;
                double t1599 = c*t1560*t1552*t1562*t1549*(1.0/3.0);
                double t1600 = t1598+t1599;
                double t1601 = 1.0/(t1549*t1549);
                double t1602 = t1551*t1600*t1601;
                double t1603 = c*t1560*t1570*t1562*t1577*t1569*(1.0/3.0);
                double t1604 = t1602+t1603;
                double t1605 = EcP_2*EcP_3*t1574*t1604;
                double t1606 = t1597+t1605-EcP_3*c*t1560*t1570*t1562*t1577*(2.0/3.0);
                double t1607 = EcP_1*t1606;
                double t1608 = pow(2.0,1.0/3.0);
                double t1609 = t1608*2.0;
                double t1610 = t1609-2.0;
                double t1611 = two_13*2.0;
                double t1612 = t1611-2.0;
                double t1613 = 1.0/t1612;
                double t1614 = -t1590+t1589;
                double t1615 = t1584*t1584;
                double t1616 = sqrt(t1614);
                double t1617 = 1.0/t1587;
                double t1618 = t1616*t1617;
                double t1619 = atan(t1618);
                double t1620 = 1.0/sqrt(t1614);
                double t1621 = EcF_2*4.0;
                double t1622 = EcF_3*2.0;
                double t1623 = t1621+t1622;
                double t1624 = EcF_2*EcF_2;
                double t1625 = EcF_2*EcF_3;
                double t1626 = EcF_4+t1624+t1625;
                double t1627 = 1.0/t1626;
                double t1628 = c*t1543*t1552;
                double t1629 = log(t1628);
                double t1630 = EcP_3*t1558*t1559*2.0;
                double t1631 = t1552*t1565;
                double t1632 = log(t1631);
                double t1633 = t1558*t1559*t1569;
                double t1634 = t1632+t1633;
                double t1635 = t1630+t1629-EcP_2*EcP_3*t1574*t1634;
                double t1636 = EcP_1*t1635;
                v_rho_a[Q] += scale * t1636-t1542*(t1607-t1610*t1613*(t1607-EcF_1*(EcF_2*EcF_3*t1627*(t1580*1.0/(t1584*t1584)*(t1583*t1585*t1615+c*t1560*t1562*t1584*t1586*(1.0/3.0))-c*t1560*t1562*t1594*t1588*t1623*(1.0/3.0))+t1580*t1581*t1578*(c*t1560*t1586*(1.0/3.0)-c*t1543*t1583*t1585)+EcF_3*c*t1560*t1562*t1594*t1588*(2.0/3.0))))-t1610*t1613*(t1636-EcF_1*(log(c*t1543*t1586)+EcF_3*t1620*t1619*2.0-EcF_2*EcF_3*t1627*(log(t1586*t1615)+t1620*t1623*t1619)));
            }
            
            // v_rho_b
            if (deriv >= 1) {
                double t1638 = rho_a+rho_b;
                double t1639 = 1.0/pow(t1638,1.0/3.0);
                double t1640 = c*t1639;
                double t1641 = sqrt(t1640);
                double t1642 = EcP_4*4.0;
                double t1643 = EcP_3*EcP_3;
                double t1644 = t1642-t1643;
                double t1645 = EcP_2-t1641;
                double t1646 = EcP_3*t1641;
                double t1647 = EcP_4+t1640+t1646;
                double t1648 = 1.0/t1647;
                double t1649 = sqrt(t1644);
                double t1650 = t1641*2.0;
                double t1651 = EcP_3+t1650;
                double t1652 = 1.0/t1651;
                double t1653 = t1652*t1649;
                double t1654 = atan(t1653);
                double t1655 = 1.0/sqrt(t1644);
                double t1656 = 1.0/pow(t1638,4.0/3.0);
                double t1657 = c*t1656*(1.0/3.0);
                double t1658 = 1.0/sqrt(t1640);
                double t1659 = EcP_3*c*t1656*t1658*(1.0/6.0);
                double t1660 = t1657+t1659;
                double t1661 = t1645*t1645;
                double t1662 = 1.0/(t1647*t1647);
                double t1663 = EcP_2*4.0;
                double t1664 = EcP_3*2.0;
                double t1665 = t1663+t1664;
                double t1666 = 1.0/(t1651*t1651);
                double t1667 = EcP_2*EcP_2;
                double t1668 = EcP_2*EcP_3;
                double t1669 = EcP_4+t1667+t1668;
                double t1670 = 1.0/t1669;
                double t1671 = t1644*t1666;
                double t1672 = t1671+1.0;
                double t1673 = 1.0/t1672;
                double t1674 = 1.0/c;
                double t1675 = EcF_3*t1641;
                double t1676 = EcF_4+t1640+t1675;
                double t1677 = pow(t1638,1.0/3.0);
                double t1678 = EcF_3*c*t1656*t1658*(1.0/6.0);
                double t1679 = t1657+t1678;
                double t1680 = EcF_2-t1641;
                double t1681 = 1.0/(t1676*t1676);
                double t1682 = 1.0/t1676;
                double t1683 = EcF_3+t1650;
                double t1684 = 1.0/(t1683*t1683);
                double t1685 = EcF_4*4.0;
                double t1686 = EcF_3*EcF_3;
                double t1687 = t1685-t1686;
                double t1688 = t1684*t1687;
                double t1689 = t1688+1.0;
                double t1690 = 1.0/t1689;
                double t1691 = c*t1656*t1648*(1.0/3.0);
                double t1692 = t1691-c*t1660*t1662*t1639;
                double t1693 = t1647*t1674*t1692*t1677;
                double t1694 = t1660*t1661*t1662;
                double t1695 = c*t1645*t1656*t1648*t1658*(1.0/3.0);
                double t1696 = t1694+t1695;
                double t1697 = 1.0/(t1645*t1645);
                double t1698 = t1647*t1696*t1697;
                double t1699 = c*t1673*t1656*t1665*t1666*t1658*(1.0/3.0);
                double t1700 = t1698+t1699;
                double t1701 = EcP_2*EcP_3*t1670*t1700;
                double t1702 = t1693+t1701-EcP_3*c*t1673*t1656*t1666*t1658*(2.0/3.0);
                double t1703 = EcP_1*t1702;
                double t1704 = pow(2.0,1.0/3.0);
                double t1705 = t1704*2.0;
                double t1706 = t1705-2.0;
                double t1707 = two_13*2.0;
                double t1708 = t1707-2.0;
                double t1709 = 1.0/t1708;
                double t1710 = t1680*t1680;
                double t1711 = sqrt(t1687);
                double t1712 = 1.0/t1683;
                double t1713 = t1711*t1712;
                double t1714 = atan(t1713);
                double t1715 = 1.0/sqrt(t1687);
                double t1716 = EcF_2*4.0;
                double t1717 = EcF_3*2.0;
                double t1718 = t1716+t1717;
                double t1719 = EcF_2*EcF_2;
                double t1720 = EcF_2*EcF_3;
                double t1721 = EcF_4+t1720+t1719;
                double t1722 = 1.0/t1721;
                double t1723 = c*t1639*t1648;
                double t1724 = log(t1723);
                double t1725 = EcP_3*t1654*t1655*2.0;
                double t1726 = t1661*t1648;
                double t1727 = log(t1726);
                double t1728 = t1654*t1655*t1665;
                double t1729 = t1727+t1728;
                double t1730 = t1724+t1725-EcP_2*EcP_3*t1670*t1729;
                double t1731 = EcP_1*t1730;
                v_rho_b[Q] += scale * t1731-t1638*(t1703-t1706*t1709*(t1703-EcF_1*(EcF_2*EcF_3*t1722*(1.0/(t1680*t1680)*t1676*(t1681*t1679*t1710+c*t1680*t1682*t1656*t1658*(1.0/3.0))+c*t1690*t1656*t1684*t1658*t1718*(1.0/3.0))+t1674*t1676*t1677*(c*t1682*t1656*(1.0/3.0)-c*t1681*t1639*t1679)-EcF_3*c*t1690*t1656*t1684*t1658*(2.0/3.0))))-t1706*t1709*(t1731-EcF_1*(log(c*t1682*t1639)+EcF_3*t1714*t1715*2.0-EcF_2*EcF_3*t1722*(log(t1682*t1710)+t1714*t1715*t1718)));
            }
            
            // v_rho_a_rho_a
            if (deriv >= 2) {
                double t1738 = rho_a+rho_b;
                double t1739 = 1.0/pow(t1738,1.0/3.0);
                double t1740 = c*t1739;
                double t1741 = 1.0/pow(t1738,4.0/3.0);
                double t1742 = sqrt(t1740);
                double t1743 = EcP_3*t1742;
                double t1744 = EcP_4+t1740+t1743;
                double t1745 = c*t1741*(1.0/3.0);
                double t1746 = 1.0/sqrt(t1740);
                double t1747 = EcP_3*c*t1741*t1746*(1.0/6.0);
                double t1748 = t1745+t1747;
                double t1749 = EcP_2-t1742;
                double t1750 = 1.0/(t1744*t1744);
                double t1751 = 1.0/t1744;
                double t1752 = t1742*2.0;
                double t1753 = EcP_3+t1752;
                double t1754 = 1.0/(t1753*t1753);
                double t1755 = EcP_4*4.0;
                double t1756 = EcP_3*EcP_3;
                double t1757 = t1755-t1756;
                double t1758 = t1754*t1757;
                double t1759 = t1758+1.0;
                double t1760 = 1.0/t1759;
                double t1761 = 1.0/c;
                double t1762 = c*t1741*t1751*(1.0/3.0);
                double t1765 = c*t1750*t1739*t1748;
                double t1763 = t1762-t1765;
                double t1764 = pow(t1738,1.0/3.0);
                double t1766 = 1.0/pow(t1738,7.0/3.0);
                double t1767 = EcP_2*EcP_2;
                double t1768 = EcP_2*EcP_3;
                double t1769 = EcP_4+t1767+t1768;
                double t1770 = 1.0/t1769;
                double t1771 = t1749*t1749;
                double t1772 = t1750*t1771*t1748;
                double t1773 = c*t1741*t1751*t1746*t1749*(1.0/3.0);
                double t1774 = t1772+t1773;
                double t1775 = 1.0/(t1749*t1749);
                double t1776 = c*t1766*(4.0/9.0);
                double t1777 = EcP_3*c*t1746*t1766*(2.0/9.0);
                double t1778 = c*c;
                double t1779 = 1.0/pow(t1738,8.0/3.0);
                double t1780 = 1.0/pow(t1740,3.0/2.0);
                double t1825 = EcP_3*t1780*t1778*t1779*(1.0/3.6E1);
                double t1781 = t1776+t1777-t1825;
                double t1782 = t1748*t1748;
                double t1783 = 1.0/(t1744*t1744*t1744);
                double t1784 = EcP_2*4.0;
                double t1785 = EcP_3*2.0;
                double t1786 = t1784+t1785;
                double t1787 = 1.0/(t1753*t1753*t1753);
                double t1788 = 1.0/(t1753*t1753*t1753*t1753*t1753);
                double t1789 = 1.0/(t1759*t1759);
                double t1790 = EcF_3*t1742;
                double t1791 = EcF_4+t1740+t1790;
                double t1792 = EcF_3*c*t1741*t1746*(1.0/6.0);
                double t1793 = t1745+t1792;
                double t1794 = 1.0/t1791;
                double t1795 = c*t1741*t1794*(1.0/3.0);
                double t1796 = 1.0/(t1791*t1791);
                double t1851 = c*t1739*t1793*t1796;
                double t1797 = t1795-t1851;
                double t1798 = 1.0/pow(t1738,2.0/3.0);
                double t1799 = EcF_2-t1742;
                double t1800 = 1.0/(t1799*t1799);
                double t1801 = t1799*t1799;
                double t1802 = EcF_3*c*t1746*t1766*(2.0/9.0);
                double t1803 = t1776+t1802-EcF_3*t1780*t1778*t1779*(1.0/3.6E1);
                double t1804 = t1793*t1793;
                double t1805 = 1.0/(t1791*t1791*t1791);
                double t1806 = EcF_3+t1752;
                double t1807 = EcF_2*4.0;
                double t1808 = EcF_3*2.0;
                double t1809 = t1807+t1808;
                double t1810 = 1.0/(t1806*t1806);
                double t1811 = EcF_4*4.0;
                double t1812 = EcF_3*EcF_3;
                double t1813 = t1811-t1812;
                double t1814 = t1810*t1813;
                double t1815 = t1814+1.0;
                double t1816 = 1.0/t1815;
                double t1817 = t1793*t1796*t1801;
                double t1818 = c*t1741*t1746*t1794*t1799*(1.0/3.0);
                double t1819 = t1817+t1818;
                double t1820 = 1.0/(t1806*t1806*t1806);
                double t1821 = 1.0/(t1806*t1806*t1806*t1806*t1806);
                double t1822 = 1.0/(t1815*t1815);
                double t1823 = t1761*t1763*t1764*t1748;
                double t1824 = c*t1751*t1766*(4.0/9.0);
                double t1826 = c*t1782*t1783*t1739*2.0;
                double t1827 = t1824+t1826-c*t1741*t1750*t1748*(2.0/3.0)-c*t1750*t1781*t1739;
                double t1828 = t1761*t1744*t1764*t1827;
                double t1829 = t1774*t1748*t1775;
                double t1830 = c*t1751*t1766*(1.0/1.8E1);
                double t1831 = t1771*t1782*t1783*2.0;
                double t1832 = t1751*t1780*t1749*t1778*t1779*(1.0/1.8E1);
                double t1833 = c*t1741*t1750*t1746*t1748*t1749*(2.0/3.0);
                double t1834 = t1830+t1831+t1832+t1833-t1750*t1771*t1781-c*t1751*t1746*t1766*t1749*(4.0/9.0);
                double t1835 = c*t1760*t1754*t1746*t1766*t1786*(4.0/9.0);
                double t1836 = 1.0/(t1749*t1749*t1749);
                double t1837 = c*t1741*t1744*t1746*t1774*t1836*(1.0/3.0);
                double t1838 = c*t1757*t1766*t1786*t1788*t1789*(2.0/9.0);
                double t1839 = t1835+t1837+t1829+t1838-t1744*t1775*t1834-c*t1760*t1766*t1786*t1787*(2.0/9.0)-t1760*t1780*t1754*t1786*t1778*t1779*(1.0/1.8E1);
                double t1840 = EcP_2*EcP_3*t1770*t1839;
                double t1841 = EcP_3*c*t1760*t1766*t1787*(4.0/9.0);
                double t1842 = EcP_3*t1760*t1780*t1754*t1778*t1779*(1.0/9.0);
                double t1843 = t1840+t1823+t1841+t1842+t1828-t1761*t1744*t1763*t1798*(1.0/3.0)-EcP_3*c*t1760*t1754*t1746*t1766*(8.0/9.0)-EcP_3*c*t1757*t1766*t1788*t1789*(4.0/9.0);
                double t1844 = EcP_1*t1843;
                double t1845 = pow(2.0,1.0/3.0);
                double t1846 = t1845*2.0;
                double t1847 = t1846-2.0;
                double t1848 = two_13*2.0;
                double t1849 = t1848-2.0;
                double t1850 = 1.0/t1849;
                double t1852 = EcF_2*EcF_2;
                double t1853 = EcF_2*EcF_3;
                double t1854 = EcF_4+t1852+t1853;
                double t1855 = 1.0/t1854;
                double t1856 = t1761*t1744*t1763*t1764;
                double t1857 = t1744*t1774*t1775;
                double t1858 = c*t1741*t1760*t1754*t1746*t1786*(1.0/3.0);
                double t1859 = t1857+t1858;
                double t1860 = EcP_2*EcP_3*t1770*t1859;
                double t1861 = t1860+t1856-EcP_3*c*t1741*t1760*t1754*t1746*(2.0/3.0);
                v_rho_a_rho_a[Q] += scale * EcP_1*t1861*-2.0+t1738*(t1844-t1850*t1847*(t1844-EcF_1*(t1761*t1764*t1791*(c*t1766*t1794*(4.0/9.0)-c*t1741*t1793*t1796*(2.0/3.0)-c*t1739*t1796*t1803+c*t1739*t1804*t1805*2.0)+t1761*t1764*t1793*t1797-t1761*t1791*t1797*t1798*(1.0/3.0)+EcF_2*EcF_3*t1855*(-t1791*t1800*(c*t1766*t1794*(1.0/1.8E1)-t1796*t1801*t1803+t1801*t1804*t1805*2.0-c*t1746*t1766*t1794*t1799*(4.0/9.0)+t1780*t1794*t1778*t1779*t1799*(1.0/1.8E1)+c*t1741*t1746*t1793*t1796*t1799*(2.0/3.0))+t1793*t1800*t1819-c*t1766*t1820*t1816*t1809*(2.0/9.0)+c*t1746*t1766*t1810*t1816*t1809*(4.0/9.0)+c*t1766*t1821*t1813*t1822*t1809*(2.0/9.0)-t1780*t1778*t1779*t1810*t1816*t1809*(1.0/1.8E1)+c*t1741*t1746*t1791*1.0/(t1799*t1799*t1799)*t1819*(1.0/3.0))+EcF_3*c*t1766*t1820*t1816*(4.0/9.0)-EcF_3*c*t1746*t1766*t1810*t1816*(8.0/9.0)-EcF_3*c*t1766*t1821*t1813*t1822*(4.0/9.0)+EcF_3*t1780*t1778*t1779*t1810*t1816*(1.0/9.0))))+t1850*t1847*(EcP_1*t1861-EcF_1*(t1761*t1764*t1791*t1797+EcF_2*EcF_3*t1855*(t1791*t1800*t1819+c*t1741*t1746*t1810*t1816*t1809*(1.0/3.0))-EcF_3*c*t1741*t1746*t1810*t1816*(2.0/3.0)))*2.0;
            }
            
            // v_rho_a_rho_b
            if (deriv >= 2) {
                double t1863 = rho_a+rho_b;
                double t1864 = 1.0/pow(t1863,1.0/3.0);
                double t1865 = c*t1864;
                double t1866 = 1.0/pow(t1863,4.0/3.0);
                double t1867 = sqrt(t1865);
                double t1868 = EcP_3*t1867;
                double t1869 = EcP_4+t1865+t1868;
                double t1870 = c*t1866*(1.0/3.0);
                double t1871 = 1.0/sqrt(t1865);
                double t1872 = EcP_3*c*t1871*t1866*(1.0/6.0);
                double t1873 = t1870+t1872;
                double t1874 = EcP_2-t1867;
                double t1875 = 1.0/(t1869*t1869);
                double t1876 = 1.0/t1869;
                double t1877 = t1867*2.0;
                double t1878 = EcP_3+t1877;
                double t1879 = 1.0/(t1878*t1878);
                double t1880 = EcP_4*4.0;
                double t1881 = EcP_3*EcP_3;
                double t1882 = t1880-t1881;
                double t1883 = t1882*t1879;
                double t1884 = t1883+1.0;
                double t1885 = 1.0/t1884;
                double t1886 = 1.0/c;
                double t1887 = c*t1866*t1876*(1.0/3.0);
                double t1890 = c*t1864*t1873*t1875;
                double t1888 = -t1890+t1887;
                double t1889 = pow(t1863,1.0/3.0);
                double t1891 = 1.0/pow(t1863,7.0/3.0);
                double t1892 = EcP_2*EcP_2;
                double t1893 = EcP_2*EcP_3;
                double t1894 = EcP_4+t1892+t1893;
                double t1895 = 1.0/t1894;
                double t1896 = t1874*t1874;
                double t1897 = t1873*t1875*t1896;
                double t1898 = c*t1871*t1874*t1866*t1876*(1.0/3.0);
                double t1899 = t1897+t1898;
                double t1900 = 1.0/(t1874*t1874);
                double t1901 = c*t1891*(4.0/9.0);
                double t1902 = EcP_3*c*t1871*t1891*(2.0/9.0);
                double t1903 = c*c;
                double t1904 = 1.0/pow(t1863,8.0/3.0);
                double t1905 = 1.0/pow(t1865,3.0/2.0);
                double t1950 = EcP_3*t1903*t1904*t1905*(1.0/3.6E1);
                double t1906 = t1901+t1902-t1950;
                double t1907 = t1873*t1873;
                double t1908 = 1.0/(t1869*t1869*t1869);
                double t1909 = EcP_2*4.0;
                double t1910 = EcP_3*2.0;
                double t1911 = t1910+t1909;
                double t1912 = 1.0/(t1878*t1878*t1878);
                double t1913 = 1.0/(t1878*t1878*t1878*t1878*t1878);
                double t1914 = 1.0/(t1884*t1884);
                double t1915 = EcF_3*t1867;
                double t1916 = EcF_4+t1865+t1915;
                double t1917 = EcF_3*c*t1871*t1866*(1.0/6.0);
                double t1918 = t1870+t1917;
                double t1919 = 1.0/t1916;
                double t1920 = c*t1866*t1919*(1.0/3.0);
                double t1921 = 1.0/(t1916*t1916);
                double t1976 = c*t1864*t1921*t1918;
                double t1922 = t1920-t1976;
                double t1923 = 1.0/pow(t1863,2.0/3.0);
                double t1924 = EcF_2-t1867;
                double t1925 = 1.0/(t1924*t1924);
                double t1926 = t1924*t1924;
                double t1927 = EcF_3*c*t1871*t1891*(2.0/9.0);
                double t1928 = t1901+t1927-EcF_3*t1903*t1904*t1905*(1.0/3.6E1);
                double t1929 = t1918*t1918;
                double t1930 = 1.0/(t1916*t1916*t1916);
                double t1931 = EcF_3+t1877;
                double t1932 = EcF_2*4.0;
                double t1933 = EcF_3*2.0;
                double t1934 = t1932+t1933;
                double t1935 = 1.0/(t1931*t1931);
                double t1936 = EcF_4*4.0;
                double t1937 = EcF_3*EcF_3;
                double t1938 = t1936-t1937;
                double t1939 = t1935*t1938;
                double t1940 = t1939+1.0;
                double t1941 = 1.0/t1940;
                double t1942 = t1921*t1926*t1918;
                double t1943 = c*t1871*t1866*t1924*t1919*(1.0/3.0);
                double t1944 = t1942+t1943;
                double t1945 = 1.0/(t1931*t1931*t1931);
                double t1946 = 1.0/(t1931*t1931*t1931*t1931*t1931);
                double t1947 = 1.0/(t1940*t1940);
                double t1948 = t1873*t1886*t1888*t1889;
                double t1949 = c*t1891*t1876*(4.0/9.0);
                double t1951 = c*t1864*t1907*t1908*2.0;
                double t1952 = t1951+t1949-c*t1873*t1866*t1875*(2.0/3.0)-c*t1864*t1875*t1906;
                double t1953 = t1886*t1869*t1889*t1952;
                double t1954 = t1873*t1899*t1900;
                double t1955 = c*t1891*t1876*(1.0/1.8E1);
                double t1956 = t1896*t1907*t1908*2.0;
                double t1957 = t1874*t1876*t1903*t1904*t1905*(1.0/1.8E1);
                double t1958 = c*t1871*t1873*t1874*t1866*t1875*(2.0/3.0);
                double t1959 = t1955+t1956+t1957+t1958-t1875*t1896*t1906-c*t1871*t1891*t1874*t1876*(4.0/9.0);
                double t1960 = c*t1871*t1891*t1885*t1879*t1911*(4.0/9.0);
                double t1961 = 1.0/(t1874*t1874*t1874);
                double t1962 = c*t1871*t1866*t1869*t1899*t1961*(1.0/3.0);
                double t1963 = c*t1882*t1891*t1911*t1913*t1914*(2.0/9.0);
                double t1964 = t1960+t1962+t1954+t1963-t1869*t1900*t1959-c*t1891*t1885*t1911*t1912*(2.0/9.0)-t1885*t1879*t1911*t1903*t1904*t1905*(1.0/1.8E1);
                double t1965 = EcP_2*EcP_3*t1895*t1964;
                double t1966 = EcP_3*c*t1891*t1885*t1912*(4.0/9.0);
                double t1967 = EcP_3*t1885*t1879*t1903*t1904*t1905*(1.0/9.0);
                double t1968 = t1953+t1965+t1948+t1966+t1967-t1886*t1869*t1888*t1923*(1.0/3.0)-EcP_3*c*t1871*t1891*t1885*t1879*(8.0/9.0)-EcP_3*c*t1882*t1891*t1913*t1914*(4.0/9.0);
                double t1969 = EcP_1*t1968;
                double t1970 = pow(2.0,1.0/3.0);
                double t1971 = t1970*2.0;
                double t1972 = t1971-2.0;
                double t1973 = two_13*2.0;
                double t1974 = t1973-2.0;
                double t1975 = 1.0/t1974;
                double t1977 = EcF_2*EcF_2;
                double t1978 = EcF_2*EcF_3;
                double t1979 = EcF_4+t1977+t1978;
                double t1980 = 1.0/t1979;
                double t1981 = t1886*t1869*t1888*t1889;
                double t1982 = t1869*t1899*t1900;
                double t1983 = c*t1871*t1866*t1885*t1879*t1911*(1.0/3.0);
                double t1984 = t1982+t1983;
                double t1985 = EcP_2*EcP_3*t1895*t1984;
                double t1986 = t1981+t1985-EcP_3*c*t1871*t1866*t1885*t1879*(2.0/3.0);
                v_rho_a_rho_b[Q] += scale * EcP_1*t1986*-2.0+t1863*(t1969-t1972*t1975*(t1969-EcF_1*(t1886*t1889*t1916*(c*t1891*t1919*(4.0/9.0)-c*t1864*t1921*t1928+c*t1864*t1930*t1929*2.0-c*t1866*t1921*t1918*(2.0/3.0))+t1886*t1889*t1922*t1918-t1886*t1922*t1923*t1916*(1.0/3.0)+EcF_2*EcF_3*t1980*(-t1916*t1925*(c*t1891*t1919*(1.0/1.8E1)-t1921*t1926*t1928+t1930*t1926*t1929*2.0-c*t1871*t1891*t1924*t1919*(4.0/9.0)+t1903*t1904*t1905*t1924*t1919*(1.0/1.8E1)+c*t1871*t1866*t1921*t1924*t1918*(2.0/3.0))+t1925*t1944*t1918-c*t1891*t1941*t1934*t1945*(2.0/9.0)+c*t1871*t1891*t1941*t1934*t1935*(4.0/9.0)+c*t1891*t1934*t1946*t1938*t1947*(2.0/9.0)-t1903*t1904*t1905*t1941*t1934*t1935*(1.0/1.8E1)+c*t1871*t1866*1.0/(t1924*t1924*t1924)*t1916*t1944*(1.0/3.0))+EcF_3*c*t1891*t1941*t1945*(4.0/9.0)-EcF_3*c*t1871*t1891*t1941*t1935*(8.0/9.0)-EcF_3*c*t1891*t1946*t1938*t1947*(4.0/9.0)+EcF_3*t1903*t1904*t1905*t1941*t1935*(1.0/9.0))))+t1972*t1975*(EcP_1*t1986-EcF_1*(t1886*t1889*t1922*t1916+EcF_2*EcF_3*t1980*(t1916*t1925*t1944+c*t1871*t1866*t1941*t1934*t1935*(1.0/3.0))-EcF_3*c*t1871*t1866*t1941*t1935*(2.0/3.0)))*2.0;
            }
            
            // v_rho_b_rho_b
            if (deriv >= 2) {
                double t1988 = rho_a+rho_b;
                double t1989 = 1.0/pow(t1988,1.0/3.0);
                double t1990 = c*t1989;
                double t1991 = 1.0/pow(t1988,4.0/3.0);
                double t1992 = sqrt(t1990);
                double t1993 = EcP_3*t1992;
                double t1994 = EcP_4+t1990+t1993;
                double t1995 = c*t1991*(1.0/3.0);
                double t1996 = 1.0/sqrt(t1990);
                double t1997 = EcP_3*c*t1991*t1996*(1.0/6.0);
                double t1998 = t1995+t1997;
                double t1999 = EcP_2-t1992;
                double t2000 = 1.0/(t1994*t1994);
                double t2001 = 1.0/t1994;
                double t2002 = t1992*2.0;
                double t2003 = EcP_3+t2002;
                double t2004 = 1.0/(t2003*t2003);
                double t2005 = EcP_4*4.0;
                double t2006 = EcP_3*EcP_3;
                double t2007 = t2005-t2006;
                double t2008 = t2004*t2007;
                double t2009 = t2008+1.0;
                double t2010 = 1.0/t2009;
                double t2011 = 1.0/c;
                double t2012 = c*t1991*t2001*(1.0/3.0);
                double t2015 = c*t1989*t1998*t2000;
                double t2013 = t2012-t2015;
                double t2014 = pow(t1988,1.0/3.0);
                double t2016 = 1.0/pow(t1988,7.0/3.0);
                double t2017 = EcP_2*EcP_2;
                double t2018 = EcP_2*EcP_3;
                double t2019 = EcP_4+t2017+t2018;
                double t2020 = 1.0/t2019;
                double t2021 = t1999*t1999;
                double t2022 = t1998*t2000*t2021;
                double t2023 = c*t1991*t1996*t1999*t2001*(1.0/3.0);
                double t2024 = t2022+t2023;
                double t2025 = 1.0/(t1999*t1999);
                double t2026 = c*t2016*(4.0/9.0);
                double t2027 = EcP_3*c*t1996*t2016*(2.0/9.0);
                double t2028 = c*c;
                double t2029 = 1.0/pow(t1988,8.0/3.0);
                double t2030 = 1.0/pow(t1990,3.0/2.0);
                double t2075 = EcP_3*t2030*t2028*t2029*(1.0/3.6E1);
                double t2031 = t2026+t2027-t2075;
                double t2032 = t1998*t1998;
                double t2033 = 1.0/(t1994*t1994*t1994);
                double t2034 = EcP_2*4.0;
                double t2035 = EcP_3*2.0;
                double t2036 = t2034+t2035;
                double t2037 = 1.0/(t2003*t2003*t2003);
                double t2038 = 1.0/(t2003*t2003*t2003*t2003*t2003);
                double t2039 = 1.0/(t2009*t2009);
                double t2040 = EcF_3*t1992;
                double t2041 = EcF_4+t1990+t2040;
                double t2042 = EcF_3*c*t1991*t1996*(1.0/6.0);
                double t2043 = t1995+t2042;
                double t2044 = 1.0/t2041;
                double t2045 = c*t1991*t2044*(1.0/3.0);
                double t2046 = 1.0/(t2041*t2041);
                double t2101 = c*t1989*t2043*t2046;
                double t2047 = t2045-t2101;
                double t2048 = 1.0/pow(t1988,2.0/3.0);
                double t2049 = EcF_2-t1992;
                double t2050 = 1.0/(t2049*t2049);
                double t2051 = t2049*t2049;
                double t2052 = EcF_3*c*t1996*t2016*(2.0/9.0);
                double t2053 = t2052+t2026-EcF_3*t2030*t2028*t2029*(1.0/3.6E1);
                double t2054 = t2043*t2043;
                double t2055 = 1.0/(t2041*t2041*t2041);
                double t2056 = EcF_3+t2002;
                double t2057 = EcF_2*4.0;
                double t2058 = EcF_3*2.0;
                double t2059 = t2057+t2058;
                double t2060 = 1.0/(t2056*t2056);
                double t2061 = EcF_4*4.0;
                double t2062 = EcF_3*EcF_3;
                double t2063 = t2061-t2062;
                double t2064 = t2060*t2063;
                double t2065 = t2064+1.0;
                double t2066 = 1.0/t2065;
                double t2067 = t2051*t2043*t2046;
                double t2068 = c*t1991*t1996*t2044*t2049*(1.0/3.0);
                double t2069 = t2067+t2068;
                double t2070 = 1.0/(t2056*t2056*t2056);
                double t2071 = 1.0/(t2056*t2056*t2056*t2056*t2056);
                double t2072 = 1.0/(t2065*t2065);
                double t2073 = t1998*t2011*t2013*t2014;
                double t2074 = c*t2001*t2016*(4.0/9.0);
                double t2076 = c*t1989*t2032*t2033*2.0;
                double t2077 = t2074+t2076-c*t1991*t1998*t2000*(2.0/3.0)-c*t1989*t2000*t2031;
                double t2078 = t1994*t2011*t2014*t2077;
                double t2079 = t1998*t2024*t2025;
                double t2080 = c*t2001*t2016*(1.0/1.8E1);
                double t2081 = t2021*t2032*t2033*2.0;
                double t2082 = t1999*t2001*t2030*t2028*t2029*(1.0/1.8E1);
                double t2083 = c*t1991*t1996*t1998*t1999*t2000*(2.0/3.0);
                double t2084 = t2080+t2081+t2082+t2083-t2000*t2021*t2031-c*t1996*t1999*t2001*t2016*(4.0/9.0);
                double t2085 = c*t1996*t2010*t2004*t2016*t2036*(4.0/9.0);
                double t2086 = 1.0/(t1999*t1999*t1999);
                double t2087 = c*t1991*t1994*t1996*t2024*t2086*(1.0/3.0);
                double t2088 = c*t2007*t2016*t2036*t2038*t2039*(2.0/9.0);
                double t2089 = t2085+t2087+t2079+t2088-t1994*t2025*t2084-c*t2010*t2016*t2036*t2037*(2.0/9.0)-t2010*t2030*t2004*t2036*t2028*t2029*(1.0/1.8E1);
                double t2090 = EcP_2*EcP_3*t2020*t2089;
                double t2091 = EcP_3*c*t2010*t2016*t2037*(4.0/9.0);
                double t2092 = EcP_3*t2010*t2030*t2004*t2028*t2029*(1.0/9.0);
                double t2093 = t2090+t2073+t2091+t2092+t2078-t1994*t2011*t2013*t2048*(1.0/3.0)-EcP_3*c*t1996*t2010*t2004*t2016*(8.0/9.0)-EcP_3*c*t2007*t2016*t2038*t2039*(4.0/9.0);
                double t2094 = EcP_1*t2093;
                double t2095 = pow(2.0,1.0/3.0);
                double t2096 = t2095*2.0;
                double t2097 = t2096-2.0;
                double t2098 = two_13*2.0;
                double t2099 = t2098-2.0;
                double t2100 = 1.0/t2099;
                double t2102 = EcF_2*EcF_2;
                double t2103 = EcF_2*EcF_3;
                double t2104 = EcF_4+t2102+t2103;
                double t2105 = 1.0/t2104;
                double t2106 = t1994*t2011*t2013*t2014;
                double t2107 = t1994*t2024*t2025;
                double t2108 = c*t1991*t1996*t2010*t2004*t2036*(1.0/3.0);
                double t2109 = t2107+t2108;
                double t2110 = EcP_2*EcP_3*t2020*t2109;
                double t2111 = t2110+t2106-EcP_3*c*t1991*t1996*t2010*t2004*(2.0/3.0);
                v_rho_b_rho_b[Q] += scale * EcP_1*t2111*-2.0+t1988*(t2094-t2097*t2100*(t2094-EcF_1*(t2011*t2014*t2041*(c*t2016*t2044*(4.0/9.0)-c*t1991*t2043*t2046*(2.0/3.0)-c*t1989*t2053*t2046+c*t1989*t2054*t2055*2.0)+t2011*t2014*t2043*t2047-t2011*t2041*t2047*t2048*(1.0/3.0)+EcF_2*EcF_3*t2105*(-t2041*t2050*(c*t2016*t2044*(1.0/1.8E1)-t2051*t2053*t2046+t2051*t2054*t2055*2.0-c*t1996*t2016*t2044*t2049*(4.0/9.0)+t2030*t2044*t2028*t2029*t2049*(1.0/1.8E1)+c*t1991*t1996*t2043*t2046*t2049*(2.0/3.0))+t2050*t2043*t2069-c*t2016*t2070*t2066*t2059*(2.0/9.0)+c*t1996*t2060*t2016*t2066*t2059*(4.0/9.0)+c*t2016*t2071*t2063*t2072*t2059*(2.0/9.0)-t2030*t2060*t2028*t2029*t2066*t2059*(1.0/1.8E1)+c*t1991*t1996*t2041*1.0/(t2049*t2049*t2049)*t2069*(1.0/3.0))+EcF_3*c*t2016*t2070*t2066*(4.0/9.0)-EcF_3*c*t1996*t2060*t2016*t2066*(8.0/9.0)-EcF_3*c*t2016*t2071*t2063*t2072*(4.0/9.0)+EcF_3*t2030*t2060*t2028*t2029*t2066*(1.0/9.0))))+t2097*t2100*(EcP_1*t2111-EcF_1*(t2011*t2014*t2041*t2047+EcF_2*EcF_3*t2105*(t2041*t2050*t2069+c*t1991*t1996*t2060*t2066*t2059*(1.0/3.0))-EcF_3*c*t1991*t1996*t2060*t2066*(2.0/3.0)))*2.0;
            }
            
        } else {
            // v
            if (deriv >= 0) {
                double t2 = rho_a+rho_b;
                double t3 = 1.0/pow(t2,1.0/3.0);
                double t4 = c*t3;
                double t5 = sqrt(t4);
                double t6 = EcP_4*4.0;
                double t7 = EcP_3*EcP_3;
                double t8 = t6-t7;
                double t9 = EcP_2-t5;
                double t10 = EcP_3*t5;
                double t11 = EcP_4+t10+t4;
                double t12 = 1.0/t11;
                double t13 = sqrt(t8);
                double t14 = t5*2.0;
                double t15 = EcP_3+t14;
                double t16 = 1.0/t15;
                double t17 = t13*t16;
                double t18 = atan(t17);
                double t19 = 1.0/sqrt(t8);
                double t20 = EcF_4*4.0;
                double t21 = EcF_3*EcF_3;
                double t22 = t20-t21;
                double t23 = EcF_2-t5;
                double t24 = EcF_3*t5;
                double t25 = EcF_4+t24+t4;
                double t26 = 1.0/t25;
                double t27 = sqrt(t22);
                double t28 = EcF_3+t14;
                double t29 = 1.0/t28;
                double t30 = t27*t29;
                double t31 = atan(t30);
                double t32 = 1.0/sqrt(t22);
                double t33 = c*t12*t3;
                double t34 = log(t33);
                double t35 = EcP_3*t18*t19*2.0;
                double t36 = t9*t9;
                double t37 = t12*t36;
                double t38 = log(t37);
                double t39 = EcP_2*4.0;
                double t40 = EcP_3*2.0;
                double t41 = t39+t40;
                double t42 = t18*t19*t41;
                double t43 = t38+t42;
                double t44 = EcP_2*EcP_2;
                double t45 = EcP_2*EcP_3;
                double t46 = EcP_4+t44+t45;
                double t47 = 1.0/t46;
                double t48 = t34+t35-EcP_2*EcP_3*t43*t47;
                double t49 = EcP_1*t48;
                double t50 = 1.0/t2;
                double t51 = rho_a-rho_b;
                double t52 = t50*t51;
                v[Q] += scale * t2*(t49-((t49-EcF_1*(log(c*t26*t3)+EcF_3*t31*t32*2.0-(EcF_2*EcF_3*(log((t23*t23)*t26)+t31*t32*(EcF_2*4.0+EcF_3*2.0)))/(EcF_4+EcF_2*EcF_2+EcF_2*EcF_3)))*(pow(t52+1.0,4.0/3.0)+pow(-t52+1.0,4.0/3.0)-2.0))/(two_13*2.0-2.0));
            }
            
            // v_rho_a
            if (deriv >= 1) {
                double t54 = rho_a+rho_b;
                double t55 = 1.0/pow(t54,1.0/3.0);
                double t56 = c*t55;
                double t57 = 1.0/pow(t54,4.0/3.0);
                double t58 = sqrt(t56);
                double t59 = EcP_3*t58;
                double t60 = EcP_4+t56+t59;
                double t61 = c*t57*(1.0/3.0);
                double t62 = 1.0/sqrt(t56);
                double t63 = EcP_3*c*t57*t62*(1.0/6.0);
                double t64 = t61+t63;
                double t65 = EcP_2-t58;
                double t66 = 1.0/(t60*t60);
                double t67 = 1.0/t60;
                double t68 = t58*2.0;
                double t69 = EcP_3+t68;
                double t70 = 1.0/(t69*t69);
                double t71 = EcP_4*4.0;
                double t72 = EcP_3*EcP_3;
                double t73 = t71-t72;
                double t74 = t70*t73;
                double t75 = t74+1.0;
                double t76 = 1.0/t75;
                double t77 = 1.0/t54;
                double t78 = rho_a-rho_b;
                double t79 = t77*t78;
                double t80 = 1.0/(t54*t54);
                double t81 = t77-t78*t80;
                double t82 = EcF_4*4.0;
                double t83 = EcF_3*EcF_3;
                double t84 = t82-t83;
                double t85 = EcF_2-t58;
                double t86 = EcF_3*t58;
                double t87 = EcF_4+t56+t86;
                double t88 = 1.0/t87;
                double t89 = sqrt(t84);
                double t90 = EcF_3+t68;
                double t91 = 1.0/t90;
                double t92 = t89*t91;
                double t93 = atan(t92);
                double t94 = 1.0/sqrt(t84);
                double t95 = t65*t65;
                double t96 = sqrt(t73);
                double t97 = 1.0/t69;
                double t98 = t96*t97;
                double t99 = atan(t98);
                double t100 = 1.0/sqrt(t73);
                double t101 = EcP_2*4.0;
                double t102 = EcP_3*2.0;
                double t103 = t101+t102;
                double t104 = EcP_2*EcP_2;
                double t105 = EcP_2*EcP_3;
                double t106 = EcP_4+t104+t105;
                double t107 = 1.0/t106;
                double t108 = two_13*2.0;
                double t109 = t108-2.0;
                double t110 = 1.0/t109;
                double t111 = 1.0/c;
                double t112 = pow(t54,1.0/3.0);
                double t113 = EcF_3*c*t57*t62*(1.0/6.0);
                double t114 = t113+t61;
                double t115 = t85*t85;
                double t116 = 1.0/(t87*t87);
                double t117 = EcF_2*4.0;
                double t118 = EcF_3*2.0;
                double t119 = t117+t118;
                double t120 = 1.0/(t90*t90);
                double t121 = EcF_2*EcF_2;
                double t122 = EcF_2*EcF_3;
                double t123 = EcF_4+t121+t122;
                double t124 = 1.0/t123;
                double t125 = t120*t84;
                double t126 = t125+1.0;
                double t127 = 1.0/t126;
                double t128 = c*t57*t67*(1.0/3.0);
                double t129 = t128-c*t55*t64*t66;
                double t130 = t111*t112*t129*t60;
                double t131 = t64*t66*t95;
                double t132 = c*t57*t62*t65*t67*(1.0/3.0);
                double t133 = t131+t132;
                double t134 = 1.0/(t65*t65);
                double t135 = t133*t134*t60;
                double t136 = c*t103*t57*t62*t70*t76*(1.0/3.0);
                double t137 = t135+t136;
                double t138 = EcP_2*EcP_3*t107*t137;
                double t139 = t130+t138-EcP_3*c*t57*t62*t70*t76*(2.0/3.0);
                double t140 = EcP_1*t139;
                double t141 = t79+1.0;
                double t142 = -t79+1.0;
                double t143 = c*t55*t67;
                double t144 = log(t143);
                double t145 = EcP_3*t100*t99*2.0;
                double t146 = t67*t95;
                double t147 = log(t146);
                double t148 = t100*t103*t99;
                double t149 = t147+t148;
                double t160 = EcP_2*EcP_3*t107*t149;
                double t150 = t144+t145-t160;
                double t151 = EcP_1*t150;
                double t152 = c*t55*t88;
                double t153 = log(t152);
                double t154 = EcF_3*t93*t94*2.0;
                double t155 = t115*t88;
                double t156 = log(t155);
                double t157 = t119*t93*t94;
                double t158 = t156+t157;
                double t159 = t153+t154-EcF_2*EcF_3*t124*t158;
                double t161 = pow(t141,4.0/3.0);
                double t162 = pow(t142,4.0/3.0);
                double t163 = t161+t162-2.0;
                double t164 = t151-EcF_1*t159;
                v_rho_a[Q] += scale * t151-t54*(t140+t110*t164*(pow(t141,1.0/3.0)*t81*(4.0/3.0)-pow(t142,1.0/3.0)*t81*(4.0/3.0))-t110*t163*(t140-EcF_1*(EcF_2*EcF_3*t124*(1.0/(t85*t85)*t87*(t114*t115*t116+c*t57*t62*t85*t88*(1.0/3.0))+c*t119*t120*t127*t57*t62*(1.0/3.0))+t111*t112*t87*(c*t57*t88*(1.0/3.0)-c*t114*t116*t55)-EcF_3*c*t120*t127*t57*t62*(2.0/3.0))))-t110*t163*t164;
            }
            
            // v_rho_b
            if (deriv >= 1) {
                double t166 = rho_a+rho_b;
                double t167 = 1.0/pow(t166,1.0/3.0);
                double t168 = c*t167;
                double t169 = 1.0/pow(t166,4.0/3.0);
                double t170 = sqrt(t168);
                double t171 = EcP_3*t170;
                double t172 = EcP_4+t168+t171;
                double t173 = c*t169*(1.0/3.0);
                double t174 = 1.0/sqrt(t168);
                double t175 = EcP_3*c*t169*t174*(1.0/6.0);
                double t176 = t173+t175;
                double t177 = EcP_2-t170;
                double t178 = 1.0/(t172*t172);
                double t179 = 1.0/t172;
                double t180 = t170*2.0;
                double t181 = EcP_3+t180;
                double t182 = 1.0/(t181*t181);
                double t183 = EcP_4*4.0;
                double t184 = EcP_3*EcP_3;
                double t185 = t183-t184;
                double t186 = t182*t185;
                double t187 = t186+1.0;
                double t188 = 1.0/t187;
                double t189 = 1.0/t166;
                double t190 = rho_a-rho_b;
                double t191 = t189*t190;
                double t192 = 1.0/(t166*t166);
                double t193 = t190*t192;
                double t194 = t189+t193;
                double t195 = EcF_4*4.0;
                double t196 = EcF_3*EcF_3;
                double t197 = t195-t196;
                double t198 = EcF_2-t170;
                double t199 = EcF_3*t170;
                double t200 = EcF_4+t168+t199;
                double t201 = 1.0/t200;
                double t202 = sqrt(t197);
                double t203 = EcF_3+t180;
                double t204 = 1.0/t203;
                double t205 = t202*t204;
                double t206 = atan(t205);
                double t207 = 1.0/sqrt(t197);
                double t208 = t177*t177;
                double t209 = sqrt(t185);
                double t210 = 1.0/t181;
                double t211 = t209*t210;
                double t212 = atan(t211);
                double t213 = 1.0/sqrt(t185);
                double t214 = EcP_2*4.0;
                double t215 = EcP_3*2.0;
                double t216 = t214+t215;
                double t217 = EcP_2*EcP_2;
                double t218 = EcP_2*EcP_3;
                double t219 = EcP_4+t217+t218;
                double t220 = 1.0/t219;
                double t221 = two_13*2.0;
                double t222 = t221-2.0;
                double t223 = 1.0/t222;
                double t224 = 1.0/c;
                double t225 = pow(t166,1.0/3.0);
                double t226 = EcF_3*c*t169*t174*(1.0/6.0);
                double t227 = t173+t226;
                double t228 = t198*t198;
                double t229 = 1.0/(t200*t200);
                double t230 = EcF_2*4.0;
                double t231 = EcF_3*2.0;
                double t232 = t230+t231;
                double t233 = 1.0/(t203*t203);
                double t234 = EcF_2*EcF_2;
                double t235 = EcF_2*EcF_3;
                double t236 = EcF_4+t234+t235;
                double t237 = 1.0/t236;
                double t238 = t197*t233;
                double t239 = t238+1.0;
                double t240 = 1.0/t239;
                double t241 = c*t169*t179*(1.0/3.0);
                double t242 = t241-c*t167*t176*t178;
                double t243 = t172*t224*t225*t242;
                double t244 = t176*t178*t208;
                double t245 = c*t169*t174*t177*t179*(1.0/3.0);
                double t246 = t244+t245;
                double t247 = 1.0/(t177*t177);
                double t248 = t172*t246*t247;
                double t249 = c*t169*t174*t182*t188*t216*(1.0/3.0);
                double t250 = t248+t249;
                double t251 = EcP_2*EcP_3*t220*t250;
                double t252 = t243+t251-EcP_3*c*t169*t174*t182*t188*(2.0/3.0);
                double t253 = EcP_1*t252;
                double t254 = t191+1.0;
                double t255 = -t191+1.0;
                double t256 = c*t167*t179;
                double t257 = log(t256);
                double t258 = EcP_3*t212*t213*2.0;
                double t259 = t179*t208;
                double t260 = log(t259);
                double t261 = t212*t213*t216;
                double t262 = t260+t261;
                double t273 = EcP_2*EcP_3*t220*t262;
                double t263 = t257+t258-t273;
                double t264 = EcP_1*t263;
                double t265 = c*t167*t201;
                double t266 = log(t265);
                double t267 = EcF_3*t206*t207*2.0;
                double t268 = t201*t228;
                double t269 = log(t268);
                double t270 = t206*t207*t232;
                double t271 = t269+t270;
                double t272 = t266+t267-EcF_2*EcF_3*t237*t271;
                double t274 = pow(t254,4.0/3.0);
                double t275 = pow(t255,4.0/3.0);
                double t276 = t274+t275-2.0;
                double t277 = t264-EcF_1*t272;
                v_rho_b[Q] += scale * t264+t166*(-t253+t223*t277*(t194*pow(t254,1.0/3.0)*(4.0/3.0)-t194*pow(t255,1.0/3.0)*(4.0/3.0))+t223*t276*(t253-EcF_1*(EcF_2*EcF_3*t237*(1.0/(t198*t198)*t200*(t227*t228*t229+c*t169*t174*t198*t201*(1.0/3.0))+c*t169*t174*t232*t233*t240*(1.0/3.0))+t200*t224*t225*(c*t169*t201*(1.0/3.0)-c*t167*t227*t229)-EcF_3*c*t169*t174*t233*t240*(2.0/3.0))))-t223*t276*t277;
            }
            
            // v_rho_a_rho_a
            if (deriv >= 2) {
                double t284 = rho_a+rho_b;
                double t285 = 1.0/pow(t284,1.0/3.0);
                double t286 = c*t285;
                double t287 = 1.0/pow(t284,4.0/3.0);
                double t288 = sqrt(t286);
                double t289 = EcP_3*t288;
                double t290 = EcP_4+t286+t289;
                double t291 = c*t287*(1.0/3.0);
                double t292 = 1.0/sqrt(t286);
                double t293 = EcP_3*c*t287*t292*(1.0/6.0);
                double t294 = t291+t293;
                double t295 = EcP_2-t288;
                double t296 = 1.0/(t290*t290);
                double t297 = 1.0/t290;
                double t298 = t288*2.0;
                double t299 = EcP_3+t298;
                double t300 = 1.0/(t299*t299);
                double t301 = EcP_4*4.0;
                double t302 = EcP_3*EcP_3;
                double t303 = t301-t302;
                double t304 = t300*t303;
                double t305 = t304+1.0;
                double t306 = 1.0/t305;
                double t307 = 1.0/c;
                double t308 = c*t287*t297*(1.0/3.0);
                double t311 = c*t285*t294*t296;
                double t309 = t308-t311;
                double t310 = pow(t284,1.0/3.0);
                double t312 = 1.0/pow(t284,7.0/3.0);
                double t313 = EcP_2*EcP_2;
                double t314 = EcP_2*EcP_3;
                double t315 = EcP_4+t313+t314;
                double t316 = 1.0/t315;
                double t317 = t295*t295;
                double t318 = t294*t296*t317;
                double t319 = c*t287*t292*t295*t297*(1.0/3.0);
                double t320 = t318+t319;
                double t321 = 1.0/(t295*t295);
                double t322 = c*t312*(4.0/9.0);
                double t323 = EcP_3*c*t292*t312*(2.0/9.0);
                double t324 = c*c;
                double t325 = 1.0/pow(t284,8.0/3.0);
                double t326 = 1.0/pow(t286,3.0/2.0);
                double t371 = EcP_3*t324*t325*t326*(1.0/3.6E1);
                double t327 = t322+t323-t371;
                double t328 = t294*t294;
                double t329 = 1.0/(t290*t290*t290);
                double t330 = EcP_2*4.0;
                double t331 = EcP_3*2.0;
                double t332 = t330+t331;
                double t333 = 1.0/(t299*t299*t299);
                double t334 = 1.0/(t299*t299*t299*t299*t299);
                double t335 = 1.0/(t305*t305);
                double t336 = EcF_3*t288;
                double t337 = EcF_4+t286+t336;
                double t338 = EcF_3*c*t287*t292*(1.0/6.0);
                double t339 = t291+t338;
                double t340 = 1.0/t337;
                double t341 = c*t287*t340*(1.0/3.0);
                double t342 = 1.0/(t337*t337);
                double t401 = c*t285*t339*t342;
                double t343 = t341-t401;
                double t344 = 1.0/pow(t284,2.0/3.0);
                double t345 = EcF_2-t288;
                double t346 = 1.0/(t345*t345);
                double t347 = t345*t345;
                double t348 = EcF_3*c*t292*t312*(2.0/9.0);
                double t349 = t322+t348-EcF_3*t324*t325*t326*(1.0/3.6E1);
                double t350 = t339*t339;
                double t351 = 1.0/(t337*t337*t337);
                double t352 = EcF_3+t298;
                double t353 = EcF_2*4.0;
                double t354 = EcF_3*2.0;
                double t355 = t353+t354;
                double t356 = 1.0/(t352*t352);
                double t357 = EcF_4*4.0;
                double t358 = EcF_3*EcF_3;
                double t359 = t357-t358;
                double t360 = t356*t359;
                double t361 = t360+1.0;
                double t362 = 1.0/t361;
                double t363 = t339*t342*t347;
                double t364 = c*t287*t292*t340*t345*(1.0/3.0);
                double t365 = t363+t364;
                double t366 = 1.0/(t352*t352*t352);
                double t367 = 1.0/(t352*t352*t352*t352*t352);
                double t368 = 1.0/(t361*t361);
                double t369 = t294*t307*t309*t310;
                double t370 = c*t297*t312*(4.0/9.0);
                double t372 = c*t285*t328*t329*2.0;
                double t373 = t370+t372-c*t287*t294*t296*(2.0/3.0)-c*t285*t296*t327;
                double t374 = t290*t307*t310*t373;
                double t375 = t294*t320*t321;
                double t376 = c*t297*t312*(1.0/1.8E1);
                double t377 = t317*t328*t329*2.0;
                double t378 = t295*t297*t324*t325*t326*(1.0/1.8E1);
                double t379 = c*t287*t292*t294*t295*t296*(2.0/3.0);
                double t380 = t376+t377+t378+t379-t296*t317*t327-c*t292*t295*t297*t312*(4.0/9.0);
                double t381 = c*t292*t300*t306*t312*t332*(4.0/9.0);
                double t382 = 1.0/(t295*t295*t295);
                double t383 = c*t287*t290*t292*t320*t382*(1.0/3.0);
                double t384 = c*t303*t312*t332*t334*t335*(2.0/9.0);
                double t385 = t375+t381+t383+t384-t290*t321*t380-c*t306*t312*t332*t333*(2.0/9.0)-t300*t306*t324*t325*t326*t332*(1.0/1.8E1);
                double t386 = EcP_2*EcP_3*t316*t385;
                double t387 = EcP_3*c*t306*t312*t333*(4.0/9.0);
                double t388 = EcP_3*t300*t306*t324*t325*t326*(1.0/9.0);
                double t389 = t369+t374+t386+t387+t388-t290*t307*t309*t344*(1.0/3.0)-EcP_3*c*t292*t300*t306*t312*(8.0/9.0)-EcP_3*c*t303*t312*t334*t335*(4.0/9.0);
                double t390 = EcP_1*t389;
                double t391 = 1.0/t284;
                double t392 = rho_a-rho_b;
                double t393 = t391*t392;
                double t394 = two_13*2.0;
                double t395 = t394-2.0;
                double t396 = 1.0/t395;
                double t397 = t393+1.0;
                double t398 = -t393+1.0;
                double t399 = 1.0/(t284*t284);
                double t427 = t392*t399;
                double t400 = t391-t427;
                double t402 = EcF_2*EcF_2;
                double t403 = EcF_2*EcF_3;
                double t404 = EcF_4+t402+t403;
                double t405 = 1.0/t404;
                double t406 = t290*t307*t309*t310;
                double t407 = t290*t320*t321;
                double t408 = c*t287*t292*t300*t306*t332*(1.0/3.0);
                double t409 = t407+t408;
                double t410 = EcP_2*EcP_3*t316*t409;
                double t456 = EcP_3*c*t287*t292*t300*t306*(2.0/3.0);
                double t411 = t406+t410-t456;
                double t412 = sqrt(t359);
                double t413 = 1.0/t352;
                double t414 = t412*t413;
                double t415 = atan(t414);
                double t416 = 1.0/sqrt(t359);
                double t417 = sqrt(t303);
                double t418 = 1.0/t299;
                double t419 = t417*t418;
                double t420 = atan(t419);
                double t421 = 1.0/sqrt(t303);
                double t422 = pow(t397,1.0/3.0);
                double t423 = pow(t398,1.0/3.0);
                double t424 = t399*2.0;
                double t425 = 1.0/(t284*t284*t284);
                double t426 = t424-t392*t425*2.0;
                double t428 = t400*t400;
                double t429 = t400*t422*(4.0/3.0);
                double t430 = t429-t400*t423*(4.0/3.0);
                double t431 = c*t285*t340;
                double t432 = log(t431);
                double t433 = EcF_3*t415*t416*2.0;
                double t434 = t340*t347;
                double t435 = log(t434);
                double t436 = t355*t415*t416;
                double t437 = t435+t436;
                double t438 = t432+t433-EcF_2*EcF_3*t405*t437;
                double t439 = EcF_1*t438;
                double t440 = c*t285*t297;
                double t441 = log(t440);
                double t442 = EcP_3*t420*t421*2.0;
                double t443 = t297*t317;
                double t444 = log(t443);
                double t445 = t332*t420*t421;
                double t446 = t444+t445;
                double t447 = t441+t442-EcP_2*EcP_3*t316*t446;
                double t448 = t439-EcP_1*t447;
                double t449 = t307*t310*t337*t343;
                double t450 = t337*t346*t365;
                double t451 = c*t287*t292*t355*t356*t362*(1.0/3.0);
                double t452 = t450+t451;
                double t453 = EcF_2*EcF_3*t405*t452;
                double t454 = t449+t453-EcF_3*c*t287*t292*t356*t362*(2.0/3.0);
                double t455 = EcF_1*t454;
                double t457 = t455-EcP_1*t411;
                double t458 = pow(t397,4.0/3.0);
                double t459 = pow(t398,4.0/3.0);
                double t460 = t458+t459-2.0;
                v_rho_a_rho_a[Q] += scale * EcP_1*t411*-2.0+t284*(t390-t396*t460*(t390-EcF_1*(t307*t310*t337*(c*t312*t340*(4.0/9.0)-c*t287*t339*t342*(2.0/3.0)-c*t285*t342*t349+c*t285*t350*t351*2.0)+t307*t310*t339*t343-t307*t337*t343*t344*(1.0/3.0)+EcF_2*EcF_3*t405*(-t337*t346*(c*t312*t340*(1.0/1.8E1)-t342*t347*t349+t347*t350*t351*2.0-c*t292*t312*t340*t345*(4.0/9.0)+t324*t325*t326*t340*t345*(1.0/1.8E1)+c*t287*t292*t339*t342*t345*(2.0/3.0))+t339*t346*t365-c*t312*t355*t362*t366*(2.0/9.0)+c*t292*t312*t355*t356*t362*(4.0/9.0)+c*t312*t355*t359*t367*t368*(2.0/9.0)-t324*t325*t326*t355*t356*t362*(1.0/1.8E1)+c*t287*t292*t337*1.0/(t345*t345*t345)*t365*(1.0/3.0))+EcF_3*c*t312*t362*t366*(4.0/9.0)-EcF_3*c*t292*t312*t356*t362*(8.0/9.0)-EcF_3*c*t312*t359*t367*t368*(4.0/9.0)+EcF_3*t324*t325*t326*t356*t362*(1.0/9.0)))+t396*t448*(t422*t426*(-4.0/3.0)+t423*t426*(4.0/3.0)+1.0/pow(t397,2.0/3.0)*t428*(4.0/9.0)+1.0/pow(t398,2.0/3.0)*t428*(4.0/9.0))-t396*t430*t457*2.0)+t396*t430*t448*2.0-t396*t457*t460*2.0;
            }
            
            // v_rho_a_rho_b
            if (deriv >= 2) {
                double t462 = rho_a+rho_b;
                double t463 = 1.0/pow(t462,1.0/3.0);
                double t464 = c*t463;
                double t465 = 1.0/pow(t462,4.0/3.0);
                double t466 = sqrt(t464);
                double t467 = EcP_3*t466;
                double t468 = EcP_4+t464+t467;
                double t469 = c*t465*(1.0/3.0);
                double t470 = 1.0/sqrt(t464);
                double t471 = EcP_3*c*t465*t470*(1.0/6.0);
                double t472 = t469+t471;
                double t473 = EcP_2-t466;
                double t474 = 1.0/(t468*t468);
                double t475 = 1.0/t468;
                double t476 = t466*2.0;
                double t477 = EcP_3+t476;
                double t478 = 1.0/(t477*t477);
                double t479 = EcP_4*4.0;
                double t480 = EcP_3*EcP_3;
                double t481 = t479-t480;
                double t482 = t478*t481;
                double t483 = t482+1.0;
                double t484 = 1.0/t483;
                double t485 = 1.0/c;
                double t486 = c*t465*t475*(1.0/3.0);
                double t489 = c*t463*t472*t474;
                double t487 = t486-t489;
                double t488 = pow(t462,1.0/3.0);
                double t490 = 1.0/pow(t462,7.0/3.0);
                double t491 = EcP_2*EcP_2;
                double t492 = EcP_2*EcP_3;
                double t493 = EcP_4+t491+t492;
                double t494 = 1.0/t493;
                double t495 = t473*t473;
                double t496 = t472*t474*t495;
                double t497 = c*t465*t470*t473*t475*(1.0/3.0);
                double t498 = t496+t497;
                double t499 = 1.0/(t473*t473);
                double t500 = c*t490*(4.0/9.0);
                double t501 = EcP_3*c*t470*t490*(2.0/9.0);
                double t502 = c*c;
                double t503 = 1.0/pow(t462,8.0/3.0);
                double t504 = 1.0/pow(t464,3.0/2.0);
                double t549 = EcP_3*t502*t503*t504*(1.0/3.6E1);
                double t505 = t500+t501-t549;
                double t506 = t472*t472;
                double t507 = 1.0/(t468*t468*t468);
                double t508 = EcP_2*4.0;
                double t509 = EcP_3*2.0;
                double t510 = t508+t509;
                double t511 = 1.0/(t477*t477*t477);
                double t512 = 1.0/(t477*t477*t477*t477*t477);
                double t513 = 1.0/(t483*t483);
                double t514 = EcF_3*t466;
                double t515 = EcF_4+t464+t514;
                double t516 = EcF_3*c*t465*t470*(1.0/6.0);
                double t517 = t469+t516;
                double t518 = 1.0/t515;
                double t519 = c*t465*t518*(1.0/3.0);
                double t520 = 1.0/(t515*t515);
                double t580 = c*t463*t517*t520;
                double t521 = t519-t580;
                double t522 = 1.0/pow(t462,2.0/3.0);
                double t523 = EcF_2-t466;
                double t524 = 1.0/(t523*t523);
                double t525 = t523*t523;
                double t526 = EcF_3*c*t470*t490*(2.0/9.0);
                double t527 = t500+t526-EcF_3*t502*t503*t504*(1.0/3.6E1);
                double t528 = t517*t517;
                double t529 = 1.0/(t515*t515*t515);
                double t530 = EcF_3+t476;
                double t531 = EcF_2*4.0;
                double t532 = EcF_3*2.0;
                double t533 = t531+t532;
                double t534 = 1.0/(t530*t530);
                double t535 = EcF_4*4.0;
                double t536 = EcF_3*EcF_3;
                double t537 = t535-t536;
                double t538 = t534*t537;
                double t539 = t538+1.0;
                double t540 = 1.0/t539;
                double t541 = t517*t520*t525;
                double t542 = c*t465*t470*t518*t523*(1.0/3.0);
                double t543 = t541+t542;
                double t544 = 1.0/(t530*t530*t530);
                double t545 = 1.0/(t530*t530*t530*t530*t530);
                double t546 = 1.0/(t539*t539);
                double t547 = t472*t485*t487*t488;
                double t548 = c*t475*t490*(4.0/9.0);
                double t550 = c*t463*t506*t507*2.0;
                double t551 = t548+t550-c*t465*t472*t474*(2.0/3.0)-c*t463*t474*t505;
                double t552 = t468*t485*t488*t551;
                double t553 = t472*t498*t499;
                double t554 = c*t475*t490*(1.0/1.8E1);
                double t555 = t495*t506*t507*2.0;
                double t556 = t473*t475*t502*t503*t504*(1.0/1.8E1);
                double t557 = c*t465*t470*t472*t473*t474*(2.0/3.0);
                double t558 = t554+t555+t556+t557-t474*t495*t505-c*t470*t473*t475*t490*(4.0/9.0);
                double t559 = c*t470*t478*t484*t490*t510*(4.0/9.0);
                double t560 = 1.0/(t473*t473*t473);
                double t561 = c*t465*t468*t470*t498*t560*(1.0/3.0);
                double t562 = c*t481*t490*t510*t512*t513*(2.0/9.0);
                double t563 = t553+t559+t561+t562-t468*t499*t558-c*t484*t490*t510*t511*(2.0/9.0)-t478*t484*t502*t503*t504*t510*(1.0/1.8E1);
                double t564 = EcP_2*EcP_3*t494*t563;
                double t565 = EcP_3*c*t484*t490*t511*(4.0/9.0);
                double t566 = EcP_3*t478*t484*t502*t503*t504*(1.0/9.0);
                double t567 = t547+t552+t564+t565+t566-t468*t485*t487*t522*(1.0/3.0)-EcP_3*c*t470*t478*t484*t490*(8.0/9.0)-EcP_3*c*t481*t490*t512*t513*(4.0/9.0);
                double t568 = EcP_1*t567;
                double t569 = 1.0/t462;
                double t570 = rho_a-rho_b;
                double t571 = t569*t570;
                double t572 = two_13*2.0;
                double t573 = t572-2.0;
                double t574 = 1.0/t573;
                double t575 = t571+1.0;
                double t576 = -t571+1.0;
                double t577 = 1.0/(t462*t462);
                double t578 = t570*t577;
                double t579 = t569+t578;
                double t581 = EcF_2*EcF_2;
                double t582 = EcF_2*EcF_3;
                double t583 = EcF_4+t581+t582;
                double t584 = 1.0/t583;
                double t585 = t468*t485*t487*t488;
                double t586 = t468*t498*t499;
                double t587 = c*t465*t470*t478*t484*t510*(1.0/3.0);
                double t588 = t586+t587;
                double t589 = EcP_2*EcP_3*t494*t588;
                double t601 = EcP_3*c*t465*t470*t478*t484*(2.0/3.0);
                double t590 = t585+t589-t601;
                double t591 = pow(t575,1.0/3.0);
                double t592 = pow(t576,1.0/3.0);
                double t593 = t569-t578;
                double t594 = t485*t488*t515*t521;
                double t595 = t515*t524*t543;
                double t596 = c*t465*t470*t533*t534*t540*(1.0/3.0);
                double t597 = t595+t596;
                double t598 = EcF_2*EcF_3*t584*t597;
                double t639 = EcF_3*c*t465*t470*t534*t540*(2.0/3.0);
                double t599 = t594+t598-t639;
                double t600 = EcF_1*t599;
                double t640 = EcP_1*t590;
                double t602 = t600-t640;
                double t603 = sqrt(t537);
                double t604 = 1.0/t530;
                double t605 = t603*t604;
                double t606 = atan(t605);
                double t607 = 1.0/sqrt(t537);
                double t608 = sqrt(t481);
                double t609 = 1.0/t477;
                double t610 = t608*t609;
                double t611 = atan(t610);
                double t612 = 1.0/sqrt(t481);
                double t613 = 1.0/(t462*t462*t462);
                double t614 = t579*t591*(4.0/3.0);
                double t615 = t614-t579*t592*(4.0/3.0);
                double t616 = c*t463*t518;
                double t617 = log(t616);
                double t618 = EcF_3*t606*t607*2.0;
                double t619 = t518*t525;
                double t620 = log(t619);
                double t621 = t533*t606*t607;
                double t622 = t620+t621;
                double t636 = EcF_2*EcF_3*t584*t622;
                double t623 = t617+t618-t636;
                double t624 = EcF_1*t623;
                double t625 = c*t463*t475;
                double t626 = log(t625);
                double t627 = EcP_3*t611*t612*2.0;
                double t628 = t475*t495;
                double t629 = log(t628);
                double t630 = t510*t611*t612;
                double t631 = t629+t630;
                double t637 = EcP_2*EcP_3*t494*t631;
                double t632 = t626+t627-t637;
                double t638 = EcP_1*t632;
                double t633 = t624-t638;
                double t634 = t591*t593*(4.0/3.0);
                double t635 = t634-t592*t593*(4.0/3.0);
                double t641 = pow(t575,4.0/3.0);
                double t642 = pow(t576,4.0/3.0);
                double t643 = t641+t642-2.0;
                v_rho_a_rho_b[Q] += scale * EcP_1*t590*-2.0-t462*(-t568+t574*t643*(t568-EcF_1*(t485*t488*t515*(c*t490*t518*(4.0/9.0)-c*t465*t517*t520*(2.0/3.0)-c*t463*t520*t527+c*t463*t528*t529*2.0)+t485*t488*t517*t521-t485*t515*t521*t522*(1.0/3.0)+EcF_2*EcF_3*t584*(-t515*t524*(c*t490*t518*(1.0/1.8E1)-t520*t525*t527+t525*t528*t529*2.0-c*t470*t490*t518*t523*(4.0/9.0)+t502*t503*t504*t518*t523*(1.0/1.8E1)+c*t465*t470*t517*t520*t523*(2.0/3.0))+t517*t524*t543-c*t490*t533*t540*t544*(2.0/9.0)+c*t470*t490*t533*t534*t540*(4.0/9.0)+c*t490*t533*t537*t545*t546*(2.0/9.0)-t502*t503*t504*t533*t534*t540*(1.0/1.8E1)+c*t465*t470*t515*1.0/(t523*t523*t523)*t543*(1.0/3.0))+EcF_3*c*t490*t540*t544*(4.0/9.0)-EcF_3*c*t470*t490*t534*t540*(8.0/9.0)-EcF_3*c*t490*t537*t545*t546*(4.0/9.0)+EcF_3*t502*t503*t504*t534*t540*(1.0/9.0)))+t574*t633*(1.0/pow(t575,2.0/3.0)*t579*t593*(4.0/9.0)+1.0/pow(t576,2.0/3.0)*t579*t593*(4.0/9.0)-t570*t591*t613*(8.0/3.0)+t570*t592*t613*(8.0/3.0))-t574*t602*t615+t574*t602*t635)-t574*t602*t643*2.0-t574*t615*t633+t574*t633*t635;
            }
            
            // v_rho_b_rho_b
            if (deriv >= 2) {
                double t645 = rho_a+rho_b;
                double t646 = 1.0/pow(t645,1.0/3.0);
                double t647 = c*t646;
                double t648 = 1.0/pow(t645,4.0/3.0);
                double t649 = sqrt(t647);
                double t650 = EcP_3*t649;
                double t651 = EcP_4+t647+t650;
                double t652 = c*t648*(1.0/3.0);
                double t653 = 1.0/sqrt(t647);
                double t654 = EcP_3*c*t648*t653*(1.0/6.0);
                double t655 = t652+t654;
                double t656 = EcP_2-t649;
                double t657 = 1.0/(t651*t651);
                double t658 = 1.0/t651;
                double t659 = t649*2.0;
                double t660 = EcP_3+t659;
                double t661 = 1.0/(t660*t660);
                double t662 = EcP_4*4.0;
                double t663 = EcP_3*EcP_3;
                double t664 = t662-t663;
                double t665 = t661*t664;
                double t666 = t665+1.0;
                double t667 = 1.0/t666;
                double t668 = 1.0/c;
                double t669 = c*t648*t658*(1.0/3.0);
                double t672 = c*t646*t655*t657;
                double t670 = t669-t672;
                double t671 = pow(t645,1.0/3.0);
                double t673 = 1.0/pow(t645,7.0/3.0);
                double t674 = EcP_2*EcP_2;
                double t675 = EcP_2*EcP_3;
                double t676 = EcP_4+t674+t675;
                double t677 = 1.0/t676;
                double t678 = t656*t656;
                double t679 = t655*t657*t678;
                double t680 = c*t648*t653*t656*t658*(1.0/3.0);
                double t681 = t679+t680;
                double t682 = 1.0/(t656*t656);
                double t683 = c*t673*(4.0/9.0);
                double t684 = EcP_3*c*t653*t673*(2.0/9.0);
                double t685 = c*c;
                double t686 = 1.0/pow(t645,8.0/3.0);
                double t687 = 1.0/pow(t647,3.0/2.0);
                double t732 = EcP_3*t685*t686*t687*(1.0/3.6E1);
                double t688 = t683+t684-t732;
                double t689 = t655*t655;
                double t690 = 1.0/(t651*t651*t651);
                double t691 = EcP_2*4.0;
                double t692 = EcP_3*2.0;
                double t693 = t691+t692;
                double t694 = 1.0/(t660*t660*t660);
                double t695 = 1.0/(t660*t660*t660*t660*t660);
                double t696 = 1.0/(t666*t666);
                double t697 = EcF_3*t649;
                double t698 = EcF_4+t647+t697;
                double t699 = EcF_3*c*t648*t653*(1.0/6.0);
                double t700 = t652+t699;
                double t701 = 1.0/t698;
                double t702 = c*t648*t701*(1.0/3.0);
                double t703 = 1.0/(t698*t698);
                double t763 = c*t646*t700*t703;
                double t704 = t702-t763;
                double t705 = 1.0/pow(t645,2.0/3.0);
                double t706 = EcF_2-t649;
                double t707 = 1.0/(t706*t706);
                double t708 = t706*t706;
                double t709 = EcF_3*c*t653*t673*(2.0/9.0);
                double t710 = t683+t709-EcF_3*t685*t686*t687*(1.0/3.6E1);
                double t711 = t700*t700;
                double t712 = 1.0/(t698*t698*t698);
                double t713 = EcF_3+t659;
                double t714 = EcF_2*4.0;
                double t715 = EcF_3*2.0;
                double t716 = t714+t715;
                double t717 = 1.0/(t713*t713);
                double t718 = EcF_4*4.0;
                double t719 = EcF_3*EcF_3;
                double t720 = t718-t719;
                double t721 = t717*t720;
                double t722 = t721+1.0;
                double t723 = 1.0/t722;
                double t724 = t700*t703*t708;
                double t725 = c*t648*t653*t701*t706*(1.0/3.0);
                double t726 = t724+t725;
                double t727 = 1.0/(t713*t713*t713);
                double t728 = 1.0/(t713*t713*t713*t713*t713);
                double t729 = 1.0/(t722*t722);
                double t730 = t655*t668*t670*t671;
                double t731 = c*t658*t673*(4.0/9.0);
                double t733 = c*t646*t689*t690*2.0;
                double t734 = t731+t733-c*t648*t655*t657*(2.0/3.0)-c*t646*t657*t688;
                double t735 = t651*t668*t671*t734;
                double t736 = t655*t681*t682;
                double t737 = c*t658*t673*(1.0/1.8E1);
                double t738 = t678*t689*t690*2.0;
                double t739 = t656*t658*t685*t686*t687*(1.0/1.8E1);
                double t740 = c*t648*t653*t655*t656*t657*(2.0/3.0);
                double t741 = t737+t738+t739+t740-t657*t678*t688-c*t653*t656*t658*t673*(4.0/9.0);
                double t742 = c*t653*t661*t667*t673*t693*(4.0/9.0);
                double t743 = 1.0/(t656*t656*t656);
                double t744 = c*t648*t651*t653*t681*t743*(1.0/3.0);
                double t745 = c*t664*t673*t693*t695*t696*(2.0/9.0);
                double t746 = t736+t742+t744+t745-t651*t682*t741-c*t667*t673*t693*t694*(2.0/9.0)-t661*t667*t685*t686*t687*t693*(1.0/1.8E1);
                double t747 = EcP_2*EcP_3*t677*t746;
                double t748 = EcP_3*c*t667*t673*t694*(4.0/9.0);
                double t749 = EcP_3*t661*t667*t685*t686*t687*(1.0/9.0);
                double t750 = t730+t735+t747+t748+t749-t651*t668*t670*t705*(1.0/3.0)-EcP_3*c*t653*t661*t667*t673*(8.0/9.0)-EcP_3*c*t664*t673*t695*t696*(4.0/9.0);
                double t751 = EcP_1*t750;
                double t752 = 1.0/t645;
                double t753 = rho_a-rho_b;
                double t754 = t752*t753;
                double t755 = two_13*2.0;
                double t756 = t755-2.0;
                double t757 = 1.0/t756;
                double t758 = t754+1.0;
                double t759 = -t754+1.0;
                double t760 = 1.0/(t645*t645);
                double t761 = t753*t760;
                double t762 = t752+t761;
                double t764 = EcF_2*EcF_2;
                double t765 = EcF_2*EcF_3;
                double t766 = EcF_4+t764+t765;
                double t767 = 1.0/t766;
                double t768 = t651*t668*t670*t671;
                double t769 = t651*t681*t682;
                double t770 = c*t648*t653*t661*t667*t693*(1.0/3.0);
                double t771 = t769+t770;
                double t772 = EcP_2*EcP_3*t677*t771;
                double t817 = EcP_3*c*t648*t653*t661*t667*(2.0/3.0);
                double t773 = t768+t772-t817;
                double t774 = sqrt(t720);
                double t775 = 1.0/t713;
                double t776 = t774*t775;
                double t777 = atan(t776);
                double t778 = 1.0/sqrt(t720);
                double t779 = sqrt(t664);
                double t780 = 1.0/t660;
                double t781 = t779*t780;
                double t782 = atan(t781);
                double t783 = 1.0/sqrt(t664);
                double t784 = pow(t758,1.0/3.0);
                double t785 = pow(t759,1.0/3.0);
                double t786 = t760*2.0;
                double t787 = 1.0/(t645*t645*t645);
                double t788 = t753*t787*2.0;
                double t789 = t786+t788;
                double t790 = t762*t762;
                double t791 = t762*t784*(4.0/3.0);
                double t792 = t791-t762*t785*(4.0/3.0);
                double t793 = c*t646*t701;
                double t794 = log(t793);
                double t795 = EcF_3*t777*t778*2.0;
                double t796 = t701*t708;
                double t797 = log(t796);
                double t798 = t716*t777*t778;
                double t799 = t797+t798;
                double t800 = t794+t795-EcF_2*EcF_3*t767*t799;
                double t801 = EcF_1*t800;
                double t802 = c*t646*t658;
                double t803 = log(t802);
                double t804 = EcP_3*t782*t783*2.0;
                double t805 = t658*t678;
                double t806 = log(t805);
                double t807 = t693*t782*t783;
                double t808 = t806+t807;
                double t809 = t803+t804-EcP_2*EcP_3*t677*t808;
                double t810 = t801-EcP_1*t809;
                double t811 = t668*t671*t698*t704;
                double t812 = t698*t707*t726;
                double t813 = c*t648*t653*t716*t717*t723*(1.0/3.0);
                double t814 = t812+t813;
                double t815 = EcF_2*EcF_3*t767*t814;
                double t816 = t811+t815-EcF_3*c*t648*t653*t717*t723*(2.0/3.0);
                double t818 = EcP_1*t773;
                double t819 = pow(t758,4.0/3.0);
                double t820 = pow(t759,4.0/3.0);
                double t821 = t819+t820-2.0;
                v_rho_b_rho_b[Q] += scale * EcP_1*t773*-2.0+t645*(t751-t757*t792*(t818-EcF_1*t816)*2.0-t757*t821*(t751-EcF_1*(t668*t671*t698*(c*t673*t701*(4.0/9.0)-c*t648*t700*t703*(2.0/3.0)-c*t646*t703*t710+c*t646*t711*t712*2.0)+t668*t671*t700*t704-t668*t698*t704*t705*(1.0/3.0)+EcF_2*EcF_3*t767*(-t698*t707*(c*t673*t701*(1.0/1.8E1)-t703*t708*t710+t708*t711*t712*2.0-c*t653*t673*t701*t706*(4.0/9.0)+t685*t686*t687*t701*t706*(1.0/1.8E1)+c*t648*t653*t700*t703*t706*(2.0/3.0))+t700*t707*t726-c*t673*t716*t723*t727*(2.0/9.0)+c*t653*t673*t716*t717*t723*(4.0/9.0)+c*t673*t716*t720*t728*t729*(2.0/9.0)-t685*t686*t687*t716*t717*t723*(1.0/1.8E1)+c*t648*t653*t698*1.0/(t706*t706*t706)*t726*(1.0/3.0))+EcF_3*c*t673*t723*t727*(4.0/9.0)-EcF_3*c*t653*t673*t717*t723*(8.0/9.0)-EcF_3*c*t673*t720*t728*t729*(4.0/9.0)+EcF_3*t685*t686*t687*t717*t723*(1.0/9.0)))+t757*t810*(t784*t789*(4.0/3.0)-t785*t789*(4.0/3.0)+1.0/pow(t758,2.0/3.0)*t790*(4.0/9.0)+1.0/pow(t759,2.0/3.0)*t790*(4.0/9.0)))+t757*t821*(t818-EcF_1*t816)*2.0-t757*t792*t810*2.0;
            }
            
        }
    }
}

}
