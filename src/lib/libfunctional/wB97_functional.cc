/**********************************************************
* wB97_functional.cc: definitions for wB97_functional for KS-DFT
* Robert Parrish, robparrish@gmail.com
* Autogenerated by MATLAB Script on 25-May-2011
*
***********************************************************/
#include <libmints/mints.h>
#include "wB97_functional.h"
#include <stdlib.h>
#include <cmath>
#include <string>
#include <string>
#include <vector>

using namespace psi;
using namespace boost;
using namespace std;

namespace psi { namespace functional {

wB97_Functional::wB97_Functional(int npoints, int deriv) : Functional(npoints, deriv)
{

    name_ = "wB97";
    description_ = "wB97 Range-Corrected Power Series GGA";
    citation_ = "J. Chai and M. Head-Gordon, J. Chem. Phys., 128, pp. 084106, 2008";

    double omega = 4.0000000000000002E-01;
    params_.push_back(make_pair("omega",omega));
    double c0 = -9.3052573634909974E-01;
    params_.push_back(make_pair("c0",c0));
    double two_13 = 1.2599210498948732E+00;
    params_.push_back(make_pair("two_13",two_13));
    double d2fz0 = 1.7099210000000000E+00;
    params_.push_back(make_pair("d2fz0",d2fz0));
    double c = 6.2035049089939986E-01;
    params_.push_back(make_pair("c",c));
    double Aa = 1.6886999999999999E-02;
    params_.push_back(make_pair("Aa",Aa));
    double a1a = 1.1125000000000000E-01;
    params_.push_back(make_pair("a1a",a1a));
    double b1a = 1.0356999999999999E+01;
    params_.push_back(make_pair("b1a",b1a));
    double b2a = 3.6231000000000000E+00;
    params_.push_back(make_pair("b2a",b2a));
    double b3a = 8.8026000000000004E-01;
    params_.push_back(make_pair("b3a",b3a));
    double b4a = 4.9670999999999998E-01;
    params_.push_back(make_pair("b4a",b4a));
    double c0p = 3.1091000000000001E-02;
    params_.push_back(make_pair("c0p",c0p));
    double a1p = 2.1370000000000000E-01;
    params_.push_back(make_pair("a1p",a1p));
    double b1p = 7.5956999999999999E+00;
    params_.push_back(make_pair("b1p",b1p));
    double b2p = 3.5876000000000001E+00;
    params_.push_back(make_pair("b2p",b2p));
    double b3p = 1.6382000000000001E+00;
    params_.push_back(make_pair("b3p",b3p));
    double b4p = 4.9293999999999999E-01;
    params_.push_back(make_pair("b4p",b4p));
    double c0f = 1.5545000000000000E-02;
    params_.push_back(make_pair("c0f",c0f));
    double a1f = 2.0548000000000000E-01;
    params_.push_back(make_pair("a1f",a1f));
    double b1f = 1.4118900000000000E+01;
    params_.push_back(make_pair("b1f",b1f));
    double b2f = 6.1977000000000002E+00;
    params_.push_back(make_pair("b2f",b2f));
    double b3f = 3.3662000000000001E+00;
    params_.push_back(make_pair("b3f",b3f));
    double b4f = 6.2517000000000000E-01;
    params_.push_back(make_pair("b4f",b4f));
    double gcab = 6.0000000000000001E-03;
    params_.push_back(make_pair("gcab",gcab));
    double gcaa = 2.0000000000000001E-01;
    params_.push_back(make_pair("gcaa",gcaa));
    double gx = 4.0000000000000001E-03;
    params_.push_back(make_pair("gx",gx));
    double ccab0 = 1.0000000000000000E+00;
    params_.push_back(make_pair("ccab0",ccab0));
    double ccab1 = 3.9905100000000000E+00;
    params_.push_back(make_pair("ccab1",ccab1));
    double ccab2 = -1.7006600000000000E+01;
    params_.push_back(make_pair("ccab2",ccab2));
    double ccab3 = 1.0729200000000001E+00;
    params_.push_back(make_pair("ccab3",ccab3));
    double ccab4 = 8.8821100000000008E+00;
    params_.push_back(make_pair("ccab4",ccab4));
    double ccaa0 = 1.0000000000000000E+00;
    params_.push_back(make_pair("ccaa0",ccaa0));
    double ccaa1 = -2.5535199999999998E+00;
    params_.push_back(make_pair("ccaa1",ccaa1));
    double ccaa2 = 1.1892600000000000E+01;
    params_.push_back(make_pair("ccaa2",ccaa2));
    double ccaa3 = -2.6945200000000000E+01;
    params_.push_back(make_pair("ccaa3",ccaa3));
    double ccaa4 = 1.7092700000000001E+01;
    params_.push_back(make_pair("ccaa4",ccaa4));
    double cx0 = 1.0000000000000000E+00;
    params_.push_back(make_pair("cx0",cx0));
    double cx1 = 1.1311599999999999E+00;
    params_.push_back(make_pair("cx1",cx1));
    double cx2 = -2.7491500000000002E+00;
    params_.push_back(make_pair("cx2",cx2));
    double cx3 = 1.2090000000000000E+01;
    params_.push_back(make_pair("cx3",cx3));
    double cx4 = -5.7164200000000003E+00;
    params_.push_back(make_pair("cx4",cx4));

    is_gga_ = true;
    is_meta_ = false;

    //Required allocateion
    allocate();
}
wB97_Functional::~wB97_Functional()
{
}
void wB97_Functional::computeRKSFunctional(boost::shared_ptr<RKSFunctions> prop)
{
    int ntrue = prop->npoints();

    const double* restrict rho_a;
    const double* restrict gamma_aa;
    const double* restrict tau_a;

    rho_a = prop->property_value("RHO_A")->pointer();
    if (is_gga_) {
        gamma_aa = prop->property_value("GAMMA_AA")->pointer();
    }
    if (is_meta_) {
        tau_a = prop->property_value("TAU_A")->pointer();
    }

    double omega = params_[0].second;
    double c0 = params_[1].second;
    double two_13 = params_[2].second;
    double d2fz0 = params_[3].second;
    double c = params_[4].second;
    double Aa = params_[5].second;
    double a1a = params_[6].second;
    double b1a = params_[7].second;
    double b2a = params_[8].second;
    double b3a = params_[9].second;
    double b4a = params_[10].second;
    double c0p = params_[11].second;
    double a1p = params_[12].second;
    double b1p = params_[13].second;
    double b2p = params_[14].second;
    double b3p = params_[15].second;
    double b4p = params_[16].second;
    double c0f = params_[17].second;
    double a1f = params_[18].second;
    double b1f = params_[19].second;
    double b2f = params_[20].second;
    double b3f = params_[21].second;
    double b4f = params_[22].second;
    double gcab = params_[23].second;
    double gcaa = params_[24].second;
    double gx = params_[25].second;
    double ccab0 = params_[26].second;
    double ccab1 = params_[27].second;
    double ccab2 = params_[28].second;
    double ccab3 = params_[29].second;
    double ccab4 = params_[30].second;
    double ccaa0 = params_[31].second;
    double ccaa1 = params_[32].second;
    double ccaa2 = params_[33].second;
    double ccaa3 = params_[34].second;
    double ccaa4 = params_[35].second;
    double cx0 = params_[36].second;
    double cx1 = params_[37].second;
    double cx2 = params_[38].second;
    double cx3 = params_[39].second;
    double cx4 = params_[40].second;

    //Functional
    for (int index = 0; index < ntrue; index++) {

        //Functional Value
        if (rho_a[index] > cutoff_) {
            double t104299 = 1.0/pow(rho_a[index],1.0/3.0);
            double t104300 = c*t104299;
            double t104301 = sqrt(t104300);
            double t104302 = pow(t104300,3.0/2.0);
            double t104303 = c*c;
            double t104304 = 1.0/pow(rho_a[index],2.0/3.0);
            double t104305 = 1.0/c0p;
            double t104306 = b1p*t104301;
            double t104307 = b3p*t104302;
            double t104308 = b4p*t104303*t104304;
            double t104309 = b2p*c*t104299;
            double t104310 = t104306+t104307+t104308+t104309;
            double t104311 = 1.0/t104310;
            double t104312 = t104311*t104305*(1.0/2.0);
            double t104313 = t104312+1.0;
            double t104314 = log(t104313);
            double t104315 = a1p*c*t104299;
            double t104316 = t104315+1.0;
            double t104317 = rho_a[index]*2.0;
            double t104318 = 1.0/pow(t104317,1.0/3.0);
            double t104319 = c*t104318;
            double t104320 = gamma_aa[index]*gamma_aa[index];
            double t104321 = gcab*gcab;
            double t104322 = t104320*t104320;
            double t104323 = t104321*t104321;
            double t104324 = 1.0/pow(rho_a[index],3.2E1/3.0);
            double t104325 = 1.0/pow(rho_a[index],8.0/3.0);
            double t104326 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]);
            double t104327 = 1.0/pow(rho_a[index],1.6E1/3.0);
            double t104328 = pow(2.0,1.0/3.0);
            double t104329 = t104328*2.0;
            double t104330 = t104329-2.0;
            double t104331 = two_13*2.0;
            double t104332 = t104331-2.0;
            double t104333 = 1.0/t104332;
            double t104334 = 1.0/c0f;
            double t104335 = b1f*t104301;
            double t104336 = b3f*t104302;
            double t104337 = b4f*t104303*t104304;
            double t104338 = b2f*c*t104299;
            double t104339 = t104335+t104336+t104337+t104338;
            double t104340 = 1.0/t104339;
            double t104341 = t104340*t104334*(1.0/2.0);
            double t104342 = t104341+1.0;
            double t104343 = log(t104342);
            double t104344 = a1f*c*t104299;
            double t104345 = t104344+1.0;
            double t104346 = c0f*t104343*t104345*2.0;
            double t104347 = c0p*t104314*t104316*2.0;
            double t104348 = gcaa*gcaa;
            double t104349 = t104348*t104348;
            double t104350 = rho_a[index]*(8.334140006820045E15/1.40737488355328E14);
            double t104351 = omega*omega;
            double t104352 = 1.0/rho_a[index];
            double t104353 = omega*t104351*t104352*(7.0368744177664E13/8.334140006820045E15);
            double t104354 = 1.0/pow(t104350,1.0/3.0);
            double t104355 = gx*gx;
            double t104356 = t104355*t104355;
            functional_[index] = (rho_a[index]*(t104347+t104330*t104333*(t104346-c0p*t104314*t104316*2.0))*2.0- \
               c0p*rho_a[index]*log((t104305*(1.0/2.0))/(b1p*sqrt(t104319)+b3p*pow(t104319,3.0/2.0)+b4p*t104303*1.0/ \
               pow(t104317,2.0/3.0)+b2p*c*t104318)+1.0)*(a1p*c*t104318+1.0)*4.0)*(ccab0+(ccab2*t104320*t104321*t104327) \
               /(gamma_aa[index]*gcab*t104325*2.0+t104320*t104321*t104327+1.0)+(ccab1*gamma_aa[index]*gcab*t104325) \
               /(gamma_aa[index]*gcab*t104325+1.0)+(ccab4*t104322*t104323*t104324)/(gamma_aa[index]*gcab*t104325* \
               4.0+t104320*t104321*t104327*6.0+t104322*t104323*t104324+gamma_aa[index]*gcab*t104320*t104321*t104326* \
               4.0+1.0)+(ccab3*gamma_aa[index]*gcab*t104320*t104321*t104326)/(gamma_aa[index]*gcab*t104325*3.0+t104320* \
               t104321*t104327*3.0+gamma_aa[index]*gcab*t104320*t104321*t104326+1.0))-rho_a[index]*(t104347+t104330* \
               t104333*(t104346-t104347))*(ccaa0+(ccaa2*t104320*t104327*t104348)/(gamma_aa[index]*gcaa*t104325*2.0+ \
               t104320*t104327*t104348+1.0)+(ccaa1*gamma_aa[index]*gcaa*t104325)/(gamma_aa[index]*gcaa*t104325+1.0) \
               +(ccaa4*t104322*t104324*t104349)/(gamma_aa[index]*gcaa*t104325*4.0+t104320*t104327*t104348*6.0+t104322* \
               t104324*t104349+gamma_aa[index]*gcaa*t104320*t104326*t104348*4.0+1.0)+(ccaa3*gamma_aa[index]*gcaa* \
               t104320*t104326*t104348)/(gamma_aa[index]*gcaa*t104325*3.0+t104320*t104327*t104348*3.0+gamma_aa[index]* \
               gcaa*t104320*t104326*t104348+1.0))*2.0-c0*pow(rho_a[index],4.0/3.0)*(omega*t104354*(t104353+erf(pow(t104350,1.0/ \
               3.0)/omega)*(3.991211251234741E15/2.251799813685248E15)-omega*t104354*(3.0/2.0)-exp(-1.0/(omega*omega) \
               *pow(t104350,2.0/3.0))*(t104353-omega*t104354))*(4.0/3.0)-1.0)*(cx0+(cx2*t104320*t104327*t104355)/ \
               (gamma_aa[index]*gx*t104325*2.0+t104320*t104327*t104355+1.0)+(cx1*gamma_aa[index]*gx*t104325)/(gamma_aa[index]* \
               gx*t104325+1.0)+(cx4*t104322*t104324*t104356)/(gamma_aa[index]*gx*t104325*4.0+t104320*t104327*t104355* \
               6.0+t104322*t104324*t104356+gamma_aa[index]*gx*t104320*t104326*t104355*4.0+1.0)+(cx3*gamma_aa[index]* \
               gx*t104320*t104326*t104355)/(gamma_aa[index]*gx*t104325*3.0+t104320*t104327*t104355*3.0+gamma_aa[index]* \
               gx*t104320*t104326*t104355+1.0))*2.0;
        } else {
            functional_[index] = 0.0;
        }

    }
    //First Partials
    for (int index = 0; index < ntrue && deriv_ >= 1; index++) {

        //V_rho_a
        if (rho_a[index] > cutoff_) {
            double t104358 = gamma_aa[index]*gamma_aa[index];
            double t104359 = gcab*gcab;
            double t104360 = t104358*t104358;
            double t104361 = t104359*t104359;
            double t104362 = 1.0/pow(rho_a[index],3.2E1/3.0);
            double t104363 = 1.0/pow(rho_a[index],8.0/3.0);
            double t104364 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]);
            double t104365 = 1.0/pow(rho_a[index],1.6E1/3.0);
            double t104366 = rho_a[index]*2.0;
            double t104367 = 1.0/pow(t104366,1.0/3.0);
            double t104368 = c*t104367;
            double t104369 = sqrt(t104368);
            double t104370 = b1p*t104369;
            double t104371 = pow(t104368,3.0/2.0);
            double t104372 = b3p*t104371;
            double t104373 = b2p*c*t104367;
            double t104374 = c*c;
            double t104375 = 1.0/pow(t104366,2.0/3.0);
            double t104376 = b4p*t104374*t104375;
            double t104377 = t104370+t104372+t104373+t104376;
            double t104378 = 1.0/pow(t104366,4.0/3.0);
            double t104379 = 1.0/c0p;
            double t104380 = 1.0/t104377;
            double t104381 = t104380*t104379*(1.0/2.0);
            double t104382 = t104381+1.0;
            double t104383 = 1.0/pow(rho_a[index],1.0/3.0);
            double t104384 = c*t104383;
            double t104385 = sqrt(t104384);
            double t104386 = b1f*t104385;
            double t104387 = pow(t104384,3.0/2.0);
            double t104388 = b3f*t104387;
            double t104389 = 1.0/pow(rho_a[index],2.0/3.0);
            double t104390 = b4f*t104374*t104389;
            double t104391 = b2f*c*t104383;
            double t104392 = t104390+t104391+t104386+t104388;
            double t104393 = 1.0/pow(rho_a[index],4.0/3.0);
            double t104394 = b1p*t104385;
            double t104395 = b3p*t104387;
            double t104396 = b4p*t104374*t104389;
            double t104397 = b2p*c*t104383;
            double t104398 = t104394+t104395+t104396+t104397;
            double t104399 = 1.0/pow(rho_a[index],5.0/3.0);
            double t104400 = 1.0/sqrt(t104384);
            double t104401 = 1.0/c0f;
            double t104402 = 1.0/t104392;
            double t104403 = t104401*t104402*(1.0/2.0);
            double t104404 = t104403+1.0;
            double t104405 = 1.0/t104398;
            double t104406 = t104405*t104379*(1.0/2.0);
            double t104407 = t104406+1.0;
            double t104408 = a1p*c*t104383;
            double t104409 = t104408+1.0;
            double t104410 = 1.0/t104407;
            double t104411 = 1.0/(t104398*t104398);
            double t104412 = b4p*t104374*t104399*(2.0/3.0);
            double t104413 = b2p*c*t104393*(1.0/3.0);
            double t104414 = b1p*c*t104400*t104393*(1.0/6.0);
            double t104415 = b3p*c*t104393*t104385*(1.0/2.0);
            double t104416 = t104412+t104413+t104414+t104415;
            double t104417 = t104410*t104411*t104416*t104409;
            double t104418 = log(t104407);
            double t104419 = log(t104382);
            double t104420 = a1p*c*t104367;
            double t104421 = t104420+1.0;
            double t104422 = pow(2.0,1.0/3.0);
            double t104423 = t104422*2.0;
            double t104424 = t104423-2.0;
            double t104425 = two_13*2.0;
            double t104426 = t104425-2.0;
            double t104427 = 1.0/t104426;
            double t104428 = log(t104404);
            double t104429 = a1f*c*t104383;
            double t104430 = t104429+1.0;
            double t104431 = c0f*t104430*t104428*2.0;
            double t104433 = c0p*t104409*t104418*2.0;
            double t104432 = t104431-t104433;
            double t104434 = gcaa*gcaa;
            double t104435 = t104434*t104434;
            double t104436 = t104432*t104424*t104427;
            double t104437 = t104433+t104436;
            double t104438 = gamma_aa[index]*gcab*t104363*4.0;
            double t104439 = gamma_aa[index]*gcab*t104364*t104358*t104359*4.0;
            double t104440 = t104365*t104358*t104359*6.0;
            double t104441 = t104360*t104361*t104362;
            double t104442 = t104440+t104441+t104438+t104439+1.0;
            double t104443 = 1.0/t104442;
            double t104444 = gamma_aa[index]*gcab*t104363;
            double t104445 = t104444+1.0;
            double t104446 = 1.0/t104445;
            double t104447 = gamma_aa[index]*gcab*t104363*3.0;
            double t104448 = gamma_aa[index]*gcab*t104364*t104358*t104359;
            double t104449 = t104365*t104358*t104359*3.0;
            double t104450 = t104447+t104448+t104449+1.0;
            double t104451 = 1.0/t104450;
            double t104452 = gamma_aa[index]*gcab*t104363*2.0;
            double t104453 = t104365*t104358*t104359;
            double t104454 = t104452+t104453+1.0;
            double t104455 = 1.0/t104454;
            double t104456 = 1.0/pow(rho_a[index],1.9E1/3.0);
            double t104457 = 1.0/pow(rho_a[index],1.1E1/3.0);
            double t104458 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]*rho_a[index]);
            double t104459 = 1.0/pow(rho_a[index],3.5E1/3.0);
            double t104460 = gamma_aa[index]*gcaa*t104363*4.0;
            double t104461 = gamma_aa[index]*gcaa*t104434*t104364*t104358*4.0;
            double t104462 = t104434*t104365*t104358*6.0;
            double t104463 = t104360*t104362*t104435;
            double t104464 = t104460+t104461+t104462+t104463+1.0;
            double t104465 = 1.0/t104464;
            double t104466 = gamma_aa[index]*gcaa*t104363;
            double t104467 = t104466+1.0;
            double t104468 = 1.0/t104467;
            double t104469 = gamma_aa[index]*gcaa*t104363*3.0;
            double t104470 = gamma_aa[index]*gcaa*t104434*t104364*t104358;
            double t104471 = t104434*t104365*t104358*3.0;
            double t104472 = t104470+t104471+t104469+1.0;
            double t104473 = 1.0/t104472;
            double t104474 = gamma_aa[index]*gcaa*t104363*2.0;
            double t104475 = t104434*t104365*t104358;
            double t104476 = t104474+t104475+1.0;
            double t104477 = 1.0/t104476;
            double t104478 = 1.0/t104404;
            double t104479 = 1.0/(t104392*t104392);
            double t104480 = b4f*t104374*t104399*(2.0/3.0);
            double t104481 = b2f*c*t104393*(1.0/3.0);
            double t104482 = b1f*c*t104400*t104393*(1.0/6.0);
            double t104483 = b3f*c*t104393*t104385*(1.0/2.0);
            double t104484 = t104480+t104481+t104482+t104483;
            double t104485 = a1f*c*c0f*t104428*t104393*(2.0/3.0);
            double t104486 = a1p*c*c0p*t104418*t104393*(2.0/3.0);
            double t104487 = ccaa4*t104360*t104362*t104435*t104465;
            double t104488 = ccaa1*gamma_aa[index]*gcaa*t104363*t104468;
            double t104489 = ccaa3*gamma_aa[index]*gcaa*t104434*t104364*t104473*t104358;
            double t104490 = ccaa2*t104434*t104365*t104358*t104477;
            double t104491 = ccaa0+t104490+t104487+t104488+t104489;
            double t104492 = omega*omega;
            double t104493 = rho_a[index]*(8.334140006820045E15/1.40737488355328E14);
            double t104494 = 1.0/(rho_a[index]*rho_a[index]);
            double t104495 = 1.0/pow(t104493,4.0/3.0);
            double t104496 = 1.0/(omega*omega);
            double t104497 = pow(t104493,2.0/3.0);
            double t104499 = t104496*t104497;
            double t104498 = exp(-t104499);
            double t104500 = 1.0/pow(t104493,1.0/3.0);
            double t104501 = 1.0/omega;
            double t104502 = 1.0/rho_a[index];
            double t104503 = omega*t104502*t104492*(7.0368744177664E13/8.334140006820045E15);
            double t104504 = omega*t104500;
            double t104505 = gx*gx;
            double t104506 = t104505*t104505;
            double t104507 = pow(t104493,1.0/3.0);
            double t104508 = t104501*t104507;
            double t104509 = erf(t104508);
            double t104510 = t104509*(3.991211251234741E15/2.251799813685248E15);
            double t104511 = t104503-t104504;
            double t104537 = t104511*t104498;
            double t104538 = omega*t104500*(3.0/2.0);
            double t104512 = t104510+t104503-t104537-t104538;
            double t104513 = gamma_aa[index]*gx*t104363*4.0;
            double t104514 = gamma_aa[index]*gx*t104505*t104364*t104358*4.0;
            double t104515 = t104505*t104365*t104358*6.0;
            double t104516 = t104360*t104362*t104506;
            double t104517 = t104513+t104514+t104515+t104516+1.0;
            double t104518 = 1.0/t104517;
            double t104519 = cx4*t104360*t104362*t104506*t104518;
            double t104520 = gamma_aa[index]*gx*t104363;
            double t104521 = t104520+1.0;
            double t104522 = 1.0/t104521;
            double t104523 = cx1*gamma_aa[index]*gx*t104522*t104363;
            double t104524 = gamma_aa[index]*gx*t104363*3.0;
            double t104525 = gamma_aa[index]*gx*t104505*t104364*t104358;
            double t104526 = t104505*t104365*t104358*3.0;
            double t104527 = t104524+t104525+t104526+1.0;
            double t104528 = 1.0/t104527;
            double t104529 = cx3*gamma_aa[index]*gx*t104505*t104364*t104528*t104358;
            double t104530 = gamma_aa[index]*gx*t104363*2.0;
            double t104531 = t104505*t104365*t104358;
            double t104532 = t104530+t104531+1.0;
            double t104533 = 1.0/t104532;
            double t104534 = cx2*t104505*t104533*t104365*t104358;
            double t104535 = cx0+t104523+t104534+t104519+t104529;
            double t104536 = pow(rho_a[index],4.0/3.0);
            double t104539 = omega*t104500*t104512*(4.0/3.0);
            double t104540 = t104539-1.0;
            v_rho_a_[index] = -(rho_a[index]*t104437*2.0-c0p*rho_a[index]*t104421*t104419*4.0)*(ccab1*gamma_aa[index]* \
               gcab*t104446*t104457*(4.0/3.0)+ccab4*t104360*t104361*t104443*t104459*(1.6E1/3.0)+ccab2*t104455*t104456* \
               t104358*t104359*(8.0/3.0)-ccab1*1.0/(t104445*t104445)*t104456*t104358*t104359*(4.0/3.0)-ccab2*1.0/ \
               (t104454*t104454)*t104365*t104358*t104359*(gamma_aa[index]*gcab*t104457*(8.0/3.0)+t104456*t104358* \
               t104359*(8.0/3.0))-ccab4*t104360*t104361*1.0/(t104442*t104442)*t104362*(gamma_aa[index]*gcab*t104457* \
               (1.6E1/3.0)+t104360*t104361*t104459*(1.6E1/3.0)+t104456*t104358*t104359*1.6E1+gamma_aa[index]*gcab* \
               t104358*t104359*t104458*1.6E1)+ccab3*gamma_aa[index]*gcab*t104451*t104358*t104359*t104458*4.0-ccab3* \
               gamma_aa[index]*gcab*1.0/(t104450*t104450)*t104364*t104358*t104359*(gamma_aa[index]*gcab*t104457*4.0+ \
               t104456*t104358*t104359*8.0+gamma_aa[index]*gcab*t104358*t104359*t104458*4.0))-t104437*t104491-(rho_a[index]* \
               ((t104421*1.0/(t104377*t104377)*(b4p*t104374*1.0/pow(t104366,5.0/3.0)*(2.0/3.0)+b2p*c*t104378*(1.0/ \
               3.0)+b3p*c*t104369*t104378*(1.0/2.0)+b1p*c*1.0/sqrt(t104368)*t104378*(1.0/6.0)))/t104382-a1p*c*c0p* \
               t104419*t104378*(2.0/3.0))*2.0+rho_a[index]*(-t104417+t104486+t104424*t104427*(t104417+t104485-t104430* \
               t104484*t104478*t104479-a1p*c*c0p*t104418*t104393*(2.0/3.0)))+c0p*t104421*t104419*2.0-c0p*t104409* \
               t104418*2.0-t104432*t104424*t104427)*(ccab0+ccab1*gamma_aa[index]*gcab*t104363*t104446+ccab4*t104360* \
               t104361*t104362*t104443+ccab2*t104365*t104455*t104358*t104359+ccab3*gamma_aa[index]*gcab*t104451*t104364* \
               t104358*t104359)+rho_a[index]*t104437*(ccaa1*gamma_aa[index]*gcaa*t104457*t104468*(8.0/3.0)+ccaa4* \
               t104360*t104435*t104465*t104459*(3.2E1/3.0)+ccaa2*t104434*t104456*t104358*t104477*(1.6E1/3.0)-ccaa1* \
               t104434*t104456*t104358*1.0/(t104467*t104467)*(8.0/3.0)-ccaa2*t104434*t104365*t104358*1.0/(t104476* \
               t104476)*(gamma_aa[index]*gcaa*t104457*(1.6E1/3.0)+t104434*t104456*t104358*(1.6E1/3.0))-ccaa4*t104360* \
               t104362*t104435*1.0/(t104464*t104464)*(gamma_aa[index]*gcaa*t104457*(3.2E1/3.0)+t104360*t104435*t104459* \
               (3.2E1/3.0)+t104434*t104456*t104358*3.2E1+gamma_aa[index]*gcaa*t104434*t104358*t104458*3.2E1)+ccaa3* \
               gamma_aa[index]*gcaa*t104434*t104473*t104358*t104458*8.0-ccaa3*gamma_aa[index]*gcaa*t104434*t104364* \
               1.0/(t104472*t104472)*t104358*(gamma_aa[index]*gcaa*t104457*8.0+t104434*t104456*t104358*1.6E1+gamma_aa[index]* \
               gcaa*t104434*t104358*t104458*8.0))+rho_a[index]*t104491*(-t104417+t104486+t104424*t104427*(t104417+ \
               t104485-t104486-t104430*t104484*t104478*t104479))-c0*pow(rho_a[index],1.0/3.0)*t104540*t104535*(4.0/ \
               3.0)+c0*t104535*t104536*(omega*t104500*(omega*t104495*(-8.334140006820045E15/2.81474976710656E14)+ \
               t104498*(omega*t104495*(2.778046668940015E15/1.40737488355328E14)-omega*t104492*t104494*(7.0368744177664E13/ \
               8.334140006820045E15))+omega*t104492*t104494*(7.0368744177664E13/8.334140006820045E15)+t104500*t104496* \
               t104498*(t104504-omega*t104502*t104492*(7.0368744177664E13/8.334140006820045E15))*(2.778046668940015E15/ \
               7.0368744177664E13)-1.0/sqrt(3.141592653589793)*t104501*1.0/pow(t104493,2.0/3.0)*t104498*(1.108777112152858E31/ \
               1.584563250285287E29))*(4.0/3.0)+omega*t104512*t104495*(2.778046668940015E15/1.05553116266496E14)) \
               +c0*t104540*t104536*(cx1*gamma_aa[index]*gx*t104522*t104457*(8.0/3.0)+cx2*t104505*t104533*t104456* \
               t104358*(1.6E1/3.0)+cx4*t104360*t104506*t104518*t104459*(3.2E1/3.0)-cx1*1.0/(t104521*t104521)*t104505* \
               t104456*t104358*(8.0/3.0)-cx2*t104505*1.0/(t104532*t104532)*t104365*t104358*(gamma_aa[index]*gx*t104457* \
               (1.6E1/3.0)+t104505*t104456*t104358*(1.6E1/3.0))-cx4*t104360*t104362*t104506*1.0/(t104517*t104517) \
               *(gamma_aa[index]*gx*t104457*(3.2E1/3.0)+t104360*t104506*t104459*(3.2E1/3.0)+t104505*t104456*t104358* \
               3.2E1+gamma_aa[index]*gx*t104505*t104358*t104458*3.2E1)+cx3*gamma_aa[index]*gx*t104505*t104528*t104358* \
               t104458*8.0-cx3*gamma_aa[index]*gx*t104505*t104364*1.0/(t104527*t104527)*t104358*(gamma_aa[index]* \
               gx*t104457*8.0+t104505*t104456*t104358*1.6E1+gamma_aa[index]*gx*t104505*t104358*t104458*8.0));
        } else {
            v_rho_a_[index] = 0.0;
        }

        if (is_gga_) {

            if (rho_a[index] > cutoff_) {
                double t104542 = 1.0/pow(rho_a[index],1.0/3.0);
                double t104543 = c*t104542;
                double t104544 = sqrt(t104543);
                double t104545 = pow(t104543,3.0/2.0);
                double t104546 = c*c;
                double t104547 = 1.0/pow(rho_a[index],2.0/3.0);
                double t104548 = 1.0/c0p;
                double t104549 = b1p*t104544;
                double t104550 = b3p*t104545;
                double t104551 = b4p*t104546*t104547;
                double t104552 = b2p*c*t104542;
                double t104553 = t104550+t104551+t104552+t104549;
                double t104554 = 1.0/t104553;
                double t104555 = t104554*t104548*(1.0/2.0);
                double t104556 = t104555+1.0;
                double t104557 = log(t104556);
                double t104558 = a1p*c*t104542;
                double t104559 = t104558+1.0;
                double t104560 = rho_a[index]*2.0;
                double t104561 = 1.0/pow(t104560,1.0/3.0);
                double t104562 = c*t104561;
                double t104563 = 1.0/pow(rho_a[index],8.0/3.0);
                double t104564 = gamma_aa[index]*gamma_aa[index];
                double t104565 = gcab*gcab;
                double t104566 = t104565*t104565;
                double t104567 = 1.0/pow(rho_a[index],3.2E1/3.0);
                double t104568 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t104569 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t104570 = gamma_aa[index]*gcab*t104563;
                double t104571 = t104570+1.0;
                double t104572 = gamma_aa[index]*gcab*t104563*3.0;
                double t104573 = gamma_aa[index]*gcab*t104564*t104565*t104569;
                double t104574 = t104564*t104565*t104568*3.0;
                double t104575 = t104572+t104573+t104574+1.0;
                double t104576 = t104564*t104564;
                double t104577 = gamma_aa[index]*gcab*t104563*4.0;
                double t104578 = gamma_aa[index]*gcab*t104564*t104565*t104569*4.0;
                double t104579 = t104564*t104565*t104568*6.0;
                double t104580 = t104566*t104567*t104576;
                double t104581 = t104580+t104577+t104578+t104579+1.0;
                double t104582 = gamma_aa[index]*gcab*t104563*2.0;
                double t104583 = t104564*t104565*t104568;
                double t104584 = t104582+t104583+1.0;
                double t104585 = pow(2.0,1.0/3.0);
                double t104586 = t104585*2.0;
                double t104587 = t104586-2.0;
                double t104588 = two_13*2.0;
                double t104589 = t104588-2.0;
                double t104590 = 1.0/t104589;
                double t104591 = 1.0/c0f;
                double t104592 = b1f*t104544;
                double t104593 = b3f*t104545;
                double t104594 = b4f*t104546*t104547;
                double t104595 = b2f*c*t104542;
                double t104596 = t104592+t104593+t104594+t104595;
                double t104597 = 1.0/t104596;
                double t104598 = t104591*t104597*(1.0/2.0);
                double t104599 = t104598+1.0;
                double t104600 = log(t104599);
                double t104601 = a1f*c*t104542;
                double t104602 = t104601+1.0;
                double t104603 = c0f*t104600*t104602*2.0;
                double t104604 = c0p*t104557*t104559*2.0;
                double t104605 = gcaa*gcaa;
                double t104606 = t104605*t104605;
                double t104607 = gamma_aa[index]*gcaa*t104563;
                double t104608 = t104607+1.0;
                double t104609 = gamma_aa[index]*gcaa*t104563*3.0;
                double t104610 = gamma_aa[index]*gcaa*t104605*t104564*t104569;
                double t104611 = t104605*t104564*t104568*3.0;
                double t104612 = t104610+t104611+t104609+1.0;
                double t104613 = gamma_aa[index]*gcaa*t104563*4.0;
                double t104614 = gamma_aa[index]*gcaa*t104605*t104564*t104569*4.0;
                double t104615 = t104605*t104564*t104568*6.0;
                double t104616 = t104606*t104567*t104576;
                double t104617 = t104613+t104614+t104615+t104616+1.0;
                double t104618 = gamma_aa[index]*gcaa*t104563*2.0;
                double t104619 = t104605*t104564*t104568;
                double t104620 = t104618+t104619+1.0;
                double t104621 = rho_a[index]*(8.334140006820045E15/1.40737488355328E14);
                double t104622 = omega*omega;
                double t104623 = 1.0/rho_a[index];
                double t104624 = omega*t104622*t104623*(7.0368744177664E13/8.334140006820045E15);
                double t104625 = 1.0/pow(t104621,1.0/3.0);
                double t104626 = gx*gx;
                double t104627 = t104626*t104626;
                double t104628 = gamma_aa[index]*gx*t104563;
                double t104629 = t104628+1.0;
                double t104630 = gamma_aa[index]*gx*t104563*3.0;
                double t104631 = gamma_aa[index]*gx*t104626*t104564*t104569;
                double t104632 = t104626*t104564*t104568*3.0;
                double t104633 = t104630+t104631+t104632+1.0;
                double t104634 = gamma_aa[index]*gx*t104563*4.0;
                double t104635 = gamma_aa[index]*gx*t104626*t104564*t104569*4.0;
                double t104636 = t104626*t104564*t104568*6.0;
                double t104637 = t104627*t104567*t104576;
                double t104638 = t104634+t104635+t104636+t104637+1.0;
                double t104639 = gamma_aa[index]*gx*t104563*2.0;
                double t104640 = t104626*t104564*t104568;
                double t104641 = t104640+t104639+1.0;
                v_gamma_aa_[index] = (rho_a[index]*(t104604+t104590*t104587*(t104603-c0p*t104557*t104559*2.0))*2.0- \
                   c0p*rho_a[index]*log((t104548*(1.0/2.0))/(b1p*sqrt(t104562)+b3p*pow(t104562,3.0/2.0)+b4p*1.0/pow(t104560,2.0/ \
                   3.0)*t104546+b2p*c*t104561)+1.0)*(a1p*c*t104561+1.0)*4.0)*((ccab1*gcab*t104563*(1.0/2.0))/t104571- \
                   ccab1*gamma_aa[index]*1.0/(t104571*t104571)*t104565*t104568*(1.0/2.0)+(ccab2*gamma_aa[index]*t104565* \
                   t104568)/t104584-ccab2*t104564*t104565*1.0/(t104584*t104584)*t104568*(gcab*t104563+gamma_aa[index]* \
                   t104565*t104568)+(ccab4*gamma_aa[index]*t104564*t104566*t104567*2.0)/t104581+(ccab3*gcab*t104564*t104565* \
                   t104569*(3.0/2.0))/t104575-ccab4*1.0/(t104581*t104581)*t104566*t104567*t104576*(gcab*t104563*2.0+gamma_aa[index]* \
                   t104565*t104568*6.0+gamma_aa[index]*t104564*t104566*t104567*2.0+gcab*t104564*t104565*t104569*6.0)- \
                   ccab3*gamma_aa[index]*gcab*t104564*t104565*1.0/(t104575*t104575)*t104569*(gcab*t104563*(3.0/2.0)+gamma_aa[index]* \
                   t104565*t104568*3.0+gcab*t104564*t104565*t104569*(3.0/2.0)))*2.0-rho_a[index]*(t104604+t104590*t104587* \
                   (t104603-t104604))*((ccaa1*gcaa*t104563)/t104608+(ccaa2*gamma_aa[index]*t104605*t104568*2.0)/t104620- \
                   ccaa1*gamma_aa[index]*t104605*1.0/(t104608*t104608)*t104568-ccaa2*1.0/(t104620*t104620)*t104605*t104564* \
                   t104568*(gcaa*t104563*2.0+gamma_aa[index]*t104605*t104568*2.0)+(ccaa4*gamma_aa[index]*t104606*t104564* \
                   t104567*4.0)/t104617+(ccaa3*gcaa*t104605*t104564*t104569*3.0)/t104612-ccaa4*t104606*1.0/(t104617*t104617) \
                   *t104567*t104576*(gcaa*t104563*4.0+gamma_aa[index]*t104605*t104568*1.2E1+gamma_aa[index]*t104606*t104564* \
                   t104567*4.0+gcaa*t104605*t104564*t104569*1.2E1)-ccaa3*gamma_aa[index]*gcaa*1.0/(t104612*t104612)*t104605* \
                   t104564*t104569*(gcaa*t104563*3.0+gamma_aa[index]*t104605*t104568*6.0+gcaa*t104605*t104564*t104569* \
                   3.0))*2.0-c0*pow(rho_a[index],4.0/3.0)*(omega*t104625*(t104624+erf(pow(t104621,1.0/3.0)/omega)*(3.991211251234741E15/ \
                   2.251799813685248E15)-omega*t104625*(3.0/2.0)-exp(-1.0/(omega*omega)*pow(t104621,2.0/3.0))*(t104624- \
                   omega*t104625))*(4.0/3.0)-1.0)*((cx1*gx*t104563)/t104629-cx1*gamma_aa[index]*t104626*1.0/(t104629* \
                   t104629)*t104568+(cx2*gamma_aa[index]*t104626*t104568*2.0)/t104641-cx2*1.0/(t104641*t104641)*t104626* \
                   t104564*t104568*(gx*t104563*2.0+gamma_aa[index]*t104626*t104568*2.0)+(cx4*gamma_aa[index]*t104564* \
                   t104627*t104567*4.0)/t104638+(cx3*gx*t104626*t104564*t104569*3.0)/t104633-cx4*t104627*1.0/(t104638* \
                   t104638)*t104567*t104576*(gx*t104563*4.0+gamma_aa[index]*t104626*t104568*1.2E1+gamma_aa[index]*t104564* \
                   t104627*t104567*4.0+gx*t104626*t104564*t104569*1.2E1)-cx3*gamma_aa[index]*gx*1.0/(t104633*t104633) \
                   *t104626*t104564*t104569*(gx*t104563*3.0+gamma_aa[index]*t104626*t104568*6.0+gx*t104626*t104564*t104569* \
                   3.0))*2.0;
            } else {
                v_gamma_aa_[index] = 0.0;
            }

        }
        if (is_meta_) {

            //V_tau_a
            if (rho_a[index] > cutoff_) {
                v_tau_a_[index] = 0.0;
            } else {
                v_tau_a_[index] = 0.0;
            }

        }
    }
    //Second Partials
    for (int index = 0; index < ntrue && deriv_ >= 2; index++) {

        //V_rho_a_rho_a
        if (rho_a[index] > cutoff_) {
            double t104644 = rho_a[index]*2.0;
            double t104645 = 1.0/pow(t104644,1.0/3.0);
            double t104646 = c*t104645;
            double t104647 = sqrt(t104646);
            double t104648 = b1p*t104647;
            double t104649 = pow(t104646,3.0/2.0);
            double t104650 = b3p*t104649;
            double t104651 = b2p*c*t104645;
            double t104652 = c*c;
            double t104653 = 1.0/pow(t104644,2.0/3.0);
            double t104654 = b4p*t104652*t104653;
            double t104655 = t104650+t104651+t104654+t104648;
            double t104656 = 1.0/pow(t104644,8.0/3.0);
            double t104657 = 1.0/pow(t104644,7.0/3.0);
            double t104658 = 1.0/sqrt(t104646);
            double t104659 = 1.0/c0p;
            double t104660 = 1.0/t104655;
            double t104661 = t104660*t104659*(1.0/2.0);
            double t104662 = t104661+1.0;
            double t104663 = 1.0/t104662;
            double t104664 = a1p*c*t104645;
            double t104665 = t104664+1.0;
            double t104666 = 1.0/pow(t104644,4.0/3.0);
            double t104668 = b2p*c*t104666*(1.0/3.0);
            double t104669 = 1.0/pow(t104644,5.0/3.0);
            double t104670 = b4p*t104652*t104669*(2.0/3.0);
            double t104671 = b1p*c*t104666*t104658*(1.0/6.0);
            double t104672 = b3p*c*t104647*t104666*(1.0/2.0);
            double t104667 = t104670+t104671+t104672+t104668;
            double t104673 = t104667*t104667;
            double t104674 = 1.0/(t104655*t104655);
            double t104675 = log(t104662);
            double t104676 = gamma_aa[index]*gamma_aa[index];
            double t104677 = gcab*gcab;
            double t104678 = t104676*t104676;
            double t104679 = t104677*t104677;
            double t104680 = 1.0/pow(rho_a[index],3.2E1/3.0);
            double t104681 = 1.0/pow(rho_a[index],8.0/3.0);
            double t104682 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]);
            double t104683 = 1.0/pow(rho_a[index],1.6E1/3.0);
            double t104684 = two_13*2.0;
            double t104685 = t104684-2.0;
            double t104686 = 1.0/t104685;
            double t104687 = 1.0/pow(rho_a[index],1.0/3.0);
            double t104688 = c*t104687;
            double t104689 = sqrt(t104688);
            double t104690 = pow(t104688,3.0/2.0);
            double t104691 = 1.0/pow(rho_a[index],2.0/3.0);
            double t104692 = b1p*t104689;
            double t104693 = b3p*t104690;
            double t104694 = b4p*t104652*t104691;
            double t104695 = b2p*c*t104687;
            double t104696 = t104692+t104693+t104694+t104695;
            double t104697 = 1.0/t104696;
            double t104698 = t104659*t104697*(1.0/2.0);
            double t104699 = t104698+1.0;
            double t104700 = log(t104699);
            double t104701 = a1p*c*t104687;
            double t104702 = t104701+1.0;
            double t104703 = gamma_aa[index]*gcab*t104681*4.0;
            double t104704 = gamma_aa[index]*gcab*t104682*t104676*t104677*4.0;
            double t104705 = t104683*t104676*t104677*6.0;
            double t104706 = t104680*t104678*t104679;
            double t104707 = t104703+t104704+t104705+t104706+1.0;
            double t104708 = 1.0/t104707;
            double t104709 = gamma_aa[index]*gcab*t104681;
            double t104710 = t104709+1.0;
            double t104711 = 1.0/t104710;
            double t104712 = gamma_aa[index]*gcab*t104681*3.0;
            double t104713 = gamma_aa[index]*gcab*t104682*t104676*t104677;
            double t104714 = t104683*t104676*t104677*3.0;
            double t104715 = t104712+t104713+t104714+1.0;
            double t104716 = 1.0/t104715;
            double t104717 = gamma_aa[index]*gcab*t104681*2.0;
            double t104718 = t104683*t104676*t104677;
            double t104719 = t104717+t104718+1.0;
            double t104720 = 1.0/t104719;
            double t104721 = 1.0/pow(rho_a[index],1.0E1);
            double t104722 = 1.0/pow(rho_a[index],2.2E1/3.0);
            double t104724 = 1.0/pow(rho_a[index],1.1E1/3.0);
            double t104725 = 1.0/pow(rho_a[index],1.9E1/3.0);
            double t104727 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]*rho_a[index]);
            double t104734 = 1.0/pow(rho_a[index],3.5E1/3.0);
            double t104735 = gamma_aa[index]*gcab*t104724*(1.6E1/3.0);
            double t104736 = gamma_aa[index]*gcab*t104727*t104676*t104677*1.6E1;
            double t104737 = t104725*t104676*t104677*1.6E1;
            double t104738 = t104734*t104678*t104679*(1.6E1/3.0);
            double t104723 = t104735+t104736+t104737+t104738;
            double t104741 = gamma_aa[index]*gcab*t104724*(8.0/3.0);
            double t104742 = t104725*t104676*t104677*(8.0/3.0);
            double t104726 = t104741+t104742;
            double t104728 = 1.0/pow(rho_a[index],1.4E1/3.0);
            double t104729 = 1.0/(t104715*t104715);
            double t104730 = gamma_aa[index]*gcab*t104724*4.0;
            double t104731 = gamma_aa[index]*gcab*t104727*t104676*t104677*4.0;
            double t104732 = t104725*t104676*t104677*8.0;
            double t104733 = t104730+t104731+t104732;
            double t104739 = 1.0/pow(rho_a[index],3.8E1/3.0);
            double t104740 = 1.0/(t104707*t104707);
            double t104743 = 1.0/(t104719*t104719);
            double t104744 = pow(2.0,1.0/3.0);
            double t104745 = t104744*2.0;
            double t104746 = t104745-2.0;
            double t104747 = a1f*c*t104687;
            double t104748 = t104747+1.0;
            double t104749 = 1.0/c0f;
            double t104750 = b1f*t104689;
            double t104751 = b3f*t104690;
            double t104752 = b4f*t104652*t104691;
            double t104753 = b2f*c*t104687;
            double t104754 = t104750+t104751+t104752+t104753;
            double t104755 = 1.0/t104754;
            double t104756 = t104755*t104749*(1.0/2.0);
            double t104757 = t104756+1.0;
            double t104758 = 1.0/pow(rho_a[index],4.0/3.0);
            double t104759 = 1.0/pow(rho_a[index],5.0/3.0);
            double t104760 = 1.0/sqrt(t104688);
            double t104761 = log(t104757);
            double t104762 = 1.0/t104699;
            double t104763 = 1.0/(t104696*t104696);
            double t104764 = b4p*t104652*t104759*(2.0/3.0);
            double t104765 = b2p*c*t104758*(1.0/3.0);
            double t104766 = b1p*c*t104760*t104758*(1.0/6.0);
            double t104767 = b3p*c*t104758*t104689*(1.0/2.0);
            double t104768 = t104764+t104765+t104766+t104767;
            double t104769 = t104702*t104762*t104763*t104768;
            double t104770 = gcaa*gcaa;
            double t104771 = t104770*t104770;
            double t104772 = 1.0/t104757;
            double t104773 = 1.0/(t104754*t104754);
            double t104774 = b4f*t104652*t104759*(2.0/3.0);
            double t104775 = b2f*c*t104758*(1.0/3.0);
            double t104776 = b1f*c*t104760*t104758*(1.0/6.0);
            double t104777 = b3f*c*t104758*t104689*(1.0/2.0);
            double t104778 = t104774+t104775+t104776+t104777;
            double t104779 = a1f*c*c0f*t104761*t104758*(2.0/3.0);
            double t104780 = a1p*c*c0p*t104700*t104758*(2.0/3.0);
            double t104781 = c0f*t104761*t104748*2.0;
            double t104782 = c0p*t104700*t104702*2.0;
            double t104783 = 1.0/(t104710*t104710);
            double t104784 = ccab4*t104680*t104708*t104678*t104679;
            double t104785 = ccab1*gamma_aa[index]*gcab*t104711*t104681;
            double t104786 = ccab3*gamma_aa[index]*gcab*t104716*t104682*t104676*t104677;
            double t104787 = ccab2*t104720*t104683*t104676*t104677;
            double t104788 = ccab0+t104784+t104785+t104786+t104787;
            double t104789 = b2p*c*t104657*(4.0/9.0);
            double t104790 = b4p*t104652*t104656*(1.0E1/9.0);
            double t104791 = 1.0/pow(t104646,3.0/2.0);
            double t104792 = b3p*t104652*t104656*t104658*(1.0/1.2E1);
            double t104793 = b1p*c*t104657*t104658*(2.0/9.0);
            double t104794 = b3p*c*t104647*t104657*(2.0/3.0);
            double t104795 = t104790+t104792+t104793+t104794+t104789-b1p*t104652*t104656*t104791*(1.0/3.6E1);
            double t104796 = t104663*t104665*t104674*t104795;
            double t104797 = 1.0/(t104655*t104655*t104655);
            double t104798 = 1.0/(t104662*t104662);
            double t104799 = 1.0/(t104655*t104655*t104655*t104655);
            double t104800 = t104673*t104665*t104659*t104798*t104799*(1.0/2.0);
            double t104801 = 1.0/d2fz0;
            double t104802 = 1.0/(rho_a[index]*rho_a[index]);
            double t104803 = 1.0/Aa;
            double t104804 = b1a*t104647;
            double t104805 = b3a*t104649;
            double t104806 = b2a*c*t104645;
            double t104807 = b4a*t104652*t104653;
            double t104808 = t104804+t104805+t104806+t104807;
            double t104809 = 1.0/t104808;
            double t104810 = t104803*t104809*(1.0/2.0);
            double t104811 = t104810+1.0;
            double t104812 = log(t104811);
            double t104813 = a1a*c*t104645;
            double t104814 = t104813+1.0;
            double t104815 = a1p*c*t104663*t104674*t104666*t104667*(2.0/3.0);
            double t104816 = 1.0/pow(rho_a[index],7.0/3.0);
            double t104817 = 1.0/pow(t104688,3.0/2.0);
            double t104818 = t104778*t104778;
            double t104819 = t104768*t104768;
            double t104820 = 1.0/(t104696*t104696*t104696);
            double t104821 = t104702*t104820*t104762*t104819*2.0;
            double t104822 = b4p*t104652*t104681*(1.0E1/9.0);
            double t104823 = b2p*c*t104816*(4.0/9.0);
            double t104824 = b3p*t104652*t104760*t104681*(1.0/1.2E1);
            double t104825 = b1p*c*t104760*t104816*(2.0/9.0);
            double t104826 = b3p*c*t104816*t104689*(2.0/3.0);
            double t104902 = b1p*t104652*t104681*t104817*(1.0/3.6E1);
            double t104827 = -t104902+t104822+t104823+t104824+t104825+t104826;
            double t104828 = 1.0/(t104699*t104699);
            double t104829 = 1.0/(t104696*t104696*t104696*t104696);
            double t104830 = a1p*c*c0p*t104700*t104816*(8.0/9.0);
            double t104831 = t104772*t104773*t104748*t104778;
            double t104832 = t104831+t104780-t104769-t104779;
            double t104833 = a1p*c*c0p*t104666*t104675*(4.0/3.0);
            double t104834 = t104781-t104782;
            double t104835 = t104834*t104746*t104686;
            double t104836 = gamma_aa[index]*gcaa*t104681*4.0;
            double t104837 = gamma_aa[index]*gcaa*t104770*t104682*t104676*4.0;
            double t104838 = t104770*t104683*t104676*6.0;
            double t104839 = t104680*t104771*t104678;
            double t104840 = t104836+t104837+t104838+t104839+1.0;
            double t104841 = 1.0/t104840;
            double t104842 = gamma_aa[index]*gcaa*t104681;
            double t104843 = t104842+1.0;
            double t104844 = 1.0/t104843;
            double t104845 = gamma_aa[index]*gcaa*t104681*3.0;
            double t104846 = gamma_aa[index]*gcaa*t104770*t104682*t104676;
            double t104847 = t104770*t104683*t104676*3.0;
            double t104848 = t104845+t104846+t104847+1.0;
            double t104849 = 1.0/t104848;
            double t104850 = gamma_aa[index]*gcaa*t104681*2.0;
            double t104851 = t104770*t104683*t104676;
            double t104852 = t104850+t104851+1.0;
            double t104853 = 1.0/t104852;
            double t104854 = t104835+t104782;
            double t104855 = 1.0/(t104710*t104710*t104710);
            double t104856 = ccab1*gamma_aa[index]*gcab*t104721*t104855*t104676*t104677*(3.2E1/9.0);
            double t104857 = t104723*t104723;
            double t104858 = 1.0/(t104707*t104707*t104707);
            double t104859 = ccab4*t104680*t104857*t104678*t104858*t104679*2.0;
            double t104860 = t104726*t104726;
            double t104861 = 1.0/(t104719*t104719*t104719);
            double t104862 = ccab2*t104860*t104861*t104683*t104676*t104677*2.0;
            double t104863 = t104733*t104733;
            double t104864 = 1.0/(t104715*t104715*t104715);
            double t104865 = ccab3*gamma_aa[index]*gcab*t104682*t104863*t104864*t104676*t104677*2.0;
            double t104866 = t104832*t104746*t104686;
            double t104867 = -t104780+t104866+t104769;
            double t104868 = ccaa4*t104841*t104734*t104771*t104678*(3.2E1/3.0);
            double t104869 = ccaa1*gamma_aa[index]*gcaa*t104724*t104844*(8.0/3.0);
            double t104870 = ccaa3*gamma_aa[index]*gcaa*t104770*t104727*t104676*t104849*8.0;
            double t104871 = ccaa2*t104725*t104770*t104853*t104676*(1.6E1/3.0);
            double t104872 = 1.0/(t104843*t104843);
            double t104873 = gamma_aa[index]*gcaa*t104724*8.0;
            double t104874 = gamma_aa[index]*gcaa*t104770*t104727*t104676*8.0;
            double t104875 = t104725*t104770*t104676*1.6E1;
            double t104876 = t104873+t104874+t104875;
            double t104877 = 1.0/(t104848*t104848);
            double t104878 = gamma_aa[index]*gcaa*t104724*(3.2E1/3.0);
            double t104879 = gamma_aa[index]*gcaa*t104770*t104727*t104676*3.2E1;
            double t104880 = t104725*t104770*t104676*3.2E1;
            double t104881 = t104734*t104771*t104678*(3.2E1/3.0);
            double t104882 = t104880+t104881+t104878+t104879;
            double t104883 = 1.0/(t104840*t104840);
            double t104884 = gamma_aa[index]*gcaa*t104724*(1.6E1/3.0);
            double t104885 = t104725*t104770*t104676*(1.6E1/3.0);
            double t104886 = t104884+t104885;
            double t104887 = 1.0/(t104852*t104852);
            double t104888 = t104870+t104871+t104868+t104869-ccaa1*t104725*t104770*t104872*t104676*(8.0/3.0)- \
               ccaa4*t104680*t104771*t104882*t104883*t104678-ccaa2*t104770*t104683*t104676*t104886*t104887-ccaa3* \
               gamma_aa[index]*gcaa*t104770*t104682*t104676*t104876*t104877;
            double t104889 = ccaa4*t104841*t104680*t104771*t104678;
            double t104890 = ccaa1*gamma_aa[index]*gcaa*t104681*t104844;
            double t104891 = ccaa3*gamma_aa[index]*gcaa*t104770*t104682*t104676*t104849;
            double t104892 = ccaa2*t104770*t104853*t104683*t104676;
            double t104893 = ccaa0+t104890+t104891+t104892+t104889;
            double t104894 = 1.0/(t104754*t104754*t104754);
            double t104895 = b4f*t104652*t104681*(1.0E1/9.0);
            double t104896 = b2f*c*t104816*(4.0/9.0);
            double t104897 = b3f*t104652*t104760*t104681*(1.0/1.2E1);
            double t104898 = b1f*c*t104760*t104816*(2.0/9.0);
            double t104899 = b3f*c*t104816*t104689*(2.0/3.0);
            double t104900 = t104895+t104896+t104897+t104898+t104899-b1f*t104652*t104681*t104817*(1.0/3.6E1);
            double t104901 = t104900*t104772*t104773*t104748;
            double t104903 = t104702*t104762*t104763*t104827;
            double t104904 = 1.0/(t104757*t104757);
            double t104905 = 1.0/(t104754*t104754*t104754*t104754);
            double t104906 = t104904*t104905*t104818*t104748*t104749*(1.0/2.0);
            double t104907 = t104702*t104819*t104828*t104829*t104659*(1.0/2.0);
            double t104908 = a1f*c*t104772*t104773*t104758*t104778*(2.0/3.0);
            double t104909 = a1p*c*t104762*t104763*t104758*t104768*(2.0/3.0);
            double t104910 = rho_a[index]*(8.334140006820045E15/1.40737488355328E14);
            double t104911 = omega*omega;
            double t104912 = 1.0/rho_a[index];
            double t104913 = omega*t104911*t104912*(7.0368744177664E13/8.334140006820045E15);
            double t104914 = 1.0/pow(t104910,1.0/3.0);
            double t104915 = gx*gx;
            double t104916 = t104915*t104915;
            double t104917 = gamma_aa[index]*gx*t104681;
            double t104918 = t104917+1.0;
            double t104938 = gamma_aa[index]*gx*t104724*(3.2E1/3.0);
            double t104939 = gamma_aa[index]*gx*t104915*t104727*t104676*3.2E1;
            double t104940 = t104725*t104915*t104676*3.2E1;
            double t104941 = t104734*t104916*t104678*(3.2E1/3.0);
            double t104919 = t104940+t104941+t104938+t104939;
            double t104920 = gamma_aa[index]*gx*t104681*4.0;
            double t104921 = gamma_aa[index]*gx*t104915*t104682*t104676*4.0;
            double t104922 = t104915*t104683*t104676*6.0;
            double t104923 = t104680*t104916*t104678;
            double t104924 = t104920+t104921+t104922+t104923+1.0;
            double t104943 = gamma_aa[index]*gx*t104724*(1.6E1/3.0);
            double t104944 = t104725*t104915*t104676*(1.6E1/3.0);
            double t104925 = t104943+t104944;
            double t104926 = gamma_aa[index]*gx*t104681*2.0;
            double t104927 = t104915*t104683*t104676;
            double t104928 = t104926+t104927+1.0;
            double t104929 = gamma_aa[index]*gx*t104681*3.0;
            double t104930 = gamma_aa[index]*gx*t104915*t104682*t104676;
            double t104931 = t104915*t104683*t104676*3.0;
            double t104932 = t104930+t104931+t104929+1.0;
            double t104933 = 1.0/(t104932*t104932);
            double t104934 = gamma_aa[index]*gx*t104724*8.0;
            double t104935 = gamma_aa[index]*gx*t104915*t104727*t104676*8.0;
            double t104936 = t104725*t104915*t104676*1.6E1;
            double t104937 = t104934+t104935+t104936;
            double t104942 = 1.0/(t104924*t104924);
            double t104945 = 1.0/(t104928*t104928);
            double t104946 = 1.0/(omega*omega);
            double t104947 = pow(t104910,2.0/3.0);
            double t104951 = t104946*t104947;
            double t104948 = exp(-t104951);
            double t104949 = 1.0/pow(t104910,4.0/3.0);
            double t104950 = 1.0/omega;
            double t104957 = omega*t104914;
            double t104952 = t104913-t104957;
            double t104953 = pow(t104910,1.0/3.0);
            double t104954 = t104950*t104953;
            double t104955 = erf(t104954);
            double t104956 = t104955*(3.991211251234741E15/2.251799813685248E15);
            double t104963 = t104952*t104948;
            double t104964 = omega*t104914*(3.0/2.0);
            double t104958 = t104913-t104963-t104964+t104956;
            double t104959 = 1.0/t104924;
            double t104960 = 1.0/t104918;
            double t104961 = 1.0/t104932;
            double t104962 = 1.0/t104928;
            double t104965 = omega*t104914*t104958*(4.0/3.0);
            double t104966 = t104965-1.0;
            double t104967 = cx4*t104680*t104916*t104678*t104959;
            double t104968 = cx1*gamma_aa[index]*gx*t104681*t104960;
            double t104969 = cx3*gamma_aa[index]*gx*t104915*t104682*t104961*t104676;
            double t104970 = cx2*t104915*t104683*t104962*t104676;
            double t104971 = cx0+t104970+t104967+t104968+t104969;
            double t104972 = pow(rho_a[index],4.0/3.0);
            double t104973 = omega*t104949*(8.334140006820045E15/2.81474976710656E14);
            double t104974 = omega*t104949*(2.778046668940015E15/1.40737488355328E14);
            double t104990 = omega*t104802*t104911*(7.0368744177664E13/8.334140006820045E15);
            double t104975 = -t104990+t104974;
            double t104976 = 1.0/sqrt(3.141592653589793);
            double t104977 = 1.0/pow(t104910,2.0/3.0);
            double t104978 = t104950*t104948*t104976*t104977*(1.108777112152858E31/1.584563250285287E29);
            double t104979 = t104914*t104952*t104946*t104948*(2.778046668940015E15/7.0368744177664E13);
            double t104980 = t104973+t104978+t104979-t104948*t104975-omega*t104802*t104911*(7.0368744177664E13/ \
               8.334140006820045E15);
            double t104981 = omega*t104914*t104980*(4.0/3.0);
            double t104982 = t104981-omega*t104949*t104958*(2.778046668940015E15/1.05553116266496E14);
            double t104983 = 1.0/(t104918*t104918);
            double t104984 = pow(rho_a[index],1.0/3.0);
            double t104985 = cx4*t104734*t104916*t104678*t104959*(3.2E1/3.0);
            double t104986 = cx1*gamma_aa[index]*gx*t104724*t104960*(8.0/3.0);
            double t104987 = cx3*gamma_aa[index]*gx*t104915*t104727*t104961*t104676*8.0;
            double t104988 = cx2*t104725*t104915*t104962*t104676*(1.6E1/3.0);
            double t104989 = t104985+t104986+t104987+t104988-cx1*t104725*t104915*t104676*t104983*(8.0/3.0)-cx2* \
               t104915*t104925*t104683*t104945*t104676-cx4*t104680*t104942*t104916*t104919*t104678-cx3*gamma_aa[index]* \
               gx*t104915*t104933*t104682*t104676*t104937;
            double t104991 = 1.0/pow(t104910,7.0/3.0);
            double t104992 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]);
            double t104993 = t104990-t104974;
            v_rho_a_rho_a_[index] = (t104835+t104782+rho_a[index]*t104867-rho_a[index]*(t104663*t104665*t104674* \
               t104667-a1p*c*c0p*t104666*t104675*(2.0/3.0))*2.0-c0p*t104665*t104675*2.0)*(ccab1*gamma_aa[index]*gcab* \
               t104711*t104724*(4.0/3.0)+ccab2*t104720*t104725*t104676*t104677*(8.0/3.0)-ccab1*t104725*t104783*t104676* \
               t104677*(4.0/3.0)+ccab4*t104734*t104708*t104678*t104679*(1.6E1/3.0)-ccab4*t104740*t104723*t104680* \
               t104678*t104679-ccab2*t104743*t104726*t104683*t104676*t104677+ccab3*gamma_aa[index]*gcab*t104716*t104727* \
               t104676*t104677*4.0-ccab3*gamma_aa[index]*gcab*t104733*t104682*t104729*t104676*t104677)*-4.0+t104854* \
               t104888*2.0+(rho_a[index]*(t104782+t104746*t104686*(t104781-c0p*t104700*t104702*2.0))*2.0-c0p*rho_a[index]* \
               t104665*t104675*4.0)*(t104862+t104856+t104865+t104859+ccab1*gamma_aa[index]*gcab*t104711*t104728*(4.4E1/ \
               9.0)+ccab2*t104720*t104722*t104676*t104677*(4.0E1/3.0)-ccab1*t104722*t104783*t104676*t104677*(7.6E1/ \
               9.0)+ccab4*t104708*t104739*t104678*t104679*(3.68E2/9.0)-ccab2*t104725*t104743*t104726*t104676*t104677* \
               (1.6E1/3.0)-ccab4*t104740*t104723*t104734*t104678*t104679*(3.2E1/3.0)-ccab2*t104743*t104683*t104676* \
               t104677*(gamma_aa[index]*gcab*t104728*(8.8E1/9.0)+t104722*t104676*t104677*(4.0E1/3.0))-ccab4*t104740* \
               t104680*t104678*t104679*(gamma_aa[index]*gcab*t104728*(1.76E2/9.0)+t104722*t104676*t104677*8.0E1+t104739* \
               t104678*t104679*(3.68E2/9.0)+gamma_aa[index]*gcab*t104721*t104676*t104677*(3.04E2/3.0))+ccab3*gamma_aa[index]* \
               gcab*t104721*t104716*t104676*t104677*(7.6E1/3.0)-ccab3*gamma_aa[index]*gcab*t104682*t104729*t104676* \
               t104677*(gamma_aa[index]*gcab*t104728*(4.4E1/3.0)+t104722*t104676*t104677*4.0E1+gamma_aa[index]*gcab* \
               t104721*t104676*t104677*(7.6E1/3.0))-ccab3*gamma_aa[index]*gcab*t104733*t104727*t104729*t104676*t104677* \
               8.0)+t104893*(t104780-t104769+t104746*t104686*(t104769+t104779-t104772*t104773*t104748*t104778-a1p* \
               c*c0p*t104700*t104758*(2.0/3.0)))*2.0+t104788*(t104833+rho_a[index]*(t104800+t104815+t104796-t104663* \
               t104673*t104665*t104797*2.0-a1p*c*c0p*t104657*t104675*(8.0/9.0)+Aa*t104801*t104802*t104812*t104814* \
               t104686*(4.0/9.0))*2.0-rho_a[index]*(-t104821-t104830+t104903+t104907+t104909+t104746*t104686*(t104901+ \
               t104821+t104830+t104906+t104908-t104702*t104762*t104763*t104827-t104772*t104818*t104748*t104894*2.0- \
               a1f*c*c0f*t104761*t104816*(8.0/9.0)-t104702*t104819*t104828*t104829*t104659*(1.0/2.0)-a1p*c*t104762* \
               t104763*t104758*t104768*(2.0/3.0)))+t104832*t104746*t104686*2.0+t104702*t104762*t104763*t104768*2.0- \
               t104663*t104665*t104674*t104667*2.0-a1p*c*c0p*t104700*t104758*(4.0/3.0))+(rho_a[index]*t104854*2.0- \
               c0p*rho_a[index]*t104665*t104675*4.0)*(t104862+t104856+t104865+t104859+ccab2*t104720*t104722*t104676* \
               t104677*(3.2E1/9.0)-ccab1*t104722*t104783*t104676*t104677*(3.2E1/9.0)-ccab2*t104743*t104739*t104678* \
               t104679*(3.2E1/9.0)+ccab4*t104708*t104739*t104678*t104679*(6.4E1/3.0)-ccab2*t104725*t104743*t104726* \
               t104676*t104677*(1.6E1/3.0)-ccab4*t104740*t104723*t104734*t104678*t104679*(3.2E1/3.0)-ccab4*t104740* \
               t104680*t104678*t104679*(t104722*t104676*t104677*(6.4E1/3.0)+t104739*t104678*t104679*(6.4E1/3.0)+gamma_aa[index]* \
               gcab*t104721*t104676*t104677*(1.28E2/3.0))+ccab3*gamma_aa[index]*gcab*t104721*t104716*t104676*t104677* \
               (3.2E1/3.0)-ccab3*gamma_aa[index]*gcab*t104682*t104729*t104676*t104677*(t104722*t104676*t104677*(3.2E1/ \
               3.0)+gamma_aa[index]*gcab*t104721*t104676*t104677*(3.2E1/3.0))-ccab3*gamma_aa[index]*gcab*t104733* \
               t104727*t104729*t104676*t104677*8.0)+t104788*(t104833+rho_a[index]*(t104800+t104815+t104796-t104663* \
               t104673*t104665*t104797*2.0-a1p*c*c0p*t104657*t104675*(8.0/9.0)-Aa*t104801*t104802*t104812*t104814* \
               t104686*(4.0/9.0))*2.0-t104663*t104665*t104674*t104667*2.0)-rho_a[index]*t104854*(ccaa1*gamma_aa[index]* \
               gcaa*t104844*t104728*(8.8E1/9.0)-ccaa1*t104722*t104770*t104872*t104676*2.4E1+ccaa2*t104722*t104770* \
               t104853*t104676*(3.04E2/9.0)+ccaa4*t104841*t104771*t104739*t104678*(1.12E3/9.0)-ccaa4*t104734*t104771* \
               t104882*t104883*t104678*(6.4E1/3.0)-ccaa2*t104725*t104770*t104676*t104886*t104887*(3.2E1/3.0)-ccaa2* \
               t104770*t104683*t104676*t104887*(gamma_aa[index]*gcaa*t104728*(1.76E2/9.0)+t104722*t104770*t104676* \
               (3.04E2/9.0))-ccaa4*t104680*t104771*t104883*t104678*(gamma_aa[index]*gcaa*t104728*(3.52E2/9.0)+t104722* \
               t104770*t104676*(6.08E2/3.0)+t104771*t104739*t104678*(1.12E3/9.0)+gamma_aa[index]*gcaa*t104721*t104770* \
               t104676*2.88E2)+ccaa4*1.0/(t104840*t104840*t104840)*t104680*t104771*(t104882*t104882)*t104678*2.0+ \
               ccaa2*t104770*1.0/(t104852*t104852*t104852)*t104683*t104676*(t104886*t104886)*2.0+ccaa3*gamma_aa[index]* \
               gcaa*t104721*t104770*t104676*t104849*7.2E1+ccaa1*gamma_aa[index]*gcaa*t104721*t104770*1.0/(t104843* \
               t104843*t104843)*t104676*(1.28E2/9.0)+ccaa3*gamma_aa[index]*gcaa*t104770*t104682*t104676*1.0/(t104848* \
               t104848*t104848)*(t104876*t104876)*2.0-ccaa3*gamma_aa[index]*gcaa*t104770*t104682*t104676*t104877* \
               (gamma_aa[index]*gcaa*t104728*(8.8E1/3.0)+t104722*t104770*t104676*(3.04E2/3.0)+gamma_aa[index]*gcaa* \
               t104721*t104770*t104676*7.2E1)-ccaa3*gamma_aa[index]*gcaa*t104770*t104727*t104676*t104876*t104877* \
               1.6E1)+rho_a[index]*t104893*(-t104821-t104830+t104903+t104907+t104909+t104746*t104686*(t104901+t104821+ \
               t104830-t104903+t104906-t104907+t104908-t104909-t104772*t104818*t104748*t104894*2.0-a1f*c*c0f*t104761* \
               t104816*(8.0/9.0)))+rho_a[index]*t104867*t104888*2.0-c0*t104972*t104966*(cx1*gamma_aa[index]*gx*t104960* \
               t104728*(8.8E1/9.0)-cx1*t104722*t104915*t104676*t104983*2.4E1+cx2*t104722*t104915*t104962*t104676* \
               (3.04E2/9.0)+cx4*t104916*t104739*t104678*t104959*(1.12E3/9.0)-cx2*t104725*t104915*t104925*t104945* \
               t104676*(3.2E1/3.0)-cx4*t104734*t104942*t104916*t104919*t104678*(6.4E1/3.0)-cx2*t104915*t104683*t104945* \
               t104676*(gamma_aa[index]*gx*t104728*(1.76E2/9.0)+t104722*t104915*t104676*(3.04E2/9.0))-cx4*t104680* \
               t104942*t104916*t104678*(gamma_aa[index]*gx*t104728*(3.52E2/9.0)+t104722*t104915*t104676*(6.08E2/3.0) \
               +t104916*t104739*t104678*(1.12E3/9.0)+gamma_aa[index]*gx*t104721*t104915*t104676*2.88E2)+cx2*t104915* \
               (t104925*t104925)*t104683*t104676*1.0/(t104928*t104928*t104928)*2.0+cx4*t104680*1.0/(t104924*t104924* \
               t104924)*t104916*(t104919*t104919)*t104678*2.0+cx3*gamma_aa[index]*gx*t104721*t104915*t104961*t104676* \
               7.2E1+cx1*gamma_aa[index]*gx*t104721*t104915*1.0/(t104918*t104918*t104918)*t104676*(1.28E2/9.0)+cx3* \
               gamma_aa[index]*gx*1.0/(t104932*t104932*t104932)*t104915*t104682*t104676*(t104937*t104937)*2.0-cx3* \
               gamma_aa[index]*gx*t104915*t104933*t104682*t104676*(gamma_aa[index]*gx*t104728*(8.8E1/3.0)+t104722* \
               t104915*t104676*(3.04E2/3.0)+gamma_aa[index]*gx*t104721*t104915*t104676*7.2E1)-cx3*gamma_aa[index]* \
               gx*t104915*t104933*t104727*t104676*t104937*1.6E1)+c0*t104971*t104972*(omega*t104949*(-t104990+t104973+ \
               t104978+t104979+t104948*t104993)*(2.778046668940015E15/5.2776558133248E13)+omega*t104914*(omega*t104991* \
               (2.315262988442614E31/9.903520314283042E27)-t104948*(omega*t104991*(7.717543294808713E30/4.951760157141521E27) \
               -omega*t104911*t104992*(1.40737488355328E14/8.334140006820045E15))-omega*t104911*t104992*(1.40737488355328E14/ \
               8.334140006820045E15)+t104914*t104946*t104948*t104993*(2.778046668940015E15/3.5184372088832E13)+t104952* \
               t104946*t104948*t104949*(7.717543294808713E30/9.903520314283042E27)+1.0/(omega*omega*omega)*t104912* \
               t104948*t104976*(1.108777112152858E31/2.37684487542793E29)+1.0/(omega*omega*omega*omega)*t104952*t104948* \
               t104977*(7.717543294808713E30/4.951760157141521E27)+1.0/pow(t104910,5.0/3.0)*t104950*t104948*t104976* \
               (3.080234563013177E46/1.115037259926531E43))*(4.0/3.0)-omega*t104991*t104958*(7.717543294808713E30/ \
               3.713820117856141E27))-c0*t104691*t104971*t104966*(4.0/9.0)-c0*t104971*t104982*t104984*(8.0/3.0)+c0* \
               t104972*t104982*t104989*2.0+c0*t104966*t104984*t104989*(8.0/3.0);
        } else {
            v_rho_a_rho_a_[index] = 0.0;
        }

        if (is_gga_) {

            //V_rho_a_gamma_aa
            if (rho_a[index] > cutoff_) {
                double t104995 = 1.0/pow(rho_a[index],1.0/3.0);
                double t104996 = c*t104995;
                double t104997 = sqrt(t104996);
                double t104998 = pow(t104996,3.0/2.0);
                double t104999 = c*c;
                double t105000 = 1.0/pow(rho_a[index],2.0/3.0);
                double t105001 = 1.0/c0p;
                double t105002 = b1p*t104997;
                double t105003 = b3p*t104998;
                double t105004 = b4p*t105000*t104999;
                double t105005 = b2p*c*t104995;
                double t105006 = t105002+t105003+t105004+t105005;
                double t105007 = 1.0/t105006;
                double t105008 = t105001*t105007*(1.0/2.0);
                double t105009 = t105008+1.0;
                double t105010 = log(t105009);
                double t105011 = a1p*c*t104995;
                double t105012 = t105011+1.0;
                double t105013 = 1.0/pow(rho_a[index],8.0/3.0);
                double t105014 = gamma_aa[index]*gamma_aa[index];
                double t105015 = gcaa*gcaa;
                double t105016 = t105015*t105015;
                double t105017 = 1.0/pow(rho_a[index],3.2E1/3.0);
                double t105018 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t105019 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t105020 = gamma_aa[index]*gcaa*t105013;
                double t105021 = t105020+1.0;
                double t105022 = gamma_aa[index]*gcaa*t105013*3.0;
                double t105023 = gamma_aa[index]*gcaa*t105014*t105015*t105019;
                double t105024 = t105014*t105015*t105018*3.0;
                double t105025 = t105022+t105023+t105024+1.0;
                double t105026 = t105014*t105014;
                double t105027 = gamma_aa[index]*gcaa*t105013*4.0;
                double t105028 = gamma_aa[index]*gcaa*t105014*t105015*t105019*4.0;
                double t105029 = t105014*t105015*t105018*6.0;
                double t105030 = t105016*t105017*t105026;
                double t105031 = t105030+t105027+t105028+t105029+1.0;
                double t105032 = gamma_aa[index]*gcaa*t105013*2.0;
                double t105033 = t105014*t105015*t105018;
                double t105034 = t105032+t105033+1.0;
                double t105035 = pow(2.0,1.0/3.0);
                double t105036 = t105035*2.0;
                double t105037 = t105036-2.0;
                double t105038 = two_13*2.0;
                double t105039 = t105038-2.0;
                double t105040 = 1.0/t105039;
                double t105041 = 1.0/c0f;
                double t105042 = b1f*t104997;
                double t105043 = b3f*t104998;
                double t105044 = b4f*t105000*t104999;
                double t105045 = b2f*c*t104995;
                double t105046 = t105042+t105043+t105044+t105045;
                double t105047 = 1.0/t105046;
                double t105048 = t105041*t105047*(1.0/2.0);
                double t105049 = t105048+1.0;
                double t105050 = log(t105049);
                double t105051 = a1f*c*t104995;
                double t105052 = t105051+1.0;
                double t105053 = c0f*t105050*t105052*2.0;
                double t105054 = c0p*t105010*t105012*2.0;
                double t105055 = rho_a[index]*2.0;
                double t105056 = 1.0/pow(t105055,1.0/3.0);
                double t105057 = c*t105056;
                double t105058 = gcab*gcab;
                double t105059 = t105058*t105058;
                double t105060 = 1.0/pow(rho_a[index],1.9E1/3.0);
                double t105061 = 1.0/pow(rho_a[index],3.5E1/3.0);
                double t105062 = gamma_aa[index]*gcab*t105013*2.0;
                double t105063 = t105014*t105018*t105058;
                double t105064 = t105062+t105063+1.0;
                double t105065 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]*rho_a[index]);
                double t105066 = gamma_aa[index]*gcab*t105013;
                double t105067 = t105066+1.0;
                double t105068 = gamma_aa[index]*gcab*t105013*3.0;
                double t105069 = gamma_aa[index]*gcab*t105014*t105019*t105058;
                double t105070 = t105014*t105018*t105058*3.0;
                double t105071 = t105070+t105068+t105069+1.0;
                double t105072 = gamma_aa[index]*gcab*t105013*4.0;
                double t105073 = gamma_aa[index]*gcab*t105014*t105019*t105058*4.0;
                double t105074 = t105014*t105018*t105058*6.0;
                double t105075 = t105017*t105026*t105059;
                double t105076 = t105072+t105073+t105074+t105075+1.0;
                double t105077 = 1.0/pow(rho_a[index],1.1E1/3.0);
                double t105078 = 1.0/(t105064*t105064);
                double t105079 = 1.0/(t105071*t105071);
                double t105080 = 1.0/(t105076*t105076);
                double t105081 = gamma_aa[index]*gcab*t105077*(8.0/3.0);
                double t105082 = t105014*t105060*t105058*(8.0/3.0);
                double t105083 = t105081+t105082;
                double t105084 = gcab*t105013;
                double t105085 = gamma_aa[index]*t105018*t105058;
                double t105086 = t105084+t105085;
                double t105087 = gcab*t105013*(3.0/2.0);
                double t105088 = gamma_aa[index]*t105018*t105058*3.0;
                double t105089 = gcab*t105014*t105019*t105058*(3.0/2.0);
                double t105090 = t105087+t105088+t105089;
                double t105091 = gamma_aa[index]*gcab*t105077*4.0;
                double t105092 = gamma_aa[index]*gcab*t105014*t105065*t105058*4.0;
                double t105093 = t105014*t105060*t105058*8.0;
                double t105094 = t105091+t105092+t105093;
                double t105095 = gamma_aa[index]*gcab*t105077*(1.6E1/3.0);
                double t105096 = gamma_aa[index]*gcab*t105014*t105065*t105058*1.6E1;
                double t105097 = t105014*t105060*t105058*1.6E1;
                double t105098 = t105061*t105026*t105059*(1.6E1/3.0);
                double t105099 = t105095+t105096+t105097+t105098;
                double t105100 = gcab*t105013*2.0;
                double t105101 = gamma_aa[index]*t105018*t105058*6.0;
                double t105102 = gcab*t105014*t105019*t105058*6.0;
                double t105103 = gamma_aa[index]*t105014*t105017*t105059*2.0;
                double t105104 = t105100+t105101+t105102+t105103;
                double t105105 = t105053-t105054;
                double t105106 = t105040*t105105*t105037;
                double t105107 = t105106+t105054;
                double t105108 = rho_a[index]*t105107*2.0;
                double t105109 = sqrt(t105057);
                double t105110 = b1p*t105109;
                double t105111 = pow(t105057,3.0/2.0);
                double t105112 = b3p*t105111;
                double t105113 = b2p*c*t105056;
                double t105114 = 1.0/pow(t105055,2.0/3.0);
                double t105115 = b4p*t105114*t104999;
                double t105116 = t105110+t105112+t105113+t105115;
                double t105117 = 1.0/t105116;
                double t105118 = t105001*t105117*(1.0/2.0);
                double t105119 = t105118+1.0;
                double t105120 = log(t105119);
                double t105121 = a1p*c*t105056;
                double t105122 = t105121+1.0;
                double t105123 = t105108-c0p*rho_a[index]*t105120*t105122*4.0;
                double t105124 = 1.0/t105076;
                double t105125 = 1.0/t105064;
                double t105126 = 1.0/t105071;
                double t105127 = 1.0/(t105067*t105067);
                double t105128 = 1.0/(t105067*t105067*t105067);
                double t105129 = ccab3*gcab*t105014*t105019*t105058*t105094*t105079*(3.0/2.0);
                double t105130 = ccab2*gamma_aa[index]*t105018*t105083*t105058*t105078;
                double t105131 = ccab3*gamma_aa[index]*gcab*t105014*t105090*t105065*t105058*t105079*4.0;
                double t105132 = ccab4*gamma_aa[index]*t105014*t105017*t105080*t105059*t105099*2.0;
                double t105133 = ccab4*t105104*t105061*t105026*t105080*t105059*(1.6E1/3.0);
                double t105134 = ccab2*t105014*t105060*t105058*t105086*t105078*(8.0/3.0);
                double t105135 = gamma_aa[index]*t105060*t105058*4.0;
                double t105136 = 1.0/(t105064*t105064*t105064);
                double t105137 = 1.0/(t105071*t105071*t105071);
                double t105138 = 1.0/(t105076*t105076*t105076);
                double t105139 = 1.0/pow(t105055,4.0/3.0);
                double t105140 = 1.0/pow(rho_a[index],4.0/3.0);
                double t105141 = 1.0/pow(rho_a[index],5.0/3.0);
                double t105142 = 1.0/sqrt(t104996);
                double t105143 = 1.0/t105009;
                double t105144 = 1.0/(t105006*t105006);
                double t105145 = b4p*t105141*t104999*(2.0/3.0);
                double t105146 = b2p*c*t105140*(1.0/3.0);
                double t105147 = b1p*c*t105140*t105142*(1.0/6.0);
                double t105148 = b3p*c*t105140*t104997*(1.0/2.0);
                double t105149 = t105145+t105146+t105147+t105148;
                double t105150 = t105012*t105143*t105144*t105149;
                double t105151 = 1.0/t105067;
                double t105152 = 1.0/t105021;
                double t105153 = 1.0/t105031;
                double t105154 = 1.0/t105034;
                double t105155 = 1.0/t105025;
                double t105156 = 1.0/(t105021*t105021);
                double t105157 = 1.0/(t105025*t105025);
                double t105158 = 1.0/(t105034*t105034);
                double t105159 = gcaa*t105013*3.0;
                double t105160 = gamma_aa[index]*t105015*t105018*6.0;
                double t105161 = gcaa*t105014*t105015*t105019*3.0;
                double t105162 = t105160+t105161+t105159;
                double t105163 = 1.0/(t105031*t105031);
                double t105164 = gcaa*t105013*4.0;
                double t105165 = gamma_aa[index]*t105015*t105018*1.2E1;
                double t105166 = gcaa*t105014*t105015*t105019*1.2E1;
                double t105167 = gamma_aa[index]*t105014*t105016*t105017*4.0;
                double t105168 = t105164+t105165+t105166+t105167;
                double t105169 = gcaa*t105013*2.0;
                double t105170 = gamma_aa[index]*t105015*t105018*2.0;
                double t105171 = t105170+t105169;
                double t105172 = gamma_aa[index]*gcaa*t105077*(1.6E1/3.0);
                double t105173 = t105014*t105015*t105060*(1.6E1/3.0);
                double t105174 = t105172+t105173;
                double t105175 = gamma_aa[index]*gcaa*t105077*8.0;
                double t105176 = gamma_aa[index]*gcaa*t105014*t105015*t105065*8.0;
                double t105177 = t105014*t105015*t105060*1.6E1;
                double t105178 = t105175+t105176+t105177;
                double t105179 = gamma_aa[index]*gcaa*t105077*(3.2E1/3.0);
                double t105180 = gamma_aa[index]*gcaa*t105014*t105015*t105065*3.2E1;
                double t105181 = t105014*t105015*t105060*3.2E1;
                double t105182 = t105016*t105061*t105026*(3.2E1/3.0);
                double t105183 = t105180+t105181+t105182+t105179;
                double t105184 = 1.0/t105049;
                double t105185 = 1.0/(t105046*t105046);
                double t105186 = b4f*t105141*t104999*(2.0/3.0);
                double t105187 = b2f*c*t105140*(1.0/3.0);
                double t105188 = b1f*c*t105140*t105142*(1.0/6.0);
                double t105189 = b3f*c*t105140*t104997*(1.0/2.0);
                double t105190 = t105186+t105187+t105188+t105189;
                double t105191 = a1f*c*c0f*t105050*t105140*(2.0/3.0);
                double t105192 = a1p*c*c0p*t105010*t105140*(2.0/3.0);
                double t105193 = ccaa1*gcaa*t105013*t105152;
                double t105194 = ccaa4*gamma_aa[index]*t105014*t105016*t105017*t105153*4.0;
                double t105195 = ccaa2*gamma_aa[index]*t105015*t105018*t105154*2.0;
                double t105196 = ccaa3*gcaa*t105014*t105015*t105019*t105155*3.0;
                double t105197 = t105193+t105194+t105195+t105196-ccaa1*gamma_aa[index]*t105015*t105018*t105156-ccaa2* \
                   t105014*t105015*t105018*t105171*t105158-ccaa4*t105016*t105017*t105026*t105163*t105168-ccaa3*gamma_aa[index]* \
                   gcaa*t105014*t105015*t105162*t105019*t105157;
                double t105198 = omega*omega;
                double t105199 = rho_a[index]*(8.334140006820045E15/1.40737488355328E14);
                double t105200 = 1.0/(rho_a[index]*rho_a[index]);
                double t105201 = 1.0/pow(t105199,4.0/3.0);
                double t105202 = 1.0/(omega*omega);
                double t105203 = pow(t105199,2.0/3.0);
                double t105205 = t105202*t105203;
                double t105204 = exp(-t105205);
                double t105206 = 1.0/pow(t105199,1.0/3.0);
                double t105207 = 1.0/omega;
                double t105208 = 1.0/rho_a[index];
                double t105209 = omega*t105208*t105198*(7.0368744177664E13/8.334140006820045E15);
                double t105210 = omega*t105206;
                double t105211 = gx*gx;
                double t105212 = t105211*t105211;
                double t105213 = gamma_aa[index]*gx*t105013;
                double t105214 = t105213+1.0;
                double t105215 = gamma_aa[index]*gx*t105013*3.0;
                double t105216 = gamma_aa[index]*gx*t105211*t105014*t105019;
                double t105217 = t105211*t105014*t105018*3.0;
                double t105218 = t105215+t105216+t105217+1.0;
                double t105219 = gamma_aa[index]*gx*t105013*4.0;
                double t105220 = gamma_aa[index]*gx*t105211*t105014*t105019*4.0;
                double t105221 = t105211*t105014*t105018*6.0;
                double t105222 = t105212*t105017*t105026;
                double t105223 = t105220+t105221+t105222+t105219+1.0;
                double t105224 = gamma_aa[index]*gx*t105013*2.0;
                double t105225 = t105211*t105014*t105018;
                double t105226 = t105224+t105225+1.0;
                double t105227 = pow(t105199,1.0/3.0);
                double t105228 = t105207*t105227;
                double t105229 = erf(t105228);
                double t105230 = t105229*(3.991211251234741E15/2.251799813685248E15);
                double t105231 = t105204*(t105210-t105209);
                double t105259 = omega*t105206*(3.0/2.0);
                double t105232 = t105230+t105231+t105209-t105259;
                double t105233 = 1.0/t105214;
                double t105234 = cx1*gx*t105013*t105233;
                double t105235 = 1.0/t105223;
                double t105236 = cx4*gamma_aa[index]*t105014*t105212*t105017*t105235*4.0;
                double t105237 = 1.0/t105226;
                double t105238 = cx2*gamma_aa[index]*t105211*t105018*t105237*2.0;
                double t105239 = 1.0/t105218;
                double t105240 = cx3*gx*t105211*t105014*t105019*t105239*3.0;
                double t105241 = 1.0/(t105214*t105214);
                double t105242 = gx*t105013*3.0;
                double t105243 = gamma_aa[index]*t105211*t105018*6.0;
                double t105244 = gx*t105211*t105014*t105019*3.0;
                double t105245 = t105242+t105243+t105244;
                double t105246 = 1.0/(t105218*t105218);
                double t105247 = gx*t105013*4.0;
                double t105248 = gamma_aa[index]*t105211*t105018*1.2E1;
                double t105249 = gx*t105211*t105014*t105019*1.2E1;
                double t105250 = gamma_aa[index]*t105014*t105212*t105017*4.0;
                double t105251 = t105250+t105247+t105248+t105249;
                double t105252 = 1.0/(t105223*t105223);
                double t105253 = gx*t105013*2.0;
                double t105254 = gamma_aa[index]*t105211*t105018*2.0;
                double t105255 = t105253+t105254;
                double t105256 = 1.0/(t105226*t105226);
                double t105257 = t105240+t105234+t105236+t105238-cx1*gamma_aa[index]*t105211*t105241*t105018-cx2* \
                   t105211*t105014*t105018*t105255*t105256-cx4*t105212*t105017*t105026*t105251*t105252-cx3*gamma_aa[index]* \
                   gx*t105211*t105014*t105019*t105245*t105246;
                double t105258 = pow(rho_a[index],4.0/3.0);
                double t105260 = omega*t105232*t105206*(4.0/3.0);
                double t105261 = t105260-1.0;
                double t105262 = gamma_aa[index]*gx*t105077*(1.6E1/3.0);
                double t105263 = t105211*t105014*t105060*(1.6E1/3.0);
                double t105264 = t105262+t105263;
                double t105265 = gamma_aa[index]*gx*t105077*8.0;
                double t105266 = gamma_aa[index]*gx*t105211*t105014*t105065*8.0;
                double t105267 = t105211*t105014*t105060*1.6E1;
                double t105268 = t105265+t105266+t105267;
                double t105269 = gamma_aa[index]*gx*t105077*(3.2E1/3.0);
                double t105270 = gamma_aa[index]*gx*t105211*t105014*t105065*3.2E1;
                double t105271 = t105211*t105014*t105060*3.2E1;
                double t105272 = t105212*t105061*t105026*(3.2E1/3.0);
                double t105273 = t105270+t105271+t105272+t105269;
                v_rho_a_gamma_aa_[index] = t105123*(t105130+t105131+t105132+t105133+t105134+t105129-ccab2*gamma_aa[index]* \
                   t105060*t105125*t105058*(4.0/3.0)+ccab1*gamma_aa[index]*t105060*t105127*t105058*(4.0/3.0)+ccab4*t105017* \
                   t105026*t105080*t105059*(gamma_aa[index]*t105060*t105058*8.0+gamma_aa[index]*t105014*t105061*t105059* \
                   8.0+gcab*t105014*t105065*t105058*1.6E1)-ccab4*gamma_aa[index]*t105014*t105061*t105124*t105059*8.0+ \
                   ccab2*gamma_aa[index]*t105014*t105061*t105059*t105078*(4.0/3.0)-ccab1*gcab*t105014*t105065*t105128* \
                   t105058*(4.0/3.0)-ccab3*gcab*t105014*t105126*t105065*t105058*4.0-ccab2*t105014*t105018*t105136*t105083* \
                   t105058*t105086*2.0-ccab4*t105104*t105017*t105026*t105138*t105059*t105099*2.0+ccab3*gamma_aa[index]* \
                   gcab*t105014*t105019*t105058*t105079*(t105135+gcab*t105014*t105065*t105058*4.0)-ccab3*gamma_aa[index]* \
                   gcab*t105014*t105090*t105019*t105137*t105058*t105094*2.0)-t105197*(t105054+t105040*t105037*(t105053- \
                   c0p*t105010*t105012*2.0))-(-t105106-t105054+rho_a[index]*((t105122*1.0/(t105116*t105116)*(b4p*1.0/ \
                   pow(t105055,5.0/3.0)*t104999*(2.0/3.0)+b2p*c*t105139*(1.0/3.0)+b3p*c*t105109*t105139*(1.0/2.0)+b1p* \
                   c*1.0/sqrt(t105057)*t105139*(1.0/6.0)))/t105119-a1p*c*c0p*t105120*t105139*(2.0/3.0))*2.0+rho_a[index]* \
                   (-t105150+t105192+t105040*t105037*(t105150+t105191-t105052*t105190*t105184*t105185-a1p*c*c0p*t105010* \
                   t105140*(2.0/3.0)))+c0p*t105120*t105122*2.0)*(ccab1*gcab*t105013*t105151*(1.0/2.0)+ccab2*gamma_aa[index]* \
                   t105125*t105018*t105058-ccab1*gamma_aa[index]*t105018*t105127*t105058*(1.0/2.0)-ccab4*t105104*t105017* \
                   t105026*t105080*t105059-ccab2*t105014*t105018*t105058*t105086*t105078+ccab4*gamma_aa[index]*t105014* \
                   t105124*t105017*t105059*2.0+ccab3*gcab*t105014*t105126*t105019*t105058*(3.0/2.0)-ccab3*gamma_aa[index]* \
                   gcab*t105014*t105090*t105019*t105058*t105079)*2.0+t105123*(t105130+t105131+t105132+t105133+t105134+ \
                   t105129-ccab1*gcab*t105151*t105077*(4.0/3.0)-ccab2*gamma_aa[index]*t105060*t105125*t105058*4.0+ccab1* \
                   gamma_aa[index]*t105060*t105127*t105058*(8.0/3.0)+ccab4*t105017*t105026*t105080*t105059*(gcab*t105077* \
                   (1.6E1/3.0)+gamma_aa[index]*t105060*t105058*2.4E1+gamma_aa[index]*t105014*t105061*t105059*(4.0E1/3.0) \
                   +gcab*t105014*t105065*t105058*3.2E1)+ccab2*t105014*t105018*t105058*t105078*(t105135+gcab*t105077*(8.0/ \
                   3.0))-ccab4*gamma_aa[index]*t105014*t105061*t105124*t105059*(4.0E1/3.0)-ccab1*gcab*t105014*t105065* \
                   t105128*t105058*(4.0/3.0)-ccab3*gcab*t105014*t105126*t105065*t105058*8.0-ccab2*t105014*t105018*t105136* \
                   t105083*t105058*t105086*2.0-ccab4*t105104*t105017*t105026*t105138*t105059*t105099*2.0+ccab3*gamma_aa[index]* \
                   gcab*t105014*t105019*t105058*t105079*(gcab*t105077*4.0+gamma_aa[index]*t105060*t105058*1.2E1+gcab* \
                   t105014*t105065*t105058*8.0)-ccab3*gamma_aa[index]*gcab*t105014*t105090*t105019*t105137*t105058*t105094* \
                   2.0)-rho_a[index]*t105107*(ccaa1*gcaa*t105152*t105077*(-8.0/3.0)-ccaa2*gamma_aa[index]*t105015*t105060* \
                   t105154*(3.2E1/3.0)+ccaa1*gamma_aa[index]*t105015*t105060*t105156*8.0+ccaa2*t105014*t105015*t105060* \
                   t105171*t105158*(1.6E1/3.0)+ccaa4*t105016*t105061*t105026*t105163*t105168*(3.2E1/3.0)+ccaa4*t105016* \
                   t105017*t105026*t105163*(gcaa*t105077*(3.2E1/3.0)+gamma_aa[index]*t105015*t105060*6.4E1+gamma_aa[index]* \
                   t105014*t105016*t105061*(1.28E2/3.0)+gcaa*t105014*t105015*t105065*9.6E1)-ccaa1*gcaa*1.0/(t105021*t105021* \
                   t105021)*t105014*t105015*t105065*(1.6E1/3.0)+ccaa2*t105014*t105015*t105018*t105158*(gcaa*t105077*(1.6E1/ \
                   3.0)+gamma_aa[index]*t105015*t105060*(3.2E1/3.0))-ccaa4*gamma_aa[index]*t105014*t105016*t105061*t105153* \
                   (1.28E2/3.0)+ccaa2*gamma_aa[index]*t105015*t105018*t105174*t105158*2.0-ccaa3*gcaa*t105014*t105015* \
                   t105065*t105155*2.4E1+ccaa4*gamma_aa[index]*t105014*t105016*t105017*t105163*t105183*4.0+ccaa3*gcaa* \
                   t105014*t105015*t105019*t105157*t105178*3.0-ccaa2*t105014*t105015*1.0/(t105034*t105034*t105034)*t105018* \
                   t105171*t105174*2.0-ccaa4*1.0/(t105031*t105031*t105031)*t105016*t105017*t105026*t105183*t105168*2.0+ \
                   ccaa3*gamma_aa[index]*gcaa*t105014*t105015*t105019*t105157*(gcaa*t105077*8.0+gamma_aa[index]*t105015* \
                   t105060*3.2E1+gcaa*t105014*t105015*t105065*2.4E1)+ccaa3*gamma_aa[index]*gcaa*t105014*t105015*t105162* \
                   t105065*t105157*8.0-ccaa3*gamma_aa[index]*gcaa*t105014*t105015*1.0/(t105025*t105025*t105025)*t105162* \
                   t105019*t105178*2.0)+rho_a[index]*t105197*(-t105150+t105192+t105040*t105037*(t105150+t105191-t105192- \
                   t105052*t105190*t105184*t105185))-c0*t105261*t105258*(cx1*gx*t105233*t105077*(-8.0/3.0)+cx1*gamma_aa[index]* \
                   t105211*t105060*t105241*8.0-cx2*gamma_aa[index]*t105211*t105060*t105237*(3.2E1/3.0)+cx2*t105211*t105014* \
                   t105060*t105255*t105256*(1.6E1/3.0)+cx4*t105212*t105061*t105026*t105251*t105252*(3.2E1/3.0)+cx4*t105212* \
                   t105017*t105026*t105252*(gx*t105077*(3.2E1/3.0)+gamma_aa[index]*t105211*t105060*6.4E1+gamma_aa[index]* \
                   t105014*t105212*t105061*(1.28E2/3.0)+gx*t105211*t105014*t105065*9.6E1)-cx1*gx*t105211*t105014*1.0/ \
                   (t105214*t105214*t105214)*t105065*(1.6E1/3.0)+cx2*t105211*t105014*t105018*t105256*(gx*t105077*(1.6E1/ \
                   3.0)+gamma_aa[index]*t105211*t105060*(3.2E1/3.0))+cx2*gamma_aa[index]*t105211*t105018*t105264*t105256* \
                   2.0-cx4*gamma_aa[index]*t105014*t105212*t105061*t105235*(1.28E2/3.0)-cx3*gx*t105211*t105014*t105065* \
                   t105239*2.4E1+cx4*gamma_aa[index]*t105014*t105212*t105017*t105252*t105273*4.0+cx3*gx*t105211*t105014* \
                   t105019*t105246*t105268*3.0-cx2*t105211*t105014*t105018*1.0/(t105226*t105226*t105226)*t105255*t105264* \
                   2.0-cx4*t105212*1.0/(t105223*t105223*t105223)*t105017*t105026*t105251*t105273*2.0+cx3*gamma_aa[index]* \
                   gx*t105211*t105014*t105019*t105246*(gx*t105077*8.0+gamma_aa[index]*t105211*t105060*3.2E1+gx*t105211* \
                   t105014*t105065*2.4E1)+cx3*gamma_aa[index]*gx*t105211*t105014*t105065*t105245*t105246*8.0-cx3*gamma_aa[index]* \
                   gx*t105211*t105014*t105019*1.0/(t105218*t105218*t105218)*t105245*t105268*2.0)-c0*pow(rho_a[index],1.0/ \
                   3.0)*t105261*t105257*(4.0/3.0)+c0*t105257*t105258*(omega*t105206*(omega*t105201*(-8.334140006820045E15/ \
                   2.81474976710656E14)+t105204*(omega*t105201*(2.778046668940015E15/1.40737488355328E14)-omega*t105200* \
                   t105198*(7.0368744177664E13/8.334140006820045E15))+omega*t105200*t105198*(7.0368744177664E13/8.334140006820045E15) \
                   +t105202*t105204*t105206*(t105210-omega*t105208*t105198*(7.0368744177664E13/8.334140006820045E15)) \
                   *(2.778046668940015E15/7.0368744177664E13)-1.0/sqrt(3.141592653589793)*t105204*t105207*1.0/pow(t105199,2.0/ \
                   3.0)*(1.108777112152858E31/1.584563250285287E29))*(4.0/3.0)+omega*t105201*t105232*(2.778046668940015E15/ \
                   1.05553116266496E14));
            } else {
                v_rho_a_gamma_aa_[index] = 0.0;
            }

            //V_gamma_aa_gamma_aa
            if (rho_a[index] > cutoff_) {
                double t105275 = 1.0/pow(rho_a[index],1.0/3.0);
                double t105276 = c*t105275;
                double t105277 = sqrt(t105276);
                double t105278 = pow(t105276,3.0/2.0);
                double t105279 = c*c;
                double t105280 = 1.0/pow(rho_a[index],2.0/3.0);
                double t105281 = 1.0/c0p;
                double t105282 = b1p*t105277;
                double t105283 = b3p*t105278;
                double t105284 = b4p*t105280*t105279;
                double t105285 = b2p*c*t105275;
                double t105286 = t105282+t105283+t105284+t105285;
                double t105287 = 1.0/t105286;
                double t105288 = t105281*t105287*(1.0/2.0);
                double t105289 = t105288+1.0;
                double t105290 = log(t105289);
                double t105291 = a1p*c*t105275;
                double t105292 = t105291+1.0;
                double t105293 = rho_a[index]*2.0;
                double t105294 = 1.0/pow(t105293,1.0/3.0);
                double t105295 = c*t105294;
                double t105296 = gcab*gcab;
                double t105297 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t105298 = 1.0/pow(rho_a[index],8.0/3.0);
                double t105299 = gamma_aa[index]*gamma_aa[index];
                double t105300 = t105296*t105296;
                double t105301 = 1.0/pow(rho_a[index],3.2E1/3.0);
                double t105302 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t105303 = gamma_aa[index]*gcab*t105298;
                double t105304 = t105303+1.0;
                double t105305 = gamma_aa[index]*gcab*t105298*2.0;
                double t105306 = t105296*t105297*t105299;
                double t105307 = t105305+t105306+1.0;
                double t105308 = gamma_aa[index]*gcab*t105298*3.0;
                double t105309 = gamma_aa[index]*gcab*t105302*t105296*t105299;
                double t105310 = t105296*t105297*t105299*3.0;
                double t105311 = t105310+t105308+t105309+1.0;
                double t105312 = t105299*t105299;
                double t105328 = gcab*t105298*2.0;
                double t105329 = gamma_aa[index]*t105296*t105297*6.0;
                double t105330 = gcab*t105302*t105296*t105299*6.0;
                double t105331 = gamma_aa[index]*t105300*t105301*t105299*2.0;
                double t105313 = t105330+t105331+t105328+t105329;
                double t105314 = gamma_aa[index]*gcab*t105298*4.0;
                double t105315 = gamma_aa[index]*gcab*t105302*t105296*t105299*4.0;
                double t105316 = t105296*t105297*t105299*6.0;
                double t105317 = t105300*t105301*t105312;
                double t105318 = t105314+t105315+t105316+t105317+1.0;
                double t105321 = gcab*t105298;
                double t105322 = gamma_aa[index]*t105296*t105297;
                double t105319 = t105321+t105322;
                double t105320 = 1.0/(t105311*t105311);
                double t105323 = 1.0/(t105307*t105307);
                double t105324 = gcab*t105298*(3.0/2.0);
                double t105325 = gamma_aa[index]*t105296*t105297*3.0;
                double t105326 = gcab*t105302*t105296*t105299*(3.0/2.0);
                double t105327 = t105324+t105325+t105326;
                double t105332 = 1.0/(t105318*t105318);
                double t105333 = pow(2.0,1.0/3.0);
                double t105334 = t105333*2.0;
                double t105335 = t105334-2.0;
                double t105336 = two_13*2.0;
                double t105337 = t105336-2.0;
                double t105338 = 1.0/t105337;
                double t105339 = 1.0/c0f;
                double t105340 = b1f*t105277;
                double t105341 = b3f*t105278;
                double t105342 = b4f*t105280*t105279;
                double t105343 = b2f*c*t105275;
                double t105344 = t105340+t105341+t105342+t105343;
                double t105345 = 1.0/t105344;
                double t105346 = t105345*t105339*(1.0/2.0);
                double t105347 = t105346+1.0;
                double t105348 = log(t105347);
                double t105349 = a1f*c*t105275;
                double t105350 = t105349+1.0;
                double t105351 = c0f*t105350*t105348*2.0;
                double t105352 = c0p*t105290*t105292*2.0;
                double t105353 = gcaa*gcaa;
                double t105354 = t105353*t105353;
                double t105355 = gamma_aa[index]*gcaa*t105298;
                double t105356 = t105355+1.0;
                double t105357 = gamma_aa[index]*gcaa*t105298*2.0;
                double t105358 = t105353*t105297*t105299;
                double t105359 = t105357+t105358+1.0;
                double t105360 = gamma_aa[index]*gcaa*t105298*3.0;
                double t105361 = gamma_aa[index]*gcaa*t105302*t105353*t105299;
                double t105362 = t105353*t105297*t105299*3.0;
                double t105363 = t105360+t105361+t105362+1.0;
                double t105379 = gcaa*t105298*4.0;
                double t105380 = gamma_aa[index]*t105353*t105297*1.2E1;
                double t105381 = gcaa*t105302*t105353*t105299*1.2E1;
                double t105382 = gamma_aa[index]*t105301*t105354*t105299*4.0;
                double t105364 = t105380+t105381+t105382+t105379;
                double t105365 = gamma_aa[index]*gcaa*t105298*4.0;
                double t105366 = gamma_aa[index]*gcaa*t105302*t105353*t105299*4.0;
                double t105367 = t105353*t105297*t105299*6.0;
                double t105368 = t105301*t105312*t105354;
                double t105369 = t105365+t105366+t105367+t105368+1.0;
                double t105372 = gcaa*t105298*2.0;
                double t105373 = gamma_aa[index]*t105353*t105297*2.0;
                double t105370 = t105372+t105373;
                double t105371 = 1.0/(t105363*t105363);
                double t105374 = 1.0/(t105359*t105359);
                double t105375 = gcaa*t105298*3.0;
                double t105376 = gamma_aa[index]*t105353*t105297*6.0;
                double t105377 = gcaa*t105302*t105353*t105299*3.0;
                double t105378 = t105375+t105376+t105377;
                double t105383 = 1.0/(t105369*t105369);
                double t105384 = rho_a[index]*(8.334140006820045E15/1.40737488355328E14);
                double t105385 = omega*omega;
                double t105386 = 1.0/rho_a[index];
                double t105387 = omega*t105385*t105386*(7.0368744177664E13/8.334140006820045E15);
                double t105388 = 1.0/pow(t105384,1.0/3.0);
                double t105389 = gx*gx;
                double t105390 = t105389*t105389;
                double t105391 = gamma_aa[index]*gx*t105298;
                double t105392 = t105391+1.0;
                double t105393 = gamma_aa[index]*gx*t105298*2.0;
                double t105394 = t105297*t105299*t105389;
                double t105395 = t105393+t105394+1.0;
                double t105396 = gamma_aa[index]*gx*t105298*3.0;
                double t105397 = gamma_aa[index]*gx*t105302*t105299*t105389;
                double t105398 = t105297*t105299*t105389*3.0;
                double t105399 = t105396+t105397+t105398+1.0;
                double t105415 = gx*t105298*4.0;
                double t105416 = gamma_aa[index]*t105297*t105389*1.2E1;
                double t105417 = gx*t105302*t105299*t105389*1.2E1;
                double t105418 = gamma_aa[index]*t105301*t105390*t105299*4.0;
                double t105400 = t105415+t105416+t105417+t105418;
                double t105401 = gamma_aa[index]*gx*t105298*4.0;
                double t105402 = gamma_aa[index]*gx*t105302*t105299*t105389*4.0;
                double t105403 = t105297*t105299*t105389*6.0;
                double t105404 = t105301*t105312*t105390;
                double t105405 = t105401+t105402+t105403+t105404+1.0;
                double t105408 = gx*t105298*2.0;
                double t105409 = gamma_aa[index]*t105297*t105389*2.0;
                double t105406 = t105408+t105409;
                double t105407 = 1.0/(t105399*t105399);
                double t105410 = 1.0/(t105395*t105395);
                double t105411 = gx*t105298*3.0;
                double t105412 = gamma_aa[index]*t105297*t105389*6.0;
                double t105413 = gx*t105302*t105299*t105389*3.0;
                double t105414 = t105411+t105412+t105413;
                double t105419 = 1.0/(t105405*t105405);
                v_gamma_aa_gamma_aa_[index] = (rho_a[index]*(t105352+t105335*t105338*(t105351-c0p*t105290*t105292* \
                   2.0))*2.0-c0p*rho_a[index]*log((t105281*(1.0/2.0))/(b1p*sqrt(t105295)+b3p*pow(t105295,3.0/2.0)+b4p* \
                   1.0/pow(t105293,2.0/3.0)*t105279+b2p*c*t105294)+1.0)*(a1p*c*t105294+1.0)*4.0)*(ccab1*1.0/(t105304* \
                   t105304)*t105296*t105297*(1.0/2.0)-(ccab2*t105296*t105297*(1.0/2.0))/t105307+ccab2*t105300*t105301* \
                   t105323*t105299*(1.0/2.0)-(ccab4*t105300*t105301*t105299*3.0)/t105318+ccab4*t105300*t105301*t105312* \
                   t105332*(t105296*t105297*3.0+t105300*t105301*t105299*3.0+gamma_aa[index]*gcab*t105302*t105296*6.0) \
                   -(ccab3*gamma_aa[index]*gcab*t105302*t105296*(3.0/2.0))/t105311-ccab1*gamma_aa[index]*gcab*t105302* \
                   1.0/(t105304*t105304*t105304)*t105296*(1.0/2.0)-ccab4*t105300*t105301*t105312*(t105313*t105313)*1.0/ \
                   (t105318*t105318*t105318)*2.0-ccab2*1.0/(t105307*t105307*t105307)*(t105319*t105319)*t105296*t105297* \
                   t105299*2.0+ccab2*gamma_aa[index]*t105323*t105319*t105296*t105297*2.0+ccab4*gamma_aa[index]*t105300* \
                   t105301*t105313*t105332*t105299*4.0+ccab3*gcab*t105302*t105320*t105327*t105296*t105299*3.0+ccab3*gamma_aa[index]* \
                   gcab*t105302*t105320*t105296*t105299*(t105296*t105297*(3.0/2.0)+gamma_aa[index]*gcab*t105302*t105296* \
                   (3.0/2.0))-ccab3*gamma_aa[index]*gcab*t105302*1.0/(t105311*t105311*t105311)*(t105327*t105327)*t105296* \
                   t105299*2.0)*-4.0+rho_a[index]*(t105352+t105335*t105338*(t105351-t105352))*(ccaa1*t105353*1.0/(t105356* \
                   t105356)*t105297*2.0-(ccaa2*t105353*t105297*2.0)/t105359+ccaa2*t105301*t105354*t105374*t105299*2.0- \
                   (ccaa4*t105301*t105354*t105299*1.2E1)/t105369+ccaa4*t105301*t105312*t105354*t105383*(t105353*t105297* \
                   1.2E1+t105301*t105354*t105299*1.2E1+gamma_aa[index]*gcaa*t105302*t105353*2.4E1)-(ccaa3*gamma_aa[index]* \
                   gcaa*t105302*t105353*6.0)/t105363-ccaa1*gamma_aa[index]*gcaa*t105302*t105353*1.0/(t105356*t105356* \
                   t105356)*2.0-ccaa4*t105301*t105312*t105354*(t105364*t105364)*1.0/(t105369*t105369*t105369)*2.0-ccaa2* \
                   (t105370*t105370)*t105353*1.0/(t105359*t105359*t105359)*t105297*t105299*2.0+ccaa2*gamma_aa[index]* \
                   t105370*t105353*t105374*t105297*4.0+ccaa4*gamma_aa[index]*t105301*t105354*t105364*t105383*t105299* \
                   8.0+ccaa3*gcaa*t105302*t105353*t105371*t105378*t105299*6.0+ccaa3*gamma_aa[index]*gcaa*t105302*t105353* \
                   t105371*t105299*(t105353*t105297*6.0+gamma_aa[index]*gcaa*t105302*t105353*6.0)-ccaa3*gamma_aa[index]* \
                   gcaa*t105302*t105353*1.0/(t105363*t105363*t105363)*(t105378*t105378)*t105299*2.0)*2.0+c0*pow(rho_a[index],4.0/ \
                   3.0)*(omega*t105388*(t105387+erf(pow(t105384,1.0/3.0)/omega)*(3.991211251234741E15/2.251799813685248E15) \
                   -omega*t105388*(3.0/2.0)-exp(-1.0/(omega*omega)*pow(t105384,2.0/3.0))*(t105387-omega*t105388))*(4.0/ \
                   3.0)-1.0)*(cx1*1.0/(t105392*t105392)*t105297*t105389*2.0-(cx2*t105297*t105389*2.0)/t105395+cx2*t105301* \
                   t105410*t105390*t105299*2.0-(cx4*t105301*t105390*t105299*1.2E1)/t105405+cx4*t105301*t105312*t105390* \
                   t105419*(t105297*t105389*1.2E1+t105301*t105390*t105299*1.2E1+gamma_aa[index]*gx*t105302*t105389*2.4E1) \
                   -cx1*gamma_aa[index]*gx*t105302*1.0/(t105392*t105392*t105392)*t105389*2.0-(cx3*gamma_aa[index]*gx* \
                   t105302*t105389*6.0)/t105399-cx2*(t105406*t105406)*1.0/(t105395*t105395*t105395)*t105297*t105299*t105389* \
                   2.0-cx4*t105301*(t105400*t105400)*t105312*1.0/(t105405*t105405*t105405)*t105390*2.0+cx2*gamma_aa[index]* \
                   t105410*t105406*t105297*t105389*4.0+cx4*gamma_aa[index]*t105301*t105400*t105390*t105419*t105299*8.0+ \
                   cx3*gx*t105302*t105414*t105407*t105299*t105389*6.0+cx3*gamma_aa[index]*gx*t105302*t105407*t105299* \
                   t105389*(t105297*t105389*6.0+gamma_aa[index]*gx*t105302*t105389*6.0)-cx3*gamma_aa[index]*gx*t105302* \
                   (t105414*t105414)*t105299*t105389*1.0/(t105399*t105399*t105399)*2.0)*2.0;
            } else {
                v_gamma_aa_gamma_aa_[index] = 0.0;
            }

        }
        if (is_meta_) {

            //V_rho_a_tau_a
            if (rho_a[index] > cutoff_) {
                v_rho_a_tau_a_[index] = 0.0;
            } else {
                v_rho_a_tau_a_[index] = 0.0;
            }

            //V_tau_a_tau_a
            if (rho_a[index] > cutoff_) {
                v_tau_a_tau_a_[index] = 0.0;
            } else {
                v_tau_a_tau_a_[index] = 0.0;
            }

            if (is_gga_) {

                //V_gamma_aa_tau_a
                if (rho_a[index] > cutoff_) {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } else {
                    v_gamma_aa_tau_a_[index] = 0.0;
                }

            }
        }
    }
}
void wB97_Functional::computeUKSFunctional(boost::shared_ptr<UKSFunctions> prop)
{
    int ntrue = prop->npoints();

    const double* restrict rho_a;
    const double* restrict rho_b;
    const double* restrict gamma_aa;
    const double* restrict gamma_ab;
    const double* restrict gamma_bb;
    const double* restrict tau_a;
    const double* restrict tau_b;

    rho_a = prop->property_value("RHO_A")->pointer();
    rho_b = prop->property_value("RHO_B")->pointer();
    if (is_gga_) {
        gamma_aa = prop->property_value("GAMMA_AA")->pointer();
        gamma_ab = prop->property_value("GAMMA_AB")->pointer();
        gamma_bb = prop->property_value("GAMMA_BB")->pointer();
    }
    if (is_meta_) {
        tau_a = prop->property_value("TAU_A")->pointer();
        tau_b = prop->property_value("TAU_B")->pointer();
    }

    double omega = params_[0].second;
    double c0 = params_[1].second;
    double two_13 = params_[2].second;
    double d2fz0 = params_[3].second;
    double c = params_[4].second;
    double Aa = params_[5].second;
    double a1a = params_[6].second;
    double b1a = params_[7].second;
    double b2a = params_[8].second;
    double b3a = params_[9].second;
    double b4a = params_[10].second;
    double c0p = params_[11].second;
    double a1p = params_[12].second;
    double b1p = params_[13].second;
    double b2p = params_[14].second;
    double b3p = params_[15].second;
    double b4p = params_[16].second;
    double c0f = params_[17].second;
    double a1f = params_[18].second;
    double b1f = params_[19].second;
    double b2f = params_[20].second;
    double b3f = params_[21].second;
    double b4f = params_[22].second;
    double gcab = params_[23].second;
    double gcaa = params_[24].second;
    double gx = params_[25].second;
    double ccab0 = params_[26].second;
    double ccab1 = params_[27].second;
    double ccab2 = params_[28].second;
    double ccab3 = params_[29].second;
    double ccab4 = params_[30].second;
    double ccaa0 = params_[31].second;
    double ccaa1 = params_[32].second;
    double ccaa2 = params_[33].second;
    double ccaa3 = params_[34].second;
    double ccaa4 = params_[35].second;
    double cx0 = params_[36].second;
    double cx1 = params_[37].second;
    double cx2 = params_[38].second;
    double cx3 = params_[39].second;
    double cx4 = params_[40].second;

    //Functional
    for (int index = 0; index < ntrue; index++) {

        //Functional Value
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t98985 = 1.0/pow(rho_a[index],1.0/3.0);
            double t98986 = c*t98985;
            double t98987 = sqrt(t98986);
            double t98988 = pow(t98986,3.0/2.0);
            double t98989 = c*c;
            double t98990 = 1.0/pow(rho_a[index],2.0/3.0);
            double t98991 = 1.0/c0p;
            double t98992 = b1p*t98987;
            double t98993 = b3p*t98988;
            double t98994 = b4p*t98990*t98989;
            double t98995 = b2p*c*t98985;
            double t98996 = t98992+t98993+t98994+t98995;
            double t98997 = 1.0/t98996;
            double t98998 = t98991*t98997*(1.0/2.0);
            double t98999 = t98998+1.0;
            double t99000 = log(t98999);
            double t99001 = a1p*c*t98985;
            double t99002 = t99001+1.0;
            double t99003 = pow(2.0,1.0/3.0);
            double t99004 = t99003*2.0;
            double t99005 = t99004-2.0;
            double t99006 = two_13*2.0;
            double t99007 = t99006-2.0;
            double t99008 = 1.0/t99007;
            double t99009 = 1.0/c0f;
            double t99010 = 1.0/pow(rho_b[index],1.0/3.0);
            double t99011 = c*t99010;
            double t99012 = sqrt(t99011);
            double t99013 = pow(t99011,3.0/2.0);
            double t99014 = 1.0/pow(rho_b[index],2.0/3.0);
            double t99015 = b1p*t99012;
            double t99016 = b3p*t99013;
            double t99017 = b4p*t98989*t99014;
            double t99018 = b2p*c*t99010;
            double t99019 = t99015+t99016+t99017+t99018;
            double t99020 = 1.0/t99019;
            double t99021 = t98991*t99020*(1.0/2.0);
            double t99022 = t99021+1.0;
            double t99023 = log(t99022);
            double t99024 = a1p*c*t99010;
            double t99025 = t99024+1.0;
            double t99026 = c0p*t99023*t99025*2.0;
            double t99027 = rho_a[index]+rho_b[index];
            double t99028 = 1.0/pow(t99027,1.0/3.0);
            double t99029 = c*t99028;
            double t99030 = sqrt(t99029);
            double t99031 = pow(t99029,3.0/2.0);
            double t99032 = 1.0/pow(t99027,2.0/3.0);
            double t99033 = b1p*t99030;
            double t99034 = b3p*t99031;
            double t99035 = b4p*t98989*t99032;
            double t99036 = b2p*c*t99028;
            double t99037 = t99033+t99034+t99035+t99036;
            double t99038 = 1.0/t99037;
            double t99039 = t98991*t99038*(1.0/2.0);
            double t99040 = t99039+1.0;
            double t99041 = log(t99040);
            double t99042 = a1p*c*t99028;
            double t99043 = t99042+1.0;
            double t99044 = c0p*t99041*t99043*2.0;
            double t99045 = rho_a[index]-rho_b[index];
            double t99046 = t99045*t99045;
            double t99047 = 1.0/t99027;
            double t99048 = t99045*t99047;
            double t99049 = 1.0/(t99027*t99027*t99027*t99027);
            double t99050 = t99046*t99046;
            double t99051 = t99048+1.0;
            double t99052 = pow(t99051,4.0/3.0);
            double t99053 = -t99048+1.0;
            double t99054 = pow(t99053,4.0/3.0);
            double t99055 = t99052+t99054-2.0;
            double t99058 = 1.0/pow(rho_a[index],8.0/3.0);
            double t99059 = gamma_aa[index]*t99058*(1.0/2.0);
            double t99060 = 1.0/pow(rho_b[index],8.0/3.0);
            double t99061 = gamma_bb[index]*t99060*(1.0/2.0);
            double t99056 = t99061+t99059;
            double t99057 = gcab*gcab;
            double t99062 = t99056*t99056;
            double t99063 = t99057*t99057;
            double t99064 = t99062*t99062;
            double t99065 = c0p*t99000*t99002*2.0;
            double t99066 = b1f*t98987;
            double t99067 = b3f*t98988;
            double t99068 = b4f*t98990*t98989;
            double t99069 = b2f*c*t98985;
            double t99070 = t99066+t99067+t99068+t99069;
            double t99071 = 1.0/t99070;
            double t99072 = t99071*t99009*(1.0/2.0);
            double t99073 = t99072+1.0;
            double t99074 = log(t99073);
            double t99075 = a1f*c*t98985;
            double t99076 = t99075+1.0;
            double t99077 = t99065-c0f*t99074*t99076*2.0;
            double t99078 = t99065-t99005*t99008*t99077;
            double t99079 = gamma_aa[index]*gamma_aa[index];
            double t99080 = gcaa*gcaa;
            double t99081 = t99079*t99079;
            double t99082 = t99080*t99080;
            double t99083 = 1.0/pow(rho_a[index],3.2E1/3.0);
            double t99084 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]);
            double t99085 = 1.0/pow(rho_a[index],1.6E1/3.0);
            double t99086 = b1f*t99012;
            double t99087 = b3f*t99013;
            double t99088 = b4f*t98989*t99014;
            double t99089 = b2f*c*t99010;
            double t99090 = t99086+t99087+t99088+t99089;
            double t99091 = 1.0/t99090;
            double t99092 = t99009*t99091*(1.0/2.0);
            double t99093 = t99092+1.0;
            double t99094 = log(t99093);
            double t99095 = a1f*c*t99010;
            double t99096 = t99095+1.0;
            double t99097 = t99026-c0f*t99094*t99096*2.0;
            double t99098 = t99026-t99005*t99008*t99097;
            double t99099 = gamma_bb[index]*gamma_bb[index];
            double t99100 = t99099*t99099;
            double t99101 = 1.0/pow(rho_b[index],3.2E1/3.0);
            double t99102 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
               rho_b[index]*rho_b[index]);
            double t99103 = 1.0/pow(rho_b[index],1.6E1/3.0);
            double t99104 = rho_a[index]*(8.334140006820045E15/1.40737488355328E14);
            double t99105 = omega*omega;
            double t99106 = 1.0/rho_a[index];
            double t99107 = omega*t99105*t99106*(7.0368744177664E13/8.334140006820045E15);
            double t99108 = 1.0/pow(t99104,1.0/3.0);
            double t99109 = gx*gx;
            double t99110 = t99109*t99109;
            double t99111 = 1.0/omega;
            double t99112 = rho_b[index]*(8.334140006820045E15/1.40737488355328E14);
            double t99113 = 1.0/(omega*omega);
            double t99114 = 1.0/rho_b[index];
            double t99115 = omega*t99105*t99114*(7.0368744177664E13/8.334140006820045E15);
            double t99116 = 1.0/pow(t99112,1.0/3.0);
            functional_[index] = (rho_a[index]*t99078+rho_b[index]*t99098-t99027*(t99044-t99050*t99008*t99055* \
               t99049*(t99044-c0f*log((t99009*(1.0/2.0))/(b1f*t99030+b3f*t99031+b2f*c*t99028+b4f*t98989*t99032)+1.0) \
               *(a1f*c*t99028+1.0)*2.0)+(Aa*t99008*t99055*log((1.0/2.0)/(Aa*(b1a*t99030+b3a*t99031+b2a*c*t99028+b4a* \
               t98989*t99032))+1.0)*(t99050*t99049-1.0)*(a1a*c*t99028+1.0)*2.0)/d2fz0))*(ccab0+(ccab4*t99063*t99064) \
               /(gcab*t99056*4.0+t99063*t99064+t99062*t99057*6.0+gcab*t99062*t99056*t99057*4.0+1.0)+(ccab1*gcab*t99056) \
               /(gcab*t99056+1.0)+(ccab2*t99062*t99057)/(gcab*t99056*2.0+t99062*t99057+1.0)+(ccab3*gcab*t99062*t99056* \
               t99057)/(gcab*t99056*3.0+t99062*t99057*3.0+gcab*t99062*t99056*t99057+1.0))-rho_b[index]*t99098*(ccaa0+ \
               (ccaa2*t99103*t99080*t99099)/(gamma_bb[index]*gcaa*t99060*2.0+t99103*t99080*t99099+1.0)+(ccaa1*gamma_bb[index]* \
               gcaa*t99060)/(gamma_bb[index]*gcaa*t99060+1.0)+(ccaa4*t99100*t99101*t99082)/(gamma_bb[index]*gcaa* \
               t99060*4.0+t99100*t99101*t99082+t99103*t99080*t99099*6.0+gamma_bb[index]*gcaa*t99102*t99080*t99099* \
               4.0+1.0)+(ccaa3*gamma_bb[index]*gcaa*t99102*t99080*t99099)/(gamma_bb[index]*gcaa*t99060*3.0+t99103* \
               t99080*t99099*3.0+gamma_bb[index]*gcaa*t99102*t99080*t99099+1.0))-rho_a[index]*t99078*(ccaa0+(ccaa2* \
               t99080*t99085*t99079)/(gamma_aa[index]*gcaa*t99058*2.0+t99080*t99085*t99079+1.0)+(ccaa1*gamma_aa[index]* \
               gcaa*t99058)/(gamma_aa[index]*gcaa*t99058+1.0)+(ccaa4*t99081*t99082*t99083)/(gamma_aa[index]*gcaa* \
               t99058*4.0+t99081*t99082*t99083+t99080*t99085*t99079*6.0+gamma_aa[index]*gcaa*t99080*t99084*t99079* \
               4.0+1.0)+(ccaa3*gamma_aa[index]*gcaa*t99080*t99084*t99079)/(gamma_aa[index]*gcaa*t99058*3.0+t99080* \
               t99085*t99079*3.0+gamma_aa[index]*gcaa*t99080*t99084*t99079+1.0))-c0*pow(rho_b[index],4.0/3.0)*(omega* \
               t99116*(t99115+erf(t99111*pow(t99112,1.0/3.0))*(3.991211251234741E15/2.251799813685248E15)-omega*t99116* \
               (3.0/2.0)-exp(-pow(t99112,2.0/3.0)*t99113)*(t99115-omega*t99116))*(4.0/3.0)-1.0)*(cx0+(cx2*t99103* \
               t99109*t99099)/(gamma_bb[index]*gx*t99060*2.0+t99103*t99109*t99099+1.0)+(cx1*gamma_bb[index]*gx*t99060) \
               /(gamma_bb[index]*gx*t99060+1.0)+(cx4*t99100*t99101*t99110)/(gamma_bb[index]*gx*t99060*4.0+t99100* \
               t99101*t99110+t99103*t99109*t99099*6.0+gamma_bb[index]*gx*t99102*t99109*t99099*4.0+1.0)+(cx3*gamma_bb[index]* \
               gx*t99102*t99109*t99099)/(gamma_bb[index]*gx*t99060*3.0+t99103*t99109*t99099*3.0+gamma_bb[index]*gx* \
               t99102*t99109*t99099+1.0))-c0*pow(rho_a[index],4.0/3.0)*(omega*t99108*(t99107+erf(t99111*pow(t99104,1.0/ \
               3.0))*(3.991211251234741E15/2.251799813685248E15)-omega*t99108*(3.0/2.0)-exp(-pow(t99104,2.0/3.0)* \
               t99113)*(t99107-omega*t99108))*(4.0/3.0)-1.0)*(cx0+(cx2*t99109*t99085*t99079)/(gamma_aa[index]*gx* \
               t99058*2.0+t99109*t99085*t99079+1.0)+(cx1*gamma_aa[index]*gx*t99058)/(gamma_aa[index]*gx*t99058+1.0) \
               +(cx4*t99110*t99081*t99083)/(gamma_aa[index]*gx*t99058*4.0+t99110*t99081*t99083+t99109*t99085*t99079* \
               6.0+gamma_aa[index]*gx*t99109*t99084*t99079*4.0+1.0)+(cx3*gamma_aa[index]*gx*t99109*t99084*t99079) \
               /(gamma_aa[index]*gx*t99058*3.0+t99109*t99085*t99079*3.0+gamma_aa[index]*gx*t99109*t99084*t99079+1.0) \
               );
        } else if (rho_a[index] > cutoff_) {
            double t103502 = 1.0/pow(rho_a[index],1.0/3.0);
            double t103503 = c*t103502;
            double t103504 = sqrt(t103503);
            double t103505 = pow(t103503,3.0/2.0);
            double t103506 = c*c;
            double t103507 = 1.0/pow(rho_a[index],2.0/3.0);
            double t103508 = 1.0/c0p;
            double t103509 = b1p*t103504;
            double t103510 = b3p*t103505;
            double t103511 = b4p*t103506*t103507;
            double t103512 = b2p*c*t103502;
            double t103513 = t103510+t103511+t103512+t103509;
            double t103514 = 1.0/t103513;
            double t103515 = t103514*t103508*(1.0/2.0);
            double t103516 = t103515+1.0;
            double t103517 = log(t103516);
            double t103518 = a1p*c*t103502;
            double t103519 = t103518+1.0;
            double t103520 = gamma_aa[index]*gamma_aa[index];
            double t103521 = gcaa*gcaa;
            double t103522 = t103520*t103520;
            double t103523 = t103521*t103521;
            double t103524 = 1.0/pow(rho_a[index],3.2E1/3.0);
            double t103525 = 1.0/pow(rho_a[index],8.0/3.0);
            double t103526 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]);
            double t103527 = 1.0/pow(rho_a[index],1.6E1/3.0);
            double t103528 = rho_a[index]*(8.334140006820045E15/1.40737488355328E14);
            double t103529 = omega*omega;
            double t103530 = 1.0/rho_a[index];
            double t103531 = omega*t103530*t103529*(7.0368744177664E13/8.334140006820045E15);
            double t103532 = 1.0/pow(t103528,1.0/3.0);
            double t103533 = gx*gx;
            double t103534 = t103533*t103533;
            functional_[index] = -rho_a[index]*(((pow(2.0,1.0/3.0)*2.0-2.0)*(c0f*log((1.0/2.0)/(c0f*(b1f*t103504+ \
               b3f*t103505+b2f*c*t103502+b4f*t103506*t103507))+1.0)*(a1f*c*t103502+1.0)*2.0-c0p*t103517*t103519*2.0) \
               )/(two_13*2.0-2.0)+c0p*t103517*t103519*2.0)*(ccaa0+(ccaa2*t103520*t103521*t103527)/(gamma_aa[index]* \
               gcaa*t103525*2.0+t103520*t103521*t103527+1.0)+(ccaa1*gamma_aa[index]*gcaa*t103525)/(gamma_aa[index]* \
               gcaa*t103525+1.0)+(ccaa4*t103522*t103523*t103524)/(gamma_aa[index]*gcaa*t103525*4.0+t103520*t103521* \
               t103527*6.0+t103522*t103523*t103524+gamma_aa[index]*gcaa*t103520*t103521*t103526*4.0+1.0)+(ccaa3*gamma_aa[index]* \
               gcaa*t103520*t103521*t103526)/(gamma_aa[index]*gcaa*t103525*3.0+t103520*t103521*t103527*3.0+gamma_aa[index]* \
               gcaa*t103520*t103521*t103526+1.0))-c0*pow(rho_a[index],4.0/3.0)*(omega*t103532*(t103531+erf(pow(t103528,1.0/ \
               3.0)/omega)*(3.991211251234741E15/2.251799813685248E15)-omega*t103532*(3.0/2.0)-exp(-1.0/(omega*omega) \
               *pow(t103528,2.0/3.0))*(t103531-omega*t103532))*(4.0/3.0)-1.0)*(cx0+(cx2*t103520*t103533*t103527)/ \
               (gamma_aa[index]*gx*t103525*2.0+t103520*t103533*t103527+1.0)+(cx1*gamma_aa[index]*gx*t103525)/(gamma_aa[index]* \
               gx*t103525+1.0)+(cx4*t103522*t103524*t103534)/(gamma_aa[index]*gx*t103525*4.0+t103520*t103533*t103527* \
               6.0+t103522*t103524*t103534+gamma_aa[index]*gx*t103520*t103533*t103526*4.0+1.0)+(cx3*gamma_aa[index]* \
               gx*t103520*t103533*t103526)/(gamma_aa[index]*gx*t103525*3.0+t103520*t103533*t103527*3.0+gamma_aa[index]* \
               gx*t103520*t103533*t103526+1.0));
        } else if (rho_b[index] > cutoff_) {
            double t102741 = 1.0/pow(rho_b[index],1.0/3.0);
            double t102742 = c*t102741;
            double t102743 = sqrt(t102742);
            double t102744 = pow(t102742,3.0/2.0);
            double t102745 = c*c;
            double t102746 = 1.0/pow(rho_b[index],2.0/3.0);
            double t102747 = 1.0/c0p;
            double t102748 = b1p*t102743;
            double t102749 = b3p*t102744;
            double t102750 = b4p*t102745*t102746;
            double t102751 = b2p*c*t102741;
            double t102752 = t102750+t102751+t102748+t102749;
            double t102753 = 1.0/t102752;
            double t102754 = t102753*t102747*(1.0/2.0);
            double t102755 = t102754+1.0;
            double t102756 = log(t102755);
            double t102757 = a1p*c*t102741;
            double t102758 = t102757+1.0;
            double t102759 = gamma_bb[index]*gamma_bb[index];
            double t102760 = gcaa*gcaa;
            double t102761 = t102759*t102759;
            double t102762 = t102760*t102760;
            double t102763 = 1.0/pow(rho_b[index],3.2E1/3.0);
            double t102764 = 1.0/pow(rho_b[index],8.0/3.0);
            double t102765 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
               rho_b[index]*rho_b[index]);
            double t102766 = 1.0/pow(rho_b[index],1.6E1/3.0);
            double t102767 = rho_b[index]*(8.334140006820045E15/1.40737488355328E14);
            double t102768 = omega*omega;
            double t102769 = 1.0/rho_b[index];
            double t102770 = omega*t102768*t102769*(7.0368744177664E13/8.334140006820045E15);
            double t102771 = 1.0/pow(t102767,1.0/3.0);
            double t102772 = gx*gx;
            double t102773 = t102772*t102772;
            functional_[index] = -rho_b[index]*(((pow(2.0,1.0/3.0)*2.0-2.0)*(c0f*log((1.0/2.0)/(c0f*(b1f*t102743+ \
               b3f*t102744+b2f*c*t102741+b4f*t102745*t102746))+1.0)*(a1f*c*t102741+1.0)*2.0-c0p*t102756*t102758*2.0) \
               )/(two_13*2.0-2.0)+c0p*t102756*t102758*2.0)*(ccaa0+(ccaa2*t102760*t102766*t102759)/(gamma_bb[index]* \
               gcaa*t102764*2.0+t102760*t102766*t102759+1.0)+(ccaa1*gamma_bb[index]*gcaa*t102764)/(gamma_bb[index]* \
               gcaa*t102764+1.0)+(ccaa4*t102761*t102762*t102763)/(gamma_bb[index]*gcaa*t102764*4.0+t102761*t102762* \
               t102763+t102760*t102766*t102759*6.0+gamma_bb[index]*gcaa*t102760*t102765*t102759*4.0+1.0)+(ccaa3*gamma_bb[index]* \
               gcaa*t102760*t102765*t102759)/(gamma_bb[index]*gcaa*t102764*3.0+t102760*t102766*t102759*3.0+gamma_bb[index]* \
               gcaa*t102760*t102765*t102759+1.0))-c0*pow(rho_b[index],4.0/3.0)*(omega*t102771*(t102770+erf(pow(t102767,1.0/ \
               3.0)/omega)*(3.991211251234741E15/2.251799813685248E15)-omega*t102771*(3.0/2.0)-exp(-1.0/(omega*omega) \
               *pow(t102767,2.0/3.0))*(t102770-omega*t102771))*(4.0/3.0)-1.0)*(cx0+(cx2*t102772*t102766*t102759)/ \
               (gamma_bb[index]*gx*t102764*2.0+t102772*t102766*t102759+1.0)+(cx1*gamma_bb[index]*gx*t102764)/(gamma_bb[index]* \
               gx*t102764+1.0)+(cx4*t102761*t102763*t102773)/(gamma_bb[index]*gx*t102764*4.0+t102761*t102763*t102773+ \
               t102772*t102766*t102759*6.0+gamma_bb[index]*gx*t102772*t102765*t102759*4.0+1.0)+(cx3*gamma_bb[index]* \
               gx*t102772*t102765*t102759)/(gamma_bb[index]*gx*t102764*3.0+t102772*t102766*t102759*3.0+gamma_bb[index]* \
               gx*t102772*t102765*t102759+1.0));
        } else {
            functional_[index] = 0.0;
        }

    }
    //First Partials
    for (int index = 0; index < ntrue && deriv_ >= 1; index++) {

        //V_rho_a
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t99118 = 1.0/pow(rho_a[index],1.0/3.0);
            double t99119 = c*t99118;
            double t99120 = sqrt(t99119);
            double t99121 = pow(t99119,3.0/2.0);
            double t99122 = c*c;
            double t99123 = 1.0/pow(rho_a[index],2.0/3.0);
            double t99124 = 1.0/c0p;
            double t99125 = b1p*t99120;
            double t99126 = b3p*t99121;
            double t99127 = b4p*t99122*t99123;
            double t99128 = b2p*c*t99118;
            double t99129 = t99125+t99126+t99127+t99128;
            double t99130 = 1.0/t99129;
            double t99131 = t99130*t99124*(1.0/2.0);
            double t99132 = t99131+1.0;
            double t99133 = log(t99132);
            double t99134 = a1p*c*t99118;
            double t99135 = t99134+1.0;
            double t99136 = gamma_aa[index]*gamma_aa[index];
            double t99137 = gcaa*gcaa;
            double t99138 = t99136*t99136;
            double t99139 = t99137*t99137;
            double t99140 = 1.0/pow(rho_a[index],3.2E1/3.0);
            double t99141 = 1.0/pow(rho_a[index],8.0/3.0);
            double t99142 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]);
            double t99143 = 1.0/pow(rho_a[index],1.6E1/3.0);
            double t99144 = pow(2.0,1.0/3.0);
            double t99145 = t99144*2.0;
            double t99146 = t99145-2.0;
            double t99147 = two_13*2.0;
            double t99148 = t99147-2.0;
            double t99149 = 1.0/t99148;
            double t99150 = 1.0/c0f;
            double t99151 = b1f*t99120;
            double t99152 = b3f*t99121;
            double t99153 = b4f*t99122*t99123;
            double t99154 = b2f*c*t99118;
            double t99155 = t99151+t99152+t99153+t99154;
            double t99156 = 1.0/t99155;
            double t99157 = t99150*t99156*(1.0/2.0);
            double t99158 = t99157+1.0;
            double t99159 = log(t99158);
            double t99160 = a1f*c*t99118;
            double t99161 = t99160+1.0;
            double t99162 = c0f*t99161*t99159*2.0;
            double t99163 = c0p*t99133*t99135*2.0;
            double t99164 = 1.0/pow(rho_b[index],1.0/3.0);
            double t99165 = c*t99164;
            double t99166 = sqrt(t99165);
            double t99167 = pow(t99165,3.0/2.0);
            double t99168 = 1.0/pow(rho_b[index],2.0/3.0);
            double t99169 = b1p*t99166;
            double t99170 = b3p*t99167;
            double t99171 = b4p*t99122*t99168;
            double t99172 = b2p*c*t99164;
            double t99173 = t99170+t99171+t99172+t99169;
            double t99174 = 1.0/t99173;
            double t99175 = t99124*t99174*(1.0/2.0);
            double t99176 = t99175+1.0;
            double t99177 = log(t99176);
            double t99178 = a1p*c*t99164;
            double t99179 = t99178+1.0;
            double t99180 = c0p*t99177*t99179*2.0;
            double t99181 = rho_a[index]+rho_b[index];
            double t99182 = 1.0/pow(t99181,1.0/3.0);
            double t99183 = c*t99182;
            double t99184 = sqrt(t99183);
            double t99185 = pow(t99183,3.0/2.0);
            double t99186 = 1.0/pow(t99181,2.0/3.0);
            double t99187 = b1p*t99184;
            double t99188 = b3p*t99185;
            double t99189 = b4p*t99122*t99186;
            double t99190 = b2p*c*t99182;
            double t99191 = t99190+t99187+t99188+t99189;
            double t99192 = 1.0/t99191;
            double t99193 = t99124*t99192*(1.0/2.0);
            double t99194 = t99193+1.0;
            double t99195 = log(t99194);
            double t99196 = a1p*c*t99182;
            double t99197 = t99196+1.0;
            double t99198 = c0p*t99195*t99197*2.0;
            double t99199 = rho_a[index]-rho_b[index];
            double t99200 = t99199*t99199;
            double t99201 = 1.0/t99181;
            double t99202 = t99201*t99199;
            double t99203 = 1.0/(t99181*t99181*t99181*t99181);
            double t99204 = t99200*t99200;
            double t99205 = t99202+1.0;
            double t99206 = pow(t99205,4.0/3.0);
            double t99207 = -t99202+1.0;
            double t99208 = pow(t99207,4.0/3.0);
            double t99209 = t99206+t99208-2.0;
            double t99210 = gcab*gcab;
            double t99214 = gamma_aa[index]*t99141*(1.0/2.0);
            double t99215 = 1.0/pow(rho_b[index],8.0/3.0);
            double t99216 = gamma_bb[index]*t99215*(1.0/2.0);
            double t99211 = t99214+t99216;
            double t99212 = t99211*t99211;
            double t99213 = 1.0/pow(rho_a[index],1.1E1/3.0);
            double t99217 = t99210*t99210;
            double t99218 = t99212*t99212;
            double t99219 = t99210*t99212*6.0;
            double t99220 = gcab*t99210*t99211*t99212*4.0;
            double t99221 = t99217*t99218;
            double t99222 = gcab*t99211*4.0;
            double t99223 = t99220+t99221+t99222+t99219+1.0;
            double t99224 = gcab*t99211;
            double t99225 = t99224+1.0;
            double t99226 = t99210*t99212;
            double t99227 = gcab*t99211*2.0;
            double t99228 = t99226+t99227+1.0;
            double t99229 = t99210*t99212*3.0;
            double t99230 = gcab*t99210*t99211*t99212;
            double t99231 = gcab*t99211*3.0;
            double t99232 = t99230+t99231+t99229+1.0;
            double t99233 = 1.0/t99228;
            double t99234 = 1.0/t99232;
            double t99235 = 1.0/t99225;
            double t99236 = 1.0/t99223;
            double t99237 = 1.0/pow(t99181,4.0/3.0);
            double t99238 = b1f*t99184;
            double t99239 = b3f*t99185;
            double t99240 = b4f*t99122*t99186;
            double t99241 = b2f*c*t99182;
            double t99242 = t99240+t99241+t99238+t99239;
            double t99243 = 1.0/t99242;
            double t99244 = t99150*t99243*(1.0/2.0);
            double t99245 = t99244+1.0;
            double t99246 = log(t99245);
            double t99247 = a1f*c*t99182;
            double t99248 = t99247+1.0;
            double t99250 = c0f*t99246*t99248*2.0;
            double t99249 = -t99250+t99198;
            double t99251 = 1.0/(t99181*t99181);
            double t99279 = t99251*t99199;
            double t99252 = t99201-t99279;
            double t99253 = t99250-t99198;
            double t99254 = 1.0/pow(t99181,5.0/3.0);
            double t99255 = 1.0/sqrt(t99183);
            double t99256 = 1.0/t99194;
            double t99257 = 1.0/(t99191*t99191);
            double t99258 = b4p*t99122*t99254*(2.0/3.0);
            double t99259 = b2p*c*t99237*(1.0/3.0);
            double t99260 = b1p*c*t99237*t99255*(1.0/6.0);
            double t99261 = b3p*c*t99237*t99184*(1.0/2.0);
            double t99262 = t99260+t99261+t99258+t99259;
            double t99263 = t99262*t99256*t99257*t99197;
            double t99264 = 1.0/d2fz0;
            double t99265 = 1.0/Aa;
            double t99266 = b1a*t99184;
            double t99267 = b3a*t99185;
            double t99268 = b4a*t99122*t99186;
            double t99269 = b2a*c*t99182;
            double t99270 = t99266+t99267+t99268+t99269;
            double t99271 = 1.0/t99270;
            double t99272 = t99271*t99265*(1.0/2.0);
            double t99273 = t99272+1.0;
            double t99274 = log(t99273);
            double t99275 = a1a*c*t99182;
            double t99276 = t99275+1.0;
            double t99277 = 1.0/(t99181*t99181*t99181*t99181*t99181);
            double t99278 = pow(t99205,1.0/3.0);
            double t99280 = t99252*t99278*(4.0/3.0);
            double t99281 = pow(t99207,1.0/3.0);
            double t99282 = t99280-t99252*t99281*(4.0/3.0);
            double t99283 = t99203*t99204;
            double t99284 = t99283-1.0;
            double t99285 = 1.0/pow(rho_a[index],4.0/3.0);
            double t99286 = 1.0/pow(rho_a[index],5.0/3.0);
            double t99287 = 1.0/sqrt(t99119);
            double t99288 = 1.0/t99132;
            double t99289 = 1.0/(t99129*t99129);
            double t99290 = b4p*t99122*t99286*(2.0/3.0);
            double t99291 = b2p*c*t99285*(1.0/3.0);
            double t99292 = b1p*c*t99285*t99287*(1.0/6.0);
            double t99293 = b3p*c*t99120*t99285*(1.0/2.0);
            double t99294 = t99290+t99291+t99292+t99293;
            double t99295 = t99135*t99294*t99288*t99289;
            double t99296 = t99162-t99163;
            double t99297 = t99146*t99149*t99296;
            double t99298 = Aa*t99209*t99264*t99274*t99149*t99284*t99276*2.0;
            double t99299 = t99163+t99297;
            double t99300 = gamma_aa[index]*gcaa*t99141*4.0;
            double t99301 = gamma_aa[index]*gcaa*t99142*t99136*t99137*4.0;
            double t99302 = t99143*t99136*t99137*6.0;
            double t99303 = t99140*t99138*t99139;
            double t99304 = t99300+t99301+t99302+t99303+1.0;
            double t99305 = 1.0/t99304;
            double t99306 = gamma_aa[index]*gcaa*t99141;
            double t99307 = t99306+1.0;
            double t99308 = 1.0/t99307;
            double t99309 = gamma_aa[index]*gcaa*t99141*3.0;
            double t99310 = gamma_aa[index]*gcaa*t99142*t99136*t99137;
            double t99311 = t99143*t99136*t99137*3.0;
            double t99312 = t99310+t99311+t99309+1.0;
            double t99313 = 1.0/t99312;
            double t99314 = gamma_aa[index]*gcaa*t99141*2.0;
            double t99315 = t99143*t99136*t99137;
            double t99316 = t99314+t99315+1.0;
            double t99317 = 1.0/t99316;
            double t99318 = 1.0/pow(rho_a[index],1.9E1/3.0);
            double t99319 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]*rho_a[index]);
            double t99320 = 1.0/pow(rho_a[index],3.5E1/3.0);
            double t99321 = 1.0/t99158;
            double t99322 = 1.0/(t99155*t99155);
            double t99323 = b4f*t99122*t99286*(2.0/3.0);
            double t99324 = b2f*c*t99285*(1.0/3.0);
            double t99325 = b1f*c*t99285*t99287*(1.0/6.0);
            double t99326 = b3f*c*t99120*t99285*(1.0/2.0);
            double t99327 = t99323+t99324+t99325+t99326;
            double t99328 = a1f*c*c0f*t99159*t99285*(2.0/3.0);
            double t99329 = a1p*c*c0p*t99133*t99285*(2.0/3.0);
            double t99330 = ccaa4*t99140*t99305*t99138*t99139;
            double t99331 = ccaa1*gamma_aa[index]*gcaa*t99141*t99308;
            double t99332 = ccaa3*gamma_aa[index]*gcaa*t99142*t99313*t99136*t99137;
            double t99333 = ccaa2*t99143*t99136*t99137*t99317;
            double t99334 = ccaa0+t99330+t99331+t99332+t99333;
            double t99335 = omega*omega;
            double t99336 = rho_a[index]*(8.334140006820045E15/1.40737488355328E14);
            double t99337 = 1.0/(rho_a[index]*rho_a[index]);
            double t99338 = 1.0/pow(t99336,4.0/3.0);
            double t99339 = 1.0/(omega*omega);
            double t99340 = pow(t99336,2.0/3.0);
            double t99342 = t99340*t99339;
            double t99341 = exp(-t99342);
            double t99343 = 1.0/pow(t99336,1.0/3.0);
            double t99344 = 1.0/omega;
            double t99345 = 1.0/rho_a[index];
            double t99346 = omega*t99335*t99345*(7.0368744177664E13/8.334140006820045E15);
            double t99347 = omega*t99343;
            double t99348 = gx*gx;
            double t99349 = t99348*t99348;
            double t99350 = pow(t99336,1.0/3.0);
            double t99351 = t99350*t99344;
            double t99352 = erf(t99351);
            double t99353 = t99352*(3.991211251234741E15/2.251799813685248E15);
            double t99354 = t99346-t99347;
            double t99380 = t99341*t99354;
            double t99381 = omega*t99343*(3.0/2.0);
            double t99355 = t99353-t99380-t99381+t99346;
            double t99356 = gamma_aa[index]*gx*t99141*4.0;
            double t99357 = gamma_aa[index]*gx*t99142*t99136*t99348*4.0;
            double t99358 = t99143*t99136*t99348*6.0;
            double t99359 = t99140*t99138*t99349;
            double t99360 = t99356+t99357+t99358+t99359+1.0;
            double t99361 = 1.0/t99360;
            double t99362 = cx4*t99140*t99361*t99138*t99349;
            double t99363 = gamma_aa[index]*gx*t99141;
            double t99364 = t99363+1.0;
            double t99365 = 1.0/t99364;
            double t99366 = cx1*gamma_aa[index]*gx*t99141*t99365;
            double t99367 = gamma_aa[index]*gx*t99141*3.0;
            double t99368 = gamma_aa[index]*gx*t99142*t99136*t99348;
            double t99369 = t99143*t99136*t99348*3.0;
            double t99370 = t99367+t99368+t99369+1.0;
            double t99371 = 1.0/t99370;
            double t99372 = cx3*gamma_aa[index]*gx*t99142*t99136*t99371*t99348;
            double t99373 = gamma_aa[index]*gx*t99141*2.0;
            double t99374 = t99143*t99136*t99348;
            double t99375 = t99373+t99374+1.0;
            double t99376 = 1.0/t99375;
            double t99377 = cx2*t99143*t99136*t99348*t99376;
            double t99378 = cx0+t99362+t99372+t99366+t99377;
            double t99379 = pow(rho_a[index],4.0/3.0);
            double t99382 = omega*t99343*t99355*(4.0/3.0);
            double t99383 = t99382-1.0;
            v_rho_a_[index] = -(ccab0+ccab1*gcab*t99211*t99235+ccab2*t99210*t99212*t99233+ccab4*t99217*t99218* \
               t99236+ccab3*gcab*t99210*t99211*t99212*t99234)*(-t99163+t99198-t99297+t99298+rho_a[index]*(t99329- \
               t99295+t99146*t99149*(t99328+t99295-t99321*t99322*t99161*t99327-a1p*c*c0p*t99133*t99285*(2.0/3.0)) \
               )-t99181*(-t99263+t99203*t99204*t99209*t99149*(t99263-(1.0/(t99242*t99242)*t99248*(b2f*c*t99237*(1.0/ \
               3.0)+b4f*t99122*t99254*(2.0/3.0)+b1f*c*t99237*t99255*(1.0/6.0)+b3f*c*t99237*t99184*(1.0/2.0)))/t99245+ \
               a1f*c*c0f*t99237*t99246*(2.0/3.0)-a1p*c*c0p*t99237*t99195*(2.0/3.0))+a1p*c*c0p*t99237*t99195*(2.0/ \
               3.0)-t99203*t99204*t99253*t99282*t99149+t99204*t99253*t99209*t99149*t99277*4.0+t99200*t99203*t99209* \
               t99149*t99249*t99199*4.0+Aa*t99209*t99264*t99274*t99149*t99276*(t99204*t99277*4.0-t99200*t99203*t99199* \
               4.0)*2.0-Aa*t99264*t99282*t99274*t99149*t99284*t99276*2.0-(1.0/(t99270*t99270)*t99209*t99264*t99149* \
               t99284*t99276*(b2a*c*t99237*(1.0/3.0)+b4a*t99122*t99254*(2.0/3.0)+b1a*c*t99237*t99255*(1.0/6.0)+b3a* \
               c*t99237*t99184*(1.0/2.0)))/t99273+Aa*a1a*c*t99209*t99237*t99264*t99274*t99149*t99284*(2.0/3.0))+t99203* \
               t99204*t99253*t99209*t99149)-t99334*(t99163+t99146*t99149*(t99162-c0p*t99133*t99135*2.0))-(rho_a[index]* \
               t99299+rho_b[index]*(t99180-t99146*t99149*(t99180-c0f*log((t99150*(1.0/2.0))/(b1f*t99166+b3f*t99167+ \
               b2f*c*t99164+b4f*t99122*t99168)+1.0)*(a1f*c*t99164+1.0)*2.0))-t99181*(t99198+t99298-t99203*t99204* \
               t99209*t99149*t99249))*(ccab1*gamma_aa[index]*gcab*t99213*t99235*(4.0/3.0)-ccab2*t99210*t99212*1.0/ \
               (t99228*t99228)*(gamma_aa[index]*gcab*t99213*(8.0/3.0)+gamma_aa[index]*t99210*t99211*t99213*(8.0/3.0) \
               )-ccab4*1.0/(t99223*t99223)*t99217*t99218*(gamma_aa[index]*gcab*t99213*(1.6E1/3.0)+gamma_aa[index]* \
               t99210*t99211*t99213*1.6E1+gamma_aa[index]*gcab*t99210*t99212*t99213*1.6E1+gamma_aa[index]*t99211* \
               t99212*t99213*t99217*(1.6E1/3.0))-ccab1*gamma_aa[index]*t99210*t99211*t99213*1.0/(t99225*t99225)*(4.0/ \
               3.0)+ccab2*gamma_aa[index]*t99210*t99211*t99213*t99233*(8.0/3.0)-ccab3*gcab*t99210*t99211*t99212*1.0/ \
               (t99232*t99232)*(gamma_aa[index]*gcab*t99213*4.0+gamma_aa[index]*t99210*t99211*t99213*8.0+gamma_aa[index]* \
               gcab*t99210*t99212*t99213*4.0)+ccab3*gamma_aa[index]*gcab*t99210*t99212*t99213*t99234*4.0+ccab4*gamma_aa[index]* \
               t99211*t99212*t99213*t99217*t99236*(1.6E1/3.0))+rho_a[index]*t99299*(ccaa1*gamma_aa[index]*gcaa*t99213* \
               t99308*(8.0/3.0)+ccaa4*t99320*t99305*t99138*t99139*(3.2E1/3.0)+ccaa2*t99136*t99137*t99317*t99318*(1.6E1/ \
               3.0)-ccaa1*t99136*1.0/(t99307*t99307)*t99137*t99318*(8.0/3.0)-ccaa2*t99143*t99136*1.0/(t99316*t99316) \
               *t99137*(gamma_aa[index]*gcaa*t99213*(1.6E1/3.0)+t99136*t99137*t99318*(1.6E1/3.0))-ccaa4*t99140*1.0/ \
               (t99304*t99304)*t99138*t99139*(gamma_aa[index]*gcaa*t99213*(3.2E1/3.0)+t99320*t99138*t99139*(3.2E1/ \
               3.0)+t99136*t99137*t99318*3.2E1+gamma_aa[index]*gcaa*t99136*t99137*t99319*3.2E1)+ccaa3*gamma_aa[index]* \
               gcaa*t99313*t99136*t99137*t99319*8.0-ccaa3*gamma_aa[index]*gcaa*1.0/(t99312*t99312)*t99142*t99136* \
               t99137*(gamma_aa[index]*gcaa*t99213*8.0+t99136*t99137*t99318*1.6E1+gamma_aa[index]*gcaa*t99136*t99137* \
               t99319*8.0))+rho_a[index]*t99334*(t99329-t99295+t99146*t99149*(t99328-t99329+t99295-t99321*t99322* \
               t99161*t99327))-c0*pow(rho_a[index],1.0/3.0)*t99383*t99378*(4.0/3.0)+c0*t99378*t99379*(omega*t99343* \
               (omega*t99338*(-8.334140006820045E15/2.81474976710656E14)+t99341*(omega*t99338*(2.778046668940015E15/ \
               1.40737488355328E14)-omega*t99335*t99337*(7.0368744177664E13/8.334140006820045E15))+omega*t99335*t99337* \
               (7.0368744177664E13/8.334140006820045E15)+t99341*t99343*t99339*(t99347-omega*t99335*t99345*(7.0368744177664E13/ \
               8.334140006820045E15))*(2.778046668940015E15/7.0368744177664E13)-1.0/sqrt(3.141592653589793)*t99341* \
               t99344*1.0/pow(t99336,2.0/3.0)*(1.108777112152858E31/1.584563250285287E29))*(4.0/3.0)+omega*t99355* \
               t99338*(2.778046668940015E15/1.05553116266496E14))+c0*t99383*t99379*(cx1*gamma_aa[index]*gx*t99213* \
               t99365*(8.0/3.0)+cx2*t99136*t99318*t99348*t99376*(1.6E1/3.0)+cx4*t99320*t99361*t99138*t99349*(3.2E1/ \
               3.0)-cx1*t99136*t99318*1.0/(t99364*t99364)*t99348*(8.0/3.0)-cx2*t99143*t99136*t99348*1.0/(t99375*t99375) \
               *(gamma_aa[index]*gx*t99213*(1.6E1/3.0)+t99136*t99318*t99348*(1.6E1/3.0))-cx4*t99140*1.0/(t99360*t99360) \
               *t99138*t99349*(gamma_aa[index]*gx*t99213*(3.2E1/3.0)+t99320*t99138*t99349*(3.2E1/3.0)+t99136*t99318* \
               t99348*3.2E1+gamma_aa[index]*gx*t99136*t99319*t99348*3.2E1)+cx3*gamma_aa[index]*gx*t99136*t99371*t99319* \
               t99348*8.0-cx3*gamma_aa[index]*gx*t99142*t99136*1.0/(t99370*t99370)*t99348*(gamma_aa[index]*gx*t99213* \
               8.0+t99136*t99318*t99348*1.6E1+gamma_aa[index]*gx*t99136*t99319*t99348*8.0));
        } else if (rho_a[index] > cutoff_) {
            double t103536 = 1.0/pow(rho_a[index],1.0/3.0);
            double t103537 = c*t103536;
            double t103538 = sqrt(t103537);
            double t103539 = pow(t103537,3.0/2.0);
            double t103540 = c*c;
            double t103541 = 1.0/pow(rho_a[index],2.0/3.0);
            double t103542 = 1.0/c0p;
            double t103543 = b1p*t103538;
            double t103544 = b3p*t103539;
            double t103545 = b4p*t103540*t103541;
            double t103546 = b2p*c*t103536;
            double t103547 = t103543+t103544+t103545+t103546;
            double t103548 = 1.0/t103547;
            double t103549 = t103542*t103548*(1.0/2.0);
            double t103550 = t103549+1.0;
            double t103551 = log(t103550);
            double t103552 = a1p*c*t103536;
            double t103553 = t103552+1.0;
            double t103554 = gamma_aa[index]*gamma_aa[index];
            double t103555 = gcaa*gcaa;
            double t103556 = t103554*t103554;
            double t103557 = t103555*t103555;
            double t103558 = 1.0/pow(rho_a[index],3.2E1/3.0);
            double t103559 = 1.0/pow(rho_a[index],8.0/3.0);
            double t103560 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]);
            double t103561 = 1.0/pow(rho_a[index],1.6E1/3.0);
            double t103562 = pow(2.0,1.0/3.0);
            double t103563 = t103562*2.0;
            double t103564 = t103563-2.0;
            double t103565 = two_13*2.0;
            double t103566 = t103565-2.0;
            double t103567 = 1.0/t103566;
            double t103568 = 1.0/c0f;
            double t103569 = b1f*t103538;
            double t103570 = b3f*t103539;
            double t103571 = b4f*t103540*t103541;
            double t103572 = b2f*c*t103536;
            double t103573 = t103570+t103571+t103572+t103569;
            double t103574 = 1.0/t103573;
            double t103575 = t103574*t103568*(1.0/2.0);
            double t103576 = t103575+1.0;
            double t103577 = log(t103576);
            double t103578 = a1f*c*t103536;
            double t103579 = t103578+1.0;
            double t103580 = c0f*t103577*t103579*2.0;
            double t103581 = c0p*t103551*t103553*2.0;
            double t103582 = gamma_aa[index]*gcaa*t103559*4.0;
            double t103583 = gamma_aa[index]*gcaa*t103560*t103554*t103555*4.0;
            double t103584 = t103561*t103554*t103555*6.0;
            double t103585 = t103556*t103557*t103558;
            double t103586 = t103582+t103583+t103584+t103585+1.0;
            double t103587 = 1.0/t103586;
            double t103588 = gamma_aa[index]*gcaa*t103559;
            double t103589 = t103588+1.0;
            double t103590 = 1.0/t103589;
            double t103591 = gamma_aa[index]*gcaa*t103559*3.0;
            double t103592 = gamma_aa[index]*gcaa*t103560*t103554*t103555;
            double t103593 = t103561*t103554*t103555*3.0;
            double t103594 = t103591+t103592+t103593+1.0;
            double t103595 = 1.0/t103594;
            double t103596 = gamma_aa[index]*gcaa*t103559*2.0;
            double t103597 = t103561*t103554*t103555;
            double t103598 = t103596+t103597+1.0;
            double t103599 = 1.0/t103598;
            double t103600 = 1.0/pow(rho_a[index],1.9E1/3.0);
            double t103601 = 1.0/pow(rho_a[index],1.1E1/3.0);
            double t103602 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]*rho_a[index]);
            double t103603 = 1.0/pow(rho_a[index],3.5E1/3.0);
            double t103604 = 1.0/pow(rho_a[index],4.0/3.0);
            double t103605 = 1.0/pow(rho_a[index],5.0/3.0);
            double t103606 = 1.0/sqrt(t103537);
            double t103607 = 1.0/t103550;
            double t103608 = 1.0/(t103547*t103547);
            double t103609 = b4p*t103540*t103605*(2.0/3.0);
            double t103610 = b2p*c*t103604*(1.0/3.0);
            double t103611 = b1p*c*t103604*t103606*(1.0/6.0);
            double t103612 = b3p*c*t103604*t103538*(1.0/2.0);
            double t103613 = t103610+t103611+t103612+t103609;
            double t103614 = t103613*t103553*t103607*t103608;
            double t103615 = ccaa4*t103556*t103557*t103558*t103587;
            double t103616 = ccaa1*gamma_aa[index]*gcaa*t103590*t103559;
            double t103617 = ccaa3*gamma_aa[index]*gcaa*t103560*t103554*t103555*t103595;
            double t103618 = ccaa2*t103561*t103554*t103555*t103599;
            double t103619 = ccaa0+t103615+t103616+t103617+t103618;
            double t103620 = omega*omega;
            double t103621 = rho_a[index]*(8.334140006820045E15/1.40737488355328E14);
            double t103622 = 1.0/(rho_a[index]*rho_a[index]);
            double t103623 = 1.0/pow(t103621,4.0/3.0);
            double t103624 = 1.0/(omega*omega);
            double t103625 = pow(t103621,2.0/3.0);
            double t103627 = t103624*t103625;
            double t103626 = exp(-t103627);
            double t103628 = 1.0/pow(t103621,1.0/3.0);
            double t103629 = 1.0/omega;
            double t103630 = 1.0/rho_a[index];
            double t103631 = omega*t103620*t103630*(7.0368744177664E13/8.334140006820045E15);
            double t103632 = omega*t103628;
            double t103633 = gx*gx;
            double t103634 = t103633*t103633;
            double t103635 = pow(t103621,1.0/3.0);
            double t103636 = t103635*t103629;
            double t103637 = erf(t103636);
            double t103638 = t103637*(3.991211251234741E15/2.251799813685248E15);
            double t103639 = t103631-t103632;
            double t103665 = t103626*t103639;
            double t103666 = omega*t103628*(3.0/2.0);
            double t103640 = t103631+t103638-t103665-t103666;
            double t103641 = gamma_aa[index]*gx*t103559*4.0;
            double t103642 = gamma_aa[index]*gx*t103560*t103633*t103554*4.0;
            double t103643 = t103561*t103633*t103554*6.0;
            double t103644 = t103634*t103556*t103558;
            double t103645 = t103641+t103642+t103643+t103644+1.0;
            double t103646 = 1.0/t103645;
            double t103647 = cx4*t103634*t103556*t103646*t103558;
            double t103648 = gamma_aa[index]*gx*t103559;
            double t103649 = t103648+1.0;
            double t103650 = 1.0/t103649;
            double t103651 = cx1*gamma_aa[index]*gx*t103650*t103559;
            double t103652 = gamma_aa[index]*gx*t103559*3.0;
            double t103653 = gamma_aa[index]*gx*t103560*t103633*t103554;
            double t103654 = t103561*t103633*t103554*3.0;
            double t103655 = t103652+t103653+t103654+1.0;
            double t103656 = 1.0/t103655;
            double t103657 = cx3*gamma_aa[index]*gx*t103560*t103633*t103554*t103656;
            double t103658 = gamma_aa[index]*gx*t103559*2.0;
            double t103659 = t103561*t103633*t103554;
            double t103660 = t103658+t103659+1.0;
            double t103661 = 1.0/t103660;
            double t103662 = cx2*t103561*t103633*t103661*t103554;
            double t103663 = cx0+t103651+t103662+t103647+t103657;
            double t103664 = pow(rho_a[index],4.0/3.0);
            double t103667 = omega*t103640*t103628*(4.0/3.0);
            double t103668 = t103667-1.0;
            v_rho_a_[index] = -t103619*(t103581+t103564*t103567*(t103580-c0p*t103551*t103553*2.0))+rho_a[index]* \
               t103619*(-t103614+t103564*t103567*(t103614-(1.0/(t103573*t103573)*t103579*(b2f*c*t103604*(1.0/3.0) \
               +b4f*t103540*t103605*(2.0/3.0)+b1f*c*t103604*t103606*(1.0/6.0)+b3f*c*t103604*t103538*(1.0/2.0)))/t103576+ \
               a1f*c*c0f*t103604*t103577*(2.0/3.0)-a1p*c*c0p*t103604*t103551*(2.0/3.0))+a1p*c*c0p*t103604*t103551* \
               (2.0/3.0))+rho_a[index]*(t103581+t103564*t103567*(t103580-t103581))*(ccaa1*gamma_aa[index]*gcaa*t103601* \
               t103590*(8.0/3.0)+ccaa2*t103600*t103554*t103555*t103599*(1.6E1/3.0)+ccaa4*t103603*t103556*t103557* \
               t103587*(3.2E1/3.0)-ccaa1*t103600*t103554*t103555*1.0/(t103589*t103589)*(8.0/3.0)-ccaa2*t103561*t103554* \
               t103555*1.0/(t103598*t103598)*(gamma_aa[index]*gcaa*t103601*(1.6E1/3.0)+t103600*t103554*t103555*(1.6E1/ \
               3.0))-ccaa4*t103556*t103557*t103558*1.0/(t103586*t103586)*(gamma_aa[index]*gcaa*t103601*(3.2E1/3.0) \
               +t103600*t103554*t103555*3.2E1+t103603*t103556*t103557*(3.2E1/3.0)+gamma_aa[index]*gcaa*t103602*t103554* \
               t103555*3.2E1)+ccaa3*gamma_aa[index]*gcaa*t103602*t103554*t103555*t103595*8.0-ccaa3*gamma_aa[index]* \
               gcaa*t103560*t103554*t103555*1.0/(t103594*t103594)*(gamma_aa[index]*gcaa*t103601*8.0+t103600*t103554* \
               t103555*1.6E1+gamma_aa[index]*gcaa*t103602*t103554*t103555*8.0))-c0*pow(rho_a[index],1.0/3.0)*t103663* \
               t103668*(4.0/3.0)+c0*t103663*t103664*(omega*t103628*(omega*t103623*(-8.334140006820045E15/2.81474976710656E14) \
               +t103626*(omega*t103623*(2.778046668940015E15/1.40737488355328E14)-omega*t103620*t103622*(7.0368744177664E13/ \
               8.334140006820045E15))+omega*t103620*t103622*(7.0368744177664E13/8.334140006820045E15)+t103624*t103626* \
               t103628*(t103632-omega*t103620*t103630*(7.0368744177664E13/8.334140006820045E15))*(2.778046668940015E15/ \
               7.0368744177664E13)-1.0/sqrt(3.141592653589793)*1.0/pow(t103621,2.0/3.0)*t103626*t103629*(1.108777112152858E31/ \
               1.584563250285287E29))*(4.0/3.0)+omega*t103640*t103623*(2.778046668940015E15/1.05553116266496E14)) \
               +c0*t103664*t103668*(cx1*gamma_aa[index]*gx*t103601*t103650*(8.0/3.0)+cx2*t103600*t103633*t103661* \
               t103554*(1.6E1/3.0)+cx4*t103603*t103634*t103556*t103646*(3.2E1/3.0)-cx1*t103600*t103633*t103554*1.0/ \
               (t103649*t103649)*(8.0/3.0)-cx2*t103561*t103633*1.0/(t103660*t103660)*t103554*(gamma_aa[index]*gx* \
               t103601*(1.6E1/3.0)+t103600*t103633*t103554*(1.6E1/3.0))-cx4*t103634*1.0/(t103645*t103645)*t103556* \
               t103558*(gamma_aa[index]*gx*t103601*(3.2E1/3.0)+t103600*t103633*t103554*3.2E1+t103603*t103634*t103556* \
               (3.2E1/3.0)+gamma_aa[index]*gx*t103602*t103633*t103554*3.2E1)+cx3*gamma_aa[index]*gx*t103602*t103633* \
               t103554*t103656*8.0-cx3*gamma_aa[index]*gx*t103560*t103633*t103554*1.0/(t103655*t103655)*(gamma_aa[index]* \
               gx*t103601*8.0+t103600*t103633*t103554*1.6E1+gamma_aa[index]*gx*t103602*t103633*t103554*8.0));
        } else if (rho_b[index] > cutoff_) {
            v_rho_a_[index] = 0.0;
        } else {
            v_rho_a_[index] = 0.0;
        }

        //V_rho_b
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t99385 = 1.0/pow(rho_b[index],1.0/3.0);
            double t99386 = c*t99385;
            double t99387 = sqrt(t99386);
            double t99388 = pow(t99386,3.0/2.0);
            double t99389 = c*c;
            double t99390 = 1.0/pow(rho_b[index],2.0/3.0);
            double t99391 = 1.0/c0p;
            double t99392 = b1p*t99387;
            double t99393 = b3p*t99388;
            double t99394 = b4p*t99390*t99389;
            double t99395 = b2p*c*t99385;
            double t99396 = t99392+t99393+t99394+t99395;
            double t99397 = 1.0/t99396;
            double t99398 = t99391*t99397*(1.0/2.0);
            double t99399 = t99398+1.0;
            double t99400 = log(t99399);
            double t99401 = a1p*c*t99385;
            double t99402 = t99401+1.0;
            double t99403 = gamma_bb[index]*gamma_bb[index];
            double t99404 = gcaa*gcaa;
            double t99405 = t99403*t99403;
            double t99406 = t99404*t99404;
            double t99407 = 1.0/pow(rho_b[index],3.2E1/3.0);
            double t99408 = 1.0/pow(rho_b[index],8.0/3.0);
            double t99409 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
               rho_b[index]*rho_b[index]);
            double t99410 = 1.0/pow(rho_b[index],1.6E1/3.0);
            double t99411 = pow(2.0,1.0/3.0);
            double t99412 = t99411*2.0;
            double t99413 = t99412-2.0;
            double t99414 = two_13*2.0;
            double t99415 = t99414-2.0;
            double t99416 = 1.0/t99415;
            double t99417 = 1.0/c0f;
            double t99418 = 1.0/pow(rho_a[index],1.0/3.0);
            double t99419 = c*t99418;
            double t99420 = sqrt(t99419);
            double t99421 = pow(t99419,3.0/2.0);
            double t99422 = 1.0/pow(rho_a[index],2.0/3.0);
            double t99423 = b1p*t99420;
            double t99424 = b3p*t99421;
            double t99425 = b4p*t99422*t99389;
            double t99426 = b2p*c*t99418;
            double t99427 = t99423+t99424+t99425+t99426;
            double t99428 = 1.0/t99427;
            double t99429 = t99391*t99428*(1.0/2.0);
            double t99430 = t99429+1.0;
            double t99431 = log(t99430);
            double t99432 = a1p*c*t99418;
            double t99433 = t99432+1.0;
            double t99434 = c0p*t99431*t99433*2.0;
            double t99435 = b1f*t99387;
            double t99436 = b3f*t99388;
            double t99437 = b4f*t99390*t99389;
            double t99438 = b2f*c*t99385;
            double t99439 = t99435+t99436+t99437+t99438;
            double t99440 = 1.0/t99439;
            double t99441 = t99440*t99417*(1.0/2.0);
            double t99442 = t99441+1.0;
            double t99443 = log(t99442);
            double t99444 = a1f*c*t99385;
            double t99445 = t99444+1.0;
            double t99446 = c0f*t99443*t99445*2.0;
            double t99447 = c0p*t99400*t99402*2.0;
            double t99448 = rho_a[index]+rho_b[index];
            double t99449 = 1.0/pow(t99448,1.0/3.0);
            double t99450 = c*t99449;
            double t99451 = sqrt(t99450);
            double t99452 = pow(t99450,3.0/2.0);
            double t99453 = 1.0/pow(t99448,2.0/3.0);
            double t99454 = b1p*t99451;
            double t99455 = b3p*t99452;
            double t99456 = b4p*t99453*t99389;
            double t99457 = b2p*c*t99449;
            double t99458 = t99454+t99455+t99456+t99457;
            double t99459 = 1.0/t99458;
            double t99460 = t99391*t99459*(1.0/2.0);
            double t99461 = t99460+1.0;
            double t99462 = log(t99461);
            double t99463 = a1p*c*t99449;
            double t99464 = t99463+1.0;
            double t99465 = c0p*t99462*t99464*2.0;
            double t99466 = rho_a[index]-rho_b[index];
            double t99467 = t99466*t99466;
            double t99468 = 1.0/t99448;
            double t99469 = t99466*t99468;
            double t99470 = 1.0/(t99448*t99448*t99448*t99448);
            double t99471 = t99467*t99467;
            double t99472 = t99469+1.0;
            double t99473 = pow(t99472,4.0/3.0);
            double t99474 = -t99469+1.0;
            double t99475 = pow(t99474,4.0/3.0);
            double t99476 = t99473+t99475-2.0;
            double t99477 = gcab*gcab;
            double t99481 = 1.0/pow(rho_a[index],8.0/3.0);
            double t99482 = gamma_aa[index]*t99481*(1.0/2.0);
            double t99483 = gamma_bb[index]*t99408*(1.0/2.0);
            double t99478 = t99482+t99483;
            double t99479 = t99478*t99478;
            double t99480 = 1.0/pow(rho_b[index],1.1E1/3.0);
            double t99484 = t99477*t99477;
            double t99485 = t99479*t99479;
            double t99486 = t99477*t99479*6.0;
            double t99487 = gcab*t99477*t99478*t99479*4.0;
            double t99488 = t99484*t99485;
            double t99489 = gcab*t99478*4.0;
            double t99490 = t99486+t99487+t99488+t99489+1.0;
            double t99491 = gcab*t99478;
            double t99492 = t99491+1.0;
            double t99493 = t99477*t99479;
            double t99494 = gcab*t99478*2.0;
            double t99495 = t99493+t99494+1.0;
            double t99496 = t99477*t99479*3.0;
            double t99497 = gcab*t99477*t99478*t99479;
            double t99498 = gcab*t99478*3.0;
            double t99499 = t99496+t99497+t99498+1.0;
            double t99500 = 1.0/t99495;
            double t99501 = 1.0/t99499;
            double t99502 = 1.0/t99492;
            double t99503 = 1.0/t99490;
            double t99504 = 1.0/pow(t99448,4.0/3.0);
            double t99505 = b1f*t99451;
            double t99506 = b3f*t99452;
            double t99507 = b4f*t99453*t99389;
            double t99508 = b2f*c*t99449;
            double t99509 = t99505+t99506+t99507+t99508;
            double t99510 = 1.0/t99509;
            double t99511 = t99510*t99417*(1.0/2.0);
            double t99512 = t99511+1.0;
            double t99513 = log(t99512);
            double t99514 = a1f*c*t99449;
            double t99515 = t99514+1.0;
            double t99517 = c0f*t99513*t99515*2.0;
            double t99516 = -t99517+t99465;
            double t99518 = 1.0/(t99448*t99448);
            double t99519 = t99518*t99466;
            double t99520 = t99519+t99468;
            double t99521 = t99517-t99465;
            double t99522 = 1.0/pow(t99448,5.0/3.0);
            double t99523 = 1.0/sqrt(t99450);
            double t99524 = 1.0/t99461;
            double t99525 = 1.0/(t99458*t99458);
            double t99526 = b4p*t99522*t99389*(2.0/3.0);
            double t99527 = b2p*c*t99504*(1.0/3.0);
            double t99528 = b1p*c*t99504*t99523*(1.0/6.0);
            double t99529 = b3p*c*t99504*t99451*(1.0/2.0);
            double t99530 = t99526+t99527+t99528+t99529;
            double t99531 = 1.0/d2fz0;
            double t99532 = 1.0/Aa;
            double t99533 = b1a*t99451;
            double t99534 = b3a*t99452;
            double t99535 = b4a*t99453*t99389;
            double t99536 = b2a*c*t99449;
            double t99537 = t99533+t99534+t99535+t99536;
            double t99538 = 1.0/t99537;
            double t99539 = t99532*t99538*(1.0/2.0);
            double t99540 = t99539+1.0;
            double t99541 = log(t99540);
            double t99542 = a1a*c*t99449;
            double t99543 = t99542+1.0;
            double t99544 = 1.0/(t99448*t99448*t99448*t99448*t99448);
            double t99545 = pow(t99472,1.0/3.0);
            double t99546 = t99520*t99545*(4.0/3.0);
            double t99547 = pow(t99474,1.0/3.0);
            double t99548 = t99546-t99520*t99547*(4.0/3.0);
            double t99549 = t99470*t99471;
            double t99550 = t99549-1.0;
            double t99551 = 1.0/pow(rho_b[index],4.0/3.0);
            double t99552 = 1.0/pow(rho_b[index],5.0/3.0);
            double t99553 = 1.0/sqrt(t99386);
            double t99554 = 1.0/t99399;
            double t99555 = 1.0/(t99396*t99396);
            double t99556 = b4p*t99552*t99389*(2.0/3.0);
            double t99557 = b2p*c*t99551*(1.0/3.0);
            double t99558 = b1p*c*t99551*t99553*(1.0/6.0);
            double t99559 = b3p*c*t99551*t99387*(1.0/2.0);
            double t99560 = t99556+t99557+t99558+t99559;
            double t99561 = t99402*t99560*t99554*t99555;
            double t99562 = t99446-t99447;
            double t99563 = t99413*t99416*t99562;
            double t99564 = Aa*t99531*t99541*t99550*t99416*t99543*t99476*2.0;
            double t99565 = a1p*c*c0p*t99504*t99462*(2.0/3.0);
            double t99566 = t99563+t99447;
            double t99567 = gamma_bb[index]*gcaa*t99408*4.0;
            double t99568 = gamma_bb[index]*gcaa*t99403*t99404*t99409*4.0;
            double t99569 = t99410*t99403*t99404*6.0;
            double t99570 = t99405*t99406*t99407;
            double t99571 = t99570+t99567+t99568+t99569+1.0;
            double t99572 = 1.0/t99571;
            double t99573 = gamma_bb[index]*gcaa*t99408;
            double t99574 = t99573+1.0;
            double t99575 = 1.0/t99574;
            double t99576 = gamma_bb[index]*gcaa*t99408*3.0;
            double t99577 = gamma_bb[index]*gcaa*t99403*t99404*t99409;
            double t99578 = t99410*t99403*t99404*3.0;
            double t99579 = t99576+t99577+t99578+1.0;
            double t99580 = 1.0/t99579;
            double t99581 = gamma_bb[index]*gcaa*t99408*2.0;
            double t99582 = t99410*t99403*t99404;
            double t99583 = t99581+t99582+1.0;
            double t99584 = 1.0/t99583;
            double t99585 = 1.0/pow(rho_b[index],1.9E1/3.0);
            double t99586 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
               rho_b[index]*rho_b[index]*rho_b[index]);
            double t99587 = 1.0/pow(rho_b[index],3.5E1/3.0);
            double t99588 = 1.0/t99442;
            double t99589 = 1.0/(t99439*t99439);
            double t99590 = b4f*t99552*t99389*(2.0/3.0);
            double t99591 = b2f*c*t99551*(1.0/3.0);
            double t99592 = b1f*c*t99551*t99553*(1.0/6.0);
            double t99593 = b3f*c*t99551*t99387*(1.0/2.0);
            double t99594 = t99590+t99591+t99592+t99593;
            double t99595 = a1f*c*c0f*t99443*t99551*(2.0/3.0);
            double t99596 = a1p*c*c0p*t99400*t99551*(2.0/3.0);
            double t99597 = ccaa4*t99405*t99406*t99407*t99572;
            double t99598 = ccaa1*gamma_bb[index]*gcaa*t99408*t99575;
            double t99599 = ccaa3*gamma_bb[index]*gcaa*t99403*t99404*t99409*t99580;
            double t99600 = ccaa2*t99410*t99403*t99404*t99584;
            double t99601 = ccaa0+t99600+t99597+t99598+t99599;
            double t99602 = omega*omega;
            double t99603 = rho_b[index]*(8.334140006820045E15/1.40737488355328E14);
            double t99604 = 1.0/(rho_b[index]*rho_b[index]);
            double t99605 = 1.0/pow(t99603,4.0/3.0);
            double t99606 = 1.0/(omega*omega);
            double t99607 = pow(t99603,2.0/3.0);
            double t99609 = t99606*t99607;
            double t99608 = exp(-t99609);
            double t99610 = 1.0/pow(t99603,1.0/3.0);
            double t99611 = 1.0/omega;
            double t99612 = 1.0/rho_b[index];
            double t99613 = omega*t99602*t99612*(7.0368744177664E13/8.334140006820045E15);
            double t99614 = omega*t99610;
            double t99615 = gx*gx;
            double t99616 = t99615*t99615;
            double t99617 = pow(t99603,1.0/3.0);
            double t99618 = t99611*t99617;
            double t99619 = erf(t99618);
            double t99620 = t99619*(3.991211251234741E15/2.251799813685248E15);
            double t99621 = t99613-t99614;
            double t99647 = t99621*t99608;
            double t99648 = omega*t99610*(3.0/2.0);
            double t99622 = t99620+t99613-t99647-t99648;
            double t99623 = gamma_bb[index]*gx*t99408*4.0;
            double t99624 = gamma_bb[index]*gx*t99403*t99615*t99409*4.0;
            double t99625 = t99410*t99403*t99615*6.0;
            double t99626 = t99405*t99407*t99616;
            double t99627 = t99623+t99624+t99625+t99626+1.0;
            double t99628 = 1.0/t99627;
            double t99629 = cx4*t99405*t99407*t99616*t99628;
            double t99630 = gamma_bb[index]*gx*t99408;
            double t99631 = t99630+1.0;
            double t99632 = 1.0/t99631;
            double t99633 = cx1*gamma_bb[index]*gx*t99632*t99408;
            double t99634 = gamma_bb[index]*gx*t99408*3.0;
            double t99635 = gamma_bb[index]*gx*t99403*t99615*t99409;
            double t99636 = t99410*t99403*t99615*3.0;
            double t99637 = t99634+t99635+t99636+1.0;
            double t99638 = 1.0/t99637;
            double t99639 = cx3*gamma_bb[index]*gx*t99403*t99615*t99409*t99638;
            double t99640 = gamma_bb[index]*gx*t99408*2.0;
            double t99641 = t99410*t99403*t99615;
            double t99642 = t99640+t99641+1.0;
            double t99643 = 1.0/t99642;
            double t99644 = cx2*t99410*t99403*t99615*t99643;
            double t99645 = cx0+t99633+t99644+t99629+t99639;
            double t99646 = pow(rho_b[index],4.0/3.0);
            double t99649 = omega*t99610*t99622*(4.0/3.0);
            double t99650 = t99649-1.0;
            v_rho_b_[index] = -t99601*(t99447+t99413*t99416*(t99446-c0p*t99400*t99402*2.0))-(ccab0+ccab1*gcab* \
               t99502*t99478+ccab2*t99500*t99477*t99479+ccab4*t99503*t99484*t99485+ccab3*gcab*t99501*t99477*t99478* \
               t99479)*(-t99563-t99447+t99465+t99564+rho_b[index]*(-t99561+t99596+t99413*t99416*(t99561+t99595-t99445* \
               t99594*t99588*t99589-a1p*c*c0p*t99400*t99551*(2.0/3.0)))-t99448*(t99565-t99530*t99524*t99525*t99464+ \
               t99521*t99416*t99470*t99471*t99548+t99521*t99416*t99471*t99544*t99476*4.0-t99416*t99470*t99471*t99476* \
               (t99565-t99530*t99524*t99525*t99464+(t99515*1.0/(t99509*t99509)*(b2f*c*t99504*(1.0/3.0)+b4f*t99522* \
               t99389*(2.0/3.0)+b1f*c*t99504*t99523*(1.0/6.0)+b3f*c*t99504*t99451*(1.0/2.0)))/t99512-a1f*c*c0f*t99504* \
               t99513*(2.0/3.0))-t99416*t99470*t99516*t99466*t99467*t99476*4.0+Aa*t99531*t99541*t99416*t99543*t99476* \
               (t99471*t99544*4.0+t99470*t99466*t99467*4.0)*2.0+Aa*t99531*t99541*t99550*t99416*t99543*t99548*2.0- \
               (t99531*t99550*t99416*t99543*1.0/(t99537*t99537)*t99476*(b2a*c*t99504*(1.0/3.0)+b4a*t99522*t99389* \
               (2.0/3.0)+b1a*c*t99504*t99523*(1.0/6.0)+b3a*c*t99504*t99451*(1.0/2.0)))/t99540+Aa*a1a*c*t99504*t99531* \
               t99541*t99550*t99416*t99476*(2.0/3.0))+t99521*t99416*t99470*t99471*t99476)-(rho_b[index]*t99566+rho_a[index]* \
               (t99434-t99413*t99416*(t99434-c0f*log((t99417*(1.0/2.0))/(b1f*t99420+b3f*t99421+b2f*c*t99418+b4f*t99422* \
               t99389)+1.0)*(a1f*c*t99418+1.0)*2.0))-t99448*(t99465+t99564-t99416*t99470*t99471*t99516*t99476))*(ccab1* \
               gamma_bb[index]*gcab*t99502*t99480*(4.0/3.0)-ccab2*t99477*1.0/(t99495*t99495)*t99479*(gamma_bb[index]* \
               gcab*t99480*(8.0/3.0)+gamma_bb[index]*t99480*t99477*t99478*(8.0/3.0))-ccab4*1.0/(t99490*t99490)*t99484* \
               t99485*(gamma_bb[index]*gcab*t99480*(1.6E1/3.0)+gamma_bb[index]*t99480*t99477*t99478*1.6E1+gamma_bb[index]* \
               gcab*t99480*t99477*t99479*1.6E1+gamma_bb[index]*t99480*t99484*t99478*t99479*(1.6E1/3.0))-ccab1*gamma_bb[index]* \
               t99480*1.0/(t99492*t99492)*t99477*t99478*(4.0/3.0)+ccab2*gamma_bb[index]*t99500*t99480*t99477*t99478* \
               (8.0/3.0)-ccab3*gcab*t99477*t99478*t99479*1.0/(t99499*t99499)*(gamma_bb[index]*gcab*t99480*4.0+gamma_bb[index]* \
               t99480*t99477*t99478*8.0+gamma_bb[index]*gcab*t99480*t99477*t99479*4.0)+ccab3*gamma_bb[index]*gcab* \
               t99501*t99480*t99477*t99479*4.0+ccab4*gamma_bb[index]*t99503*t99480*t99484*t99478*t99479*(1.6E1/3.0) \
               )+rho_b[index]*t99566*(ccaa1*gamma_bb[index]*gcaa*t99480*t99575*(8.0/3.0)+ccaa2*t99403*t99404*t99584* \
               t99585*(1.6E1/3.0)+ccaa4*t99405*t99406*t99572*t99587*(3.2E1/3.0)-ccaa1*t99403*t99404*1.0/(t99574*t99574) \
               *t99585*(8.0/3.0)-ccaa2*t99410*t99403*t99404*1.0/(t99583*t99583)*(gamma_bb[index]*gcaa*t99480*(1.6E1/ \
               3.0)+t99403*t99404*t99585*(1.6E1/3.0))-ccaa4*t99405*t99406*t99407*1.0/(t99571*t99571)*(gamma_bb[index]* \
               gcaa*t99480*(3.2E1/3.0)+t99403*t99404*t99585*3.2E1+t99405*t99406*t99587*(3.2E1/3.0)+gamma_bb[index]* \
               gcaa*t99403*t99404*t99586*3.2E1)+ccaa3*gamma_bb[index]*gcaa*t99403*t99404*t99580*t99586*8.0-ccaa3* \
               gamma_bb[index]*gcaa*t99403*t99404*t99409*1.0/(t99579*t99579)*(gamma_bb[index]*gcaa*t99480*8.0+t99403* \
               t99404*t99585*1.6E1+gamma_bb[index]*gcaa*t99403*t99404*t99586*8.0))+rho_b[index]*t99601*(-t99561+t99596+ \
               t99413*t99416*(t99561+t99595-t99596-t99445*t99594*t99588*t99589))-c0*pow(rho_b[index],1.0/3.0)*t99650* \
               t99645*(4.0/3.0)+c0*t99645*t99646*(omega*t99610*(omega*t99605*(-8.334140006820045E15/2.81474976710656E14) \
               +t99608*(omega*t99605*(2.778046668940015E15/1.40737488355328E14)-omega*t99602*t99604*(7.0368744177664E13/ \
               8.334140006820045E15))+omega*t99602*t99604*(7.0368744177664E13/8.334140006820045E15)+t99610*t99606* \
               t99608*(t99614-omega*t99602*t99612*(7.0368744177664E13/8.334140006820045E15))*(2.778046668940015E15/ \
               7.0368744177664E13)-1.0/sqrt(3.141592653589793)*t99611*1.0/pow(t99603,2.0/3.0)*t99608*(1.108777112152858E31/ \
               1.584563250285287E29))*(4.0/3.0)+omega*t99622*t99605*(2.778046668940015E15/1.05553116266496E14))+c0* \
               t99650*t99646*(cx1*gamma_bb[index]*gx*t99632*t99480*(8.0/3.0)+cx2*t99403*t99615*t99643*t99585*(1.6E1/ \
               3.0)+cx4*t99405*t99616*t99628*t99587*(3.2E1/3.0)-cx1*t99403*1.0/(t99631*t99631)*t99615*t99585*(8.0/ \
               3.0)-cx2*t99410*t99403*t99615*1.0/(t99642*t99642)*(gamma_bb[index]*gx*t99480*(1.6E1/3.0)+t99403*t99615* \
               t99585*(1.6E1/3.0))-cx4*t99405*t99407*t99616*1.0/(t99627*t99627)*(gamma_bb[index]*gx*t99480*(3.2E1/ \
               3.0)+t99403*t99615*t99585*3.2E1+t99405*t99616*t99587*(3.2E1/3.0)+gamma_bb[index]*gx*t99403*t99615* \
               t99586*3.2E1)+cx3*gamma_bb[index]*gx*t99403*t99615*t99638*t99586*8.0-cx3*gamma_bb[index]*gx*t99403* \
               t99615*t99409*1.0/(t99637*t99637)*(gamma_bb[index]*gx*t99480*8.0+t99403*t99615*t99585*1.6E1+gamma_bb[index]* \
               gx*t99403*t99615*t99586*8.0));
        } else if (rho_a[index] > cutoff_) {
            v_rho_b_[index] = 0.0;
        } else if (rho_b[index] > cutoff_) {
            double t102776 = 1.0/pow(rho_b[index],1.0/3.0);
            double t102777 = c*t102776;
            double t102778 = sqrt(t102777);
            double t102779 = pow(t102777,3.0/2.0);
            double t102780 = c*c;
            double t102781 = 1.0/pow(rho_b[index],2.0/3.0);
            double t102782 = 1.0/c0p;
            double t102783 = b1p*t102778;
            double t102784 = b3p*t102779;
            double t102785 = b4p*t102780*t102781;
            double t102786 = b2p*c*t102776;
            double t102787 = t102783+t102784+t102785+t102786;
            double t102788 = 1.0/t102787;
            double t102789 = t102782*t102788*(1.0/2.0);
            double t102790 = t102789+1.0;
            double t102791 = log(t102790);
            double t102792 = a1p*c*t102776;
            double t102793 = t102792+1.0;
            double t102794 = gamma_bb[index]*gamma_bb[index];
            double t102795 = gcaa*gcaa;
            double t102796 = t102794*t102794;
            double t102797 = t102795*t102795;
            double t102798 = 1.0/pow(rho_b[index],3.2E1/3.0);
            double t102799 = 1.0/pow(rho_b[index],8.0/3.0);
            double t102800 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
               rho_b[index]*rho_b[index]);
            double t102801 = 1.0/pow(rho_b[index],1.6E1/3.0);
            double t102802 = pow(2.0,1.0/3.0);
            double t102803 = t102802*2.0;
            double t102804 = t102803-2.0;
            double t102805 = two_13*2.0;
            double t102806 = t102805-2.0;
            double t102807 = 1.0/t102806;
            double t102808 = 1.0/c0f;
            double t102809 = b1f*t102778;
            double t102810 = b3f*t102779;
            double t102811 = b4f*t102780*t102781;
            double t102812 = b2f*c*t102776;
            double t102813 = t102810+t102811+t102812+t102809;
            double t102814 = 1.0/t102813;
            double t102815 = t102814*t102808*(1.0/2.0);
            double t102816 = t102815+1.0;
            double t102817 = log(t102816);
            double t102818 = a1f*c*t102776;
            double t102819 = t102818+1.0;
            double t102820 = c0f*t102817*t102819*2.0;
            double t102821 = c0p*t102791*t102793*2.0;
            double t102822 = gamma_bb[index]*gcaa*t102799*4.0;
            double t102823 = gamma_bb[index]*gcaa*t102800*t102794*t102795*4.0;
            double t102824 = t102801*t102794*t102795*6.0;
            double t102825 = t102796*t102797*t102798;
            double t102826 = t102822+t102823+t102824+t102825+1.0;
            double t102827 = 1.0/t102826;
            double t102828 = gamma_bb[index]*gcaa*t102799;
            double t102829 = t102828+1.0;
            double t102830 = 1.0/t102829;
            double t102831 = gamma_bb[index]*gcaa*t102799*3.0;
            double t102832 = gamma_bb[index]*gcaa*t102800*t102794*t102795;
            double t102833 = t102801*t102794*t102795*3.0;
            double t102834 = t102831+t102832+t102833+1.0;
            double t102835 = 1.0/t102834;
            double t102836 = gamma_bb[index]*gcaa*t102799*2.0;
            double t102837 = t102801*t102794*t102795;
            double t102838 = t102836+t102837+1.0;
            double t102839 = 1.0/t102838;
            double t102840 = 1.0/pow(rho_b[index],1.9E1/3.0);
            double t102841 = 1.0/pow(rho_b[index],1.1E1/3.0);
            double t102842 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
               rho_b[index]*rho_b[index]*rho_b[index]);
            double t102843 = 1.0/pow(rho_b[index],3.5E1/3.0);
            double t102844 = 1.0/pow(rho_b[index],4.0/3.0);
            double t102845 = 1.0/pow(rho_b[index],5.0/3.0);
            double t102846 = 1.0/sqrt(t102777);
            double t102847 = 1.0/t102790;
            double t102848 = 1.0/(t102787*t102787);
            double t102849 = b4p*t102780*t102845*(2.0/3.0);
            double t102850 = b2p*c*t102844*(1.0/3.0);
            double t102851 = b1p*c*t102844*t102846*(1.0/6.0);
            double t102852 = b3p*c*t102844*t102778*(1.0/2.0);
            double t102853 = t102850+t102851+t102852+t102849;
            double t102854 = t102853*t102793*t102847*t102848;
            double t102855 = ccaa4*t102827*t102796*t102797*t102798;
            double t102856 = ccaa1*gamma_bb[index]*gcaa*t102830*t102799;
            double t102857 = ccaa3*gamma_bb[index]*gcaa*t102800*t102835*t102794*t102795;
            double t102858 = ccaa2*t102801*t102794*t102839*t102795;
            double t102859 = ccaa0+t102855+t102856+t102857+t102858;
            double t102860 = omega*omega;
            double t102861 = rho_b[index]*(8.334140006820045E15/1.40737488355328E14);
            double t102862 = 1.0/(rho_b[index]*rho_b[index]);
            double t102863 = 1.0/pow(t102861,4.0/3.0);
            double t102864 = 1.0/(omega*omega);
            double t102865 = pow(t102861,2.0/3.0);
            double t102867 = t102864*t102865;
            double t102866 = exp(-t102867);
            double t102868 = 1.0/pow(t102861,1.0/3.0);
            double t102869 = 1.0/omega;
            double t102870 = 1.0/rho_b[index];
            double t102871 = omega*t102860*t102870*(7.0368744177664E13/8.334140006820045E15);
            double t102872 = omega*t102868;
            double t102873 = gx*gx;
            double t102874 = t102873*t102873;
            double t102875 = pow(t102861,1.0/3.0);
            double t102876 = t102875*t102869;
            double t102877 = erf(t102876);
            double t102878 = t102877*(3.991211251234741E15/2.251799813685248E15);
            double t102879 = t102871-t102872;
            double t102905 = t102866*t102879;
            double t102906 = omega*t102868*(3.0/2.0);
            double t102880 = -t102905-t102906+t102871+t102878;
            double t102881 = gamma_bb[index]*gx*t102799*4.0;
            double t102882 = gamma_bb[index]*gx*t102800*t102873*t102794*4.0;
            double t102883 = t102801*t102873*t102794*6.0;
            double t102884 = t102874*t102796*t102798;
            double t102885 = t102881+t102882+t102883+t102884+1.0;
            double t102886 = 1.0/t102885;
            double t102887 = cx4*t102874*t102796*t102886*t102798;
            double t102888 = gamma_bb[index]*gx*t102799;
            double t102889 = t102888+1.0;
            double t102890 = 1.0/t102889;
            double t102891 = cx1*gamma_bb[index]*gx*t102890*t102799;
            double t102892 = gamma_bb[index]*gx*t102799*3.0;
            double t102893 = gamma_bb[index]*gx*t102800*t102873*t102794;
            double t102894 = t102801*t102873*t102794*3.0;
            double t102895 = t102892+t102893+t102894+1.0;
            double t102896 = 1.0/t102895;
            double t102897 = cx3*gamma_bb[index]*gx*t102800*t102873*t102794*t102896;
            double t102898 = gamma_bb[index]*gx*t102799*2.0;
            double t102899 = t102801*t102873*t102794;
            double t102900 = t102898+t102899+1.0;
            double t102901 = 1.0/t102900;
            double t102902 = cx2*t102801*t102901*t102873*t102794;
            double t102903 = cx0+t102902+t102891+t102887+t102897;
            double t102904 = pow(rho_b[index],4.0/3.0);
            double t102907 = omega*t102880*t102868*(4.0/3.0);
            double t102908 = t102907-1.0;
            v_rho_b_[index] = -t102859*(t102821+t102804*t102807*(t102820-c0p*t102791*t102793*2.0))+rho_b[index]* \
               t102859*(-t102854+t102804*t102807*(t102854-(1.0/(t102813*t102813)*t102819*(b2f*c*t102844*(1.0/3.0) \
               +b4f*t102780*t102845*(2.0/3.0)+b1f*c*t102844*t102846*(1.0/6.0)+b3f*c*t102844*t102778*(1.0/2.0)))/t102816+ \
               a1f*c*c0f*t102817*t102844*(2.0/3.0)-a1p*c*c0p*t102844*t102791*(2.0/3.0))+a1p*c*c0p*t102844*t102791* \
               (2.0/3.0))+rho_b[index]*(t102821+t102804*t102807*(t102820-t102821))*(ccaa1*gamma_bb[index]*gcaa*t102830* \
               t102841*(8.0/3.0)+ccaa2*t102840*t102794*t102839*t102795*(1.6E1/3.0)+ccaa4*t102843*t102827*t102796* \
               t102797*(3.2E1/3.0)-ccaa1*t102840*1.0/(t102829*t102829)*t102794*t102795*(8.0/3.0)-ccaa2*t102801*1.0/ \
               (t102838*t102838)*t102794*t102795*(gamma_bb[index]*gcaa*t102841*(1.6E1/3.0)+t102840*t102794*t102795* \
               (1.6E1/3.0))-ccaa4*1.0/(t102826*t102826)*t102796*t102797*t102798*(gamma_bb[index]*gcaa*t102841*(3.2E1/ \
               3.0)+t102840*t102794*t102795*3.2E1+t102843*t102796*t102797*(3.2E1/3.0)+gamma_bb[index]*gcaa*t102842* \
               t102794*t102795*3.2E1)+ccaa3*gamma_bb[index]*gcaa*t102842*t102835*t102794*t102795*8.0-ccaa3*gamma_bb[index]* \
               gcaa*t102800*1.0/(t102834*t102834)*t102794*t102795*(gamma_bb[index]*gcaa*t102841*8.0+t102840*t102794* \
               t102795*1.6E1+gamma_bb[index]*gcaa*t102842*t102794*t102795*8.0))-c0*pow(rho_b[index],1.0/3.0)*t102903* \
               t102908*(4.0/3.0)+c0*t102903*t102904*(omega*t102868*(omega*t102863*(-8.334140006820045E15/2.81474976710656E14) \
               +t102866*(omega*t102863*(2.778046668940015E15/1.40737488355328E14)-omega*t102860*t102862*(7.0368744177664E13/ \
               8.334140006820045E15))+omega*t102860*t102862*(7.0368744177664E13/8.334140006820045E15)+t102864*t102866* \
               t102868*(t102872-omega*t102860*t102870*(7.0368744177664E13/8.334140006820045E15))*(2.778046668940015E15/ \
               7.0368744177664E13)-1.0/sqrt(3.141592653589793)*1.0/pow(t102861,2.0/3.0)*t102866*t102869*(1.108777112152858E31/ \
               1.584563250285287E29))*(4.0/3.0)+omega*t102880*t102863*(2.778046668940015E15/1.05553116266496E14)) \
               +c0*t102904*t102908*(cx1*gamma_bb[index]*gx*t102841*t102890*(8.0/3.0)+cx2*t102901*t102840*t102873* \
               t102794*(1.6E1/3.0)+cx4*t102843*t102874*t102796*t102886*(3.2E1/3.0)-cx1*t102840*t102873*t102794*1.0/ \
               (t102889*t102889)*(8.0/3.0)-cx2*t102801*1.0/(t102900*t102900)*t102873*t102794*(gamma_bb[index]*gx* \
               t102841*(1.6E1/3.0)+t102840*t102873*t102794*(1.6E1/3.0))-cx4*t102874*1.0/(t102885*t102885)*t102796* \
               t102798*(gamma_bb[index]*gx*t102841*(3.2E1/3.0)+t102840*t102873*t102794*3.2E1+t102843*t102874*t102796* \
               (3.2E1/3.0)+gamma_bb[index]*gx*t102842*t102873*t102794*3.2E1)+cx3*gamma_bb[index]*gx*t102842*t102873* \
               t102794*t102896*8.0-cx3*gamma_bb[index]*gx*t102800*t102873*t102794*1.0/(t102895*t102895)*(gamma_bb[index]* \
               gx*t102841*8.0+t102840*t102873*t102794*1.6E1+gamma_bb[index]*gx*t102842*t102873*t102794*8.0));
        } else {
            v_rho_b_[index] = 0.0;
        }

        if (is_gga_) {

            //V_gamma_aa
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t99652 = 1.0/pow(rho_a[index],1.0/3.0);
                double t99653 = c*t99652;
                double t99654 = sqrt(t99653);
                double t99655 = pow(t99653,3.0/2.0);
                double t99656 = c*c;
                double t99657 = 1.0/pow(rho_a[index],2.0/3.0);
                double t99658 = 1.0/c0p;
                double t99659 = b1p*t99654;
                double t99660 = b3p*t99655;
                double t99661 = b4p*t99656*t99657;
                double t99662 = b2p*c*t99652;
                double t99663 = t99660+t99661+t99662+t99659;
                double t99664 = 1.0/t99663;
                double t99665 = t99664*t99658*(1.0/2.0);
                double t99666 = t99665+1.0;
                double t99667 = log(t99666);
                double t99668 = a1p*c*t99652;
                double t99669 = t99668+1.0;
                double t99670 = pow(2.0,1.0/3.0);
                double t99671 = t99670*2.0;
                double t99672 = t99671-2.0;
                double t99673 = two_13*2.0;
                double t99674 = t99673-2.0;
                double t99675 = 1.0/t99674;
                double t99676 = 1.0/c0f;
                double t99677 = 1.0/pow(rho_b[index],1.0/3.0);
                double t99678 = c*t99677;
                double t99679 = sqrt(t99678);
                double t99680 = pow(t99678,3.0/2.0);
                double t99681 = 1.0/pow(rho_b[index],2.0/3.0);
                double t99682 = b1p*t99679;
                double t99683 = b3p*t99680;
                double t99684 = b4p*t99681*t99656;
                double t99685 = b2p*c*t99677;
                double t99686 = t99682+t99683+t99684+t99685;
                double t99687 = 1.0/t99686;
                double t99688 = t99658*t99687*(1.0/2.0);
                double t99689 = t99688+1.0;
                double t99690 = log(t99689);
                double t99691 = a1p*c*t99677;
                double t99692 = t99691+1.0;
                double t99693 = c0p*t99690*t99692*2.0;
                double t99694 = rho_a[index]+rho_b[index];
                double t99695 = 1.0/pow(t99694,1.0/3.0);
                double t99696 = c*t99695;
                double t99697 = sqrt(t99696);
                double t99698 = pow(t99696,3.0/2.0);
                double t99699 = 1.0/pow(t99694,2.0/3.0);
                double t99700 = b1p*t99697;
                double t99701 = b3p*t99698;
                double t99702 = b4p*t99656*t99699;
                double t99703 = b2p*c*t99695;
                double t99704 = t99700+t99701+t99702+t99703;
                double t99705 = 1.0/t99704;
                double t99706 = t99705*t99658*(1.0/2.0);
                double t99707 = t99706+1.0;
                double t99708 = log(t99707);
                double t99709 = a1p*c*t99695;
                double t99710 = t99709+1.0;
                double t99711 = c0p*t99710*t99708*2.0;
                double t99712 = rho_a[index]-rho_b[index];
                double t99713 = t99712*t99712;
                double t99714 = 1.0/t99694;
                double t99715 = t99712*t99714;
                double t99716 = 1.0/(t99694*t99694*t99694*t99694);
                double t99717 = t99713*t99713;
                double t99718 = t99715+1.0;
                double t99719 = pow(t99718,4.0/3.0);
                double t99720 = -t99715+1.0;
                double t99721 = pow(t99720,4.0/3.0);
                double t99722 = t99721+t99719-2.0;
                double t99723 = 1.0/pow(rho_a[index],8.0/3.0);
                double t99724 = gamma_aa[index]*t99723*(1.0/2.0);
                double t99725 = 1.0/pow(rho_b[index],8.0/3.0);
                double t99726 = gamma_bb[index]*t99725*(1.0/2.0);
                double t99727 = t99724+t99726;
                double t99728 = gcab*t99727;
                double t99729 = t99728+1.0;
                double t99730 = gcab*gcab;
                double t99731 = t99727*t99727;
                double t99732 = t99730*t99730;
                double t99733 = t99731*t99731;
                double t99734 = t99730*t99731;
                double t99735 = gcab*t99727*2.0;
                double t99736 = t99734+t99735+1.0;
                double t99737 = t99730*t99731*3.0;
                double t99738 = gcab*t99730*t99731*t99727;
                double t99739 = gcab*t99727*3.0;
                double t99740 = t99737+t99738+t99739+1.0;
                double t99741 = t99730*t99731*6.0;
                double t99742 = gcab*t99730*t99731*t99727*4.0;
                double t99743 = t99732*t99733;
                double t99744 = gcab*t99727*4.0;
                double t99745 = t99741+t99742+t99743+t99744+1.0;
                double t99746 = c0p*t99667*t99669*2.0;
                double t99747 = b1f*t99654;
                double t99748 = b3f*t99655;
                double t99749 = b4f*t99656*t99657;
                double t99750 = b2f*c*t99652;
                double t99751 = t99750+t99747+t99748+t99749;
                double t99752 = 1.0/t99751;
                double t99753 = t99752*t99676*(1.0/2.0);
                double t99754 = t99753+1.0;
                double t99755 = log(t99754);
                double t99756 = a1f*c*t99652;
                double t99757 = t99756+1.0;
                double t99758 = t99746-c0f*t99755*t99757*2.0;
                double t99759 = t99746-t99672*t99675*t99758;
                double t99760 = gamma_aa[index]*gamma_aa[index];
                double t99761 = gcaa*gcaa;
                double t99762 = t99761*t99761;
                double t99763 = 1.0/pow(rho_a[index],3.2E1/3.0);
                double t99764 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t99765 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t99766 = gamma_aa[index]*gcaa*t99723;
                double t99767 = t99766+1.0;
                double t99768 = gamma_aa[index]*gcaa*t99723*3.0;
                double t99769 = gamma_aa[index]*gcaa*t99760*t99761*t99765;
                double t99770 = t99760*t99761*t99764*3.0;
                double t99771 = t99770+t99768+t99769+1.0;
                double t99772 = t99760*t99760;
                double t99773 = gamma_aa[index]*gcaa*t99723*4.0;
                double t99774 = gamma_aa[index]*gcaa*t99760*t99761*t99765*4.0;
                double t99775 = t99760*t99761*t99764*6.0;
                double t99776 = t99762*t99763*t99772;
                double t99777 = t99773+t99774+t99775+t99776+1.0;
                double t99778 = gamma_aa[index]*gcaa*t99723*2.0;
                double t99779 = t99760*t99761*t99764;
                double t99780 = t99778+t99779+1.0;
                double t99781 = rho_a[index]*(8.334140006820045E15/1.40737488355328E14);
                double t99782 = omega*omega;
                double t99783 = 1.0/rho_a[index];
                double t99784 = omega*t99782*t99783*(7.0368744177664E13/8.334140006820045E15);
                double t99785 = 1.0/pow(t99781,1.0/3.0);
                double t99786 = gx*gx;
                double t99787 = t99786*t99786;
                double t99788 = gamma_aa[index]*gx*t99723;
                double t99789 = t99788+1.0;
                double t99790 = gamma_aa[index]*gx*t99723*3.0;
                double t99791 = gamma_aa[index]*gx*t99760*t99765*t99786;
                double t99792 = t99760*t99764*t99786*3.0;
                double t99793 = t99790+t99791+t99792+1.0;
                double t99794 = gamma_aa[index]*gx*t99723*4.0;
                double t99795 = gamma_aa[index]*gx*t99760*t99765*t99786*4.0;
                double t99796 = t99760*t99764*t99786*6.0;
                double t99797 = t99763*t99772*t99787;
                double t99798 = t99794+t99795+t99796+t99797+1.0;
                double t99799 = gamma_aa[index]*gx*t99723*2.0;
                double t99800 = t99760*t99764*t99786;
                double t99801 = t99800+t99799+1.0;
                v_gamma_aa_[index] = (rho_a[index]*t99759+rho_b[index]*(t99693-t99672*t99675*(t99693-c0f*log((t99676* \
                   (1.0/2.0))/(b1f*t99679+b3f*t99680+b2f*c*t99677+b4f*t99681*t99656)+1.0)*(a1f*c*t99677+1.0)*2.0))-t99694* \
                   (t99711-t99722*t99716*t99717*t99675*(t99711-c0f*log((t99676*(1.0/2.0))/(b1f*t99697+b3f*t99698+b2f* \
                   c*t99695+b4f*t99656*t99699)+1.0)*(a1f*c*t99695+1.0)*2.0)+(Aa*t99722*t99675*log((1.0/2.0)/(Aa*(b1a* \
                   t99697+b3a*t99698+b2a*c*t99695+b4a*t99656*t99699))+1.0)*(t99716*t99717-1.0)*(a1a*c*t99695+1.0)*2.0) \
                   /d2fz0))*((ccab1*gcab*t99723*(1.0/2.0))/t99729-ccab4*t99732*t99733*1.0/(t99745*t99745)*(gcab*t99723* \
                   2.0+t99730*t99723*t99727*6.0+gcab*t99730*t99731*t99723*6.0+t99731*t99723*t99732*t99727*2.0)-ccab2* \
                   t99730*t99731*1.0/(t99736*t99736)*(gcab*t99723+t99730*t99723*t99727)+(ccab2*t99730*t99723*t99727)/ \
                   t99736-ccab1*t99730*t99723*t99727*1.0/(t99729*t99729)*(1.0/2.0)+(ccab3*gcab*t99730*t99731*t99723*(3.0/ \
                   2.0))/t99740+(ccab4*t99731*t99723*t99732*t99727*2.0)/t99745-ccab3*gcab*t99730*t99731*1.0/(t99740*t99740) \
                   *t99727*(gcab*t99723*(3.0/2.0)+t99730*t99723*t99727*3.0+gcab*t99730*t99731*t99723*(3.0/2.0)))-rho_a[index]* \
                   t99759*((ccaa1*gcaa*t99723)/t99767+(ccaa2*gamma_aa[index]*t99761*t99764*2.0)/t99780-ccaa1*gamma_aa[index]* \
                   t99761*t99764*1.0/(t99767*t99767)-ccaa2*t99760*t99761*1.0/(t99780*t99780)*t99764*(gcaa*t99723*2.0+ \
                   gamma_aa[index]*t99761*t99764*2.0)+(ccaa4*gamma_aa[index]*t99760*t99762*t99763*4.0)/t99777+(ccaa3* \
                   gcaa*t99760*t99761*t99765*3.0)/t99771-ccaa4*t99762*t99763*t99772*1.0/(t99777*t99777)*(gcaa*t99723* \
                   4.0+gamma_aa[index]*t99761*t99764*1.2E1+gamma_aa[index]*t99760*t99762*t99763*4.0+gcaa*t99760*t99761* \
                   t99765*1.2E1)-ccaa3*gamma_aa[index]*gcaa*t99760*t99761*1.0/(t99771*t99771)*t99765*(gcaa*t99723*3.0+ \
                   gamma_aa[index]*t99761*t99764*6.0+gcaa*t99760*t99761*t99765*3.0))-c0*pow(rho_a[index],4.0/3.0)*(omega* \
                   t99785*(t99784+erf(pow(t99781,1.0/3.0)/omega)*(3.991211251234741E15/2.251799813685248E15)-omega*t99785* \
                   (3.0/2.0)-exp(-1.0/(omega*omega)*pow(t99781,2.0/3.0))*(t99784-omega*t99785))*(4.0/3.0)-1.0)*((cx1* \
                   gx*t99723)/t99789-cx1*gamma_aa[index]*t99764*t99786*1.0/(t99789*t99789)+(cx2*gamma_aa[index]*t99764* \
                   t99786*2.0)/t99801-cx2*1.0/(t99801*t99801)*t99760*t99764*t99786*(gx*t99723*2.0+gamma_aa[index]*t99764* \
                   t99786*2.0)+(cx4*gamma_aa[index]*t99760*t99763*t99787*4.0)/t99798+(cx3*gx*t99760*t99765*t99786*3.0) \
                   /t99793-cx4*t99763*t99772*t99787*1.0/(t99798*t99798)*(gx*t99723*4.0+gamma_aa[index]*t99764*t99786* \
                   1.2E1+gamma_aa[index]*t99760*t99763*t99787*4.0+gx*t99760*t99765*t99786*1.2E1)-cx3*gamma_aa[index]* \
                   gx*t99760*t99765*1.0/(t99793*t99793)*t99786*(gx*t99723*3.0+gamma_aa[index]*t99764*t99786*6.0+gx*t99760* \
                   t99765*t99786*3.0));
            } else if (rho_a[index] > cutoff_) {
                double t103671 = 1.0/pow(rho_a[index],1.0/3.0);
                double t103672 = c*t103671;
                double t103673 = sqrt(t103672);
                double t103674 = pow(t103672,3.0/2.0);
                double t103675 = c*c;
                double t103676 = 1.0/pow(rho_a[index],2.0/3.0);
                double t103677 = 1.0/c0p;
                double t103678 = b1p*t103673;
                double t103679 = b3p*t103674;
                double t103680 = b4p*t103675*t103676;
                double t103681 = b2p*c*t103671;
                double t103682 = t103680+t103681+t103678+t103679;
                double t103683 = 1.0/t103682;
                double t103684 = t103683*t103677*(1.0/2.0);
                double t103685 = t103684+1.0;
                double t103686 = log(t103685);
                double t103687 = a1p*c*t103671;
                double t103688 = t103687+1.0;
                double t103689 = 1.0/pow(rho_a[index],8.0/3.0);
                double t103690 = gamma_aa[index]*gamma_aa[index];
                double t103691 = gcaa*gcaa;
                double t103692 = t103691*t103691;
                double t103693 = 1.0/pow(rho_a[index],3.2E1/3.0);
                double t103694 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t103695 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t103696 = gamma_aa[index]*gcaa*t103689;
                double t103697 = t103696+1.0;
                double t103698 = gamma_aa[index]*gcaa*t103689*3.0;
                double t103699 = gamma_aa[index]*gcaa*t103690*t103691*t103695;
                double t103700 = t103690*t103691*t103694*3.0;
                double t103701 = t103700+t103698+t103699+1.0;
                double t103702 = t103690*t103690;
                double t103703 = gamma_aa[index]*gcaa*t103689*4.0;
                double t103704 = gamma_aa[index]*gcaa*t103690*t103691*t103695*4.0;
                double t103705 = t103690*t103691*t103694*6.0;
                double t103706 = t103702*t103692*t103693;
                double t103707 = t103703+t103704+t103705+t103706+1.0;
                double t103708 = gamma_aa[index]*gcaa*t103689*2.0;
                double t103709 = t103690*t103691*t103694;
                double t103710 = t103708+t103709+1.0;
                double t103711 = rho_a[index]*(8.334140006820045E15/1.40737488355328E14);
                double t103712 = omega*omega;
                double t103713 = 1.0/rho_a[index];
                double t103714 = omega*t103712*t103713*(7.0368744177664E13/8.334140006820045E15);
                double t103715 = 1.0/pow(t103711,1.0/3.0);
                double t103716 = gx*gx;
                double t103717 = t103716*t103716;
                double t103718 = gamma_aa[index]*gx*t103689;
                double t103719 = t103718+1.0;
                double t103720 = gamma_aa[index]*gx*t103689*3.0;
                double t103721 = gamma_aa[index]*gx*t103716*t103690*t103695;
                double t103722 = t103716*t103690*t103694*3.0;
                double t103723 = t103720+t103721+t103722+1.0;
                double t103724 = gamma_aa[index]*gx*t103689*4.0;
                double t103725 = gamma_aa[index]*gx*t103716*t103690*t103695*4.0;
                double t103726 = t103716*t103690*t103694*6.0;
                double t103727 = t103702*t103717*t103693;
                double t103728 = t103724+t103725+t103726+t103727+1.0;
                double t103729 = gamma_aa[index]*gx*t103689*2.0;
                double t103730 = t103716*t103690*t103694;
                double t103731 = t103730+t103729+1.0;
                v_gamma_aa_[index] = -rho_a[index]*(((pow(2.0,1.0/3.0)*2.0-2.0)*(c0f*log((1.0/2.0)/(c0f*(b1f*t103673+ \
                   b3f*t103674+b2f*c*t103671+b4f*t103675*t103676))+1.0)*(a1f*c*t103671+1.0)*2.0-c0p*t103686*t103688*2.0) \
                   )/(two_13*2.0-2.0)+c0p*t103686*t103688*2.0)*((ccaa1*gcaa*t103689)/t103697+(ccaa2*gamma_aa[index]*t103691* \
                   t103694*2.0)/t103710-ccaa1*gamma_aa[index]*t103691*t103694*1.0/(t103697*t103697)-ccaa2*1.0/(t103710* \
                   t103710)*t103690*t103691*t103694*(gcaa*t103689*2.0+gamma_aa[index]*t103691*t103694*2.0)+(ccaa4*gamma_aa[index]* \
                   t103690*t103692*t103693*4.0)/t103707+(ccaa3*gcaa*t103690*t103691*t103695*3.0)/t103701-ccaa4*t103702* \
                   1.0/(t103707*t103707)*t103692*t103693*(gcaa*t103689*4.0+gamma_aa[index]*t103691*t103694*1.2E1+gamma_aa[index]* \
                   t103690*t103692*t103693*4.0+gcaa*t103690*t103691*t103695*1.2E1)-ccaa3*gamma_aa[index]*gcaa*1.0/(t103701* \
                   t103701)*t103690*t103691*t103695*(gcaa*t103689*3.0+gamma_aa[index]*t103691*t103694*6.0+gcaa*t103690* \
                   t103691*t103695*3.0))-c0*pow(rho_a[index],4.0/3.0)*(omega*t103715*(t103714+erf(pow(t103711,1.0/3.0) \
                   /omega)*(3.991211251234741E15/2.251799813685248E15)-omega*t103715*(3.0/2.0)-exp(-1.0/(omega*omega) \
                   *pow(t103711,2.0/3.0))*(t103714-omega*t103715))*(4.0/3.0)-1.0)*((cx1*gx*t103689)/t103719-cx1*gamma_aa[index]* \
                   t103716*1.0/(t103719*t103719)*t103694+(cx2*gamma_aa[index]*t103716*t103694*2.0)/t103731-cx2*1.0/(t103731* \
                   t103731)*t103716*t103690*t103694*(gx*t103689*2.0+gamma_aa[index]*t103716*t103694*2.0)+(cx4*gamma_aa[index]* \
                   t103690*t103717*t103693*4.0)/t103728+(cx3*gx*t103716*t103690*t103695*3.0)/t103723-cx4*t103702*t103717* \
                   1.0/(t103728*t103728)*t103693*(gx*t103689*4.0+gamma_aa[index]*t103716*t103694*1.2E1+gamma_aa[index]* \
                   t103690*t103717*t103693*4.0+gx*t103716*t103690*t103695*1.2E1)-cx3*gamma_aa[index]*gx*1.0/(t103723* \
                   t103723)*t103716*t103690*t103695*(gx*t103689*3.0+gamma_aa[index]*t103716*t103694*6.0+gx*t103716*t103690* \
                   t103695*3.0));
            } else if (rho_b[index] > cutoff_) {
                v_gamma_aa_[index] = 0.0;
            } else {
                v_gamma_aa_[index] = 0.0;
            }

            //V_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_ab_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_ab_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_ab_[index] = 0.0;
            } else {
                v_gamma_ab_[index] = 0.0;
            }

            //V_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t99804 = 1.0/pow(rho_a[index],1.0/3.0);
                double t99805 = c*t99804;
                double t99806 = sqrt(t99805);
                double t99807 = pow(t99805,3.0/2.0);
                double t99808 = c*c;
                double t99809 = 1.0/pow(rho_a[index],2.0/3.0);
                double t99810 = 1.0/c0p;
                double t99811 = b1p*t99806;
                double t99812 = b3p*t99807;
                double t99813 = b4p*t99808*t99809;
                double t99814 = b2p*c*t99804;
                double t99815 = t99811+t99812+t99813+t99814;
                double t99816 = 1.0/t99815;
                double t99817 = t99810*t99816*(1.0/2.0);
                double t99818 = t99817+1.0;
                double t99819 = log(t99818);
                double t99820 = a1p*c*t99804;
                double t99821 = t99820+1.0;
                double t99822 = pow(2.0,1.0/3.0);
                double t99823 = t99822*2.0;
                double t99824 = t99823-2.0;
                double t99825 = two_13*2.0;
                double t99826 = t99825-2.0;
                double t99827 = 1.0/t99826;
                double t99828 = 1.0/c0f;
                double t99829 = 1.0/pow(rho_b[index],1.0/3.0);
                double t99830 = c*t99829;
                double t99831 = sqrt(t99830);
                double t99832 = pow(t99830,3.0/2.0);
                double t99833 = 1.0/pow(rho_b[index],2.0/3.0);
                double t99834 = b1p*t99831;
                double t99835 = b3p*t99832;
                double t99836 = b4p*t99833*t99808;
                double t99837 = b2p*c*t99829;
                double t99838 = t99834+t99835+t99836+t99837;
                double t99839 = 1.0/t99838;
                double t99840 = t99810*t99839*(1.0/2.0);
                double t99841 = t99840+1.0;
                double t99842 = log(t99841);
                double t99843 = a1p*c*t99829;
                double t99844 = t99843+1.0;
                double t99845 = c0p*t99842*t99844*2.0;
                double t99846 = rho_a[index]+rho_b[index];
                double t99847 = 1.0/pow(t99846,1.0/3.0);
                double t99848 = c*t99847;
                double t99849 = sqrt(t99848);
                double t99850 = pow(t99848,3.0/2.0);
                double t99851 = 1.0/pow(t99846,2.0/3.0);
                double t99852 = b1p*t99849;
                double t99853 = b3p*t99850;
                double t99854 = b4p*t99851*t99808;
                double t99855 = b2p*c*t99847;
                double t99856 = t99852+t99853+t99854+t99855;
                double t99857 = 1.0/t99856;
                double t99858 = t99810*t99857*(1.0/2.0);
                double t99859 = t99858+1.0;
                double t99860 = log(t99859);
                double t99861 = a1p*c*t99847;
                double t99862 = t99861+1.0;
                double t99863 = c0p*t99860*t99862*2.0;
                double t99864 = rho_a[index]-rho_b[index];
                double t99865 = t99864*t99864;
                double t99866 = 1.0/t99846;
                double t99867 = t99864*t99866;
                double t99868 = 1.0/(t99846*t99846*t99846*t99846);
                double t99869 = t99865*t99865;
                double t99870 = t99867+1.0;
                double t99871 = pow(t99870,4.0/3.0);
                double t99872 = -t99867+1.0;
                double t99873 = pow(t99872,4.0/3.0);
                double t99874 = t99871+t99873-2.0;
                double t99875 = 1.0/pow(rho_b[index],8.0/3.0);
                double t99876 = 1.0/pow(rho_a[index],8.0/3.0);
                double t99877 = gamma_aa[index]*t99876*(1.0/2.0);
                double t99878 = gamma_bb[index]*t99875*(1.0/2.0);
                double t99879 = t99877+t99878;
                double t99880 = gcab*t99879;
                double t99881 = t99880+1.0;
                double t99882 = gcab*gcab;
                double t99883 = t99879*t99879;
                double t99884 = t99882*t99882;
                double t99885 = t99883*t99883;
                double t99886 = t99882*t99883;
                double t99887 = gcab*t99879*2.0;
                double t99888 = t99886+t99887+1.0;
                double t99889 = t99882*t99883*3.0;
                double t99890 = gcab*t99882*t99883*t99879;
                double t99891 = gcab*t99879*3.0;
                double t99892 = t99890+t99891+t99889+1.0;
                double t99893 = t99882*t99883*6.0;
                double t99894 = gcab*t99882*t99883*t99879*4.0;
                double t99895 = t99884*t99885;
                double t99896 = gcab*t99879*4.0;
                double t99897 = t99893+t99894+t99895+t99896+1.0;
                double t99898 = c0p*t99821*t99819*2.0;
                double t99899 = b1f*t99831;
                double t99900 = b3f*t99832;
                double t99901 = b4f*t99833*t99808;
                double t99902 = b2f*c*t99829;
                double t99903 = t99900+t99901+t99902+t99899;
                double t99904 = 1.0/t99903;
                double t99905 = t99904*t99828*(1.0/2.0);
                double t99906 = t99905+1.0;
                double t99907 = log(t99906);
                double t99908 = a1f*c*t99829;
                double t99909 = t99908+1.0;
                double t99910 = t99845-c0f*t99907*t99909*2.0;
                double t99911 = t99845-t99910*t99824*t99827;
                double t99912 = gamma_bb[index]*gamma_bb[index];
                double t99913 = gcaa*gcaa;
                double t99914 = t99913*t99913;
                double t99915 = 1.0/pow(rho_b[index],3.2E1/3.0);
                double t99916 = 1.0/pow(rho_b[index],1.6E1/3.0);
                double t99917 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]);
                double t99918 = gamma_bb[index]*gcaa*t99875;
                double t99919 = t99918+1.0;
                double t99920 = gamma_bb[index]*gcaa*t99875*3.0;
                double t99921 = gamma_bb[index]*gcaa*t99912*t99913*t99917;
                double t99922 = t99912*t99913*t99916*3.0;
                double t99923 = t99920+t99921+t99922+1.0;
                double t99924 = t99912*t99912;
                double t99925 = gamma_bb[index]*gcaa*t99875*4.0;
                double t99926 = gamma_bb[index]*gcaa*t99912*t99913*t99917*4.0;
                double t99927 = t99912*t99913*t99916*6.0;
                double t99928 = t99914*t99915*t99924;
                double t99929 = t99925+t99926+t99927+t99928+1.0;
                double t99930 = gamma_bb[index]*gcaa*t99875*2.0;
                double t99931 = t99912*t99913*t99916;
                double t99932 = t99930+t99931+1.0;
                double t99933 = rho_b[index]*(8.334140006820045E15/1.40737488355328E14);
                double t99934 = omega*omega;
                double t99935 = 1.0/rho_b[index];
                double t99936 = omega*t99934*t99935*(7.0368744177664E13/8.334140006820045E15);
                double t99937 = 1.0/pow(t99933,1.0/3.0);
                double t99938 = gx*gx;
                double t99939 = t99938*t99938;
                double t99940 = gamma_bb[index]*gx*t99875;
                double t99941 = t99940+1.0;
                double t99942 = gamma_bb[index]*gx*t99875*3.0;
                double t99943 = gamma_bb[index]*gx*t99912*t99917*t99938;
                double t99944 = t99912*t99916*t99938*3.0;
                double t99945 = t99942+t99943+t99944+1.0;
                double t99946 = gamma_bb[index]*gx*t99875*4.0;
                double t99947 = gamma_bb[index]*gx*t99912*t99917*t99938*4.0;
                double t99948 = t99912*t99916*t99938*6.0;
                double t99949 = t99915*t99924*t99939;
                double t99950 = t99946+t99947+t99948+t99949+1.0;
                double t99951 = gamma_bb[index]*gx*t99875*2.0;
                double t99952 = t99912*t99916*t99938;
                double t99953 = t99951+t99952+1.0;
                v_gamma_bb_[index] = (rho_b[index]*t99911+rho_a[index]*(t99898-t99824*t99827*(t99898-c0f*log((t99828* \
                   (1.0/2.0))/(b1f*t99806+b3f*t99807+b2f*c*t99804+b4f*t99808*t99809)+1.0)*(a1f*c*t99804+1.0)*2.0))-t99846* \
                   (t99863-t99827*t99874*t99868*t99869*(t99863-c0f*log((t99828*(1.0/2.0))/(b1f*t99849+b3f*t99850+b2f* \
                   c*t99847+b4f*t99851*t99808)+1.0)*(a1f*c*t99847+1.0)*2.0)+(Aa*t99827*t99874*log((1.0/2.0)/(Aa*(b1a* \
                   t99849+b3a*t99850+b2a*c*t99847+b4a*t99851*t99808))+1.0)*(t99868*t99869-1.0)*(a1a*c*t99847+1.0)*2.0) \
                   /d2fz0))*((ccab1*gcab*t99875*(1.0/2.0))/t99881-ccab4*t99884*t99885*1.0/(t99897*t99897)*(gcab*t99875* \
                   2.0+t99882*t99875*t99879*6.0+gcab*t99882*t99883*t99875*6.0+t99883*t99875*t99884*t99879*2.0)-ccab2* \
                   t99882*t99883*1.0/(t99888*t99888)*(gcab*t99875+t99882*t99875*t99879)-ccab1*1.0/(t99881*t99881)*t99882* \
                   t99875*t99879*(1.0/2.0)+(ccab2*t99882*t99875*t99879)/t99888+(ccab3*gcab*t99882*t99883*t99875*(3.0/ \
                   2.0))/t99892+(ccab4*t99883*t99875*t99884*t99879*2.0)/t99897-ccab3*gcab*t99882*t99883*1.0/(t99892*t99892) \
                   *t99879*(gcab*t99875*(3.0/2.0)+t99882*t99875*t99879*3.0+gcab*t99882*t99883*t99875*(3.0/2.0)))-rho_b[index]* \
                   t99911*((ccaa1*gcaa*t99875)/t99919+(ccaa2*gamma_bb[index]*t99913*t99916*2.0)/t99932-ccaa1*gamma_bb[index]* \
                   t99913*t99916*1.0/(t99919*t99919)-ccaa2*t99912*t99913*1.0/(t99932*t99932)*t99916*(gcaa*t99875*2.0+ \
                   gamma_bb[index]*t99913*t99916*2.0)+(ccaa4*gamma_bb[index]*t99912*t99914*t99915*4.0)/t99929+(ccaa3* \
                   gcaa*t99912*t99913*t99917*3.0)/t99923-ccaa4*t99914*t99915*t99924*1.0/(t99929*t99929)*(gcaa*t99875* \
                   4.0+gamma_bb[index]*t99913*t99916*1.2E1+gamma_bb[index]*t99912*t99914*t99915*4.0+gcaa*t99912*t99913* \
                   t99917*1.2E1)-ccaa3*gamma_bb[index]*gcaa*t99912*t99913*1.0/(t99923*t99923)*t99917*(gcaa*t99875*3.0+ \
                   gamma_bb[index]*t99913*t99916*6.0+gcaa*t99912*t99913*t99917*3.0))-c0*pow(rho_b[index],4.0/3.0)*(omega* \
                   t99937*(t99936+erf(pow(t99933,1.0/3.0)/omega)*(3.991211251234741E15/2.251799813685248E15)-omega*t99937* \
                   (3.0/2.0)-exp(-1.0/(omega*omega)*pow(t99933,2.0/3.0))*(t99936-omega*t99937))*(4.0/3.0)-1.0)*((cx1* \
                   gx*t99875)/t99941-cx1*gamma_bb[index]*1.0/(t99941*t99941)*t99916*t99938+(cx2*gamma_bb[index]*t99916* \
                   t99938*2.0)/t99953-cx2*t99912*t99916*1.0/(t99953*t99953)*t99938*(gx*t99875*2.0+gamma_bb[index]*t99916* \
                   t99938*2.0)+(cx4*gamma_bb[index]*t99912*t99915*t99939*4.0)/t99950+(cx3*gx*t99912*t99917*t99938*3.0) \
                   /t99945-cx4*1.0/(t99950*t99950)*t99915*t99924*t99939*(gx*t99875*4.0+gamma_bb[index]*t99916*t99938* \
                   1.2E1+gamma_bb[index]*t99912*t99915*t99939*4.0+gx*t99912*t99917*t99938*1.2E1)-cx3*gamma_bb[index]* \
                   gx*t99912*t99917*1.0/(t99945*t99945)*t99938*(gx*t99875*3.0+gamma_bb[index]*t99916*t99938*6.0+gx*t99912* \
                   t99917*t99938*3.0));
            } else if (rho_a[index] > cutoff_) {
                v_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                double t102912 = 1.0/pow(rho_b[index],1.0/3.0);
                double t102913 = c*t102912;
                double t102914 = sqrt(t102913);
                double t102915 = pow(t102913,3.0/2.0);
                double t102916 = c*c;
                double t102917 = 1.0/pow(rho_b[index],2.0/3.0);
                double t102918 = 1.0/c0p;
                double t102919 = b1p*t102914;
                double t102920 = b3p*t102915;
                double t102921 = b4p*t102916*t102917;
                double t102922 = b2p*c*t102912;
                double t102923 = t102920+t102921+t102922+t102919;
                double t102924 = 1.0/t102923;
                double t102925 = t102924*t102918*(1.0/2.0);
                double t102926 = t102925+1.0;
                double t102927 = log(t102926);
                double t102928 = a1p*c*t102912;
                double t102929 = t102928+1.0;
                double t102930 = 1.0/pow(rho_b[index],8.0/3.0);
                double t102931 = gamma_bb[index]*gamma_bb[index];
                double t102932 = gcaa*gcaa;
                double t102933 = t102932*t102932;
                double t102934 = 1.0/pow(rho_b[index],3.2E1/3.0);
                double t102935 = 1.0/pow(rho_b[index],1.6E1/3.0);
                double t102936 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]);
                double t102937 = gamma_bb[index]*gcaa*t102930;
                double t102938 = t102937+1.0;
                double t102939 = gamma_bb[index]*gcaa*t102930*3.0;
                double t102940 = gamma_bb[index]*gcaa*t102931*t102932*t102936;
                double t102941 = t102931*t102932*t102935*3.0;
                double t102942 = t102940+t102941+t102939+1.0;
                double t102943 = t102931*t102931;
                double t102944 = gamma_bb[index]*gcaa*t102930*4.0;
                double t102945 = gamma_bb[index]*gcaa*t102931*t102932*t102936*4.0;
                double t102946 = t102931*t102932*t102935*6.0;
                double t102947 = t102933*t102934*t102943;
                double t102948 = t102944+t102945+t102946+t102947+1.0;
                double t102949 = gamma_bb[index]*gcaa*t102930*2.0;
                double t102950 = t102931*t102932*t102935;
                double t102951 = t102950+t102949+1.0;
                double t102952 = rho_b[index]*(8.334140006820045E15/1.40737488355328E14);
                double t102953 = omega*omega;
                double t102954 = 1.0/rho_b[index];
                double t102955 = omega*t102953*t102954*(7.0368744177664E13/8.334140006820045E15);
                double t102956 = 1.0/pow(t102952,1.0/3.0);
                double t102957 = gx*gx;
                double t102958 = t102957*t102957;
                double t102959 = gamma_bb[index]*gx*t102930;
                double t102960 = t102959+1.0;
                double t102961 = gamma_bb[index]*gx*t102930*3.0;
                double t102962 = gamma_bb[index]*gx*t102931*t102936*t102957;
                double t102963 = t102931*t102935*t102957*3.0;
                double t102964 = t102961+t102962+t102963+1.0;
                double t102965 = gamma_bb[index]*gx*t102930*4.0;
                double t102966 = gamma_bb[index]*gx*t102931*t102936*t102957*4.0;
                double t102967 = t102931*t102935*t102957*6.0;
                double t102968 = t102934*t102943*t102958;
                double t102969 = t102965+t102966+t102967+t102968+1.0;
                double t102970 = gamma_bb[index]*gx*t102930*2.0;
                double t102971 = t102931*t102935*t102957;
                double t102972 = t102970+t102971+1.0;
                v_gamma_bb_[index] = -rho_b[index]*(((pow(2.0,1.0/3.0)*2.0-2.0)*(c0f*log((1.0/2.0)/(c0f*(b1f*t102914+ \
                   b3f*t102915+b2f*c*t102912+b4f*t102916*t102917))+1.0)*(a1f*c*t102912+1.0)*2.0-c0p*t102927*t102929*2.0) \
                   )/(two_13*2.0-2.0)+c0p*t102927*t102929*2.0)*((ccaa1*gcaa*t102930)/t102938+(ccaa2*gamma_bb[index]*t102932* \
                   t102935*2.0)/t102951-ccaa1*gamma_bb[index]*t102932*t102935*1.0/(t102938*t102938)-ccaa2*t102931*t102932* \
                   1.0/(t102951*t102951)*t102935*(gcaa*t102930*2.0+gamma_bb[index]*t102932*t102935*2.0)+(ccaa4*gamma_bb[index]* \
                   t102931*t102933*t102934*4.0)/t102948+(ccaa3*gcaa*t102931*t102932*t102936*3.0)/t102942-ccaa4*t102933* \
                   t102934*t102943*1.0/(t102948*t102948)*(gcaa*t102930*4.0+gamma_bb[index]*t102932*t102935*1.2E1+gamma_bb[index]* \
                   t102931*t102933*t102934*4.0+gcaa*t102931*t102932*t102936*1.2E1)-ccaa3*gamma_bb[index]*gcaa*t102931* \
                   t102932*1.0/(t102942*t102942)*t102936*(gcaa*t102930*3.0+gamma_bb[index]*t102932*t102935*6.0+gcaa*t102931* \
                   t102932*t102936*3.0))-c0*pow(rho_b[index],4.0/3.0)*(omega*t102956*(t102955+erf(pow(t102952,1.0/3.0) \
                   /omega)*(3.991211251234741E15/2.251799813685248E15)-omega*t102956*(3.0/2.0)-exp(-1.0/(omega*omega) \
                   *pow(t102952,2.0/3.0))*(t102955-omega*t102956))*(4.0/3.0)-1.0)*((cx1*gx*t102930)/t102960-cx1*gamma_bb[index]* \
                   1.0/(t102960*t102960)*t102935*t102957+(cx2*gamma_bb[index]*t102935*t102957*2.0)/t102972-cx2*t102931* \
                   t102935*1.0/(t102972*t102972)*t102957*(gx*t102930*2.0+gamma_bb[index]*t102935*t102957*2.0)+(cx4*gamma_bb[index]* \
                   t102931*t102934*t102958*4.0)/t102969+(cx3*gx*t102931*t102936*t102957*3.0)/t102964-cx4*t102934*t102943* \
                   t102958*1.0/(t102969*t102969)*(gx*t102930*4.0+gamma_bb[index]*t102935*t102957*1.2E1+gamma_bb[index]* \
                   t102931*t102934*t102958*4.0+gx*t102931*t102936*t102957*1.2E1)-cx3*gamma_bb[index]*gx*t102931*t102936* \
                   1.0/(t102964*t102964)*t102957*(gx*t102930*3.0+gamma_bb[index]*t102935*t102957*6.0+gx*t102931*t102936* \
                   t102957*3.0));
            } else {
                v_gamma_bb_[index] = 0.0;
            }
        }
        if (is_meta_) {

            //V_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_tau_a_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_tau_a_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_tau_a_[index] = 0.0;
            } else {
                v_tau_a_[index] = 0.0;
            }

            //V_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_tau_b_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_tau_b_[index] = 0.0;
            } else {
                v_tau_b_[index] = 0.0;
            }
        }
    }
    //Second Partials
    for (int index = 0; index < ntrue && deriv_ >= 2; index++) {

        //V_rho_a_rho_a
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t99957 = rho_a[index]+rho_b[index];
            double t99958 = 1.0/pow(t99957,1.0/3.0);
            double t99959 = c*t99958;
            double t99960 = sqrt(t99959);
            double t99961 = b1p*t99960;
            double t99962 = pow(t99959,3.0/2.0);
            double t99963 = b3p*t99962;
            double t99964 = c*c;
            double t99965 = 1.0/pow(t99957,2.0/3.0);
            double t99966 = b4p*t99964*t99965;
            double t99967 = b2p*c*t99958;
            double t99968 = t99961+t99963+t99966+t99967;
            double t99969 = 1.0/pow(t99957,4.0/3.0);
            double t99970 = 1.0/c0p;
            double t99971 = 1.0/t99968;
            double t99972 = t99970*t99971*(1.0/2.0);
            double t99973 = t99972+1.0;
            double t99974 = a1p*c*t99958;
            double t99975 = t99974+1.0;
            double t99976 = rho_a[index]-rho_b[index];
            double t99977 = t99976*t99976;
            double t99978 = 1.0/t99957;
            double t99979 = t99976*t99978;
            double t99980 = two_13*2.0;
            double t99981 = t99980-2.0;
            double t99982 = 1.0/t99981;
            double t99983 = 1.0/c0f;
            double t99984 = b1f*t99960;
            double t99985 = b3f*t99962;
            double t99986 = b4f*t99964*t99965;
            double t99987 = b2f*c*t99958;
            double t99988 = t99984+t99985+t99986+t99987;
            double t99989 = 1.0/t99988;
            double t99990 = t99983*t99989*(1.0/2.0);
            double t99991 = t99990+1.0;
            double t99992 = log(t99991);
            double t99993 = a1f*c*t99958;
            double t99994 = t99993+1.0;
            double t99995 = log(t99973);
            double t100005 = c0f*t99992*t99994*2.0;
            double t100006 = c0p*t99975*t99995*2.0;
            double t99996 = t100005-t100006;
            double t99997 = t99979+1.0;
            double t99998 = pow(t99997,4.0/3.0);
            double t99999 = -t99979+1.0;
            double t100000 = pow(t99999,4.0/3.0);
            double t100001 = t100000+t99998-2.0;
            double t100002 = 1.0/(t99957*t99957);
            double t100033 = t100002*t99976;
            double t100003 = -t100033+t99978;
            double t100004 = 1.0/(t99957*t99957*t99957*t99957);
            double t100007 = t99977*t99977;
            double t100008 = 1.0/pow(t99957,5.0/3.0);
            double t100009 = 1.0/sqrt(t99959);
            double t100010 = 1.0/t99973;
            double t100011 = 1.0/(t99968*t99968);
            double t100012 = b4p*t100008*t99964*(2.0/3.0);
            double t100013 = b2p*c*t99969*(1.0/3.0);
            double t100014 = b1p*c*t100009*t99969*(1.0/6.0);
            double t100015 = b3p*c*t99960*t99969*(1.0/2.0);
            double t100016 = t100012+t100013+t100014+t100015;
            double t100017 = t100010*t100011*t100016*t99975;
            double t100018 = 1.0/(t99957*t99957*t99957*t99957*t99957);
            double t100019 = 1.0/d2fz0;
            double t100020 = 1.0/Aa;
            double t100021 = b1a*t99960;
            double t100022 = b3a*t99962;
            double t100023 = b4a*t99964*t99965;
            double t100024 = b2a*c*t99958;
            double t100025 = t100021+t100022+t100023+t100024;
            double t100026 = 1.0/t100025;
            double t100027 = t100020*t100026*(1.0/2.0);
            double t100028 = t100027+1.0;
            double t100029 = log(t100028);
            double t100030 = a1a*c*t99958;
            double t100031 = t100030+1.0;
            double t100032 = pow(t99997,1.0/3.0);
            double t100034 = t100003*t100032*(4.0/3.0);
            double t100035 = pow(t99999,1.0/3.0);
            double t100110 = t100003*t100035*(4.0/3.0);
            double t100036 = -t100110+t100034;
            double t100037 = t100004*t100007;
            double t100038 = t100037-1.0;
            double t100039 = 1.0/pow(rho_a[index],1.0/3.0);
            double t100040 = c*t100039;
            double t100041 = sqrt(t100040);
            double t100042 = b1f*t100041;
            double t100043 = pow(t100040,3.0/2.0);
            double t100044 = b3f*t100043;
            double t100045 = 1.0/pow(rho_a[index],2.0/3.0);
            double t100046 = b4f*t100045*t99964;
            double t100047 = b2f*c*t100039;
            double t100048 = t100042+t100044+t100046+t100047;
            double t100049 = 1.0/pow(rho_a[index],4.0/3.0);
            double t100050 = b1p*t100041;
            double t100051 = b3p*t100043;
            double t100052 = b4p*t100045*t99964;
            double t100053 = b2p*c*t100039;
            double t100054 = t100050+t100051+t100052+t100053;
            double t100055 = 1.0/pow(rho_a[index],5.0/3.0);
            double t100056 = 1.0/sqrt(t100040);
            double t100057 = 1.0/t100048;
            double t100058 = t100057*t99983*(1.0/2.0);
            double t100059 = t100058+1.0;
            double t100060 = 1.0/t100054;
            double t100061 = t100060*t99970*(1.0/2.0);
            double t100062 = t100061+1.0;
            double t100063 = a1p*c*t100039;
            double t100064 = t100063+1.0;
            double t100065 = 1.0/t100062;
            double t100066 = 1.0/(t100054*t100054);
            double t100067 = b4p*t100055*t99964*(2.0/3.0);
            double t100068 = b2p*c*t100049*(1.0/3.0);
            double t100069 = b1p*c*t100056*t100049*(1.0/6.0);
            double t100070 = b3p*c*t100041*t100049*(1.0/2.0);
            double t100071 = t100070+t100067+t100068+t100069;
            double t100072 = t100071*t100064*t100065*t100066;
            double t100073 = log(t100062);
            double t100074 = pow(2.0,1.0/3.0);
            double t100075 = t100074*2.0;
            double t100076 = t100075-2.0;
            double t100077 = log(t100059);
            double t100078 = a1f*c*t100039;
            double t100079 = t100078+1.0;
            double t100080 = gcab*gcab;
            double t100084 = 1.0/pow(rho_a[index],8.0/3.0);
            double t100085 = gamma_aa[index]*t100084*(1.0/2.0);
            double t100086 = 1.0/pow(rho_b[index],8.0/3.0);
            double t100087 = gamma_bb[index]*t100086*(1.0/2.0);
            double t100081 = t100085+t100087;
            double t100082 = t100081*t100081;
            double t100083 = 1.0/pow(rho_a[index],1.1E1/3.0);
            double t100088 = t100080*t100080;
            double t100089 = t100082*t100082;
            double t100090 = t100080*t100082*6.0;
            double t100091 = gcab*t100080*t100081*t100082*4.0;
            double t100092 = t100088*t100089;
            double t100093 = gcab*t100081*4.0;
            double t100094 = t100090+t100091+t100092+t100093+1.0;
            double t100095 = gcab*t100081;
            double t100096 = t100095+1.0;
            double t100097 = t100080*t100082;
            double t100098 = gcab*t100081*2.0;
            double t100099 = t100097+t100098+1.0;
            double t100100 = t100080*t100082*3.0;
            double t100101 = gcab*t100080*t100081*t100082;
            double t100102 = gcab*t100081*3.0;
            double t100103 = t100100+t100101+t100102+1.0;
            double t100104 = 1.0/t100099;
            double t100105 = 1.0/t100103;
            double t100106 = 1.0/t100096;
            double t100107 = 1.0/t100094;
            double t100108 = 1.0/pow(t99957,7.0/3.0);
            double t100109 = 1.0/pow(t99957,8.0/3.0);
            double t100111 = 1.0/t99991;
            double t100112 = 1.0/(t99988*t99988);
            double t100113 = b4f*t100008*t99964*(2.0/3.0);
            double t100114 = b2f*c*t99969*(1.0/3.0);
            double t100115 = b1f*c*t100009*t99969*(1.0/6.0);
            double t100116 = b3f*c*t99960*t99969*(1.0/2.0);
            double t100117 = t100113+t100114+t100115+t100116;
            double t100118 = a1f*c*c0f*t99992*t99969*(2.0/3.0);
            double t100120 = t100111*t100112*t100117*t99994;
            double t100121 = a1p*c*c0p*t99995*t99969*(2.0/3.0);
            double t100119 = -t100120-t100121+t100017+t100118;
            double t100122 = t100016*t100016;
            double t100123 = 1.0/pow(t99959,3.0/2.0);
            double t100124 = b4p*t100109*t99964*(1.0E1/9.0);
            double t100125 = b2p*c*t100108*(4.0/9.0);
            double t100126 = b1p*c*t100009*t100108*(2.0/9.0);
            double t100127 = b3p*c*t100108*t99960*(2.0/3.0);
            double t100128 = b3p*t100009*t100109*t99964*(1.0/1.2E1);
            double t100129 = t100124+t100125+t100126+t100127+t100128-b1p*t100123*t100109*t99964*(1.0/3.6E1);
            double t100130 = 1.0/(t99968*t99968*t99968);
            double t100131 = t100010*t100130*t100122*t99975*2.0;
            double t100132 = t100117*t100117;
            double t100133 = 1.0/(t99973*t99973);
            double t100134 = 1.0/(t99968*t99968*t99968*t99968);
            double t100135 = t100120+t100121-t100017-t100118;
            double t100136 = t100002*2.0;
            double t100137 = 1.0/(t99957*t99957*t99957);
            double t100144 = t100137*t99976*2.0;
            double t100138 = -t100144+t100136;
            double t100139 = t100003*t100003;
            double t100140 = a1p*c*c0p*t100108*t99995*(8.0/9.0);
            double t100141 = 1.0/(t99957*t99957*t99957*t99957*t99957*t99957);
            double t100142 = t100007*t100018*4.0;
            double t100152 = t100004*t99976*t99977*4.0;
            double t100143 = t100142-t100152;
            double t100145 = t100035*t100138*(4.0/3.0);
            double t100146 = 1.0/pow(t99997,2.0/3.0);
            double t100147 = t100146*t100139*(4.0/9.0);
            double t100148 = 1.0/pow(t99999,2.0/3.0);
            double t100149 = t100139*t100148*(4.0/9.0);
            double t100150 = t100145+t100147+t100149-t100032*t100138*(4.0/3.0);
            double t100151 = 1.0/t100028;
            double t100153 = 1.0/(t100025*t100025);
            double t100154 = b4a*t100008*t99964*(2.0/3.0);
            double t100155 = b2a*c*t99969*(1.0/3.0);
            double t100156 = b1a*c*t100009*t99969*(1.0/6.0);
            double t100157 = b3a*c*t99960*t99969*(1.0/2.0);
            double t100158 = t100154+t100155+t100156+t100157;
            double t100159 = t100158*t100158;
            double t100160 = t100010*t100011*t100129*t99975;
            double t100161 = 1.0/t100059;
            double t100162 = b4f*t100055*t99964*(2.0/3.0);
            double t100163 = b2f*c*t100049*(1.0/3.0);
            double t100164 = b1f*c*t100056*t100049*(1.0/6.0);
            double t100165 = b3f*c*t100041*t100049*(1.0/2.0);
            double t100166 = t100162+t100163+t100164+t100165;
            double t100167 = 1.0/(t100048*t100048);
            double t100168 = 1.0/pow(rho_a[index],7.0/3.0);
            double t100169 = 1.0/pow(t100040,3.0/2.0);
            double t100170 = t100166*t100166;
            double t100171 = t100071*t100071;
            double t100172 = 1.0/(t100054*t100054*t100054);
            double t100173 = t100171*t100064*t100172*t100065*2.0;
            double t100174 = b4p*t100084*t99964*(1.0E1/9.0);
            double t100175 = b2p*c*t100168*(4.0/9.0);
            double t100176 = b3p*t100056*t100084*t99964*(1.0/1.2E1);
            double t100177 = b1p*c*t100056*t100168*(2.0/9.0);
            double t100178 = b3p*c*t100041*t100168*(2.0/3.0);
            double t100296 = b1p*t100084*t100169*t99964*(1.0/3.6E1);
            double t100179 = t100174+t100175+t100176+t100177+t100178-t100296;
            double t100180 = 1.0/(t100062*t100062);
            double t100181 = 1.0/(t100054*t100054*t100054*t100054);
            double t100182 = a1p*c*c0p*t100073*t100168*(8.0/9.0);
            double t100183 = a1f*c*c0f*t100049*t100077*(2.0/3.0);
            double t100184 = a1p*c*c0p*t100073*t100049*(2.0/3.0);
            double t100185 = t100122*t100133*t100134*t99970*t99975*(1.0/2.0);
            double t100257 = t100161*t100166*t100167*t100079;
            double t100186 = t100072+t100183-t100184-t100257;
            double t100187 = gamma_aa[index]*gamma_aa[index];
            double t100188 = gcaa*gcaa;
            double t100189 = t100187*t100187;
            double t100190 = t100188*t100188;
            double t100191 = 1.0/pow(rho_a[index],3.2E1/3.0);
            double t100192 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]);
            double t100193 = 1.0/pow(rho_a[index],1.6E1/3.0);
            double t100194 = c0f*t100077*t100079*2.0;
            double t100196 = c0p*t100064*t100073*2.0;
            double t100195 = t100194-t100196;
            double t100197 = 1.0/pow(rho_b[index],1.0/3.0);
            double t100198 = c*t100197;
            double t100199 = sqrt(t100198);
            double t100200 = pow(t100198,3.0/2.0);
            double t100201 = 1.0/pow(rho_b[index],2.0/3.0);
            double t100202 = b1p*t100199;
            double t100203 = b3p*t100200;
            double t100204 = b4p*t100201*t99964;
            double t100205 = b2p*c*t100197;
            double t100206 = t100202+t100203+t100204+t100205;
            double t100207 = 1.0/t100206;
            double t100208 = t100207*t99970*(1.0/2.0);
            double t100209 = t100208+1.0;
            double t100210 = log(t100209);
            double t100211 = a1p*c*t100197;
            double t100212 = t100211+1.0;
            double t100213 = c0p*t100210*t100212*2.0;
            double t100214 = t100001*t100004*t100007*t99982*t99996;
            double t100215 = Aa*t100001*t100031*t100019*t100029*t100038*t99982*2.0;
            double t100216 = gamma_aa[index]*gcab*t100083*(1.6E1/3.0);
            double t100217 = gamma_aa[index]*gcab*t100080*t100082*t100083*1.6E1;
            double t100218 = gamma_aa[index]*t100081*t100082*t100083*t100088*(1.6E1/3.0);
            double t100219 = gamma_aa[index]*t100080*t100081*t100083*1.6E1;
            double t100220 = t100216+t100217+t100218+t100219;
            double t100221 = 1.0/(t100096*t100096);
            double t100222 = 1.0/pow(rho_a[index],2.2E1/3.0);
            double t100223 = gamma_aa[index]*gcab*t100083*(8.0/3.0);
            double t100224 = gamma_aa[index]*t100080*t100081*t100083*(8.0/3.0);
            double t100225 = t100223+t100224;
            double t100226 = 1.0/(t100103*t100103);
            double t100227 = 1.0/pow(rho_a[index],1.4E1/3.0);
            double t100228 = 1.0/(t100094*t100094);
            double t100229 = 1.0/(t100099*t100099);
            double t100230 = gamma_aa[index]*gcab*t100083*4.0;
            double t100231 = gamma_aa[index]*gcab*t100080*t100082*t100083*4.0;
            double t100232 = gamma_aa[index]*t100080*t100081*t100083*8.0;
            double t100233 = t100230+t100231+t100232;
            double t100234 = t100076*t100195*t99982;
            double t100235 = t100234+t100196;
            double t100236 = gamma_aa[index]*gcaa*t100084*4.0;
            double t100237 = gamma_aa[index]*gcaa*t100192*t100187*t100188*4.0;
            double t100238 = t100193*t100187*t100188*6.0;
            double t100239 = t100190*t100191*t100189;
            double t100240 = t100236+t100237+t100238+t100239+1.0;
            double t100241 = 1.0/t100240;
            double t100242 = gamma_aa[index]*gcaa*t100084;
            double t100243 = t100242+1.0;
            double t100244 = 1.0/t100243;
            double t100245 = gamma_aa[index]*gcaa*t100084*3.0;
            double t100246 = gamma_aa[index]*gcaa*t100192*t100187*t100188;
            double t100247 = t100193*t100187*t100188*3.0;
            double t100248 = t100245+t100246+t100247+1.0;
            double t100249 = 1.0/t100248;
            double t100250 = gamma_aa[index]*gcaa*t100084*2.0;
            double t100251 = t100193*t100187*t100188;
            double t100252 = t100250+t100251+1.0;
            double t100253 = 1.0/t100252;
            double t100254 = 1.0/pow(rho_a[index],1.9E1/3.0);
            double t100255 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]*rho_a[index]);
            double t100256 = 1.0/pow(rho_a[index],3.5E1/3.0);
            double t100258 = t100076*t100186*t99982;
            double t100259 = ccaa4*t100241*t100190*t100256*t100189*(3.2E1/3.0);
            double t100260 = ccaa1*gamma_aa[index]*gcaa*t100244*t100083*(8.0/3.0);
            double t100261 = ccaa3*gamma_aa[index]*gcaa*t100255*t100249*t100187*t100188*8.0;
            double t100262 = ccaa2*t100253*t100254*t100187*t100188*(1.6E1/3.0);
            double t100263 = 1.0/(t100243*t100243);
            double t100264 = gamma_aa[index]*gcaa*t100083*8.0;
            double t100265 = gamma_aa[index]*gcaa*t100255*t100187*t100188*8.0;
            double t100266 = t100254*t100187*t100188*1.6E1;
            double t100267 = t100264+t100265+t100266;
            double t100268 = 1.0/(t100248*t100248);
            double t100269 = gamma_aa[index]*gcaa*t100083*(3.2E1/3.0);
            double t100270 = gamma_aa[index]*gcaa*t100255*t100187*t100188*3.2E1;
            double t100271 = t100254*t100187*t100188*3.2E1;
            double t100272 = t100190*t100256*t100189*(3.2E1/3.0);
            double t100273 = t100270+t100271+t100272+t100269;
            double t100274 = 1.0/(t100240*t100240);
            double t100275 = gamma_aa[index]*gcaa*t100083*(1.6E1/3.0);
            double t100276 = t100254*t100187*t100188*(1.6E1/3.0);
            double t100277 = t100275+t100276;
            double t100278 = 1.0/(t100252*t100252);
            double t100279 = t100260+t100261+t100262+t100259-ccaa1*t100254*t100263*t100187*t100188*(8.0/3.0)- \
               ccaa4*t100190*t100191*t100273*t100274*t100189-ccaa2*t100193*t100187*t100277*t100188*t100278-ccaa3* \
               gamma_aa[index]*gcaa*t100192*t100267*t100187*t100268*t100188;
            double t100280 = -t100072+t100184+t100258;
            double t100281 = 1.0/pow(rho_a[index],1.0E1);
            double t100282 = 1.0/pow(rho_a[index],3.8E1/3.0);
            double t100283 = ccaa4*t100241*t100190*t100191*t100189;
            double t100284 = ccaa1*gamma_aa[index]*gcaa*t100244*t100084;
            double t100285 = ccaa3*gamma_aa[index]*gcaa*t100192*t100249*t100187*t100188;
            double t100286 = ccaa2*t100253*t100193*t100187*t100188;
            double t100287 = ccaa0+t100283+t100284+t100285+t100286;
            double t100288 = 1.0/(t100048*t100048*t100048);
            double t100289 = b4f*t100084*t99964*(1.0E1/9.0);
            double t100290 = b2f*c*t100168*(4.0/9.0);
            double t100291 = b3f*t100056*t100084*t99964*(1.0/1.2E1);
            double t100292 = b1f*c*t100056*t100168*(2.0/9.0);
            double t100293 = b3f*c*t100041*t100168*(2.0/3.0);
            double t100294 = t100290+t100291+t100292+t100293+t100289-b1f*t100084*t100169*t99964*(1.0/3.6E1);
            double t100295 = t100161*t100167*t100294*t100079;
            double t100297 = t100064*t100065*t100066*t100179;
            double t100298 = 1.0/(t100059*t100059);
            double t100299 = 1.0/(t100048*t100048*t100048*t100048);
            double t100300 = t100170*t100079*t100298*t100299*t99983*(1.0/2.0);
            double t100301 = t100171*t100180*t100064*t100181*t99970*(1.0/2.0);
            double t100302 = a1f*c*t100161*t100049*t100166*t100167*(2.0/3.0);
            double t100303 = a1p*c*t100071*t100065*t100066*t100049*(2.0/3.0);
            double t100304 = rho_a[index]*(8.334140006820045E15/1.40737488355328E14);
            double t100305 = omega*omega;
            double t100306 = 1.0/rho_a[index];
            double t100307 = omega*t100305*t100306*(7.0368744177664E13/8.334140006820045E15);
            double t100308 = 1.0/pow(t100304,1.0/3.0);
            double t100309 = gx*gx;
            double t100310 = t100309*t100309;
            double t100311 = gamma_aa[index]*gx*t100084;
            double t100312 = t100311+1.0;
            double t100332 = gamma_aa[index]*gx*t100083*(3.2E1/3.0);
            double t100333 = gamma_aa[index]*gx*t100255*t100309*t100187*3.2E1;
            double t100334 = t100254*t100309*t100187*3.2E1;
            double t100335 = t100310*t100256*t100189*(3.2E1/3.0);
            double t100313 = t100332+t100333+t100334+t100335;
            double t100314 = gamma_aa[index]*gx*t100084*4.0;
            double t100315 = gamma_aa[index]*gx*t100192*t100309*t100187*4.0;
            double t100316 = t100309*t100193*t100187*6.0;
            double t100317 = t100310*t100191*t100189;
            double t100318 = t100314+t100315+t100316+t100317+1.0;
            double t100337 = gamma_aa[index]*gx*t100083*(1.6E1/3.0);
            double t100338 = t100254*t100309*t100187*(1.6E1/3.0);
            double t100319 = t100337+t100338;
            double t100320 = gamma_aa[index]*gx*t100084*2.0;
            double t100321 = t100309*t100193*t100187;
            double t100322 = t100320+t100321+1.0;
            double t100323 = gamma_aa[index]*gx*t100084*3.0;
            double t100324 = gamma_aa[index]*gx*t100192*t100309*t100187;
            double t100325 = t100309*t100193*t100187*3.0;
            double t100326 = t100323+t100324+t100325+1.0;
            double t100327 = 1.0/(t100326*t100326);
            double t100328 = gamma_aa[index]*gx*t100083*8.0;
            double t100329 = gamma_aa[index]*gx*t100255*t100309*t100187*8.0;
            double t100330 = t100254*t100309*t100187*1.6E1;
            double t100331 = t100330+t100328+t100329;
            double t100336 = 1.0/(t100318*t100318);
            double t100339 = 1.0/(t100322*t100322);
            double t100340 = 1.0/(omega*omega);
            double t100341 = pow(t100304,2.0/3.0);
            double t100346 = t100340*t100341;
            double t100342 = exp(-t100346);
            double t100343 = 1.0/(rho_a[index]*rho_a[index]);
            double t100344 = 1.0/pow(t100304,4.0/3.0);
            double t100345 = 1.0/omega;
            double t100352 = omega*t100308;
            double t100347 = t100307-t100352;
            double t100348 = pow(t100304,1.0/3.0);
            double t100349 = t100345*t100348;
            double t100350 = erf(t100349);
            double t100351 = t100350*(3.991211251234741E15/2.251799813685248E15);
            double t100358 = t100342*t100347;
            double t100359 = omega*t100308*(3.0/2.0);
            double t100353 = t100351+t100307-t100358-t100359;
            double t100354 = 1.0/t100318;
            double t100355 = 1.0/t100312;
            double t100356 = 1.0/t100326;
            double t100357 = 1.0/t100322;
            double t100360 = omega*t100308*t100353*(4.0/3.0);
            double t100361 = t100360-1.0;
            double t100362 = cx4*t100310*t100191*t100354*t100189;
            double t100363 = cx1*gamma_aa[index]*gx*t100084*t100355;
            double t100364 = cx3*gamma_aa[index]*gx*t100192*t100309*t100356*t100187;
            double t100365 = cx2*t100309*t100193*t100357*t100187;
            double t100366 = cx0+t100362+t100363+t100364+t100365;
            double t100367 = pow(rho_a[index],4.0/3.0);
            double t100368 = omega*t100344*(8.334140006820045E15/2.81474976710656E14);
            double t100369 = omega*t100344*(2.778046668940015E15/1.40737488355328E14);
            double t100385 = omega*t100305*t100343*(7.0368744177664E13/8.334140006820045E15);
            double t100370 = -t100385+t100369;
            double t100371 = 1.0/sqrt(3.141592653589793);
            double t100372 = 1.0/pow(t100304,2.0/3.0);
            double t100373 = t100342*t100371*t100345*t100372*(1.108777112152858E31/1.584563250285287E29);
            double t100374 = t100340*t100342*t100308*t100347*(2.778046668940015E15/7.0368744177664E13);
            double t100375 = t100373+t100374+t100368-t100342*t100370-omega*t100305*t100343*(7.0368744177664E13/ \
               8.334140006820045E15);
            double t100376 = omega*t100344*t100353*(2.778046668940015E15/1.05553116266496E14);
            double t100377 = 1.0/(t100312*t100312);
            double t100378 = t100376-omega*t100308*t100375*(4.0/3.0);
            double t100379 = pow(rho_a[index],1.0/3.0);
            double t100380 = cx4*t100310*t100354*t100256*t100189*(3.2E1/3.0);
            double t100381 = cx1*gamma_aa[index]*gx*t100083*t100355*(8.0/3.0);
            double t100382 = cx3*gamma_aa[index]*gx*t100255*t100309*t100356*t100187*8.0;
            double t100383 = cx2*t100254*t100309*t100357*t100187*(1.6E1/3.0);
            double t100384 = t100380+t100381+t100382+t100383-cx1*t100254*t100309*t100187*t100377*(8.0/3.0)-cx2* \
               t100309*t100193*t100319*t100339*t100187-cx4*t100310*t100313*t100191*t100336*t100189-cx3*gamma_aa[index]* \
               gx*t100331*t100192*t100309*t100327*t100187;
            double t100386 = 1.0/pow(t100304,7.0/3.0);
            double t100387 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]);
            double t100388 = t100385-t100369;
            v_rho_a_rho_a_[index] = (rho_a[index]*t100235+rho_b[index]*(t100213-t100076*t99982*(t100213-c0f*log((t99983* \
               (1.0/2.0))/(b1f*t100199+b3f*t100200+b2f*c*t100197+b4f*t100201*t99964)+1.0)*(a1f*c*t100197+1.0)*2.0) \
               )-t99957*(t100006+t100214+t100215))*(-ccab2*t100080*t100082*t100229*(gamma_aa[index]*gcab*t100227* \
               (8.8E1/9.0)+t100222*t100080*t100187*(3.2E1/9.0)+gamma_aa[index]*t100080*t100081*t100227*(8.8E1/9.0) \
               )+ccab2*t100080*(t100225*t100225)*t100082*1.0/(t100099*t100099*t100099)*2.0+ccab4*(t100220*t100220) \
               *1.0/(t100094*t100094*t100094)*t100088*t100089*2.0+ccab1*gamma_aa[index]*gcab*t100106*t100227*(4.4E1/ \
               9.0)-ccab1*t100221*t100222*t100080*t100187*(3.2E1/9.0)+ccab2*t100104*t100222*t100080*t100187*(3.2E1/ \
               9.0)-ccab4*t100228*t100088*t100089*(gamma_aa[index]*gcab*t100227*(1.76E2/9.0)+t100222*t100080*t100187* \
               (6.4E1/3.0)+gamma_aa[index]*t100080*t100081*t100227*(1.76E2/3.0)+t100222*t100082*t100088*t100187*(6.4E1/ \
               3.0)+gamma_aa[index]*gcab*t100080*t100082*t100227*(1.76E2/3.0)+gamma_aa[index]*t100081*t100082*t100227* \
               t100088*(1.76E2/9.0)+gcab*t100222*t100080*t100081*t100187*(1.28E2/3.0))+ccab4*t100222*t100107*t100082* \
               t100088*t100187*(6.4E1/3.0)-ccab1*gamma_aa[index]*t100221*t100080*t100081*t100227*(4.4E1/9.0)+ccab2* \
               gamma_aa[index]*t100104*t100080*t100081*t100227*(8.8E1/9.0)+ccab3*gcab*1.0/(t100103*t100103*t100103) \
               *t100080*(t100233*t100233)*t100081*t100082*2.0+ccab3*gamma_aa[index]*gcab*t100105*t100080*t100082* \
               t100227*(4.4E1/3.0)-ccab2*gamma_aa[index]*t100080*t100081*t100225*t100083*t100229*(1.6E1/3.0)+ccab4* \
               gamma_aa[index]*t100107*t100081*t100082*t100227*t100088*(1.76E2/9.0)+ccab3*gcab*t100105*t100222*t100080* \
               t100081*t100187*(3.2E1/3.0)+ccab1*gcab*t100222*t100080*t100081*1.0/(t100096*t100096*t100096)*t100187* \
               (3.2E1/9.0)-ccab3*gcab*t100080*t100081*t100082*t100226*(gamma_aa[index]*gcab*t100227*(4.4E1/3.0)+t100222* \
               t100080*t100187*(3.2E1/3.0)+gamma_aa[index]*t100080*t100081*t100227*(8.8E1/3.0)+gamma_aa[index]*gcab* \
               t100080*t100082*t100227*(4.4E1/3.0)+gcab*t100222*t100080*t100081*t100187*(3.2E1/3.0))-ccab3*gamma_aa[index]* \
               gcab*t100080*t100233*t100082*t100226*t100083*8.0-ccab4*gamma_aa[index]*t100220*t100081*t100082*t100083* \
               t100228*t100088*(3.2E1/3.0))+t100280*t100287*2.0+t100235*t100279*2.0+(t100006+t100214+t100215+rho_a[index]* \
               (-t100072+t100184+t100076*t99982*(t100072+t100183-t100161*t100166*t100167*t100079-a1p*c*c0p*t100073* \
               t100049*(2.0/3.0)))+t99957*(t100017-a1p*c*c0p*t99995*t99969*(2.0/3.0)-t100001*t100004*t100007*t100119* \
               t99982-t100001*t100007*t100018*t99982*t99996*4.0+t100004*t100007*t100036*t99982*t99996+t100001*t100004* \
               t99982*t99976*t99977*t99996*4.0-Aa*t100001*t100031*t100143*t100019*t100029*t99982*2.0+Aa*t100031*t100036* \
               t100019*t100029*t100038*t99982*2.0+t100001*t100031*t100151*t100153*t100019*t100038*t100158*t99982- \
               Aa*a1a*c*t100001*t100019*t100029*t100038*t99982*t99969*(2.0/3.0))-c0p*t100064*t100073*2.0-t100076* \
               t100195*t99982)*(ccab1*gamma_aa[index]*gcab*t100106*t100083*(4.0/3.0)-ccab2*t100080*t100225*t100082* \
               t100229-ccab4*t100220*t100228*t100088*t100089-ccab1*gamma_aa[index]*t100221*t100080*t100081*t100083* \
               (4.0/3.0)+ccab2*gamma_aa[index]*t100104*t100080*t100081*t100083*(8.0/3.0)+ccab3*gamma_aa[index]*gcab* \
               t100105*t100080*t100082*t100083*4.0+ccab4*gamma_aa[index]*t100107*t100081*t100082*t100083*t100088* \
               (1.6E1/3.0)-ccab3*gcab*t100080*t100233*t100081*t100082*t100226)*2.0-(ccab0+ccab1*gcab*t100106*t100081+ \
               ccab2*t100104*t100080*t100082+ccab4*t100107*t100088*t100089+ccab3*gcab*t100105*t100080*t100081*t100082) \
               *(-t99957*(-t100131-t100140+t100160+t100185+t100001*t100004*t100007*t99982*(t100131+t100140-t100160- \
               t100185-t100111*t100132*t99994*1.0/(t99988*t99988*t99988)*2.0+t100111*t100112*t99994*(b2f*c*t100108* \
               (4.0/9.0)+b4f*t100109*t99964*(1.0E1/9.0)+b1f*c*t100009*t100108*(2.0/9.0)+b3f*c*t100108*t99960*(2.0/ \
               3.0)-b1f*t100123*t100109*t99964*(1.0/3.6E1)+b3f*t100009*t100109*t99964*(1.0/1.2E1))+t100132*1.0/(t99991* \
               t99991)*t99983*t99994*1.0/(t99988*t99988*t99988*t99988)*(1.0/2.0)-a1f*c*c0f*t100108*t99992*(8.0/9.0) \
               +a1f*c*t100111*t100112*t100117*t99969*(2.0/3.0)-a1p*c*t100010*t100011*t100016*t99969*(2.0/3.0))+t100001* \
               t100007*t100018*t100135*t99982*8.0-t100004*t100007*t100036*t100135*t99982*2.0-t100001*t100141*t100007* \
               t99982*t99996*2.0E1-t100004*t100150*t100007*t99982*t99996+t100007*t100018*t100036*t99982*t99996*8.0- \
               t100001*t100004*t99982*t99977*t99996*1.2E1+t100001*t100004*t100119*t99982*t99976*t99977*8.0+t100001* \
               t100018*t99982*t99976*t99977*t99996*3.2E1-t100004*t100036*t99982*t99976*t99977*t99996*8.0+a1p*c*t100010* \
               t100011*t100016*t99969*(2.0/3.0)-Aa*t100031*t100150*t100019*t100029*t100038*t99982*2.0+Aa*t100031* \
               t100143*t100036*t100019*t100029*t99982*4.0-Aa*t100001*t100031*t100019*t100029*t99982*(t100141*t100007* \
               2.0E1+t100004*t99977*1.2E1-t100018*t99976*t99977*3.2E1)*2.0+t100001*t100031*t100151*t100143*t100153* \
               t100019*t100158*t99982*2.0-t100031*t100151*t100036*t100153*t100019*t100038*t100158*t99982*2.0-t100001* \
               t100031*1.0/(t100025*t100025*t100025)*t100151*t100019*t100038*t100159*t99982*2.0+t100001*t100031*t100151* \
               t100153*t100019*t100038*t99982*(b2a*c*t100108*(4.0/9.0)+b4a*t100109*t99964*(1.0E1/9.0)+b1a*c*t100009* \
               t100108*(2.0/9.0)+b3a*c*t100108*t99960*(2.0/3.0)-b1a*t100123*t100109*t99964*(1.0/3.6E1)+b3a*t100009* \
               t100109*t99964*(1.0/1.2E1))-Aa*a1a*c*t100001*t100108*t100019*t100029*t100038*t99982*(8.0/9.0)-Aa*a1a* \
               c*t100001*t100143*t100019*t100029*t99982*t99969*(4.0/3.0)+Aa*a1a*c*t100036*t100019*t100029*t100038* \
               t99982*t99969*(4.0/3.0)+t100001*t100020*t100031*1.0/(t100025*t100025*t100025*t100025)*t100019*1.0/ \
               (t100028*t100028)*t100038*t100159*t99982*(1.0/2.0)+a1a*c*t100001*t100151*t100153*t100019*t100038*t100158* \
               t99982*t99969*(2.0/3.0))+rho_a[index]*(t100301+t100303-t100173-t100182+t100297+t100076*t99982*(t100300+ \
               t100302+t100173+t100182+t100295-t100161*t100170*t100079*t100288*2.0-t100064*t100065*t100066*t100179- \
               a1f*c*c0f*t100077*t100168*(8.0/9.0)-t100171*t100180*t100064*t100181*t99970*(1.0/2.0)-a1p*c*t100071* \
               t100065*t100066*t100049*(2.0/3.0)))+t100076*t100186*t99982*2.0-t100071*t100064*t100065*t100066*2.0+ \
               t100010*t100011*t100016*t99975*2.0+a1p*c*c0p*t100073*t100049*(4.0/3.0)-a1p*c*c0p*t99995*t99969*(4.0/ \
               3.0)+t100001*t100004*t100007*t100135*t99982*2.0-t100001*t100007*t100018*t99982*t99996*8.0+t100004* \
               t100007*t100036*t99982*t99996*2.0+t100001*t100004*t99982*t99976*t99977*t99996*8.0-Aa*t100001*t100031* \
               t100143*t100019*t100029*t99982*4.0+Aa*t100031*t100036*t100019*t100029*t100038*t99982*4.0+t100001*t100031* \
               t100151*t100153*t100019*t100038*t100158*t99982*2.0-Aa*a1a*c*t100001*t100019*t100029*t100038*t99982* \
               t99969*(4.0/3.0))-rho_a[index]*t100235*(ccaa1*gamma_aa[index]*gcaa*t100244*t100227*(8.8E1/9.0)-ccaa1* \
               t100222*t100263*t100187*t100188*2.4E1+ccaa2*t100222*t100253*t100187*t100188*(3.04E2/9.0)+ccaa4*t100241* \
               t100190*t100282*t100189*(1.12E3/9.0)-ccaa4*t100190*t100273*t100256*t100274*t100189*(6.4E1/3.0)-ccaa2* \
               t100254*t100187*t100277*t100188*t100278*(3.2E1/3.0)-ccaa2*t100193*t100187*t100188*t100278*(gamma_aa[index]* \
               gcaa*t100227*(1.76E2/9.0)+t100222*t100187*t100188*(3.04E2/9.0))-ccaa4*t100190*t100191*t100274*t100189* \
               (gamma_aa[index]*gcaa*t100227*(3.52E2/9.0)+t100222*t100187*t100188*(6.08E2/3.0)+t100190*t100282*t100189* \
               (1.12E3/9.0)+gamma_aa[index]*gcaa*t100281*t100187*t100188*2.88E2)+ccaa4*1.0/(t100240*t100240*t100240) \
               *t100190*t100191*(t100273*t100273)*t100189*2.0+ccaa2*1.0/(t100252*t100252*t100252)*t100193*t100187* \
               (t100277*t100277)*t100188*2.0+ccaa3*gamma_aa[index]*gcaa*t100281*t100249*t100187*t100188*7.2E1+ccaa1* \
               gamma_aa[index]*gcaa*1.0/(t100243*t100243*t100243)*t100281*t100187*t100188*(1.28E2/9.0)+ccaa3*gamma_aa[index]* \
               gcaa*t100192*1.0/(t100248*t100248*t100248)*(t100267*t100267)*t100187*t100188*2.0-ccaa3*gamma_aa[index]* \
               gcaa*t100192*t100187*t100268*t100188*(gamma_aa[index]*gcaa*t100227*(8.8E1/3.0)+t100222*t100187*t100188* \
               (3.04E2/3.0)+gamma_aa[index]*gcaa*t100281*t100187*t100188*7.2E1)-ccaa3*gamma_aa[index]*gcaa*t100255* \
               t100267*t100187*t100268*t100188*1.6E1)+rho_a[index]*t100287*(t100301+t100303-t100173-t100182+t100297+ \
               t100076*t99982*(t100300-t100301+t100302-t100303+t100173+t100182+t100295-t100297-t100161*t100170*t100079* \
               t100288*2.0-a1f*c*c0f*t100077*t100168*(8.0/9.0)))-rho_a[index]*t100280*t100279*2.0-c0*t100361*t100367* \
               (cx1*gamma_aa[index]*gx*t100227*t100355*(8.8E1/9.0)-cx1*t100222*t100309*t100187*t100377*2.4E1+cx2* \
               t100222*t100309*t100357*t100187*(3.04E2/9.0)+cx4*t100310*t100282*t100354*t100189*(1.12E3/9.0)-cx2* \
               t100254*t100309*t100319*t100339*t100187*(3.2E1/3.0)-cx4*t100310*t100313*t100336*t100256*t100189*(6.4E1/ \
               3.0)-cx2*t100309*t100193*t100339*t100187*(gamma_aa[index]*gx*t100227*(1.76E2/9.0)+t100222*t100309* \
               t100187*(3.04E2/9.0))-cx4*t100310*t100191*t100336*t100189*(gamma_aa[index]*gx*t100227*(3.52E2/9.0) \
               +t100310*t100282*t100189*(1.12E3/9.0)+t100222*t100309*t100187*(6.08E2/3.0)+gamma_aa[index]*gx*t100281* \
               t100309*t100187*2.88E2)+cx2*1.0/(t100322*t100322*t100322)*t100309*t100193*(t100319*t100319)*t100187* \
               2.0+cx4*t100310*(t100313*t100313)*t100191*1.0/(t100318*t100318*t100318)*t100189*2.0+cx3*gamma_aa[index]* \
               gx*t100281*t100309*t100356*t100187*7.2E1+cx1*gamma_aa[index]*gx*1.0/(t100312*t100312*t100312)*t100281* \
               t100309*t100187*(1.28E2/9.0)+cx3*gamma_aa[index]*gx*(t100331*t100331)*1.0/(t100326*t100326*t100326) \
               *t100192*t100309*t100187*2.0-cx3*gamma_aa[index]*gx*t100192*t100309*t100327*t100187*(gamma_aa[index]* \
               gx*t100227*(8.8E1/3.0)+t100222*t100309*t100187*(3.04E2/3.0)+gamma_aa[index]*gx*t100281*t100309*t100187* \
               7.2E1)-cx3*gamma_aa[index]*gx*t100331*t100255*t100309*t100327*t100187*1.6E1)+c0*t100366*t100367*(omega* \
               t100344*(t100373+t100374-t100385+t100368+t100342*t100388)*(2.778046668940015E15/5.2776558133248E13) \
               +omega*t100308*(omega*t100386*(2.315262988442614E31/9.903520314283042E27)-t100342*(omega*t100386*(7.717543294808713E30/ \
               4.951760157141521E27)-omega*t100305*t100387*(1.40737488355328E14/8.334140006820045E15))-omega*t100305* \
               t100387*(1.40737488355328E14/8.334140006820045E15)+t100340*t100342*t100344*t100347*(7.717543294808713E30/ \
               9.903520314283042E27)+t100340*t100342*t100308*t100388*(2.778046668940015E15/3.5184372088832E13)+1.0/ \
               (omega*omega*omega)*t100306*t100342*t100371*(1.108777112152858E31/2.37684487542793E29)+1.0/(omega* \
               omega*omega*omega)*t100342*t100372*t100347*(7.717543294808713E30/4.951760157141521E27)+1.0/pow(t100304,5.0/ \
               3.0)*t100342*t100371*t100345*(3.080234563013177E46/1.115037259926531E43))*(4.0/3.0)-omega*t100353* \
               t100386*(7.717543294808713E30/3.713820117856141E27))-c0*t100045*t100361*t100366*(4.0/9.0)+c0*t100361* \
               t100384*t100379*(8.0/3.0)-c0*t100384*t100367*t100378*2.0+c0*t100366*t100378*t100379*(8.0/3.0);
        } else if (rho_a[index] > cutoff_) {
            double t103737 = 1.0/pow(rho_a[index],1.0/3.0);
            double t103738 = c*t103737;
            double t103739 = sqrt(t103738);
            double t103740 = b1f*t103739;
            double t103741 = pow(t103738,3.0/2.0);
            double t103742 = b3f*t103741;
            double t103743 = c*c;
            double t103744 = 1.0/pow(rho_a[index],2.0/3.0);
            double t103745 = b4f*t103743*t103744;
            double t103746 = b2f*c*t103737;
            double t103747 = t103740+t103742+t103745+t103746;
            double t103748 = 1.0/pow(rho_a[index],4.0/3.0);
            double t103749 = b1p*t103739;
            double t103750 = b3p*t103741;
            double t103751 = b4p*t103743*t103744;
            double t103752 = b2p*c*t103737;
            double t103753 = t103750+t103751+t103752+t103749;
            double t103754 = 1.0/pow(rho_a[index],5.0/3.0);
            double t103755 = 1.0/sqrt(t103738);
            double t103756 = 1.0/c0f;
            double t103757 = 1.0/t103747;
            double t103758 = t103756*t103757*(1.0/2.0);
            double t103759 = t103758+1.0;
            double t103760 = 1.0/c0p;
            double t103761 = 1.0/t103753;
            double t103762 = t103760*t103761*(1.0/2.0);
            double t103763 = t103762+1.0;
            double t103764 = a1p*c*t103737;
            double t103765 = t103764+1.0;
            double t103766 = 1.0/t103763;
            double t103767 = 1.0/(t103753*t103753);
            double t103768 = b4p*t103743*t103754*(2.0/3.0);
            double t103769 = b2p*c*t103748*(1.0/3.0);
            double t103770 = b1p*c*t103755*t103748*(1.0/6.0);
            double t103771 = b3p*c*t103739*t103748*(1.0/2.0);
            double t103772 = t103770+t103771+t103768+t103769;
            double t103773 = t103772*t103765*t103766*t103767;
            double t103774 = log(t103763);
            double t103775 = gamma_aa[index]*gamma_aa[index];
            double t103776 = gcaa*gcaa;
            double t103777 = t103775*t103775;
            double t103778 = t103776*t103776;
            double t103779 = 1.0/pow(rho_a[index],3.2E1/3.0);
            double t103780 = 1.0/pow(rho_a[index],8.0/3.0);
            double t103781 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]);
            double t103782 = 1.0/pow(rho_a[index],1.6E1/3.0);
            double t103783 = pow(2.0,1.0/3.0);
            double t103784 = t103783*2.0;
            double t103785 = t103784-2.0;
            double t103786 = two_13*2.0;
            double t103787 = t103786-2.0;
            double t103788 = 1.0/t103787;
            double t103789 = log(t103759);
            double t103790 = a1f*c*t103737;
            double t103791 = t103790+1.0;
            double t103792 = gamma_aa[index]*gcaa*t103780*4.0;
            double t103793 = gamma_aa[index]*gcaa*t103781*t103775*t103776*4.0;
            double t103794 = t103782*t103775*t103776*6.0;
            double t103795 = t103777*t103778*t103779;
            double t103796 = t103792+t103793+t103794+t103795+1.0;
            double t103797 = 1.0/t103796;
            double t103798 = gamma_aa[index]*gcaa*t103780;
            double t103799 = t103798+1.0;
            double t103800 = 1.0/t103799;
            double t103801 = gamma_aa[index]*gcaa*t103780*3.0;
            double t103802 = gamma_aa[index]*gcaa*t103781*t103775*t103776;
            double t103803 = t103782*t103775*t103776*3.0;
            double t103804 = t103801+t103802+t103803+1.0;
            double t103805 = 1.0/t103804;
            double t103806 = gamma_aa[index]*gcaa*t103780*2.0;
            double t103807 = t103782*t103775*t103776;
            double t103808 = t103806+t103807+1.0;
            double t103809 = 1.0/t103808;
            double t103810 = 1.0/pow(rho_a[index],1.9E1/3.0);
            double t103811 = 1.0/pow(rho_a[index],1.1E1/3.0);
            double t103812 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]*rho_a[index]);
            double t103813 = 1.0/pow(rho_a[index],3.5E1/3.0);
            double t103814 = 1.0/t103759;
            double t103815 = 1.0/(t103747*t103747);
            double t103816 = b4f*t103743*t103754*(2.0/3.0);
            double t103817 = b2f*c*t103748*(1.0/3.0);
            double t103818 = b1f*c*t103755*t103748*(1.0/6.0);
            double t103819 = b3f*c*t103739*t103748*(1.0/2.0);
            double t103820 = t103816+t103817+t103818+t103819;
            double t103821 = a1f*c*c0f*t103748*t103789*(2.0/3.0);
            double t103822 = a1p*c*c0p*t103774*t103748*(2.0/3.0);
            double t103823 = ccaa4*t103813*t103777*t103778*t103797*(3.2E1/3.0);
            double t103824 = ccaa1*gamma_aa[index]*gcaa*t103800*t103811*(8.0/3.0);
            double t103825 = ccaa3*gamma_aa[index]*gcaa*t103812*t103805*t103775*t103776*8.0;
            double t103826 = ccaa2*t103810*t103809*t103775*t103776*(1.6E1/3.0);
            double t103827 = 1.0/(t103799*t103799);
            double t103828 = gamma_aa[index]*gcaa*t103811*8.0;
            double t103829 = gamma_aa[index]*gcaa*t103812*t103775*t103776*8.0;
            double t103830 = t103810*t103775*t103776*1.6E1;
            double t103831 = t103830+t103828+t103829;
            double t103832 = 1.0/(t103804*t103804);
            double t103833 = gamma_aa[index]*gcaa*t103811*(3.2E1/3.0);
            double t103834 = gamma_aa[index]*gcaa*t103812*t103775*t103776*3.2E1;
            double t103835 = t103810*t103775*t103776*3.2E1;
            double t103836 = t103813*t103777*t103778*(3.2E1/3.0);
            double t103837 = t103833+t103834+t103835+t103836;
            double t103838 = 1.0/(t103796*t103796);
            double t103839 = gamma_aa[index]*gcaa*t103811*(1.6E1/3.0);
            double t103840 = t103810*t103775*t103776*(1.6E1/3.0);
            double t103841 = t103840+t103839;
            double t103842 = 1.0/(t103808*t103808);
            double t103843 = t103823+t103824+t103825+t103826-ccaa1*t103810*t103827*t103775*t103776*(8.0/3.0)- \
               ccaa2*t103841*t103842*t103782*t103775*t103776-ccaa4*t103837*t103838*t103777*t103778*t103779-ccaa3* \
               gamma_aa[index]*gcaa*t103831*t103832*t103781*t103775*t103776;
            double t103844 = c0f*t103791*t103789*2.0;
            double t103845 = c0p*t103765*t103774*2.0;
            double t103846 = 1.0/pow(rho_a[index],1.0E1);
            double t103847 = 1.0/pow(rho_a[index],2.2E1/3.0);
            double t103848 = 1.0/pow(rho_a[index],1.4E1/3.0);
            double t103849 = 1.0/pow(rho_a[index],3.8E1/3.0);
            double t103850 = ccaa4*t103777*t103778*t103779*t103797;
            double t103851 = ccaa1*gamma_aa[index]*gcaa*t103800*t103780;
            double t103852 = ccaa3*gamma_aa[index]*gcaa*t103805*t103781*t103775*t103776;
            double t103853 = ccaa2*t103782*t103809*t103775*t103776;
            double t103854 = ccaa0+t103850+t103851+t103852+t103853;
            double t103855 = 1.0/pow(rho_a[index],7.0/3.0);
            double t103856 = 1.0/pow(t103738,3.0/2.0);
            double t103857 = t103820*t103820;
            double t103858 = t103772*t103772;
            double t103859 = 1.0/(t103753*t103753*t103753);
            double t103860 = t103765*t103766*t103858*t103859*2.0;
            double t103861 = b4p*t103743*t103780*(1.0E1/9.0);
            double t103862 = b2p*c*t103855*(4.0/9.0);
            double t103863 = b3p*t103743*t103780*t103755*(1.0/1.2E1);
            double t103864 = b1p*c*t103755*t103855*(2.0/9.0);
            double t103865 = b3p*c*t103855*t103739*(2.0/3.0);
            double t103866 = t103861+t103862+t103863+t103864+t103865-b1p*t103743*t103780*t103856*(1.0/3.6E1);
            double t103867 = 1.0/(t103763*t103763);
            double t103868 = 1.0/(t103753*t103753*t103753*t103753);
            double t103869 = a1p*c*c0p*t103774*t103855*(8.0/9.0);
            double t103870 = rho_a[index]*(8.334140006820045E15/1.40737488355328E14);
            double t103871 = omega*omega;
            double t103872 = 1.0/rho_a[index];
            double t103873 = omega*t103871*t103872*(7.0368744177664E13/8.334140006820045E15);
            double t103874 = 1.0/pow(t103870,1.0/3.0);
            double t103875 = gx*gx;
            double t103876 = t103875*t103875;
            double t103877 = gamma_aa[index]*gx*t103780;
            double t103878 = t103877+1.0;
            double t103898 = gamma_aa[index]*gx*t103811*(3.2E1/3.0);
            double t103899 = gamma_aa[index]*gx*t103812*t103775*t103875*3.2E1;
            double t103900 = t103810*t103775*t103875*3.2E1;
            double t103901 = t103813*t103777*t103876*(3.2E1/3.0);
            double t103879 = t103900+t103901+t103898+t103899;
            double t103880 = gamma_aa[index]*gx*t103780*4.0;
            double t103881 = gamma_aa[index]*gx*t103781*t103775*t103875*4.0;
            double t103882 = t103782*t103775*t103875*6.0;
            double t103883 = t103777*t103876*t103779;
            double t103884 = t103880+t103881+t103882+t103883+1.0;
            double t103903 = gamma_aa[index]*gx*t103811*(1.6E1/3.0);
            double t103904 = t103810*t103775*t103875*(1.6E1/3.0);
            double t103885 = t103903+t103904;
            double t103886 = gamma_aa[index]*gx*t103780*2.0;
            double t103887 = t103782*t103775*t103875;
            double t103888 = t103886+t103887+1.0;
            double t103889 = gamma_aa[index]*gx*t103780*3.0;
            double t103890 = gamma_aa[index]*gx*t103781*t103775*t103875;
            double t103891 = t103782*t103775*t103875*3.0;
            double t103892 = t103890+t103891+t103889+1.0;
            double t103893 = 1.0/(t103892*t103892);
            double t103894 = gamma_aa[index]*gx*t103811*8.0;
            double t103895 = gamma_aa[index]*gx*t103812*t103775*t103875*8.0;
            double t103896 = t103810*t103775*t103875*1.6E1;
            double t103897 = t103894+t103895+t103896;
            double t103902 = 1.0/(t103884*t103884);
            double t103905 = 1.0/(t103888*t103888);
            double t103906 = 1.0/(omega*omega);
            double t103907 = pow(t103870,2.0/3.0);
            double t103912 = t103906*t103907;
            double t103908 = exp(-t103912);
            double t103909 = 1.0/(rho_a[index]*rho_a[index]);
            double t103910 = 1.0/pow(t103870,4.0/3.0);
            double t103911 = 1.0/omega;
            double t103918 = omega*t103874;
            double t103913 = t103873-t103918;
            double t103914 = pow(t103870,1.0/3.0);
            double t103915 = t103911*t103914;
            double t103916 = erf(t103915);
            double t103917 = t103916*(3.991211251234741E15/2.251799813685248E15);
            double t103924 = t103913*t103908;
            double t103925 = omega*t103874*(3.0/2.0);
            double t103919 = -t103924-t103925+t103917+t103873;
            double t103920 = 1.0/t103884;
            double t103921 = 1.0/t103878;
            double t103922 = 1.0/t103892;
            double t103923 = 1.0/t103888;
            double t103926 = omega*t103874*t103919*(4.0/3.0);
            double t103927 = t103926-1.0;
            double t103928 = cx4*t103920*t103777*t103876*t103779;
            double t103929 = cx1*gamma_aa[index]*gx*t103921*t103780;
            double t103930 = cx3*gamma_aa[index]*gx*t103922*t103781*t103775*t103875;
            double t103931 = cx2*t103923*t103782*t103775*t103875;
            double t103932 = cx0+t103930+t103931+t103928+t103929;
            double t103933 = pow(rho_a[index],4.0/3.0);
            double t103934 = omega*t103910*(8.334140006820045E15/2.81474976710656E14);
            double t103935 = omega*t103910*(2.778046668940015E15/1.40737488355328E14);
            double t103951 = omega*t103871*t103909*(7.0368744177664E13/8.334140006820045E15);
            double t103936 = -t103951+t103935;
            double t103937 = 1.0/sqrt(3.141592653589793);
            double t103938 = 1.0/pow(t103870,2.0/3.0);
            double t103939 = t103911*t103908*t103937*t103938*(1.108777112152858E31/1.584563250285287E29);
            double t103940 = t103913*t103906*t103908*t103874*(2.778046668940015E15/7.0368744177664E13);
            double t103941 = t103940+t103934+t103939-t103908*t103936-omega*t103871*t103909*(7.0368744177664E13/ \
               8.334140006820045E15);
            double t103942 = omega*t103910*t103919*(2.778046668940015E15/1.05553116266496E14);
            double t103943 = 1.0/(t103878*t103878);
            double t103944 = t103942-omega*t103941*t103874*(4.0/3.0);
            double t103945 = pow(rho_a[index],1.0/3.0);
            double t103946 = cx4*t103920*t103813*t103777*t103876*(3.2E1/3.0);
            double t103947 = cx1*gamma_aa[index]*gx*t103811*t103921*(8.0/3.0);
            double t103948 = cx3*gamma_aa[index]*gx*t103812*t103922*t103775*t103875*8.0;
            double t103949 = cx2*t103810*t103923*t103775*t103875*(1.6E1/3.0);
            double t103950 = t103946+t103947+t103948+t103949-cx1*t103810*t103943*t103775*t103875*(8.0/3.0)-cx2* \
               t103905*t103782*t103775*t103875*t103885-cx4*t103902*t103777*t103876*t103779*t103879-cx3*gamma_aa[index]* \
               gx*t103781*t103775*t103875*t103893*t103897;
            double t103952 = 1.0/pow(t103870,7.0/3.0);
            double t103953 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]);
            double t103954 = t103951-t103935;
            v_rho_a_rho_a_[index] = t103843*(t103845+t103785*t103788*(t103844-c0p*t103765*t103774*2.0))*2.0+t103854* \
               (t103822-t103773+t103785*t103788*(t103821+t103773-t103820*t103814*t103815*t103791-a1p*c*c0p*t103774* \
               t103748*(2.0/3.0)))*2.0+rho_a[index]*t103854*(-t103860-t103869+t103785*t103788*(t103860+t103869-t103765* \
               t103766*t103767*t103866-t103814*t103791*1.0/(t103747*t103747*t103747)*t103857*2.0+t103814*t103815* \
               t103791*(b2f*c*t103855*(4.0/9.0)+b4f*t103743*t103780*(1.0E1/9.0)+b1f*c*t103755*t103855*(2.0/9.0)+b3f* \
               c*t103855*t103739*(2.0/3.0)-b1f*t103743*t103780*t103856*(1.0/3.6E1)+b3f*t103743*t103780*t103755*(1.0/ \
               1.2E1))+t103791*1.0/(t103747*t103747*t103747*t103747)*t103756*t103857*1.0/(t103759*t103759)*(1.0/2.0) \
               -a1f*c*c0f*t103855*t103789*(8.0/9.0)-t103760*t103765*t103858*t103867*t103868*(1.0/2.0)+a1f*c*t103820* \
               t103814*t103815*t103748*(2.0/3.0)-a1p*c*t103772*t103748*t103766*t103767*(2.0/3.0))+t103765*t103766* \
               t103767*t103866+t103760*t103765*t103858*t103867*t103868*(1.0/2.0)+a1p*c*t103772*t103748*t103766*t103767* \
               (2.0/3.0))-rho_a[index]*t103843*(t103822-t103773+t103785*t103788*(t103821-t103822+t103773-t103820* \
               t103814*t103815*t103791))*2.0-rho_a[index]*(t103845+t103785*t103788*(t103844-t103845))*(ccaa1*gamma_aa[index]* \
               gcaa*t103800*t103848*(8.8E1/9.0)-ccaa1*t103827*t103775*t103847*t103776*2.4E1+ccaa2*t103809*t103775* \
               t103847*t103776*(3.04E2/9.0)+ccaa4*t103777*t103849*t103778*t103797*(1.12E3/9.0)-ccaa2*t103810*t103841* \
               t103842*t103775*t103776*(3.2E1/3.0)-ccaa4*t103813*t103837*t103838*t103777*t103778*(6.4E1/3.0)-ccaa2* \
               t103842*t103782*t103775*t103776*(gamma_aa[index]*gcaa*t103848*(1.76E2/9.0)+t103775*t103847*t103776* \
               (3.04E2/9.0))-ccaa4*t103838*t103777*t103778*t103779*(gamma_aa[index]*gcaa*t103848*(3.52E2/9.0)+t103775* \
               t103847*t103776*(6.08E2/3.0)+t103777*t103849*t103778*(1.12E3/9.0)+gamma_aa[index]*gcaa*t103846*t103775* \
               t103776*2.88E2)+ccaa2*(t103841*t103841)*1.0/(t103808*t103808*t103808)*t103782*t103775*t103776*2.0+ \
               ccaa4*(t103837*t103837)*t103777*t103778*1.0/(t103796*t103796*t103796)*t103779*2.0+ccaa3*gamma_aa[index]* \
               gcaa*t103805*t103846*t103775*t103776*7.2E1+ccaa1*gamma_aa[index]*gcaa*t103846*t103775*t103776*1.0/ \
               (t103799*t103799*t103799)*(1.28E2/9.0)+ccaa3*gamma_aa[index]*gcaa*1.0/(t103804*t103804*t103804)*(t103831* \
               t103831)*t103781*t103775*t103776*2.0-ccaa3*gamma_aa[index]*gcaa*t103832*t103781*t103775*t103776*(gamma_aa[index]* \
               gcaa*t103848*(8.8E1/3.0)+t103775*t103847*t103776*(3.04E2/3.0)+gamma_aa[index]*gcaa*t103846*t103775* \
               t103776*7.2E1)-ccaa3*gamma_aa[index]*gcaa*t103812*t103831*t103832*t103775*t103776*1.6E1)-c0*t103933* \
               t103927*(cx1*gamma_aa[index]*gx*t103921*t103848*(8.8E1/9.0)-cx1*t103943*t103775*t103847*t103875*2.4E1+ \
               cx2*t103923*t103775*t103847*t103875*(3.04E2/9.0)+cx4*t103920*t103777*t103849*t103876*(1.12E3/9.0)- \
               cx2*t103810*t103905*t103775*t103875*t103885*(3.2E1/3.0)-cx4*t103902*t103813*t103777*t103876*t103879* \
               (6.4E1/3.0)-cx2*t103905*t103782*t103775*t103875*(gamma_aa[index]*gx*t103848*(1.76E2/9.0)+t103775*t103847* \
               t103875*(3.04E2/9.0))-cx4*t103902*t103777*t103876*t103779*(gamma_aa[index]*gx*t103848*(3.52E2/9.0) \
               +t103775*t103847*t103875*(6.08E2/3.0)+t103777*t103849*t103876*(1.12E3/9.0)+gamma_aa[index]*gx*t103846* \
               t103775*t103875*2.88E2)+cx2*t103782*t103775*t103875*(t103885*t103885)*1.0/(t103888*t103888*t103888) \
               *2.0+cx4*1.0/(t103884*t103884*t103884)*t103777*t103876*t103779*(t103879*t103879)*2.0+cx3*gamma_aa[index]* \
               gx*t103922*t103846*t103775*t103875*7.2E1+cx1*gamma_aa[index]*gx*t103846*t103775*t103875*1.0/(t103878* \
               t103878*t103878)*(1.28E2/9.0)+cx3*gamma_aa[index]*gx*t103781*t103775*1.0/(t103892*t103892*t103892) \
               *t103875*(t103897*t103897)*2.0-cx3*gamma_aa[index]*gx*t103781*t103775*t103875*t103893*(gamma_aa[index]* \
               gx*t103848*(8.8E1/3.0)+t103775*t103847*t103875*(3.04E2/3.0)+gamma_aa[index]*gx*t103846*t103775*t103875* \
               7.2E1)-cx3*gamma_aa[index]*gx*t103812*t103775*t103875*t103893*t103897*1.6E1)+c0*t103932*t103933*(omega* \
               t103910*(t103940-t103951+t103934+t103939+t103908*t103954)*(2.778046668940015E15/5.2776558133248E13) \
               +omega*t103874*(omega*t103952*(2.315262988442614E31/9.903520314283042E27)-t103908*(omega*t103952*(7.717543294808713E30/ \
               4.951760157141521E27)-omega*t103871*t103953*(1.40737488355328E14/8.334140006820045E15))-omega*t103871* \
               t103953*(1.40737488355328E14/8.334140006820045E15)+t103910*t103913*t103906*t103908*(7.717543294808713E30/ \
               9.903520314283042E27)+t103906*t103908*t103954*t103874*(2.778046668940015E15/3.5184372088832E13)+1.0/ \
               (omega*omega*omega*omega)*t103913*t103908*t103938*(7.717543294808713E30/4.951760157141521E27)+1.0/ \
               (omega*omega*omega)*t103872*t103908*t103937*(1.108777112152858E31/2.37684487542793E29)+t103911*1.0/ \
               pow(t103870,5.0/3.0)*t103908*t103937*(3.080234563013177E46/1.115037259926531E43))*(4.0/3.0)-omega* \
               t103952*t103919*(7.717543294808713E30/3.713820117856141E27))-c0*t103950*t103933*t103944*2.0-c0*t103932* \
               t103744*t103927*(4.0/9.0)+c0*t103932*t103944*t103945*(8.0/3.0)+c0*t103950*t103927*t103945*(8.0/3.0) \
               ;
        } else if (rho_b[index] > cutoff_) {
            v_rho_a_rho_a_[index] = 0.0;
        } else {
            v_rho_a_rho_a_[index] = 0.0;
        }

        //V_rho_a_rho_b
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t100390 = rho_a[index]+rho_b[index];
            double t100391 = 1.0/pow(t100390,1.0/3.0);
            double t100392 = c*t100391;
            double t100393 = sqrt(t100392);
            double t100394 = b1p*t100393;
            double t100395 = pow(t100392,3.0/2.0);
            double t100396 = b3p*t100395;
            double t100397 = c*c;
            double t100398 = 1.0/pow(t100390,2.0/3.0);
            double t100399 = b4p*t100397*t100398;
            double t100400 = b2p*c*t100391;
            double t100401 = t100400+t100394+t100396+t100399;
            double t100402 = 1.0/pow(t100390,4.0/3.0);
            double t100403 = 1.0/c0p;
            double t100404 = 1.0/t100401;
            double t100405 = t100403*t100404*(1.0/2.0);
            double t100406 = t100405+1.0;
            double t100407 = a1p*c*t100391;
            double t100408 = t100407+1.0;
            double t100409 = rho_a[index]-rho_b[index];
            double t100410 = t100409*t100409;
            double t100411 = 1.0/t100390;
            double t100412 = t100411*t100409;
            double t100413 = two_13*2.0;
            double t100414 = t100413-2.0;
            double t100415 = 1.0/t100414;
            double t100416 = 1.0/c0f;
            double t100417 = b1f*t100393;
            double t100418 = b3f*t100395;
            double t100419 = b4f*t100397*t100398;
            double t100420 = b2f*c*t100391;
            double t100421 = t100420+t100417+t100418+t100419;
            double t100422 = 1.0/t100421;
            double t100423 = t100422*t100416*(1.0/2.0);
            double t100424 = t100423+1.0;
            double t100425 = log(t100424);
            double t100426 = a1f*c*t100391;
            double t100427 = t100426+1.0;
            double t100428 = log(t100406);
            double t100438 = c0f*t100425*t100427*2.0;
            double t100439 = c0p*t100408*t100428*2.0;
            double t100429 = t100438-t100439;
            double t100430 = t100412+1.0;
            double t100431 = pow(t100430,4.0/3.0);
            double t100432 = -t100412+1.0;
            double t100433 = pow(t100432,4.0/3.0);
            double t100434 = t100431+t100433-2.0;
            double t100435 = 1.0/(t100390*t100390);
            double t100466 = t100435*t100409;
            double t100436 = t100411-t100466;
            double t100437 = 1.0/(t100390*t100390*t100390*t100390);
            double t100440 = t100410*t100410;
            double t100441 = 1.0/pow(t100390,5.0/3.0);
            double t100442 = 1.0/sqrt(t100392);
            double t100443 = 1.0/t100406;
            double t100444 = 1.0/(t100401*t100401);
            double t100445 = b4p*t100441*t100397*(2.0/3.0);
            double t100446 = b2p*c*t100402*(1.0/3.0);
            double t100447 = b1p*c*t100402*t100442*(1.0/6.0);
            double t100448 = b3p*c*t100402*t100393*(1.0/2.0);
            double t100449 = t100445+t100446+t100447+t100448;
            double t100450 = t100443*t100408*t100444*t100449;
            double t100451 = 1.0/(t100390*t100390*t100390*t100390*t100390);
            double t100452 = 1.0/d2fz0;
            double t100453 = 1.0/Aa;
            double t100454 = b1a*t100393;
            double t100455 = b3a*t100395;
            double t100456 = b4a*t100397*t100398;
            double t100457 = b2a*c*t100391;
            double t100458 = t100454+t100455+t100456+t100457;
            double t100459 = 1.0/t100458;
            double t100460 = t100453*t100459*(1.0/2.0);
            double t100461 = t100460+1.0;
            double t100462 = log(t100461);
            double t100463 = a1a*c*t100391;
            double t100464 = t100463+1.0;
            double t100465 = pow(t100430,1.0/3.0);
            double t100467 = t100436*t100465*(4.0/3.0);
            double t100468 = pow(t100432,1.0/3.0);
            double t100612 = t100436*t100468*(4.0/3.0);
            double t100469 = -t100612+t100467;
            double t100470 = t100440*t100437;
            double t100471 = t100470-1.0;
            double t100472 = 1.0/pow(rho_a[index],1.0/3.0);
            double t100473 = c*t100472;
            double t100474 = sqrt(t100473);
            double t100475 = b1f*t100474;
            double t100476 = pow(t100473,3.0/2.0);
            double t100477 = b3f*t100476;
            double t100478 = 1.0/pow(rho_a[index],2.0/3.0);
            double t100479 = b4f*t100397*t100478;
            double t100480 = b2f*c*t100472;
            double t100481 = t100480+t100475+t100477+t100479;
            double t100482 = 1.0/pow(rho_a[index],4.0/3.0);
            double t100483 = b1p*t100474;
            double t100484 = b3p*t100476;
            double t100485 = b4p*t100397*t100478;
            double t100486 = b2p*c*t100472;
            double t100487 = t100483+t100484+t100485+t100486;
            double t100488 = 1.0/pow(rho_a[index],5.0/3.0);
            double t100489 = 1.0/sqrt(t100473);
            double t100490 = 1.0/t100481;
            double t100491 = t100416*t100490*(1.0/2.0);
            double t100492 = t100491+1.0;
            double t100493 = 1.0/t100487;
            double t100494 = t100403*t100493*(1.0/2.0);
            double t100495 = t100494+1.0;
            double t100496 = a1p*c*t100472;
            double t100497 = t100496+1.0;
            double t100498 = 1.0/t100495;
            double t100499 = 1.0/(t100487*t100487);
            double t100500 = b4p*t100397*t100488*(2.0/3.0);
            double t100501 = b2p*c*t100482*(1.0/3.0);
            double t100502 = b1p*c*t100482*t100489*(1.0/6.0);
            double t100503 = b3p*c*t100482*t100474*(1.0/2.0);
            double t100504 = t100500+t100501+t100502+t100503;
            double t100505 = t100504*t100497*t100498*t100499;
            double t100506 = log(t100495);
            double t100507 = pow(2.0,1.0/3.0);
            double t100508 = t100507*2.0;
            double t100509 = t100508-2.0;
            double t100510 = log(t100492);
            double t100511 = a1f*c*t100472;
            double t100512 = t100511+1.0;
            double t100513 = gcab*gcab;
            double t100517 = 1.0/pow(rho_a[index],8.0/3.0);
            double t100518 = gamma_aa[index]*t100517*(1.0/2.0);
            double t100519 = 1.0/pow(rho_b[index],8.0/3.0);
            double t100520 = gamma_bb[index]*t100519*(1.0/2.0);
            double t100514 = t100520+t100518;
            double t100515 = t100514*t100514;
            double t100516 = 1.0/pow(rho_b[index],1.1E1/3.0);
            double t100521 = t100513*t100513;
            double t100522 = t100515*t100515;
            double t100523 = t100513*t100515*6.0;
            double t100524 = gcab*t100513*t100514*t100515*4.0;
            double t100525 = t100521*t100522;
            double t100526 = gcab*t100514*4.0;
            double t100527 = t100523+t100524+t100525+t100526+1.0;
            double t100528 = gcab*t100514;
            double t100529 = t100528+1.0;
            double t100530 = t100513*t100515;
            double t100531 = gcab*t100514*2.0;
            double t100532 = t100530+t100531+1.0;
            double t100533 = t100513*t100515*3.0;
            double t100534 = gcab*t100513*t100514*t100515;
            double t100535 = gcab*t100514*3.0;
            double t100536 = t100533+t100534+t100535+1.0;
            double t100537 = t100410*t100415*t100434*t100409*t100437*t100429*4.0;
            double t100538 = t100411+t100466;
            double t100539 = 1.0/t100424;
            double t100540 = 1.0/(t100421*t100421);
            double t100541 = b4f*t100441*t100397*(2.0/3.0);
            double t100542 = b2f*c*t100402*(1.0/3.0);
            double t100543 = b1f*c*t100402*t100442*(1.0/6.0);
            double t100544 = b3f*c*t100402*t100393*(1.0/2.0);
            double t100545 = t100541+t100542+t100543+t100544;
            double t100546 = a1f*c*c0f*t100402*t100425*(2.0/3.0);
            double t100547 = t100440*t100451*4.0;
            double t100548 = t100465*t100538*(4.0/3.0);
            double t100611 = t100538*t100468*(4.0/3.0);
            double t100549 = -t100611+t100548;
            double t100550 = 1.0/t100461;
            double t100551 = 1.0/(t100458*t100458);
            double t100552 = b4a*t100441*t100397*(2.0/3.0);
            double t100553 = b2a*c*t100402*(1.0/3.0);
            double t100554 = b1a*c*t100402*t100442*(1.0/6.0);
            double t100555 = b3a*c*t100402*t100393*(1.0/2.0);
            double t100556 = t100552+t100553+t100554+t100555;
            double t100557 = t100415*t100550*t100434*t100452*t100551*t100471*t100464*t100556;
            double t100558 = 1.0/pow(rho_b[index],1.0/3.0);
            double t100559 = c*t100558;
            double t100560 = sqrt(t100559);
            double t100561 = b1f*t100560;
            double t100562 = pow(t100559,3.0/2.0);
            double t100563 = b3f*t100562;
            double t100564 = 1.0/pow(rho_b[index],2.0/3.0);
            double t100565 = b4f*t100564*t100397;
            double t100566 = b2f*c*t100558;
            double t100567 = t100561+t100563+t100565+t100566;
            double t100568 = 1.0/pow(rho_b[index],4.0/3.0);
            double t100569 = b1p*t100560;
            double t100570 = b3p*t100562;
            double t100571 = b4p*t100564*t100397;
            double t100572 = b2p*c*t100558;
            double t100573 = t100570+t100571+t100572+t100569;
            double t100574 = 1.0/pow(rho_b[index],5.0/3.0);
            double t100575 = 1.0/sqrt(t100559);
            double t100576 = 1.0/t100567;
            double t100577 = t100416*t100576*(1.0/2.0);
            double t100578 = t100577+1.0;
            double t100579 = 1.0/t100573;
            double t100580 = t100403*t100579*(1.0/2.0);
            double t100581 = t100580+1.0;
            double t100582 = a1p*c*t100558;
            double t100583 = t100582+1.0;
            double t100584 = 1.0/t100581;
            double t100585 = 1.0/(t100573*t100573);
            double t100586 = b4p*t100574*t100397*(2.0/3.0);
            double t100587 = b2p*c*t100568*(1.0/3.0);
            double t100588 = b1p*c*t100575*t100568*(1.0/6.0);
            double t100589 = b3p*c*t100560*t100568*(1.0/2.0);
            double t100590 = t100586+t100587+t100588+t100589;
            double t100591 = t100590*t100583*t100584*t100585;
            double t100592 = log(t100581);
            double t100593 = log(t100578);
            double t100594 = a1f*c*t100558;
            double t100595 = t100594+1.0;
            double t100596 = t100440*t100415*t100434*t100437*t100429;
            double t100597 = Aa*t100415*t100434*t100452*t100462*t100471*t100464*2.0;
            double t100598 = 1.0/pow(rho_a[index],1.1E1/3.0);
            double t100599 = 1.0/(t100536*t100536);
            double t100600 = 1.0/t100529;
            double t100601 = 1.0/(t100527*t100527);
            double t100602 = 1.0/(t100532*t100532);
            double t100603 = 1.0/t100527;
            double t100604 = 1.0/(t100529*t100529);
            double t100605 = 1.0/t100532;
            double t100606 = 1.0/t100536;
            double t100608 = a1p*c*c0p*t100402*t100428*(2.0/3.0);
            double t100613 = t100540*t100427*t100545*t100539;
            double t100607 = t100450-t100613-t100608+t100546;
            double t100609 = 1.0/pow(t100390,7.0/3.0);
            double t100610 = 1.0/pow(t100390,8.0/3.0);
            double t100614 = t100449*t100449;
            double t100615 = 1.0/pow(t100392,3.0/2.0);
            double t100616 = b4p*t100610*t100397*(1.0E1/9.0);
            double t100617 = b2p*c*t100609*(4.0/9.0);
            double t100618 = b1p*c*t100442*t100609*(2.0/9.0);
            double t100619 = b3p*c*t100393*t100609*(2.0/3.0);
            double t100620 = b3p*t100610*t100442*t100397*(1.0/1.2E1);
            double t100621 = t100620+t100616+t100617+t100618+t100619-b1p*t100610*t100615*t100397*(1.0/3.6E1);
            double t100622 = t100621*t100443*t100408*t100444;
            double t100623 = 1.0/(t100401*t100401*t100401);
            double t100624 = t100545*t100545;
            double t100625 = 1.0/(t100406*t100406);
            double t100626 = 1.0/(t100401*t100401*t100401*t100401);
            double t100627 = t100403*t100614*t100408*t100625*t100626*(1.0/2.0);
            double t100628 = 1.0/(t100390*t100390*t100390);
            double t100629 = a1p*c*t100402*t100443*t100444*t100449*(2.0/3.0);
            double t100630 = 1.0/(t100390*t100390*t100390*t100390*t100390*t100390);
            double t100631 = t100410*t100409*t100437*4.0;
            double t100632 = t100631+t100547;
            double t100633 = t100409*t100628*t100468*(8.0/3.0);
            double t100634 = 1.0/pow(t100430,2.0/3.0);
            double t100635 = t100436*t100634*t100538*(4.0/9.0);
            double t100636 = 1.0/pow(t100432,2.0/3.0);
            double t100637 = t100436*t100636*t100538*(4.0/9.0);
            double t100638 = t100633+t100635+t100637-t100409*t100465*t100628*(8.0/3.0);
            double t100639 = t100631-t100547;
            double t100640 = t100556*t100556;
            double t100641 = t100440*t100415*t100437*t100429*t100549;
            double t100642 = t100440*t100415*t100437*t100429*t100469;
            double t100643 = Aa*t100415*t100434*t100452*t100632*t100462*t100464*2.0;
            double t100644 = Aa*t100415*t100452*t100462*t100471*t100464*t100549*2.0;
            double t100645 = Aa*t100415*t100452*t100462*t100471*t100464*t100469*2.0;
            double t100646 = c0f*t100510*t100512*2.0;
            double t100648 = c0p*t100506*t100497*2.0;
            double t100647 = t100646-t100648;
            double t100649 = c0f*t100593*t100595*2.0;
            double t100651 = c0p*t100583*t100592*2.0;
            double t100650 = -t100651+t100649;
            double t100652 = gamma_aa[index]*gcab*t100598*(8.0/3.0);
            double t100653 = gamma_aa[index]*t100513*t100514*t100598*(8.0/3.0);
            double t100654 = t100652+t100653;
            double t100655 = gamma_bb[index]*gcab*t100516*(8.0/3.0);
            double t100656 = gamma_bb[index]*t100513*t100514*t100516*(8.0/3.0);
            double t100657 = t100655+t100656;
            double t100658 = gamma_aa[index]*gcab*t100598*(1.6E1/3.0);
            double t100659 = gamma_aa[index]*gcab*t100513*t100515*t100598*1.6E1;
            double t100660 = gamma_aa[index]*t100521*t100514*t100515*t100598*(1.6E1/3.0);
            double t100661 = gamma_aa[index]*t100513*t100514*t100598*1.6E1;
            double t100662 = t100660+t100661+t100658+t100659;
            double t100663 = gamma_bb[index]*gcab*t100516*(1.6E1/3.0);
            double t100664 = gamma_bb[index]*gcab*t100513*t100515*t100516*1.6E1;
            double t100665 = gamma_bb[index]*t100521*t100514*t100515*t100516*(1.6E1/3.0);
            double t100666 = gamma_bb[index]*t100513*t100514*t100516*1.6E1;
            double t100667 = t100663+t100664+t100665+t100666;
            double t100668 = gamma_aa[index]*gcab*t100598*4.0;
            double t100669 = gamma_aa[index]*gcab*t100513*t100515*t100598*4.0;
            double t100670 = gamma_aa[index]*t100513*t100514*t100598*8.0;
            double t100671 = t100670+t100668+t100669;
            double t100672 = gamma_bb[index]*gcab*t100516*4.0;
            double t100673 = gamma_bb[index]*gcab*t100513*t100515*t100516*4.0;
            double t100674 = gamma_bb[index]*t100513*t100514*t100516*8.0;
            double t100675 = t100672+t100673+t100674;
            v_rho_a_rho_b_[index] = (t100439+t100596+t100597+rho_a[index]*(-t100505+t100415*t100509*(t100505- \
               (t100512*1.0/(t100481*t100481)*(b2f*c*t100482*(1.0/3.0)+b4f*t100397*t100488*(2.0/3.0)+b1f*c*t100482* \
               t100489*(1.0/6.0)+b3f*c*t100482*t100474*(1.0/2.0)))/t100492+a1f*c*c0f*t100510*t100482*(2.0/3.0)-a1p* \
               c*c0p*t100506*t100482*(2.0/3.0))+a1p*c*c0p*t100506*t100482*(2.0/3.0))+t100390*(t100450+t100642+t100537+ \
               t100645+t100557-a1p*c*c0p*t100402*t100428*(2.0/3.0)-t100440*t100415*t100451*t100434*t100429*4.0-t100440* \
               t100415*t100434*t100607*t100437-Aa*t100415*t100434*t100452*t100462*t100464*(t100547-t100410*t100409* \
               t100437*4.0)*2.0-Aa*a1a*c*t100402*t100415*t100434*t100452*t100462*t100471*(2.0/3.0))-c0p*t100506*t100497* \
               2.0-t100415*t100509*t100647)*(ccab1*gamma_bb[index]*gcab*t100600*t100516*(4.0/3.0)-ccab4*t100601*t100521* \
               t100522*t100667-ccab2*t100602*t100513*t100515*t100657-ccab1*gamma_bb[index]*t100513*t100514*t100604* \
               t100516*(4.0/3.0)+ccab2*gamma_bb[index]*t100513*t100514*t100605*t100516*(8.0/3.0)+ccab3*gamma_bb[index]* \
               gcab*t100513*t100515*t100516*t100606*4.0+ccab4*gamma_bb[index]*t100521*t100603*t100514*t100515*t100516* \
               (1.6E1/3.0)-ccab3*gcab*t100513*t100514*t100515*t100675*t100599)+(ccab0+ccab1*gcab*t100600*t100514+ \
               ccab4*t100521*t100522*t100603+ccab2*t100513*t100515*t100605+ccab3*gcab*t100513*t100514*t100515*t100606) \
               *(t100641-t100642+t100643+t100644-t100645+t100390*(t100622+t100627+t100629-t100443*t100614*t100623* \
               t100408*2.0+t100440*t100415*t100437*t100469*(t100450-t100613-t100608+t100546)-a1p*c*c0p*t100428*t100609* \
               (8.0/9.0)-t100440*t100415*t100434*t100437*(t100622+t100627+t100629-t100443*t100614*t100623*t100408* \
               2.0+1.0/(t100421*t100421*t100421)*t100624*t100427*t100539*2.0-t100540*t100427*t100539*(b2f*c*t100609* \
               (4.0/9.0)+b4f*t100610*t100397*(1.0E1/9.0)+b1f*c*t100442*t100609*(2.0/9.0)+b3f*c*t100393*t100609*(2.0/ \
               3.0)-b1f*t100610*t100615*t100397*(1.0/3.6E1)+b3f*t100610*t100442*t100397*(1.0/1.2E1))-1.0/(t100421* \
               t100421*t100421*t100421)*1.0/(t100424*t100424)*t100416*t100624*t100427*(1.0/2.0)+a1f*c*c0f*t100425* \
               t100609*(8.0/9.0)-a1p*c*c0p*t100428*t100609*(8.0/9.0)-a1f*c*t100402*t100540*t100545*t100539*(2.0/3.0) \
               )-t100440*t100415*t100451*t100434*t100607*8.0-t100440*t100630*t100415*t100434*t100429*2.0E1+t100410* \
               t100415*t100434*t100437*t100429*1.2E1-t100440*t100415*t100451*t100429*t100549*4.0+t100440*t100415* \
               t100451*t100429*t100469*4.0-t100440*t100415*t100607*t100437*t100549+t100440*t100415*t100437*t100429* \
               t100638+t100410*t100415*t100409*t100437*t100429*t100549*4.0+t100410*t100415*t100409*t100437*t100429* \
               t100469*4.0+Aa*t100415*t100452*t100462*t100471*t100464*t100638*2.0+Aa*t100415*t100452*t100632*t100462* \
               t100464*t100469*2.0+Aa*t100415*t100452*t100462*t100464*t100549*t100639*2.0-Aa*t100415*t100434*t100452* \
               t100462*t100464*(t100440*t100630*2.0E1-t100410*t100437*1.2E1)*2.0+t100415*t100550*t100434*t100452* \
               t100551*t100632*t100464*t100556-t100415*t100550*t100434*t100452*t100551*t100464*t100556*t100639+t100415* \
               t100550*t100452*t100551*t100471*t100464*t100556*t100549-t100415*t100550*t100452*t100551*t100471*t100464* \
               t100556*t100469-t100415*t100550*t100640*t100434*t100452*t100471*t100464*1.0/(t100458*t100458*t100458) \
               *2.0+t100415*t100550*t100434*t100452*t100551*t100471*t100464*(b2a*c*t100609*(4.0/9.0)+b4a*t100610* \
               t100397*(1.0E1/9.0)+b1a*c*t100442*t100609*(2.0/9.0)+b3a*c*t100393*t100609*(2.0/3.0)-b1a*t100610*t100615* \
               t100397*(1.0/3.6E1)+b3a*t100610*t100442*t100397*(1.0/1.2E1))-Aa*a1a*c*t100402*t100415*t100434*t100452* \
               t100632*t100462*(2.0/3.0)+Aa*a1a*c*t100402*t100415*t100434*t100452*t100462*t100639*(2.0/3.0)-Aa*a1a* \
               c*t100402*t100415*t100452*t100462*t100471*t100549*(2.0/3.0)+Aa*a1a*c*t100402*t100415*t100452*t100462* \
               t100471*t100469*(2.0/3.0)-Aa*a1a*c*t100415*t100434*t100452*t100462*t100471*t100609*(8.0/9.0)+t100415* \
               t100640*t100434*t100452*1.0/(t100461*t100461)*t100453*t100471*t100464*1.0/(t100458*t100458*t100458* \
               t100458)*(1.0/2.0)+a1a*c*t100402*t100415*t100550*t100434*t100452*t100551*t100471*t100556*(2.0/3.0) \
               )-t100443*t100408*t100444*t100449*2.0+t100440*t100415*t100434*t100437*(t100450-t100613-t100608+t100546) \
               *2.0+a1p*c*c0p*t100402*t100428*(4.0/3.0)+t100440*t100415*t100451*t100434*t100429*8.0-Aa*t100415*t100434* \
               t100452*t100462*t100464*t100639*2.0-t100415*t100550*t100434*t100452*t100551*t100471*t100464*t100556* \
               2.0+Aa*a1a*c*t100402*t100415*t100434*t100452*t100462*t100471*(4.0/3.0))-(rho_b[index]*(t100651+t100415* \
               t100650*t100509)+rho_a[index]*(t100648+t100415*t100509*t100647)-t100390*(t100439+t100596+t100597)) \
               *(ccab4*t100601*t100521*t100522*(gamma_aa[index]*gamma_bb[index]*t100513*t100516*t100598*(6.4E1/3.0) \
               +gamma_aa[index]*gamma_bb[index]*t100521*t100515*t100516*t100598*(6.4E1/3.0)+gamma_aa[index]*gamma_bb[index]* \
               gcab*t100513*t100514*t100516*t100598*(1.28E2/3.0))-ccab2*t100513*1.0/(t100532*t100532*t100532)*t100515* \
               t100654*t100657*2.0-ccab4*t100521*t100522*1.0/(t100527*t100527*t100527)*t100662*t100667*2.0+ccab3* \
               gcab*t100513*t100514*t100515*t100599*(gamma_aa[index]*gamma_bb[index]*t100513*t100516*t100598*(3.2E1/ \
               3.0)+gamma_aa[index]*gamma_bb[index]*gcab*t100513*t100514*t100516*t100598*(3.2E1/3.0))+ccab1*gamma_aa[index]* \
               gamma_bb[index]*t100513*t100604*t100516*t100598*(3.2E1/9.0)-ccab2*gamma_aa[index]*gamma_bb[index]* \
               t100513*t100605*t100516*t100598*(3.2E1/9.0)+ccab2*gamma_bb[index]*t100602*t100513*t100514*t100516* \
               t100654*(8.0/3.0)+ccab2*gamma_aa[index]*t100602*t100513*t100514*t100657*t100598*(8.0/3.0)-ccab3*gcab* \
               t100513*t100514*t100515*1.0/(t100536*t100536*t100536)*t100671*t100675*2.0+ccab2*gamma_aa[index]*gamma_bb[index]* \
               t100521*t100602*t100515*t100516*t100598*(3.2E1/9.0)-ccab4*gamma_aa[index]*gamma_bb[index]*t100521* \
               t100603*t100515*t100516*t100598*(6.4E1/3.0)+ccab3*gamma_bb[index]*gcab*t100513*t100515*t100516*t100671* \
               t100599*4.0+ccab3*gamma_aa[index]*gcab*t100513*t100515*t100675*t100598*t100599*4.0+ccab4*gamma_bb[index]* \
               t100601*t100521*t100514*t100515*t100516*t100662*(1.6E1/3.0)+ccab4*gamma_aa[index]*t100601*t100521* \
               t100514*t100515*t100667*t100598*(1.6E1/3.0)-ccab3*gamma_aa[index]*gamma_bb[index]*gcab*t100513*t100514* \
               t100516*t100606*t100598*(3.2E1/3.0)-ccab1*gamma_aa[index]*gamma_bb[index]*gcab*t100513*t100514*t100516* \
               1.0/(t100529*t100529*t100529)*t100598*(3.2E1/9.0))+(t100439+t100596+t100597-t100390*(-t100450+t100641+ \
               t100643+t100608+t100644+t100537-t100557+t100440*t100415*t100451*t100434*t100429*4.0+t100440*t100415* \
               t100434*t100607*t100437+Aa*a1a*c*t100402*t100415*t100434*t100452*t100462*t100471*(2.0/3.0))+rho_b[index]* \
               (-t100591+t100415*t100509*(t100591-(1.0/(t100567*t100567)*t100595*(b2f*c*t100568*(1.0/3.0)+b4f*t100574* \
               t100397*(2.0/3.0)+b1f*c*t100575*t100568*(1.0/6.0)+b3f*c*t100560*t100568*(1.0/2.0)))/t100578+a1f*c* \
               c0f*t100593*t100568*(2.0/3.0)-a1p*c*c0p*t100592*t100568*(2.0/3.0))+a1p*c*c0p*t100592*t100568*(2.0/ \
               3.0))-c0p*t100583*t100592*2.0-t100415*t100650*t100509)*(ccab1*gamma_aa[index]*gcab*t100600*t100598* \
               (4.0/3.0)-ccab4*t100601*t100521*t100522*t100662-ccab2*t100602*t100513*t100515*t100654-ccab1*gamma_aa[index]* \
               t100513*t100514*t100604*t100598*(4.0/3.0)+ccab2*gamma_aa[index]*t100513*t100514*t100605*t100598*(8.0/ \
               3.0)+ccab3*gamma_aa[index]*gcab*t100513*t100515*t100606*t100598*4.0+ccab4*gamma_aa[index]*t100521* \
               t100603*t100514*t100515*t100598*(1.6E1/3.0)-ccab3*gcab*t100513*t100514*t100515*t100671*t100599);
        } else if (rho_a[index] > cutoff_) {
            v_rho_a_rho_b_[index] = 0.0;
        } else if (rho_b[index] > cutoff_) {
            v_rho_a_rho_b_[index] = 0.0;
        } else {
            v_rho_a_rho_b_[index] = 0.0;
        }

        //V_rho_b_rho_b
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t100677 = rho_a[index]+rho_b[index];
            double t100678 = 1.0/pow(t100677,1.0/3.0);
            double t100679 = c*t100678;
            double t100680 = sqrt(t100679);
            double t100681 = b1p*t100680;
            double t100682 = pow(t100679,3.0/2.0);
            double t100683 = b3p*t100682;
            double t100684 = c*c;
            double t100685 = 1.0/pow(t100677,2.0/3.0);
            double t100686 = b4p*t100684*t100685;
            double t100687 = b2p*c*t100678;
            double t100688 = t100681+t100683+t100686+t100687;
            double t100689 = 1.0/pow(t100677,4.0/3.0);
            double t100690 = 1.0/c0p;
            double t100691 = 1.0/t100688;
            double t100692 = t100690*t100691*(1.0/2.0);
            double t100693 = t100692+1.0;
            double t100694 = a1p*c*t100678;
            double t100695 = t100694+1.0;
            double t100696 = rho_a[index]-rho_b[index];
            double t100697 = t100696*t100696;
            double t100698 = 1.0/t100677;
            double t100699 = t100696*t100698;
            double t100700 = two_13*2.0;
            double t100701 = t100700-2.0;
            double t100702 = 1.0/t100701;
            double t100703 = 1.0/c0f;
            double t100704 = b1f*t100680;
            double t100705 = b3f*t100682;
            double t100706 = b4f*t100684*t100685;
            double t100707 = b2f*c*t100678;
            double t100708 = t100704+t100705+t100706+t100707;
            double t100709 = 1.0/t100708;
            double t100710 = t100703*t100709*(1.0/2.0);
            double t100711 = t100710+1.0;
            double t100712 = log(t100711);
            double t100713 = a1f*c*t100678;
            double t100714 = t100713+1.0;
            double t100715 = log(t100693);
            double t100726 = c0f*t100712*t100714*2.0;
            double t100727 = c0p*t100715*t100695*2.0;
            double t100716 = t100726-t100727;
            double t100717 = t100699+1.0;
            double t100718 = pow(t100717,4.0/3.0);
            double t100719 = -t100699+1.0;
            double t100720 = pow(t100719,4.0/3.0);
            double t100721 = t100720+t100718-2.0;
            double t100722 = 1.0/(t100677*t100677);
            double t100723 = t100722*t100696;
            double t100724 = t100723+t100698;
            double t100725 = 1.0/(t100677*t100677*t100677*t100677);
            double t100728 = t100697*t100697;
            double t100729 = 1.0/pow(t100677,5.0/3.0);
            double t100730 = 1.0/sqrt(t100679);
            double t100731 = 1.0/t100693;
            double t100732 = 1.0/(t100688*t100688);
            double t100733 = b4p*t100684*t100729*(2.0/3.0);
            double t100734 = b2p*c*t100689*(1.0/3.0);
            double t100735 = b1p*c*t100730*t100689*(1.0/6.0);
            double t100736 = b3p*c*t100680*t100689*(1.0/2.0);
            double t100737 = t100733+t100734+t100735+t100736;
            double t100738 = 1.0/(t100677*t100677*t100677*t100677*t100677);
            double t100739 = 1.0/d2fz0;
            double t100740 = 1.0/Aa;
            double t100741 = b1a*t100680;
            double t100742 = b3a*t100682;
            double t100743 = b4a*t100684*t100685;
            double t100744 = b2a*c*t100678;
            double t100745 = t100741+t100742+t100743+t100744;
            double t100746 = 1.0/t100745;
            double t100747 = t100740*t100746*(1.0/2.0);
            double t100748 = t100747+1.0;
            double t100749 = log(t100748);
            double t100750 = a1a*c*t100678;
            double t100751 = t100750+1.0;
            double t100752 = pow(t100717,1.0/3.0);
            double t100753 = t100724*t100752*(4.0/3.0);
            double t100754 = pow(t100719,1.0/3.0);
            double t100830 = t100724*t100754*(4.0/3.0);
            double t100755 = -t100830+t100753;
            double t100756 = t100725*t100728;
            double t100757 = t100756-1.0;
            double t100758 = 1.0/pow(rho_b[index],1.0/3.0);
            double t100759 = c*t100758;
            double t100760 = sqrt(t100759);
            double t100761 = b1f*t100760;
            double t100762 = pow(t100759,3.0/2.0);
            double t100763 = b3f*t100762;
            double t100764 = 1.0/pow(rho_b[index],2.0/3.0);
            double t100765 = b4f*t100764*t100684;
            double t100766 = b2f*c*t100758;
            double t100767 = t100761+t100763+t100765+t100766;
            double t100768 = 1.0/pow(rho_b[index],4.0/3.0);
            double t100769 = b1p*t100760;
            double t100770 = b3p*t100762;
            double t100771 = b4p*t100764*t100684;
            double t100772 = b2p*c*t100758;
            double t100773 = t100770+t100771+t100772+t100769;
            double t100774 = 1.0/pow(rho_b[index],5.0/3.0);
            double t100775 = 1.0/sqrt(t100759);
            double t100776 = 1.0/t100767;
            double t100777 = t100703*t100776*(1.0/2.0);
            double t100778 = t100777+1.0;
            double t100779 = 1.0/t100773;
            double t100780 = t100690*t100779*(1.0/2.0);
            double t100781 = t100780+1.0;
            double t100782 = a1p*c*t100758;
            double t100783 = t100782+1.0;
            double t100784 = 1.0/t100781;
            double t100785 = 1.0/(t100773*t100773);
            double t100786 = b4p*t100684*t100774*(2.0/3.0);
            double t100787 = b2p*c*t100768*(1.0/3.0);
            double t100788 = b1p*c*t100775*t100768*(1.0/6.0);
            double t100789 = b3p*c*t100760*t100768*(1.0/2.0);
            double t100790 = t100786+t100787+t100788+t100789;
            double t100791 = t100790*t100783*t100784*t100785;
            double t100792 = log(t100781);
            double t100793 = pow(2.0,1.0/3.0);
            double t100794 = t100793*2.0;
            double t100795 = t100794-2.0;
            double t100796 = log(t100778);
            double t100797 = a1f*c*t100758;
            double t100798 = t100797+1.0;
            double t100799 = gcab*gcab;
            double t100803 = 1.0/pow(rho_a[index],8.0/3.0);
            double t100804 = gamma_aa[index]*t100803*(1.0/2.0);
            double t100805 = 1.0/pow(rho_b[index],8.0/3.0);
            double t100806 = gamma_bb[index]*t100805*(1.0/2.0);
            double t100800 = t100804+t100806;
            double t100801 = t100800*t100800;
            double t100802 = 1.0/pow(rho_b[index],1.1E1/3.0);
            double t100807 = t100799*t100799;
            double t100808 = t100801*t100801;
            double t100809 = t100801*t100799*6.0;
            double t100810 = gcab*t100800*t100801*t100799*4.0;
            double t100811 = t100807*t100808;
            double t100812 = gcab*t100800*4.0;
            double t100813 = t100810+t100811+t100812+t100809+1.0;
            double t100814 = gcab*t100800;
            double t100815 = t100814+1.0;
            double t100816 = t100801*t100799;
            double t100817 = gcab*t100800*2.0;
            double t100818 = t100816+t100817+1.0;
            double t100819 = t100801*t100799*3.0;
            double t100820 = gcab*t100800*t100801*t100799;
            double t100821 = gcab*t100800*3.0;
            double t100822 = t100820+t100821+t100819+1.0;
            double t100823 = a1p*c*c0p*t100715*t100689*(2.0/3.0);
            double t100824 = 1.0/t100818;
            double t100825 = 1.0/t100822;
            double t100826 = 1.0/t100815;
            double t100827 = 1.0/t100813;
            double t100828 = 1.0/pow(t100677,7.0/3.0);
            double t100829 = 1.0/pow(t100677,8.0/3.0);
            double t100831 = 1.0/t100711;
            double t100832 = 1.0/(t100708*t100708);
            double t100833 = b4f*t100684*t100729*(2.0/3.0);
            double t100834 = b2f*c*t100689*(1.0/3.0);
            double t100835 = b1f*c*t100730*t100689*(1.0/6.0);
            double t100836 = b3f*c*t100680*t100689*(1.0/2.0);
            double t100837 = t100833+t100834+t100835+t100836;
            double t100838 = t100714*t100831*t100832*t100837;
            double t100840 = t100731*t100732*t100737*t100695;
            double t100841 = a1f*c*c0f*t100712*t100689*(2.0/3.0);
            double t100839 = -t100840+t100823-t100841+t100838;
            double t100842 = t100737*t100737;
            double t100843 = 1.0/pow(t100679,3.0/2.0);
            double t100844 = b4p*t100684*t100829*(1.0E1/9.0);
            double t100845 = b2p*c*t100828*(4.0/9.0);
            double t100846 = b1p*c*t100730*t100828*(2.0/9.0);
            double t100847 = b3p*c*t100680*t100828*(2.0/3.0);
            double t100848 = b3p*t100730*t100684*t100829*(1.0/1.2E1);
            double t100849 = t100844+t100845+t100846+t100847+t100848-b1p*t100843*t100684*t100829*(1.0/3.6E1);
            double t100850 = 1.0/(t100688*t100688*t100688);
            double t100851 = t100731*t100850*t100842*t100695*2.0;
            double t100852 = t100837*t100837;
            double t100853 = 1.0/(t100693*t100693);
            double t100854 = 1.0/(t100688*t100688*t100688*t100688);
            double t100855 = t100722*2.0;
            double t100856 = 1.0/(t100677*t100677*t100677);
            double t100857 = t100856*t100696*2.0;
            double t100858 = t100855+t100857;
            double t100859 = t100724*t100724;
            double t100860 = a1p*c*c0p*t100715*t100828*(8.0/9.0);
            double t100861 = 1.0/(t100677*t100677*t100677*t100677*t100677*t100677);
            double t100862 = t100725*t100696*t100697*4.0;
            double t100863 = t100728*t100738*4.0;
            double t100864 = t100862+t100863;
            double t100865 = t100752*t100858*(4.0/3.0);
            double t100866 = 1.0/pow(t100717,2.0/3.0);
            double t100867 = t100866*t100859*(4.0/9.0);
            double t100868 = 1.0/pow(t100719,2.0/3.0);
            double t100869 = t100859*t100868*(4.0/9.0);
            double t100870 = t100865+t100867+t100869-t100754*t100858*(4.0/3.0);
            double t100871 = 1.0/t100748;
            double t100872 = 1.0/(t100745*t100745);
            double t100873 = b4a*t100684*t100729*(2.0/3.0);
            double t100874 = b2a*c*t100689*(1.0/3.0);
            double t100875 = b1a*c*t100730*t100689*(1.0/6.0);
            double t100876 = b3a*c*t100680*t100689*(1.0/2.0);
            double t100877 = t100873+t100874+t100875+t100876;
            double t100878 = t100877*t100877;
            double t100879 = 1.0/t100778;
            double t100880 = b4f*t100684*t100774*(2.0/3.0);
            double t100881 = b2f*c*t100768*(1.0/3.0);
            double t100882 = b1f*c*t100775*t100768*(1.0/6.0);
            double t100883 = b3f*c*t100760*t100768*(1.0/2.0);
            double t100884 = t100880+t100881+t100882+t100883;
            double t100885 = 1.0/(t100767*t100767);
            double t100886 = 1.0/pow(rho_b[index],7.0/3.0);
            double t100887 = 1.0/pow(t100759,3.0/2.0);
            double t100888 = t100884*t100884;
            double t100889 = t100790*t100790;
            double t100890 = 1.0/(t100773*t100773*t100773);
            double t100891 = t100890*t100783*t100784*t100889*2.0;
            double t100892 = b4p*t100805*t100684*(1.0E1/9.0);
            double t100893 = b2p*c*t100886*(4.0/9.0);
            double t100894 = b3p*t100805*t100684*t100775*(1.0/1.2E1);
            double t100895 = b1p*c*t100775*t100886*(2.0/9.0);
            double t100896 = b3p*c*t100760*t100886*(2.0/3.0);
            double t101013 = b1p*t100805*t100684*t100887*(1.0/3.6E1);
            double t100897 = -t101013+t100892+t100893+t100894+t100895+t100896;
            double t100898 = 1.0/(t100781*t100781);
            double t100899 = 1.0/(t100773*t100773*t100773*t100773);
            double t100900 = a1p*c*c0p*t100792*t100886*(8.0/9.0);
            double t100901 = a1f*c*c0f*t100768*t100796*(2.0/3.0);
            double t100902 = a1p*c*c0p*t100792*t100768*(2.0/3.0);
            double t100974 = t100884*t100885*t100798*t100879;
            double t100903 = t100901-t100902+t100791-t100974;
            double t100904 = gamma_bb[index]*gamma_bb[index];
            double t100905 = gcaa*gcaa;
            double t100906 = t100904*t100904;
            double t100907 = t100905*t100905;
            double t100908 = 1.0/pow(rho_b[index],3.2E1/3.0);
            double t100909 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
               rho_b[index]*rho_b[index]);
            double t100910 = 1.0/pow(rho_b[index],1.6E1/3.0);
            double t100911 = 1.0/pow(rho_a[index],1.0/3.0);
            double t100912 = c*t100911;
            double t100913 = sqrt(t100912);
            double t100914 = pow(t100912,3.0/2.0);
            double t100915 = 1.0/pow(rho_a[index],2.0/3.0);
            double t100916 = b1p*t100913;
            double t100917 = b3p*t100914;
            double t100918 = b4p*t100915*t100684;
            double t100919 = b2p*c*t100911;
            double t100920 = t100916+t100917+t100918+t100919;
            double t100921 = 1.0/t100920;
            double t100922 = t100921*t100690*(1.0/2.0);
            double t100923 = t100922+1.0;
            double t100924 = log(t100923);
            double t100925 = a1p*c*t100911;
            double t100926 = t100925+1.0;
            double t100927 = c0p*t100924*t100926*2.0;
            double t100928 = c0f*t100796*t100798*2.0;
            double t100930 = c0p*t100783*t100792*2.0;
            double t100929 = -t100930+t100928;
            double t100931 = t100702*t100721*t100716*t100725*t100728;
            double t100932 = Aa*t100702*t100721*t100751*t100739*t100757*t100749*2.0;
            double t100933 = gamma_bb[index]*gcab*t100802*(1.6E1/3.0);
            double t100934 = gamma_bb[index]*gcab*t100801*t100802*t100799*1.6E1;
            double t100935 = gamma_bb[index]*t100800*t100801*t100802*t100807*(1.6E1/3.0);
            double t100936 = gamma_bb[index]*t100800*t100802*t100799*1.6E1;
            double t100937 = t100933+t100934+t100935+t100936;
            double t100938 = 1.0/(t100815*t100815);
            double t100939 = 1.0/pow(rho_b[index],2.2E1/3.0);
            double t100940 = gamma_bb[index]*gcab*t100802*(8.0/3.0);
            double t100941 = gamma_bb[index]*t100800*t100802*t100799*(8.0/3.0);
            double t100942 = t100940+t100941;
            double t100943 = 1.0/(t100822*t100822);
            double t100944 = 1.0/pow(rho_b[index],1.4E1/3.0);
            double t100945 = 1.0/(t100813*t100813);
            double t100946 = 1.0/(t100818*t100818);
            double t100947 = gamma_bb[index]*gcab*t100802*4.0;
            double t100948 = gamma_bb[index]*gcab*t100801*t100802*t100799*4.0;
            double t100949 = gamma_bb[index]*t100800*t100802*t100799*8.0;
            double t100950 = t100947+t100948+t100949;
            double t100951 = t100702*t100929*t100795;
            double t100952 = t100930+t100951;
            double t100953 = gamma_bb[index]*gcaa*t100805*4.0;
            double t100954 = gamma_bb[index]*gcaa*t100904*t100905*t100909*4.0;
            double t100955 = t100910*t100904*t100905*6.0;
            double t100956 = t100906*t100907*t100908;
            double t100957 = t100953+t100954+t100955+t100956+1.0;
            double t100958 = 1.0/t100957;
            double t100959 = gamma_bb[index]*gcaa*t100805;
            double t100960 = t100959+1.0;
            double t100961 = 1.0/t100960;
            double t100962 = gamma_bb[index]*gcaa*t100805*3.0;
            double t100963 = gamma_bb[index]*gcaa*t100904*t100905*t100909;
            double t100964 = t100910*t100904*t100905*3.0;
            double t100965 = t100962+t100963+t100964+1.0;
            double t100966 = 1.0/t100965;
            double t100967 = gamma_bb[index]*gcaa*t100805*2.0;
            double t100968 = t100910*t100904*t100905;
            double t100969 = t100967+t100968+1.0;
            double t100970 = 1.0/t100969;
            double t100971 = 1.0/pow(rho_b[index],1.9E1/3.0);
            double t100972 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
               rho_b[index]*rho_b[index]*rho_b[index]);
            double t100973 = 1.0/pow(rho_b[index],3.5E1/3.0);
            double t100975 = t100702*t100903*t100795;
            double t100976 = ccaa4*t100906*t100907*t100973*t100958*(3.2E1/3.0);
            double t100977 = ccaa1*gamma_bb[index]*gcaa*t100802*t100961*(8.0/3.0);
            double t100978 = ccaa3*gamma_bb[index]*gcaa*t100904*t100905*t100972*t100966*8.0;
            double t100979 = ccaa2*t100904*t100905*t100970*t100971*(1.6E1/3.0);
            double t100980 = 1.0/(t100960*t100960);
            double t100981 = gamma_bb[index]*gcaa*t100802*8.0;
            double t100982 = gamma_bb[index]*gcaa*t100904*t100905*t100972*8.0;
            double t100983 = t100904*t100905*t100971*1.6E1;
            double t100984 = t100981+t100982+t100983;
            double t100985 = 1.0/(t100965*t100965);
            double t100986 = gamma_bb[index]*gcaa*t100802*(3.2E1/3.0);
            double t100987 = gamma_bb[index]*gcaa*t100904*t100905*t100972*3.2E1;
            double t100988 = t100904*t100905*t100971*3.2E1;
            double t100989 = t100906*t100907*t100973*(3.2E1/3.0);
            double t100990 = t100986+t100987+t100988+t100989;
            double t100991 = 1.0/(t100957*t100957);
            double t100992 = gamma_bb[index]*gcaa*t100802*(1.6E1/3.0);
            double t100993 = t100904*t100905*t100971*(1.6E1/3.0);
            double t100994 = t100992+t100993;
            double t100995 = 1.0/(t100969*t100969);
            double t100996 = t100976+t100977+t100978+t100979-ccaa1*t100904*t100905*t100971*t100980*(8.0/3.0)- \
               ccaa2*t100910*t100904*t100905*t100994*t100995-ccaa4*t100906*t100907*t100908*t100990*t100991-ccaa3* \
               gamma_bb[index]*gcaa*t100904*t100905*t100909*t100984*t100985;
            double t100997 = t100902-t100791+t100975;
            double t100998 = 1.0/pow(rho_b[index],1.0E1);
            double t100999 = 1.0/pow(rho_b[index],3.8E1/3.0);
            double t101000 = ccaa4*t100906*t100907*t100908*t100958;
            double t101001 = ccaa1*gamma_bb[index]*gcaa*t100805*t100961;
            double t101002 = ccaa3*gamma_bb[index]*gcaa*t100904*t100905*t100909*t100966;
            double t101003 = ccaa2*t100910*t100904*t100905*t100970;
            double t101004 = ccaa0+t101000+t101001+t101002+t101003;
            double t101005 = 1.0/(t100767*t100767*t100767);
            double t101006 = b4f*t100805*t100684*(1.0E1/9.0);
            double t101007 = b2f*c*t100886*(4.0/9.0);
            double t101008 = b3f*t100805*t100684*t100775*(1.0/1.2E1);
            double t101009 = b1f*c*t100775*t100886*(2.0/9.0);
            double t101010 = b3f*c*t100760*t100886*(2.0/3.0);
            double t101011 = t101010+t101006+t101007+t101008+t101009-b1f*t100805*t100684*t100887*(1.0/3.6E1);
            double t101012 = t101011*t100885*t100798*t100879;
            double t101014 = t100783*t100784*t100785*t100897;
            double t101015 = 1.0/(t100778*t100778);
            double t101016 = 1.0/(t100767*t100767*t100767*t100767);
            double t101017 = t101015*t101016*t100703*t100798*t100888*(1.0/2.0);
            double t101018 = t100690*t100783*t100889*t100898*t100899*(1.0/2.0);
            double t101019 = a1f*c*t100884*t100768*t100885*t100879*(2.0/3.0);
            double t101020 = a1p*c*t100790*t100784*t100785*t100768*(2.0/3.0);
            double t101021 = rho_b[index]*(8.334140006820045E15/1.40737488355328E14);
            double t101022 = omega*omega;
            double t101023 = 1.0/rho_b[index];
            double t101024 = omega*t101022*t101023*(7.0368744177664E13/8.334140006820045E15);
            double t101025 = 1.0/pow(t101021,1.0/3.0);
            double t101026 = gx*gx;
            double t101027 = t101026*t101026;
            double t101028 = gamma_bb[index]*gx*t100805;
            double t101029 = t101028+1.0;
            double t101049 = gamma_bb[index]*gx*t100802*(3.2E1/3.0);
            double t101050 = gamma_bb[index]*gx*t101026*t100904*t100972*3.2E1;
            double t101051 = t101026*t100904*t100971*3.2E1;
            double t101052 = t101027*t100906*t100973*(3.2E1/3.0);
            double t101030 = t101050+t101051+t101052+t101049;
            double t101031 = gamma_bb[index]*gx*t100805*4.0;
            double t101032 = gamma_bb[index]*gx*t101026*t100904*t100909*4.0;
            double t101033 = t101026*t100910*t100904*6.0;
            double t101034 = t101027*t100906*t100908;
            double t101035 = t101031+t101032+t101033+t101034+1.0;
            double t101054 = gamma_bb[index]*gx*t100802*(1.6E1/3.0);
            double t101055 = t101026*t100904*t100971*(1.6E1/3.0);
            double t101036 = t101054+t101055;
            double t101037 = gamma_bb[index]*gx*t100805*2.0;
            double t101038 = t101026*t100910*t100904;
            double t101039 = t101037+t101038+1.0;
            double t101040 = gamma_bb[index]*gx*t100805*3.0;
            double t101041 = gamma_bb[index]*gx*t101026*t100904*t100909;
            double t101042 = t101026*t100910*t100904*3.0;
            double t101043 = t101040+t101041+t101042+1.0;
            double t101044 = 1.0/(t101043*t101043);
            double t101045 = gamma_bb[index]*gx*t100802*8.0;
            double t101046 = gamma_bb[index]*gx*t101026*t100904*t100972*8.0;
            double t101047 = t101026*t100904*t100971*1.6E1;
            double t101048 = t101045+t101046+t101047;
            double t101053 = 1.0/(t101035*t101035);
            double t101056 = 1.0/(t101039*t101039);
            double t101057 = 1.0/(omega*omega);
            double t101058 = pow(t101021,2.0/3.0);
            double t101063 = t101057*t101058;
            double t101059 = exp(-t101063);
            double t101060 = 1.0/(rho_b[index]*rho_b[index]);
            double t101061 = 1.0/pow(t101021,4.0/3.0);
            double t101062 = 1.0/omega;
            double t101069 = omega*t101025;
            double t101064 = t101024-t101069;
            double t101065 = pow(t101021,1.0/3.0);
            double t101066 = t101062*t101065;
            double t101067 = erf(t101066);
            double t101068 = t101067*(3.991211251234741E15/2.251799813685248E15);
            double t101075 = t101064*t101059;
            double t101076 = omega*t101025*(3.0/2.0);
            double t101070 = t101024-t101075-t101076+t101068;
            double t101071 = 1.0/t101035;
            double t101072 = 1.0/t101029;
            double t101073 = 1.0/t101043;
            double t101074 = 1.0/t101039;
            double t101077 = omega*t101025*t101070*(4.0/3.0);
            double t101078 = t101077-1.0;
            double t101079 = cx4*t101071*t101027*t100906*t100908;
            double t101080 = cx1*gamma_bb[index]*gx*t101072*t100805;
            double t101081 = cx3*gamma_bb[index]*gx*t101026*t101073*t100904*t100909;
            double t101082 = cx2*t101026*t100910*t101074*t100904;
            double t101083 = cx0+t101080+t101081+t101082+t101079;
            double t101084 = pow(rho_b[index],4.0/3.0);
            double t101085 = omega*t101061*(8.334140006820045E15/2.81474976710656E14);
            double t101086 = omega*t101061*(2.778046668940015E15/1.40737488355328E14);
            double t101102 = omega*t101022*t101060*(7.0368744177664E13/8.334140006820045E15);
            double t101087 = -t101102+t101086;
            double t101088 = 1.0/sqrt(3.141592653589793);
            double t101089 = 1.0/pow(t101021,2.0/3.0);
            double t101090 = t101062*t101059*t101088*t101089*(1.108777112152858E31/1.584563250285287E29);
            double t101091 = t101025*t101064*t101057*t101059*(2.778046668940015E15/7.0368744177664E13);
            double t101092 = t101090+t101091+t101085-t101059*t101087-omega*t101022*t101060*(7.0368744177664E13/ \
               8.334140006820045E15);
            double t101093 = omega*t101061*t101070*(2.778046668940015E15/1.05553116266496E14);
            double t101094 = 1.0/(t101029*t101029);
            double t101095 = t101093-omega*t101025*t101092*(4.0/3.0);
            double t101096 = pow(rho_b[index],1.0/3.0);
            double t101097 = cx4*t101071*t101027*t100906*t100973*(3.2E1/3.0);
            double t101098 = cx1*gamma_bb[index]*gx*t100802*t101072*(8.0/3.0);
            double t101099 = cx3*gamma_bb[index]*gx*t101026*t101073*t100904*t100972*8.0;
            double t101100 = cx2*t101026*t101074*t100904*t100971*(1.6E1/3.0);
            double t101101 = t101100+t101097+t101098+t101099-cx1*t101026*t100904*t101094*t100971*(8.0/3.0)-cx2* \
               t101026*t100910*t101036*t101056*t100904-cx4*t101030*t101053*t101027*t100906*t100908-cx3*gamma_bb[index]* \
               gx*t101026*t101044*t100904*t101048*t100909;
            double t101103 = 1.0/pow(t101021,7.0/3.0);
            double t101104 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]);
            double t101105 = t101102-t101086;
            v_rho_b_rho_b_[index] = (ccab0+ccab1*gcab*t100800*t100826+ccab2*t100801*t100824*t100799+ccab4*t100807* \
               t100808*t100827+ccab3*gcab*t100800*t100801*t100825*t100799)*(-rho_b[index]*(t101020+t101014-t100900+ \
               t101018-t100891+t100702*t100795*(t101012+t100900+t101017+t101019+t100891-t101005*t100798*t100879*t100888* \
               2.0-t100783*t100784*t100785*t100897-a1f*c*c0f*t100796*t100886*(8.0/9.0)-t100690*t100783*t100889*t100898* \
               t100899*(1.0/2.0)-a1p*c*t100790*t100784*t100785*t100768*(2.0/3.0)))-t100677*(t100851+t100860-t100731* \
               t100732*t100695*t100849-t100702*t100721*t100725*t100728*(t100851+t100860-t100731*t100732*t100695*t100849- \
               t100714*t100831*1.0/(t100708*t100708*t100708)*t100852*2.0+t100714*t100831*t100832*(b2f*c*t100828*(4.0/ \
               9.0)+b4f*t100684*t100829*(1.0E1/9.0)+b1f*c*t100730*t100828*(2.0/9.0)+b3f*c*t100680*t100828*(2.0/3.0) \
               -b1f*t100843*t100684*t100829*(1.0/3.6E1)+b3f*t100730*t100684*t100829*(1.0/1.2E1))+1.0/(t100711*t100711) \
               *t100703*t100714*1.0/(t100708*t100708*t100708*t100708)*t100852*(1.0/2.0)-a1f*c*c0f*t100712*t100828* \
               (8.0/9.0)-t100842*t100690*t100853*t100854*t100695*(1.0/2.0)+a1f*c*t100831*t100832*t100837*t100689* \
               (2.0/3.0)-a1p*c*t100731*t100732*t100737*t100689*(2.0/3.0))+t100702*t100721*t100716*t100861*t100728* \
               2.0E1+t100702*t100721*t100716*t100725*t100697*1.2E1+t100702*t100716*t100725*t100870*t100728-t100702* \
               t100721*t100728*t100738*t100839*8.0+t100702*t100716*t100728*t100755*t100738*8.0-t100702*t100725*t100728* \
               t100755*t100839*2.0-t100842*t100690*t100853*t100854*t100695*(1.0/2.0)+t100702*t100721*t100716*t100738* \
               t100696*t100697*3.2E1-t100702*t100721*t100725*t100839*t100696*t100697*8.0+t100702*t100716*t100725* \
               t100755*t100696*t100697*8.0-a1p*c*t100731*t100732*t100737*t100689*(2.0/3.0)+Aa*t100702*t100751*t100870* \
               t100739*t100757*t100749*2.0+Aa*t100702*t100751*t100755*t100864*t100739*t100749*4.0+Aa*t100702*t100721* \
               t100751*t100739*t100749*(t100861*t100728*2.0E1+t100725*t100697*1.2E1+t100738*t100696*t100697*3.2E1) \
               *2.0-t100702*t100721*t100751*t100871*t100872*t100864*t100739*t100877*2.0-t100702*t100751*t100871*t100755* \
               t100872*t100739*t100757*t100877*2.0+t100702*t100721*t100751*1.0/(t100745*t100745*t100745)*t100871* \
               t100739*t100757*t100878*2.0-t100702*t100721*t100751*t100871*t100872*t100739*t100757*(b2a*c*t100828* \
               (4.0/9.0)+b4a*t100684*t100829*(1.0E1/9.0)+b1a*c*t100730*t100828*(2.0/9.0)+b3a*c*t100680*t100828*(2.0/ \
               3.0)-b1a*t100843*t100684*t100829*(1.0/3.6E1)+b3a*t100730*t100684*t100829*(1.0/1.2E1))+Aa*a1a*c*t100702* \
               t100721*t100828*t100739*t100757*t100749*(8.0/9.0)+Aa*a1a*c*t100702*t100721*t100864*t100739*t100749* \
               t100689*(4.0/3.0)+Aa*a1a*c*t100702*t100755*t100739*t100757*t100749*t100689*(4.0/3.0)-t100702*t100721* \
               t100740*t100751*1.0/(t100745*t100745*t100745*t100745)*t100739*1.0/(t100748*t100748)*t100757*t100878* \
               (1.0/2.0)-a1a*c*t100702*t100721*t100871*t100872*t100739*t100757*t100877*t100689*(2.0/3.0))-t100702* \
               t100903*t100795*2.0-t100731*t100732*t100737*t100695*2.0+t100790*t100783*t100784*t100785*2.0+a1p*c* \
               c0p*t100715*t100689*(4.0/3.0)-a1p*c*c0p*t100792*t100768*(4.0/3.0)+t100702*t100721*t100716*t100728* \
               t100738*8.0-t100702*t100721*t100725*t100728*t100839*2.0+t100702*t100716*t100725*t100728*t100755*2.0+ \
               t100702*t100721*t100716*t100725*t100696*t100697*8.0+Aa*t100702*t100721*t100751*t100864*t100739*t100749* \
               4.0+Aa*t100702*t100751*t100755*t100739*t100757*t100749*4.0-t100702*t100721*t100751*t100871*t100872* \
               t100739*t100757*t100877*2.0+Aa*a1a*c*t100702*t100721*t100739*t100757*t100749*t100689*(4.0/3.0))+(rho_b[index]* \
               t100952+rho_a[index]*(t100927-t100702*t100795*(t100927-c0f*log((t100703*(1.0/2.0))/(b1f*t100913+b3f* \
               t100914+b2f*c*t100911+b4f*t100915*t100684)+1.0)*(a1f*c*t100911+1.0)*2.0))-t100677*(t100931+t100932+ \
               t100727))*(-ccab2*t100801*t100946*t100799*(gamma_bb[index]*gcab*t100944*(8.8E1/9.0)+t100904*t100939* \
               t100799*(3.2E1/9.0)+gamma_bb[index]*t100800*t100944*t100799*(8.8E1/9.0))+ccab4*1.0/(t100813*t100813* \
               t100813)*t100807*t100808*(t100937*t100937)*2.0+ccab2*t100801*(t100942*t100942)*1.0/(t100818*t100818* \
               t100818)*t100799*2.0+ccab1*gamma_bb[index]*gcab*t100826*t100944*(4.4E1/9.0)+ccab2*t100904*t100824* \
               t100939*t100799*(3.2E1/9.0)-ccab1*t100904*t100938*t100939*t100799*(3.2E1/9.0)-ccab4*t100807*t100808* \
               t100945*(gamma_bb[index]*gcab*t100944*(1.76E2/9.0)+t100904*t100939*t100799*(6.4E1/3.0)+gamma_bb[index]* \
               t100800*t100944*t100799*(1.76E2/3.0)+t100801*t100904*t100807*t100939*(6.4E1/3.0)+gamma_bb[index]*gcab* \
               t100801*t100944*t100799*(1.76E2/3.0)+gamma_bb[index]*t100800*t100801*t100807*t100944*(1.76E2/9.0)+ \
               gcab*t100800*t100904*t100939*t100799*(1.28E2/3.0))+ccab4*t100801*t100904*t100807*t100827*t100939*(6.4E1/ \
               3.0)+ccab2*gamma_bb[index]*t100800*t100824*t100944*t100799*(8.8E1/9.0)-ccab1*gamma_bb[index]*t100800* \
               t100944*t100938*t100799*(4.4E1/9.0)+ccab3*gcab*t100800*t100801*1.0/(t100822*t100822*t100822)*(t100950* \
               t100950)*t100799*2.0+ccab3*gamma_bb[index]*gcab*t100801*t100825*t100944*t100799*(4.4E1/3.0)+ccab4* \
               gamma_bb[index]*t100800*t100801*t100807*t100827*t100944*(1.76E2/9.0)-ccab2*gamma_bb[index]*t100800* \
               t100802*t100942*t100946*t100799*(1.6E1/3.0)+ccab3*gcab*t100800*t100904*t100825*t100939*t100799*(3.2E1/ \
               3.0)+ccab1*gcab*t100800*t100904*1.0/(t100815*t100815*t100815)*t100939*t100799*(3.2E1/9.0)-ccab3*gcab* \
               t100800*t100801*t100943*t100799*(gamma_bb[index]*gcab*t100944*(4.4E1/3.0)+t100904*t100939*t100799* \
               (3.2E1/3.0)+gamma_bb[index]*t100800*t100944*t100799*(8.8E1/3.0)+gamma_bb[index]*gcab*t100801*t100944* \
               t100799*(4.4E1/3.0)+gcab*t100800*t100904*t100939*t100799*(3.2E1/3.0))-ccab3*gamma_bb[index]*gcab*t100801* \
               t100802*t100950*t100943*t100799*8.0-ccab4*gamma_bb[index]*t100800*t100801*t100802*t100807*t100945* \
               t100937*(3.2E1/3.0))+(t100931+t100932+t100727+rho_b[index]*(t100902-t100791+t100702*t100795*(t100901+ \
               t100791-t100884*t100885*t100798*t100879-a1p*c*c0p*t100792*t100768*(2.0/3.0)))-t100677*(t100823-t100731* \
               t100732*t100737*t100695+t100702*t100721*t100716*t100728*t100738*4.0-t100702*t100721*t100725*t100728* \
               t100839+t100702*t100716*t100725*t100728*t100755+t100702*t100721*t100716*t100725*t100696*t100697*4.0+ \
               Aa*t100702*t100721*t100751*t100864*t100739*t100749*2.0+Aa*t100702*t100751*t100755*t100739*t100757* \
               t100749*2.0-t100702*t100721*t100751*t100871*t100872*t100739*t100757*t100877+Aa*a1a*c*t100702*t100721* \
               t100739*t100757*t100749*t100689*(2.0/3.0))-c0p*t100783*t100792*2.0-t100702*t100929*t100795)*(ccab1* \
               gamma_bb[index]*gcab*t100802*t100826*(4.0/3.0)-ccab2*t100801*t100942*t100946*t100799-ccab4*t100807* \
               t100808*t100945*t100937+ccab2*gamma_bb[index]*t100800*t100802*t100824*t100799*(8.0/3.0)-ccab1*gamma_bb[index]* \
               t100800*t100802*t100938*t100799*(4.0/3.0)+ccab3*gamma_bb[index]*gcab*t100801*t100802*t100825*t100799* \
               4.0+ccab4*gamma_bb[index]*t100800*t100801*t100802*t100807*t100827*(1.6E1/3.0)-ccab3*gcab*t100800*t100801* \
               t100950*t100943*t100799)*2.0+t101004*t100997*2.0+t100952*t100996*2.0+rho_b[index]*t101004*(t101020+ \
               t101014-t100900+t101018-t100891-t100702*t100795*(t101020-t101012+t101014-t100900-t101017+t101018-t101019- \
               t100891+t101005*t100798*t100879*t100888*2.0+a1f*c*c0f*t100796*t100886*(8.0/9.0)))-rho_b[index]*t100952* \
               (ccaa1*gamma_bb[index]*gcaa*t100961*t100944*(8.8E1/9.0)-ccaa1*t100904*t100905*t100980*t100939*2.4E1+ \
               ccaa2*t100904*t100905*t100970*t100939*(3.04E2/9.0)+ccaa4*t100906*t100907*t100958*t100999*(1.12E3/9.0) \
               -ccaa2*t100904*t100905*t100971*t100994*t100995*(3.2E1/3.0)-ccaa4*t100906*t100907*t100990*t100973*t100991* \
               (6.4E1/3.0)-ccaa2*t100910*t100904*t100905*t100995*(gamma_bb[index]*gcaa*t100944*(1.76E2/9.0)+t100904* \
               t100905*t100939*(3.04E2/9.0))-ccaa4*t100906*t100907*t100908*t100991*(gamma_bb[index]*gcaa*t100944* \
               (3.52E2/9.0)+t100904*t100905*t100939*(6.08E2/3.0)+t100906*t100907*t100999*(1.12E3/9.0)+gamma_bb[index]* \
               gcaa*t100904*t100905*t100998*2.88E2)+ccaa2*t100910*t100904*t100905*(t100994*t100994)*1.0/(t100969* \
               t100969*t100969)*2.0+ccaa4*t100906*t100907*t100908*(t100990*t100990)*1.0/(t100957*t100957*t100957) \
               *2.0+ccaa3*gamma_bb[index]*gcaa*t100904*t100905*t100966*t100998*7.2E1+ccaa1*gamma_bb[index]*gcaa*t100904* \
               t100905*1.0/(t100960*t100960*t100960)*t100998*(1.28E2/9.0)+ccaa3*gamma_bb[index]*gcaa*t100904*t100905* \
               t100909*1.0/(t100965*t100965*t100965)*(t100984*t100984)*2.0-ccaa3*gamma_bb[index]*gcaa*t100904*t100905* \
               t100909*t100985*(gamma_bb[index]*gcaa*t100944*(8.8E1/3.0)+t100904*t100905*t100939*(3.04E2/3.0)+gamma_bb[index]* \
               gcaa*t100904*t100905*t100998*7.2E1)-ccaa3*gamma_bb[index]*gcaa*t100904*t100905*t100972*t100984*t100985* \
               1.6E1)-rho_b[index]*t100996*t100997*2.0-c0*t101084*t101078*(cx1*gamma_bb[index]*gx*t101072*t100944* \
               (8.8E1/9.0)-cx1*t101026*t100904*t101094*t100939*2.4E1+cx2*t101026*t101074*t100904*t100939*(3.04E2/ \
               9.0)+cx4*t101071*t101027*t100906*t100999*(1.12E3/9.0)-cx2*t101026*t101036*t101056*t100904*t100971* \
               (3.2E1/3.0)-cx4*t101030*t101053*t101027*t100906*t100973*(6.4E1/3.0)-cx2*t101026*t100910*t101056*t100904* \
               (gamma_bb[index]*gx*t100944*(1.76E2/9.0)+t101026*t100904*t100939*(3.04E2/9.0))-cx4*t101053*t101027* \
               t100906*t100908*(gamma_bb[index]*gx*t100944*(3.52E2/9.0)+t101026*t100904*t100939*(6.08E2/3.0)+t101027* \
               t100906*t100999*(1.12E3/9.0)+gamma_bb[index]*gx*t101026*t100904*t100998*2.88E2)+cx2*t101026*t100910* \
               (t101036*t101036)*t100904*1.0/(t101039*t101039*t101039)*2.0+cx4*(t101030*t101030)*1.0/(t101035*t101035* \
               t101035)*t101027*t100906*t100908*2.0+cx3*gamma_bb[index]*gx*t101026*t101073*t100904*t100998*7.2E1+ \
               cx1*gamma_bb[index]*gx*t101026*1.0/(t101029*t101029*t101029)*t100904*t100998*(1.28E2/9.0)+cx3*gamma_bb[index]* \
               gx*1.0/(t101043*t101043*t101043)*t101026*t100904*(t101048*t101048)*t100909*2.0-cx3*gamma_bb[index]* \
               gx*t101026*t101044*t100904*t100909*(gamma_bb[index]*gx*t100944*(8.8E1/3.0)+t101026*t100904*t100939* \
               (3.04E2/3.0)+gamma_bb[index]*gx*t101026*t100904*t100998*7.2E1)-cx3*gamma_bb[index]*gx*t101026*t101044* \
               t100904*t101048*t100972*1.6E1)+c0*t101083*t101084*(omega*t101061*(-t101102+t101090+t101091+t101085+ \
               t101105*t101059)*(2.778046668940015E15/5.2776558133248E13)+omega*t101025*(omega*t101103*(2.315262988442614E31/ \
               9.903520314283042E27)-t101059*(omega*t101103*(7.717543294808713E30/4.951760157141521E27)-omega*t101022* \
               t101104*(1.40737488355328E14/8.334140006820045E15))-omega*t101022*t101104*(1.40737488355328E14/8.334140006820045E15) \
               +t101105*t101025*t101057*t101059*(2.778046668940015E15/3.5184372088832E13)+t101061*t101064*t101057* \
               t101059*(7.717543294808713E30/9.903520314283042E27)+1.0/(omega*omega*omega)*t101023*t101059*t101088* \
               (1.108777112152858E31/2.37684487542793E29)+1.0/(omega*omega*omega*omega)*t101064*t101059*t101089*(7.717543294808713E30/ \
               4.951760157141521E27)+1.0/pow(t101021,5.0/3.0)*t101062*t101059*t101088*(3.080234563013177E46/1.115037259926531E43) \
               )*(4.0/3.0)-omega*t101103*t101070*(7.717543294808713E30/3.713820117856141E27))-c0*t101101*t101084* \
               t101095*2.0+c0*t101101*t101078*t101096*(8.0/3.0)+c0*t101083*t101095*t101096*(8.0/3.0)-c0*t101083*t101078* \
               t100764*(4.0/9.0);
        } else if (rho_a[index] > cutoff_) {
            v_rho_b_rho_b_[index] = 0.0;
        } else if (rho_b[index] > cutoff_) {
            double t102978 = 1.0/pow(rho_b[index],1.0/3.0);
            double t102979 = c*t102978;
            double t102980 = sqrt(t102979);
            double t102981 = b1f*t102980;
            double t102982 = pow(t102979,3.0/2.0);
            double t102983 = b3f*t102982;
            double t102984 = c*c;
            double t102985 = 1.0/pow(rho_b[index],2.0/3.0);
            double t102986 = b4f*t102984*t102985;
            double t102987 = b2f*c*t102978;
            double t102988 = t102981+t102983+t102986+t102987;
            double t102989 = 1.0/pow(rho_b[index],4.0/3.0);
            double t102990 = b1p*t102980;
            double t102991 = b3p*t102982;
            double t102992 = b4p*t102984*t102985;
            double t102993 = b2p*c*t102978;
            double t102994 = t102990+t102991+t102992+t102993;
            double t102995 = 1.0/pow(rho_b[index],5.0/3.0);
            double t102996 = 1.0/sqrt(t102979);
            double t102997 = 1.0/c0f;
            double t102998 = 1.0/t102988;
            double t102999 = t102997*t102998*(1.0/2.0);
            double t103000 = t102999+1.0;
            double t103001 = 1.0/c0p;
            double t103002 = 1.0/t102994;
            double t103003 = t103001*t103002*(1.0/2.0);
            double t103004 = t103003+1.0;
            double t103005 = a1p*c*t102978;
            double t103006 = t103005+1.0;
            double t103007 = 1.0/t103004;
            double t103008 = 1.0/(t102994*t102994);
            double t103009 = b4p*t102984*t102995*(2.0/3.0);
            double t103010 = b2p*c*t102989*(1.0/3.0);
            double t103011 = b1p*c*t102996*t102989*(1.0/6.0);
            double t103012 = b3p*c*t102980*t102989*(1.0/2.0);
            double t103013 = t103010+t103011+t103012+t103009;
            double t103014 = t103013*t103006*t103007*t103008;
            double t103015 = log(t103004);
            double t103016 = gamma_bb[index]*gamma_bb[index];
            double t103017 = gcaa*gcaa;
            double t103018 = t103016*t103016;
            double t103019 = t103017*t103017;
            double t103020 = 1.0/pow(rho_b[index],3.2E1/3.0);
            double t103021 = 1.0/pow(rho_b[index],8.0/3.0);
            double t103022 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
               rho_b[index]*rho_b[index]);
            double t103023 = 1.0/pow(rho_b[index],1.6E1/3.0);
            double t103024 = pow(2.0,1.0/3.0);
            double t103025 = t103024*2.0;
            double t103026 = t103025-2.0;
            double t103027 = two_13*2.0;
            double t103028 = t103027-2.0;
            double t103029 = 1.0/t103028;
            double t103030 = log(t103000);
            double t103031 = a1f*c*t102978;
            double t103032 = t103031+1.0;
            double t103033 = gamma_bb[index]*gcaa*t103021*4.0;
            double t103034 = gamma_bb[index]*gcaa*t103022*t103016*t103017*4.0;
            double t103035 = t103023*t103016*t103017*6.0;
            double t103036 = t103020*t103018*t103019;
            double t103037 = t103033+t103034+t103035+t103036+1.0;
            double t103038 = 1.0/t103037;
            double t103039 = gamma_bb[index]*gcaa*t103021;
            double t103040 = t103039+1.0;
            double t103041 = 1.0/t103040;
            double t103042 = gamma_bb[index]*gcaa*t103021*3.0;
            double t103043 = gamma_bb[index]*gcaa*t103022*t103016*t103017;
            double t103044 = t103023*t103016*t103017*3.0;
            double t103045 = t103042+t103043+t103044+1.0;
            double t103046 = 1.0/t103045;
            double t103047 = gamma_bb[index]*gcaa*t103021*2.0;
            double t103048 = t103023*t103016*t103017;
            double t103049 = t103047+t103048+1.0;
            double t103050 = 1.0/t103049;
            double t103051 = 1.0/pow(rho_b[index],1.9E1/3.0);
            double t103052 = 1.0/pow(rho_b[index],1.1E1/3.0);
            double t103053 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
               rho_b[index]*rho_b[index]*rho_b[index]);
            double t103054 = 1.0/pow(rho_b[index],3.5E1/3.0);
            double t103055 = 1.0/t103000;
            double t103056 = 1.0/(t102988*t102988);
            double t103057 = b4f*t102984*t102995*(2.0/3.0);
            double t103058 = b2f*c*t102989*(1.0/3.0);
            double t103059 = b1f*c*t102996*t102989*(1.0/6.0);
            double t103060 = b3f*c*t102980*t102989*(1.0/2.0);
            double t103061 = t103060+t103057+t103058+t103059;
            double t103062 = a1f*c*c0f*t103030*t102989*(2.0/3.0);
            double t103063 = a1p*c*c0p*t103015*t102989*(2.0/3.0);
            double t103064 = ccaa4*t103018*t103054*t103019*t103038*(3.2E1/3.0);
            double t103065 = ccaa1*gamma_bb[index]*gcaa*t103041*t103052*(8.0/3.0);
            double t103066 = ccaa3*gamma_bb[index]*gcaa*t103016*t103017*t103053*t103046*8.0;
            double t103067 = ccaa2*t103050*t103051*t103016*t103017*(1.6E1/3.0);
            double t103068 = 1.0/(t103040*t103040);
            double t103069 = gamma_bb[index]*gcaa*t103052*8.0;
            double t103070 = gamma_bb[index]*gcaa*t103016*t103017*t103053*8.0;
            double t103071 = t103051*t103016*t103017*1.6E1;
            double t103072 = t103070+t103071+t103069;
            double t103073 = 1.0/(t103045*t103045);
            double t103074 = gamma_bb[index]*gcaa*t103052*(3.2E1/3.0);
            double t103075 = gamma_bb[index]*gcaa*t103016*t103017*t103053*3.2E1;
            double t103076 = t103051*t103016*t103017*3.2E1;
            double t103077 = t103018*t103054*t103019*(3.2E1/3.0);
            double t103078 = t103074+t103075+t103076+t103077;
            double t103079 = 1.0/(t103037*t103037);
            double t103080 = gamma_bb[index]*gcaa*t103052*(1.6E1/3.0);
            double t103081 = t103051*t103016*t103017*(1.6E1/3.0);
            double t103082 = t103080+t103081;
            double t103083 = 1.0/(t103049*t103049);
            double t103084 = t103064+t103065+t103066+t103067-ccaa1*t103051*t103016*t103017*t103068*(8.0/3.0)- \
               ccaa2*t103023*t103016*t103017*t103082*t103083-ccaa4*t103020*t103018*t103019*t103078*t103079-ccaa3* \
               gamma_bb[index]*gcaa*t103022*t103016*t103017*t103072*t103073;
            double t103085 = c0f*t103030*t103032*2.0;
            double t103086 = c0p*t103006*t103015*2.0;
            double t103087 = 1.0/pow(rho_b[index],1.0E1);
            double t103088 = 1.0/pow(rho_b[index],2.2E1/3.0);
            double t103089 = 1.0/pow(rho_b[index],1.4E1/3.0);
            double t103090 = 1.0/pow(rho_b[index],3.8E1/3.0);
            double t103091 = ccaa4*t103020*t103018*t103019*t103038;
            double t103092 = ccaa1*gamma_bb[index]*gcaa*t103021*t103041;
            double t103093 = ccaa3*gamma_bb[index]*gcaa*t103022*t103016*t103017*t103046;
            double t103094 = ccaa2*t103023*t103050*t103016*t103017;
            double t103095 = ccaa0+t103091+t103092+t103093+t103094;
            double t103096 = 1.0/pow(rho_b[index],7.0/3.0);
            double t103097 = 1.0/pow(t102979,3.0/2.0);
            double t103098 = t103061*t103061;
            double t103099 = t103013*t103013;
            double t103100 = 1.0/(t102994*t102994*t102994);
            double t103101 = t103100*t103006*t103007*t103099*2.0;
            double t103102 = b4p*t103021*t102984*(1.0E1/9.0);
            double t103103 = b2p*c*t103096*(4.0/9.0);
            double t103104 = b3p*t103021*t102984*t102996*(1.0/1.2E1);
            double t103105 = b1p*c*t103096*t102996*(2.0/9.0);
            double t103106 = b3p*c*t103096*t102980*(2.0/3.0);
            double t103107 = t103102+t103103+t103104+t103105+t103106-b1p*t103021*t103097*t102984*(1.0/3.6E1);
            double t103108 = 1.0/(t103004*t103004);
            double t103109 = 1.0/(t102994*t102994*t102994*t102994);
            double t103110 = a1p*c*c0p*t103015*t103096*(8.0/9.0);
            double t103111 = rho_b[index]*(8.334140006820045E15/1.40737488355328E14);
            double t103112 = omega*omega;
            double t103113 = 1.0/rho_b[index];
            double t103114 = omega*t103112*t103113*(7.0368744177664E13/8.334140006820045E15);
            double t103115 = 1.0/pow(t103111,1.0/3.0);
            double t103116 = gx*gx;
            double t103117 = t103116*t103116;
            double t103118 = gamma_bb[index]*gx*t103021;
            double t103119 = t103118+1.0;
            double t103139 = gamma_bb[index]*gx*t103052*(3.2E1/3.0);
            double t103140 = gamma_bb[index]*gx*t103016*t103053*t103116*3.2E1;
            double t103141 = t103051*t103016*t103116*3.2E1;
            double t103142 = t103018*t103054*t103117*(3.2E1/3.0);
            double t103120 = t103140+t103141+t103142+t103139;
            double t103121 = gamma_bb[index]*gx*t103021*4.0;
            double t103122 = gamma_bb[index]*gx*t103022*t103016*t103116*4.0;
            double t103123 = t103023*t103016*t103116*6.0;
            double t103124 = t103020*t103018*t103117;
            double t103125 = t103121+t103122+t103123+t103124+1.0;
            double t103144 = gamma_bb[index]*gx*t103052*(1.6E1/3.0);
            double t103145 = t103051*t103016*t103116*(1.6E1/3.0);
            double t103126 = t103144+t103145;
            double t103127 = gamma_bb[index]*gx*t103021*2.0;
            double t103128 = t103023*t103016*t103116;
            double t103129 = t103127+t103128+1.0;
            double t103130 = gamma_bb[index]*gx*t103021*3.0;
            double t103131 = gamma_bb[index]*gx*t103022*t103016*t103116;
            double t103132 = t103023*t103016*t103116*3.0;
            double t103133 = t103130+t103131+t103132+1.0;
            double t103134 = 1.0/(t103133*t103133);
            double t103135 = gamma_bb[index]*gx*t103052*8.0;
            double t103136 = gamma_bb[index]*gx*t103016*t103053*t103116*8.0;
            double t103137 = t103051*t103016*t103116*1.6E1;
            double t103138 = t103135+t103136+t103137;
            double t103143 = 1.0/(t103125*t103125);
            double t103146 = 1.0/(t103129*t103129);
            double t103147 = 1.0/(omega*omega);
            double t103148 = pow(t103111,2.0/3.0);
            double t103153 = t103147*t103148;
            double t103149 = exp(-t103153);
            double t103150 = 1.0/(rho_b[index]*rho_b[index]);
            double t103151 = 1.0/pow(t103111,4.0/3.0);
            double t103152 = 1.0/omega;
            double t103159 = omega*t103115;
            double t103154 = t103114-t103159;
            double t103155 = pow(t103111,1.0/3.0);
            double t103156 = t103152*t103155;
            double t103157 = erf(t103156);
            double t103158 = t103157*(3.991211251234741E15/2.251799813685248E15);
            double t103165 = t103154*t103149;
            double t103166 = omega*t103115*(3.0/2.0);
            double t103160 = t103114-t103165-t103166+t103158;
            double t103161 = 1.0/t103125;
            double t103162 = 1.0/t103119;
            double t103163 = 1.0/t103133;
            double t103164 = 1.0/t103129;
            double t103167 = omega*t103115*t103160*(4.0/3.0);
            double t103168 = t103167-1.0;
            double t103169 = cx4*t103020*t103161*t103018*t103117;
            double t103170 = cx1*gamma_bb[index]*gx*t103021*t103162;
            double t103171 = cx3*gamma_bb[index]*gx*t103022*t103016*t103116*t103163;
            double t103172 = cx2*t103023*t103016*t103116*t103164;
            double t103173 = cx0+t103170+t103171+t103172+t103169;
            double t103174 = pow(rho_b[index],4.0/3.0);
            double t103175 = omega*t103151*(8.334140006820045E15/2.81474976710656E14);
            double t103176 = omega*t103151*(2.778046668940015E15/1.40737488355328E14);
            double t103192 = omega*t103112*t103150*(7.0368744177664E13/8.334140006820045E15);
            double t103177 = -t103192+t103176;
            double t103178 = 1.0/sqrt(3.141592653589793);
            double t103179 = 1.0/pow(t103111,2.0/3.0);
            double t103180 = t103152*t103149*t103178*t103179*(1.108777112152858E31/1.584563250285287E29);
            double t103181 = t103115*t103154*t103147*t103149*(2.778046668940015E15/7.0368744177664E13);
            double t103182 = t103180+t103181+t103175-t103149*t103177-omega*t103112*t103150*(7.0368744177664E13/ \
               8.334140006820045E15);
            double t103183 = omega*t103151*t103160*(2.778046668940015E15/1.05553116266496E14);
            double t103184 = 1.0/(t103119*t103119);
            double t103185 = t103183-omega*t103115*t103182*(4.0/3.0);
            double t103186 = pow(rho_b[index],1.0/3.0);
            double t103187 = cx4*t103161*t103018*t103054*t103117*(3.2E1/3.0);
            double t103188 = cx1*gamma_bb[index]*gx*t103052*t103162*(8.0/3.0);
            double t103189 = cx3*gamma_bb[index]*gx*t103016*t103053*t103116*t103163*8.0;
            double t103190 = cx2*t103051*t103016*t103116*t103164*(1.6E1/3.0);
            double t103191 = t103190+t103187+t103188+t103189-cx1*t103051*t103016*t103116*t103184*(8.0/3.0)-cx2* \
               t103023*t103016*t103116*t103126*t103146-cx4*t103020*t103120*t103143*t103018*t103117-cx3*gamma_bb[index]* \
               gx*t103022*t103016*t103116*t103134*t103138;
            double t103193 = 1.0/pow(t103111,7.0/3.0);
            double t103194 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]);
            double t103195 = t103192-t103176;
            v_rho_b_rho_b_[index] = t103084*(t103086+t103026*t103029*(t103085-c0p*t103006*t103015*2.0))*2.0+t103095* \
               (-t103014+t103063+t103026*t103029*(t103014+t103062-t103032*t103061*t103055*t103056-a1p*c*c0p*t103015* \
               t102989*(2.0/3.0)))*2.0+rho_b[index]*t103095*(-t103101-t103110+t103026*t103029*(t103101+t103110-t103006* \
               t103007*t103008*t103107-t103032*t103055*t103098*1.0/(t102988*t102988*t102988)*2.0+t103032*t103055* \
               t103056*(b2f*c*t103096*(4.0/9.0)+b4f*t103021*t102984*(1.0E1/9.0)+b1f*c*t103096*t102996*(2.0/9.0)+b3f* \
               c*t103096*t102980*(2.0/3.0)-b1f*t103021*t103097*t102984*(1.0/3.6E1)+b3f*t103021*t102984*t102996*(1.0/ \
               1.2E1))+1.0/(t103000*t103000)*t103032*t103098*1.0/(t102988*t102988*t102988*t102988)*t102997*(1.0/2.0) \
               -a1f*c*c0f*t103030*t103096*(8.0/9.0)-t103001*t103006*t103108*t103109*t103099*(1.0/2.0)+a1f*c*t103061* \
               t103055*t103056*t102989*(2.0/3.0)-a1p*c*t103013*t103007*t103008*t102989*(2.0/3.0))+t103006*t103007* \
               t103008*t103107+t103001*t103006*t103108*t103109*t103099*(1.0/2.0)+a1p*c*t103013*t103007*t103008*t102989* \
               (2.0/3.0))-rho_b[index]*t103084*(-t103014+t103063+t103026*t103029*(t103014+t103062-t103063-t103032* \
               t103061*t103055*t103056))*2.0-rho_b[index]*(t103086+t103026*t103029*(t103085-t103086))*(ccaa1*gamma_bb[index]* \
               gcaa*t103041*t103089*(8.8E1/9.0)+ccaa2*t103050*t103016*t103017*t103088*(3.04E2/9.0)+ccaa4*t103018* \
               t103090*t103019*t103038*(1.12E3/9.0)-ccaa1*t103016*t103017*t103068*t103088*2.4E1-ccaa2*t103051*t103016* \
               t103017*t103082*t103083*(3.2E1/3.0)-ccaa4*t103018*t103054*t103019*t103078*t103079*(6.4E1/3.0)-ccaa2* \
               t103023*t103016*t103017*t103083*(gamma_bb[index]*gcaa*t103089*(1.76E2/9.0)+t103016*t103017*t103088* \
               (3.04E2/9.0))-ccaa4*t103020*t103018*t103019*t103079*(gamma_bb[index]*gcaa*t103089*(3.52E2/9.0)+t103018* \
               t103090*t103019*(1.12E3/9.0)+t103016*t103017*t103088*(6.08E2/3.0)+gamma_bb[index]*gcaa*t103016*t103017* \
               t103087*2.88E2)+ccaa2*t103023*t103016*t103017*(t103082*t103082)*1.0/(t103049*t103049*t103049)*2.0+ \
               ccaa4*t103020*t103018*t103019*1.0/(t103037*t103037*t103037)*(t103078*t103078)*2.0+ccaa3*gamma_bb[index]* \
               gcaa*t103016*t103017*t103046*t103087*7.2E1+ccaa1*gamma_bb[index]*gcaa*1.0/(t103040*t103040*t103040) \
               *t103016*t103017*t103087*(1.28E2/9.0)+ccaa3*gamma_bb[index]*gcaa*t103022*t103016*t103017*1.0/(t103045* \
               t103045*t103045)*(t103072*t103072)*2.0-ccaa3*gamma_bb[index]*gcaa*t103022*t103016*t103017*t103073* \
               (gamma_bb[index]*gcaa*t103089*(8.8E1/3.0)+t103016*t103017*t103088*(3.04E2/3.0)+gamma_bb[index]*gcaa* \
               t103016*t103017*t103087*7.2E1)-ccaa3*gamma_bb[index]*gcaa*t103016*t103017*t103053*t103072*t103073* \
               1.6E1)-c0*t103174*t103168*(cx1*gamma_bb[index]*gx*t103162*t103089*(8.8E1/9.0)-cx1*t103016*t103116* \
               t103184*t103088*2.4E1+cx2*t103016*t103116*t103164*t103088*(3.04E2/9.0)+cx4*t103161*t103018*t103090* \
               t103117*(1.12E3/9.0)-cx2*t103051*t103016*t103116*t103126*t103146*(3.2E1/3.0)-cx4*t103120*t103143*t103018* \
               t103054*t103117*(6.4E1/3.0)-cx2*t103023*t103016*t103116*t103146*(gamma_bb[index]*gx*t103089*(1.76E2/ \
               9.0)+t103016*t103116*t103088*(3.04E2/9.0))-cx4*t103020*t103143*t103018*t103117*(gamma_bb[index]*gx* \
               t103089*(3.52E2/9.0)+t103018*t103090*t103117*(1.12E3/9.0)+t103016*t103116*t103088*(6.08E2/3.0)+gamma_bb[index]* \
               gx*t103016*t103116*t103087*2.88E2)+cx2*t103023*t103016*t103116*(t103126*t103126)*1.0/(t103129*t103129* \
               t103129)*2.0+cx4*t103020*(t103120*t103120)*1.0/(t103125*t103125*t103125)*t103018*t103117*2.0+cx3*gamma_bb[index]* \
               gx*t103016*t103116*t103163*t103087*7.2E1+cx1*gamma_bb[index]*gx*t103016*t103116*1.0/(t103119*t103119* \
               t103119)*t103087*(1.28E2/9.0)+cx3*gamma_bb[index]*gx*t103022*t103016*1.0/(t103133*t103133*t103133) \
               *t103116*(t103138*t103138)*2.0-cx3*gamma_bb[index]*gx*t103022*t103016*t103116*t103134*(gamma_bb[index]* \
               gx*t103089*(8.8E1/3.0)+t103016*t103116*t103088*(3.04E2/3.0)+gamma_bb[index]*gx*t103016*t103116*t103087* \
               7.2E1)-cx3*gamma_bb[index]*gx*t103016*t103053*t103116*t103134*t103138*1.6E1)+c0*t103173*t103174*(omega* \
               t103151*(t103180+t103181-t103192+t103175+t103149*t103195)*(2.778046668940015E15/5.2776558133248E13) \
               +omega*t103115*(omega*t103193*(2.315262988442614E31/9.903520314283042E27)-t103149*(omega*t103193*(7.717543294808713E30/ \
               4.951760157141521E27)-omega*t103112*t103194*(1.40737488355328E14/8.334140006820045E15))-omega*t103112* \
               t103194*(1.40737488355328E14/8.334140006820045E15)+t103151*t103154*t103147*t103149*(7.717543294808713E30/ \
               9.903520314283042E27)+t103115*t103147*t103149*t103195*(2.778046668940015E15/3.5184372088832E13)+1.0/ \
               (omega*omega*omega)*t103113*t103149*t103178*(1.108777112152858E31/2.37684487542793E29)+1.0/(omega* \
               omega*omega*omega)*t103154*t103149*t103179*(7.717543294808713E30/4.951760157141521E27)+1.0/pow(t103111,5.0/ \
               3.0)*t103152*t103149*t103178*(3.080234563013177E46/1.115037259926531E43))*(4.0/3.0)-omega*t103160* \
               t103193*(7.717543294808713E30/3.713820117856141E27))-c0*t103191*t103174*t103185*2.0+c0*t103173*t103185* \
               t103186*(8.0/3.0)+c0*t103191*t103168*t103186*(8.0/3.0)-c0*t103173*t103168*t102985*(4.0/9.0);
        } else {
            v_rho_b_rho_b_[index] = 0.0;
        }

        if (is_gga_) {

            //V_rho_a_gamma_aa
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t101107 = 1.0/pow(rho_a[index],1.0/3.0);
                double t101108 = c*t101107;
                double t101109 = sqrt(t101108);
                double t101110 = pow(t101108,3.0/2.0);
                double t101111 = c*c;
                double t101112 = 1.0/pow(rho_a[index],2.0/3.0);
                double t101113 = 1.0/c0p;
                double t101114 = b1p*t101109;
                double t101115 = b3p*t101110;
                double t101116 = b4p*t101111*t101112;
                double t101117 = b2p*c*t101107;
                double t101118 = t101114+t101115+t101116+t101117;
                double t101119 = 1.0/t101118;
                double t101120 = t101113*t101119*(1.0/2.0);
                double t101121 = t101120+1.0;
                double t101122 = log(t101121);
                double t101123 = a1p*c*t101107;
                double t101124 = t101123+1.0;
                double t101125 = 1.0/pow(rho_a[index],8.0/3.0);
                double t101126 = gamma_aa[index]*gamma_aa[index];
                double t101127 = gcaa*gcaa;
                double t101128 = t101127*t101127;
                double t101129 = 1.0/pow(rho_a[index],3.2E1/3.0);
                double t101130 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t101131 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t101132 = gamma_aa[index]*gcaa*t101125;
                double t101133 = t101132+1.0;
                double t101134 = gamma_aa[index]*gcaa*t101125*3.0;
                double t101135 = gamma_aa[index]*gcaa*t101131*t101126*t101127;
                double t101136 = t101130*t101126*t101127*3.0;
                double t101137 = t101134+t101135+t101136+1.0;
                double t101138 = t101126*t101126;
                double t101139 = gamma_aa[index]*gcaa*t101125*4.0;
                double t101140 = gamma_aa[index]*gcaa*t101131*t101126*t101127*4.0;
                double t101141 = t101130*t101126*t101127*6.0;
                double t101142 = t101128*t101129*t101138;
                double t101143 = t101140+t101141+t101142+t101139+1.0;
                double t101144 = gamma_aa[index]*gcaa*t101125*2.0;
                double t101145 = t101130*t101126*t101127;
                double t101146 = t101144+t101145+1.0;
                double t101147 = rho_a[index]+rho_b[index];
                double t101148 = 1.0/pow(t101147,1.0/3.0);
                double t101149 = c*t101148;
                double t101150 = sqrt(t101149);
                double t101151 = b1p*t101150;
                double t101152 = pow(t101149,3.0/2.0);
                double t101153 = b3p*t101152;
                double t101154 = 1.0/pow(t101147,2.0/3.0);
                double t101155 = b4p*t101111*t101154;
                double t101156 = b2p*c*t101148;
                double t101157 = t101151+t101153+t101155+t101156;
                double t101158 = 1.0/pow(t101147,4.0/3.0);
                double t101159 = two_13*2.0;
                double t101160 = t101159-2.0;
                double t101161 = 1.0/t101160;
                double t101162 = 1.0/c0f;
                double t101163 = 1.0/t101157;
                double t101164 = t101113*t101163*(1.0/2.0);
                double t101165 = t101164+1.0;
                double t101166 = a1p*c*t101148;
                double t101167 = t101166+1.0;
                double t101168 = rho_a[index]-rho_b[index];
                double t101169 = t101168*t101168;
                double t101170 = 1.0/t101147;
                double t101171 = t101170*t101168;
                double t101172 = b1f*t101150;
                double t101173 = b3f*t101152;
                double t101174 = b4f*t101111*t101154;
                double t101175 = b2f*c*t101148;
                double t101176 = t101172+t101173+t101174+t101175;
                double t101177 = 1.0/t101176;
                double t101178 = t101162*t101177*(1.0/2.0);
                double t101179 = t101178+1.0;
                double t101180 = log(t101179);
                double t101181 = a1f*c*t101148;
                double t101182 = t101181+1.0;
                double t101183 = log(t101165);
                double t101193 = c0f*t101180*t101182*2.0;
                double t101194 = c0p*t101183*t101167*2.0;
                double t101184 = t101193-t101194;
                double t101185 = t101171+1.0;
                double t101186 = pow(t101185,4.0/3.0);
                double t101187 = -t101171+1.0;
                double t101188 = pow(t101187,4.0/3.0);
                double t101189 = t101186+t101188-2.0;
                double t101190 = 1.0/(t101147*t101147);
                double t101221 = t101190*t101168;
                double t101191 = -t101221+t101170;
                double t101192 = 1.0/(t101147*t101147*t101147*t101147);
                double t101195 = t101169*t101169;
                double t101196 = 1.0/pow(t101147,5.0/3.0);
                double t101197 = 1.0/sqrt(t101149);
                double t101198 = 1.0/t101165;
                double t101199 = 1.0/(t101157*t101157);
                double t101200 = b4p*t101111*t101196*(2.0/3.0);
                double t101201 = b2p*c*t101158*(1.0/3.0);
                double t101202 = b1p*c*t101158*t101197*(1.0/6.0);
                double t101203 = b3p*c*t101150*t101158*(1.0/2.0);
                double t101204 = t101200+t101201+t101202+t101203;
                double t101205 = t101204*t101167*t101198*t101199;
                double t101206 = 1.0/(t101147*t101147*t101147*t101147*t101147);
                double t101207 = 1.0/d2fz0;
                double t101208 = 1.0/Aa;
                double t101209 = b1a*t101150;
                double t101210 = b3a*t101152;
                double t101211 = b4a*t101111*t101154;
                double t101212 = b2a*c*t101148;
                double t101213 = t101210+t101211+t101212+t101209;
                double t101214 = 1.0/t101213;
                double t101215 = t101214*t101208*(1.0/2.0);
                double t101216 = t101215+1.0;
                double t101217 = log(t101216);
                double t101218 = a1a*c*t101148;
                double t101219 = t101218+1.0;
                double t101220 = pow(t101185,1.0/3.0);
                double t101222 = t101220*t101191*(4.0/3.0);
                double t101223 = pow(t101187,1.0/3.0);
                double t101224 = t101222-t101223*t101191*(4.0/3.0);
                double t101225 = t101192*t101195;
                double t101226 = t101225-1.0;
                double t101227 = pow(2.0,1.0/3.0);
                double t101228 = t101227*2.0;
                double t101229 = t101228-2.0;
                double t101230 = a1f*c*t101107;
                double t101231 = t101230+1.0;
                double t101232 = b1f*t101109;
                double t101233 = b3f*t101110;
                double t101234 = b4f*t101111*t101112;
                double t101235 = b2f*c*t101107;
                double t101236 = t101232+t101233+t101234+t101235;
                double t101237 = 1.0/t101236;
                double t101238 = t101162*t101237*(1.0/2.0);
                double t101239 = t101238+1.0;
                double t101240 = 1.0/pow(rho_a[index],4.0/3.0);
                double t101241 = 1.0/pow(rho_a[index],5.0/3.0);
                double t101242 = 1.0/sqrt(t101108);
                double t101243 = log(t101239);
                double t101244 = 1.0/t101121;
                double t101245 = 1.0/(t101118*t101118);
                double t101246 = b4p*t101111*t101241*(2.0/3.0);
                double t101247 = b2p*c*t101240*(1.0/3.0);
                double t101248 = b1p*c*t101240*t101242*(1.0/6.0);
                double t101249 = b3p*c*t101240*t101109*(1.0/2.0);
                double t101250 = t101246+t101247+t101248+t101249;
                double t101251 = t101124*t101250*t101244*t101245;
                double t101252 = c0f*t101231*t101243*2.0;
                double t101253 = c0p*t101122*t101124*2.0;
                double t101254 = gamma_aa[index]*t101125*(1.0/2.0);
                double t101255 = 1.0/pow(rho_b[index],8.0/3.0);
                double t101256 = gamma_bb[index]*t101255*(1.0/2.0);
                double t101257 = t101254+t101256;
                double t101258 = gcab*t101257;
                double t101259 = t101258+1.0;
                double t101260 = gcab*gcab;
                double t101261 = t101257*t101257;
                double t101262 = t101260*t101260;
                double t101263 = t101261*t101261;
                double t101264 = t101260*t101261;
                double t101265 = gcab*t101257*2.0;
                double t101266 = t101264+t101265+1.0;
                double t101267 = t101260*t101261*3.0;
                double t101268 = gcab*t101260*t101261*t101257;
                double t101269 = gcab*t101257*3.0;
                double t101270 = t101267+t101268+t101269+1.0;
                double t101271 = t101260*t101261*6.0;
                double t101272 = gcab*t101260*t101261*t101257*4.0;
                double t101273 = t101262*t101263;
                double t101274 = gcab*t101257*4.0;
                double t101275 = t101271+t101272+t101273+t101274+1.0;
                double t101276 = t101252-t101253;
                double t101277 = 1.0/pow(rho_b[index],1.0/3.0);
                double t101278 = c*t101277;
                double t101279 = sqrt(t101278);
                double t101280 = pow(t101278,3.0/2.0);
                double t101281 = 1.0/pow(rho_b[index],2.0/3.0);
                double t101282 = b1p*t101279;
                double t101283 = b3p*t101280;
                double t101284 = b4p*t101111*t101281;
                double t101285 = b2p*c*t101277;
                double t101286 = t101282+t101283+t101284+t101285;
                double t101287 = 1.0/t101286;
                double t101288 = t101113*t101287*(1.0/2.0);
                double t101289 = t101288+1.0;
                double t101290 = log(t101289);
                double t101291 = a1p*c*t101277;
                double t101292 = t101291+1.0;
                double t101293 = c0p*t101290*t101292*2.0;
                double t101294 = t101161*t101192*t101184*t101195*t101189;
                double t101295 = Aa*t101161*t101207*t101217*t101226*t101219*t101189*2.0;
                double t101296 = 1.0/t101259;
                double t101297 = 1.0/pow(rho_a[index],1.1E1/3.0);
                double t101298 = 1.0/(t101259*t101259);
                double t101299 = 1.0/t101266;
                double t101300 = 1.0/(t101270*t101270);
                double t101301 = 1.0/pow(rho_a[index],1.9E1/3.0);
                double t101302 = 1.0/(t101266*t101266);
                double t101303 = 1.0/t101270;
                double t101304 = 1.0/t101275;
                double t101305 = 1.0/(t101275*t101275);
                double t101306 = gcab*t101125*2.0;
                double t101307 = t101125*t101260*t101257*6.0;
                double t101308 = gcab*t101125*t101260*t101261*6.0;
                double t101309 = t101125*t101261*t101262*t101257*2.0;
                double t101310 = t101306+t101307+t101308+t101309;
                double t101311 = gamma_aa[index]*gcab*t101297*(8.0/3.0);
                double t101312 = gamma_aa[index]*t101260*t101257*t101297*(8.0/3.0);
                double t101313 = t101311+t101312;
                double t101314 = gcab*t101125;
                double t101315 = t101125*t101260*t101257;
                double t101316 = t101314+t101315;
                double t101317 = gamma_aa[index]*gcab*t101297*(1.6E1/3.0);
                double t101318 = gamma_aa[index]*gcab*t101260*t101261*t101297*1.6E1;
                double t101319 = gamma_aa[index]*t101261*t101262*t101257*t101297*(1.6E1/3.0);
                double t101320 = gamma_aa[index]*t101260*t101257*t101297*1.6E1;
                double t101321 = t101320+t101317+t101318+t101319;
                double t101322 = gcab*t101125*(3.0/2.0);
                double t101323 = t101125*t101260*t101257*3.0;
                double t101324 = gcab*t101125*t101260*t101261*(3.0/2.0);
                double t101325 = t101322+t101323+t101324;
                double t101326 = gamma_aa[index]*gcab*t101297*4.0;
                double t101327 = gamma_aa[index]*gcab*t101260*t101261*t101297*4.0;
                double t101328 = gamma_aa[index]*t101260*t101257*t101297*8.0;
                double t101329 = t101326+t101327+t101328;
                double t101330 = t101161*t101229*t101276;
                double t101331 = t101330+t101253;
                double t101332 = 1.0/t101133;
                double t101333 = 1.0/t101143;
                double t101334 = 1.0/t101146;
                double t101335 = 1.0/t101137;
                double t101336 = 1.0/(t101133*t101133);
                double t101337 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]*rho_a[index]);
                double t101338 = 1.0/(t101137*t101137);
                double t101339 = 1.0/(t101146*t101146);
                double t101340 = gcaa*t101125*3.0;
                double t101341 = gamma_aa[index]*t101130*t101127*6.0;
                double t101342 = gcaa*t101131*t101126*t101127*3.0;
                double t101343 = t101340+t101341+t101342;
                double t101344 = 1.0/pow(rho_a[index],3.5E1/3.0);
                double t101345 = 1.0/(t101143*t101143);
                double t101346 = gcaa*t101125*4.0;
                double t101347 = gamma_aa[index]*t101130*t101127*1.2E1;
                double t101348 = gcaa*t101131*t101126*t101127*1.2E1;
                double t101349 = gamma_aa[index]*t101126*t101128*t101129*4.0;
                double t101350 = t101346+t101347+t101348+t101349;
                double t101351 = gcaa*t101125*2.0;
                double t101352 = gamma_aa[index]*t101130*t101127*2.0;
                double t101353 = t101351+t101352;
                double t101354 = gamma_aa[index]*gcaa*t101297*(1.6E1/3.0);
                double t101355 = t101301*t101126*t101127*(1.6E1/3.0);
                double t101356 = t101354+t101355;
                double t101357 = gamma_aa[index]*gcaa*t101297*8.0;
                double t101358 = gamma_aa[index]*gcaa*t101126*t101127*t101337*8.0;
                double t101359 = t101301*t101126*t101127*1.6E1;
                double t101360 = t101357+t101358+t101359;
                double t101361 = gamma_aa[index]*gcaa*t101297*(3.2E1/3.0);
                double t101362 = gamma_aa[index]*gcaa*t101126*t101127*t101337*3.2E1;
                double t101363 = t101301*t101126*t101127*3.2E1;
                double t101364 = t101128*t101344*t101138*(3.2E1/3.0);
                double t101365 = t101361+t101362+t101363+t101364;
                double t101366 = 1.0/t101239;
                double t101367 = 1.0/(t101236*t101236);
                double t101368 = b4f*t101111*t101241*(2.0/3.0);
                double t101369 = b2f*c*t101240*(1.0/3.0);
                double t101370 = b1f*c*t101240*t101242*(1.0/6.0);
                double t101371 = b3f*c*t101240*t101109*(1.0/2.0);
                double t101372 = t101370+t101371+t101368+t101369;
                double t101373 = a1f*c*c0f*t101240*t101243*(2.0/3.0);
                double t101374 = a1p*c*c0p*t101122*t101240*(2.0/3.0);
                double t101375 = ccaa1*gcaa*t101125*t101332;
                double t101376 = ccaa4*gamma_aa[index]*t101126*t101333*t101128*t101129*4.0;
                double t101377 = ccaa2*gamma_aa[index]*t101130*t101127*t101334*2.0;
                double t101378 = ccaa3*gcaa*t101131*t101126*t101127*t101335*3.0;
                double t101379 = t101375+t101376+t101377+t101378-ccaa1*gamma_aa[index]*t101130*t101127*t101336-ccaa2* \
                   t101130*t101126*t101127*t101353*t101339-ccaa4*t101350*t101128*t101129*t101138*t101345-ccaa3*gamma_aa[index]* \
                   gcaa*t101131*t101126*t101127*t101343*t101338;
                double t101380 = omega*omega;
                double t101381 = rho_a[index]*(8.334140006820045E15/1.40737488355328E14);
                double t101382 = 1.0/(rho_a[index]*rho_a[index]);
                double t101383 = 1.0/pow(t101381,4.0/3.0);
                double t101384 = 1.0/(omega*omega);
                double t101385 = pow(t101381,2.0/3.0);
                double t101387 = t101384*t101385;
                double t101386 = exp(-t101387);
                double t101388 = 1.0/pow(t101381,1.0/3.0);
                double t101389 = 1.0/omega;
                double t101390 = 1.0/rho_a[index];
                double t101391 = omega*t101380*t101390*(7.0368744177664E13/8.334140006820045E15);
                double t101392 = omega*t101388;
                double t101393 = gx*gx;
                double t101394 = t101393*t101393;
                double t101395 = gamma_aa[index]*gx*t101125;
                double t101396 = t101395+1.0;
                double t101397 = gamma_aa[index]*gx*t101125*3.0;
                double t101398 = gamma_aa[index]*gx*t101131*t101126*t101393;
                double t101399 = t101130*t101126*t101393*3.0;
                double t101400 = t101397+t101398+t101399+1.0;
                double t101401 = gamma_aa[index]*gx*t101125*4.0;
                double t101402 = gamma_aa[index]*gx*t101131*t101126*t101393*4.0;
                double t101403 = t101130*t101126*t101393*6.0;
                double t101404 = t101129*t101138*t101394;
                double t101405 = t101401+t101402+t101403+t101404+1.0;
                double t101406 = gamma_aa[index]*gx*t101125*2.0;
                double t101407 = t101130*t101126*t101393;
                double t101408 = t101406+t101407+1.0;
                double t101409 = pow(t101381,1.0/3.0);
                double t101410 = t101409*t101389;
                double t101411 = erf(t101410);
                double t101412 = t101411*(3.991211251234741E15/2.251799813685248E15);
                double t101413 = t101391-t101392;
                double t101441 = t101413*t101386;
                double t101442 = omega*t101388*(3.0/2.0);
                double t101414 = t101412-t101441-t101442+t101391;
                double t101415 = 1.0/t101396;
                double t101416 = cx1*gx*t101125*t101415;
                double t101417 = 1.0/t101405;
                double t101418 = cx4*gamma_aa[index]*t101126*t101129*t101417*t101394*4.0;
                double t101419 = 1.0/t101408;
                double t101420 = cx2*gamma_aa[index]*t101130*t101419*t101393*2.0;
                double t101421 = 1.0/t101400;
                double t101422 = cx3*gx*t101131*t101421*t101126*t101393*3.0;
                double t101423 = 1.0/(t101396*t101396);
                double t101424 = gx*t101125*3.0;
                double t101425 = gamma_aa[index]*t101130*t101393*6.0;
                double t101426 = gx*t101131*t101126*t101393*3.0;
                double t101427 = t101424+t101425+t101426;
                double t101428 = 1.0/(t101400*t101400);
                double t101429 = gx*t101125*4.0;
                double t101430 = gamma_aa[index]*t101130*t101393*1.2E1;
                double t101431 = gx*t101131*t101126*t101393*1.2E1;
                double t101432 = gamma_aa[index]*t101126*t101129*t101394*4.0;
                double t101433 = t101430+t101431+t101432+t101429;
                double t101434 = 1.0/(t101405*t101405);
                double t101435 = gx*t101125*2.0;
                double t101436 = gamma_aa[index]*t101130*t101393*2.0;
                double t101437 = t101435+t101436;
                double t101438 = 1.0/(t101408*t101408);
                double t101439 = t101420+t101422+t101416+t101418-cx1*gamma_aa[index]*t101130*t101423*t101393-cx2* \
                   t101130*t101126*t101437*t101393*t101438-cx4*t101433*t101434*t101129*t101138*t101394-cx3*gamma_aa[index]* \
                   gx*t101131*t101126*t101427*t101428*t101393;
                double t101440 = pow(rho_a[index],4.0/3.0);
                double t101443 = omega*t101414*t101388*(4.0/3.0);
                double t101444 = t101443-1.0;
                double t101445 = gamma_aa[index]*gx*t101297*(1.6E1/3.0);
                double t101446 = t101301*t101126*t101393*(1.6E1/3.0);
                double t101447 = t101445+t101446;
                double t101448 = gamma_aa[index]*gx*t101297*8.0;
                double t101449 = gamma_aa[index]*gx*t101126*t101337*t101393*8.0;
                double t101450 = t101301*t101126*t101393*1.6E1;
                double t101451 = t101450+t101448+t101449;
                double t101452 = gamma_aa[index]*gx*t101297*(3.2E1/3.0);
                double t101453 = gamma_aa[index]*gx*t101126*t101337*t101393*3.2E1;
                double t101454 = t101301*t101126*t101393*3.2E1;
                double t101455 = t101344*t101138*t101394*(3.2E1/3.0);
                double t101456 = t101452+t101453+t101454+t101455;
                v_rho_a_gamma_aa_[index] = -(rho_a[index]*t101331+rho_b[index]*(t101293-t101161*t101229*(t101293- \
                   c0f*log((t101162*(1.0/2.0))/(b1f*t101279+b3f*t101280+b2f*c*t101277+b4f*t101111*t101281)+1.0)*(a1f* \
                   c*t101277+1.0)*2.0))-t101147*(t101194+t101294+t101295))*(ccab1*gcab*t101296*t101297*(4.0/3.0)-ccab2* \
                   t101302*t101260*t101261*(gcab*t101297*(8.0/3.0)+gamma_aa[index]*t101301*t101260*(4.0/3.0)+t101260* \
                   t101257*t101297*(8.0/3.0))-ccab4*t101305*t101262*t101263*(gcab*t101297*(1.6E1/3.0)+gamma_aa[index]* \
                   t101301*t101260*8.0+t101260*t101257*t101297*1.6E1+gamma_aa[index]*t101301*t101261*t101262*8.0+gcab* \
                   t101260*t101261*t101297*1.6E1+t101261*t101262*t101257*t101297*(1.6E1/3.0)+gamma_aa[index]*gcab*t101301* \
                   t101260*t101257*1.6E1)-ccab1*gamma_aa[index]*t101301*t101260*t101298*(4.0/3.0)+ccab2*gamma_aa[index]* \
                   t101301*t101260*t101299*(4.0/3.0)-ccab1*t101260*t101257*t101297*t101298*(4.0/3.0)+ccab2*t101260*t101257* \
                   t101297*t101299*(8.0/3.0)-ccab2*t101302*t101313*t101125*t101260*t101257+ccab4*t101304*t101261*t101262* \
                   t101257*t101297*(1.6E1/3.0)+ccab4*t101310*t101321*t101262*t101263*1.0/(t101275*t101275*t101275)*2.0+ \
                   ccab2*t101313*t101260*t101261*t101316*1.0/(t101266*t101266*t101266)*2.0+ccab4*gamma_aa[index]*t101301* \
                   t101304*t101261*t101262*8.0+ccab3*gcab*t101303*t101260*t101261*t101297*4.0+ccab3*gamma_aa[index]*gcab* \
                   t101301*t101303*t101260*t101257*4.0-ccab2*gamma_aa[index]*t101302*t101260*t101316*t101257*t101297* \
                   (8.0/3.0)-ccab3*gcab*t101300*t101125*t101260*t101261*t101329*(3.0/2.0)-ccab4*t101321*t101125*t101305* \
                   t101261*t101262*t101257*2.0-ccab3*gcab*t101300*t101260*t101261*t101257*(gcab*t101297*4.0+gamma_aa[index]* \
                   t101301*t101260*4.0+t101260*t101257*t101297*8.0+gcab*t101260*t101261*t101297*4.0+gamma_aa[index]*gcab* \
                   t101301*t101260*t101257*4.0)+ccab1*gamma_aa[index]*gcab*t101301*t101260*t101257*1.0/(t101259*t101259* \
                   t101259)*(4.0/3.0)+ccab3*gcab*t101260*t101261*1.0/(t101270*t101270*t101270)*t101325*t101257*t101329* \
                   2.0-ccab3*gamma_aa[index]*gcab*t101300*t101260*t101261*t101325*t101297*4.0-ccab4*gamma_aa[index]*t101310* \
                   t101305*t101261*t101262*t101257*t101297*(1.6E1/3.0))-t101379*(t101253+t101161*t101229*(t101252-c0p* \
                   t101122*t101124*2.0))-(-t101253+t101194+t101294+t101295+t101147*(t101205-t101161*t101192*t101195*t101189* \
                   (t101205-(t101182*1.0/(t101176*t101176)*(b2f*c*t101158*(1.0/3.0)+b4f*t101111*t101196*(2.0/3.0)+b1f* \
                   c*t101158*t101197*(1.0/6.0)+b3f*c*t101150*t101158*(1.0/2.0)))/t101179+a1f*c*c0f*t101180*t101158*(2.0/ \
                   3.0)-a1p*c*c0p*t101183*t101158*(2.0/3.0))-a1p*c*c0p*t101183*t101158*(2.0/3.0)+t101161*t101224*t101192* \
                   t101184*t101195-t101161*t101206*t101184*t101195*t101189*4.0+t101161*t101192*t101184*t101168*t101169* \
                   t101189*4.0-Aa*t101161*t101207*t101217*t101219*t101189*(t101206*t101195*4.0-t101192*t101168*t101169* \
                   4.0)*2.0+Aa*t101161*t101224*t101207*t101217*t101226*t101219*2.0+(1.0/(t101213*t101213)*t101161*t101207* \
                   t101226*t101219*t101189*(b2a*c*t101158*(1.0/3.0)+b4a*t101111*t101196*(2.0/3.0)+b1a*c*t101158*t101197* \
                   (1.0/6.0)+b3a*c*t101150*t101158*(1.0/2.0)))/t101216-Aa*a1a*c*t101161*t101207*t101217*t101226*t101158* \
                   t101189*(2.0/3.0))+rho_a[index]*(-t101251+t101374+t101161*t101229*(t101251+t101373-t101231*t101372* \
                   t101366*t101367-a1p*c*c0p*t101122*t101240*(2.0/3.0)))-t101161*t101229*t101276)*(ccab1*gcab*t101125* \
                   t101296*(1.0/2.0)-ccab2*t101302*t101260*t101261*t101316-ccab4*t101310*t101305*t101262*t101263-ccab1* \
                   t101125*t101260*t101257*t101298*(1.0/2.0)+ccab2*t101125*t101260*t101257*t101299+ccab4*t101304*t101125* \
                   t101261*t101262*t101257*2.0+ccab3*gcab*t101303*t101125*t101260*t101261*(3.0/2.0)-ccab3*gcab*t101300* \
                   t101260*t101261*t101325*t101257)-rho_a[index]*t101331*(ccaa1*gcaa*t101332*t101297*(-8.0/3.0)-ccaa2* \
                   gamma_aa[index]*t101301*t101127*t101334*(3.2E1/3.0)+ccaa1*gamma_aa[index]*t101301*t101127*t101336* \
                   8.0+ccaa2*t101301*t101126*t101127*t101353*t101339*(1.6E1/3.0)+ccaa4*t101350*t101128*t101344*t101138* \
                   t101345*(3.2E1/3.0)+ccaa4*t101128*t101129*t101138*t101345*(gcaa*t101297*(3.2E1/3.0)+gamma_aa[index]* \
                   t101301*t101127*6.4E1+gamma_aa[index]*t101126*t101128*t101344*(1.28E2/3.0)+gcaa*t101126*t101127*t101337* \
                   9.6E1)-ccaa1*gcaa*1.0/(t101133*t101133*t101133)*t101126*t101127*t101337*(1.6E1/3.0)+ccaa2*t101130* \
                   t101126*t101127*t101339*(gcaa*t101297*(1.6E1/3.0)+gamma_aa[index]*t101301*t101127*(3.2E1/3.0))-ccaa4* \
                   gamma_aa[index]*t101126*t101333*t101128*t101344*(1.28E2/3.0)+ccaa2*gamma_aa[index]*t101130*t101127* \
                   t101356*t101339*2.0-ccaa3*gcaa*t101126*t101127*t101335*t101337*2.4E1+ccaa4*gamma_aa[index]*t101126* \
                   t101128*t101129*t101345*t101365*4.0+ccaa3*gcaa*t101131*t101126*t101360*t101127*t101338*3.0-ccaa2*t101130* \
                   t101126*t101127*1.0/(t101146*t101146*t101146)*t101353*t101356*2.0-ccaa4*1.0/(t101143*t101143*t101143) \
                   *t101350*t101128*t101129*t101138*t101365*2.0+ccaa3*gamma_aa[index]*gcaa*t101131*t101126*t101127*t101338* \
                   (gcaa*t101297*8.0+gamma_aa[index]*t101301*t101127*3.2E1+gcaa*t101126*t101127*t101337*2.4E1)+ccaa3* \
                   gamma_aa[index]*gcaa*t101126*t101127*t101343*t101337*t101338*8.0-ccaa3*gamma_aa[index]*gcaa*t101131* \
                   t101126*t101360*t101127*t101343*1.0/(t101137*t101137*t101137)*2.0)+rho_a[index]*t101379*(-t101251+ \
                   t101374+t101161*t101229*(t101251+t101373-t101374-t101231*t101372*t101366*t101367))-c0*t101440*t101444* \
                   (cx1*gx*t101415*t101297*(-8.0/3.0)+cx1*gamma_aa[index]*t101301*t101423*t101393*8.0-cx2*gamma_aa[index]* \
                   t101301*t101419*t101393*(3.2E1/3.0)+cx2*t101301*t101126*t101437*t101393*t101438*(1.6E1/3.0)+cx4*t101433* \
                   t101344*t101434*t101138*t101394*(3.2E1/3.0)+cx4*t101434*t101129*t101138*t101394*(gx*t101297*(3.2E1/ \
                   3.0)+gamma_aa[index]*t101301*t101393*6.4E1+gamma_aa[index]*t101126*t101344*t101394*(1.28E2/3.0)+gx* \
                   t101126*t101337*t101393*9.6E1)-cx1*gx*t101126*t101337*t101393*1.0/(t101396*t101396*t101396)*(1.6E1/ \
                   3.0)+cx2*t101130*t101126*t101393*t101438*(gx*t101297*(1.6E1/3.0)+gamma_aa[index]*t101301*t101393*(3.2E1/ \
                   3.0))+cx2*gamma_aa[index]*t101130*t101393*t101438*t101447*2.0-cx4*gamma_aa[index]*t101126*t101344* \
                   t101417*t101394*(1.28E2/3.0)-cx3*gx*t101421*t101126*t101337*t101393*2.4E1+cx4*gamma_aa[index]*t101126* \
                   t101434*t101129*t101456*t101394*4.0+cx3*gx*t101131*t101126*t101451*t101428*t101393*3.0-cx2*t101130* \
                   t101126*1.0/(t101408*t101408*t101408)*t101437*t101393*t101447*2.0-cx4*1.0/(t101405*t101405*t101405) \
                   *t101433*t101129*t101138*t101456*t101394*2.0+cx3*gamma_aa[index]*gx*t101131*t101126*t101428*t101393* \
                   (gx*t101297*8.0+gamma_aa[index]*t101301*t101393*3.2E1+gx*t101126*t101337*t101393*2.4E1)+cx3*gamma_aa[index]* \
                   gx*t101126*t101337*t101427*t101428*t101393*8.0-cx3*gamma_aa[index]*gx*1.0/(t101400*t101400*t101400) \
                   *t101131*t101126*t101451*t101427*t101393*2.0)-c0*pow(rho_a[index],1.0/3.0)*t101444*t101439*(4.0/3.0) \
                   +c0*t101440*t101439*(omega*t101388*(omega*t101383*(-8.334140006820045E15/2.81474976710656E14)+t101386* \
                   (omega*t101383*(2.778046668940015E15/1.40737488355328E14)-omega*t101380*t101382*(7.0368744177664E13/ \
                   8.334140006820045E15))+omega*t101380*t101382*(7.0368744177664E13/8.334140006820045E15)+t101384*t101386* \
                   t101388*(t101392-omega*t101380*t101390*(7.0368744177664E13/8.334140006820045E15))*(2.778046668940015E15/ \
                   7.0368744177664E13)-1.0/sqrt(3.141592653589793)*1.0/pow(t101381,2.0/3.0)*t101386*t101389*(1.108777112152858E31/ \
                   1.584563250285287E29))*(4.0/3.0)+omega*t101414*t101383*(2.778046668940015E15/1.05553116266496E14)) \
                   ;
            } else if (rho_a[index] > cutoff_) {
                double t103958 = 1.0/pow(rho_a[index],1.0/3.0);
                double t103959 = c*t103958;
                double t103960 = sqrt(t103959);
                double t103961 = pow(t103959,3.0/2.0);
                double t103962 = c*c;
                double t103963 = 1.0/pow(rho_a[index],2.0/3.0);
                double t103964 = 1.0/c0p;
                double t103965 = b1p*t103960;
                double t103966 = b3p*t103961;
                double t103967 = b4p*t103962*t103963;
                double t103968 = b2p*c*t103958;
                double t103969 = t103965+t103966+t103967+t103968;
                double t103970 = 1.0/t103969;
                double t103971 = t103970*t103964*(1.0/2.0);
                double t103972 = t103971+1.0;
                double t103973 = log(t103972);
                double t103974 = a1p*c*t103958;
                double t103975 = t103974+1.0;
                double t103976 = 1.0/pow(rho_a[index],8.0/3.0);
                double t103977 = gamma_aa[index]*gamma_aa[index];
                double t103978 = gcaa*gcaa;
                double t103979 = t103978*t103978;
                double t103980 = 1.0/pow(rho_a[index],3.2E1/3.0);
                double t103981 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t103982 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t103983 = gamma_aa[index]*gcaa*t103976;
                double t103984 = t103983+1.0;
                double t103985 = gamma_aa[index]*gcaa*t103976*3.0;
                double t103986 = gamma_aa[index]*gcaa*t103982*t103977*t103978;
                double t103987 = t103981*t103977*t103978*3.0;
                double t103988 = t103985+t103986+t103987+1.0;
                double t103989 = t103977*t103977;
                double t103990 = gamma_aa[index]*gcaa*t103976*4.0;
                double t103991 = gamma_aa[index]*gcaa*t103982*t103977*t103978*4.0;
                double t103992 = t103981*t103977*t103978*6.0;
                double t103993 = t103980*t103979*t103989;
                double t103994 = t103990+t103991+t103992+t103993+1.0;
                double t103995 = gamma_aa[index]*gcaa*t103976*2.0;
                double t103996 = t103981*t103977*t103978;
                double t103997 = t103995+t103996+1.0;
                double t103998 = pow(2.0,1.0/3.0);
                double t103999 = t103998*2.0;
                double t104000 = t103999-2.0;
                double t104001 = two_13*2.0;
                double t104002 = t104001-2.0;
                double t104003 = 1.0/t104002;
                double t104004 = 1.0/c0f;
                double t104005 = b1f*t103960;
                double t104006 = b3f*t103961;
                double t104007 = b4f*t103962*t103963;
                double t104008 = b2f*c*t103958;
                double t104009 = t104005+t104006+t104007+t104008;
                double t104010 = 1.0/t104009;
                double t104011 = t104010*t104004*(1.0/2.0);
                double t104012 = t104011+1.0;
                double t104013 = log(t104012);
                double t104014 = a1f*c*t103958;
                double t104015 = t104014+1.0;
                double t104016 = c0f*t104013*t104015*2.0;
                double t104017 = c0p*t103973*t103975*2.0;
                double t104018 = 1.0/t103984;
                double t104019 = 1.0/t103994;
                double t104020 = 1.0/t103997;
                double t104021 = 1.0/t103988;
                double t104022 = 1.0/pow(rho_a[index],1.9E1/3.0);
                double t104023 = 1.0/(t103984*t103984);
                double t104024 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]*rho_a[index]);
                double t104025 = 1.0/pow(rho_a[index],1.1E1/3.0);
                double t104026 = 1.0/(t103988*t103988);
                double t104027 = 1.0/(t103997*t103997);
                double t104028 = gcaa*t103976*3.0;
                double t104029 = gamma_aa[index]*t103981*t103978*6.0;
                double t104030 = gcaa*t103982*t103977*t103978*3.0;
                double t104031 = t104030+t104028+t104029;
                double t104032 = 1.0/pow(rho_a[index],3.5E1/3.0);
                double t104033 = 1.0/(t103994*t103994);
                double t104034 = gcaa*t103976*4.0;
                double t104035 = gamma_aa[index]*t103981*t103978*1.2E1;
                double t104036 = gcaa*t103982*t103977*t103978*1.2E1;
                double t104037 = gamma_aa[index]*t103980*t103977*t103979*4.0;
                double t104038 = t104034+t104035+t104036+t104037;
                double t104039 = gcaa*t103976*2.0;
                double t104040 = gamma_aa[index]*t103981*t103978*2.0;
                double t104041 = t104040+t104039;
                double t104042 = gamma_aa[index]*gcaa*t104025*(1.6E1/3.0);
                double t104043 = t104022*t103977*t103978*(1.6E1/3.0);
                double t104044 = t104042+t104043;
                double t104045 = gamma_aa[index]*gcaa*t104025*8.0;
                double t104046 = gamma_aa[index]*gcaa*t104024*t103977*t103978*8.0;
                double t104047 = t104022*t103977*t103978*1.6E1;
                double t104048 = t104045+t104046+t104047;
                double t104049 = gamma_aa[index]*gcaa*t104025*(3.2E1/3.0);
                double t104050 = gamma_aa[index]*gcaa*t104024*t103977*t103978*3.2E1;
                double t104051 = t104022*t103977*t103978*3.2E1;
                double t104052 = t104032*t103979*t103989*(3.2E1/3.0);
                double t104053 = t104050+t104051+t104052+t104049;
                double t104054 = 1.0/pow(rho_a[index],4.0/3.0);
                double t104055 = 1.0/pow(rho_a[index],5.0/3.0);
                double t104056 = 1.0/sqrt(t103959);
                double t104057 = 1.0/t103972;
                double t104058 = 1.0/(t103969*t103969);
                double t104059 = b4p*t104055*t103962*(2.0/3.0);
                double t104060 = b2p*c*t104054*(1.0/3.0);
                double t104061 = b1p*c*t104054*t104056*(1.0/6.0);
                double t104062 = b3p*c*t104054*t103960*(1.0/2.0);
                double t104063 = t104060+t104061+t104062+t104059;
                double t104064 = t104063*t104057*t104058*t103975;
                double t104065 = ccaa1*gcaa*t104018*t103976;
                double t104066 = ccaa4*gamma_aa[index]*t104019*t103980*t103977*t103979*4.0;
                double t104067 = ccaa2*gamma_aa[index]*t104020*t103981*t103978*2.0;
                double t104068 = ccaa3*gcaa*t104021*t103982*t103977*t103978*3.0;
                double t104069 = t104065+t104066+t104067+t104068-ccaa1*gamma_aa[index]*t104023*t103981*t103978-ccaa2* \
                   t104041*t104027*t103981*t103977*t103978-ccaa4*t104033*t104038*t103980*t103979*t103989-ccaa3*gamma_aa[index]* \
                   gcaa*t104031*t104026*t103982*t103977*t103978;
                double t104070 = omega*omega;
                double t104071 = rho_a[index]*(8.334140006820045E15/1.40737488355328E14);
                double t104072 = 1.0/(rho_a[index]*rho_a[index]);
                double t104073 = 1.0/pow(t104071,4.0/3.0);
                double t104074 = 1.0/(omega*omega);
                double t104075 = pow(t104071,2.0/3.0);
                double t104077 = t104074*t104075;
                double t104076 = exp(-t104077);
                double t104078 = 1.0/pow(t104071,1.0/3.0);
                double t104079 = 1.0/omega;
                double t104080 = 1.0/rho_a[index];
                double t104081 = omega*t104070*t104080*(7.0368744177664E13/8.334140006820045E15);
                double t104082 = omega*t104078;
                double t104083 = gx*gx;
                double t104084 = t104083*t104083;
                double t104085 = gamma_aa[index]*gx*t103976;
                double t104086 = t104085+1.0;
                double t104087 = gamma_aa[index]*gx*t103976*3.0;
                double t104088 = gamma_aa[index]*gx*t104083*t103982*t103977;
                double t104089 = t104083*t103981*t103977*3.0;
                double t104090 = t104087+t104088+t104089+1.0;
                double t104091 = gamma_aa[index]*gx*t103976*4.0;
                double t104092 = gamma_aa[index]*gx*t104083*t103982*t103977*4.0;
                double t104093 = t104083*t103981*t103977*6.0;
                double t104094 = t104084*t103980*t103989;
                double t104095 = t104091+t104092+t104093+t104094+1.0;
                double t104096 = gamma_aa[index]*gx*t103976*2.0;
                double t104097 = t104083*t103981*t103977;
                double t104098 = t104096+t104097+1.0;
                double t104099 = pow(t104071,1.0/3.0);
                double t104100 = t104079*t104099;
                double t104101 = erf(t104100);
                double t104102 = t104101*(3.991211251234741E15/2.251799813685248E15);
                double t104103 = t104081-t104082;
                double t104131 = t104103*t104076;
                double t104132 = omega*t104078*(3.0/2.0);
                double t104104 = t104102-t104131-t104132+t104081;
                double t104105 = 1.0/t104086;
                double t104106 = cx1*gx*t104105*t103976;
                double t104107 = 1.0/t104095;
                double t104108 = cx4*gamma_aa[index]*t104107*t104084*t103980*t103977*4.0;
                double t104109 = 1.0/t104098;
                double t104110 = cx2*gamma_aa[index]*t104109*t104083*t103981*2.0;
                double t104111 = 1.0/t104090;
                double t104112 = cx3*gx*t104111*t104083*t103982*t103977*3.0;
                double t104113 = 1.0/(t104086*t104086);
                double t104114 = gx*t103976*3.0;
                double t104115 = gamma_aa[index]*t104083*t103981*6.0;
                double t104116 = gx*t104083*t103982*t103977*3.0;
                double t104117 = t104114+t104115+t104116;
                double t104118 = 1.0/(t104090*t104090);
                double t104119 = gx*t103976*4.0;
                double t104120 = gamma_aa[index]*t104083*t103981*1.2E1;
                double t104121 = gx*t104083*t103982*t103977*1.2E1;
                double t104122 = gamma_aa[index]*t104084*t103980*t103977*4.0;
                double t104123 = t104120+t104121+t104122+t104119;
                double t104124 = 1.0/(t104095*t104095);
                double t104125 = gx*t103976*2.0;
                double t104126 = gamma_aa[index]*t104083*t103981*2.0;
                double t104127 = t104125+t104126;
                double t104128 = 1.0/(t104098*t104098);
                double t104129 = t104110+t104112+t104106+t104108-cx1*gamma_aa[index]*t104113*t104083*t103981-cx2* \
                   t104127*t104083*t104128*t103981*t103977-cx4*t104123*t104124*t104084*t103980*t103989-cx3*gamma_aa[index]* \
                   gx*t104117*t104118*t104083*t103982*t103977;
                double t104130 = pow(rho_a[index],4.0/3.0);
                double t104133 = omega*t104104*t104078*(4.0/3.0);
                double t104134 = t104133-1.0;
                double t104135 = gamma_aa[index]*gx*t104025*(1.6E1/3.0);
                double t104136 = t104022*t104083*t103977*(1.6E1/3.0);
                double t104137 = t104135+t104136;
                double t104138 = gamma_aa[index]*gx*t104025*8.0;
                double t104139 = gamma_aa[index]*gx*t104024*t104083*t103977*8.0;
                double t104140 = t104022*t104083*t103977*1.6E1;
                double t104141 = t104140+t104138+t104139;
                double t104142 = gamma_aa[index]*gx*t104025*(3.2E1/3.0);
                double t104143 = gamma_aa[index]*gx*t104024*t104083*t103977*3.2E1;
                double t104144 = t104022*t104083*t103977*3.2E1;
                double t104145 = t104032*t104084*t103989*(3.2E1/3.0);
                double t104146 = t104142+t104143+t104144+t104145;
                v_rho_a_gamma_aa_[index] = -t104069*(t104017+t104000*t104003*(t104016-c0p*t103973*t103975*2.0))+rho_a[index]* \
                   t104069*(-t104064+t104000*t104003*(t104064-(t104015*1.0/(t104009*t104009)*(b2f*c*t104054*(1.0/3.0) \
                   +b4f*t104055*t103962*(2.0/3.0)+b1f*c*t104054*t104056*(1.0/6.0)+b3f*c*t104054*t103960*(1.0/2.0)))/t104012+ \
                   a1f*c*c0f*t104013*t104054*(2.0/3.0)-a1p*c*c0p*t104054*t103973*(2.0/3.0))+a1p*c*c0p*t104054*t103973* \
                   (2.0/3.0))-rho_a[index]*(t104017+t104000*t104003*(t104016-t104017))*(ccaa1*gcaa*t104025*t104018*(- \
                   8.0/3.0)-ccaa2*gamma_aa[index]*t104020*t104022*t103978*(3.2E1/3.0)+ccaa1*gamma_aa[index]*t104022*t104023* \
                   t103978*8.0+ccaa2*t104022*t104041*t104027*t103977*t103978*(1.6E1/3.0)+ccaa4*t104032*t104033*t104038* \
                   t103979*t103989*(3.2E1/3.0)+ccaa4*t104033*t103980*t103979*t103989*(gcaa*t104025*(3.2E1/3.0)+gamma_aa[index]* \
                   t104022*t103978*6.4E1+gamma_aa[index]*t104032*t103977*t103979*(1.28E2/3.0)+gcaa*t104024*t103977*t103978* \
                   9.6E1)-ccaa1*gcaa*t104024*1.0/(t103984*t103984*t103984)*t103977*t103978*(1.6E1/3.0)+ccaa2*t104027* \
                   t103981*t103977*t103978*(gcaa*t104025*(1.6E1/3.0)+gamma_aa[index]*t104022*t103978*(3.2E1/3.0))+ccaa2* \
                   gamma_aa[index]*t104044*t104027*t103981*t103978*2.0-ccaa4*gamma_aa[index]*t104032*t104019*t103977* \
                   t103979*(1.28E2/3.0)-ccaa3*gcaa*t104021*t104024*t103977*t103978*2.4E1+ccaa4*gamma_aa[index]*t104033* \
                   t104053*t103980*t103977*t103979*4.0+ccaa3*gcaa*t104026*t104048*t103982*t103977*t103978*3.0-ccaa2*t104041* \
                   t104044*t103981*t103977*t103978*1.0/(t103997*t103997*t103997)*2.0-ccaa4*t104053*t104038*t103980*1.0/ \
                   (t103994*t103994*t103994)*t103979*t103989*2.0+ccaa3*gamma_aa[index]*gcaa*t104026*t103982*t103977*t103978* \
                   (gcaa*t104025*8.0+gamma_aa[index]*t104022*t103978*3.2E1+gcaa*t104024*t103977*t103978*2.4E1)+ccaa3* \
                   gamma_aa[index]*gcaa*t104031*t104024*t104026*t103977*t103978*8.0-ccaa3*gamma_aa[index]*gcaa*t104031* \
                   t104048*t103982*t103977*t103978*1.0/(t103988*t103988*t103988)*2.0)-c0*t104130*t104134*(cx1*gx*t104105* \
                   t104025*(-8.0/3.0)+cx1*gamma_aa[index]*t104022*t104113*t104083*8.0-cx2*gamma_aa[index]*t104022*t104109* \
                   t104083*(3.2E1/3.0)+cx2*t104022*t104127*t104083*t104128*t103977*(1.6E1/3.0)+cx4*t104032*t104123*t104124* \
                   t104084*t103989*(3.2E1/3.0)+cx4*t104124*t104084*t103980*t103989*(gx*t104025*(3.2E1/3.0)+gamma_aa[index]* \
                   t104022*t104083*6.4E1+gamma_aa[index]*t104032*t104084*t103977*(1.28E2/3.0)+gx*t104024*t104083*t103977* \
                   9.6E1)-cx1*gx*t104024*t104083*1.0/(t104086*t104086*t104086)*t103977*(1.6E1/3.0)+cx2*t104083*t104128* \
                   t103981*t103977*(gx*t104025*(1.6E1/3.0)+gamma_aa[index]*t104022*t104083*(3.2E1/3.0))+cx2*gamma_aa[index]* \
                   t104083*t104128*t104137*t103981*2.0-cx4*gamma_aa[index]*t104032*t104107*t104084*t103977*(1.28E2/3.0) \
                   -cx3*gx*t104111*t104024*t104083*t103977*2.4E1+cx4*gamma_aa[index]*t104124*t104146*t104084*t103980* \
                   t103977*4.0+cx3*gx*t104141*t104118*t104083*t103982*t103977*3.0-cx2*t104127*t104083*t104137*t103981* \
                   1.0/(t104098*t104098*t104098)*t103977*2.0-cx4*t104123*t104146*t104084*1.0/(t104095*t104095*t104095) \
                   *t103980*t103989*2.0+cx3*gamma_aa[index]*gx*t104118*t104083*t103982*t103977*(gx*t104025*8.0+gamma_aa[index]* \
                   t104022*t104083*3.2E1+gx*t104024*t104083*t103977*2.4E1)+cx3*gamma_aa[index]*gx*t104024*t104117*t104118* \
                   t104083*t103977*8.0-cx3*gamma_aa[index]*gx*t104141*1.0/(t104090*t104090*t104090)*t104117*t104083*t103982* \
                   t103977*2.0)-c0*pow(rho_a[index],1.0/3.0)*t104134*t104129*(4.0/3.0)+c0*t104130*t104129*(omega*t104078* \
                   (omega*t104073*(-8.334140006820045E15/2.81474976710656E14)+t104076*(omega*t104073*(2.778046668940015E15/ \
                   1.40737488355328E14)-omega*t104070*t104072*(7.0368744177664E13/8.334140006820045E15))+omega*t104070* \
                   t104072*(7.0368744177664E13/8.334140006820045E15)+t104074*t104076*t104078*(t104082-omega*t104070*t104080* \
                   (7.0368744177664E13/8.334140006820045E15))*(2.778046668940015E15/7.0368744177664E13)-1.0/sqrt(3.141592653589793) \
                   *1.0/pow(t104071,2.0/3.0)*t104076*t104079*(1.108777112152858E31/1.584563250285287E29))*(4.0/3.0)+omega* \
                   t104104*t104073*(2.778046668940015E15/1.05553116266496E14));
            } else if (rho_b[index] > cutoff_) {
                v_rho_a_gamma_aa_[index] = 0.0;
            } else {
                v_rho_a_gamma_aa_[index] = 0.0;
            }

            //V_rho_a_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_a_gamma_ab_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_a_gamma_ab_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_a_gamma_ab_[index] = 0.0;
            } else {
                v_rho_a_gamma_ab_[index] = 0.0;
            }

            //V_rho_a_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t101459 = rho_a[index]+rho_b[index];
                double t101460 = 1.0/pow(t101459,1.0/3.0);
                double t101461 = c*t101460;
                double t101462 = sqrt(t101461);
                double t101463 = b1p*t101462;
                double t101464 = pow(t101461,3.0/2.0);
                double t101465 = b3p*t101464;
                double t101466 = c*c;
                double t101467 = 1.0/pow(t101459,2.0/3.0);
                double t101468 = b4p*t101466*t101467;
                double t101469 = b2p*c*t101460;
                double t101470 = t101463+t101465+t101468+t101469;
                double t101471 = 1.0/pow(t101459,4.0/3.0);
                double t101472 = 1.0/c0p;
                double t101473 = 1.0/t101470;
                double t101474 = t101472*t101473*(1.0/2.0);
                double t101475 = t101474+1.0;
                double t101476 = a1p*c*t101460;
                double t101477 = t101476+1.0;
                double t101478 = rho_a[index]-rho_b[index];
                double t101479 = t101478*t101478;
                double t101480 = 1.0/t101459;
                double t101481 = t101480*t101478;
                double t101482 = two_13*2.0;
                double t101483 = t101482-2.0;
                double t101484 = 1.0/t101483;
                double t101485 = 1.0/c0f;
                double t101486 = b1f*t101462;
                double t101487 = b3f*t101464;
                double t101488 = b4f*t101466*t101467;
                double t101489 = b2f*c*t101460;
                double t101490 = t101486+t101487+t101488+t101489;
                double t101491 = 1.0/t101490;
                double t101492 = t101491*t101485*(1.0/2.0);
                double t101493 = t101492+1.0;
                double t101494 = log(t101493);
                double t101495 = a1f*c*t101460;
                double t101496 = t101495+1.0;
                double t101497 = log(t101475);
                double t101507 = c0f*t101494*t101496*2.0;
                double t101508 = c0p*t101477*t101497*2.0;
                double t101498 = t101507-t101508;
                double t101499 = t101481+1.0;
                double t101500 = pow(t101499,4.0/3.0);
                double t101501 = -t101481+1.0;
                double t101502 = pow(t101501,4.0/3.0);
                double t101503 = t101500+t101502-2.0;
                double t101504 = 1.0/(t101459*t101459);
                double t101535 = t101504*t101478;
                double t101505 = t101480-t101535;
                double t101506 = 1.0/(t101459*t101459*t101459*t101459);
                double t101509 = t101479*t101479;
                double t101510 = 1.0/pow(t101459,5.0/3.0);
                double t101511 = 1.0/sqrt(t101461);
                double t101512 = 1.0/t101475;
                double t101513 = 1.0/(t101470*t101470);
                double t101514 = b4p*t101510*t101466*(2.0/3.0);
                double t101515 = b2p*c*t101471*(1.0/3.0);
                double t101516 = b1p*c*t101511*t101471*(1.0/6.0);
                double t101517 = b3p*c*t101462*t101471*(1.0/2.0);
                double t101518 = t101514+t101515+t101516+t101517;
                double t101519 = t101512*t101513*t101518*t101477;
                double t101520 = 1.0/(t101459*t101459*t101459*t101459*t101459);
                double t101521 = 1.0/d2fz0;
                double t101522 = 1.0/Aa;
                double t101523 = b1a*t101462;
                double t101524 = b3a*t101464;
                double t101525 = b4a*t101466*t101467;
                double t101526 = b2a*c*t101460;
                double t101527 = t101523+t101524+t101525+t101526;
                double t101528 = 1.0/t101527;
                double t101529 = t101522*t101528*(1.0/2.0);
                double t101530 = t101529+1.0;
                double t101531 = log(t101530);
                double t101532 = a1a*c*t101460;
                double t101533 = t101532+1.0;
                double t101534 = pow(t101499,1.0/3.0);
                double t101536 = t101505*t101534*(4.0/3.0);
                double t101537 = pow(t101501,1.0/3.0);
                double t101538 = t101536-t101505*t101537*(4.0/3.0);
                double t101539 = t101506*t101509;
                double t101540 = t101539-1.0;
                double t101541 = 1.0/pow(rho_a[index],1.0/3.0);
                double t101542 = c*t101541;
                double t101543 = sqrt(t101542);
                double t101544 = b1f*t101543;
                double t101545 = pow(t101542,3.0/2.0);
                double t101546 = b3f*t101545;
                double t101547 = 1.0/pow(rho_a[index],2.0/3.0);
                double t101548 = b4f*t101466*t101547;
                double t101549 = b2f*c*t101541;
                double t101550 = t101544+t101546+t101548+t101549;
                double t101551 = 1.0/pow(rho_a[index],4.0/3.0);
                double t101552 = b1p*t101543;
                double t101553 = b3p*t101545;
                double t101554 = b4p*t101466*t101547;
                double t101555 = b2p*c*t101541;
                double t101556 = t101552+t101553+t101554+t101555;
                double t101557 = 1.0/pow(rho_a[index],5.0/3.0);
                double t101558 = 1.0/sqrt(t101542);
                double t101559 = 1.0/t101550;
                double t101560 = t101485*t101559*(1.0/2.0);
                double t101561 = t101560+1.0;
                double t101562 = 1.0/t101556;
                double t101563 = t101472*t101562*(1.0/2.0);
                double t101564 = t101563+1.0;
                double t101565 = a1p*c*t101541;
                double t101566 = t101565+1.0;
                double t101567 = 1.0/t101564;
                double t101568 = 1.0/(t101556*t101556);
                double t101569 = b4p*t101466*t101557*(2.0/3.0);
                double t101570 = b2p*c*t101551*(1.0/3.0);
                double t101571 = b1p*c*t101551*t101558*(1.0/6.0);
                double t101572 = b3p*c*t101551*t101543*(1.0/2.0);
                double t101573 = t101570+t101571+t101572+t101569;
                double t101574 = t101573*t101566*t101567*t101568;
                double t101575 = log(t101564);
                double t101576 = pow(2.0,1.0/3.0);
                double t101577 = t101576*2.0;
                double t101578 = t101577-2.0;
                double t101579 = log(t101561);
                double t101580 = a1f*c*t101541;
                double t101581 = t101580+1.0;
                double t101582 = 1.0/pow(rho_b[index],8.0/3.0);
                double t101583 = 1.0/pow(rho_a[index],8.0/3.0);
                double t101584 = gamma_aa[index]*t101583*(1.0/2.0);
                double t101585 = gamma_bb[index]*t101582*(1.0/2.0);
                double t101586 = t101584+t101585;
                double t101587 = gcab*t101586;
                double t101588 = t101587+1.0;
                double t101589 = gcab*gcab;
                double t101590 = t101586*t101586;
                double t101591 = t101589*t101589;
                double t101592 = t101590*t101590;
                double t101593 = t101590*t101589;
                double t101594 = gcab*t101586*2.0;
                double t101595 = t101593+t101594+1.0;
                double t101596 = t101590*t101589*3.0;
                double t101597 = gcab*t101590*t101586*t101589;
                double t101598 = gcab*t101586*3.0;
                double t101599 = t101596+t101597+t101598+1.0;
                double t101600 = t101590*t101589*6.0;
                double t101601 = gcab*t101590*t101586*t101589*4.0;
                double t101602 = t101591*t101592;
                double t101603 = gcab*t101586*4.0;
                double t101604 = t101600+t101601+t101602+t101603+1.0;
                double t101605 = c0f*t101581*t101579*2.0;
                double t101607 = c0p*t101566*t101575*2.0;
                double t101606 = t101605-t101607;
                double t101608 = 1.0/pow(rho_b[index],1.0/3.0);
                double t101609 = c*t101608;
                double t101610 = sqrt(t101609);
                double t101611 = pow(t101609,3.0/2.0);
                double t101612 = 1.0/pow(rho_b[index],2.0/3.0);
                double t101613 = b1p*t101610;
                double t101614 = b3p*t101611;
                double t101615 = b4p*t101612*t101466;
                double t101616 = b2p*c*t101608;
                double t101617 = t101613+t101614+t101615+t101616;
                double t101618 = 1.0/t101617;
                double t101619 = t101472*t101618*(1.0/2.0);
                double t101620 = t101619+1.0;
                double t101621 = log(t101620);
                double t101622 = a1p*c*t101608;
                double t101623 = t101622+1.0;
                double t101624 = c0p*t101621*t101623*2.0;
                double t101625 = t101503*t101506*t101509*t101484*t101498;
                double t101626 = Aa*t101503*t101521*t101531*t101540*t101533*t101484*2.0;
                double t101627 = 1.0/pow(rho_a[index],1.1E1/3.0);
                double t101628 = 1.0/(t101599*t101599);
                double t101629 = 1.0/(t101604*t101604);
                double t101630 = gcab*t101582*2.0;
                double t101631 = t101582*t101586*t101589*6.0;
                double t101632 = gcab*t101590*t101582*t101589*6.0;
                double t101633 = t101590*t101582*t101591*t101586*2.0;
                double t101634 = t101630+t101631+t101632+t101633;
                double t101635 = 1.0/(t101595*t101595);
                double t101636 = gamma_aa[index]*gcab*t101627*(8.0/3.0);
                double t101637 = gamma_aa[index]*t101627*t101586*t101589*(8.0/3.0);
                double t101638 = t101636+t101637;
                double t101639 = gcab*t101582;
                double t101640 = t101582*t101586*t101589;
                double t101641 = t101640+t101639;
                double t101642 = gamma_aa[index]*gcab*t101627*(1.6E1/3.0);
                double t101643 = gamma_aa[index]*gcab*t101590*t101627*t101589*1.6E1;
                double t101644 = gamma_aa[index]*t101590*t101591*t101627*t101586*(1.6E1/3.0);
                double t101645 = gamma_aa[index]*t101627*t101586*t101589*1.6E1;
                double t101646 = t101642+t101643+t101644+t101645;
                double t101647 = 1.0/(t101588*t101588);
                double t101648 = 1.0/t101595;
                double t101649 = gcab*t101582*(3.0/2.0);
                double t101650 = t101582*t101586*t101589*3.0;
                double t101651 = gcab*t101590*t101582*t101589*(3.0/2.0);
                double t101652 = t101650+t101651+t101649;
                double t101653 = gamma_aa[index]*gcab*t101627*4.0;
                double t101654 = gamma_aa[index]*gcab*t101590*t101627*t101589*4.0;
                double t101655 = gamma_aa[index]*t101627*t101586*t101589*8.0;
                double t101656 = t101653+t101654+t101655;
                double t101657 = 1.0/t101599;
                double t101658 = 1.0/t101604;
                v_rho_a_gamma_bb_[index] = -(t101508+t101625+t101626+t101459*(t101519-t101503*t101506*t101509*t101484* \
                   (t101519-(1.0/(t101490*t101490)*t101496*(b2f*c*t101471*(1.0/3.0)+b4f*t101510*t101466*(2.0/3.0)+b1f* \
                   c*t101511*t101471*(1.0/6.0)+b3f*c*t101462*t101471*(1.0/2.0)))/t101493+a1f*c*c0f*t101471*t101494*(2.0/ \
                   3.0)-a1p*c*c0p*t101471*t101497*(2.0/3.0))-a1p*c*c0p*t101471*t101497*(2.0/3.0)-t101520*t101503*t101509* \
                   t101484*t101498*4.0+t101506*t101509*t101484*t101538*t101498+t101503*t101506*t101484*t101478*t101479* \
                   t101498*4.0-Aa*t101503*t101521*t101531*t101533*t101484*(t101520*t101509*4.0-t101506*t101478*t101479* \
                   4.0)*2.0+Aa*t101521*t101531*t101540*t101533*t101484*t101538*2.0+(t101503*t101521*t101540*t101533*1.0/ \
                   (t101527*t101527)*t101484*(b2a*c*t101471*(1.0/3.0)+b4a*t101510*t101466*(2.0/3.0)+b1a*c*t101511*t101471* \
                   (1.0/6.0)+b3a*c*t101462*t101471*(1.0/2.0)))/t101530-Aa*a1a*c*t101503*t101521*t101531*t101540*t101471* \
                   t101484*(2.0/3.0))+rho_a[index]*(-t101574+t101484*t101578*(t101574-(1.0/(t101550*t101550)*t101581* \
                   (b2f*c*t101551*(1.0/3.0)+b4f*t101466*t101557*(2.0/3.0)+b1f*c*t101551*t101558*(1.0/6.0)+b3f*c*t101551* \
                   t101543*(1.0/2.0)))/t101561+a1f*c*c0f*t101551*t101579*(2.0/3.0)-a1p*c*c0p*t101551*t101575*(2.0/3.0) \
                   )+a1p*c*c0p*t101551*t101575*(2.0/3.0))-c0p*t101566*t101575*2.0-t101606*t101484*t101578)*((ccab1*gcab* \
                   t101582*(1.0/2.0))/t101588-ccab2*t101641*t101590*t101635*t101589-ccab4*t101634*t101591*t101592*t101629- \
                   ccab1*t101582*t101647*t101586*t101589*(1.0/2.0)+ccab2*t101582*t101648*t101586*t101589+ccab4*t101590* \
                   t101582*t101591*t101586*t101658*2.0+ccab3*gcab*t101590*t101582*t101657*t101589*(3.0/2.0)-ccab3*gcab* \
                   t101652*t101590*t101628*t101586*t101589)+(rho_a[index]*(t101607+t101606*t101484*t101578)+rho_b[index]* \
                   (t101624-t101484*t101578*(t101624-c0f*log((t101485*(1.0/2.0))/(b1f*t101610+b3f*t101611+b2f*c*t101608+ \
                   b4f*t101612*t101466)+1.0)*(a1f*c*t101608+1.0)*2.0))-t101459*(t101508+t101625+t101626))*(ccab4*t101591* \
                   t101592*t101629*(gamma_aa[index]*t101582*t101627*t101589*8.0+gamma_aa[index]*t101590*t101582*t101591* \
                   t101627*8.0+gamma_aa[index]*gcab*t101582*t101627*t101586*t101589*1.6E1)+ccab2*t101635*t101582*t101638* \
                   t101586*t101589-ccab4*1.0/(t101604*t101604*t101604)*t101634*t101591*t101592*t101646*2.0-ccab2*t101641* \
                   t101590*t101638*1.0/(t101595*t101595*t101595)*t101589*2.0+ccab1*gamma_aa[index]*t101582*t101627*t101647* \
                   t101589*(4.0/3.0)-ccab2*gamma_aa[index]*t101582*t101627*t101648*t101589*(4.0/3.0)+ccab2*gamma_aa[index]* \
                   t101590*t101635*t101582*t101591*t101627*(4.0/3.0)-ccab4*gamma_aa[index]*t101590*t101582*t101591*t101627* \
                   t101658*8.0+ccab2*gamma_aa[index]*t101641*t101635*t101627*t101586*t101589*(8.0/3.0)+ccab3*gcab*t101590* \
                   t101582*t101628*t101656*t101589*(3.0/2.0)+ccab4*t101590*t101582*t101591*t101646*t101629*t101586*2.0+ \
                   ccab3*gcab*t101590*t101628*t101586*t101589*(gamma_aa[index]*t101582*t101627*t101589*4.0+gamma_aa[index]* \
                   gcab*t101582*t101627*t101586*t101589*4.0)-ccab1*gamma_aa[index]*gcab*t101582*t101627*t101586*1.0/(t101588* \
                   t101588*t101588)*t101589*(4.0/3.0)-ccab3*gcab*t101652*t101590*t101656*t101586*t101589*1.0/(t101599* \
                   t101599*t101599)*2.0+ccab3*gamma_aa[index]*gcab*t101652*t101590*t101627*t101628*t101589*4.0-ccab3* \
                   gamma_aa[index]*gcab*t101582*t101627*t101657*t101586*t101589*4.0+ccab4*gamma_aa[index]*t101634*t101590* \
                   t101591*t101627*t101629*t101586*(1.6E1/3.0));
            } else if (rho_a[index] > cutoff_) {
                v_rho_a_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_a_gamma_bb_[index] = 0.0;
            } else {
                v_rho_a_gamma_bb_[index] = 0.0;
            }

            //V_rho_b_gamma_aa
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t101660 = rho_a[index]+rho_b[index];
                double t101661 = 1.0/pow(t101660,1.0/3.0);
                double t101662 = c*t101661;
                double t101663 = sqrt(t101662);
                double t101664 = b1p*t101663;
                double t101665 = pow(t101662,3.0/2.0);
                double t101666 = b3p*t101665;
                double t101667 = c*c;
                double t101668 = 1.0/pow(t101660,2.0/3.0);
                double t101669 = b4p*t101667*t101668;
                double t101670 = b2p*c*t101661;
                double t101671 = t101670+t101664+t101666+t101669;
                double t101672 = 1.0/pow(t101660,4.0/3.0);
                double t101673 = 1.0/c0p;
                double t101674 = 1.0/t101671;
                double t101675 = t101673*t101674*(1.0/2.0);
                double t101676 = t101675+1.0;
                double t101677 = a1p*c*t101661;
                double t101678 = t101677+1.0;
                double t101679 = rho_a[index]-rho_b[index];
                double t101680 = t101679*t101679;
                double t101681 = 1.0/t101660;
                double t101682 = t101681*t101679;
                double t101683 = two_13*2.0;
                double t101684 = t101683-2.0;
                double t101685 = 1.0/t101684;
                double t101686 = 1.0/c0f;
                double t101687 = b1f*t101663;
                double t101688 = b3f*t101665;
                double t101689 = b4f*t101667*t101668;
                double t101690 = b2f*c*t101661;
                double t101691 = t101690+t101687+t101688+t101689;
                double t101692 = 1.0/t101691;
                double t101693 = t101692*t101686*(1.0/2.0);
                double t101694 = t101693+1.0;
                double t101695 = log(t101694);
                double t101696 = a1f*c*t101661;
                double t101697 = t101696+1.0;
                double t101698 = log(t101676);
                double t101709 = c0f*t101695*t101697*2.0;
                double t101710 = c0p*t101678*t101698*2.0;
                double t101699 = -t101710+t101709;
                double t101700 = t101682+1.0;
                double t101701 = pow(t101700,4.0/3.0);
                double t101702 = -t101682+1.0;
                double t101703 = pow(t101702,4.0/3.0);
                double t101704 = t101701+t101703-2.0;
                double t101705 = 1.0/(t101660*t101660);
                double t101706 = t101705*t101679;
                double t101707 = t101706+t101681;
                double t101708 = 1.0/(t101660*t101660*t101660*t101660);
                double t101711 = t101680*t101680;
                double t101712 = 1.0/pow(t101660,5.0/3.0);
                double t101713 = 1.0/sqrt(t101662);
                double t101714 = 1.0/t101676;
                double t101715 = 1.0/(t101671*t101671);
                double t101716 = b4p*t101712*t101667*(2.0/3.0);
                double t101717 = b2p*c*t101672*(1.0/3.0);
                double t101718 = b1p*c*t101713*t101672*(1.0/6.0);
                double t101719 = b3p*c*t101663*t101672*(1.0/2.0);
                double t101720 = t101716+t101717+t101718+t101719;
                double t101721 = 1.0/(t101660*t101660*t101660*t101660*t101660);
                double t101722 = 1.0/d2fz0;
                double t101723 = 1.0/Aa;
                double t101724 = b1a*t101663;
                double t101725 = b3a*t101665;
                double t101726 = b4a*t101667*t101668;
                double t101727 = b2a*c*t101661;
                double t101728 = t101724+t101725+t101726+t101727;
                double t101729 = 1.0/t101728;
                double t101730 = t101723*t101729*(1.0/2.0);
                double t101731 = t101730+1.0;
                double t101732 = log(t101731);
                double t101733 = a1a*c*t101661;
                double t101734 = t101733+1.0;
                double t101735 = pow(t101700,1.0/3.0);
                double t101736 = t101707*t101735*(4.0/3.0);
                double t101737 = pow(t101702,1.0/3.0);
                double t101738 = t101736-t101707*t101737*(4.0/3.0);
                double t101739 = t101711*t101708;
                double t101740 = t101739-1.0;
                double t101741 = 1.0/pow(rho_b[index],1.0/3.0);
                double t101742 = c*t101741;
                double t101743 = sqrt(t101742);
                double t101744 = b1f*t101743;
                double t101745 = pow(t101742,3.0/2.0);
                double t101746 = b3f*t101745;
                double t101747 = 1.0/pow(rho_b[index],2.0/3.0);
                double t101748 = b4f*t101747*t101667;
                double t101749 = b2f*c*t101741;
                double t101750 = t101744+t101746+t101748+t101749;
                double t101751 = 1.0/pow(rho_b[index],4.0/3.0);
                double t101752 = b1p*t101743;
                double t101753 = b3p*t101745;
                double t101754 = b4p*t101747*t101667;
                double t101755 = b2p*c*t101741;
                double t101756 = t101752+t101753+t101754+t101755;
                double t101757 = 1.0/pow(rho_b[index],5.0/3.0);
                double t101758 = 1.0/sqrt(t101742);
                double t101759 = 1.0/t101750;
                double t101760 = t101686*t101759*(1.0/2.0);
                double t101761 = t101760+1.0;
                double t101762 = 1.0/t101756;
                double t101763 = t101762*t101673*(1.0/2.0);
                double t101764 = t101763+1.0;
                double t101765 = a1p*c*t101741;
                double t101766 = t101765+1.0;
                double t101767 = 1.0/t101764;
                double t101768 = 1.0/(t101756*t101756);
                double t101769 = b4p*t101667*t101757*(2.0/3.0);
                double t101770 = b2p*c*t101751*(1.0/3.0);
                double t101771 = b1p*c*t101751*t101758*(1.0/6.0);
                double t101772 = b3p*c*t101751*t101743*(1.0/2.0);
                double t101773 = t101770+t101771+t101772+t101769;
                double t101774 = t101773*t101766*t101767*t101768;
                double t101775 = log(t101764);
                double t101776 = pow(2.0,1.0/3.0);
                double t101777 = t101776*2.0;
                double t101778 = t101777-2.0;
                double t101779 = log(t101761);
                double t101780 = a1f*c*t101741;
                double t101781 = t101780+1.0;
                double t101782 = 1.0/pow(rho_a[index],8.0/3.0);
                double t101783 = gamma_aa[index]*t101782*(1.0/2.0);
                double t101784 = 1.0/pow(rho_b[index],8.0/3.0);
                double t101785 = gamma_bb[index]*t101784*(1.0/2.0);
                double t101786 = t101783+t101785;
                double t101787 = gcab*t101786;
                double t101788 = t101787+1.0;
                double t101789 = gcab*gcab;
                double t101790 = t101786*t101786;
                double t101791 = t101789*t101789;
                double t101792 = t101790*t101790;
                double t101793 = t101790*t101789;
                double t101794 = gcab*t101786*2.0;
                double t101795 = t101793+t101794+1.0;
                double t101796 = t101790*t101789*3.0;
                double t101797 = gcab*t101790*t101786*t101789;
                double t101798 = gcab*t101786*3.0;
                double t101799 = t101796+t101797+t101798+1.0;
                double t101800 = t101790*t101789*6.0;
                double t101801 = gcab*t101790*t101786*t101789*4.0;
                double t101802 = t101791*t101792;
                double t101803 = gcab*t101786*4.0;
                double t101804 = t101800+t101801+t101802+t101803+1.0;
                double t101805 = a1p*c*c0p*t101672*t101698*(2.0/3.0);
                double t101806 = 1.0/pow(rho_a[index],1.0/3.0);
                double t101807 = c*t101806;
                double t101808 = sqrt(t101807);
                double t101809 = pow(t101807,3.0/2.0);
                double t101810 = 1.0/pow(rho_a[index],2.0/3.0);
                double t101811 = b1p*t101808;
                double t101812 = b3p*t101809;
                double t101813 = b4p*t101810*t101667;
                double t101814 = b2p*c*t101806;
                double t101815 = t101811+t101812+t101813+t101814;
                double t101816 = 1.0/t101815;
                double t101817 = t101816*t101673*(1.0/2.0);
                double t101818 = t101817+1.0;
                double t101819 = log(t101818);
                double t101820 = a1p*c*t101806;
                double t101821 = t101820+1.0;
                double t101822 = c0p*t101821*t101819*2.0;
                double t101823 = c0f*t101781*t101779*2.0;
                double t101825 = c0p*t101766*t101775*2.0;
                double t101824 = t101823-t101825;
                double t101826 = t101711*t101704*t101708*t101685*t101699;
                double t101827 = Aa*t101704*t101722*t101740*t101732*t101734*t101685*2.0;
                double t101828 = 1.0/pow(rho_b[index],1.1E1/3.0);
                double t101829 = 1.0/(t101799*t101799);
                double t101830 = 1.0/(t101804*t101804);
                double t101831 = gcab*t101782*2.0;
                double t101832 = t101782*t101786*t101789*6.0;
                double t101833 = gcab*t101790*t101782*t101789*6.0;
                double t101834 = t101790*t101782*t101791*t101786*2.0;
                double t101835 = t101831+t101832+t101833+t101834;
                double t101836 = 1.0/(t101795*t101795);
                double t101837 = gamma_bb[index]*gcab*t101828*(8.0/3.0);
                double t101838 = gamma_bb[index]*t101828*t101786*t101789*(8.0/3.0);
                double t101839 = t101837+t101838;
                double t101840 = gcab*t101782;
                double t101841 = t101782*t101786*t101789;
                double t101842 = t101840+t101841;
                double t101843 = gamma_bb[index]*gcab*t101828*(1.6E1/3.0);
                double t101844 = gamma_bb[index]*gcab*t101790*t101828*t101789*1.6E1;
                double t101845 = gamma_bb[index]*t101790*t101791*t101828*t101786*(1.6E1/3.0);
                double t101846 = gamma_bb[index]*t101828*t101786*t101789*1.6E1;
                double t101847 = t101843+t101844+t101845+t101846;
                double t101848 = 1.0/(t101788*t101788);
                double t101849 = 1.0/t101795;
                double t101850 = gcab*t101782*(3.0/2.0);
                double t101851 = t101782*t101786*t101789*3.0;
                double t101852 = gcab*t101790*t101782*t101789*(3.0/2.0);
                double t101853 = t101850+t101851+t101852;
                double t101854 = gamma_bb[index]*gcab*t101828*4.0;
                double t101855 = gamma_bb[index]*gcab*t101790*t101828*t101789*4.0;
                double t101856 = gamma_bb[index]*t101828*t101786*t101789*8.0;
                double t101857 = t101854+t101855+t101856;
                double t101858 = 1.0/t101799;
                double t101859 = 1.0/t101804;
                v_rho_b_gamma_aa_[index] = (rho_b[index]*(t101825+t101824*t101685*t101778)+rho_a[index]*(t101822- \
                   t101685*t101778*(t101822-c0f*log((t101686*(1.0/2.0))/(b1f*t101808+b3f*t101809+b2f*c*t101806+b4f*t101810* \
                   t101667)+1.0)*(a1f*c*t101806+1.0)*2.0))-t101660*(t101710+t101826+t101827))*(ccab4*t101830*t101791* \
                   t101792*(gamma_bb[index]*t101782*t101828*t101789*8.0+gamma_bb[index]*t101790*t101782*t101791*t101828* \
                   8.0+gamma_bb[index]*gcab*t101782*t101828*t101786*t101789*1.6E1)+ccab2*t101782*t101836*t101839*t101786* \
                   t101789-ccab4*1.0/(t101804*t101804*t101804)*t101835*t101791*t101792*t101847*2.0-ccab2*t101842*t101790* \
                   t101839*1.0/(t101795*t101795*t101795)*t101789*2.0+ccab1*gamma_bb[index]*t101782*t101828*t101848*t101789* \
                   (4.0/3.0)-ccab2*gamma_bb[index]*t101782*t101828*t101849*t101789*(4.0/3.0)+ccab2*gamma_bb[index]*t101790* \
                   t101782*t101791*t101836*t101828*(4.0/3.0)-ccab4*gamma_bb[index]*t101790*t101782*t101791*t101828*t101859* \
                   8.0+ccab2*gamma_bb[index]*t101842*t101836*t101828*t101786*t101789*(8.0/3.0)+ccab3*gcab*t101790*t101782* \
                   t101829*t101857*t101789*(3.0/2.0)+ccab4*t101830*t101790*t101782*t101791*t101847*t101786*2.0+ccab3* \
                   gcab*t101790*t101829*t101786*t101789*(gamma_bb[index]*t101782*t101828*t101789*4.0+gamma_bb[index]* \
                   gcab*t101782*t101828*t101786*t101789*4.0)-ccab1*gamma_bb[index]*gcab*t101782*t101828*t101786*1.0/(t101788* \
                   t101788*t101788)*t101789*(4.0/3.0)-ccab3*gcab*t101790*t101853*t101857*t101786*t101789*1.0/(t101799* \
                   t101799*t101799)*2.0+ccab3*gamma_bb[index]*gcab*t101790*t101853*t101828*t101829*t101789*4.0-ccab3* \
                   gamma_bb[index]*gcab*t101782*t101828*t101786*t101858*t101789*4.0+ccab4*gamma_bb[index]*t101830*t101790* \
                   t101835*t101791*t101828*t101786*(1.6E1/3.0))-(t101710+t101826+t101827+rho_b[index]*(-t101774+t101685* \
                   t101778*(t101774-(1.0/(t101750*t101750)*t101781*(b2f*c*t101751*(1.0/3.0)+b4f*t101667*t101757*(2.0/ \
                   3.0)+b1f*c*t101751*t101758*(1.0/6.0)+b3f*c*t101751*t101743*(1.0/2.0)))/t101761+a1f*c*c0f*t101751*t101779* \
                   (2.0/3.0)-a1p*c*c0p*t101751*t101775*(2.0/3.0))+a1p*c*c0p*t101751*t101775*(2.0/3.0))-t101660*(t101805- \
                   t101720*t101714*t101715*t101678+t101711*t101721*t101704*t101685*t101699*4.0+t101711*t101708*t101738* \
                   t101685*t101699-t101711*t101704*t101708*t101685*(t101805-t101720*t101714*t101715*t101678+(1.0/(t101691* \
                   t101691)*t101697*(b2f*c*t101672*(1.0/3.0)+b4f*t101712*t101667*(2.0/3.0)+b1f*c*t101713*t101672*(1.0/ \
                   6.0)+b3f*c*t101663*t101672*(1.0/2.0)))/t101694-a1f*c*c0f*t101672*t101695*(2.0/3.0))+t101704*t101680* \
                   t101708*t101685*t101679*t101699*4.0+Aa*t101704*t101722*t101732*t101734*t101685*(t101711*t101721*4.0+ \
                   t101680*t101708*t101679*4.0)*2.0+Aa*t101722*t101740*t101732*t101734*t101738*t101685*2.0-(t101704*t101722* \
                   t101740*t101734*1.0/(t101728*t101728)*t101685*(b2a*c*t101672*(1.0/3.0)+b4a*t101712*t101667*(2.0/3.0) \
                   +b1a*c*t101713*t101672*(1.0/6.0)+b3a*c*t101663*t101672*(1.0/2.0)))/t101731+Aa*a1a*c*t101704*t101722* \
                   t101740*t101732*t101672*t101685*(2.0/3.0))-c0p*t101766*t101775*2.0-t101824*t101685*t101778)*((ccab1* \
                   gcab*t101782*(1.0/2.0))/t101788-ccab4*t101830*t101835*t101791*t101792-ccab2*t101842*t101790*t101836* \
                   t101789-ccab1*t101782*t101848*t101786*t101789*(1.0/2.0)+ccab2*t101782*t101786*t101849*t101789+ccab4* \
                   t101790*t101782*t101791*t101786*t101859*2.0+ccab3*gcab*t101790*t101782*t101858*t101789*(3.0/2.0)-ccab3* \
                   gcab*t101790*t101853*t101829*t101786*t101789);
            } else if (rho_a[index] > cutoff_) {
                v_rho_b_gamma_aa_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_b_gamma_aa_[index] = 0.0;
            } else {
                v_rho_b_gamma_aa_[index] = 0.0;
            }

            //V_rho_b_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_b_gamma_ab_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_b_gamma_ab_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_b_gamma_ab_[index] = 0.0;
            } else {
                v_rho_b_gamma_ab_[index] = 0.0;
            }

            //V_rho_b_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t101862 = 1.0/pow(rho_b[index],1.0/3.0);
                double t101863 = c*t101862;
                double t101864 = sqrt(t101863);
                double t101865 = pow(t101863,3.0/2.0);
                double t101866 = c*c;
                double t101867 = 1.0/pow(rho_b[index],2.0/3.0);
                double t101868 = 1.0/c0p;
                double t101869 = b1p*t101864;
                double t101870 = b3p*t101865;
                double t101871 = b4p*t101866*t101867;
                double t101872 = b2p*c*t101862;
                double t101873 = t101870+t101871+t101872+t101869;
                double t101874 = 1.0/t101873;
                double t101875 = t101874*t101868*(1.0/2.0);
                double t101876 = t101875+1.0;
                double t101877 = log(t101876);
                double t101878 = a1p*c*t101862;
                double t101879 = t101878+1.0;
                double t101880 = 1.0/pow(rho_b[index],8.0/3.0);
                double t101881 = gamma_bb[index]*gamma_bb[index];
                double t101882 = gcaa*gcaa;
                double t101883 = t101882*t101882;
                double t101884 = 1.0/pow(rho_b[index],3.2E1/3.0);
                double t101885 = 1.0/pow(rho_b[index],1.6E1/3.0);
                double t101886 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]);
                double t101887 = gamma_bb[index]*gcaa*t101880;
                double t101888 = t101887+1.0;
                double t101889 = gamma_bb[index]*gcaa*t101880*3.0;
                double t101890 = gamma_bb[index]*gcaa*t101881*t101882*t101886;
                double t101891 = t101881*t101882*t101885*3.0;
                double t101892 = t101890+t101891+t101889+1.0;
                double t101893 = t101881*t101881;
                double t101894 = gamma_bb[index]*gcaa*t101880*4.0;
                double t101895 = gamma_bb[index]*gcaa*t101881*t101882*t101886*4.0;
                double t101896 = t101881*t101882*t101885*6.0;
                double t101897 = t101883*t101884*t101893;
                double t101898 = t101894+t101895+t101896+t101897+1.0;
                double t101899 = gamma_bb[index]*gcaa*t101880*2.0;
                double t101900 = t101881*t101882*t101885;
                double t101901 = t101900+t101899+1.0;
                double t101902 = rho_a[index]+rho_b[index];
                double t101903 = 1.0/pow(t101902,1.0/3.0);
                double t101904 = c*t101903;
                double t101905 = sqrt(t101904);
                double t101906 = b1p*t101905;
                double t101907 = pow(t101904,3.0/2.0);
                double t101908 = b3p*t101907;
                double t101909 = 1.0/pow(t101902,2.0/3.0);
                double t101910 = b4p*t101909*t101866;
                double t101911 = b2p*c*t101903;
                double t101912 = t101910+t101911+t101906+t101908;
                double t101913 = 1.0/pow(t101902,4.0/3.0);
                double t101914 = two_13*2.0;
                double t101915 = t101914-2.0;
                double t101916 = 1.0/t101915;
                double t101917 = 1.0/c0f;
                double t101918 = 1.0/t101912;
                double t101919 = t101918*t101868*(1.0/2.0);
                double t101920 = t101919+1.0;
                double t101921 = a1p*c*t101903;
                double t101922 = t101921+1.0;
                double t101923 = rho_a[index]-rho_b[index];
                double t101924 = t101923*t101923;
                double t101925 = 1.0/t101902;
                double t101926 = t101923*t101925;
                double t101927 = b1f*t101905;
                double t101928 = b3f*t101907;
                double t101929 = b4f*t101909*t101866;
                double t101930 = b2f*c*t101903;
                double t101931 = t101930+t101927+t101928+t101929;
                double t101932 = 1.0/t101931;
                double t101933 = t101932*t101917*(1.0/2.0);
                double t101934 = t101933+1.0;
                double t101935 = log(t101934);
                double t101936 = a1f*c*t101903;
                double t101937 = t101936+1.0;
                double t101938 = log(t101920);
                double t101949 = c0f*t101935*t101937*2.0;
                double t101950 = c0p*t101922*t101938*2.0;
                double t101939 = -t101950+t101949;
                double t101940 = t101926+1.0;
                double t101941 = pow(t101940,4.0/3.0);
                double t101942 = -t101926+1.0;
                double t101943 = pow(t101942,4.0/3.0);
                double t101944 = t101941+t101943-2.0;
                double t101945 = 1.0/(t101902*t101902);
                double t101946 = t101923*t101945;
                double t101947 = t101925+t101946;
                double t101948 = 1.0/(t101902*t101902*t101902*t101902);
                double t101951 = t101924*t101924;
                double t101952 = 1.0/pow(t101902,5.0/3.0);
                double t101953 = 1.0/sqrt(t101904);
                double t101954 = 1.0/t101920;
                double t101955 = 1.0/(t101912*t101912);
                double t101956 = b4p*t101952*t101866*(2.0/3.0);
                double t101957 = b2p*c*t101913*(1.0/3.0);
                double t101958 = b1p*c*t101913*t101953*(1.0/6.0);
                double t101959 = b3p*c*t101913*t101905*(1.0/2.0);
                double t101960 = t101956+t101957+t101958+t101959;
                double t101961 = 1.0/(t101902*t101902*t101902*t101902*t101902);
                double t101962 = 1.0/d2fz0;
                double t101963 = 1.0/Aa;
                double t101964 = b1a*t101905;
                double t101965 = b3a*t101907;
                double t101966 = b4a*t101909*t101866;
                double t101967 = b2a*c*t101903;
                double t101968 = t101964+t101965+t101966+t101967;
                double t101969 = 1.0/t101968;
                double t101970 = t101963*t101969*(1.0/2.0);
                double t101971 = t101970+1.0;
                double t101972 = log(t101971);
                double t101973 = a1a*c*t101903;
                double t101974 = t101973+1.0;
                double t101975 = pow(t101940,1.0/3.0);
                double t101976 = t101947*t101975*(4.0/3.0);
                double t101977 = pow(t101942,1.0/3.0);
                double t101978 = t101976-t101947*t101977*(4.0/3.0);
                double t101979 = t101951*t101948;
                double t101980 = t101979-1.0;
                double t101981 = pow(2.0,1.0/3.0);
                double t101982 = t101981*2.0;
                double t101983 = t101982-2.0;
                double t101984 = a1f*c*t101862;
                double t101985 = t101984+1.0;
                double t101986 = b1f*t101864;
                double t101987 = b3f*t101865;
                double t101988 = b4f*t101866*t101867;
                double t101989 = b2f*c*t101862;
                double t101990 = t101986+t101987+t101988+t101989;
                double t101991 = 1.0/t101990;
                double t101992 = t101917*t101991*(1.0/2.0);
                double t101993 = t101992+1.0;
                double t101994 = 1.0/pow(rho_b[index],4.0/3.0);
                double t101995 = 1.0/pow(rho_b[index],5.0/3.0);
                double t101996 = 1.0/sqrt(t101863);
                double t101997 = log(t101993);
                double t101998 = 1.0/t101876;
                double t101999 = 1.0/(t101873*t101873);
                double t102000 = b4p*t101866*t101995*(2.0/3.0);
                double t102001 = b2p*c*t101994*(1.0/3.0);
                double t102002 = b1p*c*t101994*t101996*(1.0/6.0);
                double t102003 = b3p*c*t101864*t101994*(1.0/2.0);
                double t102004 = t102000+t102001+t102002+t102003;
                double t102005 = t102004*t101879*t101998*t101999;
                double t102006 = c0f*t101985*t101997*2.0;
                double t102007 = c0p*t101877*t101879*2.0;
                double t102008 = 1.0/pow(rho_a[index],8.0/3.0);
                double t102009 = gamma_aa[index]*t102008*(1.0/2.0);
                double t102010 = gamma_bb[index]*t101880*(1.0/2.0);
                double t102011 = t102010+t102009;
                double t102012 = gcab*t102011;
                double t102013 = t102012+1.0;
                double t102014 = gcab*gcab;
                double t102015 = t102011*t102011;
                double t102016 = t102014*t102014;
                double t102017 = t102015*t102015;
                double t102018 = t102014*t102015;
                double t102019 = gcab*t102011*2.0;
                double t102020 = t102018+t102019+1.0;
                double t102021 = t102014*t102015*3.0;
                double t102022 = gcab*t102011*t102014*t102015;
                double t102023 = gcab*t102011*3.0;
                double t102024 = t102021+t102022+t102023+1.0;
                double t102025 = t102014*t102015*6.0;
                double t102026 = gcab*t102011*t102014*t102015*4.0;
                double t102027 = t102016*t102017;
                double t102028 = gcab*t102011*4.0;
                double t102029 = t102025+t102026+t102027+t102028+1.0;
                double t102030 = a1p*c*c0p*t101913*t101938*(2.0/3.0);
                double t102031 = 1.0/pow(rho_a[index],1.0/3.0);
                double t102032 = c*t102031;
                double t102033 = sqrt(t102032);
                double t102034 = pow(t102032,3.0/2.0);
                double t102035 = 1.0/pow(rho_a[index],2.0/3.0);
                double t102036 = b1p*t102033;
                double t102037 = b3p*t102034;
                double t102038 = b4p*t102035*t101866;
                double t102039 = b2p*c*t102031;
                double t102040 = t102036+t102037+t102038+t102039;
                double t102041 = 1.0/t102040;
                double t102042 = t102041*t101868*(1.0/2.0);
                double t102043 = t102042+1.0;
                double t102044 = log(t102043);
                double t102045 = a1p*c*t102031;
                double t102046 = t102045+1.0;
                double t102047 = c0p*t102044*t102046*2.0;
                double t102048 = t102006-t102007;
                double t102049 = t101951*t101916*t101944*t101939*t101948;
                double t102050 = Aa*t101916*t101944*t101962*t101980*t101972*t101974*2.0;
                double t102051 = 1.0/t102013;
                double t102052 = 1.0/pow(rho_b[index],1.1E1/3.0);
                double t102053 = 1.0/(t102013*t102013);
                double t102054 = 1.0/t102020;
                double t102055 = 1.0/(t102024*t102024);
                double t102056 = 1.0/pow(rho_b[index],1.9E1/3.0);
                double t102057 = 1.0/(t102020*t102020);
                double t102058 = 1.0/t102024;
                double t102059 = 1.0/t102029;
                double t102060 = 1.0/(t102029*t102029);
                double t102061 = gcab*t101880*2.0;
                double t102062 = t102011*t102014*t101880*6.0;
                double t102063 = gcab*t102014*t102015*t101880*6.0;
                double t102064 = t102011*t102015*t102016*t101880*2.0;
                double t102065 = t102061+t102062+t102063+t102064;
                double t102066 = gamma_bb[index]*gcab*t102052*(8.0/3.0);
                double t102067 = gamma_bb[index]*t102011*t102014*t102052*(8.0/3.0);
                double t102068 = t102066+t102067;
                double t102069 = gcab*t101880;
                double t102070 = t102011*t102014*t101880;
                double t102071 = t102070+t102069;
                double t102072 = gamma_bb[index]*gcab*t102052*(1.6E1/3.0);
                double t102073 = gamma_bb[index]*gcab*t102014*t102015*t102052*1.6E1;
                double t102074 = gamma_bb[index]*t102011*t102015*t102016*t102052*(1.6E1/3.0);
                double t102075 = gamma_bb[index]*t102011*t102014*t102052*1.6E1;
                double t102076 = t102072+t102073+t102074+t102075;
                double t102077 = gcab*t101880*(3.0/2.0);
                double t102078 = t102011*t102014*t101880*3.0;
                double t102079 = gcab*t102014*t102015*t101880*(3.0/2.0);
                double t102080 = t102077+t102078+t102079;
                double t102081 = gamma_bb[index]*gcab*t102052*4.0;
                double t102082 = gamma_bb[index]*gcab*t102014*t102015*t102052*4.0;
                double t102083 = gamma_bb[index]*t102011*t102014*t102052*8.0;
                double t102084 = t102081+t102082+t102083;
                double t102085 = t102048*t101916*t101983;
                double t102086 = t102007+t102085;
                double t102087 = 1.0/t101888;
                double t102088 = 1.0/t101898;
                double t102089 = 1.0/t101901;
                double t102090 = 1.0/t101892;
                double t102091 = 1.0/(t101888*t101888);
                double t102092 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]*rho_b[index]);
                double t102093 = 1.0/(t101892*t101892);
                double t102094 = 1.0/(t101901*t101901);
                double t102095 = gcaa*t101880*3.0;
                double t102096 = gamma_bb[index]*t101882*t101885*6.0;
                double t102097 = gcaa*t101881*t101882*t101886*3.0;
                double t102098 = t102095+t102096+t102097;
                double t102099 = 1.0/pow(rho_b[index],3.5E1/3.0);
                double t102100 = 1.0/(t101898*t101898);
                double t102101 = gcaa*t101880*4.0;
                double t102102 = gamma_bb[index]*t101882*t101885*1.2E1;
                double t102103 = gcaa*t101881*t101882*t101886*1.2E1;
                double t102104 = gamma_bb[index]*t101881*t101883*t101884*4.0;
                double t102105 = t102101+t102102+t102103+t102104;
                double t102106 = gcaa*t101880*2.0;
                double t102107 = gamma_bb[index]*t101882*t101885*2.0;
                double t102108 = t102106+t102107;
                double t102109 = gamma_bb[index]*gcaa*t102052*(1.6E1/3.0);
                double t102110 = t102056*t101881*t101882*(1.6E1/3.0);
                double t102111 = t102110+t102109;
                double t102112 = gamma_bb[index]*gcaa*t102052*8.0;
                double t102113 = gamma_bb[index]*gcaa*t102092*t101881*t101882*8.0;
                double t102114 = t102056*t101881*t101882*1.6E1;
                double t102115 = t102112+t102113+t102114;
                double t102116 = gamma_bb[index]*gcaa*t102052*(3.2E1/3.0);
                double t102117 = gamma_bb[index]*gcaa*t102092*t101881*t101882*3.2E1;
                double t102118 = t102056*t101881*t101882*3.2E1;
                double t102119 = t101883*t102099*t101893*(3.2E1/3.0);
                double t102120 = t102116+t102117+t102118+t102119;
                double t102121 = 1.0/t101993;
                double t102122 = 1.0/(t101990*t101990);
                double t102123 = b4f*t101866*t101995*(2.0/3.0);
                double t102124 = b2f*c*t101994*(1.0/3.0);
                double t102125 = b1f*c*t101994*t101996*(1.0/6.0);
                double t102126 = b3f*c*t101864*t101994*(1.0/2.0);
                double t102127 = t102123+t102124+t102125+t102126;
                double t102128 = a1f*c*c0f*t101994*t101997*(2.0/3.0);
                double t102129 = a1p*c*c0p*t101877*t101994*(2.0/3.0);
                double t102130 = ccaa1*gcaa*t101880*t102087;
                double t102131 = ccaa4*gamma_bb[index]*t101881*t102088*t101883*t101884*4.0;
                double t102132 = ccaa2*gamma_bb[index]*t101882*t102089*t101885*2.0;
                double t102133 = ccaa3*gcaa*t102090*t101881*t101882*t101886*3.0;
                double t102134 = t102130+t102131+t102132+t102133-ccaa1*gamma_bb[index]*t102091*t101882*t101885-ccaa4* \
                   t102100*t102105*t101883*t101884*t101893-ccaa2*t102108*t102094*t101881*t101882*t101885-ccaa3*gamma_bb[index]* \
                   gcaa*t102093*t101881*t101882*t102098*t101886;
                double t102135 = omega*omega;
                double t102136 = rho_b[index]*(8.334140006820045E15/1.40737488355328E14);
                double t102137 = 1.0/(rho_b[index]*rho_b[index]);
                double t102138 = 1.0/pow(t102136,4.0/3.0);
                double t102139 = 1.0/(omega*omega);
                double t102140 = pow(t102136,2.0/3.0);
                double t102142 = t102140*t102139;
                double t102141 = exp(-t102142);
                double t102143 = 1.0/pow(t102136,1.0/3.0);
                double t102144 = 1.0/omega;
                double t102145 = 1.0/rho_b[index];
                double t102146 = omega*t102135*t102145*(7.0368744177664E13/8.334140006820045E15);
                double t102147 = omega*t102143;
                double t102148 = gx*gx;
                double t102149 = t102148*t102148;
                double t102150 = gamma_bb[index]*gx*t101880;
                double t102151 = t102150+1.0;
                double t102152 = gamma_bb[index]*gx*t101880*3.0;
                double t102153 = gamma_bb[index]*gx*t102148*t101881*t101886;
                double t102154 = t102148*t101881*t101885*3.0;
                double t102155 = t102152+t102153+t102154+1.0;
                double t102156 = gamma_bb[index]*gx*t101880*4.0;
                double t102157 = gamma_bb[index]*gx*t102148*t101881*t101886*4.0;
                double t102158 = t102148*t101881*t101885*6.0;
                double t102159 = t102149*t101884*t101893;
                double t102160 = t102156+t102157+t102158+t102159+1.0;
                double t102161 = gamma_bb[index]*gx*t101880*2.0;
                double t102162 = t102148*t101881*t101885;
                double t102163 = t102161+t102162+1.0;
                double t102164 = pow(t102136,1.0/3.0);
                double t102165 = t102144*t102164;
                double t102166 = erf(t102165);
                double t102167 = t102166*(3.991211251234741E15/2.251799813685248E15);
                double t102168 = t102146-t102147;
                double t102196 = t102141*t102168;
                double t102197 = omega*t102143*(3.0/2.0);
                double t102169 = t102146+t102167-t102196-t102197;
                double t102170 = 1.0/t102151;
                double t102171 = cx1*gx*t102170*t101880;
                double t102172 = 1.0/t102160;
                double t102173 = cx4*gamma_bb[index]*t102172*t102149*t101881*t101884*4.0;
                double t102174 = 1.0/t102163;
                double t102175 = cx2*gamma_bb[index]*t102174*t102148*t101885*2.0;
                double t102176 = 1.0/t102155;
                double t102177 = cx3*gx*t102148*t102176*t101881*t101886*3.0;
                double t102178 = 1.0/(t102151*t102151);
                double t102179 = gx*t101880*3.0;
                double t102180 = gamma_bb[index]*t102148*t101885*6.0;
                double t102181 = gx*t102148*t101881*t101886*3.0;
                double t102182 = t102180+t102181+t102179;
                double t102183 = 1.0/(t102155*t102155);
                double t102184 = gx*t101880*4.0;
                double t102185 = gamma_bb[index]*t102148*t101885*1.2E1;
                double t102186 = gx*t102148*t101881*t101886*1.2E1;
                double t102187 = gamma_bb[index]*t102149*t101881*t101884*4.0;
                double t102188 = t102184+t102185+t102186+t102187;
                double t102189 = 1.0/(t102160*t102160);
                double t102190 = gx*t101880*2.0;
                double t102191 = gamma_bb[index]*t102148*t101885*2.0;
                double t102192 = t102190+t102191;
                double t102193 = 1.0/(t102163*t102163);
                double t102194 = t102171+t102173+t102175+t102177-cx1*gamma_bb[index]*t102148*t102178*t101885-cx2* \
                   t102192*t102148*t102193*t101881*t101885-cx4*t102149*t102188*t102189*t101884*t101893-cx3*gamma_bb[index]* \
                   gx*t102182*t102183*t102148*t101881*t101886;
                double t102195 = pow(rho_b[index],4.0/3.0);
                double t102198 = omega*t102143*t102169*(4.0/3.0);
                double t102199 = t102198-1.0;
                double t102200 = gamma_bb[index]*gx*t102052*(1.6E1/3.0);
                double t102201 = t102056*t102148*t101881*(1.6E1/3.0);
                double t102202 = t102200+t102201;
                double t102203 = gamma_bb[index]*gx*t102052*8.0;
                double t102204 = gamma_bb[index]*gx*t102092*t102148*t101881*8.0;
                double t102205 = t102056*t102148*t101881*1.6E1;
                double t102206 = t102203+t102204+t102205;
                double t102207 = gamma_bb[index]*gx*t102052*(3.2E1/3.0);
                double t102208 = gamma_bb[index]*gx*t102092*t102148*t101881*3.2E1;
                double t102209 = t102056*t102148*t101881*3.2E1;
                double t102210 = t102149*t102099*t101893*(3.2E1/3.0);
                double t102211 = t102210+t102207+t102208+t102209;
                v_rho_b_gamma_bb_[index] = -(rho_b[index]*t102086+rho_a[index]*(t102047-t101916*t101983*(t102047- \
                   c0f*log((t101917*(1.0/2.0))/(b1f*t102033+b3f*t102034+b2f*c*t102031+b4f*t102035*t101866)+1.0)*(a1f* \
                   c*t102031+1.0)*2.0))-t101902*(t102050+t101950+t102049))*(ccab1*gcab*t102051*t102052*(4.0/3.0)-ccab2* \
                   t102014*t102015*t102057*(gcab*t102052*(8.0/3.0)+gamma_bb[index]*t102014*t102056*(4.0/3.0)+t102011* \
                   t102014*t102052*(8.0/3.0))-ccab4*t102060*t102016*t102017*(gcab*t102052*(1.6E1/3.0)+gamma_bb[index]* \
                   t102014*t102056*8.0+t102011*t102014*t102052*1.6E1+gamma_bb[index]*t102015*t102016*t102056*8.0+gcab* \
                   t102014*t102015*t102052*1.6E1+t102011*t102015*t102016*t102052*(1.6E1/3.0)+gamma_bb[index]*gcab*t102011* \
                   t102014*t102056*1.6E1)-ccab1*gamma_bb[index]*t102014*t102053*t102056*(4.0/3.0)+ccab2*gamma_bb[index]* \
                   t102014*t102054*t102056*(4.0/3.0)-ccab1*t102011*t102014*t102052*t102053*(4.0/3.0)+ccab2*t102011*t102014* \
                   t102052*t102054*(8.0/3.0)+ccab4*t102011*t102015*t102016*t102052*t102059*(1.6E1/3.0)-ccab2*t102011* \
                   t102014*t102057*t102068*t101880+ccab2*1.0/(t102020*t102020*t102020)*t102014*t102015*t102071*t102068* \
                   2.0+ccab4*t102016*t102017*1.0/(t102029*t102029*t102029)*t102065*t102076*2.0+ccab4*gamma_bb[index]* \
                   t102015*t102016*t102056*t102059*8.0+ccab3*gcab*t102014*t102015*t102052*t102058*4.0+ccab3*gamma_bb[index]* \
                   gcab*t102011*t102014*t102056*t102058*4.0-ccab2*gamma_bb[index]*t102011*t102014*t102052*t102071*t102057* \
                   (8.0/3.0)-ccab3*gcab*t102014*t102015*t102055*t102084*t101880*(3.0/2.0)-ccab4*t102011*t102015*t102060* \
                   t102016*t102076*t101880*2.0-ccab3*gcab*t102011*t102014*t102015*t102055*(gcab*t102052*4.0+gamma_bb[index]* \
                   t102014*t102056*4.0+t102011*t102014*t102052*8.0+gcab*t102014*t102015*t102052*4.0+gamma_bb[index]*gcab* \
                   t102011*t102014*t102056*4.0)+ccab1*gamma_bb[index]*gcab*t102011*1.0/(t102013*t102013*t102013)*t102014* \
                   t102056*(4.0/3.0)+ccab3*gcab*t102011*t102014*t102015*1.0/(t102024*t102024*t102024)*t102080*t102084* \
                   2.0-ccab3*gamma_bb[index]*gcab*t102014*t102015*t102052*t102080*t102055*4.0-ccab4*gamma_bb[index]*t102011* \
                   t102015*t102060*t102016*t102052*t102065*(1.6E1/3.0))-(t102050-t102007+t101950+t102049+rho_b[index]* \
                   (-t102005+t102129+t101916*t101983*(t102005+t102128-t102121*t102122*t102127*t101985-a1p*c*c0p*t101877* \
                   t101994*(2.0/3.0)))-t101902*(t102030-t101922*t101960*t101954*t101955+t101951*t101916*t101961*t101944* \
                   t101939*4.0+t101951*t101916*t101939*t101948*t101978-t101951*t101916*t101944*t101948*(t102030-t101922* \
                   t101960*t101954*t101955+(1.0/(t101931*t101931)*t101937*(b2f*c*t101913*(1.0/3.0)+b4f*t101952*t101866* \
                   (2.0/3.0)+b1f*c*t101913*t101953*(1.0/6.0)+b3f*c*t101913*t101905*(1.0/2.0)))/t101934-a1f*c*c0f*t101913* \
                   t101935*(2.0/3.0))+t101923*t101924*t101916*t101944*t101939*t101948*4.0+Aa*t101916*t101944*t101962* \
                   t101972*t101974*(t101951*t101961*4.0+t101923*t101924*t101948*4.0)*2.0+Aa*t101916*t101962*t101980*t101972* \
                   t101974*t101978*2.0-(t101916*t101944*t101962*t101980*t101974*1.0/(t101968*t101968)*(b2a*c*t101913* \
                   (1.0/3.0)+b4a*t101952*t101866*(2.0/3.0)+b1a*c*t101913*t101953*(1.0/6.0)+b3a*c*t101913*t101905*(1.0/ \
                   2.0)))/t101971+Aa*a1a*c*t101913*t101916*t101944*t101962*t101980*t101972*(2.0/3.0))-t102048*t101916* \
                   t101983)*(ccab1*gcab*t102051*t101880*(1.0/2.0)-ccab1*t102011*t102014*t102053*t101880*(1.0/2.0)+ccab2* \
                   t102011*t102014*t102054*t101880-ccab2*t102014*t102015*t102071*t102057-ccab4*t102060*t102016*t102017* \
                   t102065+ccab4*t102011*t102015*t102016*t102059*t101880*2.0+ccab3*gcab*t102014*t102015*t102058*t101880* \
                   (3.0/2.0)-ccab3*gcab*t102011*t102014*t102015*t102080*t102055)-t102134*(t102007+t101916*t101983*(t102006- \
                   c0p*t101877*t101879*2.0))-rho_b[index]*t102086*(ccaa1*gcaa*t102052*t102087*(-8.0/3.0)+ccaa1*gamma_bb[index]* \
                   t102091*t102056*t101882*8.0-ccaa2*gamma_bb[index]*t102056*t101882*t102089*(3.2E1/3.0)+ccaa4*t102100* \
                   t102105*t101883*t102099*t101893*(3.2E1/3.0)+ccaa2*t102108*t102056*t102094*t101881*t101882*(1.6E1/3.0) \
                   +ccaa4*t102100*t101883*t101884*t101893*(gcaa*t102052*(3.2E1/3.0)+gamma_bb[index]*t102056*t101882*6.4E1+ \
                   gamma_bb[index]*t101881*t101883*t102099*(1.28E2/3.0)+gcaa*t102092*t101881*t101882*9.6E1)-ccaa1*gcaa* \
                   t102092*t101881*t101882*1.0/(t101888*t101888*t101888)*(1.6E1/3.0)+ccaa2*t102094*t101881*t101882*t101885* \
                   (gcaa*t102052*(1.6E1/3.0)+gamma_bb[index]*t102056*t101882*(3.2E1/3.0))+ccaa2*gamma_bb[index]*t102111* \
                   t102094*t101882*t101885*2.0-ccaa4*gamma_bb[index]*t101881*t102088*t101883*t102099*(1.28E2/3.0)-ccaa3* \
                   gcaa*t102090*t102092*t101881*t101882*2.4E1+ccaa4*gamma_bb[index]*t102100*t102120*t101881*t101883*t101884* \
                   4.0+ccaa3*gcaa*t102115*t102093*t101881*t101882*t101886*3.0-ccaa2*t102111*1.0/(t101901*t101901*t101901) \
                   *t102108*t101881*t101882*t101885*2.0-ccaa4*t102120*t102105*t101883*t101884*t101893*1.0/(t101898*t101898* \
                   t101898)*2.0+ccaa3*gamma_bb[index]*gcaa*t102093*t101881*t101882*t101886*(gcaa*t102052*8.0+gamma_bb[index]* \
                   t102056*t101882*3.2E1+gcaa*t102092*t101881*t101882*2.4E1)+ccaa3*gamma_bb[index]*gcaa*t102092*t102093* \
                   t101881*t101882*t102098*8.0-ccaa3*gamma_bb[index]*gcaa*t102115*t101881*t101882*t102098*1.0/(t101892* \
                   t101892*t101892)*t101886*2.0)+rho_b[index]*t102134*(-t102005+t102129+t101916*t101983*(t102005+t102128- \
                   t102129-t102121*t102122*t102127*t101985))-c0*t102195*t102199*(cx1*gx*t102052*t102170*(-8.0/3.0)+cx1* \
                   gamma_bb[index]*t102056*t102148*t102178*8.0-cx2*gamma_bb[index]*t102056*t102174*t102148*(3.2E1/3.0) \
                   +cx2*t102056*t102192*t102148*t102193*t101881*(1.6E1/3.0)+cx4*t102149*t102188*t102099*t102189*t101893* \
                   (3.2E1/3.0)+cx4*t102149*t102189*t101884*t101893*(gx*t102052*(3.2E1/3.0)+gamma_bb[index]*t102056*t102148* \
                   6.4E1+gamma_bb[index]*t102149*t101881*t102099*(1.28E2/3.0)+gx*t102092*t102148*t101881*9.6E1)-cx1*gx* \
                   1.0/(t102151*t102151*t102151)*t102092*t102148*t101881*(1.6E1/3.0)+cx2*t102148*t102193*t101881*t101885* \
                   (gx*t102052*(1.6E1/3.0)+gamma_bb[index]*t102056*t102148*(3.2E1/3.0))+cx2*gamma_bb[index]*t102202*t102148* \
                   t102193*t101885*2.0-cx4*gamma_bb[index]*t102172*t102149*t101881*t102099*(1.28E2/3.0)-cx3*gx*t102092* \
                   t102148*t102176*t101881*2.4E1+cx4*gamma_bb[index]*t102211*t102149*t101881*t102189*t101884*4.0+cx3* \
                   gx*t102206*t102183*t102148*t101881*t101886*3.0-cx2*t102202*1.0/(t102163*t102163*t102163)*t102192*t102148* \
                   t101881*t101885*2.0-cx4*t102211*1.0/(t102160*t102160*t102160)*t102149*t102188*t101884*t101893*2.0+ \
                   cx3*gamma_bb[index]*gx*t102183*t102148*t101881*t101886*(gx*t102052*8.0+gamma_bb[index]*t102056*t102148* \
                   3.2E1+gx*t102092*t102148*t101881*2.4E1)+cx3*gamma_bb[index]*gx*t102092*t102182*t102183*t102148*t101881* \
                   8.0-cx3*gamma_bb[index]*gx*t102206*1.0/(t102155*t102155*t102155)*t102182*t102148*t101881*t101886*2.0) \
                   -c0*pow(rho_b[index],1.0/3.0)*t102194*t102199*(4.0/3.0)+c0*t102194*t102195*(omega*t102143*(omega*t102138* \
                   (-8.334140006820045E15/2.81474976710656E14)+t102141*(omega*t102138*(2.778046668940015E15/1.40737488355328E14) \
                   -omega*t102135*t102137*(7.0368744177664E13/8.334140006820045E15))+omega*t102135*t102137*(7.0368744177664E13/ \
                   8.334140006820045E15)+t102141*t102143*t102139*(t102147-omega*t102135*t102145*(7.0368744177664E13/8.334140006820045E15) \
                   )*(2.778046668940015E15/7.0368744177664E13)-1.0/sqrt(3.141592653589793)*t102141*t102144*1.0/pow(t102136,2.0/ \
                   3.0)*(1.108777112152858E31/1.584563250285287E29))*(4.0/3.0)+omega*t102138*t102169*(2.778046668940015E15/ \
                   1.05553116266496E14));
            } else if (rho_a[index] > cutoff_) {
                v_rho_b_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                double t103202 = 1.0/pow(rho_b[index],1.0/3.0);
                double t103203 = c*t103202;
                double t103204 = sqrt(t103203);
                double t103205 = pow(t103203,3.0/2.0);
                double t103206 = c*c;
                double t103207 = 1.0/pow(rho_b[index],2.0/3.0);
                double t103208 = 1.0/c0p;
                double t103209 = b1p*t103204;
                double t103210 = b3p*t103205;
                double t103211 = b4p*t103206*t103207;
                double t103212 = b2p*c*t103202;
                double t103213 = t103210+t103211+t103212+t103209;
                double t103214 = 1.0/t103213;
                double t103215 = t103214*t103208*(1.0/2.0);
                double t103216 = t103215+1.0;
                double t103217 = log(t103216);
                double t103218 = a1p*c*t103202;
                double t103219 = t103218+1.0;
                double t103220 = 1.0/pow(rho_b[index],8.0/3.0);
                double t103221 = gamma_bb[index]*gamma_bb[index];
                double t103222 = gcaa*gcaa;
                double t103223 = t103222*t103222;
                double t103224 = 1.0/pow(rho_b[index],3.2E1/3.0);
                double t103225 = 1.0/pow(rho_b[index],1.6E1/3.0);
                double t103226 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]);
                double t103227 = gamma_bb[index]*gcaa*t103220;
                double t103228 = t103227+1.0;
                double t103229 = gamma_bb[index]*gcaa*t103220*3.0;
                double t103230 = gamma_bb[index]*gcaa*t103221*t103222*t103226;
                double t103231 = t103221*t103222*t103225*3.0;
                double t103232 = t103230+t103231+t103229+1.0;
                double t103233 = t103221*t103221;
                double t103234 = gamma_bb[index]*gcaa*t103220*4.0;
                double t103235 = gamma_bb[index]*gcaa*t103221*t103222*t103226*4.0;
                double t103236 = t103221*t103222*t103225*6.0;
                double t103237 = t103223*t103224*t103233;
                double t103238 = t103234+t103235+t103236+t103237+1.0;
                double t103239 = gamma_bb[index]*gcaa*t103220*2.0;
                double t103240 = t103221*t103222*t103225;
                double t103241 = t103240+t103239+1.0;
                double t103242 = pow(2.0,1.0/3.0);
                double t103243 = t103242*2.0;
                double t103244 = t103243-2.0;
                double t103245 = two_13*2.0;
                double t103246 = t103245-2.0;
                double t103247 = 1.0/t103246;
                double t103248 = 1.0/c0f;
                double t103249 = b1f*t103204;
                double t103250 = b3f*t103205;
                double t103251 = b4f*t103206*t103207;
                double t103252 = b2f*c*t103202;
                double t103253 = t103250+t103251+t103252+t103249;
                double t103254 = 1.0/t103253;
                double t103255 = t103254*t103248*(1.0/2.0);
                double t103256 = t103255+1.0;
                double t103257 = log(t103256);
                double t103258 = a1f*c*t103202;
                double t103259 = t103258+1.0;
                double t103260 = c0f*t103257*t103259*2.0;
                double t103261 = c0p*t103217*t103219*2.0;
                double t103262 = 1.0/t103228;
                double t103263 = 1.0/t103238;
                double t103264 = 1.0/t103241;
                double t103265 = 1.0/t103232;
                double t103266 = 1.0/pow(rho_b[index],1.9E1/3.0);
                double t103267 = 1.0/(t103228*t103228);
                double t103268 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]*rho_b[index]);
                double t103269 = 1.0/pow(rho_b[index],1.1E1/3.0);
                double t103270 = 1.0/(t103232*t103232);
                double t103271 = 1.0/(t103241*t103241);
                double t103272 = gcaa*t103220*3.0;
                double t103273 = gamma_bb[index]*t103222*t103225*6.0;
                double t103274 = gcaa*t103221*t103222*t103226*3.0;
                double t103275 = t103272+t103273+t103274;
                double t103276 = 1.0/pow(rho_b[index],3.5E1/3.0);
                double t103277 = 1.0/(t103238*t103238);
                double t103278 = gcaa*t103220*4.0;
                double t103279 = gamma_bb[index]*t103222*t103225*1.2E1;
                double t103280 = gcaa*t103221*t103222*t103226*1.2E1;
                double t103281 = gamma_bb[index]*t103221*t103223*t103224*4.0;
                double t103282 = t103280+t103281+t103278+t103279;
                double t103283 = gcaa*t103220*2.0;
                double t103284 = gamma_bb[index]*t103222*t103225*2.0;
                double t103285 = t103283+t103284;
                double t103286 = gamma_bb[index]*gcaa*t103269*(1.6E1/3.0);
                double t103287 = t103221*t103222*t103266*(1.6E1/3.0);
                double t103288 = t103286+t103287;
                double t103289 = gamma_bb[index]*gcaa*t103269*8.0;
                double t103290 = gamma_bb[index]*gcaa*t103221*t103222*t103268*8.0;
                double t103291 = t103221*t103222*t103266*1.6E1;
                double t103292 = t103290+t103291+t103289;
                double t103293 = gamma_bb[index]*gcaa*t103269*(3.2E1/3.0);
                double t103294 = gamma_bb[index]*gcaa*t103221*t103222*t103268*3.2E1;
                double t103295 = t103221*t103222*t103266*3.2E1;
                double t103296 = t103223*t103233*t103276*(3.2E1/3.0);
                double t103297 = t103293+t103294+t103295+t103296;
                double t103298 = 1.0/pow(rho_b[index],4.0/3.0);
                double t103299 = 1.0/pow(rho_b[index],5.0/3.0);
                double t103300 = 1.0/sqrt(t103203);
                double t103301 = 1.0/t103216;
                double t103302 = 1.0/(t103213*t103213);
                double t103303 = b4p*t103206*t103299*(2.0/3.0);
                double t103304 = b2p*c*t103298*(1.0/3.0);
                double t103305 = b1p*c*t103300*t103298*(1.0/6.0);
                double t103306 = b3p*c*t103204*t103298*(1.0/2.0);
                double t103307 = t103303+t103304+t103305+t103306;
                double t103308 = t103301*t103302*t103307*t103219;
                double t103309 = ccaa1*gcaa*t103220*t103262;
                double t103310 = ccaa4*gamma_bb[index]*t103221*t103223*t103224*t103263*4.0;
                double t103311 = ccaa2*gamma_bb[index]*t103222*t103225*t103264*2.0;
                double t103312 = ccaa3*gcaa*t103221*t103222*t103226*t103265*3.0;
                double t103313 = t103310+t103311+t103312+t103309-ccaa1*gamma_bb[index]*t103222*t103225*t103267-ccaa2* \
                   t103221*t103222*t103225*t103271*t103285-ccaa4*t103223*t103224*t103233*t103282*t103277-ccaa3*gamma_bb[index]* \
                   gcaa*t103221*t103222*t103270*t103226*t103275;
                double t103314 = omega*omega;
                double t103315 = rho_b[index]*(8.334140006820045E15/1.40737488355328E14);
                double t103316 = 1.0/(rho_b[index]*rho_b[index]);
                double t103317 = 1.0/pow(t103315,4.0/3.0);
                double t103318 = 1.0/(omega*omega);
                double t103319 = pow(t103315,2.0/3.0);
                double t103321 = t103318*t103319;
                double t103320 = exp(-t103321);
                double t103322 = 1.0/pow(t103315,1.0/3.0);
                double t103323 = 1.0/omega;
                double t103324 = 1.0/rho_b[index];
                double t103325 = omega*t103314*t103324*(7.0368744177664E13/8.334140006820045E15);
                double t103326 = omega*t103322;
                double t103327 = gx*gx;
                double t103328 = t103327*t103327;
                double t103329 = gamma_bb[index]*gx*t103220;
                double t103330 = t103329+1.0;
                double t103331 = gamma_bb[index]*gx*t103220*3.0;
                double t103332 = gamma_bb[index]*gx*t103221*t103226*t103327;
                double t103333 = t103221*t103225*t103327*3.0;
                double t103334 = t103331+t103332+t103333+1.0;
                double t103335 = gamma_bb[index]*gx*t103220*4.0;
                double t103336 = gamma_bb[index]*gx*t103221*t103226*t103327*4.0;
                double t103337 = t103221*t103225*t103327*6.0;
                double t103338 = t103224*t103233*t103328;
                double t103339 = t103335+t103336+t103337+t103338+1.0;
                double t103340 = gamma_bb[index]*gx*t103220*2.0;
                double t103341 = t103221*t103225*t103327;
                double t103342 = t103340+t103341+1.0;
                double t103343 = pow(t103315,1.0/3.0);
                double t103344 = t103323*t103343;
                double t103345 = erf(t103344);
                double t103346 = t103345*(3.991211251234741E15/2.251799813685248E15);
                double t103347 = t103325-t103326;
                double t103375 = t103320*t103347;
                double t103376 = omega*t103322*(3.0/2.0);
                double t103348 = t103325+t103346-t103375-t103376;
                double t103349 = 1.0/t103330;
                double t103350 = cx1*gx*t103220*t103349;
                double t103351 = 1.0/t103339;
                double t103352 = cx4*gamma_bb[index]*t103221*t103224*t103351*t103328*4.0;
                double t103353 = 1.0/t103342;
                double t103354 = cx2*gamma_bb[index]*t103225*t103353*t103327*2.0;
                double t103355 = 1.0/t103334;
                double t103356 = cx3*gx*t103221*t103226*t103327*t103355*3.0;
                double t103357 = 1.0/(t103330*t103330);
                double t103358 = gx*t103220*3.0;
                double t103359 = gamma_bb[index]*t103225*t103327*6.0;
                double t103360 = gx*t103221*t103226*t103327*3.0;
                double t103361 = t103360+t103358+t103359;
                double t103362 = 1.0/(t103334*t103334);
                double t103363 = gx*t103220*4.0;
                double t103364 = gamma_bb[index]*t103225*t103327*1.2E1;
                double t103365 = gx*t103221*t103226*t103327*1.2E1;
                double t103366 = gamma_bb[index]*t103221*t103224*t103328*4.0;
                double t103367 = t103363+t103364+t103365+t103366;
                double t103368 = 1.0/(t103339*t103339);
                double t103369 = gx*t103220*2.0;
                double t103370 = gamma_bb[index]*t103225*t103327*2.0;
                double t103371 = t103370+t103369;
                double t103372 = 1.0/(t103342*t103342);
                double t103373 = t103350+t103352+t103354+t103356-cx1*gamma_bb[index]*t103225*t103327*t103357-cx2* \
                   t103221*t103225*t103371*t103327*t103372-cx4*t103224*t103233*t103328*t103367*t103368-cx3*gamma_bb[index]* \
                   gx*t103221*t103226*t103361*t103362*t103327;
                double t103374 = pow(rho_b[index],4.0/3.0);
                double t103377 = omega*t103322*t103348*(4.0/3.0);
                double t103378 = t103377-1.0;
                double t103379 = gamma_bb[index]*gx*t103269*(1.6E1/3.0);
                double t103380 = t103221*t103327*t103266*(1.6E1/3.0);
                double t103381 = t103380+t103379;
                double t103382 = gamma_bb[index]*gx*t103269*8.0;
                double t103383 = gamma_bb[index]*gx*t103221*t103327*t103268*8.0;
                double t103384 = t103221*t103327*t103266*1.6E1;
                double t103385 = t103382+t103383+t103384;
                double t103386 = gamma_bb[index]*gx*t103269*(3.2E1/3.0);
                double t103387 = gamma_bb[index]*gx*t103221*t103327*t103268*3.2E1;
                double t103388 = t103221*t103327*t103266*3.2E1;
                double t103389 = t103233*t103328*t103276*(3.2E1/3.0);
                double t103390 = t103386+t103387+t103388+t103389;
                v_rho_b_gamma_bb_[index] = -t103313*(t103261+t103244*t103247*(t103260-c0p*t103217*t103219*2.0))+rho_b[index]* \
                   t103313*(-t103308+t103244*t103247*(t103308-(1.0/(t103253*t103253)*t103259*(b2f*c*t103298*(1.0/3.0) \
                   +b4f*t103206*t103299*(2.0/3.0)+b1f*c*t103300*t103298*(1.0/6.0)+b3f*c*t103204*t103298*(1.0/2.0)))/t103256+ \
                   a1f*c*c0f*t103257*t103298*(2.0/3.0)-a1p*c*c0p*t103217*t103298*(2.0/3.0))+a1p*c*c0p*t103217*t103298* \
                   (2.0/3.0))-rho_b[index]*(t103261+t103244*t103247*(t103260-t103261))*(ccaa1*gcaa*t103262*t103269*(- \
                   8.0/3.0)-ccaa2*gamma_bb[index]*t103222*t103264*t103266*(3.2E1/3.0)+ccaa1*gamma_bb[index]*t103222*t103266* \
                   t103267*8.0+ccaa2*t103221*t103222*t103271*t103266*t103285*(1.6E1/3.0)+ccaa4*t103223*t103233*t103282* \
                   t103276*t103277*(3.2E1/3.0)+ccaa4*t103223*t103224*t103233*t103277*(gcaa*t103269*(3.2E1/3.0)+gamma_bb[index]* \
                   t103222*t103266*6.4E1+gamma_bb[index]*t103221*t103223*t103276*(1.28E2/3.0)+gcaa*t103221*t103222*t103268* \
                   9.6E1)-ccaa1*gcaa*t103221*t103222*1.0/(t103228*t103228*t103228)*t103268*(1.6E1/3.0)+ccaa2*t103221* \
                   t103222*t103225*t103271*(gcaa*t103269*(1.6E1/3.0)+gamma_bb[index]*t103222*t103266*(3.2E1/3.0))-ccaa4* \
                   gamma_bb[index]*t103221*t103223*t103263*t103276*(1.28E2/3.0)+ccaa2*gamma_bb[index]*t103222*t103225* \
                   t103271*t103288*2.0-ccaa3*gcaa*t103221*t103222*t103265*t103268*2.4E1+ccaa4*gamma_bb[index]*t103221* \
                   t103223*t103224*t103277*t103297*4.0+ccaa3*gcaa*t103221*t103222*t103270*t103226*t103292*3.0-ccaa2*t103221* \
                   t103222*1.0/(t103241*t103241*t103241)*t103225*t103285*t103288*2.0-ccaa4*t103223*t103224*t103233*t103282* \
                   1.0/(t103238*t103238*t103238)*t103297*2.0+ccaa3*gamma_bb[index]*gcaa*t103221*t103222*t103270*t103226* \
                   (gcaa*t103269*8.0+gamma_bb[index]*t103222*t103266*3.2E1+gcaa*t103221*t103222*t103268*2.4E1)+ccaa3* \
                   gamma_bb[index]*gcaa*t103221*t103222*t103270*t103275*t103268*8.0-ccaa3*gamma_bb[index]*gcaa*t103221* \
                   t103222*1.0/(t103232*t103232*t103232)*t103226*t103292*t103275*2.0)-c0*t103374*t103378*(cx1*gx*t103349* \
                   t103269*(-8.0/3.0)+cx1*gamma_bb[index]*t103327*t103266*t103357*8.0-cx2*gamma_bb[index]*t103353*t103327* \
                   t103266*(3.2E1/3.0)+cx2*t103221*t103371*t103327*t103372*t103266*(1.6E1/3.0)+cx4*t103233*t103328*t103276* \
                   t103367*t103368*(3.2E1/3.0)+cx4*t103224*t103233*t103328*t103368*(gx*t103269*(3.2E1/3.0)+gamma_bb[index]* \
                   t103327*t103266*6.4E1+gamma_bb[index]*t103221*t103328*t103276*(1.28E2/3.0)+gx*t103221*t103327*t103268* \
                   9.6E1)-cx1*gx*t103221*1.0/(t103330*t103330*t103330)*t103327*t103268*(1.6E1/3.0)+cx2*t103221*t103225* \
                   t103327*t103372*(gx*t103269*(1.6E1/3.0)+gamma_bb[index]*t103327*t103266*(3.2E1/3.0))+cx2*gamma_bb[index]* \
                   t103225*t103327*t103372*t103381*2.0-cx4*gamma_bb[index]*t103221*t103351*t103328*t103276*(1.28E2/3.0) \
                   -cx3*gx*t103221*t103327*t103355*t103268*2.4E1+cx4*gamma_bb[index]*t103221*t103224*t103390*t103328* \
                   t103368*4.0+cx3*gx*t103221*t103226*t103362*t103327*t103385*3.0-cx2*t103221*t103225*1.0/(t103342*t103342* \
                   t103342)*t103371*t103327*t103381*2.0-cx4*t103224*t103233*t103390*t103328*1.0/(t103339*t103339*t103339) \
                   *t103367*2.0+cx3*gamma_bb[index]*gx*t103221*t103226*t103362*t103327*(gx*t103269*8.0+gamma_bb[index]* \
                   t103327*t103266*3.2E1+gx*t103221*t103327*t103268*2.4E1)+cx3*gamma_bb[index]*gx*t103221*t103361*t103362* \
                   t103327*t103268*8.0-cx3*gamma_bb[index]*gx*t103221*t103226*1.0/(t103334*t103334*t103334)*t103361*t103327* \
                   t103385*2.0)-c0*pow(rho_b[index],1.0/3.0)*t103373*t103378*(4.0/3.0)+c0*t103373*t103374*(omega*t103322* \
                   (omega*t103317*(-8.334140006820045E15/2.81474976710656E14)+t103320*(omega*t103317*(2.778046668940015E15/ \
                   1.40737488355328E14)-omega*t103314*t103316*(7.0368744177664E13/8.334140006820045E15))+omega*t103314* \
                   t103316*(7.0368744177664E13/8.334140006820045E15)+t103320*t103322*t103318*(t103326-omega*t103314*t103324* \
                   (7.0368744177664E13/8.334140006820045E15))*(2.778046668940015E15/7.0368744177664E13)-1.0/sqrt(3.141592653589793) \
                   *t103320*t103323*1.0/pow(t103315,2.0/3.0)*(1.108777112152858E31/1.584563250285287E29))*(4.0/3.0)+omega* \
                   t103317*t103348*(2.778046668940015E15/1.05553116266496E14));
            } else {
                v_rho_b_gamma_bb_[index] = 0.0;
            }

            //V_gamma_aa_gamma_aa
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t102213 = 1.0/pow(rho_a[index],1.0/3.0);
                double t102214 = c*t102213;
                double t102215 = sqrt(t102214);
                double t102216 = pow(t102214,3.0/2.0);
                double t102217 = c*c;
                double t102218 = 1.0/pow(rho_a[index],2.0/3.0);
                double t102219 = 1.0/c0p;
                double t102220 = b1p*t102215;
                double t102221 = b3p*t102216;
                double t102222 = b4p*t102217*t102218;
                double t102223 = b2p*c*t102213;
                double t102224 = t102220+t102221+t102222+t102223;
                double t102225 = 1.0/t102224;
                double t102226 = t102225*t102219*(1.0/2.0);
                double t102227 = t102226+1.0;
                double t102228 = log(t102227);
                double t102229 = a1p*c*t102213;
                double t102230 = t102229+1.0;
                double t102231 = pow(2.0,1.0/3.0);
                double t102232 = t102231*2.0;
                double t102233 = t102232-2.0;
                double t102234 = two_13*2.0;
                double t102235 = t102234-2.0;
                double t102236 = 1.0/t102235;
                double t102237 = 1.0/c0f;
                double t102238 = 1.0/pow(rho_b[index],1.0/3.0);
                double t102239 = c*t102238;
                double t102240 = sqrt(t102239);
                double t102241 = pow(t102239,3.0/2.0);
                double t102242 = 1.0/pow(rho_b[index],2.0/3.0);
                double t102243 = b1p*t102240;
                double t102244 = b3p*t102241;
                double t102245 = b4p*t102242*t102217;
                double t102246 = b2p*c*t102238;
                double t102247 = t102243+t102244+t102245+t102246;
                double t102248 = 1.0/t102247;
                double t102249 = t102219*t102248*(1.0/2.0);
                double t102250 = t102249+1.0;
                double t102251 = log(t102250);
                double t102252 = a1p*c*t102238;
                double t102253 = t102252+1.0;
                double t102254 = c0p*t102251*t102253*2.0;
                double t102255 = rho_a[index]+rho_b[index];
                double t102256 = 1.0/pow(t102255,1.0/3.0);
                double t102257 = c*t102256;
                double t102258 = sqrt(t102257);
                double t102259 = pow(t102257,3.0/2.0);
                double t102260 = 1.0/pow(t102255,2.0/3.0);
                double t102261 = b1p*t102258;
                double t102262 = b3p*t102259;
                double t102263 = b4p*t102260*t102217;
                double t102264 = b2p*c*t102256;
                double t102265 = t102261+t102262+t102263+t102264;
                double t102266 = 1.0/t102265;
                double t102267 = t102219*t102266*(1.0/2.0);
                double t102268 = t102267+1.0;
                double t102269 = log(t102268);
                double t102270 = a1p*c*t102256;
                double t102271 = t102270+1.0;
                double t102272 = c0p*t102271*t102269*2.0;
                double t102273 = rho_a[index]-rho_b[index];
                double t102274 = t102273*t102273;
                double t102275 = 1.0/t102255;
                double t102276 = t102273*t102275;
                double t102277 = 1.0/(t102255*t102255*t102255*t102255);
                double t102278 = t102274*t102274;
                double t102279 = t102276+1.0;
                double t102280 = pow(t102279,4.0/3.0);
                double t102281 = -t102276+1.0;
                double t102282 = pow(t102281,4.0/3.0);
                double t102283 = t102280+t102282-2.0;
                double t102284 = gcab*gcab;
                double t102285 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t102286 = 1.0/pow(rho_a[index],8.0/3.0);
                double t102287 = gamma_aa[index]*t102286*(1.0/2.0);
                double t102288 = 1.0/pow(rho_b[index],8.0/3.0);
                double t102289 = gamma_bb[index]*t102288*(1.0/2.0);
                double t102290 = t102287+t102289;
                double t102291 = gcab*t102290;
                double t102292 = t102291+1.0;
                double t102293 = t102290*t102290;
                double t102294 = t102284*t102293;
                double t102295 = gcab*t102290*2.0;
                double t102296 = t102294+t102295+1.0;
                double t102297 = t102284*t102284;
                double t102314 = gcab*t102286*2.0;
                double t102315 = t102290*t102284*t102286*6.0;
                double t102316 = gcab*t102284*t102293*t102286*6.0;
                double t102317 = t102290*t102293*t102286*t102297*2.0;
                double t102298 = t102314+t102315+t102316+t102317;
                double t102299 = t102293*t102293;
                double t102319 = gcab*t102286*(3.0/2.0);
                double t102320 = t102290*t102284*t102286*3.0;
                double t102321 = gcab*t102284*t102293*t102286*(3.0/2.0);
                double t102300 = t102320+t102321+t102319;
                double t102301 = t102284*t102293*3.0;
                double t102302 = gcab*t102290*t102284*t102293;
                double t102303 = gcab*t102290*3.0;
                double t102304 = t102301+t102302+t102303+1.0;
                double t102311 = gcab*t102286;
                double t102312 = t102290*t102284*t102286;
                double t102305 = t102311+t102312;
                double t102306 = t102284*t102293*6.0;
                double t102307 = gcab*t102290*t102284*t102293*4.0;
                double t102308 = t102297*t102299;
                double t102309 = gcab*t102290*4.0;
                double t102310 = t102306+t102307+t102308+t102309+1.0;
                double t102313 = 1.0/(t102296*t102296);
                double t102318 = 1.0/(t102310*t102310);
                double t102322 = 1.0/(t102304*t102304);
                double t102323 = b1f*t102215;
                double t102324 = b3f*t102216;
                double t102325 = b4f*t102217*t102218;
                double t102326 = b2f*c*t102213;
                double t102327 = t102323+t102324+t102325+t102326;
                double t102328 = 1.0/t102327;
                double t102329 = t102237*t102328*(1.0/2.0);
                double t102330 = t102329+1.0;
                double t102331 = log(t102330);
                double t102332 = a1f*c*t102213;
                double t102333 = t102332+1.0;
                double t102334 = c0f*t102331*t102333*2.0;
                double t102335 = c0p*t102230*t102228*2.0;
                double t102336 = gcaa*gcaa;
                double t102337 = gamma_aa[index]*gamma_aa[index];
                double t102338 = t102336*t102336;
                double t102339 = 1.0/pow(rho_a[index],3.2E1/3.0);
                double t102340 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t102341 = gamma_aa[index]*gcaa*t102286;
                double t102342 = t102341+1.0;
                double t102343 = gamma_aa[index]*gcaa*t102286*2.0;
                double t102344 = t102336*t102337*t102285;
                double t102345 = t102343+t102344+1.0;
                double t102346 = gamma_aa[index]*gcaa*t102286*3.0;
                double t102347 = gamma_aa[index]*gcaa*t102340*t102336*t102337;
                double t102348 = t102336*t102337*t102285*3.0;
                double t102349 = t102346+t102347+t102348+1.0;
                double t102350 = t102337*t102337;
                double t102366 = gcaa*t102286*4.0;
                double t102367 = gamma_aa[index]*t102336*t102285*1.2E1;
                double t102368 = gcaa*t102340*t102336*t102337*1.2E1;
                double t102369 = gamma_aa[index]*t102337*t102338*t102339*4.0;
                double t102351 = t102366+t102367+t102368+t102369;
                double t102352 = gamma_aa[index]*gcaa*t102286*4.0;
                double t102353 = gamma_aa[index]*gcaa*t102340*t102336*t102337*4.0;
                double t102354 = t102336*t102337*t102285*6.0;
                double t102355 = t102350*t102338*t102339;
                double t102356 = t102352+t102353+t102354+t102355+1.0;
                double t102359 = gcaa*t102286*2.0;
                double t102360 = gamma_aa[index]*t102336*t102285*2.0;
                double t102357 = t102360+t102359;
                double t102358 = 1.0/(t102349*t102349);
                double t102361 = 1.0/(t102345*t102345);
                double t102362 = gcaa*t102286*3.0;
                double t102363 = gamma_aa[index]*t102336*t102285*6.0;
                double t102364 = gcaa*t102340*t102336*t102337*3.0;
                double t102365 = t102362+t102363+t102364;
                double t102370 = 1.0/(t102356*t102356);
                double t102371 = rho_a[index]*(8.334140006820045E15/1.40737488355328E14);
                double t102372 = omega*omega;
                double t102373 = 1.0/rho_a[index];
                double t102374 = omega*t102372*t102373*(7.0368744177664E13/8.334140006820045E15);
                double t102375 = 1.0/pow(t102371,1.0/3.0);
                double t102376 = gx*gx;
                double t102377 = t102376*t102376;
                double t102378 = gamma_aa[index]*gx*t102286;
                double t102379 = t102378+1.0;
                double t102380 = gamma_aa[index]*gx*t102286*2.0;
                double t102381 = t102337*t102285*t102376;
                double t102382 = t102380+t102381+1.0;
                double t102383 = gamma_aa[index]*gx*t102286*3.0;
                double t102384 = gamma_aa[index]*gx*t102340*t102337*t102376;
                double t102385 = t102337*t102285*t102376*3.0;
                double t102386 = t102383+t102384+t102385+1.0;
                double t102402 = gx*t102286*4.0;
                double t102403 = gamma_aa[index]*t102285*t102376*1.2E1;
                double t102404 = gx*t102340*t102337*t102376*1.2E1;
                double t102405 = gamma_aa[index]*t102337*t102339*t102377*4.0;
                double t102387 = t102402+t102403+t102404+t102405;
                double t102388 = gamma_aa[index]*gx*t102286*4.0;
                double t102389 = gamma_aa[index]*gx*t102340*t102337*t102376*4.0;
                double t102390 = t102337*t102285*t102376*6.0;
                double t102391 = t102350*t102339*t102377;
                double t102392 = t102390+t102391+t102388+t102389+1.0;
                double t102395 = gx*t102286*2.0;
                double t102396 = gamma_aa[index]*t102285*t102376*2.0;
                double t102393 = t102395+t102396;
                double t102394 = 1.0/(t102386*t102386);
                double t102397 = 1.0/(t102382*t102382);
                double t102398 = gx*t102286*3.0;
                double t102399 = gamma_aa[index]*t102285*t102376*6.0;
                double t102400 = gx*t102340*t102337*t102376*3.0;
                double t102401 = t102400+t102398+t102399;
                double t102406 = 1.0/(t102392*t102392);
                v_gamma_aa_gamma_aa_[index] = -(rho_a[index]*(t102335+t102233*t102236*(t102334-c0p*t102230*t102228* \
                   2.0))+rho_b[index]*(t102254-t102233*t102236*(t102254-c0f*log((t102237*(1.0/2.0))/(b1f*t102240+b3f* \
                   t102241+b2f*c*t102238+b4f*t102242*t102217)+1.0)*(a1f*c*t102238+1.0)*2.0))-t102255*(t102272-t102236* \
                   t102283*t102277*t102278*(t102272-c0f*log((t102237*(1.0/2.0))/(b1f*t102258+b3f*t102259+b2f*c*t102256+ \
                   b4f*t102260*t102217)+1.0)*(a1f*c*t102256+1.0)*2.0)+(Aa*t102236*t102283*log((1.0/2.0)/(Aa*(b1a*t102258+ \
                   b3a*t102259+b2a*c*t102256+b4a*t102260*t102217))+1.0)*(t102277*t102278-1.0)*(a1a*c*t102256+1.0)*2.0) \
                   /d2fz0))*(ccab1*1.0/(t102292*t102292)*t102284*t102285*(1.0/2.0)-(ccab2*t102284*t102285*(1.0/2.0))/ \
                   t102296-ccab2*(t102305*t102305)*t102284*t102293*1.0/(t102296*t102296*t102296)*2.0-ccab4*1.0/(t102310* \
                   t102310*t102310)*t102297*(t102298*t102298)*t102299*2.0+ccab2*t102313*t102293*t102285*t102297*(1.0/ \
                   2.0)+ccab4*t102318*t102297*t102299*(t102284*t102285*3.0+t102293*t102285*t102297*3.0+gcab*t102290*t102284* \
                   t102285*6.0)-(ccab4*t102293*t102285*t102297*3.0)/t102310+ccab2*t102313*t102305*t102290*t102284*t102286* \
                   2.0-(ccab3*gcab*t102290*t102284*t102285*(3.0/2.0))/t102304-ccab1*gcab*t102290*1.0/(t102292*t102292* \
                   t102292)*t102284*t102285*(1.0/2.0)-ccab3*gcab*(t102300*t102300)*1.0/(t102304*t102304*t102304)*t102290* \
                   t102284*t102293*2.0+ccab3*gcab*t102300*t102322*t102284*t102293*t102286*3.0+ccab4*t102290*t102318*t102293* \
                   t102286*t102297*t102298*4.0+ccab3*gcab*t102322*t102290*t102284*t102293*(t102284*t102285*(3.0/2.0)+ \
                   gcab*t102290*t102284*t102285*(3.0/2.0)))+rho_a[index]*(t102335+t102233*t102236*(t102334-t102335))* \
                   (ccaa1*1.0/(t102342*t102342)*t102336*t102285*2.0-(ccaa2*t102336*t102285*2.0)/t102345+ccaa2*t102361* \
                   t102337*t102338*t102339*2.0-(ccaa4*t102337*t102338*t102339*1.2E1)/t102356+ccaa4*t102350*t102370*t102338* \
                   t102339*(t102336*t102285*1.2E1+t102337*t102338*t102339*1.2E1+gamma_aa[index]*gcaa*t102340*t102336* \
                   2.4E1)-ccaa1*gamma_aa[index]*gcaa*t102340*1.0/(t102342*t102342*t102342)*t102336*2.0-(ccaa3*gamma_aa[index]* \
                   gcaa*t102340*t102336*6.0)/t102349-ccaa4*t102350*(t102351*t102351)*t102338*1.0/(t102356*t102356*t102356) \
                   *t102339*2.0-ccaa2*t102336*1.0/(t102345*t102345*t102345)*t102337*t102285*(t102357*t102357)*2.0+ccaa2* \
                   gamma_aa[index]*t102361*t102336*t102285*t102357*4.0+ccaa4*gamma_aa[index]*t102351*t102370*t102337* \
                   t102338*t102339*8.0+ccaa3*gcaa*t102340*t102336*t102337*t102365*t102358*6.0+ccaa3*gamma_aa[index]*gcaa* \
                   t102340*t102336*t102337*t102358*(t102336*t102285*6.0+gamma_aa[index]*gcaa*t102340*t102336*6.0)-ccaa3* \
                   gamma_aa[index]*gcaa*t102340*t102336*t102337*(t102365*t102365)*1.0/(t102349*t102349*t102349)*2.0)+ \
                   c0*pow(rho_a[index],4.0/3.0)*(omega*t102375*(t102374+erf(pow(t102371,1.0/3.0)/omega)*(3.991211251234741E15/ \
                   2.251799813685248E15)-omega*t102375*(3.0/2.0)-exp(-1.0/(omega*omega)*pow(t102371,2.0/3.0))*(t102374- \
                   omega*t102375))*(4.0/3.0)-1.0)*(cx1*t102285*t102376*1.0/(t102379*t102379)*2.0-(cx2*t102285*t102376* \
                   2.0)/t102382+cx2*t102337*t102339*t102377*t102397*2.0-(cx4*t102337*t102339*t102377*1.2E1)/t102392+cx4* \
                   t102350*t102406*t102339*t102377*(t102285*t102376*1.2E1+t102337*t102339*t102377*1.2E1+gamma_aa[index]* \
                   gx*t102340*t102376*2.4E1)-cx1*gamma_aa[index]*gx*t102340*t102376*1.0/(t102379*t102379*t102379)*2.0- \
                   (cx3*gamma_aa[index]*gx*t102340*t102376*6.0)/t102386-cx2*t102337*1.0/(t102382*t102382*t102382)*t102285* \
                   (t102393*t102393)*t102376*2.0-cx4*t102350*1.0/(t102392*t102392*t102392)*t102339*t102377*(t102387*t102387) \
                   *2.0+cx2*gamma_aa[index]*t102285*t102393*t102376*t102397*4.0+cx4*gamma_aa[index]*t102406*t102337*t102339* \
                   t102377*t102387*8.0+cx3*gx*t102401*t102340*t102337*t102376*t102394*6.0+cx3*gamma_aa[index]*gx*t102340* \
                   t102337*t102376*t102394*(t102285*t102376*6.0+gamma_aa[index]*gx*t102340*t102376*6.0)-cx3*gamma_aa[index]* \
                   gx*(t102401*t102401)*t102340*t102337*t102376*1.0/(t102386*t102386*t102386)*2.0);
            } else if (rho_a[index] > cutoff_) {
                double t104153 = 1.0/pow(rho_a[index],1.0/3.0);
                double t104154 = c*t104153;
                double t104155 = sqrt(t104154);
                double t104156 = pow(t104154,3.0/2.0);
                double t104157 = c*c;
                double t104158 = 1.0/pow(rho_a[index],2.0/3.0);
                double t104159 = 1.0/c0p;
                double t104160 = b1p*t104155;
                double t104161 = b3p*t104156;
                double t104162 = b4p*t104157*t104158;
                double t104163 = b2p*c*t104153;
                double t104164 = t104160+t104161+t104162+t104163;
                double t104165 = 1.0/t104164;
                double t104166 = t104165*t104159*(1.0/2.0);
                double t104167 = t104166+1.0;
                double t104168 = log(t104167);
                double t104169 = a1p*c*t104153;
                double t104170 = t104169+1.0;
                double t104171 = gcaa*gcaa;
                double t104172 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t104173 = 1.0/pow(rho_a[index],8.0/3.0);
                double t104174 = gamma_aa[index]*gamma_aa[index];
                double t104175 = t104171*t104171;
                double t104176 = 1.0/pow(rho_a[index],3.2E1/3.0);
                double t104177 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t104178 = gamma_aa[index]*gcaa*t104173;
                double t104179 = t104178+1.0;
                double t104180 = gamma_aa[index]*gcaa*t104173*2.0;
                double t104181 = t104171*t104172*t104174;
                double t104182 = t104180+t104181+1.0;
                double t104183 = gamma_aa[index]*gcaa*t104173*3.0;
                double t104184 = gamma_aa[index]*gcaa*t104171*t104174*t104177;
                double t104185 = t104171*t104172*t104174*3.0;
                double t104186 = t104183+t104184+t104185+1.0;
                double t104187 = t104174*t104174;
                double t104203 = gcaa*t104173*4.0;
                double t104204 = gamma_aa[index]*t104171*t104172*1.2E1;
                double t104205 = gcaa*t104171*t104174*t104177*1.2E1;
                double t104206 = gamma_aa[index]*t104174*t104175*t104176*4.0;
                double t104188 = t104203+t104204+t104205+t104206;
                double t104189 = gamma_aa[index]*gcaa*t104173*4.0;
                double t104190 = gamma_aa[index]*gcaa*t104171*t104174*t104177*4.0;
                double t104191 = t104171*t104172*t104174*6.0;
                double t104192 = t104175*t104176*t104187;
                double t104193 = t104190+t104191+t104192+t104189+1.0;
                double t104196 = gcaa*t104173*2.0;
                double t104197 = gamma_aa[index]*t104171*t104172*2.0;
                double t104194 = t104196+t104197;
                double t104195 = 1.0/(t104186*t104186);
                double t104198 = 1.0/(t104182*t104182);
                double t104199 = gcaa*t104173*3.0;
                double t104200 = gamma_aa[index]*t104171*t104172*6.0;
                double t104201 = gcaa*t104171*t104174*t104177*3.0;
                double t104202 = t104200+t104201+t104199;
                double t104207 = 1.0/(t104193*t104193);
                double t104208 = rho_a[index]*(8.334140006820045E15/1.40737488355328E14);
                double t104209 = omega*omega;
                double t104210 = 1.0/rho_a[index];
                double t104211 = omega*t104210*t104209*(7.0368744177664E13/8.334140006820045E15);
                double t104212 = 1.0/pow(t104208,1.0/3.0);
                double t104213 = gx*gx;
                double t104214 = t104213*t104213;
                double t104215 = gamma_aa[index]*gx*t104173;
                double t104216 = t104215+1.0;
                double t104217 = gamma_aa[index]*gx*t104173*2.0;
                double t104218 = t104213*t104172*t104174;
                double t104219 = t104217+t104218+1.0;
                double t104220 = gamma_aa[index]*gx*t104173*3.0;
                double t104221 = gamma_aa[index]*gx*t104213*t104174*t104177;
                double t104222 = t104213*t104172*t104174*3.0;
                double t104223 = t104220+t104221+t104222+1.0;
                double t104239 = gx*t104173*4.0;
                double t104240 = gamma_aa[index]*t104213*t104172*1.2E1;
                double t104241 = gx*t104213*t104174*t104177*1.2E1;
                double t104242 = gamma_aa[index]*t104214*t104174*t104176*4.0;
                double t104224 = t104240+t104241+t104242+t104239;
                double t104225 = gamma_aa[index]*gx*t104173*4.0;
                double t104226 = gamma_aa[index]*gx*t104213*t104174*t104177*4.0;
                double t104227 = t104213*t104172*t104174*6.0;
                double t104228 = t104214*t104176*t104187;
                double t104229 = t104225+t104226+t104227+t104228+1.0;
                double t104232 = gx*t104173*2.0;
                double t104233 = gamma_aa[index]*t104213*t104172*2.0;
                double t104230 = t104232+t104233;
                double t104231 = 1.0/(t104223*t104223);
                double t104234 = 1.0/(t104219*t104219);
                double t104235 = gx*t104173*3.0;
                double t104236 = gamma_aa[index]*t104213*t104172*6.0;
                double t104237 = gx*t104213*t104174*t104177*3.0;
                double t104238 = t104235+t104236+t104237;
                double t104243 = 1.0/(t104229*t104229);
                v_gamma_aa_gamma_aa_[index] = -rho_a[index]*(((pow(2.0,1.0/3.0)*2.0-2.0)*(c0f*log((1.0/2.0)/(c0f* \
                   (b1f*t104155+b3f*t104156+b2f*c*t104153+b4f*t104157*t104158))+1.0)*(a1f*c*t104153+1.0)*2.0-c0p*t104170* \
                   t104168*2.0))/(two_13*2.0-2.0)+c0p*t104170*t104168*2.0)*((ccaa2*t104171*t104172*2.0)/t104182-ccaa1* \
                   t104171*t104172*1.0/(t104179*t104179)*2.0-ccaa2*t104174*t104175*t104176*t104198*2.0+(ccaa4*t104174* \
                   t104175*t104176*1.2E1)/t104193-ccaa4*t104207*t104175*t104176*t104187*(t104171*t104172*1.2E1+t104174* \
                   t104175*t104176*1.2E1+gamma_aa[index]*gcaa*t104171*t104177*2.4E1)+(ccaa3*gamma_aa[index]*gcaa*t104171* \
                   t104177*6.0)/t104186+ccaa1*gamma_aa[index]*gcaa*t104171*t104177*1.0/(t104179*t104179*t104179)*2.0+ \
                   ccaa2*t104171*t104172*1.0/(t104182*t104182*t104182)*t104174*(t104194*t104194)*2.0+ccaa4*t104175*1.0/ \
                   (t104193*t104193*t104193)*t104176*t104187*(t104188*t104188)*2.0-ccaa2*gamma_aa[index]*t104171*t104172* \
                   t104194*t104198*4.0-ccaa4*gamma_aa[index]*t104207*t104174*t104175*t104176*t104188*8.0-ccaa3*gcaa*t104202* \
                   t104171*t104174*t104177*t104195*6.0-ccaa3*gamma_aa[index]*gcaa*t104171*t104174*t104177*t104195*(t104171* \
                   t104172*6.0+gamma_aa[index]*gcaa*t104171*t104177*6.0)+ccaa3*gamma_aa[index]*gcaa*(t104202*t104202) \
                   *t104171*t104174*t104177*1.0/(t104186*t104186*t104186)*2.0)+c0*pow(rho_a[index],4.0/3.0)*(omega*t104212* \
                   (t104211+erf(pow(t104208,1.0/3.0)/omega)*(3.991211251234741E15/2.251799813685248E15)-omega*t104212* \
                   (3.0/2.0)-exp(-1.0/(omega*omega)*pow(t104208,2.0/3.0))*(t104211-omega*t104212))*(4.0/3.0)-1.0)*(cx1* \
                   t104213*1.0/(t104216*t104216)*t104172*2.0-(cx2*t104213*t104172*2.0)/t104219+cx2*t104214*t104234*t104174* \
                   t104176*2.0-(cx4*t104214*t104174*t104176*1.2E1)/t104229+cx4*t104214*t104243*t104176*t104187*(t104213* \
                   t104172*1.2E1+t104214*t104174*t104176*1.2E1+gamma_aa[index]*gx*t104213*t104177*2.4E1)-cx1*gamma_aa[index]* \
                   gx*t104213*1.0/(t104216*t104216*t104216)*t104177*2.0-(cx3*gamma_aa[index]*gx*t104213*t104177*6.0)/ \
                   t104223-cx2*(t104230*t104230)*t104213*t104172*t104174*1.0/(t104219*t104219*t104219)*2.0-cx4*t104214* \
                   (t104224*t104224)*1.0/(t104229*t104229*t104229)*t104176*t104187*2.0+cx2*gamma_aa[index]*t104230*t104213* \
                   t104234*t104172*4.0+cx4*gamma_aa[index]*t104214*t104224*t104243*t104174*t104176*8.0+cx3*gx*t104213* \
                   t104231*t104174*t104238*t104177*6.0+cx3*gamma_aa[index]*gx*t104213*t104231*t104174*t104177*(t104213* \
                   t104172*6.0+gamma_aa[index]*gx*t104213*t104177*6.0)-cx3*gamma_aa[index]*gx*t104213*1.0/(t104223*t104223* \
                   t104223)*t104174*(t104238*t104238)*t104177*2.0);
            } else if (rho_b[index] > cutoff_) {
                v_gamma_aa_gamma_aa_[index] = 0.0;
            } else {
                v_gamma_aa_gamma_aa_[index] = 0.0;
            }

            //V_gamma_aa_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_aa_gamma_ab_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_aa_gamma_ab_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_aa_gamma_ab_[index] = 0.0;
            } else {
                v_gamma_aa_gamma_ab_[index] = 0.0;
            }

            //V_gamma_aa_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t102409 = 1.0/pow(rho_a[index],1.0/3.0);
                double t102410 = c*t102409;
                double t102411 = sqrt(t102410);
                double t102412 = pow(t102410,3.0/2.0);
                double t102413 = c*c;
                double t102414 = 1.0/pow(rho_a[index],2.0/3.0);
                double t102415 = 1.0/c0p;
                double t102416 = b1p*t102411;
                double t102417 = b3p*t102412;
                double t102418 = b4p*t102413*t102414;
                double t102419 = b2p*c*t102409;
                double t102420 = t102416+t102417+t102418+t102419;
                double t102421 = 1.0/t102420;
                double t102422 = t102421*t102415*(1.0/2.0);
                double t102423 = t102422+1.0;
                double t102424 = log(t102423);
                double t102425 = a1p*c*t102409;
                double t102426 = t102425+1.0;
                double t102427 = pow(2.0,1.0/3.0);
                double t102428 = t102427*2.0;
                double t102429 = t102428-2.0;
                double t102430 = two_13*2.0;
                double t102431 = t102430-2.0;
                double t102432 = 1.0/t102431;
                double t102433 = 1.0/c0f;
                double t102434 = 1.0/pow(rho_b[index],1.0/3.0);
                double t102435 = c*t102434;
                double t102436 = sqrt(t102435);
                double t102437 = pow(t102435,3.0/2.0);
                double t102438 = 1.0/pow(rho_b[index],2.0/3.0);
                double t102439 = b1p*t102436;
                double t102440 = b3p*t102437;
                double t102441 = b4p*t102413*t102438;
                double t102442 = b2p*c*t102434;
                double t102443 = t102440+t102441+t102442+t102439;
                double t102444 = 1.0/t102443;
                double t102445 = t102415*t102444*(1.0/2.0);
                double t102446 = t102445+1.0;
                double t102447 = log(t102446);
                double t102448 = a1p*c*t102434;
                double t102449 = t102448+1.0;
                double t102450 = c0p*t102447*t102449*2.0;
                double t102451 = rho_a[index]+rho_b[index];
                double t102452 = 1.0/pow(t102451,1.0/3.0);
                double t102453 = c*t102452;
                double t102454 = sqrt(t102453);
                double t102455 = pow(t102453,3.0/2.0);
                double t102456 = 1.0/pow(t102451,2.0/3.0);
                double t102457 = b1p*t102454;
                double t102458 = b3p*t102455;
                double t102459 = b4p*t102413*t102456;
                double t102460 = b2p*c*t102452;
                double t102461 = t102460+t102457+t102458+t102459;
                double t102462 = 1.0/t102461;
                double t102463 = t102415*t102462*(1.0/2.0);
                double t102464 = t102463+1.0;
                double t102465 = log(t102464);
                double t102466 = a1p*c*t102452;
                double t102467 = t102466+1.0;
                double t102468 = c0p*t102465*t102467*2.0;
                double t102469 = rho_a[index]-rho_b[index];
                double t102470 = t102469*t102469;
                double t102471 = 1.0/t102451;
                double t102472 = t102471*t102469;
                double t102473 = 1.0/(t102451*t102451*t102451*t102451);
                double t102474 = t102470*t102470;
                double t102475 = t102472+1.0;
                double t102476 = pow(t102475,4.0/3.0);
                double t102477 = -t102472+1.0;
                double t102478 = pow(t102477,4.0/3.0);
                double t102479 = t102476+t102478-2.0;
                double t102480 = gcab*gcab;
                double t102483 = 1.0/pow(rho_a[index],8.0/3.0);
                double t102484 = 1.0/pow(rho_b[index],8.0/3.0);
                double t102485 = gamma_aa[index]*t102483*(1.0/2.0);
                double t102486 = gamma_bb[index]*t102484*(1.0/2.0);
                double t102481 = t102485+t102486;
                double t102482 = t102481*t102481;
                double t102487 = t102480*t102480;
                double t102488 = t102482*t102482;
                double t102489 = t102480*t102482*3.0;
                double t102490 = gcab*t102480*t102481*t102482;
                double t102491 = gcab*t102481*3.0;
                double t102492 = t102490+t102491+t102489+1.0;
                double t102493 = t102480*t102482;
                double t102494 = gcab*t102481*2.0;
                double t102495 = t102493+t102494+1.0;
                double t102496 = t102480*t102482*6.0;
                double t102497 = gcab*t102480*t102481*t102482*4.0;
                double t102498 = t102487*t102488;
                double t102499 = gcab*t102481*4.0;
                double t102500 = t102496+t102497+t102498+t102499+1.0;
                double t102501 = 1.0/(t102495*t102495);
                double t102502 = gcab*t102483;
                double t102503 = t102480*t102481*t102483;
                double t102504 = t102502+t102503;
                double t102505 = gcab*t102484;
                double t102506 = t102480*t102481*t102484;
                double t102507 = t102505+t102506;
                double t102508 = gcab*t102481;
                double t102509 = t102508+1.0;
                double t102510 = gcab*t102483*2.0;
                double t102511 = t102480*t102481*t102483*6.0;
                double t102512 = gcab*t102480*t102482*t102483*6.0;
                double t102513 = t102481*t102482*t102483*t102487*2.0;
                double t102514 = t102510+t102511+t102512+t102513;
                double t102515 = 1.0/(t102500*t102500);
                double t102516 = gcab*t102484*2.0;
                double t102517 = t102480*t102481*t102484*6.0;
                double t102518 = gcab*t102480*t102482*t102484*6.0;
                double t102519 = t102481*t102482*t102484*t102487*2.0;
                double t102520 = t102516+t102517+t102518+t102519;
                double t102521 = gcab*t102483*(3.0/2.0);
                double t102522 = t102480*t102481*t102483*3.0;
                double t102523 = gcab*t102480*t102482*t102483*(3.0/2.0);
                double t102524 = t102521+t102522+t102523;
                double t102525 = 1.0/(t102492*t102492);
                double t102526 = gcab*t102484*(3.0/2.0);
                double t102527 = t102480*t102481*t102484*3.0;
                double t102528 = gcab*t102480*t102482*t102484*(3.0/2.0);
                double t102529 = t102526+t102527+t102528;
                v_gamma_aa_gamma_bb_[index] = (-rho_b[index]*(t102450-t102432*t102429*(t102450-c0f*log((t102433*(1.0/ \
                   2.0))/(b1f*t102436+b3f*t102437+b2f*c*t102434+b4f*t102413*t102438)+1.0)*(a1f*c*t102434+1.0)*2.0))+t102451* \
                   (t102468-t102432*t102473*t102474*t102479*(t102468-c0f*log((t102433*(1.0/2.0))/(b1f*t102454+b3f*t102455+ \
                   b2f*c*t102452+b4f*t102413*t102456)+1.0)*(a1f*c*t102452+1.0)*2.0)+(Aa*t102432*t102479*log((1.0/2.0) \
                   /(Aa*(b1a*t102454+b3a*t102455+b2a*c*t102452+b4a*t102413*t102456))+1.0)*(t102473*t102474-1.0)*(a1a* \
                   c*t102452+1.0)*2.0)/d2fz0)+rho_a[index]*(t102432*t102429*(c0p*t102424*t102426*2.0-c0f*log((t102433* \
                   (1.0/2.0))/(b1f*t102411+b3f*t102412+b2f*c*t102409+b4f*t102413*t102414)+1.0)*(a1f*c*t102409+1.0)*2.0) \
                   -c0p*t102424*t102426*2.0))*(ccab4*t102515*t102487*t102488*(t102480*t102483*t102484*3.0+t102482*t102483* \
                   t102484*t102487*3.0+gcab*t102480*t102481*t102483*t102484*6.0)+ccab1*t102480*1.0/(t102509*t102509)* \
                   t102483*t102484*(1.0/2.0)-(ccab2*t102480*t102483*t102484*(1.0/2.0))/t102495+ccab2*t102501*t102504* \
                   t102480*t102481*t102484+ccab2*t102501*t102480*t102507*t102481*t102483+ccab2*t102501*t102482*t102483* \
                   t102484*t102487*(1.0/2.0)-ccab4*1.0/(t102500*t102500*t102500)*t102520*t102514*t102487*t102488*2.0- \
                   ccab2*t102504*t102480*t102507*t102482*1.0/(t102495*t102495*t102495)*2.0-(ccab4*t102482*t102483*t102484* \
                   t102487*3.0)/t102500+ccab3*gcab*t102524*t102480*t102525*t102482*t102484*(3.0/2.0)+ccab3*gcab*t102480* \
                   t102525*t102482*t102483*t102529*(3.0/2.0)+ccab4*t102520*t102515*t102481*t102482*t102483*t102487*2.0+ \
                   ccab4*t102514*t102515*t102481*t102482*t102484*t102487*2.0+ccab3*gcab*t102480*t102525*t102481*t102482* \
                   (t102480*t102483*t102484*(3.0/2.0)+gcab*t102480*t102481*t102483*t102484*(3.0/2.0))-ccab1*gcab*t102480* \
                   t102481*1.0/(t102509*t102509*t102509)*t102483*t102484*(1.0/2.0)-(ccab3*gcab*t102480*t102481*t102483* \
                   t102484*(3.0/2.0))/t102492-ccab3*gcab*t102524*t102480*t102481*t102482*1.0/(t102492*t102492*t102492) \
                   *t102529*2.0);
            } else if (rho_a[index] > cutoff_) {
                v_gamma_aa_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_aa_gamma_bb_[index] = 0.0;
            } else {
                v_gamma_aa_gamma_bb_[index] = 0.0;
            }

            //V_gamma_ab_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_ab_gamma_ab_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_ab_gamma_ab_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_ab_gamma_ab_[index] = 0.0;
            } else {
                v_gamma_ab_gamma_ab_[index] = 0.0;
            }

            //V_gamma_ab_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_ab_gamma_bb_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_ab_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_ab_gamma_bb_[index] = 0.0;
            } else {
                v_gamma_ab_gamma_bb_[index] = 0.0;
            }

            //V_gamma_bb_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t102533 = 1.0/pow(rho_a[index],1.0/3.0);
                double t102534 = c*t102533;
                double t102535 = sqrt(t102534);
                double t102536 = pow(t102534,3.0/2.0);
                double t102537 = c*c;
                double t102538 = 1.0/pow(rho_a[index],2.0/3.0);
                double t102539 = 1.0/c0p;
                double t102540 = b1p*t102535;
                double t102541 = b3p*t102536;
                double t102542 = b4p*t102537*t102538;
                double t102543 = b2p*c*t102533;
                double t102544 = t102540+t102541+t102542+t102543;
                double t102545 = 1.0/t102544;
                double t102546 = t102545*t102539*(1.0/2.0);
                double t102547 = t102546+1.0;
                double t102548 = log(t102547);
                double t102549 = a1p*c*t102533;
                double t102550 = t102549+1.0;
                double t102551 = pow(2.0,1.0/3.0);
                double t102552 = t102551*2.0;
                double t102553 = t102552-2.0;
                double t102554 = two_13*2.0;
                double t102555 = t102554-2.0;
                double t102556 = 1.0/t102555;
                double t102557 = 1.0/c0f;
                double t102558 = 1.0/pow(rho_b[index],1.0/3.0);
                double t102559 = c*t102558;
                double t102560 = sqrt(t102559);
                double t102561 = pow(t102559,3.0/2.0);
                double t102562 = 1.0/pow(rho_b[index],2.0/3.0);
                double t102563 = b1p*t102560;
                double t102564 = b3p*t102561;
                double t102565 = b4p*t102562*t102537;
                double t102566 = b2p*c*t102558;
                double t102567 = t102563+t102564+t102565+t102566;
                double t102568 = 1.0/t102567;
                double t102569 = t102539*t102568*(1.0/2.0);
                double t102570 = t102569+1.0;
                double t102571 = log(t102570);
                double t102572 = a1p*c*t102558;
                double t102573 = t102572+1.0;
                double t102574 = c0p*t102571*t102573*2.0;
                double t102575 = rho_a[index]+rho_b[index];
                double t102576 = 1.0/pow(t102575,1.0/3.0);
                double t102577 = c*t102576;
                double t102578 = sqrt(t102577);
                double t102579 = pow(t102577,3.0/2.0);
                double t102580 = 1.0/pow(t102575,2.0/3.0);
                double t102581 = b1p*t102578;
                double t102582 = b3p*t102579;
                double t102583 = b4p*t102580*t102537;
                double t102584 = b2p*c*t102576;
                double t102585 = t102581+t102582+t102583+t102584;
                double t102586 = 1.0/t102585;
                double t102587 = t102539*t102586*(1.0/2.0);
                double t102588 = t102587+1.0;
                double t102589 = log(t102588);
                double t102590 = a1p*c*t102576;
                double t102591 = t102590+1.0;
                double t102592 = c0p*t102591*t102589*2.0;
                double t102593 = rho_a[index]-rho_b[index];
                double t102594 = t102593*t102593;
                double t102595 = 1.0/t102575;
                double t102596 = t102593*t102595;
                double t102597 = 1.0/(t102575*t102575*t102575*t102575);
                double t102598 = t102594*t102594;
                double t102599 = t102596+1.0;
                double t102600 = pow(t102599,4.0/3.0);
                double t102601 = -t102596+1.0;
                double t102602 = pow(t102601,4.0/3.0);
                double t102603 = t102600+t102602-2.0;
                double t102604 = gcab*gcab;
                double t102605 = 1.0/pow(rho_b[index],1.6E1/3.0);
                double t102606 = 1.0/pow(rho_a[index],8.0/3.0);
                double t102607 = gamma_aa[index]*t102606*(1.0/2.0);
                double t102608 = 1.0/pow(rho_b[index],8.0/3.0);
                double t102609 = gamma_bb[index]*t102608*(1.0/2.0);
                double t102610 = t102607+t102609;
                double t102611 = gcab*t102610;
                double t102612 = t102611+1.0;
                double t102613 = t102610*t102610;
                double t102614 = t102604*t102613;
                double t102615 = gcab*t102610*2.0;
                double t102616 = t102614+t102615+1.0;
                double t102617 = t102604*t102604;
                double t102634 = gcab*t102608*2.0;
                double t102635 = t102610*t102604*t102608*6.0;
                double t102636 = gcab*t102604*t102613*t102608*6.0;
                double t102637 = t102610*t102613*t102608*t102617*2.0;
                double t102618 = t102634+t102635+t102636+t102637;
                double t102619 = t102613*t102613;
                double t102639 = gcab*t102608*(3.0/2.0);
                double t102640 = t102610*t102604*t102608*3.0;
                double t102641 = gcab*t102604*t102613*t102608*(3.0/2.0);
                double t102620 = t102640+t102641+t102639;
                double t102621 = t102604*t102613*3.0;
                double t102622 = gcab*t102610*t102604*t102613;
                double t102623 = gcab*t102610*3.0;
                double t102624 = t102621+t102622+t102623+1.0;
                double t102631 = gcab*t102608;
                double t102632 = t102610*t102604*t102608;
                double t102625 = t102631+t102632;
                double t102626 = t102604*t102613*6.0;
                double t102627 = gcab*t102610*t102604*t102613*4.0;
                double t102628 = t102617*t102619;
                double t102629 = gcab*t102610*4.0;
                double t102630 = t102626+t102627+t102628+t102629+1.0;
                double t102633 = 1.0/(t102616*t102616);
                double t102638 = 1.0/(t102630*t102630);
                double t102642 = 1.0/(t102624*t102624);
                double t102643 = b1f*t102560;
                double t102644 = b3f*t102561;
                double t102645 = b4f*t102562*t102537;
                double t102646 = b2f*c*t102558;
                double t102647 = t102643+t102644+t102645+t102646;
                double t102648 = 1.0/t102647;
                double t102649 = t102557*t102648*(1.0/2.0);
                double t102650 = t102649+1.0;
                double t102651 = log(t102650);
                double t102652 = a1f*c*t102558;
                double t102653 = t102652+1.0;
                double t102654 = t102574-c0f*t102651*t102653*2.0;
                double t102655 = t102574-t102553*t102654*t102556;
                double t102656 = gcaa*gcaa;
                double t102657 = gamma_bb[index]*gamma_bb[index];
                double t102658 = t102656*t102656;
                double t102659 = 1.0/pow(rho_b[index],3.2E1/3.0);
                double t102660 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]);
                double t102661 = gamma_bb[index]*gcaa*t102608;
                double t102662 = t102661+1.0;
                double t102663 = gamma_bb[index]*gcaa*t102608*2.0;
                double t102664 = t102605*t102656*t102657;
                double t102665 = t102663+t102664+1.0;
                double t102666 = gamma_bb[index]*gcaa*t102608*3.0;
                double t102667 = gamma_bb[index]*gcaa*t102660*t102656*t102657;
                double t102668 = t102605*t102656*t102657*3.0;
                double t102669 = t102666+t102667+t102668+1.0;
                double t102670 = t102657*t102657;
                double t102686 = gcaa*t102608*4.0;
                double t102687 = gamma_bb[index]*t102605*t102656*1.2E1;
                double t102688 = gcaa*t102660*t102656*t102657*1.2E1;
                double t102689 = gamma_bb[index]*t102657*t102658*t102659*4.0;
                double t102671 = t102686+t102687+t102688+t102689;
                double t102672 = gamma_bb[index]*gcaa*t102608*4.0;
                double t102673 = gamma_bb[index]*gcaa*t102660*t102656*t102657*4.0;
                double t102674 = t102605*t102656*t102657*6.0;
                double t102675 = t102670*t102658*t102659;
                double t102676 = t102672+t102673+t102674+t102675+1.0;
                double t102679 = gcaa*t102608*2.0;
                double t102680 = gamma_bb[index]*t102605*t102656*2.0;
                double t102677 = t102680+t102679;
                double t102678 = 1.0/(t102669*t102669);
                double t102681 = 1.0/(t102665*t102665);
                double t102682 = gcaa*t102608*3.0;
                double t102683 = gamma_bb[index]*t102605*t102656*6.0;
                double t102684 = gcaa*t102660*t102656*t102657*3.0;
                double t102685 = t102682+t102683+t102684;
                double t102690 = 1.0/(t102676*t102676);
                double t102691 = rho_b[index]*(8.334140006820045E15/1.40737488355328E14);
                double t102692 = omega*omega;
                double t102693 = 1.0/rho_b[index];
                double t102694 = omega*t102692*t102693*(7.0368744177664E13/8.334140006820045E15);
                double t102695 = 1.0/pow(t102691,1.0/3.0);
                double t102696 = gx*gx;
                double t102697 = t102696*t102696;
                double t102698 = gamma_bb[index]*gx*t102608;
                double t102699 = t102698+1.0;
                double t102700 = gamma_bb[index]*gx*t102608*2.0;
                double t102701 = t102605*t102657*t102696;
                double t102702 = t102700+t102701+1.0;
                double t102703 = gamma_bb[index]*gx*t102608*3.0;
                double t102704 = gamma_bb[index]*gx*t102660*t102657*t102696;
                double t102705 = t102605*t102657*t102696*3.0;
                double t102706 = t102703+t102704+t102705+1.0;
                double t102722 = gx*t102608*4.0;
                double t102723 = gamma_bb[index]*t102605*t102696*1.2E1;
                double t102724 = gx*t102660*t102657*t102696*1.2E1;
                double t102725 = gamma_bb[index]*t102657*t102659*t102697*4.0;
                double t102707 = t102722+t102723+t102724+t102725;
                double t102708 = gamma_bb[index]*gx*t102608*4.0;
                double t102709 = gamma_bb[index]*gx*t102660*t102657*t102696*4.0;
                double t102710 = t102605*t102657*t102696*6.0;
                double t102711 = t102670*t102659*t102697;
                double t102712 = t102710+t102711+t102708+t102709+1.0;
                double t102715 = gx*t102608*2.0;
                double t102716 = gamma_bb[index]*t102605*t102696*2.0;
                double t102713 = t102715+t102716;
                double t102714 = 1.0/(t102706*t102706);
                double t102717 = 1.0/(t102702*t102702);
                double t102718 = gx*t102608*3.0;
                double t102719 = gamma_bb[index]*t102605*t102696*6.0;
                double t102720 = gx*t102660*t102657*t102696*3.0;
                double t102721 = t102720+t102718+t102719;
                double t102726 = 1.0/(t102712*t102712);
                v_gamma_bb_gamma_bb_[index] = (-rho_b[index]*t102655+t102575*(t102592-t102603*t102556*t102597*t102598* \
                   (t102592-c0f*log((t102557*(1.0/2.0))/(b1f*t102578+b3f*t102579+b2f*c*t102576+b4f*t102580*t102537)+1.0) \
                   *(a1f*c*t102576+1.0)*2.0)+(Aa*t102603*t102556*log((1.0/2.0)/(Aa*(b1a*t102578+b3a*t102579+b2a*c*t102576+ \
                   b4a*t102580*t102537))+1.0)*(t102597*t102598-1.0)*(a1a*c*t102576+1.0)*2.0)/d2fz0)+rho_a[index]*(t102553* \
                   t102556*(c0p*t102550*t102548*2.0-c0f*log((t102557*(1.0/2.0))/(b1f*t102535+b3f*t102536+b2f*c*t102533+ \
                   b4f*t102537*t102538)+1.0)*(a1f*c*t102533+1.0)*2.0)-c0p*t102550*t102548*2.0))*(ccab1*1.0/(t102612*t102612) \
                   *t102604*t102605*(1.0/2.0)-(ccab2*t102604*t102605*(1.0/2.0))/t102616-ccab2*t102604*t102613*1.0/(t102616* \
                   t102616*t102616)*(t102625*t102625)*2.0-ccab4*1.0/(t102630*t102630*t102630)*t102617*(t102618*t102618) \
                   *t102619*2.0+ccab2*t102613*t102605*t102633*t102617*(1.0/2.0)+ccab4*t102617*t102619*t102638*(t102604* \
                   t102605*3.0+t102613*t102605*t102617*3.0+gcab*t102610*t102604*t102605*6.0)-(ccab4*t102613*t102605*t102617* \
                   3.0)/t102630+ccab2*t102610*t102604*t102633*t102625*t102608*2.0-ccab1*gcab*t102610*1.0/(t102612*t102612* \
                   t102612)*t102604*t102605*(1.0/2.0)-(ccab3*gcab*t102610*t102604*t102605*(3.0/2.0))/t102624-ccab3*gcab* \
                   t102610*(t102620*t102620)*t102604*t102613*1.0/(t102624*t102624*t102624)*2.0+ccab3*gcab*t102620*t102604* \
                   t102613*t102642*t102608*3.0+ccab4*t102610*t102613*t102608*t102617*t102618*t102638*4.0+ccab3*gcab*t102610* \
                   t102604*t102613*t102642*(t102604*t102605*(3.0/2.0)+gcab*t102610*t102604*t102605*(3.0/2.0)))+rho_b[index]* \
                   t102655*(ccaa1*t102605*1.0/(t102662*t102662)*t102656*2.0-(ccaa2*t102605*t102656*2.0)/t102665+ccaa2* \
                   t102681*t102657*t102658*t102659*2.0-(ccaa4*t102657*t102658*t102659*1.2E1)/t102676+ccaa4*t102670*t102690* \
                   t102658*t102659*(t102605*t102656*1.2E1+t102657*t102658*t102659*1.2E1+gamma_bb[index]*gcaa*t102660* \
                   t102656*2.4E1)-ccaa1*gamma_bb[index]*gcaa*t102660*1.0/(t102662*t102662*t102662)*t102656*2.0-(ccaa3* \
                   gamma_bb[index]*gcaa*t102660*t102656*6.0)/t102669-ccaa2*t102605*t102656*1.0/(t102665*t102665*t102665) \
                   *t102657*(t102677*t102677)*2.0-ccaa4*t102670*(t102671*t102671)*t102658*1.0/(t102676*t102676*t102676) \
                   *t102659*2.0+ccaa2*gamma_bb[index]*t102605*t102681*t102656*t102677*4.0+ccaa4*gamma_bb[index]*t102671* \
                   t102690*t102657*t102658*t102659*8.0+ccaa3*gcaa*t102660*t102656*t102657*t102685*t102678*6.0+ccaa3*gamma_bb[index]* \
                   gcaa*t102660*t102656*t102657*t102678*(t102605*t102656*6.0+gamma_bb[index]*gcaa*t102660*t102656*6.0) \
                   -ccaa3*gamma_bb[index]*gcaa*t102660*t102656*t102657*(t102685*t102685)*1.0/(t102669*t102669*t102669) \
                   *2.0)+c0*pow(rho_b[index],4.0/3.0)*(omega*t102695*(t102694+erf(pow(t102691,1.0/3.0)/omega)*(3.991211251234741E15/ \
                   2.251799813685248E15)-omega*t102695*(3.0/2.0)-exp(-1.0/(omega*omega)*pow(t102691,2.0/3.0))*(t102694- \
                   omega*t102695))*(4.0/3.0)-1.0)*(cx1*t102605*t102696*1.0/(t102699*t102699)*2.0-(cx2*t102605*t102696* \
                   2.0)/t102702+cx2*t102717*t102657*t102659*t102697*2.0-(cx4*t102657*t102659*t102697*1.2E1)/t102712+cx4* \
                   t102670*t102726*t102659*t102697*(t102605*t102696*1.2E1+t102657*t102659*t102697*1.2E1+gamma_bb[index]* \
                   gx*t102660*t102696*2.4E1)-cx1*gamma_bb[index]*gx*t102660*t102696*1.0/(t102699*t102699*t102699)*2.0- \
                   (cx3*gamma_bb[index]*gx*t102660*t102696*6.0)/t102706-cx2*1.0/(t102702*t102702*t102702)*t102605*(t102713* \
                   t102713)*t102657*t102696*2.0-cx4*1.0/(t102712*t102712*t102712)*t102670*(t102707*t102707)*t102659*t102697* \
                   2.0+cx2*gamma_bb[index]*t102605*t102713*t102717*t102696*4.0+cx4*gamma_bb[index]*t102707*t102726*t102657* \
                   t102659*t102697*8.0+cx3*gx*t102721*t102660*t102714*t102657*t102696*6.0+cx3*gamma_bb[index]*gx*t102660* \
                   t102714*t102657*t102696*(t102605*t102696*6.0+gamma_bb[index]*gx*t102660*t102696*6.0)-cx3*gamma_bb[index]* \
                   gx*(t102721*t102721)*t102660*1.0/(t102706*t102706*t102706)*t102657*t102696*2.0);
            } else if (rho_a[index] > cutoff_) {
                v_gamma_bb_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                double t103397 = 1.0/pow(rho_b[index],1.0/3.0);
                double t103398 = c*t103397;
                double t103399 = sqrt(t103398);
                double t103400 = pow(t103398,3.0/2.0);
                double t103401 = c*c;
                double t103402 = 1.0/pow(rho_b[index],2.0/3.0);
                double t103403 = 1.0/c0p;
                double t103404 = b1p*t103399;
                double t103405 = b3p*t103400;
                double t103406 = b4p*t103401*t103402;
                double t103407 = b2p*c*t103397;
                double t103408 = t103404+t103405+t103406+t103407;
                double t103409 = 1.0/t103408;
                double t103410 = t103403*t103409*(1.0/2.0);
                double t103411 = t103410+1.0;
                double t103412 = log(t103411);
                double t103413 = a1p*c*t103397;
                double t103414 = t103413+1.0;
                double t103415 = gcaa*gcaa;
                double t103416 = 1.0/pow(rho_b[index],1.6E1/3.0);
                double t103417 = 1.0/pow(rho_b[index],8.0/3.0);
                double t103418 = gamma_bb[index]*gamma_bb[index];
                double t103419 = t103415*t103415;
                double t103420 = 1.0/pow(rho_b[index],3.2E1/3.0);
                double t103421 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]);
                double t103422 = gamma_bb[index]*gcaa*t103417;
                double t103423 = t103422+1.0;
                double t103424 = gamma_bb[index]*gcaa*t103417*2.0;
                double t103425 = t103415*t103416*t103418;
                double t103426 = t103424+t103425+1.0;
                double t103427 = gamma_bb[index]*gcaa*t103417*3.0;
                double t103428 = gamma_bb[index]*gcaa*t103421*t103415*t103418;
                double t103429 = t103415*t103416*t103418*3.0;
                double t103430 = t103427+t103428+t103429+1.0;
                double t103431 = t103418*t103418;
                double t103447 = gcaa*t103417*4.0;
                double t103448 = gamma_bb[index]*t103415*t103416*1.2E1;
                double t103449 = gcaa*t103421*t103415*t103418*1.2E1;
                double t103450 = gamma_bb[index]*t103420*t103418*t103419*4.0;
                double t103432 = t103450+t103447+t103448+t103449;
                double t103433 = gamma_bb[index]*gcaa*t103417*4.0;
                double t103434 = gamma_bb[index]*gcaa*t103421*t103415*t103418*4.0;
                double t103435 = t103415*t103416*t103418*6.0;
                double t103436 = t103420*t103431*t103419;
                double t103437 = t103433+t103434+t103435+t103436+1.0;
                double t103440 = gcaa*t103417*2.0;
                double t103441 = gamma_bb[index]*t103415*t103416*2.0;
                double t103438 = t103440+t103441;
                double t103439 = 1.0/(t103430*t103430);
                double t103442 = 1.0/(t103426*t103426);
                double t103443 = gcaa*t103417*3.0;
                double t103444 = gamma_bb[index]*t103415*t103416*6.0;
                double t103445 = gcaa*t103421*t103415*t103418*3.0;
                double t103446 = t103443+t103444+t103445;
                double t103451 = 1.0/(t103437*t103437);
                double t103452 = rho_b[index]*(8.334140006820045E15/1.40737488355328E14);
                double t103453 = omega*omega;
                double t103454 = 1.0/rho_b[index];
                double t103455 = omega*t103453*t103454*(7.0368744177664E13/8.334140006820045E15);
                double t103456 = 1.0/pow(t103452,1.0/3.0);
                double t103457 = gx*gx;
                double t103458 = t103457*t103457;
                double t103459 = gamma_bb[index]*gx*t103417;
                double t103460 = t103459+1.0;
                double t103461 = gamma_bb[index]*gx*t103417*2.0;
                double t103462 = t103416*t103418*t103457;
                double t103463 = t103461+t103462+1.0;
                double t103464 = gamma_bb[index]*gx*t103417*3.0;
                double t103465 = gamma_bb[index]*gx*t103421*t103418*t103457;
                double t103466 = t103416*t103418*t103457*3.0;
                double t103467 = t103464+t103465+t103466+1.0;
                double t103483 = gx*t103417*4.0;
                double t103484 = gamma_bb[index]*t103416*t103457*1.2E1;
                double t103485 = gx*t103421*t103418*t103457*1.2E1;
                double t103486 = gamma_bb[index]*t103420*t103418*t103458*4.0;
                double t103468 = t103483+t103484+t103485+t103486;
                double t103469 = gamma_bb[index]*gx*t103417*4.0;
                double t103470 = gamma_bb[index]*gx*t103421*t103418*t103457*4.0;
                double t103471 = t103416*t103418*t103457*6.0;
                double t103472 = t103420*t103431*t103458;
                double t103473 = t103470+t103471+t103472+t103469+1.0;
                double t103476 = gx*t103417*2.0;
                double t103477 = gamma_bb[index]*t103416*t103457*2.0;
                double t103474 = t103476+t103477;
                double t103475 = 1.0/(t103467*t103467);
                double t103478 = 1.0/(t103463*t103463);
                double t103479 = gx*t103417*3.0;
                double t103480 = gamma_bb[index]*t103416*t103457*6.0;
                double t103481 = gx*t103421*t103418*t103457*3.0;
                double t103482 = t103480+t103481+t103479;
                double t103487 = 1.0/(t103473*t103473);
                v_gamma_bb_gamma_bb_[index] = rho_b[index]*(((pow(2.0,1.0/3.0)*2.0-2.0)*(c0f*log((1.0/2.0)/(c0f*(b1f* \
                   t103399+b3f*t103400+b2f*c*t103397+b4f*t103401*t103402))+1.0)*(a1f*c*t103397+1.0)*2.0-c0p*t103412*t103414* \
                   2.0))/(two_13*2.0-2.0)+c0p*t103412*t103414*2.0)*(ccaa1*1.0/(t103423*t103423)*t103415*t103416*2.0-(ccaa2* \
                   t103415*t103416*2.0)/t103426+ccaa2*t103420*t103442*t103418*t103419*2.0-(ccaa4*t103420*t103418*t103419* \
                   1.2E1)/t103437+ccaa4*t103420*t103431*t103451*t103419*(t103415*t103416*1.2E1+t103420*t103418*t103419* \
                   1.2E1+gamma_bb[index]*gcaa*t103421*t103415*2.4E1)-(ccaa3*gamma_bb[index]*gcaa*t103421*t103415*6.0) \
                   /t103430-ccaa1*gamma_bb[index]*gcaa*t103421*1.0/(t103423*t103423*t103423)*t103415*2.0-ccaa4*t103420* \
                   t103431*(t103432*t103432)*t103419*1.0/(t103437*t103437*t103437)*2.0-ccaa2*t103415*t103416*1.0/(t103426* \
                   t103426*t103426)*t103418*(t103438*t103438)*2.0+ccaa2*gamma_bb[index]*t103415*t103442*t103416*t103438* \
                   4.0+ccaa4*gamma_bb[index]*t103420*t103432*t103451*t103418*t103419*8.0+ccaa3*gcaa*t103421*t103415*t103418* \
                   t103446*t103439*6.0+ccaa3*gamma_bb[index]*gcaa*t103421*t103415*t103418*t103439*(t103415*t103416*6.0+ \
                   gamma_bb[index]*gcaa*t103421*t103415*6.0)-ccaa3*gamma_bb[index]*gcaa*t103421*1.0/(t103430*t103430* \
                   t103430)*t103415*t103418*(t103446*t103446)*2.0)+c0*pow(rho_b[index],4.0/3.0)*(omega*t103456*(t103455+ \
                   erf(pow(t103452,1.0/3.0)/omega)*(3.991211251234741E15/2.251799813685248E15)-omega*t103456*(3.0/2.0) \
                   -exp(-1.0/(omega*omega)*pow(t103452,2.0/3.0))*(t103455-omega*t103456))*(4.0/3.0)-1.0)*(cx1*1.0/(t103460* \
                   t103460)*t103416*t103457*2.0-(cx2*t103416*t103457*2.0)/t103463+cx2*t103420*t103418*t103458*t103478* \
                   2.0-(cx4*t103420*t103418*t103458*1.2E1)/t103473+cx4*t103420*t103431*t103458*t103487*(t103416*t103457* \
                   1.2E1+t103420*t103418*t103458*1.2E1+gamma_bb[index]*gx*t103421*t103457*2.4E1)-cx1*gamma_bb[index]* \
                   gx*t103421*1.0/(t103460*t103460*t103460)*t103457*2.0-(cx3*gamma_bb[index]*gx*t103421*t103457*6.0)/ \
                   t103467-cx2*t103416*t103418*1.0/(t103463*t103463*t103463)*(t103474*t103474)*t103457*2.0-cx4*t103420* \
                   t103431*1.0/(t103473*t103473*t103473)*t103458*(t103468*t103468)*2.0+cx2*gamma_bb[index]*t103416*t103474* \
                   t103457*t103478*4.0+cx4*gamma_bb[index]*t103420*t103418*t103458*t103468*t103487*8.0+cx3*gx*t103421* \
                   t103418*t103482*t103457*t103475*6.0+cx3*gamma_bb[index]*gx*t103421*t103418*t103457*t103475*(t103416* \
                   t103457*6.0+gamma_bb[index]*gx*t103421*t103457*6.0)-cx3*gamma_bb[index]*gx*t103421*t103418*(t103482* \
                   t103482)*t103457*1.0/(t103467*t103467*t103467)*2.0);
            } else {
                v_gamma_bb_gamma_bb_[index] = 0.0;
            }

        }
        if (is_meta_) {

            //V_rho_a_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_a_tau_a_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_a_tau_a_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_a_tau_a_[index] = 0.0;
            } else {
                v_rho_a_tau_a_[index] = 0.0;
            }

            //V_rho_a_tau_b
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_a_tau_b_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_a_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_a_tau_b_[index] = 0.0;
            } else {
                v_rho_a_tau_b_[index] = 0.0;
            }

            //V_rho_b_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_b_tau_a_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_b_tau_a_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_b_tau_a_[index] = 0.0;
            } else {
                v_rho_b_tau_a_[index] = 0.0;
            }

            //V_rho_b_tau_b
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_b_tau_b_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_b_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_b_tau_b_[index] = 0.0;
            } else {
                v_rho_b_tau_b_[index] = 0.0;
            }

            //V_tau_a_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_tau_a_tau_a_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_tau_a_tau_a_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_tau_a_tau_a_[index] = 0.0;
            } else {
                v_tau_a_tau_a_[index] = 0.0;
            }

            //V_tau_a_tau_b
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_tau_a_tau_b_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_tau_a_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_tau_a_tau_b_[index] = 0.0;
            } else {
                v_tau_a_tau_b_[index] = 0.0;
            }

            //V_tau_b_tau_b
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_tau_b_tau_b_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_tau_b_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_tau_b_tau_b_[index] = 0.0;
            } else {
                v_tau_b_tau_b_[index] = 0.0;
            }

            if (is_gga_) {

                //V_gamma_aa_tau_a
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } else {
                    v_gamma_aa_tau_a_[index] = 0.0;
                }

                //V_gamma_aa_tau_b
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_aa_tau_b_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_aa_tau_b_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_aa_tau_b_[index] = 0.0;
                } else {
                    v_gamma_aa_tau_b_[index] = 0.0;
                }

                //V_gamma_ab_tau_a
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_ab_tau_a_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_ab_tau_a_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_ab_tau_a_[index] = 0.0;
                } else {
                    v_gamma_ab_tau_a_[index] = 0.0;
                }

                //V_gamma_ab_tau_b
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_ab_tau_b_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_ab_tau_b_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_ab_tau_b_[index] = 0.0;
                } else {
                    v_gamma_ab_tau_b_[index] = 0.0;
                }

                //V_gamma_bb_tau_a
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_bb_tau_a_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_bb_tau_a_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_bb_tau_a_[index] = 0.0;
                } else {
                    v_gamma_bb_tau_a_[index] = 0.0;
                }

                //V_gamma_bb_tau_b
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_bb_tau_b_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_bb_tau_b_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_bb_tau_b_[index] = 0.0;
                } else {
                    v_gamma_bb_tau_b_[index] = 0.0;
                }

            }
        }
    }
}

}}

