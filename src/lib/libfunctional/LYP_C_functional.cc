/**********************************************************
* LYP_C_functional.cc: definitions for LYP_C_functional for KS-DFT
* Robert Parrish, robparrish@gmail.com
* Autogenerated by MATLAB Script on 25-May-2011
*
***********************************************************/
#include <libmints/mints.h>
#include <libciomr/libciomr.h>
#include "LYP_C_functional.h"
#include <stdlib.h>
#include <cmath>
#include <string>
#include <string>
#include <vector>

using namespace psi;
using namespace boost;
using namespace std;

namespace psi { namespace functional {

LYP_C_Functional::LYP_C_Functional(int npoints, int deriv) : Functional(npoints, deriv)
{

    name_ = "LYP_C";
    description_ = "LYP Correlation";
    citation_ = "B. Miehlich et. al., Chem. Phys. Lett., 157(3), 200-206 (1989)";

    double A = 4.9180000000000001E-02;
    params_.push_back(make_pair("A",A));
    double B = 1.3200000000000001E-01;
    params_.push_back(make_pair("B",B));
    double C = 2.5330000000000003E-01;
    params_.push_back(make_pair("C",C));
    double Dd = 3.4899999999999998E-01;
    params_.push_back(make_pair("Dd",Dd));
    double CFext = 3.6462398978764774E+01;
    params_.push_back(make_pair("CFext",CFext));

    is_gga_ = true;
    is_meta_ = false;

    //Required allocateion
    allocate();
}
LYP_C_Functional::~LYP_C_Functional()
{
}
void LYP_C_Functional::computeRKSFunctional(boost::shared_ptr<RKSFunctions> prop)
{
    int ntrue = prop->npoints();

    const double* restrict rho_a;
    const double* restrict gamma_aa;
    const double* restrict tau_a;

    rho_a = prop->property_value("RHO_A")->pointer();
    if (is_gga_) {
        gamma_aa = prop->property_value("GAMMA_AA")->pointer();
    }
    if (is_meta_) {
        tau_a = prop->property_value("TAU_A")->pointer();
    }

    double A = params_[0].second;
    double B = params_[1].second;
    double C = params_[2].second;
    double Dd = params_[3].second;
    double CFext = params_[4].second;

    //Functional
    for (int index = 0; index < ntrue; index++) {

        //Functional Value
        if (rho_a[index] > cutoff_) {
            double t4387 = rho_a[index]*2.0;
            double t4388 = 1.0/pow(t4387,1.0/3.0);
            double t4389 = Dd*t4388;
            double t4390 = t4389+1.0;
            double t4391 = 1.0/t4390;
            double t4392 = rho_a[index]*rho_a[index];
            functional_[index] = A*rho_a[index]*t4391*-2.0-A*B*t4391*1.0/pow(t4387,1.1E1/3.0)*exp(-C*t4388)*(t4392* \
               (CFext*pow(rho_a[index],8.0/3.0)*2.0-gamma_aa[index]*(C*t4388*(1.0/9.0)+Dd*t4391*t4388*(1.0/9.0)-1.1E1/ \
               9.0)+gamma_aa[index]*(C*t4388*(1.0/1.8E1)+Dd*t4391*t4388*(1.0/1.8E1)-5.0/2.0)*2.0-gamma_aa[index]* \
               (C*t4388*(7.0/1.8E1)+Dd*t4391*t4388*(7.0/1.8E1)-4.7E1/1.8E1)*4.0)-gamma_aa[index]*t4392*(2.2E1/3.0) \
               );
        } else {
            functional_[index] = 0.0;
        }

    }
    //First Partials
    for (int index = 0; index < ntrue && deriv_ >= 1; index++) {

        //V_rho_a
        if (rho_a[index] > cutoff_) {
            double t4394 = rho_a[index]*2.0;
            double t4395 = 1.0/pow(t4394,1.0/3.0);
            double t4396 = Dd*t4395;
            double t4397 = t4396+1.0;
            double t4398 = rho_a[index]*rho_a[index];
            double t4399 = 1.0/t4397;
            double t4418 = C*t4395;
            double t4400 = exp(-t4418);
            double t4401 = 1.0/pow(t4394,4.0/3.0);
            double t4402 = 1.0/(t4397*t4397);
            double t4403 = Dd*Dd;
            double t4404 = 1.0/pow(t4394,5.0/3.0);
            double t4405 = C*t4395*(1.0/9.0);
            double t4406 = Dd*t4395*t4399*(1.0/9.0);
            double t4407 = t4405+t4406-1.1E1/9.0;
            double t4408 = gamma_aa[index]*t4407;
            double t4409 = C*t4395*(1.0/1.8E1);
            double t4410 = Dd*t4395*t4399*(1.0/1.8E1);
            double t4411 = t4410+t4409-5.0/2.0;
            double t4412 = C*t4395*(7.0/1.8E1);
            double t4413 = Dd*t4395*t4399*(7.0/1.8E1);
            double t4414 = t4412+t4413-4.7E1/1.8E1;
            double t4415 = gamma_aa[index]*t4414*4.0;
            double t4416 = pow(rho_a[index],8.0/3.0);
            double t4419 = gamma_aa[index]*t4411*2.0;
            double t4420 = CFext*t4416*2.0;
            double t4417 = -t4420+t4415+t4408-t4419;
            double t4421 = t4398*t4417;
            double t4422 = gamma_aa[index]*t4398*(2.2E1/3.0);
            double t4423 = t4421+t4422;
            double t4424 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]);
            v_rho_a_[index] = -A*t4399-A*Dd*1.0/pow(t4394,7.0/3.0)*t4398*t4402*(4.0/3.0)-A*B*1.0/pow(t4394,1.4E1/ \
               3.0)*t4399*t4400*t4423*(1.1E1/3.0)+A*B*1.0/pow(t4394,1.1E1/3.0)*t4399*t4400*(-t4398*(CFext*pow(rho_a[index],5.0/ \
               3.0)*(8.0/3.0)+gamma_aa[index]*(C*t4401*(1.0/2.7E1)+Dd*t4399*t4401*(1.0/2.7E1)-t4402*t4403*t4404*(1.0/ \
               2.7E1))-gamma_aa[index]*(C*t4401*(1.0/5.4E1)+Dd*t4399*t4401*(1.0/5.4E1)-t4402*t4403*t4404*(1.0/5.4E1) \
               )*2.0+gamma_aa[index]*(C*t4401*(7.0/5.4E1)+Dd*t4399*t4401*(7.0/5.4E1)-t4402*t4403*t4404*(7.0/5.4E1) \
               )*4.0)+gamma_aa[index]*rho_a[index]*(2.2E1/3.0)+rho_a[index]*t4417)+A*B*C*t4399*t4400*t4423*t4424* \
               (1.0/9.6E1)+A*B*Dd*t4400*t4402*t4423*t4424*(1.0/9.6E1);
        } else {
            v_rho_a_[index] = 0.0;
        }

        if (is_gga_) {

            if (rho_a[index] > cutoff_) {
                double t4426 = rho_a[index]*2.0;
                double t4427 = 1.0/pow(t4426,1.0/3.0);
                double t4428 = Dd*t4427;
                double t4429 = t4428+1.0;
                double t4430 = 1.0/t4429;
                double t4431 = rho_a[index]*rho_a[index];
                double t4432 = exp(-C*t4427);
                double t4433 = 1.0/pow(t4426,1.1E1/3.0);
                v_gamma_aa_[index] = A*B*t4430*t4432*t4433*(t4431*(1.6E1/3.0)+t4431*(C*t4427*(7.0/9.0)+Dd*t4430*t4427* \
                   (7.0/9.0)-4.7E1/9.0))+A*B*t4430*t4432*t4433*(t4431+t4431*(C*t4427*(7.0/1.8E1)+Dd*t4430*t4427*(7.0/ \
                   1.8E1)-1.3E1/1.8E1))*2.0;
            } else {
                v_gamma_aa_[index] = 0.0;
            }

        }
        if (is_meta_) {

            //V_tau_a
            if (rho_a[index] > cutoff_) {
                v_tau_a_[index] = 0.0;
            } else {
                v_tau_a_[index] = 0.0;
            }

        }
    }
    //Second Partials
    for (int index = 0; index < ntrue && deriv_ >= 2; index++) {

        //V_rho_a_rho_a
        if (rho_a[index] > cutoff_) {
            double t4436 = rho_a[index]*2.0;
            double t4437 = 1.0/pow(t4436,1.0/3.0);
            double t4438 = Dd*t4437;
            double t4439 = t4438+1.0;
            double t4440 = 1.0/(t4439*t4439);
            double t4441 = rho_a[index]*rho_a[index];
            double t4442 = 1.0/t4439;
            double t4464 = C*t4437;
            double t4443 = exp(-t4464);
            double t4444 = 1.0/pow(t4436,1.1E1/3.0);
            double t4445 = 1.0/pow(t4436,4.0/3.0);
            double t4446 = Dd*Dd;
            double t4447 = 1.0/pow(t4436,5.0/3.0);
            double t4448 = 1.0/pow(t4436,7.0/3.0);
            double t4449 = 1.0/(t4439*t4439*t4439);
            double t4450 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]);
            double t4451 = 1.0/pow(t4436,8.0/3.0);
            double t4452 = C*t4437*(1.0/9.0);
            double t4453 = Dd*t4442*t4437*(1.0/9.0);
            double t4454 = t4452+t4453-1.1E1/9.0;
            double t4455 = gamma_aa[index]*t4454;
            double t4456 = C*t4437*(1.0/1.8E1);
            double t4457 = Dd*t4442*t4437*(1.0/1.8E1);
            double t4458 = t4456+t4457-5.0/2.0;
            double t4459 = C*t4437*(7.0/1.8E1);
            double t4460 = Dd*t4442*t4437*(7.0/1.8E1);
            double t4461 = t4460+t4459-4.7E1/1.8E1;
            double t4462 = gamma_aa[index]*t4461*4.0;
            double t4463 = pow(rho_a[index],8.0/3.0);
            double t4465 = C*t4445*(1.0/2.7E1);
            double t4466 = Dd*t4442*t4445*(1.0/2.7E1);
            double t4480 = t4440*t4446*t4447*(1.0/2.7E1);
            double t4467 = -t4480+t4465+t4466;
            double t4468 = gamma_aa[index]*t4467;
            double t4469 = C*t4445*(1.0/5.4E1);
            double t4470 = Dd*t4442*t4445*(1.0/5.4E1);
            double t4481 = t4440*t4446*t4447*(1.0/5.4E1);
            double t4471 = t4470-t4481+t4469;
            double t4472 = C*t4445*(7.0/5.4E1);
            double t4473 = Dd*t4442*t4445*(7.0/5.4E1);
            double t4483 = t4440*t4446*t4447*(7.0/5.4E1);
            double t4474 = t4472+t4473-t4483;
            double t4475 = gamma_aa[index]*t4474*4.0;
            double t4476 = pow(rho_a[index],5.0/3.0);
            double t4477 = CFext*t4476*(8.0/3.0);
            double t4482 = gamma_aa[index]*t4471*2.0;
            double t4478 = -t4482+t4475+t4468+t4477;
            double t4498 = gamma_aa[index]*t4458*2.0;
            double t4499 = CFext*t4463*2.0;
            double t4479 = t4462+t4455-t4498-t4499;
            double t4484 = C*t4448*(4.0/8.1E1);
            double t4485 = Dd*t4442*t4448*(4.0/8.1E1);
            double t4486 = Dd*t4450*t4446*t4449*(1.0/3.24E2);
            double t4487 = t4484+t4485+t4486-t4440*t4451*t4446*(2.0/2.7E1);
            double t4488 = gamma_aa[index]*t4487;
            double t4489 = C*t4448*(2.0/8.1E1);
            double t4490 = Dd*t4442*t4448*(2.0/8.1E1);
            double t4491 = Dd*t4450*t4446*t4449*(1.0/6.48E2);
            double t4492 = t4490+t4491+t4489-t4440*t4451*t4446*(1.0/2.7E1);
            double t4493 = C*t4448*(1.4E1/8.1E1);
            double t4494 = Dd*t4442*t4448*(1.4E1/8.1E1);
            double t4495 = Dd*t4450*t4446*t4449*(7.0/6.48E2);
            double t4496 = t4493+t4494+t4495-t4440*t4451*t4446*(7.0/2.7E1);
            double t4497 = gamma_aa[index]*t4496*4.0;
            double t4500 = t4441*t4479;
            double t4501 = gamma_aa[index]*t4441*(2.2E1/3.0);
            double t4502 = t4500+t4501;
            double t4503 = 1.0/pow(t4436,1.9E1/3.0);
            double t4504 = gamma_aa[index]*rho_a[index]*(2.2E1/3.0);
            double t4505 = rho_a[index]*t4479;
            double t4508 = t4441*t4478;
            double t4506 = t4504+t4505-t4508;
            double t4507 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]);
            double t4509 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]) \
               ;
            v_rho_a_rho_a_[index] = A*Dd*rho_a[index]*t4440*t4448*(-1.6E1/3.0)-A*t4441*t4444*t4446*t4449*(1.6E1/ \
               9.0)+A*Dd*t4440*t4441*1.0/pow(t4436,1.0E1/3.0)*(8.0E1/9.0)+A*B*t4442*t4443*1.0/pow(t4436,1.7E1/3.0) \
               *t4502*(3.08E2/9.0)-A*B*t4442*t4443*1.0/pow(t4436,1.4E1/3.0)*t4506*(4.4E1/3.0)+A*B*t4442*t4443*t4444* \
               (gamma_aa[index]*(8.0/3.0)+t4462+t4455-CFext*t4463*2.0-gamma_aa[index]*t4458*2.0-rho_a[index]*t4478* \
               2.0+t4441*(t4488+t4497-gamma_aa[index]*t4492*2.0))+A*B*t4442*t4443*t4444*(gamma_aa[index]*(1.4E1/3.0) \
               -rho_a[index]*t4478*2.0+t4441*(t4488+t4497-gamma_aa[index]*t4492*2.0-CFext*pow(rho_a[index],2.0/3.0) \
               *(4.0E1/9.0)))+A*B*t4443*t4446*t4449*t4502*t4503*(4.0/9.0)+A*B*(C*C)*t4442*t4443*t4502*t4503*(2.0/ \
               9.0)-A*B*C*t4442*t4443*t4502*t4509*(1.3E1/1.44E2)+A*B*C*t4442*t4443*t4506*t4507*(1.0/2.4E1)-A*B*Dd* \
               t4440*t4443*t4502*t4509*(1.3E1/1.44E2)+A*B*Dd*t4440*t4443*t4506*t4507*(1.0/2.4E1)+A*B*C*Dd*t4440*t4443* \
               t4502*t4503*(4.0/9.0);
        } else {
            v_rho_a_rho_a_[index] = 0.0;
        }

        if (is_gga_) {

            //V_rho_a_gamma_aa
            if (rho_a[index] > cutoff_) {
                double t4511 = rho_a[index]*2.0;
                double t4512 = 1.0/pow(t4511,1.0/3.0);
                double t4513 = Dd*t4512;
                double t4514 = t4513+1.0;
                double t4515 = 1.0/t4514;
                double t4516 = 1.0/pow(t4511,4.0/3.0);
                double t4523 = C*t4512;
                double t4517 = exp(-t4523);
                double t4518 = 1.0/pow(t4511,1.1E1/3.0);
                double t4519 = rho_a[index]*rho_a[index];
                double t4520 = Dd*Dd;
                double t4521 = 1.0/(t4514*t4514);
                double t4522 = 1.0/pow(t4511,5.0/3.0);
                double t4524 = C*t4512*(7.0/9.0);
                double t4525 = Dd*t4512*t4515*(7.0/9.0);
                double t4526 = t4524+t4525-4.7E1/9.0;
                double t4527 = 1.0/pow(t4511,1.4E1/3.0);
                double t4528 = C*t4512*(7.0/1.8E1);
                double t4529 = Dd*t4512*t4515*(7.0/1.8E1);
                double t4530 = t4528+t4529-1.3E1/1.8E1;
                double t4531 = 1.0/rho_a[index];
                double t4532 = C*t4512*(1.0/9.0);
                double t4533 = Dd*t4512*t4515*(1.0/9.0);
                double t4534 = t4532+t4533-1.1E1/9.0;
                double t4535 = C*t4516*(7.0/5.4E1);
                double t4536 = Dd*t4515*t4516*(7.0/5.4E1);
                double t4537 = t4526*t4519;
                double t4538 = t4519*(1.6E1/3.0);
                double t4539 = t4537+t4538;
                double t4540 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]);
                double t4541 = t4530*t4519;
                double t4542 = t4541+t4519;
                v_rho_a_gamma_aa_[index] = -A*B*t4515*t4517*t4518*(t4519*(t4535+t4536-t4531*t4534*(1.0/4.0)-t4520* \
                   t4521*t4522*(7.0/5.4E1))-rho_a[index]*t4530)+A*B*t4515*t4517*t4518*(rho_a[index]*(1.6E1/3.0)+rho_a[index]* \
                   t4526-t4519*(C*t4516*(7.0/2.7E1)+Dd*t4515*t4516*(7.0/2.7E1)-t4520*t4521*t4522*(7.0/2.7E1)))+A*B*t4515* \
                   t4517*t4518*(t4511-t4519*(t4535+t4536+t4531*t4534*(1.0/4.0)-t4520*t4521*t4522*(7.0/5.4E1))+rho_a[index]* \
                   t4530)-A*B*t4515*t4542*t4517*t4527*(2.2E1/3.0)-A*B*t4515*t4517*t4527*t4539*(1.1E1/3.0)+A*B*C*t4540* \
                   t4515*t4542*t4517*(1.0/4.8E1)+A*B*C*t4540*t4515*t4517*t4539*(1.0/9.6E1)+A*B*Dd*t4521*t4540*t4542*t4517* \
                   (1.0/4.8E1)+A*B*Dd*t4521*t4540*t4517*t4539*(1.0/9.6E1);
            } else {
                v_rho_a_gamma_aa_[index] = 0.0;
            }

            //V_gamma_aa_gamma_aa
            if (rho_a[index] > cutoff_) {
                v_gamma_aa_gamma_aa_[index] = 0.0;
            } else {
                v_gamma_aa_gamma_aa_[index] = 0.0;
            }

        }
        if (is_meta_) {

            //V_rho_a_tau_a
            if (rho_a[index] > cutoff_) {
                v_rho_a_tau_a_[index] = 0.0;
            } else {
                v_rho_a_tau_a_[index] = 0.0;
            }

            //V_tau_a_tau_a
            if (rho_a[index] > cutoff_) {
                v_tau_a_tau_a_[index] = 0.0;
            } else {
                v_tau_a_tau_a_[index] = 0.0;
            }

            if (is_gga_) {

                //V_gamma_aa_tau_a
                if (rho_a[index] > cutoff_) {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } else {
                    v_gamma_aa_tau_a_[index] = 0.0;
                }

            }
        }
    }
}
void LYP_C_Functional::computeUKSFunctional(boost::shared_ptr<UKSFunctions> prop)
{
    int ntrue = prop->npoints();

    const double* restrict rho_a;
    const double* restrict rho_b;
    const double* restrict gamma_aa;
    const double* restrict gamma_ab;
    const double* restrict gamma_bb;
    const double* restrict tau_a;
    const double* restrict tau_b;

    rho_a = prop->property_value("RHO_A")->pointer();
    rho_b = prop->property_value("RHO_B")->pointer();
    if (is_gga_) {
        gamma_aa = prop->property_value("GAMMA_AA")->pointer();
        gamma_ab = prop->property_value("GAMMA_AB")->pointer();
        gamma_bb = prop->property_value("GAMMA_BB")->pointer();
    }
    if (is_meta_) {
        tau_a = prop->property_value("TAU_A")->pointer();
        tau_b = prop->property_value("TAU_B")->pointer();
    }

    double A = params_[0].second;
    double B = params_[1].second;
    double C = params_[2].second;
    double Dd = params_[3].second;
    double CFext = params_[4].second;

    //Functional
    for (int index = 0; index < ntrue; index++) {

        //Functional Value
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t3715 = rho_a[index]+rho_b[index];
            double t3716 = 1.0/pow(t3715,1.0/3.0);
            double t3717 = Dd*t3716;
            double t3718 = t3717+1.0;
            double t3719 = 1.0/t3718;
            double t3720 = t3715*t3715;
            double t3721 = t3720*(2.0/3.0);
            double t3722 = gamma_ab[index]*2.0;
            double t3723 = gamma_aa[index]+gamma_bb[index]+t3722;
            double t3724 = 1.0/t3715;
            functional_[index] = A*rho_a[index]*rho_b[index]*t3724*t3719*-4.0-A*B*1.0/pow(t3715,1.1E1/3.0)*t3719* \
               exp(-C*t3716)*(t3720*t3723*(-2.0/3.0)+gamma_aa[index]*(t3721-rho_b[index]*rho_b[index])+gamma_bb[index]* \
               (t3721-rho_a[index]*rho_a[index])+rho_a[index]*rho_b[index]*((gamma_aa[index]+gamma_bb[index])*(C* \
               t3716*(1.0/1.8E1)+Dd*t3716*t3719*(1.0/1.8E1)-5.0/2.0)+CFext*(pow(rho_a[index],8.0/3.0)+pow(rho_b[index],8.0/ \
               3.0))-t3723*(C*t3716*(7.0/1.8E1)+Dd*t3716*t3719*(7.0/1.8E1)-4.7E1/1.8E1)-t3724*(gamma_aa[index]*rho_a[index]+ \
               gamma_bb[index]*rho_b[index])*(C*t3716*(1.0/9.0)+Dd*t3716*t3719*(1.0/9.0)-1.1E1/9.0)));
        } else if (rho_a[index] > cutoff_) {
            functional_[index] = 0.0;
        } else if (rho_b[index] > cutoff_) {
            functional_[index] = 0.0;
        } else {
            functional_[index] = 0.0;
        }

    }
    //First Partials
    for (int index = 0; index < ntrue && deriv_ >= 1; index++) {

        //V_rho_a
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t3726 = rho_a[index]+rho_b[index];
            double t3727 = 1.0/pow(t3726,1.0/3.0);
            double t3728 = Dd*t3727;
            double t3729 = t3728+1.0;
            double t3730 = 1.0/t3729;
            double t3731 = t3726*t3726;
            double t3732 = t3731*(2.0/3.0);
            double t3733 = gamma_ab[index]*2.0;
            double t3734 = gamma_aa[index]+gamma_bb[index]+t3733;
            double t3735 = 1.0/t3726;
            double t3762 = C*t3727;
            double t3736 = exp(-t3762);
            double t3737 = C*t3727*(7.0/1.8E1);
            double t3738 = Dd*t3730*t3727*(7.0/1.8E1);
            double t3739 = t3737+t3738-4.7E1/1.8E1;
            double t3740 = t3734*t3739;
            double t3741 = gamma_aa[index]+gamma_bb[index];
            double t3742 = C*t3727*(1.0/1.8E1);
            double t3743 = Dd*t3730*t3727*(1.0/1.8E1);
            double t3744 = t3742+t3743-5.0/2.0;
            double t3745 = pow(rho_a[index],8.0/3.0);
            double t3746 = pow(rho_b[index],8.0/3.0);
            double t3747 = t3745+t3746;
            double t3748 = gamma_aa[index]*rho_a[index];
            double t3749 = gamma_bb[index]*rho_b[index];
            double t3750 = t3748+t3749;
            double t3751 = C*t3727*(1.0/9.0);
            double t3752 = Dd*t3730*t3727*(1.0/9.0);
            double t3753 = t3751+t3752-1.1E1/9.0;
            double t3754 = t3750*t3735*t3753;
            double t3769 = t3741*t3744;
            double t3770 = CFext*t3747;
            double t3755 = t3740-t3770+t3754-t3769;
            double t3756 = rho_b[index]*(4.0/3.0);
            double t3757 = 1.0/pow(t3726,4.0/3.0);
            double t3758 = 1.0/(t3729*t3729);
            double t3759 = Dd*Dd;
            double t3760 = 1.0/pow(t3726,5.0/3.0);
            double t3761 = 1.0/(t3726*t3726);
            double t3763 = rho_b[index]*rho_b[index];
            double t3764 = t3732-t3763;
            double t3765 = gamma_aa[index]*t3764;
            double t3766 = rho_a[index]*rho_a[index];
            double t3767 = t3732-t3766;
            double t3768 = gamma_bb[index]*t3767;
            double t3773 = t3731*t3734*(2.0/3.0);
            double t3774 = rho_a[index]*rho_b[index]*t3755;
            double t3771 = -t3773+t3765-t3774+t3768;
            double t3772 = 1.0/(t3726*t3726*t3726*t3726*t3726);
            v_rho_a_[index] = A*rho_b[index]*t3730*t3735*-4.0+A*rho_a[index]*rho_b[index]*t3730*t3761*4.0+A*B* \
               t3730*1.0/pow(t3726,1.1E1/3.0)*t3736*(rho_b[index]*t3755-gamma_aa[index]*(rho_a[index]*(4.0/3.0)+t3756) \
               +gamma_bb[index]*(rho_a[index]*(2.0/3.0)-t3756)+t3734*(rho_a[index]*2.0+rho_b[index]*2.0)*(2.0/3.0) \
               -rho_a[index]*rho_b[index]*(CFext*pow(rho_a[index],5.0/3.0)*(8.0/3.0)-t3741*(C*t3757*(1.0/5.4E1)+Dd* \
               t3730*t3757*(1.0/5.4E1)-t3760*t3758*t3759*(1.0/5.4E1))+t3734*(C*t3757*(7.0/5.4E1)+Dd*t3730*t3757*(7.0/ \
               5.4E1)-t3760*t3758*t3759*(7.0/5.4E1))+t3750*t3735*(C*t3757*(1.0/2.7E1)+Dd*t3730*t3757*(1.0/2.7E1)- \
               t3760*t3758*t3759*(1.0/2.7E1))-gamma_aa[index]*t3735*t3753+t3750*t3761*t3753))-A*Dd*rho_a[index]*rho_b[index]* \
               1.0/pow(t3726,7.0/3.0)*t3758*(4.0/3.0)+A*B*t3730*1.0/pow(t3726,1.4E1/3.0)*t3771*t3736*(1.1E1/3.0)- \
               A*B*C*t3730*t3771*t3736*t3772*(1.0/3.0)-A*B*Dd*t3771*t3736*t3772*t3758*(1.0/3.0);
        } else if (rho_a[index] > cutoff_) {
            v_rho_a_[index] = 0.0;
        } else if (rho_b[index] > cutoff_) {
            v_rho_a_[index] = 0.0;
        } else {
            v_rho_a_[index] = 0.0;
        }

        //V_rho_b
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t3776 = rho_a[index]+rho_b[index];
            double t3777 = 1.0/pow(t3776,1.0/3.0);
            double t3778 = Dd*t3777;
            double t3779 = t3778+1.0;
            double t3780 = 1.0/t3779;
            double t3781 = t3776*t3776;
            double t3782 = t3781*(2.0/3.0);
            double t3783 = gamma_ab[index]*2.0;
            double t3784 = gamma_aa[index]+gamma_bb[index]+t3783;
            double t3785 = 1.0/t3776;
            double t3812 = C*t3777;
            double t3786 = exp(-t3812);
            double t3787 = C*t3777*(7.0/1.8E1);
            double t3788 = Dd*t3780*t3777*(7.0/1.8E1);
            double t3789 = t3787+t3788-4.7E1/1.8E1;
            double t3790 = t3784*t3789;
            double t3791 = gamma_aa[index]+gamma_bb[index];
            double t3792 = C*t3777*(1.0/1.8E1);
            double t3793 = Dd*t3780*t3777*(1.0/1.8E1);
            double t3794 = t3792+t3793-5.0/2.0;
            double t3795 = pow(rho_a[index],8.0/3.0);
            double t3796 = pow(rho_b[index],8.0/3.0);
            double t3797 = t3795+t3796;
            double t3798 = gamma_aa[index]*rho_a[index];
            double t3799 = gamma_bb[index]*rho_b[index];
            double t3800 = t3798+t3799;
            double t3801 = C*t3777*(1.0/9.0);
            double t3802 = Dd*t3780*t3777*(1.0/9.0);
            double t3803 = t3801+t3802-1.1E1/9.0;
            double t3804 = t3785*t3800*t3803;
            double t3819 = t3791*t3794;
            double t3820 = CFext*t3797;
            double t3805 = t3790-t3820+t3804-t3819;
            double t3806 = rho_a[index]*(4.0/3.0);
            double t3807 = 1.0/pow(t3776,4.0/3.0);
            double t3808 = 1.0/(t3779*t3779);
            double t3809 = Dd*Dd;
            double t3810 = 1.0/pow(t3776,5.0/3.0);
            double t3811 = 1.0/(t3776*t3776);
            double t3813 = rho_b[index]*rho_b[index];
            double t3814 = t3782-t3813;
            double t3815 = gamma_aa[index]*t3814;
            double t3816 = rho_a[index]*rho_a[index];
            double t3817 = t3782-t3816;
            double t3818 = gamma_bb[index]*t3817;
            double t3823 = t3781*t3784*(2.0/3.0);
            double t3824 = rho_a[index]*rho_b[index]*t3805;
            double t3821 = -t3823+t3815-t3824+t3818;
            double t3822 = 1.0/(t3776*t3776*t3776*t3776*t3776);
            v_rho_b_[index] = A*rho_a[index]*t3780*t3785*-4.0+A*rho_a[index]*rho_b[index]*t3780*t3811*4.0+A*B* \
               t3780*1.0/pow(t3776,1.1E1/3.0)*t3786*(rho_a[index]*t3805-gamma_bb[index]*(rho_b[index]*(4.0/3.0)+t3806) \
               +gamma_aa[index]*(rho_b[index]*(2.0/3.0)-t3806)+t3784*(rho_a[index]*2.0+rho_b[index]*2.0)*(2.0/3.0) \
               -rho_a[index]*rho_b[index]*(CFext*pow(rho_b[index],5.0/3.0)*(8.0/3.0)-t3791*(C*t3807*(1.0/5.4E1)+Dd* \
               t3780*t3807*(1.0/5.4E1)-t3810*t3808*t3809*(1.0/5.4E1))+t3784*(C*t3807*(7.0/5.4E1)+Dd*t3780*t3807*(7.0/ \
               5.4E1)-t3810*t3808*t3809*(7.0/5.4E1))+t3785*t3800*(C*t3807*(1.0/2.7E1)+Dd*t3780*t3807*(1.0/2.7E1)- \
               t3810*t3808*t3809*(1.0/2.7E1))-gamma_bb[index]*t3785*t3803+t3800*t3811*t3803))-A*Dd*rho_a[index]*rho_b[index]* \
               1.0/pow(t3776,7.0/3.0)*t3808*(4.0/3.0)+A*B*t3780*1.0/pow(t3776,1.4E1/3.0)*t3786*t3821*(1.1E1/3.0)- \
               A*B*C*t3780*t3786*t3821*t3822*(1.0/3.0)-A*B*Dd*t3786*t3821*t3822*t3808*(1.0/3.0);
        } else if (rho_a[index] > cutoff_) {
            v_rho_b_[index] = 0.0;
        } else if (rho_b[index] > cutoff_) {
            v_rho_b_[index] = 0.0;
        } else {
            v_rho_b_[index] = 0.0;
        }

        if (is_gga_) {

            //V_gamma_aa
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t3826 = rho_a[index]+rho_b[index];
                double t3827 = 1.0/pow(t3826,1.0/3.0);
                double t3828 = Dd*t3827;
                double t3829 = t3828+1.0;
                double t3830 = 1.0/t3829;
                v_gamma_aa_[index] = A*B*t3830*1.0/pow(t3826,1.1E1/3.0)*exp(-C*t3827)*(rho_b[index]*rho_b[index]+ \
                   rho_a[index]*rho_b[index]*(C*t3827*(1.0/3.0)+Dd*t3830*t3827*(1.0/3.0)+(rho_a[index]*(C*t3827*(1.0/ \
                   9.0)+Dd*t3830*t3827*(1.0/9.0)-1.1E1/9.0))/t3826-1.0/9.0));
            } else if (rho_a[index] > cutoff_) {
                v_gamma_aa_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_aa_[index] = 0.0;
            } else {
                v_gamma_aa_[index] = 0.0;
            }

            //V_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t3832 = rho_a[index]+rho_b[index];
                double t3833 = 1.0/pow(t3832,1.0/3.0);
                double t3834 = Dd*t3833;
                double t3835 = t3834+1.0;
                double t3836 = 1.0/t3835;
                v_gamma_ab_[index] = A*B*1.0/pow(t3832,1.1E1/3.0)*t3836*exp(-C*t3833)*((t3832*t3832)*(4.0/3.0)+rho_a[index]* \
                   rho_b[index]*(C*t3833*(7.0/9.0)+Dd*t3833*t3836*(7.0/9.0)-4.7E1/9.0));
            } else if (rho_a[index] > cutoff_) {
                v_gamma_ab_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_ab_[index] = 0.0;
            } else {
                v_gamma_ab_[index] = 0.0;
            }

            //V_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t3838 = rho_a[index]+rho_b[index];
                double t3839 = 1.0/pow(t3838,1.0/3.0);
                double t3840 = Dd*t3839;
                double t3841 = t3840+1.0;
                double t3842 = 1.0/t3841;
                v_gamma_bb_[index] = A*B*t3842*1.0/pow(t3838,1.1E1/3.0)*exp(-C*t3839)*(rho_a[index]*rho_a[index]+ \
                   rho_a[index]*rho_b[index]*(C*t3839*(1.0/3.0)+Dd*t3842*t3839*(1.0/3.0)+(rho_b[index]*(C*t3839*(1.0/ \
                   9.0)+Dd*t3842*t3839*(1.0/9.0)-1.1E1/9.0))/t3838-1.0/9.0));
            } else if (rho_a[index] > cutoff_) {
                v_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_bb_[index] = 0.0;
            } else {
                v_gamma_bb_[index] = 0.0;
            }
        }
        if (is_meta_) {

            //V_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_tau_a_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_tau_a_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_tau_a_[index] = 0.0;
            } else {
                v_tau_a_[index] = 0.0;
            }

            //V_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_tau_b_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_tau_b_[index] = 0.0;
            } else {
                v_tau_b_[index] = 0.0;
            }
        }
    }
    //Second Partials
    for (int index = 0; index < ntrue && deriv_ >= 2; index++) {

        //V_rho_a_rho_a
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t3846 = rho_a[index]+rho_b[index];
            double t3847 = 1.0/pow(t3846,1.0/3.0);
            double t3848 = Dd*t3847;
            double t3849 = t3848+1.0;
            double t3850 = 1.0/t3849;
            double t3851 = t3846*t3846;
            double t3852 = t3851*(2.0/3.0);
            double t3853 = gamma_ab[index]*2.0;
            double t3854 = gamma_aa[index]+gamma_bb[index]+t3853;
            double t3855 = 1.0/(t3849*t3849);
            double t3882 = C*t3847;
            double t3856 = exp(-t3882);
            double t3857 = C*t3847*(7.0/1.8E1);
            double t3858 = Dd*t3850*t3847*(7.0/1.8E1);
            double t3859 = t3857+t3858-4.7E1/1.8E1;
            double t3860 = t3854*t3859;
            double t3861 = gamma_aa[index]+gamma_bb[index];
            double t3862 = C*t3847*(1.0/1.8E1);
            double t3863 = Dd*t3850*t3847*(1.0/1.8E1);
            double t3864 = t3862+t3863-5.0/2.0;
            double t3865 = pow(rho_a[index],8.0/3.0);
            double t3866 = pow(rho_b[index],8.0/3.0);
            double t3867 = t3865+t3866;
            double t3868 = 1.0/t3846;
            double t3869 = gamma_aa[index]*rho_a[index];
            double t3870 = gamma_bb[index]*rho_b[index];
            double t3871 = t3870+t3869;
            double t3872 = C*t3847*(1.0/9.0);
            double t3873 = Dd*t3850*t3847*(1.0/9.0);
            double t3874 = t3872+t3873-1.1E1/9.0;
            double t3875 = t3871*t3874*t3868;
            double t3908 = t3861*t3864;
            double t3909 = CFext*t3867;
            double t3876 = t3860+t3875-t3908-t3909;
            double t3877 = rho_b[index]*(4.0/3.0);
            double t3878 = 1.0/pow(t3846,4.0/3.0);
            double t3879 = Dd*Dd;
            double t3880 = 1.0/pow(t3846,5.0/3.0);
            double t3881 = 1.0/(t3846*t3846);
            double t3883 = 1.0/pow(t3846,1.1E1/3.0);
            double t3884 = C*t3878*(1.0/5.4E1);
            double t3885 = Dd*t3850*t3878*(1.0/5.4E1);
            double t3916 = t3880*t3855*t3879*(1.0/5.4E1);
            double t3886 = t3884+t3885-t3916;
            double t3887 = pow(rho_a[index],5.0/3.0);
            double t3888 = CFext*t3887*(8.0/3.0);
            double t3889 = C*t3878*(7.0/5.4E1);
            double t3890 = Dd*t3850*t3878*(7.0/5.4E1);
            double t3918 = t3880*t3855*t3879*(7.0/5.4E1);
            double t3891 = t3890+t3889-t3918;
            double t3892 = t3854*t3891;
            double t3893 = C*t3878*(1.0/2.7E1);
            double t3894 = Dd*t3850*t3878*(1.0/2.7E1);
            double t3903 = t3880*t3855*t3879*(1.0/2.7E1);
            double t3895 = t3893+t3894-t3903;
            double t3896 = t3871*t3868*t3895;
            double t3897 = t3871*t3881*t3874;
            double t3917 = t3861*t3886;
            double t3919 = gamma_aa[index]*t3874*t3868;
            double t3898 = t3892+t3896+t3888+t3897-t3917-t3919;
            double t3899 = 1.0/pow(t3846,7.0/3.0);
            double t3900 = 1.0/(t3846*t3846*t3846);
            double t3901 = 1.0/(t3849*t3849*t3849);
            double t3902 = 1.0/pow(t3846,8.0/3.0);
            double t3904 = rho_a[index]*2.0;
            double t3905 = rho_b[index]*2.0;
            double t3906 = t3904+t3905;
            double t3907 = t3854*t3906*(2.0/3.0);
            double t3910 = rho_b[index]*t3876;
            double t3911 = rho_a[index]*(4.0/3.0);
            double t3912 = t3877+t3911;
            double t3913 = rho_a[index]*(2.0/3.0);
            double t3914 = t3877-t3913;
            double t3915 = gamma_bb[index]*t3914;
            double t3920 = rho_a[index]*rho_b[index]*t3898;
            double t3921 = gamma_aa[index]*t3912;
            double t3922 = -t3910+t3920+t3921+t3915-t3907;
            double t3923 = 1.0/(t3846*t3846*t3846*t3846*t3846);
            double t3924 = rho_b[index]*rho_b[index];
            double t3925 = t3852-t3924;
            double t3926 = gamma_aa[index]*t3925;
            double t3927 = rho_a[index]*rho_a[index];
            double t3928 = t3852-t3927;
            double t3929 = gamma_bb[index]*t3928;
            double t3932 = t3851*t3854*(2.0/3.0);
            double t3933 = rho_a[index]*rho_b[index]*t3876;
            double t3930 = -t3932-t3933+t3926+t3929;
            double t3931 = 1.0/(t3846*t3846*t3846*t3846*t3846*t3846);
            double t3934 = 1.0/pow(t3846,1.9E1/3.0);
            v_rho_a_rho_a_[index] = A*rho_b[index]*t3850*t3881*8.0-A*Dd*rho_b[index]*t3855*t3899*(8.0/3.0)-A* \
               rho_a[index]*rho_b[index]*t3850*t3900*8.0+A*Dd*rho_a[index]*rho_b[index]*1.0/pow(t3846,1.0E1/3.0)* \
               t3855*(4.0E1/9.0)+A*B*t3850*1.0/pow(t3846,1.4E1/3.0)*t3856*t3922*(2.2E1/3.0)-A*B*t3850*1.0/pow(t3846,1.7E1/ \
               3.0)*t3856*t3930*(1.54E2/9.0)+A*B*t3850*t3856*t3883*(gamma_ab[index]*(8.0/3.0)+gamma_bb[index]*2.0- \
               rho_b[index]*t3898*2.0-rho_a[index]*rho_b[index]*(CFext*pow(rho_a[index],2.0/3.0)*(4.0E1/9.0)+t3861* \
               (C*t3899*(2.0/8.1E1)+Dd*t3850*t3899*(2.0/8.1E1)-t3855*t3879*t3902*(1.0/2.7E1)+Dd*t3879*t3900*t3901* \
               (1.0/8.1E1))-t3854*(C*t3899*(1.4E1/8.1E1)+Dd*t3850*t3899*(1.4E1/8.1E1)-t3855*t3879*t3902*(7.0/2.7E1) \
               +Dd*t3879*t3900*t3901*(7.0/8.1E1))-t3871*t3868*(C*t3899*(4.0/8.1E1)+Dd*t3850*t3899*(4.0/8.1E1)-t3855* \
               t3879*t3902*(2.0/2.7E1)+Dd*t3879*t3900*t3901*(2.0/8.1E1))+gamma_aa[index]*t3881*t3874*2.0+gamma_aa[index]* \
               t3868*t3895*2.0-t3871*t3881*t3895*2.0-t3871*t3874*t3900*2.0))-A*rho_a[index]*rho_b[index]*t3883*t3879* \
               t3901*(8.0/9.0)-A*B*t3856*t3879*t3901*t3930*t3934*(2.0/9.0)-A*B*(C*C)*t3850*t3856*t3930*t3934*(1.0/ \
               9.0)+A*B*C*t3850*t3856*t3930*t3931*(2.6E1/9.0)-A*B*C*t3850*t3856*t3922*t3923*(2.0/3.0)+A*B*Dd*t3855* \
               t3856*t3930*t3931*(2.6E1/9.0)-A*B*Dd*t3855*t3856*t3922*t3923*(2.0/3.0)-A*B*C*Dd*t3855*t3856*t3930* \
               t3934*(2.0/9.0);
        } else if (rho_a[index] > cutoff_) {
            v_rho_a_rho_a_[index] = 0.0;
        } else if (rho_b[index] > cutoff_) {
            v_rho_a_rho_a_[index] = 0.0;
        } else {
            v_rho_a_rho_a_[index] = 0.0;
        }

        //V_rho_a_rho_b
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t3936 = rho_a[index]+rho_b[index];
            double t3937 = 1.0/pow(t3936,1.0/3.0);
            double t3938 = Dd*t3937;
            double t3939 = t3938+1.0;
            double t3940 = 1.0/t3939;
            double t3941 = 1.0/(t3936*t3936);
            double t3942 = 1.0/pow(t3936,7.0/3.0);
            double t3943 = 1.0/(t3939*t3939);
            double t3944 = t3936*t3936;
            double t3945 = t3944*(2.0/3.0);
            double t3946 = gamma_ab[index]*2.0;
            double t3947 = gamma_aa[index]+gamma_bb[index]+t3946;
            double t3948 = 1.0/t3936;
            double t3987 = C*t3937;
            double t3949 = exp(-t3987);
            double t3950 = C*t3937*(7.0/1.8E1);
            double t3951 = Dd*t3940*t3937*(7.0/1.8E1);
            double t3952 = t3950+t3951-4.7E1/1.8E1;
            double t3953 = t3952*t3947;
            double t3954 = gamma_aa[index]+gamma_bb[index];
            double t3955 = 1.0/pow(t3936,4.0/3.0);
            double t3956 = Dd*Dd;
            double t3957 = 1.0/pow(t3936,5.0/3.0);
            double t3958 = C*t3937*(1.0/9.0);
            double t3959 = Dd*t3940*t3937*(1.0/9.0);
            double t3960 = t3958+t3959-1.1E1/9.0;
            double t3961 = gamma_aa[index]*rho_a[index];
            double t3962 = gamma_bb[index]*rho_b[index];
            double t3963 = t3961+t3962;
            double t3964 = C*t3955*(1.0/5.4E1);
            double t3965 = Dd*t3940*t3955*(1.0/5.4E1);
            double t3991 = t3943*t3956*t3957*(1.0/5.4E1);
            double t3966 = t3964-t3991+t3965;
            double t3967 = C*t3955*(7.0/5.4E1);
            double t3968 = Dd*t3940*t3955*(7.0/5.4E1);
            double t3994 = t3943*t3956*t3957*(7.0/5.4E1);
            double t3969 = t3967-t3994+t3968;
            double t3970 = t3947*t3969;
            double t3971 = C*t3955*(1.0/2.7E1);
            double t3972 = Dd*t3940*t3955*(1.0/2.7E1);
            double t3985 = t3943*t3956*t3957*(1.0/2.7E1);
            double t3973 = t3971+t3972-t3985;
            double t3974 = t3963*t3973*t3948;
            double t3975 = t3941*t3960*t3963;
            double t3976 = C*t3937*(1.0/1.8E1);
            double t3977 = Dd*t3940*t3937*(1.0/1.8E1);
            double t3978 = t3976+t3977-5.0/2.0;
            double t3979 = pow(rho_a[index],8.0/3.0);
            double t3980 = pow(rho_b[index],8.0/3.0);
            double t3981 = t3980+t3979;
            double t3982 = 1.0/(t3936*t3936*t3936);
            double t3983 = 1.0/(t3939*t3939*t3939);
            double t3984 = 1.0/pow(t3936,8.0/3.0);
            double t3986 = t3960*t3963*t3948;
            double t3988 = t3954*t3978;
            double t3989 = CFext*t3981;
            double t3990 = rho_b[index]*(4.0/3.0);
            double t3992 = pow(rho_a[index],5.0/3.0);
            double t3993 = CFext*t3992*(8.0/3.0);
            double t4004 = t3954*t3966;
            double t4012 = gamma_aa[index]*t3960*t3948;
            double t3995 = t3970+t3974+t3975+t3993-t4012-t4004;
            double t3996 = 1.0/pow(t3936,1.4E1/3.0);
            double t3997 = rho_a[index]*2.0;
            double t3998 = rho_b[index]*2.0;
            double t3999 = t3997+t3998;
            double t4000 = t3947*t3999*(2.0/3.0);
            double t4001 = t3953+t3986-t3988-t3989;
            double t4002 = rho_a[index]*(4.0/3.0);
            double t4003 = t3990+t4002;
            double t4005 = pow(rho_b[index],5.0/3.0);
            double t4006 = CFext*t4005*(8.0/3.0);
            double t4007 = 1.0/pow(t3936,1.1E1/3.0);
            double t4008 = rho_b[index]*t4001;
            double t4009 = rho_a[index]*(2.0/3.0);
            double t4010 = t3990-t4009;
            double t4011 = gamma_bb[index]*t4010;
            double t4013 = rho_a[index]*rho_b[index]*t3995;
            double t4014 = gamma_aa[index]*t4003;
            double t4015 = -t4000+t4011+t4013+t4014-t4008;
            double t4016 = 1.0/(t3936*t3936*t3936*t3936*t3936);
            double t4017 = rho_a[index]*t4001;
            double t4018 = rho_b[index]*(2.0/3.0);
            double t4019 = t4002-t4018;
            double t4020 = gamma_aa[index]*t4019;
            double t4021 = gamma_bb[index]*t4003;
            double t4025 = gamma_bb[index]*t3960*t3948;
            double t4022 = t3970+t3974+t3975-t4004+t4006-t4025;
            double t4023 = rho_a[index]*rho_b[index]*t4022;
            double t4024 = -t4000+t4020+t4021+t4023-t4017;
            double t4026 = rho_b[index]*rho_b[index];
            double t4027 = t3945-t4026;
            double t4028 = gamma_aa[index]*t4027;
            double t4029 = rho_a[index]*rho_a[index];
            double t4030 = t3945-t4029;
            double t4031 = gamma_bb[index]*t4030;
            double t4032 = 1.0/(t3936*t3936*t3936*t3936*t3936*t3936);
            double t4034 = t3944*t3947*(2.0/3.0);
            double t4035 = rho_a[index]*rho_b[index]*t4001;
            double t4033 = t4031-t4034-t4035+t4028;
            double t4036 = 1.0/pow(t3936,1.9E1/3.0);
            v_rho_a_rho_b_[index] = A*t3940*t3948*-4.0+A*rho_a[index]*t3940*t3941*4.0+A*rho_b[index]*t3940*t3941* \
               4.0-A*Dd*rho_a[index]*t3942*t3943*(4.0/3.0)-A*Dd*rho_b[index]*t3942*t3943*(4.0/3.0)-A*rho_a[index]* \
               rho_b[index]*t3940*t3982*8.0+A*Dd*rho_a[index]*rho_b[index]*t3943*1.0/pow(t3936,1.0E1/3.0)*(4.0E1/ \
               9.0)-A*B*t3940*1.0/pow(t3936,1.7E1/3.0)*t3949*(t4031+t4028-t3944*t3947*(2.0/3.0)-rho_a[index]*rho_b[index]* \
               (t3953+t3986-CFext*t3981-t3954*t3978))*(1.54E2/9.0)-A*B*t3940*t3949*t4007*(gamma_ab[index]*(-8.0/3.0) \
               -t3953-t3986+t3988+t3989+rho_a[index]*t3995+rho_b[index]*(t3970+t3974+t3975+t4006-t3954*t3966-gamma_bb[index]* \
               t3960*t3948)+rho_a[index]*rho_b[index]*(t3954*(C*t3942*(2.0/8.1E1)+Dd*t3940*t3942*(2.0/8.1E1)-t3943* \
               t3956*t3984*(1.0/2.7E1)+Dd*t3982*t3956*t3983*(1.0/8.1E1))-t3947*(C*t3942*(1.4E1/8.1E1)+Dd*t3940*t3942* \
               (1.4E1/8.1E1)-t3943*t3956*t3984*(7.0/2.7E1)+Dd*t3982*t3956*t3983*(7.0/8.1E1))-t3963*t3948*(C*t3942* \
               (4.0/8.1E1)+Dd*t3940*t3942*(4.0/8.1E1)-t3943*t3956*t3984*(2.0/2.7E1)+Dd*t3982*t3956*t3983*(2.0/8.1E1) \
               )+gamma_aa[index]*t3941*t3960+gamma_bb[index]*t3941*t3960+gamma_aa[index]*t3973*t3948+gamma_bb[index]* \
               t3973*t3948-t3941*t3963*t3973*2.0-t3960*t3963*t3982*2.0))+A*B*t3940*t3949*t3996*t4015*(1.1E1/3.0)+ \
               A*B*t3940*t3949*t3996*t4024*(1.1E1/3.0)-A*rho_a[index]*rho_b[index]*t3956*t3983*t4007*(8.0/9.0)-A* \
               B*t3956*t3983*t3949*t4033*t4036*(2.0/9.0)-A*B*(C*C)*t3940*t3949*t4033*t4036*(1.0/9.0)+A*B*C*t3940* \
               t3949*t4032*t4033*(2.6E1/9.0)-A*B*C*t3940*t3949*t4015*t4016*(1.0/3.0)-A*B*C*t3940*t3949*t4024*t4016* \
               (1.0/3.0)+A*B*Dd*t3943*t3949*t4032*t4033*(2.6E1/9.0)-A*B*Dd*t3943*t3949*t4015*t4016*(1.0/3.0)-A*B* \
               Dd*t3943*t3949*t4024*t4016*(1.0/3.0)-A*B*C*Dd*t3943*t3949*t4033*t4036*(2.0/9.0);
        } else if (rho_a[index] > cutoff_) {
            v_rho_a_rho_b_[index] = 0.0;
        } else if (rho_b[index] > cutoff_) {
            v_rho_a_rho_b_[index] = 0.0;
        } else {
            v_rho_a_rho_b_[index] = 0.0;
        }

        //V_rho_b_rho_b
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t4038 = rho_a[index]+rho_b[index];
            double t4039 = 1.0/pow(t4038,1.0/3.0);
            double t4040 = Dd*t4039;
            double t4041 = t4040+1.0;
            double t4042 = 1.0/t4041;
            double t4043 = t4038*t4038;
            double t4044 = t4043*(2.0/3.0);
            double t4045 = gamma_ab[index]*2.0;
            double t4046 = gamma_aa[index]+gamma_bb[index]+t4045;
            double t4047 = 1.0/(t4041*t4041);
            double t4074 = C*t4039;
            double t4048 = exp(-t4074);
            double t4049 = C*t4039*(7.0/1.8E1);
            double t4050 = Dd*t4042*t4039*(7.0/1.8E1);
            double t4051 = t4050+t4049-4.7E1/1.8E1;
            double t4052 = t4051*t4046;
            double t4053 = gamma_aa[index]+gamma_bb[index];
            double t4054 = C*t4039*(1.0/1.8E1);
            double t4055 = Dd*t4042*t4039*(1.0/1.8E1);
            double t4056 = t4054+t4055-5.0/2.0;
            double t4057 = pow(rho_a[index],8.0/3.0);
            double t4058 = pow(rho_b[index],8.0/3.0);
            double t4059 = t4057+t4058;
            double t4060 = 1.0/t4038;
            double t4061 = gamma_aa[index]*rho_a[index];
            double t4062 = gamma_bb[index]*rho_b[index];
            double t4063 = t4061+t4062;
            double t4064 = C*t4039*(1.0/9.0);
            double t4065 = Dd*t4042*t4039*(1.0/9.0);
            double t4066 = t4064+t4065-1.1E1/9.0;
            double t4067 = t4060*t4063*t4066;
            double t4100 = t4053*t4056;
            double t4101 = CFext*t4059;
            double t4068 = t4052+t4067-t4100-t4101;
            double t4069 = rho_a[index]*(4.0/3.0);
            double t4070 = 1.0/pow(t4038,4.0/3.0);
            double t4071 = Dd*Dd;
            double t4072 = 1.0/pow(t4038,5.0/3.0);
            double t4073 = 1.0/(t4038*t4038);
            double t4075 = 1.0/pow(t4038,1.1E1/3.0);
            double t4076 = C*t4070*(1.0/5.4E1);
            double t4077 = Dd*t4042*t4070*(1.0/5.4E1);
            double t4109 = t4071*t4072*t4047*(1.0/5.4E1);
            double t4078 = t4076+t4077-t4109;
            double t4079 = pow(rho_b[index],5.0/3.0);
            double t4080 = CFext*t4079*(8.0/3.0);
            double t4081 = C*t4070*(7.0/5.4E1);
            double t4082 = Dd*t4042*t4070*(7.0/5.4E1);
            double t4111 = t4071*t4072*t4047*(7.0/5.4E1);
            double t4083 = t4081+t4082-t4111;
            double t4084 = t4046*t4083;
            double t4085 = C*t4070*(1.0/2.7E1);
            double t4086 = Dd*t4042*t4070*(1.0/2.7E1);
            double t4095 = t4071*t4072*t4047*(1.0/2.7E1);
            double t4087 = t4085+t4086-t4095;
            double t4088 = t4060*t4063*t4087;
            double t4089 = t4063*t4073*t4066;
            double t4110 = t4053*t4078;
            double t4112 = gamma_bb[index]*t4060*t4066;
            double t4090 = t4080+t4084+t4088+t4089-t4110-t4112;
            double t4091 = 1.0/pow(t4038,7.0/3.0);
            double t4092 = 1.0/(t4038*t4038*t4038);
            double t4093 = 1.0/(t4041*t4041*t4041);
            double t4094 = 1.0/pow(t4038,8.0/3.0);
            double t4096 = rho_a[index]*2.0;
            double t4097 = rho_b[index]*2.0;
            double t4098 = t4096+t4097;
            double t4099 = t4046*t4098*(2.0/3.0);
            double t4102 = rho_a[index]*t4068;
            double t4103 = rho_b[index]*(2.0/3.0);
            double t4104 = t4069-t4103;
            double t4105 = gamma_aa[index]*t4104;
            double t4106 = rho_b[index]*(4.0/3.0);
            double t4107 = t4069+t4106;
            double t4108 = gamma_bb[index]*t4107;
            double t4113 = rho_a[index]*rho_b[index]*t4090;
            double t4114 = -t4099-t4102+t4113+t4105+t4108;
            double t4115 = 1.0/(t4038*t4038*t4038*t4038*t4038);
            double t4116 = rho_b[index]*rho_b[index];
            double t4117 = t4044-t4116;
            double t4118 = gamma_aa[index]*t4117;
            double t4119 = rho_a[index]*rho_a[index];
            double t4120 = t4044-t4119;
            double t4121 = gamma_bb[index]*t4120;
            double t4124 = t4043*t4046*(2.0/3.0);
            double t4125 = rho_a[index]*rho_b[index]*t4068;
            double t4122 = t4121-t4124-t4125+t4118;
            double t4123 = 1.0/(t4038*t4038*t4038*t4038*t4038*t4038);
            double t4126 = 1.0/pow(t4038,1.9E1/3.0);
            v_rho_b_rho_b_[index] = A*rho_a[index]*t4042*t4073*8.0-A*Dd*rho_a[index]*t4091*t4047*(8.0/3.0)-A* \
               rho_a[index]*rho_b[index]*t4042*t4092*8.0+A*Dd*rho_a[index]*rho_b[index]*1.0/pow(t4038,1.0E1/3.0)* \
               t4047*(4.0E1/9.0)+A*B*t4042*1.0/pow(t4038,1.4E1/3.0)*t4048*t4114*(2.2E1/3.0)-A*B*t4042*1.0/pow(t4038,1.7E1/ \
               3.0)*t4048*t4122*(1.54E2/9.0)+A*B*t4042*t4048*t4075*(gamma_aa[index]*2.0+gamma_ab[index]*(8.0/3.0) \
               -rho_a[index]*t4090*2.0-rho_a[index]*rho_b[index]*(CFext*pow(rho_b[index],2.0/3.0)*(4.0E1/9.0)+t4053* \
               (C*t4091*(2.0/8.1E1)+Dd*t4042*t4091*(2.0/8.1E1)-t4071*t4047*t4094*(1.0/2.7E1)+Dd*t4071*t4092*t4093* \
               (1.0/8.1E1))-t4046*(C*t4091*(1.4E1/8.1E1)+Dd*t4042*t4091*(1.4E1/8.1E1)-t4071*t4047*t4094*(7.0/2.7E1) \
               +Dd*t4071*t4092*t4093*(7.0/8.1E1))-t4060*t4063*(C*t4091*(4.0/8.1E1)+Dd*t4042*t4091*(4.0/8.1E1)-t4071* \
               t4047*t4094*(2.0/2.7E1)+Dd*t4071*t4092*t4093*(2.0/8.1E1))+gamma_bb[index]*t4060*t4087*2.0+gamma_bb[index]* \
               t4073*t4066*2.0-t4063*t4092*t4066*2.0-t4063*t4073*t4087*2.0))-A*rho_a[index]*rho_b[index]*t4071*t4075* \
               t4093*(8.0/9.0)-A*B*t4071*t4048*t4093*t4122*t4126*(2.0/9.0)-A*B*(C*C)*t4042*t4048*t4122*t4126*(1.0/ \
               9.0)+A*B*C*t4042*t4048*t4122*t4123*(2.6E1/9.0)-A*B*C*t4042*t4048*t4114*t4115*(2.0/3.0)+A*B*Dd*t4047* \
               t4048*t4122*t4123*(2.6E1/9.0)-A*B*Dd*t4047*t4048*t4114*t4115*(2.0/3.0)-A*B*C*Dd*t4047*t4048*t4122* \
               t4126*(2.0/9.0);
        } else if (rho_a[index] > cutoff_) {
            v_rho_b_rho_b_[index] = 0.0;
        } else if (rho_b[index] > cutoff_) {
            v_rho_b_rho_b_[index] = 0.0;
        } else {
            v_rho_b_rho_b_[index] = 0.0;
        }

        if (is_gga_) {

            //V_rho_a_gamma_aa
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t4128 = rho_a[index]+rho_b[index];
                double t4129 = 1.0/pow(t4128,1.0/3.0);
                double t4130 = Dd*t4129;
                double t4131 = t4130+1.0;
                double t4132 = 1.0/t4131;
                double t4146 = C*t4129;
                double t4133 = exp(-t4146);
                double t4134 = C*t4129*(1.0/3.0);
                double t4135 = Dd*t4132*t4129*(1.0/3.0);
                double t4136 = 1.0/t4128;
                double t4137 = C*t4129*(1.0/9.0);
                double t4138 = Dd*t4132*t4129*(1.0/9.0);
                double t4139 = t4137+t4138-1.1E1/9.0;
                double t4140 = rho_a[index]*t4136*t4139;
                double t4141 = t4140+t4134+t4135-1.0/9.0;
                double t4142 = 1.0/pow(t4128,4.0/3.0);
                double t4143 = Dd*Dd;
                double t4144 = 1.0/pow(t4128,5.0/3.0);
                double t4145 = 1.0/(t4131*t4131);
                double t4147 = rho_b[index]*rho_b[index];
                double t4148 = rho_a[index]*rho_b[index]*t4141;
                double t4149 = t4147+t4148;
                double t4150 = 1.0/(t4128*t4128*t4128*t4128*t4128);
                v_rho_a_gamma_aa_[index] = A*B*t4132*t4133*1.0/pow(t4128,1.4E1/3.0)*t4149*(-1.1E1/3.0)+A*B*t4132* \
                   t4133*1.0/pow(t4128,1.1E1/3.0)*(rho_b[index]*t4141-rho_a[index]*rho_b[index]*(C*t4142*(1.0/9.0)-t4136* \
                   t4139+rho_a[index]*t4136*(C*t4142*(1.0/2.7E1)+Dd*t4132*t4142*(1.0/2.7E1)-t4143*t4144*t4145*(1.0/2.7E1) \
                   )+rho_a[index]*1.0/(t4128*t4128)*t4139+Dd*t4132*t4142*(1.0/9.0)-t4143*t4144*t4145*(1.0/9.0)))+A*B* \
                   C*t4132*t4150*t4133*t4149*(1.0/3.0)+A*B*Dd*t4150*t4133*t4145*t4149*(1.0/3.0);
            } else if (rho_a[index] > cutoff_) {
                v_rho_a_gamma_aa_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_a_gamma_aa_[index] = 0.0;
            } else {
                v_rho_a_gamma_aa_[index] = 0.0;
            }

            //V_rho_a_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t4152 = rho_a[index]+rho_b[index];
                double t4153 = 1.0/pow(t4152,1.0/3.0);
                double t4154 = Dd*t4153;
                double t4155 = t4154+1.0;
                double t4156 = 1.0/t4155;
                double t4162 = C*t4153;
                double t4157 = exp(-t4162);
                double t4158 = C*t4153*(7.0/9.0);
                double t4159 = Dd*t4153*t4156*(7.0/9.0);
                double t4160 = t4158+t4159-4.7E1/9.0;
                double t4161 = 1.0/pow(t4152,4.0/3.0);
                double t4163 = t4152*t4152;
                double t4164 = t4163*(4.0/3.0);
                double t4165 = rho_a[index]*rho_b[index]*t4160;
                double t4166 = t4164+t4165;
                double t4167 = 1.0/(t4152*t4152*t4152*t4152*t4152);
                double t4168 = 1.0/(t4155*t4155);
                v_rho_a_gamma_ab_[index] = A*B*1.0/pow(t4152,1.4E1/3.0)*t4156*t4157*t4166*(-1.1E1/3.0)+A*B*1.0/pow(t4152,1.1E1/ \
                   3.0)*t4156*t4157*(rho_a[index]*(8.0/3.0)+rho_b[index]*(8.0/3.0)+rho_b[index]*t4160-rho_a[index]*rho_b[index]* \
                   (C*t4161*(7.0/2.7E1)-(Dd*Dd)*1.0/pow(t4152,5.0/3.0)*t4168*(7.0/2.7E1)+Dd*t4161*t4156*(7.0/2.7E1))) \
                   +A*B*C*t4156*t4157*t4166*t4167*(1.0/3.0)+A*B*Dd*t4157*t4166*t4167*t4168*(1.0/3.0);
            } else if (rho_a[index] > cutoff_) {
                v_rho_a_gamma_ab_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_a_gamma_ab_[index] = 0.0;
            } else {
                v_rho_a_gamma_ab_[index] = 0.0;
            }

            //V_rho_a_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t4170 = rho_a[index]+rho_b[index];
                double t4171 = 1.0/pow(t4170,1.0/3.0);
                double t4172 = Dd*t4171;
                double t4173 = t4172+1.0;
                double t4174 = 1.0/t4173;
                double t4188 = C*t4171;
                double t4175 = exp(-t4188);
                double t4176 = C*t4171*(1.0/3.0);
                double t4177 = Dd*t4171*t4174*(1.0/3.0);
                double t4178 = 1.0/t4170;
                double t4179 = C*t4171*(1.0/9.0);
                double t4180 = Dd*t4171*t4174*(1.0/9.0);
                double t4181 = t4180+t4179-1.1E1/9.0;
                double t4182 = rho_b[index]*t4181*t4178;
                double t4183 = t4182+t4176+t4177-1.0/9.0;
                double t4184 = 1.0/pow(t4170,4.0/3.0);
                double t4185 = Dd*Dd;
                double t4186 = 1.0/pow(t4170,5.0/3.0);
                double t4187 = 1.0/(t4173*t4173);
                double t4189 = rho_a[index]*rho_a[index];
                double t4190 = rho_a[index]*rho_b[index]*t4183;
                double t4191 = t4190+t4189;
                double t4192 = 1.0/(t4170*t4170*t4170*t4170*t4170);
                v_rho_a_gamma_bb_[index] = A*B*1.0/pow(t4170,1.4E1/3.0)*t4191*t4174*t4175*(-1.1E1/3.0)+A*B*1.0/pow(t4170,1.1E1/ \
                   3.0)*t4174*t4175*(rho_a[index]*2.0+rho_b[index]*t4183-rho_a[index]*rho_b[index]*(C*t4184*(1.0/9.0) \
                   +rho_b[index]*t4178*(C*t4184*(1.0/2.7E1)+Dd*t4174*t4184*(1.0/2.7E1)-t4185*t4186*t4187*(1.0/2.7E1)) \
                   +rho_b[index]*1.0/(t4170*t4170)*t4181+Dd*t4174*t4184*(1.0/9.0)-t4185*t4186*t4187*(1.0/9.0)))+A*B*C* \
                   t4191*t4174*t4192*t4175*(1.0/3.0)+A*B*Dd*t4191*t4192*t4175*t4187*(1.0/3.0);
            } else if (rho_a[index] > cutoff_) {
                v_rho_a_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_a_gamma_bb_[index] = 0.0;
            } else {
                v_rho_a_gamma_bb_[index] = 0.0;
            }

            //V_rho_b_gamma_aa
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t4194 = rho_a[index]+rho_b[index];
                double t4195 = 1.0/pow(t4194,1.0/3.0);
                double t4196 = Dd*t4195;
                double t4197 = t4196+1.0;
                double t4198 = 1.0/t4197;
                double t4212 = C*t4195;
                double t4199 = exp(-t4212);
                double t4200 = C*t4195*(1.0/3.0);
                double t4201 = Dd*t4195*t4198*(1.0/3.0);
                double t4202 = 1.0/t4194;
                double t4203 = C*t4195*(1.0/9.0);
                double t4204 = Dd*t4195*t4198*(1.0/9.0);
                double t4205 = t4203+t4204-1.1E1/9.0;
                double t4206 = rho_a[index]*t4202*t4205;
                double t4207 = t4200+t4201+t4206-1.0/9.0;
                double t4208 = 1.0/pow(t4194,4.0/3.0);
                double t4209 = Dd*Dd;
                double t4210 = 1.0/pow(t4194,5.0/3.0);
                double t4211 = 1.0/(t4197*t4197);
                double t4213 = rho_b[index]*rho_b[index];
                double t4214 = rho_a[index]*rho_b[index]*t4207;
                double t4215 = t4213+t4214;
                double t4216 = 1.0/(t4194*t4194*t4194*t4194*t4194);
                v_rho_b_gamma_aa_[index] = A*B*1.0/pow(t4194,1.4E1/3.0)*t4198*t4199*t4215*(-1.1E1/3.0)+A*B*1.0/pow(t4194,1.1E1/ \
                   3.0)*t4198*t4199*(rho_b[index]*2.0+rho_a[index]*t4207-rho_a[index]*rho_b[index]*(C*t4208*(1.0/9.0) \
                   +rho_a[index]*t4202*(C*t4208*(1.0/2.7E1)+Dd*t4198*t4208*(1.0/2.7E1)-t4210*t4211*t4209*(1.0/2.7E1)) \
                   +rho_a[index]*1.0/(t4194*t4194)*t4205+Dd*t4198*t4208*(1.0/9.0)-t4210*t4211*t4209*(1.0/9.0)))+A*B*C* \
                   t4198*t4199*t4215*t4216*(1.0/3.0)+A*B*Dd*t4199*t4211*t4215*t4216*(1.0/3.0);
            } else if (rho_a[index] > cutoff_) {
                v_rho_b_gamma_aa_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_b_gamma_aa_[index] = 0.0;
            } else {
                v_rho_b_gamma_aa_[index] = 0.0;
            }

            //V_rho_b_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t4218 = rho_a[index]+rho_b[index];
                double t4219 = 1.0/pow(t4218,1.0/3.0);
                double t4220 = Dd*t4219;
                double t4221 = t4220+1.0;
                double t4222 = 1.0/t4221;
                double t4228 = C*t4219;
                double t4223 = exp(-t4228);
                double t4224 = C*t4219*(7.0/9.0);
                double t4225 = Dd*t4222*t4219*(7.0/9.0);
                double t4226 = t4224+t4225-4.7E1/9.0;
                double t4227 = 1.0/pow(t4218,4.0/3.0);
                double t4229 = t4218*t4218;
                double t4230 = t4229*(4.0/3.0);
                double t4231 = rho_a[index]*rho_b[index]*t4226;
                double t4232 = t4230+t4231;
                double t4233 = 1.0/(t4218*t4218*t4218*t4218*t4218);
                double t4234 = 1.0/(t4221*t4221);
                v_rho_b_gamma_ab_[index] = A*B*t4222*t4223*t4232*1.0/pow(t4218,1.4E1/3.0)*(-1.1E1/3.0)+A*B*t4222* \
                   t4223*1.0/pow(t4218,1.1E1/3.0)*(rho_a[index]*(8.0/3.0)+rho_b[index]*(8.0/3.0)+rho_a[index]*t4226-rho_a[index]* \
                   rho_b[index]*(C*t4227*(7.0/2.7E1)-(Dd*Dd)*t4234*1.0/pow(t4218,5.0/3.0)*(7.0/2.7E1)+Dd*t4222*t4227* \
                   (7.0/2.7E1)))+A*B*C*t4222*t4223*t4232*t4233*(1.0/3.0)+A*B*Dd*t4223*t4232*t4233*t4234*(1.0/3.0);
            } else if (rho_a[index] > cutoff_) {
                v_rho_b_gamma_ab_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_b_gamma_ab_[index] = 0.0;
            } else {
                v_rho_b_gamma_ab_[index] = 0.0;
            }

            //V_rho_b_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t4236 = rho_a[index]+rho_b[index];
                double t4237 = 1.0/pow(t4236,1.0/3.0);
                double t4238 = Dd*t4237;
                double t4239 = t4238+1.0;
                double t4240 = 1.0/t4239;
                double t4254 = C*t4237;
                double t4241 = exp(-t4254);
                double t4242 = C*t4237*(1.0/3.0);
                double t4243 = Dd*t4240*t4237*(1.0/3.0);
                double t4244 = 1.0/t4236;
                double t4245 = C*t4237*(1.0/9.0);
                double t4246 = Dd*t4240*t4237*(1.0/9.0);
                double t4247 = t4245+t4246-1.1E1/9.0;
                double t4248 = rho_b[index]*t4244*t4247;
                double t4249 = t4242+t4243+t4248-1.0/9.0;
                double t4250 = 1.0/pow(t4236,4.0/3.0);
                double t4251 = Dd*Dd;
                double t4252 = 1.0/pow(t4236,5.0/3.0);
                double t4253 = 1.0/(t4239*t4239);
                double t4255 = rho_a[index]*rho_a[index];
                double t4256 = rho_a[index]*rho_b[index]*t4249;
                double t4257 = t4255+t4256;
                double t4258 = 1.0/(t4236*t4236*t4236*t4236*t4236);
                v_rho_b_gamma_bb_[index] = A*B*t4240*t4241*1.0/pow(t4236,1.4E1/3.0)*t4257*(-1.1E1/3.0)+A*B*t4240* \
                   t4241*1.0/pow(t4236,1.1E1/3.0)*(rho_a[index]*t4249-rho_a[index]*rho_b[index]*(C*t4250*(1.0/9.0)-t4244* \
                   t4247+rho_b[index]*t4244*(C*t4250*(1.0/2.7E1)+Dd*t4240*t4250*(1.0/2.7E1)-t4251*t4252*t4253*(1.0/2.7E1) \
                   )+rho_b[index]*1.0/(t4236*t4236)*t4247+Dd*t4240*t4250*(1.0/9.0)-t4251*t4252*t4253*(1.0/9.0)))+A*B* \
                   C*t4240*t4241*t4257*t4258*(1.0/3.0)+A*B*Dd*t4241*t4253*t4257*t4258*(1.0/3.0);
            } else if (rho_a[index] > cutoff_) {
                v_rho_b_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_b_gamma_bb_[index] = 0.0;
            } else {
                v_rho_b_gamma_bb_[index] = 0.0;
            }

            //V_gamma_aa_gamma_aa
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_aa_gamma_aa_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_aa_gamma_aa_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_aa_gamma_aa_[index] = 0.0;
            } else {
                v_gamma_aa_gamma_aa_[index] = 0.0;
            }

            //V_gamma_aa_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_aa_gamma_ab_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_aa_gamma_ab_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_aa_gamma_ab_[index] = 0.0;
            } else {
                v_gamma_aa_gamma_ab_[index] = 0.0;
            }

            //V_gamma_aa_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_aa_gamma_bb_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_aa_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_aa_gamma_bb_[index] = 0.0;
            } else {
                v_gamma_aa_gamma_bb_[index] = 0.0;
            }

            //V_gamma_ab_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_ab_gamma_ab_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_ab_gamma_ab_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_ab_gamma_ab_[index] = 0.0;
            } else {
                v_gamma_ab_gamma_ab_[index] = 0.0;
            }

            //V_gamma_ab_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_ab_gamma_bb_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_ab_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_ab_gamma_bb_[index] = 0.0;
            } else {
                v_gamma_ab_gamma_bb_[index] = 0.0;
            }

            //V_gamma_bb_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_bb_gamma_bb_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_bb_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_bb_gamma_bb_[index] = 0.0;
            } else {
                v_gamma_bb_gamma_bb_[index] = 0.0;
            }

        }
        if (is_meta_) {

            //V_rho_a_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_a_tau_a_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_a_tau_a_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_a_tau_a_[index] = 0.0;
            } else {
                v_rho_a_tau_a_[index] = 0.0;
            }

            //V_rho_a_tau_b
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_a_tau_b_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_a_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_a_tau_b_[index] = 0.0;
            } else {
                v_rho_a_tau_b_[index] = 0.0;
            }

            //V_rho_b_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_b_tau_a_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_b_tau_a_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_b_tau_a_[index] = 0.0;
            } else {
                v_rho_b_tau_a_[index] = 0.0;
            }

            //V_rho_b_tau_b
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_b_tau_b_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_b_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_b_tau_b_[index] = 0.0;
            } else {
                v_rho_b_tau_b_[index] = 0.0;
            }

            //V_tau_a_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_tau_a_tau_a_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_tau_a_tau_a_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_tau_a_tau_a_[index] = 0.0;
            } else {
                v_tau_a_tau_a_[index] = 0.0;
            }

            //V_tau_a_tau_b
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_tau_a_tau_b_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_tau_a_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_tau_a_tau_b_[index] = 0.0;
            } else {
                v_tau_a_tau_b_[index] = 0.0;
            }

            //V_tau_b_tau_b
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_tau_b_tau_b_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_tau_b_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_tau_b_tau_b_[index] = 0.0;
            } else {
                v_tau_b_tau_b_[index] = 0.0;
            }

            if (is_gga_) {

                //V_gamma_aa_tau_a
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } else {
                    v_gamma_aa_tau_a_[index] = 0.0;
                }

                //V_gamma_aa_tau_b
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_aa_tau_b_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_aa_tau_b_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_aa_tau_b_[index] = 0.0;
                } else {
                    v_gamma_aa_tau_b_[index] = 0.0;
                }

                //V_gamma_ab_tau_a
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_ab_tau_a_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_ab_tau_a_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_ab_tau_a_[index] = 0.0;
                } else {
                    v_gamma_ab_tau_a_[index] = 0.0;
                }

                //V_gamma_ab_tau_b
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_ab_tau_b_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_ab_tau_b_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_ab_tau_b_[index] = 0.0;
                } else {
                    v_gamma_ab_tau_b_[index] = 0.0;
                }

                //V_gamma_bb_tau_a
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_bb_tau_a_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_bb_tau_a_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_bb_tau_a_[index] = 0.0;
                } else {
                    v_gamma_bb_tau_a_[index] = 0.0;
                }

                //V_gamma_bb_tau_b
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_bb_tau_b_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_bb_tau_b_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_bb_tau_b_[index] = 0.0;
                } else {
                    v_gamma_bb_tau_b_[index] = 0.0;
                }

            }
        }
    }
}

}}

