/**********************************************************
* TauHCTH_functional.cc: definitions for TauHCTH_functional for KS-DFT
* Robert Parrish, robparrish@gmail.com
* Autogenerated by MATLAB Script on 06-Mar-2012
*
***********************************************************/
#include <libmints/mints.h>
#include <libfock/points.h>
#include "TauHCTH_functional.h"
#include <stdlib.h>
#include <cmath>
#include <string>
#include <string>
#include <vector>

using namespace psi;
using namespace boost;
using namespace std;

namespace psi { namespace functional {

TauHCTH_Functional::TauHCTH_Functional(int npoints, int deriv) : Functional(npoints, deriv)
{

    name_ = "TauHCTH";
    description_ = "TauHCTH Power Series Pure Meta-GGA";
    citation_ = "A.D. Boese and N.C. Handy, J. Chem. Phys., 116(22), 9559, 2002";

    double X = 0.0000000000000000E+00;
    params_.push_back(make_pair("X",X));
    double C_k = 9.1155997446911918E+00;
    params_.push_back(make_pair("C_k",C_k));
    double c0 = -9.3052573634909974E-01;
    params_.push_back(make_pair("c0",c0));
    double two_13 = 1.2599210498948732E+00;
    params_.push_back(make_pair("two_13",two_13));
    double d2fz0 = 1.7099210000000000E+00;
    params_.push_back(make_pair("d2fz0",d2fz0));
    double c = 6.2035049089939986E-01;
    params_.push_back(make_pair("c",c));
    double Aa = 1.6886999999999999E-02;
    params_.push_back(make_pair("Aa",Aa));
    double a1a = 1.1125000000000000E-01;
    params_.push_back(make_pair("a1a",a1a));
    double b1a = 1.0356999999999999E+01;
    params_.push_back(make_pair("b1a",b1a));
    double b2a = 3.6231000000000000E+00;
    params_.push_back(make_pair("b2a",b2a));
    double b3a = 8.8026000000000004E-01;
    params_.push_back(make_pair("b3a",b3a));
    double b4a = 4.9670999999999998E-01;
    params_.push_back(make_pair("b4a",b4a));
    double c0p = 3.1091000000000001E-02;
    params_.push_back(make_pair("c0p",c0p));
    double a1p = 2.1370000000000000E-01;
    params_.push_back(make_pair("a1p",a1p));
    double b1p = 7.5956999999999999E+00;
    params_.push_back(make_pair("b1p",b1p));
    double b2p = 3.5876000000000001E+00;
    params_.push_back(make_pair("b2p",b2p));
    double b3p = 1.6382000000000001E+00;
    params_.push_back(make_pair("b3p",b3p));
    double b4p = 4.9293999999999999E-01;
    params_.push_back(make_pair("b4p",b4p));
    double c0f = 1.5545000000000000E-02;
    params_.push_back(make_pair("c0f",c0f));
    double a1f = 2.0548000000000000E-01;
    params_.push_back(make_pair("a1f",a1f));
    double b1f = 1.4118900000000000E+01;
    params_.push_back(make_pair("b1f",b1f));
    double b2f = 6.1977000000000002E+00;
    params_.push_back(make_pair("b2f",b2f));
    double b3f = 3.3662000000000001E+00;
    params_.push_back(make_pair("b3f",b3f));
    double b4f = 6.2517000000000000E-01;
    params_.push_back(make_pair("b4f",b4f));
    double gcab = 6.0000000000000001E-03;
    params_.push_back(make_pair("gcab",gcab));
    double gcaa = 2.0000000000000001E-01;
    params_.push_back(make_pair("gcaa",gcaa));
    double gx = 4.0000000000000001E-03;
    params_.push_back(make_pair("gx",gx));
    double ccab0 = 6.5261999999999998E-01;
    params_.push_back(make_pair("ccab0",ccab0));
    double ccab1 = 6.3638000000000003E+00;
    params_.push_back(make_pair("ccab1",ccab1));
    double ccab2 = -1.4080000000000000E+01;
    params_.push_back(make_pair("ccab2",ccab2));
    double ccab3 = -3.3755000000000002E+00;
    params_.push_back(make_pair("ccab3",ccab3));
    double ccaa0 = 4.1385000000000000E-01;
    params_.push_back(make_pair("ccaa0",ccaa0));
    double ccaa1 = -9.0859999999999996E-01;
    params_.push_back(make_pair("ccaa1",ccaa1));
    double ccaa2 = -5.4899999999999997E-02;
    params_.push_back(make_pair("ccaa2",ccaa2));
    double ccaa3 = 1.7480000000000000E+00;
    params_.push_back(make_pair("ccaa3",ccaa3));
    double cx0 = 1.1073400000000000E+00;
    params_.push_back(make_pair("cx0",cx0));
    double cx1 = -1.0533999999999999E+00;
    params_.push_back(make_pair("cx1",cx1));
    double cx2 = 6.3491000000000000E+00;
    params_.push_back(make_pair("cx2",cx2));
    double cx3 = -2.5531000000000001E+00;
    params_.push_back(make_pair("cx3",cx3));
    double cxnl0 = 1.1000000000000001E-03;
    params_.push_back(make_pair("cxnl0",cxnl0));
    double cxnl1 = -3.0409999999999998E-01;
    params_.push_back(make_pair("cxnl1",cxnl1));
    double cxnl2 = 6.9542999999999999E+00;
    params_.push_back(make_pair("cxnl2",cxnl2));
    double cxnl3 = -7.2350000000000003E-01;
    params_.push_back(make_pair("cxnl3",cxnl3));

    is_gga_ = true;
    is_meta_ = true;

    //Required allocateion
    allocate();
}
TauHCTH_Functional::~TauHCTH_Functional()
{
}
void TauHCTH_Functional::computeRKSFunctional(boost::shared_ptr<RKSFunctions> prop)
{
    int ntrue = prop->npoints();

    const double* restrict rho_a;
    const double* restrict gamma_aa;
    const double* restrict tau_a;

    rho_a = prop->property_value("RHO_A")->pointer();
    if (is_gga_) {
        gamma_aa = prop->property_value("GAMMA_AA")->pointer();
    }
    if (is_meta_) {
        tau_a = prop->property_value("TAU_A")->pointer();
    }

    double X = params_[0].second;
    double C_k = params_[1].second;
    double c0 = params_[2].second;
    double two_13 = params_[3].second;
    double d2fz0 = params_[4].second;
    double c = params_[5].second;
    double Aa = params_[6].second;
    double a1a = params_[7].second;
    double b1a = params_[8].second;
    double b2a = params_[9].second;
    double b3a = params_[10].second;
    double b4a = params_[11].second;
    double c0p = params_[12].second;
    double a1p = params_[13].second;
    double b1p = params_[14].second;
    double b2p = params_[15].second;
    double b3p = params_[16].second;
    double b4p = params_[17].second;
    double c0f = params_[18].second;
    double a1f = params_[19].second;
    double b1f = params_[20].second;
    double b2f = params_[21].second;
    double b3f = params_[22].second;
    double b4f = params_[23].second;
    double gcab = params_[24].second;
    double gcaa = params_[25].second;
    double gx = params_[26].second;
    double ccab0 = params_[27].second;
    double ccab1 = params_[28].second;
    double ccab2 = params_[29].second;
    double ccab3 = params_[30].second;
    double ccaa0 = params_[31].second;
    double ccaa1 = params_[32].second;
    double ccaa2 = params_[33].second;
    double ccaa3 = params_[34].second;
    double cx0 = params_[35].second;
    double cx1 = params_[36].second;
    double cx2 = params_[37].second;
    double cx3 = params_[38].second;
    double cxnl0 = params_[39].second;
    double cxnl1 = params_[40].second;
    double cxnl2 = params_[41].second;
    double cxnl3 = params_[42].second;

    //Functional
    for (int index = 0; index < ntrue; index++) {

        //Functional Value
        if (rho_a[index] > cutoff_) {
            double t91199 = 1.0/pow(rho_a[index],1.0/3.0);
            double t91200 = c*t91199;
            double t91201 = sqrt(t91200);
            double t91202 = pow(t91200,3.0/2.0);
            double t91203 = c*c;
            double t91204 = 1.0/pow(rho_a[index],2.0/3.0);
            double t91205 = 1.0/c0p;
            double t91206 = b1p*t91201;
            double t91207 = b3p*t91202;
            double t91208 = b4p*t91203*t91204;
            double t91209 = b2p*c*t91199;
            double t91210 = t91206+t91207+t91208+t91209;
            double t91211 = 1.0/t91210;
            double t91212 = t91211*t91205*(1.0/2.0);
            double t91213 = t91212+1.0;
            double t91214 = log(t91213);
            double t91215 = a1p*c*t91199;
            double t91216 = t91215+1.0;
            double t91217 = rho_a[index]*2.0;
            double t91218 = 1.0/pow(t91217,1.0/3.0);
            double t91219 = c*t91218;
            double t91220 = 1.0/pow(rho_a[index],8.0/3.0);
            double t91221 = gamma_aa[index]*gamma_aa[index];
            double t91222 = gcab*gcab;
            double t91223 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]);
            double t91224 = 1.0/pow(rho_a[index],1.6E1/3.0);
            double t91225 = pow(2.0,1.0/3.0);
            double t91226 = t91225*2.0;
            double t91227 = t91226-2.0;
            double t91228 = two_13*2.0;
            double t91229 = t91228-2.0;
            double t91230 = 1.0/t91229;
            double t91231 = 1.0/c0f;
            double t91232 = b1f*t91201;
            double t91233 = b3f*t91202;
            double t91234 = b4f*t91203*t91204;
            double t91235 = b2f*c*t91199;
            double t91236 = t91232+t91233+t91234+t91235;
            double t91237 = 1.0/t91236;
            double t91238 = t91231*t91237*(1.0/2.0);
            double t91239 = t91238+1.0;
            double t91240 = log(t91239);
            double t91241 = a1f*c*t91199;
            double t91242 = t91241+1.0;
            double t91243 = c0f*t91240*t91242*2.0;
            double t91244 = c0p*t91214*t91216*2.0;
            double t91245 = gcaa*gcaa;
            double t91246 = pow(rho_a[index],5.0/3.0);
            double t91247 = C_k*t91246;
            double t91248 = tau_a[index]*1.0E20;
            double t91249 = 1.0/tau_a[index];
            double t91250 = -t91247+t91248;
            double t91251 = ( (t91250 > 0.0) ?  1.0 : 0.0 ) ;
            double t91252 = C_k*t91251*t91246*t91249;
            double t91253 = t91247-t91248;
            double t91254 = ( (t91253 > 0.0) ?  1.0 : 0.0 ) ;
            double t91255 = t91254*1.0E20;
            double t91256 = t91252+t91255-1.0;
            double t91257 = t91256*t91256;
            double t91258 = t91252+t91255+1.0;
            double t91259 = t91257*t91257;
            double t91260 = gx*gx;
            double t91261 = gamma_aa[index]*gx*t91220;
            double t91262 = t91261+1.0;
            double t91263 = 1.0/t91262;
            double t91264 = gamma_aa[index]*gx*t91220*3.0;
            double t91265 = gamma_aa[index]*gx*t91221*t91223*t91260;
            double t91266 = t91221*t91224*t91260*3.0;
            double t91267 = t91264+t91265+t91266+1.0;
            double t91268 = 1.0/t91267;
            double t91269 = gamma_aa[index]*gx*t91220*2.0;
            double t91270 = t91221*t91224*t91260;
            double t91271 = t91270+t91269+1.0;
            double t91272 = 1.0/t91271;
            functional_[index] = (rho_a[index]*(t91244+t91230*t91227*(t91243-c0p*t91214*t91216*2.0))*2.0-c0p* \
               rho_a[index]*log((t91205*(1.0/2.0))/(b1p*sqrt(t91219)+b3p*pow(t91219,3.0/2.0)+b4p*t91203*1.0/pow(t91217,2.0/ \
               3.0)+b2p*c*t91218)+1.0)*(a1p*c*t91218+1.0)*4.0)*(ccab0+(ccab2*t91221*t91222*t91224)/(gamma_aa[index]* \
               gcab*t91220*2.0+t91221*t91222*t91224+1.0)+(ccab1*gamma_aa[index]*gcab*t91220)/(gamma_aa[index]*gcab* \
               t91220+1.0)+(ccab3*gamma_aa[index]*gcab*t91221*t91222*t91223)/(gamma_aa[index]*gcab*t91220*3.0+t91221* \
               t91222*t91224*3.0+gamma_aa[index]*gcab*t91221*t91222*t91223+1.0))-rho_a[index]*(t91244+t91230*t91227* \
               (t91243-t91244))*(ccaa0+(ccaa2*t91221*t91224*t91245)/(gamma_aa[index]*gcaa*t91220*2.0+t91221*t91224* \
               t91245+1.0)+(ccaa1*gamma_aa[index]*gcaa*t91220)/(gamma_aa[index]*gcaa*t91220+1.0)+(ccaa3*gamma_aa[index]* \
               gcaa*t91221*t91223*t91245)/(gamma_aa[index]*gcaa*t91220*3.0+t91221*t91224*t91245*3.0+gamma_aa[index]* \
               gcaa*t91221*t91223*t91245+1.0))*2.0-c0*pow(rho_a[index],4.0/3.0)*(X-1.0)*(cx0+(t91256/t91258-t91256* \
               t91257*1.0/(t91258*t91258*t91258)*2.0+t91256*1.0/(t91258*t91258*t91258*t91258*t91258)*t91259)*(cxnl0+ \
               cxnl1*gamma_aa[index]*gx*t91220*t91263+cxnl2*t91221*t91224*t91260*t91272+cxnl3*gamma_aa[index]*gx* \
               t91221*t91223*t91260*t91268)+cx1*gamma_aa[index]*gx*t91220*t91263+cx2*t91221*t91224*t91260*t91272+ \
               cx3*gamma_aa[index]*gx*t91221*t91223*t91260*t91268)*2.0;
        } else {
            functional_[index] = 0.0;
        } 

    }
    //First Partials
    for (int index = 0; index < ntrue && deriv_ >= 1; index++) {

        //V_rho_a
        if (rho_a[index] > cutoff_) {
            double t91274 = 1.0/pow(rho_a[index],8.0/3.0);
            double t91275 = gamma_aa[index]*gamma_aa[index];
            double t91276 = gcab*gcab;
            double t91277 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]);
            double t91278 = 1.0/pow(rho_a[index],1.6E1/3.0);
            double t91279 = rho_a[index]*2.0;
            double t91280 = 1.0/pow(t91279,1.0/3.0);
            double t91281 = c*t91280;
            double t91282 = sqrt(t91281);
            double t91283 = b1p*t91282;
            double t91284 = pow(t91281,3.0/2.0);
            double t91285 = b3p*t91284;
            double t91286 = b2p*c*t91280;
            double t91287 = c*c;
            double t91288 = 1.0/pow(t91279,2.0/3.0);
            double t91289 = b4p*t91287*t91288;
            double t91290 = t91283+t91285+t91286+t91289;
            double t91291 = 1.0/pow(t91279,4.0/3.0);
            double t91292 = 1.0/c0p;
            double t91293 = 1.0/t91290;
            double t91294 = t91292*t91293*(1.0/2.0);
            double t91295 = t91294+1.0;
            double t91296 = 1.0/pow(rho_a[index],1.0/3.0);
            double t91297 = c*t91296;
            double t91298 = sqrt(t91297);
            double t91299 = b1f*t91298;
            double t91300 = pow(t91297,3.0/2.0);
            double t91301 = b3f*t91300;
            double t91302 = 1.0/pow(rho_a[index],2.0/3.0);
            double t91303 = b4f*t91302*t91287;
            double t91304 = b2f*c*t91296;
            double t91305 = t91301+t91303+t91304+t91299;
            double t91306 = 1.0/pow(rho_a[index],4.0/3.0);
            double t91307 = b1p*t91298;
            double t91308 = b3p*t91300;
            double t91309 = b4p*t91302*t91287;
            double t91310 = b2p*c*t91296;
            double t91311 = t91310+t91307+t91308+t91309;
            double t91312 = 1.0/pow(rho_a[index],5.0/3.0);
            double t91313 = 1.0/sqrt(t91297);
            double t91314 = 1.0/c0f;
            double t91315 = 1.0/t91305;
            double t91316 = t91314*t91315*(1.0/2.0);
            double t91317 = t91316+1.0;
            double t91318 = 1.0/t91311;
            double t91319 = t91318*t91292*(1.0/2.0);
            double t91320 = t91319+1.0;
            double t91321 = a1p*c*t91296;
            double t91322 = t91321+1.0;
            double t91323 = 1.0/t91320;
            double t91324 = 1.0/(t91311*t91311);
            double t91325 = b4p*t91312*t91287*(2.0/3.0);
            double t91326 = b2p*c*t91306*(1.0/3.0);
            double t91327 = b1p*c*t91313*t91306*(1.0/6.0);
            double t91328 = b3p*c*t91306*t91298*(1.0/2.0);
            double t91329 = t91325+t91326+t91327+t91328;
            double t91330 = t91322*t91323*t91324*t91329;
            double t91331 = log(t91320);
            double t91332 = log(t91295);
            double t91333 = a1p*c*t91280;
            double t91334 = t91333+1.0;
            double t91335 = pow(2.0,1.0/3.0);
            double t91336 = t91335*2.0;
            double t91337 = t91336-2.0;
            double t91338 = two_13*2.0;
            double t91339 = t91338-2.0;
            double t91340 = 1.0/t91339;
            double t91341 = log(t91317);
            double t91342 = a1f*c*t91296;
            double t91343 = t91342+1.0;
            double t91344 = c0f*t91341*t91343*2.0;
            double t91346 = c0p*t91322*t91331*2.0;
            double t91345 = t91344-t91346;
            double t91347 = gcaa*gcaa;
            double t91348 = pow(rho_a[index],5.0/3.0);
            double t91349 = C_k*t91348;
            double t91350 = tau_a[index]*1.0E20;
            double t91351 = 1.0/tau_a[index];
            double t91352 = t91350-t91349;
            double t91353 = ( (t91352 > 0.0) ?  1.0 : 0.0 ) ;
            double t91354 = C_k*t91351*t91353*t91348;
            double t91355 = -t91350+t91349;
            double t91356 = ( (t91355 > 0.0) ?  1.0 : 0.0 ) ;
            double t91357 = t91356*1.0E20;
            double t91358 = t91354+t91357-1.0;
            double t91359 = t91358*t91358;
            double t91360 = t91354+t91357+1.0;
            double t91361 = t91359*t91359;
            double t91362 = gx*gx;
            double t91363 = gamma_aa[index]*gx*t91274;
            double t91364 = t91363+1.0;
            double t91365 = 1.0/t91364;
            double t91366 = gamma_aa[index]*gx*t91274*3.0;
            double t91367 = gamma_aa[index]*gx*t91362*t91275*t91277;
            double t91368 = t91362*t91275*t91278*3.0;
            double t91369 = t91366+t91367+t91368+1.0;
            double t91370 = 1.0/t91369;
            double t91371 = gamma_aa[index]*gx*t91274*2.0;
            double t91372 = t91362*t91275*t91278;
            double t91373 = t91371+t91372+1.0;
            double t91374 = 1.0/t91373;
            double t91375 = 1.0/t91360;
            double t91376 = 1.0/(t91360*t91360*t91360);
            double t91377 = 1.0/(t91360*t91360*t91360*t91360*t91360);
            double t91378 = t91361*t91358*t91377;
            double t91379 = 1.0/pow(rho_a[index],1.9E1/3.0);
            double t91380 = 1.0/pow(rho_a[index],1.1E1/3.0);
            double t91381 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]*rho_a[index]);
            double t91382 = cxnl1*gamma_aa[index]*gx*t91274*t91365;
            double t91383 = cxnl3*gamma_aa[index]*gx*t91370*t91362*t91275*t91277;
            double t91384 = cxnl2*t91362*t91275*t91374*t91278;
            double t91385 = cxnl0+t91382+t91383+t91384;
            double t91386 = 0.0 ;
            double t91387 = pow(rho_a[index],2.0/3.0);
            double t91388 = C_k*t91386*t91387*(5.0E20/3.0);
            double t91389 = C_k*C_k;
            double t91390 = pow(rho_a[index],7.0/3.0);
            double t91391 = C_k*t91351*t91353*t91387*(5.0/3.0);
            double t91393 = t91351*t91390*t91386*t91389*(5.0/3.0);
            double t91392 = t91391-t91393+t91388;
            double t91394 = 1.0/(t91364*t91364);
            double t91395 = gamma_aa[index]*gx*t91380*8.0;
            double t91396 = gamma_aa[index]*gx*t91362*t91381*t91275*8.0;
            double t91397 = t91362*t91275*t91379*1.6E1;
            double t91398 = t91395+t91396+t91397;
            double t91399 = 1.0/(t91369*t91369);
            double t91400 = gamma_aa[index]*gx*t91380*(1.6E1/3.0);
            double t91401 = t91362*t91275*t91379*(1.6E1/3.0);
            double t91402 = t91400+t91401;
            double t91403 = 1.0/(t91373*t91373);
            double t91404 = t91375*t91358;
            double t91405 = t91404+t91378-t91358*t91376*t91359*2.0;
            double t91406 = t91340*t91345*t91337;
            double t91407 = t91406+t91346;
            double t91408 = gamma_aa[index]*gcab*t91274;
            double t91409 = t91408+1.0;
            double t91410 = 1.0/t91409;
            double t91411 = gamma_aa[index]*gcab*t91274*3.0;
            double t91412 = gamma_aa[index]*gcab*t91275*t91276*t91277;
            double t91413 = t91275*t91276*t91278*3.0;
            double t91414 = t91411+t91412+t91413+1.0;
            double t91415 = 1.0/t91414;
            double t91416 = gamma_aa[index]*gcab*t91274*2.0;
            double t91417 = t91275*t91276*t91278;
            double t91418 = t91416+t91417+1.0;
            double t91419 = 1.0/t91418;
            double t91420 = gamma_aa[index]*gcaa*t91274;
            double t91421 = t91420+1.0;
            double t91422 = 1.0/t91421;
            double t91423 = gamma_aa[index]*gcaa*t91274*3.0;
            double t91424 = gamma_aa[index]*gcaa*t91275*t91347*t91277;
            double t91425 = t91275*t91347*t91278*3.0;
            double t91426 = t91423+t91424+t91425+1.0;
            double t91427 = 1.0/t91426;
            double t91428 = gamma_aa[index]*gcaa*t91274*2.0;
            double t91429 = t91275*t91347*t91278;
            double t91430 = t91428+t91429+1.0;
            double t91431 = 1.0/t91430;
            double t91432 = 1.0/t91317;
            double t91433 = 1.0/(t91305*t91305);
            double t91434 = b4f*t91312*t91287*(2.0/3.0);
            double t91435 = b2f*c*t91306*(1.0/3.0);
            double t91436 = b1f*c*t91313*t91306*(1.0/6.0);
            double t91437 = b3f*c*t91306*t91298*(1.0/2.0);
            double t91438 = t91434+t91435+t91436+t91437;
            double t91439 = a1f*c*c0f*t91341*t91306*(2.0/3.0);
            double t91440 = a1p*c*c0p*t91331*t91306*(2.0/3.0);
            double t91441 = ccaa1*gamma_aa[index]*gcaa*t91422*t91274;
            double t91442 = ccaa3*gamma_aa[index]*gcaa*t91427*t91275*t91347*t91277;
            double t91443 = ccaa2*t91431*t91275*t91347*t91278;
            double t91444 = ccaa0+t91441+t91442+t91443;
            v_rho_a_[index] = -(ccab0+ccab1*gamma_aa[index]*gcab*t91410*t91274+ccab2*t91275*t91419*t91276*t91278+ \
               ccab3*gamma_aa[index]*gcab*t91415*t91275*t91276*t91277)*(rho_a[index]*((t91334*1.0/(t91290*t91290) \
               *(b4p*t91287*1.0/pow(t91279,5.0/3.0)*(2.0/3.0)+b2p*c*t91291*(1.0/3.0)+b3p*c*t91282*t91291*(1.0/2.0) \
               +b1p*c*1.0/sqrt(t91281)*t91291*(1.0/6.0)))/t91295-a1p*c*c0p*t91332*t91291*(2.0/3.0))*2.0+rho_a[index]* \
               (-t91330+t91440+t91340*t91337*(t91330+t91439-t91432*t91343*t91433*t91438-a1p*c*c0p*t91331*t91306*(2.0/ \
               3.0)))-c0p*t91322*t91331*2.0+c0p*t91332*t91334*2.0-t91340*t91345*t91337)-t91407*t91444-(rho_a[index]* \
               t91407*2.0-c0p*rho_a[index]*t91332*t91334*4.0)*(ccab1*gamma_aa[index]*gcab*t91410*t91380*(4.0/3.0) \
               +ccab2*t91275*t91419*t91276*t91379*(8.0/3.0)-ccab1*1.0/(t91409*t91409)*t91275*t91276*t91379*(4.0/3.0) \
               -ccab2*1.0/(t91418*t91418)*t91275*t91276*t91278*(gamma_aa[index]*gcab*t91380*(8.0/3.0)+t91275*t91276* \
               t91379*(8.0/3.0))+ccab3*gamma_aa[index]*gcab*t91415*t91381*t91275*t91276*4.0-ccab3*gamma_aa[index]* \
               gcab*1.0/(t91414*t91414)*t91275*t91276*t91277*(gamma_aa[index]*gcab*t91380*4.0+t91275*t91276*t91379* \
               8.0+gamma_aa[index]*gcab*t91381*t91275*t91276*4.0))-(c0*pow(rho_a[index],1.0/3.0)*(cx0+t91405*t91385+ \
               cx1*gamma_aa[index]*gx*t91274*t91365+cx2*t91362*t91275*t91374*t91278+cx3*gamma_aa[index]*gx*t91370* \
               t91362*t91275*t91277)*(4.0/3.0)-c0*pow(rho_a[index],4.0/3.0)*(t91405*(cxnl1*gamma_aa[index]*gx*t91380* \
               t91365*(8.0/3.0)+cxnl2*t91362*t91275*t91374*t91379*(1.6E1/3.0)-cxnl1*t91362*t91275*t91394*t91379*(8.0/ \
               3.0)-cxnl2*t91402*t91403*t91362*t91275*t91278+cxnl3*gamma_aa[index]*gx*t91370*t91362*t91381*t91275* \
               8.0-cxnl3*gamma_aa[index]*gx*t91362*t91275*t91277*t91398*t91399)-t91385*(t91392*t91375-1.0/(t91360* \
               t91360)*t91392*t91358+t91361*t91392*t91377*5.0-t91392*t91376*t91359*6.0-1.0/(t91360*t91360*t91360* \
               t91360*t91360*t91360)*t91361*t91392*t91358*5.0+1.0/(t91360*t91360*t91360*t91360)*t91392*t91358*t91359* \
               6.0)+cx1*gamma_aa[index]*gx*t91380*t91365*(8.0/3.0)-cx1*t91362*t91275*t91394*t91379*(8.0/3.0)+cx2* \
               t91362*t91275*t91374*t91379*(1.6E1/3.0)-cx2*t91402*t91403*t91362*t91275*t91278+cx3*gamma_aa[index]* \
               gx*t91370*t91362*t91381*t91275*8.0-cx3*gamma_aa[index]*gx*t91362*t91275*t91277*t91398*t91399))*(X- \
               1.0)+rho_a[index]*t91444*(-t91330+t91440+t91340*t91337*(t91330-t91440+t91439-t91432*t91343*t91433* \
               t91438))+rho_a[index]*t91407*(ccaa1*gamma_aa[index]*gcaa*t91422*t91380*(8.0/3.0)+ccaa2*t91431*t91275* \
               t91347*t91379*(1.6E1/3.0)-ccaa1*1.0/(t91421*t91421)*t91275*t91347*t91379*(8.0/3.0)-ccaa2*1.0/(t91430* \
               t91430)*t91275*t91347*t91278*(gamma_aa[index]*gcaa*t91380*(1.6E1/3.0)+t91275*t91347*t91379*(1.6E1/ \
               3.0))+ccaa3*gamma_aa[index]*gcaa*t91381*t91427*t91275*t91347*8.0-ccaa3*gamma_aa[index]*gcaa*1.0/(t91426* \
               t91426)*t91275*t91347*t91277*(gamma_aa[index]*gcaa*t91380*8.0+t91275*t91347*t91379*1.6E1+gamma_aa[index]* \
               gcaa*t91381*t91275*t91347*8.0));
        } else {
            v_rho_a_[index] = 0.0;
        } 

        if (is_gga_) {

            if (rho_a[index] > cutoff_) {
                double t91446 = 1.0/pow(rho_a[index],1.0/3.0);
                double t91447 = c*t91446;
                double t91448 = sqrt(t91447);
                double t91449 = pow(t91447,3.0/2.0);
                double t91450 = c*c;
                double t91451 = 1.0/pow(rho_a[index],2.0/3.0);
                double t91452 = 1.0/c0p;
                double t91453 = b1p*t91448;
                double t91454 = b3p*t91449;
                double t91455 = b4p*t91450*t91451;
                double t91456 = b2p*c*t91446;
                double t91457 = t91453+t91454+t91455+t91456;
                double t91458 = 1.0/t91457;
                double t91459 = t91452*t91458*(1.0/2.0);
                double t91460 = t91459+1.0;
                double t91461 = log(t91460);
                double t91462 = a1p*c*t91446;
                double t91463 = t91462+1.0;
                double t91464 = rho_a[index]*2.0;
                double t91465 = 1.0/pow(t91464,1.0/3.0);
                double t91466 = c*t91465;
                double t91467 = 1.0/pow(rho_a[index],8.0/3.0);
                double t91468 = gcab*gcab;
                double t91469 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t91470 = gamma_aa[index]*gamma_aa[index];
                double t91471 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t91472 = gamma_aa[index]*gcab*t91467;
                double t91473 = t91472+1.0;
                double t91474 = gamma_aa[index]*gcab*t91467*3.0;
                double t91475 = gamma_aa[index]*gcab*t91470*t91471*t91468;
                double t91476 = t91470*t91468*t91469*3.0;
                double t91477 = t91474+t91475+t91476+1.0;
                double t91478 = gamma_aa[index]*gcab*t91467*2.0;
                double t91479 = t91470*t91468*t91469;
                double t91480 = t91478+t91479+1.0;
                double t91481 = pow(2.0,1.0/3.0);
                double t91482 = t91481*2.0;
                double t91483 = t91482-2.0;
                double t91484 = two_13*2.0;
                double t91485 = t91484-2.0;
                double t91486 = 1.0/t91485;
                double t91487 = 1.0/c0f;
                double t91488 = b1f*t91448;
                double t91489 = b3f*t91449;
                double t91490 = b4f*t91450*t91451;
                double t91491 = b2f*c*t91446;
                double t91492 = t91490+t91491+t91488+t91489;
                double t91493 = 1.0/t91492;
                double t91494 = t91493*t91487*(1.0/2.0);
                double t91495 = t91494+1.0;
                double t91496 = log(t91495);
                double t91497 = a1f*c*t91446;
                double t91498 = t91497+1.0;
                double t91499 = c0f*t91496*t91498*2.0;
                double t91500 = c0p*t91461*t91463*2.0;
                double t91501 = gcaa*gcaa;
                double t91502 = gamma_aa[index]*gcaa*t91467;
                double t91503 = t91502+1.0;
                double t91504 = gamma_aa[index]*gcaa*t91467*3.0;
                double t91505 = gamma_aa[index]*gcaa*t91501*t91470*t91471;
                double t91506 = t91501*t91470*t91469*3.0;
                double t91507 = t91504+t91505+t91506+1.0;
                double t91508 = gamma_aa[index]*gcaa*t91467*2.0;
                double t91509 = t91501*t91470*t91469;
                double t91510 = t91508+t91509+1.0;
                double t91511 = pow(rho_a[index],5.0/3.0);
                double t91512 = C_k*t91511;
                double t91513 = tau_a[index]*1.0E20;
                double t91514 = 1.0/tau_a[index];
                double t91515 = -t91512+t91513;
                double t91516 = ( (t91515 > 0.0) ?  1.0 : 0.0 ) ;
                double t91517 = C_k*t91511*t91514*t91516;
                double t91518 = t91512-t91513;
                double t91519 = ( (t91518 > 0.0) ?  1.0 : 0.0 ) ;
                double t91520 = t91519*1.0E20;
                double t91521 = t91520+t91517-1.0;
                double t91522 = t91521*t91521;
                double t91523 = t91520+t91517+1.0;
                double t91524 = t91522*t91522;
                double t91525 = gx*gx;
                double t91526 = gamma_aa[index]*gx*t91467;
                double t91527 = t91526+1.0;
                double t91528 = gamma_aa[index]*gx*t91467*3.0;
                double t91529 = gamma_aa[index]*gx*t91470*t91471*t91525;
                double t91530 = t91470*t91525*t91469*3.0;
                double t91531 = t91530+t91528+t91529+1.0;
                double t91532 = gamma_aa[index]*gx*t91467*2.0;
                double t91533 = t91470*t91525*t91469;
                double t91534 = t91532+t91533+1.0;
                double t91535 = 1.0/t91527;
                double t91536 = 1.0/t91534;
                double t91537 = 1.0/t91531;
                double t91538 = 1.0/(t91527*t91527);
                double t91539 = gx*t91467*3.0;
                double t91540 = gamma_aa[index]*t91525*t91469*6.0;
                double t91541 = gx*t91470*t91471*t91525*3.0;
                double t91542 = t91540+t91541+t91539;
                double t91543 = 1.0/(t91531*t91531);
                double t91544 = gx*t91467*2.0;
                double t91545 = gamma_aa[index]*t91525*t91469*2.0;
                double t91546 = t91544+t91545;
                double t91547 = 1.0/(t91534*t91534);
                v_gamma_aa_[index] = (rho_a[index]*(t91500+t91483*t91486*(t91499-c0p*t91461*t91463*2.0))*2.0-c0p* \
                   rho_a[index]*log((t91452*(1.0/2.0))/(b1p*sqrt(t91466)+b3p*pow(t91466,3.0/2.0)+b4p*t91450*1.0/pow(t91464,2.0/ \
                   3.0)+b2p*c*t91465)+1.0)*(a1p*c*t91465+1.0)*4.0)*((ccab1*gcab*t91467*(1.0/2.0))/t91473+(ccab2*gamma_aa[index]* \
                   t91468*t91469)/t91480-ccab1*gamma_aa[index]*1.0/(t91473*t91473)*t91468*t91469*(1.0/2.0)-ccab2*t91470* \
                   1.0/(t91480*t91480)*t91468*t91469*(gcab*t91467+gamma_aa[index]*t91468*t91469)+(ccab3*gcab*t91470*t91471* \
                   t91468*(3.0/2.0))/t91477-ccab3*gamma_aa[index]*gcab*t91470*t91471*t91468*1.0/(t91477*t91477)*(gcab* \
                   t91467*(3.0/2.0)+gamma_aa[index]*t91468*t91469*3.0+gcab*t91470*t91471*t91468*(3.0/2.0)))*2.0-rho_a[index]* \
                   (t91500-t91483*t91486*(t91500-t91499))*((ccaa1*gcaa*t91467)/t91503+(ccaa2*gamma_aa[index]*t91501*t91469* \
                   2.0)/t91510-ccaa1*gamma_aa[index]*t91501*1.0/(t91503*t91503)*t91469-ccaa2*t91501*1.0/(t91510*t91510) \
                   *t91470*t91469*(gcaa*t91467*2.0+gamma_aa[index]*t91501*t91469*2.0)+(ccaa3*gcaa*t91501*t91470*t91471* \
                   3.0)/t91507-ccaa3*gamma_aa[index]*gcaa*t91501*t91470*t91471*1.0/(t91507*t91507)*(gcaa*t91467*3.0+gamma_aa[index]* \
                   t91501*t91469*6.0+gcaa*t91501*t91470*t91471*3.0))*2.0-c0*pow(rho_a[index],4.0/3.0)*(X-1.0)*((t91521/ \
                   t91523-t91521*t91522*1.0/(t91523*t91523*t91523)*2.0+t91521*1.0/(t91523*t91523*t91523*t91523*t91523) \
                   *t91524)*(cxnl1*gx*t91535*t91467+cxnl2*gamma_aa[index]*t91525*t91536*t91469*2.0-cxnl1*gamma_aa[index]* \
                   t91525*t91538*t91469-cxnl2*t91470*t91525*t91546*t91547*t91469+cxnl3*gx*t91470*t91471*t91525*t91537* \
                   3.0-cxnl3*gamma_aa[index]*gx*t91470*t91542*t91471*t91525*t91543)+cx1*gx*t91535*t91467-cx1*gamma_aa[index]* \
                   t91525*t91538*t91469+cx2*gamma_aa[index]*t91525*t91536*t91469*2.0-cx2*t91470*t91525*t91546*t91547* \
                   t91469+cx3*gx*t91470*t91471*t91525*t91537*3.0-cx3*gamma_aa[index]*gx*t91470*t91542*t91471*t91525*t91543) \
                   *2.0;
            } else {
                v_gamma_aa_[index] = 0.0;
            } 

        }
        if (is_meta_) {

            //V_tau_a
            if (rho_a[index] > cutoff_) {
                double t91549 = 1.0/pow(rho_a[index],8.0/3.0);
                double t91550 = gamma_aa[index]*gamma_aa[index];
                double t91551 = gx*gx;
                double t91552 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t91553 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t91554 = pow(rho_a[index],5.0/3.0);
                double t91555 = tau_a[index]*1.0E20;
                double t91558 = C_k*t91554;
                double t91556 = t91555-t91558;
                double t91557 = 0.0 ;
                double t91559 = 1.0/tau_a[index];
                double t91560 = ( (t91556 > 0.0) ?  1.0 : 0.0 ) ;
                double t91561 = t91557*1.0E40;
                double t91562 = 1.0/(tau_a[index]*tau_a[index]);
                double t91563 = C_k*t91560*t91562*t91554;
                double t91570 = C_k*t91554*t91557*t91559*1.0E20;
                double t91564 = t91561-t91570+t91563;
                double t91565 = -t91555+t91558;
                double t91566 = ( (t91565 > 0.0) ?  1.0 : 0.0 ) ;
                double t91567 = t91566*1.0E20;
                double t91568 = C_k*t91560*t91554*t91559;
                double t91569 = t91567+t91568+1.0;
                double t91571 = t91567+t91568-1.0;
                double t91572 = t91571*t91571;
                double t91573 = t91572*t91572;
                double t91574 = pow(rho_a[index],4.0/3.0);
                double t91575 = gamma_aa[index]*gx*t91549;
                double t91576 = t91575+1.0;
                double t91577 = 1.0/t91576;
                double t91578 = cxnl1*gamma_aa[index]*gx*t91549*t91577;
                double t91579 = gamma_aa[index]*gx*t91549*3.0;
                double t91580 = gamma_aa[index]*gx*t91550*t91551*t91552;
                double t91581 = t91550*t91551*t91553*3.0;
                double t91582 = t91580+t91581+t91579+1.0;
                double t91583 = 1.0/t91582;
                double t91584 = cxnl3*gamma_aa[index]*gx*t91550*t91551*t91552*t91583;
                double t91585 = gamma_aa[index]*gx*t91549*2.0;
                double t91586 = t91550*t91551*t91553;
                double t91587 = t91585+t91586+1.0;
                double t91588 = 1.0/t91587;
                double t91589 = cxnl2*t91550*t91551*t91553*t91588;
                double t91590 = cxnl0+t91584+t91578+t91589;
                double t91591 = 1.0/t91569;
                double t91592 = 1.0/(t91569*t91569*t91569);
                double t91593 = 1.0/(t91569*t91569*t91569*t91569);
                double t91594 = 1.0/(t91569*t91569*t91569*t91569*t91569);
                double t91595 = 1.0/(t91569*t91569*t91569*t91569*t91569*t91569);
                double t91596 = 1.0/(t91569*t91569);
                v_tau_a_[index] = (c0*t91590*t91574*(t91591*t91557*1.0E40-t91572*t91592*t91557*6.0E40-t91571*t91557* \
                   t91596*1.0E40+t91573*t91557*t91594*5.0E40+t91571*t91572*t91557*t91593*6.0E40-t91571*t91573*t91557* \
                   t91595*5.0E40)+c0*t91590*t91574*(t91564*t91591-t91572*t91564*t91592*6.0-t91571*t91564*t91596+t91564* \
                   t91573*t91594*5.0+t91571*t91572*t91564*t91593*6.0-t91571*t91564*t91573*t91595*5.0))*(X-1.0);
            } else {
                v_tau_a_[index] = 0.0;
            } 

        }
    }
    //Second Partials
    for (int index = 0; index < ntrue && deriv_ >= 2; index++) {

        //V_rho_a_rho_a
        if (rho_a[index] > cutoff_) {
            double t91598 = rho_a[index]*2.0;
            double t91599 = 1.0/pow(t91598,1.0/3.0);
            double t91600 = c*t91599;
            double t91601 = sqrt(t91600);
            double t91602 = b1p*t91601;
            double t91603 = pow(t91600,3.0/2.0);
            double t91604 = b3p*t91603;
            double t91605 = b2p*c*t91599;
            double t91606 = c*c;
            double t91607 = 1.0/pow(t91598,2.0/3.0);
            double t91608 = b4p*t91606*t91607;
            double t91609 = t91602+t91604+t91605+t91608;
            double t91610 = 1.0/pow(t91598,8.0/3.0);
            double t91611 = 1.0/pow(t91598,7.0/3.0);
            double t91612 = 1.0/sqrt(t91600);
            double t91613 = 1.0/c0p;
            double t91614 = 1.0/t91609;
            double t91615 = t91613*t91614*(1.0/2.0);
            double t91616 = t91615+1.0;
            double t91617 = 1.0/t91616;
            double t91618 = a1p*c*t91599;
            double t91619 = t91618+1.0;
            double t91620 = 1.0/pow(t91598,4.0/3.0);
            double t91622 = b2p*c*t91620*(1.0/3.0);
            double t91623 = 1.0/pow(t91598,5.0/3.0);
            double t91624 = b4p*t91623*t91606*(2.0/3.0);
            double t91625 = b1p*c*t91620*t91612*(1.0/6.0);
            double t91626 = b3p*c*t91601*t91620*(1.0/2.0);
            double t91621 = t91622+t91624+t91625+t91626;
            double t91627 = t91621*t91621;
            double t91628 = 1.0/(t91609*t91609);
            double t91629 = log(t91616);
            double t91630 = 1.0/pow(rho_a[index],8.0/3.0);
            double t91631 = gamma_aa[index]*gamma_aa[index];
            double t91632 = gcab*gcab;
            double t91633 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]);
            double t91634 = 1.0/pow(rho_a[index],1.6E1/3.0);
            double t91635 = two_13*2.0;
            double t91636 = t91635-2.0;
            double t91637 = 1.0/t91636;
            double t91638 = 1.0/pow(rho_a[index],1.0/3.0);
            double t91639 = c*t91638;
            double t91640 = sqrt(t91639);
            double t91641 = b1f*t91640;
            double t91642 = pow(t91639,3.0/2.0);
            double t91643 = b3f*t91642;
            double t91644 = 1.0/pow(rho_a[index],2.0/3.0);
            double t91645 = b4f*t91606*t91644;
            double t91646 = b2f*c*t91638;
            double t91647 = t91641+t91643+t91645+t91646;
            double t91648 = 1.0/pow(rho_a[index],4.0/3.0);
            double t91649 = b1p*t91640;
            double t91650 = b3p*t91642;
            double t91651 = b4p*t91606*t91644;
            double t91652 = b2p*c*t91638;
            double t91653 = t91650+t91651+t91652+t91649;
            double t91654 = 1.0/pow(rho_a[index],5.0/3.0);
            double t91655 = 1.0/sqrt(t91639);
            double t91656 = 1.0/c0f;
            double t91657 = 1.0/t91647;
            double t91658 = t91656*t91657*(1.0/2.0);
            double t91659 = t91658+1.0;
            double t91660 = 1.0/t91653;
            double t91661 = t91613*t91660*(1.0/2.0);
            double t91662 = t91661+1.0;
            double t91663 = a1p*c*t91638;
            double t91664 = t91663+1.0;
            double t91665 = 1.0/t91662;
            double t91666 = 1.0/(t91653*t91653);
            double t91667 = b4p*t91606*t91654*(2.0/3.0);
            double t91668 = b2p*c*t91648*(1.0/3.0);
            double t91669 = b1p*c*t91655*t91648*(1.0/6.0);
            double t91670 = b3p*c*t91640*t91648*(1.0/2.0);
            double t91671 = t91670+t91667+t91668+t91669;
            double t91672 = t91671*t91664*t91665*t91666;
            double t91673 = log(t91662);
            double t91674 = gcaa*gcaa;
            double t91675 = pow(2.0,1.0/3.0);
            double t91676 = t91675*2.0;
            double t91677 = t91676-2.0;
            double t91678 = log(t91659);
            double t91679 = a1f*c*t91638;
            double t91680 = t91679+1.0;
            double t91681 = gamma_aa[index]*gcab*t91630*3.0;
            double t91682 = gamma_aa[index]*gcab*t91631*t91632*t91633;
            double t91683 = t91631*t91632*t91634*3.0;
            double t91684 = t91681+t91682+t91683+1.0;
            double t91685 = 1.0/t91684;
            double t91686 = gamma_aa[index]*gcab*t91630*2.0;
            double t91687 = t91631*t91632*t91634;
            double t91688 = t91686+t91687+1.0;
            double t91689 = 1.0/t91688;
            double t91690 = 1.0/pow(rho_a[index],1.0E1);
            double t91691 = gamma_aa[index]*gcab*t91630;
            double t91692 = t91691+1.0;
            double t91693 = 1.0/pow(rho_a[index],2.2E1/3.0);
            double t91695 = 1.0/pow(rho_a[index],1.1E1/3.0);
            double t91697 = 1.0/pow(rho_a[index],1.9E1/3.0);
            double t91703 = gamma_aa[index]*gcab*t91695*(8.0/3.0);
            double t91704 = t91631*t91632*t91697*(8.0/3.0);
            double t91694 = t91703+t91704;
            double t91696 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]*rho_a[index]);
            double t91698 = 1.0/(t91684*t91684);
            double t91699 = gamma_aa[index]*gcab*t91695*4.0;
            double t91700 = gamma_aa[index]*gcab*t91631*t91632*t91696*4.0;
            double t91701 = t91631*t91632*t91697*8.0;
            double t91702 = t91700+t91701+t91699;
            double t91705 = 1.0/(t91688*t91688);
            double t91706 = pow(rho_a[index],5.0/3.0);
            double t91707 = C_k*t91706;
            double t91708 = tau_a[index]*1.0E20;
            double t91709 = 1.0/tau_a[index];
            double t91710 = -t91707+t91708;
            double t91711 = ( (t91710 > 0.0) ?  1.0 : 0.0 ) ;
            double t91712 = C_k*t91711*t91706*t91709;
            double t91713 = t91707-t91708;
            double t91714 = ( (t91713 > 0.0) ?  1.0 : 0.0 ) ;
            double t91715 = t91714*1.0E20;
            double t91716 = t91712+t91715-1.0;
            double t91717 = t91716*t91716;
            double t91718 = t91712+t91715+1.0;
            double t91719 = t91717*t91717;
            double t91720 = gx*gx;
            double t91721 = gamma_aa[index]*gx*t91630;
            double t91722 = t91721+1.0;
            double t91723 = 1.0/t91722;
            double t91724 = gamma_aa[index]*gx*t91630*3.0;
            double t91725 = gamma_aa[index]*gx*t91720*t91631*t91633;
            double t91726 = t91720*t91631*t91634*3.0;
            double t91727 = t91724+t91725+t91726+1.0;
            double t91728 = 1.0/t91727;
            double t91729 = gamma_aa[index]*gx*t91630*2.0;
            double t91730 = t91720*t91631*t91634;
            double t91731 = t91730+t91729+1.0;
            double t91732 = 1.0/t91731;
            double t91733 = 1.0/t91718;
            double t91734 = 1.0/(t91718*t91718*t91718);
            double t91735 = 1.0/(t91718*t91718*t91718*t91718*t91718);
            double t91736 = t91716*t91735*t91719;
            double t91737 = cxnl1*gamma_aa[index]*gx*t91630*t91723;
            double t91738 = cxnl3*gamma_aa[index]*gx*t91720*t91631*t91633*t91728;
            double t91739 = cxnl2*t91720*t91631*t91732*t91634;
            double t91740 = cxnl0+t91737+t91738+t91739;
            double t91741 = 0.0 ;
            double t91742 = pow(rho_a[index],2.0/3.0);
            double t91743 = C_k*t91741*t91742*(5.0E20/3.0);
            double t91744 = C_k*C_k;
            double t91745 = pow(rho_a[index],7.0/3.0);
            double t91746 = C_k*t91711*t91742*t91709*(5.0/3.0);
            double t91748 = t91741*t91744*t91709*t91745*(5.0/3.0);
            double t91747 = t91743+t91746-t91748;
            double t91749 = 1.0/(t91722*t91722);
            double t91750 = gamma_aa[index]*gx*t91695*8.0;
            double t91751 = gamma_aa[index]*gx*t91720*t91631*t91696*8.0;
            double t91752 = t91720*t91631*t91697*1.6E1;
            double t91753 = t91750+t91751+t91752;
            double t91754 = 1.0/(t91727*t91727);
            double t91755 = gamma_aa[index]*gx*t91695*(1.6E1/3.0);
            double t91756 = t91720*t91631*t91697*(1.6E1/3.0);
            double t91757 = t91755+t91756;
            double t91758 = 1.0/(t91731*t91731);
            double t91759 = t91733*t91716;
            double t91795 = t91716*t91734*t91717*2.0;
            double t91760 = t91736+t91759-t91795;
            double t91761 = 1.0/pow(rho_a[index],1.4E1/3.0);
            double t91762 = cxnl1*gamma_aa[index]*gx*t91723*t91695*(8.0/3.0);
            double t91763 = cxnl3*gamma_aa[index]*gx*t91720*t91631*t91728*t91696*8.0;
            double t91764 = cxnl2*t91720*t91631*t91732*t91697*(1.6E1/3.0);
            double t91765 = t91762+t91763+t91764-cxnl1*t91720*t91631*t91749*t91697*(8.0/3.0)-cxnl2*t91720*t91631* \
               t91634*t91757*t91758-cxnl3*gamma_aa[index]*gx*t91720*t91631*t91633*t91753*t91754;
            double t91766 = t91733*t91747;
            double t91767 = 1.0/(t91718*t91718);
            double t91768 = 1.0/(t91718*t91718*t91718*t91718);
            double t91769 = t91716*t91717*t91747*t91768*6.0;
            double t91770 = t91735*t91719*t91747*5.0;
            double t91771 = 1.0/(t91718*t91718*t91718*t91718*t91718*t91718);
            double t91772 = t91770+t91766+t91769-t91734*t91717*t91747*6.0-t91716*t91747*t91767-t91716*t91771* \
               t91719*t91747*5.0;
            double t91773 = pow(rho_a[index],4.0/3.0);
            double t91774 = rho_a[index]*rho_a[index];
            double t91775 = 0.0 ;
            double t91776 = t91747*t91747;
            double t91777 = C_k*t91741*t91638*(1.0E21/9.0);
            double t91778 = C_k*rho_a[index]*t91744*t91709*t91774*t91775*(2.5E1/9.0);
            double t91779 = C_k*t91711*t91709*t91638*(1.0E1/9.0);
            double t91781 = t91744*t91773*t91775*(2.5E21/9.0);
            double t91782 = t91741*t91744*t91709*t91773*(2.0E1/3.0);
            double t91780 = -t91781-t91782+t91777+t91778+t91779;
            double t91783 = 1.0/(t91722*t91722*t91722);
            double t91784 = t91757*t91757;
            double t91785 = 1.0/(t91731*t91731*t91731);
            double t91786 = gamma_aa[index]*gx*t91761*(8.8E1/3.0);
            double t91787 = gamma_aa[index]*gx*t91720*t91631*t91690*7.2E1;
            double t91788 = t91720*t91631*t91693*(3.04E2/3.0);
            double t91789 = t91786+t91787+t91788;
            double t91790 = t91753*t91753;
            double t91791 = 1.0/(t91727*t91727*t91727);
            double t91792 = gamma_aa[index]*gx*t91761*(1.76E2/9.0);
            double t91793 = t91720*t91631*t91693*(3.04E2/9.0);
            double t91794 = t91792+t91793;
            double t91796 = c0f*t91680*t91678*2.0;
            double t91797 = c0p*t91664*t91673*2.0;
            double t91798 = 1.0/t91692;
            double t91799 = 1.0/(t91692*t91692*t91692);
            double t91800 = ccab1*gamma_aa[index]*gcab*t91631*t91632*t91690*t91799*(3.2E1/9.0);
            double t91801 = 1.0/(t91692*t91692);
            double t91802 = t91694*t91694;
            double t91803 = 1.0/(t91688*t91688*t91688);
            double t91804 = ccab2*t91631*t91802*t91632*t91803*t91634*2.0;
            double t91805 = t91702*t91702;
            double t91806 = 1.0/(t91684*t91684*t91684);
            double t91807 = ccab3*gamma_aa[index]*gcab*t91631*t91632*t91633*t91805*t91806*2.0;
            double t91808 = 1.0/t91659;
            double t91809 = 1.0/(t91647*t91647);
            double t91810 = b4f*t91606*t91654*(2.0/3.0);
            double t91811 = b2f*c*t91648*(1.0/3.0);
            double t91812 = b1f*c*t91655*t91648*(1.0/6.0);
            double t91813 = b3f*c*t91640*t91648*(1.0/2.0);
            double t91814 = t91810+t91811+t91812+t91813;
            double t91815 = a1f*c*c0f*t91648*t91678*(2.0/3.0);
            double t91816 = a1p*c*c0p*t91673*t91648*(2.0/3.0);
            double t91817 = t91796-t91797;
            double t91818 = t91637*t91817*t91677;
            double t91819 = ccab1*gamma_aa[index]*gcab*t91630*t91798;
            double t91820 = ccab3*gamma_aa[index]*gcab*t91631*t91632*t91633*t91685;
            double t91821 = ccab2*t91631*t91632*t91634*t91689;
            double t91822 = ccab0+t91820+t91821+t91819;
            double t91823 = b2p*c*t91611*(4.0/9.0);
            double t91824 = b4p*t91610*t91606*(1.0E1/9.0);
            double t91825 = 1.0/pow(t91600,3.0/2.0);
            double t91826 = b3p*t91610*t91612*t91606*(1.0/1.2E1);
            double t91827 = b1p*c*t91611*t91612*(2.0/9.0);
            double t91828 = b3p*c*t91601*t91611*(2.0/3.0);
            double t91829 = t91823+t91824+t91826+t91827+t91828-b1p*t91610*t91606*t91825*(1.0/3.6E1);
            double t91830 = t91617*t91619*t91628*t91829;
            double t91831 = 1.0/(t91609*t91609*t91609);
            double t91832 = 1.0/(t91616*t91616);
            double t91833 = 1.0/(t91609*t91609*t91609*t91609);
            double t91834 = t91613*t91832*t91833*t91627*t91619*(1.0/2.0);
            double t91835 = 1.0/d2fz0;
            double t91836 = 1.0/(rho_a[index]*rho_a[index]);
            double t91837 = 1.0/Aa;
            double t91838 = b1a*t91601;
            double t91839 = b3a*t91603;
            double t91840 = b2a*c*t91599;
            double t91841 = b4a*t91606*t91607;
            double t91842 = t91840+t91841+t91838+t91839;
            double t91843 = 1.0/t91842;
            double t91844 = t91843*t91837*(1.0/2.0);
            double t91845 = t91844+1.0;
            double t91846 = log(t91845);
            double t91847 = a1a*c*t91599;
            double t91848 = t91847+1.0;
            double t91849 = a1p*c*t91620*t91621*t91617*t91628*(2.0/3.0);
            double t91850 = 1.0/pow(rho_a[index],7.0/3.0);
            double t91851 = 1.0/pow(t91639,3.0/2.0);
            double t91852 = t91814*t91814;
            double t91853 = t91671*t91671;
            double t91854 = 1.0/(t91653*t91653*t91653);
            double t91855 = t91664*t91853*t91665*t91854*2.0;
            double t91856 = b4p*t91630*t91606*(1.0E1/9.0);
            double t91857 = b2p*c*t91850*(4.0/9.0);
            double t91858 = b3p*t91630*t91606*t91655*(1.0/1.2E1);
            double t91859 = b1p*c*t91850*t91655*(2.0/9.0);
            double t91860 = b3p*c*t91640*t91850*(2.0/3.0);
            double t91909 = b1p*t91630*t91606*t91851*(1.0/3.6E1);
            double t91861 = t91860-t91909+t91856+t91857+t91858+t91859;
            double t91862 = 1.0/(t91662*t91662);
            double t91863 = 1.0/(t91653*t91653*t91653*t91653);
            double t91864 = a1p*c*c0p*t91850*t91673*(8.0/9.0);
            double t91890 = t91814*t91680*t91808*t91809;
            double t91865 = t91815+t91672-t91816-t91890;
            double t91866 = a1p*c*c0p*t91620*t91629*(4.0/3.0);
            double t91867 = t91818+t91797;
            double t91868 = gamma_aa[index]*gcaa*t91630;
            double t91869 = t91868+1.0;
            double t91870 = 1.0/t91869;
            double t91871 = gamma_aa[index]*gcaa*t91630*3.0;
            double t91872 = gamma_aa[index]*gcaa*t91631*t91633*t91674;
            double t91873 = t91631*t91634*t91674*3.0;
            double t91874 = t91871+t91872+t91873+1.0;
            double t91875 = 1.0/t91874;
            double t91876 = gamma_aa[index]*gcaa*t91630*2.0;
            double t91877 = t91631*t91634*t91674;
            double t91878 = t91876+t91877+1.0;
            double t91879 = 1.0/t91878;
            double t91880 = 1.0/(t91869*t91869);
            double t91881 = gamma_aa[index]*gcaa*t91695*(1.6E1/3.0);
            double t91882 = t91631*t91674*t91697*(1.6E1/3.0);
            double t91883 = t91881+t91882;
            double t91884 = gamma_aa[index]*gcaa*t91695*8.0;
            double t91885 = gamma_aa[index]*gcaa*t91631*t91674*t91696*8.0;
            double t91886 = t91631*t91674*t91697*1.6E1;
            double t91887 = t91884+t91885+t91886;
            double t91888 = 1.0/(t91874*t91874);
            double t91889 = 1.0/(t91878*t91878);
            double t91891 = t91637*t91865*t91677;
            double t91892 = ccaa1*gamma_aa[index]*gcaa*t91870*t91695*(8.0/3.0);
            double t91893 = ccaa3*gamma_aa[index]*gcaa*t91631*t91674*t91875*t91696*8.0;
            double t91894 = ccaa2*t91631*t91674*t91697*t91879*(1.6E1/3.0);
            double t91895 = t91892+t91893+t91894-ccaa1*t91631*t91880*t91674*t91697*(8.0/3.0)-ccaa2*t91631*t91634* \
               t91674*t91883*t91889-ccaa3*gamma_aa[index]*gcaa*t91631*t91633*t91674*t91887*t91888;
            double t91896 = -t91672+t91816+t91891;
            double t91897 = ccaa1*gamma_aa[index]*gcaa*t91630*t91870;
            double t91898 = ccaa3*gamma_aa[index]*gcaa*t91631*t91633*t91674*t91875;
            double t91899 = ccaa2*t91631*t91634*t91674*t91879;
            double t91900 = ccaa0+t91897+t91898+t91899;
            double t91901 = 1.0/(t91647*t91647*t91647);
            double t91902 = b4f*t91630*t91606*(1.0E1/9.0);
            double t91903 = b2f*c*t91850*(4.0/9.0);
            double t91904 = b3f*t91630*t91606*t91655*(1.0/1.2E1);
            double t91905 = b1f*c*t91850*t91655*(2.0/9.0);
            double t91906 = b3f*c*t91640*t91850*(2.0/3.0);
            double t91907 = t91902+t91903+t91904+t91905+t91906-b1f*t91630*t91606*t91851*(1.0/3.6E1);
            double t91908 = t91680*t91808*t91907*t91809;
            double t91910 = t91861*t91664*t91665*t91666;
            double t91911 = 1.0/(t91659*t91659);
            double t91912 = 1.0/(t91647*t91647*t91647*t91647);
            double t91913 = t91911*t91912*t91680*t91852*t91656*(1.0/2.0);
            double t91914 = t91613*t91664*t91853*t91862*t91863*(1.0/2.0);
            double t91915 = a1f*c*t91814*t91808*t91809*t91648*(2.0/3.0);
            double t91916 = a1p*c*t91671*t91665*t91648*t91666*(2.0/3.0);
            v_rho_a_rho_a_[index] = (rho_a[index]*(t91797+t91637*t91677*(t91796-c0p*t91664*t91673*2.0))*2.0-c0p* \
               rho_a[index]*t91619*t91629*4.0)*(t91800+t91804+t91807-ccab1*t91801*t91631*t91632*t91693*(3.2E1/9.0) \
               +ccab2*t91631*t91632*t91693*t91689*(3.2E1/9.0)-ccab2*1.0/pow(rho_a[index],3.8E1/3.0)*(t91631*t91631) \
               *(t91632*t91632)*t91705*(3.2E1/9.0)-ccab2*t91631*t91632*t91705*t91694*t91697*(1.6E1/3.0)+ccab3*gamma_aa[index]* \
               gcab*t91631*t91632*t91690*t91685*(3.2E1/3.0)-ccab3*gamma_aa[index]*gcab*t91631*t91632*t91633*t91698* \
               (t91631*t91632*t91693*(3.2E1/3.0)+gamma_aa[index]*gcab*t91631*t91632*t91690*(3.2E1/3.0))-ccab3*gamma_aa[index]* \
               gcab*t91702*t91631*t91632*t91696*t91698*8.0)-t91822*(-t91866-rho_a[index]*(t91830+t91834+t91849-t91831* \
               t91617*t91627*t91619*2.0-a1p*c*c0p*t91611*t91629*(8.0/9.0)+Aa*t91637*t91835*t91836*t91846*t91848*(4.0/ \
               9.0))*2.0+rho_a[index]*(t91910+t91914+t91916-t91855-t91864+t91637*t91677*(t91913+t91915+t91908+t91855+ \
               t91864-t91901*t91680*t91852*t91808*2.0-t91861*t91664*t91665*t91666-a1f*c*c0f*t91850*t91678*(8.0/9.0) \
               -t91613*t91664*t91853*t91862*t91863*(1.0/2.0)-a1p*c*t91671*t91665*t91648*t91666*(2.0/3.0)))+t91637* \
               t91865*t91677*2.0+t91621*t91617*t91619*t91628*2.0-t91671*t91664*t91665*t91666*2.0+a1p*c*c0p*t91673* \
               t91648*(4.0/3.0))+t91867*t91895*2.0+(-t91818-t91797+rho_a[index]*t91896+rho_a[index]*(t91621*t91617* \
               t91619*t91628-a1p*c*c0p*t91620*t91629*(2.0/3.0))*2.0+c0p*t91619*t91629*2.0)*(ccab1*gamma_aa[index]* \
               gcab*t91695*t91798*(4.0/3.0)-ccab1*t91801*t91631*t91632*t91697*(4.0/3.0)+ccab2*t91631*t91632*t91697* \
               t91689*(8.0/3.0)-ccab2*t91631*t91632*t91705*t91634*t91694+ccab3*gamma_aa[index]*gcab*t91631*t91632* \
               t91685*t91696*4.0-ccab3*gamma_aa[index]*gcab*t91702*t91631*t91632*t91633*t91698)*4.0+t91900*(-t91672+ \
               t91816+t91637*t91677*(t91815+t91672-t91814*t91680*t91808*t91809-a1p*c*c0p*t91673*t91648*(2.0/3.0)) \
               )*2.0+(rho_a[index]*t91867*2.0-c0p*rho_a[index]*t91619*t91629*4.0)*(t91800+t91804+t91807+ccab1*gamma_aa[index]* \
               gcab*t91761*t91798*(4.4E1/9.0)-ccab1*t91801*t91631*t91632*t91693*(7.6E1/9.0)+ccab2*t91631*t91632*t91693* \
               t91689*(4.0E1/3.0)-ccab2*t91631*t91632*t91705*t91694*t91697*(1.6E1/3.0)-ccab2*t91631*t91632*t91705* \
               t91634*(gamma_aa[index]*gcab*t91761*(8.8E1/9.0)+t91631*t91632*t91693*(4.0E1/3.0))+ccab3*gamma_aa[index]* \
               gcab*t91631*t91632*t91690*t91685*(7.6E1/3.0)-ccab3*gamma_aa[index]*gcab*t91631*t91632*t91633*t91698* \
               (gamma_aa[index]*gcab*t91761*(4.4E1/3.0)+t91631*t91632*t91693*4.0E1+gamma_aa[index]*gcab*t91631*t91632* \
               t91690*(7.6E1/3.0))-ccab3*gamma_aa[index]*gcab*t91702*t91631*t91632*t91696*t91698*8.0)+t91822*(t91866+ \
               rho_a[index]*(t91830+t91834+t91849-t91831*t91617*t91627*t91619*2.0-a1p*c*c0p*t91611*t91629*(8.0/9.0) \
               -Aa*t91637*t91835*t91836*t91846*t91848*(4.0/9.0))*2.0-t91621*t91617*t91619*t91628*2.0)-(X-1.0)*(c0* \
               t91773*(t91760*(cxnl1*gamma_aa[index]*gx*t91723*t91761*(8.8E1/9.0)+cxnl2*t91720*t91631*t91732*t91693* \
               (3.04E2/9.0)-cxnl1*t91720*t91631*t91693*t91749*2.4E1+cxnl2*t91720*t91631*t91634*t91784*t91785*2.0- \
               cxnl2*t91720*t91631*t91634*t91758*t91794-cxnl2*t91720*t91631*t91757*t91758*t91697*(3.2E1/3.0)+cxnl1* \
               gamma_aa[index]*gx*t91720*t91631*t91690*t91783*(1.28E2/9.0)+cxnl3*gamma_aa[index]*gx*t91720*t91631* \
               t91690*t91728*7.2E1+cxnl3*gamma_aa[index]*gx*t91720*t91631*t91633*t91790*t91791*2.0-cxnl3*gamma_aa[index]* \
               gx*t91720*t91631*t91633*t91754*t91789-cxnl3*gamma_aa[index]*gx*t91720*t91631*t91753*t91754*t91696* \
               1.6E1)-t91772*t91765*2.0-t91740*(-t91733*t91780+t91767*t91776*2.0+t91734*t91717*t91780*6.0-t91735* \
               t91780*t91719*5.0+t91716*t91734*t91776*1.0E1+t91716*t91780*t91767+t91771*t91719*t91776*5.0E1-t91717* \
               t91776*t91768*3.6E1+t91716*t91771*t91780*t91719*5.0+t91716*t91717*t91735*t91776*4.0-t91716*t91717* \
               t91780*t91768*6.0-t91716*1.0/(t91718*t91718*t91718*t91718*t91718*t91718*t91718)*t91719*t91776*3.0E1) \
               +cx1*gamma_aa[index]*gx*t91723*t91761*(8.8E1/9.0)-cx1*t91720*t91631*t91693*t91749*2.4E1+cx2*t91720* \
               t91631*t91732*t91693*(3.04E2/9.0)+cx2*t91720*t91631*t91634*t91784*t91785*2.0-cx2*t91720*t91631*t91634* \
               t91758*t91794-cx2*t91720*t91631*t91757*t91758*t91697*(3.2E1/3.0)+cx1*gamma_aa[index]*gx*t91720*t91631* \
               t91690*t91783*(1.28E2/9.0)+cx3*gamma_aa[index]*gx*t91720*t91631*t91690*t91728*7.2E1+cx3*gamma_aa[index]* \
               gx*t91720*t91631*t91633*t91790*t91791*2.0-cx3*gamma_aa[index]*gx*t91720*t91631*t91633*t91754*t91789- \
               cx3*gamma_aa[index]*gx*t91720*t91631*t91753*t91754*t91696*1.6E1)+c0*pow(rho_a[index],1.0/3.0)*(t91740* \
               t91772-t91760*t91765-cx1*gamma_aa[index]*gx*t91723*t91695*(8.0/3.0)+cx1*t91720*t91631*t91749*t91697* \
               (8.0/3.0)-cx2*t91720*t91631*t91732*t91697*(1.6E1/3.0)+cx2*t91720*t91631*t91634*t91757*t91758-cx3*gamma_aa[index]* \
               gx*t91720*t91631*t91728*t91696*8.0+cx3*gamma_aa[index]*gx*t91720*t91631*t91633*t91753*t91754)*(8.0/ \
               3.0)+c0*t91644*(cx0+t91740*t91760+cx1*gamma_aa[index]*gx*t91630*t91723+cx2*t91720*t91631*t91732*t91634+ \
               cx3*gamma_aa[index]*gx*t91720*t91631*t91633*t91728)*(4.0/9.0))+rho_a[index]*t91900*(t91910+t91914+ \
               t91916-t91855-t91864-t91637*t91677*(t91910-t91913+t91914-t91915+t91916-t91908-t91855-t91864+t91901* \
               t91680*t91852*t91808*2.0+a1f*c*c0f*t91850*t91678*(8.0/9.0)))-rho_a[index]*t91867*(ccaa1*gamma_aa[index]* \
               gcaa*t91761*t91870*(8.8E1/9.0)-ccaa1*t91631*t91880*t91674*t91693*2.4E1+ccaa2*t91631*t91674*t91693* \
               t91879*(3.04E2/9.0)-ccaa2*t91631*t91674*t91883*t91697*t91889*(3.2E1/3.0)-ccaa2*t91631*t91634*t91674* \
               t91889*(gamma_aa[index]*gcaa*t91761*(1.76E2/9.0)+t91631*t91674*t91693*(3.04E2/9.0))+ccaa2*t91631*t91634* \
               t91674*(t91883*t91883)*1.0/(t91878*t91878*t91878)*2.0+ccaa3*gamma_aa[index]*gcaa*t91631*t91690*t91674* \
               t91875*7.2E1+ccaa1*gamma_aa[index]*gcaa*t91631*t91690*t91674*1.0/(t91869*t91869*t91869)*(1.28E2/9.0) \
               +ccaa3*gamma_aa[index]*gcaa*t91631*t91633*t91674*1.0/(t91874*t91874*t91874)*(t91887*t91887)*2.0-ccaa3* \
               gamma_aa[index]*gcaa*t91631*t91633*t91674*t91888*(gamma_aa[index]*gcaa*t91761*(8.8E1/3.0)+t91631*t91674* \
               t91693*(3.04E2/3.0)+gamma_aa[index]*gcaa*t91631*t91690*t91674*7.2E1)-ccaa3*gamma_aa[index]*gcaa*t91631* \
               t91674*t91696*t91887*t91888*1.6E1)-rho_a[index]*t91895*t91896*2.0;
        } else {
            v_rho_a_rho_a_[index] = 0.0;
        } 

        if (is_gga_) {

            //V_rho_a_gamma_aa
            if (rho_a[index] > cutoff_) {
                double t91918 = 1.0/pow(rho_a[index],8.0/3.0);
                double t91919 = gx*gx;
                double t91920 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t91921 = gamma_aa[index]*gamma_aa[index];
                double t91922 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t91923 = gamma_aa[index]*gx*t91918;
                double t91924 = t91923+1.0;
                double t91925 = gamma_aa[index]*gx*t91918*3.0;
                double t91926 = gamma_aa[index]*gx*t91921*t91922*t91919;
                double t91927 = t91920*t91921*t91919*3.0;
                double t91928 = t91925+t91926+t91927+1.0;
                double t91929 = gamma_aa[index]*gx*t91918*2.0;
                double t91930 = t91920*t91921*t91919;
                double t91931 = t91930+t91929+1.0;
                double t91932 = tau_a[index]*1.0E20;
                double t91933 = pow(rho_a[index],5.0/3.0);
                double t91938 = C_k*t91933;
                double t91934 = t91932-t91938;
                double t91935 = 0.0 ;
                double t91936 = pow(rho_a[index],2.0/3.0);
                double t91937 = 1.0/tau_a[index];
                double t91939 = ( (t91934 > 0.0) ?  1.0 : 0.0 ) ;
                double t91940 = C_k*t91935*t91936*(5.0E20/3.0);
                double t91941 = C_k*C_k;
                double t91942 = pow(rho_a[index],7.0/3.0);
                double t91943 = C_k*t91936*t91937*t91939*(5.0/3.0);
                double t91950 = t91941*t91942*t91935*t91937*(5.0/3.0);
                double t91944 = t91940-t91950+t91943;
                double t91945 = -t91932+t91938;
                double t91946 = ( (t91945 > 0.0) ?  1.0 : 0.0 ) ;
                double t91947 = t91946*1.0E20;
                double t91948 = C_k*t91933*t91937*t91939;
                double t91949 = t91947+t91948+1.0;
                double t91951 = t91947+t91948-1.0;
                double t91952 = t91951*t91951;
                double t91953 = t91952*t91952;
                double t91954 = 1.0/t91949;
                double t91955 = 1.0/(t91949*t91949*t91949);
                double t91956 = 1.0/(t91949*t91949*t91949*t91949*t91949);
                double t91957 = 1.0/t91924;
                double t91958 = 1.0/t91931;
                double t91959 = 1.0/t91928;
                double t91960 = 1.0/pow(rho_a[index],1.9E1/3.0);
                double t91961 = 1.0/(t91924*t91924);
                double t91962 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]*rho_a[index]);
                double t91963 = 1.0/pow(rho_a[index],1.1E1/3.0);
                double t91964 = 1.0/(t91928*t91928);
                double t91965 = 1.0/(t91931*t91931);
                double t91966 = gx*t91918*3.0;
                double t91967 = gamma_aa[index]*t91920*t91919*6.0;
                double t91968 = gx*t91921*t91922*t91919*3.0;
                double t91969 = t91966+t91967+t91968;
                double t91970 = gx*t91918*2.0;
                double t91971 = gamma_aa[index]*t91920*t91919*2.0;
                double t91972 = t91970+t91971;
                double t91973 = gamma_aa[index]*gx*t91963*(1.6E1/3.0);
                double t91974 = t91921*t91960*t91919*(1.6E1/3.0);
                double t91975 = t91973+t91974;
                double t91976 = gamma_aa[index]*gx*t91963*8.0;
                double t91977 = gamma_aa[index]*gx*t91921*t91962*t91919*8.0;
                double t91978 = t91921*t91960*t91919*1.6E1;
                double t91979 = t91976+t91977+t91978;
                double t91980 = 1.0/(t91924*t91924*t91924);
                double t91981 = gx*t91963*8.0;
                double t91982 = gamma_aa[index]*t91960*t91919*3.2E1;
                double t91983 = gx*t91921*t91962*t91919*2.4E1;
                double t91984 = t91981+t91982+t91983;
                double t91985 = gx*t91963*(1.6E1/3.0);
                double t91986 = gamma_aa[index]*t91960*t91919*(3.2E1/3.0);
                double t91987 = t91985+t91986;
                double t91988 = 1.0/(t91931*t91931*t91931);
                double t91989 = 1.0/(t91928*t91928*t91928);
                double t91990 = t91951*t91954;
                double t91991 = t91951*t91953*t91956;
                double t91992 = t91990+t91991-t91951*t91952*t91955*2.0;
                double t91993 = cxnl1*gx*t91918*t91957;
                double t91994 = cxnl2*gamma_aa[index]*t91920*t91919*t91958*2.0;
                double t91995 = cxnl3*gx*t91921*t91922*t91919*t91959*3.0;
                double t91996 = t91993+t91994+t91995-cxnl1*gamma_aa[index]*t91920*t91961*t91919-cxnl2*t91920*t91921* \
                   t91972*t91919*t91965-cxnl3*gamma_aa[index]*gx*t91921*t91922*t91919*t91964*t91969;
                double t91997 = 1.0/pow(rho_a[index],1.0/3.0);
                double t91998 = c*t91997;
                double t91999 = sqrt(t91998);
                double t92000 = pow(t91998,3.0/2.0);
                double t92001 = c*c;
                double t92002 = 1.0/pow(rho_a[index],2.0/3.0);
                double t92003 = 1.0/c0p;
                double t92004 = b1p*t91999;
                double t92005 = b3p*t92000;
                double t92006 = b4p*t92001*t92002;
                double t92007 = b2p*c*t91997;
                double t92008 = t92004+t92005+t92006+t92007;
                double t92009 = 1.0/t92008;
                double t92010 = t92003*t92009*(1.0/2.0);
                double t92011 = t92010+1.0;
                double t92012 = log(t92011);
                double t92013 = a1p*c*t91997;
                double t92014 = t92013+1.0;
                double t92015 = gcaa*gcaa;
                double t92016 = gamma_aa[index]*gcaa*t91918;
                double t92017 = t92016+1.0;
                double t92018 = gamma_aa[index]*gcaa*t91918*3.0;
                double t92019 = gamma_aa[index]*gcaa*t91921*t91922*t92015;
                double t92020 = t91920*t91921*t92015*3.0;
                double t92021 = t92020+t92018+t92019+1.0;
                double t92022 = gamma_aa[index]*gcaa*t91918*2.0;
                double t92023 = t91920*t91921*t92015;
                double t92024 = t92022+t92023+1.0;
                double t92025 = pow(2.0,1.0/3.0);
                double t92026 = t92025*2.0;
                double t92027 = t92026-2.0;
                double t92028 = two_13*2.0;
                double t92029 = t92028-2.0;
                double t92030 = 1.0/t92029;
                double t92031 = 1.0/c0f;
                double t92032 = b1f*t91999;
                double t92033 = b3f*t92000;
                double t92034 = b4f*t92001*t92002;
                double t92035 = b2f*c*t91997;
                double t92036 = t92032+t92033+t92034+t92035;
                double t92037 = 1.0/t92036;
                double t92038 = t92031*t92037*(1.0/2.0);
                double t92039 = t92038+1.0;
                double t92040 = log(t92039);
                double t92041 = a1f*c*t91997;
                double t92042 = t92041+1.0;
                double t92043 = c0f*t92040*t92042*2.0;
                double t92044 = c0p*t92012*t92014*2.0;
                double t92045 = rho_a[index]*2.0;
                double t92046 = 1.0/pow(t92045,1.0/3.0);
                double t92047 = c*t92046;
                double t92048 = gcab*gcab;
                double t92049 = gamma_aa[index]*gcab*t91918;
                double t92050 = t92049+1.0;
                double t92051 = gamma_aa[index]*gcab*t91918*3.0;
                double t92052 = gamma_aa[index]*gcab*t91921*t91922*t92048;
                double t92053 = t91920*t91921*t92048*3.0;
                double t92054 = t92051+t92052+t92053+1.0;
                double t92055 = gamma_aa[index]*gcab*t91918*2.0;
                double t92056 = t91920*t91921*t92048;
                double t92057 = t92055+t92056+1.0;
                double t92058 = 1.0/(t92054*t92054);
                double t92059 = 1.0/(t92057*t92057);
                double t92060 = gamma_aa[index]*gcab*t91963*(8.0/3.0);
                double t92061 = t91921*t91960*t92048*(8.0/3.0);
                double t92062 = t92060+t92061;
                double t92063 = gcab*t91918;
                double t92064 = gamma_aa[index]*t91920*t92048;
                double t92065 = t92063+t92064;
                double t92066 = gcab*t91918*(3.0/2.0);
                double t92067 = gamma_aa[index]*t91920*t92048*3.0;
                double t92068 = gcab*t91921*t91922*t92048*(3.0/2.0);
                double t92069 = t92066+t92067+t92068;
                double t92070 = gamma_aa[index]*gcab*t91963*4.0;
                double t92071 = gamma_aa[index]*gcab*t91921*t91962*t92048*4.0;
                double t92072 = t91921*t91960*t92048*8.0;
                double t92073 = t92070+t92071+t92072;
                double t92074 = sqrt(t92047);
                double t92075 = b1p*t92074;
                double t92076 = pow(t92047,3.0/2.0);
                double t92077 = b3p*t92076;
                double t92078 = b2p*c*t92046;
                double t92079 = 1.0/pow(t92045,2.0/3.0);
                double t92080 = b4p*t92001*t92079;
                double t92081 = t92080+t92075+t92077+t92078;
                double t92082 = 1.0/t92081;
                double t92083 = t92003*t92082*(1.0/2.0);
                double t92084 = t92083+1.0;
                double t92085 = a1p*c*t92046;
                double t92086 = t92085+1.0;
                double t92087 = 1.0/pow(t92045,4.0/3.0);
                double t92088 = log(t92084);
                double t92089 = 1.0/pow(rho_a[index],4.0/3.0);
                double t92090 = 1.0/pow(rho_a[index],5.0/3.0);
                double t92091 = 1.0/sqrt(t91998);
                double t92092 = 1.0/t92011;
                double t92093 = 1.0/(t92008*t92008);
                double t92094 = b4p*t92001*t92090*(2.0/3.0);
                double t92095 = b2p*c*t92089*(1.0/3.0);
                double t92096 = b1p*c*t92091*t92089*(1.0/6.0);
                double t92097 = b3p*c*t91999*t92089*(1.0/2.0);
                double t92098 = t92094+t92095+t92096+t92097;
                double t92099 = t92014*t92092*t92093*t92098;
                double t92100 = t92043-t92044;
                double t92101 = t92100*t92030*t92027;
                double t92102 = 1.0/t92050;
                double t92103 = 1.0/t92057;
                double t92104 = 1.0/t92054;
                double t92105 = 1.0/(t92050*t92050);
                double t92106 = t92101+t92044;
                double t92107 = rho_a[index]*t92106*2.0;
                double t92108 = t92107-c0p*rho_a[index]*t92086*t92088*4.0;
                double t92109 = 1.0/(t92050*t92050*t92050);
                double t92110 = ccab3*gcab*t91921*t91922*t92073*t92048*t92058*(3.0/2.0);
                double t92111 = ccab2*gamma_aa[index]*t91920*t92062*t92048*t92059;
                double t92112 = ccab3*gamma_aa[index]*gcab*t91921*t91962*t92048*t92058*t92069*4.0;
                double t92113 = gamma_aa[index]*t91960*t92048*4.0;
                double t92114 = ccab2*t91921*t91960*t92065*t92048*t92059*(8.0/3.0);
                double t92115 = 1.0/(t92057*t92057*t92057);
                double t92116 = 1.0/(t92054*t92054*t92054);
                double t92117 = 1.0/t92017;
                double t92118 = 1.0/t92024;
                double t92119 = 1.0/t92021;
                double t92120 = 1.0/(t92017*t92017);
                double t92121 = 1.0/(t92021*t92021);
                double t92122 = 1.0/(t92024*t92024);
                double t92123 = gcaa*t91918*3.0;
                double t92124 = gamma_aa[index]*t91920*t92015*6.0;
                double t92125 = gcaa*t91921*t91922*t92015*3.0;
                double t92126 = t92123+t92124+t92125;
                double t92127 = gcaa*t91918*2.0;
                double t92128 = gamma_aa[index]*t91920*t92015*2.0;
                double t92129 = t92127+t92128;
                double t92130 = gamma_aa[index]*gcaa*t91963*(1.6E1/3.0);
                double t92131 = t91921*t91960*t92015*(1.6E1/3.0);
                double t92132 = t92130+t92131;
                double t92133 = gamma_aa[index]*gcaa*t91963*8.0;
                double t92134 = gamma_aa[index]*gcaa*t91921*t91962*t92015*8.0;
                double t92135 = t91921*t91960*t92015*1.6E1;
                double t92136 = t92133+t92134+t92135;
                double t92137 = 1.0/t92039;
                double t92138 = 1.0/(t92036*t92036);
                double t92139 = b4f*t92001*t92090*(2.0/3.0);
                double t92140 = b2f*c*t92089*(1.0/3.0);
                double t92141 = b1f*c*t92091*t92089*(1.0/6.0);
                double t92142 = b3f*c*t91999*t92089*(1.0/2.0);
                double t92143 = t92140+t92141+t92142+t92139;
                double t92144 = a1f*c*c0f*t92040*t92089*(2.0/3.0);
                double t92145 = a1p*c*c0p*t92012*t92089*(2.0/3.0);
                double t92146 = ccaa1*gcaa*t91918*t92117;
                double t92147 = ccaa2*gamma_aa[index]*t91920*t92015*t92118*2.0;
                double t92148 = ccaa3*gcaa*t91921*t91922*t92015*t92119*3.0;
                double t92149 = t92146+t92147+t92148-ccaa1*gamma_aa[index]*t91920*t92120*t92015-ccaa2*t91920*t91921* \
                   t92122*t92015*t92129-ccaa3*gamma_aa[index]*gcaa*t91921*t91922*t92121*t92015*t92126;
                v_rho_a_gamma_aa_[index] = -(X-1.0)*(c0*pow(rho_a[index],1.0/3.0)*(t91992*t91996+cx1*gx*t91918*t91957- \
                   cx1*gamma_aa[index]*t91920*t91961*t91919+cx2*gamma_aa[index]*t91920*t91919*t91958*2.0-cx2*t91920*t91921* \
                   t91972*t91919*t91965+cx3*gx*t91921*t91922*t91919*t91959*3.0-cx3*gamma_aa[index]*gx*t91921*t91922*t91919* \
                   t91964*t91969)*(4.0/3.0)+c0*pow(rho_a[index],4.0/3.0)*(t91996*(t91944*t91954-t91951*t91944*1.0/(t91949* \
                   t91949)-t91952*t91944*t91955*6.0+t91944*t91953*t91956*5.0+t91951*t91952*t91944*1.0/(t91949*t91949* \
                   t91949*t91949)*6.0-t91951*t91944*t91953*1.0/(t91949*t91949*t91949*t91949*t91949*t91949)*5.0)+t91992* \
                   (cxnl1*gx*t91963*t91957*(-8.0/3.0)+cxnl1*gamma_aa[index]*t91960*t91961*t91919*8.0-cxnl2*gamma_aa[index]* \
                   t91960*t91919*t91958*(3.2E1/3.0)+cxnl2*t91921*t91960*t91972*t91919*t91965*(1.6E1/3.0)+cxnl2*t91920* \
                   t91921*t91919*t91965*t91987+cxnl2*gamma_aa[index]*t91920*t91919*t91965*t91975*2.0-cxnl1*gx*t91921* \
                   t91962*t91980*t91919*(1.6E1/3.0)-cxnl3*gx*t91921*t91962*t91919*t91959*2.4E1+cxnl3*gx*t91921*t91922* \
                   t91919*t91964*t91979*3.0-cxnl2*t91920*t91921*t91972*t91919*t91975*t91988*2.0+cxnl3*gamma_aa[index]* \
                   gx*t91921*t91922*t91919*t91964*t91984+cxnl3*gamma_aa[index]*gx*t91921*t91962*t91919*t91964*t91969* \
                   8.0-cxnl3*gamma_aa[index]*gx*t91921*t91922*t91919*t91969*t91979*t91989*2.0)-cx1*gx*t91963*t91957*(8.0/ \
                   3.0)+cx1*gamma_aa[index]*t91960*t91961*t91919*8.0-cx2*gamma_aa[index]*t91960*t91919*t91958*(3.2E1/ \
                   3.0)+cx2*t91921*t91960*t91972*t91919*t91965*(1.6E1/3.0)+cx2*t91920*t91921*t91919*t91965*t91987+cx2* \
                   gamma_aa[index]*t91920*t91919*t91965*t91975*2.0-cx1*gx*t91921*t91962*t91980*t91919*(1.6E1/3.0)-cx3* \
                   gx*t91921*t91962*t91919*t91959*2.4E1+cx3*gx*t91921*t91922*t91919*t91964*t91979*3.0-cx2*t91920*t91921* \
                   t91972*t91919*t91975*t91988*2.0+cx3*gamma_aa[index]*gx*t91921*t91922*t91919*t91964*t91984+cx3*gamma_aa[index]* \
                   gx*t91921*t91962*t91919*t91964*t91969*8.0-cx3*gamma_aa[index]*gx*t91921*t91922*t91919*t91969*t91979* \
                   t91989*2.0))+t92108*(t92110+t92111+t92112+t92114-ccab1*gcab*t91963*t92102*(4.0/3.0)-ccab2*gamma_aa[index]* \
                   t91960*t92103*t92048*4.0+ccab1*gamma_aa[index]*t91960*t92105*t92048*(8.0/3.0)+ccab2*t91920*t91921* \
                   t92048*t92059*(t92113+gcab*t91963*(8.0/3.0))-ccab3*gcab*t91921*t91962*t92104*t92048*8.0-ccab1*gcab* \
                   t91921*t91962*t92109*t92048*(4.0/3.0)-ccab2*t91920*t91921*t92115*t92062*t92065*t92048*2.0+ccab3*gamma_aa[index]* \
                   gcab*t91921*t91922*t92048*t92058*(gcab*t91963*4.0+gamma_aa[index]*t91960*t92048*1.2E1+gcab*t91921* \
                   t91962*t92048*8.0)-ccab3*gamma_aa[index]*gcab*t91921*t91922*t92116*t92073*t92048*t92069*2.0)-t92149* \
                   (t92044+t92030*t92027*(t92043-c0p*t92012*t92014*2.0))-(-t92101-t92044+rho_a[index]*((1.0/(t92081*t92081) \
                   *t92086*(b4p*t92001*1.0/pow(t92045,5.0/3.0)*(2.0/3.0)+b2p*c*t92087*(1.0/3.0)+b3p*c*t92074*t92087*(1.0/ \
                   2.0)+b1p*c*1.0/sqrt(t92047)*t92087*(1.0/6.0)))/t92084-a1p*c*c0p*t92087*t92088*(2.0/3.0))*2.0+rho_a[index]* \
                   (t92145-t92099+t92030*t92027*(t92144+t92099-t92042*t92143*t92137*t92138-a1p*c*c0p*t92012*t92089*(2.0/ \
                   3.0)))+c0p*t92086*t92088*2.0)*(ccab1*gcab*t91918*t92102*(1.0/2.0)+ccab2*gamma_aa[index]*t91920*t92103* \
                   t92048-ccab1*gamma_aa[index]*t91920*t92105*t92048*(1.0/2.0)-ccab2*t91920*t91921*t92065*t92048*t92059+ \
                   ccab3*gcab*t91921*t91922*t92104*t92048*(3.0/2.0)-ccab3*gamma_aa[index]*gcab*t91921*t91922*t92048*t92058* \
                   t92069)*2.0+t92108*(t92110+t92111+t92112+t92114-ccab2*gamma_aa[index]*t91960*t92103*t92048*(4.0/3.0) \
                   +ccab1*gamma_aa[index]*t91960*t92105*t92048*(4.0/3.0)+ccab2*gamma_aa[index]*1.0/pow(rho_a[index],3.5E1/ \
                   3.0)*t91921*(t92048*t92048)*t92059*(4.0/3.0)-ccab3*gcab*t91921*t91962*t92104*t92048*4.0-ccab1*gcab* \
                   t91921*t91962*t92109*t92048*(4.0/3.0)-ccab2*t91920*t91921*t92115*t92062*t92065*t92048*2.0+ccab3*gamma_aa[index]* \
                   gcab*t91921*t91922*t92048*t92058*(t92113+gcab*t91921*t91962*t92048*4.0)-ccab3*gamma_aa[index]*gcab* \
                   t91921*t91922*t92116*t92073*t92048*t92069*2.0)+rho_a[index]*t92149*(t92145-t92099+t92030*t92027*(t92144- \
                   t92145+t92099-t92042*t92143*t92137*t92138))-rho_a[index]*t92106*(ccaa1*gcaa*t91963*t92117*(-8.0/3.0) \
                   +ccaa1*gamma_aa[index]*t91960*t92120*t92015*8.0-ccaa2*gamma_aa[index]*t91960*t92015*t92118*(3.2E1/ \
                   3.0)+ccaa2*t91921*t91960*t92122*t92015*t92129*(1.6E1/3.0)-ccaa1*gcaa*t91921*t91962*t92015*1.0/(t92017* \
                   t92017*t92017)*(1.6E1/3.0)+ccaa2*t91920*t91921*t92122*t92015*(gcaa*t91963*(1.6E1/3.0)+gamma_aa[index]* \
                   t91960*t92015*(3.2E1/3.0))+ccaa2*gamma_aa[index]*t91920*t92122*t92015*t92132*2.0-ccaa3*gcaa*t91921* \
                   t91962*t92015*t92119*2.4E1+ccaa3*gcaa*t91921*t91922*t92121*t92015*t92136*3.0-ccaa2*t91920*t91921*t92015* \
                   1.0/(t92024*t92024*t92024)*t92132*t92129*2.0+ccaa3*gamma_aa[index]*gcaa*t91921*t91922*t92121*t92015* \
                   (gcaa*t91963*8.0+gamma_aa[index]*t91960*t92015*3.2E1+gcaa*t91921*t91962*t92015*2.4E1)+ccaa3*gamma_aa[index]* \
                   gcaa*t91921*t91962*t92121*t92015*t92126*8.0-ccaa3*gamma_aa[index]*gcaa*t91921*t91922*1.0/(t92021*t92021* \
                   t92021)*t92015*t92126*t92136*2.0);
            } else {
                v_rho_a_gamma_aa_[index] = 0.0;
            } 

            //V_gamma_aa_gamma_aa
            if (rho_a[index] > cutoff_) {
                double t92151 = 1.0/pow(rho_a[index],1.0/3.0);
                double t92152 = c*t92151;
                double t92153 = sqrt(t92152);
                double t92154 = pow(t92152,3.0/2.0);
                double t92155 = c*c;
                double t92156 = 1.0/pow(rho_a[index],2.0/3.0);
                double t92157 = 1.0/c0p;
                double t92158 = b1p*t92153;
                double t92159 = b3p*t92154;
                double t92160 = b4p*t92155*t92156;
                double t92161 = b2p*c*t92151;
                double t92162 = t92160+t92161+t92158+t92159;
                double t92163 = 1.0/t92162;
                double t92164 = t92163*t92157*(1.0/2.0);
                double t92165 = t92164+1.0;
                double t92166 = log(t92165);
                double t92167 = a1p*c*t92151;
                double t92168 = t92167+1.0;
                double t92169 = rho_a[index]*2.0;
                double t92170 = 1.0/pow(t92169,1.0/3.0);
                double t92171 = c*t92170;
                double t92172 = gcab*gcab;
                double t92173 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t92174 = 1.0/pow(rho_a[index],8.0/3.0);
                double t92175 = gamma_aa[index]*gcab*t92174;
                double t92176 = t92175+1.0;
                double t92177 = gamma_aa[index]*gamma_aa[index];
                double t92178 = gamma_aa[index]*gcab*t92174*2.0;
                double t92179 = t92172*t92173*t92177;
                double t92180 = t92178+t92179+1.0;
                double t92181 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t92182 = gamma_aa[index]*gcab*t92174*3.0;
                double t92183 = gamma_aa[index]*gcab*t92172*t92181*t92177;
                double t92184 = t92172*t92173*t92177*3.0;
                double t92185 = t92182+t92183+t92184+1.0;
                double t92188 = gcab*t92174;
                double t92189 = gamma_aa[index]*t92172*t92173;
                double t92186 = t92188+t92189;
                double t92187 = 1.0/(t92185*t92185);
                double t92190 = 1.0/(t92180*t92180);
                double t92191 = gcab*t92174*(3.0/2.0);
                double t92192 = gamma_aa[index]*t92172*t92173*3.0;
                double t92193 = gcab*t92172*t92181*t92177*(3.0/2.0);
                double t92194 = t92191+t92192+t92193;
                double t92195 = pow(2.0,1.0/3.0);
                double t92196 = t92195*2.0;
                double t92197 = t92196-2.0;
                double t92198 = two_13*2.0;
                double t92199 = t92198-2.0;
                double t92200 = 1.0/t92199;
                double t92201 = 1.0/c0f;
                double t92202 = b1f*t92153;
                double t92203 = b3f*t92154;
                double t92204 = b4f*t92155*t92156;
                double t92205 = b2f*c*t92151;
                double t92206 = t92202+t92203+t92204+t92205;
                double t92207 = 1.0/t92206;
                double t92208 = t92201*t92207*(1.0/2.0);
                double t92209 = t92208+1.0;
                double t92210 = log(t92209);
                double t92211 = a1f*c*t92151;
                double t92212 = t92211+1.0;
                double t92213 = c0f*t92210*t92212*2.0;
                double t92214 = c0p*t92166*t92168*2.0;
                double t92215 = gcaa*gcaa;
                double t92216 = gamma_aa[index]*gcaa*t92174;
                double t92217 = t92216+1.0;
                double t92218 = 1.0/pow(rho_a[index],3.2E1/3.0);
                double t92219 = gamma_aa[index]*gcaa*t92174*2.0;
                double t92220 = t92215*t92173*t92177;
                double t92221 = t92220+t92219+1.0;
                double t92222 = gamma_aa[index]*gcaa*t92174*3.0;
                double t92223 = gamma_aa[index]*gcaa*t92215*t92181*t92177;
                double t92224 = t92215*t92173*t92177*3.0;
                double t92225 = t92222+t92223+t92224+1.0;
                double t92228 = gcaa*t92174*2.0;
                double t92229 = gamma_aa[index]*t92215*t92173*2.0;
                double t92226 = t92228+t92229;
                double t92227 = 1.0/(t92225*t92225);
                double t92230 = 1.0/(t92221*t92221);
                double t92231 = gcaa*t92174*3.0;
                double t92232 = gamma_aa[index]*t92215*t92173*6.0;
                double t92233 = gcaa*t92215*t92181*t92177*3.0;
                double t92234 = t92231+t92232+t92233;
                double t92235 = pow(rho_a[index],5.0/3.0);
                double t92236 = C_k*t92235;
                double t92237 = tau_a[index]*1.0E20;
                double t92238 = 1.0/tau_a[index];
                double t92239 = -t92236+t92237;
                double t92240 = ( (t92239 > 0.0) ?  1.0 : 0.0 ) ;
                double t92241 = C_k*t92240*t92235*t92238;
                double t92242 = t92236-t92237;
                double t92243 = ( (t92242 > 0.0) ?  1.0 : 0.0 ) ;
                double t92244 = t92243*1.0E20;
                double t92245 = t92241+t92244-1.0;
                double t92246 = t92245*t92245;
                double t92247 = t92241+t92244+1.0;
                double t92248 = t92246*t92246;
                double t92249 = gx*gx;
                double t92250 = gamma_aa[index]*gx*t92174;
                double t92251 = t92250+1.0;
                double t92252 = gamma_aa[index]*gx*t92174*2.0;
                double t92253 = t92173*t92177*t92249;
                double t92254 = t92252+t92253+1.0;
                double t92255 = gamma_aa[index]*gx*t92174*3.0;
                double t92256 = gamma_aa[index]*gx*t92181*t92177*t92249;
                double t92257 = t92173*t92177*t92249*3.0;
                double t92258 = t92255+t92256+t92257+1.0;
                double t92261 = gx*t92174*2.0;
                double t92262 = gamma_aa[index]*t92173*t92249*2.0;
                double t92259 = t92261+t92262;
                double t92260 = 1.0/(t92258*t92258);
                double t92263 = 1.0/(t92254*t92254);
                double t92264 = gx*t92174*3.0;
                double t92265 = gamma_aa[index]*t92173*t92249*6.0;
                double t92266 = gx*t92181*t92177*t92249*3.0;
                double t92267 = t92264+t92265+t92266;
                double t92268 = 1.0/(t92251*t92251);
                double t92269 = 1.0/t92254;
                double t92270 = 1.0/t92258;
                double t92271 = 1.0/(t92251*t92251*t92251);
                double t92272 = t92249*t92249;
                double t92273 = t92173*t92249*6.0;
                double t92274 = gamma_aa[index]*gx*t92181*t92249*6.0;
                double t92275 = t92273+t92274;
                double t92276 = t92259*t92259;
                double t92277 = 1.0/(t92254*t92254*t92254);
                double t92278 = t92267*t92267;
                double t92279 = 1.0/(t92258*t92258*t92258);
                v_gamma_aa_gamma_aa_[index] = (rho_a[index]*(t92214+t92200*t92197*(t92213-c0p*t92166*t92168*2.0)) \
                   *2.0-c0p*rho_a[index]*log((t92157*(1.0/2.0))/(b1p*sqrt(t92171)+b3p*pow(t92171,3.0/2.0)+b4p*t92155* \
                   1.0/pow(t92169,2.0/3.0)+b2p*c*t92170)+1.0)*(a1p*c*t92170+1.0)*4.0)*((ccab2*t92172*t92173*(1.0/2.0) \
                   )/t92180-ccab1*t92172*t92173*1.0/(t92176*t92176)*(1.0/2.0)-ccab2*(t92172*t92172)*t92190*t92218*t92177* \
                   (1.0/2.0)+ccab1*gamma_aa[index]*gcab*t92172*t92181*1.0/(t92176*t92176*t92176)*(1.0/2.0)+(ccab3*gamma_aa[index]* \
                   gcab*t92172*t92181*(3.0/2.0))/t92185+ccab2*1.0/(t92180*t92180*t92180)*t92172*t92173*t92177*(t92186* \
                   t92186)*2.0-ccab2*gamma_aa[index]*t92172*t92190*t92173*t92186*2.0-ccab3*gcab*t92172*t92181*t92194* \
                   t92177*t92187*3.0-ccab3*gamma_aa[index]*gcab*t92172*t92181*t92177*t92187*(t92172*t92173*(3.0/2.0)+ \
                   gamma_aa[index]*gcab*t92172*t92181*(3.0/2.0))+ccab3*gamma_aa[index]*gcab*t92172*t92181*1.0/(t92185* \
                   t92185*t92185)*(t92194*t92194)*t92177*2.0)*4.0-rho_a[index]*(t92214+t92200*t92197*(t92213-t92214)) \
                   *((ccaa2*t92215*t92173*2.0)/t92221-ccaa1*t92215*1.0/(t92217*t92217)*t92173*2.0-ccaa2*t92230*(t92215* \
                   t92215)*t92218*t92177*2.0+(ccaa3*gamma_aa[index]*gcaa*t92215*t92181*6.0)/t92225+ccaa1*gamma_aa[index]* \
                   gcaa*t92215*t92181*1.0/(t92217*t92217*t92217)*2.0+ccaa2*1.0/(t92221*t92221*t92221)*t92215*(t92226* \
                   t92226)*t92173*t92177*2.0-ccaa2*gamma_aa[index]*t92230*t92215*t92226*t92173*4.0-ccaa3*gcaa*t92215* \
                   t92234*t92181*t92227*t92177*6.0-ccaa3*gamma_aa[index]*gcaa*t92215*t92181*t92227*t92177*(t92215*t92173* \
                   6.0+gamma_aa[index]*gcaa*t92215*t92181*6.0)+ccaa3*gamma_aa[index]*gcaa*t92215*1.0/(t92225*t92225*t92225) \
                   *(t92234*t92234)*t92181*t92177*2.0)*2.0+c0*pow(rho_a[index],4.0/3.0)*(X-1.0)*(((t92241+ ( (t92236- \
                   tau_a[index]*1.0E20 > 0.0) ? 1.0*1.0E20 : 0.0 ) -1.0)/t92247-t92245*t92246*1.0/(t92247*t92247*t92247) \
                   *2.0+t92245*1.0/(t92247*t92247*t92247*t92247*t92247)*t92248)*(cxnl1*t92173*t92249*t92268*2.0-cxnl2* \
                   t92173*t92249*t92269*2.0+cxnl2*t92218*t92263*t92272*t92177*2.0-cxnl2*t92173*t92177*t92249*t92276*t92277* \
                   2.0-cxnl1*gamma_aa[index]*gx*t92181*t92271*t92249*2.0-cxnl3*gamma_aa[index]*gx*t92270*t92181*t92249* \
                   6.0+cxnl2*gamma_aa[index]*t92173*t92263*t92249*t92259*4.0+cxnl3*gx*t92260*t92181*t92177*t92249*t92267* \
                   6.0+cxnl3*gamma_aa[index]*gx*t92260*t92181*t92275*t92177*t92249-cxnl3*gamma_aa[index]*gx*t92181*t92177* \
                   t92249*t92278*t92279*2.0)+cx1*t92173*t92249*t92268*2.0-cx2*t92173*t92249*t92269*2.0+cx2*t92218*t92263* \
                   t92272*t92177*2.0-cx2*t92173*t92177*t92249*t92276*t92277*2.0-cx1*gamma_aa[index]*gx*t92181*t92271* \
                   t92249*2.0-cx3*gamma_aa[index]*gx*t92270*t92181*t92249*6.0+cx2*gamma_aa[index]*t92173*t92263*t92249* \
                   t92259*4.0+cx3*gx*t92260*t92181*t92177*t92249*t92267*6.0+cx3*gamma_aa[index]*gx*t92260*t92181*t92275* \
                   t92177*t92249-cx3*gamma_aa[index]*gx*t92181*t92177*t92249*t92278*t92279*2.0)*2.0;
            } else {
                v_gamma_aa_gamma_aa_[index] = 0.0;
            } 

        }
        if (is_meta_) {

            //V_rho_a_tau_a
            if (rho_a[index] > cutoff_) {
                double t92281 = 1.0/pow(rho_a[index],8.0/3.0);
                double t92282 = gamma_aa[index]*gamma_aa[index];
                double t92283 = gx*gx;
                double t92284 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t92285 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t92286 = pow(rho_a[index],5.0/3.0);
                double t92287 = C_k*t92286;
                double t92288 = tau_a[index]*1.0E20;
                double t92289 = -t92287+t92288;
                double t92290 = 1.0/tau_a[index];
                double t92291 = 0.0 ;
                double t92292 = C_k*C_k;
                double t92293 = pow(rho_a[index],7.0/3.0);
                double t92294 = pow(rho_a[index],2.0/3.0);
                double t92295 = 0.0 ;
                double t92296 = 1.0/(tau_a[index]*tau_a[index]);
                double t92297 = ( (t92289 > 0.0) ?  1.0 : 0.0 ) ;
                double t92298 = C_k*t92290*t92286*t92297;
                double t92299 = t92287-t92288;
                double t92300 = ( (t92299 > 0.0) ?  1.0 : 0.0 ) ;
                double t92301 = t92300*1.0E20;
                double t92302 = t92301+t92298+1.0;
                double t92303 = 1.0/(t92302*t92302);
                double t92304 = C_k*t92291*t92294*(5.0E40/3.0);
                double t92305 = t92292*t92293*t92295*t92296*(5.0/3.0);
                double t92306 = C_k*t92290*t92294*t92295*(5.0E20/3.0);
                double t92309 = t92290*t92291*t92292*t92293*(5.0E20/3.0);
                double t92310 = C_k*t92294*t92296*t92297*(5.0/3.0);
                double t92307 = -t92310+t92304+t92305+t92306-t92309;
                double t92308 = t92301+t92298-1.0;
                double t92311 = t92308*t92308;
                double t92312 = t92311*t92311;
                double t92313 = t92295*1.0E40;
                double t92314 = C_k*t92286*t92296*t92297;
                double t92320 = C_k*t92290*t92286*t92295*1.0E20;
                double t92315 = -t92320+t92313+t92314;
                double t92316 = C_k*t92294*t92295*(5.0E20/3.0);
                double t92317 = C_k*t92290*t92294*t92297*(5.0/3.0);
                double t92321 = t92290*t92292*t92293*t92295*(5.0/3.0);
                double t92318 = -t92321+t92316+t92317;
                double t92319 = 1.0/(t92302*t92302*t92302);
                double t92322 = 1.0/(t92302*t92302*t92302*t92302);
                double t92323 = 1.0/(t92302*t92302*t92302*t92302*t92302);
                double t92324 = 1.0/(t92302*t92302*t92302*t92302*t92302*t92302);
                double t92325 = gamma_aa[index]*gx*t92281;
                double t92326 = t92325+1.0;
                double t92327 = 1.0/t92326;
                double t92328 = gamma_aa[index]*gx*t92281*3.0;
                double t92329 = gamma_aa[index]*gx*t92282*t92283*t92284;
                double t92330 = t92282*t92283*t92285*3.0;
                double t92331 = t92330+t92328+t92329+1.0;
                double t92332 = 1.0/t92331;
                double t92333 = gamma_aa[index]*gx*t92281*2.0;
                double t92334 = t92282*t92283*t92285;
                double t92335 = t92333+t92334+1.0;
                double t92336 = 1.0/t92335;
                double t92337 = 1.0/pow(rho_a[index],1.9E1/3.0);
                double t92338 = 1.0/pow(rho_a[index],1.1E1/3.0);
                double t92339 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]*rho_a[index]);
                double t92340 = cxnl1*gamma_aa[index]*gx*t92281*t92327;
                double t92341 = cxnl3*gamma_aa[index]*gx*t92332*t92282*t92283*t92284;
                double t92342 = cxnl2*t92282*t92336*t92283*t92285;
                double t92343 = cxnl0+t92340+t92341+t92342;
                double t92344 = 1.0/t92302;
                double t92345 = t92315*t92344;
                double t92346 = t92311*t92322*t92315*t92308*6.0;
                double t92347 = t92312*t92323*t92315*5.0;
                double t92348 = t92345+t92346+t92347-t92303*t92315*t92308-t92311*t92315*t92319*6.0-t92312*t92315* \
                   t92324*t92308*5.0;
                v_rho_a_tau_a_[index] = -(c0*pow(rho_a[index],4.0/3.0)*(t92343*(t92307*t92344+t92312*t92323*t92307* \
                   5.0+t92303*t92315*t92318*2.0-t92303*t92307*t92308-t92311*t92307*t92319*6.0-t92311*t92322*t92315*t92318* \
                   3.6E1+t92311*t92322*t92307*t92308*6.0+t92312*t92315*t92324*t92318*5.0E1-t92312*t92324*t92307*t92308* \
                   5.0+t92315*t92308*t92318*t92319*1.0E1-1.0/(t92302*t92302*t92302*t92302*t92302*t92302*t92302)*t92312* \
                   t92315*t92308*t92318*3.0E1+t92311*t92323*t92315*t92308*t92318*4.0)+t92348*(cxnl1*gamma_aa[index]*gx* \
                   t92327*t92338*(8.0/3.0)+cxnl2*t92282*t92336*t92283*t92337*(1.6E1/3.0)-cxnl1*1.0/(t92326*t92326)*t92282* \
                   t92283*t92337*(8.0/3.0)-cxnl2*1.0/(t92335*t92335)*t92282*t92283*t92285*(gamma_aa[index]*gx*t92338* \
                   (1.6E1/3.0)+t92282*t92283*t92337*(1.6E1/3.0))+cxnl3*gamma_aa[index]*gx*t92332*t92282*t92283*t92339* \
                   8.0-cxnl3*gamma_aa[index]*gx*1.0/(t92331*t92331)*t92282*t92283*t92284*(gamma_aa[index]*gx*t92338*8.0+ \
                   t92282*t92283*t92337*1.6E1+gamma_aa[index]*gx*t92282*t92283*t92339*8.0)))-c0*pow(rho_a[index],1.0/ \
                   3.0)*t92343*t92348*(4.0/3.0))*(X-1.0);
            } else {
                v_rho_a_tau_a_[index] = 0.0;
            } 

            //V_tau_a_tau_a
            if (rho_a[index] > cutoff_) {
                double t92350 = 1.0/pow(rho_a[index],8.0/3.0);
                double t92351 = gamma_aa[index]*gamma_aa[index];
                double t92352 = gx*gx;
                double t92353 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t92354 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t92355 = tau_a[index]*1.0E20;
                double t92356 = pow(rho_a[index],5.0/3.0);
                double t92357 = C_k*t92356;
                double t92358 = t92355-t92357;
                double t92359 = 0.0 ;
                double t92360 = -t92355+t92357;
                double t92361 = ( (t92360 > 0.0) ?  1.0 : 0.0 ) ;
                double t92362 = t92361*1.0E20;
                double t92363 = 1.0/tau_a[index];
                double t92364 = ( (t92358 > 0.0) ?  1.0 : 0.0 ) ;
                double t92365 = C_k*t92363*t92364*t92356;
                double t92366 = t92362+t92365+1.0;
                double t92367 = t92359*t92359;
                double t92368 = t92362+t92365-1.0;
                double t92369 = 1.0/(t92366*t92366*t92366);
                double t92370 = 0.0 ;
                double t92371 = t92368*t92368;
                double t92372 = t92371*t92371;
                double t92373 = 1.0/(t92366*t92366*t92366*t92366);
                double t92374 = 1.0/(t92366*t92366*t92366*t92366*t92366);
                double t92375 = 1.0/(t92366*t92366*t92366*t92366*t92366*t92366);
                double t92376 = 1.0/(t92366*t92366);
                double t92377 = pow(rho_a[index],4.0/3.0);
                double t92378 = gamma_aa[index]*gx*t92350;
                double t92379 = t92378+1.0;
                double t92380 = 1.0/t92379;
                double t92381 = cxnl1*gamma_aa[index]*gx*t92350*t92380;
                double t92382 = gamma_aa[index]*gx*t92350*3.0;
                double t92383 = gamma_aa[index]*gx*t92351*t92352*t92353;
                double t92384 = t92351*t92352*t92354*3.0;
                double t92385 = t92382+t92383+t92384+1.0;
                double t92386 = 1.0/t92385;
                double t92387 = cxnl3*gamma_aa[index]*gx*t92351*t92352*t92353*t92386;
                double t92388 = gamma_aa[index]*gx*t92350*2.0;
                double t92389 = t92351*t92352*t92354;
                double t92390 = t92388+t92389+1.0;
                double t92391 = 1.0/t92390;
                double t92392 = cxnl2*t92351*t92352*t92354*t92391;
                double t92393 = cxnl0+t92381+t92392+t92387;
                double t92394 = 1.0/t92366;
                double t92395 = 1.0/(tau_a[index]*tau_a[index]);
                double t92397 = t92359*1.0E40;
                double t92398 = C_k*t92363*t92356*t92359*1.0E20;
                double t92399 = C_k*t92364*t92356*t92395;
                double t92396 = t92397-t92398+t92399;
                double t92400 = t92396*t92396;
                double t92401 = 1.0/(t92366*t92366*t92366*t92366*t92366*t92366*t92366);
                double t92402 = t92370*1.0E60;
                double t92403 = C_k*t92356*t92359*t92395*2.0E20;
                double t92404 = 1.0/(tau_a[index]*tau_a[index]*tau_a[index]);
                double t92406 = C_k*t92370*t92363*t92356*1.0E40;
                double t92407 = C_k*t92404*t92364*t92356*2.0;
                double t92405 = t92402+t92403-t92406-t92407;
                double t92408 = X-1.0;
                double t92409 = t92398-t92399;
                v_tau_a_tau_a_[index] = t92408*(c0*t92393*t92377*( 0.0 +t92367*t92376*2.0E80+t92370*t92372*t92374* \
                   5.0E60-t92370*t92371*t92369*6.0E60-t92371*t92373*t92367*3.6E81-t92370*t92376*t92368*1.0E60+t92372* \
                   t92375*t92367*5.0E81+t92367*t92368*t92369*1.0E81-t92401*t92372*t92367*t92368*3.0E81+t92370*t92371* \
                   t92373*t92368*6.0E60-t92370*t92372*t92375*t92368*5.0E60+t92371*t92374*t92367*t92368*4.0E80)+c0*t92393* \
                   t92377*(t92400*t92376*2.0+t92405*t92394-t92400*t92371*t92373*3.6E1+t92400*t92372*t92375*5.0E1+t92405* \
                   t92372*t92374*5.0-t92405*t92371*t92369*6.0+t92400*t92368*t92369*1.0E1-t92405*t92376*t92368-t92400* \
                   t92401*t92372*t92368*3.0E1+t92400*t92371*t92374*t92368*4.0+t92405*t92371*t92373*t92368*6.0-t92405* \
                   t92372*t92375*t92368*5.0))-c0*t92408*t92393*t92377*(t92409*t92376*t92359*2.0E40-t92371*t92373*t92409* \
                   t92359*3.6E41+t92372*t92409*t92375*t92359*5.0E41+t92409*t92359*t92368*t92369*1.0E41-t92401*t92372* \
                   t92409*t92359*t92368*3.0E41+t92371*t92409*t92374*t92359*t92368*4.0E40);
            } else {
                v_tau_a_tau_a_[index] = 0.0;
            } 

            if (is_gga_) {

                //V_gamma_aa_tau_a
                if (rho_a[index] > cutoff_) {
                    double t92411 = tau_a[index]*1.0E20;
                    double t92412 = pow(rho_a[index],5.0/3.0);
                    double t92413 = C_k*t92412;
                    double t92414 = t92411-t92413;
                    double t92415 = -t92411+t92413;
                    double t92416 = ( (t92415 > 0.0) ?  1.0 : 0.0 ) ;
                    double t92417 = t92416*1.0E20;
                    double t92418 = 1.0/tau_a[index];
                    double t92419 = ( (t92414 > 0.0) ?  1.0 : 0.0 ) ;
                    double t92420 = C_k*t92412*t92418*t92419;
                    double t92421 = t92420+t92417-1.0;
                    double t92422 = t92420+t92417+1.0;
                    double t92423 = 0.0 ;
                    double t92424 = t92421*t92421;
                    double t92425 = t92424*t92424;
                    double t92426 = 1.0/pow(rho_a[index],8.0/3.0);
                    double t92427 = gx*gx;
                    double t92428 = 1.0/pow(rho_a[index],1.6E1/3.0);
                    double t92429 = gamma_aa[index]*gamma_aa[index];
                    double t92430 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                       rho_a[index]*rho_a[index]);
                    double t92431 = gamma_aa[index]*gx*t92426;
                    double t92432 = t92431+1.0;
                    double t92433 = gamma_aa[index]*gx*t92426*3.0;
                    double t92434 = gamma_aa[index]*gx*t92430*t92427*t92429;
                    double t92435 = t92427*t92428*t92429*3.0;
                    double t92436 = t92433+t92434+t92435+1.0;
                    double t92437 = gamma_aa[index]*gx*t92426*2.0;
                    double t92438 = t92427*t92428*t92429;
                    double t92439 = t92437+t92438+1.0;
                    double t92440 = pow(rho_a[index],4.0/3.0);
                    double t92441 = X-1.0;
                    double t92442 = 1.0/t92432;
                    double t92443 = cxnl1*gx*t92442*t92426;
                    double t92444 = 1.0/t92439;
                    double t92445 = cxnl2*gamma_aa[index]*t92444*t92427*t92428*2.0;
                    double t92446 = 1.0/t92436;
                    double t92447 = cxnl3*gx*t92430*t92427*t92446*t92429*3.0;
                    double t92448 = 1.0/(t92432*t92432);
                    double t92449 = gx*t92426*3.0;
                    double t92450 = gamma_aa[index]*t92427*t92428*6.0;
                    double t92451 = gx*t92430*t92427*t92429*3.0;
                    double t92452 = t92450+t92451+t92449;
                    double t92453 = 1.0/(t92436*t92436);
                    double t92454 = gx*t92426*2.0;
                    double t92455 = gamma_aa[index]*t92427*t92428*2.0;
                    double t92456 = t92454+t92455;
                    double t92457 = 1.0/(t92439*t92439);
                    double t92458 = t92443+t92445+t92447-cxnl1*gamma_aa[index]*t92427*t92428*t92448-cxnl2*t92427*t92428* \
                       t92429*t92456*t92457-cxnl3*gamma_aa[index]*gx*t92430*t92452*t92453*t92427*t92429;
                    double t92459 = 1.0/t92422;
                    double t92460 = t92423*1.0E40;
                    double t92461 = 1.0/(tau_a[index]*tau_a[index]);
                    double t92462 = C_k*t92412*t92461*t92419;
                    double t92465 = C_k*t92412*t92423*t92418*1.0E20;
                    double t92463 = t92460+t92462-t92465;
                    double t92464 = 1.0/(t92422*t92422);
                    double t92466 = 1.0/(t92422*t92422*t92422);
                    double t92467 = 1.0/(t92422*t92422*t92422*t92422);
                    double t92468 = 1.0/(t92422*t92422*t92422*t92422*t92422);
                    double t92469 = 1.0/(t92422*t92422*t92422*t92422*t92422*t92422);
                    v_gamma_aa_tau_a_[index] = c0*t92440*t92441*t92458*( 0.0 -t92421*t92423*t92464*1.0E40-t92423*t92424* \
                       t92466*6.0E40+t92423*t92425*t92468*5.0E40+t92421*t92423*t92424*t92467*6.0E40-t92421*t92423*t92425* \
                       t92469*5.0E40)+c0*t92440*t92441*t92458*(t92463*t92459-t92421*t92463*t92464-t92424*t92463*t92466*6.0+ \
                       t92425*t92463*t92468*5.0+t92421*t92424*t92463*t92467*6.0-t92421*t92425*t92463*t92469*5.0);
                } else {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } 

            }
        }
    }
}
void TauHCTH_Functional::computeUKSFunctional(boost::shared_ptr<UKSFunctions> prop)
{
    int ntrue = prop->npoints();

    const double* restrict rho_a;
    const double* restrict rho_b;
    const double* restrict gamma_aa;
    const double* restrict gamma_ab;
    const double* restrict gamma_bb;
    const double* restrict tau_a;
    const double* restrict tau_b;

    rho_a = prop->property_value("RHO_A")->pointer();
    rho_b = prop->property_value("RHO_B")->pointer();
    if (is_gga_) {
        gamma_aa = prop->property_value("GAMMA_AA")->pointer();
        gamma_ab = prop->property_value("GAMMA_AB")->pointer();
        gamma_bb = prop->property_value("GAMMA_BB")->pointer();
    }
    if (is_meta_) {
        tau_a = prop->property_value("TAU_A")->pointer();
        tau_b = prop->property_value("TAU_B")->pointer();
    }

    double X = params_[0].second;
    double C_k = params_[1].second;
    double c0 = params_[2].second;
    double two_13 = params_[3].second;
    double d2fz0 = params_[4].second;
    double c = params_[5].second;
    double Aa = params_[6].second;
    double a1a = params_[7].second;
    double b1a = params_[8].second;
    double b2a = params_[9].second;
    double b3a = params_[10].second;
    double b4a = params_[11].second;
    double c0p = params_[12].second;
    double a1p = params_[13].second;
    double b1p = params_[14].second;
    double b2p = params_[15].second;
    double b3p = params_[16].second;
    double b4p = params_[17].second;
    double c0f = params_[18].second;
    double a1f = params_[19].second;
    double b1f = params_[20].second;
    double b2f = params_[21].second;
    double b3f = params_[22].second;
    double b4f = params_[23].second;
    double gcab = params_[24].second;
    double gcaa = params_[25].second;
    double gx = params_[26].second;
    double ccab0 = params_[27].second;
    double ccab1 = params_[28].second;
    double ccab2 = params_[29].second;
    double ccab3 = params_[30].second;
    double ccaa0 = params_[31].second;
    double ccaa1 = params_[32].second;
    double ccaa2 = params_[33].second;
    double ccaa3 = params_[34].second;
    double cx0 = params_[35].second;
    double cx1 = params_[36].second;
    double cx2 = params_[37].second;
    double cx3 = params_[38].second;
    double cxnl0 = params_[39].second;
    double cxnl1 = params_[40].second;
    double cxnl2 = params_[41].second;
    double cxnl3 = params_[42].second;

    //Functional
    for (int index = 0; index < ntrue; index++) {

        //Functional Value
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t85168 = pow(rho_a[index],5.0/3.0);
            double t85169 = C_k*t85168;
            double t85170 = tau_a[index]*1.0E20;
            double t85171 = 1.0/tau_a[index];
            double t85172 = t85170-t85169;
            double t85173 = ( (t85172 > 0.0) ?  1.0 : 0.0 ) ;
            double t85174 = C_k*t85171*t85173*t85168;
            double t85175 = -t85170+t85169;
            double t85176 = ( (t85175 > 0.0) ?  1.0 : 0.0 ) ;
            double t85177 = t85176*1.0E20;
            double t85178 = t85174+t85177-1.0;
            double t85179 = t85178*t85178;
            double t85180 = t85174+t85177+1.0;
            double t85181 = t85179*t85179;
            double t85182 = 1.0/pow(rho_a[index],8.0/3.0);
            double t85183 = gamma_aa[index]*gamma_aa[index];
            double t85184 = gx*gx;
            double t85185 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]);
            double t85186 = 1.0/pow(rho_a[index],1.6E1/3.0);
            double t85187 = gamma_aa[index]*gx*t85182;
            double t85188 = t85187+1.0;
            double t85189 = 1.0/t85188;
            double t85190 = gamma_aa[index]*gx*t85182*3.0;
            double t85191 = gamma_aa[index]*gx*t85183*t85184*t85185;
            double t85192 = t85183*t85184*t85186*3.0;
            double t85193 = t85190+t85191+t85192+1.0;
            double t85194 = 1.0/t85193;
            double t85195 = gamma_aa[index]*gx*t85182*2.0;
            double t85196 = t85183*t85184*t85186;
            double t85197 = t85195+t85196+1.0;
            double t85198 = 1.0/t85197;
            double t85199 = pow(rho_b[index],5.0/3.0);
            double t85200 = C_k*t85199;
            double t85201 = t85200-t85170;
            double t85202 = ( (t85201 > 0.0) ?  1.0 : 0.0 ) ;
            double t85203 = t85202*1.0E20;
            double t85204 = 1.0/tau_b[index];
            double t85205 = tau_b[index]*1.0E20;
            double t85206 = -t85200+t85205;
            double t85207 = ( (t85206 > 0.0) ?  1.0 : 0.0 ) ;
            double t85208 = C_k*t85204*t85207*t85199;
            double t85209 = t85203+t85208-1.0;
            double t85210 = t85209*t85209;
            double t85211 = t85203+t85208+1.0;
            double t85212 = t85210*t85210;
            double t85213 = 1.0/pow(rho_b[index],8.0/3.0);
            double t85214 = gamma_bb[index]*gamma_bb[index];
            double t85215 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
               rho_b[index]*rho_b[index]);
            double t85216 = 1.0/pow(rho_b[index],1.6E1/3.0);
            double t85217 = gamma_bb[index]*gx*t85213;
            double t85218 = t85217+1.0;
            double t85219 = 1.0/t85218;
            double t85220 = gamma_bb[index]*gx*t85213*3.0;
            double t85221 = gamma_bb[index]*gx*t85214*t85215*t85184;
            double t85222 = t85214*t85216*t85184*3.0;
            double t85223 = t85220+t85221+t85222+1.0;
            double t85224 = 1.0/t85223;
            double t85225 = gamma_bb[index]*gx*t85213*2.0;
            double t85226 = t85214*t85216*t85184;
            double t85227 = t85225+t85226+1.0;
            double t85228 = 1.0/t85227;
            double t85229 = 1.0/pow(rho_a[index],1.0/3.0);
            double t85230 = c*t85229;
            double t85231 = sqrt(t85230);
            double t85232 = pow(t85230,3.0/2.0);
            double t85233 = c*c;
            double t85234 = 1.0/pow(rho_a[index],2.0/3.0);
            double t85235 = 1.0/c0p;
            double t85236 = b1p*t85231;
            double t85237 = b3p*t85232;
            double t85238 = b4p*t85233*t85234;
            double t85239 = b2p*c*t85229;
            double t85240 = t85236+t85237+t85238+t85239;
            double t85241 = 1.0/t85240;
            double t85242 = t85241*t85235*(1.0/2.0);
            double t85243 = t85242+1.0;
            double t85244 = log(t85243);
            double t85245 = a1p*c*t85229;
            double t85246 = t85245+1.0;
            double t85247 = pow(2.0,1.0/3.0);
            double t85248 = t85247*2.0;
            double t85249 = t85248-2.0;
            double t85250 = two_13*2.0;
            double t85251 = t85250-2.0;
            double t85252 = 1.0/t85251;
            double t85253 = 1.0/c0f;
            double t85254 = 1.0/pow(rho_b[index],1.0/3.0);
            double t85255 = c*t85254;
            double t85256 = sqrt(t85255);
            double t85257 = pow(t85255,3.0/2.0);
            double t85258 = 1.0/pow(rho_b[index],2.0/3.0);
            double t85259 = b1p*t85256;
            double t85260 = b3p*t85257;
            double t85261 = b4p*t85233*t85258;
            double t85262 = b2p*c*t85254;
            double t85263 = t85260+t85261+t85262+t85259;
            double t85264 = 1.0/t85263;
            double t85265 = t85235*t85264*(1.0/2.0);
            double t85266 = t85265+1.0;
            double t85267 = log(t85266);
            double t85268 = a1p*c*t85254;
            double t85269 = t85268+1.0;
            double t85270 = c0p*t85267*t85269*2.0;
            double t85271 = rho_a[index]+rho_b[index];
            double t85272 = 1.0/pow(t85271,1.0/3.0);
            double t85273 = c*t85272;
            double t85274 = sqrt(t85273);
            double t85275 = pow(t85273,3.0/2.0);
            double t85276 = 1.0/pow(t85271,2.0/3.0);
            double t85277 = b1p*t85274;
            double t85278 = b3p*t85275;
            double t85279 = b4p*t85233*t85276;
            double t85280 = b2p*c*t85272;
            double t85281 = t85280+t85277+t85278+t85279;
            double t85282 = 1.0/t85281;
            double t85283 = t85235*t85282*(1.0/2.0);
            double t85284 = t85283+1.0;
            double t85285 = log(t85284);
            double t85286 = a1p*c*t85272;
            double t85287 = t85286+1.0;
            double t85288 = c0p*t85285*t85287*2.0;
            double t85289 = rho_a[index]-rho_b[index];
            double t85290 = t85289*t85289;
            double t85291 = 1.0/t85271;
            double t85292 = t85291*t85289;
            double t85293 = 1.0/(t85271*t85271*t85271*t85271);
            double t85294 = t85290*t85290;
            double t85295 = t85292+1.0;
            double t85296 = pow(t85295,4.0/3.0);
            double t85297 = -t85292+1.0;
            double t85298 = pow(t85297,4.0/3.0);
            double t85299 = t85296+t85298-2.0;
            double t85302 = gamma_aa[index]*t85182*(1.0/2.0);
            double t85303 = gamma_bb[index]*t85213*(1.0/2.0);
            double t85300 = t85302+t85303;
            double t85301 = gcab*gcab;
            double t85304 = t85300*t85300;
            double t85305 = c0p*t85244*t85246*2.0;
            double t85306 = b1f*t85231;
            double t85307 = b3f*t85232;
            double t85308 = b4f*t85233*t85234;
            double t85309 = b2f*c*t85229;
            double t85310 = t85306+t85307+t85308+t85309;
            double t85311 = 1.0/t85310;
            double t85312 = t85311*t85253*(1.0/2.0);
            double t85313 = t85312+1.0;
            double t85314 = log(t85313);
            double t85315 = a1f*c*t85229;
            double t85316 = t85315+1.0;
            double t85317 = t85305-c0f*t85314*t85316*2.0;
            double t85318 = t85305-t85252*t85317*t85249;
            double t85319 = gcaa*gcaa;
            double t85320 = b1f*t85256;
            double t85321 = b3f*t85257;
            double t85322 = b4f*t85233*t85258;
            double t85323 = b2f*c*t85254;
            double t85324 = t85320+t85321+t85322+t85323;
            double t85325 = 1.0/t85324;
            double t85326 = t85253*t85325*(1.0/2.0);
            double t85327 = t85326+1.0;
            double t85328 = log(t85327);
            double t85329 = a1f*c*t85254;
            double t85330 = t85329+1.0;
            double t85331 = t85270-c0f*t85330*t85328*2.0;
            double t85332 = t85270-t85331*t85252*t85249;
            functional_[index] = (rho_b[index]*t85332+rho_a[index]*t85318-t85271*(t85288-t85252*t85293*t85294* \
               t85299*(t85288-c0f*log((t85253*(1.0/2.0))/(b1f*t85274+b3f*t85275+b2f*c*t85272+b4f*t85233*t85276)+1.0) \
               *(a1f*c*t85272+1.0)*2.0)+(Aa*t85252*t85299*log((1.0/2.0)/(Aa*(b1a*t85274+b3a*t85275+b2a*c*t85272+b4a* \
               t85233*t85276))+1.0)*(t85293*t85294-1.0)*(a1a*c*t85272+1.0)*2.0)/d2fz0))*(ccab0+(ccab1*gcab*t85300) \
               /(gcab*t85300+1.0)+(ccab2*t85301*t85304)/(gcab*t85300*2.0+t85301*t85304+1.0)+(ccab3*gcab*t85300*t85301* \
               t85304)/(gcab*t85300*3.0+t85301*t85304*3.0+gcab*t85300*t85301*t85304+1.0))-(c0*pow(rho_b[index],4.0/ \
               3.0)*(cx0+(t85209/t85211-t85210*1.0/(t85211*t85211*t85211)*t85209*2.0+1.0/(t85211*t85211*t85211*t85211* \
               t85211)*t85212*t85209)*(cxnl0+cxnl1*gamma_bb[index]*gx*t85213*t85219+cxnl2*t85214*t85216*t85228*t85184+ \
               cxnl3*gamma_bb[index]*gx*t85214*t85215*t85224*t85184)+cx1*gamma_bb[index]*gx*t85213*t85219+cx2*t85214* \
               t85216*t85228*t85184+cx3*gamma_bb[index]*gx*t85214*t85215*t85224*t85184)+c0*pow(rho_a[index],4.0/3.0) \
               *(cx0+(t85178/t85180+1.0/(t85180*t85180*t85180*t85180*t85180)*t85181*t85178-1.0/(t85180*t85180*t85180) \
               *t85178*t85179*2.0)*(cxnl0+cxnl1*gamma_aa[index]*gx*t85182*t85189+cxnl2*t85183*t85184*t85186*t85198+ \
               cxnl3*gamma_aa[index]*gx*t85183*t85184*t85185*t85194)+cx1*gamma_aa[index]*gx*t85182*t85189+cx2*t85183* \
               t85184*t85186*t85198+cx3*gamma_aa[index]*gx*t85183*t85184*t85185*t85194))*(X-1.0)-rho_b[index]*t85332* \
               (ccaa0+(ccaa2*t85214*t85216*t85319)/(gamma_bb[index]*gcaa*t85213*2.0+t85214*t85216*t85319+1.0)+(ccaa1* \
               gamma_bb[index]*gcaa*t85213)/(gamma_bb[index]*gcaa*t85213+1.0)+(ccaa3*gamma_bb[index]*gcaa*t85214* \
               t85215*t85319)/(gamma_bb[index]*gcaa*t85213*3.0+t85214*t85216*t85319*3.0+gamma_bb[index]*gcaa*t85214* \
               t85215*t85319+1.0))-rho_a[index]*t85318*(ccaa0+(ccaa2*t85183*t85319*t85186)/(gamma_aa[index]*gcaa* \
               t85182*2.0+t85183*t85319*t85186+1.0)+(ccaa1*gamma_aa[index]*gcaa*t85182)/(gamma_aa[index]*gcaa*t85182+ \
               1.0)+(ccaa3*gamma_aa[index]*gcaa*t85183*t85319*t85185)/(gamma_aa[index]*gcaa*t85182*3.0+t85183*t85319* \
               t85186*3.0+gamma_aa[index]*gcaa*t85183*t85319*t85185+1.0));
        } else if (rho_a[index] > cutoff_) {
            double t90260 = 1.0/pow(rho_a[index],1.0/3.0);
            double t90261 = c*t90260;
            double t90262 = sqrt(t90261);
            double t90263 = pow(t90261,3.0/2.0);
            double t90264 = c*c;
            double t90265 = 1.0/pow(rho_a[index],2.0/3.0);
            double t90266 = 1.0/c0p;
            double t90267 = b1p*t90262;
            double t90268 = b3p*t90263;
            double t90269 = b4p*t90264*t90265;
            double t90270 = b2p*c*t90260;
            double t90271 = t90270+t90267+t90268+t90269;
            double t90272 = 1.0/t90271;
            double t90273 = t90272*t90266*(1.0/2.0);
            double t90274 = t90273+1.0;
            double t90275 = log(t90274);
            double t90276 = a1p*c*t90260;
            double t90277 = t90276+1.0;
            double t90278 = 1.0/pow(rho_a[index],8.0/3.0);
            double t90279 = gamma_aa[index]*gamma_aa[index];
            double t90280 = gcaa*gcaa;
            double t90281 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]);
            double t90282 = 1.0/pow(rho_a[index],1.6E1/3.0);
            double t90283 = pow(rho_a[index],5.0/3.0);
            double t90284 = C_k*t90283;
            double t90285 = tau_a[index]*1.0E20;
            double t90286 = 1.0/tau_a[index];
            double t90287 = -t90284+t90285;
            double t90288 = ( (t90287 > 0.0) ?  1.0 : 0.0 ) ;
            double t90289 = C_k*t90283*t90286*t90288;
            double t90290 = t90284-t90285;
            double t90291 = ( (t90290 > 0.0) ?  1.0 : 0.0 ) ;
            double t90292 = t90291*1.0E20;
            double t90293 = t90292+t90289-1.0;
            double t90294 = t90293*t90293;
            double t90295 = t90292+t90289+1.0;
            double t90296 = t90294*t90294;
            double t90297 = gx*gx;
            double t90298 = gamma_aa[index]*gx*t90278;
            double t90299 = t90298+1.0;
            double t90300 = 1.0/t90299;
            double t90301 = gamma_aa[index]*gx*t90278*3.0;
            double t90302 = gamma_aa[index]*gx*t90281*t90279*t90297;
            double t90303 = t90282*t90279*t90297*3.0;
            double t90304 = t90301+t90302+t90303+1.0;
            double t90305 = 1.0/t90304;
            double t90306 = gamma_aa[index]*gx*t90278*2.0;
            double t90307 = t90282*t90279*t90297;
            double t90308 = t90306+t90307+1.0;
            double t90309 = 1.0/t90308;
            functional_[index] = -rho_a[index]*(((pow(2.0,1.0/3.0)*2.0-2.0)*(c0f*log((1.0/2.0)/(c0f*(b1f*t90262+ \
               b3f*t90263+b2f*c*t90260+b4f*t90264*t90265))+1.0)*(a1f*c*t90260+1.0)*2.0-c0p*t90275*t90277*2.0))/(two_13* \
               2.0-2.0)+c0p*t90275*t90277*2.0)*(ccaa0+(ccaa2*t90280*t90282*t90279)/(gamma_aa[index]*gcaa*t90278*2.0+ \
               t90280*t90282*t90279+1.0)+(ccaa1*gamma_aa[index]*gcaa*t90278)/(gamma_aa[index]*gcaa*t90278+1.0)+(ccaa3* \
               gamma_aa[index]*gcaa*t90280*t90281*t90279)/(gamma_aa[index]*gcaa*t90278*3.0+t90280*t90282*t90279*3.0+ \
               gamma_aa[index]*gcaa*t90280*t90281*t90279+1.0))-c0*pow(rho_a[index],4.0/3.0)*(X-1.0)*(cx0+(t90293/ \
               t90295-t90293*t90294*1.0/(t90295*t90295*t90295)*2.0+t90293*1.0/(t90295*t90295*t90295*t90295*t90295) \
               *t90296)*(cxnl0+cxnl1*gamma_aa[index]*gx*t90300*t90278+cxnl2*t90282*t90309*t90279*t90297+cxnl3*gamma_aa[index]* \
               gx*t90305*t90281*t90279*t90297)+cx1*gamma_aa[index]*gx*t90300*t90278+cx2*t90282*t90309*t90279*t90297+ \
               cx3*gamma_aa[index]*gx*t90305*t90281*t90279*t90297);
        } else if (rho_b[index] > cutoff_) {
            double t89172 = 1.0/pow(rho_b[index],1.0/3.0);
            double t89173 = c*t89172;
            double t89174 = sqrt(t89173);
            double t89175 = pow(t89173,3.0/2.0);
            double t89176 = c*c;
            double t89177 = 1.0/pow(rho_b[index],2.0/3.0);
            double t89178 = 1.0/c0p;
            double t89179 = b1p*t89174;
            double t89180 = b3p*t89175;
            double t89181 = b4p*t89176*t89177;
            double t89182 = b2p*c*t89172;
            double t89183 = t89180+t89181+t89182+t89179;
            double t89184 = 1.0/t89183;
            double t89185 = t89184*t89178*(1.0/2.0);
            double t89186 = t89185+1.0;
            double t89187 = log(t89186);
            double t89188 = a1p*c*t89172;
            double t89189 = t89188+1.0;
            double t89190 = 1.0/pow(rho_b[index],8.0/3.0);
            double t89191 = gamma_bb[index]*gamma_bb[index];
            double t89192 = gcaa*gcaa;
            double t89193 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
               rho_b[index]*rho_b[index]);
            double t89194 = 1.0/pow(rho_b[index],1.6E1/3.0);
            double t89195 = pow(rho_b[index],5.0/3.0);
            double t89196 = C_k*t89195;
            double t89205 = tau_a[index]*1.0E20;
            double t89197 = -t89205+t89196;
            double t89198 = ( (t89197 > 0.0) ?  1.0 : 0.0 ) ;
            double t89199 = t89198*1.0E20;
            double t89200 = 1.0/tau_b[index];
            double t89201 = tau_b[index]*1.0E20;
            double t89202 = t89201-t89196;
            double t89203 = ( (t89202 > 0.0) ?  1.0 : 0.0 ) ;
            double t89204 = C_k*t89200*t89203*t89195;
            double t89206 = t89204+t89199-1.0;
            double t89207 = t89206*t89206;
            double t89208 = t89204+t89199+1.0;
            double t89209 = t89207*t89207;
            double t89210 = gx*gx;
            double t89211 = gamma_bb[index]*gx*t89190;
            double t89212 = t89211+1.0;
            double t89213 = 1.0/t89212;
            double t89214 = gamma_bb[index]*gx*t89190*3.0;
            double t89215 = gamma_bb[index]*gx*t89210*t89191*t89193;
            double t89216 = t89210*t89191*t89194*3.0;
            double t89217 = t89214+t89215+t89216+1.0;
            double t89218 = 1.0/t89217;
            double t89219 = gamma_bb[index]*gx*t89190*2.0;
            double t89220 = t89210*t89191*t89194;
            double t89221 = t89220+t89219+1.0;
            double t89222 = 1.0/t89221;
            functional_[index] = -rho_b[index]*(((pow(2.0,1.0/3.0)*2.0-2.0)*(c0f*log((1.0/2.0)/(c0f*(b1f*t89174+ \
               b3f*t89175+b2f*c*t89172+b4f*t89176*t89177))+1.0)*(a1f*c*t89172+1.0)*2.0-c0p*t89187*t89189*2.0))/(two_13* \
               2.0-2.0)+c0p*t89187*t89189*2.0)*(ccaa0+(ccaa2*t89191*t89192*t89194)/(gamma_bb[index]*gcaa*t89190*2.0+ \
               t89191*t89192*t89194+1.0)+(ccaa1*gamma_bb[index]*gcaa*t89190)/(gamma_bb[index]*gcaa*t89190+1.0)+(ccaa3* \
               gamma_bb[index]*gcaa*t89191*t89192*t89193)/(gamma_bb[index]*gcaa*t89190*3.0+t89191*t89192*t89194*3.0+ \
               gamma_bb[index]*gcaa*t89191*t89192*t89193+1.0))-c0*pow(rho_b[index],4.0/3.0)*(X-1.0)*(cx0+(t89206/ \
               t89208-t89206*t89207*1.0/(t89208*t89208*t89208)*2.0+t89206*1.0/(t89208*t89208*t89208*t89208*t89208) \
               *t89209)*(cxnl0+cxnl1*gamma_bb[index]*gx*t89213*t89190+cxnl2*t89210*t89222*t89191*t89194+cxnl3*gamma_bb[index]* \
               gx*t89210*t89191*t89218*t89193)+cx1*gamma_bb[index]*gx*t89213*t89190+cx2*t89210*t89222*t89191*t89194+ \
               cx3*gamma_bb[index]*gx*t89210*t89191*t89218*t89193);
        } else {
            functional_[index] = 0.0;
        } 

    }
    //First Partials
    for (int index = 0; index < ntrue && deriv_ >= 1; index++) {

        //V_rho_a
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t85334 = 1.0/pow(rho_a[index],1.0/3.0);
            double t85335 = c*t85334;
            double t85336 = sqrt(t85335);
            double t85337 = pow(t85335,3.0/2.0);
            double t85338 = c*c;
            double t85339 = 1.0/pow(rho_a[index],2.0/3.0);
            double t85340 = 1.0/c0p;
            double t85341 = b1p*t85336;
            double t85342 = b3p*t85337;
            double t85343 = b4p*t85338*t85339;
            double t85344 = b2p*c*t85334;
            double t85345 = t85341+t85342+t85343+t85344;
            double t85346 = 1.0/t85345;
            double t85347 = t85340*t85346*(1.0/2.0);
            double t85348 = t85347+1.0;
            double t85349 = log(t85348);
            double t85350 = a1p*c*t85334;
            double t85351 = t85350+1.0;
            double t85352 = pow(2.0,1.0/3.0);
            double t85353 = t85352*2.0;
            double t85354 = t85353-2.0;
            double t85355 = two_13*2.0;
            double t85356 = t85355-2.0;
            double t85357 = 1.0/t85356;
            double t85358 = 1.0/c0f;
            double t85359 = 1.0/pow(rho_b[index],1.0/3.0);
            double t85360 = c*t85359;
            double t85361 = sqrt(t85360);
            double t85362 = pow(t85360,3.0/2.0);
            double t85363 = 1.0/pow(rho_b[index],2.0/3.0);
            double t85364 = b1p*t85361;
            double t85365 = b3p*t85362;
            double t85366 = b4p*t85363*t85338;
            double t85367 = b2p*c*t85359;
            double t85368 = t85364+t85365+t85366+t85367;
            double t85369 = 1.0/t85368;
            double t85370 = t85340*t85369*(1.0/2.0);
            double t85371 = t85370+1.0;
            double t85372 = log(t85371);
            double t85373 = a1p*c*t85359;
            double t85374 = t85373+1.0;
            double t85375 = c0p*t85372*t85374*2.0;
            double t85376 = rho_a[index]+rho_b[index];
            double t85377 = 1.0/pow(t85376,1.0/3.0);
            double t85378 = c*t85377;
            double t85379 = sqrt(t85378);
            double t85380 = pow(t85378,3.0/2.0);
            double t85381 = 1.0/pow(t85376,2.0/3.0);
            double t85382 = b1p*t85379;
            double t85383 = b3p*t85380;
            double t85384 = b4p*t85381*t85338;
            double t85385 = b2p*c*t85377;
            double t85386 = t85382+t85383+t85384+t85385;
            double t85387 = 1.0/t85386;
            double t85388 = t85340*t85387*(1.0/2.0);
            double t85389 = t85388+1.0;
            double t85390 = log(t85389);
            double t85391 = a1p*c*t85377;
            double t85392 = t85391+1.0;
            double t85393 = c0p*t85390*t85392*2.0;
            double t85394 = rho_a[index]-rho_b[index];
            double t85395 = t85394*t85394;
            double t85396 = 1.0/t85376;
            double t85397 = t85394*t85396;
            double t85398 = 1.0/(t85376*t85376*t85376*t85376);
            double t85399 = t85395*t85395;
            double t85400 = t85397+1.0;
            double t85401 = pow(t85400,4.0/3.0);
            double t85402 = -t85397+1.0;
            double t85403 = pow(t85402,4.0/3.0);
            double t85404 = t85401+t85403-2.0;
            double t85405 = gcab*gcab;
            double t85409 = 1.0/pow(rho_a[index],8.0/3.0);
            double t85410 = gamma_aa[index]*t85409*(1.0/2.0);
            double t85411 = 1.0/pow(rho_b[index],8.0/3.0);
            double t85412 = gamma_bb[index]*t85411*(1.0/2.0);
            double t85406 = t85410+t85412;
            double t85407 = t85406*t85406;
            double t85408 = 1.0/pow(rho_a[index],1.1E1/3.0);
            double t85413 = gcab*t85406;
            double t85414 = t85413+1.0;
            double t85415 = t85405*t85407;
            double t85416 = gcab*t85406*2.0;
            double t85417 = t85415+t85416+1.0;
            double t85418 = t85405*t85407*3.0;
            double t85419 = gcab*t85405*t85406*t85407;
            double t85420 = gcab*t85406*3.0;
            double t85421 = t85420+t85418+t85419+1.0;
            double t85422 = c0p*t85351*t85349*2.0;
            double t85423 = 1.0/t85417;
            double t85424 = 1.0/t85421;
            double t85425 = 1.0/t85414;
            double t85426 = 1.0/pow(t85376,4.0/3.0);
            double t85427 = b1f*t85379;
            double t85428 = b3f*t85380;
            double t85429 = b4f*t85381*t85338;
            double t85430 = b2f*c*t85377;
            double t85431 = t85430+t85427+t85428+t85429;
            double t85432 = 1.0/t85431;
            double t85433 = t85432*t85358*(1.0/2.0);
            double t85434 = t85433+1.0;
            double t85435 = log(t85434);
            double t85436 = a1f*c*t85377;
            double t85437 = t85436+1.0;
            double t85439 = c0f*t85435*t85437*2.0;
            double t85438 = t85393-t85439;
            double t85440 = 1.0/(t85376*t85376);
            double t85467 = t85440*t85394;
            double t85441 = -t85467+t85396;
            double t85442 = 1.0/pow(t85376,5.0/3.0);
            double t85443 = 1.0/sqrt(t85378);
            double t85444 = 1.0/t85389;
            double t85445 = 1.0/(t85386*t85386);
            double t85446 = b4p*t85442*t85338*(2.0/3.0);
            double t85447 = b2p*c*t85426*(1.0/3.0);
            double t85448 = b1p*c*t85443*t85426*(1.0/6.0);
            double t85449 = b3p*c*t85426*t85379*(1.0/2.0);
            double t85450 = t85446+t85447+t85448+t85449;
            double t85451 = t85450*t85444*t85445*t85392;
            double t85452 = 1.0/d2fz0;
            double t85453 = 1.0/Aa;
            double t85454 = b1a*t85379;
            double t85455 = b3a*t85380;
            double t85456 = b4a*t85381*t85338;
            double t85457 = b2a*c*t85377;
            double t85458 = t85454+t85455+t85456+t85457;
            double t85459 = 1.0/t85458;
            double t85460 = t85453*t85459*(1.0/2.0);
            double t85461 = t85460+1.0;
            double t85462 = log(t85461);
            double t85463 = a1a*c*t85377;
            double t85464 = t85463+1.0;
            double t85465 = 1.0/(t85376*t85376*t85376*t85376*t85376);
            double t85466 = pow(t85400,1.0/3.0);
            double t85468 = t85441*t85466*(4.0/3.0);
            double t85469 = pow(t85402,1.0/3.0);
            double t85470 = t85468-t85441*t85469*(4.0/3.0);
            double t85471 = t85398*t85399;
            double t85472 = t85471-1.0;
            double t85473 = a1f*c*t85334;
            double t85474 = t85473+1.0;
            double t85475 = b1f*t85336;
            double t85476 = b3f*t85337;
            double t85477 = b4f*t85338*t85339;
            double t85478 = b2f*c*t85334;
            double t85479 = t85475+t85476+t85477+t85478;
            double t85480 = 1.0/t85479;
            double t85481 = t85480*t85358*(1.0/2.0);
            double t85482 = t85481+1.0;
            double t85483 = 1.0/pow(rho_a[index],4.0/3.0);
            double t85484 = 1.0/pow(rho_a[index],5.0/3.0);
            double t85485 = 1.0/sqrt(t85335);
            double t85486 = log(t85482);
            double t85487 = 1.0/t85348;
            double t85488 = 1.0/(t85345*t85345);
            double t85489 = b4p*t85338*t85484*(2.0/3.0);
            double t85490 = b2p*c*t85483*(1.0/3.0);
            double t85491 = b1p*c*t85483*t85485*(1.0/6.0);
            double t85492 = b3p*c*t85336*t85483*(1.0/2.0);
            double t85493 = t85490+t85491+t85492+t85489;
            double t85494 = t85351*t85493*t85487*t85488;
            double t85495 = Aa*t85404*t85452*t85462*t85472*t85464*t85357*2.0;
            double t85497 = c0f*t85474*t85486*2.0;
            double t85496 = t85422-t85497;
            double t85498 = t85354*t85357*t85496;
            double t85499 = gamma_aa[index]*gamma_aa[index];
            double t85500 = gcaa*gcaa;
            double t85501 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]);
            double t85502 = 1.0/pow(rho_a[index],1.6E1/3.0);
            double t85503 = pow(rho_a[index],5.0/3.0);
            double t85504 = C_k*t85503;
            double t85505 = tau_a[index]*1.0E20;
            double t85506 = 1.0/tau_a[index];
            double t85507 = -t85504+t85505;
            double t85508 = ( (t85507 > 0.0) ?  1.0 : 0.0 ) ;
            double t85509 = C_k*t85503*t85506*t85508;
            double t85510 = t85504-t85505;
            double t85511 = ( (t85510 > 0.0) ?  1.0 : 0.0 ) ;
            double t85512 = t85511*1.0E20;
            double t85513 = t85512+t85509-1.0;
            double t85514 = t85513*t85513;
            double t85515 = t85512+t85509+1.0;
            double t85516 = t85514*t85514;
            double t85517 = gx*gx;
            double t85518 = gamma_aa[index]*gx*t85409;
            double t85519 = t85518+1.0;
            double t85520 = 1.0/t85519;
            double t85521 = gamma_aa[index]*gx*t85409*3.0;
            double t85522 = gamma_aa[index]*gx*t85501*t85517*t85499;
            double t85523 = t85502*t85517*t85499*3.0;
            double t85524 = t85521+t85522+t85523+1.0;
            double t85525 = 1.0/t85524;
            double t85526 = gamma_aa[index]*gx*t85409*2.0;
            double t85527 = t85502*t85517*t85499;
            double t85528 = t85526+t85527+1.0;
            double t85529 = 1.0/t85528;
            double t85530 = 1.0/t85515;
            double t85531 = 1.0/(t85515*t85515*t85515);
            double t85532 = 1.0/(t85515*t85515*t85515*t85515*t85515);
            double t85533 = t85513*t85532*t85516;
            double t85534 = 1.0/pow(rho_a[index],1.9E1/3.0);
            double t85535 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]*rho_a[index]);
            double t85536 = cxnl1*gamma_aa[index]*gx*t85520*t85409;
            double t85537 = cxnl3*gamma_aa[index]*gx*t85501*t85525*t85517*t85499;
            double t85538 = cxnl2*t85502*t85517*t85529*t85499;
            double t85539 = cxnl0+t85536+t85537+t85538;
            double t85540 = 0.0 ;
            double t85541 = pow(rho_a[index],2.0/3.0);
            double t85542 = C_k*t85540*t85541*(5.0E20/3.0);
            double t85543 = C_k*C_k;
            double t85544 = pow(rho_a[index],7.0/3.0);
            double t85545 = C_k*t85541*t85506*t85508*(5.0/3.0);
            double t85547 = t85540*t85506*t85543*t85544*(5.0/3.0);
            double t85546 = t85542+t85545-t85547;
            double t85548 = 1.0/(t85519*t85519);
            double t85549 = gamma_aa[index]*gx*t85408*8.0;
            double t85550 = gamma_aa[index]*gx*t85517*t85535*t85499*8.0;
            double t85551 = t85534*t85517*t85499*1.6E1;
            double t85552 = t85550+t85551+t85549;
            double t85553 = 1.0/(t85524*t85524);
            double t85554 = gamma_aa[index]*gx*t85408*(1.6E1/3.0);
            double t85555 = t85534*t85517*t85499*(1.6E1/3.0);
            double t85556 = t85554+t85555;
            double t85557 = 1.0/(t85528*t85528);
            double t85558 = t85530*t85513;
            double t85559 = t85533+t85558-t85513*t85531*t85514*2.0;
            double t85560 = t85422-t85498;
            double t85561 = gamma_aa[index]*gcaa*t85409;
            double t85562 = t85561+1.0;
            double t85563 = 1.0/t85562;
            double t85564 = gamma_aa[index]*gcaa*t85409*3.0;
            double t85565 = gamma_aa[index]*gcaa*t85500*t85501*t85499;
            double t85566 = t85500*t85502*t85499*3.0;
            double t85567 = t85564+t85565+t85566+1.0;
            double t85568 = 1.0/t85567;
            double t85569 = gamma_aa[index]*gcaa*t85409*2.0;
            double t85570 = t85500*t85502*t85499;
            double t85571 = t85570+t85569+1.0;
            double t85572 = 1.0/t85571;
            double t85573 = 1.0/t85482;
            double t85574 = 1.0/(t85479*t85479);
            double t85575 = b4f*t85338*t85484*(2.0/3.0);
            double t85576 = b2f*c*t85483*(1.0/3.0);
            double t85577 = b1f*c*t85483*t85485*(1.0/6.0);
            double t85578 = b3f*c*t85336*t85483*(1.0/2.0);
            double t85579 = t85575+t85576+t85577+t85578;
            double t85580 = a1f*c*c0f*t85483*t85486*(2.0/3.0);
            double t85581 = a1p*c*c0p*t85483*t85349*(2.0/3.0);
            double t85582 = ccaa1*gamma_aa[index]*gcaa*t85409*t85563;
            double t85583 = ccaa3*gamma_aa[index]*gcaa*t85500*t85501*t85568*t85499;
            double t85584 = ccaa2*t85500*t85502*t85572*t85499;
            double t85585 = ccaa0+t85582+t85583+t85584;
            v_rho_a_[index] = -t85560*t85585-(c0*pow(rho_a[index],1.0/3.0)*(cx0+t85539*t85559+cx1*gamma_aa[index]* \
               gx*t85520*t85409+cx2*t85502*t85517*t85529*t85499+cx3*gamma_aa[index]*gx*t85501*t85525*t85517*t85499) \
               *(4.0/3.0)-c0*pow(rho_a[index],4.0/3.0)*(t85559*(cxnl1*gamma_aa[index]*gx*t85520*t85408*(8.0/3.0)- \
               cxnl1*t85534*t85517*t85548*t85499*(8.0/3.0)+cxnl2*t85534*t85517*t85529*t85499*(1.6E1/3.0)-cxnl2*t85502* \
               t85517*t85556*t85557*t85499+cxnl3*gamma_aa[index]*gx*t85525*t85517*t85535*t85499*8.0-cxnl3*gamma_aa[index]* \
               gx*t85501*t85552*t85517*t85553*t85499)-t85539*(t85530*t85546-t85513*1.0/(t85515*t85515)*t85546-t85531* \
               t85514*t85546*6.0+t85532*t85516*t85546*5.0+t85513*t85514*1.0/(t85515*t85515*t85515*t85515)*t85546* \
               6.0-t85513*1.0/(t85515*t85515*t85515*t85515*t85515*t85515)*t85516*t85546*5.0)+cx1*gamma_aa[index]* \
               gx*t85520*t85408*(8.0/3.0)-cx1*t85534*t85517*t85548*t85499*(8.0/3.0)+cx2*t85534*t85517*t85529*t85499* \
               (1.6E1/3.0)-cx2*t85502*t85517*t85556*t85557*t85499+cx3*gamma_aa[index]*gx*t85525*t85517*t85535*t85499* \
               8.0-cx3*gamma_aa[index]*gx*t85501*t85552*t85517*t85553*t85499))*(X-1.0)-(rho_a[index]*(t85422-t85354* \
               t85357*t85496)+rho_b[index]*(t85375-t85354*t85357*(t85375-c0f*log((t85358*(1.0/2.0))/(b1f*t85361+b3f* \
               t85362+b2f*c*t85359+b4f*t85363*t85338)+1.0)*(a1f*c*t85359+1.0)*2.0))-t85376*(t85393+t85495-t85404* \
               t85357*t85438*t85398*t85399))*(ccab1*gamma_aa[index]*gcab*t85425*t85408*(4.0/3.0)-ccab2*t85405*t85407* \
               1.0/(t85417*t85417)*(gamma_aa[index]*gcab*t85408*(8.0/3.0)+gamma_aa[index]*t85405*t85406*t85408*(8.0/ \
               3.0))-ccab1*gamma_aa[index]*t85405*1.0/(t85414*t85414)*t85406*t85408*(4.0/3.0)+ccab2*gamma_aa[index]* \
               t85405*t85423*t85406*t85408*(8.0/3.0)-ccab3*gcab*1.0/(t85421*t85421)*t85405*t85406*t85407*(gamma_aa[index]* \
               gcab*t85408*4.0+gamma_aa[index]*t85405*t85406*t85408*8.0+gamma_aa[index]*gcab*t85405*t85407*t85408* \
               4.0)+ccab3*gamma_aa[index]*gcab*t85405*t85424*t85407*t85408*4.0)-(ccab0+ccab1*gcab*t85406*t85425+ccab2* \
               t85405*t85423*t85407+ccab3*gcab*t85405*t85406*t85424*t85407)*(-t85422+t85393+t85495+t85498+rho_a[index]* \
               (t85581-t85494+t85354*t85357*(t85580+t85494-t85474*t85573*t85574*t85579-a1p*c*c0p*t85483*t85349*(2.0/ \
               3.0)))-t85376*(-t85451+t85404*t85357*t85398*t85399*(t85451-(1.0/(t85431*t85431)*t85437*(b2f*c*t85426* \
               (1.0/3.0)+b4f*t85442*t85338*(2.0/3.0)+b1f*c*t85443*t85426*(1.0/6.0)+b3f*c*t85426*t85379*(1.0/2.0)) \
               )/t85434+a1f*c*c0f*t85426*t85435*(2.0/3.0)-a1p*c*c0p*t85390*t85426*(2.0/3.0))+a1p*c*c0p*t85390*t85426* \
               (2.0/3.0)-t85404*t85357*t85438*t85465*t85399*4.0+t85470*t85357*t85438*t85398*t85399+t85404*t85357* \
               t85438*t85394*t85395*t85398*4.0+Aa*t85404*t85452*t85462*t85464*t85357*(t85465*t85399*4.0-t85394*t85395* \
               t85398*4.0)*2.0-Aa*t85452*t85470*t85462*t85472*t85464*t85357*2.0-(t85404*t85452*t85472*t85464*t85357* \
               1.0/(t85458*t85458)*(b2a*c*t85426*(1.0/3.0)+b4a*t85442*t85338*(2.0/3.0)+b1a*c*t85443*t85426*(1.0/6.0) \
               +b3a*c*t85426*t85379*(1.0/2.0)))/t85461+Aa*a1a*c*t85404*t85452*t85426*t85462*t85472*t85357*(2.0/3.0) \
               )-t85404*t85357*t85438*t85398*t85399)+rho_a[index]*t85585*(t85581-t85494+t85354*t85357*(t85580-t85581+ \
               t85494-t85474*t85573*t85574*t85579))+rho_a[index]*t85560*(ccaa1*gamma_aa[index]*gcaa*t85408*t85563* \
               (8.0/3.0)+ccaa2*t85500*t85534*t85572*t85499*(1.6E1/3.0)-ccaa1*t85500*t85534*1.0/(t85562*t85562)*t85499* \
               (8.0/3.0)-ccaa2*t85500*t85502*1.0/(t85571*t85571)*t85499*(gamma_aa[index]*gcaa*t85408*(1.6E1/3.0)+ \
               t85500*t85534*t85499*(1.6E1/3.0))+ccaa3*gamma_aa[index]*gcaa*t85500*t85535*t85568*t85499*8.0-ccaa3* \
               gamma_aa[index]*gcaa*t85500*t85501*1.0/(t85567*t85567)*t85499*(gamma_aa[index]*gcaa*t85408*8.0+t85500* \
               t85534*t85499*1.6E1+gamma_aa[index]*gcaa*t85500*t85535*t85499*8.0));
        } else if (rho_a[index] > cutoff_) {
            double t90311 = 1.0/pow(rho_a[index],1.0/3.0);
            double t90312 = c*t90311;
            double t90313 = sqrt(t90312);
            double t90314 = pow(t90312,3.0/2.0);
            double t90315 = c*c;
            double t90316 = 1.0/pow(rho_a[index],2.0/3.0);
            double t90317 = 1.0/c0p;
            double t90318 = b1p*t90313;
            double t90319 = b3p*t90314;
            double t90320 = b4p*t90315*t90316;
            double t90321 = b2p*c*t90311;
            double t90322 = t90320+t90321+t90318+t90319;
            double t90323 = 1.0/t90322;
            double t90324 = t90323*t90317*(1.0/2.0);
            double t90325 = t90324+1.0;
            double t90326 = log(t90325);
            double t90327 = a1p*c*t90311;
            double t90328 = t90327+1.0;
            double t90329 = 1.0/pow(rho_a[index],8.0/3.0);
            double t90330 = gamma_aa[index]*gamma_aa[index];
            double t90331 = gcaa*gcaa;
            double t90332 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]);
            double t90333 = 1.0/pow(rho_a[index],1.6E1/3.0);
            double t90334 = pow(2.0,1.0/3.0);
            double t90335 = t90334*2.0;
            double t90336 = t90335-2.0;
            double t90337 = two_13*2.0;
            double t90338 = t90337-2.0;
            double t90339 = 1.0/t90338;
            double t90340 = 1.0/c0f;
            double t90341 = b1f*t90313;
            double t90342 = b3f*t90314;
            double t90343 = b4f*t90315*t90316;
            double t90344 = b2f*c*t90311;
            double t90345 = t90341+t90342+t90343+t90344;
            double t90346 = 1.0/t90345;
            double t90347 = t90340*t90346*(1.0/2.0);
            double t90348 = t90347+1.0;
            double t90349 = log(t90348);
            double t90350 = a1f*c*t90311;
            double t90351 = t90350+1.0;
            double t90352 = c0f*t90351*t90349*2.0;
            double t90353 = c0p*t90326*t90328*2.0;
            double t90354 = gamma_aa[index]*gcaa*t90329;
            double t90355 = t90354+1.0;
            double t90356 = 1.0/t90355;
            double t90357 = gamma_aa[index]*gcaa*t90329*3.0;
            double t90358 = gamma_aa[index]*gcaa*t90330*t90331*t90332;
            double t90359 = t90330*t90331*t90333*3.0;
            double t90360 = t90357+t90358+t90359+1.0;
            double t90361 = 1.0/t90360;
            double t90362 = gamma_aa[index]*gcaa*t90329*2.0;
            double t90363 = t90330*t90331*t90333;
            double t90364 = t90362+t90363+1.0;
            double t90365 = 1.0/t90364;
            double t90366 = 1.0/pow(rho_a[index],1.9E1/3.0);
            double t90367 = 1.0/pow(rho_a[index],1.1E1/3.0);
            double t90368 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]*rho_a[index]);
            double t90369 = 1.0/pow(rho_a[index],4.0/3.0);
            double t90370 = 1.0/pow(rho_a[index],5.0/3.0);
            double t90371 = 1.0/sqrt(t90312);
            double t90372 = 1.0/t90325;
            double t90373 = 1.0/(t90322*t90322);
            double t90374 = b4p*t90315*t90370*(2.0/3.0);
            double t90375 = b2p*c*t90369*(1.0/3.0);
            double t90376 = b1p*c*t90371*t90369*(1.0/6.0);
            double t90377 = b3p*c*t90313*t90369*(1.0/2.0);
            double t90378 = t90374+t90375+t90376+t90377;
            double t90379 = t90372*t90328*t90373*t90378;
            double t90380 = ccaa1*gamma_aa[index]*gcaa*t90329*t90356;
            double t90381 = ccaa3*gamma_aa[index]*gcaa*t90330*t90331*t90332*t90361;
            double t90382 = ccaa2*t90330*t90331*t90333*t90365;
            double t90383 = ccaa0+t90380+t90381+t90382;
            double t90384 = pow(rho_a[index],5.0/3.0);
            double t90385 = C_k*t90384;
            double t90386 = tau_a[index]*1.0E20;
            double t90387 = 1.0/tau_a[index];
            double t90388 = -t90385+t90386;
            double t90389 = ( (t90388 > 0.0) ?  1.0 : 0.0 ) ;
            double t90390 = C_k*t90384*t90387*t90389;
            double t90391 = t90385-t90386;
            double t90392 = ( (t90391 > 0.0) ?  1.0 : 0.0 ) ;
            double t90393 = t90392*1.0E20;
            double t90394 = t90390+t90393-1.0;
            double t90395 = t90394*t90394;
            double t90396 = t90390+t90393+1.0;
            double t90397 = t90395*t90395;
            double t90398 = gx*gx;
            double t90399 = gamma_aa[index]*gx*t90329;
            double t90400 = t90399+1.0;
            double t90401 = 1.0/t90400;
            double t90402 = gamma_aa[index]*gx*t90329*3.0;
            double t90403 = gamma_aa[index]*gx*t90330*t90332*t90398;
            double t90404 = t90330*t90333*t90398*3.0;
            double t90405 = t90402+t90403+t90404+1.0;
            double t90406 = 1.0/t90405;
            double t90407 = gamma_aa[index]*gx*t90329*2.0;
            double t90408 = t90330*t90333*t90398;
            double t90409 = t90407+t90408+1.0;
            double t90410 = 1.0/t90409;
            double t90411 = X-1.0;
            double t90412 = 1.0/t90396;
            double t90413 = t90412*t90394;
            double t90414 = 1.0/(t90396*t90396*t90396);
            double t90415 = 1.0/(t90396*t90396*t90396*t90396*t90396);
            double t90416 = t90415*t90394*t90397;
            double t90417 = t90413+t90416-t90414*t90394*t90395*2.0;
            double t90418 = cxnl1*gamma_aa[index]*gx*t90401*t90329;
            double t90419 = cxnl3*gamma_aa[index]*gx*t90330*t90332*t90406*t90398;
            double t90420 = cxnl2*t90410*t90330*t90333*t90398;
            double t90421 = cxnl0+t90420+t90418+t90419;
            double t90422 = 0.0 ;
            double t90423 = pow(rho_a[index],2.0/3.0);
            double t90424 = C_k*t90422*t90423*(5.0E20/3.0);
            double t90425 = C_k*C_k;
            double t90426 = pow(rho_a[index],7.0/3.0);
            double t90427 = C_k*t90423*t90387*t90389*(5.0/3.0);
            double t90429 = t90422*t90425*t90426*t90387*(5.0/3.0);
            double t90428 = t90424+t90427-t90429;
            double t90430 = 1.0/(t90400*t90400);
            double t90431 = gamma_aa[index]*gx*t90367*8.0;
            double t90432 = gamma_aa[index]*gx*t90330*t90368*t90398*8.0;
            double t90433 = t90330*t90366*t90398*1.6E1;
            double t90434 = t90431+t90432+t90433;
            double t90435 = 1.0/(t90405*t90405);
            double t90436 = gamma_aa[index]*gx*t90367*(1.6E1/3.0);
            double t90437 = t90330*t90366*t90398*(1.6E1/3.0);
            double t90438 = t90436+t90437;
            double t90439 = 1.0/(t90409*t90409);
            v_rho_a_[index] = -t90383*(t90353+t90336*t90339*(t90352-c0p*t90326*t90328*2.0))+rho_a[index]*(t90353+ \
               t90336*t90339*(t90352-t90353))*(ccaa1*gamma_aa[index]*gcaa*t90356*t90367*(8.0/3.0)+ccaa2*t90330*t90331* \
               t90365*t90366*(1.6E1/3.0)-ccaa1*t90330*t90331*1.0/(t90355*t90355)*t90366*(8.0/3.0)-ccaa2*t90330*t90331* \
               t90333*1.0/(t90364*t90364)*(gamma_aa[index]*gcaa*t90367*(1.6E1/3.0)+t90330*t90331*t90366*(1.6E1/3.0) \
               )+ccaa3*gamma_aa[index]*gcaa*t90330*t90331*t90361*t90368*8.0-ccaa3*gamma_aa[index]*gcaa*t90330*t90331* \
               t90332*1.0/(t90360*t90360)*(gamma_aa[index]*gcaa*t90367*8.0+t90330*t90331*t90366*1.6E1+gamma_aa[index]* \
               gcaa*t90330*t90331*t90368*8.0))+rho_a[index]*t90383*(-t90379+t90336*t90339*(t90379-(t90351*1.0/(t90345* \
               t90345)*(b2f*c*t90369*(1.0/3.0)+b4f*t90315*t90370*(2.0/3.0)+b1f*c*t90371*t90369*(1.0/6.0)+b3f*c*t90313* \
               t90369*(1.0/2.0)))/t90348+a1f*c*c0f*t90349*t90369*(2.0/3.0)-a1p*c*c0p*t90326*t90369*(2.0/3.0))+a1p* \
               c*c0p*t90326*t90369*(2.0/3.0))-c0*pow(rho_a[index],1.0/3.0)*t90411*(cx0+t90421*t90417+cx1*gamma_aa[index]* \
               gx*t90401*t90329+cx2*t90410*t90330*t90333*t90398+cx3*gamma_aa[index]*gx*t90330*t90332*t90406*t90398) \
               *(4.0/3.0)+c0*pow(rho_a[index],4.0/3.0)*t90411*(t90417*(cxnl1*gamma_aa[index]*gx*t90401*t90367*(8.0/ \
               3.0)+cxnl2*t90410*t90330*t90366*t90398*(1.6E1/3.0)-cxnl1*t90330*t90430*t90366*t90398*(8.0/3.0)-cxnl2* \
               t90330*t90333*t90438*t90439*t90398+cxnl3*gamma_aa[index]*gx*t90330*t90406*t90368*t90398*8.0-cxnl3* \
               gamma_aa[index]*gx*t90330*t90332*t90434*t90435*t90398)-t90421*(t90412*t90428-t90428*t90394*1.0/(t90396* \
               t90396)-t90414*t90428*t90395*6.0+t90415*t90428*t90397*5.0+t90428*t90394*t90395*1.0/(t90396*t90396* \
               t90396*t90396)*6.0-t90428*t90394*1.0/(t90396*t90396*t90396*t90396*t90396*t90396)*t90397*5.0)+cx1*gamma_aa[index]* \
               gx*t90401*t90367*(8.0/3.0)-cx1*t90330*t90430*t90366*t90398*(8.0/3.0)+cx2*t90410*t90330*t90366*t90398* \
               (1.6E1/3.0)-cx2*t90330*t90333*t90438*t90439*t90398+cx3*gamma_aa[index]*gx*t90330*t90406*t90368*t90398* \
               8.0-cx3*gamma_aa[index]*gx*t90330*t90332*t90434*t90435*t90398);
        } else if (rho_b[index] > cutoff_) {
            v_rho_a_[index] = 0.0;
        } else {
            v_rho_a_[index] = 0.0;
        } 

        //V_rho_b
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t85587 = 1.0/pow(rho_a[index],1.0/3.0);
            double t85588 = c*t85587;
            double t85589 = sqrt(t85588);
            double t85590 = pow(t85588,3.0/2.0);
            double t85591 = c*c;
            double t85592 = 1.0/pow(rho_a[index],2.0/3.0);
            double t85593 = 1.0/c0p;
            double t85594 = b1p*t85589;
            double t85595 = b3p*t85590;
            double t85596 = b4p*t85591*t85592;
            double t85597 = b2p*c*t85587;
            double t85598 = t85594+t85595+t85596+t85597;
            double t85599 = 1.0/t85598;
            double t85600 = t85593*t85599*(1.0/2.0);
            double t85601 = t85600+1.0;
            double t85602 = log(t85601);
            double t85603 = a1p*c*t85587;
            double t85604 = t85603+1.0;
            double t85605 = pow(2.0,1.0/3.0);
            double t85606 = t85605*2.0;
            double t85607 = t85606-2.0;
            double t85608 = two_13*2.0;
            double t85609 = t85608-2.0;
            double t85610 = 1.0/t85609;
            double t85611 = 1.0/c0f;
            double t85612 = 1.0/pow(rho_b[index],1.0/3.0);
            double t85613 = c*t85612;
            double t85614 = sqrt(t85613);
            double t85615 = pow(t85613,3.0/2.0);
            double t85616 = 1.0/pow(rho_b[index],2.0/3.0);
            double t85617 = b1p*t85614;
            double t85618 = b3p*t85615;
            double t85619 = b4p*t85616*t85591;
            double t85620 = b2p*c*t85612;
            double t85621 = t85620+t85617+t85618+t85619;
            double t85622 = 1.0/t85621;
            double t85623 = t85622*t85593*(1.0/2.0);
            double t85624 = t85623+1.0;
            double t85625 = log(t85624);
            double t85626 = a1p*c*t85612;
            double t85627 = t85626+1.0;
            double t85628 = c0p*t85625*t85627*2.0;
            double t85629 = rho_a[index]+rho_b[index];
            double t85630 = 1.0/pow(t85629,1.0/3.0);
            double t85631 = c*t85630;
            double t85632 = sqrt(t85631);
            double t85633 = pow(t85631,3.0/2.0);
            double t85634 = 1.0/pow(t85629,2.0/3.0);
            double t85635 = b1p*t85632;
            double t85636 = b3p*t85633;
            double t85637 = b4p*t85634*t85591;
            double t85638 = b2p*c*t85630;
            double t85639 = t85635+t85636+t85637+t85638;
            double t85640 = 1.0/t85639;
            double t85641 = t85640*t85593*(1.0/2.0);
            double t85642 = t85641+1.0;
            double t85643 = log(t85642);
            double t85644 = a1p*c*t85630;
            double t85645 = t85644+1.0;
            double t85646 = c0p*t85643*t85645*2.0;
            double t85647 = rho_a[index]-rho_b[index];
            double t85648 = t85647*t85647;
            double t85649 = 1.0/t85629;
            double t85650 = t85647*t85649;
            double t85651 = 1.0/(t85629*t85629*t85629*t85629);
            double t85652 = t85648*t85648;
            double t85653 = t85650+1.0;
            double t85654 = pow(t85653,4.0/3.0);
            double t85655 = -t85650+1.0;
            double t85656 = pow(t85655,4.0/3.0);
            double t85657 = t85654+t85656-2.0;
            double t85658 = gcab*gcab;
            double t85662 = 1.0/pow(rho_a[index],8.0/3.0);
            double t85663 = gamma_aa[index]*t85662*(1.0/2.0);
            double t85664 = 1.0/pow(rho_b[index],8.0/3.0);
            double t85665 = gamma_bb[index]*t85664*(1.0/2.0);
            double t85659 = t85663+t85665;
            double t85660 = t85659*t85659;
            double t85661 = 1.0/pow(rho_b[index],1.1E1/3.0);
            double t85666 = gcab*t85659;
            double t85667 = t85666+1.0;
            double t85668 = t85660*t85658;
            double t85669 = gcab*t85659*2.0;
            double t85670 = t85668+t85669+1.0;
            double t85671 = t85660*t85658*3.0;
            double t85672 = gcab*t85660*t85658*t85659;
            double t85673 = gcab*t85659*3.0;
            double t85674 = t85671+t85672+t85673+1.0;
            double t85675 = c0p*t85602*t85604*2.0;
            double t85676 = 1.0/t85670;
            double t85677 = 1.0/t85674;
            double t85678 = 1.0/t85667;
            double t85679 = 1.0/pow(t85629,4.0/3.0);
            double t85680 = b1f*t85632;
            double t85681 = b3f*t85633;
            double t85682 = b4f*t85634*t85591;
            double t85683 = b2f*c*t85630;
            double t85684 = t85680+t85681+t85682+t85683;
            double t85685 = 1.0/t85684;
            double t85686 = t85611*t85685*(1.0/2.0);
            double t85687 = t85686+1.0;
            double t85688 = log(t85687);
            double t85689 = a1f*c*t85630;
            double t85690 = t85689+1.0;
            double t85692 = c0f*t85690*t85688*2.0;
            double t85691 = t85646-t85692;
            double t85693 = 1.0/(t85629*t85629);
            double t85694 = t85647*t85693;
            double t85695 = t85649+t85694;
            double t85696 = 1.0/pow(t85629,5.0/3.0);
            double t85697 = 1.0/sqrt(t85631);
            double t85698 = 1.0/t85642;
            double t85699 = 1.0/(t85639*t85639);
            double t85700 = b4p*t85591*t85696*(2.0/3.0);
            double t85701 = b2p*c*t85679*(1.0/3.0);
            double t85702 = b1p*c*t85679*t85697*(1.0/6.0);
            double t85703 = b3p*c*t85632*t85679*(1.0/2.0);
            double t85704 = t85700+t85701+t85702+t85703;
            double t85705 = 1.0/d2fz0;
            double t85706 = 1.0/Aa;
            double t85707 = b1a*t85632;
            double t85708 = b3a*t85633;
            double t85709 = b4a*t85634*t85591;
            double t85710 = b2a*c*t85630;
            double t85711 = t85710+t85707+t85708+t85709;
            double t85712 = 1.0/t85711;
            double t85713 = t85712*t85706*(1.0/2.0);
            double t85714 = t85713+1.0;
            double t85715 = log(t85714);
            double t85716 = a1a*c*t85630;
            double t85717 = t85716+1.0;
            double t85718 = 1.0/(t85629*t85629*t85629*t85629*t85629);
            double t85719 = pow(t85653,1.0/3.0);
            double t85720 = t85719*t85695*(4.0/3.0);
            double t85721 = pow(t85655,1.0/3.0);
            double t85722 = t85720-t85721*t85695*(4.0/3.0);
            double t85723 = t85651*t85652;
            double t85724 = t85723-1.0;
            double t85725 = t85704*t85645*t85698*t85699;
            double t85726 = a1f*c*t85612;
            double t85727 = t85726+1.0;
            double t85728 = b1f*t85614;
            double t85729 = b3f*t85615;
            double t85730 = b4f*t85616*t85591;
            double t85731 = b2f*c*t85612;
            double t85732 = t85730+t85731+t85728+t85729;
            double t85733 = 1.0/t85732;
            double t85734 = t85611*t85733*(1.0/2.0);
            double t85735 = t85734+1.0;
            double t85736 = 1.0/pow(rho_b[index],4.0/3.0);
            double t85737 = 1.0/pow(rho_b[index],5.0/3.0);
            double t85738 = 1.0/sqrt(t85613);
            double t85739 = log(t85735);
            double t85740 = 1.0/t85624;
            double t85741 = 1.0/(t85621*t85621);
            double t85742 = b4p*t85591*t85737*(2.0/3.0);
            double t85743 = b2p*c*t85736*(1.0/3.0);
            double t85744 = b1p*c*t85736*t85738*(1.0/6.0);
            double t85745 = b3p*c*t85614*t85736*(1.0/2.0);
            double t85746 = t85742+t85743+t85744+t85745;
            double t85747 = t85740*t85741*t85627*t85746;
            double t85750 = c0f*t85727*t85739*2.0;
            double t85748 = -t85750+t85628;
            double t85749 = Aa*t85610*t85705*t85715*t85724*t85717*t85657*2.0;
            double t85751 = gamma_bb[index]*gamma_bb[index];
            double t85752 = gcaa*gcaa;
            double t85753 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
               rho_b[index]*rho_b[index]);
            double t85754 = 1.0/pow(rho_b[index],1.6E1/3.0);
            double t85755 = pow(rho_b[index],5.0/3.0);
            double t85756 = C_k*t85755;
            double t85765 = tau_a[index]*1.0E20;
            double t85757 = t85756-t85765;
            double t85758 = ( (t85757 > 0.0) ?  1.0 : 0.0 ) ;
            double t85759 = t85758*1.0E20;
            double t85760 = 1.0/tau_b[index];
            double t85761 = tau_b[index]*1.0E20;
            double t85762 = t85761-t85756;
            double t85763 = ( (t85762 > 0.0) ?  1.0 : 0.0 ) ;
            double t85764 = C_k*t85760*t85763*t85755;
            double t85766 = t85764+t85759-1.0;
            double t85767 = t85766*t85766;
            double t85768 = t85764+t85759+1.0;
            double t85769 = t85767*t85767;
            double t85770 = gx*gx;
            double t85771 = gamma_bb[index]*gx*t85664;
            double t85772 = t85771+1.0;
            double t85773 = 1.0/t85772;
            double t85774 = gamma_bb[index]*gx*t85664*3.0;
            double t85775 = gamma_bb[index]*gx*t85751*t85770*t85753;
            double t85776 = t85751*t85770*t85754*3.0;
            double t85777 = t85774+t85775+t85776+1.0;
            double t85778 = 1.0/t85777;
            double t85779 = gamma_bb[index]*gx*t85664*2.0;
            double t85780 = t85751*t85770*t85754;
            double t85781 = t85780+t85779+1.0;
            double t85782 = 1.0/t85781;
            double t85783 = 1.0/t85768;
            double t85784 = t85783*t85766;
            double t85785 = 1.0/(t85768*t85768*t85768);
            double t85786 = 1.0/(t85768*t85768*t85768*t85768*t85768);
            double t85787 = t85766*t85786*t85769;
            double t85788 = t85784+t85787-t85766*t85767*t85785*2.0;
            double t85789 = 1.0/pow(rho_b[index],1.9E1/3.0);
            double t85790 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
               rho_b[index]*rho_b[index]*rho_b[index]);
            double t85791 = cxnl1*gamma_bb[index]*gx*t85664*t85773;
            double t85792 = cxnl3*gamma_bb[index]*gx*t85751*t85770*t85753*t85778;
            double t85793 = cxnl2*t85751*t85770*t85754*t85782;
            double t85794 = cxnl0+t85791+t85792+t85793;
            double t85795 = pow(rho_b[index],2.0/3.0);
            double t85796 = -t85756+t85765;
            double t85797 = 0.0 ;
            double t85798 = C_k*t85795*t85797*(5.0E20/3.0);
            double t85799 = C_k*C_k;
            double t85800 = pow(rho_b[index],7.0/3.0);
            double t85801 = 0.0 ;
            double t85802 = C_k*t85760*t85763*t85795*(5.0/3.0);
            double t85804 = t85800*t85801*t85760*t85799*(5.0/3.0);
            double t85803 = t85802-t85804+t85798;
            double t85805 = 1.0/(t85772*t85772);
            double t85806 = gamma_bb[index]*gx*t85661*8.0;
            double t85807 = gamma_bb[index]*gx*t85751*t85770*t85790*8.0;
            double t85808 = t85751*t85770*t85789*1.6E1;
            double t85809 = t85806+t85807+t85808;
            double t85810 = 1.0/(t85777*t85777);
            double t85811 = gamma_bb[index]*gx*t85661*(1.6E1/3.0);
            double t85812 = t85751*t85770*t85789*(1.6E1/3.0);
            double t85813 = t85811+t85812;
            double t85814 = 1.0/(t85781*t85781);
            double t85815 = t85750-t85628;
            double t85816 = t85610*t85607*t85815;
            double t85817 = t85816+t85628;
            double t85818 = gamma_bb[index]*gcaa*t85664;
            double t85819 = t85818+1.0;
            double t85820 = 1.0/t85819;
            double t85821 = gamma_bb[index]*gcaa*t85664*3.0;
            double t85822 = gamma_bb[index]*gcaa*t85751*t85752*t85753;
            double t85823 = t85751*t85752*t85754*3.0;
            double t85824 = t85821+t85822+t85823+1.0;
            double t85825 = 1.0/t85824;
            double t85826 = gamma_bb[index]*gcaa*t85664*2.0;
            double t85827 = t85751*t85752*t85754;
            double t85828 = t85826+t85827+1.0;
            double t85829 = 1.0/t85828;
            double t85830 = 1.0/t85735;
            double t85831 = 1.0/(t85732*t85732);
            double t85832 = b4f*t85591*t85737*(2.0/3.0);
            double t85833 = b2f*c*t85736*(1.0/3.0);
            double t85834 = b1f*c*t85736*t85738*(1.0/6.0);
            double t85835 = b3f*c*t85614*t85736*(1.0/2.0);
            double t85836 = t85832+t85833+t85834+t85835;
            double t85837 = a1f*c*c0f*t85736*t85739*(2.0/3.0);
            double t85838 = a1p*c*c0p*t85625*t85736*(2.0/3.0);
            double t85839 = ccaa1*gamma_bb[index]*gcaa*t85820*t85664;
            double t85840 = ccaa3*gamma_bb[index]*gcaa*t85751*t85752*t85753*t85825;
            double t85841 = ccaa2*t85751*t85752*t85754*t85829;
            double t85842 = ccaa0+t85840+t85841+t85839;
            v_rho_b_[index] = -t85842*t85817-(c0*pow(rho_b[index],1.0/3.0)*(cx0+t85794*t85788+cx1*gamma_bb[index]* \
               gx*t85664*t85773+cx2*t85751*t85770*t85754*t85782+cx3*gamma_bb[index]*gx*t85751*t85770*t85753*t85778) \
               *(4.0/3.0)-c0*pow(rho_b[index],4.0/3.0)*(t85788*(cxnl1*gamma_bb[index]*gx*t85661*t85773*(8.0/3.0)- \
               cxnl1*t85751*t85805*t85770*t85789*(8.0/3.0)+cxnl2*t85751*t85770*t85782*t85789*(1.6E1/3.0)-cxnl2*t85813* \
               t85751*t85814*t85770*t85754+cxnl3*gamma_bb[index]*gx*t85751*t85770*t85790*t85778*8.0-cxnl3*gamma_bb[index]* \
               gx*t85810*t85751*t85770*t85753*t85809)-t85794*(t85803*t85783-t85803*t85766*1.0/(t85768*t85768)-t85803* \
               t85767*t85785*6.0+t85803*t85786*t85769*5.0+t85803*t85766*t85767*1.0/(t85768*t85768*t85768*t85768)* \
               6.0-t85803*t85766*1.0/(t85768*t85768*t85768*t85768*t85768*t85768)*t85769*5.0)+cx1*gamma_bb[index]* \
               gx*t85661*t85773*(8.0/3.0)-cx1*t85751*t85805*t85770*t85789*(8.0/3.0)+cx2*t85751*t85770*t85782*t85789* \
               (1.6E1/3.0)-cx2*t85813*t85751*t85814*t85770*t85754+cx3*gamma_bb[index]*gx*t85751*t85770*t85790*t85778* \
               8.0-cx3*gamma_bb[index]*gx*t85810*t85751*t85770*t85753*t85809))*(X-1.0)-(rho_b[index]*(t85628-t85610* \
               t85607*t85748)+rho_a[index]*(t85675-t85610*t85607*(t85675-c0f*log((t85611*(1.0/2.0))/(b1f*t85589+b3f* \
               t85590+b2f*c*t85587+b4f*t85591*t85592)+1.0)*(a1f*c*t85587+1.0)*2.0))-t85629*(t85646+t85749-t85610* \
               t85651*t85652*t85691*t85657))*(ccab1*gamma_bb[index]*gcab*t85661*t85678*(4.0/3.0)-ccab2*t85660*1.0/ \
               (t85670*t85670)*t85658*(gamma_bb[index]*gcab*t85661*(8.0/3.0)+gamma_bb[index]*t85661*t85658*t85659* \
               (8.0/3.0))-ccab1*gamma_bb[index]*t85661*t85658*1.0/(t85667*t85667)*t85659*(4.0/3.0)+ccab2*gamma_bb[index]* \
               t85661*t85658*t85676*t85659*(8.0/3.0)-ccab3*gcab*t85660*1.0/(t85674*t85674)*t85658*t85659*(gamma_bb[index]* \
               gcab*t85661*4.0+gamma_bb[index]*t85661*t85658*t85659*8.0+gamma_bb[index]*gcab*t85660*t85661*t85658* \
               4.0)+ccab3*gamma_bb[index]*gcab*t85660*t85661*t85658*t85677*4.0)-(ccab0+ccab1*gcab*t85659*t85678+ccab2* \
               t85660*t85658*t85676+ccab3*gcab*t85660*t85658*t85659*t85677)*(-t85628+t85646+t85749+t85629*(t85725- \
               t85610*t85651*t85652*t85657*(t85725-(t85690*1.0/(t85684*t85684)*(b2f*c*t85679*(1.0/3.0)+b4f*t85591* \
               t85696*(2.0/3.0)+b1f*c*t85679*t85697*(1.0/6.0)+b3f*c*t85632*t85679*(1.0/2.0)))/t85687+a1f*c*c0f*t85679* \
               t85688*(2.0/3.0)-a1p*c*c0p*t85643*t85679*(2.0/3.0))-a1p*c*c0p*t85643*t85679*(2.0/3.0)+t85610*t85722* \
               t85651*t85652*t85691+t85610*t85652*t85691*t85718*t85657*4.0+t85610*t85651*t85691*t85647*t85648*t85657* \
               4.0-Aa*t85610*t85705*t85715*t85717*t85657*(t85652*t85718*4.0+t85651*t85647*t85648*4.0)*2.0-Aa*t85610* \
               t85722*t85705*t85715*t85724*t85717*2.0+(t85610*1.0/(t85711*t85711)*t85705*t85724*t85717*t85657*(b2a* \
               c*t85679*(1.0/3.0)+b4a*t85591*t85696*(2.0/3.0)+b1a*c*t85679*t85697*(1.0/6.0)+b3a*c*t85632*t85679*(1.0/ \
               2.0)))/t85714-Aa*a1a*c*t85610*t85705*t85715*t85724*t85657*t85679*(2.0/3.0))+rho_b[index]*(-t85747+ \
               t85838+t85610*t85607*(t85747+t85837-t85830*t85831*t85727*t85836-a1p*c*c0p*t85625*t85736*(2.0/3.0)) \
               )+t85610*t85607*t85748-t85610*t85651*t85652*t85691*t85657)+rho_b[index]*t85842*(-t85747+t85838+t85610* \
               t85607*(t85747+t85837-t85838-t85830*t85831*t85727*t85836))+rho_b[index]*t85817*(ccaa1*gamma_bb[index]* \
               gcaa*t85820*t85661*(8.0/3.0)+ccaa2*t85751*t85752*t85829*t85789*(1.6E1/3.0)-ccaa1*t85751*t85752*1.0/ \
               (t85819*t85819)*t85789*(8.0/3.0)-ccaa2*t85751*t85752*t85754*1.0/(t85828*t85828)*(gamma_bb[index]*gcaa* \
               t85661*(1.6E1/3.0)+t85751*t85752*t85789*(1.6E1/3.0))+ccaa3*gamma_bb[index]*gcaa*t85751*t85752*t85825* \
               t85790*8.0-ccaa3*gamma_bb[index]*gcaa*t85751*t85752*1.0/(t85824*t85824)*t85753*(gamma_bb[index]*gcaa* \
               t85661*8.0+t85751*t85752*t85789*1.6E1+gamma_bb[index]*gcaa*t85751*t85752*t85790*8.0));
        } else if (rho_a[index] > cutoff_) {
            v_rho_b_[index] = 0.0;
        } else if (rho_b[index] > cutoff_) {
            double t89225 = 1.0/pow(rho_b[index],1.0/3.0);
            double t89226 = c*t89225;
            double t89227 = sqrt(t89226);
            double t89228 = pow(t89226,3.0/2.0);
            double t89229 = c*c;
            double t89230 = 1.0/pow(rho_b[index],2.0/3.0);
            double t89231 = 1.0/c0p;
            double t89232 = b1p*t89227;
            double t89233 = b3p*t89228;
            double t89234 = b4p*t89230*t89229;
            double t89235 = b2p*c*t89225;
            double t89236 = t89232+t89233+t89234+t89235;
            double t89237 = 1.0/t89236;
            double t89238 = t89231*t89237*(1.0/2.0);
            double t89239 = t89238+1.0;
            double t89240 = log(t89239);
            double t89241 = a1p*c*t89225;
            double t89242 = t89241+1.0;
            double t89243 = 1.0/pow(rho_b[index],8.0/3.0);
            double t89244 = gamma_bb[index]*gamma_bb[index];
            double t89245 = gcaa*gcaa;
            double t89246 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
               rho_b[index]*rho_b[index]);
            double t89247 = 1.0/pow(rho_b[index],1.6E1/3.0);
            double t89248 = pow(2.0,1.0/3.0);
            double t89249 = t89248*2.0;
            double t89250 = t89249-2.0;
            double t89251 = two_13*2.0;
            double t89252 = t89251-2.0;
            double t89253 = 1.0/t89252;
            double t89254 = 1.0/c0f;
            double t89255 = b1f*t89227;
            double t89256 = b3f*t89228;
            double t89257 = b4f*t89230*t89229;
            double t89258 = b2f*c*t89225;
            double t89259 = t89255+t89256+t89257+t89258;
            double t89260 = 1.0/t89259;
            double t89261 = t89260*t89254*(1.0/2.0);
            double t89262 = t89261+1.0;
            double t89263 = log(t89262);
            double t89264 = a1f*c*t89225;
            double t89265 = t89264+1.0;
            double t89266 = c0f*t89263*t89265*2.0;
            double t89267 = c0p*t89240*t89242*2.0;
            double t89268 = gamma_bb[index]*gcaa*t89243;
            double t89269 = t89268+1.0;
            double t89270 = 1.0/t89269;
            double t89271 = gamma_bb[index]*gcaa*t89243*3.0;
            double t89272 = gamma_bb[index]*gcaa*t89244*t89245*t89246;
            double t89273 = t89244*t89245*t89247*3.0;
            double t89274 = t89271+t89272+t89273+1.0;
            double t89275 = 1.0/t89274;
            double t89276 = gamma_bb[index]*gcaa*t89243*2.0;
            double t89277 = t89244*t89245*t89247;
            double t89278 = t89276+t89277+1.0;
            double t89279 = 1.0/t89278;
            double t89280 = 1.0/pow(rho_b[index],1.9E1/3.0);
            double t89281 = 1.0/pow(rho_b[index],1.1E1/3.0);
            double t89282 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
               rho_b[index]*rho_b[index]*rho_b[index]);
            double t89283 = 1.0/pow(rho_b[index],4.0/3.0);
            double t89284 = 1.0/pow(rho_b[index],5.0/3.0);
            double t89285 = 1.0/sqrt(t89226);
            double t89286 = 1.0/t89239;
            double t89287 = 1.0/(t89236*t89236);
            double t89288 = b4p*t89229*t89284*(2.0/3.0);
            double t89289 = b2p*c*t89283*(1.0/3.0);
            double t89290 = b1p*c*t89283*t89285*(1.0/6.0);
            double t89291 = b3p*c*t89227*t89283*(1.0/2.0);
            double t89292 = t89290+t89291+t89288+t89289;
            double t89293 = t89242*t89292*t89286*t89287;
            double t89294 = ccaa1*gamma_bb[index]*gcaa*t89243*t89270;
            double t89295 = ccaa3*gamma_bb[index]*gcaa*t89244*t89245*t89246*t89275;
            double t89296 = ccaa2*t89244*t89245*t89247*t89279;
            double t89297 = ccaa0+t89294+t89295+t89296;
            double t89298 = pow(rho_b[index],5.0/3.0);
            double t89299 = C_k*t89298;
            double t89308 = tau_a[index]*1.0E20;
            double t89300 = -t89308+t89299;
            double t89301 = ( (t89300 > 0.0) ?  1.0 : 0.0 ) ;
            double t89302 = t89301*1.0E20;
            double t89303 = 1.0/tau_b[index];
            double t89304 = tau_b[index]*1.0E20;
            double t89305 = t89304-t89299;
            double t89306 = ( (t89305 > 0.0) ?  1.0 : 0.0 ) ;
            double t89307 = C_k*t89303*t89306*t89298;
            double t89309 = t89302+t89307-1.0;
            double t89310 = t89309*t89309;
            double t89311 = t89302+t89307+1.0;
            double t89312 = t89310*t89310;
            double t89313 = gx*gx;
            double t89314 = gamma_bb[index]*gx*t89243;
            double t89315 = t89314+1.0;
            double t89316 = 1.0/t89315;
            double t89317 = gamma_bb[index]*gx*t89243*3.0;
            double t89318 = gamma_bb[index]*gx*t89313*t89244*t89246;
            double t89319 = t89313*t89244*t89247*3.0;
            double t89320 = t89317+t89318+t89319+1.0;
            double t89321 = 1.0/t89320;
            double t89322 = gamma_bb[index]*gx*t89243*2.0;
            double t89323 = t89313*t89244*t89247;
            double t89324 = t89322+t89323+1.0;
            double t89325 = 1.0/t89324;
            double t89326 = X-1.0;
            double t89327 = 1.0/t89311;
            double t89328 = t89309*t89327;
            double t89329 = 1.0/(t89311*t89311*t89311);
            double t89330 = 1.0/(t89311*t89311*t89311*t89311*t89311);
            double t89331 = t89312*t89330*t89309;
            double t89332 = t89331+t89328-t89310*t89309*t89329*2.0;
            double t89333 = cxnl1*gamma_bb[index]*gx*t89243*t89316;
            double t89334 = cxnl3*gamma_bb[index]*gx*t89321*t89313*t89244*t89246;
            double t89335 = cxnl2*t89313*t89244*t89325*t89247;
            double t89336 = cxnl0+t89333+t89334+t89335;
            double t89337 = pow(rho_b[index],2.0/3.0);
            double t89338 = t89308-t89299;
            double t89339 = 0.0 ;
            double t89340 = C_k*t89337*t89339*(5.0E20/3.0);
            double t89341 = C_k*C_k;
            double t89342 = pow(rho_b[index],7.0/3.0);
            double t89343 = 0.0 ;
            double t89344 = C_k*t89303*t89306*t89337*(5.0/3.0);
            double t89346 = t89303*t89341*t89342*t89343*(5.0/3.0);
            double t89345 = t89340+t89344-t89346;
            double t89347 = 1.0/(t89315*t89315);
            double t89348 = gamma_bb[index]*gx*t89281*8.0;
            double t89349 = gamma_bb[index]*gx*t89313*t89244*t89282*8.0;
            double t89350 = t89313*t89244*t89280*1.6E1;
            double t89351 = t89350+t89348+t89349;
            double t89352 = 1.0/(t89320*t89320);
            double t89353 = gamma_bb[index]*gx*t89281*(1.6E1/3.0);
            double t89354 = t89313*t89244*t89280*(1.6E1/3.0);
            double t89355 = t89353+t89354;
            double t89356 = 1.0/(t89324*t89324);
            v_rho_b_[index] = -t89297*(t89267+t89250*t89253*(t89266-c0p*t89240*t89242*2.0))+rho_b[index]*(t89267+ \
               t89250*t89253*(t89266-t89267))*(ccaa1*gamma_bb[index]*gcaa*t89270*t89281*(8.0/3.0)+ccaa2*t89244*t89280* \
               t89245*t89279*(1.6E1/3.0)-ccaa1*t89244*t89280*t89245*1.0/(t89269*t89269)*(8.0/3.0)-ccaa2*t89244*t89245* \
               t89247*1.0/(t89278*t89278)*(gamma_bb[index]*gcaa*t89281*(1.6E1/3.0)+t89244*t89280*t89245*(1.6E1/3.0) \
               )+ccaa3*gamma_bb[index]*gcaa*t89244*t89245*t89282*t89275*8.0-ccaa3*gamma_bb[index]*gcaa*t89244*t89245* \
               t89246*1.0/(t89274*t89274)*(gamma_bb[index]*gcaa*t89281*8.0+t89244*t89280*t89245*1.6E1+gamma_bb[index]* \
               gcaa*t89244*t89245*t89282*8.0))+rho_b[index]*t89297*(-t89293+t89250*t89253*(t89293-(t89265*1.0/(t89259* \
               t89259)*(b2f*c*t89283*(1.0/3.0)+b4f*t89229*t89284*(2.0/3.0)+b1f*c*t89283*t89285*(1.0/6.0)+b3f*c*t89227* \
               t89283*(1.0/2.0)))/t89262+a1f*c*c0f*t89263*t89283*(2.0/3.0)-a1p*c*c0p*t89240*t89283*(2.0/3.0))+a1p* \
               c*c0p*t89240*t89283*(2.0/3.0))-c0*pow(rho_b[index],1.0/3.0)*t89326*(cx0+t89332*t89336+cx1*gamma_bb[index]* \
               gx*t89243*t89316+cx2*t89313*t89244*t89325*t89247+cx3*gamma_bb[index]*gx*t89321*t89313*t89244*t89246) \
               *(4.0/3.0)+c0*pow(rho_b[index],4.0/3.0)*t89326*(t89332*(cxnl1*gamma_bb[index]*gx*t89316*t89281*(8.0/ \
               3.0)+cxnl2*t89313*t89244*t89280*t89325*(1.6E1/3.0)-cxnl1*t89313*t89244*t89280*t89347*(8.0/3.0)-cxnl2* \
               t89313*t89244*t89247*t89355*t89356+cxnl3*gamma_bb[index]*gx*t89321*t89313*t89244*t89282*8.0-cxnl3* \
               gamma_bb[index]*gx*t89313*t89351*t89244*t89352*t89246)-t89336*(t89327*t89345-1.0/(t89311*t89311)*t89309* \
               t89345+t89312*t89330*t89345*5.0-t89310*t89345*t89329*6.0+t89310*1.0/(t89311*t89311*t89311*t89311)* \
               t89309*t89345*6.0-1.0/(t89311*t89311*t89311*t89311*t89311*t89311)*t89312*t89309*t89345*5.0)+cx1*gamma_bb[index]* \
               gx*t89316*t89281*(8.0/3.0)-cx1*t89313*t89244*t89280*t89347*(8.0/3.0)+cx2*t89313*t89244*t89280*t89325* \
               (1.6E1/3.0)-cx2*t89313*t89244*t89247*t89355*t89356+cx3*gamma_bb[index]*gx*t89321*t89313*t89244*t89282* \
               8.0-cx3*gamma_bb[index]*gx*t89313*t89351*t89244*t89352*t89246);
        } else {
            v_rho_b_[index] = 0.0;
        } 

        if (is_gga_) {

            //V_gamma_aa
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t85844 = 1.0/pow(rho_a[index],1.0/3.0);
                double t85845 = c*t85844;
                double t85846 = sqrt(t85845);
                double t85847 = pow(t85845,3.0/2.0);
                double t85848 = c*c;
                double t85849 = 1.0/pow(rho_a[index],2.0/3.0);
                double t85850 = 1.0/c0p;
                double t85851 = b1p*t85846;
                double t85852 = b3p*t85847;
                double t85853 = b4p*t85848*t85849;
                double t85854 = b2p*c*t85844;
                double t85855 = t85851+t85852+t85853+t85854;
                double t85856 = 1.0/t85855;
                double t85857 = t85850*t85856*(1.0/2.0);
                double t85858 = t85857+1.0;
                double t85859 = log(t85858);
                double t85860 = a1p*c*t85844;
                double t85861 = t85860+1.0;
                double t85862 = pow(2.0,1.0/3.0);
                double t85863 = t85862*2.0;
                double t85864 = t85863-2.0;
                double t85865 = two_13*2.0;
                double t85866 = t85865-2.0;
                double t85867 = 1.0/t85866;
                double t85868 = 1.0/c0f;
                double t85869 = 1.0/pow(rho_b[index],1.0/3.0);
                double t85870 = c*t85869;
                double t85871 = sqrt(t85870);
                double t85872 = pow(t85870,3.0/2.0);
                double t85873 = 1.0/pow(rho_b[index],2.0/3.0);
                double t85874 = b1p*t85871;
                double t85875 = b3p*t85872;
                double t85876 = b4p*t85873*t85848;
                double t85877 = b2p*c*t85869;
                double t85878 = t85874+t85875+t85876+t85877;
                double t85879 = 1.0/t85878;
                double t85880 = t85850*t85879*(1.0/2.0);
                double t85881 = t85880+1.0;
                double t85882 = log(t85881);
                double t85883 = a1p*c*t85869;
                double t85884 = t85883+1.0;
                double t85885 = c0p*t85882*t85884*2.0;
                double t85886 = rho_a[index]+rho_b[index];
                double t85887 = 1.0/pow(t85886,1.0/3.0);
                double t85888 = c*t85887;
                double t85889 = sqrt(t85888);
                double t85890 = pow(t85888,3.0/2.0);
                double t85891 = 1.0/pow(t85886,2.0/3.0);
                double t85892 = b1p*t85889;
                double t85893 = b3p*t85890;
                double t85894 = b4p*t85891*t85848;
                double t85895 = b2p*c*t85887;
                double t85896 = t85892+t85893+t85894+t85895;
                double t85897 = 1.0/t85896;
                double t85898 = t85850*t85897*(1.0/2.0);
                double t85899 = t85898+1.0;
                double t85900 = log(t85899);
                double t85901 = a1p*c*t85887;
                double t85902 = t85901+1.0;
                double t85903 = c0p*t85900*t85902*2.0;
                double t85904 = rho_a[index]-rho_b[index];
                double t85905 = t85904*t85904;
                double t85906 = 1.0/t85886;
                double t85907 = t85904*t85906;
                double t85908 = 1.0/(t85886*t85886*t85886*t85886);
                double t85909 = t85905*t85905;
                double t85910 = t85907+1.0;
                double t85911 = pow(t85910,4.0/3.0);
                double t85912 = -t85907+1.0;
                double t85913 = pow(t85912,4.0/3.0);
                double t85914 = t85911+t85913-2.0;
                double t85915 = 1.0/pow(rho_a[index],8.0/3.0);
                double t85916 = gamma_aa[index]*t85915*(1.0/2.0);
                double t85917 = 1.0/pow(rho_b[index],8.0/3.0);
                double t85918 = gamma_bb[index]*t85917*(1.0/2.0);
                double t85919 = t85916+t85918;
                double t85920 = gcab*t85919;
                double t85921 = t85920+1.0;
                double t85922 = gcab*gcab;
                double t85923 = t85919*t85919;
                double t85924 = t85922*t85923;
                double t85925 = gcab*t85919*2.0;
                double t85926 = t85924+t85925+1.0;
                double t85927 = t85922*t85923*3.0;
                double t85928 = gcab*t85922*t85923*t85919;
                double t85929 = gcab*t85919*3.0;
                double t85930 = t85927+t85928+t85929+1.0;
                double t85931 = c0p*t85861*t85859*2.0;
                double t85932 = b1f*t85846;
                double t85933 = b3f*t85847;
                double t85934 = b4f*t85848*t85849;
                double t85935 = b2f*c*t85844;
                double t85936 = t85932+t85933+t85934+t85935;
                double t85937 = 1.0/t85936;
                double t85938 = t85937*t85868*(1.0/2.0);
                double t85939 = t85938+1.0;
                double t85940 = log(t85939);
                double t85941 = a1f*c*t85844;
                double t85942 = t85941+1.0;
                double t85943 = t85931-c0f*t85940*t85942*2.0;
                double t85944 = t85931-t85943*t85864*t85867;
                double t85945 = gcaa*gcaa;
                double t85946 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t85947 = gamma_aa[index]*gamma_aa[index];
                double t85948 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t85949 = gamma_aa[index]*gcaa*t85915;
                double t85950 = t85949+1.0;
                double t85951 = gamma_aa[index]*gcaa*t85915*3.0;
                double t85952 = gamma_aa[index]*gcaa*t85945*t85947*t85948;
                double t85953 = t85945*t85946*t85947*3.0;
                double t85954 = t85951+t85952+t85953+1.0;
                double t85955 = gamma_aa[index]*gcaa*t85915*2.0;
                double t85956 = t85945*t85946*t85947;
                double t85957 = t85955+t85956+1.0;
                double t85958 = pow(rho_a[index],5.0/3.0);
                double t85959 = C_k*t85958;
                double t85960 = tau_a[index]*1.0E20;
                double t85961 = 1.0/tau_a[index];
                double t85962 = t85960-t85959;
                double t85963 = ( (t85962 > 0.0) ?  1.0 : 0.0 ) ;
                double t85964 = C_k*t85961*t85963*t85958;
                double t85965 = -t85960+t85959;
                double t85966 = ( (t85965 > 0.0) ?  1.0 : 0.0 ) ;
                double t85967 = t85966*1.0E20;
                double t85968 = t85964+t85967-1.0;
                double t85969 = t85968*t85968;
                double t85970 = t85964+t85967+1.0;
                double t85971 = t85969*t85969;
                double t85972 = gx*gx;
                double t85973 = gamma_aa[index]*gx*t85915;
                double t85974 = t85973+1.0;
                double t85975 = gamma_aa[index]*gx*t85915*3.0;
                double t85976 = gamma_aa[index]*gx*t85972*t85947*t85948;
                double t85977 = t85972*t85946*t85947*3.0;
                double t85978 = t85975+t85976+t85977+1.0;
                double t85979 = gamma_aa[index]*gx*t85915*2.0;
                double t85980 = t85972*t85946*t85947;
                double t85981 = t85980+t85979+1.0;
                double t85982 = 1.0/t85974;
                double t85983 = 1.0/t85981;
                double t85984 = 1.0/t85978;
                double t85985 = 1.0/(t85974*t85974);
                double t85986 = gx*t85915*3.0;
                double t85987 = gamma_aa[index]*t85972*t85946*6.0;
                double t85988 = gx*t85972*t85947*t85948*3.0;
                double t85989 = t85986+t85987+t85988;
                double t85990 = 1.0/(t85978*t85978);
                double t85991 = gx*t85915*2.0;
                double t85992 = gamma_aa[index]*t85972*t85946*2.0;
                double t85993 = t85991+t85992;
                double t85994 = 1.0/(t85981*t85981);
                v_gamma_aa_[index] = (rho_a[index]*t85944+rho_b[index]*(t85885-t85864*t85867*(t85885-c0f*log((t85868* \
                   (1.0/2.0))/(b1f*t85871+b3f*t85872+b2f*c*t85869+b4f*t85873*t85848)+1.0)*(a1f*c*t85869+1.0)*2.0))-t85886* \
                   (t85903-t85914*t85908*t85909*t85867*(t85903-c0f*log((t85868*(1.0/2.0))/(b1f*t85889+b3f*t85890+b2f* \
                   c*t85887+b4f*t85891*t85848)+1.0)*(a1f*c*t85887+1.0)*2.0)+(Aa*t85914*t85867*log((1.0/2.0)/(Aa*(b1a* \
                   t85889+b3a*t85890+b2a*c*t85887+b4a*t85891*t85848))+1.0)*(t85908*t85909-1.0)*(a1a*c*t85887+1.0)*2.0) \
                   /d2fz0))*((ccab1*gcab*t85915*(1.0/2.0))/t85921-ccab2*t85922*t85923*1.0/(t85926*t85926)*(gcab*t85915+ \
                   t85922*t85915*t85919)-ccab1*1.0/(t85921*t85921)*t85922*t85915*t85919*(1.0/2.0)+(ccab2*t85922*t85915* \
                   t85919)/t85926+(ccab3*gcab*t85922*t85923*t85915*(3.0/2.0))/t85930-ccab3*gcab*1.0/(t85930*t85930)*t85922* \
                   t85923*t85919*(gcab*t85915*(3.0/2.0)+t85922*t85915*t85919*3.0+gcab*t85922*t85923*t85915*(3.0/2.0)) \
                   )-rho_a[index]*t85944*((ccaa1*gcaa*t85915)/t85950-ccaa1*gamma_aa[index]*1.0/(t85950*t85950)*t85945* \
                   t85946+(ccaa2*gamma_aa[index]*t85945*t85946*2.0)/t85957-ccaa2*t85945*t85946*t85947*1.0/(t85957*t85957) \
                   *(gcaa*t85915*2.0+gamma_aa[index]*t85945*t85946*2.0)+(ccaa3*gcaa*t85945*t85947*t85948*3.0)/t85954- \
                   ccaa3*gamma_aa[index]*gcaa*t85945*1.0/(t85954*t85954)*t85947*t85948*(gcaa*t85915*3.0+gamma_aa[index]* \
                   t85945*t85946*6.0+gcaa*t85945*t85947*t85948*3.0))-c0*pow(rho_a[index],4.0/3.0)*(X-1.0)*((t85968/t85970+ \
                   1.0/(t85970*t85970*t85970*t85970*t85970)*t85971*t85968-1.0/(t85970*t85970*t85970)*t85968*t85969*2.0) \
                   *(cxnl1*gx*t85915*t85982+cxnl2*gamma_aa[index]*t85972*t85946*t85983*2.0-cxnl1*gamma_aa[index]*t85972* \
                   t85946*t85985-cxnl2*t85972*t85946*t85947*t85993*t85994+cxnl3*gx*t85972*t85947*t85948*t85984*3.0-cxnl3* \
                   gamma_aa[index]*gx*t85972*t85990*t85947*t85948*t85989)+cx1*gx*t85915*t85982-cx1*gamma_aa[index]*t85972* \
                   t85946*t85985+cx2*gamma_aa[index]*t85972*t85946*t85983*2.0-cx2*t85972*t85946*t85947*t85993*t85994+ \
                   cx3*gx*t85972*t85947*t85948*t85984*3.0-cx3*gamma_aa[index]*gx*t85972*t85990*t85947*t85948*t85989);
            } else if (rho_a[index] > cutoff_) {
                double t90442 = 1.0/pow(rho_a[index],1.0/3.0);
                double t90443 = c*t90442;
                double t90444 = sqrt(t90443);
                double t90445 = pow(t90443,3.0/2.0);
                double t90446 = c*c;
                double t90447 = 1.0/pow(rho_a[index],2.0/3.0);
                double t90448 = 1.0/c0p;
                double t90449 = b1p*t90444;
                double t90450 = b3p*t90445;
                double t90451 = b4p*t90446*t90447;
                double t90452 = b2p*c*t90442;
                double t90453 = t90450+t90451+t90452+t90449;
                double t90454 = 1.0/t90453;
                double t90455 = t90454*t90448*(1.0/2.0);
                double t90456 = t90455+1.0;
                double t90457 = log(t90456);
                double t90458 = a1p*c*t90442;
                double t90459 = t90458+1.0;
                double t90460 = 1.0/pow(rho_a[index],8.0/3.0);
                double t90461 = gcaa*gcaa;
                double t90462 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t90463 = gamma_aa[index]*gamma_aa[index];
                double t90464 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t90465 = gamma_aa[index]*gcaa*t90460;
                double t90466 = t90465+1.0;
                double t90467 = gamma_aa[index]*gcaa*t90460*3.0;
                double t90468 = gamma_aa[index]*gcaa*t90461*t90463*t90464;
                double t90469 = t90461*t90462*t90463*3.0;
                double t90470 = t90467+t90468+t90469+1.0;
                double t90471 = gamma_aa[index]*gcaa*t90460*2.0;
                double t90472 = t90461*t90462*t90463;
                double t90473 = t90471+t90472+1.0;
                double t90474 = pow(rho_a[index],5.0/3.0);
                double t90475 = C_k*t90474;
                double t90476 = tau_a[index]*1.0E20;
                double t90477 = 1.0/tau_a[index];
                double t90478 = -t90475+t90476;
                double t90479 = ( (t90478 > 0.0) ?  1.0 : 0.0 ) ;
                double t90480 = C_k*t90474*t90477*t90479;
                double t90481 = t90475-t90476;
                double t90482 = ( (t90481 > 0.0) ?  1.0 : 0.0 ) ;
                double t90483 = t90482*1.0E20;
                double t90484 = t90480+t90483-1.0;
                double t90485 = t90484*t90484;
                double t90486 = t90480+t90483+1.0;
                double t90487 = t90485*t90485;
                double t90488 = gx*gx;
                double t90489 = gamma_aa[index]*gx*t90460;
                double t90490 = t90489+1.0;
                double t90491 = gamma_aa[index]*gx*t90460*3.0;
                double t90492 = gamma_aa[index]*gx*t90463*t90464*t90488;
                double t90493 = t90462*t90463*t90488*3.0;
                double t90494 = t90491+t90492+t90493+1.0;
                double t90495 = gamma_aa[index]*gx*t90460*2.0;
                double t90496 = t90462*t90463*t90488;
                double t90497 = t90495+t90496+1.0;
                double t90498 = 1.0/t90490;
                double t90499 = 1.0/t90497;
                double t90500 = 1.0/t90494;
                double t90501 = 1.0/(t90490*t90490);
                double t90502 = gx*t90460*3.0;
                double t90503 = gamma_aa[index]*t90462*t90488*6.0;
                double t90504 = gx*t90463*t90464*t90488*3.0;
                double t90505 = t90502+t90503+t90504;
                double t90506 = 1.0/(t90494*t90494);
                double t90507 = gx*t90460*2.0;
                double t90508 = gamma_aa[index]*t90462*t90488*2.0;
                double t90509 = t90507+t90508;
                double t90510 = 1.0/(t90497*t90497);
                v_gamma_aa_[index] = -rho_a[index]*(((pow(2.0,1.0/3.0)*2.0-2.0)*(c0f*log((1.0/2.0)/(c0f*(b1f*t90444+ \
                   b3f*t90445+b2f*c*t90442+b4f*t90446*t90447))+1.0)*(a1f*c*t90442+1.0)*2.0-c0p*t90457*t90459*2.0))/(two_13* \
                   2.0-2.0)+c0p*t90457*t90459*2.0)*((ccaa1*gcaa*t90460)/t90466+(ccaa2*gamma_aa[index]*t90461*t90462*2.0) \
                   /t90473-ccaa1*gamma_aa[index]*t90461*t90462*1.0/(t90466*t90466)-ccaa2*t90461*t90462*t90463*1.0/(t90473* \
                   t90473)*(gcaa*t90460*2.0+gamma_aa[index]*t90461*t90462*2.0)+(ccaa3*gcaa*t90461*t90463*t90464*3.0)/ \
                   t90470-ccaa3*gamma_aa[index]*gcaa*t90461*1.0/(t90470*t90470)*t90463*t90464*(gcaa*t90460*3.0+gamma_aa[index]* \
                   t90461*t90462*6.0+gcaa*t90461*t90463*t90464*3.0))-c0*pow(rho_a[index],4.0/3.0)*(X-1.0)*((t90484/t90486- \
                   t90484*t90485*1.0/(t90486*t90486*t90486)*2.0+t90484*1.0/(t90486*t90486*t90486*t90486*t90486)*t90487) \
                   *(cxnl1*gx*t90460*t90498-cxnl1*gamma_aa[index]*t90501*t90462*t90488+cxnl2*gamma_aa[index]*t90462*t90488* \
                   t90499*2.0-cxnl2*t90510*t90462*t90463*t90509*t90488+cxnl3*gx*t90500*t90463*t90464*t90488*3.0-cxnl3* \
                   gamma_aa[index]*gx*t90505*t90506*t90463*t90464*t90488)+cx1*gx*t90460*t90498-cx1*gamma_aa[index]*t90501* \
                   t90462*t90488+cx2*gamma_aa[index]*t90462*t90488*t90499*2.0-cx2*t90510*t90462*t90463*t90509*t90488+ \
                   cx3*gx*t90500*t90463*t90464*t90488*3.0-cx3*gamma_aa[index]*gx*t90505*t90506*t90463*t90464*t90488);
            } else if (rho_b[index] > cutoff_) {
                v_gamma_aa_[index] = 0.0;
            } else {
                v_gamma_aa_[index] = 0.0;
            } 

            //V_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_ab_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_ab_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_ab_[index] = 0.0;
            } else {
                v_gamma_ab_[index] = 0.0;
            } 

            //V_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t85997 = 1.0/pow(rho_a[index],1.0/3.0);
                double t85998 = c*t85997;
                double t85999 = sqrt(t85998);
                double t86000 = pow(t85998,3.0/2.0);
                double t86001 = c*c;
                double t86002 = 1.0/pow(rho_a[index],2.0/3.0);
                double t86003 = 1.0/c0p;
                double t86004 = b1p*t85999;
                double t86005 = b3p*t86000;
                double t86006 = b4p*t86001*t86002;
                double t86007 = b2p*c*t85997;
                double t86008 = t86004+t86005+t86006+t86007;
                double t86009 = 1.0/t86008;
                double t86010 = t86003*t86009*(1.0/2.0);
                double t86011 = t86010+1.0;
                double t86012 = log(t86011);
                double t86013 = a1p*c*t85997;
                double t86014 = t86013+1.0;
                double t86015 = pow(2.0,1.0/3.0);
                double t86016 = t86015*2.0;
                double t86017 = t86016-2.0;
                double t86018 = two_13*2.0;
                double t86019 = t86018-2.0;
                double t86020 = 1.0/t86019;
                double t86021 = 1.0/c0f;
                double t86022 = 1.0/pow(rho_b[index],1.0/3.0);
                double t86023 = c*t86022;
                double t86024 = sqrt(t86023);
                double t86025 = pow(t86023,3.0/2.0);
                double t86026 = 1.0/pow(rho_b[index],2.0/3.0);
                double t86027 = b1p*t86024;
                double t86028 = b3p*t86025;
                double t86029 = b4p*t86001*t86026;
                double t86030 = b2p*c*t86022;
                double t86031 = t86030+t86027+t86028+t86029;
                double t86032 = 1.0/t86031;
                double t86033 = t86003*t86032*(1.0/2.0);
                double t86034 = t86033+1.0;
                double t86035 = log(t86034);
                double t86036 = a1p*c*t86022;
                double t86037 = t86036+1.0;
                double t86038 = c0p*t86035*t86037*2.0;
                double t86039 = rho_a[index]+rho_b[index];
                double t86040 = 1.0/pow(t86039,1.0/3.0);
                double t86041 = c*t86040;
                double t86042 = sqrt(t86041);
                double t86043 = pow(t86041,3.0/2.0);
                double t86044 = 1.0/pow(t86039,2.0/3.0);
                double t86045 = b1p*t86042;
                double t86046 = b3p*t86043;
                double t86047 = b4p*t86001*t86044;
                double t86048 = b2p*c*t86040;
                double t86049 = t86045+t86046+t86047+t86048;
                double t86050 = 1.0/t86049;
                double t86051 = t86003*t86050*(1.0/2.0);
                double t86052 = t86051+1.0;
                double t86053 = log(t86052);
                double t86054 = a1p*c*t86040;
                double t86055 = t86054+1.0;
                double t86056 = c0p*t86053*t86055*2.0;
                double t86057 = rho_a[index]-rho_b[index];
                double t86058 = t86057*t86057;
                double t86059 = 1.0/t86039;
                double t86060 = t86057*t86059;
                double t86061 = 1.0/(t86039*t86039*t86039*t86039);
                double t86062 = t86058*t86058;
                double t86063 = t86060+1.0;
                double t86064 = pow(t86063,4.0/3.0);
                double t86065 = -t86060+1.0;
                double t86066 = pow(t86065,4.0/3.0);
                double t86067 = t86064+t86066-2.0;
                double t86068 = 1.0/pow(rho_b[index],8.0/3.0);
                double t86069 = 1.0/pow(rho_a[index],8.0/3.0);
                double t86070 = gamma_aa[index]*t86069*(1.0/2.0);
                double t86071 = gamma_bb[index]*t86068*(1.0/2.0);
                double t86072 = t86070+t86071;
                double t86073 = gcab*t86072;
                double t86074 = t86073+1.0;
                double t86075 = gcab*gcab;
                double t86076 = t86072*t86072;
                double t86077 = t86075*t86076;
                double t86078 = gcab*t86072*2.0;
                double t86079 = t86077+t86078+1.0;
                double t86080 = t86075*t86076*3.0;
                double t86081 = gcab*t86072*t86075*t86076;
                double t86082 = gcab*t86072*3.0;
                double t86083 = t86080+t86081+t86082+1.0;
                double t86084 = c0p*t86012*t86014*2.0;
                double t86085 = b1f*t86024;
                double t86086 = b3f*t86025;
                double t86087 = b4f*t86001*t86026;
                double t86088 = b2f*c*t86022;
                double t86089 = t86085+t86086+t86087+t86088;
                double t86090 = 1.0/t86089;
                double t86091 = t86021*t86090*(1.0/2.0);
                double t86092 = t86091+1.0;
                double t86093 = log(t86092);
                double t86094 = a1f*c*t86022;
                double t86095 = t86094+1.0;
                double t86096 = t86038-c0f*t86093*t86095*2.0;
                double t86097 = t86038-t86020*t86017*t86096;
                double t86098 = gcaa*gcaa;
                double t86099 = 1.0/pow(rho_b[index],1.6E1/3.0);
                double t86100 = gamma_bb[index]*gamma_bb[index];
                double t86101 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]);
                double t86102 = gamma_bb[index]*gcaa*t86068;
                double t86103 = t86102+1.0;
                double t86104 = gamma_bb[index]*gcaa*t86068*3.0;
                double t86105 = gamma_bb[index]*gcaa*t86100*t86101*t86098;
                double t86106 = t86100*t86098*t86099*3.0;
                double t86107 = t86104+t86105+t86106+1.0;
                double t86108 = gamma_bb[index]*gcaa*t86068*2.0;
                double t86109 = t86100*t86098*t86099;
                double t86110 = t86108+t86109+1.0;
                double t86111 = pow(rho_b[index],5.0/3.0);
                double t86112 = C_k*t86111;
                double t86121 = tau_a[index]*1.0E20;
                double t86113 = t86112-t86121;
                double t86114 = ( (t86113 > 0.0) ?  1.0 : 0.0 ) ;
                double t86115 = t86114*1.0E20;
                double t86116 = 1.0/tau_b[index];
                double t86117 = tau_b[index]*1.0E20;
                double t86118 = -t86112+t86117;
                double t86119 = ( (t86118 > 0.0) ?  1.0 : 0.0 ) ;
                double t86120 = C_k*t86111*t86116*t86119;
                double t86122 = t86120+t86115-1.0;
                double t86123 = t86122*t86122;
                double t86124 = t86120+t86115+1.0;
                double t86125 = t86123*t86123;
                double t86126 = gx*gx;
                double t86127 = gamma_bb[index]*gx*t86068;
                double t86128 = t86127+1.0;
                double t86129 = gamma_bb[index]*gx*t86068*3.0;
                double t86130 = gamma_bb[index]*gx*t86100*t86101*t86126;
                double t86131 = t86100*t86126*t86099*3.0;
                double t86132 = t86130+t86131+t86129+1.0;
                double t86133 = gamma_bb[index]*gx*t86068*2.0;
                double t86134 = t86100*t86126*t86099;
                double t86135 = t86133+t86134+1.0;
                double t86136 = 1.0/t86128;
                double t86137 = 1.0/t86135;
                double t86138 = 1.0/t86132;
                double t86139 = 1.0/(t86128*t86128);
                double t86140 = gx*t86068*3.0;
                double t86141 = gamma_bb[index]*t86126*t86099*6.0;
                double t86142 = gx*t86100*t86101*t86126*3.0;
                double t86143 = t86140+t86141+t86142;
                double t86144 = 1.0/(t86132*t86132);
                double t86145 = gx*t86068*2.0;
                double t86146 = gamma_bb[index]*t86126*t86099*2.0;
                double t86147 = t86145+t86146;
                double t86148 = 1.0/(t86135*t86135);
                v_gamma_bb_[index] = (rho_b[index]*t86097+rho_a[index]*(t86084-t86020*t86017*(t86084-c0f*log((t86021* \
                   (1.0/2.0))/(b1f*t85999+b3f*t86000+b2f*c*t85997+b4f*t86001*t86002)+1.0)*(a1f*c*t85997+1.0)*2.0))-t86039* \
                   (t86056-t86020*t86061*t86062*t86067*(t86056-c0f*log((t86021*(1.0/2.0))/(b1f*t86042+b3f*t86043+b2f* \
                   c*t86040+b4f*t86001*t86044)+1.0)*(a1f*c*t86040+1.0)*2.0)+(Aa*t86020*t86067*log((1.0/2.0)/(Aa*(b1a* \
                   t86042+b3a*t86043+b2a*c*t86040+b4a*t86001*t86044))+1.0)*(t86061*t86062-1.0)*(a1a*c*t86040+1.0)*2.0) \
                   /d2fz0))*((ccab1*gcab*t86068*(1.0/2.0))/t86074-ccab2*t86075*t86076*1.0/(t86079*t86079)*(gcab*t86068+ \
                   t86072*t86075*t86068)-ccab1*t86072*1.0/(t86074*t86074)*t86075*t86068*(1.0/2.0)+(ccab2*t86072*t86075* \
                   t86068)/t86079+(ccab3*gcab*t86075*t86076*t86068*(3.0/2.0))/t86083-ccab3*gcab*t86072*1.0/(t86083*t86083) \
                   *t86075*t86076*(gcab*t86068*(3.0/2.0)+t86072*t86075*t86068*3.0+gcab*t86075*t86076*t86068*(3.0/2.0) \
                   ))-rho_b[index]*t86097*((ccaa1*gcaa*t86068)/t86103+(ccaa2*gamma_bb[index]*t86098*t86099*2.0)/t86110- \
                   ccaa1*gamma_bb[index]*1.0/(t86103*t86103)*t86098*t86099-ccaa2*t86100*1.0/(t86110*t86110)*t86098*t86099* \
                   (gcaa*t86068*2.0+gamma_bb[index]*t86098*t86099*2.0)+(ccaa3*gcaa*t86100*t86101*t86098*3.0)/t86107-ccaa3* \
                   gamma_bb[index]*gcaa*t86100*t86101*1.0/(t86107*t86107)*t86098*(gcaa*t86068*3.0+gamma_bb[index]*t86098* \
                   t86099*6.0+gcaa*t86100*t86101*t86098*3.0))-c0*pow(rho_b[index],4.0/3.0)*(X-1.0)*((t86122/t86124-t86122* \
                   t86123*1.0/(t86124*t86124*t86124)*2.0+t86122*1.0/(t86124*t86124*t86124*t86124*t86124)*t86125)*(cxnl1* \
                   gx*t86136*t86068+cxnl2*gamma_bb[index]*t86126*t86137*t86099*2.0-cxnl1*gamma_bb[index]*t86126*t86139* \
                   t86099-cxnl2*t86100*t86126*t86147*t86148*t86099+cxnl3*gx*t86100*t86101*t86126*t86138*3.0-cxnl3*gamma_bb[index]* \
                   gx*t86100*t86101*t86143*t86126*t86144)+cx1*gx*t86136*t86068-cx1*gamma_bb[index]*t86126*t86139*t86099+ \
                   cx2*gamma_bb[index]*t86126*t86137*t86099*2.0-cx2*t86100*t86126*t86147*t86148*t86099+cx3*gx*t86100* \
                   t86101*t86126*t86138*3.0-cx3*gamma_bb[index]*gx*t86100*t86101*t86143*t86126*t86144);
            } else if (rho_a[index] > cutoff_) {
                v_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                double t89360 = 1.0/pow(rho_b[index],1.0/3.0);
                double t89361 = c*t89360;
                double t89362 = sqrt(t89361);
                double t89363 = pow(t89361,3.0/2.0);
                double t89364 = c*c;
                double t89365 = 1.0/pow(rho_b[index],2.0/3.0);
                double t89366 = 1.0/c0p;
                double t89367 = b1p*t89362;
                double t89368 = b3p*t89363;
                double t89369 = b4p*t89364*t89365;
                double t89370 = b2p*c*t89360;
                double t89371 = t89370+t89367+t89368+t89369;
                double t89372 = 1.0/t89371;
                double t89373 = t89372*t89366*(1.0/2.0);
                double t89374 = t89373+1.0;
                double t89375 = log(t89374);
                double t89376 = a1p*c*t89360;
                double t89377 = t89376+1.0;
                double t89378 = 1.0/pow(rho_b[index],8.0/3.0);
                double t89379 = gcaa*gcaa;
                double t89380 = 1.0/pow(rho_b[index],1.6E1/3.0);
                double t89381 = gamma_bb[index]*gamma_bb[index];
                double t89382 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]);
                double t89383 = gamma_bb[index]*gcaa*t89378;
                double t89384 = t89383+1.0;
                double t89385 = gamma_bb[index]*gcaa*t89378*3.0;
                double t89386 = gamma_bb[index]*gcaa*t89381*t89382*t89379;
                double t89387 = t89380*t89381*t89379*3.0;
                double t89388 = t89385+t89386+t89387+1.0;
                double t89389 = gamma_bb[index]*gcaa*t89378*2.0;
                double t89390 = t89380*t89381*t89379;
                double t89391 = t89390+t89389+1.0;
                double t89392 = pow(rho_b[index],5.0/3.0);
                double t89393 = C_k*t89392;
                double t89402 = tau_a[index]*1.0E20;
                double t89394 = -t89402+t89393;
                double t89395 = ( (t89394 > 0.0) ?  1.0 : 0.0 ) ;
                double t89396 = t89395*1.0E20;
                double t89397 = 1.0/tau_b[index];
                double t89398 = tau_b[index]*1.0E20;
                double t89399 = -t89393+t89398;
                double t89400 = ( (t89399 > 0.0) ?  1.0 : 0.0 ) ;
                double t89401 = C_k*t89400*t89392*t89397;
                double t89403 = t89401+t89396-1.0;
                double t89404 = t89403*t89403;
                double t89405 = t89401+t89396+1.0;
                double t89406 = t89404*t89404;
                double t89407 = gx*gx;
                double t89408 = gamma_bb[index]*gx*t89378;
                double t89409 = t89408+1.0;
                double t89410 = gamma_bb[index]*gx*t89378*3.0;
                double t89411 = gamma_bb[index]*gx*t89407*t89381*t89382;
                double t89412 = t89380*t89407*t89381*3.0;
                double t89413 = t89410+t89411+t89412+1.0;
                double t89414 = gamma_bb[index]*gx*t89378*2.0;
                double t89415 = t89380*t89407*t89381;
                double t89416 = t89414+t89415+1.0;
                double t89417 = 1.0/t89409;
                double t89418 = 1.0/t89416;
                double t89419 = 1.0/t89413;
                double t89420 = 1.0/(t89409*t89409);
                double t89421 = gx*t89378*3.0;
                double t89422 = gamma_bb[index]*t89380*t89407*6.0;
                double t89423 = gx*t89407*t89381*t89382*3.0;
                double t89424 = t89421+t89422+t89423;
                double t89425 = 1.0/(t89413*t89413);
                double t89426 = gx*t89378*2.0;
                double t89427 = gamma_bb[index]*t89380*t89407*2.0;
                double t89428 = t89426+t89427;
                double t89429 = 1.0/(t89416*t89416);
                v_gamma_bb_[index] = -rho_b[index]*(((pow(2.0,1.0/3.0)*2.0-2.0)*(c0f*log((1.0/2.0)/(c0f*(b1f*t89362+ \
                   b3f*t89363+b2f*c*t89360+b4f*t89364*t89365))+1.0)*(a1f*c*t89360+1.0)*2.0-c0p*t89375*t89377*2.0))/(two_13* \
                   2.0-2.0)+c0p*t89375*t89377*2.0)*((ccaa1*gcaa*t89378)/t89384+(ccaa2*gamma_bb[index]*t89380*t89379*2.0) \
                   /t89391-ccaa1*gamma_bb[index]*t89380*1.0/(t89384*t89384)*t89379-ccaa2*t89380*t89381*1.0/(t89391*t89391) \
                   *t89379*(gcaa*t89378*2.0+gamma_bb[index]*t89380*t89379*2.0)+(ccaa3*gcaa*t89381*t89382*t89379*3.0)/ \
                   t89388-ccaa3*gamma_bb[index]*gcaa*t89381*t89382*t89379*1.0/(t89388*t89388)*(gcaa*t89378*3.0+gamma_bb[index]* \
                   t89380*t89379*6.0+gcaa*t89381*t89382*t89379*3.0))-c0*pow(rho_b[index],4.0/3.0)*(X-1.0)*((t89403/t89405- \
                   t89403*t89404*1.0/(t89405*t89405*t89405)*2.0+t89403*1.0/(t89405*t89405*t89405*t89405*t89405)*t89406) \
                   *(cxnl1*gx*t89417*t89378-cxnl1*gamma_bb[index]*t89420*t89380*t89407+cxnl2*gamma_bb[index]*t89380*t89407* \
                   t89418*2.0-cxnl2*t89380*t89407*t89381*t89428*t89429+cxnl3*gx*t89407*t89381*t89382*t89419*3.0-cxnl3* \
                   gamma_bb[index]*gx*t89424*t89407*t89425*t89381*t89382)+cx1*gx*t89417*t89378-cx1*gamma_bb[index]*t89420* \
                   t89380*t89407+cx2*gamma_bb[index]*t89380*t89407*t89418*2.0-cx2*t89380*t89407*t89381*t89428*t89429+ \
                   cx3*gx*t89407*t89381*t89382*t89419*3.0-cx3*gamma_bb[index]*gx*t89424*t89407*t89425*t89381*t89382);
            } else {
                v_gamma_bb_[index] = 0.0;
            } 
        }
        if (is_meta_) {

            //V_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t86150 = 1.0/pow(rho_a[index],8.0/3.0);
                double t86151 = gamma_aa[index]*gamma_aa[index];
                double t86152 = gx*gx;
                double t86153 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t86154 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t86155 = pow(rho_a[index],5.0/3.0);
                double t86156 = tau_a[index]*1.0E20;
                double t86159 = C_k*t86155;
                double t86157 = t86156-t86159;
                double t86158 = 0.0 ;
                double t86160 = 1.0/tau_a[index];
                double t86161 = ( (t86157 > 0.0) ?  1.0 : 0.0 ) ;
                double t86162 = t86158*1.0E40;
                double t86163 = 1.0/(tau_a[index]*tau_a[index]);
                double t86164 = C_k*t86161*t86163*t86155;
                double t86171 = C_k*t86160*t86155*t86158*1.0E20;
                double t86165 = t86162-t86171+t86164;
                double t86166 = -t86156+t86159;
                double t86167 = ( (t86166 > 0.0) ?  1.0 : 0.0 ) ;
                double t86168 = t86167*1.0E20;
                double t86169 = C_k*t86160*t86161*t86155;
                double t86170 = t86168+t86169+1.0;
                double t86172 = t86168+t86169-1.0;
                double t86173 = t86172*t86172;
                double t86174 = t86173*t86173;
                double t86175 = 1.0/pow(rho_b[index],8.0/3.0);
                double t86176 = gamma_bb[index]*gamma_bb[index];
                double t86177 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]);
                double t86178 = 1.0/pow(rho_b[index],1.6E1/3.0);
                double t86179 = pow(rho_b[index],5.0/3.0);
                double t86180 = C_k*t86179;
                double t86181 = t86180-t86156;
                double t86182 = ( (t86181 > 0.0) ?  1.0 : 0.0 ) ;
                double t86183 = t86182*1.0E20;
                double t86184 = 1.0/tau_b[index];
                double t86185 = tau_b[index]*1.0E20;
                double t86186 = -t86180+t86185;
                double t86187 = ( (t86186 > 0.0) ?  1.0 : 0.0 ) ;
                double t86188 = C_k*t86184*t86187*t86179;
                double t86189 = t86183+t86188-1.0;
                double t86190 = t86183+t86188+1.0;
                double t86191 = -t86180+t86156;
                double t86192 = 0.0 ;
                double t86193 = t86189*t86189;
                double t86194 = t86193*t86193;
                v_tau_a_[index] = (c0*pow(rho_a[index],4.0/3.0)*(cxnl0+(cxnl2*t86151*t86152*t86154)/(gamma_aa[index]* \
                   gx*t86150*2.0+t86151*t86152*t86154+1.0)+(cxnl1*gamma_aa[index]*gx*t86150)/(gamma_aa[index]*gx*t86150+ \
                   1.0)+(cxnl3*gamma_aa[index]*gx*t86151*t86152*t86153)/(gamma_aa[index]*gx*t86150*3.0+t86151*t86152* \
                   t86154*3.0+gamma_aa[index]*gx*t86151*t86152*t86153+1.0))*(t86165/t86170-1.0/(t86170*t86170)*t86172* \
                   t86165-1.0/(t86170*t86170*t86170)*t86173*t86165*6.0+1.0/(t86170*t86170*t86170*t86170*t86170)*t86165* \
                   t86174*5.0+1.0/(t86170*t86170*t86170*t86170)*t86172*t86173*t86165*6.0-1.0/(t86170*t86170*t86170*t86170* \
                   t86170*t86170)*t86172*t86165*t86174*5.0)+c0*pow(rho_b[index],4.0/3.0)*(cxnl0+(cxnl2*t86152*t86176* \
                   t86178)/(gamma_bb[index]*gx*t86175*2.0+t86152*t86176*t86178+1.0)+(cxnl1*gamma_bb[index]*gx*t86175) \
                   /(gamma_bb[index]*gx*t86175+1.0)+(cxnl3*gamma_bb[index]*gx*t86152*t86176*t86177)/(gamma_bb[index]* \
                   gx*t86175*3.0+t86152*t86176*t86178*3.0+gamma_bb[index]*gx*t86152*t86176*t86177+1.0))*(( 0.0 )/t86190- \
                   1.0/(t86190*t86190*t86190)*t86192*t86193*6.0E40+1.0/(t86190*t86190*t86190*t86190*t86190)*t86192*t86194* \
                   5.0E40-1.0/(t86190*t86190)*t86192*t86189*1.0E40+1.0/(t86190*t86190*t86190*t86190)*t86192*t86193*t86189* \
                   6.0E40-1.0/(t86190*t86190*t86190*t86190*t86190*t86190)*t86192*t86194*t86189*5.0E40))*(X-1.0);
            } else if (rho_a[index] > cutoff_) {
                double t90514 = 1.0/pow(rho_a[index],8.0/3.0);
                double t90515 = gamma_aa[index]*gamma_aa[index];
                double t90516 = gx*gx;
                double t90517 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t90518 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t90519 = pow(rho_a[index],5.0/3.0);
                double t90520 = tau_a[index]*1.0E20;
                double t90523 = C_k*t90519;
                double t90521 = t90520-t90523;
                double t90522 = 0.0 ;
                double t90524 = 1.0/tau_a[index];
                double t90525 = ( (t90521 > 0.0) ?  1.0 : 0.0 ) ;
                double t90526 = t90522*1.0E40;
                double t90527 = 1.0/(tau_a[index]*tau_a[index]);
                double t90528 = C_k*t90525*t90527*t90519;
                double t90535 = C_k*t90522*t90524*t90519*1.0E20;
                double t90529 = t90526-t90535+t90528;
                double t90530 = -t90520+t90523;
                double t90531 = ( (t90530 > 0.0) ?  1.0 : 0.0 ) ;
                double t90532 = t90531*1.0E20;
                double t90533 = C_k*t90524*t90525*t90519;
                double t90534 = t90532+t90533+1.0;
                double t90536 = t90532+t90533-1.0;
                double t90537 = t90536*t90536;
                double t90538 = t90537*t90537;
                v_tau_a_[index] = c0*pow(rho_a[index],4.0/3.0)*(X-1.0)*(cxnl0+(cxnl2*t90515*t90516*t90518)/(gamma_aa[index]* \
                   gx*t90514*2.0+t90515*t90516*t90518+1.0)+(cxnl1*gamma_aa[index]*gx*t90514)/(gamma_aa[index]*gx*t90514+ \
                   1.0)+(cxnl3*gamma_aa[index]*gx*t90515*t90516*t90517)/(gamma_aa[index]*gx*t90514*3.0+t90515*t90516* \
                   t90518*3.0+gamma_aa[index]*gx*t90515*t90516*t90517+1.0))*(t90529/t90534-1.0/(t90534*t90534)*t90536* \
                   t90529-1.0/(t90534*t90534*t90534)*t90537*t90529*6.0+1.0/(t90534*t90534*t90534*t90534*t90534)*t90529* \
                   t90538*5.0+1.0/(t90534*t90534*t90534*t90534)*t90536*t90537*t90529*6.0-1.0/(t90534*t90534*t90534*t90534* \
                   t90534*t90534)*t90536*t90529*t90538*5.0);
            } else if (rho_b[index] > cutoff_) {
                double t89431 = 1.0/pow(rho_b[index],8.0/3.0);
                double t89432 = gamma_bb[index]*gamma_bb[index];
                double t89433 = gx*gx;
                double t89434 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]);
                double t89435 = 1.0/pow(rho_b[index],1.6E1/3.0);
                double t89436 = tau_a[index]*1.0E20;
                double t89437 = pow(rho_b[index],5.0/3.0);
                double t89438 = C_k*t89437;
                double t89439 = -t89436+t89438;
                double t89440 = ( (t89439 > 0.0) ?  1.0 : 0.0 ) ;
                double t89441 = t89440*1.0E20;
                double t89442 = 1.0/tau_b[index];
                double t89443 = tau_b[index]*1.0E20;
                double t89444 = t89443-t89438;
                double t89445 = ( (t89444 > 0.0) ?  1.0 : 0.0 ) ;
                double t89446 = C_k*t89442*t89445*t89437;
                double t89447 = t89441+t89446-1.0;
                double t89448 = t89441+t89446+1.0;
                double t89449 = t89436-t89438;
                double t89450 = 0.0 ;
                double t89451 = t89447*t89447;
                double t89452 = t89451*t89451;
                v_tau_a_[index] = c0*pow(rho_b[index],4.0/3.0)*(X-1.0)*(cxnl0+(cxnl2*t89432*t89433*t89435)/(gamma_bb[index]* \
                   gx*t89431*2.0+t89432*t89433*t89435+1.0)+(cxnl1*gamma_bb[index]*gx*t89431)/(gamma_bb[index]*gx*t89431+ \
                   1.0)+(cxnl3*gamma_bb[index]*gx*t89432*t89433*t89434)/(gamma_bb[index]*gx*t89431*3.0+t89432*t89433* \
                   t89435*3.0+gamma_bb[index]*gx*t89432*t89433*t89434+1.0))*(( 0.0 )/t89448-t89450*t89451*1.0/(t89448* \
                   t89448*t89448)*6.0E40+t89450*t89452*1.0/(t89448*t89448*t89448*t89448*t89448)*5.0E40-t89450*t89447* \
                   1.0/(t89448*t89448)*1.0E40+t89450*t89451*t89447*1.0/(t89448*t89448*t89448*t89448)*6.0E40-t89450*t89452* \
                   t89447*1.0/(t89448*t89448*t89448*t89448*t89448*t89448)*5.0E40);
            } else {
                v_tau_a_[index] = 0.0;
            } 

            //V_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t86196 = 1.0/pow(rho_b[index],8.0/3.0);
                double t86197 = gamma_bb[index]*gamma_bb[index];
                double t86198 = gx*gx;
                double t86199 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]);
                double t86200 = 1.0/pow(rho_b[index],1.6E1/3.0);
                double t86201 = pow(rho_b[index],5.0/3.0);
                double t86202 = tau_b[index]*1.0E20;
                double t86204 = C_k*t86201;
                double t86203 = t86202-t86204;
                double t86205 = 1.0/tau_b[index];
                double t86206 = ( (t86203 > 0.0) ?  1.0 : 0.0 ) ;
                double t86207 = 0.0 ;
                double t86208 = 1.0/(tau_b[index]*tau_b[index]);
                double t86216 = C_k*t86201*t86205*t86207*1.0E20;
                double t86217 = C_k*t86201*t86206*t86208;
                double t86209 = t86216-t86217;
                double t86214 = tau_a[index]*1.0E20;
                double t86210 = t86204-t86214;
                double t86211 = ( (t86210 > 0.0) ?  1.0 : 0.0 ) ;
                double t86212 = t86211*1.0E20;
                double t86213 = C_k*t86201*t86205*t86206;
                double t86215 = t86212+t86213+1.0;
                double t86218 = t86212+t86213-1.0;
                double t86219 = t86218*t86218;
                double t86220 = t86219*t86219;
                v_tau_b_[index] = -c0*pow(rho_b[index],4.0/3.0)*(X-1.0)*(cxnl0+(cxnl2*t86200*t86197*t86198)/(gamma_bb[index]* \
                   gx*t86196*2.0+t86200*t86197*t86198+1.0)+(cxnl1*gamma_bb[index]*gx*t86196)/(gamma_bb[index]*gx*t86196+ \
                   1.0)+(cxnl3*gamma_bb[index]*gx*t86197*t86198*t86199)/(gamma_bb[index]*gx*t86196*3.0+t86200*t86197* \
                   t86198*3.0+gamma_bb[index]*gx*t86197*t86198*t86199+1.0))*(t86209/t86215+t86220*1.0/(t86215*t86215* \
                   t86215*t86215*t86215)*t86209*5.0-1.0/(t86215*t86215)*t86209*t86218-1.0/(t86215*t86215*t86215)*t86209* \
                   t86219*6.0-t86220*1.0/(t86215*t86215*t86215*t86215*t86215*t86215)*t86209*t86218*5.0+1.0/(t86215*t86215* \
                   t86215*t86215)*t86209*t86218*t86219*6.0);
            } else if (rho_a[index] > cutoff_) {
                v_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                double t89454 = 1.0/pow(rho_b[index],8.0/3.0);
                double t89455 = gamma_bb[index]*gamma_bb[index];
                double t89456 = gx*gx;
                double t89457 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]);
                double t89458 = 1.0/pow(rho_b[index],1.6E1/3.0);
                double t89459 = pow(rho_b[index],5.0/3.0);
                double t89460 = tau_b[index]*1.0E20;
                double t89462 = C_k*t89459;
                double t89461 = t89460-t89462;
                double t89463 = 1.0/tau_b[index];
                double t89464 = ( (t89461 > 0.0) ?  1.0 : 0.0 ) ;
                double t89465 = 0.0 ;
                double t89466 = 1.0/(tau_b[index]*tau_b[index]);
                double t89474 = C_k*t89463*t89465*t89459*1.0E20;
                double t89475 = C_k*t89464*t89466*t89459;
                double t89467 = t89474-t89475;
                double t89472 = tau_a[index]*1.0E20;
                double t89468 = t89462-t89472;
                double t89469 = ( (t89468 > 0.0) ?  1.0 : 0.0 ) ;
                double t89470 = t89469*1.0E20;
                double t89471 = C_k*t89463*t89464*t89459;
                double t89473 = t89470+t89471+1.0;
                double t89476 = t89470+t89471-1.0;
                double t89477 = t89476*t89476;
                double t89478 = t89477*t89477;
                v_tau_b_[index] = -c0*pow(rho_b[index],4.0/3.0)*(X-1.0)*(cxnl0+(cxnl2*t89455*t89456*t89458)/(gamma_bb[index]* \
                   gx*t89454*2.0+t89455*t89456*t89458+1.0)+(cxnl1*gamma_bb[index]*gx*t89454)/(gamma_bb[index]*gx*t89454+ \
                   1.0)+(cxnl3*gamma_bb[index]*gx*t89455*t89456*t89457)/(gamma_bb[index]*gx*t89454*3.0+t89455*t89456* \
                   t89458*3.0+gamma_bb[index]*gx*t89455*t89456*t89457+1.0))*(t89467/t89473-1.0/(t89473*t89473)*t89467* \
                   t89476-1.0/(t89473*t89473*t89473)*t89467*t89477*6.0+1.0/(t89473*t89473*t89473*t89473*t89473)*t89467* \
                   t89478*5.0+1.0/(t89473*t89473*t89473*t89473)*t89467*t89476*t89477*6.0-1.0/(t89473*t89473*t89473*t89473* \
                   t89473*t89473)*t89467*t89476*t89478*5.0);
            } else {
                v_tau_b_[index] = 0.0;
            } 
        }
    }
    //Second Partials
    for (int index = 0; index < ntrue && deriv_ >= 2; index++) {

        //V_rho_a_rho_a
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t86222 = gcab*gcab;
            double t86226 = 1.0/pow(rho_a[index],8.0/3.0);
            double t86227 = gamma_aa[index]*t86226*(1.0/2.0);
            double t86228 = 1.0/pow(rho_b[index],8.0/3.0);
            double t86229 = gamma_bb[index]*t86228*(1.0/2.0);
            double t86223 = t86227+t86229;
            double t86224 = t86223*t86223;
            double t86225 = 1.0/pow(rho_a[index],1.1E1/3.0);
            double t86230 = gcab*t86223;
            double t86231 = t86230+1.0;
            double t86232 = t86222*t86224;
            double t86233 = gcab*t86223*2.0;
            double t86234 = t86232+t86233+1.0;
            double t86235 = t86222*t86224*3.0;
            double t86236 = gcab*t86222*t86223*t86224;
            double t86237 = gcab*t86223*3.0;
            double t86238 = t86235+t86236+t86237+1.0;
            double t86239 = rho_a[index]+rho_b[index];
            double t86240 = 1.0/pow(t86239,1.0/3.0);
            double t86241 = c*t86240;
            double t86242 = sqrt(t86241);
            double t86243 = b1p*t86242;
            double t86244 = pow(t86241,3.0/2.0);
            double t86245 = b3p*t86244;
            double t86246 = c*c;
            double t86247 = 1.0/pow(t86239,2.0/3.0);
            double t86248 = b4p*t86246*t86247;
            double t86249 = b2p*c*t86240;
            double t86250 = t86243+t86245+t86248+t86249;
            double t86251 = 1.0/pow(t86239,4.0/3.0);
            double t86252 = 1.0/c0p;
            double t86253 = 1.0/t86250;
            double t86254 = t86252*t86253*(1.0/2.0);
            double t86255 = t86254+1.0;
            double t86256 = a1p*c*t86240;
            double t86257 = t86256+1.0;
            double t86258 = rho_a[index]-rho_b[index];
            double t86259 = t86258*t86258;
            double t86260 = 1.0/t86239;
            double t86261 = t86260*t86258;
            double t86262 = two_13*2.0;
            double t86263 = t86262-2.0;
            double t86264 = 1.0/t86263;
            double t86265 = 1.0/c0f;
            double t86266 = b1f*t86242;
            double t86267 = b3f*t86244;
            double t86268 = b4f*t86246*t86247;
            double t86269 = b2f*c*t86240;
            double t86270 = t86266+t86267+t86268+t86269;
            double t86271 = 1.0/t86270;
            double t86272 = t86271*t86265*(1.0/2.0);
            double t86273 = t86272+1.0;
            double t86274 = log(t86273);
            double t86275 = a1f*c*t86240;
            double t86276 = t86275+1.0;
            double t86277 = log(t86255);
            double t86287 = c0f*t86274*t86276*2.0;
            double t86288 = c0p*t86257*t86277*2.0;
            double t86278 = t86287-t86288;
            double t86279 = t86261+1.0;
            double t86280 = pow(t86279,4.0/3.0);
            double t86281 = -t86261+1.0;
            double t86282 = pow(t86281,4.0/3.0);
            double t86283 = t86280+t86282-2.0;
            double t86284 = 1.0/(t86239*t86239);
            double t86315 = t86284*t86258;
            double t86285 = t86260-t86315;
            double t86286 = 1.0/(t86239*t86239*t86239*t86239);
            double t86289 = t86259*t86259;
            double t86290 = 1.0/pow(t86239,5.0/3.0);
            double t86291 = 1.0/sqrt(t86241);
            double t86292 = 1.0/t86255;
            double t86293 = 1.0/(t86250*t86250);
            double t86294 = b4p*t86290*t86246*(2.0/3.0);
            double t86295 = b2p*c*t86251*(1.0/3.0);
            double t86296 = b1p*c*t86251*t86291*(1.0/6.0);
            double t86297 = b3p*c*t86242*t86251*(1.0/2.0);
            double t86298 = t86294+t86295+t86296+t86297;
            double t86299 = t86292*t86257*t86293*t86298;
            double t86300 = 1.0/(t86239*t86239*t86239*t86239*t86239);
            double t86301 = 1.0/d2fz0;
            double t86302 = 1.0/Aa;
            double t86303 = b1a*t86242;
            double t86304 = b3a*t86244;
            double t86305 = b4a*t86246*t86247;
            double t86306 = b2a*c*t86240;
            double t86307 = t86303+t86304+t86305+t86306;
            double t86308 = 1.0/t86307;
            double t86309 = t86302*t86308*(1.0/2.0);
            double t86310 = t86309+1.0;
            double t86311 = log(t86310);
            double t86312 = a1a*c*t86240;
            double t86313 = t86312+1.0;
            double t86314 = pow(t86279,1.0/3.0);
            double t86316 = t86314*t86285*(4.0/3.0);
            double t86317 = pow(t86281,1.0/3.0);
            double t86474 = t86317*t86285*(4.0/3.0);
            double t86318 = t86316-t86474;
            double t86319 = t86286*t86289;
            double t86320 = t86319-1.0;
            double t86321 = 1.0/pow(rho_a[index],1.0/3.0);
            double t86322 = c*t86321;
            double t86323 = sqrt(t86322);
            double t86324 = b1f*t86323;
            double t86325 = pow(t86322,3.0/2.0);
            double t86326 = b3f*t86325;
            double t86327 = 1.0/pow(rho_a[index],2.0/3.0);
            double t86328 = b4f*t86246*t86327;
            double t86329 = b2f*c*t86321;
            double t86330 = t86324+t86326+t86328+t86329;
            double t86331 = 1.0/pow(rho_a[index],4.0/3.0);
            double t86332 = b1p*t86323;
            double t86333 = b3p*t86325;
            double t86334 = b4p*t86246*t86327;
            double t86335 = b2p*c*t86321;
            double t86336 = t86332+t86333+t86334+t86335;
            double t86337 = 1.0/pow(rho_a[index],5.0/3.0);
            double t86338 = 1.0/sqrt(t86322);
            double t86339 = 1.0/t86330;
            double t86340 = t86265*t86339*(1.0/2.0);
            double t86341 = t86340+1.0;
            double t86342 = 1.0/t86336;
            double t86343 = t86252*t86342*(1.0/2.0);
            double t86344 = t86343+1.0;
            double t86345 = a1p*c*t86321;
            double t86346 = t86345+1.0;
            double t86347 = 1.0/t86344;
            double t86348 = 1.0/(t86336*t86336);
            double t86349 = b4p*t86246*t86337*(2.0/3.0);
            double t86350 = b2p*c*t86331*(1.0/3.0);
            double t86351 = b1p*c*t86331*t86338*(1.0/6.0);
            double t86352 = b3p*c*t86331*t86323*(1.0/2.0);
            double t86353 = t86350+t86351+t86352+t86349;
            double t86354 = t86353*t86346*t86347*t86348;
            double t86355 = log(t86344);
            double t86356 = pow(2.0,1.0/3.0);
            double t86357 = t86356*2.0;
            double t86358 = t86357-2.0;
            double t86359 = log(t86341);
            double t86360 = a1f*c*t86321;
            double t86361 = t86360+1.0;
            double t86362 = 1.0/t86341;
            double t86363 = 1.0/(t86330*t86330);
            double t86364 = b4f*t86246*t86337*(2.0/3.0);
            double t86365 = b2f*c*t86331*(1.0/3.0);
            double t86366 = b1f*c*t86331*t86338*(1.0/6.0);
            double t86367 = b3f*c*t86331*t86323*(1.0/2.0);
            double t86368 = t86364+t86365+t86366+t86367;
            double t86369 = a1f*c*c0f*t86331*t86359*(2.0/3.0);
            double t86370 = a1p*c*c0p*t86331*t86355*(2.0/3.0);
            double t86371 = gamma_aa[index]*gamma_aa[index];
            double t86372 = gcaa*gcaa;
            double t86373 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]);
            double t86374 = 1.0/pow(rho_a[index],1.6E1/3.0);
            double t86375 = pow(rho_a[index],5.0/3.0);
            double t86376 = C_k*t86375;
            double t86377 = tau_a[index]*1.0E20;
            double t86378 = 1.0/tau_a[index];
            double t86379 = -t86376+t86377;
            double t86380 = ( (t86379 > 0.0) ?  1.0 : 0.0 ) ;
            double t86381 = C_k*t86380*t86375*t86378;
            double t86382 = t86376-t86377;
            double t86383 = ( (t86382 > 0.0) ?  1.0 : 0.0 ) ;
            double t86384 = t86383*1.0E20;
            double t86385 = t86381+t86384-1.0;
            double t86386 = t86385*t86385;
            double t86387 = t86381+t86384+1.0;
            double t86388 = t86386*t86386;
            double t86389 = gx*gx;
            double t86390 = gamma_aa[index]*gx*t86226;
            double t86391 = t86390+1.0;
            double t86392 = 1.0/t86391;
            double t86393 = gamma_aa[index]*gx*t86226*3.0;
            double t86394 = gamma_aa[index]*gx*t86371*t86373*t86389;
            double t86395 = t86371*t86374*t86389*3.0;
            double t86396 = t86393+t86394+t86395+1.0;
            double t86397 = 1.0/t86396;
            double t86398 = gamma_aa[index]*gx*t86226*2.0;
            double t86399 = t86371*t86374*t86389;
            double t86400 = t86398+t86399+1.0;
            double t86401 = 1.0/t86400;
            double t86402 = 1.0/t86387;
            double t86403 = 1.0/(t86387*t86387*t86387);
            double t86404 = 1.0/(t86387*t86387*t86387*t86387*t86387);
            double t86405 = t86404*t86385*t86388;
            double t86406 = 1.0/pow(rho_a[index],1.9E1/3.0);
            double t86407 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]*rho_a[index]);
            double t86408 = cxnl1*gamma_aa[index]*gx*t86226*t86392;
            double t86409 = cxnl3*gamma_aa[index]*gx*t86371*t86373*t86397*t86389;
            double t86410 = cxnl2*t86401*t86371*t86374*t86389;
            double t86411 = cxnl0+t86410+t86408+t86409;
            double t86412 = 0.0 ;
            double t86413 = pow(rho_a[index],2.0/3.0);
            double t86414 = C_k*t86412*t86413*(5.0E20/3.0);
            double t86415 = C_k*C_k;
            double t86416 = pow(rho_a[index],7.0/3.0);
            double t86417 = C_k*t86413*t86380*t86378*(5.0/3.0);
            double t86419 = t86412*t86415*t86416*t86378*(5.0/3.0);
            double t86418 = t86414+t86417-t86419;
            double t86420 = 1.0/(t86391*t86391);
            double t86421 = gamma_aa[index]*gx*t86225*8.0;
            double t86422 = gamma_aa[index]*gx*t86371*t86407*t86389*8.0;
            double t86423 = t86406*t86371*t86389*1.6E1;
            double t86424 = t86421+t86422+t86423;
            double t86425 = 1.0/(t86396*t86396);
            double t86426 = gamma_aa[index]*gx*t86225*(1.6E1/3.0);
            double t86427 = t86406*t86371*t86389*(1.6E1/3.0);
            double t86428 = t86426+t86427;
            double t86429 = 1.0/(t86400*t86400);
            double t86430 = t86402*t86385;
            double t86468 = t86403*t86385*t86386*2.0;
            double t86431 = t86430+t86405-t86468;
            double t86432 = 1.0/pow(rho_a[index],1.0E1);
            double t86433 = 1.0/pow(rho_a[index],2.2E1/3.0);
            double t86434 = 1.0/pow(rho_a[index],1.4E1/3.0);
            double t86435 = cxnl1*gamma_aa[index]*gx*t86225*t86392*(8.0/3.0);
            double t86436 = cxnl3*gamma_aa[index]*gx*t86371*t86407*t86397*t86389*8.0;
            double t86437 = cxnl2*t86401*t86406*t86371*t86389*(1.6E1/3.0);
            double t86438 = t86435+t86436+t86437-cxnl1*t86420*t86406*t86371*t86389*(8.0/3.0)-cxnl2*t86371*t86374* \
               t86428*t86429*t86389-cxnl3*gamma_aa[index]*gx*t86424*t86371*t86425*t86373*t86389;
            double t86439 = t86402*t86418;
            double t86440 = 1.0/(t86387*t86387);
            double t86441 = 1.0/(t86387*t86387*t86387*t86387);
            double t86442 = t86441*t86418*t86385*t86386*6.0;
            double t86443 = t86404*t86418*t86388*5.0;
            double t86444 = 1.0/(t86387*t86387*t86387*t86387*t86387*t86387);
            double t86445 = t86442+t86443+t86439-t86403*t86418*t86386*6.0-t86440*t86418*t86385-t86444*t86418* \
               t86385*t86388*5.0;
            double t86446 = pow(rho_a[index],4.0/3.0);
            double t86447 = rho_a[index]*rho_a[index];
            double t86448 = 0.0 ;
            double t86449 = t86418*t86418;
            double t86450 = C_k*t86321*t86412*(1.0E21/9.0);
            double t86451 = C_k*rho_a[index]*t86415*t86447*t86448*t86378*(2.5E1/9.0);
            double t86452 = C_k*t86321*t86380*t86378*(1.0E1/9.0);
            double t86454 = t86415*t86446*t86448*(2.5E21/9.0);
            double t86455 = t86412*t86415*t86446*t86378*(2.0E1/3.0);
            double t86453 = t86450+t86451+t86452-t86454-t86455;
            double t86456 = 1.0/(t86391*t86391*t86391);
            double t86457 = t86428*t86428;
            double t86458 = 1.0/(t86400*t86400*t86400);
            double t86459 = gamma_aa[index]*gx*t86434*(8.8E1/3.0);
            double t86460 = gamma_aa[index]*gx*t86432*t86371*t86389*7.2E1;
            double t86461 = t86433*t86371*t86389*(3.04E2/3.0);
            double t86462 = t86460+t86461+t86459;
            double t86463 = t86424*t86424;
            double t86464 = 1.0/(t86396*t86396*t86396);
            double t86465 = gamma_aa[index]*gx*t86434*(1.76E2/9.0);
            double t86466 = t86433*t86371*t86389*(3.04E2/9.0);
            double t86467 = t86465+t86466;
            double t86469 = 1.0/t86234;
            double t86470 = 1.0/t86238;
            double t86471 = 1.0/t86231;
            double t86472 = 1.0/pow(t86239,7.0/3.0);
            double t86473 = 1.0/pow(t86239,8.0/3.0);
            double t86475 = 1.0/t86273;
            double t86476 = 1.0/(t86270*t86270);
            double t86477 = b4f*t86290*t86246*(2.0/3.0);
            double t86478 = b2f*c*t86251*(1.0/3.0);
            double t86479 = b1f*c*t86251*t86291*(1.0/6.0);
            double t86480 = b3f*c*t86242*t86251*(1.0/2.0);
            double t86481 = t86480+t86477+t86478+t86479;
            double t86482 = a1f*c*c0f*t86251*t86274*(2.0/3.0);
            double t86484 = t86481*t86276*t86475*t86476;
            double t86485 = a1p*c*c0p*t86251*t86277*(2.0/3.0);
            double t86483 = t86482-t86484-t86485+t86299;
            double t86486 = t86298*t86298;
            double t86487 = 1.0/pow(t86241,3.0/2.0);
            double t86488 = b4p*t86246*t86473*(1.0E1/9.0);
            double t86489 = b2p*c*t86472*(4.0/9.0);
            double t86490 = b1p*c*t86291*t86472*(2.0/9.0);
            double t86491 = b3p*c*t86242*t86472*(2.0/3.0);
            double t86492 = b3p*t86246*t86291*t86473*(1.0/1.2E1);
            double t86493 = t86490+t86491+t86492+t86488+t86489-b1p*t86246*t86473*t86487*(1.0/3.6E1);
            double t86494 = 1.0/(t86250*t86250*t86250);
            double t86495 = t86292*t86257*t86494*t86486*2.0;
            double t86496 = t86481*t86481;
            double t86497 = 1.0/(t86255*t86255);
            double t86498 = 1.0/(t86250*t86250*t86250*t86250);
            double t86499 = t86284*2.0;
            double t86500 = 1.0/(t86239*t86239*t86239);
            double t86507 = t86500*t86258*2.0;
            double t86501 = -t86507+t86499;
            double t86502 = t86285*t86285;
            double t86503 = a1p*c*c0p*t86472*t86277*(8.0/9.0);
            double t86504 = 1.0/(t86239*t86239*t86239*t86239*t86239*t86239);
            double t86505 = t86300*t86289*4.0;
            double t86515 = t86258*t86259*t86286*4.0;
            double t86506 = t86505-t86515;
            double t86508 = t86501*t86317*(4.0/3.0);
            double t86509 = 1.0/pow(t86279,2.0/3.0);
            double t86510 = t86502*t86509*(4.0/9.0);
            double t86511 = 1.0/pow(t86281,2.0/3.0);
            double t86512 = t86502*t86511*(4.0/9.0);
            double t86513 = t86510+t86512+t86508-t86501*t86314*(4.0/3.0);
            double t86514 = 1.0/t86310;
            double t86516 = 1.0/(t86307*t86307);
            double t86517 = b4a*t86290*t86246*(2.0/3.0);
            double t86518 = b2a*c*t86251*(1.0/3.0);
            double t86519 = b1a*c*t86251*t86291*(1.0/6.0);
            double t86520 = b3a*c*t86242*t86251*(1.0/2.0);
            double t86521 = t86520+t86517+t86518+t86519;
            double t86522 = t86521*t86521;
            double t86523 = t86292*t86257*t86293*t86493;
            double t86524 = 1.0/pow(rho_a[index],7.0/3.0);
            double t86525 = 1.0/pow(t86322,3.0/2.0);
            double t86526 = t86368*t86368;
            double t86527 = t86353*t86353;
            double t86528 = 1.0/(t86336*t86336*t86336);
            double t86529 = t86346*t86347*t86527*t86528*2.0;
            double t86530 = b4p*t86226*t86246*(1.0E1/9.0);
            double t86531 = b2p*c*t86524*(4.0/9.0);
            double t86532 = b3p*t86226*t86246*t86338*(1.0/1.2E1);
            double t86533 = b1p*c*t86524*t86338*(2.0/9.0);
            double t86534 = b3p*c*t86323*t86524*(2.0/3.0);
            double t86615 = b1p*t86226*t86246*t86525*(1.0/3.6E1);
            double t86535 = t86530+t86531+t86532+t86533+t86534-t86615;
            double t86536 = 1.0/(t86344*t86344);
            double t86537 = 1.0/(t86336*t86336*t86336*t86336);
            double t86538 = a1p*c*c0p*t86524*t86355*(8.0/9.0);
            double t86539 = t86361*t86362*t86363*t86368;
            double t86540 = t86370-t86354+t86539-t86369;
            double t86541 = c0f*t86361*t86359*2.0;
            double t86543 = c0p*t86346*t86355*2.0;
            double t86542 = t86541-t86543;
            double t86544 = 1.0/pow(rho_b[index],1.0/3.0);
            double t86545 = c*t86544;
            double t86546 = sqrt(t86545);
            double t86547 = pow(t86545,3.0/2.0);
            double t86548 = 1.0/pow(rho_b[index],2.0/3.0);
            double t86549 = b1p*t86546;
            double t86550 = b3p*t86547;
            double t86551 = b4p*t86246*t86548;
            double t86552 = b2p*c*t86544;
            double t86553 = t86550+t86551+t86552+t86549;
            double t86554 = 1.0/t86553;
            double t86555 = t86252*t86554*(1.0/2.0);
            double t86556 = t86555+1.0;
            double t86557 = log(t86556);
            double t86558 = a1p*c*t86544;
            double t86559 = t86558+1.0;
            double t86560 = c0p*t86557*t86559*2.0;
            double t86561 = t86264*t86283*t86286*t86278*t86289;
            double t86562 = Aa*t86301*t86311*t86320*t86313*t86264*t86283*2.0;
            double t86563 = 1.0/(t86231*t86231);
            double t86564 = gamma_aa[index]*gcab*t86225*(8.0/3.0);
            double t86565 = gamma_aa[index]*t86222*t86223*t86225*(8.0/3.0);
            double t86566 = t86564+t86565;
            double t86567 = 1.0/(t86238*t86238);
            double t86568 = 1.0/(t86234*t86234);
            double t86569 = gamma_aa[index]*gcab*t86225*4.0;
            double t86570 = gamma_aa[index]*gcab*t86222*t86224*t86225*4.0;
            double t86571 = gamma_aa[index]*t86222*t86223*t86225*8.0;
            double t86572 = t86570+t86571+t86569;
            double t86573 = t86542*t86264*t86358;
            double t86574 = t86543+t86573;
            double t86575 = gamma_aa[index]*gcaa*t86226;
            double t86576 = t86575+1.0;
            double t86577 = 1.0/t86576;
            double t86578 = gamma_aa[index]*gcaa*t86226*3.0;
            double t86579 = gamma_aa[index]*gcaa*t86371*t86372*t86373;
            double t86580 = t86371*t86372*t86374*3.0;
            double t86581 = t86580+t86578+t86579+1.0;
            double t86582 = 1.0/t86581;
            double t86583 = gamma_aa[index]*gcaa*t86226*2.0;
            double t86584 = t86371*t86372*t86374;
            double t86585 = t86583+t86584+1.0;
            double t86586 = 1.0/t86585;
            double t86587 = 1.0/(t86576*t86576);
            double t86588 = gamma_aa[index]*gcaa*t86225*(1.6E1/3.0);
            double t86589 = t86406*t86371*t86372*(1.6E1/3.0);
            double t86590 = t86588+t86589;
            double t86591 = gamma_aa[index]*gcaa*t86225*8.0;
            double t86592 = gamma_aa[index]*gcaa*t86371*t86407*t86372*8.0;
            double t86593 = t86406*t86371*t86372*1.6E1;
            double t86594 = t86591+t86592+t86593;
            double t86595 = 1.0/(t86581*t86581);
            double t86596 = 1.0/(t86585*t86585);
            double t86597 = t86540*t86264*t86358;
            double t86598 = -t86370+t86354+t86597;
            double t86599 = ccaa1*gamma_aa[index]*gcaa*t86225*t86577*(8.0/3.0);
            double t86600 = ccaa3*gamma_aa[index]*gcaa*t86371*t86407*t86372*t86582*8.0;
            double t86601 = ccaa2*t86406*t86371*t86372*t86586*(1.6E1/3.0);
            double t86602 = t86600+t86601+t86599-ccaa1*t86406*t86371*t86372*t86587*(8.0/3.0)-ccaa2*t86371*t86372* \
               t86374*t86590*t86596-ccaa3*gamma_aa[index]*gcaa*t86371*t86372*t86373*t86594*t86595;
            double t86603 = ccaa1*gamma_aa[index]*gcaa*t86226*t86577;
            double t86604 = ccaa3*gamma_aa[index]*gcaa*t86371*t86372*t86373*t86582;
            double t86605 = ccaa2*t86371*t86372*t86374*t86586;
            double t86606 = ccaa0+t86603+t86604+t86605;
            double t86607 = 1.0/(t86330*t86330*t86330);
            double t86608 = b4f*t86226*t86246*(1.0E1/9.0);
            double t86609 = b2f*c*t86524*(4.0/9.0);
            double t86610 = b3f*t86226*t86246*t86338*(1.0/1.2E1);
            double t86611 = b1f*c*t86524*t86338*(2.0/9.0);
            double t86612 = b3f*c*t86323*t86524*(2.0/3.0);
            double t86613 = t86610+t86611+t86612+t86608+t86609-b1f*t86226*t86246*t86525*(1.0/3.6E1);
            double t86614 = t86361*t86613*t86362*t86363;
            double t86616 = t86346*t86535*t86347*t86348;
            double t86617 = 1.0/(t86341*t86341);
            double t86618 = 1.0/(t86330*t86330*t86330*t86330);
            double t86619 = t86361*t86265*t86526*t86617*t86618*(1.0/2.0);
            double t86620 = t86252*t86346*t86527*t86536*t86537*(1.0/2.0);
            double t86621 = a1f*c*t86331*t86362*t86363*t86368*(2.0/3.0);
            double t86622 = a1p*c*t86331*t86353*t86347*t86348*(2.0/3.0);
            v_rho_a_rho_a_[index] = t86602*t86574*2.0-t86606*t86598*2.0+(ccab1*gamma_aa[index]*gcab*t86225*t86471* \
               (4.0/3.0)-ccab2*t86222*t86224*t86566*t86568-ccab1*gamma_aa[index]*t86222*t86223*t86225*t86563*(4.0/ \
               3.0)+ccab2*gamma_aa[index]*t86222*t86223*t86225*t86469*(8.0/3.0)+ccab3*gamma_aa[index]*gcab*t86222* \
               t86224*t86225*t86470*4.0-ccab3*gcab*t86222*t86223*t86224*t86572*t86567)*(t86561+t86562+t86288+rho_a[index]* \
               (t86370-t86354+t86264*t86358*(t86354+t86369-t86361*t86362*t86363*t86368-a1p*c*c0p*t86331*t86355*(2.0/ \
               3.0)))+t86239*(t86299-a1p*c*c0p*t86251*t86277*(2.0/3.0)-t86300*t86264*t86283*t86278*t86289*4.0-t86264* \
               t86283*t86483*t86286*t86289+t86264*t86318*t86286*t86278*t86289+t86264*t86283*t86258*t86259*t86286* \
               t86278*4.0+Aa*t86301*t86311*t86320*t86313*t86264*t86318*2.0-Aa*t86301*t86311*t86313*t86506*t86264* \
               t86283*2.0+t86301*t86320*t86313*t86521*t86514*t86264*t86516*t86283-Aa*a1a*c*t86301*t86311*t86320*t86251* \
               t86264*t86283*(2.0/3.0))-c0p*t86346*t86355*2.0-t86542*t86264*t86358)*2.0+(rho_a[index]*t86574+rho_b[index]* \
               (t86560-t86264*t86358*(t86560-c0f*log((t86265*(1.0/2.0))/(b1f*t86546+b3f*t86547+b2f*c*t86544+b4f*t86246* \
               t86548)+1.0)*(a1f*c*t86544+1.0)*2.0))-t86239*(t86561+t86562+t86288))*(-ccab2*t86222*t86224*t86568* \
               (gamma_aa[index]*gcab*t86434*(8.8E1/9.0)+t86222*t86433*t86371*(3.2E1/9.0)+gamma_aa[index]*t86222*t86223* \
               t86434*(8.8E1/9.0))+ccab2*t86222*t86224*1.0/(t86234*t86234*t86234)*(t86566*t86566)*2.0+ccab1*gamma_aa[index]* \
               gcab*t86434*t86471*(4.4E1/9.0)-ccab1*t86222*t86433*t86371*t86563*(3.2E1/9.0)+ccab2*t86222*t86433*t86371* \
               t86469*(3.2E1/9.0)-ccab1*gamma_aa[index]*t86222*t86223*t86434*t86563*(4.4E1/9.0)+ccab2*gamma_aa[index]* \
               t86222*t86223*t86434*t86469*(8.8E1/9.0)+ccab3*gcab*t86222*t86223*t86224*1.0/(t86238*t86238*t86238) \
               *(t86572*t86572)*2.0+ccab3*gamma_aa[index]*gcab*t86222*t86224*t86434*t86470*(4.4E1/3.0)-ccab2*gamma_aa[index]* \
               t86222*t86223*t86225*t86566*t86568*(1.6E1/3.0)+ccab3*gcab*t86222*t86223*t86433*t86371*t86470*(3.2E1/ \
               3.0)+ccab1*gcab*t86222*1.0/(t86231*t86231*t86231)*t86223*t86433*t86371*(3.2E1/9.0)-ccab3*gcab*t86222* \
               t86223*t86224*t86567*(gamma_aa[index]*gcab*t86434*(4.4E1/3.0)+t86222*t86433*t86371*(3.2E1/3.0)+gamma_aa[index]* \
               t86222*t86223*t86434*(8.8E1/3.0)+gamma_aa[index]*gcab*t86222*t86224*t86434*(4.4E1/3.0)+gcab*t86222* \
               t86223*t86433*t86371*(3.2E1/3.0))-ccab3*gamma_aa[index]*gcab*t86222*t86224*t86225*t86572*t86567*8.0) \
               +(ccab0+ccab1*gcab*t86223*t86471+ccab2*t86222*t86224*t86469+ccab3*gcab*t86222*t86223*t86224*t86470) \
               *(t86239*(-t86503+t86523-t86495-t86300*t86264*t86283*t86483*t86289*8.0+t86300*t86264*t86318*t86278* \
               t86289*8.0-t86504*t86264*t86283*t86278*t86289*2.0E1-t86513*t86264*t86286*t86278*t86289+t86264*t86318* \
               t86483*t86286*t86289*2.0-t86264*t86283*t86259*t86286*t86278*1.2E1+t86252*t86257*t86486*t86497*t86498* \
               (1.0/2.0)+t86264*t86283*t86286*t86289*(t86503-t86523+t86495-1.0/(t86270*t86270*t86270)*t86276*t86475* \
               t86496*2.0+t86276*t86475*t86476*(b2f*c*t86472*(4.0/9.0)+b4f*t86246*t86473*(1.0E1/9.0)+b1f*c*t86291* \
               t86472*(2.0/9.0)+b3f*c*t86242*t86472*(2.0/3.0)-b1f*t86246*t86473*t86487*(1.0/3.6E1)+b3f*t86246*t86291* \
               t86473*(1.0/1.2E1))+1.0/(t86270*t86270*t86270*t86270)*1.0/(t86273*t86273)*t86265*t86276*t86496*(1.0/ \
               2.0)-a1f*c*c0f*t86274*t86472*(8.0/9.0)-t86252*t86257*t86486*t86497*t86498*(1.0/2.0)+a1f*c*t86251*t86481* \
               t86475*t86476*(2.0/3.0)-a1p*c*t86251*t86292*t86293*t86298*(2.0/3.0))+t86300*t86264*t86283*t86258*t86259* \
               t86278*3.2E1+t86264*t86283*t86258*t86483*t86259*t86286*8.0-t86264*t86318*t86258*t86259*t86286*t86278* \
               8.0+a1p*c*t86251*t86292*t86293*t86298*(2.0/3.0)-Aa*t86301*t86311*t86320*t86313*t86513*t86264*2.0+Aa* \
               t86301*t86311*t86313*t86506*t86264*t86318*4.0-Aa*t86301*t86311*t86313*t86264*t86283*(t86504*t86289* \
               2.0E1+t86259*t86286*1.2E1-t86300*t86258*t86259*3.2E1)*2.0-t86301*t86320*t86313*t86521*t86514*t86264* \
               t86318*t86516*2.0+t86301*t86313*t86521*t86514*t86506*t86264*t86516*t86283*2.0-t86301*t86320*t86313* \
               t86522*1.0/(t86307*t86307*t86307)*t86514*t86264*t86283*2.0+t86301*t86320*t86313*t86514*t86264*t86516* \
               t86283*(b2a*c*t86472*(4.0/9.0)+b4a*t86246*t86473*(1.0E1/9.0)+b1a*c*t86291*t86472*(2.0/9.0)+b3a*c*t86242* \
               t86472*(2.0/3.0)-b1a*t86246*t86473*t86487*(1.0/3.6E1)+b3a*t86246*t86291*t86473*(1.0/1.2E1))+Aa*a1a* \
               c*t86301*t86311*t86320*t86251*t86264*t86318*(4.0/3.0)-Aa*a1a*c*t86301*t86311*t86320*t86264*t86283* \
               t86472*(8.0/9.0)-Aa*a1a*c*t86301*t86311*t86251*t86506*t86264*t86283*(4.0/3.0)+t86301*1.0/(t86310*t86310) \
               *t86302*t86320*t86313*t86522*1.0/(t86307*t86307*t86307*t86307)*t86264*t86283*(1.0/2.0)+a1a*c*t86301* \
               t86320*t86251*t86521*t86514*t86264*t86516*t86283*(2.0/3.0))-rho_a[index]*(t86620+t86622+t86616-t86529- \
               t86538+t86264*t86358*(t86621+t86614+t86529+t86538+t86619-t86361*t86362*t86526*t86607*2.0-t86346*t86535* \
               t86347*t86348-a1f*c*c0f*t86524*t86359*(8.0/9.0)-t86252*t86346*t86527*t86536*t86537*(1.0/2.0)-a1p*c* \
               t86331*t86353*t86347*t86348*(2.0/3.0)))+t86540*t86264*t86358*2.0+t86353*t86346*t86347*t86348*2.0-t86292* \
               t86257*t86293*t86298*2.0-a1p*c*c0p*t86331*t86355*(4.0/3.0)+a1p*c*c0p*t86251*t86277*(4.0/3.0)+t86300* \
               t86264*t86283*t86278*t86289*8.0+t86264*t86283*t86483*t86286*t86289*2.0-t86264*t86318*t86286*t86278* \
               t86289*2.0-t86264*t86283*t86258*t86259*t86286*t86278*8.0-Aa*t86301*t86311*t86320*t86313*t86264*t86318* \
               4.0+Aa*t86301*t86311*t86313*t86506*t86264*t86283*4.0-t86301*t86320*t86313*t86521*t86514*t86264*t86516* \
               t86283*2.0+Aa*a1a*c*t86301*t86311*t86320*t86251*t86264*t86283*(4.0/3.0))-(X-1.0)*(c0*t86446*(t86431* \
               (cxnl1*gamma_aa[index]*gx*t86434*t86392*(8.8E1/9.0)-cxnl1*t86420*t86433*t86371*t86389*2.4E1+cxnl2* \
               t86401*t86433*t86371*t86389*(3.04E2/9.0)-cxnl2*t86406*t86371*t86428*t86429*t86389*(3.2E1/3.0)-cxnl2* \
               t86371*t86374*t86429*t86467*t86389+cxnl2*t86371*t86374*t86457*t86458*t86389*2.0+cxnl1*gamma_aa[index]* \
               gx*t86432*t86371*t86456*t86389*(1.28E2/9.0)+cxnl3*gamma_aa[index]*gx*t86432*t86371*t86397*t86389*7.2E1- \
               cxnl3*gamma_aa[index]*gx*t86424*t86371*t86407*t86425*t86389*1.6E1-cxnl3*gamma_aa[index]*gx*t86371* \
               t86425*t86462*t86373*t86389+cxnl3*gamma_aa[index]*gx*t86371*t86373*t86463*t86464*t86389*2.0)-t86445* \
               t86438*2.0-t86411*(-t86402*t86453+t86440*t86449*2.0+t86403*t86453*t86386*6.0+t86440*t86453*t86385- \
               t86404*t86453*t86388*5.0+t86403*t86385*t86449*1.0E1-t86441*t86386*t86449*3.6E1+t86444*t86449*t86388* \
               5.0E1-t86441*t86453*t86385*t86386*6.0+t86404*t86385*t86386*t86449*4.0+t86444*t86453*t86385*t86388* \
               5.0-t86385*t86449*1.0/(t86387*t86387*t86387*t86387*t86387*t86387*t86387)*t86388*3.0E1)+cx1*gamma_aa[index]* \
               gx*t86434*t86392*(8.8E1/9.0)-cx1*t86420*t86433*t86371*t86389*2.4E1+cx2*t86401*t86433*t86371*t86389* \
               (3.04E2/9.0)-cx2*t86406*t86371*t86428*t86429*t86389*(3.2E1/3.0)-cx2*t86371*t86374*t86429*t86467*t86389+ \
               cx2*t86371*t86374*t86457*t86458*t86389*2.0+cx1*gamma_aa[index]*gx*t86432*t86371*t86456*t86389*(1.28E2/ \
               9.0)+cx3*gamma_aa[index]*gx*t86432*t86371*t86397*t86389*7.2E1-cx3*gamma_aa[index]*gx*t86424*t86371* \
               t86407*t86425*t86389*1.6E1-cx3*gamma_aa[index]*gx*t86371*t86425*t86462*t86373*t86389+cx3*gamma_aa[index]* \
               gx*t86371*t86373*t86463*t86464*t86389*2.0)+c0*pow(rho_a[index],1.0/3.0)*(t86411*t86445-t86431*t86438- \
               cx1*gamma_aa[index]*gx*t86225*t86392*(8.0/3.0)+cx1*t86420*t86406*t86371*t86389*(8.0/3.0)-cx2*t86401* \
               t86406*t86371*t86389*(1.6E1/3.0)+cx2*t86371*t86374*t86428*t86429*t86389-cx3*gamma_aa[index]*gx*t86371* \
               t86407*t86397*t86389*8.0+cx3*gamma_aa[index]*gx*t86424*t86371*t86425*t86373*t86389)*(8.0/3.0)+c0*t86327* \
               (cx0+t86411*t86431+cx1*gamma_aa[index]*gx*t86226*t86392+cx2*t86401*t86371*t86374*t86389+cx3*gamma_aa[index]* \
               gx*t86371*t86373*t86397*t86389)*(4.0/9.0))+rho_a[index]*t86606*(t86620+t86622+t86616-t86529-t86538- \
               t86264*t86358*(t86620-t86621+t86622-t86614+t86616-t86529-t86538-t86619+t86361*t86362*t86526*t86607* \
               2.0+a1f*c*c0f*t86524*t86359*(8.0/9.0)))-rho_a[index]*t86574*(ccaa1*gamma_aa[index]*gcaa*t86434*t86577* \
               (8.8E1/9.0)-ccaa1*t86433*t86371*t86372*t86587*2.4E1+ccaa2*t86433*t86371*t86372*t86586*(3.04E2/9.0) \
               -ccaa2*t86406*t86371*t86372*t86590*t86596*(3.2E1/3.0)-ccaa2*t86371*t86372*t86374*t86596*(gamma_aa[index]* \
               gcaa*t86434*(1.76E2/9.0)+t86433*t86371*t86372*(3.04E2/9.0))+ccaa2*t86371*t86372*t86374*(t86590*t86590) \
               *1.0/(t86585*t86585*t86585)*2.0+ccaa3*gamma_aa[index]*gcaa*t86432*t86371*t86372*t86582*7.2E1+ccaa1* \
               gamma_aa[index]*gcaa*t86432*t86371*t86372*1.0/(t86576*t86576*t86576)*(1.28E2/9.0)+ccaa3*gamma_aa[index]* \
               gcaa*t86371*t86372*t86373*1.0/(t86581*t86581*t86581)*(t86594*t86594)*2.0-ccaa3*gamma_aa[index]*gcaa* \
               t86371*t86372*t86373*t86595*(gamma_aa[index]*gcaa*t86434*(8.8E1/3.0)+t86433*t86371*t86372*(3.04E2/ \
               3.0)+gamma_aa[index]*gcaa*t86432*t86371*t86372*7.2E1)-ccaa3*gamma_aa[index]*gcaa*t86371*t86407*t86372* \
               t86594*t86595*1.6E1)+rho_a[index]*t86602*t86598*2.0;
        } else if (rho_a[index] > cutoff_) {
            double t90541 = 1.0/pow(rho_a[index],1.0/3.0);
            double t90542 = c*t90541;
            double t90543 = sqrt(t90542);
            double t90544 = b1f*t90543;
            double t90545 = pow(t90542,3.0/2.0);
            double t90546 = b3f*t90545;
            double t90547 = c*c;
            double t90548 = 1.0/pow(rho_a[index],2.0/3.0);
            double t90549 = b4f*t90547*t90548;
            double t90550 = b2f*c*t90541;
            double t90551 = t90550+t90544+t90546+t90549;
            double t90552 = 1.0/pow(rho_a[index],4.0/3.0);
            double t90553 = b1p*t90543;
            double t90554 = b3p*t90545;
            double t90555 = b4p*t90547*t90548;
            double t90556 = b2p*c*t90541;
            double t90557 = t90553+t90554+t90555+t90556;
            double t90558 = 1.0/pow(rho_a[index],5.0/3.0);
            double t90559 = 1.0/sqrt(t90542);
            double t90560 = 1.0/c0f;
            double t90561 = 1.0/t90551;
            double t90562 = t90560*t90561*(1.0/2.0);
            double t90563 = t90562+1.0;
            double t90564 = 1.0/c0p;
            double t90565 = 1.0/t90557;
            double t90566 = t90564*t90565*(1.0/2.0);
            double t90567 = t90566+1.0;
            double t90568 = a1p*c*t90541;
            double t90569 = t90568+1.0;
            double t90570 = 1.0/t90567;
            double t90571 = 1.0/(t90557*t90557);
            double t90572 = b4p*t90547*t90558*(2.0/3.0);
            double t90573 = b2p*c*t90552*(1.0/3.0);
            double t90574 = b1p*c*t90552*t90559*(1.0/6.0);
            double t90575 = b3p*c*t90543*t90552*(1.0/2.0);
            double t90576 = t90572+t90573+t90574+t90575;
            double t90577 = t90570*t90571*t90576*t90569;
            double t90578 = log(t90567);
            double t90579 = 1.0/pow(rho_a[index],8.0/3.0);
            double t90580 = gamma_aa[index]*gamma_aa[index];
            double t90581 = gcaa*gcaa;
            double t90582 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]);
            double t90583 = 1.0/pow(rho_a[index],1.6E1/3.0);
            double t90584 = pow(2.0,1.0/3.0);
            double t90585 = t90584*2.0;
            double t90586 = t90585-2.0;
            double t90587 = two_13*2.0;
            double t90588 = t90587-2.0;
            double t90589 = 1.0/t90588;
            double t90590 = log(t90563);
            double t90591 = a1f*c*t90541;
            double t90592 = t90591+1.0;
            double t90593 = gamma_aa[index]*gcaa*t90579;
            double t90594 = t90593+1.0;
            double t90595 = 1.0/t90594;
            double t90596 = gamma_aa[index]*gcaa*t90579*3.0;
            double t90597 = gamma_aa[index]*gcaa*t90580*t90581*t90582;
            double t90598 = t90580*t90581*t90583*3.0;
            double t90599 = t90596+t90597+t90598+1.0;
            double t90600 = 1.0/t90599;
            double t90601 = gamma_aa[index]*gcaa*t90579*2.0;
            double t90602 = t90580*t90581*t90583;
            double t90603 = t90601+t90602+1.0;
            double t90604 = 1.0/t90603;
            double t90605 = 1.0/pow(rho_a[index],1.9E1/3.0);
            double t90606 = 1.0/pow(rho_a[index],1.1E1/3.0);
            double t90607 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]*rho_a[index]);
            double t90608 = c0f*t90590*t90592*2.0;
            double t90609 = c0p*t90569*t90578*2.0;
            double t90610 = 1.0/pow(rho_a[index],1.0E1);
            double t90611 = 1.0/pow(rho_a[index],2.2E1/3.0);
            double t90612 = 1.0/(t90594*t90594);
            double t90613 = gamma_aa[index]*gcaa*t90606*(1.6E1/3.0);
            double t90614 = t90605*t90580*t90581*(1.6E1/3.0);
            double t90615 = t90613+t90614;
            double t90616 = gamma_aa[index]*gcaa*t90606*8.0;
            double t90617 = gamma_aa[index]*gcaa*t90580*t90607*t90581*8.0;
            double t90618 = t90605*t90580*t90581*1.6E1;
            double t90619 = t90616+t90617+t90618;
            double t90620 = 1.0/(t90599*t90599);
            double t90621 = 1.0/pow(rho_a[index],1.4E1/3.0);
            double t90622 = 1.0/(t90603*t90603);
            double t90623 = 1.0/t90563;
            double t90624 = 1.0/(t90551*t90551);
            double t90625 = b4f*t90547*t90558*(2.0/3.0);
            double t90626 = b2f*c*t90552*(1.0/3.0);
            double t90627 = b1f*c*t90552*t90559*(1.0/6.0);
            double t90628 = b3f*c*t90543*t90552*(1.0/2.0);
            double t90629 = t90625+t90626+t90627+t90628;
            double t90630 = a1f*c*c0f*t90552*t90590*(2.0/3.0);
            double t90631 = a1p*c*c0p*t90552*t90578*(2.0/3.0);
            double t90632 = ccaa1*gamma_aa[index]*gcaa*t90606*t90595*(8.0/3.0);
            double t90633 = ccaa3*gamma_aa[index]*gcaa*t90600*t90580*t90607*t90581*8.0;
            double t90634 = ccaa2*t90604*t90605*t90580*t90581*(1.6E1/3.0);
            double t90635 = t90632+t90633+t90634-ccaa1*t90612*t90605*t90580*t90581*(8.0/3.0)-ccaa2*t90622*t90615* \
               t90580*t90581*t90583-ccaa3*gamma_aa[index]*gcaa*t90620*t90580*t90581*t90582*t90619;
            double t90636 = ccaa1*gamma_aa[index]*gcaa*t90595*t90579;
            double t90637 = ccaa3*gamma_aa[index]*gcaa*t90600*t90580*t90581*t90582;
            double t90638 = ccaa2*t90604*t90580*t90581*t90583;
            double t90639 = ccaa0+t90636+t90637+t90638;
            double t90640 = 1.0/pow(rho_a[index],7.0/3.0);
            double t90641 = 1.0/pow(t90542,3.0/2.0);
            double t90642 = t90629*t90629;
            double t90643 = t90576*t90576;
            double t90644 = 1.0/(t90557*t90557*t90557);
            double t90645 = t90570*t90643*t90644*t90569*2.0;
            double t90646 = b4p*t90547*t90579*(1.0E1/9.0);
            double t90647 = b2p*c*t90640*(4.0/9.0);
            double t90648 = b3p*t90547*t90559*t90579*(1.0/1.2E1);
            double t90649 = b1p*c*t90640*t90559*(2.0/9.0);
            double t90650 = b3p*c*t90640*t90543*(2.0/3.0);
            double t90651 = t90650+t90646+t90647+t90648+t90649-b1p*t90641*t90547*t90579*(1.0/3.6E1);
            double t90652 = 1.0/(t90567*t90567);
            double t90653 = 1.0/(t90557*t90557*t90557*t90557);
            double t90654 = a1p*c*c0p*t90640*t90578*(8.0/9.0);
            double t90655 = pow(rho_a[index],5.0/3.0);
            double t90656 = C_k*t90655;
            double t90657 = tau_a[index]*1.0E20;
            double t90658 = 1.0/tau_a[index];
            double t90659 = -t90656+t90657;
            double t90660 = ( (t90659 > 0.0) ?  1.0 : 0.0 ) ;
            double t90661 = C_k*t90660*t90655*t90658;
            double t90662 = t90656-t90657;
            double t90663 = ( (t90662 > 0.0) ?  1.0 : 0.0 ) ;
            double t90664 = t90663*1.0E20;
            double t90665 = t90661+t90664-1.0;
            double t90666 = t90665*t90665;
            double t90667 = t90661+t90664+1.0;
            double t90668 = t90666*t90666;
            double t90669 = gx*gx;
            double t90670 = gamma_aa[index]*gx*t90579;
            double t90671 = t90670+1.0;
            double t90685 = gamma_aa[index]*gx*t90606*(1.6E1/3.0);
            double t90686 = t90605*t90580*t90669*(1.6E1/3.0);
            double t90672 = t90685+t90686;
            double t90673 = gamma_aa[index]*gx*t90579*2.0;
            double t90674 = t90580*t90583*t90669;
            double t90675 = t90673+t90674+1.0;
            double t90676 = gamma_aa[index]*gx*t90579*3.0;
            double t90677 = gamma_aa[index]*gx*t90580*t90582*t90669;
            double t90678 = t90580*t90583*t90669*3.0;
            double t90679 = t90676+t90677+t90678+1.0;
            double t90680 = 1.0/(t90679*t90679);
            double t90681 = gamma_aa[index]*gx*t90606*8.0;
            double t90682 = gamma_aa[index]*gx*t90580*t90607*t90669*8.0;
            double t90683 = t90605*t90580*t90669*1.6E1;
            double t90684 = t90681+t90682+t90683;
            double t90687 = 1.0/(t90675*t90675);
            double t90688 = 1.0/t90671;
            double t90689 = 1.0/t90679;
            double t90690 = 1.0/t90675;
            double t90691 = 1.0/(t90671*t90671);
            double t90692 = 0.0 ;
            double t90693 = pow(rho_a[index],2.0/3.0);
            double t90694 = 1.0/t90667;
            double t90695 = C_k*t90692*t90693*(5.0E20/3.0);
            double t90696 = C_k*C_k;
            double t90697 = pow(rho_a[index],7.0/3.0);
            double t90698 = C_k*t90660*t90693*t90658*(5.0/3.0);
            double t90700 = t90692*t90658*t90696*t90697*(5.0/3.0);
            double t90699 = -t90700+t90695+t90698;
            double t90701 = 1.0/(t90667*t90667*t90667);
            double t90702 = 1.0/(t90667*t90667*t90667*t90667*t90667);
            double t90703 = pow(rho_a[index],4.0/3.0);
            double t90704 = rho_a[index]*rho_a[index];
            double t90705 = 0.0 ;
            double t90706 = 1.0/(t90667*t90667);
            double t90707 = t90699*t90699;
            double t90708 = 1.0/(t90667*t90667*t90667*t90667);
            double t90709 = 1.0/(t90667*t90667*t90667*t90667*t90667*t90667);
            double t90710 = C_k*t90541*t90692*(1.0E21/9.0);
            double t90711 = C_k*rho_a[index]*t90704*t90705*t90658*t90696*(2.5E1/9.0);
            double t90712 = C_k*t90541*t90660*t90658*(1.0E1/9.0);
            double t90714 = t90703*t90705*t90696*(2.5E21/9.0);
            double t90715 = t90703*t90692*t90658*t90696*(2.0E1/3.0);
            double t90713 = t90710+t90711+t90712-t90714-t90715;
            double t90716 = 1.0/(t90671*t90671*t90671);
            double t90717 = t90672*t90672;
            double t90718 = 1.0/(t90675*t90675*t90675);
            double t90719 = gamma_aa[index]*gx*t90621*(8.8E1/3.0);
            double t90720 = gamma_aa[index]*gx*t90610*t90580*t90669*7.2E1;
            double t90721 = t90611*t90580*t90669*(3.04E2/3.0);
            double t90722 = t90720+t90721+t90719;
            double t90723 = t90684*t90684;
            double t90724 = 1.0/(t90679*t90679*t90679);
            double t90725 = gamma_aa[index]*gx*t90621*(1.76E2/9.0);
            double t90726 = t90611*t90580*t90669*(3.04E2/9.0);
            double t90727 = t90725+t90726;
            double t90728 = X-1.0;
            double t90729 = t90702*t90665*t90668;
            double t90730 = cxnl1*gamma_aa[index]*gx*t90579*t90688;
            double t90731 = cxnl3*gamma_aa[index]*gx*t90580*t90582*t90669*t90689;
            double t90732 = cxnl2*t90580*t90690*t90583*t90669;
            double t90733 = cxnl0+t90730+t90731+t90732;
            double t90734 = t90665*t90694;
            double t90735 = t90734+t90729-t90701*t90665*t90666*2.0;
            double t90736 = cxnl1*gamma_aa[index]*gx*t90606*t90688*(8.0/3.0);
            double t90737 = cxnl3*gamma_aa[index]*gx*t90580*t90607*t90669*t90689*8.0;
            double t90738 = cxnl2*t90605*t90580*t90690*t90669*(1.6E1/3.0);
            double t90739 = t90736+t90737+t90738-cxnl1*t90605*t90580*t90691*t90669*(8.0/3.0)-cxnl2*t90580*t90672* \
               t90583*t90669*t90687-cxnl3*gamma_aa[index]*gx*t90580*t90680*t90582*t90684*t90669;
            double t90740 = t90694*t90699;
            double t90741 = t90708*t90665*t90666*t90699*6.0;
            double t90742 = t90702*t90668*t90699*5.0;
            double t90743 = t90740+t90741+t90742-t90701*t90666*t90699*6.0-t90706*t90665*t90699-t90709*t90665* \
               t90668*t90699*5.0;
            v_rho_a_rho_a_[index] = t90635*(t90609+t90586*t90589*(t90608-c0p*t90569*t90578*2.0))*2.0+t90639*(t90631- \
               t90577+t90586*t90589*(t90630+t90577-t90623*t90624*t90592*t90629-a1p*c*c0p*t90552*t90578*(2.0/3.0)) \
               )*2.0+rho_a[index]*t90639*(-t90645-t90654+t90586*t90589*(t90645+t90654-t90570*t90651*t90571*t90569- \
               1.0/(t90551*t90551*t90551)*t90623*t90642*t90592*2.0+t90623*t90624*t90592*(b2f*c*t90640*(4.0/9.0)+b4f* \
               t90547*t90579*(1.0E1/9.0)+b1f*c*t90640*t90559*(2.0/9.0)+b3f*c*t90640*t90543*(2.0/3.0)-b1f*t90641*t90547* \
               t90579*(1.0/3.6E1)+b3f*t90547*t90559*t90579*(1.0/1.2E1))+1.0/(t90551*t90551*t90551*t90551)*t90560* \
               t90642*1.0/(t90563*t90563)*t90592*(1.0/2.0)-a1f*c*c0f*t90640*t90590*(8.0/9.0)-t90643*t90652*t90653* \
               t90564*t90569*(1.0/2.0)+a1f*c*t90623*t90552*t90624*t90629*(2.0/3.0)-a1p*c*t90552*t90570*t90571*t90576* \
               (2.0/3.0))+t90570*t90651*t90571*t90569+t90643*t90652*t90653*t90564*t90569*(1.0/2.0)+a1p*c*t90552*t90570* \
               t90571*t90576*(2.0/3.0))-rho_a[index]*t90635*(t90631-t90577+t90586*t90589*(t90630-t90631+t90577-t90623* \
               t90624*t90592*t90629))*2.0-rho_a[index]*(t90609+t90586*t90589*(t90608-t90609))*(ccaa1*gamma_aa[index]* \
               gcaa*t90621*t90595*(8.8E1/9.0)-ccaa1*t90611*t90612*t90580*t90581*2.4E1+ccaa2*t90611*t90604*t90580* \
               t90581*(3.04E2/9.0)-ccaa2*t90622*t90605*t90615*t90580*t90581*(3.2E1/3.0)-ccaa2*t90622*t90580*t90581* \
               t90583*(gamma_aa[index]*gcaa*t90621*(1.76E2/9.0)+t90611*t90580*t90581*(3.04E2/9.0))+ccaa2*1.0/(t90603* \
               t90603*t90603)*(t90615*t90615)*t90580*t90581*t90583*2.0+ccaa3*gamma_aa[index]*gcaa*t90600*t90610*t90580* \
               t90581*7.2E1+ccaa1*gamma_aa[index]*gcaa*t90610*t90580*t90581*1.0/(t90594*t90594*t90594)*(1.28E2/9.0) \
               +ccaa3*gamma_aa[index]*gcaa*t90580*t90581*t90582*(t90619*t90619)*1.0/(t90599*t90599*t90599)*2.0-ccaa3* \
               gamma_aa[index]*gcaa*t90620*t90580*t90581*t90582*(gamma_aa[index]*gcaa*t90621*(8.8E1/3.0)+t90611*t90580* \
               t90581*(3.04E2/3.0)+gamma_aa[index]*gcaa*t90610*t90580*t90581*7.2E1)-ccaa3*gamma_aa[index]*gcaa*t90620* \
               t90580*t90607*t90581*t90619*1.6E1)-c0*t90548*t90728*(cx0+t90733*t90735+cx1*gamma_aa[index]*gx*t90579* \
               t90688+cx2*t90580*t90690*t90583*t90669+cx3*gamma_aa[index]*gx*t90580*t90582*t90669*t90689)*(4.0/9.0) \
               -c0*t90703*t90728*((t90729+t90694*(t90661+ ( (t90656-tau_a[index]*1.0E20 > 0.0) ? 1.0*1.0E20 : 0.0  \
               ) -1.0)-t90701*t90665*t90666*2.0)*(cxnl1*gamma_aa[index]*gx*t90621*t90688*(8.8E1/9.0)-cxnl1*t90611* \
               t90580*t90691*t90669*2.4E1+cxnl2*t90611*t90580*t90690*t90669*(3.04E2/9.0)-cxnl2*t90605*t90580*t90672* \
               t90669*t90687*(3.2E1/3.0)+cxnl2*t90580*t90717*t90583*t90718*t90669*2.0-cxnl2*t90580*t90583*t90727* \
               t90669*t90687+cxnl1*gamma_aa[index]*gx*t90610*t90580*t90716*t90669*(1.28E2/9.0)+cxnl3*gamma_aa[index]* \
               gx*t90610*t90580*t90669*t90689*7.2E1-cxnl3*gamma_aa[index]*gx*t90722*t90580*t90680*t90582*t90669+cxnl3* \
               gamma_aa[index]*gx*t90723*t90580*t90724*t90582*t90669*2.0-cxnl3*gamma_aa[index]*gx*t90580*t90607*t90680* \
               t90684*t90669*1.6E1)-t90743*t90739*2.0-t90733*(t90706*t90707*2.0-t90713*t90694+t90701*t90713*t90666* \
               6.0+t90701*t90707*t90665*1.0E1-t90702*t90713*t90668*5.0+t90713*t90706*t90665-t90707*t90708*t90666* \
               3.6E1+t90707*t90709*t90668*5.0E1+t90702*t90707*t90665*t90666*4.0-t90713*t90708*t90665*t90666*6.0+t90713* \
               t90709*t90665*t90668*5.0-t90707*t90665*1.0/(t90667*t90667*t90667*t90667*t90667*t90667*t90667)*t90668* \
               3.0E1)+cx1*gamma_aa[index]*gx*t90621*t90688*(8.8E1/9.0)-cx1*t90611*t90580*t90691*t90669*2.4E1+cx2* \
               t90611*t90580*t90690*t90669*(3.04E2/9.0)-cx2*t90605*t90580*t90672*t90669*t90687*(3.2E1/3.0)+cx2*t90580* \
               t90717*t90583*t90718*t90669*2.0-cx2*t90580*t90583*t90727*t90669*t90687+cx1*gamma_aa[index]*gx*t90610* \
               t90580*t90716*t90669*(1.28E2/9.0)+cx3*gamma_aa[index]*gx*t90610*t90580*t90669*t90689*7.2E1-cx3*gamma_aa[index]* \
               gx*t90722*t90580*t90680*t90582*t90669+cx3*gamma_aa[index]*gx*t90723*t90580*t90724*t90582*t90669*2.0- \
               cx3*gamma_aa[index]*gx*t90580*t90607*t90680*t90684*t90669*1.6E1)-c0*pow(rho_a[index],1.0/3.0)*t90728* \
               (t90733*t90743-t90735*t90739-cx1*gamma_aa[index]*gx*t90606*t90688*(8.0/3.0)+cx1*t90605*t90580*t90691* \
               t90669*(8.0/3.0)-cx2*t90605*t90580*t90690*t90669*(1.6E1/3.0)+cx2*t90580*t90672*t90583*t90669*t90687- \
               cx3*gamma_aa[index]*gx*t90580*t90607*t90669*t90689*8.0+cx3*gamma_aa[index]*gx*t90580*t90680*t90582* \
               t90684*t90669)*(8.0/3.0);
        } else if (rho_b[index] > cutoff_) {
            v_rho_a_rho_a_[index] = 0.0;
        } else {
            v_rho_a_rho_a_[index] = 0.0;
        } 

        //V_rho_a_rho_b
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t86624 = 1.0/pow(rho_a[index],1.0/3.0);
            double t86625 = c*t86624;
            double t86626 = sqrt(t86625);
            double t86627 = pow(t86625,3.0/2.0);
            double t86628 = c*c;
            double t86629 = 1.0/pow(rho_a[index],2.0/3.0);
            double t86630 = 1.0/c0p;
            double t86631 = b1p*t86626;
            double t86632 = b3p*t86627;
            double t86633 = b4p*t86628*t86629;
            double t86634 = b2p*c*t86624;
            double t86635 = t86631+t86632+t86633+t86634;
            double t86636 = 1.0/t86635;
            double t86637 = t86630*t86636*(1.0/2.0);
            double t86638 = t86637+1.0;
            double t86639 = log(t86638);
            double t86640 = a1p*c*t86624;
            double t86641 = t86640+1.0;
            double t86642 = pow(2.0,1.0/3.0);
            double t86643 = t86642*2.0;
            double t86644 = t86643-2.0;
            double t86645 = two_13*2.0;
            double t86646 = t86645-2.0;
            double t86647 = 1.0/t86646;
            double t86648 = 1.0/c0f;
            double t86649 = 1.0/pow(rho_b[index],1.0/3.0);
            double t86650 = c*t86649;
            double t86651 = sqrt(t86650);
            double t86652 = pow(t86650,3.0/2.0);
            double t86653 = 1.0/pow(rho_b[index],2.0/3.0);
            double t86654 = b1p*t86651;
            double t86655 = b3p*t86652;
            double t86656 = b4p*t86653*t86628;
            double t86657 = b2p*c*t86649;
            double t86658 = t86654+t86655+t86656+t86657;
            double t86659 = 1.0/t86658;
            double t86660 = t86630*t86659*(1.0/2.0);
            double t86661 = t86660+1.0;
            double t86662 = log(t86661);
            double t86663 = a1p*c*t86649;
            double t86664 = t86663+1.0;
            double t86665 = c0p*t86662*t86664*2.0;
            double t86666 = rho_a[index]+rho_b[index];
            double t86667 = 1.0/pow(t86666,1.0/3.0);
            double t86668 = c*t86667;
            double t86669 = sqrt(t86668);
            double t86670 = pow(t86668,3.0/2.0);
            double t86671 = 1.0/pow(t86666,2.0/3.0);
            double t86672 = b1p*t86669;
            double t86673 = b3p*t86670;
            double t86674 = b4p*t86671*t86628;
            double t86675 = b2p*c*t86667;
            double t86676 = t86672+t86673+t86674+t86675;
            double t86677 = 1.0/t86676;
            double t86678 = t86630*t86677*(1.0/2.0);
            double t86679 = t86678+1.0;
            double t86680 = log(t86679);
            double t86681 = a1p*c*t86667;
            double t86682 = t86681+1.0;
            double t86683 = c0p*t86680*t86682*2.0;
            double t86684 = rho_a[index]-rho_b[index];
            double t86685 = t86684*t86684;
            double t86686 = 1.0/t86666;
            double t86687 = t86684*t86686;
            double t86688 = 1.0/(t86666*t86666*t86666*t86666);
            double t86689 = t86685*t86685;
            double t86690 = t86687+1.0;
            double t86691 = pow(t86690,4.0/3.0);
            double t86692 = -t86687+1.0;
            double t86693 = pow(t86692,4.0/3.0);
            double t86694 = t86691+t86693-2.0;
            double t86695 = gcab*gcab;
            double t86696 = 1.0/pow(rho_a[index],1.1E1/3.0);
            double t86697 = 1.0/pow(rho_b[index],1.1E1/3.0);
            double t86698 = 1.0/pow(rho_a[index],8.0/3.0);
            double t86699 = gamma_aa[index]*t86698*(1.0/2.0);
            double t86700 = 1.0/pow(rho_b[index],8.0/3.0);
            double t86701 = gamma_bb[index]*t86700*(1.0/2.0);
            double t86702 = t86701+t86699;
            double t86703 = t86702*t86702;
            double t86704 = t86703*t86695*3.0;
            double t86705 = gcab*t86702*t86703*t86695;
            double t86706 = gcab*t86702*3.0;
            double t86707 = t86704+t86705+t86706+1.0;
            double t86708 = t86703*t86695;
            double t86709 = gcab*t86702*2.0;
            double t86710 = t86708+t86709+1.0;
            double t86711 = gamma_aa[index]*gcab*t86696*4.0;
            double t86712 = gamma_aa[index]*gcab*t86703*t86695*t86696*4.0;
            double t86713 = gamma_aa[index]*t86702*t86695*t86696*8.0;
            double t86714 = t86711+t86712+t86713;
            double t86715 = 1.0/(t86707*t86707);
            double t86716 = gamma_bb[index]*gcab*t86697*4.0;
            double t86717 = gamma_bb[index]*gcab*t86703*t86695*t86697*4.0;
            double t86718 = gamma_bb[index]*t86702*t86695*t86697*8.0;
            double t86719 = t86716+t86717+t86718;
            double t86720 = gamma_aa[index]*gcab*t86696*(8.0/3.0);
            double t86721 = gamma_aa[index]*t86702*t86695*t86696*(8.0/3.0);
            double t86722 = t86720+t86721;
            double t86723 = gamma_bb[index]*gcab*t86697*(8.0/3.0);
            double t86724 = gamma_bb[index]*t86702*t86695*t86697*(8.0/3.0);
            double t86725 = t86723+t86724;
            double t86726 = 1.0/(t86710*t86710);
            double t86727 = gcab*t86702;
            double t86728 = t86727+1.0;
            double t86729 = 1.0/(t86728*t86728);
            double t86730 = 1.0/t86710;
            double t86731 = 1.0/t86707;
            double t86732 = 1.0/pow(t86666,4.0/3.0);
            double t86733 = b1f*t86669;
            double t86734 = b3f*t86670;
            double t86735 = b4f*t86671*t86628;
            double t86736 = b2f*c*t86667;
            double t86737 = t86733+t86734+t86735+t86736;
            double t86738 = 1.0/t86737;
            double t86739 = t86648*t86738*(1.0/2.0);
            double t86740 = t86739+1.0;
            double t86741 = log(t86740);
            double t86742 = a1f*c*t86667;
            double t86743 = t86742+1.0;
            double t86745 = c0f*t86741*t86743*2.0;
            double t86744 = -t86745+t86683;
            double t86746 = 1.0/(t86666*t86666);
            double t86774 = t86746*t86684;
            double t86747 = -t86774+t86686;
            double t86748 = t86745-t86683;
            double t86749 = 1.0/pow(t86666,5.0/3.0);
            double t86750 = 1.0/sqrt(t86668);
            double t86751 = 1.0/t86679;
            double t86752 = 1.0/(t86676*t86676);
            double t86753 = b4p*t86628*t86749*(2.0/3.0);
            double t86754 = b2p*c*t86732*(1.0/3.0);
            double t86755 = b1p*c*t86732*t86750*(1.0/6.0);
            double t86756 = b3p*c*t86732*t86669*(1.0/2.0);
            double t86757 = t86753+t86754+t86755+t86756;
            double t86758 = t86751*t86752*t86682*t86757;
            double t86759 = 1.0/d2fz0;
            double t86760 = 1.0/Aa;
            double t86761 = b1a*t86669;
            double t86762 = b3a*t86670;
            double t86763 = b4a*t86671*t86628;
            double t86764 = b2a*c*t86667;
            double t86765 = t86761+t86762+t86763+t86764;
            double t86766 = 1.0/t86765;
            double t86767 = t86760*t86766*(1.0/2.0);
            double t86768 = t86767+1.0;
            double t86769 = log(t86768);
            double t86770 = a1a*c*t86667;
            double t86771 = t86770+1.0;
            double t86772 = 1.0/(t86666*t86666*t86666*t86666*t86666);
            double t86773 = pow(t86690,1.0/3.0);
            double t86775 = t86773*t86747*(4.0/3.0);
            double t86776 = pow(t86692,1.0/3.0);
            double t86855 = t86747*t86776*(4.0/3.0);
            double t86777 = -t86855+t86775;
            double t86778 = t86688*t86689;
            double t86779 = t86778-1.0;
            double t86780 = a1f*c*t86624;
            double t86781 = t86780+1.0;
            double t86782 = b1f*t86626;
            double t86783 = b3f*t86627;
            double t86784 = b4f*t86628*t86629;
            double t86785 = b2f*c*t86624;
            double t86786 = t86782+t86783+t86784+t86785;
            double t86787 = 1.0/t86786;
            double t86788 = t86648*t86787*(1.0/2.0);
            double t86789 = t86788+1.0;
            double t86790 = 1.0/pow(rho_a[index],4.0/3.0);
            double t86791 = 1.0/pow(rho_a[index],5.0/3.0);
            double t86792 = 1.0/sqrt(t86625);
            double t86793 = log(t86789);
            double t86794 = 1.0/t86638;
            double t86795 = 1.0/(t86635*t86635);
            double t86796 = b4p*t86628*t86791*(2.0/3.0);
            double t86797 = b2p*c*t86790*(1.0/3.0);
            double t86798 = b1p*c*t86790*t86792*(1.0/6.0);
            double t86799 = b3p*c*t86626*t86790*(1.0/2.0);
            double t86800 = t86796+t86797+t86798+t86799;
            double t86801 = t86800*t86641*t86794*t86795;
            double t86802 = c0f*t86781*t86793*2.0;
            double t86803 = c0p*t86641*t86639*2.0;
            double t86804 = Aa*t86771*t86647*t86694*t86759*t86769*t86779*2.0;
            double t86805 = 1.0/t86728;
            double t86806 = t86772*t86647*t86694*t86748*t86689*4.0;
            double t86807 = t86774+t86686;
            double t86808 = 1.0/t86740;
            double t86809 = 1.0/(t86737*t86737);
            double t86810 = b4f*t86628*t86749*(2.0/3.0);
            double t86811 = b2f*c*t86732*(1.0/3.0);
            double t86812 = b1f*c*t86732*t86750*(1.0/6.0);
            double t86813 = b3f*c*t86732*t86669*(1.0/2.0);
            double t86814 = t86810+t86811+t86812+t86813;
            double t86815 = a1f*c*c0f*t86732*t86741*(2.0/3.0);
            double t86816 = a1p*c*c0p*t86732*t86680*(2.0/3.0);
            double t86817 = t86772*t86689*4.0;
            double t86818 = t86807*t86773*(4.0/3.0);
            double t86854 = t86807*t86776*(4.0/3.0);
            double t86819 = t86818-t86854;
            double t86820 = 1.0/t86768;
            double t86821 = 1.0/(t86765*t86765);
            double t86822 = b4a*t86628*t86749*(2.0/3.0);
            double t86823 = b2a*c*t86732*(1.0/3.0);
            double t86824 = b1a*c*t86732*t86750*(1.0/6.0);
            double t86825 = b3a*c*t86732*t86669*(1.0/2.0);
            double t86826 = t86822+t86823+t86824+t86825;
            double t86827 = Aa*a1a*c*t86732*t86647*t86694*t86759*t86769*t86779*(2.0/3.0);
            double t86828 = a1f*c*t86649;
            double t86829 = t86828+1.0;
            double t86830 = b1f*t86651;
            double t86831 = b3f*t86652;
            double t86832 = b4f*t86653*t86628;
            double t86833 = b2f*c*t86649;
            double t86834 = t86830+t86831+t86832+t86833;
            double t86835 = 1.0/t86834;
            double t86836 = t86835*t86648*(1.0/2.0);
            double t86837 = t86836+1.0;
            double t86838 = 1.0/pow(rho_b[index],4.0/3.0);
            double t86839 = 1.0/pow(rho_b[index],5.0/3.0);
            double t86840 = 1.0/sqrt(t86650);
            double t86841 = log(t86837);
            double t86842 = 1.0/t86661;
            double t86843 = 1.0/(t86658*t86658);
            double t86844 = b4p*t86628*t86839*(2.0/3.0);
            double t86845 = b2p*c*t86838*(1.0/3.0);
            double t86846 = b1p*c*t86840*t86838*(1.0/6.0);
            double t86847 = b3p*c*t86651*t86838*(1.0/2.0);
            double t86848 = t86844+t86845+t86846+t86847;
            double t86849 = t86842*t86843*t86664*t86848;
            double t86850 = t86665-c0f*t86841*t86829*2.0;
            double t86851 = t86647*t86694*t86748*t86688*t86689;
            double t86852 = 1.0/pow(t86666,7.0/3.0);
            double t86853 = 1.0/pow(t86666,8.0/3.0);
            double t86871 = t86814*t86743*t86808*t86809;
            double t86856 = t86815-t86816-t86871+t86758;
            double t86857 = t86757*t86757;
            double t86858 = 1.0/pow(t86668,3.0/2.0);
            double t86859 = b4p*t86628*t86853*(1.0E1/9.0);
            double t86860 = b2p*c*t86852*(4.0/9.0);
            double t86861 = b1p*c*t86750*t86852*(2.0/9.0);
            double t86862 = b3p*c*t86852*t86669*(2.0/3.0);
            double t86863 = b3p*t86750*t86628*t86853*(1.0/1.2E1);
            double t86864 = t86860+t86861+t86862+t86863+t86859-b1p*t86628*t86853*t86858*(1.0/3.6E1);
            double t86865 = t86751*t86752*t86682*t86864;
            double t86866 = 1.0/(t86676*t86676*t86676);
            double t86867 = t86814*t86814;
            double t86868 = 1.0/(t86679*t86679);
            double t86869 = 1.0/(t86676*t86676*t86676*t86676);
            double t86870 = t86630*t86682*t86857*t86868*t86869*(1.0/2.0);
            double t86872 = 1.0/(t86666*t86666*t86666);
            double t86873 = a1p*c*t86732*t86751*t86752*t86757*(2.0/3.0);
            double t86874 = 1.0/(t86666*t86666*t86666*t86666*t86666*t86666);
            double t86875 = t86684*t86685*t86688*4.0;
            double t86876 = t86817+t86875;
            double t86877 = t86872*t86684*t86776*(8.0/3.0);
            double t86878 = 1.0/pow(t86690,2.0/3.0);
            double t86879 = t86807*t86747*t86878*(4.0/9.0);
            double t86880 = 1.0/pow(t86692,2.0/3.0);
            double t86881 = t86807*t86880*t86747*(4.0/9.0);
            double t86882 = t86881+t86877+t86879-t86773*t86872*t86684*(8.0/3.0);
            double t86883 = t86826*t86826;
            double t86884 = t86817-t86875;
            double t86885 = t86647*t86819*t86748*t86688*t86689;
            double t86886 = Aa*t86771*t86647*t86694*t86759*t86876*t86769*2.0;
            double t86887 = Aa*t86771*t86647*t86819*t86759*t86769*t86779*2.0;
            v_rho_a_rho_b_[index] = (ccab1*gamma_aa[index]*gcab*t86805*t86696*(4.0/3.0)-ccab2*t86703*t86722*t86726* \
               t86695+ccab2*gamma_aa[index]*t86702*t86730*t86695*t86696*(8.0/3.0)-ccab1*gamma_aa[index]*t86702*t86729* \
               t86695*t86696*(4.0/3.0)+ccab3*gamma_aa[index]*gcab*t86703*t86731*t86695*t86696*4.0-ccab3*gcab*t86702* \
               t86703*t86714*t86715*t86695)*(t86804+t86851-t86665+t86683-t86666*(t86806+t86816+t86827-t86758+t86885+ \
               t86886+t86887+t86647*t86694*t86856*t86688*t86689+t86647*t86684*t86685*t86694*t86748*t86688*4.0-t86820* \
               t86821*t86771*t86826*t86647*t86694*t86759*t86779)+rho_b[index]*(-t86849+t86644*t86647*(t86849-(1.0/ \
               (t86834*t86834)*t86829*(b2f*c*t86838*(1.0/3.0)+b4f*t86628*t86839*(2.0/3.0)+b1f*c*t86840*t86838*(1.0/ \
               6.0)+b3f*c*t86651*t86838*(1.0/2.0)))/t86837+a1f*c*c0f*t86841*t86838*(2.0/3.0)-a1p*c*c0p*t86662*t86838* \
               (2.0/3.0))+a1p*c*c0p*t86662*t86838*(2.0/3.0))+t86850*t86644*t86647)-(rho_b[index]*(t86665-t86850*t86644* \
               t86647)+rho_a[index]*(t86803+t86644*t86647*(t86802-c0p*t86641*t86639*2.0))-t86666*(t86804+t86683-t86744* \
               t86647*t86694*t86688*t86689))*(ccab2*1.0/(t86710*t86710*t86710)*t86703*t86722*t86725*t86695*-2.0+ccab3* \
               gcab*t86702*t86703*t86715*t86695*(gamma_aa[index]*gamma_bb[index]*t86695*t86696*t86697*(3.2E1/3.0) \
               +gamma_aa[index]*gamma_bb[index]*gcab*t86702*t86695*t86696*t86697*(3.2E1/3.0))-ccab2*gamma_aa[index]* \
               gamma_bb[index]*t86730*t86695*t86696*t86697*(3.2E1/9.0)+ccab1*gamma_aa[index]*gamma_bb[index]*t86729* \
               t86695*t86696*t86697*(3.2E1/9.0)+ccab2*gamma_aa[index]*t86702*t86725*t86726*t86695*t86696*(8.0/3.0) \
               +ccab2*gamma_bb[index]*t86702*t86722*t86726*t86695*t86697*(8.0/3.0)+ccab2*gamma_aa[index]*gamma_bb[index]* \
               t86703*t86726*(t86695*t86695)*t86696*t86697*(3.2E1/9.0)-ccab3*gcab*t86702*t86703*t86714*1.0/(t86707* \
               t86707*t86707)*t86719*t86695*2.0+ccab3*gamma_bb[index]*gcab*t86703*t86714*t86715*t86695*t86697*4.0+ \
               ccab3*gamma_aa[index]*gcab*t86703*t86715*t86719*t86695*t86696*4.0-ccab3*gamma_aa[index]*gamma_bb[index]* \
               gcab*t86702*t86731*t86695*t86696*t86697*(3.2E1/3.0)-ccab1*gamma_aa[index]*gamma_bb[index]*gcab*t86702* \
               1.0/(t86728*t86728*t86728)*t86695*t86696*t86697*(3.2E1/9.0))+(ccab0+ccab1*gcab*t86702*t86805+ccab2* \
               t86703*t86730*t86695+ccab3*gcab*t86702*t86703*t86731*t86695)*(t86885+t86886+t86887+t86666*(t86870+ \
               t86873+t86865-t86751*t86682*t86857*t86866*2.0+t86647*t86777*t86688*t86689*(t86815-t86816-t86871+t86758) \
               -a1p*c*c0p*t86680*t86852*(8.0/9.0)-t86647*t86694*t86688*t86689*(t86870+t86873+t86865-t86751*t86682* \
               t86857*t86866*2.0+t86743*t86808*1.0/(t86737*t86737*t86737)*t86867*2.0-t86743*t86808*t86809*(b2f*c* \
               t86852*(4.0/9.0)+b4f*t86628*t86853*(1.0E1/9.0)+b1f*c*t86750*t86852*(2.0/9.0)+b3f*c*t86852*t86669*(2.0/ \
               3.0)-b1f*t86628*t86853*t86858*(1.0/3.6E1)+b3f*t86750*t86628*t86853*(1.0/1.2E1))-1.0/(t86740*t86740) \
               *t86743*1.0/(t86737*t86737*t86737*t86737)*t86648*t86867*(1.0/2.0)+a1f*c*c0f*t86741*t86852*(8.0/9.0) \
               -a1p*c*c0p*t86680*t86852*(8.0/9.0)-a1f*c*t86732*t86814*t86808*t86809*(2.0/3.0))-t86772*t86647*t86819* \
               t86748*t86689*4.0-t86772*t86647*t86694*t86856*t86689*8.0+t86772*t86647*t86748*t86777*t86689*4.0+t86647* \
               t86685*t86694*t86748*t86688*1.2E1-t86647*t86694*t86748*t86874*t86689*2.0E1-t86647*t86819*t86856*t86688* \
               t86689+t86647*t86882*t86748*t86688*t86689+t86647*t86684*t86819*t86685*t86748*t86688*4.0+t86647*t86684* \
               t86685*t86748*t86777*t86688*4.0-Aa*t86771*t86647*t86819*t86884*t86759*t86769*2.0+Aa*t86771*t86647* \
               t86882*t86759*t86769*t86779*2.0+Aa*t86771*t86647*t86759*t86777*t86876*t86769*2.0+Aa*t86771*t86647* \
               t86694*t86759*t86769*(t86685*t86688*1.2E1-t86874*t86689*2.0E1)*2.0+t86820*t86821*t86771*t86826*t86647* \
               t86694*t86884*t86759+t86820*t86821*t86771*t86826*t86647*t86694*t86759*t86876+t86820*t86821*t86771* \
               t86826*t86647*t86819*t86759*t86779-t86820*t86821*t86771*t86826*t86647*t86759*t86777*t86779-t86820* \
               t86771*t86647*1.0/(t86765*t86765*t86765)*t86694*t86883*t86759*t86779*2.0+t86820*t86821*t86771*t86647* \
               t86694*t86759*t86779*(b2a*c*t86852*(4.0/9.0)+b4a*t86628*t86853*(1.0E1/9.0)+b1a*c*t86750*t86852*(2.0/ \
               9.0)+b3a*c*t86852*t86669*(2.0/3.0)-b1a*t86628*t86853*t86858*(1.0/3.6E1)+b3a*t86750*t86628*t86853*(1.0/ \
               1.2E1))-Aa*a1a*c*t86732*t86647*t86694*t86884*t86759*t86769*(2.0/3.0)-Aa*a1a*c*t86732*t86647*t86694* \
               t86759*t86876*t86769*(2.0/3.0)-Aa*a1a*c*t86732*t86647*t86819*t86759*t86769*t86779*(2.0/3.0)+Aa*a1a* \
               c*t86732*t86647*t86759*t86777*t86769*t86779*(2.0/3.0)-Aa*a1a*c*t86852*t86647*t86694*t86759*t86769* \
               t86779*(8.0/9.0)+t86760*t86771*t86647*1.0/(t86765*t86765*t86765*t86765)*t86694*t86883*t86759*1.0/(t86768* \
               t86768)*t86779*(1.0/2.0)+a1a*c*t86820*t86821*t86732*t86826*t86647*t86694*t86759*t86779*(2.0/3.0))- \
               t86751*t86752*t86682*t86757*2.0+t86647*t86694*t86688*t86689*(t86815-t86816-t86871+t86758)*2.0+a1p* \
               c*c0p*t86732*t86680*(4.0/3.0)+t86772*t86647*t86694*t86748*t86689*8.0-t86647*t86748*t86777*t86688*t86689- \
               Aa*t86771*t86647*t86759*t86777*t86769*t86779*2.0+Aa*t86771*t86647*t86694*t86759*t86769*(t86817-t86875) \
               *2.0-t86820*t86821*t86771*t86826*t86647*t86694*t86759*t86779*2.0+Aa*a1a*c*t86732*t86647*t86694*t86759* \
               t86769*t86779*(4.0/3.0))+(ccab1*gamma_bb[index]*gcab*t86805*t86697*(4.0/3.0)-ccab2*t86703*t86725*t86726* \
               t86695+ccab2*gamma_bb[index]*t86702*t86730*t86695*t86697*(8.0/3.0)-ccab1*gamma_bb[index]*t86702*t86729* \
               t86695*t86697*(4.0/3.0)+ccab3*gamma_bb[index]*gcab*t86703*t86731*t86695*t86697*4.0-ccab3*gcab*t86702* \
               t86703*t86715*t86719*t86695)*(-t86803+t86804+t86851+t86683-t86666*(t86806+t86816+t86827-t86758+t86647* \
               t86694*t86688*t86689*(t86815+t86758-t86814*t86743*t86808*t86809-a1p*c*c0p*t86732*t86680*(2.0/3.0)) \
               -t86647*t86748*t86777*t86688*t86689+t86744*t86647*t86684*t86685*t86694*t86688*4.0-Aa*t86771*t86647* \
               t86759*t86777*t86769*t86779*2.0+Aa*t86771*t86647*t86694*t86759*t86769*(t86817-t86684*t86685*t86688* \
               4.0)*2.0-t86820*t86821*t86771*t86826*t86647*t86694*t86759*t86779)+rho_a[index]*(-t86801+t86644*t86647* \
               (t86801-(t86781*1.0/(t86786*t86786)*(b2f*c*t86790*(1.0/3.0)+b4f*t86628*t86791*(2.0/3.0)+b1f*c*t86790* \
               t86792*(1.0/6.0)+b3f*c*t86626*t86790*(1.0/2.0)))/t86789+a1f*c*c0f*t86790*t86793*(2.0/3.0)-a1p*c*c0p* \
               t86790*t86639*(2.0/3.0))+a1p*c*c0p*t86790*t86639*(2.0/3.0))-t86644*t86647*(t86802-t86803));
        } else if (rho_a[index] > cutoff_) {
            v_rho_a_rho_b_[index] = 0.0;
        } else if (rho_b[index] > cutoff_) {
            v_rho_a_rho_b_[index] = 0.0;
        } else {
            v_rho_a_rho_b_[index] = 0.0;
        } 

        //V_rho_b_rho_b
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t86889 = gcab*gcab;
            double t86893 = 1.0/pow(rho_a[index],8.0/3.0);
            double t86894 = gamma_aa[index]*t86893*(1.0/2.0);
            double t86895 = 1.0/pow(rho_b[index],8.0/3.0);
            double t86896 = gamma_bb[index]*t86895*(1.0/2.0);
            double t86890 = t86894+t86896;
            double t86891 = t86890*t86890;
            double t86892 = 1.0/pow(rho_b[index],1.1E1/3.0);
            double t86897 = gcab*t86890;
            double t86898 = t86897+1.0;
            double t86899 = t86891*t86889;
            double t86900 = gcab*t86890*2.0;
            double t86901 = t86900+t86899+1.0;
            double t86902 = t86891*t86889*3.0;
            double t86903 = gcab*t86890*t86891*t86889;
            double t86904 = gcab*t86890*3.0;
            double t86905 = t86902+t86903+t86904+1.0;
            double t86906 = rho_a[index]+rho_b[index];
            double t86907 = 1.0/pow(t86906,1.0/3.0);
            double t86908 = c*t86907;
            double t86909 = sqrt(t86908);
            double t86910 = b1p*t86909;
            double t86911 = pow(t86908,3.0/2.0);
            double t86912 = b3p*t86911;
            double t86913 = c*c;
            double t86914 = 1.0/pow(t86906,2.0/3.0);
            double t86915 = b4p*t86913*t86914;
            double t86916 = b2p*c*t86907;
            double t86917 = t86910+t86912+t86915+t86916;
            double t86918 = 1.0/pow(t86906,4.0/3.0);
            double t86919 = 1.0/c0p;
            double t86920 = 1.0/t86917;
            double t86921 = t86920*t86919*(1.0/2.0);
            double t86922 = t86921+1.0;
            double t86923 = a1p*c*t86907;
            double t86924 = t86923+1.0;
            double t86925 = rho_a[index]-rho_b[index];
            double t86926 = t86925*t86925;
            double t86927 = 1.0/t86906;
            double t86928 = t86925*t86927;
            double t86929 = two_13*2.0;
            double t86930 = t86929-2.0;
            double t86931 = 1.0/t86930;
            double t86932 = 1.0/c0f;
            double t86933 = b1f*t86909;
            double t86934 = b3f*t86911;
            double t86935 = b4f*t86913*t86914;
            double t86936 = b2f*c*t86907;
            double t86937 = t86933+t86934+t86935+t86936;
            double t86938 = 1.0/t86937;
            double t86939 = t86932*t86938*(1.0/2.0);
            double t86940 = t86939+1.0;
            double t86941 = log(t86940);
            double t86942 = a1f*c*t86907;
            double t86943 = t86942+1.0;
            double t86944 = log(t86922);
            double t86955 = c0f*t86941*t86943*2.0;
            double t86956 = c0p*t86924*t86944*2.0;
            double t86945 = t86955-t86956;
            double t86946 = t86928+1.0;
            double t86947 = pow(t86946,4.0/3.0);
            double t86948 = -t86928+1.0;
            double t86949 = pow(t86948,4.0/3.0);
            double t86950 = t86947+t86949-2.0;
            double t86951 = 1.0/(t86906*t86906);
            double t86952 = t86951*t86925;
            double t86953 = t86952+t86927;
            double t86954 = 1.0/(t86906*t86906*t86906*t86906);
            double t86957 = t86926*t86926;
            double t86958 = 1.0/pow(t86906,5.0/3.0);
            double t86959 = 1.0/sqrt(t86908);
            double t86960 = 1.0/t86922;
            double t86961 = 1.0/(t86917*t86917);
            double t86962 = b4p*t86913*t86958*(2.0/3.0);
            double t86963 = b2p*c*t86918*(1.0/3.0);
            double t86964 = b1p*c*t86918*t86959*(1.0/6.0);
            double t86965 = b3p*c*t86909*t86918*(1.0/2.0);
            double t86966 = t86962+t86963+t86964+t86965;
            double t86967 = 1.0/(t86906*t86906*t86906*t86906*t86906);
            double t86968 = 1.0/d2fz0;
            double t86969 = 1.0/Aa;
            double t86970 = b1a*t86909;
            double t86971 = b3a*t86911;
            double t86972 = b4a*t86913*t86914;
            double t86973 = b2a*c*t86907;
            double t86974 = t86970+t86971+t86972+t86973;
            double t86975 = 1.0/t86974;
            double t86976 = t86975*t86969*(1.0/2.0);
            double t86977 = t86976+1.0;
            double t86978 = log(t86977);
            double t86979 = a1a*c*t86907;
            double t86980 = t86979+1.0;
            double t86981 = pow(t86946,1.0/3.0);
            double t86982 = t86953*t86981*(4.0/3.0);
            double t86983 = pow(t86948,1.0/3.0);
            double t87145 = t86953*t86983*(4.0/3.0);
            double t86984 = t86982-t87145;
            double t86985 = t86954*t86957;
            double t86986 = t86985-1.0;
            double t86987 = 1.0/pow(rho_b[index],1.0/3.0);
            double t86988 = c*t86987;
            double t86989 = sqrt(t86988);
            double t86990 = b1f*t86989;
            double t86991 = pow(t86988,3.0/2.0);
            double t86992 = b3f*t86991;
            double t86993 = 1.0/pow(rho_b[index],2.0/3.0);
            double t86994 = b4f*t86913*t86993;
            double t86995 = b2f*c*t86987;
            double t86996 = t86990+t86992+t86994+t86995;
            double t86997 = 1.0/pow(rho_b[index],4.0/3.0);
            double t86998 = b1p*t86989;
            double t86999 = b3p*t86991;
            double t87000 = b4p*t86913*t86993;
            double t87001 = b2p*c*t86987;
            double t87002 = t86998+t86999+t87000+t87001;
            double t87003 = 1.0/pow(rho_b[index],5.0/3.0);
            double t87004 = 1.0/sqrt(t86988);
            double t87005 = 1.0/t86996;
            double t87006 = t86932*t87005*(1.0/2.0);
            double t87007 = t87006+1.0;
            double t87008 = 1.0/t87002;
            double t87009 = t86919*t87008*(1.0/2.0);
            double t87010 = t87009+1.0;
            double t87011 = a1p*c*t86987;
            double t87012 = t87011+1.0;
            double t87013 = 1.0/t87010;
            double t87014 = 1.0/(t87002*t87002);
            double t87015 = b4p*t86913*t87003*(2.0/3.0);
            double t87016 = b2p*c*t86997*(1.0/3.0);
            double t87017 = b1p*c*t86997*t87004*(1.0/6.0);
            double t87018 = b3p*c*t86997*t86989*(1.0/2.0);
            double t87019 = t87015+t87016+t87017+t87018;
            double t87020 = t87012*t87013*t87014*t87019;
            double t87021 = log(t87010);
            double t87022 = pow(2.0,1.0/3.0);
            double t87023 = t87022*2.0;
            double t87024 = t87023-2.0;
            double t87025 = log(t87007);
            double t87026 = a1f*c*t86987;
            double t87027 = t87026+1.0;
            double t87028 = a1p*c*c0p*t86944*t86918*(2.0/3.0);
            double t87029 = 1.0/t87007;
            double t87030 = 1.0/(t86996*t86996);
            double t87031 = b4f*t86913*t87003*(2.0/3.0);
            double t87032 = b2f*c*t86997*(1.0/3.0);
            double t87033 = b1f*c*t86997*t87004*(1.0/6.0);
            double t87034 = b3f*c*t86997*t86989*(1.0/2.0);
            double t87035 = t87031+t87032+t87033+t87034;
            double t87036 = a1f*c*c0f*t86997*t87025*(2.0/3.0);
            double t87037 = a1p*c*c0p*t86997*t87021*(2.0/3.0);
            double t87038 = gamma_bb[index]*gamma_bb[index];
            double t87039 = gcaa*gcaa;
            double t87040 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
               rho_b[index]*rho_b[index]);
            double t87041 = 1.0/pow(rho_b[index],1.6E1/3.0);
            double t87042 = pow(rho_b[index],5.0/3.0);
            double t87043 = C_k*t87042;
            double t87052 = tau_a[index]*1.0E20;
            double t87044 = t87043-t87052;
            double t87045 = ( (t87044 > 0.0) ?  1.0 : 0.0 ) ;
            double t87046 = t87045*1.0E20;
            double t87047 = 1.0/tau_b[index];
            double t87048 = tau_b[index]*1.0E20;
            double t87049 = -t87043+t87048;
            double t87050 = ( (t87049 > 0.0) ?  1.0 : 0.0 ) ;
            double t87051 = C_k*t87050*t87042*t87047;
            double t87053 = t87051+t87046-1.0;
            double t87054 = t87053*t87053;
            double t87055 = t87051+t87046+1.0;
            double t87056 = t87054*t87054;
            double t87057 = gx*gx;
            double t87058 = gamma_bb[index]*gx*t86895;
            double t87059 = t87058+1.0;
            double t87060 = 1.0/t87059;
            double t87061 = gamma_bb[index]*gx*t86895*3.0;
            double t87062 = gamma_bb[index]*gx*t87040*t87038*t87057;
            double t87063 = t87041*t87038*t87057*3.0;
            double t87064 = t87061+t87062+t87063+1.0;
            double t87065 = 1.0/t87064;
            double t87066 = gamma_bb[index]*gx*t86895*2.0;
            double t87067 = t87041*t87038*t87057;
            double t87068 = t87066+t87067+1.0;
            double t87069 = 1.0/t87068;
            double t87070 = 1.0/t87055;
            double t87071 = t87070*t87053;
            double t87072 = 1.0/(t87055*t87055*t87055);
            double t87073 = 1.0/(t87055*t87055*t87055*t87055*t87055);
            double t87074 = t87053*t87073*t87056;
            double t87102 = t87053*t87054*t87072*2.0;
            double t87075 = -t87102+t87071+t87074;
            double t87076 = 1.0/pow(rho_b[index],1.9E1/3.0);
            double t87077 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
               rho_b[index]*rho_b[index]*rho_b[index]);
            double t87078 = cxnl1*gamma_bb[index]*gx*t86895*t87060;
            double t87079 = cxnl3*gamma_bb[index]*gx*t87040*t87038*t87065*t87057;
            double t87080 = cxnl2*t87041*t87038*t87057*t87069;
            double t87081 = cxnl0+t87080+t87078+t87079;
            double t87082 = pow(rho_b[index],2.0/3.0);
            double t87083 = -t87043+t87052;
            double t87084 = 0.0 ;
            double t87085 = C_k*t87082*t87084*(5.0E20/3.0);
            double t87086 = C_k*C_k;
            double t87087 = pow(rho_b[index],7.0/3.0);
            double t87088 = 0.0 ;
            double t87089 = C_k*t87050*t87082*t87047*(5.0/3.0);
            double t87091 = t87047*t87086*t87087*t87088*(5.0/3.0);
            double t87090 = -t87091+t87085+t87089;
            double t87092 = 1.0/(t87059*t87059);
            double t87093 = gamma_bb[index]*gx*t86892*8.0;
            double t87094 = gamma_bb[index]*gx*t87038*t87057*t87077*8.0;
            double t87095 = t87038*t87057*t87076*1.6E1;
            double t87096 = t87093+t87094+t87095;
            double t87097 = 1.0/(t87064*t87064);
            double t87098 = gamma_bb[index]*gx*t86892*(1.6E1/3.0);
            double t87099 = t87038*t87057*t87076*(1.6E1/3.0);
            double t87100 = t87098+t87099;
            double t87101 = 1.0/(t87068*t87068);
            double t87103 = 1.0/pow(rho_b[index],1.0E1);
            double t87104 = 1.0/pow(rho_b[index],2.2E1/3.0);
            double t87105 = 1.0/pow(rho_b[index],1.4E1/3.0);
            double t87106 = cxnl1*gamma_bb[index]*gx*t86892*t87060*(8.0/3.0);
            double t87107 = cxnl3*gamma_bb[index]*gx*t87038*t87065*t87057*t87077*8.0;
            double t87108 = cxnl2*t87038*t87057*t87076*t87069*(1.6E1/3.0);
            double t87109 = t87106+t87107+t87108-cxnl1*t87038*t87092*t87057*t87076*(8.0/3.0)-cxnl2*t87100*t87101* \
               t87041*t87038*t87057-cxnl3*gamma_bb[index]*gx*t87040*t87038*t87057*t87096*t87097;
            double t87110 = t87070*t87090;
            double t87111 = 1.0/(t87055*t87055);
            double t87112 = 1.0/(t87055*t87055*t87055*t87055);
            double t87113 = t87112*t87053*t87054*t87090*6.0;
            double t87114 = t87090*t87073*t87056*5.0;
            double t87115 = 1.0/(t87055*t87055*t87055*t87055*t87055*t87055);
            double t87116 = t87110+t87113+t87114-t87111*t87053*t87090-t87054*t87072*t87090*6.0-t87115*t87053* \
               t87090*t87056*5.0;
            double t87117 = pow(rho_b[index],4.0/3.0);
            double t87118 = rho_b[index]*rho_b[index];
            double t87119 = t87090*t87090;
            double t87120 = 0.0 ;
            double t87121 = C_k*t86987*t87084*(1.0E21/9.0);
            double t87122 = 0.0 ;
            double t87123 = C_k*rho_b[index]*t87122*t87118*t87047*t87086*(2.5E1/9.0);
            double t87124 = C_k*t86987*t87050*t87047*(1.0E1/9.0);
            double t87126 = t87120*t87117*t87086*(2.5E21/9.0);
            double t87127 = t87117*t87047*t87086*t87088*(2.0E1/3.0);
            double t87125 = t87121+t87123+t87124-t87126-t87127;
            double t87128 = 1.0/(t87059*t87059*t87059);
            double t87129 = t87100*t87100;
            double t87130 = 1.0/(t87068*t87068*t87068);
            double t87131 = gamma_bb[index]*gx*t87105*(8.8E1/3.0);
            double t87132 = gamma_bb[index]*gx*t87103*t87038*t87057*7.2E1;
            double t87133 = t87104*t87038*t87057*(3.04E2/3.0);
            double t87134 = t87131+t87132+t87133;
            double t87135 = t87096*t87096;
            double t87136 = 1.0/(t87064*t87064*t87064);
            double t87137 = gamma_bb[index]*gx*t87105*(1.76E2/9.0);
            double t87138 = t87104*t87038*t87057*(3.04E2/9.0);
            double t87139 = t87137+t87138;
            double t87140 = 1.0/t86901;
            double t87141 = 1.0/t86905;
            double t87142 = 1.0/t86898;
            double t87143 = 1.0/pow(t86906,7.0/3.0);
            double t87144 = 1.0/pow(t86906,8.0/3.0);
            double t87146 = 1.0/t86940;
            double t87147 = 1.0/(t86937*t86937);
            double t87148 = b4f*t86913*t86958*(2.0/3.0);
            double t87149 = b2f*c*t86918*(1.0/3.0);
            double t87150 = b1f*c*t86918*t86959*(1.0/6.0);
            double t87151 = b3f*c*t86909*t86918*(1.0/2.0);
            double t87152 = t87150+t87151+t87148+t87149;
            double t87153 = t86943*t87152*t87146*t87147;
            double t87155 = t86924*t86960*t86961*t86966;
            double t87156 = a1f*c*c0f*t86941*t86918*(2.0/3.0);
            double t87154 = t87153+t87028-t87155-t87156;
            double t87157 = t86966*t86966;
            double t87158 = 1.0/pow(t86908,3.0/2.0);
            double t87159 = b4p*t86913*t87144*(1.0E1/9.0);
            double t87160 = b2p*c*t87143*(4.0/9.0);
            double t87161 = b1p*c*t86959*t87143*(2.0/9.0);
            double t87162 = b3p*c*t86909*t87143*(2.0/3.0);
            double t87163 = b3p*t86913*t86959*t87144*(1.0/1.2E1);
            double t87164 = t87160+t87161+t87162+t87163+t87159-b1p*t86913*t87144*t87158*(1.0/3.6E1);
            double t87165 = 1.0/(t86917*t86917*t86917);
            double t87166 = t86924*t86960*t87165*t87157*2.0;
            double t87167 = t87152*t87152;
            double t87168 = 1.0/(t86922*t86922);
            double t87169 = 1.0/(t86917*t86917*t86917*t86917);
            double t87170 = t86951*2.0;
            double t87171 = 1.0/(t86906*t86906*t86906);
            double t87172 = t86925*t87171*2.0;
            double t87173 = t87170+t87172;
            double t87174 = t86953*t86953;
            double t87175 = a1p*c*c0p*t86944*t87143*(8.0/9.0);
            double t87176 = 1.0/(t86906*t86906*t86906*t86906*t86906*t86906);
            double t87177 = t86925*t86926*t86954*4.0;
            double t87178 = t86957*t86967*4.0;
            double t87179 = t87177+t87178;
            double t87180 = t86981*t87173*(4.0/3.0);
            double t87181 = 1.0/pow(t86946,2.0/3.0);
            double t87182 = t87181*t87174*(4.0/9.0);
            double t87183 = 1.0/pow(t86948,2.0/3.0);
            double t87184 = t87174*t87183*(4.0/9.0);
            double t87185 = t87180+t87182+t87184-t86983*t87173*(4.0/3.0);
            double t87186 = 1.0/t86977;
            double t87187 = 1.0/(t86974*t86974);
            double t87188 = b4a*t86913*t86958*(2.0/3.0);
            double t87189 = b2a*c*t86918*(1.0/3.0);
            double t87190 = b1a*c*t86918*t86959*(1.0/6.0);
            double t87191 = b3a*c*t86909*t86918*(1.0/2.0);
            double t87192 = t87190+t87191+t87188+t87189;
            double t87193 = t87192*t87192;
            double t87194 = 1.0/pow(rho_b[index],7.0/3.0);
            double t87195 = 1.0/pow(t86988,3.0/2.0);
            double t87196 = t87035*t87035;
            double t87197 = t87019*t87019;
            double t87198 = 1.0/(t87002*t87002*t87002);
            double t87199 = t87012*t87013*t87197*t87198*2.0;
            double t87200 = b4p*t86913*t86895*(1.0E1/9.0);
            double t87201 = b2p*c*t87194*(4.0/9.0);
            double t87202 = b3p*t86913*t86895*t87004*(1.0/1.2E1);
            double t87203 = b1p*c*t87004*t87194*(2.0/9.0);
            double t87204 = b3p*c*t86989*t87194*(2.0/3.0);
            double t87285 = b1p*t86913*t86895*t87195*(1.0/3.6E1);
            double t87205 = t87200+t87201+t87202+t87203+t87204-t87285;
            double t87206 = 1.0/(t87010*t87010);
            double t87207 = 1.0/(t87002*t87002*t87002*t87002);
            double t87208 = a1p*c*c0p*t87021*t87194*(8.0/9.0);
            double t87266 = t87030*t87035*t87027*t87029;
            double t87209 = t87020+t87036-t87037-t87266;
            double t87210 = 1.0/pow(rho_a[index],1.0/3.0);
            double t87211 = c*t87210;
            double t87212 = sqrt(t87211);
            double t87213 = pow(t87211,3.0/2.0);
            double t87214 = 1.0/pow(rho_a[index],2.0/3.0);
            double t87215 = b1p*t87212;
            double t87216 = b3p*t87213;
            double t87217 = b4p*t86913*t87214;
            double t87218 = b2p*c*t87210;
            double t87219 = t87215+t87216+t87217+t87218;
            double t87220 = 1.0/t87219;
            double t87221 = t86919*t87220*(1.0/2.0);
            double t87222 = t87221+1.0;
            double t87223 = log(t87222);
            double t87224 = a1p*c*t87210;
            double t87225 = t87224+1.0;
            double t87226 = c0p*t87223*t87225*2.0;
            double t87227 = c0f*t87025*t87027*2.0;
            double t87229 = c0p*t87012*t87021*2.0;
            double t87228 = t87227-t87229;
            double t87230 = t86931*t86950*t86945*t86954*t86957;
            double t87231 = Aa*t86931*t86950*t86980*t86968*t86986*t86978*2.0;
            double t87232 = 1.0/(t86898*t86898);
            double t87233 = gamma_bb[index]*gcab*t86892*(8.0/3.0);
            double t87234 = gamma_bb[index]*t86890*t86892*t86889*(8.0/3.0);
            double t87235 = t87233+t87234;
            double t87236 = 1.0/(t86905*t86905);
            double t87237 = 1.0/(t86901*t86901);
            double t87238 = gamma_bb[index]*gcab*t86892*4.0;
            double t87239 = gamma_bb[index]*gcab*t86891*t86892*t86889*4.0;
            double t87240 = gamma_bb[index]*t86890*t86892*t86889*8.0;
            double t87241 = t87240+t87238+t87239;
            double t87242 = t86931*t87024*t87228;
            double t87243 = t87242+t87229;
            double t87244 = gamma_bb[index]*gcaa*t86895;
            double t87245 = t87244+1.0;
            double t87246 = 1.0/t87245;
            double t87247 = gamma_bb[index]*gcaa*t86895*3.0;
            double t87248 = gamma_bb[index]*gcaa*t87040*t87038*t87039;
            double t87249 = t87041*t87038*t87039*3.0;
            double t87250 = t87247+t87248+t87249+1.0;
            double t87251 = 1.0/t87250;
            double t87252 = gamma_bb[index]*gcaa*t86895*2.0;
            double t87253 = t87041*t87038*t87039;
            double t87254 = t87252+t87253+1.0;
            double t87255 = 1.0/t87254;
            double t87256 = 1.0/(t87245*t87245);
            double t87257 = gamma_bb[index]*gcaa*t86892*(1.6E1/3.0);
            double t87258 = t87038*t87039*t87076*(1.6E1/3.0);
            double t87259 = t87257+t87258;
            double t87260 = gamma_bb[index]*gcaa*t86892*8.0;
            double t87261 = gamma_bb[index]*gcaa*t87038*t87039*t87077*8.0;
            double t87262 = t87038*t87039*t87076*1.6E1;
            double t87263 = t87260+t87261+t87262;
            double t87264 = 1.0/(t87250*t87250);
            double t87265 = 1.0/(t87254*t87254);
            double t87267 = t86931*t87024*t87209;
            double t87268 = ccaa1*gamma_bb[index]*gcaa*t86892*t87246*(8.0/3.0);
            double t87269 = ccaa3*gamma_bb[index]*gcaa*t87251*t87038*t87039*t87077*8.0;
            double t87270 = ccaa2*t87038*t87039*t87255*t87076*(1.6E1/3.0);
            double t87271 = t87270+t87268+t87269-ccaa1*t87038*t87039*t87076*t87256*(8.0/3.0)-ccaa2*t87041*t87038* \
               t87039*t87265*t87259-ccaa3*gamma_bb[index]*gcaa*t87040*t87038*t87263*t87039*t87264;
            double t87272 = -t87020+t87037+t87267;
            double t87273 = ccaa1*gamma_bb[index]*gcaa*t86895*t87246;
            double t87274 = ccaa3*gamma_bb[index]*gcaa*t87040*t87251*t87038*t87039;
            double t87275 = ccaa2*t87041*t87038*t87039*t87255;
            double t87276 = ccaa0+t87273+t87274+t87275;
            double t87277 = 1.0/(t86996*t86996*t86996);
            double t87278 = b4f*t86913*t86895*(1.0E1/9.0);
            double t87279 = b2f*c*t87194*(4.0/9.0);
            double t87280 = b3f*t86913*t86895*t87004*(1.0/1.2E1);
            double t87281 = b1f*c*t87004*t87194*(2.0/9.0);
            double t87282 = b3f*c*t86989*t87194*(2.0/3.0);
            double t87283 = t87280+t87281+t87282+t87278+t87279-b1f*t86913*t86895*t87195*(1.0/3.6E1);
            double t87284 = t87030*t87027*t87029*t87283;
            double t87286 = t87012*t87013*t87014*t87205;
            double t87287 = 1.0/(t87007*t87007);
            double t87288 = 1.0/(t86996*t86996*t86996*t86996);
            double t87289 = t86932*t87027*t87196*t87287*t87288*(1.0/2.0);
            double t87290 = t86919*t87012*t87206*t87207*t87197*(1.0/2.0);
            double t87291 = a1f*c*t86997*t87030*t87035*t87029*(2.0/3.0);
            double t87292 = a1p*c*t86997*t87013*t87014*t87019*(2.0/3.0);
            v_rho_b_rho_b_[index] = (ccab1*gamma_bb[index]*gcab*t86892*t87142*(4.0/3.0)-ccab2*t86891*t86889*t87235* \
               t87237+ccab2*gamma_bb[index]*t86890*t86892*t86889*t87140*(8.0/3.0)-ccab1*gamma_bb[index]*t86890*t86892* \
               t86889*t87232*(4.0/3.0)+ccab3*gamma_bb[index]*gcab*t86891*t86892*t86889*t87141*4.0-ccab3*gcab*t86890* \
               t86891*t86889*t87241*t87236)*(t86956+t87230+t87231+rho_b[index]*(-t87020+t87037+t86931*t87024*(t87020+ \
               t87036-t87030*t87035*t87027*t87029-a1p*c*c0p*t86997*t87021*(2.0/3.0)))-t86906*(t87028-t86924*t86960* \
               t86961*t86966+t86931*t86950*t86945*t86957*t86967*4.0+t86931*t86945*t86954*t86957*t86984-t86931*t86950* \
               t86954*t86957*t87154+t86931*t86950*t86925*t86926*t86945*t86954*4.0+Aa*t86931*t86980*t86984*t86968* \
               t86986*t86978*2.0+Aa*t86931*t86950*t86980*t86968*t86978*t87179*2.0-t86931*t86950*t86980*t86968*t86986* \
               t87192*t87186*t87187+Aa*a1a*c*t86931*t86950*t86918*t86968*t86986*t86978*(2.0/3.0))-c0p*t87012*t87021* \
               2.0-t86931*t87024*t87228)*2.0+t87243*t87271*2.0+t87272*t87276*2.0+(rho_b[index]*t87243+rho_a[index]* \
               (t87226-t86931*t87024*(t87226-c0f*log((t86932*(1.0/2.0))/(b1f*t87212+b3f*t87213+b2f*c*t87210+b4f*t86913* \
               t87214)+1.0)*(a1f*c*t87210+1.0)*2.0))-t86906*(t86956+t87230+t87231))*(-ccab2*t86891*t86889*t87237* \
               (gamma_bb[index]*gcab*t87105*(8.8E1/9.0)+t86889*t87104*t87038*(3.2E1/9.0)+gamma_bb[index]*t86890*t86889* \
               t87105*(8.8E1/9.0))+ccab2*1.0/(t86901*t86901*t86901)*t86891*t86889*(t87235*t87235)*2.0+ccab1*gamma_bb[index]* \
               gcab*t87105*t87142*(4.4E1/9.0)+ccab2*t86889*t87104*t87140*t87038*(3.2E1/9.0)-ccab1*t86889*t87104*t87232* \
               t87038*(3.2E1/9.0)+ccab2*gamma_bb[index]*t86890*t86889*t87140*t87105*(8.8E1/9.0)-ccab1*gamma_bb[index]* \
               t86890*t86889*t87105*t87232*(4.4E1/9.0)+ccab3*gcab*1.0/(t86905*t86905*t86905)*t86890*t86891*t86889* \
               (t87241*t87241)*2.0+ccab3*gamma_bb[index]*gcab*t86891*t86889*t87105*t87141*(4.4E1/3.0)-ccab2*gamma_bb[index]* \
               t86890*t86892*t86889*t87235*t87237*(1.6E1/3.0)+ccab3*gcab*t86890*t86889*t87104*t87141*t87038*(3.2E1/ \
               3.0)+ccab1*gcab*t86890*t86889*1.0/(t86898*t86898*t86898)*t87104*t87038*(3.2E1/9.0)-ccab3*gcab*t86890* \
               t86891*t86889*t87236*(gamma_bb[index]*gcab*t87105*(4.4E1/3.0)+t86889*t87104*t87038*(3.2E1/3.0)+gamma_bb[index]* \
               t86890*t86889*t87105*(8.8E1/3.0)+gamma_bb[index]*gcab*t86891*t86889*t87105*(4.4E1/3.0)+gcab*t86890* \
               t86889*t87104*t87038*(3.2E1/3.0))-ccab3*gamma_bb[index]*gcab*t86891*t86892*t86889*t87241*t87236*8.0) \
               +(ccab0+ccab1*gcab*t86890*t87142+ccab2*t86891*t86889*t87140+ccab3*gcab*t86890*t86891*t86889*t87141) \
               *(-rho_b[index]*(-t87208+t87290+t87292+t87286-t87199+t86931*t87024*(t87208+t87291+t87284+t87199+t87289- \
               t87012*t87013*t87014*t87205-t87027*t87029*t87196*t87277*2.0-a1f*c*c0f*t87025*t87194*(8.0/9.0)-t86919* \
               t87012*t87206*t87207*t87197*(1.0/2.0)-a1p*c*t86997*t87013*t87014*t87019*(2.0/3.0)))-t86906*(t87166+ \
               t87175-t86924*t86960*t86961*t87164-t86931*t86950*t86954*t86957*(t87166+t87175-t86924*t86960*t86961* \
               t87164-t86943*1.0/(t86937*t86937*t86937)*t87146*t87167*2.0+t86943*t87146*t87147*(b2f*c*t87143*(4.0/ \
               9.0)+b4f*t86913*t87144*(1.0E1/9.0)+b1f*c*t86959*t87143*(2.0/9.0)+b3f*c*t86909*t87143*(2.0/3.0)-b1f* \
               t86913*t87144*t87158*(1.0/3.6E1)+b3f*t86913*t86959*t87144*(1.0/1.2E1))+1.0/(t86940*t86940)*t86932* \
               t86943*1.0/(t86937*t86937*t86937*t86937)*t87167*(1.0/2.0)-a1f*c*c0f*t86941*t87143*(8.0/9.0)-t86924* \
               t86919*t87157*t87168*t87169*(1.0/2.0)+a1f*c*t86918*t87152*t87146*t87147*(2.0/3.0)-a1p*c*t86960*t86961* \
               t86918*t86966*(2.0/3.0))+t86931*t86950*t86926*t86945*t86954*1.2E1+t86931*t86945*t86957*t86984*t86967* \
               8.0+t86931*t86950*t86945*t86957*t87176*2.0E1-t86931*t86950*t86957*t86967*t87154*8.0-t86931*t86954* \
               t86957*t86984*t87154*2.0+t86931*t86945*t86954*t86957*t87185-t86924*t86919*t87157*t87168*t87169*(1.0/ \
               2.0)+t86931*t86950*t86925*t86926*t86945*t86967*3.2E1+t86931*t86925*t86926*t86945*t86954*t86984*8.0- \
               t86931*t86950*t86925*t86926*t86954*t87154*8.0-a1p*c*t86960*t86961*t86918*t86966*(2.0/3.0)+Aa*t86931* \
               t86980*t86968*t86986*t86978*t87185*2.0+Aa*t86931*t86980*t86984*t86968*t86978*t87179*4.0+Aa*t86931* \
               t86950*t86980*t86968*t86978*(t86926*t86954*1.2E1+t86957*t87176*2.0E1+t86925*t86926*t86967*3.2E1)*2.0- \
               t86931*t86980*t86984*t86968*t86986*t87192*t87186*t87187*2.0-t86931*t86950*t86980*t86968*t87192*t87186* \
               t87187*t87179*2.0+t86931*t86950*t86980*1.0/(t86974*t86974*t86974)*t86968*t86986*t87193*t87186*2.0- \
               t86931*t86950*t86980*t86968*t86986*t87186*t87187*(b2a*c*t87143*(4.0/9.0)+b4a*t86913*t87144*(1.0E1/ \
               9.0)+b1a*c*t86959*t87143*(2.0/9.0)+b3a*c*t86909*t87143*(2.0/3.0)-b1a*t86913*t87144*t87158*(1.0/3.6E1) \
               +b3a*t86913*t86959*t87144*(1.0/1.2E1))+Aa*a1a*c*t86931*t86918*t86984*t86968*t86986*t86978*(4.0/3.0) \
               +Aa*a1a*c*t86931*t86950*t86968*t86986*t86978*t87143*(8.0/9.0)+Aa*a1a*c*t86931*t86950*t86918*t86968* \
               t86978*t87179*(4.0/3.0)-t86931*t86950*t86980*1.0/(t86974*t86974*t86974*t86974)*t86968*1.0/(t86977* \
               t86977)*t86986*t86969*t87193*(1.0/2.0)-a1a*c*t86931*t86950*t86918*t86968*t86986*t87192*t87186*t87187* \
               (2.0/3.0))-t86931*t87024*t87209*2.0-t86924*t86960*t86961*t86966*2.0+t87012*t87013*t87014*t87019*2.0+ \
               a1p*c*c0p*t86944*t86918*(4.0/3.0)-a1p*c*c0p*t86997*t87021*(4.0/3.0)+t86931*t86950*t86945*t86957*t86967* \
               8.0+t86931*t86945*t86954*t86957*t86984*2.0-t86931*t86950*t86954*t86957*t87154*2.0+t86931*t86950*t86925* \
               t86926*t86945*t86954*8.0+Aa*t86931*t86980*t86984*t86968*t86986*t86978*4.0+Aa*t86931*t86950*t86980* \
               t86968*t86978*t87179*4.0-t86931*t86950*t86980*t86968*t86986*t87192*t87186*t87187*2.0+Aa*a1a*c*t86931* \
               t86950*t86918*t86968*t86986*t86978*(4.0/3.0))-(X-1.0)*(c0*t87117*(t87075*(cxnl1*gamma_bb[index]*gx* \
               t87060*t87105*(8.8E1/9.0)-cxnl1*t87104*t87038*t87092*t87057*2.4E1+cxnl2*t87104*t87038*t87057*t87069* \
               (3.04E2/9.0)-cxnl2*t87100*t87101*t87038*t87057*t87076*(3.2E1/3.0)-cxnl2*t87101*t87041*t87038*t87057* \
               t87139+cxnl2*t87130*t87041*t87038*t87057*t87129*2.0+cxnl1*gamma_bb[index]*gx*t87103*t87038*t87128* \
               t87057*(1.28E2/9.0)+cxnl3*gamma_bb[index]*gx*t87103*t87038*t87065*t87057*7.2E1+cxnl3*gamma_bb[index]* \
               gx*t87040*t87135*t87136*t87038*t87057*2.0-cxnl3*gamma_bb[index]*gx*t87040*t87134*t87038*t87057*t87097- \
               cxnl3*gamma_bb[index]*gx*t87038*t87057*t87077*t87096*t87097*1.6E1)-t87116*t87109*2.0-t87081*(t87111* \
               t87119*2.0-t87070*t87125+t87111*t87053*t87125-t87112*t87054*t87119*3.6E1+t87125*t87054*t87072*6.0+ \
               t87053*t87072*t87119*1.0E1+t87115*t87056*t87119*5.0E1-t87125*t87073*t87056*5.0-t87112*t87053*t87125* \
               t87054*6.0+t87115*t87053*t87125*t87056*5.0+t87053*t87054*t87073*t87119*4.0-t87053*1.0/(t87055*t87055* \
               t87055*t87055*t87055*t87055*t87055)*t87056*t87119*3.0E1)+cx1*gamma_bb[index]*gx*t87060*t87105*(8.8E1/ \
               9.0)-cx1*t87104*t87038*t87092*t87057*2.4E1+cx2*t87104*t87038*t87057*t87069*(3.04E2/9.0)-cx2*t87100* \
               t87101*t87038*t87057*t87076*(3.2E1/3.0)-cx2*t87101*t87041*t87038*t87057*t87139+cx2*t87130*t87041*t87038* \
               t87057*t87129*2.0+cx1*gamma_bb[index]*gx*t87103*t87038*t87128*t87057*(1.28E2/9.0)+cx3*gamma_bb[index]* \
               gx*t87103*t87038*t87065*t87057*7.2E1+cx3*gamma_bb[index]*gx*t87040*t87135*t87136*t87038*t87057*2.0- \
               cx3*gamma_bb[index]*gx*t87040*t87134*t87038*t87057*t87097-cx3*gamma_bb[index]*gx*t87038*t87057*t87077* \
               t87096*t87097*1.6E1)+c0*pow(rho_b[index],1.0/3.0)*(t87116*t87081-t87109*t87075-cx1*gamma_bb[index]* \
               gx*t86892*t87060*(8.0/3.0)+cx1*t87038*t87092*t87057*t87076*(8.0/3.0)-cx2*t87038*t87057*t87076*t87069* \
               (1.6E1/3.0)+cx2*t87100*t87101*t87041*t87038*t87057-cx3*gamma_bb[index]*gx*t87038*t87065*t87057*t87077* \
               8.0+cx3*gamma_bb[index]*gx*t87040*t87038*t87057*t87096*t87097)*(8.0/3.0)+c0*t86993*(cx0+t87081*t87075+ \
               cx1*gamma_bb[index]*gx*t86895*t87060+cx2*t87041*t87038*t87057*t87069+cx3*gamma_bb[index]*gx*t87040* \
               t87038*t87065*t87057)*(4.0/9.0))-rho_b[index]*t87243*(ccaa1*gamma_bb[index]*gcaa*t87105*t87246*(8.8E1/ \
               9.0)-ccaa1*t87104*t87038*t87039*t87256*2.4E1+ccaa2*t87104*t87038*t87039*t87255*(3.04E2/9.0)-ccaa2* \
               t87038*t87039*t87076*t87265*t87259*(3.2E1/3.0)-ccaa2*t87041*t87038*t87039*t87265*(gamma_bb[index]* \
               gcaa*t87105*(1.76E2/9.0)+t87104*t87038*t87039*(3.04E2/9.0))+ccaa2*t87041*t87038*1.0/(t87254*t87254* \
               t87254)*t87039*(t87259*t87259)*2.0+ccaa3*gamma_bb[index]*gcaa*t87103*t87251*t87038*t87039*7.2E1+ccaa1* \
               gamma_bb[index]*gcaa*t87103*t87038*1.0/(t87245*t87245*t87245)*t87039*(1.28E2/9.0)+ccaa3*gamma_bb[index]* \
               gcaa*t87040*1.0/(t87250*t87250*t87250)*t87038*(t87263*t87263)*t87039*2.0-ccaa3*gamma_bb[index]*gcaa* \
               t87040*t87038*t87039*t87264*(gamma_bb[index]*gcaa*t87105*(8.8E1/3.0)+t87104*t87038*t87039*(3.04E2/ \
               3.0)+gamma_bb[index]*gcaa*t87103*t87038*t87039*7.2E1)-ccaa3*gamma_bb[index]*gcaa*t87038*t87263*t87039* \
               t87264*t87077*1.6E1)+rho_b[index]*t87276*(-t87208+t87290+t87292+t87286-t87199+t86931*t87024*(t87208- \
               t87290+t87291-t87292+t87284-t87286+t87199+t87289-t87027*t87029*t87196*t87277*2.0-a1f*c*c0f*t87025* \
               t87194*(8.0/9.0)))-rho_b[index]*t87271*t87272*2.0;
        } else if (rho_a[index] > cutoff_) {
            v_rho_b_rho_b_[index] = 0.0;
        } else if (rho_b[index] > cutoff_) {
            double t89482 = 1.0/pow(rho_b[index],1.0/3.0);
            double t89483 = c*t89482;
            double t89484 = sqrt(t89483);
            double t89485 = b1f*t89484;
            double t89486 = pow(t89483,3.0/2.0);
            double t89487 = b3f*t89486;
            double t89488 = c*c;
            double t89489 = 1.0/pow(rho_b[index],2.0/3.0);
            double t89490 = b4f*t89488*t89489;
            double t89491 = b2f*c*t89482;
            double t89492 = t89490+t89491+t89485+t89487;
            double t89493 = 1.0/pow(rho_b[index],4.0/3.0);
            double t89494 = b1p*t89484;
            double t89495 = b3p*t89486;
            double t89496 = b4p*t89488*t89489;
            double t89497 = b2p*c*t89482;
            double t89498 = t89494+t89495+t89496+t89497;
            double t89499 = 1.0/pow(rho_b[index],5.0/3.0);
            double t89500 = 1.0/sqrt(t89483);
            double t89501 = 1.0/c0f;
            double t89502 = 1.0/t89492;
            double t89503 = t89501*t89502*(1.0/2.0);
            double t89504 = t89503+1.0;
            double t89505 = 1.0/c0p;
            double t89506 = 1.0/t89498;
            double t89507 = t89505*t89506*(1.0/2.0);
            double t89508 = t89507+1.0;
            double t89509 = a1p*c*t89482;
            double t89510 = t89509+1.0;
            double t89511 = 1.0/t89508;
            double t89512 = 1.0/(t89498*t89498);
            double t89513 = b4p*t89488*t89499*(2.0/3.0);
            double t89514 = b2p*c*t89493*(1.0/3.0);
            double t89515 = b1p*c*t89500*t89493*(1.0/6.0);
            double t89516 = b3p*c*t89484*t89493*(1.0/2.0);
            double t89517 = t89513+t89514+t89515+t89516;
            double t89518 = t89510*t89511*t89512*t89517;
            double t89519 = log(t89508);
            double t89520 = 1.0/pow(rho_b[index],8.0/3.0);
            double t89521 = gamma_bb[index]*gamma_bb[index];
            double t89522 = gcaa*gcaa;
            double t89523 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
               rho_b[index]*rho_b[index]);
            double t89524 = 1.0/pow(rho_b[index],1.6E1/3.0);
            double t89525 = pow(2.0,1.0/3.0);
            double t89526 = t89525*2.0;
            double t89527 = t89526-2.0;
            double t89528 = two_13*2.0;
            double t89529 = t89528-2.0;
            double t89530 = 1.0/t89529;
            double t89531 = log(t89504);
            double t89532 = a1f*c*t89482;
            double t89533 = t89532+1.0;
            double t89534 = gamma_bb[index]*gcaa*t89520;
            double t89535 = t89534+1.0;
            double t89536 = 1.0/t89535;
            double t89537 = gamma_bb[index]*gcaa*t89520*3.0;
            double t89538 = gamma_bb[index]*gcaa*t89521*t89522*t89523;
            double t89539 = t89521*t89522*t89524*3.0;
            double t89540 = t89537+t89538+t89539+1.0;
            double t89541 = 1.0/t89540;
            double t89542 = gamma_bb[index]*gcaa*t89520*2.0;
            double t89543 = t89521*t89522*t89524;
            double t89544 = t89542+t89543+1.0;
            double t89545 = 1.0/t89544;
            double t89546 = 1.0/pow(rho_b[index],1.9E1/3.0);
            double t89547 = 1.0/pow(rho_b[index],1.1E1/3.0);
            double t89548 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
               rho_b[index]*rho_b[index]*rho_b[index]);
            double t89549 = c0f*t89531*t89533*2.0;
            double t89550 = c0p*t89510*t89519*2.0;
            double t89551 = 1.0/pow(rho_b[index],1.0E1);
            double t89552 = 1.0/pow(rho_b[index],2.2E1/3.0);
            double t89553 = 1.0/(t89535*t89535);
            double t89554 = gamma_bb[index]*gcaa*t89547*(1.6E1/3.0);
            double t89555 = t89521*t89522*t89546*(1.6E1/3.0);
            double t89556 = t89554+t89555;
            double t89557 = gamma_bb[index]*gcaa*t89547*8.0;
            double t89558 = gamma_bb[index]*gcaa*t89521*t89522*t89548*8.0;
            double t89559 = t89521*t89522*t89546*1.6E1;
            double t89560 = t89557+t89558+t89559;
            double t89561 = 1.0/(t89540*t89540);
            double t89562 = 1.0/pow(rho_b[index],1.4E1/3.0);
            double t89563 = 1.0/(t89544*t89544);
            double t89564 = 1.0/t89504;
            double t89565 = 1.0/(t89492*t89492);
            double t89566 = b4f*t89488*t89499*(2.0/3.0);
            double t89567 = b2f*c*t89493*(1.0/3.0);
            double t89568 = b1f*c*t89500*t89493*(1.0/6.0);
            double t89569 = b3f*c*t89484*t89493*(1.0/2.0);
            double t89570 = t89566+t89567+t89568+t89569;
            double t89571 = a1f*c*c0f*t89531*t89493*(2.0/3.0);
            double t89572 = a1p*c*c0p*t89519*t89493*(2.0/3.0);
            double t89573 = ccaa1*gamma_bb[index]*gcaa*t89536*t89547*(8.0/3.0);
            double t89574 = ccaa3*gamma_bb[index]*gcaa*t89521*t89522*t89541*t89548*8.0;
            double t89575 = ccaa2*t89521*t89522*t89545*t89546*(1.6E1/3.0);
            double t89576 = t89573+t89574+t89575-ccaa1*t89521*t89522*t89553*t89546*(8.0/3.0)-ccaa2*t89521*t89522* \
               t89524*t89563*t89556-ccaa3*gamma_bb[index]*gcaa*t89521*t89522*t89523*t89560*t89561;
            double t89577 = ccaa1*gamma_bb[index]*gcaa*t89520*t89536;
            double t89578 = ccaa3*gamma_bb[index]*gcaa*t89521*t89522*t89523*t89541;
            double t89579 = ccaa2*t89521*t89522*t89524*t89545;
            double t89580 = ccaa0+t89577+t89578+t89579;
            double t89581 = 1.0/pow(rho_b[index],7.0/3.0);
            double t89582 = 1.0/pow(t89483,3.0/2.0);
            double t89583 = t89570*t89570;
            double t89584 = t89517*t89517;
            double t89585 = 1.0/(t89498*t89498*t89498);
            double t89586 = t89510*t89511*t89584*t89585*2.0;
            double t89587 = b4p*t89520*t89488*(1.0E1/9.0);
            double t89588 = b2p*c*t89581*(4.0/9.0);
            double t89589 = b3p*t89500*t89520*t89488*(1.0/1.2E1);
            double t89590 = b1p*c*t89500*t89581*(2.0/9.0);
            double t89591 = b3p*c*t89581*t89484*(2.0/3.0);
            double t89592 = t89590+t89591+t89587+t89588+t89589-b1p*t89520*t89582*t89488*(1.0/3.6E1);
            double t89593 = 1.0/(t89508*t89508);
            double t89594 = 1.0/(t89498*t89498*t89498*t89498);
            double t89595 = a1p*c*c0p*t89581*t89519*(8.0/9.0);
            double t89596 = pow(rho_b[index],5.0/3.0);
            double t89597 = C_k*t89596;
            double t89606 = tau_a[index]*1.0E20;
            double t89598 = -t89606+t89597;
            double t89599 = ( (t89598 > 0.0) ?  1.0 : 0.0 ) ;
            double t89600 = t89599*1.0E20;
            double t89601 = 1.0/tau_b[index];
            double t89602 = tau_b[index]*1.0E20;
            double t89603 = t89602-t89597;
            double t89604 = ( (t89603 > 0.0) ?  1.0 : 0.0 ) ;
            double t89605 = C_k*t89601*t89604*t89596;
            double t89607 = t89600+t89605-1.0;
            double t89608 = t89607*t89607;
            double t89609 = t89600+t89605+1.0;
            double t89610 = t89608*t89608;
            double t89611 = gx*gx;
            double t89612 = gamma_bb[index]*gx*t89520;
            double t89613 = t89612+1.0;
            double t89627 = gamma_bb[index]*gx*t89547*(1.6E1/3.0);
            double t89628 = t89521*t89611*t89546*(1.6E1/3.0);
            double t89614 = t89627+t89628;
            double t89615 = gamma_bb[index]*gx*t89520*2.0;
            double t89616 = t89521*t89611*t89524;
            double t89617 = t89615+t89616+1.0;
            double t89618 = gamma_bb[index]*gx*t89520*3.0;
            double t89619 = gamma_bb[index]*gx*t89521*t89611*t89523;
            double t89620 = t89521*t89611*t89524*3.0;
            double t89621 = t89620+t89618+t89619+1.0;
            double t89622 = 1.0/(t89621*t89621);
            double t89623 = gamma_bb[index]*gx*t89547*8.0;
            double t89624 = gamma_bb[index]*gx*t89521*t89611*t89548*8.0;
            double t89625 = t89521*t89611*t89546*1.6E1;
            double t89626 = t89623+t89624+t89625;
            double t89629 = 1.0/(t89617*t89617);
            double t89630 = 1.0/t89613;
            double t89631 = 1.0/t89621;
            double t89632 = 1.0/t89617;
            double t89633 = 1.0/(t89613*t89613);
            double t89634 = pow(rho_b[index],2.0/3.0);
            double t89635 = 1.0/t89609;
            double t89636 = t89606-t89597;
            double t89637 = 0.0 ;
            double t89638 = C_k*t89634*t89637*(5.0E20/3.0);
            double t89639 = C_k*C_k;
            double t89640 = pow(rho_b[index],7.0/3.0);
            double t89641 = 0.0 ;
            double t89642 = C_k*t89601*t89604*t89634*(5.0/3.0);
            double t89644 = t89601*t89640*t89641*t89639*(5.0/3.0);
            double t89643 = t89642-t89644+t89638;
            double t89645 = 1.0/(t89609*t89609*t89609);
            double t89646 = 1.0/(t89609*t89609*t89609*t89609*t89609);
            double t89647 = pow(rho_b[index],4.0/3.0);
            double t89648 = rho_b[index]*rho_b[index];
            double t89649 = 1.0/(t89609*t89609);
            double t89650 = t89643*t89643;
            double t89651 = 1.0/(t89609*t89609*t89609*t89609);
            double t89652 = 1.0/(t89609*t89609*t89609*t89609*t89609*t89609);
            double t89653 = 0.0 ;
            double t89654 = C_k*t89482*t89637*(1.0E21/9.0);
            double t89655 = 0.0 ;
            double t89656 = C_k*rho_b[index]*t89601*t89655*t89639*t89648*(2.5E1/9.0);
            double t89657 = C_k*t89601*t89604*t89482*(1.0E1/9.0);
            double t89659 = t89653*t89647*t89639*(2.5E21/9.0);
            double t89660 = t89601*t89641*t89647*t89639*(2.0E1/3.0);
            double t89658 = -t89660+t89654+t89656+t89657-t89659;
            double t89661 = 1.0/(t89613*t89613*t89613);
            double t89662 = t89614*t89614;
            double t89663 = 1.0/(t89617*t89617*t89617);
            double t89664 = gamma_bb[index]*gx*t89562*(8.8E1/3.0);
            double t89665 = gamma_bb[index]*gx*t89521*t89611*t89551*7.2E1;
            double t89666 = t89521*t89611*t89552*(3.04E2/3.0);
            double t89667 = t89664+t89665+t89666;
            double t89668 = t89626*t89626;
            double t89669 = 1.0/(t89621*t89621*t89621);
            double t89670 = gamma_bb[index]*gx*t89562*(1.76E2/9.0);
            double t89671 = t89521*t89611*t89552*(3.04E2/9.0);
            double t89672 = t89670+t89671;
            double t89673 = X-1.0;
            double t89674 = t89607*t89635;
            double t89675 = t89610*t89607*t89646;
            double t89681 = t89607*t89608*t89645*2.0;
            double t89676 = -t89681+t89674+t89675;
            double t89677 = cxnl1*gamma_bb[index]*gx*t89520*t89630;
            double t89678 = cxnl3*gamma_bb[index]*gx*t89521*t89611*t89523*t89631;
            double t89679 = cxnl2*t89521*t89611*t89524*t89632;
            double t89680 = cxnl0+t89677+t89678+t89679;
            double t89682 = cxnl1*gamma_bb[index]*gx*t89630*t89547*(8.0/3.0);
            double t89683 = cxnl3*gamma_bb[index]*gx*t89521*t89611*t89631*t89548*8.0;
            double t89684 = cxnl2*t89521*t89611*t89632*t89546*(1.6E1/3.0);
            double t89685 = t89682+t89683+t89684-cxnl1*t89521*t89611*t89633*t89546*(8.0/3.0)-cxnl2*t89521*t89611* \
               t89524*t89614*t89629-cxnl3*gamma_bb[index]*gx*t89521*t89611*t89523*t89622*t89626;
            double t89686 = t89643*t89635;
            double t89687 = t89651*t89607*t89643*t89608*6.0;
            double t89688 = t89610*t89643*t89646*5.0;
            double t89689 = t89686+t89687+t89688-t89643*t89608*t89645*6.0-t89607*t89643*t89649-t89610*t89607* \
               t89643*t89652*5.0;
            v_rho_b_rho_b_[index] = t89576*(t89550+t89530*t89527*(t89549-c0p*t89510*t89519*2.0))*2.0+t89580*(- \
               t89518+t89572+t89530*t89527*(t89571+t89518-t89533*t89570*t89564*t89565-a1p*c*c0p*t89519*t89493*(2.0/ \
               3.0)))*2.0+rho_b[index]*t89580*(-t89586-t89595+t89530*t89527*(t89586+t89595-t89510*t89511*t89512*t89592- \
               t89533*1.0/(t89492*t89492*t89492)*t89564*t89583*2.0+t89533*t89564*t89565*(b2f*c*t89581*(4.0/9.0)+b4f* \
               t89520*t89488*(1.0E1/9.0)+b1f*c*t89500*t89581*(2.0/9.0)+b3f*c*t89581*t89484*(2.0/3.0)-b1f*t89520*t89582* \
               t89488*(1.0/3.6E1)+b3f*t89500*t89520*t89488*(1.0/1.2E1))+t89501*1.0/(t89504*t89504)*t89533*1.0/(t89492* \
               t89492*t89492*t89492)*t89583*(1.0/2.0)-a1f*c*c0f*t89531*t89581*(8.0/9.0)-t89510*t89505*t89584*t89593* \
               t89594*(1.0/2.0)+a1f*c*t89570*t89564*t89493*t89565*(2.0/3.0)-a1p*c*t89511*t89512*t89517*t89493*(2.0/ \
               3.0))+t89510*t89511*t89512*t89592+t89510*t89505*t89584*t89593*t89594*(1.0/2.0)+a1p*c*t89511*t89512* \
               t89517*t89493*(2.0/3.0))-rho_b[index]*t89576*(-t89518+t89572+t89530*t89527*(t89571+t89518-t89572-t89533* \
               t89570*t89564*t89565))*2.0-rho_b[index]*(t89550-t89530*t89527*(t89550-t89549))*(ccaa1*gamma_bb[index]* \
               gcaa*t89562*t89536*(8.8E1/9.0)-ccaa1*t89521*t89522*t89552*t89553*2.4E1+ccaa2*t89521*t89522*t89552* \
               t89545*(3.04E2/9.0)-ccaa2*t89521*t89522*t89563*t89546*t89556*(3.2E1/3.0)-ccaa2*t89521*t89522*t89524* \
               t89563*(gamma_bb[index]*gcaa*t89562*(1.76E2/9.0)+t89521*t89522*t89552*(3.04E2/9.0))+ccaa2*t89521*t89522* \
               t89524*1.0/(t89544*t89544*t89544)*(t89556*t89556)*2.0+ccaa3*gamma_bb[index]*gcaa*t89521*t89522*t89541* \
               t89551*7.2E1+ccaa1*gamma_bb[index]*gcaa*t89521*t89522*t89551*1.0/(t89535*t89535*t89535)*(1.28E2/9.0) \
               +ccaa3*gamma_bb[index]*gcaa*t89521*t89522*1.0/(t89540*t89540*t89540)*t89523*(t89560*t89560)*2.0-ccaa3* \
               gamma_bb[index]*gcaa*t89521*t89522*t89523*t89561*(gamma_bb[index]*gcaa*t89562*(8.8E1/3.0)+t89521*t89522* \
               t89552*(3.04E2/3.0)+gamma_bb[index]*gcaa*t89521*t89522*t89551*7.2E1)-ccaa3*gamma_bb[index]*gcaa*t89521* \
               t89522*t89560*t89561*t89548*1.6E1)-c0*t89673*t89489*(cx0+t89680*t89676+cx1*gamma_bb[index]*gx*t89520* \
               t89630+cx2*t89521*t89611*t89524*t89632+cx3*gamma_bb[index]*gx*t89521*t89611*t89523*t89631)*(4.0/9.0) \
               -c0*t89673*t89647*(t89676*(cxnl1*gamma_bb[index]*gx*t89630*t89562*(8.8E1/9.0)-cxnl1*t89521*t89611* \
               t89552*t89633*2.4E1+cxnl2*t89521*t89611*t89632*t89552*(3.04E2/9.0)+cxnl2*t89521*t89611*t89524*t89662* \
               t89663*2.0-cxnl2*t89521*t89611*t89524*t89672*t89629-cxnl2*t89521*t89611*t89614*t89546*t89629*(3.2E1/ \
               3.0)+cxnl3*gamma_bb[index]*gx*t89521*t89611*t89631*t89551*7.2E1+cxnl1*gamma_bb[index]*gx*t89521*t89611* \
               t89551*t89661*(1.28E2/9.0)-cxnl3*gamma_bb[index]*gx*t89521*t89611*t89523*t89622*t89667-cxnl3*gamma_bb[index]* \
               gx*t89521*t89611*t89622*t89626*t89548*1.6E1+cxnl3*gamma_bb[index]*gx*t89521*t89611*t89523*t89668*t89669* \
               2.0)-t89685*t89689*2.0-t89680*(t89650*t89649*2.0-t89635*t89658+t89610*t89650*t89652*5.0E1-t89650*t89651* \
               t89608*3.6E1+t89650*t89607*t89645*1.0E1-t89610*t89646*t89658*5.0+t89608*t89645*t89658*6.0+t89607*t89649* \
               t89658+t89610*t89607*t89652*t89658*5.0+t89650*t89607*t89608*t89646*4.0-t89651*t89607*t89608*t89658* \
               6.0-t89610*t89650*t89607*1.0/(t89609*t89609*t89609*t89609*t89609*t89609*t89609)*3.0E1)+cx1*gamma_bb[index]* \
               gx*t89630*t89562*(8.8E1/9.0)-cx1*t89521*t89611*t89552*t89633*2.4E1+cx2*t89521*t89611*t89632*t89552* \
               (3.04E2/9.0)+cx2*t89521*t89611*t89524*t89662*t89663*2.0-cx2*t89521*t89611*t89524*t89672*t89629-cx2* \
               t89521*t89611*t89614*t89546*t89629*(3.2E1/3.0)+cx1*gamma_bb[index]*gx*t89521*t89611*t89551*t89661* \
               (1.28E2/9.0)+cx3*gamma_bb[index]*gx*t89521*t89611*t89631*t89551*7.2E1-cx3*gamma_bb[index]*gx*t89521* \
               t89611*t89523*t89622*t89667-cx3*gamma_bb[index]*gx*t89521*t89611*t89622*t89626*t89548*1.6E1+cx3*gamma_bb[index]* \
               gx*t89521*t89611*t89523*t89668*t89669*2.0)-c0*pow(rho_b[index],1.0/3.0)*t89673*(t89680*t89689-t89676* \
               t89685-cx1*gamma_bb[index]*gx*t89630*t89547*(8.0/3.0)+cx1*t89521*t89611*t89633*t89546*(8.0/3.0)-cx2* \
               t89521*t89611*t89632*t89546*(1.6E1/3.0)+cx2*t89521*t89611*t89524*t89614*t89629-cx3*gamma_bb[index]* \
               gx*t89521*t89611*t89631*t89548*8.0+cx3*gamma_bb[index]*gx*t89521*t89611*t89523*t89622*t89626)*(8.0/ \
               3.0);
        } else {
            v_rho_b_rho_b_[index] = 0.0;
        } 

        if (is_gga_) {

            //V_rho_a_gamma_aa
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t87294 = 1.0/pow(rho_a[index],1.0/3.0);
                double t87295 = c*t87294;
                double t87296 = sqrt(t87295);
                double t87297 = pow(t87295,3.0/2.0);
                double t87298 = c*c;
                double t87299 = 1.0/pow(rho_a[index],2.0/3.0);
                double t87300 = 1.0/c0p;
                double t87301 = b1p*t87296;
                double t87302 = b3p*t87297;
                double t87303 = b4p*t87298*t87299;
                double t87304 = b2p*c*t87294;
                double t87305 = t87301+t87302+t87303+t87304;
                double t87306 = 1.0/t87305;
                double t87307 = t87300*t87306*(1.0/2.0);
                double t87308 = t87307+1.0;
                double t87309 = log(t87308);
                double t87310 = a1p*c*t87294;
                double t87311 = t87310+1.0;
                double t87312 = pow(2.0,1.0/3.0);
                double t87313 = t87312*2.0;
                double t87314 = t87313-2.0;
                double t87315 = two_13*2.0;
                double t87316 = t87315-2.0;
                double t87317 = 1.0/t87316;
                double t87318 = 1.0/c0f;
                double t87319 = 1.0/pow(rho_b[index],1.0/3.0);
                double t87320 = c*t87319;
                double t87321 = sqrt(t87320);
                double t87322 = pow(t87320,3.0/2.0);
                double t87323 = 1.0/pow(rho_b[index],2.0/3.0);
                double t87324 = b1p*t87321;
                double t87325 = b3p*t87322;
                double t87326 = b4p*t87323*t87298;
                double t87327 = b2p*c*t87319;
                double t87328 = t87324+t87325+t87326+t87327;
                double t87329 = 1.0/t87328;
                double t87330 = t87300*t87329*(1.0/2.0);
                double t87331 = t87330+1.0;
                double t87332 = log(t87331);
                double t87333 = a1p*c*t87319;
                double t87334 = t87333+1.0;
                double t87335 = c0p*t87332*t87334*2.0;
                double t87336 = rho_a[index]+rho_b[index];
                double t87337 = 1.0/pow(t87336,1.0/3.0);
                double t87338 = c*t87337;
                double t87339 = sqrt(t87338);
                double t87340 = pow(t87338,3.0/2.0);
                double t87341 = 1.0/pow(t87336,2.0/3.0);
                double t87342 = b1p*t87339;
                double t87343 = b3p*t87340;
                double t87344 = b4p*t87341*t87298;
                double t87345 = b2p*c*t87337;
                double t87346 = t87342+t87343+t87344+t87345;
                double t87347 = 1.0/t87346;
                double t87348 = t87300*t87347*(1.0/2.0);
                double t87349 = t87348+1.0;
                double t87350 = log(t87349);
                double t87351 = a1p*c*t87337;
                double t87352 = t87351+1.0;
                double t87353 = c0p*t87350*t87352*2.0;
                double t87354 = rho_a[index]-rho_b[index];
                double t87355 = t87354*t87354;
                double t87356 = 1.0/t87336;
                double t87357 = t87354*t87356;
                double t87358 = 1.0/(t87336*t87336*t87336*t87336);
                double t87359 = t87355*t87355;
                double t87360 = t87357+1.0;
                double t87361 = pow(t87360,4.0/3.0);
                double t87362 = -t87357+1.0;
                double t87363 = pow(t87362,4.0/3.0);
                double t87364 = t87361+t87363-2.0;
                double t87365 = 1.0/pow(rho_a[index],1.1E1/3.0);
                double t87366 = 1.0/pow(rho_a[index],8.0/3.0);
                double t87367 = gamma_aa[index]*t87366*(1.0/2.0);
                double t87368 = 1.0/pow(rho_b[index],8.0/3.0);
                double t87369 = gamma_bb[index]*t87368*(1.0/2.0);
                double t87370 = t87367+t87369;
                double t87371 = gcab*t87370;
                double t87372 = t87371+1.0;
                double t87373 = gcab*gcab;
                double t87374 = t87370*t87370;
                double t87375 = 1.0/pow(rho_a[index],1.9E1/3.0);
                double t87376 = t87373*t87374;
                double t87377 = gcab*t87370*2.0;
                double t87378 = t87376+t87377+1.0;
                double t87379 = t87373*t87374*3.0;
                double t87380 = gcab*t87370*t87373*t87374;
                double t87381 = gcab*t87370*3.0;
                double t87382 = t87380+t87381+t87379+1.0;
                double t87383 = 1.0/(t87372*t87372);
                double t87384 = 1.0/t87378;
                double t87385 = 1.0/(t87382*t87382);
                double t87386 = 1.0/(t87378*t87378);
                double t87387 = gamma_aa[index]*gcab*t87365*(8.0/3.0);
                double t87388 = gamma_aa[index]*t87370*t87373*t87365*(8.0/3.0);
                double t87389 = t87387+t87388;
                double t87390 = 1.0/t87382;
                double t87391 = gamma_aa[index]*gcab*t87365*4.0;
                double t87392 = gamma_aa[index]*gcab*t87373*t87365*t87374*4.0;
                double t87393 = gamma_aa[index]*t87370*t87373*t87365*8.0;
                double t87394 = t87391+t87392+t87393;
                double t87395 = gcab*t87366;
                double t87396 = t87370*t87373*t87366;
                double t87397 = t87395+t87396;
                double t87398 = gcab*t87366*(3.0/2.0);
                double t87399 = t87370*t87373*t87366*3.0;
                double t87400 = gcab*t87373*t87374*t87366*(3.0/2.0);
                double t87401 = t87400+t87398+t87399;
                double t87402 = gx*gx;
                double t87403 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t87404 = gamma_aa[index]*gamma_aa[index];
                double t87405 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t87406 = gamma_aa[index]*gx*t87366;
                double t87407 = t87406+1.0;
                double t87408 = gamma_aa[index]*gx*t87366*3.0;
                double t87409 = gamma_aa[index]*gx*t87402*t87404*t87405;
                double t87410 = t87402*t87403*t87404*3.0;
                double t87411 = t87410+t87408+t87409+1.0;
                double t87412 = gamma_aa[index]*gx*t87366*2.0;
                double t87413 = t87402*t87403*t87404;
                double t87414 = t87412+t87413+1.0;
                double t87415 = tau_a[index]*1.0E20;
                double t87416 = pow(rho_a[index],5.0/3.0);
                double t87421 = C_k*t87416;
                double t87417 = -t87421+t87415;
                double t87418 = 0.0 ;
                double t87419 = pow(rho_a[index],2.0/3.0);
                double t87420 = 1.0/tau_a[index];
                double t87422 = ( (t87417 > 0.0) ?  1.0 : 0.0 ) ;
                double t87423 = C_k*t87418*t87419*(5.0E20/3.0);
                double t87424 = C_k*C_k;
                double t87425 = pow(rho_a[index],7.0/3.0);
                double t87426 = C_k*t87420*t87422*t87419*(5.0/3.0);
                double t87433 = t87420*t87424*t87425*t87418*(5.0/3.0);
                double t87427 = t87423-t87433+t87426;
                double t87428 = t87421-t87415;
                double t87429 = ( (t87428 > 0.0) ?  1.0 : 0.0 ) ;
                double t87430 = t87429*1.0E20;
                double t87431 = C_k*t87420*t87422*t87416;
                double t87432 = t87430+t87431+1.0;
                double t87434 = t87430+t87431-1.0;
                double t87435 = t87434*t87434;
                double t87436 = t87435*t87435;
                double t87437 = 1.0/t87432;
                double t87438 = 1.0/(t87432*t87432*t87432);
                double t87439 = 1.0/(t87432*t87432*t87432*t87432*t87432);
                double t87440 = 1.0/t87407;
                double t87441 = 1.0/t87414;
                double t87442 = 1.0/t87411;
                double t87443 = 1.0/(t87407*t87407);
                double t87444 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]*rho_a[index]);
                double t87445 = 1.0/(t87411*t87411);
                double t87446 = 1.0/(t87414*t87414);
                double t87447 = gx*t87366*3.0;
                double t87448 = gamma_aa[index]*t87402*t87403*6.0;
                double t87449 = gx*t87402*t87404*t87405*3.0;
                double t87450 = t87447+t87448+t87449;
                double t87451 = gx*t87366*2.0;
                double t87452 = gamma_aa[index]*t87402*t87403*2.0;
                double t87453 = t87451+t87452;
                double t87454 = gamma_aa[index]*gx*t87365*(1.6E1/3.0);
                double t87455 = t87402*t87404*t87375*(1.6E1/3.0);
                double t87456 = t87454+t87455;
                double t87457 = gamma_aa[index]*gx*t87365*8.0;
                double t87458 = gamma_aa[index]*gx*t87402*t87404*t87444*8.0;
                double t87459 = t87402*t87404*t87375*1.6E1;
                double t87460 = t87457+t87458+t87459;
                double t87461 = 1.0/(t87407*t87407*t87407);
                double t87462 = gx*t87365*8.0;
                double t87463 = gamma_aa[index]*t87402*t87375*3.2E1;
                double t87464 = gx*t87402*t87404*t87444*2.4E1;
                double t87465 = t87462+t87463+t87464;
                double t87466 = gx*t87365*(1.6E1/3.0);
                double t87467 = gamma_aa[index]*t87402*t87375*(3.2E1/3.0);
                double t87468 = t87466+t87467;
                double t87469 = 1.0/(t87414*t87414*t87414);
                double t87470 = 1.0/(t87411*t87411*t87411);
                double t87471 = t87434*t87437;
                double t87472 = t87434*t87436*t87439;
                double t87473 = t87471+t87472-t87434*t87435*t87438*2.0;
                double t87474 = cxnl1*gx*t87440*t87366;
                double t87475 = cxnl2*gamma_aa[index]*t87402*t87403*t87441*2.0;
                double t87476 = cxnl3*gx*t87402*t87404*t87405*t87442*3.0;
                double t87477 = t87474+t87475+t87476-cxnl1*gamma_aa[index]*t87402*t87403*t87443-cxnl2*t87402*t87403* \
                   t87404*t87453*t87446-cxnl3*gamma_aa[index]*gx*t87402*t87404*t87405*t87450*t87445;
                double t87478 = b1f*t87296;
                double t87479 = b3f*t87297;
                double t87480 = b4f*t87298*t87299;
                double t87481 = b2f*c*t87294;
                double t87482 = t87480+t87481+t87478+t87479;
                double t87483 = 1.0/t87482;
                double t87484 = t87318*t87483*(1.0/2.0);
                double t87485 = t87484+1.0;
                double t87486 = log(t87485);
                double t87487 = a1f*c*t87294;
                double t87488 = t87487+1.0;
                double t87489 = c0f*t87486*t87488*2.0;
                double t87490 = c0p*t87311*t87309*2.0;
                double t87491 = gcaa*gcaa;
                double t87492 = gamma_aa[index]*gcaa*t87366;
                double t87493 = t87492+1.0;
                double t87494 = gamma_aa[index]*gcaa*t87366*3.0;
                double t87495 = gamma_aa[index]*gcaa*t87404*t87405*t87491;
                double t87496 = t87403*t87404*t87491*3.0;
                double t87497 = t87494+t87495+t87496+1.0;
                double t87498 = gamma_aa[index]*gcaa*t87366*2.0;
                double t87499 = t87403*t87404*t87491;
                double t87500 = t87498+t87499+1.0;
                double t87501 = 1.0/t87372;
                double t87502 = 1.0/pow(t87336,4.0/3.0);
                double t87503 = b1f*t87339;
                double t87504 = b3f*t87340;
                double t87505 = b4f*t87341*t87298;
                double t87506 = b2f*c*t87337;
                double t87507 = t87503+t87504+t87505+t87506;
                double t87508 = 1.0/t87507;
                double t87509 = t87318*t87508*(1.0/2.0);
                double t87510 = t87509+1.0;
                double t87511 = log(t87510);
                double t87512 = a1f*c*t87337;
                double t87513 = t87512+1.0;
                double t87515 = c0f*t87511*t87513*2.0;
                double t87514 = t87353-t87515;
                double t87516 = 1.0/(t87336*t87336);
                double t87543 = t87354*t87516;
                double t87517 = -t87543+t87356;
                double t87518 = 1.0/pow(t87336,5.0/3.0);
                double t87519 = 1.0/sqrt(t87338);
                double t87520 = 1.0/t87349;
                double t87521 = 1.0/(t87346*t87346);
                double t87522 = b4p*t87518*t87298*(2.0/3.0);
                double t87523 = b2p*c*t87502*(1.0/3.0);
                double t87524 = b1p*c*t87502*t87519*(1.0/6.0);
                double t87525 = b3p*c*t87502*t87339*(1.0/2.0);
                double t87526 = t87522+t87523+t87524+t87525;
                double t87527 = t87520*t87521*t87352*t87526;
                double t87528 = 1.0/d2fz0;
                double t87529 = 1.0/Aa;
                double t87530 = b1a*t87339;
                double t87531 = b3a*t87340;
                double t87532 = b4a*t87341*t87298;
                double t87533 = b2a*c*t87337;
                double t87534 = t87530+t87531+t87532+t87533;
                double t87535 = 1.0/t87534;
                double t87536 = t87535*t87529*(1.0/2.0);
                double t87537 = t87536+1.0;
                double t87538 = log(t87537);
                double t87539 = a1a*c*t87337;
                double t87540 = t87539+1.0;
                double t87541 = 1.0/(t87336*t87336*t87336*t87336*t87336);
                double t87542 = pow(t87360,1.0/3.0);
                double t87544 = t87542*t87517*(4.0/3.0);
                double t87545 = pow(t87362,1.0/3.0);
                double t87546 = t87544-t87517*t87545*(4.0/3.0);
                double t87547 = t87358*t87359;
                double t87548 = t87547-1.0;
                double t87549 = 1.0/pow(rho_a[index],4.0/3.0);
                double t87550 = 1.0/pow(rho_a[index],5.0/3.0);
                double t87551 = 1.0/sqrt(t87295);
                double t87552 = 1.0/t87308;
                double t87553 = 1.0/(t87305*t87305);
                double t87554 = b4p*t87550*t87298*(2.0/3.0);
                double t87555 = b2p*c*t87549*(1.0/3.0);
                double t87556 = b1p*c*t87551*t87549*(1.0/6.0);
                double t87557 = b3p*c*t87296*t87549*(1.0/2.0);
                double t87558 = t87554+t87555+t87556+t87557;
                double t87559 = t87311*t87552*t87553*t87558;
                double t87560 = Aa*t87540*t87317*t87364*t87528*t87538*t87548*2.0;
                double t87561 = t87490-t87489;
                double t87562 = t87314*t87317*t87561;
                double t87563 = 1.0/t87493;
                double t87564 = 1.0/t87500;
                double t87565 = 1.0/t87497;
                double t87566 = 1.0/(t87493*t87493);
                double t87567 = 1.0/(t87497*t87497);
                double t87568 = 1.0/(t87500*t87500);
                double t87569 = gcaa*t87366*3.0;
                double t87570 = gamma_aa[index]*t87403*t87491*6.0;
                double t87571 = gcaa*t87404*t87405*t87491*3.0;
                double t87572 = t87570+t87571+t87569;
                double t87573 = gcaa*t87366*2.0;
                double t87574 = gamma_aa[index]*t87403*t87491*2.0;
                double t87575 = t87573+t87574;
                double t87576 = gamma_aa[index]*gcaa*t87365*(1.6E1/3.0);
                double t87577 = t87404*t87491*t87375*(1.6E1/3.0);
                double t87578 = t87576+t87577;
                double t87579 = gamma_aa[index]*gcaa*t87365*8.0;
                double t87580 = gamma_aa[index]*gcaa*t87404*t87444*t87491*8.0;
                double t87581 = t87404*t87491*t87375*1.6E1;
                double t87582 = t87580+t87581+t87579;
                double t87583 = 1.0/t87485;
                double t87584 = 1.0/(t87482*t87482);
                double t87585 = b4f*t87550*t87298*(2.0/3.0);
                double t87586 = b2f*c*t87549*(1.0/3.0);
                double t87587 = b1f*c*t87551*t87549*(1.0/6.0);
                double t87588 = b3f*c*t87296*t87549*(1.0/2.0);
                double t87589 = t87585+t87586+t87587+t87588;
                double t87590 = a1f*c*c0f*t87486*t87549*(2.0/3.0);
                double t87591 = a1p*c*c0p*t87309*t87549*(2.0/3.0);
                double t87592 = ccaa1*gcaa*t87563*t87366;
                double t87593 = ccaa2*gamma_aa[index]*t87403*t87491*t87564*2.0;
                double t87594 = ccaa3*gcaa*t87404*t87405*t87491*t87565*3.0;
                double t87595 = t87592+t87593+t87594-ccaa1*gamma_aa[index]*t87403*t87491*t87566-ccaa2*t87403*t87404* \
                   t87491*t87575*t87568-ccaa3*gamma_aa[index]*gcaa*t87404*t87405*t87491*t87572*t87567;
                v_rho_a_gamma_aa_[index] = -(X-1.0)*(c0*pow(rho_a[index],1.0/3.0)*(t87473*t87477+cx1*gx*t87440*t87366- \
                   cx1*gamma_aa[index]*t87402*t87403*t87443+cx2*gamma_aa[index]*t87402*t87403*t87441*2.0-cx2*t87402*t87403* \
                   t87404*t87453*t87446+cx3*gx*t87402*t87404*t87405*t87442*3.0-cx3*gamma_aa[index]*gx*t87402*t87404*t87405* \
                   t87450*t87445)*(4.0/3.0)+c0*pow(rho_a[index],4.0/3.0)*(t87477*(t87427*t87437-1.0/(t87432*t87432)*t87434* \
                   t87427-t87435*t87427*t87438*6.0+t87427*t87436*t87439*5.0+1.0/(t87432*t87432*t87432*t87432)*t87434* \
                   t87435*t87427*6.0-1.0/(t87432*t87432*t87432*t87432*t87432*t87432)*t87434*t87427*t87436*5.0)+t87473* \
                   (cxnl1*gx*t87440*t87365*(-8.0/3.0)-cxnl2*gamma_aa[index]*t87402*t87441*t87375*(3.2E1/3.0)+cxnl1*gamma_aa[index]* \
                   t87402*t87443*t87375*8.0+cxnl2*t87402*t87403*t87404*t87446*t87468+cxnl2*t87402*t87404*t87453*t87446* \
                   t87375*(1.6E1/3.0)+cxnl2*gamma_aa[index]*t87402*t87403*t87446*t87456*2.0-cxnl1*gx*t87402*t87404*t87461* \
                   t87444*(1.6E1/3.0)-cxnl3*gx*t87402*t87404*t87442*t87444*2.4E1+cxnl3*gx*t87402*t87404*t87405*t87460* \
                   t87445*3.0-cxnl2*t87402*t87403*t87404*t87453*t87456*t87469*2.0+cxnl3*gamma_aa[index]*gx*t87402*t87404* \
                   t87450*t87444*t87445*8.0+cxnl3*gamma_aa[index]*gx*t87402*t87404*t87405*t87445*t87465-cxnl3*gamma_aa[index]* \
                   gx*t87402*t87404*t87405*t87450*t87460*t87470*2.0)-cx1*gx*t87440*t87365*(8.0/3.0)+cx1*gamma_aa[index]* \
                   t87402*t87443*t87375*8.0-cx2*gamma_aa[index]*t87402*t87441*t87375*(3.2E1/3.0)+cx2*t87402*t87403*t87404* \
                   t87446*t87468+cx2*t87402*t87404*t87453*t87446*t87375*(1.6E1/3.0)+cx2*gamma_aa[index]*t87402*t87403* \
                   t87446*t87456*2.0-cx1*gx*t87402*t87404*t87461*t87444*(1.6E1/3.0)-cx3*gx*t87402*t87404*t87442*t87444* \
                   2.4E1+cx3*gx*t87402*t87404*t87405*t87460*t87445*3.0-cx2*t87402*t87403*t87404*t87453*t87456*t87469* \
                   2.0+cx3*gamma_aa[index]*gx*t87402*t87404*t87450*t87444*t87445*8.0+cx3*gamma_aa[index]*gx*t87402*t87404* \
                   t87405*t87445*t87465-cx3*gamma_aa[index]*gx*t87402*t87404*t87405*t87450*t87460*t87470*2.0))-t87595* \
                   (t87490-t87314*t87317*t87561)-(rho_a[index]*(t87490+t87314*t87317*(t87489-c0p*t87311*t87309*2.0))+ \
                   rho_b[index]*(t87335-t87314*t87317*(t87335-c0f*log((t87318*(1.0/2.0))/(b1f*t87321+b3f*t87322+b2f*c* \
                   t87319+b4f*t87323*t87298)+1.0)*(a1f*c*t87319+1.0)*2.0))-t87336*(t87353+t87560-t87514*t87317*t87364* \
                   t87358*t87359))*(ccab1*gcab*t87501*t87365*(4.0/3.0)-ccab2*t87373*t87374*t87386*(gcab*t87365*(8.0/3.0) \
                   +gamma_aa[index]*t87373*t87375*(4.0/3.0)+t87370*t87373*t87365*(8.0/3.0))-ccab1*gamma_aa[index]*t87373* \
                   t87383*t87375*(4.0/3.0)+ccab2*gamma_aa[index]*t87373*t87375*t87384*(4.0/3.0)-ccab1*t87370*t87373*t87365* \
                   t87383*(4.0/3.0)+ccab2*t87370*t87373*t87365*t87384*(8.0/3.0)-ccab2*t87370*t87373*t87366*t87386*t87389+ \
                   ccab2*t87373*t87374*1.0/(t87378*t87378*t87378)*t87397*t87389*2.0+ccab3*gcab*t87390*t87373*t87365*t87374* \
                   4.0+ccab3*gamma_aa[index]*gcab*t87370*t87390*t87373*t87375*4.0-ccab2*gamma_aa[index]*t87370*t87373* \
                   t87365*t87386*t87397*(8.0/3.0)-ccab3*gcab*t87373*t87374*t87366*t87385*t87394*(3.0/2.0)-ccab3*gcab* \
                   t87370*t87373*t87374*t87385*(gcab*t87365*4.0+gamma_aa[index]*t87373*t87375*4.0+t87370*t87373*t87365* \
                   8.0+gcab*t87373*t87365*t87374*4.0+gamma_aa[index]*gcab*t87370*t87373*t87375*4.0)+ccab1*gamma_aa[index]* \
                   gcab*t87370*1.0/(t87372*t87372*t87372)*t87373*t87375*(4.0/3.0)+ccab3*gcab*t87401*t87370*t87373*1.0/ \
                   (t87382*t87382*t87382)*t87374*t87394*2.0-ccab3*gamma_aa[index]*gcab*t87401*t87373*t87365*t87374*t87385* \
                   4.0)-(ccab1*gcab*t87501*t87366*(1.0/2.0)-ccab1*t87370*t87373*t87383*t87366*(1.0/2.0)+ccab2*t87370* \
                   t87373*t87366*t87384-ccab2*t87373*t87374*t87386*t87397+ccab3*gcab*t87390*t87373*t87374*t87366*(3.0/ \
                   2.0)-ccab3*gcab*t87401*t87370*t87373*t87374*t87385)*(t87353+t87560-t87490+t87562+rho_a[index]*(t87591- \
                   t87559+t87314*t87317*(t87590+t87559-t87583*t87584*t87488*t87589-a1p*c*c0p*t87309*t87549*(2.0/3.0)) \
                   )-t87336*(-t87527+t87317*t87364*t87358*t87359*(t87527-(t87513*1.0/(t87507*t87507)*(b2f*c*t87502*(1.0/ \
                   3.0)+b4f*t87518*t87298*(2.0/3.0)+b1f*c*t87502*t87519*(1.0/6.0)+b3f*c*t87502*t87339*(1.0/2.0)))/t87510+ \
                   a1f*c*c0f*t87502*t87511*(2.0/3.0)-a1p*c*c0p*t87502*t87350*(2.0/3.0))+a1p*c*c0p*t87502*t87350*(2.0/ \
                   3.0)-t87514*t87541*t87317*t87364*t87359*4.0+t87514*t87317*t87546*t87358*t87359+t87514*t87317*t87354* \
                   t87355*t87364*t87358*4.0+Aa*t87540*t87317*t87364*t87528*t87538*(t87541*t87359*4.0-t87354*t87355*t87358* \
                   4.0)*2.0-Aa*t87540*t87317*t87528*t87546*t87538*t87548*2.0-(t87540*t87317*1.0/(t87534*t87534)*t87364* \
                   t87528*t87548*(b2a*c*t87502*(1.0/3.0)+b4a*t87518*t87298*(2.0/3.0)+b1a*c*t87502*t87519*(1.0/6.0)+b3a* \
                   c*t87502*t87339*(1.0/2.0)))/t87537+Aa*a1a*c*t87502*t87317*t87364*t87528*t87538*t87548*(2.0/3.0))-t87514* \
                   t87317*t87364*t87358*t87359)+rho_a[index]*t87595*(t87591-t87559+t87314*t87317*(t87590-t87591+t87559- \
                   t87583*t87584*t87488*t87589))-rho_a[index]*(t87490-t87562)*(ccaa1*gcaa*t87365*t87563*(-8.0/3.0)-ccaa2* \
                   gamma_aa[index]*t87491*t87375*t87564*(3.2E1/3.0)+ccaa1*gamma_aa[index]*t87491*t87375*t87566*8.0+ccaa2* \
                   t87404*t87491*t87375*t87575*t87568*(1.6E1/3.0)-ccaa1*gcaa*t87404*t87444*t87491*1.0/(t87493*t87493* \
                   t87493)*(1.6E1/3.0)+ccaa2*t87403*t87404*t87491*t87568*(gcaa*t87365*(1.6E1/3.0)+gamma_aa[index]*t87491* \
                   t87375*(3.2E1/3.0))+ccaa2*gamma_aa[index]*t87403*t87491*t87568*t87578*2.0-ccaa3*gcaa*t87404*t87444* \
                   t87491*t87565*2.4E1+ccaa3*gcaa*t87404*t87405*t87491*t87582*t87567*3.0-ccaa2*1.0/(t87500*t87500*t87500) \
                   *t87403*t87404*t87491*t87575*t87578*2.0+ccaa3*gamma_aa[index]*gcaa*t87404*t87405*t87491*t87567*(gcaa* \
                   t87365*8.0+gamma_aa[index]*t87491*t87375*3.2E1+gcaa*t87404*t87444*t87491*2.4E1)+ccaa3*gamma_aa[index]* \
                   gcaa*t87404*t87444*t87491*t87572*t87567*8.0-ccaa3*gamma_aa[index]*gcaa*t87404*t87405*t87491*t87572* \
                   t87582*1.0/(t87497*t87497*t87497)*2.0);
            } else if (rho_a[index] > cutoff_) {
                double t90747 = 1.0/pow(rho_a[index],1.0/3.0);
                double t90748 = c*t90747;
                double t90749 = sqrt(t90748);
                double t90750 = pow(t90748,3.0/2.0);
                double t90751 = c*c;
                double t90752 = 1.0/pow(rho_a[index],2.0/3.0);
                double t90753 = 1.0/c0p;
                double t90754 = b1p*t90749;
                double t90755 = b3p*t90750;
                double t90756 = b4p*t90751*t90752;
                double t90757 = b2p*c*t90747;
                double t90758 = t90754+t90755+t90756+t90757;
                double t90759 = 1.0/t90758;
                double t90760 = t90753*t90759*(1.0/2.0);
                double t90761 = t90760+1.0;
                double t90762 = log(t90761);
                double t90763 = a1p*c*t90747;
                double t90764 = t90763+1.0;
                double t90765 = 1.0/pow(rho_a[index],8.0/3.0);
                double t90766 = gcaa*gcaa;
                double t90767 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t90768 = gamma_aa[index]*gamma_aa[index];
                double t90769 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t90770 = gamma_aa[index]*gcaa*t90765;
                double t90771 = t90770+1.0;
                double t90772 = gamma_aa[index]*gcaa*t90765*3.0;
                double t90773 = gamma_aa[index]*gcaa*t90766*t90768*t90769;
                double t90774 = t90766*t90767*t90768*3.0;
                double t90775 = t90772+t90773+t90774+1.0;
                double t90776 = gamma_aa[index]*gcaa*t90765*2.0;
                double t90777 = t90766*t90767*t90768;
                double t90778 = t90776+t90777+1.0;
                double t90779 = pow(2.0,1.0/3.0);
                double t90780 = t90779*2.0;
                double t90781 = t90780-2.0;
                double t90782 = two_13*2.0;
                double t90783 = t90782-2.0;
                double t90784 = 1.0/t90783;
                double t90785 = 1.0/c0f;
                double t90786 = b1f*t90749;
                double t90787 = b3f*t90750;
                double t90788 = b4f*t90751*t90752;
                double t90789 = b2f*c*t90747;
                double t90790 = t90786+t90787+t90788+t90789;
                double t90791 = 1.0/t90790;
                double t90792 = t90791*t90785*(1.0/2.0);
                double t90793 = t90792+1.0;
                double t90794 = log(t90793);
                double t90795 = a1f*c*t90747;
                double t90796 = t90795+1.0;
                double t90797 = c0f*t90794*t90796*2.0;
                double t90798 = c0p*t90762*t90764*2.0;
                double t90799 = 1.0/t90771;
                double t90800 = 1.0/t90778;
                double t90801 = 1.0/t90775;
                double t90802 = 1.0/pow(rho_a[index],1.9E1/3.0);
                double t90803 = 1.0/(t90771*t90771);
                double t90804 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]*rho_a[index]);
                double t90805 = 1.0/pow(rho_a[index],1.1E1/3.0);
                double t90806 = 1.0/(t90775*t90775);
                double t90807 = 1.0/(t90778*t90778);
                double t90808 = gcaa*t90765*3.0;
                double t90809 = gamma_aa[index]*t90766*t90767*6.0;
                double t90810 = gcaa*t90766*t90768*t90769*3.0;
                double t90811 = t90810+t90808+t90809;
                double t90812 = gcaa*t90765*2.0;
                double t90813 = gamma_aa[index]*t90766*t90767*2.0;
                double t90814 = t90812+t90813;
                double t90815 = gamma_aa[index]*gcaa*t90805*(1.6E1/3.0);
                double t90816 = t90802*t90766*t90768*(1.6E1/3.0);
                double t90817 = t90815+t90816;
                double t90818 = gamma_aa[index]*gcaa*t90805*8.0;
                double t90819 = gamma_aa[index]*gcaa*t90804*t90766*t90768*8.0;
                double t90820 = t90802*t90766*t90768*1.6E1;
                double t90821 = t90820+t90818+t90819;
                double t90822 = 1.0/pow(rho_a[index],4.0/3.0);
                double t90823 = 1.0/pow(rho_a[index],5.0/3.0);
                double t90824 = 1.0/sqrt(t90748);
                double t90825 = 1.0/t90761;
                double t90826 = 1.0/(t90758*t90758);
                double t90827 = b4p*t90751*t90823*(2.0/3.0);
                double t90828 = b2p*c*t90822*(1.0/3.0);
                double t90829 = b1p*c*t90822*t90824*(1.0/6.0);
                double t90830 = b3p*c*t90822*t90749*(1.0/2.0);
                double t90831 = t90830+t90827+t90828+t90829;
                double t90832 = t90831*t90825*t90826*t90764;
                double t90833 = ccaa1*gcaa*t90765*t90799;
                double t90834 = ccaa2*gamma_aa[index]*t90800*t90766*t90767*2.0;
                double t90835 = ccaa3*gcaa*t90801*t90766*t90768*t90769*3.0;
                double t90836 = t90833+t90834+t90835-ccaa1*gamma_aa[index]*t90803*t90766*t90767-ccaa2*t90814*t90807* \
                   t90766*t90767*t90768-ccaa3*gamma_aa[index]*gcaa*t90811*t90806*t90766*t90768*t90769;
                double t90837 = pow(rho_a[index],5.0/3.0);
                double t90838 = C_k*t90837;
                double t90839 = tau_a[index]*1.0E20;
                double t90840 = 1.0/tau_a[index];
                double t90841 = -t90838+t90839;
                double t90842 = ( (t90841 > 0.0) ?  1.0 : 0.0 ) ;
                double t90843 = C_k*t90840*t90842*t90837;
                double t90844 = t90838-t90839;
                double t90845 = ( (t90844 > 0.0) ?  1.0 : 0.0 ) ;
                double t90846 = t90845*1.0E20;
                double t90847 = t90843+t90846-1.0;
                double t90848 = t90847*t90847;
                double t90849 = t90843+t90846+1.0;
                double t90850 = t90848*t90848;
                double t90851 = gx*gx;
                double t90852 = gamma_aa[index]*gx*t90765;
                double t90853 = t90852+1.0;
                double t90854 = gamma_aa[index]*gx*t90765*3.0;
                double t90855 = gamma_aa[index]*gx*t90851*t90768*t90769;
                double t90856 = t90851*t90767*t90768*3.0;
                double t90857 = t90854+t90855+t90856+1.0;
                double t90858 = gamma_aa[index]*gx*t90765*2.0;
                double t90859 = t90851*t90767*t90768;
                double t90860 = t90858+t90859+1.0;
                double t90861 = 1.0/t90853;
                double t90862 = 1.0/t90860;
                double t90863 = 1.0/t90857;
                double t90864 = 1.0/(t90853*t90853);
                double t90865 = gx*t90765*3.0;
                double t90866 = gamma_aa[index]*t90851*t90767*6.0;
                double t90867 = gx*t90851*t90768*t90769*3.0;
                double t90868 = t90865+t90866+t90867;
                double t90869 = 1.0/(t90857*t90857);
                double t90870 = gx*t90765*2.0;
                double t90871 = gamma_aa[index]*t90851*t90767*2.0;
                double t90872 = t90870+t90871;
                double t90873 = 1.0/(t90860*t90860);
                double t90874 = X-1.0;
                double t90875 = cxnl1*gx*t90861*t90765;
                double t90876 = cxnl2*gamma_aa[index]*t90851*t90862*t90767*2.0;
                double t90877 = cxnl3*gx*t90851*t90863*t90768*t90769*3.0;
                double t90878 = t90875+t90876+t90877-cxnl1*gamma_aa[index]*t90851*t90864*t90767-cxnl2*t90851*t90872* \
                   t90873*t90767*t90768-cxnl3*gamma_aa[index]*gx*t90851*t90768*t90769*t90868*t90869;
                double t90879 = 0.0 ;
                double t90880 = pow(rho_a[index],2.0/3.0);
                double t90881 = 1.0/t90849;
                double t90882 = C_k*t90880*t90879*(5.0E20/3.0);
                double t90883 = C_k*C_k;
                double t90884 = pow(rho_a[index],7.0/3.0);
                double t90885 = C_k*t90840*t90842*t90880*(5.0/3.0);
                double t90887 = t90840*t90883*t90884*t90879*(5.0/3.0);
                double t90886 = t90882+t90885-t90887;
                double t90888 = 1.0/(t90849*t90849*t90849);
                double t90889 = 1.0/(t90849*t90849*t90849*t90849*t90849);
                double t90890 = t90881*t90847;
                double t90891 = t90850*t90847*t90889;
                double t90892 = t90890+t90891-t90847*t90848*t90888*2.0;
                double t90893 = gamma_aa[index]*gx*t90805*(1.6E1/3.0);
                double t90894 = t90802*t90851*t90768*(1.6E1/3.0);
                double t90895 = t90893+t90894;
                double t90896 = gamma_aa[index]*gx*t90805*8.0;
                double t90897 = gamma_aa[index]*gx*t90804*t90851*t90768*8.0;
                double t90898 = t90802*t90851*t90768*1.6E1;
                double t90899 = t90896+t90897+t90898;
                double t90900 = 1.0/(t90853*t90853*t90853);
                double t90901 = gx*t90805*8.0;
                double t90902 = gamma_aa[index]*t90802*t90851*3.2E1;
                double t90903 = gx*t90804*t90851*t90768*2.4E1;
                double t90904 = t90901+t90902+t90903;
                double t90905 = gx*t90805*(1.6E1/3.0);
                double t90906 = gamma_aa[index]*t90802*t90851*(3.2E1/3.0);
                double t90907 = t90905+t90906;
                double t90908 = 1.0/(t90860*t90860*t90860);
                double t90909 = 1.0/(t90857*t90857*t90857);
                v_rho_a_gamma_aa_[index] = -t90836*(t90798+t90781*t90784*(t90797-c0p*t90762*t90764*2.0))+rho_a[index]* \
                   t90836*(-t90832+t90781*t90784*(t90832-(1.0/(t90790*t90790)*t90796*(b2f*c*t90822*(1.0/3.0)+b4f*t90751* \
                   t90823*(2.0/3.0)+b1f*c*t90822*t90824*(1.0/6.0)+b3f*c*t90822*t90749*(1.0/2.0)))/t90793+a1f*c*c0f*t90822* \
                   t90794*(2.0/3.0)-a1p*c*c0p*t90822*t90762*(2.0/3.0))+a1p*c*c0p*t90822*t90762*(2.0/3.0))-rho_a[index]* \
                   (t90798+t90781*t90784*(t90797-t90798))*(ccaa1*gcaa*t90805*t90799*(-8.0/3.0)-ccaa2*gamma_aa[index]* \
                   t90800*t90802*t90766*(3.2E1/3.0)+ccaa1*gamma_aa[index]*t90802*t90803*t90766*8.0+ccaa2*t90802*t90814* \
                   t90807*t90766*t90768*(1.6E1/3.0)-ccaa1*gcaa*t90804*1.0/(t90771*t90771*t90771)*t90766*t90768*(1.6E1/ \
                   3.0)+ccaa2*t90807*t90766*t90767*t90768*(gcaa*t90805*(1.6E1/3.0)+gamma_aa[index]*t90802*t90766*(3.2E1/ \
                   3.0))+ccaa2*gamma_aa[index]*t90807*t90817*t90766*t90767*2.0-ccaa3*gcaa*t90801*t90804*t90766*t90768* \
                   2.4E1+ccaa3*gcaa*t90821*t90806*t90766*t90768*t90769*3.0-ccaa2*t90814*t90817*t90766*t90767*t90768*1.0/ \
                   (t90778*t90778*t90778)*2.0+ccaa3*gamma_aa[index]*gcaa*t90806*t90766*t90768*t90769*(gcaa*t90805*8.0+ \
                   gamma_aa[index]*t90802*t90766*3.2E1+gcaa*t90804*t90766*t90768*2.4E1)+ccaa3*gamma_aa[index]*gcaa*t90811* \
                   t90804*t90806*t90766*t90768*8.0-ccaa3*gamma_aa[index]*gcaa*t90811*t90821*t90766*1.0/(t90775*t90775* \
                   t90775)*t90768*t90769*2.0)-c0*pow(rho_a[index],1.0/3.0)*t90874*(t90892*t90878+cx1*gx*t90861*t90765- \
                   cx1*gamma_aa[index]*t90851*t90864*t90767+cx2*gamma_aa[index]*t90851*t90862*t90767*2.0-cx2*t90851*t90872* \
                   t90873*t90767*t90768+cx3*gx*t90851*t90863*t90768*t90769*3.0-cx3*gamma_aa[index]*gx*t90851*t90768*t90769* \
                   t90868*t90869)*(4.0/3.0)-c0*pow(rho_a[index],4.0/3.0)*t90874*(t90878*(t90881*t90886-t90847*1.0/(t90849* \
                   t90849)*t90886+t90850*t90886*t90889*5.0-t90848*t90886*t90888*6.0-t90850*t90847*1.0/(t90849*t90849* \
                   t90849*t90849*t90849*t90849)*t90886*5.0+t90847*t90848*1.0/(t90849*t90849*t90849*t90849)*t90886*6.0) \
                   +t90892*(cxnl1*gx*t90805*t90861*(-8.0/3.0)-cxnl2*gamma_aa[index]*t90802*t90851*t90862*(3.2E1/3.0)+ \
                   cxnl1*gamma_aa[index]*t90802*t90851*t90864*8.0+cxnl2*t90802*t90851*t90872*t90873*t90768*(1.6E1/3.0) \
                   +cxnl2*t90851*t90907*t90873*t90767*t90768+cxnl2*gamma_aa[index]*t90851*t90873*t90767*t90895*2.0-cxnl1* \
                   gx*t90900*t90804*t90851*t90768*(1.6E1/3.0)-cxnl3*gx*t90804*t90851*t90863*t90768*2.4E1+cxnl3*gx*t90851* \
                   t90768*t90769*t90869*t90899*3.0-cxnl2*t90851*t90872*t90908*t90767*t90768*t90895*2.0+cxnl3*gamma_aa[index]* \
                   gx*t90804*t90851*t90768*t90868*t90869*8.0+cxnl3*gamma_aa[index]*gx*t90904*t90851*t90768*t90769*t90869- \
                   cxnl3*gamma_aa[index]*gx*t90851*t90909*t90768*t90769*t90868*t90899*2.0)-cx1*gx*t90805*t90861*(8.0/ \
                   3.0)+cx1*gamma_aa[index]*t90802*t90851*t90864*8.0-cx2*gamma_aa[index]*t90802*t90851*t90862*(3.2E1/ \
                   3.0)+cx2*t90802*t90851*t90872*t90873*t90768*(1.6E1/3.0)+cx2*t90851*t90907*t90873*t90767*t90768+cx2* \
                   gamma_aa[index]*t90851*t90873*t90767*t90895*2.0-cx1*gx*t90900*t90804*t90851*t90768*(1.6E1/3.0)-cx3* \
                   gx*t90804*t90851*t90863*t90768*2.4E1+cx3*gx*t90851*t90768*t90769*t90869*t90899*3.0-cx2*t90851*t90872* \
                   t90908*t90767*t90768*t90895*2.0+cx3*gamma_aa[index]*gx*t90804*t90851*t90768*t90868*t90869*8.0+cx3* \
                   gamma_aa[index]*gx*t90904*t90851*t90768*t90769*t90869-cx3*gamma_aa[index]*gx*t90851*t90909*t90768* \
                   t90769*t90868*t90899*2.0);
            } else if (rho_b[index] > cutoff_) {
                v_rho_a_gamma_aa_[index] = 0.0;
            } else {
                v_rho_a_gamma_aa_[index] = 0.0;
            } 

            //V_rho_a_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_a_gamma_ab_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_a_gamma_ab_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_a_gamma_ab_[index] = 0.0;
            } else {
                v_rho_a_gamma_ab_[index] = 0.0;
            } 

            //V_rho_a_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t87598 = 1.0/pow(rho_a[index],1.0/3.0);
                double t87599 = c*t87598;
                double t87600 = sqrt(t87599);
                double t87601 = pow(t87599,3.0/2.0);
                double t87602 = c*c;
                double t87603 = 1.0/pow(rho_a[index],2.0/3.0);
                double t87604 = 1.0/c0p;
                double t87605 = b1p*t87600;
                double t87606 = b3p*t87601;
                double t87607 = b4p*t87602*t87603;
                double t87608 = b2p*c*t87598;
                double t87609 = t87605+t87606+t87607+t87608;
                double t87610 = 1.0/t87609;
                double t87611 = t87610*t87604*(1.0/2.0);
                double t87612 = t87611+1.0;
                double t87613 = log(t87612);
                double t87614 = a1p*c*t87598;
                double t87615 = t87614+1.0;
                double t87616 = pow(2.0,1.0/3.0);
                double t87617 = t87616*2.0;
                double t87618 = t87617-2.0;
                double t87619 = two_13*2.0;
                double t87620 = t87619-2.0;
                double t87621 = 1.0/t87620;
                double t87622 = 1.0/c0f;
                double t87623 = 1.0/pow(rho_b[index],1.0/3.0);
                double t87624 = c*t87623;
                double t87625 = sqrt(t87624);
                double t87626 = pow(t87624,3.0/2.0);
                double t87627 = 1.0/pow(rho_b[index],2.0/3.0);
                double t87628 = b1p*t87625;
                double t87629 = b3p*t87626;
                double t87630 = b4p*t87602*t87627;
                double t87631 = b2p*c*t87623;
                double t87632 = t87630+t87631+t87628+t87629;
                double t87633 = 1.0/t87632;
                double t87634 = t87604*t87633*(1.0/2.0);
                double t87635 = t87634+1.0;
                double t87636 = log(t87635);
                double t87637 = a1p*c*t87623;
                double t87638 = t87637+1.0;
                double t87639 = c0p*t87636*t87638*2.0;
                double t87640 = rho_a[index]+rho_b[index];
                double t87641 = 1.0/pow(t87640,1.0/3.0);
                double t87642 = c*t87641;
                double t87643 = sqrt(t87642);
                double t87644 = pow(t87642,3.0/2.0);
                double t87645 = 1.0/pow(t87640,2.0/3.0);
                double t87646 = b1p*t87643;
                double t87647 = b3p*t87644;
                double t87648 = b4p*t87602*t87645;
                double t87649 = b2p*c*t87641;
                double t87650 = t87646+t87647+t87648+t87649;
                double t87651 = 1.0/t87650;
                double t87652 = t87604*t87651*(1.0/2.0);
                double t87653 = t87652+1.0;
                double t87654 = log(t87653);
                double t87655 = a1p*c*t87641;
                double t87656 = t87655+1.0;
                double t87657 = c0p*t87654*t87656*2.0;
                double t87658 = rho_a[index]-rho_b[index];
                double t87659 = t87658*t87658;
                double t87660 = 1.0/t87640;
                double t87661 = t87660*t87658;
                double t87662 = 1.0/(t87640*t87640*t87640*t87640);
                double t87663 = t87659*t87659;
                double t87664 = t87661+1.0;
                double t87665 = pow(t87664,4.0/3.0);
                double t87666 = -t87661+1.0;
                double t87667 = pow(t87666,4.0/3.0);
                double t87668 = t87665+t87667-2.0;
                double t87669 = gcab*gcab;
                double t87670 = 1.0/pow(rho_a[index],1.1E1/3.0);
                double t87671 = 1.0/pow(rho_b[index],8.0/3.0);
                double t87672 = 1.0/pow(rho_a[index],8.0/3.0);
                double t87673 = gamma_aa[index]*t87672*(1.0/2.0);
                double t87674 = gamma_bb[index]*t87671*(1.0/2.0);
                double t87675 = t87673+t87674;
                double t87676 = t87675*t87675;
                double t87677 = t87676*t87669*3.0;
                double t87678 = gcab*t87675*t87676*t87669;
                double t87679 = gcab*t87675*3.0;
                double t87680 = t87677+t87678+t87679+1.0;
                double t87681 = 1.0/(t87680*t87680);
                double t87682 = gamma_aa[index]*gcab*t87670*(8.0/3.0);
                double t87683 = gamma_aa[index]*t87670*t87675*t87669*(8.0/3.0);
                double t87684 = t87682+t87683;
                double t87685 = t87676*t87669;
                double t87686 = gcab*t87675*2.0;
                double t87687 = t87685+t87686+1.0;
                double t87688 = gamma_aa[index]*gcab*t87670*4.0;
                double t87689 = gamma_aa[index]*gcab*t87670*t87676*t87669*4.0;
                double t87690 = gamma_aa[index]*t87670*t87675*t87669*8.0;
                double t87691 = t87690+t87688+t87689;
                double t87692 = gcab*t87671;
                double t87693 = t87671*t87675*t87669;
                double t87694 = t87692+t87693;
                double t87695 = 1.0/(t87687*t87687);
                double t87696 = gcab*t87675;
                double t87697 = t87696+1.0;
                double t87698 = gcab*t87671*(3.0/2.0);
                double t87699 = t87671*t87675*t87669*3.0;
                double t87700 = gcab*t87671*t87676*t87669*(3.0/2.0);
                double t87701 = t87700+t87698+t87699;
                double t87702 = c0p*t87613*t87615*2.0;
                double t87703 = 1.0/(t87697*t87697);
                double t87704 = 1.0/t87687;
                double t87705 = 1.0/t87680;
                double t87706 = 1.0/pow(t87640,4.0/3.0);
                double t87707 = b1f*t87643;
                double t87708 = b3f*t87644;
                double t87709 = b4f*t87602*t87645;
                double t87710 = b2f*c*t87641;
                double t87711 = t87710+t87707+t87708+t87709;
                double t87712 = 1.0/t87711;
                double t87713 = t87622*t87712*(1.0/2.0);
                double t87714 = t87713+1.0;
                double t87715 = log(t87714);
                double t87716 = a1f*c*t87641;
                double t87717 = t87716+1.0;
                double t87719 = c0f*t87715*t87717*2.0;
                double t87718 = -t87719+t87657;
                double t87720 = 1.0/(t87640*t87640);
                double t87748 = t87720*t87658;
                double t87721 = t87660-t87748;
                double t87722 = t87719-t87657;
                double t87723 = 1.0/pow(t87640,5.0/3.0);
                double t87724 = 1.0/sqrt(t87642);
                double t87725 = 1.0/t87653;
                double t87726 = 1.0/(t87650*t87650);
                double t87727 = b4p*t87602*t87723*(2.0/3.0);
                double t87728 = b2p*c*t87706*(1.0/3.0);
                double t87729 = b1p*c*t87706*t87724*(1.0/6.0);
                double t87730 = b3p*c*t87643*t87706*(1.0/2.0);
                double t87731 = t87730+t87727+t87728+t87729;
                double t87732 = t87731*t87725*t87726*t87656;
                double t87733 = 1.0/d2fz0;
                double t87734 = 1.0/Aa;
                double t87735 = b1a*t87643;
                double t87736 = b3a*t87644;
                double t87737 = b4a*t87602*t87645;
                double t87738 = b2a*c*t87641;
                double t87739 = t87735+t87736+t87737+t87738;
                double t87740 = 1.0/t87739;
                double t87741 = t87740*t87734*(1.0/2.0);
                double t87742 = t87741+1.0;
                double t87743 = log(t87742);
                double t87744 = a1a*c*t87641;
                double t87745 = t87744+1.0;
                double t87746 = 1.0/(t87640*t87640*t87640*t87640*t87640);
                double t87747 = pow(t87664,1.0/3.0);
                double t87749 = t87721*t87747*(4.0/3.0);
                double t87750 = pow(t87666,1.0/3.0);
                double t87751 = t87749-t87721*t87750*(4.0/3.0);
                double t87752 = t87662*t87663;
                double t87753 = t87752-1.0;
                double t87754 = a1f*c*t87598;
                double t87755 = t87754+1.0;
                double t87756 = b1f*t87600;
                double t87757 = b3f*t87601;
                double t87758 = b4f*t87602*t87603;
                double t87759 = b2f*c*t87598;
                double t87760 = t87756+t87757+t87758+t87759;
                double t87761 = 1.0/t87760;
                double t87762 = t87622*t87761*(1.0/2.0);
                double t87763 = t87762+1.0;
                double t87764 = 1.0/pow(rho_a[index],4.0/3.0);
                double t87765 = 1.0/pow(rho_a[index],5.0/3.0);
                double t87766 = 1.0/sqrt(t87599);
                double t87767 = log(t87763);
                double t87768 = 1.0/t87612;
                double t87769 = 1.0/(t87609*t87609);
                double t87770 = b4p*t87602*t87765*(2.0/3.0);
                double t87771 = b2p*c*t87764*(1.0/3.0);
                double t87772 = b1p*c*t87764*t87766*(1.0/6.0);
                double t87773 = b3p*c*t87600*t87764*(1.0/2.0);
                double t87774 = t87770+t87771+t87772+t87773;
                double t87775 = t87615*t87774*t87768*t87769;
                double t87776 = Aa*t87621*t87733*t87743*t87753*t87745*t87668*2.0;
                double t87777 = t87702-c0f*t87755*t87767*2.0;
                v_rho_a_gamma_bb_[index] = -((ccab1*gcab*t87671*(1.0/2.0))/t87697-ccab1*t87703*t87671*t87675*t87669* \
                   (1.0/2.0)+ccab2*t87704*t87671*t87675*t87669-ccab2*t87676*t87694*t87695*t87669+ccab3*gcab*t87705*t87671* \
                   t87676*t87669*(3.0/2.0)-ccab3*gcab*t87701*t87681*t87675*t87676*t87669)*(-t87702+t87657+t87776+rho_a[index]* \
                   (-t87775+t87621*t87618*(t87775-(1.0/(t87760*t87760)*t87755*(b2f*c*t87764*(1.0/3.0)+b4f*t87602*t87765* \
                   (2.0/3.0)+b1f*c*t87764*t87766*(1.0/6.0)+b3f*c*t87600*t87764*(1.0/2.0)))/t87763+a1f*c*c0f*t87764*t87767* \
                   (2.0/3.0)-a1p*c*c0p*t87613*t87764*(2.0/3.0))+a1p*c*c0p*t87613*t87764*(2.0/3.0))-t87640*(-t87732+t87621* \
                   t87662*t87663*t87668*(t87732-(1.0/(t87711*t87711)*t87717*(b2f*c*t87706*(1.0/3.0)+b4f*t87602*t87723* \
                   (2.0/3.0)+b1f*c*t87706*t87724*(1.0/6.0)+b3f*c*t87643*t87706*(1.0/2.0)))/t87714+a1f*c*c0f*t87706*t87715* \
                   (2.0/3.0)-a1p*c*c0p*t87706*t87654*(2.0/3.0))+a1p*c*c0p*t87706*t87654*(2.0/3.0)-t87621*t87722*t87751* \
                   t87662*t87663+t87621*t87722*t87663*t87746*t87668*4.0+t87621*t87662*t87718*t87658*t87659*t87668*4.0+ \
                   Aa*t87621*t87733*t87743*t87745*t87668*(t87663*t87746*4.0-t87662*t87658*t87659*4.0)*2.0-Aa*t87621*t87733* \
                   t87751*t87743*t87753*t87745*2.0-(t87621*t87733*t87753*t87745*1.0/(t87739*t87739)*t87668*(b2a*c*t87706* \
                   (1.0/3.0)+b4a*t87602*t87723*(2.0/3.0)+b1a*c*t87706*t87724*(1.0/6.0)+b3a*c*t87643*t87706*(1.0/2.0)) \
                   )/t87742+Aa*a1a*c*t87621*t87706*t87733*t87743*t87753*t87668*(2.0/3.0))+t87621*t87618*t87777+t87621* \
                   t87722*t87662*t87663*t87668)+(rho_a[index]*(t87702-t87621*t87618*t87777)+rho_b[index]*(t87639-t87621* \
                   t87618*(t87639-c0f*log((t87622*(1.0/2.0))/(b1f*t87625+b3f*t87626+b2f*c*t87623+b4f*t87602*t87627)+1.0) \
                   *(a1f*c*t87623+1.0)*2.0))-t87640*(t87657+t87776-t87621*t87662*t87663*t87718*t87668))*(ccab2*t87671* \
                   t87675*t87684*t87695*t87669-ccab2*t87684*t87676*t87694*t87669*1.0/(t87687*t87687*t87687)*2.0+ccab1* \
                   gamma_aa[index]*t87703*t87670*t87671*t87669*(4.0/3.0)-ccab2*gamma_aa[index]*t87704*t87670*t87671*t87669* \
                   (4.0/3.0)+ccab2*gamma_aa[index]*t87670*t87675*t87694*t87695*t87669*(8.0/3.0)+ccab3*gcab*t87671*t87681* \
                   t87691*t87676*t87669*(3.0/2.0)+ccab3*gcab*t87681*t87675*t87676*t87669*(gamma_aa[index]*t87670*t87671* \
                   t87669*4.0+gamma_aa[index]*gcab*t87670*t87671*t87675*t87669*4.0)+ccab2*gamma_aa[index]*t87670*t87671* \
                   t87676*t87695*(t87669*t87669)*(4.0/3.0)-ccab1*gamma_aa[index]*gcab*t87670*t87671*t87675*t87669*1.0/ \
                   (t87697*t87697*t87697)*(4.0/3.0)-ccab3*gcab*t87701*1.0/(t87680*t87680*t87680)*t87691*t87675*t87676* \
                   t87669*2.0+ccab3*gamma_aa[index]*gcab*t87701*t87670*t87681*t87676*t87669*4.0-ccab3*gamma_aa[index]* \
                   gcab*t87705*t87670*t87671*t87675*t87669*4.0);
            } else if (rho_a[index] > cutoff_) {
                v_rho_a_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_a_gamma_bb_[index] = 0.0;
            } else {
                v_rho_a_gamma_bb_[index] = 0.0;
            } 

            //V_rho_b_gamma_aa
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t87779 = 1.0/pow(rho_a[index],1.0/3.0);
                double t87780 = c*t87779;
                double t87781 = sqrt(t87780);
                double t87782 = pow(t87780,3.0/2.0);
                double t87783 = c*c;
                double t87784 = 1.0/pow(rho_a[index],2.0/3.0);
                double t87785 = 1.0/c0p;
                double t87786 = b1p*t87781;
                double t87787 = b3p*t87782;
                double t87788 = b4p*t87783*t87784;
                double t87789 = b2p*c*t87779;
                double t87790 = t87786+t87787+t87788+t87789;
                double t87791 = 1.0/t87790;
                double t87792 = t87791*t87785*(1.0/2.0);
                double t87793 = t87792+1.0;
                double t87794 = log(t87793);
                double t87795 = a1p*c*t87779;
                double t87796 = t87795+1.0;
                double t87797 = pow(2.0,1.0/3.0);
                double t87798 = t87797*2.0;
                double t87799 = t87798-2.0;
                double t87800 = two_13*2.0;
                double t87801 = t87800-2.0;
                double t87802 = 1.0/t87801;
                double t87803 = 1.0/c0f;
                double t87804 = 1.0/pow(rho_b[index],1.0/3.0);
                double t87805 = c*t87804;
                double t87806 = sqrt(t87805);
                double t87807 = pow(t87805,3.0/2.0);
                double t87808 = 1.0/pow(rho_b[index],2.0/3.0);
                double t87809 = b1p*t87806;
                double t87810 = b3p*t87807;
                double t87811 = b4p*t87808*t87783;
                double t87812 = b2p*c*t87804;
                double t87813 = t87810+t87811+t87812+t87809;
                double t87814 = 1.0/t87813;
                double t87815 = t87814*t87785*(1.0/2.0);
                double t87816 = t87815+1.0;
                double t87817 = log(t87816);
                double t87818 = a1p*c*t87804;
                double t87819 = t87818+1.0;
                double t87820 = c0p*t87817*t87819*2.0;
                double t87821 = rho_a[index]+rho_b[index];
                double t87822 = 1.0/pow(t87821,1.0/3.0);
                double t87823 = c*t87822;
                double t87824 = sqrt(t87823);
                double t87825 = pow(t87823,3.0/2.0);
                double t87826 = 1.0/pow(t87821,2.0/3.0);
                double t87827 = b1p*t87824;
                double t87828 = b3p*t87825;
                double t87829 = b4p*t87826*t87783;
                double t87830 = b2p*c*t87822;
                double t87831 = t87830+t87827+t87828+t87829;
                double t87832 = 1.0/t87831;
                double t87833 = t87832*t87785*(1.0/2.0);
                double t87834 = t87833+1.0;
                double t87835 = log(t87834);
                double t87836 = a1p*c*t87822;
                double t87837 = t87836+1.0;
                double t87838 = c0p*t87835*t87837*2.0;
                double t87839 = rho_a[index]-rho_b[index];
                double t87840 = t87839*t87839;
                double t87841 = 1.0/t87821;
                double t87842 = t87841*t87839;
                double t87843 = 1.0/(t87821*t87821*t87821*t87821);
                double t87844 = t87840*t87840;
                double t87845 = t87842+1.0;
                double t87846 = pow(t87845,4.0/3.0);
                double t87847 = -t87842+1.0;
                double t87848 = pow(t87847,4.0/3.0);
                double t87849 = t87846+t87848-2.0;
                double t87850 = gcab*gcab;
                double t87851 = 1.0/pow(rho_a[index],8.0/3.0);
                double t87852 = 1.0/pow(rho_b[index],1.1E1/3.0);
                double t87853 = gamma_aa[index]*t87851*(1.0/2.0);
                double t87854 = 1.0/pow(rho_b[index],8.0/3.0);
                double t87855 = gamma_bb[index]*t87854*(1.0/2.0);
                double t87856 = t87853+t87855;
                double t87857 = t87856*t87856;
                double t87858 = t87850*t87857*3.0;
                double t87859 = gcab*t87850*t87856*t87857;
                double t87860 = gcab*t87856*3.0;
                double t87861 = t87860+t87858+t87859+1.0;
                double t87862 = 1.0/(t87861*t87861);
                double t87863 = gamma_bb[index]*gcab*t87852*(8.0/3.0);
                double t87864 = gamma_bb[index]*t87850*t87852*t87856*(8.0/3.0);
                double t87865 = t87863+t87864;
                double t87866 = t87850*t87857;
                double t87867 = gcab*t87856*2.0;
                double t87868 = t87866+t87867+1.0;
                double t87869 = gamma_bb[index]*gcab*t87852*4.0;
                double t87870 = gamma_bb[index]*gcab*t87850*t87852*t87857*4.0;
                double t87871 = gamma_bb[index]*t87850*t87852*t87856*8.0;
                double t87872 = t87870+t87871+t87869;
                double t87873 = gcab*t87851;
                double t87874 = t87850*t87851*t87856;
                double t87875 = t87873+t87874;
                double t87876 = 1.0/(t87868*t87868);
                double t87877 = gcab*t87856;
                double t87878 = t87877+1.0;
                double t87879 = gcab*t87851*(3.0/2.0);
                double t87880 = t87850*t87851*t87856*3.0;
                double t87881 = gcab*t87850*t87851*t87857*(3.0/2.0);
                double t87882 = t87880+t87881+t87879;
                double t87883 = c0p*t87794*t87796*2.0;
                double t87884 = 1.0/(t87878*t87878);
                double t87885 = 1.0/t87868;
                double t87886 = 1.0/t87861;
                double t87887 = 1.0/pow(t87821,4.0/3.0);
                double t87888 = b1f*t87824;
                double t87889 = b3f*t87825;
                double t87890 = b4f*t87826*t87783;
                double t87891 = b2f*c*t87822;
                double t87892 = t87890+t87891+t87888+t87889;
                double t87893 = 1.0/t87892;
                double t87894 = t87803*t87893*(1.0/2.0);
                double t87895 = t87894+1.0;
                double t87896 = log(t87895);
                double t87897 = a1f*c*t87822;
                double t87898 = t87897+1.0;
                double t87900 = c0f*t87896*t87898*2.0;
                double t87899 = -t87900+t87838;
                double t87901 = 1.0/(t87821*t87821);
                double t87902 = t87901*t87839;
                double t87903 = t87902+t87841;
                double t87904 = t87900-t87838;
                double t87905 = 1.0/pow(t87821,5.0/3.0);
                double t87906 = 1.0/sqrt(t87823);
                double t87907 = 1.0/t87834;
                double t87908 = 1.0/(t87831*t87831);
                double t87909 = b4p*t87905*t87783*(2.0/3.0);
                double t87910 = b2p*c*t87887*(1.0/3.0);
                double t87911 = b1p*c*t87906*t87887*(1.0/6.0);
                double t87912 = b3p*c*t87824*t87887*(1.0/2.0);
                double t87913 = t87910+t87911+t87912+t87909;
                double t87914 = 1.0/d2fz0;
                double t87915 = 1.0/Aa;
                double t87916 = b1a*t87824;
                double t87917 = b3a*t87825;
                double t87918 = b4a*t87826*t87783;
                double t87919 = b2a*c*t87822;
                double t87920 = t87916+t87917+t87918+t87919;
                double t87921 = 1.0/t87920;
                double t87922 = t87921*t87915*(1.0/2.0);
                double t87923 = t87922+1.0;
                double t87924 = log(t87923);
                double t87925 = a1a*c*t87822;
                double t87926 = t87925+1.0;
                double t87927 = 1.0/(t87821*t87821*t87821*t87821*t87821);
                double t87928 = pow(t87845,1.0/3.0);
                double t87929 = t87903*t87928*(4.0/3.0);
                double t87930 = pow(t87847,1.0/3.0);
                double t87931 = t87929-t87903*t87930*(4.0/3.0);
                double t87932 = t87843*t87844;
                double t87933 = t87932-1.0;
                double t87934 = a1f*c*t87804;
                double t87935 = t87934+1.0;
                double t87936 = b1f*t87806;
                double t87937 = b3f*t87807;
                double t87938 = b4f*t87808*t87783;
                double t87939 = b2f*c*t87804;
                double t87940 = t87936+t87937+t87938+t87939;
                double t87941 = 1.0/t87940;
                double t87942 = t87803*t87941*(1.0/2.0);
                double t87943 = t87942+1.0;
                double t87944 = 1.0/pow(rho_b[index],4.0/3.0);
                double t87945 = 1.0/pow(rho_b[index],5.0/3.0);
                double t87946 = 1.0/sqrt(t87805);
                double t87947 = log(t87943);
                double t87948 = 1.0/t87816;
                double t87949 = 1.0/(t87813*t87813);
                double t87950 = b4p*t87783*t87945*(2.0/3.0);
                double t87951 = b2p*c*t87944*(1.0/3.0);
                double t87952 = b1p*c*t87944*t87946*(1.0/6.0);
                double t87953 = b3p*c*t87806*t87944*(1.0/2.0);
                double t87954 = t87950+t87951+t87952+t87953;
                double t87955 = t87819*t87954*t87948*t87949;
                double t87956 = t87820-c0f*t87935*t87947*2.0;
                double t87957 = Aa*t87802*t87914*t87924*t87933*t87926*t87849*2.0;
                double t87958 = a1p*c*c0p*t87835*t87887*(2.0/3.0);
                v_rho_b_gamma_aa_[index] = -((ccab1*gcab*t87851*(1.0/2.0))/t87878-ccab1*t87850*t87851*t87856*t87884* \
                   (1.0/2.0)+ccab2*t87850*t87851*t87856*t87885-ccab2*t87850*t87857*t87875*t87876+ccab3*gcab*t87850*t87851* \
                   t87857*t87886*(3.0/2.0)-ccab3*gcab*t87850*t87862*t87882*t87856*t87857)*(-t87820+t87838+t87957+rho_b[index]* \
                   (-t87955+t87802*t87799*(t87955-(1.0/(t87940*t87940)*t87935*(b2f*c*t87944*(1.0/3.0)+b4f*t87783*t87945* \
                   (2.0/3.0)+b1f*c*t87944*t87946*(1.0/6.0)+b3f*c*t87806*t87944*(1.0/2.0)))/t87943+a1f*c*c0f*t87944*t87947* \
                   (2.0/3.0)-a1p*c*c0p*t87817*t87944*(2.0/3.0))+a1p*c*c0p*t87817*t87944*(2.0/3.0))-t87821*(t87958-t87913* \
                   t87907*t87908*t87837+t87802*t87904*t87931*t87843*t87844+t87802*t87904*t87844*t87927*t87849*4.0-t87802* \
                   t87843*t87844*t87849*(t87958-t87913*t87907*t87908*t87837+(1.0/(t87892*t87892)*t87898*(b2f*c*t87887* \
                   (1.0/3.0)+b4f*t87905*t87783*(2.0/3.0)+b1f*c*t87906*t87887*(1.0/6.0)+b3f*c*t87824*t87887*(1.0/2.0)) \
                   )/t87895-a1f*c*c0f*t87887*t87896*(2.0/3.0))-t87802*t87840*t87843*t87839*t87849*t87899*4.0+Aa*t87802* \
                   t87914*t87924*t87926*t87849*(t87844*t87927*4.0+t87840*t87843*t87839*4.0)*2.0+Aa*t87802*t87931*t87914* \
                   t87924*t87933*t87926*2.0-(t87802*1.0/(t87920*t87920)*t87914*t87933*t87926*t87849*(b2a*c*t87887*(1.0/ \
                   3.0)+b4a*t87905*t87783*(2.0/3.0)+b1a*c*t87906*t87887*(1.0/6.0)+b3a*c*t87824*t87887*(1.0/2.0)))/t87923+ \
                   Aa*a1a*c*t87802*t87914*t87924*t87933*t87849*t87887*(2.0/3.0))+t87802*t87956*t87799+t87802*t87904*t87843* \
                   t87844*t87849)+(rho_b[index]*(t87820-t87802*t87956*t87799)+rho_a[index]*(t87883-t87802*t87799*(t87883- \
                   c0f*log((t87803*(1.0/2.0))/(b1f*t87781+b3f*t87782+b2f*c*t87779+b4f*t87783*t87784)+1.0)*(a1f*c*t87779+ \
                   1.0)*2.0))-t87821*(t87838+t87957-t87802*t87843*t87844*t87849*t87899))*(ccab2*t87850*t87851*t87856* \
                   t87865*t87876-ccab2*t87850*t87865*t87857*t87875*1.0/(t87868*t87868*t87868)*2.0+ccab1*gamma_bb[index]* \
                   t87850*t87851*t87852*t87884*(4.0/3.0)-ccab2*gamma_bb[index]*t87850*t87851*t87852*t87885*(4.0/3.0)+ \
                   ccab2*gamma_bb[index]*t87850*t87852*t87856*t87875*t87876*(8.0/3.0)+ccab3*gcab*t87850*t87851*t87862* \
                   t87872*t87857*(3.0/2.0)+ccab3*gcab*t87850*t87862*t87856*t87857*(gamma_bb[index]*t87850*t87851*t87852* \
                   4.0+gamma_bb[index]*gcab*t87850*t87851*t87852*t87856*4.0)+ccab2*gamma_bb[index]*(t87850*t87850)*t87851* \
                   t87852*t87857*t87876*(4.0/3.0)-ccab1*gamma_bb[index]*gcab*t87850*t87851*t87852*t87856*1.0/(t87878* \
                   t87878*t87878)*(4.0/3.0)-ccab3*gcab*t87850*1.0/(t87861*t87861*t87861)*t87872*t87882*t87856*t87857* \
                   2.0+ccab3*gamma_bb[index]*gcab*t87850*t87852*t87862*t87882*t87857*4.0-ccab3*gamma_bb[index]*gcab*t87850* \
                   t87851*t87852*t87856*t87886*4.0);
            } else if (rho_a[index] > cutoff_) {
                v_rho_b_gamma_aa_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_b_gamma_aa_[index] = 0.0;
            } else {
                v_rho_b_gamma_aa_[index] = 0.0;
            } 

            //V_rho_b_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_b_gamma_ab_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_b_gamma_ab_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_b_gamma_ab_[index] = 0.0;
            } else {
                v_rho_b_gamma_ab_[index] = 0.0;
            } 

            //V_rho_b_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t87961 = 1.0/pow(rho_a[index],1.0/3.0);
                double t87962 = c*t87961;
                double t87963 = sqrt(t87962);
                double t87964 = pow(t87962,3.0/2.0);
                double t87965 = c*c;
                double t87966 = 1.0/pow(rho_a[index],2.0/3.0);
                double t87967 = 1.0/c0p;
                double t87968 = b1p*t87963;
                double t87969 = b3p*t87964;
                double t87970 = b4p*t87965*t87966;
                double t87971 = b2p*c*t87961;
                double t87972 = t87970+t87971+t87968+t87969;
                double t87973 = 1.0/t87972;
                double t87974 = t87973*t87967*(1.0/2.0);
                double t87975 = t87974+1.0;
                double t87976 = log(t87975);
                double t87977 = a1p*c*t87961;
                double t87978 = t87977+1.0;
                double t87979 = pow(2.0,1.0/3.0);
                double t87980 = t87979*2.0;
                double t87981 = t87980-2.0;
                double t87982 = two_13*2.0;
                double t87983 = t87982-2.0;
                double t87984 = 1.0/t87983;
                double t87985 = 1.0/c0f;
                double t87986 = 1.0/pow(rho_b[index],1.0/3.0);
                double t87987 = c*t87986;
                double t87988 = sqrt(t87987);
                double t87989 = pow(t87987,3.0/2.0);
                double t87990 = 1.0/pow(rho_b[index],2.0/3.0);
                double t87991 = b1p*t87988;
                double t87992 = b3p*t87989;
                double t87993 = b4p*t87990*t87965;
                double t87994 = b2p*c*t87986;
                double t87995 = t87991+t87992+t87993+t87994;
                double t87996 = 1.0/t87995;
                double t87997 = t87967*t87996*(1.0/2.0);
                double t87998 = t87997+1.0;
                double t87999 = log(t87998);
                double t88000 = a1p*c*t87986;
                double t88001 = t88000+1.0;
                double t88002 = c0p*t87999*t88001*2.0;
                double t88003 = rho_a[index]+rho_b[index];
                double t88004 = 1.0/pow(t88003,1.0/3.0);
                double t88005 = c*t88004;
                double t88006 = sqrt(t88005);
                double t88007 = pow(t88005,3.0/2.0);
                double t88008 = 1.0/pow(t88003,2.0/3.0);
                double t88009 = b1p*t88006;
                double t88010 = b3p*t88007;
                double t88011 = b4p*t87965*t88008;
                double t88012 = b2p*c*t88004;
                double t88013 = t88010+t88011+t88012+t88009;
                double t88014 = 1.0/t88013;
                double t88015 = t87967*t88014*(1.0/2.0);
                double t88016 = t88015+1.0;
                double t88017 = log(t88016);
                double t88018 = a1p*c*t88004;
                double t88019 = t88018+1.0;
                double t88020 = c0p*t88017*t88019*2.0;
                double t88021 = rho_a[index]-rho_b[index];
                double t88022 = t88021*t88021;
                double t88023 = 1.0/t88003;
                double t88024 = t88021*t88023;
                double t88025 = 1.0/(t88003*t88003*t88003*t88003);
                double t88026 = t88022*t88022;
                double t88027 = t88024+1.0;
                double t88028 = pow(t88027,4.0/3.0);
                double t88029 = -t88024+1.0;
                double t88030 = pow(t88029,4.0/3.0);
                double t88031 = t88030+t88028-2.0;
                double t88032 = 1.0/pow(rho_b[index],1.1E1/3.0);
                double t88033 = 1.0/pow(rho_a[index],8.0/3.0);
                double t88034 = gamma_aa[index]*t88033*(1.0/2.0);
                double t88035 = 1.0/pow(rho_b[index],8.0/3.0);
                double t88036 = gamma_bb[index]*t88035*(1.0/2.0);
                double t88037 = t88034+t88036;
                double t88038 = gcab*t88037;
                double t88039 = t88038+1.0;
                double t88040 = gcab*gcab;
                double t88041 = t88037*t88037;
                double t88042 = 1.0/pow(rho_b[index],1.9E1/3.0);
                double t88043 = t88040*t88041;
                double t88044 = gcab*t88037*2.0;
                double t88045 = t88043+t88044+1.0;
                double t88046 = t88040*t88041*3.0;
                double t88047 = gcab*t88040*t88041*t88037;
                double t88048 = gcab*t88037*3.0;
                double t88049 = t88046+t88047+t88048+1.0;
                double t88050 = 1.0/(t88039*t88039);
                double t88051 = 1.0/t88045;
                double t88052 = 1.0/(t88049*t88049);
                double t88053 = 1.0/(t88045*t88045);
                double t88054 = gamma_bb[index]*gcab*t88032*(8.0/3.0);
                double t88055 = gamma_bb[index]*t88040*t88032*t88037*(8.0/3.0);
                double t88056 = t88054+t88055;
                double t88057 = 1.0/t88049;
                double t88058 = gamma_bb[index]*gcab*t88032*4.0;
                double t88059 = gamma_bb[index]*gcab*t88040*t88032*t88041*4.0;
                double t88060 = gamma_bb[index]*t88040*t88032*t88037*8.0;
                double t88061 = t88060+t88058+t88059;
                double t88062 = gcab*t88035;
                double t88063 = t88040*t88035*t88037;
                double t88064 = t88062+t88063;
                double t88065 = gcab*t88035*(3.0/2.0);
                double t88066 = t88040*t88035*t88037*3.0;
                double t88067 = gcab*t88040*t88041*t88035*(3.0/2.0);
                double t88068 = t88065+t88066+t88067;
                double t88069 = gx*gx;
                double t88070 = 1.0/pow(rho_b[index],1.6E1/3.0);
                double t88071 = gamma_bb[index]*gamma_bb[index];
                double t88072 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]);
                double t88073 = gamma_bb[index]*gx*t88035;
                double t88074 = t88073+1.0;
                double t88075 = gamma_bb[index]*gx*t88035*3.0;
                double t88076 = gamma_bb[index]*gx*t88071*t88072*t88069;
                double t88077 = t88070*t88071*t88069*3.0;
                double t88078 = t88075+t88076+t88077+1.0;
                double t88079 = gamma_bb[index]*gx*t88035*2.0;
                double t88080 = t88070*t88071*t88069;
                double t88081 = t88080+t88079+1.0;
                double t88082 = pow(rho_b[index],5.0/3.0);
                double t88083 = pow(rho_b[index],2.0/3.0);
                double t88084 = 1.0/tau_b[index];
                double t88085 = tau_b[index]*1.0E20;
                double t88088 = C_k*t88082;
                double t88086 = t88085-t88088;
                double t88087 = tau_a[index]*1.0E20;
                double t88089 = ( (t88086 > 0.0) ?  1.0 : 0.0 ) ;
                double t88090 = C_k*C_k;
                double t88091 = pow(rho_b[index],7.0/3.0);
                double t88092 = 0.0 ;
                double t88093 = C_k*t88083*t88084*t88089*(5.0/3.0);
                double t88094 = -t88087+t88088;
                double t88095 = ( (t88094 > 0.0) ?  1.0 : 0.0 ) ;
                double t88096 = t88095*1.0E20;
                double t88097 = C_k*t88082*t88084*t88089;
                double t88098 = t88096+t88097+1.0;
                double t88099 = t88087-t88088;
                double t88100 = 0.0 ;
                double t88101 = C_k*t88100*t88083*(5.0E20/3.0);
                double t88104 = t88090*t88091*t88092*t88084*(5.0/3.0);
                double t88102 = t88101-t88104+t88093;
                double t88103 = t88096+t88097-1.0;
                double t88105 = t88103*t88103;
                double t88106 = t88105*t88105;
                double t88107 = 1.0/t88098;
                double t88108 = 1.0/(t88098*t88098*t88098);
                double t88109 = 1.0/(t88098*t88098*t88098*t88098*t88098);
                double t88110 = 1.0/t88074;
                double t88111 = 1.0/t88081;
                double t88112 = 1.0/t88078;
                double t88113 = 1.0/(t88074*t88074);
                double t88114 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]*rho_b[index]);
                double t88115 = 1.0/(t88078*t88078);
                double t88116 = 1.0/(t88081*t88081);
                double t88117 = gx*t88035*3.0;
                double t88118 = gamma_bb[index]*t88070*t88069*6.0;
                double t88119 = gx*t88071*t88072*t88069*3.0;
                double t88120 = t88117+t88118+t88119;
                double t88121 = gx*t88035*2.0;
                double t88122 = gamma_bb[index]*t88070*t88069*2.0;
                double t88123 = t88121+t88122;
                double t88124 = gamma_bb[index]*gx*t88032*(1.6E1/3.0);
                double t88125 = t88042*t88071*t88069*(1.6E1/3.0);
                double t88126 = t88124+t88125;
                double t88127 = gamma_bb[index]*gx*t88032*8.0;
                double t88128 = gamma_bb[index]*gx*t88114*t88071*t88069*8.0;
                double t88129 = t88042*t88071*t88069*1.6E1;
                double t88130 = t88127+t88128+t88129;
                double t88131 = 1.0/(t88074*t88074*t88074);
                double t88132 = gx*t88032*8.0;
                double t88133 = gamma_bb[index]*t88042*t88069*3.2E1;
                double t88134 = gx*t88114*t88071*t88069*2.4E1;
                double t88135 = t88132+t88133+t88134;
                double t88136 = gx*t88032*(1.6E1/3.0);
                double t88137 = gamma_bb[index]*t88042*t88069*(3.2E1/3.0);
                double t88138 = t88136+t88137;
                double t88139 = 1.0/(t88081*t88081*t88081);
                double t88140 = 1.0/(t88078*t88078*t88078);
                double t88141 = t88103*t88107;
                double t88142 = t88103*t88106*t88109;
                double t88143 = t88141+t88142-t88103*t88105*t88108*2.0;
                double t88144 = cxnl1*gx*t88110*t88035;
                double t88145 = cxnl2*gamma_bb[index]*t88111*t88070*t88069*2.0;
                double t88146 = cxnl3*gx*t88112*t88071*t88072*t88069*3.0;
                double t88147 = t88144+t88145+t88146-cxnl1*gamma_bb[index]*t88113*t88070*t88069-cxnl2*t88123*t88070* \
                   t88071*t88116*t88069-cxnl3*gamma_bb[index]*gx*t88120*t88115*t88071*t88072*t88069;
                double t88148 = b1f*t87988;
                double t88149 = b3f*t87989;
                double t88150 = b4f*t87990*t87965;
                double t88151 = b2f*c*t87986;
                double t88152 = t88150+t88151+t88148+t88149;
                double t88153 = 1.0/t88152;
                double t88154 = t87985*t88153*(1.0/2.0);
                double t88155 = t88154+1.0;
                double t88156 = log(t88155);
                double t88157 = a1f*c*t87986;
                double t88158 = t88157+1.0;
                double t88230 = c0f*t88156*t88158*2.0;
                double t88159 = t88002-t88230;
                double t88231 = t87981*t87984*t88159;
                double t88160 = t88002-t88231;
                double t88161 = gcaa*gcaa;
                double t88162 = gamma_bb[index]*gcaa*t88035;
                double t88163 = t88162+1.0;
                double t88164 = gamma_bb[index]*gcaa*t88035*3.0;
                double t88165 = gamma_bb[index]*gcaa*t88071*t88161*t88072;
                double t88166 = t88070*t88071*t88161*3.0;
                double t88167 = t88164+t88165+t88166+1.0;
                double t88168 = gamma_bb[index]*gcaa*t88035*2.0;
                double t88169 = t88070*t88071*t88161;
                double t88170 = t88168+t88169+1.0;
                double t88171 = 1.0/t88039;
                double t88172 = 1.0/pow(t88003,4.0/3.0);
                double t88173 = b1f*t88006;
                double t88174 = b3f*t88007;
                double t88175 = b4f*t87965*t88008;
                double t88176 = b2f*c*t88004;
                double t88177 = t88173+t88174+t88175+t88176;
                double t88178 = 1.0/t88177;
                double t88179 = t87985*t88178*(1.0/2.0);
                double t88180 = t88179+1.0;
                double t88181 = log(t88180);
                double t88182 = a1f*c*t88004;
                double t88183 = t88182+1.0;
                double t88185 = c0f*t88181*t88183*2.0;
                double t88184 = t88020-t88185;
                double t88186 = 1.0/(t88003*t88003);
                double t88187 = t88021*t88186;
                double t88188 = t88023+t88187;
                double t88189 = 1.0/pow(t88003,5.0/3.0);
                double t88190 = 1.0/sqrt(t88005);
                double t88191 = 1.0/t88016;
                double t88192 = 1.0/(t88013*t88013);
                double t88193 = b4p*t87965*t88189*(2.0/3.0);
                double t88194 = b2p*c*t88172*(1.0/3.0);
                double t88195 = b1p*c*t88172*t88190*(1.0/6.0);
                double t88196 = b3p*c*t88006*t88172*(1.0/2.0);
                double t88197 = t88193+t88194+t88195+t88196;
                double t88198 = 1.0/d2fz0;
                double t88199 = 1.0/Aa;
                double t88200 = b1a*t88006;
                double t88201 = b3a*t88007;
                double t88202 = b4a*t87965*t88008;
                double t88203 = b2a*c*t88004;
                double t88204 = t88200+t88201+t88202+t88203;
                double t88205 = 1.0/t88204;
                double t88206 = t88205*t88199*(1.0/2.0);
                double t88207 = t88206+1.0;
                double t88208 = log(t88207);
                double t88209 = a1a*c*t88004;
                double t88210 = t88209+1.0;
                double t88211 = 1.0/(t88003*t88003*t88003*t88003*t88003);
                double t88212 = pow(t88027,1.0/3.0);
                double t88213 = t88212*t88188*(4.0/3.0);
                double t88214 = pow(t88029,1.0/3.0);
                double t88215 = t88213-t88214*t88188*(4.0/3.0);
                double t88216 = t88025*t88026;
                double t88217 = t88216-1.0;
                double t88218 = t88019*t88191*t88192*t88197;
                double t88219 = 1.0/pow(rho_b[index],4.0/3.0);
                double t88220 = 1.0/pow(rho_b[index],5.0/3.0);
                double t88221 = 1.0/sqrt(t87987);
                double t88222 = 1.0/t87998;
                double t88223 = 1.0/(t87995*t87995);
                double t88224 = b4p*t87965*t88220*(2.0/3.0);
                double t88225 = b2p*c*t88219*(1.0/3.0);
                double t88226 = b1p*c*t88221*t88219*(1.0/6.0);
                double t88227 = b3p*c*t87988*t88219*(1.0/2.0);
                double t88228 = t88224+t88225+t88226+t88227;
                double t88229 = t88001*t88222*t88223*t88228;
                double t88232 = Aa*t87984*t88210*t88031*t88208*t88217*t88198*2.0;
                double t88233 = 1.0/t88163;
                double t88234 = 1.0/t88170;
                double t88235 = 1.0/t88167;
                double t88236 = 1.0/(t88163*t88163);
                double t88237 = 1.0/(t88167*t88167);
                double t88238 = 1.0/(t88170*t88170);
                double t88239 = gcaa*t88035*3.0;
                double t88240 = gamma_bb[index]*t88070*t88161*6.0;
                double t88241 = gcaa*t88071*t88161*t88072*3.0;
                double t88242 = t88240+t88241+t88239;
                double t88243 = gcaa*t88035*2.0;
                double t88244 = gamma_bb[index]*t88070*t88161*2.0;
                double t88245 = t88243+t88244;
                double t88246 = gamma_bb[index]*gcaa*t88032*(1.6E1/3.0);
                double t88247 = t88042*t88071*t88161*(1.6E1/3.0);
                double t88248 = t88246+t88247;
                double t88249 = gamma_bb[index]*gcaa*t88032*8.0;
                double t88250 = gamma_bb[index]*gcaa*t88114*t88071*t88161*8.0;
                double t88251 = t88042*t88071*t88161*1.6E1;
                double t88252 = t88250+t88251+t88249;
                double t88253 = 1.0/t88155;
                double t88254 = 1.0/(t88152*t88152);
                double t88255 = b4f*t87965*t88220*(2.0/3.0);
                double t88256 = b2f*c*t88219*(1.0/3.0);
                double t88257 = b1f*c*t88221*t88219*(1.0/6.0);
                double t88258 = b3f*c*t87988*t88219*(1.0/2.0);
                double t88259 = t88255+t88256+t88257+t88258;
                double t88260 = a1f*c*c0f*t88156*t88219*(2.0/3.0);
                double t88261 = a1p*c*c0p*t87999*t88219*(2.0/3.0);
                double t88262 = ccaa1*gcaa*t88035*t88233;
                double t88263 = ccaa2*gamma_bb[index]*t88070*t88161*t88234*2.0;
                double t88264 = ccaa3*gcaa*t88071*t88161*t88072*t88235*3.0;
                double t88265 = t88262+t88263+t88264-ccaa1*gamma_bb[index]*t88070*t88161*t88236-ccaa2*t88070*t88071* \
                   t88161*t88245*t88238-ccaa3*gamma_bb[index]*gcaa*t88071*t88161*t88242*t88072*t88237;
                v_rho_b_gamma_bb_[index] = -(X-1.0)*(c0*pow(rho_b[index],1.0/3.0)*(t88143*t88147+cx1*gx*t88110*t88035- \
                   cx1*gamma_bb[index]*t88113*t88070*t88069+cx2*gamma_bb[index]*t88111*t88070*t88069*2.0-cx2*t88123*t88070* \
                   t88071*t88116*t88069+cx3*gx*t88112*t88071*t88072*t88069*3.0-cx3*gamma_bb[index]*gx*t88120*t88115*t88071* \
                   t88072*t88069)*(4.0/3.0)+c0*pow(rho_b[index],4.0/3.0)*(t88147*(t88102*t88107-t88102*t88103*1.0/(t88098* \
                   t88098)-t88102*t88105*t88108*6.0+t88102*t88106*t88109*5.0+t88102*t88103*t88105*1.0/(t88098*t88098* \
                   t88098*t88098)*6.0-t88102*t88103*t88106*1.0/(t88098*t88098*t88098*t88098*t88098*t88098)*5.0)+t88143* \
                   (cxnl1*gx*t88110*t88032*(-8.0/3.0)-cxnl2*gamma_bb[index]*t88111*t88042*t88069*(3.2E1/3.0)+cxnl1*gamma_bb[index]* \
                   t88113*t88042*t88069*8.0+cxnl2*t88042*t88123*t88071*t88116*t88069*(1.6E1/3.0)+cxnl2*t88070*t88071* \
                   t88116*t88138*t88069+cxnl2*gamma_bb[index]*t88070*t88116*t88126*t88069*2.0-cxnl1*gx*t88131*t88114* \
                   t88071*t88069*(1.6E1/3.0)-cxnl3*gx*t88112*t88114*t88071*t88069*2.4E1+cxnl3*gx*t88130*t88115*t88071* \
                   t88072*t88069*3.0-cxnl2*t88123*t88070*t88071*t88126*t88139*t88069*2.0+cxnl3*gamma_bb[index]*gx*t88120* \
                   t88114*t88115*t88071*t88069*8.0+cxnl3*gamma_bb[index]*gx*t88115*t88071*t88072*t88135*t88069-cxnl3* \
                   gamma_bb[index]*gx*t88120*t88130*t88140*t88071*t88072*t88069*2.0)-cx1*gx*t88110*t88032*(8.0/3.0)+cx1* \
                   gamma_bb[index]*t88113*t88042*t88069*8.0-cx2*gamma_bb[index]*t88111*t88042*t88069*(3.2E1/3.0)+cx2* \
                   t88042*t88123*t88071*t88116*t88069*(1.6E1/3.0)+cx2*t88070*t88071*t88116*t88138*t88069+cx2*gamma_bb[index]* \
                   t88070*t88116*t88126*t88069*2.0-cx1*gx*t88131*t88114*t88071*t88069*(1.6E1/3.0)-cx3*gx*t88112*t88114* \
                   t88071*t88069*2.4E1+cx3*gx*t88130*t88115*t88071*t88072*t88069*3.0-cx2*t88123*t88070*t88071*t88126* \
                   t88139*t88069*2.0+cx3*gamma_bb[index]*gx*t88120*t88114*t88115*t88071*t88069*8.0+cx3*gamma_bb[index]* \
                   gx*t88115*t88071*t88072*t88135*t88069-cx3*gamma_bb[index]*gx*t88120*t88130*t88140*t88071*t88072*t88069* \
                   2.0))-(ccab1*gcab*t88035*t88171*(1.0/2.0)-ccab1*t88040*t88050*t88035*t88037*(1.0/2.0)-ccab2*t88040* \
                   t88041*t88053*t88064+ccab2*t88040*t88051*t88035*t88037+ccab3*gcab*t88040*t88041*t88035*t88057*(3.0/ \
                   2.0)-ccab3*gcab*t88040*t88041*t88052*t88037*t88068)*(-t88002+t88020+t88231+t88232+t88003*(t88218-t87984* \
                   t88031*t88025*t88026*(t88218-(t88183*1.0/(t88177*t88177)*(b2f*c*t88172*(1.0/3.0)+b4f*t87965*t88189* \
                   (2.0/3.0)+b1f*c*t88172*t88190*(1.0/6.0)+b3f*c*t88006*t88172*(1.0/2.0)))/t88180+a1f*c*c0f*t88172*t88181* \
                   (2.0/3.0)-a1p*c*c0p*t88017*t88172*(2.0/3.0))-a1p*c*c0p*t88017*t88172*(2.0/3.0)+t87984*t88031*t88211* \
                   t88026*t88184*4.0+t87984*t88025*t88026*t88215*t88184+t87984*t88021*t88022*t88031*t88025*t88184*4.0- \
                   Aa*t87984*t88210*t88031*t88208*t88198*(t88211*t88026*4.0+t88021*t88022*t88025*4.0)*2.0-Aa*t87984*t88210* \
                   t88215*t88208*t88217*t88198*2.0+(t87984*t88210*t88031*1.0/(t88204*t88204)*t88217*t88198*(b2a*c*t88172* \
                   (1.0/3.0)+b4a*t87965*t88189*(2.0/3.0)+b1a*c*t88172*t88190*(1.0/6.0)+b3a*c*t88006*t88172*(1.0/2.0)) \
                   )/t88207-Aa*a1a*c*t87984*t88031*t88172*t88208*t88217*t88198*(2.0/3.0))+rho_b[index]*(t88261-t88229+ \
                   t87981*t87984*(t88260+t88229-t88253*t88254*t88158*t88259-a1p*c*c0p*t87999*t88219*(2.0/3.0)))-t87984* \
                   t88031*t88025*t88026*t88184)-t88160*t88265+(-rho_b[index]*t88160+t88003*(t88020+t88232-t87984*t88031* \
                   t88025*t88026*t88184)+rho_a[index]*(t87981*t87984*(c0p*t87976*t87978*2.0-c0f*log((t87985*(1.0/2.0) \
                   )/(b1f*t87963+b3f*t87964+b2f*c*t87961+b4f*t87965*t87966)+1.0)*(a1f*c*t87961+1.0)*2.0)-c0p*t87976*t87978* \
                   2.0))*(ccab1*gcab*t88032*t88171*(4.0/3.0)-ccab2*t88040*t88041*t88053*(gcab*t88032*(8.0/3.0)+gamma_bb[index]* \
                   t88040*t88042*(4.0/3.0)+t88040*t88032*t88037*(8.0/3.0))-ccab1*gamma_bb[index]*t88040*t88050*t88042* \
                   (4.0/3.0)+ccab2*gamma_bb[index]*t88040*t88042*t88051*(4.0/3.0)-ccab1*t88040*t88032*t88050*t88037*(4.0/ \
                   3.0)+ccab2*t88040*t88032*t88051*t88037*(8.0/3.0)-ccab2*t88040*t88035*t88053*t88037*t88056+ccab2*t88040* \
                   t88041*1.0/(t88045*t88045*t88045)*t88064*t88056*2.0+ccab3*gcab*t88040*t88032*t88041*t88057*4.0+ccab3* \
                   gamma_bb[index]*gcab*t88040*t88042*t88037*t88057*4.0-ccab2*gamma_bb[index]*t88040*t88032*t88053*t88037* \
                   t88064*(8.0/3.0)-ccab3*gcab*t88040*t88041*t88052*t88061*t88035*(3.0/2.0)-ccab3*gcab*t88040*t88041* \
                   t88052*t88037*(gcab*t88032*4.0+gamma_bb[index]*t88040*t88042*4.0+t88040*t88032*t88037*8.0+gcab*t88040* \
                   t88032*t88041*4.0+gamma_bb[index]*gcab*t88040*t88042*t88037*4.0)+ccab1*gamma_bb[index]*gcab*t88040* \
                   t88042*t88037*1.0/(t88039*t88039*t88039)*(4.0/3.0)+ccab3*gcab*t88040*t88041*t88061*t88037*1.0/(t88049* \
                   t88049*t88049)*t88068*2.0-ccab3*gamma_bb[index]*gcab*t88040*t88032*t88041*t88052*t88068*4.0)+rho_b[index]* \
                   t88265*(t88261-t88229+t87981*t87984*(t88260-t88261+t88229-t88253*t88254*t88158*t88259))-rho_b[index]* \
                   t88160*(ccaa1*gcaa*t88032*t88233*(-8.0/3.0)-ccaa2*gamma_bb[index]*t88042*t88161*t88234*(3.2E1/3.0) \
                   +ccaa1*gamma_bb[index]*t88042*t88161*t88236*8.0+ccaa2*t88042*t88071*t88161*t88245*t88238*(1.6E1/3.0) \
                   -ccaa1*gcaa*t88114*t88071*t88161*1.0/(t88163*t88163*t88163)*(1.6E1/3.0)+ccaa2*t88070*t88071*t88161* \
                   t88238*(gcaa*t88032*(1.6E1/3.0)+gamma_bb[index]*t88042*t88161*(3.2E1/3.0))+ccaa2*gamma_bb[index]*t88070* \
                   t88161*t88238*t88248*2.0-ccaa3*gcaa*t88114*t88071*t88161*t88235*2.4E1+ccaa3*gcaa*t88071*t88161*t88072* \
                   t88252*t88237*3.0-ccaa2*t88070*t88071*t88161*1.0/(t88170*t88170*t88170)*t88245*t88248*2.0+ccaa3*gamma_bb[index]* \
                   gcaa*t88071*t88161*t88072*t88237*(gcaa*t88032*8.0+gamma_bb[index]*t88042*t88161*3.2E1+gcaa*t88114* \
                   t88071*t88161*2.4E1)+ccaa3*gamma_bb[index]*gcaa*t88114*t88071*t88161*t88242*t88237*8.0-ccaa3*gamma_bb[index]* \
                   gcaa*t88071*t88161*t88242*t88072*t88252*1.0/(t88167*t88167*t88167)*2.0);
            } else if (rho_a[index] > cutoff_) {
                v_rho_b_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                double t89696 = 1.0/pow(rho_b[index],1.0/3.0);
                double t89697 = c*t89696;
                double t89698 = sqrt(t89697);
                double t89699 = pow(t89697,3.0/2.0);
                double t89700 = c*c;
                double t89701 = 1.0/pow(rho_b[index],2.0/3.0);
                double t89702 = 1.0/c0p;
                double t89703 = b1p*t89698;
                double t89704 = b3p*t89699;
                double t89705 = b4p*t89700*t89701;
                double t89706 = b2p*c*t89696;
                double t89707 = t89703+t89704+t89705+t89706;
                double t89708 = 1.0/t89707;
                double t89709 = t89702*t89708*(1.0/2.0);
                double t89710 = t89709+1.0;
                double t89711 = log(t89710);
                double t89712 = a1p*c*t89696;
                double t89713 = t89712+1.0;
                double t89714 = 1.0/pow(rho_b[index],8.0/3.0);
                double t89715 = gcaa*gcaa;
                double t89716 = 1.0/pow(rho_b[index],1.6E1/3.0);
                double t89717 = gamma_bb[index]*gamma_bb[index];
                double t89718 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]);
                double t89719 = gamma_bb[index]*gcaa*t89714;
                double t89720 = t89719+1.0;
                double t89721 = gamma_bb[index]*gcaa*t89714*3.0;
                double t89722 = gamma_bb[index]*gcaa*t89715*t89717*t89718;
                double t89723 = t89715*t89716*t89717*3.0;
                double t89724 = t89721+t89722+t89723+1.0;
                double t89725 = gamma_bb[index]*gcaa*t89714*2.0;
                double t89726 = t89715*t89716*t89717;
                double t89727 = t89725+t89726+1.0;
                double t89728 = pow(2.0,1.0/3.0);
                double t89729 = t89728*2.0;
                double t89730 = t89729-2.0;
                double t89731 = two_13*2.0;
                double t89732 = t89731-2.0;
                double t89733 = 1.0/t89732;
                double t89734 = 1.0/c0f;
                double t89735 = b1f*t89698;
                double t89736 = b3f*t89699;
                double t89737 = b4f*t89700*t89701;
                double t89738 = b2f*c*t89696;
                double t89739 = t89735+t89736+t89737+t89738;
                double t89740 = 1.0/t89739;
                double t89741 = t89740*t89734*(1.0/2.0);
                double t89742 = t89741+1.0;
                double t89743 = log(t89742);
                double t89744 = a1f*c*t89696;
                double t89745 = t89744+1.0;
                double t89746 = c0f*t89743*t89745*2.0;
                double t89747 = c0p*t89711*t89713*2.0;
                double t89748 = 1.0/t89720;
                double t89749 = 1.0/t89727;
                double t89750 = 1.0/t89724;
                double t89751 = 1.0/pow(rho_b[index],1.9E1/3.0);
                double t89752 = 1.0/(t89720*t89720);
                double t89753 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]*rho_b[index]);
                double t89754 = 1.0/pow(rho_b[index],1.1E1/3.0);
                double t89755 = 1.0/(t89724*t89724);
                double t89756 = 1.0/(t89727*t89727);
                double t89757 = gcaa*t89714*3.0;
                double t89758 = gamma_bb[index]*t89715*t89716*6.0;
                double t89759 = gcaa*t89715*t89717*t89718*3.0;
                double t89760 = t89757+t89758+t89759;
                double t89761 = gcaa*t89714*2.0;
                double t89762 = gamma_bb[index]*t89715*t89716*2.0;
                double t89763 = t89761+t89762;
                double t89764 = gamma_bb[index]*gcaa*t89754*(1.6E1/3.0);
                double t89765 = t89715*t89751*t89717*(1.6E1/3.0);
                double t89766 = t89764+t89765;
                double t89767 = gamma_bb[index]*gcaa*t89754*8.0;
                double t89768 = gamma_bb[index]*gcaa*t89715*t89717*t89753*8.0;
                double t89769 = t89715*t89751*t89717*1.6E1;
                double t89770 = t89767+t89768+t89769;
                double t89771 = 1.0/pow(rho_b[index],4.0/3.0);
                double t89772 = 1.0/pow(rho_b[index],5.0/3.0);
                double t89773 = 1.0/sqrt(t89697);
                double t89774 = 1.0/t89710;
                double t89775 = 1.0/(t89707*t89707);
                double t89776 = b4p*t89700*t89772*(2.0/3.0);
                double t89777 = b2p*c*t89771*(1.0/3.0);
                double t89778 = b1p*c*t89771*t89773*(1.0/6.0);
                double t89779 = b3p*c*t89771*t89698*(1.0/2.0);
                double t89780 = t89776+t89777+t89778+t89779;
                double t89781 = t89713*t89780*t89774*t89775;
                double t89782 = ccaa1*gcaa*t89714*t89748;
                double t89783 = ccaa2*gamma_bb[index]*t89715*t89716*t89749*2.0;
                double t89784 = ccaa3*gcaa*t89750*t89715*t89717*t89718*3.0;
                double t89785 = t89782+t89783+t89784-ccaa1*gamma_bb[index]*t89715*t89716*t89752-ccaa2*t89715*t89716* \
                   t89717*t89763*t89756-ccaa3*gamma_bb[index]*gcaa*t89715*t89760*t89717*t89718*t89755;
                double t89786 = pow(rho_b[index],5.0/3.0);
                double t89787 = C_k*t89786;
                double t89796 = tau_a[index]*1.0E20;
                double t89788 = t89787-t89796;
                double t89789 = ( (t89788 > 0.0) ?  1.0 : 0.0 ) ;
                double t89790 = t89789*1.0E20;
                double t89791 = 1.0/tau_b[index];
                double t89792 = tau_b[index]*1.0E20;
                double t89793 = t89792-t89787;
                double t89794 = ( (t89793 > 0.0) ?  1.0 : 0.0 ) ;
                double t89795 = C_k*t89791*t89794*t89786;
                double t89797 = t89790+t89795-1.0;
                double t89798 = t89797*t89797;
                double t89799 = t89790+t89795+1.0;
                double t89800 = t89798*t89798;
                double t89801 = gx*gx;
                double t89802 = gamma_bb[index]*gx*t89714;
                double t89803 = t89802+1.0;
                double t89804 = gamma_bb[index]*gx*t89714*3.0;
                double t89805 = gamma_bb[index]*gx*t89801*t89717*t89718;
                double t89806 = t89801*t89716*t89717*3.0;
                double t89807 = t89804+t89805+t89806+1.0;
                double t89808 = gamma_bb[index]*gx*t89714*2.0;
                double t89809 = t89801*t89716*t89717;
                double t89810 = t89808+t89809+1.0;
                double t89811 = 1.0/t89803;
                double t89812 = 1.0/t89810;
                double t89813 = 1.0/t89807;
                double t89814 = 1.0/(t89803*t89803);
                double t89815 = gx*t89714*3.0;
                double t89816 = gamma_bb[index]*t89801*t89716*6.0;
                double t89817 = gx*t89801*t89717*t89718*3.0;
                double t89818 = t89815+t89816+t89817;
                double t89819 = 1.0/(t89807*t89807);
                double t89820 = gx*t89714*2.0;
                double t89821 = gamma_bb[index]*t89801*t89716*2.0;
                double t89822 = t89820+t89821;
                double t89823 = 1.0/(t89810*t89810);
                double t89824 = X-1.0;
                double t89825 = cxnl1*gx*t89811*t89714;
                double t89826 = cxnl2*gamma_bb[index]*t89801*t89812*t89716*2.0;
                double t89827 = cxnl3*gx*t89801*t89813*t89717*t89718*3.0;
                double t89828 = t89825+t89826+t89827-cxnl1*gamma_bb[index]*t89801*t89814*t89716-cxnl2*t89801*t89822* \
                   t89823*t89716*t89717-cxnl3*gamma_bb[index]*gx*t89801*t89717*t89718*t89818*t89819;
                double t89829 = pow(rho_b[index],2.0/3.0);
                double t89830 = 1.0/t89799;
                double t89831 = -t89787+t89796;
                double t89832 = 0.0 ;
                double t89833 = C_k*t89832*t89829*(5.0E20/3.0);
                double t89834 = C_k*C_k;
                double t89835 = pow(rho_b[index],7.0/3.0);
                double t89836 = 0.0 ;
                double t89837 = C_k*t89791*t89829*t89794*(5.0/3.0);
                double t89839 = t89834*t89835*t89791*t89836*(5.0/3.0);
                double t89838 = t89833+t89837-t89839;
                double t89840 = 1.0/(t89799*t89799*t89799);
                double t89841 = 1.0/(t89799*t89799*t89799*t89799*t89799);
                double t89842 = t89830*t89797;
                double t89843 = t89800*t89841*t89797;
                double t89844 = t89842+t89843-t89840*t89797*t89798*2.0;
                double t89845 = gamma_bb[index]*gx*t89754*(1.6E1/3.0);
                double t89846 = t89801*t89751*t89717*(1.6E1/3.0);
                double t89847 = t89845+t89846;
                double t89848 = gamma_bb[index]*gx*t89754*8.0;
                double t89849 = gamma_bb[index]*gx*t89801*t89717*t89753*8.0;
                double t89850 = t89801*t89751*t89717*1.6E1;
                double t89851 = t89850+t89848+t89849;
                double t89852 = 1.0/(t89803*t89803*t89803);
                double t89853 = gx*t89754*8.0;
                double t89854 = gamma_bb[index]*t89801*t89751*3.2E1;
                double t89855 = gx*t89801*t89717*t89753*2.4E1;
                double t89856 = t89853+t89854+t89855;
                double t89857 = gx*t89754*(1.6E1/3.0);
                double t89858 = gamma_bb[index]*t89801*t89751*(3.2E1/3.0);
                double t89859 = t89857+t89858;
                double t89860 = 1.0/(t89810*t89810*t89810);
                double t89861 = 1.0/(t89807*t89807*t89807);
                v_rho_b_gamma_bb_[index] = -t89785*(t89747+t89730*t89733*(t89746-c0p*t89711*t89713*2.0))+rho_b[index]* \
                   t89785*(-t89781+t89730*t89733*(t89781-(t89745*1.0/(t89739*t89739)*(b2f*c*t89771*(1.0/3.0)+b4f*t89700* \
                   t89772*(2.0/3.0)+b1f*c*t89771*t89773*(1.0/6.0)+b3f*c*t89771*t89698*(1.0/2.0)))/t89742+a1f*c*c0f*t89743* \
                   t89771*(2.0/3.0)-a1p*c*c0p*t89711*t89771*(2.0/3.0))+a1p*c*c0p*t89711*t89771*(2.0/3.0))-rho_b[index]* \
                   (t89747+t89730*t89733*(t89746-t89747))*(ccaa1*gcaa*t89754*t89748*(-8.0/3.0)+ccaa1*gamma_bb[index]* \
                   t89715*t89751*t89752*8.0-ccaa2*gamma_bb[index]*t89715*t89751*t89749*(3.2E1/3.0)+ccaa2*t89715*t89751* \
                   t89717*t89763*t89756*(1.6E1/3.0)-ccaa1*gcaa*1.0/(t89720*t89720*t89720)*t89715*t89717*t89753*(1.6E1/ \
                   3.0)+ccaa2*t89715*t89716*t89717*t89756*(gcaa*t89754*(1.6E1/3.0)+gamma_bb[index]*t89715*t89751*(3.2E1/ \
                   3.0))+ccaa2*gamma_bb[index]*t89715*t89716*t89756*t89766*2.0-ccaa3*gcaa*t89750*t89715*t89717*t89753* \
                   2.4E1+ccaa3*gcaa*t89715*t89770*t89717*t89718*t89755*3.0-ccaa2*t89715*t89716*t89717*1.0/(t89727*t89727* \
                   t89727)*t89763*t89766*2.0+ccaa3*gamma_bb[index]*gcaa*t89715*t89717*t89718*t89755*(gcaa*t89754*8.0+ \
                   gamma_bb[index]*t89715*t89751*3.2E1+gcaa*t89715*t89717*t89753*2.4E1)+ccaa3*gamma_bb[index]*gcaa*t89715* \
                   t89760*t89717*t89753*t89755*8.0-ccaa3*gamma_bb[index]*gcaa*t89715*1.0/(t89724*t89724*t89724)*t89760* \
                   t89770*t89717*t89718*2.0)-c0*pow(rho_b[index],1.0/3.0)*t89824*(t89844*t89828+cx1*gx*t89811*t89714- \
                   cx1*gamma_bb[index]*t89801*t89814*t89716+cx2*gamma_bb[index]*t89801*t89812*t89716*2.0-cx2*t89801*t89822* \
                   t89823*t89716*t89717+cx3*gx*t89801*t89813*t89717*t89718*3.0-cx3*gamma_bb[index]*gx*t89801*t89717*t89718* \
                   t89818*t89819)*(4.0/3.0)-c0*pow(rho_b[index],4.0/3.0)*t89824*(t89828*(t89830*t89838-t89838*t89797* \
                   1.0/(t89799*t89799)+t89800*t89841*t89838*5.0-t89840*t89838*t89798*6.0-t89800*t89838*t89797*1.0/(t89799* \
                   t89799*t89799*t89799*t89799*t89799)*5.0+t89838*t89797*t89798*1.0/(t89799*t89799*t89799*t89799)*6.0) \
                   +t89844*(cxnl1*gx*t89811*t89754*(-8.0/3.0)-cxnl2*gamma_bb[index]*t89801*t89812*t89751*(3.2E1/3.0)+ \
                   cxnl1*gamma_bb[index]*t89801*t89751*t89814*8.0+cxnl2*t89801*t89822*t89751*t89823*t89717*(1.6E1/3.0) \
                   +cxnl2*t89801*t89823*t89716*t89717*t89859+cxnl2*gamma_bb[index]*t89801*t89823*t89716*t89847*2.0-cxnl3* \
                   gx*t89801*t89813*t89717*t89753*2.4E1-cxnl1*gx*t89801*t89717*t89753*t89852*(1.6E1/3.0)+cxnl3*gx*t89801* \
                   t89851*t89717*t89718*t89819*3.0-cxnl2*t89801*t89822*t89716*t89860*t89717*t89847*2.0+cxnl3*gamma_bb[index]* \
                   gx*t89801*t89717*t89753*t89818*t89819*8.0+cxnl3*gamma_bb[index]*gx*t89801*t89717*t89718*t89819*t89856- \
                   cxnl3*gamma_bb[index]*gx*t89801*t89851*t89717*t89861*t89718*t89818*2.0)-cx1*gx*t89811*t89754*(8.0/ \
                   3.0)+cx1*gamma_bb[index]*t89801*t89751*t89814*8.0-cx2*gamma_bb[index]*t89801*t89812*t89751*(3.2E1/ \
                   3.0)+cx2*t89801*t89822*t89751*t89823*t89717*(1.6E1/3.0)+cx2*t89801*t89823*t89716*t89717*t89859+cx2* \
                   gamma_bb[index]*t89801*t89823*t89716*t89847*2.0-cx1*gx*t89801*t89717*t89753*t89852*(1.6E1/3.0)-cx3* \
                   gx*t89801*t89813*t89717*t89753*2.4E1+cx3*gx*t89801*t89851*t89717*t89718*t89819*3.0-cx2*t89801*t89822* \
                   t89716*t89860*t89717*t89847*2.0+cx3*gamma_bb[index]*gx*t89801*t89717*t89753*t89818*t89819*8.0+cx3* \
                   gamma_bb[index]*gx*t89801*t89717*t89718*t89819*t89856-cx3*gamma_bb[index]*gx*t89801*t89851*t89717* \
                   t89861*t89718*t89818*2.0);
            } else {
                v_rho_b_gamma_bb_[index] = 0.0;
            } 

            //V_gamma_aa_gamma_aa
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t88267 = 1.0/pow(rho_a[index],1.0/3.0);
                double t88268 = c*t88267;
                double t88269 = sqrt(t88268);
                double t88270 = pow(t88268,3.0/2.0);
                double t88271 = c*c;
                double t88272 = 1.0/pow(rho_a[index],2.0/3.0);
                double t88273 = 1.0/c0p;
                double t88274 = b1p*t88269;
                double t88275 = b3p*t88270;
                double t88276 = b4p*t88271*t88272;
                double t88277 = b2p*c*t88267;
                double t88278 = t88274+t88275+t88276+t88277;
                double t88279 = 1.0/t88278;
                double t88280 = t88273*t88279*(1.0/2.0);
                double t88281 = t88280+1.0;
                double t88282 = log(t88281);
                double t88283 = a1p*c*t88267;
                double t88284 = t88283+1.0;
                double t88285 = pow(2.0,1.0/3.0);
                double t88286 = t88285*2.0;
                double t88287 = t88286-2.0;
                double t88288 = two_13*2.0;
                double t88289 = t88288-2.0;
                double t88290 = 1.0/t88289;
                double t88291 = 1.0/c0f;
                double t88292 = 1.0/pow(rho_b[index],1.0/3.0);
                double t88293 = c*t88292;
                double t88294 = sqrt(t88293);
                double t88295 = pow(t88293,3.0/2.0);
                double t88296 = 1.0/pow(rho_b[index],2.0/3.0);
                double t88297 = b1p*t88294;
                double t88298 = b3p*t88295;
                double t88299 = b4p*t88271*t88296;
                double t88300 = b2p*c*t88292;
                double t88301 = t88300+t88297+t88298+t88299;
                double t88302 = 1.0/t88301;
                double t88303 = t88302*t88273*(1.0/2.0);
                double t88304 = t88303+1.0;
                double t88305 = log(t88304);
                double t88306 = a1p*c*t88292;
                double t88307 = t88306+1.0;
                double t88308 = c0p*t88305*t88307*2.0;
                double t88309 = rho_a[index]+rho_b[index];
                double t88310 = 1.0/pow(t88309,1.0/3.0);
                double t88311 = c*t88310;
                double t88312 = sqrt(t88311);
                double t88313 = pow(t88311,3.0/2.0);
                double t88314 = 1.0/pow(t88309,2.0/3.0);
                double t88315 = b1p*t88312;
                double t88316 = b3p*t88313;
                double t88317 = b4p*t88314*t88271;
                double t88318 = b2p*c*t88310;
                double t88319 = t88315+t88316+t88317+t88318;
                double t88320 = 1.0/t88319;
                double t88321 = t88320*t88273*(1.0/2.0);
                double t88322 = t88321+1.0;
                double t88323 = log(t88322);
                double t88324 = a1p*c*t88310;
                double t88325 = t88324+1.0;
                double t88326 = c0p*t88323*t88325*2.0;
                double t88327 = rho_a[index]-rho_b[index];
                double t88328 = t88327*t88327;
                double t88329 = 1.0/t88309;
                double t88330 = t88327*t88329;
                double t88331 = 1.0/(t88309*t88309*t88309*t88309);
                double t88332 = t88328*t88328;
                double t88333 = t88330+1.0;
                double t88334 = pow(t88333,4.0/3.0);
                double t88335 = -t88330+1.0;
                double t88336 = pow(t88335,4.0/3.0);
                double t88337 = t88334+t88336-2.0;
                double t88338 = gcab*gcab;
                double t88339 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t88340 = 1.0/pow(rho_a[index],8.0/3.0);
                double t88341 = gamma_aa[index]*t88340*(1.0/2.0);
                double t88342 = 1.0/pow(rho_b[index],8.0/3.0);
                double t88343 = gamma_bb[index]*t88342*(1.0/2.0);
                double t88344 = t88341+t88343;
                double t88345 = gcab*t88344;
                double t88346 = t88345+1.0;
                double t88347 = t88344*t88344;
                double t88348 = t88338*t88347;
                double t88349 = gcab*t88344*2.0;
                double t88350 = t88348+t88349+1.0;
                double t88360 = gcab*t88340*(3.0/2.0);
                double t88361 = t88340*t88344*t88338*3.0;
                double t88362 = gcab*t88340*t88338*t88347*(3.0/2.0);
                double t88351 = t88360+t88361+t88362;
                double t88352 = t88338*t88347*3.0;
                double t88353 = gcab*t88344*t88338*t88347;
                double t88354 = gcab*t88344*3.0;
                double t88355 = t88352+t88353+t88354+1.0;
                double t88357 = gcab*t88340;
                double t88358 = t88340*t88344*t88338;
                double t88356 = t88357+t88358;
                double t88359 = 1.0/(t88350*t88350);
                double t88363 = 1.0/(t88355*t88355);
                double t88364 = c0p*t88282*t88284*2.0;
                double t88365 = b1f*t88269;
                double t88366 = b3f*t88270;
                double t88367 = b4f*t88271*t88272;
                double t88368 = b2f*c*t88267;
                double t88369 = t88365+t88366+t88367+t88368;
                double t88370 = 1.0/t88369;
                double t88371 = t88370*t88291*(1.0/2.0);
                double t88372 = t88371+1.0;
                double t88373 = log(t88372);
                double t88374 = a1f*c*t88267;
                double t88375 = t88374+1.0;
                double t88376 = t88364-c0f*t88373*t88375*2.0;
                double t88377 = t88364-t88290*t88376*t88287;
                double t88378 = gcaa*gcaa;
                double t88379 = gamma_aa[index]*gcaa*t88340;
                double t88380 = t88379+1.0;
                double t88381 = gamma_aa[index]*gamma_aa[index];
                double t88382 = gamma_aa[index]*gcaa*t88340*2.0;
                double t88383 = t88381*t88339*t88378;
                double t88384 = t88382+t88383+1.0;
                double t88385 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t88386 = gamma_aa[index]*gcaa*t88340*3.0;
                double t88387 = gamma_aa[index]*gcaa*t88381*t88385*t88378;
                double t88388 = t88381*t88339*t88378*3.0;
                double t88389 = t88386+t88387+t88388+1.0;
                double t88392 = gcaa*t88340*2.0;
                double t88393 = gamma_aa[index]*t88339*t88378*2.0;
                double t88390 = t88392+t88393;
                double t88391 = 1.0/(t88389*t88389);
                double t88394 = 1.0/(t88384*t88384);
                double t88395 = gcaa*t88340*3.0;
                double t88396 = gamma_aa[index]*t88339*t88378*6.0;
                double t88397 = gcaa*t88381*t88385*t88378*3.0;
                double t88398 = t88395+t88396+t88397;
                double t88399 = pow(rho_a[index],5.0/3.0);
                double t88400 = C_k*t88399;
                double t88401 = tau_a[index]*1.0E20;
                double t88402 = 1.0/tau_a[index];
                double t88403 = -t88400+t88401;
                double t88404 = ( (t88403 > 0.0) ?  1.0 : 0.0 ) ;
                double t88405 = C_k*t88402*t88404*t88399;
                double t88406 = t88400-t88401;
                double t88407 = ( (t88406 > 0.0) ?  1.0 : 0.0 ) ;
                double t88408 = t88407*1.0E20;
                double t88409 = t88405+t88408-1.0;
                double t88410 = t88409*t88409;
                double t88411 = t88405+t88408+1.0;
                double t88412 = t88410*t88410;
                double t88413 = gx*gx;
                double t88414 = gamma_aa[index]*gx*t88340;
                double t88415 = t88414+1.0;
                double t88416 = 1.0/pow(rho_a[index],3.2E1/3.0);
                double t88417 = gamma_aa[index]*gx*t88340*2.0;
                double t88418 = t88413*t88381*t88339;
                double t88419 = t88417+t88418+1.0;
                double t88420 = gamma_aa[index]*gx*t88340*3.0;
                double t88421 = gamma_aa[index]*gx*t88413*t88381*t88385;
                double t88422 = t88413*t88381*t88339*3.0;
                double t88423 = t88420+t88421+t88422+1.0;
                double t88426 = gx*t88340*2.0;
                double t88427 = gamma_aa[index]*t88413*t88339*2.0;
                double t88424 = t88426+t88427;
                double t88425 = 1.0/(t88423*t88423);
                double t88428 = 1.0/(t88419*t88419);
                double t88429 = gx*t88340*3.0;
                double t88430 = gamma_aa[index]*t88413*t88339*6.0;
                double t88431 = gx*t88413*t88381*t88385*3.0;
                double t88432 = t88430+t88431+t88429;
                double t88433 = 1.0/(t88415*t88415);
                double t88434 = 1.0/t88419;
                double t88435 = 1.0/t88423;
                double t88436 = 1.0/(t88415*t88415*t88415);
                double t88437 = t88413*t88413;
                double t88438 = t88413*t88339*6.0;
                double t88439 = gamma_aa[index]*gx*t88413*t88385*6.0;
                double t88440 = t88438+t88439;
                double t88441 = t88424*t88424;
                double t88442 = 1.0/(t88419*t88419*t88419);
                double t88443 = t88432*t88432;
                double t88444 = 1.0/(t88423*t88423*t88423);
                v_gamma_aa_gamma_aa_[index] = (rho_a[index]*t88377+rho_b[index]*(t88308-t88290*t88287*(t88308-c0f* \
                   log((t88291*(1.0/2.0))/(b1f*t88294+b3f*t88295+b2f*c*t88292+b4f*t88271*t88296)+1.0)*(a1f*c*t88292+1.0) \
                   *2.0))-t88309*(t88326-t88331*t88332*t88290*t88337*(t88326-c0f*log((t88291*(1.0/2.0))/(b1f*t88312+b3f* \
                   t88313+b2f*c*t88310+b4f*t88314*t88271)+1.0)*(a1f*c*t88310+1.0)*2.0)+(Aa*t88290*t88337*log((1.0/2.0) \
                   /(Aa*(b1a*t88312+b3a*t88313+b2a*c*t88310+b4a*t88314*t88271))+1.0)*(t88331*t88332-1.0)*(a1a*c*t88310+ \
                   1.0)*2.0)/d2fz0))*((ccab2*t88338*t88339*(1.0/2.0))/t88350-ccab1*1.0/(t88346*t88346)*t88338*t88339* \
                   (1.0/2.0)+ccab2*1.0/(t88350*t88350*t88350)*t88338*t88347*(t88356*t88356)*2.0-ccab2*(t88338*t88338) \
                   *t88347*t88339*t88359*(1.0/2.0)-ccab2*t88340*t88344*t88338*t88356*t88359*2.0+ccab1*gcab*t88344*1.0/ \
                   (t88346*t88346*t88346)*t88338*t88339*(1.0/2.0)+(ccab3*gcab*t88344*t88338*t88339*(3.0/2.0))/t88355+ \
                   ccab3*gcab*(t88351*t88351)*t88344*1.0/(t88355*t88355*t88355)*t88338*t88347*2.0-ccab3*gcab*t88340*t88351* \
                   t88363*t88338*t88347*3.0-ccab3*gcab*t88344*t88363*t88338*t88347*(t88338*t88339*(3.0/2.0)+gcab*t88344* \
                   t88338*t88339*(3.0/2.0)))+rho_a[index]*t88377*(ccaa1*1.0/(t88380*t88380)*t88339*t88378*2.0-(ccaa2* \
                   t88339*t88378*2.0)/t88384+ccaa2*t88416*t88381*t88394*(t88378*t88378)*2.0-ccaa1*gamma_aa[index]*gcaa* \
                   1.0/(t88380*t88380*t88380)*t88385*t88378*2.0-(ccaa3*gamma_aa[index]*gcaa*t88385*t88378*6.0)/t88389- \
                   ccaa2*t88381*(t88390*t88390)*t88339*1.0/(t88384*t88384*t88384)*t88378*2.0+ccaa2*gamma_aa[index]*t88390* \
                   t88339*t88394*t88378*4.0+ccaa3*gcaa*t88381*t88391*t88385*t88378*t88398*6.0+ccaa3*gamma_aa[index]*gcaa* \
                   t88381*t88391*t88385*t88378*(t88339*t88378*6.0+gamma_aa[index]*gcaa*t88385*t88378*6.0)-ccaa3*gamma_aa[index]* \
                   gcaa*t88381*t88385*t88378*1.0/(t88389*t88389*t88389)*(t88398*t88398)*2.0)+c0*pow(rho_a[index],4.0/ \
                   3.0)*(X-1.0)*(((t88405+ ( (t88400-tau_a[index]*1.0E20 > 0.0) ? 1.0*1.0E20 : 0.0 ) -1.0)/t88411-t88410* \
                   1.0/(t88411*t88411*t88411)*t88409*2.0+1.0/(t88411*t88411*t88411*t88411*t88411)*t88412*t88409)*(cxnl1* \
                   t88413*t88433*t88339*2.0-cxnl2*t88413*t88434*t88339*2.0+cxnl2*t88416*t88381*t88428*t88437*2.0-cxnl2* \
                   t88413*t88441*t88442*t88381*t88339*2.0-cxnl1*gamma_aa[index]*gx*t88413*t88436*t88385*2.0-cxnl3*gamma_aa[index]* \
                   gx*t88413*t88435*t88385*6.0+cxnl2*gamma_aa[index]*t88413*t88424*t88428*t88339*4.0+cxnl3*gx*t88413* \
                   t88432*t88425*t88381*t88385*6.0+cxnl3*gamma_aa[index]*gx*t88413*t88440*t88425*t88381*t88385-cxnl3* \
                   gamma_aa[index]*gx*t88413*t88443*t88381*t88444*t88385*2.0)+cx1*t88413*t88433*t88339*2.0-cx2*t88413* \
                   t88434*t88339*2.0+cx2*t88416*t88381*t88428*t88437*2.0-cx2*t88413*t88441*t88442*t88381*t88339*2.0-cx1* \
                   gamma_aa[index]*gx*t88413*t88436*t88385*2.0-cx3*gamma_aa[index]*gx*t88413*t88435*t88385*6.0+cx2*gamma_aa[index]* \
                   t88413*t88424*t88428*t88339*4.0+cx3*gx*t88413*t88432*t88425*t88381*t88385*6.0+cx3*gamma_aa[index]* \
                   gx*t88413*t88440*t88425*t88381*t88385-cx3*gamma_aa[index]*gx*t88413*t88443*t88381*t88444*t88385*2.0) \
                   ;
            } else if (rho_a[index] > cutoff_) {
                double t90916 = 1.0/pow(rho_a[index],1.0/3.0);
                double t90917 = c*t90916;
                double t90918 = sqrt(t90917);
                double t90919 = pow(t90917,3.0/2.0);
                double t90920 = c*c;
                double t90921 = 1.0/pow(rho_a[index],2.0/3.0);
                double t90922 = 1.0/c0p;
                double t90923 = b1p*t90918;
                double t90924 = b3p*t90919;
                double t90925 = b4p*t90920*t90921;
                double t90926 = b2p*c*t90916;
                double t90927 = t90923+t90924+t90925+t90926;
                double t90928 = 1.0/t90927;
                double t90929 = t90922*t90928*(1.0/2.0);
                double t90930 = t90929+1.0;
                double t90931 = log(t90930);
                double t90932 = a1p*c*t90916;
                double t90933 = t90932+1.0;
                double t90934 = gcaa*gcaa;
                double t90935 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t90936 = 1.0/pow(rho_a[index],8.0/3.0);
                double t90937 = gamma_aa[index]*gcaa*t90936;
                double t90938 = t90937+1.0;
                double t90939 = gamma_aa[index]*gamma_aa[index];
                double t90940 = gamma_aa[index]*gcaa*t90936*2.0;
                double t90941 = t90934*t90935*t90939;
                double t90942 = t90940+t90941+1.0;
                double t90943 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t90944 = gamma_aa[index]*gcaa*t90936*3.0;
                double t90945 = gamma_aa[index]*gcaa*t90934*t90943*t90939;
                double t90946 = t90934*t90935*t90939*3.0;
                double t90947 = t90944+t90945+t90946+1.0;
                double t90950 = gcaa*t90936*2.0;
                double t90951 = gamma_aa[index]*t90934*t90935*2.0;
                double t90948 = t90950+t90951;
                double t90949 = 1.0/(t90947*t90947);
                double t90952 = 1.0/(t90942*t90942);
                double t90953 = gcaa*t90936*3.0;
                double t90954 = gamma_aa[index]*t90934*t90935*6.0;
                double t90955 = gcaa*t90934*t90943*t90939*3.0;
                double t90956 = t90953+t90954+t90955;
                double t90957 = pow(rho_a[index],5.0/3.0);
                double t90958 = C_k*t90957;
                double t90959 = tau_a[index]*1.0E20;
                double t90960 = 1.0/tau_a[index];
                double t90961 = -t90958+t90959;
                double t90962 = ( (t90961 > 0.0) ?  1.0 : 0.0 ) ;
                double t90963 = C_k*t90960*t90962*t90957;
                double t90964 = t90958-t90959;
                double t90965 = ( (t90964 > 0.0) ?  1.0 : 0.0 ) ;
                double t90966 = t90965*1.0E20;
                double t90967 = t90963+t90966-1.0;
                double t90968 = t90967*t90967;
                double t90969 = t90963+t90966+1.0;
                double t90970 = t90968*t90968;
                double t90971 = gx*gx;
                double t90972 = gamma_aa[index]*gx*t90936;
                double t90973 = t90972+1.0;
                double t90974 = 1.0/pow(rho_a[index],3.2E1/3.0);
                double t90975 = gamma_aa[index]*gx*t90936*2.0;
                double t90976 = t90935*t90971*t90939;
                double t90977 = t90975+t90976+1.0;
                double t90978 = gamma_aa[index]*gx*t90936*3.0;
                double t90979 = gamma_aa[index]*gx*t90943*t90971*t90939;
                double t90980 = t90935*t90971*t90939*3.0;
                double t90981 = t90980+t90978+t90979+1.0;
                double t90984 = gx*t90936*2.0;
                double t90985 = gamma_aa[index]*t90935*t90971*2.0;
                double t90982 = t90984+t90985;
                double t90983 = 1.0/(t90981*t90981);
                double t90986 = 1.0/(t90977*t90977);
                double t90987 = gx*t90936*3.0;
                double t90988 = gamma_aa[index]*t90935*t90971*6.0;
                double t90989 = gx*t90943*t90971*t90939*3.0;
                double t90990 = t90987+t90988+t90989;
                double t90991 = 1.0/(t90973*t90973);
                double t90992 = 1.0/t90977;
                double t90993 = 1.0/t90981;
                double t90994 = 1.0/(t90973*t90973*t90973);
                double t90995 = t90971*t90971;
                double t90996 = t90935*t90971*6.0;
                double t90997 = gamma_aa[index]*gx*t90943*t90971*6.0;
                double t90998 = t90996+t90997;
                double t90999 = t90982*t90982;
                double t91000 = 1.0/(t90977*t90977*t90977);
                double t91001 = t90990*t90990;
                double t91002 = 1.0/(t90981*t90981*t90981);
                v_gamma_aa_gamma_aa_[index] = -rho_a[index]*(((pow(2.0,1.0/3.0)*2.0-2.0)*(c0f*log((1.0/2.0)/(c0f* \
                   (b1f*t90918+b3f*t90919+b2f*c*t90916+b4f*t90920*t90921))+1.0)*(a1f*c*t90916+1.0)*2.0-c0p*t90931*t90933* \
                   2.0))/(two_13*2.0-2.0)+c0p*t90931*t90933*2.0)*((ccaa2*t90934*t90935*2.0)/t90942-ccaa1*t90934*t90935* \
                   1.0/(t90938*t90938)*2.0-ccaa2*(t90934*t90934)*t90952*t90974*t90939*2.0+ccaa1*gamma_aa[index]*gcaa* \
                   t90934*t90943*1.0/(t90938*t90938*t90938)*2.0+(ccaa3*gamma_aa[index]*gcaa*t90934*t90943*6.0)/t90947+ \
                   ccaa2*1.0/(t90942*t90942*t90942)*t90934*t90935*t90939*(t90948*t90948)*2.0-ccaa2*gamma_aa[index]*t90934* \
                   t90952*t90935*t90948*4.0-ccaa3*gcaa*t90934*t90943*t90956*t90939*t90949*6.0-ccaa3*gamma_aa[index]*gcaa* \
                   t90934*t90943*t90939*t90949*(t90934*t90935*6.0+gamma_aa[index]*gcaa*t90934*t90943*6.0)+ccaa3*gamma_aa[index]* \
                   gcaa*t90934*t90943*1.0/(t90947*t90947*t90947)*(t90956*t90956)*t90939*2.0)+c0*pow(rho_a[index],4.0/ \
                   3.0)*(X-1.0)*(((t90963+ ( (t90958-tau_a[index]*1.0E20 > 0.0) ? 1.0*1.0E20 : 0.0 ) -1.0)/t90969+t90970* \
                   t90967*1.0/(t90969*t90969*t90969*t90969*t90969)-t90967*t90968*1.0/(t90969*t90969*t90969)*2.0)*(cxnl1* \
                   t90935*t90971*t90991*2.0-cxnl2*t90935*t90971*t90992*2.0+cxnl2*t90974*t90939*t90986*t90995*2.0-cxnl2* \
                   t90935*t90971*t90939*t90999*t91000*2.0-cxnl1*gamma_aa[index]*gx*t90943*t90971*t90994*2.0-cxnl3*gamma_aa[index]* \
                   gx*t90943*t90971*t90993*6.0+cxnl2*gamma_aa[index]*t90935*t90971*t90982*t90986*4.0+cxnl3*gx*t90943* \
                   t90971*t90990*t90983*t90939*6.0+cxnl3*gamma_aa[index]*gx*t90943*t90971*t90983*t90939*t90998-cxnl3* \
                   gamma_aa[index]*gx*t90943*t90971*t90939*t91001*t91002*2.0)+cx1*t90935*t90971*t90991*2.0-cx2*t90935* \
                   t90971*t90992*2.0+cx2*t90974*t90939*t90986*t90995*2.0-cx2*t90935*t90971*t90939*t90999*t91000*2.0-cx1* \
                   gamma_aa[index]*gx*t90943*t90971*t90994*2.0-cx3*gamma_aa[index]*gx*t90943*t90971*t90993*6.0+cx2*gamma_aa[index]* \
                   t90935*t90971*t90982*t90986*4.0+cx3*gx*t90943*t90971*t90990*t90983*t90939*6.0+cx3*gamma_aa[index]* \
                   gx*t90943*t90971*t90983*t90939*t90998-cx3*gamma_aa[index]*gx*t90943*t90971*t90939*t91001*t91002*2.0) \
                   ;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_aa_gamma_aa_[index] = 0.0;
            } else {
                v_gamma_aa_gamma_aa_[index] = 0.0;
            } 

            //V_gamma_aa_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_aa_gamma_ab_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_aa_gamma_ab_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_aa_gamma_ab_[index] = 0.0;
            } else {
                v_gamma_aa_gamma_ab_[index] = 0.0;
            } 

            //V_gamma_aa_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t88447 = 1.0/pow(rho_a[index],1.0/3.0);
                double t88448 = c*t88447;
                double t88449 = sqrt(t88448);
                double t88450 = pow(t88448,3.0/2.0);
                double t88451 = c*c;
                double t88452 = 1.0/pow(rho_a[index],2.0/3.0);
                double t88453 = 1.0/c0p;
                double t88454 = b1p*t88449;
                double t88455 = b3p*t88450;
                double t88456 = b4p*t88451*t88452;
                double t88457 = b2p*c*t88447;
                double t88458 = t88454+t88455+t88456+t88457;
                double t88459 = 1.0/t88458;
                double t88460 = t88453*t88459*(1.0/2.0);
                double t88461 = t88460+1.0;
                double t88462 = log(t88461);
                double t88463 = a1p*c*t88447;
                double t88464 = t88463+1.0;
                double t88465 = pow(2.0,1.0/3.0);
                double t88466 = t88465*2.0;
                double t88467 = t88466-2.0;
                double t88468 = two_13*2.0;
                double t88469 = t88468-2.0;
                double t88470 = 1.0/t88469;
                double t88471 = 1.0/c0f;
                double t88472 = 1.0/pow(rho_b[index],1.0/3.0);
                double t88473 = c*t88472;
                double t88474 = sqrt(t88473);
                double t88475 = pow(t88473,3.0/2.0);
                double t88476 = 1.0/pow(rho_b[index],2.0/3.0);
                double t88477 = b1p*t88474;
                double t88478 = b3p*t88475;
                double t88479 = b4p*t88451*t88476;
                double t88480 = b2p*c*t88472;
                double t88481 = t88480+t88477+t88478+t88479;
                double t88482 = 1.0/t88481;
                double t88483 = t88453*t88482*(1.0/2.0);
                double t88484 = t88483+1.0;
                double t88485 = log(t88484);
                double t88486 = a1p*c*t88472;
                double t88487 = t88486+1.0;
                double t88488 = c0p*t88485*t88487*2.0;
                double t88489 = rho_a[index]+rho_b[index];
                double t88490 = 1.0/pow(t88489,1.0/3.0);
                double t88491 = c*t88490;
                double t88492 = sqrt(t88491);
                double t88493 = pow(t88491,3.0/2.0);
                double t88494 = 1.0/pow(t88489,2.0/3.0);
                double t88495 = b1p*t88492;
                double t88496 = b3p*t88493;
                double t88497 = b4p*t88451*t88494;
                double t88498 = b2p*c*t88490;
                double t88499 = t88495+t88496+t88497+t88498;
                double t88500 = 1.0/t88499;
                double t88501 = t88500*t88453*(1.0/2.0);
                double t88502 = t88501+1.0;
                double t88503 = log(t88502);
                double t88504 = a1p*c*t88490;
                double t88505 = t88504+1.0;
                double t88506 = c0p*t88503*t88505*2.0;
                double t88507 = rho_a[index]-rho_b[index];
                double t88508 = t88507*t88507;
                double t88509 = 1.0/t88489;
                double t88510 = t88507*t88509;
                double t88511 = 1.0/(t88489*t88489*t88489*t88489);
                double t88512 = t88508*t88508;
                double t88513 = t88510+1.0;
                double t88514 = pow(t88513,4.0/3.0);
                double t88515 = -t88510+1.0;
                double t88516 = pow(t88515,4.0/3.0);
                double t88517 = t88514+t88516-2.0;
                double t88518 = gcab*gcab;
                double t88519 = 1.0/pow(rho_a[index],8.0/3.0);
                double t88520 = 1.0/pow(rho_b[index],8.0/3.0);
                double t88521 = gamma_aa[index]*t88519*(1.0/2.0);
                double t88522 = gamma_bb[index]*t88520*(1.0/2.0);
                double t88523 = t88521+t88522;
                double t88524 = t88523*t88523;
                double t88525 = t88524*t88518*3.0;
                double t88526 = gcab*t88523*t88524*t88518;
                double t88527 = gcab*t88523*3.0;
                double t88528 = t88525+t88526+t88527+1.0;
                double t88529 = t88524*t88518;
                double t88530 = gcab*t88523*2.0;
                double t88531 = t88530+t88529+1.0;
                double t88532 = 1.0/(t88531*t88531);
                double t88533 = gcab*t88519;
                double t88534 = t88523*t88518*t88519;
                double t88535 = t88533+t88534;
                double t88536 = gcab*t88520;
                double t88537 = t88520*t88523*t88518;
                double t88538 = t88536+t88537;
                double t88539 = gcab*t88523;
                double t88540 = t88539+1.0;
                double t88541 = gcab*t88519*(3.0/2.0);
                double t88542 = t88523*t88518*t88519*3.0;
                double t88543 = gcab*t88524*t88518*t88519*(3.0/2.0);
                double t88544 = t88541+t88542+t88543;
                double t88545 = 1.0/(t88528*t88528);
                double t88546 = gcab*t88520*(3.0/2.0);
                double t88547 = t88520*t88523*t88518*3.0;
                double t88548 = gcab*t88520*t88524*t88518*(3.0/2.0);
                double t88549 = t88546+t88547+t88548;
                v_gamma_aa_gamma_bb_[index] = (-rho_b[index]*(t88488-t88470*t88467*(t88488-c0f*log((t88471*(1.0/2.0) \
                   )/(b1f*t88474+b3f*t88475+b2f*c*t88472+b4f*t88451*t88476)+1.0)*(a1f*c*t88472+1.0)*2.0))+t88489*(t88506- \
                   t88511*t88512*t88470*t88517*(t88506-c0f*log((t88471*(1.0/2.0))/(b1f*t88492+b3f*t88493+b2f*c*t88490+ \
                   b4f*t88451*t88494)+1.0)*(a1f*c*t88490+1.0)*2.0)+(Aa*t88470*t88517*log((1.0/2.0)/(Aa*(b1a*t88492+b3a* \
                   t88493+b2a*c*t88490+b4a*t88451*t88494))+1.0)*(t88511*t88512-1.0)*(a1a*c*t88490+1.0)*2.0)/d2fz0)+rho_a[index]* \
                   (t88470*t88467*(c0p*t88462*t88464*2.0-c0f*log((t88471*(1.0/2.0))/(b1f*t88449+b3f*t88450+b2f*c*t88447+ \
                   b4f*t88451*t88452)+1.0)*(a1f*c*t88447+1.0)*2.0)-c0p*t88462*t88464*2.0))*(ccab1*t88520*1.0/(t88540* \
                   t88540)*t88518*t88519*(1.0/2.0)-(ccab2*t88520*t88518*t88519*(1.0/2.0))/t88531+ccab2*t88520*t88523* \
                   t88532*t88535*t88518+ccab2*t88523*t88532*t88518*t88519*t88538+ccab2*t88520*t88532*t88524*(t88518*t88518) \
                   *t88519*(1.0/2.0)-ccab2*1.0/(t88531*t88531*t88531)*t88524*t88535*t88518*t88538*2.0+ccab3*gcab*t88520* \
                   t88524*t88544*t88518*t88545*(3.0/2.0)+ccab3*gcab*t88524*t88518*t88545*t88519*t88549*(3.0/2.0)+ccab3* \
                   gcab*t88523*t88524*t88518*t88545*(t88520*t88518*t88519*(3.0/2.0)+gcab*t88520*t88523*t88518*t88519* \
                   (3.0/2.0))-ccab1*gcab*t88520*1.0/(t88540*t88540*t88540)*t88523*t88518*t88519*(1.0/2.0)-(ccab3*gcab* \
                   t88520*t88523*t88518*t88519*(3.0/2.0))/t88528-ccab3*gcab*t88523*t88524*t88544*t88518*1.0/(t88528*t88528* \
                   t88528)*t88549*2.0);
            } else if (rho_a[index] > cutoff_) {
                v_gamma_aa_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_aa_gamma_bb_[index] = 0.0;
            } else {
                v_gamma_aa_gamma_bb_[index] = 0.0;
            } 

            //V_gamma_ab_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_ab_gamma_ab_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_ab_gamma_ab_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_ab_gamma_ab_[index] = 0.0;
            } else {
                v_gamma_ab_gamma_ab_[index] = 0.0;
            } 

            //V_gamma_ab_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_ab_gamma_bb_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_ab_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_ab_gamma_bb_[index] = 0.0;
            } else {
                v_gamma_ab_gamma_bb_[index] = 0.0;
            } 

            //V_gamma_bb_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t88553 = 1.0/pow(rho_a[index],1.0/3.0);
                double t88554 = c*t88553;
                double t88555 = sqrt(t88554);
                double t88556 = pow(t88554,3.0/2.0);
                double t88557 = c*c;
                double t88558 = 1.0/pow(rho_a[index],2.0/3.0);
                double t88559 = 1.0/c0p;
                double t88560 = b1p*t88555;
                double t88561 = b3p*t88556;
                double t88562 = b4p*t88557*t88558;
                double t88563 = b2p*c*t88553;
                double t88564 = t88560+t88561+t88562+t88563;
                double t88565 = 1.0/t88564;
                double t88566 = t88565*t88559*(1.0/2.0);
                double t88567 = t88566+1.0;
                double t88568 = log(t88567);
                double t88569 = a1p*c*t88553;
                double t88570 = t88569+1.0;
                double t88571 = pow(2.0,1.0/3.0);
                double t88572 = t88571*2.0;
                double t88573 = t88572-2.0;
                double t88574 = two_13*2.0;
                double t88575 = t88574-2.0;
                double t88576 = 1.0/t88575;
                double t88577 = 1.0/c0f;
                double t88578 = 1.0/pow(rho_b[index],1.0/3.0);
                double t88579 = c*t88578;
                double t88580 = sqrt(t88579);
                double t88581 = pow(t88579,3.0/2.0);
                double t88582 = 1.0/pow(rho_b[index],2.0/3.0);
                double t88583 = b1p*t88580;
                double t88584 = b3p*t88581;
                double t88585 = b4p*t88582*t88557;
                double t88586 = b2p*c*t88578;
                double t88587 = t88583+t88584+t88585+t88586;
                double t88588 = 1.0/t88587;
                double t88589 = t88559*t88588*(1.0/2.0);
                double t88590 = t88589+1.0;
                double t88591 = log(t88590);
                double t88592 = a1p*c*t88578;
                double t88593 = t88592+1.0;
                double t88594 = c0p*t88591*t88593*2.0;
                double t88595 = rho_a[index]+rho_b[index];
                double t88596 = 1.0/pow(t88595,1.0/3.0);
                double t88597 = c*t88596;
                double t88598 = sqrt(t88597);
                double t88599 = pow(t88597,3.0/2.0);
                double t88600 = 1.0/pow(t88595,2.0/3.0);
                double t88601 = b1p*t88598;
                double t88602 = b3p*t88599;
                double t88603 = b4p*t88600*t88557;
                double t88604 = b2p*c*t88596;
                double t88605 = t88601+t88602+t88603+t88604;
                double t88606 = 1.0/t88605;
                double t88607 = t88606*t88559*(1.0/2.0);
                double t88608 = t88607+1.0;
                double t88609 = log(t88608);
                double t88610 = a1p*c*t88596;
                double t88611 = t88610+1.0;
                double t88612 = c0p*t88611*t88609*2.0;
                double t88613 = rho_a[index]-rho_b[index];
                double t88614 = t88613*t88613;
                double t88615 = 1.0/t88595;
                double t88616 = t88613*t88615;
                double t88617 = 1.0/(t88595*t88595*t88595*t88595);
                double t88618 = t88614*t88614;
                double t88619 = t88616+1.0;
                double t88620 = pow(t88619,4.0/3.0);
                double t88621 = -t88616+1.0;
                double t88622 = pow(t88621,4.0/3.0);
                double t88623 = t88620+t88622-2.0;
                double t88624 = gcab*gcab;
                double t88625 = 1.0/pow(rho_b[index],1.6E1/3.0);
                double t88626 = 1.0/pow(rho_a[index],8.0/3.0);
                double t88627 = gamma_aa[index]*t88626*(1.0/2.0);
                double t88628 = 1.0/pow(rho_b[index],8.0/3.0);
                double t88629 = gamma_bb[index]*t88628*(1.0/2.0);
                double t88630 = t88627+t88629;
                double t88631 = gcab*t88630;
                double t88632 = t88631+1.0;
                double t88633 = t88630*t88630;
                double t88634 = t88624*t88633;
                double t88635 = gcab*t88630*2.0;
                double t88636 = t88634+t88635+1.0;
                double t88646 = gcab*t88628*(3.0/2.0);
                double t88647 = t88630*t88624*t88628*3.0;
                double t88648 = gcab*t88624*t88633*t88628*(3.0/2.0);
                double t88637 = t88646+t88647+t88648;
                double t88638 = t88624*t88633*3.0;
                double t88639 = gcab*t88630*t88624*t88633;
                double t88640 = gcab*t88630*3.0;
                double t88641 = t88640+t88638+t88639+1.0;
                double t88643 = gcab*t88628;
                double t88644 = t88630*t88624*t88628;
                double t88642 = t88643+t88644;
                double t88645 = 1.0/(t88636*t88636);
                double t88649 = 1.0/(t88641*t88641);
                double t88650 = b1f*t88580;
                double t88651 = b3f*t88581;
                double t88652 = b4f*t88582*t88557;
                double t88653 = b2f*c*t88578;
                double t88654 = t88650+t88651+t88652+t88653;
                double t88655 = 1.0/t88654;
                double t88656 = t88655*t88577*(1.0/2.0);
                double t88657 = t88656+1.0;
                double t88658 = log(t88657);
                double t88659 = a1f*c*t88578;
                double t88660 = t88659+1.0;
                double t88661 = t88594-c0f*t88660*t88658*2.0;
                double t88662 = t88594-t88661*t88573*t88576;
                double t88663 = gcaa*gcaa;
                double t88664 = gamma_bb[index]*gcaa*t88628;
                double t88665 = t88664+1.0;
                double t88666 = gamma_bb[index]*gamma_bb[index];
                double t88667 = gamma_bb[index]*gcaa*t88628*2.0;
                double t88668 = t88625*t88663*t88666;
                double t88669 = t88667+t88668+1.0;
                double t88670 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]);
                double t88671 = gamma_bb[index]*gcaa*t88628*3.0;
                double t88672 = gamma_bb[index]*gcaa*t88670*t88663*t88666;
                double t88673 = t88625*t88663*t88666*3.0;
                double t88674 = t88671+t88672+t88673+1.0;
                double t88677 = gcaa*t88628*2.0;
                double t88678 = gamma_bb[index]*t88625*t88663*2.0;
                double t88675 = t88677+t88678;
                double t88676 = 1.0/(t88674*t88674);
                double t88679 = 1.0/(t88669*t88669);
                double t88680 = gcaa*t88628*3.0;
                double t88681 = gamma_bb[index]*t88625*t88663*6.0;
                double t88682 = gcaa*t88670*t88663*t88666*3.0;
                double t88683 = t88680+t88681+t88682;
                double t88684 = pow(rho_b[index],5.0/3.0);
                double t88685 = C_k*t88684;
                double t88694 = tau_a[index]*1.0E20;
                double t88686 = t88685-t88694;
                double t88687 = ( (t88686 > 0.0) ?  1.0 : 0.0 ) ;
                double t88688 = t88687*1.0E20;
                double t88689 = 1.0/tau_b[index];
                double t88690 = tau_b[index]*1.0E20;
                double t88691 = t88690-t88685;
                double t88692 = ( (t88691 > 0.0) ?  1.0 : 0.0 ) ;
                double t88693 = C_k*t88692*t88684*t88689;
                double t88695 = t88693+t88688-1.0;
                double t88696 = t88695*t88695;
                double t88697 = t88693+t88688+1.0;
                double t88698 = t88696*t88696;
                double t88699 = gx*gx;
                double t88700 = gamma_bb[index]*gx*t88628;
                double t88701 = t88700+1.0;
                double t88702 = 1.0/pow(rho_b[index],3.2E1/3.0);
                double t88703 = gamma_bb[index]*gx*t88628*2.0;
                double t88704 = t88625*t88666*t88699;
                double t88705 = t88703+t88704+1.0;
                double t88706 = gamma_bb[index]*gx*t88628*3.0;
                double t88707 = gamma_bb[index]*gx*t88670*t88666*t88699;
                double t88708 = t88625*t88666*t88699*3.0;
                double t88709 = t88706+t88707+t88708+1.0;
                double t88712 = gx*t88628*2.0;
                double t88713 = gamma_bb[index]*t88625*t88699*2.0;
                double t88710 = t88712+t88713;
                double t88711 = 1.0/(t88709*t88709);
                double t88714 = 1.0/(t88705*t88705);
                double t88715 = gx*t88628*3.0;
                double t88716 = gamma_bb[index]*t88625*t88699*6.0;
                double t88717 = gx*t88670*t88666*t88699*3.0;
                double t88718 = t88715+t88716+t88717;
                double t88719 = 1.0/(t88701*t88701);
                double t88720 = 1.0/t88705;
                double t88721 = 1.0/t88709;
                double t88722 = 1.0/(t88701*t88701*t88701);
                double t88723 = t88699*t88699;
                double t88724 = t88625*t88699*6.0;
                double t88725 = gamma_bb[index]*gx*t88670*t88699*6.0;
                double t88726 = t88724+t88725;
                double t88727 = t88710*t88710;
                double t88728 = 1.0/(t88705*t88705*t88705);
                double t88729 = t88718*t88718;
                double t88730 = 1.0/(t88709*t88709*t88709);
                v_gamma_bb_gamma_bb_[index] = (-rho_b[index]*t88662+t88595*(t88612-t88623*t88617*t88618*t88576*(t88612- \
                   c0f*log((t88577*(1.0/2.0))/(b1f*t88598+b3f*t88599+b2f*c*t88596+b4f*t88600*t88557)+1.0)*(a1f*c*t88596+ \
                   1.0)*2.0)+(Aa*t88623*t88576*log((1.0/2.0)/(Aa*(b1a*t88598+b3a*t88599+b2a*c*t88596+b4a*t88600*t88557) \
                   )+1.0)*(t88617*t88618-1.0)*(a1a*c*t88596+1.0)*2.0)/d2fz0)+rho_a[index]*(t88573*t88576*(c0p*t88570* \
                   t88568*2.0-c0f*log((t88577*(1.0/2.0))/(b1f*t88555+b3f*t88556+b2f*c*t88553+b4f*t88557*t88558)+1.0)* \
                   (a1f*c*t88553+1.0)*2.0)-c0p*t88570*t88568*2.0))*(ccab1*1.0/(t88632*t88632)*t88624*t88625*(1.0/2.0) \
                   -(ccab2*t88624*t88625*(1.0/2.0))/t88636-ccab2*t88624*t88633*(t88642*t88642)*1.0/(t88636*t88636*t88636) \
                   *2.0+ccab2*(t88624*t88624)*t88633*t88625*t88645*(1.0/2.0)+ccab2*t88630*t88624*t88642*t88645*t88628* \
                   2.0-ccab1*gcab*t88630*1.0/(t88632*t88632*t88632)*t88624*t88625*(1.0/2.0)-(ccab3*gcab*t88630*t88624* \
                   t88625*(3.0/2.0))/t88641-ccab3*gcab*t88630*1.0/(t88641*t88641*t88641)*t88624*t88633*(t88637*t88637) \
                   *2.0+ccab3*gcab*t88624*t88633*t88628*t88637*t88649*3.0+ccab3*gcab*t88630*t88624*t88633*t88649*(t88624* \
                   t88625*(3.0/2.0)+gcab*t88630*t88624*t88625*(3.0/2.0)))+rho_b[index]*t88662*(ccaa1*t88625*t88663*1.0/ \
                   (t88665*t88665)*2.0-(ccaa2*t88625*t88663*2.0)/t88669+ccaa2*t88702*(t88663*t88663)*t88666*t88679*2.0- \
                   ccaa1*gamma_bb[index]*gcaa*t88670*t88663*1.0/(t88665*t88665*t88665)*2.0-(ccaa3*gamma_bb[index]*gcaa* \
                   t88670*t88663*6.0)/t88674-ccaa2*t88625*t88663*t88666*(t88675*t88675)*1.0/(t88669*t88669*t88669)*2.0+ \
                   ccaa2*gamma_bb[index]*t88625*t88663*t88675*t88679*4.0+ccaa3*gcaa*t88670*t88663*t88683*t88666*t88676* \
                   6.0+ccaa3*gamma_bb[index]*gcaa*t88670*t88663*t88666*t88676*(t88625*t88663*6.0+gamma_bb[index]*gcaa* \
                   t88670*t88663*6.0)-ccaa3*gamma_bb[index]*gcaa*t88670*t88663*1.0/(t88674*t88674*t88674)*(t88683*t88683) \
                   *t88666*2.0)-c0*pow(rho_b[index],4.0/3.0)*(X-1.0)*((t88695/t88697-t88695*t88696*1.0/(t88697*t88697* \
                   t88697)*2.0+t88695*1.0/(t88697*t88697*t88697*t88697*t88697)*t88698)*(cxnl2*t88720*t88625*t88699*2.0- \
                   cxnl1*t88625*t88719*t88699*2.0-cxnl2*t88702*t88714*t88723*t88666*2.0+cxnl2*t88625*t88727*t88728*t88666* \
                   t88699*2.0+cxnl1*gamma_bb[index]*gx*t88722*t88670*t88699*2.0+cxnl3*gamma_bb[index]*gx*t88721*t88670* \
                   t88699*6.0-cxnl2*gamma_bb[index]*t88710*t88714*t88625*t88699*4.0-cxnl3*gx*t88711*t88670*t88718*t88666* \
                   t88699*6.0-cxnl3*gamma_bb[index]*gx*t88711*t88670*t88726*t88666*t88699+cxnl3*gamma_bb[index]*gx*t88730* \
                   t88670*t88666*t88729*t88699*2.0)-cx1*t88625*t88719*t88699*2.0+cx2*t88720*t88625*t88699*2.0-cx2*t88702* \
                   t88714*t88723*t88666*2.0+cx2*t88625*t88727*t88728*t88666*t88699*2.0+cx1*gamma_bb[index]*gx*t88722* \
                   t88670*t88699*2.0+cx3*gamma_bb[index]*gx*t88721*t88670*t88699*6.0-cx2*gamma_bb[index]*t88710*t88714* \
                   t88625*t88699*4.0-cx3*gx*t88711*t88670*t88718*t88666*t88699*6.0-cx3*gamma_bb[index]*gx*t88711*t88670* \
                   t88726*t88666*t88699+cx3*gamma_bb[index]*gx*t88730*t88670*t88666*t88729*t88699*2.0);
            } else if (rho_a[index] > cutoff_) {
                v_gamma_bb_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                double t89868 = 1.0/pow(rho_b[index],1.0/3.0);
                double t89869 = c*t89868;
                double t89870 = sqrt(t89869);
                double t89871 = pow(t89869,3.0/2.0);
                double t89872 = c*c;
                double t89873 = 1.0/pow(rho_b[index],2.0/3.0);
                double t89874 = 1.0/c0p;
                double t89875 = b1p*t89870;
                double t89876 = b3p*t89871;
                double t89877 = b4p*t89872*t89873;
                double t89878 = b2p*c*t89868;
                double t89879 = t89875+t89876+t89877+t89878;
                double t89880 = 1.0/t89879;
                double t89881 = t89880*t89874*(1.0/2.0);
                double t89882 = t89881+1.0;
                double t89883 = log(t89882);
                double t89884 = a1p*c*t89868;
                double t89885 = t89884+1.0;
                double t89886 = gcaa*gcaa;
                double t89887 = 1.0/pow(rho_b[index],1.6E1/3.0);
                double t89888 = 1.0/pow(rho_b[index],8.0/3.0);
                double t89889 = gamma_bb[index]*gcaa*t89888;
                double t89890 = t89889+1.0;
                double t89891 = gamma_bb[index]*gamma_bb[index];
                double t89892 = gamma_bb[index]*gcaa*t89888*2.0;
                double t89893 = t89891*t89886*t89887;
                double t89894 = t89892+t89893+1.0;
                double t89895 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]);
                double t89896 = gamma_bb[index]*gcaa*t89888*3.0;
                double t89897 = gamma_bb[index]*gcaa*t89891*t89886*t89895;
                double t89898 = t89891*t89886*t89887*3.0;
                double t89899 = t89896+t89897+t89898+1.0;
                double t89902 = gcaa*t89888*2.0;
                double t89903 = gamma_bb[index]*t89886*t89887*2.0;
                double t89900 = t89902+t89903;
                double t89901 = 1.0/(t89899*t89899);
                double t89904 = 1.0/(t89894*t89894);
                double t89905 = gcaa*t89888*3.0;
                double t89906 = gamma_bb[index]*t89886*t89887*6.0;
                double t89907 = gcaa*t89891*t89886*t89895*3.0;
                double t89908 = t89905+t89906+t89907;
                double t89909 = pow(rho_b[index],5.0/3.0);
                double t89910 = C_k*t89909;
                double t89919 = tau_a[index]*1.0E20;
                double t89911 = t89910-t89919;
                double t89912 = ( (t89911 > 0.0) ?  1.0 : 0.0 ) ;
                double t89913 = t89912*1.0E20;
                double t89914 = 1.0/tau_b[index];
                double t89915 = tau_b[index]*1.0E20;
                double t89916 = -t89910+t89915;
                double t89917 = ( (t89916 > 0.0) ?  1.0 : 0.0 ) ;
                double t89918 = C_k*t89914*t89917*t89909;
                double t89920 = t89913+t89918-1.0;
                double t89921 = t89920*t89920;
                double t89922 = t89913+t89918+1.0;
                double t89923 = t89921*t89921;
                double t89924 = gx*gx;
                double t89925 = gamma_bb[index]*gx*t89888;
                double t89926 = t89925+1.0;
                double t89927 = 1.0/pow(rho_b[index],3.2E1/3.0);
                double t89928 = gamma_bb[index]*gx*t89888*2.0;
                double t89929 = t89924*t89891*t89887;
                double t89930 = t89928+t89929+1.0;
                double t89931 = gamma_bb[index]*gx*t89888*3.0;
                double t89932 = gamma_bb[index]*gx*t89924*t89891*t89895;
                double t89933 = t89924*t89891*t89887*3.0;
                double t89934 = t89931+t89932+t89933+1.0;
                double t89937 = gx*t89888*2.0;
                double t89938 = gamma_bb[index]*t89924*t89887*2.0;
                double t89935 = t89937+t89938;
                double t89936 = 1.0/(t89934*t89934);
                double t89939 = 1.0/(t89930*t89930);
                double t89940 = gx*t89888*3.0;
                double t89941 = gamma_bb[index]*t89924*t89887*6.0;
                double t89942 = gx*t89924*t89891*t89895*3.0;
                double t89943 = t89940+t89941+t89942;
                double t89944 = 1.0/(t89926*t89926);
                double t89945 = 1.0/t89930;
                double t89946 = 1.0/t89934;
                double t89947 = 1.0/(t89926*t89926*t89926);
                double t89948 = t89924*t89924;
                double t89949 = t89924*t89887*6.0;
                double t89950 = gamma_bb[index]*gx*t89924*t89895*6.0;
                double t89951 = t89950+t89949;
                double t89952 = t89935*t89935;
                double t89953 = 1.0/(t89930*t89930*t89930);
                double t89954 = t89943*t89943;
                double t89955 = 1.0/(t89934*t89934*t89934);
                v_gamma_bb_gamma_bb_[index] = rho_b[index]*(((pow(2.0,1.0/3.0)*2.0-2.0)*(c0f*log((1.0/2.0)/(c0f*(b1f* \
                   t89870+b3f*t89871+b2f*c*t89868+b4f*t89872*t89873))+1.0)*(a1f*c*t89868+1.0)*2.0-c0p*t89883*t89885*2.0) \
                   )/(two_13*2.0-2.0)+c0p*t89883*t89885*2.0)*(ccaa1*1.0/(t89890*t89890)*t89886*t89887*2.0-(ccaa2*t89886* \
                   t89887*2.0)/t89894+ccaa2*t89904*t89891*t89927*(t89886*t89886)*2.0-ccaa1*gamma_bb[index]*gcaa*1.0/(t89890* \
                   t89890*t89890)*t89886*t89895*2.0-(ccaa3*gamma_bb[index]*gcaa*t89886*t89895*6.0)/t89899-ccaa2*(t89900* \
                   t89900)*t89891*1.0/(t89894*t89894*t89894)*t89886*t89887*2.0+ccaa2*gamma_bb[index]*t89900*t89904*t89886* \
                   t89887*4.0+ccaa3*gcaa*t89901*t89908*t89891*t89886*t89895*6.0+ccaa3*gamma_bb[index]*gcaa*t89901*t89891* \
                   t89886*t89895*(t89886*t89887*6.0+gamma_bb[index]*gcaa*t89886*t89895*6.0)-ccaa3*gamma_bb[index]*gcaa* \
                   (t89908*t89908)*t89891*t89886*t89895*1.0/(t89899*t89899*t89899)*2.0)+c0*pow(rho_b[index],4.0/3.0)* \
                   (X-1.0)*((t89920/t89922-t89920*t89921*1.0/(t89922*t89922*t89922)*2.0+t89920*1.0/(t89922*t89922*t89922* \
                   t89922*t89922)*t89923)*(cxnl1*t89924*t89944*t89887*2.0-cxnl2*t89924*t89945*t89887*2.0+cxnl2*t89891* \
                   t89927*t89939*t89948*2.0-cxnl2*t89924*t89952*t89953*t89891*t89887*2.0-cxnl1*gamma_bb[index]*gx*t89924* \
                   t89947*t89895*2.0-cxnl3*gamma_bb[index]*gx*t89924*t89946*t89895*6.0+cxnl2*gamma_bb[index]*t89924*t89935* \
                   t89939*t89887*4.0+cxnl3*gx*t89924*t89943*t89891*t89936*t89895*6.0+cxnl3*gamma_bb[index]*gx*t89924* \
                   t89951*t89891*t89936*t89895-cxnl3*gamma_bb[index]*gx*t89924*t89891*t89954*t89955*t89895*2.0)+cx1*t89924* \
                   t89944*t89887*2.0-cx2*t89924*t89945*t89887*2.0+cx2*t89891*t89927*t89939*t89948*2.0-cx2*t89924*t89952* \
                   t89953*t89891*t89887*2.0-cx1*gamma_bb[index]*gx*t89924*t89947*t89895*2.0-cx3*gamma_bb[index]*gx*t89924* \
                   t89946*t89895*6.0+cx2*gamma_bb[index]*t89924*t89935*t89939*t89887*4.0+cx3*gx*t89924*t89943*t89891* \
                   t89936*t89895*6.0+cx3*gamma_bb[index]*gx*t89924*t89951*t89891*t89936*t89895-cx3*gamma_bb[index]*gx* \
                   t89924*t89891*t89954*t89955*t89895*2.0);
            } else {
                v_gamma_bb_gamma_bb_[index] = 0.0;
            } 

        }
        if (is_meta_) {

            //V_rho_a_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t88732 = 1.0/pow(rho_a[index],8.0/3.0);
                double t88733 = gamma_aa[index]*gamma_aa[index];
                double t88734 = gx*gx;
                double t88735 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t88736 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t88737 = pow(rho_a[index],5.0/3.0);
                double t88738 = C_k*t88737;
                double t88739 = tau_a[index]*1.0E20;
                double t88740 = -t88738+t88739;
                double t88741 = 1.0/tau_a[index];
                double t88742 = 0.0 ;
                double t88743 = C_k*C_k;
                double t88744 = pow(rho_a[index],7.0/3.0);
                double t88745 = pow(rho_a[index],2.0/3.0);
                double t88746 = 0.0 ;
                double t88747 = 1.0/(tau_a[index]*tau_a[index]);
                double t88748 = ( (t88740 > 0.0) ?  1.0 : 0.0 ) ;
                double t88749 = C_k*t88741*t88737*t88748;
                double t88750 = t88738-t88739;
                double t88751 = ( (t88750 > 0.0) ?  1.0 : 0.0 ) ;
                double t88752 = t88751*1.0E20;
                double t88753 = t88752+t88749+1.0;
                double t88754 = 1.0/(t88753*t88753);
                double t88755 = C_k*t88742*t88745*(5.0E40/3.0);
                double t88756 = t88743*t88744*t88746*t88747*(5.0/3.0);
                double t88757 = C_k*t88741*t88745*t88746*(5.0E20/3.0);
                double t88760 = t88741*t88742*t88743*t88744*(5.0E20/3.0);
                double t88761 = C_k*t88745*t88747*t88748*(5.0/3.0);
                double t88758 = -t88760-t88761+t88755+t88756+t88757;
                double t88759 = t88752+t88749-1.0;
                double t88762 = t88759*t88759;
                double t88763 = t88762*t88762;
                double t88764 = t88746*1.0E40;
                double t88765 = C_k*t88737*t88747*t88748;
                double t88771 = C_k*t88741*t88737*t88746*1.0E20;
                double t88766 = -t88771+t88764+t88765;
                double t88767 = C_k*t88745*t88746*(5.0E20/3.0);
                double t88768 = C_k*t88741*t88745*t88748*(5.0/3.0);
                double t88772 = t88741*t88743*t88744*t88746*(5.0/3.0);
                double t88769 = -t88772+t88767+t88768;
                double t88770 = 1.0/(t88753*t88753*t88753);
                double t88773 = 1.0/(t88753*t88753*t88753*t88753);
                double t88774 = 1.0/(t88753*t88753*t88753*t88753*t88753);
                double t88775 = 1.0/(t88753*t88753*t88753*t88753*t88753*t88753);
                double t88776 = gamma_aa[index]*gx*t88732;
                double t88777 = t88776+1.0;
                double t88778 = 1.0/t88777;
                double t88779 = gamma_aa[index]*gx*t88732*3.0;
                double t88780 = gamma_aa[index]*gx*t88733*t88734*t88735;
                double t88781 = t88733*t88734*t88736*3.0;
                double t88782 = t88780+t88781+t88779+1.0;
                double t88783 = 1.0/t88782;
                double t88784 = gamma_aa[index]*gx*t88732*2.0;
                double t88785 = t88733*t88734*t88736;
                double t88786 = t88784+t88785+1.0;
                double t88787 = 1.0/t88786;
                double t88788 = 1.0/pow(rho_a[index],1.9E1/3.0);
                double t88789 = 1.0/pow(rho_a[index],1.1E1/3.0);
                double t88790 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]*rho_a[index]);
                double t88791 = cxnl1*gamma_aa[index]*gx*t88732*t88778;
                double t88792 = cxnl3*gamma_aa[index]*gx*t88733*t88734*t88735*t88783;
                double t88793 = cxnl2*t88733*t88734*t88736*t88787;
                double t88794 = cxnl0+t88791+t88792+t88793;
                double t88795 = 1.0/t88753;
                double t88796 = t88766*t88795;
                double t88797 = t88762*t88773*t88766*t88759*6.0;
                double t88798 = t88763*t88774*t88766*5.0;
                double t88799 = t88796+t88797+t88798-t88770*t88762*t88766*6.0-t88754*t88766*t88759-t88763*t88766* \
                   t88775*t88759*5.0;
                v_rho_a_tau_a_[index] = -(c0*pow(rho_a[index],4.0/3.0)*(t88794*(t88758*t88795-t88770*t88762*t88758* \
                   6.0+t88763*t88774*t88758*5.0+t88754*t88766*t88769*2.0-t88754*t88758*t88759-t88762*t88773*t88766*t88769* \
                   3.6E1+t88762*t88773*t88758*t88759*6.0+t88770*t88766*t88759*t88769*1.0E1+t88763*t88766*t88775*t88769* \
                   5.0E1-t88763*t88775*t88758*t88759*5.0-1.0/(t88753*t88753*t88753*t88753*t88753*t88753*t88753)*t88763* \
                   t88766*t88759*t88769*3.0E1+t88762*t88774*t88766*t88759*t88769*4.0)+t88799*(cxnl1*gamma_aa[index]*gx* \
                   t88778*t88789*(8.0/3.0)+cxnl2*t88733*t88734*t88787*t88788*(1.6E1/3.0)-cxnl1*t88733*t88734*1.0/(t88777* \
                   t88777)*t88788*(8.0/3.0)-cxnl2*t88733*t88734*t88736*1.0/(t88786*t88786)*(gamma_aa[index]*gx*t88789* \
                   (1.6E1/3.0)+t88733*t88734*t88788*(1.6E1/3.0))+cxnl3*gamma_aa[index]*gx*t88733*t88734*t88790*t88783* \
                   8.0-cxnl3*gamma_aa[index]*gx*t88733*t88734*t88735*1.0/(t88782*t88782)*(gamma_aa[index]*gx*t88789*8.0+ \
                   t88733*t88734*t88788*1.6E1+gamma_aa[index]*gx*t88733*t88734*t88790*8.0)))-c0*pow(rho_a[index],1.0/ \
                   3.0)*t88794*t88799*(4.0/3.0))*(X-1.0);
            } else if (rho_a[index] > cutoff_) {
                double t91009 = 1.0/pow(rho_a[index],8.0/3.0);
                double t91010 = gamma_aa[index]*gamma_aa[index];
                double t91011 = gx*gx;
                double t91012 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t91013 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t91014 = pow(rho_a[index],5.0/3.0);
                double t91015 = C_k*t91014;
                double t91016 = tau_a[index]*1.0E20;
                double t91017 = -t91015+t91016;
                double t91018 = 1.0/tau_a[index];
                double t91019 = 0.0 ;
                double t91020 = C_k*C_k;
                double t91021 = pow(rho_a[index],7.0/3.0);
                double t91022 = pow(rho_a[index],2.0/3.0);
                double t91023 = 0.0 ;
                double t91024 = 1.0/(tau_a[index]*tau_a[index]);
                double t91025 = ( (t91017 > 0.0) ?  1.0 : 0.0 ) ;
                double t91026 = C_k*t91014*t91025*t91018;
                double t91027 = t91015-t91016;
                double t91028 = ( (t91027 > 0.0) ?  1.0 : 0.0 ) ;
                double t91029 = t91028*1.0E20;
                double t91030 = t91026+t91029+1.0;
                double t91031 = 1.0/(t91030*t91030);
                double t91032 = C_k*t91022*t91019*(5.0E40/3.0);
                double t91033 = t91020*t91021*t91023*t91024*(5.0/3.0);
                double t91034 = C_k*t91022*t91023*t91018*(5.0E20/3.0);
                double t91037 = t91020*t91021*t91018*t91019*(5.0E20/3.0);
                double t91038 = C_k*t91022*t91024*t91025*(5.0/3.0);
                double t91035 = t91032+t91033+t91034-t91037-t91038;
                double t91036 = t91026+t91029-1.0;
                double t91039 = t91036*t91036;
                double t91040 = t91039*t91039;
                double t91041 = t91023*1.0E40;
                double t91042 = C_k*t91014*t91024*t91025;
                double t91048 = C_k*t91014*t91023*t91018*1.0E20;
                double t91043 = t91041+t91042-t91048;
                double t91044 = C_k*t91022*t91023*(5.0E20/3.0);
                double t91045 = C_k*t91022*t91025*t91018*(5.0/3.0);
                double t91049 = t91020*t91021*t91023*t91018*(5.0/3.0);
                double t91046 = t91044+t91045-t91049;
                double t91047 = 1.0/(t91030*t91030*t91030);
                double t91050 = 1.0/(t91030*t91030*t91030*t91030);
                double t91051 = 1.0/(t91030*t91030*t91030*t91030*t91030);
                double t91052 = 1.0/(t91030*t91030*t91030*t91030*t91030*t91030);
                double t91053 = gamma_aa[index]*gx*t91009;
                double t91054 = t91053+1.0;
                double t91055 = 1.0/t91054;
                double t91056 = gamma_aa[index]*gx*t91009*3.0;
                double t91057 = gamma_aa[index]*gx*t91010*t91011*t91012;
                double t91058 = t91010*t91011*t91013*3.0;
                double t91059 = t91056+t91057+t91058+1.0;
                double t91060 = 1.0/t91059;
                double t91061 = gamma_aa[index]*gx*t91009*2.0;
                double t91062 = t91010*t91011*t91013;
                double t91063 = t91061+t91062+1.0;
                double t91064 = 1.0/t91063;
                double t91065 = 1.0/pow(rho_a[index],1.9E1/3.0);
                double t91066 = 1.0/pow(rho_a[index],1.1E1/3.0);
                double t91067 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]*rho_a[index]);
                double t91068 = 1.0/t91030;
                double t91069 = X-1.0;
                double t91070 = cxnl1*gamma_aa[index]*gx*t91009*t91055;
                double t91071 = cxnl3*gamma_aa[index]*gx*t91010*t91011*t91012*t91060;
                double t91072 = cxnl2*t91010*t91011*t91013*t91064;
                double t91073 = cxnl0+t91070+t91071+t91072;
                double t91074 = t91043*t91068;
                double t91075 = t91050*t91043*t91036*t91039*6.0;
                double t91076 = t91040*t91051*t91043*5.0;
                double t91077 = t91074+t91075+t91076-t91031*t91043*t91036-t91043*t91047*t91039*6.0-t91040*t91043* \
                   t91052*t91036*5.0;
                v_rho_a_tau_a_[index] = -c0*pow(rho_a[index],4.0/3.0)*t91069*(t91073*(t91035*t91068+t91040*t91051* \
                   t91035*5.0+t91031*t91043*t91046*2.0-t91031*t91035*t91036-t91035*t91047*t91039*6.0+t91040*t91043*t91052* \
                   t91046*5.0E1-t91040*t91052*t91035*t91036*5.0-t91050*t91043*t91046*t91039*3.6E1+t91050*t91035*t91036* \
                   t91039*6.0+t91043*t91036*t91046*t91047*1.0E1-1.0/(t91030*t91030*t91030*t91030*t91030*t91030*t91030) \
                   *t91040*t91043*t91036*t91046*3.0E1+t91051*t91043*t91036*t91046*t91039*4.0)+t91077*(cxnl1*gamma_aa[index]* \
                   gx*t91055*t91066*(8.0/3.0)+cxnl2*t91010*t91011*t91064*t91065*(1.6E1/3.0)-cxnl1*t91010*t91011*1.0/(t91054* \
                   t91054)*t91065*(8.0/3.0)-cxnl2*t91010*t91011*t91013*1.0/(t91063*t91063)*(gamma_aa[index]*gx*t91066* \
                   (1.6E1/3.0)+t91010*t91011*t91065*(1.6E1/3.0))+cxnl3*gamma_aa[index]*gx*t91010*t91011*t91060*t91067* \
                   8.0-cxnl3*gamma_aa[index]*gx*t91010*t91011*t91012*1.0/(t91059*t91059)*(gamma_aa[index]*gx*t91066*8.0+ \
                   t91010*t91011*t91065*1.6E1+gamma_aa[index]*gx*t91010*t91011*t91067*8.0)))+c0*pow(rho_a[index],1.0/ \
                   3.0)*t91073*t91077*t91069*(4.0/3.0);
            } else if (rho_b[index] > cutoff_) {
                v_rho_a_tau_a_[index] = 0.0;
            } else {
                v_rho_a_tau_a_[index] = 0.0;
            } 

            //V_rho_a_tau_b
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_a_tau_b_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_a_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_a_tau_b_[index] = 0.0;
            } else {
                v_rho_a_tau_b_[index] = 0.0;
            } 

            //V_rho_b_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t88802 = gamma_bb[index]*gamma_bb[index];
                double t88803 = gx*gx;
                double t88804 = 1.0/pow(rho_b[index],8.0/3.0);
                double t88805 = 1.0/pow(rho_b[index],1.6E1/3.0);
                double t88806 = 1.0/pow(rho_b[index],1.9E1/3.0);
                double t88807 = gamma_bb[index]*gx*t88804;
                double t88808 = t88807+1.0;
                double t88809 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]);
                double t88810 = 1.0/pow(rho_b[index],1.1E1/3.0);
                double t88811 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]*rho_b[index]);
                double t88812 = gamma_bb[index]*gx*t88804*3.0;
                double t88813 = gamma_bb[index]*gx*t88802*t88803*t88809;
                double t88814 = t88802*t88803*t88805*3.0;
                double t88815 = t88812+t88813+t88814+1.0;
                double t88816 = gamma_bb[index]*gx*t88804*2.0;
                double t88817 = t88802*t88803*t88805;
                double t88818 = t88816+t88817+1.0;
                double t88819 = tau_a[index]*1.0E20;
                double t88820 = pow(rho_b[index],5.0/3.0);
                double t88821 = C_k*t88820;
                double t88822 = t88821-t88819;
                double t88823 = ( (t88822 > 0.0) ?  1.0 : 0.0 ) ;
                double t88824 = t88823*1.0E20;
                double t88825 = 1.0/tau_b[index];
                double t88826 = tau_b[index]*1.0E20;
                double t88827 = -t88821+t88826;
                double t88828 = ( (t88827 > 0.0) ?  1.0 : 0.0 ) ;
                double t88829 = C_k*t88820*t88825*t88828;
                double t88830 = t88824+t88829-1.0;
                double t88831 = t88824+t88829+1.0;
                double t88832 = -t88821+t88819;
                double t88833 = 0.0 ;
                double t88834 = t88830*t88830;
                double t88835 = t88834*t88834;
                double t88836 = 1.0/t88808;
                double t88837 = 1.0/t88815;
                double t88838 = 1.0/t88818;
                double t88839 = pow(rho_b[index],2.0/3.0);
                double t88840 = 1.0/(t88831*t88831);
                double t88841 = C_k*t88833*t88839*(5.0E20/3.0);
                double t88842 = C_k*C_k;
                double t88843 = pow(rho_b[index],7.0/3.0);
                double t88844 = 0.0 ;
                double t88845 = C_k*t88825*t88828*t88839*(5.0/3.0);
                double t88848 = t88842*t88825*t88843*t88844*(5.0/3.0);
                double t88846 = t88841+t88845-t88848;
                double t88847 = 1.0/(t88831*t88831*t88831*t88831);
                double t88849 = 1.0/(t88831*t88831*t88831*t88831*t88831);
                double t88850 = 1.0/(t88831*t88831*t88831*t88831*t88831*t88831);
                double t88851 = 1.0/t88831;
                double t88852 = 1.0/(t88831*t88831*t88831);
                double t88853 = 0.0 ;
                double t88854 = cxnl1*gamma_bb[index]*gx*t88804*t88836;
                double t88855 = cxnl3*gamma_bb[index]*gx*t88802*t88803*t88809*t88837;
                double t88856 = cxnl2*t88802*t88803*t88805*t88838;
                double t88857 = cxnl0+t88854+t88855+t88856;
                double t88858 = t88830*t88833*t88834*t88847*6.0E40;
                double t88859 = t88833*t88835*t88849*5.0E40;
                double t88860 = t88833*t88851*1.0E40;
                double t88861 = t88860+t88858+t88859-t88830*t88840*t88833*1.0E40-t88833*t88834*t88852*6.0E40-t88830* \
                   t88850*t88833*t88835*5.0E40;
                v_rho_b_tau_a_[index] = -(c0*pow(rho_b[index],4.0/3.0)*(t88857*(t88840*t88833*t88846*2.0E40+t88830* \
                   t88833*t88852*t88846*1.0E41+t88850*t88833*t88835*t88846*5.0E41-t88833*t88834*t88846*t88847*3.6E41+ \
                   C_k*t88851*t88853*t88839*(5.0E40/3.0)-t88830*1.0/(t88831*t88831*t88831*t88831*t88831*t88831*t88831) \
                   *t88833*t88835*t88846*3.0E41-C_k*t88830*t88840*t88853*t88839*(5.0E40/3.0)-C_k*t88834*t88852*t88853* \
                   t88839*1.0E41+C_k*t88835*t88853*t88839*t88849*(2.5E41/3.0)+t88830*t88833*t88834*t88846*t88849*4.0E40- \
                   C_k*t88830*t88850*t88835*t88853*t88839*(2.5E41/3.0)+C_k*t88830*t88834*t88853*t88847*t88839*1.0E41) \
                   +t88861*(cxnl1*gamma_bb[index]*gx*t88810*t88836*(8.0/3.0)+cxnl2*t88802*t88803*t88806*t88838*(1.6E1/ \
                   3.0)-cxnl1*t88802*t88803*t88806*1.0/(t88808*t88808)*(8.0/3.0)-cxnl2*t88802*t88803*t88805*1.0/(t88818* \
                   t88818)*(gamma_bb[index]*gx*t88810*(1.6E1/3.0)+t88802*t88803*t88806*(1.6E1/3.0))+cxnl3*gamma_bb[index]* \
                   gx*t88802*t88811*t88803*t88837*8.0-cxnl3*gamma_bb[index]*gx*t88802*t88803*1.0/(t88815*t88815)*t88809* \
                   (gamma_bb[index]*gx*t88810*8.0+t88802*t88803*t88806*1.6E1+gamma_bb[index]*gx*t88802*t88811*t88803* \
                   8.0)))-c0*pow(rho_b[index],1.0/3.0)*t88861*t88857*(4.0/3.0))*(X-1.0);
            } else if (rho_a[index] > cutoff_) {
                v_rho_b_tau_a_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                double t89959 = gamma_bb[index]*gamma_bb[index];
                double t89960 = gx*gx;
                double t89961 = 1.0/pow(rho_b[index],8.0/3.0);
                double t89962 = 1.0/pow(rho_b[index],1.6E1/3.0);
                double t89963 = 1.0/pow(rho_b[index],1.9E1/3.0);
                double t89964 = gamma_bb[index]*gx*t89961;
                double t89965 = t89964+1.0;
                double t89966 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]);
                double t89967 = 1.0/pow(rho_b[index],1.1E1/3.0);
                double t89968 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]*rho_b[index]);
                double t89969 = gamma_bb[index]*gx*t89961*3.0;
                double t89970 = gamma_bb[index]*gx*t89960*t89966*t89959;
                double t89971 = t89960*t89962*t89959*3.0;
                double t89972 = t89970+t89971+t89969+1.0;
                double t89973 = gamma_bb[index]*gx*t89961*2.0;
                double t89974 = t89960*t89962*t89959;
                double t89975 = t89973+t89974+1.0;
                double t89976 = tau_a[index]*1.0E20;
                double t89977 = pow(rho_b[index],5.0/3.0);
                double t89978 = C_k*t89977;
                double t89979 = -t89976+t89978;
                double t89980 = ( (t89979 > 0.0) ?  1.0 : 0.0 ) ;
                double t89981 = t89980*1.0E20;
                double t89982 = 1.0/tau_b[index];
                double t89983 = tau_b[index]*1.0E20;
                double t89984 = t89983-t89978;
                double t89985 = ( (t89984 > 0.0) ?  1.0 : 0.0 ) ;
                double t89986 = C_k*t89982*t89985*t89977;
                double t89987 = t89981+t89986-1.0;
                double t89988 = t89981+t89986+1.0;
                double t89989 = t89976-t89978;
                double t89990 = 0.0 ;
                double t89991 = t89987*t89987;
                double t89992 = t89991*t89991;
                double t89993 = 1.0/t89965;
                double t89994 = 1.0/t89972;
                double t89995 = 1.0/t89975;
                double t89996 = pow(rho_b[index],2.0/3.0);
                double t89997 = 1.0/(t89988*t89988);
                double t89998 = C_k*t89990*t89996*(5.0E20/3.0);
                double t89999 = C_k*C_k;
                double t90000 = pow(rho_b[index],7.0/3.0);
                double t90001 = 0.0 ;
                double t90002 = C_k*t89982*t89985*t89996*(5.0/3.0);
                double t90005 = t89982*t89999*t90000*t90001*(5.0/3.0);
                double t90003 = t89998+t90002-t90005;
                double t90004 = 1.0/(t89988*t89988*t89988*t89988);
                double t90006 = 1.0/(t89988*t89988*t89988*t89988*t89988);
                double t90007 = 1.0/(t89988*t89988*t89988*t89988*t89988*t89988);
                double t90008 = 1.0/t89988;
                double t90009 = 1.0/(t89988*t89988*t89988);
                double t90010 = 0.0 ;
                double t90011 = X-1.0;
                double t90012 = cxnl1*gamma_bb[index]*gx*t89961*t89993;
                double t90013 = cxnl3*gamma_bb[index]*gx*t89960*t89966*t89994*t89959;
                double t90014 = cxnl2*t89960*t89962*t89959*t89995;
                double t90015 = cxnl0+t90012+t90013+t90014;
                double t90016 = t89990*t90008*1.0E40;
                double t90017 = t89990*t89991*t89987*t90004*6.0E40;
                double t90018 = t89990*t89992*t90006*5.0E40;
                double t90019 = t90016+t90017+t90018-t89990*t89987*t89997*1.0E40-t89990*t89991*t90009*6.0E40-t89990* \
                   t89992*t89987*t90007*5.0E40;
                v_rho_b_tau_a_[index] = -c0*pow(rho_b[index],4.0/3.0)*t90011*(t90015*(t89990*t89997*t90003*2.0E40- \
                   t89990*t89991*t90003*t90004*3.6E41+t89990*t89992*t90003*t90007*5.0E41+t89990*t89987*t90003*t90009* \
                   1.0E41+C_k*t89996*t90010*t90008*(5.0E40/3.0)-t89990*t89992*t89987*1.0/(t89988*t89988*t89988*t89988* \
                   t89988*t89988*t89988)*t90003*3.0E41-C_k*t89987*t89996*t89997*t90010*(5.0E40/3.0)+C_k*t89992*t89996* \
                   t90010*t90006*(2.5E41/3.0)-C_k*t89991*t89996*t90010*t90009*1.0E41+t89990*t89991*t89987*t90003*t90006* \
                   4.0E40+C_k*t89991*t89987*t89996*t90010*t90004*1.0E41-C_k*t89992*t89987*t89996*t90010*t90007*(2.5E41/ \
                   3.0))+t90019*(cxnl1*gamma_bb[index]*gx*t89993*t89967*(8.0/3.0)+cxnl2*t89960*t89963*t89959*t89995*(1.6E1/ \
                   3.0)-cxnl1*t89960*t89963*1.0/(t89965*t89965)*t89959*(8.0/3.0)-cxnl2*t89960*t89962*1.0/(t89975*t89975) \
                   *t89959*(gamma_bb[index]*gx*t89967*(1.6E1/3.0)+t89960*t89963*t89959*(1.6E1/3.0))+cxnl3*gamma_bb[index]* \
                   gx*t89960*t89994*t89959*t89968*8.0-cxnl3*gamma_bb[index]*gx*t89960*1.0/(t89972*t89972)*t89966*t89959* \
                   (gamma_bb[index]*gx*t89967*8.0+t89960*t89963*t89959*1.6E1+gamma_bb[index]*gx*t89960*t89959*t89968* \
                   8.0)))+c0*pow(rho_b[index],1.0/3.0)*t90011*t90015*t90019*(4.0/3.0);
            } else {
                v_rho_b_tau_a_[index] = 0.0;
            } 

            //V_rho_b_tau_b
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t88863 = 1.0/pow(rho_b[index],8.0/3.0);
                double t88864 = gamma_bb[index]*gamma_bb[index];
                double t88865 = gx*gx;
                double t88866 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]);
                double t88867 = 1.0/pow(rho_b[index],1.6E1/3.0);
                double t88868 = pow(rho_b[index],5.0/3.0);
                double t88869 = C_k*t88868;
                double t88870 = 1.0/tau_b[index];
                double t88871 = tau_b[index]*1.0E20;
                double t88872 = t88871-t88869;
                double t88873 = C_k*C_k;
                double t88874 = pow(rho_b[index],7.0/3.0);
                double t88875 = 0.0 ;
                double t88876 = pow(rho_b[index],2.0/3.0);
                double t88877 = 1.0/(tau_b[index]*tau_b[index]);
                double t88878 = ( (t88872 > 0.0) ?  1.0 : 0.0 ) ;
                double t88883 = tau_a[index]*1.0E20;
                double t88879 = -t88883+t88869;
                double t88880 = ( (t88879 > 0.0) ?  1.0 : 0.0 ) ;
                double t88881 = t88880*1.0E20;
                double t88882 = C_k*t88870*t88868*t88878;
                double t88884 = t88881+t88882+1.0;
                double t88885 = 0.0 ;
                double t88886 = t88870*t88873*t88874*t88885*(5.0E20/3.0);
                double t88887 = C_k*t88876*t88877*t88878*(5.0/3.0);
                double t88891 = t88873*t88874*t88875*t88877*(5.0/3.0);
                double t88892 = C_k*t88870*t88875*t88876*(5.0E20/3.0);
                double t88888 = -t88891-t88892+t88886+t88887;
                double t88889 = 1.0/(t88884*t88884);
                double t88890 = t88881+t88882-1.0;
                double t88893 = t88890*t88890;
                double t88894 = t88893*t88893;
                double t88895 = C_k*t88870*t88875*t88868*1.0E20;
                double t88903 = C_k*t88868*t88877*t88878;
                double t88896 = -t88903+t88895;
                double t88897 = t88883-t88869;
                double t88898 = 0.0 ;
                double t88899 = C_k*t88876*t88898*(5.0E20/3.0);
                double t88900 = C_k*t88870*t88876*t88878*(5.0/3.0);
                double t88904 = t88870*t88873*t88874*t88875*(5.0/3.0);
                double t88901 = t88900-t88904+t88899;
                double t88902 = 1.0/(t88884*t88884*t88884);
                double t88905 = 1.0/(t88884*t88884*t88884*t88884);
                double t88906 = 1.0/(t88884*t88884*t88884*t88884*t88884);
                double t88907 = 1.0/(t88884*t88884*t88884*t88884*t88884*t88884);
                double t88908 = 1.0/t88884;
                double t88909 = gamma_bb[index]*gx*t88863;
                double t88910 = t88909+1.0;
                double t88911 = 1.0/t88910;
                double t88912 = gamma_bb[index]*gx*t88863*3.0;
                double t88913 = gamma_bb[index]*gx*t88864*t88865*t88866;
                double t88914 = t88864*t88865*t88867*3.0;
                double t88915 = t88912+t88913+t88914+1.0;
                double t88916 = 1.0/t88915;
                double t88917 = gamma_bb[index]*gx*t88863*2.0;
                double t88918 = t88864*t88865*t88867;
                double t88919 = t88917+t88918+1.0;
                double t88920 = 1.0/t88919;
                double t88921 = 1.0/pow(rho_b[index],1.9E1/3.0);
                double t88922 = 1.0/pow(rho_b[index],1.1E1/3.0);
                double t88923 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]*rho_b[index]);
                double t88924 = cxnl1*gamma_bb[index]*gx*t88911*t88863;
                double t88925 = cxnl3*gamma_bb[index]*gx*t88916*t88864*t88865*t88866;
                double t88926 = cxnl2*t88920*t88864*t88865*t88867;
                double t88927 = cxnl0+t88924+t88925+t88926;
                double t88928 = t88908*t88896;
                double t88929 = t88905*t88890*t88893*t88896*6.0;
                double t88930 = t88906*t88894*t88896*5.0;
                double t88931 = t88930+t88928+t88929-t88902*t88893*t88896*6.0-t88890*t88896*t88889-t88907*t88890* \
                   t88894*t88896*5.0;
                v_rho_b_tau_b_[index] = (c0*pow(rho_b[index],4.0/3.0)*(t88927*(t88908*t88888-t88902*t88893*t88888* \
                   6.0+t88901*t88896*t88889*2.0+t88906*t88894*t88888*5.0-t88890*t88888*t88889+t88901*t88902*t88890*t88896* \
                   1.0E1-t88901*t88905*t88893*t88896*3.6E1+t88901*t88907*t88894*t88896*5.0E1+t88905*t88890*t88893*t88888* \
                   6.0-t88907*t88890*t88894*t88888*5.0-t88901*t88890*1.0/(t88884*t88884*t88884*t88884*t88884*t88884*t88884) \
                   *t88894*t88896*3.0E1+t88901*t88906*t88890*t88893*t88896*4.0)+t88931*(cxnl1*gamma_bb[index]*gx*t88911* \
                   t88922*(8.0/3.0)+cxnl2*t88920*t88921*t88864*t88865*(1.6E1/3.0)-cxnl1*1.0/(t88910*t88910)*t88921*t88864* \
                   t88865*(8.0/3.0)-cxnl2*t88864*t88865*1.0/(t88919*t88919)*t88867*(gamma_bb[index]*gx*t88922*(1.6E1/ \
                   3.0)+t88921*t88864*t88865*(1.6E1/3.0))+cxnl3*gamma_bb[index]*gx*t88923*t88916*t88864*t88865*8.0-cxnl3* \
                   gamma_bb[index]*gx*1.0/(t88915*t88915)*t88864*t88865*t88866*(gamma_bb[index]*gx*t88922*8.0+t88921* \
                   t88864*t88865*1.6E1+gamma_bb[index]*gx*t88923*t88864*t88865*8.0)))-c0*pow(rho_b[index],1.0/3.0)*t88931* \
                   t88927*(4.0/3.0))*(X-1.0);
            } else if (rho_a[index] > cutoff_) {
                v_rho_b_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                double t90021 = 1.0/pow(rho_b[index],8.0/3.0);
                double t90022 = gamma_bb[index]*gamma_bb[index];
                double t90023 = gx*gx;
                double t90024 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]);
                double t90025 = 1.0/pow(rho_b[index],1.6E1/3.0);
                double t90026 = pow(rho_b[index],5.0/3.0);
                double t90027 = C_k*t90026;
                double t90028 = 1.0/tau_b[index];
                double t90029 = tau_b[index]*1.0E20;
                double t90030 = -t90027+t90029;
                double t90031 = C_k*C_k;
                double t90032 = pow(rho_b[index],7.0/3.0);
                double t90033 = 0.0 ;
                double t90034 = pow(rho_b[index],2.0/3.0);
                double t90035 = 1.0/(tau_b[index]*tau_b[index]);
                double t90036 = ( (t90030 > 0.0) ?  1.0 : 0.0 ) ;
                double t90041 = tau_a[index]*1.0E20;
                double t90037 = -t90041+t90027;
                double t90038 = ( (t90037 > 0.0) ?  1.0 : 0.0 ) ;
                double t90039 = t90038*1.0E20;
                double t90040 = C_k*t90026*t90036*t90028;
                double t90042 = t90040+t90039+1.0;
                double t90043 = 0.0 ;
                double t90044 = t90031*t90032*t90033*t90035*(5.0/3.0);
                double t90045 = C_k*t90033*t90034*t90028*(5.0E20/3.0);
                double t90046 = 1.0/(t90042*t90042);
                double t90047 = t90040+t90039-1.0;
                double t90048 = t90047*t90047;
                double t90050 = t90031*t90032*t90043*t90028*(5.0E20/3.0);
                double t90051 = C_k*t90034*t90035*t90036*(5.0/3.0);
                double t90049 = -t90050-t90051+t90044+t90045;
                double t90052 = t90048*t90048;
                double t90053 = t90050+t90051-t90044-t90045;
                double t90054 = C_k*t90033*t90026*t90028*1.0E20;
                double t90062 = C_k*t90026*t90035*t90036;
                double t90055 = -t90062+t90054;
                double t90056 = t90041-t90027;
                double t90057 = 0.0 ;
                double t90058 = C_k*t90034*t90057*(5.0E20/3.0);
                double t90059 = C_k*t90034*t90036*t90028*(5.0/3.0);
                double t90063 = t90031*t90032*t90033*t90028*(5.0/3.0);
                double t90060 = -t90063+t90058+t90059;
                double t90061 = 1.0/(t90042*t90042*t90042);
                double t90064 = 1.0/(t90042*t90042*t90042*t90042);
                double t90065 = 1.0/(t90042*t90042*t90042*t90042*t90042);
                double t90066 = 1.0/(t90042*t90042*t90042*t90042*t90042*t90042);
                double t90067 = 1.0/t90042;
                double t90068 = gamma_bb[index]*gx*t90021;
                double t90069 = t90068+1.0;
                double t90070 = 1.0/t90069;
                double t90071 = gamma_bb[index]*gx*t90021*3.0;
                double t90072 = gamma_bb[index]*gx*t90022*t90023*t90024;
                double t90073 = t90022*t90023*t90025*3.0;
                double t90074 = t90071+t90072+t90073+1.0;
                double t90075 = 1.0/t90074;
                double t90076 = gamma_bb[index]*gx*t90021*2.0;
                double t90077 = t90022*t90023*t90025;
                double t90078 = t90076+t90077+1.0;
                double t90079 = 1.0/t90078;
                double t90080 = 1.0/pow(rho_b[index],1.9E1/3.0);
                double t90081 = 1.0/pow(rho_b[index],1.1E1/3.0);
                double t90082 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]*rho_b[index]);
                double t90083 = X-1.0;
                double t90084 = cxnl1*gamma_bb[index]*gx*t90021*t90070;
                double t90085 = cxnl3*gamma_bb[index]*gx*t90022*t90023*t90024*t90075;
                double t90086 = cxnl2*t90022*t90023*t90025*t90079;
                double t90087 = cxnl0+t90084+t90085+t90086;
                double t90088 = t90055*t90067;
                double t90089 = t90055*t90064*t90047*t90048*6.0;
                double t90090 = t90052*t90055*t90065*5.0;
                double t90091 = t90090+t90088+t90089-t90061*t90055*t90048*6.0-t90046*t90055*t90047-t90052*t90055* \
                   t90047*t90066*5.0;
                v_rho_b_tau_b_[index] = c0*pow(rho_b[index],4.0/3.0)*t90083*(t90087*(-t90049*t90067+t90060*t90046* \
                   t90055*2.0+t90052*t90053*t90065*5.0+t90061*t90048*t90049*6.0+t90046*t90047*t90049+t90060*t90061*t90055* \
                   t90047*1.0E1+t90060*t90052*t90055*t90066*5.0E1-t90060*t90055*t90064*t90048*3.6E1-t90052*t90053*t90047* \
                   t90066*5.0-t90064*t90047*t90048*t90049*6.0-1.0/(t90042*t90042*t90042*t90042*t90042*t90042*t90042)* \
                   t90060*t90052*t90055*t90047*3.0E1+t90060*t90055*t90047*t90065*t90048*4.0)+t90091*(cxnl1*gamma_bb[index]* \
                   gx*t90070*t90081*(8.0/3.0)+cxnl2*t90022*t90023*t90080*t90079*(1.6E1/3.0)-cxnl1*t90022*t90023*t90080* \
                   1.0/(t90069*t90069)*(8.0/3.0)-cxnl2*t90022*t90023*t90025*1.0/(t90078*t90078)*(gamma_bb[index]*gx*t90081* \
                   (1.6E1/3.0)+t90022*t90023*t90080*(1.6E1/3.0))+cxnl3*gamma_bb[index]*gx*t90022*t90023*t90082*t90075* \
                   8.0-cxnl3*gamma_bb[index]*gx*t90022*t90023*t90024*1.0/(t90074*t90074)*(gamma_bb[index]*gx*t90081*8.0+ \
                   t90022*t90023*t90080*1.6E1+gamma_bb[index]*gx*t90022*t90023*t90082*8.0)))-c0*pow(rho_b[index],1.0/ \
                   3.0)*t90091*t90083*t90087*(4.0/3.0);
            } else {
                v_rho_b_tau_b_[index] = 0.0;
            } 

            //V_tau_a_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t88933 = 1.0/pow(rho_b[index],8.0/3.0);
                double t88934 = gamma_bb[index]*gamma_bb[index];
                double t88935 = gx*gx;
                double t88936 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]);
                double t88937 = 1.0/pow(rho_b[index],1.6E1/3.0);
                double t88938 = tau_a[index]*1.0E20;
                double t88939 = pow(rho_b[index],5.0/3.0);
                double t88940 = C_k*t88939;
                double t88951 = -t88940+t88938;
                double t88941 = 0.0 ;
                double t88942 = t88940-t88938;
                double t88943 = ( (t88942 > 0.0) ?  1.0 : 0.0 ) ;
                double t88944 = t88943*1.0E20;
                double t88945 = 1.0/tau_b[index];
                double t88946 = tau_b[index]*1.0E20;
                double t88947 = -t88940+t88946;
                double t88948 = ( (t88947 > 0.0) ?  1.0 : 0.0 ) ;
                double t88949 = C_k*t88945*t88939*t88948;
                double t88950 = t88944+t88949+1.0;
                double t88952 = t88941*t88941;
                double t88953 = t88944+t88949-1.0;
                double t88954 = 1.0/(t88950*t88950*t88950);
                double t88955 = 0.0 ;
                double t88956 = t88953*t88953;
                double t88957 = t88956*t88956;
                double t88958 = 1.0/(t88950*t88950*t88950*t88950);
                double t88959 = 1.0/(t88950*t88950*t88950*t88950*t88950);
                double t88960 = 1.0/(t88950*t88950*t88950*t88950*t88950*t88950);
                double t88961 = 1.0/(t88950*t88950);
                double t88962 = 1.0/pow(rho_a[index],8.0/3.0);
                double t88963 = gamma_aa[index]*gamma_aa[index];
                double t88964 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t88965 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t88966 = pow(rho_a[index],5.0/3.0);
                double t88967 = C_k*t88966;
                double t88968 = t88938-t88967;
                double t88969 = 1.0/tau_a[index];
                double t88970 = 0.0 ;
                double t88971 = ( (t88968 > 0.0) ?  1.0 : 0.0 ) ;
                double t88972 = 0.0 ;
                double t88973 = 1.0/(tau_a[index]*tau_a[index]);
                double t88980 = t88972*1.0E40;
                double t88981 = C_k*t88972*t88966*t88969*1.0E20;
                double t88982 = C_k*t88971*t88973*t88966;
                double t88974 = t88980-t88981+t88982;
                double t88975 = -t88938+t88967;
                double t88976 = ( (t88975 > 0.0) ?  1.0 : 0.0 ) ;
                double t88977 = t88976*1.0E20;
                double t88978 = C_k*t88971*t88966*t88969;
                double t88979 = t88977+t88978+1.0;
                double t88983 = t88974*t88974;
                double t88984 = t88977+t88978-1.0;
                double t88985 = t88984*t88984;
                double t88986 = t88985*t88985;
                double t88987 = 1.0/(t88979*t88979);
                double t88988 = t88970*1.0E60;
                double t88989 = C_k*t88972*t88973*t88966*2.0E20;
                double t88990 = 1.0/(tau_a[index]*tau_a[index]*tau_a[index]);
                double t88993 = C_k*t88970*t88966*t88969*1.0E40;
                double t88994 = C_k*t88971*t88990*t88966*2.0;
                double t88991 = -t88993-t88994+t88988+t88989;
                double t88992 = 1.0/(t88979*t88979*t88979);
                double t88995 = 1.0/(t88979*t88979*t88979*t88979);
                double t88996 = 1.0/(t88979*t88979*t88979*t88979*t88979);
                double t88997 = 1.0/(t88979*t88979*t88979*t88979*t88979*t88979);
                v_tau_a_tau_a_[index] = (c0*pow(rho_b[index],4.0/3.0)*(cxnl0+(cxnl2*t88934*t88935*t88937)/(gamma_bb[index]* \
                   gx*t88933*2.0+t88934*t88935*t88937+1.0)+(cxnl1*gamma_bb[index]*gx*t88933)/(gamma_bb[index]*gx*t88933+ \
                   1.0)+(cxnl3*gamma_bb[index]*gx*t88934*t88935*t88936)/(gamma_bb[index]*gx*t88933*3.0+t88934*t88935* \
                   t88937*3.0+gamma_bb[index]*gx*t88934*t88935*t88936+1.0))*(t88952*t88961*2.0E80+( 0.0 )/t88950+t88952* \
                   t88953*t88954*1.0E81+t88960*t88952*t88957*5.0E81-t88961*t88953*t88955*1.0E60-t88954*t88955*t88956* \
                   6.0E60-t88952*t88956*t88958*3.6E81+t88955*t88957*t88959*5.0E60-t88960*t88953*t88955*t88957*5.0E60+ \
                   t88952*t88953*t88956*t88959*4.0E80+t88953*t88955*t88956*t88958*6.0E60-1.0/(t88950*t88950*t88950*t88950* \
                   t88950*t88950*t88950)*t88952*t88953*t88957*3.0E81)+c0*pow(rho_a[index],4.0/3.0)*(cxnl0+(cxnl2*t88935* \
                   t88963*t88965)/(gamma_aa[index]*gx*t88962*2.0+t88935*t88963*t88965+1.0)+(cxnl1*gamma_aa[index]*gx* \
                   t88962)/(gamma_aa[index]*gx*t88962+1.0)+(cxnl3*gamma_aa[index]*gx*t88935*t88963*t88964)/(gamma_aa[index]* \
                   gx*t88962*3.0+t88935*t88963*t88965*3.0+gamma_aa[index]*gx*t88935*t88963*t88964+1.0))*(t88983*t88987* \
                   2.0+t88991/t88979-t88991*t88992*t88985*6.0+t88983*t88992*t88984*1.0E1-t88991*t88984*t88987-t88983* \
                   t88985*t88995*3.6E1+t88991*t88986*t88996*5.0+t88983*t88986*t88997*5.0E1+t88991*t88984*t88985*t88995* \
                   6.0+t88983*t88984*t88985*t88996*4.0-t88991*t88984*t88986*t88997*5.0-t88983*t88984*t88986*1.0/(t88979* \
                   t88979*t88979*t88979*t88979*t88979*t88979)*3.0E1))*(X-1.0);
            } else if (rho_a[index] > cutoff_) {
                double t91082 = 1.0/pow(rho_a[index],8.0/3.0);
                double t91083 = gamma_aa[index]*gamma_aa[index];
                double t91084 = gx*gx;
                double t91085 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t91086 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t91087 = pow(rho_a[index],5.0/3.0);
                double t91088 = C_k*t91087;
                double t91089 = tau_a[index]*1.0E20;
                double t91090 = -t91088+t91089;
                double t91091 = 1.0/tau_a[index];
                double t91092 = 0.0 ;
                double t91093 = ( (t91090 > 0.0) ?  1.0 : 0.0 ) ;
                double t91094 = 0.0 ;
                double t91095 = 1.0/(tau_a[index]*tau_a[index]);
                double t91098 = t91094*1.0E40;
                double t91099 = C_k*t91091*t91094*t91087*1.0E20;
                double t91100 = C_k*t91093*t91095*t91087;
                double t91096 = t91100+t91098-t91099;
                double t91097 = C_k*t91091*t91093*t91087;
                double t91101 = t91096*t91096;
                double t91102 = t91088-t91089;
                double t91103 = ( (t91102 > 0.0) ?  1.0 : 0.0 ) ;
                double t91104 = t91103*1.0E20;
                double t91105 = t91104+t91097-1.0;
                double t91106 = t91104+t91097+1.0;
                double t91107 = t91105*t91105;
                double t91108 = t91107*t91107;
                double t91109 = 1.0/(t91106*t91106);
                double t91110 = t91092*1.0E60;
                double t91111 = C_k*t91094*t91095*t91087*2.0E20;
                double t91112 = 1.0/(tau_a[index]*tau_a[index]*tau_a[index]);
                double t91115 = C_k*t91091*t91092*t91087*1.0E40;
                double t91116 = C_k*t91112*t91093*t91087*2.0;
                double t91113 = t91110+t91111-t91115-t91116;
                double t91114 = 1.0/(t91106*t91106*t91106);
                double t91117 = 1.0/(t91106*t91106*t91106*t91106);
                double t91118 = 1.0/(t91106*t91106*t91106*t91106*t91106);
                double t91119 = 1.0/(t91106*t91106*t91106*t91106*t91106*t91106);
                v_tau_a_tau_a_[index] = c0*pow(rho_a[index],4.0/3.0)*(X-1.0)*(cxnl0+(cxnl2*t91083*t91084*t91086)/ \
                   (gamma_aa[index]*gx*t91082*2.0+t91083*t91084*t91086+1.0)+(cxnl1*gamma_aa[index]*gx*t91082)/(gamma_aa[index]* \
                   gx*t91082+1.0)+(cxnl3*gamma_aa[index]*gx*t91083*t91084*t91085)/(gamma_aa[index]*gx*t91082*3.0+t91083* \
                   t91084*t91086*3.0+gamma_aa[index]*gx*t91083*t91084*t91085+1.0))*(t91113/(t91097+ ( (t91088-tau_a[index]* \
                   1.0E20 > 0.0) ? 1.0*1.0E20 : 0.0 ) +1.0)+t91101*t91109*2.0+t91101*t91105*t91114*1.0E1-t91101*t91107* \
                   t91117*3.6E1-t91113*t91114*t91107*6.0-t91113*t91105*t91109+t91101*t91108*t91119*5.0E1+t91113*t91108* \
                   t91118*5.0+t91101*t91105*t91107*t91118*4.0+t91113*t91105*t91107*t91117*6.0-t91113*t91105*t91108*t91119* \
                   5.0-t91101*t91105*1.0/(t91106*t91106*t91106*t91106*t91106*t91106*t91106)*t91108*3.0E1);
            } else if (rho_b[index] > cutoff_) {
                double t90093 = 1.0/pow(rho_b[index],8.0/3.0);
                double t90094 = gamma_bb[index]*gamma_bb[index];
                double t90095 = gx*gx;
                double t90096 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]);
                double t90097 = 1.0/pow(rho_b[index],1.6E1/3.0);
                double t90098 = tau_a[index]*1.0E20;
                double t90099 = pow(rho_b[index],5.0/3.0);
                double t90100 = C_k*t90099;
                double t90111 = -t90100+t90098;
                double t90101 = 0.0 ;
                double t90102 = t90100-t90098;
                double t90103 = ( (t90102 > 0.0) ?  1.0 : 0.0 ) ;
                double t90104 = t90103*1.0E20;
                double t90105 = 1.0/tau_b[index];
                double t90106 = tau_b[index]*1.0E20;
                double t90107 = -t90100+t90106;
                double t90108 = ( (t90107 > 0.0) ?  1.0 : 0.0 ) ;
                double t90109 = C_k*t90105*t90108*t90099;
                double t90110 = t90104+t90109+1.0;
                double t90112 = t90101*t90101;
                double t90113 = t90104+t90109-1.0;
                double t90114 = 1.0/(t90110*t90110*t90110);
                double t90115 = 0.0 ;
                double t90116 = t90113*t90113;
                double t90117 = t90116*t90116;
                double t90118 = 1.0/(t90110*t90110*t90110*t90110);
                double t90119 = 1.0/(t90110*t90110*t90110*t90110*t90110);
                double t90120 = 1.0/(t90110*t90110*t90110*t90110*t90110*t90110);
                double t90121 = 1.0/(t90110*t90110);
                v_tau_a_tau_a_[index] = c0*pow(rho_b[index],4.0/3.0)*(X-1.0)*(cxnl0+(cxnl2*t90094*t90095*t90097)/ \
                   (gamma_bb[index]*gx*t90093*2.0+t90094*t90095*t90097+1.0)+(cxnl1*gamma_bb[index]*gx*t90093)/(gamma_bb[index]* \
                   gx*t90093+1.0)+(cxnl3*gamma_bb[index]*gx*t90094*t90095*t90096)/(gamma_bb[index]*gx*t90093*3.0+t90094* \
                   t90095*t90097*3.0+gamma_bb[index]*gx*t90094*t90095*t90096+1.0))*(t90112*t90121*2.0E80+( 0.0 )/t90110+ \
                   t90112*t90113*t90114*1.0E81+t90120*t90112*t90117*5.0E81-t90121*t90113*t90115*1.0E60-t90114*t90115* \
                   t90116*6.0E60-t90112*t90116*t90118*3.6E81+t90115*t90117*t90119*5.0E60-t90120*t90113*t90115*t90117* \
                   5.0E60+t90112*t90113*t90116*t90119*4.0E80+t90113*t90115*t90116*t90118*6.0E60-1.0/(t90110*t90110*t90110* \
                   t90110*t90110*t90110*t90110)*t90112*t90113*t90117*3.0E81);
            } else {
                v_tau_a_tau_a_[index] = 0.0;
            } 

            //V_tau_a_tau_b
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t88999 = 1.0/pow(rho_b[index],8.0/3.0);
                double t89000 = gamma_bb[index]*gamma_bb[index];
                double t89001 = gx*gx;
                double t89002 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]);
                double t89003 = 1.0/pow(rho_b[index],1.6E1/3.0);
                double t89004 = pow(rho_b[index],5.0/3.0);
                double t89005 = tau_b[index]*1.0E20;
                double t89008 = C_k*t89004;
                double t89006 = t89005-t89008;
                double t89007 = tau_a[index]*1.0E20;
                double t89009 = 1.0/tau_b[index];
                double t89010 = ( (t89006 > 0.0) ?  1.0 : 0.0 ) ;
                double t89011 = t89007-t89008;
                double t89012 = 0.0 ;
                double t89013 = 0.0 ;
                double t89014 = 1.0/(tau_b[index]*tau_b[index]);
                double t89015 = C_k*t89010*t89004*t89014;
                double t89016 = -t89007+t89008;
                double t89017 = ( (t89016 > 0.0) ?  1.0 : 0.0 ) ;
                double t89018 = t89017*1.0E20;
                double t89019 = C_k*t89010*t89004*t89009;
                double t89020 = t89018+t89019+1.0;
                double t89022 = C_k*t89004*t89013*t89009*1.0E20;
                double t89021 = -t89022+t89015;
                double t89023 = t89018+t89019-1.0;
                double t89024 = t89022-t89015;
                double t89025 = t89023*t89023;
                double t89026 = t89025*t89025;
                v_tau_a_tau_b_[index] = c0*pow(rho_b[index],4.0/3.0)*(X-1.0)*(cxnl0+(cxnl2*t89000*t89001*t89003)/ \
                   (gamma_bb[index]*gx*t88999*2.0+t89000*t89001*t89003+1.0)+(cxnl1*gamma_bb[index]*gx*t88999)/(gamma_bb[index]* \
                   gx*t88999+1.0)+(cxnl3*gamma_bb[index]*gx*t89000*t89001*t89002)/(gamma_bb[index]*gx*t88999*3.0+t89000* \
                   t89001*t89003*3.0+gamma_bb[index]*gx*t89000*t89001*t89002+1.0))*(1.0/(t89020*t89020)*t89012*t89021* \
                   2.0E40+1.0/(t89020*t89020*t89020)*t89012*t89021*t89023*1.0E41+1.0/(t89020*t89020*t89020*t89020)*t89012* \
                   t89024*t89025*3.6E41-1.0/(t89020*t89020*t89020*t89020*t89020*t89020)*t89012*t89024*t89026*5.0E41-1.0/ \
                   (t89020*t89020*t89020*t89020*t89020)*t89012*t89023*t89024*t89025*4.0E40+1.0/(t89020*t89020*t89020* \
                   t89020*t89020*t89020*t89020)*t89012*t89023*t89024*t89026*3.0E41);
            } else if (rho_a[index] > cutoff_) {
                v_tau_a_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                double t90123 = 1.0/pow(rho_b[index],8.0/3.0);
                double t90124 = gamma_bb[index]*gamma_bb[index];
                double t90125 = gx*gx;
                double t90126 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]);
                double t90127 = 1.0/pow(rho_b[index],1.6E1/3.0);
                double t90128 = pow(rho_b[index],5.0/3.0);
                double t90129 = tau_b[index]*1.0E20;
                double t90132 = C_k*t90128;
                double t90130 = -t90132+t90129;
                double t90131 = tau_a[index]*1.0E20;
                double t90133 = 1.0/tau_b[index];
                double t90134 = ( (t90130 > 0.0) ?  1.0 : 0.0 ) ;
                double t90135 = t90131-t90132;
                double t90136 = 0.0 ;
                double t90137 = 0.0 ;
                double t90138 = 1.0/(tau_b[index]*tau_b[index]);
                double t90145 = C_k*t90133*t90128*t90137*1.0E20;
                double t90146 = C_k*t90134*t90128*t90138;
                double t90139 = t90145-t90146;
                double t90140 = -t90131+t90132;
                double t90141 = ( (t90140 > 0.0) ?  1.0 : 0.0 ) ;
                double t90142 = t90141*1.0E20;
                double t90143 = C_k*t90133*t90134*t90128;
                double t90144 = t90142+t90143+1.0;
                double t90147 = t90142+t90143-1.0;
                double t90148 = t90147*t90147;
                double t90149 = t90148*t90148;
                v_tau_a_tau_b_[index] = -c0*pow(rho_b[index],4.0/3.0)*(X-1.0)*(cxnl0+(cxnl2*t90124*t90125*t90127) \
                   /(gamma_bb[index]*gx*t90123*2.0+t90124*t90125*t90127+1.0)+(cxnl1*gamma_bb[index]*gx*t90123)/(gamma_bb[index]* \
                   gx*t90123+1.0)+(cxnl3*gamma_bb[index]*gx*t90124*t90125*t90126)/(gamma_bb[index]*gx*t90123*3.0+t90124* \
                   t90125*t90127*3.0+gamma_bb[index]*gx*t90124*t90125*t90126+1.0))*(1.0/(t90144*t90144)*t90136*t90139* \
                   2.0E40+1.0/(t90144*t90144*t90144)*t90136*t90147*t90139*1.0E41-1.0/(t90144*t90144*t90144*t90144)*t90136* \
                   t90139*t90148*3.6E41+1.0/(t90144*t90144*t90144*t90144*t90144*t90144)*t90136*t90139*t90149*5.0E41+1.0/ \
                   (t90144*t90144*t90144*t90144*t90144)*t90136*t90147*t90139*t90148*4.0E40-1.0/(t90144*t90144*t90144* \
                   t90144*t90144*t90144*t90144)*t90136*t90147*t90139*t90149*3.0E41);
            } else {
                v_tau_a_tau_b_[index] = 0.0;
            } 

            //V_tau_b_tau_b
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t89028 = 1.0/pow(rho_b[index],8.0/3.0);
                double t89029 = gamma_bb[index]*gamma_bb[index];
                double t89030 = gx*gx;
                double t89031 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]);
                double t89032 = 1.0/pow(rho_b[index],1.6E1/3.0);
                double t89033 = pow(rho_b[index],5.0/3.0);
                double t89034 = tau_b[index]*1.0E20;
                double t89036 = C_k*t89033;
                double t89035 = t89034-t89036;
                double t89037 = 1.0/tau_b[index];
                double t89038 = ( (t89035 > 0.0) ?  1.0 : 0.0 ) ;
                double t89039 = 0.0 ;
                double t89040 = 1.0/(tau_b[index]*tau_b[index]);
                double t89057 = C_k*t89033*t89037*t89039*1.0E20;
                double t89058 = C_k*t89040*t89033*t89038;
                double t89041 = -t89057+t89058;
                double t89052 = tau_a[index]*1.0E20;
                double t89042 = -t89052+t89036;
                double t89043 = ( (t89042 > 0.0) ?  1.0 : 0.0 ) ;
                double t89044 = t89043*1.0E20;
                double t89045 = C_k*t89033*t89037*t89038;
                double t89046 = t89044+t89045+1.0;
                double t89047 = 0.0 ;
                double t89048 = C_k*t89033*t89037*t89047*1.0E40;
                double t89049 = 1.0/(tau_b[index]*tau_b[index]*tau_b[index]);
                double t89050 = C_k*t89033*t89038*t89049*2.0;
                double t89054 = C_k*t89040*t89033*t89039*2.0E20;
                double t89051 = t89050-t89054+t89048;
                double t89053 = t89044+t89045-1.0;
                double t89055 = t89053*t89053;
                double t89056 = t89055*t89055;
                double t89059 = t89057-t89058;
                double t89060 = 1.0/(t89046*t89046*t89046*t89046);
                double t89061 = t89059*t89059;
                double t89062 = 1.0/(t89046*t89046*t89046*t89046*t89046);
                double t89063 = 1.0/(t89046*t89046*t89046*t89046*t89046*t89046);
                double t89064 = 1.0/(t89046*t89046);
                double t89065 = 1.0/(t89046*t89046*t89046);
                v_tau_b_tau_b_[index] = c0*pow(rho_b[index],4.0/3.0)*(X-1.0)*(cxnl0+(cxnl2*t89030*t89032*t89029)/ \
                   (gamma_bb[index]*gx*t89028*2.0+t89030*t89032*t89029+1.0)+(cxnl1*gamma_bb[index]*gx*t89028)/(gamma_bb[index]* \
                   gx*t89028+1.0)+(cxnl3*gamma_bb[index]*gx*t89030*t89031*t89029)/(gamma_bb[index]*gx*t89028*3.0+t89030* \
                   t89032*t89029*3.0+gamma_bb[index]*gx*t89030*t89031*t89029+1.0))*(-t89051/t89046+(t89041*t89041)*t89064* \
                   2.0-t89060*t89061*t89055*3.6E1+t89051*t89053*t89064-t89051*t89062*t89056*5.0+t89061*t89053*t89065* \
                   1.0E1+t89051*t89055*t89065*6.0+t89061*t89063*t89056*5.0E1-t89051*t89060*t89053*t89055*6.0+t89061*t89053* \
                   t89062*t89055*4.0+t89051*t89053*t89063*t89056*5.0-t89061*t89053*1.0/(t89046*t89046*t89046*t89046*t89046* \
                   t89046*t89046)*t89056*3.0E1);
            } else if (rho_a[index] > cutoff_) {
                v_tau_b_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                double t90151 = 1.0/pow(rho_b[index],8.0/3.0);
                double t90152 = gamma_bb[index]*gamma_bb[index];
                double t90153 = gx*gx;
                double t90154 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]);
                double t90155 = 1.0/pow(rho_b[index],1.6E1/3.0);
                double t90156 = pow(rho_b[index],5.0/3.0);
                double t90157 = tau_b[index]*1.0E20;
                double t90159 = C_k*t90156;
                double t90158 = t90157-t90159;
                double t90160 = 1.0/tau_b[index];
                double t90161 = ( (t90158 > 0.0) ?  1.0 : 0.0 ) ;
                double t90162 = 0.0 ;
                double t90163 = 1.0/(tau_b[index]*tau_b[index]);
                double t90180 = C_k*t90160*t90162*t90156*1.0E20;
                double t90181 = C_k*t90161*t90163*t90156;
                double t90164 = t90180-t90181;
                double t90175 = tau_a[index]*1.0E20;
                double t90165 = -t90175+t90159;
                double t90166 = ( (t90165 > 0.0) ?  1.0 : 0.0 ) ;
                double t90167 = t90166*1.0E20;
                double t90168 = C_k*t90160*t90161*t90156;
                double t90169 = t90167+t90168+1.0;
                double t90170 = 0.0 ;
                double t90171 = C_k*t90160*t90170*t90156*1.0E40;
                double t90172 = 1.0/(tau_b[index]*tau_b[index]*tau_b[index]);
                double t90173 = C_k*t90161*t90172*t90156*2.0;
                double t90177 = C_k*t90162*t90163*t90156*2.0E20;
                double t90174 = t90171+t90173-t90177;
                double t90176 = t90167+t90168-1.0;
                double t90178 = t90176*t90176;
                double t90179 = t90178*t90178;
                double t90182 = t90164*t90164;
                double t90183 = 1.0/(t90169*t90169*t90169*t90169);
                double t90184 = 1.0/(t90169*t90169*t90169*t90169*t90169);
                double t90185 = 1.0/(t90169*t90169*t90169*t90169*t90169*t90169);
                double t90186 = 1.0/(t90169*t90169);
                double t90187 = 1.0/(t90169*t90169*t90169);
                v_tau_b_tau_b_[index] = c0*pow(rho_b[index],4.0/3.0)*(X-1.0)*(cxnl0+(cxnl2*t90152*t90153*t90155)/ \
                   (gamma_bb[index]*gx*t90151*2.0+t90152*t90153*t90155+1.0)+(cxnl1*gamma_bb[index]*gx*t90151)/(gamma_bb[index]* \
                   gx*t90151+1.0)+(cxnl3*gamma_bb[index]*gx*t90152*t90153*t90154)/(gamma_bb[index]*gx*t90151*3.0+t90152* \
                   t90153*t90155*3.0+gamma_bb[index]*gx*t90152*t90153*t90154+1.0))*(t90182*t90186*2.0-t90174/t90169-t90182* \
                   t90183*t90178*3.6E1+t90182*t90176*t90187*1.0E1+t90174*t90176*t90186+t90182*t90185*t90179*5.0E1-t90174* \
                   t90184*t90179*5.0+t90174*t90178*t90187*6.0+t90182*t90184*t90176*t90178*4.0-t90174*t90183*t90176*t90178* \
                   6.0+t90174*t90176*t90185*t90179*5.0-t90182*t90176*1.0/(t90169*t90169*t90169*t90169*t90169*t90169*t90169) \
                   *t90179*3.0E1);
            } else {
                v_tau_b_tau_b_[index] = 0.0;
            } 

            if (is_gga_) {

                //V_gamma_aa_tau_a
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    double t89067 = 1.0/pow(rho_a[index],8.0/3.0);
                    double t89068 = gx*gx;
                    double t89069 = 1.0/pow(rho_a[index],1.6E1/3.0);
                    double t89070 = gamma_aa[index]*gamma_aa[index];
                    double t89071 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                       rho_a[index]*rho_a[index]);
                    double t89072 = gamma_aa[index]*gx*t89067;
                    double t89073 = t89072+1.0;
                    double t89074 = gamma_aa[index]*gx*t89067*3.0;
                    double t89075 = gamma_aa[index]*gx*t89070*t89071*t89068;
                    double t89076 = t89070*t89068*t89069*3.0;
                    double t89077 = t89074+t89075+t89076+1.0;
                    double t89078 = gamma_aa[index]*gx*t89067*2.0;
                    double t89079 = t89070*t89068*t89069;
                    double t89080 = t89078+t89079+1.0;
                    double t89081 = pow(rho_a[index],5.0/3.0);
                    double t89082 = tau_a[index]*1.0E20;
                    double t89085 = C_k*t89081;
                    double t89083 = t89082-t89085;
                    double t89084 = 0.0 ;
                    double t89086 = 1.0/tau_a[index];
                    double t89087 = ( (t89083 > 0.0) ?  1.0 : 0.0 ) ;
                    double t89088 = t89084*1.0E40;
                    double t89089 = 1.0/(tau_a[index]*tau_a[index]);
                    double t89090 = C_k*t89081*t89087*t89089;
                    double t89097 = C_k*t89081*t89084*t89086*1.0E20;
                    double t89091 = t89090+t89088-t89097;
                    double t89092 = -t89082+t89085;
                    double t89093 = ( (t89092 > 0.0) ?  1.0 : 0.0 ) ;
                    double t89094 = t89093*1.0E20;
                    double t89095 = C_k*t89081*t89086*t89087;
                    double t89096 = t89094+t89095+1.0;
                    double t89098 = t89094+t89095-1.0;
                    double t89099 = t89098*t89098;
                    double t89100 = t89099*t89099;
                    v_gamma_aa_tau_a_[index] = c0*pow(rho_a[index],4.0/3.0)*(X-1.0)*((cxnl1*gx*t89067)/t89073+(cxnl2* \
                       gamma_aa[index]*t89068*t89069*2.0)/t89080-cxnl1*gamma_aa[index]*1.0/(t89073*t89073)*t89068*t89069- \
                       cxnl2*t89070*1.0/(t89080*t89080)*t89068*t89069*(gx*t89067*2.0+gamma_aa[index]*t89068*t89069*2.0)+(cxnl3* \
                       gx*t89070*t89071*t89068*3.0)/t89077-cxnl3*gamma_aa[index]*gx*t89070*t89071*t89068*1.0/(t89077*t89077) \
                       *(gx*t89067*3.0+gamma_aa[index]*t89068*t89069*6.0+gx*t89070*t89071*t89068*3.0))*(t89091/t89096+t89100* \
                       t89091*1.0/(t89096*t89096*t89096*t89096*t89096)*5.0-t89091*1.0/(t89096*t89096)*t89098-t89091*1.0/(t89096* \
                       t89096*t89096)*t89099*6.0-t89100*t89091*1.0/(t89096*t89096*t89096*t89096*t89096*t89096)*t89098*5.0+ \
                       t89091*1.0/(t89096*t89096*t89096*t89096)*t89098*t89099*6.0);
                } else if (rho_a[index] > cutoff_) {
                    double t91123 = 1.0/pow(rho_a[index],8.0/3.0);
                    double t91124 = gx*gx;
                    double t91125 = 1.0/pow(rho_a[index],1.6E1/3.0);
                    double t91126 = gamma_aa[index]*gamma_aa[index];
                    double t91127 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                       rho_a[index]*rho_a[index]);
                    double t91128 = gamma_aa[index]*gx*t91123;
                    double t91129 = t91128+1.0;
                    double t91130 = gamma_aa[index]*gx*t91123*3.0;
                    double t91131 = gamma_aa[index]*gx*t91124*t91126*t91127;
                    double t91132 = t91124*t91125*t91126*3.0;
                    double t91133 = t91130+t91131+t91132+1.0;
                    double t91134 = gamma_aa[index]*gx*t91123*2.0;
                    double t91135 = t91124*t91125*t91126;
                    double t91136 = t91134+t91135+1.0;
                    double t91137 = pow(rho_a[index],5.0/3.0);
                    double t91138 = tau_a[index]*1.0E20;
                    double t91141 = C_k*t91137;
                    double t91139 = -t91141+t91138;
                    double t91140 = 0.0 ;
                    double t91142 = 1.0/tau_a[index];
                    double t91143 = ( (t91139 > 0.0) ?  1.0 : 0.0 ) ;
                    double t91144 = t91140*1.0E40;
                    double t91145 = 1.0/(tau_a[index]*tau_a[index]);
                    double t91146 = C_k*t91143*t91145*t91137;
                    double t91153 = C_k*t91140*t91142*t91137*1.0E20;
                    double t91147 = t91144-t91153+t91146;
                    double t91148 = t91141-t91138;
                    double t91149 = ( (t91148 > 0.0) ?  1.0 : 0.0 ) ;
                    double t91150 = t91149*1.0E20;
                    double t91151 = C_k*t91142*t91143*t91137;
                    double t91152 = t91150+t91151+1.0;
                    double t91154 = t91150+t91151-1.0;
                    double t91155 = t91154*t91154;
                    double t91156 = t91155*t91155;
                    v_gamma_aa_tau_a_[index] = c0*pow(rho_a[index],4.0/3.0)*(X-1.0)*((cxnl1*gx*t91123)/t91129+(cxnl2* \
                       gamma_aa[index]*t91124*t91125*2.0)/t91136-cxnl1*gamma_aa[index]*t91124*t91125*1.0/(t91129*t91129)- \
                       cxnl2*t91124*t91125*t91126*1.0/(t91136*t91136)*(gx*t91123*2.0+gamma_aa[index]*t91124*t91125*2.0)+(cxnl3* \
                       gx*t91124*t91126*t91127*3.0)/t91133-cxnl3*gamma_aa[index]*gx*t91124*1.0/(t91133*t91133)*t91126*t91127* \
                       (gx*t91123*3.0+gamma_aa[index]*t91124*t91125*6.0+gx*t91124*t91126*t91127*3.0))*(t91147/t91152-1.0/ \
                       (t91152*t91152)*t91154*t91147-1.0/(t91152*t91152*t91152)*t91155*t91147*6.0+1.0/(t91152*t91152*t91152* \
                       t91152*t91152)*t91147*t91156*5.0+1.0/(t91152*t91152*t91152*t91152)*t91154*t91155*t91147*6.0-1.0/(t91152* \
                       t91152*t91152*t91152*t91152*t91152)*t91154*t91147*t91156*5.0);
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } else {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } 

                //V_gamma_aa_tau_b
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_aa_tau_b_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_aa_tau_b_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_aa_tau_b_[index] = 0.0;
                } else {
                    v_gamma_aa_tau_b_[index] = 0.0;
                } 

                //V_gamma_ab_tau_a
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_ab_tau_a_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_ab_tau_a_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_ab_tau_a_[index] = 0.0;
                } else {
                    v_gamma_ab_tau_a_[index] = 0.0;
                } 

                //V_gamma_ab_tau_b
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_ab_tau_b_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_ab_tau_b_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_ab_tau_b_[index] = 0.0;
                } else {
                    v_gamma_ab_tau_b_[index] = 0.0;
                } 

                //V_gamma_bb_tau_a
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    double t89103 = tau_a[index]*1.0E20;
                    double t89104 = pow(rho_b[index],5.0/3.0);
                    double t89105 = C_k*t89104;
                    double t89106 = -t89103+t89105;
                    double t89107 = ( (t89106 > 0.0) ?  1.0 : 0.0 ) ;
                    double t89108 = t89107*1.0E20;
                    double t89109 = 1.0/tau_b[index];
                    double t89110 = tau_b[index]*1.0E20;
                    double t89111 = t89110-t89105;
                    double t89112 = ( (t89111 > 0.0) ?  1.0 : 0.0 ) ;
                    double t89113 = C_k*t89112*t89104*t89109;
                    double t89114 = t89113+t89108-1.0;
                    double t89115 = t89113+t89108+1.0;
                    double t89116 = t89103-t89105;
                    double t89117 = 0.0 ;
                    double t89118 = t89114*t89114;
                    double t89119 = t89118*t89118;
                    double t89120 = 1.0/pow(rho_b[index],8.0/3.0);
                    double t89121 = gx*gx;
                    double t89122 = 1.0/pow(rho_b[index],1.6E1/3.0);
                    double t89123 = gamma_bb[index]*gamma_bb[index];
                    double t89124 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                       rho_b[index]*rho_b[index]);
                    double t89125 = gamma_bb[index]*gx*t89120;
                    double t89126 = t89125+1.0;
                    double t89127 = gamma_bb[index]*gx*t89120*3.0;
                    double t89128 = gamma_bb[index]*gx*t89121*t89123*t89124;
                    double t89129 = t89121*t89122*t89123*3.0;
                    double t89130 = t89127+t89128+t89129+1.0;
                    double t89131 = gamma_bb[index]*gx*t89120*2.0;
                    double t89132 = t89121*t89122*t89123;
                    double t89133 = t89131+t89132+1.0;
                    v_gamma_bb_tau_a_[index] = c0*pow(rho_b[index],4.0/3.0)*(X-1.0)*(( 0.0 )/t89115-t89114*1.0/(t89115* \
                       t89115)*t89117*1.0E40-1.0/(t89115*t89115*t89115)*t89117*t89118*6.0E40+1.0/(t89115*t89115*t89115*t89115* \
                       t89115)*t89117*t89119*5.0E40+t89114*1.0/(t89115*t89115*t89115*t89115)*t89117*t89118*6.0E40-t89114* \
                       1.0/(t89115*t89115*t89115*t89115*t89115*t89115)*t89117*t89119*5.0E40)*((cxnl1*gx*t89120)/t89126+(cxnl2* \
                       gamma_bb[index]*t89121*t89122*2.0)/t89133-cxnl1*gamma_bb[index]*t89121*t89122*1.0/(t89126*t89126)- \
                       cxnl2*t89121*t89122*t89123*1.0/(t89133*t89133)*(gx*t89120*2.0+gamma_bb[index]*t89121*t89122*2.0)+(cxnl3* \
                       gx*t89121*t89123*t89124*3.0)/t89130-cxnl3*gamma_bb[index]*gx*t89121*1.0/(t89130*t89130)*t89123*t89124* \
                       (gx*t89120*3.0+gamma_bb[index]*t89121*t89122*6.0+gx*t89121*t89123*t89124*3.0));
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_bb_tau_a_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    double t90191 = tau_a[index]*1.0E20;
                    double t90192 = pow(rho_b[index],5.0/3.0);
                    double t90193 = C_k*t90192;
                    double t90194 = -t90191+t90193;
                    double t90195 = ( (t90194 > 0.0) ?  1.0 : 0.0 ) ;
                    double t90196 = t90195*1.0E20;
                    double t90197 = 1.0/tau_b[index];
                    double t90198 = tau_b[index]*1.0E20;
                    double t90199 = -t90193+t90198;
                    double t90200 = ( (t90199 > 0.0) ?  1.0 : 0.0 ) ;
                    double t90201 = C_k*t90200*t90192*t90197;
                    double t90202 = t90201+t90196-1.0;
                    double t90203 = t90201+t90196+1.0;
                    double t90204 = t90191-t90193;
                    double t90205 = 0.0 ;
                    double t90206 = t90202*t90202;
                    double t90207 = t90206*t90206;
                    double t90208 = 1.0/pow(rho_b[index],8.0/3.0);
                    double t90209 = gx*gx;
                    double t90210 = 1.0/pow(rho_b[index],1.6E1/3.0);
                    double t90211 = gamma_bb[index]*gamma_bb[index];
                    double t90212 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                       rho_b[index]*rho_b[index]);
                    double t90213 = gamma_bb[index]*gx*t90208;
                    double t90214 = t90213+1.0;
                    double t90215 = gamma_bb[index]*gx*t90208*3.0;
                    double t90216 = gamma_bb[index]*gx*t90211*t90212*t90209;
                    double t90217 = t90210*t90211*t90209*3.0;
                    double t90218 = t90215+t90216+t90217+1.0;
                    double t90219 = gamma_bb[index]*gx*t90208*2.0;
                    double t90220 = t90210*t90211*t90209;
                    double t90221 = t90220+t90219+1.0;
                    v_gamma_bb_tau_a_[index] = c0*pow(rho_b[index],4.0/3.0)*(X-1.0)*(( 0.0 )/t90203-t90202*1.0/(t90203* \
                       t90203)*t90205*1.0E40-1.0/(t90203*t90203*t90203)*t90205*t90206*6.0E40+1.0/(t90203*t90203*t90203*t90203* \
                       t90203)*t90205*t90207*5.0E40+t90202*1.0/(t90203*t90203*t90203*t90203)*t90205*t90206*6.0E40-t90202* \
                       1.0/(t90203*t90203*t90203*t90203*t90203*t90203)*t90205*t90207*5.0E40)*((cxnl1*gx*t90208)/t90214+(cxnl2* \
                       gamma_bb[index]*t90210*t90209*2.0)/t90221-cxnl1*gamma_bb[index]*t90210*1.0/(t90214*t90214)*t90209- \
                       cxnl2*t90210*t90211*1.0/(t90221*t90221)*t90209*(gx*t90208*2.0+gamma_bb[index]*t90210*t90209*2.0)+(cxnl3* \
                       gx*t90211*t90212*t90209*3.0)/t90218-cxnl3*gamma_bb[index]*gx*t90211*t90212*t90209*1.0/(t90218*t90218) \
                       *(gx*t90208*3.0+gamma_bb[index]*t90210*t90209*6.0+gx*t90211*t90212*t90209*3.0));
                } else {
                    v_gamma_bb_tau_a_[index] = 0.0;
                } 

                //V_gamma_bb_tau_b
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    double t89137 = pow(rho_b[index],5.0/3.0);
                    double t89138 = tau_b[index]*1.0E20;
                    double t89140 = C_k*t89137;
                    double t89139 = -t89140+t89138;
                    double t89141 = 1.0/tau_b[index];
                    double t89142 = ( (t89139 > 0.0) ?  1.0 : 0.0 ) ;
                    double t89143 = 0.0 ;
                    double t89144 = 1.0/(tau_b[index]*tau_b[index]);
                    double t89152 = C_k*t89141*t89143*t89137*1.0E20;
                    double t89153 = C_k*t89142*t89144*t89137;
                    double t89145 = t89152-t89153;
                    double t89150 = tau_a[index]*1.0E20;
                    double t89146 = t89140-t89150;
                    double t89147 = ( (t89146 > 0.0) ?  1.0 : 0.0 ) ;
                    double t89148 = t89147*1.0E20;
                    double t89149 = C_k*t89141*t89142*t89137;
                    double t89151 = t89148+t89149+1.0;
                    double t89154 = t89148+t89149-1.0;
                    double t89155 = t89154*t89154;
                    double t89156 = t89155*t89155;
                    double t89157 = 1.0/pow(rho_b[index],8.0/3.0);
                    double t89158 = gx*gx;
                    double t89159 = 1.0/pow(rho_b[index],1.6E1/3.0);
                    double t89160 = gamma_bb[index]*gamma_bb[index];
                    double t89161 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                       rho_b[index]*rho_b[index]);
                    double t89162 = gamma_bb[index]*gx*t89157;
                    double t89163 = t89162+1.0;
                    double t89164 = gamma_bb[index]*gx*t89157*3.0;
                    double t89165 = gamma_bb[index]*gx*t89160*t89161*t89158;
                    double t89166 = t89160*t89158*t89159*3.0;
                    double t89167 = t89164+t89165+t89166+1.0;
                    double t89168 = gamma_bb[index]*gx*t89157*2.0;
                    double t89169 = t89160*t89158*t89159;
                    double t89170 = t89168+t89169+1.0;
                    v_gamma_bb_tau_b_[index] = -c0*pow(rho_b[index],4.0/3.0)*(X-1.0)*((cxnl1*gx*t89157)/t89163+(cxnl2* \
                       gamma_bb[index]*t89158*t89159*2.0)/t89170-cxnl1*gamma_bb[index]*1.0/(t89163*t89163)*t89158*t89159- \
                       cxnl2*t89160*1.0/(t89170*t89170)*t89158*t89159*(gx*t89157*2.0+gamma_bb[index]*t89158*t89159*2.0)+(cxnl3* \
                       gx*t89160*t89161*t89158*3.0)/t89167-cxnl3*gamma_bb[index]*gx*t89160*t89161*t89158*1.0/(t89167*t89167) \
                       *(gx*t89157*3.0+gamma_bb[index]*t89158*t89159*6.0+gx*t89160*t89161*t89158*3.0))*(t89145/t89151-1.0/ \
                       (t89151*t89151)*t89145*t89154-1.0/(t89151*t89151*t89151)*t89145*t89155*6.0+1.0/(t89151*t89151*t89151* \
                       t89151*t89151)*t89145*t89156*5.0+1.0/(t89151*t89151*t89151*t89151)*t89145*t89154*t89155*6.0-1.0/(t89151* \
                       t89151*t89151*t89151*t89151*t89151)*t89145*t89154*t89156*5.0);
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_bb_tau_b_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    double t90225 = pow(rho_b[index],5.0/3.0);
                    double t90226 = tau_b[index]*1.0E20;
                    double t90228 = C_k*t90225;
                    double t90227 = t90226-t90228;
                    double t90229 = 1.0/tau_b[index];
                    double t90230 = ( (t90227 > 0.0) ?  1.0 : 0.0 ) ;
                    double t90231 = 0.0 ;
                    double t90232 = 1.0/(tau_b[index]*tau_b[index]);
                    double t90233 = C_k*t90230*t90232*t90225;
                    double t90238 = tau_a[index]*1.0E20;
                    double t90234 = t90228-t90238;
                    double t90235 = ( (t90234 > 0.0) ?  1.0 : 0.0 ) ;
                    double t90236 = t90235*1.0E20;
                    double t90237 = C_k*t90230*t90225*t90229;
                    double t90239 = t90236+t90237+1.0;
                    double t90240 = t90236+t90237-1.0;
                    double t90241 = t90240*t90240;
                    double t90243 = C_k*t90231*t90225*t90229*1.0E20;
                    double t90242 = t90233-t90243;
                    double t90244 = t90241*t90241;
                    double t90245 = 1.0/pow(rho_b[index],8.0/3.0);
                    double t90246 = gx*gx;
                    double t90247 = 1.0/pow(rho_b[index],1.6E1/3.0);
                    double t90248 = gamma_bb[index]*gamma_bb[index];
                    double t90249 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                       rho_b[index]*rho_b[index]);
                    double t90250 = gamma_bb[index]*gx*t90245;
                    double t90251 = t90250+1.0;
                    double t90252 = gamma_bb[index]*gx*t90245*3.0;
                    double t90253 = gamma_bb[index]*gx*t90246*t90248*t90249;
                    double t90254 = t90246*t90247*t90248*3.0;
                    double t90255 = t90252+t90253+t90254+1.0;
                    double t90256 = gamma_bb[index]*gx*t90245*2.0;
                    double t90257 = t90246*t90247*t90248;
                    double t90258 = t90256+t90257+1.0;
                    v_gamma_bb_tau_b_[index] = c0*pow(rho_b[index],4.0/3.0)*(X-1.0)*((cxnl1*gx*t90245)/t90251-cxnl1*gamma_bb[index]* \
                       1.0/(t90251*t90251)*t90246*t90247+(cxnl2*gamma_bb[index]*t90246*t90247*2.0)/t90258-cxnl2*t90246*t90247* \
                       t90248*1.0/(t90258*t90258)*(gx*t90245*2.0+gamma_bb[index]*t90246*t90247*2.0)+(cxnl3*gx*t90246*t90248* \
                       t90249*3.0)/t90255-cxnl3*gamma_bb[index]*gx*t90246*1.0/(t90255*t90255)*t90248*t90249*(gx*t90245*3.0+ \
                       gamma_bb[index]*t90246*t90247*6.0+gx*t90246*t90248*t90249*3.0))*(t90242/t90239-t90240*t90242*1.0/(t90239* \
                       t90239)-t90241*t90242*1.0/(t90239*t90239*t90239)*6.0+t90242*t90244*1.0/(t90239*t90239*t90239*t90239* \
                       t90239)*5.0+t90240*t90241*t90242*1.0/(t90239*t90239*t90239*t90239)*6.0-t90240*t90244*1.0/(t90239*t90239* \
                       t90239*t90239*t90239*t90239)*(t90233-t90243)*5.0);
                } else {
                    v_gamma_bb_tau_b_[index] = 0.0;
                } 

            }
        }
    }
}

}}

