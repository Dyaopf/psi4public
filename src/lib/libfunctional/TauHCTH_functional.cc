/**********************************************************
* TauHCTH_functional.cc: definitions for TauHCTH_functional for KS-DFT
* Robert Parrish, robparrish@gmail.com
* Autogenerated by MATLAB Script on 25-May-2011
*
***********************************************************/
#include <libmints/mints.h>
#include "TauHCTH_functional.h"
#include <stdlib.h>
#include <cmath>
#include <string>
#include <string>
#include <vector>

using namespace psi;
using namespace boost;
using namespace std;

namespace psi { namespace functional {

TauHCTH_Functional::TauHCTH_Functional(int npoints, int deriv) : Functional(npoints, deriv)
{

    name_ = "TauHCTH";
    description_ = "TauHCTH Power Series Pure Meta-GGA";
    citation_ = "A.D. Boese and N.C. Handy, J. Chem. Phys., 116(22), 9559, 2002";

    double X = 0.0000000000000000E+00;
    params_.push_back(make_pair("X",X));
    double C_k = 9.1155997446911918E+00;
    params_.push_back(make_pair("C_k",C_k));
    double c0 = -9.3052573634909974E-01;
    params_.push_back(make_pair("c0",c0));
    double two_13 = 1.2599210498948732E+00;
    params_.push_back(make_pair("two_13",two_13));
    double d2fz0 = 1.7099210000000000E+00;
    params_.push_back(make_pair("d2fz0",d2fz0));
    double c = 6.2035049089939986E-01;
    params_.push_back(make_pair("c",c));
    double Aa = 1.6886999999999999E-02;
    params_.push_back(make_pair("Aa",Aa));
    double a1a = 1.1125000000000000E-01;
    params_.push_back(make_pair("a1a",a1a));
    double b1a = 1.0356999999999999E+01;
    params_.push_back(make_pair("b1a",b1a));
    double b2a = 3.6231000000000000E+00;
    params_.push_back(make_pair("b2a",b2a));
    double b3a = 8.8026000000000004E-01;
    params_.push_back(make_pair("b3a",b3a));
    double b4a = 4.9670999999999998E-01;
    params_.push_back(make_pair("b4a",b4a));
    double c0p = 3.1091000000000001E-02;
    params_.push_back(make_pair("c0p",c0p));
    double a1p = 2.1370000000000000E-01;
    params_.push_back(make_pair("a1p",a1p));
    double b1p = 7.5956999999999999E+00;
    params_.push_back(make_pair("b1p",b1p));
    double b2p = 3.5876000000000001E+00;
    params_.push_back(make_pair("b2p",b2p));
    double b3p = 1.6382000000000001E+00;
    params_.push_back(make_pair("b3p",b3p));
    double b4p = 4.9293999999999999E-01;
    params_.push_back(make_pair("b4p",b4p));
    double c0f = 1.5545000000000000E-02;
    params_.push_back(make_pair("c0f",c0f));
    double a1f = 2.0548000000000000E-01;
    params_.push_back(make_pair("a1f",a1f));
    double b1f = 1.4118900000000000E+01;
    params_.push_back(make_pair("b1f",b1f));
    double b2f = 6.1977000000000002E+00;
    params_.push_back(make_pair("b2f",b2f));
    double b3f = 3.3662000000000001E+00;
    params_.push_back(make_pair("b3f",b3f));
    double b4f = 6.2517000000000000E-01;
    params_.push_back(make_pair("b4f",b4f));
    double gcab = 6.0000000000000001E-03;
    params_.push_back(make_pair("gcab",gcab));
    double gcaa = 2.0000000000000001E-01;
    params_.push_back(make_pair("gcaa",gcaa));
    double gx = 4.0000000000000001E-03;
    params_.push_back(make_pair("gx",gx));
    double ccab0 = 6.5261999999999998E-01;
    params_.push_back(make_pair("ccab0",ccab0));
    double ccab1 = 6.3638000000000003E+00;
    params_.push_back(make_pair("ccab1",ccab1));
    double ccab2 = -1.4080000000000000E+01;
    params_.push_back(make_pair("ccab2",ccab2));
    double ccab3 = -3.3755000000000002E+00;
    params_.push_back(make_pair("ccab3",ccab3));
    double ccaa0 = 4.1385000000000000E-01;
    params_.push_back(make_pair("ccaa0",ccaa0));
    double ccaa1 = -9.0859999999999996E-01;
    params_.push_back(make_pair("ccaa1",ccaa1));
    double ccaa2 = -5.4899999999999997E-02;
    params_.push_back(make_pair("ccaa2",ccaa2));
    double ccaa3 = 1.7480000000000000E+00;
    params_.push_back(make_pair("ccaa3",ccaa3));
    double cx0 = 1.1073400000000000E+00;
    params_.push_back(make_pair("cx0",cx0));
    double cx1 = -1.0533999999999999E+00;
    params_.push_back(make_pair("cx1",cx1));
    double cx2 = 6.3491000000000000E+00;
    params_.push_back(make_pair("cx2",cx2));
    double cx3 = -2.5531000000000001E+00;
    params_.push_back(make_pair("cx3",cx3));
    double cxnl0 = 1.1000000000000001E-03;
    params_.push_back(make_pair("cxnl0",cxnl0));
    double cxnl1 = -3.0409999999999998E-01;
    params_.push_back(make_pair("cxnl1",cxnl1));
    double cxnl2 = 6.9542999999999999E+00;
    params_.push_back(make_pair("cxnl2",cxnl2));
    double cxnl3 = -7.2350000000000003E-01;
    params_.push_back(make_pair("cxnl3",cxnl3));

    is_gga_ = true;
    is_meta_ = true;

    //Required allocateion
    allocate();
}
TauHCTH_Functional::~TauHCTH_Functional()
{
}
void TauHCTH_Functional::computeRKSFunctional(boost::shared_ptr<RKSFunctions> prop)
{
    int ntrue = prop->npoints();

    const double* restrict rho_a;
    const double* restrict gamma_aa;
    const double* restrict tau_a;

    rho_a = prop->property_value("RHO_A")->pointer();
    if (is_gga_) {
        gamma_aa = prop->property_value("GAMMA_AA")->pointer();
    }
    if (is_meta_) {
        tau_a = prop->property_value("TAU_A")->pointer();
    }

    double X = params_[0].second;
    double C_k = params_[1].second;
    double c0 = params_[2].second;
    double two_13 = params_[3].second;
    double d2fz0 = params_[4].second;
    double c = params_[5].second;
    double Aa = params_[6].second;
    double a1a = params_[7].second;
    double b1a = params_[8].second;
    double b2a = params_[9].second;
    double b3a = params_[10].second;
    double b4a = params_[11].second;
    double c0p = params_[12].second;
    double a1p = params_[13].second;
    double b1p = params_[14].second;
    double b2p = params_[15].second;
    double b3p = params_[16].second;
    double b4p = params_[17].second;
    double c0f = params_[18].second;
    double a1f = params_[19].second;
    double b1f = params_[20].second;
    double b2f = params_[21].second;
    double b3f = params_[22].second;
    double b4f = params_[23].second;
    double gcab = params_[24].second;
    double gcaa = params_[25].second;
    double gx = params_[26].second;
    double ccab0 = params_[27].second;
    double ccab1 = params_[28].second;
    double ccab2 = params_[29].second;
    double ccab3 = params_[30].second;
    double ccaa0 = params_[31].second;
    double ccaa1 = params_[32].second;
    double ccaa2 = params_[33].second;
    double ccaa3 = params_[34].second;
    double cx0 = params_[35].second;
    double cx1 = params_[36].second;
    double cx2 = params_[37].second;
    double cx3 = params_[38].second;
    double cxnl0 = params_[39].second;
    double cxnl1 = params_[40].second;
    double cxnl2 = params_[41].second;
    double cxnl3 = params_[42].second;

    //Functional
    for (int index = 0; index < ntrue; index++) {

        //Functional Value
        if (rho_a[index] > cutoff_) {
            double t91487 = 1.0/pow(rho_a[index],1.0/3.0);
            double t91488 = c*t91487;
            double t91489 = sqrt(t91488);
            double t91490 = pow(t91488,3.0/2.0);
            double t91491 = c*c;
            double t91492 = 1.0/pow(rho_a[index],2.0/3.0);
            double t91493 = 1.0/c0p;
            double t91494 = b1p*t91489;
            double t91495 = b3p*t91490;
            double t91496 = b4p*t91491*t91492;
            double t91497 = b2p*c*t91487;
            double t91498 = t91494+t91495+t91496+t91497;
            double t91499 = 1.0/t91498;
            double t91500 = t91493*t91499*(1.0/2.0);
            double t91501 = t91500+1.0;
            double t91502 = log(t91501);
            double t91503 = a1p*c*t91487;
            double t91504 = t91503+1.0;
            double t91505 = rho_a[index]*2.0;
            double t91506 = 1.0/pow(t91505,1.0/3.0);
            double t91507 = c*t91506;
            double t91508 = 1.0/pow(rho_a[index],8.0/3.0);
            double t91509 = gamma_aa[index]*gamma_aa[index];
            double t91510 = gcab*gcab;
            double t91511 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]);
            double t91512 = 1.0/pow(rho_a[index],1.6E1/3.0);
            double t91513 = pow(2.0,1.0/3.0);
            double t91514 = t91513*2.0;
            double t91515 = t91514-2.0;
            double t91516 = two_13*2.0;
            double t91517 = t91516-2.0;
            double t91518 = 1.0/t91517;
            double t91519 = 1.0/c0f;
            double t91520 = b1f*t91489;
            double t91521 = b3f*t91490;
            double t91522 = b4f*t91491*t91492;
            double t91523 = b2f*c*t91487;
            double t91524 = t91520+t91521+t91522+t91523;
            double t91525 = 1.0/t91524;
            double t91526 = t91525*t91519*(1.0/2.0);
            double t91527 = t91526+1.0;
            double t91528 = log(t91527);
            double t91529 = a1f*c*t91487;
            double t91530 = t91529+1.0;
            double t91531 = c0f*t91530*t91528*2.0;
            double t91532 = c0p*t91502*t91504*2.0;
            double t91533 = gcaa*gcaa;
            double t91534 = pow(rho_a[index],5.0/3.0);
            double t91535 = C_k*t91534;
            double t91536 = tau_a[index]*1.0E20;
            double t91537 = 1.0/tau_a[index];
            double t91538 = -t91535+t91536;
            double t91539 = ( (t91538 > 0.0) ?  1.0 : 0.0 ) ;
            double t91540 = C_k*t91534*t91537*t91539;
            double t91541 = t91535-t91536;
            double t91542 = ( (t91541 > 0.0) ?  1.0 : 0.0 ) ;
            double t91543 = t91542*1.0E20;
            double t91544 = t91540+t91543-1.0;
            double t91545 = t91544*t91544;
            double t91546 = t91540+t91543+1.0;
            double t91547 = t91545*t91545;
            double t91548 = gx*gx;
            double t91549 = gamma_aa[index]*gx*t91508;
            double t91550 = t91549+1.0;
            double t91551 = 1.0/t91550;
            double t91552 = gamma_aa[index]*gx*t91508*3.0;
            double t91553 = gamma_aa[index]*gx*t91511*t91509*t91548;
            double t91554 = t91512*t91509*t91548*3.0;
            double t91555 = t91552+t91553+t91554+1.0;
            double t91556 = 1.0/t91555;
            double t91557 = gamma_aa[index]*gx*t91508*2.0;
            double t91558 = t91512*t91509*t91548;
            double t91559 = t91557+t91558+1.0;
            double t91560 = 1.0/t91559;
            functional_[index] = (rho_a[index]*(t91532+t91515*t91518*(t91531-c0p*t91502*t91504*2.0))*2.0-c0p* \
               rho_a[index]*log((t91493*(1.0/2.0))/(b1p*sqrt(t91507)+b3p*pow(t91507,3.0/2.0)+b4p*1.0/pow(t91505,2.0/ \
               3.0)*t91491+b2p*c*t91506)+1.0)*(a1p*c*t91506+1.0)*4.0)*(ccab0+(ccab2*t91510*t91512*t91509)/(gamma_aa[index]* \
               gcab*t91508*2.0+t91510*t91512*t91509+1.0)+(ccab1*gamma_aa[index]*gcab*t91508)/(gamma_aa[index]*gcab* \
               t91508+1.0)+(ccab3*gamma_aa[index]*gcab*t91510*t91511*t91509)/(gamma_aa[index]*gcab*t91508*3.0+t91510* \
               t91512*t91509*3.0+gamma_aa[index]*gcab*t91510*t91511*t91509+1.0))-rho_a[index]*(t91532+t91515*t91518* \
               (t91531-t91532))*(ccaa0+(ccaa2*t91512*t91533*t91509)/(gamma_aa[index]*gcaa*t91508*2.0+t91512*t91533* \
               t91509+1.0)+(ccaa1*gamma_aa[index]*gcaa*t91508)/(gamma_aa[index]*gcaa*t91508+1.0)+(ccaa3*gamma_aa[index]* \
               gcaa*t91511*t91533*t91509)/(gamma_aa[index]*gcaa*t91508*3.0+t91512*t91533*t91509*3.0+gamma_aa[index]* \
               gcaa*t91511*t91533*t91509+1.0))*2.0-c0*pow(rho_a[index],4.0/3.0)*(X-1.0)*(cx0+(t91544/t91546-t91544* \
               t91545*1.0/(t91546*t91546*t91546)*2.0+t91544*1.0/(t91546*t91546*t91546*t91546*t91546)*t91547)*(cxnl0+ \
               cxnl1*gamma_aa[index]*gx*t91551*t91508+cxnl2*t91512*t91560*t91509*t91548+cxnl3*gamma_aa[index]*gx* \
               t91511*t91509*t91556*t91548)+cx1*gamma_aa[index]*gx*t91551*t91508+cx2*t91512*t91560*t91509*t91548+ \
               cx3*gamma_aa[index]*gx*t91511*t91509*t91556*t91548)*2.0;
        } else {
            functional_[index] = 0.0;
        }

    }
    //First Partials
    for (int index = 0; index < ntrue && deriv_ >= 1; index++) {

        //V_rho_a
        if (rho_a[index] > cutoff_) {
            double t91562 = 1.0/pow(rho_a[index],8.0/3.0);
            double t91563 = gamma_aa[index]*gamma_aa[index];
            double t91564 = gcab*gcab;
            double t91565 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]);
            double t91566 = 1.0/pow(rho_a[index],1.6E1/3.0);
            double t91567 = rho_a[index]*2.0;
            double t91568 = 1.0/pow(t91567,1.0/3.0);
            double t91569 = c*t91568;
            double t91570 = sqrt(t91569);
            double t91571 = b1p*t91570;
            double t91572 = pow(t91569,3.0/2.0);
            double t91573 = b3p*t91572;
            double t91574 = b2p*c*t91568;
            double t91575 = c*c;
            double t91576 = 1.0/pow(t91567,2.0/3.0);
            double t91577 = b4p*t91575*t91576;
            double t91578 = t91571+t91573+t91574+t91577;
            double t91579 = 1.0/pow(t91567,4.0/3.0);
            double t91580 = 1.0/c0p;
            double t91581 = 1.0/t91578;
            double t91582 = t91580*t91581*(1.0/2.0);
            double t91583 = t91582+1.0;
            double t91584 = 1.0/pow(rho_a[index],1.0/3.0);
            double t91585 = c*t91584;
            double t91586 = sqrt(t91585);
            double t91587 = b1f*t91586;
            double t91588 = pow(t91585,3.0/2.0);
            double t91589 = b3f*t91588;
            double t91590 = 1.0/pow(rho_a[index],2.0/3.0);
            double t91591 = b4f*t91590*t91575;
            double t91592 = b2f*c*t91584;
            double t91593 = t91591+t91592+t91587+t91589;
            double t91594 = 1.0/pow(rho_a[index],4.0/3.0);
            double t91595 = b1p*t91586;
            double t91596 = b3p*t91588;
            double t91597 = b4p*t91590*t91575;
            double t91598 = b2p*c*t91584;
            double t91599 = t91595+t91596+t91597+t91598;
            double t91600 = 1.0/pow(rho_a[index],5.0/3.0);
            double t91601 = 1.0/sqrt(t91585);
            double t91602 = 1.0/c0f;
            double t91603 = 1.0/t91593;
            double t91604 = t91602*t91603*(1.0/2.0);
            double t91605 = t91604+1.0;
            double t91606 = 1.0/t91599;
            double t91607 = t91606*t91580*(1.0/2.0);
            double t91608 = t91607+1.0;
            double t91609 = a1p*c*t91584;
            double t91610 = t91609+1.0;
            double t91611 = 1.0/t91608;
            double t91612 = 1.0/(t91599*t91599);
            double t91613 = b4p*t91600*t91575*(2.0/3.0);
            double t91614 = b2p*c*t91594*(1.0/3.0);
            double t91615 = b1p*c*t91601*t91594*(1.0/6.0);
            double t91616 = b3p*c*t91594*t91586*(1.0/2.0);
            double t91617 = t91613+t91614+t91615+t91616;
            double t91618 = t91610*t91611*t91612*t91617;
            double t91619 = log(t91608);
            double t91620 = log(t91583);
            double t91621 = a1p*c*t91568;
            double t91622 = t91621+1.0;
            double t91623 = pow(2.0,1.0/3.0);
            double t91624 = t91623*2.0;
            double t91625 = t91624-2.0;
            double t91626 = two_13*2.0;
            double t91627 = t91626-2.0;
            double t91628 = 1.0/t91627;
            double t91629 = log(t91605);
            double t91630 = a1f*c*t91584;
            double t91631 = t91630+1.0;
            double t91632 = c0f*t91631*t91629*2.0;
            double t91634 = c0p*t91610*t91619*2.0;
            double t91633 = t91632-t91634;
            double t91635 = gcaa*gcaa;
            double t91636 = pow(rho_a[index],5.0/3.0);
            double t91637 = C_k*t91636;
            double t91638 = tau_a[index]*1.0E20;
            double t91639 = 1.0/tau_a[index];
            double t91640 = -t91637+t91638;
            double t91641 = ( (t91640 > 0.0) ?  1.0 : 0.0 ) ;
            double t91642 = C_k*t91641*t91636*t91639;
            double t91643 = t91637-t91638;
            double t91644 = ( (t91643 > 0.0) ?  1.0 : 0.0 ) ;
            double t91645 = t91644*1.0E20;
            double t91646 = t91642+t91645-1.0;
            double t91647 = t91646*t91646;
            double t91648 = t91642+t91645+1.0;
            double t91649 = t91647*t91647;
            double t91650 = gx*gx;
            double t91651 = gamma_aa[index]*gx*t91562;
            double t91652 = t91651+1.0;
            double t91653 = 1.0/t91652;
            double t91654 = gamma_aa[index]*gx*t91562*3.0;
            double t91655 = gamma_aa[index]*gx*t91650*t91563*t91565;
            double t91656 = t91650*t91563*t91566*3.0;
            double t91657 = t91654+t91655+t91656+1.0;
            double t91658 = 1.0/t91657;
            double t91659 = gamma_aa[index]*gx*t91562*2.0;
            double t91660 = t91650*t91563*t91566;
            double t91661 = t91660+t91659+1.0;
            double t91662 = 1.0/t91661;
            double t91663 = 1.0/t91648;
            double t91664 = 1.0/(t91648*t91648*t91648);
            double t91665 = 1.0/(t91648*t91648*t91648*t91648*t91648);
            double t91666 = t91646*t91665*t91649;
            double t91667 = 1.0/pow(rho_a[index],1.9E1/3.0);
            double t91668 = 1.0/pow(rho_a[index],1.1E1/3.0);
            double t91669 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]*rho_a[index]);
            double t91670 = cxnl1*gamma_aa[index]*gx*t91562*t91653;
            double t91671 = cxnl3*gamma_aa[index]*gx*t91650*t91563*t91565*t91658;
            double t91672 = cxnl2*t91650*t91563*t91662*t91566;
            double t91673 = cxnl0+t91670+t91671+t91672;
            double t91674 = 0.0 ;
            double t91675 = pow(rho_a[index],2.0/3.0);
            double t91676 = C_k*t91674*t91675*(5.0E20/3.0);
            double t91677 = C_k*C_k;
            double t91678 = pow(rho_a[index],7.0/3.0);
            double t91679 = C_k*t91641*t91639*t91675*(5.0/3.0);
            double t91681 = t91674*t91639*t91677*t91678*(5.0/3.0);
            double t91680 = -t91681+t91676+t91679;
            double t91682 = 1.0/(t91652*t91652);
            double t91683 = gamma_aa[index]*gx*t91668*8.0;
            double t91684 = gamma_aa[index]*gx*t91650*t91563*t91669*8.0;
            double t91685 = t91650*t91563*t91667*1.6E1;
            double t91686 = t91683+t91684+t91685;
            double t91687 = 1.0/(t91657*t91657);
            double t91688 = gamma_aa[index]*gx*t91668*(1.6E1/3.0);
            double t91689 = t91650*t91563*t91667*(1.6E1/3.0);
            double t91690 = t91688+t91689;
            double t91691 = 1.0/(t91661*t91661);
            double t91692 = t91663*t91646;
            double t91693 = t91692+t91666-t91646*t91664*t91647*2.0;
            double t91694 = t91633*t91625*t91628;
            double t91695 = t91634+t91694;
            double t91696 = gamma_aa[index]*gcab*t91562;
            double t91697 = t91696+1.0;
            double t91698 = 1.0/t91697;
            double t91699 = gamma_aa[index]*gcab*t91562*3.0;
            double t91700 = gamma_aa[index]*gcab*t91563*t91564*t91565;
            double t91701 = t91563*t91564*t91566*3.0;
            double t91702 = t91700+t91701+t91699+1.0;
            double t91703 = 1.0/t91702;
            double t91704 = gamma_aa[index]*gcab*t91562*2.0;
            double t91705 = t91563*t91564*t91566;
            double t91706 = t91704+t91705+1.0;
            double t91707 = 1.0/t91706;
            double t91708 = gamma_aa[index]*gcaa*t91562;
            double t91709 = t91708+1.0;
            double t91710 = 1.0/t91709;
            double t91711 = gamma_aa[index]*gcaa*t91562*3.0;
            double t91712 = gamma_aa[index]*gcaa*t91563*t91635*t91565;
            double t91713 = t91563*t91635*t91566*3.0;
            double t91714 = t91711+t91712+t91713+1.0;
            double t91715 = 1.0/t91714;
            double t91716 = gamma_aa[index]*gcaa*t91562*2.0;
            double t91717 = t91563*t91635*t91566;
            double t91718 = t91716+t91717+1.0;
            double t91719 = 1.0/t91718;
            double t91720 = 1.0/t91605;
            double t91721 = 1.0/(t91593*t91593);
            double t91722 = b4f*t91600*t91575*(2.0/3.0);
            double t91723 = b2f*c*t91594*(1.0/3.0);
            double t91724 = b1f*c*t91601*t91594*(1.0/6.0);
            double t91725 = b3f*c*t91594*t91586*(1.0/2.0);
            double t91726 = t91722+t91723+t91724+t91725;
            double t91727 = a1f*c*c0f*t91629*t91594*(2.0/3.0);
            double t91728 = a1p*c*c0p*t91619*t91594*(2.0/3.0);
            double t91729 = ccaa1*gamma_aa[index]*gcaa*t91710*t91562;
            double t91730 = ccaa3*gamma_aa[index]*gcaa*t91715*t91563*t91635*t91565;
            double t91731 = ccaa2*t91563*t91635*t91566*t91719;
            double t91732 = ccaa0+t91730+t91731+t91729;
            v_rho_a_[index] = -(ccab0+ccab1*gamma_aa[index]*gcab*t91562*t91698+ccab2*t91563*t91707*t91564*t91566+ \
               ccab3*gamma_aa[index]*gcab*t91703*t91563*t91564*t91565)*(rho_a[index]*((t91622*1.0/(t91578*t91578) \
               *(b4p*t91575*1.0/pow(t91567,5.0/3.0)*(2.0/3.0)+b2p*c*t91579*(1.0/3.0)+b3p*c*t91570*t91579*(1.0/2.0) \
               +b1p*c*1.0/sqrt(t91569)*t91579*(1.0/6.0)))/t91583-a1p*c*c0p*t91620*t91579*(2.0/3.0))*2.0+rho_a[index]* \
               (-t91618+t91728+t91625*t91628*(t91618+t91727-t91720*t91631*t91721*t91726-a1p*c*c0p*t91619*t91594*(2.0/ \
               3.0)))+c0p*t91620*t91622*2.0-c0p*t91610*t91619*2.0-t91633*t91625*t91628)-t91732*t91695-(rho_a[index]* \
               t91695*2.0-c0p*rho_a[index]*t91620*t91622*4.0)*(ccab1*gamma_aa[index]*gcab*t91668*t91698*(4.0/3.0) \
               +ccab2*t91563*t91707*t91564*t91667*(8.0/3.0)-ccab1*t91563*t91564*t91667*1.0/(t91697*t91697)*(4.0/3.0) \
               -ccab2*1.0/(t91706*t91706)*t91563*t91564*t91566*(gamma_aa[index]*gcab*t91668*(8.0/3.0)+t91563*t91564* \
               t91667*(8.0/3.0))+ccab3*gamma_aa[index]*gcab*t91703*t91563*t91564*t91669*4.0-ccab3*gamma_aa[index]* \
               gcab*1.0/(t91702*t91702)*t91563*t91564*t91565*(gamma_aa[index]*gcab*t91668*4.0+t91563*t91564*t91667* \
               8.0+gamma_aa[index]*gcab*t91563*t91564*t91669*4.0))-(c0*pow(rho_a[index],1.0/3.0)*(cx0+t91673*t91693+ \
               cx1*gamma_aa[index]*gx*t91562*t91653+cx2*t91650*t91563*t91662*t91566+cx3*gamma_aa[index]*gx*t91650* \
               t91563*t91565*t91658)*(4.0/3.0)-c0*pow(rho_a[index],4.0/3.0)*(t91693*(cxnl1*gamma_aa[index]*gx*t91653* \
               t91668*(8.0/3.0)+cxnl2*t91650*t91563*t91662*t91667*(1.6E1/3.0)-cxnl1*t91650*t91563*t91682*t91667*(8.0/ \
               3.0)-cxnl2*t91650*t91563*t91690*t91691*t91566+cxnl3*gamma_aa[index]*gx*t91650*t91563*t91658*t91669* \
               8.0-cxnl3*gamma_aa[index]*gx*t91650*t91563*t91565*t91686*t91687)-t91673*(t91680*t91663-t91680*t91646* \
               1.0/(t91648*t91648)-t91680*t91664*t91647*6.0+t91680*t91665*t91649*5.0+t91680*t91646*t91647*1.0/(t91648* \
               t91648*t91648*t91648)*6.0-t91680*t91646*1.0/(t91648*t91648*t91648*t91648*t91648*t91648)*t91649*5.0) \
               +cx1*gamma_aa[index]*gx*t91653*t91668*(8.0/3.0)-cx1*t91650*t91563*t91682*t91667*(8.0/3.0)+cx2*t91650* \
               t91563*t91662*t91667*(1.6E1/3.0)-cx2*t91650*t91563*t91690*t91691*t91566+cx3*gamma_aa[index]*gx*t91650* \
               t91563*t91658*t91669*8.0-cx3*gamma_aa[index]*gx*t91650*t91563*t91565*t91686*t91687))*(X-1.0)+rho_a[index]* \
               t91732*(-t91618+t91728+t91625*t91628*(t91618+t91727-t91728-t91720*t91631*t91721*t91726))+rho_a[index]* \
               t91695*(ccaa1*gamma_aa[index]*gcaa*t91710*t91668*(8.0/3.0)+ccaa2*t91563*t91635*t91719*t91667*(1.6E1/ \
               3.0)-ccaa1*t91563*t91635*1.0/(t91709*t91709)*t91667*(8.0/3.0)-ccaa2*t91563*t91635*1.0/(t91718*t91718) \
               *t91566*(gamma_aa[index]*gcaa*t91668*(1.6E1/3.0)+t91563*t91635*t91667*(1.6E1/3.0))+ccaa3*gamma_aa[index]* \
               gcaa*t91715*t91563*t91635*t91669*8.0-ccaa3*gamma_aa[index]*gcaa*1.0/(t91714*t91714)*t91563*t91635* \
               t91565*(gamma_aa[index]*gcaa*t91668*8.0+t91563*t91635*t91667*1.6E1+gamma_aa[index]*gcaa*t91563*t91635* \
               t91669*8.0));
        } else {
            v_rho_a_[index] = 0.0;
        }

        if (is_gga_) {

            if (rho_a[index] > cutoff_) {
                double t91734 = 1.0/pow(rho_a[index],1.0/3.0);
                double t91735 = c*t91734;
                double t91736 = sqrt(t91735);
                double t91737 = pow(t91735,3.0/2.0);
                double t91738 = c*c;
                double t91739 = 1.0/pow(rho_a[index],2.0/3.0);
                double t91740 = 1.0/c0p;
                double t91741 = b1p*t91736;
                double t91742 = b3p*t91737;
                double t91743 = b4p*t91738*t91739;
                double t91744 = b2p*c*t91734;
                double t91745 = t91741+t91742+t91743+t91744;
                double t91746 = 1.0/t91745;
                double t91747 = t91740*t91746*(1.0/2.0);
                double t91748 = t91747+1.0;
                double t91749 = log(t91748);
                double t91750 = a1p*c*t91734;
                double t91751 = t91750+1.0;
                double t91752 = rho_a[index]*2.0;
                double t91753 = 1.0/pow(t91752,1.0/3.0);
                double t91754 = c*t91753;
                double t91755 = 1.0/pow(rho_a[index],8.0/3.0);
                double t91756 = gcab*gcab;
                double t91757 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t91758 = gamma_aa[index]*gamma_aa[index];
                double t91759 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t91760 = gamma_aa[index]*gcab*t91755;
                double t91761 = t91760+1.0;
                double t91762 = gamma_aa[index]*gcab*t91755*3.0;
                double t91763 = gamma_aa[index]*gcab*t91756*t91758*t91759;
                double t91764 = t91756*t91757*t91758*3.0;
                double t91765 = t91762+t91763+t91764+1.0;
                double t91766 = gamma_aa[index]*gcab*t91755*2.0;
                double t91767 = t91756*t91757*t91758;
                double t91768 = t91766+t91767+1.0;
                double t91769 = pow(2.0,1.0/3.0);
                double t91770 = t91769*2.0;
                double t91771 = t91770-2.0;
                double t91772 = two_13*2.0;
                double t91773 = t91772-2.0;
                double t91774 = 1.0/t91773;
                double t91775 = 1.0/c0f;
                double t91776 = b1f*t91736;
                double t91777 = b3f*t91737;
                double t91778 = b4f*t91738*t91739;
                double t91779 = b2f*c*t91734;
                double t91780 = t91776+t91777+t91778+t91779;
                double t91781 = 1.0/t91780;
                double t91782 = t91781*t91775*(1.0/2.0);
                double t91783 = t91782+1.0;
                double t91784 = log(t91783);
                double t91785 = a1f*c*t91734;
                double t91786 = t91785+1.0;
                double t91787 = c0f*t91784*t91786*2.0;
                double t91788 = c0p*t91751*t91749*2.0;
                double t91789 = gcaa*gcaa;
                double t91790 = gamma_aa[index]*gcaa*t91755;
                double t91791 = t91790+1.0;
                double t91792 = gamma_aa[index]*gcaa*t91755*3.0;
                double t91793 = gamma_aa[index]*gcaa*t91758*t91759*t91789;
                double t91794 = t91757*t91758*t91789*3.0;
                double t91795 = t91792+t91793+t91794+1.0;
                double t91796 = gamma_aa[index]*gcaa*t91755*2.0;
                double t91797 = t91757*t91758*t91789;
                double t91798 = t91796+t91797+1.0;
                double t91799 = pow(rho_a[index],5.0/3.0);
                double t91800 = C_k*t91799;
                double t91801 = tau_a[index]*1.0E20;
                double t91802 = 1.0/tau_a[index];
                double t91803 = -t91800+t91801;
                double t91804 = ( (t91803 > 0.0) ?  1.0 : 0.0 ) ;
                double t91805 = C_k*t91802*t91804*t91799;
                double t91806 = t91800-t91801;
                double t91807 = ( (t91806 > 0.0) ?  1.0 : 0.0 ) ;
                double t91808 = t91807*1.0E20;
                double t91809 = t91805+t91808-1.0;
                double t91810 = t91809*t91809;
                double t91811 = t91805+t91808+1.0;
                double t91812 = t91810*t91810;
                double t91813 = gx*gx;
                double t91814 = gamma_aa[index]*gx*t91755;
                double t91815 = t91814+1.0;
                double t91816 = gamma_aa[index]*gx*t91755*3.0;
                double t91817 = gamma_aa[index]*gx*t91813*t91758*t91759;
                double t91818 = t91813*t91757*t91758*3.0;
                double t91819 = t91816+t91817+t91818+1.0;
                double t91820 = gamma_aa[index]*gx*t91755*2.0;
                double t91821 = t91813*t91757*t91758;
                double t91822 = t91820+t91821+1.0;
                double t91823 = 1.0/t91815;
                double t91824 = 1.0/t91822;
                double t91825 = 1.0/t91819;
                double t91826 = 1.0/(t91815*t91815);
                double t91827 = gx*t91755*3.0;
                double t91828 = gamma_aa[index]*t91813*t91757*6.0;
                double t91829 = gx*t91813*t91758*t91759*3.0;
                double t91830 = t91827+t91828+t91829;
                double t91831 = 1.0/(t91819*t91819);
                double t91832 = gx*t91755*2.0;
                double t91833 = gamma_aa[index]*t91813*t91757*2.0;
                double t91834 = t91832+t91833;
                double t91835 = 1.0/(t91822*t91822);
                v_gamma_aa_[index] = (rho_a[index]*(t91788+t91771*t91774*(t91787-c0p*t91751*t91749*2.0))*2.0-c0p* \
                   rho_a[index]*log((t91740*(1.0/2.0))/(b1p*sqrt(t91754)+b3p*pow(t91754,3.0/2.0)+b4p*1.0/pow(t91752,2.0/ \
                   3.0)*t91738+b2p*c*t91753)+1.0)*(a1p*c*t91753+1.0)*4.0)*((ccab1*gcab*t91755*(1.0/2.0))/t91761-ccab1* \
                   gamma_aa[index]*1.0/(t91761*t91761)*t91756*t91757*(1.0/2.0)+(ccab2*gamma_aa[index]*t91756*t91757)/ \
                   t91768-ccab2*t91756*t91757*t91758*1.0/(t91768*t91768)*(gcab*t91755+gamma_aa[index]*t91756*t91757)+ \
                   (ccab3*gcab*t91756*t91758*t91759*(3.0/2.0))/t91765-ccab3*gamma_aa[index]*gcab*t91756*1.0/(t91765*t91765) \
                   *t91758*t91759*(gcab*t91755*(3.0/2.0)+gamma_aa[index]*t91756*t91757*3.0+gcab*t91756*t91758*t91759* \
                   (3.0/2.0)))*2.0-rho_a[index]*(t91788+t91771*t91774*(t91787-t91788))*((ccaa1*gcaa*t91755)/t91791-ccaa1* \
                   gamma_aa[index]*1.0/(t91791*t91791)*t91757*t91789+(ccaa2*gamma_aa[index]*t91757*t91789*2.0)/t91798- \
                   ccaa2*t91757*t91758*t91789*1.0/(t91798*t91798)*(gcaa*t91755*2.0+gamma_aa[index]*t91757*t91789*2.0) \
                   +(ccaa3*gcaa*t91758*t91759*t91789*3.0)/t91795-ccaa3*gamma_aa[index]*gcaa*t91758*t91759*1.0/(t91795* \
                   t91795)*t91789*(gcaa*t91755*3.0+gamma_aa[index]*t91757*t91789*6.0+gcaa*t91758*t91759*t91789*3.0))* \
                   2.0-c0*pow(rho_a[index],4.0/3.0)*(X-1.0)*((t91809/t91811-t91810*1.0/(t91811*t91811*t91811)*t91809* \
                   2.0+1.0/(t91811*t91811*t91811*t91811*t91811)*t91812*t91809)*(cxnl1*gx*t91823*t91755+cxnl2*gamma_aa[index]* \
                   t91813*t91824*t91757*2.0-cxnl1*gamma_aa[index]*t91813*t91826*t91757-cxnl2*t91813*t91834*t91835*t91757* \
                   t91758+cxnl3*gx*t91813*t91825*t91758*t91759*3.0-cxnl3*gamma_aa[index]*gx*t91830*t91813*t91831*t91758* \
                   t91759)+cx1*gx*t91823*t91755-cx1*gamma_aa[index]*t91813*t91826*t91757+cx2*gamma_aa[index]*t91813*t91824* \
                   t91757*2.0-cx2*t91813*t91834*t91835*t91757*t91758+cx3*gx*t91813*t91825*t91758*t91759*3.0-cx3*gamma_aa[index]* \
                   gx*t91830*t91813*t91831*t91758*t91759)*2.0;
            } else {
                v_gamma_aa_[index] = 0.0;
            }

        }
        if (is_meta_) {

            //V_tau_a
            if (rho_a[index] > cutoff_) {
                double t91837 = 1.0/pow(rho_a[index],8.0/3.0);
                double t91838 = gamma_aa[index]*gamma_aa[index];
                double t91839 = gx*gx;
                double t91840 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t91841 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t91842 = pow(rho_a[index],5.0/3.0);
                double t91843 = tau_a[index]*1.0E20;
                double t91846 = C_k*t91842;
                double t91844 = t91843-t91846;
                double t91845 = 0.0 ;
                double t91847 = 1.0/tau_a[index];
                double t91848 = ( (t91844 > 0.0) ?  1.0 : 0.0 ) ;
                double t91849 = t91845*1.0E40;
                double t91850 = 1.0/(tau_a[index]*tau_a[index]);
                double t91851 = C_k*t91850*t91842*t91848;
                double t91858 = C_k*t91842*t91845*t91847*1.0E20;
                double t91852 = t91851+t91849-t91858;
                double t91853 = -t91843+t91846;
                double t91854 = ( (t91853 > 0.0) ?  1.0 : 0.0 ) ;
                double t91855 = t91854*1.0E20;
                double t91856 = C_k*t91842*t91847*t91848;
                double t91857 = t91855+t91856+1.0;
                double t91859 = t91855+t91856-1.0;
                double t91860 = t91859*t91859;
                double t91861 = t91860*t91860;
                double t91862 = pow(rho_a[index],4.0/3.0);
                double t91863 = gamma_aa[index]*gx*t91837;
                double t91864 = t91863+1.0;
                double t91865 = 1.0/t91864;
                double t91866 = cxnl1*gamma_aa[index]*gx*t91837*t91865;
                double t91867 = gamma_aa[index]*gx*t91837*3.0;
                double t91868 = gamma_aa[index]*gx*t91840*t91838*t91839;
                double t91869 = t91841*t91838*t91839*3.0;
                double t91870 = t91867+t91868+t91869+1.0;
                double t91871 = 1.0/t91870;
                double t91872 = cxnl3*gamma_aa[index]*gx*t91840*t91871*t91838*t91839;
                double t91873 = gamma_aa[index]*gx*t91837*2.0;
                double t91874 = t91841*t91838*t91839;
                double t91875 = t91873+t91874+1.0;
                double t91876 = 1.0/t91875;
                double t91877 = cxnl2*t91841*t91838*t91839*t91876;
                double t91878 = cxnl0+t91872+t91866+t91877;
                double t91879 = 1.0/t91857;
                double t91880 = 1.0/(t91857*t91857*t91857);
                double t91881 = 1.0/(t91857*t91857*t91857*t91857);
                double t91882 = 1.0/(t91857*t91857*t91857*t91857*t91857);
                double t91883 = 1.0/(t91857*t91857*t91857*t91857*t91857*t91857);
                double t91884 = 1.0/(t91857*t91857);
                v_tau_a_[index] = (c0*t91862*t91878*(t91845*t91879*1.0E40-t91860*t91880*t91845*6.0E40+t91861*t91845* \
                   t91882*5.0E40-t91845*t91884*t91859*1.0E40+t91860*t91845*t91881*t91859*6.0E40-t91861*t91845*t91883* \
                   t91859*5.0E40)+c0*t91862*t91878*(t91852*t91879-t91860*t91852*t91880*6.0+t91852*t91861*t91882*5.0-t91852* \
                   t91884*t91859+t91860*t91852*t91881*t91859*6.0-t91852*t91861*t91883*t91859*5.0))*(X-1.0);
            } else {
                v_tau_a_[index] = 0.0;
            }

        }
    }
    //Second Partials
    for (int index = 0; index < ntrue && deriv_ >= 2; index++) {

        //V_rho_a_rho_a
        if (rho_a[index] > cutoff_) {
            double t91886 = rho_a[index]*2.0;
            double t91887 = 1.0/pow(t91886,1.0/3.0);
            double t91888 = c*t91887;
            double t91889 = sqrt(t91888);
            double t91890 = b1p*t91889;
            double t91891 = pow(t91888,3.0/2.0);
            double t91892 = b3p*t91891;
            double t91893 = b2p*c*t91887;
            double t91894 = c*c;
            double t91895 = 1.0/pow(t91886,2.0/3.0);
            double t91896 = b4p*t91894*t91895;
            double t91897 = t91890+t91892+t91893+t91896;
            double t91898 = 1.0/pow(t91886,8.0/3.0);
            double t91899 = 1.0/pow(t91886,7.0/3.0);
            double t91900 = 1.0/sqrt(t91888);
            double t91901 = 1.0/c0p;
            double t91902 = 1.0/t91897;
            double t91903 = t91901*t91902*(1.0/2.0);
            double t91904 = t91903+1.0;
            double t91905 = 1.0/t91904;
            double t91906 = a1p*c*t91887;
            double t91907 = t91906+1.0;
            double t91908 = 1.0/pow(t91886,4.0/3.0);
            double t91910 = b2p*c*t91908*(1.0/3.0);
            double t91911 = 1.0/pow(t91886,5.0/3.0);
            double t91912 = b4p*t91911*t91894*(2.0/3.0);
            double t91913 = b1p*c*t91900*t91908*(1.0/6.0);
            double t91914 = b3p*c*t91908*t91889*(1.0/2.0);
            double t91909 = t91910+t91912+t91913+t91914;
            double t91915 = t91909*t91909;
            double t91916 = 1.0/(t91897*t91897);
            double t91917 = log(t91904);
            double t91918 = 1.0/pow(rho_a[index],8.0/3.0);
            double t91919 = gamma_aa[index]*gamma_aa[index];
            double t91920 = gcab*gcab;
            double t91921 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]);
            double t91922 = 1.0/pow(rho_a[index],1.6E1/3.0);
            double t91923 = two_13*2.0;
            double t91924 = t91923-2.0;
            double t91925 = 1.0/t91924;
            double t91926 = 1.0/pow(rho_a[index],1.0/3.0);
            double t91927 = c*t91926;
            double t91928 = sqrt(t91927);
            double t91929 = b1f*t91928;
            double t91930 = pow(t91927,3.0/2.0);
            double t91931 = b3f*t91930;
            double t91932 = 1.0/pow(rho_a[index],2.0/3.0);
            double t91933 = b4f*t91932*t91894;
            double t91934 = b2f*c*t91926;
            double t91935 = t91931+t91933+t91934+t91929;
            double t91936 = 1.0/pow(rho_a[index],4.0/3.0);
            double t91937 = b1p*t91928;
            double t91938 = b3p*t91930;
            double t91939 = b4p*t91932*t91894;
            double t91940 = b2p*c*t91926;
            double t91941 = t91940+t91937+t91938+t91939;
            double t91942 = 1.0/pow(rho_a[index],5.0/3.0);
            double t91943 = 1.0/sqrt(t91927);
            double t91944 = 1.0/c0f;
            double t91945 = 1.0/t91935;
            double t91946 = t91944*t91945*(1.0/2.0);
            double t91947 = t91946+1.0;
            double t91948 = 1.0/t91941;
            double t91949 = t91901*t91948*(1.0/2.0);
            double t91950 = t91949+1.0;
            double t91951 = a1p*c*t91926;
            double t91952 = t91951+1.0;
            double t91953 = 1.0/t91950;
            double t91954 = 1.0/(t91941*t91941);
            double t91955 = b4p*t91942*t91894*(2.0/3.0);
            double t91956 = b2p*c*t91936*(1.0/3.0);
            double t91957 = b1p*c*t91943*t91936*(1.0/6.0);
            double t91958 = b3p*c*t91936*t91928*(1.0/2.0);
            double t91959 = t91955+t91956+t91957+t91958;
            double t91960 = t91952*t91953*t91954*t91959;
            double t91961 = log(t91950);
            double t91962 = gcaa*gcaa;
            double t91963 = pow(2.0,1.0/3.0);
            double t91964 = t91963*2.0;
            double t91965 = t91964-2.0;
            double t91966 = log(t91947);
            double t91967 = a1f*c*t91926;
            double t91968 = t91967+1.0;
            double t91969 = gamma_aa[index]*gcab*t91918*3.0;
            double t91970 = gamma_aa[index]*gcab*t91920*t91921*t91919;
            double t91971 = t91920*t91922*t91919*3.0;
            double t91972 = t91970+t91971+t91969+1.0;
            double t91973 = 1.0/t91972;
            double t91974 = gamma_aa[index]*gcab*t91918*2.0;
            double t91975 = t91920*t91922*t91919;
            double t91976 = t91974+t91975+1.0;
            double t91977 = 1.0/t91976;
            double t91978 = 1.0/pow(rho_a[index],1.0E1);
            double t91979 = gamma_aa[index]*gcab*t91918;
            double t91980 = t91979+1.0;
            double t91981 = 1.0/pow(rho_a[index],2.2E1/3.0);
            double t91983 = 1.0/pow(rho_a[index],1.1E1/3.0);
            double t91985 = 1.0/pow(rho_a[index],1.9E1/3.0);
            double t91991 = gamma_aa[index]*gcab*t91983*(8.0/3.0);
            double t91992 = t91920*t91919*t91985*(8.0/3.0);
            double t91982 = t91991+t91992;
            double t91984 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]*rho_a[index]);
            double t91986 = 1.0/(t91972*t91972);
            double t91987 = gamma_aa[index]*gcab*t91983*4.0;
            double t91988 = gamma_aa[index]*gcab*t91920*t91919*t91984*4.0;
            double t91989 = t91920*t91919*t91985*8.0;
            double t91990 = t91987+t91988+t91989;
            double t91993 = 1.0/(t91976*t91976);
            double t91994 = pow(rho_a[index],5.0/3.0);
            double t91995 = C_k*t91994;
            double t91996 = tau_a[index]*1.0E20;
            double t91997 = 1.0/tau_a[index];
            double t91998 = -t91995+t91996;
            double t91999 = ( (t91998 > 0.0) ?  1.0 : 0.0 ) ;
            double t92000 = C_k*t91994*t91997*t91999;
            double t92001 = t91995-t91996;
            double t92002 = ( (t92001 > 0.0) ?  1.0 : 0.0 ) ;
            double t92003 = t92002*1.0E20;
            double t92004 = t92000+t92003-1.0;
            double t92005 = t92004*t92004;
            double t92006 = t92000+t92003+1.0;
            double t92007 = t92005*t92005;
            double t92008 = gx*gx;
            double t92009 = gamma_aa[index]*gx*t91918;
            double t92010 = t92009+1.0;
            double t92011 = 1.0/t92010;
            double t92012 = gamma_aa[index]*gx*t91918*3.0;
            double t92013 = gamma_aa[index]*gx*t91921*t91919*t92008;
            double t92014 = t91922*t91919*t92008*3.0;
            double t92015 = t92012+t92013+t92014+1.0;
            double t92016 = 1.0/t92015;
            double t92017 = gamma_aa[index]*gx*t91918*2.0;
            double t92018 = t91922*t91919*t92008;
            double t92019 = t92017+t92018+1.0;
            double t92020 = 1.0/t92019;
            double t92021 = 1.0/t92006;
            double t92022 = 1.0/(t92006*t92006*t92006);
            double t92023 = 1.0/(t92006*t92006*t92006*t92006*t92006);
            double t92024 = t92004*t92023*t92007;
            double t92025 = cxnl1*gamma_aa[index]*gx*t91918*t92011;
            double t92026 = cxnl3*gamma_aa[index]*gx*t91921*t91919*t92016*t92008;
            double t92027 = cxnl2*t91922*t91919*t92020*t92008;
            double t92028 = cxnl0+t92025+t92026+t92027;
            double t92029 = 0.0 ;
            double t92030 = pow(rho_a[index],2.0/3.0);
            double t92031 = C_k*t92030*t92029*(5.0E20/3.0);
            double t92032 = C_k*C_k;
            double t92033 = pow(rho_a[index],7.0/3.0);
            double t92034 = C_k*t91997*t91999*t92030*(5.0/3.0);
            double t92036 = t91997*t92032*t92033*t92029*(5.0/3.0);
            double t92035 = t92031+t92034-t92036;
            double t92037 = 1.0/(t92010*t92010);
            double t92038 = gamma_aa[index]*gx*t91983*8.0;
            double t92039 = gamma_aa[index]*gx*t91919*t91984*t92008*8.0;
            double t92040 = t91919*t91985*t92008*1.6E1;
            double t92041 = t92040+t92038+t92039;
            double t92042 = 1.0/(t92015*t92015);
            double t92043 = gamma_aa[index]*gx*t91983*(1.6E1/3.0);
            double t92044 = t91919*t91985*t92008*(1.6E1/3.0);
            double t92045 = t92043+t92044;
            double t92046 = 1.0/(t92019*t92019);
            double t92047 = t92021*t92004;
            double t92083 = t92004*t92022*t92005*2.0;
            double t92048 = t92024+t92047-t92083;
            double t92049 = 1.0/pow(rho_a[index],1.4E1/3.0);
            double t92050 = cxnl1*gamma_aa[index]*gx*t91983*t92011*(8.0/3.0);
            double t92051 = cxnl3*gamma_aa[index]*gx*t91919*t91984*t92016*t92008*8.0;
            double t92052 = cxnl2*t91919*t91985*t92020*t92008*(1.6E1/3.0);
            double t92053 = t92050+t92051+t92052-cxnl1*t91919*t91985*t92008*t92037*(8.0/3.0)-cxnl2*t91922*t91919* \
               t92008*t92045*t92046-cxnl3*gamma_aa[index]*gx*t91921*t91919*t92041*t92042*t92008;
            double t92054 = t92021*t92035;
            double t92055 = 1.0/(t92006*t92006);
            double t92056 = 1.0/(t92006*t92006*t92006*t92006);
            double t92057 = t92004*t92005*t92035*t92056*6.0;
            double t92058 = t92023*t92007*t92035*5.0;
            double t92059 = 1.0/(t92006*t92006*t92006*t92006*t92006*t92006);
            double t92060 = t92054+t92057+t92058-t92022*t92005*t92035*6.0-t92004*t92035*t92055-t92004*t92007* \
               t92035*t92059*5.0;
            double t92061 = pow(rho_a[index],4.0/3.0);
            double t92062 = rho_a[index]*rho_a[index];
            double t92063 = 0.0 ;
            double t92064 = t92035*t92035;
            double t92065 = C_k*t91926*t92029*(1.0E21/9.0);
            double t92066 = C_k*rho_a[index]*t91997*t92032*t92062*t92063*(2.5E1/9.0);
            double t92067 = C_k*t91926*t91997*t91999*(1.0E1/9.0);
            double t92069 = t92032*t92061*t92063*(2.5E21/9.0);
            double t92070 = t91997*t92032*t92061*t92029*(2.0E1/3.0);
            double t92068 = -t92070+t92065+t92066+t92067-t92069;
            double t92071 = 1.0/(t92010*t92010*t92010);
            double t92072 = t92045*t92045;
            double t92073 = 1.0/(t92019*t92019*t92019);
            double t92074 = gamma_aa[index]*gx*t92049*(8.8E1/3.0);
            double t92075 = gamma_aa[index]*gx*t91919*t91978*t92008*7.2E1;
            double t92076 = t91981*t91919*t92008*(3.04E2/3.0);
            double t92077 = t92074+t92075+t92076;
            double t92078 = t92041*t92041;
            double t92079 = 1.0/(t92015*t92015*t92015);
            double t92080 = gamma_aa[index]*gx*t92049*(1.76E2/9.0);
            double t92081 = t91981*t91919*t92008*(3.04E2/9.0);
            double t92082 = t92080+t92081;
            double t92084 = c0f*t91966*t91968*2.0;
            double t92085 = c0p*t91952*t91961*2.0;
            double t92086 = 1.0/t91980;
            double t92087 = 1.0/(t91980*t91980*t91980);
            double t92088 = ccab1*gamma_aa[index]*gcab*t91920*t91919*t91978*t92087*(3.2E1/9.0);
            double t92089 = 1.0/(t91980*t91980);
            double t92090 = t91982*t91982;
            double t92091 = 1.0/(t91976*t91976*t91976);
            double t92092 = ccab2*t91920*t91922*t91919*t92090*t92091*2.0;
            double t92093 = t91990*t91990;
            double t92094 = 1.0/(t91972*t91972*t91972);
            double t92095 = ccab3*gamma_aa[index]*gcab*t91920*t91921*t91919*t92093*t92094*2.0;
            double t92096 = 1.0/t91947;
            double t92097 = 1.0/(t91935*t91935);
            double t92098 = b4f*t91942*t91894*(2.0/3.0);
            double t92099 = b2f*c*t91936*(1.0/3.0);
            double t92100 = b1f*c*t91943*t91936*(1.0/6.0);
            double t92101 = b3f*c*t91936*t91928*(1.0/2.0);
            double t92102 = t92100+t92101+t92098+t92099;
            double t92103 = a1f*c*c0f*t91936*t91966*(2.0/3.0);
            double t92104 = a1p*c*c0p*t91961*t91936*(2.0/3.0);
            double t92105 = t92084-t92085;
            double t92106 = t91925*t91965*t92105;
            double t92107 = ccab1*gamma_aa[index]*gcab*t91918*t92086;
            double t92108 = ccab3*gamma_aa[index]*gcab*t91920*t91921*t91919*t91973;
            double t92109 = ccab2*t91920*t91922*t91919*t91977;
            double t92110 = ccab0+t92107+t92108+t92109;
            double t92111 = b2p*c*t91899*(4.0/9.0);
            double t92112 = b4p*t91894*t91898*(1.0E1/9.0);
            double t92113 = 1.0/pow(t91888,3.0/2.0);
            double t92114 = b3p*t91900*t91894*t91898*(1.0/1.2E1);
            double t92115 = b1p*c*t91900*t91899*(2.0/9.0);
            double t92116 = b3p*c*t91889*t91899*(2.0/3.0);
            double t92117 = t92111+t92112+t92114+t92115+t92116-b1p*t91894*t91898*t92113*(1.0/3.6E1);
            double t92118 = t91905*t91907*t91916*t92117;
            double t92119 = 1.0/(t91897*t91897*t91897);
            double t92120 = 1.0/(t91904*t91904);
            double t92121 = 1.0/(t91897*t91897*t91897*t91897);
            double t92122 = t91901*t91915*t91907*t92120*t92121*(1.0/2.0);
            double t92123 = 1.0/d2fz0;
            double t92124 = 1.0/(rho_a[index]*rho_a[index]);
            double t92125 = 1.0/Aa;
            double t92126 = b1a*t91889;
            double t92127 = b3a*t91891;
            double t92128 = b2a*c*t91887;
            double t92129 = b4a*t91894*t91895;
            double t92130 = t92126+t92127+t92128+t92129;
            double t92131 = 1.0/t92130;
            double t92132 = t92131*t92125*(1.0/2.0);
            double t92133 = t92132+1.0;
            double t92134 = log(t92133);
            double t92135 = a1a*c*t91887;
            double t92136 = t92135+1.0;
            double t92137 = a1p*c*t91905*t91916*t91908*t91909*(2.0/3.0);
            double t92138 = 1.0/pow(rho_a[index],7.0/3.0);
            double t92139 = 1.0/pow(t91927,3.0/2.0);
            double t92140 = t92102*t92102;
            double t92141 = t91959*t91959;
            double t92142 = 1.0/(t91941*t91941*t91941);
            double t92143 = t91952*t91953*t92141*t92142*2.0;
            double t92144 = b4p*t91918*t91894*(1.0E1/9.0);
            double t92145 = b2p*c*t92138*(4.0/9.0);
            double t92146 = b3p*t91943*t91918*t91894*(1.0/1.2E1);
            double t92147 = b1p*c*t91943*t92138*(2.0/9.0);
            double t92148 = b3p*c*t91928*t92138*(2.0/3.0);
            double t92197 = b1p*t91918*t91894*t92139*(1.0/3.6E1);
            double t92149 = t92144+t92145+t92146+t92147+t92148-t92197;
            double t92150 = 1.0/(t91950*t91950);
            double t92151 = 1.0/(t91941*t91941*t91941*t91941);
            double t92152 = a1p*c*c0p*t91961*t92138*(8.0/9.0);
            double t92178 = t91968*t92102*t92096*t92097;
            double t92153 = t91960+t92103-t92104-t92178;
            double t92154 = a1p*c*c0p*t91908*t91917*(4.0/3.0);
            double t92155 = t92106+t92085;
            double t92156 = gamma_aa[index]*gcaa*t91918;
            double t92157 = t92156+1.0;
            double t92158 = 1.0/t92157;
            double t92159 = gamma_aa[index]*gcaa*t91918*3.0;
            double t92160 = gamma_aa[index]*gcaa*t91921*t91962*t91919;
            double t92161 = t91922*t91962*t91919*3.0;
            double t92162 = t92160+t92161+t92159+1.0;
            double t92163 = 1.0/t92162;
            double t92164 = gamma_aa[index]*gcaa*t91918*2.0;
            double t92165 = t91922*t91962*t91919;
            double t92166 = t92164+t92165+1.0;
            double t92167 = 1.0/t92166;
            double t92168 = 1.0/(t92157*t92157);
            double t92169 = gamma_aa[index]*gcaa*t91983*(1.6E1/3.0);
            double t92170 = t91962*t91919*t91985*(1.6E1/3.0);
            double t92171 = t92170+t92169;
            double t92172 = gamma_aa[index]*gcaa*t91983*8.0;
            double t92173 = gamma_aa[index]*gcaa*t91962*t91919*t91984*8.0;
            double t92174 = t91962*t91919*t91985*1.6E1;
            double t92175 = t92172+t92173+t92174;
            double t92176 = 1.0/(t92162*t92162);
            double t92177 = 1.0/(t92166*t92166);
            double t92179 = t91925*t91965*t92153;
            double t92180 = ccaa1*gamma_aa[index]*gcaa*t91983*t92158*(8.0/3.0);
            double t92181 = ccaa3*gamma_aa[index]*gcaa*t91962*t91919*t91984*t92163*8.0;
            double t92182 = ccaa2*t91962*t91919*t91985*t92167*(1.6E1/3.0);
            double t92183 = t92180+t92181+t92182-ccaa1*t91962*t91919*t91985*t92168*(8.0/3.0)-ccaa2*t91922*t91962* \
               t91919*t92171*t92177-ccaa3*gamma_aa[index]*gcaa*t91921*t91962*t91919*t92175*t92176;
            double t92184 = -t91960+t92104+t92179;
            double t92185 = ccaa1*gamma_aa[index]*gcaa*t91918*t92158;
            double t92186 = ccaa3*gamma_aa[index]*gcaa*t91921*t91962*t91919*t92163;
            double t92187 = ccaa2*t91922*t91962*t91919*t92167;
            double t92188 = ccaa0+t92185+t92186+t92187;
            double t92189 = 1.0/(t91935*t91935*t91935);
            double t92190 = b4f*t91918*t91894*(1.0E1/9.0);
            double t92191 = b2f*c*t92138*(4.0/9.0);
            double t92192 = b3f*t91943*t91918*t91894*(1.0/1.2E1);
            double t92193 = b1f*c*t91943*t92138*(2.0/9.0);
            double t92194 = b3f*c*t91928*t92138*(2.0/3.0);
            double t92195 = t92190+t92191+t92192+t92193+t92194-b1f*t91918*t91894*t92139*(1.0/3.6E1);
            double t92196 = t91968*t92096*t92195*t92097;
            double t92198 = t91952*t91953*t91954*t92149;
            double t92199 = 1.0/(t91947*t91947);
            double t92200 = 1.0/(t91935*t91935*t91935*t91935);
            double t92201 = t91944*t91968*t92200*t92140*t92199*(1.0/2.0);
            double t92202 = t91901*t91952*t92141*t92150*t92151*(1.0/2.0);
            double t92203 = a1f*c*t91936*t92102*t92096*t92097*(2.0/3.0);
            double t92204 = a1p*c*t91953*t91936*t91954*t91959*(2.0/3.0);
            v_rho_a_rho_a_[index] = (rho_a[index]*(t92085+t91925*t91965*(t92084-c0p*t91952*t91961*2.0))*2.0-c0p* \
               rho_a[index]*t91907*t91917*4.0)*(t92092+t92095+t92088+ccab2*t91920*t91981*t91919*t91977*(3.2E1/9.0) \
               -ccab1*t91920*t91981*t91919*t92089*(3.2E1/9.0)-ccab2*1.0/pow(rho_a[index],3.8E1/3.0)*(t91920*t91920) \
               *(t91919*t91919)*t91993*(3.2E1/9.0)-ccab2*t91920*t91919*t91982*t91993*t91985*(1.6E1/3.0)+ccab3*gamma_aa[index]* \
               gcab*t91920*t91919*t91973*t91978*(3.2E1/3.0)-ccab3*gamma_aa[index]*gcab*t91920*t91921*t91919*t91986* \
               (t91920*t91981*t91919*(3.2E1/3.0)+gamma_aa[index]*gcab*t91920*t91919*t91978*(3.2E1/3.0))-ccab3*gamma_aa[index]* \
               gcab*t91920*t91990*t91919*t91984*t91986*8.0)-t92110*(-t92154-rho_a[index]*(t92122+t92118+t92137-t91905* \
               t91915*t91907*t92119*2.0-a1p*c*c0p*t91917*t91899*(8.0/9.0)+Aa*t91925*t92123*t92124*t92134*t92136*(4.0/ \
               9.0))*2.0+rho_a[index]*(t92202+t92204-t92143-t92152+t92198+t91925*t91965*(t92201+t92203+t92143+t92152+ \
               t92196-t91952*t91953*t91954*t92149-t91968*t92140*t92096*t92189*2.0-a1f*c*c0f*t91966*t92138*(8.0/9.0) \
               -t91901*t91952*t92141*t92150*t92151*(1.0/2.0)-a1p*c*t91953*t91936*t91954*t91959*(2.0/3.0)))+t91925* \
               t91965*t92153*2.0+t91905*t91907*t91916*t91909*2.0-t91952*t91953*t91954*t91959*2.0+a1p*c*c0p*t91961* \
               t91936*(4.0/3.0))+t92155*t92183*2.0+(-t92106-t92085+rho_a[index]*t92184+rho_a[index]*(t91905*t91907* \
               t91916*t91909-a1p*c*c0p*t91908*t91917*(2.0/3.0))*2.0+c0p*t91907*t91917*2.0)*(ccab1*gamma_aa[index]* \
               gcab*t91983*t92086*(4.0/3.0)+ccab2*t91920*t91919*t91985*t91977*(8.0/3.0)-ccab1*t91920*t91919*t91985* \
               t92089*(4.0/3.0)-ccab2*t91920*t91922*t91919*t91982*t91993+ccab3*gamma_aa[index]*gcab*t91920*t91919* \
               t91973*t91984*4.0-ccab3*gamma_aa[index]*gcab*t91920*t91921*t91990*t91919*t91986)*4.0+t92188*(-t91960+ \
               t92104+t91925*t91965*(t91960+t92103-t91968*t92102*t92096*t92097-a1p*c*c0p*t91961*t91936*(2.0/3.0)) \
               )*2.0+(rho_a[index]*t92155*2.0-c0p*rho_a[index]*t91907*t91917*4.0)*(t92092+t92095+t92088+ccab1*gamma_aa[index]* \
               gcab*t92049*t92086*(4.4E1/9.0)+ccab2*t91920*t91981*t91919*t91977*(4.0E1/3.0)-ccab1*t91920*t91981*t91919* \
               t92089*(7.6E1/9.0)-ccab2*t91920*t91919*t91982*t91993*t91985*(1.6E1/3.0)-ccab2*t91920*t91922*t91919* \
               t91993*(gamma_aa[index]*gcab*t92049*(8.8E1/9.0)+t91920*t91981*t91919*(4.0E1/3.0))+ccab3*gamma_aa[index]* \
               gcab*t91920*t91919*t91973*t91978*(7.6E1/3.0)-ccab3*gamma_aa[index]*gcab*t91920*t91921*t91919*t91986* \
               (gamma_aa[index]*gcab*t92049*(4.4E1/3.0)+t91920*t91981*t91919*4.0E1+gamma_aa[index]*gcab*t91920*t91919* \
               t91978*(7.6E1/3.0))-ccab3*gamma_aa[index]*gcab*t91920*t91990*t91919*t91984*t91986*8.0)+t92110*(t92154+ \
               rho_a[index]*(t92122+t92118+t92137-t91905*t91915*t91907*t92119*2.0-a1p*c*c0p*t91917*t91899*(8.0/9.0) \
               -Aa*t91925*t92123*t92124*t92134*t92136*(4.0/9.0))*2.0-t91905*t91907*t91916*t91909*2.0)-(X-1.0)*(c0* \
               t92061*(t92048*(cxnl1*gamma_aa[index]*gx*t92011*t92049*(8.8E1/9.0)+cxnl2*t91981*t91919*t92020*t92008* \
               (3.04E2/9.0)-cxnl1*t91981*t91919*t92008*t92037*2.4E1+cxnl2*t91922*t91919*t92008*t92072*t92073*2.0- \
               cxnl2*t91922*t91919*t92008*t92046*t92082-cxnl2*t91919*t91985*t92008*t92045*t92046*(3.2E1/3.0)+cxnl1* \
               gamma_aa[index]*gx*t91919*t91978*t92008*t92071*(1.28E2/9.0)+cxnl3*gamma_aa[index]*gx*t91919*t91978* \
               t92016*t92008*7.2E1-cxnl3*gamma_aa[index]*gx*t91921*t91919*t92042*t92008*t92077-cxnl3*gamma_aa[index]* \
               gx*t91919*t91984*t92041*t92042*t92008*1.6E1+cxnl3*gamma_aa[index]*gx*t91921*t91919*t92008*t92078*t92079* \
               2.0)-t92060*t92053*2.0-t92028*(-t92021*t92068+t92055*t92064*2.0+t92004*t92022*t92064*1.0E1+t92022* \
               t92005*t92068*6.0-t92005*t92064*t92056*3.6E1-t92023*t92007*t92068*5.0+t92004*t92055*t92068+t92007* \
               t92064*t92059*5.0E1+t92004*t92005*t92023*t92064*4.0-t92004*t92005*t92056*t92068*6.0+t92004*t92007* \
               t92059*t92068*5.0-t92004*1.0/(t92006*t92006*t92006*t92006*t92006*t92006*t92006)*t92007*t92064*3.0E1) \
               +cx1*gamma_aa[index]*gx*t92011*t92049*(8.8E1/9.0)-cx1*t91981*t91919*t92008*t92037*2.4E1+cx2*t91981* \
               t91919*t92020*t92008*(3.04E2/9.0)+cx2*t91922*t91919*t92008*t92072*t92073*2.0-cx2*t91922*t91919*t92008* \
               t92046*t92082-cx2*t91919*t91985*t92008*t92045*t92046*(3.2E1/3.0)+cx1*gamma_aa[index]*gx*t91919*t91978* \
               t92008*t92071*(1.28E2/9.0)+cx3*gamma_aa[index]*gx*t91919*t91978*t92016*t92008*7.2E1-cx3*gamma_aa[index]* \
               gx*t91921*t91919*t92042*t92008*t92077-cx3*gamma_aa[index]*gx*t91919*t91984*t92041*t92042*t92008*1.6E1+ \
               cx3*gamma_aa[index]*gx*t91921*t91919*t92008*t92078*t92079*2.0)+c0*pow(rho_a[index],1.0/3.0)*(t92060* \
               t92028-t92053*t92048-cx1*gamma_aa[index]*gx*t91983*t92011*(8.0/3.0)+cx1*t91919*t91985*t92008*t92037* \
               (8.0/3.0)-cx2*t91919*t91985*t92020*t92008*(1.6E1/3.0)+cx2*t91922*t91919*t92008*t92045*t92046-cx3*gamma_aa[index]* \
               gx*t91919*t91984*t92016*t92008*8.0+cx3*gamma_aa[index]*gx*t91921*t91919*t92041*t92042*t92008)*(8.0/ \
               3.0)+c0*t91932*(cx0+t92028*t92048+cx1*gamma_aa[index]*gx*t91918*t92011+cx2*t91922*t91919*t92020*t92008+ \
               cx3*gamma_aa[index]*gx*t91921*t91919*t92016*t92008)*(4.0/9.0))-rho_a[index]*t92155*(ccaa1*gamma_aa[index]* \
               gcaa*t92049*t92158*(8.8E1/9.0)-ccaa1*t91962*t91981*t91919*t92168*2.4E1+ccaa2*t91962*t91981*t91919* \
               t92167*(3.04E2/9.0)-ccaa2*t91962*t91919*t91985*t92171*t92177*(3.2E1/3.0)-ccaa2*t91922*t91962*t91919* \
               t92177*(gamma_aa[index]*gcaa*t92049*(1.76E2/9.0)+t91962*t91981*t91919*(3.04E2/9.0))+ccaa2*t91922*t91962* \
               t91919*(t92171*t92171)*1.0/(t92166*t92166*t92166)*2.0+ccaa3*gamma_aa[index]*gcaa*t91962*t91919*t91978* \
               t92163*7.2E1+ccaa1*gamma_aa[index]*gcaa*t91962*t91919*t91978*1.0/(t92157*t92157*t92157)*(1.28E2/9.0) \
               +ccaa3*gamma_aa[index]*gcaa*t91921*t91962*t91919*1.0/(t92162*t92162*t92162)*(t92175*t92175)*2.0-ccaa3* \
               gamma_aa[index]*gcaa*t91921*t91962*t91919*t92176*(gamma_aa[index]*gcaa*t92049*(8.8E1/3.0)+t91962*t91981* \
               t91919*(3.04E2/3.0)+gamma_aa[index]*gcaa*t91962*t91919*t91978*7.2E1)-ccaa3*gamma_aa[index]*gcaa*t91962* \
               t91919*t91984*t92175*t92176*1.6E1)+rho_a[index]*t92188*(t92202+t92204-t92143-t92152+t92198+t91925* \
               t91965*(t92201-t92202+t92203-t92204+t92143+t92152+t92196-t92198-t91968*t92140*t92096*t92189*2.0-a1f* \
               c*c0f*t91966*t92138*(8.0/9.0)))-rho_a[index]*t92183*t92184*2.0;
        } else {
            v_rho_a_rho_a_[index] = 0.0;
        }

        if (is_gga_) {

            //V_rho_a_gamma_aa
            if (rho_a[index] > cutoff_) {
                double t92206 = 1.0/pow(rho_a[index],8.0/3.0);
                double t92207 = gx*gx;
                double t92208 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t92209 = gamma_aa[index]*gamma_aa[index];
                double t92210 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t92211 = gamma_aa[index]*gx*t92206;
                double t92212 = t92211+1.0;
                double t92213 = gamma_aa[index]*gx*t92206*3.0;
                double t92214 = gamma_aa[index]*gx*t92210*t92207*t92209;
                double t92215 = t92207*t92208*t92209*3.0;
                double t92216 = t92213+t92214+t92215+1.0;
                double t92217 = gamma_aa[index]*gx*t92206*2.0;
                double t92218 = t92207*t92208*t92209;
                double t92219 = t92217+t92218+1.0;
                double t92220 = tau_a[index]*1.0E20;
                double t92221 = pow(rho_a[index],5.0/3.0);
                double t92226 = C_k*t92221;
                double t92222 = t92220-t92226;
                double t92223 = 0.0 ;
                double t92224 = pow(rho_a[index],2.0/3.0);
                double t92225 = 1.0/tau_a[index];
                double t92227 = ( (t92222 > 0.0) ?  1.0 : 0.0 ) ;
                double t92228 = C_k*t92223*t92224*(5.0E20/3.0);
                double t92229 = C_k*C_k;
                double t92230 = pow(rho_a[index],7.0/3.0);
                double t92231 = C_k*t92224*t92225*t92227*(5.0/3.0);
                double t92238 = t92230*t92223*t92225*t92229*(5.0/3.0);
                double t92232 = t92231+t92228-t92238;
                double t92233 = -t92220+t92226;
                double t92234 = ( (t92233 > 0.0) ?  1.0 : 0.0 ) ;
                double t92235 = t92234*1.0E20;
                double t92236 = C_k*t92221*t92225*t92227;
                double t92237 = t92235+t92236+1.0;
                double t92239 = t92235+t92236-1.0;
                double t92240 = t92239*t92239;
                double t92241 = t92240*t92240;
                double t92242 = 1.0/t92237;
                double t92243 = 1.0/(t92237*t92237*t92237);
                double t92244 = 1.0/(t92237*t92237*t92237*t92237*t92237);
                double t92245 = 1.0/t92212;
                double t92246 = 1.0/t92219;
                double t92247 = 1.0/t92216;
                double t92248 = 1.0/pow(rho_a[index],1.9E1/3.0);
                double t92249 = 1.0/(t92212*t92212);
                double t92250 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]*rho_a[index]);
                double t92251 = 1.0/pow(rho_a[index],1.1E1/3.0);
                double t92252 = 1.0/(t92216*t92216);
                double t92253 = 1.0/(t92219*t92219);
                double t92254 = gx*t92206*3.0;
                double t92255 = gamma_aa[index]*t92207*t92208*6.0;
                double t92256 = gx*t92210*t92207*t92209*3.0;
                double t92257 = t92254+t92255+t92256;
                double t92258 = gx*t92206*2.0;
                double t92259 = gamma_aa[index]*t92207*t92208*2.0;
                double t92260 = t92258+t92259;
                double t92261 = gamma_aa[index]*gx*t92251*(1.6E1/3.0);
                double t92262 = t92207*t92209*t92248*(1.6E1/3.0);
                double t92263 = t92261+t92262;
                double t92264 = gamma_aa[index]*gx*t92251*8.0;
                double t92265 = gamma_aa[index]*gx*t92250*t92207*t92209*8.0;
                double t92266 = t92207*t92209*t92248*1.6E1;
                double t92267 = t92264+t92265+t92266;
                double t92268 = 1.0/(t92212*t92212*t92212);
                double t92269 = gx*t92251*8.0;
                double t92270 = gamma_aa[index]*t92207*t92248*3.2E1;
                double t92271 = gx*t92250*t92207*t92209*2.4E1;
                double t92272 = t92270+t92271+t92269;
                double t92273 = gx*t92251*(1.6E1/3.0);
                double t92274 = gamma_aa[index]*t92207*t92248*(3.2E1/3.0);
                double t92275 = t92273+t92274;
                double t92276 = 1.0/(t92219*t92219*t92219);
                double t92277 = 1.0/(t92216*t92216*t92216);
                double t92278 = t92242*t92239;
                double t92279 = t92241*t92244*t92239;
                double t92280 = t92278+t92279-t92240*t92243*t92239*2.0;
                double t92281 = cxnl1*gx*t92206*t92245;
                double t92282 = cxnl2*gamma_aa[index]*t92207*t92208*t92246*2.0;
                double t92283 = cxnl3*gx*t92210*t92207*t92209*t92247*3.0;
                double t92284 = t92281+t92282+t92283-cxnl1*gamma_aa[index]*t92207*t92208*t92249-cxnl2*t92260*t92207* \
                   t92208*t92253*t92209-cxnl3*gamma_aa[index]*gx*t92210*t92207*t92252*t92209*t92257;
                double t92285 = 1.0/pow(rho_a[index],1.0/3.0);
                double t92286 = c*t92285;
                double t92287 = sqrt(t92286);
                double t92288 = pow(t92286,3.0/2.0);
                double t92289 = c*c;
                double t92290 = 1.0/pow(rho_a[index],2.0/3.0);
                double t92291 = 1.0/c0p;
                double t92292 = b1p*t92287;
                double t92293 = b3p*t92288;
                double t92294 = b4p*t92290*t92289;
                double t92295 = b2p*c*t92285;
                double t92296 = t92292+t92293+t92294+t92295;
                double t92297 = 1.0/t92296;
                double t92298 = t92291*t92297*(1.0/2.0);
                double t92299 = t92298+1.0;
                double t92300 = log(t92299);
                double t92301 = a1p*c*t92285;
                double t92302 = t92301+1.0;
                double t92303 = gcaa*gcaa;
                double t92304 = gamma_aa[index]*gcaa*t92206;
                double t92305 = t92304+1.0;
                double t92306 = gamma_aa[index]*gcaa*t92206*3.0;
                double t92307 = gamma_aa[index]*gcaa*t92210*t92303*t92209;
                double t92308 = t92303*t92208*t92209*3.0;
                double t92309 = t92306+t92307+t92308+1.0;
                double t92310 = gamma_aa[index]*gcaa*t92206*2.0;
                double t92311 = t92303*t92208*t92209;
                double t92312 = t92310+t92311+1.0;
                double t92313 = pow(2.0,1.0/3.0);
                double t92314 = t92313*2.0;
                double t92315 = t92314-2.0;
                double t92316 = two_13*2.0;
                double t92317 = t92316-2.0;
                double t92318 = 1.0/t92317;
                double t92319 = 1.0/c0f;
                double t92320 = b1f*t92287;
                double t92321 = b3f*t92288;
                double t92322 = b4f*t92290*t92289;
                double t92323 = b2f*c*t92285;
                double t92324 = t92320+t92321+t92322+t92323;
                double t92325 = 1.0/t92324;
                double t92326 = t92325*t92319*(1.0/2.0);
                double t92327 = t92326+1.0;
                double t92328 = log(t92327);
                double t92329 = a1f*c*t92285;
                double t92330 = t92329+1.0;
                double t92331 = c0f*t92330*t92328*2.0;
                double t92332 = c0p*t92300*t92302*2.0;
                double t92333 = rho_a[index]*2.0;
                double t92334 = 1.0/pow(t92333,1.0/3.0);
                double t92335 = c*t92334;
                double t92336 = gcab*gcab;
                double t92337 = gamma_aa[index]*gcab*t92206;
                double t92338 = t92337+1.0;
                double t92339 = gamma_aa[index]*gcab*t92206*3.0;
                double t92340 = gamma_aa[index]*gcab*t92210*t92209*t92336;
                double t92341 = t92208*t92209*t92336*3.0;
                double t92342 = t92340+t92341+t92339+1.0;
                double t92343 = gamma_aa[index]*gcab*t92206*2.0;
                double t92344 = t92208*t92209*t92336;
                double t92345 = t92343+t92344+1.0;
                double t92346 = 1.0/(t92342*t92342);
                double t92347 = 1.0/(t92345*t92345);
                double t92348 = gamma_aa[index]*gcab*t92251*(8.0/3.0);
                double t92349 = t92209*t92336*t92248*(8.0/3.0);
                double t92350 = t92348+t92349;
                double t92351 = gcab*t92206;
                double t92352 = gamma_aa[index]*t92208*t92336;
                double t92353 = t92351+t92352;
                double t92354 = gcab*t92206*(3.0/2.0);
                double t92355 = gamma_aa[index]*t92208*t92336*3.0;
                double t92356 = gcab*t92210*t92209*t92336*(3.0/2.0);
                double t92357 = t92354+t92355+t92356;
                double t92358 = gamma_aa[index]*gcab*t92251*4.0;
                double t92359 = gamma_aa[index]*gcab*t92250*t92209*t92336*4.0;
                double t92360 = t92209*t92336*t92248*8.0;
                double t92361 = t92360+t92358+t92359;
                double t92362 = sqrt(t92335);
                double t92363 = b1p*t92362;
                double t92364 = pow(t92335,3.0/2.0);
                double t92365 = b3p*t92364;
                double t92366 = b2p*c*t92334;
                double t92367 = 1.0/pow(t92333,2.0/3.0);
                double t92368 = b4p*t92367*t92289;
                double t92369 = t92363+t92365+t92366+t92368;
                double t92370 = 1.0/t92369;
                double t92371 = t92370*t92291*(1.0/2.0);
                double t92372 = t92371+1.0;
                double t92373 = a1p*c*t92334;
                double t92374 = t92373+1.0;
                double t92375 = 1.0/pow(t92333,4.0/3.0);
                double t92376 = log(t92372);
                double t92377 = 1.0/pow(rho_a[index],4.0/3.0);
                double t92378 = 1.0/pow(rho_a[index],5.0/3.0);
                double t92379 = 1.0/sqrt(t92286);
                double t92380 = 1.0/t92299;
                double t92381 = 1.0/(t92296*t92296);
                double t92382 = b4p*t92378*t92289*(2.0/3.0);
                double t92383 = b2p*c*t92377*(1.0/3.0);
                double t92384 = b1p*c*t92377*t92379*(1.0/6.0);
                double t92385 = b3p*c*t92287*t92377*(1.0/2.0);
                double t92386 = t92382+t92383+t92384+t92385;
                double t92387 = t92302*t92380*t92381*t92386;
                double t92388 = t92331-t92332;
                double t92389 = t92315*t92318*t92388;
                double t92390 = 1.0/t92338;
                double t92391 = 1.0/t92345;
                double t92392 = 1.0/t92342;
                double t92393 = 1.0/(t92338*t92338);
                double t92394 = t92332+t92389;
                double t92395 = rho_a[index]*t92394*2.0;
                double t92396 = t92395-c0p*rho_a[index]*t92374*t92376*4.0;
                double t92397 = 1.0/(t92338*t92338*t92338);
                double t92398 = ccab3*gcab*t92210*t92361*t92209*t92336*t92346*(3.0/2.0);
                double t92399 = ccab2*gamma_aa[index]*t92350*t92208*t92336*t92347;
                double t92400 = ccab3*gamma_aa[index]*gcab*t92250*t92209*t92336*t92346*t92357*4.0;
                double t92401 = gamma_aa[index]*t92336*t92248*4.0;
                double t92402 = ccab2*t92209*t92353*t92336*t92248*t92347*(8.0/3.0);
                double t92403 = 1.0/(t92345*t92345*t92345);
                double t92404 = 1.0/(t92342*t92342*t92342);
                double t92405 = 1.0/t92305;
                double t92406 = 1.0/t92312;
                double t92407 = 1.0/t92309;
                double t92408 = 1.0/(t92305*t92305);
                double t92409 = 1.0/(t92309*t92309);
                double t92410 = 1.0/(t92312*t92312);
                double t92411 = gcaa*t92206*3.0;
                double t92412 = gamma_aa[index]*t92303*t92208*6.0;
                double t92413 = gcaa*t92210*t92303*t92209*3.0;
                double t92414 = t92411+t92412+t92413;
                double t92415 = gcaa*t92206*2.0;
                double t92416 = gamma_aa[index]*t92303*t92208*2.0;
                double t92417 = t92415+t92416;
                double t92418 = gamma_aa[index]*gcaa*t92251*(1.6E1/3.0);
                double t92419 = t92303*t92209*t92248*(1.6E1/3.0);
                double t92420 = t92418+t92419;
                double t92421 = gamma_aa[index]*gcaa*t92251*8.0;
                double t92422 = gamma_aa[index]*gcaa*t92303*t92250*t92209*8.0;
                double t92423 = t92303*t92209*t92248*1.6E1;
                double t92424 = t92421+t92422+t92423;
                double t92425 = 1.0/t92327;
                double t92426 = 1.0/(t92324*t92324);
                double t92427 = b4f*t92378*t92289*(2.0/3.0);
                double t92428 = b2f*c*t92377*(1.0/3.0);
                double t92429 = b1f*c*t92377*t92379*(1.0/6.0);
                double t92430 = b3f*c*t92287*t92377*(1.0/2.0);
                double t92431 = t92430+t92427+t92428+t92429;
                double t92432 = a1f*c*c0f*t92328*t92377*(2.0/3.0);
                double t92433 = a1p*c*c0p*t92300*t92377*(2.0/3.0);
                double t92434 = ccaa1*gcaa*t92206*t92405;
                double t92435 = ccaa2*gamma_aa[index]*t92303*t92208*t92406*2.0;
                double t92436 = ccaa3*gcaa*t92210*t92303*t92209*t92407*3.0;
                double t92437 = t92434+t92435+t92436-ccaa1*gamma_aa[index]*t92303*t92208*t92408-ccaa2*t92410*t92303* \
                   t92208*t92209*t92417-ccaa3*gamma_aa[index]*gcaa*t92210*t92303*t92414*t92209*t92409;
                v_rho_a_gamma_aa_[index] = -(X-1.0)*(c0*pow(rho_a[index],1.0/3.0)*(t92280*t92284+cx1*gx*t92206*t92245- \
                   cx1*gamma_aa[index]*t92207*t92208*t92249+cx2*gamma_aa[index]*t92207*t92208*t92246*2.0-cx2*t92260*t92207* \
                   t92208*t92253*t92209+cx3*gx*t92210*t92207*t92209*t92247*3.0-cx3*gamma_aa[index]*gx*t92210*t92207*t92252* \
                   t92209*t92257)*(4.0/3.0)+c0*pow(rho_a[index],4.0/3.0)*(t92284*(t92232*t92242-t92232*1.0/(t92237*t92237) \
                   *t92239-t92240*t92232*t92243*6.0+t92232*t92241*t92244*5.0+t92240*t92232*1.0/(t92237*t92237*t92237* \
                   t92237)*t92239*6.0-t92232*t92241*1.0/(t92237*t92237*t92237*t92237*t92237*t92237)*t92239*5.0)+t92280* \
                   (cxnl1*gx*t92251*t92245*(-8.0/3.0)-cxnl2*gamma_aa[index]*t92207*t92246*t92248*(3.2E1/3.0)+cxnl1*gamma_aa[index]* \
                   t92207*t92248*t92249*8.0+cxnl2*t92260*t92207*t92253*t92209*t92248*(1.6E1/3.0)+cxnl2*t92207*t92208* \
                   t92253*t92209*t92275+cxnl2*gamma_aa[index]*t92207*t92208*t92253*t92263*2.0-cxnl3*gx*t92250*t92207* \
                   t92209*t92247*2.4E1-cxnl1*gx*t92250*t92207*t92209*t92268*(1.6E1/3.0)+cxnl3*gx*t92210*t92207*t92252* \
                   t92209*t92267*3.0-cxnl2*t92260*t92207*t92208*t92209*t92263*t92276*2.0+cxnl3*gamma_aa[index]*gx*t92210* \
                   t92207*t92252*t92209*t92272+cxnl3*gamma_aa[index]*gx*t92250*t92207*t92252*t92209*t92257*8.0-cxnl3* \
                   gamma_aa[index]*gx*t92210*t92207*t92209*t92257*t92267*t92277*2.0)-cx1*gx*t92251*t92245*(8.0/3.0)+cx1* \
                   gamma_aa[index]*t92207*t92248*t92249*8.0-cx2*gamma_aa[index]*t92207*t92246*t92248*(3.2E1/3.0)+cx2* \
                   t92260*t92207*t92253*t92209*t92248*(1.6E1/3.0)+cx2*t92207*t92208*t92253*t92209*t92275+cx2*gamma_aa[index]* \
                   t92207*t92208*t92253*t92263*2.0-cx1*gx*t92250*t92207*t92209*t92268*(1.6E1/3.0)-cx3*gx*t92250*t92207* \
                   t92209*t92247*2.4E1+cx3*gx*t92210*t92207*t92252*t92209*t92267*3.0-cx2*t92260*t92207*t92208*t92209* \
                   t92263*t92276*2.0+cx3*gamma_aa[index]*gx*t92210*t92207*t92252*t92209*t92272+cx3*gamma_aa[index]*gx* \
                   t92250*t92207*t92252*t92209*t92257*8.0-cx3*gamma_aa[index]*gx*t92210*t92207*t92209*t92257*t92267*t92277* \
                   2.0))+t92396*(t92400+t92402+t92398+t92399-ccab1*gcab*t92251*t92390*(4.0/3.0)-ccab2*gamma_aa[index]* \
                   t92336*t92391*t92248*4.0+ccab1*gamma_aa[index]*t92336*t92248*t92393*(8.0/3.0)+ccab2*t92208*t92209* \
                   t92336*t92347*(t92401+gcab*t92251*(8.0/3.0))-ccab3*gcab*t92250*t92209*t92336*t92392*8.0-ccab1*gcab* \
                   t92250*t92209*t92336*t92397*(4.0/3.0)-ccab2*t92403*t92350*t92208*t92209*t92353*t92336*2.0+ccab3*gamma_aa[index]* \
                   gcab*t92210*t92209*t92336*t92346*(gcab*t92251*4.0+gamma_aa[index]*t92336*t92248*1.2E1+gcab*t92250* \
                   t92209*t92336*8.0)-ccab3*gamma_aa[index]*gcab*t92210*t92404*t92361*t92209*t92336*t92357*2.0)-t92437* \
                   (t92332+t92315*t92318*(t92331-c0p*t92300*t92302*2.0))-(-t92332-t92389+rho_a[index]*((t92374*1.0/(t92369* \
                   t92369)*(b4p*1.0/pow(t92333,5.0/3.0)*t92289*(2.0/3.0)+b2p*c*t92375*(1.0/3.0)+b3p*c*t92362*t92375*(1.0/ \
                   2.0)+b1p*c*1.0/sqrt(t92335)*t92375*(1.0/6.0)))/t92372-a1p*c*c0p*t92375*t92376*(2.0/3.0))*2.0+rho_a[index]* \
                   (t92433-t92387+t92315*t92318*(t92432+t92387-t92330*t92431*t92425*t92426-a1p*c*c0p*t92300*t92377*(2.0/ \
                   3.0)))+c0p*t92374*t92376*2.0)*(ccab1*gcab*t92206*t92390*(1.0/2.0)+ccab2*gamma_aa[index]*t92208*t92336* \
                   t92391-ccab1*gamma_aa[index]*t92208*t92336*t92393*(1.0/2.0)-ccab2*t92208*t92209*t92353*t92336*t92347+ \
                   ccab3*gcab*t92210*t92209*t92336*t92392*(3.0/2.0)-ccab3*gamma_aa[index]*gcab*t92210*t92209*t92336*t92346* \
                   t92357)*2.0+t92396*(t92400+t92402+t92398+t92399-ccab2*gamma_aa[index]*t92336*t92391*t92248*(4.0/3.0) \
                   +ccab1*gamma_aa[index]*t92336*t92248*t92393*(4.0/3.0)+ccab2*gamma_aa[index]*1.0/pow(rho_a[index],3.5E1/ \
                   3.0)*t92209*(t92336*t92336)*t92347*(4.0/3.0)-ccab3*gcab*t92250*t92209*t92336*t92392*4.0-ccab1*gcab* \
                   t92250*t92209*t92336*t92397*(4.0/3.0)-ccab2*t92403*t92350*t92208*t92209*t92353*t92336*2.0+ccab3*gamma_aa[index]* \
                   gcab*t92210*t92209*t92336*t92346*(t92401+gcab*t92250*t92209*t92336*4.0)-ccab3*gamma_aa[index]*gcab* \
                   t92210*t92404*t92361*t92209*t92336*t92357*2.0)+rho_a[index]*t92437*(t92433-t92387+t92315*t92318*(t92432- \
                   t92433+t92387-t92330*t92431*t92425*t92426))-rho_a[index]*t92394*(ccaa1*gcaa*t92251*t92405*(-8.0/3.0) \
                   -ccaa2*gamma_aa[index]*t92303*t92406*t92248*(3.2E1/3.0)+ccaa1*gamma_aa[index]*t92303*t92408*t92248* \
                   8.0+ccaa2*t92410*t92303*t92209*t92417*t92248*(1.6E1/3.0)-ccaa1*gcaa*t92303*t92250*1.0/(t92305*t92305* \
                   t92305)*t92209*(1.6E1/3.0)+ccaa2*t92410*t92303*t92208*t92209*(gcaa*t92251*(1.6E1/3.0)+gamma_aa[index]* \
                   t92303*t92248*(3.2E1/3.0))+ccaa2*gamma_aa[index]*t92410*t92303*t92420*t92208*2.0-ccaa3*gcaa*t92303* \
                   t92250*t92209*t92407*2.4E1+ccaa3*gcaa*t92210*t92303*t92424*t92209*t92409*3.0-ccaa2*t92303*1.0/(t92312* \
                   t92312*t92312)*t92420*t92208*t92209*t92417*2.0+ccaa3*gamma_aa[index]*gcaa*t92210*t92303*t92209*t92409* \
                   (gcaa*t92251*8.0+gamma_aa[index]*t92303*t92248*3.2E1+gcaa*t92303*t92250*t92209*2.4E1)+ccaa3*gamma_aa[index]* \
                   gcaa*t92303*t92250*t92414*t92209*t92409*8.0-ccaa3*gamma_aa[index]*gcaa*t92210*t92303*t92414*t92424* \
                   t92209*1.0/(t92309*t92309*t92309)*2.0);
            } else {
                v_rho_a_gamma_aa_[index] = 0.0;
            }

            //V_gamma_aa_gamma_aa
            if (rho_a[index] > cutoff_) {
                double t92439 = 1.0/pow(rho_a[index],1.0/3.0);
                double t92440 = c*t92439;
                double t92441 = sqrt(t92440);
                double t92442 = pow(t92440,3.0/2.0);
                double t92443 = c*c;
                double t92444 = 1.0/pow(rho_a[index],2.0/3.0);
                double t92445 = 1.0/c0p;
                double t92446 = b1p*t92441;
                double t92447 = b3p*t92442;
                double t92448 = b4p*t92443*t92444;
                double t92449 = b2p*c*t92439;
                double t92450 = t92446+t92447+t92448+t92449;
                double t92451 = 1.0/t92450;
                double t92452 = t92451*t92445*(1.0/2.0);
                double t92453 = t92452+1.0;
                double t92454 = log(t92453);
                double t92455 = a1p*c*t92439;
                double t92456 = t92455+1.0;
                double t92457 = rho_a[index]*2.0;
                double t92458 = 1.0/pow(t92457,1.0/3.0);
                double t92459 = c*t92458;
                double t92460 = gcab*gcab;
                double t92461 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t92462 = 1.0/pow(rho_a[index],8.0/3.0);
                double t92463 = gamma_aa[index]*gcab*t92462;
                double t92464 = t92463+1.0;
                double t92465 = gamma_aa[index]*gamma_aa[index];
                double t92466 = gamma_aa[index]*gcab*t92462*2.0;
                double t92467 = t92460*t92461*t92465;
                double t92468 = t92466+t92467+1.0;
                double t92469 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t92470 = gamma_aa[index]*gcab*t92462*3.0;
                double t92471 = gamma_aa[index]*gcab*t92460*t92465*t92469;
                double t92472 = t92460*t92461*t92465*3.0;
                double t92473 = t92470+t92471+t92472+1.0;
                double t92476 = gcab*t92462;
                double t92477 = gamma_aa[index]*t92460*t92461;
                double t92474 = t92476+t92477;
                double t92475 = 1.0/(t92473*t92473);
                double t92478 = 1.0/(t92468*t92468);
                double t92479 = gcab*t92462*(3.0/2.0);
                double t92480 = gamma_aa[index]*t92460*t92461*3.0;
                double t92481 = gcab*t92460*t92465*t92469*(3.0/2.0);
                double t92482 = t92480+t92481+t92479;
                double t92483 = pow(2.0,1.0/3.0);
                double t92484 = t92483*2.0;
                double t92485 = t92484-2.0;
                double t92486 = two_13*2.0;
                double t92487 = t92486-2.0;
                double t92488 = 1.0/t92487;
                double t92489 = 1.0/c0f;
                double t92490 = b1f*t92441;
                double t92491 = b3f*t92442;
                double t92492 = b4f*t92443*t92444;
                double t92493 = b2f*c*t92439;
                double t92494 = t92490+t92491+t92492+t92493;
                double t92495 = 1.0/t92494;
                double t92496 = t92495*t92489*(1.0/2.0);
                double t92497 = t92496+1.0;
                double t92498 = log(t92497);
                double t92499 = a1f*c*t92439;
                double t92500 = t92499+1.0;
                double t92501 = c0f*t92500*t92498*2.0;
                double t92502 = c0p*t92454*t92456*2.0;
                double t92503 = gcaa*gcaa;
                double t92504 = gamma_aa[index]*gcaa*t92462;
                double t92505 = t92504+1.0;
                double t92506 = 1.0/pow(rho_a[index],3.2E1/3.0);
                double t92507 = gamma_aa[index]*gcaa*t92462*2.0;
                double t92508 = t92503*t92461*t92465;
                double t92509 = t92507+t92508+1.0;
                double t92510 = gamma_aa[index]*gcaa*t92462*3.0;
                double t92511 = gamma_aa[index]*gcaa*t92503*t92465*t92469;
                double t92512 = t92503*t92461*t92465*3.0;
                double t92513 = t92510+t92511+t92512+1.0;
                double t92516 = gcaa*t92462*2.0;
                double t92517 = gamma_aa[index]*t92503*t92461*2.0;
                double t92514 = t92516+t92517;
                double t92515 = 1.0/(t92513*t92513);
                double t92518 = 1.0/(t92509*t92509);
                double t92519 = gcaa*t92462*3.0;
                double t92520 = gamma_aa[index]*t92503*t92461*6.0;
                double t92521 = gcaa*t92503*t92465*t92469*3.0;
                double t92522 = t92520+t92521+t92519;
                double t92523 = pow(rho_a[index],5.0/3.0);
                double t92524 = C_k*t92523;
                double t92525 = tau_a[index]*1.0E20;
                double t92526 = 1.0/tau_a[index];
                double t92527 = -t92524+t92525;
                double t92528 = ( (t92527 > 0.0) ?  1.0 : 0.0 ) ;
                double t92529 = C_k*t92523*t92526*t92528;
                double t92530 = t92524-t92525;
                double t92531 = ( (t92530 > 0.0) ?  1.0 : 0.0 ) ;
                double t92532 = t92531*1.0E20;
                double t92533 = t92532+t92529-1.0;
                double t92534 = t92533*t92533;
                double t92535 = t92532+t92529+1.0;
                double t92536 = t92534*t92534;
                double t92537 = gx*gx;
                double t92538 = gamma_aa[index]*gx*t92462;
                double t92539 = t92538+1.0;
                double t92540 = gamma_aa[index]*gx*t92462*2.0;
                double t92541 = t92461*t92465*t92537;
                double t92542 = t92540+t92541+1.0;
                double t92543 = gamma_aa[index]*gx*t92462*3.0;
                double t92544 = gamma_aa[index]*gx*t92465*t92537*t92469;
                double t92545 = t92461*t92465*t92537*3.0;
                double t92546 = t92543+t92544+t92545+1.0;
                double t92549 = gx*t92462*2.0;
                double t92550 = gamma_aa[index]*t92461*t92537*2.0;
                double t92547 = t92550+t92549;
                double t92548 = 1.0/(t92546*t92546);
                double t92551 = 1.0/(t92542*t92542);
                double t92552 = gx*t92462*3.0;
                double t92553 = gamma_aa[index]*t92461*t92537*6.0;
                double t92554 = gx*t92465*t92537*t92469*3.0;
                double t92555 = t92552+t92553+t92554;
                double t92556 = 1.0/(t92539*t92539);
                double t92557 = 1.0/t92542;
                double t92558 = 1.0/t92546;
                double t92559 = 1.0/(t92539*t92539*t92539);
                double t92560 = t92537*t92537;
                double t92561 = t92461*t92537*6.0;
                double t92562 = gamma_aa[index]*gx*t92537*t92469*6.0;
                double t92563 = t92561+t92562;
                double t92564 = t92547*t92547;
                double t92565 = 1.0/(t92542*t92542*t92542);
                double t92566 = t92555*t92555;
                double t92567 = 1.0/(t92546*t92546*t92546);
                v_gamma_aa_gamma_aa_[index] = (rho_a[index]*(t92502+t92485*t92488*(t92501-c0p*t92454*t92456*2.0)) \
                   *2.0-c0p*rho_a[index]*log((t92445*(1.0/2.0))/(b1p*sqrt(t92459)+b3p*pow(t92459,3.0/2.0)+b4p*t92443* \
                   1.0/pow(t92457,2.0/3.0)+b2p*c*t92458)+1.0)*(a1p*c*t92458+1.0)*4.0)*(ccab1*t92460*t92461*1.0/(t92464* \
                   t92464)*(1.0/2.0)-(ccab2*t92460*t92461*(1.0/2.0))/t92468+ccab2*(t92460*t92460)*t92506*t92465*t92478* \
                   (1.0/2.0)-ccab1*gamma_aa[index]*gcab*t92460*1.0/(t92464*t92464*t92464)*t92469*(1.0/2.0)-(ccab3*gamma_aa[index]* \
                   gcab*t92460*t92469*(3.0/2.0))/t92473-ccab2*t92460*t92461*t92465*(t92474*t92474)*1.0/(t92468*t92468* \
                   t92468)*2.0+ccab2*gamma_aa[index]*t92460*t92461*t92474*t92478*2.0+ccab3*gcab*t92460*t92482*t92465* \
                   t92475*t92469*3.0+ccab3*gamma_aa[index]*gcab*t92460*t92465*t92475*t92469*(t92460*t92461*(3.0/2.0)+ \
                   gamma_aa[index]*gcab*t92460*t92469*(3.0/2.0))-ccab3*gamma_aa[index]*gcab*t92460*1.0/(t92473*t92473* \
                   t92473)*(t92482*t92482)*t92465*t92469*2.0)*-4.0+rho_a[index]*(t92502+t92485*t92488*(t92501-t92502) \
                   )*(ccaa1*t92503*1.0/(t92505*t92505)*t92461*2.0-(ccaa2*t92503*t92461*2.0)/t92509+ccaa2*(t92503*t92503) \
                   *t92506*t92518*t92465*2.0-(ccaa3*gamma_aa[index]*gcaa*t92503*t92469*6.0)/t92513-ccaa1*gamma_aa[index]* \
                   gcaa*t92503*1.0/(t92505*t92505*t92505)*t92469*2.0-ccaa2*t92503*(t92514*t92514)*t92461*1.0/(t92509* \
                   t92509*t92509)*t92465*2.0+ccaa2*gamma_aa[index]*t92503*t92514*t92461*t92518*4.0+ccaa3*gcaa*t92503* \
                   t92522*t92515*t92465*t92469*6.0+ccaa3*gamma_aa[index]*gcaa*t92503*t92515*t92465*t92469*(t92503*t92461* \
                   6.0+gamma_aa[index]*gcaa*t92503*t92469*6.0)-ccaa3*gamma_aa[index]*gcaa*t92503*1.0/(t92513*t92513*t92513) \
                   *(t92522*t92522)*t92465*t92469*2.0)*2.0+c0*pow(rho_a[index],4.0/3.0)*(X-1.0)*((t92533/t92535-t92533* \
                   t92534*1.0/(t92535*t92535*t92535)*2.0+t92533*1.0/(t92535*t92535*t92535*t92535*t92535)*t92536)*(cxnl1* \
                   t92461*t92537*t92556*2.0-cxnl2*t92461*t92537*t92557*2.0+cxnl2*t92506*t92551*t92560*t92465*2.0-cxnl2* \
                   t92461*t92465*t92537*t92564*t92565*2.0-cxnl1*gamma_aa[index]*gx*t92537*t92469*t92559*2.0-cxnl3*gamma_aa[index]* \
                   gx*t92537*t92558*t92469*6.0+cxnl2*gamma_aa[index]*t92461*t92551*t92537*t92547*4.0+cxnl3*gx*t92465* \
                   t92537*t92555*t92548*t92469*6.0+cxnl3*gamma_aa[index]*gx*t92563*t92465*t92537*t92548*t92469-cxnl3* \
                   gamma_aa[index]*gx*t92465*t92537*t92566*t92567*t92469*2.0)+cx1*t92461*t92537*t92556*2.0-cx2*t92461* \
                   t92537*t92557*2.0+cx2*t92506*t92551*t92560*t92465*2.0-cx2*t92461*t92465*t92537*t92564*t92565*2.0-cx1* \
                   gamma_aa[index]*gx*t92537*t92469*t92559*2.0-cx3*gamma_aa[index]*gx*t92537*t92558*t92469*6.0+cx2*gamma_aa[index]* \
                   t92461*t92551*t92537*t92547*4.0+cx3*gx*t92465*t92537*t92555*t92548*t92469*6.0+cx3*gamma_aa[index]* \
                   gx*t92563*t92465*t92537*t92548*t92469-cx3*gamma_aa[index]*gx*t92465*t92537*t92566*t92567*t92469*2.0) \
                   *2.0;
            } else {
                v_gamma_aa_gamma_aa_[index] = 0.0;
            }

        }
        if (is_meta_) {

            //V_rho_a_tau_a
            if (rho_a[index] > cutoff_) {
                double t92569 = 1.0/pow(rho_a[index],8.0/3.0);
                double t92570 = gamma_aa[index]*gamma_aa[index];
                double t92571 = gx*gx;
                double t92572 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t92573 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t92574 = pow(rho_a[index],5.0/3.0);
                double t92575 = C_k*t92574;
                double t92576 = tau_a[index]*1.0E20;
                double t92577 = -t92575+t92576;
                double t92578 = 1.0/tau_a[index];
                double t92579 = 0.0 ;
                double t92580 = C_k*C_k;
                double t92581 = pow(rho_a[index],7.0/3.0);
                double t92582 = pow(rho_a[index],2.0/3.0);
                double t92583 = 0.0 ;
                double t92584 = 1.0/(tau_a[index]*tau_a[index]);
                double t92585 = ( (t92577 > 0.0) ?  1.0 : 0.0 ) ;
                double t92586 = C_k*t92574*t92585*t92578;
                double t92587 = t92575-t92576;
                double t92588 = ( (t92587 > 0.0) ?  1.0 : 0.0 ) ;
                double t92589 = t92588*1.0E20;
                double t92590 = t92586+t92589+1.0;
                double t92591 = 1.0/(t92590*t92590);
                double t92592 = C_k*t92582*t92579*(5.0E40/3.0);
                double t92593 = t92580*t92581*t92583*t92584*(5.0/3.0);
                double t92594 = C_k*t92582*t92583*t92578*(5.0E20/3.0);
                double t92597 = t92580*t92581*t92578*t92579*(5.0E20/3.0);
                double t92598 = C_k*t92582*t92584*t92585*(5.0/3.0);
                double t92595 = t92592+t92593+t92594-t92597-t92598;
                double t92596 = t92586+t92589-1.0;
                double t92599 = t92596*t92596;
                double t92600 = t92599*t92599;
                double t92601 = t92583*1.0E40;
                double t92602 = C_k*t92574*t92584*t92585;
                double t92608 = C_k*t92574*t92583*t92578*1.0E20;
                double t92603 = t92601+t92602-t92608;
                double t92604 = C_k*t92582*t92583*(5.0E20/3.0);
                double t92605 = C_k*t92582*t92585*t92578*(5.0/3.0);
                double t92609 = t92580*t92581*t92583*t92578*(5.0/3.0);
                double t92606 = t92604+t92605-t92609;
                double t92607 = 1.0/(t92590*t92590*t92590);
                double t92610 = 1.0/(t92590*t92590*t92590*t92590);
                double t92611 = 1.0/(t92590*t92590*t92590*t92590*t92590);
                double t92612 = 1.0/(t92590*t92590*t92590*t92590*t92590*t92590);
                double t92613 = gamma_aa[index]*gx*t92569;
                double t92614 = t92613+1.0;
                double t92615 = 1.0/t92614;
                double t92616 = gamma_aa[index]*gx*t92569*3.0;
                double t92617 = gamma_aa[index]*gx*t92570*t92571*t92572;
                double t92618 = t92570*t92571*t92573*3.0;
                double t92619 = t92616+t92617+t92618+1.0;
                double t92620 = 1.0/t92619;
                double t92621 = gamma_aa[index]*gx*t92569*2.0;
                double t92622 = t92570*t92571*t92573;
                double t92623 = t92621+t92622+1.0;
                double t92624 = 1.0/t92623;
                double t92625 = 1.0/pow(rho_a[index],1.9E1/3.0);
                double t92626 = 1.0/pow(rho_a[index],1.1E1/3.0);
                double t92627 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]*rho_a[index]);
                double t92628 = cxnl1*gamma_aa[index]*gx*t92615*t92569;
                double t92629 = cxnl3*gamma_aa[index]*gx*t92620*t92570*t92571*t92572;
                double t92630 = cxnl2*t92570*t92624*t92571*t92573;
                double t92631 = cxnl0+t92630+t92628+t92629;
                double t92632 = 1.0/t92590;
                double t92633 = t92603*t92632;
                double t92634 = t92610*t92603*t92596*t92599*6.0;
                double t92635 = t92600*t92611*t92603*5.0;
                double t92636 = t92633+t92634+t92635-t92603*t92591*t92596-t92603*t92607*t92599*6.0-t92600*t92603* \
                   t92612*t92596*5.0;
                v_rho_a_tau_a_[index] = -(c0*pow(rho_a[index],4.0/3.0)*(t92631*(t92632*t92595+t92600*t92611*t92595* \
                   5.0+t92603*t92606*t92591*2.0-t92591*t92595*t92596-t92607*t92595*t92599*6.0+t92600*t92603*t92612*t92606* \
                   5.0E1-t92610*t92603*t92606*t92599*3.6E1-t92600*t92612*t92595*t92596*5.0+t92603*t92606*t92607*t92596* \
                   1.0E1+t92610*t92595*t92596*t92599*6.0-t92600*t92603*t92606*1.0/(t92590*t92590*t92590*t92590*t92590* \
                   t92590*t92590)*t92596*3.0E1+t92611*t92603*t92606*t92596*t92599*4.0)+t92636*(cxnl1*gamma_aa[index]* \
                   gx*t92615*t92626*(8.0/3.0)+cxnl2*t92570*t92624*t92571*t92625*(1.6E1/3.0)-cxnl1*1.0/(t92614*t92614) \
                   *t92570*t92571*t92625*(8.0/3.0)-cxnl2*1.0/(t92623*t92623)*t92570*t92571*t92573*(gamma_aa[index]*gx* \
                   t92626*(1.6E1/3.0)+t92570*t92571*t92625*(1.6E1/3.0))+cxnl3*gamma_aa[index]*gx*t92620*t92570*t92571* \
                   t92627*8.0-cxnl3*gamma_aa[index]*gx*t92570*t92571*t92572*1.0/(t92619*t92619)*(gamma_aa[index]*gx*t92626* \
                   8.0+t92570*t92571*t92625*1.6E1+gamma_aa[index]*gx*t92570*t92571*t92627*8.0)))-c0*pow(rho_a[index],1.0/ \
                   3.0)*t92631*t92636*(4.0/3.0))*(X-1.0);
            } else {
                v_rho_a_tau_a_[index] = 0.0;
            }

            //V_tau_a_tau_a
            if (rho_a[index] > cutoff_) {
                double t92638 = 1.0/pow(rho_a[index],8.0/3.0);
                double t92639 = gamma_aa[index]*gamma_aa[index];
                double t92640 = gx*gx;
                double t92641 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t92642 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t92643 = tau_a[index]*1.0E20;
                double t92644 = pow(rho_a[index],5.0/3.0);
                double t92645 = C_k*t92644;
                double t92646 = t92643-t92645;
                double t92647 = 0.0 ;
                double t92648 = -t92643+t92645;
                double t92649 = ( (t92648 > 0.0) ?  1.0 : 0.0 ) ;
                double t92650 = t92649*1.0E20;
                double t92651 = 1.0/tau_a[index];
                double t92652 = ( (t92646 > 0.0) ?  1.0 : 0.0 ) ;
                double t92653 = C_k*t92651*t92652*t92644;
                double t92654 = t92650+t92653+1.0;
                double t92655 = t92647*t92647;
                double t92656 = t92650+t92653-1.0;
                double t92657 = 1.0/(t92654*t92654*t92654);
                double t92658 = 0.0 ;
                double t92659 = t92656*t92656;
                double t92660 = t92659*t92659;
                double t92661 = 1.0/(t92654*t92654*t92654*t92654);
                double t92662 = 1.0/(t92654*t92654*t92654*t92654*t92654);
                double t92663 = 1.0/(t92654*t92654*t92654*t92654*t92654*t92654);
                double t92664 = 1.0/(t92654*t92654);
                double t92665 = pow(rho_a[index],4.0/3.0);
                double t92666 = gamma_aa[index]*gx*t92638;
                double t92667 = t92666+1.0;
                double t92668 = 1.0/t92667;
                double t92669 = cxnl1*gamma_aa[index]*gx*t92638*t92668;
                double t92670 = gamma_aa[index]*gx*t92638*3.0;
                double t92671 = gamma_aa[index]*gx*t92640*t92641*t92639;
                double t92672 = t92640*t92642*t92639*3.0;
                double t92673 = t92670+t92671+t92672+1.0;
                double t92674 = 1.0/t92673;
                double t92675 = cxnl3*gamma_aa[index]*gx*t92640*t92641*t92674*t92639;
                double t92676 = gamma_aa[index]*gx*t92638*2.0;
                double t92677 = t92640*t92642*t92639;
                double t92678 = t92676+t92677+1.0;
                double t92679 = 1.0/t92678;
                double t92680 = cxnl2*t92640*t92642*t92639*t92679;
                double t92681 = cxnl0+t92680+t92675+t92669;
                double t92682 = 1.0/t92654;
                double t92683 = 1.0/(tau_a[index]*tau_a[index]);
                double t92685 = t92647*1.0E40;
                double t92686 = C_k*t92651*t92644*t92647*1.0E20;
                double t92687 = C_k*t92652*t92644*t92683;
                double t92684 = t92685-t92686+t92687;
                double t92688 = t92684*t92684;
                double t92689 = 1.0/(t92654*t92654*t92654*t92654*t92654*t92654*t92654);
                double t92690 = t92658*1.0E60;
                double t92691 = C_k*t92644*t92647*t92683*2.0E20;
                double t92692 = 1.0/(tau_a[index]*tau_a[index]*tau_a[index]);
                double t92694 = C_k*t92651*t92644*t92658*1.0E40;
                double t92695 = C_k*t92652*t92644*t92692*2.0;
                double t92693 = t92690+t92691-t92694-t92695;
                double t92696 = X-1.0;
                double t92697 = t92686-t92687;
                v_tau_a_tau_a_[index] = t92696*(c0*t92681*t92665*( 0.0 +t92655*t92664*2.0E80+t92660*t92663*t92655* \
                   5.0E81+t92660*t92662*t92658*5.0E60-t92661*t92655*t92659*3.6E81+t92655*t92656*t92657*1.0E81-t92664* \
                   t92656*t92658*1.0E60-t92657*t92658*t92659*6.0E60-t92660*t92663*t92656*t92658*5.0E60+t92662*t92655* \
                   t92656*t92659*4.0E80-t92660*t92655*t92656*t92689*3.0E81+t92661*t92656*t92658*t92659*6.0E60)+c0*t92681* \
                   t92665*(t92682*t92693+t92664*t92688*2.0+t92660*t92662*t92693*5.0+t92660*t92663*t92688*5.0E1-t92664* \
                   t92656*t92693-t92661*t92659*t92688*3.6E1-t92657*t92693*t92659*6.0+t92656*t92657*t92688*1.0E1-t92660* \
                   t92663*t92656*t92693*5.0+t92661*t92656*t92693*t92659*6.0+t92662*t92656*t92659*t92688*4.0-t92660*t92656* \
                   t92688*t92689*3.0E1))-c0*t92681*t92665*t92696*(t92664*t92647*t92697*2.0E40+t92660*t92663*t92647*t92697* \
                   5.0E41-t92661*t92647*t92659*t92697*3.6E41+t92647*t92656*t92657*t92697*1.0E41+t92662*t92647*t92656* \
                   t92659*t92697*4.0E40-t92660*t92647*t92656*t92697*t92689*3.0E41);
            } else {
                v_tau_a_tau_a_[index] = 0.0;
            }

            if (is_gga_) {

                //V_gamma_aa_tau_a
                if (rho_a[index] > cutoff_) {
                    double t92699 = tau_a[index]*1.0E20;
                    double t92700 = pow(rho_a[index],5.0/3.0);
                    double t92701 = C_k*t92700;
                    double t92702 = -t92701+t92699;
                    double t92703 = t92701-t92699;
                    double t92704 = ( (t92703 > 0.0) ?  1.0 : 0.0 ) ;
                    double t92705 = t92704*1.0E20;
                    double t92706 = 1.0/tau_a[index];
                    double t92707 = ( (t92702 > 0.0) ?  1.0 : 0.0 ) ;
                    double t92708 = C_k*t92700*t92706*t92707;
                    double t92709 = t92705+t92708-1.0;
                    double t92710 = t92705+t92708+1.0;
                    double t92711 = 0.0 ;
                    double t92712 = t92709*t92709;
                    double t92713 = t92712*t92712;
                    double t92714 = 1.0/pow(rho_a[index],8.0/3.0);
                    double t92715 = gx*gx;
                    double t92716 = 1.0/pow(rho_a[index],1.6E1/3.0);
                    double t92717 = gamma_aa[index]*gamma_aa[index];
                    double t92718 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                       rho_a[index]*rho_a[index]);
                    double t92719 = gamma_aa[index]*gx*t92714;
                    double t92720 = t92719+1.0;
                    double t92721 = gamma_aa[index]*gx*t92714*3.0;
                    double t92722 = gamma_aa[index]*gx*t92715*t92717*t92718;
                    double t92723 = t92715*t92716*t92717*3.0;
                    double t92724 = t92721+t92722+t92723+1.0;
                    double t92725 = gamma_aa[index]*gx*t92714*2.0;
                    double t92726 = t92715*t92716*t92717;
                    double t92727 = t92725+t92726+1.0;
                    double t92728 = pow(rho_a[index],4.0/3.0);
                    double t92729 = X-1.0;
                    double t92730 = 1.0/t92720;
                    double t92731 = cxnl1*gx*t92730*t92714;
                    double t92732 = 1.0/t92727;
                    double t92733 = cxnl2*gamma_aa[index]*t92732*t92715*t92716*2.0;
                    double t92734 = 1.0/t92724;
                    double t92735 = cxnl3*gx*t92715*t92734*t92717*t92718*3.0;
                    double t92736 = 1.0/(t92720*t92720);
                    double t92737 = gx*t92714*3.0;
                    double t92738 = gamma_aa[index]*t92715*t92716*6.0;
                    double t92739 = gx*t92715*t92717*t92718*3.0;
                    double t92740 = t92737+t92738+t92739;
                    double t92741 = 1.0/(t92724*t92724);
                    double t92742 = gx*t92714*2.0;
                    double t92743 = gamma_aa[index]*t92715*t92716*2.0;
                    double t92744 = t92742+t92743;
                    double t92745 = 1.0/(t92727*t92727);
                    double t92746 = t92731+t92733+t92735-cxnl1*gamma_aa[index]*t92715*t92716*t92736-cxnl2*t92715*t92716* \
                       t92717*t92744*t92745-cxnl3*gamma_aa[index]*gx*t92740*t92741*t92715*t92717*t92718;
                    double t92747 = 1.0/t92710;
                    double t92748 = t92711*1.0E40;
                    double t92749 = 1.0/(tau_a[index]*tau_a[index]);
                    double t92750 = C_k*t92700*t92707*t92749;
                    double t92753 = C_k*t92700*t92711*t92706*1.0E20;
                    double t92751 = t92750-t92753+t92748;
                    double t92752 = 1.0/(t92710*t92710);
                    double t92754 = 1.0/(t92710*t92710*t92710);
                    double t92755 = 1.0/(t92710*t92710*t92710*t92710);
                    double t92756 = 1.0/(t92710*t92710*t92710*t92710*t92710);
                    double t92757 = 1.0/(t92710*t92710*t92710*t92710*t92710*t92710);
                    v_gamma_aa_tau_a_[index] = c0*t92728*t92746*t92729*( 0.0 -t92711*t92712*t92754*6.0E40+t92711*t92713* \
                       t92756*5.0E40-t92711*t92752*t92709*1.0E40+t92711*t92712*t92709*t92755*6.0E40-t92711*t92713*t92709* \
                       t92757*5.0E40)+c0*t92728*t92746*t92729*(t92751*t92747-t92712*t92751*t92754*6.0+t92713*t92751*t92756* \
                       5.0-t92751*t92752*t92709+t92712*t92751*t92709*t92755*6.0-t92713*t92751*t92709*t92757*5.0);
                } else {
                    v_gamma_aa_tau_a_[index] = 0.0;
                }

            }
        }
    }
}
void TauHCTH_Functional::computeUKSFunctional(boost::shared_ptr<UKSFunctions> prop)
{
    int ntrue = prop->npoints();

    const double* restrict rho_a;
    const double* restrict rho_b;
    const double* restrict gamma_aa;
    const double* restrict gamma_ab;
    const double* restrict gamma_bb;
    const double* restrict tau_a;
    const double* restrict tau_b;

    rho_a = prop->property_value("RHO_A")->pointer();
    rho_b = prop->property_value("RHO_B")->pointer();
    if (is_gga_) {
        gamma_aa = prop->property_value("GAMMA_AA")->pointer();
        gamma_ab = prop->property_value("GAMMA_AB")->pointer();
        gamma_bb = prop->property_value("GAMMA_BB")->pointer();
    }
    if (is_meta_) {
        tau_a = prop->property_value("TAU_A")->pointer();
        tau_b = prop->property_value("TAU_B")->pointer();
    }

    double X = params_[0].second;
    double C_k = params_[1].second;
    double c0 = params_[2].second;
    double two_13 = params_[3].second;
    double d2fz0 = params_[4].second;
    double c = params_[5].second;
    double Aa = params_[6].second;
    double a1a = params_[7].second;
    double b1a = params_[8].second;
    double b2a = params_[9].second;
    double b3a = params_[10].second;
    double b4a = params_[11].second;
    double c0p = params_[12].second;
    double a1p = params_[13].second;
    double b1p = params_[14].second;
    double b2p = params_[15].second;
    double b3p = params_[16].second;
    double b4p = params_[17].second;
    double c0f = params_[18].second;
    double a1f = params_[19].second;
    double b1f = params_[20].second;
    double b2f = params_[21].second;
    double b3f = params_[22].second;
    double b4f = params_[23].second;
    double gcab = params_[24].second;
    double gcaa = params_[25].second;
    double gx = params_[26].second;
    double ccab0 = params_[27].second;
    double ccab1 = params_[28].second;
    double ccab2 = params_[29].second;
    double ccab3 = params_[30].second;
    double ccaa0 = params_[31].second;
    double ccaa1 = params_[32].second;
    double ccaa2 = params_[33].second;
    double ccaa3 = params_[34].second;
    double cx0 = params_[35].second;
    double cx1 = params_[36].second;
    double cx2 = params_[37].second;
    double cx3 = params_[38].second;
    double cxnl0 = params_[39].second;
    double cxnl1 = params_[40].second;
    double cxnl2 = params_[41].second;
    double cxnl3 = params_[42].second;

    //Functional
    for (int index = 0; index < ntrue; index++) {

        //Functional Value
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t85454 = pow(rho_a[index],5.0/3.0);
            double t85455 = C_k*t85454;
            double t85456 = tau_a[index]*1.0E20;
            double t85457 = 1.0/tau_a[index];
            double t85458 = -t85455+t85456;
            double t85459 = ( (t85458 > 0.0) ?  1.0 : 0.0 ) ;
            double t85460 = C_k*t85454*t85457*t85459;
            double t85461 = t85455-t85456;
            double t85462 = ( (t85461 > 0.0) ?  1.0 : 0.0 ) ;
            double t85463 = t85462*1.0E20;
            double t85464 = t85460+t85463-1.0;
            double t85465 = t85464*t85464;
            double t85466 = t85460+t85463+1.0;
            double t85467 = t85465*t85465;
            double t85468 = 1.0/pow(rho_a[index],8.0/3.0);
            double t85469 = gamma_aa[index]*gamma_aa[index];
            double t85470 = gx*gx;
            double t85471 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]);
            double t85472 = 1.0/pow(rho_a[index],1.6E1/3.0);
            double t85473 = gamma_aa[index]*gx*t85468;
            double t85474 = t85473+1.0;
            double t85475 = 1.0/t85474;
            double t85476 = gamma_aa[index]*gx*t85468*3.0;
            double t85477 = gamma_aa[index]*gx*t85470*t85471*t85469;
            double t85478 = t85470*t85472*t85469*3.0;
            double t85479 = t85476+t85477+t85478+1.0;
            double t85480 = 1.0/t85479;
            double t85481 = gamma_aa[index]*gx*t85468*2.0;
            double t85482 = t85470*t85472*t85469;
            double t85483 = t85481+t85482+1.0;
            double t85484 = 1.0/t85483;
            double t85485 = pow(rho_b[index],5.0/3.0);
            double t85486 = C_k*t85485;
            double t85487 = -t85456+t85486;
            double t85488 = ( (t85487 > 0.0) ?  1.0 : 0.0 ) ;
            double t85489 = t85488*1.0E20;
            double t85490 = 1.0/tau_b[index];
            double t85491 = tau_b[index]*1.0E20;
            double t85492 = t85491-t85486;
            double t85493 = ( (t85492 > 0.0) ?  1.0 : 0.0 ) ;
            double t85494 = C_k*t85490*t85493*t85485;
            double t85495 = t85494+t85489-1.0;
            double t85496 = t85495*t85495;
            double t85497 = t85494+t85489+1.0;
            double t85498 = t85496*t85496;
            double t85499 = 1.0/pow(rho_b[index],8.0/3.0);
            double t85500 = gamma_bb[index]*gamma_bb[index];
            double t85501 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
               rho_b[index]*rho_b[index]);
            double t85502 = 1.0/pow(rho_b[index],1.6E1/3.0);
            double t85503 = gamma_bb[index]*gx*t85499;
            double t85504 = t85503+1.0;
            double t85505 = 1.0/t85504;
            double t85506 = gamma_bb[index]*gx*t85499*3.0;
            double t85507 = gamma_bb[index]*gx*t85500*t85501*t85470;
            double t85508 = t85500*t85502*t85470*3.0;
            double t85509 = t85506+t85507+t85508+1.0;
            double t85510 = 1.0/t85509;
            double t85511 = gamma_bb[index]*gx*t85499*2.0;
            double t85512 = t85500*t85502*t85470;
            double t85513 = t85511+t85512+1.0;
            double t85514 = 1.0/t85513;
            double t85515 = 1.0/pow(rho_a[index],1.0/3.0);
            double t85516 = c*t85515;
            double t85517 = sqrt(t85516);
            double t85518 = pow(t85516,3.0/2.0);
            double t85519 = c*c;
            double t85520 = 1.0/pow(rho_a[index],2.0/3.0);
            double t85521 = 1.0/c0p;
            double t85522 = b1p*t85517;
            double t85523 = b3p*t85518;
            double t85524 = b4p*t85520*t85519;
            double t85525 = b2p*c*t85515;
            double t85526 = t85522+t85523+t85524+t85525;
            double t85527 = 1.0/t85526;
            double t85528 = t85521*t85527*(1.0/2.0);
            double t85529 = t85528+1.0;
            double t85530 = log(t85529);
            double t85531 = a1p*c*t85515;
            double t85532 = t85531+1.0;
            double t85533 = pow(2.0,1.0/3.0);
            double t85534 = t85533*2.0;
            double t85535 = t85534-2.0;
            double t85536 = two_13*2.0;
            double t85537 = t85536-2.0;
            double t85538 = 1.0/t85537;
            double t85539 = 1.0/c0f;
            double t85540 = 1.0/pow(rho_b[index],1.0/3.0);
            double t85541 = c*t85540;
            double t85542 = sqrt(t85541);
            double t85543 = pow(t85541,3.0/2.0);
            double t85544 = 1.0/pow(rho_b[index],2.0/3.0);
            double t85545 = b1p*t85542;
            double t85546 = b3p*t85543;
            double t85547 = b4p*t85544*t85519;
            double t85548 = b2p*c*t85540;
            double t85549 = t85545+t85546+t85547+t85548;
            double t85550 = 1.0/t85549;
            double t85551 = t85521*t85550*(1.0/2.0);
            double t85552 = t85551+1.0;
            double t85553 = log(t85552);
            double t85554 = a1p*c*t85540;
            double t85555 = t85554+1.0;
            double t85556 = c0p*t85553*t85555*2.0;
            double t85557 = rho_a[index]+rho_b[index];
            double t85558 = 1.0/pow(t85557,1.0/3.0);
            double t85559 = c*t85558;
            double t85560 = sqrt(t85559);
            double t85561 = pow(t85559,3.0/2.0);
            double t85562 = 1.0/pow(t85557,2.0/3.0);
            double t85563 = b1p*t85560;
            double t85564 = b3p*t85561;
            double t85565 = b4p*t85562*t85519;
            double t85566 = b2p*c*t85558;
            double t85567 = t85563+t85564+t85565+t85566;
            double t85568 = 1.0/t85567;
            double t85569 = t85521*t85568*(1.0/2.0);
            double t85570 = t85569+1.0;
            double t85571 = log(t85570);
            double t85572 = a1p*c*t85558;
            double t85573 = t85572+1.0;
            double t85574 = c0p*t85571*t85573*2.0;
            double t85575 = rho_a[index]-rho_b[index];
            double t85576 = t85575*t85575;
            double t85577 = 1.0/t85557;
            double t85578 = t85575*t85577;
            double t85579 = 1.0/(t85557*t85557*t85557*t85557);
            double t85580 = t85576*t85576;
            double t85581 = t85578+1.0;
            double t85582 = pow(t85581,4.0/3.0);
            double t85583 = -t85578+1.0;
            double t85584 = pow(t85583,4.0/3.0);
            double t85585 = t85582+t85584-2.0;
            double t85588 = gamma_aa[index]*t85468*(1.0/2.0);
            double t85589 = gamma_bb[index]*t85499*(1.0/2.0);
            double t85586 = t85588+t85589;
            double t85587 = gcab*gcab;
            double t85590 = t85586*t85586;
            double t85591 = c0p*t85530*t85532*2.0;
            double t85592 = b1f*t85517;
            double t85593 = b3f*t85518;
            double t85594 = b4f*t85520*t85519;
            double t85595 = b2f*c*t85515;
            double t85596 = t85592+t85593+t85594+t85595;
            double t85597 = 1.0/t85596;
            double t85598 = t85539*t85597*(1.0/2.0);
            double t85599 = t85598+1.0;
            double t85600 = log(t85599);
            double t85601 = a1f*c*t85515;
            double t85602 = t85601+1.0;
            double t85603 = t85591-c0f*t85600*t85602*2.0;
            double t85604 = t85591-t85603*t85535*t85538;
            double t85605 = gcaa*gcaa;
            double t85606 = b1f*t85542;
            double t85607 = b3f*t85543;
            double t85608 = b4f*t85544*t85519;
            double t85609 = b2f*c*t85540;
            double t85610 = t85606+t85607+t85608+t85609;
            double t85611 = 1.0/t85610;
            double t85612 = t85611*t85539*(1.0/2.0);
            double t85613 = t85612+1.0;
            double t85614 = log(t85613);
            double t85615 = a1f*c*t85540;
            double t85616 = t85615+1.0;
            double t85617 = t85556-c0f*t85614*t85616*2.0;
            double t85618 = t85556-t85535*t85617*t85538;
            functional_[index] = (rho_a[index]*t85604+rho_b[index]*t85618-t85557*(t85574-t85580*t85538*t85585* \
               t85579*(t85574-c0f*log((t85539*(1.0/2.0))/(b1f*t85560+b3f*t85561+b2f*c*t85558+b4f*t85562*t85519)+1.0) \
               *(a1f*c*t85558+1.0)*2.0)+(Aa*t85538*t85585*log((1.0/2.0)/(Aa*(b1a*t85560+b3a*t85561+b2a*c*t85558+b4a* \
               t85562*t85519))+1.0)*(t85580*t85579-1.0)*(a1a*c*t85558+1.0)*2.0)/d2fz0))*(ccab0+(ccab1*gcab*t85586) \
               /(gcab*t85586+1.0)+(ccab2*t85590*t85587)/(gcab*t85586*2.0+t85590*t85587+1.0)+(ccab3*gcab*t85590*t85586* \
               t85587)/(gcab*t85586*3.0+t85590*t85587*3.0+gcab*t85590*t85586*t85587+1.0))-(c0*pow(rho_b[index],4.0/ \
               3.0)*(cx0+(t85495/t85497-t85495*t85496*1.0/(t85497*t85497*t85497)*2.0+t85495*1.0/(t85497*t85497*t85497* \
               t85497*t85497)*t85498)*(cxnl0+cxnl1*gamma_bb[index]*gx*t85505*t85499+cxnl2*t85500*t85502*t85514*t85470+ \
               cxnl3*gamma_bb[index]*gx*t85500*t85501*t85510*t85470)+cx1*gamma_bb[index]*gx*t85505*t85499+cx2*t85500* \
               t85502*t85514*t85470+cx3*gamma_bb[index]*gx*t85500*t85501*t85510*t85470)+c0*pow(rho_a[index],4.0/3.0) \
               *(cx0+(t85464/t85466-t85464*t85465*1.0/(t85466*t85466*t85466)*2.0+t85464*1.0/(t85466*t85466*t85466* \
               t85466*t85466)*t85467)*(cxnl0+cxnl1*gamma_aa[index]*gx*t85475*t85468+cxnl2*t85470*t85472*t85484*t85469+ \
               cxnl3*gamma_aa[index]*gx*t85470*t85471*t85480*t85469)+cx1*gamma_aa[index]*gx*t85475*t85468+cx2*t85470* \
               t85472*t85484*t85469+cx3*gamma_aa[index]*gx*t85470*t85471*t85480*t85469))*(X-1.0)-rho_b[index]*t85618* \
               (ccaa0+(ccaa2*t85500*t85502*t85605)/(gamma_bb[index]*gcaa*t85499*2.0+t85500*t85502*t85605+1.0)+(ccaa1* \
               gamma_bb[index]*gcaa*t85499)/(gamma_bb[index]*gcaa*t85499+1.0)+(ccaa3*gamma_bb[index]*gcaa*t85500* \
               t85501*t85605)/(gamma_bb[index]*gcaa*t85499*3.0+t85500*t85502*t85605*3.0+gamma_bb[index]*gcaa*t85500* \
               t85501*t85605+1.0))-rho_a[index]*t85604*(ccaa0+(ccaa2*t85605*t85472*t85469)/(gamma_aa[index]*gcaa* \
               t85468*2.0+t85605*t85472*t85469+1.0)+(ccaa1*gamma_aa[index]*gcaa*t85468)/(gamma_aa[index]*gcaa*t85468+ \
               1.0)+(ccaa3*gamma_aa[index]*gcaa*t85605*t85471*t85469)/(gamma_aa[index]*gcaa*t85468*3.0+t85605*t85472* \
               t85469*3.0+gamma_aa[index]*gcaa*t85605*t85471*t85469+1.0));
        } else if (rho_a[index] > cutoff_) {
            double t90548 = 1.0/pow(rho_a[index],1.0/3.0);
            double t90549 = c*t90548;
            double t90550 = sqrt(t90549);
            double t90551 = pow(t90549,3.0/2.0);
            double t90552 = c*c;
            double t90553 = 1.0/pow(rho_a[index],2.0/3.0);
            double t90554 = 1.0/c0p;
            double t90555 = b1p*t90550;
            double t90556 = b3p*t90551;
            double t90557 = b4p*t90552*t90553;
            double t90558 = b2p*c*t90548;
            double t90559 = t90555+t90556+t90557+t90558;
            double t90560 = 1.0/t90559;
            double t90561 = t90560*t90554*(1.0/2.0);
            double t90562 = t90561+1.0;
            double t90563 = log(t90562);
            double t90564 = a1p*c*t90548;
            double t90565 = t90564+1.0;
            double t90566 = 1.0/pow(rho_a[index],8.0/3.0);
            double t90567 = gamma_aa[index]*gamma_aa[index];
            double t90568 = gcaa*gcaa;
            double t90569 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]);
            double t90570 = 1.0/pow(rho_a[index],1.6E1/3.0);
            double t90571 = pow(rho_a[index],5.0/3.0);
            double t90572 = C_k*t90571;
            double t90573 = tau_a[index]*1.0E20;
            double t90574 = 1.0/tau_a[index];
            double t90575 = -t90572+t90573;
            double t90576 = ( (t90575 > 0.0) ?  1.0 : 0.0 ) ;
            double t90577 = C_k*t90571*t90574*t90576;
            double t90578 = t90572-t90573;
            double t90579 = ( (t90578 > 0.0) ?  1.0 : 0.0 ) ;
            double t90580 = t90579*1.0E20;
            double t90581 = t90580+t90577-1.0;
            double t90582 = t90581*t90581;
            double t90583 = t90580+t90577+1.0;
            double t90584 = t90582*t90582;
            double t90585 = gx*gx;
            double t90586 = gamma_aa[index]*gx*t90566;
            double t90587 = t90586+1.0;
            double t90588 = 1.0/t90587;
            double t90589 = gamma_aa[index]*gx*t90566*3.0;
            double t90590 = gamma_aa[index]*gx*t90567*t90585*t90569;
            double t90591 = t90570*t90567*t90585*3.0;
            double t90592 = t90590+t90591+t90589+1.0;
            double t90593 = 1.0/t90592;
            double t90594 = gamma_aa[index]*gx*t90566*2.0;
            double t90595 = t90570*t90567*t90585;
            double t90596 = t90594+t90595+1.0;
            double t90597 = 1.0/t90596;
            functional_[index] = -rho_a[index]*(((pow(2.0,1.0/3.0)*2.0-2.0)*(c0f*log((1.0/2.0)/(c0f*(b1f*t90550+ \
               b3f*t90551+b2f*c*t90548+b4f*t90552*t90553))+1.0)*(a1f*c*t90548+1.0)*2.0-c0p*t90563*t90565*2.0))/(two_13* \
               2.0-2.0)+c0p*t90563*t90565*2.0)*(ccaa0+(ccaa2*t90570*t90567*t90568)/(gamma_aa[index]*gcaa*t90566*2.0+ \
               t90570*t90567*t90568+1.0)+(ccaa1*gamma_aa[index]*gcaa*t90566)/(gamma_aa[index]*gcaa*t90566+1.0)+(ccaa3* \
               gamma_aa[index]*gcaa*t90567*t90568*t90569)/(gamma_aa[index]*gcaa*t90566*3.0+t90570*t90567*t90568*3.0+ \
               gamma_aa[index]*gcaa*t90567*t90568*t90569+1.0))-c0*pow(rho_a[index],4.0/3.0)*(X-1.0)*(cx0+(t90581/ \
               t90583-t90581*t90582*1.0/(t90583*t90583*t90583)*2.0+t90581*1.0/(t90583*t90583*t90583*t90583*t90583) \
               *t90584)*(cxnl0+cxnl1*gamma_aa[index]*gx*t90566*t90588+cxnl2*t90570*t90567*t90585*t90597+cxnl3*gamma_aa[index]* \
               gx*t90593*t90567*t90585*t90569)+cx1*gamma_aa[index]*gx*t90566*t90588+cx2*t90570*t90567*t90585*t90597+ \
               cx3*gamma_aa[index]*gx*t90593*t90567*t90585*t90569);
        } else if (rho_b[index] > cutoff_) {
            double t89459 = 1.0/pow(rho_b[index],1.0/3.0);
            double t89460 = c*t89459;
            double t89461 = sqrt(t89460);
            double t89462 = pow(t89460,3.0/2.0);
            double t89463 = c*c;
            double t89464 = 1.0/pow(rho_b[index],2.0/3.0);
            double t89465 = 1.0/c0p;
            double t89466 = b1p*t89461;
            double t89467 = b3p*t89462;
            double t89468 = b4p*t89463*t89464;
            double t89469 = b2p*c*t89459;
            double t89470 = t89466+t89467+t89468+t89469;
            double t89471 = 1.0/t89470;
            double t89472 = t89471*t89465*(1.0/2.0);
            double t89473 = t89472+1.0;
            double t89474 = log(t89473);
            double t89475 = a1p*c*t89459;
            double t89476 = t89475+1.0;
            double t89477 = 1.0/pow(rho_b[index],8.0/3.0);
            double t89478 = gamma_bb[index]*gamma_bb[index];
            double t89479 = gcaa*gcaa;
            double t89480 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
               rho_b[index]*rho_b[index]);
            double t89481 = 1.0/pow(rho_b[index],1.6E1/3.0);
            double t89482 = pow(rho_b[index],5.0/3.0);
            double t89483 = C_k*t89482;
            double t89492 = tau_a[index]*1.0E20;
            double t89484 = t89483-t89492;
            double t89485 = ( (t89484 > 0.0) ?  1.0 : 0.0 ) ;
            double t89486 = t89485*1.0E20;
            double t89487 = 1.0/tau_b[index];
            double t89488 = tau_b[index]*1.0E20;
            double t89489 = -t89483+t89488;
            double t89490 = ( (t89489 > 0.0) ?  1.0 : 0.0 ) ;
            double t89491 = C_k*t89490*t89482*t89487;
            double t89493 = t89491+t89486-1.0;
            double t89494 = t89493*t89493;
            double t89495 = t89491+t89486+1.0;
            double t89496 = t89494*t89494;
            double t89497 = gx*gx;
            double t89498 = gamma_bb[index]*gx*t89477;
            double t89499 = t89498+1.0;
            double t89500 = 1.0/t89499;
            double t89501 = gamma_bb[index]*gx*t89477*3.0;
            double t89502 = gamma_bb[index]*gx*t89480*t89478*t89497;
            double t89503 = t89481*t89478*t89497*3.0;
            double t89504 = t89501+t89502+t89503+1.0;
            double t89505 = 1.0/t89504;
            double t89506 = gamma_bb[index]*gx*t89477*2.0;
            double t89507 = t89481*t89478*t89497;
            double t89508 = t89506+t89507+1.0;
            double t89509 = 1.0/t89508;
            functional_[index] = -rho_b[index]*(((pow(2.0,1.0/3.0)*2.0-2.0)*(c0f*log((1.0/2.0)/(c0f*(b1f*t89461+ \
               b3f*t89462+b2f*c*t89459+b4f*t89463*t89464))+1.0)*(a1f*c*t89459+1.0)*2.0-c0p*t89474*t89476*2.0))/(two_13* \
               2.0-2.0)+c0p*t89474*t89476*2.0)*(ccaa0+(ccaa2*t89481*t89478*t89479)/(gamma_bb[index]*gcaa*t89477*2.0+ \
               t89481*t89478*t89479+1.0)+(ccaa1*gamma_bb[index]*gcaa*t89477)/(gamma_bb[index]*gcaa*t89477+1.0)+(ccaa3* \
               gamma_bb[index]*gcaa*t89480*t89478*t89479)/(gamma_bb[index]*gcaa*t89477*3.0+t89481*t89478*t89479*3.0+ \
               gamma_bb[index]*gcaa*t89480*t89478*t89479+1.0))-c0*pow(rho_b[index],4.0/3.0)*(X-1.0)*(cx0+(t89493/ \
               t89495-t89493*t89494*1.0/(t89495*t89495*t89495)*2.0+t89493*1.0/(t89495*t89495*t89495*t89495*t89495) \
               *t89496)*(cxnl0+cxnl1*gamma_bb[index]*gx*t89500*t89477+cxnl2*t89481*t89509*t89478*t89497+cxnl3*gamma_bb[index]* \
               gx*t89505*t89480*t89478*t89497)+cx1*gamma_bb[index]*gx*t89500*t89477+cx2*t89481*t89509*t89478*t89497+ \
               cx3*gamma_bb[index]*gx*t89505*t89480*t89478*t89497);
        } else {
            functional_[index] = 0.0;
        }

    }
    //First Partials
    for (int index = 0; index < ntrue && deriv_ >= 1; index++) {

        //V_rho_a
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t85620 = 1.0/pow(rho_a[index],1.0/3.0);
            double t85621 = c*t85620;
            double t85622 = sqrt(t85621);
            double t85623 = pow(t85621,3.0/2.0);
            double t85624 = c*c;
            double t85625 = 1.0/pow(rho_a[index],2.0/3.0);
            double t85626 = 1.0/c0p;
            double t85627 = b1p*t85622;
            double t85628 = b3p*t85623;
            double t85629 = b4p*t85624*t85625;
            double t85630 = b2p*c*t85620;
            double t85631 = t85630+t85627+t85628+t85629;
            double t85632 = 1.0/t85631;
            double t85633 = t85632*t85626*(1.0/2.0);
            double t85634 = t85633+1.0;
            double t85635 = log(t85634);
            double t85636 = a1p*c*t85620;
            double t85637 = t85636+1.0;
            double t85638 = pow(2.0,1.0/3.0);
            double t85639 = t85638*2.0;
            double t85640 = t85639-2.0;
            double t85641 = two_13*2.0;
            double t85642 = t85641-2.0;
            double t85643 = 1.0/t85642;
            double t85644 = 1.0/c0f;
            double t85645 = 1.0/pow(rho_b[index],1.0/3.0);
            double t85646 = c*t85645;
            double t85647 = sqrt(t85646);
            double t85648 = pow(t85646,3.0/2.0);
            double t85649 = 1.0/pow(rho_b[index],2.0/3.0);
            double t85650 = b1p*t85647;
            double t85651 = b3p*t85648;
            double t85652 = b4p*t85624*t85649;
            double t85653 = b2p*c*t85645;
            double t85654 = t85650+t85651+t85652+t85653;
            double t85655 = 1.0/t85654;
            double t85656 = t85626*t85655*(1.0/2.0);
            double t85657 = t85656+1.0;
            double t85658 = log(t85657);
            double t85659 = a1p*c*t85645;
            double t85660 = t85659+1.0;
            double t85661 = c0p*t85660*t85658*2.0;
            double t85662 = rho_a[index]+rho_b[index];
            double t85663 = 1.0/pow(t85662,1.0/3.0);
            double t85664 = c*t85663;
            double t85665 = sqrt(t85664);
            double t85666 = pow(t85664,3.0/2.0);
            double t85667 = 1.0/pow(t85662,2.0/3.0);
            double t85668 = b1p*t85665;
            double t85669 = b3p*t85666;
            double t85670 = b4p*t85624*t85667;
            double t85671 = b2p*c*t85663;
            double t85672 = t85670+t85671+t85668+t85669;
            double t85673 = 1.0/t85672;
            double t85674 = t85626*t85673*(1.0/2.0);
            double t85675 = t85674+1.0;
            double t85676 = log(t85675);
            double t85677 = a1p*c*t85663;
            double t85678 = t85677+1.0;
            double t85679 = c0p*t85676*t85678*2.0;
            double t85680 = rho_a[index]-rho_b[index];
            double t85681 = t85680*t85680;
            double t85682 = 1.0/t85662;
            double t85683 = t85680*t85682;
            double t85684 = 1.0/(t85662*t85662*t85662*t85662);
            double t85685 = t85681*t85681;
            double t85686 = t85683+1.0;
            double t85687 = pow(t85686,4.0/3.0);
            double t85688 = -t85683+1.0;
            double t85689 = pow(t85688,4.0/3.0);
            double t85690 = t85687+t85689-2.0;
            double t85691 = gcab*gcab;
            double t85695 = 1.0/pow(rho_a[index],8.0/3.0);
            double t85696 = gamma_aa[index]*t85695*(1.0/2.0);
            double t85697 = 1.0/pow(rho_b[index],8.0/3.0);
            double t85698 = gamma_bb[index]*t85697*(1.0/2.0);
            double t85692 = t85696+t85698;
            double t85693 = t85692*t85692;
            double t85694 = 1.0/pow(rho_a[index],1.1E1/3.0);
            double t85699 = gcab*t85692;
            double t85700 = t85699+1.0;
            double t85701 = t85691*t85693;
            double t85702 = gcab*t85692*2.0;
            double t85703 = t85701+t85702+1.0;
            double t85704 = t85691*t85693*3.0;
            double t85705 = gcab*t85691*t85692*t85693;
            double t85706 = gcab*t85692*3.0;
            double t85707 = t85704+t85705+t85706+1.0;
            double t85708 = c0p*t85635*t85637*2.0;
            double t85709 = 1.0/t85703;
            double t85710 = 1.0/t85707;
            double t85711 = 1.0/t85700;
            double t85712 = 1.0/pow(t85662,4.0/3.0);
            double t85713 = b1f*t85665;
            double t85714 = b3f*t85666;
            double t85715 = b4f*t85624*t85667;
            double t85716 = b2f*c*t85663;
            double t85717 = t85713+t85714+t85715+t85716;
            double t85718 = 1.0/t85717;
            double t85719 = t85644*t85718*(1.0/2.0);
            double t85720 = t85719+1.0;
            double t85721 = log(t85720);
            double t85722 = a1f*c*t85663;
            double t85723 = t85722+1.0;
            double t85725 = c0f*t85721*t85723*2.0;
            double t85724 = -t85725+t85679;
            double t85726 = 1.0/(t85662*t85662);
            double t85754 = t85680*t85726;
            double t85727 = t85682-t85754;
            double t85728 = t85725-t85679;
            double t85729 = 1.0/pow(t85662,5.0/3.0);
            double t85730 = 1.0/sqrt(t85664);
            double t85731 = 1.0/t85675;
            double t85732 = 1.0/(t85672*t85672);
            double t85733 = b4p*t85624*t85729*(2.0/3.0);
            double t85734 = b2p*c*t85712*(1.0/3.0);
            double t85735 = b1p*c*t85712*t85730*(1.0/6.0);
            double t85736 = b3p*c*t85712*t85665*(1.0/2.0);
            double t85737 = t85733+t85734+t85735+t85736;
            double t85738 = t85731*t85732*t85737*t85678;
            double t85739 = 1.0/d2fz0;
            double t85740 = 1.0/Aa;
            double t85741 = b1a*t85665;
            double t85742 = b3a*t85666;
            double t85743 = b4a*t85624*t85667;
            double t85744 = b2a*c*t85663;
            double t85745 = t85741+t85742+t85743+t85744;
            double t85746 = 1.0/t85745;
            double t85747 = t85740*t85746*(1.0/2.0);
            double t85748 = t85747+1.0;
            double t85749 = log(t85748);
            double t85750 = a1a*c*t85663;
            double t85751 = t85750+1.0;
            double t85752 = 1.0/(t85662*t85662*t85662*t85662*t85662);
            double t85753 = pow(t85686,1.0/3.0);
            double t85755 = t85753*t85727*(4.0/3.0);
            double t85756 = pow(t85688,1.0/3.0);
            double t85757 = t85755-t85727*t85756*(4.0/3.0);
            double t85758 = t85684*t85685;
            double t85759 = t85758-1.0;
            double t85760 = a1f*c*t85620;
            double t85761 = t85760+1.0;
            double t85762 = b1f*t85622;
            double t85763 = b3f*t85623;
            double t85764 = b4f*t85624*t85625;
            double t85765 = b2f*c*t85620;
            double t85766 = t85762+t85763+t85764+t85765;
            double t85767 = 1.0/t85766;
            double t85768 = t85644*t85767*(1.0/2.0);
            double t85769 = t85768+1.0;
            double t85770 = 1.0/pow(rho_a[index],4.0/3.0);
            double t85771 = 1.0/pow(rho_a[index],5.0/3.0);
            double t85772 = 1.0/sqrt(t85621);
            double t85773 = log(t85769);
            double t85774 = 1.0/t85634;
            double t85775 = 1.0/(t85631*t85631);
            double t85776 = b4p*t85624*t85771*(2.0/3.0);
            double t85777 = b2p*c*t85770*(1.0/3.0);
            double t85778 = b1p*c*t85770*t85772*(1.0/6.0);
            double t85779 = b3p*c*t85622*t85770*(1.0/2.0);
            double t85780 = t85776+t85777+t85778+t85779;
            double t85781 = t85780*t85637*t85774*t85775;
            double t85782 = Aa*t85643*t85751*t85690*t85739*t85749*t85759*2.0;
            double t85784 = c0f*t85761*t85773*2.0;
            double t85783 = t85708-t85784;
            double t85785 = t85640*t85643*t85783;
            double t85786 = gamma_aa[index]*gamma_aa[index];
            double t85787 = gcaa*gcaa;
            double t85788 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]);
            double t85789 = 1.0/pow(rho_a[index],1.6E1/3.0);
            double t85790 = pow(rho_a[index],5.0/3.0);
            double t85791 = C_k*t85790;
            double t85792 = tau_a[index]*1.0E20;
            double t85793 = 1.0/tau_a[index];
            double t85794 = -t85791+t85792;
            double t85795 = ( (t85794 > 0.0) ?  1.0 : 0.0 ) ;
            double t85796 = C_k*t85790*t85793*t85795;
            double t85797 = t85791-t85792;
            double t85798 = ( (t85797 > 0.0) ?  1.0 : 0.0 ) ;
            double t85799 = t85798*1.0E20;
            double t85800 = t85796+t85799-1.0;
            double t85801 = t85800*t85800;
            double t85802 = t85796+t85799+1.0;
            double t85803 = t85801*t85801;
            double t85804 = gx*gx;
            double t85805 = gamma_aa[index]*gx*t85695;
            double t85806 = t85805+1.0;
            double t85807 = 1.0/t85806;
            double t85808 = gamma_aa[index]*gx*t85695*3.0;
            double t85809 = gamma_aa[index]*gx*t85804*t85786*t85788;
            double t85810 = t85804*t85786*t85789*3.0;
            double t85811 = t85810+t85808+t85809+1.0;
            double t85812 = 1.0/t85811;
            double t85813 = gamma_aa[index]*gx*t85695*2.0;
            double t85814 = t85804*t85786*t85789;
            double t85815 = t85813+t85814+1.0;
            double t85816 = 1.0/t85815;
            double t85817 = 1.0/t85802;
            double t85818 = 1.0/(t85802*t85802*t85802);
            double t85819 = 1.0/(t85802*t85802*t85802*t85802*t85802);
            double t85820 = t85800*t85803*t85819;
            double t85821 = 1.0/pow(rho_a[index],1.9E1/3.0);
            double t85822 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]*rho_a[index]);
            double t85823 = cxnl1*gamma_aa[index]*gx*t85807*t85695;
            double t85824 = cxnl3*gamma_aa[index]*gx*t85812*t85804*t85786*t85788;
            double t85825 = cxnl2*t85804*t85816*t85786*t85789;
            double t85826 = cxnl0+t85823+t85824+t85825;
            double t85827 = 0.0 ;
            double t85828 = pow(rho_a[index],2.0/3.0);
            double t85829 = C_k*t85827*t85828*(5.0E20/3.0);
            double t85830 = C_k*C_k;
            double t85831 = pow(rho_a[index],7.0/3.0);
            double t85832 = C_k*t85828*t85793*t85795*(5.0/3.0);
            double t85834 = t85830*t85831*t85827*t85793*(5.0/3.0);
            double t85833 = t85832-t85834+t85829;
            double t85835 = 1.0/(t85806*t85806);
            double t85836 = gamma_aa[index]*gx*t85694*8.0;
            double t85837 = gamma_aa[index]*gx*t85804*t85822*t85786*8.0;
            double t85838 = t85821*t85804*t85786*1.6E1;
            double t85839 = t85836+t85837+t85838;
            double t85840 = 1.0/(t85811*t85811);
            double t85841 = gamma_aa[index]*gx*t85694*(1.6E1/3.0);
            double t85842 = t85821*t85804*t85786*(1.6E1/3.0);
            double t85843 = t85841+t85842;
            double t85844 = 1.0/(t85815*t85815);
            double t85845 = t85800*t85817;
            double t85846 = t85820+t85845-t85800*t85801*t85818*2.0;
            double t85847 = t85708-t85785;
            double t85848 = gamma_aa[index]*gcaa*t85695;
            double t85849 = t85848+1.0;
            double t85850 = 1.0/t85849;
            double t85851 = gamma_aa[index]*gcaa*t85695*3.0;
            double t85852 = gamma_aa[index]*gcaa*t85786*t85787*t85788;
            double t85853 = t85786*t85787*t85789*3.0;
            double t85854 = t85851+t85852+t85853+1.0;
            double t85855 = 1.0/t85854;
            double t85856 = gamma_aa[index]*gcaa*t85695*2.0;
            double t85857 = t85786*t85787*t85789;
            double t85858 = t85856+t85857+1.0;
            double t85859 = 1.0/t85858;
            double t85860 = 1.0/t85769;
            double t85861 = 1.0/(t85766*t85766);
            double t85862 = b4f*t85624*t85771*(2.0/3.0);
            double t85863 = b2f*c*t85770*(1.0/3.0);
            double t85864 = b1f*c*t85770*t85772*(1.0/6.0);
            double t85865 = b3f*c*t85622*t85770*(1.0/2.0);
            double t85866 = t85862+t85863+t85864+t85865;
            double t85867 = a1f*c*c0f*t85770*t85773*(2.0/3.0);
            double t85868 = a1p*c*c0p*t85635*t85770*(2.0/3.0);
            double t85869 = ccaa1*gamma_aa[index]*gcaa*t85850*t85695;
            double t85870 = ccaa3*gamma_aa[index]*gcaa*t85855*t85786*t85787*t85788;
            double t85871 = ccaa2*t85786*t85787*t85859*t85789;
            double t85872 = ccaa0+t85870+t85871+t85869;
            v_rho_a_[index] = -t85872*t85847-(c0*pow(rho_a[index],1.0/3.0)*(cx0+t85826*t85846+cx1*gamma_aa[index]* \
               gx*t85807*t85695+cx2*t85804*t85816*t85786*t85789+cx3*gamma_aa[index]*gx*t85812*t85804*t85786*t85788) \
               *(4.0/3.0)-c0*pow(rho_a[index],4.0/3.0)*(t85846*(cxnl1*gamma_aa[index]*gx*t85807*t85694*(8.0/3.0)- \
               cxnl1*t85821*t85804*t85835*t85786*(8.0/3.0)+cxnl2*t85821*t85804*t85816*t85786*(1.6E1/3.0)-cxnl2*t85804* \
               t85843*t85844*t85786*t85789+cxnl3*gamma_aa[index]*gx*t85812*t85804*t85822*t85786*8.0-cxnl3*gamma_aa[index]* \
               gx*t85804*t85840*t85839*t85786*t85788)-t85826*(t85833*t85817-t85800*1.0/(t85802*t85802)*t85833-t85801* \
               t85833*t85818*6.0+t85803*t85833*t85819*5.0+t85800*t85801*1.0/(t85802*t85802*t85802*t85802)*t85833* \
               6.0-t85800*1.0/(t85802*t85802*t85802*t85802*t85802*t85802)*t85803*t85833*5.0)+cx1*gamma_aa[index]* \
               gx*t85807*t85694*(8.0/3.0)-cx1*t85821*t85804*t85835*t85786*(8.0/3.0)+cx2*t85821*t85804*t85816*t85786* \
               (1.6E1/3.0)-cx2*t85804*t85843*t85844*t85786*t85789+cx3*gamma_aa[index]*gx*t85812*t85804*t85822*t85786* \
               8.0-cx3*gamma_aa[index]*gx*t85804*t85840*t85839*t85786*t85788))*(X-1.0)-(rho_a[index]*(t85708-t85640* \
               t85643*t85783)+rho_b[index]*(t85661-t85640*t85643*(t85661-c0f*log((t85644*(1.0/2.0))/(b1f*t85647+b3f* \
               t85648+b2f*c*t85645+b4f*t85624*t85649)+1.0)*(a1f*c*t85645+1.0)*2.0))-t85662*(t85782+t85679-t85643* \
               t85724*t85690*t85684*t85685))*(ccab1*gamma_aa[index]*gcab*t85711*t85694*(4.0/3.0)-ccab2*1.0/(t85703* \
               t85703)*t85691*t85693*(gamma_aa[index]*gcab*t85694*(8.0/3.0)+gamma_aa[index]*t85691*t85692*t85694* \
               (8.0/3.0))-ccab1*gamma_aa[index]*1.0/(t85700*t85700)*t85691*t85692*t85694*(4.0/3.0)+ccab2*gamma_aa[index]* \
               t85691*t85709*t85692*t85694*(8.0/3.0)-ccab3*gcab*1.0/(t85707*t85707)*t85691*t85692*t85693*(gamma_aa[index]* \
               gcab*t85694*4.0+gamma_aa[index]*t85691*t85692*t85694*8.0+gamma_aa[index]*gcab*t85691*t85693*t85694* \
               4.0)+ccab3*gamma_aa[index]*gcab*t85710*t85691*t85693*t85694*4.0)-(ccab0+ccab1*gcab*t85711*t85692+ccab2* \
               t85691*t85709*t85693+ccab3*gcab*t85710*t85691*t85692*t85693)*(-t85708+t85782+t85785+t85679+rho_a[index]* \
               (-t85781+t85868+t85640*t85643*(t85781+t85867-t85761*t85860*t85861*t85866-a1p*c*c0p*t85635*t85770*(2.0/ \
               3.0)))-t85662*(-t85738+t85643*t85690*t85684*t85685*(t85738-(t85723*1.0/(t85717*t85717)*(b2f*c*t85712* \
               (1.0/3.0)+b4f*t85624*t85729*(2.0/3.0)+b1f*c*t85712*t85730*(1.0/6.0)+b3f*c*t85712*t85665*(1.0/2.0)) \
               )/t85720+a1f*c*c0f*t85712*t85721*(2.0/3.0)-a1p*c*c0p*t85712*t85676*(2.0/3.0))+a1p*c*c0p*t85712*t85676* \
               (2.0/3.0)+t85643*t85752*t85690*t85728*t85685*4.0-t85643*t85728*t85684*t85685*t85757+t85643*t85724* \
               t85680*t85681*t85690*t85684*4.0+Aa*t85643*t85751*t85690*t85739*t85749*(t85752*t85685*4.0-t85680*t85681* \
               t85684*4.0)*2.0-Aa*t85643*t85751*t85739*t85757*t85749*t85759*2.0-(t85643*t85751*t85690*1.0/(t85745* \
               t85745)*t85739*t85759*(b2a*c*t85712*(1.0/3.0)+b4a*t85624*t85729*(2.0/3.0)+b1a*c*t85712*t85730*(1.0/ \
               6.0)+b3a*c*t85712*t85665*(1.0/2.0)))/t85748+Aa*a1a*c*t85712*t85643*t85690*t85739*t85749*t85759*(2.0/ \
               3.0))+t85643*t85690*t85728*t85684*t85685)+rho_a[index]*t85872*(-t85781+t85868+t85640*t85643*(t85781+ \
               t85867-t85868-t85761*t85860*t85861*t85866))+rho_a[index]*t85847*(ccaa1*gamma_aa[index]*gcaa*t85850* \
               t85694*(8.0/3.0)+ccaa2*t85821*t85786*t85787*t85859*(1.6E1/3.0)-ccaa1*t85821*t85786*1.0/(t85849*t85849) \
               *t85787*(8.0/3.0)-ccaa2*t85786*1.0/(t85858*t85858)*t85787*t85789*(gamma_aa[index]*gcaa*t85694*(1.6E1/ \
               3.0)+t85821*t85786*t85787*(1.6E1/3.0))+ccaa3*gamma_aa[index]*gcaa*t85822*t85855*t85786*t85787*8.0- \
               ccaa3*gamma_aa[index]*gcaa*1.0/(t85854*t85854)*t85786*t85787*t85788*(gamma_aa[index]*gcaa*t85694*8.0+ \
               t85821*t85786*t85787*1.6E1+gamma_aa[index]*gcaa*t85822*t85786*t85787*8.0));
        } else if (rho_a[index] > cutoff_) {
            double t90599 = 1.0/pow(rho_a[index],1.0/3.0);
            double t90600 = c*t90599;
            double t90601 = sqrt(t90600);
            double t90602 = pow(t90600,3.0/2.0);
            double t90603 = c*c;
            double t90604 = 1.0/pow(rho_a[index],2.0/3.0);
            double t90605 = 1.0/c0p;
            double t90606 = b1p*t90601;
            double t90607 = b3p*t90602;
            double t90608 = b4p*t90603*t90604;
            double t90609 = b2p*c*t90599;
            double t90610 = t90606+t90607+t90608+t90609;
            double t90611 = 1.0/t90610;
            double t90612 = t90611*t90605*(1.0/2.0);
            double t90613 = t90612+1.0;
            double t90614 = log(t90613);
            double t90615 = a1p*c*t90599;
            double t90616 = t90615+1.0;
            double t90617 = 1.0/pow(rho_a[index],8.0/3.0);
            double t90618 = gamma_aa[index]*gamma_aa[index];
            double t90619 = gcaa*gcaa;
            double t90620 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]);
            double t90621 = 1.0/pow(rho_a[index],1.6E1/3.0);
            double t90622 = pow(2.0,1.0/3.0);
            double t90623 = t90622*2.0;
            double t90624 = t90623-2.0;
            double t90625 = two_13*2.0;
            double t90626 = t90625-2.0;
            double t90627 = 1.0/t90626;
            double t90628 = 1.0/c0f;
            double t90629 = b1f*t90601;
            double t90630 = b3f*t90602;
            double t90631 = b4f*t90603*t90604;
            double t90632 = b2f*c*t90599;
            double t90633 = t90630+t90631+t90632+t90629;
            double t90634 = 1.0/t90633;
            double t90635 = t90634*t90628*(1.0/2.0);
            double t90636 = t90635+1.0;
            double t90637 = log(t90636);
            double t90638 = a1f*c*t90599;
            double t90639 = t90638+1.0;
            double t90640 = c0f*t90637*t90639*2.0;
            double t90641 = c0p*t90614*t90616*2.0;
            double t90642 = gamma_aa[index]*gcaa*t90617;
            double t90643 = t90642+1.0;
            double t90644 = 1.0/t90643;
            double t90645 = gamma_aa[index]*gcaa*t90617*3.0;
            double t90646 = gamma_aa[index]*gcaa*t90620*t90618*t90619;
            double t90647 = t90621*t90618*t90619*3.0;
            double t90648 = t90645+t90646+t90647+1.0;
            double t90649 = 1.0/t90648;
            double t90650 = gamma_aa[index]*gcaa*t90617*2.0;
            double t90651 = t90621*t90618*t90619;
            double t90652 = t90650+t90651+1.0;
            double t90653 = 1.0/t90652;
            double t90654 = 1.0/pow(rho_a[index],1.9E1/3.0);
            double t90655 = 1.0/pow(rho_a[index],1.1E1/3.0);
            double t90656 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]*rho_a[index]);
            double t90657 = 1.0/pow(rho_a[index],4.0/3.0);
            double t90658 = 1.0/pow(rho_a[index],5.0/3.0);
            double t90659 = 1.0/sqrt(t90600);
            double t90660 = 1.0/t90613;
            double t90661 = 1.0/(t90610*t90610);
            double t90662 = b4p*t90603*t90658*(2.0/3.0);
            double t90663 = b2p*c*t90657*(1.0/3.0);
            double t90664 = b1p*c*t90657*t90659*(1.0/6.0);
            double t90665 = b3p*c*t90601*t90657*(1.0/2.0);
            double t90666 = t90662+t90663+t90664+t90665;
            double t90667 = t90660*t90616*t90661*t90666;
            double t90668 = ccaa1*gamma_aa[index]*gcaa*t90617*t90644;
            double t90669 = ccaa3*gamma_aa[index]*gcaa*t90620*t90618*t90619*t90649;
            double t90670 = ccaa2*t90621*t90653*t90618*t90619;
            double t90671 = ccaa0+t90670+t90668+t90669;
            double t90672 = pow(rho_a[index],5.0/3.0);
            double t90673 = C_k*t90672;
            double t90674 = tau_a[index]*1.0E20;
            double t90675 = 1.0/tau_a[index];
            double t90676 = -t90673+t90674;
            double t90677 = ( (t90676 > 0.0) ?  1.0 : 0.0 ) ;
            double t90678 = C_k*t90672*t90675*t90677;
            double t90679 = t90673-t90674;
            double t90680 = ( (t90679 > 0.0) ?  1.0 : 0.0 ) ;
            double t90681 = t90680*1.0E20;
            double t90682 = t90681+t90678-1.0;
            double t90683 = t90682*t90682;
            double t90684 = t90681+t90678+1.0;
            double t90685 = t90683*t90683;
            double t90686 = gx*gx;
            double t90687 = gamma_aa[index]*gx*t90617;
            double t90688 = t90687+1.0;
            double t90689 = 1.0/t90688;
            double t90690 = gamma_aa[index]*gx*t90617*3.0;
            double t90691 = gamma_aa[index]*gx*t90620*t90618*t90686;
            double t90692 = t90621*t90618*t90686*3.0;
            double t90693 = t90690+t90691+t90692+1.0;
            double t90694 = 1.0/t90693;
            double t90695 = gamma_aa[index]*gx*t90617*2.0;
            double t90696 = t90621*t90618*t90686;
            double t90697 = t90695+t90696+1.0;
            double t90698 = 1.0/t90697;
            double t90699 = X-1.0;
            double t90700 = 1.0/t90684;
            double t90701 = t90700*t90682;
            double t90702 = 1.0/(t90684*t90684*t90684);
            double t90703 = 1.0/(t90684*t90684*t90684*t90684*t90684);
            double t90704 = t90703*t90682*t90685;
            double t90705 = t90701+t90704-t90702*t90682*t90683*2.0;
            double t90706 = cxnl1*gamma_aa[index]*gx*t90617*t90689;
            double t90707 = cxnl3*gamma_aa[index]*gx*t90620*t90618*t90694*t90686;
            double t90708 = cxnl2*t90621*t90618*t90686*t90698;
            double t90709 = cxnl0+t90706+t90707+t90708;
            double t90710 = 0.0 ;
            double t90711 = pow(rho_a[index],2.0/3.0);
            double t90712 = C_k*t90710*t90711*(5.0E20/3.0);
            double t90713 = C_k*C_k;
            double t90714 = pow(rho_a[index],7.0/3.0);
            double t90715 = C_k*t90711*t90675*t90677*(5.0/3.0);
            double t90717 = t90710*t90713*t90714*t90675*(5.0/3.0);
            double t90716 = t90712+t90715-t90717;
            double t90718 = 1.0/(t90688*t90688);
            double t90719 = gamma_aa[index]*gx*t90655*8.0;
            double t90720 = gamma_aa[index]*gx*t90618*t90656*t90686*8.0;
            double t90721 = t90618*t90654*t90686*1.6E1;
            double t90722 = t90720+t90721+t90719;
            double t90723 = 1.0/(t90693*t90693);
            double t90724 = gamma_aa[index]*gx*t90655*(1.6E1/3.0);
            double t90725 = t90618*t90654*t90686*(1.6E1/3.0);
            double t90726 = t90724+t90725;
            double t90727 = 1.0/(t90697*t90697);
            v_rho_a_[index] = -t90671*(t90641+t90624*t90627*(t90640-c0p*t90614*t90616*2.0))+rho_a[index]*(t90641+ \
               t90624*t90627*(t90640-t90641))*(ccaa1*gamma_aa[index]*gcaa*t90644*t90655*(8.0/3.0)+ccaa2*t90653*t90618* \
               t90654*t90619*(1.6E1/3.0)-ccaa1*1.0/(t90643*t90643)*t90618*t90654*t90619*(8.0/3.0)-ccaa2*t90621*1.0/ \
               (t90652*t90652)*t90618*t90619*(gamma_aa[index]*gcaa*t90655*(1.6E1/3.0)+t90618*t90654*t90619*(1.6E1/ \
               3.0))+ccaa3*gamma_aa[index]*gcaa*t90618*t90619*t90656*t90649*8.0-ccaa3*gamma_aa[index]*gcaa*t90620* \
               t90618*t90619*1.0/(t90648*t90648)*(gamma_aa[index]*gcaa*t90655*8.0+t90618*t90654*t90619*1.6E1+gamma_aa[index]* \
               gcaa*t90618*t90619*t90656*8.0))+rho_a[index]*t90671*(-t90667+t90624*t90627*(t90667-(1.0/(t90633*t90633) \
               *t90639*(b2f*c*t90657*(1.0/3.0)+b4f*t90603*t90658*(2.0/3.0)+b1f*c*t90657*t90659*(1.0/6.0)+b3f*c*t90601* \
               t90657*(1.0/2.0)))/t90636+a1f*c*c0f*t90637*t90657*(2.0/3.0)-a1p*c*c0p*t90614*t90657*(2.0/3.0))+a1p* \
               c*c0p*t90614*t90657*(2.0/3.0))-c0*pow(rho_a[index],1.0/3.0)*t90699*(cx0+t90705*t90709+cx1*gamma_aa[index]* \
               gx*t90617*t90689+cx2*t90621*t90618*t90686*t90698+cx3*gamma_aa[index]*gx*t90620*t90618*t90694*t90686) \
               *(4.0/3.0)+c0*pow(rho_a[index],4.0/3.0)*t90699*(t90705*(cxnl1*gamma_aa[index]*gx*t90655*t90689*(8.0/ \
               3.0)-cxnl1*t90618*t90654*t90718*t90686*(8.0/3.0)+cxnl2*t90618*t90654*t90686*t90698*(1.6E1/3.0)-cxnl2* \
               t90621*t90618*t90726*t90727*t90686+cxnl3*gamma_aa[index]*gx*t90618*t90656*t90694*t90686*8.0-cxnl3* \
               gamma_aa[index]*gx*t90620*t90722*t90723*t90618*t90686)-t90709*(t90700*t90716-t90716*t90682*1.0/(t90684* \
               t90684)-t90702*t90716*t90683*6.0+t90703*t90716*t90685*5.0+t90716*t90682*t90683*1.0/(t90684*t90684* \
               t90684*t90684)*6.0-t90716*t90682*1.0/(t90684*t90684*t90684*t90684*t90684*t90684)*t90685*5.0)+cx1*gamma_aa[index]* \
               gx*t90655*t90689*(8.0/3.0)-cx1*t90618*t90654*t90718*t90686*(8.0/3.0)+cx2*t90618*t90654*t90686*t90698* \
               (1.6E1/3.0)-cx2*t90621*t90618*t90726*t90727*t90686+cx3*gamma_aa[index]*gx*t90618*t90656*t90694*t90686* \
               8.0-cx3*gamma_aa[index]*gx*t90620*t90722*t90723*t90618*t90686);
        } else if (rho_b[index] > cutoff_) {
            v_rho_a_[index] = 0.0;
        } else {
            v_rho_a_[index] = 0.0;
        }

        //V_rho_b
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t85874 = 1.0/pow(rho_a[index],1.0/3.0);
            double t85875 = c*t85874;
            double t85876 = sqrt(t85875);
            double t85877 = pow(t85875,3.0/2.0);
            double t85878 = c*c;
            double t85879 = 1.0/pow(rho_a[index],2.0/3.0);
            double t85880 = 1.0/c0p;
            double t85881 = b1p*t85876;
            double t85882 = b3p*t85877;
            double t85883 = b4p*t85878*t85879;
            double t85884 = b2p*c*t85874;
            double t85885 = t85881+t85882+t85883+t85884;
            double t85886 = 1.0/t85885;
            double t85887 = t85880*t85886*(1.0/2.0);
            double t85888 = t85887+1.0;
            double t85889 = log(t85888);
            double t85890 = a1p*c*t85874;
            double t85891 = t85890+1.0;
            double t85892 = pow(2.0,1.0/3.0);
            double t85893 = t85892*2.0;
            double t85894 = t85893-2.0;
            double t85895 = two_13*2.0;
            double t85896 = t85895-2.0;
            double t85897 = 1.0/t85896;
            double t85898 = 1.0/c0f;
            double t85899 = 1.0/pow(rho_b[index],1.0/3.0);
            double t85900 = c*t85899;
            double t85901 = sqrt(t85900);
            double t85902 = pow(t85900,3.0/2.0);
            double t85903 = 1.0/pow(rho_b[index],2.0/3.0);
            double t85904 = b1p*t85901;
            double t85905 = b3p*t85902;
            double t85906 = b4p*t85903*t85878;
            double t85907 = b2p*c*t85899;
            double t85908 = t85904+t85905+t85906+t85907;
            double t85909 = 1.0/t85908;
            double t85910 = t85880*t85909*(1.0/2.0);
            double t85911 = t85910+1.0;
            double t85912 = log(t85911);
            double t85913 = a1p*c*t85899;
            double t85914 = t85913+1.0;
            double t85915 = c0p*t85912*t85914*2.0;
            double t85916 = rho_a[index]+rho_b[index];
            double t85917 = 1.0/pow(t85916,1.0/3.0);
            double t85918 = c*t85917;
            double t85919 = sqrt(t85918);
            double t85920 = pow(t85918,3.0/2.0);
            double t85921 = 1.0/pow(t85916,2.0/3.0);
            double t85922 = b1p*t85919;
            double t85923 = b3p*t85920;
            double t85924 = b4p*t85921*t85878;
            double t85925 = b2p*c*t85917;
            double t85926 = t85922+t85923+t85924+t85925;
            double t85927 = 1.0/t85926;
            double t85928 = t85880*t85927*(1.0/2.0);
            double t85929 = t85928+1.0;
            double t85930 = log(t85929);
            double t85931 = a1p*c*t85917;
            double t85932 = t85931+1.0;
            double t85933 = c0p*t85930*t85932*2.0;
            double t85934 = rho_a[index]-rho_b[index];
            double t85935 = t85934*t85934;
            double t85936 = 1.0/t85916;
            double t85937 = t85934*t85936;
            double t85938 = 1.0/(t85916*t85916*t85916*t85916);
            double t85939 = t85935*t85935;
            double t85940 = t85937+1.0;
            double t85941 = pow(t85940,4.0/3.0);
            double t85942 = -t85937+1.0;
            double t85943 = pow(t85942,4.0/3.0);
            double t85944 = t85941+t85943-2.0;
            double t85945 = gcab*gcab;
            double t85949 = 1.0/pow(rho_a[index],8.0/3.0);
            double t85950 = gamma_aa[index]*t85949*(1.0/2.0);
            double t85951 = 1.0/pow(rho_b[index],8.0/3.0);
            double t85952 = gamma_bb[index]*t85951*(1.0/2.0);
            double t85946 = t85950+t85952;
            double t85947 = t85946*t85946;
            double t85948 = 1.0/pow(rho_b[index],1.1E1/3.0);
            double t85953 = gcab*t85946;
            double t85954 = t85953+1.0;
            double t85955 = t85945*t85947;
            double t85956 = gcab*t85946*2.0;
            double t85957 = t85955+t85956+1.0;
            double t85958 = t85945*t85947*3.0;
            double t85959 = gcab*t85945*t85946*t85947;
            double t85960 = gcab*t85946*3.0;
            double t85961 = t85960+t85958+t85959+1.0;
            double t85962 = c0p*t85891*t85889*2.0;
            double t85963 = 1.0/t85957;
            double t85964 = 1.0/t85961;
            double t85965 = 1.0/t85954;
            double t85966 = 1.0/pow(t85916,4.0/3.0);
            double t85967 = b1f*t85919;
            double t85968 = b3f*t85920;
            double t85969 = b4f*t85921*t85878;
            double t85970 = b2f*c*t85917;
            double t85971 = t85970+t85967+t85968+t85969;
            double t85972 = 1.0/t85971;
            double t85973 = t85972*t85898*(1.0/2.0);
            double t85974 = t85973+1.0;
            double t85975 = log(t85974);
            double t85976 = a1f*c*t85917;
            double t85977 = t85976+1.0;
            double t85979 = c0f*t85975*t85977*2.0;
            double t85978 = t85933-t85979;
            double t85980 = 1.0/(t85916*t85916);
            double t85981 = t85934*t85980;
            double t85982 = t85936+t85981;
            double t85983 = 1.0/pow(t85916,5.0/3.0);
            double t85984 = 1.0/sqrt(t85918);
            double t85985 = 1.0/t85929;
            double t85986 = 1.0/(t85926*t85926);
            double t85987 = b4p*t85983*t85878*(2.0/3.0);
            double t85988 = b2p*c*t85966*(1.0/3.0);
            double t85989 = b1p*c*t85966*t85984*(1.0/6.0);
            double t85990 = b3p*c*t85919*t85966*(1.0/2.0);
            double t85991 = t85990+t85987+t85988+t85989;
            double t85992 = 1.0/d2fz0;
            double t85993 = 1.0/Aa;
            double t85994 = b1a*t85919;
            double t85995 = b3a*t85920;
            double t85996 = b4a*t85921*t85878;
            double t85997 = b2a*c*t85917;
            double t85998 = t85994+t85995+t85996+t85997;
            double t85999 = 1.0/t85998;
            double t86000 = t85993*t85999*(1.0/2.0);
            double t86001 = t86000+1.0;
            double t86002 = log(t86001);
            double t86003 = a1a*c*t85917;
            double t86004 = t86003+1.0;
            double t86005 = 1.0/(t85916*t85916*t85916*t85916*t85916);
            double t86006 = pow(t85940,1.0/3.0);
            double t86007 = t85982*t86006*(4.0/3.0);
            double t86008 = pow(t85942,1.0/3.0);
            double t86009 = t86007-t85982*t86008*(4.0/3.0);
            double t86010 = t85938*t85939;
            double t86011 = t86010-1.0;
            double t86012 = t85932*t85991*t85985*t85986;
            double t86013 = a1f*c*t85899;
            double t86014 = t86013+1.0;
            double t86015 = b1f*t85901;
            double t86016 = b3f*t85902;
            double t86017 = b4f*t85903*t85878;
            double t86018 = b2f*c*t85899;
            double t86019 = t86015+t86016+t86017+t86018;
            double t86020 = 1.0/t86019;
            double t86021 = t85898*t86020*(1.0/2.0);
            double t86022 = t86021+1.0;
            double t86023 = 1.0/pow(rho_b[index],4.0/3.0);
            double t86024 = 1.0/pow(rho_b[index],5.0/3.0);
            double t86025 = 1.0/sqrt(t85900);
            double t86026 = log(t86022);
            double t86027 = 1.0/t85911;
            double t86028 = 1.0/(t85908*t85908);
            double t86029 = b4p*t85878*t86024*(2.0/3.0);
            double t86030 = b2p*c*t86023*(1.0/3.0);
            double t86031 = b1p*c*t86023*t86025*(1.0/6.0);
            double t86032 = b3p*c*t85901*t86023*(1.0/2.0);
            double t86033 = t86030+t86031+t86032+t86029;
            double t86034 = t85914*t86033*t86027*t86028;
            double t86037 = c0f*t86014*t86026*2.0;
            double t86035 = t85915-t86037;
            double t86036 = Aa*t85944*t85992*t85897*t86002*t86011*t86004*2.0;
            double t86038 = t85894*t85897*t86035;
            double t86039 = gamma_bb[index]*gamma_bb[index];
            double t86040 = gcaa*gcaa;
            double t86041 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
               rho_b[index]*rho_b[index]);
            double t86042 = 1.0/pow(rho_b[index],1.6E1/3.0);
            double t86043 = pow(rho_b[index],5.0/3.0);
            double t86044 = C_k*t86043;
            double t86053 = tau_a[index]*1.0E20;
            double t86045 = t86044-t86053;
            double t86046 = ( (t86045 > 0.0) ?  1.0 : 0.0 ) ;
            double t86047 = t86046*1.0E20;
            double t86048 = 1.0/tau_b[index];
            double t86049 = tau_b[index]*1.0E20;
            double t86050 = -t86044+t86049;
            double t86051 = ( (t86050 > 0.0) ?  1.0 : 0.0 ) ;
            double t86052 = C_k*t86051*t86043*t86048;
            double t86054 = t86052+t86047-1.0;
            double t86055 = t86054*t86054;
            double t86056 = t86052+t86047+1.0;
            double t86057 = t86055*t86055;
            double t86058 = gx*gx;
            double t86059 = gamma_bb[index]*gx*t85951;
            double t86060 = t86059+1.0;
            double t86061 = 1.0/t86060;
            double t86062 = gamma_bb[index]*gx*t85951*3.0;
            double t86063 = gamma_bb[index]*gx*t86041*t86039*t86058;
            double t86064 = t86042*t86039*t86058*3.0;
            double t86065 = t86062+t86063+t86064+1.0;
            double t86066 = 1.0/t86065;
            double t86067 = gamma_bb[index]*gx*t85951*2.0;
            double t86068 = t86042*t86039*t86058;
            double t86069 = t86067+t86068+1.0;
            double t86070 = 1.0/t86069;
            double t86071 = 1.0/t86056;
            double t86072 = t86071*t86054;
            double t86073 = 1.0/(t86056*t86056*t86056);
            double t86074 = 1.0/(t86056*t86056*t86056*t86056*t86056);
            double t86075 = t86054*t86074*t86057;
            double t86076 = t86072+t86075-t86054*t86055*t86073*2.0;
            double t86077 = 1.0/pow(rho_b[index],1.9E1/3.0);
            double t86078 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
               rho_b[index]*rho_b[index]*rho_b[index]);
            double t86079 = cxnl1*gamma_bb[index]*gx*t85951*t86061;
            double t86080 = cxnl3*gamma_bb[index]*gx*t86041*t86039*t86066*t86058;
            double t86081 = cxnl2*t86042*t86070*t86039*t86058;
            double t86082 = cxnl0+t86080+t86081+t86079;
            double t86083 = pow(rho_b[index],2.0/3.0);
            double t86084 = -t86044+t86053;
            double t86085 = 0.0 ;
            double t86086 = C_k*t86083*t86085*(5.0E20/3.0);
            double t86087 = C_k*C_k;
            double t86088 = pow(rho_b[index],7.0/3.0);
            double t86089 = 0.0 ;
            double t86090 = C_k*t86051*t86083*t86048*(5.0/3.0);
            double t86092 = t86048*t86087*t86088*t86089*(5.0/3.0);
            double t86091 = t86090-t86092+t86086;
            double t86093 = 1.0/(t86060*t86060);
            double t86094 = gamma_bb[index]*gx*t85948*8.0;
            double t86095 = gamma_bb[index]*gx*t86039*t86058*t86078*8.0;
            double t86096 = t86039*t86058*t86077*1.6E1;
            double t86097 = t86094+t86095+t86096;
            double t86098 = 1.0/(t86065*t86065);
            double t86099 = gamma_bb[index]*gx*t85948*(1.6E1/3.0);
            double t86100 = t86039*t86058*t86077*(1.6E1/3.0);
            double t86101 = t86100+t86099;
            double t86102 = 1.0/(t86069*t86069);
            double t86103 = t85915-t86038;
            double t86104 = gamma_bb[index]*gcaa*t85951;
            double t86105 = t86104+1.0;
            double t86106 = 1.0/t86105;
            double t86107 = gamma_bb[index]*gcaa*t85951*3.0;
            double t86108 = gamma_bb[index]*gcaa*t86040*t86041*t86039;
            double t86109 = t86040*t86042*t86039*3.0;
            double t86110 = t86107+t86108+t86109+1.0;
            double t86111 = 1.0/t86110;
            double t86112 = gamma_bb[index]*gcaa*t85951*2.0;
            double t86113 = t86040*t86042*t86039;
            double t86114 = t86112+t86113+1.0;
            double t86115 = 1.0/t86114;
            double t86116 = 1.0/t86022;
            double t86117 = 1.0/(t86019*t86019);
            double t86118 = b4f*t85878*t86024*(2.0/3.0);
            double t86119 = b2f*c*t86023*(1.0/3.0);
            double t86120 = b1f*c*t86023*t86025*(1.0/6.0);
            double t86121 = b3f*c*t85901*t86023*(1.0/2.0);
            double t86122 = t86120+t86121+t86118+t86119;
            double t86123 = a1f*c*c0f*t86023*t86026*(2.0/3.0);
            double t86124 = a1p*c*c0p*t85912*t86023*(2.0/3.0);
            double t86125 = ccaa1*gamma_bb[index]*gcaa*t85951*t86106;
            double t86126 = ccaa3*gamma_bb[index]*gcaa*t86111*t86040*t86041*t86039;
            double t86127 = ccaa2*t86040*t86042*t86115*t86039;
            double t86128 = ccaa0+t86125+t86126+t86127;
            v_rho_b_[index] = -t86103*t86128-(ccab0+ccab1*gcab*t85946*t85965+ccab2*t85945*t85963*t85947+ccab3* \
               gcab*t85945*t85946*t85964*t85947)*(-t85915+t85933+t86036+t86038+t85916*(t86012-t85944*t85938*t85939* \
               t85897*(t86012-(1.0/(t85971*t85971)*t85977*(b2f*c*t85966*(1.0/3.0)+b4f*t85983*t85878*(2.0/3.0)+b1f* \
               c*t85966*t85984*(1.0/6.0)+b3f*c*t85919*t85966*(1.0/2.0)))/t85974+a1f*c*c0f*t85966*t85975*(2.0/3.0) \
               -a1p*c*c0p*t85930*t85966*(2.0/3.0))-a1p*c*c0p*t85930*t85966*(2.0/3.0)+t85944*t85939*t85897*t85978* \
               t86005*4.0+t85938*t85939*t85897*t85978*t86009+t85934*t85935*t85944*t85938*t85897*t85978*4.0-Aa*t85944* \
               t85992*t85897*t86002*t86004*(t85939*t86005*4.0+t85934*t85935*t85938*4.0)*2.0-Aa*t85992*t85897*t86002* \
               t86011*t86004*t86009*2.0+(t85944*t85992*t85897*1.0/(t85998*t85998)*t86011*t86004*(b2a*c*t85966*(1.0/ \
               3.0)+b4a*t85983*t85878*(2.0/3.0)+b1a*c*t85966*t85984*(1.0/6.0)+b3a*c*t85919*t85966*(1.0/2.0)))/t86001- \
               Aa*a1a*c*t85944*t85992*t85966*t85897*t86002*t86011*(2.0/3.0))+rho_b[index]*(-t86034+t86124+t85894* \
               t85897*(t86123+t86034-t86014*t86122*t86116*t86117-a1p*c*c0p*t85912*t86023*(2.0/3.0)))-t85944*t85938* \
               t85939*t85897*t85978)-(c0*pow(rho_b[index],1.0/3.0)*(cx0+t86082*t86076+cx1*gamma_bb[index]*gx*t85951* \
               t86061+cx2*t86042*t86070*t86039*t86058+cx3*gamma_bb[index]*gx*t86041*t86039*t86066*t86058)*(4.0/3.0) \
               -c0*pow(rho_b[index],4.0/3.0)*(t86076*(cxnl1*gamma_bb[index]*gx*t85948*t86061*(8.0/3.0)+cxnl2*t86070* \
               t86039*t86058*t86077*(1.6E1/3.0)-cxnl1*t86039*t86093*t86058*t86077*(8.0/3.0)-cxnl2*t86101*t86102*t86042* \
               t86039*t86058+cxnl3*gamma_bb[index]*gx*t86039*t86066*t86058*t86078*8.0-cxnl3*gamma_bb[index]*gx*t86041* \
               t86039*t86058*t86097*t86098)-t86082*(t86071*t86091-t86054*t86091*1.0/(t86056*t86056)-t86055*t86073* \
               t86091*6.0+t86091*t86074*t86057*5.0+t86054*t86055*t86091*1.0/(t86056*t86056*t86056*t86056)*6.0-t86054* \
               t86091*1.0/(t86056*t86056*t86056*t86056*t86056*t86056)*t86057*5.0)+cx1*gamma_bb[index]*gx*t85948*t86061* \
               (8.0/3.0)-cx1*t86039*t86093*t86058*t86077*(8.0/3.0)+cx2*t86070*t86039*t86058*t86077*(1.6E1/3.0)-cx2* \
               t86101*t86102*t86042*t86039*t86058+cx3*gamma_bb[index]*gx*t86039*t86066*t86058*t86078*8.0-cx3*gamma_bb[index]* \
               gx*t86041*t86039*t86058*t86097*t86098))*(X-1.0)-(rho_b[index]*(t85915-t85894*t85897*t86035)+rho_a[index]* \
               (t85962-t85894*t85897*(t85962-c0f*log((t85898*(1.0/2.0))/(b1f*t85876+b3f*t85877+b2f*c*t85874+b4f*t85878* \
               t85879)+1.0)*(a1f*c*t85874+1.0)*2.0))-t85916*(t85933+t86036-t85944*t85938*t85939*t85897*t85978))*(ccab1* \
               gamma_bb[index]*gcab*t85965*t85948*(4.0/3.0)-ccab2*t85945*t85947*1.0/(t85957*t85957)*(gamma_bb[index]* \
               gcab*t85948*(8.0/3.0)+gamma_bb[index]*t85945*t85946*t85948*(8.0/3.0))-ccab1*gamma_bb[index]*t85945* \
               1.0/(t85954*t85954)*t85946*t85948*(4.0/3.0)+ccab2*gamma_bb[index]*t85945*t85963*t85946*t85948*(8.0/ \
               3.0)-ccab3*gcab*1.0/(t85961*t85961)*t85945*t85946*t85947*(gamma_bb[index]*gcab*t85948*4.0+gamma_bb[index]* \
               t85945*t85946*t85948*8.0+gamma_bb[index]*gcab*t85945*t85947*t85948*4.0)+ccab3*gamma_bb[index]*gcab* \
               t85945*t85964*t85947*t85948*4.0)+rho_b[index]*t86128*(-t86034+t86124+t85894*t85897*(t86123+t86034- \
               t86124-t86014*t86122*t86116*t86117))+rho_b[index]*t86103*(ccaa1*gamma_bb[index]*gcaa*t85948*t86106* \
               (8.0/3.0)+ccaa2*t86040*t86115*t86039*t86077*(1.6E1/3.0)-ccaa1*t86040*1.0/(t86105*t86105)*t86039*t86077* \
               (8.0/3.0)-ccaa2*t86040*t86042*1.0/(t86114*t86114)*t86039*(gamma_bb[index]*gcaa*t85948*(1.6E1/3.0)+ \
               t86040*t86039*t86077*(1.6E1/3.0))+ccaa3*gamma_bb[index]*gcaa*t86111*t86040*t86039*t86078*8.0-ccaa3* \
               gamma_bb[index]*gcaa*1.0/(t86110*t86110)*t86040*t86041*t86039*(gamma_bb[index]*gcaa*t85948*8.0+t86040* \
               t86039*t86077*1.6E1+gamma_bb[index]*gcaa*t86040*t86039*t86078*8.0));
        } else if (rho_a[index] > cutoff_) {
            v_rho_b_[index] = 0.0;
        } else if (rho_b[index] > cutoff_) {
            double t89512 = 1.0/pow(rho_b[index],1.0/3.0);
            double t89513 = c*t89512;
            double t89514 = sqrt(t89513);
            double t89515 = pow(t89513,3.0/2.0);
            double t89516 = c*c;
            double t89517 = 1.0/pow(rho_b[index],2.0/3.0);
            double t89518 = 1.0/c0p;
            double t89519 = b1p*t89514;
            double t89520 = b3p*t89515;
            double t89521 = b4p*t89516*t89517;
            double t89522 = b2p*c*t89512;
            double t89523 = t89520+t89521+t89522+t89519;
            double t89524 = 1.0/t89523;
            double t89525 = t89524*t89518*(1.0/2.0);
            double t89526 = t89525+1.0;
            double t89527 = log(t89526);
            double t89528 = a1p*c*t89512;
            double t89529 = t89528+1.0;
            double t89530 = 1.0/pow(rho_b[index],8.0/3.0);
            double t89531 = gamma_bb[index]*gamma_bb[index];
            double t89532 = gcaa*gcaa;
            double t89533 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
               rho_b[index]*rho_b[index]);
            double t89534 = 1.0/pow(rho_b[index],1.6E1/3.0);
            double t89535 = pow(2.0,1.0/3.0);
            double t89536 = t89535*2.0;
            double t89537 = t89536-2.0;
            double t89538 = two_13*2.0;
            double t89539 = t89538-2.0;
            double t89540 = 1.0/t89539;
            double t89541 = 1.0/c0f;
            double t89542 = b1f*t89514;
            double t89543 = b3f*t89515;
            double t89544 = b4f*t89516*t89517;
            double t89545 = b2f*c*t89512;
            double t89546 = t89542+t89543+t89544+t89545;
            double t89547 = 1.0/t89546;
            double t89548 = t89541*t89547*(1.0/2.0);
            double t89549 = t89548+1.0;
            double t89550 = log(t89549);
            double t89551 = a1f*c*t89512;
            double t89552 = t89551+1.0;
            double t89553 = c0f*t89550*t89552*2.0;
            double t89554 = c0p*t89527*t89529*2.0;
            double t89555 = gamma_bb[index]*gcaa*t89530;
            double t89556 = t89555+1.0;
            double t89557 = 1.0/t89556;
            double t89558 = gamma_bb[index]*gcaa*t89530*3.0;
            double t89559 = gamma_bb[index]*gcaa*t89531*t89532*t89533;
            double t89560 = t89531*t89532*t89534*3.0;
            double t89561 = t89560+t89558+t89559+1.0;
            double t89562 = 1.0/t89561;
            double t89563 = gamma_bb[index]*gcaa*t89530*2.0;
            double t89564 = t89531*t89532*t89534;
            double t89565 = t89563+t89564+1.0;
            double t89566 = 1.0/t89565;
            double t89567 = 1.0/pow(rho_b[index],1.9E1/3.0);
            double t89568 = 1.0/pow(rho_b[index],1.1E1/3.0);
            double t89569 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
               rho_b[index]*rho_b[index]*rho_b[index]);
            double t89570 = 1.0/pow(rho_b[index],4.0/3.0);
            double t89571 = 1.0/pow(rho_b[index],5.0/3.0);
            double t89572 = 1.0/sqrt(t89513);
            double t89573 = 1.0/t89526;
            double t89574 = 1.0/(t89523*t89523);
            double t89575 = b4p*t89516*t89571*(2.0/3.0);
            double t89576 = b2p*c*t89570*(1.0/3.0);
            double t89577 = b1p*c*t89570*t89572*(1.0/6.0);
            double t89578 = b3p*c*t89514*t89570*(1.0/2.0);
            double t89579 = t89575+t89576+t89577+t89578;
            double t89580 = t89573*t89529*t89574*t89579;
            double t89581 = ccaa1*gamma_bb[index]*gcaa*t89530*t89557;
            double t89582 = ccaa3*gamma_bb[index]*gcaa*t89531*t89532*t89533*t89562;
            double t89583 = ccaa2*t89531*t89532*t89534*t89566;
            double t89584 = ccaa0+t89581+t89582+t89583;
            double t89585 = pow(rho_b[index],5.0/3.0);
            double t89586 = C_k*t89585;
            double t89595 = tau_a[index]*1.0E20;
            double t89587 = t89586-t89595;
            double t89588 = ( (t89587 > 0.0) ?  1.0 : 0.0 ) ;
            double t89589 = t89588*1.0E20;
            double t89590 = 1.0/tau_b[index];
            double t89591 = tau_b[index]*1.0E20;
            double t89592 = t89591-t89586;
            double t89593 = ( (t89592 > 0.0) ?  1.0 : 0.0 ) ;
            double t89594 = C_k*t89590*t89593*t89585;
            double t89596 = t89594+t89589-1.0;
            double t89597 = t89596*t89596;
            double t89598 = t89594+t89589+1.0;
            double t89599 = t89597*t89597;
            double t89600 = gx*gx;
            double t89601 = gamma_bb[index]*gx*t89530;
            double t89602 = t89601+1.0;
            double t89603 = 1.0/t89602;
            double t89604 = gamma_bb[index]*gx*t89530*3.0;
            double t89605 = gamma_bb[index]*gx*t89600*t89531*t89533;
            double t89606 = t89600*t89531*t89534*3.0;
            double t89607 = t89604+t89605+t89606+1.0;
            double t89608 = 1.0/t89607;
            double t89609 = gamma_bb[index]*gx*t89530*2.0;
            double t89610 = t89600*t89531*t89534;
            double t89611 = t89610+t89609+1.0;
            double t89612 = 1.0/t89611;
            double t89613 = X-1.0;
            double t89614 = 1.0/t89598;
            double t89615 = t89614*t89596;
            double t89616 = 1.0/(t89598*t89598*t89598);
            double t89617 = 1.0/(t89598*t89598*t89598*t89598*t89598);
            double t89618 = t89617*t89596*t89599;
            double t89619 = t89615+t89618-t89616*t89596*t89597*2.0;
            double t89620 = cxnl1*gamma_bb[index]*gx*t89530*t89603;
            double t89621 = cxnl3*gamma_bb[index]*gx*t89600*t89531*t89533*t89608;
            double t89622 = cxnl2*t89600*t89531*t89612*t89534;
            double t89623 = cxnl0+t89620+t89621+t89622;
            double t89624 = pow(rho_b[index],2.0/3.0);
            double t89625 = -t89586+t89595;
            double t89626 = 0.0 ;
            double t89627 = C_k*t89624*t89626*(5.0E20/3.0);
            double t89628 = C_k*C_k;
            double t89629 = pow(rho_b[index],7.0/3.0);
            double t89630 = 0.0 ;
            double t89631 = C_k*t89624*t89590*t89593*(5.0/3.0);
            double t89633 = t89630*t89590*t89628*t89629*(5.0/3.0);
            double t89632 = t89631-t89633+t89627;
            double t89634 = 1.0/(t89602*t89602);
            double t89635 = gamma_bb[index]*gx*t89568*8.0;
            double t89636 = gamma_bb[index]*gx*t89600*t89531*t89569*8.0;
            double t89637 = t89600*t89531*t89567*1.6E1;
            double t89638 = t89635+t89636+t89637;
            double t89639 = 1.0/(t89607*t89607);
            double t89640 = gamma_bb[index]*gx*t89568*(1.6E1/3.0);
            double t89641 = t89600*t89531*t89567*(1.6E1/3.0);
            double t89642 = t89640+t89641;
            double t89643 = 1.0/(t89611*t89611);
            v_rho_b_[index] = -t89584*(t89554+t89540*t89537*(t89553-c0p*t89527*t89529*2.0))+rho_b[index]*(t89554+ \
               t89540*t89537*(t89553-t89554))*(ccaa1*gamma_bb[index]*gcaa*t89557*t89568*(8.0/3.0)+ccaa2*t89531*t89532* \
               t89566*t89567*(1.6E1/3.0)-ccaa1*t89531*t89532*1.0/(t89556*t89556)*t89567*(8.0/3.0)-ccaa2*t89531*t89532* \
               t89534*1.0/(t89565*t89565)*(gamma_bb[index]*gcaa*t89568*(1.6E1/3.0)+t89531*t89532*t89567*(1.6E1/3.0) \
               )+ccaa3*gamma_bb[index]*gcaa*t89531*t89532*t89562*t89569*8.0-ccaa3*gamma_bb[index]*gcaa*t89531*t89532* \
               t89533*1.0/(t89561*t89561)*(gamma_bb[index]*gcaa*t89568*8.0+t89531*t89532*t89567*1.6E1+gamma_bb[index]* \
               gcaa*t89531*t89532*t89569*8.0))+rho_b[index]*t89584*(-t89580+t89540*t89537*(t89580-(t89552*1.0/(t89546* \
               t89546)*(b2f*c*t89570*(1.0/3.0)+b4f*t89516*t89571*(2.0/3.0)+b1f*c*t89570*t89572*(1.0/6.0)+b3f*c*t89514* \
               t89570*(1.0/2.0)))/t89549+a1f*c*c0f*t89550*t89570*(2.0/3.0)-a1p*c*c0p*t89570*t89527*(2.0/3.0))+a1p* \
               c*c0p*t89570*t89527*(2.0/3.0))-c0*pow(rho_b[index],1.0/3.0)*t89613*(cx0+t89623*t89619+cx1*gamma_bb[index]* \
               gx*t89530*t89603+cx2*t89600*t89531*t89612*t89534+cx3*gamma_bb[index]*gx*t89600*t89531*t89533*t89608) \
               *(4.0/3.0)+c0*pow(rho_b[index],4.0/3.0)*t89613*(t89619*(cxnl1*gamma_bb[index]*gx*t89603*t89568*(8.0/ \
               3.0)+cxnl2*t89600*t89531*t89612*t89567*(1.6E1/3.0)-cxnl1*t89600*t89531*t89634*t89567*(8.0/3.0)-cxnl2* \
               t89600*t89531*t89534*t89642*t89643+cxnl3*gamma_bb[index]*gx*t89600*t89531*t89608*t89569*8.0-cxnl3* \
               gamma_bb[index]*gx*t89600*t89531*t89533*t89638*t89639)-t89623*(t89614*t89632-t89632*t89596*1.0/(t89598* \
               t89598)-t89632*t89616*t89597*6.0+t89632*t89617*t89599*5.0+t89632*t89596*t89597*1.0/(t89598*t89598* \
               t89598*t89598)*6.0-t89632*t89596*1.0/(t89598*t89598*t89598*t89598*t89598*t89598)*t89599*5.0)+cx1*gamma_bb[index]* \
               gx*t89603*t89568*(8.0/3.0)-cx1*t89600*t89531*t89634*t89567*(8.0/3.0)+cx2*t89600*t89531*t89612*t89567* \
               (1.6E1/3.0)-cx2*t89600*t89531*t89534*t89642*t89643+cx3*gamma_bb[index]*gx*t89600*t89531*t89608*t89569* \
               8.0-cx3*gamma_bb[index]*gx*t89600*t89531*t89533*t89638*t89639);
        } else {
            v_rho_b_[index] = 0.0;
        }

        if (is_gga_) {

            //V_gamma_aa
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t86130 = 1.0/pow(rho_a[index],1.0/3.0);
                double t86131 = c*t86130;
                double t86132 = sqrt(t86131);
                double t86133 = pow(t86131,3.0/2.0);
                double t86134 = c*c;
                double t86135 = 1.0/pow(rho_a[index],2.0/3.0);
                double t86136 = 1.0/c0p;
                double t86137 = b1p*t86132;
                double t86138 = b3p*t86133;
                double t86139 = b4p*t86134*t86135;
                double t86140 = b2p*c*t86130;
                double t86141 = t86140+t86137+t86138+t86139;
                double t86142 = 1.0/t86141;
                double t86143 = t86142*t86136*(1.0/2.0);
                double t86144 = t86143+1.0;
                double t86145 = log(t86144);
                double t86146 = a1p*c*t86130;
                double t86147 = t86146+1.0;
                double t86148 = pow(2.0,1.0/3.0);
                double t86149 = t86148*2.0;
                double t86150 = t86149-2.0;
                double t86151 = two_13*2.0;
                double t86152 = t86151-2.0;
                double t86153 = 1.0/t86152;
                double t86154 = 1.0/c0f;
                double t86155 = 1.0/pow(rho_b[index],1.0/3.0);
                double t86156 = c*t86155;
                double t86157 = sqrt(t86156);
                double t86158 = pow(t86156,3.0/2.0);
                double t86159 = 1.0/pow(rho_b[index],2.0/3.0);
                double t86160 = b1p*t86157;
                double t86161 = b3p*t86158;
                double t86162 = b4p*t86134*t86159;
                double t86163 = b2p*c*t86155;
                double t86164 = t86160+t86161+t86162+t86163;
                double t86165 = 1.0/t86164;
                double t86166 = t86136*t86165*(1.0/2.0);
                double t86167 = t86166+1.0;
                double t86168 = log(t86167);
                double t86169 = a1p*c*t86155;
                double t86170 = t86169+1.0;
                double t86171 = c0p*t86170*t86168*2.0;
                double t86172 = rho_a[index]+rho_b[index];
                double t86173 = 1.0/pow(t86172,1.0/3.0);
                double t86174 = c*t86173;
                double t86175 = sqrt(t86174);
                double t86176 = pow(t86174,3.0/2.0);
                double t86177 = 1.0/pow(t86172,2.0/3.0);
                double t86178 = b1p*t86175;
                double t86179 = b3p*t86176;
                double t86180 = b4p*t86134*t86177;
                double t86181 = b2p*c*t86173;
                double t86182 = t86180+t86181+t86178+t86179;
                double t86183 = 1.0/t86182;
                double t86184 = t86136*t86183*(1.0/2.0);
                double t86185 = t86184+1.0;
                double t86186 = log(t86185);
                double t86187 = a1p*c*t86173;
                double t86188 = t86187+1.0;
                double t86189 = c0p*t86186*t86188*2.0;
                double t86190 = rho_a[index]-rho_b[index];
                double t86191 = t86190*t86190;
                double t86192 = 1.0/t86172;
                double t86193 = t86190*t86192;
                double t86194 = 1.0/(t86172*t86172*t86172*t86172);
                double t86195 = t86191*t86191;
                double t86196 = t86193+1.0;
                double t86197 = pow(t86196,4.0/3.0);
                double t86198 = -t86193+1.0;
                double t86199 = pow(t86198,4.0/3.0);
                double t86200 = t86197+t86199-2.0;
                double t86201 = 1.0/pow(rho_a[index],8.0/3.0);
                double t86202 = gamma_aa[index]*t86201*(1.0/2.0);
                double t86203 = 1.0/pow(rho_b[index],8.0/3.0);
                double t86204 = gamma_bb[index]*t86203*(1.0/2.0);
                double t86205 = t86202+t86204;
                double t86206 = gcab*t86205;
                double t86207 = t86206+1.0;
                double t86208 = gcab*gcab;
                double t86209 = t86205*t86205;
                double t86210 = t86208*t86209;
                double t86211 = gcab*t86205*2.0;
                double t86212 = t86210+t86211+1.0;
                double t86213 = t86208*t86209*3.0;
                double t86214 = gcab*t86205*t86208*t86209;
                double t86215 = gcab*t86205*3.0;
                double t86216 = t86213+t86214+t86215+1.0;
                double t86217 = c0p*t86145*t86147*2.0;
                double t86218 = b1f*t86132;
                double t86219 = b3f*t86133;
                double t86220 = b4f*t86134*t86135;
                double t86221 = b2f*c*t86130;
                double t86222 = t86220+t86221+t86218+t86219;
                double t86223 = 1.0/t86222;
                double t86224 = t86223*t86154*(1.0/2.0);
                double t86225 = t86224+1.0;
                double t86226 = log(t86225);
                double t86227 = a1f*c*t86130;
                double t86228 = t86227+1.0;
                double t86229 = t86217-c0f*t86226*t86228*2.0;
                double t86230 = t86217-t86150*t86153*t86229;
                double t86231 = gcaa*gcaa;
                double t86232 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t86233 = gamma_aa[index]*gamma_aa[index];
                double t86234 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t86235 = gamma_aa[index]*gcaa*t86201;
                double t86236 = t86235+1.0;
                double t86237 = gamma_aa[index]*gcaa*t86201*3.0;
                double t86238 = gamma_aa[index]*gcaa*t86231*t86233*t86234;
                double t86239 = t86231*t86232*t86233*3.0;
                double t86240 = t86237+t86238+t86239+1.0;
                double t86241 = gamma_aa[index]*gcaa*t86201*2.0;
                double t86242 = t86231*t86232*t86233;
                double t86243 = t86241+t86242+1.0;
                double t86244 = pow(rho_a[index],5.0/3.0);
                double t86245 = C_k*t86244;
                double t86246 = tau_a[index]*1.0E20;
                double t86247 = 1.0/tau_a[index];
                double t86248 = -t86245+t86246;
                double t86249 = ( (t86248 > 0.0) ?  1.0 : 0.0 ) ;
                double t86250 = C_k*t86244*t86247*t86249;
                double t86251 = t86245-t86246;
                double t86252 = ( (t86251 > 0.0) ?  1.0 : 0.0 ) ;
                double t86253 = t86252*1.0E20;
                double t86254 = t86250+t86253-1.0;
                double t86255 = t86254*t86254;
                double t86256 = t86250+t86253+1.0;
                double t86257 = t86255*t86255;
                double t86258 = gx*gx;
                double t86259 = gamma_aa[index]*gx*t86201;
                double t86260 = t86259+1.0;
                double t86261 = gamma_aa[index]*gx*t86201*3.0;
                double t86262 = gamma_aa[index]*gx*t86233*t86234*t86258;
                double t86263 = t86232*t86233*t86258*3.0;
                double t86264 = t86261+t86262+t86263+1.0;
                double t86265 = gamma_aa[index]*gx*t86201*2.0;
                double t86266 = t86232*t86233*t86258;
                double t86267 = t86265+t86266+1.0;
                double t86268 = 1.0/t86260;
                double t86269 = 1.0/t86267;
                double t86270 = 1.0/t86264;
                double t86271 = 1.0/(t86260*t86260);
                double t86272 = gx*t86201*3.0;
                double t86273 = gamma_aa[index]*t86232*t86258*6.0;
                double t86274 = gx*t86233*t86234*t86258*3.0;
                double t86275 = t86272+t86273+t86274;
                double t86276 = 1.0/(t86264*t86264);
                double t86277 = gx*t86201*2.0;
                double t86278 = gamma_aa[index]*t86232*t86258*2.0;
                double t86279 = t86277+t86278;
                double t86280 = 1.0/(t86267*t86267);
                v_gamma_aa_[index] = (rho_a[index]*t86230+rho_b[index]*(t86171-t86150*t86153*(t86171-c0f*log((t86154* \
                   (1.0/2.0))/(b1f*t86157+b3f*t86158+b2f*c*t86155+b4f*t86134*t86159)+1.0)*(a1f*c*t86155+1.0)*2.0))-t86172* \
                   (t86189-t86200*t86153*t86194*t86195*(t86189-c0f*log((t86154*(1.0/2.0))/(b1f*t86175+b3f*t86176+b2f* \
                   c*t86173+b4f*t86134*t86177)+1.0)*(a1f*c*t86173+1.0)*2.0)+(Aa*t86200*t86153*log((1.0/2.0)/(Aa*(b1a* \
                   t86175+b3a*t86176+b2a*c*t86173+b4a*t86134*t86177))+1.0)*(t86194*t86195-1.0)*(a1a*c*t86173+1.0)*2.0) \
                   /d2fz0))*((ccab1*gcab*t86201*(1.0/2.0))/t86207-ccab2*1.0/(t86212*t86212)*t86208*t86209*(gcab*t86201+ \
                   t86201*t86205*t86208)+(ccab2*t86201*t86205*t86208)/t86212-ccab1*t86201*t86205*1.0/(t86207*t86207)* \
                   t86208*(1.0/2.0)+(ccab3*gcab*t86201*t86208*t86209*(3.0/2.0))/t86216-ccab3*gcab*t86205*1.0/(t86216* \
                   t86216)*t86208*t86209*(gcab*t86201*(3.0/2.0)+t86201*t86205*t86208*3.0+gcab*t86201*t86208*t86209*(3.0/ \
                   2.0)))-rho_a[index]*t86230*((ccaa1*gcaa*t86201)/t86236+(ccaa2*gamma_aa[index]*t86231*t86232*2.0)/t86243- \
                   ccaa1*gamma_aa[index]*t86231*t86232*1.0/(t86236*t86236)-ccaa2*t86231*t86232*t86233*1.0/(t86243*t86243) \
                   *(gcaa*t86201*2.0+gamma_aa[index]*t86231*t86232*2.0)+(ccaa3*gcaa*t86231*t86233*t86234*3.0)/t86240- \
                   ccaa3*gamma_aa[index]*gcaa*t86231*1.0/(t86240*t86240)*t86233*t86234*(gcaa*t86201*3.0+gamma_aa[index]* \
                   t86231*t86232*6.0+gcaa*t86231*t86233*t86234*3.0))-c0*pow(rho_a[index],4.0/3.0)*(X-1.0)*((t86254/t86256- \
                   t86254*t86255*1.0/(t86256*t86256*t86256)*2.0+t86254*1.0/(t86256*t86256*t86256*t86256*t86256)*t86257) \
                   *(cxnl1*gx*t86201*t86268-cxnl1*gamma_aa[index]*t86232*t86271*t86258+cxnl2*gamma_aa[index]*t86232*t86258* \
                   t86269*2.0-cxnl2*t86232*t86233*t86280*t86258*t86279+cxnl3*gx*t86233*t86234*t86270*t86258*3.0-cxnl3* \
                   gamma_aa[index]*gx*t86233*t86234*t86275*t86258*t86276)+cx1*gx*t86201*t86268-cx1*gamma_aa[index]*t86232* \
                   t86271*t86258+cx2*gamma_aa[index]*t86232*t86258*t86269*2.0-cx2*t86232*t86233*t86280*t86258*t86279+ \
                   cx3*gx*t86233*t86234*t86270*t86258*3.0-cx3*gamma_aa[index]*gx*t86233*t86234*t86275*t86258*t86276);
            } else if (rho_a[index] > cutoff_) {
                double t90730 = 1.0/pow(rho_a[index],1.0/3.0);
                double t90731 = c*t90730;
                double t90732 = sqrt(t90731);
                double t90733 = pow(t90731,3.0/2.0);
                double t90734 = c*c;
                double t90735 = 1.0/pow(rho_a[index],2.0/3.0);
                double t90736 = 1.0/c0p;
                double t90737 = b1p*t90732;
                double t90738 = b3p*t90733;
                double t90739 = b4p*t90734*t90735;
                double t90740 = b2p*c*t90730;
                double t90741 = t90740+t90737+t90738+t90739;
                double t90742 = 1.0/t90741;
                double t90743 = t90742*t90736*(1.0/2.0);
                double t90744 = t90743+1.0;
                double t90745 = log(t90744);
                double t90746 = a1p*c*t90730;
                double t90747 = t90746+1.0;
                double t90748 = 1.0/pow(rho_a[index],8.0/3.0);
                double t90749 = gcaa*gcaa;
                double t90750 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t90751 = gamma_aa[index]*gamma_aa[index];
                double t90752 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t90753 = gamma_aa[index]*gcaa*t90748;
                double t90754 = t90753+1.0;
                double t90755 = gamma_aa[index]*gcaa*t90748*3.0;
                double t90756 = gamma_aa[index]*gcaa*t90751*t90752*t90749;
                double t90757 = t90750*t90751*t90749*3.0;
                double t90758 = t90755+t90756+t90757+1.0;
                double t90759 = gamma_aa[index]*gcaa*t90748*2.0;
                double t90760 = t90750*t90751*t90749;
                double t90761 = t90760+t90759+1.0;
                double t90762 = pow(rho_a[index],5.0/3.0);
                double t90763 = C_k*t90762;
                double t90764 = tau_a[index]*1.0E20;
                double t90765 = 1.0/tau_a[index];
                double t90766 = -t90763+t90764;
                double t90767 = ( (t90766 > 0.0) ?  1.0 : 0.0 ) ;
                double t90768 = C_k*t90762*t90765*t90767;
                double t90769 = t90763-t90764;
                double t90770 = ( (t90769 > 0.0) ?  1.0 : 0.0 ) ;
                double t90771 = t90770*1.0E20;
                double t90772 = t90771+t90768-1.0;
                double t90773 = t90772*t90772;
                double t90774 = t90771+t90768+1.0;
                double t90775 = t90773*t90773;
                double t90776 = gx*gx;
                double t90777 = gamma_aa[index]*gx*t90748;
                double t90778 = t90777+1.0;
                double t90779 = gamma_aa[index]*gx*t90748*3.0;
                double t90780 = gamma_aa[index]*gx*t90751*t90752*t90776;
                double t90781 = t90750*t90751*t90776*3.0;
                double t90782 = t90780+t90781+t90779+1.0;
                double t90783 = gamma_aa[index]*gx*t90748*2.0;
                double t90784 = t90750*t90751*t90776;
                double t90785 = t90783+t90784+1.0;
                double t90786 = 1.0/t90778;
                double t90787 = 1.0/t90785;
                double t90788 = 1.0/t90782;
                double t90789 = 1.0/(t90778*t90778);
                double t90790 = gx*t90748*3.0;
                double t90791 = gamma_aa[index]*t90750*t90776*6.0;
                double t90792 = gx*t90751*t90752*t90776*3.0;
                double t90793 = t90790+t90791+t90792;
                double t90794 = 1.0/(t90782*t90782);
                double t90795 = gx*t90748*2.0;
                double t90796 = gamma_aa[index]*t90750*t90776*2.0;
                double t90797 = t90795+t90796;
                double t90798 = 1.0/(t90785*t90785);
                v_gamma_aa_[index] = -rho_a[index]*(((pow(2.0,1.0/3.0)*2.0-2.0)*(c0f*log((1.0/2.0)/(c0f*(b1f*t90732+ \
                   b3f*t90733+b2f*c*t90730+b4f*t90734*t90735))+1.0)*(a1f*c*t90730+1.0)*2.0-c0p*t90745*t90747*2.0))/(two_13* \
                   2.0-2.0)+c0p*t90745*t90747*2.0)*((ccaa1*gcaa*t90748)/t90754+(ccaa2*gamma_aa[index]*t90750*t90749*2.0) \
                   /t90761-ccaa1*gamma_aa[index]*t90750*1.0/(t90754*t90754)*t90749-ccaa2*t90750*t90751*1.0/(t90761*t90761) \
                   *t90749*(gcaa*t90748*2.0+gamma_aa[index]*t90750*t90749*2.0)+(ccaa3*gcaa*t90751*t90752*t90749*3.0)/ \
                   t90758-ccaa3*gamma_aa[index]*gcaa*t90751*t90752*t90749*1.0/(t90758*t90758)*(gcaa*t90748*3.0+gamma_aa[index]* \
                   t90750*t90749*6.0+gcaa*t90751*t90752*t90749*3.0))-c0*pow(rho_a[index],4.0/3.0)*(X-1.0)*((t90772/t90774- \
                   t90772*t90773*1.0/(t90774*t90774*t90774)*2.0+t90772*1.0/(t90774*t90774*t90774*t90774*t90774)*t90775) \
                   *(cxnl1*gx*t90748*t90786+cxnl2*gamma_aa[index]*t90750*t90776*t90787*2.0-cxnl1*gamma_aa[index]*t90750* \
                   t90776*t90789-cxnl2*t90750*t90751*t90776*t90797*t90798+cxnl3*gx*t90751*t90752*t90776*t90788*3.0-cxnl3* \
                   gamma_aa[index]*gx*t90751*t90752*t90793*t90776*t90794)+cx1*gx*t90748*t90786-cx1*gamma_aa[index]*t90750* \
                   t90776*t90789+cx2*gamma_aa[index]*t90750*t90776*t90787*2.0-cx2*t90750*t90751*t90776*t90797*t90798+ \
                   cx3*gx*t90751*t90752*t90776*t90788*3.0-cx3*gamma_aa[index]*gx*t90751*t90752*t90793*t90776*t90794);
            } else if (rho_b[index] > cutoff_) {
                v_gamma_aa_[index] = 0.0;
            } else {
                v_gamma_aa_[index] = 0.0;
            }

            //V_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_ab_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_ab_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_ab_[index] = 0.0;
            } else {
                v_gamma_ab_[index] = 0.0;
            }

            //V_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t86283 = 1.0/pow(rho_a[index],1.0/3.0);
                double t86284 = c*t86283;
                double t86285 = sqrt(t86284);
                double t86286 = pow(t86284,3.0/2.0);
                double t86287 = c*c;
                double t86288 = 1.0/pow(rho_a[index],2.0/3.0);
                double t86289 = 1.0/c0p;
                double t86290 = b1p*t86285;
                double t86291 = b3p*t86286;
                double t86292 = b4p*t86287*t86288;
                double t86293 = b2p*c*t86283;
                double t86294 = t86290+t86291+t86292+t86293;
                double t86295 = 1.0/t86294;
                double t86296 = t86295*t86289*(1.0/2.0);
                double t86297 = t86296+1.0;
                double t86298 = log(t86297);
                double t86299 = a1p*c*t86283;
                double t86300 = t86299+1.0;
                double t86301 = pow(2.0,1.0/3.0);
                double t86302 = t86301*2.0;
                double t86303 = t86302-2.0;
                double t86304 = two_13*2.0;
                double t86305 = t86304-2.0;
                double t86306 = 1.0/t86305;
                double t86307 = 1.0/c0f;
                double t86308 = 1.0/pow(rho_b[index],1.0/3.0);
                double t86309 = c*t86308;
                double t86310 = sqrt(t86309);
                double t86311 = pow(t86309,3.0/2.0);
                double t86312 = 1.0/pow(rho_b[index],2.0/3.0);
                double t86313 = b1p*t86310;
                double t86314 = b3p*t86311;
                double t86315 = b4p*t86312*t86287;
                double t86316 = b2p*c*t86308;
                double t86317 = t86313+t86314+t86315+t86316;
                double t86318 = 1.0/t86317;
                double t86319 = t86318*t86289*(1.0/2.0);
                double t86320 = t86319+1.0;
                double t86321 = log(t86320);
                double t86322 = a1p*c*t86308;
                double t86323 = t86322+1.0;
                double t86324 = c0p*t86321*t86323*2.0;
                double t86325 = rho_a[index]+rho_b[index];
                double t86326 = 1.0/pow(t86325,1.0/3.0);
                double t86327 = c*t86326;
                double t86328 = sqrt(t86327);
                double t86329 = pow(t86327,3.0/2.0);
                double t86330 = 1.0/pow(t86325,2.0/3.0);
                double t86331 = b1p*t86328;
                double t86332 = b3p*t86329;
                double t86333 = b4p*t86330*t86287;
                double t86334 = b2p*c*t86326;
                double t86335 = t86331+t86332+t86333+t86334;
                double t86336 = 1.0/t86335;
                double t86337 = t86336*t86289*(1.0/2.0);
                double t86338 = t86337+1.0;
                double t86339 = log(t86338);
                double t86340 = a1p*c*t86326;
                double t86341 = t86340+1.0;
                double t86342 = c0p*t86341*t86339*2.0;
                double t86343 = rho_a[index]-rho_b[index];
                double t86344 = t86343*t86343;
                double t86345 = 1.0/t86325;
                double t86346 = t86343*t86345;
                double t86347 = 1.0/(t86325*t86325*t86325*t86325);
                double t86348 = t86344*t86344;
                double t86349 = t86346+1.0;
                double t86350 = pow(t86349,4.0/3.0);
                double t86351 = -t86346+1.0;
                double t86352 = pow(t86351,4.0/3.0);
                double t86353 = t86350+t86352-2.0;
                double t86354 = 1.0/pow(rho_b[index],8.0/3.0);
                double t86355 = 1.0/pow(rho_a[index],8.0/3.0);
                double t86356 = gamma_aa[index]*t86355*(1.0/2.0);
                double t86357 = gamma_bb[index]*t86354*(1.0/2.0);
                double t86358 = t86356+t86357;
                double t86359 = gcab*t86358;
                double t86360 = t86359+1.0;
                double t86361 = gcab*gcab;
                double t86362 = t86358*t86358;
                double t86363 = t86361*t86362;
                double t86364 = gcab*t86358*2.0;
                double t86365 = t86363+t86364+1.0;
                double t86366 = t86361*t86362*3.0;
                double t86367 = gcab*t86361*t86362*t86358;
                double t86368 = gcab*t86358*3.0;
                double t86369 = t86366+t86367+t86368+1.0;
                double t86370 = c0p*t86300*t86298*2.0;
                double t86371 = b1f*t86310;
                double t86372 = b3f*t86311;
                double t86373 = b4f*t86312*t86287;
                double t86374 = b2f*c*t86308;
                double t86375 = t86371+t86372+t86373+t86374;
                double t86376 = 1.0/t86375;
                double t86377 = t86307*t86376*(1.0/2.0);
                double t86378 = t86377+1.0;
                double t86379 = log(t86378);
                double t86380 = a1f*c*t86308;
                double t86381 = t86380+1.0;
                double t86382 = t86324-c0f*t86381*t86379*2.0;
                double t86383 = t86324-t86303*t86306*t86382;
                double t86384 = gcaa*gcaa;
                double t86385 = 1.0/pow(rho_b[index],1.6E1/3.0);
                double t86386 = gamma_bb[index]*gamma_bb[index];
                double t86387 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]);
                double t86388 = gamma_bb[index]*gcaa*t86354;
                double t86389 = t86388+1.0;
                double t86390 = gamma_bb[index]*gcaa*t86354*3.0;
                double t86391 = gamma_bb[index]*gcaa*t86384*t86386*t86387;
                double t86392 = t86384*t86385*t86386*3.0;
                double t86393 = t86390+t86391+t86392+1.0;
                double t86394 = gamma_bb[index]*gcaa*t86354*2.0;
                double t86395 = t86384*t86385*t86386;
                double t86396 = t86394+t86395+1.0;
                double t86397 = pow(rho_b[index],5.0/3.0);
                double t86398 = C_k*t86397;
                double t86407 = tau_a[index]*1.0E20;
                double t86399 = -t86407+t86398;
                double t86400 = ( (t86399 > 0.0) ?  1.0 : 0.0 ) ;
                double t86401 = t86400*1.0E20;
                double t86402 = 1.0/tau_b[index];
                double t86403 = tau_b[index]*1.0E20;
                double t86404 = t86403-t86398;
                double t86405 = ( (t86404 > 0.0) ?  1.0 : 0.0 ) ;
                double t86406 = C_k*t86402*t86405*t86397;
                double t86408 = t86401+t86406-1.0;
                double t86409 = t86408*t86408;
                double t86410 = t86401+t86406+1.0;
                double t86411 = t86409*t86409;
                double t86412 = gx*gx;
                double t86413 = gamma_bb[index]*gx*t86354;
                double t86414 = t86413+1.0;
                double t86415 = gamma_bb[index]*gx*t86354*3.0;
                double t86416 = gamma_bb[index]*gx*t86412*t86386*t86387;
                double t86417 = t86412*t86385*t86386*3.0;
                double t86418 = t86415+t86416+t86417+1.0;
                double t86419 = gamma_bb[index]*gx*t86354*2.0;
                double t86420 = t86412*t86385*t86386;
                double t86421 = t86420+t86419+1.0;
                double t86422 = 1.0/t86414;
                double t86423 = 1.0/t86421;
                double t86424 = 1.0/t86418;
                double t86425 = 1.0/(t86414*t86414);
                double t86426 = gx*t86354*3.0;
                double t86427 = gamma_bb[index]*t86412*t86385*6.0;
                double t86428 = gx*t86412*t86386*t86387*3.0;
                double t86429 = t86426+t86427+t86428;
                double t86430 = 1.0/(t86418*t86418);
                double t86431 = gx*t86354*2.0;
                double t86432 = gamma_bb[index]*t86412*t86385*2.0;
                double t86433 = t86431+t86432;
                double t86434 = 1.0/(t86421*t86421);
                v_gamma_bb_[index] = (rho_b[index]*t86383+rho_a[index]*(t86370-t86303*t86306*(t86370-c0f*log((t86307* \
                   (1.0/2.0))/(b1f*t86285+b3f*t86286+b2f*c*t86283+b4f*t86287*t86288)+1.0)*(a1f*c*t86283+1.0)*2.0))-t86325* \
                   (t86342-t86306*t86353*t86347*t86348*(t86342-c0f*log((t86307*(1.0/2.0))/(b1f*t86328+b3f*t86329+b2f* \
                   c*t86326+b4f*t86330*t86287)+1.0)*(a1f*c*t86326+1.0)*2.0)+(Aa*t86306*t86353*log((1.0/2.0)/(Aa*(b1a* \
                   t86328+b3a*t86329+b2a*c*t86326+b4a*t86330*t86287))+1.0)*(t86347*t86348-1.0)*(a1a*c*t86326+1.0)*2.0) \
                   /d2fz0))*((ccab1*gcab*t86354*(1.0/2.0))/t86360-ccab2*t86361*t86362*1.0/(t86365*t86365)*(gcab*t86354+ \
                   t86361*t86354*t86358)-ccab1*1.0/(t86360*t86360)*t86361*t86354*t86358*(1.0/2.0)+(ccab2*t86361*t86354* \
                   t86358)/t86365+(ccab3*gcab*t86361*t86362*t86354*(3.0/2.0))/t86369-ccab3*gcab*t86361*t86362*t86358* \
                   1.0/(t86369*t86369)*(gcab*t86354*(3.0/2.0)+t86361*t86354*t86358*3.0+gcab*t86361*t86362*t86354*(3.0/ \
                   2.0)))-rho_b[index]*t86383*((ccaa1*gcaa*t86354)/t86389+(ccaa2*gamma_bb[index]*t86384*t86385*2.0)/t86396- \
                   ccaa1*gamma_bb[index]*t86384*t86385*1.0/(t86389*t86389)-ccaa2*t86384*t86385*t86386*1.0/(t86396*t86396) \
                   *(gcaa*t86354*2.0+gamma_bb[index]*t86384*t86385*2.0)+(ccaa3*gcaa*t86384*t86386*t86387*3.0)/t86393- \
                   ccaa3*gamma_bb[index]*gcaa*t86384*1.0/(t86393*t86393)*t86386*t86387*(gcaa*t86354*3.0+gamma_bb[index]* \
                   t86384*t86385*6.0+gcaa*t86384*t86386*t86387*3.0))-c0*pow(rho_b[index],4.0/3.0)*(X-1.0)*((t86408/t86410+ \
                   1.0/(t86410*t86410*t86410*t86410*t86410)*t86411*t86408-1.0/(t86410*t86410*t86410)*t86408*t86409*2.0) \
                   *(cxnl1*gx*t86422*t86354+cxnl2*gamma_bb[index]*t86412*t86423*t86385*2.0-cxnl1*gamma_bb[index]*t86412* \
                   t86425*t86385-cxnl2*t86412*t86433*t86434*t86385*t86386+cxnl3*gx*t86412*t86424*t86386*t86387*3.0-cxnl3* \
                   gamma_bb[index]*gx*t86412*t86430*t86429*t86386*t86387)+cx1*gx*t86422*t86354-cx1*gamma_bb[index]*t86412* \
                   t86425*t86385+cx2*gamma_bb[index]*t86412*t86423*t86385*2.0-cx2*t86412*t86433*t86434*t86385*t86386+ \
                   cx3*gx*t86412*t86424*t86386*t86387*3.0-cx3*gamma_bb[index]*gx*t86412*t86430*t86429*t86386*t86387);
            } else if (rho_a[index] > cutoff_) {
                v_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                double t89647 = 1.0/pow(rho_b[index],1.0/3.0);
                double t89648 = c*t89647;
                double t89649 = sqrt(t89648);
                double t89650 = pow(t89648,3.0/2.0);
                double t89651 = c*c;
                double t89652 = 1.0/pow(rho_b[index],2.0/3.0);
                double t89653 = 1.0/c0p;
                double t89654 = b1p*t89649;
                double t89655 = b3p*t89650;
                double t89656 = b4p*t89651*t89652;
                double t89657 = b2p*c*t89647;
                double t89658 = t89654+t89655+t89656+t89657;
                double t89659 = 1.0/t89658;
                double t89660 = t89653*t89659*(1.0/2.0);
                double t89661 = t89660+1.0;
                double t89662 = log(t89661);
                double t89663 = a1p*c*t89647;
                double t89664 = t89663+1.0;
                double t89665 = 1.0/pow(rho_b[index],8.0/3.0);
                double t89666 = gcaa*gcaa;
                double t89667 = 1.0/pow(rho_b[index],1.6E1/3.0);
                double t89668 = gamma_bb[index]*gamma_bb[index];
                double t89669 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]);
                double t89670 = gamma_bb[index]*gcaa*t89665;
                double t89671 = t89670+1.0;
                double t89672 = gamma_bb[index]*gcaa*t89665*3.0;
                double t89673 = gamma_bb[index]*gcaa*t89666*t89668*t89669;
                double t89674 = t89666*t89667*t89668*3.0;
                double t89675 = t89672+t89673+t89674+1.0;
                double t89676 = gamma_bb[index]*gcaa*t89665*2.0;
                double t89677 = t89666*t89667*t89668;
                double t89678 = t89676+t89677+1.0;
                double t89679 = pow(rho_b[index],5.0/3.0);
                double t89680 = C_k*t89679;
                double t89689 = tau_a[index]*1.0E20;
                double t89681 = t89680-t89689;
                double t89682 = ( (t89681 > 0.0) ?  1.0 : 0.0 ) ;
                double t89683 = t89682*1.0E20;
                double t89684 = 1.0/tau_b[index];
                double t89685 = tau_b[index]*1.0E20;
                double t89686 = -t89680+t89685;
                double t89687 = ( (t89686 > 0.0) ?  1.0 : 0.0 ) ;
                double t89688 = C_k*t89684*t89687*t89679;
                double t89690 = t89683+t89688-1.0;
                double t89691 = t89690*t89690;
                double t89692 = t89683+t89688+1.0;
                double t89693 = t89691*t89691;
                double t89694 = gx*gx;
                double t89695 = gamma_bb[index]*gx*t89665;
                double t89696 = t89695+1.0;
                double t89697 = gamma_bb[index]*gx*t89665*3.0;
                double t89698 = gamma_bb[index]*gx*t89694*t89668*t89669;
                double t89699 = t89667*t89694*t89668*3.0;
                double t89700 = t89697+t89698+t89699+1.0;
                double t89701 = gamma_bb[index]*gx*t89665*2.0;
                double t89702 = t89667*t89694*t89668;
                double t89703 = t89701+t89702+1.0;
                double t89704 = 1.0/t89696;
                double t89705 = 1.0/t89703;
                double t89706 = 1.0/t89700;
                double t89707 = 1.0/(t89696*t89696);
                double t89708 = gx*t89665*3.0;
                double t89709 = gamma_bb[index]*t89667*t89694*6.0;
                double t89710 = gx*t89694*t89668*t89669*3.0;
                double t89711 = t89710+t89708+t89709;
                double t89712 = 1.0/(t89700*t89700);
                double t89713 = gx*t89665*2.0;
                double t89714 = gamma_bb[index]*t89667*t89694*2.0;
                double t89715 = t89713+t89714;
                double t89716 = 1.0/(t89703*t89703);
                v_gamma_bb_[index] = -rho_b[index]*(((pow(2.0,1.0/3.0)*2.0-2.0)*(c0f*log((1.0/2.0)/(c0f*(b1f*t89649+ \
                   b3f*t89650+b2f*c*t89647+b4f*t89651*t89652))+1.0)*(a1f*c*t89647+1.0)*2.0-c0p*t89662*t89664*2.0))/(two_13* \
                   2.0-2.0)+c0p*t89662*t89664*2.0)*((ccaa1*gcaa*t89665)/t89671-ccaa1*gamma_bb[index]*1.0/(t89671*t89671) \
                   *t89666*t89667+(ccaa2*gamma_bb[index]*t89666*t89667*2.0)/t89678-ccaa2*t89666*t89667*t89668*1.0/(t89678* \
                   t89678)*(gcaa*t89665*2.0+gamma_bb[index]*t89666*t89667*2.0)+(ccaa3*gcaa*t89666*t89668*t89669*3.0)/ \
                   t89675-ccaa3*gamma_bb[index]*gcaa*t89666*1.0/(t89675*t89675)*t89668*t89669*(gcaa*t89665*3.0+gamma_bb[index]* \
                   t89666*t89667*6.0+gcaa*t89666*t89668*t89669*3.0))-c0*pow(rho_b[index],4.0/3.0)*(X-1.0)*((t89690/t89692- \
                   t89690*t89691*1.0/(t89692*t89692*t89692)*2.0+t89690*1.0/(t89692*t89692*t89692*t89692*t89692)*t89693) \
                   *(cxnl1*gx*t89704*t89665+cxnl2*gamma_bb[index]*t89705*t89667*t89694*2.0-cxnl1*gamma_bb[index]*t89707* \
                   t89667*t89694-cxnl2*t89715*t89716*t89667*t89694*t89668+cxnl3*gx*t89706*t89694*t89668*t89669*3.0-cxnl3* \
                   gamma_bb[index]*gx*t89711*t89712*t89694*t89668*t89669)+cx1*gx*t89704*t89665-cx1*gamma_bb[index]*t89707* \
                   t89667*t89694+cx2*gamma_bb[index]*t89705*t89667*t89694*2.0-cx2*t89715*t89716*t89667*t89694*t89668+ \
                   cx3*gx*t89706*t89694*t89668*t89669*3.0-cx3*gamma_bb[index]*gx*t89711*t89712*t89694*t89668*t89669);
            } else {
                v_gamma_bb_[index] = 0.0;
            }
        }
        if (is_meta_) {

            //V_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t86436 = 1.0/pow(rho_a[index],8.0/3.0);
                double t86437 = gamma_aa[index]*gamma_aa[index];
                double t86438 = gx*gx;
                double t86439 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t86440 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t86441 = pow(rho_a[index],5.0/3.0);
                double t86442 = tau_a[index]*1.0E20;
                double t86445 = C_k*t86441;
                double t86443 = t86442-t86445;
                double t86444 = 0.0 ;
                double t86446 = 1.0/tau_a[index];
                double t86447 = ( (t86443 > 0.0) ?  1.0 : 0.0 ) ;
                double t86448 = t86444*1.0E40;
                double t86449 = 1.0/(tau_a[index]*tau_a[index]);
                double t86450 = C_k*t86441*t86447*t86449;
                double t86457 = C_k*t86441*t86444*t86446*1.0E20;
                double t86451 = t86450+t86448-t86457;
                double t86452 = -t86442+t86445;
                double t86453 = ( (t86452 > 0.0) ?  1.0 : 0.0 ) ;
                double t86454 = t86453*1.0E20;
                double t86455 = C_k*t86441*t86446*t86447;
                double t86456 = t86454+t86455+1.0;
                double t86458 = t86454+t86455-1.0;
                double t86459 = t86458*t86458;
                double t86460 = t86459*t86459;
                double t86461 = 1.0/pow(rho_b[index],8.0/3.0);
                double t86462 = gamma_bb[index]*gamma_bb[index];
                double t86463 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]);
                double t86464 = 1.0/pow(rho_b[index],1.6E1/3.0);
                double t86465 = pow(rho_b[index],5.0/3.0);
                double t86466 = C_k*t86465;
                double t86467 = -t86442+t86466;
                double t86468 = ( (t86467 > 0.0) ?  1.0 : 0.0 ) ;
                double t86469 = t86468*1.0E20;
                double t86470 = 1.0/tau_b[index];
                double t86471 = tau_b[index]*1.0E20;
                double t86472 = t86471-t86466;
                double t86473 = ( (t86472 > 0.0) ?  1.0 : 0.0 ) ;
                double t86474 = C_k*t86470*t86473*t86465;
                double t86475 = t86474+t86469-1.0;
                double t86476 = t86474+t86469+1.0;
                double t86477 = t86442-t86466;
                double t86478 = 0.0 ;
                double t86479 = t86475*t86475;
                double t86480 = t86479*t86479;
                v_tau_a_[index] = (c0*pow(rho_a[index],4.0/3.0)*(cxnl0+(cxnl2*t86440*t86437*t86438)/(gamma_aa[index]* \
                   gx*t86436*2.0+t86440*t86437*t86438+1.0)+(cxnl1*gamma_aa[index]*gx*t86436)/(gamma_aa[index]*gx*t86436+ \
                   1.0)+(cxnl3*gamma_aa[index]*gx*t86437*t86438*t86439)/(gamma_aa[index]*gx*t86436*3.0+t86440*t86437* \
                   t86438*3.0+gamma_aa[index]*gx*t86437*t86438*t86439+1.0))*(t86451/t86456+t86451*t86460*1.0/(t86456* \
                   t86456*t86456*t86456*t86456)*5.0-t86451*1.0/(t86456*t86456)*t86458-t86451*1.0/(t86456*t86456*t86456) \
                   *t86459*6.0-t86451*t86460*1.0/(t86456*t86456*t86456*t86456*t86456*t86456)*t86458*5.0+t86451*1.0/(t86456* \
                   t86456*t86456*t86456)*t86458*t86459*6.0)+c0*pow(rho_b[index],4.0/3.0)*(cxnl0+(cxnl2*t86462*t86464* \
                   t86438)/(gamma_bb[index]*gx*t86461*2.0+t86462*t86464*t86438+1.0)+(cxnl1*gamma_bb[index]*gx*t86461) \
                   /(gamma_bb[index]*gx*t86461+1.0)+(cxnl3*gamma_bb[index]*gx*t86462*t86463*t86438)/(gamma_bb[index]* \
                   gx*t86461*3.0+t86462*t86464*t86438*3.0+gamma_bb[index]*gx*t86462*t86463*t86438+1.0))*(( 0.0 )/t86476+ \
                   t86480*1.0/(t86476*t86476*t86476*t86476*t86476)*t86478*5.0E40-t86475*1.0/(t86476*t86476)*t86478*1.0E40- \
                   1.0/(t86476*t86476*t86476)*t86478*t86479*6.0E40-t86480*t86475*1.0/(t86476*t86476*t86476*t86476*t86476* \
                   t86476)*t86478*5.0E40+t86475*1.0/(t86476*t86476*t86476*t86476)*t86478*t86479*6.0E40))*(X-1.0);
            } else if (rho_a[index] > cutoff_) {
                double t90802 = 1.0/pow(rho_a[index],8.0/3.0);
                double t90803 = gamma_aa[index]*gamma_aa[index];
                double t90804 = gx*gx;
                double t90805 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t90806 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t90807 = pow(rho_a[index],5.0/3.0);
                double t90808 = tau_a[index]*1.0E20;
                double t90811 = C_k*t90807;
                double t90809 = -t90811+t90808;
                double t90810 = 0.0 ;
                double t90812 = 1.0/tau_a[index];
                double t90813 = ( (t90809 > 0.0) ?  1.0 : 0.0 ) ;
                double t90814 = t90810*1.0E40;
                double t90815 = 1.0/(tau_a[index]*tau_a[index]);
                double t90816 = C_k*t90813*t90815*t90807;
                double t90823 = C_k*t90810*t90812*t90807*1.0E20;
                double t90817 = t90814-t90823+t90816;
                double t90818 = t90811-t90808;
                double t90819 = ( (t90818 > 0.0) ?  1.0 : 0.0 ) ;
                double t90820 = t90819*1.0E20;
                double t90821 = C_k*t90812*t90813*t90807;
                double t90822 = t90820+t90821+1.0;
                double t90824 = t90820+t90821-1.0;
                double t90825 = t90824*t90824;
                double t90826 = t90825*t90825;
                v_tau_a_[index] = c0*pow(rho_a[index],4.0/3.0)*(X-1.0)*(cxnl0+(cxnl2*t90803*t90804*t90806)/(gamma_aa[index]* \
                   gx*t90802*2.0+t90803*t90804*t90806+1.0)+(cxnl1*gamma_aa[index]*gx*t90802)/(gamma_aa[index]*gx*t90802+ \
                   1.0)+(cxnl3*gamma_aa[index]*gx*t90803*t90804*t90805)/(gamma_aa[index]*gx*t90802*3.0+t90803*t90804* \
                   t90806*3.0+gamma_aa[index]*gx*t90803*t90804*t90805+1.0))*(t90817/t90822-1.0/(t90822*t90822)*t90824* \
                   t90817-1.0/(t90822*t90822*t90822)*t90825*t90817*6.0+1.0/(t90822*t90822*t90822*t90822*t90822)*t90817* \
                   t90826*5.0+1.0/(t90822*t90822*t90822*t90822)*t90824*t90825*t90817*6.0-1.0/(t90822*t90822*t90822*t90822* \
                   t90822*t90822)*t90824*t90817*t90826*5.0);
            } else if (rho_b[index] > cutoff_) {
                double t89718 = 1.0/pow(rho_b[index],8.0/3.0);
                double t89719 = gamma_bb[index]*gamma_bb[index];
                double t89720 = gx*gx;
                double t89721 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]);
                double t89722 = 1.0/pow(rho_b[index],1.6E1/3.0);
                double t89723 = tau_a[index]*1.0E20;
                double t89724 = pow(rho_b[index],5.0/3.0);
                double t89725 = C_k*t89724;
                double t89726 = -t89723+t89725;
                double t89727 = ( (t89726 > 0.0) ?  1.0 : 0.0 ) ;
                double t89728 = t89727*1.0E20;
                double t89729 = 1.0/tau_b[index];
                double t89730 = tau_b[index]*1.0E20;
                double t89731 = t89730-t89725;
                double t89732 = ( (t89731 > 0.0) ?  1.0 : 0.0 ) ;
                double t89733 = C_k*t89732*t89724*t89729;
                double t89734 = t89733+t89728-1.0;
                double t89735 = t89733+t89728+1.0;
                double t89736 = t89723-t89725;
                double t89737 = 0.0 ;
                double t89738 = t89734*t89734;
                double t89739 = t89738*t89738;
                v_tau_a_[index] = c0*pow(rho_b[index],4.0/3.0)*(X-1.0)*(cxnl0+(cxnl2*t89720*t89722*t89719)/(gamma_bb[index]* \
                   gx*t89718*2.0+t89720*t89722*t89719+1.0)+(cxnl1*gamma_bb[index]*gx*t89718)/(gamma_bb[index]*gx*t89718+ \
                   1.0)+(cxnl3*gamma_bb[index]*gx*t89720*t89721*t89719)/(gamma_bb[index]*gx*t89718*3.0+t89720*t89722* \
                   t89719*3.0+gamma_bb[index]*gx*t89720*t89721*t89719+1.0))*(( 0.0 )/t89735-t89734*1.0/(t89735*t89735) \
                   *t89737*1.0E40-1.0/(t89735*t89735*t89735)*t89737*t89738*6.0E40+1.0/(t89735*t89735*t89735*t89735*t89735) \
                   *t89737*t89739*5.0E40+t89734*1.0/(t89735*t89735*t89735*t89735)*t89737*t89738*6.0E40-t89734*1.0/(t89735* \
                   t89735*t89735*t89735*t89735*t89735)*t89737*t89739*5.0E40);
            } else {
                v_tau_a_[index] = 0.0;
            }

            //V_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t86482 = 1.0/pow(rho_b[index],8.0/3.0);
                double t86483 = gamma_bb[index]*gamma_bb[index];
                double t86484 = gx*gx;
                double t86485 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]);
                double t86486 = 1.0/pow(rho_b[index],1.6E1/3.0);
                double t86487 = pow(rho_b[index],5.0/3.0);
                double t86488 = tau_b[index]*1.0E20;
                double t86490 = C_k*t86487;
                double t86489 = -t86490+t86488;
                double t86491 = 1.0/tau_b[index];
                double t86492 = ( (t86489 > 0.0) ?  1.0 : 0.0 ) ;
                double t86493 = 0.0 ;
                double t86494 = 1.0/(tau_b[index]*tau_b[index]);
                double t86502 = C_k*t86491*t86493*t86487*1.0E20;
                double t86503 = C_k*t86492*t86494*t86487;
                double t86495 = t86502-t86503;
                double t86500 = tau_a[index]*1.0E20;
                double t86496 = -t86500+t86490;
                double t86497 = ( (t86496 > 0.0) ?  1.0 : 0.0 ) ;
                double t86498 = t86497*1.0E20;
                double t86499 = C_k*t86491*t86492*t86487;
                double t86501 = t86498+t86499+1.0;
                double t86504 = t86498+t86499-1.0;
                double t86505 = t86504*t86504;
                double t86506 = t86505*t86505;
                v_tau_b_[index] = -c0*pow(rho_b[index],4.0/3.0)*(X-1.0)*(cxnl0+(cxnl2*t86483*t86484*t86486)/(gamma_bb[index]* \
                   gx*t86482*2.0+t86483*t86484*t86486+1.0)+(cxnl1*gamma_bb[index]*gx*t86482)/(gamma_bb[index]*gx*t86482+ \
                   1.0)+(cxnl3*gamma_bb[index]*gx*t86483*t86484*t86485)/(gamma_bb[index]*gx*t86482*3.0+t86483*t86484* \
                   t86486*3.0+gamma_bb[index]*gx*t86483*t86484*t86485+1.0))*(t86495/t86501-1.0/(t86501*t86501)*t86504* \
                   t86495-1.0/(t86501*t86501*t86501)*t86505*t86495*6.0+1.0/(t86501*t86501*t86501*t86501*t86501)*t86506* \
                   t86495*5.0+1.0/(t86501*t86501*t86501*t86501)*t86504*t86505*t86495*6.0-1.0/(t86501*t86501*t86501*t86501* \
                   t86501*t86501)*t86504*t86506*t86495*5.0);
            } else if (rho_a[index] > cutoff_) {
                v_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                double t89741 = 1.0/pow(rho_b[index],8.0/3.0);
                double t89742 = gamma_bb[index]*gamma_bb[index];
                double t89743 = gx*gx;
                double t89744 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]);
                double t89745 = 1.0/pow(rho_b[index],1.6E1/3.0);
                double t89746 = pow(rho_b[index],5.0/3.0);
                double t89747 = tau_b[index]*1.0E20;
                double t89749 = C_k*t89746;
                double t89748 = t89747-t89749;
                double t89750 = 1.0/tau_b[index];
                double t89751 = ( (t89748 > 0.0) ?  1.0 : 0.0 ) ;
                double t89752 = 0.0 ;
                double t89753 = 1.0/(tau_b[index]*tau_b[index]);
                double t89761 = C_k*t89750*t89752*t89746*1.0E20;
                double t89762 = C_k*t89751*t89753*t89746;
                double t89754 = t89761-t89762;
                double t89759 = tau_a[index]*1.0E20;
                double t89755 = t89749-t89759;
                double t89756 = ( (t89755 > 0.0) ?  1.0 : 0.0 ) ;
                double t89757 = t89756*1.0E20;
                double t89758 = C_k*t89750*t89751*t89746;
                double t89760 = t89757+t89758+1.0;
                double t89763 = t89757+t89758-1.0;
                double t89764 = t89763*t89763;
                double t89765 = t89764*t89764;
                v_tau_b_[index] = -c0*pow(rho_b[index],4.0/3.0)*(X-1.0)*(cxnl0+(cxnl2*t89742*t89743*t89745)/(gamma_bb[index]* \
                   gx*t89741*2.0+t89742*t89743*t89745+1.0)+(cxnl1*gamma_bb[index]*gx*t89741)/(gamma_bb[index]*gx*t89741+ \
                   1.0)+(cxnl3*gamma_bb[index]*gx*t89742*t89743*t89744)/(gamma_bb[index]*gx*t89741*3.0+t89742*t89743* \
                   t89745*3.0+gamma_bb[index]*gx*t89742*t89743*t89744+1.0))*(t89754/t89760-1.0/(t89760*t89760)*t89754* \
                   t89763-1.0/(t89760*t89760*t89760)*t89754*t89764*6.0+1.0/(t89760*t89760*t89760*t89760*t89760)*t89754* \
                   t89765*5.0+1.0/(t89760*t89760*t89760*t89760)*t89754*t89763*t89764*6.0-1.0/(t89760*t89760*t89760*t89760* \
                   t89760*t89760)*t89754*t89763*t89765*5.0);
            } else {
                v_tau_b_[index] = 0.0;
            }
        }
    }
    //Second Partials
    for (int index = 0; index < ntrue && deriv_ >= 2; index++) {

        //V_rho_a_rho_a
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t86508 = gcab*gcab;
            double t86512 = 1.0/pow(rho_a[index],8.0/3.0);
            double t86513 = gamma_aa[index]*t86512*(1.0/2.0);
            double t86514 = 1.0/pow(rho_b[index],8.0/3.0);
            double t86515 = gamma_bb[index]*t86514*(1.0/2.0);
            double t86509 = t86513+t86515;
            double t86510 = t86509*t86509;
            double t86511 = 1.0/pow(rho_a[index],1.1E1/3.0);
            double t86516 = gcab*t86509;
            double t86517 = t86516+1.0;
            double t86518 = t86510*t86508;
            double t86519 = gcab*t86509*2.0;
            double t86520 = t86518+t86519+1.0;
            double t86521 = t86510*t86508*3.0;
            double t86522 = gcab*t86510*t86508*t86509;
            double t86523 = gcab*t86509*3.0;
            double t86524 = t86521+t86522+t86523+1.0;
            double t86525 = rho_a[index]+rho_b[index];
            double t86526 = 1.0/pow(t86525,1.0/3.0);
            double t86527 = c*t86526;
            double t86528 = sqrt(t86527);
            double t86529 = b1p*t86528;
            double t86530 = pow(t86527,3.0/2.0);
            double t86531 = b3p*t86530;
            double t86532 = c*c;
            double t86533 = 1.0/pow(t86525,2.0/3.0);
            double t86534 = b4p*t86532*t86533;
            double t86535 = b2p*c*t86526;
            double t86536 = t86531+t86534+t86535+t86529;
            double t86537 = 1.0/pow(t86525,4.0/3.0);
            double t86538 = 1.0/c0p;
            double t86539 = 1.0/t86536;
            double t86540 = t86538*t86539*(1.0/2.0);
            double t86541 = t86540+1.0;
            double t86542 = a1p*c*t86526;
            double t86543 = t86542+1.0;
            double t86544 = rho_a[index]-rho_b[index];
            double t86545 = t86544*t86544;
            double t86546 = 1.0/t86525;
            double t86547 = t86544*t86546;
            double t86548 = two_13*2.0;
            double t86549 = t86548-2.0;
            double t86550 = 1.0/t86549;
            double t86551 = 1.0/c0f;
            double t86552 = b1f*t86528;
            double t86553 = b3f*t86530;
            double t86554 = b4f*t86532*t86533;
            double t86555 = b2f*c*t86526;
            double t86556 = t86552+t86553+t86554+t86555;
            double t86557 = 1.0/t86556;
            double t86558 = t86551*t86557*(1.0/2.0);
            double t86559 = t86558+1.0;
            double t86560 = log(t86559);
            double t86561 = a1f*c*t86526;
            double t86562 = t86561+1.0;
            double t86563 = log(t86541);
            double t86573 = c0f*t86560*t86562*2.0;
            double t86574 = c0p*t86543*t86563*2.0;
            double t86564 = t86573-t86574;
            double t86565 = t86547+1.0;
            double t86566 = pow(t86565,4.0/3.0);
            double t86567 = -t86547+1.0;
            double t86568 = pow(t86567,4.0/3.0);
            double t86569 = t86566+t86568-2.0;
            double t86570 = 1.0/(t86525*t86525);
            double t86601 = t86570*t86544;
            double t86571 = -t86601+t86546;
            double t86572 = 1.0/(t86525*t86525*t86525*t86525);
            double t86575 = t86545*t86545;
            double t86576 = 1.0/pow(t86525,5.0/3.0);
            double t86577 = 1.0/sqrt(t86527);
            double t86578 = 1.0/t86541;
            double t86579 = 1.0/(t86536*t86536);
            double t86580 = b4p*t86532*t86576*(2.0/3.0);
            double t86581 = b2p*c*t86537*(1.0/3.0);
            double t86582 = b1p*c*t86537*t86577*(1.0/6.0);
            double t86583 = b3p*c*t86528*t86537*(1.0/2.0);
            double t86584 = t86580+t86581+t86582+t86583;
            double t86585 = t86543*t86584*t86578*t86579;
            double t86586 = 1.0/(t86525*t86525*t86525*t86525*t86525);
            double t86587 = 1.0/d2fz0;
            double t86588 = 1.0/Aa;
            double t86589 = b1a*t86528;
            double t86590 = b3a*t86530;
            double t86591 = b4a*t86532*t86533;
            double t86592 = b2a*c*t86526;
            double t86593 = t86590+t86591+t86592+t86589;
            double t86594 = 1.0/t86593;
            double t86595 = t86594*t86588*(1.0/2.0);
            double t86596 = t86595+1.0;
            double t86597 = log(t86596);
            double t86598 = a1a*c*t86526;
            double t86599 = t86598+1.0;
            double t86600 = pow(t86565,1.0/3.0);
            double t86602 = t86600*t86571*(4.0/3.0);
            double t86603 = pow(t86567,1.0/3.0);
            double t86760 = t86603*t86571*(4.0/3.0);
            double t86604 = t86602-t86760;
            double t86605 = t86572*t86575;
            double t86606 = t86605-1.0;
            double t86607 = 1.0/pow(rho_a[index],1.0/3.0);
            double t86608 = c*t86607;
            double t86609 = sqrt(t86608);
            double t86610 = b1f*t86609;
            double t86611 = pow(t86608,3.0/2.0);
            double t86612 = b3f*t86611;
            double t86613 = 1.0/pow(rho_a[index],2.0/3.0);
            double t86614 = b4f*t86532*t86613;
            double t86615 = b2f*c*t86607;
            double t86616 = t86610+t86612+t86614+t86615;
            double t86617 = 1.0/pow(rho_a[index],4.0/3.0);
            double t86618 = b1p*t86609;
            double t86619 = b3p*t86611;
            double t86620 = b4p*t86532*t86613;
            double t86621 = b2p*c*t86607;
            double t86622 = t86620+t86621+t86618+t86619;
            double t86623 = 1.0/pow(rho_a[index],5.0/3.0);
            double t86624 = 1.0/sqrt(t86608);
            double t86625 = 1.0/t86616;
            double t86626 = t86551*t86625*(1.0/2.0);
            double t86627 = t86626+1.0;
            double t86628 = 1.0/t86622;
            double t86629 = t86538*t86628*(1.0/2.0);
            double t86630 = t86629+1.0;
            double t86631 = a1p*c*t86607;
            double t86632 = t86631+1.0;
            double t86633 = 1.0/t86630;
            double t86634 = 1.0/(t86622*t86622);
            double t86635 = b4p*t86532*t86623*(2.0/3.0);
            double t86636 = b2p*c*t86617*(1.0/3.0);
            double t86637 = b1p*c*t86624*t86617*(1.0/6.0);
            double t86638 = b3p*c*t86617*t86609*(1.0/2.0);
            double t86639 = t86635+t86636+t86637+t86638;
            double t86640 = t86632*t86633*t86634*t86639;
            double t86641 = log(t86630);
            double t86642 = pow(2.0,1.0/3.0);
            double t86643 = t86642*2.0;
            double t86644 = t86643-2.0;
            double t86645 = log(t86627);
            double t86646 = a1f*c*t86607;
            double t86647 = t86646+1.0;
            double t86648 = 1.0/t86627;
            double t86649 = 1.0/(t86616*t86616);
            double t86650 = b4f*t86532*t86623*(2.0/3.0);
            double t86651 = b2f*c*t86617*(1.0/3.0);
            double t86652 = b1f*c*t86624*t86617*(1.0/6.0);
            double t86653 = b3f*c*t86617*t86609*(1.0/2.0);
            double t86654 = t86650+t86651+t86652+t86653;
            double t86655 = a1f*c*c0f*t86617*t86645*(2.0/3.0);
            double t86656 = a1p*c*c0p*t86641*t86617*(2.0/3.0);
            double t86657 = gamma_aa[index]*gamma_aa[index];
            double t86658 = gcaa*gcaa;
            double t86659 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]);
            double t86660 = 1.0/pow(rho_a[index],1.6E1/3.0);
            double t86661 = pow(rho_a[index],5.0/3.0);
            double t86662 = C_k*t86661;
            double t86663 = tau_a[index]*1.0E20;
            double t86664 = 1.0/tau_a[index];
            double t86665 = -t86662+t86663;
            double t86666 = ( (t86665 > 0.0) ?  1.0 : 0.0 ) ;
            double t86667 = C_k*t86661*t86664*t86666;
            double t86668 = t86662-t86663;
            double t86669 = ( (t86668 > 0.0) ?  1.0 : 0.0 ) ;
            double t86670 = t86669*1.0E20;
            double t86671 = t86670+t86667-1.0;
            double t86672 = t86671*t86671;
            double t86673 = t86670+t86667+1.0;
            double t86674 = t86672*t86672;
            double t86675 = gx*gx;
            double t86676 = gamma_aa[index]*gx*t86512;
            double t86677 = t86676+1.0;
            double t86678 = 1.0/t86677;
            double t86679 = gamma_aa[index]*gx*t86512*3.0;
            double t86680 = gamma_aa[index]*gx*t86657*t86675*t86659;
            double t86681 = t86660*t86657*t86675*3.0;
            double t86682 = t86680+t86681+t86679+1.0;
            double t86683 = 1.0/t86682;
            double t86684 = gamma_aa[index]*gx*t86512*2.0;
            double t86685 = t86660*t86657*t86675;
            double t86686 = t86684+t86685+1.0;
            double t86687 = 1.0/t86686;
            double t86688 = 1.0/t86673;
            double t86689 = 1.0/(t86673*t86673*t86673);
            double t86690 = 1.0/(t86673*t86673*t86673*t86673*t86673);
            double t86691 = t86671*t86690*t86674;
            double t86692 = 1.0/pow(rho_a[index],1.9E1/3.0);
            double t86693 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]*rho_a[index]);
            double t86694 = cxnl1*gamma_aa[index]*gx*t86512*t86678;
            double t86695 = cxnl3*gamma_aa[index]*gx*t86683*t86657*t86675*t86659;
            double t86696 = cxnl2*t86660*t86657*t86675*t86687;
            double t86697 = cxnl0+t86694+t86695+t86696;
            double t86698 = 0.0 ;
            double t86699 = pow(rho_a[index],2.0/3.0);
            double t86700 = C_k*t86698*t86699*(5.0E20/3.0);
            double t86701 = C_k*C_k;
            double t86702 = pow(rho_a[index],7.0/3.0);
            double t86703 = C_k*t86664*t86666*t86699*(5.0/3.0);
            double t86705 = t86701*t86702*t86664*t86698*(5.0/3.0);
            double t86704 = t86700+t86703-t86705;
            double t86706 = 1.0/(t86677*t86677);
            double t86707 = gamma_aa[index]*gx*t86511*8.0;
            double t86708 = gamma_aa[index]*gx*t86657*t86675*t86693*8.0;
            double t86709 = t86692*t86657*t86675*1.6E1;
            double t86710 = t86707+t86708+t86709;
            double t86711 = 1.0/(t86682*t86682);
            double t86712 = gamma_aa[index]*gx*t86511*(1.6E1/3.0);
            double t86713 = t86692*t86657*t86675*(1.6E1/3.0);
            double t86714 = t86712+t86713;
            double t86715 = 1.0/(t86686*t86686);
            double t86716 = t86671*t86688;
            double t86754 = t86671*t86672*t86689*2.0;
            double t86717 = t86716+t86691-t86754;
            double t86718 = 1.0/pow(rho_a[index],1.0E1);
            double t86719 = 1.0/pow(rho_a[index],2.2E1/3.0);
            double t86720 = 1.0/pow(rho_a[index],1.4E1/3.0);
            double t86721 = cxnl1*gamma_aa[index]*gx*t86511*t86678*(8.0/3.0);
            double t86722 = cxnl3*gamma_aa[index]*gx*t86683*t86657*t86675*t86693*8.0;
            double t86723 = cxnl2*t86692*t86657*t86675*t86687*(1.6E1/3.0);
            double t86724 = t86721+t86722+t86723-cxnl1*t86706*t86692*t86657*t86675*(8.0/3.0)-cxnl2*t86660*t86714* \
               t86715*t86657*t86675-cxnl3*gamma_aa[index]*gx*t86710*t86711*t86657*t86675*t86659;
            double t86725 = t86704*t86688;
            double t86726 = 1.0/(t86673*t86673);
            double t86727 = 1.0/(t86673*t86673*t86673*t86673);
            double t86728 = t86704*t86671*t86672*t86727*6.0;
            double t86729 = t86704*t86690*t86674*5.0;
            double t86730 = 1.0/(t86673*t86673*t86673*t86673*t86673*t86673);
            double t86731 = t86725+t86728+t86729-t86704*t86671*t86726-t86704*t86672*t86689*6.0-t86730*t86704* \
               t86671*t86674*5.0;
            double t86732 = pow(rho_a[index],4.0/3.0);
            double t86733 = rho_a[index]*rho_a[index];
            double t86734 = 0.0 ;
            double t86735 = t86704*t86704;
            double t86736 = C_k*t86607*t86698*(1.0E21/9.0);
            double t86737 = C_k*rho_a[index]*t86701*t86733*t86734*t86664*(2.5E1/9.0);
            double t86738 = C_k*t86607*t86664*t86666*(1.0E1/9.0);
            double t86740 = t86701*t86732*t86734*(2.5E21/9.0);
            double t86741 = t86701*t86732*t86664*t86698*(2.0E1/3.0);
            double t86739 = -t86740-t86741+t86736+t86737+t86738;
            double t86742 = 1.0/(t86677*t86677*t86677);
            double t86743 = t86714*t86714;
            double t86744 = 1.0/(t86686*t86686*t86686);
            double t86745 = gamma_aa[index]*gx*t86720*(8.8E1/3.0);
            double t86746 = gamma_aa[index]*gx*t86718*t86657*t86675*7.2E1;
            double t86747 = t86719*t86657*t86675*(3.04E2/3.0);
            double t86748 = t86745+t86746+t86747;
            double t86749 = t86710*t86710;
            double t86750 = 1.0/(t86682*t86682*t86682);
            double t86751 = gamma_aa[index]*gx*t86720*(1.76E2/9.0);
            double t86752 = t86719*t86657*t86675*(3.04E2/9.0);
            double t86753 = t86751+t86752;
            double t86755 = 1.0/t86520;
            double t86756 = 1.0/t86524;
            double t86757 = 1.0/t86517;
            double t86758 = 1.0/pow(t86525,7.0/3.0);
            double t86759 = 1.0/pow(t86525,8.0/3.0);
            double t86761 = 1.0/t86559;
            double t86762 = 1.0/(t86556*t86556);
            double t86763 = b4f*t86532*t86576*(2.0/3.0);
            double t86764 = b2f*c*t86537*(1.0/3.0);
            double t86765 = b1f*c*t86537*t86577*(1.0/6.0);
            double t86766 = b3f*c*t86528*t86537*(1.0/2.0);
            double t86767 = t86763+t86764+t86765+t86766;
            double t86768 = a1f*c*c0f*t86560*t86537*(2.0/3.0);
            double t86770 = t86562*t86761*t86762*t86767;
            double t86771 = a1p*c*c0p*t86563*t86537*(2.0/3.0);
            double t86769 = -t86770-t86771+t86585+t86768;
            double t86772 = t86584*t86584;
            double t86773 = 1.0/pow(t86527,3.0/2.0);
            double t86774 = b4p*t86532*t86759*(1.0E1/9.0);
            double t86775 = b2p*c*t86758*(4.0/9.0);
            double t86776 = b1p*c*t86577*t86758*(2.0/9.0);
            double t86777 = b3p*c*t86528*t86758*(2.0/3.0);
            double t86778 = b3p*t86532*t86577*t86759*(1.0/1.2E1);
            double t86779 = t86774+t86775+t86776+t86777+t86778-b1p*t86532*t86773*t86759*(1.0/3.6E1);
            double t86780 = 1.0/(t86536*t86536*t86536);
            double t86781 = t86543*t86780*t86772*t86578*2.0;
            double t86782 = t86767*t86767;
            double t86783 = 1.0/(t86541*t86541);
            double t86784 = 1.0/(t86536*t86536*t86536*t86536);
            double t86785 = t86770+t86771-t86585-t86768;
            double t86786 = t86570*2.0;
            double t86787 = 1.0/(t86525*t86525*t86525);
            double t86794 = t86544*t86787*2.0;
            double t86788 = -t86794+t86786;
            double t86789 = t86571*t86571;
            double t86790 = a1p*c*c0p*t86563*t86758*(8.0/9.0);
            double t86791 = 1.0/(t86525*t86525*t86525*t86525*t86525*t86525);
            double t86792 = t86575*t86586*4.0;
            double t86802 = t86544*t86545*t86572*4.0;
            double t86793 = -t86802+t86792;
            double t86795 = t86603*t86788*(4.0/3.0);
            double t86796 = 1.0/pow(t86565,2.0/3.0);
            double t86797 = t86796*t86789*(4.0/9.0);
            double t86798 = 1.0/pow(t86567,2.0/3.0);
            double t86799 = t86789*t86798*(4.0/9.0);
            double t86800 = t86795+t86797+t86799-t86600*t86788*(4.0/3.0);
            double t86801 = 1.0/t86596;
            double t86803 = 1.0/(t86593*t86593);
            double t86804 = b4a*t86532*t86576*(2.0/3.0);
            double t86805 = b2a*c*t86537*(1.0/3.0);
            double t86806 = b1a*c*t86537*t86577*(1.0/6.0);
            double t86807 = b3a*c*t86528*t86537*(1.0/2.0);
            double t86808 = t86804+t86805+t86806+t86807;
            double t86809 = t86808*t86808;
            double t86810 = t86802-t86792;
            double t86811 = t86543*t86578*t86579*t86779;
            double t86812 = t86543*t86538*t86772*t86783*t86784*(1.0/2.0);
            double t86813 = a1p*c*t86537*t86584*t86578*t86579*(2.0/3.0);
            double t86814 = 1.0/pow(rho_a[index],7.0/3.0);
            double t86815 = 1.0/pow(t86608,3.0/2.0);
            double t86816 = t86654*t86654;
            double t86817 = t86639*t86639;
            double t86818 = 1.0/(t86622*t86622*t86622);
            double t86819 = t86632*t86633*t86817*t86818*2.0;
            double t86820 = b4p*t86512*t86532*(1.0E1/9.0);
            double t86821 = b2p*c*t86814*(4.0/9.0);
            double t86822 = b3p*t86512*t86532*t86624*(1.0/1.2E1);
            double t86823 = b1p*c*t86624*t86814*(2.0/9.0);
            double t86824 = b3p*c*t86814*t86609*(2.0/3.0);
            double t86905 = b1p*t86512*t86532*t86815*(1.0/3.6E1);
            double t86825 = t86820+t86821+t86822+t86823+t86824-t86905;
            double t86826 = 1.0/(t86630*t86630);
            double t86827 = 1.0/(t86622*t86622*t86622*t86622);
            double t86828 = a1p*c*c0p*t86641*t86814*(8.0/9.0);
            double t86886 = t86654*t86647*t86648*t86649;
            double t86829 = t86640+t86655-t86656-t86886;
            double t86830 = c0f*t86645*t86647*2.0;
            double t86832 = c0p*t86632*t86641*2.0;
            double t86831 = t86830-t86832;
            double t86833 = 1.0/pow(rho_b[index],1.0/3.0);
            double t86834 = c*t86833;
            double t86835 = sqrt(t86834);
            double t86836 = pow(t86834,3.0/2.0);
            double t86837 = 1.0/pow(rho_b[index],2.0/3.0);
            double t86838 = b1p*t86835;
            double t86839 = b3p*t86836;
            double t86840 = b4p*t86532*t86837;
            double t86841 = b2p*c*t86833;
            double t86842 = t86840+t86841+t86838+t86839;
            double t86843 = 1.0/t86842;
            double t86844 = t86843*t86538*(1.0/2.0);
            double t86845 = t86844+1.0;
            double t86846 = log(t86845);
            double t86847 = a1p*c*t86833;
            double t86848 = t86847+1.0;
            double t86849 = c0p*t86846*t86848*2.0;
            double t86850 = t86550*t86572*t86564*t86575*t86569;
            double t86851 = Aa*t86550*t86606*t86569*t86587*t86597*t86599*2.0;
            double t86852 = 1.0/(t86517*t86517);
            double t86853 = gamma_aa[index]*gcab*t86511*(8.0/3.0);
            double t86854 = gamma_aa[index]*t86511*t86508*t86509*(8.0/3.0);
            double t86855 = t86853+t86854;
            double t86856 = 1.0/(t86524*t86524);
            double t86857 = 1.0/(t86520*t86520);
            double t86858 = gamma_aa[index]*gcab*t86511*4.0;
            double t86859 = gamma_aa[index]*gcab*t86510*t86511*t86508*4.0;
            double t86860 = gamma_aa[index]*t86511*t86508*t86509*8.0;
            double t86861 = t86860+t86858+t86859;
            double t86862 = t86550*t86831*t86644;
            double t86863 = t86832+t86862;
            double t86864 = gamma_aa[index]*gcaa*t86512;
            double t86865 = t86864+1.0;
            double t86866 = 1.0/t86865;
            double t86867 = gamma_aa[index]*gcaa*t86512*3.0;
            double t86868 = gamma_aa[index]*gcaa*t86657*t86658*t86659;
            double t86869 = t86660*t86657*t86658*3.0;
            double t86870 = t86867+t86868+t86869+1.0;
            double t86871 = 1.0/t86870;
            double t86872 = gamma_aa[index]*gcaa*t86512*2.0;
            double t86873 = t86660*t86657*t86658;
            double t86874 = t86872+t86873+1.0;
            double t86875 = 1.0/t86874;
            double t86876 = 1.0/(t86865*t86865);
            double t86877 = gamma_aa[index]*gcaa*t86511*(1.6E1/3.0);
            double t86878 = t86692*t86657*t86658*(1.6E1/3.0);
            double t86879 = t86877+t86878;
            double t86880 = gamma_aa[index]*gcaa*t86511*8.0;
            double t86881 = gamma_aa[index]*gcaa*t86657*t86693*t86658*8.0;
            double t86882 = t86692*t86657*t86658*1.6E1;
            double t86883 = t86880+t86881+t86882;
            double t86884 = 1.0/(t86870*t86870);
            double t86885 = 1.0/(t86874*t86874);
            double t86887 = t86550*t86644*t86829;
            double t86888 = ccaa1*gamma_aa[index]*gcaa*t86511*t86866*(8.0/3.0);
            double t86889 = ccaa3*gamma_aa[index]*gcaa*t86871*t86657*t86693*t86658*8.0;
            double t86890 = ccaa2*t86692*t86657*t86658*t86875*(1.6E1/3.0);
            double t86891 = t86890+t86888+t86889-ccaa1*t86692*t86657*t86658*t86876*(8.0/3.0)-ccaa2*t86660*t86657* \
               t86658*t86885*t86879-ccaa3*gamma_aa[index]*gcaa*t86657*t86658*t86883*t86659*t86884;
            double t86892 = -t86640+t86656+t86887;
            double t86893 = ccaa1*gamma_aa[index]*gcaa*t86512*t86866;
            double t86894 = ccaa3*gamma_aa[index]*gcaa*t86871*t86657*t86658*t86659;
            double t86895 = ccaa2*t86660*t86657*t86658*t86875;
            double t86896 = ccaa0+t86893+t86894+t86895;
            double t86897 = 1.0/(t86616*t86616*t86616);
            double t86898 = b4f*t86512*t86532*(1.0E1/9.0);
            double t86899 = b2f*c*t86814*(4.0/9.0);
            double t86900 = b3f*t86512*t86532*t86624*(1.0/1.2E1);
            double t86901 = b1f*c*t86624*t86814*(2.0/9.0);
            double t86902 = b3f*c*t86814*t86609*(2.0/3.0);
            double t86903 = t86900+t86901+t86902+t86898+t86899-b1f*t86512*t86532*t86815*(1.0/3.6E1);
            double t86904 = t86903*t86647*t86648*t86649;
            double t86906 = t86632*t86633*t86634*t86825;
            double t86907 = 1.0/(t86627*t86627);
            double t86908 = 1.0/(t86616*t86616*t86616*t86616);
            double t86909 = t86551*t86816*t86907*t86647*t86908*(1.0/2.0);
            double t86910 = t86632*t86538*t86817*t86826*t86827*(1.0/2.0);
            double t86911 = a1f*c*t86617*t86654*t86648*t86649*(2.0/3.0);
            double t86912 = a1p*c*t86633*t86634*t86617*t86639*(2.0/3.0);
            v_rho_a_rho_a_[index] = t86863*t86891*2.0+t86892*t86896*2.0+(ccab1*gamma_aa[index]*gcab*t86511*t86757* \
               (4.0/3.0)-ccab2*t86510*t86508*t86855*t86857-ccab1*gamma_aa[index]*t86511*t86508*t86509*t86852*(4.0/ \
               3.0)+ccab2*gamma_aa[index]*t86511*t86508*t86509*t86755*(8.0/3.0)+ccab3*gamma_aa[index]*gcab*t86510* \
               t86511*t86508*t86756*4.0-ccab3*gcab*t86510*t86508*t86509*t86861*t86856)*(t86850+t86851+t86574+rho_a[index]* \
               (-t86640+t86656+t86550*t86644*(t86640+t86655-t86654*t86647*t86648*t86649-a1p*c*c0p*t86641*t86617*(2.0/ \
               3.0)))+t86525*(t86585-a1p*c*c0p*t86563*t86537*(2.0/3.0)+t86550*t86604*t86572*t86564*t86575-t86550* \
               t86564*t86575*t86586*t86569*4.0-t86550*t86572*t86575*t86569*t86769+t86550*t86544*t86545*t86572*t86564* \
               t86569*4.0+Aa*t86550*t86604*t86606*t86587*t86597*t86599*2.0-Aa*t86550*t86793*t86569*t86587*t86597* \
               t86599*2.0+t86801*t86550*t86803*t86606*t86808*t86569*t86587*t86599-Aa*a1a*c*t86550*t86606*t86537*t86569* \
               t86587*t86597*(2.0/3.0))-c0p*t86632*t86641*2.0-t86550*t86831*t86644)*2.0+(rho_a[index]*t86863+rho_b[index]* \
               (t86849-t86550*t86644*(t86849-c0f*log((t86551*(1.0/2.0))/(b1f*t86835+b3f*t86836+b2f*c*t86833+b4f*t86532* \
               t86837)+1.0)*(a1f*c*t86833+1.0)*2.0))-t86525*(t86850+t86851+t86574))*(-ccab2*t86510*t86508*t86857* \
               (gamma_aa[index]*gcab*t86720*(8.8E1/9.0)+t86508*t86719*t86657*(3.2E1/9.0)+gamma_aa[index]*t86720*t86508* \
               t86509*(8.8E1/9.0))+ccab2*t86510*1.0/(t86520*t86520*t86520)*t86508*(t86855*t86855)*2.0+ccab1*gamma_aa[index]* \
               gcab*t86720*t86757*(4.4E1/9.0)-ccab1*t86508*t86852*t86719*t86657*(3.2E1/9.0)+ccab2*t86508*t86719*t86755* \
               t86657*(3.2E1/9.0)-ccab1*gamma_aa[index]*t86720*t86508*t86509*t86852*(4.4E1/9.0)+ccab2*gamma_aa[index]* \
               t86720*t86508*t86509*t86755*(8.8E1/9.0)+ccab3*gcab*t86510*1.0/(t86524*t86524*t86524)*t86508*t86509* \
               (t86861*t86861)*2.0+ccab3*gamma_aa[index]*gcab*t86510*t86720*t86508*t86756*(4.4E1/3.0)-ccab2*gamma_aa[index]* \
               t86511*t86508*t86509*t86855*t86857*(1.6E1/3.0)+ccab3*gcab*t86508*t86509*t86719*t86657*t86756*(3.2E1/ \
               3.0)+ccab1*gcab*t86508*1.0/(t86517*t86517*t86517)*t86509*t86719*t86657*(3.2E1/9.0)-ccab3*gcab*t86510* \
               t86508*t86509*t86856*(gamma_aa[index]*gcab*t86720*(4.4E1/3.0)+t86508*t86719*t86657*(3.2E1/3.0)+gamma_aa[index]* \
               t86720*t86508*t86509*(8.8E1/3.0)+gamma_aa[index]*gcab*t86510*t86720*t86508*(4.4E1/3.0)+gcab*t86508* \
               t86509*t86719*t86657*(3.2E1/3.0))-ccab3*gamma_aa[index]*gcab*t86510*t86511*t86508*t86861*t86856*8.0) \
               -(ccab0+ccab1*gcab*t86509*t86757+ccab2*t86510*t86508*t86755+ccab3*gcab*t86510*t86508*t86509*t86756) \
               *(rho_a[index]*(t86910+t86912+t86906-t86819-t86828+t86550*t86644*(t86911+t86904+t86819+t86828+t86909- \
               t86632*t86633*t86634*t86825-t86816*t86647*t86648*t86897*2.0-a1f*c*c0f*t86814*t86645*(8.0/9.0)-t86632* \
               t86538*t86817*t86826*t86827*(1.0/2.0)-a1p*c*t86633*t86634*t86617*t86639*(2.0/3.0)))+t86525*(-t86811- \
               t86812-t86813+t86781+t86790+t86550*t86572*t86575*t86569*(t86811+t86812+t86813-t86781-t86790+t86562* \
               t86761*1.0/(t86556*t86556*t86556)*t86782*2.0-t86562*t86761*t86762*(b2f*c*t86758*(4.0/9.0)+b4f*t86532* \
               t86759*(1.0E1/9.0)+b1f*c*t86577*t86758*(2.0/9.0)+b3f*c*t86528*t86758*(2.0/3.0)-b1f*t86532*t86773*t86759* \
               (1.0/3.6E1)+b3f*t86532*t86577*t86759*(1.0/1.2E1))-t86551*t86562*1.0/(t86556*t86556*t86556*t86556)* \
               t86782*1.0/(t86559*t86559)*(1.0/2.0)+a1f*c*c0f*t86560*t86758*(8.0/9.0)-a1f*c*t86761*t86537*t86762* \
               t86767*(2.0/3.0))+t86800*t86550*t86572*t86564*t86575+t86550*t86604*t86572*t86575*t86785*2.0-t86550* \
               t86604*t86564*t86575*t86586*8.0+t86550*t86545*t86572*t86564*t86569*1.2E1+t86550*t86564*t86575*t86791* \
               t86569*2.0E1-t86550*t86575*t86586*t86569*t86785*8.0+t86550*t86604*t86544*t86545*t86572*t86564*8.0- \
               t86550*t86544*t86545*t86564*t86586*t86569*3.2E1-t86550*t86544*t86545*t86572*t86569*t86769*8.0+Aa*t86800* \
               t86550*t86606*t86587*t86597*t86599*2.0-Aa*t86550*t86604*t86793*t86587*t86597*t86599*4.0+Aa*t86550* \
               t86569*t86587*t86597*t86599*(t86545*t86572*1.2E1+t86575*t86791*2.0E1-t86544*t86545*t86586*3.2E1)*2.0+ \
               t86801*t86550*t86604*t86803*t86606*t86808*t86587*t86599*2.0+t86801*t86810*t86550*t86803*t86808*t86569* \
               t86587*t86599*2.0+t86801*t86550*t86606*1.0/(t86593*t86593*t86593)*t86809*t86569*t86587*t86599*2.0- \
               t86801*t86550*t86803*t86606*t86569*t86587*t86599*(b2a*c*t86758*(4.0/9.0)+b4a*t86532*t86759*(1.0E1/ \
               9.0)+b1a*c*t86577*t86758*(2.0/9.0)+b3a*c*t86528*t86758*(2.0/3.0)-b1a*t86532*t86773*t86759*(1.0/3.6E1) \
               +b3a*t86532*t86577*t86759*(1.0/1.2E1))-Aa*a1a*c*t86550*t86604*t86606*t86537*t86587*t86597*(4.0/3.0) \
               -Aa*a1a*c*t86810*t86550*t86537*t86569*t86587*t86597*(4.0/3.0)+Aa*a1a*c*t86550*t86606*t86569*t86587* \
               t86758*t86597*(8.0/9.0)-t86550*t86606*1.0/(t86593*t86593*t86593*t86593)*t86809*t86569*t86587*1.0/(t86596* \
               t86596)*t86588*t86599*(1.0/2.0)-a1a*c*t86801*t86550*t86803*t86606*t86537*t86808*t86569*t86587*(2.0/ \
               3.0))+t86550*t86644*t86829*2.0-t86632*t86633*t86634*t86639*2.0+t86543*t86584*t86578*t86579*2.0+a1p* \
               c*c0p*t86641*t86617*(4.0/3.0)-a1p*c*c0p*t86563*t86537*(4.0/3.0)+t86550*t86604*t86572*t86564*t86575* \
               2.0+t86550*t86572*t86575*t86569*t86785*2.0-t86550*t86564*t86575*t86586*t86569*8.0+t86550*t86544*t86545* \
               t86572*t86564*t86569*8.0+Aa*t86550*t86604*t86606*t86587*t86597*t86599*4.0+Aa*t86810*t86550*t86569* \
               t86587*t86597*t86599*4.0+t86801*t86550*t86803*t86606*t86808*t86569*t86587*t86599*2.0-Aa*a1a*c*t86550* \
               t86606*t86537*t86569*t86587*t86597*(4.0/3.0))-(X-1.0)*(c0*t86732*(t86717*(cxnl1*gamma_aa[index]*gx* \
               t86720*t86678*(8.8E1/9.0)-cxnl1*t86706*t86719*t86657*t86675*2.4E1+cxnl2*t86719*t86657*t86675*t86687* \
               (3.04E2/9.0)-cxnl2*t86660*t86715*t86753*t86657*t86675+cxnl2*t86660*t86743*t86744*t86657*t86675*2.0- \
               cxnl2*t86714*t86715*t86692*t86657*t86675*(3.2E1/3.0)+cxnl1*gamma_aa[index]*gx*t86742*t86718*t86657* \
               t86675*(1.28E2/9.0)+cxnl3*gamma_aa[index]*gx*t86718*t86683*t86657*t86675*7.2E1-cxnl3*gamma_aa[index]* \
               gx*t86710*t86711*t86657*t86675*t86693*1.6E1-cxnl3*gamma_aa[index]*gx*t86711*t86657*t86675*t86748*t86659+ \
               cxnl3*gamma_aa[index]*gx*t86750*t86657*t86675*t86659*t86749*2.0)-t86731*t86724*2.0-t86697*(t86726* \
               t86735*2.0-t86739*t86688+t86730*t86735*t86674*5.0E1-t86672*t86735*t86727*3.6E1+t86671*t86726*t86739- \
               t86690*t86674*t86739*5.0+t86671*t86735*t86689*1.0E1+t86672*t86739*t86689*6.0+t86671*t86672*t86690* \
               t86735*4.0+t86730*t86671*t86674*t86739*5.0-t86671*t86672*t86727*t86739*6.0-t86671*t86735*1.0/(t86673* \
               t86673*t86673*t86673*t86673*t86673*t86673)*t86674*3.0E1)+cx1*gamma_aa[index]*gx*t86720*t86678*(8.8E1/ \
               9.0)-cx1*t86706*t86719*t86657*t86675*2.4E1+cx2*t86719*t86657*t86675*t86687*(3.04E2/9.0)-cx2*t86660* \
               t86715*t86753*t86657*t86675+cx2*t86660*t86743*t86744*t86657*t86675*2.0-cx2*t86714*t86715*t86692*t86657* \
               t86675*(3.2E1/3.0)+cx1*gamma_aa[index]*gx*t86742*t86718*t86657*t86675*(1.28E2/9.0)+cx3*gamma_aa[index]* \
               gx*t86718*t86683*t86657*t86675*7.2E1-cx3*gamma_aa[index]*gx*t86710*t86711*t86657*t86675*t86693*1.6E1- \
               cx3*gamma_aa[index]*gx*t86711*t86657*t86675*t86748*t86659+cx3*gamma_aa[index]*gx*t86750*t86657*t86675* \
               t86659*t86749*2.0)-c0*pow(rho_a[index],1.0/3.0)*(t86724*t86717-t86731*t86697+cx1*gamma_aa[index]*gx* \
               t86511*t86678*(8.0/3.0)-cx1*t86706*t86692*t86657*t86675*(8.0/3.0)+cx2*t86692*t86657*t86675*t86687* \
               (1.6E1/3.0)-cx2*t86660*t86714*t86715*t86657*t86675+cx3*gamma_aa[index]*gx*t86683*t86657*t86675*t86693* \
               8.0-cx3*gamma_aa[index]*gx*t86710*t86711*t86657*t86675*t86659)*(8.0/3.0)+c0*t86613*(cx0+t86717*t86697+ \
               cx1*gamma_aa[index]*gx*t86512*t86678+cx2*t86660*t86657*t86675*t86687+cx3*gamma_aa[index]*gx*t86683* \
               t86657*t86675*t86659)*(4.0/9.0))+rho_a[index]*t86896*(t86910+t86912+t86906-t86819-t86828-t86550*t86644* \
               (t86910-t86911+t86912-t86904+t86906-t86819-t86828-t86909+t86816*t86647*t86648*t86897*2.0+a1f*c*c0f* \
               t86814*t86645*(8.0/9.0)))-rho_a[index]*t86863*(ccaa1*gamma_aa[index]*gcaa*t86720*t86866*(8.8E1/9.0) \
               -ccaa1*t86719*t86657*t86658*t86876*2.4E1+ccaa2*t86719*t86657*t86658*t86875*(3.04E2/9.0)-ccaa2*t86692* \
               t86657*t86658*t86885*t86879*(3.2E1/3.0)-ccaa2*t86660*t86657*t86658*t86885*(gamma_aa[index]*gcaa*t86720* \
               (1.76E2/9.0)+t86719*t86657*t86658*(3.04E2/9.0))+ccaa2*t86660*t86657*t86658*1.0/(t86874*t86874*t86874) \
               *(t86879*t86879)*2.0+ccaa3*gamma_aa[index]*gcaa*t86718*t86871*t86657*t86658*7.2E1+ccaa1*gamma_aa[index]* \
               gcaa*t86718*t86657*t86658*1.0/(t86865*t86865*t86865)*(1.28E2/9.0)+ccaa3*gamma_aa[index]*gcaa*1.0/(t86870* \
               t86870*t86870)*t86657*t86658*(t86883*t86883)*t86659*2.0-ccaa3*gamma_aa[index]*gcaa*t86657*t86658*t86659* \
               t86884*(gamma_aa[index]*gcaa*t86720*(8.8E1/3.0)+t86719*t86657*t86658*(3.04E2/3.0)+gamma_aa[index]* \
               gcaa*t86718*t86657*t86658*7.2E1)-ccaa3*gamma_aa[index]*gcaa*t86657*t86693*t86658*t86883*t86884*1.6E1) \
               -rho_a[index]*t86891*t86892*2.0;
        } else if (rho_a[index] > cutoff_) {
            double t90829 = 1.0/pow(rho_a[index],1.0/3.0);
            double t90830 = c*t90829;
            double t90831 = sqrt(t90830);
            double t90832 = b1f*t90831;
            double t90833 = pow(t90830,3.0/2.0);
            double t90834 = b3f*t90833;
            double t90835 = c*c;
            double t90836 = 1.0/pow(rho_a[index],2.0/3.0);
            double t90837 = b4f*t90835*t90836;
            double t90838 = b2f*c*t90829;
            double t90839 = t90832+t90834+t90837+t90838;
            double t90840 = 1.0/pow(rho_a[index],4.0/3.0);
            double t90841 = b1p*t90831;
            double t90842 = b3p*t90833;
            double t90843 = b4p*t90835*t90836;
            double t90844 = b2p*c*t90829;
            double t90845 = t90841+t90842+t90843+t90844;
            double t90846 = 1.0/pow(rho_a[index],5.0/3.0);
            double t90847 = 1.0/sqrt(t90830);
            double t90848 = 1.0/c0f;
            double t90849 = 1.0/t90839;
            double t90850 = t90848*t90849*(1.0/2.0);
            double t90851 = t90850+1.0;
            double t90852 = 1.0/c0p;
            double t90853 = 1.0/t90845;
            double t90854 = t90852*t90853*(1.0/2.0);
            double t90855 = t90854+1.0;
            double t90856 = a1p*c*t90829;
            double t90857 = t90856+1.0;
            double t90858 = 1.0/t90855;
            double t90859 = 1.0/(t90845*t90845);
            double t90860 = b4p*t90835*t90846*(2.0/3.0);
            double t90861 = b2p*c*t90840*(1.0/3.0);
            double t90862 = b1p*c*t90840*t90847*(1.0/6.0);
            double t90863 = b3p*c*t90831*t90840*(1.0/2.0);
            double t90864 = t90860+t90861+t90862+t90863;
            double t90865 = t90864*t90857*t90858*t90859;
            double t90866 = log(t90855);
            double t90867 = 1.0/pow(rho_a[index],8.0/3.0);
            double t90868 = gamma_aa[index]*gamma_aa[index];
            double t90869 = gcaa*gcaa;
            double t90870 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]);
            double t90871 = 1.0/pow(rho_a[index],1.6E1/3.0);
            double t90872 = pow(2.0,1.0/3.0);
            double t90873 = t90872*2.0;
            double t90874 = t90873-2.0;
            double t90875 = two_13*2.0;
            double t90876 = t90875-2.0;
            double t90877 = 1.0/t90876;
            double t90878 = log(t90851);
            double t90879 = a1f*c*t90829;
            double t90880 = t90879+1.0;
            double t90881 = gamma_aa[index]*gcaa*t90867;
            double t90882 = t90881+1.0;
            double t90883 = 1.0/t90882;
            double t90884 = gamma_aa[index]*gcaa*t90867*3.0;
            double t90885 = gamma_aa[index]*gcaa*t90870*t90868*t90869;
            double t90886 = t90871*t90868*t90869*3.0;
            double t90887 = t90884+t90885+t90886+1.0;
            double t90888 = 1.0/t90887;
            double t90889 = gamma_aa[index]*gcaa*t90867*2.0;
            double t90890 = t90871*t90868*t90869;
            double t90891 = t90890+t90889+1.0;
            double t90892 = 1.0/t90891;
            double t90893 = 1.0/pow(rho_a[index],1.9E1/3.0);
            double t90894 = 1.0/pow(rho_a[index],1.1E1/3.0);
            double t90895 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]*rho_a[index]);
            double t90896 = c0f*t90880*t90878*2.0;
            double t90897 = c0p*t90857*t90866*2.0;
            double t90898 = 1.0/pow(rho_a[index],1.0E1);
            double t90899 = 1.0/pow(rho_a[index],2.2E1/3.0);
            double t90900 = 1.0/(t90882*t90882);
            double t90901 = gamma_aa[index]*gcaa*t90894*(1.6E1/3.0);
            double t90902 = t90893*t90868*t90869*(1.6E1/3.0);
            double t90903 = t90901+t90902;
            double t90904 = gamma_aa[index]*gcaa*t90894*8.0;
            double t90905 = gamma_aa[index]*gcaa*t90868*t90895*t90869*8.0;
            double t90906 = t90893*t90868*t90869*1.6E1;
            double t90907 = t90904+t90905+t90906;
            double t90908 = 1.0/(t90887*t90887);
            double t90909 = 1.0/pow(rho_a[index],1.4E1/3.0);
            double t90910 = 1.0/(t90891*t90891);
            double t90911 = 1.0/t90851;
            double t90912 = 1.0/(t90839*t90839);
            double t90913 = b4f*t90835*t90846*(2.0/3.0);
            double t90914 = b2f*c*t90840*(1.0/3.0);
            double t90915 = b1f*c*t90840*t90847*(1.0/6.0);
            double t90916 = b3f*c*t90831*t90840*(1.0/2.0);
            double t90917 = t90913+t90914+t90915+t90916;
            double t90918 = a1f*c*c0f*t90840*t90878*(2.0/3.0);
            double t90919 = a1p*c*c0p*t90840*t90866*(2.0/3.0);
            double t90920 = ccaa1*gamma_aa[index]*gcaa*t90883*t90894*(8.0/3.0);
            double t90921 = ccaa3*gamma_aa[index]*gcaa*t90868*t90895*t90869*t90888*8.0;
            double t90922 = ccaa2*t90892*t90893*t90868*t90869*(1.6E1/3.0);
            double t90923 = t90920+t90921+t90922-ccaa1*t90900*t90893*t90868*t90869*(8.0/3.0)-ccaa2*t90910*t90903* \
               t90871*t90868*t90869-ccaa3*gamma_aa[index]*gcaa*t90870*t90907*t90908*t90868*t90869;
            double t90924 = ccaa1*gamma_aa[index]*gcaa*t90883*t90867;
            double t90925 = ccaa3*gamma_aa[index]*gcaa*t90870*t90868*t90869*t90888;
            double t90926 = ccaa2*t90871*t90892*t90868*t90869;
            double t90927 = ccaa0+t90924+t90925+t90926;
            double t90928 = 1.0/pow(rho_a[index],7.0/3.0);
            double t90929 = 1.0/pow(t90830,3.0/2.0);
            double t90930 = t90917*t90917;
            double t90931 = t90864*t90864;
            double t90932 = 1.0/(t90845*t90845*t90845);
            double t90933 = t90931*t90932*t90857*t90858*2.0;
            double t90934 = b4p*t90835*t90867*(1.0E1/9.0);
            double t90935 = b2p*c*t90928*(4.0/9.0);
            double t90936 = b3p*t90835*t90847*t90867*(1.0/1.2E1);
            double t90937 = b1p*c*t90847*t90928*(2.0/9.0);
            double t90938 = b3p*c*t90831*t90928*(2.0/3.0);
            double t90939 = t90934+t90935+t90936+t90937+t90938-b1p*t90835*t90929*t90867*(1.0/3.6E1);
            double t90940 = 1.0/(t90855*t90855);
            double t90941 = 1.0/(t90845*t90845*t90845*t90845);
            double t90942 = a1p*c*c0p*t90928*t90866*(8.0/9.0);
            double t90943 = pow(rho_a[index],5.0/3.0);
            double t90944 = C_k*t90943;
            double t90945 = tau_a[index]*1.0E20;
            double t90946 = 1.0/tau_a[index];
            double t90947 = -t90944+t90945;
            double t90948 = ( (t90947 > 0.0) ?  1.0 : 0.0 ) ;
            double t90949 = C_k*t90943*t90946*t90948;
            double t90950 = t90944-t90945;
            double t90951 = ( (t90950 > 0.0) ?  1.0 : 0.0 ) ;
            double t90952 = t90951*1.0E20;
            double t90953 = t90952+t90949-1.0;
            double t90954 = t90953*t90953;
            double t90955 = t90952+t90949+1.0;
            double t90956 = t90954*t90954;
            double t90957 = gx*gx;
            double t90958 = gamma_aa[index]*gx*t90867;
            double t90959 = t90958+1.0;
            double t90973 = gamma_aa[index]*gx*t90894*(1.6E1/3.0);
            double t90974 = t90893*t90957*t90868*(1.6E1/3.0);
            double t90960 = t90973+t90974;
            double t90961 = gamma_aa[index]*gx*t90867*2.0;
            double t90962 = t90871*t90957*t90868;
            double t90963 = t90961+t90962+1.0;
            double t90964 = gamma_aa[index]*gx*t90867*3.0;
            double t90965 = gamma_aa[index]*gx*t90870*t90957*t90868;
            double t90966 = t90871*t90957*t90868*3.0;
            double t90967 = t90964+t90965+t90966+1.0;
            double t90968 = 1.0/(t90967*t90967);
            double t90969 = gamma_aa[index]*gx*t90894*8.0;
            double t90970 = gamma_aa[index]*gx*t90957*t90868*t90895*8.0;
            double t90971 = t90893*t90957*t90868*1.6E1;
            double t90972 = t90970+t90971+t90969;
            double t90975 = 1.0/(t90963*t90963);
            double t90976 = 1.0/t90959;
            double t90977 = 1.0/t90967;
            double t90978 = 1.0/t90963;
            double t90979 = 1.0/(t90959*t90959);
            double t90980 = 0.0 ;
            double t90981 = pow(rho_a[index],2.0/3.0);
            double t90982 = 1.0/t90955;
            double t90983 = C_k*t90980*t90981*(5.0E20/3.0);
            double t90984 = C_k*C_k;
            double t90985 = pow(rho_a[index],7.0/3.0);
            double t90986 = C_k*t90981*t90946*t90948*(5.0/3.0);
            double t90988 = t90980*t90946*t90984*t90985*(5.0/3.0);
            double t90987 = t90983+t90986-t90988;
            double t90989 = 1.0/(t90955*t90955*t90955);
            double t90990 = 1.0/(t90955*t90955*t90955*t90955*t90955);
            double t90991 = pow(rho_a[index],4.0/3.0);
            double t90992 = rho_a[index]*rho_a[index];
            double t90993 = 0.0 ;
            double t90994 = 1.0/(t90955*t90955);
            double t90995 = t90987*t90987;
            double t90996 = 1.0/(t90955*t90955*t90955*t90955);
            double t90997 = 1.0/(t90955*t90955*t90955*t90955*t90955*t90955);
            double t90998 = C_k*t90980*t90829*(1.0E21/9.0);
            double t90999 = C_k*rho_a[index]*t90946*t90992*t90984*t90993*(2.5E1/9.0);
            double t91000 = C_k*t90829*t90946*t90948*(1.0E1/9.0);
            double t91002 = t90991*t90984*t90993*(2.5E21/9.0);
            double t91003 = t90980*t90946*t90991*t90984*(2.0E1/3.0);
            double t91001 = t90998+t90999+t91000-t91002-t91003;
            double t91004 = 1.0/(t90959*t90959*t90959);
            double t91005 = t90960*t90960;
            double t91006 = 1.0/(t90963*t90963*t90963);
            double t91007 = gamma_aa[index]*gx*t90909*(8.8E1/3.0);
            double t91008 = gamma_aa[index]*gx*t90957*t90868*t90898*7.2E1;
            double t91009 = t90957*t90868*t90899*(3.04E2/3.0);
            double t91010 = t91007+t91008+t91009;
            double t91011 = t90972*t90972;
            double t91012 = 1.0/(t90967*t90967*t90967);
            double t91013 = gamma_aa[index]*gx*t90909*(1.76E2/9.0);
            double t91014 = t90957*t90868*t90899*(3.04E2/9.0);
            double t91015 = t91013+t91014;
            double t91016 = X-1.0;
            double t91017 = t90953*t90990*t90956;
            double t91018 = cxnl1*gamma_aa[index]*gx*t90867*t90976;
            double t91019 = cxnl3*gamma_aa[index]*gx*t90870*t90957*t90868*t90977;
            double t91020 = cxnl2*t90871*t90957*t90868*t90978;
            double t91021 = cxnl0+t91020+t91018+t91019;
            double t91022 = t90953*t90982;
            double t91023 = t91022+t91017-t90953*t90954*t90989*2.0;
            double t91024 = cxnl1*gamma_aa[index]*gx*t90894*t90976*(8.0/3.0);
            double t91025 = cxnl3*gamma_aa[index]*gx*t90957*t90868*t90895*t90977*8.0;
            double t91026 = cxnl2*t90893*t90957*t90868*t90978*(1.6E1/3.0);
            double t91027 = t91024+t91025+t91026-cxnl1*t90893*t90957*t90868*t90979*(8.0/3.0)-cxnl2*t90960*t90871* \
               t90957*t90975*t90868-cxnl3*gamma_aa[index]*gx*t90870*t90972*t90957*t90868*t90968;
            double t91028 = t90982*t90987;
            double t91029 = t90953*t90954*t90987*t90996*6.0;
            double t91030 = t90990*t90956*t90987*5.0;
            double t91031 = t91030+t91028+t91029-t90953*t90994*t90987-t90954*t90987*t90989*6.0-t90953*t90956* \
               t90987*t90997*5.0;
            v_rho_a_rho_a_[index] = t90923*(t90897+t90874*t90877*(t90896-c0p*t90857*t90866*2.0))*2.0+t90927*(- \
               t90865+t90919+t90874*t90877*(t90918+t90865-t90911*t90912*t90880*t90917-a1p*c*c0p*t90840*t90866*(2.0/ \
               3.0)))*2.0+rho_a[index]*t90927*(-t90933-t90942+t90874*t90877*(t90933+t90942-t90857*t90858*t90939*t90859- \
               t90911*t90930*t90880*1.0/(t90839*t90839*t90839)*2.0+t90911*t90912*t90880*(b2f*c*t90928*(4.0/9.0)+b4f* \
               t90835*t90867*(1.0E1/9.0)+b1f*c*t90847*t90928*(2.0/9.0)+b3f*c*t90831*t90928*(2.0/3.0)-b1f*t90835*t90929* \
               t90867*(1.0/3.6E1)+b3f*t90835*t90847*t90867*(1.0/1.2E1))+t90930*1.0/(t90851*t90851)*t90880*1.0/(t90839* \
               t90839*t90839*t90839)*t90848*(1.0/2.0)-a1f*c*c0f*t90928*t90878*(8.0/9.0)-t90931*t90940*t90941*t90852* \
               t90857*(1.0/2.0)+a1f*c*t90911*t90840*t90912*t90917*(2.0/3.0)-a1p*c*t90840*t90864*t90858*t90859*(2.0/ \
               3.0))+t90857*t90858*t90939*t90859+t90931*t90940*t90941*t90852*t90857*(1.0/2.0)+a1p*c*t90840*t90864* \
               t90858*t90859*(2.0/3.0))-rho_a[index]*t90923*(-t90865+t90919+t90874*t90877*(t90918+t90865-t90919-t90911* \
               t90912*t90880*t90917))*2.0-rho_a[index]*(t90897+t90874*t90877*(t90896-t90897))*(ccaa1*gamma_aa[index]* \
               gcaa*t90909*t90883*(8.8E1/9.0)-ccaa1*t90900*t90868*t90869*t90899*2.4E1+ccaa2*t90892*t90868*t90869* \
               t90899*(3.04E2/9.0)-ccaa2*t90910*t90903*t90893*t90868*t90869*(3.2E1/3.0)-ccaa2*t90910*t90871*t90868* \
               t90869*(gamma_aa[index]*gcaa*t90909*(1.76E2/9.0)+t90868*t90869*t90899*(3.04E2/9.0))+ccaa2*(t90903* \
               t90903)*t90871*1.0/(t90891*t90891*t90891)*t90868*t90869*2.0+ccaa3*gamma_aa[index]*gcaa*t90868*t90869* \
               t90888*t90898*7.2E1+ccaa1*gamma_aa[index]*gcaa*1.0/(t90882*t90882*t90882)*t90868*t90869*t90898*(1.28E2/ \
               9.0)+ccaa3*gamma_aa[index]*gcaa*t90870*(t90907*t90907)*t90868*t90869*1.0/(t90887*t90887*t90887)*2.0- \
               ccaa3*gamma_aa[index]*gcaa*t90870*t90908*t90868*t90869*(gamma_aa[index]*gcaa*t90909*(8.8E1/3.0)+t90868* \
               t90869*t90899*(3.04E2/3.0)+gamma_aa[index]*gcaa*t90868*t90869*t90898*7.2E1)-ccaa3*gamma_aa[index]* \
               gcaa*t90907*t90908*t90868*t90895*t90869*1.6E1)-c0*t90836*t91016*(cx0+t91021*t91023+cx1*gamma_aa[index]* \
               gx*t90867*t90976+cx2*t90871*t90957*t90868*t90978+cx3*gamma_aa[index]*gx*t90870*t90957*t90868*t90977) \
               *(4.0/9.0)-c0*t90991*t91016*((t91017+t90982*(t90949+ ( (t90944-tau_a[index]*1.0E20 > 0.0) ? 1.0*1.0E20  \
               : 0.0 ) -1.0)-t90953*t90954*t90989*2.0)*(cxnl1*gamma_aa[index]*gx*t90909*t90976*(8.8E1/9.0)-cxnl1* \
               t90957*t90868*t90979*t90899*2.4E1+cxnl2*t90957*t90868*t90978*t90899*(3.04E2/9.0)-cxnl2*t90960*t90893* \
               t90957*t90975*t90868*(3.2E1/3.0)-cxnl2*t90871*t90957*t90975*t90868*t91015+cxnl2*t90871*t90957*t90868* \
               t91005*t91006*2.0+cxnl3*gamma_aa[index]*gx*t90957*t90868*t90977*t90898*7.2E1+cxnl1*gamma_aa[index]* \
               gx*t90957*t90868*t90898*t91004*(1.28E2/9.0)-cxnl3*gamma_aa[index]*gx*t90972*t90957*t90868*t90895*t90968* \
               1.6E1-cxnl3*gamma_aa[index]*gx*t90870*t90957*t90868*t90968*t91010+cxnl3*gamma_aa[index]*gx*t90870* \
               t90957*t90868*t91011*t91012*2.0)-t91031*t91027*2.0-t91021*(t90994*t90995*2.0-t90982*t91001-t90954* \
               t90995*t90996*3.6E1+t90953*t90995*t90989*1.0E1+t90956*t90995*t90997*5.0E1-t90990*t90956*t91001*5.0+ \
               t90953*t90994*t91001+t90954*t90989*t91001*6.0+t90953*t90954*t90990*t90995*4.0-t90953*t90954*t90996* \
               t91001*6.0+t90953*t90956*t90997*t91001*5.0-t90953*1.0/(t90955*t90955*t90955*t90955*t90955*t90955*t90955) \
               *t90956*t90995*3.0E1)+cx1*gamma_aa[index]*gx*t90909*t90976*(8.8E1/9.0)-cx1*t90957*t90868*t90979*t90899* \
               2.4E1+cx2*t90957*t90868*t90978*t90899*(3.04E2/9.0)-cx2*t90960*t90893*t90957*t90975*t90868*(3.2E1/3.0) \
               -cx2*t90871*t90957*t90975*t90868*t91015+cx2*t90871*t90957*t90868*t91005*t91006*2.0+cx1*gamma_aa[index]* \
               gx*t90957*t90868*t90898*t91004*(1.28E2/9.0)+cx3*gamma_aa[index]*gx*t90957*t90868*t90977*t90898*7.2E1- \
               cx3*gamma_aa[index]*gx*t90972*t90957*t90868*t90895*t90968*1.6E1-cx3*gamma_aa[index]*gx*t90870*t90957* \
               t90868*t90968*t91010+cx3*gamma_aa[index]*gx*t90870*t90957*t90868*t91011*t91012*2.0)-c0*pow(rho_a[index],1.0/ \
               3.0)*t91016*(t91021*t91031-t91023*t91027-cx1*gamma_aa[index]*gx*t90894*t90976*(8.0/3.0)+cx1*t90893* \
               t90957*t90868*t90979*(8.0/3.0)-cx2*t90893*t90957*t90868*t90978*(1.6E1/3.0)+cx2*t90960*t90871*t90957* \
               t90975*t90868-cx3*gamma_aa[index]*gx*t90957*t90868*t90895*t90977*8.0+cx3*gamma_aa[index]*gx*t90870* \
               t90972*t90957*t90868*t90968)*(8.0/3.0);
        } else if (rho_b[index] > cutoff_) {
            v_rho_a_rho_a_[index] = 0.0;
        } else {
            v_rho_a_rho_a_[index] = 0.0;
        }

        //V_rho_a_rho_b
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t86914 = 1.0/pow(rho_a[index],1.0/3.0);
            double t86915 = c*t86914;
            double t86916 = sqrt(t86915);
            double t86917 = pow(t86915,3.0/2.0);
            double t86918 = c*c;
            double t86919 = 1.0/pow(rho_a[index],2.0/3.0);
            double t86920 = 1.0/c0p;
            double t86921 = b1p*t86916;
            double t86922 = b3p*t86917;
            double t86923 = b4p*t86918*t86919;
            double t86924 = b2p*c*t86914;
            double t86925 = t86921+t86922+t86923+t86924;
            double t86926 = 1.0/t86925;
            double t86927 = t86920*t86926*(1.0/2.0);
            double t86928 = t86927+1.0;
            double t86929 = log(t86928);
            double t86930 = a1p*c*t86914;
            double t86931 = t86930+1.0;
            double t86932 = pow(2.0,1.0/3.0);
            double t86933 = t86932*2.0;
            double t86934 = t86933-2.0;
            double t86935 = two_13*2.0;
            double t86936 = t86935-2.0;
            double t86937 = 1.0/t86936;
            double t86938 = 1.0/c0f;
            double t86939 = 1.0/pow(rho_b[index],1.0/3.0);
            double t86940 = c*t86939;
            double t86941 = sqrt(t86940);
            double t86942 = pow(t86940,3.0/2.0);
            double t86943 = 1.0/pow(rho_b[index],2.0/3.0);
            double t86944 = b1p*t86941;
            double t86945 = b3p*t86942;
            double t86946 = b4p*t86943*t86918;
            double t86947 = b2p*c*t86939;
            double t86948 = t86944+t86945+t86946+t86947;
            double t86949 = 1.0/t86948;
            double t86950 = t86920*t86949*(1.0/2.0);
            double t86951 = t86950+1.0;
            double t86952 = log(t86951);
            double t86953 = a1p*c*t86939;
            double t86954 = t86953+1.0;
            double t86955 = c0p*t86952*t86954*2.0;
            double t86956 = rho_a[index]+rho_b[index];
            double t86957 = 1.0/pow(t86956,1.0/3.0);
            double t86958 = c*t86957;
            double t86959 = sqrt(t86958);
            double t86960 = pow(t86958,3.0/2.0);
            double t86961 = 1.0/pow(t86956,2.0/3.0);
            double t86962 = b1p*t86959;
            double t86963 = b3p*t86960;
            double t86964 = b4p*t86961*t86918;
            double t86965 = b2p*c*t86957;
            double t86966 = t86962+t86963+t86964+t86965;
            double t86967 = 1.0/t86966;
            double t86968 = t86920*t86967*(1.0/2.0);
            double t86969 = t86968+1.0;
            double t86970 = log(t86969);
            double t86971 = a1p*c*t86957;
            double t86972 = t86971+1.0;
            double t86973 = c0p*t86970*t86972*2.0;
            double t86974 = rho_a[index]-rho_b[index];
            double t86975 = t86974*t86974;
            double t86976 = 1.0/t86956;
            double t86977 = t86974*t86976;
            double t86978 = 1.0/(t86956*t86956*t86956*t86956);
            double t86979 = t86975*t86975;
            double t86980 = t86977+1.0;
            double t86981 = pow(t86980,4.0/3.0);
            double t86982 = -t86977+1.0;
            double t86983 = pow(t86982,4.0/3.0);
            double t86984 = t86981+t86983-2.0;
            double t86985 = gcab*gcab;
            double t86986 = 1.0/pow(rho_a[index],1.1E1/3.0);
            double t86987 = 1.0/pow(rho_b[index],1.1E1/3.0);
            double t86988 = 1.0/pow(rho_a[index],8.0/3.0);
            double t86989 = gamma_aa[index]*t86988*(1.0/2.0);
            double t86990 = 1.0/pow(rho_b[index],8.0/3.0);
            double t86991 = gamma_bb[index]*t86990*(1.0/2.0);
            double t86992 = t86991+t86989;
            double t86993 = t86992*t86992;
            double t86994 = t86993*t86985*3.0;
            double t86995 = gcab*t86992*t86993*t86985;
            double t86996 = gcab*t86992*3.0;
            double t86997 = t86994+t86995+t86996+1.0;
            double t86998 = t86993*t86985;
            double t86999 = gcab*t86992*2.0;
            double t87000 = t86998+t86999+1.0;
            double t87001 = gamma_aa[index]*gcab*t86986*4.0;
            double t87002 = gamma_aa[index]*gcab*t86993*t86985*t86986*4.0;
            double t87003 = gamma_aa[index]*t86992*t86985*t86986*8.0;
            double t87004 = t87001+t87002+t87003;
            double t87005 = 1.0/(t86997*t86997);
            double t87006 = gamma_bb[index]*gcab*t86987*4.0;
            double t87007 = gamma_bb[index]*gcab*t86993*t86985*t86987*4.0;
            double t87008 = gamma_bb[index]*t86992*t86985*t86987*8.0;
            double t87009 = t87006+t87007+t87008;
            double t87010 = gamma_aa[index]*gcab*t86986*(8.0/3.0);
            double t87011 = gamma_aa[index]*t86992*t86985*t86986*(8.0/3.0);
            double t87012 = t87010+t87011;
            double t87013 = gamma_bb[index]*gcab*t86987*(8.0/3.0);
            double t87014 = gamma_bb[index]*t86992*t86985*t86987*(8.0/3.0);
            double t87015 = t87013+t87014;
            double t87016 = 1.0/(t87000*t87000);
            double t87017 = gcab*t86992;
            double t87018 = t87017+1.0;
            double t87019 = 1.0/(t87018*t87018);
            double t87020 = 1.0/t87000;
            double t87021 = 1.0/t86997;
            double t87022 = 1.0/pow(t86956,4.0/3.0);
            double t87023 = b1f*t86959;
            double t87024 = b3f*t86960;
            double t87025 = b4f*t86961*t86918;
            double t87026 = b2f*c*t86957;
            double t87027 = t87023+t87024+t87025+t87026;
            double t87028 = 1.0/t87027;
            double t87029 = t86938*t87028*(1.0/2.0);
            double t87030 = t87029+1.0;
            double t87031 = log(t87030);
            double t87032 = a1f*c*t86957;
            double t87033 = t87032+1.0;
            double t87035 = c0f*t87031*t87033*2.0;
            double t87034 = t86973-t87035;
            double t87036 = 1.0/(t86956*t86956);
            double t87063 = t86974*t87036;
            double t87037 = t86976-t87063;
            double t87038 = 1.0/pow(t86956,5.0/3.0);
            double t87039 = 1.0/sqrt(t86958);
            double t87040 = 1.0/t86969;
            double t87041 = 1.0/(t86966*t86966);
            double t87042 = b4p*t86918*t87038*(2.0/3.0);
            double t87043 = b2p*c*t87022*(1.0/3.0);
            double t87044 = b1p*c*t87022*t87039*(1.0/6.0);
            double t87045 = b3p*c*t86959*t87022*(1.0/2.0);
            double t87046 = t87042+t87043+t87044+t87045;
            double t87047 = t86972*t87040*t87041*t87046;
            double t87048 = 1.0/d2fz0;
            double t87049 = 1.0/Aa;
            double t87050 = b1a*t86959;
            double t87051 = b3a*t86960;
            double t87052 = b4a*t86961*t86918;
            double t87053 = b2a*c*t86957;
            double t87054 = t87050+t87051+t87052+t87053;
            double t87055 = 1.0/t87054;
            double t87056 = t87055*t87049*(1.0/2.0);
            double t87057 = t87056+1.0;
            double t87058 = log(t87057);
            double t87059 = a1a*c*t86957;
            double t87060 = t87059+1.0;
            double t87061 = 1.0/(t86956*t86956*t86956*t86956*t86956);
            double t87062 = pow(t86980,1.0/3.0);
            double t87064 = t87062*t87037*(4.0/3.0);
            double t87065 = pow(t86982,1.0/3.0);
            double t87143 = t87037*t87065*(4.0/3.0);
            double t87066 = -t87143+t87064;
            double t87067 = t86978*t86979;
            double t87068 = t87067-1.0;
            double t87069 = a1f*c*t86914;
            double t87070 = t87069+1.0;
            double t87071 = b1f*t86916;
            double t87072 = b3f*t86917;
            double t87073 = b4f*t86918*t86919;
            double t87074 = b2f*c*t86914;
            double t87075 = t87071+t87072+t87073+t87074;
            double t87076 = 1.0/t87075;
            double t87077 = t86938*t87076*(1.0/2.0);
            double t87078 = t87077+1.0;
            double t87079 = 1.0/pow(rho_a[index],4.0/3.0);
            double t87080 = 1.0/pow(rho_a[index],5.0/3.0);
            double t87081 = 1.0/sqrt(t86915);
            double t87082 = log(t87078);
            double t87083 = 1.0/t86928;
            double t87084 = 1.0/(t86925*t86925);
            double t87085 = b4p*t86918*t87080*(2.0/3.0);
            double t87086 = b2p*c*t87079*(1.0/3.0);
            double t87087 = b1p*c*t87081*t87079*(1.0/6.0);
            double t87088 = b3p*c*t86916*t87079*(1.0/2.0);
            double t87089 = t87085+t87086+t87087+t87088;
            double t87090 = t86931*t87083*t87084*t87089;
            double t87091 = c0f*t87070*t87082*2.0;
            double t87092 = c0p*t86931*t86929*2.0;
            double t87093 = Aa*t86937*t86984*t87060*t87048*t87058*t87068*2.0;
            double t87094 = 1.0/t87018;
            double t87095 = t86937*t86974*t86975*t86984*t86978*t87034*4.0;
            double t87096 = t86976+t87063;
            double t87097 = 1.0/t87030;
            double t87098 = 1.0/(t87027*t87027);
            double t87099 = b4f*t86918*t87038*(2.0/3.0);
            double t87100 = b2f*c*t87022*(1.0/3.0);
            double t87101 = b1f*c*t87022*t87039*(1.0/6.0);
            double t87102 = b3f*c*t86959*t87022*(1.0/2.0);
            double t87103 = t87100+t87101+t87102+t87099;
            double t87104 = a1f*c*c0f*t87022*t87031*(2.0/3.0);
            double t87105 = a1p*c*c0p*t86970*t87022*(2.0/3.0);
            double t87106 = t86979*t87061*4.0;
            double t87107 = t87062*t87096*(4.0/3.0);
            double t87142 = t87065*t87096*(4.0/3.0);
            double t87108 = -t87142+t87107;
            double t87109 = 1.0/t87057;
            double t87110 = 1.0/(t87054*t87054);
            double t87111 = b4a*t86918*t87038*(2.0/3.0);
            double t87112 = b2a*c*t87022*(1.0/3.0);
            double t87113 = b1a*c*t87022*t87039*(1.0/6.0);
            double t87114 = b3a*c*t86959*t87022*(1.0/2.0);
            double t87115 = t87111+t87112+t87113+t87114;
            double t87116 = Aa*a1a*c*t86937*t86984*t87022*t87048*t87058*t87068*(2.0/3.0);
            double t87117 = a1f*c*t86939;
            double t87118 = t87117+1.0;
            double t87119 = b1f*t86941;
            double t87120 = b3f*t86942;
            double t87121 = b4f*t86943*t86918;
            double t87122 = b2f*c*t86939;
            double t87123 = t87120+t87121+t87122+t87119;
            double t87124 = 1.0/t87123;
            double t87125 = t86938*t87124*(1.0/2.0);
            double t87126 = t87125+1.0;
            double t87127 = 1.0/pow(rho_b[index],4.0/3.0);
            double t87128 = 1.0/pow(rho_b[index],5.0/3.0);
            double t87129 = 1.0/sqrt(t86940);
            double t87130 = log(t87126);
            double t87131 = 1.0/t86951;
            double t87132 = 1.0/(t86948*t86948);
            double t87133 = b4p*t86918*t87128*(2.0/3.0);
            double t87134 = b2p*c*t87127*(1.0/3.0);
            double t87135 = b1p*c*t87127*t87129*(1.0/6.0);
            double t87136 = b3p*c*t86941*t87127*(1.0/2.0);
            double t87137 = t87133+t87134+t87135+t87136;
            double t87138 = t86954*t87131*t87132*t87137;
            double t87139 = t86955-c0f*t87130*t87118*2.0;
            double t87140 = 1.0/pow(t86956,7.0/3.0);
            double t87141 = 1.0/pow(t86956,8.0/3.0);
            double t87159 = t87103*t87033*t87097*t87098;
            double t87144 = t87104-t87105+t87047-t87159;
            double t87145 = t87046*t87046;
            double t87146 = 1.0/pow(t86958,3.0/2.0);
            double t87147 = b4p*t86918*t87141*(1.0E1/9.0);
            double t87148 = b2p*c*t87140*(4.0/9.0);
            double t87149 = b1p*c*t87140*t87039*(2.0/9.0);
            double t87150 = b3p*c*t86959*t87140*(2.0/3.0);
            double t87151 = b3p*t86918*t87141*t87039*(1.0/1.2E1);
            double t87152 = t87150+t87151+t87147+t87148+t87149-b1p*t86918*t87141*t87146*(1.0/3.6E1);
            double t87153 = t86972*t87040*t87041*t87152;
            double t87154 = 1.0/(t86966*t86966*t86966);
            double t87155 = t87103*t87103;
            double t87156 = 1.0/(t86969*t86969);
            double t87157 = 1.0/(t86966*t86966*t86966*t86966);
            double t87158 = t86920*t86972*t87145*t87156*t87157*(1.0/2.0);
            double t87160 = 1.0/(t86956*t86956*t86956);
            double t87161 = a1p*c*t87022*t87040*t87041*t87046*(2.0/3.0);
            double t87162 = 1.0/(t86956*t86956*t86956*t86956*t86956*t86956);
            double t87163 = t86974*t86975*t86978*4.0;
            double t87164 = t87106+t87163;
            double t87165 = t86974*t87160*t87065*(8.0/3.0);
            double t87166 = 1.0/pow(t86980,2.0/3.0);
            double t87167 = t87037*t87166*t87096*(4.0/9.0);
            double t87168 = 1.0/pow(t86982,2.0/3.0);
            double t87169 = t87037*t87096*t87168*(4.0/9.0);
            double t87170 = t87165+t87167+t87169-t86974*t87160*t87062*(8.0/3.0);
            double t87171 = t87115*t87115;
            double t87172 = t87106-t87163;
            double t87173 = t86972*t87040*t87145*t87154*2.0;
            double t87174 = a1p*c*c0p*t86970*t87140*(8.0/9.0);
            double t87175 = Aa*t86937*t86984*t87060*t87164*t87048*t87058*2.0;
            double t87176 = Aa*t86937*t87060*t87108*t87048*t87058*t87068*2.0;
            v_rho_a_rho_b_[index] = -(rho_b[index]*(t86955-t86934*t86937*t87139)+rho_a[index]*(t87092+t86934* \
               t86937*(t87091-c0p*t86931*t86929*2.0))-t86956*(t86973+t87093-t86937*t86984*t86978*t86979*t87034))* \
               (ccab2*t86993*t86985*1.0/(t87000*t87000*t87000)*t87012*t87015*-2.0+ccab3*gcab*t86992*t86993*t86985* \
               t87005*(gamma_aa[index]*gamma_bb[index]*t86985*t86986*t86987*(3.2E1/3.0)+gamma_aa[index]*gamma_bb[index]* \
               gcab*t86992*t86985*t86986*t86987*(3.2E1/3.0))-ccab2*gamma_aa[index]*gamma_bb[index]*t86985*t86986* \
               t86987*t87020*(3.2E1/9.0)+ccab1*gamma_aa[index]*gamma_bb[index]*t86985*t86986*t86987*t87019*(3.2E1/ \
               9.0)+ccab2*gamma_aa[index]*t86992*t86985*t86986*t87015*t87016*(8.0/3.0)+ccab2*gamma_bb[index]*t86992* \
               t86985*t86987*t87012*t87016*(8.0/3.0)+ccab2*gamma_aa[index]*gamma_bb[index]*t86993*(t86985*t86985) \
               *t86986*t86987*t87016*(3.2E1/9.0)-ccab3*gcab*t86992*t86993*t86985*1.0/(t86997*t86997*t86997)*t87004* \
               t87009*2.0+ccab3*gamma_bb[index]*gcab*t86993*t86985*t86987*t87004*t87005*4.0+ccab3*gamma_aa[index]* \
               gcab*t86993*t86985*t86986*t87005*t87009*4.0-ccab3*gamma_aa[index]*gamma_bb[index]*gcab*t86992*t86985* \
               t86986*t86987*t87021*(3.2E1/3.0)-ccab1*gamma_aa[index]*gamma_bb[index]*gcab*t86992*t86985*t86986*t86987* \
               1.0/(t87018*t87018*t87018)*(3.2E1/9.0))+(ccab0+ccab1*gcab*t86992*t87094+ccab2*t86993*t86985*t87020+ \
               ccab3*gcab*t86992*t86993*t86985*t87021)*(t87175+t87176-t86956*(-t87161-t87153+t87173+t87174-t87158+ \
               t86937*t86984*t86978*t86979*(t87161+t87153-t87173-t87174+t87158+t87033*1.0/(t87027*t87027*t87027)* \
               t87155*t87097*2.0-t87033*t87097*t87098*(b2f*c*t87140*(4.0/9.0)+b4f*t86918*t87141*(1.0E1/9.0)+b1f*c* \
               t87140*t87039*(2.0/9.0)+b3f*c*t86959*t87140*(2.0/3.0)-b1f*t86918*t87141*t87146*(1.0/3.6E1)+b3f*t86918* \
               t87141*t87039*(1.0/1.2E1))-t86938*1.0/(t87030*t87030)*t87033*1.0/(t87027*t87027*t87027*t87027)*t87155* \
               (1.0/2.0)+a1f*c*c0f*t87031*t87140*(8.0/9.0)-a1f*c*t87022*t87103*t87097*t87098*(2.0/3.0))+t86937*t86975* \
               t86984*t86978*t87034*1.2E1-t86937*t86984*t86979*t87034*t87162*2.0E1+t86937*t86984*t86979*t87061*t87144* \
               8.0+t86937*t86978*t86979*t87034*t87170+t86937*t86978*t86979*t87108*t87144-t86937*t86978*t86979*t87144* \
               t87066-t86937*t86979*t87034*t87061*t87108*4.0+t86937*t86979*t87034*t87061*t87066*4.0+t86937*t86974* \
               t86975*t86978*t87034*t87108*4.0+t86937*t86974*t86975*t86978*t87034*t87066*4.0+Aa*t86937*t87060*t87108* \
               t87172*t87048*t87058*2.0-Aa*t86937*t87060*t87170*t87048*t87058*t87068*2.0-Aa*t86937*t87060*t87164* \
               t87048*t87066*t87058*2.0-Aa*t86937*t86984*t87060*t87048*t87058*(t86975*t86978*1.2E1-t86979*t87162* \
               2.0E1)*2.0-t86937*t86984*t87110*t87060*t87115*t87109*t87172*t87048-t86937*t86984*t87110*t87060*t87115* \
               t87109*t87164*t87048-t86937*t87110*t87060*t87115*t87108*t87109*t87048*t87068+t86937*t87110*t87060* \
               t87115*t87109*t87048*t87066*t87068+t86937*t86984*t87060*1.0/(t87054*t87054*t87054)*t87171*t87109*t87048* \
               t87068*2.0-t86937*t86984*t87110*t87060*t87109*t87048*t87068*(b2a*c*t87140*(4.0/9.0)+b4a*t86918*t87141* \
               (1.0E1/9.0)+b1a*c*t87140*t87039*(2.0/9.0)+b3a*c*t86959*t87140*(2.0/3.0)-b1a*t86918*t87141*t87146*(1.0/ \
               3.6E1)+b3a*t86918*t87141*t87039*(1.0/1.2E1))+Aa*a1a*c*t86937*t86984*t87022*t87172*t87048*t87058*(2.0/ \
               3.0)+Aa*a1a*c*t86937*t86984*t87022*t87164*t87048*t87058*(2.0/3.0)+Aa*a1a*c*t86937*t86984*t87140*t87048* \
               t87058*t87068*(8.0/9.0)+Aa*a1a*c*t86937*t87022*t87108*t87048*t87058*t87068*(2.0/3.0)-Aa*a1a*c*t86937* \
               t87022*t87048*t87066*t87058*t87068*(2.0/3.0)-t86937*t86984*t87060*1.0/(t87054*t87054*t87054*t87054) \
               *t87171*t87048*1.0/(t87057*t87057)*t87049*t87068*(1.0/2.0)-a1a*c*t86937*t86984*t87110*t87022*t87115* \
               t87109*t87048*t87068*(2.0/3.0))-t86972*t87040*t87041*t87046*2.0+t86937*t86984*t86978*t86979*(t87104- \
               t87105+t87047-t87159)*2.0+a1p*c*c0p*t86970*t87022*(4.0/3.0)-t86937*t86984*t86979*t87034*t87061*8.0- \
               t86937*t86978*t86979*t87034*t87108+t86937*t86978*t86979*t87066*(t86973-t87035)-Aa*t86937*t87060*t87048* \
               t87066*t87058*t87068*2.0+Aa*t86937*t86984*t87060*t87048*t87058*(t87106-t87163)*2.0-t86937*t86984*t87110* \
               t87060*t87115*t87109*t87048*t87068*2.0+Aa*a1a*c*t86937*t86984*t87022*t87048*t87058*t87068*(4.0/3.0) \
               )+(ccab1*gamma_aa[index]*gcab*t86986*t87094*(4.0/3.0)-ccab2*t86993*t86985*t87012*t87016+ccab2*gamma_aa[index]* \
               t86992*t86985*t86986*t87020*(8.0/3.0)-ccab1*gamma_aa[index]*t86992*t86985*t86986*t87019*(4.0/3.0)+ \
               ccab3*gamma_aa[index]*gcab*t86993*t86985*t86986*t87021*4.0-ccab3*gcab*t86992*t86993*t86985*t87004* \
               t87005)*(-t86955+t86973+t87093-t86956*(t87105+t87116-t87047+t87175-t87095+t87176+t86937*t86984*t86978* \
               t86979*t87144-t86937*t86984*t86979*t87034*t87061*4.0-t86937*t86978*t86979*t87034*t87108-t86937*t86984* \
               t87110*t87060*t87115*t87109*t87048*t87068)+rho_b[index]*(-t87138+t86934*t86937*(t87138-(1.0/(t87123* \
               t87123)*t87118*(b2f*c*t87127*(1.0/3.0)+b4f*t86918*t87128*(2.0/3.0)+b1f*c*t87127*t87129*(1.0/6.0)+b3f* \
               c*t86941*t87127*(1.0/2.0)))/t87126+a1f*c*c0f*t87130*t87127*(2.0/3.0)-a1p*c*c0p*t86952*t87127*(2.0/ \
               3.0))+a1p*c*c0p*t86952*t87127*(2.0/3.0))+t86934*t86937*t87139-t86937*t86984*t86978*t86979*(t86973- \
               t87035))-(ccab1*gamma_bb[index]*gcab*t86987*t87094*(4.0/3.0)-ccab2*t86993*t86985*t87015*t87016+ccab2* \
               gamma_bb[index]*t86992*t86985*t86987*t87020*(8.0/3.0)-ccab1*gamma_bb[index]*t86992*t86985*t86987*t87019* \
               (4.0/3.0)+ccab3*gamma_bb[index]*gcab*t86993*t86985*t86987*t87021*4.0-ccab3*gcab*t86992*t86993*t86985* \
               t87005*t87009)*(-t86973+t87092-t87093+t86956*(t87105+t87116-t87047+t87095+t86937*t86984*t86978*t86979* \
               (t87104+t87047-t87103*t87033*t87097*t87098-a1p*c*c0p*t86970*t87022*(2.0/3.0))-t86937*t86984*t86979* \
               t87034*t87061*4.0+t86937*t86978*t86979*t87034*t87066-Aa*t86937*t87060*t87048*t87066*t87058*t87068* \
               2.0+Aa*t86937*t86984*t87060*t87048*t87058*(t87106-t86974*t86975*t86978*4.0)*2.0-t86937*t86984*t87110* \
               t87060*t87115*t87109*t87048*t87068)-rho_a[index]*(-t87090+t86934*t86937*(t87090-(t87070*1.0/(t87075* \
               t87075)*(b2f*c*t87079*(1.0/3.0)+b4f*t86918*t87080*(2.0/3.0)+b1f*c*t87081*t87079*(1.0/6.0)+b3f*c*t86916* \
               t87079*(1.0/2.0)))/t87078+a1f*c*c0f*t87082*t87079*(2.0/3.0)-a1p*c*c0p*t86929*t87079*(2.0/3.0))+a1p* \
               c*c0p*t86929*t87079*(2.0/3.0))+t86934*t86937*(t87091-t87092)+t86937*t86984*t86978*t86979*t87034);
        } else if (rho_a[index] > cutoff_) {
            v_rho_a_rho_b_[index] = 0.0;
        } else if (rho_b[index] > cutoff_) {
            v_rho_a_rho_b_[index] = 0.0;
        } else {
            v_rho_a_rho_b_[index] = 0.0;
        }

        //V_rho_b_rho_b
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t87178 = gcab*gcab;
            double t87182 = 1.0/pow(rho_a[index],8.0/3.0);
            double t87183 = gamma_aa[index]*t87182*(1.0/2.0);
            double t87184 = 1.0/pow(rho_b[index],8.0/3.0);
            double t87185 = gamma_bb[index]*t87184*(1.0/2.0);
            double t87179 = t87183+t87185;
            double t87180 = t87179*t87179;
            double t87181 = 1.0/pow(rho_b[index],1.1E1/3.0);
            double t87186 = gcab*t87179;
            double t87187 = t87186+1.0;
            double t87188 = t87180*t87178;
            double t87189 = gcab*t87179*2.0;
            double t87190 = t87188+t87189+1.0;
            double t87191 = t87180*t87178*3.0;
            double t87192 = gcab*t87180*t87178*t87179;
            double t87193 = gcab*t87179*3.0;
            double t87194 = t87191+t87192+t87193+1.0;
            double t87195 = rho_a[index]+rho_b[index];
            double t87196 = 1.0/pow(t87195,1.0/3.0);
            double t87197 = c*t87196;
            double t87198 = sqrt(t87197);
            double t87199 = b1p*t87198;
            double t87200 = pow(t87197,3.0/2.0);
            double t87201 = b3p*t87200;
            double t87202 = c*c;
            double t87203 = 1.0/pow(t87195,2.0/3.0);
            double t87204 = b4p*t87202*t87203;
            double t87205 = b2p*c*t87196;
            double t87206 = t87201+t87204+t87205+t87199;
            double t87207 = 1.0/pow(t87195,4.0/3.0);
            double t87208 = 1.0/c0p;
            double t87209 = 1.0/t87206;
            double t87210 = t87208*t87209*(1.0/2.0);
            double t87211 = t87210+1.0;
            double t87212 = a1p*c*t87196;
            double t87213 = t87212+1.0;
            double t87214 = rho_a[index]-rho_b[index];
            double t87215 = t87214*t87214;
            double t87216 = 1.0/t87195;
            double t87217 = t87214*t87216;
            double t87218 = two_13*2.0;
            double t87219 = t87218-2.0;
            double t87220 = 1.0/t87219;
            double t87221 = 1.0/c0f;
            double t87222 = b1f*t87198;
            double t87223 = b3f*t87200;
            double t87224 = b4f*t87202*t87203;
            double t87225 = b2f*c*t87196;
            double t87226 = t87222+t87223+t87224+t87225;
            double t87227 = 1.0/t87226;
            double t87228 = t87221*t87227*(1.0/2.0);
            double t87229 = t87228+1.0;
            double t87230 = log(t87229);
            double t87231 = a1f*c*t87196;
            double t87232 = t87231+1.0;
            double t87233 = log(t87211);
            double t87244 = c0f*t87230*t87232*2.0;
            double t87245 = c0p*t87213*t87233*2.0;
            double t87234 = t87244-t87245;
            double t87235 = t87217+1.0;
            double t87236 = pow(t87235,4.0/3.0);
            double t87237 = -t87217+1.0;
            double t87238 = pow(t87237,4.0/3.0);
            double t87239 = t87236+t87238-2.0;
            double t87240 = 1.0/(t87195*t87195);
            double t87241 = t87240*t87214;
            double t87242 = t87241+t87216;
            double t87243 = 1.0/(t87195*t87195*t87195*t87195);
            double t87246 = t87215*t87215;
            double t87247 = 1.0/pow(t87195,5.0/3.0);
            double t87248 = 1.0/sqrt(t87197);
            double t87249 = 1.0/t87211;
            double t87250 = 1.0/(t87206*t87206);
            double t87251 = b4p*t87202*t87247*(2.0/3.0);
            double t87252 = b2p*c*t87207*(1.0/3.0);
            double t87253 = b1p*c*t87207*t87248*(1.0/6.0);
            double t87254 = b3p*c*t87207*t87198*(1.0/2.0);
            double t87255 = t87251+t87252+t87253+t87254;
            double t87256 = 1.0/(t87195*t87195*t87195*t87195*t87195);
            double t87257 = 1.0/d2fz0;
            double t87258 = 1.0/Aa;
            double t87259 = b1a*t87198;
            double t87260 = b3a*t87200;
            double t87261 = b4a*t87202*t87203;
            double t87262 = b2a*c*t87196;
            double t87263 = t87260+t87261+t87262+t87259;
            double t87264 = 1.0/t87263;
            double t87265 = t87264*t87258*(1.0/2.0);
            double t87266 = t87265+1.0;
            double t87267 = log(t87266);
            double t87268 = a1a*c*t87196;
            double t87269 = t87268+1.0;
            double t87270 = pow(t87235,1.0/3.0);
            double t87271 = t87242*t87270*(4.0/3.0);
            double t87272 = pow(t87237,1.0/3.0);
            double t87434 = t87242*t87272*(4.0/3.0);
            double t87273 = t87271-t87434;
            double t87274 = t87243*t87246;
            double t87275 = t87274-1.0;
            double t87276 = 1.0/pow(rho_b[index],1.0/3.0);
            double t87277 = c*t87276;
            double t87278 = sqrt(t87277);
            double t87279 = b1f*t87278;
            double t87280 = pow(t87277,3.0/2.0);
            double t87281 = b3f*t87280;
            double t87282 = 1.0/pow(rho_b[index],2.0/3.0);
            double t87283 = b4f*t87202*t87282;
            double t87284 = b2f*c*t87276;
            double t87285 = t87281+t87283+t87284+t87279;
            double t87286 = 1.0/pow(rho_b[index],4.0/3.0);
            double t87287 = b1p*t87278;
            double t87288 = b3p*t87280;
            double t87289 = b4p*t87202*t87282;
            double t87290 = b2p*c*t87276;
            double t87291 = t87290+t87287+t87288+t87289;
            double t87292 = 1.0/pow(rho_b[index],5.0/3.0);
            double t87293 = 1.0/sqrt(t87277);
            double t87294 = 1.0/t87285;
            double t87295 = t87221*t87294*(1.0/2.0);
            double t87296 = t87295+1.0;
            double t87297 = 1.0/t87291;
            double t87298 = t87208*t87297*(1.0/2.0);
            double t87299 = t87298+1.0;
            double t87300 = a1p*c*t87276;
            double t87301 = t87300+1.0;
            double t87302 = 1.0/t87299;
            double t87303 = 1.0/(t87291*t87291);
            double t87304 = b4p*t87202*t87292*(2.0/3.0);
            double t87305 = b2p*c*t87286*(1.0/3.0);
            double t87306 = b1p*c*t87293*t87286*(1.0/6.0);
            double t87307 = b3p*c*t87286*t87278*(1.0/2.0);
            double t87308 = t87304+t87305+t87306+t87307;
            double t87309 = t87301*t87302*t87303*t87308;
            double t87310 = log(t87299);
            double t87311 = pow(2.0,1.0/3.0);
            double t87312 = t87311*2.0;
            double t87313 = t87312-2.0;
            double t87314 = log(t87296);
            double t87315 = a1f*c*t87276;
            double t87316 = t87315+1.0;
            double t87317 = a1p*c*c0p*t87233*t87207*(2.0/3.0);
            double t87318 = 1.0/t87296;
            double t87319 = 1.0/(t87285*t87285);
            double t87320 = b4f*t87202*t87292*(2.0/3.0);
            double t87321 = b2f*c*t87286*(1.0/3.0);
            double t87322 = b1f*c*t87293*t87286*(1.0/6.0);
            double t87323 = b3f*c*t87286*t87278*(1.0/2.0);
            double t87324 = t87320+t87321+t87322+t87323;
            double t87325 = a1f*c*c0f*t87314*t87286*(2.0/3.0);
            double t87326 = a1p*c*c0p*t87310*t87286*(2.0/3.0);
            double t87327 = gamma_bb[index]*gamma_bb[index];
            double t87328 = gcaa*gcaa;
            double t87329 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
               rho_b[index]*rho_b[index]);
            double t87330 = 1.0/pow(rho_b[index],1.6E1/3.0);
            double t87331 = pow(rho_b[index],5.0/3.0);
            double t87332 = C_k*t87331;
            double t87341 = tau_a[index]*1.0E20;
            double t87333 = t87332-t87341;
            double t87334 = ( (t87333 > 0.0) ?  1.0 : 0.0 ) ;
            double t87335 = t87334*1.0E20;
            double t87336 = 1.0/tau_b[index];
            double t87337 = tau_b[index]*1.0E20;
            double t87338 = -t87332+t87337;
            double t87339 = ( (t87338 > 0.0) ?  1.0 : 0.0 ) ;
            double t87340 = C_k*t87331*t87336*t87339;
            double t87342 = t87340+t87335-1.0;
            double t87343 = t87342*t87342;
            double t87344 = t87340+t87335+1.0;
            double t87345 = t87343*t87343;
            double t87346 = gx*gx;
            double t87347 = gamma_bb[index]*gx*t87184;
            double t87348 = t87347+1.0;
            double t87349 = 1.0/t87348;
            double t87350 = gamma_bb[index]*gx*t87184*3.0;
            double t87351 = gamma_bb[index]*gx*t87327*t87346*t87329;
            double t87352 = t87330*t87327*t87346*3.0;
            double t87353 = t87350+t87351+t87352+1.0;
            double t87354 = 1.0/t87353;
            double t87355 = gamma_bb[index]*gx*t87184*2.0;
            double t87356 = t87330*t87327*t87346;
            double t87357 = t87355+t87356+1.0;
            double t87358 = 1.0/t87357;
            double t87359 = 1.0/t87344;
            double t87360 = t87342*t87359;
            double t87361 = 1.0/(t87344*t87344*t87344);
            double t87362 = 1.0/(t87344*t87344*t87344*t87344*t87344);
            double t87363 = t87342*t87362*t87345;
            double t87391 = t87342*t87343*t87361*2.0;
            double t87364 = t87360+t87363-t87391;
            double t87365 = 1.0/pow(rho_b[index],1.9E1/3.0);
            double t87366 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
               rho_b[index]*rho_b[index]*rho_b[index]);
            double t87367 = cxnl1*gamma_bb[index]*gx*t87184*t87349;
            double t87368 = cxnl3*gamma_bb[index]*gx*t87327*t87354*t87346*t87329;
            double t87369 = cxnl2*t87330*t87327*t87346*t87358;
            double t87370 = cxnl0+t87367+t87368+t87369;
            double t87371 = pow(rho_b[index],2.0/3.0);
            double t87372 = -t87332+t87341;
            double t87373 = 0.0 ;
            double t87374 = C_k*t87371*t87373*(5.0E20/3.0);
            double t87375 = C_k*C_k;
            double t87376 = pow(rho_b[index],7.0/3.0);
            double t87377 = 0.0 ;
            double t87378 = C_k*t87371*t87336*t87339*(5.0/3.0);
            double t87380 = t87336*t87375*t87376*t87377*(5.0/3.0);
            double t87379 = -t87380+t87374+t87378;
            double t87381 = 1.0/(t87348*t87348);
            double t87382 = gamma_bb[index]*gx*t87181*8.0;
            double t87383 = gamma_bb[index]*gx*t87327*t87346*t87366*8.0;
            double t87384 = t87327*t87346*t87365*1.6E1;
            double t87385 = t87382+t87383+t87384;
            double t87386 = 1.0/(t87353*t87353);
            double t87387 = gamma_bb[index]*gx*t87181*(1.6E1/3.0);
            double t87388 = t87327*t87346*t87365*(1.6E1/3.0);
            double t87389 = t87387+t87388;
            double t87390 = 1.0/(t87357*t87357);
            double t87392 = 1.0/pow(rho_b[index],1.0E1);
            double t87393 = 1.0/pow(rho_b[index],2.2E1/3.0);
            double t87394 = 1.0/pow(rho_b[index],1.4E1/3.0);
            double t87395 = cxnl1*gamma_bb[index]*gx*t87181*t87349*(8.0/3.0);
            double t87396 = cxnl3*gamma_bb[index]*gx*t87327*t87354*t87346*t87366*8.0;
            double t87397 = cxnl2*t87327*t87346*t87365*t87358*(1.6E1/3.0);
            double t87398 = t87395+t87396+t87397-cxnl1*t87327*t87381*t87346*t87365*(8.0/3.0)-cxnl2*t87330*t87327* \
               t87390*t87346*t87389-cxnl3*gamma_bb[index]*gx*t87327*t87346*t87329*t87385*t87386;
            double t87399 = t87359*t87379;
            double t87400 = 1.0/(t87344*t87344);
            double t87401 = 1.0/(t87344*t87344*t87344*t87344);
            double t87402 = t87401*t87342*t87343*t87379*6.0;
            double t87403 = t87362*t87345*t87379*5.0;
            double t87404 = 1.0/(t87344*t87344*t87344*t87344*t87344*t87344);
            double t87405 = t87402+t87403+t87399-t87400*t87342*t87379-t87343*t87361*t87379*6.0-t87404*t87342* \
               t87345*t87379*5.0;
            double t87406 = pow(rho_b[index],4.0/3.0);
            double t87407 = rho_b[index]*rho_b[index];
            double t87408 = t87379*t87379;
            double t87409 = 0.0 ;
            double t87410 = C_k*t87373*t87276*(1.0E21/9.0);
            double t87411 = 0.0 ;
            double t87412 = C_k*rho_b[index]*t87411*t87407*t87336*t87375*(2.5E1/9.0);
            double t87413 = C_k*t87336*t87276*t87339*(1.0E1/9.0);
            double t87415 = t87406*t87409*t87375*(2.5E21/9.0);
            double t87416 = t87406*t87336*t87375*t87377*(2.0E1/3.0);
            double t87414 = t87410+t87412+t87413-t87415-t87416;
            double t87417 = 1.0/(t87348*t87348*t87348);
            double t87418 = t87389*t87389;
            double t87419 = 1.0/(t87357*t87357*t87357);
            double t87420 = gamma_bb[index]*gx*t87394*(8.8E1/3.0);
            double t87421 = gamma_bb[index]*gx*t87327*t87346*t87392*7.2E1;
            double t87422 = t87327*t87346*t87393*(3.04E2/3.0);
            double t87423 = t87420+t87421+t87422;
            double t87424 = t87385*t87385;
            double t87425 = 1.0/(t87353*t87353*t87353);
            double t87426 = gamma_bb[index]*gx*t87394*(1.76E2/9.0);
            double t87427 = t87327*t87346*t87393*(3.04E2/9.0);
            double t87428 = t87426+t87427;
            double t87429 = 1.0/t87190;
            double t87430 = 1.0/t87194;
            double t87431 = 1.0/t87187;
            double t87432 = 1.0/pow(t87195,7.0/3.0);
            double t87433 = 1.0/pow(t87195,8.0/3.0);
            double t87435 = 1.0/t87229;
            double t87436 = 1.0/(t87226*t87226);
            double t87437 = b4f*t87202*t87247*(2.0/3.0);
            double t87438 = b2f*c*t87207*(1.0/3.0);
            double t87439 = b1f*c*t87207*t87248*(1.0/6.0);
            double t87440 = b3f*c*t87207*t87198*(1.0/2.0);
            double t87441 = t87440+t87437+t87438+t87439;
            double t87442 = t87232*t87441*t87435*t87436;
            double t87444 = t87213*t87250*t87255*t87249;
            double t87445 = a1f*c*c0f*t87230*t87207*(2.0/3.0);
            double t87443 = t87442+t87317-t87444-t87445;
            double t87446 = t87255*t87255;
            double t87447 = 1.0/pow(t87197,3.0/2.0);
            double t87448 = b4p*t87202*t87433*(1.0E1/9.0);
            double t87449 = b2p*c*t87432*(4.0/9.0);
            double t87450 = b1p*c*t87432*t87248*(2.0/9.0);
            double t87451 = b3p*c*t87432*t87198*(2.0/3.0);
            double t87452 = b3p*t87202*t87433*t87248*(1.0/1.2E1);
            double t87453 = t87450+t87451+t87452+t87448+t87449-b1p*t87202*t87433*t87447*(1.0/3.6E1);
            double t87454 = 1.0/(t87206*t87206*t87206);
            double t87455 = t87213*t87454*t87446*t87249*2.0;
            double t87456 = t87441*t87441;
            double t87457 = 1.0/(t87211*t87211);
            double t87458 = 1.0/(t87206*t87206*t87206*t87206);
            double t87459 = t87240*2.0;
            double t87460 = 1.0/(t87195*t87195*t87195);
            double t87461 = t87214*t87460*2.0;
            double t87462 = t87461+t87459;
            double t87463 = t87242*t87242;
            double t87464 = a1p*c*c0p*t87233*t87432*(8.0/9.0);
            double t87465 = 1.0/(t87195*t87195*t87195*t87195*t87195*t87195);
            double t87466 = t87214*t87215*t87243*4.0;
            double t87467 = t87246*t87256*4.0;
            double t87468 = t87466+t87467;
            double t87469 = t87270*t87462*(4.0/3.0);
            double t87470 = 1.0/pow(t87235,2.0/3.0);
            double t87471 = t87470*t87463*(4.0/9.0);
            double t87472 = 1.0/pow(t87237,2.0/3.0);
            double t87473 = t87463*t87472*(4.0/9.0);
            double t87474 = t87471+t87473+t87469-t87272*t87462*(4.0/3.0);
            double t87475 = 1.0/t87266;
            double t87476 = 1.0/(t87263*t87263);
            double t87477 = b4a*t87202*t87247*(2.0/3.0);
            double t87478 = b2a*c*t87207*(1.0/3.0);
            double t87479 = b1a*c*t87207*t87248*(1.0/6.0);
            double t87480 = b3a*c*t87207*t87198*(1.0/2.0);
            double t87481 = t87480+t87477+t87478+t87479;
            double t87482 = t87481*t87481;
            double t87483 = 1.0/pow(rho_b[index],7.0/3.0);
            double t87484 = 1.0/pow(t87277,3.0/2.0);
            double t87485 = t87324*t87324;
            double t87486 = t87308*t87308;
            double t87487 = 1.0/(t87291*t87291*t87291);
            double t87488 = t87301*t87302*t87486*t87487*2.0;
            double t87489 = b4p*t87202*t87184*(1.0E1/9.0);
            double t87490 = b2p*c*t87483*(4.0/9.0);
            double t87491 = b3p*t87202*t87184*t87293*(1.0/1.2E1);
            double t87492 = b1p*c*t87293*t87483*(2.0/9.0);
            double t87493 = b3p*c*t87483*t87278*(2.0/3.0);
            double t87574 = b1p*t87202*t87184*t87484*(1.0/3.6E1);
            double t87494 = t87490+t87491+t87492+t87493-t87574+t87489;
            double t87495 = 1.0/(t87299*t87299);
            double t87496 = 1.0/(t87291*t87291*t87291*t87291);
            double t87497 = a1p*c*c0p*t87310*t87483*(8.0/9.0);
            double t87555 = t87324*t87316*t87318*t87319;
            double t87498 = t87325-t87326+t87309-t87555;
            double t87499 = 1.0/pow(rho_a[index],1.0/3.0);
            double t87500 = c*t87499;
            double t87501 = sqrt(t87500);
            double t87502 = pow(t87500,3.0/2.0);
            double t87503 = 1.0/pow(rho_a[index],2.0/3.0);
            double t87504 = b1p*t87501;
            double t87505 = b3p*t87502;
            double t87506 = b4p*t87202*t87503;
            double t87507 = b2p*c*t87499;
            double t87508 = t87504+t87505+t87506+t87507;
            double t87509 = 1.0/t87508;
            double t87510 = t87208*t87509*(1.0/2.0);
            double t87511 = t87510+1.0;
            double t87512 = log(t87511);
            double t87513 = a1p*c*t87499;
            double t87514 = t87513+1.0;
            double t87515 = c0p*t87512*t87514*2.0;
            double t87516 = c0f*t87314*t87316*2.0;
            double t87518 = c0p*t87301*t87310*2.0;
            double t87517 = t87516-t87518;
            double t87519 = t87220*t87234*t87243*t87246*t87239;
            double t87520 = Aa*t87220*t87239*t87257*t87275*t87267*t87269*2.0;
            double t87521 = 1.0/(t87187*t87187);
            double t87522 = gamma_bb[index]*gcab*t87181*(8.0/3.0);
            double t87523 = gamma_bb[index]*t87181*t87178*t87179*(8.0/3.0);
            double t87524 = t87522+t87523;
            double t87525 = 1.0/(t87194*t87194);
            double t87526 = 1.0/(t87190*t87190);
            double t87527 = gamma_bb[index]*gcab*t87181*4.0;
            double t87528 = gamma_bb[index]*gcab*t87180*t87181*t87178*4.0;
            double t87529 = gamma_bb[index]*t87181*t87178*t87179*8.0;
            double t87530 = t87527+t87528+t87529;
            double t87531 = t87220*t87313*t87517;
            double t87532 = t87531+t87518;
            double t87533 = gamma_bb[index]*gcaa*t87184;
            double t87534 = t87533+1.0;
            double t87535 = 1.0/t87534;
            double t87536 = gamma_bb[index]*gcaa*t87184*3.0;
            double t87537 = gamma_bb[index]*gcaa*t87327*t87328*t87329;
            double t87538 = t87330*t87327*t87328*3.0;
            double t87539 = t87536+t87537+t87538+1.0;
            double t87540 = 1.0/t87539;
            double t87541 = gamma_bb[index]*gcaa*t87184*2.0;
            double t87542 = t87330*t87327*t87328;
            double t87543 = t87541+t87542+1.0;
            double t87544 = 1.0/t87543;
            double t87545 = 1.0/(t87534*t87534);
            double t87546 = gamma_bb[index]*gcaa*t87181*(1.6E1/3.0);
            double t87547 = t87327*t87328*t87365*(1.6E1/3.0);
            double t87548 = t87546+t87547;
            double t87549 = gamma_bb[index]*gcaa*t87181*8.0;
            double t87550 = gamma_bb[index]*gcaa*t87327*t87328*t87366*8.0;
            double t87551 = t87327*t87328*t87365*1.6E1;
            double t87552 = t87550+t87551+t87549;
            double t87553 = 1.0/(t87539*t87539);
            double t87554 = 1.0/(t87543*t87543);
            double t87556 = t87220*t87313*t87498;
            double t87557 = ccaa1*gamma_bb[index]*gcaa*t87181*t87535*(8.0/3.0);
            double t87558 = ccaa3*gamma_bb[index]*gcaa*t87540*t87327*t87328*t87366*8.0;
            double t87559 = ccaa2*t87327*t87328*t87544*t87365*(1.6E1/3.0);
            double t87560 = t87557+t87558+t87559-ccaa1*t87327*t87328*t87365*t87545*(8.0/3.0)-ccaa2*t87330*t87327* \
               t87328*t87554*t87548-ccaa3*gamma_bb[index]*gcaa*t87327*t87552*t87328*t87553*t87329;
            double t87561 = t87326-t87309+t87556;
            double t87562 = ccaa1*gamma_bb[index]*gcaa*t87184*t87535;
            double t87563 = ccaa3*gamma_bb[index]*gcaa*t87540*t87327*t87328*t87329;
            double t87564 = ccaa2*t87330*t87327*t87328*t87544;
            double t87565 = ccaa0+t87562+t87563+t87564;
            double t87566 = 1.0/(t87285*t87285*t87285);
            double t87567 = b4f*t87202*t87184*(1.0E1/9.0);
            double t87568 = b2f*c*t87483*(4.0/9.0);
            double t87569 = b3f*t87202*t87184*t87293*(1.0/1.2E1);
            double t87570 = b1f*c*t87293*t87483*(2.0/9.0);
            double t87571 = b3f*c*t87483*t87278*(2.0/3.0);
            double t87572 = t87570+t87571+t87567+t87568+t87569-b1f*t87202*t87184*t87484*(1.0/3.6E1);
            double t87573 = t87316*t87318*t87319*t87572;
            double t87575 = t87301*t87302*t87303*t87494;
            double t87576 = 1.0/(t87296*t87296);
            double t87577 = 1.0/(t87285*t87285*t87285*t87285);
            double t87578 = t87221*t87316*t87485*t87576*t87577*(1.0/2.0);
            double t87579 = t87301*t87208*t87486*t87495*t87496*(1.0/2.0);
            double t87580 = a1f*c*t87324*t87318*t87319*t87286*(2.0/3.0);
            double t87581 = a1p*c*t87302*t87303*t87308*t87286*(2.0/3.0);
            v_rho_b_rho_b_[index] = (ccab1*gamma_bb[index]*gcab*t87431*t87181*(4.0/3.0)-ccab2*t87180*t87524*t87526* \
               t87178-ccab1*gamma_bb[index]*t87521*t87181*t87178*t87179*(4.0/3.0)+ccab2*gamma_bb[index]*t87181*t87429* \
               t87178*t87179*(8.0/3.0)+ccab3*gamma_bb[index]*gcab*t87430*t87180*t87181*t87178*4.0-ccab3*gcab*t87530* \
               t87180*t87525*t87178*t87179)*(t87520+t87245+t87519+rho_b[index]*(t87326-t87309+t87220*t87313*(t87325+ \
               t87309-t87324*t87316*t87318*t87319-a1p*c*c0p*t87310*t87286*(2.0/3.0)))-t87195*(t87317-t87213*t87250* \
               t87255*t87249+t87220*t87234*t87243*t87246*t87273-t87220*t87243*t87443*t87246*t87239+t87220*t87234* \
               t87246*t87256*t87239*4.0+t87220*t87214*t87215*t87234*t87243*t87239*4.0+Aa*t87220*t87273*t87257*t87275* \
               t87267*t87269*2.0+Aa*t87220*t87239*t87257*t87267*t87269*t87468*2.0-t87220*t87481*t87239*t87257*t87275* \
               t87475*t87269*t87476+Aa*a1a*c*t87220*t87207*t87239*t87257*t87275*t87267*(2.0/3.0))-c0p*t87301*t87310* \
               2.0-t87220*t87313*t87517)*2.0+t87532*t87560*2.0+t87561*t87565*2.0+(rho_b[index]*t87532+rho_a[index]* \
               (t87515-t87220*t87313*(t87515-c0f*log((t87221*(1.0/2.0))/(b1f*t87501+b3f*t87502+b2f*c*t87499+b4f*t87202* \
               t87503)+1.0)*(a1f*c*t87499+1.0)*2.0))-t87195*(t87520+t87245+t87519))*(-ccab2*t87180*t87526*t87178* \
               (gamma_bb[index]*gcab*t87394*(8.8E1/9.0)+t87327*t87393*t87178*(3.2E1/9.0)+gamma_bb[index]*t87178*t87394* \
               t87179*(8.8E1/9.0))+ccab2*t87180*1.0/(t87190*t87190*t87190)*(t87524*t87524)*t87178*2.0+ccab1*gamma_bb[index]* \
               gcab*t87431*t87394*(4.4E1/9.0)-ccab1*t87521*t87327*t87393*t87178*(3.2E1/9.0)+ccab2*t87327*t87393*t87429* \
               t87178*(3.2E1/9.0)-ccab1*gamma_bb[index]*t87521*t87178*t87394*t87179*(4.4E1/9.0)+ccab2*gamma_bb[index]* \
               t87429*t87178*t87394*t87179*(8.8E1/9.0)+ccab3*gcab*(t87530*t87530)*t87180*1.0/(t87194*t87194*t87194) \
               *t87178*t87179*2.0+ccab3*gamma_bb[index]*gcab*t87430*t87180*t87178*t87394*(4.4E1/3.0)-ccab2*gamma_bb[index]* \
               t87181*t87524*t87526*t87178*t87179*(1.6E1/3.0)+ccab3*gcab*t87430*t87327*t87393*t87178*t87179*(3.2E1/ \
               3.0)+ccab1*gcab*t87327*t87393*t87178*1.0/(t87187*t87187*t87187)*t87179*(3.2E1/9.0)-ccab3*gcab*t87180* \
               t87525*t87178*t87179*(gamma_bb[index]*gcab*t87394*(4.4E1/3.0)+t87327*t87393*t87178*(3.2E1/3.0)+gamma_bb[index]* \
               t87178*t87394*t87179*(8.8E1/3.0)+gamma_bb[index]*gcab*t87180*t87178*t87394*(4.4E1/3.0)+gcab*t87327* \
               t87393*t87178*t87179*(3.2E1/3.0))-ccab3*gamma_bb[index]*gcab*t87530*t87180*t87181*t87525*t87178*8.0) \
               +(ccab0+ccab1*gcab*t87431*t87179+ccab2*t87180*t87429*t87178+ccab3*gcab*t87430*t87180*t87178*t87179) \
               *(-rho_b[index]*(t87581+t87575-t87488-t87497+t87579+t87220*t87313*(t87580+t87573+t87488+t87497+t87578- \
               t87301*t87302*t87303*t87494-t87316*t87318*t87485*t87566*2.0-a1f*c*c0f*t87314*t87483*(8.0/9.0)-t87301* \
               t87208*t87486*t87495*t87496*(1.0/2.0)-a1p*c*t87302*t87303*t87308*t87286*(2.0/3.0)))-t87195*(t87455+ \
               t87464-t87213*t87250*t87453*t87249-t87220*t87243*t87246*t87239*(t87455+t87464-t87213*t87250*t87453* \
               t87249-t87232*1.0/(t87226*t87226*t87226)*t87435*t87456*2.0+t87232*t87435*t87436*(b2f*c*t87432*(4.0/ \
               9.0)+b4f*t87202*t87433*(1.0E1/9.0)+b1f*c*t87432*t87248*(2.0/9.0)+b3f*c*t87432*t87198*(2.0/3.0)-b1f* \
               t87202*t87433*t87447*(1.0/3.6E1)+b3f*t87202*t87433*t87248*(1.0/1.2E1))+t87221*t87232*1.0/(t87226*t87226* \
               t87226*t87226)*1.0/(t87229*t87229)*t87456*(1.0/2.0)-a1f*c*c0f*t87230*t87432*(8.0/9.0)-t87213*t87208* \
               t87446*t87457*t87458*(1.0/2.0)+a1f*c*t87207*t87441*t87435*t87436*(2.0/3.0)-a1p*c*t87250*t87207*t87255* \
               t87249*(2.0/3.0))+t87220*t87215*t87234*t87243*t87239*1.2E1-t87220*t87243*t87443*t87246*t87273*2.0+ \
               t87220*t87234*t87243*t87246*t87474+t87220*t87234*t87246*t87273*t87256*8.0+t87220*t87234*t87246*t87239* \
               t87465*2.0E1-t87220*t87443*t87246*t87256*t87239*8.0-t87213*t87208*t87446*t87457*t87458*(1.0/2.0)+t87220* \
               t87214*t87215*t87234*t87243*t87273*8.0-t87220*t87214*t87215*t87243*t87443*t87239*8.0+t87220*t87214* \
               t87215*t87234*t87256*t87239*3.2E1-a1p*c*t87250*t87207*t87255*t87249*(2.0/3.0)+Aa*t87220*t87257*t87275* \
               t87267*t87474*t87269*2.0+Aa*t87220*t87273*t87257*t87267*t87269*t87468*4.0+Aa*t87220*t87239*t87257* \
               t87267*t87269*(t87215*t87243*1.2E1+t87246*t87465*2.0E1+t87214*t87215*t87256*3.2E1)*2.0-t87220*t87273* \
               t87481*t87257*t87275*t87475*t87269*t87476*2.0-t87220*t87481*t87239*t87257*t87475*t87269*t87476*t87468* \
               2.0+t87220*1.0/(t87263*t87263*t87263)*t87239*t87257*t87275*t87482*t87475*t87269*2.0-t87220*t87239* \
               t87257*t87275*t87475*t87269*t87476*(b2a*c*t87432*(4.0/9.0)+b4a*t87202*t87433*(1.0E1/9.0)+b1a*c*t87432* \
               t87248*(2.0/9.0)+b3a*c*t87432*t87198*(2.0/3.0)-b1a*t87202*t87433*t87447*(1.0/3.6E1)+b3a*t87202*t87433* \
               t87248*(1.0/1.2E1))+Aa*a1a*c*t87220*t87207*t87273*t87257*t87275*t87267*(4.0/3.0)+Aa*a1a*c*t87220*t87432* \
               t87239*t87257*t87275*t87267*(8.0/9.0)+Aa*a1a*c*t87220*t87207*t87239*t87257*t87267*t87468*(4.0/3.0) \
               -t87220*1.0/(t87263*t87263*t87263*t87263)*t87239*t87257*1.0/(t87266*t87266)*t87275*t87482*t87258*t87269* \
               (1.0/2.0)-a1a*c*t87220*t87207*t87481*t87239*t87257*t87275*t87475*t87476*(2.0/3.0))-t87220*t87313*t87498* \
               2.0+t87301*t87302*t87303*t87308*2.0-t87213*t87250*t87255*t87249*2.0+a1p*c*c0p*t87233*t87207*(4.0/3.0) \
               -a1p*c*c0p*t87310*t87286*(4.0/3.0)+t87220*t87234*t87243*t87246*t87273*2.0-t87220*t87243*t87443*t87246* \
               t87239*2.0+t87220*t87234*t87246*t87256*t87239*8.0+t87220*t87214*t87215*t87234*t87243*t87239*8.0+Aa* \
               t87220*t87273*t87257*t87275*t87267*t87269*4.0+Aa*t87220*t87239*t87257*t87267*t87269*t87468*4.0-t87220* \
               t87481*t87239*t87257*t87275*t87475*t87269*t87476*2.0+Aa*a1a*c*t87220*t87207*t87239*t87257*t87275*t87267* \
               (4.0/3.0))-(X-1.0)*(c0*t87406*(t87364*(cxnl1*gamma_bb[index]*gx*t87349*t87394*(8.8E1/9.0)-cxnl1*t87327* \
               t87381*t87346*t87393*2.4E1+cxnl2*t87327*t87346*t87393*t87358*(3.04E2/9.0)-cxnl2*t87330*t87327*t87390* \
               t87346*t87428+cxnl2*t87330*t87327*t87346*t87418*t87419*2.0-cxnl2*t87327*t87390*t87346*t87365*t87389* \
               (3.2E1/3.0)+cxnl1*gamma_bb[index]*gx*t87327*t87417*t87346*t87392*(1.28E2/9.0)+cxnl3*gamma_bb[index]* \
               gx*t87327*t87354*t87346*t87392*7.2E1+cxnl3*gamma_bb[index]*gx*t87424*t87425*t87327*t87346*t87329*2.0- \
               cxnl3*gamma_bb[index]*gx*t87423*t87327*t87346*t87329*t87386-cxnl3*gamma_bb[index]*gx*t87327*t87346* \
               t87366*t87385*t87386*1.6E1)-t87405*t87398*2.0-t87370*(t87400*t87408*2.0-t87414*t87359+t87400*t87342* \
               t87414-t87401*t87343*t87408*3.6E1+t87414*t87343*t87361*6.0+t87342*t87361*t87408*1.0E1+t87404*t87345* \
               t87408*5.0E1-t87414*t87362*t87345*5.0-t87401*t87342*t87414*t87343*6.0+t87404*t87342*t87414*t87345* \
               5.0+t87342*t87343*t87362*t87408*4.0-t87342*1.0/(t87344*t87344*t87344*t87344*t87344*t87344*t87344)* \
               t87345*t87408*3.0E1)+cx1*gamma_bb[index]*gx*t87349*t87394*(8.8E1/9.0)-cx1*t87327*t87381*t87346*t87393* \
               2.4E1+cx2*t87327*t87346*t87393*t87358*(3.04E2/9.0)-cx2*t87330*t87327*t87390*t87346*t87428+cx2*t87330* \
               t87327*t87346*t87418*t87419*2.0-cx2*t87327*t87390*t87346*t87365*t87389*(3.2E1/3.0)+cx1*gamma_bb[index]* \
               gx*t87327*t87417*t87346*t87392*(1.28E2/9.0)+cx3*gamma_bb[index]*gx*t87327*t87354*t87346*t87392*7.2E1+ \
               cx3*gamma_bb[index]*gx*t87424*t87425*t87327*t87346*t87329*2.0-cx3*gamma_bb[index]*gx*t87423*t87327* \
               t87346*t87329*t87386-cx3*gamma_bb[index]*gx*t87327*t87346*t87366*t87385*t87386*1.6E1)+c0*pow(rho_b[index],1.0/ \
               3.0)*(t87405*t87370-t87364*t87398-cx1*gamma_bb[index]*gx*t87181*t87349*(8.0/3.0)+cx1*t87327*t87381* \
               t87346*t87365*(8.0/3.0)-cx2*t87327*t87346*t87365*t87358*(1.6E1/3.0)+cx2*t87330*t87327*t87390*t87346* \
               t87389-cx3*gamma_bb[index]*gx*t87327*t87354*t87346*t87366*8.0+cx3*gamma_bb[index]*gx*t87327*t87346* \
               t87329*t87385*t87386)*(8.0/3.0)+c0*t87282*(cx0+t87370*t87364+cx1*gamma_bb[index]*gx*t87184*t87349+ \
               cx2*t87330*t87327*t87346*t87358+cx3*gamma_bb[index]*gx*t87327*t87354*t87346*t87329)*(4.0/9.0))-rho_b[index]* \
               t87532*(ccaa1*gamma_bb[index]*gcaa*t87535*t87394*(8.8E1/9.0)-ccaa1*t87327*t87328*t87545*t87393*2.4E1+ \
               ccaa2*t87327*t87328*t87544*t87393*(3.04E2/9.0)-ccaa2*t87327*t87328*t87365*t87554*t87548*(3.2E1/3.0) \
               -ccaa2*t87330*t87327*t87328*t87554*(gamma_bb[index]*gcaa*t87394*(1.76E2/9.0)+t87327*t87328*t87393* \
               (3.04E2/9.0))+ccaa2*t87330*t87327*1.0/(t87543*t87543*t87543)*t87328*(t87548*t87548)*2.0+ccaa3*gamma_bb[index]* \
               gcaa*t87540*t87327*t87328*t87392*7.2E1+ccaa1*gamma_bb[index]*gcaa*t87327*1.0/(t87534*t87534*t87534) \
               *t87328*t87392*(1.28E2/9.0)+ccaa3*gamma_bb[index]*gcaa*t87327*(t87552*t87552)*t87328*t87329*1.0/(t87539* \
               t87539*t87539)*2.0-ccaa3*gamma_bb[index]*gcaa*t87327*t87328*t87553*t87329*(gamma_bb[index]*gcaa*t87394* \
               (8.8E1/3.0)+t87327*t87328*t87393*(3.04E2/3.0)+gamma_bb[index]*gcaa*t87327*t87328*t87392*7.2E1)-ccaa3* \
               gamma_bb[index]*gcaa*t87327*t87552*t87328*t87553*t87366*1.6E1)+rho_b[index]*t87565*(t87581+t87575- \
               t87488-t87497+t87579+t87220*t87313*(t87580-t87581+t87573-t87575+t87488+t87497+t87578-t87579-t87316* \
               t87318*t87485*t87566*2.0-a1f*c*c0f*t87314*t87483*(8.0/9.0)))-rho_b[index]*t87560*t87561*2.0;
        } else if (rho_a[index] > cutoff_) {
            v_rho_b_rho_b_[index] = 0.0;
        } else if (rho_b[index] > cutoff_) {
            double t89769 = 1.0/pow(rho_b[index],1.0/3.0);
            double t89770 = c*t89769;
            double t89771 = sqrt(t89770);
            double t89772 = b1f*t89771;
            double t89773 = pow(t89770,3.0/2.0);
            double t89774 = b3f*t89773;
            double t89775 = c*c;
            double t89776 = 1.0/pow(rho_b[index],2.0/3.0);
            double t89777 = b4f*t89775*t89776;
            double t89778 = b2f*c*t89769;
            double t89779 = t89772+t89774+t89777+t89778;
            double t89780 = 1.0/pow(rho_b[index],4.0/3.0);
            double t89781 = b1p*t89771;
            double t89782 = b3p*t89773;
            double t89783 = b4p*t89775*t89776;
            double t89784 = b2p*c*t89769;
            double t89785 = t89781+t89782+t89783+t89784;
            double t89786 = 1.0/pow(rho_b[index],5.0/3.0);
            double t89787 = 1.0/sqrt(t89770);
            double t89788 = 1.0/c0f;
            double t89789 = 1.0/t89779;
            double t89790 = t89788*t89789*(1.0/2.0);
            double t89791 = t89790+1.0;
            double t89792 = 1.0/c0p;
            double t89793 = 1.0/t89785;
            double t89794 = t89792*t89793*(1.0/2.0);
            double t89795 = t89794+1.0;
            double t89796 = a1p*c*t89769;
            double t89797 = t89796+1.0;
            double t89798 = 1.0/t89795;
            double t89799 = 1.0/(t89785*t89785);
            double t89800 = b4p*t89775*t89786*(2.0/3.0);
            double t89801 = b2p*c*t89780*(1.0/3.0);
            double t89802 = b1p*c*t89780*t89787*(1.0/6.0);
            double t89803 = b3p*c*t89771*t89780*(1.0/2.0);
            double t89804 = t89800+t89801+t89802+t89803;
            double t89805 = t89804*t89797*t89798*t89799;
            double t89806 = log(t89795);
            double t89807 = 1.0/pow(rho_b[index],8.0/3.0);
            double t89808 = gamma_bb[index]*gamma_bb[index];
            double t89809 = gcaa*gcaa;
            double t89810 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
               rho_b[index]*rho_b[index]);
            double t89811 = 1.0/pow(rho_b[index],1.6E1/3.0);
            double t89812 = pow(2.0,1.0/3.0);
            double t89813 = t89812*2.0;
            double t89814 = t89813-2.0;
            double t89815 = two_13*2.0;
            double t89816 = t89815-2.0;
            double t89817 = 1.0/t89816;
            double t89818 = log(t89791);
            double t89819 = a1f*c*t89769;
            double t89820 = t89819+1.0;
            double t89821 = gamma_bb[index]*gcaa*t89807;
            double t89822 = t89821+1.0;
            double t89823 = 1.0/t89822;
            double t89824 = gamma_bb[index]*gcaa*t89807*3.0;
            double t89825 = gamma_bb[index]*gcaa*t89810*t89808*t89809;
            double t89826 = t89811*t89808*t89809*3.0;
            double t89827 = t89824+t89825+t89826+1.0;
            double t89828 = 1.0/t89827;
            double t89829 = gamma_bb[index]*gcaa*t89807*2.0;
            double t89830 = t89811*t89808*t89809;
            double t89831 = t89830+t89829+1.0;
            double t89832 = 1.0/t89831;
            double t89833 = 1.0/pow(rho_b[index],1.9E1/3.0);
            double t89834 = 1.0/pow(rho_b[index],1.1E1/3.0);
            double t89835 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
               rho_b[index]*rho_b[index]*rho_b[index]);
            double t89836 = c0f*t89820*t89818*2.0;
            double t89837 = c0p*t89806*t89797*2.0;
            double t89838 = 1.0/pow(rho_b[index],1.0E1);
            double t89839 = 1.0/pow(rho_b[index],2.2E1/3.0);
            double t89840 = 1.0/(t89822*t89822);
            double t89841 = gamma_bb[index]*gcaa*t89834*(1.6E1/3.0);
            double t89842 = t89833*t89808*t89809*(1.6E1/3.0);
            double t89843 = t89841+t89842;
            double t89844 = gamma_bb[index]*gcaa*t89834*8.0;
            double t89845 = gamma_bb[index]*gcaa*t89808*t89835*t89809*8.0;
            double t89846 = t89833*t89808*t89809*1.6E1;
            double t89847 = t89844+t89845+t89846;
            double t89848 = 1.0/(t89827*t89827);
            double t89849 = 1.0/pow(rho_b[index],1.4E1/3.0);
            double t89850 = 1.0/(t89831*t89831);
            double t89851 = 1.0/t89791;
            double t89852 = 1.0/(t89779*t89779);
            double t89853 = b4f*t89775*t89786*(2.0/3.0);
            double t89854 = b2f*c*t89780*(1.0/3.0);
            double t89855 = b1f*c*t89780*t89787*(1.0/6.0);
            double t89856 = b3f*c*t89771*t89780*(1.0/2.0);
            double t89857 = t89853+t89854+t89855+t89856;
            double t89858 = a1f*c*c0f*t89780*t89818*(2.0/3.0);
            double t89859 = a1p*c*c0p*t89806*t89780*(2.0/3.0);
            double t89860 = ccaa1*gamma_bb[index]*gcaa*t89823*t89834*(8.0/3.0);
            double t89861 = ccaa3*gamma_bb[index]*gcaa*t89808*t89835*t89809*t89828*8.0;
            double t89862 = ccaa2*t89832*t89833*t89808*t89809*(1.6E1/3.0);
            double t89863 = t89860+t89861+t89862-ccaa1*t89840*t89833*t89808*t89809*(8.0/3.0)-ccaa2*t89811*t89850* \
               t89843*t89808*t89809-ccaa3*gamma_bb[index]*gcaa*t89810*t89808*t89809*t89847*t89848;
            double t89864 = ccaa1*gamma_bb[index]*gcaa*t89823*t89807;
            double t89865 = ccaa3*gamma_bb[index]*gcaa*t89810*t89808*t89809*t89828;
            double t89866 = ccaa2*t89811*t89832*t89808*t89809;
            double t89867 = ccaa0+t89864+t89865+t89866;
            double t89868 = 1.0/pow(rho_b[index],7.0/3.0);
            double t89869 = 1.0/pow(t89770,3.0/2.0);
            double t89870 = t89857*t89857;
            double t89871 = t89804*t89804;
            double t89872 = 1.0/(t89785*t89785*t89785);
            double t89873 = t89871*t89872*t89797*t89798*2.0;
            double t89874 = b4p*t89807*t89775*(1.0E1/9.0);
            double t89875 = b2p*c*t89868*(4.0/9.0);
            double t89876 = b3p*t89807*t89775*t89787*(1.0/1.2E1);
            double t89877 = b1p*c*t89787*t89868*(2.0/9.0);
            double t89878 = b3p*c*t89771*t89868*(2.0/3.0);
            double t89879 = t89874+t89875+t89876+t89877+t89878-b1p*t89807*t89775*t89869*(1.0/3.6E1);
            double t89880 = 1.0/(t89795*t89795);
            double t89881 = 1.0/(t89785*t89785*t89785*t89785);
            double t89882 = a1p*c*c0p*t89806*t89868*(8.0/9.0);
            double t89883 = pow(rho_b[index],5.0/3.0);
            double t89884 = C_k*t89883;
            double t89893 = tau_a[index]*1.0E20;
            double t89885 = t89884-t89893;
            double t89886 = ( (t89885 > 0.0) ?  1.0 : 0.0 ) ;
            double t89887 = t89886*1.0E20;
            double t89888 = 1.0/tau_b[index];
            double t89889 = tau_b[index]*1.0E20;
            double t89890 = -t89884+t89889;
            double t89891 = ( (t89890 > 0.0) ?  1.0 : 0.0 ) ;
            double t89892 = C_k*t89891*t89883*t89888;
            double t89894 = t89892+t89887-1.0;
            double t89895 = t89894*t89894;
            double t89896 = t89892+t89887+1.0;
            double t89897 = t89895*t89895;
            double t89898 = gx*gx;
            double t89899 = gamma_bb[index]*gx*t89807;
            double t89900 = t89899+1.0;
            double t89914 = gamma_bb[index]*gx*t89834*(1.6E1/3.0);
            double t89915 = t89833*t89808*t89898*(1.6E1/3.0);
            double t89901 = t89914+t89915;
            double t89902 = gamma_bb[index]*gx*t89807*2.0;
            double t89903 = t89811*t89808*t89898;
            double t89904 = t89902+t89903+1.0;
            double t89905 = gamma_bb[index]*gx*t89807*3.0;
            double t89906 = gamma_bb[index]*gx*t89810*t89808*t89898;
            double t89907 = t89811*t89808*t89898*3.0;
            double t89908 = t89905+t89906+t89907+1.0;
            double t89909 = 1.0/(t89908*t89908);
            double t89910 = gamma_bb[index]*gx*t89834*8.0;
            double t89911 = gamma_bb[index]*gx*t89808*t89835*t89898*8.0;
            double t89912 = t89833*t89808*t89898*1.6E1;
            double t89913 = t89910+t89911+t89912;
            double t89916 = 1.0/(t89904*t89904);
            double t89917 = 1.0/t89900;
            double t89918 = 1.0/t89908;
            double t89919 = 1.0/t89904;
            double t89920 = 1.0/(t89900*t89900);
            double t89921 = pow(rho_b[index],2.0/3.0);
            double t89922 = 1.0/t89896;
            double t89923 = -t89884+t89893;
            double t89924 = 0.0 ;
            double t89925 = C_k*t89921*t89924*(5.0E20/3.0);
            double t89926 = C_k*C_k;
            double t89927 = pow(rho_b[index],7.0/3.0);
            double t89928 = 0.0 ;
            double t89929 = C_k*t89921*t89891*t89888*(5.0/3.0);
            double t89931 = t89926*t89927*t89928*t89888*(5.0/3.0);
            double t89930 = -t89931+t89925+t89929;
            double t89932 = 1.0/(t89896*t89896*t89896);
            double t89933 = 1.0/(t89896*t89896*t89896*t89896*t89896);
            double t89934 = pow(rho_b[index],4.0/3.0);
            double t89935 = rho_b[index]*rho_b[index];
            double t89936 = 1.0/(t89896*t89896);
            double t89937 = t89930*t89930;
            double t89938 = 1.0/(t89896*t89896*t89896*t89896);
            double t89939 = 1.0/(t89896*t89896*t89896*t89896*t89896*t89896);
            double t89940 = 0.0 ;
            double t89941 = C_k*t89924*t89769*(1.0E21/9.0);
            double t89942 = 0.0 ;
            double t89943 = C_k*rho_b[index]*t89942*t89926*t89935*t89888*(2.5E1/9.0);
            double t89944 = C_k*t89891*t89769*t89888*(1.0E1/9.0);
            double t89946 = t89940*t89934*t89926*(2.5E21/9.0);
            double t89947 = t89934*t89926*t89928*t89888*(2.0E1/3.0);
            double t89945 = t89941+t89943+t89944-t89946-t89947;
            double t89948 = 1.0/(t89900*t89900*t89900);
            double t89949 = t89901*t89901;
            double t89950 = 1.0/(t89904*t89904*t89904);
            double t89951 = gamma_bb[index]*gx*t89849*(8.8E1/3.0);
            double t89952 = gamma_bb[index]*gx*t89808*t89838*t89898*7.2E1;
            double t89953 = t89808*t89839*t89898*(3.04E2/3.0);
            double t89954 = t89951+t89952+t89953;
            double t89955 = t89913*t89913;
            double t89956 = 1.0/(t89908*t89908*t89908);
            double t89957 = gamma_bb[index]*gx*t89849*(1.76E2/9.0);
            double t89958 = t89808*t89839*t89898*(3.04E2/9.0);
            double t89959 = t89957+t89958;
            double t89960 = X-1.0;
            double t89961 = t89922*t89894;
            double t89962 = t89933*t89894*t89897;
            double t89968 = t89932*t89894*t89895*2.0;
            double t89963 = t89961+t89962-t89968;
            double t89964 = cxnl1*gamma_bb[index]*gx*t89807*t89917;
            double t89965 = cxnl3*gamma_bb[index]*gx*t89810*t89808*t89918*t89898;
            double t89966 = cxnl2*t89811*t89808*t89919*t89898;
            double t89967 = cxnl0+t89964+t89965+t89966;
            double t89969 = cxnl1*gamma_bb[index]*gx*t89834*t89917*(8.0/3.0);
            double t89970 = cxnl3*gamma_bb[index]*gx*t89808*t89835*t89918*t89898*8.0;
            double t89971 = cxnl2*t89833*t89808*t89919*t89898*(1.6E1/3.0);
            double t89972 = t89970+t89971+t89969-cxnl1*t89920*t89833*t89808*t89898*(8.0/3.0)-cxnl2*t89811*t89901* \
               t89808*t89916*t89898-cxnl3*gamma_bb[index]*gx*t89810*t89913*t89808*t89909*t89898;
            double t89973 = t89930*t89922;
            double t89974 = t89930*t89938*t89894*t89895*6.0;
            double t89975 = t89930*t89933*t89897*5.0;
            double t89976 = t89973+t89974+t89975-t89930*t89932*t89895*6.0-t89930*t89936*t89894-t89930*t89894* \
               t89939*t89897*5.0;
            v_rho_b_rho_b_[index] = t89863*(t89837+t89814*t89817*(t89836-c0p*t89806*t89797*2.0))*2.0+t89867*(- \
               t89805+t89859+t89814*t89817*(t89805+t89858-t89820*t89851*t89852*t89857-a1p*c*c0p*t89806*t89780*(2.0/ \
               3.0)))*2.0+rho_b[index]*t89867*(-t89873-t89882+t89814*t89817*(t89873+t89882-t89797*t89798*t89879*t89799- \
               t89820*t89851*t89870*1.0/(t89779*t89779*t89779)*2.0+t89820*t89851*t89852*(b2f*c*t89868*(4.0/9.0)+b4f* \
               t89807*t89775*(1.0E1/9.0)+b1f*c*t89787*t89868*(2.0/9.0)+b3f*c*t89771*t89868*(2.0/3.0)-b1f*t89807*t89775* \
               t89869*(1.0/3.6E1)+b3f*t89807*t89775*t89787*(1.0/1.2E1))+t89820*t89870*1.0/(t89791*t89791)*1.0/(t89779* \
               t89779*t89779*t89779)*t89788*(1.0/2.0)-a1f*c*c0f*t89818*t89868*(8.0/9.0)-t89871*t89880*t89881*t89792* \
               t89797*(1.0/2.0)+a1f*c*t89851*t89780*t89852*t89857*(2.0/3.0)-a1p*c*t89804*t89780*t89798*t89799*(2.0/ \
               3.0))+t89797*t89798*t89879*t89799+t89871*t89880*t89881*t89792*t89797*(1.0/2.0)+a1p*c*t89804*t89780* \
               t89798*t89799*(2.0/3.0))-rho_b[index]*t89863*(-t89805+t89859+t89814*t89817*(t89805+t89858-t89859-t89820* \
               t89851*t89852*t89857))*2.0-rho_b[index]*(t89837+t89814*t89817*(t89836-t89837))*(ccaa1*gamma_bb[index]* \
               gcaa*t89823*t89849*(8.8E1/9.0)-ccaa1*t89840*t89808*t89809*t89839*2.4E1+ccaa2*t89832*t89808*t89809* \
               t89839*(3.04E2/9.0)-ccaa2*t89850*t89833*t89843*t89808*t89809*(3.2E1/3.0)-ccaa2*t89811*t89850*t89808* \
               t89809*(gamma_bb[index]*gcaa*t89849*(1.76E2/9.0)+t89808*t89809*t89839*(3.04E2/9.0))+ccaa2*t89811*1.0/ \
               (t89831*t89831*t89831)*(t89843*t89843)*t89808*t89809*2.0+ccaa3*gamma_bb[index]*gcaa*t89808*t89809* \
               t89828*t89838*7.2E1+ccaa1*gamma_bb[index]*gcaa*1.0/(t89822*t89822*t89822)*t89808*t89809*t89838*(1.28E2/ \
               9.0)+ccaa3*gamma_bb[index]*gcaa*t89810*t89808*t89809*1.0/(t89827*t89827*t89827)*(t89847*t89847)*2.0- \
               ccaa3*gamma_bb[index]*gcaa*t89810*t89808*t89809*t89848*(gamma_bb[index]*gcaa*t89849*(8.8E1/3.0)+t89808* \
               t89809*t89839*(3.04E2/3.0)+gamma_bb[index]*gcaa*t89808*t89809*t89838*7.2E1)-ccaa3*gamma_bb[index]* \
               gcaa*t89808*t89835*t89809*t89847*t89848*1.6E1)-c0*t89960*t89776*(cx0+t89963*t89967+cx1*gamma_bb[index]* \
               gx*t89807*t89917+cx2*t89811*t89808*t89919*t89898+cx3*gamma_bb[index]*gx*t89810*t89808*t89918*t89898) \
               *(4.0/9.0)-c0*t89960*t89934*(t89963*(cxnl1*gamma_bb[index]*gx*t89917*t89849*(8.8E1/9.0)-cxnl1*t89920* \
               t89808*t89839*t89898*2.4E1+cxnl2*t89808*t89919*t89839*t89898*(3.04E2/9.0)-cxnl2*t89901*t89833*t89808* \
               t89916*t89898*(3.2E1/3.0)+cxnl2*t89811*t89950*t89808*t89949*t89898*2.0-cxnl2*t89811*t89808*t89916* \
               t89959*t89898+cxnl3*gamma_bb[index]*gx*t89808*t89918*t89838*t89898*7.2E1+cxnl1*gamma_bb[index]*gx* \
               t89808*t89838*t89948*t89898*(1.28E2/9.0)-cxnl3*gamma_bb[index]*gx*t89810*t89808*t89909*t89954*t89898- \
               cxnl3*gamma_bb[index]*gx*t89913*t89808*t89835*t89909*t89898*1.6E1+cxnl3*gamma_bb[index]*gx*t89810* \
               t89808*t89955*t89956*t89898*2.0)-t89972*t89976*2.0-t89967*(-t89922*t89945+t89936*t89937*2.0+t89932* \
               t89945*t89895*6.0+t89932*t89937*t89894*1.0E1-t89933*t89945*t89897*5.0+t89936*t89945*t89894-t89937* \
               t89938*t89895*3.6E1+t89937*t89939*t89897*5.0E1+t89933*t89937*t89894*t89895*4.0-t89945*t89938*t89894* \
               t89895*6.0+t89945*t89894*t89939*t89897*5.0-t89937*t89894*1.0/(t89896*t89896*t89896*t89896*t89896*t89896* \
               t89896)*t89897*3.0E1)+cx1*gamma_bb[index]*gx*t89917*t89849*(8.8E1/9.0)-cx1*t89920*t89808*t89839*t89898* \
               2.4E1+cx2*t89808*t89919*t89839*t89898*(3.04E2/9.0)-cx2*t89901*t89833*t89808*t89916*t89898*(3.2E1/3.0) \
               +cx2*t89811*t89950*t89808*t89949*t89898*2.0-cx2*t89811*t89808*t89916*t89959*t89898+cx1*gamma_bb[index]* \
               gx*t89808*t89838*t89948*t89898*(1.28E2/9.0)+cx3*gamma_bb[index]*gx*t89808*t89918*t89838*t89898*7.2E1- \
               cx3*gamma_bb[index]*gx*t89810*t89808*t89909*t89954*t89898-cx3*gamma_bb[index]*gx*t89913*t89808*t89835* \
               t89909*t89898*1.6E1+cx3*gamma_bb[index]*gx*t89810*t89808*t89955*t89956*t89898*2.0)+c0*pow(rho_b[index],1.0/ \
               3.0)*t89960*(t89963*t89972-t89967*t89976+cx1*gamma_bb[index]*gx*t89834*t89917*(8.0/3.0)-cx1*t89920* \
               t89833*t89808*t89898*(8.0/3.0)+cx2*t89833*t89808*t89919*t89898*(1.6E1/3.0)-cx2*t89811*t89901*t89808* \
               t89916*t89898+cx3*gamma_bb[index]*gx*t89808*t89835*t89918*t89898*8.0-cx3*gamma_bb[index]*gx*t89810* \
               t89913*t89808*t89909*t89898)*(8.0/3.0);
        } else {
            v_rho_b_rho_b_[index] = 0.0;
        }

        if (is_gga_) {

            //V_rho_a_gamma_aa
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t87583 = 1.0/pow(rho_a[index],1.0/3.0);
                double t87584 = c*t87583;
                double t87585 = sqrt(t87584);
                double t87586 = pow(t87584,3.0/2.0);
                double t87587 = c*c;
                double t87588 = 1.0/pow(rho_a[index],2.0/3.0);
                double t87589 = 1.0/c0p;
                double t87590 = b1p*t87585;
                double t87591 = b3p*t87586;
                double t87592 = b4p*t87587*t87588;
                double t87593 = b2p*c*t87583;
                double t87594 = t87590+t87591+t87592+t87593;
                double t87595 = 1.0/t87594;
                double t87596 = t87595*t87589*(1.0/2.0);
                double t87597 = t87596+1.0;
                double t87598 = log(t87597);
                double t87599 = a1p*c*t87583;
                double t87600 = t87599+1.0;
                double t87601 = pow(2.0,1.0/3.0);
                double t87602 = t87601*2.0;
                double t87603 = t87602-2.0;
                double t87604 = two_13*2.0;
                double t87605 = t87604-2.0;
                double t87606 = 1.0/t87605;
                double t87607 = 1.0/c0f;
                double t87608 = 1.0/pow(rho_b[index],1.0/3.0);
                double t87609 = c*t87608;
                double t87610 = sqrt(t87609);
                double t87611 = pow(t87609,3.0/2.0);
                double t87612 = 1.0/pow(rho_b[index],2.0/3.0);
                double t87613 = b1p*t87610;
                double t87614 = b3p*t87611;
                double t87615 = b4p*t87612*t87587;
                double t87616 = b2p*c*t87608;
                double t87617 = t87613+t87614+t87615+t87616;
                double t87618 = 1.0/t87617;
                double t87619 = t87618*t87589*(1.0/2.0);
                double t87620 = t87619+1.0;
                double t87621 = log(t87620);
                double t87622 = a1p*c*t87608;
                double t87623 = t87622+1.0;
                double t87624 = c0p*t87621*t87623*2.0;
                double t87625 = rho_a[index]+rho_b[index];
                double t87626 = 1.0/pow(t87625,1.0/3.0);
                double t87627 = c*t87626;
                double t87628 = sqrt(t87627);
                double t87629 = pow(t87627,3.0/2.0);
                double t87630 = 1.0/pow(t87625,2.0/3.0);
                double t87631 = b1p*t87628;
                double t87632 = b3p*t87629;
                double t87633 = b4p*t87630*t87587;
                double t87634 = b2p*c*t87626;
                double t87635 = t87631+t87632+t87633+t87634;
                double t87636 = 1.0/t87635;
                double t87637 = t87636*t87589*(1.0/2.0);
                double t87638 = t87637+1.0;
                double t87639 = log(t87638);
                double t87640 = a1p*c*t87626;
                double t87641 = t87640+1.0;
                double t87642 = c0p*t87641*t87639*2.0;
                double t87643 = rho_a[index]-rho_b[index];
                double t87644 = t87643*t87643;
                double t87645 = 1.0/t87625;
                double t87646 = t87643*t87645;
                double t87647 = 1.0/(t87625*t87625*t87625*t87625);
                double t87648 = t87644*t87644;
                double t87649 = t87646+1.0;
                double t87650 = pow(t87649,4.0/3.0);
                double t87651 = -t87646+1.0;
                double t87652 = pow(t87651,4.0/3.0);
                double t87653 = t87650+t87652-2.0;
                double t87654 = 1.0/pow(rho_a[index],1.1E1/3.0);
                double t87655 = 1.0/pow(rho_a[index],8.0/3.0);
                double t87656 = gamma_aa[index]*t87655*(1.0/2.0);
                double t87657 = 1.0/pow(rho_b[index],8.0/3.0);
                double t87658 = gamma_bb[index]*t87657*(1.0/2.0);
                double t87659 = t87656+t87658;
                double t87660 = gcab*t87659;
                double t87661 = t87660+1.0;
                double t87662 = gcab*gcab;
                double t87663 = t87659*t87659;
                double t87664 = 1.0/pow(rho_a[index],1.9E1/3.0);
                double t87665 = t87662*t87663;
                double t87666 = gcab*t87659*2.0;
                double t87667 = t87665+t87666+1.0;
                double t87668 = t87662*t87663*3.0;
                double t87669 = gcab*t87662*t87663*t87659;
                double t87670 = gcab*t87659*3.0;
                double t87671 = t87670+t87668+t87669+1.0;
                double t87672 = 1.0/(t87661*t87661);
                double t87673 = 1.0/t87667;
                double t87674 = 1.0/(t87671*t87671);
                double t87675 = 1.0/(t87667*t87667);
                double t87676 = gamma_aa[index]*gcab*t87654*(8.0/3.0);
                double t87677 = gamma_aa[index]*t87662*t87654*t87659*(8.0/3.0);
                double t87678 = t87676+t87677;
                double t87679 = 1.0/t87671;
                double t87680 = gamma_aa[index]*gcab*t87654*4.0;
                double t87681 = gamma_aa[index]*gcab*t87662*t87654*t87663*4.0;
                double t87682 = gamma_aa[index]*t87662*t87654*t87659*8.0;
                double t87683 = t87680+t87681+t87682;
                double t87684 = gcab*t87655;
                double t87685 = t87662*t87655*t87659;
                double t87686 = t87684+t87685;
                double t87687 = gcab*t87655*(3.0/2.0);
                double t87688 = t87662*t87655*t87659*3.0;
                double t87689 = gcab*t87662*t87663*t87655*(3.0/2.0);
                double t87690 = t87687+t87688+t87689;
                double t87691 = gx*gx;
                double t87692 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t87693 = gamma_aa[index]*gamma_aa[index];
                double t87694 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t87695 = gamma_aa[index]*gx*t87655;
                double t87696 = t87695+1.0;
                double t87697 = gamma_aa[index]*gx*t87655*3.0;
                double t87698 = gamma_aa[index]*gx*t87691*t87693*t87694;
                double t87699 = t87691*t87692*t87693*3.0;
                double t87700 = t87697+t87698+t87699+1.0;
                double t87701 = gamma_aa[index]*gx*t87655*2.0;
                double t87702 = t87691*t87692*t87693;
                double t87703 = t87701+t87702+1.0;
                double t87704 = tau_a[index]*1.0E20;
                double t87705 = pow(rho_a[index],5.0/3.0);
                double t87710 = C_k*t87705;
                double t87706 = -t87710+t87704;
                double t87707 = 0.0 ;
                double t87708 = pow(rho_a[index],2.0/3.0);
                double t87709 = 1.0/tau_a[index];
                double t87711 = ( (t87706 > 0.0) ?  1.0 : 0.0 ) ;
                double t87712 = C_k*t87707*t87708*(5.0E20/3.0);
                double t87713 = C_k*C_k;
                double t87714 = pow(rho_a[index],7.0/3.0);
                double t87715 = C_k*t87711*t87708*t87709*(5.0/3.0);
                double t87722 = t87713*t87714*t87707*t87709*(5.0/3.0);
                double t87716 = t87712-t87722+t87715;
                double t87717 = t87710-t87704;
                double t87718 = ( (t87717 > 0.0) ?  1.0 : 0.0 ) ;
                double t87719 = t87718*1.0E20;
                double t87720 = C_k*t87711*t87705*t87709;
                double t87721 = t87720+t87719+1.0;
                double t87723 = t87720+t87719-1.0;
                double t87724 = t87723*t87723;
                double t87725 = t87724*t87724;
                double t87726 = 1.0/t87721;
                double t87727 = 1.0/(t87721*t87721*t87721);
                double t87728 = 1.0/(t87721*t87721*t87721*t87721*t87721);
                double t87729 = 1.0/t87696;
                double t87730 = 1.0/t87703;
                double t87731 = 1.0/t87700;
                double t87732 = 1.0/(t87696*t87696);
                double t87733 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]*rho_a[index]);
                double t87734 = 1.0/(t87700*t87700);
                double t87735 = 1.0/(t87703*t87703);
                double t87736 = gx*t87655*3.0;
                double t87737 = gamma_aa[index]*t87691*t87692*6.0;
                double t87738 = gx*t87691*t87693*t87694*3.0;
                double t87739 = t87736+t87737+t87738;
                double t87740 = gx*t87655*2.0;
                double t87741 = gamma_aa[index]*t87691*t87692*2.0;
                double t87742 = t87740+t87741;
                double t87743 = gamma_aa[index]*gx*t87654*(1.6E1/3.0);
                double t87744 = t87664*t87691*t87693*(1.6E1/3.0);
                double t87745 = t87743+t87744;
                double t87746 = gamma_aa[index]*gx*t87654*8.0;
                double t87747 = gamma_aa[index]*gx*t87733*t87691*t87693*8.0;
                double t87748 = t87664*t87691*t87693*1.6E1;
                double t87749 = t87746+t87747+t87748;
                double t87750 = 1.0/(t87696*t87696*t87696);
                double t87751 = gx*t87654*8.0;
                double t87752 = gamma_aa[index]*t87664*t87691*3.2E1;
                double t87753 = gx*t87733*t87691*t87693*2.4E1;
                double t87754 = t87751+t87752+t87753;
                double t87755 = gx*t87654*(1.6E1/3.0);
                double t87756 = gamma_aa[index]*t87664*t87691*(3.2E1/3.0);
                double t87757 = t87755+t87756;
                double t87758 = 1.0/(t87703*t87703*t87703);
                double t87759 = 1.0/(t87700*t87700*t87700);
                double t87760 = t87723*t87726;
                double t87761 = t87723*t87725*t87728;
                double t87762 = t87760+t87761-t87723*t87724*t87727*2.0;
                double t87763 = cxnl1*gx*t87655*t87729;
                double t87764 = cxnl2*gamma_aa[index]*t87730*t87691*t87692*2.0;
                double t87765 = cxnl3*gx*t87731*t87691*t87693*t87694*3.0;
                double t87766 = t87763+t87764+t87765-cxnl1*gamma_aa[index]*t87732*t87691*t87692-cxnl2*t87742*t87735* \
                   t87691*t87692*t87693-cxnl3*gamma_aa[index]*gx*t87734*t87691*t87693*t87694*t87739;
                double t87767 = b1f*t87585;
                double t87768 = b3f*t87586;
                double t87769 = b4f*t87587*t87588;
                double t87770 = b2f*c*t87583;
                double t87771 = t87770+t87767+t87768+t87769;
                double t87772 = 1.0/t87771;
                double t87773 = t87607*t87772*(1.0/2.0);
                double t87774 = t87773+1.0;
                double t87775 = log(t87774);
                double t87776 = a1f*c*t87583;
                double t87777 = t87776+1.0;
                double t87778 = c0f*t87775*t87777*2.0;
                double t87779 = c0p*t87600*t87598*2.0;
                double t87780 = gcaa*gcaa;
                double t87781 = gamma_aa[index]*gcaa*t87655;
                double t87782 = t87781+1.0;
                double t87783 = gamma_aa[index]*gcaa*t87655*3.0;
                double t87784 = gamma_aa[index]*gcaa*t87780*t87693*t87694;
                double t87785 = t87780*t87692*t87693*3.0;
                double t87786 = t87783+t87784+t87785+1.0;
                double t87787 = gamma_aa[index]*gcaa*t87655*2.0;
                double t87788 = t87780*t87692*t87693;
                double t87789 = t87787+t87788+1.0;
                double t87790 = 1.0/t87661;
                double t87791 = 1.0/pow(t87625,4.0/3.0);
                double t87792 = b1f*t87628;
                double t87793 = b3f*t87629;
                double t87794 = b4f*t87630*t87587;
                double t87795 = b2f*c*t87626;
                double t87796 = t87792+t87793+t87794+t87795;
                double t87797 = 1.0/t87796;
                double t87798 = t87607*t87797*(1.0/2.0);
                double t87799 = t87798+1.0;
                double t87800 = log(t87799);
                double t87801 = a1f*c*t87626;
                double t87802 = t87801+1.0;
                double t87804 = c0f*t87800*t87802*2.0;
                double t87803 = t87642-t87804;
                double t87805 = 1.0/(t87625*t87625);
                double t87832 = t87643*t87805;
                double t87806 = -t87832+t87645;
                double t87807 = 1.0/pow(t87625,5.0/3.0);
                double t87808 = 1.0/sqrt(t87627);
                double t87809 = 1.0/t87638;
                double t87810 = 1.0/(t87635*t87635);
                double t87811 = b4p*t87807*t87587*(2.0/3.0);
                double t87812 = b2p*c*t87791*(1.0/3.0);
                double t87813 = b1p*c*t87808*t87791*(1.0/6.0);
                double t87814 = b3p*c*t87628*t87791*(1.0/2.0);
                double t87815 = t87811+t87812+t87813+t87814;
                double t87816 = t87810*t87641*t87815*t87809;
                double t87817 = 1.0/d2fz0;
                double t87818 = 1.0/Aa;
                double t87819 = b1a*t87628;
                double t87820 = b3a*t87629;
                double t87821 = b4a*t87630*t87587;
                double t87822 = b2a*c*t87626;
                double t87823 = t87820+t87821+t87822+t87819;
                double t87824 = 1.0/t87823;
                double t87825 = t87824*t87818*(1.0/2.0);
                double t87826 = t87825+1.0;
                double t87827 = log(t87826);
                double t87828 = a1a*c*t87626;
                double t87829 = t87828+1.0;
                double t87830 = 1.0/(t87625*t87625*t87625*t87625*t87625);
                double t87831 = pow(t87649,1.0/3.0);
                double t87833 = t87831*t87806*(4.0/3.0);
                double t87834 = pow(t87651,1.0/3.0);
                double t87835 = t87833-t87806*t87834*(4.0/3.0);
                double t87836 = t87647*t87648;
                double t87837 = t87836-1.0;
                double t87838 = 1.0/pow(rho_a[index],4.0/3.0);
                double t87839 = 1.0/pow(rho_a[index],5.0/3.0);
                double t87840 = 1.0/sqrt(t87584);
                double t87841 = 1.0/t87597;
                double t87842 = 1.0/(t87594*t87594);
                double t87843 = b4p*t87587*t87839*(2.0/3.0);
                double t87844 = b2p*c*t87838*(1.0/3.0);
                double t87845 = b1p*c*t87840*t87838*(1.0/6.0);
                double t87846 = b3p*c*t87585*t87838*(1.0/2.0);
                double t87847 = t87843+t87844+t87845+t87846;
                double t87848 = t87600*t87841*t87842*t87847;
                double t87849 = t87778-t87779;
                double t87850 = t87603*t87606*t87849;
                double t87851 = Aa*t87606*t87653*t87817*t87827*t87837*t87829*2.0;
                double t87852 = t87850+t87779;
                double t87853 = 1.0/t87782;
                double t87854 = 1.0/t87789;
                double t87855 = 1.0/t87786;
                double t87856 = 1.0/(t87782*t87782);
                double t87857 = 1.0/(t87786*t87786);
                double t87858 = 1.0/(t87789*t87789);
                double t87859 = gcaa*t87655*3.0;
                double t87860 = gamma_aa[index]*t87780*t87692*6.0;
                double t87861 = gcaa*t87780*t87693*t87694*3.0;
                double t87862 = t87860+t87861+t87859;
                double t87863 = gcaa*t87655*2.0;
                double t87864 = gamma_aa[index]*t87780*t87692*2.0;
                double t87865 = t87863+t87864;
                double t87866 = gamma_aa[index]*gcaa*t87654*(1.6E1/3.0);
                double t87867 = t87780*t87664*t87693*(1.6E1/3.0);
                double t87868 = t87866+t87867;
                double t87869 = gamma_aa[index]*gcaa*t87654*8.0;
                double t87870 = gamma_aa[index]*gcaa*t87733*t87780*t87693*8.0;
                double t87871 = t87780*t87664*t87693*1.6E1;
                double t87872 = t87870+t87871+t87869;
                double t87873 = 1.0/t87774;
                double t87874 = 1.0/(t87771*t87771);
                double t87875 = b4f*t87587*t87839*(2.0/3.0);
                double t87876 = b2f*c*t87838*(1.0/3.0);
                double t87877 = b1f*c*t87840*t87838*(1.0/6.0);
                double t87878 = b3f*c*t87585*t87838*(1.0/2.0);
                double t87879 = t87875+t87876+t87877+t87878;
                double t87880 = a1f*c*c0f*t87775*t87838*(2.0/3.0);
                double t87881 = a1p*c*c0p*t87838*t87598*(2.0/3.0);
                double t87882 = ccaa1*gcaa*t87655*t87853;
                double t87883 = ccaa2*gamma_aa[index]*t87780*t87692*t87854*2.0;
                double t87884 = ccaa3*gcaa*t87780*t87693*t87855*t87694*3.0;
                double t87885 = t87882+t87883+t87884-ccaa1*gamma_aa[index]*t87780*t87692*t87856-ccaa2*t87780*t87692* \
                   t87693*t87865*t87858-ccaa3*gamma_aa[index]*gcaa*t87780*t87862*t87693*t87694*t87857;
                v_rho_a_gamma_aa_[index] = -(X-1.0)*(c0*pow(rho_a[index],1.0/3.0)*(t87762*t87766+cx1*gx*t87655*t87729- \
                   cx1*gamma_aa[index]*t87732*t87691*t87692+cx2*gamma_aa[index]*t87730*t87691*t87692*2.0-cx2*t87742*t87735* \
                   t87691*t87692*t87693+cx3*gx*t87731*t87691*t87693*t87694*3.0-cx3*gamma_aa[index]*gx*t87734*t87691*t87693* \
                   t87694*t87739)*(4.0/3.0)+c0*pow(rho_a[index],4.0/3.0)*(t87766*(t87716*t87726-1.0/(t87721*t87721)*t87723* \
                   t87716-t87724*t87716*t87727*6.0+t87716*t87725*t87728*5.0+1.0/(t87721*t87721*t87721*t87721)*t87723* \
                   t87724*t87716*6.0-1.0/(t87721*t87721*t87721*t87721*t87721*t87721)*t87723*t87716*t87725*5.0)+t87762* \
                   (cxnl1*gx*t87654*t87729*(-8.0/3.0)-cxnl2*gamma_aa[index]*t87730*t87664*t87691*(3.2E1/3.0)+cxnl1*gamma_aa[index]* \
                   t87732*t87664*t87691*8.0+cxnl2*t87742*t87735*t87664*t87691*t87693*(1.6E1/3.0)+cxnl2*t87735*t87691* \
                   t87692*t87693*t87757+cxnl2*gamma_aa[index]*t87735*t87691*t87745*t87692*2.0-cxnl1*gx*t87750*t87733* \
                   t87691*t87693*(1.6E1/3.0)-cxnl3*gx*t87731*t87733*t87691*t87693*2.4E1+cxnl3*gx*t87734*t87691*t87693* \
                   t87694*t87749*3.0-cxnl2*t87742*t87691*t87745*t87692*t87693*t87758*2.0+cxnl3*gamma_aa[index]*gx*t87733* \
                   t87734*t87691*t87693*t87739*8.0+cxnl3*gamma_aa[index]*gx*t87734*t87691*t87754*t87693*t87694-cxnl3* \
                   gamma_aa[index]*gx*t87691*t87693*t87694*t87739*t87749*t87759*2.0)-cx1*gx*t87654*t87729*(8.0/3.0)+cx1* \
                   gamma_aa[index]*t87732*t87664*t87691*8.0-cx2*gamma_aa[index]*t87730*t87664*t87691*(3.2E1/3.0)+cx2* \
                   t87742*t87735*t87664*t87691*t87693*(1.6E1/3.0)+cx2*t87735*t87691*t87692*t87693*t87757+cx2*gamma_aa[index]* \
                   t87735*t87691*t87745*t87692*2.0-cx1*gx*t87750*t87733*t87691*t87693*(1.6E1/3.0)-cx3*gx*t87731*t87733* \
                   t87691*t87693*2.4E1+cx3*gx*t87734*t87691*t87693*t87694*t87749*3.0-cx2*t87742*t87691*t87745*t87692* \
                   t87693*t87758*2.0+cx3*gamma_aa[index]*gx*t87733*t87734*t87691*t87693*t87739*8.0+cx3*gamma_aa[index]* \
                   gx*t87734*t87691*t87754*t87693*t87694-cx3*gamma_aa[index]*gx*t87691*t87693*t87694*t87739*t87749*t87759* \
                   2.0))-t87852*t87885-(rho_a[index]*(t87779+t87603*t87606*(t87778-c0p*t87600*t87598*2.0))+rho_b[index]* \
                   (t87624-t87603*t87606*(t87624-c0f*log((t87607*(1.0/2.0))/(b1f*t87610+b3f*t87611+b2f*c*t87608+b4f*t87612* \
                   t87587)+1.0)*(a1f*c*t87608+1.0)*2.0))-t87625*(t87642+t87851-t87803*t87606*t87653*t87647*t87648))*(ccab1* \
                   gcab*t87654*t87790*(4.0/3.0)-ccab2*t87662*t87663*t87675*(gcab*t87654*(8.0/3.0)+gamma_aa[index]*t87662* \
                   t87664*(4.0/3.0)+t87662*t87654*t87659*(8.0/3.0))-ccab1*gamma_aa[index]*t87662*t87672*t87664*(4.0/3.0) \
                   +ccab2*gamma_aa[index]*t87662*t87664*t87673*(4.0/3.0)-ccab1*t87662*t87654*t87672*t87659*(4.0/3.0)+ \
                   ccab2*t87662*t87654*t87673*t87659*(8.0/3.0)-ccab2*t87662*t87655*t87675*t87659*t87678+ccab2*t87662* \
                   t87663*1.0/(t87667*t87667*t87667)*t87686*t87678*2.0+ccab3*gcab*t87662*t87654*t87663*t87679*4.0+ccab3* \
                   gamma_aa[index]*gcab*t87662*t87664*t87659*t87679*4.0-ccab2*gamma_aa[index]*t87662*t87654*t87675*t87659* \
                   t87686*(8.0/3.0)-ccab3*gcab*t87662*t87663*t87655*t87674*t87683*(3.0/2.0)-ccab3*gcab*t87662*t87663* \
                   t87674*t87659*(gcab*t87654*4.0+gamma_aa[index]*t87662*t87664*4.0+t87662*t87654*t87659*8.0+gcab*t87662* \
                   t87654*t87663*4.0+gamma_aa[index]*gcab*t87662*t87664*t87659*4.0)+ccab1*gamma_aa[index]*gcab*1.0/(t87661* \
                   t87661*t87661)*t87662*t87664*t87659*(4.0/3.0)+ccab3*gcab*t87662*1.0/(t87671*t87671*t87671)*t87663* \
                   t87690*t87683*t87659*2.0-ccab3*gamma_aa[index]*gcab*t87662*t87654*t87663*t87690*t87674*4.0)+(ccab1* \
                   gcab*t87655*t87790*(1.0/2.0)-ccab1*t87662*t87672*t87655*t87659*(1.0/2.0)+ccab2*t87662*t87655*t87673* \
                   t87659-ccab2*t87662*t87663*t87675*t87686+ccab3*gcab*t87662*t87663*t87655*t87679*(3.0/2.0)-ccab3*gcab* \
                   t87662*t87663*t87690*t87674*t87659)*(-t87642+t87850-t87851+t87779-rho_a[index]*(t87881-t87848+t87603* \
                   t87606*(t87880+t87848-t87873*t87874*t87777*t87879-a1p*c*c0p*t87838*t87598*(2.0/3.0)))+t87625*(-t87816+ \
                   t87606*t87653*t87647*t87648*(t87816-(t87802*1.0/(t87796*t87796)*(b2f*c*t87791*(1.0/3.0)+b4f*t87807* \
                   t87587*(2.0/3.0)+b1f*c*t87808*t87791*(1.0/6.0)+b3f*c*t87628*t87791*(1.0/2.0)))/t87799+a1f*c*c0f*t87800* \
                   t87791*(2.0/3.0)-a1p*c*c0p*t87791*t87639*(2.0/3.0))+a1p*c*c0p*t87791*t87639*(2.0/3.0)-t87803*t87830* \
                   t87606*t87653*t87648*4.0+t87803*t87606*t87835*t87647*t87648+t87803*t87606*t87643*t87644*t87653*t87647* \
                   4.0+Aa*t87606*t87653*t87817*t87827*t87829*(t87830*t87648*4.0-t87643*t87644*t87647*4.0)*2.0-Aa*t87606* \
                   t87817*t87835*t87827*t87837*t87829*2.0-(t87606*1.0/(t87823*t87823)*t87653*t87817*t87837*t87829*(b2a* \
                   c*t87791*(1.0/3.0)+b4a*t87807*t87587*(2.0/3.0)+b1a*c*t87808*t87791*(1.0/6.0)+b3a*c*t87628*t87791*(1.0/ \
                   2.0)))/t87826+Aa*a1a*c*t87606*t87653*t87817*t87791*t87827*t87837*(2.0/3.0))+t87803*t87606*t87653*t87647* \
                   t87648)+rho_a[index]*t87885*(t87881-t87848+t87603*t87606*(t87880-t87881+t87848-t87873*t87874*t87777* \
                   t87879))-rho_a[index]*t87852*(ccaa1*gcaa*t87654*t87853*(-8.0/3.0)-ccaa2*gamma_aa[index]*t87780*t87664* \
                   t87854*(3.2E1/3.0)+ccaa1*gamma_aa[index]*t87780*t87664*t87856*8.0+ccaa2*t87780*t87664*t87693*t87865* \
                   t87858*(1.6E1/3.0)-ccaa1*gcaa*t87733*t87780*1.0/(t87782*t87782*t87782)*t87693*(1.6E1/3.0)+ccaa2*t87780* \
                   t87692*t87693*t87858*(gcaa*t87654*(1.6E1/3.0)+gamma_aa[index]*t87780*t87664*(3.2E1/3.0))+ccaa2*gamma_aa[index]* \
                   t87780*t87692*t87858*t87868*2.0-ccaa3*gcaa*t87733*t87780*t87693*t87855*2.4E1+ccaa3*gcaa*t87780*t87872* \
                   t87693*t87694*t87857*3.0-ccaa2*t87780*t87692*t87693*t87865*t87868*1.0/(t87789*t87789*t87789)*2.0+ccaa3* \
                   gamma_aa[index]*gcaa*t87780*t87693*t87694*t87857*(gcaa*t87654*8.0+gamma_aa[index]*t87780*t87664*3.2E1+ \
                   gcaa*t87733*t87780*t87693*2.4E1)+ccaa3*gamma_aa[index]*gcaa*t87733*t87780*t87862*t87693*t87857*8.0- \
                   ccaa3*gamma_aa[index]*gcaa*t87780*t87862*t87872*t87693*t87694*1.0/(t87786*t87786*t87786)*2.0);
            } else if (rho_a[index] > cutoff_) {
                double t91035 = 1.0/pow(rho_a[index],1.0/3.0);
                double t91036 = c*t91035;
                double t91037 = sqrt(t91036);
                double t91038 = pow(t91036,3.0/2.0);
                double t91039 = c*c;
                double t91040 = 1.0/pow(rho_a[index],2.0/3.0);
                double t91041 = 1.0/c0p;
                double t91042 = b1p*t91037;
                double t91043 = b3p*t91038;
                double t91044 = b4p*t91040*t91039;
                double t91045 = b2p*c*t91035;
                double t91046 = t91042+t91043+t91044+t91045;
                double t91047 = 1.0/t91046;
                double t91048 = t91041*t91047*(1.0/2.0);
                double t91049 = t91048+1.0;
                double t91050 = log(t91049);
                double t91051 = a1p*c*t91035;
                double t91052 = t91051+1.0;
                double t91053 = 1.0/pow(rho_a[index],8.0/3.0);
                double t91054 = gcaa*gcaa;
                double t91055 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t91056 = gamma_aa[index]*gamma_aa[index];
                double t91057 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t91058 = gamma_aa[index]*gcaa*t91053;
                double t91059 = t91058+1.0;
                double t91060 = gamma_aa[index]*gcaa*t91053*3.0;
                double t91061 = gamma_aa[index]*gcaa*t91054*t91056*t91057;
                double t91062 = t91054*t91055*t91056*3.0;
                double t91063 = t91060+t91061+t91062+1.0;
                double t91064 = gamma_aa[index]*gcaa*t91053*2.0;
                double t91065 = t91054*t91055*t91056;
                double t91066 = t91064+t91065+1.0;
                double t91067 = pow(2.0,1.0/3.0);
                double t91068 = t91067*2.0;
                double t91069 = t91068-2.0;
                double t91070 = two_13*2.0;
                double t91071 = t91070-2.0;
                double t91072 = 1.0/t91071;
                double t91073 = 1.0/c0f;
                double t91074 = b1f*t91037;
                double t91075 = b3f*t91038;
                double t91076 = b4f*t91040*t91039;
                double t91077 = b2f*c*t91035;
                double t91078 = t91074+t91075+t91076+t91077;
                double t91079 = 1.0/t91078;
                double t91080 = t91073*t91079*(1.0/2.0);
                double t91081 = t91080+1.0;
                double t91082 = log(t91081);
                double t91083 = a1f*c*t91035;
                double t91084 = t91083+1.0;
                double t91085 = c0f*t91082*t91084*2.0;
                double t91086 = c0p*t91050*t91052*2.0;
                double t91087 = 1.0/t91059;
                double t91088 = 1.0/t91066;
                double t91089 = 1.0/t91063;
                double t91090 = 1.0/pow(rho_a[index],1.9E1/3.0);
                double t91091 = 1.0/(t91059*t91059);
                double t91092 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]*rho_a[index]);
                double t91093 = 1.0/pow(rho_a[index],1.1E1/3.0);
                double t91094 = 1.0/(t91063*t91063);
                double t91095 = 1.0/(t91066*t91066);
                double t91096 = gcaa*t91053*3.0;
                double t91097 = gamma_aa[index]*t91054*t91055*6.0;
                double t91098 = gcaa*t91054*t91056*t91057*3.0;
                double t91099 = t91096+t91097+t91098;
                double t91100 = gcaa*t91053*2.0;
                double t91101 = gamma_aa[index]*t91054*t91055*2.0;
                double t91102 = t91100+t91101;
                double t91103 = gamma_aa[index]*gcaa*t91093*(1.6E1/3.0);
                double t91104 = t91054*t91090*t91056*(1.6E1/3.0);
                double t91105 = t91103+t91104;
                double t91106 = gamma_aa[index]*gcaa*t91093*8.0;
                double t91107 = gamma_aa[index]*gcaa*t91054*t91056*t91092*8.0;
                double t91108 = t91054*t91090*t91056*1.6E1;
                double t91109 = t91106+t91107+t91108;
                double t91110 = 1.0/pow(rho_a[index],4.0/3.0);
                double t91111 = 1.0/pow(rho_a[index],5.0/3.0);
                double t91112 = 1.0/sqrt(t91036);
                double t91113 = 1.0/t91049;
                double t91114 = 1.0/(t91046*t91046);
                double t91115 = b4p*t91111*t91039*(2.0/3.0);
                double t91116 = b2p*c*t91110*(1.0/3.0);
                double t91117 = b1p*c*t91110*t91112*(1.0/6.0);
                double t91118 = b3p*c*t91110*t91037*(1.0/2.0);
                double t91119 = t91115+t91116+t91117+t91118;
                double t91120 = t91113*t91114*t91052*t91119;
                double t91121 = ccaa1*gcaa*t91053*t91087;
                double t91122 = ccaa2*gamma_aa[index]*t91054*t91055*t91088*2.0;
                double t91123 = ccaa3*gcaa*t91054*t91056*t91057*t91089*3.0;
                double t91124 = t91121+t91122+t91123-ccaa1*gamma_aa[index]*t91054*t91055*t91091-ccaa2*t91102*t91054* \
                   t91055*t91056*t91095-ccaa3*gamma_aa[index]*gcaa*t91054*t91056*t91057*t91094*t91099;
                double t91125 = pow(rho_a[index],5.0/3.0);
                double t91126 = C_k*t91125;
                double t91127 = tau_a[index]*1.0E20;
                double t91128 = 1.0/tau_a[index];
                double t91129 = -t91126+t91127;
                double t91130 = ( (t91129 > 0.0) ?  1.0 : 0.0 ) ;
                double t91131 = C_k*t91130*t91125*t91128;
                double t91132 = t91126-t91127;
                double t91133 = ( (t91132 > 0.0) ?  1.0 : 0.0 ) ;
                double t91134 = t91133*1.0E20;
                double t91135 = t91131+t91134-1.0;
                double t91136 = t91135*t91135;
                double t91137 = t91131+t91134+1.0;
                double t91138 = t91136*t91136;
                double t91139 = gx*gx;
                double t91140 = gamma_aa[index]*gx*t91053;
                double t91141 = t91140+1.0;
                double t91142 = gamma_aa[index]*gx*t91053*3.0;
                double t91143 = gamma_aa[index]*gx*t91056*t91057*t91139;
                double t91144 = t91055*t91056*t91139*3.0;
                double t91145 = t91142+t91143+t91144+1.0;
                double t91146 = gamma_aa[index]*gx*t91053*2.0;
                double t91147 = t91055*t91056*t91139;
                double t91148 = t91146+t91147+1.0;
                double t91149 = 1.0/t91141;
                double t91150 = 1.0/t91148;
                double t91151 = 1.0/t91145;
                double t91152 = 1.0/(t91141*t91141);
                double t91153 = gx*t91053*3.0;
                double t91154 = gamma_aa[index]*t91055*t91139*6.0;
                double t91155 = gx*t91056*t91057*t91139*3.0;
                double t91156 = t91153+t91154+t91155;
                double t91157 = 1.0/(t91145*t91145);
                double t91158 = gx*t91053*2.0;
                double t91159 = gamma_aa[index]*t91055*t91139*2.0;
                double t91160 = t91158+t91159;
                double t91161 = 1.0/(t91148*t91148);
                double t91162 = X-1.0;
                double t91163 = cxnl1*gx*t91053*t91149;
                double t91164 = cxnl2*gamma_aa[index]*t91150*t91055*t91139*2.0;
                double t91165 = cxnl3*gx*t91151*t91056*t91057*t91139*3.0;
                double t91166 = t91163+t91164+t91165-cxnl1*gamma_aa[index]*t91152*t91055*t91139-cxnl2*t91160*t91161* \
                   t91055*t91056*t91139-cxnl3*gamma_aa[index]*gx*t91056*t91057*t91156*t91139*t91157;
                double t91167 = 0.0 ;
                double t91168 = pow(rho_a[index],2.0/3.0);
                double t91169 = 1.0/t91137;
                double t91170 = C_k*t91167*t91168*(5.0E20/3.0);
                double t91171 = C_k*C_k;
                double t91172 = pow(rho_a[index],7.0/3.0);
                double t91173 = C_k*t91130*t91128*t91168*(5.0/3.0);
                double t91175 = t91171*t91172*t91128*t91167*(5.0/3.0);
                double t91174 = t91170+t91173-t91175;
                double t91176 = 1.0/(t91137*t91137*t91137);
                double t91177 = 1.0/(t91137*t91137*t91137*t91137*t91137);
                double t91178 = t91135*t91169;
                double t91179 = t91135*t91138*t91177;
                double t91180 = t91178+t91179-t91135*t91136*t91176*2.0;
                double t91181 = gamma_aa[index]*gx*t91093*(1.6E1/3.0);
                double t91182 = t91090*t91056*t91139*(1.6E1/3.0);
                double t91183 = t91181+t91182;
                double t91184 = gamma_aa[index]*gx*t91093*8.0;
                double t91185 = gamma_aa[index]*gx*t91056*t91092*t91139*8.0;
                double t91186 = t91090*t91056*t91139*1.6E1;
                double t91187 = t91184+t91185+t91186;
                double t91188 = 1.0/(t91141*t91141*t91141);
                double t91189 = gx*t91093*8.0;
                double t91190 = gamma_aa[index]*t91090*t91139*3.2E1;
                double t91191 = gx*t91056*t91092*t91139*2.4E1;
                double t91192 = t91190+t91191+t91189;
                double t91193 = gx*t91093*(1.6E1/3.0);
                double t91194 = gamma_aa[index]*t91090*t91139*(3.2E1/3.0);
                double t91195 = t91193+t91194;
                double t91196 = 1.0/(t91148*t91148*t91148);
                double t91197 = 1.0/(t91145*t91145*t91145);
                v_rho_a_gamma_aa_[index] = -t91124*(t91086+t91072*t91069*(t91085-c0p*t91050*t91052*2.0))+rho_a[index]* \
                   t91124*(-t91120+t91072*t91069*(t91120-(t91084*1.0/(t91078*t91078)*(b2f*c*t91110*(1.0/3.0)+b4f*t91111* \
                   t91039*(2.0/3.0)+b1f*c*t91110*t91112*(1.0/6.0)+b3f*c*t91110*t91037*(1.0/2.0)))/t91081+a1f*c*c0f*t91110* \
                   t91082*(2.0/3.0)-a1p*c*c0p*t91110*t91050*(2.0/3.0))+a1p*c*c0p*t91110*t91050*(2.0/3.0))-rho_a[index]* \
                   (t91086+t91072*t91069*(t91085-t91086))*(ccaa1*gcaa*t91093*t91087*(-8.0/3.0)+ccaa1*gamma_aa[index]* \
                   t91054*t91090*t91091*8.0-ccaa2*gamma_aa[index]*t91054*t91090*t91088*(3.2E1/3.0)+ccaa2*t91102*t91054* \
                   t91090*t91056*t91095*(1.6E1/3.0)-ccaa1*gcaa*t91054*t91056*t91092*1.0/(t91059*t91059*t91059)*(1.6E1/ \
                   3.0)+ccaa2*t91054*t91055*t91056*t91095*(gcaa*t91093*(1.6E1/3.0)+gamma_aa[index]*t91054*t91090*(3.2E1/ \
                   3.0))+ccaa2*gamma_aa[index]*t91105*t91054*t91055*t91095*2.0-ccaa3*gcaa*t91054*t91056*t91092*t91089* \
                   2.4E1+ccaa3*gcaa*t91054*t91109*t91056*t91057*t91094*3.0-ccaa2*t91102*t91105*t91054*t91055*t91056*1.0/ \
                   (t91066*t91066*t91066)*2.0+ccaa3*gamma_aa[index]*gcaa*t91054*t91056*t91057*t91094*(gcaa*t91093*8.0+ \
                   gamma_aa[index]*t91054*t91090*3.2E1+gcaa*t91054*t91056*t91092*2.4E1)+ccaa3*gamma_aa[index]*gcaa*t91054* \
                   t91056*t91092*t91094*t91099*8.0-ccaa3*gamma_aa[index]*gcaa*t91054*1.0/(t91063*t91063*t91063)*t91109* \
                   t91056*t91057*t91099*2.0)-c0*pow(rho_a[index],1.0/3.0)*t91162*(t91180*t91166+cx1*gx*t91053*t91149- \
                   cx1*gamma_aa[index]*t91152*t91055*t91139+cx2*gamma_aa[index]*t91150*t91055*t91139*2.0-cx2*t91160*t91161* \
                   t91055*t91056*t91139+cx3*gx*t91151*t91056*t91057*t91139*3.0-cx3*gamma_aa[index]*gx*t91056*t91057*t91156* \
                   t91139*t91157)*(4.0/3.0)-c0*pow(rho_a[index],4.0/3.0)*t91162*(t91166*(t91174*t91169-t91135*1.0/(t91137* \
                   t91137)*t91174-t91136*t91174*t91176*6.0+t91138*t91174*t91177*5.0+t91135*t91136*1.0/(t91137*t91137* \
                   t91137*t91137)*t91174*6.0-t91135*1.0/(t91137*t91137*t91137*t91137*t91137*t91137)*t91138*t91174*5.0) \
                   +t91180*(cxnl1*gx*t91093*t91149*(-8.0/3.0)-cxnl2*gamma_aa[index]*t91150*t91090*t91139*(3.2E1/3.0)+ \
                   cxnl1*gamma_aa[index]*t91152*t91090*t91139*8.0+cxnl2*t91160*t91161*t91090*t91056*t91139*(1.6E1/3.0) \
                   +cxnl2*t91161*t91055*t91056*t91139*t91195+cxnl2*gamma_aa[index]*t91161*t91055*t91183*t91139*2.0-cxnl3* \
                   gx*t91151*t91056*t91092*t91139*2.4E1-cxnl1*gx*t91056*t91092*t91139*t91188*(1.6E1/3.0)+cxnl3*gx*t91056* \
                   t91057*t91139*t91157*t91187*3.0-cxnl2*t91160*t91055*t91056*t91183*t91139*t91196*2.0+cxnl3*gamma_aa[index]* \
                   gx*t91056*t91092*t91156*t91139*t91157*8.0+cxnl3*gamma_aa[index]*gx*t91056*t91057*t91192*t91139*t91157- \
                   cxnl3*gamma_aa[index]*gx*t91056*t91057*t91156*t91139*t91187*t91197*2.0)-cx1*gx*t91093*t91149*(8.0/ \
                   3.0)+cx1*gamma_aa[index]*t91152*t91090*t91139*8.0-cx2*gamma_aa[index]*t91150*t91090*t91139*(3.2E1/ \
                   3.0)+cx2*t91160*t91161*t91090*t91056*t91139*(1.6E1/3.0)+cx2*t91161*t91055*t91056*t91139*t91195+cx2* \
                   gamma_aa[index]*t91161*t91055*t91183*t91139*2.0-cx1*gx*t91056*t91092*t91139*t91188*(1.6E1/3.0)-cx3* \
                   gx*t91151*t91056*t91092*t91139*2.4E1+cx3*gx*t91056*t91057*t91139*t91157*t91187*3.0-cx2*t91160*t91055* \
                   t91056*t91183*t91139*t91196*2.0+cx3*gamma_aa[index]*gx*t91056*t91092*t91156*t91139*t91157*8.0+cx3* \
                   gamma_aa[index]*gx*t91056*t91057*t91192*t91139*t91157-cx3*gamma_aa[index]*gx*t91056*t91057*t91156* \
                   t91139*t91187*t91197*2.0);
            } else if (rho_b[index] > cutoff_) {
                v_rho_a_gamma_aa_[index] = 0.0;
            } else {
                v_rho_a_gamma_aa_[index] = 0.0;
            }

            //V_rho_a_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_a_gamma_ab_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_a_gamma_ab_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_a_gamma_ab_[index] = 0.0;
            } else {
                v_rho_a_gamma_ab_[index] = 0.0;
            }

            //V_rho_a_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t87888 = 1.0/pow(rho_a[index],1.0/3.0);
                double t87889 = c*t87888;
                double t87890 = sqrt(t87889);
                double t87891 = pow(t87889,3.0/2.0);
                double t87892 = c*c;
                double t87893 = 1.0/pow(rho_a[index],2.0/3.0);
                double t87894 = 1.0/c0p;
                double t87895 = b1p*t87890;
                double t87896 = b3p*t87891;
                double t87897 = b4p*t87892*t87893;
                double t87898 = b2p*c*t87888;
                double t87899 = t87895+t87896+t87897+t87898;
                double t87900 = 1.0/t87899;
                double t87901 = t87900*t87894*(1.0/2.0);
                double t87902 = t87901+1.0;
                double t87903 = log(t87902);
                double t87904 = a1p*c*t87888;
                double t87905 = t87904+1.0;
                double t87906 = pow(2.0,1.0/3.0);
                double t87907 = t87906*2.0;
                double t87908 = t87907-2.0;
                double t87909 = two_13*2.0;
                double t87910 = t87909-2.0;
                double t87911 = 1.0/t87910;
                double t87912 = 1.0/c0f;
                double t87913 = 1.0/pow(rho_b[index],1.0/3.0);
                double t87914 = c*t87913;
                double t87915 = sqrt(t87914);
                double t87916 = pow(t87914,3.0/2.0);
                double t87917 = 1.0/pow(rho_b[index],2.0/3.0);
                double t87918 = b1p*t87915;
                double t87919 = b3p*t87916;
                double t87920 = b4p*t87917*t87892;
                double t87921 = b2p*c*t87913;
                double t87922 = t87920+t87921+t87918+t87919;
                double t87923 = 1.0/t87922;
                double t87924 = t87923*t87894*(1.0/2.0);
                double t87925 = t87924+1.0;
                double t87926 = log(t87925);
                double t87927 = a1p*c*t87913;
                double t87928 = t87927+1.0;
                double t87929 = c0p*t87926*t87928*2.0;
                double t87930 = rho_a[index]+rho_b[index];
                double t87931 = 1.0/pow(t87930,1.0/3.0);
                double t87932 = c*t87931;
                double t87933 = sqrt(t87932);
                double t87934 = pow(t87932,3.0/2.0);
                double t87935 = 1.0/pow(t87930,2.0/3.0);
                double t87936 = b1p*t87933;
                double t87937 = b3p*t87934;
                double t87938 = b4p*t87935*t87892;
                double t87939 = b2p*c*t87931;
                double t87940 = t87936+t87937+t87938+t87939;
                double t87941 = 1.0/t87940;
                double t87942 = t87941*t87894*(1.0/2.0);
                double t87943 = t87942+1.0;
                double t87944 = log(t87943);
                double t87945 = a1p*c*t87931;
                double t87946 = t87945+1.0;
                double t87947 = c0p*t87944*t87946*2.0;
                double t87948 = rho_a[index]-rho_b[index];
                double t87949 = t87948*t87948;
                double t87950 = 1.0/t87930;
                double t87951 = t87950*t87948;
                double t87952 = 1.0/(t87930*t87930*t87930*t87930);
                double t87953 = t87949*t87949;
                double t87954 = t87951+1.0;
                double t87955 = pow(t87954,4.0/3.0);
                double t87956 = -t87951+1.0;
                double t87957 = pow(t87956,4.0/3.0);
                double t87958 = t87955+t87957-2.0;
                double t87959 = gcab*gcab;
                double t87960 = 1.0/pow(rho_a[index],1.1E1/3.0);
                double t87961 = 1.0/pow(rho_b[index],8.0/3.0);
                double t87962 = 1.0/pow(rho_a[index],8.0/3.0);
                double t87963 = gamma_aa[index]*t87962*(1.0/2.0);
                double t87964 = gamma_bb[index]*t87961*(1.0/2.0);
                double t87965 = t87963+t87964;
                double t87966 = t87965*t87965;
                double t87967 = t87966*t87959*3.0;
                double t87968 = gcab*t87965*t87966*t87959;
                double t87969 = gcab*t87965*3.0;
                double t87970 = t87967+t87968+t87969+1.0;
                double t87971 = 1.0/(t87970*t87970);
                double t87972 = gamma_aa[index]*gcab*t87960*(8.0/3.0);
                double t87973 = gamma_aa[index]*t87960*t87965*t87959*(8.0/3.0);
                double t87974 = t87972+t87973;
                double t87975 = t87966*t87959;
                double t87976 = gcab*t87965*2.0;
                double t87977 = t87975+t87976+1.0;
                double t87978 = gamma_aa[index]*gcab*t87960*4.0;
                double t87979 = gamma_aa[index]*gcab*t87960*t87966*t87959*4.0;
                double t87980 = gamma_aa[index]*t87960*t87965*t87959*8.0;
                double t87981 = t87980+t87978+t87979;
                double t87982 = gcab*t87961;
                double t87983 = t87961*t87965*t87959;
                double t87984 = t87982+t87983;
                double t87985 = 1.0/(t87977*t87977);
                double t87986 = gcab*t87965;
                double t87987 = t87986+1.0;
                double t87988 = gcab*t87961*(3.0/2.0);
                double t87989 = t87961*t87965*t87959*3.0;
                double t87990 = gcab*t87961*t87966*t87959*(3.0/2.0);
                double t87991 = t87990+t87988+t87989;
                double t87992 = c0p*t87903*t87905*2.0;
                double t87993 = 1.0/(t87987*t87987);
                double t87994 = 1.0/t87977;
                double t87995 = 1.0/t87970;
                double t87996 = 1.0/pow(t87930,4.0/3.0);
                double t87997 = b1f*t87933;
                double t87998 = b3f*t87934;
                double t87999 = b4f*t87935*t87892;
                double t88000 = b2f*c*t87931;
                double t88001 = t87997+t87998+t87999+t88000;
                double t88002 = 1.0/t88001;
                double t88003 = t87912*t88002*(1.0/2.0);
                double t88004 = t88003+1.0;
                double t88005 = log(t88004);
                double t88006 = a1f*c*t87931;
                double t88007 = t88006+1.0;
                double t88009 = c0f*t88005*t88007*2.0;
                double t88008 = t87947-t88009;
                double t88010 = 1.0/(t87930*t87930);
                double t88037 = t87948*t88010;
                double t88011 = t87950-t88037;
                double t88012 = 1.0/pow(t87930,5.0/3.0);
                double t88013 = 1.0/sqrt(t87932);
                double t88014 = 1.0/t87943;
                double t88015 = 1.0/(t87940*t87940);
                double t88016 = b4p*t87892*t88012*(2.0/3.0);
                double t88017 = b2p*c*t87996*(1.0/3.0);
                double t88018 = b1p*c*t87996*t88013*(1.0/6.0);
                double t88019 = b3p*c*t87933*t87996*(1.0/2.0);
                double t88020 = t88016+t88017+t88018+t88019;
                double t88021 = t87946*t88020*t88014*t88015;
                double t88022 = 1.0/d2fz0;
                double t88023 = 1.0/Aa;
                double t88024 = b1a*t87933;
                double t88025 = b3a*t87934;
                double t88026 = b4a*t87935*t87892;
                double t88027 = b2a*c*t87931;
                double t88028 = t88024+t88025+t88026+t88027;
                double t88029 = 1.0/t88028;
                double t88030 = t88023*t88029*(1.0/2.0);
                double t88031 = t88030+1.0;
                double t88032 = log(t88031);
                double t88033 = a1a*c*t87931;
                double t88034 = t88033+1.0;
                double t88035 = 1.0/(t87930*t87930*t87930*t87930*t87930);
                double t88036 = pow(t87954,1.0/3.0);
                double t88038 = t88011*t88036*(4.0/3.0);
                double t88039 = pow(t87956,1.0/3.0);
                double t88040 = t88038-t88011*t88039*(4.0/3.0);
                double t88041 = t87952*t87953;
                double t88042 = t88041-1.0;
                double t88043 = a1f*c*t87888;
                double t88044 = t88043+1.0;
                double t88045 = b1f*t87890;
                double t88046 = b3f*t87891;
                double t88047 = b4f*t87892*t87893;
                double t88048 = b2f*c*t87888;
                double t88049 = t88045+t88046+t88047+t88048;
                double t88050 = 1.0/t88049;
                double t88051 = t87912*t88050*(1.0/2.0);
                double t88052 = t88051+1.0;
                double t88053 = 1.0/pow(rho_a[index],4.0/3.0);
                double t88054 = 1.0/pow(rho_a[index],5.0/3.0);
                double t88055 = 1.0/sqrt(t87889);
                double t88056 = log(t88052);
                double t88057 = 1.0/t87902;
                double t88058 = 1.0/(t87899*t87899);
                double t88059 = b4p*t87892*t88054*(2.0/3.0);
                double t88060 = b2p*c*t88053*(1.0/3.0);
                double t88061 = b1p*c*t88053*t88055*(1.0/6.0);
                double t88062 = b3p*c*t87890*t88053*(1.0/2.0);
                double t88063 = t88060+t88061+t88062+t88059;
                double t88064 = t87905*t88063*t88057*t88058;
                double t88065 = Aa*t87911*t87958*t88022*t88032*t88042*t88034*2.0;
                double t88066 = t87992-c0f*t88044*t88056*2.0;
                v_rho_a_gamma_bb_[index] = -((ccab1*gcab*t87961*(1.0/2.0))/t87987-ccab1*t87961*t87965*t87993*t87959* \
                   (1.0/2.0)+ccab2*t87961*t87965*t87994*t87959-ccab2*t87966*t87984*t87985*t87959+ccab3*gcab*t87961*t87966* \
                   t87959*t87995*(3.0/2.0)-ccab3*gcab*t87971*t87991*t87965*t87966*t87959)*(t87947-t87992+t88065+rho_a[index]* \
                   (-t88064+t87911*t87908*(t88064-(t88044*1.0/(t88049*t88049)*(b2f*c*t88053*(1.0/3.0)+b4f*t87892*t88054* \
                   (2.0/3.0)+b1f*c*t88053*t88055*(1.0/6.0)+b3f*c*t87890*t88053*(1.0/2.0)))/t88052+a1f*c*c0f*t88053*t88056* \
                   (2.0/3.0)-a1p*c*c0p*t87903*t88053*(2.0/3.0))+a1p*c*c0p*t87903*t88053*(2.0/3.0))-t87930*(-t88021+t87911* \
                   t87952*t87953*t87958*(t88021-(1.0/(t88001*t88001)*t88007*(b2f*c*t87996*(1.0/3.0)+b4f*t87892*t88012* \
                   (2.0/3.0)+b1f*c*t87996*t88013*(1.0/6.0)+b3f*c*t87933*t87996*(1.0/2.0)))/t88004+a1f*c*c0f*t87996*t88005* \
                   (2.0/3.0)-a1p*c*c0p*t87944*t87996*(2.0/3.0))+a1p*c*c0p*t87944*t87996*(2.0/3.0)+t87911*t87952*t87953* \
                   t88040*t88008-t87911*t87953*t87958*t88008*t88035*4.0+t87911*t87952*t87948*t87949*t87958*t88008*4.0+ \
                   Aa*t87911*t87958*t88022*t88032*t88034*(t87953*t88035*4.0-t87952*t87948*t87949*4.0)*2.0-Aa*t87911*t88022* \
                   t88040*t88032*t88042*t88034*2.0-(t87911*t87958*t88022*t88042*t88034*1.0/(t88028*t88028)*(b2a*c*t87996* \
                   (1.0/3.0)+b4a*t87892*t88012*(2.0/3.0)+b1a*c*t87996*t88013*(1.0/6.0)+b3a*c*t87933*t87996*(1.0/2.0)) \
                   )/t88031+Aa*a1a*c*t87911*t87958*t87996*t88022*t88032*t88042*(2.0/3.0))+t87911*t87908*t88066-t87911* \
                   t87952*t87953*t87958*t88008)+(rho_a[index]*(t87992-t87911*t87908*t88066)+rho_b[index]*(t87929-t87911* \
                   t87908*(t87929-c0f*log((t87912*(1.0/2.0))/(b1f*t87915+b3f*t87916+b2f*c*t87913+b4f*t87917*t87892)+1.0) \
                   *(a1f*c*t87913+1.0)*2.0))-t87930*(t87947+t88065-t87911*t87952*t87953*t87958*t88008))*(ccab2*t87961* \
                   t87965*t87974*t87985*t87959-ccab2*t87974*t87966*t87984*t87959*1.0/(t87977*t87977*t87977)*2.0+ccab1* \
                   gamma_aa[index]*t87960*t87961*t87993*t87959*(4.0/3.0)-ccab2*gamma_aa[index]*t87960*t87961*t87994*t87959* \
                   (4.0/3.0)+ccab2*gamma_aa[index]*t87960*t87965*t87984*t87985*t87959*(8.0/3.0)+ccab3*gcab*t87961*t87971* \
                   t87981*t87966*t87959*(3.0/2.0)+ccab3*gcab*t87971*t87965*t87966*t87959*(gamma_aa[index]*t87960*t87961* \
                   t87959*4.0+gamma_aa[index]*gcab*t87960*t87961*t87965*t87959*4.0)+ccab2*gamma_aa[index]*t87960*t87961* \
                   t87966*t87985*(t87959*t87959)*(4.0/3.0)-ccab1*gamma_aa[index]*gcab*t87960*t87961*t87965*t87959*1.0/ \
                   (t87987*t87987*t87987)*(4.0/3.0)-ccab3*gcab*1.0/(t87970*t87970*t87970)*t87981*t87991*t87965*t87966* \
                   t87959*2.0+ccab3*gamma_aa[index]*gcab*t87960*t87971*t87991*t87966*t87959*4.0-ccab3*gamma_aa[index]* \
                   gcab*t87960*t87961*t87965*t87959*t87995*4.0);
            } else if (rho_a[index] > cutoff_) {
                v_rho_a_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_a_gamma_bb_[index] = 0.0;
            } else {
                v_rho_a_gamma_bb_[index] = 0.0;
            }

            //V_rho_b_gamma_aa
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t88068 = 1.0/pow(rho_a[index],1.0/3.0);
                double t88069 = c*t88068;
                double t88070 = sqrt(t88069);
                double t88071 = pow(t88069,3.0/2.0);
                double t88072 = c*c;
                double t88073 = 1.0/pow(rho_a[index],2.0/3.0);
                double t88074 = 1.0/c0p;
                double t88075 = b1p*t88070;
                double t88076 = b3p*t88071;
                double t88077 = b4p*t88072*t88073;
                double t88078 = b2p*c*t88068;
                double t88079 = t88075+t88076+t88077+t88078;
                double t88080 = 1.0/t88079;
                double t88081 = t88080*t88074*(1.0/2.0);
                double t88082 = t88081+1.0;
                double t88083 = log(t88082);
                double t88084 = a1p*c*t88068;
                double t88085 = t88084+1.0;
                double t88086 = pow(2.0,1.0/3.0);
                double t88087 = t88086*2.0;
                double t88088 = t88087-2.0;
                double t88089 = two_13*2.0;
                double t88090 = t88089-2.0;
                double t88091 = 1.0/t88090;
                double t88092 = 1.0/c0f;
                double t88093 = 1.0/pow(rho_b[index],1.0/3.0);
                double t88094 = c*t88093;
                double t88095 = sqrt(t88094);
                double t88096 = pow(t88094,3.0/2.0);
                double t88097 = 1.0/pow(rho_b[index],2.0/3.0);
                double t88098 = b1p*t88095;
                double t88099 = b3p*t88096;
                double t88100 = b4p*t88072*t88097;
                double t88101 = b2p*c*t88093;
                double t88102 = t88100+t88101+t88098+t88099;
                double t88103 = 1.0/t88102;
                double t88104 = t88103*t88074*(1.0/2.0);
                double t88105 = t88104+1.0;
                double t88106 = log(t88105);
                double t88107 = a1p*c*t88093;
                double t88108 = t88107+1.0;
                double t88109 = c0p*t88106*t88108*2.0;
                double t88110 = rho_a[index]+rho_b[index];
                double t88111 = 1.0/pow(t88110,1.0/3.0);
                double t88112 = c*t88111;
                double t88113 = sqrt(t88112);
                double t88114 = pow(t88112,3.0/2.0);
                double t88115 = 1.0/pow(t88110,2.0/3.0);
                double t88116 = b1p*t88113;
                double t88117 = b3p*t88114;
                double t88118 = b4p*t88115*t88072;
                double t88119 = b2p*c*t88111;
                double t88120 = t88116+t88117+t88118+t88119;
                double t88121 = 1.0/t88120;
                double t88122 = t88121*t88074*(1.0/2.0);
                double t88123 = t88122+1.0;
                double t88124 = log(t88123);
                double t88125 = a1p*c*t88111;
                double t88126 = t88125+1.0;
                double t88127 = c0p*t88124*t88126*2.0;
                double t88128 = rho_a[index]-rho_b[index];
                double t88129 = t88128*t88128;
                double t88130 = 1.0/t88110;
                double t88131 = t88130*t88128;
                double t88132 = 1.0/(t88110*t88110*t88110*t88110);
                double t88133 = t88129*t88129;
                double t88134 = t88131+1.0;
                double t88135 = pow(t88134,4.0/3.0);
                double t88136 = -t88131+1.0;
                double t88137 = pow(t88136,4.0/3.0);
                double t88138 = t88135+t88137-2.0;
                double t88139 = gcab*gcab;
                double t88140 = 1.0/pow(rho_a[index],8.0/3.0);
                double t88141 = 1.0/pow(rho_b[index],1.1E1/3.0);
                double t88142 = gamma_aa[index]*t88140*(1.0/2.0);
                double t88143 = 1.0/pow(rho_b[index],8.0/3.0);
                double t88144 = gamma_bb[index]*t88143*(1.0/2.0);
                double t88145 = t88142+t88144;
                double t88146 = t88145*t88145;
                double t88147 = t88146*t88139*3.0;
                double t88148 = gcab*t88145*t88146*t88139;
                double t88149 = gcab*t88145*3.0;
                double t88150 = t88147+t88148+t88149+1.0;
                double t88151 = 1.0/(t88150*t88150);
                double t88152 = gamma_bb[index]*gcab*t88141*(8.0/3.0);
                double t88153 = gamma_bb[index]*t88141*t88145*t88139*(8.0/3.0);
                double t88154 = t88152+t88153;
                double t88155 = t88146*t88139;
                double t88156 = gcab*t88145*2.0;
                double t88157 = t88155+t88156+1.0;
                double t88158 = gamma_bb[index]*gcab*t88141*4.0;
                double t88159 = gamma_bb[index]*gcab*t88141*t88146*t88139*4.0;
                double t88160 = gamma_bb[index]*t88141*t88145*t88139*8.0;
                double t88161 = t88160+t88158+t88159;
                double t88162 = gcab*t88140;
                double t88163 = t88140*t88145*t88139;
                double t88164 = t88162+t88163;
                double t88165 = 1.0/(t88157*t88157);
                double t88166 = gcab*t88145;
                double t88167 = t88166+1.0;
                double t88168 = gcab*t88140*(3.0/2.0);
                double t88169 = t88140*t88145*t88139*3.0;
                double t88170 = gcab*t88140*t88146*t88139*(3.0/2.0);
                double t88171 = t88170+t88168+t88169;
                double t88172 = c0p*t88083*t88085*2.0;
                double t88173 = 1.0/(t88167*t88167);
                double t88174 = 1.0/t88157;
                double t88175 = 1.0/t88150;
                double t88176 = 1.0/pow(t88110,4.0/3.0);
                double t88177 = b1f*t88113;
                double t88178 = b3f*t88114;
                double t88179 = b4f*t88115*t88072;
                double t88180 = b2f*c*t88111;
                double t88181 = t88180+t88177+t88178+t88179;
                double t88182 = 1.0/t88181;
                double t88183 = t88092*t88182*(1.0/2.0);
                double t88184 = t88183+1.0;
                double t88185 = log(t88184);
                double t88186 = a1f*c*t88111;
                double t88187 = t88186+1.0;
                double t88189 = c0f*t88185*t88187*2.0;
                double t88188 = t88127-t88189;
                double t88190 = 1.0/(t88110*t88110);
                double t88191 = t88190*t88128;
                double t88192 = t88130+t88191;
                double t88193 = 1.0/pow(t88110,5.0/3.0);
                double t88194 = 1.0/sqrt(t88112);
                double t88195 = 1.0/t88123;
                double t88196 = 1.0/(t88120*t88120);
                double t88197 = b4p*t88072*t88193*(2.0/3.0);
                double t88198 = b2p*c*t88176*(1.0/3.0);
                double t88199 = b1p*c*t88176*t88194*(1.0/6.0);
                double t88200 = b3p*c*t88113*t88176*(1.0/2.0);
                double t88201 = t88200+t88197+t88198+t88199;
                double t88202 = 1.0/d2fz0;
                double t88203 = 1.0/Aa;
                double t88204 = b1a*t88113;
                double t88205 = b3a*t88114;
                double t88206 = b4a*t88115*t88072;
                double t88207 = b2a*c*t88111;
                double t88208 = t88204+t88205+t88206+t88207;
                double t88209 = 1.0/t88208;
                double t88210 = t88203*t88209*(1.0/2.0);
                double t88211 = t88210+1.0;
                double t88212 = log(t88211);
                double t88213 = a1a*c*t88111;
                double t88214 = t88213+1.0;
                double t88215 = 1.0/(t88110*t88110*t88110*t88110*t88110);
                double t88216 = pow(t88134,1.0/3.0);
                double t88217 = t88216*t88192*(4.0/3.0);
                double t88218 = pow(t88136,1.0/3.0);
                double t88219 = t88217-t88218*t88192*(4.0/3.0);
                double t88220 = t88132*t88133;
                double t88221 = t88220-1.0;
                double t88222 = t88201*t88126*t88195*t88196;
                double t88223 = a1f*c*t88093;
                double t88224 = t88223+1.0;
                double t88225 = b1f*t88095;
                double t88226 = b3f*t88096;
                double t88227 = b4f*t88072*t88097;
                double t88228 = b2f*c*t88093;
                double t88229 = t88225+t88226+t88227+t88228;
                double t88230 = 1.0/t88229;
                double t88231 = t88230*t88092*(1.0/2.0);
                double t88232 = t88231+1.0;
                double t88233 = 1.0/pow(rho_b[index],4.0/3.0);
                double t88234 = 1.0/pow(rho_b[index],5.0/3.0);
                double t88235 = 1.0/sqrt(t88094);
                double t88236 = log(t88232);
                double t88237 = 1.0/t88105;
                double t88238 = 1.0/(t88102*t88102);
                double t88239 = b4p*t88072*t88234*(2.0/3.0);
                double t88240 = b2p*c*t88233*(1.0/3.0);
                double t88241 = b1p*c*t88233*t88235*(1.0/6.0);
                double t88242 = b3p*c*t88233*t88095*(1.0/2.0);
                double t88243 = t88240+t88241+t88242+t88239;
                double t88244 = t88108*t88243*t88237*t88238;
                double t88245 = t88109-c0f*t88224*t88236*2.0;
                double t88246 = Aa*t88202*t88212*t88221*t88214*t88091*t88138*2.0;
                v_rho_b_gamma_aa_[index] = (rho_b[index]*(t88109-t88091*t88245*t88088)+rho_a[index]*(t88172-t88091* \
                   t88088*(t88172-c0f*log((t88092*(1.0/2.0))/(b1f*t88070+b3f*t88071+b2f*c*t88068+b4f*t88072*t88073)+1.0) \
                   *(a1f*c*t88068+1.0)*2.0))-t88110*(t88127+t88246-t88132*t88133*t88091*t88138*t88188))*(ccab2*t88140* \
                   t88145*t88154*t88165*t88139-ccab2*t88154*t88146*t88164*t88139*1.0/(t88157*t88157*t88157)*2.0+ccab1* \
                   gamma_bb[index]*t88140*t88141*t88173*t88139*(4.0/3.0)-ccab2*gamma_bb[index]*t88140*t88141*t88174*t88139* \
                   (4.0/3.0)+ccab2*gamma_bb[index]*t88141*t88145*t88164*t88165*t88139*(8.0/3.0)+ccab3*gcab*t88140*t88151* \
                   t88161*t88146*t88139*(3.0/2.0)+ccab3*gcab*t88151*t88145*t88146*t88139*(gamma_bb[index]*t88140*t88141* \
                   t88139*4.0+gamma_bb[index]*gcab*t88140*t88141*t88145*t88139*4.0)+ccab2*gamma_bb[index]*t88140*t88141* \
                   t88146*t88165*(t88139*t88139)*(4.0/3.0)-ccab1*gamma_bb[index]*gcab*t88140*t88141*t88145*t88139*1.0/ \
                   (t88167*t88167*t88167)*(4.0/3.0)-ccab3*gcab*1.0/(t88150*t88150*t88150)*t88161*t88171*t88145*t88146* \
                   t88139*2.0+ccab3*gamma_bb[index]*gcab*t88141*t88151*t88171*t88146*t88139*4.0-ccab3*gamma_bb[index]* \
                   gcab*t88140*t88141*t88145*t88139*t88175*4.0)-((ccab1*gcab*t88140*(1.0/2.0))/t88167-ccab1*t88140*t88145* \
                   t88173*t88139*(1.0/2.0)+ccab2*t88140*t88145*t88174*t88139-ccab2*t88146*t88164*t88165*t88139+ccab3* \
                   gcab*t88140*t88146*t88139*t88175*(3.0/2.0)-ccab3*gcab*t88151*t88171*t88145*t88146*t88139)*(-t88109+ \
                   t88127+t88246+t88110*(t88222-t88132*t88133*t88091*t88138*(t88222-(1.0/(t88181*t88181)*t88187*(b2f* \
                   c*t88176*(1.0/3.0)+b4f*t88072*t88193*(2.0/3.0)+b1f*c*t88176*t88194*(1.0/6.0)+b3f*c*t88113*t88176*(1.0/ \
                   2.0)))/t88184+a1f*c*c0f*t88176*t88185*(2.0/3.0)-a1p*c*c0p*t88124*t88176*(2.0/3.0))-a1p*c*c0p*t88124* \
                   t88176*(2.0/3.0)+t88132*t88133*t88091*t88219*t88188+t88133*t88215*t88091*t88138*t88188*4.0+t88132* \
                   t88091*t88128*t88129*t88138*t88188*4.0-Aa*t88202*t88212*t88214*t88091*t88138*(t88133*t88215*4.0+t88132* \
                   t88128*t88129*4.0)*2.0-Aa*t88202*t88212*t88221*t88214*t88091*t88219*2.0+(t88202*t88221*t88214*t88091* \
                   1.0/(t88208*t88208)*t88138*(b2a*c*t88176*(1.0/3.0)+b4a*t88072*t88193*(2.0/3.0)+b1a*c*t88176*t88194* \
                   (1.0/6.0)+b3a*c*t88113*t88176*(1.0/2.0)))/t88211-Aa*a1a*c*t88202*t88212*t88221*t88091*t88138*t88176* \
                   (2.0/3.0))+rho_b[index]*(-t88244+t88091*t88088*(t88244-(t88224*1.0/(t88229*t88229)*(b2f*c*t88233*(1.0/ \
                   3.0)+b4f*t88072*t88234*(2.0/3.0)+b1f*c*t88233*t88235*(1.0/6.0)+b3f*c*t88233*t88095*(1.0/2.0)))/t88232+ \
                   a1f*c*c0f*t88233*t88236*(2.0/3.0)-a1p*c*c0p*t88106*t88233*(2.0/3.0))+a1p*c*c0p*t88106*t88233*(2.0/ \
                   3.0))+t88091*t88245*t88088-t88132*t88133*t88091*t88138*t88188);
            } else if (rho_a[index] > cutoff_) {
                v_rho_b_gamma_aa_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_b_gamma_aa_[index] = 0.0;
            } else {
                v_rho_b_gamma_aa_[index] = 0.0;
            }

            //V_rho_b_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_b_gamma_ab_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_b_gamma_ab_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_b_gamma_ab_[index] = 0.0;
            } else {
                v_rho_b_gamma_ab_[index] = 0.0;
            }

            //V_rho_b_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t88249 = 1.0/pow(rho_a[index],1.0/3.0);
                double t88250 = c*t88249;
                double t88251 = sqrt(t88250);
                double t88252 = pow(t88250,3.0/2.0);
                double t88253 = c*c;
                double t88254 = 1.0/pow(rho_a[index],2.0/3.0);
                double t88255 = 1.0/c0p;
                double t88256 = b1p*t88251;
                double t88257 = b3p*t88252;
                double t88258 = b4p*t88253*t88254;
                double t88259 = b2p*c*t88249;
                double t88260 = t88256+t88257+t88258+t88259;
                double t88261 = 1.0/t88260;
                double t88262 = t88261*t88255*(1.0/2.0);
                double t88263 = t88262+1.0;
                double t88264 = log(t88263);
                double t88265 = a1p*c*t88249;
                double t88266 = t88265+1.0;
                double t88267 = pow(2.0,1.0/3.0);
                double t88268 = t88267*2.0;
                double t88269 = t88268-2.0;
                double t88270 = two_13*2.0;
                double t88271 = t88270-2.0;
                double t88272 = 1.0/t88271;
                double t88273 = 1.0/c0f;
                double t88274 = 1.0/pow(rho_b[index],1.0/3.0);
                double t88275 = c*t88274;
                double t88276 = sqrt(t88275);
                double t88277 = pow(t88275,3.0/2.0);
                double t88278 = 1.0/pow(rho_b[index],2.0/3.0);
                double t88279 = b1p*t88276;
                double t88280 = b3p*t88277;
                double t88281 = b4p*t88253*t88278;
                double t88282 = b2p*c*t88274;
                double t88283 = t88280+t88281+t88282+t88279;
                double t88284 = 1.0/t88283;
                double t88285 = t88255*t88284*(1.0/2.0);
                double t88286 = t88285+1.0;
                double t88287 = log(t88286);
                double t88288 = a1p*c*t88274;
                double t88289 = t88288+1.0;
                double t88290 = c0p*t88287*t88289*2.0;
                double t88291 = rho_a[index]+rho_b[index];
                double t88292 = 1.0/pow(t88291,1.0/3.0);
                double t88293 = c*t88292;
                double t88294 = sqrt(t88293);
                double t88295 = pow(t88293,3.0/2.0);
                double t88296 = 1.0/pow(t88291,2.0/3.0);
                double t88297 = b1p*t88294;
                double t88298 = b3p*t88295;
                double t88299 = b4p*t88253*t88296;
                double t88300 = b2p*c*t88292;
                double t88301 = t88300+t88297+t88298+t88299;
                double t88302 = 1.0/t88301;
                double t88303 = t88302*t88255*(1.0/2.0);
                double t88304 = t88303+1.0;
                double t88305 = log(t88304);
                double t88306 = a1p*c*t88292;
                double t88307 = t88306+1.0;
                double t88308 = c0p*t88305*t88307*2.0;
                double t88309 = rho_a[index]-rho_b[index];
                double t88310 = t88309*t88309;
                double t88311 = 1.0/t88291;
                double t88312 = t88311*t88309;
                double t88313 = 1.0/(t88291*t88291*t88291*t88291);
                double t88314 = t88310*t88310;
                double t88315 = t88312+1.0;
                double t88316 = pow(t88315,4.0/3.0);
                double t88317 = -t88312+1.0;
                double t88318 = pow(t88317,4.0/3.0);
                double t88319 = t88316+t88318-2.0;
                double t88320 = 1.0/pow(rho_b[index],1.1E1/3.0);
                double t88321 = 1.0/pow(rho_a[index],8.0/3.0);
                double t88322 = gamma_aa[index]*t88321*(1.0/2.0);
                double t88323 = 1.0/pow(rho_b[index],8.0/3.0);
                double t88324 = gamma_bb[index]*t88323*(1.0/2.0);
                double t88325 = t88322+t88324;
                double t88326 = gcab*t88325;
                double t88327 = t88326+1.0;
                double t88328 = gcab*gcab;
                double t88329 = t88325*t88325;
                double t88330 = 1.0/pow(rho_b[index],1.9E1/3.0);
                double t88331 = t88328*t88329;
                double t88332 = gcab*t88325*2.0;
                double t88333 = t88331+t88332+1.0;
                double t88334 = t88328*t88329*3.0;
                double t88335 = gcab*t88325*t88328*t88329;
                double t88336 = gcab*t88325*3.0;
                double t88337 = t88334+t88335+t88336+1.0;
                double t88338 = 1.0/(t88327*t88327);
                double t88339 = 1.0/t88333;
                double t88340 = 1.0/(t88337*t88337);
                double t88341 = 1.0/(t88333*t88333);
                double t88342 = gamma_bb[index]*gcab*t88320*(8.0/3.0);
                double t88343 = gamma_bb[index]*t88320*t88325*t88328*(8.0/3.0);
                double t88344 = t88342+t88343;
                double t88345 = 1.0/t88337;
                double t88346 = gamma_bb[index]*gcab*t88320*4.0;
                double t88347 = gamma_bb[index]*gcab*t88320*t88328*t88329*4.0;
                double t88348 = gamma_bb[index]*t88320*t88325*t88328*8.0;
                double t88349 = t88346+t88347+t88348;
                double t88350 = gcab*t88323;
                double t88351 = t88323*t88325*t88328;
                double t88352 = t88350+t88351;
                double t88353 = gcab*t88323*(3.0/2.0);
                double t88354 = t88323*t88325*t88328*3.0;
                double t88355 = gcab*t88323*t88328*t88329*(3.0/2.0);
                double t88356 = t88353+t88354+t88355;
                double t88357 = gx*gx;
                double t88358 = 1.0/pow(rho_b[index],1.6E1/3.0);
                double t88359 = gamma_bb[index]*gamma_bb[index];
                double t88360 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]);
                double t88361 = gamma_bb[index]*gx*t88323;
                double t88362 = t88361+1.0;
                double t88363 = gamma_bb[index]*gx*t88323*3.0;
                double t88364 = gamma_bb[index]*gx*t88360*t88357*t88359;
                double t88365 = t88357*t88358*t88359*3.0;
                double t88366 = t88363+t88364+t88365+1.0;
                double t88367 = gamma_bb[index]*gx*t88323*2.0;
                double t88368 = t88357*t88358*t88359;
                double t88369 = t88367+t88368+1.0;
                double t88370 = pow(rho_b[index],5.0/3.0);
                double t88371 = pow(rho_b[index],2.0/3.0);
                double t88372 = 1.0/tau_b[index];
                double t88373 = tau_b[index]*1.0E20;
                double t88376 = C_k*t88370;
                double t88374 = t88373-t88376;
                double t88375 = tau_a[index]*1.0E20;
                double t88377 = ( (t88374 > 0.0) ?  1.0 : 0.0 ) ;
                double t88378 = C_k*C_k;
                double t88379 = pow(rho_b[index],7.0/3.0);
                double t88380 = 0.0 ;
                double t88381 = C_k*t88371*t88372*t88377*(5.0/3.0);
                double t88382 = -t88375+t88376;
                double t88383 = ( (t88382 > 0.0) ?  1.0 : 0.0 ) ;
                double t88384 = t88383*1.0E20;
                double t88385 = C_k*t88370*t88372*t88377;
                double t88386 = t88384+t88385+1.0;
                double t88387 = t88375-t88376;
                double t88388 = 0.0 ;
                double t88389 = C_k*t88371*t88388*(5.0E20/3.0);
                double t88392 = t88380*t88372*t88378*t88379*(5.0/3.0);
                double t88390 = t88381-t88392+t88389;
                double t88391 = t88384+t88385-1.0;
                double t88393 = t88391*t88391;
                double t88394 = t88393*t88393;
                double t88395 = 1.0/t88386;
                double t88396 = 1.0/(t88386*t88386*t88386);
                double t88397 = 1.0/(t88386*t88386*t88386*t88386*t88386);
                double t88398 = 1.0/t88362;
                double t88399 = 1.0/t88369;
                double t88400 = 1.0/t88366;
                double t88401 = 1.0/(t88362*t88362);
                double t88402 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]*rho_b[index]);
                double t88403 = 1.0/(t88366*t88366);
                double t88404 = 1.0/(t88369*t88369);
                double t88405 = gx*t88323*3.0;
                double t88406 = gamma_bb[index]*t88357*t88358*6.0;
                double t88407 = gx*t88360*t88357*t88359*3.0;
                double t88408 = t88405+t88406+t88407;
                double t88409 = gx*t88323*2.0;
                double t88410 = gamma_bb[index]*t88357*t88358*2.0;
                double t88411 = t88410+t88409;
                double t88412 = gamma_bb[index]*gx*t88320*(1.6E1/3.0);
                double t88413 = t88330*t88357*t88359*(1.6E1/3.0);
                double t88414 = t88412+t88413;
                double t88415 = gamma_bb[index]*gx*t88320*8.0;
                double t88416 = gamma_bb[index]*gx*t88402*t88357*t88359*8.0;
                double t88417 = t88330*t88357*t88359*1.6E1;
                double t88418 = t88415+t88416+t88417;
                double t88419 = 1.0/(t88362*t88362*t88362);
                double t88420 = gx*t88320*8.0;
                double t88421 = gamma_bb[index]*t88330*t88357*3.2E1;
                double t88422 = gx*t88402*t88357*t88359*2.4E1;
                double t88423 = t88420+t88421+t88422;
                double t88424 = gx*t88320*(1.6E1/3.0);
                double t88425 = gamma_bb[index]*t88330*t88357*(3.2E1/3.0);
                double t88426 = t88424+t88425;
                double t88427 = 1.0/(t88369*t88369*t88369);
                double t88428 = 1.0/(t88366*t88366*t88366);
                double t88429 = t88391*t88395;
                double t88430 = t88391*t88394*t88397;
                double t88431 = t88430+t88429-t88391*t88393*t88396*2.0;
                double t88432 = cxnl1*gx*t88323*t88398;
                double t88433 = cxnl2*gamma_bb[index]*t88357*t88358*t88399*2.0;
                double t88434 = cxnl3*gx*t88400*t88360*t88357*t88359*3.0;
                double t88435 = t88432+t88433+t88434-cxnl1*gamma_bb[index]*t88401*t88357*t88358-cxnl2*t88411*t88404* \
                   t88357*t88358*t88359-cxnl3*gamma_bb[index]*gx*t88403*t88360*t88408*t88357*t88359;
                double t88436 = b1f*t88276;
                double t88437 = b3f*t88277;
                double t88438 = b4f*t88253*t88278;
                double t88439 = b2f*c*t88274;
                double t88440 = t88436+t88437+t88438+t88439;
                double t88441 = 1.0/t88440;
                double t88442 = t88441*t88273*(1.0/2.0);
                double t88443 = t88442+1.0;
                double t88444 = log(t88443);
                double t88445 = a1f*c*t88274;
                double t88446 = t88445+1.0;
                double t88518 = c0f*t88444*t88446*2.0;
                double t88447 = t88290-t88518;
                double t88519 = t88272*t88447*t88269;
                double t88448 = t88290-t88519;
                double t88449 = gcaa*gcaa;
                double t88450 = gamma_bb[index]*gcaa*t88323;
                double t88451 = t88450+1.0;
                double t88452 = gamma_bb[index]*gcaa*t88323*3.0;
                double t88453 = gamma_bb[index]*gcaa*t88360*t88359*t88449;
                double t88454 = t88358*t88359*t88449*3.0;
                double t88455 = t88452+t88453+t88454+1.0;
                double t88456 = gamma_bb[index]*gcaa*t88323*2.0;
                double t88457 = t88358*t88359*t88449;
                double t88458 = t88456+t88457+1.0;
                double t88459 = 1.0/t88327;
                double t88460 = 1.0/pow(t88291,4.0/3.0);
                double t88461 = b1f*t88294;
                double t88462 = b3f*t88295;
                double t88463 = b4f*t88253*t88296;
                double t88464 = b2f*c*t88292;
                double t88465 = t88461+t88462+t88463+t88464;
                double t88466 = 1.0/t88465;
                double t88467 = t88273*t88466*(1.0/2.0);
                double t88468 = t88467+1.0;
                double t88469 = log(t88468);
                double t88470 = a1f*c*t88292;
                double t88471 = t88470+1.0;
                double t88473 = c0f*t88471*t88469*2.0;
                double t88472 = t88308-t88473;
                double t88474 = 1.0/(t88291*t88291);
                double t88475 = t88309*t88474;
                double t88476 = t88311+t88475;
                double t88477 = 1.0/pow(t88291,5.0/3.0);
                double t88478 = 1.0/sqrt(t88293);
                double t88479 = 1.0/t88304;
                double t88480 = 1.0/(t88301*t88301);
                double t88481 = b4p*t88253*t88477*(2.0/3.0);
                double t88482 = b2p*c*t88460*(1.0/3.0);
                double t88483 = b1p*c*t88460*t88478*(1.0/6.0);
                double t88484 = b3p*c*t88460*t88294*(1.0/2.0);
                double t88485 = t88481+t88482+t88483+t88484;
                double t88486 = 1.0/d2fz0;
                double t88487 = 1.0/Aa;
                double t88488 = b1a*t88294;
                double t88489 = b3a*t88295;
                double t88490 = b4a*t88253*t88296;
                double t88491 = b2a*c*t88292;
                double t88492 = t88490+t88491+t88488+t88489;
                double t88493 = 1.0/t88492;
                double t88494 = t88493*t88487*(1.0/2.0);
                double t88495 = t88494+1.0;
                double t88496 = log(t88495);
                double t88497 = a1a*c*t88292;
                double t88498 = t88497+1.0;
                double t88499 = 1.0/(t88291*t88291*t88291*t88291*t88291);
                double t88500 = pow(t88315,1.0/3.0);
                double t88501 = t88500*t88476*(4.0/3.0);
                double t88502 = pow(t88317,1.0/3.0);
                double t88503 = t88501-t88502*t88476*(4.0/3.0);
                double t88504 = t88313*t88314;
                double t88505 = t88504-1.0;
                double t88506 = t88307*t88480*t88485*t88479;
                double t88507 = 1.0/pow(rho_b[index],4.0/3.0);
                double t88508 = 1.0/pow(rho_b[index],5.0/3.0);
                double t88509 = 1.0/sqrt(t88275);
                double t88510 = 1.0/t88286;
                double t88511 = 1.0/(t88283*t88283);
                double t88512 = b4p*t88253*t88508*(2.0/3.0);
                double t88513 = b2p*c*t88507*(1.0/3.0);
                double t88514 = b1p*c*t88507*t88509*(1.0/6.0);
                double t88515 = b3p*c*t88507*t88276*(1.0/2.0);
                double t88516 = t88512+t88513+t88514+t88515;
                double t88517 = t88510*t88511*t88516*t88289;
                double t88520 = Aa*t88505*t88272*t88319*t88486*t88496*t88498*2.0;
                double t88521 = 1.0/t88451;
                double t88522 = 1.0/t88458;
                double t88523 = 1.0/t88455;
                double t88524 = 1.0/(t88451*t88451);
                double t88525 = 1.0/(t88455*t88455);
                double t88526 = 1.0/(t88458*t88458);
                double t88527 = gcaa*t88323*3.0;
                double t88528 = gamma_bb[index]*t88358*t88449*6.0;
                double t88529 = gcaa*t88360*t88359*t88449*3.0;
                double t88530 = t88527+t88528+t88529;
                double t88531 = gcaa*t88323*2.0;
                double t88532 = gamma_bb[index]*t88358*t88449*2.0;
                double t88533 = t88531+t88532;
                double t88534 = gamma_bb[index]*gcaa*t88320*(1.6E1/3.0);
                double t88535 = t88330*t88359*t88449*(1.6E1/3.0);
                double t88536 = t88534+t88535;
                double t88537 = gamma_bb[index]*gcaa*t88320*8.0;
                double t88538 = gamma_bb[index]*gcaa*t88402*t88359*t88449*8.0;
                double t88539 = t88330*t88359*t88449*1.6E1;
                double t88540 = t88537+t88538+t88539;
                double t88541 = 1.0/t88443;
                double t88542 = 1.0/(t88440*t88440);
                double t88543 = b4f*t88253*t88508*(2.0/3.0);
                double t88544 = b2f*c*t88507*(1.0/3.0);
                double t88545 = b1f*c*t88507*t88509*(1.0/6.0);
                double t88546 = b3f*c*t88507*t88276*(1.0/2.0);
                double t88547 = t88543+t88544+t88545+t88546;
                double t88548 = a1f*c*c0f*t88444*t88507*(2.0/3.0);
                double t88549 = a1p*c*c0p*t88507*t88287*(2.0/3.0);
                double t88550 = ccaa1*gcaa*t88323*t88521;
                double t88551 = ccaa2*gamma_bb[index]*t88522*t88358*t88449*2.0;
                double t88552 = ccaa3*gcaa*t88360*t88523*t88359*t88449*3.0;
                double t88553 = t88550+t88551+t88552-ccaa1*gamma_bb[index]*t88524*t88358*t88449-ccaa2*t88533*t88526* \
                   t88358*t88359*t88449-ccaa3*gamma_bb[index]*gcaa*t88530*t88360*t88525*t88359*t88449;
                v_rho_b_gamma_bb_[index] = -(X-1.0)*(c0*pow(rho_b[index],1.0/3.0)*(t88431*t88435+cx1*gx*t88323*t88398- \
                   cx1*gamma_bb[index]*t88401*t88357*t88358+cx2*gamma_bb[index]*t88357*t88358*t88399*2.0-cx2*t88411*t88404* \
                   t88357*t88358*t88359+cx3*gx*t88400*t88360*t88357*t88359*3.0-cx3*gamma_bb[index]*gx*t88403*t88360*t88408* \
                   t88357*t88359)*(4.0/3.0)+c0*pow(rho_b[index],4.0/3.0)*(t88435*(t88390*t88395-t88390*t88391*1.0/(t88386* \
                   t88386)-t88390*t88393*t88396*6.0+t88390*t88394*t88397*5.0+t88390*t88391*t88393*1.0/(t88386*t88386* \
                   t88386*t88386)*6.0-t88390*t88391*t88394*1.0/(t88386*t88386*t88386*t88386*t88386*t88386)*5.0)+t88431* \
                   (cxnl1*gx*t88320*t88398*(-8.0/3.0)+cxnl1*gamma_bb[index]*t88401*t88330*t88357*8.0-cxnl2*gamma_bb[index]* \
                   t88330*t88357*t88399*(3.2E1/3.0)+cxnl2*t88330*t88411*t88404*t88357*t88359*(1.6E1/3.0)+cxnl2*t88404* \
                   t88426*t88357*t88358*t88359+cxnl2*gamma_bb[index]*t88404*t88414*t88357*t88358*2.0-cxnl3*gx*t88400* \
                   t88402*t88357*t88359*2.4E1-cxnl1*gx*t88402*t88419*t88357*t88359*(1.6E1/3.0)+cxnl3*gx*t88403*t88360* \
                   t88418*t88357*t88359*3.0-cxnl2*t88411*t88414*t88427*t88357*t88358*t88359*2.0+cxnl3*gamma_bb[index]* \
                   gx*t88402*t88403*t88408*t88357*t88359*8.0+cxnl3*gamma_bb[index]*gx*t88403*t88360*t88423*t88357*t88359- \
                   cxnl3*gamma_bb[index]*gx*t88360*t88408*t88418*t88428*t88357*t88359*2.0)-cx1*gx*t88320*t88398*(8.0/ \
                   3.0)+cx1*gamma_bb[index]*t88401*t88330*t88357*8.0-cx2*gamma_bb[index]*t88330*t88357*t88399*(3.2E1/ \
                   3.0)+cx2*t88330*t88411*t88404*t88357*t88359*(1.6E1/3.0)+cx2*t88404*t88426*t88357*t88358*t88359+cx2* \
                   gamma_bb[index]*t88404*t88414*t88357*t88358*2.0-cx1*gx*t88402*t88419*t88357*t88359*(1.6E1/3.0)-cx3* \
                   gx*t88400*t88402*t88357*t88359*2.4E1+cx3*gx*t88403*t88360*t88418*t88357*t88359*3.0-cx2*t88411*t88414* \
                   t88427*t88357*t88358*t88359*2.0+cx3*gamma_bb[index]*gx*t88402*t88403*t88408*t88357*t88359*8.0+cx3* \
                   gamma_bb[index]*gx*t88403*t88360*t88423*t88357*t88359-cx3*gamma_bb[index]*gx*t88360*t88408*t88418* \
                   t88428*t88357*t88359*2.0))-(ccab1*gcab*t88323*t88459*(1.0/2.0)-ccab1*t88323*t88325*t88328*t88338*(1.0/ \
                   2.0)-ccab2*t88341*t88352*t88328*t88329+ccab2*t88323*t88325*t88328*t88339+ccab3*gcab*t88323*t88345* \
                   t88328*t88329*(3.0/2.0)-ccab3*gcab*t88340*t88325*t88328*t88329*t88356)*(t88520-t88290+t88308+t88519+ \
                   t88291*(t88506-t88313*t88314*t88272*t88319*(t88506-(t88471*1.0/(t88465*t88465)*(b2f*c*t88460*(1.0/ \
                   3.0)+b4f*t88253*t88477*(2.0/3.0)+b1f*c*t88460*t88478*(1.0/6.0)+b3f*c*t88460*t88294*(1.0/2.0)))/t88468+ \
                   a1f*c*c0f*t88460*t88469*(2.0/3.0)-a1p*c*c0p*t88305*t88460*(2.0/3.0))-a1p*c*c0p*t88305*t88460*(2.0/ \
                   3.0)+t88313*t88314*t88503*t88272*t88472+t88314*t88272*t88319*t88472*t88499*4.0+t88310*t88313*t88272* \
                   t88309*t88319*t88472*4.0-Aa*t88272*t88319*t88486*t88496*t88498*(t88314*t88499*4.0+t88310*t88313*t88309* \
                   4.0)*2.0-Aa*t88503*t88505*t88272*t88486*t88496*t88498*2.0+(t88505*t88272*t88319*1.0/(t88492*t88492) \
                   *t88486*t88498*(b2a*c*t88460*(1.0/3.0)+b4a*t88253*t88477*(2.0/3.0)+b1a*c*t88460*t88478*(1.0/6.0)+b3a* \
                   c*t88460*t88294*(1.0/2.0)))/t88495-Aa*a1a*c*t88460*t88505*t88272*t88319*t88486*t88496*(2.0/3.0))+rho_b[index]* \
                   (-t88517+t88549+t88272*t88269*(t88517+t88548-t88541*t88542*t88446*t88547-a1p*c*c0p*t88507*t88287*(2.0/ \
                   3.0)))-t88313*t88314*t88272*t88319*t88472)-t88553*t88448+(-rho_b[index]*t88448+t88291*(t88520+t88308- \
                   t88313*t88314*t88272*t88319*t88472)+rho_a[index]*(t88272*t88269*(c0p*t88264*t88266*2.0-c0f*log((t88273* \
                   (1.0/2.0))/(b1f*t88251+b3f*t88252+b2f*c*t88249+b4f*t88253*t88254)+1.0)*(a1f*c*t88249+1.0)*2.0)-c0p* \
                   t88264*t88266*2.0))*(ccab1*gcab*t88320*t88459*(4.0/3.0)-ccab2*t88341*t88328*t88329*(gcab*t88320*(8.0/ \
                   3.0)+gamma_bb[index]*t88330*t88328*(4.0/3.0)+t88320*t88325*t88328*(8.0/3.0))-ccab1*gamma_bb[index]* \
                   t88330*t88328*t88338*(4.0/3.0)+ccab2*gamma_bb[index]*t88330*t88328*t88339*(4.0/3.0)-ccab1*t88320*t88325* \
                   t88328*t88338*(4.0/3.0)+ccab2*t88320*t88325*t88328*t88339*(8.0/3.0)-ccab2*t88323*t88341*t88325*t88344* \
                   t88328+ccab2*1.0/(t88333*t88333*t88333)*t88352*t88344*t88328*t88329*2.0+ccab3*gcab*t88320*t88345*t88328* \
                   t88329*4.0+ccab3*gamma_bb[index]*gcab*t88330*t88325*t88345*t88328*4.0-ccab2*gamma_bb[index]*t88320* \
                   t88341*t88325*t88352*t88328*(8.0/3.0)-ccab3*gcab*t88340*t88323*t88328*t88329*t88349*(3.0/2.0)-ccab3* \
                   gcab*t88340*t88325*t88328*t88329*(gcab*t88320*4.0+gamma_bb[index]*t88330*t88328*4.0+t88320*t88325* \
                   t88328*8.0+gcab*t88320*t88328*t88329*4.0+gamma_bb[index]*gcab*t88330*t88325*t88328*4.0)+ccab1*gamma_bb[index]* \
                   gcab*t88330*t88325*1.0/(t88327*t88327*t88327)*t88328*(4.0/3.0)+ccab3*gcab*t88325*t88328*1.0/(t88337* \
                   t88337*t88337)*t88329*t88356*t88349*2.0-ccab3*gamma_bb[index]*gcab*t88320*t88340*t88328*t88329*t88356* \
                   4.0)+rho_b[index]*t88553*(-t88517+t88549+t88272*t88269*(t88517+t88548-t88549-t88541*t88542*t88446* \
                   t88547))-rho_b[index]*t88448*(ccaa1*gcaa*t88320*t88521*(-8.0/3.0)-ccaa2*gamma_bb[index]*t88330*t88522* \
                   t88449*(3.2E1/3.0)+ccaa1*gamma_bb[index]*t88330*t88524*t88449*8.0+ccaa2*t88330*t88533*t88526*t88359* \
                   t88449*(1.6E1/3.0)-ccaa1*gcaa*t88402*1.0/(t88451*t88451*t88451)*t88359*t88449*(1.6E1/3.0)+ccaa2*t88526* \
                   t88358*t88359*t88449*(gcaa*t88320*(1.6E1/3.0)+gamma_bb[index]*t88330*t88449*(3.2E1/3.0))+ccaa2*gamma_bb[index]* \
                   t88526*t88536*t88358*t88449*2.0-ccaa3*gcaa*t88402*t88523*t88359*t88449*2.4E1+ccaa3*gcaa*t88360*t88540* \
                   t88525*t88359*t88449*3.0-ccaa2*t88533*t88536*t88358*t88359*t88449*1.0/(t88458*t88458*t88458)*2.0+ccaa3* \
                   gamma_bb[index]*gcaa*t88360*t88525*t88359*t88449*(gcaa*t88320*8.0+gamma_bb[index]*t88330*t88449*3.2E1+ \
                   gcaa*t88402*t88359*t88449*2.4E1)+ccaa3*gamma_bb[index]*gcaa*t88402*t88530*t88525*t88359*t88449*8.0- \
                   ccaa3*gamma_bb[index]*gcaa*t88530*t88360*t88540*1.0/(t88455*t88455*t88455)*t88359*t88449*2.0);
            } else if (rho_a[index] > cutoff_) {
                v_rho_b_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                double t89983 = 1.0/pow(rho_b[index],1.0/3.0);
                double t89984 = c*t89983;
                double t89985 = sqrt(t89984);
                double t89986 = pow(t89984,3.0/2.0);
                double t89987 = c*c;
                double t89988 = 1.0/pow(rho_b[index],2.0/3.0);
                double t89989 = 1.0/c0p;
                double t89990 = b1p*t89985;
                double t89991 = b3p*t89986;
                double t89992 = b4p*t89987*t89988;
                double t89993 = b2p*c*t89983;
                double t89994 = t89990+t89991+t89992+t89993;
                double t89995 = 1.0/t89994;
                double t89996 = t89995*t89989*(1.0/2.0);
                double t89997 = t89996+1.0;
                double t89998 = log(t89997);
                double t89999 = a1p*c*t89983;
                double t90000 = t89999+1.0;
                double t90001 = 1.0/pow(rho_b[index],8.0/3.0);
                double t90002 = gcaa*gcaa;
                double t90003 = 1.0/pow(rho_b[index],1.6E1/3.0);
                double t90004 = gamma_bb[index]*gamma_bb[index];
                double t90005 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]);
                double t90006 = gamma_bb[index]*gcaa*t90001;
                double t90007 = t90006+1.0;
                double t90008 = gamma_bb[index]*gcaa*t90001*3.0;
                double t90009 = gamma_bb[index]*gcaa*t90002*t90004*t90005;
                double t90010 = t90002*t90003*t90004*3.0;
                double t90011 = t90010+t90008+t90009+1.0;
                double t90012 = gamma_bb[index]*gcaa*t90001*2.0;
                double t90013 = t90002*t90003*t90004;
                double t90014 = t90012+t90013+1.0;
                double t90015 = pow(2.0,1.0/3.0);
                double t90016 = t90015*2.0;
                double t90017 = t90016-2.0;
                double t90018 = two_13*2.0;
                double t90019 = t90018-2.0;
                double t90020 = 1.0/t90019;
                double t90021 = 1.0/c0f;
                double t90022 = b1f*t89985;
                double t90023 = b3f*t89986;
                double t90024 = b4f*t89987*t89988;
                double t90025 = b2f*c*t89983;
                double t90026 = t90022+t90023+t90024+t90025;
                double t90027 = 1.0/t90026;
                double t90028 = t90021*t90027*(1.0/2.0);
                double t90029 = t90028+1.0;
                double t90030 = log(t90029);
                double t90031 = a1f*c*t89983;
                double t90032 = t90031+1.0;
                double t90033 = c0p*t89998*t90000*2.0;
                double t90034 = t90033-c0f*t90030*t90032*2.0;
                double t90035 = t90033-t90020*t90034*t90017;
                double t90036 = 1.0/t90007;
                double t90037 = 1.0/t90014;
                double t90038 = 1.0/t90011;
                double t90039 = 1.0/pow(rho_b[index],1.9E1/3.0);
                double t90040 = 1.0/(t90007*t90007);
                double t90041 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]*rho_b[index]);
                double t90042 = 1.0/pow(rho_b[index],1.1E1/3.0);
                double t90043 = 1.0/(t90011*t90011);
                double t90044 = 1.0/(t90014*t90014);
                double t90045 = gcaa*t90001*3.0;
                double t90046 = gamma_bb[index]*t90002*t90003*6.0;
                double t90047 = gcaa*t90002*t90004*t90005*3.0;
                double t90048 = t90045+t90046+t90047;
                double t90049 = gcaa*t90001*2.0;
                double t90050 = gamma_bb[index]*t90002*t90003*2.0;
                double t90051 = t90050+t90049;
                double t90052 = gamma_bb[index]*gcaa*t90042*(1.6E1/3.0);
                double t90053 = t90002*t90004*t90039*(1.6E1/3.0);
                double t90054 = t90052+t90053;
                double t90055 = gamma_bb[index]*gcaa*t90042*8.0;
                double t90056 = gamma_bb[index]*gcaa*t90002*t90004*t90041*8.0;
                double t90057 = t90002*t90004*t90039*1.6E1;
                double t90058 = t90055+t90056+t90057;
                double t90059 = 1.0/pow(rho_b[index],4.0/3.0);
                double t90060 = 1.0/pow(rho_b[index],5.0/3.0);
                double t90061 = 1.0/sqrt(t89984);
                double t90062 = 1.0/t89997;
                double t90063 = 1.0/(t89994*t89994);
                double t90064 = b4p*t89987*t90060*(2.0/3.0);
                double t90065 = b2p*c*t90059*(1.0/3.0);
                double t90066 = b1p*c*t90061*t90059*(1.0/6.0);
                double t90067 = b3p*c*t89985*t90059*(1.0/2.0);
                double t90068 = t90064+t90065+t90066+t90067;
                double t90069 = t90000*t90062*t90063*t90068;
                double t90070 = ccaa1*gcaa*t90001*t90036;
                double t90071 = ccaa2*gamma_bb[index]*t90002*t90003*t90037*2.0;
                double t90072 = ccaa3*gcaa*t90002*t90004*t90005*t90038*3.0;
                double t90073 = t90070+t90071+t90072-ccaa1*gamma_bb[index]*t90002*t90003*t90040-ccaa2*t90002*t90003* \
                   t90004*t90051*t90044-ccaa3*gamma_bb[index]*gcaa*t90002*t90004*t90005*t90043*t90048;
                double t90074 = pow(rho_b[index],5.0/3.0);
                double t90075 = C_k*t90074;
                double t90084 = tau_a[index]*1.0E20;
                double t90076 = t90075-t90084;
                double t90077 = ( (t90076 > 0.0) ?  1.0 : 0.0 ) ;
                double t90078 = t90077*1.0E20;
                double t90079 = 1.0/tau_b[index];
                double t90080 = tau_b[index]*1.0E20;
                double t90081 = t90080-t90075;
                double t90082 = ( (t90081 > 0.0) ?  1.0 : 0.0 ) ;
                double t90083 = C_k*t90082*t90074*t90079;
                double t90085 = t90083+t90078-1.0;
                double t90086 = t90085*t90085;
                double t90087 = t90083+t90078+1.0;
                double t90088 = t90086*t90086;
                double t90089 = gx*gx;
                double t90090 = gamma_bb[index]*gx*t90001;
                double t90091 = t90090+1.0;
                double t90092 = gamma_bb[index]*gx*t90001*3.0;
                double t90093 = gamma_bb[index]*gx*t90004*t90005*t90089;
                double t90094 = t90003*t90004*t90089*3.0;
                double t90095 = t90092+t90093+t90094+1.0;
                double t90096 = gamma_bb[index]*gx*t90001*2.0;
                double t90097 = t90003*t90004*t90089;
                double t90098 = t90096+t90097+1.0;
                double t90099 = 1.0/t90091;
                double t90100 = 1.0/t90098;
                double t90101 = 1.0/t90095;
                double t90102 = 1.0/(t90091*t90091);
                double t90103 = gx*t90001*3.0;
                double t90104 = gamma_bb[index]*t90003*t90089*6.0;
                double t90105 = gx*t90004*t90005*t90089*3.0;
                double t90106 = t90103+t90104+t90105;
                double t90107 = 1.0/(t90095*t90095);
                double t90108 = gx*t90001*2.0;
                double t90109 = gamma_bb[index]*t90003*t90089*2.0;
                double t90110 = t90108+t90109;
                double t90111 = 1.0/(t90098*t90098);
                double t90112 = X-1.0;
                double t90113 = cxnl1*gx*t90001*t90099;
                double t90114 = cxnl2*gamma_bb[index]*t90100*t90003*t90089*2.0;
                double t90115 = cxnl3*gx*t90101*t90004*t90005*t90089*3.0;
                double t90116 = t90113+t90114+t90115-cxnl1*gamma_bb[index]*t90003*t90102*t90089-cxnl2*t90110*t90003* \
                   t90111*t90004*t90089-cxnl3*gamma_bb[index]*gx*t90004*t90005*t90106*t90107*t90089;
                double t90117 = pow(rho_b[index],2.0/3.0);
                double t90118 = 1.0/t90087;
                double t90119 = -t90075+t90084;
                double t90120 = 0.0 ;
                double t90121 = C_k*t90120*t90117*(5.0E20/3.0);
                double t90122 = C_k*C_k;
                double t90123 = pow(rho_b[index],7.0/3.0);
                double t90124 = 0.0 ;
                double t90125 = C_k*t90117*t90082*t90079*(5.0/3.0);
                double t90127 = t90122*t90123*t90124*t90079*(5.0/3.0);
                double t90126 = t90121+t90125-t90127;
                double t90128 = 1.0/(t90087*t90087*t90087);
                double t90129 = 1.0/(t90087*t90087*t90087*t90087*t90087);
                double t90130 = t90118*t90085;
                double t90131 = t90129*t90085*t90088;
                double t90132 = t90130+t90131-t90128*t90085*t90086*2.0;
                double t90133 = gamma_bb[index]*gx*t90042*(1.6E1/3.0);
                double t90134 = t90004*t90039*t90089*(1.6E1/3.0);
                double t90135 = t90133+t90134;
                double t90136 = gamma_bb[index]*gx*t90042*8.0;
                double t90137 = gamma_bb[index]*gx*t90004*t90041*t90089*8.0;
                double t90138 = t90004*t90039*t90089*1.6E1;
                double t90139 = t90136+t90137+t90138;
                double t90140 = 1.0/(t90091*t90091*t90091);
                double t90141 = gx*t90042*8.0;
                double t90142 = gamma_bb[index]*t90039*t90089*3.2E1;
                double t90143 = gx*t90004*t90041*t90089*2.4E1;
                double t90144 = t90141+t90142+t90143;
                double t90145 = gx*t90042*(1.6E1/3.0);
                double t90146 = gamma_bb[index]*t90039*t90089*(3.2E1/3.0);
                double t90147 = t90145+t90146;
                double t90148 = 1.0/(t90098*t90098*t90098);
                double t90149 = 1.0/(t90095*t90095*t90095);
                v_rho_b_gamma_bb_[index] = -t90035*t90073+rho_b[index]*t90073*(-t90069+t90020*t90017*(t90069-(t90032* \
                   1.0/(t90026*t90026)*(b2f*c*t90059*(1.0/3.0)+b4f*t89987*t90060*(2.0/3.0)+b1f*c*t90061*t90059*(1.0/6.0) \
                   +b3f*c*t89985*t90059*(1.0/2.0)))/t90029-a1p*c*c0p*t89998*t90059*(2.0/3.0)+a1f*c*c0f*t90030*t90059* \
                   (2.0/3.0))+a1p*c*c0p*t89998*t90059*(2.0/3.0))-rho_b[index]*t90035*(ccaa1*gcaa*t90042*t90036*(-8.0/ \
                   3.0)+ccaa1*gamma_bb[index]*t90002*t90040*t90039*8.0-ccaa2*gamma_bb[index]*t90002*t90037*t90039*(3.2E1/ \
                   3.0)+ccaa2*t90002*t90004*t90051*t90044*t90039*(1.6E1/3.0)-ccaa1*gcaa*t90002*t90004*t90041*1.0/(t90007* \
                   t90007*t90007)*(1.6E1/3.0)+ccaa2*t90002*t90003*t90004*t90044*(gcaa*t90042*(1.6E1/3.0)+gamma_bb[index]* \
                   t90002*t90039*(3.2E1/3.0))+ccaa2*gamma_bb[index]*t90002*t90003*t90044*t90054*2.0-ccaa3*gcaa*t90002* \
                   t90004*t90041*t90038*2.4E1+ccaa3*gcaa*t90002*t90004*t90005*t90043*t90058*3.0-ccaa2*t90002*t90003*t90004* \
                   1.0/(t90014*t90014*t90014)*t90051*t90054*2.0+ccaa3*gamma_bb[index]*gcaa*t90002*t90004*t90005*t90043* \
                   (gcaa*t90042*8.0+gamma_bb[index]*t90002*t90039*3.2E1+gcaa*t90002*t90004*t90041*2.4E1)+ccaa3*gamma_bb[index]* \
                   gcaa*t90002*t90004*t90041*t90043*t90048*8.0-ccaa3*gamma_bb[index]*gcaa*t90002*1.0/(t90011*t90011*t90011) \
                   *t90004*t90005*t90048*t90058*2.0)-c0*pow(rho_b[index],1.0/3.0)*t90112*(t90132*t90116+cx1*gx*t90001* \
                   t90099-cx1*gamma_bb[index]*t90003*t90102*t90089+cx2*gamma_bb[index]*t90100*t90003*t90089*2.0-cx2*t90110* \
                   t90003*t90111*t90004*t90089+cx3*gx*t90101*t90004*t90005*t90089*3.0-cx3*gamma_bb[index]*gx*t90004*t90005* \
                   t90106*t90107*t90089)*(4.0/3.0)-c0*pow(rho_b[index],4.0/3.0)*t90112*(t90116*(t90126*t90118-t90126* \
                   t90085*1.0/(t90087*t90087)-t90126*t90128*t90086*6.0+t90126*t90129*t90088*5.0+t90126*t90085*t90086* \
                   1.0/(t90087*t90087*t90087*t90087)*6.0-t90126*t90085*1.0/(t90087*t90087*t90087*t90087*t90087*t90087) \
                   *t90088*5.0)+t90132*(cxnl1*gx*t90042*t90099*(-8.0/3.0)-cxnl2*gamma_bb[index]*t90100*t90039*t90089* \
                   (3.2E1/3.0)+cxnl1*gamma_bb[index]*t90102*t90039*t90089*8.0+cxnl2*t90110*t90111*t90004*t90039*t90089* \
                   (1.6E1/3.0)+cxnl2*t90003*t90111*t90004*t90147*t90089+cxnl2*gamma_bb[index]*t90003*t90111*t90135*t90089* \
                   2.0-cxnl3*gx*t90101*t90004*t90041*t90089*2.4E1-cxnl1*gx*t90004*t90041*t90140*t90089*(1.6E1/3.0)+cxnl3* \
                   gx*t90004*t90005*t90107*t90139*t90089*3.0-cxnl2*t90110*t90003*t90004*t90135*t90148*t90089*2.0+cxnl3* \
                   gamma_bb[index]*gx*t90004*t90041*t90106*t90107*t90089*8.0+cxnl3*gamma_bb[index]*gx*t90004*t90005*t90107* \
                   t90144*t90089-cxnl3*gamma_bb[index]*gx*t90004*t90005*t90106*t90139*t90149*t90089*2.0)-cx1*gx*t90042* \
                   t90099*(8.0/3.0)+cx1*gamma_bb[index]*t90102*t90039*t90089*8.0-cx2*gamma_bb[index]*t90100*t90039*t90089* \
                   (3.2E1/3.0)+cx2*t90110*t90111*t90004*t90039*t90089*(1.6E1/3.0)+cx2*t90003*t90111*t90004*t90147*t90089+ \
                   cx2*gamma_bb[index]*t90003*t90111*t90135*t90089*2.0-cx1*gx*t90004*t90041*t90140*t90089*(1.6E1/3.0) \
                   -cx3*gx*t90101*t90004*t90041*t90089*2.4E1+cx3*gx*t90004*t90005*t90107*t90139*t90089*3.0-cx2*t90110* \
                   t90003*t90004*t90135*t90148*t90089*2.0+cx3*gamma_bb[index]*gx*t90004*t90041*t90106*t90107*t90089*8.0+ \
                   cx3*gamma_bb[index]*gx*t90004*t90005*t90107*t90144*t90089-cx3*gamma_bb[index]*gx*t90004*t90005*t90106* \
                   t90139*t90149*t90089*2.0);
            } else {
                v_rho_b_gamma_bb_[index] = 0.0;
            }

            //V_gamma_aa_gamma_aa
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t88555 = 1.0/pow(rho_a[index],1.0/3.0);
                double t88556 = c*t88555;
                double t88557 = sqrt(t88556);
                double t88558 = pow(t88556,3.0/2.0);
                double t88559 = c*c;
                double t88560 = 1.0/pow(rho_a[index],2.0/3.0);
                double t88561 = 1.0/c0p;
                double t88562 = b1p*t88557;
                double t88563 = b3p*t88558;
                double t88564 = b4p*t88560*t88559;
                double t88565 = b2p*c*t88555;
                double t88566 = t88562+t88563+t88564+t88565;
                double t88567 = 1.0/t88566;
                double t88568 = t88561*t88567*(1.0/2.0);
                double t88569 = t88568+1.0;
                double t88570 = log(t88569);
                double t88571 = a1p*c*t88555;
                double t88572 = t88571+1.0;
                double t88573 = pow(2.0,1.0/3.0);
                double t88574 = t88573*2.0;
                double t88575 = t88574-2.0;
                double t88576 = two_13*2.0;
                double t88577 = t88576-2.0;
                double t88578 = 1.0/t88577;
                double t88579 = 1.0/c0f;
                double t88580 = 1.0/pow(rho_b[index],1.0/3.0);
                double t88581 = c*t88580;
                double t88582 = sqrt(t88581);
                double t88583 = pow(t88581,3.0/2.0);
                double t88584 = 1.0/pow(rho_b[index],2.0/3.0);
                double t88585 = b1p*t88582;
                double t88586 = b3p*t88583;
                double t88587 = b4p*t88584*t88559;
                double t88588 = b2p*c*t88580;
                double t88589 = t88585+t88586+t88587+t88588;
                double t88590 = 1.0/t88589;
                double t88591 = t88561*t88590*(1.0/2.0);
                double t88592 = t88591+1.0;
                double t88593 = log(t88592);
                double t88594 = a1p*c*t88580;
                double t88595 = t88594+1.0;
                double t88596 = c0p*t88593*t88595*2.0;
                double t88597 = rho_a[index]+rho_b[index];
                double t88598 = 1.0/pow(t88597,1.0/3.0);
                double t88599 = c*t88598;
                double t88600 = sqrt(t88599);
                double t88601 = pow(t88599,3.0/2.0);
                double t88602 = 1.0/pow(t88597,2.0/3.0);
                double t88603 = b1p*t88600;
                double t88604 = b3p*t88601;
                double t88605 = b4p*t88602*t88559;
                double t88606 = b2p*c*t88598;
                double t88607 = t88603+t88604+t88605+t88606;
                double t88608 = 1.0/t88607;
                double t88609 = t88561*t88608*(1.0/2.0);
                double t88610 = t88609+1.0;
                double t88611 = log(t88610);
                double t88612 = a1p*c*t88598;
                double t88613 = t88612+1.0;
                double t88614 = c0p*t88611*t88613*2.0;
                double t88615 = rho_a[index]-rho_b[index];
                double t88616 = t88615*t88615;
                double t88617 = 1.0/t88597;
                double t88618 = t88615*t88617;
                double t88619 = 1.0/(t88597*t88597*t88597*t88597);
                double t88620 = t88616*t88616;
                double t88621 = t88618+1.0;
                double t88622 = pow(t88621,4.0/3.0);
                double t88623 = -t88618+1.0;
                double t88624 = pow(t88623,4.0/3.0);
                double t88625 = t88622+t88624-2.0;
                double t88626 = gcab*gcab;
                double t88627 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t88628 = 1.0/pow(rho_a[index],8.0/3.0);
                double t88629 = gamma_aa[index]*t88628*(1.0/2.0);
                double t88630 = 1.0/pow(rho_b[index],8.0/3.0);
                double t88631 = gamma_bb[index]*t88630*(1.0/2.0);
                double t88632 = t88631+t88629;
                double t88633 = gcab*t88632;
                double t88634 = t88633+1.0;
                double t88635 = t88632*t88632;
                double t88636 = t88626*t88635;
                double t88637 = gcab*t88632*2.0;
                double t88638 = t88636+t88637+1.0;
                double t88648 = gcab*t88628*(3.0/2.0);
                double t88649 = t88632*t88626*t88628*3.0;
                double t88650 = gcab*t88626*t88635*t88628*(3.0/2.0);
                double t88639 = t88650+t88648+t88649;
                double t88640 = t88626*t88635*3.0;
                double t88641 = gcab*t88632*t88626*t88635;
                double t88642 = gcab*t88632*3.0;
                double t88643 = t88640+t88641+t88642+1.0;
                double t88645 = gcab*t88628;
                double t88646 = t88632*t88626*t88628;
                double t88644 = t88645+t88646;
                double t88647 = 1.0/(t88638*t88638);
                double t88651 = 1.0/(t88643*t88643);
                double t88652 = b1f*t88557;
                double t88653 = b3f*t88558;
                double t88654 = b4f*t88560*t88559;
                double t88655 = b2f*c*t88555;
                double t88656 = t88652+t88653+t88654+t88655;
                double t88657 = 1.0/t88656;
                double t88658 = t88657*t88579*(1.0/2.0);
                double t88659 = t88658+1.0;
                double t88660 = log(t88659);
                double t88661 = a1f*c*t88555;
                double t88662 = t88661+1.0;
                double t88663 = c0f*t88660*t88662*2.0;
                double t88664 = c0p*t88570*t88572*2.0;
                double t88665 = gcaa*gcaa;
                double t88666 = gamma_aa[index]*gcaa*t88628;
                double t88667 = t88666+1.0;
                double t88668 = gamma_aa[index]*gamma_aa[index];
                double t88669 = gamma_aa[index]*gcaa*t88628*2.0;
                double t88670 = t88627*t88665*t88668;
                double t88671 = t88670+t88669+1.0;
                double t88672 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t88673 = gamma_aa[index]*gcaa*t88628*3.0;
                double t88674 = gamma_aa[index]*gcaa*t88672*t88665*t88668;
                double t88675 = t88627*t88665*t88668*3.0;
                double t88676 = t88673+t88674+t88675+1.0;
                double t88679 = gcaa*t88628*2.0;
                double t88680 = gamma_aa[index]*t88627*t88665*2.0;
                double t88677 = t88680+t88679;
                double t88678 = 1.0/(t88676*t88676);
                double t88681 = 1.0/(t88671*t88671);
                double t88682 = gcaa*t88628*3.0;
                double t88683 = gamma_aa[index]*t88627*t88665*6.0;
                double t88684 = gcaa*t88672*t88665*t88668*3.0;
                double t88685 = t88682+t88683+t88684;
                double t88686 = pow(rho_a[index],5.0/3.0);
                double t88687 = C_k*t88686;
                double t88688 = tau_a[index]*1.0E20;
                double t88689 = 1.0/tau_a[index];
                double t88690 = -t88687+t88688;
                double t88691 = ( (t88690 > 0.0) ?  1.0 : 0.0 ) ;
                double t88692 = C_k*t88691*t88686*t88689;
                double t88693 = t88687-t88688;
                double t88694 = ( (t88693 > 0.0) ?  1.0 : 0.0 ) ;
                double t88695 = t88694*1.0E20;
                double t88696 = t88692+t88695-1.0;
                double t88697 = t88696*t88696;
                double t88698 = t88692+t88695+1.0;
                double t88699 = t88697*t88697;
                double t88700 = gx*gx;
                double t88701 = gamma_aa[index]*gx*t88628;
                double t88702 = t88701+1.0;
                double t88703 = 1.0/pow(rho_a[index],3.2E1/3.0);
                double t88704 = gamma_aa[index]*gx*t88628*2.0;
                double t88705 = t88700*t88627*t88668;
                double t88706 = t88704+t88705+1.0;
                double t88707 = gamma_aa[index]*gx*t88628*3.0;
                double t88708 = gamma_aa[index]*gx*t88700*t88672*t88668;
                double t88709 = t88700*t88627*t88668*3.0;
                double t88710 = t88707+t88708+t88709+1.0;
                double t88713 = gx*t88628*2.0;
                double t88714 = gamma_aa[index]*t88700*t88627*2.0;
                double t88711 = t88713+t88714;
                double t88712 = 1.0/(t88710*t88710);
                double t88715 = 1.0/(t88706*t88706);
                double t88716 = gx*t88628*3.0;
                double t88717 = gamma_aa[index]*t88700*t88627*6.0;
                double t88718 = gx*t88700*t88672*t88668*3.0;
                double t88719 = t88716+t88717+t88718;
                double t88720 = 1.0/(t88702*t88702);
                double t88721 = 1.0/t88706;
                double t88722 = 1.0/t88710;
                double t88723 = 1.0/(t88702*t88702*t88702);
                double t88724 = t88700*t88700;
                double t88725 = t88700*t88627*6.0;
                double t88726 = gamma_aa[index]*gx*t88700*t88672*6.0;
                double t88727 = t88725+t88726;
                double t88728 = t88711*t88711;
                double t88729 = 1.0/(t88706*t88706*t88706);
                double t88730 = t88719*t88719;
                double t88731 = 1.0/(t88710*t88710*t88710);
                v_gamma_aa_gamma_aa_[index] = -(rho_a[index]*(t88664+t88575*t88578*(t88663-c0p*t88570*t88572*2.0) \
                   )+rho_b[index]*(t88596-t88575*t88578*(t88596-c0f*log((t88579*(1.0/2.0))/(b1f*t88582+b3f*t88583+b2f* \
                   c*t88580+b4f*t88584*t88559)+1.0)*(a1f*c*t88580+1.0)*2.0))-t88597*(t88614-t88620*t88625*t88619*t88578* \
                   (t88614-c0f*log((t88579*(1.0/2.0))/(b1f*t88600+b3f*t88601+b2f*c*t88598+b4f*t88602*t88559)+1.0)*(a1f* \
                   c*t88598+1.0)*2.0)+(Aa*t88625*t88578*log((1.0/2.0)/(Aa*(b1a*t88600+b3a*t88601+b2a*c*t88598+b4a*t88602* \
                   t88559))+1.0)*(t88620*t88619-1.0)*(a1a*c*t88598+1.0)*2.0)/d2fz0))*(ccab1*1.0/(t88634*t88634)*t88626* \
                   t88627*(1.0/2.0)-(ccab2*t88626*t88627*(1.0/2.0))/t88638-ccab2*t88626*t88635*(t88644*t88644)*1.0/(t88638* \
                   t88638*t88638)*2.0+ccab2*(t88626*t88626)*t88635*t88627*t88647*(1.0/2.0)+ccab2*t88632*t88626*t88644* \
                   t88628*t88647*2.0-ccab1*gcab*t88632*1.0/(t88634*t88634*t88634)*t88626*t88627*(1.0/2.0)-(ccab3*gcab* \
                   t88632*t88626*t88627*(3.0/2.0))/t88643-ccab3*gcab*t88632*1.0/(t88643*t88643*t88643)*t88626*t88635* \
                   (t88639*t88639)*2.0+ccab3*gcab*t88651*t88626*t88635*t88628*t88639*3.0+ccab3*gcab*t88632*t88651*t88626* \
                   t88635*(t88626*t88627*(3.0/2.0)+gcab*t88632*t88626*t88627*(3.0/2.0)))-rho_a[index]*(t88664+t88575* \
                   t88578*(t88663-t88664))*((ccaa2*t88627*t88665*2.0)/t88671-ccaa1*t88627*t88665*1.0/(t88667*t88667)* \
                   2.0-ccaa2*t88703*t88681*(t88665*t88665)*t88668*2.0+ccaa1*gamma_aa[index]*gcaa*t88672*t88665*1.0/(t88667* \
                   t88667*t88667)*2.0+(ccaa3*gamma_aa[index]*gcaa*t88672*t88665*6.0)/t88676+ccaa2*1.0/(t88671*t88671* \
                   t88671)*t88627*t88665*t88668*(t88677*t88677)*2.0-ccaa2*gamma_aa[index]*t88627*t88681*t88665*t88677* \
                   4.0-ccaa3*gcaa*t88672*t88665*t88685*t88668*t88678*6.0-ccaa3*gamma_aa[index]*gcaa*t88672*t88665*t88668* \
                   t88678*(t88627*t88665*6.0+gamma_aa[index]*gcaa*t88672*t88665*6.0)+ccaa3*gamma_aa[index]*gcaa*t88672* \
                   t88665*1.0/(t88676*t88676*t88676)*(t88685*t88685)*t88668*2.0)+c0*pow(rho_a[index],4.0/3.0)*(X-1.0) \
                   *(((t88692+ ( (t88687-tau_a[index]*1.0E20 > 0.0) ? 1.0*1.0E20 : 0.0 ) -1.0)/t88698-t88696*t88697*1.0/ \
                   (t88698*t88698*t88698)*2.0+t88696*1.0/(t88698*t88698*t88698*t88698*t88698)*t88699)*(cxnl1*t88700*t88720* \
                   t88627*2.0-cxnl2*t88700*t88721*t88627*2.0+cxnl2*t88703*t88715*t88724*t88668*2.0-cxnl2*t88700*t88627* \
                   t88728*t88729*t88668*2.0-cxnl1*gamma_aa[index]*gx*t88700*t88723*t88672*2.0-cxnl3*gamma_aa[index]*gx* \
                   t88700*t88722*t88672*6.0+cxnl2*gamma_aa[index]*t88700*t88711*t88715*t88627*4.0+cxnl3*gx*t88700*t88712* \
                   t88672*t88719*t88668*6.0-cxnl3*gamma_aa[index]*gx*t88700*t88730*t88731*t88672*t88668*2.0+cxnl3*gamma_aa[index]* \
                   gx*t88700*t88712*t88672*t88727*t88668)+cx1*t88700*t88720*t88627*2.0-cx2*t88700*t88721*t88627*2.0+cx2* \
                   t88703*t88715*t88724*t88668*2.0-cx2*t88700*t88627*t88728*t88729*t88668*2.0-cx1*gamma_aa[index]*gx* \
                   t88700*t88723*t88672*2.0-cx3*gamma_aa[index]*gx*t88700*t88722*t88672*6.0+cx2*gamma_aa[index]*t88700* \
                   t88711*t88715*t88627*4.0+cx3*gx*t88700*t88712*t88672*t88719*t88668*6.0-cx3*gamma_aa[index]*gx*t88700* \
                   t88730*t88731*t88672*t88668*2.0+cx3*gamma_aa[index]*gx*t88700*t88712*t88672*t88727*t88668);
            } else if (rho_a[index] > cutoff_) {
                double t91204 = 1.0/pow(rho_a[index],1.0/3.0);
                double t91205 = c*t91204;
                double t91206 = sqrt(t91205);
                double t91207 = pow(t91205,3.0/2.0);
                double t91208 = c*c;
                double t91209 = 1.0/pow(rho_a[index],2.0/3.0);
                double t91210 = 1.0/c0p;
                double t91211 = b1p*t91206;
                double t91212 = b3p*t91207;
                double t91213 = b4p*t91208*t91209;
                double t91214 = b2p*c*t91204;
                double t91215 = t91211+t91212+t91213+t91214;
                double t91216 = 1.0/t91215;
                double t91217 = t91210*t91216*(1.0/2.0);
                double t91218 = t91217+1.0;
                double t91219 = log(t91218);
                double t91220 = a1p*c*t91204;
                double t91221 = t91220+1.0;
                double t91222 = gcaa*gcaa;
                double t91223 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t91224 = 1.0/pow(rho_a[index],8.0/3.0);
                double t91225 = gamma_aa[index]*gcaa*t91224;
                double t91226 = t91225+1.0;
                double t91227 = gamma_aa[index]*gamma_aa[index];
                double t91228 = gamma_aa[index]*gcaa*t91224*2.0;
                double t91229 = t91222*t91223*t91227;
                double t91230 = t91228+t91229+1.0;
                double t91231 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t91232 = gamma_aa[index]*gcaa*t91224*3.0;
                double t91233 = gamma_aa[index]*gcaa*t91222*t91231*t91227;
                double t91234 = t91222*t91223*t91227*3.0;
                double t91235 = t91232+t91233+t91234+1.0;
                double t91238 = gcaa*t91224*2.0;
                double t91239 = gamma_aa[index]*t91222*t91223*2.0;
                double t91236 = t91238+t91239;
                double t91237 = 1.0/(t91235*t91235);
                double t91240 = 1.0/(t91230*t91230);
                double t91241 = gcaa*t91224*3.0;
                double t91242 = gamma_aa[index]*t91222*t91223*6.0;
                double t91243 = gcaa*t91222*t91231*t91227*3.0;
                double t91244 = t91241+t91242+t91243;
                double t91245 = pow(rho_a[index],5.0/3.0);
                double t91246 = C_k*t91245;
                double t91247 = tau_a[index]*1.0E20;
                double t91248 = 1.0/tau_a[index];
                double t91249 = -t91246+t91247;
                double t91250 = ( (t91249 > 0.0) ?  1.0 : 0.0 ) ;
                double t91251 = C_k*t91250*t91245*t91248;
                double t91252 = t91246-t91247;
                double t91253 = ( (t91252 > 0.0) ?  1.0 : 0.0 ) ;
                double t91254 = t91253*1.0E20;
                double t91255 = t91251+t91254-1.0;
                double t91256 = t91255*t91255;
                double t91257 = t91251+t91254+1.0;
                double t91258 = t91256*t91256;
                double t91259 = gx*gx;
                double t91260 = gamma_aa[index]*gx*t91224;
                double t91261 = t91260+1.0;
                double t91262 = 1.0/pow(rho_a[index],3.2E1/3.0);
                double t91263 = gamma_aa[index]*gx*t91224*2.0;
                double t91264 = t91223*t91227*t91259;
                double t91265 = t91263+t91264+1.0;
                double t91266 = gamma_aa[index]*gx*t91224*3.0;
                double t91267 = gamma_aa[index]*gx*t91231*t91227*t91259;
                double t91268 = t91223*t91227*t91259*3.0;
                double t91269 = t91266+t91267+t91268+1.0;
                double t91272 = gx*t91224*2.0;
                double t91273 = gamma_aa[index]*t91223*t91259*2.0;
                double t91270 = t91272+t91273;
                double t91271 = 1.0/(t91269*t91269);
                double t91274 = 1.0/(t91265*t91265);
                double t91275 = gx*t91224*3.0;
                double t91276 = gamma_aa[index]*t91223*t91259*6.0;
                double t91277 = gx*t91231*t91227*t91259*3.0;
                double t91278 = t91275+t91276+t91277;
                double t91279 = 1.0/(t91261*t91261);
                double t91280 = 1.0/t91265;
                double t91281 = 1.0/t91269;
                double t91282 = 1.0/(t91261*t91261*t91261);
                double t91283 = t91259*t91259;
                double t91284 = t91223*t91259*6.0;
                double t91285 = gamma_aa[index]*gx*t91231*t91259*6.0;
                double t91286 = t91284+t91285;
                double t91287 = t91270*t91270;
                double t91288 = 1.0/(t91265*t91265*t91265);
                double t91289 = t91278*t91278;
                double t91290 = 1.0/(t91269*t91269*t91269);
                v_gamma_aa_gamma_aa_[index] = -rho_a[index]*(((pow(2.0,1.0/3.0)*2.0-2.0)*(c0f*log((1.0/2.0)/(c0f* \
                   (b1f*t91206+b3f*t91207+b2f*c*t91204+b4f*t91208*t91209))+1.0)*(a1f*c*t91204+1.0)*2.0-c0p*t91221*t91219* \
                   2.0))/(two_13*2.0-2.0)+c0p*t91221*t91219*2.0)*((ccaa2*t91222*t91223*2.0)/t91230-ccaa1*t91222*t91223* \
                   1.0/(t91226*t91226)*2.0-ccaa2*(t91222*t91222)*t91240*t91262*t91227*2.0+ccaa1*gamma_aa[index]*gcaa* \
                   t91222*t91231*1.0/(t91226*t91226*t91226)*2.0+(ccaa3*gamma_aa[index]*gcaa*t91222*t91231*6.0)/t91235+ \
                   ccaa2*1.0/(t91230*t91230*t91230)*t91222*t91223*t91227*(t91236*t91236)*2.0-ccaa2*gamma_aa[index]*t91222* \
                   t91240*t91223*t91236*4.0-ccaa3*gcaa*t91222*t91231*t91244*t91227*t91237*6.0-ccaa3*gamma_aa[index]*gcaa* \
                   t91222*t91231*t91227*t91237*(t91222*t91223*6.0+gamma_aa[index]*gcaa*t91222*t91231*6.0)+ccaa3*gamma_aa[index]* \
                   gcaa*t91222*t91231*1.0/(t91235*t91235*t91235)*(t91244*t91244)*t91227*2.0)-c0*pow(rho_a[index],4.0/ \
                   3.0)*(X-1.0)*((t91255/t91257-t91255*t91256*1.0/(t91257*t91257*t91257)*2.0+t91255*1.0/(t91257*t91257* \
                   t91257*t91257*t91257)*t91258)*(cxnl2*t91223*t91280*t91259*2.0-cxnl1*t91223*t91259*t91279*2.0-cxnl2* \
                   t91262*t91227*t91274*t91283*2.0+cxnl2*t91223*t91227*t91259*t91287*t91288*2.0+cxnl1*gamma_aa[index]* \
                   gx*t91231*t91282*t91259*2.0+cxnl3*gamma_aa[index]*gx*t91231*t91281*t91259*6.0-cxnl2*gamma_aa[index]* \
                   t91223*t91270*t91274*t91259*4.0-cxnl3*gx*t91231*t91271*t91227*t91259*t91278*6.0-cxnl3*gamma_aa[index]* \
                   gx*t91231*t91271*t91227*t91259*t91286+cxnl3*gamma_aa[index]*gx*t91231*t91227*t91290*t91259*t91289* \
                   2.0)-cx1*t91223*t91259*t91279*2.0+cx2*t91223*t91280*t91259*2.0-cx2*t91262*t91227*t91274*t91283*2.0+ \
                   cx2*t91223*t91227*t91259*t91287*t91288*2.0+cx1*gamma_aa[index]*gx*t91231*t91282*t91259*2.0+cx3*gamma_aa[index]* \
                   gx*t91231*t91281*t91259*6.0-cx2*gamma_aa[index]*t91223*t91270*t91274*t91259*4.0-cx3*gx*t91231*t91271* \
                   t91227*t91259*t91278*6.0-cx3*gamma_aa[index]*gx*t91231*t91271*t91227*t91259*t91286+cx3*gamma_aa[index]* \
                   gx*t91231*t91227*t91290*t91259*t91289*2.0);
            } else if (rho_b[index] > cutoff_) {
                v_gamma_aa_gamma_aa_[index] = 0.0;
            } else {
                v_gamma_aa_gamma_aa_[index] = 0.0;
            }

            //V_gamma_aa_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_aa_gamma_ab_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_aa_gamma_ab_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_aa_gamma_ab_[index] = 0.0;
            } else {
                v_gamma_aa_gamma_ab_[index] = 0.0;
            }

            //V_gamma_aa_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t88734 = 1.0/pow(rho_a[index],1.0/3.0);
                double t88735 = c*t88734;
                double t88736 = sqrt(t88735);
                double t88737 = pow(t88735,3.0/2.0);
                double t88738 = c*c;
                double t88739 = 1.0/pow(rho_a[index],2.0/3.0);
                double t88740 = 1.0/c0p;
                double t88741 = b1p*t88736;
                double t88742 = b3p*t88737;
                double t88743 = b4p*t88738*t88739;
                double t88744 = b2p*c*t88734;
                double t88745 = t88741+t88742+t88743+t88744;
                double t88746 = 1.0/t88745;
                double t88747 = t88740*t88746*(1.0/2.0);
                double t88748 = t88747+1.0;
                double t88749 = log(t88748);
                double t88750 = a1p*c*t88734;
                double t88751 = t88750+1.0;
                double t88752 = pow(2.0,1.0/3.0);
                double t88753 = t88752*2.0;
                double t88754 = t88753-2.0;
                double t88755 = two_13*2.0;
                double t88756 = t88755-2.0;
                double t88757 = 1.0/t88756;
                double t88758 = 1.0/c0f;
                double t88759 = 1.0/pow(rho_b[index],1.0/3.0);
                double t88760 = c*t88759;
                double t88761 = sqrt(t88760);
                double t88762 = pow(t88760,3.0/2.0);
                double t88763 = 1.0/pow(rho_b[index],2.0/3.0);
                double t88764 = b1p*t88761;
                double t88765 = b3p*t88762;
                double t88766 = b4p*t88763*t88738;
                double t88767 = b2p*c*t88759;
                double t88768 = t88764+t88765+t88766+t88767;
                double t88769 = 1.0/t88768;
                double t88770 = t88740*t88769*(1.0/2.0);
                double t88771 = t88770+1.0;
                double t88772 = log(t88771);
                double t88773 = a1p*c*t88759;
                double t88774 = t88773+1.0;
                double t88775 = c0p*t88772*t88774*2.0;
                double t88776 = rho_a[index]+rho_b[index];
                double t88777 = 1.0/pow(t88776,1.0/3.0);
                double t88778 = c*t88777;
                double t88779 = sqrt(t88778);
                double t88780 = pow(t88778,3.0/2.0);
                double t88781 = 1.0/pow(t88776,2.0/3.0);
                double t88782 = b1p*t88779;
                double t88783 = b3p*t88780;
                double t88784 = b4p*t88781*t88738;
                double t88785 = b2p*c*t88777;
                double t88786 = t88782+t88783+t88784+t88785;
                double t88787 = 1.0/t88786;
                double t88788 = t88740*t88787*(1.0/2.0);
                double t88789 = t88788+1.0;
                double t88790 = log(t88789);
                double t88791 = a1p*c*t88777;
                double t88792 = t88791+1.0;
                double t88793 = c0p*t88790*t88792*2.0;
                double t88794 = rho_a[index]-rho_b[index];
                double t88795 = t88794*t88794;
                double t88796 = 1.0/t88776;
                double t88797 = t88794*t88796;
                double t88798 = 1.0/(t88776*t88776*t88776*t88776);
                double t88799 = t88795*t88795;
                double t88800 = t88797+1.0;
                double t88801 = pow(t88800,4.0/3.0);
                double t88802 = -t88797+1.0;
                double t88803 = pow(t88802,4.0/3.0);
                double t88804 = t88801+t88803-2.0;
                double t88805 = gcab*gcab;
                double t88806 = 1.0/pow(rho_a[index],8.0/3.0);
                double t88807 = 1.0/pow(rho_b[index],8.0/3.0);
                double t88808 = gamma_aa[index]*t88806*(1.0/2.0);
                double t88809 = gamma_bb[index]*t88807*(1.0/2.0);
                double t88810 = t88808+t88809;
                double t88811 = t88810*t88810;
                double t88812 = t88811*t88805*3.0;
                double t88813 = gcab*t88810*t88811*t88805;
                double t88814 = gcab*t88810*3.0;
                double t88815 = t88812+t88813+t88814+1.0;
                double t88816 = t88811*t88805;
                double t88817 = gcab*t88810*2.0;
                double t88818 = t88816+t88817+1.0;
                double t88819 = 1.0/(t88818*t88818);
                double t88820 = gcab*t88806;
                double t88821 = t88810*t88805*t88806;
                double t88822 = t88820+t88821;
                double t88823 = gcab*t88807;
                double t88824 = t88810*t88805*t88807;
                double t88825 = t88823+t88824;
                double t88826 = gcab*t88810;
                double t88827 = t88826+1.0;
                double t88828 = gcab*t88806*(3.0/2.0);
                double t88829 = t88810*t88805*t88806*3.0;
                double t88830 = gcab*t88811*t88805*t88806*(3.0/2.0);
                double t88831 = t88830+t88828+t88829;
                double t88832 = 1.0/(t88815*t88815);
                double t88833 = gcab*t88807*(3.0/2.0);
                double t88834 = t88810*t88805*t88807*3.0;
                double t88835 = gcab*t88811*t88805*t88807*(3.0/2.0);
                double t88836 = t88833+t88834+t88835;
                v_gamma_aa_gamma_bb_[index] = (-rho_b[index]*(t88775-t88754*t88757*(t88775-c0f*log((t88758*(1.0/2.0) \
                   )/(b1f*t88761+b3f*t88762+b2f*c*t88759+b4f*t88763*t88738)+1.0)*(a1f*c*t88759+1.0)*2.0))+t88776*(t88793- \
                   t88804*t88757*t88798*t88799*(t88793-c0f*log((t88758*(1.0/2.0))/(b1f*t88779+b3f*t88780+b2f*c*t88777+ \
                   b4f*t88781*t88738)+1.0)*(a1f*c*t88777+1.0)*2.0)+(Aa*t88804*t88757*log((1.0/2.0)/(Aa*(b1a*t88779+b3a* \
                   t88780+b2a*c*t88777+b4a*t88781*t88738))+1.0)*(t88798*t88799-1.0)*(a1a*c*t88777+1.0)*2.0)/d2fz0)+rho_a[index]* \
                   (t88754*t88757*(c0p*t88751*t88749*2.0-c0f*log((t88758*(1.0/2.0))/(b1f*t88736+b3f*t88737+b2f*c*t88734+ \
                   b4f*t88738*t88739)+1.0)*(a1f*c*t88734+1.0)*2.0)-c0p*t88751*t88749*2.0))*(ccab1*t88805*t88806*t88807* \
                   1.0/(t88827*t88827)*(1.0/2.0)-(ccab2*t88805*t88806*t88807*(1.0/2.0))/t88818+ccab2*t88810*t88822*t88805* \
                   t88807*t88819+ccab2*t88810*t88805*t88806*t88825*t88819-ccab2*t88811*t88822*t88805*t88825*1.0/(t88818* \
                   t88818*t88818)*2.0+ccab2*t88811*(t88805*t88805)*t88806*t88807*t88819*(1.0/2.0)+ccab3*gcab*t88811*t88831* \
                   t88805*t88832*t88807*(3.0/2.0)+ccab3*gcab*t88811*t88805*t88832*t88806*t88836*(3.0/2.0)+ccab3*gcab* \
                   t88810*t88811*t88805*t88832*(t88805*t88806*t88807*(3.0/2.0)+gcab*t88810*t88805*t88806*t88807*(3.0/ \
                   2.0))-(ccab3*gcab*t88810*t88805*t88806*t88807*(3.0/2.0))/t88815-ccab1*gcab*t88810*t88805*t88806*t88807* \
                   1.0/(t88827*t88827*t88827)*(1.0/2.0)-ccab3*gcab*t88810*t88811*t88831*t88805*1.0/(t88815*t88815*t88815) \
                   *t88836*2.0);
            } else if (rho_a[index] > cutoff_) {
                v_gamma_aa_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_aa_gamma_bb_[index] = 0.0;
            } else {
                v_gamma_aa_gamma_bb_[index] = 0.0;
            }

            //V_gamma_ab_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_ab_gamma_ab_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_ab_gamma_ab_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_ab_gamma_ab_[index] = 0.0;
            } else {
                v_gamma_ab_gamma_ab_[index] = 0.0;
            }

            //V_gamma_ab_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_ab_gamma_bb_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_ab_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_ab_gamma_bb_[index] = 0.0;
            } else {
                v_gamma_ab_gamma_bb_[index] = 0.0;
            }

            //V_gamma_bb_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t88840 = 1.0/pow(rho_a[index],1.0/3.0);
                double t88841 = c*t88840;
                double t88842 = sqrt(t88841);
                double t88843 = pow(t88841,3.0/2.0);
                double t88844 = c*c;
                double t88845 = 1.0/pow(rho_a[index],2.0/3.0);
                double t88846 = 1.0/c0p;
                double t88847 = b1p*t88842;
                double t88848 = b3p*t88843;
                double t88849 = b4p*t88844*t88845;
                double t88850 = b2p*c*t88840;
                double t88851 = t88850+t88847+t88848+t88849;
                double t88852 = 1.0/t88851;
                double t88853 = t88852*t88846*(1.0/2.0);
                double t88854 = t88853+1.0;
                double t88855 = log(t88854);
                double t88856 = a1p*c*t88840;
                double t88857 = t88856+1.0;
                double t88858 = pow(2.0,1.0/3.0);
                double t88859 = t88858*2.0;
                double t88860 = t88859-2.0;
                double t88861 = two_13*2.0;
                double t88862 = t88861-2.0;
                double t88863 = 1.0/t88862;
                double t88864 = 1.0/c0f;
                double t88865 = 1.0/pow(rho_b[index],1.0/3.0);
                double t88866 = c*t88865;
                double t88867 = sqrt(t88866);
                double t88868 = pow(t88866,3.0/2.0);
                double t88869 = 1.0/pow(rho_b[index],2.0/3.0);
                double t88870 = b1p*t88867;
                double t88871 = b3p*t88868;
                double t88872 = b4p*t88844*t88869;
                double t88873 = b2p*c*t88865;
                double t88874 = t88870+t88871+t88872+t88873;
                double t88875 = 1.0/t88874;
                double t88876 = t88846*t88875*(1.0/2.0);
                double t88877 = t88876+1.0;
                double t88878 = log(t88877);
                double t88879 = a1p*c*t88865;
                double t88880 = t88879+1.0;
                double t88881 = c0p*t88880*t88878*2.0;
                double t88882 = rho_a[index]+rho_b[index];
                double t88883 = 1.0/pow(t88882,1.0/3.0);
                double t88884 = c*t88883;
                double t88885 = sqrt(t88884);
                double t88886 = pow(t88884,3.0/2.0);
                double t88887 = 1.0/pow(t88882,2.0/3.0);
                double t88888 = b1p*t88885;
                double t88889 = b3p*t88886;
                double t88890 = b4p*t88844*t88887;
                double t88891 = b2p*c*t88883;
                double t88892 = t88890+t88891+t88888+t88889;
                double t88893 = 1.0/t88892;
                double t88894 = t88846*t88893*(1.0/2.0);
                double t88895 = t88894+1.0;
                double t88896 = log(t88895);
                double t88897 = a1p*c*t88883;
                double t88898 = t88897+1.0;
                double t88899 = c0p*t88896*t88898*2.0;
                double t88900 = rho_a[index]-rho_b[index];
                double t88901 = t88900*t88900;
                double t88902 = 1.0/t88882;
                double t88903 = t88900*t88902;
                double t88904 = 1.0/(t88882*t88882*t88882*t88882);
                double t88905 = t88901*t88901;
                double t88906 = t88903+1.0;
                double t88907 = pow(t88906,4.0/3.0);
                double t88908 = -t88903+1.0;
                double t88909 = pow(t88908,4.0/3.0);
                double t88910 = t88907+t88909-2.0;
                double t88911 = gcab*gcab;
                double t88912 = 1.0/pow(rho_b[index],1.6E1/3.0);
                double t88913 = 1.0/pow(rho_a[index],8.0/3.0);
                double t88914 = gamma_aa[index]*t88913*(1.0/2.0);
                double t88915 = 1.0/pow(rho_b[index],8.0/3.0);
                double t88916 = gamma_bb[index]*t88915*(1.0/2.0);
                double t88917 = t88914+t88916;
                double t88918 = gcab*t88917;
                double t88919 = t88918+1.0;
                double t88920 = t88917*t88917;
                double t88921 = t88911*t88920;
                double t88922 = gcab*t88917*2.0;
                double t88923 = t88921+t88922+1.0;
                double t88933 = gcab*t88915*(3.0/2.0);
                double t88934 = t88911*t88915*t88917*3.0;
                double t88935 = gcab*t88911*t88920*t88915*(3.0/2.0);
                double t88924 = t88933+t88934+t88935;
                double t88925 = t88911*t88920*3.0;
                double t88926 = gcab*t88911*t88920*t88917;
                double t88927 = gcab*t88917*3.0;
                double t88928 = t88925+t88926+t88927+1.0;
                double t88930 = gcab*t88915;
                double t88931 = t88911*t88915*t88917;
                double t88929 = t88930+t88931;
                double t88932 = 1.0/(t88923*t88923);
                double t88936 = 1.0/(t88928*t88928);
                double t88937 = c0p*t88855*t88857*2.0;
                double t88938 = b1f*t88867;
                double t88939 = b3f*t88868;
                double t88940 = b4f*t88844*t88869;
                double t88941 = b2f*c*t88865;
                double t88942 = t88940+t88941+t88938+t88939;
                double t88943 = 1.0/t88942;
                double t88944 = t88943*t88864*(1.0/2.0);
                double t88945 = t88944+1.0;
                double t88946 = log(t88945);
                double t88947 = a1f*c*t88865;
                double t88948 = t88947+1.0;
                double t88949 = t88881-c0f*t88946*t88948*2.0;
                double t88950 = t88881-t88860*t88863*t88949;
                double t88951 = gcaa*gcaa;
                double t88952 = gamma_bb[index]*gcaa*t88915;
                double t88953 = t88952+1.0;
                double t88954 = gamma_bb[index]*gamma_bb[index];
                double t88955 = gamma_bb[index]*gcaa*t88915*2.0;
                double t88956 = t88912*t88951*t88954;
                double t88957 = t88955+t88956+1.0;
                double t88958 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]);
                double t88959 = gamma_bb[index]*gcaa*t88915*3.0;
                double t88960 = gamma_bb[index]*gcaa*t88951*t88954*t88958;
                double t88961 = t88912*t88951*t88954*3.0;
                double t88962 = t88960+t88961+t88959+1.0;
                double t88965 = gcaa*t88915*2.0;
                double t88966 = gamma_bb[index]*t88912*t88951*2.0;
                double t88963 = t88965+t88966;
                double t88964 = 1.0/(t88962*t88962);
                double t88967 = 1.0/(t88957*t88957);
                double t88968 = gcaa*t88915*3.0;
                double t88969 = gamma_bb[index]*t88912*t88951*6.0;
                double t88970 = gcaa*t88951*t88954*t88958*3.0;
                double t88971 = t88970+t88968+t88969;
                double t88972 = pow(rho_b[index],5.0/3.0);
                double t88973 = C_k*t88972;
                double t88982 = tau_a[index]*1.0E20;
                double t88974 = t88973-t88982;
                double t88975 = ( (t88974 > 0.0) ?  1.0 : 0.0 ) ;
                double t88976 = t88975*1.0E20;
                double t88977 = 1.0/tau_b[index];
                double t88978 = tau_b[index]*1.0E20;
                double t88979 = -t88973+t88978;
                double t88980 = ( (t88979 > 0.0) ?  1.0 : 0.0 ) ;
                double t88981 = C_k*t88980*t88972*t88977;
                double t88983 = t88981+t88976-1.0;
                double t88984 = t88983*t88983;
                double t88985 = t88981+t88976+1.0;
                double t88986 = t88984*t88984;
                double t88987 = gx*gx;
                double t88988 = gamma_bb[index]*gx*t88915;
                double t88989 = t88988+1.0;
                double t88990 = 1.0/pow(rho_b[index],3.2E1/3.0);
                double t88991 = gamma_bb[index]*gx*t88915*2.0;
                double t88992 = t88912*t88954*t88987;
                double t88993 = t88991+t88992+1.0;
                double t88994 = gamma_bb[index]*gx*t88915*3.0;
                double t88995 = gamma_bb[index]*gx*t88954*t88958*t88987;
                double t88996 = t88912*t88954*t88987*3.0;
                double t88997 = t88994+t88995+t88996+1.0;
                double t89000 = gx*t88915*2.0;
                double t89001 = gamma_bb[index]*t88912*t88987*2.0;
                double t88998 = t89000+t89001;
                double t88999 = 1.0/(t88997*t88997);
                double t89002 = 1.0/(t88993*t88993);
                double t89003 = gx*t88915*3.0;
                double t89004 = gamma_bb[index]*t88912*t88987*6.0;
                double t89005 = gx*t88954*t88958*t88987*3.0;
                double t89006 = t89003+t89004+t89005;
                double t89007 = 1.0/(t88989*t88989);
                double t89008 = 1.0/t88993;
                double t89009 = 1.0/t88997;
                double t89010 = 1.0/(t88989*t88989*t88989);
                double t89011 = t88987*t88987;
                double t89012 = t88912*t88987*6.0;
                double t89013 = gamma_bb[index]*gx*t88958*t88987*6.0;
                double t89014 = t89012+t89013;
                double t89015 = t88998*t88998;
                double t89016 = 1.0/(t88993*t88993*t88993);
                double t89017 = t89006*t89006;
                double t89018 = 1.0/(t88997*t88997*t88997);
                v_gamma_bb_gamma_bb_[index] = (rho_b[index]*t88950+rho_a[index]*(t88937-t88860*t88863*(t88937-c0f* \
                   log((t88864*(1.0/2.0))/(b1f*t88842+b3f*t88843+b2f*c*t88840+b4f*t88844*t88845)+1.0)*(a1f*c*t88840+1.0) \
                   *2.0))-t88882*(t88899-t88910*t88904*t88905*t88863*(t88899-c0f*log((t88864*(1.0/2.0))/(b1f*t88885+b3f* \
                   t88886+b2f*c*t88883+b4f*t88844*t88887)+1.0)*(a1f*c*t88883+1.0)*2.0)+(Aa*t88910*t88863*log((1.0/2.0) \
                   /(Aa*(b1a*t88885+b3a*t88886+b2a*c*t88883+b4a*t88844*t88887))+1.0)*(t88904*t88905-1.0)*(a1a*c*t88883+ \
                   1.0)*2.0)/d2fz0))*((ccab2*t88911*t88912*(1.0/2.0))/t88923-ccab1*t88911*t88912*1.0/(t88919*t88919)* \
                   (1.0/2.0)+ccab2*t88911*t88920*1.0/(t88923*t88923*t88923)*(t88929*t88929)*2.0-ccab2*(t88911*t88911) \
                   *t88920*t88912*t88932*(1.0/2.0)-ccab2*t88911*t88932*t88915*t88917*t88929*2.0+ccab1*gcab*t88911*t88912* \
                   t88917*1.0/(t88919*t88919*t88919)*(1.0/2.0)+(ccab3*gcab*t88911*t88912*t88917*(3.0/2.0))/t88928+ccab3* \
                   gcab*t88911*t88920*(t88924*t88924)*t88917*1.0/(t88928*t88928*t88928)*2.0-ccab3*gcab*t88911*t88920* \
                   t88915*t88924*t88936*3.0-ccab3*gcab*t88911*t88920*t88917*t88936*(t88911*t88912*(3.0/2.0)+gcab*t88911* \
                   t88912*t88917*(3.0/2.0)))+rho_b[index]*t88950*(ccaa1*t88912*t88951*1.0/(t88953*t88953)*2.0-(ccaa2* \
                   t88912*t88951*2.0)/t88957+ccaa2*(t88951*t88951)*t88954*t88990*t88967*2.0-ccaa1*gamma_bb[index]*gcaa* \
                   t88951*1.0/(t88953*t88953*t88953)*t88958*2.0-(ccaa3*gamma_bb[index]*gcaa*t88951*t88958*6.0)/t88962- \
                   ccaa2*t88912*t88951*t88954*(t88963*t88963)*1.0/(t88957*t88957*t88957)*2.0+ccaa2*gamma_bb[index]*t88912* \
                   t88951*t88963*t88967*4.0+ccaa3*gcaa*t88951*t88971*t88954*t88964*t88958*6.0+ccaa3*gamma_bb[index]*gcaa* \
                   t88951*t88954*t88964*t88958*(t88912*t88951*6.0+gamma_bb[index]*gcaa*t88951*t88958*6.0)-ccaa3*gamma_bb[index]* \
                   gcaa*t88951*1.0/(t88962*t88962*t88962)*(t88971*t88971)*t88954*t88958*2.0)+c0*pow(rho_b[index],4.0/ \
                   3.0)*(X-1.0)*((t88983/t88985-t88983*t88984*1.0/(t88985*t88985*t88985)*2.0+t88983*1.0/(t88985*t88985* \
                   t88985*t88985*t88985)*t88986)*(cxnl1*t88912*t88987*t89007*2.0-cxnl2*t88912*t88987*t89008*2.0+cxnl2* \
                   t88954*t88990*t89002*t89011*2.0-cxnl2*t88912*t88954*t88987*t89015*t89016*2.0-cxnl1*gamma_bb[index]* \
                   gx*t88958*t88987*t89010*2.0-cxnl3*gamma_bb[index]*gx*t88958*t88987*t89009*6.0+cxnl2*gamma_bb[index]* \
                   t88912*t88987*t88998*t89002*4.0+cxnl3*gx*t88954*t88958*t88987*t88999*t89006*6.0+cxnl3*gamma_bb[index]* \
                   gx*t88954*t88958*t88987*t88999*t89014-cxnl3*gamma_bb[index]*gx*t88954*t88958*t88987*t89017*t89018* \
                   2.0)+cx1*t88912*t88987*t89007*2.0-cx2*t88912*t88987*t89008*2.0+cx2*t88954*t88990*t89002*t89011*2.0- \
                   cx2*t88912*t88954*t88987*t89015*t89016*2.0-cx1*gamma_bb[index]*gx*t88958*t88987*t89010*2.0-cx3*gamma_bb[index]* \
                   gx*t88958*t88987*t89009*6.0+cx2*gamma_bb[index]*t88912*t88987*t88998*t89002*4.0+cx3*gx*t88954*t88958* \
                   t88987*t88999*t89006*6.0+cx3*gamma_bb[index]*gx*t88954*t88958*t88987*t88999*t89014-cx3*gamma_bb[index]* \
                   gx*t88954*t88958*t88987*t89017*t89018*2.0);
            } else if (rho_a[index] > cutoff_) {
                v_gamma_bb_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                double t90156 = 1.0/pow(rho_b[index],1.0/3.0);
                double t90157 = c*t90156;
                double t90158 = sqrt(t90157);
                double t90159 = pow(t90157,3.0/2.0);
                double t90160 = c*c;
                double t90161 = 1.0/pow(rho_b[index],2.0/3.0);
                double t90162 = 1.0/c0p;
                double t90163 = b1p*t90158;
                double t90164 = b3p*t90159;
                double t90165 = b4p*t90160*t90161;
                double t90166 = b2p*c*t90156;
                double t90167 = t90163+t90164+t90165+t90166;
                double t90168 = 1.0/t90167;
                double t90169 = t90162*t90168*(1.0/2.0);
                double t90170 = t90169+1.0;
                double t90171 = log(t90170);
                double t90172 = a1p*c*t90156;
                double t90173 = t90172+1.0;
                double t90174 = gcaa*gcaa;
                double t90175 = 1.0/pow(rho_b[index],1.6E1/3.0);
                double t90176 = 1.0/pow(rho_b[index],8.0/3.0);
                double t90177 = gamma_bb[index]*gcaa*t90176;
                double t90178 = t90177+1.0;
                double t90179 = gamma_bb[index]*gamma_bb[index];
                double t90180 = gamma_bb[index]*gcaa*t90176*2.0;
                double t90181 = t90174*t90175*t90179;
                double t90182 = t90180+t90181+1.0;
                double t90183 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]);
                double t90184 = gamma_bb[index]*gcaa*t90176*3.0;
                double t90185 = gamma_bb[index]*gcaa*t90174*t90183*t90179;
                double t90186 = t90174*t90175*t90179*3.0;
                double t90187 = t90184+t90185+t90186+1.0;
                double t90190 = gcaa*t90176*2.0;
                double t90191 = gamma_bb[index]*t90174*t90175*2.0;
                double t90188 = t90190+t90191;
                double t90189 = 1.0/(t90187*t90187);
                double t90192 = 1.0/(t90182*t90182);
                double t90193 = gcaa*t90176*3.0;
                double t90194 = gamma_bb[index]*t90174*t90175*6.0;
                double t90195 = gcaa*t90174*t90183*t90179*3.0;
                double t90196 = t90193+t90194+t90195;
                double t90197 = pow(rho_b[index],5.0/3.0);
                double t90198 = C_k*t90197;
                double t90207 = tau_a[index]*1.0E20;
                double t90199 = -t90207+t90198;
                double t90200 = ( (t90199 > 0.0) ?  1.0 : 0.0 ) ;
                double t90201 = t90200*1.0E20;
                double t90202 = 1.0/tau_b[index];
                double t90203 = tau_b[index]*1.0E20;
                double t90204 = t90203-t90198;
                double t90205 = ( (t90204 > 0.0) ?  1.0 : 0.0 ) ;
                double t90206 = C_k*t90202*t90205*t90197;
                double t90208 = t90201+t90206-1.0;
                double t90209 = t90208*t90208;
                double t90210 = t90201+t90206+1.0;
                double t90211 = t90209*t90209;
                double t90212 = gx*gx;
                double t90213 = gamma_bb[index]*gx*t90176;
                double t90214 = t90213+1.0;
                double t90215 = 1.0/pow(rho_b[index],3.2E1/3.0);
                double t90216 = gamma_bb[index]*gx*t90176*2.0;
                double t90217 = t90212*t90175*t90179;
                double t90218 = t90216+t90217+1.0;
                double t90219 = gamma_bb[index]*gx*t90176*3.0;
                double t90220 = gamma_bb[index]*gx*t90212*t90183*t90179;
                double t90221 = t90212*t90175*t90179*3.0;
                double t90222 = t90220+t90221+t90219+1.0;
                double t90225 = gx*t90176*2.0;
                double t90226 = gamma_bb[index]*t90212*t90175*2.0;
                double t90223 = t90225+t90226;
                double t90224 = 1.0/(t90222*t90222);
                double t90227 = 1.0/(t90218*t90218);
                double t90228 = gx*t90176*3.0;
                double t90229 = gamma_bb[index]*t90212*t90175*6.0;
                double t90230 = gx*t90212*t90183*t90179*3.0;
                double t90231 = t90230+t90228+t90229;
                double t90232 = 1.0/(t90214*t90214);
                double t90233 = 1.0/t90218;
                double t90234 = 1.0/t90222;
                double t90235 = 1.0/(t90214*t90214*t90214);
                double t90236 = t90212*t90212;
                double t90237 = t90212*t90175*6.0;
                double t90238 = gamma_bb[index]*gx*t90212*t90183*6.0;
                double t90239 = t90237+t90238;
                double t90240 = t90223*t90223;
                double t90241 = 1.0/(t90218*t90218*t90218);
                double t90242 = t90231*t90231;
                double t90243 = 1.0/(t90222*t90222*t90222);
                v_gamma_bb_gamma_bb_[index] = -rho_b[index]*(((pow(2.0,1.0/3.0)*2.0-2.0)*(c0f*log((1.0/2.0)/(c0f* \
                   (b1f*t90158+b3f*t90159+b2f*c*t90156+b4f*t90160*t90161))+1.0)*(a1f*c*t90156+1.0)*2.0-c0p*t90171*t90173* \
                   2.0))/(two_13*2.0-2.0)+c0p*t90171*t90173*2.0)*((ccaa2*t90174*t90175*2.0)/t90182-ccaa1*t90174*t90175* \
                   1.0/(t90178*t90178)*2.0-ccaa2*t90215*(t90174*t90174)*t90192*t90179*2.0+ccaa1*gamma_bb[index]*gcaa* \
                   t90174*t90183*1.0/(t90178*t90178*t90178)*2.0+(ccaa3*gamma_bb[index]*gcaa*t90174*t90183*6.0)/t90187+ \
                   ccaa2*1.0/(t90182*t90182*t90182)*t90174*t90175*t90179*(t90188*t90188)*2.0-ccaa2*gamma_bb[index]*t90174* \
                   t90192*t90175*t90188*4.0-ccaa3*gcaa*t90174*t90183*t90196*t90179*t90189*6.0-ccaa3*gamma_bb[index]*gcaa* \
                   t90174*t90183*t90179*t90189*(t90174*t90175*6.0+gamma_bb[index]*gcaa*t90174*t90183*6.0)+ccaa3*gamma_bb[index]* \
                   gcaa*t90174*t90183*1.0/(t90187*t90187*t90187)*(t90196*t90196)*t90179*2.0)+c0*pow(rho_b[index],4.0/ \
                   3.0)*(X-1.0)*((t90208/t90210+1.0/(t90210*t90210*t90210*t90210*t90210)*t90211*t90208-1.0/(t90210*t90210* \
                   t90210)*t90208*t90209*2.0)*(cxnl1*t90212*t90232*t90175*2.0-cxnl2*t90212*t90233*t90175*2.0+cxnl2*t90215* \
                   t90227*t90236*t90179*2.0-cxnl2*t90212*t90240*t90241*t90175*t90179*2.0-cxnl1*gamma_bb[index]*gx*t90212* \
                   t90235*t90183*2.0-cxnl3*gamma_bb[index]*gx*t90212*t90234*t90183*6.0+cxnl2*gamma_bb[index]*t90212*t90223* \
                   t90227*t90175*4.0+cxnl3*gx*t90212*t90231*t90224*t90183*t90179*6.0-cxnl3*gamma_bb[index]*gx*t90212* \
                   t90242*t90243*t90183*t90179*2.0+cxnl3*gamma_bb[index]*gx*t90212*t90224*t90183*t90239*t90179)+cx1*t90212* \
                   t90232*t90175*2.0-cx2*t90212*t90233*t90175*2.0+cx2*t90215*t90227*t90236*t90179*2.0-cx2*t90212*t90240* \
                   t90241*t90175*t90179*2.0-cx1*gamma_bb[index]*gx*t90212*t90235*t90183*2.0-cx3*gamma_bb[index]*gx*t90212* \
                   t90234*t90183*6.0+cx2*gamma_bb[index]*t90212*t90223*t90227*t90175*4.0+cx3*gx*t90212*t90231*t90224* \
                   t90183*t90179*6.0-cx3*gamma_bb[index]*gx*t90212*t90242*t90243*t90183*t90179*2.0+cx3*gamma_bb[index]* \
                   gx*t90212*t90224*t90183*t90239*t90179);
            } else {
                v_gamma_bb_gamma_bb_[index] = 0.0;
            }

        }
        if (is_meta_) {

            //V_rho_a_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t89020 = 1.0/pow(rho_a[index],8.0/3.0);
                double t89021 = gamma_aa[index]*gamma_aa[index];
                double t89022 = gx*gx;
                double t89023 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t89024 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t89025 = pow(rho_a[index],5.0/3.0);
                double t89026 = C_k*t89025;
                double t89027 = tau_a[index]*1.0E20;
                double t89028 = -t89026+t89027;
                double t89029 = 1.0/tau_a[index];
                double t89030 = 0.0 ;
                double t89031 = C_k*C_k;
                double t89032 = pow(rho_a[index],7.0/3.0);
                double t89033 = pow(rho_a[index],2.0/3.0);
                double t89034 = 0.0 ;
                double t89035 = 1.0/(tau_a[index]*tau_a[index]);
                double t89036 = ( (t89028 > 0.0) ?  1.0 : 0.0 ) ;
                double t89037 = C_k*t89025*t89036*t89029;
                double t89038 = t89026-t89027;
                double t89039 = ( (t89038 > 0.0) ?  1.0 : 0.0 ) ;
                double t89040 = t89039*1.0E20;
                double t89041 = t89040+t89037+1.0;
                double t89042 = 1.0/(t89041*t89041);
                double t89043 = C_k*t89030*t89033*(5.0E40/3.0);
                double t89044 = t89031*t89032*t89034*t89035*(5.0/3.0);
                double t89045 = C_k*t89033*t89034*t89029*(5.0E20/3.0);
                double t89048 = t89030*t89031*t89032*t89029*(5.0E20/3.0);
                double t89049 = C_k*t89033*t89035*t89036*(5.0/3.0);
                double t89046 = t89043+t89044+t89045-t89048-t89049;
                double t89047 = t89040+t89037-1.0;
                double t89050 = t89047*t89047;
                double t89051 = t89050*t89050;
                double t89052 = t89034*1.0E40;
                double t89053 = C_k*t89025*t89035*t89036;
                double t89059 = C_k*t89025*t89034*t89029*1.0E20;
                double t89054 = t89052+t89053-t89059;
                double t89055 = C_k*t89033*t89034*(5.0E20/3.0);
                double t89056 = C_k*t89033*t89036*t89029*(5.0/3.0);
                double t89060 = t89031*t89032*t89034*t89029*(5.0/3.0);
                double t89057 = -t89060+t89055+t89056;
                double t89058 = 1.0/(t89041*t89041*t89041);
                double t89061 = 1.0/(t89041*t89041*t89041*t89041);
                double t89062 = 1.0/(t89041*t89041*t89041*t89041*t89041);
                double t89063 = 1.0/(t89041*t89041*t89041*t89041*t89041*t89041);
                double t89064 = gamma_aa[index]*gx*t89020;
                double t89065 = t89064+1.0;
                double t89066 = 1.0/t89065;
                double t89067 = gamma_aa[index]*gx*t89020*3.0;
                double t89068 = gamma_aa[index]*gx*t89021*t89022*t89023;
                double t89069 = t89021*t89022*t89024*3.0;
                double t89070 = t89067+t89068+t89069+1.0;
                double t89071 = 1.0/t89070;
                double t89072 = gamma_aa[index]*gx*t89020*2.0;
                double t89073 = t89021*t89022*t89024;
                double t89074 = t89072+t89073+1.0;
                double t89075 = 1.0/t89074;
                double t89076 = 1.0/pow(rho_a[index],1.9E1/3.0);
                double t89077 = 1.0/pow(rho_a[index],1.1E1/3.0);
                double t89078 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]*rho_a[index]);
                double t89079 = cxnl1*gamma_aa[index]*gx*t89020*t89066;
                double t89080 = cxnl3*gamma_aa[index]*gx*t89021*t89022*t89023*t89071;
                double t89081 = cxnl2*t89021*t89022*t89024*t89075;
                double t89082 = cxnl0+t89080+t89081+t89079;
                double t89083 = 1.0/t89041;
                double t89084 = t89054*t89083;
                double t89085 = t89050*t89061*t89054*t89047*6.0;
                double t89086 = t89051*t89062*t89054*5.0;
                double t89087 = t89084+t89085+t89086-t89042*t89054*t89047-t89050*t89054*t89058*6.0-t89051*t89054* \
                   t89063*t89047*5.0;
                v_rho_a_tau_a_[index] = -(c0*pow(rho_a[index],4.0/3.0)*(t89082*(t89046*t89083+t89051*t89062*t89046* \
                   5.0+t89042*t89054*t89057*2.0-t89042*t89046*t89047-t89050*t89046*t89058*6.0-t89050*t89061*t89054*t89057* \
                   3.6E1+t89050*t89061*t89046*t89047*6.0+t89051*t89054*t89063*t89057*5.0E1-t89051*t89063*t89046*t89047* \
                   5.0+t89054*t89047*t89057*t89058*1.0E1-1.0/(t89041*t89041*t89041*t89041*t89041*t89041*t89041)*t89051* \
                   t89054*t89047*t89057*3.0E1+t89050*t89062*t89054*t89047*t89057*4.0)+t89087*(cxnl1*gamma_aa[index]*gx* \
                   t89066*t89077*(8.0/3.0)+cxnl2*t89021*t89022*t89075*t89076*(1.6E1/3.0)-cxnl1*t89021*t89022*1.0/(t89065* \
                   t89065)*t89076*(8.0/3.0)-cxnl2*t89021*t89022*t89024*1.0/(t89074*t89074)*(gamma_aa[index]*gx*t89077* \
                   (1.6E1/3.0)+t89021*t89022*t89076*(1.6E1/3.0))+cxnl3*gamma_aa[index]*gx*t89021*t89022*t89071*t89078* \
                   8.0-cxnl3*gamma_aa[index]*gx*t89021*t89022*t89023*1.0/(t89070*t89070)*(gamma_aa[index]*gx*t89077*8.0+ \
                   t89021*t89022*t89076*1.6E1+gamma_aa[index]*gx*t89021*t89022*t89078*8.0)))-c0*pow(rho_a[index],1.0/ \
                   3.0)*t89082*t89087*(4.0/3.0))*(X-1.0);
            } else if (rho_a[index] > cutoff_) {
                double t91297 = 1.0/pow(rho_a[index],8.0/3.0);
                double t91298 = gamma_aa[index]*gamma_aa[index];
                double t91299 = gx*gx;
                double t91300 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t91301 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t91302 = pow(rho_a[index],5.0/3.0);
                double t91303 = C_k*t91302;
                double t91304 = tau_a[index]*1.0E20;
                double t91305 = -t91303+t91304;
                double t91306 = 1.0/tau_a[index];
                double t91307 = 0.0 ;
                double t91308 = C_k*C_k;
                double t91309 = pow(rho_a[index],7.0/3.0);
                double t91310 = pow(rho_a[index],2.0/3.0);
                double t91311 = 0.0 ;
                double t91312 = 1.0/(tau_a[index]*tau_a[index]);
                double t91313 = ( (t91305 > 0.0) ?  1.0 : 0.0 ) ;
                double t91314 = C_k*t91302*t91313*t91306;
                double t91315 = t91303-t91304;
                double t91316 = ( (t91315 > 0.0) ?  1.0 : 0.0 ) ;
                double t91317 = t91316*1.0E20;
                double t91318 = t91314+t91317+1.0;
                double t91319 = 1.0/(t91318*t91318);
                double t91320 = C_k*t91310*t91307*(5.0E40/3.0);
                double t91321 = t91311*t91312*t91308*t91309*(5.0/3.0);
                double t91322 = C_k*t91310*t91311*t91306*(5.0E20/3.0);
                double t91325 = t91306*t91307*t91308*t91309*(5.0E20/3.0);
                double t91326 = C_k*t91310*t91312*t91313*(5.0/3.0);
                double t91323 = t91320+t91321+t91322-t91325-t91326;
                double t91324 = t91314+t91317-1.0;
                double t91327 = t91324*t91324;
                double t91328 = t91327*t91327;
                double t91329 = t91311*1.0E40;
                double t91330 = C_k*t91302*t91312*t91313;
                double t91336 = C_k*t91302*t91311*t91306*1.0E20;
                double t91331 = t91330-t91336+t91329;
                double t91332 = C_k*t91310*t91311*(5.0E20/3.0);
                double t91333 = C_k*t91310*t91313*t91306*(5.0/3.0);
                double t91337 = t91311*t91306*t91308*t91309*(5.0/3.0);
                double t91334 = t91332+t91333-t91337;
                double t91335 = 1.0/(t91318*t91318*t91318);
                double t91338 = 1.0/(t91318*t91318*t91318*t91318);
                double t91339 = 1.0/(t91318*t91318*t91318*t91318*t91318);
                double t91340 = 1.0/(t91318*t91318*t91318*t91318*t91318*t91318);
                double t91341 = gamma_aa[index]*gx*t91297;
                double t91342 = t91341+1.0;
                double t91343 = 1.0/t91342;
                double t91344 = gamma_aa[index]*gx*t91297*3.0;
                double t91345 = gamma_aa[index]*gx*t91300*t91298*t91299;
                double t91346 = t91301*t91298*t91299*3.0;
                double t91347 = t91344+t91345+t91346+1.0;
                double t91348 = 1.0/t91347;
                double t91349 = gamma_aa[index]*gx*t91297*2.0;
                double t91350 = t91301*t91298*t91299;
                double t91351 = t91350+t91349+1.0;
                double t91352 = 1.0/t91351;
                double t91353 = 1.0/pow(rho_a[index],1.9E1/3.0);
                double t91354 = 1.0/pow(rho_a[index],1.1E1/3.0);
                double t91355 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]*rho_a[index]);
                double t91356 = 1.0/t91318;
                double t91357 = X-1.0;
                double t91358 = cxnl1*gamma_aa[index]*gx*t91343*t91297;
                double t91359 = cxnl3*gamma_aa[index]*gx*t91300*t91348*t91298*t91299;
                double t91360 = cxnl2*t91301*t91352*t91298*t91299;
                double t91361 = cxnl0+t91360+t91358+t91359;
                double t91362 = t91331*t91356;
                double t91363 = t91331*t91324*t91327*t91338*6.0;
                double t91364 = t91331*t91328*t91339*5.0;
                double t91365 = t91362+t91363+t91364-t91331*t91324*t91319-t91331*t91335*t91327*6.0-t91331*t91340* \
                   t91324*t91328*5.0;
                v_rho_a_tau_a_[index] = -c0*pow(rho_a[index],4.0/3.0)*t91357*(t91361*(t91323*t91356+t91331*t91334* \
                   t91319*2.0-t91323*t91324*t91319-t91323*t91335*t91327*6.0+t91323*t91328*t91339*5.0+t91331*t91340*t91334* \
                   t91328*5.0E1+t91331*t91324*t91334*t91335*1.0E1-t91340*t91323*t91324*t91328*5.0-t91331*t91334*t91327* \
                   t91338*3.6E1+t91323*t91324*t91327*t91338*6.0-t91331*t91324*t91334*1.0/(t91318*t91318*t91318*t91318* \
                   t91318*t91318*t91318)*t91328*3.0E1+t91331*t91324*t91334*t91327*t91339*4.0)+t91365*(cxnl1*gamma_aa[index]* \
                   gx*t91343*t91354*(8.0/3.0)+cxnl2*t91352*t91353*t91298*t91299*(1.6E1/3.0)-cxnl1*1.0/(t91342*t91342) \
                   *t91353*t91298*t91299*(8.0/3.0)-cxnl2*t91301*1.0/(t91351*t91351)*t91298*t91299*(gamma_aa[index]*gx* \
                   t91354*(1.6E1/3.0)+t91353*t91298*t91299*(1.6E1/3.0))+cxnl3*gamma_aa[index]*gx*t91355*t91348*t91298* \
                   t91299*8.0-cxnl3*gamma_aa[index]*gx*t91300*1.0/(t91347*t91347)*t91298*t91299*(gamma_aa[index]*gx*t91354* \
                   8.0+t91353*t91298*t91299*1.6E1+gamma_aa[index]*gx*t91355*t91298*t91299*8.0)))+c0*pow(rho_a[index],1.0/ \
                   3.0)*t91361*t91365*t91357*(4.0/3.0);
            } else if (rho_b[index] > cutoff_) {
                v_rho_a_tau_a_[index] = 0.0;
            } else {
                v_rho_a_tau_a_[index] = 0.0;
            }

            //V_rho_a_tau_b
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_a_tau_b_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_a_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_a_tau_b_[index] = 0.0;
            } else {
                v_rho_a_tau_b_[index] = 0.0;
            }

            //V_rho_b_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t89090 = gamma_bb[index]*gamma_bb[index];
                double t89091 = gx*gx;
                double t89092 = 1.0/pow(rho_b[index],8.0/3.0);
                double t89093 = 1.0/pow(rho_b[index],1.6E1/3.0);
                double t89094 = 1.0/pow(rho_b[index],1.9E1/3.0);
                double t89095 = gamma_bb[index]*gx*t89092;
                double t89096 = t89095+1.0;
                double t89097 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]);
                double t89098 = 1.0/pow(rho_b[index],1.1E1/3.0);
                double t89099 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]*rho_b[index]);
                double t89100 = gamma_bb[index]*gx*t89092*3.0;
                double t89101 = gamma_bb[index]*gx*t89090*t89091*t89097;
                double t89102 = t89090*t89091*t89093*3.0;
                double t89103 = t89100+t89101+t89102+1.0;
                double t89104 = gamma_bb[index]*gx*t89092*2.0;
                double t89105 = t89090*t89091*t89093;
                double t89106 = t89104+t89105+1.0;
                double t89107 = tau_a[index]*1.0E20;
                double t89108 = pow(rho_b[index],5.0/3.0);
                double t89109 = C_k*t89108;
                double t89110 = -t89107+t89109;
                double t89111 = ( (t89110 > 0.0) ?  1.0 : 0.0 ) ;
                double t89112 = t89111*1.0E20;
                double t89113 = 1.0/tau_b[index];
                double t89114 = tau_b[index]*1.0E20;
                double t89115 = t89114-t89109;
                double t89116 = ( (t89115 > 0.0) ?  1.0 : 0.0 ) ;
                double t89117 = C_k*t89113*t89116*t89108;
                double t89118 = t89112+t89117-1.0;
                double t89119 = t89112+t89117+1.0;
                double t89120 = t89107-t89109;
                double t89121 = 0.0 ;
                double t89122 = t89118*t89118;
                double t89123 = t89122*t89122;
                double t89124 = 1.0/t89096;
                double t89125 = 1.0/t89103;
                double t89126 = 1.0/t89106;
                double t89127 = pow(rho_b[index],2.0/3.0);
                double t89128 = 1.0/(t89119*t89119);
                double t89129 = C_k*t89121*t89127*(5.0E20/3.0);
                double t89130 = C_k*C_k;
                double t89131 = pow(rho_b[index],7.0/3.0);
                double t89132 = 0.0 ;
                double t89133 = C_k*t89113*t89116*t89127*(5.0/3.0);
                double t89136 = t89130*t89113*t89131*t89132*(5.0/3.0);
                double t89134 = t89133-t89136+t89129;
                double t89135 = 1.0/(t89119*t89119*t89119*t89119);
                double t89137 = 1.0/(t89119*t89119*t89119*t89119*t89119);
                double t89138 = 1.0/(t89119*t89119*t89119*t89119*t89119*t89119);
                double t89139 = 1.0/t89119;
                double t89140 = 1.0/(t89119*t89119*t89119);
                double t89141 = 0.0 ;
                double t89142 = cxnl1*gamma_bb[index]*gx*t89124*t89092;
                double t89143 = cxnl3*gamma_bb[index]*gx*t89125*t89090*t89091*t89097;
                double t89144 = cxnl2*t89090*t89126*t89091*t89093;
                double t89145 = cxnl0+t89142+t89143+t89144;
                double t89146 = t89121*t89122*t89135*t89118*6.0E40;
                double t89147 = t89121*t89123*t89137*5.0E40;
                double t89148 = t89121*t89139*1.0E40;
                double t89149 = t89146+t89147+t89148-t89121*t89122*t89140*6.0E40-t89121*t89118*t89128*1.0E40-t89121* \
                   t89123*t89118*t89138*5.0E40;
                v_rho_b_tau_a_[index] = -(c0*pow(rho_b[index],4.0/3.0)*(t89145*(t89121*t89134*t89128*2.0E40-t89121* \
                   t89122*t89134*t89135*3.6E41+t89121*t89140*t89134*t89118*1.0E41+t89121*t89123*t89134*t89138*5.0E41+ \
                   C_k*t89141*t89127*t89139*(5.0E40/3.0)-t89121*t89123*t89134*t89118*1.0/(t89119*t89119*t89119*t89119* \
                   t89119*t89119*t89119)*3.0E41-C_k*t89122*t89140*t89141*t89127*1.0E41+C_k*t89123*t89141*t89127*t89137* \
                   (2.5E41/3.0)-C_k*t89141*t89118*t89127*t89128*(5.0E40/3.0)+t89121*t89122*t89134*t89118*t89137*4.0E40+ \
                   C_k*t89122*t89141*t89135*t89118*t89127*1.0E41-C_k*t89123*t89141*t89118*t89127*t89138*(2.5E41/3.0)) \
                   +t89149*(cxnl1*gamma_bb[index]*gx*t89124*t89098*(8.0/3.0)+cxnl2*t89090*t89126*t89091*t89094*(1.6E1/ \
                   3.0)-cxnl1*t89090*t89091*t89094*1.0/(t89096*t89096)*(8.0/3.0)-cxnl2*1.0/(t89106*t89106)*t89090*t89091* \
                   t89093*(gamma_bb[index]*gx*t89098*(1.6E1/3.0)+t89090*t89091*t89094*(1.6E1/3.0))+cxnl3*gamma_bb[index]* \
                   gx*t89125*t89090*t89091*t89099*8.0-cxnl3*gamma_bb[index]*gx*1.0/(t89103*t89103)*t89090*t89091*t89097* \
                   (gamma_bb[index]*gx*t89098*8.0+t89090*t89091*t89094*1.6E1+gamma_bb[index]*gx*t89090*t89091*t89099* \
                   8.0)))-c0*pow(rho_b[index],1.0/3.0)*t89145*t89149*(4.0/3.0))*(X-1.0);
            } else if (rho_a[index] > cutoff_) {
                v_rho_b_tau_a_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                double t90247 = gamma_bb[index]*gamma_bb[index];
                double t90248 = gx*gx;
                double t90249 = 1.0/pow(rho_b[index],8.0/3.0);
                double t90250 = 1.0/pow(rho_b[index],1.6E1/3.0);
                double t90251 = 1.0/pow(rho_b[index],1.9E1/3.0);
                double t90252 = gamma_bb[index]*gx*t90249;
                double t90253 = t90252+1.0;
                double t90254 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]);
                double t90255 = 1.0/pow(rho_b[index],1.1E1/3.0);
                double t90256 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]*rho_b[index]);
                double t90257 = gamma_bb[index]*gx*t90249*3.0;
                double t90258 = gamma_bb[index]*gx*t90254*t90247*t90248;
                double t90259 = t90250*t90247*t90248*3.0;
                double t90260 = t90257+t90258+t90259+1.0;
                double t90261 = gamma_bb[index]*gx*t90249*2.0;
                double t90262 = t90250*t90247*t90248;
                double t90263 = t90261+t90262+1.0;
                double t90264 = tau_a[index]*1.0E20;
                double t90265 = pow(rho_b[index],5.0/3.0);
                double t90266 = C_k*t90265;
                double t90267 = -t90264+t90266;
                double t90268 = ( (t90267 > 0.0) ?  1.0 : 0.0 ) ;
                double t90269 = t90268*1.0E20;
                double t90270 = 1.0/tau_b[index];
                double t90271 = tau_b[index]*1.0E20;
                double t90272 = t90271-t90266;
                double t90273 = ( (t90272 > 0.0) ?  1.0 : 0.0 ) ;
                double t90274 = C_k*t90270*t90273*t90265;
                double t90275 = t90274+t90269-1.0;
                double t90276 = t90274+t90269+1.0;
                double t90277 = t90264-t90266;
                double t90278 = 0.0 ;
                double t90279 = t90275*t90275;
                double t90280 = t90279*t90279;
                double t90281 = 1.0/t90253;
                double t90282 = 1.0/t90260;
                double t90283 = 1.0/t90263;
                double t90284 = pow(rho_b[index],2.0/3.0);
                double t90285 = 1.0/(t90276*t90276);
                double t90286 = C_k*t90284*t90278*(5.0E20/3.0);
                double t90287 = C_k*C_k;
                double t90288 = pow(rho_b[index],7.0/3.0);
                double t90289 = 0.0 ;
                double t90290 = C_k*t90270*t90273*t90284*(5.0/3.0);
                double t90293 = t90270*t90287*t90288*t90289*(5.0/3.0);
                double t90291 = t90290-t90293+t90286;
                double t90292 = 1.0/(t90276*t90276*t90276*t90276);
                double t90294 = 1.0/(t90276*t90276*t90276*t90276*t90276);
                double t90295 = 1.0/(t90276*t90276*t90276*t90276*t90276*t90276);
                double t90296 = 1.0/t90276;
                double t90297 = 1.0/(t90276*t90276*t90276);
                double t90298 = 0.0 ;
                double t90299 = X-1.0;
                double t90300 = cxnl1*gamma_bb[index]*gx*t90281*t90249;
                double t90301 = cxnl3*gamma_bb[index]*gx*t90254*t90282*t90247*t90248;
                double t90302 = cxnl2*t90250*t90247*t90283*t90248;
                double t90303 = cxnl0+t90300+t90301+t90302;
                double t90304 = t90278*t90296*1.0E40;
                double t90305 = t90292*t90275*t90278*t90279*6.0E40;
                double t90306 = t90280*t90294*t90278*5.0E40;
                double t90307 = t90304+t90305+t90306-t90275*t90285*t90278*1.0E40-t90278*t90279*t90297*6.0E40-t90280* \
                   t90275*t90295*t90278*5.0E40;
                v_rho_b_tau_a_[index] = -c0*pow(rho_b[index],4.0/3.0)*t90299*(t90303*(t90291*t90285*t90278*2.0E40+ \
                   t90280*t90291*t90295*t90278*5.0E41-t90291*t90292*t90278*t90279*3.6E41+t90291*t90275*t90278*t90297* \
                   1.0E41+C_k*t90284*t90296*t90298*(5.0E40/3.0)-t90280*t90291*t90275*1.0/(t90276*t90276*t90276*t90276* \
                   t90276*t90276*t90276)*t90278*3.0E41+C_k*t90280*t90284*t90294*t90298*(2.5E41/3.0)-C_k*t90275*t90284* \
                   t90285*t90298*(5.0E40/3.0)-C_k*t90284*t90279*t90297*t90298*1.0E41+t90291*t90275*t90294*t90278*t90279* \
                   4.0E40-C_k*t90280*t90275*t90284*t90295*t90298*(2.5E41/3.0)+C_k*t90292*t90275*t90284*t90279*t90298* \
                   1.0E41)+t90307*(cxnl1*gamma_bb[index]*gx*t90281*t90255*(8.0/3.0)+cxnl2*t90251*t90247*t90283*t90248* \
                   (1.6E1/3.0)-cxnl1*t90251*1.0/(t90253*t90253)*t90247*t90248*(8.0/3.0)-cxnl2*t90250*1.0/(t90263*t90263) \
                   *t90247*t90248*(gamma_bb[index]*gx*t90255*(1.6E1/3.0)+t90251*t90247*t90248*(1.6E1/3.0))+cxnl3*gamma_bb[index]* \
                   gx*t90282*t90247*t90256*t90248*8.0-cxnl3*gamma_bb[index]*gx*1.0/(t90260*t90260)*t90254*t90247*t90248* \
                   (gamma_bb[index]*gx*t90255*8.0+t90251*t90247*t90248*1.6E1+gamma_bb[index]*gx*t90247*t90256*t90248* \
                   8.0)))+c0*pow(rho_b[index],1.0/3.0)*t90303*t90307*t90299*(4.0/3.0);
            } else {
                v_rho_b_tau_a_[index] = 0.0;
            }

            //V_rho_b_tau_b
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t89151 = 1.0/pow(rho_b[index],8.0/3.0);
                double t89152 = gamma_bb[index]*gamma_bb[index];
                double t89153 = gx*gx;
                double t89154 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]);
                double t89155 = 1.0/pow(rho_b[index],1.6E1/3.0);
                double t89156 = pow(rho_b[index],5.0/3.0);
                double t89157 = C_k*t89156;
                double t89158 = 1.0/tau_b[index];
                double t89159 = tau_b[index]*1.0E20;
                double t89160 = -t89157+t89159;
                double t89161 = C_k*C_k;
                double t89162 = pow(rho_b[index],7.0/3.0);
                double t89163 = 0.0 ;
                double t89164 = pow(rho_b[index],2.0/3.0);
                double t89165 = 1.0/(tau_b[index]*tau_b[index]);
                double t89166 = ( (t89160 > 0.0) ?  1.0 : 0.0 ) ;
                double t89171 = tau_a[index]*1.0E20;
                double t89167 = -t89171+t89157;
                double t89168 = ( (t89167 > 0.0) ?  1.0 : 0.0 ) ;
                double t89169 = t89168*1.0E20;
                double t89170 = C_k*t89156*t89166*t89158;
                double t89172 = t89170+t89169+1.0;
                double t89173 = 0.0 ;
                double t89174 = t89161*t89162*t89163*t89165*(5.0/3.0);
                double t89175 = C_k*t89163*t89164*t89158*(5.0E20/3.0);
                double t89176 = 1.0/(t89172*t89172);
                double t89177 = t89170+t89169-1.0;
                double t89178 = t89177*t89177;
                double t89180 = t89161*t89162*t89173*t89158*(5.0E20/3.0);
                double t89181 = C_k*t89164*t89165*t89166*(5.0/3.0);
                double t89179 = -t89180-t89181+t89174+t89175;
                double t89182 = t89178*t89178;
                double t89183 = t89180+t89181-t89174-t89175;
                double t89184 = C_k*t89163*t89156*t89158*1.0E20;
                double t89192 = C_k*t89156*t89165*t89166;
                double t89185 = -t89192+t89184;
                double t89186 = t89171-t89157;
                double t89187 = 0.0 ;
                double t89188 = C_k*t89164*t89187*(5.0E20/3.0);
                double t89189 = C_k*t89164*t89166*t89158*(5.0/3.0);
                double t89193 = t89161*t89162*t89163*t89158*(5.0/3.0);
                double t89190 = -t89193+t89188+t89189;
                double t89191 = 1.0/(t89172*t89172*t89172);
                double t89194 = 1.0/(t89172*t89172*t89172*t89172);
                double t89195 = 1.0/(t89172*t89172*t89172*t89172*t89172);
                double t89196 = 1.0/(t89172*t89172*t89172*t89172*t89172*t89172);
                double t89197 = 1.0/t89172;
                double t89198 = gamma_bb[index]*gx*t89151;
                double t89199 = t89198+1.0;
                double t89200 = 1.0/t89199;
                double t89201 = gamma_bb[index]*gx*t89151*3.0;
                double t89202 = gamma_bb[index]*gx*t89152*t89153*t89154;
                double t89203 = t89152*t89153*t89155*3.0;
                double t89204 = t89201+t89202+t89203+1.0;
                double t89205 = 1.0/t89204;
                double t89206 = gamma_bb[index]*gx*t89151*2.0;
                double t89207 = t89152*t89153*t89155;
                double t89208 = t89206+t89207+1.0;
                double t89209 = 1.0/t89208;
                double t89210 = 1.0/pow(rho_b[index],1.9E1/3.0);
                double t89211 = 1.0/pow(rho_b[index],1.1E1/3.0);
                double t89212 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]*rho_b[index]);
                double t89213 = cxnl1*gamma_bb[index]*gx*t89200*t89151;
                double t89214 = cxnl3*gamma_bb[index]*gx*t89205*t89152*t89153*t89154;
                double t89215 = cxnl2*t89152*t89153*t89155*t89209;
                double t89216 = cxnl0+t89213+t89214+t89215;
                double t89217 = t89185*t89197;
                double t89218 = t89185*t89194*t89177*t89178*6.0;
                double t89219 = t89182*t89185*t89195*5.0;
                double t89220 = t89217+t89218+t89219-t89191*t89185*t89178*6.0-t89176*t89185*t89177-t89182*t89185* \
                   t89177*t89196*5.0;
                v_rho_b_tau_b_[index] = (c0*pow(rho_b[index],4.0/3.0)*(t89216*(-t89179*t89197+t89190*t89176*t89185* \
                   2.0+t89182*t89183*t89195*5.0+t89191*t89178*t89179*6.0+t89176*t89177*t89179+t89190*t89191*t89185*t89177* \
                   1.0E1+t89190*t89182*t89185*t89196*5.0E1-t89190*t89185*t89194*t89178*3.6E1-t89182*t89183*t89177*t89196* \
                   5.0-t89194*t89177*t89178*t89179*6.0-1.0/(t89172*t89172*t89172*t89172*t89172*t89172*t89172)*t89190* \
                   t89182*t89185*t89177*3.0E1+t89190*t89185*t89177*t89195*t89178*4.0)+t89220*(cxnl1*gamma_bb[index]*gx* \
                   t89200*t89211*(8.0/3.0)+cxnl2*t89210*t89152*t89153*t89209*(1.6E1/3.0)-cxnl1*t89210*t89152*t89153*1.0/ \
                   (t89199*t89199)*(8.0/3.0)-cxnl2*t89152*t89153*1.0/(t89208*t89208)*t89155*(gamma_bb[index]*gx*t89211* \
                   (1.6E1/3.0)+t89210*t89152*t89153*(1.6E1/3.0))+cxnl3*gamma_bb[index]*gx*t89212*t89205*t89152*t89153* \
                   8.0-cxnl3*gamma_bb[index]*gx*1.0/(t89204*t89204)*t89152*t89153*t89154*(gamma_bb[index]*gx*t89211*8.0+ \
                   t89210*t89152*t89153*1.6E1+gamma_bb[index]*gx*t89212*t89152*t89153*8.0)))-c0*pow(rho_b[index],1.0/ \
                   3.0)*t89220*t89216*(4.0/3.0))*(X-1.0);
            } else if (rho_a[index] > cutoff_) {
                v_rho_b_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                double t90309 = 1.0/pow(rho_b[index],8.0/3.0);
                double t90310 = gamma_bb[index]*gamma_bb[index];
                double t90311 = gx*gx;
                double t90312 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]);
                double t90313 = 1.0/pow(rho_b[index],1.6E1/3.0);
                double t90314 = pow(rho_b[index],5.0/3.0);
                double t90315 = C_k*t90314;
                double t90316 = 1.0/tau_b[index];
                double t90317 = tau_b[index]*1.0E20;
                double t90318 = -t90315+t90317;
                double t90319 = C_k*C_k;
                double t90320 = pow(rho_b[index],7.0/3.0);
                double t90321 = 0.0 ;
                double t90322 = pow(rho_b[index],2.0/3.0);
                double t90323 = 1.0/(tau_b[index]*tau_b[index]);
                double t90324 = ( (t90318 > 0.0) ?  1.0 : 0.0 ) ;
                double t90329 = tau_a[index]*1.0E20;
                double t90325 = t90315-t90329;
                double t90326 = ( (t90325 > 0.0) ?  1.0 : 0.0 ) ;
                double t90327 = t90326*1.0E20;
                double t90328 = C_k*t90314*t90324*t90316;
                double t90330 = t90327+t90328+1.0;
                double t90331 = 0.0 ;
                double t90332 = t90320*t90321*t90323*t90319*(5.0/3.0);
                double t90333 = C_k*t90321*t90322*t90316*(5.0E20/3.0);
                double t90334 = 1.0/(t90330*t90330);
                double t90335 = t90327+t90328-1.0;
                double t90336 = t90335*t90335;
                double t90338 = t90320*t90331*t90316*t90319*(5.0E20/3.0);
                double t90339 = C_k*t90322*t90323*t90324*(5.0/3.0);
                double t90337 = t90332+t90333-t90338-t90339;
                double t90340 = t90336*t90336;
                double t90341 = C_k*t90321*t90314*t90316*1.0E20;
                double t90349 = C_k*t90314*t90323*t90324;
                double t90342 = t90341-t90349;
                double t90343 = -t90315+t90329;
                double t90344 = 0.0 ;
                double t90345 = C_k*t90322*t90344*(5.0E20/3.0);
                double t90346 = C_k*t90322*t90324*t90316*(5.0/3.0);
                double t90350 = t90320*t90321*t90316*t90319*(5.0/3.0);
                double t90347 = -t90350+t90345+t90346;
                double t90348 = 1.0/(t90330*t90330*t90330);
                double t90351 = 1.0/(t90330*t90330*t90330*t90330);
                double t90352 = 1.0/(t90330*t90330*t90330*t90330*t90330);
                double t90353 = 1.0/(t90330*t90330*t90330*t90330*t90330*t90330);
                double t90354 = 1.0/t90330;
                double t90355 = gamma_bb[index]*gx*t90309;
                double t90356 = t90355+1.0;
                double t90357 = 1.0/t90356;
                double t90358 = gamma_bb[index]*gx*t90309*3.0;
                double t90359 = gamma_bb[index]*gx*t90310*t90311*t90312;
                double t90360 = t90310*t90311*t90313*3.0;
                double t90361 = t90360+t90358+t90359+1.0;
                double t90362 = 1.0/t90361;
                double t90363 = gamma_bb[index]*gx*t90309*2.0;
                double t90364 = t90310*t90311*t90313;
                double t90365 = t90363+t90364+1.0;
                double t90366 = 1.0/t90365;
                double t90367 = 1.0/pow(rho_b[index],1.9E1/3.0);
                double t90368 = 1.0/pow(rho_b[index],1.1E1/3.0);
                double t90369 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]*rho_b[index]);
                double t90370 = X-1.0;
                double t90371 = cxnl1*gamma_bb[index]*gx*t90309*t90357;
                double t90372 = cxnl3*gamma_bb[index]*gx*t90310*t90311*t90312*t90362;
                double t90373 = cxnl2*t90310*t90311*t90313*t90366;
                double t90374 = cxnl0+t90371+t90372+t90373;
                double t90375 = t90342*t90354;
                double t90376 = t90342*t90351*t90335*t90336*6.0;
                double t90377 = t90340*t90342*t90352*5.0;
                double t90378 = t90375+t90376+t90377-t90342*t90334*t90335-t90342*t90336*t90348*6.0-t90340*t90342* \
                   t90335*t90353*5.0;
                v_rho_b_tau_b_[index] = c0*pow(rho_b[index],4.0/3.0)*t90370*(t90378*(cxnl1*gamma_bb[index]*gx*t90357* \
                   t90368*(8.0/3.0)+cxnl2*t90310*t90311*t90366*t90367*(1.6E1/3.0)-cxnl1*t90310*t90311*1.0/(t90356*t90356) \
                   *t90367*(8.0/3.0)-cxnl2*t90310*t90311*t90313*1.0/(t90365*t90365)*(gamma_bb[index]*gx*t90368*(1.6E1/ \
                   3.0)+t90310*t90311*t90367*(1.6E1/3.0))+cxnl3*gamma_bb[index]*gx*t90310*t90311*t90362*t90369*8.0-cxnl3* \
                   gamma_bb[index]*gx*t90310*t90311*t90312*1.0/(t90361*t90361)*(gamma_bb[index]*gx*t90368*8.0+t90310* \
                   t90311*t90367*1.6E1+gamma_bb[index]*gx*t90310*t90311*t90369*8.0))+t90374*(-t90354*t90337-t90340*t90352* \
                   t90337*5.0+t90342*t90334*t90347*2.0+t90334*t90335*t90337+t90336*t90337*t90348*6.0+t90340*t90342*t90353* \
                   t90347*5.0E1-t90342*t90351*t90336*t90347*3.6E1-t90351*t90335*t90336*t90337*6.0+t90342*t90335*t90347* \
                   t90348*1.0E1+t90340*t90335*t90353*(t90332+t90333-t90338-t90339)*5.0-1.0/(t90330*t90330*t90330*t90330* \
                   t90330*t90330*t90330)*t90340*t90342*t90335*t90347*3.0E1+t90342*t90352*t90335*t90336*t90347*4.0))-c0* \
                   pow(rho_b[index],1.0/3.0)*t90370*t90374*t90378*(4.0/3.0);
            } else {
                v_rho_b_tau_b_[index] = 0.0;
            }

            //V_tau_a_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t89222 = 1.0/pow(rho_b[index],8.0/3.0);
                double t89223 = gamma_bb[index]*gamma_bb[index];
                double t89224 = gx*gx;
                double t89225 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]);
                double t89226 = 1.0/pow(rho_b[index],1.6E1/3.0);
                double t89227 = tau_a[index]*1.0E20;
                double t89228 = pow(rho_b[index],5.0/3.0);
                double t89229 = C_k*t89228;
                double t89240 = t89227-t89229;
                double t89230 = 0.0 ;
                double t89231 = -t89227+t89229;
                double t89232 = ( (t89231 > 0.0) ?  1.0 : 0.0 ) ;
                double t89233 = t89232*1.0E20;
                double t89234 = 1.0/tau_b[index];
                double t89235 = tau_b[index]*1.0E20;
                double t89236 = t89235-t89229;
                double t89237 = ( (t89236 > 0.0) ?  1.0 : 0.0 ) ;
                double t89238 = C_k*t89234*t89228*t89237;
                double t89239 = t89233+t89238+1.0;
                double t89241 = t89230*t89230;
                double t89242 = t89233+t89238-1.0;
                double t89243 = 1.0/(t89239*t89239*t89239);
                double t89244 = 0.0 ;
                double t89245 = t89242*t89242;
                double t89246 = t89245*t89245;
                double t89247 = 1.0/(t89239*t89239*t89239*t89239);
                double t89248 = 1.0/(t89239*t89239*t89239*t89239*t89239);
                double t89249 = 1.0/(t89239*t89239*t89239*t89239*t89239*t89239);
                double t89250 = 1.0/(t89239*t89239);
                double t89251 = 1.0/pow(rho_a[index],8.0/3.0);
                double t89252 = gamma_aa[index]*gamma_aa[index];
                double t89253 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t89254 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t89255 = pow(rho_a[index],5.0/3.0);
                double t89256 = C_k*t89255;
                double t89257 = t89227-t89256;
                double t89258 = 1.0/tau_a[index];
                double t89259 = 0.0 ;
                double t89260 = ( (t89257 > 0.0) ?  1.0 : 0.0 ) ;
                double t89261 = 0.0 ;
                double t89262 = 1.0/(tau_a[index]*tau_a[index]);
                double t89269 = t89261*1.0E40;
                double t89270 = C_k*t89261*t89255*t89258*1.0E20;
                double t89271 = C_k*t89260*t89262*t89255;
                double t89263 = -t89270+t89271+t89269;
                double t89264 = -t89227+t89256;
                double t89265 = ( (t89264 > 0.0) ?  1.0 : 0.0 ) ;
                double t89266 = t89265*1.0E20;
                double t89267 = C_k*t89260*t89255*t89258;
                double t89268 = t89266+t89267+1.0;
                double t89272 = t89263*t89263;
                double t89273 = t89266+t89267-1.0;
                double t89274 = t89273*t89273;
                double t89275 = t89274*t89274;
                double t89276 = 1.0/(t89268*t89268);
                double t89277 = t89259*1.0E60;
                double t89278 = C_k*t89261*t89262*t89255*2.0E20;
                double t89279 = 1.0/(tau_a[index]*tau_a[index]*tau_a[index]);
                double t89282 = C_k*t89255*t89258*t89259*1.0E40;
                double t89283 = C_k*t89260*t89255*t89279*2.0;
                double t89280 = -t89282-t89283+t89277+t89278;
                double t89281 = 1.0/(t89268*t89268*t89268);
                double t89284 = 1.0/(t89268*t89268*t89268*t89268);
                double t89285 = 1.0/(t89268*t89268*t89268*t89268*t89268);
                double t89286 = 1.0/(t89268*t89268*t89268*t89268*t89268*t89268);
                v_tau_a_tau_a_[index] = (c0*pow(rho_b[index],4.0/3.0)*(cxnl0+(cxnl2*t89223*t89224*t89226)/(gamma_bb[index]* \
                   gx*t89222*2.0+t89223*t89224*t89226+1.0)+(cxnl1*gamma_bb[index]*gx*t89222)/(gamma_bb[index]*gx*t89222+ \
                   1.0)+(cxnl3*gamma_bb[index]*gx*t89223*t89224*t89225)/(gamma_bb[index]*gx*t89222*3.0+t89223*t89224* \
                   t89226*3.0+gamma_bb[index]*gx*t89223*t89224*t89225+1.0))*(t89241*t89250*2.0E80+( 0.0 )/t89239+t89241* \
                   t89242*t89243*1.0E81-t89250*t89242*t89244*1.0E60-t89243*t89244*t89245*6.0E60-t89241*t89245*t89247* \
                   3.6E81+t89241*t89246*t89249*5.0E81+t89244*t89246*t89248*5.0E60+t89241*t89242*t89245*t89248*4.0E80+ \
                   t89242*t89244*t89245*t89247*6.0E60-t89242*t89244*t89246*t89249*5.0E60-t89241*t89242*t89246*1.0/(t89239* \
                   t89239*t89239*t89239*t89239*t89239*t89239)*3.0E81)+c0*pow(rho_a[index],4.0/3.0)*(cxnl0+(cxnl2*t89224* \
                   t89252*t89254)/(gamma_aa[index]*gx*t89251*2.0+t89224*t89252*t89254+1.0)+(cxnl1*gamma_aa[index]*gx* \
                   t89251)/(gamma_aa[index]*gx*t89251+1.0)+(cxnl3*gamma_aa[index]*gx*t89224*t89252*t89253)/(gamma_aa[index]* \
                   gx*t89251*3.0+t89224*t89252*t89254*3.0+gamma_aa[index]*gx*t89224*t89252*t89253+1.0))*(t89272*t89276* \
                   2.0+t89280/t89268-t89280*t89281*t89274*6.0+t89272*t89281*t89273*1.0E1-t89280*t89273*t89276-t89272* \
                   t89274*t89284*3.6E1+t89280*t89275*t89285*5.0+t89272*t89275*t89286*5.0E1+t89280*t89273*t89274*t89284* \
                   6.0+t89272*t89273*t89274*t89285*4.0-t89280*t89273*t89275*t89286*5.0-t89272*t89273*t89275*1.0/(t89268* \
                   t89268*t89268*t89268*t89268*t89268*t89268)*3.0E1))*(X-1.0);
            } else if (rho_a[index] > cutoff_) {
                double t91370 = 1.0/pow(rho_a[index],8.0/3.0);
                double t91371 = gamma_aa[index]*gamma_aa[index];
                double t91372 = gx*gx;
                double t91373 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t91374 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t91375 = pow(rho_a[index],5.0/3.0);
                double t91376 = C_k*t91375;
                double t91377 = tau_a[index]*1.0E20;
                double t91378 = -t91376+t91377;
                double t91379 = 1.0/tau_a[index];
                double t91380 = 0.0 ;
                double t91381 = ( (t91378 > 0.0) ?  1.0 : 0.0 ) ;
                double t91382 = 0.0 ;
                double t91383 = 1.0/(tau_a[index]*tau_a[index]);
                double t91386 = t91382*1.0E40;
                double t91387 = C_k*t91382*t91375*t91379*1.0E20;
                double t91388 = C_k*t91381*t91383*t91375;
                double t91384 = t91386-t91387+t91388;
                double t91385 = C_k*t91381*t91375*t91379;
                double t91389 = t91384*t91384;
                double t91390 = t91376-t91377;
                double t91391 = ( (t91390 > 0.0) ?  1.0 : 0.0 ) ;
                double t91392 = t91391*1.0E20;
                double t91393 = t91392+t91385-1.0;
                double t91394 = t91392+t91385+1.0;
                double t91395 = t91393*t91393;
                double t91396 = t91395*t91395;
                double t91397 = 1.0/(t91394*t91394);
                double t91398 = t91380*1.0E60;
                double t91399 = C_k*t91382*t91383*t91375*2.0E20;
                double t91400 = 1.0/(tau_a[index]*tau_a[index]*tau_a[index]);
                double t91403 = C_k*t91380*t91375*t91379*1.0E40;
                double t91404 = C_k*t91400*t91381*t91375*2.0;
                double t91401 = -t91403-t91404+t91398+t91399;
                double t91402 = 1.0/(t91394*t91394*t91394);
                double t91405 = 1.0/(t91394*t91394*t91394*t91394);
                double t91406 = 1.0/(t91394*t91394*t91394*t91394*t91394);
                double t91407 = 1.0/(t91394*t91394*t91394*t91394*t91394*t91394);
                v_tau_a_tau_a_[index] = c0*pow(rho_a[index],4.0/3.0)*(X-1.0)*(cxnl0+(cxnl2*t91371*t91372*t91374)/ \
                   (gamma_aa[index]*gx*t91370*2.0+t91371*t91372*t91374+1.0)+(cxnl1*gamma_aa[index]*gx*t91370)/(gamma_aa[index]* \
                   gx*t91370+1.0)+(cxnl3*gamma_aa[index]*gx*t91371*t91372*t91373)/(gamma_aa[index]*gx*t91370*3.0+t91371* \
                   t91372*t91374*3.0+gamma_aa[index]*gx*t91371*t91372*t91373+1.0))*(t91401/(t91385+ ( (t91376-tau_a[index]* \
                   1.0E20 > 0.0) ? 1.0*1.0E20 : 0.0 ) +1.0)+t91397*t91389*2.0-t91401*t91402*t91395*6.0+t91401*t91406* \
                   t91396*5.0-t91401*t91393*t91397+t91402*t91393*t91389*1.0E1-t91405*t91395*t91389*3.6E1+t91407*t91396* \
                   t91389*5.0E1+t91401*t91405*t91393*t91395*6.0-t91401*t91407*t91393*t91396*5.0+t91406*t91393*t91395* \
                   t91389*4.0-t91393*1.0/(t91394*t91394*t91394*t91394*t91394*t91394*t91394)*t91396*t91389*3.0E1);
            } else if (rho_b[index] > cutoff_) {
                double t90380 = 1.0/pow(rho_b[index],8.0/3.0);
                double t90381 = gamma_bb[index]*gamma_bb[index];
                double t90382 = gx*gx;
                double t90383 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]);
                double t90384 = 1.0/pow(rho_b[index],1.6E1/3.0);
                double t90385 = tau_a[index]*1.0E20;
                double t90386 = pow(rho_b[index],5.0/3.0);
                double t90387 = C_k*t90386;
                double t90398 = t90385-t90387;
                double t90388 = 0.0 ;
                double t90389 = -t90385+t90387;
                double t90390 = ( (t90389 > 0.0) ?  1.0 : 0.0 ) ;
                double t90391 = t90390*1.0E20;
                double t90392 = 1.0/tau_b[index];
                double t90393 = tau_b[index]*1.0E20;
                double t90394 = t90393-t90387;
                double t90395 = ( (t90394 > 0.0) ?  1.0 : 0.0 ) ;
                double t90396 = C_k*t90392*t90386*t90395;
                double t90397 = t90391+t90396+1.0;
                double t90399 = t90388*t90388;
                double t90400 = t90391+t90396-1.0;
                double t90401 = 1.0/(t90397*t90397*t90397);
                double t90402 = 0.0 ;
                double t90403 = t90400*t90400;
                double t90404 = t90403*t90403;
                double t90405 = 1.0/(t90397*t90397*t90397*t90397);
                double t90406 = 1.0/(t90397*t90397*t90397*t90397*t90397);
                double t90407 = 1.0/(t90397*t90397*t90397*t90397*t90397*t90397);
                double t90408 = 1.0/(t90397*t90397);
                v_tau_a_tau_a_[index] = c0*pow(rho_b[index],4.0/3.0)*(X-1.0)*(cxnl0+(cxnl2*t90381*t90382*t90384)/ \
                   (gamma_bb[index]*gx*t90380*2.0+t90381*t90382*t90384+1.0)+(cxnl1*gamma_bb[index]*gx*t90380)/(gamma_bb[index]* \
                   gx*t90380+1.0)+(cxnl3*gamma_bb[index]*gx*t90381*t90382*t90383)/(gamma_bb[index]*gx*t90380*3.0+t90381* \
                   t90382*t90384*3.0+gamma_bb[index]*gx*t90381*t90382*t90383+1.0))*(t90408*t90399*2.0E80+( 0.0 )/t90397- \
                   t90401*t90402*t90403*6.0E60-t90400*t90402*t90408*1.0E60+t90402*t90404*t90406*5.0E60+t90400*t90401* \
                   t90399*1.0E81-t90403*t90405*t90399*3.6E81+t90404*t90407*t90399*5.0E81+t90400*t90402*t90403*t90405* \
                   6.0E60-t90400*t90402*t90404*t90407*5.0E60+t90400*t90403*t90406*t90399*4.0E80-t90400*t90404*1.0/(t90397* \
                   t90397*t90397*t90397*t90397*t90397*t90397)*t90399*3.0E81);
            } else {
                v_tau_a_tau_a_[index] = 0.0;
            }

            //V_tau_a_tau_b
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t89288 = 1.0/pow(rho_b[index],8.0/3.0);
                double t89289 = gamma_bb[index]*gamma_bb[index];
                double t89290 = gx*gx;
                double t89291 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]);
                double t89292 = 1.0/pow(rho_b[index],1.6E1/3.0);
                double t89293 = pow(rho_b[index],5.0/3.0);
                double t89294 = tau_b[index]*1.0E20;
                double t89297 = C_k*t89293;
                double t89295 = t89294-t89297;
                double t89296 = tau_a[index]*1.0E20;
                double t89298 = 1.0/tau_b[index];
                double t89299 = ( (t89295 > 0.0) ?  1.0 : 0.0 ) ;
                double t89300 = t89296-t89297;
                double t89301 = 0.0 ;
                double t89302 = 0.0 ;
                double t89303 = 1.0/(tau_b[index]*tau_b[index]);
                double t89310 = C_k*t89302*t89293*t89298*1.0E20;
                double t89311 = C_k*t89303*t89293*t89299;
                double t89304 = t89310-t89311;
                double t89305 = -t89296+t89297;
                double t89306 = ( (t89305 > 0.0) ?  1.0 : 0.0 ) ;
                double t89307 = t89306*1.0E20;
                double t89308 = C_k*t89293*t89298*t89299;
                double t89309 = t89307+t89308+1.0;
                double t89312 = t89307+t89308-1.0;
                double t89313 = t89312*t89312;
                double t89314 = t89313*t89313;
                v_tau_a_tau_b_[index] = -c0*pow(rho_b[index],4.0/3.0)*(X-1.0)*(cxnl0+(cxnl2*t89290*t89292*t89289) \
                   /(gamma_bb[index]*gx*t89288*2.0+t89290*t89292*t89289+1.0)+(cxnl1*gamma_bb[index]*gx*t89288)/(gamma_bb[index]* \
                   gx*t89288+1.0)+(cxnl3*gamma_bb[index]*gx*t89290*t89291*t89289)/(gamma_bb[index]*gx*t89288*3.0+t89290* \
                   t89292*t89289*3.0+gamma_bb[index]*gx*t89290*t89291*t89289+1.0))*(t89301*t89304*1.0/(t89309*t89309) \
                   *2.0E40+t89301*t89312*t89304*1.0/(t89309*t89309*t89309)*1.0E41-t89301*t89304*t89313*1.0/(t89309*t89309* \
                   t89309*t89309)*3.6E41+t89301*t89304*t89314*1.0/(t89309*t89309*t89309*t89309*t89309*t89309)*5.0E41+ \
                   t89301*t89312*t89304*t89313*1.0/(t89309*t89309*t89309*t89309*t89309)*4.0E40-t89301*t89312*t89304*t89314* \
                   1.0/(t89309*t89309*t89309*t89309*t89309*t89309*t89309)*3.0E41);
            } else if (rho_a[index] > cutoff_) {
                v_tau_a_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                double t90410 = 1.0/pow(rho_b[index],8.0/3.0);
                double t90411 = gamma_bb[index]*gamma_bb[index];
                double t90412 = gx*gx;
                double t90413 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]);
                double t90414 = 1.0/pow(rho_b[index],1.6E1/3.0);
                double t90415 = pow(rho_b[index],5.0/3.0);
                double t90416 = tau_b[index]*1.0E20;
                double t90419 = C_k*t90415;
                double t90417 = t90416-t90419;
                double t90418 = tau_a[index]*1.0E20;
                double t90420 = 1.0/tau_b[index];
                double t90421 = ( (t90417 > 0.0) ?  1.0 : 0.0 ) ;
                double t90422 = t90418-t90419;
                double t90423 = 0.0 ;
                double t90424 = 0.0 ;
                double t90425 = 1.0/(tau_b[index]*tau_b[index]);
                double t90432 = C_k*t90420*t90415*t90424*1.0E20;
                double t90433 = C_k*t90421*t90415*t90425;
                double t90426 = t90432-t90433;
                double t90427 = -t90418+t90419;
                double t90428 = ( (t90427 > 0.0) ?  1.0 : 0.0 ) ;
                double t90429 = t90428*1.0E20;
                double t90430 = C_k*t90420*t90421*t90415;
                double t90431 = t90430+t90429+1.0;
                double t90434 = t90430+t90429-1.0;
                double t90435 = t90434*t90434;
                double t90436 = t90435*t90435;
                v_tau_a_tau_b_[index] = -c0*pow(rho_b[index],4.0/3.0)*(X-1.0)*(cxnl0+(cxnl2*t90411*t90412*t90414) \
                   /(gamma_bb[index]*gx*t90410*2.0+t90411*t90412*t90414+1.0)+(cxnl1*gamma_bb[index]*gx*t90410)/(gamma_bb[index]* \
                   gx*t90410+1.0)+(cxnl3*gamma_bb[index]*gx*t90411*t90412*t90413)/(gamma_bb[index]*gx*t90410*3.0+t90411* \
                   t90412*t90414*3.0+gamma_bb[index]*gx*t90411*t90412*t90413+1.0))*(1.0/(t90431*t90431)*t90423*t90426* \
                   2.0E40+1.0/(t90431*t90431*t90431)*t90423*t90434*t90426*1.0E41-1.0/(t90431*t90431*t90431*t90431)*t90423* \
                   t90426*t90435*3.6E41+1.0/(t90431*t90431*t90431*t90431*t90431*t90431)*t90423*t90426*t90436*5.0E41+1.0/ \
                   (t90431*t90431*t90431*t90431*t90431)*t90423*t90434*t90426*t90435*4.0E40-1.0/(t90431*t90431*t90431* \
                   t90431*t90431*t90431*t90431)*t90423*t90434*t90426*t90436*3.0E41);
            } else {
                v_tau_a_tau_b_[index] = 0.0;
            }

            //V_tau_b_tau_b
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t89316 = 1.0/pow(rho_b[index],8.0/3.0);
                double t89317 = gamma_bb[index]*gamma_bb[index];
                double t89318 = gx*gx;
                double t89319 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]);
                double t89320 = 1.0/pow(rho_b[index],1.6E1/3.0);
                double t89321 = pow(rho_b[index],5.0/3.0);
                double t89322 = tau_b[index]*1.0E20;
                double t89324 = C_k*t89321;
                double t89323 = t89322-t89324;
                double t89325 = 1.0/tau_b[index];
                double t89326 = ( (t89323 > 0.0) ?  1.0 : 0.0 ) ;
                double t89327 = 0.0 ;
                double t89328 = 1.0/(tau_b[index]*tau_b[index]);
                double t89345 = C_k*t89321*t89325*t89327*1.0E20;
                double t89346 = C_k*t89321*t89326*t89328;
                double t89329 = t89345-t89346;
                double t89340 = tau_a[index]*1.0E20;
                double t89330 = -t89340+t89324;
                double t89331 = ( (t89330 > 0.0) ?  1.0 : 0.0 ) ;
                double t89332 = t89331*1.0E20;
                double t89333 = C_k*t89321*t89325*t89326;
                double t89334 = t89332+t89333+1.0;
                double t89335 = 0.0 ;
                double t89336 = C_k*t89321*t89325*t89335*1.0E40;
                double t89337 = 1.0/(tau_b[index]*tau_b[index]*tau_b[index]);
                double t89338 = C_k*t89321*t89326*t89337*2.0;
                double t89342 = C_k*t89321*t89327*t89328*2.0E20;
                double t89339 = -t89342+t89336+t89338;
                double t89341 = t89332+t89333-1.0;
                double t89343 = t89341*t89341;
                double t89344 = t89343*t89343;
                double t89347 = t89329*t89329;
                double t89348 = 1.0/(t89334*t89334*t89334*t89334);
                double t89349 = 1.0/(t89334*t89334*t89334*t89334*t89334);
                double t89350 = 1.0/(t89334*t89334*t89334*t89334*t89334*t89334);
                double t89351 = 1.0/(t89334*t89334);
                double t89352 = 1.0/(t89334*t89334*t89334);
                v_tau_b_tau_b_[index] = c0*pow(rho_b[index],4.0/3.0)*(X-1.0)*(cxnl0+(cxnl2*t89320*t89317*t89318)/ \
                   (gamma_bb[index]*gx*t89316*2.0+t89320*t89317*t89318+1.0)+(cxnl1*gamma_bb[index]*gx*t89316)/(gamma_bb[index]* \
                   gx*t89316+1.0)+(cxnl3*gamma_bb[index]*gx*t89317*t89318*t89319)/(gamma_bb[index]*gx*t89316*3.0+t89320* \
                   t89317*t89318*3.0+gamma_bb[index]*gx*t89317*t89318*t89319+1.0))*(t89351*t89347*2.0-t89339/t89334+t89341* \
                   t89351*t89339+t89341*t89352*t89347*1.0E1+t89350*t89344*t89347*5.0E1+t89343*t89352*t89339*6.0-t89343* \
                   t89347*t89348*3.6E1-t89344*t89339*t89349*5.0+t89341*t89350*t89344*t89339*5.0+t89341*t89343*t89347* \
                   t89349*4.0-t89341*t89343*t89339*t89348*6.0-t89341*1.0/(t89334*t89334*t89334*t89334*t89334*t89334*t89334) \
                   *t89344*t89347*3.0E1);
            } else if (rho_a[index] > cutoff_) {
                v_tau_b_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                double t90438 = 1.0/pow(rho_b[index],8.0/3.0);
                double t90439 = gamma_bb[index]*gamma_bb[index];
                double t90440 = gx*gx;
                double t90441 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]);
                double t90442 = 1.0/pow(rho_b[index],1.6E1/3.0);
                double t90443 = pow(rho_b[index],5.0/3.0);
                double t90444 = tau_b[index]*1.0E20;
                double t90446 = C_k*t90443;
                double t90445 = t90444-t90446;
                double t90447 = 1.0/tau_b[index];
                double t90448 = ( (t90445 > 0.0) ?  1.0 : 0.0 ) ;
                double t90449 = 0.0 ;
                double t90450 = 1.0/(tau_b[index]*tau_b[index]);
                double t90467 = C_k*t90443*t90447*t90449*1.0E20;
                double t90468 = C_k*t90450*t90443*t90448;
                double t90451 = -t90467+t90468;
                double t90462 = tau_a[index]*1.0E20;
                double t90452 = -t90462+t90446;
                double t90453 = ( (t90452 > 0.0) ?  1.0 : 0.0 ) ;
                double t90454 = t90453*1.0E20;
                double t90455 = C_k*t90443*t90447*t90448;
                double t90456 = t90454+t90455+1.0;
                double t90457 = 0.0 ;
                double t90458 = C_k*t90443*t90447*t90457*1.0E40;
                double t90459 = 1.0/(tau_b[index]*tau_b[index]*tau_b[index]);
                double t90460 = C_k*t90443*t90448*t90459*2.0;
                double t90464 = C_k*t90450*t90443*t90449*2.0E20;
                double t90461 = t90460-t90464+t90458;
                double t90463 = t90454+t90455-1.0;
                double t90465 = t90463*t90463;
                double t90466 = t90465*t90465;
                double t90469 = t90467-t90468;
                double t90470 = 1.0/(t90456*t90456*t90456*t90456);
                double t90471 = t90469*t90469;
                double t90472 = 1.0/(t90456*t90456*t90456*t90456*t90456);
                double t90473 = 1.0/(t90456*t90456*t90456*t90456*t90456*t90456);
                double t90474 = 1.0/(t90456*t90456);
                double t90475 = 1.0/(t90456*t90456*t90456);
                v_tau_b_tau_b_[index] = c0*pow(rho_b[index],4.0/3.0)*(X-1.0)*(cxnl0+(cxnl2*t90440*t90442*t90439)/ \
                   (gamma_bb[index]*gx*t90438*2.0+t90440*t90442*t90439+1.0)+(cxnl1*gamma_bb[index]*gx*t90438)/(gamma_bb[index]* \
                   gx*t90438+1.0)+(cxnl3*gamma_bb[index]*gx*t90440*t90441*t90439)/(gamma_bb[index]*gx*t90438*3.0+t90440* \
                   t90442*t90439*3.0+gamma_bb[index]*gx*t90440*t90441*t90439+1.0))*(-t90461/t90456+(t90451*t90451)*t90474* \
                   2.0-t90470*t90471*t90465*3.6E1+t90461*t90463*t90474-t90461*t90472*t90466*5.0+t90471*t90463*t90475* \
                   1.0E1+t90461*t90465*t90475*6.0+t90471*t90473*t90466*5.0E1-t90461*t90470*t90463*t90465*6.0+t90471*t90463* \
                   t90472*t90465*4.0+t90461*t90463*t90473*t90466*5.0-t90471*t90463*1.0/(t90456*t90456*t90456*t90456*t90456* \
                   t90456*t90456)*t90466*3.0E1);
            } else {
                v_tau_b_tau_b_[index] = 0.0;
            }

            if (is_gga_) {

                //V_gamma_aa_tau_a
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    double t89354 = 1.0/pow(rho_a[index],8.0/3.0);
                    double t89355 = gx*gx;
                    double t89356 = 1.0/pow(rho_a[index],1.6E1/3.0);
                    double t89357 = gamma_aa[index]*gamma_aa[index];
                    double t89358 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                       rho_a[index]*rho_a[index]);
                    double t89359 = gamma_aa[index]*gx*t89354;
                    double t89360 = t89359+1.0;
                    double t89361 = gamma_aa[index]*gx*t89354*3.0;
                    double t89362 = gamma_aa[index]*gx*t89355*t89357*t89358;
                    double t89363 = t89355*t89356*t89357*3.0;
                    double t89364 = t89361+t89362+t89363+1.0;
                    double t89365 = gamma_aa[index]*gx*t89354*2.0;
                    double t89366 = t89355*t89356*t89357;
                    double t89367 = t89365+t89366+1.0;
                    double t89368 = pow(rho_a[index],5.0/3.0);
                    double t89369 = tau_a[index]*1.0E20;
                    double t89372 = C_k*t89368;
                    double t89370 = -t89372+t89369;
                    double t89371 = 0.0 ;
                    double t89373 = 1.0/tau_a[index];
                    double t89374 = ( (t89370 > 0.0) ?  1.0 : 0.0 ) ;
                    double t89375 = t89371*1.0E40;
                    double t89376 = 1.0/(tau_a[index]*tau_a[index]);
                    double t89377 = C_k*t89374*t89376*t89368;
                    double t89384 = C_k*t89371*t89373*t89368*1.0E20;
                    double t89378 = t89375-t89384+t89377;
                    double t89379 = t89372-t89369;
                    double t89380 = ( (t89379 > 0.0) ?  1.0 : 0.0 ) ;
                    double t89381 = t89380*1.0E20;
                    double t89382 = C_k*t89373*t89374*t89368;
                    double t89383 = t89381+t89382+1.0;
                    double t89385 = t89381+t89382-1.0;
                    double t89386 = t89385*t89385;
                    double t89387 = t89386*t89386;
                    v_gamma_aa_tau_a_[index] = c0*pow(rho_a[index],4.0/3.0)*(X-1.0)*((cxnl1*gx*t89354)/t89360-cxnl1*gamma_aa[index]* \
                       1.0/(t89360*t89360)*t89355*t89356+(cxnl2*gamma_aa[index]*t89355*t89356*2.0)/t89367-cxnl2*t89355*t89356* \
                       t89357*1.0/(t89367*t89367)*(gx*t89354*2.0+gamma_aa[index]*t89355*t89356*2.0)+(cxnl3*gx*t89355*t89357* \
                       t89358*3.0)/t89364-cxnl3*gamma_aa[index]*gx*t89355*1.0/(t89364*t89364)*t89357*t89358*(gx*t89354*3.0+ \
                       gamma_aa[index]*t89355*t89356*6.0+gx*t89355*t89357*t89358*3.0))*(t89378/t89383-1.0/(t89383*t89383) \
                       *t89385*t89378-1.0/(t89383*t89383*t89383)*t89386*t89378*6.0+1.0/(t89383*t89383*t89383*t89383*t89383) \
                       *t89378*t89387*5.0+1.0/(t89383*t89383*t89383*t89383)*t89385*t89386*t89378*6.0-1.0/(t89383*t89383*t89383* \
                       t89383*t89383*t89383)*t89385*t89378*t89387*5.0);
                } else if (rho_a[index] > cutoff_) {
                    double t91411 = 1.0/pow(rho_a[index],8.0/3.0);
                    double t91412 = gx*gx;
                    double t91413 = 1.0/pow(rho_a[index],1.6E1/3.0);
                    double t91414 = gamma_aa[index]*gamma_aa[index];
                    double t91415 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                       rho_a[index]*rho_a[index]);
                    double t91416 = gamma_aa[index]*gx*t91411;
                    double t91417 = t91416+1.0;
                    double t91418 = gamma_aa[index]*gx*t91411*3.0;
                    double t91419 = gamma_aa[index]*gx*t91412*t91414*t91415;
                    double t91420 = t91412*t91413*t91414*3.0;
                    double t91421 = t91420+t91418+t91419+1.0;
                    double t91422 = gamma_aa[index]*gx*t91411*2.0;
                    double t91423 = t91412*t91413*t91414;
                    double t91424 = t91422+t91423+1.0;
                    double t91425 = pow(rho_a[index],5.0/3.0);
                    double t91426 = tau_a[index]*1.0E20;
                    double t91429 = C_k*t91425;
                    double t91427 = t91426-t91429;
                    double t91428 = 0.0 ;
                    double t91430 = 1.0/tau_a[index];
                    double t91431 = ( (t91427 > 0.0) ?  1.0 : 0.0 ) ;
                    double t91432 = t91428*1.0E40;
                    double t91433 = 1.0/(tau_a[index]*tau_a[index]);
                    double t91434 = C_k*t91431*t91433*t91425;
                    double t91441 = C_k*t91430*t91425*t91428*1.0E20;
                    double t91435 = t91432-t91441+t91434;
                    double t91436 = -t91426+t91429;
                    double t91437 = ( (t91436 > 0.0) ?  1.0 : 0.0 ) ;
                    double t91438 = t91437*1.0E20;
                    double t91439 = C_k*t91430*t91431*t91425;
                    double t91440 = t91438+t91439+1.0;
                    double t91442 = t91438+t91439-1.0;
                    double t91443 = t91442*t91442;
                    double t91444 = t91443*t91443;
                    v_gamma_aa_tau_a_[index] = c0*pow(rho_a[index],4.0/3.0)*(X-1.0)*((cxnl1*gx*t91411)/t91417+(cxnl2* \
                       gamma_aa[index]*t91412*t91413*2.0)/t91424-cxnl1*gamma_aa[index]*t91412*t91413*1.0/(t91417*t91417)- \
                       cxnl2*t91412*t91413*t91414*1.0/(t91424*t91424)*(gx*t91411*2.0+gamma_aa[index]*t91412*t91413*2.0)+(cxnl3* \
                       gx*t91412*t91414*t91415*3.0)/t91421-cxnl3*gamma_aa[index]*gx*t91412*1.0/(t91421*t91421)*t91414*t91415* \
                       (gx*t91411*3.0+gamma_aa[index]*t91412*t91413*6.0+gx*t91412*t91414*t91415*3.0))*(t91435/t91440-1.0/ \
                       (t91440*t91440)*t91442*t91435-1.0/(t91440*t91440*t91440)*t91443*t91435*6.0+1.0/(t91440*t91440*t91440* \
                       t91440*t91440)*t91435*t91444*5.0+1.0/(t91440*t91440*t91440*t91440)*t91442*t91443*t91435*6.0-1.0/(t91440* \
                       t91440*t91440*t91440*t91440*t91440)*t91442*t91435*t91444*5.0);
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } else {
                    v_gamma_aa_tau_a_[index] = 0.0;
                }

                //V_gamma_aa_tau_b
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_aa_tau_b_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_aa_tau_b_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_aa_tau_b_[index] = 0.0;
                } else {
                    v_gamma_aa_tau_b_[index] = 0.0;
                }

                //V_gamma_ab_tau_a
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_ab_tau_a_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_ab_tau_a_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_ab_tau_a_[index] = 0.0;
                } else {
                    v_gamma_ab_tau_a_[index] = 0.0;
                }

                //V_gamma_ab_tau_b
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_ab_tau_b_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_ab_tau_b_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_ab_tau_b_[index] = 0.0;
                } else {
                    v_gamma_ab_tau_b_[index] = 0.0;
                }

                //V_gamma_bb_tau_a
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    double t89390 = tau_a[index]*1.0E20;
                    double t89391 = pow(rho_b[index],5.0/3.0);
                    double t89392 = C_k*t89391;
                    double t89393 = -t89390+t89392;
                    double t89394 = ( (t89393 > 0.0) ?  1.0 : 0.0 ) ;
                    double t89395 = t89394*1.0E20;
                    double t89396 = 1.0/tau_b[index];
                    double t89397 = tau_b[index]*1.0E20;
                    double t89398 = -t89392+t89397;
                    double t89399 = ( (t89398 > 0.0) ?  1.0 : 0.0 ) ;
                    double t89400 = C_k*t89391*t89396*t89399;
                    double t89401 = t89400+t89395-1.0;
                    double t89402 = t89400+t89395+1.0;
                    double t89403 = t89390-t89392;
                    double t89404 = 0.0 ;
                    double t89405 = t89401*t89401;
                    double t89406 = t89405*t89405;
                    double t89407 = 1.0/pow(rho_b[index],8.0/3.0);
                    double t89408 = gx*gx;
                    double t89409 = 1.0/pow(rho_b[index],1.6E1/3.0);
                    double t89410 = gamma_bb[index]*gamma_bb[index];
                    double t89411 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                       rho_b[index]*rho_b[index]);
                    double t89412 = gamma_bb[index]*gx*t89407;
                    double t89413 = t89412+1.0;
                    double t89414 = gamma_bb[index]*gx*t89407*3.0;
                    double t89415 = gamma_bb[index]*gx*t89410*t89411*t89408;
                    double t89416 = t89410*t89408*t89409*3.0;
                    double t89417 = t89414+t89415+t89416+1.0;
                    double t89418 = gamma_bb[index]*gx*t89407*2.0;
                    double t89419 = t89410*t89408*t89409;
                    double t89420 = t89418+t89419+1.0;
                    v_gamma_bb_tau_a_[index] = c0*pow(rho_b[index],4.0/3.0)*(X-1.0)*(( 0.0 )/t89402-t89401*1.0/(t89402* \
                       t89402)*t89404*1.0E40-1.0/(t89402*t89402*t89402)*t89404*t89405*6.0E40+1.0/(t89402*t89402*t89402*t89402* \
                       t89402)*t89404*t89406*5.0E40+t89401*1.0/(t89402*t89402*t89402*t89402)*t89404*t89405*6.0E40-t89401* \
                       1.0/(t89402*t89402*t89402*t89402*t89402*t89402)*t89404*t89406*5.0E40)*((cxnl1*gx*t89407)/t89413+(cxnl2* \
                       gamma_bb[index]*t89408*t89409*2.0)/t89420-cxnl1*gamma_bb[index]*1.0/(t89413*t89413)*t89408*t89409- \
                       cxnl2*t89410*1.0/(t89420*t89420)*t89408*t89409*(gx*t89407*2.0+gamma_bb[index]*t89408*t89409*2.0)+(cxnl3* \
                       gx*t89410*t89411*t89408*3.0)/t89417-cxnl3*gamma_bb[index]*gx*t89410*t89411*t89408*1.0/(t89417*t89417) \
                       *(gx*t89407*3.0+gamma_bb[index]*t89408*t89409*6.0+gx*t89410*t89411*t89408*3.0));
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_bb_tau_a_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    double t90479 = tau_a[index]*1.0E20;
                    double t90480 = pow(rho_b[index],5.0/3.0);
                    double t90481 = C_k*t90480;
                    double t90482 = t90481-t90479;
                    double t90483 = ( (t90482 > 0.0) ?  1.0 : 0.0 ) ;
                    double t90484 = t90483*1.0E20;
                    double t90485 = 1.0/tau_b[index];
                    double t90486 = tau_b[index]*1.0E20;
                    double t90487 = -t90481+t90486;
                    double t90488 = ( (t90487 > 0.0) ?  1.0 : 0.0 ) ;
                    double t90489 = C_k*t90480*t90485*t90488;
                    double t90490 = t90484+t90489-1.0;
                    double t90491 = t90484+t90489+1.0;
                    double t90492 = -t90481+t90479;
                    double t90493 = 0.0 ;
                    double t90494 = t90490*t90490;
                    double t90495 = t90494*t90494;
                    double t90496 = 1.0/pow(rho_b[index],8.0/3.0);
                    double t90497 = gx*gx;
                    double t90498 = 1.0/pow(rho_b[index],1.6E1/3.0);
                    double t90499 = gamma_bb[index]*gamma_bb[index];
                    double t90500 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                       rho_b[index]*rho_b[index]);
                    double t90501 = gamma_bb[index]*gx*t90496;
                    double t90502 = t90501+1.0;
                    double t90503 = gamma_bb[index]*gx*t90496*3.0;
                    double t90504 = gamma_bb[index]*gx*t90500*t90497*t90499;
                    double t90505 = t90497*t90498*t90499*3.0;
                    double t90506 = t90503+t90504+t90505+1.0;
                    double t90507 = gamma_bb[index]*gx*t90496*2.0;
                    double t90508 = t90497*t90498*t90499;
                    double t90509 = t90507+t90508+1.0;
                    v_gamma_bb_tau_a_[index] = c0*pow(rho_b[index],4.0/3.0)*(X-1.0)*(( 0.0 )/t90491-t90490*1.0/(t90491* \
                       t90491)*t90493*1.0E40-1.0/(t90491*t90491*t90491)*t90493*t90494*6.0E40+1.0/(t90491*t90491*t90491*t90491* \
                       t90491)*t90493*t90495*5.0E40+t90490*1.0/(t90491*t90491*t90491*t90491)*t90493*t90494*6.0E40-t90490* \
                       1.0/(t90491*t90491*t90491*t90491*t90491*t90491)*t90493*t90495*5.0E40)*((cxnl1*gx*t90496)/t90502-cxnl1* \
                       gamma_bb[index]*1.0/(t90502*t90502)*t90497*t90498+(cxnl2*gamma_bb[index]*t90497*t90498*2.0)/t90509- \
                       cxnl2*1.0/(t90509*t90509)*t90497*t90498*t90499*(gx*t90496*2.0+gamma_bb[index]*t90497*t90498*2.0)+(cxnl3* \
                       gx*t90500*t90497*t90499*3.0)/t90506-cxnl3*gamma_bb[index]*gx*t90500*1.0/(t90506*t90506)*t90497*t90499* \
                       (gx*t90496*3.0+gamma_bb[index]*t90497*t90498*6.0+gx*t90500*t90497*t90499*3.0));
                } else {
                    v_gamma_bb_tau_a_[index] = 0.0;
                }

                //V_gamma_bb_tau_b
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    double t89424 = pow(rho_b[index],5.0/3.0);
                    double t89425 = tau_b[index]*1.0E20;
                    double t89427 = C_k*t89424;
                    double t89426 = t89425-t89427;
                    double t89428 = 1.0/tau_b[index];
                    double t89429 = ( (t89426 > 0.0) ?  1.0 : 0.0 ) ;
                    double t89430 = 0.0 ;
                    double t89431 = 1.0/(tau_b[index]*tau_b[index]);
                    double t89439 = C_k*t89430*t89424*t89428*1.0E20;
                    double t89440 = C_k*t89431*t89424*t89429;
                    double t89432 = -t89440+t89439;
                    double t89437 = tau_a[index]*1.0E20;
                    double t89433 = t89427-t89437;
                    double t89434 = ( (t89433 > 0.0) ?  1.0 : 0.0 ) ;
                    double t89435 = t89434*1.0E20;
                    double t89436 = C_k*t89424*t89428*t89429;
                    double t89438 = t89435+t89436+1.0;
                    double t89441 = t89435+t89436-1.0;
                    double t89442 = t89441*t89441;
                    double t89443 = t89442*t89442;
                    double t89444 = 1.0/pow(rho_b[index],8.0/3.0);
                    double t89445 = gx*gx;
                    double t89446 = 1.0/pow(rho_b[index],1.6E1/3.0);
                    double t89447 = gamma_bb[index]*gamma_bb[index];
                    double t89448 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                       rho_b[index]*rho_b[index]);
                    double t89449 = gamma_bb[index]*gx*t89444;
                    double t89450 = t89449+1.0;
                    double t89451 = gamma_bb[index]*gx*t89444*3.0;
                    double t89452 = gamma_bb[index]*gx*t89445*t89447*t89448;
                    double t89453 = t89445*t89446*t89447*3.0;
                    double t89454 = t89451+t89452+t89453+1.0;
                    double t89455 = gamma_bb[index]*gx*t89444*2.0;
                    double t89456 = t89445*t89446*t89447;
                    double t89457 = t89455+t89456+1.0;
                    v_gamma_bb_tau_b_[index] = -c0*pow(rho_b[index],4.0/3.0)*(X-1.0)*((cxnl1*gx*t89444)/t89450-cxnl1* \
                       gamma_bb[index]*1.0/(t89450*t89450)*t89445*t89446+(cxnl2*gamma_bb[index]*t89445*t89446*2.0)/t89457- \
                       cxnl2*t89445*t89446*t89447*1.0/(t89457*t89457)*(gx*t89444*2.0+gamma_bb[index]*t89445*t89446*2.0)+(cxnl3* \
                       gx*t89445*t89447*t89448*3.0)/t89454-cxnl3*gamma_bb[index]*gx*t89445*1.0/(t89454*t89454)*t89447*t89448* \
                       (gx*t89444*3.0+gamma_bb[index]*t89445*t89446*6.0+gx*t89445*t89447*t89448*3.0))*(t89432/t89438-t89432* \
                       t89441*1.0/(t89438*t89438)-t89432*t89442*1.0/(t89438*t89438*t89438)*6.0+t89432*t89443*1.0/(t89438* \
                       t89438*t89438*t89438*t89438)*5.0+t89432*t89441*t89442*1.0/(t89438*t89438*t89438*t89438)*6.0-t89432* \
                       t89441*t89443*1.0/(t89438*t89438*t89438*t89438*t89438*t89438)*5.0);
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_bb_tau_b_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    double t90513 = pow(rho_b[index],5.0/3.0);
                    double t90514 = tau_b[index]*1.0E20;
                    double t90516 = C_k*t90513;
                    double t90515 = t90514-t90516;
                    double t90517 = 1.0/tau_b[index];
                    double t90518 = ( (t90515 > 0.0) ?  1.0 : 0.0 ) ;
                    double t90519 = 0.0 ;
                    double t90520 = 1.0/(tau_b[index]*tau_b[index]);
                    double t90521 = C_k*t90520*t90513*t90518;
                    double t90526 = tau_a[index]*1.0E20;
                    double t90522 = t90516-t90526;
                    double t90523 = ( (t90522 > 0.0) ?  1.0 : 0.0 ) ;
                    double t90524 = t90523*1.0E20;
                    double t90525 = C_k*t90513*t90517*t90518;
                    double t90527 = t90524+t90525+1.0;
                    double t90528 = t90524+t90525-1.0;
                    double t90529 = t90528*t90528;
                    double t90531 = C_k*t90513*t90517*t90519*1.0E20;
                    double t90530 = t90521-t90531;
                    double t90532 = t90529*t90529;
                    double t90533 = 1.0/pow(rho_b[index],8.0/3.0);
                    double t90534 = gx*gx;
                    double t90535 = 1.0/pow(rho_b[index],1.6E1/3.0);
                    double t90536 = gamma_bb[index]*gamma_bb[index];
                    double t90537 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                       rho_b[index]*rho_b[index]);
                    double t90538 = gamma_bb[index]*gx*t90533;
                    double t90539 = t90538+1.0;
                    double t90540 = gamma_bb[index]*gx*t90533*3.0;
                    double t90541 = gamma_bb[index]*gx*t90534*t90536*t90537;
                    double t90542 = t90534*t90535*t90536*3.0;
                    double t90543 = t90540+t90541+t90542+1.0;
                    double t90544 = gamma_bb[index]*gx*t90533*2.0;
                    double t90545 = t90534*t90535*t90536;
                    double t90546 = t90544+t90545+1.0;
                    v_gamma_bb_tau_b_[index] = c0*pow(rho_b[index],4.0/3.0)*(X-1.0)*((cxnl1*gx*t90533)/t90539+(cxnl2* \
                       gamma_bb[index]*t90534*t90535*2.0)/t90546-cxnl1*gamma_bb[index]*t90534*t90535*1.0/(t90539*t90539)- \
                       cxnl2*t90534*t90535*t90536*1.0/(t90546*t90546)*(gx*t90533*2.0+gamma_bb[index]*t90534*t90535*2.0)+(cxnl3* \
                       gx*t90534*t90536*t90537*3.0)/t90543-cxnl3*gamma_bb[index]*gx*t90534*1.0/(t90543*t90543)*t90536*t90537* \
                       (gx*t90533*3.0+gamma_bb[index]*t90534*t90535*6.0+gx*t90534*t90536*t90537*3.0))*(t90530/t90527+t90530* \
                       t90532*1.0/(t90527*t90527*t90527*t90527*t90527)*5.0-t90530*1.0/(t90527*t90527)*t90528-t90530*1.0/(t90527* \
                       t90527*t90527)*t90529*6.0+t90530*1.0/(t90527*t90527*t90527*t90527)*t90528*t90529*6.0-t90532*1.0/(t90527* \
                       t90527*t90527*t90527*t90527*t90527)*t90528*(t90521-t90531)*5.0);
                } else {
                    v_gamma_bb_tau_b_[index] = 0.0;
                }

            }
        }
    }
}

}}

