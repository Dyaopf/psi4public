#include <libmints/vector.h>
#include "VWN_Cfunctional.h"
#include "utility.h"
#include <cmath>

using namespace psi;

namespace psi {

VWN_CFunctional::VWN_CFunctional()
{
    name_ = "VWN_C";
    description_ = "    VWN5 Correlation Functional\n";
    citation_ = "    S.H. Vosko, L. Wilk, and M. Nusair, Can. J. Phys., 58, 1200-1211, 1980\n";
    alpha_ = 1.0;
    omega_ = 0.0;
    lrc_ = false;
    gga_ = false;
    meta_ = false;
    parameters_["c"] =   6.2035049089939986E-01;
    parameters_["d2fz0"] =   1.7099209341613653E+00;
    parameters_["EcP_1"] =   3.1090699999999999E-02;
    parameters_["EcP_2"] =  -1.0498000000000000E-01;
    parameters_["EcP_3"] =   3.7274400000000001E+00;
    parameters_["EcP_4"] =   1.2935200000000000E+01;
    parameters_["EcF_1"] =   1.5545349999999999E-02;
    parameters_["EcF_2"] =  -3.2500000000000001E-01;
    parameters_["EcF_3"] =   7.0604199999999997E+00;
    parameters_["EcF_4"] =   1.8057800000000000E+01;
    parameters_["Ac_1"] =  -1.6886863940389629E-02;
    parameters_["Ac_2"] =  -4.7584000000000003E-03;
    parameters_["Ac_3"] =   1.1310700000000000E+00;
    parameters_["Ac_4"] =   1.3004500000000000E+01;
    parameters_["two_13"] =   1.2599210498948732E+00;
}
VWN_CFunctional::~VWN_CFunctional()
{
}
void VWN_CFunctional::compute_functional(const std::map<std::string,SharedVector>& in, const std::map<std::string,SharedVector>& out, int npoints, int deriv, double alpha)
{
    double c = parameters_["c"];
    double d2fz0 = parameters_["d2fz0"];
    double EcP_1 = parameters_["EcP_1"];
    double EcP_2 = parameters_["EcP_2"];
    double EcP_3 = parameters_["EcP_3"];
    double EcP_4 = parameters_["EcP_4"];
    double EcF_1 = parameters_["EcF_1"];
    double EcF_2 = parameters_["EcF_2"];
    double EcF_3 = parameters_["EcF_3"];
    double EcF_4 = parameters_["EcF_4"];
    double Ac_1 = parameters_["Ac_1"];
    double Ac_2 = parameters_["Ac_2"];
    double Ac_3 = parameters_["Ac_3"];
    double Ac_4 = parameters_["Ac_4"];
    double two_13 = parameters_["two_13"];

    // Overall scale factor
    double scale = alpha_ * alpha;

    // => Input variables <= //

    double* rho_ap = NULL;
    double* rho_bp = NULL;
    double* gamma_aap = NULL;
    double* gamma_abp = NULL;
    double* gamma_bbp = NULL;
    double* tau_ap = NULL;
    double* tau_bp = NULL;

    if (true) {
        rho_ap = in.find("RHO_A")->second->pointer();
        rho_bp = in.find("RHO_B")->second->pointer();
    }
    if (gga_) {  
        gamma_aap = in.find("GAMMA_AA")->second->pointer();
        gamma_abp = in.find("GAMMA_AB")->second->pointer();
        gamma_bbp = in.find("GAMMA_BB")->second->pointer();
    } 
    if (meta_)  {
        tau_ap = in.find("TAU_A")->second->pointer();
        tau_bp = in.find("TAU_B")->second->pointer();
    }

    // => Outut variables <= //

    double* v = NULL;

    double* v_rho_a = NULL;
    double* v_rho_b = NULL;
    double* v_gamma_aa = NULL;
    double* v_gamma_ab = NULL;
    double* v_gamma_bb = NULL;
    double* v_tau_a = NULL;
    double* v_tau_b = NULL;
     
    double* v_rho_a_rho_a = NULL;
    double* v_rho_a_rho_b = NULL;
    double* v_rho_b_rho_b = NULL;
    double* v_gamma_aa_gamma_aa = NULL;
    double* v_gamma_aa_gamma_ab = NULL;
    double* v_gamma_aa_gamma_bb = NULL;
    double* v_gamma_ab_gamma_ab = NULL;
    double* v_gamma_ab_gamma_bb = NULL;
    double* v_gamma_bb_gamma_bb = NULL;
    double* v_tau_a_tau_a = NULL;
    double* v_tau_a_tau_b = NULL;
    double* v_tau_b_tau_b = NULL;
    double* v_rho_a_gamma_aa = NULL;
    double* v_rho_a_gamma_ab = NULL;
    double* v_rho_a_gamma_bb = NULL;
    double* v_rho_b_gamma_aa = NULL;
    double* v_rho_b_gamma_ab = NULL;
    double* v_rho_b_gamma_bb = NULL;
    double* v_rho_a_tau_a = NULL;
    double* v_rho_a_tau_b = NULL;
    double* v_rho_b_tau_a = NULL;
    double* v_rho_b_tau_b = NULL;
    double* v_gamma_aa_tau_a = NULL;
    double* v_gamma_aa_tau_b = NULL;
    double* v_gamma_ab_tau_a = NULL;
    double* v_gamma_ab_tau_b = NULL;
    double* v_gamma_bb_tau_a = NULL;
    double* v_gamma_bb_tau_b = NULL;

    if (deriv >= 0) {
        v = out.find("V")->second->pointer();
    } 
    if (deriv >= 1) {
        if (true) {
            v_rho_a = out.find("V_RHO_A")->second->pointer();
            v_rho_b = out.find("V_RHO_B")->second->pointer();
        }
        if (gga_) {
            v_gamma_aa = out.find("V_GAMMA_AA")->second->pointer();
            v_gamma_ab = out.find("V_GAMMA_AB")->second->pointer();
            v_gamma_bb = out.find("V_GAMMA_BB")->second->pointer();
        }
        if (meta_) {    
            v_tau_a = out.find("V_TAU_A")->second->pointer();
            v_tau_b = out.find("V_TAU_B")->second->pointer();
        }
    }
    if (deriv >= 2) {
        if (true) {
            v_rho_a_rho_a = out.find("V_RHO_A_RHO_A")->second->pointer();
            v_rho_a_rho_b = out.find("V_RHO_A_RHO_B")->second->pointer();
            v_rho_b_rho_b = out.find("V_RHO_B_RHO_B")->second->pointer();
        }
        if (gga_) {
            v_gamma_aa_gamma_aa = out.find("V_GAMMA_AA_GAMMA_AA")->second->pointer();
            v_gamma_aa_gamma_ab = out.find("V_GAMMA_AA_GAMMA_AB")->second->pointer();
            v_gamma_aa_gamma_bb = out.find("V_GAMMA_AA_GAMMA_BB")->second->pointer();
            v_gamma_ab_gamma_ab = out.find("V_GAMMA_AB_GAMMA_AB")->second->pointer();
            v_gamma_ab_gamma_bb = out.find("V_GAMMA_AB_GAMMA_BB")->second->pointer();
            v_gamma_bb_gamma_bb = out.find("V_GAMMA_BB_GAMMA_BB")->second->pointer();
        }
        if (meta_) {
            v_tau_a_tau_a = out.find("V_TAU_A_TAU_A")->second->pointer();
            v_tau_a_tau_b = out.find("V_TAU_A_TAU_B")->second->pointer();
            v_tau_b_tau_b = out.find("V_TAU_B_TAU_B")->second->pointer();
        }
        if (gga_) {
            v_rho_a_gamma_aa = out.find("V_RHO_A_GAMMA_AA")->second->pointer();
            v_rho_a_gamma_ab = out.find("V_RHO_A_GAMMA_AB")->second->pointer();
            v_rho_a_gamma_bb = out.find("V_RHO_A_GAMMA_BB")->second->pointer();
            v_rho_b_gamma_aa = out.find("V_RHO_B_GAMMA_AA")->second->pointer();
            v_rho_b_gamma_ab = out.find("V_RHO_B_GAMMA_AB")->second->pointer();
            v_rho_b_gamma_bb = out.find("V_RHO_B_GAMMA_BB")->second->pointer();
        }
        if (meta_) {
            v_rho_a_tau_a = out.find("V_RHO_A_TAU_A")->second->pointer();
            v_rho_a_tau_b = out.find("V_RHO_A_TAU_B")->second->pointer();
            v_rho_b_tau_a = out.find("V_RHO_B_TAU_A")->second->pointer();
            v_rho_b_tau_b = out.find("V_RHO_B_TAU_B")->second->pointer();
        }
        if (gga_ && meta_) {
            v_gamma_aa_tau_a = out.find("V_GAMMA_AA_TAU_A")->second->pointer();
            v_gamma_aa_tau_b = out.find("V_GAMMA_AA_TAU_B")->second->pointer();
            v_gamma_ab_tau_a = out.find("V_GAMMA_AB_TAU_A")->second->pointer();
            v_gamma_ab_tau_b = out.find("V_GAMMA_AB_TAU_B")->second->pointer();
            v_gamma_bb_tau_a = out.find("V_GAMMA_BB_TAU_A")->second->pointer();
            v_gamma_bb_tau_b = out.find("V_GAMMA_BB_TAU_B")->second->pointer();
        }
    }

    // => Loop over points <= //

    for (int Q = 0; Q < npoints; Q++) {

        // Input variables 
        double rho_a;
        double rho_b;
        double gamma_aa;
        double gamma_ab;
        double gamma_bb;
        double tau_a;
        double tau_b;

        if (true) {
            rho_a = rho_ap[Q];
            rho_b = rho_bp[Q];
        }        
        if (gga_) {
            gamma_aa = gamma_aap[Q];
            gamma_ab = gamma_abp[Q];
            gamma_bb = gamma_bbp[Q];
        }        
        if (meta_) {
            tau_a = tau_ap[Q];
            tau_b = tau_bp[Q];
        }        

        // Definitions (asymptotics to prevent numerical problems)
        if (rho_a < lsda_cutoff_ && rho_b < lsda_cutoff_) {
            continue;
        } else if (rho_a < lsda_cutoff_) {
            // v
            if (deriv >= 0) {
                double t44704 = rho_a+rho_b;
                double t44705 = 1.0/pow(t44704,1.0/3.0);
                double t44706 = c*t44705;
                double t44707 = sqrt(t44706);
                double t44708 = EcP_4*4.0;
                double t44709 = EcP_3*EcP_3;
                double t44710 = t44708-t44709;
                double t44711 = EcP_2-t44707;
                double t44712 = EcP_3*t44707;
                double t44713 = EcP_4+t44712+t44706;
                double t44714 = 1.0/t44713;
                double t44715 = sqrt(t44710);
                double t44716 = t44707*2.0;
                double t44717 = EcP_3+t44716;
                double t44718 = 1.0/t44717;
                double t44719 = t44715*t44718;
                double t44720 = atan(t44719);
                double t44721 = 1.0/sqrt(t44710);
                double t44722 = EcF_4*4.0;
                double t44723 = EcF_3*EcF_3;
                double t44724 = t44722-t44723;
                double t44725 = EcF_2-t44707;
                double t44726 = EcF_3*t44707;
                double t44727 = EcF_4+t44706+t44726;
                double t44728 = 1.0/t44727;
                double t44729 = sqrt(t44724);
                double t44730 = EcF_3+t44716;
                double t44731 = 1.0/t44730;
                double t44732 = t44731*t44729;
                double t44733 = atan(t44732);
                double t44734 = 1.0/sqrt(t44724);
                double t44735 = c*t44705*t44714;
                double t44736 = log(t44735);
                double t44737 = EcP_3*t44720*t44721*2.0;
                double t44738 = t44711*t44711;
                double t44739 = t44714*t44738;
                double t44740 = log(t44739);
                double t44741 = EcP_2*4.0;
                double t44742 = EcP_3*2.0;
                double t44743 = t44741+t44742;
                double t44744 = t44720*t44721*t44743;
                double t44745 = t44740+t44744;
                double t44746 = EcP_2*EcP_2;
                double t44747 = EcP_2*EcP_3;
                double t44748 = EcP_4+t44746+t44747;
                double t44749 = 1.0/t44748;
                double t44750 = t44736+t44737-EcP_2*EcP_3*t44745*t44749;
                double t44751 = EcP_1*t44750;
                v[Q] += scale * t44704*(t44751-((pow(2.0,1.0/3.0)*2.0-2.0)*(t44751-EcF_1*(log(c*t44705*t44728)+EcF_3*t44733*t44734*2.0-(EcF_2*EcF_3*(log((t44725*t44725)*t44728)+t44733*t44734*(EcF_2*4.0+EcF_3*2.0)))/(EcF_4+EcF_2*EcF_2+EcF_2*EcF_3))))/(two_13*2.0-2.0));
            }
            
            // v_rho_a
            if (deriv >= 1) {
                double t44753 = rho_a+rho_b;
                double t44754 = 1.0/pow(t44753,1.0/3.0);
                double t44755 = c*t44754;
                double t44756 = sqrt(t44755);
                double t44757 = EcP_4*4.0;
                double t44758 = EcP_3*EcP_3;
                double t44759 = t44757-t44758;
                double t44760 = EcP_2-t44756;
                double t44761 = EcP_3*t44756;
                double t44762 = EcP_4+t44761+t44755;
                double t44763 = 1.0/t44762;
                double t44764 = sqrt(t44759);
                double t44765 = t44756*2.0;
                double t44766 = EcP_3+t44765;
                double t44767 = 1.0/t44766;
                double t44768 = t44764*t44767;
                double t44769 = atan(t44768);
                double t44770 = 1.0/sqrt(t44759);
                double t44771 = 1.0/pow(t44753,4.0/3.0);
                double t44772 = c*t44771*(1.0/3.0);
                double t44773 = 1.0/sqrt(t44755);
                double t44774 = EcP_3*c*t44771*t44773*(1.0/6.0);
                double t44775 = t44772+t44774;
                double t44776 = t44760*t44760;
                double t44777 = 1.0/(t44762*t44762);
                double t44778 = EcP_2*4.0;
                double t44779 = EcP_3*2.0;
                double t44780 = t44778+t44779;
                double t44781 = 1.0/(t44766*t44766);
                double t44782 = EcP_2*EcP_2;
                double t44783 = EcP_2*EcP_3;
                double t44784 = EcP_4+t44782+t44783;
                double t44785 = 1.0/t44784;
                double t44786 = t44781*t44759;
                double t44787 = t44786+1.0;
                double t44788 = 1.0/t44787;
                double t44789 = 1.0/c;
                double t44790 = EcF_3*t44756;
                double t44791 = EcF_4+t44790+t44755;
                double t44792 = pow(t44753,1.0/3.0);
                double t44793 = EcF_3*c*t44771*t44773*(1.0/6.0);
                double t44794 = t44772+t44793;
                double t44795 = EcF_2-t44756;
                double t44796 = 1.0/(t44791*t44791);
                double t44797 = 1.0/t44791;
                double t44798 = EcF_3+t44765;
                double t44799 = 1.0/(t44798*t44798);
                double t44800 = EcF_4*4.0;
                double t44801 = EcF_3*EcF_3;
                double t44802 = t44800-t44801;
                double t44803 = t44802*t44799;
                double t44804 = t44803+1.0;
                double t44805 = 1.0/t44804;
                double t44806 = c*t44771*t44763*(1.0/3.0);
                double t44807 = t44806-c*t44754*t44775*t44777;
                double t44808 = t44762*t44807*t44792*t44789;
                double t44809 = t44775*t44776*t44777;
                double t44810 = c*t44760*t44771*t44763*t44773*(1.0/3.0);
                double t44811 = t44810+t44809;
                double t44812 = 1.0/(t44760*t44760);
                double t44813 = t44811*t44812*t44762;
                double t44814 = c*t44771*t44780*t44781*t44773*t44788*(1.0/3.0);
                double t44815 = t44813+t44814;
                double t44816 = EcP_2*EcP_3*t44815*t44785;
                double t44817 = t44816+t44808-EcP_3*c*t44771*t44781*t44773*t44788*(2.0/3.0);
                double t44818 = EcP_1*t44817;
                double t44819 = pow(2.0,1.0/3.0);
                double t44820 = t44819*2.0;
                double t44821 = t44820-2.0;
                double t44822 = two_13*2.0;
                double t44823 = t44822-2.0;
                double t44824 = 1.0/t44823;
                double t44825 = t44795*t44795;
                double t44826 = sqrt(t44802);
                double t44827 = 1.0/t44798;
                double t44828 = t44826*t44827;
                double t44829 = atan(t44828);
                double t44830 = 1.0/sqrt(t44802);
                double t44831 = EcF_2*4.0;
                double t44832 = EcF_3*2.0;
                double t44833 = t44831+t44832;
                double t44834 = EcF_2*EcF_2;
                double t44835 = EcF_2*EcF_3;
                double t44836 = EcF_4+t44834+t44835;
                double t44837 = 1.0/t44836;
                double t44838 = c*t44754*t44763;
                double t44839 = log(t44838);
                double t44840 = EcP_3*t44770*t44769*2.0;
                double t44841 = t44763*t44776;
                double t44842 = log(t44841);
                double t44843 = t44770*t44780*t44769;
                double t44844 = t44842+t44843;
                double t44845 = t44840+t44839-EcP_2*EcP_3*t44844*t44785;
                double t44846 = EcP_1*t44845;
                v_rho_a[Q] += scale * t44846-t44753*(t44818-t44821*t44824*(t44818-EcF_1*(EcF_2*EcF_3*t44837*(t44791*1.0/(t44795*t44795)*(t44825*t44794*t44796+c*t44771*t44773*t44795*t44797*(1.0/3.0))+c*t44805*t44833*t44771*t44773*t44799*(1.0/3.0))+t44791*t44792*t44789*(c*t44771*t44797*(1.0/3.0)-c*t44754*t44794*t44796)-EcF_3*c*t44805*t44771*t44773*t44799*(2.0/3.0))))-t44821*t44824*(t44846-EcF_1*(log(c*t44754*t44797)+EcF_3*t44830*t44829*2.0-EcF_2*EcF_3*t44837*(log(t44825*t44797)+t44830*t44833*t44829)));
            }
            
            // v_rho_b
            if (deriv >= 1) {
                double t44848 = rho_a+rho_b;
                double t44849 = 1.0/pow(t44848,1.0/3.0);
                double t44850 = c*t44849;
                double t44851 = sqrt(t44850);
                double t44852 = EcP_4*4.0;
                double t44853 = EcP_3*EcP_3;
                double t44854 = t44852-t44853;
                double t44855 = EcP_2-t44851;
                double t44856 = EcP_3*t44851;
                double t44857 = EcP_4+t44850+t44856;
                double t44858 = 1.0/t44857;
                double t44859 = sqrt(t44854);
                double t44860 = t44851*2.0;
                double t44861 = EcP_3+t44860;
                double t44862 = 1.0/t44861;
                double t44863 = t44862*t44859;
                double t44864 = atan(t44863);
                double t44865 = 1.0/sqrt(t44854);
                double t44866 = 1.0/pow(t44848,4.0/3.0);
                double t44867 = c*t44866*(1.0/3.0);
                double t44868 = 1.0/sqrt(t44850);
                double t44869 = EcP_3*c*t44866*t44868*(1.0/6.0);
                double t44870 = t44867+t44869;
                double t44871 = t44855*t44855;
                double t44872 = 1.0/(t44857*t44857);
                double t44873 = EcP_2*4.0;
                double t44874 = EcP_3*2.0;
                double t44875 = t44873+t44874;
                double t44876 = 1.0/(t44861*t44861);
                double t44877 = EcP_2*EcP_2;
                double t44878 = EcP_2*EcP_3;
                double t44879 = EcP_4+t44877+t44878;
                double t44880 = 1.0/t44879;
                double t44881 = t44854*t44876;
                double t44882 = t44881+1.0;
                double t44883 = 1.0/t44882;
                double t44884 = 1.0/c;
                double t44885 = EcF_3*t44851;
                double t44886 = EcF_4+t44850+t44885;
                double t44887 = pow(t44848,1.0/3.0);
                double t44888 = EcF_3*c*t44866*t44868*(1.0/6.0);
                double t44889 = t44867+t44888;
                double t44890 = EcF_2-t44851;
                double t44891 = 1.0/(t44886*t44886);
                double t44892 = 1.0/t44886;
                double t44893 = EcF_3+t44860;
                double t44894 = 1.0/(t44893*t44893);
                double t44895 = EcF_4*4.0;
                double t44896 = EcF_3*EcF_3;
                double t44897 = t44895-t44896;
                double t44898 = t44894*t44897;
                double t44899 = t44898+1.0;
                double t44900 = 1.0/t44899;
                double t44901 = c*t44866*t44858*(1.0/3.0);
                double t44902 = t44901-c*t44870*t44872*t44849;
                double t44903 = t44902*t44857*t44884*t44887;
                double t44904 = t44870*t44871*t44872;
                double t44905 = c*t44855*t44866*t44858*t44868*(1.0/3.0);
                double t44906 = t44904+t44905;
                double t44907 = 1.0/(t44855*t44855);
                double t44908 = t44906*t44907*t44857;
                double t44909 = c*t44883*t44866*t44875*t44876*t44868*(1.0/3.0);
                double t44910 = t44908+t44909;
                double t44911 = EcP_2*EcP_3*t44910*t44880;
                double t44912 = t44911+t44903-EcP_3*c*t44883*t44866*t44876*t44868*(2.0/3.0);
                double t44913 = EcP_1*t44912;
                double t44914 = pow(2.0,1.0/3.0);
                double t44915 = t44914*2.0;
                double t44916 = t44915-2.0;
                double t44917 = two_13*2.0;
                double t44918 = t44917-2.0;
                double t44919 = 1.0/t44918;
                double t44920 = t44890*t44890;
                double t44921 = sqrt(t44897);
                double t44922 = 1.0/t44893;
                double t44923 = t44921*t44922;
                double t44924 = atan(t44923);
                double t44925 = 1.0/sqrt(t44897);
                double t44926 = EcF_2*4.0;
                double t44927 = EcF_3*2.0;
                double t44928 = t44926+t44927;
                double t44929 = EcF_2*EcF_2;
                double t44930 = EcF_2*EcF_3;
                double t44931 = EcF_4+t44930+t44929;
                double t44932 = 1.0/t44931;
                double t44933 = c*t44849*t44858;
                double t44934 = log(t44933);
                double t44935 = EcP_3*t44864*t44865*2.0;
                double t44936 = t44871*t44858;
                double t44937 = log(t44936);
                double t44938 = t44864*t44865*t44875;
                double t44939 = t44937+t44938;
                double t44940 = t44934+t44935-EcP_2*EcP_3*t44880*t44939;
                double t44941 = EcP_1*t44940;
                v_rho_b[Q] += scale * t44941-t44848*(t44913-t44916*t44919*(t44913-EcF_1*(EcF_2*EcF_3*t44932*(1.0/(t44890*t44890)*t44886*(t44920*t44891*t44889+c*t44890*t44892*t44866*t44868*(1.0/3.0))+c*t44900*t44928*t44866*t44894*t44868*(1.0/3.0))+t44884*t44886*t44887*(c*t44892*t44866*(1.0/3.0)-c*t44891*t44849*t44889)-EcF_3*c*t44900*t44866*t44894*t44868*(2.0/3.0))))-t44916*t44919*(t44941-EcF_1*(log(c*t44892*t44849)+EcF_3*t44924*t44925*2.0-EcF_2*EcF_3*t44932*(log(t44920*t44892)+t44924*t44925*t44928)));
            }
            
            // v_rho_a_rho_a
            if (deriv >= 2) {
                double t44948 = rho_a+rho_b;
                double t44949 = 1.0/pow(t44948,1.0/3.0);
                double t44950 = c*t44949;
                double t44951 = 1.0/pow(t44948,4.0/3.0);
                double t44952 = sqrt(t44950);
                double t44953 = EcP_3*t44952;
                double t44954 = EcP_4+t44950+t44953;
                double t44955 = c*t44951*(1.0/3.0);
                double t44956 = 1.0/sqrt(t44950);
                double t44957 = EcP_3*c*t44951*t44956*(1.0/6.0);
                double t44958 = t44955+t44957;
                double t44959 = EcP_2-t44952;
                double t44960 = 1.0/(t44954*t44954);
                double t44961 = 1.0/t44954;
                double t44962 = t44952*2.0;
                double t44963 = EcP_3+t44962;
                double t44964 = 1.0/(t44963*t44963);
                double t44965 = EcP_4*4.0;
                double t44966 = EcP_3*EcP_3;
                double t44967 = t44965-t44966;
                double t44968 = t44964*t44967;
                double t44969 = t44968+1.0;
                double t44970 = 1.0/t44969;
                double t44971 = 1.0/c;
                double t44972 = c*t44951*t44961*(1.0/3.0);
                double t44975 = c*t44960*t44949*t44958;
                double t44973 = t44972-t44975;
                double t44974 = pow(t44948,1.0/3.0);
                double t44976 = 1.0/pow(t44948,7.0/3.0);
                double t44977 = EcP_2*EcP_2;
                double t44978 = EcP_2*EcP_3;
                double t44979 = EcP_4+t44977+t44978;
                double t44980 = 1.0/t44979;
                double t44981 = t44959*t44959;
                double t44982 = t44960*t44981*t44958;
                double t44983 = c*t44951*t44961*t44956*t44959*(1.0/3.0);
                double t44984 = t44982+t44983;
                double t44985 = 1.0/(t44959*t44959);
                double t44986 = c*t44976*(4.0/9.0);
                double t44987 = EcP_3*c*t44956*t44976*(2.0/9.0);
                double t44988 = c*c;
                double t44989 = 1.0/pow(t44948,8.0/3.0);
                double t44990 = 1.0/pow(t44950,3.0/2.0);
                double t45035 = EcP_3*t44990*t44988*t44989*(1.0/3.6E1);
                double t44991 = t44986+t44987-t45035;
                double t44992 = t44958*t44958;
                double t44993 = 1.0/(t44954*t44954*t44954);
                double t44994 = EcP_2*4.0;
                double t44995 = EcP_3*2.0;
                double t44996 = t44994+t44995;
                double t44997 = 1.0/(t44963*t44963*t44963);
                double t44998 = 1.0/(t44963*t44963*t44963*t44963*t44963);
                double t44999 = 1.0/(t44969*t44969);
                double t45000 = EcF_3*t44952;
                double t45001 = EcF_4+t44950+t45000;
                double t45002 = EcF_3*c*t44951*t44956*(1.0/6.0);
                double t45003 = t44955+t45002;
                double t45004 = 1.0/t45001;
                double t45005 = c*t44951*t45004*(1.0/3.0);
                double t45006 = 1.0/(t45001*t45001);
                double t45061 = c*t44949*t45003*t45006;
                double t45007 = t45005-t45061;
                double t45008 = 1.0/pow(t44948,2.0/3.0);
                double t45009 = EcF_2-t44952;
                double t45010 = 1.0/(t45009*t45009);
                double t45011 = t45009*t45009;
                double t45012 = EcF_3*c*t44956*t44976*(2.0/9.0);
                double t45013 = t44986+t45012-EcF_3*t44990*t44988*t44989*(1.0/3.6E1);
                double t45014 = t45003*t45003;
                double t45015 = 1.0/(t45001*t45001*t45001);
                double t45016 = EcF_3+t44962;
                double t45017 = EcF_2*4.0;
                double t45018 = EcF_3*2.0;
                double t45019 = t45017+t45018;
                double t45020 = 1.0/(t45016*t45016);
                double t45021 = EcF_4*4.0;
                double t45022 = EcF_3*EcF_3;
                double t45023 = t45021-t45022;
                double t45024 = t45020*t45023;
                double t45025 = t45024+1.0;
                double t45026 = 1.0/t45025;
                double t45027 = t45011*t45003*t45006;
                double t45028 = c*t44951*t44956*t45004*t45009*(1.0/3.0);
                double t45029 = t45027+t45028;
                double t45030 = 1.0/(t45016*t45016*t45016);
                double t45031 = 1.0/(t45016*t45016*t45016*t45016*t45016);
                double t45032 = 1.0/(t45025*t45025);
                double t45033 = t44971*t44973*t44974*t44958;
                double t45034 = c*t44961*t44976*(4.0/9.0);
                double t45036 = c*t44992*t44993*t44949*2.0;
                double t45037 = t45034+t45036-c*t44951*t44960*t44958*(2.0/3.0)-c*t44960*t44991*t44949;
                double t45038 = t44971*t44954*t44974*t45037;
                double t45039 = t44984*t44958*t44985;
                double t45040 = c*t44961*t44976*(1.0/1.8E1);
                double t45041 = t44981*t44992*t44993*2.0;
                double t45042 = t44961*t44990*t44959*t44988*t44989*(1.0/1.8E1);
                double t45043 = c*t44951*t44960*t44956*t44958*t44959*(2.0/3.0);
                double t45044 = t45040+t45041+t45042+t45043-t44960*t44981*t44991-c*t44961*t44956*t44976*t44959*(4.0/9.0);
                double t45045 = c*t44970*t44964*t44956*t44976*t44996*(4.0/9.0);
                double t45046 = 1.0/(t44959*t44959*t44959);
                double t45047 = c*t44951*t44954*t44956*t44984*t45046*(1.0/3.0);
                double t45048 = c*t44967*t44976*t44996*t44998*t44999*(2.0/9.0);
                double t45049 = t45045+t45047+t45039+t45048-t44954*t44985*t45044-c*t44970*t44976*t44996*t44997*(2.0/9.0)-t44970*t44990*t44964*t44996*t44988*t44989*(1.0/1.8E1);
                double t45050 = EcP_2*EcP_3*t44980*t45049;
                double t45051 = EcP_3*c*t44970*t44976*t44997*(4.0/9.0);
                double t45052 = EcP_3*t44970*t44990*t44964*t44988*t44989*(1.0/9.0);
                double t45053 = t45050+t45033+t45051+t45052+t45038-t44971*t44954*t44973*t45008*(1.0/3.0)-EcP_3*c*t44970*t44964*t44956*t44976*(8.0/9.0)-EcP_3*c*t44967*t44976*t44998*t44999*(4.0/9.0);
                double t45054 = EcP_1*t45053;
                double t45055 = pow(2.0,1.0/3.0);
                double t45056 = t45055*2.0;
                double t45057 = t45056-2.0;
                double t45058 = two_13*2.0;
                double t45059 = t45058-2.0;
                double t45060 = 1.0/t45059;
                double t45062 = EcF_2*EcF_2;
                double t45063 = EcF_2*EcF_3;
                double t45064 = EcF_4+t45062+t45063;
                double t45065 = 1.0/t45064;
                double t45066 = t44971*t44954*t44973*t44974;
                double t45067 = t44954*t44984*t44985;
                double t45068 = c*t44951*t44970*t44964*t44956*t44996*(1.0/3.0);
                double t45069 = t45067+t45068;
                double t45070 = EcP_2*EcP_3*t44980*t45069;
                double t45071 = t45070+t45066-EcP_3*c*t44951*t44970*t44964*t44956*(2.0/3.0);
                v_rho_a_rho_a[Q] += scale * EcP_1*t45071*-2.0+t44948*(t45054-t45060*t45057*(t45054-EcF_1*(t44971*t44974*t45001*(c*t44976*t45004*(4.0/9.0)-c*t44951*t45003*t45006*(2.0/3.0)-c*t44949*t45013*t45006+c*t44949*t45014*t45015*2.0)+t44971*t44974*t45003*t45007-t44971*t45001*t45007*t45008*(1.0/3.0)+EcF_2*EcF_3*t45065*(-t45001*t45010*(c*t44976*t45004*(1.0/1.8E1)-t45011*t45013*t45006+t45011*t45014*t45015*2.0-c*t44956*t44976*t45004*t45009*(4.0/9.0)+t44990*t44988*t44989*t45004*t45009*(1.0/1.8E1)+c*t44951*t44956*t45003*t45006*t45009*(2.0/3.0))+t45010*t45003*t45029-c*t44976*t45030*t45026*t45019*(2.0/9.0)+c*t44956*t44976*t45020*t45026*t45019*(4.0/9.0)+c*t44976*t45031*t45023*t45032*t45019*(2.0/9.0)-t44990*t44988*t44989*t45020*t45026*t45019*(1.0/1.8E1)+c*t44951*t44956*t45001*1.0/(t45009*t45009*t45009)*t45029*(1.0/3.0))+EcF_3*c*t44976*t45030*t45026*(4.0/9.0)-EcF_3*c*t44956*t44976*t45020*t45026*(8.0/9.0)-EcF_3*c*t44976*t45031*t45023*t45032*(4.0/9.0)+EcF_3*t44990*t44988*t44989*t45020*t45026*(1.0/9.0))))+t45060*t45057*(EcP_1*t45071-EcF_1*(t44971*t44974*t45001*t45007+EcF_2*EcF_3*t45065*(t45001*t45010*t45029+c*t44951*t44956*t45020*t45026*t45019*(1.0/3.0))-EcF_3*c*t44951*t44956*t45020*t45026*(2.0/3.0)))*2.0;
            }
            
            // v_rho_a_rho_b
            if (deriv >= 2) {
                double t45073 = rho_a+rho_b;
                double t45074 = 1.0/pow(t45073,1.0/3.0);
                double t45075 = c*t45074;
                double t45076 = 1.0/pow(t45073,4.0/3.0);
                double t45077 = sqrt(t45075);
                double t45078 = EcP_3*t45077;
                double t45079 = EcP_4+t45075+t45078;
                double t45080 = c*t45076*(1.0/3.0);
                double t45081 = 1.0/sqrt(t45075);
                double t45082 = EcP_3*c*t45081*t45076*(1.0/6.0);
                double t45083 = t45080+t45082;
                double t45084 = EcP_2-t45077;
                double t45085 = 1.0/(t45079*t45079);
                double t45086 = 1.0/t45079;
                double t45087 = t45077*2.0;
                double t45088 = EcP_3+t45087;
                double t45089 = 1.0/(t45088*t45088);
                double t45090 = EcP_4*4.0;
                double t45091 = EcP_3*EcP_3;
                double t45092 = t45090-t45091;
                double t45093 = t45092*t45089;
                double t45094 = t45093+1.0;
                double t45095 = 1.0/t45094;
                double t45096 = 1.0/c;
                double t45097 = c*t45076*t45086*(1.0/3.0);
                double t45100 = c*t45074*t45083*t45085;
                double t45098 = -t45100+t45097;
                double t45099 = pow(t45073,1.0/3.0);
                double t45101 = 1.0/pow(t45073,7.0/3.0);
                double t45102 = EcP_2*EcP_2;
                double t45103 = EcP_2*EcP_3;
                double t45104 = EcP_4+t45102+t45103;
                double t45105 = 1.0/t45104;
                double t45106 = t45084*t45084;
                double t45107 = t45106*t45083*t45085;
                double t45108 = c*t45081*t45084*t45076*t45086*(1.0/3.0);
                double t45109 = t45107+t45108;
                double t45110 = 1.0/(t45084*t45084);
                double t45111 = c*t45101*(4.0/9.0);
                double t45112 = EcP_3*c*t45101*t45081*(2.0/9.0);
                double t45113 = c*c;
                double t45114 = 1.0/pow(t45073,8.0/3.0);
                double t45115 = 1.0/pow(t45075,3.0/2.0);
                double t45160 = EcP_3*t45113*t45114*t45115*(1.0/3.6E1);
                double t45116 = t45111+t45112-t45160;
                double t45117 = t45083*t45083;
                double t45118 = 1.0/(t45079*t45079*t45079);
                double t45119 = EcP_2*4.0;
                double t45120 = EcP_3*2.0;
                double t45121 = t45120+t45119;
                double t45122 = 1.0/(t45088*t45088*t45088);
                double t45123 = 1.0/(t45088*t45088*t45088*t45088*t45088);
                double t45124 = 1.0/(t45094*t45094);
                double t45125 = EcF_3*t45077;
                double t45126 = EcF_4+t45125+t45075;
                double t45127 = EcF_3*c*t45081*t45076*(1.0/6.0);
                double t45128 = t45080+t45127;
                double t45129 = 1.0/t45126;
                double t45130 = c*t45129*t45076*(1.0/3.0);
                double t45131 = 1.0/(t45126*t45126);
                double t45186 = c*t45131*t45074*t45128;
                double t45132 = t45130-t45186;
                double t45133 = 1.0/pow(t45073,2.0/3.0);
                double t45134 = EcF_2-t45077;
                double t45135 = 1.0/(t45134*t45134);
                double t45136 = t45134*t45134;
                double t45137 = EcF_3*c*t45101*t45081*(2.0/9.0);
                double t45138 = t45111+t45137-EcF_3*t45113*t45114*t45115*(1.0/3.6E1);
                double t45139 = t45128*t45128;
                double t45140 = 1.0/(t45126*t45126*t45126);
                double t45141 = EcF_3+t45087;
                double t45142 = EcF_2*4.0;
                double t45143 = EcF_3*2.0;
                double t45144 = t45142+t45143;
                double t45145 = 1.0/(t45141*t45141);
                double t45146 = EcF_4*4.0;
                double t45147 = EcF_3*EcF_3;
                double t45148 = t45146-t45147;
                double t45149 = t45145*t45148;
                double t45150 = t45149+1.0;
                double t45151 = 1.0/t45150;
                double t45152 = t45131*t45136*t45128;
                double t45153 = c*t45134*t45081*t45129*t45076*(1.0/3.0);
                double t45154 = t45152+t45153;
                double t45155 = 1.0/(t45141*t45141*t45141);
                double t45156 = 1.0/(t45141*t45141*t45141*t45141*t45141);
                double t45157 = 1.0/(t45150*t45150);
                double t45158 = t45083*t45096*t45098*t45099;
                double t45159 = c*t45101*t45086*(4.0/9.0);
                double t45161 = c*t45117*t45118*t45074*2.0;
                double t45162 = t45161+t45159-c*t45116*t45074*t45085-c*t45083*t45076*t45085*(2.0/3.0);
                double t45163 = t45162*t45096*t45079*t45099;
                double t45164 = t45110*t45109*t45083;
                double t45165 = c*t45101*t45086*(1.0/1.8E1);
                double t45166 = t45106*t45117*t45118*2.0;
                double t45167 = t45113*t45114*t45115*t45084*t45086*(1.0/1.8E1);
                double t45168 = c*t45081*t45083*t45084*t45076*t45085*(2.0/3.0);
                double t45169 = t45165+t45166+t45167+t45168-t45106*t45116*t45085-c*t45101*t45081*t45084*t45086*(4.0/9.0);
                double t45170 = c*t45101*t45121*t45081*t45095*t45089*(4.0/9.0);
                double t45171 = 1.0/(t45084*t45084*t45084);
                double t45172 = c*t45081*t45171*t45109*t45076*t45079*(1.0/3.0);
                double t45173 = c*t45101*t45121*t45123*t45124*t45092*(2.0/9.0);
                double t45174 = t45170+t45172+t45164+t45173-t45110*t45079*t45169-c*t45101*t45121*t45122*t45095*(2.0/9.0)-t45121*t45113*t45114*t45115*t45095*t45089*(1.0/1.8E1);
                double t45175 = EcP_2*EcP_3*t45105*t45174;
                double t45176 = EcP_3*c*t45101*t45122*t45095*(4.0/9.0);
                double t45177 = EcP_3*t45113*t45114*t45115*t45095*t45089*(1.0/9.0);
                double t45178 = t45163+t45175+t45158+t45176+t45177-t45133*t45096*t45079*t45098*(1.0/3.0)-EcP_3*c*t45101*t45123*t45124*t45092*(4.0/9.0)-EcP_3*c*t45101*t45081*t45095*t45089*(8.0/9.0);
                double t45179 = EcP_1*t45178;
                double t45180 = pow(2.0,1.0/3.0);
                double t45181 = t45180*2.0;
                double t45182 = t45181-2.0;
                double t45183 = two_13*2.0;
                double t45184 = t45183-2.0;
                double t45185 = 1.0/t45184;
                double t45187 = EcF_2*EcF_2;
                double t45188 = EcF_2*EcF_3;
                double t45189 = EcF_4+t45187+t45188;
                double t45190 = 1.0/t45189;
                double t45191 = t45096*t45079*t45098*t45099;
                double t45192 = t45110*t45109*t45079;
                double t45193 = c*t45121*t45081*t45076*t45095*t45089*(1.0/3.0);
                double t45194 = t45192+t45193;
                double t45195 = EcP_2*EcP_3*t45105*t45194;
                double t45196 = t45191+t45195-EcP_3*c*t45081*t45076*t45095*t45089*(2.0/3.0);
                v_rho_a_rho_b[Q] += scale * EcP_1*t45196*-2.0+t45073*(t45179-t45182*t45185*(t45179-EcF_1*(t45126*t45096*t45099*(c*t45101*t45129*(4.0/9.0)-c*t45131*t45074*t45138-c*t45131*t45128*t45076*(2.0/3.0)+c*t45140*t45074*t45139*2.0)-t45132*t45133*t45126*t45096*(1.0/3.0)+t45132*t45128*t45096*t45099+EcF_2*EcF_3*t45190*(-t45126*t45135*(c*t45101*t45129*(1.0/1.8E1)-t45131*t45136*t45138+t45140*t45136*t45139*2.0-c*t45101*t45134*t45081*t45129*(4.0/9.0)+t45113*t45114*t45115*t45134*t45129*(1.0/1.8E1)+c*t45131*t45134*t45081*t45128*t45076*(2.0/3.0))+t45135*t45154*t45128-c*t45101*t45151*t45144*t45155*(2.0/9.0)+c*t45101*t45151*t45081*t45144*t45145*(4.0/9.0)+c*t45101*t45144*t45156*t45148*t45157*(2.0/9.0)-t45113*t45114*t45115*t45151*t45144*t45145*(1.0/1.8E1)+c*1.0/(t45134*t45134*t45134)*t45081*t45126*t45154*t45076*(1.0/3.0))+EcF_3*c*t45101*t45151*t45155*(4.0/9.0)-EcF_3*c*t45101*t45151*t45081*t45145*(8.0/9.0)-EcF_3*c*t45101*t45156*t45148*t45157*(4.0/9.0)+EcF_3*t45113*t45114*t45115*t45151*t45145*(1.0/9.0))))+t45182*t45185*(EcP_1*t45196-EcF_1*(t45132*t45126*t45096*t45099+EcF_2*EcF_3*t45190*(t45126*t45135*t45154+c*t45151*t45081*t45144*t45145*t45076*(1.0/3.0))-EcF_3*c*t45151*t45081*t45145*t45076*(2.0/3.0)))*2.0;
            }
            
            // v_rho_b_rho_b
            if (deriv >= 2) {
                double t45198 = rho_a+rho_b;
                double t45199 = 1.0/pow(t45198,1.0/3.0);
                double t45200 = c*t45199;
                double t45201 = 1.0/pow(t45198,4.0/3.0);
                double t45202 = sqrt(t45200);
                double t45203 = EcP_3*t45202;
                double t45204 = EcP_4+t45200+t45203;
                double t45205 = c*t45201*(1.0/3.0);
                double t45206 = 1.0/sqrt(t45200);
                double t45207 = EcP_3*c*t45201*t45206*(1.0/6.0);
                double t45208 = t45205+t45207;
                double t45209 = EcP_2-t45202;
                double t45210 = 1.0/(t45204*t45204);
                double t45211 = 1.0/t45204;
                double t45212 = t45202*2.0;
                double t45213 = EcP_3+t45212;
                double t45214 = 1.0/(t45213*t45213);
                double t45215 = EcP_4*4.0;
                double t45216 = EcP_3*EcP_3;
                double t45217 = t45215-t45216;
                double t45218 = t45214*t45217;
                double t45219 = t45218+1.0;
                double t45220 = 1.0/t45219;
                double t45221 = 1.0/c;
                double t45222 = c*t45201*t45211*(1.0/3.0);
                double t45225 = c*t45210*t45208*t45199;
                double t45223 = t45222-t45225;
                double t45224 = pow(t45198,1.0/3.0);
                double t45226 = 1.0/pow(t45198,7.0/3.0);
                double t45227 = EcP_2*EcP_2;
                double t45228 = EcP_2*EcP_3;
                double t45229 = EcP_4+t45227+t45228;
                double t45230 = 1.0/t45229;
                double t45231 = t45209*t45209;
                double t45232 = t45210*t45231*t45208;
                double t45233 = c*t45201*t45211*t45206*t45209*(1.0/3.0);
                double t45234 = t45232+t45233;
                double t45235 = 1.0/(t45209*t45209);
                double t45236 = c*t45226*(4.0/9.0);
                double t45237 = EcP_3*c*t45206*t45226*(2.0/9.0);
                double t45238 = c*c;
                double t45239 = 1.0/pow(t45198,8.0/3.0);
                double t45240 = 1.0/pow(t45200,3.0/2.0);
                double t45285 = EcP_3*t45240*t45238*t45239*(1.0/3.6E1);
                double t45241 = t45236+t45237-t45285;
                double t45242 = t45208*t45208;
                double t45243 = 1.0/(t45204*t45204*t45204);
                double t45244 = EcP_2*4.0;
                double t45245 = EcP_3*2.0;
                double t45246 = t45244+t45245;
                double t45247 = 1.0/(t45213*t45213*t45213);
                double t45248 = 1.0/(t45213*t45213*t45213*t45213*t45213);
                double t45249 = 1.0/(t45219*t45219);
                double t45250 = EcF_3*t45202;
                double t45251 = EcF_4+t45200+t45250;
                double t45252 = EcF_3*c*t45201*t45206*(1.0/6.0);
                double t45253 = t45205+t45252;
                double t45254 = 1.0/t45251;
                double t45255 = c*t45201*t45254*(1.0/3.0);
                double t45256 = 1.0/(t45251*t45251);
                double t45311 = c*t45253*t45256*t45199;
                double t45257 = -t45311+t45255;
                double t45258 = 1.0/pow(t45198,2.0/3.0);
                double t45259 = EcF_2-t45202;
                double t45260 = 1.0/(t45259*t45259);
                double t45261 = t45259*t45259;
                double t45262 = EcF_3*c*t45206*t45226*(2.0/9.0);
                double t45263 = t45262+t45236-EcF_3*t45240*t45238*t45239*(1.0/3.6E1);
                double t45264 = t45253*t45253;
                double t45265 = 1.0/(t45251*t45251*t45251);
                double t45266 = EcF_3+t45212;
                double t45267 = EcF_2*4.0;
                double t45268 = EcF_3*2.0;
                double t45269 = t45267+t45268;
                double t45270 = 1.0/(t45266*t45266);
                double t45271 = EcF_4*4.0;
                double t45272 = EcF_3*EcF_3;
                double t45273 = t45271-t45272;
                double t45274 = t45270*t45273;
                double t45275 = t45274+1.0;
                double t45276 = 1.0/t45275;
                double t45277 = t45261*t45253*t45256;
                double t45278 = c*t45201*t45206*t45254*t45259*(1.0/3.0);
                double t45279 = t45277+t45278;
                double t45280 = 1.0/(t45266*t45266*t45266);
                double t45281 = 1.0/(t45266*t45266*t45266*t45266*t45266);
                double t45282 = 1.0/(t45275*t45275);
                double t45283 = t45221*t45223*t45224*t45208;
                double t45284 = c*t45211*t45226*(4.0/9.0);
                double t45286 = c*t45242*t45243*t45199*2.0;
                double t45287 = t45284+t45286-c*t45201*t45210*t45208*(2.0/3.0)-c*t45210*t45241*t45199;
                double t45288 = t45221*t45204*t45224*t45287;
                double t45289 = t45234*t45208*t45235;
                double t45290 = c*t45211*t45226*(1.0/1.8E1);
                double t45291 = t45231*t45242*t45243*2.0;
                double t45292 = t45211*t45240*t45209*t45238*t45239*(1.0/1.8E1);
                double t45293 = c*t45201*t45210*t45206*t45208*t45209*(2.0/3.0);
                double t45294 = t45290+t45291+t45292+t45293-t45210*t45231*t45241-c*t45211*t45206*t45226*t45209*(4.0/9.0);
                double t45295 = c*t45220*t45214*t45206*t45226*t45246*(4.0/9.0);
                double t45296 = 1.0/(t45209*t45209*t45209);
                double t45297 = c*t45201*t45204*t45206*t45234*t45296*(1.0/3.0);
                double t45298 = c*t45217*t45226*t45246*t45248*t45249*(2.0/9.0);
                double t45299 = t45295+t45297+t45289+t45298-t45204*t45235*t45294-c*t45220*t45226*t45246*t45247*(2.0/9.0)-t45220*t45240*t45214*t45246*t45238*t45239*(1.0/1.8E1);
                double t45300 = EcP_2*EcP_3*t45230*t45299;
                double t45301 = EcP_3*c*t45220*t45226*t45247*(4.0/9.0);
                double t45302 = EcP_3*t45220*t45240*t45214*t45238*t45239*(1.0/9.0);
                double t45303 = t45300+t45301+t45302+t45283+t45288-t45221*t45204*t45223*t45258*(1.0/3.0)-EcP_3*c*t45220*t45214*t45206*t45226*(8.0/9.0)-EcP_3*c*t45217*t45226*t45248*t45249*(4.0/9.0);
                double t45304 = EcP_1*t45303;
                double t45305 = pow(2.0,1.0/3.0);
                double t45306 = t45305*2.0;
                double t45307 = t45306-2.0;
                double t45308 = two_13*2.0;
                double t45309 = t45308-2.0;
                double t45310 = 1.0/t45309;
                double t45312 = EcF_2*EcF_2;
                double t45313 = EcF_2*EcF_3;
                double t45314 = EcF_4+t45312+t45313;
                double t45315 = 1.0/t45314;
                double t45316 = t45221*t45204*t45223*t45224;
                double t45317 = t45204*t45234*t45235;
                double t45318 = c*t45201*t45220*t45214*t45206*t45246*(1.0/3.0);
                double t45319 = t45317+t45318;
                double t45320 = EcP_2*EcP_3*t45230*t45319;
                double t45321 = t45320+t45316-EcP_3*c*t45201*t45220*t45214*t45206*(2.0/3.0);
                v_rho_b_rho_b[Q] += scale * EcP_1*t45321*-2.0+t45198*(t45304-t45310*t45307*(t45304-EcF_1*(t45221*t45224*t45251*(c*t45226*t45254*(4.0/9.0)-c*t45201*t45253*t45256*(2.0/3.0)-c*t45263*t45256*t45199+c*t45264*t45265*t45199*2.0)+t45221*t45224*t45253*t45257-t45221*t45251*t45257*t45258*(1.0/3.0)+EcF_2*EcF_3*t45315*(-t45251*t45260*(c*t45226*t45254*(1.0/1.8E1)-t45261*t45263*t45256+t45261*t45264*t45265*2.0-c*t45206*t45226*t45254*t45259*(4.0/9.0)+t45240*t45254*t45238*t45239*t45259*(1.0/1.8E1)+c*t45201*t45206*t45253*t45256*t45259*(2.0/3.0))+t45260*t45253*t45279-c*t45226*t45280*t45276*t45269*(2.0/9.0)+c*t45206*t45270*t45226*t45276*t45269*(4.0/9.0)+c*t45226*t45281*t45273*t45282*t45269*(2.0/9.0)-t45240*t45270*t45238*t45239*t45276*t45269*(1.0/1.8E1)+c*t45201*t45206*t45251*1.0/(t45259*t45259*t45259)*t45279*(1.0/3.0))+EcF_3*c*t45226*t45280*t45276*(4.0/9.0)-EcF_3*c*t45206*t45270*t45226*t45276*(8.0/9.0)-EcF_3*c*t45226*t45281*t45273*t45282*(4.0/9.0)+EcF_3*t45240*t45270*t45238*t45239*t45276*(1.0/9.0))))+t45310*t45307*(EcP_1*t45321-EcF_1*(t45221*t45224*t45251*t45257+EcF_2*EcF_3*t45315*(t45251*t45260*t45279+c*t45201*t45206*t45270*t45276*t45269*(1.0/3.0))-EcF_3*c*t45201*t45206*t45270*t45276*(2.0/3.0)))*2.0;
            }
            
        } else if (rho_b < lsda_cutoff_) {
            // v
            if (deriv >= 0) {
                double t45348 = rho_a+rho_b;
                double t45349 = 1.0/pow(t45348,1.0/3.0);
                double t45350 = c*t45349;
                double t45351 = sqrt(t45350);
                double t45352 = EcP_4*4.0;
                double t45353 = EcP_3*EcP_3;
                double t45354 = t45352-t45353;
                double t45355 = EcP_2-t45351;
                double t45356 = EcP_3*t45351;
                double t45357 = EcP_4+t45350+t45356;
                double t45358 = 1.0/t45357;
                double t45359 = sqrt(t45354);
                double t45360 = t45351*2.0;
                double t45361 = EcP_3+t45360;
                double t45362 = 1.0/t45361;
                double t45363 = t45362*t45359;
                double t45364 = atan(t45363);
                double t45365 = 1.0/sqrt(t45354);
                double t45366 = EcF_4*4.0;
                double t45367 = EcF_3*EcF_3;
                double t45368 = t45366-t45367;
                double t45369 = EcF_2-t45351;
                double t45370 = EcF_3*t45351;
                double t45371 = EcF_4+t45350+t45370;
                double t45372 = 1.0/t45371;
                double t45373 = sqrt(t45368);
                double t45374 = EcF_3+t45360;
                double t45375 = 1.0/t45374;
                double t45376 = t45373*t45375;
                double t45377 = atan(t45376);
                double t45378 = 1.0/sqrt(t45368);
                double t45379 = c*t45349*t45358;
                double t45380 = log(t45379);
                double t45381 = EcP_3*t45364*t45365*2.0;
                double t45382 = t45355*t45355;
                double t45383 = t45382*t45358;
                double t45384 = log(t45383);
                double t45385 = EcP_2*4.0;
                double t45386 = EcP_3*2.0;
                double t45387 = t45385+t45386;
                double t45388 = t45364*t45365*t45387;
                double t45389 = t45384+t45388;
                double t45390 = EcP_2*EcP_2;
                double t45391 = EcP_2*EcP_3;
                double t45392 = EcP_4+t45390+t45391;
                double t45393 = 1.0/t45392;
                double t45394 = t45380+t45381-EcP_2*EcP_3*t45393*t45389;
                double t45395 = EcP_1*t45394;
                v[Q] += scale * t45348*(t45395-((pow(2.0,1.0/3.0)*2.0-2.0)*(t45395-EcF_1*(log(c*t45372*t45349)+EcF_3*t45377*t45378*2.0-(EcF_2*EcF_3*(log(t45372*(t45369*t45369))+t45377*t45378*(EcF_2*4.0+EcF_3*2.0)))/(EcF_4+EcF_2*EcF_2+EcF_2*EcF_3))))/(two_13*2.0-2.0));
            }
            
            // v_rho_a
            if (deriv >= 1) {
                double t45397 = rho_a+rho_b;
                double t45398 = 1.0/pow(t45397,1.0/3.0);
                double t45399 = c*t45398;
                double t45400 = sqrt(t45399);
                double t45401 = EcP_4*4.0;
                double t45402 = EcP_3*EcP_3;
                double t45403 = t45401-t45402;
                double t45404 = EcP_2-t45400;
                double t45405 = EcP_3*t45400;
                double t45406 = EcP_4+t45405+t45399;
                double t45407 = 1.0/t45406;
                double t45408 = sqrt(t45403);
                double t45409 = t45400*2.0;
                double t45410 = EcP_3+t45409;
                double t45411 = 1.0/t45410;
                double t45412 = t45411*t45408;
                double t45413 = atan(t45412);
                double t45414 = 1.0/sqrt(t45403);
                double t45415 = 1.0/pow(t45397,4.0/3.0);
                double t45416 = c*t45415*(1.0/3.0);
                double t45417 = 1.0/sqrt(t45399);
                double t45418 = EcP_3*c*t45415*t45417*(1.0/6.0);
                double t45419 = t45416+t45418;
                double t45420 = t45404*t45404;
                double t45421 = 1.0/(t45406*t45406);
                double t45422 = EcP_2*4.0;
                double t45423 = EcP_3*2.0;
                double t45424 = t45422+t45423;
                double t45425 = 1.0/(t45410*t45410);
                double t45426 = EcP_2*EcP_2;
                double t45427 = EcP_2*EcP_3;
                double t45428 = EcP_4+t45426+t45427;
                double t45429 = 1.0/t45428;
                double t45430 = t45403*t45425;
                double t45431 = t45430+1.0;
                double t45432 = 1.0/t45431;
                double t45433 = 1.0/c;
                double t45434 = EcF_3*t45400;
                double t45435 = EcF_4+t45434+t45399;
                double t45436 = pow(t45397,1.0/3.0);
                double t45437 = EcF_3*c*t45415*t45417*(1.0/6.0);
                double t45438 = t45416+t45437;
                double t45439 = EcF_2-t45400;
                double t45440 = 1.0/(t45435*t45435);
                double t45441 = 1.0/t45435;
                double t45442 = EcF_3+t45409;
                double t45443 = 1.0/(t45442*t45442);
                double t45444 = EcF_4*4.0;
                double t45445 = EcF_3*EcF_3;
                double t45446 = t45444-t45445;
                double t45447 = t45443*t45446;
                double t45448 = t45447+1.0;
                double t45449 = 1.0/t45448;
                double t45450 = c*t45415*t45407*(1.0/3.0);
                double t45451 = t45450-c*t45421*t45419*t45398;
                double t45452 = t45406*t45433*t45451*t45436;
                double t45453 = t45420*t45421*t45419;
                double t45454 = c*t45404*t45415*t45407*t45417*(1.0/3.0);
                double t45455 = t45453+t45454;
                double t45456 = 1.0/(t45404*t45404);
                double t45457 = t45406*t45455*t45456;
                double t45458 = c*t45432*t45415*t45424*t45425*t45417*(1.0/3.0);
                double t45459 = t45457+t45458;
                double t45460 = EcP_2*EcP_3*t45429*t45459;
                double t45461 = t45460+t45452-EcP_3*c*t45432*t45415*t45425*t45417*(2.0/3.0);
                double t45462 = EcP_1*t45461;
                double t45463 = pow(2.0,1.0/3.0);
                double t45464 = t45463*2.0;
                double t45465 = t45464-2.0;
                double t45466 = two_13*2.0;
                double t45467 = t45466-2.0;
                double t45468 = 1.0/t45467;
                double t45469 = t45439*t45439;
                double t45470 = sqrt(t45446);
                double t45471 = 1.0/t45442;
                double t45472 = t45470*t45471;
                double t45473 = atan(t45472);
                double t45474 = 1.0/sqrt(t45446);
                double t45475 = EcF_2*4.0;
                double t45476 = EcF_3*2.0;
                double t45477 = t45475+t45476;
                double t45478 = EcF_2*EcF_2;
                double t45479 = EcF_2*EcF_3;
                double t45480 = EcF_4+t45478+t45479;
                double t45481 = 1.0/t45480;
                double t45482 = c*t45407*t45398;
                double t45483 = log(t45482);
                double t45484 = EcP_3*t45413*t45414*2.0;
                double t45485 = t45420*t45407;
                double t45486 = log(t45485);
                double t45487 = t45413*t45414*t45424;
                double t45488 = t45486+t45487;
                double t45489 = t45483+t45484-EcP_2*EcP_3*t45429*t45488;
                double t45490 = EcP_1*t45489;
                v_rho_a[Q] += scale * t45490-t45397*(t45462-t45465*t45468*(t45462-EcF_1*(EcF_2*EcF_3*t45481*(t45435*1.0/(t45439*t45439)*(t45440*t45438*t45469+c*t45441*t45415*t45417*t45439*(1.0/3.0))+c*t45415*t45443*t45417*t45449*t45477*(1.0/3.0))+t45433*t45435*t45436*(c*t45441*t45415*(1.0/3.0)-c*t45440*t45438*t45398)-EcF_3*c*t45415*t45443*t45417*t45449*(2.0/3.0))))-t45465*t45468*(t45490-EcF_1*(log(c*t45441*t45398)+EcF_3*t45473*t45474*2.0-EcF_2*EcF_3*t45481*(log(t45441*t45469)+t45473*t45474*t45477)));
            }
            
            // v_rho_b
            if (deriv >= 1) {
                double t45492 = rho_a+rho_b;
                double t45493 = 1.0/pow(t45492,1.0/3.0);
                double t45494 = c*t45493;
                double t45495 = sqrt(t45494);
                double t45496 = EcP_4*4.0;
                double t45497 = EcP_3*EcP_3;
                double t45498 = t45496-t45497;
                double t45499 = EcP_2-t45495;
                double t45500 = EcP_3*t45495;
                double t45501 = EcP_4+t45500+t45494;
                double t45502 = 1.0/t45501;
                double t45503 = sqrt(t45498);
                double t45504 = t45495*2.0;
                double t45505 = EcP_3+t45504;
                double t45506 = 1.0/t45505;
                double t45507 = t45503*t45506;
                double t45508 = atan(t45507);
                double t45509 = 1.0/sqrt(t45498);
                double t45510 = 1.0/pow(t45492,4.0/3.0);
                double t45511 = c*t45510*(1.0/3.0);
                double t45512 = 1.0/sqrt(t45494);
                double t45513 = EcP_3*c*t45510*t45512*(1.0/6.0);
                double t45514 = t45511+t45513;
                double t45515 = t45499*t45499;
                double t45516 = 1.0/(t45501*t45501);
                double t45517 = EcP_2*4.0;
                double t45518 = EcP_3*2.0;
                double t45519 = t45517+t45518;
                double t45520 = 1.0/(t45505*t45505);
                double t45521 = EcP_2*EcP_2;
                double t45522 = EcP_2*EcP_3;
                double t45523 = EcP_4+t45521+t45522;
                double t45524 = 1.0/t45523;
                double t45525 = t45520*t45498;
                double t45526 = t45525+1.0;
                double t45527 = 1.0/t45526;
                double t45528 = 1.0/c;
                double t45529 = EcF_3*t45495;
                double t45530 = EcF_4+t45529+t45494;
                double t45531 = pow(t45492,1.0/3.0);
                double t45532 = EcF_3*c*t45510*t45512*(1.0/6.0);
                double t45533 = t45511+t45532;
                double t45534 = EcF_2-t45495;
                double t45535 = 1.0/(t45530*t45530);
                double t45536 = 1.0/t45530;
                double t45537 = EcF_3+t45504;
                double t45538 = 1.0/(t45537*t45537);
                double t45539 = EcF_4*4.0;
                double t45540 = EcF_3*EcF_3;
                double t45541 = t45540-t45539;
                double t45542 = t45541*t45538;
                double t45543 = t45542-1.0;
                double t45544 = 1.0/t45543;
                double t45545 = c*t45510*t45502*(1.0/3.0);
                double t45546 = t45545-c*t45514*t45516*t45493;
                double t45547 = t45501*t45531*t45528*t45546;
                double t45548 = t45514*t45515*t45516;
                double t45549 = c*t45510*t45502*t45512*t45499*(1.0/3.0);
                double t45550 = t45548+t45549;
                double t45551 = 1.0/(t45499*t45499);
                double t45552 = t45501*t45550*t45551;
                double t45553 = c*t45510*t45520*t45512*t45527*t45519*(1.0/3.0);
                double t45554 = t45552+t45553;
                double t45555 = EcP_2*EcP_3*t45524*t45554;
                double t45556 = t45555+t45547-EcP_3*c*t45510*t45520*t45512*t45527*(2.0/3.0);
                double t45557 = EcP_1*t45556;
                double t45558 = pow(2.0,1.0/3.0);
                double t45559 = t45558*2.0;
                double t45560 = t45559-2.0;
                double t45561 = two_13*2.0;
                double t45562 = t45561-2.0;
                double t45563 = 1.0/t45562;
                double t45564 = -t45540+t45539;
                double t45565 = t45534*t45534;
                double t45566 = sqrt(t45564);
                double t45567 = 1.0/t45537;
                double t45568 = t45566*t45567;
                double t45569 = atan(t45568);
                double t45570 = 1.0/sqrt(t45564);
                double t45571 = EcF_2*4.0;
                double t45572 = EcF_3*2.0;
                double t45573 = t45571+t45572;
                double t45574 = EcF_2*EcF_2;
                double t45575 = EcF_2*EcF_3;
                double t45576 = EcF_4+t45574+t45575;
                double t45577 = 1.0/t45576;
                double t45578 = c*t45502*t45493;
                double t45579 = log(t45578);
                double t45580 = EcP_3*t45508*t45509*2.0;
                double t45581 = t45502*t45515;
                double t45582 = log(t45581);
                double t45583 = t45508*t45509*t45519;
                double t45584 = t45582+t45583;
                double t45585 = t45580+t45579-EcP_2*EcP_3*t45524*t45584;
                double t45586 = EcP_1*t45585;
                v_rho_b[Q] += scale * t45586-t45492*(t45557-t45560*t45563*(t45557-EcF_1*(EcF_2*EcF_3*t45577*(t45530*1.0/(t45534*t45534)*(t45533*t45535*t45565+c*t45510*t45512*t45534*t45536*(1.0/3.0))-c*t45510*t45512*t45544*t45573*t45538*(1.0/3.0))+t45530*t45531*t45528*(c*t45510*t45536*(1.0/3.0)-c*t45533*t45535*t45493)+EcF_3*c*t45510*t45512*t45544*t45538*(2.0/3.0))))-t45560*t45563*(t45586-EcF_1*(log(c*t45536*t45493)+EcF_3*t45570*t45569*2.0-EcF_2*EcF_3*t45577*(log(t45536*t45565)+t45570*t45573*t45569)));
            }
            
            // v_rho_a_rho_a
            if (deriv >= 2) {
                double t45593 = rho_a+rho_b;
                double t45594 = 1.0/pow(t45593,1.0/3.0);
                double t45595 = c*t45594;
                double t45596 = 1.0/pow(t45593,4.0/3.0);
                double t45597 = sqrt(t45595);
                double t45598 = EcP_3*t45597;
                double t45599 = EcP_4+t45595+t45598;
                double t45600 = c*t45596*(1.0/3.0);
                double t45601 = 1.0/sqrt(t45595);
                double t45602 = EcP_3*c*t45601*t45596*(1.0/6.0);
                double t45603 = t45600+t45602;
                double t45604 = EcP_2-t45597;
                double t45605 = 1.0/(t45599*t45599);
                double t45606 = 1.0/t45599;
                double t45607 = t45597*2.0;
                double t45608 = EcP_3+t45607;
                double t45609 = 1.0/(t45608*t45608);
                double t45610 = EcP_4*4.0;
                double t45611 = EcP_3*EcP_3;
                double t45612 = t45610-t45611;
                double t45613 = t45612*t45609;
                double t45614 = t45613+1.0;
                double t45615 = 1.0/t45614;
                double t45616 = 1.0/c;
                double t45617 = c*t45606*t45596*(1.0/3.0);
                double t45620 = c*t45603*t45605*t45594;
                double t45618 = -t45620+t45617;
                double t45619 = pow(t45593,1.0/3.0);
                double t45621 = 1.0/pow(t45593,7.0/3.0);
                double t45622 = EcP_2*EcP_2;
                double t45623 = EcP_2*EcP_3;
                double t45624 = EcP_4+t45622+t45623;
                double t45625 = 1.0/t45624;
                double t45626 = t45604*t45604;
                double t45627 = t45603*t45605*t45626;
                double t45628 = c*t45601*t45604*t45606*t45596*(1.0/3.0);
                double t45629 = t45627+t45628;
                double t45630 = 1.0/(t45604*t45604);
                double t45631 = c*t45621*(4.0/9.0);
                double t45632 = EcP_3*c*t45601*t45621*(2.0/9.0);
                double t45633 = c*c;
                double t45634 = 1.0/pow(t45593,8.0/3.0);
                double t45635 = 1.0/pow(t45595,3.0/2.0);
                double t45680 = EcP_3*t45633*t45634*t45635*(1.0/3.6E1);
                double t45636 = t45631+t45632-t45680;
                double t45637 = t45603*t45603;
                double t45638 = 1.0/(t45599*t45599*t45599);
                double t45639 = EcP_2*4.0;
                double t45640 = EcP_3*2.0;
                double t45641 = t45640+t45639;
                double t45642 = 1.0/(t45608*t45608*t45608);
                double t45643 = 1.0/(t45608*t45608*t45608*t45608*t45608);
                double t45644 = 1.0/(t45614*t45614);
                double t45645 = EcF_3*t45597;
                double t45646 = EcF_4+t45645+t45595;
                double t45647 = EcF_3*c*t45601*t45596*(1.0/6.0);
                double t45648 = t45600+t45647;
                double t45649 = 1.0/t45646;
                double t45650 = c*t45649*t45596*(1.0/3.0);
                double t45651 = 1.0/(t45646*t45646);
                double t45706 = c*t45651*t45594*t45648;
                double t45652 = t45650-t45706;
                double t45653 = 1.0/pow(t45593,2.0/3.0);
                double t45654 = EcF_2-t45597;
                double t45655 = 1.0/(t45654*t45654);
                double t45656 = t45654*t45654;
                double t45657 = EcF_3*c*t45601*t45621*(2.0/9.0);
                double t45658 = t45631+t45657-EcF_3*t45633*t45634*t45635*(1.0/3.6E1);
                double t45659 = t45648*t45648;
                double t45660 = 1.0/(t45646*t45646*t45646);
                double t45661 = EcF_3+t45607;
                double t45662 = EcF_2*4.0;
                double t45663 = EcF_3*2.0;
                double t45664 = t45662+t45663;
                double t45665 = 1.0/(t45661*t45661);
                double t45666 = EcF_4*4.0;
                double t45667 = EcF_3*EcF_3;
                double t45668 = t45666-t45667;
                double t45669 = t45665*t45668;
                double t45670 = t45669+1.0;
                double t45671 = 1.0/t45670;
                double t45672 = t45651*t45656*t45648;
                double t45673 = c*t45601*t45654*t45649*t45596*(1.0/3.0);
                double t45674 = t45672+t45673;
                double t45675 = 1.0/(t45661*t45661*t45661);
                double t45676 = 1.0/(t45661*t45661*t45661*t45661*t45661);
                double t45677 = 1.0/(t45670*t45670);
                double t45678 = t45603*t45616*t45618*t45619;
                double t45679 = c*t45621*t45606*(4.0/9.0);
                double t45681 = c*t45637*t45638*t45594*2.0;
                double t45682 = t45681+t45679-c*t45603*t45605*t45596*(2.0/3.0)-c*t45605*t45636*t45594;
                double t45683 = t45616*t45619*t45682*t45599;
                double t45684 = t45603*t45630*t45629;
                double t45685 = c*t45621*t45606*(1.0/1.8E1);
                double t45686 = t45626*t45637*t45638*2.0;
                double t45687 = t45604*t45606*t45633*t45634*t45635*(1.0/1.8E1);
                double t45688 = c*t45601*t45603*t45604*t45605*t45596*(2.0/3.0);
                double t45689 = t45685+t45686+t45687+t45688-t45605*t45626*t45636-c*t45601*t45621*t45604*t45606*(4.0/9.0);
                double t45690 = c*t45601*t45621*t45641*t45615*t45609*(4.0/9.0);
                double t45691 = 1.0/(t45604*t45604*t45604);
                double t45692 = c*t45601*t45691*t45629*t45596*t45599*(1.0/3.0);
                double t45693 = c*t45612*t45621*t45641*t45643*t45644*(2.0/9.0);
                double t45694 = t45690+t45692+t45684+t45693-t45630*t45599*t45689-c*t45621*t45641*t45615*t45642*(2.0/9.0)-t45641*t45615*t45633*t45634*t45635*t45609*(1.0/1.8E1);
                double t45695 = EcP_2*EcP_3*t45625*t45694;
                double t45696 = EcP_3*c*t45621*t45615*t45642*(4.0/9.0);
                double t45697 = EcP_3*t45615*t45633*t45634*t45635*t45609*(1.0/9.0);
                double t45698 = t45683+t45695+t45678+t45696+t45697-t45616*t45653*t45618*t45599*(1.0/3.0)-EcP_3*c*t45601*t45621*t45615*t45609*(8.0/9.0)-EcP_3*c*t45612*t45621*t45643*t45644*(4.0/9.0);
                double t45699 = EcP_1*t45698;
                double t45700 = pow(2.0,1.0/3.0);
                double t45701 = t45700*2.0;
                double t45702 = t45701-2.0;
                double t45703 = two_13*2.0;
                double t45704 = t45703-2.0;
                double t45705 = 1.0/t45704;
                double t45707 = EcF_2*EcF_2;
                double t45708 = EcF_2*EcF_3;
                double t45709 = EcF_4+t45707+t45708;
                double t45710 = 1.0/t45709;
                double t45711 = t45616*t45618*t45619*t45599;
                double t45712 = t45630*t45629*t45599;
                double t45713 = c*t45601*t45641*t45615*t45609*t45596*(1.0/3.0);
                double t45714 = t45712+t45713;
                double t45715 = EcP_2*EcP_3*t45714*t45625;
                double t45716 = t45711+t45715-EcP_3*c*t45601*t45615*t45609*t45596*(2.0/3.0);
                v_rho_a_rho_a[Q] += scale * EcP_1*t45716*-2.0+t45593*(t45699-t45702*t45705*(t45699-EcF_1*(t45616*t45619*t45646*(c*t45621*t45649*(4.0/9.0)-c*t45651*t45594*t45658-c*t45651*t45648*t45596*(2.0/3.0)+c*t45660*t45594*t45659*2.0)-t45616*t45652*t45653*t45646*(1.0/3.0)+t45616*t45652*t45619*t45648+EcF_2*EcF_3*t45710*(-t45646*t45655*(c*t45621*t45649*(1.0/1.8E1)-t45651*t45656*t45658+t45660*t45656*t45659*2.0-c*t45601*t45621*t45654*t45649*(4.0/9.0)+t45633*t45634*t45635*t45654*t45649*(1.0/1.8E1)+c*t45601*t45651*t45654*t45648*t45596*(2.0/3.0))+t45655*t45674*t45648-c*t45621*t45671*t45664*t45675*(2.0/9.0)+c*t45601*t45621*t45671*t45664*t45665*(4.0/9.0)+c*t45621*t45664*t45676*t45668*t45677*(2.0/9.0)-t45633*t45634*t45635*t45671*t45664*t45665*(1.0/1.8E1)+c*t45601*1.0/(t45654*t45654*t45654)*t45646*t45674*t45596*(1.0/3.0))+EcF_3*c*t45621*t45671*t45675*(4.0/9.0)-EcF_3*c*t45601*t45621*t45671*t45665*(8.0/9.0)-EcF_3*c*t45621*t45676*t45668*t45677*(4.0/9.0)+EcF_3*t45633*t45634*t45635*t45671*t45665*(1.0/9.0))))+t45702*t45705*(EcP_1*t45716-EcF_1*(t45616*t45652*t45619*t45646+EcF_2*EcF_3*t45710*(t45646*t45655*t45674+c*t45601*t45671*t45664*t45665*t45596*(1.0/3.0))-EcF_3*c*t45601*t45671*t45665*t45596*(2.0/3.0)))*2.0;
            }
            
            // v_rho_a_rho_b
            if (deriv >= 2) {
                double t45718 = rho_a+rho_b;
                double t45719 = 1.0/pow(t45718,1.0/3.0);
                double t45720 = c*t45719;
                double t45721 = 1.0/pow(t45718,4.0/3.0);
                double t45722 = sqrt(t45720);
                double t45723 = EcP_3*t45722;
                double t45724 = EcP_4+t45720+t45723;
                double t45725 = c*t45721*(1.0/3.0);
                double t45726 = 1.0/sqrt(t45720);
                double t45727 = EcP_3*c*t45721*t45726*(1.0/6.0);
                double t45728 = t45725+t45727;
                double t45729 = EcP_2-t45722;
                double t45730 = 1.0/(t45724*t45724);
                double t45731 = 1.0/t45724;
                double t45732 = t45722*2.0;
                double t45733 = EcP_3+t45732;
                double t45734 = 1.0/(t45733*t45733);
                double t45735 = EcP_4*4.0;
                double t45736 = EcP_3*EcP_3;
                double t45737 = t45735-t45736;
                double t45738 = t45734*t45737;
                double t45739 = t45738+1.0;
                double t45740 = 1.0/t45739;
                double t45741 = 1.0/c;
                double t45742 = c*t45721*t45731*(1.0/3.0);
                double t45745 = c*t45730*t45719*t45728;
                double t45743 = t45742-t45745;
                double t45744 = pow(t45718,1.0/3.0);
                double t45746 = 1.0/pow(t45718,7.0/3.0);
                double t45747 = EcP_2*EcP_2;
                double t45748 = EcP_2*EcP_3;
                double t45749 = EcP_4+t45747+t45748;
                double t45750 = 1.0/t45749;
                double t45751 = t45729*t45729;
                double t45752 = t45730*t45751*t45728;
                double t45753 = c*t45721*t45731*t45726*t45729*(1.0/3.0);
                double t45754 = t45752+t45753;
                double t45755 = 1.0/(t45729*t45729);
                double t45756 = c*t45746*(4.0/9.0);
                double t45757 = EcP_3*c*t45726*t45746*(2.0/9.0);
                double t45758 = c*c;
                double t45759 = 1.0/pow(t45718,8.0/3.0);
                double t45760 = 1.0/pow(t45720,3.0/2.0);
                double t45805 = EcP_3*t45760*t45758*t45759*(1.0/3.6E1);
                double t45761 = -t45805+t45756+t45757;
                double t45762 = t45728*t45728;
                double t45763 = 1.0/(t45724*t45724*t45724);
                double t45764 = EcP_2*4.0;
                double t45765 = EcP_3*2.0;
                double t45766 = t45764+t45765;
                double t45767 = 1.0/(t45733*t45733*t45733);
                double t45768 = 1.0/(t45733*t45733*t45733*t45733*t45733);
                double t45769 = 1.0/(t45739*t45739);
                double t45770 = EcF_3*t45722;
                double t45771 = EcF_4+t45720+t45770;
                double t45772 = EcF_3*c*t45721*t45726*(1.0/6.0);
                double t45773 = t45725+t45772;
                double t45774 = 1.0/t45771;
                double t45775 = c*t45721*t45774*(1.0/3.0);
                double t45776 = 1.0/(t45771*t45771);
                double t45831 = c*t45719*t45773*t45776;
                double t45777 = -t45831+t45775;
                double t45778 = 1.0/pow(t45718,2.0/3.0);
                double t45779 = EcF_2-t45722;
                double t45780 = 1.0/(t45779*t45779);
                double t45781 = t45779*t45779;
                double t45782 = EcF_3*c*t45726*t45746*(2.0/9.0);
                double t45783 = t45782+t45756-EcF_3*t45760*t45758*t45759*(1.0/3.6E1);
                double t45784 = t45773*t45773;
                double t45785 = 1.0/(t45771*t45771*t45771);
                double t45786 = EcF_3+t45732;
                double t45787 = EcF_2*4.0;
                double t45788 = EcF_3*2.0;
                double t45789 = t45787+t45788;
                double t45790 = 1.0/(t45786*t45786);
                double t45791 = EcF_4*4.0;
                double t45792 = EcF_3*EcF_3;
                double t45793 = t45791-t45792;
                double t45794 = t45790*t45793;
                double t45795 = t45794+1.0;
                double t45796 = 1.0/t45795;
                double t45797 = t45781*t45773*t45776;
                double t45798 = c*t45721*t45726*t45774*t45779*(1.0/3.0);
                double t45799 = t45797+t45798;
                double t45800 = 1.0/(t45786*t45786*t45786);
                double t45801 = 1.0/(t45786*t45786*t45786*t45786*t45786);
                double t45802 = 1.0/(t45795*t45795);
                double t45803 = t45741*t45743*t45744*t45728;
                double t45804 = c*t45731*t45746*(4.0/9.0);
                double t45806 = c*t45762*t45763*t45719*2.0;
                double t45807 = t45804+t45806-c*t45721*t45730*t45728*(2.0/3.0)-c*t45730*t45761*t45719;
                double t45808 = t45741*t45724*t45744*t45807;
                double t45809 = t45754*t45728*t45755;
                double t45810 = c*t45731*t45746*(1.0/1.8E1);
                double t45811 = t45751*t45762*t45763*2.0;
                double t45812 = t45731*t45760*t45729*t45758*t45759*(1.0/1.8E1);
                double t45813 = c*t45721*t45730*t45726*t45728*t45729*(2.0/3.0);
                double t45814 = t45810+t45811+t45812+t45813-t45730*t45751*t45761-c*t45731*t45726*t45746*t45729*(4.0/9.0);
                double t45815 = c*t45740*t45734*t45726*t45746*t45766*(4.0/9.0);
                double t45816 = 1.0/(t45729*t45729*t45729);
                double t45817 = c*t45721*t45724*t45726*t45816*t45754*(1.0/3.0);
                double t45818 = c*t45737*t45746*t45766*t45768*t45769*(2.0/9.0);
                double t45819 = t45815+t45817+t45809+t45818-t45724*t45814*t45755-c*t45740*t45746*t45766*t45767*(2.0/9.0)-t45740*t45760*t45734*t45766*t45758*t45759*(1.0/1.8E1);
                double t45820 = EcP_2*EcP_3*t45750*t45819;
                double t45821 = EcP_3*c*t45740*t45746*t45767*(4.0/9.0);
                double t45822 = EcP_3*t45740*t45760*t45734*t45758*t45759*(1.0/9.0);
                double t45823 = t45820+t45803+t45821+t45822+t45808-t45741*t45724*t45743*t45778*(1.0/3.0)-EcP_3*c*t45740*t45734*t45726*t45746*(8.0/9.0)-EcP_3*c*t45737*t45746*t45768*t45769*(4.0/9.0);
                double t45824 = EcP_1*t45823;
                double t45825 = pow(2.0,1.0/3.0);
                double t45826 = t45825*2.0;
                double t45827 = t45826-2.0;
                double t45828 = two_13*2.0;
                double t45829 = t45828-2.0;
                double t45830 = 1.0/t45829;
                double t45832 = EcF_2*EcF_2;
                double t45833 = EcF_2*EcF_3;
                double t45834 = EcF_4+t45832+t45833;
                double t45835 = 1.0/t45834;
                double t45836 = t45741*t45724*t45743*t45744;
                double t45837 = t45724*t45754*t45755;
                double t45838 = c*t45721*t45740*t45734*t45726*t45766*(1.0/3.0);
                double t45839 = t45837+t45838;
                double t45840 = EcP_2*EcP_3*t45750*t45839;
                double t45841 = t45840+t45836-EcP_3*c*t45721*t45740*t45734*t45726*(2.0/3.0);
                v_rho_a_rho_b[Q] += scale * EcP_1*t45841*-2.0+t45718*(t45824-t45830*t45827*(t45824-EcF_1*(t45741*t45744*t45771*(c*t45746*t45774*(4.0/9.0)-c*t45721*t45773*t45776*(2.0/3.0)-c*t45719*t45783*t45776+c*t45719*t45784*t45785*2.0)+t45741*t45744*t45773*t45777-t45741*t45771*t45777*t45778*(1.0/3.0)+EcF_2*EcF_3*t45835*(-t45771*t45780*(c*t45746*t45774*(1.0/1.8E1)-t45781*t45783*t45776+t45781*t45784*t45785*2.0-c*t45726*t45746*t45774*t45779*(4.0/9.0)+t45760*t45774*t45758*t45759*t45779*(1.0/1.8E1)+c*t45721*t45726*t45773*t45776*t45779*(2.0/3.0))+t45780*t45773*t45799-c*t45800*t45746*t45796*t45789*(2.0/9.0)+c*t45801*t45802*t45746*t45793*t45789*(2.0/9.0)+c*t45726*t45790*t45746*t45796*t45789*(4.0/9.0)-t45760*t45790*t45758*t45759*t45796*t45789*(1.0/1.8E1)+c*t45721*t45726*t45771*1.0/(t45779*t45779*t45779)*t45799*(1.0/3.0))+EcF_3*c*t45800*t45746*t45796*(4.0/9.0)-EcF_3*c*t45801*t45802*t45746*t45793*(4.0/9.0)-EcF_3*c*t45726*t45790*t45746*t45796*(8.0/9.0)+EcF_3*t45760*t45790*t45758*t45759*t45796*(1.0/9.0))))+t45830*t45827*(EcP_1*t45841-EcF_1*(t45741*t45744*t45771*t45777+EcF_2*EcF_3*t45835*(t45771*t45780*t45799+c*t45721*t45726*t45790*t45796*t45789*(1.0/3.0))-EcF_3*c*t45721*t45726*t45790*t45796*(2.0/3.0)))*2.0;
            }
            
            // v_rho_b_rho_b
            if (deriv >= 2) {
                double t45843 = rho_a+rho_b;
                double t45844 = 1.0/pow(t45843,1.0/3.0);
                double t45845 = c*t45844;
                double t45846 = 1.0/pow(t45843,4.0/3.0);
                double t45847 = sqrt(t45845);
                double t45848 = EcP_3*t45847;
                double t45849 = EcP_4+t45845+t45848;
                double t45850 = c*t45846*(1.0/3.0);
                double t45851 = 1.0/sqrt(t45845);
                double t45852 = EcP_3*c*t45851*t45846*(1.0/6.0);
                double t45853 = t45850+t45852;
                double t45854 = EcP_2-t45847;
                double t45855 = 1.0/(t45849*t45849);
                double t45856 = 1.0/t45849;
                double t45857 = t45847*2.0;
                double t45858 = EcP_3+t45857;
                double t45859 = 1.0/(t45858*t45858);
                double t45860 = EcP_4*4.0;
                double t45861 = EcP_3*EcP_3;
                double t45862 = t45860-t45861;
                double t45863 = t45862*t45859;
                double t45864 = t45863+1.0;
                double t45865 = 1.0/t45864;
                double t45866 = 1.0/c;
                double t45867 = c*t45846*t45856*(1.0/3.0);
                double t45870 = c*t45844*t45853*t45855;
                double t45868 = -t45870+t45867;
                double t45869 = pow(t45843,1.0/3.0);
                double t45871 = 1.0/pow(t45843,7.0/3.0);
                double t45872 = EcP_2*EcP_2;
                double t45873 = EcP_2*EcP_3;
                double t45874 = EcP_4+t45872+t45873;
                double t45875 = 1.0/t45874;
                double t45876 = t45854*t45854;
                double t45877 = t45853*t45855*t45876;
                double t45878 = c*t45851*t45854*t45846*t45856*(1.0/3.0);
                double t45879 = t45877+t45878;
                double t45880 = 1.0/(t45854*t45854);
                double t45881 = c*t45871*(4.0/9.0);
                double t45882 = EcP_3*c*t45851*t45871*(2.0/9.0);
                double t45883 = c*c;
                double t45884 = 1.0/pow(t45843,8.0/3.0);
                double t45885 = 1.0/pow(t45845,3.0/2.0);
                double t45930 = EcP_3*t45883*t45884*t45885*(1.0/3.6E1);
                double t45886 = -t45930+t45881+t45882;
                double t45887 = t45853*t45853;
                double t45888 = 1.0/(t45849*t45849*t45849);
                double t45889 = EcP_2*4.0;
                double t45890 = EcP_3*2.0;
                double t45891 = t45890+t45889;
                double t45892 = 1.0/(t45858*t45858*t45858);
                double t45893 = 1.0/(t45858*t45858*t45858*t45858*t45858);
                double t45894 = 1.0/(t45864*t45864);
                double t45895 = EcF_3*t45847;
                double t45896 = EcF_4+t45845+t45895;
                double t45897 = EcF_3*c*t45851*t45846*(1.0/6.0);
                double t45898 = t45850+t45897;
                double t45899 = 1.0/t45896;
                double t45900 = c*t45846*t45899*(1.0/3.0);
                double t45901 = 1.0/(t45896*t45896);
                double t45956 = c*t45901*t45844*t45898;
                double t45902 = t45900-t45956;
                double t45903 = 1.0/pow(t45843,2.0/3.0);
                double t45904 = EcF_2-t45847;
                double t45905 = 1.0/(t45904*t45904);
                double t45906 = t45904*t45904;
                double t45907 = EcF_3*c*t45851*t45871*(2.0/9.0);
                double t45908 = t45907+t45881-EcF_3*t45883*t45884*t45885*(1.0/3.6E1);
                double t45909 = t45898*t45898;
                double t45910 = 1.0/(t45896*t45896*t45896);
                double t45911 = EcF_3+t45857;
                double t45912 = EcF_2*4.0;
                double t45913 = EcF_3*2.0;
                double t45914 = t45912+t45913;
                double t45915 = 1.0/(t45911*t45911);
                double t45916 = EcF_4*4.0;
                double t45917 = EcF_3*EcF_3;
                double t45918 = t45916-t45917;
                double t45919 = t45915*t45918;
                double t45920 = t45919+1.0;
                double t45921 = 1.0/t45920;
                double t45922 = t45901*t45906*t45898;
                double t45923 = c*t45904*t45851*t45846*t45899*(1.0/3.0);
                double t45924 = t45922+t45923;
                double t45925 = 1.0/(t45911*t45911*t45911);
                double t45926 = 1.0/(t45911*t45911*t45911*t45911*t45911);
                double t45927 = 1.0/(t45920*t45920);
                double t45928 = t45853*t45866*t45868*t45869;
                double t45929 = c*t45871*t45856*(4.0/9.0);
                double t45931 = c*t45844*t45887*t45888*2.0;
                double t45932 = t45931+t45929-c*t45853*t45846*t45855*(2.0/3.0)-c*t45844*t45855*t45886;
                double t45933 = t45932*t45866*t45849*t45869;
                double t45934 = t45853*t45880*t45879;
                double t45935 = c*t45871*t45856*(1.0/1.8E1);
                double t45936 = t45876*t45887*t45888*2.0;
                double t45937 = t45854*t45856*t45883*t45884*t45885*(1.0/1.8E1);
                double t45938 = c*t45851*t45853*t45854*t45846*t45855*(2.0/3.0);
                double t45939 = t45935+t45936+t45937+t45938-t45855*t45876*t45886-c*t45851*t45871*t45854*t45856*(4.0/9.0);
                double t45940 = c*t45851*t45871*t45891*t45865*t45859*(4.0/9.0);
                double t45941 = 1.0/(t45854*t45854*t45854);
                double t45942 = c*t45851*t45941*t45846*t45849*t45879*(1.0/3.0);
                double t45943 = c*t45862*t45871*t45891*t45893*t45894*(2.0/9.0);
                double t45944 = t45940+t45942+t45934+t45943-t45880*t45849*t45939-c*t45871*t45891*t45865*t45892*(2.0/9.0)-t45891*t45865*t45883*t45884*t45885*t45859*(1.0/1.8E1);
                double t45945 = EcP_2*EcP_3*t45944*t45875;
                double t45946 = EcP_3*c*t45871*t45865*t45892*(4.0/9.0);
                double t45947 = EcP_3*t45865*t45883*t45884*t45885*t45859*(1.0/9.0);
                double t45948 = t45933+t45945+t45928+t45946+t45947-t45903*t45866*t45849*t45868*(1.0/3.0)-EcP_3*c*t45851*t45871*t45865*t45859*(8.0/9.0)-EcP_3*c*t45862*t45871*t45893*t45894*(4.0/9.0);
                double t45949 = EcP_1*t45948;
                double t45950 = pow(2.0,1.0/3.0);
                double t45951 = t45950*2.0;
                double t45952 = t45951-2.0;
                double t45953 = two_13*2.0;
                double t45954 = t45953-2.0;
                double t45955 = 1.0/t45954;
                double t45957 = EcF_2*EcF_2;
                double t45958 = EcF_2*EcF_3;
                double t45959 = EcF_4+t45957+t45958;
                double t45960 = 1.0/t45959;
                double t45961 = t45866*t45849*t45868*t45869;
                double t45962 = t45880*t45849*t45879;
                double t45963 = c*t45851*t45846*t45891*t45865*t45859*(1.0/3.0);
                double t45964 = t45962+t45963;
                double t45965 = EcP_2*EcP_3*t45964*t45875;
                double t45966 = t45961+t45965-EcP_3*c*t45851*t45846*t45865*t45859*(2.0/3.0);
                v_rho_b_rho_b[Q] += scale * EcP_1*t45966*-2.0+t45843*(t45949-t45952*t45955*(t45949-EcF_1*(t45866*t45869*t45896*(c*t45871*t45899*(4.0/9.0)-c*t45901*t45844*t45908+c*t45910*t45844*t45909*2.0-c*t45901*t45846*t45898*(2.0/3.0))-t45902*t45903*t45866*t45896*(1.0/3.0)+t45902*t45866*t45869*t45898+EcF_2*EcF_3*t45960*(-t45905*t45896*(c*t45871*t45899*(1.0/1.8E1)-t45901*t45906*t45908+t45910*t45906*t45909*2.0-c*t45904*t45851*t45871*t45899*(4.0/9.0)+t45904*t45883*t45884*t45885*t45899*(1.0/1.8E1)+c*t45901*t45904*t45851*t45846*t45898*(2.0/3.0))+t45905*t45924*t45898-c*t45921*t45914*t45871*t45925*(2.0/9.0)+c*t45921*t45851*t45914*t45915*t45871*(4.0/9.0)+c*t45914*t45871*t45926*t45918*t45927*(2.0/9.0)-t45921*t45914*t45915*t45883*t45884*t45885*(1.0/1.8E1)+c*1.0/(t45904*t45904*t45904)*t45851*t45924*t45846*t45896*(1.0/3.0))+EcF_3*c*t45921*t45871*t45925*(4.0/9.0)-EcF_3*c*t45921*t45851*t45915*t45871*(8.0/9.0)-EcF_3*c*t45871*t45926*t45918*t45927*(4.0/9.0)+EcF_3*t45921*t45915*t45883*t45884*t45885*(1.0/9.0))))+t45952*t45955*(EcP_1*t45966-EcF_1*(t45902*t45866*t45869*t45896+EcF_2*EcF_3*t45960*(t45905*t45924*t45896+c*t45921*t45851*t45914*t45915*t45846*(1.0/3.0))-EcF_3*c*t45921*t45851*t45915*t45846*(2.0/3.0)))*2.0;
            }
            
        } else {
            // v
            if (deriv >= 0) {
                double t43398 = rho_a+rho_b;
                double t43399 = 1.0/pow(t43398,1.0/3.0);
                double t43400 = c*t43399;
                double t43401 = sqrt(t43400);
                double t43402 = EcP_4*4.0;
                double t43403 = EcP_3*EcP_3;
                double t43404 = t43402-t43403;
                double t43405 = EcP_2-t43401;
                double t43406 = EcP_3*t43401;
                double t43407 = EcP_4+t43400+t43406;
                double t43408 = 1.0/t43407;
                double t43409 = sqrt(t43404);
                double t43410 = t43401*2.0;
                double t43411 = EcP_3+t43410;
                double t43412 = 1.0/t43411;
                double t43413 = t43412*t43409;
                double t43414 = atan(t43413);
                double t43415 = 1.0/sqrt(t43404);
                double t43416 = rho_a-rho_b;
                double t43417 = t43416*t43416;
                double t43418 = EcF_4*4.0;
                double t43419 = EcF_3*EcF_3;
                double t43420 = t43418-t43419;
                double t43421 = EcF_2-t43401;
                double t43422 = EcF_3*t43401;
                double t43423 = EcF_4+t43400+t43422;
                double t43424 = 1.0/t43423;
                double t43425 = sqrt(t43420);
                double t43426 = EcF_3+t43410;
                double t43427 = 1.0/t43426;
                double t43428 = t43425*t43427;
                double t43429 = atan(t43428);
                double t43430 = 1.0/sqrt(t43420);
                double t43431 = c*t43408*t43399;
                double t43432 = log(t43431);
                double t43433 = EcP_3*t43414*t43415*2.0;
                double t43434 = t43405*t43405;
                double t43435 = t43434*t43408;
                double t43436 = log(t43435);
                double t43437 = EcP_2*4.0;
                double t43438 = EcP_3*2.0;
                double t43439 = t43437+t43438;
                double t43440 = t43414*t43415*t43439;
                double t43441 = t43440+t43436;
                double t43442 = EcP_2*EcP_2;
                double t43443 = EcP_2*EcP_3;
                double t43444 = EcP_4+t43442+t43443;
                double t43445 = 1.0/t43444;
                double t43446 = t43432+t43433-EcP_2*EcP_3*t43441*t43445;
                double t43447 = EcP_1*t43446;
                double t43448 = Ac_4*4.0;
                double t43449 = Ac_3*Ac_3;
                double t43450 = t43448-t43449;
                double t43451 = Ac_2-t43401;
                double t43452 = Ac_3*t43401;
                double t43453 = Ac_4+t43400+t43452;
                double t43454 = 1.0/t43453;
                double t43455 = sqrt(t43450);
                double t43456 = Ac_3+t43410;
                double t43457 = 1.0/t43456;
                double t43458 = t43455*t43457;
                double t43459 = atan(t43458);
                double t43460 = 1.0/sqrt(t43450);
                double t43461 = 1.0/t43398;
                double t43462 = t43416*t43461;
                double t43463 = c*t43454*t43399;
                double t43464 = log(t43463);
                double t43465 = Ac_3*t43460*t43459*2.0;
                double t43466 = t43451*t43451;
                double t43467 = t43454*t43466;
                double t43468 = log(t43467);
                double t43469 = Ac_2*4.0;
                double t43470 = Ac_3*2.0;
                double t43471 = t43470+t43469;
                double t43472 = t43460*t43471*t43459;
                double t43473 = t43472+t43468;
                double t43474 = Ac_2*Ac_2;
                double t43475 = Ac_2*Ac_3;
                double t43476 = Ac_4+t43474+t43475;
                double t43477 = 1.0/t43476;
                double t43478 = t43464+t43465-Ac_2*Ac_3*t43473*t43477;
                v[Q] += scale * t43398*(t43447-(Ac_1*t43478*((t43417*t43417)*1.0/(t43398*t43398*t43398*t43398)*((d2fz0*(t43447-EcF_1*(log(c*t43424*t43399)+EcF_3*t43430*t43429*2.0-(EcF_2*EcF_3*(log((t43421*t43421)*t43424)+t43430*t43429*(EcF_2*4.0+EcF_3*2.0)))/(EcF_4+EcF_2*EcF_2+EcF_2*EcF_3))))/(Ac_1*t43478)+1.0)-1.0)*(pow(t43462+1.0,4.0/3.0)+pow(-t43462+1.0,4.0/3.0)-2.0))/(d2fz0*(two_13*2.0-2.0)));
            }
            
            // v_rho_a
            if (deriv >= 1) {
                double t43480 = rho_a+rho_b;
                double t43481 = 1.0/pow(t43480,1.0/3.0);
                double t43482 = c*t43481;
                double t43483 = sqrt(t43482);
                double t43484 = EcP_4*4.0;
                double t43485 = EcP_3*EcP_3;
                double t43486 = t43484-t43485;
                double t43487 = EcP_2-t43483;
                double t43488 = EcP_3*t43483;
                double t43489 = EcP_4+t43482+t43488;
                double t43490 = 1.0/t43489;
                double t43491 = sqrt(t43486);
                double t43492 = t43483*2.0;
                double t43493 = EcP_3+t43492;
                double t43494 = 1.0/t43493;
                double t43495 = t43491*t43494;
                double t43496 = atan(t43495);
                double t43497 = 1.0/sqrt(t43486);
                double t43498 = 1.0/pow(t43480,4.0/3.0);
                double t43499 = c*t43498*(1.0/3.0);
                double t43500 = 1.0/sqrt(t43482);
                double t43501 = EcP_3*c*t43500*t43498*(1.0/6.0);
                double t43502 = t43501+t43499;
                double t43503 = t43487*t43487;
                double t43504 = 1.0/(t43489*t43489);
                double t43505 = EcP_2*4.0;
                double t43506 = EcP_3*2.0;
                double t43507 = t43505+t43506;
                double t43508 = 1.0/(t43493*t43493);
                double t43509 = EcP_2*EcP_2;
                double t43510 = EcP_2*EcP_3;
                double t43511 = EcP_4+t43510+t43509;
                double t43512 = 1.0/t43511;
                double t43513 = t43508*t43486;
                double t43514 = t43513+1.0;
                double t43515 = 1.0/t43514;
                double t43516 = 1.0/t43480;
                double t43517 = rho_a-rho_b;
                double t43518 = t43516*t43517;
                double t43519 = Ac_4*4.0;
                double t43520 = Ac_3*Ac_3;
                double t43521 = -t43520+t43519;
                double t43522 = Ac_2-t43483;
                double t43523 = Ac_3*t43483;
                double t43524 = Ac_4+t43523+t43482;
                double t43525 = 1.0/t43524;
                double t43526 = sqrt(t43521);
                double t43527 = Ac_3+t43492;
                double t43528 = 1.0/t43527;
                double t43529 = t43526*t43528;
                double t43530 = atan(t43529);
                double t43531 = 1.0/sqrt(t43521);
                double t43532 = 1.0/c;
                double t43533 = EcF_3*t43483;
                double t43534 = EcF_4+t43533+t43482;
                double t43535 = pow(t43480,1.0/3.0);
                double t43536 = EcF_3*c*t43500*t43498*(1.0/6.0);
                double t43537 = t43536+t43499;
                double t43538 = EcF_2-t43483;
                double t43539 = 1.0/(t43534*t43534);
                double t43540 = 1.0/t43534;
                double t43541 = EcF_3+t43492;
                double t43542 = 1.0/(t43541*t43541);
                double t43543 = EcF_4*4.0;
                double t43544 = EcF_3*EcF_3;
                double t43545 = t43543-t43544;
                double t43546 = t43542*t43545;
                double t43547 = t43546+1.0;
                double t43548 = 1.0/t43547;
                double t43549 = c*t43490*t43498*(1.0/3.0);
                double t43550 = t43549-c*t43502*t43504*t43481;
                double t43551 = t43532*t43550*t43535*t43489;
                double t43552 = t43502*t43503*t43504;
                double t43553 = c*t43500*t43490*t43487*t43498*(1.0/3.0);
                double t43554 = t43552+t43553;
                double t43555 = 1.0/(t43487*t43487);
                double t43556 = t43554*t43555*t43489;
                double t43557 = c*t43500*t43515*t43507*t43508*t43498*(1.0/3.0);
                double t43558 = t43556+t43557;
                double t43559 = EcP_2*EcP_3*t43512*t43558;
                double t43560 = t43551+t43559-EcP_3*c*t43500*t43515*t43508*t43498*(2.0/3.0);
                double t43561 = EcP_1*t43560;
                double t43562 = c*t43525*t43481;
                double t43563 = log(t43562);
                double t43564 = Ac_3*t43530*t43531*2.0;
                double t43565 = t43522*t43522;
                double t43566 = t43525*t43565;
                double t43567 = log(t43566);
                double t43568 = Ac_2*4.0;
                double t43569 = Ac_3*2.0;
                double t43570 = t43568+t43569;
                double t43571 = t43530*t43531*t43570;
                double t43572 = t43571+t43567;
                double t43573 = Ac_2*Ac_2;
                double t43574 = Ac_2*Ac_3;
                double t43575 = Ac_4+t43573+t43574;
                double t43576 = 1.0/t43575;
                double t43601 = Ac_2*Ac_3*t43572*t43576;
                double t43577 = -t43601+t43563+t43564;
                double t43578 = 1.0/Ac_1;
                double t43579 = t43538*t43538;
                double t43580 = sqrt(t43545);
                double t43581 = 1.0/t43541;
                double t43582 = t43580*t43581;
                double t43583 = atan(t43582);
                double t43584 = 1.0/sqrt(t43545);
                double t43585 = EcF_2*4.0;
                double t43586 = EcF_3*2.0;
                double t43587 = t43585+t43586;
                double t43588 = EcF_2*EcF_2;
                double t43589 = EcF_2*EcF_3;
                double t43590 = EcF_4+t43588+t43589;
                double t43591 = 1.0/t43590;
                double t43592 = c*t43481*t43490;
                double t43593 = log(t43592);
                double t43594 = EcP_3*t43496*t43497*2.0;
                double t43595 = t43503*t43490;
                double t43596 = log(t43595);
                double t43597 = t43507*t43496*t43497;
                double t43598 = t43596+t43597;
                double t43619 = EcP_2*EcP_3*t43512*t43598;
                double t43599 = -t43619+t43593+t43594;
                double t43600 = EcP_1*t43599;
                double t43602 = Ac_3*c*t43500*t43498*(1.0/6.0);
                double t43603 = t43602+t43499;
                double t43604 = 1.0/(t43524*t43524);
                double t43605 = 1.0/(t43527*t43527);
                double t43606 = t43521*t43605;
                double t43607 = t43606+1.0;
                double t43608 = 1.0/t43607;
                double t43609 = t43517*t43517;
                double t43610 = 1.0/(t43480*t43480*t43480*t43480);
                double t43611 = c*t43540*t43481;
                double t43612 = log(t43611);
                double t43613 = EcF_3*t43583*t43584*2.0;
                double t43614 = t43540*t43579;
                double t43615 = log(t43614);
                double t43616 = t43583*t43584*t43587;
                double t43617 = t43615+t43616;
                double t43623 = EcF_2*EcF_3*t43617*t43591;
                double t43618 = t43612+t43613-t43623;
                double t43620 = 1.0/t43577;
                double t43624 = EcF_1*t43618;
                double t43621 = t43600-t43624;
                double t43622 = t43609*t43609;
                double t43625 = d2fz0*t43620*t43621*t43578;
                double t43626 = t43625+1.0;
                double t43627 = 1.0/d2fz0;
                double t43628 = two_13*2.0;
                double t43629 = t43628-2.0;
                double t43630 = 1.0/t43629;
                double t43631 = t43518+1.0;
                double t43632 = pow(t43631,4.0/3.0);
                double t43633 = -t43518+1.0;
                double t43634 = pow(t43633,4.0/3.0);
                double t43635 = t43632+t43634-2.0;
                double t43636 = c*t43525*t43498*(1.0/3.0);
                double t43637 = t43636-c*t43603*t43604*t43481;
                double t43638 = t43532*t43524*t43535*t43637;
                double t43639 = t43603*t43604*t43565;
                double t43640 = c*t43500*t43522*t43525*t43498*(1.0/3.0);
                double t43641 = t43640+t43639;
                double t43642 = 1.0/(t43522*t43522);
                double t43643 = t43524*t43641*t43642;
                double t43644 = c*t43500*t43605*t43570*t43608*t43498*(1.0/3.0);
                double t43645 = t43643+t43644;
                double t43646 = Ac_2*Ac_3*t43645*t43576;
                double t43647 = t43646+t43638-Ac_3*c*t43500*t43605*t43608*t43498*(2.0/3.0);
                double t43648 = 1.0/(t43480*t43480);
                double t43649 = t43516-t43517*t43648;
                double t43650 = t43610*t43622*t43626;
                double t43651 = t43650-1.0;
                v_rho_a[Q] += scale * t43600-t43480*(t43561-Ac_1*t43630*t43635*t43627*t43577*(t43622*1.0/(t43480*t43480*t43480*t43480*t43480)*t43626*4.0+t43610*t43622*(d2fz0*t43620*t43578*(t43561-EcF_1*(EcF_2*EcF_3*t43591*(t43534*1.0/(t43538*t43538)*(t43537*t43539*t43579+c*t43500*t43540*t43538*t43498*(1.0/3.0))+c*t43500*t43542*t43548*t43587*t43498*(1.0/3.0))+t43532*t43534*t43535*(c*t43540*t43498*(1.0/3.0)-c*t43481*t43537*t43539)-EcF_3*c*t43500*t43542*t43548*t43498*(2.0/3.0)))-d2fz0*t43621*t43647*1.0/(t43577*t43577)*t43578)-t43610*t43517*t43626*t43609*4.0)+Ac_1*t43630*t43651*t43627*t43577*(pow(t43631,1.0/3.0)*t43649*(4.0/3.0)-pow(t43633,1.0/3.0)*t43649*(4.0/3.0))-Ac_1*t43630*t43651*t43635*t43627*t43647)-Ac_1*t43630*t43651*t43635*t43627*t43577;
            }
            
            // v_rho_b
            if (deriv >= 1) {
                double t43653 = rho_a+rho_b;
                double t43654 = 1.0/pow(t43653,1.0/3.0);
                double t43655 = c*t43654;
                double t43656 = sqrt(t43655);
                double t43657 = EcP_4*4.0;
                double t43658 = EcP_3*EcP_3;
                double t43659 = t43657-t43658;
                double t43660 = EcP_2-t43656;
                double t43661 = EcP_3*t43656;
                double t43662 = EcP_4+t43661+t43655;
                double t43663 = 1.0/t43662;
                double t43664 = sqrt(t43659);
                double t43665 = t43656*2.0;
                double t43666 = EcP_3+t43665;
                double t43667 = 1.0/t43666;
                double t43668 = t43664*t43667;
                double t43669 = atan(t43668);
                double t43670 = 1.0/sqrt(t43659);
                double t43671 = 1.0/pow(t43653,4.0/3.0);
                double t43672 = c*t43671*(1.0/3.0);
                double t43673 = 1.0/sqrt(t43655);
                double t43674 = EcP_3*c*t43671*t43673*(1.0/6.0);
                double t43675 = t43672+t43674;
                double t43676 = t43660*t43660;
                double t43677 = 1.0/(t43662*t43662);
                double t43678 = EcP_2*4.0;
                double t43679 = EcP_3*2.0;
                double t43680 = t43678+t43679;
                double t43681 = 1.0/(t43666*t43666);
                double t43682 = EcP_2*EcP_2;
                double t43683 = EcP_2*EcP_3;
                double t43684 = EcP_4+t43682+t43683;
                double t43685 = 1.0/t43684;
                double t43686 = t43681*t43659;
                double t43687 = t43686+1.0;
                double t43688 = 1.0/t43687;
                double t43689 = 1.0/t43653;
                double t43690 = rho_a-rho_b;
                double t43691 = t43690*t43689;
                double t43692 = Ac_4*4.0;
                double t43693 = Ac_3*Ac_3;
                double t43694 = t43692-t43693;
                double t43695 = Ac_2-t43656;
                double t43696 = Ac_3*t43656;
                double t43697 = Ac_4+t43655+t43696;
                double t43698 = 1.0/t43697;
                double t43699 = sqrt(t43694);
                double t43700 = Ac_3+t43665;
                double t43701 = 1.0/t43700;
                double t43702 = t43701*t43699;
                double t43703 = atan(t43702);
                double t43704 = 1.0/sqrt(t43694);
                double t43705 = 1.0/c;
                double t43706 = EcF_3*t43656;
                double t43707 = EcF_4+t43706+t43655;
                double t43708 = pow(t43653,1.0/3.0);
                double t43709 = EcF_3*c*t43671*t43673*(1.0/6.0);
                double t43710 = t43672+t43709;
                double t43711 = EcF_2-t43656;
                double t43712 = 1.0/(t43707*t43707);
                double t43713 = 1.0/t43707;
                double t43714 = EcF_3+t43665;
                double t43715 = 1.0/(t43714*t43714);
                double t43716 = EcF_4*4.0;
                double t43717 = EcF_3*EcF_3;
                double t43718 = t43716-t43717;
                double t43719 = t43715*t43718;
                double t43720 = t43719+1.0;
                double t43721 = 1.0/t43720;
                double t43722 = c*t43671*t43663*(1.0/3.0);
                double t43723 = t43722-c*t43654*t43675*t43677;
                double t43724 = t43705*t43723*t43662*t43708;
                double t43725 = t43675*t43676*t43677;
                double t43726 = c*t43660*t43671*t43663*t43673*(1.0/3.0);
                double t43727 = t43725+t43726;
                double t43728 = 1.0/(t43660*t43660);
                double t43729 = t43662*t43727*t43728;
                double t43730 = c*t43671*t43680*t43681*t43673*t43688*(1.0/3.0);
                double t43731 = t43730+t43729;
                double t43732 = EcP_2*EcP_3*t43731*t43685;
                double t43733 = t43732+t43724-EcP_3*c*t43671*t43681*t43673*t43688*(2.0/3.0);
                double t43734 = EcP_1*t43733;
                double t43735 = c*t43654*t43698;
                double t43736 = log(t43735);
                double t43737 = Ac_3*t43703*t43704*2.0;
                double t43738 = t43695*t43695;
                double t43739 = t43738*t43698;
                double t43740 = log(t43739);
                double t43741 = Ac_2*4.0;
                double t43742 = Ac_3*2.0;
                double t43743 = t43741+t43742;
                double t43744 = t43703*t43704*t43743;
                double t43745 = t43740+t43744;
                double t43746 = Ac_2*Ac_2;
                double t43747 = Ac_2*Ac_3;
                double t43748 = Ac_4+t43746+t43747;
                double t43749 = 1.0/t43748;
                double t43774 = Ac_2*Ac_3*t43745*t43749;
                double t43750 = t43736+t43737-t43774;
                double t43751 = 1.0/Ac_1;
                double t43752 = t43711*t43711;
                double t43753 = sqrt(t43718);
                double t43754 = 1.0/t43714;
                double t43755 = t43753*t43754;
                double t43756 = atan(t43755);
                double t43757 = 1.0/sqrt(t43718);
                double t43758 = EcF_2*4.0;
                double t43759 = EcF_3*2.0;
                double t43760 = t43758+t43759;
                double t43761 = EcF_2*EcF_2;
                double t43762 = EcF_2*EcF_3;
                double t43763 = EcF_4+t43761+t43762;
                double t43764 = 1.0/t43763;
                double t43765 = c*t43654*t43663;
                double t43766 = log(t43765);
                double t43767 = EcP_3*t43670*t43669*2.0;
                double t43768 = t43663*t43676;
                double t43769 = log(t43768);
                double t43770 = t43670*t43680*t43669;
                double t43771 = t43770+t43769;
                double t43792 = EcP_2*EcP_3*t43771*t43685;
                double t43772 = -t43792+t43766+t43767;
                double t43773 = EcP_1*t43772;
                double t43775 = Ac_3*c*t43671*t43673*(1.0/6.0);
                double t43776 = t43672+t43775;
                double t43777 = 1.0/(t43697*t43697);
                double t43778 = 1.0/(t43700*t43700);
                double t43779 = t43694*t43778;
                double t43780 = t43779+1.0;
                double t43781 = 1.0/t43780;
                double t43782 = t43690*t43690;
                double t43783 = 1.0/(t43653*t43653*t43653*t43653);
                double t43784 = c*t43713*t43654;
                double t43785 = log(t43784);
                double t43786 = EcF_3*t43756*t43757*2.0;
                double t43787 = t43713*t43752;
                double t43788 = log(t43787);
                double t43789 = t43760*t43756*t43757;
                double t43790 = t43788+t43789;
                double t43796 = EcF_2*EcF_3*t43790*t43764;
                double t43791 = t43785+t43786-t43796;
                double t43793 = 1.0/t43750;
                double t43797 = EcF_1*t43791;
                double t43794 = t43773-t43797;
                double t43795 = t43782*t43782;
                double t43798 = d2fz0*t43751*t43793*t43794;
                double t43799 = t43798+1.0;
                double t43800 = 1.0/d2fz0;
                double t43801 = two_13*2.0;
                double t43802 = t43801-2.0;
                double t43803 = 1.0/t43802;
                double t43804 = t43691+1.0;
                double t43805 = pow(t43804,4.0/3.0);
                double t43806 = -t43691+1.0;
                double t43807 = pow(t43806,4.0/3.0);
                double t43808 = t43805+t43807-2.0;
                double t43809 = c*t43671*t43698*(1.0/3.0);
                double t43810 = t43809-c*t43654*t43776*t43777;
                double t43811 = t43810*t43705*t43708*t43697;
                double t43812 = t43738*t43776*t43777;
                double t43813 = c*t43671*t43673*t43695*t43698*(1.0/3.0);
                double t43814 = t43812+t43813;
                double t43815 = 1.0/(t43695*t43695);
                double t43816 = t43814*t43815*t43697;
                double t43817 = c*t43671*t43743*t43673*t43781*t43778*(1.0/3.0);
                double t43818 = t43816+t43817;
                double t43819 = Ac_2*Ac_3*t43818*t43749;
                double t43820 = t43811+t43819-Ac_3*c*t43671*t43673*t43781*t43778*(2.0/3.0);
                double t43821 = 1.0/(t43653*t43653);
                double t43822 = t43821*t43690;
                double t43823 = t43822+t43689;
                double t43824 = t43783*t43795*t43799;
                double t43825 = t43824-1.0;
                v_rho_b[Q] += scale * t43773+t43653*(-t43734+Ac_1*t43800*t43803*t43750*t43808*(1.0/(t43653*t43653*t43653*t43653*t43653)*t43795*t43799*4.0+t43783*t43795*(d2fz0*t43751*t43793*(t43734-EcF_1*(EcF_2*EcF_3*t43764*(1.0/(t43711*t43711)*t43707*(t43710*t43712*t43752+c*t43711*t43713*t43671*t43673*(1.0/3.0))+c*t43721*t43715*t43760*t43671*t43673*(1.0/3.0))+t43705*t43707*t43708*(c*t43713*t43671*(1.0/3.0)-c*t43710*t43712*t43654)-EcF_3*c*t43721*t43715*t43671*t43673*(2.0/3.0)))-d2fz0*t43820*1.0/(t43750*t43750)*t43751*t43794)+t43690*t43782*t43783*t43799*4.0)+Ac_1*t43800*t43803*t43750*t43825*(pow(t43804,1.0/3.0)*t43823*(4.0/3.0)-t43823*pow(t43806,1.0/3.0)*(4.0/3.0))+Ac_1*t43800*t43820*t43803*t43825*t43808)-Ac_1*t43800*t43803*t43750*t43825*t43808;
            }
            
            // v_rho_a_rho_a
            if (deriv >= 2) {
                double t43832 = rho_a+rho_b;
                double t43833 = 1.0/pow(t43832,1.0/3.0);
                double t43834 = c*t43833;
                double t43835 = 1.0/pow(t43832,4.0/3.0);
                double t43836 = sqrt(t43834);
                double t43837 = EcP_3*t43836;
                double t43838 = EcP_4+t43834+t43837;
                double t43839 = c*t43835*(1.0/3.0);
                double t43840 = 1.0/sqrt(t43834);
                double t43841 = EcP_3*c*t43840*t43835*(1.0/6.0);
                double t43842 = t43841+t43839;
                double t43843 = 1.0/c;
                double t43844 = 1.0/t43838;
                double t43845 = c*t43835*t43844*(1.0/3.0);
                double t43846 = 1.0/(t43838*t43838);
                double t43980 = c*t43833*t43842*t43846;
                double t43847 = t43845-t43980;
                double t43848 = pow(t43832,1.0/3.0);
                double t43849 = 1.0/pow(t43832,7.0/3.0);
                double t43850 = EcP_2-t43836;
                double t43851 = 1.0/(t43850*t43850);
                double t43852 = t43850*t43850;
                double t43853 = c*t43849*(4.0/9.0);
                double t43854 = EcP_3*c*t43840*t43849*(2.0/9.0);
                double t43855 = c*c;
                double t43856 = 1.0/pow(t43832,8.0/3.0);
                double t43857 = 1.0/pow(t43834,3.0/2.0);
                double t43983 = EcP_3*t43855*t43856*t43857*(1.0/3.6E1);
                double t43858 = t43853+t43854-t43983;
                double t43859 = t43842*t43842;
                double t43860 = 1.0/(t43838*t43838*t43838);
                double t43861 = t43836*2.0;
                double t43862 = EcP_3+t43861;
                double t43863 = EcP_2*4.0;
                double t43864 = EcP_3*2.0;
                double t43865 = t43863+t43864;
                double t43866 = 1.0/(t43862*t43862);
                double t43867 = EcP_4*4.0;
                double t43868 = EcP_3*EcP_3;
                double t43869 = t43867-t43868;
                double t43870 = t43866*t43869;
                double t43871 = t43870+1.0;
                double t43872 = 1.0/t43871;
                double t43873 = t43842*t43852*t43846;
                double t43874 = c*t43840*t43850*t43835*t43844*(1.0/3.0);
                double t43875 = t43873+t43874;
                double t43876 = 1.0/(t43862*t43862*t43862);
                double t43877 = 1.0/(t43862*t43862*t43862*t43862*t43862);
                double t43878 = 1.0/(t43871*t43871);
                double t43879 = rho_a-rho_b;
                double t43880 = t43879*t43879;
                double t43881 = EcF_4*4.0;
                double t43882 = EcF_3*EcF_3;
                double t43883 = t43881-t43882;
                double t43884 = EcF_2-t43836;
                double t43885 = EcF_3*t43836;
                double t43886 = EcF_4+t43834+t43885;
                double t43887 = 1.0/t43886;
                double t43888 = sqrt(t43883);
                double t43889 = EcF_3+t43861;
                double t43890 = 1.0/t43889;
                double t43891 = t43890*t43888;
                double t43892 = atan(t43891);
                double t43893 = 1.0/sqrt(t43883);
                double t43894 = sqrt(t43869);
                double t43895 = 1.0/t43862;
                double t43896 = t43894*t43895;
                double t43897 = atan(t43896);
                double t43898 = 1.0/sqrt(t43869);
                double t43899 = EcP_2*EcP_2;
                double t43900 = EcP_2*EcP_3;
                double t43901 = EcP_4+t43900+t43899;
                double t43902 = 1.0/t43901;
                double t43903 = Ac_4*4.0;
                double t43904 = Ac_3*Ac_3;
                double t43905 = t43903-t43904;
                double t43906 = Ac_2-t43836;
                double t43907 = Ac_3*t43836;
                double t43908 = Ac_4+t43834+t43907;
                double t43909 = 1.0/t43908;
                double t43910 = sqrt(t43905);
                double t43911 = Ac_3+t43861;
                double t43912 = 1.0/t43911;
                double t43913 = t43910*t43912;
                double t43914 = atan(t43913);
                double t43915 = 1.0/sqrt(t43905);
                double t43916 = c*t43833*t43909;
                double t43917 = log(t43916);
                double t43918 = Ac_3*t43914*t43915*2.0;
                double t43919 = t43906*t43906;
                double t43920 = t43909*t43919;
                double t43921 = log(t43920);
                double t43922 = Ac_2*4.0;
                double t43923 = Ac_3*2.0;
                double t43924 = t43922+t43923;
                double t43925 = t43914*t43915*t43924;
                double t43926 = t43921+t43925;
                double t43927 = Ac_2*Ac_2;
                double t43928 = Ac_2*Ac_3;
                double t43929 = Ac_4+t43927+t43928;
                double t43930 = 1.0/t43929;
                double t43947 = Ac_2*Ac_3*t43930*t43926;
                double t43931 = t43917+t43918-t43947;
                double t43932 = 1.0/t43832;
                double t43933 = t43932*t43879;
                double t43934 = 1.0/(t43832*t43832);
                double t43935 = t43934*2.0;
                double t43936 = 1.0/(t43832*t43832*t43832);
                double t43937 = t43935-t43936*t43879*2.0;
                double t43938 = t43933+1.0;
                double t43941 = t43934*t43879;
                double t43939 = t43932-t43941;
                double t43940 = -t43933+1.0;
                double t43942 = t43939*t43939;
                double t43943 = 1.0/d2fz0;
                double t43944 = two_13*2.0;
                double t43945 = t43944-2.0;
                double t43946 = 1.0/t43945;
                double t43948 = 1.0/(t43832*t43832*t43832*t43832);
                double t43949 = t43880*t43880;
                double t43950 = 1.0/Ac_1;
                double t43951 = EcF_3*c*t43840*t43835*(1.0/6.0);
                double t43952 = t43951+t43839;
                double t43953 = c*t43835*t43887*(1.0/3.0);
                double t43954 = 1.0/(t43886*t43886);
                double t44004 = c*t43833*t43952*t43954;
                double t43955 = t43953-t44004;
                double t43956 = 1.0/pow(t43832,2.0/3.0);
                double t43957 = EcF_2*EcF_2;
                double t43958 = EcF_2*EcF_3;
                double t43959 = EcF_4+t43957+t43958;
                double t43960 = 1.0/t43959;
                double t43961 = t43884*t43884;
                double t43962 = 1.0/(t43884*t43884);
                double t43963 = EcF_3*c*t43840*t43849*(2.0/9.0);
                double t43964 = t43853+t43963-EcF_3*t43855*t43856*t43857*(1.0/3.6E1);
                double t43965 = t43952*t43952;
                double t43966 = 1.0/(t43886*t43886*t43886);
                double t43967 = EcF_2*4.0;
                double t43968 = EcF_3*2.0;
                double t43969 = t43967+t43968;
                double t43970 = 1.0/(t43889*t43889);
                double t43971 = t43970*t43883;
                double t43972 = t43971+1.0;
                double t43973 = 1.0/t43972;
                double t43974 = t43952*t43961*t43954;
                double t43975 = c*t43840*t43835*t43884*t43887*(1.0/3.0);
                double t43976 = t43974+t43975;
                double t43977 = 1.0/(t43889*t43889*t43889);
                double t43978 = 1.0/(t43889*t43889*t43889*t43889*t43889);
                double t43979 = 1.0/(t43972*t43972);
                double t43981 = t43842*t43843*t43847*t43848;
                double t43982 = c*t43844*t43849*(4.0/9.0);
                double t43984 = c*t43833*t43860*t43859*2.0;
                double t43985 = t43982+t43984-c*t43842*t43835*t43846*(2.0/3.0)-c*t43833*t43846*t43858;
                double t43986 = t43843*t43838*t43848*t43985;
                double t43987 = t43842*t43851*t43875;
                double t43988 = c*t43844*t43849*(1.0/1.8E1);
                double t43989 = t43860*t43852*t43859*2.0;
                double t43990 = t43850*t43844*t43855*t43856*t43857*(1.0/1.8E1);
                double t43991 = c*t43840*t43850*t43842*t43835*t43846*(2.0/3.0);
                double t43992 = t43990+t43991+t43988+t43989-t43852*t43846*t43858-c*t43840*t43850*t43844*t43849*(4.0/9.0);
                double t43993 = c*t43840*t43872*t43865*t43866*t43849*(4.0/9.0);
                double t43994 = 1.0/(t43850*t43850*t43850);
                double t43995 = c*t43840*t43835*t43838*t43875*t43994*(1.0/3.0);
                double t43996 = c*t43865*t43849*t43877*t43869*t43878*(2.0/9.0);
                double t43997 = t43993+t43995+t43987+t43996-t43851*t43838*t43992-c*t43872*t43865*t43849*t43876*(2.0/9.0)-t43872*t43855*t43856*t43865*t43857*t43866*(1.0/1.8E1);
                double t43998 = EcP_2*EcP_3*t43902*t43997;
                double t43999 = EcP_3*c*t43872*t43849*t43876*(4.0/9.0);
                double t44000 = EcP_3*t43872*t43855*t43856*t43857*t43866*(1.0/9.0);
                double t44001 = t43981+t43986+t43998+t43999+t44000-t43843*t43838*t43847*t43956*(1.0/3.0)-EcP_3*c*t43840*t43872*t43866*t43849*(8.0/9.0)-EcP_3*c*t43849*t43877*t43869*t43878*(4.0/9.0);
                double t44002 = EcP_1*t44001;
                double t44003 = 1.0/t43931;
                double t44005 = Ac_3*c*t43840*t43835*(1.0/6.0);
                double t44006 = t43839+t44005;
                double t44007 = 1.0/(t43908*t43908);
                double t44008 = 1.0/(t43911*t43911);
                double t44009 = t43905*t44008;
                double t44010 = t44009+1.0;
                double t44011 = 1.0/t44010;
                double t44012 = c*t43833*t43887;
                double t44013 = log(t44012);
                double t44014 = EcF_3*t43892*t43893*2.0;
                double t44015 = t43961*t43887;
                double t44016 = log(t44015);
                double t44017 = t43892*t43893*t43969;
                double t44018 = t44016+t44017;
                double t44042 = EcF_2*EcF_3*t43960*t44018;
                double t44019 = t44013+t44014-t44042;
                double t44020 = EcF_1*t44019;
                double t44021 = c*t43833*t43844;
                double t44022 = log(t44021);
                double t44023 = EcP_3*t43897*t43898*2.0;
                double t44024 = t43852*t43844;
                double t44025 = log(t44024);
                double t44026 = t43865*t43897*t43898;
                double t44027 = t44025+t44026;
                double t44043 = EcP_2*EcP_3*t43902*t44027;
                double t44028 = t44022+t44023-t44043;
                double t44044 = EcP_1*t44028;
                double t44029 = t44020-t44044;
                double t44030 = c*t43835*t43909*(1.0/3.0);
                double t44046 = c*t43833*t44006*t44007;
                double t44031 = t44030-t44046;
                double t44032 = t43843*t43908*t43848*t44031;
                double t44033 = t43919*t44006*t44007;
                double t44034 = c*t43840*t43906*t43835*t43909*(1.0/3.0);
                double t44035 = t44033+t44034;
                double t44036 = 1.0/(t43906*t43906);
                double t44037 = t43908*t44035*t44036;
                double t44038 = c*t43840*t43924*t43835*t44011*t44008*(1.0/3.0);
                double t44039 = t44037+t44038;
                double t44040 = Ac_2*Ac_3*t43930*t44039;
                double t44068 = Ac_3*c*t43840*t43835*t44011*t44008*(2.0/3.0);
                double t44041 = t44040+t44032-t44068;
                double t44045 = 1.0/(t43931*t43931);
                double t44047 = Ac_3*c*t43840*t43849*(2.0/9.0);
                double t44091 = Ac_3*t43855*t43856*t43857*(1.0/3.6E1);
                double t44048 = t43853-t44091+t44047;
                double t44049 = t44006*t44006;
                double t44050 = 1.0/(t43908*t43908*t43908);
                double t44051 = 1.0/(t43911*t43911*t43911);
                double t44052 = 1.0/(t43911*t43911*t43911*t43911*t43911);
                double t44053 = 1.0/(t44010*t44010);
                double t44054 = t43843*t43955*t43848*t43886;
                double t44055 = t43962*t43886*t43976;
                double t44056 = c*t43840*t43835*t43970*t43973*t43969*(1.0/3.0);
                double t44057 = t44055+t44056;
                double t44058 = EcF_2*EcF_3*t43960*t44057;
                double t44069 = EcF_3*c*t43840*t43835*t43970*t43973*(2.0/3.0);
                double t44059 = t44054+t44058-t44069;
                double t44060 = EcF_1*t44059;
                double t44061 = t43843*t43838*t43847*t43848;
                double t44062 = t43851*t43838*t43875;
                double t44063 = c*t43840*t43835*t43872*t43865*t43866*(1.0/3.0);
                double t44064 = t44062+t44063;
                double t44065 = EcP_2*EcP_3*t43902*t44064;
                double t44070 = EcP_3*c*t43840*t43835*t43872*t43866*(2.0/3.0);
                double t44066 = t44061-t44070+t44065;
                double t44071 = EcP_1*t44066;
                double t44067 = t44060-t44071;
                double t44072 = d2fz0*t43950*t44003*t44067;
                double t44079 = d2fz0*t43950*t44041*t44045*t44029;
                double t44073 = t44072-t44079;
                double t44074 = d2fz0*t43950*t44003*t44029;
                double t44075 = t44074-1.0;
                double t44076 = 1.0/(t43832*t43832*t43832*t43832*t43832);
                double t44077 = pow(t43938,1.0/3.0);
                double t44078 = pow(t43940,1.0/3.0);
                double t44080 = t43939*t44077*(4.0/3.0);
                double t44112 = t43939*t44078*(4.0/3.0);
                double t44081 = -t44112+t44080;
                double t44082 = t43948*t43949*t44075;
                double t44083 = t44082+1.0;
                double t44084 = pow(t43938,4.0/3.0);
                double t44085 = pow(t43940,4.0/3.0);
                double t44086 = t44084+t44085-2.0;
                double t44087 = t43948*t43949*t44073;
                double t44088 = t43949*t44075*t44076*4.0;
                double t44111 = t43880*t43948*t43879*t44075*4.0;
                double t44089 = -t44111+t44087+t44088;
                double t44090 = c*t43909*t43849*(4.0/9.0);
                double t44092 = c*t43833*t44050*t44049*2.0;
                double t44093 = t44090+t44092-c*t43835*t44006*t44007*(2.0/3.0)-c*t43833*t44007*t44048;
                double t44094 = t43843*t43908*t43848*t44093;
                double t44095 = t44006*t44035*t44036;
                double t44096 = c*t43909*t43849*(1.0/1.8E1);
                double t44097 = t43919*t44050*t44049*2.0;
                double t44098 = t43906*t43855*t43909*t43856*t43857*(1.0/1.8E1);
                double t44099 = c*t43840*t43906*t43835*t44006*t44007*(2.0/3.0);
                double t44100 = t44096+t44097+t44098+t44099-t43919*t44007*t44048-c*t43840*t43906*t43909*t43849*(4.0/9.0);
                double t44101 = c*t43840*t43924*t43849*t44011*t44008*(4.0/9.0);
                double t44102 = 1.0/(t43906*t43906*t43906);
                double t44103 = c*t43840*t43835*t43908*t44102*t44035*(1.0/3.0);
                double t44104 = c*t43905*t43924*t43849*t44052*t44053*(2.0/9.0);
                double t44105 = t44101+t44103+t44104+t44095-t43908*t44100*t44036-c*t43924*t43849*t44011*t44051*(2.0/9.0)-t43924*t43855*t43856*t43857*t44011*t44008*(1.0/1.8E1);
                double t44106 = Ac_2*Ac_3*t43930*t44105;
                double t44107 = t43843*t43848*t44031*t44006;
                double t44108 = Ac_3*c*t43849*t44011*t44051*(4.0/9.0);
                double t44109 = Ac_3*t43855*t43856*t43857*t44011*t44008*(1.0/9.0);
                double t44110 = t44106+t44107+t44108+t44109+t44094-t43843*t43908*t43956*t44031*(1.0/3.0)-Ac_3*c*t43840*t43849*t44011*t44008*(8.0/9.0)-Ac_3*c*t43905*t43849*t44052*t44053*(4.0/9.0);
                v_rho_a_rho_a[Q] += scale * EcP_1*t44066*-2.0+t43832*(t44002+Ac_1*t43931*t43943*t43946*t44086*(1.0/(t43832*t43832*t43832*t43832*t43832*t43832)*t43949*t44075*2.0E1+t43880*t43948*t44075*1.2E1+t43949*t44073*t44076*8.0-t43948*t43949*(d2fz0*t43950*t44003*(t44002-EcF_1*(t43843*t43848*t43886*(c*t43849*t43887*(4.0/9.0)-c*t43835*t43952*t43954*(2.0/3.0)-c*t43833*t43954*t43964+c*t43833*t43965*t43966*2.0)+t43843*t43952*t43955*t43848-t43843*t43955*t43956*t43886*(1.0/3.0)+EcF_2*EcF_3*t43960*(-t43962*t43886*(c*t43849*t43887*(1.0/1.8E1)-t43961*t43954*t43964+t43961*t43965*t43966*2.0-c*t43840*t43884*t43849*t43887*(4.0/9.0)+t43855*t43856*t43857*t43884*t43887*(1.0/1.8E1)+c*t43840*t43835*t43952*t43954*t43884*(2.0/3.0))+t43952*t43962*t43976-c*t43973*t43849*t43977*t43969*(2.0/9.0)+c*t43840*t43970*t43973*t43849*t43969*(4.0/9.0)+c*t43883*t43849*t43969*t43978*t43979*(2.0/9.0)-t43970*t43855*t43856*t43973*t43857*t43969*(1.0/1.8E1)+c*t43840*t43835*1.0/(t43884*t43884*t43884)*t43886*t43976*(1.0/3.0))+EcF_3*c*t43973*t43849*t43977*(4.0/9.0)-EcF_3*c*t43840*t43970*t43973*t43849*(8.0/9.0)-EcF_3*c*t43883*t43849*t43978*t43979*(4.0/9.0)+EcF_3*t43970*t43855*t43856*t43973*t43857*(1.0/9.0)))-d2fz0*1.0/(t43931*t43931*t43931)*t43950*(t44041*t44041)*t44029*2.0+d2fz0*t43950*t44110*t44045*t44029+d2fz0*t43950*t44041*t44045*t44067*2.0)-t43880*t43948*t43879*t44073*8.0-t43880*t43879*t44075*t44076*3.2E1)+Ac_1*t43931*t43943*t43946*t44083*(t43937*t44077*(-4.0/3.0)+t43937*t44078*(4.0/3.0)+1.0/pow(t43940,2.0/3.0)*t43942*(4.0/9.0)+t43942*1.0/pow(t43938,2.0/3.0)*(4.0/9.0))-Ac_1*t43931*t43943*t43946*t44081*t44089*2.0-Ac_1*t43943*t43946*t44041*t44081*t44083*2.0+Ac_1*t43943*t43946*t44110*t44083*t44086+Ac_1*t43943*t43946*t44041*t44086*t44089*2.0)+Ac_1*t43931*t43943*t43946*t44081*t44083*2.0-Ac_1*t43931*t43943*t43946*t44086*t44089*2.0-Ac_1*t43943*t43946*t44041*t44083*t44086*2.0;
            }
            
            // v_rho_a_rho_b
            if (deriv >= 2) {
                double t44114 = rho_a+rho_b;
                double t44115 = 1.0/pow(t44114,1.0/3.0);
                double t44116 = c*t44115;
                double t44117 = 1.0/pow(t44114,4.0/3.0);
                double t44118 = sqrt(t44116);
                double t44119 = EcP_3*t44118;
                double t44120 = EcP_4+t44116+t44119;
                double t44121 = c*t44117*(1.0/3.0);
                double t44122 = 1.0/sqrt(t44116);
                double t44123 = EcP_3*c*t44122*t44117*(1.0/6.0);
                double t44124 = t44121+t44123;
                double t44125 = EcP_2-t44118;
                double t44126 = 1.0/(t44120*t44120);
                double t44127 = 1.0/t44120;
                double t44128 = t44118*2.0;
                double t44129 = EcP_3+t44128;
                double t44130 = 1.0/(t44129*t44129);
                double t44131 = EcP_4*4.0;
                double t44132 = EcP_3*EcP_3;
                double t44133 = t44131-t44132;
                double t44134 = t44130*t44133;
                double t44135 = t44134+1.0;
                double t44136 = 1.0/t44135;
                double t44137 = 1.0/c;
                double t44138 = c*t44117*t44127*(1.0/3.0);
                double t44141 = c*t44115*t44124*t44126;
                double t44139 = -t44141+t44138;
                double t44140 = pow(t44114,1.0/3.0);
                double t44142 = 1.0/pow(t44114,7.0/3.0);
                double t44143 = EcP_2*EcP_2;
                double t44144 = EcP_2*EcP_3;
                double t44145 = EcP_4+t44143+t44144;
                double t44146 = 1.0/t44145;
                double t44147 = t44125*t44125;
                double t44148 = t44124*t44126*t44147;
                double t44149 = c*t44122*t44125*t44117*t44127*(1.0/3.0);
                double t44150 = t44148+t44149;
                double t44151 = 1.0/(t44125*t44125);
                double t44152 = c*t44142*(4.0/9.0);
                double t44153 = EcP_3*c*t44122*t44142*(2.0/9.0);
                double t44154 = c*c;
                double t44155 = 1.0/pow(t44114,8.0/3.0);
                double t44156 = 1.0/pow(t44116,3.0/2.0);
                double t44345 = EcP_3*t44154*t44155*t44156*(1.0/3.6E1);
                double t44157 = t44152+t44153-t44345;
                double t44158 = t44124*t44124;
                double t44159 = 1.0/(t44120*t44120*t44120);
                double t44160 = EcP_2*4.0;
                double t44161 = EcP_3*2.0;
                double t44162 = t44160+t44161;
                double t44163 = 1.0/(t44129*t44129*t44129);
                double t44164 = 1.0/(t44129*t44129*t44129*t44129*t44129);
                double t44165 = 1.0/(t44135*t44135);
                double t44166 = rho_a-rho_b;
                double t44167 = t44166*t44166;
                double t44168 = EcF_4*4.0;
                double t44169 = EcF_3*EcF_3;
                double t44170 = t44168-t44169;
                double t44171 = EcF_2-t44118;
                double t44172 = EcF_3*t44118;
                double t44173 = EcF_4+t44116+t44172;
                double t44174 = 1.0/t44173;
                double t44175 = sqrt(t44170);
                double t44176 = EcF_3+t44128;
                double t44177 = 1.0/t44176;
                double t44178 = t44175*t44177;
                double t44179 = atan(t44178);
                double t44180 = 1.0/sqrt(t44170);
                double t44181 = sqrt(t44133);
                double t44182 = 1.0/t44129;
                double t44183 = t44181*t44182;
                double t44184 = atan(t44183);
                double t44185 = 1.0/sqrt(t44133);
                double t44186 = Ac_4*4.0;
                double t44187 = Ac_3*Ac_3;
                double t44188 = t44186-t44187;
                double t44189 = Ac_2-t44118;
                double t44190 = Ac_3*t44118;
                double t44191 = Ac_4+t44116+t44190;
                double t44192 = 1.0/t44191;
                double t44193 = sqrt(t44188);
                double t44194 = Ac_3+t44128;
                double t44195 = 1.0/t44194;
                double t44196 = t44193*t44195;
                double t44197 = atan(t44196);
                double t44198 = 1.0/sqrt(t44188);
                double t44199 = c*t44115*t44192;
                double t44200 = log(t44199);
                double t44201 = Ac_3*t44197*t44198*2.0;
                double t44202 = t44189*t44189;
                double t44203 = t44202*t44192;
                double t44204 = log(t44203);
                double t44205 = Ac_2*4.0;
                double t44206 = Ac_3*2.0;
                double t44207 = t44205+t44206;
                double t44208 = t44207*t44197*t44198;
                double t44209 = t44204+t44208;
                double t44210 = Ac_2*Ac_2;
                double t44211 = Ac_2*Ac_3;
                double t44212 = Ac_4+t44210+t44211;
                double t44213 = 1.0/t44212;
                double t44230 = Ac_2*Ac_3*t44213*t44209;
                double t44214 = t44200+t44201-t44230;
                double t44215 = 1.0/t44114;
                double t44216 = t44215*t44166;
                double t44217 = 1.0/(t44114*t44114*t44114);
                double t44218 = t44216+1.0;
                double t44219 = 1.0/(t44114*t44114);
                double t44220 = t44219*t44166;
                double t44221 = -t44216+1.0;
                double t44222 = t44220+t44215;
                double t44223 = t44220-t44215;
                double t44224 = 1.0/d2fz0;
                double t44225 = two_13*2.0;
                double t44226 = t44225-2.0;
                double t44227 = 1.0/t44226;
                double t44228 = pow(t44218,1.0/3.0);
                double t44229 = pow(t44221,1.0/3.0);
                double t44231 = 1.0/(t44114*t44114*t44114*t44114);
                double t44232 = 1.0/Ac_1;
                double t44233 = EcF_3*c*t44122*t44117*(1.0/6.0);
                double t44234 = t44121+t44233;
                double t44235 = t44171*t44171;
                double t44236 = 1.0/(t44173*t44173);
                double t44237 = EcF_2*4.0;
                double t44238 = EcF_3*2.0;
                double t44239 = t44237+t44238;
                double t44240 = 1.0/(t44176*t44176);
                double t44241 = EcF_2*EcF_2;
                double t44242 = EcF_2*EcF_3;
                double t44243 = EcF_4+t44241+t44242;
                double t44244 = 1.0/t44243;
                double t44245 = t44240*t44170;
                double t44246 = t44245+1.0;
                double t44247 = 1.0/t44246;
                double t44248 = t44120*t44140*t44137*t44139;
                double t44249 = t44120*t44150*t44151;
                double t44250 = c*t44130*t44122*t44117*t44162*t44136*(1.0/3.0);
                double t44251 = t44250+t44249;
                double t44252 = EcP_2*EcP_3*t44251*t44146;
                double t44299 = EcP_3*c*t44130*t44122*t44117*t44136*(2.0/3.0);
                double t44253 = t44252+t44248-t44299;
                double t44254 = 1.0/t44214;
                double t44255 = c*t44115*t44174;
                double t44256 = log(t44255);
                double t44257 = EcF_3*t44180*t44179*2.0;
                double t44258 = t44235*t44174;
                double t44259 = log(t44258);
                double t44260 = t44180*t44239*t44179;
                double t44261 = t44260+t44259;
                double t44281 = EcF_2*EcF_3*t44261*t44244;
                double t44262 = -t44281+t44256+t44257;
                double t44263 = EcF_1*t44262;
                double t44264 = c*t44115*t44127;
                double t44265 = log(t44264);
                double t44266 = EcP_3*t44184*t44185*2.0;
                double t44267 = t44127*t44147;
                double t44268 = log(t44267);
                double t44269 = t44162*t44184*t44185;
                double t44270 = t44268+t44269;
                double t44282 = EcP_2*EcP_3*t44270*t44146;
                double t44271 = -t44282+t44265+t44266;
                double t44283 = EcP_1*t44271;
                double t44272 = t44263-t44283;
                double t44273 = Ac_3*c*t44122*t44117*(1.0/6.0);
                double t44274 = t44121+t44273;
                double t44275 = 1.0/(t44191*t44191);
                double t44276 = 1.0/(t44194*t44194);
                double t44277 = t44276*t44188;
                double t44278 = t44277+1.0;
                double t44279 = 1.0/t44278;
                double t44280 = t44167*t44167;
                double t44284 = d2fz0*t44232*t44254*t44272;
                double t44285 = t44284-1.0;
                double t44286 = c*t44117*t44174*(1.0/3.0);
                double t44326 = c*t44115*t44234*t44236;
                double t44287 = -t44326+t44286;
                double t44288 = t44140*t44137*t44173*t44287;
                double t44289 = t44234*t44235*t44236;
                double t44290 = c*t44122*t44117*t44171*t44174*(1.0/3.0);
                double t44291 = t44290+t44289;
                double t44292 = 1.0/(t44171*t44171);
                double t44293 = t44173*t44291*t44292;
                double t44294 = c*t44122*t44240*t44117*t44247*t44239*(1.0/3.0);
                double t44295 = t44293+t44294;
                double t44296 = EcF_2*EcF_3*t44244*t44295;
                double t44327 = EcF_3*c*t44122*t44240*t44117*t44247*(2.0/3.0);
                double t44297 = -t44327+t44296+t44288;
                double t44298 = EcF_1*t44297;
                double t44328 = EcP_1*t44253;
                double t44300 = -t44328+t44298;
                double t44301 = d2fz0*t44300*t44232*t44254;
                double t44302 = 1.0/(t44214*t44214);
                double t44303 = c*t44117*t44192*(1.0/3.0);
                double t44323 = c*t44115*t44274*t44275;
                double t44304 = t44303-t44323;
                double t44305 = t44140*t44304*t44137*t44191;
                double t44306 = t44202*t44274*t44275;
                double t44307 = c*t44122*t44117*t44192*t44189*(1.0/3.0);
                double t44308 = t44306+t44307;
                double t44309 = 1.0/(t44189*t44189);
                double t44310 = t44191*t44308*t44309;
                double t44311 = c*t44122*t44117*t44207*t44276*t44279*(1.0/3.0);
                double t44312 = t44310+t44311;
                double t44313 = Ac_2*Ac_3*t44213*t44312;
                double t44324 = Ac_3*c*t44122*t44117*t44276*t44279*(2.0/3.0);
                double t44314 = t44313+t44305-t44324;
                double t44329 = d2fz0*t44302*t44232*t44314*t44272;
                double t44315 = t44301-t44329;
                double t44316 = t44231*t44315*t44280;
                double t44317 = 1.0/(t44114*t44114*t44114*t44114*t44114);
                double t44318 = t44280*t44317*t44285*4.0;
                double t44319 = t44222*t44228*(4.0/3.0);
                double t44394 = t44222*t44229*(4.0/3.0);
                double t44320 = t44319-t44394;
                double t44321 = t44231*t44280*t44285;
                double t44322 = t44321+1.0;
                double t44325 = t44223*t44228*(4.0/3.0);
                double t44330 = t44231*t44166*t44167*t44285*4.0;
                double t44331 = pow(t44218,4.0/3.0);
                double t44332 = pow(t44221,4.0/3.0);
                double t44333 = t44331+t44332-2.0;
                double t44334 = t44330+t44316+t44318;
                double t44335 = 1.0/pow(t44114,2.0/3.0);
                double t44336 = EcF_3*c*t44122*t44142*(2.0/9.0);
                double t44337 = t44152+t44336-EcF_3*t44154*t44155*t44156*(1.0/3.6E1);
                double t44338 = t44234*t44234;
                double t44339 = 1.0/(t44173*t44173*t44173);
                double t44340 = 1.0/(t44176*t44176*t44176);
                double t44341 = 1.0/(t44176*t44176*t44176*t44176*t44176);
                double t44342 = 1.0/(t44246*t44246);
                double t44343 = t44140*t44124*t44137*t44139;
                double t44344 = c*t44142*t44127*(4.0/9.0);
                double t44346 = c*t44115*t44158*t44159*2.0;
                double t44347 = t44344+t44346-c*t44124*t44117*t44126*(2.0/3.0)-c*t44115*t44126*t44157;
                double t44348 = t44120*t44140*t44137*t44347;
                double t44349 = t44150*t44124*t44151;
                double t44350 = c*t44142*t44127*(1.0/1.8E1);
                double t44351 = t44147*t44158*t44159*2.0;
                double t44352 = t44125*t44127*t44154*t44155*t44156*(1.0/1.8E1);
                double t44353 = c*t44122*t44124*t44125*t44117*t44126*(2.0/3.0);
                double t44354 = t44350+t44351+t44352+t44353-t44126*t44147*t44157-c*t44122*t44142*t44125*t44127*(4.0/9.0);
                double t44355 = c*t44130*t44122*t44142*t44162*t44136*(4.0/9.0);
                double t44356 = 1.0/(t44125*t44125*t44125);
                double t44357 = c*t44120*t44122*t44150*t44117*t44356*(1.0/3.0);
                double t44358 = c*t44133*t44142*t44162*t44164*t44165*(2.0/9.0);
                double t44359 = t44355+t44357+t44349+t44358-t44120*t44151*t44354-c*t44142*t44162*t44136*t44163*(2.0/9.0)-t44130*t44162*t44136*t44154*t44155*t44156*(1.0/1.8E1);
                double t44360 = EcP_2*EcP_3*t44146*t44359;
                double t44361 = EcP_3*c*t44142*t44136*t44163*(4.0/9.0);
                double t44362 = EcP_3*t44130*t44136*t44154*t44155*t44156*(1.0/9.0);
                double t44363 = t44360+t44343+t44361+t44362+t44348-t44120*t44137*t44335*t44139*(1.0/3.0)-EcP_3*c*t44130*t44122*t44142*t44136*(8.0/9.0)-EcP_3*c*t44133*t44142*t44164*t44165*(4.0/9.0);
                double t44364 = EcP_1*t44363;
                double t44365 = Ac_3*c*t44122*t44142*(2.0/9.0);
                double t44373 = Ac_3*t44154*t44155*t44156*(1.0/3.6E1);
                double t44366 = t44152-t44373+t44365;
                double t44367 = t44274*t44274;
                double t44368 = 1.0/(t44191*t44191*t44191);
                double t44369 = 1.0/(t44194*t44194*t44194);
                double t44370 = 1.0/(t44194*t44194*t44194*t44194*t44194);
                double t44371 = 1.0/(t44278*t44278);
                double t44372 = c*t44142*t44192*(4.0/9.0);
                double t44374 = c*t44115*t44367*t44368*2.0;
                double t44375 = t44372+t44374-c*t44115*t44275*t44366-c*t44117*t44274*t44275*(2.0/3.0);
                double t44376 = t44140*t44137*t44191*t44375;
                double t44377 = t44308*t44309*t44274;
                double t44378 = c*t44142*t44192*(1.0/1.8E1);
                double t44379 = t44202*t44367*t44368*2.0;
                double t44380 = t44154*t44155*t44156*t44192*t44189*(1.0/1.8E1);
                double t44381 = c*t44122*t44117*t44274*t44275*t44189*(2.0/3.0);
                double t44382 = t44380+t44381+t44378+t44379-t44202*t44275*t44366-c*t44122*t44142*t44192*t44189*(4.0/9.0);
                double t44383 = c*t44122*t44142*t44207*t44276*t44279*(4.0/9.0);
                double t44384 = 1.0/(t44189*t44189*t44189);
                double t44385 = c*t44122*t44117*t44191*t44308*t44384*(1.0/3.0);
                double t44386 = c*t44142*t44207*t44370*t44371*t44188*(2.0/9.0);
                double t44387 = t44383+t44385+t44377+t44386-t44191*t44309*t44382-c*t44142*t44207*t44279*t44369*(2.0/9.0)-t44207*t44154*t44155*t44156*t44276*t44279*(1.0/1.8E1);
                double t44388 = Ac_2*Ac_3*t44213*t44387;
                double t44389 = t44140*t44304*t44137*t44274;
                double t44390 = Ac_3*c*t44142*t44279*t44369*(4.0/9.0);
                double t44391 = Ac_3*t44154*t44155*t44156*t44276*t44279*(1.0/9.0);
                double t44392 = t44390+t44391+t44376+t44388+t44389-t44304*t44137*t44191*t44335*(1.0/3.0)-Ac_3*c*t44122*t44142*t44276*t44279*(8.0/9.0)-Ac_3*c*t44142*t44370*t44371*t44188*(4.0/9.0);
                double t44393 = -t44330+t44316+t44318;
                v_rho_a_rho_b[Q] += scale * EcP_1*t44253*-2.0+t44114*(t44364+Ac_1*t44214*t44224*t44333*t44227*(1.0/(t44114*t44114*t44114*t44114*t44114*t44114)*t44280*t44285*2.0E1+t44315*t44280*t44317*8.0-t44231*t44167*t44285*1.2E1-t44231*t44280*(d2fz0*t44232*t44254*(t44364-EcF_1*(t44140*t44137*t44173*(c*t44142*t44174*(4.0/9.0)-c*t44117*t44234*t44236*(2.0/3.0)-c*t44115*t44236*t44337+c*t44115*t44338*t44339*2.0)+t44140*t44234*t44137*t44287-t44137*t44173*t44335*t44287*(1.0/3.0)+EcF_2*EcF_3*t44244*(-t44173*t44292*(c*t44142*t44174*(1.0/1.8E1)-t44235*t44236*t44337+t44235*t44338*t44339*2.0-c*t44122*t44142*t44171*t44174*(4.0/9.0)+t44171*t44154*t44155*t44156*t44174*(1.0/1.8E1)+c*t44122*t44117*t44171*t44234*t44236*(2.0/3.0))+t44234*t44291*t44292-c*t44142*t44340*t44247*t44239*(2.0/9.0)+c*t44122*t44240*t44142*t44247*t44239*(4.0/9.0)+c*t44142*t44170*t44341*t44342*t44239*(2.0/9.0)-t44240*t44154*t44155*t44156*t44247*t44239*(1.0/1.8E1)+c*t44122*t44117*1.0/(t44171*t44171*t44171)*t44173*t44291*(1.0/3.0))+EcF_3*c*t44142*t44340*t44247*(4.0/9.0)-EcF_3*c*t44122*t44240*t44142*t44247*(8.0/9.0)-EcF_3*c*t44142*t44170*t44341*t44342*(4.0/9.0)+EcF_3*t44240*t44154*t44155*t44156*t44247*(1.0/9.0)))-d2fz0*1.0/(t44214*t44214*t44214)*t44232*(t44314*t44314)*t44272*2.0+d2fz0*t44300*t44302*t44232*t44314*2.0+d2fz0*t44302*t44232*t44272*t44392))+Ac_1*t44214*t44322*t44224*t44227*(1.0/pow(t44221,2.0/3.0)*t44222*t44223*(4.0/9.0)+t44222*t44223*1.0/pow(t44218,2.0/3.0)*(4.0/9.0)+t44217*t44228*t44166*(8.0/3.0)-t44217*t44166*t44229*(8.0/3.0))+Ac_1*t44322*t44224*t44314*t44227*(t44325-t44229*(t44220-t44215)*(4.0/3.0))+Ac_1*t44214*t44224*t44334*t44227*(t44325-t44229*(t44220-t44215)*(4.0/3.0))+Ac_1*t44320*t44322*t44224*t44314*t44227+Ac_1*t44224*t44314*t44333*t44334*t44227+Ac_1*t44322*t44224*t44333*t44227*t44392+Ac_1*t44224*t44314*t44333*t44227*t44393+Ac_1*t44320*t44214*t44224*t44227*(t44316+t44318-t44231*t44166*t44167*t44285*4.0))-Ac_1*t44214*t44322*t44224*t44227*(t44325-t44223*t44229*(4.0/3.0))-Ac_1*t44320*t44214*t44322*t44224*t44227-Ac_1*t44322*t44224*t44314*t44333*t44227*2.0-Ac_1*t44214*t44224*t44333*t44334*t44227-Ac_1*t44214*t44224*t44333*t44227*t44393;
            }
            
            // v_rho_b_rho_b
            if (deriv >= 2) {
                double t44396 = rho_a+rho_b;
                double t44397 = 1.0/pow(t44396,1.0/3.0);
                double t44398 = c*t44397;
                double t44399 = 1.0/pow(t44396,4.0/3.0);
                double t44400 = sqrt(t44398);
                double t44401 = EcP_3*t44400;
                double t44402 = EcP_4+t44401+t44398;
                double t44403 = c*t44399*(1.0/3.0);
                double t44404 = 1.0/sqrt(t44398);
                double t44405 = EcP_3*c*t44404*t44399*(1.0/6.0);
                double t44406 = t44403+t44405;
                double t44407 = 1.0/c;
                double t44408 = 1.0/t44402;
                double t44409 = c*t44408*t44399*(1.0/3.0);
                double t44410 = 1.0/(t44402*t44402);
                double t44545 = c*t44410*t44406*t44397;
                double t44411 = t44409-t44545;
                double t44412 = pow(t44396,1.0/3.0);
                double t44413 = 1.0/pow(t44396,7.0/3.0);
                double t44414 = EcP_2-t44400;
                double t44415 = 1.0/(t44414*t44414);
                double t44416 = t44414*t44414;
                double t44417 = c*t44413*(4.0/9.0);
                double t44418 = EcP_3*c*t44404*t44413*(2.0/9.0);
                double t44419 = c*c;
                double t44420 = 1.0/pow(t44396,8.0/3.0);
                double t44421 = 1.0/pow(t44398,3.0/2.0);
                double t44548 = EcP_3*t44420*t44421*t44419*(1.0/3.6E1);
                double t44422 = t44417+t44418-t44548;
                double t44423 = t44406*t44406;
                double t44424 = 1.0/(t44402*t44402*t44402);
                double t44425 = t44400*2.0;
                double t44426 = EcP_3+t44425;
                double t44427 = EcP_2*4.0;
                double t44428 = EcP_3*2.0;
                double t44429 = t44427+t44428;
                double t44430 = 1.0/(t44426*t44426);
                double t44431 = EcP_4*4.0;
                double t44432 = EcP_3*EcP_3;
                double t44433 = t44431-t44432;
                double t44434 = t44430*t44433;
                double t44435 = t44434+1.0;
                double t44436 = 1.0/t44435;
                double t44437 = t44410*t44406*t44416;
                double t44438 = c*t44404*t44414*t44408*t44399*(1.0/3.0);
                double t44439 = t44437+t44438;
                double t44440 = 1.0/(t44426*t44426*t44426);
                double t44441 = 1.0/(t44426*t44426*t44426*t44426*t44426);
                double t44442 = 1.0/(t44435*t44435);
                double t44443 = rho_a-rho_b;
                double t44444 = t44443*t44443;
                double t44445 = EcF_4*4.0;
                double t44446 = EcF_3*EcF_3;
                double t44447 = t44445-t44446;
                double t44448 = EcF_2-t44400;
                double t44449 = EcF_3*t44400;
                double t44450 = EcF_4+t44449+t44398;
                double t44451 = 1.0/t44450;
                double t44452 = sqrt(t44447);
                double t44453 = EcF_3+t44425;
                double t44454 = 1.0/t44453;
                double t44455 = t44452*t44454;
                double t44456 = atan(t44455);
                double t44457 = 1.0/sqrt(t44447);
                double t44458 = sqrt(t44433);
                double t44459 = 1.0/t44426;
                double t44460 = t44458*t44459;
                double t44461 = atan(t44460);
                double t44462 = 1.0/sqrt(t44433);
                double t44463 = EcP_2*EcP_2;
                double t44464 = EcP_2*EcP_3;
                double t44465 = EcP_4+t44463+t44464;
                double t44466 = 1.0/t44465;
                double t44467 = Ac_4*4.0;
                double t44468 = Ac_3*Ac_3;
                double t44469 = t44467-t44468;
                double t44470 = Ac_2-t44400;
                double t44471 = Ac_3*t44400;
                double t44472 = Ac_4+t44471+t44398;
                double t44473 = 1.0/t44472;
                double t44474 = sqrt(t44469);
                double t44475 = Ac_3+t44425;
                double t44476 = 1.0/t44475;
                double t44477 = t44474*t44476;
                double t44478 = atan(t44477);
                double t44479 = 1.0/sqrt(t44469);
                double t44480 = c*t44473*t44397;
                double t44481 = log(t44480);
                double t44482 = Ac_3*t44478*t44479*2.0;
                double t44483 = t44470*t44470;
                double t44484 = t44473*t44483;
                double t44485 = log(t44484);
                double t44486 = Ac_2*4.0;
                double t44487 = Ac_3*2.0;
                double t44488 = t44486+t44487;
                double t44489 = t44478*t44479*t44488;
                double t44490 = t44485+t44489;
                double t44491 = Ac_2*Ac_2;
                double t44492 = Ac_2*Ac_3;
                double t44493 = Ac_4+t44491+t44492;
                double t44494 = 1.0/t44493;
                double t44512 = Ac_2*Ac_3*t44490*t44494;
                double t44495 = -t44512+t44481+t44482;
                double t44496 = 1.0/t44396;
                double t44497 = t44443*t44496;
                double t44498 = 1.0/(t44396*t44396);
                double t44499 = t44498*2.0;
                double t44500 = 1.0/(t44396*t44396*t44396);
                double t44501 = t44500*t44443*2.0;
                double t44502 = t44501+t44499;
                double t44503 = t44497+1.0;
                double t44506 = t44443*t44498;
                double t44504 = t44506+t44496;
                double t44505 = -t44497+1.0;
                double t44507 = t44504*t44504;
                double t44508 = 1.0/d2fz0;
                double t44509 = two_13*2.0;
                double t44510 = t44509-2.0;
                double t44511 = 1.0/t44510;
                double t44513 = 1.0/(t44396*t44396*t44396*t44396);
                double t44514 = t44444*t44444;
                double t44515 = 1.0/Ac_1;
                double t44516 = EcF_3*c*t44404*t44399*(1.0/6.0);
                double t44517 = t44403+t44516;
                double t44518 = c*t44451*t44399*(1.0/3.0);
                double t44519 = 1.0/(t44450*t44450);
                double t44569 = c*t44517*t44519*t44397;
                double t44520 = t44518-t44569;
                double t44521 = 1.0/pow(t44396,2.0/3.0);
                double t44522 = EcF_2*EcF_2;
                double t44523 = EcF_2*EcF_3;
                double t44524 = EcF_4+t44522+t44523;
                double t44525 = 1.0/t44524;
                double t44526 = t44448*t44448;
                double t44527 = 1.0/(t44448*t44448);
                double t44528 = EcF_3*c*t44404*t44413*(2.0/9.0);
                double t44529 = t44417+t44528-EcF_3*t44420*t44421*t44419*(1.0/3.6E1);
                double t44530 = t44517*t44517;
                double t44531 = 1.0/(t44450*t44450*t44450);
                double t44532 = EcF_2*4.0;
                double t44533 = EcF_3*2.0;
                double t44534 = t44532+t44533;
                double t44535 = 1.0/(t44453*t44453);
                double t44536 = t44535*t44447;
                double t44537 = t44536+1.0;
                double t44538 = 1.0/t44537;
                double t44539 = t44517*t44526*t44519;
                double t44540 = c*t44404*t44451*t44448*t44399*(1.0/3.0);
                double t44541 = t44540+t44539;
                double t44542 = 1.0/(t44453*t44453*t44453);
                double t44543 = 1.0/(t44453*t44453*t44453*t44453*t44453);
                double t44544 = 1.0/(t44537*t44537);
                double t44546 = t44411*t44412*t44406*t44407;
                double t44547 = c*t44413*t44408*(4.0/9.0);
                double t44549 = c*t44423*t44424*t44397*2.0;
                double t44550 = t44547+t44549-c*t44410*t44422*t44397-c*t44410*t44406*t44399*(2.0/3.0);
                double t44551 = t44402*t44412*t44550*t44407;
                double t44552 = t44406*t44415*t44439;
                double t44553 = c*t44413*t44408*(1.0/1.8E1);
                double t44554 = t44423*t44424*t44416*2.0;
                double t44555 = t44420*t44421*t44414*t44408*t44419*(1.0/1.8E1);
                double t44556 = c*t44410*t44404*t44414*t44406*t44399*(2.0/3.0);
                double t44557 = t44553+t44554+t44555+t44556-t44410*t44422*t44416-c*t44404*t44413*t44414*t44408*(4.0/9.0);
                double t44558 = c*t44430*t44404*t44413*t44436*t44429*(4.0/9.0);
                double t44559 = 1.0/(t44414*t44414*t44414);
                double t44560 = c*t44402*t44404*t44439*t44559*t44399*(1.0/3.0);
                double t44561 = c*t44413*t44441*t44433*t44442*t44429*(2.0/9.0);
                double t44562 = t44560+t44552+t44561+t44558-t44402*t44415*t44557-c*t44413*t44440*t44436*t44429*(2.0/9.0)-t44420*t44421*t44430*t44436*t44419*t44429*(1.0/1.8E1);
                double t44563 = EcP_2*EcP_3*t44562*t44466;
                double t44564 = EcP_3*c*t44413*t44440*t44436*(4.0/9.0);
                double t44565 = EcP_3*t44420*t44421*t44430*t44436*t44419*(1.0/9.0);
                double t44566 = t44551+t44563+t44546+t44564+t44565-t44402*t44411*t44521*t44407*(1.0/3.0)-EcP_3*c*t44430*t44404*t44413*t44436*(8.0/9.0)-EcP_3*c*t44413*t44441*t44433*t44442*(4.0/9.0);
                double t44567 = EcP_1*t44566;
                double t44568 = 1.0/t44495;
                double t44570 = Ac_3*c*t44404*t44399*(1.0/6.0);
                double t44571 = t44403+t44570;
                double t44572 = 1.0/(t44472*t44472);
                double t44573 = 1.0/(t44475*t44475);
                double t44574 = t44573*t44469;
                double t44575 = t44574+1.0;
                double t44576 = 1.0/t44575;
                double t44577 = c*t44451*t44397;
                double t44578 = log(t44577);
                double t44579 = EcF_3*t44456*t44457*2.0;
                double t44580 = t44451*t44526;
                double t44581 = log(t44580);
                double t44582 = t44534*t44456*t44457;
                double t44583 = t44581+t44582;
                double t44607 = EcF_2*EcF_3*t44525*t44583;
                double t44584 = -t44607+t44578+t44579;
                double t44585 = EcF_1*t44584;
                double t44586 = c*t44408*t44397;
                double t44587 = log(t44586);
                double t44588 = EcP_3*t44461*t44462*2.0;
                double t44589 = t44416*t44408;
                double t44590 = log(t44589);
                double t44591 = t44461*t44462*t44429;
                double t44592 = t44590+t44591;
                double t44608 = EcP_2*EcP_3*t44466*t44592;
                double t44593 = -t44608+t44587+t44588;
                double t44609 = EcP_1*t44593;
                double t44594 = -t44609+t44585;
                double t44595 = c*t44473*t44399*(1.0/3.0);
                double t44611 = c*t44571*t44572*t44397;
                double t44596 = -t44611+t44595;
                double t44597 = t44412*t44407*t44472*t44596;
                double t44598 = t44571*t44572*t44483;
                double t44599 = c*t44404*t44470*t44473*t44399*(1.0/3.0);
                double t44600 = t44598+t44599;
                double t44601 = 1.0/(t44470*t44470);
                double t44602 = t44600*t44601*t44472;
                double t44603 = c*t44404*t44573*t44576*t44488*t44399*(1.0/3.0);
                double t44604 = t44602+t44603;
                double t44605 = Ac_2*Ac_3*t44604*t44494;
                double t44633 = Ac_3*c*t44404*t44573*t44576*t44399*(2.0/3.0);
                double t44606 = t44605-t44633+t44597;
                double t44610 = 1.0/(t44495*t44495);
                double t44612 = Ac_3*c*t44404*t44413*(2.0/9.0);
                double t44657 = Ac_3*t44420*t44421*t44419*(1.0/3.6E1);
                double t44613 = t44612+t44417-t44657;
                double t44614 = t44571*t44571;
                double t44615 = 1.0/(t44472*t44472*t44472);
                double t44616 = 1.0/(t44475*t44475*t44475);
                double t44617 = 1.0/(t44475*t44475*t44475*t44475*t44475);
                double t44618 = 1.0/(t44575*t44575);
                double t44619 = t44412*t44520*t44450*t44407;
                double t44620 = t44450*t44541*t44527;
                double t44621 = c*t44404*t44534*t44535*t44538*t44399*(1.0/3.0);
                double t44622 = t44620+t44621;
                double t44623 = EcF_2*EcF_3*t44622*t44525;
                double t44634 = EcF_3*c*t44404*t44535*t44538*t44399*(2.0/3.0);
                double t44624 = t44623-t44634+t44619;
                double t44625 = EcF_1*t44624;
                double t44626 = t44402*t44411*t44412*t44407;
                double t44627 = t44402*t44415*t44439;
                double t44628 = c*t44430*t44404*t44436*t44429*t44399*(1.0/3.0);
                double t44629 = t44627+t44628;
                double t44630 = EcP_2*EcP_3*t44466*t44629;
                double t44635 = EcP_3*c*t44430*t44404*t44436*t44399*(2.0/3.0);
                double t44631 = t44630+t44626-t44635;
                double t44636 = EcP_1*t44631;
                double t44632 = t44625-t44636;
                double t44637 = d2fz0*t44515*t44632*t44568;
                double t44644 = d2fz0*t44610*t44515*t44606*t44594;
                double t44638 = -t44644+t44637;
                double t44639 = d2fz0*t44515*t44594*t44568;
                double t44640 = t44639-1.0;
                double t44641 = 1.0/(t44396*t44396*t44396*t44396*t44396);
                double t44642 = pow(t44503,1.0/3.0);
                double t44643 = pow(t44505,1.0/3.0);
                double t44645 = t44504*t44642*(4.0/3.0);
                double t44677 = t44504*t44643*(4.0/3.0);
                double t44646 = t44645-t44677;
                double t44647 = t44513*t44514*t44640;
                double t44648 = t44647+1.0;
                double t44649 = pow(t44503,4.0/3.0);
                double t44650 = pow(t44505,4.0/3.0);
                double t44651 = t44650+t44649-2.0;
                double t44652 = t44513*t44514*t44638;
                double t44653 = t44513*t44640*t44443*t44444*4.0;
                double t44654 = t44514*t44640*t44641*4.0;
                double t44655 = t44652+t44653+t44654;
                double t44656 = c*t44413*t44473*(4.0/9.0);
                double t44658 = c*t44614*t44615*t44397*2.0;
                double t44659 = t44656+t44658-c*t44613*t44572*t44397-c*t44571*t44572*t44399*(2.0/3.0);
                double t44660 = t44412*t44407*t44472*t44659;
                double t44661 = t44600*t44601*t44571;
                double t44662 = c*t44413*t44473*(1.0/1.8E1);
                double t44663 = t44614*t44615*t44483*2.0;
                double t44664 = t44420*t44421*t44470*t44419*t44473*(1.0/1.8E1);
                double t44665 = c*t44404*t44470*t44571*t44572*t44399*(2.0/3.0);
                double t44666 = t44662+t44663+t44664+t44665-t44613*t44572*t44483-c*t44404*t44413*t44470*t44473*(4.0/9.0);
                double t44667 = c*t44404*t44413*t44573*t44576*t44488*(4.0/9.0);
                double t44668 = 1.0/(t44470*t44470*t44470);
                double t44669 = c*t44600*t44404*t44472*t44668*t44399*(1.0/3.0);
                double t44670 = c*t44413*t44617*t44618*t44469*t44488*(2.0/9.0);
                double t44671 = t44661+t44670+t44667+t44669-t44601*t44472*t44666-c*t44413*t44616*t44576*t44488*(2.0/9.0)-t44420*t44421*t44419*t44573*t44576*t44488*(1.0/1.8E1);
                double t44672 = Ac_2*Ac_3*t44671*t44494;
                double t44673 = t44412*t44407*t44571*t44596;
                double t44674 = Ac_3*c*t44413*t44616*t44576*(4.0/9.0);
                double t44675 = Ac_3*t44420*t44421*t44419*t44573*t44576*(1.0/9.0);
                double t44676 = t44660+t44672+t44673+t44674+t44675-t44521*t44407*t44472*t44596*(1.0/3.0)-Ac_3*c*t44404*t44413*t44573*t44576*(8.0/9.0)-Ac_3*c*t44413*t44617*t44618*t44469*(4.0/9.0);
                v_rho_b_rho_b[Q] += scale * EcP_1*t44631*-2.0+t44396*(t44567+Ac_1*t44511*t44651*t44508*t44495*(t44514*t44640*1.0/(t44396*t44396*t44396*t44396*t44396*t44396)*2.0E1+t44513*t44640*t44444*1.2E1+t44514*t44641*t44638*8.0-t44513*t44514*(d2fz0*t44515*t44568*(t44567-EcF_1*(t44412*t44450*t44407*(c*t44413*t44451*(4.0/9.0)+c*t44530*t44531*t44397*2.0-c*t44517*t44519*t44399*(2.0/3.0)-c*t44519*t44529*t44397)-t44520*t44521*t44450*t44407*(1.0/3.0)+t44412*t44520*t44407*t44517+EcF_2*EcF_3*t44525*(-t44450*t44527*(c*t44413*t44451*(1.0/1.8E1)+t44530*t44531*t44526*2.0-t44526*t44519*t44529-c*t44404*t44413*t44451*t44448*(4.0/9.0)+t44420*t44421*t44451*t44419*t44448*(1.0/1.8E1)+c*t44404*t44517*t44519*t44448*t44399*(2.0/3.0))+t44541*t44517*t44527-c*t44413*t44542*t44534*t44538*(2.0/9.0)+c*t44404*t44413*t44534*t44535*t44538*(4.0/9.0)+c*t44413*t44534*t44543*t44544*t44447*(2.0/9.0)-t44420*t44421*t44534*t44535*t44419*t44538*(1.0/1.8E1)+c*t44404*t44450*t44541*1.0/(t44448*t44448*t44448)*t44399*(1.0/3.0))+EcF_3*c*t44413*t44542*t44538*(4.0/9.0)-EcF_3*c*t44404*t44413*t44535*t44538*(8.0/9.0)-EcF_3*c*t44413*t44543*t44544*t44447*(4.0/9.0)+EcF_3*t44420*t44421*t44535*t44419*t44538*(1.0/9.0)))-d2fz0*t44515*(t44606*t44606)*1.0/(t44495*t44495*t44495)*t44594*2.0+d2fz0*t44610*t44515*t44632*t44606*2.0+d2fz0*t44610*t44515*t44594*t44676)+t44640*t44443*t44641*t44444*3.2E1+t44513*t44443*t44444*t44638*8.0)+Ac_1*t44511*t44508*t44495*t44648*(t44502*t44642*(4.0/3.0)-t44502*t44643*(4.0/3.0)+1.0/pow(t44503,2.0/3.0)*t44507*(4.0/9.0)+1.0/pow(t44505,2.0/3.0)*t44507*(4.0/9.0))+Ac_1*t44511*t44606*t44651*t44508*t44655*2.0+Ac_1*t44511*t44606*t44508*t44646*t44648*2.0+Ac_1*t44511*t44651*t44508*t44648*t44676+Ac_1*t44511*t44508*t44646*t44655*t44495*2.0)-Ac_1*t44511*t44606*t44651*t44508*t44648*2.0-Ac_1*t44511*t44651*t44508*t44655*t44495*2.0-Ac_1*t44511*t44508*t44646*t44495*t44648*2.0;
            }
            
        }
    }
}

}
