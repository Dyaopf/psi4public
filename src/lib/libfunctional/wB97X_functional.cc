/**********************************************************
* wB97X_functional.cc: definitions for wB97X_functional for KS-DFT
* Robert Parrish, robparrish@gmail.com
* Autogenerated by MATLAB Script on 07-Mar-2012
*
***********************************************************/
#include <libmints/mints.h>
#include <libfock/points.h>
#include "wB97X_functional.h"
#include <stdlib.h>
#include <cmath>
#include <string>
#include <string>
#include <vector>

using namespace psi;
using namespace boost;
using namespace std;

namespace psi { namespace functional {

wB97X_Functional::wB97X_Functional(int npoints, int deriv) : Functional(npoints, deriv)
{

    name_ = "wB97X";
    description_ = "wB97X Hybrid Range-Corrected Power Series GGA";
    citation_ = "J. Chai and M. Head-Gordon, J. Chem. Phys., 128, pp. 084106, 2008";

    double omega = 2.9999999999999999E-01;
    params_.push_back(make_pair("omega",omega));
    double c0 = -9.3052573634909974E-01;
    params_.push_back(make_pair("c0",c0));
    double two_13 = 1.2599210498948732E+00;
    params_.push_back(make_pair("two_13",two_13));
    double d2fz0 = 1.7099210000000000E+00;
    params_.push_back(make_pair("d2fz0",d2fz0));
    double c = 6.2035049089939986E-01;
    params_.push_back(make_pair("c",c));
    double Aa = 1.6886999999999999E-02;
    params_.push_back(make_pair("Aa",Aa));
    double a1a = 1.1125000000000000E-01;
    params_.push_back(make_pair("a1a",a1a));
    double b1a = 1.0356999999999999E+01;
    params_.push_back(make_pair("b1a",b1a));
    double b2a = 3.6231000000000000E+00;
    params_.push_back(make_pair("b2a",b2a));
    double b3a = 8.8026000000000004E-01;
    params_.push_back(make_pair("b3a",b3a));
    double b4a = 4.9670999999999998E-01;
    params_.push_back(make_pair("b4a",b4a));
    double c0p = 3.1091000000000001E-02;
    params_.push_back(make_pair("c0p",c0p));
    double a1p = 2.1370000000000000E-01;
    params_.push_back(make_pair("a1p",a1p));
    double b1p = 7.5956999999999999E+00;
    params_.push_back(make_pair("b1p",b1p));
    double b2p = 3.5876000000000001E+00;
    params_.push_back(make_pair("b2p",b2p));
    double b3p = 1.6382000000000001E+00;
    params_.push_back(make_pair("b3p",b3p));
    double b4p = 4.9293999999999999E-01;
    params_.push_back(make_pair("b4p",b4p));
    double c0f = 1.5545000000000000E-02;
    params_.push_back(make_pair("c0f",c0f));
    double a1f = 2.0548000000000000E-01;
    params_.push_back(make_pair("a1f",a1f));
    double b1f = 1.4118900000000000E+01;
    params_.push_back(make_pair("b1f",b1f));
    double b2f = 6.1977000000000002E+00;
    params_.push_back(make_pair("b2f",b2f));
    double b3f = 3.3662000000000001E+00;
    params_.push_back(make_pair("b3f",b3f));
    double b4f = 6.2517000000000000E-01;
    params_.push_back(make_pair("b4f",b4f));
    double gcab = 6.0000000000000001E-03;
    params_.push_back(make_pair("gcab",gcab));
    double gcaa = 2.0000000000000001E-01;
    params_.push_back(make_pair("gcaa",gcaa));
    double gx = 4.0000000000000001E-03;
    params_.push_back(make_pair("gx",gx));
    double ccab0 = 1.0000000000000000E+00;
    params_.push_back(make_pair("ccab0",ccab0));
    double ccab1 = 2.3703099999999999E+00;
    params_.push_back(make_pair("ccab1",ccab1));
    double ccab2 = -1.1399500000000000E+01;
    params_.push_back(make_pair("ccab2",ccab2));
    double ccab3 = 6.5840500000000004E+00;
    params_.push_back(make_pair("ccab3",ccab3));
    double ccab4 = -3.7813200000000000E+00;
    params_.push_back(make_pair("ccab4",ccab4));
    double ccaa0 = 1.0000000000000000E+00;
    params_.push_back(make_pair("ccaa0",ccaa0));
    double ccaa1 = -4.3387900000000004E+00;
    params_.push_back(make_pair("ccaa1",ccaa1));
    double ccaa2 = 1.8230799999999999E+01;
    params_.push_back(make_pair("ccaa2",ccaa2));
    double ccaa3 = -3.1742999999999999E+01;
    params_.push_back(make_pair("ccaa3",ccaa3));
    double ccaa4 = 1.7290099999999999E+01;
    params_.push_back(make_pair("ccaa4",ccaa4));
    double cx0 = 8.4229399999999999E-01;
    params_.push_back(make_pair("cx0",cx0));
    double cx1 = 7.2647899999999999E-01;
    params_.push_back(make_pair("cx1",cx1));
    double cx2 = 1.0476000000000001E+00;
    params_.push_back(make_pair("cx2",cx2));
    double cx3 = -5.7063499999999996E+00;
    params_.push_back(make_pair("cx3",cx3));
    double cx4 = 1.3279400000000001E+01;
    params_.push_back(make_pair("cx4",cx4));

    is_gga_ = true;
    is_meta_ = false;

    //Required allocateion
    allocate();
}
wB97X_Functional::~wB97X_Functional()
{
}
void wB97X_Functional::computeRKSFunctional(boost::shared_ptr<RKSFunctions> prop)
{
    int ntrue = prop->npoints();

    const double* restrict rho_a;
    const double* restrict gamma_aa;
    const double* restrict tau_a;

    rho_a = prop->property_value("RHO_A")->pointer();
    if (is_gga_) {
        gamma_aa = prop->property_value("GAMMA_AA")->pointer();
    }
    if (is_meta_) {
        tau_a = prop->property_value("TAU_A")->pointer();
    }

    double omega = params_[0].second;
    double c0 = params_[1].second;
    double two_13 = params_[2].second;
    double d2fz0 = params_[3].second;
    double c = params_[4].second;
    double Aa = params_[5].second;
    double a1a = params_[6].second;
    double b1a = params_[7].second;
    double b2a = params_[8].second;
    double b3a = params_[9].second;
    double b4a = params_[10].second;
    double c0p = params_[11].second;
    double a1p = params_[12].second;
    double b1p = params_[13].second;
    double b2p = params_[14].second;
    double b3p = params_[15].second;
    double b4p = params_[16].second;
    double c0f = params_[17].second;
    double a1f = params_[18].second;
    double b1f = params_[19].second;
    double b2f = params_[20].second;
    double b3f = params_[21].second;
    double b4f = params_[22].second;
    double gcab = params_[23].second;
    double gcaa = params_[24].second;
    double gx = params_[25].second;
    double ccab0 = params_[26].second;
    double ccab1 = params_[27].second;
    double ccab2 = params_[28].second;
    double ccab3 = params_[29].second;
    double ccab4 = params_[30].second;
    double ccaa0 = params_[31].second;
    double ccaa1 = params_[32].second;
    double ccaa2 = params_[33].second;
    double ccaa3 = params_[34].second;
    double ccaa4 = params_[35].second;
    double cx0 = params_[36].second;
    double cx1 = params_[37].second;
    double cx2 = params_[38].second;
    double cx3 = params_[39].second;
    double cx4 = params_[40].second;

    //Functional
    for (int index = 0; index < ntrue; index++) {

        //Functional Value
        if (rho_a[index] > cutoff_) {
            double t164889 = 1.0/pow(rho_a[index],1.0/3.0);
            double t164890 = c*t164889;
            double t164891 = sqrt(t164890);
            double t164892 = pow(t164890,3.0/2.0);
            double t164893 = c*c;
            double t164894 = 1.0/pow(rho_a[index],2.0/3.0);
            double t164895 = 1.0/c0p;
            double t164896 = b1p*t164891;
            double t164897 = b3p*t164892;
            double t164898 = b4p*t164893*t164894;
            double t164899 = b2p*c*t164889;
            double t164900 = t164896+t164897+t164898+t164899;
            double t164901 = 1.0/t164900;
            double t164902 = t164901*t164895*(1.0/2.0);
            double t164903 = t164902+1.0;
            double t164904 = log(t164903);
            double t164905 = a1p*c*t164889;
            double t164906 = t164905+1.0;
            double t164907 = rho_a[index]*2.0;
            double t164908 = 1.0/pow(t164907,1.0/3.0);
            double t164909 = c*t164908;
            double t164910 = gamma_aa[index]*gamma_aa[index];
            double t164911 = gcab*gcab;
            double t164912 = t164910*t164910;
            double t164913 = t164911*t164911;
            double t164914 = 1.0/pow(rho_a[index],3.2E1/3.0);
            double t164915 = 1.0/pow(rho_a[index],8.0/3.0);
            double t164916 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]);
            double t164917 = 1.0/pow(rho_a[index],1.6E1/3.0);
            double t164918 = pow(2.0,1.0/3.0);
            double t164919 = t164918*2.0;
            double t164920 = t164919-2.0;
            double t164921 = two_13*2.0;
            double t164922 = t164921-2.0;
            double t164923 = 1.0/t164922;
            double t164924 = 1.0/c0f;
            double t164925 = b1f*t164891;
            double t164926 = b3f*t164892;
            double t164927 = b4f*t164893*t164894;
            double t164928 = b2f*c*t164889;
            double t164929 = t164925+t164926+t164927+t164928;
            double t164930 = 1.0/t164929;
            double t164931 = t164930*t164924*(1.0/2.0);
            double t164932 = t164931+1.0;
            double t164933 = log(t164932);
            double t164934 = a1f*c*t164889;
            double t164935 = t164934+1.0;
            double t164936 = c0f*t164933*t164935*2.0;
            double t164937 = c0p*t164904*t164906*2.0;
            double t164938 = gcaa*gcaa;
            double t164939 = t164938*t164938;
            double t164940 = rho_a[index]*(8.334140006820045E15/1.40737488355328E14);
            double t164941 = 1.0/pow(t164940,1.0/3.0);
            double t164942 = 1.0/(omega*omega);
            double t164943 = pow(t164940,2.0/3.0);
            double t164944 = exp(-t164942*t164943);
            double t164945 = gx*gx;
            double t164946 = t164945*t164945;
            functional_[index] = (rho_a[index]*(t164937+t164920*t164923*(t164936-c0p*t164904*t164906*2.0))*2.0- \
               c0p*rho_a[index]*log((t164895*(1.0/2.0))/(b1p*sqrt(t164909)+b3p*pow(t164909,3.0/2.0)+b4p*1.0/pow(t164907,2.0/ \
               3.0)*t164893+b2p*c*t164908)+1.0)*(a1p*c*t164908+1.0)*4.0)*(ccab0+(ccab2*t164910*t164911*t164917)/(gamma_aa[index]* \
               gcab*t164915*2.0+t164910*t164911*t164917+1.0)+(ccab1*gamma_aa[index]*gcab*t164915)/(gamma_aa[index]* \
               gcab*t164915+1.0)+(ccab4*t164912*t164913*t164914)/(gamma_aa[index]*gcab*t164915*4.0+t164910*t164911* \
               t164917*6.0+t164912*t164913*t164914+gamma_aa[index]*gcab*t164910*t164911*t164916*4.0+1.0)+(ccab3*gamma_aa[index]* \
               gcab*t164910*t164911*t164916)/(gamma_aa[index]*gcab*t164915*3.0+t164910*t164911*t164917*3.0+gamma_aa[index]* \
               gcab*t164910*t164911*t164916+1.0))-rho_a[index]*(t164937+t164920*t164923*(t164936-t164937))*(ccaa0+ \
               (ccaa2*t164910*t164917*t164938)/(gamma_aa[index]*gcaa*t164915*2.0+t164910*t164917*t164938+1.0)+(ccaa1* \
               gamma_aa[index]*gcaa*t164915)/(gamma_aa[index]*gcaa*t164915+1.0)+(ccaa4*t164912*t164914*t164939)/(gamma_aa[index]* \
               gcaa*t164915*4.0+t164910*t164917*t164938*6.0+t164912*t164914*t164939+gamma_aa[index]*gcaa*t164910* \
               t164916*t164938*4.0+1.0)+(ccaa3*gamma_aa[index]*gcaa*t164910*t164916*t164938)/(gamma_aa[index]*gcaa* \
               t164915*3.0+t164910*t164917*t164938*3.0+gamma_aa[index]*gcaa*t164910*t164916*t164938+1.0))*2.0-c0* \
               pow(rho_a[index],4.0/3.0)*(omega*t164941*(erf(pow(t164940,1.0/3.0)/omega)*(3.991211251234741E15/2.251799813685248E15) \
               -omega*t164941*(-t164944+(omega*omega)*1.0/pow(t164940,2.0/3.0)*(t164944-1.0)*(1.0/2.0)+3.0/2.0))* \
               (4.0/3.0)-1.0)*(cx0+(cx2*t164910*t164917*t164945)/(gamma_aa[index]*gx*t164915*2.0+t164910*t164917* \
               t164945+1.0)+(cx1*gamma_aa[index]*gx*t164915)/(gamma_aa[index]*gx*t164915+1.0)+(cx4*t164912*t164914* \
               t164946)/(gamma_aa[index]*gx*t164915*4.0+t164910*t164917*t164945*6.0+t164912*t164914*t164946+gamma_aa[index]* \
               gx*t164910*t164916*t164945*4.0+1.0)+(cx3*gamma_aa[index]*gx*t164910*t164916*t164945)/(gamma_aa[index]* \
               gx*t164915*3.0+t164910*t164917*t164945*3.0+gamma_aa[index]*gx*t164910*t164916*t164945+1.0))*2.0;
        } else {
            functional_[index] = 0.0;
        } 

    }
    //First Partials
    for (int index = 0; index < ntrue && deriv_ >= 1; index++) {

        //V_rho_a
        if (rho_a[index] > cutoff_) {
            double t164948 = gamma_aa[index]*gamma_aa[index];
            double t164949 = gcab*gcab;
            double t164950 = t164948*t164948;
            double t164951 = t164949*t164949;
            double t164952 = 1.0/pow(rho_a[index],3.2E1/3.0);
            double t164953 = 1.0/pow(rho_a[index],8.0/3.0);
            double t164954 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]);
            double t164955 = 1.0/pow(rho_a[index],1.6E1/3.0);
            double t164956 = rho_a[index]*2.0;
            double t164957 = 1.0/pow(t164956,1.0/3.0);
            double t164958 = c*t164957;
            double t164959 = sqrt(t164958);
            double t164960 = b1p*t164959;
            double t164961 = pow(t164958,3.0/2.0);
            double t164962 = b3p*t164961;
            double t164963 = b2p*c*t164957;
            double t164964 = c*c;
            double t164965 = 1.0/pow(t164956,2.0/3.0);
            double t164966 = b4p*t164964*t164965;
            double t164967 = t164960+t164962+t164963+t164966;
            double t164968 = 1.0/pow(t164956,4.0/3.0);
            double t164969 = 1.0/c0p;
            double t164970 = 1.0/t164967;
            double t164971 = t164970*t164969*(1.0/2.0);
            double t164972 = t164971+1.0;
            double t164973 = 1.0/pow(rho_a[index],1.0/3.0);
            double t164974 = c*t164973;
            double t164975 = sqrt(t164974);
            double t164976 = b1f*t164975;
            double t164977 = pow(t164974,3.0/2.0);
            double t164978 = b3f*t164977;
            double t164979 = 1.0/pow(rho_a[index],2.0/3.0);
            double t164980 = b4f*t164964*t164979;
            double t164981 = b2f*c*t164973;
            double t164982 = t164980+t164981+t164976+t164978;
            double t164983 = 1.0/pow(rho_a[index],4.0/3.0);
            double t164984 = b1p*t164975;
            double t164985 = b3p*t164977;
            double t164986 = b4p*t164964*t164979;
            double t164987 = b2p*c*t164973;
            double t164988 = t164984+t164985+t164986+t164987;
            double t164989 = 1.0/pow(rho_a[index],5.0/3.0);
            double t164990 = 1.0/sqrt(t164974);
            double t164991 = 1.0/c0f;
            double t164992 = 1.0/t164982;
            double t164993 = t164991*t164992*(1.0/2.0);
            double t164994 = t164993+1.0;
            double t164995 = 1.0/t164988;
            double t164996 = t164995*t164969*(1.0/2.0);
            double t164997 = t164996+1.0;
            double t164998 = a1p*c*t164973;
            double t164999 = t164998+1.0;
            double t165000 = 1.0/t164997;
            double t165001 = 1.0/(t164988*t164988);
            double t165002 = b4p*t164964*t164989*(2.0/3.0);
            double t165003 = b2p*c*t164983*(1.0/3.0);
            double t165004 = b1p*c*t164990*t164983*(1.0/6.0);
            double t165005 = b3p*c*t164983*t164975*(1.0/2.0);
            double t165006 = t165002+t165003+t165004+t165005;
            double t165007 = t165000*t165001*t165006*t164999;
            double t165008 = log(t164997);
            double t165009 = log(t164972);
            double t165010 = a1p*c*t164957;
            double t165011 = t165010+1.0;
            double t165012 = pow(2.0,1.0/3.0);
            double t165013 = t165012*2.0;
            double t165014 = t165013-2.0;
            double t165015 = two_13*2.0;
            double t165016 = t165015-2.0;
            double t165017 = 1.0/t165016;
            double t165018 = log(t164994);
            double t165019 = a1f*c*t164973;
            double t165020 = t165019+1.0;
            double t165021 = c0f*t165020*t165018*2.0;
            double t165023 = c0p*t165008*t164999*2.0;
            double t165022 = t165021-t165023;
            double t165024 = gcaa*gcaa;
            double t165025 = t165024*t165024;
            double t165026 = t165022*t165014*t165017;
            double t165027 = t165023+t165026;
            double t165028 = gamma_aa[index]*gcab*t164953*4.0;
            double t165029 = gamma_aa[index]*gcab*t164954*t164948*t164949*4.0;
            double t165030 = t164955*t164948*t164949*6.0;
            double t165031 = t164950*t164951*t164952;
            double t165032 = t165030+t165031+t165028+t165029+1.0;
            double t165033 = 1.0/t165032;
            double t165034 = gamma_aa[index]*gcab*t164953;
            double t165035 = t165034+1.0;
            double t165036 = 1.0/t165035;
            double t165037 = gamma_aa[index]*gcab*t164953*3.0;
            double t165038 = gamma_aa[index]*gcab*t164954*t164948*t164949;
            double t165039 = t164955*t164948*t164949*3.0;
            double t165040 = t165037+t165038+t165039+1.0;
            double t165041 = 1.0/t165040;
            double t165042 = gamma_aa[index]*gcab*t164953*2.0;
            double t165043 = t164955*t164948*t164949;
            double t165044 = t165042+t165043+1.0;
            double t165045 = 1.0/t165044;
            double t165046 = 1.0/pow(rho_a[index],1.9E1/3.0);
            double t165047 = 1.0/pow(rho_a[index],1.1E1/3.0);
            double t165048 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]*rho_a[index]);
            double t165049 = 1.0/pow(rho_a[index],3.5E1/3.0);
            double t165050 = gamma_aa[index]*gcaa*t164953*4.0;
            double t165051 = gamma_aa[index]*gcaa*t165024*t164954*t164948*4.0;
            double t165052 = t165024*t164955*t164948*6.0;
            double t165053 = t165025*t164950*t164952;
            double t165054 = t165050+t165051+t165052+t165053+1.0;
            double t165055 = 1.0/t165054;
            double t165056 = gamma_aa[index]*gcaa*t164953;
            double t165057 = t165056+1.0;
            double t165058 = 1.0/t165057;
            double t165059 = gamma_aa[index]*gcaa*t164953*3.0;
            double t165060 = gamma_aa[index]*gcaa*t165024*t164954*t164948;
            double t165061 = t165024*t164955*t164948*3.0;
            double t165062 = t165060+t165061+t165059+1.0;
            double t165063 = 1.0/t165062;
            double t165064 = gamma_aa[index]*gcaa*t164953*2.0;
            double t165065 = t165024*t164955*t164948;
            double t165066 = t165064+t165065+1.0;
            double t165067 = 1.0/t165066;
            double t165068 = 1.0/t164994;
            double t165069 = 1.0/(t164982*t164982);
            double t165070 = b4f*t164964*t164989*(2.0/3.0);
            double t165071 = b2f*c*t164983*(1.0/3.0);
            double t165072 = b1f*c*t164990*t164983*(1.0/6.0);
            double t165073 = b3f*c*t164983*t164975*(1.0/2.0);
            double t165074 = t165070+t165071+t165072+t165073;
            double t165075 = a1f*c*c0f*t165018*t164983*(2.0/3.0);
            double t165076 = a1p*c*c0p*t165008*t164983*(2.0/3.0);
            double t165077 = ccaa4*t165025*t165055*t164950*t164952;
            double t165078 = ccaa1*gamma_aa[index]*gcaa*t165058*t164953;
            double t165079 = ccaa3*gamma_aa[index]*gcaa*t165024*t165063*t164954*t164948;
            double t165080 = ccaa2*t165024*t165067*t164955*t164948;
            double t165081 = ccaa0+t165080+t165077+t165078+t165079;
            double t165082 = rho_a[index]*(8.334140006820045E15/1.40737488355328E14);
            double t165083 = 1.0/(omega*omega);
            double t165084 = pow(t165082,2.0/3.0);
            double t165087 = t165083*t165084;
            double t165085 = exp(-t165087);
            double t165086 = 1.0/pow(t165082,1.0/3.0);
            double t165088 = omega*omega;
            double t165089 = t165085-1.0;
            double t165090 = 1.0/pow(t165082,2.0/3.0);
            double t165091 = 1.0/pow(t165082,4.0/3.0);
            double t165092 = 1.0/omega;
            double t165093 = t165090*t165088*t165089*(1.0/2.0);
            double t165094 = t165093-t165085+3.0/2.0;
            double t165095 = gx*gx;
            double t165096 = t165095*t165095;
            double t165097 = pow(rho_a[index],4.0/3.0);
            double t165098 = pow(t165082,1.0/3.0);
            double t165099 = t165092*t165098;
            double t165100 = erf(t165099);
            double t165101 = t165100*(3.991211251234741E15/2.251799813685248E15);
            double t165121 = omega*t165094*t165086;
            double t165102 = t165101-t165121;
            double t165103 = gamma_aa[index]*gx*t164953*4.0;
            double t165104 = gamma_aa[index]*gx*t165095*t164954*t164948*4.0;
            double t165105 = t165095*t164955*t164948*6.0;
            double t165106 = t164950*t164952*t165096;
            double t165107 = t165103+t165104+t165105+t165106+1.0;
            double t165108 = 1.0/t165107;
            double t165109 = gamma_aa[index]*gx*t164953;
            double t165110 = t165109+1.0;
            double t165111 = 1.0/t165110;
            double t165112 = gamma_aa[index]*gx*t164953*3.0;
            double t165113 = gamma_aa[index]*gx*t165095*t164954*t164948;
            double t165114 = t165095*t164955*t164948*3.0;
            double t165115 = t165112+t165113+t165114+1.0;
            double t165116 = 1.0/t165115;
            double t165117 = gamma_aa[index]*gx*t164953*2.0;
            double t165118 = t165095*t164955*t164948;
            double t165119 = t165117+t165118+1.0;
            double t165120 = 1.0/t165119;
            double t165122 = omega*t165102*t165086*(4.0/3.0);
            double t165123 = t165122-1.0;
            double t165124 = cx4*t165108*t164950*t164952*t165096;
            double t165125 = cx1*gamma_aa[index]*gx*t165111*t164953;
            double t165126 = cx3*gamma_aa[index]*gx*t165116*t165095*t164954*t164948;
            double t165127 = cx2*t165120*t165095*t164955*t164948;
            double t165128 = cx0+t165124+t165125+t165126+t165127;
            v_rho_a_[index] = -(rho_a[index]*t165027*2.0-c0p*rho_a[index]*t165011*t165009*4.0)*(ccab1*gamma_aa[index]* \
               gcab*t165036*t165047*(4.0/3.0)+ccab4*t165033*t164950*t165049*t164951*(1.6E1/3.0)+ccab2*t165045*t165046* \
               t164948*t164949*(8.0/3.0)-ccab1*1.0/(t165035*t165035)*t165046*t164948*t164949*(4.0/3.0)-ccab2*1.0/ \
               (t165044*t165044)*t164955*t164948*t164949*(gamma_aa[index]*gcab*t165047*(8.0/3.0)+t165046*t164948* \
               t164949*(8.0/3.0))-ccab4*1.0/(t165032*t165032)*t164950*t164951*t164952*(gamma_aa[index]*gcab*t165047* \
               (1.6E1/3.0)+t164950*t165049*t164951*(1.6E1/3.0)+t165046*t164948*t164949*1.6E1+gamma_aa[index]*gcab* \
               t165048*t164948*t164949*1.6E1)+ccab3*gamma_aa[index]*gcab*t165041*t165048*t164948*t164949*4.0-ccab3* \
               gamma_aa[index]*gcab*1.0/(t165040*t165040)*t164954*t164948*t164949*(gamma_aa[index]*gcab*t165047*4.0+ \
               t165046*t164948*t164949*8.0+gamma_aa[index]*gcab*t165048*t164948*t164949*4.0))-t165027*t165081-(rho_a[index]* \
               ((t165011*1.0/(t164967*t164967)*(b4p*t164964*1.0/pow(t164956,5.0/3.0)*(2.0/3.0)+b2p*c*t164968*(1.0/ \
               3.0)+b3p*c*t164959*t164968*(1.0/2.0)+b1p*c*1.0/sqrt(t164958)*t164968*(1.0/6.0)))/t164972-a1p*c*c0p* \
               t165009*t164968*(2.0/3.0))*2.0+rho_a[index]*(-t165007+t165076+t165014*t165017*(t165007+t165075-t165020* \
               t165074*t165068*t165069-a1p*c*c0p*t165008*t164983*(2.0/3.0)))+c0p*t165011*t165009*2.0-c0p*t165008* \
               t164999*2.0-t165022*t165014*t165017)*(ccab0+ccab1*gamma_aa[index]*gcab*t165036*t164953+ccab4*t165033* \
               t164950*t164951*t164952+ccab2*t165045*t164955*t164948*t164949+ccab3*gamma_aa[index]*gcab*t165041*t164954* \
               t164948*t164949)+rho_a[index]*t165027*(ccaa1*gamma_aa[index]*gcaa*t165047*t165058*(8.0/3.0)+ccaa4* \
               t165025*t165055*t164950*t165049*(3.2E1/3.0)+ccaa2*t165024*t165046*t165067*t164948*(1.6E1/3.0)-ccaa1* \
               t165024*t165046*1.0/(t165057*t165057)*t164948*(8.0/3.0)-ccaa2*t165024*1.0/(t165066*t165066)*t164955* \
               t164948*(gamma_aa[index]*gcaa*t165047*(1.6E1/3.0)+t165024*t165046*t164948*(1.6E1/3.0))-ccaa4*t165025* \
               1.0/(t165054*t165054)*t164950*t164952*(gamma_aa[index]*gcaa*t165047*(3.2E1/3.0)+t165025*t164950*t165049* \
               (3.2E1/3.0)+t165024*t165046*t164948*3.2E1+gamma_aa[index]*gcaa*t165024*t165048*t164948*3.2E1)+ccaa3* \
               gamma_aa[index]*gcaa*t165024*t165063*t165048*t164948*8.0-ccaa3*gamma_aa[index]*gcaa*t165024*1.0/(t165062* \
               t165062)*t164954*t164948*(gamma_aa[index]*gcaa*t165047*8.0+t165024*t165046*t164948*1.6E1+gamma_aa[index]* \
               gcaa*t165024*t165048*t164948*8.0))+rho_a[index]*t165081*(-t165007+t165076+t165014*t165017*(t165007+ \
               t165075-t165076-t165020*t165074*t165068*t165069))-c0*t165128*t165097*(omega*t165086*(omega*t165091* \
               t165094*(2.778046668940015E15/1.40737488355328E14)+omega*t165086*((t165085*(1.0/3.0))/rho_a[index]+ \
               1.0/pow(t165082,5.0/3.0)*t165088*t165089*(2.778046668940015E15/1.40737488355328E14)-t165083*t165085* \
               t165086*(2.778046668940015E15/7.0368744177664E13))+1.0/sqrt(3.141592653589793)*t165090*t165092*t165085* \
               (1.108777112152858E31/1.584563250285287E29))*(4.0/3.0)-omega*t165102*t165091*(2.778046668940015E15/ \
               1.05553116266496E14))-c0*pow(rho_a[index],1.0/3.0)*t165123*t165128*(4.0/3.0)+c0*t165123*t165097*(cx1* \
               gamma_aa[index]*gx*t165111*t165047*(8.0/3.0)+cx2*t165120*t165046*t165095*t164948*(1.6E1/3.0)+cx4*t165108* \
               t164950*t165049*t165096*(3.2E1/3.0)-cx1*1.0/(t165110*t165110)*t165046*t165095*t164948*(8.0/3.0)-cx2* \
               1.0/(t165119*t165119)*t165095*t164955*t164948*(gamma_aa[index]*gx*t165047*(1.6E1/3.0)+t165046*t165095* \
               t164948*(1.6E1/3.0))-cx4*1.0/(t165107*t165107)*t164950*t164952*t165096*(gamma_aa[index]*gx*t165047* \
               (3.2E1/3.0)+t164950*t165049*t165096*(3.2E1/3.0)+t165046*t165095*t164948*3.2E1+gamma_aa[index]*gx*t165048* \
               t165095*t164948*3.2E1)+cx3*gamma_aa[index]*gx*t165116*t165048*t165095*t164948*8.0-cx3*gamma_aa[index]* \
               gx*1.0/(t165115*t165115)*t165095*t164954*t164948*(gamma_aa[index]*gx*t165047*8.0+t165046*t165095*t164948* \
               1.6E1+gamma_aa[index]*gx*t165048*t165095*t164948*8.0));
        } else {
            v_rho_a_[index] = 0.0;
        } 

        if (is_gga_) {

            if (rho_a[index] > cutoff_) {
                double t165130 = 1.0/pow(rho_a[index],1.0/3.0);
                double t165131 = c*t165130;
                double t165132 = sqrt(t165131);
                double t165133 = pow(t165131,3.0/2.0);
                double t165134 = c*c;
                double t165135 = 1.0/pow(rho_a[index],2.0/3.0);
                double t165136 = 1.0/c0p;
                double t165137 = b1p*t165132;
                double t165138 = b3p*t165133;
                double t165139 = b4p*t165134*t165135;
                double t165140 = b2p*c*t165130;
                double t165141 = t165140+t165137+t165138+t165139;
                double t165142 = 1.0/t165141;
                double t165143 = t165142*t165136*(1.0/2.0);
                double t165144 = t165143+1.0;
                double t165145 = log(t165144);
                double t165146 = a1p*c*t165130;
                double t165147 = t165146+1.0;
                double t165148 = rho_a[index]*2.0;
                double t165149 = 1.0/pow(t165148,1.0/3.0);
                double t165150 = c*t165149;
                double t165151 = 1.0/pow(rho_a[index],8.0/3.0);
                double t165152 = gamma_aa[index]*gamma_aa[index];
                double t165153 = gcab*gcab;
                double t165154 = t165153*t165153;
                double t165155 = 1.0/pow(rho_a[index],3.2E1/3.0);
                double t165156 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t165157 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t165158 = gamma_aa[index]*gcab*t165151;
                double t165159 = t165158+1.0;
                double t165160 = gamma_aa[index]*gcab*t165151*3.0;
                double t165161 = gamma_aa[index]*gcab*t165152*t165153*t165157;
                double t165162 = t165152*t165153*t165156*3.0;
                double t165163 = t165160+t165161+t165162+1.0;
                double t165164 = t165152*t165152;
                double t165165 = gamma_aa[index]*gcab*t165151*4.0;
                double t165166 = gamma_aa[index]*gcab*t165152*t165153*t165157*4.0;
                double t165167 = t165152*t165153*t165156*6.0;
                double t165168 = t165154*t165155*t165164;
                double t165169 = t165165+t165166+t165167+t165168+1.0;
                double t165170 = gamma_aa[index]*gcab*t165151*2.0;
                double t165171 = t165152*t165153*t165156;
                double t165172 = t165170+t165171+1.0;
                double t165173 = pow(2.0,1.0/3.0);
                double t165174 = t165173*2.0;
                double t165175 = t165174-2.0;
                double t165176 = two_13*2.0;
                double t165177 = t165176-2.0;
                double t165178 = 1.0/t165177;
                double t165179 = 1.0/c0f;
                double t165180 = b1f*t165132;
                double t165181 = b3f*t165133;
                double t165182 = b4f*t165134*t165135;
                double t165183 = b2f*c*t165130;
                double t165184 = t165180+t165181+t165182+t165183;
                double t165185 = 1.0/t165184;
                double t165186 = t165185*t165179*(1.0/2.0);
                double t165187 = t165186+1.0;
                double t165188 = log(t165187);
                double t165189 = a1f*c*t165130;
                double t165190 = t165189+1.0;
                double t165191 = c0f*t165190*t165188*2.0;
                double t165192 = c0p*t165145*t165147*2.0;
                double t165193 = gcaa*gcaa;
                double t165194 = t165193*t165193;
                double t165195 = gamma_aa[index]*gcaa*t165151;
                double t165196 = t165195+1.0;
                double t165197 = gamma_aa[index]*gcaa*t165151*3.0;
                double t165198 = gamma_aa[index]*gcaa*t165152*t165157*t165193;
                double t165199 = t165152*t165156*t165193*3.0;
                double t165200 = t165197+t165198+t165199+1.0;
                double t165201 = gamma_aa[index]*gcaa*t165151*4.0;
                double t165202 = gamma_aa[index]*gcaa*t165152*t165157*t165193*4.0;
                double t165203 = t165152*t165156*t165193*6.0;
                double t165204 = t165155*t165164*t165194;
                double t165205 = t165201+t165202+t165203+t165204+1.0;
                double t165206 = gamma_aa[index]*gcaa*t165151*2.0;
                double t165207 = t165152*t165156*t165193;
                double t165208 = t165206+t165207+1.0;
                double t165209 = rho_a[index]*(8.334140006820045E15/1.40737488355328E14);
                double t165210 = 1.0/pow(t165209,1.0/3.0);
                double t165211 = 1.0/(omega*omega);
                double t165212 = pow(t165209,2.0/3.0);
                double t165213 = exp(-t165211*t165212);
                double t165214 = gx*gx;
                double t165215 = t165214*t165214;
                double t165216 = gamma_aa[index]*gx*t165151;
                double t165217 = t165216+1.0;
                double t165218 = gamma_aa[index]*gx*t165151*3.0;
                double t165219 = gamma_aa[index]*gx*t165214*t165152*t165157;
                double t165220 = t165214*t165152*t165156*3.0;
                double t165221 = t165220+t165218+t165219+1.0;
                double t165222 = gamma_aa[index]*gx*t165151*4.0;
                double t165223 = gamma_aa[index]*gx*t165214*t165152*t165157*4.0;
                double t165224 = t165214*t165152*t165156*6.0;
                double t165225 = t165215*t165155*t165164;
                double t165226 = t165222+t165223+t165224+t165225+1.0;
                double t165227 = gamma_aa[index]*gx*t165151*2.0;
                double t165228 = t165214*t165152*t165156;
                double t165229 = t165227+t165228+1.0;
                v_gamma_aa_[index] = (rho_a[index]*(t165192+t165175*t165178*(t165191-c0p*t165145*t165147*2.0))*2.0- \
                   c0p*rho_a[index]*log((t165136*(1.0/2.0))/(b1p*sqrt(t165150)+b3p*pow(t165150,3.0/2.0)+b4p*t165134*1.0/ \
                   pow(t165148,2.0/3.0)+b2p*c*t165149)+1.0)*(a1p*c*t165149+1.0)*4.0)*((ccab1*gcab*t165151*(1.0/2.0))/ \
                   t165159+(ccab2*gamma_aa[index]*t165153*t165156)/t165172-ccab1*gamma_aa[index]*t165153*t165156*1.0/ \
                   (t165159*t165159)*(1.0/2.0)-ccab2*t165152*t165153*1.0/(t165172*t165172)*t165156*(gcab*t165151+gamma_aa[index]* \
                   t165153*t165156)+(ccab4*gamma_aa[index]*t165152*t165154*t165155*2.0)/t165169+(ccab3*gcab*t165152*t165153* \
                   t165157*(3.0/2.0))/t165163-ccab4*t165154*t165155*t165164*1.0/(t165169*t165169)*(gcab*t165151*2.0+gamma_aa[index]* \
                   t165153*t165156*6.0+gamma_aa[index]*t165152*t165154*t165155*2.0+gcab*t165152*t165153*t165157*6.0)- \
                   ccab3*gamma_aa[index]*gcab*t165152*t165153*1.0/(t165163*t165163)*t165157*(gcab*t165151*(3.0/2.0)+gamma_aa[index]* \
                   t165153*t165156*3.0+gcab*t165152*t165153*t165157*(3.0/2.0)))*2.0-rho_a[index]*(t165192+t165175*t165178* \
                   (t165191-t165192))*((ccaa1*gcaa*t165151)/t165196+(ccaa2*gamma_aa[index]*t165156*t165193*2.0)/t165208- \
                   ccaa1*gamma_aa[index]*t165156*t165193*1.0/(t165196*t165196)-ccaa2*t165152*1.0/(t165208*t165208)*t165156* \
                   t165193*(gcaa*t165151*2.0+gamma_aa[index]*t165156*t165193*2.0)+(ccaa4*gamma_aa[index]*t165152*t165155* \
                   t165194*4.0)/t165205+(ccaa3*gcaa*t165152*t165157*t165193*3.0)/t165200-ccaa4*1.0/(t165205*t165205)* \
                   t165155*t165164*t165194*(gcaa*t165151*4.0+gamma_aa[index]*t165156*t165193*1.2E1+gamma_aa[index]*t165152* \
                   t165155*t165194*4.0+gcaa*t165152*t165157*t165193*1.2E1)-ccaa3*gamma_aa[index]*gcaa*1.0/(t165200*t165200) \
                   *t165152*t165157*t165193*(gcaa*t165151*3.0+gamma_aa[index]*t165156*t165193*6.0+gcaa*t165152*t165157* \
                   t165193*3.0))*2.0-c0*pow(rho_a[index],4.0/3.0)*(omega*t165210*(erf(pow(t165209,1.0/3.0)/omega)*(3.991211251234741E15/ \
                   2.251799813685248E15)-omega*t165210*(-t165213+(omega*omega)*1.0/pow(t165209,2.0/3.0)*(t165213-1.0) \
                   *(1.0/2.0)+3.0/2.0))*(4.0/3.0)-1.0)*((cx1*gx*t165151)/t165217-cx1*gamma_aa[index]*t165214*1.0/(t165217* \
                   t165217)*t165156+(cx2*gamma_aa[index]*t165214*t165156*2.0)/t165229-cx2*t165214*t165152*t165156*1.0/ \
                   (t165229*t165229)*(gx*t165151*2.0+gamma_aa[index]*t165214*t165156*2.0)+(cx4*gamma_aa[index]*t165152* \
                   t165215*t165155*4.0)/t165226+(cx3*gx*t165214*t165152*t165157*3.0)/t165221-cx4*t165215*1.0/(t165226* \
                   t165226)*t165155*t165164*(gx*t165151*4.0+gamma_aa[index]*t165214*t165156*1.2E1+gamma_aa[index]*t165152* \
                   t165215*t165155*4.0+gx*t165214*t165152*t165157*1.2E1)-cx3*gamma_aa[index]*gx*1.0/(t165221*t165221) \
                   *t165214*t165152*t165157*(gx*t165151*3.0+gamma_aa[index]*t165214*t165156*6.0+gx*t165214*t165152*t165157* \
                   3.0))*2.0;
            } else {
                v_gamma_aa_[index] = 0.0;
            } 

        }
        if (is_meta_) {

            //V_tau_a
            if (rho_a[index] > cutoff_) {
                v_tau_a_[index] = 0.0;
            } else {
                v_tau_a_[index] = 0.0;
            } 

        }
    }
    //Second Partials
    for (int index = 0; index < ntrue && deriv_ >= 2; index++) {

        //V_rho_a_rho_a
        if (rho_a[index] > cutoff_) {
            double t165232 = rho_a[index]*2.0;
            double t165233 = 1.0/pow(t165232,1.0/3.0);
            double t165234 = c*t165233;
            double t165235 = sqrt(t165234);
            double t165236 = b1p*t165235;
            double t165237 = pow(t165234,3.0/2.0);
            double t165238 = b3p*t165237;
            double t165239 = b2p*c*t165233;
            double t165240 = c*c;
            double t165241 = 1.0/pow(t165232,2.0/3.0);
            double t165242 = b4p*t165240*t165241;
            double t165243 = t165242+t165236+t165238+t165239;
            double t165244 = 1.0/pow(t165232,8.0/3.0);
            double t165245 = 1.0/pow(t165232,7.0/3.0);
            double t165246 = 1.0/sqrt(t165234);
            double t165247 = 1.0/c0p;
            double t165248 = 1.0/t165243;
            double t165249 = t165247*t165248*(1.0/2.0);
            double t165250 = t165249+1.0;
            double t165251 = 1.0/t165250;
            double t165252 = a1p*c*t165233;
            double t165253 = t165252+1.0;
            double t165254 = 1.0/pow(t165232,4.0/3.0);
            double t165256 = b2p*c*t165254*(1.0/3.0);
            double t165257 = 1.0/pow(t165232,5.0/3.0);
            double t165258 = b4p*t165240*t165257*(2.0/3.0);
            double t165259 = b1p*c*t165254*t165246*(1.0/6.0);
            double t165260 = b3p*c*t165235*t165254*(1.0/2.0);
            double t165255 = t165260+t165256+t165258+t165259;
            double t165261 = t165255*t165255;
            double t165262 = 1.0/(t165243*t165243);
            double t165263 = log(t165250);
            double t165264 = gamma_aa[index]*gamma_aa[index];
            double t165265 = gcab*gcab;
            double t165266 = t165264*t165264;
            double t165267 = t165265*t165265;
            double t165268 = 1.0/pow(rho_a[index],3.2E1/3.0);
            double t165269 = 1.0/pow(rho_a[index],8.0/3.0);
            double t165270 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]);
            double t165271 = 1.0/pow(rho_a[index],1.6E1/3.0);
            double t165272 = two_13*2.0;
            double t165273 = t165272-2.0;
            double t165274 = 1.0/t165273;
            double t165275 = 1.0/pow(rho_a[index],1.0/3.0);
            double t165276 = c*t165275;
            double t165277 = sqrt(t165276);
            double t165278 = pow(t165276,3.0/2.0);
            double t165279 = 1.0/pow(rho_a[index],2.0/3.0);
            double t165280 = b1p*t165277;
            double t165281 = b3p*t165278;
            double t165282 = b4p*t165240*t165279;
            double t165283 = b2p*c*t165275;
            double t165284 = t165280+t165281+t165282+t165283;
            double t165285 = 1.0/t165284;
            double t165286 = t165247*t165285*(1.0/2.0);
            double t165287 = t165286+1.0;
            double t165288 = log(t165287);
            double t165289 = a1p*c*t165275;
            double t165290 = t165289+1.0;
            double t165291 = gamma_aa[index]*gcab*t165269*4.0;
            double t165292 = gamma_aa[index]*gcab*t165270*t165264*t165265*4.0;
            double t165293 = t165271*t165264*t165265*6.0;
            double t165294 = t165266*t165267*t165268;
            double t165295 = t165291+t165292+t165293+t165294+1.0;
            double t165296 = 1.0/t165295;
            double t165297 = gamma_aa[index]*gcab*t165269;
            double t165298 = t165297+1.0;
            double t165299 = 1.0/t165298;
            double t165300 = gamma_aa[index]*gcab*t165269*3.0;
            double t165301 = gamma_aa[index]*gcab*t165270*t165264*t165265;
            double t165302 = t165271*t165264*t165265*3.0;
            double t165303 = t165300+t165301+t165302+1.0;
            double t165304 = 1.0/t165303;
            double t165305 = gamma_aa[index]*gcab*t165269*2.0;
            double t165306 = t165271*t165264*t165265;
            double t165307 = t165305+t165306+1.0;
            double t165308 = 1.0/t165307;
            double t165309 = 1.0/pow(rho_a[index],1.0E1);
            double t165310 = 1.0/pow(rho_a[index],2.2E1/3.0);
            double t165312 = 1.0/pow(rho_a[index],1.1E1/3.0);
            double t165313 = 1.0/pow(rho_a[index],1.9E1/3.0);
            double t165315 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]*rho_a[index]);
            double t165322 = 1.0/pow(rho_a[index],3.5E1/3.0);
            double t165323 = gamma_aa[index]*gcab*t165312*(1.6E1/3.0);
            double t165324 = gamma_aa[index]*gcab*t165315*t165264*t165265*1.6E1;
            double t165325 = t165313*t165264*t165265*1.6E1;
            double t165326 = t165322*t165266*t165267*(1.6E1/3.0);
            double t165311 = t165323+t165324+t165325+t165326;
            double t165329 = gamma_aa[index]*gcab*t165312*(8.0/3.0);
            double t165330 = t165313*t165264*t165265*(8.0/3.0);
            double t165314 = t165330+t165329;
            double t165316 = 1.0/pow(rho_a[index],1.4E1/3.0);
            double t165317 = 1.0/(t165303*t165303);
            double t165318 = gamma_aa[index]*gcab*t165312*4.0;
            double t165319 = gamma_aa[index]*gcab*t165315*t165264*t165265*4.0;
            double t165320 = t165313*t165264*t165265*8.0;
            double t165321 = t165320+t165318+t165319;
            double t165327 = 1.0/pow(rho_a[index],3.8E1/3.0);
            double t165328 = 1.0/(t165295*t165295);
            double t165331 = 1.0/(t165307*t165307);
            double t165332 = pow(2.0,1.0/3.0);
            double t165333 = t165332*2.0;
            double t165334 = t165333-2.0;
            double t165335 = a1f*c*t165275;
            double t165336 = t165335+1.0;
            double t165337 = 1.0/c0f;
            double t165338 = b1f*t165277;
            double t165339 = b3f*t165278;
            double t165340 = b4f*t165240*t165279;
            double t165341 = b2f*c*t165275;
            double t165342 = t165340+t165341+t165338+t165339;
            double t165343 = 1.0/t165342;
            double t165344 = t165343*t165337*(1.0/2.0);
            double t165345 = t165344+1.0;
            double t165346 = 1.0/pow(rho_a[index],4.0/3.0);
            double t165347 = 1.0/pow(rho_a[index],5.0/3.0);
            double t165348 = 1.0/sqrt(t165276);
            double t165349 = log(t165345);
            double t165350 = 1.0/t165287;
            double t165351 = 1.0/(t165284*t165284);
            double t165352 = b4p*t165240*t165347*(2.0/3.0);
            double t165353 = b2p*c*t165346*(1.0/3.0);
            double t165354 = b1p*c*t165346*t165348*(1.0/6.0);
            double t165355 = b3p*c*t165346*t165277*(1.0/2.0);
            double t165356 = t165352+t165353+t165354+t165355;
            double t165357 = t165350*t165351*t165290*t165356;
            double t165358 = gcaa*gcaa;
            double t165359 = t165358*t165358;
            double t165360 = 1.0/t165345;
            double t165361 = 1.0/(t165342*t165342);
            double t165362 = b4f*t165240*t165347*(2.0/3.0);
            double t165363 = b2f*c*t165346*(1.0/3.0);
            double t165364 = b1f*c*t165346*t165348*(1.0/6.0);
            double t165365 = b3f*c*t165346*t165277*(1.0/2.0);
            double t165366 = t165362+t165363+t165364+t165365;
            double t165367 = a1f*c*c0f*t165346*t165349*(2.0/3.0);
            double t165368 = a1p*c*c0p*t165346*t165288*(2.0/3.0);
            double t165369 = c0f*t165336*t165349*2.0;
            double t165370 = c0p*t165290*t165288*2.0;
            double t165371 = 1.0/(t165298*t165298);
            double t165372 = ccab4*t165266*t165267*t165268*t165296;
            double t165373 = ccab1*gamma_aa[index]*gcab*t165269*t165299;
            double t165374 = ccab3*gamma_aa[index]*gcab*t165304*t165270*t165264*t165265;
            double t165375 = ccab2*t165271*t165308*t165264*t165265;
            double t165376 = ccab0+t165372+t165373+t165374+t165375;
            double t165377 = b2p*c*t165245*(4.0/9.0);
            double t165378 = b4p*t165240*t165244*(1.0E1/9.0);
            double t165379 = 1.0/pow(t165234,3.0/2.0);
            double t165380 = b3p*t165240*t165244*t165246*(1.0/1.2E1);
            double t165381 = b1p*c*t165245*t165246*(2.0/9.0);
            double t165382 = b3p*c*t165235*t165245*(2.0/3.0);
            double t165383 = t165380+t165381+t165382+t165377+t165378-b1p*t165240*t165244*t165379*(1.0/3.6E1);
            double t165384 = t165251*t165253*t165262*t165383;
            double t165385 = 1.0/(t165243*t165243*t165243);
            double t165386 = 1.0/(t165250*t165250);
            double t165387 = 1.0/(t165243*t165243*t165243*t165243);
            double t165388 = t165261*t165253*t165247*t165386*t165387*(1.0/2.0);
            double t165389 = 1.0/d2fz0;
            double t165390 = 1.0/(rho_a[index]*rho_a[index]);
            double t165391 = 1.0/Aa;
            double t165392 = b1a*t165235;
            double t165393 = b3a*t165237;
            double t165394 = b2a*c*t165233;
            double t165395 = b4a*t165240*t165241;
            double t165396 = t165392+t165393+t165394+t165395;
            double t165397 = 1.0/t165396;
            double t165398 = t165391*t165397*(1.0/2.0);
            double t165399 = t165398+1.0;
            double t165400 = log(t165399);
            double t165401 = a1a*c*t165233;
            double t165402 = t165401+1.0;
            double t165403 = a1p*c*t165251*t165262*t165254*t165255*(2.0/3.0);
            double t165404 = 1.0/pow(rho_a[index],7.0/3.0);
            double t165405 = 1.0/pow(t165276,3.0/2.0);
            double t165406 = t165366*t165366;
            double t165407 = t165356*t165356;
            double t165408 = 1.0/(t165284*t165284*t165284);
            double t165409 = t165350*t165290*t165407*t165408*2.0;
            double t165410 = b4p*t165240*t165269*(1.0E1/9.0);
            double t165411 = b2p*c*t165404*(4.0/9.0);
            double t165412 = b3p*t165240*t165348*t165269*(1.0/1.2E1);
            double t165413 = b1p*c*t165404*t165348*(2.0/9.0);
            double t165414 = b3p*c*t165404*t165277*(2.0/3.0);
            double t165488 = b1p*t165240*t165405*t165269*(1.0/3.6E1);
            double t165415 = t165410+t165411+t165412+t165413+t165414-t165488;
            double t165416 = 1.0/(t165287*t165287);
            double t165417 = 1.0/(t165284*t165284*t165284*t165284);
            double t165418 = a1p*c*c0p*t165404*t165288*(8.0/9.0);
            double t165453 = t165360*t165361*t165336*t165366;
            double t165419 = -t165453+t165357+t165367-t165368;
            double t165420 = a1p*c*c0p*t165254*t165263*(4.0/3.0);
            double t165421 = t165370-t165369;
            double t165422 = t165421*t165334*t165274;
            double t165423 = gamma_aa[index]*gcaa*t165269*4.0;
            double t165424 = gamma_aa[index]*gcaa*t165270*t165264*t165358*4.0;
            double t165425 = t165271*t165264*t165358*6.0;
            double t165426 = t165266*t165268*t165359;
            double t165427 = t165423+t165424+t165425+t165426+1.0;
            double t165428 = 1.0/t165427;
            double t165429 = gamma_aa[index]*gcaa*t165269;
            double t165430 = t165429+1.0;
            double t165431 = 1.0/t165430;
            double t165432 = gamma_aa[index]*gcaa*t165269*3.0;
            double t165433 = gamma_aa[index]*gcaa*t165270*t165264*t165358;
            double t165434 = t165271*t165264*t165358*3.0;
            double t165435 = t165432+t165433+t165434+1.0;
            double t165436 = 1.0/t165435;
            double t165437 = gamma_aa[index]*gcaa*t165269*2.0;
            double t165438 = t165271*t165264*t165358;
            double t165439 = t165437+t165438+1.0;
            double t165440 = 1.0/t165439;
            double t165441 = t165422-t165370;
            double t165442 = 1.0/(t165298*t165298*t165298);
            double t165443 = ccab1*gamma_aa[index]*gcab*t165442*t165264*t165309*t165265*(3.2E1/9.0);
            double t165444 = t165311*t165311;
            double t165445 = 1.0/(t165295*t165295*t165295);
            double t165446 = ccab4*t165444*t165445*t165266*t165267*t165268*2.0;
            double t165447 = t165314*t165314;
            double t165448 = 1.0/(t165307*t165307*t165307);
            double t165449 = ccab2*t165271*t165264*t165265*t165447*t165448*2.0;
            double t165450 = t165321*t165321;
            double t165451 = 1.0/(t165303*t165303*t165303);
            double t165452 = ccab3*gamma_aa[index]*gcab*t165270*t165450*t165451*t165264*t165265*2.0;
            double t165454 = ccaa4*t165322*t165266*t165428*t165359*(3.2E1/3.0);
            double t165455 = ccaa1*gamma_aa[index]*gcaa*t165312*t165431*(8.0/3.0);
            double t165456 = ccaa3*gamma_aa[index]*gcaa*t165315*t165264*t165436*t165358*8.0;
            double t165457 = ccaa2*t165313*t165440*t165264*t165358*(1.6E1/3.0);
            double t165458 = 1.0/(t165430*t165430);
            double t165459 = gamma_aa[index]*gcaa*t165312*8.0;
            double t165460 = gamma_aa[index]*gcaa*t165315*t165264*t165358*8.0;
            double t165461 = t165313*t165264*t165358*1.6E1;
            double t165462 = t165460+t165461+t165459;
            double t165463 = 1.0/(t165435*t165435);
            double t165464 = gamma_aa[index]*gcaa*t165312*(3.2E1/3.0);
            double t165465 = gamma_aa[index]*gcaa*t165315*t165264*t165358*3.2E1;
            double t165466 = t165313*t165264*t165358*3.2E1;
            double t165467 = t165322*t165266*t165359*(3.2E1/3.0);
            double t165468 = t165464+t165465+t165466+t165467;
            double t165469 = 1.0/(t165427*t165427);
            double t165470 = gamma_aa[index]*gcaa*t165312*(1.6E1/3.0);
            double t165471 = t165313*t165264*t165358*(1.6E1/3.0);
            double t165472 = t165470+t165471;
            double t165473 = 1.0/(t165439*t165439);
            double t165474 = t165454+t165455+t165456+t165457-ccaa1*t165313*t165264*t165358*t165458*(8.0/3.0)- \
               ccaa2*t165271*t165264*t165472*t165473*t165358-ccaa4*t165266*t165268*t165359*t165468*t165469-ccaa3* \
               gamma_aa[index]*gcaa*t165270*t165264*t165462*t165463*t165358;
            double t165475 = ccaa4*t165266*t165428*t165268*t165359;
            double t165476 = ccaa1*gamma_aa[index]*gcaa*t165431*t165269;
            double t165477 = ccaa3*gamma_aa[index]*gcaa*t165270*t165264*t165436*t165358;
            double t165478 = ccaa2*t165440*t165271*t165264*t165358;
            double t165479 = ccaa0+t165475+t165476+t165477+t165478;
            double t165480 = 1.0/(t165342*t165342*t165342);
            double t165481 = b4f*t165240*t165269*(1.0E1/9.0);
            double t165482 = b2f*c*t165404*(4.0/9.0);
            double t165483 = b3f*t165240*t165348*t165269*(1.0/1.2E1);
            double t165484 = b1f*c*t165404*t165348*(2.0/9.0);
            double t165485 = b3f*c*t165404*t165277*(2.0/3.0);
            double t165486 = t165481+t165482+t165483+t165484+t165485-b1f*t165240*t165405*t165269*(1.0/3.6E1);
            double t165487 = t165360*t165361*t165336*t165486;
            double t165489 = t165350*t165351*t165415*t165290;
            double t165490 = 1.0/(t165345*t165345);
            double t165491 = 1.0/(t165342*t165342*t165342*t165342);
            double t165492 = t165406*t165336*t165337*t165490*t165491*(1.0/2.0);
            double t165493 = t165290*t165407*t165416*t165417*t165247*(1.0/2.0);
            double t165494 = a1f*c*t165360*t165361*t165346*t165366*(2.0/3.0);
            double t165495 = a1p*c*t165350*t165351*t165346*t165356*(2.0/3.0);
            double t165496 = rho_a[index]*(8.334140006820045E15/1.40737488355328E14);
            double t165497 = 1.0/(omega*omega);
            double t165498 = pow(t165496,2.0/3.0);
            double t165501 = t165497*t165498;
            double t165499 = exp(-t165501);
            double t165500 = 1.0/pow(t165496,1.0/3.0);
            double t165502 = omega*omega;
            double t165503 = t165499-1.0;
            double t165504 = 1.0/pow(t165496,2.0/3.0);
            double t165505 = 1.0/pow(t165496,4.0/3.0);
            double t165506 = 1.0/omega;
            double t165507 = t165502*t165503*t165504*(1.0/2.0);
            double t165508 = t165507-t165499+3.0/2.0;
            double t165509 = gx*gx;
            double t165510 = t165509*t165509;
            double t165511 = pow(rho_a[index],1.0/3.0);
            double t165512 = pow(t165496,1.0/3.0);
            double t165513 = t165512*t165506;
            double t165514 = erf(t165513);
            double t165515 = t165514*(3.991211251234741E15/2.251799813685248E15);
            double t165547 = omega*t165500*t165508;
            double t165516 = t165515-t165547;
            double t165517 = gamma_aa[index]*gx*t165269*4.0;
            double t165518 = gamma_aa[index]*gx*t165270*t165264*t165509*4.0;
            double t165519 = t165271*t165264*t165509*6.0;
            double t165520 = t165510*t165266*t165268;
            double t165521 = t165520+t165517+t165518+t165519+1.0;
            double t165522 = 1.0/t165521;
            double t165523 = gamma_aa[index]*gx*t165269;
            double t165524 = t165523+1.0;
            double t165525 = 1.0/t165524;
            double t165526 = gamma_aa[index]*gx*t165269*3.0;
            double t165527 = gamma_aa[index]*gx*t165270*t165264*t165509;
            double t165528 = t165271*t165264*t165509*3.0;
            double t165529 = t165526+t165527+t165528+1.0;
            double t165530 = 1.0/t165529;
            double t165531 = gamma_aa[index]*gx*t165269*2.0;
            double t165532 = t165271*t165264*t165509;
            double t165533 = t165531+t165532+1.0;
            double t165534 = 1.0/t165533;
            double t165535 = 1.0/rho_a[index];
            double t165536 = t165535*t165499*(1.0/3.0);
            double t165537 = 1.0/pow(t165496,5.0/3.0);
            double t165538 = t165502*t165503*t165537*(2.778046668940015E15/1.40737488355328E14);
            double t165542 = t165500*t165497*t165499*(2.778046668940015E15/7.0368744177664E13);
            double t165539 = -t165542+t165536+t165538;
            double t165540 = 1.0/sqrt(3.141592653589793);
            double t165541 = omega*t165505*t165508*(2.778046668940015E15/1.40737488355328E14);
            double t165543 = omega*t165500*t165539;
            double t165544 = t165504*t165540*t165506*t165499*(1.108777112152858E31/1.584563250285287E29);
            double t165545 = t165541+t165543+t165544;
            double t165546 = 1.0/pow(t165496,7.0/3.0);
            double t165548 = cx4*t165510*t165522*t165266*t165268;
            double t165549 = cx1*gamma_aa[index]*gx*t165525*t165269;
            double t165550 = cx3*gamma_aa[index]*gx*t165530*t165270*t165264*t165509;
            double t165551 = cx2*t165271*t165264*t165534*t165509;
            double t165552 = cx0+t165550+t165551+t165548+t165549;
            double t165553 = pow(rho_a[index],4.0/3.0);
            double t165554 = omega*t165500*t165545*(4.0/3.0);
            double t165555 = t165554-omega*t165505*t165516*(2.778046668940015E15/1.05553116266496E14);
            double t165556 = cx4*t165510*t165322*t165522*t165266*(3.2E1/3.0);
            double t165557 = cx1*gamma_aa[index]*gx*t165312*t165525*(8.0/3.0);
            double t165558 = cx3*gamma_aa[index]*gx*t165530*t165315*t165264*t165509*8.0;
            double t165559 = cx2*t165313*t165264*t165534*t165509*(1.6E1/3.0);
            double t165560 = 1.0/(t165524*t165524);
            double t165561 = gamma_aa[index]*gx*t165312*8.0;
            double t165562 = gamma_aa[index]*gx*t165315*t165264*t165509*8.0;
            double t165563 = t165313*t165264*t165509*1.6E1;
            double t165564 = t165561+t165562+t165563;
            double t165565 = 1.0/(t165529*t165529);
            double t165566 = gamma_aa[index]*gx*t165312*(3.2E1/3.0);
            double t165567 = gamma_aa[index]*gx*t165315*t165264*t165509*3.2E1;
            double t165568 = t165313*t165264*t165509*3.2E1;
            double t165569 = t165510*t165322*t165266*(3.2E1/3.0);
            double t165570 = t165566+t165567+t165568+t165569;
            double t165571 = 1.0/(t165521*t165521);
            double t165572 = gamma_aa[index]*gx*t165312*(1.6E1/3.0);
            double t165573 = t165313*t165264*t165509*(1.6E1/3.0);
            double t165574 = t165572+t165573;
            double t165575 = 1.0/(t165533*t165533);
            double t165576 = t165556+t165557+t165558+t165559-cx1*t165313*t165560*t165264*t165509*(8.0/3.0)-cx2* \
               t165271*t165264*t165509*t165574*t165575-cx4*t165510*t165570*t165571*t165266*t165268-cx3*gamma_aa[index]* \
               gx*t165270*t165264*t165509*t165564*t165565;
            double t165577 = omega*t165500*t165516*(4.0/3.0);
            double t165578 = t165577-1.0;
            v_rho_a_rho_a_[index] = -t165376*(-t165420-rho_a[index]*(t165403+t165384+t165388-t165251*t165261* \
               t165253*t165385*2.0-a1p*c*c0p*t165245*t165263*(8.0/9.0)+Aa*t165400*t165402*t165390*t165274*t165389* \
               (4.0/9.0))*2.0+rho_a[index]*(-t165409-t165418+t165493+t165495+t165489+t165334*t165274*(t165409+t165418+ \
               t165492+t165494+t165487-t165350*t165351*t165415*t165290-t165360*t165406*t165336*t165480*2.0-a1f*c* \
               c0f*t165404*t165349*(8.0/9.0)-t165290*t165407*t165416*t165417*t165247*(1.0/2.0)-a1p*c*t165350*t165351* \
               t165346*t165356*(2.0/3.0)))+t165334*t165274*t165419*2.0+t165251*t165253*t165262*t165255*2.0-t165350* \
               t165351*t165290*t165356*2.0+a1p*c*c0p*t165346*t165288*(4.0/3.0))-t165441*t165474*2.0+(rho_a[index]* \
               (t165370+t165334*t165274*(t165369-c0p*t165290*t165288*2.0))*2.0-c0p*rho_a[index]*t165253*t165263*4.0) \
               *(t165443+t165452+t165446+t165449+ccab1*gamma_aa[index]*gcab*t165316*t165299*(4.4E1/9.0)-ccab1*t165310* \
               t165371*t165264*t165265*(7.6E1/9.0)+ccab2*t165310*t165308*t165264*t165265*(4.0E1/3.0)+ccab4*t165327* \
               t165266*t165267*t165296*(3.68E2/9.0)-ccab2*t165313*t165331*t165314*t165264*t165265*(1.6E1/3.0)-ccab4* \
               t165311*t165322*t165328*t165266*t165267*(3.2E1/3.0)-ccab2*t165331*t165271*t165264*t165265*(gamma_aa[index]* \
               gcab*t165316*(8.8E1/9.0)+t165310*t165264*t165265*(4.0E1/3.0))-ccab4*t165328*t165266*t165267*t165268* \
               (gamma_aa[index]*gcab*t165316*(1.76E2/9.0)+t165310*t165264*t165265*8.0E1+t165327*t165266*t165267*(3.68E2/ \
               9.0)+gamma_aa[index]*gcab*t165264*t165309*t165265*(3.04E2/3.0))+ccab3*gamma_aa[index]*gcab*t165304* \
               t165264*t165309*t165265*(7.6E1/3.0)-ccab3*gamma_aa[index]*gcab*t165270*t165317*t165264*t165265*(gamma_aa[index]* \
               gcab*t165316*(4.4E1/3.0)+t165310*t165264*t165265*4.0E1+gamma_aa[index]*gcab*t165264*t165309*t165265* \
               (7.6E1/3.0))-ccab3*gamma_aa[index]*gcab*t165321*t165315*t165317*t165264*t165265*8.0)+(t165422-t165370+ \
               rho_a[index]*(-t165357+t165368+t165334*t165274*t165419)+rho_a[index]*(t165251*t165253*t165262*t165255- \
               a1p*c*c0p*t165254*t165263*(2.0/3.0))*2.0+c0p*t165253*t165263*2.0)*(ccab1*gamma_aa[index]*gcab*t165312* \
               t165299*(4.0/3.0)-ccab1*t165313*t165371*t165264*t165265*(4.0/3.0)+ccab2*t165313*t165308*t165264*t165265* \
               (8.0/3.0)+ccab4*t165322*t165266*t165267*t165296*(1.6E1/3.0)-ccab2*t165331*t165314*t165271*t165264* \
               t165265-ccab4*t165311*t165328*t165266*t165267*t165268+ccab3*gamma_aa[index]*gcab*t165304*t165315*t165264* \
               t165265*4.0-ccab3*gamma_aa[index]*gcab*t165321*t165270*t165317*t165264*t165265)*4.0+t165479*(-t165357+ \
               t165368+t165334*t165274*(t165357+t165367-t165360*t165361*t165336*t165366-a1p*c*c0p*t165346*t165288* \
               (2.0/3.0)))*2.0-(rho_a[index]*t165441*2.0+c0p*rho_a[index]*t165253*t165263*4.0)*(t165443+t165452+t165446+ \
               t165449-ccab1*t165310*t165371*t165264*t165265*(3.2E1/9.0)+ccab2*t165310*t165308*t165264*t165265*(3.2E1/ \
               9.0)-ccab2*t165331*t165327*t165266*t165267*(3.2E1/9.0)+ccab4*t165327*t165266*t165267*t165296*(6.4E1/ \
               3.0)-ccab2*t165313*t165331*t165314*t165264*t165265*(1.6E1/3.0)-ccab4*t165311*t165322*t165328*t165266* \
               t165267*(3.2E1/3.0)-ccab4*t165328*t165266*t165267*t165268*(t165310*t165264*t165265*(6.4E1/3.0)+t165327* \
               t165266*t165267*(6.4E1/3.0)+gamma_aa[index]*gcab*t165264*t165309*t165265*(1.28E2/3.0))+ccab3*gamma_aa[index]* \
               gcab*t165304*t165264*t165309*t165265*(3.2E1/3.0)-ccab3*gamma_aa[index]*gcab*t165270*t165317*t165264* \
               t165265*(t165310*t165264*t165265*(3.2E1/3.0)+gamma_aa[index]*gcab*t165264*t165309*t165265*(3.2E1/3.0) \
               )-ccab3*gamma_aa[index]*gcab*t165321*t165315*t165317*t165264*t165265*8.0)+t165376*(t165420+rho_a[index]* \
               (t165403+t165384+t165388-t165251*t165261*t165253*t165385*2.0-a1p*c*c0p*t165245*t165263*(8.0/9.0)-Aa* \
               t165400*t165402*t165390*t165274*t165389*(4.0/9.0))*2.0-t165251*t165253*t165262*t165255*2.0)+rho_a[index]* \
               t165474*(t165357-t165368+t165334*t165274*(t165453-t165357-t165367+t165368))*2.0+rho_a[index]*t165479* \
               (-t165409-t165418+t165493+t165495+t165489+t165334*t165274*(t165409+t165418+t165492-t165493+t165494- \
               t165495+t165487-t165489-t165360*t165406*t165336*t165480*2.0-a1f*c*c0f*t165404*t165349*(8.0/9.0)))+ \
               rho_a[index]*(t165422-t165370)*(ccaa1*gamma_aa[index]*gcaa*t165431*t165316*(8.8E1/9.0)+ccaa2*t165310* \
               t165440*t165264*t165358*(3.04E2/9.0)-ccaa1*t165310*t165264*t165358*t165458*2.4E1+ccaa4*t165327*t165266* \
               t165428*t165359*(1.12E3/9.0)-ccaa2*t165313*t165264*t165472*t165473*t165358*(3.2E1/3.0)-ccaa4*t165322* \
               t165266*t165359*t165468*t165469*(6.4E1/3.0)-ccaa2*t165271*t165264*t165473*t165358*(gamma_aa[index]* \
               gcaa*t165316*(1.76E2/9.0)+t165310*t165264*t165358*(3.04E2/9.0))-ccaa4*t165266*t165268*t165359*t165469* \
               (gamma_aa[index]*gcaa*t165316*(3.52E2/9.0)+t165310*t165264*t165358*(6.08E2/3.0)+t165327*t165266*t165359* \
               (1.12E3/9.0)+gamma_aa[index]*gcaa*t165264*t165309*t165358*2.88E2)+ccaa2*t165271*t165264*(t165472*t165472) \
               *t165358*1.0/(t165439*t165439*t165439)*2.0+ccaa4*1.0/(t165427*t165427*t165427)*t165266*t165268*t165359* \
               (t165468*t165468)*2.0+ccaa3*gamma_aa[index]*gcaa*t165264*t165309*t165436*t165358*7.2E1+ccaa1*gamma_aa[index]* \
               gcaa*1.0/(t165430*t165430*t165430)*t165264*t165309*t165358*(1.28E2/9.0)+ccaa3*gamma_aa[index]*gcaa* \
               t165270*t165264*1.0/(t165435*t165435*t165435)*(t165462*t165462)*t165358*2.0-ccaa3*gamma_aa[index]* \
               gcaa*t165270*t165264*t165463*t165358*(gamma_aa[index]*gcaa*t165316*(8.8E1/3.0)+t165310*t165264*t165358* \
               (3.04E2/3.0)+gamma_aa[index]*gcaa*t165264*t165309*t165358*7.2E1)-ccaa3*gamma_aa[index]*gcaa*t165315* \
               t165264*t165462*t165463*t165358*1.6E1)-c0*t165553*t165578*(cx1*gamma_aa[index]*gx*t165316*t165525* \
               (8.8E1/9.0)-cx1*t165310*t165560*t165264*t165509*2.4E1+cx2*t165310*t165264*t165534*t165509*(3.04E2/ \
               9.0)+cx4*t165510*t165522*t165327*t165266*(1.12E3/9.0)-cx2*t165313*t165264*t165509*t165574*t165575* \
               (3.2E1/3.0)-cx4*t165510*t165322*t165570*t165571*t165266*(6.4E1/3.0)-cx2*t165271*t165264*t165509*t165575* \
               (gamma_aa[index]*gx*t165316*(1.76E2/9.0)+t165310*t165264*t165509*(3.04E2/9.0))-cx4*t165510*t165571* \
               t165266*t165268*(gamma_aa[index]*gx*t165316*(3.52E2/9.0)+t165310*t165264*t165509*(6.08E2/3.0)+t165510* \
               t165327*t165266*(1.12E3/9.0)+gamma_aa[index]*gx*t165264*t165309*t165509*2.88E2)+cx2*t165271*1.0/(t165533* \
               t165533*t165533)*t165264*t165509*(t165574*t165574)*2.0+cx4*t165510*1.0/(t165521*t165521*t165521)*(t165570* \
               t165570)*t165266*t165268*2.0+cx3*gamma_aa[index]*gx*t165530*t165264*t165309*t165509*7.2E1+cx1*gamma_aa[index]* \
               gx*1.0/(t165524*t165524*t165524)*t165264*t165309*t165509*(1.28E2/9.0)+cx3*gamma_aa[index]*gx*t165270* \
               t165264*t165509*(t165564*t165564)*1.0/(t165529*t165529*t165529)*2.0-cx3*gamma_aa[index]*gx*t165270* \
               t165264*t165509*t165565*(gamma_aa[index]*gx*t165316*(8.8E1/3.0)+t165310*t165264*t165509*(3.04E2/3.0) \
               +gamma_aa[index]*gx*t165264*t165309*t165509*7.2E1)-cx3*gamma_aa[index]*gx*t165315*t165264*t165509* \
               t165564*t165565*1.6E1)-c0*t165511*t165552*t165555*(8.0/3.0)+c0*t165511*t165576*t165578*(8.0/3.0)+c0* \
               t165553*t165555*t165576*2.0-c0*t165552*t165279*t165578*(4.0/9.0)+c0*t165552*t165553*(omega*t165500* \
               (omega*t165500*(t165390*t165499*(5.0/9.0)-1.0/(omega*omega*omega*omega)*t165504*t165499*(7.717543294808713E30/ \
               4.951760157141521E27)+t165502*t165503*1.0/pow(t165496,8.0/3.0)*(3.858771647404357E31/1.980704062856608E28) \
               -t165505*t165497*t165499*(7.717543294808713E30/9.903520314283042E27)+t165500*t165535*t165497*t165499* \
               (2.778046668940015E15/2.11106232532992E14))+omega*t165505*t165539*(2.778046668940015E15/7.0368744177664E13) \
               +omega*t165508*t165546*(7.717543294808713E30/4.951760157141521E27)+t165540*t165506*t165537*t165499* \
               (3.080234563013177E46/1.115037259926531E43)+1.0/(omega*omega*omega)*t165540*t165535*t165499*(1.108777112152858E31/ \
               2.37684487542793E29))*(4.0/3.0)+omega*t165505*t165545*(2.778046668940015E15/5.2776558133248E13)-omega* \
               t165516*t165546*(7.717543294808713E30/3.713820117856141E27));
        } else {
            v_rho_a_rho_a_[index] = 0.0;
        } 

        if (is_gga_) {

            //V_rho_a_gamma_aa
            if (rho_a[index] > cutoff_) {
                double t165580 = 1.0/pow(rho_a[index],1.0/3.0);
                double t165581 = c*t165580;
                double t165582 = sqrt(t165581);
                double t165583 = pow(t165581,3.0/2.0);
                double t165584 = c*c;
                double t165585 = 1.0/pow(rho_a[index],2.0/3.0);
                double t165586 = 1.0/c0p;
                double t165587 = b1p*t165582;
                double t165588 = b3p*t165583;
                double t165589 = b4p*t165584*t165585;
                double t165590 = b2p*c*t165580;
                double t165591 = t165590+t165587+t165588+t165589;
                double t165592 = 1.0/t165591;
                double t165593 = t165592*t165586*(1.0/2.0);
                double t165594 = t165593+1.0;
                double t165595 = log(t165594);
                double t165596 = a1p*c*t165580;
                double t165597 = t165596+1.0;
                double t165598 = 1.0/pow(rho_a[index],8.0/3.0);
                double t165599 = gamma_aa[index]*gamma_aa[index];
                double t165600 = gcaa*gcaa;
                double t165601 = t165600*t165600;
                double t165602 = 1.0/pow(rho_a[index],3.2E1/3.0);
                double t165603 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t165604 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t165605 = gamma_aa[index]*gcaa*t165598;
                double t165606 = t165605+1.0;
                double t165607 = gamma_aa[index]*gcaa*t165598*3.0;
                double t165608 = gamma_aa[index]*gcaa*t165600*t165604*t165599;
                double t165609 = t165600*t165603*t165599*3.0;
                double t165610 = t165607+t165608+t165609+1.0;
                double t165611 = t165599*t165599;
                double t165612 = gamma_aa[index]*gcaa*t165598*4.0;
                double t165613 = gamma_aa[index]*gcaa*t165600*t165604*t165599*4.0;
                double t165614 = t165600*t165603*t165599*6.0;
                double t165615 = t165601*t165602*t165611;
                double t165616 = t165612+t165613+t165614+t165615+1.0;
                double t165617 = gamma_aa[index]*gcaa*t165598*2.0;
                double t165618 = t165600*t165603*t165599;
                double t165619 = t165617+t165618+1.0;
                double t165620 = pow(2.0,1.0/3.0);
                double t165621 = t165620*2.0;
                double t165622 = t165621-2.0;
                double t165623 = two_13*2.0;
                double t165624 = t165623-2.0;
                double t165625 = 1.0/t165624;
                double t165626 = 1.0/c0f;
                double t165627 = b1f*t165582;
                double t165628 = b3f*t165583;
                double t165629 = b4f*t165584*t165585;
                double t165630 = b2f*c*t165580;
                double t165631 = t165630+t165627+t165628+t165629;
                double t165632 = 1.0/t165631;
                double t165633 = t165632*t165626*(1.0/2.0);
                double t165634 = t165633+1.0;
                double t165635 = log(t165634);
                double t165636 = a1f*c*t165580;
                double t165637 = t165636+1.0;
                double t165638 = c0f*t165635*t165637*2.0;
                double t165639 = c0p*t165595*t165597*2.0;
                double t165640 = rho_a[index]*2.0;
                double t165641 = 1.0/pow(t165640,1.0/3.0);
                double t165642 = c*t165641;
                double t165643 = gcab*gcab;
                double t165644 = t165643*t165643;
                double t165645 = 1.0/pow(rho_a[index],1.9E1/3.0);
                double t165646 = 1.0/pow(rho_a[index],3.5E1/3.0);
                double t165647 = gamma_aa[index]*gcab*t165598*2.0;
                double t165648 = t165603*t165643*t165599;
                double t165649 = t165647+t165648+1.0;
                double t165650 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]*rho_a[index]);
                double t165651 = gamma_aa[index]*gcab*t165598;
                double t165652 = t165651+1.0;
                double t165653 = gamma_aa[index]*gcab*t165598*3.0;
                double t165654 = gamma_aa[index]*gcab*t165604*t165643*t165599;
                double t165655 = t165603*t165643*t165599*3.0;
                double t165656 = t165653+t165654+t165655+1.0;
                double t165657 = gamma_aa[index]*gcab*t165598*4.0;
                double t165658 = gamma_aa[index]*gcab*t165604*t165643*t165599*4.0;
                double t165659 = t165603*t165643*t165599*6.0;
                double t165660 = t165602*t165611*t165644;
                double t165661 = t165660+t165657+t165658+t165659+1.0;
                double t165662 = 1.0/pow(rho_a[index],1.1E1/3.0);
                double t165663 = 1.0/(t165649*t165649);
                double t165664 = 1.0/(t165656*t165656);
                double t165665 = 1.0/(t165661*t165661);
                double t165666 = gamma_aa[index]*gcab*t165662*(8.0/3.0);
                double t165667 = t165643*t165645*t165599*(8.0/3.0);
                double t165668 = t165666+t165667;
                double t165669 = gcab*t165598;
                double t165670 = gamma_aa[index]*t165603*t165643;
                double t165671 = t165670+t165669;
                double t165672 = gcab*t165598*(3.0/2.0);
                double t165673 = gamma_aa[index]*t165603*t165643*3.0;
                double t165674 = gcab*t165604*t165643*t165599*(3.0/2.0);
                double t165675 = t165672+t165673+t165674;
                double t165676 = gamma_aa[index]*gcab*t165662*4.0;
                double t165677 = gamma_aa[index]*gcab*t165650*t165643*t165599*4.0;
                double t165678 = t165643*t165645*t165599*8.0;
                double t165679 = t165676+t165677+t165678;
                double t165680 = gamma_aa[index]*gcab*t165662*(1.6E1/3.0);
                double t165681 = gamma_aa[index]*gcab*t165650*t165643*t165599*1.6E1;
                double t165682 = t165643*t165645*t165599*1.6E1;
                double t165683 = t165611*t165644*t165646*(1.6E1/3.0);
                double t165684 = t165680+t165681+t165682+t165683;
                double t165685 = gcab*t165598*2.0;
                double t165686 = gamma_aa[index]*t165603*t165643*6.0;
                double t165687 = gcab*t165604*t165643*t165599*6.0;
                double t165688 = gamma_aa[index]*t165602*t165644*t165599*2.0;
                double t165689 = t165685+t165686+t165687+t165688;
                double t165690 = t165638-t165639;
                double t165691 = t165622*t165625*t165690;
                double t165692 = t165691+t165639;
                double t165693 = rho_a[index]*t165692*2.0;
                double t165694 = sqrt(t165642);
                double t165695 = b1p*t165694;
                double t165696 = pow(t165642,3.0/2.0);
                double t165697 = b3p*t165696;
                double t165698 = b2p*c*t165641;
                double t165699 = 1.0/pow(t165640,2.0/3.0);
                double t165700 = b4p*t165584*t165699;
                double t165701 = t165700+t165695+t165697+t165698;
                double t165702 = 1.0/t165701;
                double t165703 = t165702*t165586*(1.0/2.0);
                double t165704 = t165703+1.0;
                double t165705 = log(t165704);
                double t165706 = a1p*c*t165641;
                double t165707 = t165706+1.0;
                double t165708 = t165693-c0p*rho_a[index]*t165705*t165707*4.0;
                double t165709 = 1.0/t165661;
                double t165710 = 1.0/t165649;
                double t165711 = 1.0/t165656;
                double t165712 = 1.0/(t165652*t165652);
                double t165713 = 1.0/(t165652*t165652*t165652);
                double t165714 = ccab3*gcab*t165604*t165643*t165664*t165679*t165599*(3.0/2.0);
                double t165715 = ccab2*gamma_aa[index]*t165603*t165643*t165663*t165668;
                double t165716 = ccab3*gamma_aa[index]*gcab*t165650*t165643*t165664*t165675*t165599*4.0;
                double t165717 = ccab4*gamma_aa[index]*t165602*t165644*t165665*t165684*t165599*2.0;
                double t165718 = ccab4*t165611*t165644*t165646*t165665*t165689*(1.6E1/3.0);
                double t165719 = ccab2*t165643*t165671*t165645*t165663*t165599*(8.0/3.0);
                double t165720 = gamma_aa[index]*t165643*t165645*4.0;
                double t165721 = 1.0/(t165649*t165649*t165649);
                double t165722 = 1.0/(t165656*t165656*t165656);
                double t165723 = 1.0/(t165661*t165661*t165661);
                double t165724 = 1.0/pow(t165640,4.0/3.0);
                double t165725 = 1.0/pow(rho_a[index],4.0/3.0);
                double t165726 = 1.0/pow(rho_a[index],5.0/3.0);
                double t165727 = 1.0/sqrt(t165581);
                double t165728 = 1.0/t165594;
                double t165729 = 1.0/(t165591*t165591);
                double t165730 = b4p*t165726*t165584*(2.0/3.0);
                double t165731 = b2p*c*t165725*(1.0/3.0);
                double t165732 = b1p*c*t165725*t165727*(1.0/6.0);
                double t165733 = b3p*c*t165725*t165582*(1.0/2.0);
                double t165734 = t165730+t165731+t165732+t165733;
                double t165735 = t165734*t165728*t165729*t165597;
                double t165736 = 1.0/t165652;
                double t165737 = 1.0/t165606;
                double t165738 = 1.0/t165616;
                double t165739 = 1.0/t165619;
                double t165740 = 1.0/t165610;
                double t165741 = 1.0/(t165606*t165606);
                double t165742 = 1.0/(t165610*t165610);
                double t165743 = 1.0/(t165619*t165619);
                double t165744 = gcaa*t165598*3.0;
                double t165745 = gamma_aa[index]*t165600*t165603*6.0;
                double t165746 = gcaa*t165600*t165604*t165599*3.0;
                double t165747 = t165744+t165745+t165746;
                double t165748 = 1.0/(t165616*t165616);
                double t165749 = gcaa*t165598*4.0;
                double t165750 = gamma_aa[index]*t165600*t165603*1.2E1;
                double t165751 = gcaa*t165600*t165604*t165599*1.2E1;
                double t165752 = gamma_aa[index]*t165601*t165602*t165599*4.0;
                double t165753 = t165750+t165751+t165752+t165749;
                double t165754 = gcaa*t165598*2.0;
                double t165755 = gamma_aa[index]*t165600*t165603*2.0;
                double t165756 = t165754+t165755;
                double t165757 = gamma_aa[index]*gcaa*t165662*(1.6E1/3.0);
                double t165758 = t165600*t165645*t165599*(1.6E1/3.0);
                double t165759 = t165757+t165758;
                double t165760 = gamma_aa[index]*gcaa*t165662*8.0;
                double t165761 = gamma_aa[index]*gcaa*t165600*t165650*t165599*8.0;
                double t165762 = t165600*t165645*t165599*1.6E1;
                double t165763 = t165760+t165761+t165762;
                double t165764 = gamma_aa[index]*gcaa*t165662*(3.2E1/3.0);
                double t165765 = gamma_aa[index]*gcaa*t165600*t165650*t165599*3.2E1;
                double t165766 = t165600*t165645*t165599*3.2E1;
                double t165767 = t165601*t165611*t165646*(3.2E1/3.0);
                double t165768 = t165764+t165765+t165766+t165767;
                double t165769 = 1.0/t165634;
                double t165770 = 1.0/(t165631*t165631);
                double t165771 = b4f*t165726*t165584*(2.0/3.0);
                double t165772 = b2f*c*t165725*(1.0/3.0);
                double t165773 = b1f*c*t165725*t165727*(1.0/6.0);
                double t165774 = b3f*c*t165725*t165582*(1.0/2.0);
                double t165775 = t165771+t165772+t165773+t165774;
                double t165776 = a1f*c*c0f*t165635*t165725*(2.0/3.0);
                double t165777 = a1p*c*c0p*t165725*t165595*(2.0/3.0);
                double t165778 = ccaa1*gcaa*t165737*t165598;
                double t165779 = ccaa4*gamma_aa[index]*t165601*t165602*t165738*t165599*4.0;
                double t165780 = ccaa2*gamma_aa[index]*t165600*t165603*t165739*2.0;
                double t165781 = ccaa3*gcaa*t165600*t165604*t165740*t165599*3.0;
                double t165782 = t165780+t165781+t165778+t165779-ccaa1*gamma_aa[index]*t165600*t165603*t165741-ccaa4* \
                   t165601*t165602*t165611*t165753*t165748-ccaa2*t165600*t165603*t165743*t165756*t165599-ccaa3*gamma_aa[index]* \
                   gcaa*t165600*t165604*t165742*t165747*t165599;
                double t165783 = rho_a[index]*(8.334140006820045E15/1.40737488355328E14);
                double t165784 = 1.0/pow(t165783,1.0/3.0);
                double t165785 = 1.0/(omega*omega);
                double t165786 = pow(t165783,2.0/3.0);
                double t165836 = t165785*t165786;
                double t165787 = exp(-t165836);
                double t165788 = gx*gx;
                double t165789 = t165788*t165788;
                double t165790 = gamma_aa[index]*gx*t165598;
                double t165791 = t165790+1.0;
                double t165792 = gamma_aa[index]*gx*t165598*3.0;
                double t165793 = gamma_aa[index]*gx*t165604*t165599*t165788;
                double t165794 = t165603*t165599*t165788*3.0;
                double t165795 = t165792+t165793+t165794+1.0;
                double t165796 = gamma_aa[index]*gx*t165598*2.0;
                double t165797 = t165603*t165599*t165788;
                double t165798 = t165796+t165797+1.0;
                double t165799 = 1.0/(t165795*t165795);
                double t165800 = gamma_aa[index]*gx*t165598*4.0;
                double t165801 = gamma_aa[index]*gx*t165604*t165599*t165788*4.0;
                double t165802 = t165603*t165599*t165788*6.0;
                double t165803 = t165602*t165611*t165789;
                double t165804 = t165800+t165801+t165802+t165803+1.0;
                double t165805 = 1.0/(t165804*t165804);
                double t165806 = 1.0/(t165798*t165798);
                double t165807 = gamma_aa[index]*gx*t165662*(1.6E1/3.0);
                double t165808 = t165645*t165599*t165788*(1.6E1/3.0);
                double t165809 = t165807+t165808;
                double t165810 = gx*t165598*2.0;
                double t165811 = gamma_aa[index]*t165603*t165788*2.0;
                double t165812 = t165810+t165811;
                double t165813 = gx*t165598*3.0;
                double t165814 = gamma_aa[index]*t165603*t165788*6.0;
                double t165815 = gx*t165604*t165599*t165788*3.0;
                double t165816 = t165813+t165814+t165815;
                double t165817 = gamma_aa[index]*gx*t165662*8.0;
                double t165818 = gamma_aa[index]*gx*t165650*t165599*t165788*8.0;
                double t165819 = t165645*t165599*t165788*1.6E1;
                double t165820 = t165817+t165818+t165819;
                double t165821 = gamma_aa[index]*gx*t165662*(3.2E1/3.0);
                double t165822 = gamma_aa[index]*gx*t165650*t165599*t165788*3.2E1;
                double t165823 = t165645*t165599*t165788*3.2E1;
                double t165824 = t165611*t165646*t165789*(3.2E1/3.0);
                double t165825 = t165821+t165822+t165823+t165824;
                double t165826 = gx*t165598*4.0;
                double t165827 = gamma_aa[index]*t165603*t165788*1.2E1;
                double t165828 = gx*t165604*t165599*t165788*1.2E1;
                double t165829 = gamma_aa[index]*t165602*t165599*t165789*4.0;
                double t165830 = t165826+t165827+t165828+t165829;
                double t165831 = 1.0/omega;
                double t165832 = pow(t165783,1.0/3.0);
                double t165833 = t165831*t165832;
                double t165834 = erf(t165833);
                double t165835 = t165834*(3.991211251234741E15/2.251799813685248E15);
                double t165837 = omega*omega;
                double t165838 = 1.0/pow(t165783,2.0/3.0);
                double t165839 = t165787-1.0;
                double t165840 = t165837*t165838*t165839*(1.0/2.0);
                double t165841 = t165840-t165787+3.0/2.0;
                double t165852 = omega*t165841*t165784;
                double t165842 = -t165852+t165835;
                double t165843 = omega*t165842*t165784*(4.0/3.0);
                double t165844 = t165843-1.0;
                double t165845 = 1.0/t165791;
                double t165846 = 1.0/t165804;
                double t165847 = 1.0/t165798;
                double t165848 = 1.0/t165795;
                double t165849 = 1.0/(t165791*t165791);
                double t165850 = pow(rho_a[index],4.0/3.0);
                double t165851 = 1.0/pow(t165783,4.0/3.0);
                double t165853 = cx1*gx*t165845*t165598;
                double t165854 = cx4*gamma_aa[index]*t165602*t165846*t165599*t165789*4.0;
                double t165855 = cx2*gamma_aa[index]*t165603*t165847*t165788*2.0;
                double t165856 = cx3*gx*t165604*t165848*t165599*t165788*3.0;
                double t165857 = t165853+t165854+t165855+t165856-cx1*gamma_aa[index]*t165603*t165849*t165788-cx2* \
                   t165603*t165812*t165806*t165599*t165788-cx4*t165602*t165611*t165830*t165805*t165789-cx3*gamma_aa[index]* \
                   gx*t165604*t165816*t165599*t165788*t165799;
                v_rho_a_gamma_aa_[index] = t165708*(t165714+t165715+t165716+t165717+t165718+t165719-ccab2*gamma_aa[index]* \
                   t165710*t165643*t165645*(4.0/3.0)+ccab1*gamma_aa[index]*t165712*t165643*t165645*(4.0/3.0)+ccab4*t165602* \
                   t165611*t165644*t165665*(gamma_aa[index]*t165643*t165645*8.0+gamma_aa[index]*t165644*t165646*t165599* \
                   8.0+gcab*t165650*t165643*t165599*1.6E1)+ccab2*gamma_aa[index]*t165644*t165663*t165646*t165599*(4.0/ \
                   3.0)-ccab4*gamma_aa[index]*t165644*t165646*t165709*t165599*8.0-ccab1*gcab*t165650*t165713*t165643* \
                   t165599*(4.0/3.0)-ccab3*gcab*t165711*t165650*t165643*t165599*4.0-ccab4*t165602*t165611*t165723*t165644* \
                   t165684*t165689*2.0-ccab2*t165603*t165721*t165643*t165671*t165668*t165599*2.0+ccab3*gamma_aa[index]* \
                   gcab*t165604*t165643*t165664*t165599*(t165720+gcab*t165650*t165643*t165599*4.0)-ccab3*gamma_aa[index]* \
                   gcab*t165604*t165722*t165643*t165675*t165679*t165599*2.0)-t165782*(t165639+t165622*t165625*(t165638- \
                   c0p*t165595*t165597*2.0))-(-t165691-t165639+rho_a[index]*((1.0/(t165701*t165701)*t165707*(b4p*1.0/ \
                   pow(t165640,5.0/3.0)*t165584*(2.0/3.0)+b2p*c*t165724*(1.0/3.0)+b3p*c*t165724*t165694*(1.0/2.0)+b1p* \
                   c*1.0/sqrt(t165642)*t165724*(1.0/6.0)))/t165704-a1p*c*c0p*t165705*t165724*(2.0/3.0))*2.0+rho_a[index]* \
                   (-t165735+t165777+t165622*t165625*(t165735+t165776-t165770*t165637*t165775*t165769-a1p*c*c0p*t165725* \
                   t165595*(2.0/3.0)))+c0p*t165705*t165707*2.0)*(ccab1*gcab*t165736*t165598*(1.0/2.0)+ccab2*gamma_aa[index]* \
                   t165710*t165603*t165643-ccab1*gamma_aa[index]*t165603*t165712*t165643*(1.0/2.0)-ccab4*t165602*t165611* \
                   t165644*t165665*t165689-ccab2*t165603*t165643*t165671*t165663*t165599+ccab4*gamma_aa[index]*t165602* \
                   t165644*t165709*t165599*2.0+ccab3*gcab*t165711*t165604*t165643*t165599*(3.0/2.0)-ccab3*gamma_aa[index]* \
                   gcab*t165604*t165643*t165664*t165675*t165599)*2.0+t165708*(t165714+t165715+t165716+t165717+t165718+ \
                   t165719-ccab1*gcab*t165662*t165736*(4.0/3.0)-ccab2*gamma_aa[index]*t165710*t165643*t165645*4.0+ccab1* \
                   gamma_aa[index]*t165712*t165643*t165645*(8.0/3.0)+ccab4*t165602*t165611*t165644*t165665*(gcab*t165662* \
                   (1.6E1/3.0)+gamma_aa[index]*t165643*t165645*2.4E1+gamma_aa[index]*t165644*t165646*t165599*(4.0E1/3.0) \
                   +gcab*t165650*t165643*t165599*3.2E1)+ccab2*t165603*t165643*t165663*t165599*(t165720+gcab*t165662*(8.0/ \
                   3.0))-ccab4*gamma_aa[index]*t165644*t165646*t165709*t165599*(4.0E1/3.0)-ccab1*gcab*t165650*t165713* \
                   t165643*t165599*(4.0/3.0)-ccab3*gcab*t165711*t165650*t165643*t165599*8.0-ccab4*t165602*t165611*t165723* \
                   t165644*t165684*t165689*2.0-ccab2*t165603*t165721*t165643*t165671*t165668*t165599*2.0+ccab3*gamma_aa[index]* \
                   gcab*t165604*t165643*t165664*t165599*(gcab*t165662*4.0+gamma_aa[index]*t165643*t165645*1.2E1+gcab* \
                   t165650*t165643*t165599*8.0)-ccab3*gamma_aa[index]*gcab*t165604*t165722*t165643*t165675*t165679*t165599* \
                   2.0)-rho_a[index]*t165692*(ccaa1*gcaa*t165662*t165737*(-8.0/3.0)+ccaa1*gamma_aa[index]*t165600*t165741* \
                   t165645*8.0-ccaa2*gamma_aa[index]*t165600*t165645*t165739*(3.2E1/3.0)+ccaa4*t165601*t165611*t165753* \
                   t165646*t165748*(3.2E1/3.0)+ccaa2*t165600*t165743*t165645*t165756*t165599*(1.6E1/3.0)+ccaa4*t165601* \
                   t165602*t165611*t165748*(gcaa*t165662*(3.2E1/3.0)+gamma_aa[index]*t165600*t165645*6.4E1+gamma_aa[index]* \
                   t165601*t165646*t165599*(1.28E2/3.0)+gcaa*t165600*t165650*t165599*9.6E1)-ccaa1*gcaa*t165600*t165650* \
                   1.0/(t165606*t165606*t165606)*t165599*(1.6E1/3.0)+ccaa2*t165600*t165603*t165743*t165599*(gcaa*t165662* \
                   (1.6E1/3.0)+gamma_aa[index]*t165600*t165645*(3.2E1/3.0))+ccaa2*gamma_aa[index]*t165600*t165603*t165743* \
                   t165759*2.0-ccaa4*gamma_aa[index]*t165601*t165646*t165738*t165599*(1.28E2/3.0)-ccaa3*gcaa*t165600* \
                   t165650*t165740*t165599*2.4E1+ccaa4*gamma_aa[index]*t165601*t165602*t165748*t165768*t165599*4.0+ccaa3* \
                   gcaa*t165600*t165604*t165742*t165763*t165599*3.0-ccaa4*t165601*t165602*t165611*1.0/(t165616*t165616* \
                   t165616)*t165753*t165768*2.0-ccaa2*t165600*t165603*1.0/(t165619*t165619*t165619)*t165756*t165759*t165599* \
                   2.0+ccaa3*gamma_aa[index]*gcaa*t165600*t165604*t165742*t165599*(gcaa*t165662*8.0+gamma_aa[index]*t165600* \
                   t165645*3.2E1+gcaa*t165600*t165650*t165599*2.4E1)+ccaa3*gamma_aa[index]*gcaa*t165600*t165650*t165742* \
                   t165747*t165599*8.0-ccaa3*gamma_aa[index]*gcaa*t165600*1.0/(t165610*t165610*t165610)*t165604*t165763* \
                   t165747*t165599*2.0)+rho_a[index]*t165782*(-t165735+t165777+t165622*t165625*(t165735+t165776-t165777- \
                   t165770*t165637*t165775*t165769))-c0*t165850*t165857*(omega*t165784*(omega*t165841*t165851*(2.778046668940015E15/ \
                   1.40737488355328E14)+omega*t165784*((t165787*(1.0/3.0))/rho_a[index]+1.0/pow(t165783,5.0/3.0)*t165837* \
                   t165839*(2.778046668940015E15/1.40737488355328E14)-t165784*t165785*t165787*(2.778046668940015E15/7.0368744177664E13) \
                   )+1.0/sqrt(3.141592653589793)*t165831*t165838*t165787*(1.108777112152858E31/1.584563250285287E29)) \
                   *(4.0/3.0)-omega*t165842*t165851*(2.778046668940015E15/1.05553116266496E14))-c0*t165850*t165844*(cx1* \
                   gx*t165662*t165845*(-8.0/3.0)+cx1*gamma_aa[index]*t165645*t165849*t165788*8.0-cx2*gamma_aa[index]* \
                   t165645*t165847*t165788*(3.2E1/3.0)+cx2*t165812*t165806*t165645*t165599*t165788*(1.6E1/3.0)+cx4*t165611* \
                   t165830*t165805*t165646*t165789*(3.2E1/3.0)+cx4*t165602*t165611*t165805*t165789*(gx*t165662*(3.2E1/ \
                   3.0)+gamma_aa[index]*t165645*t165788*6.4E1+gamma_aa[index]*t165646*t165599*t165789*(1.28E2/3.0)+gx* \
                   t165650*t165599*t165788*9.6E1)-cx1*gx*t165650*1.0/(t165791*t165791*t165791)*t165599*t165788*(1.6E1/ \
                   3.0)+cx2*t165603*t165806*t165599*t165788*(gx*t165662*(1.6E1/3.0)+gamma_aa[index]*t165645*t165788*(3.2E1/ \
                   3.0))+cx2*gamma_aa[index]*t165603*t165806*t165809*t165788*2.0-cx4*gamma_aa[index]*t165646*t165846* \
                   t165599*t165789*(1.28E2/3.0)-cx3*gx*t165650*t165848*t165599*t165788*2.4E1+cx4*gamma_aa[index]*t165602* \
                   t165805*t165825*t165599*t165789*4.0+cx3*gx*t165604*t165820*t165599*t165788*t165799*3.0-cx2*t165603* \
                   t165812*t165809*t165599*t165788*1.0/(t165798*t165798*t165798)*2.0-cx4*t165602*t165611*t165830*1.0/ \
                   (t165804*t165804*t165804)*t165825*t165789*2.0+cx3*gamma_aa[index]*gx*t165604*t165599*t165788*t165799* \
                   (gx*t165662*8.0+gamma_aa[index]*t165645*t165788*3.2E1+gx*t165650*t165599*t165788*2.4E1)+cx3*gamma_aa[index]* \
                   gx*t165650*t165816*t165599*t165788*t165799*8.0-cx3*gamma_aa[index]*gx*t165604*t165820*t165816*1.0/ \
                   (t165795*t165795*t165795)*t165599*t165788*2.0)-c0*pow(rho_a[index],1.0/3.0)*t165844*t165857*(4.0/3.0) \
                   ;
            } else {
                v_rho_a_gamma_aa_[index] = 0.0;
            } 

            //V_gamma_aa_gamma_aa
            if (rho_a[index] > cutoff_) {
                double t165859 = 1.0/pow(rho_a[index],1.0/3.0);
                double t165860 = c*t165859;
                double t165861 = sqrt(t165860);
                double t165862 = pow(t165860,3.0/2.0);
                double t165863 = c*c;
                double t165864 = 1.0/pow(rho_a[index],2.0/3.0);
                double t165865 = 1.0/c0p;
                double t165866 = b1p*t165861;
                double t165867 = b3p*t165862;
                double t165868 = b4p*t165863*t165864;
                double t165869 = b2p*c*t165859;
                double t165870 = t165866+t165867+t165868+t165869;
                double t165871 = 1.0/t165870;
                double t165872 = t165871*t165865*(1.0/2.0);
                double t165873 = t165872+1.0;
                double t165874 = log(t165873);
                double t165875 = a1p*c*t165859;
                double t165876 = t165875+1.0;
                double t165877 = rho_a[index]*2.0;
                double t165878 = 1.0/pow(t165877,1.0/3.0);
                double t165879 = c*t165878;
                double t165880 = gcab*gcab;
                double t165881 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t165882 = 1.0/pow(rho_a[index],8.0/3.0);
                double t165883 = gamma_aa[index]*gamma_aa[index];
                double t165884 = t165880*t165880;
                double t165885 = 1.0/pow(rho_a[index],3.2E1/3.0);
                double t165886 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t165887 = gamma_aa[index]*gcab*t165882;
                double t165888 = t165887+1.0;
                double t165889 = gamma_aa[index]*gcab*t165882*2.0;
                double t165890 = t165880*t165881*t165883;
                double t165891 = t165890+t165889+1.0;
                double t165892 = gamma_aa[index]*gcab*t165882*3.0;
                double t165893 = gamma_aa[index]*gcab*t165880*t165883*t165886;
                double t165894 = t165880*t165881*t165883*3.0;
                double t165895 = t165892+t165893+t165894+1.0;
                double t165896 = t165883*t165883;
                double t165912 = gcab*t165882*2.0;
                double t165913 = gamma_aa[index]*t165880*t165881*6.0;
                double t165914 = gcab*t165880*t165883*t165886*6.0;
                double t165915 = gamma_aa[index]*t165883*t165884*t165885*2.0;
                double t165897 = t165912+t165913+t165914+t165915;
                double t165898 = gamma_aa[index]*gcab*t165882*4.0;
                double t165899 = gamma_aa[index]*gcab*t165880*t165883*t165886*4.0;
                double t165900 = t165880*t165881*t165883*6.0;
                double t165901 = t165884*t165885*t165896;
                double t165902 = t165900+t165901+t165898+t165899+1.0;
                double t165905 = gcab*t165882;
                double t165906 = gamma_aa[index]*t165880*t165881;
                double t165903 = t165905+t165906;
                double t165904 = 1.0/(t165895*t165895);
                double t165907 = 1.0/(t165891*t165891);
                double t165908 = gcab*t165882*(3.0/2.0);
                double t165909 = gamma_aa[index]*t165880*t165881*3.0;
                double t165910 = gcab*t165880*t165883*t165886*(3.0/2.0);
                double t165911 = t165910+t165908+t165909;
                double t165916 = 1.0/(t165902*t165902);
                double t165917 = pow(2.0,1.0/3.0);
                double t165918 = t165917*2.0;
                double t165919 = t165918-2.0;
                double t165920 = two_13*2.0;
                double t165921 = t165920-2.0;
                double t165922 = 1.0/t165921;
                double t165923 = 1.0/c0f;
                double t165924 = b1f*t165861;
                double t165925 = b3f*t165862;
                double t165926 = b4f*t165863*t165864;
                double t165927 = b2f*c*t165859;
                double t165928 = t165924+t165925+t165926+t165927;
                double t165929 = 1.0/t165928;
                double t165930 = t165923*t165929*(1.0/2.0);
                double t165931 = t165930+1.0;
                double t165932 = log(t165931);
                double t165933 = a1f*c*t165859;
                double t165934 = t165933+1.0;
                double t165935 = c0f*t165932*t165934*2.0;
                double t165936 = c0p*t165874*t165876*2.0;
                double t165937 = gcaa*gcaa;
                double t165938 = t165937*t165937;
                double t165939 = gamma_aa[index]*gcaa*t165882;
                double t165940 = t165939+1.0;
                double t165941 = gamma_aa[index]*gcaa*t165882*2.0;
                double t165942 = t165881*t165883*t165937;
                double t165943 = t165941+t165942+1.0;
                double t165944 = gamma_aa[index]*gcaa*t165882*3.0;
                double t165945 = gamma_aa[index]*gcaa*t165883*t165937*t165886;
                double t165946 = t165881*t165883*t165937*3.0;
                double t165947 = t165944+t165945+t165946+1.0;
                double t165963 = gcaa*t165882*4.0;
                double t165964 = gamma_aa[index]*t165881*t165937*1.2E1;
                double t165965 = gcaa*t165883*t165937*t165886*1.2E1;
                double t165966 = gamma_aa[index]*t165883*t165938*t165885*4.0;
                double t165948 = t165963+t165964+t165965+t165966;
                double t165949 = gamma_aa[index]*gcaa*t165882*4.0;
                double t165950 = gamma_aa[index]*gcaa*t165883*t165937*t165886*4.0;
                double t165951 = t165881*t165883*t165937*6.0;
                double t165952 = t165938*t165885*t165896;
                double t165953 = t165950+t165951+t165952+t165949+1.0;
                double t165956 = gcaa*t165882*2.0;
                double t165957 = gamma_aa[index]*t165881*t165937*2.0;
                double t165954 = t165956+t165957;
                double t165955 = 1.0/(t165947*t165947);
                double t165958 = 1.0/(t165943*t165943);
                double t165959 = gcaa*t165882*3.0;
                double t165960 = gamma_aa[index]*t165881*t165937*6.0;
                double t165961 = gcaa*t165883*t165937*t165886*3.0;
                double t165962 = t165960+t165961+t165959;
                double t165967 = 1.0/(t165953*t165953);
                double t165968 = rho_a[index]*(8.334140006820045E15/1.40737488355328E14);
                double t165969 = 1.0/pow(t165968,1.0/3.0);
                double t165970 = 1.0/(omega*omega);
                double t165971 = pow(t165968,2.0/3.0);
                double t165972 = exp(-t165970*t165971);
                double t165973 = gx*gx;
                double t165974 = t165973*t165973;
                double t165975 = gamma_aa[index]*gx*t165882;
                double t165976 = t165975+1.0;
                double t165977 = gamma_aa[index]*gx*t165882*2.0;
                double t165978 = t165881*t165883*t165973;
                double t165979 = t165977+t165978+1.0;
                double t165980 = gamma_aa[index]*gx*t165882*3.0;
                double t165981 = gamma_aa[index]*gx*t165883*t165973*t165886;
                double t165982 = t165881*t165883*t165973*3.0;
                double t165983 = t165980+t165981+t165982+1.0;
                double t165999 = gx*t165882*4.0;
                double t166000 = gamma_aa[index]*t165881*t165973*1.2E1;
                double t166001 = gx*t165883*t165973*t165886*1.2E1;
                double t166002 = gamma_aa[index]*t165883*t165974*t165885*4.0;
                double t165984 = t166000+t166001+t166002+t165999;
                double t165985 = gamma_aa[index]*gx*t165882*4.0;
                double t165986 = gamma_aa[index]*gx*t165883*t165973*t165886*4.0;
                double t165987 = t165881*t165883*t165973*6.0;
                double t165988 = t165974*t165885*t165896;
                double t165989 = t165985+t165986+t165987+t165988+1.0;
                double t165992 = gx*t165882*2.0;
                double t165993 = gamma_aa[index]*t165881*t165973*2.0;
                double t165990 = t165992+t165993;
                double t165991 = 1.0/(t165983*t165983);
                double t165994 = 1.0/(t165979*t165979);
                double t165995 = gx*t165882*3.0;
                double t165996 = gamma_aa[index]*t165881*t165973*6.0;
                double t165997 = gx*t165883*t165973*t165886*3.0;
                double t165998 = t165995+t165996+t165997;
                double t166003 = 1.0/(t165989*t165989);
                v_gamma_aa_gamma_aa_[index] = (rho_a[index]*(t165936+t165922*t165919*(t165935-c0p*t165874*t165876* \
                   2.0))*2.0-c0p*rho_a[index]*log((t165865*(1.0/2.0))/(b1p*sqrt(t165879)+b3p*pow(t165879,3.0/2.0)+b4p* \
                   t165863*1.0/pow(t165877,2.0/3.0)+b2p*c*t165878)+1.0)*(a1p*c*t165878+1.0)*4.0)*((ccab2*t165880*t165881* \
                   (1.0/2.0))/t165891-ccab1*t165880*t165881*1.0/(t165888*t165888)*(1.0/2.0)-ccab2*t165907*t165883*t165884* \
                   t165885*(1.0/2.0)+(ccab4*t165883*t165884*t165885*3.0)/t165902-ccab4*t165916*t165884*t165885*t165896* \
                   (t165880*t165881*3.0+t165883*t165884*t165885*3.0+gamma_aa[index]*gcab*t165880*t165886*6.0)+(ccab3* \
                   gamma_aa[index]*gcab*t165880*t165886*(3.0/2.0))/t165895+ccab1*gamma_aa[index]*gcab*t165880*t165886* \
                   1.0/(t165888*t165888*t165888)*(1.0/2.0)+ccab2*(t165903*t165903)*t165880*t165881*1.0/(t165891*t165891* \
                   t165891)*t165883*2.0+ccab4*1.0/(t165902*t165902*t165902)*t165884*t165885*t165896*(t165897*t165897) \
                   *2.0-ccab2*gamma_aa[index]*t165903*t165880*t165907*t165881*2.0-ccab4*gamma_aa[index]*t165916*t165883* \
                   t165884*t165885*t165897*4.0-ccab3*gcab*t165911*t165904*t165880*t165883*t165886*3.0-ccab3*gamma_aa[index]* \
                   gcab*t165904*t165880*t165883*t165886*(t165880*t165881*(3.0/2.0)+gamma_aa[index]*gcab*t165880*t165886* \
                   (3.0/2.0))+ccab3*gamma_aa[index]*gcab*(t165911*t165911)*t165880*t165883*t165886*1.0/(t165895*t165895* \
                   t165895)*2.0)*4.0+rho_a[index]*(t165936+t165922*t165919*(t165935-t165936))*(ccaa1*1.0/(t165940*t165940) \
                   *t165881*t165937*2.0-(ccaa2*t165881*t165937*2.0)/t165943+ccaa2*t165883*t165938*t165885*t165958*2.0- \
                   (ccaa4*t165883*t165938*t165885*1.2E1)/t165953+ccaa4*t165938*t165885*t165967*t165896*(t165881*t165937* \
                   1.2E1+t165883*t165938*t165885*1.2E1+gamma_aa[index]*gcaa*t165937*t165886*2.4E1)-ccaa1*gamma_aa[index]* \
                   gcaa*1.0/(t165940*t165940*t165940)*t165937*t165886*2.0-(ccaa3*gamma_aa[index]*gcaa*t165937*t165886* \
                   6.0)/t165947-ccaa2*1.0/(t165943*t165943*t165943)*t165881*(t165954*t165954)*t165883*t165937*2.0-ccaa4* \
                   1.0/(t165953*t165953*t165953)*t165938*t165885*(t165948*t165948)*t165896*2.0+ccaa2*gamma_aa[index]* \
                   t165881*t165954*t165937*t165958*4.0+ccaa4*gamma_aa[index]*t165883*t165938*t165885*t165948*t165967* \
                   8.0+ccaa3*gcaa*t165962*t165883*t165937*t165955*t165886*6.0+ccaa3*gamma_aa[index]*gcaa*t165883*t165937* \
                   t165955*t165886*(t165881*t165937*6.0+gamma_aa[index]*gcaa*t165937*t165886*6.0)-ccaa3*gamma_aa[index]* \
                   gcaa*(t165962*t165962)*t165883*t165937*1.0/(t165947*t165947*t165947)*t165886*2.0)*2.0+c0*pow(rho_a[index],4.0/ \
                   3.0)*(omega*t165969*(erf(pow(t165968,1.0/3.0)/omega)*(3.991211251234741E15/2.251799813685248E15)-omega* \
                   t165969*(-t165972+(omega*omega)*1.0/pow(t165968,2.0/3.0)*(t165972-1.0)*(1.0/2.0)+3.0/2.0))*(4.0/3.0) \
                   -1.0)*(cx1*t165881*t165973*1.0/(t165976*t165976)*2.0-(cx2*t165881*t165973*2.0)/t165979+cx2*t165883* \
                   t165974*t165885*t165994*2.0-(cx4*t165883*t165974*t165885*1.2E1)/t165989+cx4*t166003*t165974*t165885* \
                   t165896*(t165881*t165973*1.2E1+t165883*t165974*t165885*1.2E1+gamma_aa[index]*gx*t165973*t165886*2.4E1) \
                   -cx1*gamma_aa[index]*gx*t165973*t165886*1.0/(t165976*t165976*t165976)*2.0-(cx3*gamma_aa[index]*gx* \
                   t165973*t165886*6.0)/t165983-cx2*t165881*(t165990*t165990)*t165883*t165973*1.0/(t165979*t165979*t165979) \
                   *2.0-cx4*t165974*t165885*(t165984*t165984)*t165896*1.0/(t165989*t165989*t165989)*2.0+cx2*gamma_aa[index]* \
                   t165881*t165990*t165973*t165994*4.0+cx4*gamma_aa[index]*t166003*t165883*t165974*t165885*t165984*8.0+ \
                   cx3*gx*t165883*t165973*t165991*t165886*t165998*6.0+cx3*gamma_aa[index]*gx*t165883*t165973*t165991* \
                   t165886*(t165881*t165973*6.0+gamma_aa[index]*gx*t165973*t165886*6.0)-cx3*gamma_aa[index]*gx*t165883* \
                   t165973*1.0/(t165983*t165983*t165983)*t165886*(t165998*t165998)*2.0)*2.0;
            } else {
                v_gamma_aa_gamma_aa_[index] = 0.0;
            } 

        }
        if (is_meta_) {

            //V_rho_a_tau_a
            if (rho_a[index] > cutoff_) {
                v_rho_a_tau_a_[index] = 0.0;
            } else {
                v_rho_a_tau_a_[index] = 0.0;
            } 

            //V_tau_a_tau_a
            if (rho_a[index] > cutoff_) {
                v_tau_a_tau_a_[index] = 0.0;
            } else {
                v_tau_a_tau_a_[index] = 0.0;
            } 

            if (is_gga_) {

                //V_gamma_aa_tau_a
                if (rho_a[index] > cutoff_) {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } else {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } 

            }
        }
    }
}
void wB97X_Functional::computeUKSFunctional(boost::shared_ptr<UKSFunctions> prop)
{
    int ntrue = prop->npoints();

    const double* restrict rho_a;
    const double* restrict rho_b;
    const double* restrict gamma_aa;
    const double* restrict gamma_ab;
    const double* restrict gamma_bb;
    const double* restrict tau_a;
    const double* restrict tau_b;

    rho_a = prop->property_value("RHO_A")->pointer();
    rho_b = prop->property_value("RHO_B")->pointer();
    if (is_gga_) {
        gamma_aa = prop->property_value("GAMMA_AA")->pointer();
        gamma_ab = prop->property_value("GAMMA_AB")->pointer();
        gamma_bb = prop->property_value("GAMMA_BB")->pointer();
    }
    if (is_meta_) {
        tau_a = prop->property_value("TAU_A")->pointer();
        tau_b = prop->property_value("TAU_B")->pointer();
    }

    double omega = params_[0].second;
    double c0 = params_[1].second;
    double two_13 = params_[2].second;
    double d2fz0 = params_[3].second;
    double c = params_[4].second;
    double Aa = params_[5].second;
    double a1a = params_[6].second;
    double b1a = params_[7].second;
    double b2a = params_[8].second;
    double b3a = params_[9].second;
    double b4a = params_[10].second;
    double c0p = params_[11].second;
    double a1p = params_[12].second;
    double b1p = params_[13].second;
    double b2p = params_[14].second;
    double b3p = params_[15].second;
    double b4p = params_[16].second;
    double c0f = params_[17].second;
    double a1f = params_[18].second;
    double b1f = params_[19].second;
    double b2f = params_[20].second;
    double b3f = params_[21].second;
    double b4f = params_[22].second;
    double gcab = params_[23].second;
    double gcaa = params_[24].second;
    double gx = params_[25].second;
    double ccab0 = params_[26].second;
    double ccab1 = params_[27].second;
    double ccab2 = params_[28].second;
    double ccab3 = params_[29].second;
    double ccab4 = params_[30].second;
    double ccaa0 = params_[31].second;
    double ccaa1 = params_[32].second;
    double ccaa2 = params_[33].second;
    double ccaa3 = params_[34].second;
    double ccaa4 = params_[35].second;
    double cx0 = params_[36].second;
    double cx1 = params_[37].second;
    double cx2 = params_[38].second;
    double cx3 = params_[39].second;
    double cx4 = params_[40].second;

    //Functional
    for (int index = 0; index < ntrue; index++) {

        //Functional Value
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t159599 = 1.0/pow(rho_a[index],1.0/3.0);
            double t159600 = c*t159599;
            double t159601 = sqrt(t159600);
            double t159602 = pow(t159600,3.0/2.0);
            double t159603 = c*c;
            double t159604 = 1.0/pow(rho_a[index],2.0/3.0);
            double t159605 = 1.0/c0p;
            double t159606 = b1p*t159601;
            double t159607 = b3p*t159602;
            double t159608 = b4p*t159603*t159604;
            double t159609 = b2p*c*t159599;
            double t159610 = t159606+t159607+t159608+t159609;
            double t159611 = 1.0/t159610;
            double t159612 = t159611*t159605*(1.0/2.0);
            double t159613 = t159612+1.0;
            double t159614 = log(t159613);
            double t159615 = a1p*c*t159599;
            double t159616 = t159615+1.0;
            double t159617 = pow(2.0,1.0/3.0);
            double t159618 = t159617*2.0;
            double t159619 = t159618-2.0;
            double t159620 = two_13*2.0;
            double t159621 = t159620-2.0;
            double t159622 = 1.0/t159621;
            double t159623 = 1.0/c0f;
            double t159624 = 1.0/pow(rho_b[index],1.0/3.0);
            double t159625 = c*t159624;
            double t159626 = sqrt(t159625);
            double t159627 = pow(t159625,3.0/2.0);
            double t159628 = 1.0/pow(rho_b[index],2.0/3.0);
            double t159629 = b1p*t159626;
            double t159630 = b3p*t159627;
            double t159631 = b4p*t159603*t159628;
            double t159632 = b2p*c*t159624;
            double t159633 = t159630+t159631+t159632+t159629;
            double t159634 = 1.0/t159633;
            double t159635 = t159605*t159634*(1.0/2.0);
            double t159636 = t159635+1.0;
            double t159637 = log(t159636);
            double t159638 = a1p*c*t159624;
            double t159639 = t159638+1.0;
            double t159640 = c0p*t159637*t159639*2.0;
            double t159641 = rho_a[index]+rho_b[index];
            double t159642 = 1.0/pow(t159641,1.0/3.0);
            double t159643 = c*t159642;
            double t159644 = sqrt(t159643);
            double t159645 = pow(t159643,3.0/2.0);
            double t159646 = 1.0/pow(t159641,2.0/3.0);
            double t159647 = b1p*t159644;
            double t159648 = b3p*t159645;
            double t159649 = b4p*t159603*t159646;
            double t159650 = b2p*c*t159642;
            double t159651 = t159650+t159647+t159648+t159649;
            double t159652 = 1.0/t159651;
            double t159653 = t159605*t159652*(1.0/2.0);
            double t159654 = t159653+1.0;
            double t159655 = log(t159654);
            double t159656 = a1p*c*t159642;
            double t159657 = t159656+1.0;
            double t159658 = c0p*t159655*t159657*2.0;
            double t159659 = rho_a[index]-rho_b[index];
            double t159660 = t159659*t159659;
            double t159661 = 1.0/t159641;
            double t159662 = t159661*t159659;
            double t159663 = 1.0/(t159641*t159641*t159641*t159641);
            double t159664 = t159660*t159660;
            double t159665 = t159662+1.0;
            double t159666 = pow(t159665,4.0/3.0);
            double t159667 = -t159662+1.0;
            double t159668 = pow(t159667,4.0/3.0);
            double t159669 = t159666+t159668-2.0;
            double t159672 = 1.0/pow(rho_a[index],8.0/3.0);
            double t159673 = gamma_aa[index]*t159672*(1.0/2.0);
            double t159674 = 1.0/pow(rho_b[index],8.0/3.0);
            double t159675 = gamma_bb[index]*t159674*(1.0/2.0);
            double t159670 = t159673+t159675;
            double t159671 = gcab*gcab;
            double t159676 = t159670*t159670;
            double t159677 = t159671*t159671;
            double t159678 = t159676*t159676;
            double t159679 = c0p*t159614*t159616*2.0;
            double t159680 = b1f*t159601;
            double t159681 = b3f*t159602;
            double t159682 = b4f*t159603*t159604;
            double t159683 = b2f*c*t159599;
            double t159684 = t159680+t159681+t159682+t159683;
            double t159685 = 1.0/t159684;
            double t159686 = t159623*t159685*(1.0/2.0);
            double t159687 = t159686+1.0;
            double t159688 = log(t159687);
            double t159689 = a1f*c*t159599;
            double t159690 = t159689+1.0;
            double t159691 = t159679-c0f*t159690*t159688*2.0;
            double t159692 = t159679-t159622*t159619*t159691;
            double t159693 = gamma_aa[index]*gamma_aa[index];
            double t159694 = gcaa*gcaa;
            double t159695 = t159693*t159693;
            double t159696 = t159694*t159694;
            double t159697 = 1.0/pow(rho_a[index],3.2E1/3.0);
            double t159698 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]);
            double t159699 = 1.0/pow(rho_a[index],1.6E1/3.0);
            double t159700 = b1f*t159626;
            double t159701 = b3f*t159627;
            double t159702 = b4f*t159603*t159628;
            double t159703 = b2f*c*t159624;
            double t159704 = t159700+t159701+t159702+t159703;
            double t159705 = 1.0/t159704;
            double t159706 = t159623*t159705*(1.0/2.0);
            double t159707 = t159706+1.0;
            double t159708 = log(t159707);
            double t159709 = a1f*c*t159624;
            double t159710 = t159709+1.0;
            double t159711 = t159640-c0f*t159710*t159708*2.0;
            double t159712 = t159640-t159711*t159622*t159619;
            double t159713 = gamma_bb[index]*gamma_bb[index];
            double t159714 = t159713*t159713;
            double t159715 = 1.0/pow(rho_b[index],3.2E1/3.0);
            double t159716 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
               rho_b[index]*rho_b[index]);
            double t159717 = 1.0/pow(rho_b[index],1.6E1/3.0);
            double t159718 = rho_a[index]*(8.334140006820045E15/1.40737488355328E14);
            double t159719 = 1.0/pow(t159718,1.0/3.0);
            double t159720 = 1.0/(omega*omega);
            double t159721 = pow(t159718,2.0/3.0);
            double t159722 = exp(-t159720*t159721);
            double t159723 = gx*gx;
            double t159724 = t159723*t159723;
            double t159725 = 1.0/omega;
            double t159726 = rho_b[index]*(8.334140006820045E15/1.40737488355328E14);
            double t159727 = 1.0/pow(t159726,1.0/3.0);
            double t159728 = omega*omega;
            double t159729 = pow(t159726,2.0/3.0);
            double t159730 = exp(-t159720*t159729);
            functional_[index] = (rho_b[index]*t159712+rho_a[index]*t159692-t159641*(t159658-t159622*t159663* \
               t159664*t159669*(t159658-c0f*log((t159623*(1.0/2.0))/(b1f*t159644+b3f*t159645+b2f*c*t159642+b4f*t159603* \
               t159646)+1.0)*(a1f*c*t159642+1.0)*2.0)+(Aa*t159622*t159669*log((1.0/2.0)/(Aa*(b1a*t159644+b3a*t159645+ \
               b2a*c*t159642+b4a*t159603*t159646))+1.0)*(t159663*t159664-1.0)*(a1a*c*t159642+1.0)*2.0)/d2fz0))*(ccab0+ \
               (ccab4*t159677*t159678)/(gcab*t159670*4.0+t159671*t159676*6.0+t159677*t159678+gcab*t159670*t159671* \
               t159676*4.0+1.0)+(ccab1*gcab*t159670)/(gcab*t159670+1.0)+(ccab2*t159671*t159676)/(gcab*t159670*2.0+ \
               t159671*t159676+1.0)+(ccab3*gcab*t159670*t159671*t159676)/(gcab*t159670*3.0+t159671*t159676*3.0+gcab* \
               t159670*t159671*t159676+1.0))-rho_b[index]*t159712*(ccaa0+(ccaa2*t159713*t159717*t159694)/(gamma_bb[index]* \
               gcaa*t159674*2.0+t159713*t159717*t159694+1.0)+(ccaa1*gamma_bb[index]*gcaa*t159674)/(gamma_bb[index]* \
               gcaa*t159674+1.0)+(ccaa4*t159714*t159715*t159696)/(gamma_bb[index]*gcaa*t159674*4.0+t159713*t159717* \
               t159694*6.0+t159714*t159715*t159696+gamma_bb[index]*gcaa*t159713*t159716*t159694*4.0+1.0)+(ccaa3*gamma_bb[index]* \
               gcaa*t159713*t159716*t159694)/(gamma_bb[index]*gcaa*t159674*3.0+t159713*t159717*t159694*3.0+gamma_bb[index]* \
               gcaa*t159713*t159716*t159694+1.0))-rho_a[index]*t159692*(ccaa0+(ccaa2*t159693*t159694*t159699)/(gamma_aa[index]* \
               gcaa*t159672*2.0+t159693*t159694*t159699+1.0)+(ccaa1*gamma_aa[index]*gcaa*t159672)/(gamma_aa[index]* \
               gcaa*t159672+1.0)+(ccaa4*t159695*t159696*t159697)/(gamma_aa[index]*gcaa*t159672*4.0+t159693*t159694* \
               t159699*6.0+t159695*t159696*t159697+gamma_aa[index]*gcaa*t159693*t159694*t159698*4.0+1.0)+(ccaa3*gamma_aa[index]* \
               gcaa*t159693*t159694*t159698)/(gamma_aa[index]*gcaa*t159672*3.0+t159693*t159694*t159699*3.0+gamma_aa[index]* \
               gcaa*t159693*t159694*t159698+1.0))-c0*pow(rho_b[index],4.0/3.0)*(omega*t159727*(erf(t159725*pow(t159726,1.0/ \
               3.0))*(3.991211251234741E15/2.251799813685248E15)-omega*t159727*(-t159730+1.0/pow(t159726,2.0/3.0) \
               *t159728*(t159730-1.0)*(1.0/2.0)+3.0/2.0))*(4.0/3.0)-1.0)*(cx0+(cx2*t159713*t159723*t159717)/(gamma_bb[index]* \
               gx*t159674*2.0+t159713*t159723*t159717+1.0)+(cx1*gamma_bb[index]*gx*t159674)/(gamma_bb[index]*gx*t159674+ \
               1.0)+(cx4*t159714*t159715*t159724)/(gamma_bb[index]*gx*t159674*4.0+t159713*t159723*t159717*6.0+t159714* \
               t159715*t159724+gamma_bb[index]*gx*t159713*t159723*t159716*4.0+1.0)+(cx3*gamma_bb[index]*gx*t159713* \
               t159723*t159716)/(gamma_bb[index]*gx*t159674*3.0+t159713*t159723*t159717*3.0+gamma_bb[index]*gx*t159713* \
               t159723*t159716+1.0))-c0*pow(rho_a[index],4.0/3.0)*(omega*t159719*(erf(t159725*pow(t159718,1.0/3.0) \
               )*(3.991211251234741E15/2.251799813685248E15)-omega*t159719*(-t159722+1.0/pow(t159718,2.0/3.0)*t159728* \
               (t159722-1.0)*(1.0/2.0)+3.0/2.0))*(4.0/3.0)-1.0)*(cx0+(cx2*t159723*t159693*t159699)/(gamma_aa[index]* \
               gx*t159672*2.0+t159723*t159693*t159699+1.0)+(cx1*gamma_aa[index]*gx*t159672)/(gamma_aa[index]*gx*t159672+ \
               1.0)+(cx4*t159724*t159695*t159697)/(gamma_aa[index]*gx*t159672*4.0+t159723*t159693*t159699*6.0+t159724* \
               t159695*t159697+gamma_aa[index]*gx*t159723*t159693*t159698*4.0+1.0)+(cx3*gamma_aa[index]*gx*t159723* \
               t159693*t159698)/(gamma_aa[index]*gx*t159672*3.0+t159723*t159693*t159699*3.0+gamma_aa[index]*gx*t159723* \
               t159693*t159698+1.0));
        } else if (rho_a[index] > cutoff_) {
            double t164098 = 1.0/pow(rho_a[index],1.0/3.0);
            double t164099 = c*t164098;
            double t164100 = sqrt(t164099);
            double t164101 = pow(t164099,3.0/2.0);
            double t164102 = c*c;
            double t164103 = 1.0/pow(rho_a[index],2.0/3.0);
            double t164104 = 1.0/c0p;
            double t164105 = b1p*t164100;
            double t164106 = b3p*t164101;
            double t164107 = b4p*t164102*t164103;
            double t164108 = b2p*c*t164098;
            double t164109 = t164105+t164106+t164107+t164108;
            double t164110 = 1.0/t164109;
            double t164111 = t164110*t164104*(1.0/2.0);
            double t164112 = t164111+1.0;
            double t164113 = log(t164112);
            double t164114 = a1p*c*t164098;
            double t164115 = t164114+1.0;
            double t164116 = gamma_aa[index]*gamma_aa[index];
            double t164117 = gcaa*gcaa;
            double t164118 = t164116*t164116;
            double t164119 = t164117*t164117;
            double t164120 = 1.0/pow(rho_a[index],3.2E1/3.0);
            double t164121 = 1.0/pow(rho_a[index],8.0/3.0);
            double t164122 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]);
            double t164123 = 1.0/pow(rho_a[index],1.6E1/3.0);
            double t164124 = rho_a[index]*(8.334140006820045E15/1.40737488355328E14);
            double t164125 = 1.0/pow(t164124,1.0/3.0);
            double t164126 = 1.0/(omega*omega);
            double t164127 = pow(t164124,2.0/3.0);
            double t164128 = exp(-t164126*t164127);
            double t164129 = gx*gx;
            double t164130 = t164129*t164129;
            functional_[index] = -rho_a[index]*(((pow(2.0,1.0/3.0)*2.0-2.0)*(c0f*log((1.0/2.0)/(c0f*(b1f*t164100+ \
               b3f*t164101+b2f*c*t164098+b4f*t164102*t164103))+1.0)*(a1f*c*t164098+1.0)*2.0-c0p*t164113*t164115*2.0) \
               )/(two_13*2.0-2.0)+c0p*t164113*t164115*2.0)*(ccaa0+(ccaa2*t164123*t164116*t164117)/(gamma_aa[index]* \
               gcaa*t164121*2.0+t164123*t164116*t164117+1.0)+(ccaa1*gamma_aa[index]*gcaa*t164121)/(gamma_aa[index]* \
               gcaa*t164121+1.0)+(ccaa4*t164120*t164118*t164119)/(gamma_aa[index]*gcaa*t164121*4.0+t164123*t164116* \
               t164117*6.0+t164120*t164118*t164119+gamma_aa[index]*gcaa*t164122*t164116*t164117*4.0+1.0)+(ccaa3*gamma_aa[index]* \
               gcaa*t164122*t164116*t164117)/(gamma_aa[index]*gcaa*t164121*3.0+t164123*t164116*t164117*3.0+gamma_aa[index]* \
               gcaa*t164122*t164116*t164117+1.0))-c0*pow(rho_a[index],4.0/3.0)*(omega*t164125*(erf(pow(t164124,1.0/ \
               3.0)/omega)*(3.991211251234741E15/2.251799813685248E15)-omega*t164125*(-t164128+(omega*omega)*1.0/ \
               pow(t164124,2.0/3.0)*(t164128-1.0)*(1.0/2.0)+3.0/2.0))*(4.0/3.0)-1.0)*(cx0+(cx2*t164123*t164116*t164129) \
               /(gamma_aa[index]*gx*t164121*2.0+t164123*t164116*t164129+1.0)+(cx1*gamma_aa[index]*gx*t164121)/(gamma_aa[index]* \
               gx*t164121+1.0)+(cx4*t164120*t164130*t164118)/(gamma_aa[index]*gx*t164121*4.0+t164120*t164130*t164118+ \
               t164123*t164116*t164129*6.0+gamma_aa[index]*gx*t164122*t164116*t164129*4.0+1.0)+(cx3*gamma_aa[index]* \
               gx*t164122*t164116*t164129)/(gamma_aa[index]*gx*t164121*3.0+t164123*t164116*t164129*3.0+gamma_aa[index]* \
               gx*t164122*t164116*t164129+1.0));
        } else if (rho_b[index] > cutoff_) {
            double t163343 = 1.0/pow(rho_b[index],1.0/3.0);
            double t163344 = c*t163343;
            double t163345 = sqrt(t163344);
            double t163346 = pow(t163344,3.0/2.0);
            double t163347 = c*c;
            double t163348 = 1.0/pow(rho_b[index],2.0/3.0);
            double t163349 = 1.0/c0p;
            double t163350 = b1p*t163345;
            double t163351 = b3p*t163346;
            double t163352 = b4p*t163347*t163348;
            double t163353 = b2p*c*t163343;
            double t163354 = t163350+t163351+t163352+t163353;
            double t163355 = 1.0/t163354;
            double t163356 = t163355*t163349*(1.0/2.0);
            double t163357 = t163356+1.0;
            double t163358 = log(t163357);
            double t163359 = a1p*c*t163343;
            double t163360 = t163359+1.0;
            double t163361 = gamma_bb[index]*gamma_bb[index];
            double t163362 = gcaa*gcaa;
            double t163363 = t163361*t163361;
            double t163364 = t163362*t163362;
            double t163365 = 1.0/pow(rho_b[index],3.2E1/3.0);
            double t163366 = 1.0/pow(rho_b[index],8.0/3.0);
            double t163367 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
               rho_b[index]*rho_b[index]);
            double t163368 = 1.0/pow(rho_b[index],1.6E1/3.0);
            double t163369 = rho_b[index]*(8.334140006820045E15/1.40737488355328E14);
            double t163370 = 1.0/pow(t163369,1.0/3.0);
            double t163371 = 1.0/(omega*omega);
            double t163372 = pow(t163369,2.0/3.0);
            double t163373 = exp(-t163371*t163372);
            double t163374 = gx*gx;
            double t163375 = t163374*t163374;
            functional_[index] = -rho_b[index]*(((pow(2.0,1.0/3.0)*2.0-2.0)*(c0f*log((1.0/2.0)/(c0f*(b1f*t163345+ \
               b3f*t163346+b2f*c*t163343+b4f*t163347*t163348))+1.0)*(a1f*c*t163343+1.0)*2.0-c0p*t163360*t163358*2.0) \
               )/(two_13*2.0-2.0)+c0p*t163360*t163358*2.0)*(ccaa0+(ccaa2*t163361*t163362*t163368)/(gamma_bb[index]* \
               gcaa*t163366*2.0+t163361*t163362*t163368+1.0)+(ccaa1*gamma_bb[index]*gcaa*t163366)/(gamma_bb[index]* \
               gcaa*t163366+1.0)+(ccaa4*t163363*t163364*t163365)/(gamma_bb[index]*gcaa*t163366*4.0+t163361*t163362* \
               t163368*6.0+t163363*t163364*t163365+gamma_bb[index]*gcaa*t163361*t163362*t163367*4.0+1.0)+(ccaa3*gamma_bb[index]* \
               gcaa*t163361*t163362*t163367)/(gamma_bb[index]*gcaa*t163366*3.0+t163361*t163362*t163368*3.0+gamma_bb[index]* \
               gcaa*t163361*t163362*t163367+1.0))-c0*pow(rho_b[index],4.0/3.0)*(omega*t163370*(erf(pow(t163369,1.0/ \
               3.0)/omega)*(3.991211251234741E15/2.251799813685248E15)-omega*t163370*(-t163373+(omega*omega)*1.0/ \
               pow(t163369,2.0/3.0)*(t163373-1.0)*(1.0/2.0)+3.0/2.0))*(4.0/3.0)-1.0)*(cx0+(cx2*t163361*t163374*t163368) \
               /(gamma_bb[index]*gx*t163366*2.0+t163361*t163374*t163368+1.0)+(cx1*gamma_bb[index]*gx*t163366)/(gamma_bb[index]* \
               gx*t163366+1.0)+(cx4*t163363*t163365*t163375)/(gamma_bb[index]*gx*t163366*4.0+t163361*t163374*t163368* \
               6.0+t163363*t163365*t163375+gamma_bb[index]*gx*t163361*t163374*t163367*4.0+1.0)+(cx3*gamma_bb[index]* \
               gx*t163361*t163374*t163367)/(gamma_bb[index]*gx*t163366*3.0+t163361*t163374*t163368*3.0+gamma_bb[index]* \
               gx*t163361*t163374*t163367+1.0));
        } else {
            functional_[index] = 0.0;
        } 

    }
    //First Partials
    for (int index = 0; index < ntrue && deriv_ >= 1; index++) {

        //V_rho_a
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t159732 = 1.0/pow(rho_a[index],1.0/3.0);
            double t159733 = c*t159732;
            double t159734 = sqrt(t159733);
            double t159735 = pow(t159733,3.0/2.0);
            double t159736 = c*c;
            double t159737 = 1.0/pow(rho_a[index],2.0/3.0);
            double t159738 = 1.0/c0p;
            double t159739 = b1p*t159734;
            double t159740 = b3p*t159735;
            double t159741 = b4p*t159736*t159737;
            double t159742 = b2p*c*t159732;
            double t159743 = t159740+t159741+t159742+t159739;
            double t159744 = 1.0/t159743;
            double t159745 = t159744*t159738*(1.0/2.0);
            double t159746 = t159745+1.0;
            double t159747 = log(t159746);
            double t159748 = a1p*c*t159732;
            double t159749 = t159748+1.0;
            double t159750 = gamma_aa[index]*gamma_aa[index];
            double t159751 = gcaa*gcaa;
            double t159752 = t159750*t159750;
            double t159753 = t159751*t159751;
            double t159754 = 1.0/pow(rho_a[index],3.2E1/3.0);
            double t159755 = 1.0/pow(rho_a[index],8.0/3.0);
            double t159756 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]);
            double t159757 = 1.0/pow(rho_a[index],1.6E1/3.0);
            double t159758 = pow(2.0,1.0/3.0);
            double t159759 = t159758*2.0;
            double t159760 = t159759-2.0;
            double t159761 = two_13*2.0;
            double t159762 = t159761-2.0;
            double t159763 = 1.0/t159762;
            double t159764 = 1.0/c0f;
            double t159765 = b1f*t159734;
            double t159766 = b3f*t159735;
            double t159767 = b4f*t159736*t159737;
            double t159768 = b2f*c*t159732;
            double t159769 = t159765+t159766+t159767+t159768;
            double t159770 = 1.0/t159769;
            double t159771 = t159770*t159764*(1.0/2.0);
            double t159772 = t159771+1.0;
            double t159773 = log(t159772);
            double t159774 = a1f*c*t159732;
            double t159775 = t159774+1.0;
            double t159776 = c0f*t159773*t159775*2.0;
            double t159777 = c0p*t159747*t159749*2.0;
            double t159778 = 1.0/pow(rho_b[index],1.0/3.0);
            double t159779 = c*t159778;
            double t159780 = sqrt(t159779);
            double t159781 = pow(t159779,3.0/2.0);
            double t159782 = 1.0/pow(rho_b[index],2.0/3.0);
            double t159783 = b1p*t159780;
            double t159784 = b3p*t159781;
            double t159785 = b4p*t159736*t159782;
            double t159786 = b2p*c*t159778;
            double t159787 = t159783+t159784+t159785+t159786;
            double t159788 = 1.0/t159787;
            double t159789 = t159738*t159788*(1.0/2.0);
            double t159790 = t159789+1.0;
            double t159791 = log(t159790);
            double t159792 = a1p*c*t159778;
            double t159793 = t159792+1.0;
            double t159794 = c0p*t159791*t159793*2.0;
            double t159795 = rho_a[index]+rho_b[index];
            double t159796 = 1.0/pow(t159795,1.0/3.0);
            double t159797 = c*t159796;
            double t159798 = sqrt(t159797);
            double t159799 = pow(t159797,3.0/2.0);
            double t159800 = 1.0/pow(t159795,2.0/3.0);
            double t159801 = b1p*t159798;
            double t159802 = b3p*t159799;
            double t159803 = b4p*t159800*t159736;
            double t159804 = b2p*c*t159796;
            double t159805 = t159801+t159802+t159803+t159804;
            double t159806 = 1.0/t159805;
            double t159807 = t159806*t159738*(1.0/2.0);
            double t159808 = t159807+1.0;
            double t159809 = log(t159808);
            double t159810 = a1p*c*t159796;
            double t159811 = t159810+1.0;
            double t159812 = c0p*t159811*t159809*2.0;
            double t159813 = rho_a[index]-rho_b[index];
            double t159814 = t159813*t159813;
            double t159815 = 1.0/t159795;
            double t159816 = t159813*t159815;
            double t159817 = 1.0/(t159795*t159795*t159795*t159795);
            double t159818 = t159814*t159814;
            double t159819 = t159816+1.0;
            double t159820 = pow(t159819,4.0/3.0);
            double t159821 = -t159816+1.0;
            double t159822 = pow(t159821,4.0/3.0);
            double t159823 = t159820+t159822-2.0;
            double t159824 = gcab*gcab;
            double t159828 = gamma_aa[index]*t159755*(1.0/2.0);
            double t159829 = 1.0/pow(rho_b[index],8.0/3.0);
            double t159830 = gamma_bb[index]*t159829*(1.0/2.0);
            double t159825 = t159830+t159828;
            double t159826 = t159825*t159825;
            double t159827 = 1.0/pow(rho_a[index],1.1E1/3.0);
            double t159831 = t159824*t159824;
            double t159832 = t159826*t159826;
            double t159833 = t159824*t159826*6.0;
            double t159834 = gcab*t159824*t159825*t159826*4.0;
            double t159835 = t159831*t159832;
            double t159836 = gcab*t159825*4.0;
            double t159837 = t159833+t159834+t159835+t159836+1.0;
            double t159838 = gcab*t159825;
            double t159839 = t159838+1.0;
            double t159840 = t159824*t159826;
            double t159841 = gcab*t159825*2.0;
            double t159842 = t159840+t159841+1.0;
            double t159843 = t159824*t159826*3.0;
            double t159844 = gcab*t159824*t159825*t159826;
            double t159845 = gcab*t159825*3.0;
            double t159846 = t159843+t159844+t159845+1.0;
            double t159847 = 1.0/t159842;
            double t159848 = 1.0/t159846;
            double t159849 = 1.0/t159839;
            double t159850 = 1.0/t159837;
            double t159851 = 1.0/pow(t159795,4.0/3.0);
            double t159852 = b1f*t159798;
            double t159853 = b3f*t159799;
            double t159854 = b4f*t159800*t159736;
            double t159855 = b2f*c*t159796;
            double t159856 = t159852+t159853+t159854+t159855;
            double t159857 = 1.0/t159856;
            double t159858 = t159764*t159857*(1.0/2.0);
            double t159859 = t159858+1.0;
            double t159860 = log(t159859);
            double t159861 = a1f*c*t159796;
            double t159862 = t159861+1.0;
            double t159864 = c0f*t159860*t159862*2.0;
            double t159863 = t159812-t159864;
            double t159865 = 1.0/(t159795*t159795);
            double t159892 = t159813*t159865;
            double t159866 = t159815-t159892;
            double t159867 = 1.0/pow(t159795,5.0/3.0);
            double t159868 = 1.0/sqrt(t159797);
            double t159869 = 1.0/t159808;
            double t159870 = 1.0/(t159805*t159805);
            double t159871 = b4p*t159736*t159867*(2.0/3.0);
            double t159872 = b2p*c*t159851*(1.0/3.0);
            double t159873 = b1p*c*t159851*t159868*(1.0/6.0);
            double t159874 = b3p*c*t159851*t159798*(1.0/2.0);
            double t159875 = t159871+t159872+t159873+t159874;
            double t159876 = t159811*t159870*t159875*t159869;
            double t159877 = 1.0/d2fz0;
            double t159878 = 1.0/Aa;
            double t159879 = b1a*t159798;
            double t159880 = b3a*t159799;
            double t159881 = b4a*t159800*t159736;
            double t159882 = b2a*c*t159796;
            double t159883 = t159880+t159881+t159882+t159879;
            double t159884 = 1.0/t159883;
            double t159885 = t159884*t159878*(1.0/2.0);
            double t159886 = t159885+1.0;
            double t159887 = log(t159886);
            double t159888 = a1a*c*t159796;
            double t159889 = t159888+1.0;
            double t159890 = 1.0/(t159795*t159795*t159795*t159795*t159795);
            double t159891 = pow(t159819,1.0/3.0);
            double t159893 = t159891*t159866*(4.0/3.0);
            double t159894 = pow(t159821,1.0/3.0);
            double t159895 = t159893-t159866*t159894*(4.0/3.0);
            double t159896 = t159817*t159818;
            double t159897 = t159896-1.0;
            double t159898 = 1.0/pow(rho_a[index],4.0/3.0);
            double t159899 = 1.0/pow(rho_a[index],5.0/3.0);
            double t159900 = 1.0/sqrt(t159733);
            double t159901 = 1.0/t159746;
            double t159902 = 1.0/(t159743*t159743);
            double t159903 = b4p*t159736*t159899*(2.0/3.0);
            double t159904 = b2p*c*t159898*(1.0/3.0);
            double t159905 = b1p*c*t159900*t159898*(1.0/6.0);
            double t159906 = b3p*c*t159734*t159898*(1.0/2.0);
            double t159907 = t159903+t159904+t159905+t159906;
            double t159908 = t159901*t159902*t159907*t159749;
            double t159909 = t159776-t159777;
            double t159910 = t159760*t159763*t159909;
            double t159911 = Aa*t159823*t159763*t159877*t159887*t159897*t159889*2.0;
            double t159912 = t159910+t159777;
            double t159913 = gamma_aa[index]*gcaa*t159755*4.0;
            double t159914 = gamma_aa[index]*gcaa*t159750*t159751*t159756*4.0;
            double t159915 = t159750*t159751*t159757*6.0;
            double t159916 = t159752*t159753*t159754;
            double t159917 = t159913+t159914+t159915+t159916+1.0;
            double t159918 = 1.0/t159917;
            double t159919 = gamma_aa[index]*gcaa*t159755;
            double t159920 = t159919+1.0;
            double t159921 = 1.0/t159920;
            double t159922 = gamma_aa[index]*gcaa*t159755*3.0;
            double t159923 = gamma_aa[index]*gcaa*t159750*t159751*t159756;
            double t159924 = t159750*t159751*t159757*3.0;
            double t159925 = t159922+t159923+t159924+1.0;
            double t159926 = 1.0/t159925;
            double t159927 = gamma_aa[index]*gcaa*t159755*2.0;
            double t159928 = t159750*t159751*t159757;
            double t159929 = t159927+t159928+1.0;
            double t159930 = 1.0/t159929;
            double t159931 = 1.0/pow(rho_a[index],1.9E1/3.0);
            double t159932 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]*rho_a[index]);
            double t159933 = 1.0/pow(rho_a[index],3.5E1/3.0);
            double t159934 = 1.0/t159772;
            double t159935 = 1.0/(t159769*t159769);
            double t159936 = b4f*t159736*t159899*(2.0/3.0);
            double t159937 = b2f*c*t159898*(1.0/3.0);
            double t159938 = b1f*c*t159900*t159898*(1.0/6.0);
            double t159939 = b3f*c*t159734*t159898*(1.0/2.0);
            double t159940 = t159936+t159937+t159938+t159939;
            double t159941 = a1f*c*c0f*t159773*t159898*(2.0/3.0);
            double t159942 = a1p*c*c0p*t159747*t159898*(2.0/3.0);
            double t159943 = ccaa4*t159752*t159753*t159754*t159918;
            double t159944 = ccaa1*gamma_aa[index]*gcaa*t159921*t159755;
            double t159945 = ccaa3*gamma_aa[index]*gcaa*t159750*t159751*t159926*t159756;
            double t159946 = ccaa2*t159750*t159930*t159751*t159757;
            double t159947 = ccaa0+t159943+t159944+t159945+t159946;
            double t159948 = rho_a[index]*(8.334140006820045E15/1.40737488355328E14);
            double t159949 = 1.0/(omega*omega);
            double t159950 = pow(t159948,2.0/3.0);
            double t159953 = t159950*t159949;
            double t159951 = exp(-t159953);
            double t159952 = 1.0/pow(t159948,1.0/3.0);
            double t159954 = omega*omega;
            double t159955 = t159951-1.0;
            double t159956 = 1.0/pow(t159948,2.0/3.0);
            double t159957 = 1.0/pow(t159948,4.0/3.0);
            double t159958 = 1.0/omega;
            double t159959 = t159954*t159955*t159956*(1.0/2.0);
            double t159960 = -t159951+t159959+3.0/2.0;
            double t159961 = gx*gx;
            double t159962 = t159961*t159961;
            double t159963 = pow(rho_a[index],4.0/3.0);
            double t159964 = pow(t159948,1.0/3.0);
            double t159965 = t159964*t159958;
            double t159966 = erf(t159965);
            double t159967 = t159966*(3.991211251234741E15/2.251799813685248E15);
            double t159987 = omega*t159960*t159952;
            double t159968 = t159967-t159987;
            double t159969 = gamma_aa[index]*gx*t159755*4.0;
            double t159970 = gamma_aa[index]*gx*t159750*t159961*t159756*4.0;
            double t159971 = t159750*t159961*t159757*6.0;
            double t159972 = t159752*t159754*t159962;
            double t159973 = t159970+t159971+t159972+t159969+1.0;
            double t159974 = 1.0/t159973;
            double t159975 = gamma_aa[index]*gx*t159755;
            double t159976 = t159975+1.0;
            double t159977 = 1.0/t159976;
            double t159978 = gamma_aa[index]*gx*t159755*3.0;
            double t159979 = gamma_aa[index]*gx*t159750*t159961*t159756;
            double t159980 = t159750*t159961*t159757*3.0;
            double t159981 = t159980+t159978+t159979+1.0;
            double t159982 = 1.0/t159981;
            double t159983 = gamma_aa[index]*gx*t159755*2.0;
            double t159984 = t159750*t159961*t159757;
            double t159985 = t159983+t159984+1.0;
            double t159986 = 1.0/t159985;
            double t159988 = omega*t159952*t159968*(4.0/3.0);
            double t159989 = t159988-1.0;
            double t159990 = cx4*t159752*t159754*t159962*t159974;
            double t159991 = cx1*gamma_aa[index]*gx*t159755*t159977;
            double t159992 = cx3*gamma_aa[index]*gx*t159750*t159961*t159756*t159982;
            double t159993 = cx2*t159750*t159961*t159757*t159986;
            double t159994 = cx0+t159990+t159991+t159992+t159993;
            v_rho_a_[index] = (ccab0+ccab1*gcab*t159825*t159849+ccab4*t159831*t159832*t159850+ccab2*t159824*t159826* \
               t159847+ccab3*gcab*t159824*t159825*t159826*t159848)*(t159910-t159812-t159911+t159777-rho_a[index]* \
               (t159942-t159908+t159760*t159763*(t159941+t159908-t159940*t159934*t159935*t159775-a1p*c*c0p*t159747* \
               t159898*(2.0/3.0)))+t159795*(-t159876+t159823*t159763*t159817*t159818*(t159876-(t159862*1.0/(t159856* \
               t159856)*(b2f*c*t159851*(1.0/3.0)+b4f*t159736*t159867*(2.0/3.0)+b1f*c*t159851*t159868*(1.0/6.0)+b3f* \
               c*t159851*t159798*(1.0/2.0)))/t159859+a1f*c*c0f*t159851*t159860*(2.0/3.0)-a1p*c*c0p*t159851*t159809* \
               (2.0/3.0))+a1p*c*c0p*t159851*t159809*(2.0/3.0)-t159823*t159763*t159818*t159863*t159890*4.0+t159763* \
               t159817*t159818*t159863*t159895+t159813*t159814*t159823*t159763*t159817*t159863*4.0+Aa*t159823*t159763* \
               t159877*t159887*t159889*(t159818*t159890*4.0-t159813*t159814*t159817*4.0)*2.0-Aa*t159763*t159877*t159895* \
               t159887*t159897*t159889*2.0-(t159823*t159763*1.0/(t159883*t159883)*t159877*t159897*t159889*(b2a*c* \
               t159851*(1.0/3.0)+b4a*t159736*t159867*(2.0/3.0)+b1a*c*t159851*t159868*(1.0/6.0)+b3a*c*t159851*t159798* \
               (1.0/2.0)))/t159886+Aa*a1a*c*t159823*t159851*t159763*t159877*t159887*t159897*(2.0/3.0))+t159823*t159763* \
               t159817*t159818*t159863)-t159947*(t159777+t159760*t159763*(t159776-c0p*t159747*t159749*2.0))-(rho_a[index]* \
               t159912+rho_b[index]*(t159794-t159760*t159763*(t159794-c0f*log((t159764*(1.0/2.0))/(b1f*t159780+b3f* \
               t159781+b2f*c*t159778+b4f*t159736*t159782)+1.0)*(a1f*c*t159778+1.0)*2.0))-t159795*(t159812+t159911- \
               t159823*t159763*t159817*t159818*t159863))*(ccab1*gamma_aa[index]*gcab*t159827*t159849*(4.0/3.0)-ccab2* \
               t159824*1.0/(t159842*t159842)*t159826*(gamma_aa[index]*gcab*t159827*(8.0/3.0)+gamma_aa[index]*t159824* \
               t159825*t159827*(8.0/3.0))-ccab4*t159831*t159832*1.0/(t159837*t159837)*(gamma_aa[index]*gcab*t159827* \
               (1.6E1/3.0)+gamma_aa[index]*t159824*t159825*t159827*1.6E1+gamma_aa[index]*gcab*t159824*t159826*t159827* \
               1.6E1+gamma_aa[index]*t159831*t159825*t159826*t159827*(1.6E1/3.0))-ccab1*gamma_aa[index]*t159824*t159825* \
               t159827*1.0/(t159839*t159839)*(4.0/3.0)+ccab2*gamma_aa[index]*t159824*t159825*t159827*t159847*(8.0/ \
               3.0)-ccab3*gcab*t159824*t159825*t159826*1.0/(t159846*t159846)*(gamma_aa[index]*gcab*t159827*4.0+gamma_aa[index]* \
               t159824*t159825*t159827*8.0+gamma_aa[index]*gcab*t159824*t159826*t159827*4.0)+ccab3*gamma_aa[index]* \
               gcab*t159824*t159826*t159827*t159848*4.0+ccab4*gamma_aa[index]*t159831*t159850*t159825*t159826*t159827* \
               (1.6E1/3.0))+rho_a[index]*t159912*(ccaa1*gamma_aa[index]*gcaa*t159921*t159827*(8.0/3.0)+ccaa2*t159750* \
               t159930*t159751*t159931*(1.6E1/3.0)+ccaa4*t159752*t159753*t159933*t159918*(3.2E1/3.0)-ccaa1*1.0/(t159920* \
               t159920)*t159750*t159751*t159931*(8.0/3.0)-ccaa2*t159750*t159751*t159757*1.0/(t159929*t159929)*(gamma_aa[index]* \
               gcaa*t159827*(1.6E1/3.0)+t159750*t159751*t159931*(1.6E1/3.0))-ccaa4*t159752*t159753*t159754*1.0/(t159917* \
               t159917)*(gamma_aa[index]*gcaa*t159827*(3.2E1/3.0)+t159750*t159751*t159931*3.2E1+t159752*t159753*t159933* \
               (3.2E1/3.0)+gamma_aa[index]*gcaa*t159750*t159751*t159932*3.2E1)+ccaa3*gamma_aa[index]*gcaa*t159750* \
               t159751*t159932*t159926*8.0-ccaa3*gamma_aa[index]*gcaa*t159750*t159751*1.0/(t159925*t159925)*t159756* \
               (gamma_aa[index]*gcaa*t159827*8.0+t159750*t159751*t159931*1.6E1+gamma_aa[index]*gcaa*t159750*t159751* \
               t159932*8.0))+rho_a[index]*t159947*(t159942-t159908+t159760*t159763*(t159941-t159942+t159908-t159940* \
               t159934*t159935*t159775))-c0*t159963*t159994*(omega*t159952*(omega*t159960*t159957*(2.778046668940015E15/ \
               1.40737488355328E14)+omega*t159952*((t159951*(1.0/3.0))/rho_a[index]+t159954*t159955*1.0/pow(t159948,5.0/ \
               3.0)*(2.778046668940015E15/1.40737488355328E14)-t159951*t159952*t159949*(2.778046668940015E15/7.0368744177664E13) \
               )+1.0/sqrt(3.141592653589793)*t159951*t159956*t159958*(1.108777112152858E31/1.584563250285287E29)) \
               *(4.0/3.0)-omega*t159957*t159968*(2.778046668940015E15/1.05553116266496E14))-c0*pow(rho_a[index],1.0/ \
               3.0)*t159994*t159989*(4.0/3.0)+c0*t159963*t159989*(cx1*gamma_aa[index]*gx*t159827*t159977*(8.0/3.0) \
               +cx2*t159750*t159931*t159961*t159986*(1.6E1/3.0)+cx4*t159752*t159933*t159962*t159974*(3.2E1/3.0)-cx1* \
               t159750*t159931*t159961*1.0/(t159976*t159976)*(8.0/3.0)-cx2*t159750*t159961*t159757*1.0/(t159985*t159985) \
               *(gamma_aa[index]*gx*t159827*(1.6E1/3.0)+t159750*t159931*t159961*(1.6E1/3.0))-cx4*t159752*t159754* \
               t159962*1.0/(t159973*t159973)*(gamma_aa[index]*gx*t159827*(3.2E1/3.0)+t159750*t159931*t159961*3.2E1+ \
               t159752*t159933*t159962*(3.2E1/3.0)+gamma_aa[index]*gx*t159750*t159932*t159961*3.2E1)+cx3*gamma_aa[index]* \
               gx*t159750*t159932*t159961*t159982*8.0-cx3*gamma_aa[index]*gx*t159750*t159961*t159756*1.0/(t159981* \
               t159981)*(gamma_aa[index]*gx*t159827*8.0+t159750*t159931*t159961*1.6E1+gamma_aa[index]*gx*t159750* \
               t159932*t159961*8.0));
        } else if (rho_a[index] > cutoff_) {
            double t164132 = 1.0/pow(rho_a[index],1.0/3.0);
            double t164133 = c*t164132;
            double t164134 = sqrt(t164133);
            double t164135 = pow(t164133,3.0/2.0);
            double t164136 = c*c;
            double t164137 = 1.0/pow(rho_a[index],2.0/3.0);
            double t164138 = 1.0/c0p;
            double t164139 = b1p*t164134;
            double t164140 = b3p*t164135;
            double t164141 = b4p*t164136*t164137;
            double t164142 = b2p*c*t164132;
            double t164143 = t164140+t164141+t164142+t164139;
            double t164144 = 1.0/t164143;
            double t164145 = t164144*t164138*(1.0/2.0);
            double t164146 = t164145+1.0;
            double t164147 = log(t164146);
            double t164148 = a1p*c*t164132;
            double t164149 = t164148+1.0;
            double t164150 = gamma_aa[index]*gamma_aa[index];
            double t164151 = gcaa*gcaa;
            double t164152 = t164150*t164150;
            double t164153 = t164151*t164151;
            double t164154 = 1.0/pow(rho_a[index],3.2E1/3.0);
            double t164155 = 1.0/pow(rho_a[index],8.0/3.0);
            double t164156 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]);
            double t164157 = 1.0/pow(rho_a[index],1.6E1/3.0);
            double t164158 = pow(2.0,1.0/3.0);
            double t164159 = t164158*2.0;
            double t164160 = t164159-2.0;
            double t164161 = two_13*2.0;
            double t164162 = t164161-2.0;
            double t164163 = 1.0/t164162;
            double t164164 = 1.0/c0f;
            double t164165 = b1f*t164134;
            double t164166 = b3f*t164135;
            double t164167 = b4f*t164136*t164137;
            double t164168 = b2f*c*t164132;
            double t164169 = t164165+t164166+t164167+t164168;
            double t164170 = 1.0/t164169;
            double t164171 = t164170*t164164*(1.0/2.0);
            double t164172 = t164171+1.0;
            double t164173 = log(t164172);
            double t164174 = a1f*c*t164132;
            double t164175 = t164174+1.0;
            double t164176 = c0f*t164173*t164175*2.0;
            double t164177 = c0p*t164147*t164149*2.0;
            double t164178 = gamma_aa[index]*gcaa*t164155*4.0;
            double t164179 = gamma_aa[index]*gcaa*t164150*t164151*t164156*4.0;
            double t164180 = t164150*t164151*t164157*6.0;
            double t164181 = t164152*t164153*t164154;
            double t164182 = t164180+t164181+t164178+t164179+1.0;
            double t164183 = 1.0/t164182;
            double t164184 = gamma_aa[index]*gcaa*t164155;
            double t164185 = t164184+1.0;
            double t164186 = 1.0/t164185;
            double t164187 = gamma_aa[index]*gcaa*t164155*3.0;
            double t164188 = gamma_aa[index]*gcaa*t164150*t164151*t164156;
            double t164189 = t164150*t164151*t164157*3.0;
            double t164190 = t164187+t164188+t164189+1.0;
            double t164191 = 1.0/t164190;
            double t164192 = gamma_aa[index]*gcaa*t164155*2.0;
            double t164193 = t164150*t164151*t164157;
            double t164194 = t164192+t164193+1.0;
            double t164195 = 1.0/t164194;
            double t164196 = 1.0/pow(rho_a[index],1.9E1/3.0);
            double t164197 = 1.0/pow(rho_a[index],1.1E1/3.0);
            double t164198 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]*rho_a[index]);
            double t164199 = 1.0/pow(rho_a[index],3.5E1/3.0);
            double t164200 = 1.0/pow(rho_a[index],4.0/3.0);
            double t164201 = 1.0/pow(rho_a[index],5.0/3.0);
            double t164202 = 1.0/sqrt(t164133);
            double t164203 = 1.0/t164146;
            double t164204 = 1.0/(t164143*t164143);
            double t164205 = b4p*t164201*t164136*(2.0/3.0);
            double t164206 = b2p*c*t164200*(1.0/3.0);
            double t164207 = b1p*c*t164200*t164202*(1.0/6.0);
            double t164208 = b3p*c*t164200*t164134*(1.0/2.0);
            double t164209 = t164205+t164206+t164207+t164208;
            double t164210 = t164203*t164204*t164209*t164149;
            double t164211 = ccaa4*t164152*t164153*t164154*t164183;
            double t164212 = ccaa1*gamma_aa[index]*gcaa*t164155*t164186;
            double t164213 = ccaa3*gamma_aa[index]*gcaa*t164150*t164151*t164191*t164156;
            double t164214 = ccaa2*t164150*t164151*t164157*t164195;
            double t164215 = ccaa0+t164211+t164212+t164213+t164214;
            double t164216 = rho_a[index]*(8.334140006820045E15/1.40737488355328E14);
            double t164217 = 1.0/(omega*omega);
            double t164218 = pow(t164216,2.0/3.0);
            double t164221 = t164217*t164218;
            double t164219 = exp(-t164221);
            double t164220 = 1.0/pow(t164216,1.0/3.0);
            double t164222 = omega*omega;
            double t164223 = t164219-1.0;
            double t164224 = 1.0/pow(t164216,2.0/3.0);
            double t164225 = 1.0/pow(t164216,4.0/3.0);
            double t164226 = 1.0/omega;
            double t164227 = t164222*t164223*t164224*(1.0/2.0);
            double t164228 = t164227-t164219+3.0/2.0;
            double t164229 = gx*gx;
            double t164230 = t164229*t164229;
            double t164231 = pow(rho_a[index],4.0/3.0);
            double t164232 = pow(t164216,1.0/3.0);
            double t164233 = t164232*t164226;
            double t164234 = erf(t164233);
            double t164235 = t164234*(3.991211251234741E15/2.251799813685248E15);
            double t164255 = omega*t164220*t164228;
            double t164236 = t164235-t164255;
            double t164237 = gamma_aa[index]*gx*t164155*4.0;
            double t164238 = gamma_aa[index]*gx*t164150*t164156*t164229*4.0;
            double t164239 = t164150*t164157*t164229*6.0;
            double t164240 = t164230*t164152*t164154;
            double t164241 = t164240+t164237+t164238+t164239+1.0;
            double t164242 = 1.0/t164241;
            double t164243 = gamma_aa[index]*gx*t164155;
            double t164244 = t164243+1.0;
            double t164245 = 1.0/t164244;
            double t164246 = gamma_aa[index]*gx*t164155*3.0;
            double t164247 = gamma_aa[index]*gx*t164150*t164156*t164229;
            double t164248 = t164150*t164157*t164229*3.0;
            double t164249 = t164246+t164247+t164248+1.0;
            double t164250 = 1.0/t164249;
            double t164251 = gamma_aa[index]*gx*t164155*2.0;
            double t164252 = t164150*t164157*t164229;
            double t164253 = t164251+t164252+1.0;
            double t164254 = 1.0/t164253;
            double t164256 = omega*t164220*t164236*(4.0/3.0);
            double t164257 = t164256-1.0;
            double t164258 = cx4*t164230*t164152*t164242*t164154;
            double t164259 = cx1*gamma_aa[index]*gx*t164155*t164245;
            double t164260 = cx3*gamma_aa[index]*gx*t164150*t164250*t164156*t164229;
            double t164261 = cx2*t164150*t164254*t164157*t164229;
            double t164262 = cx0+t164260+t164261+t164258+t164259;
            v_rho_a_[index] = -t164215*(t164177+t164160*t164163*(t164176-c0p*t164147*t164149*2.0))+rho_a[index]* \
               t164215*(-t164210+t164160*t164163*(t164210-(t164175*1.0/(t164169*t164169)*(b2f*c*t164200*(1.0/3.0) \
               +b4f*t164201*t164136*(2.0/3.0)+b1f*c*t164200*t164202*(1.0/6.0)+b3f*c*t164200*t164134*(1.0/2.0)))/t164172+ \
               a1f*c*c0f*t164200*t164173*(2.0/3.0)-a1p*c*c0p*t164200*t164147*(2.0/3.0))+a1p*c*c0p*t164200*t164147* \
               (2.0/3.0))+rho_a[index]*(t164177+t164160*t164163*(t164176-t164177))*(ccaa1*gamma_aa[index]*gcaa*t164186* \
               t164197*(8.0/3.0)+ccaa2*t164150*t164151*t164195*t164196*(1.6E1/3.0)+ccaa4*t164152*t164153*t164183* \
               t164199*(3.2E1/3.0)-ccaa1*t164150*t164151*1.0/(t164185*t164185)*t164196*(8.0/3.0)-ccaa2*t164150*t164151* \
               t164157*1.0/(t164194*t164194)*(gamma_aa[index]*gcaa*t164197*(1.6E1/3.0)+t164150*t164151*t164196*(1.6E1/ \
               3.0))-ccaa4*t164152*t164153*t164154*1.0/(t164182*t164182)*(gamma_aa[index]*gcaa*t164197*(3.2E1/3.0) \
               +t164150*t164151*t164196*3.2E1+t164152*t164153*t164199*(3.2E1/3.0)+gamma_aa[index]*gcaa*t164150*t164151* \
               t164198*3.2E1)+ccaa3*gamma_aa[index]*gcaa*t164150*t164151*t164191*t164198*8.0-ccaa3*gamma_aa[index]* \
               gcaa*t164150*t164151*1.0/(t164190*t164190)*t164156*(gamma_aa[index]*gcaa*t164197*8.0+t164150*t164151* \
               t164196*1.6E1+gamma_aa[index]*gcaa*t164150*t164151*t164198*8.0))-c0*t164231*t164262*(omega*t164220* \
               (omega*t164225*t164228*(2.778046668940015E15/1.40737488355328E14)+omega*t164220*((t164219*(1.0/3.0) \
               )/rho_a[index]+t164222*t164223*1.0/pow(t164216,5.0/3.0)*(2.778046668940015E15/1.40737488355328E14) \
               -t164220*t164217*t164219*(2.778046668940015E15/7.0368744177664E13))+1.0/sqrt(3.141592653589793)*t164224* \
               t164226*t164219*(1.108777112152858E31/1.584563250285287E29))*(4.0/3.0)-omega*t164225*t164236*(2.778046668940015E15/ \
               1.05553116266496E14))-c0*pow(rho_a[index],1.0/3.0)*t164262*t164257*(4.0/3.0)+c0*t164231*t164257*(cx1* \
               gamma_aa[index]*gx*t164245*t164197*(8.0/3.0)+cx2*t164150*t164254*t164229*t164196*(1.6E1/3.0)+cx4*t164230* \
               t164152*t164242*t164199*(3.2E1/3.0)-cx1*t164150*1.0/(t164244*t164244)*t164229*t164196*(8.0/3.0)-cx2* \
               t164150*1.0/(t164253*t164253)*t164157*t164229*(gamma_aa[index]*gx*t164197*(1.6E1/3.0)+t164150*t164229* \
               t164196*(1.6E1/3.0))-cx4*t164230*1.0/(t164241*t164241)*t164152*t164154*(gamma_aa[index]*gx*t164197* \
               (3.2E1/3.0)+t164230*t164152*t164199*(3.2E1/3.0)+t164150*t164229*t164196*3.2E1+gamma_aa[index]*gx*t164150* \
               t164229*t164198*3.2E1)+cx3*gamma_aa[index]*gx*t164150*t164250*t164229*t164198*8.0-cx3*gamma_aa[index]* \
               gx*t164150*t164156*t164229*1.0/(t164249*t164249)*(gamma_aa[index]*gx*t164197*8.0+t164150*t164229*t164196* \
               1.6E1+gamma_aa[index]*gx*t164150*t164229*t164198*8.0));
        } else if (rho_b[index] > cutoff_) {
            v_rho_a_[index] = 0.0;
        } else {
            v_rho_a_[index] = 0.0;
        } 

        //V_rho_b
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t159996 = 1.0/pow(rho_b[index],1.0/3.0);
            double t159997 = c*t159996;
            double t159998 = sqrt(t159997);
            double t159999 = pow(t159997,3.0/2.0);
            double t160000 = c*c;
            double t160001 = 1.0/pow(rho_b[index],2.0/3.0);
            double t160002 = 1.0/c0p;
            double t160003 = b1p*t159998;
            double t160004 = b3p*t159999;
            double t160005 = b4p*t160000*t160001;
            double t160006 = b2p*c*t159996;
            double t160007 = t160003+t160004+t160005+t160006;
            double t160008 = 1.0/t160007;
            double t160009 = t160002*t160008*(1.0/2.0);
            double t160010 = t160009+1.0;
            double t160011 = log(t160010);
            double t160012 = a1p*c*t159996;
            double t160013 = t160012+1.0;
            double t160014 = gamma_bb[index]*gamma_bb[index];
            double t160015 = gcaa*gcaa;
            double t160016 = t160014*t160014;
            double t160017 = t160015*t160015;
            double t160018 = 1.0/pow(rho_b[index],3.2E1/3.0);
            double t160019 = 1.0/pow(rho_b[index],8.0/3.0);
            double t160020 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
               rho_b[index]*rho_b[index]);
            double t160021 = 1.0/pow(rho_b[index],1.6E1/3.0);
            double t160022 = pow(2.0,1.0/3.0);
            double t160023 = t160022*2.0;
            double t160024 = t160023-2.0;
            double t160025 = two_13*2.0;
            double t160026 = t160025-2.0;
            double t160027 = 1.0/t160026;
            double t160028 = 1.0/c0f;
            double t160029 = 1.0/pow(rho_a[index],1.0/3.0);
            double t160030 = c*t160029;
            double t160031 = sqrt(t160030);
            double t160032 = pow(t160030,3.0/2.0);
            double t160033 = 1.0/pow(rho_a[index],2.0/3.0);
            double t160034 = b1p*t160031;
            double t160035 = b3p*t160032;
            double t160036 = b4p*t160000*t160033;
            double t160037 = b2p*c*t160029;
            double t160038 = t160034+t160035+t160036+t160037;
            double t160039 = 1.0/t160038;
            double t160040 = t160002*t160039*(1.0/2.0);
            double t160041 = t160040+1.0;
            double t160042 = log(t160041);
            double t160043 = a1p*c*t160029;
            double t160044 = t160043+1.0;
            double t160045 = c0p*t160042*t160044*2.0;
            double t160046 = b1f*t159998;
            double t160047 = b3f*t159999;
            double t160048 = b4f*t160000*t160001;
            double t160049 = b2f*c*t159996;
            double t160050 = t160046+t160047+t160048+t160049;
            double t160051 = 1.0/t160050;
            double t160052 = t160051*t160028*(1.0/2.0);
            double t160053 = t160052+1.0;
            double t160054 = log(t160053);
            double t160055 = a1f*c*t159996;
            double t160056 = t160055+1.0;
            double t160057 = c0f*t160054*t160056*2.0;
            double t160058 = c0p*t160011*t160013*2.0;
            double t160059 = rho_a[index]+rho_b[index];
            double t160060 = 1.0/pow(t160059,1.0/3.0);
            double t160061 = c*t160060;
            double t160062 = sqrt(t160061);
            double t160063 = pow(t160061,3.0/2.0);
            double t160064 = 1.0/pow(t160059,2.0/3.0);
            double t160065 = b1p*t160062;
            double t160066 = b3p*t160063;
            double t160067 = b4p*t160000*t160064;
            double t160068 = b2p*c*t160060;
            double t160069 = t160065+t160066+t160067+t160068;
            double t160070 = 1.0/t160069;
            double t160071 = t160002*t160070*(1.0/2.0);
            double t160072 = t160071+1.0;
            double t160073 = log(t160072);
            double t160074 = a1p*c*t160060;
            double t160075 = t160074+1.0;
            double t160076 = c0p*t160073*t160075*2.0;
            double t160077 = rho_a[index]-rho_b[index];
            double t160078 = t160077*t160077;
            double t160079 = 1.0/t160059;
            double t160080 = t160077*t160079;
            double t160081 = 1.0/(t160059*t160059*t160059*t160059);
            double t160082 = t160078*t160078;
            double t160083 = t160080+1.0;
            double t160084 = pow(t160083,4.0/3.0);
            double t160085 = -t160080+1.0;
            double t160086 = pow(t160085,4.0/3.0);
            double t160087 = t160084+t160086-2.0;
            double t160088 = gcab*gcab;
            double t160092 = 1.0/pow(rho_a[index],8.0/3.0);
            double t160093 = gamma_aa[index]*t160092*(1.0/2.0);
            double t160094 = gamma_bb[index]*t160019*(1.0/2.0);
            double t160089 = t160093+t160094;
            double t160090 = t160089*t160089;
            double t160091 = 1.0/pow(rho_b[index],1.1E1/3.0);
            double t160095 = t160088*t160088;
            double t160096 = t160090*t160090;
            double t160097 = t160090*t160088*6.0;
            double t160098 = gcab*t160090*t160088*t160089*4.0;
            double t160099 = t160095*t160096;
            double t160100 = gcab*t160089*4.0;
            double t160101 = t160100+t160097+t160098+t160099+1.0;
            double t160102 = gcab*t160089;
            double t160103 = t160102+1.0;
            double t160104 = t160090*t160088;
            double t160105 = gcab*t160089*2.0;
            double t160106 = t160104+t160105+1.0;
            double t160107 = t160090*t160088*3.0;
            double t160108 = gcab*t160090*t160088*t160089;
            double t160109 = gcab*t160089*3.0;
            double t160110 = t160107+t160108+t160109+1.0;
            double t160111 = 1.0/t160106;
            double t160112 = 1.0/t160110;
            double t160113 = 1.0/t160103;
            double t160114 = 1.0/t160101;
            double t160115 = 1.0/pow(t160059,4.0/3.0);
            double t160116 = b1f*t160062;
            double t160117 = b3f*t160063;
            double t160118 = b4f*t160000*t160064;
            double t160119 = b2f*c*t160060;
            double t160120 = t160116+t160117+t160118+t160119;
            double t160121 = 1.0/t160120;
            double t160122 = t160121*t160028*(1.0/2.0);
            double t160123 = t160122+1.0;
            double t160124 = log(t160123);
            double t160125 = a1f*c*t160060;
            double t160126 = t160125+1.0;
            double t160128 = c0f*t160124*t160126*2.0;
            double t160127 = -t160128+t160076;
            double t160129 = 1.0/(t160059*t160059);
            double t160130 = t160129*t160077;
            double t160131 = t160130+t160079;
            double t160132 = t160128-t160076;
            double t160133 = 1.0/pow(t160059,5.0/3.0);
            double t160134 = 1.0/sqrt(t160061);
            double t160135 = 1.0/t160072;
            double t160136 = 1.0/(t160069*t160069);
            double t160137 = b4p*t160000*t160133*(2.0/3.0);
            double t160138 = b2p*c*t160115*(1.0/3.0);
            double t160139 = b1p*c*t160115*t160134*(1.0/6.0);
            double t160140 = b3p*c*t160115*t160062*(1.0/2.0);
            double t160141 = t160140+t160137+t160138+t160139;
            double t160142 = 1.0/d2fz0;
            double t160143 = 1.0/Aa;
            double t160144 = b1a*t160062;
            double t160145 = b3a*t160063;
            double t160146 = b4a*t160000*t160064;
            double t160147 = b2a*c*t160060;
            double t160148 = t160144+t160145+t160146+t160147;
            double t160149 = 1.0/t160148;
            double t160150 = t160143*t160149*(1.0/2.0);
            double t160151 = t160150+1.0;
            double t160152 = log(t160151);
            double t160153 = a1a*c*t160060;
            double t160154 = t160153+1.0;
            double t160155 = 1.0/(t160059*t160059*t160059*t160059*t160059);
            double t160156 = pow(t160083,1.0/3.0);
            double t160157 = t160131*t160156*(4.0/3.0);
            double t160158 = pow(t160085,1.0/3.0);
            double t160159 = t160157-t160131*t160158*(4.0/3.0);
            double t160160 = t160081*t160082;
            double t160161 = t160160-1.0;
            double t160162 = 1.0/pow(rho_b[index],4.0/3.0);
            double t160163 = 1.0/pow(rho_b[index],5.0/3.0);
            double t160164 = 1.0/sqrt(t159997);
            double t160165 = 1.0/t160010;
            double t160166 = 1.0/(t160007*t160007);
            double t160167 = b4p*t160000*t160163*(2.0/3.0);
            double t160168 = b2p*c*t160162*(1.0/3.0);
            double t160169 = b1p*c*t160162*t160164*(1.0/6.0);
            double t160170 = b3p*c*t159998*t160162*(1.0/2.0);
            double t160171 = t160170+t160167+t160168+t160169;
            double t160172 = t160013*t160171*t160165*t160166;
            double t160173 = t160057-t160058;
            double t160174 = t160024*t160027*t160173;
            double t160175 = Aa*t160142*t160152*t160161*t160027*t160154*t160087*2.0;
            double t160176 = a1p*c*c0p*t160115*t160073*(2.0/3.0);
            double t160177 = t160174+t160058;
            double t160178 = gamma_bb[index]*gcaa*t160019*4.0;
            double t160179 = gamma_bb[index]*gcaa*t160020*t160014*t160015*4.0;
            double t160180 = t160021*t160014*t160015*6.0;
            double t160181 = t160016*t160017*t160018;
            double t160182 = t160180+t160181+t160178+t160179+1.0;
            double t160183 = 1.0/t160182;
            double t160184 = gamma_bb[index]*gcaa*t160019;
            double t160185 = t160184+1.0;
            double t160186 = 1.0/t160185;
            double t160187 = gamma_bb[index]*gcaa*t160019*3.0;
            double t160188 = gamma_bb[index]*gcaa*t160020*t160014*t160015;
            double t160189 = t160021*t160014*t160015*3.0;
            double t160190 = t160187+t160188+t160189+1.0;
            double t160191 = 1.0/t160190;
            double t160192 = gamma_bb[index]*gcaa*t160019*2.0;
            double t160193 = t160021*t160014*t160015;
            double t160194 = t160192+t160193+1.0;
            double t160195 = 1.0/t160194;
            double t160196 = 1.0/pow(rho_b[index],1.9E1/3.0);
            double t160197 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
               rho_b[index]*rho_b[index]*rho_b[index]);
            double t160198 = 1.0/pow(rho_b[index],3.5E1/3.0);
            double t160199 = 1.0/t160053;
            double t160200 = 1.0/(t160050*t160050);
            double t160201 = b4f*t160000*t160163*(2.0/3.0);
            double t160202 = b2f*c*t160162*(1.0/3.0);
            double t160203 = b1f*c*t160162*t160164*(1.0/6.0);
            double t160204 = b3f*c*t159998*t160162*(1.0/2.0);
            double t160205 = t160201+t160202+t160203+t160204;
            double t160206 = a1f*c*c0f*t160054*t160162*(2.0/3.0);
            double t160207 = a1p*c*c0p*t160011*t160162*(2.0/3.0);
            double t160208 = ccaa4*t160016*t160017*t160018*t160183;
            double t160209 = ccaa1*gamma_bb[index]*gcaa*t160019*t160186;
            double t160210 = ccaa3*gamma_bb[index]*gcaa*t160020*t160014*t160015*t160191;
            double t160211 = ccaa2*t160021*t160014*t160015*t160195;
            double t160212 = ccaa0+t160210+t160211+t160208+t160209;
            double t160213 = rho_b[index]*(8.334140006820045E15/1.40737488355328E14);
            double t160214 = 1.0/(omega*omega);
            double t160215 = pow(t160213,2.0/3.0);
            double t160218 = t160214*t160215;
            double t160216 = exp(-t160218);
            double t160217 = 1.0/pow(t160213,1.0/3.0);
            double t160219 = omega*omega;
            double t160220 = t160216-1.0;
            double t160221 = 1.0/pow(t160213,2.0/3.0);
            double t160222 = 1.0/pow(t160213,4.0/3.0);
            double t160223 = 1.0/omega;
            double t160224 = t160220*t160221*t160219*(1.0/2.0);
            double t160225 = t160224-t160216+3.0/2.0;
            double t160226 = gx*gx;
            double t160227 = t160226*t160226;
            double t160228 = pow(rho_b[index],4.0/3.0);
            double t160229 = pow(t160213,1.0/3.0);
            double t160230 = t160223*t160229;
            double t160231 = erf(t160230);
            double t160232 = t160231*(3.991211251234741E15/2.251799813685248E15);
            double t160252 = omega*t160225*t160217;
            double t160233 = t160232-t160252;
            double t160234 = gamma_bb[index]*gx*t160019*4.0;
            double t160235 = gamma_bb[index]*gx*t160020*t160014*t160226*4.0;
            double t160236 = t160021*t160014*t160226*6.0;
            double t160237 = t160016*t160018*t160227;
            double t160238 = t160234+t160235+t160236+t160237+1.0;
            double t160239 = 1.0/t160238;
            double t160240 = gamma_bb[index]*gx*t160019;
            double t160241 = t160240+1.0;
            double t160242 = 1.0/t160241;
            double t160243 = gamma_bb[index]*gx*t160019*3.0;
            double t160244 = gamma_bb[index]*gx*t160020*t160014*t160226;
            double t160245 = t160021*t160014*t160226*3.0;
            double t160246 = t160243+t160244+t160245+1.0;
            double t160247 = 1.0/t160246;
            double t160248 = gamma_bb[index]*gx*t160019*2.0;
            double t160249 = t160021*t160014*t160226;
            double t160250 = t160248+t160249+1.0;
            double t160251 = 1.0/t160250;
            double t160253 = omega*t160233*t160217*(4.0/3.0);
            double t160254 = t160253-1.0;
            double t160255 = cx4*t160016*t160018*t160227*t160239;
            double t160256 = cx1*gamma_bb[index]*gx*t160242*t160019;
            double t160257 = cx3*gamma_bb[index]*gx*t160020*t160014*t160226*t160247;
            double t160258 = cx2*t160021*t160014*t160251*t160226;
            double t160259 = cx0+t160255+t160256+t160257+t160258;
            v_rho_b_[index] = -t160212*(t160058+t160024*t160027*(t160057-c0p*t160011*t160013*2.0))-(ccab0+ccab1* \
               gcab*t160113*t160089+ccab2*t160111*t160090*t160088+ccab4*t160114*t160095*t160096+ccab3*gcab*t160112* \
               t160090*t160088*t160089)*(-t160174-t160058+t160076+t160175+rho_b[index]*(t160207-t160172+t160024*t160027* \
               (t160206+t160172-t160200*t160205*t160056*t160199-a1p*c*c0p*t160011*t160162*(2.0/3.0)))-t160059*(t160176- \
               t160141*t160135*t160136*t160075+t160132*t160027*t160081*t160082*t160159+t160132*t160027*t160082*t160155* \
               t160087*4.0-t160027*t160081*t160082*t160087*(t160176-t160141*t160135*t160136*t160075+(1.0/(t160120* \
               t160120)*t160126*(b2f*c*t160115*(1.0/3.0)+b4f*t160000*t160133*(2.0/3.0)+b1f*c*t160115*t160134*(1.0/ \
               6.0)+b3f*c*t160115*t160062*(1.0/2.0)))/t160123-a1f*c*c0f*t160115*t160124*(2.0/3.0))-t160027*t160081* \
               t160127*t160077*t160078*t160087*4.0+Aa*t160142*t160152*t160027*t160154*t160087*(t160082*t160155*4.0+ \
               t160081*t160077*t160078*4.0)*2.0+Aa*t160142*t160152*t160161*t160027*t160154*t160159*2.0-(t160142*t160161* \
               t160027*t160154*1.0/(t160148*t160148)*t160087*(b2a*c*t160115*(1.0/3.0)+b4a*t160000*t160133*(2.0/3.0) \
               +b1a*c*t160115*t160134*(1.0/6.0)+b3a*c*t160115*t160062*(1.0/2.0)))/t160151+Aa*a1a*c*t160115*t160142* \
               t160152*t160161*t160027*t160087*(2.0/3.0))+t160132*t160027*t160081*t160082*t160087)-(rho_b[index]* \
               t160177+rho_a[index]*(t160045-t160024*t160027*(t160045-c0f*log((t160028*(1.0/2.0))/(b1f*t160031+b3f* \
               t160032+b2f*c*t160029+b4f*t160000*t160033)+1.0)*(a1f*c*t160029+1.0)*2.0))-t160059*(t160076+t160175- \
               t160027*t160081*t160082*t160127*t160087))*(ccab1*gamma_bb[index]*gcab*t160113*t160091*(4.0/3.0)-ccab2* \
               1.0/(t160106*t160106)*t160090*t160088*(gamma_bb[index]*gcab*t160091*(8.0/3.0)+gamma_bb[index]*t160091* \
               t160088*t160089*(8.0/3.0))-ccab4*1.0/(t160101*t160101)*t160095*t160096*(gamma_bb[index]*gcab*t160091* \
               (1.6E1/3.0)+gamma_bb[index]*t160091*t160088*t160089*1.6E1+gamma_bb[index]*gcab*t160090*t160091*t160088* \
               1.6E1+gamma_bb[index]*t160090*t160091*t160095*t160089*(1.6E1/3.0))-ccab1*gamma_bb[index]*1.0/(t160103* \
               t160103)*t160091*t160088*t160089*(4.0/3.0)+ccab2*gamma_bb[index]*t160111*t160091*t160088*t160089*(8.0/ \
               3.0)-ccab3*gcab*1.0/(t160110*t160110)*t160090*t160088*t160089*(gamma_bb[index]*gcab*t160091*4.0+gamma_bb[index]* \
               t160091*t160088*t160089*8.0+gamma_bb[index]*gcab*t160090*t160091*t160088*4.0)+ccab3*gamma_bb[index]* \
               gcab*t160112*t160090*t160091*t160088*4.0+ccab4*gamma_bb[index]*t160114*t160090*t160091*t160095*t160089* \
               (1.6E1/3.0))+rho_b[index]*t160177*(ccaa1*gamma_bb[index]*gcaa*t160091*t160186*(8.0/3.0)+ccaa2*t160014* \
               t160015*t160195*t160196*(1.6E1/3.0)+ccaa4*t160016*t160017*t160183*t160198*(3.2E1/3.0)-ccaa1*t160014* \
               t160015*1.0/(t160185*t160185)*t160196*(8.0/3.0)-ccaa2*t160021*t160014*t160015*1.0/(t160194*t160194) \
               *(gamma_bb[index]*gcaa*t160091*(1.6E1/3.0)+t160014*t160015*t160196*(1.6E1/3.0))-ccaa4*t160016*t160017* \
               t160018*1.0/(t160182*t160182)*(gamma_bb[index]*gcaa*t160091*(3.2E1/3.0)+t160014*t160015*t160196*3.2E1+ \
               t160016*t160017*t160198*(3.2E1/3.0)+gamma_bb[index]*gcaa*t160014*t160015*t160197*3.2E1)+ccaa3*gamma_bb[index]* \
               gcaa*t160014*t160015*t160191*t160197*8.0-ccaa3*gamma_bb[index]*gcaa*t160020*t160014*t160015*1.0/(t160190* \
               t160190)*(gamma_bb[index]*gcaa*t160091*8.0+t160014*t160015*t160196*1.6E1+gamma_bb[index]*gcaa*t160014* \
               t160015*t160197*8.0))+rho_b[index]*t160212*(t160207-t160172+t160024*t160027*(t160206-t160207+t160172- \
               t160200*t160205*t160056*t160199))-c0*t160228*t160259*(omega*t160217*(omega*t160222*t160225*(2.778046668940015E15/ \
               1.40737488355328E14)+omega*t160217*((t160216*(1.0/3.0))/rho_b[index]+t160220*1.0/pow(t160213,5.0/3.0) \
               *t160219*(2.778046668940015E15/1.40737488355328E14)-t160214*t160216*t160217*(2.778046668940015E15/ \
               7.0368744177664E13))+1.0/sqrt(3.141592653589793)*t160221*t160223*t160216*(1.108777112152858E31/1.584563250285287E29) \
               )*(4.0/3.0)-omega*t160222*t160233*(2.778046668940015E15/1.05553116266496E14))-c0*pow(rho_b[index],1.0/ \
               3.0)*t160254*t160259*(4.0/3.0)+c0*t160254*t160228*(cx1*gamma_bb[index]*gx*t160242*t160091*(8.0/3.0) \
               +cx2*t160014*t160251*t160226*t160196*(1.6E1/3.0)+cx4*t160016*t160227*t160239*t160198*(3.2E1/3.0)-cx1* \
               t160014*1.0/(t160241*t160241)*t160226*t160196*(8.0/3.0)-cx2*t160021*t160014*1.0/(t160250*t160250)* \
               t160226*(gamma_bb[index]*gx*t160091*(1.6E1/3.0)+t160014*t160226*t160196*(1.6E1/3.0))-cx4*t160016*t160018* \
               t160227*1.0/(t160238*t160238)*(gamma_bb[index]*gx*t160091*(3.2E1/3.0)+t160014*t160226*t160196*3.2E1+ \
               t160016*t160227*t160198*(3.2E1/3.0)+gamma_bb[index]*gx*t160014*t160226*t160197*3.2E1)+cx3*gamma_bb[index]* \
               gx*t160014*t160226*t160247*t160197*8.0-cx3*gamma_bb[index]*gx*t160020*t160014*t160226*1.0/(t160246* \
               t160246)*(gamma_bb[index]*gx*t160091*8.0+t160014*t160226*t160196*1.6E1+gamma_bb[index]*gx*t160014* \
               t160226*t160197*8.0));
        } else if (rho_a[index] > cutoff_) {
            v_rho_b_[index] = 0.0;
        } else if (rho_b[index] > cutoff_) {
            double t163378 = 1.0/pow(rho_b[index],1.0/3.0);
            double t163379 = c*t163378;
            double t163380 = sqrt(t163379);
            double t163381 = pow(t163379,3.0/2.0);
            double t163382 = c*c;
            double t163383 = 1.0/pow(rho_b[index],2.0/3.0);
            double t163384 = 1.0/c0p;
            double t163385 = b1p*t163380;
            double t163386 = b3p*t163381;
            double t163387 = b4p*t163382*t163383;
            double t163388 = b2p*c*t163378;
            double t163389 = t163385+t163386+t163387+t163388;
            double t163390 = 1.0/t163389;
            double t163391 = t163390*t163384*(1.0/2.0);
            double t163392 = t163391+1.0;
            double t163393 = log(t163392);
            double t163394 = a1p*c*t163378;
            double t163395 = t163394+1.0;
            double t163396 = gamma_bb[index]*gamma_bb[index];
            double t163397 = gcaa*gcaa;
            double t163398 = t163396*t163396;
            double t163399 = t163397*t163397;
            double t163400 = 1.0/pow(rho_b[index],3.2E1/3.0);
            double t163401 = 1.0/pow(rho_b[index],8.0/3.0);
            double t163402 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
               rho_b[index]*rho_b[index]);
            double t163403 = 1.0/pow(rho_b[index],1.6E1/3.0);
            double t163404 = pow(2.0,1.0/3.0);
            double t163405 = t163404*2.0;
            double t163406 = t163405-2.0;
            double t163407 = two_13*2.0;
            double t163408 = t163407-2.0;
            double t163409 = 1.0/t163408;
            double t163410 = 1.0/c0f;
            double t163411 = b1f*t163380;
            double t163412 = b3f*t163381;
            double t163413 = b4f*t163382*t163383;
            double t163414 = b2f*c*t163378;
            double t163415 = t163411+t163412+t163413+t163414;
            double t163416 = 1.0/t163415;
            double t163417 = t163410*t163416*(1.0/2.0);
            double t163418 = t163417+1.0;
            double t163419 = log(t163418);
            double t163420 = a1f*c*t163378;
            double t163421 = t163420+1.0;
            double t163422 = c0f*t163421*t163419*2.0;
            double t163423 = c0p*t163393*t163395*2.0;
            double t163424 = gamma_bb[index]*gcaa*t163401*4.0;
            double t163425 = gamma_bb[index]*gcaa*t163402*t163396*t163397*4.0;
            double t163426 = t163403*t163396*t163397*6.0;
            double t163427 = t163400*t163398*t163399;
            double t163428 = t163424+t163425+t163426+t163427+1.0;
            double t163429 = 1.0/t163428;
            double t163430 = gamma_bb[index]*gcaa*t163401;
            double t163431 = t163430+1.0;
            double t163432 = 1.0/t163431;
            double t163433 = gamma_bb[index]*gcaa*t163401*3.0;
            double t163434 = gamma_bb[index]*gcaa*t163402*t163396*t163397;
            double t163435 = t163403*t163396*t163397*3.0;
            double t163436 = t163433+t163434+t163435+1.0;
            double t163437 = 1.0/t163436;
            double t163438 = gamma_bb[index]*gcaa*t163401*2.0;
            double t163439 = t163403*t163396*t163397;
            double t163440 = t163438+t163439+1.0;
            double t163441 = 1.0/t163440;
            double t163442 = 1.0/pow(rho_b[index],1.9E1/3.0);
            double t163443 = 1.0/pow(rho_b[index],1.1E1/3.0);
            double t163444 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
               rho_b[index]*rho_b[index]*rho_b[index]);
            double t163445 = 1.0/pow(rho_b[index],3.5E1/3.0);
            double t163446 = 1.0/pow(rho_b[index],4.0/3.0);
            double t163447 = 1.0/pow(rho_b[index],5.0/3.0);
            double t163448 = 1.0/sqrt(t163379);
            double t163449 = 1.0/t163392;
            double t163450 = 1.0/(t163389*t163389);
            double t163451 = b4p*t163382*t163447*(2.0/3.0);
            double t163452 = b2p*c*t163446*(1.0/3.0);
            double t163453 = b1p*c*t163446*t163448*(1.0/6.0);
            double t163454 = b3p*c*t163380*t163446*(1.0/2.0);
            double t163455 = t163451+t163452+t163453+t163454;
            double t163456 = t163450*t163455*t163395*t163449;
            double t163457 = ccaa4*t163400*t163429*t163398*t163399;
            double t163458 = ccaa1*gamma_bb[index]*gcaa*t163401*t163432;
            double t163459 = ccaa3*gamma_bb[index]*gcaa*t163402*t163437*t163396*t163397;
            double t163460 = ccaa2*t163403*t163441*t163396*t163397;
            double t163461 = ccaa0+t163460+t163457+t163458+t163459;
            double t163462 = rho_b[index]*(8.334140006820045E15/1.40737488355328E14);
            double t163463 = 1.0/(omega*omega);
            double t163464 = pow(t163462,2.0/3.0);
            double t163467 = t163463*t163464;
            double t163465 = exp(-t163467);
            double t163466 = 1.0/pow(t163462,1.0/3.0);
            double t163468 = omega*omega;
            double t163469 = t163465-1.0;
            double t163470 = 1.0/pow(t163462,2.0/3.0);
            double t163471 = 1.0/pow(t163462,4.0/3.0);
            double t163472 = 1.0/omega;
            double t163473 = t163470*t163468*t163469*(1.0/2.0);
            double t163474 = t163473-t163465+3.0/2.0;
            double t163475 = gx*gx;
            double t163476 = t163475*t163475;
            double t163477 = pow(rho_b[index],4.0/3.0);
            double t163478 = pow(t163462,1.0/3.0);
            double t163479 = t163472*t163478;
            double t163480 = erf(t163479);
            double t163481 = t163480*(3.991211251234741E15/2.251799813685248E15);
            double t163501 = omega*t163474*t163466;
            double t163482 = -t163501+t163481;
            double t163483 = gamma_bb[index]*gx*t163401*4.0;
            double t163484 = gamma_bb[index]*gx*t163402*t163475*t163396*4.0;
            double t163485 = t163403*t163475*t163396*6.0;
            double t163486 = t163400*t163476*t163398;
            double t163487 = t163483+t163484+t163485+t163486+1.0;
            double t163488 = 1.0/t163487;
            double t163489 = gamma_bb[index]*gx*t163401;
            double t163490 = t163489+1.0;
            double t163491 = 1.0/t163490;
            double t163492 = gamma_bb[index]*gx*t163401*3.0;
            double t163493 = gamma_bb[index]*gx*t163402*t163475*t163396;
            double t163494 = t163403*t163475*t163396*3.0;
            double t163495 = t163492+t163493+t163494+1.0;
            double t163496 = 1.0/t163495;
            double t163497 = gamma_bb[index]*gx*t163401*2.0;
            double t163498 = t163403*t163475*t163396;
            double t163499 = t163497+t163498+1.0;
            double t163500 = 1.0/t163499;
            double t163502 = omega*t163482*t163466*(4.0/3.0);
            double t163503 = t163502-1.0;
            double t163504 = cx4*t163400*t163476*t163398*t163488;
            double t163505 = cx1*gamma_bb[index]*gx*t163401*t163491;
            double t163506 = cx3*gamma_bb[index]*gx*t163402*t163475*t163396*t163496;
            double t163507 = cx2*t163500*t163403*t163475*t163396;
            double t163508 = cx0+t163504+t163505+t163506+t163507;
            v_rho_b_[index] = -t163461*(t163423+t163406*t163409*(t163422-c0p*t163393*t163395*2.0))+rho_b[index]* \
               t163461*(-t163456+t163406*t163409*(t163456-(t163421*1.0/(t163415*t163415)*(b2f*c*t163446*(1.0/3.0) \
               +b4f*t163382*t163447*(2.0/3.0)+b1f*c*t163446*t163448*(1.0/6.0)+b3f*c*t163380*t163446*(1.0/2.0)))/t163418+ \
               a1f*c*c0f*t163419*t163446*(2.0/3.0)-a1p*c*c0p*t163446*t163393*(2.0/3.0))+a1p*c*c0p*t163446*t163393* \
               (2.0/3.0))+rho_b[index]*(t163423+t163406*t163409*(t163422-t163423))*(ccaa1*gamma_bb[index]*gcaa*t163432* \
               t163443*(8.0/3.0)+ccaa2*t163441*t163442*t163396*t163397*(1.6E1/3.0)+ccaa4*t163445*t163429*t163398* \
               t163399*(3.2E1/3.0)-ccaa1*1.0/(t163431*t163431)*t163442*t163396*t163397*(8.0/3.0)-ccaa2*t163403*1.0/ \
               (t163440*t163440)*t163396*t163397*(gamma_bb[index]*gcaa*t163443*(1.6E1/3.0)+t163442*t163396*t163397* \
               (1.6E1/3.0))-ccaa4*t163400*1.0/(t163428*t163428)*t163398*t163399*(gamma_bb[index]*gcaa*t163443*(3.2E1/ \
               3.0)+t163442*t163396*t163397*3.2E1+t163445*t163398*t163399*(3.2E1/3.0)+gamma_bb[index]*gcaa*t163444* \
               t163396*t163397*3.2E1)+ccaa3*gamma_bb[index]*gcaa*t163444*t163437*t163396*t163397*8.0-ccaa3*gamma_bb[index]* \
               gcaa*t163402*1.0/(t163436*t163436)*t163396*t163397*(gamma_bb[index]*gcaa*t163443*8.0+t163442*t163396* \
               t163397*1.6E1+gamma_bb[index]*gcaa*t163444*t163396*t163397*8.0))-c0*t163508*t163477*(omega*t163466* \
               (omega*t163471*t163474*(2.778046668940015E15/1.40737488355328E14)+omega*t163466*((t163465*(1.0/3.0) \
               )/rho_b[index]+1.0/pow(t163462,5.0/3.0)*t163468*t163469*(2.778046668940015E15/1.40737488355328E14) \
               -t163463*t163465*t163466*(2.778046668940015E15/7.0368744177664E13))+1.0/sqrt(3.141592653589793)*t163470* \
               t163472*t163465*(1.108777112152858E31/1.584563250285287E29))*(4.0/3.0)-omega*t163471*t163482*(2.778046668940015E15/ \
               1.05553116266496E14))-c0*pow(rho_b[index],1.0/3.0)*t163503*t163508*(4.0/3.0)+c0*t163503*t163477*(cx1* \
               gamma_bb[index]*gx*t163443*t163491*(8.0/3.0)+cx2*t163500*t163442*t163475*t163396*(1.6E1/3.0)+cx4*t163445* \
               t163476*t163398*t163488*(3.2E1/3.0)-cx1*t163442*1.0/(t163490*t163490)*t163475*t163396*(8.0/3.0)-cx2* \
               t163403*t163475*t163396*1.0/(t163499*t163499)*(gamma_bb[index]*gx*t163443*(1.6E1/3.0)+t163442*t163475* \
               t163396*(1.6E1/3.0))-cx4*t163400*t163476*1.0/(t163487*t163487)*t163398*(gamma_bb[index]*gx*t163443* \
               (3.2E1/3.0)+t163442*t163475*t163396*3.2E1+t163445*t163476*t163398*(3.2E1/3.0)+gamma_bb[index]*gx*t163444* \
               t163475*t163396*3.2E1)+cx3*gamma_bb[index]*gx*t163444*t163475*t163396*t163496*8.0-cx3*gamma_bb[index]* \
               gx*t163402*t163475*t163396*1.0/(t163495*t163495)*(gamma_bb[index]*gx*t163443*8.0+t163442*t163475*t163396* \
               1.6E1+gamma_bb[index]*gx*t163444*t163475*t163396*8.0));
        } else {
            v_rho_b_[index] = 0.0;
        } 

        if (is_gga_) {

            //V_gamma_aa
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t160261 = 1.0/pow(rho_a[index],1.0/3.0);
                double t160262 = c*t160261;
                double t160263 = sqrt(t160262);
                double t160264 = pow(t160262,3.0/2.0);
                double t160265 = c*c;
                double t160266 = 1.0/pow(rho_a[index],2.0/3.0);
                double t160267 = 1.0/c0p;
                double t160268 = b1p*t160263;
                double t160269 = b3p*t160264;
                double t160270 = b4p*t160265*t160266;
                double t160271 = b2p*c*t160261;
                double t160272 = t160270+t160271+t160268+t160269;
                double t160273 = 1.0/t160272;
                double t160274 = t160273*t160267*(1.0/2.0);
                double t160275 = t160274+1.0;
                double t160276 = log(t160275);
                double t160277 = a1p*c*t160261;
                double t160278 = t160277+1.0;
                double t160279 = pow(2.0,1.0/3.0);
                double t160280 = t160279*2.0;
                double t160281 = t160280-2.0;
                double t160282 = two_13*2.0;
                double t160283 = t160282-2.0;
                double t160284 = 1.0/t160283;
                double t160285 = 1.0/c0f;
                double t160286 = 1.0/pow(rho_b[index],1.0/3.0);
                double t160287 = c*t160286;
                double t160288 = sqrt(t160287);
                double t160289 = pow(t160287,3.0/2.0);
                double t160290 = 1.0/pow(rho_b[index],2.0/3.0);
                double t160291 = b1p*t160288;
                double t160292 = b3p*t160289;
                double t160293 = b4p*t160290*t160265;
                double t160294 = b2p*c*t160286;
                double t160295 = t160291+t160292+t160293+t160294;
                double t160296 = 1.0/t160295;
                double t160297 = t160267*t160296*(1.0/2.0);
                double t160298 = t160297+1.0;
                double t160299 = log(t160298);
                double t160300 = a1p*c*t160286;
                double t160301 = t160300+1.0;
                double t160302 = c0p*t160301*t160299*2.0;
                double t160303 = rho_a[index]+rho_b[index];
                double t160304 = 1.0/pow(t160303,1.0/3.0);
                double t160305 = c*t160304;
                double t160306 = sqrt(t160305);
                double t160307 = pow(t160305,3.0/2.0);
                double t160308 = 1.0/pow(t160303,2.0/3.0);
                double t160309 = b1p*t160306;
                double t160310 = b3p*t160307;
                double t160311 = b4p*t160308*t160265;
                double t160312 = b2p*c*t160304;
                double t160313 = t160310+t160311+t160312+t160309;
                double t160314 = 1.0/t160313;
                double t160315 = t160314*t160267*(1.0/2.0);
                double t160316 = t160315+1.0;
                double t160317 = log(t160316);
                double t160318 = a1p*c*t160304;
                double t160319 = t160318+1.0;
                double t160320 = c0p*t160317*t160319*2.0;
                double t160321 = rho_a[index]-rho_b[index];
                double t160322 = t160321*t160321;
                double t160323 = 1.0/t160303;
                double t160324 = t160321*t160323;
                double t160325 = 1.0/(t160303*t160303*t160303*t160303);
                double t160326 = t160322*t160322;
                double t160327 = t160324+1.0;
                double t160328 = pow(t160327,4.0/3.0);
                double t160329 = -t160324+1.0;
                double t160330 = pow(t160329,4.0/3.0);
                double t160331 = t160330+t160328-2.0;
                double t160332 = 1.0/pow(rho_a[index],8.0/3.0);
                double t160333 = gamma_aa[index]*t160332*(1.0/2.0);
                double t160334 = 1.0/pow(rho_b[index],8.0/3.0);
                double t160335 = gamma_bb[index]*t160334*(1.0/2.0);
                double t160336 = t160333+t160335;
                double t160337 = gcab*t160336;
                double t160338 = t160337+1.0;
                double t160339 = gcab*gcab;
                double t160340 = t160336*t160336;
                double t160341 = t160339*t160339;
                double t160342 = t160340*t160340;
                double t160343 = t160340*t160339;
                double t160344 = gcab*t160336*2.0;
                double t160345 = t160343+t160344+1.0;
                double t160346 = t160340*t160339*3.0;
                double t160347 = gcab*t160340*t160336*t160339;
                double t160348 = gcab*t160336*3.0;
                double t160349 = t160346+t160347+t160348+1.0;
                double t160350 = t160340*t160339*6.0;
                double t160351 = gcab*t160340*t160336*t160339*4.0;
                double t160352 = t160341*t160342;
                double t160353 = gcab*t160336*4.0;
                double t160354 = t160350+t160351+t160352+t160353+1.0;
                double t160355 = c0p*t160276*t160278*2.0;
                double t160356 = b1f*t160263;
                double t160357 = b3f*t160264;
                double t160358 = b4f*t160265*t160266;
                double t160359 = b2f*c*t160261;
                double t160360 = t160356+t160357+t160358+t160359;
                double t160361 = 1.0/t160360;
                double t160362 = t160361*t160285*(1.0/2.0);
                double t160363 = t160362+1.0;
                double t160364 = log(t160363);
                double t160365 = a1f*c*t160261;
                double t160366 = t160365+1.0;
                double t160367 = t160355-c0f*t160364*t160366*2.0;
                double t160368 = t160355-t160281*t160284*t160367;
                double t160369 = gamma_aa[index]*gamma_aa[index];
                double t160370 = gcaa*gcaa;
                double t160371 = t160370*t160370;
                double t160372 = 1.0/pow(rho_a[index],3.2E1/3.0);
                double t160373 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t160374 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t160375 = gamma_aa[index]*gcaa*t160332;
                double t160376 = t160375+1.0;
                double t160377 = gamma_aa[index]*gcaa*t160332*3.0;
                double t160378 = gamma_aa[index]*gcaa*t160370*t160374*t160369;
                double t160379 = t160370*t160373*t160369*3.0;
                double t160380 = t160377+t160378+t160379+1.0;
                double t160381 = t160369*t160369;
                double t160382 = gamma_aa[index]*gcaa*t160332*4.0;
                double t160383 = gamma_aa[index]*gcaa*t160370*t160374*t160369*4.0;
                double t160384 = t160370*t160373*t160369*6.0;
                double t160385 = t160371*t160372*t160381;
                double t160386 = t160382+t160383+t160384+t160385+1.0;
                double t160387 = gamma_aa[index]*gcaa*t160332*2.0;
                double t160388 = t160370*t160373*t160369;
                double t160389 = t160387+t160388+1.0;
                double t160390 = rho_a[index]*(8.334140006820045E15/1.40737488355328E14);
                double t160391 = 1.0/pow(t160390,1.0/3.0);
                double t160392 = 1.0/(omega*omega);
                double t160393 = pow(t160390,2.0/3.0);
                double t160394 = exp(-t160392*t160393);
                double t160395 = gx*gx;
                double t160396 = t160395*t160395;
                double t160397 = gamma_aa[index]*gx*t160332;
                double t160398 = t160397+1.0;
                double t160399 = gamma_aa[index]*gx*t160332*3.0;
                double t160400 = gamma_aa[index]*gx*t160374*t160395*t160369;
                double t160401 = t160373*t160395*t160369*3.0;
                double t160402 = t160400+t160401+t160399+1.0;
                double t160403 = gamma_aa[index]*gx*t160332*4.0;
                double t160404 = gamma_aa[index]*gx*t160374*t160395*t160369*4.0;
                double t160405 = t160373*t160395*t160369*6.0;
                double t160406 = t160372*t160381*t160396;
                double t160407 = t160403+t160404+t160405+t160406+1.0;
                double t160408 = gamma_aa[index]*gx*t160332*2.0;
                double t160409 = t160373*t160395*t160369;
                double t160410 = t160408+t160409+1.0;
                v_gamma_aa_[index] = (rho_a[index]*t160368+rho_b[index]*(t160302-t160281*t160284*(t160302-c0f*log((t160285* \
                   (1.0/2.0))/(b1f*t160288+b3f*t160289+b2f*c*t160286+b4f*t160290*t160265)+1.0)*(a1f*c*t160286+1.0)*2.0) \
                   )-t160303*(t160320-t160331*t160325*t160326*t160284*(t160320-c0f*log((t160285*(1.0/2.0))/(b1f*t160306+ \
                   b3f*t160307+b2f*c*t160304+b4f*t160308*t160265)+1.0)*(a1f*c*t160304+1.0)*2.0)+(Aa*t160331*t160284*log((1.0/ \
                   2.0)/(Aa*(b1a*t160306+b3a*t160307+b2a*c*t160304+b4a*t160308*t160265))+1.0)*(t160325*t160326-1.0)*(a1a* \
                   c*t160304+1.0)*2.0)/d2fz0))*((ccab1*gcab*t160332*(1.0/2.0))/t160338-ccab4*t160341*t160342*1.0/(t160354* \
                   t160354)*(gcab*t160332*2.0+t160332*t160336*t160339*6.0+gcab*t160340*t160332*t160339*6.0+t160340*t160332* \
                   t160341*t160336*2.0)-ccab2*t160340*1.0/(t160345*t160345)*t160339*(gcab*t160332+t160332*t160336*t160339) \
                   +(ccab2*t160332*t160336*t160339)/t160345-ccab1*t160332*t160336*1.0/(t160338*t160338)*t160339*(1.0/ \
                   2.0)+(ccab3*gcab*t160340*t160332*t160339*(3.0/2.0))/t160349+(ccab4*t160340*t160332*t160341*t160336* \
                   2.0)/t160354-ccab3*gcab*t160340*t160336*t160339*1.0/(t160349*t160349)*(gcab*t160332*(3.0/2.0)+t160332* \
                   t160336*t160339*3.0+gcab*t160340*t160332*t160339*(3.0/2.0)))-rho_a[index]*t160368*((ccaa1*gcaa*t160332) \
                   /t160376-ccaa1*gamma_aa[index]*t160370*t160373*1.0/(t160376*t160376)+(ccaa2*gamma_aa[index]*t160370* \
                   t160373*2.0)/t160389-ccaa2*t160370*t160373*t160369*1.0/(t160389*t160389)*(gcaa*t160332*2.0+gamma_aa[index]* \
                   t160370*t160373*2.0)+(ccaa4*gamma_aa[index]*t160371*t160372*t160369*4.0)/t160386+(ccaa3*gcaa*t160370* \
                   t160374*t160369*3.0)/t160380-ccaa4*t160371*t160372*t160381*1.0/(t160386*t160386)*(gcaa*t160332*4.0+ \
                   gamma_aa[index]*t160370*t160373*1.2E1+gamma_aa[index]*t160371*t160372*t160369*4.0+gcaa*t160370*t160374* \
                   t160369*1.2E1)-ccaa3*gamma_aa[index]*gcaa*t160370*1.0/(t160380*t160380)*t160374*t160369*(gcaa*t160332* \
                   3.0+gamma_aa[index]*t160370*t160373*6.0+gcaa*t160370*t160374*t160369*3.0))-c0*pow(rho_a[index],4.0/ \
                   3.0)*(omega*t160391*(erf(pow(t160390,1.0/3.0)/omega)*(3.991211251234741E15/2.251799813685248E15)-omega* \
                   t160391*(-t160394+(omega*omega)*1.0/pow(t160390,2.0/3.0)*(t160394-1.0)*(1.0/2.0)+3.0/2.0))*(4.0/3.0) \
                   -1.0)*((cx1*gx*t160332)/t160398-cx1*gamma_aa[index]*t160373*t160395*1.0/(t160398*t160398)+(cx2*gamma_aa[index]* \
                   t160373*t160395*2.0)/t160410-cx2*1.0/(t160410*t160410)*t160373*t160395*t160369*(gx*t160332*2.0+gamma_aa[index]* \
                   t160373*t160395*2.0)+(cx4*gamma_aa[index]*t160372*t160369*t160396*4.0)/t160407+(cx3*gx*t160374*t160395* \
                   t160369*3.0)/t160402-cx4*1.0/(t160407*t160407)*t160372*t160381*t160396*(gx*t160332*4.0+gamma_aa[index]* \
                   t160373*t160395*1.2E1+gamma_aa[index]*t160372*t160369*t160396*4.0+gx*t160374*t160395*t160369*1.2E1) \
                   -cx3*gamma_aa[index]*gx*1.0/(t160402*t160402)*t160374*t160395*t160369*(gx*t160332*3.0+gamma_aa[index]* \
                   t160373*t160395*6.0+gx*t160374*t160395*t160369*3.0));
            } else if (rho_a[index] > cutoff_) {
                double t164265 = 1.0/pow(rho_a[index],1.0/3.0);
                double t164266 = c*t164265;
                double t164267 = sqrt(t164266);
                double t164268 = pow(t164266,3.0/2.0);
                double t164269 = c*c;
                double t164270 = 1.0/pow(rho_a[index],2.0/3.0);
                double t164271 = 1.0/c0p;
                double t164272 = b1p*t164267;
                double t164273 = b3p*t164268;
                double t164274 = b4p*t164270*t164269;
                double t164275 = b2p*c*t164265;
                double t164276 = t164272+t164273+t164274+t164275;
                double t164277 = 1.0/t164276;
                double t164278 = t164271*t164277*(1.0/2.0);
                double t164279 = t164278+1.0;
                double t164280 = log(t164279);
                double t164281 = a1p*c*t164265;
                double t164282 = t164281+1.0;
                double t164283 = 1.0/pow(rho_a[index],8.0/3.0);
                double t164284 = gamma_aa[index]*gamma_aa[index];
                double t164285 = gcaa*gcaa;
                double t164286 = t164285*t164285;
                double t164287 = 1.0/pow(rho_a[index],3.2E1/3.0);
                double t164288 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t164289 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t164290 = gamma_aa[index]*gcaa*t164283;
                double t164291 = t164290+1.0;
                double t164292 = gamma_aa[index]*gcaa*t164283*3.0;
                double t164293 = gamma_aa[index]*gcaa*t164284*t164285*t164289;
                double t164294 = t164284*t164285*t164288*3.0;
                double t164295 = t164292+t164293+t164294+1.0;
                double t164296 = t164284*t164284;
                double t164297 = gamma_aa[index]*gcaa*t164283*4.0;
                double t164298 = gamma_aa[index]*gcaa*t164284*t164285*t164289*4.0;
                double t164299 = t164284*t164285*t164288*6.0;
                double t164300 = t164286*t164287*t164296;
                double t164301 = t164300+t164297+t164298+t164299+1.0;
                double t164302 = gamma_aa[index]*gcaa*t164283*2.0;
                double t164303 = t164284*t164285*t164288;
                double t164304 = t164302+t164303+1.0;
                double t164305 = rho_a[index]*(8.334140006820045E15/1.40737488355328E14);
                double t164306 = 1.0/pow(t164305,1.0/3.0);
                double t164307 = 1.0/(omega*omega);
                double t164308 = pow(t164305,2.0/3.0);
                double t164309 = exp(-t164307*t164308);
                double t164310 = gx*gx;
                double t164311 = t164310*t164310;
                double t164312 = gamma_aa[index]*gx*t164283;
                double t164313 = t164312+1.0;
                double t164314 = gamma_aa[index]*gx*t164283*3.0;
                double t164315 = gamma_aa[index]*gx*t164310*t164284*t164289;
                double t164316 = t164310*t164284*t164288*3.0;
                double t164317 = t164314+t164315+t164316+1.0;
                double t164318 = gamma_aa[index]*gx*t164283*4.0;
                double t164319 = gamma_aa[index]*gx*t164310*t164284*t164289*4.0;
                double t164320 = t164310*t164284*t164288*6.0;
                double t164321 = t164311*t164287*t164296;
                double t164322 = t164320+t164321+t164318+t164319+1.0;
                double t164323 = gamma_aa[index]*gx*t164283*2.0;
                double t164324 = t164310*t164284*t164288;
                double t164325 = t164323+t164324+1.0;
                v_gamma_aa_[index] = -rho_a[index]*(((pow(2.0,1.0/3.0)*2.0-2.0)*(c0f*log((1.0/2.0)/(c0f*(b1f*t164267+ \
                   b3f*t164268+b2f*c*t164265+b4f*t164270*t164269))+1.0)*(a1f*c*t164265+1.0)*2.0-c0p*t164280*t164282*2.0) \
                   )/(two_13*2.0-2.0)+c0p*t164280*t164282*2.0)*((ccaa1*gcaa*t164283)/t164291+(ccaa2*gamma_aa[index]*t164285* \
                   t164288*2.0)/t164304-ccaa1*gamma_aa[index]*1.0/(t164291*t164291)*t164285*t164288-ccaa2*1.0/(t164304* \
                   t164304)*t164284*t164285*t164288*(gcaa*t164283*2.0+gamma_aa[index]*t164285*t164288*2.0)+(ccaa4*gamma_aa[index]* \
                   t164284*t164286*t164287*4.0)/t164301+(ccaa3*gcaa*t164284*t164285*t164289*3.0)/t164295-ccaa4*1.0/(t164301* \
                   t164301)*t164286*t164287*t164296*(gcaa*t164283*4.0+gamma_aa[index]*t164285*t164288*1.2E1+gamma_aa[index]* \
                   t164284*t164286*t164287*4.0+gcaa*t164284*t164285*t164289*1.2E1)-ccaa3*gamma_aa[index]*gcaa*t164284* \
                   t164285*1.0/(t164295*t164295)*t164289*(gcaa*t164283*3.0+gamma_aa[index]*t164285*t164288*6.0+gcaa*t164284* \
                   t164285*t164289*3.0))-c0*pow(rho_a[index],4.0/3.0)*(omega*t164306*(erf(pow(t164305,1.0/3.0)/omega) \
                   *(3.991211251234741E15/2.251799813685248E15)-omega*t164306*(-t164309+(omega*omega)*1.0/pow(t164305,2.0/ \
                   3.0)*(t164309-1.0)*(1.0/2.0)+3.0/2.0))*(4.0/3.0)-1.0)*((cx1*gx*t164283)/t164313-cx1*gamma_aa[index]* \
                   t164310*1.0/(t164313*t164313)*t164288+(cx2*gamma_aa[index]*t164310*t164288*2.0)/t164325-cx2*t164310* \
                   1.0/(t164325*t164325)*t164284*t164288*(gx*t164283*2.0+gamma_aa[index]*t164310*t164288*2.0)+(cx4*gamma_aa[index]* \
                   t164311*t164284*t164287*4.0)/t164322+(cx3*gx*t164310*t164284*t164289*3.0)/t164317-cx4*t164311*1.0/ \
                   (t164322*t164322)*t164287*t164296*(gx*t164283*4.0+gamma_aa[index]*t164310*t164288*1.2E1+gamma_aa[index]* \
                   t164311*t164284*t164287*4.0+gx*t164310*t164284*t164289*1.2E1)-cx3*gamma_aa[index]*gx*t164310*1.0/(t164317* \
                   t164317)*t164284*t164289*(gx*t164283*3.0+gamma_aa[index]*t164310*t164288*6.0+gx*t164310*t164284*t164289* \
                   3.0));
            } else if (rho_b[index] > cutoff_) {
                v_gamma_aa_[index] = 0.0;
            } else {
                v_gamma_aa_[index] = 0.0;
            } 

            //V_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_ab_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_ab_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_ab_[index] = 0.0;
            } else {
                v_gamma_ab_[index] = 0.0;
            } 

            //V_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t160413 = 1.0/pow(rho_a[index],1.0/3.0);
                double t160414 = c*t160413;
                double t160415 = sqrt(t160414);
                double t160416 = pow(t160414,3.0/2.0);
                double t160417 = c*c;
                double t160418 = 1.0/pow(rho_a[index],2.0/3.0);
                double t160419 = 1.0/c0p;
                double t160420 = b1p*t160415;
                double t160421 = b3p*t160416;
                double t160422 = b4p*t160417*t160418;
                double t160423 = b2p*c*t160413;
                double t160424 = t160420+t160421+t160422+t160423;
                double t160425 = 1.0/t160424;
                double t160426 = t160425*t160419*(1.0/2.0);
                double t160427 = t160426+1.0;
                double t160428 = log(t160427);
                double t160429 = a1p*c*t160413;
                double t160430 = t160429+1.0;
                double t160431 = pow(2.0,1.0/3.0);
                double t160432 = t160431*2.0;
                double t160433 = t160432-2.0;
                double t160434 = two_13*2.0;
                double t160435 = t160434-2.0;
                double t160436 = 1.0/t160435;
                double t160437 = 1.0/c0f;
                double t160438 = 1.0/pow(rho_b[index],1.0/3.0);
                double t160439 = c*t160438;
                double t160440 = sqrt(t160439);
                double t160441 = pow(t160439,3.0/2.0);
                double t160442 = 1.0/pow(rho_b[index],2.0/3.0);
                double t160443 = b1p*t160440;
                double t160444 = b3p*t160441;
                double t160445 = b4p*t160442*t160417;
                double t160446 = b2p*c*t160438;
                double t160447 = t160443+t160444+t160445+t160446;
                double t160448 = 1.0/t160447;
                double t160449 = t160419*t160448*(1.0/2.0);
                double t160450 = t160449+1.0;
                double t160451 = log(t160450);
                double t160452 = a1p*c*t160438;
                double t160453 = t160452+1.0;
                double t160454 = c0p*t160451*t160453*2.0;
                double t160455 = rho_a[index]+rho_b[index];
                double t160456 = 1.0/pow(t160455,1.0/3.0);
                double t160457 = c*t160456;
                double t160458 = sqrt(t160457);
                double t160459 = pow(t160457,3.0/2.0);
                double t160460 = 1.0/pow(t160455,2.0/3.0);
                double t160461 = b1p*t160458;
                double t160462 = b3p*t160459;
                double t160463 = b4p*t160460*t160417;
                double t160464 = b2p*c*t160456;
                double t160465 = t160461+t160462+t160463+t160464;
                double t160466 = 1.0/t160465;
                double t160467 = t160419*t160466*(1.0/2.0);
                double t160468 = t160467+1.0;
                double t160469 = log(t160468);
                double t160470 = a1p*c*t160456;
                double t160471 = t160470+1.0;
                double t160472 = c0p*t160471*t160469*2.0;
                double t160473 = rho_a[index]-rho_b[index];
                double t160474 = t160473*t160473;
                double t160475 = 1.0/t160455;
                double t160476 = t160473*t160475;
                double t160477 = 1.0/(t160455*t160455*t160455*t160455);
                double t160478 = t160474*t160474;
                double t160479 = t160476+1.0;
                double t160480 = pow(t160479,4.0/3.0);
                double t160481 = -t160476+1.0;
                double t160482 = pow(t160481,4.0/3.0);
                double t160483 = t160480+t160482-2.0;
                double t160484 = 1.0/pow(rho_b[index],8.0/3.0);
                double t160485 = 1.0/pow(rho_a[index],8.0/3.0);
                double t160486 = gamma_aa[index]*t160485*(1.0/2.0);
                double t160487 = gamma_bb[index]*t160484*(1.0/2.0);
                double t160488 = t160486+t160487;
                double t160489 = gcab*t160488;
                double t160490 = t160489+1.0;
                double t160491 = gcab*gcab;
                double t160492 = t160488*t160488;
                double t160493 = t160491*t160491;
                double t160494 = t160492*t160492;
                double t160495 = t160491*t160492;
                double t160496 = gcab*t160488*2.0;
                double t160497 = t160495+t160496+1.0;
                double t160498 = t160491*t160492*3.0;
                double t160499 = gcab*t160491*t160492*t160488;
                double t160500 = gcab*t160488*3.0;
                double t160501 = t160500+t160498+t160499+1.0;
                double t160502 = t160491*t160492*6.0;
                double t160503 = gcab*t160491*t160492*t160488*4.0;
                double t160504 = t160493*t160494;
                double t160505 = gcab*t160488*4.0;
                double t160506 = t160502+t160503+t160504+t160505+1.0;
                double t160507 = c0p*t160430*t160428*2.0;
                double t160508 = b1f*t160440;
                double t160509 = b3f*t160441;
                double t160510 = b4f*t160442*t160417;
                double t160511 = b2f*c*t160438;
                double t160512 = t160510+t160511+t160508+t160509;
                double t160513 = 1.0/t160512;
                double t160514 = t160513*t160437*(1.0/2.0);
                double t160515 = t160514+1.0;
                double t160516 = log(t160515);
                double t160517 = a1f*c*t160438;
                double t160518 = t160517+1.0;
                double t160519 = t160454-c0f*t160516*t160518*2.0;
                double t160520 = t160454-t160433*t160436*t160519;
                double t160521 = gamma_bb[index]*gamma_bb[index];
                double t160522 = gcaa*gcaa;
                double t160523 = t160522*t160522;
                double t160524 = 1.0/pow(rho_b[index],3.2E1/3.0);
                double t160525 = 1.0/pow(rho_b[index],1.6E1/3.0);
                double t160526 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]);
                double t160527 = gamma_bb[index]*gcaa*t160484;
                double t160528 = t160527+1.0;
                double t160529 = gamma_bb[index]*gcaa*t160484*3.0;
                double t160530 = gamma_bb[index]*gcaa*t160521*t160522*t160526;
                double t160531 = t160521*t160522*t160525*3.0;
                double t160532 = t160530+t160531+t160529+1.0;
                double t160533 = t160521*t160521;
                double t160534 = gamma_bb[index]*gcaa*t160484*4.0;
                double t160535 = gamma_bb[index]*gcaa*t160521*t160522*t160526*4.0;
                double t160536 = t160521*t160522*t160525*6.0;
                double t160537 = t160523*t160524*t160533;
                double t160538 = t160534+t160535+t160536+t160537+1.0;
                double t160539 = gamma_bb[index]*gcaa*t160484*2.0;
                double t160540 = t160521*t160522*t160525;
                double t160541 = t160540+t160539+1.0;
                double t160542 = rho_b[index]*(8.334140006820045E15/1.40737488355328E14);
                double t160543 = 1.0/pow(t160542,1.0/3.0);
                double t160544 = 1.0/(omega*omega);
                double t160545 = pow(t160542,2.0/3.0);
                double t160546 = exp(-t160544*t160545);
                double t160547 = gx*gx;
                double t160548 = t160547*t160547;
                double t160549 = gamma_bb[index]*gx*t160484;
                double t160550 = t160549+1.0;
                double t160551 = gamma_bb[index]*gx*t160484*3.0;
                double t160552 = gamma_bb[index]*gx*t160521*t160526*t160547;
                double t160553 = t160521*t160525*t160547*3.0;
                double t160554 = t160551+t160552+t160553+1.0;
                double t160555 = gamma_bb[index]*gx*t160484*4.0;
                double t160556 = gamma_bb[index]*gx*t160521*t160526*t160547*4.0;
                double t160557 = t160521*t160525*t160547*6.0;
                double t160558 = t160524*t160533*t160548;
                double t160559 = t160555+t160556+t160557+t160558+1.0;
                double t160560 = gamma_bb[index]*gx*t160484*2.0;
                double t160561 = t160521*t160525*t160547;
                double t160562 = t160560+t160561+1.0;
                v_gamma_bb_[index] = (rho_b[index]*t160520+rho_a[index]*(t160507-t160433*t160436*(t160507-c0f*log((t160437* \
                   (1.0/2.0))/(b1f*t160415+b3f*t160416+b2f*c*t160413+b4f*t160417*t160418)+1.0)*(a1f*c*t160413+1.0)*2.0) \
                   )-t160455*(t160472-t160436*t160483*t160477*t160478*(t160472-c0f*log((t160437*(1.0/2.0))/(b1f*t160458+ \
                   b3f*t160459+b2f*c*t160456+b4f*t160460*t160417)+1.0)*(a1f*c*t160456+1.0)*2.0)+(Aa*t160436*t160483*log((1.0/ \
                   2.0)/(Aa*(b1a*t160458+b3a*t160459+b2a*c*t160456+b4a*t160460*t160417))+1.0)*(t160477*t160478-1.0)*(a1a* \
                   c*t160456+1.0)*2.0)/d2fz0))*((ccab1*gcab*t160484*(1.0/2.0))/t160490-ccab4*1.0/(t160506*t160506)*t160493* \
                   t160494*(gcab*t160484*2.0+t160491*t160484*t160488*6.0+gcab*t160491*t160492*t160484*6.0+t160492*t160484* \
                   t160493*t160488*2.0)-ccab2*t160491*t160492*1.0/(t160497*t160497)*(gcab*t160484+t160491*t160484*t160488) \
                   -ccab1*1.0/(t160490*t160490)*t160491*t160484*t160488*(1.0/2.0)+(ccab2*t160491*t160484*t160488)/t160497+ \
                   (ccab3*gcab*t160491*t160492*t160484*(3.0/2.0))/t160501+(ccab4*t160492*t160484*t160493*t160488*2.0) \
                   /t160506-ccab3*gcab*1.0/(t160501*t160501)*t160491*t160492*t160488*(gcab*t160484*(3.0/2.0)+t160491* \
                   t160484*t160488*3.0+gcab*t160491*t160492*t160484*(3.0/2.0)))-rho_b[index]*t160520*((ccaa1*gcaa*t160484) \
                   /t160528+(ccaa2*gamma_bb[index]*t160522*t160525*2.0)/t160541-ccaa1*gamma_bb[index]*t160522*t160525* \
                   1.0/(t160528*t160528)-ccaa2*t160521*t160522*1.0/(t160541*t160541)*t160525*(gcaa*t160484*2.0+gamma_bb[index]* \
                   t160522*t160525*2.0)+(ccaa4*gamma_bb[index]*t160521*t160523*t160524*4.0)/t160538+(ccaa3*gcaa*t160521* \
                   t160522*t160526*3.0)/t160532-ccaa4*t160523*t160524*t160533*1.0/(t160538*t160538)*(gcaa*t160484*4.0+ \
                   gamma_bb[index]*t160522*t160525*1.2E1+gamma_bb[index]*t160521*t160523*t160524*4.0+gcaa*t160521*t160522* \
                   t160526*1.2E1)-ccaa3*gamma_bb[index]*gcaa*t160521*t160522*1.0/(t160532*t160532)*t160526*(gcaa*t160484* \
                   3.0+gamma_bb[index]*t160522*t160525*6.0+gcaa*t160521*t160522*t160526*3.0))-c0*pow(rho_b[index],4.0/ \
                   3.0)*(omega*t160543*(erf(pow(t160542,1.0/3.0)/omega)*(3.991211251234741E15/2.251799813685248E15)-omega* \
                   t160543*(-t160546+(omega*omega)*1.0/pow(t160542,2.0/3.0)*(t160546-1.0)*(1.0/2.0)+3.0/2.0))*(4.0/3.0) \
                   -1.0)*((cx1*gx*t160484)/t160550-cx1*gamma_bb[index]*1.0/(t160550*t160550)*t160525*t160547+(cx2*gamma_bb[index]* \
                   t160525*t160547*2.0)/t160562-cx2*t160521*t160525*1.0/(t160562*t160562)*t160547*(gx*t160484*2.0+gamma_bb[index]* \
                   t160525*t160547*2.0)+(cx4*gamma_bb[index]*t160521*t160524*t160548*4.0)/t160559+(cx3*gx*t160521*t160526* \
                   t160547*3.0)/t160554-cx4*t160524*t160533*t160548*1.0/(t160559*t160559)*(gx*t160484*4.0+gamma_bb[index]* \
                   t160525*t160547*1.2E1+gamma_bb[index]*t160521*t160524*t160548*4.0+gx*t160521*t160526*t160547*1.2E1) \
                   -cx3*gamma_bb[index]*gx*t160521*t160526*1.0/(t160554*t160554)*t160547*(gx*t160484*3.0+gamma_bb[index]* \
                   t160525*t160547*6.0+gx*t160521*t160526*t160547*3.0));
            } else if (rho_a[index] > cutoff_) {
                v_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                double t163512 = 1.0/pow(rho_b[index],1.0/3.0);
                double t163513 = c*t163512;
                double t163514 = sqrt(t163513);
                double t163515 = pow(t163513,3.0/2.0);
                double t163516 = c*c;
                double t163517 = 1.0/pow(rho_b[index],2.0/3.0);
                double t163518 = 1.0/c0p;
                double t163519 = b1p*t163514;
                double t163520 = b3p*t163515;
                double t163521 = b4p*t163516*t163517;
                double t163522 = b2p*c*t163512;
                double t163523 = t163520+t163521+t163522+t163519;
                double t163524 = 1.0/t163523;
                double t163525 = t163524*t163518*(1.0/2.0);
                double t163526 = t163525+1.0;
                double t163527 = log(t163526);
                double t163528 = a1p*c*t163512;
                double t163529 = t163528+1.0;
                double t163530 = 1.0/pow(rho_b[index],8.0/3.0);
                double t163531 = gamma_bb[index]*gamma_bb[index];
                double t163532 = gcaa*gcaa;
                double t163533 = t163532*t163532;
                double t163534 = 1.0/pow(rho_b[index],3.2E1/3.0);
                double t163535 = 1.0/pow(rho_b[index],1.6E1/3.0);
                double t163536 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]);
                double t163537 = gamma_bb[index]*gcaa*t163530;
                double t163538 = t163537+1.0;
                double t163539 = gamma_bb[index]*gcaa*t163530*3.0;
                double t163540 = gamma_bb[index]*gcaa*t163531*t163532*t163536;
                double t163541 = t163531*t163532*t163535*3.0;
                double t163542 = t163540+t163541+t163539+1.0;
                double t163543 = t163531*t163531;
                double t163544 = gamma_bb[index]*gcaa*t163530*4.0;
                double t163545 = gamma_bb[index]*gcaa*t163531*t163532*t163536*4.0;
                double t163546 = t163531*t163532*t163535*6.0;
                double t163547 = t163533*t163534*t163543;
                double t163548 = t163544+t163545+t163546+t163547+1.0;
                double t163549 = gamma_bb[index]*gcaa*t163530*2.0;
                double t163550 = t163531*t163532*t163535;
                double t163551 = t163550+t163549+1.0;
                double t163552 = rho_b[index]*(8.334140006820045E15/1.40737488355328E14);
                double t163553 = 1.0/pow(t163552,1.0/3.0);
                double t163554 = 1.0/(omega*omega);
                double t163555 = pow(t163552,2.0/3.0);
                double t163556 = exp(-t163554*t163555);
                double t163557 = gx*gx;
                double t163558 = t163557*t163557;
                double t163559 = gamma_bb[index]*gx*t163530;
                double t163560 = t163559+1.0;
                double t163561 = gamma_bb[index]*gx*t163530*3.0;
                double t163562 = gamma_bb[index]*gx*t163531*t163536*t163557;
                double t163563 = t163531*t163535*t163557*3.0;
                double t163564 = t163561+t163562+t163563+1.0;
                double t163565 = gamma_bb[index]*gx*t163530*4.0;
                double t163566 = gamma_bb[index]*gx*t163531*t163536*t163557*4.0;
                double t163567 = t163531*t163535*t163557*6.0;
                double t163568 = t163534*t163543*t163558;
                double t163569 = t163565+t163566+t163567+t163568+1.0;
                double t163570 = gamma_bb[index]*gx*t163530*2.0;
                double t163571 = t163531*t163535*t163557;
                double t163572 = t163570+t163571+1.0;
                v_gamma_bb_[index] = -rho_b[index]*(((pow(2.0,1.0/3.0)*2.0-2.0)*(c0f*log((1.0/2.0)/(c0f*(b1f*t163514+ \
                   b3f*t163515+b2f*c*t163512+b4f*t163516*t163517))+1.0)*(a1f*c*t163512+1.0)*2.0-c0p*t163527*t163529*2.0) \
                   )/(two_13*2.0-2.0)+c0p*t163527*t163529*2.0)*((ccaa1*gcaa*t163530)/t163538+(ccaa2*gamma_bb[index]*t163532* \
                   t163535*2.0)/t163551-ccaa1*gamma_bb[index]*t163532*t163535*1.0/(t163538*t163538)-ccaa2*t163531*t163532* \
                   1.0/(t163551*t163551)*t163535*(gcaa*t163530*2.0+gamma_bb[index]*t163532*t163535*2.0)+(ccaa4*gamma_bb[index]* \
                   t163531*t163533*t163534*4.0)/t163548+(ccaa3*gcaa*t163531*t163532*t163536*3.0)/t163542-ccaa4*t163533* \
                   t163534*t163543*1.0/(t163548*t163548)*(gcaa*t163530*4.0+gamma_bb[index]*t163532*t163535*1.2E1+gamma_bb[index]* \
                   t163531*t163533*t163534*4.0+gcaa*t163531*t163532*t163536*1.2E1)-ccaa3*gamma_bb[index]*gcaa*t163531* \
                   t163532*1.0/(t163542*t163542)*t163536*(gcaa*t163530*3.0+gamma_bb[index]*t163532*t163535*6.0+gcaa*t163531* \
                   t163532*t163536*3.0))-c0*pow(rho_b[index],4.0/3.0)*(omega*t163553*(erf(pow(t163552,1.0/3.0)/omega) \
                   *(3.991211251234741E15/2.251799813685248E15)-omega*t163553*(-t163556+(omega*omega)*1.0/pow(t163552,2.0/ \
                   3.0)*(t163556-1.0)*(1.0/2.0)+3.0/2.0))*(4.0/3.0)-1.0)*((cx1*gx*t163530)/t163560-cx1*gamma_bb[index]* \
                   1.0/(t163560*t163560)*t163535*t163557+(cx2*gamma_bb[index]*t163535*t163557*2.0)/t163572-cx2*t163531* \
                   t163535*1.0/(t163572*t163572)*t163557*(gx*t163530*2.0+gamma_bb[index]*t163535*t163557*2.0)+(cx4*gamma_bb[index]* \
                   t163531*t163534*t163558*4.0)/t163569+(cx3*gx*t163531*t163536*t163557*3.0)/t163564-cx4*t163534*t163543* \
                   t163558*1.0/(t163569*t163569)*(gx*t163530*4.0+gamma_bb[index]*t163535*t163557*1.2E1+gamma_bb[index]* \
                   t163531*t163534*t163558*4.0+gx*t163531*t163536*t163557*1.2E1)-cx3*gamma_bb[index]*gx*t163531*t163536* \
                   1.0/(t163564*t163564)*t163557*(gx*t163530*3.0+gamma_bb[index]*t163535*t163557*6.0+gx*t163531*t163536* \
                   t163557*3.0));
            } else {
                v_gamma_bb_[index] = 0.0;
            } 
        }
        if (is_meta_) {

            //V_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_tau_a_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_tau_a_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_tau_a_[index] = 0.0;
            } else {
                v_tau_a_[index] = 0.0;
            } 

            //V_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_tau_b_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_tau_b_[index] = 0.0;
            } else {
                v_tau_b_[index] = 0.0;
            } 
        }
    }
    //Second Partials
    for (int index = 0; index < ntrue && deriv_ >= 2; index++) {

        //V_rho_a_rho_a
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t160566 = rho_a[index]+rho_b[index];
            double t160567 = 1.0/pow(t160566,1.0/3.0);
            double t160568 = c*t160567;
            double t160569 = sqrt(t160568);
            double t160570 = b1p*t160569;
            double t160571 = pow(t160568,3.0/2.0);
            double t160572 = b3p*t160571;
            double t160573 = c*c;
            double t160574 = 1.0/pow(t160566,2.0/3.0);
            double t160575 = b4p*t160573*t160574;
            double t160576 = b2p*c*t160567;
            double t160577 = t160570+t160572+t160575+t160576;
            double t160578 = 1.0/pow(t160566,4.0/3.0);
            double t160579 = 1.0/c0p;
            double t160580 = 1.0/t160577;
            double t160581 = t160580*t160579*(1.0/2.0);
            double t160582 = t160581+1.0;
            double t160583 = a1p*c*t160567;
            double t160584 = t160583+1.0;
            double t160585 = rho_a[index]-rho_b[index];
            double t160586 = t160585*t160585;
            double t160587 = 1.0/t160566;
            double t160588 = t160585*t160587;
            double t160589 = two_13*2.0;
            double t160590 = t160589-2.0;
            double t160591 = 1.0/t160590;
            double t160592 = 1.0/c0f;
            double t160593 = b1f*t160569;
            double t160594 = b3f*t160571;
            double t160595 = b4f*t160573*t160574;
            double t160596 = b2f*c*t160567;
            double t160597 = t160593+t160594+t160595+t160596;
            double t160598 = 1.0/t160597;
            double t160599 = t160592*t160598*(1.0/2.0);
            double t160600 = t160599+1.0;
            double t160601 = log(t160600);
            double t160602 = a1f*c*t160567;
            double t160603 = t160602+1.0;
            double t160604 = log(t160582);
            double t160614 = c0f*t160601*t160603*2.0;
            double t160615 = c0p*t160604*t160584*2.0;
            double t160605 = t160614-t160615;
            double t160606 = t160588+1.0;
            double t160607 = pow(t160606,4.0/3.0);
            double t160608 = -t160588+1.0;
            double t160609 = pow(t160608,4.0/3.0);
            double t160610 = t160607+t160609-2.0;
            double t160611 = 1.0/(t160566*t160566);
            double t160642 = t160611*t160585;
            double t160612 = -t160642+t160587;
            double t160613 = 1.0/(t160566*t160566*t160566*t160566);
            double t160616 = t160586*t160586;
            double t160617 = 1.0/pow(t160566,5.0/3.0);
            double t160618 = 1.0/sqrt(t160568);
            double t160619 = 1.0/t160582;
            double t160620 = 1.0/(t160577*t160577);
            double t160621 = b4p*t160617*t160573*(2.0/3.0);
            double t160622 = b2p*c*t160578*(1.0/3.0);
            double t160623 = b1p*c*t160618*t160578*(1.0/6.0);
            double t160624 = b3p*c*t160569*t160578*(1.0/2.0);
            double t160625 = t160621+t160622+t160623+t160624;
            double t160626 = t160620*t160625*t160619*t160584;
            double t160627 = 1.0/(t160566*t160566*t160566*t160566*t160566);
            double t160628 = 1.0/d2fz0;
            double t160629 = 1.0/Aa;
            double t160630 = b1a*t160569;
            double t160631 = b3a*t160571;
            double t160632 = b4a*t160573*t160574;
            double t160633 = b2a*c*t160567;
            double t160634 = t160630+t160631+t160632+t160633;
            double t160635 = 1.0/t160634;
            double t160636 = t160635*t160629*(1.0/2.0);
            double t160637 = t160636+1.0;
            double t160638 = log(t160637);
            double t160639 = a1a*c*t160567;
            double t160640 = t160639+1.0;
            double t160641 = pow(t160606,1.0/3.0);
            double t160643 = t160612*t160641*(4.0/3.0);
            double t160644 = pow(t160608,1.0/3.0);
            double t160719 = t160612*t160644*(4.0/3.0);
            double t160645 = t160643-t160719;
            double t160646 = t160613*t160616;
            double t160647 = t160646-1.0;
            double t160648 = 1.0/pow(rho_a[index],1.0/3.0);
            double t160649 = c*t160648;
            double t160650 = sqrt(t160649);
            double t160651 = b1f*t160650;
            double t160652 = pow(t160649,3.0/2.0);
            double t160653 = b3f*t160652;
            double t160654 = 1.0/pow(rho_a[index],2.0/3.0);
            double t160655 = b4f*t160573*t160654;
            double t160656 = b2f*c*t160648;
            double t160657 = t160651+t160653+t160655+t160656;
            double t160658 = 1.0/pow(rho_a[index],4.0/3.0);
            double t160659 = b1p*t160650;
            double t160660 = b3p*t160652;
            double t160661 = b4p*t160573*t160654;
            double t160662 = b2p*c*t160648;
            double t160663 = t160660+t160661+t160662+t160659;
            double t160664 = 1.0/pow(rho_a[index],5.0/3.0);
            double t160665 = 1.0/sqrt(t160649);
            double t160666 = 1.0/t160657;
            double t160667 = t160592*t160666*(1.0/2.0);
            double t160668 = t160667+1.0;
            double t160669 = 1.0/t160663;
            double t160670 = t160579*t160669*(1.0/2.0);
            double t160671 = t160670+1.0;
            double t160672 = a1p*c*t160648;
            double t160673 = t160672+1.0;
            double t160674 = 1.0/t160671;
            double t160675 = 1.0/(t160663*t160663);
            double t160676 = b4p*t160573*t160664*(2.0/3.0);
            double t160677 = b2p*c*t160658*(1.0/3.0);
            double t160678 = b1p*c*t160665*t160658*(1.0/6.0);
            double t160679 = b3p*c*t160650*t160658*(1.0/2.0);
            double t160680 = t160676+t160677+t160678+t160679;
            double t160681 = t160680*t160673*t160674*t160675;
            double t160682 = log(t160671);
            double t160683 = pow(2.0,1.0/3.0);
            double t160684 = t160683*2.0;
            double t160685 = t160684-2.0;
            double t160686 = log(t160668);
            double t160687 = a1f*c*t160648;
            double t160688 = t160687+1.0;
            double t160689 = gcab*gcab;
            double t160693 = 1.0/pow(rho_a[index],8.0/3.0);
            double t160694 = gamma_aa[index]*t160693*(1.0/2.0);
            double t160695 = 1.0/pow(rho_b[index],8.0/3.0);
            double t160696 = gamma_bb[index]*t160695*(1.0/2.0);
            double t160690 = t160694+t160696;
            double t160691 = t160690*t160690;
            double t160692 = 1.0/pow(rho_a[index],1.1E1/3.0);
            double t160697 = t160689*t160689;
            double t160698 = t160691*t160691;
            double t160699 = t160691*t160689*6.0;
            double t160700 = gcab*t160690*t160691*t160689*4.0;
            double t160701 = t160697*t160698;
            double t160702 = gcab*t160690*4.0;
            double t160703 = t160700+t160701+t160702+t160699+1.0;
            double t160704 = gcab*t160690;
            double t160705 = t160704+1.0;
            double t160706 = t160691*t160689;
            double t160707 = gcab*t160690*2.0;
            double t160708 = t160706+t160707+1.0;
            double t160709 = t160691*t160689*3.0;
            double t160710 = gcab*t160690*t160691*t160689;
            double t160711 = gcab*t160690*3.0;
            double t160712 = t160710+t160711+t160709+1.0;
            double t160713 = 1.0/t160708;
            double t160714 = 1.0/t160712;
            double t160715 = 1.0/t160705;
            double t160716 = 1.0/t160703;
            double t160717 = 1.0/pow(t160566,7.0/3.0);
            double t160718 = 1.0/pow(t160566,8.0/3.0);
            double t160720 = 1.0/t160600;
            double t160721 = 1.0/(t160597*t160597);
            double t160722 = b4f*t160617*t160573*(2.0/3.0);
            double t160723 = b2f*c*t160578*(1.0/3.0);
            double t160724 = b1f*c*t160618*t160578*(1.0/6.0);
            double t160725 = b3f*c*t160569*t160578*(1.0/2.0);
            double t160726 = t160722+t160723+t160724+t160725;
            double t160727 = a1f*c*c0f*t160601*t160578*(2.0/3.0);
            double t160729 = t160603*t160720*t160721*t160726;
            double t160730 = a1p*c*c0p*t160604*t160578*(2.0/3.0);
            double t160728 = -t160730+t160626+t160727-t160729;
            double t160731 = t160625*t160625;
            double t160732 = 1.0/pow(t160568,3.0/2.0);
            double t160733 = b4p*t160573*t160718*(1.0E1/9.0);
            double t160734 = b2p*c*t160717*(4.0/9.0);
            double t160735 = b1p*c*t160618*t160717*(2.0/9.0);
            double t160736 = b3p*c*t160717*t160569*(2.0/3.0);
            double t160737 = b3p*t160573*t160618*t160718*(1.0/1.2E1);
            double t160738 = t160733+t160734+t160735+t160736+t160737-b1p*t160732*t160573*t160718*(1.0/3.6E1);
            double t160739 = 1.0/(t160577*t160577*t160577);
            double t160740 = t160731*t160619*t160584*t160739*2.0;
            double t160741 = t160726*t160726;
            double t160742 = 1.0/(t160582*t160582);
            double t160743 = 1.0/(t160577*t160577*t160577*t160577);
            double t160744 = t160730-t160626-t160727+t160729;
            double t160745 = t160611*2.0;
            double t160746 = 1.0/(t160566*t160566*t160566);
            double t160753 = t160746*t160585*2.0;
            double t160747 = -t160753+t160745;
            double t160748 = t160612*t160612;
            double t160749 = a1p*c*c0p*t160604*t160717*(8.0/9.0);
            double t160750 = 1.0/(t160566*t160566*t160566*t160566*t160566*t160566);
            double t160751 = t160616*t160627*4.0;
            double t160761 = t160613*t160585*t160586*4.0;
            double t160752 = t160751-t160761;
            double t160754 = t160644*t160747*(4.0/3.0);
            double t160755 = 1.0/pow(t160606,2.0/3.0);
            double t160756 = t160755*t160748*(4.0/9.0);
            double t160757 = 1.0/pow(t160608,2.0/3.0);
            double t160758 = t160748*t160757*(4.0/9.0);
            double t160759 = t160754+t160756+t160758-t160641*t160747*(4.0/3.0);
            double t160760 = 1.0/t160637;
            double t160762 = 1.0/(t160634*t160634);
            double t160763 = b4a*t160617*t160573*(2.0/3.0);
            double t160764 = b2a*c*t160578*(1.0/3.0);
            double t160765 = b1a*c*t160618*t160578*(1.0/6.0);
            double t160766 = b3a*c*t160569*t160578*(1.0/2.0);
            double t160767 = t160763+t160764+t160765+t160766;
            double t160768 = t160767*t160767;
            double t160769 = t160620*t160619*t160584*t160738;
            double t160770 = 1.0/t160668;
            double t160771 = b4f*t160573*t160664*(2.0/3.0);
            double t160772 = b2f*c*t160658*(1.0/3.0);
            double t160773 = b1f*c*t160665*t160658*(1.0/6.0);
            double t160774 = b3f*c*t160650*t160658*(1.0/2.0);
            double t160775 = t160771+t160772+t160773+t160774;
            double t160776 = 1.0/(t160657*t160657);
            double t160777 = 1.0/pow(rho_a[index],7.0/3.0);
            double t160778 = 1.0/pow(t160649,3.0/2.0);
            double t160779 = t160775*t160775;
            double t160780 = t160680*t160680;
            double t160781 = 1.0/(t160663*t160663*t160663);
            double t160782 = t160780*t160673*t160781*t160674*2.0;
            double t160783 = b4p*t160573*t160693*(1.0E1/9.0);
            double t160784 = b2p*c*t160777*(4.0/9.0);
            double t160785 = b3p*t160573*t160665*t160693*(1.0/1.2E1);
            double t160786 = b1p*c*t160665*t160777*(2.0/9.0);
            double t160787 = b3p*c*t160650*t160777*(2.0/3.0);
            double t160905 = b1p*t160573*t160693*t160778*(1.0/3.6E1);
            double t160788 = -t160905+t160783+t160784+t160785+t160786+t160787;
            double t160789 = 1.0/(t160671*t160671);
            double t160790 = 1.0/(t160663*t160663*t160663*t160663);
            double t160791 = a1p*c*c0p*t160682*t160777*(8.0/9.0);
            double t160792 = a1f*c*c0f*t160658*t160686*(2.0/3.0);
            double t160793 = a1p*c*c0p*t160682*t160658*(2.0/3.0);
            double t160794 = t160731*t160742*t160743*t160584*t160579*(1.0/2.0);
            double t160866 = t160770*t160775*t160776*t160688;
            double t160795 = t160681+t160792-t160793-t160866;
            double t160796 = gamma_aa[index]*gamma_aa[index];
            double t160797 = gcaa*gcaa;
            double t160798 = t160796*t160796;
            double t160799 = t160797*t160797;
            double t160800 = 1.0/pow(rho_a[index],3.2E1/3.0);
            double t160801 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]);
            double t160802 = 1.0/pow(rho_a[index],1.6E1/3.0);
            double t160803 = c0f*t160686*t160688*2.0;
            double t160805 = c0p*t160673*t160682*2.0;
            double t160804 = t160803-t160805;
            double t160806 = 1.0/pow(rho_b[index],1.0/3.0);
            double t160807 = c*t160806;
            double t160808 = sqrt(t160807);
            double t160809 = pow(t160807,3.0/2.0);
            double t160810 = 1.0/pow(rho_b[index],2.0/3.0);
            double t160811 = b1p*t160808;
            double t160812 = b3p*t160809;
            double t160813 = b4p*t160810*t160573;
            double t160814 = b2p*c*t160806;
            double t160815 = t160811+t160812+t160813+t160814;
            double t160816 = 1.0/t160815;
            double t160817 = t160816*t160579*(1.0/2.0);
            double t160818 = t160817+1.0;
            double t160819 = log(t160818);
            double t160820 = a1p*c*t160806;
            double t160821 = t160820+1.0;
            double t160822 = c0p*t160821*t160819*2.0;
            double t160823 = t160610*t160613*t160605*t160616*t160591;
            double t160824 = Aa*t160610*t160640*t160591*t160628*t160638*t160647*2.0;
            double t160825 = gamma_aa[index]*gcab*t160692*(1.6E1/3.0);
            double t160826 = gamma_aa[index]*gcab*t160691*t160692*t160689*1.6E1;
            double t160827 = gamma_aa[index]*t160690*t160691*t160692*t160697*(1.6E1/3.0);
            double t160828 = gamma_aa[index]*t160690*t160692*t160689*1.6E1;
            double t160829 = t160825+t160826+t160827+t160828;
            double t160830 = 1.0/(t160705*t160705);
            double t160831 = 1.0/pow(rho_a[index],2.2E1/3.0);
            double t160832 = gamma_aa[index]*gcab*t160692*(8.0/3.0);
            double t160833 = gamma_aa[index]*t160690*t160692*t160689*(8.0/3.0);
            double t160834 = t160832+t160833;
            double t160835 = 1.0/(t160712*t160712);
            double t160836 = 1.0/pow(rho_a[index],1.4E1/3.0);
            double t160837 = 1.0/(t160703*t160703);
            double t160838 = 1.0/(t160708*t160708);
            double t160839 = gamma_aa[index]*gcab*t160692*4.0;
            double t160840 = gamma_aa[index]*gcab*t160691*t160692*t160689*4.0;
            double t160841 = gamma_aa[index]*t160690*t160692*t160689*8.0;
            double t160842 = t160840+t160841+t160839;
            double t160843 = t160804*t160591*t160685;
            double t160844 = t160805+t160843;
            double t160845 = gamma_aa[index]*gcaa*t160693*4.0;
            double t160846 = gamma_aa[index]*gcaa*t160801*t160796*t160797*4.0;
            double t160847 = t160802*t160796*t160797*6.0;
            double t160848 = t160800*t160798*t160799;
            double t160849 = t160845+t160846+t160847+t160848+1.0;
            double t160850 = 1.0/t160849;
            double t160851 = gamma_aa[index]*gcaa*t160693;
            double t160852 = t160851+1.0;
            double t160853 = 1.0/t160852;
            double t160854 = gamma_aa[index]*gcaa*t160693*3.0;
            double t160855 = gamma_aa[index]*gcaa*t160801*t160796*t160797;
            double t160856 = t160802*t160796*t160797*3.0;
            double t160857 = t160854+t160855+t160856+1.0;
            double t160858 = 1.0/t160857;
            double t160859 = gamma_aa[index]*gcaa*t160693*2.0;
            double t160860 = t160802*t160796*t160797;
            double t160861 = t160860+t160859+1.0;
            double t160862 = 1.0/t160861;
            double t160863 = 1.0/pow(rho_a[index],1.9E1/3.0);
            double t160864 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]*rho_a[index]);
            double t160865 = 1.0/pow(rho_a[index],3.5E1/3.0);
            double t160867 = t160591*t160685*t160795;
            double t160868 = ccaa4*t160850*t160865*t160798*t160799*(3.2E1/3.0);
            double t160869 = ccaa1*gamma_aa[index]*gcaa*t160853*t160692*(8.0/3.0);
            double t160870 = ccaa3*gamma_aa[index]*gcaa*t160864*t160858*t160796*t160797*8.0;
            double t160871 = ccaa2*t160862*t160863*t160796*t160797*(1.6E1/3.0);
            double t160872 = 1.0/(t160852*t160852);
            double t160873 = gamma_aa[index]*gcaa*t160692*8.0;
            double t160874 = gamma_aa[index]*gcaa*t160864*t160796*t160797*8.0;
            double t160875 = t160863*t160796*t160797*1.6E1;
            double t160876 = t160873+t160874+t160875;
            double t160877 = 1.0/(t160857*t160857);
            double t160878 = gamma_aa[index]*gcaa*t160692*(3.2E1/3.0);
            double t160879 = gamma_aa[index]*gcaa*t160864*t160796*t160797*3.2E1;
            double t160880 = t160863*t160796*t160797*3.2E1;
            double t160881 = t160865*t160798*t160799*(3.2E1/3.0);
            double t160882 = t160880+t160881+t160878+t160879;
            double t160883 = 1.0/(t160849*t160849);
            double t160884 = gamma_aa[index]*gcaa*t160692*(1.6E1/3.0);
            double t160885 = t160863*t160796*t160797*(1.6E1/3.0);
            double t160886 = t160884+t160885;
            double t160887 = 1.0/(t160861*t160861);
            double t160888 = t160870+t160871+t160868+t160869-ccaa1*t160863*t160872*t160796*t160797*(8.0/3.0)- \
               ccaa4*t160800*t160882*t160883*t160798*t160799-ccaa2*t160802*t160796*t160886*t160797*t160887-ccaa3* \
               gamma_aa[index]*gcaa*t160801*t160876*t160796*t160877*t160797;
            double t160889 = -t160681+t160793+t160867;
            double t160890 = 1.0/pow(rho_a[index],1.0E1);
            double t160891 = 1.0/pow(rho_a[index],3.8E1/3.0);
            double t160892 = ccaa4*t160800*t160850*t160798*t160799;
            double t160893 = ccaa1*gamma_aa[index]*gcaa*t160853*t160693;
            double t160894 = ccaa3*gamma_aa[index]*gcaa*t160801*t160858*t160796*t160797;
            double t160895 = ccaa2*t160802*t160862*t160796*t160797;
            double t160896 = ccaa0+t160892+t160893+t160894+t160895;
            double t160897 = 1.0/(t160657*t160657*t160657);
            double t160898 = b4f*t160573*t160693*(1.0E1/9.0);
            double t160899 = b2f*c*t160777*(4.0/9.0);
            double t160900 = b3f*t160573*t160665*t160693*(1.0/1.2E1);
            double t160901 = b1f*c*t160665*t160777*(2.0/9.0);
            double t160902 = b3f*c*t160650*t160777*(2.0/3.0);
            double t160903 = t160900+t160901+t160902+t160898+t160899-b1f*t160573*t160693*t160778*(1.0/3.6E1);
            double t160904 = t160903*t160770*t160776*t160688;
            double t160906 = t160673*t160674*t160675*t160788;
            double t160907 = 1.0/(t160668*t160668);
            double t160908 = 1.0/(t160657*t160657*t160657*t160657);
            double t160909 = t160592*t160907*t160908*t160688*t160779*(1.0/2.0);
            double t160910 = t160780*t160673*t160790*t160579*t160789*(1.0/2.0);
            double t160911 = a1f*c*t160770*t160658*t160775*t160776*(2.0/3.0);
            double t160912 = a1p*c*t160680*t160674*t160675*t160658*(2.0/3.0);
            double t160913 = rho_a[index]*(8.334140006820045E15/1.40737488355328E14);
            double t160914 = 1.0/(omega*omega);
            double t160915 = pow(t160913,2.0/3.0);
            double t160918 = t160914*t160915;
            double t160916 = exp(-t160918);
            double t160917 = 1.0/pow(t160913,1.0/3.0);
            double t160919 = omega*omega;
            double t160920 = t160916-1.0;
            double t160921 = 1.0/pow(t160913,2.0/3.0);
            double t160922 = 1.0/pow(t160913,4.0/3.0);
            double t160923 = 1.0/omega;
            double t160924 = t160920*t160921*t160919*(1.0/2.0);
            double t160925 = t160924-t160916+3.0/2.0;
            double t160926 = gx*gx;
            double t160927 = t160926*t160926;
            double t160928 = pow(rho_a[index],1.0/3.0);
            double t160929 = pow(t160913,1.0/3.0);
            double t160930 = t160923*t160929;
            double t160931 = erf(t160930);
            double t160932 = t160931*(3.991211251234741E15/2.251799813685248E15);
            double t160964 = omega*t160925*t160917;
            double t160933 = t160932-t160964;
            double t160934 = gamma_aa[index]*gx*t160693*4.0;
            double t160935 = gamma_aa[index]*gx*t160801*t160926*t160796*4.0;
            double t160936 = t160802*t160926*t160796*6.0;
            double t160937 = t160800*t160927*t160798;
            double t160938 = t160934+t160935+t160936+t160937+1.0;
            double t160939 = 1.0/t160938;
            double t160940 = gamma_aa[index]*gx*t160693;
            double t160941 = t160940+1.0;
            double t160942 = 1.0/t160941;
            double t160943 = gamma_aa[index]*gx*t160693*3.0;
            double t160944 = gamma_aa[index]*gx*t160801*t160926*t160796;
            double t160945 = t160802*t160926*t160796*3.0;
            double t160946 = t160943+t160944+t160945+1.0;
            double t160947 = 1.0/t160946;
            double t160948 = gamma_aa[index]*gx*t160693*2.0;
            double t160949 = t160802*t160926*t160796;
            double t160950 = t160948+t160949+1.0;
            double t160951 = 1.0/t160950;
            double t160952 = 1.0/rho_a[index];
            double t160953 = t160916*t160952*(1.0/3.0);
            double t160954 = 1.0/pow(t160913,5.0/3.0);
            double t160955 = t160920*t160954*t160919*(2.778046668940015E15/1.40737488355328E14);
            double t160959 = t160914*t160916*t160917*(2.778046668940015E15/7.0368744177664E13);
            double t160956 = t160953+t160955-t160959;
            double t160957 = 1.0/sqrt(3.141592653589793);
            double t160958 = omega*t160922*t160925*(2.778046668940015E15/1.40737488355328E14);
            double t160960 = omega*t160917*t160956;
            double t160961 = t160921*t160923*t160916*t160957*(1.108777112152858E31/1.584563250285287E29);
            double t160962 = t160960+t160961+t160958;
            double t160963 = 1.0/pow(t160913,7.0/3.0);
            double t160965 = cx4*t160800*t160927*t160939*t160798;
            double t160966 = cx1*gamma_aa[index]*gx*t160942*t160693;
            double t160967 = cx3*gamma_aa[index]*gx*t160801*t160926*t160947*t160796;
            double t160968 = cx2*t160802*t160951*t160926*t160796;
            double t160969 = cx0+t160965+t160966+t160967+t160968;
            double t160970 = pow(rho_a[index],4.0/3.0);
            double t160971 = omega*t160922*t160933*(2.778046668940015E15/1.05553116266496E14);
            double t160972 = cx4*t160927*t160865*t160939*t160798*(3.2E1/3.0);
            double t160973 = cx1*gamma_aa[index]*gx*t160942*t160692*(8.0/3.0);
            double t160974 = cx3*gamma_aa[index]*gx*t160926*t160864*t160947*t160796*8.0;
            double t160975 = cx2*t160951*t160863*t160926*t160796*(1.6E1/3.0);
            double t160976 = 1.0/(t160941*t160941);
            double t160977 = gamma_aa[index]*gx*t160692*8.0;
            double t160978 = gamma_aa[index]*gx*t160926*t160864*t160796*8.0;
            double t160979 = t160863*t160926*t160796*1.6E1;
            double t160980 = t160977+t160978+t160979;
            double t160981 = 1.0/(t160946*t160946);
            double t160982 = gamma_aa[index]*gx*t160692*(3.2E1/3.0);
            double t160983 = gamma_aa[index]*gx*t160926*t160864*t160796*3.2E1;
            double t160984 = t160863*t160926*t160796*3.2E1;
            double t160985 = t160927*t160865*t160798*(3.2E1/3.0);
            double t160986 = t160982+t160983+t160984+t160985;
            double t160987 = 1.0/(t160938*t160938);
            double t160988 = gamma_aa[index]*gx*t160692*(1.6E1/3.0);
            double t160989 = t160863*t160926*t160796*(1.6E1/3.0);
            double t160990 = t160988+t160989;
            double t160991 = 1.0/(t160950*t160950);
            double t160992 = t160972+t160973+t160974+t160975-cx1*t160863*t160926*t160796*t160976*(8.0/3.0)-cx2* \
               t160802*t160926*t160990*t160991*t160796-cx4*t160800*t160927*t160986*t160798*t160987-cx3*gamma_aa[index]* \
               gx*t160801*t160926*t160980*t160981*t160796;
            double t160993 = t160971-omega*t160917*t160962*(4.0/3.0);
            double t160994 = omega*t160933*t160917*(4.0/3.0);
            double t160995 = t160994-1.0;
            v_rho_a_rho_a_[index] = (rho_a[index]*t160844+rho_b[index]*(t160822-t160591*t160685*(t160822-c0f* \
               log((t160592*(1.0/2.0))/(b1f*t160808+b3f*t160809+b2f*c*t160806+b4f*t160810*t160573)+1.0)*(a1f*c*t160806+ \
               1.0)*2.0))-t160566*(t160615+t160823+t160824))*(-ccab2*t160691*t160838*t160689*(gamma_aa[index]*gcab* \
               t160836*(8.8E1/9.0)+t160831*t160796*t160689*(3.2E1/9.0)+gamma_aa[index]*t160690*t160836*t160689*(8.8E1/ \
               9.0))+ccab2*1.0/(t160708*t160708*t160708)*(t160834*t160834)*t160691*t160689*2.0+ccab4*1.0/(t160703* \
               t160703*t160703)*(t160829*t160829)*t160697*t160698*2.0+ccab1*gamma_aa[index]*gcab*t160715*t160836* \
               (4.4E1/9.0)-ccab1*t160830*t160831*t160796*t160689*(3.2E1/9.0)+ccab2*t160713*t160831*t160796*t160689* \
               (3.2E1/9.0)-ccab4*t160837*t160697*t160698*(gamma_aa[index]*gcab*t160836*(1.76E2/9.0)+t160831*t160796* \
               t160689*(6.4E1/3.0)+gamma_aa[index]*t160690*t160836*t160689*(1.76E2/3.0)+t160831*t160691*t160697*t160796* \
               (6.4E1/3.0)+gamma_aa[index]*gcab*t160691*t160836*t160689*(1.76E2/3.0)+gamma_aa[index]*t160690*t160691* \
               t160836*t160697*(1.76E2/9.0)+gcab*t160831*t160690*t160796*t160689*(1.28E2/3.0))+ccab4*t160831*t160716* \
               t160691*t160697*t160796*(6.4E1/3.0)-ccab1*gamma_aa[index]*t160830*t160690*t160836*t160689*(4.4E1/9.0) \
               +ccab2*gamma_aa[index]*t160713*t160690*t160836*t160689*(8.8E1/9.0)+ccab3*gcab*1.0/(t160712*t160712* \
               t160712)*(t160842*t160842)*t160690*t160691*t160689*2.0+ccab3*gamma_aa[index]*gcab*t160714*t160691* \
               t160836*t160689*(4.4E1/3.0)+ccab4*gamma_aa[index]*t160716*t160690*t160691*t160836*t160697*(1.76E2/ \
               9.0)-ccab2*gamma_aa[index]*t160690*t160834*t160692*t160838*t160689*(1.6E1/3.0)+ccab3*gcab*t160714* \
               t160831*t160690*t160796*t160689*(3.2E1/3.0)+ccab1*gcab*1.0/(t160705*t160705*t160705)*t160831*t160690* \
               t160796*t160689*(3.2E1/9.0)-ccab3*gcab*t160690*t160691*t160835*t160689*(gamma_aa[index]*gcab*t160836* \
               (4.4E1/3.0)+t160831*t160796*t160689*(3.2E1/3.0)+gamma_aa[index]*t160690*t160836*t160689*(8.8E1/3.0) \
               +gamma_aa[index]*gcab*t160691*t160836*t160689*(4.4E1/3.0)+gcab*t160831*t160690*t160796*t160689*(3.2E1/ \
               3.0))-ccab3*gamma_aa[index]*gcab*t160842*t160691*t160835*t160692*t160689*8.0-ccab4*gamma_aa[index]* \
               t160690*t160691*t160692*t160837*t160829*t160697*(3.2E1/3.0))+t160844*t160888*2.0+t160896*t160889*2.0+ \
               (t160615+t160823+t160824+rho_a[index]*(-t160681+t160793+t160591*t160685*(t160681+t160792-t160770*t160775* \
               t160776*t160688-a1p*c*c0p*t160682*t160658*(2.0/3.0)))+t160566*(t160626-a1p*c*c0p*t160604*t160578*(2.0/ \
               3.0)-t160610*t160605*t160616*t160591*t160627*4.0-t160610*t160613*t160616*t160591*t160728+t160613*t160605* \
               t160616*t160591*t160645+t160610*t160613*t160605*t160591*t160585*t160586*4.0-Aa*t160610*t160640*t160752* \
               t160591*t160628*t160638*2.0+Aa*t160640*t160591*t160645*t160628*t160638*t160647*2.0+t160610*t160640* \
               t160760*t160591*t160762*t160628*t160647*t160767-Aa*a1a*c*t160610*t160591*t160628*t160638*t160647*t160578* \
               (2.0/3.0))-c0p*t160673*t160682*2.0-t160804*t160591*t160685)*(ccab1*gamma_aa[index]*gcab*t160715*t160692* \
               (4.0/3.0)-ccab2*t160834*t160691*t160838*t160689-ccab4*t160837*t160829*t160697*t160698-ccab1*gamma_aa[index]* \
               t160830*t160690*t160692*t160689*(4.0/3.0)+ccab2*gamma_aa[index]*t160713*t160690*t160692*t160689*(8.0/ \
               3.0)+ccab3*gamma_aa[index]*gcab*t160714*t160691*t160692*t160689*4.0+ccab4*gamma_aa[index]*t160716* \
               t160690*t160691*t160692*t160697*(1.6E1/3.0)-ccab3*gcab*t160842*t160690*t160691*t160835*t160689)*2.0- \
               (ccab0+ccab1*gcab*t160715*t160690+ccab2*t160713*t160691*t160689+ccab4*t160716*t160697*t160698+ccab3* \
               gcab*t160714*t160690*t160691*t160689)*(-t160566*(-t160740-t160749+t160794+t160769+t160610*t160613* \
               t160616*t160591*(t160740+t160749-t160794-t160769-t160603*t160720*t160741*1.0/(t160597*t160597*t160597) \
               *2.0+t160603*t160720*t160721*(b2f*c*t160717*(4.0/9.0)+b4f*t160573*t160718*(1.0E1/9.0)+b1f*c*t160618* \
               t160717*(2.0/9.0)+b3f*c*t160717*t160569*(2.0/3.0)-b1f*t160732*t160573*t160718*(1.0/3.6E1)+b3f*t160573* \
               t160618*t160718*(1.0/1.2E1))+1.0/(t160600*t160600)*t160603*t160741*t160592*1.0/(t160597*t160597*t160597* \
               t160597)*(1.0/2.0)-a1f*c*c0f*t160601*t160717*(8.0/9.0)+a1f*c*t160720*t160721*t160726*t160578*(2.0/ \
               3.0)-a1p*c*t160620*t160625*t160619*t160578*(2.0/3.0))-t160610*t160605*t160750*t160616*t160591*2.0E1- \
               t160610*t160613*t160605*t160591*t160586*1.2E1+t160610*t160616*t160591*t160627*t160744*8.0-t160613* \
               t160616*t160591*t160645*t160744*2.0+t160605*t160616*t160591*t160627*t160645*8.0-t160613*t160605*t160616* \
               t160591*t160759+t160610*t160605*t160591*t160627*t160585*t160586*3.2E1+t160610*t160613*t160591*t160728* \
               t160585*t160586*8.0-t160613*t160605*t160591*t160645*t160585*t160586*8.0+a1p*c*t160620*t160625*t160619* \
               t160578*(2.0/3.0)+Aa*t160640*t160752*t160591*t160645*t160628*t160638*4.0-Aa*t160640*t160591*t160628* \
               t160638*t160647*t160759*2.0-Aa*t160610*t160640*t160591*t160628*t160638*(t160750*t160616*2.0E1+t160613* \
               t160586*1.2E1-t160627*t160585*t160586*3.2E1)*2.0+t160610*t160640*t160760*t160752*t160591*t160762*t160628* \
               t160767*2.0-t160640*t160760*t160591*t160645*t160762*t160628*t160647*t160767*2.0-t160610*t160640*1.0/ \
               (t160634*t160634*t160634)*t160760*t160591*t160628*t160647*t160768*2.0+t160610*t160640*t160760*t160591* \
               t160762*t160628*t160647*(b2a*c*t160717*(4.0/9.0)+b4a*t160573*t160718*(1.0E1/9.0)+b1a*c*t160618*t160717* \
               (2.0/9.0)+b3a*c*t160717*t160569*(2.0/3.0)-b1a*t160732*t160573*t160718*(1.0/3.6E1)+b3a*t160573*t160618* \
               t160718*(1.0/1.2E1))-Aa*a1a*c*t160610*t160591*t160717*t160628*t160638*t160647*(8.0/9.0)-Aa*a1a*c*t160610* \
               t160752*t160591*t160628*t160638*t160578*(4.0/3.0)+Aa*a1a*c*t160591*t160645*t160628*t160638*t160647* \
               t160578*(4.0/3.0)+t160610*t160640*1.0/(t160634*t160634*t160634*t160634)*t160591*t160628*1.0/(t160637* \
               t160637)*t160629*t160647*t160768*(1.0/2.0)+a1a*c*t160610*t160760*t160591*t160762*t160628*t160647*t160578* \
               t160767*(2.0/3.0))+rho_a[index]*(t160910+t160912+t160906-t160782-t160791+t160591*t160685*(t160911+ \
               t160904+t160782+t160791+t160909-t160673*t160674*t160675*t160788-t160770*t160688*t160779*t160897*2.0- \
               a1f*c*c0f*t160686*t160777*(8.0/9.0)-t160780*t160673*t160790*t160579*t160789*(1.0/2.0)-a1p*c*t160680* \
               t160674*t160675*t160658*(2.0/3.0)))+t160591*t160685*t160795*2.0+t160620*t160625*t160619*t160584*2.0- \
               t160680*t160673*t160674*t160675*2.0-a1p*c*c0p*t160604*t160578*(4.0/3.0)+a1p*c*c0p*t160682*t160658* \
               (4.0/3.0)+t160610*t160613*t160616*t160591*t160744*2.0-t160610*t160605*t160616*t160591*t160627*8.0+ \
               t160613*t160605*t160616*t160591*t160645*2.0+t160610*t160613*t160605*t160591*t160585*t160586*8.0-Aa* \
               t160610*t160640*t160752*t160591*t160628*t160638*4.0+Aa*t160640*t160591*t160645*t160628*t160638*t160647* \
               4.0+t160610*t160640*t160760*t160591*t160762*t160628*t160647*t160767*2.0-Aa*a1a*c*t160610*t160591*t160628* \
               t160638*t160647*t160578*(4.0/3.0))+rho_a[index]*t160896*(t160910+t160912+t160906-t160782-t160791-t160591* \
               t160685*(t160910-t160911+t160912-t160904+t160906-t160782-t160791-t160909+t160770*t160688*t160779*t160897* \
               2.0+a1f*c*c0f*t160686*t160777*(8.0/9.0)))-rho_a[index]*t160844*(ccaa1*gamma_aa[index]*gcaa*t160853* \
               t160836*(8.8E1/9.0)-ccaa1*t160831*t160872*t160796*t160797*2.4E1+ccaa2*t160831*t160862*t160796*t160797* \
               (3.04E2/9.0)+ccaa4*t160850*t160891*t160798*t160799*(1.12E3/9.0)-ccaa2*t160863*t160796*t160886*t160797* \
               t160887*(3.2E1/3.0)-ccaa4*t160882*t160865*t160883*t160798*t160799*(6.4E1/3.0)-ccaa2*t160802*t160796* \
               t160797*t160887*(gamma_aa[index]*gcaa*t160836*(1.76E2/9.0)+t160831*t160796*t160797*(3.04E2/9.0))-ccaa4* \
               t160800*t160883*t160798*t160799*(gamma_aa[index]*gcaa*t160836*(3.52E2/9.0)+t160831*t160796*t160797* \
               (6.08E2/3.0)+t160891*t160798*t160799*(1.12E3/9.0)+gamma_aa[index]*gcaa*t160890*t160796*t160797*2.88E2) \
               +ccaa2*t160802*1.0/(t160861*t160861*t160861)*t160796*(t160886*t160886)*t160797*2.0+ccaa4*t160800*(t160882* \
               t160882)*1.0/(t160849*t160849*t160849)*t160798*t160799*2.0+ccaa3*gamma_aa[index]*gcaa*t160890*t160858* \
               t160796*t160797*7.2E1+ccaa1*gamma_aa[index]*gcaa*1.0/(t160852*t160852*t160852)*t160890*t160796*t160797* \
               (1.28E2/9.0)+ccaa3*gamma_aa[index]*gcaa*t160801*1.0/(t160857*t160857*t160857)*(t160876*t160876)*t160796* \
               t160797*2.0-ccaa3*gamma_aa[index]*gcaa*t160801*t160796*t160877*t160797*(gamma_aa[index]*gcaa*t160836* \
               (8.8E1/3.0)+t160831*t160796*t160797*(3.04E2/3.0)+gamma_aa[index]*gcaa*t160890*t160796*t160797*7.2E1) \
               -ccaa3*gamma_aa[index]*gcaa*t160864*t160876*t160796*t160877*t160797*1.6E1)-rho_a[index]*t160888*t160889* \
               2.0-c0*t160970*t160995*(cx1*gamma_aa[index]*gx*t160942*t160836*(8.8E1/9.0)-cx1*t160831*t160926*t160796* \
               t160976*2.4E1+cx2*t160831*t160951*t160926*t160796*(3.04E2/9.0)+cx4*t160891*t160927*t160939*t160798* \
               (1.12E3/9.0)-cx2*t160863*t160926*t160990*t160991*t160796*(3.2E1/3.0)-cx4*t160927*t160865*t160986*t160798* \
               t160987*(6.4E1/3.0)-cx2*t160802*t160926*t160991*t160796*(gamma_aa[index]*gx*t160836*(1.76E2/9.0)+t160831* \
               t160926*t160796*(3.04E2/9.0))-cx4*t160800*t160927*t160798*t160987*(gamma_aa[index]*gx*t160836*(3.52E2/ \
               9.0)+t160831*t160926*t160796*(6.08E2/3.0)+t160891*t160927*t160798*(1.12E3/9.0)+gamma_aa[index]*gx* \
               t160890*t160926*t160796*2.88E2)+cx2*t160802*1.0/(t160950*t160950*t160950)*t160926*(t160990*t160990) \
               *t160796*2.0+cx4*t160800*t160927*1.0/(t160938*t160938*t160938)*(t160986*t160986)*t160798*2.0+cx3*gamma_aa[index]* \
               gx*t160890*t160926*t160947*t160796*7.2E1+cx1*gamma_aa[index]*gx*1.0/(t160941*t160941*t160941)*t160890* \
               t160926*t160796*(1.28E2/9.0)+cx3*gamma_aa[index]*gx*t160801*t160926*(t160980*t160980)*1.0/(t160946* \
               t160946*t160946)*t160796*2.0-cx3*gamma_aa[index]*gx*t160801*t160926*t160981*t160796*(gamma_aa[index]* \
               gx*t160836*(8.8E1/3.0)+t160831*t160926*t160796*(3.04E2/3.0)+gamma_aa[index]*gx*t160890*t160926*t160796* \
               7.2E1)-cx3*gamma_aa[index]*gx*t160926*t160980*t160864*t160981*t160796*1.6E1)-c0*t160970*t160992*t160993* \
               2.0-c0*t160654*t160995*t160969*(4.0/9.0)+c0*t160928*t160992*t160995*(8.0/3.0)+c0*t160928*t160993*t160969* \
               (8.0/3.0)+c0*t160970*t160969*(omega*t160922*t160962*(2.778046668940015E15/5.2776558133248E13)-omega* \
               t160933*t160963*(7.717543294808713E30/3.713820117856141E27)+omega*t160917*(omega*t160922*t160956*(2.778046668940015E15/ \
               7.0368744177664E13)+omega*t160925*t160963*(7.717543294808713E30/4.951760157141521E27)+omega*t160917* \
               (1.0/(rho_a[index]*rho_a[index])*t160916*(5.0/9.0)-1.0/(omega*omega*omega*omega)*t160921*t160916*(7.717543294808713E30/ \
               4.951760157141521E27)+t160920*1.0/pow(t160913,8.0/3.0)*t160919*(3.858771647404357E31/1.980704062856608E28) \
               -t160922*t160914*t160916*(7.717543294808713E30/9.903520314283042E27)+t160914*t160916*t160952*t160917* \
               (2.778046668940015E15/2.11106232532992E14))+t160923*t160916*t160954*t160957*(3.080234563013177E46/ \
               1.115037259926531E43)+1.0/(omega*omega*omega)*t160916*t160952*t160957*(1.108777112152858E31/2.37684487542793E29) \
               )*(4.0/3.0));
        } else if (rho_a[index] > cutoff_) {
            double t164331 = 1.0/pow(rho_a[index],1.0/3.0);
            double t164332 = c*t164331;
            double t164333 = sqrt(t164332);
            double t164334 = b1f*t164333;
            double t164335 = pow(t164332,3.0/2.0);
            double t164336 = b3f*t164335;
            double t164337 = c*c;
            double t164338 = 1.0/pow(rho_a[index],2.0/3.0);
            double t164339 = b4f*t164337*t164338;
            double t164340 = b2f*c*t164331;
            double t164341 = t164340+t164334+t164336+t164339;
            double t164342 = 1.0/pow(rho_a[index],4.0/3.0);
            double t164343 = b1p*t164333;
            double t164344 = b3p*t164335;
            double t164345 = b4p*t164337*t164338;
            double t164346 = b2p*c*t164331;
            double t164347 = t164343+t164344+t164345+t164346;
            double t164348 = 1.0/pow(rho_a[index],5.0/3.0);
            double t164349 = 1.0/sqrt(t164332);
            double t164350 = 1.0/c0f;
            double t164351 = 1.0/t164341;
            double t164352 = t164350*t164351*(1.0/2.0);
            double t164353 = t164352+1.0;
            double t164354 = 1.0/c0p;
            double t164355 = 1.0/t164347;
            double t164356 = t164354*t164355*(1.0/2.0);
            double t164357 = t164356+1.0;
            double t164358 = a1p*c*t164331;
            double t164359 = t164358+1.0;
            double t164360 = 1.0/t164357;
            double t164361 = 1.0/(t164347*t164347);
            double t164362 = b4p*t164337*t164348*(2.0/3.0);
            double t164363 = b2p*c*t164342*(1.0/3.0);
            double t164364 = b1p*c*t164342*t164349*(1.0/6.0);
            double t164365 = b3p*c*t164333*t164342*(1.0/2.0);
            double t164366 = t164362+t164363+t164364+t164365;
            double t164367 = t164360*t164361*t164366*t164359;
            double t164368 = log(t164357);
            double t164369 = gamma_aa[index]*gamma_aa[index];
            double t164370 = gcaa*gcaa;
            double t164371 = t164369*t164369;
            double t164372 = t164370*t164370;
            double t164373 = 1.0/pow(rho_a[index],3.2E1/3.0);
            double t164374 = 1.0/pow(rho_a[index],8.0/3.0);
            double t164375 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]);
            double t164376 = 1.0/pow(rho_a[index],1.6E1/3.0);
            double t164377 = pow(2.0,1.0/3.0);
            double t164378 = t164377*2.0;
            double t164379 = t164378-2.0;
            double t164380 = two_13*2.0;
            double t164381 = t164380-2.0;
            double t164382 = 1.0/t164381;
            double t164383 = log(t164353);
            double t164384 = a1f*c*t164331;
            double t164385 = t164384+1.0;
            double t164386 = gamma_aa[index]*gcaa*t164374*4.0;
            double t164387 = gamma_aa[index]*gcaa*t164370*t164375*t164369*4.0;
            double t164388 = t164370*t164376*t164369*6.0;
            double t164389 = t164371*t164372*t164373;
            double t164390 = t164386+t164387+t164388+t164389+1.0;
            double t164391 = 1.0/t164390;
            double t164392 = gamma_aa[index]*gcaa*t164374;
            double t164393 = t164392+1.0;
            double t164394 = 1.0/t164393;
            double t164395 = gamma_aa[index]*gcaa*t164374*3.0;
            double t164396 = gamma_aa[index]*gcaa*t164370*t164375*t164369;
            double t164397 = t164370*t164376*t164369*3.0;
            double t164398 = t164395+t164396+t164397+1.0;
            double t164399 = 1.0/t164398;
            double t164400 = gamma_aa[index]*gcaa*t164374*2.0;
            double t164401 = t164370*t164376*t164369;
            double t164402 = t164400+t164401+1.0;
            double t164403 = 1.0/t164402;
            double t164404 = 1.0/pow(rho_a[index],1.9E1/3.0);
            double t164405 = 1.0/pow(rho_a[index],1.1E1/3.0);
            double t164406 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]*rho_a[index]);
            double t164407 = 1.0/pow(rho_a[index],3.5E1/3.0);
            double t164408 = 1.0/t164353;
            double t164409 = 1.0/(t164341*t164341);
            double t164410 = b4f*t164337*t164348*(2.0/3.0);
            double t164411 = b2f*c*t164342*(1.0/3.0);
            double t164412 = b1f*c*t164342*t164349*(1.0/6.0);
            double t164413 = b3f*c*t164333*t164342*(1.0/2.0);
            double t164414 = t164410+t164411+t164412+t164413;
            double t164415 = a1f*c*c0f*t164342*t164383*(2.0/3.0);
            double t164416 = a1p*c*c0p*t164342*t164368*(2.0/3.0);
            double t164417 = ccaa4*t164371*t164407*t164372*t164391*(3.2E1/3.0);
            double t164418 = ccaa1*gamma_aa[index]*gcaa*t164405*t164394*(8.0/3.0);
            double t164419 = ccaa3*gamma_aa[index]*gcaa*t164370*t164406*t164369*t164399*8.0;
            double t164420 = ccaa2*t164403*t164404*t164370*t164369*(1.6E1/3.0);
            double t164421 = 1.0/(t164393*t164393);
            double t164422 = gamma_aa[index]*gcaa*t164405*8.0;
            double t164423 = gamma_aa[index]*gcaa*t164370*t164406*t164369*8.0;
            double t164424 = t164404*t164370*t164369*1.6E1;
            double t164425 = t164422+t164423+t164424;
            double t164426 = 1.0/(t164398*t164398);
            double t164427 = gamma_aa[index]*gcaa*t164405*(3.2E1/3.0);
            double t164428 = gamma_aa[index]*gcaa*t164370*t164406*t164369*3.2E1;
            double t164429 = t164404*t164370*t164369*3.2E1;
            double t164430 = t164371*t164407*t164372*(3.2E1/3.0);
            double t164431 = t164430+t164427+t164428+t164429;
            double t164432 = 1.0/(t164390*t164390);
            double t164433 = gamma_aa[index]*gcaa*t164405*(1.6E1/3.0);
            double t164434 = t164404*t164370*t164369*(1.6E1/3.0);
            double t164435 = t164433+t164434;
            double t164436 = 1.0/(t164402*t164402);
            double t164437 = t164420+t164417+t164418+t164419-ccaa1*t164421*t164404*t164370*t164369*(8.0/3.0)- \
               ccaa4*t164431*t164432*t164371*t164372*t164373-ccaa2*t164370*t164435*t164436*t164376*t164369-ccaa3* \
               gamma_aa[index]*gcaa*t164370*t164425*t164426*t164375*t164369;
            double t164438 = c0f*t164383*t164385*2.0;
            double t164439 = c0p*t164359*t164368*2.0;
            double t164440 = 1.0/pow(rho_a[index],1.0E1);
            double t164441 = 1.0/pow(rho_a[index],2.2E1/3.0);
            double t164442 = 1.0/pow(rho_a[index],1.4E1/3.0);
            double t164443 = 1.0/pow(rho_a[index],3.8E1/3.0);
            double t164444 = ccaa4*t164371*t164372*t164373*t164391;
            double t164445 = ccaa1*gamma_aa[index]*gcaa*t164374*t164394;
            double t164446 = ccaa3*gamma_aa[index]*gcaa*t164370*t164375*t164369*t164399;
            double t164447 = ccaa2*t164403*t164370*t164376*t164369;
            double t164448 = ccaa0+t164444+t164445+t164446+t164447;
            double t164449 = 1.0/pow(rho_a[index],7.0/3.0);
            double t164450 = 1.0/pow(t164332,3.0/2.0);
            double t164451 = t164414*t164414;
            double t164452 = t164366*t164366;
            double t164453 = 1.0/(t164347*t164347*t164347);
            double t164454 = t164360*t164452*t164453*t164359*2.0;
            double t164455 = b4p*t164337*t164374*(1.0E1/9.0);
            double t164456 = b2p*c*t164449*(4.0/9.0);
            double t164457 = b3p*t164337*t164374*t164349*(1.0/1.2E1);
            double t164458 = b1p*c*t164349*t164449*(2.0/9.0);
            double t164459 = b3p*c*t164333*t164449*(2.0/3.0);
            double t164460 = t164455+t164456+t164457+t164458+t164459-b1p*t164450*t164337*t164374*(1.0/3.6E1);
            double t164461 = 1.0/(t164357*t164357);
            double t164462 = 1.0/(t164347*t164347*t164347*t164347);
            double t164463 = a1p*c*c0p*t164368*t164449*(8.0/9.0);
            double t164464 = rho_a[index]*(8.334140006820045E15/1.40737488355328E14);
            double t164465 = 1.0/(omega*omega);
            double t164466 = pow(t164464,2.0/3.0);
            double t164469 = t164465*t164466;
            double t164467 = exp(-t164469);
            double t164468 = 1.0/pow(t164464,1.0/3.0);
            double t164470 = omega*omega;
            double t164471 = t164467-1.0;
            double t164472 = 1.0/pow(t164464,2.0/3.0);
            double t164473 = 1.0/pow(t164464,4.0/3.0);
            double t164474 = 1.0/omega;
            double t164475 = t164470*t164471*t164472*(1.0/2.0);
            double t164476 = t164475-t164467+3.0/2.0;
            double t164477 = gx*gx;
            double t164478 = t164477*t164477;
            double t164479 = pow(rho_a[index],1.0/3.0);
            double t164480 = pow(t164464,1.0/3.0);
            double t164481 = t164480*t164474;
            double t164482 = erf(t164481);
            double t164483 = t164482*(3.991211251234741E15/2.251799813685248E15);
            double t164515 = omega*t164476*t164468;
            double t164484 = -t164515+t164483;
            double t164485 = gamma_aa[index]*gx*t164374*4.0;
            double t164486 = gamma_aa[index]*gx*t164375*t164369*t164477*4.0;
            double t164487 = t164376*t164369*t164477*6.0;
            double t164488 = t164371*t164373*t164478;
            double t164489 = t164485+t164486+t164487+t164488+1.0;
            double t164490 = 1.0/t164489;
            double t164491 = gamma_aa[index]*gx*t164374;
            double t164492 = t164491+1.0;
            double t164493 = 1.0/t164492;
            double t164494 = gamma_aa[index]*gx*t164374*3.0;
            double t164495 = gamma_aa[index]*gx*t164375*t164369*t164477;
            double t164496 = t164376*t164369*t164477*3.0;
            double t164497 = t164494+t164495+t164496+1.0;
            double t164498 = 1.0/t164497;
            double t164499 = gamma_aa[index]*gx*t164374*2.0;
            double t164500 = t164376*t164369*t164477;
            double t164501 = t164500+t164499+1.0;
            double t164502 = 1.0/t164501;
            double t164503 = 1.0/rho_a[index];
            double t164504 = t164503*t164467*(1.0/3.0);
            double t164505 = 1.0/pow(t164464,5.0/3.0);
            double t164506 = t164505*t164470*t164471*(2.778046668940015E15/1.40737488355328E14);
            double t164510 = t164465*t164467*t164468*(2.778046668940015E15/7.0368744177664E13);
            double t164507 = -t164510+t164504+t164506;
            double t164508 = 1.0/sqrt(3.141592653589793);
            double t164509 = omega*t164473*t164476*(2.778046668940015E15/1.40737488355328E14);
            double t164511 = omega*t164507*t164468;
            double t164512 = t164472*t164508*t164474*t164467*(1.108777112152858E31/1.584563250285287E29);
            double t164513 = t164511+t164512+t164509;
            double t164514 = 1.0/pow(t164464,7.0/3.0);
            double t164516 = cx4*t164371*t164373*t164490*t164478;
            double t164517 = cx1*gamma_aa[index]*gx*t164374*t164493;
            double t164518 = cx3*gamma_aa[index]*gx*t164375*t164369*t164477*t164498;
            double t164519 = cx2*t164502*t164376*t164369*t164477;
            double t164520 = cx0+t164516+t164517+t164518+t164519;
            double t164521 = pow(rho_a[index],4.0/3.0);
            double t164522 = omega*t164513*t164468*(4.0/3.0);
            double t164523 = t164522-omega*t164473*t164484*(2.778046668940015E15/1.05553116266496E14);
            double t164524 = cx4*t164371*t164407*t164490*t164478*(3.2E1/3.0);
            double t164525 = cx1*gamma_aa[index]*gx*t164405*t164493*(8.0/3.0);
            double t164526 = cx3*gamma_aa[index]*gx*t164406*t164369*t164477*t164498*8.0;
            double t164527 = cx2*t164502*t164404*t164369*t164477*(1.6E1/3.0);
            double t164528 = 1.0/(t164492*t164492);
            double t164529 = gamma_aa[index]*gx*t164405*8.0;
            double t164530 = gamma_aa[index]*gx*t164406*t164369*t164477*8.0;
            double t164531 = t164404*t164369*t164477*1.6E1;
            double t164532 = t164530+t164531+t164529;
            double t164533 = 1.0/(t164497*t164497);
            double t164534 = gamma_aa[index]*gx*t164405*(3.2E1/3.0);
            double t164535 = gamma_aa[index]*gx*t164406*t164369*t164477*3.2E1;
            double t164536 = t164404*t164369*t164477*3.2E1;
            double t164537 = t164371*t164407*t164478*(3.2E1/3.0);
            double t164538 = t164534+t164535+t164536+t164537;
            double t164539 = 1.0/(t164489*t164489);
            double t164540 = gamma_aa[index]*gx*t164405*(1.6E1/3.0);
            double t164541 = t164404*t164369*t164477*(1.6E1/3.0);
            double t164542 = t164540+t164541;
            double t164543 = 1.0/(t164501*t164501);
            double t164544 = t164524+t164525+t164526+t164527-cx1*t164404*t164528*t164369*t164477*(8.0/3.0)-cx2* \
               t164542*t164543*t164376*t164369*t164477-cx4*t164371*t164373*t164538*t164539*t164478-cx3*gamma_aa[index]* \
               gx*t164532*t164533*t164375*t164369*t164477;
            double t164545 = omega*t164484*t164468*(4.0/3.0);
            double t164546 = t164545-1.0;
            v_rho_a_rho_a_[index] = t164437*(t164439+t164382*t164379*(t164438-c0p*t164359*t164368*2.0))*2.0+t164448* \
               (t164416-t164367+t164382*t164379*(t164415+t164367-t164414*t164408*t164409*t164385-a1p*c*c0p*t164342* \
               t164368*(2.0/3.0)))*2.0+rho_a[index]*t164448*(-t164454-t164463+t164382*t164379*(t164454+t164463-t164360* \
               t164361*t164460*t164359-1.0/(t164341*t164341*t164341)*t164451*t164408*t164385*2.0+t164408*t164409* \
               t164385*(b2f*c*t164449*(4.0/9.0)+b4f*t164337*t164374*(1.0E1/9.0)+b1f*c*t164349*t164449*(2.0/9.0)+b3f* \
               c*t164333*t164449*(2.0/3.0)-b1f*t164450*t164337*t164374*(1.0/3.6E1)+b3f*t164337*t164374*t164349*(1.0/ \
               1.2E1))+1.0/(t164341*t164341*t164341*t164341)*t164350*t164451*1.0/(t164353*t164353)*t164385*(1.0/2.0) \
               -a1f*c*c0f*t164383*t164449*(8.0/9.0)-t164452*t164461*t164354*t164462*t164359*(1.0/2.0)+a1f*c*t164342* \
               t164414*t164408*t164409*(2.0/3.0)-a1p*c*t164342*t164360*t164361*t164366*(2.0/3.0))+t164360*t164361* \
               t164460*t164359+t164452*t164461*t164354*t164462*t164359*(1.0/2.0)+a1p*c*t164342*t164360*t164361*t164366* \
               (2.0/3.0))-rho_a[index]*t164437*(t164416-t164367+t164382*t164379*(t164415-t164416+t164367-t164414* \
               t164408*t164409*t164385))*2.0-rho_a[index]*(t164439+t164382*t164379*(t164438-t164439))*(ccaa1*gamma_aa[index]* \
               gcaa*t164442*t164394*(8.8E1/9.0)-ccaa1*t164421*t164441*t164370*t164369*2.4E1+ccaa2*t164403*t164441* \
               t164370*t164369*(3.04E2/9.0)+ccaa4*t164371*t164443*t164372*t164391*(1.12E3/9.0)-ccaa4*t164431*t164432* \
               t164371*t164407*t164372*(6.4E1/3.0)-ccaa2*t164404*t164370*t164435*t164436*t164369*(3.2E1/3.0)-ccaa2* \
               t164370*t164436*t164376*t164369*(gamma_aa[index]*gcaa*t164442*(1.76E2/9.0)+t164441*t164370*t164369* \
               (3.04E2/9.0))-ccaa4*t164432*t164371*t164372*t164373*(gamma_aa[index]*gcaa*t164442*(3.52E2/9.0)+t164371* \
               t164443*t164372*(1.12E3/9.0)+t164441*t164370*t164369*(6.08E2/3.0)+gamma_aa[index]*gcaa*t164440*t164370* \
               t164369*2.88E2)+ccaa4*(t164431*t164431)*t164371*t164372*1.0/(t164390*t164390*t164390)*t164373*2.0+ \
               ccaa2*1.0/(t164402*t164402*t164402)*t164370*(t164435*t164435)*t164376*t164369*2.0+ccaa3*gamma_aa[index]* \
               gcaa*t164440*t164370*t164369*t164399*7.2E1+ccaa1*gamma_aa[index]*gcaa*t164440*t164370*1.0/(t164393* \
               t164393*t164393)*t164369*(1.28E2/9.0)+ccaa3*gamma_aa[index]*gcaa*t164370*(t164425*t164425)*t164375* \
               t164369*1.0/(t164398*t164398*t164398)*2.0-ccaa3*gamma_aa[index]*gcaa*t164370*t164426*t164375*t164369* \
               (gamma_aa[index]*gcaa*t164442*(8.8E1/3.0)+t164441*t164370*t164369*(3.04E2/3.0)+gamma_aa[index]*gcaa* \
               t164440*t164370*t164369*7.2E1)-ccaa3*gamma_aa[index]*gcaa*t164370*t164406*t164425*t164426*t164369* \
               1.6E1)-c0*t164521*t164546*(cx1*gamma_aa[index]*gx*t164442*t164493*(8.8E1/9.0)-cx1*t164441*t164528* \
               t164369*t164477*2.4E1+cx2*t164502*t164441*t164369*t164477*(3.04E2/9.0)+cx4*t164371*t164443*t164490* \
               t164478*(1.12E3/9.0)-cx2*t164404*t164542*t164543*t164369*t164477*(3.2E1/3.0)-cx4*t164371*t164407*t164538* \
               t164539*t164478*(6.4E1/3.0)-cx2*t164543*t164376*t164369*t164477*(gamma_aa[index]*gx*t164442*(1.76E2/ \
               9.0)+t164441*t164369*t164477*(3.04E2/9.0))-cx4*t164371*t164373*t164539*t164478*(gamma_aa[index]*gx* \
               t164442*(3.52E2/9.0)+t164371*t164443*t164478*(1.12E3/9.0)+t164441*t164369*t164477*(6.08E2/3.0)+gamma_aa[index]* \
               gx*t164440*t164369*t164477*2.88E2)+cx2*1.0/(t164501*t164501*t164501)*(t164542*t164542)*t164376*t164369* \
               t164477*2.0+cx4*t164371*t164373*(t164538*t164538)*t164478*1.0/(t164489*t164489*t164489)*2.0+cx3*gamma_aa[index]* \
               gx*t164440*t164369*t164477*t164498*7.2E1+cx1*gamma_aa[index]*gx*t164440*1.0/(t164492*t164492*t164492) \
               *t164369*t164477*(1.28E2/9.0)+cx3*gamma_aa[index]*gx*(t164532*t164532)*t164375*t164369*t164477*1.0/ \
               (t164497*t164497*t164497)*2.0-cx3*gamma_aa[index]*gx*t164533*t164375*t164369*t164477*(gamma_aa[index]* \
               gx*t164442*(8.8E1/3.0)+t164441*t164369*t164477*(3.04E2/3.0)+gamma_aa[index]*gx*t164440*t164369*t164477* \
               7.2E1)-cx3*gamma_aa[index]*gx*t164406*t164532*t164533*t164369*t164477*1.6E1)+c0*t164521*t164523*t164544* \
               2.0-c0*t164520*t164338*t164546*(4.0/9.0)-c0*t164520*t164523*t164479*(8.0/3.0)+c0*t164544*t164546*t164479* \
               (8.0/3.0)+c0*t164520*t164521*(omega*t164513*t164473*(2.778046668940015E15/5.2776558133248E13)-omega* \
               t164514*t164484*(7.717543294808713E30/3.713820117856141E27)+omega*t164468*(omega*t164507*t164473*(2.778046668940015E15/ \
               7.0368744177664E13)+omega*t164514*t164476*(7.717543294808713E30/4.951760157141521E27)+omega*t164468* \
               (1.0/(rho_a[index]*rho_a[index])*t164467*(5.0/9.0)-1.0/(omega*omega*omega*omega)*t164472*t164467*(7.717543294808713E30/ \
               4.951760157141521E27)+t164470*t164471*1.0/pow(t164464,8.0/3.0)*(3.858771647404357E31/1.980704062856608E28) \
               -t164473*t164465*t164467*(7.717543294808713E30/9.903520314283042E27)+t164503*t164465*t164467*t164468* \
               (2.778046668940015E15/2.11106232532992E14))+t164505*t164508*t164474*t164467*(3.080234563013177E46/ \
               1.115037259926531E43)+1.0/(omega*omega*omega)*t164503*t164508*t164467*(1.108777112152858E31/2.37684487542793E29) \
               )*(4.0/3.0));
        } else if (rho_b[index] > cutoff_) {
            v_rho_a_rho_a_[index] = 0.0;
        } else {
            v_rho_a_rho_a_[index] = 0.0;
        } 

        //V_rho_a_rho_b
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t160997 = rho_a[index]+rho_b[index];
            double t160998 = 1.0/pow(t160997,1.0/3.0);
            double t160999 = c*t160998;
            double t161000 = sqrt(t160999);
            double t161001 = b1p*t161000;
            double t161002 = pow(t160999,3.0/2.0);
            double t161003 = b3p*t161002;
            double t161004 = c*c;
            double t161005 = 1.0/pow(t160997,2.0/3.0);
            double t161006 = b4p*t161004*t161005;
            double t161007 = b2p*c*t160998;
            double t161008 = t161001+t161003+t161006+t161007;
            double t161009 = 1.0/pow(t160997,4.0/3.0);
            double t161010 = 1.0/c0p;
            double t161011 = 1.0/t161008;
            double t161012 = t161010*t161011*(1.0/2.0);
            double t161013 = t161012+1.0;
            double t161014 = a1p*c*t160998;
            double t161015 = t161014+1.0;
            double t161016 = rho_a[index]-rho_b[index];
            double t161017 = t161016*t161016;
            double t161018 = 1.0/t160997;
            double t161019 = t161016*t161018;
            double t161020 = two_13*2.0;
            double t161021 = t161020-2.0;
            double t161022 = 1.0/t161021;
            double t161023 = 1.0/c0f;
            double t161024 = b1f*t161000;
            double t161025 = b3f*t161002;
            double t161026 = b4f*t161004*t161005;
            double t161027 = b2f*c*t160998;
            double t161028 = t161024+t161025+t161026+t161027;
            double t161029 = 1.0/t161028;
            double t161030 = t161023*t161029*(1.0/2.0);
            double t161031 = t161030+1.0;
            double t161032 = log(t161031);
            double t161033 = a1f*c*t160998;
            double t161034 = t161033+1.0;
            double t161035 = log(t161013);
            double t161045 = c0f*t161032*t161034*2.0;
            double t161046 = c0p*t161015*t161035*2.0;
            double t161036 = t161045-t161046;
            double t161037 = t161019+1.0;
            double t161038 = pow(t161037,4.0/3.0);
            double t161039 = -t161019+1.0;
            double t161040 = pow(t161039,4.0/3.0);
            double t161041 = t161040+t161038-2.0;
            double t161042 = 1.0/(t160997*t160997);
            double t161073 = t161042*t161016;
            double t161043 = t161018-t161073;
            double t161044 = 1.0/(t160997*t160997*t160997*t160997);
            double t161047 = t161017*t161017;
            double t161048 = 1.0/pow(t160997,5.0/3.0);
            double t161049 = 1.0/sqrt(t160999);
            double t161050 = 1.0/t161013;
            double t161051 = 1.0/(t161008*t161008);
            double t161052 = b4p*t161004*t161048*(2.0/3.0);
            double t161053 = b2p*c*t161009*(1.0/3.0);
            double t161054 = b1p*c*t161009*t161049*(1.0/6.0);
            double t161055 = b3p*c*t161000*t161009*(1.0/2.0);
            double t161056 = t161052+t161053+t161054+t161055;
            double t161057 = t161050*t161015*t161051*t161056;
            double t161058 = 1.0/(t160997*t160997*t160997*t160997*t160997);
            double t161059 = 1.0/d2fz0;
            double t161060 = 1.0/Aa;
            double t161061 = b1a*t161000;
            double t161062 = b3a*t161002;
            double t161063 = b4a*t161004*t161005;
            double t161064 = b2a*c*t160998;
            double t161065 = t161061+t161062+t161063+t161064;
            double t161066 = 1.0/t161065;
            double t161067 = t161060*t161066*(1.0/2.0);
            double t161068 = t161067+1.0;
            double t161069 = log(t161068);
            double t161070 = a1a*c*t160998;
            double t161071 = t161070+1.0;
            double t161072 = pow(t161037,1.0/3.0);
            double t161074 = t161043*t161072*(4.0/3.0);
            double t161075 = pow(t161039,1.0/3.0);
            double t161219 = t161043*t161075*(4.0/3.0);
            double t161076 = t161074-t161219;
            double t161077 = t161044*t161047;
            double t161078 = t161077-1.0;
            double t161079 = 1.0/pow(rho_a[index],1.0/3.0);
            double t161080 = c*t161079;
            double t161081 = sqrt(t161080);
            double t161082 = b1f*t161081;
            double t161083 = pow(t161080,3.0/2.0);
            double t161084 = b3f*t161083;
            double t161085 = 1.0/pow(rho_a[index],2.0/3.0);
            double t161086 = b4f*t161004*t161085;
            double t161087 = b2f*c*t161079;
            double t161088 = t161082+t161084+t161086+t161087;
            double t161089 = 1.0/pow(rho_a[index],4.0/3.0);
            double t161090 = b1p*t161081;
            double t161091 = b3p*t161083;
            double t161092 = b4p*t161004*t161085;
            double t161093 = b2p*c*t161079;
            double t161094 = t161090+t161091+t161092+t161093;
            double t161095 = 1.0/pow(rho_a[index],5.0/3.0);
            double t161096 = 1.0/sqrt(t161080);
            double t161097 = 1.0/t161088;
            double t161098 = t161023*t161097*(1.0/2.0);
            double t161099 = t161098+1.0;
            double t161100 = 1.0/t161094;
            double t161101 = t161010*t161100*(1.0/2.0);
            double t161102 = t161101+1.0;
            double t161103 = a1p*c*t161079;
            double t161104 = t161103+1.0;
            double t161105 = 1.0/t161102;
            double t161106 = 1.0/(t161094*t161094);
            double t161107 = b4p*t161004*t161095*(2.0/3.0);
            double t161108 = b2p*c*t161089*(1.0/3.0);
            double t161109 = b1p*c*t161096*t161089*(1.0/6.0);
            double t161110 = b3p*c*t161081*t161089*(1.0/2.0);
            double t161111 = t161110+t161107+t161108+t161109;
            double t161112 = t161111*t161104*t161105*t161106;
            double t161113 = log(t161102);
            double t161114 = pow(2.0,1.0/3.0);
            double t161115 = t161114*2.0;
            double t161116 = t161115-2.0;
            double t161117 = log(t161099);
            double t161118 = a1f*c*t161079;
            double t161119 = t161118+1.0;
            double t161120 = gcab*gcab;
            double t161124 = 1.0/pow(rho_a[index],8.0/3.0);
            double t161125 = gamma_aa[index]*t161124*(1.0/2.0);
            double t161126 = 1.0/pow(rho_b[index],8.0/3.0);
            double t161127 = gamma_bb[index]*t161126*(1.0/2.0);
            double t161121 = t161125+t161127;
            double t161122 = t161121*t161121;
            double t161123 = 1.0/pow(rho_b[index],1.1E1/3.0);
            double t161128 = t161120*t161120;
            double t161129 = t161122*t161122;
            double t161130 = t161120*t161122*6.0;
            double t161131 = gcab*t161120*t161121*t161122*4.0;
            double t161132 = t161128*t161129;
            double t161133 = gcab*t161121*4.0;
            double t161134 = t161130+t161131+t161132+t161133+1.0;
            double t161135 = gcab*t161121;
            double t161136 = t161135+1.0;
            double t161137 = t161120*t161122;
            double t161138 = gcab*t161121*2.0;
            double t161139 = t161137+t161138+1.0;
            double t161140 = t161120*t161122*3.0;
            double t161141 = gcab*t161120*t161121*t161122;
            double t161142 = gcab*t161121*3.0;
            double t161143 = t161140+t161141+t161142+1.0;
            double t161144 = t161022*t161041*t161016*t161017*t161044*t161036*4.0;
            double t161145 = t161018+t161073;
            double t161146 = 1.0/t161031;
            double t161147 = 1.0/(t161028*t161028);
            double t161148 = b4f*t161004*t161048*(2.0/3.0);
            double t161149 = b2f*c*t161009*(1.0/3.0);
            double t161150 = b1f*c*t161009*t161049*(1.0/6.0);
            double t161151 = b3f*c*t161000*t161009*(1.0/2.0);
            double t161152 = t161150+t161151+t161148+t161149;
            double t161153 = a1f*c*c0f*t161032*t161009*(2.0/3.0);
            double t161154 = t161047*t161058*4.0;
            double t161155 = t161072*t161145*(4.0/3.0);
            double t161218 = t161145*t161075*(4.0/3.0);
            double t161156 = t161155-t161218;
            double t161157 = 1.0/t161068;
            double t161158 = 1.0/(t161065*t161065);
            double t161159 = b4a*t161004*t161048*(2.0/3.0);
            double t161160 = b2a*c*t161009*(1.0/3.0);
            double t161161 = b1a*c*t161009*t161049*(1.0/6.0);
            double t161162 = b3a*c*t161000*t161009*(1.0/2.0);
            double t161163 = t161160+t161161+t161162+t161159;
            double t161164 = t161022*t161041*t161071*t161163*t161157*t161059*t161158*t161078;
            double t161165 = 1.0/pow(rho_b[index],1.0/3.0);
            double t161166 = c*t161165;
            double t161167 = sqrt(t161166);
            double t161168 = b1f*t161167;
            double t161169 = pow(t161166,3.0/2.0);
            double t161170 = b3f*t161169;
            double t161171 = 1.0/pow(rho_b[index],2.0/3.0);
            double t161172 = b4f*t161004*t161171;
            double t161173 = b2f*c*t161165;
            double t161174 = t161170+t161172+t161173+t161168;
            double t161175 = 1.0/pow(rho_b[index],4.0/3.0);
            double t161176 = b1p*t161167;
            double t161177 = b3p*t161169;
            double t161178 = b4p*t161004*t161171;
            double t161179 = b2p*c*t161165;
            double t161180 = t161176+t161177+t161178+t161179;
            double t161181 = 1.0/pow(rho_b[index],5.0/3.0);
            double t161182 = 1.0/sqrt(t161166);
            double t161183 = 1.0/t161174;
            double t161184 = t161023*t161183*(1.0/2.0);
            double t161185 = t161184+1.0;
            double t161186 = 1.0/t161180;
            double t161187 = t161010*t161186*(1.0/2.0);
            double t161188 = t161187+1.0;
            double t161189 = a1p*c*t161165;
            double t161190 = t161189+1.0;
            double t161191 = 1.0/t161188;
            double t161192 = 1.0/(t161180*t161180);
            double t161193 = b4p*t161004*t161181*(2.0/3.0);
            double t161194 = b2p*c*t161175*(1.0/3.0);
            double t161195 = b1p*c*t161182*t161175*(1.0/6.0);
            double t161196 = b3p*c*t161175*t161167*(1.0/2.0);
            double t161197 = t161193+t161194+t161195+t161196;
            double t161198 = t161190*t161191*t161192*t161197;
            double t161199 = log(t161188);
            double t161200 = log(t161185);
            double t161201 = a1f*c*t161165;
            double t161202 = t161201+1.0;
            double t161203 = t161022*t161041*t161044*t161036*t161047;
            double t161204 = Aa*t161022*t161041*t161071*t161059*t161069*t161078*2.0;
            double t161205 = 1.0/pow(rho_a[index],1.1E1/3.0);
            double t161206 = 1.0/(t161143*t161143);
            double t161207 = 1.0/t161136;
            double t161208 = 1.0/(t161134*t161134);
            double t161209 = 1.0/(t161139*t161139);
            double t161210 = 1.0/t161134;
            double t161211 = 1.0/(t161136*t161136);
            double t161212 = 1.0/t161139;
            double t161213 = 1.0/t161143;
            double t161215 = a1p*c*c0p*t161035*t161009*(2.0/3.0);
            double t161220 = t161034*t161152*t161146*t161147;
            double t161214 = -t161220-t161215+t161153+t161057;
            double t161216 = 1.0/pow(t160997,7.0/3.0);
            double t161217 = 1.0/pow(t160997,8.0/3.0);
            double t161221 = t161056*t161056;
            double t161222 = 1.0/pow(t160999,3.0/2.0);
            double t161223 = b4p*t161004*t161217*(1.0E1/9.0);
            double t161224 = b2p*c*t161216*(4.0/9.0);
            double t161225 = b1p*c*t161216*t161049*(2.0/9.0);
            double t161226 = b3p*c*t161000*t161216*(2.0/3.0);
            double t161227 = b3p*t161004*t161217*t161049*(1.0/1.2E1);
            double t161228 = t161223+t161224+t161225+t161226+t161227-b1p*t161004*t161222*t161217*(1.0/3.6E1);
            double t161229 = t161050*t161015*t161051*t161228;
            double t161230 = 1.0/(t161008*t161008*t161008);
            double t161231 = t161152*t161152;
            double t161232 = 1.0/(t161013*t161013);
            double t161233 = 1.0/(t161008*t161008*t161008*t161008);
            double t161234 = t161010*t161221*t161015*t161232*t161233*(1.0/2.0);
            double t161235 = t161220+t161215-t161153-t161057;
            double t161236 = 1.0/(t160997*t160997*t160997);
            double t161237 = a1p*c*t161050*t161051*t161009*t161056*(2.0/3.0);
            double t161238 = 1.0/(t160997*t160997*t160997*t160997*t160997*t160997);
            double t161239 = t161016*t161017*t161044*4.0;
            double t161240 = t161154+t161239;
            double t161241 = t161016*t161236*t161075*(8.0/3.0);
            double t161242 = 1.0/pow(t161037,2.0/3.0);
            double t161243 = t161043*t161242*t161145*(4.0/9.0);
            double t161244 = 1.0/pow(t161039,2.0/3.0);
            double t161245 = t161043*t161145*t161244*(4.0/9.0);
            double t161246 = t161241+t161243+t161245-t161016*t161072*t161236*(8.0/3.0);
            double t161247 = t161163*t161163;
            double t161248 = t161154-t161239;
            double t161249 = t161022*t161044*t161036*t161047*t161156;
            double t161250 = t161022*t161044*t161036*t161047*t161076;
            double t161251 = Aa*t161022*t161041*t161240*t161071*t161059*t161069*2.0;
            double t161252 = Aa*t161022*t161071*t161156*t161059*t161069*t161078*2.0;
            double t161253 = Aa*t161022*t161071*t161076*t161059*t161069*t161078*2.0;
            double t161254 = c0f*t161117*t161119*2.0;
            double t161256 = c0p*t161104*t161113*2.0;
            double t161255 = t161254-t161256;
            double t161257 = c0f*t161200*t161202*2.0;
            double t161259 = c0p*t161190*t161199*2.0;
            double t161258 = t161257-t161259;
            double t161260 = gamma_aa[index]*gcab*t161205*(8.0/3.0);
            double t161261 = gamma_aa[index]*t161120*t161121*t161205*(8.0/3.0);
            double t161262 = t161260+t161261;
            double t161263 = gamma_bb[index]*gcab*t161123*(8.0/3.0);
            double t161264 = gamma_bb[index]*t161120*t161121*t161123*(8.0/3.0);
            double t161265 = t161263+t161264;
            double t161266 = gamma_aa[index]*gcab*t161205*(1.6E1/3.0);
            double t161267 = gamma_aa[index]*gcab*t161120*t161122*t161205*1.6E1;
            double t161268 = gamma_aa[index]*t161121*t161122*t161205*t161128*(1.6E1/3.0);
            double t161269 = gamma_aa[index]*t161120*t161121*t161205*1.6E1;
            double t161270 = t161266+t161267+t161268+t161269;
            double t161271 = gamma_bb[index]*gcab*t161123*(1.6E1/3.0);
            double t161272 = gamma_bb[index]*gcab*t161120*t161122*t161123*1.6E1;
            double t161273 = gamma_bb[index]*t161121*t161122*t161123*t161128*(1.6E1/3.0);
            double t161274 = gamma_bb[index]*t161120*t161121*t161123*1.6E1;
            double t161275 = t161271+t161272+t161273+t161274;
            double t161276 = gamma_aa[index]*gcab*t161205*4.0;
            double t161277 = gamma_aa[index]*gcab*t161120*t161122*t161205*4.0;
            double t161278 = gamma_aa[index]*t161120*t161121*t161205*8.0;
            double t161279 = t161276+t161277+t161278;
            double t161280 = gamma_bb[index]*gcab*t161123*4.0;
            double t161281 = gamma_bb[index]*gcab*t161120*t161122*t161123*4.0;
            double t161282 = gamma_bb[index]*t161120*t161121*t161123*8.0;
            double t161283 = t161280+t161281+t161282;
            v_rho_a_rho_b_[index] = (t161203+t161204+t161046+rho_a[index]*(-t161112+t161022*t161116*(t161112- \
               (t161119*1.0/(t161088*t161088)*(b2f*c*t161089*(1.0/3.0)+b4f*t161004*t161095*(2.0/3.0)+b1f*c*t161096* \
               t161089*(1.0/6.0)+b3f*c*t161081*t161089*(1.0/2.0)))/t161099+a1f*c*c0f*t161117*t161089*(2.0/3.0)-a1p* \
               c*c0p*t161113*t161089*(2.0/3.0))+a1p*c*c0p*t161113*t161089*(2.0/3.0))+t160997*(t161250+t161144+t161253+ \
               t161164+t161057-a1p*c*c0p*t161035*t161009*(2.0/3.0)-t161022*t161041*t161214*t161044*t161047-t161022* \
               t161041*t161036*t161047*t161058*4.0-Aa*t161022*t161041*t161071*t161059*t161069*(t161154-t161016*t161017* \
               t161044*4.0)*2.0-Aa*a1a*c*t161022*t161041*t161009*t161059*t161069*t161078*(2.0/3.0))-c0p*t161104*t161113* \
               2.0-t161022*t161116*t161255)*(ccab1*gamma_bb[index]*gcab*t161123*t161207*(4.0/3.0)-ccab2*t161120*t161122* \
               t161209*t161265-ccab4*t161208*t161128*t161129*t161275-ccab1*gamma_bb[index]*t161120*t161121*t161211* \
               t161123*(4.0/3.0)+ccab2*gamma_bb[index]*t161120*t161121*t161212*t161123*(8.0/3.0)+ccab3*gamma_bb[index]* \
               gcab*t161120*t161122*t161123*t161213*4.0+ccab4*gamma_bb[index]*t161210*t161121*t161122*t161123*t161128* \
               (1.6E1/3.0)-ccab3*gcab*t161120*t161121*t161122*t161206*t161283)-(rho_a[index]*(t161256+t161022*t161116* \
               t161255)+rho_b[index]*(t161259+t161022*t161116*t161258)-t160997*(t161203+t161204+t161046))*(ccab4* \
               t161208*t161128*t161129*(gamma_aa[index]*gamma_bb[index]*t161120*t161123*t161205*(6.4E1/3.0)+gamma_aa[index]* \
               gamma_bb[index]*t161122*t161123*t161205*t161128*(6.4E1/3.0)+gamma_aa[index]*gamma_bb[index]*gcab*t161120* \
               t161121*t161123*t161205*(1.28E2/3.0))-ccab2*t161120*t161122*t161262*1.0/(t161139*t161139*t161139)* \
               t161265*2.0-ccab4*1.0/(t161134*t161134*t161134)*t161270*t161128*t161129*t161275*2.0+ccab3*gcab*t161120* \
               t161121*t161122*t161206*(gamma_aa[index]*gamma_bb[index]*t161120*t161123*t161205*(3.2E1/3.0)+gamma_aa[index]* \
               gamma_bb[index]*gcab*t161120*t161121*t161123*t161205*(3.2E1/3.0))+ccab1*gamma_aa[index]*gamma_bb[index]* \
               t161120*t161211*t161123*t161205*(3.2E1/9.0)-ccab2*gamma_aa[index]*gamma_bb[index]*t161120*t161212* \
               t161123*t161205*(3.2E1/9.0)+ccab2*gamma_bb[index]*t161120*t161121*t161123*t161262*t161209*(8.0/3.0) \
               +ccab2*gamma_aa[index]*t161120*t161121*t161205*t161209*t161265*(8.0/3.0)-ccab3*gcab*t161120*t161121* \
               t161122*1.0/(t161143*t161143*t161143)*t161283*t161279*2.0-ccab4*gamma_aa[index]*gamma_bb[index]*t161210* \
               t161122*t161123*t161205*t161128*(6.4E1/3.0)+ccab2*gamma_aa[index]*gamma_bb[index]*t161122*t161123* \
               t161205*t161128*t161209*(3.2E1/9.0)+ccab3*gamma_aa[index]*gcab*t161120*t161122*t161205*t161206*t161283* \
               4.0+ccab3*gamma_bb[index]*gcab*t161120*t161122*t161123*t161206*t161279*4.0+ccab4*gamma_bb[index]*t161121* \
               t161122*t161123*t161270*t161208*t161128*(1.6E1/3.0)+ccab4*gamma_aa[index]*t161121*t161122*t161205* \
               t161208*t161128*t161275*(1.6E1/3.0)-ccab3*gamma_aa[index]*gamma_bb[index]*gcab*t161120*t161121*t161123* \
               t161213*t161205*(3.2E1/3.0)-ccab1*gamma_aa[index]*gamma_bb[index]*gcab*t161120*t161121*t161123*t161205* \
               1.0/(t161136*t161136*t161136)*(3.2E1/9.0))+(ccab0+ccab1*gcab*t161121*t161207+ccab2*t161120*t161122* \
               t161212+ccab4*t161210*t161128*t161129+ccab3*gcab*t161120*t161121*t161122*t161213)*(-t161250+t161251+ \
               t161252-t161253+t161249+t160997*(t161234+t161237+t161229-t161050*t161221*t161230*t161015*2.0-a1p*c* \
               c0p*t161035*t161216*(8.0/9.0)-t161022*t161041*t161044*t161047*(t161234+t161237+t161229-t161050*t161221* \
               t161230*t161015*2.0+t161231*t161034*1.0/(t161028*t161028*t161028)*t161146*2.0-t161034*t161146*t161147* \
               (b2f*c*t161216*(4.0/9.0)+b4f*t161004*t161217*(1.0E1/9.0)+b1f*c*t161216*t161049*(2.0/9.0)+b3f*c*t161000* \
               t161216*(2.0/3.0)-b1f*t161004*t161222*t161217*(1.0/3.6E1)+b3f*t161004*t161217*t161049*(1.0/1.2E1)) \
               -1.0/(t161031*t161031)*t161023*t161231*t161034*1.0/(t161028*t161028*t161028*t161028)*(1.0/2.0)+a1f* \
               c*c0f*t161032*t161216*(8.0/9.0)-a1p*c*c0p*t161035*t161216*(8.0/9.0)-a1f*c*t161152*t161009*t161146* \
               t161147*(2.0/3.0))+t161022*t161041*t161017*t161044*t161036*1.2E1-t161022*t161041*t161036*t161047*t161238* \
               2.0E1+t161022*t161041*t161235*t161047*t161058*8.0+t161022*t161044*t161036*t161047*t161246+t161022* \
               t161044*t161235*t161047*t161156-t161022*t161044*t161235*t161047*t161076-t161022*t161036*t161047*t161156* \
               t161058*4.0+t161022*t161036*t161047*t161058*t161076*4.0+t161022*t161016*t161017*t161044*t161036*t161156* \
               4.0+t161022*t161016*t161017*t161044*t161036*t161076*4.0+Aa*t161022*t161240*t161071*t161076*t161059* \
               t161069*2.0-Aa*t161022*t161071*t161156*t161059*t161248*t161069*2.0+Aa*t161022*t161071*t161246*t161059* \
               t161069*t161078*2.0+Aa*t161022*t161041*t161071*t161059*t161069*(t161017*t161044*1.2E1-t161047*t161238* \
               2.0E1)*2.0+t161022*t161041*t161240*t161071*t161163*t161157*t161059*t161158+t161022*t161041*t161071* \
               t161163*t161157*t161059*t161158*t161248+t161022*t161071*t161163*t161156*t161157*t161059*t161158*t161078- \
               t161022*t161071*t161163*t161076*t161157*t161059*t161158*t161078-t161022*t161041*t161071*1.0/(t161065* \
               t161065*t161065)*t161157*t161247*t161059*t161078*2.0+t161022*t161041*t161071*t161157*t161059*t161158* \
               t161078*(b2a*c*t161216*(4.0/9.0)+b4a*t161004*t161217*(1.0E1/9.0)+b1a*c*t161216*t161049*(2.0/9.0)+b3a* \
               c*t161000*t161216*(2.0/3.0)-b1a*t161004*t161222*t161217*(1.0/3.6E1)+b3a*t161004*t161217*t161049*(1.0/ \
               1.2E1))-Aa*a1a*c*t161022*t161041*t161240*t161009*t161059*t161069*(2.0/3.0)-Aa*a1a*c*t161022*t161041* \
               t161009*t161059*t161248*t161069*(2.0/3.0)-Aa*a1a*c*t161022*t161041*t161216*t161059*t161069*t161078* \
               (8.0/9.0)-Aa*a1a*c*t161022*t161009*t161156*t161059*t161069*t161078*(2.0/3.0)+Aa*a1a*c*t161022*t161009* \
               t161076*t161059*t161069*t161078*(2.0/3.0)+t161022*t161041*t161060*t161071*1.0/(t161065*t161065*t161065* \
               t161065)*t161247*t161059*1.0/(t161068*t161068)*t161078*(1.0/2.0)+a1a*c*t161022*t161041*t161009*t161163* \
               t161157*t161059*t161158*t161078*(2.0/3.0))-t161050*t161015*t161051*t161056*2.0+a1p*c*c0p*t161035*t161009* \
               (4.0/3.0)-t161022*t161041*t161044*t161235*t161047*2.0+t161022*t161041*t161036*t161047*t161058*8.0+ \
               Aa*t161022*t161041*t161071*t161059*t161069*(t161154-t161239)*2.0-t161022*t161041*t161071*t161163*t161157* \
               t161059*t161158*t161078*2.0+Aa*a1a*c*t161022*t161041*t161009*t161059*t161069*t161078*(4.0/3.0))+(t161203+ \
               t161204+t161046-t160997*(t161215+t161251+t161144+t161252-t161164-t161057+t161249+t161022*t161041*t161214* \
               t161044*t161047+t161022*t161041*t161036*t161047*t161058*4.0+Aa*a1a*c*t161022*t161041*t161009*t161059* \
               t161069*t161078*(2.0/3.0))+rho_b[index]*(-t161198+t161022*t161116*(t161198-(t161202*1.0/(t161174*t161174) \
               *(b2f*c*t161175*(1.0/3.0)+b4f*t161004*t161181*(2.0/3.0)+b1f*c*t161182*t161175*(1.0/6.0)+b3f*c*t161175* \
               t161167*(1.0/2.0)))/t161185+a1f*c*c0f*t161200*t161175*(2.0/3.0)-a1p*c*c0p*t161175*t161199*(2.0/3.0) \
               )+a1p*c*c0p*t161175*t161199*(2.0/3.0))-c0p*t161190*t161199*2.0-t161022*t161116*t161258)*(ccab1*gamma_aa[index]* \
               gcab*t161205*t161207*(4.0/3.0)-ccab2*t161120*t161122*t161262*t161209-ccab4*t161270*t161208*t161128* \
               t161129-ccab1*gamma_aa[index]*t161120*t161121*t161211*t161205*(4.0/3.0)+ccab2*gamma_aa[index]*t161120* \
               t161121*t161212*t161205*(8.0/3.0)+ccab3*gamma_aa[index]*gcab*t161120*t161122*t161213*t161205*4.0+ccab4* \
               gamma_aa[index]*t161210*t161121*t161122*t161205*t161128*(1.6E1/3.0)-ccab3*gcab*t161120*t161121*t161122* \
               t161206*t161279);
        } else if (rho_a[index] > cutoff_) {
            v_rho_a_rho_b_[index] = 0.0;
        } else if (rho_b[index] > cutoff_) {
            v_rho_a_rho_b_[index] = 0.0;
        } else {
            v_rho_a_rho_b_[index] = 0.0;
        } 

        //V_rho_b_rho_b
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t161285 = rho_a[index]+rho_b[index];
            double t161286 = 1.0/pow(t161285,1.0/3.0);
            double t161287 = c*t161286;
            double t161288 = sqrt(t161287);
            double t161289 = b1p*t161288;
            double t161290 = pow(t161287,3.0/2.0);
            double t161291 = b3p*t161290;
            double t161292 = c*c;
            double t161293 = 1.0/pow(t161285,2.0/3.0);
            double t161294 = b4p*t161292*t161293;
            double t161295 = b2p*c*t161286;
            double t161296 = t161291+t161294+t161295+t161289;
            double t161297 = 1.0/pow(t161285,4.0/3.0);
            double t161298 = 1.0/c0p;
            double t161299 = 1.0/t161296;
            double t161300 = t161298*t161299*(1.0/2.0);
            double t161301 = t161300+1.0;
            double t161302 = a1p*c*t161286;
            double t161303 = t161302+1.0;
            double t161304 = rho_a[index]-rho_b[index];
            double t161305 = t161304*t161304;
            double t161306 = 1.0/t161285;
            double t161307 = t161304*t161306;
            double t161308 = two_13*2.0;
            double t161309 = t161308-2.0;
            double t161310 = 1.0/t161309;
            double t161311 = 1.0/c0f;
            double t161312 = b1f*t161288;
            double t161313 = b3f*t161290;
            double t161314 = b4f*t161292*t161293;
            double t161315 = b2f*c*t161286;
            double t161316 = t161312+t161313+t161314+t161315;
            double t161317 = 1.0/t161316;
            double t161318 = t161311*t161317*(1.0/2.0);
            double t161319 = t161318+1.0;
            double t161320 = log(t161319);
            double t161321 = a1f*c*t161286;
            double t161322 = t161321+1.0;
            double t161323 = log(t161301);
            double t161334 = c0f*t161320*t161322*2.0;
            double t161335 = c0p*t161303*t161323*2.0;
            double t161324 = t161334-t161335;
            double t161325 = t161307+1.0;
            double t161326 = pow(t161325,4.0/3.0);
            double t161327 = -t161307+1.0;
            double t161328 = pow(t161327,4.0/3.0);
            double t161329 = t161326+t161328-2.0;
            double t161330 = 1.0/(t161285*t161285);
            double t161331 = t161330*t161304;
            double t161332 = t161331+t161306;
            double t161333 = 1.0/(t161285*t161285*t161285*t161285);
            double t161336 = t161305*t161305;
            double t161337 = 1.0/pow(t161285,5.0/3.0);
            double t161338 = 1.0/sqrt(t161287);
            double t161339 = 1.0/t161301;
            double t161340 = 1.0/(t161296*t161296);
            double t161341 = b4p*t161292*t161337*(2.0/3.0);
            double t161342 = b2p*c*t161297*(1.0/3.0);
            double t161343 = b1p*c*t161338*t161297*(1.0/6.0);
            double t161344 = b3p*c*t161288*t161297*(1.0/2.0);
            double t161345 = t161341+t161342+t161343+t161344;
            double t161346 = 1.0/(t161285*t161285*t161285*t161285*t161285);
            double t161347 = 1.0/d2fz0;
            double t161348 = 1.0/Aa;
            double t161349 = b1a*t161288;
            double t161350 = b3a*t161290;
            double t161351 = b4a*t161292*t161293;
            double t161352 = b2a*c*t161286;
            double t161353 = t161350+t161351+t161352+t161349;
            double t161354 = 1.0/t161353;
            double t161355 = t161354*t161348*(1.0/2.0);
            double t161356 = t161355+1.0;
            double t161357 = log(t161356);
            double t161358 = a1a*c*t161286;
            double t161359 = t161358+1.0;
            double t161360 = pow(t161325,1.0/3.0);
            double t161361 = t161332*t161360*(4.0/3.0);
            double t161362 = pow(t161327,1.0/3.0);
            double t161438 = t161332*t161362*(4.0/3.0);
            double t161363 = t161361-t161438;
            double t161364 = t161333*t161336;
            double t161365 = t161364-1.0;
            double t161366 = 1.0/pow(rho_b[index],1.0/3.0);
            double t161367 = c*t161366;
            double t161368 = sqrt(t161367);
            double t161369 = b1f*t161368;
            double t161370 = pow(t161367,3.0/2.0);
            double t161371 = b3f*t161370;
            double t161372 = 1.0/pow(rho_b[index],2.0/3.0);
            double t161373 = b4f*t161372*t161292;
            double t161374 = b2f*c*t161366;
            double t161375 = t161371+t161373+t161374+t161369;
            double t161376 = 1.0/pow(rho_b[index],4.0/3.0);
            double t161377 = b1p*t161368;
            double t161378 = b3p*t161370;
            double t161379 = b4p*t161372*t161292;
            double t161380 = b2p*c*t161366;
            double t161381 = t161380+t161377+t161378+t161379;
            double t161382 = 1.0/pow(rho_b[index],5.0/3.0);
            double t161383 = 1.0/sqrt(t161367);
            double t161384 = 1.0/t161375;
            double t161385 = t161311*t161384*(1.0/2.0);
            double t161386 = t161385+1.0;
            double t161387 = 1.0/t161381;
            double t161388 = t161387*t161298*(1.0/2.0);
            double t161389 = t161388+1.0;
            double t161390 = a1p*c*t161366;
            double t161391 = t161390+1.0;
            double t161392 = 1.0/t161389;
            double t161393 = 1.0/(t161381*t161381);
            double t161394 = b4p*t161292*t161382*(2.0/3.0);
            double t161395 = b2p*c*t161376*(1.0/3.0);
            double t161396 = b1p*c*t161383*t161376*(1.0/6.0);
            double t161397 = b3p*c*t161376*t161368*(1.0/2.0);
            double t161398 = t161394+t161395+t161396+t161397;
            double t161399 = t161391*t161392*t161393*t161398;
            double t161400 = log(t161389);
            double t161401 = pow(2.0,1.0/3.0);
            double t161402 = t161401*2.0;
            double t161403 = t161402-2.0;
            double t161404 = log(t161386);
            double t161405 = a1f*c*t161366;
            double t161406 = t161405+1.0;
            double t161407 = gcab*gcab;
            double t161411 = 1.0/pow(rho_a[index],8.0/3.0);
            double t161412 = gamma_aa[index]*t161411*(1.0/2.0);
            double t161413 = 1.0/pow(rho_b[index],8.0/3.0);
            double t161414 = gamma_bb[index]*t161413*(1.0/2.0);
            double t161408 = t161412+t161414;
            double t161409 = t161408*t161408;
            double t161410 = 1.0/pow(rho_b[index],1.1E1/3.0);
            double t161415 = t161407*t161407;
            double t161416 = t161409*t161409;
            double t161417 = t161407*t161409*6.0;
            double t161418 = gcab*t161407*t161408*t161409*4.0;
            double t161419 = t161415*t161416;
            double t161420 = gcab*t161408*4.0;
            double t161421 = t161420+t161417+t161418+t161419+1.0;
            double t161422 = gcab*t161408;
            double t161423 = t161422+1.0;
            double t161424 = t161407*t161409;
            double t161425 = gcab*t161408*2.0;
            double t161426 = t161424+t161425+1.0;
            double t161427 = t161407*t161409*3.0;
            double t161428 = gcab*t161407*t161408*t161409;
            double t161429 = gcab*t161408*3.0;
            double t161430 = t161427+t161428+t161429+1.0;
            double t161431 = a1p*c*c0p*t161323*t161297*(2.0/3.0);
            double t161432 = 1.0/t161426;
            double t161433 = 1.0/t161430;
            double t161434 = 1.0/t161423;
            double t161435 = 1.0/t161421;
            double t161436 = 1.0/pow(t161285,7.0/3.0);
            double t161437 = 1.0/pow(t161285,8.0/3.0);
            double t161439 = 1.0/t161319;
            double t161440 = 1.0/(t161316*t161316);
            double t161441 = b4f*t161292*t161337*(2.0/3.0);
            double t161442 = b2f*c*t161297*(1.0/3.0);
            double t161443 = b1f*c*t161338*t161297*(1.0/6.0);
            double t161444 = b3f*c*t161288*t161297*(1.0/2.0);
            double t161445 = t161441+t161442+t161443+t161444;
            double t161446 = t161322*t161440*t161445*t161439;
            double t161448 = t161303*t161340*t161345*t161339;
            double t161449 = a1f*c*c0f*t161320*t161297*(2.0/3.0);
            double t161447 = t161431+t161446-t161448-t161449;
            double t161450 = t161345*t161345;
            double t161451 = 1.0/pow(t161287,3.0/2.0);
            double t161452 = b4p*t161292*t161437*(1.0E1/9.0);
            double t161453 = b2p*c*t161436*(4.0/9.0);
            double t161454 = b1p*c*t161436*t161338*(2.0/9.0);
            double t161455 = b3p*c*t161436*t161288*(2.0/3.0);
            double t161456 = b3p*t161292*t161338*t161437*(1.0/1.2E1);
            double t161457 = t161452+t161453+t161454+t161455+t161456-b1p*t161451*t161292*t161437*(1.0/3.6E1);
            double t161458 = 1.0/(t161296*t161296*t161296);
            double t161459 = t161303*t161450*t161339*t161458*2.0;
            double t161460 = t161445*t161445;
            double t161461 = 1.0/(t161301*t161301);
            double t161462 = 1.0/(t161296*t161296*t161296*t161296);
            double t161463 = t161330*2.0;
            double t161464 = 1.0/(t161285*t161285*t161285);
            double t161465 = t161304*t161464*2.0;
            double t161466 = t161463+t161465;
            double t161467 = t161332*t161332;
            double t161468 = a1p*c*c0p*t161323*t161436*(8.0/9.0);
            double t161469 = 1.0/(t161285*t161285*t161285*t161285*t161285*t161285);
            double t161470 = t161304*t161305*t161333*4.0;
            double t161471 = t161336*t161346*4.0;
            double t161472 = t161470+t161471;
            double t161473 = t161360*t161466*(4.0/3.0);
            double t161474 = 1.0/pow(t161325,2.0/3.0);
            double t161475 = t161474*t161467*(4.0/9.0);
            double t161476 = 1.0/pow(t161327,2.0/3.0);
            double t161477 = t161467*t161476*(4.0/9.0);
            double t161478 = t161473+t161475+t161477-t161362*t161466*(4.0/3.0);
            double t161479 = 1.0/t161356;
            double t161480 = 1.0/(t161353*t161353);
            double t161481 = b4a*t161292*t161337*(2.0/3.0);
            double t161482 = b2a*c*t161297*(1.0/3.0);
            double t161483 = b1a*c*t161338*t161297*(1.0/6.0);
            double t161484 = b3a*c*t161288*t161297*(1.0/2.0);
            double t161485 = t161481+t161482+t161483+t161484;
            double t161486 = t161485*t161485;
            double t161487 = 1.0/t161386;
            double t161488 = b4f*t161292*t161382*(2.0/3.0);
            double t161489 = b2f*c*t161376*(1.0/3.0);
            double t161490 = b1f*c*t161383*t161376*(1.0/6.0);
            double t161491 = b3f*c*t161376*t161368*(1.0/2.0);
            double t161492 = t161490+t161491+t161488+t161489;
            double t161493 = 1.0/(t161375*t161375);
            double t161494 = 1.0/pow(rho_b[index],7.0/3.0);
            double t161495 = 1.0/pow(t161367,3.0/2.0);
            double t161496 = t161492*t161492;
            double t161497 = t161398*t161398;
            double t161498 = 1.0/(t161381*t161381*t161381);
            double t161499 = t161391*t161392*t161497*t161498*2.0;
            double t161500 = b4p*t161413*t161292*(1.0E1/9.0);
            double t161501 = b2p*c*t161494*(4.0/9.0);
            double t161502 = b3p*t161413*t161292*t161383*(1.0/1.2E1);
            double t161503 = b1p*c*t161383*t161494*(2.0/9.0);
            double t161504 = b3p*c*t161368*t161494*(2.0/3.0);
            double t161621 = b1p*t161413*t161292*t161495*(1.0/3.6E1);
            double t161505 = t161500+t161501+t161502+t161503+t161504-t161621;
            double t161506 = 1.0/(t161389*t161389);
            double t161507 = 1.0/(t161381*t161381*t161381*t161381);
            double t161508 = a1p*c*c0p*t161400*t161494*(8.0/9.0);
            double t161509 = a1f*c*c0f*t161404*t161376*(2.0/3.0);
            double t161510 = a1p*c*c0p*t161400*t161376*(2.0/3.0);
            double t161511 = t161406*t161492*t161493*t161487;
            double t161512 = t161510+t161511-t161509-t161399;
            double t161513 = gamma_bb[index]*gamma_bb[index];
            double t161514 = gcaa*gcaa;
            double t161515 = t161513*t161513;
            double t161516 = t161514*t161514;
            double t161517 = 1.0/pow(rho_b[index],3.2E1/3.0);
            double t161518 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
               rho_b[index]*rho_b[index]);
            double t161519 = 1.0/pow(rho_b[index],1.6E1/3.0);
            double t161520 = 1.0/pow(rho_a[index],1.0/3.0);
            double t161521 = c*t161520;
            double t161522 = sqrt(t161521);
            double t161523 = pow(t161521,3.0/2.0);
            double t161524 = 1.0/pow(rho_a[index],2.0/3.0);
            double t161525 = b1p*t161522;
            double t161526 = b3p*t161523;
            double t161527 = b4p*t161524*t161292;
            double t161528 = b2p*c*t161520;
            double t161529 = t161525+t161526+t161527+t161528;
            double t161530 = 1.0/t161529;
            double t161531 = t161530*t161298*(1.0/2.0);
            double t161532 = t161531+1.0;
            double t161533 = log(t161532);
            double t161534 = a1p*c*t161520;
            double t161535 = t161534+1.0;
            double t161536 = c0p*t161533*t161535*2.0;
            double t161537 = c0f*t161404*t161406*2.0;
            double t161539 = c0p*t161400*t161391*2.0;
            double t161538 = t161537-t161539;
            double t161540 = t161310*t161324*t161333*t161336*t161329;
            double t161541 = Aa*t161310*t161329*t161347*t161365*t161357*t161359*2.0;
            double t161542 = gamma_bb[index]*gcab*t161410*(1.6E1/3.0);
            double t161543 = gamma_bb[index]*gcab*t161410*t161407*t161409*1.6E1;
            double t161544 = gamma_bb[index]*t161410*t161415*t161408*t161409*(1.6E1/3.0);
            double t161545 = gamma_bb[index]*t161410*t161407*t161408*1.6E1;
            double t161546 = t161542+t161543+t161544+t161545;
            double t161547 = 1.0/(t161423*t161423);
            double t161548 = 1.0/pow(rho_b[index],2.2E1/3.0);
            double t161549 = gamma_bb[index]*gcab*t161410*(8.0/3.0);
            double t161550 = gamma_bb[index]*t161410*t161407*t161408*(8.0/3.0);
            double t161551 = t161550+t161549;
            double t161552 = 1.0/(t161430*t161430);
            double t161553 = 1.0/pow(rho_b[index],1.4E1/3.0);
            double t161554 = 1.0/(t161421*t161421);
            double t161555 = 1.0/(t161426*t161426);
            double t161556 = gamma_bb[index]*gcab*t161410*4.0;
            double t161557 = gamma_bb[index]*gcab*t161410*t161407*t161409*4.0;
            double t161558 = gamma_bb[index]*t161410*t161407*t161408*8.0;
            double t161559 = t161556+t161557+t161558;
            double t161560 = t161310*t161403*t161538;
            double t161561 = t161560+t161539;
            double t161562 = gamma_bb[index]*gcaa*t161413*4.0;
            double t161563 = gamma_bb[index]*gcaa*t161513*t161514*t161518*4.0;
            double t161564 = t161513*t161514*t161519*6.0;
            double t161565 = t161515*t161516*t161517;
            double t161566 = t161562+t161563+t161564+t161565+1.0;
            double t161567 = 1.0/t161566;
            double t161568 = gamma_bb[index]*gcaa*t161413;
            double t161569 = t161568+1.0;
            double t161570 = 1.0/t161569;
            double t161571 = gamma_bb[index]*gcaa*t161413*3.0;
            double t161572 = gamma_bb[index]*gcaa*t161513*t161514*t161518;
            double t161573 = t161513*t161514*t161519*3.0;
            double t161574 = t161571+t161572+t161573+1.0;
            double t161575 = 1.0/t161574;
            double t161576 = gamma_bb[index]*gcaa*t161413*2.0;
            double t161577 = t161513*t161514*t161519;
            double t161578 = t161576+t161577+1.0;
            double t161579 = 1.0/t161578;
            double t161580 = 1.0/pow(rho_b[index],1.9E1/3.0);
            double t161581 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
               rho_b[index]*rho_b[index]*rho_b[index]);
            double t161582 = 1.0/pow(rho_b[index],3.5E1/3.0);
            double t161583 = t161310*t161403*t161512;
            double t161584 = -t161510+t161583+t161399;
            double t161585 = ccaa4*t161515*t161516*t161582*t161567*(3.2E1/3.0);
            double t161586 = ccaa1*gamma_bb[index]*gcaa*t161410*t161570*(8.0/3.0);
            double t161587 = ccaa3*gamma_bb[index]*gcaa*t161513*t161514*t161581*t161575*8.0;
            double t161588 = ccaa2*t161513*t161514*t161580*t161579*(1.6E1/3.0);
            double t161589 = 1.0/(t161569*t161569);
            double t161590 = gamma_bb[index]*gcaa*t161410*8.0;
            double t161591 = gamma_bb[index]*gcaa*t161513*t161514*t161581*8.0;
            double t161592 = t161513*t161514*t161580*1.6E1;
            double t161593 = t161590+t161591+t161592;
            double t161594 = 1.0/(t161574*t161574);
            double t161595 = gamma_bb[index]*gcaa*t161410*(3.2E1/3.0);
            double t161596 = gamma_bb[index]*gcaa*t161513*t161514*t161581*3.2E1;
            double t161597 = t161513*t161514*t161580*3.2E1;
            double t161598 = t161515*t161516*t161582*(3.2E1/3.0);
            double t161599 = t161595+t161596+t161597+t161598;
            double t161600 = 1.0/(t161566*t161566);
            double t161601 = gamma_bb[index]*gcaa*t161410*(1.6E1/3.0);
            double t161602 = t161513*t161514*t161580*(1.6E1/3.0);
            double t161603 = t161601+t161602;
            double t161604 = 1.0/(t161578*t161578);
            double t161605 = t161585+t161586+t161587+t161588-ccaa1*t161513*t161514*t161580*t161589*(8.0/3.0)- \
               ccaa2*t161513*t161603*t161514*t161604*t161519-ccaa4*t161600*t161515*t161516*t161517*t161599-ccaa3* \
               gamma_bb[index]*gcaa*t161513*t161514*t161518*t161593*t161594;
            double t161606 = 1.0/pow(rho_b[index],1.0E1);
            double t161607 = 1.0/pow(rho_b[index],3.8E1/3.0);
            double t161608 = ccaa4*t161515*t161516*t161517*t161567;
            double t161609 = ccaa1*gamma_bb[index]*gcaa*t161413*t161570;
            double t161610 = ccaa3*gamma_bb[index]*gcaa*t161513*t161514*t161518*t161575;
            double t161611 = ccaa2*t161513*t161514*t161519*t161579;
            double t161612 = ccaa0+t161610+t161611+t161608+t161609;
            double t161613 = 1.0/(t161375*t161375*t161375);
            double t161614 = b4f*t161413*t161292*(1.0E1/9.0);
            double t161615 = b2f*c*t161494*(4.0/9.0);
            double t161616 = b3f*t161413*t161292*t161383*(1.0/1.2E1);
            double t161617 = b1f*c*t161383*t161494*(2.0/9.0);
            double t161618 = b3f*c*t161368*t161494*(2.0/3.0);
            double t161619 = t161614+t161615+t161616+t161617+t161618-b1f*t161413*t161292*t161495*(1.0/3.6E1);
            double t161620 = t161406*t161493*t161619*t161487;
            double t161622 = t161505*t161391*t161392*t161393;
            double t161623 = 1.0/(t161386*t161386);
            double t161624 = 1.0/(t161375*t161375*t161375*t161375);
            double t161625 = t161311*t161406*t161623*t161624*t161496*(1.0/2.0);
            double t161626 = t161506*t161507*t161391*t161298*t161497*(1.0/2.0);
            double t161627 = a1f*c*t161492*t161376*t161493*t161487*(2.0/3.0);
            double t161628 = a1p*c*t161392*t161393*t161376*t161398*(2.0/3.0);
            double t161629 = rho_b[index]*(8.334140006820045E15/1.40737488355328E14);
            double t161630 = 1.0/(omega*omega);
            double t161631 = pow(t161629,2.0/3.0);
            double t161634 = t161630*t161631;
            double t161632 = exp(-t161634);
            double t161633 = 1.0/pow(t161629,1.0/3.0);
            double t161635 = omega*omega;
            double t161636 = t161632-1.0;
            double t161637 = 1.0/pow(t161629,2.0/3.0);
            double t161638 = 1.0/pow(t161629,4.0/3.0);
            double t161639 = 1.0/omega;
            double t161640 = t161635*t161636*t161637*(1.0/2.0);
            double t161641 = t161640-t161632+3.0/2.0;
            double t161642 = gx*gx;
            double t161643 = t161642*t161642;
            double t161644 = pow(rho_b[index],1.0/3.0);
            double t161645 = pow(t161629,1.0/3.0);
            double t161646 = t161645*t161639;
            double t161647 = erf(t161646);
            double t161648 = t161647*(3.991211251234741E15/2.251799813685248E15);
            double t161680 = omega*t161641*t161633;
            double t161649 = -t161680+t161648;
            double t161650 = gamma_bb[index]*gx*t161413*4.0;
            double t161651 = gamma_bb[index]*gx*t161513*t161642*t161518*4.0;
            double t161652 = t161513*t161642*t161519*6.0;
            double t161653 = t161515*t161517*t161643;
            double t161654 = t161650+t161651+t161652+t161653+1.0;
            double t161655 = 1.0/t161654;
            double t161656 = gamma_bb[index]*gx*t161413;
            double t161657 = t161656+1.0;
            double t161658 = 1.0/t161657;
            double t161659 = gamma_bb[index]*gx*t161413*3.0;
            double t161660 = gamma_bb[index]*gx*t161513*t161642*t161518;
            double t161661 = t161513*t161642*t161519*3.0;
            double t161662 = t161660+t161661+t161659+1.0;
            double t161663 = 1.0/t161662;
            double t161664 = gamma_bb[index]*gx*t161413*2.0;
            double t161665 = t161513*t161642*t161519;
            double t161666 = t161664+t161665+1.0;
            double t161667 = 1.0/t161666;
            double t161668 = 1.0/rho_b[index];
            double t161669 = t161632*t161668*(1.0/3.0);
            double t161670 = 1.0/pow(t161629,5.0/3.0);
            double t161671 = t161670*t161635*t161636*(2.778046668940015E15/1.40737488355328E14);
            double t161675 = t161630*t161632*t161633*(2.778046668940015E15/7.0368744177664E13);
            double t161672 = t161671-t161675+t161669;
            double t161673 = 1.0/sqrt(3.141592653589793);
            double t161674 = omega*t161641*t161638*(2.778046668940015E15/1.40737488355328E14);
            double t161676 = omega*t161633*t161672;
            double t161677 = t161632*t161637*t161673*t161639*(1.108777112152858E31/1.584563250285287E29);
            double t161678 = t161674+t161676+t161677;
            double t161679 = 1.0/pow(t161629,7.0/3.0);
            double t161681 = cx4*t161515*t161517*t161643*t161655;
            double t161682 = cx1*gamma_bb[index]*gx*t161413*t161658;
            double t161683 = cx3*gamma_bb[index]*gx*t161513*t161642*t161518*t161663;
            double t161684 = cx2*t161513*t161642*t161519*t161667;
            double t161685 = cx0+t161681+t161682+t161683+t161684;
            double t161686 = pow(rho_b[index],4.0/3.0);
            double t161687 = omega*t161633*t161678*(4.0/3.0);
            double t161688 = t161687-omega*t161638*t161649*(2.778046668940015E15/1.05553116266496E14);
            double t161689 = cx4*t161515*t161643*t161582*t161655*(3.2E1/3.0);
            double t161690 = cx1*gamma_bb[index]*gx*t161410*t161658*(8.0/3.0);
            double t161691 = cx3*gamma_bb[index]*gx*t161513*t161642*t161581*t161663*8.0;
            double t161692 = cx2*t161513*t161642*t161580*t161667*(1.6E1/3.0);
            double t161693 = 1.0/(t161657*t161657);
            double t161694 = gamma_bb[index]*gx*t161410*8.0;
            double t161695 = gamma_bb[index]*gx*t161513*t161642*t161581*8.0;
            double t161696 = t161513*t161642*t161580*1.6E1;
            double t161697 = t161694+t161695+t161696;
            double t161698 = 1.0/(t161662*t161662);
            double t161699 = gamma_bb[index]*gx*t161410*(3.2E1/3.0);
            double t161700 = gamma_bb[index]*gx*t161513*t161642*t161581*3.2E1;
            double t161701 = t161513*t161642*t161580*3.2E1;
            double t161702 = t161515*t161643*t161582*(3.2E1/3.0);
            double t161703 = t161700+t161701+t161702+t161699;
            double t161704 = 1.0/(t161654*t161654);
            double t161705 = gamma_bb[index]*gx*t161410*(1.6E1/3.0);
            double t161706 = t161513*t161642*t161580*(1.6E1/3.0);
            double t161707 = t161705+t161706;
            double t161708 = 1.0/(t161666*t161666);
            double t161709 = t161690+t161691+t161692+t161689-cx1*t161513*t161642*t161580*t161693*(8.0/3.0)-cx2* \
               t161513*t161642*t161707*t161519*t161708-cx4*t161703*t161515*t161704*t161517*t161643-cx3*gamma_bb[index]* \
               gx*t161513*t161642*t161518*t161697*t161698;
            double t161710 = omega*t161633*t161649*(4.0/3.0);
            double t161711 = t161710-1.0;
            v_rho_b_rho_b_[index] = (ccab0+ccab1*gcab*t161434*t161408+ccab2*t161432*t161407*t161409+ccab4*t161415* \
               t161416*t161435+ccab3*gcab*t161433*t161407*t161408*t161409)*(-rho_b[index]*(t161622-t161508+t161626+ \
               t161628-t161499+t161310*t161403*(t161620+t161508+t161625+t161627+t161499-t161505*t161391*t161392*t161393- \
               t161406*t161613*t161487*t161496*2.0-a1f*c*c0f*t161404*t161494*(8.0/9.0)-t161506*t161507*t161391*t161298* \
               t161497*(1.0/2.0)-a1p*c*t161392*t161393*t161376*t161398*(2.0/3.0)))-t161285*(t161459+t161468-t161303* \
               t161340*t161339*t161457-t161310*t161333*t161336*t161329*(t161459+t161468-t161303*t161340*t161339*t161457- \
               t161322*1.0/(t161316*t161316*t161316)*t161460*t161439*2.0+t161322*t161440*t161439*(b2f*c*t161436*(4.0/ \
               9.0)+b4f*t161292*t161437*(1.0E1/9.0)+b1f*c*t161436*t161338*(2.0/9.0)+b3f*c*t161436*t161288*(2.0/3.0) \
               -b1f*t161451*t161292*t161437*(1.0/3.6E1)+b3f*t161292*t161338*t161437*(1.0/1.2E1))+t161311*t161322* \
               1.0/(t161316*t161316*t161316*t161316)*t161460*1.0/(t161319*t161319)*(1.0/2.0)-a1f*c*c0f*t161320*t161436* \
               (8.0/9.0)-t161303*t161450*t161461*t161462*t161298*(1.0/2.0)+a1f*c*t161440*t161445*t161439*t161297* \
               (2.0/3.0)-a1p*c*t161340*t161345*t161339*t161297*(2.0/3.0))+t161310*t161305*t161324*t161333*t161329* \
               1.2E1+t161310*t161324*t161336*t161363*t161346*8.0-t161310*t161333*t161336*t161363*t161447*2.0+t161310* \
               t161324*t161333*t161336*t161478-t161303*t161450*t161461*t161462*t161298*(1.0/2.0)+t161310*t161324* \
               t161336*t161329*t161469*2.0E1-t161310*t161336*t161346*t161329*t161447*8.0+t161310*t161304*t161305* \
               t161324*t161333*t161363*8.0+t161310*t161304*t161305*t161324*t161346*t161329*3.2E1-t161310*t161304* \
               t161305*t161333*t161329*t161447*8.0-a1p*c*t161340*t161345*t161339*t161297*(2.0/3.0)+Aa*t161310*t161363* \
               t161472*t161347*t161357*t161359*4.0+Aa*t161310*t161347*t161365*t161357*t161359*t161478*2.0+Aa*t161310* \
               t161329*t161347*t161357*t161359*(t161305*t161333*1.2E1+t161336*t161469*2.0E1+t161304*t161305*t161346* \
               3.2E1)*2.0-t161310*t161363*t161480*t161347*t161365*t161359*t161485*t161479*2.0-t161310*t161480*t161472* \
               t161329*t161347*t161359*t161485*t161479*2.0+t161310*1.0/(t161353*t161353*t161353)*t161329*t161347* \
               t161365*t161359*t161486*t161479*2.0-t161310*t161480*t161329*t161347*t161365*t161359*t161479*(b2a*c* \
               t161436*(4.0/9.0)+b4a*t161292*t161437*(1.0E1/9.0)+b1a*c*t161436*t161338*(2.0/9.0)+b3a*c*t161436*t161288* \
               (2.0/3.0)-b1a*t161451*t161292*t161437*(1.0/3.6E1)+b3a*t161292*t161338*t161437*(1.0/1.2E1))+Aa*a1a* \
               c*t161310*t161436*t161329*t161347*t161365*t161357*(8.0/9.0)+Aa*a1a*c*t161310*t161363*t161347*t161365* \
               t161357*t161297*(4.0/3.0)+Aa*a1a*c*t161310*t161472*t161329*t161347*t161357*t161297*(4.0/3.0)-t161310* \
               1.0/(t161353*t161353*t161353*t161353)*t161329*t161347*1.0/(t161356*t161356)*t161365*t161348*t161359* \
               t161486*(1.0/2.0)-a1a*c*t161310*t161480*t161329*t161347*t161365*t161485*t161297*t161479*(2.0/3.0)) \
               +t161310*t161403*t161512*2.0-t161303*t161340*t161345*t161339*2.0+t161391*t161392*t161393*t161398*2.0- \
               a1p*c*c0p*t161400*t161376*(4.0/3.0)+a1p*c*c0p*t161323*t161297*(4.0/3.0)+t161310*t161324*t161333*t161336* \
               t161363*2.0+t161310*t161324*t161336*t161346*t161329*8.0-t161310*t161333*t161336*t161329*t161447*2.0+ \
               t161310*t161304*t161305*t161324*t161333*t161329*8.0+Aa*t161310*t161363*t161347*t161365*t161357*t161359* \
               4.0+Aa*t161310*t161472*t161329*t161347*t161357*t161359*4.0-t161310*t161480*t161329*t161347*t161365* \
               t161359*t161485*t161479*2.0+Aa*a1a*c*t161310*t161329*t161347*t161365*t161357*t161297*(4.0/3.0))+(rho_b[index]* \
               t161561+rho_a[index]*(t161536-t161310*t161403*(t161536-c0f*log((t161311*(1.0/2.0))/(b1f*t161522+b3f* \
               t161523+b2f*c*t161520+b4f*t161524*t161292)+1.0)*(a1f*c*t161520+1.0)*2.0))-t161285*(t161540+t161541+ \
               t161335))*(-ccab2*t161407*t161409*t161555*(gamma_bb[index]*gcab*t161553*(8.8E1/9.0)+t161513*t161407* \
               t161548*(3.2E1/9.0)+gamma_bb[index]*t161407*t161408*t161553*(8.8E1/9.0))+ccab4*1.0/(t161421*t161421* \
               t161421)*t161415*t161416*(t161546*t161546)*2.0+ccab2*t161407*(t161551*t161551)*1.0/(t161426*t161426* \
               t161426)*t161409*2.0+ccab1*gamma_bb[index]*gcab*t161434*t161553*(4.4E1/9.0)+ccab2*t161432*t161513* \
               t161407*t161548*(3.2E1/9.0)-ccab1*t161513*t161407*t161547*t161548*(3.2E1/9.0)-ccab4*t161415*t161416* \
               t161554*(gamma_bb[index]*gcab*t161553*(1.76E2/9.0)+t161513*t161407*t161548*(6.4E1/3.0)+gamma_bb[index]* \
               t161407*t161408*t161553*(1.76E2/3.0)+t161513*t161415*t161409*t161548*(6.4E1/3.0)+gamma_bb[index]*gcab* \
               t161407*t161409*t161553*(1.76E2/3.0)+gamma_bb[index]*t161415*t161408*t161409*t161553*(1.76E2/9.0)+ \
               gcab*t161513*t161407*t161408*t161548*(1.28E2/3.0))+ccab4*t161513*t161415*t161435*t161409*t161548*(6.4E1/ \
               3.0)+ccab2*gamma_bb[index]*t161432*t161407*t161408*t161553*(8.8E1/9.0)-ccab1*gamma_bb[index]*t161407* \
               t161408*t161553*t161547*(4.4E1/9.0)+ccab3*gcab*1.0/(t161430*t161430*t161430)*t161407*t161408*t161409* \
               (t161559*t161559)*2.0+ccab3*gamma_bb[index]*gcab*t161433*t161407*t161409*t161553*(4.4E1/3.0)-ccab2* \
               gamma_bb[index]*t161410*t161407*t161551*t161408*t161555*(1.6E1/3.0)+ccab4*gamma_bb[index]*t161415* \
               t161408*t161435*t161409*t161553*(1.76E2/9.0)+ccab3*gcab*t161513*t161433*t161407*t161408*t161548*(3.2E1/ \
               3.0)+ccab1*gcab*1.0/(t161423*t161423*t161423)*t161513*t161407*t161408*t161548*(3.2E1/9.0)-ccab3*gcab* \
               t161407*t161408*t161552*t161409*(gamma_bb[index]*gcab*t161553*(4.4E1/3.0)+t161513*t161407*t161548* \
               (3.2E1/3.0)+gamma_bb[index]*t161407*t161408*t161553*(8.8E1/3.0)+gamma_bb[index]*gcab*t161407*t161409* \
               t161553*(4.4E1/3.0)+gcab*t161513*t161407*t161408*t161548*(3.2E1/3.0))-ccab3*gamma_bb[index]*gcab*t161410* \
               t161407*t161552*t161409*t161559*8.0-ccab4*gamma_bb[index]*t161410*t161415*t161408*t161409*t161554* \
               t161546*(3.2E1/3.0))+(t161540+t161541+t161335+rho_b[index]*(t161510-t161399+t161310*t161403*(t161509+ \
               t161399-t161406*t161492*t161493*t161487-a1p*c*c0p*t161400*t161376*(2.0/3.0)))-t161285*(t161431-t161303* \
               t161340*t161345*t161339+t161310*t161324*t161333*t161336*t161363+t161310*t161324*t161336*t161346*t161329* \
               4.0-t161310*t161333*t161336*t161329*t161447+t161310*t161304*t161305*t161324*t161333*t161329*4.0+Aa* \
               t161310*t161363*t161347*t161365*t161357*t161359*2.0+Aa*t161310*t161472*t161329*t161347*t161357*t161359* \
               2.0-t161310*t161480*t161329*t161347*t161365*t161359*t161485*t161479+Aa*a1a*c*t161310*t161329*t161347* \
               t161365*t161357*t161297*(2.0/3.0))-c0p*t161400*t161391*2.0-t161310*t161403*t161538)*(ccab1*gamma_bb[index]* \
               gcab*t161410*t161434*(4.0/3.0)-ccab2*t161407*t161551*t161409*t161555-ccab4*t161415*t161416*t161554* \
               t161546+ccab2*gamma_bb[index]*t161410*t161432*t161407*t161408*(8.0/3.0)-ccab1*gamma_bb[index]*t161410* \
               t161407*t161408*t161547*(4.0/3.0)+ccab3*gamma_bb[index]*gcab*t161410*t161433*t161407*t161409*4.0+ccab4* \
               gamma_bb[index]*t161410*t161415*t161408*t161435*t161409*(1.6E1/3.0)-ccab3*gcab*t161407*t161408*t161552* \
               t161409*t161559)*2.0+t161605*t161561*2.0-t161612*t161584*2.0-rho_b[index]*t161561*(ccaa1*gamma_bb[index]* \
               gcaa*t161570*t161553*(8.8E1/9.0)+ccaa4*t161515*t161516*t161607*t161567*(1.12E3/9.0)-ccaa1*t161513* \
               t161514*t161548*t161589*2.4E1+ccaa2*t161513*t161514*t161548*t161579*(3.04E2/9.0)-ccaa2*t161513*t161603* \
               t161514*t161604*t161580*(3.2E1/3.0)-ccaa4*t161600*t161515*t161516*t161582*t161599*(6.4E1/3.0)-ccaa2* \
               t161513*t161514*t161604*t161519*(gamma_bb[index]*gcaa*t161553*(1.76E2/9.0)+t161513*t161514*t161548* \
               (3.04E2/9.0))-ccaa4*t161600*t161515*t161516*t161517*(gamma_bb[index]*gcaa*t161553*(3.52E2/9.0)+t161513* \
               t161514*t161548*(6.08E2/3.0)+t161515*t161516*t161607*(1.12E3/9.0)+gamma_bb[index]*gcaa*t161513*t161514* \
               t161606*2.88E2)+ccaa2*t161513*(t161603*t161603)*t161514*t161519*1.0/(t161578*t161578*t161578)*2.0+ \
               ccaa4*t161515*t161516*t161517*1.0/(t161566*t161566*t161566)*(t161599*t161599)*2.0+ccaa3*gamma_bb[index]* \
               gcaa*t161513*t161514*t161606*t161575*7.2E1+ccaa1*gamma_bb[index]*gcaa*t161513*t161514*t161606*1.0/ \
               (t161569*t161569*t161569)*(1.28E2/9.0)+ccaa3*gamma_bb[index]*gcaa*t161513*t161514*t161518*1.0/(t161574* \
               t161574*t161574)*(t161593*t161593)*2.0-ccaa3*gamma_bb[index]*gcaa*t161513*t161514*t161518*t161594* \
               (gamma_bb[index]*gcaa*t161553*(8.8E1/3.0)+t161513*t161514*t161548*(3.04E2/3.0)+gamma_bb[index]*gcaa* \
               t161513*t161514*t161606*7.2E1)-ccaa3*gamma_bb[index]*gcaa*t161513*t161514*t161581*t161593*t161594* \
               1.6E1)+rho_b[index]*t161612*(t161622-t161508+t161626+t161628-t161499+t161310*t161403*(t161620-t161622+ \
               t161508+t161625-t161626+t161627-t161628+t161499-t161406*t161613*t161487*t161496*2.0-a1f*c*c0f*t161404* \
               t161494*(8.0/9.0)))+rho_b[index]*t161605*t161584*2.0-c0*t161711*t161686*(cx1*gamma_bb[index]*gx*t161553* \
               t161658*(8.8E1/9.0)-cx1*t161513*t161642*t161548*t161693*2.4E1+cx2*t161513*t161642*t161548*t161667* \
               (3.04E2/9.0)+cx4*t161515*t161607*t161643*t161655*(1.12E3/9.0)-cx2*t161513*t161642*t161580*t161707* \
               t161708*(3.2E1/3.0)-cx4*t161703*t161515*t161704*t161643*t161582*(6.4E1/3.0)-cx2*t161513*t161642*t161519* \
               t161708*(gamma_bb[index]*gx*t161553*(1.76E2/9.0)+t161513*t161642*t161548*(3.04E2/9.0))-cx4*t161515* \
               t161704*t161517*t161643*(gamma_bb[index]*gx*t161553*(3.52E2/9.0)+t161515*t161607*t161643*(1.12E3/9.0) \
               +t161513*t161642*t161548*(6.08E2/3.0)+gamma_bb[index]*gx*t161513*t161606*t161642*2.88E2)+cx2*t161513* \
               t161642*(t161707*t161707)*t161519*1.0/(t161666*t161666*t161666)*2.0+cx4*(t161703*t161703)*t161515* \
               t161517*t161643*1.0/(t161654*t161654*t161654)*2.0+cx3*gamma_bb[index]*gx*t161513*t161606*t161642*t161663* \
               7.2E1+cx1*gamma_bb[index]*gx*t161513*t161606*t161642*1.0/(t161657*t161657*t161657)*(1.28E2/9.0)+cx3* \
               gamma_bb[index]*gx*t161513*t161642*t161518*1.0/(t161662*t161662*t161662)*(t161697*t161697)*2.0-cx3* \
               gamma_bb[index]*gx*t161513*t161642*t161518*t161698*(gamma_bb[index]*gx*t161553*(8.8E1/3.0)+t161513* \
               t161642*t161548*(3.04E2/3.0)+gamma_bb[index]*gx*t161513*t161606*t161642*7.2E1)-cx3*gamma_bb[index]* \
               gx*t161513*t161642*t161581*t161697*t161698*1.6E1)+c0*t161711*t161644*t161709*(8.0/3.0)-c0*t161711* \
               t161372*t161685*(4.0/9.0)-c0*t161644*t161685*t161688*(8.0/3.0)+c0*t161709*t161686*t161688*2.0+c0*t161685* \
               t161686*(omega*t161638*t161678*(2.778046668940015E15/5.2776558133248E13)-omega*t161649*t161679*(7.717543294808713E30/ \
               3.713820117856141E27)+omega*t161633*(omega*t161672*t161638*(2.778046668940015E15/7.0368744177664E13) \
               +omega*t161641*t161679*(7.717543294808713E30/4.951760157141521E27)+omega*t161633*(1.0/(rho_b[index]* \
               rho_b[index])*t161632*(5.0/9.0)-1.0/(omega*omega*omega*omega)*t161632*t161637*(7.717543294808713E30/ \
               4.951760157141521E27)+t161635*t161636*1.0/pow(t161629,8.0/3.0)*(3.858771647404357E31/1.980704062856608E28) \
               -t161630*t161632*t161638*(7.717543294808713E30/9.903520314283042E27)+t161630*t161632*t161633*t161668* \
               (2.778046668940015E15/2.11106232532992E14))+t161632*t161670*t161673*t161639*(3.080234563013177E46/ \
               1.115037259926531E43)+1.0/(omega*omega*omega)*t161632*t161673*t161668*(1.108777112152858E31/2.37684487542793E29) \
               )*(4.0/3.0));
        } else if (rho_a[index] > cutoff_) {
            v_rho_b_rho_b_[index] = 0.0;
        } else if (rho_b[index] > cutoff_) {
            double t163578 = 1.0/pow(rho_b[index],1.0/3.0);
            double t163579 = c*t163578;
            double t163580 = sqrt(t163579);
            double t163581 = b1f*t163580;
            double t163582 = pow(t163579,3.0/2.0);
            double t163583 = b3f*t163582;
            double t163584 = c*c;
            double t163585 = 1.0/pow(rho_b[index],2.0/3.0);
            double t163586 = b4f*t163584*t163585;
            double t163587 = b2f*c*t163578;
            double t163588 = t163581+t163583+t163586+t163587;
            double t163589 = 1.0/pow(rho_b[index],4.0/3.0);
            double t163590 = b1p*t163580;
            double t163591 = b3p*t163582;
            double t163592 = b4p*t163584*t163585;
            double t163593 = b2p*c*t163578;
            double t163594 = t163590+t163591+t163592+t163593;
            double t163595 = 1.0/pow(rho_b[index],5.0/3.0);
            double t163596 = 1.0/sqrt(t163579);
            double t163597 = 1.0/c0f;
            double t163598 = 1.0/t163588;
            double t163599 = t163597*t163598*(1.0/2.0);
            double t163600 = t163599+1.0;
            double t163601 = 1.0/c0p;
            double t163602 = 1.0/t163594;
            double t163603 = t163601*t163602*(1.0/2.0);
            double t163604 = t163603+1.0;
            double t163605 = a1p*c*t163578;
            double t163606 = t163605+1.0;
            double t163607 = 1.0/t163604;
            double t163608 = 1.0/(t163594*t163594);
            double t163609 = b4p*t163584*t163595*(2.0/3.0);
            double t163610 = b2p*c*t163589*(1.0/3.0);
            double t163611 = b1p*c*t163596*t163589*(1.0/6.0);
            double t163612 = b3p*c*t163580*t163589*(1.0/2.0);
            double t163613 = t163610+t163611+t163612+t163609;
            double t163614 = t163613*t163606*t163607*t163608;
            double t163615 = log(t163604);
            double t163616 = gamma_bb[index]*gamma_bb[index];
            double t163617 = gcaa*gcaa;
            double t163618 = t163616*t163616;
            double t163619 = t163617*t163617;
            double t163620 = 1.0/pow(rho_b[index],3.2E1/3.0);
            double t163621 = 1.0/pow(rho_b[index],8.0/3.0);
            double t163622 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
               rho_b[index]*rho_b[index]);
            double t163623 = 1.0/pow(rho_b[index],1.6E1/3.0);
            double t163624 = pow(2.0,1.0/3.0);
            double t163625 = t163624*2.0;
            double t163626 = t163625-2.0;
            double t163627 = two_13*2.0;
            double t163628 = t163627-2.0;
            double t163629 = 1.0/t163628;
            double t163630 = log(t163600);
            double t163631 = a1f*c*t163578;
            double t163632 = t163631+1.0;
            double t163633 = gamma_bb[index]*gcaa*t163621*4.0;
            double t163634 = gamma_bb[index]*gcaa*t163622*t163616*t163617*4.0;
            double t163635 = t163623*t163616*t163617*6.0;
            double t163636 = t163620*t163618*t163619;
            double t163637 = t163633+t163634+t163635+t163636+1.0;
            double t163638 = 1.0/t163637;
            double t163639 = gamma_bb[index]*gcaa*t163621;
            double t163640 = t163639+1.0;
            double t163641 = 1.0/t163640;
            double t163642 = gamma_bb[index]*gcaa*t163621*3.0;
            double t163643 = gamma_bb[index]*gcaa*t163622*t163616*t163617;
            double t163644 = t163623*t163616*t163617*3.0;
            double t163645 = t163642+t163643+t163644+1.0;
            double t163646 = 1.0/t163645;
            double t163647 = gamma_bb[index]*gcaa*t163621*2.0;
            double t163648 = t163623*t163616*t163617;
            double t163649 = t163647+t163648+1.0;
            double t163650 = 1.0/t163649;
            double t163651 = 1.0/pow(rho_b[index],1.9E1/3.0);
            double t163652 = 1.0/pow(rho_b[index],1.1E1/3.0);
            double t163653 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
               rho_b[index]*rho_b[index]*rho_b[index]);
            double t163654 = 1.0/pow(rho_b[index],3.5E1/3.0);
            double t163655 = 1.0/t163600;
            double t163656 = 1.0/(t163588*t163588);
            double t163657 = b4f*t163584*t163595*(2.0/3.0);
            double t163658 = b2f*c*t163589*(1.0/3.0);
            double t163659 = b1f*c*t163596*t163589*(1.0/6.0);
            double t163660 = b3f*c*t163580*t163589*(1.0/2.0);
            double t163661 = t163660+t163657+t163658+t163659;
            double t163662 = a1f*c*c0f*t163630*t163589*(2.0/3.0);
            double t163663 = a1p*c*c0p*t163615*t163589*(2.0/3.0);
            double t163664 = ccaa4*t163618*t163654*t163619*t163638*(3.2E1/3.0);
            double t163665 = ccaa1*gamma_bb[index]*gcaa*t163641*t163652*(8.0/3.0);
            double t163666 = ccaa3*gamma_bb[index]*gcaa*t163616*t163617*t163653*t163646*8.0;
            double t163667 = ccaa2*t163650*t163651*t163616*t163617*(1.6E1/3.0);
            double t163668 = 1.0/(t163640*t163640);
            double t163669 = gamma_bb[index]*gcaa*t163652*8.0;
            double t163670 = gamma_bb[index]*gcaa*t163616*t163617*t163653*8.0;
            double t163671 = t163651*t163616*t163617*1.6E1;
            double t163672 = t163670+t163671+t163669;
            double t163673 = 1.0/(t163645*t163645);
            double t163674 = gamma_bb[index]*gcaa*t163652*(3.2E1/3.0);
            double t163675 = gamma_bb[index]*gcaa*t163616*t163617*t163653*3.2E1;
            double t163676 = t163651*t163616*t163617*3.2E1;
            double t163677 = t163618*t163654*t163619*(3.2E1/3.0);
            double t163678 = t163674+t163675+t163676+t163677;
            double t163679 = 1.0/(t163637*t163637);
            double t163680 = gamma_bb[index]*gcaa*t163652*(1.6E1/3.0);
            double t163681 = t163651*t163616*t163617*(1.6E1/3.0);
            double t163682 = t163680+t163681;
            double t163683 = 1.0/(t163649*t163649);
            double t163684 = t163664+t163665+t163666+t163667-ccaa1*t163651*t163616*t163617*t163668*(8.0/3.0)- \
               ccaa2*t163623*t163616*t163617*t163682*t163683-ccaa4*t163620*t163618*t163619*t163678*t163679-ccaa3* \
               gamma_bb[index]*gcaa*t163622*t163616*t163617*t163672*t163673;
            double t163685 = c0f*t163630*t163632*2.0;
            double t163686 = c0p*t163606*t163615*2.0;
            double t163687 = 1.0/pow(rho_b[index],1.0E1);
            double t163688 = 1.0/pow(rho_b[index],2.2E1/3.0);
            double t163689 = 1.0/pow(rho_b[index],1.4E1/3.0);
            double t163690 = 1.0/pow(rho_b[index],3.8E1/3.0);
            double t163691 = ccaa4*t163620*t163618*t163619*t163638;
            double t163692 = ccaa1*gamma_bb[index]*gcaa*t163621*t163641;
            double t163693 = ccaa3*gamma_bb[index]*gcaa*t163622*t163616*t163617*t163646;
            double t163694 = ccaa2*t163623*t163650*t163616*t163617;
            double t163695 = ccaa0+t163691+t163692+t163693+t163694;
            double t163696 = 1.0/pow(rho_b[index],7.0/3.0);
            double t163697 = 1.0/pow(t163579,3.0/2.0);
            double t163698 = t163661*t163661;
            double t163699 = t163613*t163613;
            double t163700 = 1.0/(t163594*t163594*t163594);
            double t163701 = t163700*t163606*t163607*t163699*2.0;
            double t163702 = b4p*t163621*t163584*(1.0E1/9.0);
            double t163703 = b2p*c*t163696*(4.0/9.0);
            double t163704 = b3p*t163621*t163584*t163596*(1.0/1.2E1);
            double t163705 = b1p*c*t163596*t163696*(2.0/9.0);
            double t163706 = b3p*c*t163580*t163696*(2.0/3.0);
            double t163707 = t163702+t163703+t163704+t163705+t163706-b1p*t163621*t163584*t163697*(1.0/3.6E1);
            double t163708 = 1.0/(t163604*t163604);
            double t163709 = 1.0/(t163594*t163594*t163594*t163594);
            double t163710 = a1p*c*c0p*t163615*t163696*(8.0/9.0);
            double t163711 = rho_b[index]*(8.334140006820045E15/1.40737488355328E14);
            double t163712 = 1.0/(omega*omega);
            double t163713 = pow(t163711,2.0/3.0);
            double t163716 = t163712*t163713;
            double t163714 = exp(-t163716);
            double t163715 = 1.0/pow(t163711,1.0/3.0);
            double t163717 = omega*omega;
            double t163718 = t163714-1.0;
            double t163719 = 1.0/pow(t163711,2.0/3.0);
            double t163720 = 1.0/pow(t163711,4.0/3.0);
            double t163721 = 1.0/omega;
            double t163722 = t163717*t163718*t163719*(1.0/2.0);
            double t163723 = t163722-t163714+3.0/2.0;
            double t163724 = gx*gx;
            double t163725 = t163724*t163724;
            double t163726 = pow(rho_b[index],1.0/3.0);
            double t163727 = pow(t163711,1.0/3.0);
            double t163728 = t163721*t163727;
            double t163729 = erf(t163728);
            double t163730 = t163729*(3.991211251234741E15/2.251799813685248E15);
            double t163762 = omega*t163723*t163715;
            double t163731 = t163730-t163762;
            double t163732 = gamma_bb[index]*gx*t163621*4.0;
            double t163733 = gamma_bb[index]*gx*t163622*t163616*t163724*4.0;
            double t163734 = t163623*t163616*t163724*6.0;
            double t163735 = t163620*t163725*t163618;
            double t163736 = t163732+t163733+t163734+t163735+1.0;
            double t163737 = 1.0/t163736;
            double t163738 = gamma_bb[index]*gx*t163621;
            double t163739 = t163738+1.0;
            double t163740 = 1.0/t163739;
            double t163741 = gamma_bb[index]*gx*t163621*3.0;
            double t163742 = gamma_bb[index]*gx*t163622*t163616*t163724;
            double t163743 = t163623*t163616*t163724*3.0;
            double t163744 = t163741+t163742+t163743+1.0;
            double t163745 = 1.0/t163744;
            double t163746 = gamma_bb[index]*gx*t163621*2.0;
            double t163747 = t163623*t163616*t163724;
            double t163748 = t163746+t163747+1.0;
            double t163749 = 1.0/t163748;
            double t163750 = 1.0/rho_b[index];
            double t163751 = t163714*t163750*(1.0/3.0);
            double t163752 = 1.0/pow(t163711,5.0/3.0);
            double t163753 = t163752*t163717*t163718*(2.778046668940015E15/1.40737488355328E14);
            double t163757 = t163712*t163714*t163715*(2.778046668940015E15/7.0368744177664E13);
            double t163754 = t163751+t163753-t163757;
            double t163755 = 1.0/sqrt(3.141592653589793);
            double t163756 = omega*t163720*t163723*(2.778046668940015E15/1.40737488355328E14);
            double t163758 = omega*t163715*t163754;
            double t163759 = t163721*t163714*t163719*t163755*(1.108777112152858E31/1.584563250285287E29);
            double t163760 = t163756+t163758+t163759;
            double t163761 = 1.0/pow(t163711,7.0/3.0);
            double t163763 = cx4*t163620*t163725*t163618*t163737;
            double t163764 = cx1*gamma_bb[index]*gx*t163621*t163740;
            double t163765 = cx3*gamma_bb[index]*gx*t163622*t163616*t163724*t163745;
            double t163766 = cx2*t163623*t163616*t163724*t163749;
            double t163767 = cx0+t163763+t163764+t163765+t163766;
            double t163768 = pow(rho_b[index],4.0/3.0);
            double t163769 = omega*t163720*t163731*(2.778046668940015E15/1.05553116266496E14);
            double t163770 = cx4*t163725*t163618*t163654*t163737*(3.2E1/3.0);
            double t163771 = cx1*gamma_bb[index]*gx*t163740*t163652*(8.0/3.0);
            double t163772 = cx3*gamma_bb[index]*gx*t163616*t163724*t163653*t163745*8.0;
            double t163773 = cx2*t163651*t163616*t163724*t163749*(1.6E1/3.0);
            double t163774 = 1.0/(t163739*t163739);
            double t163775 = gamma_bb[index]*gx*t163652*8.0;
            double t163776 = gamma_bb[index]*gx*t163616*t163724*t163653*8.0;
            double t163777 = t163651*t163616*t163724*1.6E1;
            double t163778 = t163775+t163776+t163777;
            double t163779 = 1.0/(t163744*t163744);
            double t163780 = gamma_bb[index]*gx*t163652*(3.2E1/3.0);
            double t163781 = gamma_bb[index]*gx*t163616*t163724*t163653*3.2E1;
            double t163782 = t163651*t163616*t163724*3.2E1;
            double t163783 = t163725*t163618*t163654*(3.2E1/3.0);
            double t163784 = t163780+t163781+t163782+t163783;
            double t163785 = 1.0/(t163736*t163736);
            double t163786 = gamma_bb[index]*gx*t163652*(1.6E1/3.0);
            double t163787 = t163651*t163616*t163724*(1.6E1/3.0);
            double t163788 = t163786+t163787;
            double t163789 = 1.0/(t163748*t163748);
            double t163790 = t163770+t163771+t163772+t163773-cx1*t163651*t163616*t163724*t163774*(8.0/3.0)-cx2* \
               t163623*t163616*t163724*t163788*t163789-cx4*t163620*t163725*t163618*t163784*t163785-cx3*gamma_bb[index]* \
               gx*t163622*t163616*t163724*t163778*t163779;
            double t163791 = t163769-omega*t163715*t163760*(4.0/3.0);
            double t163792 = omega*t163731*t163715*(4.0/3.0);
            double t163793 = t163792-1.0;
            v_rho_b_rho_b_[index] = t163684*(t163686+t163626*t163629*(t163685-c0p*t163606*t163615*2.0))*2.0+t163695* \
               (-t163614+t163663+t163626*t163629*(t163614+t163662-t163632*t163661*t163655*t163656-a1p*c*c0p*t163615* \
               t163589*(2.0/3.0)))*2.0+rho_b[index]*t163695*(-t163701-t163710+t163626*t163629*(t163701+t163710-t163606* \
               t163607*t163608*t163707-t163632*t163655*1.0/(t163588*t163588*t163588)*t163698*2.0+t163632*t163655* \
               t163656*(b2f*c*t163696*(4.0/9.0)+b4f*t163621*t163584*(1.0E1/9.0)+b1f*c*t163596*t163696*(2.0/9.0)+b3f* \
               c*t163580*t163696*(2.0/3.0)-b1f*t163621*t163584*t163697*(1.0/3.6E1)+b3f*t163621*t163584*t163596*(1.0/ \
               1.2E1))+1.0/(t163600*t163600)*t163632*1.0/(t163588*t163588*t163588*t163588)*t163597*t163698*(1.0/2.0) \
               -a1f*c*c0f*t163630*t163696*(8.0/9.0)-t163601*t163606*t163708*t163709*t163699*(1.0/2.0)+a1f*c*t163661* \
               t163655*t163656*t163589*(2.0/3.0)-a1p*c*t163613*t163607*t163608*t163589*(2.0/3.0))+t163606*t163607* \
               t163608*t163707+t163601*t163606*t163708*t163709*t163699*(1.0/2.0)+a1p*c*t163613*t163607*t163608*t163589* \
               (2.0/3.0))-rho_b[index]*t163684*(-t163614+t163663+t163626*t163629*(t163614+t163662-t163663-t163632* \
               t163661*t163655*t163656))*2.0-rho_b[index]*(t163686+t163626*t163629*(t163685-t163686))*(ccaa1*gamma_bb[index]* \
               gcaa*t163641*t163689*(8.8E1/9.0)+ccaa2*t163650*t163616*t163617*t163688*(3.04E2/9.0)+ccaa4*t163618* \
               t163690*t163619*t163638*(1.12E3/9.0)-ccaa1*t163616*t163617*t163668*t163688*2.4E1-ccaa2*t163651*t163616* \
               t163617*t163682*t163683*(3.2E1/3.0)-ccaa4*t163618*t163654*t163619*t163678*t163679*(6.4E1/3.0)-ccaa2* \
               t163623*t163616*t163617*t163683*(gamma_bb[index]*gcaa*t163689*(1.76E2/9.0)+t163616*t163617*t163688* \
               (3.04E2/9.0))-ccaa4*t163620*t163618*t163619*t163679*(gamma_bb[index]*gcaa*t163689*(3.52E2/9.0)+t163618* \
               t163690*t163619*(1.12E3/9.0)+t163616*t163617*t163688*(6.08E2/3.0)+gamma_bb[index]*gcaa*t163616*t163617* \
               t163687*2.88E2)+ccaa2*t163623*t163616*t163617*(t163682*t163682)*1.0/(t163649*t163649*t163649)*2.0+ \
               ccaa4*t163620*t163618*t163619*1.0/(t163637*t163637*t163637)*(t163678*t163678)*2.0+ccaa3*gamma_bb[index]* \
               gcaa*t163616*t163617*t163646*t163687*7.2E1+ccaa1*gamma_bb[index]*gcaa*1.0/(t163640*t163640*t163640) \
               *t163616*t163617*t163687*(1.28E2/9.0)+ccaa3*gamma_bb[index]*gcaa*t163622*t163616*t163617*1.0/(t163645* \
               t163645*t163645)*(t163672*t163672)*2.0-ccaa3*gamma_bb[index]*gcaa*t163622*t163616*t163617*t163673* \
               (gamma_bb[index]*gcaa*t163689*(8.8E1/3.0)+t163616*t163617*t163688*(3.04E2/3.0)+gamma_bb[index]*gcaa* \
               t163616*t163617*t163687*7.2E1)-ccaa3*gamma_bb[index]*gcaa*t163616*t163617*t163653*t163672*t163673* \
               1.6E1)-c0*t163793*t163768*(cx1*gamma_bb[index]*gx*t163740*t163689*(8.8E1/9.0)-cx1*t163616*t163724* \
               t163774*t163688*2.4E1+cx2*t163616*t163724*t163749*t163688*(3.04E2/9.0)+cx4*t163725*t163618*t163690* \
               t163737*(1.12E3/9.0)-cx2*t163651*t163616*t163724*t163788*t163789*(3.2E1/3.0)-cx4*t163725*t163618*t163654* \
               t163784*t163785*(6.4E1/3.0)-cx2*t163623*t163616*t163724*t163789*(gamma_bb[index]*gx*t163689*(1.76E2/ \
               9.0)+t163616*t163724*t163688*(3.04E2/9.0))-cx4*t163620*t163725*t163618*t163785*(gamma_bb[index]*gx* \
               t163689*(3.52E2/9.0)+t163725*t163618*t163690*(1.12E3/9.0)+t163616*t163724*t163688*(6.08E2/3.0)+gamma_bb[index]* \
               gx*t163616*t163724*t163687*2.88E2)+cx2*t163623*t163616*t163724*1.0/(t163748*t163748*t163748)*(t163788* \
               t163788)*2.0+cx4*t163620*t163725*t163618*1.0/(t163736*t163736*t163736)*(t163784*t163784)*2.0+cx3*gamma_bb[index]* \
               gx*t163616*t163724*t163745*t163687*7.2E1+cx1*gamma_bb[index]*gx*t163616*t163724*1.0/(t163739*t163739* \
               t163739)*t163687*(1.28E2/9.0)+cx3*gamma_bb[index]*gx*t163622*t163616*t163724*1.0/(t163744*t163744* \
               t163744)*(t163778*t163778)*2.0-cx3*gamma_bb[index]*gx*t163622*t163616*t163724*t163779*(gamma_bb[index]* \
               gx*t163689*(8.8E1/3.0)+t163616*t163724*t163688*(3.04E2/3.0)+gamma_bb[index]*gx*t163616*t163724*t163687* \
               7.2E1)-cx3*gamma_bb[index]*gx*t163616*t163724*t163653*t163778*t163779*1.6E1)+c0*t163726*t163790*t163793* \
               (8.0/3.0)+c0*t163726*t163791*t163767*(8.0/3.0)-c0*t163790*t163791*t163768*2.0-c0*t163585*t163793*t163767* \
               (4.0/9.0)+c0*t163767*t163768*(omega*t163720*t163760*(2.778046668940015E15/5.2776558133248E13)-omega* \
               t163731*t163761*(7.717543294808713E30/3.713820117856141E27)+omega*t163715*(omega*t163720*t163754*(2.778046668940015E15/ \
               7.0368744177664E13)+omega*t163723*t163761*(7.717543294808713E30/4.951760157141521E27)+omega*t163715* \
               (1.0/(rho_b[index]*rho_b[index])*t163714*(5.0/9.0)-1.0/(omega*omega*omega*omega)*t163714*t163719*(7.717543294808713E30/ \
               4.951760157141521E27)+1.0/pow(t163711,8.0/3.0)*t163717*t163718*(3.858771647404357E31/1.980704062856608E28) \
               -t163720*t163712*t163714*(7.717543294808713E30/9.903520314283042E27)+t163712*t163714*t163750*t163715* \
               (2.778046668940015E15/2.11106232532992E14))+t163721*t163714*t163752*t163755*(3.080234563013177E46/ \
               1.115037259926531E43)+1.0/(omega*omega*omega)*t163714*t163750*t163755*(1.108777112152858E31/2.37684487542793E29) \
               )*(4.0/3.0));
        } else {
            v_rho_b_rho_b_[index] = 0.0;
        } 

        if (is_gga_) {

            //V_rho_a_gamma_aa
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t161713 = 1.0/pow(rho_a[index],1.0/3.0);
                double t161714 = c*t161713;
                double t161715 = sqrt(t161714);
                double t161716 = pow(t161714,3.0/2.0);
                double t161717 = c*c;
                double t161718 = 1.0/pow(rho_a[index],2.0/3.0);
                double t161719 = 1.0/c0p;
                double t161720 = b1p*t161715;
                double t161721 = b3p*t161716;
                double t161722 = b4p*t161717*t161718;
                double t161723 = b2p*c*t161713;
                double t161724 = t161720+t161721+t161722+t161723;
                double t161725 = 1.0/t161724;
                double t161726 = t161725*t161719*(1.0/2.0);
                double t161727 = t161726+1.0;
                double t161728 = log(t161727);
                double t161729 = a1p*c*t161713;
                double t161730 = t161729+1.0;
                double t161731 = 1.0/pow(rho_a[index],8.0/3.0);
                double t161732 = gamma_aa[index]*gamma_aa[index];
                double t161733 = gcaa*gcaa;
                double t161734 = t161733*t161733;
                double t161735 = 1.0/pow(rho_a[index],3.2E1/3.0);
                double t161736 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t161737 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t161738 = gamma_aa[index]*gcaa*t161731;
                double t161739 = t161738+1.0;
                double t161740 = gamma_aa[index]*gcaa*t161731*3.0;
                double t161741 = gamma_aa[index]*gcaa*t161732*t161733*t161737;
                double t161742 = t161732*t161733*t161736*3.0;
                double t161743 = t161740+t161741+t161742+1.0;
                double t161744 = t161732*t161732;
                double t161745 = gamma_aa[index]*gcaa*t161731*4.0;
                double t161746 = gamma_aa[index]*gcaa*t161732*t161733*t161737*4.0;
                double t161747 = t161732*t161733*t161736*6.0;
                double t161748 = t161734*t161735*t161744;
                double t161749 = t161745+t161746+t161747+t161748+1.0;
                double t161750 = gamma_aa[index]*gcaa*t161731*2.0;
                double t161751 = t161732*t161733*t161736;
                double t161752 = t161750+t161751+1.0;
                double t161753 = rho_a[index]+rho_b[index];
                double t161754 = 1.0/pow(t161753,1.0/3.0);
                double t161755 = c*t161754;
                double t161756 = sqrt(t161755);
                double t161757 = b1p*t161756;
                double t161758 = pow(t161755,3.0/2.0);
                double t161759 = b3p*t161758;
                double t161760 = 1.0/pow(t161753,2.0/3.0);
                double t161761 = b4p*t161760*t161717;
                double t161762 = b2p*c*t161754;
                double t161763 = t161761+t161762+t161757+t161759;
                double t161764 = 1.0/pow(t161753,4.0/3.0);
                double t161765 = two_13*2.0;
                double t161766 = t161765-2.0;
                double t161767 = 1.0/t161766;
                double t161768 = 1.0/c0f;
                double t161769 = 1.0/t161763;
                double t161770 = t161719*t161769*(1.0/2.0);
                double t161771 = t161770+1.0;
                double t161772 = a1p*c*t161754;
                double t161773 = t161772+1.0;
                double t161774 = rho_a[index]-rho_b[index];
                double t161775 = t161774*t161774;
                double t161776 = 1.0/t161753;
                double t161777 = t161774*t161776;
                double t161778 = b1f*t161756;
                double t161779 = b3f*t161758;
                double t161780 = b4f*t161760*t161717;
                double t161781 = b2f*c*t161754;
                double t161782 = t161780+t161781+t161778+t161779;
                double t161783 = 1.0/t161782;
                double t161784 = t161783*t161768*(1.0/2.0);
                double t161785 = t161784+1.0;
                double t161786 = log(t161785);
                double t161787 = a1f*c*t161754;
                double t161788 = t161787+1.0;
                double t161789 = log(t161771);
                double t161799 = c0f*t161786*t161788*2.0;
                double t161800 = c0p*t161773*t161789*2.0;
                double t161790 = -t161800+t161799;
                double t161791 = t161777+1.0;
                double t161792 = pow(t161791,4.0/3.0);
                double t161793 = -t161777+1.0;
                double t161794 = pow(t161793,4.0/3.0);
                double t161795 = t161792+t161794-2.0;
                double t161796 = 1.0/(t161753*t161753);
                double t161827 = t161774*t161796;
                double t161797 = -t161827+t161776;
                double t161798 = 1.0/(t161753*t161753*t161753*t161753);
                double t161801 = t161775*t161775;
                double t161802 = 1.0/pow(t161753,5.0/3.0);
                double t161803 = 1.0/sqrt(t161755);
                double t161804 = 1.0/t161771;
                double t161805 = 1.0/(t161763*t161763);
                double t161806 = b4p*t161802*t161717*(2.0/3.0);
                double t161807 = b2p*c*t161764*(1.0/3.0);
                double t161808 = b1p*c*t161803*t161764*(1.0/6.0);
                double t161809 = b3p*c*t161764*t161756*(1.0/2.0);
                double t161810 = t161806+t161807+t161808+t161809;
                double t161811 = t161810*t161804*t161805*t161773;
                double t161812 = 1.0/(t161753*t161753*t161753*t161753*t161753);
                double t161813 = 1.0/d2fz0;
                double t161814 = 1.0/Aa;
                double t161815 = b1a*t161756;
                double t161816 = b3a*t161758;
                double t161817 = b4a*t161760*t161717;
                double t161818 = b2a*c*t161754;
                double t161819 = t161815+t161816+t161817+t161818;
                double t161820 = 1.0/t161819;
                double t161821 = t161820*t161814*(1.0/2.0);
                double t161822 = t161821+1.0;
                double t161823 = log(t161822);
                double t161824 = a1a*c*t161754;
                double t161825 = t161824+1.0;
                double t161826 = pow(t161791,1.0/3.0);
                double t161828 = t161826*t161797*(4.0/3.0);
                double t161829 = pow(t161793,1.0/3.0);
                double t161830 = t161828-t161829*t161797*(4.0/3.0);
                double t161831 = t161801*t161798;
                double t161832 = t161831-1.0;
                double t161833 = pow(2.0,1.0/3.0);
                double t161834 = t161833*2.0;
                double t161835 = t161834-2.0;
                double t161836 = a1f*c*t161713;
                double t161837 = t161836+1.0;
                double t161838 = b1f*t161715;
                double t161839 = b3f*t161716;
                double t161840 = b4f*t161717*t161718;
                double t161841 = b2f*c*t161713;
                double t161842 = t161840+t161841+t161838+t161839;
                double t161843 = 1.0/t161842;
                double t161844 = t161843*t161768*(1.0/2.0);
                double t161845 = t161844+1.0;
                double t161846 = 1.0/pow(rho_a[index],4.0/3.0);
                double t161847 = 1.0/pow(rho_a[index],5.0/3.0);
                double t161848 = 1.0/sqrt(t161714);
                double t161849 = log(t161845);
                double t161850 = 1.0/t161727;
                double t161851 = 1.0/(t161724*t161724);
                double t161852 = b4p*t161717*t161847*(2.0/3.0);
                double t161853 = b2p*c*t161846*(1.0/3.0);
                double t161854 = b1p*c*t161846*t161848*(1.0/6.0);
                double t161855 = b3p*c*t161715*t161846*(1.0/2.0);
                double t161856 = t161852+t161853+t161854+t161855;
                double t161857 = t161730*t161850*t161851*t161856;
                double t161858 = c0f*t161837*t161849*2.0;
                double t161859 = c0p*t161730*t161728*2.0;
                double t161860 = gamma_aa[index]*t161731*(1.0/2.0);
                double t161861 = 1.0/pow(rho_b[index],8.0/3.0);
                double t161862 = gamma_bb[index]*t161861*(1.0/2.0);
                double t161863 = t161860+t161862;
                double t161864 = gcab*t161863;
                double t161865 = t161864+1.0;
                double t161866 = gcab*gcab;
                double t161867 = t161863*t161863;
                double t161868 = t161866*t161866;
                double t161869 = t161867*t161867;
                double t161870 = t161866*t161867;
                double t161871 = gcab*t161863*2.0;
                double t161872 = t161870+t161871+1.0;
                double t161873 = t161866*t161867*3.0;
                double t161874 = gcab*t161863*t161866*t161867;
                double t161875 = gcab*t161863*3.0;
                double t161876 = t161873+t161874+t161875+1.0;
                double t161877 = t161866*t161867*6.0;
                double t161878 = gcab*t161863*t161866*t161867*4.0;
                double t161879 = t161868*t161869;
                double t161880 = gcab*t161863*4.0;
                double t161881 = t161880+t161877+t161878+t161879+1.0;
                double t161882 = t161858-t161859;
                double t161883 = 1.0/pow(rho_b[index],1.0/3.0);
                double t161884 = c*t161883;
                double t161885 = sqrt(t161884);
                double t161886 = pow(t161884,3.0/2.0);
                double t161887 = 1.0/pow(rho_b[index],2.0/3.0);
                double t161888 = b1p*t161885;
                double t161889 = b3p*t161886;
                double t161890 = b4p*t161717*t161887;
                double t161891 = b2p*c*t161883;
                double t161892 = t161890+t161891+t161888+t161889;
                double t161893 = 1.0/t161892;
                double t161894 = t161719*t161893*(1.0/2.0);
                double t161895 = t161894+1.0;
                double t161896 = log(t161895);
                double t161897 = a1p*c*t161883;
                double t161898 = t161897+1.0;
                double t161899 = c0p*t161896*t161898*2.0;
                double t161900 = t161801*t161790*t161767*t161795*t161798;
                double t161901 = Aa*t161813*t161823*t161832*t161825*t161767*t161795*2.0;
                double t161902 = 1.0/t161865;
                double t161903 = 1.0/pow(rho_a[index],1.1E1/3.0);
                double t161904 = 1.0/(t161865*t161865);
                double t161905 = 1.0/t161872;
                double t161906 = 1.0/(t161876*t161876);
                double t161907 = 1.0/pow(rho_a[index],1.9E1/3.0);
                double t161908 = 1.0/(t161872*t161872);
                double t161909 = 1.0/t161876;
                double t161910 = 1.0/t161881;
                double t161911 = 1.0/(t161881*t161881);
                double t161912 = gcab*t161731*2.0;
                double t161913 = t161731*t161863*t161866*6.0;
                double t161914 = gcab*t161731*t161866*t161867*6.0;
                double t161915 = t161731*t161863*t161867*t161868*2.0;
                double t161916 = t161912+t161913+t161914+t161915;
                double t161917 = gamma_aa[index]*gcab*t161903*(8.0/3.0);
                double t161918 = gamma_aa[index]*t161903*t161863*t161866*(8.0/3.0);
                double t161919 = t161917+t161918;
                double t161920 = gcab*t161731;
                double t161921 = t161731*t161863*t161866;
                double t161922 = t161920+t161921;
                double t161923 = gamma_aa[index]*gcab*t161903*(1.6E1/3.0);
                double t161924 = gamma_aa[index]*gcab*t161903*t161866*t161867*1.6E1;
                double t161925 = gamma_aa[index]*t161903*t161863*t161867*t161868*(1.6E1/3.0);
                double t161926 = gamma_aa[index]*t161903*t161863*t161866*1.6E1;
                double t161927 = t161923+t161924+t161925+t161926;
                double t161928 = gcab*t161731*(3.0/2.0);
                double t161929 = t161731*t161863*t161866*3.0;
                double t161930 = gcab*t161731*t161866*t161867*(3.0/2.0);
                double t161931 = t161930+t161928+t161929;
                double t161932 = gamma_aa[index]*gcab*t161903*4.0;
                double t161933 = gamma_aa[index]*gcab*t161903*t161866*t161867*4.0;
                double t161934 = gamma_aa[index]*t161903*t161863*t161866*8.0;
                double t161935 = t161932+t161933+t161934;
                double t161936 = t161835*t161882*t161767;
                double t161937 = t161936+t161859;
                double t161938 = 1.0/t161739;
                double t161939 = 1.0/t161749;
                double t161940 = 1.0/t161752;
                double t161941 = 1.0/t161743;
                double t161942 = 1.0/(t161739*t161739);
                double t161943 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]*rho_a[index]);
                double t161944 = 1.0/(t161743*t161743);
                double t161945 = 1.0/(t161752*t161752);
                double t161946 = gcaa*t161731*3.0;
                double t161947 = gamma_aa[index]*t161733*t161736*6.0;
                double t161948 = gcaa*t161732*t161733*t161737*3.0;
                double t161949 = t161946+t161947+t161948;
                double t161950 = 1.0/pow(rho_a[index],3.5E1/3.0);
                double t161951 = 1.0/(t161749*t161749);
                double t161952 = gcaa*t161731*4.0;
                double t161953 = gamma_aa[index]*t161733*t161736*1.2E1;
                double t161954 = gcaa*t161732*t161733*t161737*1.2E1;
                double t161955 = gamma_aa[index]*t161732*t161734*t161735*4.0;
                double t161956 = t161952+t161953+t161954+t161955;
                double t161957 = gcaa*t161731*2.0;
                double t161958 = gamma_aa[index]*t161733*t161736*2.0;
                double t161959 = t161957+t161958;
                double t161960 = gamma_aa[index]*gcaa*t161903*(1.6E1/3.0);
                double t161961 = t161732*t161733*t161907*(1.6E1/3.0);
                double t161962 = t161960+t161961;
                double t161963 = gamma_aa[index]*gcaa*t161903*8.0;
                double t161964 = gamma_aa[index]*gcaa*t161732*t161733*t161943*8.0;
                double t161965 = t161732*t161733*t161907*1.6E1;
                double t161966 = t161963+t161964+t161965;
                double t161967 = gamma_aa[index]*gcaa*t161903*(3.2E1/3.0);
                double t161968 = gamma_aa[index]*gcaa*t161732*t161733*t161943*3.2E1;
                double t161969 = t161732*t161733*t161907*3.2E1;
                double t161970 = t161734*t161950*t161744*(3.2E1/3.0);
                double t161971 = t161970+t161967+t161968+t161969;
                double t161972 = 1.0/t161845;
                double t161973 = 1.0/(t161842*t161842);
                double t161974 = b4f*t161717*t161847*(2.0/3.0);
                double t161975 = b2f*c*t161846*(1.0/3.0);
                double t161976 = b1f*c*t161846*t161848*(1.0/6.0);
                double t161977 = b3f*c*t161715*t161846*(1.0/2.0);
                double t161978 = t161974+t161975+t161976+t161977;
                double t161979 = a1f*c*c0f*t161846*t161849*(2.0/3.0);
                double t161980 = a1p*c*c0p*t161728*t161846*(2.0/3.0);
                double t161981 = ccaa1*gcaa*t161731*t161938;
                double t161982 = ccaa4*gamma_aa[index]*t161732*t161734*t161735*t161939*4.0;
                double t161983 = ccaa2*gamma_aa[index]*t161733*t161940*t161736*2.0;
                double t161984 = ccaa3*gcaa*t161732*t161733*t161941*t161737*3.0;
                double t161985 = t161981+t161982+t161983+t161984-ccaa1*gamma_aa[index]*t161733*t161942*t161736-ccaa4* \
                   t161734*t161735*t161744*t161951*t161956-ccaa2*t161732*t161733*t161736*t161945*t161959-ccaa3*gamma_aa[index]* \
                   gcaa*t161732*t161733*t161737*t161944*t161949;
                double t161986 = rho_a[index]*(8.334140006820045E15/1.40737488355328E14);
                double t161987 = 1.0/pow(t161986,1.0/3.0);
                double t161988 = 1.0/(omega*omega);
                double t161989 = pow(t161986,2.0/3.0);
                double t162039 = t161988*t161989;
                double t161990 = exp(-t162039);
                double t161991 = gx*gx;
                double t161992 = t161991*t161991;
                double t161993 = gamma_aa[index]*gx*t161731;
                double t161994 = t161993+1.0;
                double t161995 = gamma_aa[index]*gx*t161731*3.0;
                double t161996 = gamma_aa[index]*gx*t161732*t161737*t161991;
                double t161997 = t161732*t161736*t161991*3.0;
                double t161998 = t161995+t161996+t161997+1.0;
                double t161999 = gamma_aa[index]*gx*t161731*2.0;
                double t162000 = t161732*t161736*t161991;
                double t162001 = t162000+t161999+1.0;
                double t162002 = 1.0/(t161998*t161998);
                double t162003 = gamma_aa[index]*gx*t161731*4.0;
                double t162004 = gamma_aa[index]*gx*t161732*t161737*t161991*4.0;
                double t162005 = t161732*t161736*t161991*6.0;
                double t162006 = t161735*t161744*t161992;
                double t162007 = t162003+t162004+t162005+t162006+1.0;
                double t162008 = 1.0/(t162007*t162007);
                double t162009 = 1.0/(t162001*t162001);
                double t162010 = gamma_aa[index]*gx*t161903*(1.6E1/3.0);
                double t162011 = t161732*t161907*t161991*(1.6E1/3.0);
                double t162012 = t162010+t162011;
                double t162013 = gx*t161731*2.0;
                double t162014 = gamma_aa[index]*t161736*t161991*2.0;
                double t162015 = t162013+t162014;
                double t162016 = gx*t161731*3.0;
                double t162017 = gamma_aa[index]*t161736*t161991*6.0;
                double t162018 = gx*t161732*t161737*t161991*3.0;
                double t162019 = t162016+t162017+t162018;
                double t162020 = gamma_aa[index]*gx*t161903*8.0;
                double t162021 = gamma_aa[index]*gx*t161732*t161943*t161991*8.0;
                double t162022 = t161732*t161907*t161991*1.6E1;
                double t162023 = t162020+t162021+t162022;
                double t162024 = gamma_aa[index]*gx*t161903*(3.2E1/3.0);
                double t162025 = gamma_aa[index]*gx*t161732*t161943*t161991*3.2E1;
                double t162026 = t161732*t161907*t161991*3.2E1;
                double t162027 = t161950*t161744*t161992*(3.2E1/3.0);
                double t162028 = t162024+t162025+t162026+t162027;
                double t162029 = gx*t161731*4.0;
                double t162030 = gamma_aa[index]*t161736*t161991*1.2E1;
                double t162031 = gx*t161732*t161737*t161991*1.2E1;
                double t162032 = gamma_aa[index]*t161732*t161735*t161992*4.0;
                double t162033 = t162030+t162031+t162032+t162029;
                double t162034 = 1.0/omega;
                double t162035 = pow(t161986,1.0/3.0);
                double t162036 = t162034*t162035;
                double t162037 = erf(t162036);
                double t162038 = t162037*(3.991211251234741E15/2.251799813685248E15);
                double t162040 = omega*omega;
                double t162041 = 1.0/pow(t161986,2.0/3.0);
                double t162042 = t161990-1.0;
                double t162043 = t162040*t162041*t162042*(1.0/2.0);
                double t162044 = t162043-t161990+3.0/2.0;
                double t162055 = omega*t162044*t161987;
                double t162045 = -t162055+t162038;
                double t162046 = omega*t162045*t161987*(4.0/3.0);
                double t162047 = t162046-1.0;
                double t162048 = 1.0/t161994;
                double t162049 = 1.0/t162007;
                double t162050 = 1.0/t162001;
                double t162051 = 1.0/t161998;
                double t162052 = 1.0/(t161994*t161994);
                double t162053 = pow(rho_a[index],4.0/3.0);
                double t162054 = 1.0/pow(t161986,4.0/3.0);
                double t162056 = cx1*gx*t161731*t162048;
                double t162057 = cx4*gamma_aa[index]*t161732*t162049*t161735*t161992*4.0;
                double t162058 = cx2*gamma_aa[index]*t162050*t161736*t161991*2.0;
                double t162059 = cx3*gx*t162051*t161732*t161737*t161991*3.0;
                double t162060 = t162056+t162057+t162058+t162059-cx1*gamma_aa[index]*t162052*t161736*t161991-cx2* \
                   t162015*t162009*t161732*t161736*t161991-cx4*t162033*t162008*t161735*t161744*t161992-cx3*gamma_aa[index]* \
                   gx*t162002*t162019*t161732*t161737*t161991;
                v_rho_a_gamma_aa_[index] = -(rho_a[index]*t161937+rho_b[index]*(t161899-t161835*t161767*(t161899- \
                   c0f*log((t161768*(1.0/2.0))/(b1f*t161885+b3f*t161886+b2f*c*t161883+b4f*t161717*t161887)+1.0)*(a1f* \
                   c*t161883+1.0)*2.0))-t161753*(t161800+t161900+t161901))*(ccab1*gcab*t161902*t161903*(4.0/3.0)-ccab2* \
                   t161908*t161866*t161867*(gcab*t161903*(8.0/3.0)+gamma_aa[index]*t161907*t161866*(4.0/3.0)+t161903* \
                   t161863*t161866*(8.0/3.0))-ccab4*t161911*t161868*t161869*(gcab*t161903*(1.6E1/3.0)+gamma_aa[index]* \
                   t161907*t161866*8.0+t161903*t161863*t161866*1.6E1+gamma_aa[index]*t161907*t161867*t161868*8.0+gcab* \
                   t161903*t161866*t161867*1.6E1+t161903*t161863*t161867*t161868*(1.6E1/3.0)+gamma_aa[index]*gcab*t161907* \
                   t161863*t161866*1.6E1)-ccab1*gamma_aa[index]*t161904*t161907*t161866*(4.0/3.0)+ccab2*gamma_aa[index]* \
                   t161905*t161907*t161866*(4.0/3.0)-ccab1*t161903*t161904*t161863*t161866*(4.0/3.0)+ccab2*t161903*t161905* \
                   t161863*t161866*(8.0/3.0)-ccab2*t161731*t161863*t161908*t161919*t161866+ccab4*t161910*t161903*t161863* \
                   t161867*t161868*(1.6E1/3.0)+ccab2*t161922*1.0/(t161872*t161872*t161872)*t161919*t161866*t161867*2.0+ \
                   ccab4*t161916*1.0/(t161881*t161881*t161881)*t161927*t161868*t161869*2.0+ccab4*gamma_aa[index]*t161910* \
                   t161907*t161867*t161868*8.0+ccab3*gcab*t161903*t161909*t161866*t161867*4.0+ccab3*gamma_aa[index]*gcab* \
                   t161907*t161863*t161909*t161866*4.0-ccab2*gamma_aa[index]*t161903*t161922*t161863*t161908*t161866* \
                   (8.0/3.0)-ccab3*gcab*t161731*t161906*t161935*t161866*t161867*(3.0/2.0)-ccab4*t161731*t161911*t161863* \
                   t161927*t161867*t161868*2.0-ccab3*gcab*t161906*t161863*t161866*t161867*(gcab*t161903*4.0+gamma_aa[index]* \
                   t161907*t161866*4.0+t161903*t161863*t161866*8.0+gcab*t161903*t161866*t161867*4.0+gamma_aa[index]*gcab* \
                   t161907*t161863*t161866*4.0)+ccab1*gamma_aa[index]*gcab*t161907*t161863*1.0/(t161865*t161865*t161865) \
                   *t161866*(4.0/3.0)+ccab3*gcab*t161931*t161863*t161935*t161866*t161867*1.0/(t161876*t161876*t161876) \
                   *2.0-ccab3*gamma_aa[index]*gcab*t161903*t161931*t161906*t161866*t161867*4.0-ccab4*gamma_aa[index]* \
                   t161911*t161903*t161916*t161863*t161867*t161868*(1.6E1/3.0))-t161985*(t161859+t161835*t161767*(t161858- \
                   c0p*t161730*t161728*2.0))-(t161800+t161900+t161901-t161859+t161753*(t161811-t161801*t161767*t161795* \
                   t161798*(t161811-(1.0/(t161782*t161782)*t161788*(b2f*c*t161764*(1.0/3.0)+b4f*t161802*t161717*(2.0/ \
                   3.0)+b1f*c*t161803*t161764*(1.0/6.0)+b3f*c*t161764*t161756*(1.0/2.0)))/t161785+a1f*c*c0f*t161764*t161786* \
                   (2.0/3.0)-a1p*c*c0p*t161764*t161789*(2.0/3.0))-a1p*c*c0p*t161764*t161789*(2.0/3.0)-t161801*t161812* \
                   t161790*t161767*t161795*4.0+t161801*t161830*t161790*t161767*t161798+t161790*t161774*t161775*t161767* \
                   t161795*t161798*4.0-Aa*t161813*t161823*t161825*t161767*t161795*(t161801*t161812*4.0-t161774*t161775* \
                   t161798*4.0)*2.0+Aa*t161830*t161813*t161823*t161832*t161825*t161767*2.0+(t161813*t161832*t161825*1.0/ \
                   (t161819*t161819)*t161767*t161795*(b2a*c*t161764*(1.0/3.0)+b4a*t161802*t161717*(2.0/3.0)+b1a*c*t161803* \
                   t161764*(1.0/6.0)+b3a*c*t161764*t161756*(1.0/2.0)))/t161822-Aa*a1a*c*t161813*t161823*t161832*t161764* \
                   t161767*t161795*(2.0/3.0))+rho_a[index]*(t161980-t161857+t161835*t161767*(t161857+t161979-t161837* \
                   t161972*t161973*t161978-a1p*c*c0p*t161728*t161846*(2.0/3.0)))-t161835*t161882*t161767)*(ccab1*gcab* \
                   t161731*t161902*(1.0/2.0)-ccab1*t161731*t161904*t161863*t161866*(1.0/2.0)+ccab2*t161731*t161905*t161863* \
                   t161866-ccab2*t161922*t161908*t161866*t161867-ccab4*t161911*t161916*t161868*t161869+ccab4*t161910* \
                   t161731*t161863*t161867*t161868*2.0+ccab3*gcab*t161731*t161909*t161866*t161867*(3.0/2.0)-ccab3*gcab* \
                   t161931*t161906*t161863*t161866*t161867)-rho_a[index]*t161937*(ccaa1*gcaa*t161903*t161938*(-8.0/3.0) \
                   -ccaa2*gamma_aa[index]*t161733*t161940*t161907*(3.2E1/3.0)+ccaa1*gamma_aa[index]*t161733*t161942*t161907* \
                   8.0+ccaa4*t161734*t161950*t161744*t161951*t161956*(3.2E1/3.0)+ccaa2*t161732*t161733*t161907*t161945* \
                   t161959*(1.6E1/3.0)+ccaa4*t161734*t161735*t161744*t161951*(gcaa*t161903*(3.2E1/3.0)+gamma_aa[index]* \
                   t161733*t161907*6.4E1+gamma_aa[index]*t161732*t161734*t161950*(1.28E2/3.0)+gcaa*t161732*t161733*t161943* \
                   9.6E1)-ccaa1*gcaa*t161732*t161733*t161943*1.0/(t161739*t161739*t161739)*(1.6E1/3.0)+ccaa2*t161732* \
                   t161733*t161736*t161945*(gcaa*t161903*(1.6E1/3.0)+gamma_aa[index]*t161733*t161907*(3.2E1/3.0))-ccaa4* \
                   gamma_aa[index]*t161732*t161734*t161950*t161939*(1.28E2/3.0)+ccaa2*gamma_aa[index]*t161733*t161736* \
                   t161962*t161945*2.0-ccaa3*gcaa*t161732*t161733*t161941*t161943*2.4E1+ccaa4*gamma_aa[index]*t161732* \
                   t161734*t161735*t161951*t161971*4.0+ccaa3*gcaa*t161732*t161733*t161737*t161944*t161966*3.0-ccaa2*t161732* \
                   t161733*1.0/(t161752*t161752*t161752)*t161736*t161962*t161959*2.0-ccaa4*t161734*t161735*t161744*t161971* \
                   1.0/(t161749*t161749*t161749)*t161956*2.0+ccaa3*gamma_aa[index]*gcaa*t161732*t161733*t161737*t161944* \
                   (gcaa*t161903*8.0+gamma_aa[index]*t161733*t161907*3.2E1+gcaa*t161732*t161733*t161943*2.4E1)+ccaa3* \
                   gamma_aa[index]*gcaa*t161732*t161733*t161943*t161944*t161949*8.0-ccaa3*gamma_aa[index]*gcaa*t161732* \
                   t161733*1.0/(t161743*t161743*t161743)*t161737*t161966*t161949*2.0)-rho_a[index]*t161985*(-t161980+ \
                   t161857+t161835*t161767*(t161980-t161857-t161979+t161837*t161972*t161973*t161978))-c0*t162060*t162053* \
                   (omega*t161987*(omega*t162044*t162054*(2.778046668940015E15/1.40737488355328E14)+omega*t161987*((t161990* \
                   (1.0/3.0))/rho_a[index]+t162040*t162042*1.0/pow(t161986,5.0/3.0)*(2.778046668940015E15/1.40737488355328E14) \
                   -t161990*t161987*t161988*(2.778046668940015E15/7.0368744177664E13))+1.0/sqrt(3.141592653589793)*t162041* \
                   t162034*t161990*(1.108777112152858E31/1.584563250285287E29))*(4.0/3.0)-omega*t162045*t162054*(2.778046668940015E15/ \
                   1.05553116266496E14))-c0*t162053*t162047*(cx1*gx*t161903*t162048*(-8.0/3.0)+cx1*gamma_aa[index]*t162052* \
                   t161907*t161991*8.0-cx2*gamma_aa[index]*t162050*t161907*t161991*(3.2E1/3.0)+cx2*t162015*t162009*t161732* \
                   t161907*t161991*(1.6E1/3.0)+cx4*t162033*t162008*t161950*t161744*t161992*(3.2E1/3.0)+cx4*t162008*t161735* \
                   t161744*t161992*(gx*t161903*(3.2E1/3.0)+gamma_aa[index]*t161907*t161991*6.4E1+gamma_aa[index]*t161732* \
                   t161950*t161992*(1.28E2/3.0)+gx*t161732*t161943*t161991*9.6E1)-cx1*gx*t161732*t161943*t161991*1.0/ \
                   (t161994*t161994*t161994)*(1.6E1/3.0)+cx2*t162009*t161732*t161736*t161991*(gx*t161903*(1.6E1/3.0)+ \
                   gamma_aa[index]*t161907*t161991*(3.2E1/3.0))+cx2*gamma_aa[index]*t162012*t162009*t161736*t161991*2.0- \
                   cx4*gamma_aa[index]*t161732*t161950*t162049*t161992*(1.28E2/3.0)-cx3*gx*t162051*t161732*t161943*t161991* \
                   2.4E1+cx4*gamma_aa[index]*t162008*t162028*t161732*t161735*t161992*4.0+cx3*gx*t162002*t162023*t161732* \
                   t161737*t161991*3.0-cx2*1.0/(t162001*t162001*t162001)*t162012*t162015*t161732*t161736*t161991*2.0- \
                   cx4*t162033*1.0/(t162007*t162007*t162007)*t162028*t161735*t161744*t161992*2.0+cx3*gamma_aa[index]* \
                   gx*t162002*t161732*t161737*t161991*(gx*t161903*8.0+gamma_aa[index]*t161907*t161991*3.2E1+gx*t161732* \
                   t161943*t161991*2.4E1)+cx3*gamma_aa[index]*gx*t162002*t162019*t161732*t161943*t161991*8.0-cx3*gamma_aa[index]* \
                   gx*t162023*t162019*t161732*t161737*t161991*1.0/(t161998*t161998*t161998)*2.0)-c0*pow(rho_a[index],1.0/ \
                   3.0)*t162060*t162047*(4.0/3.0);
            } else if (rho_a[index] > cutoff_) {
                double t164550 = 1.0/pow(rho_a[index],1.0/3.0);
                double t164551 = c*t164550;
                double t164552 = sqrt(t164551);
                double t164553 = pow(t164551,3.0/2.0);
                double t164554 = c*c;
                double t164555 = 1.0/pow(rho_a[index],2.0/3.0);
                double t164556 = 1.0/c0p;
                double t164557 = b1p*t164552;
                double t164558 = b3p*t164553;
                double t164559 = b4p*t164554*t164555;
                double t164560 = b2p*c*t164550;
                double t164561 = t164560+t164557+t164558+t164559;
                double t164562 = 1.0/t164561;
                double t164563 = t164562*t164556*(1.0/2.0);
                double t164564 = t164563+1.0;
                double t164565 = log(t164564);
                double t164566 = a1p*c*t164550;
                double t164567 = t164566+1.0;
                double t164568 = 1.0/pow(rho_a[index],8.0/3.0);
                double t164569 = gamma_aa[index]*gamma_aa[index];
                double t164570 = gcaa*gcaa;
                double t164571 = t164570*t164570;
                double t164572 = 1.0/pow(rho_a[index],3.2E1/3.0);
                double t164573 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t164574 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t164575 = gamma_aa[index]*gcaa*t164568;
                double t164576 = t164575+1.0;
                double t164577 = gamma_aa[index]*gcaa*t164568*3.0;
                double t164578 = gamma_aa[index]*gcaa*t164570*t164574*t164569;
                double t164579 = t164570*t164573*t164569*3.0;
                double t164580 = t164577+t164578+t164579+1.0;
                double t164581 = t164569*t164569;
                double t164582 = gamma_aa[index]*gcaa*t164568*4.0;
                double t164583 = gamma_aa[index]*gcaa*t164570*t164574*t164569*4.0;
                double t164584 = t164570*t164573*t164569*6.0;
                double t164585 = t164571*t164572*t164581;
                double t164586 = t164582+t164583+t164584+t164585+1.0;
                double t164587 = gamma_aa[index]*gcaa*t164568*2.0;
                double t164588 = t164570*t164573*t164569;
                double t164589 = t164587+t164588+1.0;
                double t164590 = pow(2.0,1.0/3.0);
                double t164591 = t164590*2.0;
                double t164592 = t164591-2.0;
                double t164593 = two_13*2.0;
                double t164594 = t164593-2.0;
                double t164595 = 1.0/t164594;
                double t164596 = 1.0/c0f;
                double t164597 = b1f*t164552;
                double t164598 = b3f*t164553;
                double t164599 = b4f*t164554*t164555;
                double t164600 = b2f*c*t164550;
                double t164601 = t164600+t164597+t164598+t164599;
                double t164602 = 1.0/t164601;
                double t164603 = t164602*t164596*(1.0/2.0);
                double t164604 = t164603+1.0;
                double t164605 = log(t164604);
                double t164606 = a1f*c*t164550;
                double t164607 = t164606+1.0;
                double t164608 = c0f*t164605*t164607*2.0;
                double t164609 = c0p*t164565*t164567*2.0;
                double t164610 = 1.0/t164576;
                double t164611 = 1.0/t164586;
                double t164612 = 1.0/t164589;
                double t164613 = 1.0/t164580;
                double t164614 = 1.0/pow(rho_a[index],1.9E1/3.0);
                double t164615 = 1.0/(t164576*t164576);
                double t164616 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]*rho_a[index]);
                double t164617 = 1.0/pow(rho_a[index],1.1E1/3.0);
                double t164618 = 1.0/(t164580*t164580);
                double t164619 = 1.0/(t164589*t164589);
                double t164620 = gcaa*t164568*3.0;
                double t164621 = gamma_aa[index]*t164570*t164573*6.0;
                double t164622 = gcaa*t164570*t164574*t164569*3.0;
                double t164623 = t164620+t164621+t164622;
                double t164624 = 1.0/pow(rho_a[index],3.5E1/3.0);
                double t164625 = 1.0/(t164586*t164586);
                double t164626 = gcaa*t164568*4.0;
                double t164627 = gamma_aa[index]*t164570*t164573*1.2E1;
                double t164628 = gcaa*t164570*t164574*t164569*1.2E1;
                double t164629 = gamma_aa[index]*t164571*t164572*t164569*4.0;
                double t164630 = t164626+t164627+t164628+t164629;
                double t164631 = gcaa*t164568*2.0;
                double t164632 = gamma_aa[index]*t164570*t164573*2.0;
                double t164633 = t164631+t164632;
                double t164634 = gamma_aa[index]*gcaa*t164617*(1.6E1/3.0);
                double t164635 = t164614*t164570*t164569*(1.6E1/3.0);
                double t164636 = t164634+t164635;
                double t164637 = gamma_aa[index]*gcaa*t164617*8.0;
                double t164638 = gamma_aa[index]*gcaa*t164570*t164616*t164569*8.0;
                double t164639 = t164614*t164570*t164569*1.6E1;
                double t164640 = t164637+t164638+t164639;
                double t164641 = gamma_aa[index]*gcaa*t164617*(3.2E1/3.0);
                double t164642 = gamma_aa[index]*gcaa*t164570*t164616*t164569*3.2E1;
                double t164643 = t164614*t164570*t164569*3.2E1;
                double t164644 = t164624*t164571*t164581*(3.2E1/3.0);
                double t164645 = t164641+t164642+t164643+t164644;
                double t164646 = 1.0/pow(rho_a[index],4.0/3.0);
                double t164647 = 1.0/pow(rho_a[index],5.0/3.0);
                double t164648 = 1.0/sqrt(t164551);
                double t164649 = 1.0/t164564;
                double t164650 = 1.0/(t164561*t164561);
                double t164651 = b4p*t164554*t164647*(2.0/3.0);
                double t164652 = b2p*c*t164646*(1.0/3.0);
                double t164653 = b1p*c*t164646*t164648*(1.0/6.0);
                double t164654 = b3p*c*t164552*t164646*(1.0/2.0);
                double t164655 = t164651+t164652+t164653+t164654;
                double t164656 = t164650*t164655*t164567*t164649;
                double t164657 = ccaa1*gcaa*t164610*t164568;
                double t164658 = ccaa4*gamma_aa[index]*t164611*t164571*t164572*t164569*4.0;
                double t164659 = ccaa2*gamma_aa[index]*t164612*t164570*t164573*2.0;
                double t164660 = ccaa3*gcaa*t164613*t164570*t164574*t164569*3.0;
                double t164661 = t164660+t164657+t164658+t164659-ccaa1*gamma_aa[index]*t164570*t164615*t164573-ccaa4* \
                   t164630*t164571*t164625*t164572*t164581-ccaa2*t164570*t164633*t164573*t164619*t164569-ccaa3*gamma_aa[index]* \
                   gcaa*t164623*t164570*t164618*t164574*t164569;
                double t164662 = rho_a[index]*(8.334140006820045E15/1.40737488355328E14);
                double t164663 = 1.0/pow(t164662,1.0/3.0);
                double t164664 = 1.0/(omega*omega);
                double t164665 = pow(t164662,2.0/3.0);
                double t164715 = t164664*t164665;
                double t164666 = exp(-t164715);
                double t164667 = gx*gx;
                double t164668 = t164667*t164667;
                double t164669 = gamma_aa[index]*gx*t164568;
                double t164670 = t164669+1.0;
                double t164671 = gamma_aa[index]*gx*t164568*3.0;
                double t164672 = gamma_aa[index]*gx*t164574*t164667*t164569;
                double t164673 = t164573*t164667*t164569*3.0;
                double t164674 = t164671+t164672+t164673+1.0;
                double t164675 = gamma_aa[index]*gx*t164568*2.0;
                double t164676 = t164573*t164667*t164569;
                double t164677 = t164675+t164676+1.0;
                double t164678 = 1.0/(t164674*t164674);
                double t164679 = gamma_aa[index]*gx*t164568*4.0;
                double t164680 = gamma_aa[index]*gx*t164574*t164667*t164569*4.0;
                double t164681 = t164573*t164667*t164569*6.0;
                double t164682 = t164572*t164581*t164668;
                double t164683 = t164680+t164681+t164682+t164679+1.0;
                double t164684 = 1.0/(t164683*t164683);
                double t164685 = 1.0/(t164677*t164677);
                double t164686 = gamma_aa[index]*gx*t164617*(1.6E1/3.0);
                double t164687 = t164614*t164667*t164569*(1.6E1/3.0);
                double t164688 = t164686+t164687;
                double t164689 = gx*t164568*2.0;
                double t164690 = gamma_aa[index]*t164573*t164667*2.0;
                double t164691 = t164690+t164689;
                double t164692 = gx*t164568*3.0;
                double t164693 = gamma_aa[index]*t164573*t164667*6.0;
                double t164694 = gx*t164574*t164667*t164569*3.0;
                double t164695 = t164692+t164693+t164694;
                double t164696 = gamma_aa[index]*gx*t164617*8.0;
                double t164697 = gamma_aa[index]*gx*t164616*t164667*t164569*8.0;
                double t164698 = t164614*t164667*t164569*1.6E1;
                double t164699 = t164696+t164697+t164698;
                double t164700 = gamma_aa[index]*gx*t164617*(3.2E1/3.0);
                double t164701 = gamma_aa[index]*gx*t164616*t164667*t164569*3.2E1;
                double t164702 = t164614*t164667*t164569*3.2E1;
                double t164703 = t164624*t164581*t164668*(3.2E1/3.0);
                double t164704 = t164700+t164701+t164702+t164703;
                double t164705 = gx*t164568*4.0;
                double t164706 = gamma_aa[index]*t164573*t164667*1.2E1;
                double t164707 = gx*t164574*t164667*t164569*1.2E1;
                double t164708 = gamma_aa[index]*t164572*t164569*t164668*4.0;
                double t164709 = t164705+t164706+t164707+t164708;
                double t164710 = 1.0/omega;
                double t164711 = pow(t164662,1.0/3.0);
                double t164712 = t164710*t164711;
                double t164713 = erf(t164712);
                double t164714 = t164713*(3.991211251234741E15/2.251799813685248E15);
                double t164716 = omega*omega;
                double t164717 = 1.0/pow(t164662,2.0/3.0);
                double t164718 = t164666-1.0;
                double t164719 = t164716*t164717*t164718*(1.0/2.0);
                double t164720 = t164719-t164666+3.0/2.0;
                double t164731 = omega*t164720*t164663;
                double t164721 = -t164731+t164714;
                double t164722 = omega*t164721*t164663*(4.0/3.0);
                double t164723 = t164722-1.0;
                double t164724 = 1.0/t164670;
                double t164725 = 1.0/t164683;
                double t164726 = 1.0/t164677;
                double t164727 = 1.0/t164674;
                double t164728 = 1.0/(t164670*t164670);
                double t164729 = pow(rho_a[index],4.0/3.0);
                double t164730 = 1.0/pow(t164662,4.0/3.0);
                double t164732 = cx1*gx*t164724*t164568;
                double t164733 = cx4*gamma_aa[index]*t164572*t164725*t164569*t164668*4.0;
                double t164734 = cx2*gamma_aa[index]*t164573*t164726*t164667*2.0;
                double t164735 = cx3*gx*t164574*t164727*t164667*t164569*3.0;
                double t164736 = t164732+t164733+t164734+t164735-cx1*gamma_aa[index]*t164573*t164728*t164667-cx2* \
                   t164573*t164691*t164667*t164685*t164569-cx4*t164572*t164581*t164709*t164684*t164668-cx3*gamma_aa[index]* \
                   gx*t164574*t164667*t164569*t164695*t164678;
                v_rho_a_gamma_aa_[index] = -t164661*(t164609+t164592*t164595*(t164608-c0p*t164565*t164567*2.0))+rho_a[index]* \
                   t164661*(-t164656+t164592*t164595*(t164656-(1.0/(t164601*t164601)*t164607*(b2f*c*t164646*(1.0/3.0) \
                   +b4f*t164554*t164647*(2.0/3.0)+b1f*c*t164646*t164648*(1.0/6.0)+b3f*c*t164552*t164646*(1.0/2.0)))/t164604+ \
                   a1f*c*c0f*t164605*t164646*(2.0/3.0)-a1p*c*c0p*t164565*t164646*(2.0/3.0))+a1p*c*c0p*t164565*t164646* \
                   (2.0/3.0))-rho_a[index]*(t164609+t164592*t164595*(t164608-t164609))*(ccaa1*gcaa*t164610*t164617*(- \
                   8.0/3.0)-ccaa2*gamma_aa[index]*t164612*t164614*t164570*(3.2E1/3.0)+ccaa1*gamma_aa[index]*t164614*t164570* \
                   t164615*8.0+ccaa4*t164630*t164624*t164571*t164625*t164581*(3.2E1/3.0)+ccaa2*t164614*t164570*t164633* \
                   t164619*t164569*(1.6E1/3.0)+ccaa4*t164571*t164625*t164572*t164581*(gcaa*t164617*(3.2E1/3.0)+gamma_aa[index]* \
                   t164614*t164570*6.4E1+gamma_aa[index]*t164624*t164571*t164569*(1.28E2/3.0)+gcaa*t164570*t164616*t164569* \
                   9.6E1)-ccaa1*gcaa*t164570*t164616*1.0/(t164576*t164576*t164576)*t164569*(1.6E1/3.0)+ccaa2*t164570* \
                   t164573*t164619*t164569*(gcaa*t164617*(1.6E1/3.0)+gamma_aa[index]*t164614*t164570*(3.2E1/3.0))-ccaa4* \
                   gamma_aa[index]*t164611*t164624*t164571*t164569*(1.28E2/3.0)+ccaa2*gamma_aa[index]*t164570*t164573* \
                   t164636*t164619*2.0-ccaa3*gcaa*t164613*t164570*t164616*t164569*2.4E1+ccaa4*gamma_aa[index]*t164571* \
                   t164625*t164572*t164645*t164569*4.0+ccaa3*gcaa*t164640*t164570*t164618*t164574*t164569*3.0-ccaa4*t164630* \
                   t164571*t164572*t164581*t164645*1.0/(t164586*t164586*t164586)*2.0-ccaa2*t164570*t164633*t164573*t164636* \
                   t164569*1.0/(t164589*t164589*t164589)*2.0+ccaa3*gamma_aa[index]*gcaa*t164570*t164618*t164574*t164569* \
                   (gcaa*t164617*8.0+gamma_aa[index]*t164614*t164570*3.2E1+gcaa*t164570*t164616*t164569*2.4E1)+ccaa3* \
                   gamma_aa[index]*gcaa*t164623*t164570*t164616*t164618*t164569*8.0-ccaa3*gamma_aa[index]*gcaa*t164640* \
                   t164623*t164570*1.0/(t164580*t164580*t164580)*t164574*t164569*2.0)-c0*t164736*t164729*(omega*t164663* \
                   (omega*t164720*t164730*(2.778046668940015E15/1.40737488355328E14)+omega*t164663*((t164666*(1.0/3.0) \
                   )/rho_a[index]+1.0/pow(t164662,5.0/3.0)*t164716*t164718*(2.778046668940015E15/1.40737488355328E14) \
                   -t164663*t164664*t164666*(2.778046668940015E15/7.0368744177664E13))+1.0/sqrt(3.141592653589793)*t164710* \
                   t164717*t164666*(1.108777112152858E31/1.584563250285287E29))*(4.0/3.0)-omega*t164721*t164730*(2.778046668940015E15/ \
                   1.05553116266496E14))-c0*t164723*t164729*(cx1*gx*t164724*t164617*(-8.0/3.0)+cx1*gamma_aa[index]*t164614* \
                   t164728*t164667*8.0-cx2*gamma_aa[index]*t164614*t164726*t164667*(3.2E1/3.0)+cx2*t164614*t164691*t164667* \
                   t164685*t164569*(1.6E1/3.0)+cx4*t164624*t164581*t164709*t164684*t164668*(3.2E1/3.0)+cx4*t164572*t164581* \
                   t164684*t164668*(gx*t164617*(3.2E1/3.0)+gamma_aa[index]*t164614*t164667*6.4E1+gamma_aa[index]*t164624* \
                   t164569*t164668*(1.28E2/3.0)+gx*t164616*t164667*t164569*9.6E1)-cx1*gx*t164616*1.0/(t164670*t164670* \
                   t164670)*t164667*t164569*(1.6E1/3.0)+cx2*t164573*t164667*t164685*t164569*(gx*t164617*(1.6E1/3.0)+gamma_aa[index]* \
                   t164614*t164667*(3.2E1/3.0))+cx2*gamma_aa[index]*t164573*t164667*t164685*t164688*2.0-cx4*gamma_aa[index]* \
                   t164624*t164725*t164569*t164668*(1.28E2/3.0)-cx3*gx*t164616*t164727*t164667*t164569*2.4E1+cx4*gamma_aa[index]* \
                   t164704*t164572*t164684*t164569*t164668*4.0+cx3*gx*t164574*t164667*t164569*t164678*t164699*3.0-cx2* \
                   t164573*t164691*t164667*t164569*1.0/(t164677*t164677*t164677)*t164688*2.0-cx4*t164704*t164572*t164581* \
                   t164709*1.0/(t164683*t164683*t164683)*t164668*2.0+cx3*gamma_aa[index]*gx*t164574*t164667*t164569*t164678* \
                   (gx*t164617*8.0+gamma_aa[index]*t164614*t164667*3.2E1+gx*t164616*t164667*t164569*2.4E1)+cx3*gamma_aa[index]* \
                   gx*t164616*t164667*t164569*t164695*t164678*8.0-cx3*gamma_aa[index]*gx*t164574*1.0/(t164674*t164674* \
                   t164674)*t164667*t164569*t164695*t164699*2.0)-c0*pow(rho_a[index],1.0/3.0)*t164723*t164736*(4.0/3.0) \
                   ;
            } else if (rho_b[index] > cutoff_) {
                v_rho_a_gamma_aa_[index] = 0.0;
            } else {
                v_rho_a_gamma_aa_[index] = 0.0;
            } 

            //V_rho_a_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_a_gamma_ab_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_a_gamma_ab_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_a_gamma_ab_[index] = 0.0;
            } else {
                v_rho_a_gamma_ab_[index] = 0.0;
            } 

            //V_rho_a_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t162063 = rho_a[index]+rho_b[index];
                double t162064 = 1.0/pow(t162063,1.0/3.0);
                double t162065 = c*t162064;
                double t162066 = sqrt(t162065);
                double t162067 = b1p*t162066;
                double t162068 = pow(t162065,3.0/2.0);
                double t162069 = b3p*t162068;
                double t162070 = c*c;
                double t162071 = 1.0/pow(t162063,2.0/3.0);
                double t162072 = b4p*t162070*t162071;
                double t162073 = b2p*c*t162064;
                double t162074 = t162072+t162073+t162067+t162069;
                double t162075 = 1.0/pow(t162063,4.0/3.0);
                double t162076 = 1.0/c0p;
                double t162077 = 1.0/t162074;
                double t162078 = t162076*t162077*(1.0/2.0);
                double t162079 = t162078+1.0;
                double t162080 = a1p*c*t162064;
                double t162081 = t162080+1.0;
                double t162082 = rho_a[index]-rho_b[index];
                double t162083 = t162082*t162082;
                double t162084 = 1.0/t162063;
                double t162085 = t162082*t162084;
                double t162086 = two_13*2.0;
                double t162087 = t162086-2.0;
                double t162088 = 1.0/t162087;
                double t162089 = 1.0/c0f;
                double t162090 = b1f*t162066;
                double t162091 = b3f*t162068;
                double t162092 = b4f*t162070*t162071;
                double t162093 = b2f*c*t162064;
                double t162094 = t162090+t162091+t162092+t162093;
                double t162095 = 1.0/t162094;
                double t162096 = t162095*t162089*(1.0/2.0);
                double t162097 = t162096+1.0;
                double t162098 = log(t162097);
                double t162099 = a1f*c*t162064;
                double t162100 = t162099+1.0;
                double t162101 = log(t162079);
                double t162111 = c0f*t162100*t162098*2.0;
                double t162112 = c0p*t162101*t162081*2.0;
                double t162102 = t162111-t162112;
                double t162103 = t162085+1.0;
                double t162104 = pow(t162103,4.0/3.0);
                double t162105 = -t162085+1.0;
                double t162106 = pow(t162105,4.0/3.0);
                double t162107 = t162104+t162106-2.0;
                double t162108 = 1.0/(t162063*t162063);
                double t162139 = t162108*t162082;
                double t162109 = t162084-t162139;
                double t162110 = 1.0/(t162063*t162063*t162063*t162063);
                double t162113 = t162083*t162083;
                double t162114 = 1.0/pow(t162063,5.0/3.0);
                double t162115 = 1.0/sqrt(t162065);
                double t162116 = 1.0/t162079;
                double t162117 = 1.0/(t162074*t162074);
                double t162118 = b4p*t162114*t162070*(2.0/3.0);
                double t162119 = b2p*c*t162075*(1.0/3.0);
                double t162120 = b1p*c*t162115*t162075*(1.0/6.0);
                double t162121 = b3p*c*t162066*t162075*(1.0/2.0);
                double t162122 = t162120+t162121+t162118+t162119;
                double t162123 = t162122*t162116*t162081*t162117;
                double t162124 = 1.0/(t162063*t162063*t162063*t162063*t162063);
                double t162125 = 1.0/d2fz0;
                double t162126 = 1.0/Aa;
                double t162127 = b1a*t162066;
                double t162128 = b3a*t162068;
                double t162129 = b4a*t162070*t162071;
                double t162130 = b2a*c*t162064;
                double t162131 = t162130+t162127+t162128+t162129;
                double t162132 = 1.0/t162131;
                double t162133 = t162132*t162126*(1.0/2.0);
                double t162134 = t162133+1.0;
                double t162135 = log(t162134);
                double t162136 = a1a*c*t162064;
                double t162137 = t162136+1.0;
                double t162138 = pow(t162103,1.0/3.0);
                double t162140 = t162109*t162138*(4.0/3.0);
                double t162141 = pow(t162105,1.0/3.0);
                double t162142 = t162140-t162141*t162109*(4.0/3.0);
                double t162143 = t162110*t162113;
                double t162144 = t162143-1.0;
                double t162145 = 1.0/pow(rho_a[index],1.0/3.0);
                double t162146 = c*t162145;
                double t162147 = sqrt(t162146);
                double t162148 = b1f*t162147;
                double t162149 = pow(t162146,3.0/2.0);
                double t162150 = b3f*t162149;
                double t162151 = 1.0/pow(rho_a[index],2.0/3.0);
                double t162152 = b4f*t162070*t162151;
                double t162153 = b2f*c*t162145;
                double t162154 = t162150+t162152+t162153+t162148;
                double t162155 = 1.0/pow(rho_a[index],4.0/3.0);
                double t162156 = b1p*t162147;
                double t162157 = b3p*t162149;
                double t162158 = b4p*t162070*t162151;
                double t162159 = b2p*c*t162145;
                double t162160 = t162156+t162157+t162158+t162159;
                double t162161 = 1.0/pow(rho_a[index],5.0/3.0);
                double t162162 = 1.0/sqrt(t162146);
                double t162163 = 1.0/t162154;
                double t162164 = t162163*t162089*(1.0/2.0);
                double t162165 = t162164+1.0;
                double t162166 = 1.0/t162160;
                double t162167 = t162076*t162166*(1.0/2.0);
                double t162168 = t162167+1.0;
                double t162169 = a1p*c*t162145;
                double t162170 = t162169+1.0;
                double t162171 = 1.0/t162168;
                double t162172 = 1.0/(t162160*t162160);
                double t162173 = b4p*t162070*t162161*(2.0/3.0);
                double t162174 = b2p*c*t162155*(1.0/3.0);
                double t162175 = b1p*c*t162162*t162155*(1.0/6.0);
                double t162176 = b3p*c*t162155*t162147*(1.0/2.0);
                double t162177 = t162173+t162174+t162175+t162176;
                double t162178 = t162170*t162171*t162172*t162177;
                double t162179 = log(t162168);
                double t162180 = pow(2.0,1.0/3.0);
                double t162181 = t162180*2.0;
                double t162182 = t162181-2.0;
                double t162183 = log(t162165);
                double t162184 = a1f*c*t162145;
                double t162185 = t162184+1.0;
                double t162186 = 1.0/pow(rho_b[index],8.0/3.0);
                double t162187 = 1.0/pow(rho_a[index],8.0/3.0);
                double t162188 = gamma_aa[index]*t162187*(1.0/2.0);
                double t162189 = gamma_bb[index]*t162186*(1.0/2.0);
                double t162190 = t162188+t162189;
                double t162191 = gcab*t162190;
                double t162192 = t162191+1.0;
                double t162193 = gcab*gcab;
                double t162194 = t162190*t162190;
                double t162195 = t162193*t162193;
                double t162196 = t162194*t162194;
                double t162197 = t162193*t162194;
                double t162198 = gcab*t162190*2.0;
                double t162199 = t162197+t162198+1.0;
                double t162200 = t162193*t162194*3.0;
                double t162201 = gcab*t162190*t162193*t162194;
                double t162202 = gcab*t162190*3.0;
                double t162203 = t162200+t162201+t162202+1.0;
                double t162204 = t162193*t162194*6.0;
                double t162205 = gcab*t162190*t162193*t162194*4.0;
                double t162206 = t162195*t162196;
                double t162207 = gcab*t162190*4.0;
                double t162208 = t162204+t162205+t162206+t162207+1.0;
                double t162209 = c0f*t162183*t162185*2.0;
                double t162211 = c0p*t162170*t162179*2.0;
                double t162210 = -t162211+t162209;
                double t162212 = 1.0/pow(rho_b[index],1.0/3.0);
                double t162213 = c*t162212;
                double t162214 = sqrt(t162213);
                double t162215 = pow(t162213,3.0/2.0);
                double t162216 = 1.0/pow(rho_b[index],2.0/3.0);
                double t162217 = b1p*t162214;
                double t162218 = b3p*t162215;
                double t162219 = b4p*t162070*t162216;
                double t162220 = b2p*c*t162212;
                double t162221 = t162220+t162217+t162218+t162219;
                double t162222 = 1.0/t162221;
                double t162223 = t162222*t162076*(1.0/2.0);
                double t162224 = t162223+1.0;
                double t162225 = log(t162224);
                double t162226 = a1p*c*t162212;
                double t162227 = t162226+1.0;
                double t162228 = c0p*t162225*t162227*2.0;
                double t162229 = t162110*t162102*t162113*t162107*t162088;
                double t162230 = Aa*t162107*t162125*t162135*t162144*t162137*t162088*2.0;
                double t162231 = 1.0/pow(rho_a[index],1.1E1/3.0);
                double t162232 = 1.0/(t162203*t162203);
                double t162233 = 1.0/(t162208*t162208);
                double t162234 = gcab*t162186*2.0;
                double t162235 = t162190*t162193*t162186*6.0;
                double t162236 = gcab*t162193*t162194*t162186*6.0;
                double t162237 = t162190*t162194*t162186*t162195*2.0;
                double t162238 = t162234+t162235+t162236+t162237;
                double t162239 = 1.0/(t162199*t162199);
                double t162240 = gamma_aa[index]*gcab*t162231*(8.0/3.0);
                double t162241 = gamma_aa[index]*t162231*t162190*t162193*(8.0/3.0);
                double t162242 = t162240+t162241;
                double t162243 = gcab*t162186;
                double t162244 = t162190*t162193*t162186;
                double t162245 = t162243+t162244;
                double t162246 = gamma_aa[index]*gcab*t162231*(1.6E1/3.0);
                double t162247 = gamma_aa[index]*gcab*t162231*t162193*t162194*1.6E1;
                double t162248 = gamma_aa[index]*t162231*t162190*t162194*t162195*(1.6E1/3.0);
                double t162249 = gamma_aa[index]*t162231*t162190*t162193*1.6E1;
                double t162250 = t162246+t162247+t162248+t162249;
                double t162251 = 1.0/(t162192*t162192);
                double t162252 = 1.0/t162199;
                double t162253 = gcab*t162186*(3.0/2.0);
                double t162254 = t162190*t162193*t162186*3.0;
                double t162255 = gcab*t162193*t162194*t162186*(3.0/2.0);
                double t162256 = t162253+t162254+t162255;
                double t162257 = gamma_aa[index]*gcab*t162231*4.0;
                double t162258 = gamma_aa[index]*gcab*t162231*t162193*t162194*4.0;
                double t162259 = gamma_aa[index]*t162231*t162190*t162193*8.0;
                double t162260 = t162257+t162258+t162259;
                double t162261 = 1.0/t162203;
                double t162262 = 1.0/t162208;
                v_rho_a_gamma_bb_[index] = -(t162112+t162230+t162229+t162063*(t162123-t162110*t162113*t162107*t162088* \
                   (t162123-(t162100*1.0/(t162094*t162094)*(b2f*c*t162075*(1.0/3.0)+b4f*t162114*t162070*(2.0/3.0)+b1f* \
                   c*t162115*t162075*(1.0/6.0)+b3f*c*t162066*t162075*(1.0/2.0)))/t162097+a1f*c*c0f*t162075*t162098*(2.0/ \
                   3.0)-a1p*c*c0p*t162101*t162075*(2.0/3.0))-a1p*c*c0p*t162101*t162075*(2.0/3.0)+t162110*t162102*t162113* \
                   t162142*t162088-t162102*t162113*t162124*t162107*t162088*4.0+t162110*t162102*t162107*t162082*t162083* \
                   t162088*4.0-Aa*t162107*t162125*t162135*t162137*t162088*(t162113*t162124*4.0-t162110*t162082*t162083* \
                   4.0)*2.0+Aa*t162142*t162125*t162135*t162144*t162137*t162088*2.0+(1.0/(t162131*t162131)*t162107*t162125* \
                   t162144*t162137*t162088*(b2a*c*t162075*(1.0/3.0)+b4a*t162114*t162070*(2.0/3.0)+b1a*c*t162115*t162075* \
                   (1.0/6.0)+b3a*c*t162066*t162075*(1.0/2.0)))/t162134-Aa*a1a*c*t162107*t162125*t162135*t162144*t162075* \
                   t162088*(2.0/3.0))+rho_a[index]*(-t162178+t162182*t162088*(t162178-(1.0/(t162154*t162154)*t162185* \
                   (b2f*c*t162155*(1.0/3.0)+b4f*t162070*t162161*(2.0/3.0)+b1f*c*t162162*t162155*(1.0/6.0)+b3f*c*t162155* \
                   t162147*(1.0/2.0)))/t162165+a1f*c*c0f*t162155*t162183*(2.0/3.0)-a1p*c*c0p*t162155*t162179*(2.0/3.0) \
                   )+a1p*c*c0p*t162155*t162179*(2.0/3.0))-c0p*t162170*t162179*2.0-t162210*t162182*t162088)*((ccab1*gcab* \
                   t162186*(1.0/2.0))/t162192-ccab1*t162251*t162190*t162193*t162186*(1.0/2.0)+ccab2*t162252*t162190*t162193* \
                   t162186-ccab2*t162245*t162193*t162194*t162239-ccab4*t162233*t162238*t162195*t162196+ccab4*t162190* \
                   t162262*t162194*t162186*t162195*2.0+ccab3*gcab*t162261*t162193*t162194*t162186*(3.0/2.0)-ccab3*gcab* \
                   t162232*t162190*t162193*t162256*t162194)+(rho_a[index]*(t162211+t162210*t162182*t162088)+rho_b[index]* \
                   (t162228-t162182*t162088*(t162228-c0f*log((t162089*(1.0/2.0))/(b1f*t162214+b3f*t162215+b2f*c*t162212+ \
                   b4f*t162070*t162216)+1.0)*(a1f*c*t162212+1.0)*2.0))-t162063*(t162112+t162230+t162229))*(ccab4*t162233* \
                   t162195*t162196*(gamma_aa[index]*t162231*t162193*t162186*8.0+gamma_aa[index]*t162231*t162194*t162186* \
                   t162195*8.0+gamma_aa[index]*gcab*t162231*t162190*t162193*t162186*1.6E1)+ccab2*t162242*t162190*t162193* \
                   t162239*t162186-ccab4*t162250*1.0/(t162208*t162208*t162208)*t162238*t162195*t162196*2.0-ccab2*t162242* \
                   t162245*t162193*t162194*1.0/(t162199*t162199*t162199)*2.0+ccab1*gamma_aa[index]*t162231*t162251*t162193* \
                   t162186*(4.0/3.0)-ccab2*gamma_aa[index]*t162231*t162252*t162193*t162186*(4.0/3.0)+ccab2*gamma_aa[index]* \
                   t162231*t162190*t162245*t162193*t162239*(8.0/3.0)-ccab4*gamma_aa[index]*t162231*t162262*t162194*t162186* \
                   t162195*8.0+ccab2*gamma_aa[index]*t162231*t162194*t162239*t162186*t162195*(4.0/3.0)+ccab3*gcab*t162232* \
                   t162260*t162193*t162194*t162186*(3.0/2.0)+ccab4*t162250*t162233*t162190*t162194*t162186*t162195*2.0+ \
                   ccab3*gcab*t162232*t162190*t162193*t162194*(gamma_aa[index]*t162231*t162193*t162186*4.0+gamma_aa[index]* \
                   gcab*t162231*t162190*t162193*t162186*4.0)-ccab1*gamma_aa[index]*gcab*t162231*t162190*1.0/(t162192* \
                   t162192*t162192)*t162193*t162186*(4.0/3.0)-ccab3*gcab*1.0/(t162203*t162203*t162203)*t162260*t162190* \
                   t162193*t162256*t162194*2.0+ccab3*gamma_aa[index]*gcab*t162231*t162232*t162193*t162256*t162194*4.0- \
                   ccab3*gamma_aa[index]*gcab*t162231*t162261*t162190*t162193*t162186*4.0+ccab4*gamma_aa[index]*t162231* \
                   t162233*t162190*t162238*t162194*t162195*(1.6E1/3.0));
            } else if (rho_a[index] > cutoff_) {
                v_rho_a_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_a_gamma_bb_[index] = 0.0;
            } else {
                v_rho_a_gamma_bb_[index] = 0.0;
            } 

            //V_rho_b_gamma_aa
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t162264 = rho_a[index]+rho_b[index];
                double t162265 = 1.0/pow(t162264,1.0/3.0);
                double t162266 = c*t162265;
                double t162267 = sqrt(t162266);
                double t162268 = b1p*t162267;
                double t162269 = pow(t162266,3.0/2.0);
                double t162270 = b3p*t162269;
                double t162271 = c*c;
                double t162272 = 1.0/pow(t162264,2.0/3.0);
                double t162273 = b4p*t162271*t162272;
                double t162274 = b2p*c*t162265;
                double t162275 = t162270+t162273+t162274+t162268;
                double t162276 = 1.0/pow(t162264,4.0/3.0);
                double t162277 = 1.0/c0p;
                double t162278 = 1.0/t162275;
                double t162279 = t162277*t162278*(1.0/2.0);
                double t162280 = t162279+1.0;
                double t162281 = a1p*c*t162265;
                double t162282 = t162281+1.0;
                double t162283 = rho_a[index]-rho_b[index];
                double t162284 = t162283*t162283;
                double t162285 = 1.0/t162264;
                double t162286 = t162283*t162285;
                double t162287 = two_13*2.0;
                double t162288 = t162287-2.0;
                double t162289 = 1.0/t162288;
                double t162290 = 1.0/c0f;
                double t162291 = b1f*t162267;
                double t162292 = b3f*t162269;
                double t162293 = b4f*t162271*t162272;
                double t162294 = b2f*c*t162265;
                double t162295 = t162291+t162292+t162293+t162294;
                double t162296 = 1.0/t162295;
                double t162297 = t162290*t162296*(1.0/2.0);
                double t162298 = t162297+1.0;
                double t162299 = log(t162298);
                double t162300 = a1f*c*t162265;
                double t162301 = t162300+1.0;
                double t162302 = log(t162280);
                double t162313 = c0f*t162301*t162299*2.0;
                double t162314 = c0p*t162302*t162282*2.0;
                double t162303 = t162313-t162314;
                double t162304 = t162286+1.0;
                double t162305 = pow(t162304,4.0/3.0);
                double t162306 = -t162286+1.0;
                double t162307 = pow(t162306,4.0/3.0);
                double t162308 = t162305+t162307-2.0;
                double t162309 = 1.0/(t162264*t162264);
                double t162310 = t162309*t162283;
                double t162311 = t162310+t162285;
                double t162312 = 1.0/(t162264*t162264*t162264*t162264);
                double t162315 = t162284*t162284;
                double t162316 = 1.0/pow(t162264,5.0/3.0);
                double t162317 = 1.0/sqrt(t162266);
                double t162318 = 1.0/t162280;
                double t162319 = 1.0/(t162275*t162275);
                double t162320 = b4p*t162271*t162316*(2.0/3.0);
                double t162321 = b2p*c*t162276*(1.0/3.0);
                double t162322 = b1p*c*t162317*t162276*(1.0/6.0);
                double t162323 = b3p*c*t162267*t162276*(1.0/2.0);
                double t162324 = t162320+t162321+t162322+t162323;
                double t162325 = 1.0/(t162264*t162264*t162264*t162264*t162264);
                double t162326 = 1.0/d2fz0;
                double t162327 = 1.0/Aa;
                double t162328 = b1a*t162267;
                double t162329 = b3a*t162269;
                double t162330 = b4a*t162271*t162272;
                double t162331 = b2a*c*t162265;
                double t162332 = t162330+t162331+t162328+t162329;
                double t162333 = 1.0/t162332;
                double t162334 = t162333*t162327*(1.0/2.0);
                double t162335 = t162334+1.0;
                double t162336 = log(t162335);
                double t162337 = a1a*c*t162265;
                double t162338 = t162337+1.0;
                double t162339 = pow(t162304,1.0/3.0);
                double t162340 = t162311*t162339*(4.0/3.0);
                double t162341 = pow(t162306,1.0/3.0);
                double t162342 = t162340-t162311*t162341*(4.0/3.0);
                double t162343 = t162312*t162315;
                double t162344 = t162343-1.0;
                double t162345 = 1.0/pow(rho_b[index],1.0/3.0);
                double t162346 = c*t162345;
                double t162347 = sqrt(t162346);
                double t162348 = b1f*t162347;
                double t162349 = pow(t162346,3.0/2.0);
                double t162350 = b3f*t162349;
                double t162351 = 1.0/pow(rho_b[index],2.0/3.0);
                double t162352 = b4f*t162351*t162271;
                double t162353 = b2f*c*t162345;
                double t162354 = t162350+t162352+t162353+t162348;
                double t162355 = 1.0/pow(rho_b[index],4.0/3.0);
                double t162356 = b1p*t162347;
                double t162357 = b3p*t162349;
                double t162358 = b4p*t162351*t162271;
                double t162359 = b2p*c*t162345;
                double t162360 = t162356+t162357+t162358+t162359;
                double t162361 = 1.0/pow(rho_b[index],5.0/3.0);
                double t162362 = 1.0/sqrt(t162346);
                double t162363 = 1.0/t162354;
                double t162364 = t162290*t162363*(1.0/2.0);
                double t162365 = t162364+1.0;
                double t162366 = 1.0/t162360;
                double t162367 = t162366*t162277*(1.0/2.0);
                double t162368 = t162367+1.0;
                double t162369 = a1p*c*t162345;
                double t162370 = t162369+1.0;
                double t162371 = 1.0/t162368;
                double t162372 = 1.0/(t162360*t162360);
                double t162373 = b4p*t162271*t162361*(2.0/3.0);
                double t162374 = b2p*c*t162355*(1.0/3.0);
                double t162375 = b1p*c*t162362*t162355*(1.0/6.0);
                double t162376 = b3p*c*t162355*t162347*(1.0/2.0);
                double t162377 = t162373+t162374+t162375+t162376;
                double t162378 = t162370*t162371*t162372*t162377;
                double t162379 = log(t162368);
                double t162380 = pow(2.0,1.0/3.0);
                double t162381 = t162380*2.0;
                double t162382 = t162381-2.0;
                double t162383 = log(t162365);
                double t162384 = a1f*c*t162345;
                double t162385 = t162384+1.0;
                double t162386 = 1.0/pow(rho_a[index],8.0/3.0);
                double t162387 = gamma_aa[index]*t162386*(1.0/2.0);
                double t162388 = 1.0/pow(rho_b[index],8.0/3.0);
                double t162389 = gamma_bb[index]*t162388*(1.0/2.0);
                double t162390 = t162387+t162389;
                double t162391 = gcab*t162390;
                double t162392 = t162391+1.0;
                double t162393 = gcab*gcab;
                double t162394 = t162390*t162390;
                double t162395 = t162393*t162393;
                double t162396 = t162394*t162394;
                double t162397 = t162393*t162394;
                double t162398 = gcab*t162390*2.0;
                double t162399 = t162397+t162398+1.0;
                double t162400 = t162393*t162394*3.0;
                double t162401 = gcab*t162390*t162393*t162394;
                double t162402 = gcab*t162390*3.0;
                double t162403 = t162400+t162401+t162402+1.0;
                double t162404 = t162393*t162394*6.0;
                double t162405 = gcab*t162390*t162393*t162394*4.0;
                double t162406 = t162395*t162396;
                double t162407 = gcab*t162390*4.0;
                double t162408 = t162404+t162405+t162406+t162407+1.0;
                double t162409 = a1p*c*c0p*t162302*t162276*(2.0/3.0);
                double t162410 = 1.0/pow(rho_a[index],1.0/3.0);
                double t162411 = c*t162410;
                double t162412 = sqrt(t162411);
                double t162413 = pow(t162411,3.0/2.0);
                double t162414 = 1.0/pow(rho_a[index],2.0/3.0);
                double t162415 = b1p*t162412;
                double t162416 = b3p*t162413;
                double t162417 = b4p*t162414*t162271;
                double t162418 = b2p*c*t162410;
                double t162419 = t162415+t162416+t162417+t162418;
                double t162420 = 1.0/t162419;
                double t162421 = t162420*t162277*(1.0/2.0);
                double t162422 = t162421+1.0;
                double t162423 = log(t162422);
                double t162424 = a1p*c*t162410;
                double t162425 = t162424+1.0;
                double t162426 = c0p*t162423*t162425*2.0;
                double t162427 = c0f*t162383*t162385*2.0;
                double t162429 = c0p*t162370*t162379*2.0;
                double t162428 = t162427-t162429;
                double t162430 = t162303*t162312*t162315*t162308*t162289;
                double t162431 = Aa*t162308*t162326*t162344*t162336*t162338*t162289*2.0;
                double t162432 = 1.0/pow(rho_b[index],1.1E1/3.0);
                double t162433 = 1.0/(t162403*t162403);
                double t162434 = 1.0/(t162408*t162408);
                double t162435 = gcab*t162386*2.0;
                double t162436 = t162390*t162393*t162386*6.0;
                double t162437 = gcab*t162393*t162394*t162386*6.0;
                double t162438 = t162390*t162394*t162386*t162395*2.0;
                double t162439 = t162435+t162436+t162437+t162438;
                double t162440 = 1.0/(t162399*t162399);
                double t162441 = gamma_bb[index]*gcab*t162432*(8.0/3.0);
                double t162442 = gamma_bb[index]*t162432*t162390*t162393*(8.0/3.0);
                double t162443 = t162441+t162442;
                double t162444 = gcab*t162386;
                double t162445 = t162390*t162393*t162386;
                double t162446 = t162444+t162445;
                double t162447 = gamma_bb[index]*gcab*t162432*(1.6E1/3.0);
                double t162448 = gamma_bb[index]*gcab*t162432*t162393*t162394*1.6E1;
                double t162449 = gamma_bb[index]*t162432*t162390*t162394*t162395*(1.6E1/3.0);
                double t162450 = gamma_bb[index]*t162432*t162390*t162393*1.6E1;
                double t162451 = t162450+t162447+t162448+t162449;
                double t162452 = 1.0/(t162392*t162392);
                double t162453 = 1.0/t162399;
                double t162454 = gcab*t162386*(3.0/2.0);
                double t162455 = t162390*t162393*t162386*3.0;
                double t162456 = gcab*t162393*t162394*t162386*(3.0/2.0);
                double t162457 = t162454+t162455+t162456;
                double t162458 = gamma_bb[index]*gcab*t162432*4.0;
                double t162459 = gamma_bb[index]*gcab*t162432*t162393*t162394*4.0;
                double t162460 = gamma_bb[index]*t162432*t162390*t162393*8.0;
                double t162461 = t162460+t162458+t162459;
                double t162462 = 1.0/t162403;
                double t162463 = 1.0/t162408;
                v_rho_b_gamma_aa_[index] = (rho_b[index]*(t162429+t162382*t162428*t162289)+rho_a[index]*(t162426- \
                   t162382*t162289*(t162426-c0f*log((t162290*(1.0/2.0))/(b1f*t162412+b3f*t162413+b2f*c*t162410+b4f*t162414* \
                   t162271)+1.0)*(a1f*c*t162410+1.0)*2.0))-t162264*(t162430+t162314+t162431))*(ccab4*t162434*t162395* \
                   t162396*(gamma_bb[index]*t162432*t162393*t162386*8.0+gamma_bb[index]*t162432*t162394*t162386*t162395* \
                   8.0+gamma_bb[index]*gcab*t162432*t162390*t162393*t162386*1.6E1)+ccab2*t162440*t162443*t162390*t162393* \
                   t162386-ccab4*t162451*1.0/(t162408*t162408*t162408)*t162439*t162395*t162396*2.0-ccab2*t162443*t162446* \
                   t162393*t162394*1.0/(t162399*t162399*t162399)*2.0+ccab1*gamma_bb[index]*t162432*t162452*t162393*t162386* \
                   (4.0/3.0)-ccab2*gamma_bb[index]*t162432*t162453*t162393*t162386*(4.0/3.0)+ccab2*gamma_bb[index]*t162440* \
                   t162432*t162390*t162446*t162393*(8.0/3.0)+ccab2*gamma_bb[index]*t162440*t162432*t162394*t162386*t162395* \
                   (4.0/3.0)-ccab4*gamma_bb[index]*t162432*t162463*t162394*t162386*t162395*8.0+ccab3*gcab*t162433*t162461* \
                   t162393*t162394*t162386*(3.0/2.0)+ccab4*t162451*t162434*t162390*t162394*t162386*t162395*2.0+ccab3* \
                   gcab*t162433*t162390*t162393*t162394*(gamma_bb[index]*t162432*t162393*t162386*4.0+gamma_bb[index]* \
                   gcab*t162432*t162390*t162393*t162386*4.0)-ccab1*gamma_bb[index]*gcab*t162432*t162390*1.0/(t162392* \
                   t162392*t162392)*t162393*t162386*(4.0/3.0)-ccab3*gcab*1.0/(t162403*t162403*t162403)*t162461*t162390* \
                   t162393*t162394*t162457*2.0-ccab3*gamma_bb[index]*gcab*t162432*t162390*t162462*t162393*t162386*4.0+ \
                   ccab3*gamma_bb[index]*gcab*t162432*t162433*t162393*t162394*t162457*4.0+ccab4*gamma_bb[index]*t162432* \
                   t162434*t162390*t162394*t162439*t162395*(1.6E1/3.0))-(t162430+t162314+t162431+rho_b[index]*(-t162378+ \
                   t162382*t162289*(t162378-(1.0/(t162354*t162354)*t162385*(b2f*c*t162355*(1.0/3.0)+b4f*t162271*t162361* \
                   (2.0/3.0)+b1f*c*t162362*t162355*(1.0/6.0)+b3f*c*t162355*t162347*(1.0/2.0)))/t162365+a1f*c*c0f*t162355* \
                   t162383*(2.0/3.0)-a1p*c*c0p*t162355*t162379*(2.0/3.0))+a1p*c*c0p*t162355*t162379*(2.0/3.0))-t162264* \
                   (t162409-t162324*t162282*t162318*t162319+t162303*t162312*t162315*t162342*t162289+t162303*t162315*t162325* \
                   t162308*t162289*4.0-t162312*t162315*t162308*t162289*(t162409-t162324*t162282*t162318*t162319+(t162301* \
                   1.0/(t162295*t162295)*(b2f*c*t162276*(1.0/3.0)+b4f*t162271*t162316*(2.0/3.0)+b1f*c*t162317*t162276* \
                   (1.0/6.0)+b3f*c*t162267*t162276*(1.0/2.0)))/t162298-a1f*c*c0f*t162276*t162299*(2.0/3.0))+t162303*t162312* \
                   t162308*t162283*t162284*t162289*4.0+Aa*t162308*t162326*t162336*t162338*t162289*(t162315*t162325*4.0+ \
                   t162312*t162283*t162284*4.0)*2.0+Aa*t162342*t162326*t162344*t162336*t162338*t162289*2.0-(1.0/(t162332* \
                   t162332)*t162308*t162326*t162344*t162338*t162289*(b2a*c*t162276*(1.0/3.0)+b4a*t162271*t162316*(2.0/ \
                   3.0)+b1a*c*t162317*t162276*(1.0/6.0)+b3a*c*t162267*t162276*(1.0/2.0)))/t162335+Aa*a1a*c*t162308*t162326* \
                   t162344*t162336*t162276*t162289*(2.0/3.0))-c0p*t162370*t162379*2.0-t162382*t162428*t162289)*((ccab1* \
                   gcab*t162386*(1.0/2.0))/t162392-ccab2*t162440*t162446*t162393*t162394-ccab1*t162452*t162390*t162393* \
                   t162386*(1.0/2.0)+ccab2*t162390*t162453*t162393*t162386-ccab4*t162434*t162439*t162395*t162396+ccab4* \
                   t162390*t162463*t162394*t162386*t162395*2.0+ccab3*gcab*t162462*t162393*t162394*t162386*(3.0/2.0)-ccab3* \
                   gcab*t162433*t162390*t162393*t162394*t162457);
            } else if (rho_a[index] > cutoff_) {
                v_rho_b_gamma_aa_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_b_gamma_aa_[index] = 0.0;
            } else {
                v_rho_b_gamma_aa_[index] = 0.0;
            } 

            //V_rho_b_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_b_gamma_ab_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_b_gamma_ab_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_b_gamma_ab_[index] = 0.0;
            } else {
                v_rho_b_gamma_ab_[index] = 0.0;
            } 

            //V_rho_b_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t162466 = 1.0/pow(rho_b[index],1.0/3.0);
                double t162467 = c*t162466;
                double t162468 = sqrt(t162467);
                double t162469 = pow(t162467,3.0/2.0);
                double t162470 = c*c;
                double t162471 = 1.0/pow(rho_b[index],2.0/3.0);
                double t162472 = 1.0/c0p;
                double t162473 = b1p*t162468;
                double t162474 = b3p*t162469;
                double t162475 = b4p*t162470*t162471;
                double t162476 = b2p*c*t162466;
                double t162477 = t162473+t162474+t162475+t162476;
                double t162478 = 1.0/t162477;
                double t162479 = t162472*t162478*(1.0/2.0);
                double t162480 = t162479+1.0;
                double t162481 = log(t162480);
                double t162482 = a1p*c*t162466;
                double t162483 = t162482+1.0;
                double t162484 = 1.0/pow(rho_b[index],8.0/3.0);
                double t162485 = gamma_bb[index]*gamma_bb[index];
                double t162486 = gcaa*gcaa;
                double t162487 = t162486*t162486;
                double t162488 = 1.0/pow(rho_b[index],3.2E1/3.0);
                double t162489 = 1.0/pow(rho_b[index],1.6E1/3.0);
                double t162490 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]);
                double t162491 = gamma_bb[index]*gcaa*t162484;
                double t162492 = t162491+1.0;
                double t162493 = gamma_bb[index]*gcaa*t162484*3.0;
                double t162494 = gamma_bb[index]*gcaa*t162490*t162485*t162486;
                double t162495 = t162485*t162486*t162489*3.0;
                double t162496 = t162493+t162494+t162495+1.0;
                double t162497 = t162485*t162485;
                double t162498 = gamma_bb[index]*gcaa*t162484*4.0;
                double t162499 = gamma_bb[index]*gcaa*t162490*t162485*t162486*4.0;
                double t162500 = t162485*t162486*t162489*6.0;
                double t162501 = t162487*t162488*t162497;
                double t162502 = t162500+t162501+t162498+t162499+1.0;
                double t162503 = gamma_bb[index]*gcaa*t162484*2.0;
                double t162504 = t162485*t162486*t162489;
                double t162505 = t162503+t162504+1.0;
                double t162506 = rho_a[index]+rho_b[index];
                double t162507 = 1.0/pow(t162506,1.0/3.0);
                double t162508 = c*t162507;
                double t162509 = sqrt(t162508);
                double t162510 = b1p*t162509;
                double t162511 = pow(t162508,3.0/2.0);
                double t162512 = b3p*t162511;
                double t162513 = 1.0/pow(t162506,2.0/3.0);
                double t162514 = b4p*t162513*t162470;
                double t162515 = b2p*c*t162507;
                double t162516 = t162510+t162512+t162514+t162515;
                double t162517 = 1.0/pow(t162506,4.0/3.0);
                double t162518 = two_13*2.0;
                double t162519 = t162518-2.0;
                double t162520 = 1.0/t162519;
                double t162521 = 1.0/c0f;
                double t162522 = 1.0/t162516;
                double t162523 = t162522*t162472*(1.0/2.0);
                double t162524 = t162523+1.0;
                double t162525 = a1p*c*t162507;
                double t162526 = t162525+1.0;
                double t162527 = rho_a[index]-rho_b[index];
                double t162528 = t162527*t162527;
                double t162529 = 1.0/t162506;
                double t162530 = t162527*t162529;
                double t162531 = b1f*t162509;
                double t162532 = b3f*t162511;
                double t162533 = b4f*t162513*t162470;
                double t162534 = b2f*c*t162507;
                double t162535 = t162531+t162532+t162533+t162534;
                double t162536 = 1.0/t162535;
                double t162537 = t162521*t162536*(1.0/2.0);
                double t162538 = t162537+1.0;
                double t162539 = log(t162538);
                double t162540 = a1f*c*t162507;
                double t162541 = t162540+1.0;
                double t162542 = log(t162524);
                double t162553 = c0f*t162541*t162539*2.0;
                double t162554 = c0p*t162542*t162526*2.0;
                double t162543 = t162553-t162554;
                double t162544 = t162530+1.0;
                double t162545 = pow(t162544,4.0/3.0);
                double t162546 = -t162530+1.0;
                double t162547 = pow(t162546,4.0/3.0);
                double t162548 = t162545+t162547-2.0;
                double t162549 = 1.0/(t162506*t162506);
                double t162550 = t162527*t162549;
                double t162551 = t162550+t162529;
                double t162552 = 1.0/(t162506*t162506*t162506*t162506);
                double t162555 = t162528*t162528;
                double t162556 = 1.0/pow(t162506,5.0/3.0);
                double t162557 = 1.0/sqrt(t162508);
                double t162558 = 1.0/t162524;
                double t162559 = 1.0/(t162516*t162516);
                double t162560 = b4p*t162470*t162556*(2.0/3.0);
                double t162561 = b2p*c*t162517*(1.0/3.0);
                double t162562 = b1p*c*t162517*t162557*(1.0/6.0);
                double t162563 = b3p*c*t162517*t162509*(1.0/2.0);
                double t162564 = t162560+t162561+t162562+t162563;
                double t162565 = 1.0/(t162506*t162506*t162506*t162506*t162506);
                double t162566 = 1.0/d2fz0;
                double t162567 = 1.0/Aa;
                double t162568 = b1a*t162509;
                double t162569 = b3a*t162511;
                double t162570 = b4a*t162513*t162470;
                double t162571 = b2a*c*t162507;
                double t162572 = t162570+t162571+t162568+t162569;
                double t162573 = 1.0/t162572;
                double t162574 = t162573*t162567*(1.0/2.0);
                double t162575 = t162574+1.0;
                double t162576 = log(t162575);
                double t162577 = a1a*c*t162507;
                double t162578 = t162577+1.0;
                double t162579 = pow(t162544,1.0/3.0);
                double t162580 = t162551*t162579*(4.0/3.0);
                double t162581 = pow(t162546,1.0/3.0);
                double t162582 = t162580-t162551*t162581*(4.0/3.0);
                double t162583 = t162552*t162555;
                double t162584 = t162583-1.0;
                double t162585 = pow(2.0,1.0/3.0);
                double t162586 = t162585*2.0;
                double t162587 = t162586-2.0;
                double t162588 = a1f*c*t162466;
                double t162589 = t162588+1.0;
                double t162590 = b1f*t162468;
                double t162591 = b3f*t162469;
                double t162592 = b4f*t162470*t162471;
                double t162593 = b2f*c*t162466;
                double t162594 = t162590+t162591+t162592+t162593;
                double t162595 = 1.0/t162594;
                double t162596 = t162521*t162595*(1.0/2.0);
                double t162597 = t162596+1.0;
                double t162598 = 1.0/pow(rho_b[index],4.0/3.0);
                double t162599 = 1.0/pow(rho_b[index],5.0/3.0);
                double t162600 = 1.0/sqrt(t162467);
                double t162601 = log(t162597);
                double t162602 = 1.0/t162480;
                double t162603 = 1.0/(t162477*t162477);
                double t162604 = b4p*t162470*t162599*(2.0/3.0);
                double t162605 = b2p*c*t162598*(1.0/3.0);
                double t162606 = b1p*c*t162600*t162598*(1.0/6.0);
                double t162607 = b3p*c*t162468*t162598*(1.0/2.0);
                double t162608 = t162604+t162605+t162606+t162607;
                double t162609 = t162602*t162603*t162608*t162483;
                double t162610 = c0f*t162601*t162589*2.0;
                double t162611 = c0p*t162481*t162483*2.0;
                double t162612 = 1.0/pow(rho_a[index],8.0/3.0);
                double t162613 = gamma_aa[index]*t162612*(1.0/2.0);
                double t162614 = gamma_bb[index]*t162484*(1.0/2.0);
                double t162615 = t162613+t162614;
                double t162616 = gcab*t162615;
                double t162617 = t162616+1.0;
                double t162618 = gcab*gcab;
                double t162619 = t162615*t162615;
                double t162620 = t162618*t162618;
                double t162621 = t162619*t162619;
                double t162622 = t162618*t162619;
                double t162623 = gcab*t162615*2.0;
                double t162624 = t162622+t162623+1.0;
                double t162625 = t162618*t162619*3.0;
                double t162626 = gcab*t162615*t162618*t162619;
                double t162627 = gcab*t162615*3.0;
                double t162628 = t162625+t162626+t162627+1.0;
                double t162629 = t162618*t162619*6.0;
                double t162630 = gcab*t162615*t162618*t162619*4.0;
                double t162631 = t162620*t162621;
                double t162632 = gcab*t162615*4.0;
                double t162633 = t162630+t162631+t162632+t162629+1.0;
                double t162634 = a1p*c*c0p*t162542*t162517*(2.0/3.0);
                double t162635 = 1.0/pow(rho_a[index],1.0/3.0);
                double t162636 = c*t162635;
                double t162637 = sqrt(t162636);
                double t162638 = pow(t162636,3.0/2.0);
                double t162639 = 1.0/pow(rho_a[index],2.0/3.0);
                double t162640 = b1p*t162637;
                double t162641 = b3p*t162638;
                double t162642 = b4p*t162470*t162639;
                double t162643 = b2p*c*t162635;
                double t162644 = t162640+t162641+t162642+t162643;
                double t162645 = 1.0/t162644;
                double t162646 = t162472*t162645*(1.0/2.0);
                double t162647 = t162646+1.0;
                double t162648 = log(t162647);
                double t162649 = a1p*c*t162635;
                double t162650 = t162649+1.0;
                double t162651 = c0p*t162650*t162648*2.0;
                double t162652 = t162610-t162611;
                double t162653 = t162520*t162543*t162552*t162555*t162548;
                double t162654 = Aa*t162520*t162548*t162566*t162584*t162576*t162578*2.0;
                double t162655 = 1.0/t162617;
                double t162656 = 1.0/pow(rho_b[index],1.1E1/3.0);
                double t162657 = 1.0/(t162617*t162617);
                double t162658 = 1.0/t162624;
                double t162659 = 1.0/(t162628*t162628);
                double t162660 = 1.0/pow(rho_b[index],1.9E1/3.0);
                double t162661 = 1.0/(t162624*t162624);
                double t162662 = 1.0/t162628;
                double t162663 = 1.0/t162633;
                double t162664 = 1.0/(t162633*t162633);
                double t162665 = gcab*t162484*2.0;
                double t162666 = t162615*t162618*t162484*6.0;
                double t162667 = gcab*t162618*t162484*t162619*6.0;
                double t162668 = t162620*t162615*t162484*t162619*2.0;
                double t162669 = t162665+t162666+t162667+t162668;
                double t162670 = gamma_bb[index]*gcab*t162656*(8.0/3.0);
                double t162671 = gamma_bb[index]*t162615*t162618*t162656*(8.0/3.0);
                double t162672 = t162670+t162671;
                double t162673 = gcab*t162484;
                double t162674 = t162615*t162618*t162484;
                double t162675 = t162673+t162674;
                double t162676 = gamma_bb[index]*gcab*t162656*(1.6E1/3.0);
                double t162677 = gamma_bb[index]*gcab*t162618*t162619*t162656*1.6E1;
                double t162678 = gamma_bb[index]*t162620*t162615*t162619*t162656*(1.6E1/3.0);
                double t162679 = gamma_bb[index]*t162615*t162618*t162656*1.6E1;
                double t162680 = t162676+t162677+t162678+t162679;
                double t162681 = gcab*t162484*(3.0/2.0);
                double t162682 = t162615*t162618*t162484*3.0;
                double t162683 = gcab*t162618*t162484*t162619*(3.0/2.0);
                double t162684 = t162681+t162682+t162683;
                double t162685 = gamma_bb[index]*gcab*t162656*4.0;
                double t162686 = gamma_bb[index]*gcab*t162618*t162619*t162656*4.0;
                double t162687 = gamma_bb[index]*t162615*t162618*t162656*8.0;
                double t162688 = t162685+t162686+t162687;
                double t162689 = t162520*t162652*t162587;
                double t162690 = t162611+t162689;
                double t162691 = 1.0/t162492;
                double t162692 = 1.0/t162502;
                double t162693 = 1.0/t162505;
                double t162694 = 1.0/t162496;
                double t162695 = 1.0/(t162492*t162492);
                double t162696 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]*rho_b[index]);
                double t162697 = 1.0/(t162496*t162496);
                double t162698 = 1.0/(t162505*t162505);
                double t162699 = gcaa*t162484*3.0;
                double t162700 = gamma_bb[index]*t162486*t162489*6.0;
                double t162701 = gcaa*t162490*t162485*t162486*3.0;
                double t162702 = t162700+t162701+t162699;
                double t162703 = 1.0/pow(rho_b[index],3.5E1/3.0);
                double t162704 = 1.0/(t162502*t162502);
                double t162705 = gcaa*t162484*4.0;
                double t162706 = gamma_bb[index]*t162486*t162489*1.2E1;
                double t162707 = gcaa*t162490*t162485*t162486*1.2E1;
                double t162708 = gamma_bb[index]*t162485*t162487*t162488*4.0;
                double t162709 = t162705+t162706+t162707+t162708;
                double t162710 = gcaa*t162484*2.0;
                double t162711 = gamma_bb[index]*t162486*t162489*2.0;
                double t162712 = t162710+t162711;
                double t162713 = gamma_bb[index]*gcaa*t162656*(1.6E1/3.0);
                double t162714 = t162660*t162485*t162486*(1.6E1/3.0);
                double t162715 = t162713+t162714;
                double t162716 = gamma_bb[index]*gcaa*t162656*8.0;
                double t162717 = gamma_bb[index]*gcaa*t162485*t162486*t162696*8.0;
                double t162718 = t162660*t162485*t162486*1.6E1;
                double t162719 = t162716+t162717+t162718;
                double t162720 = gamma_bb[index]*gcaa*t162656*(3.2E1/3.0);
                double t162721 = gamma_bb[index]*gcaa*t162485*t162486*t162696*3.2E1;
                double t162722 = t162660*t162485*t162486*3.2E1;
                double t162723 = t162703*t162487*t162497*(3.2E1/3.0);
                double t162724 = t162720+t162721+t162722+t162723;
                double t162725 = 1.0/t162597;
                double t162726 = 1.0/(t162594*t162594);
                double t162727 = b4f*t162470*t162599*(2.0/3.0);
                double t162728 = b2f*c*t162598*(1.0/3.0);
                double t162729 = b1f*c*t162600*t162598*(1.0/6.0);
                double t162730 = b3f*c*t162468*t162598*(1.0/2.0);
                double t162731 = t162730+t162727+t162728+t162729;
                double t162732 = a1f*c*c0f*t162601*t162598*(2.0/3.0);
                double t162733 = a1p*c*c0p*t162481*t162598*(2.0/3.0);
                double t162734 = ccaa1*gcaa*t162484*t162691;
                double t162735 = ccaa4*gamma_bb[index]*t162485*t162692*t162487*t162488*4.0;
                double t162736 = ccaa2*gamma_bb[index]*t162486*t162693*t162489*2.0;
                double t162737 = ccaa3*gcaa*t162490*t162485*t162486*t162694*3.0;
                double t162738 = t162734+t162735+t162736+t162737-ccaa1*gamma_bb[index]*t162486*t162695*t162489-ccaa4* \
                   t162704*t162709*t162487*t162488*t162497-ccaa2*t162712*t162485*t162486*t162489*t162698-ccaa3*gamma_bb[index]* \
                   gcaa*t162702*t162490*t162485*t162486*t162697;
                double t162739 = rho_b[index]*(8.334140006820045E15/1.40737488355328E14);
                double t162740 = 1.0/pow(t162739,1.0/3.0);
                double t162741 = 1.0/(omega*omega);
                double t162742 = pow(t162739,2.0/3.0);
                double t162792 = t162741*t162742;
                double t162743 = exp(-t162792);
                double t162744 = gx*gx;
                double t162745 = t162744*t162744;
                double t162746 = gamma_bb[index]*gx*t162484;
                double t162747 = t162746+1.0;
                double t162748 = gamma_bb[index]*gx*t162484*3.0;
                double t162749 = gamma_bb[index]*gx*t162490*t162744*t162485;
                double t162750 = t162744*t162485*t162489*3.0;
                double t162751 = t162750+t162748+t162749+1.0;
                double t162752 = gamma_bb[index]*gx*t162484*2.0;
                double t162753 = t162744*t162485*t162489;
                double t162754 = t162752+t162753+1.0;
                double t162755 = 1.0/(t162751*t162751);
                double t162756 = gamma_bb[index]*gx*t162484*4.0;
                double t162757 = gamma_bb[index]*gx*t162490*t162744*t162485*4.0;
                double t162758 = t162744*t162485*t162489*6.0;
                double t162759 = t162745*t162488*t162497;
                double t162760 = t162756+t162757+t162758+t162759+1.0;
                double t162761 = 1.0/(t162760*t162760);
                double t162762 = 1.0/(t162754*t162754);
                double t162763 = gamma_bb[index]*gx*t162656*(1.6E1/3.0);
                double t162764 = t162660*t162744*t162485*(1.6E1/3.0);
                double t162765 = t162763+t162764;
                double t162766 = gx*t162484*2.0;
                double t162767 = gamma_bb[index]*t162744*t162489*2.0;
                double t162768 = t162766+t162767;
                double t162769 = gx*t162484*3.0;
                double t162770 = gamma_bb[index]*t162744*t162489*6.0;
                double t162771 = gx*t162490*t162744*t162485*3.0;
                double t162772 = t162770+t162771+t162769;
                double t162773 = gamma_bb[index]*gx*t162656*8.0;
                double t162774 = gamma_bb[index]*gx*t162744*t162485*t162696*8.0;
                double t162775 = t162660*t162744*t162485*1.6E1;
                double t162776 = t162773+t162774+t162775;
                double t162777 = gamma_bb[index]*gx*t162656*(3.2E1/3.0);
                double t162778 = gamma_bb[index]*gx*t162744*t162485*t162696*3.2E1;
                double t162779 = t162660*t162744*t162485*3.2E1;
                double t162780 = t162703*t162745*t162497*(3.2E1/3.0);
                double t162781 = t162780+t162777+t162778+t162779;
                double t162782 = gx*t162484*4.0;
                double t162783 = gamma_bb[index]*t162744*t162489*1.2E1;
                double t162784 = gx*t162490*t162744*t162485*1.2E1;
                double t162785 = gamma_bb[index]*t162745*t162485*t162488*4.0;
                double t162786 = t162782+t162783+t162784+t162785;
                double t162787 = 1.0/omega;
                double t162788 = pow(t162739,1.0/3.0);
                double t162789 = t162787*t162788;
                double t162790 = erf(t162789);
                double t162791 = t162790*(3.991211251234741E15/2.251799813685248E15);
                double t162793 = omega*omega;
                double t162794 = 1.0/pow(t162739,2.0/3.0);
                double t162795 = t162743-1.0;
                double t162796 = t162793*t162794*t162795*(1.0/2.0);
                double t162797 = -t162743+t162796+3.0/2.0;
                double t162808 = omega*t162740*t162797;
                double t162798 = -t162808+t162791;
                double t162799 = omega*t162740*t162798*(4.0/3.0);
                double t162800 = t162799-1.0;
                double t162801 = 1.0/t162747;
                double t162802 = 1.0/t162760;
                double t162803 = 1.0/t162754;
                double t162804 = 1.0/t162751;
                double t162805 = 1.0/(t162747*t162747);
                double t162806 = pow(rho_b[index],4.0/3.0);
                double t162807 = 1.0/pow(t162739,4.0/3.0);
                double t162809 = cx1*gx*t162801*t162484;
                double t162810 = cx4*gamma_bb[index]*t162802*t162745*t162485*t162488*4.0;
                double t162811 = cx2*gamma_bb[index]*t162803*t162744*t162489*2.0;
                double t162812 = cx3*gx*t162804*t162490*t162744*t162485*3.0;
                double t162813 = t162810+t162811+t162812+t162809-cx1*gamma_bb[index]*t162805*t162744*t162489-cx2* \
                   t162744*t162762*t162485*t162489*t162768-cx4*t162761*t162745*t162488*t162497*t162786-cx3*gamma_bb[index]* \
                   gx*t162490*t162744*t162772*t162485*t162755;
                v_rho_b_gamma_bb_[index] = -(rho_b[index]*t162690+rho_a[index]*(t162651-t162520*t162587*(t162651- \
                   c0f*log((t162521*(1.0/2.0))/(b1f*t162637+b3f*t162638+b2f*c*t162635+b4f*t162470*t162639)+1.0)*(a1f* \
                   c*t162635+1.0)*2.0))-t162506*(t162554+t162653+t162654))*(ccab1*gcab*t162655*t162656*(4.0/3.0)-ccab2* \
                   t162661*t162618*t162619*(gcab*t162656*(8.0/3.0)+gamma_bb[index]*t162660*t162618*(4.0/3.0)+t162615* \
                   t162618*t162656*(8.0/3.0))-ccab4*t162620*t162621*t162664*(gcab*t162656*(1.6E1/3.0)+gamma_bb[index]* \
                   t162660*t162618*8.0+t162615*t162618*t162656*1.6E1+gamma_bb[index]*t162620*t162660*t162619*8.0+gcab* \
                   t162618*t162619*t162656*1.6E1+t162620*t162615*t162619*t162656*(1.6E1/3.0)+gamma_bb[index]*gcab*t162615* \
                   t162660*t162618*1.6E1)-ccab1*gamma_bb[index]*t162660*t162618*t162657*(4.0/3.0)+ccab2*gamma_bb[index]* \
                   t162660*t162618*t162658*(4.0/3.0)-ccab1*t162615*t162618*t162656*t162657*(4.0/3.0)+ccab2*t162615*t162618* \
                   t162656*t162658*(8.0/3.0)+ccab4*t162620*t162615*t162663*t162619*t162656*(1.6E1/3.0)-ccab2*t162615* \
                   t162661*t162618*t162672*t162484+ccab4*t162620*t162621*1.0/(t162633*t162633*t162633)*t162680*t162669* \
                   2.0+ccab2*1.0/(t162624*t162624*t162624)*t162618*t162672*t162619*t162675*2.0+ccab4*gamma_bb[index]* \
                   t162620*t162660*t162663*t162619*8.0+ccab3*gcab*t162662*t162618*t162619*t162656*4.0+ccab3*gamma_bb[index]* \
                   gcab*t162615*t162660*t162662*t162618*4.0-ccab2*gamma_bb[index]*t162615*t162661*t162618*t162656*t162675* \
                   (8.0/3.0)-ccab3*gcab*t162618*t162484*t162619*t162659*t162688*(3.0/2.0)-ccab4*t162620*t162615*t162680* \
                   t162484*t162619*t162664*2.0-ccab3*gcab*t162615*t162618*t162619*t162659*(gcab*t162656*4.0+gamma_bb[index]* \
                   t162660*t162618*4.0+t162615*t162618*t162656*8.0+gcab*t162618*t162619*t162656*4.0+gamma_bb[index]*gcab* \
                   t162615*t162660*t162618*4.0)+ccab1*gamma_bb[index]*gcab*t162615*t162660*1.0/(t162617*t162617*t162617) \
                   *t162618*(4.0/3.0)+ccab3*gcab*t162615*t162618*t162619*1.0/(t162628*t162628*t162628)*t162684*t162688* \
                   2.0-ccab3*gamma_bb[index]*gcab*t162618*t162619*t162656*t162684*t162659*4.0-ccab4*gamma_bb[index]*t162620* \
                   t162615*t162619*t162664*t162656*t162669*(1.6E1/3.0))-(-t162611+t162554+t162653+t162654+rho_b[index]* \
                   (t162733-t162609+t162520*t162587*(t162732+t162609-t162731*t162725*t162726*t162589-a1p*c*c0p*t162481* \
                   t162598*(2.0/3.0)))-t162506*(t162634-t162526*t162564*t162558*t162559+t162520*t162543*t162552*t162555* \
                   t162582+t162520*t162543*t162555*t162565*t162548*4.0-t162520*t162552*t162555*t162548*(t162634-t162526* \
                   t162564*t162558*t162559+(t162541*1.0/(t162535*t162535)*(b2f*c*t162517*(1.0/3.0)+b4f*t162470*t162556* \
                   (2.0/3.0)+b1f*c*t162517*t162557*(1.0/6.0)+b3f*c*t162517*t162509*(1.0/2.0)))/t162538-a1f*c*c0f*t162517* \
                   t162539*(2.0/3.0))+t162520*t162543*t162552*t162527*t162528*t162548*4.0+Aa*t162520*t162548*t162566* \
                   t162576*t162578*(t162555*t162565*4.0+t162552*t162527*t162528*4.0)*2.0+Aa*t162520*t162582*t162566*t162584* \
                   t162576*t162578*2.0-(t162520*1.0/(t162572*t162572)*t162548*t162566*t162584*t162578*(b2a*c*t162517* \
                   (1.0/3.0)+b4a*t162470*t162556*(2.0/3.0)+b1a*c*t162517*t162557*(1.0/6.0)+b3a*c*t162517*t162509*(1.0/ \
                   2.0)))/t162575+Aa*a1a*c*t162520*t162517*t162548*t162566*t162584*t162576*(2.0/3.0))-t162520*t162652* \
                   t162587)*(ccab1*gcab*t162484*t162655*(1.0/2.0)-ccab4*t162620*t162621*t162664*t162669-ccab1*t162615* \
                   t162618*t162484*t162657*(1.0/2.0)+ccab2*t162615*t162618*t162484*t162658-ccab2*t162661*t162618*t162619* \
                   t162675+ccab4*t162620*t162615*t162663*t162484*t162619*2.0+ccab3*gcab*t162662*t162618*t162484*t162619* \
                   (3.0/2.0)-ccab3*gcab*t162615*t162618*t162619*t162684*t162659)-t162738*(t162611+t162520*t162587*(t162610- \
                   c0p*t162481*t162483*2.0))-rho_b[index]*t162690*(ccaa1*gcaa*t162691*t162656*(-8.0/3.0)-ccaa2*gamma_bb[index]* \
                   t162660*t162486*t162693*(3.2E1/3.0)+ccaa1*gamma_bb[index]*t162660*t162486*t162695*8.0+ccaa4*t162703* \
                   t162704*t162709*t162487*t162497*(3.2E1/3.0)+ccaa2*t162712*t162660*t162485*t162486*t162698*(1.6E1/3.0) \
                   +ccaa4*t162704*t162487*t162488*t162497*(gcaa*t162656*(3.2E1/3.0)+gamma_bb[index]*t162660*t162486*6.4E1+ \
                   gamma_bb[index]*t162703*t162485*t162487*(1.28E2/3.0)+gcaa*t162485*t162486*t162696*9.6E1)-ccaa1*gcaa* \
                   1.0/(t162492*t162492*t162492)*t162485*t162486*t162696*(1.6E1/3.0)+ccaa2*t162485*t162486*t162489*t162698* \
                   (gcaa*t162656*(1.6E1/3.0)+gamma_bb[index]*t162660*t162486*(3.2E1/3.0))-ccaa4*gamma_bb[index]*t162703* \
                   t162485*t162692*t162487*(1.28E2/3.0)+ccaa2*gamma_bb[index]*t162715*t162486*t162489*t162698*2.0-ccaa3* \
                   gcaa*t162485*t162486*t162694*t162696*2.4E1+ccaa4*gamma_bb[index]*t162704*t162724*t162485*t162487*t162488* \
                   4.0+ccaa3*gcaa*t162490*t162485*t162719*t162486*t162697*3.0-ccaa2*1.0/(t162505*t162505*t162505)*t162712* \
                   t162715*t162485*t162486*t162489*2.0-ccaa4*1.0/(t162502*t162502*t162502)*t162724*t162709*t162487*t162488* \
                   t162497*2.0+ccaa3*gamma_bb[index]*gcaa*t162490*t162485*t162486*t162697*(gcaa*t162656*8.0+gamma_bb[index]* \
                   t162660*t162486*3.2E1+gcaa*t162485*t162486*t162696*2.4E1)+ccaa3*gamma_bb[index]*gcaa*t162702*t162485* \
                   t162486*t162696*t162697*8.0-ccaa3*gamma_bb[index]*gcaa*t162702*t162490*t162485*t162719*t162486*1.0/ \
                   (t162496*t162496*t162496)*2.0)+rho_b[index]*t162738*(t162733-t162609+t162520*t162587*(t162732-t162733+ \
                   t162609-t162731*t162725*t162726*t162589))-c0*t162813*t162806*(omega*t162740*(omega*t162807*t162797* \
                   (2.778046668940015E15/1.40737488355328E14)+omega*t162740*((t162743*(1.0/3.0))/rho_b[index]+1.0/pow(t162739,5.0/ \
                   3.0)*t162793*t162795*(2.778046668940015E15/1.40737488355328E14)-t162740*t162741*t162743*(2.778046668940015E15/ \
                   7.0368744177664E13))+1.0/sqrt(3.141592653589793)*t162743*t162794*t162787*(1.108777112152858E31/1.584563250285287E29) \
                   )*(4.0/3.0)-omega*t162807*t162798*(2.778046668940015E15/1.05553116266496E14))-c0*t162800*t162806*(cx1* \
                   gx*t162801*t162656*(-8.0/3.0)+cx1*gamma_bb[index]*t162660*t162805*t162744*8.0-cx2*gamma_bb[index]* \
                   t162803*t162660*t162744*(3.2E1/3.0)+cx2*t162660*t162744*t162762*t162485*t162768*(1.6E1/3.0)+cx4*t162703* \
                   t162761*t162745*t162497*t162786*(3.2E1/3.0)+cx4*t162761*t162745*t162488*t162497*(gx*t162656*(3.2E1/ \
                   3.0)+gamma_bb[index]*t162660*t162744*6.4E1+gamma_bb[index]*t162703*t162745*t162485*(1.28E2/3.0)+gx* \
                   t162744*t162485*t162696*9.6E1)-cx1*gx*t162744*t162485*1.0/(t162747*t162747*t162747)*t162696*(1.6E1/ \
                   3.0)+cx2*t162744*t162762*t162485*t162489*(gx*t162656*(1.6E1/3.0)+gamma_bb[index]*t162660*t162744*(3.2E1/ \
                   3.0))+cx2*gamma_bb[index]*t162744*t162762*t162765*t162489*2.0-cx4*gamma_bb[index]*t162703*t162802* \
                   t162745*t162485*(1.28E2/3.0)-cx3*gx*t162804*t162744*t162485*t162696*2.4E1+cx4*gamma_bb[index]*t162761* \
                   t162745*t162781*t162485*t162488*4.0+cx3*gx*t162490*t162744*t162485*t162755*t162776*3.0-cx2*t162744* \
                   1.0/(t162754*t162754*t162754)*t162485*t162765*t162489*t162768*2.0-cx4*1.0/(t162760*t162760*t162760) \
                   *t162745*t162781*t162488*t162497*t162786*2.0+cx3*gamma_bb[index]*gx*t162490*t162744*t162485*t162755* \
                   (gx*t162656*8.0+gamma_bb[index]*t162660*t162744*3.2E1+gx*t162744*t162485*t162696*2.4E1)+cx3*gamma_bb[index]* \
                   gx*t162744*t162772*t162485*t162755*t162696*8.0-cx3*gamma_bb[index]*gx*t162490*1.0/(t162751*t162751* \
                   t162751)*t162744*t162772*t162485*t162776*2.0)-c0*pow(rho_b[index],1.0/3.0)*t162800*t162813*(4.0/3.0) \
                   ;
            } else if (rho_a[index] > cutoff_) {
                v_rho_b_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                double t163800 = 1.0/pow(rho_b[index],1.0/3.0);
                double t163801 = c*t163800;
                double t163802 = sqrt(t163801);
                double t163803 = pow(t163801,3.0/2.0);
                double t163804 = c*c;
                double t163805 = 1.0/pow(rho_b[index],2.0/3.0);
                double t163806 = 1.0/c0p;
                double t163807 = b1p*t163802;
                double t163808 = b3p*t163803;
                double t163809 = b4p*t163804*t163805;
                double t163810 = b2p*c*t163800;
                double t163811 = t163810+t163807+t163808+t163809;
                double t163812 = 1.0/t163811;
                double t163813 = t163812*t163806*(1.0/2.0);
                double t163814 = t163813+1.0;
                double t163815 = log(t163814);
                double t163816 = a1p*c*t163800;
                double t163817 = t163816+1.0;
                double t163818 = 1.0/pow(rho_b[index],8.0/3.0);
                double t163819 = gamma_bb[index]*gamma_bb[index];
                double t163820 = gcaa*gcaa;
                double t163821 = t163820*t163820;
                double t163822 = 1.0/pow(rho_b[index],3.2E1/3.0);
                double t163823 = 1.0/pow(rho_b[index],1.6E1/3.0);
                double t163824 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]);
                double t163825 = gamma_bb[index]*gcaa*t163818;
                double t163826 = t163825+1.0;
                double t163827 = gamma_bb[index]*gcaa*t163818*3.0;
                double t163828 = gamma_bb[index]*gcaa*t163820*t163824*t163819;
                double t163829 = t163820*t163823*t163819*3.0;
                double t163830 = t163827+t163828+t163829+1.0;
                double t163831 = t163819*t163819;
                double t163832 = gamma_bb[index]*gcaa*t163818*4.0;
                double t163833 = gamma_bb[index]*gcaa*t163820*t163824*t163819*4.0;
                double t163834 = t163820*t163823*t163819*6.0;
                double t163835 = t163821*t163822*t163831;
                double t163836 = t163832+t163833+t163834+t163835+1.0;
                double t163837 = gamma_bb[index]*gcaa*t163818*2.0;
                double t163838 = t163820*t163823*t163819;
                double t163839 = t163837+t163838+1.0;
                double t163840 = pow(2.0,1.0/3.0);
                double t163841 = t163840*2.0;
                double t163842 = t163841-2.0;
                double t163843 = two_13*2.0;
                double t163844 = t163843-2.0;
                double t163845 = 1.0/t163844;
                double t163846 = 1.0/c0f;
                double t163847 = b1f*t163802;
                double t163848 = b3f*t163803;
                double t163849 = b4f*t163804*t163805;
                double t163850 = b2f*c*t163800;
                double t163851 = t163850+t163847+t163848+t163849;
                double t163852 = 1.0/t163851;
                double t163853 = t163852*t163846*(1.0/2.0);
                double t163854 = t163853+1.0;
                double t163855 = log(t163854);
                double t163856 = a1f*c*t163800;
                double t163857 = t163856+1.0;
                double t163858 = c0f*t163855*t163857*2.0;
                double t163859 = c0p*t163815*t163817*2.0;
                double t163860 = 1.0/t163826;
                double t163861 = 1.0/t163836;
                double t163862 = 1.0/t163839;
                double t163863 = 1.0/t163830;
                double t163864 = 1.0/pow(rho_b[index],1.9E1/3.0);
                double t163865 = 1.0/(t163826*t163826);
                double t163866 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]*rho_b[index]);
                double t163867 = 1.0/pow(rho_b[index],1.1E1/3.0);
                double t163868 = 1.0/(t163830*t163830);
                double t163869 = 1.0/(t163839*t163839);
                double t163870 = gcaa*t163818*3.0;
                double t163871 = gamma_bb[index]*t163820*t163823*6.0;
                double t163872 = gcaa*t163820*t163824*t163819*3.0;
                double t163873 = t163870+t163871+t163872;
                double t163874 = 1.0/pow(rho_b[index],3.5E1/3.0);
                double t163875 = 1.0/(t163836*t163836);
                double t163876 = gcaa*t163818*4.0;
                double t163877 = gamma_bb[index]*t163820*t163823*1.2E1;
                double t163878 = gcaa*t163820*t163824*t163819*1.2E1;
                double t163879 = gamma_bb[index]*t163821*t163822*t163819*4.0;
                double t163880 = t163876+t163877+t163878+t163879;
                double t163881 = gcaa*t163818*2.0;
                double t163882 = gamma_bb[index]*t163820*t163823*2.0;
                double t163883 = t163881+t163882;
                double t163884 = gamma_bb[index]*gcaa*t163867*(1.6E1/3.0);
                double t163885 = t163820*t163819*t163864*(1.6E1/3.0);
                double t163886 = t163884+t163885;
                double t163887 = gamma_bb[index]*gcaa*t163867*8.0;
                double t163888 = gamma_bb[index]*gcaa*t163820*t163819*t163866*8.0;
                double t163889 = t163820*t163819*t163864*1.6E1;
                double t163890 = t163887+t163888+t163889;
                double t163891 = gamma_bb[index]*gcaa*t163867*(3.2E1/3.0);
                double t163892 = gamma_bb[index]*gcaa*t163820*t163819*t163866*3.2E1;
                double t163893 = t163820*t163819*t163864*3.2E1;
                double t163894 = t163821*t163831*t163874*(3.2E1/3.0);
                double t163895 = t163891+t163892+t163893+t163894;
                double t163896 = 1.0/pow(rho_b[index],4.0/3.0);
                double t163897 = 1.0/pow(rho_b[index],5.0/3.0);
                double t163898 = 1.0/sqrt(t163801);
                double t163899 = 1.0/t163814;
                double t163900 = 1.0/(t163811*t163811);
                double t163901 = b4p*t163804*t163897*(2.0/3.0);
                double t163902 = b2p*c*t163896*(1.0/3.0);
                double t163903 = b1p*c*t163896*t163898*(1.0/6.0);
                double t163904 = b3p*c*t163802*t163896*(1.0/2.0);
                double t163905 = t163901+t163902+t163903+t163904;
                double t163906 = t163900*t163905*t163817*t163899;
                double t163907 = ccaa1*gcaa*t163860*t163818;
                double t163908 = ccaa4*gamma_bb[index]*t163821*t163822*t163861*t163819*4.0;
                double t163909 = ccaa2*gamma_bb[index]*t163820*t163823*t163862*2.0;
                double t163910 = ccaa3*gcaa*t163820*t163824*t163863*t163819*3.0;
                double t163911 = t163910+t163907+t163908+t163909-ccaa1*gamma_bb[index]*t163820*t163823*t163865-ccaa4* \
                   t163821*t163822*t163831*t163880*t163875-ccaa2*t163820*t163823*t163819*t163883*t163869-ccaa3*gamma_bb[index]* \
                   gcaa*t163820*t163824*t163819*t163873*t163868;
                double t163912 = rho_b[index]*(8.334140006820045E15/1.40737488355328E14);
                double t163913 = 1.0/pow(t163912,1.0/3.0);
                double t163914 = 1.0/(omega*omega);
                double t163915 = pow(t163912,2.0/3.0);
                double t163965 = t163914*t163915;
                double t163916 = exp(-t163965);
                double t163917 = gx*gx;
                double t163918 = t163917*t163917;
                double t163919 = gamma_bb[index]*gx*t163818;
                double t163920 = t163919+1.0;
                double t163921 = gamma_bb[index]*gx*t163818*3.0;
                double t163922 = gamma_bb[index]*gx*t163824*t163917*t163819;
                double t163923 = t163823*t163917*t163819*3.0;
                double t163924 = t163921+t163922+t163923+1.0;
                double t163925 = gamma_bb[index]*gx*t163818*2.0;
                double t163926 = t163823*t163917*t163819;
                double t163927 = t163925+t163926+1.0;
                double t163928 = 1.0/(t163924*t163924);
                double t163929 = gamma_bb[index]*gx*t163818*4.0;
                double t163930 = gamma_bb[index]*gx*t163824*t163917*t163819*4.0;
                double t163931 = t163823*t163917*t163819*6.0;
                double t163932 = t163822*t163831*t163918;
                double t163933 = t163930+t163931+t163932+t163929+1.0;
                double t163934 = 1.0/(t163933*t163933);
                double t163935 = 1.0/(t163927*t163927);
                double t163936 = gamma_bb[index]*gx*t163867*(1.6E1/3.0);
                double t163937 = t163917*t163819*t163864*(1.6E1/3.0);
                double t163938 = t163936+t163937;
                double t163939 = gx*t163818*2.0;
                double t163940 = gamma_bb[index]*t163823*t163917*2.0;
                double t163941 = t163940+t163939;
                double t163942 = gx*t163818*3.0;
                double t163943 = gamma_bb[index]*t163823*t163917*6.0;
                double t163944 = gx*t163824*t163917*t163819*3.0;
                double t163945 = t163942+t163943+t163944;
                double t163946 = gamma_bb[index]*gx*t163867*8.0;
                double t163947 = gamma_bb[index]*gx*t163917*t163819*t163866*8.0;
                double t163948 = t163917*t163819*t163864*1.6E1;
                double t163949 = t163946+t163947+t163948;
                double t163950 = gamma_bb[index]*gx*t163867*(3.2E1/3.0);
                double t163951 = gamma_bb[index]*gx*t163917*t163819*t163866*3.2E1;
                double t163952 = t163917*t163819*t163864*3.2E1;
                double t163953 = t163831*t163918*t163874*(3.2E1/3.0);
                double t163954 = t163950+t163951+t163952+t163953;
                double t163955 = gx*t163818*4.0;
                double t163956 = gamma_bb[index]*t163823*t163917*1.2E1;
                double t163957 = gx*t163824*t163917*t163819*1.2E1;
                double t163958 = gamma_bb[index]*t163822*t163819*t163918*4.0;
                double t163959 = t163955+t163956+t163957+t163958;
                double t163960 = 1.0/omega;
                double t163961 = pow(t163912,1.0/3.0);
                double t163962 = t163960*t163961;
                double t163963 = erf(t163962);
                double t163964 = t163963*(3.991211251234741E15/2.251799813685248E15);
                double t163966 = omega*omega;
                double t163967 = 1.0/pow(t163912,2.0/3.0);
                double t163968 = t163916-1.0;
                double t163969 = t163966*t163967*t163968*(1.0/2.0);
                double t163970 = -t163916+t163969+3.0/2.0;
                double t163981 = omega*t163913*t163970;
                double t163971 = -t163981+t163964;
                double t163972 = omega*t163913*t163971*(4.0/3.0);
                double t163973 = t163972-1.0;
                double t163974 = 1.0/t163920;
                double t163975 = 1.0/t163933;
                double t163976 = 1.0/t163927;
                double t163977 = 1.0/t163924;
                double t163978 = 1.0/(t163920*t163920);
                double t163979 = pow(rho_b[index],4.0/3.0);
                double t163980 = 1.0/pow(t163912,4.0/3.0);
                double t163982 = cx1*gx*t163818*t163974;
                double t163983 = cx4*gamma_bb[index]*t163822*t163819*t163918*t163975*4.0;
                double t163984 = cx2*gamma_bb[index]*t163823*t163917*t163976*2.0;
                double t163985 = cx3*gx*t163824*t163917*t163819*t163977*3.0;
                double t163986 = t163982+t163983+t163984+t163985-cx1*gamma_bb[index]*t163823*t163917*t163978-cx2* \
                   t163823*t163941*t163917*t163935*t163819-cx4*t163822*t163831*t163934*t163918*t163959-cx3*gamma_bb[index]* \
                   gx*t163824*t163917*t163819*t163945*t163928;
                v_rho_b_gamma_bb_[index] = -t163911*(t163859+t163842*t163845*(t163858-c0p*t163815*t163817*2.0))+rho_b[index]* \
                   t163911*(-t163906+t163842*t163845*(t163906-(1.0/(t163851*t163851)*t163857*(b2f*c*t163896*(1.0/3.0) \
                   +b4f*t163804*t163897*(2.0/3.0)+b1f*c*t163896*t163898*(1.0/6.0)+b3f*c*t163802*t163896*(1.0/2.0)))/t163854+ \
                   a1f*c*c0f*t163855*t163896*(2.0/3.0)-a1p*c*c0p*t163815*t163896*(2.0/3.0))+a1p*c*c0p*t163815*t163896* \
                   (2.0/3.0))-rho_b[index]*(t163859+t163842*t163845*(t163858-t163859))*(ccaa1*gcaa*t163860*t163867*(- \
                   8.0/3.0)-ccaa2*gamma_bb[index]*t163820*t163862*t163864*(3.2E1/3.0)+ccaa1*gamma_bb[index]*t163820*t163864* \
                   t163865*8.0+ccaa4*t163821*t163831*t163880*t163874*t163875*(3.2E1/3.0)+ccaa2*t163820*t163819*t163864* \
                   t163883*t163869*(1.6E1/3.0)+ccaa4*t163821*t163822*t163831*t163875*(gcaa*t163867*(3.2E1/3.0)+gamma_bb[index]* \
                   t163820*t163864*6.4E1+gamma_bb[index]*t163821*t163819*t163874*(1.28E2/3.0)+gcaa*t163820*t163819*t163866* \
                   9.6E1)-ccaa1*gcaa*t163820*1.0/(t163826*t163826*t163826)*t163819*t163866*(1.6E1/3.0)+ccaa2*t163820* \
                   t163823*t163819*t163869*(gcaa*t163867*(1.6E1/3.0)+gamma_bb[index]*t163820*t163864*(3.2E1/3.0))-ccaa4* \
                   gamma_bb[index]*t163821*t163861*t163819*t163874*(1.28E2/3.0)+ccaa2*gamma_bb[index]*t163820*t163823* \
                   t163886*t163869*2.0-ccaa3*gcaa*t163820*t163863*t163819*t163866*2.4E1+ccaa4*gamma_bb[index]*t163821* \
                   t163822*t163819*t163875*t163895*4.0+ccaa3*gcaa*t163820*t163824*t163890*t163819*t163868*3.0-ccaa4*t163821* \
                   t163822*t163831*t163880*1.0/(t163836*t163836*t163836)*t163895*2.0-ccaa2*t163820*t163823*t163819*t163883* \
                   1.0/(t163839*t163839*t163839)*t163886*2.0+ccaa3*gamma_bb[index]*gcaa*t163820*t163824*t163819*t163868* \
                   (gcaa*t163867*8.0+gamma_bb[index]*t163820*t163864*3.2E1+gcaa*t163820*t163819*t163866*2.4E1)+ccaa3* \
                   gamma_bb[index]*gcaa*t163820*t163819*t163873*t163866*t163868*8.0-ccaa3*gamma_bb[index]*gcaa*t163820* \
                   1.0/(t163830*t163830*t163830)*t163824*t163890*t163819*t163873*2.0)-c0*t163986*t163979*(omega*t163913* \
                   (omega*t163970*t163980*(2.778046668940015E15/1.40737488355328E14)+omega*t163913*((t163916*(1.0/3.0) \
                   )/rho_b[index]+1.0/pow(t163912,5.0/3.0)*t163966*t163968*(2.778046668940015E15/1.40737488355328E14) \
                   -t163913*t163914*t163916*(2.778046668940015E15/7.0368744177664E13))+1.0/sqrt(3.141592653589793)*t163960* \
                   t163916*t163967*(1.108777112152858E31/1.584563250285287E29))*(4.0/3.0)-omega*t163971*t163980*(2.778046668940015E15/ \
                   1.05553116266496E14))-c0*t163973*t163979*(cx1*gx*t163974*t163867*(-8.0/3.0)+cx1*gamma_bb[index]*t163917* \
                   t163864*t163978*8.0-cx2*gamma_bb[index]*t163917*t163864*t163976*(3.2E1/3.0)+cx2*t163941*t163917*t163935* \
                   t163819*t163864*(1.6E1/3.0)+cx4*t163831*t163934*t163918*t163874*t163959*(3.2E1/3.0)+cx4*t163822*t163831* \
                   t163934*t163918*(gx*t163867*(3.2E1/3.0)+gamma_bb[index]*t163917*t163864*6.4E1+gamma_bb[index]*t163819* \
                   t163918*t163874*(1.28E2/3.0)+gx*t163917*t163819*t163866*9.6E1)-cx1*gx*1.0/(t163920*t163920*t163920) \
                   *t163917*t163819*t163866*(1.6E1/3.0)+cx2*t163823*t163917*t163935*t163819*(gx*t163867*(1.6E1/3.0)+gamma_bb[index]* \
                   t163917*t163864*(3.2E1/3.0))+cx2*gamma_bb[index]*t163823*t163917*t163935*t163938*2.0-cx4*gamma_bb[index]* \
                   t163819*t163918*t163874*t163975*(1.28E2/3.0)-cx3*gx*t163917*t163819*t163866*t163977*2.4E1+cx4*gamma_bb[index]* \
                   t163822*t163934*t163819*t163918*t163954*4.0+cx3*gx*t163824*t163917*t163819*t163928*t163949*3.0-cx2* \
                   t163823*t163941*t163917*t163819*1.0/(t163927*t163927*t163927)*t163938*2.0-cx4*t163822*t163831*1.0/ \
                   (t163933*t163933*t163933)*t163918*t163954*t163959*2.0+cx3*gamma_bb[index]*gx*t163824*t163917*t163819* \
                   t163928*(gx*t163867*8.0+gamma_bb[index]*t163917*t163864*3.2E1+gx*t163917*t163819*t163866*2.4E1)+cx3* \
                   gamma_bb[index]*gx*t163917*t163819*t163945*t163928*t163866*8.0-cx3*gamma_bb[index]*gx*t163824*1.0/ \
                   (t163924*t163924*t163924)*t163917*t163819*t163945*t163949*2.0)-c0*pow(rho_b[index],1.0/3.0)*t163973* \
                   t163986*(4.0/3.0);
            } else {
                v_rho_b_gamma_bb_[index] = 0.0;
            } 

            //V_gamma_aa_gamma_aa
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t162815 = 1.0/pow(rho_a[index],1.0/3.0);
                double t162816 = c*t162815;
                double t162817 = sqrt(t162816);
                double t162818 = pow(t162816,3.0/2.0);
                double t162819 = c*c;
                double t162820 = 1.0/pow(rho_a[index],2.0/3.0);
                double t162821 = 1.0/c0p;
                double t162822 = b1p*t162817;
                double t162823 = b3p*t162818;
                double t162824 = b4p*t162820*t162819;
                double t162825 = b2p*c*t162815;
                double t162826 = t162822+t162823+t162824+t162825;
                double t162827 = 1.0/t162826;
                double t162828 = t162821*t162827*(1.0/2.0);
                double t162829 = t162828+1.0;
                double t162830 = log(t162829);
                double t162831 = a1p*c*t162815;
                double t162832 = t162831+1.0;
                double t162833 = pow(2.0,1.0/3.0);
                double t162834 = t162833*2.0;
                double t162835 = t162834-2.0;
                double t162836 = two_13*2.0;
                double t162837 = t162836-2.0;
                double t162838 = 1.0/t162837;
                double t162839 = 1.0/c0f;
                double t162840 = 1.0/pow(rho_b[index],1.0/3.0);
                double t162841 = c*t162840;
                double t162842 = sqrt(t162841);
                double t162843 = pow(t162841,3.0/2.0);
                double t162844 = 1.0/pow(rho_b[index],2.0/3.0);
                double t162845 = b1p*t162842;
                double t162846 = b3p*t162843;
                double t162847 = b4p*t162844*t162819;
                double t162848 = b2p*c*t162840;
                double t162849 = t162845+t162846+t162847+t162848;
                double t162850 = 1.0/t162849;
                double t162851 = t162821*t162850*(1.0/2.0);
                double t162852 = t162851+1.0;
                double t162853 = log(t162852);
                double t162854 = a1p*c*t162840;
                double t162855 = t162854+1.0;
                double t162856 = c0p*t162853*t162855*2.0;
                double t162857 = rho_a[index]+rho_b[index];
                double t162858 = 1.0/pow(t162857,1.0/3.0);
                double t162859 = c*t162858;
                double t162860 = sqrt(t162859);
                double t162861 = pow(t162859,3.0/2.0);
                double t162862 = 1.0/pow(t162857,2.0/3.0);
                double t162863 = b1p*t162860;
                double t162864 = b3p*t162861;
                double t162865 = b4p*t162862*t162819;
                double t162866 = b2p*c*t162858;
                double t162867 = t162863+t162864+t162865+t162866;
                double t162868 = 1.0/t162867;
                double t162869 = t162821*t162868*(1.0/2.0);
                double t162870 = t162869+1.0;
                double t162871 = log(t162870);
                double t162872 = a1p*c*t162858;
                double t162873 = t162872+1.0;
                double t162874 = c0p*t162871*t162873*2.0;
                double t162875 = rho_a[index]-rho_b[index];
                double t162876 = t162875*t162875;
                double t162877 = 1.0/t162857;
                double t162878 = t162875*t162877;
                double t162879 = 1.0/(t162857*t162857*t162857*t162857);
                double t162880 = t162876*t162876;
                double t162881 = t162878+1.0;
                double t162882 = pow(t162881,4.0/3.0);
                double t162883 = -t162878+1.0;
                double t162884 = pow(t162883,4.0/3.0);
                double t162885 = t162882+t162884-2.0;
                double t162886 = gcab*gcab;
                double t162887 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t162888 = 1.0/pow(rho_a[index],8.0/3.0);
                double t162889 = gamma_aa[index]*t162888*(1.0/2.0);
                double t162890 = 1.0/pow(rho_b[index],8.0/3.0);
                double t162891 = gamma_bb[index]*t162890*(1.0/2.0);
                double t162892 = t162891+t162889;
                double t162893 = gcab*t162892;
                double t162894 = t162893+1.0;
                double t162895 = t162892*t162892;
                double t162896 = t162886*t162895;
                double t162897 = gcab*t162892*2.0;
                double t162898 = t162896+t162897+1.0;
                double t162899 = t162886*t162886;
                double t162916 = gcab*t162888*2.0;
                double t162917 = t162892*t162886*t162888*6.0;
                double t162918 = gcab*t162886*t162895*t162888*6.0;
                double t162919 = t162892*t162895*t162888*t162899*2.0;
                double t162900 = t162916+t162917+t162918+t162919;
                double t162901 = t162895*t162895;
                double t162921 = gcab*t162888*(3.0/2.0);
                double t162922 = t162892*t162886*t162888*3.0;
                double t162923 = gcab*t162886*t162895*t162888*(3.0/2.0);
                double t162902 = t162921+t162922+t162923;
                double t162903 = t162886*t162895*3.0;
                double t162904 = gcab*t162892*t162886*t162895;
                double t162905 = gcab*t162892*3.0;
                double t162906 = t162903+t162904+t162905+1.0;
                double t162913 = gcab*t162888;
                double t162914 = t162892*t162886*t162888;
                double t162907 = t162913+t162914;
                double t162908 = t162886*t162895*6.0;
                double t162909 = gcab*t162892*t162886*t162895*4.0;
                double t162910 = t162901*t162899;
                double t162911 = gcab*t162892*4.0;
                double t162912 = t162910+t162911+t162908+t162909+1.0;
                double t162915 = 1.0/(t162898*t162898);
                double t162920 = 1.0/(t162912*t162912);
                double t162924 = 1.0/(t162906*t162906);
                double t162925 = b1f*t162817;
                double t162926 = b3f*t162818;
                double t162927 = b4f*t162820*t162819;
                double t162928 = b2f*c*t162815;
                double t162929 = t162925+t162926+t162927+t162928;
                double t162930 = 1.0/t162929;
                double t162931 = t162930*t162839*(1.0/2.0);
                double t162932 = t162931+1.0;
                double t162933 = log(t162932);
                double t162934 = a1f*c*t162815;
                double t162935 = t162934+1.0;
                double t162936 = c0f*t162933*t162935*2.0;
                double t162937 = c0p*t162830*t162832*2.0;
                double t162938 = gcaa*gcaa;
                double t162939 = gamma_aa[index]*gamma_aa[index];
                double t162940 = t162938*t162938;
                double t162941 = 1.0/pow(rho_a[index],3.2E1/3.0);
                double t162942 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t162943 = gamma_aa[index]*gcaa*t162888;
                double t162944 = t162943+1.0;
                double t162945 = gamma_aa[index]*gcaa*t162888*2.0;
                double t162946 = t162938*t162939*t162887;
                double t162947 = t162945+t162946+1.0;
                double t162948 = gamma_aa[index]*gcaa*t162888*3.0;
                double t162949 = gamma_aa[index]*gcaa*t162942*t162938*t162939;
                double t162950 = t162938*t162939*t162887*3.0;
                double t162951 = t162950+t162948+t162949+1.0;
                double t162952 = t162939*t162939;
                double t162968 = gcaa*t162888*4.0;
                double t162969 = gamma_aa[index]*t162938*t162887*1.2E1;
                double t162970 = gcaa*t162942*t162938*t162939*1.2E1;
                double t162971 = gamma_aa[index]*t162940*t162941*t162939*4.0;
                double t162953 = t162970+t162971+t162968+t162969;
                double t162954 = gamma_aa[index]*gcaa*t162888*4.0;
                double t162955 = gamma_aa[index]*gcaa*t162942*t162938*t162939*4.0;
                double t162956 = t162938*t162939*t162887*6.0;
                double t162957 = t162940*t162941*t162952;
                double t162958 = t162954+t162955+t162956+t162957+1.0;
                double t162961 = gcaa*t162888*2.0;
                double t162962 = gamma_aa[index]*t162938*t162887*2.0;
                double t162959 = t162961+t162962;
                double t162960 = 1.0/(t162951*t162951);
                double t162963 = 1.0/(t162947*t162947);
                double t162964 = gcaa*t162888*3.0;
                double t162965 = gamma_aa[index]*t162938*t162887*6.0;
                double t162966 = gcaa*t162942*t162938*t162939*3.0;
                double t162967 = t162964+t162965+t162966;
                double t162972 = 1.0/(t162958*t162958);
                double t162973 = rho_a[index]*(8.334140006820045E15/1.40737488355328E14);
                double t162974 = 1.0/pow(t162973,1.0/3.0);
                double t162975 = 1.0/(omega*omega);
                double t162976 = pow(t162973,2.0/3.0);
                double t162977 = exp(-t162975*t162976);
                double t162978 = gx*gx;
                double t162979 = t162978*t162978;
                double t162980 = gamma_aa[index]*gx*t162888;
                double t162981 = t162980+1.0;
                double t162982 = gamma_aa[index]*gx*t162888*2.0;
                double t162983 = t162939*t162887*t162978;
                double t162984 = t162982+t162983+1.0;
                double t162985 = gamma_aa[index]*gx*t162888*3.0;
                double t162986 = gamma_aa[index]*gx*t162942*t162939*t162978;
                double t162987 = t162939*t162887*t162978*3.0;
                double t162988 = t162985+t162986+t162987+1.0;
                double t163004 = gx*t162888*4.0;
                double t163005 = gamma_aa[index]*t162887*t162978*1.2E1;
                double t163006 = gx*t162942*t162939*t162978*1.2E1;
                double t163007 = gamma_aa[index]*t162941*t162939*t162979*4.0;
                double t162989 = t163004+t163005+t163006+t163007;
                double t162990 = gamma_aa[index]*gx*t162888*4.0;
                double t162991 = gamma_aa[index]*gx*t162942*t162939*t162978*4.0;
                double t162992 = t162939*t162887*t162978*6.0;
                double t162993 = t162941*t162952*t162979;
                double t162994 = t162990+t162991+t162992+t162993+1.0;
                double t162997 = gx*t162888*2.0;
                double t162998 = gamma_aa[index]*t162887*t162978*2.0;
                double t162995 = t162997+t162998;
                double t162996 = 1.0/(t162988*t162988);
                double t162999 = 1.0/(t162984*t162984);
                double t163000 = gx*t162888*3.0;
                double t163001 = gamma_aa[index]*t162887*t162978*6.0;
                double t163002 = gx*t162942*t162939*t162978*3.0;
                double t163003 = t163000+t163001+t163002;
                double t163008 = 1.0/(t162994*t162994);
                v_gamma_aa_gamma_aa_[index] = -(rho_a[index]*(t162937+t162835*t162838*(t162936-c0p*t162830*t162832* \
                   2.0))+rho_b[index]*(t162856-t162835*t162838*(t162856-c0f*log((t162839*(1.0/2.0))/(b1f*t162842+b3f* \
                   t162843+b2f*c*t162840+b4f*t162844*t162819)+1.0)*(a1f*c*t162840+1.0)*2.0))-t162857*(t162874-t162880* \
                   t162838*t162885*t162879*(t162874-c0f*log((t162839*(1.0/2.0))/(b1f*t162860+b3f*t162861+b2f*c*t162858+ \
                   b4f*t162862*t162819)+1.0)*(a1f*c*t162858+1.0)*2.0)+(Aa*t162838*t162885*log((1.0/2.0)/(Aa*(b1a*t162860+ \
                   b3a*t162861+b2a*c*t162858+b4a*t162862*t162819))+1.0)*(t162880*t162879-1.0)*(a1a*c*t162858+1.0)*2.0) \
                   /d2fz0))*(ccab1*1.0/(t162894*t162894)*t162886*t162887*(1.0/2.0)-(ccab2*t162886*t162887*(1.0/2.0))/ \
                   t162898-ccab4*(t162900*t162900)*t162901*1.0/(t162912*t162912*t162912)*t162899*2.0-ccab2*(t162907*t162907) \
                   *t162886*t162895*1.0/(t162898*t162898*t162898)*2.0+ccab2*t162915*t162895*t162887*t162899*(1.0/2.0) \
                   +ccab4*t162901*t162920*t162899*(t162886*t162887*3.0+t162895*t162887*t162899*3.0+gcab*t162892*t162886* \
                   t162887*6.0)-(ccab4*t162895*t162887*t162899*3.0)/t162912+ccab2*t162915*t162907*t162892*t162886*t162888* \
                   2.0-(ccab3*gcab*t162892*t162886*t162887*(3.0/2.0))/t162906-ccab1*gcab*t162892*1.0/(t162894*t162894* \
                   t162894)*t162886*t162887*(1.0/2.0)-ccab3*gcab*(t162902*t162902)*1.0/(t162906*t162906*t162906)*t162892* \
                   t162886*t162895*2.0+ccab3*gcab*t162902*t162924*t162886*t162895*t162888*3.0+ccab4*t162900*t162920*t162892* \
                   t162895*t162888*t162899*4.0+ccab3*gcab*t162924*t162892*t162886*t162895*(t162886*t162887*(3.0/2.0)+ \
                   gcab*t162892*t162886*t162887*(3.0/2.0)))+rho_a[index]*(t162937+t162835*t162838*(t162936-t162937))* \
                   (ccaa1*1.0/(t162944*t162944)*t162938*t162887*2.0-(ccaa2*t162938*t162887*2.0)/t162947+ccaa2*t162940* \
                   t162941*t162963*t162939*2.0-(ccaa4*t162940*t162941*t162939*1.2E1)/t162958+ccaa4*t162940*t162941*t162952* \
                   t162972*(t162938*t162887*1.2E1+t162940*t162941*t162939*1.2E1+gamma_aa[index]*gcaa*t162942*t162938* \
                   2.4E1)-(ccaa3*gamma_aa[index]*gcaa*t162942*t162938*6.0)/t162951-ccaa1*gamma_aa[index]*gcaa*t162942* \
                   1.0/(t162944*t162944*t162944)*t162938*2.0-ccaa4*t162940*t162941*t162952*(t162953*t162953)*1.0/(t162958* \
                   t162958*t162958)*2.0-ccaa2*t162938*1.0/(t162947*t162947*t162947)*t162939*t162887*(t162959*t162959) \
                   *2.0+ccaa2*gamma_aa[index]*t162963*t162938*t162887*t162959*4.0+ccaa4*gamma_aa[index]*t162940*t162941* \
                   t162953*t162972*t162939*8.0+ccaa3*gcaa*t162942*t162960*t162938*t162939*t162967*6.0+ccaa3*gamma_aa[index]* \
                   gcaa*t162942*t162960*t162938*t162939*(t162938*t162887*6.0+gamma_aa[index]*gcaa*t162942*t162938*6.0) \
                   -ccaa3*gamma_aa[index]*gcaa*t162942*1.0/(t162951*t162951*t162951)*t162938*t162939*(t162967*t162967) \
                   *2.0)+c0*pow(rho_a[index],4.0/3.0)*(omega*t162974*(erf(pow(t162973,1.0/3.0)/omega)*(3.991211251234741E15/ \
                   2.251799813685248E15)-omega*t162974*(-t162977+(omega*omega)*1.0/pow(t162973,2.0/3.0)*(t162977-1.0) \
                   *(1.0/2.0)+3.0/2.0))*(4.0/3.0)-1.0)*(cx1*1.0/(t162981*t162981)*t162887*t162978*2.0-(cx2*t162887*t162978* \
                   2.0)/t162984+cx2*t162941*t162939*t162979*t162999*2.0-(cx4*t162941*t162939*t162979*1.2E1)/t162994+cx4* \
                   t163008*t162941*t162952*t162979*(t162887*t162978*1.2E1+t162941*t162939*t162979*1.2E1+gamma_aa[index]* \
                   gx*t162942*t162978*2.4E1)-cx1*gamma_aa[index]*gx*t162942*1.0/(t162981*t162981*t162981)*t162978*2.0- \
                   (cx3*gamma_aa[index]*gx*t162942*t162978*6.0)/t162988-cx2*t162939*1.0/(t162984*t162984*t162984)*t162887* \
                   (t162995*t162995)*t162978*2.0-cx4*t162941*t162952*1.0/(t162994*t162994*t162994)*t162979*(t162989*t162989) \
                   *2.0+cx2*gamma_aa[index]*t162887*t162995*t162978*t162999*4.0+cx4*gamma_aa[index]*t163008*t162941*t162939* \
                   t162979*t162989*8.0+cx3*gx*t163003*t162942*t162939*t162978*t162996*6.0+cx3*gamma_aa[index]*gx*t162942* \
                   t162939*t162978*t162996*(t162887*t162978*6.0+gamma_aa[index]*gx*t162942*t162978*6.0)-cx3*gamma_aa[index]* \
                   gx*(t163003*t163003)*t162942*t162939*t162978*1.0/(t162988*t162988*t162988)*2.0);
            } else if (rho_a[index] > cutoff_) {
                double t164743 = 1.0/pow(rho_a[index],1.0/3.0);
                double t164744 = c*t164743;
                double t164745 = sqrt(t164744);
                double t164746 = pow(t164744,3.0/2.0);
                double t164747 = c*c;
                double t164748 = 1.0/pow(rho_a[index],2.0/3.0);
                double t164749 = 1.0/c0p;
                double t164750 = b1p*t164745;
                double t164751 = b3p*t164746;
                double t164752 = b4p*t164747*t164748;
                double t164753 = b2p*c*t164743;
                double t164754 = t164750+t164751+t164752+t164753;
                double t164755 = 1.0/t164754;
                double t164756 = t164755*t164749*(1.0/2.0);
                double t164757 = t164756+1.0;
                double t164758 = log(t164757);
                double t164759 = a1p*c*t164743;
                double t164760 = t164759+1.0;
                double t164761 = gcaa*gcaa;
                double t164762 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t164763 = 1.0/pow(rho_a[index],8.0/3.0);
                double t164764 = gamma_aa[index]*gamma_aa[index];
                double t164765 = t164761*t164761;
                double t164766 = 1.0/pow(rho_a[index],3.2E1/3.0);
                double t164767 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t164768 = gamma_aa[index]*gcaa*t164763;
                double t164769 = t164768+1.0;
                double t164770 = gamma_aa[index]*gcaa*t164763*2.0;
                double t164771 = t164761*t164762*t164764;
                double t164772 = t164770+t164771+1.0;
                double t164773 = gamma_aa[index]*gcaa*t164763*3.0;
                double t164774 = gamma_aa[index]*gcaa*t164761*t164764*t164767;
                double t164775 = t164761*t164762*t164764*3.0;
                double t164776 = t164773+t164774+t164775+1.0;
                double t164777 = t164764*t164764;
                double t164793 = gcaa*t164763*4.0;
                double t164794 = gamma_aa[index]*t164761*t164762*1.2E1;
                double t164795 = gcaa*t164761*t164764*t164767*1.2E1;
                double t164796 = gamma_aa[index]*t164764*t164765*t164766*4.0;
                double t164778 = t164793+t164794+t164795+t164796;
                double t164779 = gamma_aa[index]*gcaa*t164763*4.0;
                double t164780 = gamma_aa[index]*gcaa*t164761*t164764*t164767*4.0;
                double t164781 = t164761*t164762*t164764*6.0;
                double t164782 = t164765*t164766*t164777;
                double t164783 = t164780+t164781+t164782+t164779+1.0;
                double t164786 = gcaa*t164763*2.0;
                double t164787 = gamma_aa[index]*t164761*t164762*2.0;
                double t164784 = t164786+t164787;
                double t164785 = 1.0/(t164776*t164776);
                double t164788 = 1.0/(t164772*t164772);
                double t164789 = gcaa*t164763*3.0;
                double t164790 = gamma_aa[index]*t164761*t164762*6.0;
                double t164791 = gcaa*t164761*t164764*t164767*3.0;
                double t164792 = t164790+t164791+t164789;
                double t164797 = 1.0/(t164783*t164783);
                double t164798 = rho_a[index]*(8.334140006820045E15/1.40737488355328E14);
                double t164799 = 1.0/pow(t164798,1.0/3.0);
                double t164800 = 1.0/(omega*omega);
                double t164801 = pow(t164798,2.0/3.0);
                double t164802 = exp(-t164800*t164801);
                double t164803 = gx*gx;
                double t164804 = t164803*t164803;
                double t164805 = gamma_aa[index]*gx*t164763;
                double t164806 = t164805+1.0;
                double t164807 = gamma_aa[index]*gx*t164763*2.0;
                double t164808 = t164803*t164762*t164764;
                double t164809 = t164807+t164808+1.0;
                double t164810 = gamma_aa[index]*gx*t164763*3.0;
                double t164811 = gamma_aa[index]*gx*t164803*t164764*t164767;
                double t164812 = t164803*t164762*t164764*3.0;
                double t164813 = t164810+t164811+t164812+1.0;
                double t164829 = gx*t164763*4.0;
                double t164830 = gamma_aa[index]*t164803*t164762*1.2E1;
                double t164831 = gx*t164803*t164764*t164767*1.2E1;
                double t164832 = gamma_aa[index]*t164804*t164764*t164766*4.0;
                double t164814 = t164830+t164831+t164832+t164829;
                double t164815 = gamma_aa[index]*gx*t164763*4.0;
                double t164816 = gamma_aa[index]*gx*t164803*t164764*t164767*4.0;
                double t164817 = t164803*t164762*t164764*6.0;
                double t164818 = t164804*t164766*t164777;
                double t164819 = t164815+t164816+t164817+t164818+1.0;
                double t164822 = gx*t164763*2.0;
                double t164823 = gamma_aa[index]*t164803*t164762*2.0;
                double t164820 = t164822+t164823;
                double t164821 = 1.0/(t164813*t164813);
                double t164824 = 1.0/(t164809*t164809);
                double t164825 = gx*t164763*3.0;
                double t164826 = gamma_aa[index]*t164803*t164762*6.0;
                double t164827 = gx*t164803*t164764*t164767*3.0;
                double t164828 = t164825+t164826+t164827;
                double t164833 = 1.0/(t164819*t164819);
                v_gamma_aa_gamma_aa_[index] = -rho_a[index]*(((pow(2.0,1.0/3.0)*2.0-2.0)*(c0f*log((1.0/2.0)/(c0f* \
                   (b1f*t164745+b3f*t164746+b2f*c*t164743+b4f*t164747*t164748))+1.0)*(a1f*c*t164743+1.0)*2.0-c0p*t164760* \
                   t164758*2.0))/(two_13*2.0-2.0)+c0p*t164760*t164758*2.0)*((ccaa2*t164761*t164762*2.0)/t164772-ccaa1* \
                   t164761*t164762*1.0/(t164769*t164769)*2.0-ccaa2*t164764*t164765*t164766*t164788*2.0+(ccaa4*t164764* \
                   t164765*t164766*1.2E1)/t164783-ccaa4*t164765*t164766*t164777*t164797*(t164761*t164762*1.2E1+t164764* \
                   t164765*t164766*1.2E1+gamma_aa[index]*gcaa*t164761*t164767*2.4E1)+(ccaa3*gamma_aa[index]*gcaa*t164761* \
                   t164767*6.0)/t164776+ccaa1*gamma_aa[index]*gcaa*t164761*t164767*1.0/(t164769*t164769*t164769)*2.0+ \
                   ccaa2*t164761*t164762*1.0/(t164772*t164772*t164772)*t164764*(t164784*t164784)*2.0+ccaa4*t164765*1.0/ \
                   (t164783*t164783*t164783)*t164766*t164777*(t164778*t164778)*2.0-ccaa2*gamma_aa[index]*t164761*t164762* \
                   t164784*t164788*4.0-ccaa4*gamma_aa[index]*t164764*t164765*t164766*t164778*t164797*8.0-ccaa3*gcaa*t164761* \
                   t164764*t164792*t164767*t164785*6.0-ccaa3*gamma_aa[index]*gcaa*t164761*t164764*t164767*t164785*(t164761* \
                   t164762*6.0+gamma_aa[index]*gcaa*t164761*t164767*6.0)+ccaa3*gamma_aa[index]*gcaa*t164761*t164764*(t164792* \
                   t164792)*t164767*1.0/(t164776*t164776*t164776)*2.0)+c0*pow(rho_a[index],4.0/3.0)*(omega*t164799*(erf(pow(t164798,1.0/ \
                   3.0)/omega)*(3.991211251234741E15/2.251799813685248E15)-omega*t164799*(-t164802+(omega*omega)*1.0/ \
                   pow(t164798,2.0/3.0)*(t164802-1.0)*(1.0/2.0)+3.0/2.0))*(4.0/3.0)-1.0)*(cx1*t164803*1.0/(t164806*t164806) \
                   *t164762*2.0-(cx2*t164803*t164762*2.0)/t164809+cx2*t164804*t164824*t164764*t164766*2.0-(cx4*t164804* \
                   t164764*t164766*1.2E1)/t164819+cx4*t164804*t164833*t164766*t164777*(t164803*t164762*1.2E1+t164804* \
                   t164764*t164766*1.2E1+gamma_aa[index]*gx*t164803*t164767*2.4E1)-cx1*gamma_aa[index]*gx*t164803*1.0/ \
                   (t164806*t164806*t164806)*t164767*2.0-(cx3*gamma_aa[index]*gx*t164803*t164767*6.0)/t164813-cx2*(t164820* \
                   t164820)*t164803*t164762*t164764*1.0/(t164809*t164809*t164809)*2.0-cx4*t164804*(t164814*t164814)*1.0/ \
                   (t164819*t164819*t164819)*t164766*t164777*2.0+cx2*gamma_aa[index]*t164820*t164803*t164824*t164762* \
                   4.0+cx4*gamma_aa[index]*t164804*t164814*t164833*t164764*t164766*8.0+cx3*gx*t164803*t164821*t164764* \
                   t164828*t164767*6.0+cx3*gamma_aa[index]*gx*t164803*t164821*t164764*t164767*(t164803*t164762*6.0+gamma_aa[index]* \
                   gx*t164803*t164767*6.0)-cx3*gamma_aa[index]*gx*t164803*1.0/(t164813*t164813*t164813)*t164764*(t164828* \
                   t164828)*t164767*2.0);
            } else if (rho_b[index] > cutoff_) {
                v_gamma_aa_gamma_aa_[index] = 0.0;
            } else {
                v_gamma_aa_gamma_aa_[index] = 0.0;
            } 

            //V_gamma_aa_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_aa_gamma_ab_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_aa_gamma_ab_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_aa_gamma_ab_[index] = 0.0;
            } else {
                v_gamma_aa_gamma_ab_[index] = 0.0;
            } 

            //V_gamma_aa_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t163011 = 1.0/pow(rho_a[index],1.0/3.0);
                double t163012 = c*t163011;
                double t163013 = sqrt(t163012);
                double t163014 = pow(t163012,3.0/2.0);
                double t163015 = c*c;
                double t163016 = 1.0/pow(rho_a[index],2.0/3.0);
                double t163017 = 1.0/c0p;
                double t163018 = b1p*t163013;
                double t163019 = b3p*t163014;
                double t163020 = b4p*t163015*t163016;
                double t163021 = b2p*c*t163011;
                double t163022 = t163020+t163021+t163018+t163019;
                double t163023 = 1.0/t163022;
                double t163024 = t163023*t163017*(1.0/2.0);
                double t163025 = t163024+1.0;
                double t163026 = log(t163025);
                double t163027 = a1p*c*t163011;
                double t163028 = t163027+1.0;
                double t163029 = pow(2.0,1.0/3.0);
                double t163030 = t163029*2.0;
                double t163031 = t163030-2.0;
                double t163032 = two_13*2.0;
                double t163033 = t163032-2.0;
                double t163034 = 1.0/t163033;
                double t163035 = 1.0/c0f;
                double t163036 = 1.0/pow(rho_b[index],1.0/3.0);
                double t163037 = c*t163036;
                double t163038 = sqrt(t163037);
                double t163039 = pow(t163037,3.0/2.0);
                double t163040 = 1.0/pow(rho_b[index],2.0/3.0);
                double t163041 = b1p*t163038;
                double t163042 = b3p*t163039;
                double t163043 = b4p*t163040*t163015;
                double t163044 = b2p*c*t163036;
                double t163045 = t163041+t163042+t163043+t163044;
                double t163046 = 1.0/t163045;
                double t163047 = t163017*t163046*(1.0/2.0);
                double t163048 = t163047+1.0;
                double t163049 = log(t163048);
                double t163050 = a1p*c*t163036;
                double t163051 = t163050+1.0;
                double t163052 = c0p*t163051*t163049*2.0;
                double t163053 = rho_a[index]+rho_b[index];
                double t163054 = 1.0/pow(t163053,1.0/3.0);
                double t163055 = c*t163054;
                double t163056 = sqrt(t163055);
                double t163057 = pow(t163055,3.0/2.0);
                double t163058 = 1.0/pow(t163053,2.0/3.0);
                double t163059 = b1p*t163056;
                double t163060 = b3p*t163057;
                double t163061 = b4p*t163015*t163058;
                double t163062 = b2p*c*t163054;
                double t163063 = t163060+t163061+t163062+t163059;
                double t163064 = 1.0/t163063;
                double t163065 = t163017*t163064*(1.0/2.0);
                double t163066 = t163065+1.0;
                double t163067 = log(t163066);
                double t163068 = a1p*c*t163054;
                double t163069 = t163068+1.0;
                double t163070 = c0p*t163067*t163069*2.0;
                double t163071 = rho_a[index]-rho_b[index];
                double t163072 = t163071*t163071;
                double t163073 = 1.0/t163053;
                double t163074 = t163071*t163073;
                double t163075 = 1.0/(t163053*t163053*t163053*t163053);
                double t163076 = t163072*t163072;
                double t163077 = t163074+1.0;
                double t163078 = pow(t163077,4.0/3.0);
                double t163079 = -t163074+1.0;
                double t163080 = pow(t163079,4.0/3.0);
                double t163081 = t163080+t163078-2.0;
                double t163082 = gcab*gcab;
                double t163085 = 1.0/pow(rho_a[index],8.0/3.0);
                double t163086 = 1.0/pow(rho_b[index],8.0/3.0);
                double t163087 = gamma_aa[index]*t163085*(1.0/2.0);
                double t163088 = gamma_bb[index]*t163086*(1.0/2.0);
                double t163083 = t163087+t163088;
                double t163084 = t163083*t163083;
                double t163089 = t163082*t163082;
                double t163090 = t163084*t163084;
                double t163091 = t163082*t163084*3.0;
                double t163092 = gcab*t163082*t163083*t163084;
                double t163093 = gcab*t163083*3.0;
                double t163094 = t163091+t163092+t163093+1.0;
                double t163095 = t163082*t163084;
                double t163096 = gcab*t163083*2.0;
                double t163097 = t163095+t163096+1.0;
                double t163098 = t163082*t163084*6.0;
                double t163099 = gcab*t163082*t163083*t163084*4.0;
                double t163100 = t163090*t163089;
                double t163101 = gcab*t163083*4.0;
                double t163102 = t163100+t163101+t163098+t163099+1.0;
                double t163103 = 1.0/(t163097*t163097);
                double t163104 = gcab*t163085;
                double t163105 = t163082*t163083*t163085;
                double t163106 = t163104+t163105;
                double t163107 = gcab*t163086;
                double t163108 = t163082*t163083*t163086;
                double t163109 = t163107+t163108;
                double t163110 = gcab*t163083;
                double t163111 = t163110+1.0;
                double t163112 = gcab*t163085*2.0;
                double t163113 = t163082*t163083*t163085*6.0;
                double t163114 = gcab*t163082*t163084*t163085*6.0;
                double t163115 = t163083*t163084*t163085*t163089*2.0;
                double t163116 = t163112+t163113+t163114+t163115;
                double t163117 = 1.0/(t163102*t163102);
                double t163118 = gcab*t163086*2.0;
                double t163119 = t163082*t163083*t163086*6.0;
                double t163120 = gcab*t163082*t163084*t163086*6.0;
                double t163121 = t163083*t163084*t163086*t163089*2.0;
                double t163122 = t163120+t163121+t163118+t163119;
                double t163123 = gcab*t163085*(3.0/2.0);
                double t163124 = t163082*t163083*t163085*3.0;
                double t163125 = gcab*t163082*t163084*t163085*(3.0/2.0);
                double t163126 = t163123+t163124+t163125;
                double t163127 = 1.0/(t163094*t163094);
                double t163128 = gcab*t163086*(3.0/2.0);
                double t163129 = t163082*t163083*t163086*3.0;
                double t163130 = gcab*t163082*t163084*t163086*(3.0/2.0);
                double t163131 = t163130+t163128+t163129;
                v_gamma_aa_gamma_bb_[index] = (-rho_b[index]*(t163052-t163031*t163034*(t163052-c0f*log((t163035*(1.0/ \
                   2.0))/(b1f*t163038+b3f*t163039+b2f*c*t163036+b4f*t163040*t163015)+1.0)*(a1f*c*t163036+1.0)*2.0))+t163053* \
                   (t163070-t163034*t163081*t163075*t163076*(t163070-c0f*log((t163035*(1.0/2.0))/(b1f*t163056+b3f*t163057+ \
                   b2f*c*t163054+b4f*t163015*t163058)+1.0)*(a1f*c*t163054+1.0)*2.0)+(Aa*t163034*t163081*log((1.0/2.0) \
                   /(Aa*(b1a*t163056+b3a*t163057+b2a*c*t163054+b4a*t163015*t163058))+1.0)*(t163075*t163076-1.0)*(a1a* \
                   c*t163054+1.0)*2.0)/d2fz0)+rho_a[index]*(t163031*t163034*(c0p*t163026*t163028*2.0-c0f*log((t163035* \
                   (1.0/2.0))/(b1f*t163013+b3f*t163014+b2f*c*t163011+b4f*t163015*t163016)+1.0)*(a1f*c*t163011+1.0)*2.0) \
                   -c0p*t163026*t163028*2.0))*(ccab4*t163090*t163117*t163089*(t163082*t163085*t163086*3.0+t163084*t163085* \
                   t163086*t163089*3.0+gcab*t163082*t163083*t163085*t163086*6.0)+ccab1*1.0/(t163111*t163111)*t163082* \
                   t163085*t163086*(1.0/2.0)-(ccab2*t163082*t163085*t163086*(1.0/2.0))/t163097+ccab2*t163103*t163106* \
                   t163082*t163083*t163086+ccab2*t163103*t163082*t163109*t163083*t163085+ccab2*t163103*t163084*t163085* \
                   t163086*t163089*(1.0/2.0)-ccab4*1.0/(t163102*t163102*t163102)*t163122*t163116*t163090*t163089*2.0- \
                   ccab2*t163106*t163082*t163109*t163084*1.0/(t163097*t163097*t163097)*2.0-(ccab4*t163084*t163085*t163086* \
                   t163089*3.0)/t163102+ccab3*gcab*t163131*t163082*t163127*t163084*t163085*(3.0/2.0)+ccab3*gcab*t163126* \
                   t163082*t163127*t163084*t163086*(3.0/2.0)+ccab4*t163122*t163117*t163083*t163084*t163085*t163089*2.0+ \
                   ccab4*t163116*t163117*t163083*t163084*t163086*t163089*2.0+ccab3*gcab*t163082*t163127*t163083*t163084* \
                   (t163082*t163085*t163086*(3.0/2.0)+gcab*t163082*t163083*t163085*t163086*(3.0/2.0))-ccab1*gcab*1.0/ \
                   (t163111*t163111*t163111)*t163082*t163083*t163085*t163086*(1.0/2.0)-(ccab3*gcab*t163082*t163083*t163085* \
                   t163086*(3.0/2.0))/t163094-ccab3*gcab*t163131*t163126*t163082*t163083*t163084*1.0/(t163094*t163094* \
                   t163094)*2.0);
            } else if (rho_a[index] > cutoff_) {
                v_gamma_aa_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_aa_gamma_bb_[index] = 0.0;
            } else {
                v_gamma_aa_gamma_bb_[index] = 0.0;
            } 

            //V_gamma_ab_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_ab_gamma_ab_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_ab_gamma_ab_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_ab_gamma_ab_[index] = 0.0;
            } else {
                v_gamma_ab_gamma_ab_[index] = 0.0;
            } 

            //V_gamma_ab_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_ab_gamma_bb_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_ab_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_ab_gamma_bb_[index] = 0.0;
            } else {
                v_gamma_ab_gamma_bb_[index] = 0.0;
            } 

            //V_gamma_bb_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t163135 = 1.0/pow(rho_a[index],1.0/3.0);
                double t163136 = c*t163135;
                double t163137 = sqrt(t163136);
                double t163138 = pow(t163136,3.0/2.0);
                double t163139 = c*c;
                double t163140 = 1.0/pow(rho_a[index],2.0/3.0);
                double t163141 = 1.0/c0p;
                double t163142 = b1p*t163137;
                double t163143 = b3p*t163138;
                double t163144 = b4p*t163140*t163139;
                double t163145 = b2p*c*t163135;
                double t163146 = t163142+t163143+t163144+t163145;
                double t163147 = 1.0/t163146;
                double t163148 = t163141*t163147*(1.0/2.0);
                double t163149 = t163148+1.0;
                double t163150 = log(t163149);
                double t163151 = a1p*c*t163135;
                double t163152 = t163151+1.0;
                double t163153 = pow(2.0,1.0/3.0);
                double t163154 = t163153*2.0;
                double t163155 = t163154-2.0;
                double t163156 = two_13*2.0;
                double t163157 = t163156-2.0;
                double t163158 = 1.0/t163157;
                double t163159 = 1.0/c0f;
                double t163160 = 1.0/pow(rho_b[index],1.0/3.0);
                double t163161 = c*t163160;
                double t163162 = sqrt(t163161);
                double t163163 = pow(t163161,3.0/2.0);
                double t163164 = 1.0/pow(rho_b[index],2.0/3.0);
                double t163165 = b1p*t163162;
                double t163166 = b3p*t163163;
                double t163167 = b4p*t163164*t163139;
                double t163168 = b2p*c*t163160;
                double t163169 = t163165+t163166+t163167+t163168;
                double t163170 = 1.0/t163169;
                double t163171 = t163141*t163170*(1.0/2.0);
                double t163172 = t163171+1.0;
                double t163173 = log(t163172);
                double t163174 = a1p*c*t163160;
                double t163175 = t163174+1.0;
                double t163176 = c0p*t163173*t163175*2.0;
                double t163177 = rho_a[index]+rho_b[index];
                double t163178 = 1.0/pow(t163177,1.0/3.0);
                double t163179 = c*t163178;
                double t163180 = sqrt(t163179);
                double t163181 = pow(t163179,3.0/2.0);
                double t163182 = 1.0/pow(t163177,2.0/3.0);
                double t163183 = b1p*t163180;
                double t163184 = b3p*t163181;
                double t163185 = b4p*t163182*t163139;
                double t163186 = b2p*c*t163178;
                double t163187 = t163183+t163184+t163185+t163186;
                double t163188 = 1.0/t163187;
                double t163189 = t163141*t163188*(1.0/2.0);
                double t163190 = t163189+1.0;
                double t163191 = log(t163190);
                double t163192 = a1p*c*t163178;
                double t163193 = t163192+1.0;
                double t163194 = c0p*t163191*t163193*2.0;
                double t163195 = rho_a[index]-rho_b[index];
                double t163196 = t163195*t163195;
                double t163197 = 1.0/t163177;
                double t163198 = t163195*t163197;
                double t163199 = 1.0/(t163177*t163177*t163177*t163177);
                double t163200 = t163196*t163196;
                double t163201 = t163198+1.0;
                double t163202 = pow(t163201,4.0/3.0);
                double t163203 = -t163198+1.0;
                double t163204 = pow(t163203,4.0/3.0);
                double t163205 = t163202+t163204-2.0;
                double t163206 = gcab*gcab;
                double t163207 = 1.0/pow(rho_b[index],1.6E1/3.0);
                double t163208 = 1.0/pow(rho_a[index],8.0/3.0);
                double t163209 = gamma_aa[index]*t163208*(1.0/2.0);
                double t163210 = 1.0/pow(rho_b[index],8.0/3.0);
                double t163211 = gamma_bb[index]*t163210*(1.0/2.0);
                double t163212 = t163211+t163209;
                double t163213 = gcab*t163212;
                double t163214 = t163213+1.0;
                double t163215 = t163212*t163212;
                double t163216 = t163206*t163215;
                double t163217 = gcab*t163212*2.0;
                double t163218 = t163216+t163217+1.0;
                double t163219 = t163206*t163206;
                double t163236 = gcab*t163210*2.0;
                double t163237 = t163210*t163212*t163206*6.0;
                double t163238 = gcab*t163210*t163206*t163215*6.0;
                double t163239 = t163210*t163212*t163215*t163219*2.0;
                double t163220 = t163236+t163237+t163238+t163239;
                double t163221 = t163215*t163215;
                double t163241 = gcab*t163210*(3.0/2.0);
                double t163242 = t163210*t163212*t163206*3.0;
                double t163243 = gcab*t163210*t163206*t163215*(3.0/2.0);
                double t163222 = t163241+t163242+t163243;
                double t163223 = t163206*t163215*3.0;
                double t163224 = gcab*t163212*t163206*t163215;
                double t163225 = gcab*t163212*3.0;
                double t163226 = t163223+t163224+t163225+1.0;
                double t163233 = gcab*t163210;
                double t163234 = t163210*t163212*t163206;
                double t163227 = t163233+t163234;
                double t163228 = t163206*t163215*6.0;
                double t163229 = gcab*t163212*t163206*t163215*4.0;
                double t163230 = t163221*t163219;
                double t163231 = gcab*t163212*4.0;
                double t163232 = t163230+t163231+t163228+t163229+1.0;
                double t163235 = 1.0/(t163218*t163218);
                double t163240 = 1.0/(t163232*t163232);
                double t163244 = 1.0/(t163226*t163226);
                double t163245 = b1f*t163162;
                double t163246 = b3f*t163163;
                double t163247 = b4f*t163164*t163139;
                double t163248 = b2f*c*t163160;
                double t163249 = t163245+t163246+t163247+t163248;
                double t163250 = 1.0/t163249;
                double t163251 = t163250*t163159*(1.0/2.0);
                double t163252 = t163251+1.0;
                double t163253 = log(t163252);
                double t163254 = a1f*c*t163160;
                double t163255 = t163254+1.0;
                double t163256 = t163176-c0f*t163253*t163255*2.0;
                double t163257 = t163176-t163155*t163256*t163158;
                double t163258 = gcaa*gcaa;
                double t163259 = gamma_bb[index]*gamma_bb[index];
                double t163260 = t163258*t163258;
                double t163261 = 1.0/pow(rho_b[index],3.2E1/3.0);
                double t163262 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]);
                double t163263 = gamma_bb[index]*gcaa*t163210;
                double t163264 = t163263+1.0;
                double t163265 = gamma_bb[index]*gcaa*t163210*2.0;
                double t163266 = t163207*t163258*t163259;
                double t163267 = t163265+t163266+1.0;
                double t163268 = gamma_bb[index]*gcaa*t163210*3.0;
                double t163269 = gamma_bb[index]*gcaa*t163262*t163258*t163259;
                double t163270 = t163207*t163258*t163259*3.0;
                double t163271 = t163270+t163268+t163269+1.0;
                double t163272 = t163259*t163259;
                double t163288 = gcaa*t163210*4.0;
                double t163289 = gamma_bb[index]*t163207*t163258*1.2E1;
                double t163290 = gcaa*t163262*t163258*t163259*1.2E1;
                double t163291 = gamma_bb[index]*t163260*t163261*t163259*4.0;
                double t163273 = t163290+t163291+t163288+t163289;
                double t163274 = gamma_bb[index]*gcaa*t163210*4.0;
                double t163275 = gamma_bb[index]*gcaa*t163262*t163258*t163259*4.0;
                double t163276 = t163207*t163258*t163259*6.0;
                double t163277 = t163260*t163261*t163272;
                double t163278 = t163274+t163275+t163276+t163277+1.0;
                double t163281 = gcaa*t163210*2.0;
                double t163282 = gamma_bb[index]*t163207*t163258*2.0;
                double t163279 = t163281+t163282;
                double t163280 = 1.0/(t163271*t163271);
                double t163283 = 1.0/(t163267*t163267);
                double t163284 = gcaa*t163210*3.0;
                double t163285 = gamma_bb[index]*t163207*t163258*6.0;
                double t163286 = gcaa*t163262*t163258*t163259*3.0;
                double t163287 = t163284+t163285+t163286;
                double t163292 = 1.0/(t163278*t163278);
                double t163293 = rho_b[index]*(8.334140006820045E15/1.40737488355328E14);
                double t163294 = 1.0/pow(t163293,1.0/3.0);
                double t163295 = 1.0/(omega*omega);
                double t163296 = pow(t163293,2.0/3.0);
                double t163297 = exp(-t163295*t163296);
                double t163298 = gx*gx;
                double t163299 = t163298*t163298;
                double t163300 = gamma_bb[index]*gx*t163210;
                double t163301 = t163300+1.0;
                double t163302 = gamma_bb[index]*gx*t163210*2.0;
                double t163303 = t163207*t163259*t163298;
                double t163304 = t163302+t163303+1.0;
                double t163305 = gamma_bb[index]*gx*t163210*3.0;
                double t163306 = gamma_bb[index]*gx*t163262*t163259*t163298;
                double t163307 = t163207*t163259*t163298*3.0;
                double t163308 = t163305+t163306+t163307+1.0;
                double t163324 = gx*t163210*4.0;
                double t163325 = gamma_bb[index]*t163207*t163298*1.2E1;
                double t163326 = gx*t163262*t163259*t163298*1.2E1;
                double t163327 = gamma_bb[index]*t163261*t163259*t163299*4.0;
                double t163309 = t163324+t163325+t163326+t163327;
                double t163310 = gamma_bb[index]*gx*t163210*4.0;
                double t163311 = gamma_bb[index]*gx*t163262*t163259*t163298*4.0;
                double t163312 = t163207*t163259*t163298*6.0;
                double t163313 = t163261*t163272*t163299;
                double t163314 = t163310+t163311+t163312+t163313+1.0;
                double t163317 = gx*t163210*2.0;
                double t163318 = gamma_bb[index]*t163207*t163298*2.0;
                double t163315 = t163317+t163318;
                double t163316 = 1.0/(t163308*t163308);
                double t163319 = 1.0/(t163304*t163304);
                double t163320 = gx*t163210*3.0;
                double t163321 = gamma_bb[index]*t163207*t163298*6.0;
                double t163322 = gx*t163262*t163259*t163298*3.0;
                double t163323 = t163320+t163321+t163322;
                double t163328 = 1.0/(t163314*t163314);
                v_gamma_bb_gamma_bb_[index] = (-rho_b[index]*t163257+t163177*(t163194-t163200*t163205*t163158*t163199* \
                   (t163194-c0f*log((t163159*(1.0/2.0))/(b1f*t163180+b3f*t163181+b2f*c*t163178+b4f*t163182*t163139)+1.0) \
                   *(a1f*c*t163178+1.0)*2.0)+(Aa*t163205*t163158*log((1.0/2.0)/(Aa*(b1a*t163180+b3a*t163181+b2a*c*t163178+ \
                   b4a*t163182*t163139))+1.0)*(t163200*t163199-1.0)*(a1a*c*t163178+1.0)*2.0)/d2fz0)+rho_a[index]*(t163155* \
                   t163158*(c0p*t163150*t163152*2.0-c0f*log((t163159*(1.0/2.0))/(b1f*t163137+b3f*t163138+b2f*c*t163135+ \
                   b4f*t163140*t163139)+1.0)*(a1f*c*t163135+1.0)*2.0)-c0p*t163150*t163152*2.0))*(ccab1*1.0/(t163214*t163214) \
                   *t163206*t163207*(1.0/2.0)-(ccab2*t163206*t163207*(1.0/2.0))/t163218-ccab4*(t163220*t163220)*t163221* \
                   1.0/(t163232*t163232*t163232)*t163219*2.0-ccab2*t163206*t163215*1.0/(t163218*t163218*t163218)*(t163227* \
                   t163227)*2.0+ccab2*t163215*t163207*t163235*t163219*(1.0/2.0)+ccab4*t163221*t163240*t163219*(t163206* \
                   t163207*3.0+t163215*t163207*t163219*3.0+gcab*t163212*t163206*t163207*6.0)-(ccab4*t163215*t163207*t163219* \
                   3.0)/t163232+ccab2*t163210*t163212*t163206*t163235*t163227*2.0-ccab1*gcab*t163212*1.0/(t163214*t163214* \
                   t163214)*t163206*t163207*(1.0/2.0)-(ccab3*gcab*t163212*t163206*t163207*(3.0/2.0))/t163226-ccab3*gcab* \
                   t163212*(t163222*t163222)*t163206*t163215*1.0/(t163226*t163226*t163226)*2.0+ccab3*gcab*t163210*t163222* \
                   t163206*t163215*t163244*3.0+ccab4*t163210*t163220*t163212*t163240*t163215*t163219*4.0+ccab3*gcab*t163212* \
                   t163206*t163215*t163244*(t163206*t163207*(3.0/2.0)+gcab*t163212*t163206*t163207*(3.0/2.0)))+rho_b[index]* \
                   t163257*(ccaa1*t163207*1.0/(t163264*t163264)*t163258*2.0-(ccaa2*t163207*t163258*2.0)/t163267+ccaa2* \
                   t163260*t163261*t163283*t163259*2.0-(ccaa4*t163260*t163261*t163259*1.2E1)/t163278+ccaa4*t163260*t163261* \
                   t163272*t163292*(t163207*t163258*1.2E1+t163260*t163261*t163259*1.2E1+gamma_bb[index]*gcaa*t163262* \
                   t163258*2.4E1)-(ccaa3*gamma_bb[index]*gcaa*t163262*t163258*6.0)/t163271-ccaa1*gamma_bb[index]*gcaa* \
                   t163262*1.0/(t163264*t163264*t163264)*t163258*2.0-ccaa4*t163260*t163261*t163272*(t163273*t163273)* \
                   1.0/(t163278*t163278*t163278)*2.0-ccaa2*t163207*t163258*1.0/(t163267*t163267*t163267)*t163259*(t163279* \
                   t163279)*2.0+ccaa2*gamma_bb[index]*t163207*t163283*t163258*t163279*4.0+ccaa4*gamma_bb[index]*t163260* \
                   t163261*t163273*t163292*t163259*8.0+ccaa3*gcaa*t163262*t163280*t163258*t163259*t163287*6.0+ccaa3*gamma_bb[index]* \
                   gcaa*t163262*t163280*t163258*t163259*(t163207*t163258*6.0+gamma_bb[index]*gcaa*t163262*t163258*6.0) \
                   -ccaa3*gamma_bb[index]*gcaa*t163262*1.0/(t163271*t163271*t163271)*t163258*t163259*(t163287*t163287) \
                   *2.0)+c0*pow(rho_b[index],4.0/3.0)*(omega*t163294*(erf(pow(t163293,1.0/3.0)/omega)*(3.991211251234741E15/ \
                   2.251799813685248E15)-omega*t163294*(-t163297+(omega*omega)*1.0/pow(t163293,2.0/3.0)*(t163297-1.0) \
                   *(1.0/2.0)+3.0/2.0))*(4.0/3.0)-1.0)*(cx1*1.0/(t163301*t163301)*t163207*t163298*2.0-(cx2*t163207*t163298* \
                   2.0)/t163304+cx2*t163261*t163319*t163259*t163299*2.0-(cx4*t163261*t163259*t163299*1.2E1)/t163314+cx4* \
                   t163261*t163272*t163328*t163299*(t163207*t163298*1.2E1+t163261*t163259*t163299*1.2E1+gamma_bb[index]* \
                   gx*t163262*t163298*2.4E1)-cx1*gamma_bb[index]*gx*1.0/(t163301*t163301*t163301)*t163262*t163298*2.0- \
                   (cx3*gamma_bb[index]*gx*t163262*t163298*6.0)/t163308-cx2*1.0/(t163304*t163304*t163304)*t163207*(t163315* \
                   t163315)*t163259*t163298*2.0-cx4*1.0/(t163314*t163314*t163314)*t163261*t163272*(t163309*t163309)*t163299* \
                   2.0+cx2*gamma_bb[index]*t163207*t163315*t163319*t163298*4.0+cx4*gamma_bb[index]*t163261*t163309*t163328* \
                   t163259*t163299*8.0+cx3*gx*t163323*t163262*t163316*t163259*t163298*6.0+cx3*gamma_bb[index]*gx*t163262* \
                   t163316*t163259*t163298*(t163207*t163298*6.0+gamma_bb[index]*gx*t163262*t163298*6.0)-cx3*gamma_bb[index]* \
                   gx*(t163323*t163323)*t163262*1.0/(t163308*t163308*t163308)*t163259*t163298*2.0);
            } else if (rho_a[index] > cutoff_) {
                v_gamma_bb_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                double t163993 = 1.0/pow(rho_b[index],1.0/3.0);
                double t163994 = c*t163993;
                double t163995 = sqrt(t163994);
                double t163996 = pow(t163994,3.0/2.0);
                double t163997 = c*c;
                double t163998 = 1.0/pow(rho_b[index],2.0/3.0);
                double t163999 = 1.0/c0p;
                double t164000 = b1p*t163995;
                double t164001 = b3p*t163996;
                double t164002 = b4p*t163997*t163998;
                double t164003 = b2p*c*t163993;
                double t164004 = t164000+t164001+t164002+t164003;
                double t164005 = 1.0/t164004;
                double t164006 = t164005*t163999*(1.0/2.0);
                double t164007 = t164006+1.0;
                double t164008 = log(t164007);
                double t164009 = a1p*c*t163993;
                double t164010 = t164009+1.0;
                double t164011 = gcaa*gcaa;
                double t164012 = 1.0/pow(rho_b[index],1.6E1/3.0);
                double t164013 = 1.0/pow(rho_b[index],8.0/3.0);
                double t164014 = gamma_bb[index]*gamma_bb[index];
                double t164015 = t164011*t164011;
                double t164016 = 1.0/pow(rho_b[index],3.2E1/3.0);
                double t164017 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]);
                double t164018 = gamma_bb[index]*gcaa*t164013;
                double t164019 = t164018+1.0;
                double t164020 = gamma_bb[index]*gcaa*t164013*2.0;
                double t164021 = t164011*t164012*t164014;
                double t164022 = t164020+t164021+1.0;
                double t164023 = gamma_bb[index]*gcaa*t164013*3.0;
                double t164024 = gamma_bb[index]*gcaa*t164011*t164014*t164017;
                double t164025 = t164011*t164012*t164014*3.0;
                double t164026 = t164023+t164024+t164025+1.0;
                double t164027 = t164014*t164014;
                double t164043 = gcaa*t164013*4.0;
                double t164044 = gamma_bb[index]*t164011*t164012*1.2E1;
                double t164045 = gcaa*t164011*t164014*t164017*1.2E1;
                double t164046 = gamma_bb[index]*t164014*t164015*t164016*4.0;
                double t164028 = t164043+t164044+t164045+t164046;
                double t164029 = gamma_bb[index]*gcaa*t164013*4.0;
                double t164030 = gamma_bb[index]*gcaa*t164011*t164014*t164017*4.0;
                double t164031 = t164011*t164012*t164014*6.0;
                double t164032 = t164015*t164016*t164027;
                double t164033 = t164030+t164031+t164032+t164029+1.0;
                double t164036 = gcaa*t164013*2.0;
                double t164037 = gamma_bb[index]*t164011*t164012*2.0;
                double t164034 = t164036+t164037;
                double t164035 = 1.0/(t164026*t164026);
                double t164038 = 1.0/(t164022*t164022);
                double t164039 = gcaa*t164013*3.0;
                double t164040 = gamma_bb[index]*t164011*t164012*6.0;
                double t164041 = gcaa*t164011*t164014*t164017*3.0;
                double t164042 = t164040+t164041+t164039;
                double t164047 = 1.0/(t164033*t164033);
                double t164048 = rho_b[index]*(8.334140006820045E15/1.40737488355328E14);
                double t164049 = 1.0/pow(t164048,1.0/3.0);
                double t164050 = 1.0/(omega*omega);
                double t164051 = pow(t164048,2.0/3.0);
                double t164052 = exp(-t164050*t164051);
                double t164053 = gx*gx;
                double t164054 = t164053*t164053;
                double t164055 = gamma_bb[index]*gx*t164013;
                double t164056 = t164055+1.0;
                double t164057 = gamma_bb[index]*gx*t164013*2.0;
                double t164058 = t164012*t164014*t164053;
                double t164059 = t164057+t164058+1.0;
                double t164060 = gamma_bb[index]*gx*t164013*3.0;
                double t164061 = gamma_bb[index]*gx*t164014*t164017*t164053;
                double t164062 = t164012*t164014*t164053*3.0;
                double t164063 = t164060+t164061+t164062+1.0;
                double t164079 = gx*t164013*4.0;
                double t164080 = gamma_bb[index]*t164012*t164053*1.2E1;
                double t164081 = gx*t164014*t164017*t164053*1.2E1;
                double t164082 = gamma_bb[index]*t164014*t164016*t164054*4.0;
                double t164064 = t164080+t164081+t164082+t164079;
                double t164065 = gamma_bb[index]*gx*t164013*4.0;
                double t164066 = gamma_bb[index]*gx*t164014*t164017*t164053*4.0;
                double t164067 = t164012*t164014*t164053*6.0;
                double t164068 = t164016*t164027*t164054;
                double t164069 = t164065+t164066+t164067+t164068+1.0;
                double t164072 = gx*t164013*2.0;
                double t164073 = gamma_bb[index]*t164012*t164053*2.0;
                double t164070 = t164072+t164073;
                double t164071 = 1.0/(t164063*t164063);
                double t164074 = 1.0/(t164059*t164059);
                double t164075 = gx*t164013*3.0;
                double t164076 = gamma_bb[index]*t164012*t164053*6.0;
                double t164077 = gx*t164014*t164017*t164053*3.0;
                double t164078 = t164075+t164076+t164077;
                double t164083 = 1.0/(t164069*t164069);
                v_gamma_bb_gamma_bb_[index] = -rho_b[index]*(((pow(2.0,1.0/3.0)*2.0-2.0)*(c0f*log((1.0/2.0)/(c0f* \
                   (b1f*t163995+b3f*t163996+b2f*c*t163993+b4f*t163997*t163998))+1.0)*(a1f*c*t163993+1.0)*2.0-c0p*t164010* \
                   t164008*2.0))/(two_13*2.0-2.0)+c0p*t164010*t164008*2.0)*((ccaa2*t164011*t164012*2.0)/t164022-ccaa1* \
                   t164011*t164012*1.0/(t164019*t164019)*2.0-ccaa2*t164014*t164015*t164016*t164038*2.0+(ccaa4*t164014* \
                   t164015*t164016*1.2E1)/t164033-ccaa4*t164015*t164016*t164027*t164047*(t164011*t164012*1.2E1+t164014* \
                   t164015*t164016*1.2E1+gamma_bb[index]*gcaa*t164011*t164017*2.4E1)+(ccaa3*gamma_bb[index]*gcaa*t164011* \
                   t164017*6.0)/t164026+ccaa1*gamma_bb[index]*gcaa*t164011*t164017*1.0/(t164019*t164019*t164019)*2.0+ \
                   ccaa2*t164011*t164012*1.0/(t164022*t164022*t164022)*t164014*(t164034*t164034)*2.0+ccaa4*t164015*1.0/ \
                   (t164033*t164033*t164033)*t164016*t164027*(t164028*t164028)*2.0-ccaa2*gamma_bb[index]*t164011*t164012* \
                   t164034*t164038*4.0-ccaa4*gamma_bb[index]*t164014*t164015*t164016*t164028*t164047*8.0-ccaa3*gcaa*t164011* \
                   t164014*t164042*t164017*t164035*6.0-ccaa3*gamma_bb[index]*gcaa*t164011*t164014*t164017*t164035*(t164011* \
                   t164012*6.0+gamma_bb[index]*gcaa*t164011*t164017*6.0)+ccaa3*gamma_bb[index]*gcaa*t164011*t164014*(t164042* \
                   t164042)*t164017*1.0/(t164026*t164026*t164026)*2.0)+c0*pow(rho_b[index],4.0/3.0)*(omega*t164049*(erf(pow(t164048,1.0/ \
                   3.0)/omega)*(3.991211251234741E15/2.251799813685248E15)-omega*t164049*(-t164052+(omega*omega)*1.0/ \
                   pow(t164048,2.0/3.0)*(t164052-1.0)*(1.0/2.0)+3.0/2.0))*(4.0/3.0)-1.0)*(cx1*t164012*t164053*1.0/(t164056* \
                   t164056)*2.0-(cx2*t164012*t164053*2.0)/t164059+cx2*t164014*t164016*t164054*t164074*2.0-(cx4*t164014* \
                   t164016*t164054*1.2E1)/t164069+cx4*t164016*t164027*t164054*t164083*(t164012*t164053*1.2E1+t164014* \
                   t164016*t164054*1.2E1+gamma_bb[index]*gx*t164017*t164053*2.4E1)-cx1*gamma_bb[index]*gx*t164017*t164053* \
                   1.0/(t164056*t164056*t164056)*2.0-(cx3*gamma_bb[index]*gx*t164017*t164053*6.0)/t164063-cx2*t164012* \
                   t164014*(t164070*t164070)*t164053*1.0/(t164059*t164059*t164059)*2.0-cx4*t164016*t164027*t164054*(t164064* \
                   t164064)*1.0/(t164069*t164069*t164069)*2.0+cx2*gamma_bb[index]*t164012*t164070*t164053*t164074*4.0+ \
                   cx4*gamma_bb[index]*t164014*t164016*t164054*t164064*t164083*8.0+cx3*gx*t164014*t164017*t164053*t164071* \
                   t164078*6.0+cx3*gamma_bb[index]*gx*t164014*t164017*t164053*t164071*(t164012*t164053*6.0+gamma_bb[index]* \
                   gx*t164017*t164053*6.0)-cx3*gamma_bb[index]*gx*t164014*t164017*t164053*1.0/(t164063*t164063*t164063) \
                   *(t164078*t164078)*2.0);
            } else {
                v_gamma_bb_gamma_bb_[index] = 0.0;
            } 

        }
        if (is_meta_) {

            //V_rho_a_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_a_tau_a_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_a_tau_a_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_a_tau_a_[index] = 0.0;
            } else {
                v_rho_a_tau_a_[index] = 0.0;
            } 

            //V_rho_a_tau_b
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_a_tau_b_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_a_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_a_tau_b_[index] = 0.0;
            } else {
                v_rho_a_tau_b_[index] = 0.0;
            } 

            //V_rho_b_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_b_tau_a_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_b_tau_a_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_b_tau_a_[index] = 0.0;
            } else {
                v_rho_b_tau_a_[index] = 0.0;
            } 

            //V_rho_b_tau_b
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_b_tau_b_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_b_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_b_tau_b_[index] = 0.0;
            } else {
                v_rho_b_tau_b_[index] = 0.0;
            } 

            //V_tau_a_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_tau_a_tau_a_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_tau_a_tau_a_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_tau_a_tau_a_[index] = 0.0;
            } else {
                v_tau_a_tau_a_[index] = 0.0;
            } 

            //V_tau_a_tau_b
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_tau_a_tau_b_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_tau_a_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_tau_a_tau_b_[index] = 0.0;
            } else {
                v_tau_a_tau_b_[index] = 0.0;
            } 

            //V_tau_b_tau_b
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_tau_b_tau_b_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_tau_b_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_tau_b_tau_b_[index] = 0.0;
            } else {
                v_tau_b_tau_b_[index] = 0.0;
            } 

            if (is_gga_) {

                //V_gamma_aa_tau_a
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } else {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } 

                //V_gamma_aa_tau_b
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_aa_tau_b_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_aa_tau_b_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_aa_tau_b_[index] = 0.0;
                } else {
                    v_gamma_aa_tau_b_[index] = 0.0;
                } 

                //V_gamma_ab_tau_a
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_ab_tau_a_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_ab_tau_a_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_ab_tau_a_[index] = 0.0;
                } else {
                    v_gamma_ab_tau_a_[index] = 0.0;
                } 

                //V_gamma_ab_tau_b
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_ab_tau_b_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_ab_tau_b_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_ab_tau_b_[index] = 0.0;
                } else {
                    v_gamma_ab_tau_b_[index] = 0.0;
                } 

                //V_gamma_bb_tau_a
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_bb_tau_a_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_bb_tau_a_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_bb_tau_a_[index] = 0.0;
                } else {
                    v_gamma_bb_tau_a_[index] = 0.0;
                } 

                //V_gamma_bb_tau_b
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_bb_tau_b_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_bb_tau_b_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_bb_tau_b_[index] = 0.0;
                } else {
                    v_gamma_bb_tau_b_[index] = 0.0;
                } 

            }
        }
    }
}

}}

