/**********************************************************
* wB97X_functional.cc: definitions for wB97X_functional for KS-DFT
* Robert Parrish, robparrish@gmail.com
* Autogenerated by MATLAB Script on 25-May-2011
*
***********************************************************/
#include <libmints/mints.h>
#include "wB97X_functional.h"
#include <stdlib.h>
#include <cmath>
#include <string>
#include <string>
#include <vector>

using namespace psi;
using namespace boost;
using namespace std;

namespace psi { namespace functional {

wB97X_Functional::wB97X_Functional(int npoints, int deriv) : Functional(npoints, deriv)
{

    name_ = "wB97X";
    description_ = "wB97X Hybrid Range-Corrected Power Series GGA";
    citation_ = "J. Chai and M. Head-Gordon, J. Chem. Phys., 128, pp. 084106, 2008";

    double omega = 2.9999999999999999E-01;
    params_.push_back(make_pair("omega",omega));
    double c0 = -9.3052573634909974E-01;
    params_.push_back(make_pair("c0",c0));
    double two_13 = 1.2599210498948732E+00;
    params_.push_back(make_pair("two_13",two_13));
    double d2fz0 = 1.7099210000000000E+00;
    params_.push_back(make_pair("d2fz0",d2fz0));
    double c = 6.2035049089939986E-01;
    params_.push_back(make_pair("c",c));
    double Aa = 1.6886999999999999E-02;
    params_.push_back(make_pair("Aa",Aa));
    double a1a = 1.1125000000000000E-01;
    params_.push_back(make_pair("a1a",a1a));
    double b1a = 1.0356999999999999E+01;
    params_.push_back(make_pair("b1a",b1a));
    double b2a = 3.6231000000000000E+00;
    params_.push_back(make_pair("b2a",b2a));
    double b3a = 8.8026000000000004E-01;
    params_.push_back(make_pair("b3a",b3a));
    double b4a = 4.9670999999999998E-01;
    params_.push_back(make_pair("b4a",b4a));
    double c0p = 3.1091000000000001E-02;
    params_.push_back(make_pair("c0p",c0p));
    double a1p = 2.1370000000000000E-01;
    params_.push_back(make_pair("a1p",a1p));
    double b1p = 7.5956999999999999E+00;
    params_.push_back(make_pair("b1p",b1p));
    double b2p = 3.5876000000000001E+00;
    params_.push_back(make_pair("b2p",b2p));
    double b3p = 1.6382000000000001E+00;
    params_.push_back(make_pair("b3p",b3p));
    double b4p = 4.9293999999999999E-01;
    params_.push_back(make_pair("b4p",b4p));
    double c0f = 1.5545000000000000E-02;
    params_.push_back(make_pair("c0f",c0f));
    double a1f = 2.0548000000000000E-01;
    params_.push_back(make_pair("a1f",a1f));
    double b1f = 1.4118900000000000E+01;
    params_.push_back(make_pair("b1f",b1f));
    double b2f = 6.1977000000000002E+00;
    params_.push_back(make_pair("b2f",b2f));
    double b3f = 3.3662000000000001E+00;
    params_.push_back(make_pair("b3f",b3f));
    double b4f = 6.2517000000000000E-01;
    params_.push_back(make_pair("b4f",b4f));
    double gcab = 6.0000000000000001E-03;
    params_.push_back(make_pair("gcab",gcab));
    double gcaa = 2.0000000000000001E-01;
    params_.push_back(make_pair("gcaa",gcaa));
    double gx = 4.0000000000000001E-03;
    params_.push_back(make_pair("gx",gx));
    double ccab0 = 1.0000000000000000E+00;
    params_.push_back(make_pair("ccab0",ccab0));
    double ccab1 = 2.3703099999999999E+00;
    params_.push_back(make_pair("ccab1",ccab1));
    double ccab2 = -1.1399500000000000E+01;
    params_.push_back(make_pair("ccab2",ccab2));
    double ccab3 = 6.5840500000000004E+00;
    params_.push_back(make_pair("ccab3",ccab3));
    double ccab4 = -3.7813200000000000E+00;
    params_.push_back(make_pair("ccab4",ccab4));
    double ccaa0 = 1.0000000000000000E+00;
    params_.push_back(make_pair("ccaa0",ccaa0));
    double ccaa1 = -4.3387900000000004E+00;
    params_.push_back(make_pair("ccaa1",ccaa1));
    double ccaa2 = 1.8230799999999999E+01;
    params_.push_back(make_pair("ccaa2",ccaa2));
    double ccaa3 = -3.1742999999999999E+01;
    params_.push_back(make_pair("ccaa3",ccaa3));
    double ccaa4 = 1.7290099999999999E+01;
    params_.push_back(make_pair("ccaa4",ccaa4));
    double cx0 = 8.4229399999999999E-01;
    params_.push_back(make_pair("cx0",cx0));
    double cx1 = 7.2647899999999999E-01;
    params_.push_back(make_pair("cx1",cx1));
    double cx2 = 1.0476000000000001E+00;
    params_.push_back(make_pair("cx2",cx2));
    double cx3 = -5.7063499999999996E+00;
    params_.push_back(make_pair("cx3",cx3));
    double cx4 = 1.3279400000000001E+01;
    params_.push_back(make_pair("cx4",cx4));

    is_gga_ = true;
    is_meta_ = false;

    //Required allocateion
    allocate();
}
wB97X_Functional::~wB97X_Functional()
{
}
void wB97X_Functional::computeRKSFunctional(boost::shared_ptr<RKSFunctions> prop)
{
    int ntrue = prop->npoints();

    const double* restrict rho_a;
    const double* restrict gamma_aa;
    const double* restrict tau_a;

    rho_a = prop->property_value("RHO_A")->pointer();
    if (is_gga_) {
        gamma_aa = prop->property_value("GAMMA_AA")->pointer();
    }
    if (is_meta_) {
        tau_a = prop->property_value("TAU_A")->pointer();
    }

    double omega = params_[0].second;
    double c0 = params_[1].second;
    double two_13 = params_[2].second;
    double d2fz0 = params_[3].second;
    double c = params_[4].second;
    double Aa = params_[5].second;
    double a1a = params_[6].second;
    double b1a = params_[7].second;
    double b2a = params_[8].second;
    double b3a = params_[9].second;
    double b4a = params_[10].second;
    double c0p = params_[11].second;
    double a1p = params_[12].second;
    double b1p = params_[13].second;
    double b2p = params_[14].second;
    double b3p = params_[15].second;
    double b4p = params_[16].second;
    double c0f = params_[17].second;
    double a1f = params_[18].second;
    double b1f = params_[19].second;
    double b2f = params_[20].second;
    double b3f = params_[21].second;
    double b4f = params_[22].second;
    double gcab = params_[23].second;
    double gcaa = params_[24].second;
    double gx = params_[25].second;
    double ccab0 = params_[26].second;
    double ccab1 = params_[27].second;
    double ccab2 = params_[28].second;
    double ccab3 = params_[29].second;
    double ccab4 = params_[30].second;
    double ccaa0 = params_[31].second;
    double ccaa1 = params_[32].second;
    double ccaa2 = params_[33].second;
    double ccaa3 = params_[34].second;
    double ccaa4 = params_[35].second;
    double cx0 = params_[36].second;
    double cx1 = params_[37].second;
    double cx2 = params_[38].second;
    double cx3 = params_[39].second;
    double cx4 = params_[40].second;

    //Functional
    for (int index = 0; index < ntrue; index++) {

        //Functional Value
        if (rho_a[index] > cutoff_) {
            double t110746 = 1.0/pow(rho_a[index],1.0/3.0);
            double t110747 = c*t110746;
            double t110748 = sqrt(t110747);
            double t110749 = pow(t110747,3.0/2.0);
            double t110750 = c*c;
            double t110751 = 1.0/pow(rho_a[index],2.0/3.0);
            double t110752 = 1.0/c0p;
            double t110753 = b1p*t110748;
            double t110754 = b3p*t110749;
            double t110755 = b4p*t110750*t110751;
            double t110756 = b2p*c*t110746;
            double t110757 = t110753+t110754+t110755+t110756;
            double t110758 = 1.0/t110757;
            double t110759 = t110752*t110758*(1.0/2.0);
            double t110760 = t110759+1.0;
            double t110761 = log(t110760);
            double t110762 = a1p*c*t110746;
            double t110763 = t110762+1.0;
            double t110764 = rho_a[index]*2.0;
            double t110765 = 1.0/pow(t110764,1.0/3.0);
            double t110766 = c*t110765;
            double t110767 = gamma_aa[index]*gamma_aa[index];
            double t110768 = gcab*gcab;
            double t110769 = t110767*t110767;
            double t110770 = t110768*t110768;
            double t110771 = 1.0/pow(rho_a[index],3.2E1/3.0);
            double t110772 = 1.0/pow(rho_a[index],8.0/3.0);
            double t110773 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]);
            double t110774 = 1.0/pow(rho_a[index],1.6E1/3.0);
            double t110775 = pow(2.0,1.0/3.0);
            double t110776 = t110775*2.0;
            double t110777 = t110776-2.0;
            double t110778 = two_13*2.0;
            double t110779 = t110778-2.0;
            double t110780 = 1.0/t110779;
            double t110781 = 1.0/c0f;
            double t110782 = b1f*t110748;
            double t110783 = b3f*t110749;
            double t110784 = b4f*t110750*t110751;
            double t110785 = b2f*c*t110746;
            double t110786 = t110782+t110783+t110784+t110785;
            double t110787 = 1.0/t110786;
            double t110788 = t110781*t110787*(1.0/2.0);
            double t110789 = t110788+1.0;
            double t110790 = log(t110789);
            double t110791 = a1f*c*t110746;
            double t110792 = t110791+1.0;
            double t110793 = c0f*t110790*t110792*2.0;
            double t110794 = c0p*t110761*t110763*2.0;
            double t110795 = gcaa*gcaa;
            double t110796 = t110795*t110795;
            double t110797 = rho_a[index]*(8.334140006820045E15/1.40737488355328E14);
            double t110798 = omega*omega;
            double t110799 = 1.0/rho_a[index];
            double t110800 = omega*t110798*t110799*(7.0368744177664E13/8.334140006820045E15);
            double t110801 = 1.0/pow(t110797,1.0/3.0);
            double t110802 = gx*gx;
            double t110803 = t110802*t110802;
            functional_[index] = (rho_a[index]*(t110794+t110780*t110777*(t110793-c0p*t110761*t110763*2.0))*2.0- \
               c0p*rho_a[index]*log((t110752*(1.0/2.0))/(b1p*sqrt(t110766)+b3p*pow(t110766,3.0/2.0)+b4p*t110750*1.0/ \
               pow(t110764,2.0/3.0)+b2p*c*t110765)+1.0)*(a1p*c*t110765+1.0)*4.0)*(ccab0+(ccab2*t110774*t110767*t110768) \
               /(gamma_aa[index]*gcab*t110772*2.0+t110774*t110767*t110768+1.0)+(ccab1*gamma_aa[index]*gcab*t110772) \
               /(gamma_aa[index]*gcab*t110772+1.0)+(ccab4*t110770*t110771*t110769)/(gamma_aa[index]*gcab*t110772* \
               4.0+t110770*t110771*t110769+t110774*t110767*t110768*6.0+gamma_aa[index]*gcab*t110773*t110767*t110768* \
               4.0+1.0)+(ccab3*gamma_aa[index]*gcab*t110773*t110767*t110768)/(gamma_aa[index]*gcab*t110772*3.0+t110774* \
               t110767*t110768*3.0+gamma_aa[index]*gcab*t110773*t110767*t110768+1.0))-rho_a[index]*(t110794+t110780* \
               t110777*(t110793-t110794))*(ccaa0+(ccaa2*t110774*t110767*t110795)/(gamma_aa[index]*gcaa*t110772*2.0+ \
               t110774*t110767*t110795+1.0)+(ccaa1*gamma_aa[index]*gcaa*t110772)/(gamma_aa[index]*gcaa*t110772+1.0) \
               +(ccaa4*t110771*t110769*t110796)/(gamma_aa[index]*gcaa*t110772*4.0+t110771*t110769*t110796+t110774* \
               t110767*t110795*6.0+gamma_aa[index]*gcaa*t110773*t110767*t110795*4.0+1.0)+(ccaa3*gamma_aa[index]*gcaa* \
               t110773*t110767*t110795)/(gamma_aa[index]*gcaa*t110772*3.0+t110774*t110767*t110795*3.0+gamma_aa[index]* \
               gcaa*t110773*t110767*t110795+1.0))*2.0-c0*pow(rho_a[index],4.0/3.0)*(omega*t110801*(t110800+erf(pow(t110797,1.0/ \
               3.0)/omega)*(3.991211251234741E15/2.251799813685248E15)-omega*t110801*(3.0/2.0)-exp(-1.0/(omega*omega) \
               *pow(t110797,2.0/3.0))*(t110800-omega*t110801))*(4.0/3.0)-1.0)*(cx0+(cx2*t110802*t110774*t110767)/ \
               (gamma_aa[index]*gx*t110772*2.0+t110802*t110774*t110767+1.0)+(cx1*gamma_aa[index]*gx*t110772)/(gamma_aa[index]* \
               gx*t110772+1.0)+(cx4*t110803*t110771*t110769)/(gamma_aa[index]*gx*t110772*4.0+t110802*t110774*t110767* \
               6.0+t110803*t110771*t110769+gamma_aa[index]*gx*t110802*t110773*t110767*4.0+1.0)+(cx3*gamma_aa[index]* \
               gx*t110802*t110773*t110767)/(gamma_aa[index]*gx*t110772*3.0+t110802*t110774*t110767*3.0+gamma_aa[index]* \
               gx*t110802*t110773*t110767+1.0))*2.0;
        } else {
            functional_[index] = 0.0;
        }

    }
    //First Partials
    for (int index = 0; index < ntrue && deriv_ >= 1; index++) {

        //V_rho_a
        if (rho_a[index] > cutoff_) {
            double t110805 = gamma_aa[index]*gamma_aa[index];
            double t110806 = gcab*gcab;
            double t110807 = t110805*t110805;
            double t110808 = t110806*t110806;
            double t110809 = 1.0/pow(rho_a[index],3.2E1/3.0);
            double t110810 = 1.0/pow(rho_a[index],8.0/3.0);
            double t110811 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]);
            double t110812 = 1.0/pow(rho_a[index],1.6E1/3.0);
            double t110813 = rho_a[index]*2.0;
            double t110814 = 1.0/pow(t110813,1.0/3.0);
            double t110815 = c*t110814;
            double t110816 = sqrt(t110815);
            double t110817 = b1p*t110816;
            double t110818 = pow(t110815,3.0/2.0);
            double t110819 = b3p*t110818;
            double t110820 = b2p*c*t110814;
            double t110821 = c*c;
            double t110822 = 1.0/pow(t110813,2.0/3.0);
            double t110823 = b4p*t110821*t110822;
            double t110824 = t110820+t110823+t110817+t110819;
            double t110825 = 1.0/pow(t110813,4.0/3.0);
            double t110826 = 1.0/c0p;
            double t110827 = 1.0/t110824;
            double t110828 = t110826*t110827*(1.0/2.0);
            double t110829 = t110828+1.0;
            double t110830 = 1.0/pow(rho_a[index],1.0/3.0);
            double t110831 = c*t110830;
            double t110832 = sqrt(t110831);
            double t110833 = b1f*t110832;
            double t110834 = pow(t110831,3.0/2.0);
            double t110835 = b3f*t110834;
            double t110836 = 1.0/pow(rho_a[index],2.0/3.0);
            double t110837 = b4f*t110821*t110836;
            double t110838 = b2f*c*t110830;
            double t110839 = t110833+t110835+t110837+t110838;
            double t110840 = 1.0/pow(rho_a[index],4.0/3.0);
            double t110841 = b1p*t110832;
            double t110842 = b3p*t110834;
            double t110843 = b4p*t110821*t110836;
            double t110844 = b2p*c*t110830;
            double t110845 = t110841+t110842+t110843+t110844;
            double t110846 = 1.0/pow(rho_a[index],5.0/3.0);
            double t110847 = 1.0/sqrt(t110831);
            double t110848 = 1.0/c0f;
            double t110849 = 1.0/t110839;
            double t110850 = t110848*t110849*(1.0/2.0);
            double t110851 = t110850+1.0;
            double t110852 = 1.0/t110845;
            double t110853 = t110852*t110826*(1.0/2.0);
            double t110854 = t110853+1.0;
            double t110855 = a1p*c*t110830;
            double t110856 = t110855+1.0;
            double t110857 = 1.0/t110854;
            double t110858 = 1.0/(t110845*t110845);
            double t110859 = b4p*t110821*t110846*(2.0/3.0);
            double t110860 = b2p*c*t110840*(1.0/3.0);
            double t110861 = b1p*c*t110840*t110847*(1.0/6.0);
            double t110862 = b3p*c*t110840*t110832*(1.0/2.0);
            double t110863 = t110860+t110861+t110862+t110859;
            double t110864 = t110863*t110856*t110857*t110858;
            double t110865 = log(t110854);
            double t110866 = log(t110829);
            double t110867 = a1p*c*t110814;
            double t110868 = t110867+1.0;
            double t110869 = pow(2.0,1.0/3.0);
            double t110870 = t110869*2.0;
            double t110871 = t110870-2.0;
            double t110872 = two_13*2.0;
            double t110873 = t110872-2.0;
            double t110874 = 1.0/t110873;
            double t110875 = log(t110851);
            double t110876 = a1f*c*t110830;
            double t110877 = t110876+1.0;
            double t110878 = c0f*t110875*t110877*2.0;
            double t110880 = c0p*t110856*t110865*2.0;
            double t110879 = -t110880+t110878;
            double t110881 = gcaa*gcaa;
            double t110882 = t110881*t110881;
            double t110883 = t110871*t110874*t110879;
            double t110884 = t110880+t110883;
            double t110885 = gamma_aa[index]*gcab*t110810*4.0;
            double t110886 = gamma_aa[index]*gcab*t110811*t110805*t110806*4.0;
            double t110887 = t110812*t110805*t110806*6.0;
            double t110888 = t110807*t110808*t110809;
            double t110889 = t110885+t110886+t110887+t110888+1.0;
            double t110890 = 1.0/t110889;
            double t110891 = gamma_aa[index]*gcab*t110810;
            double t110892 = t110891+1.0;
            double t110893 = 1.0/t110892;
            double t110894 = gamma_aa[index]*gcab*t110810*3.0;
            double t110895 = gamma_aa[index]*gcab*t110811*t110805*t110806;
            double t110896 = t110812*t110805*t110806*3.0;
            double t110897 = t110894+t110895+t110896+1.0;
            double t110898 = 1.0/t110897;
            double t110899 = gamma_aa[index]*gcab*t110810*2.0;
            double t110900 = t110812*t110805*t110806;
            double t110901 = t110900+t110899+1.0;
            double t110902 = 1.0/t110901;
            double t110903 = 1.0/pow(rho_a[index],1.9E1/3.0);
            double t110904 = 1.0/pow(rho_a[index],1.1E1/3.0);
            double t110905 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]*rho_a[index]);
            double t110906 = 1.0/pow(rho_a[index],3.5E1/3.0);
            double t110907 = gamma_aa[index]*gcaa*t110810*4.0;
            double t110908 = gamma_aa[index]*gcaa*t110811*t110805*t110881*4.0;
            double t110909 = t110812*t110805*t110881*6.0;
            double t110910 = t110807*t110809*t110882;
            double t110911 = t110910+t110907+t110908+t110909+1.0;
            double t110912 = 1.0/t110911;
            double t110913 = gamma_aa[index]*gcaa*t110810;
            double t110914 = t110913+1.0;
            double t110915 = 1.0/t110914;
            double t110916 = gamma_aa[index]*gcaa*t110810*3.0;
            double t110917 = gamma_aa[index]*gcaa*t110811*t110805*t110881;
            double t110918 = t110812*t110805*t110881*3.0;
            double t110919 = t110916+t110917+t110918+1.0;
            double t110920 = 1.0/t110919;
            double t110921 = gamma_aa[index]*gcaa*t110810*2.0;
            double t110922 = t110812*t110805*t110881;
            double t110923 = t110921+t110922+1.0;
            double t110924 = 1.0/t110923;
            double t110925 = 1.0/t110851;
            double t110926 = 1.0/(t110839*t110839);
            double t110927 = b4f*t110821*t110846*(2.0/3.0);
            double t110928 = b2f*c*t110840*(1.0/3.0);
            double t110929 = b1f*c*t110840*t110847*(1.0/6.0);
            double t110930 = b3f*c*t110840*t110832*(1.0/2.0);
            double t110931 = t110930+t110927+t110928+t110929;
            double t110932 = a1f*c*c0f*t110840*t110875*(2.0/3.0);
            double t110933 = a1p*c*c0p*t110840*t110865*(2.0/3.0);
            double t110934 = ccaa4*t110912*t110807*t110809*t110882;
            double t110935 = ccaa1*gamma_aa[index]*gcaa*t110810*t110915;
            double t110936 = ccaa3*gamma_aa[index]*gcaa*t110811*t110920*t110805*t110881;
            double t110937 = ccaa2*t110812*t110805*t110924*t110881;
            double t110938 = ccaa0+t110934+t110935+t110936+t110937;
            double t110939 = omega*omega;
            double t110940 = rho_a[index]*(8.334140006820045E15/1.40737488355328E14);
            double t110941 = 1.0/(rho_a[index]*rho_a[index]);
            double t110942 = 1.0/pow(t110940,4.0/3.0);
            double t110943 = 1.0/(omega*omega);
            double t110944 = pow(t110940,2.0/3.0);
            double t110946 = t110943*t110944;
            double t110945 = exp(-t110946);
            double t110947 = 1.0/pow(t110940,1.0/3.0);
            double t110948 = 1.0/omega;
            double t110949 = 1.0/rho_a[index];
            double t110950 = omega*t110939*t110949*(7.0368744177664E13/8.334140006820045E15);
            double t110951 = omega*t110947;
            double t110952 = gx*gx;
            double t110953 = t110952*t110952;
            double t110954 = pow(t110940,1.0/3.0);
            double t110955 = t110954*t110948;
            double t110956 = erf(t110955);
            double t110957 = t110956*(3.991211251234741E15/2.251799813685248E15);
            double t110958 = t110950-t110951;
            double t110984 = t110945*t110958;
            double t110985 = omega*t110947*(3.0/2.0);
            double t110959 = t110950+t110957-t110984-t110985;
            double t110960 = gamma_aa[index]*gx*t110810*4.0;
            double t110961 = gamma_aa[index]*gx*t110811*t110805*t110952*4.0;
            double t110962 = t110812*t110805*t110952*6.0;
            double t110963 = t110807*t110809*t110953;
            double t110964 = t110960+t110961+t110962+t110963+1.0;
            double t110965 = 1.0/t110964;
            double t110966 = cx4*t110807*t110809*t110953*t110965;
            double t110967 = gamma_aa[index]*gx*t110810;
            double t110968 = t110967+1.0;
            double t110969 = 1.0/t110968;
            double t110970 = cx1*gamma_aa[index]*gx*t110810*t110969;
            double t110971 = gamma_aa[index]*gx*t110810*3.0;
            double t110972 = gamma_aa[index]*gx*t110811*t110805*t110952;
            double t110973 = t110812*t110805*t110952*3.0;
            double t110974 = t110971+t110972+t110973+1.0;
            double t110975 = 1.0/t110974;
            double t110976 = cx3*gamma_aa[index]*gx*t110811*t110805*t110952*t110975;
            double t110977 = gamma_aa[index]*gx*t110810*2.0;
            double t110978 = t110812*t110805*t110952;
            double t110979 = t110977+t110978+1.0;
            double t110980 = 1.0/t110979;
            double t110981 = cx2*t110812*t110805*t110952*t110980;
            double t110982 = cx0+t110970+t110981+t110966+t110976;
            double t110983 = pow(rho_a[index],4.0/3.0);
            double t110986 = omega*t110947*t110959*(4.0/3.0);
            double t110987 = t110986-1.0;
            v_rho_a_[index] = -(rho_a[index]*t110884*2.0-c0p*rho_a[index]*t110866*t110868*4.0)*(ccab1*gamma_aa[index]* \
               gcab*t110904*t110893*(4.0/3.0)+ccab2*t110902*t110903*t110805*t110806*(8.0/3.0)+ccab4*t110807*t110906* \
               t110808*t110890*(1.6E1/3.0)-ccab1*t110903*t110805*t110806*1.0/(t110892*t110892)*(4.0/3.0)-ccab2*1.0/ \
               (t110901*t110901)*t110812*t110805*t110806*(gamma_aa[index]*gcab*t110904*(8.0/3.0)+t110903*t110805* \
               t110806*(8.0/3.0))-ccab4*t110807*t110808*t110809*1.0/(t110889*t110889)*(gamma_aa[index]*gcab*t110904* \
               (1.6E1/3.0)+t110903*t110805*t110806*1.6E1+t110807*t110906*t110808*(1.6E1/3.0)+gamma_aa[index]*gcab* \
               t110805*t110806*t110905*1.6E1)+ccab3*gamma_aa[index]*gcab*t110805*t110806*t110905*t110898*4.0-ccab3* \
               gamma_aa[index]*gcab*t110811*t110805*t110806*1.0/(t110897*t110897)*(gamma_aa[index]*gcab*t110904*4.0+ \
               t110903*t110805*t110806*8.0+gamma_aa[index]*gcab*t110805*t110806*t110905*4.0))-t110884*t110938-(rho_a[index]* \
               ((1.0/(t110824*t110824)*t110868*(b4p*t110821*1.0/pow(t110813,5.0/3.0)*(2.0/3.0)+b2p*c*t110825*(1.0/ \
               3.0)+b3p*c*t110816*t110825*(1.0/2.0)+b1p*c*1.0/sqrt(t110815)*t110825*(1.0/6.0)))/t110829-a1p*c*c0p* \
               t110825*t110866*(2.0/3.0))*2.0+rho_a[index]*(t110933-t110864+t110871*t110874*(t110932+t110864-t110931* \
               t110925*t110926*t110877-a1p*c*c0p*t110840*t110865*(2.0/3.0)))-c0p*t110856*t110865*2.0+c0p*t110866* \
               t110868*2.0-t110871*t110874*t110879)*(ccab0+ccab1*gamma_aa[index]*gcab*t110810*t110893+ccab2*t110812* \
               t110902*t110805*t110806+ccab4*t110807*t110808*t110809*t110890+ccab3*gamma_aa[index]*gcab*t110811*t110805* \
               t110806*t110898)+rho_a[index]*t110884*(ccaa1*gamma_aa[index]*gcaa*t110904*t110915*(8.0/3.0)+ccaa2* \
               t110903*t110805*t110924*t110881*(1.6E1/3.0)+ccaa4*t110912*t110807*t110906*t110882*(3.2E1/3.0)-ccaa1* \
               t110903*t110805*1.0/(t110914*t110914)*t110881*(8.0/3.0)-ccaa2*t110812*t110805*1.0/(t110923*t110923) \
               *t110881*(gamma_aa[index]*gcaa*t110904*(1.6E1/3.0)+t110903*t110805*t110881*(1.6E1/3.0))-ccaa4*1.0/ \
               (t110911*t110911)*t110807*t110809*t110882*(gamma_aa[index]*gcaa*t110904*(3.2E1/3.0)+t110903*t110805* \
               t110881*3.2E1+t110807*t110906*t110882*(3.2E1/3.0)+gamma_aa[index]*gcaa*t110805*t110905*t110881*3.2E1) \
               +ccaa3*gamma_aa[index]*gcaa*t110920*t110805*t110905*t110881*8.0-ccaa3*gamma_aa[index]*gcaa*t110811* \
               t110805*t110881*1.0/(t110919*t110919)*(gamma_aa[index]*gcaa*t110904*8.0+t110903*t110805*t110881*1.6E1+ \
               gamma_aa[index]*gcaa*t110805*t110905*t110881*8.0))+rho_a[index]*t110938*(t110933-t110864+t110871*t110874* \
               (t110932-t110933+t110864-t110931*t110925*t110926*t110877))-c0*pow(rho_a[index],1.0/3.0)*t110982*t110987* \
               (4.0/3.0)+c0*t110982*t110983*(omega*t110947*(omega*t110942*(-8.334140006820045E15/2.81474976710656E14) \
               +t110945*(omega*t110942*(2.778046668940015E15/1.40737488355328E14)-omega*t110941*t110939*(7.0368744177664E13/ \
               8.334140006820045E15))+omega*t110941*t110939*(7.0368744177664E13/8.334140006820045E15)+t110943*t110945* \
               t110947*(t110951-omega*t110939*t110949*(7.0368744177664E13/8.334140006820045E15))*(2.778046668940015E15/ \
               7.0368744177664E13)-1.0/sqrt(3.141592653589793)*1.0/pow(t110940,2.0/3.0)*t110945*t110948*(1.108777112152858E31/ \
               1.584563250285287E29))*(4.0/3.0)+omega*t110942*t110959*(2.778046668940015E15/1.05553116266496E14)) \
               +c0*t110983*t110987*(cx1*gamma_aa[index]*gx*t110904*t110969*(8.0/3.0)+cx2*t110903*t110805*t110952* \
               t110980*(1.6E1/3.0)+cx4*t110807*t110906*t110953*t110965*(3.2E1/3.0)-cx1*t110903*t110805*t110952*1.0/ \
               (t110968*t110968)*(8.0/3.0)-cx2*t110812*t110805*t110952*1.0/(t110979*t110979)*(gamma_aa[index]*gx* \
               t110904*(1.6E1/3.0)+t110903*t110805*t110952*(1.6E1/3.0))-cx4*t110807*t110809*t110953*1.0/(t110964* \
               t110964)*(gamma_aa[index]*gx*t110904*(3.2E1/3.0)+t110903*t110805*t110952*3.2E1+t110807*t110906*t110953* \
               (3.2E1/3.0)+gamma_aa[index]*gx*t110805*t110905*t110952*3.2E1)+cx3*gamma_aa[index]*gx*t110805*t110905* \
               t110952*t110975*8.0-cx3*gamma_aa[index]*gx*t110811*t110805*t110952*1.0/(t110974*t110974)*(gamma_aa[index]* \
               gx*t110904*8.0+t110903*t110805*t110952*1.6E1+gamma_aa[index]*gx*t110805*t110905*t110952*8.0));
        } else {
            v_rho_a_[index] = 0.0;
        }

        if (is_gga_) {

            if (rho_a[index] > cutoff_) {
                double t110989 = 1.0/pow(rho_a[index],1.0/3.0);
                double t110990 = c*t110989;
                double t110991 = sqrt(t110990);
                double t110992 = pow(t110990,3.0/2.0);
                double t110993 = c*c;
                double t110994 = 1.0/pow(rho_a[index],2.0/3.0);
                double t110995 = 1.0/c0p;
                double t110996 = b1p*t110991;
                double t110997 = b3p*t110992;
                double t110998 = b4p*t110993*t110994;
                double t110999 = b2p*c*t110989;
                double t111000 = t110996+t110997+t110998+t110999;
                double t111001 = 1.0/t111000;
                double t111002 = t111001*t110995*(1.0/2.0);
                double t111003 = t111002+1.0;
                double t111004 = log(t111003);
                double t111005 = a1p*c*t110989;
                double t111006 = t111005+1.0;
                double t111007 = rho_a[index]*2.0;
                double t111008 = 1.0/pow(t111007,1.0/3.0);
                double t111009 = c*t111008;
                double t111010 = 1.0/pow(rho_a[index],8.0/3.0);
                double t111011 = gamma_aa[index]*gamma_aa[index];
                double t111012 = gcab*gcab;
                double t111013 = t111012*t111012;
                double t111014 = 1.0/pow(rho_a[index],3.2E1/3.0);
                double t111015 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t111016 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t111017 = gamma_aa[index]*gcab*t111010;
                double t111018 = t111017+1.0;
                double t111019 = gamma_aa[index]*gcab*t111010*3.0;
                double t111020 = gamma_aa[index]*gcab*t111011*t111012*t111016;
                double t111021 = t111011*t111012*t111015*3.0;
                double t111022 = t111020+t111021+t111019+1.0;
                double t111023 = t111011*t111011;
                double t111024 = gamma_aa[index]*gcab*t111010*4.0;
                double t111025 = gamma_aa[index]*gcab*t111011*t111012*t111016*4.0;
                double t111026 = t111011*t111012*t111015*6.0;
                double t111027 = t111013*t111014*t111023;
                double t111028 = t111024+t111025+t111026+t111027+1.0;
                double t111029 = gamma_aa[index]*gcab*t111010*2.0;
                double t111030 = t111011*t111012*t111015;
                double t111031 = t111030+t111029+1.0;
                double t111032 = pow(2.0,1.0/3.0);
                double t111033 = t111032*2.0;
                double t111034 = t111033-2.0;
                double t111035 = two_13*2.0;
                double t111036 = t111035-2.0;
                double t111037 = 1.0/t111036;
                double t111038 = 1.0/c0f;
                double t111039 = b1f*t110991;
                double t111040 = b3f*t110992;
                double t111041 = b4f*t110993*t110994;
                double t111042 = b2f*c*t110989;
                double t111043 = t111040+t111041+t111042+t111039;
                double t111044 = 1.0/t111043;
                double t111045 = t111044*t111038*(1.0/2.0);
                double t111046 = t111045+1.0;
                double t111047 = log(t111046);
                double t111048 = a1f*c*t110989;
                double t111049 = t111048+1.0;
                double t111050 = c0f*t111047*t111049*2.0;
                double t111051 = c0p*t111004*t111006*2.0;
                double t111052 = gcaa*gcaa;
                double t111053 = t111052*t111052;
                double t111054 = gamma_aa[index]*gcaa*t111010;
                double t111055 = t111054+1.0;
                double t111056 = gamma_aa[index]*gcaa*t111010*3.0;
                double t111057 = gamma_aa[index]*gcaa*t111011*t111016*t111052;
                double t111058 = t111011*t111015*t111052*3.0;
                double t111059 = t111056+t111057+t111058+1.0;
                double t111060 = gamma_aa[index]*gcaa*t111010*4.0;
                double t111061 = gamma_aa[index]*gcaa*t111011*t111016*t111052*4.0;
                double t111062 = t111011*t111015*t111052*6.0;
                double t111063 = t111014*t111023*t111053;
                double t111064 = t111060+t111061+t111062+t111063+1.0;
                double t111065 = gamma_aa[index]*gcaa*t111010*2.0;
                double t111066 = t111011*t111015*t111052;
                double t111067 = t111065+t111066+1.0;
                double t111068 = rho_a[index]*(8.334140006820045E15/1.40737488355328E14);
                double t111069 = omega*omega;
                double t111070 = 1.0/rho_a[index];
                double t111071 = omega*t111070*t111069*(7.0368744177664E13/8.334140006820045E15);
                double t111072 = 1.0/pow(t111068,1.0/3.0);
                double t111073 = gx*gx;
                double t111074 = t111073*t111073;
                double t111075 = gamma_aa[index]*gx*t111010;
                double t111076 = t111075+1.0;
                double t111077 = gamma_aa[index]*gx*t111010*3.0;
                double t111078 = gamma_aa[index]*gx*t111011*t111016*t111073;
                double t111079 = t111011*t111015*t111073*3.0;
                double t111080 = t111077+t111078+t111079+1.0;
                double t111081 = gamma_aa[index]*gx*t111010*4.0;
                double t111082 = gamma_aa[index]*gx*t111011*t111016*t111073*4.0;
                double t111083 = t111011*t111015*t111073*6.0;
                double t111084 = t111014*t111023*t111074;
                double t111085 = t111081+t111082+t111083+t111084+1.0;
                double t111086 = gamma_aa[index]*gx*t111010*2.0;
                double t111087 = t111011*t111015*t111073;
                double t111088 = t111086+t111087+1.0;
                v_gamma_aa_[index] = (rho_a[index]*(t111051+t111034*t111037*(t111050-c0p*t111004*t111006*2.0))*2.0- \
                   c0p*rho_a[index]*log((t110995*(1.0/2.0))/(b1p*sqrt(t111009)+b3p*pow(t111009,3.0/2.0)+b4p*1.0/pow(t111007,2.0/ \
                   3.0)*t110993+b2p*c*t111008)+1.0)*(a1p*c*t111008+1.0)*4.0)*((ccab1*gcab*t111010*(1.0/2.0))/t111018+ \
                   (ccab2*gamma_aa[index]*t111012*t111015)/t111031-ccab1*gamma_aa[index]*t111012*t111015*1.0/(t111018* \
                   t111018)*(1.0/2.0)-ccab2*t111011*t111012*1.0/(t111031*t111031)*t111015*(gcab*t111010+gamma_aa[index]* \
                   t111012*t111015)+(ccab4*gamma_aa[index]*t111011*t111013*t111014*2.0)/t111028+(ccab3*gcab*t111011*t111012* \
                   t111016*(3.0/2.0))/t111022-ccab4*t111013*t111014*t111023*1.0/(t111028*t111028)*(gcab*t111010*2.0+gamma_aa[index]* \
                   t111012*t111015*6.0+gamma_aa[index]*t111011*t111013*t111014*2.0+gcab*t111011*t111012*t111016*6.0)- \
                   ccab3*gamma_aa[index]*gcab*t111011*t111012*1.0/(t111022*t111022)*t111016*(gcab*t111010*(3.0/2.0)+gamma_aa[index]* \
                   t111012*t111015*3.0+gcab*t111011*t111012*t111016*(3.0/2.0)))*2.0-rho_a[index]*(t111051+t111034*t111037* \
                   (t111050-t111051))*((ccaa1*gcaa*t111010)/t111055-ccaa1*gamma_aa[index]*t111015*t111052*1.0/(t111055* \
                   t111055)+(ccaa2*gamma_aa[index]*t111015*t111052*2.0)/t111067-ccaa2*t111011*t111015*t111052*1.0/(t111067* \
                   t111067)*(gcaa*t111010*2.0+gamma_aa[index]*t111015*t111052*2.0)+(ccaa4*gamma_aa[index]*t111011*t111014* \
                   t111053*4.0)/t111064+(ccaa3*gcaa*t111011*t111016*t111052*3.0)/t111059-ccaa4*t111014*t111023*t111053* \
                   1.0/(t111064*t111064)*(gcaa*t111010*4.0+gamma_aa[index]*t111015*t111052*1.2E1+gamma_aa[index]*t111011* \
                   t111014*t111053*4.0+gcaa*t111011*t111016*t111052*1.2E1)-ccaa3*gamma_aa[index]*gcaa*t111011*t111016* \
                   t111052*1.0/(t111059*t111059)*(gcaa*t111010*3.0+gamma_aa[index]*t111015*t111052*6.0+gcaa*t111011*t111016* \
                   t111052*3.0))*2.0-c0*pow(rho_a[index],4.0/3.0)*(omega*t111072*(t111071+erf(pow(t111068,1.0/3.0)/omega) \
                   *(3.991211251234741E15/2.251799813685248E15)-omega*t111072*(3.0/2.0)-exp(-1.0/(omega*omega)*pow(t111068,2.0/ \
                   3.0))*(t111071-omega*t111072))*(4.0/3.0)-1.0)*((cx1*gx*t111010)/t111076-cx1*gamma_aa[index]*t111015* \
                   t111073*1.0/(t111076*t111076)+(cx2*gamma_aa[index]*t111015*t111073*2.0)/t111088-cx2*t111011*t111015* \
                   t111073*1.0/(t111088*t111088)*(gx*t111010*2.0+gamma_aa[index]*t111015*t111073*2.0)+(cx4*gamma_aa[index]* \
                   t111011*t111014*t111074*4.0)/t111085+(cx3*gx*t111011*t111016*t111073*3.0)/t111080-cx4*t111014*t111023* \
                   t111074*1.0/(t111085*t111085)*(gx*t111010*4.0+gamma_aa[index]*t111015*t111073*1.2E1+gamma_aa[index]* \
                   t111011*t111014*t111074*4.0+gx*t111011*t111016*t111073*1.2E1)-cx3*gamma_aa[index]*gx*t111011*t111016* \
                   1.0/(t111080*t111080)*t111073*(gx*t111010*3.0+gamma_aa[index]*t111015*t111073*6.0+gx*t111011*t111016* \
                   t111073*3.0))*2.0;
            } else {
                v_gamma_aa_[index] = 0.0;
            }

        }
        if (is_meta_) {

            //V_tau_a
            if (rho_a[index] > cutoff_) {
                v_tau_a_[index] = 0.0;
            } else {
                v_tau_a_[index] = 0.0;
            }

        }
    }
    //Second Partials
    for (int index = 0; index < ntrue && deriv_ >= 2; index++) {

        //V_rho_a_rho_a
        if (rho_a[index] > cutoff_) {
            double t111091 = rho_a[index]*2.0;
            double t111092 = 1.0/pow(t111091,1.0/3.0);
            double t111093 = c*t111092;
            double t111094 = sqrt(t111093);
            double t111095 = b1p*t111094;
            double t111096 = pow(t111093,3.0/2.0);
            double t111097 = b3p*t111096;
            double t111098 = b2p*c*t111092;
            double t111099 = c*c;
            double t111100 = 1.0/pow(t111091,2.0/3.0);
            double t111101 = b4p*t111100*t111099;
            double t111102 = t111101+t111095+t111097+t111098;
            double t111103 = 1.0/pow(t111091,8.0/3.0);
            double t111104 = 1.0/pow(t111091,7.0/3.0);
            double t111105 = 1.0/sqrt(t111093);
            double t111106 = 1.0/c0p;
            double t111107 = 1.0/t111102;
            double t111108 = t111106*t111107*(1.0/2.0);
            double t111109 = t111108+1.0;
            double t111110 = 1.0/t111109;
            double t111111 = a1p*c*t111092;
            double t111112 = t111111+1.0;
            double t111113 = 1.0/pow(t111091,4.0/3.0);
            double t111115 = b2p*c*t111113*(1.0/3.0);
            double t111116 = 1.0/pow(t111091,5.0/3.0);
            double t111117 = b4p*t111116*t111099*(2.0/3.0);
            double t111118 = b1p*c*t111113*t111105*(1.0/6.0);
            double t111119 = b3p*c*t111113*t111094*(1.0/2.0);
            double t111114 = t111115+t111117+t111118+t111119;
            double t111120 = t111114*t111114;
            double t111121 = 1.0/(t111102*t111102);
            double t111122 = log(t111109);
            double t111123 = gamma_aa[index]*gamma_aa[index];
            double t111124 = gcab*gcab;
            double t111125 = t111123*t111123;
            double t111126 = t111124*t111124;
            double t111127 = 1.0/pow(rho_a[index],3.2E1/3.0);
            double t111128 = 1.0/pow(rho_a[index],8.0/3.0);
            double t111129 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]);
            double t111130 = 1.0/pow(rho_a[index],1.6E1/3.0);
            double t111131 = two_13*2.0;
            double t111132 = t111131-2.0;
            double t111133 = 1.0/t111132;
            double t111134 = 1.0/pow(rho_a[index],1.0/3.0);
            double t111135 = c*t111134;
            double t111136 = sqrt(t111135);
            double t111137 = pow(t111135,3.0/2.0);
            double t111138 = 1.0/pow(rho_a[index],2.0/3.0);
            double t111139 = b1p*t111136;
            double t111140 = b3p*t111137;
            double t111141 = b4p*t111138*t111099;
            double t111142 = b2p*c*t111134;
            double t111143 = t111140+t111141+t111142+t111139;
            double t111144 = 1.0/t111143;
            double t111145 = t111106*t111144*(1.0/2.0);
            double t111146 = t111145+1.0;
            double t111147 = log(t111146);
            double t111148 = a1p*c*t111134;
            double t111149 = t111148+1.0;
            double t111150 = gamma_aa[index]*gcab*t111128*4.0;
            double t111151 = gamma_aa[index]*gcab*t111123*t111124*t111129*4.0;
            double t111152 = t111130*t111123*t111124*6.0;
            double t111153 = t111125*t111126*t111127;
            double t111154 = t111150+t111151+t111152+t111153+1.0;
            double t111155 = 1.0/t111154;
            double t111156 = gamma_aa[index]*gcab*t111128;
            double t111157 = t111156+1.0;
            double t111158 = 1.0/t111157;
            double t111159 = gamma_aa[index]*gcab*t111128*3.0;
            double t111160 = gamma_aa[index]*gcab*t111123*t111124*t111129;
            double t111161 = t111130*t111123*t111124*3.0;
            double t111162 = t111160+t111161+t111159+1.0;
            double t111163 = 1.0/t111162;
            double t111164 = gamma_aa[index]*gcab*t111128*2.0;
            double t111165 = t111130*t111123*t111124;
            double t111166 = t111164+t111165+1.0;
            double t111167 = 1.0/t111166;
            double t111168 = 1.0/pow(rho_a[index],1.0E1);
            double t111169 = 1.0/pow(rho_a[index],2.2E1/3.0);
            double t111171 = 1.0/pow(rho_a[index],1.1E1/3.0);
            double t111172 = 1.0/pow(rho_a[index],1.9E1/3.0);
            double t111174 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]*rho_a[index]);
            double t111181 = 1.0/pow(rho_a[index],3.5E1/3.0);
            double t111182 = gamma_aa[index]*gcab*t111171*(1.6E1/3.0);
            double t111183 = gamma_aa[index]*gcab*t111123*t111124*t111174*1.6E1;
            double t111184 = t111123*t111124*t111172*1.6E1;
            double t111185 = t111125*t111126*t111181*(1.6E1/3.0);
            double t111170 = t111182+t111183+t111184+t111185;
            double t111188 = gamma_aa[index]*gcab*t111171*(8.0/3.0);
            double t111189 = t111123*t111124*t111172*(8.0/3.0);
            double t111173 = t111188+t111189;
            double t111175 = 1.0/pow(rho_a[index],1.4E1/3.0);
            double t111176 = 1.0/(t111162*t111162);
            double t111177 = gamma_aa[index]*gcab*t111171*4.0;
            double t111178 = gamma_aa[index]*gcab*t111123*t111124*t111174*4.0;
            double t111179 = t111123*t111124*t111172*8.0;
            double t111180 = t111177+t111178+t111179;
            double t111186 = 1.0/pow(rho_a[index],3.8E1/3.0);
            double t111187 = 1.0/(t111154*t111154);
            double t111190 = 1.0/(t111166*t111166);
            double t111191 = pow(2.0,1.0/3.0);
            double t111192 = t111191*2.0;
            double t111193 = t111192-2.0;
            double t111194 = a1f*c*t111134;
            double t111195 = t111194+1.0;
            double t111196 = 1.0/c0f;
            double t111197 = b1f*t111136;
            double t111198 = b3f*t111137;
            double t111199 = b4f*t111138*t111099;
            double t111200 = b2f*c*t111134;
            double t111201 = t111200+t111197+t111198+t111199;
            double t111202 = 1.0/t111201;
            double t111203 = t111202*t111196*(1.0/2.0);
            double t111204 = t111203+1.0;
            double t111205 = 1.0/pow(rho_a[index],4.0/3.0);
            double t111206 = 1.0/pow(rho_a[index],5.0/3.0);
            double t111207 = 1.0/sqrt(t111135);
            double t111208 = log(t111204);
            double t111209 = 1.0/t111146;
            double t111210 = 1.0/(t111143*t111143);
            double t111211 = b4p*t111206*t111099*(2.0/3.0);
            double t111212 = b2p*c*t111205*(1.0/3.0);
            double t111213 = b1p*c*t111205*t111207*(1.0/6.0);
            double t111214 = b3p*c*t111205*t111136*(1.0/2.0);
            double t111215 = t111211+t111212+t111213+t111214;
            double t111216 = t111210*t111215*t111209*t111149;
            double t111217 = gcaa*gcaa;
            double t111218 = t111217*t111217;
            double t111219 = 1.0/t111204;
            double t111220 = 1.0/(t111201*t111201);
            double t111221 = b4f*t111206*t111099*(2.0/3.0);
            double t111222 = b2f*c*t111205*(1.0/3.0);
            double t111223 = b1f*c*t111205*t111207*(1.0/6.0);
            double t111224 = b3f*c*t111205*t111136*(1.0/2.0);
            double t111225 = t111221+t111222+t111223+t111224;
            double t111226 = a1f*c*c0f*t111205*t111208*(2.0/3.0);
            double t111227 = a1p*c*c0p*t111205*t111147*(2.0/3.0);
            double t111228 = c0f*t111208*t111195*2.0;
            double t111229 = c0p*t111147*t111149*2.0;
            double t111230 = 1.0/(t111157*t111157);
            double t111231 = ccab4*t111125*t111126*t111127*t111155;
            double t111232 = ccab1*gamma_aa[index]*gcab*t111128*t111158;
            double t111233 = ccab3*gamma_aa[index]*gcab*t111123*t111124*t111163*t111129;
            double t111234 = ccab2*t111130*t111123*t111124*t111167;
            double t111235 = ccab0+t111231+t111232+t111233+t111234;
            double t111236 = b2p*c*t111104*(4.0/9.0);
            double t111237 = b4p*t111103*t111099*(1.0E1/9.0);
            double t111238 = 1.0/pow(t111093,3.0/2.0);
            double t111239 = b3p*t111103*t111105*t111099*(1.0/1.2E1);
            double t111240 = b1p*c*t111104*t111105*(2.0/9.0);
            double t111241 = b3p*c*t111104*t111094*(2.0/3.0);
            double t111242 = t111240+t111241+t111236+t111237+t111239-b1p*t111103*t111238*t111099*(1.0/3.6E1);
            double t111243 = t111110*t111112*t111121*t111242;
            double t111244 = 1.0/(t111102*t111102*t111102);
            double t111245 = 1.0/(t111109*t111109);
            double t111246 = 1.0/(t111102*t111102*t111102*t111102);
            double t111247 = t111120*t111112*t111106*t111245*t111246*(1.0/2.0);
            double t111248 = 1.0/d2fz0;
            double t111249 = 1.0/(rho_a[index]*rho_a[index]);
            double t111250 = 1.0/Aa;
            double t111251 = b1a*t111094;
            double t111252 = b3a*t111096;
            double t111253 = b2a*c*t111092;
            double t111254 = b4a*t111100*t111099;
            double t111255 = t111251+t111252+t111253+t111254;
            double t111256 = 1.0/t111255;
            double t111257 = t111250*t111256*(1.0/2.0);
            double t111258 = t111257+1.0;
            double t111259 = log(t111258);
            double t111260 = a1a*c*t111092;
            double t111261 = t111260+1.0;
            double t111262 = a1p*c*t111110*t111121*t111113*t111114*(2.0/3.0);
            double t111263 = 1.0/pow(rho_a[index],7.0/3.0);
            double t111264 = 1.0/pow(t111135,3.0/2.0);
            double t111265 = t111225*t111225;
            double t111266 = t111215*t111215;
            double t111267 = 1.0/(t111143*t111143*t111143);
            double t111268 = t111209*t111149*t111266*t111267*2.0;
            double t111269 = b4p*t111128*t111099*(1.0E1/9.0);
            double t111270 = b2p*c*t111263*(4.0/9.0);
            double t111271 = b3p*t111207*t111128*t111099*(1.0/1.2E1);
            double t111272 = b1p*c*t111207*t111263*(2.0/9.0);
            double t111273 = b3p*c*t111136*t111263*(2.0/3.0);
            double t111347 = b1p*t111128*t111264*t111099*(1.0/3.6E1);
            double t111274 = t111270+t111271+t111272+t111273-t111347+t111269;
            double t111275 = 1.0/(t111146*t111146);
            double t111276 = 1.0/(t111143*t111143*t111143*t111143);
            double t111277 = a1p*c*c0p*t111263*t111147*(8.0/9.0);
            double t111312 = t111220*t111225*t111219*t111195;
            double t111278 = -t111312+t111216+t111226-t111227;
            double t111279 = a1p*c*c0p*t111113*t111122*(4.0/3.0);
            double t111280 = t111228-t111229;
            double t111281 = gamma_aa[index]*gcaa*t111128*4.0;
            double t111282 = gamma_aa[index]*gcaa*t111123*t111217*t111129*4.0;
            double t111283 = t111130*t111123*t111217*6.0;
            double t111284 = t111125*t111127*t111218;
            double t111285 = t111281+t111282+t111283+t111284+1.0;
            double t111286 = 1.0/t111285;
            double t111287 = gamma_aa[index]*gcaa*t111128;
            double t111288 = t111287+1.0;
            double t111289 = 1.0/t111288;
            double t111290 = gamma_aa[index]*gcaa*t111128*3.0;
            double t111291 = gamma_aa[index]*gcaa*t111123*t111217*t111129;
            double t111292 = t111130*t111123*t111217*3.0;
            double t111293 = t111290+t111291+t111292+1.0;
            double t111294 = 1.0/t111293;
            double t111295 = gamma_aa[index]*gcaa*t111128*2.0;
            double t111296 = t111130*t111123*t111217;
            double t111297 = t111295+t111296+1.0;
            double t111298 = 1.0/t111297;
            double t111299 = t111133*t111280*t111193;
            double t111300 = t111229+t111299;
            double t111301 = 1.0/(t111157*t111157*t111157);
            double t111302 = ccab1*gamma_aa[index]*gcab*t111301*t111123*t111124*t111168*(3.2E1/9.0);
            double t111303 = t111170*t111170;
            double t111304 = 1.0/(t111154*t111154*t111154);
            double t111305 = ccab4*t111303*t111304*t111125*t111126*t111127*2.0;
            double t111306 = t111173*t111173;
            double t111307 = 1.0/(t111166*t111166*t111166);
            double t111308 = ccab2*t111130*t111123*t111124*t111306*t111307*2.0;
            double t111309 = t111180*t111180;
            double t111310 = 1.0/(t111162*t111162*t111162);
            double t111311 = ccab3*gamma_aa[index]*gcab*t111310*t111123*t111124*t111129*t111309*2.0;
            double t111313 = ccaa4*t111125*t111181*t111218*t111286*(3.2E1/3.0);
            double t111314 = ccaa1*gamma_aa[index]*gcaa*t111171*t111289*(8.0/3.0);
            double t111315 = ccaa3*gamma_aa[index]*gcaa*t111123*t111217*t111174*t111294*8.0;
            double t111316 = ccaa2*t111123*t111172*t111217*t111298*(1.6E1/3.0);
            double t111317 = 1.0/(t111288*t111288);
            double t111318 = gamma_aa[index]*gcaa*t111171*8.0;
            double t111319 = gamma_aa[index]*gcaa*t111123*t111217*t111174*8.0;
            double t111320 = t111123*t111172*t111217*1.6E1;
            double t111321 = t111320+t111318+t111319;
            double t111322 = 1.0/(t111293*t111293);
            double t111323 = gamma_aa[index]*gcaa*t111171*(3.2E1/3.0);
            double t111324 = gamma_aa[index]*gcaa*t111123*t111217*t111174*3.2E1;
            double t111325 = t111123*t111172*t111217*3.2E1;
            double t111326 = t111125*t111181*t111218*(3.2E1/3.0);
            double t111327 = t111323+t111324+t111325+t111326;
            double t111328 = 1.0/(t111285*t111285);
            double t111329 = gamma_aa[index]*gcaa*t111171*(1.6E1/3.0);
            double t111330 = t111123*t111172*t111217*(1.6E1/3.0);
            double t111331 = t111330+t111329;
            double t111332 = 1.0/(t111297*t111297);
            double t111333 = t111313+t111314+t111315+t111316-ccaa1*t111123*t111172*t111217*t111317*(8.0/3.0)- \
               ccaa2*t111130*t111123*t111331*t111332*t111217-ccaa4*t111125*t111127*t111218*t111327*t111328-ccaa3* \
               gamma_aa[index]*gcaa*t111123*t111321*t111322*t111217*t111129;
            double t111334 = ccaa4*t111125*t111127*t111218*t111286;
            double t111335 = ccaa1*gamma_aa[index]*gcaa*t111128*t111289;
            double t111336 = ccaa3*gamma_aa[index]*gcaa*t111123*t111217*t111129*t111294;
            double t111337 = ccaa2*t111130*t111123*t111217*t111298;
            double t111338 = ccaa0+t111334+t111335+t111336+t111337;
            double t111339 = 1.0/(t111201*t111201*t111201);
            double t111340 = b4f*t111128*t111099*(1.0E1/9.0);
            double t111341 = b2f*c*t111263*(4.0/9.0);
            double t111342 = b3f*t111207*t111128*t111099*(1.0/1.2E1);
            double t111343 = b1f*c*t111207*t111263*(2.0/9.0);
            double t111344 = b3f*c*t111136*t111263*(2.0/3.0);
            double t111345 = t111340+t111341+t111342+t111343+t111344-b1f*t111128*t111264*t111099*(1.0/3.6E1);
            double t111346 = t111220*t111219*t111345*t111195;
            double t111348 = t111210*t111209*t111274*t111149;
            double t111349 = 1.0/(t111204*t111204);
            double t111350 = 1.0/(t111201*t111201*t111201*t111201);
            double t111351 = t111350*t111265*t111195*t111196*t111349*(1.0/2.0);
            double t111352 = t111106*t111149*t111266*t111275*t111276*(1.0/2.0);
            double t111353 = a1f*c*t111220*t111205*t111225*t111219*(2.0/3.0);
            double t111354 = a1p*c*t111210*t111205*t111215*t111209*(2.0/3.0);
            double t111355 = rho_a[index]*(8.334140006820045E15/1.40737488355328E14);
            double t111356 = omega*omega;
            double t111357 = 1.0/rho_a[index];
            double t111358 = omega*t111356*t111357*(7.0368744177664E13/8.334140006820045E15);
            double t111359 = 1.0/pow(t111355,1.0/3.0);
            double t111360 = gx*gx;
            double t111361 = t111360*t111360;
            double t111362 = gamma_aa[index]*gx*t111128;
            double t111363 = t111362+1.0;
            double t111383 = gamma_aa[index]*gx*t111171*(3.2E1/3.0);
            double t111384 = gamma_aa[index]*gx*t111123*t111360*t111174*3.2E1;
            double t111385 = t111123*t111360*t111172*3.2E1;
            double t111386 = t111125*t111181*t111361*(3.2E1/3.0);
            double t111364 = t111383+t111384+t111385+t111386;
            double t111365 = gamma_aa[index]*gx*t111128*4.0;
            double t111366 = gamma_aa[index]*gx*t111123*t111360*t111129*4.0;
            double t111367 = t111130*t111123*t111360*6.0;
            double t111368 = t111125*t111127*t111361;
            double t111369 = t111365+t111366+t111367+t111368+1.0;
            double t111388 = gamma_aa[index]*gx*t111171*(1.6E1/3.0);
            double t111389 = t111123*t111360*t111172*(1.6E1/3.0);
            double t111370 = t111388+t111389;
            double t111371 = gamma_aa[index]*gx*t111128*2.0;
            double t111372 = t111130*t111123*t111360;
            double t111373 = t111371+t111372+1.0;
            double t111374 = gamma_aa[index]*gx*t111128*3.0;
            double t111375 = gamma_aa[index]*gx*t111123*t111360*t111129;
            double t111376 = t111130*t111123*t111360*3.0;
            double t111377 = t111374+t111375+t111376+1.0;
            double t111378 = 1.0/(t111377*t111377);
            double t111379 = gamma_aa[index]*gx*t111171*8.0;
            double t111380 = gamma_aa[index]*gx*t111123*t111360*t111174*8.0;
            double t111381 = t111123*t111360*t111172*1.6E1;
            double t111382 = t111380+t111381+t111379;
            double t111387 = 1.0/(t111369*t111369);
            double t111390 = 1.0/(t111373*t111373);
            double t111391 = 1.0/(omega*omega);
            double t111392 = pow(t111355,2.0/3.0);
            double t111396 = t111391*t111392;
            double t111393 = exp(-t111396);
            double t111394 = 1.0/pow(t111355,4.0/3.0);
            double t111395 = 1.0/omega;
            double t111402 = omega*t111359;
            double t111397 = -t111402+t111358;
            double t111398 = pow(t111355,1.0/3.0);
            double t111399 = t111395*t111398;
            double t111400 = erf(t111399);
            double t111401 = t111400*(3.991211251234741E15/2.251799813685248E15);
            double t111408 = t111393*t111397;
            double t111409 = omega*t111359*(3.0/2.0);
            double t111403 = t111401-t111408-t111409+t111358;
            double t111404 = 1.0/t111369;
            double t111405 = 1.0/t111363;
            double t111406 = 1.0/t111377;
            double t111407 = 1.0/t111373;
            double t111410 = omega*t111403*t111359*(4.0/3.0);
            double t111411 = t111410-1.0;
            double t111412 = cx4*t111125*t111404*t111127*t111361;
            double t111413 = cx1*gamma_aa[index]*gx*t111405*t111128;
            double t111414 = cx3*gamma_aa[index]*gx*t111123*t111360*t111406*t111129;
            double t111415 = cx2*t111130*t111123*t111360*t111407;
            double t111416 = cx0+t111412+t111413+t111414+t111415;
            double t111417 = pow(rho_a[index],4.0/3.0);
            double t111418 = omega*t111394*(8.334140006820045E15/2.81474976710656E14);
            double t111419 = omega*t111394*(2.778046668940015E15/1.40737488355328E14);
            double t111435 = omega*t111356*t111249*(7.0368744177664E13/8.334140006820045E15);
            double t111420 = -t111435+t111419;
            double t111421 = 1.0/sqrt(3.141592653589793);
            double t111422 = 1.0/pow(t111355,2.0/3.0);
            double t111423 = t111421*t111422*t111393*t111395*(1.108777112152858E31/1.584563250285287E29);
            double t111424 = t111391*t111393*t111359*t111397*(2.778046668940015E15/7.0368744177664E13);
            double t111425 = t111423+t111424+t111418-t111420*t111393-omega*t111356*t111249*(7.0368744177664E13/ \
               8.334140006820045E15);
            double t111426 = omega*t111403*t111394*(2.778046668940015E15/1.05553116266496E14);
            double t111427 = 1.0/(t111363*t111363);
            double t111428 = t111426-omega*t111425*t111359*(4.0/3.0);
            double t111429 = pow(rho_a[index],1.0/3.0);
            double t111430 = cx4*t111125*t111404*t111181*t111361*(3.2E1/3.0);
            double t111431 = cx1*gamma_aa[index]*gx*t111171*t111405*(8.0/3.0);
            double t111432 = cx3*gamma_aa[index]*gx*t111123*t111360*t111406*t111174*8.0;
            double t111433 = cx2*t111123*t111360*t111172*t111407*(1.6E1/3.0);
            double t111434 = t111430+t111431+t111432+t111433-cx1*t111123*t111360*t111172*t111427*(8.0/3.0)-cx2* \
               t111130*t111123*t111360*t111370*t111390-cx4*t111125*t111127*t111361*t111364*t111387-cx3*gamma_aa[index]* \
               gx*t111123*t111360*t111129*t111382*t111378;
            double t111436 = 1.0/pow(t111355,7.0/3.0);
            double t111437 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]);
            double t111438 = t111435-t111419;
            v_rho_a_rho_a_[index] = -t111235*(-t111279-rho_a[index]*(t111243+t111262+t111247-t111110*t111120* \
               t111112*t111244*2.0-a1p*c*c0p*t111104*t111122*(8.0/9.0)+Aa*t111133*t111261*t111248*t111249*t111259* \
               (4.0/9.0))*2.0+rho_a[index]*(t111352+t111354+t111348-t111268-t111277+t111133*t111193*(t111351+t111353+ \
               t111346+t111268+t111277-t111210*t111209*t111274*t111149-t111219*t111265*t111195*t111339*2.0-a1f*c* \
               c0f*t111208*t111263*(8.0/9.0)-t111106*t111149*t111266*t111275*t111276*(1.0/2.0)-a1p*c*t111210*t111205* \
               t111215*t111209*(2.0/3.0)))+t111133*t111193*t111278*2.0+t111110*t111112*t111121*t111114*2.0-t111210* \
               t111215*t111209*t111149*2.0+a1p*c*c0p*t111205*t111147*(4.0/3.0))+t111300*t111333*2.0+(rho_a[index]* \
               (t111229+t111133*t111193*(t111228-c0p*t111147*t111149*2.0))*2.0-c0p*rho_a[index]*t111112*t111122*4.0) \
               *(t111302+t111311+t111305+t111308+ccab1*gamma_aa[index]*gcab*t111175*t111158*(4.4E1/9.0)-ccab1*t111230* \
               t111123*t111124*t111169*(7.6E1/9.0)+ccab2*t111123*t111124*t111167*t111169*(4.0E1/3.0)+ccab4*t111125* \
               t111126*t111155*t111186*(3.68E2/9.0)-ccab2*t111123*t111124*t111172*t111190*t111173*(1.6E1/3.0)-ccab4* \
               t111125*t111170*t111126*t111181*t111187*(3.2E1/3.0)-ccab2*t111130*t111123*t111124*t111190*(gamma_aa[index]* \
               gcab*t111175*(8.8E1/9.0)+t111123*t111124*t111169*(4.0E1/3.0))-ccab4*t111125*t111126*t111127*t111187* \
               (gamma_aa[index]*gcab*t111175*(1.76E2/9.0)+t111123*t111124*t111169*8.0E1+t111125*t111126*t111186*(3.68E2/ \
               9.0)+gamma_aa[index]*gcab*t111123*t111124*t111168*(3.04E2/3.0))+ccab3*gamma_aa[index]*gcab*t111123* \
               t111124*t111163*t111168*(7.6E1/3.0)-ccab3*gamma_aa[index]*gcab*t111123*t111124*t111129*t111176*(gamma_aa[index]* \
               gcab*t111175*(4.4E1/3.0)+t111123*t111124*t111169*4.0E1+gamma_aa[index]*gcab*t111123*t111124*t111168* \
               (7.6E1/3.0))-ccab3*gamma_aa[index]*gcab*t111123*t111124*t111180*t111174*t111176*8.0)+t111338*(-t111216+ \
               t111227+t111133*t111193*(t111216+t111226-t111220*t111225*t111219*t111195-a1p*c*c0p*t111205*t111147* \
               (2.0/3.0)))*2.0+(-t111229+rho_a[index]*(-t111216+t111227+t111133*t111193*t111278)+rho_a[index]*(t111110* \
               t111112*t111121*t111114-a1p*c*c0p*t111113*t111122*(2.0/3.0))*2.0+c0p*t111112*t111122*2.0-t111133*t111280* \
               t111193)*(ccab1*gamma_aa[index]*gcab*t111171*t111158*(4.0/3.0)-ccab1*t111230*t111123*t111124*t111172* \
               (4.0/3.0)+ccab2*t111123*t111124*t111172*t111167*(8.0/3.0)+ccab4*t111125*t111126*t111181*t111155*(1.6E1/ \
               3.0)-ccab2*t111130*t111123*t111124*t111190*t111173-ccab4*t111125*t111170*t111126*t111127*t111187+ccab3* \
               gamma_aa[index]*gcab*t111123*t111124*t111163*t111174*4.0-ccab3*gamma_aa[index]*gcab*t111123*t111124* \
               t111180*t111129*t111176)*4.0+(rho_a[index]*t111300*2.0-c0p*rho_a[index]*t111112*t111122*4.0)*(t111302+ \
               t111311+t111305+t111308-ccab1*t111230*t111123*t111124*t111169*(3.2E1/9.0)-ccab2*t111125*t111126*t111190* \
               t111186*(3.2E1/9.0)+ccab2*t111123*t111124*t111167*t111169*(3.2E1/9.0)+ccab4*t111125*t111126*t111155* \
               t111186*(6.4E1/3.0)-ccab2*t111123*t111124*t111172*t111190*t111173*(1.6E1/3.0)-ccab4*t111125*t111170* \
               t111126*t111181*t111187*(3.2E1/3.0)-ccab4*t111125*t111126*t111127*t111187*(t111123*t111124*t111169* \
               (6.4E1/3.0)+t111125*t111126*t111186*(6.4E1/3.0)+gamma_aa[index]*gcab*t111123*t111124*t111168*(1.28E2/ \
               3.0))+ccab3*gamma_aa[index]*gcab*t111123*t111124*t111163*t111168*(3.2E1/3.0)-ccab3*gamma_aa[index]* \
               gcab*t111123*t111124*t111129*t111176*(t111123*t111124*t111169*(3.2E1/3.0)+gamma_aa[index]*gcab*t111123* \
               t111124*t111168*(3.2E1/3.0))-ccab3*gamma_aa[index]*gcab*t111123*t111124*t111180*t111174*t111176*8.0) \
               +t111235*(t111279+rho_a[index]*(t111243+t111262+t111247-t111110*t111120*t111112*t111244*2.0-a1p*c* \
               c0p*t111104*t111122*(8.0/9.0)-Aa*t111133*t111261*t111248*t111249*t111259*(4.0/9.0))*2.0-t111110*t111112* \
               t111121*t111114*2.0)+rho_a[index]*t111333*(t111216-t111227+t111133*t111193*(t111312-t111216-t111226+ \
               t111227))*2.0-rho_a[index]*t111300*(ccaa1*gamma_aa[index]*gcaa*t111175*t111289*(8.8E1/9.0)-ccaa1*t111123* \
               t111217*t111317*t111169*2.4E1+ccaa2*t111123*t111217*t111169*t111298*(3.04E2/9.0)+ccaa4*t111125*t111218* \
               t111186*t111286*(1.12E3/9.0)-ccaa2*t111123*t111331*t111332*t111172*t111217*(3.2E1/3.0)-ccaa4*t111125* \
               t111181*t111218*t111327*t111328*(6.4E1/3.0)-ccaa2*t111130*t111123*t111332*t111217*(gamma_aa[index]* \
               gcaa*t111175*(1.76E2/9.0)+t111123*t111217*t111169*(3.04E2/9.0))-ccaa4*t111125*t111127*t111218*t111328* \
               (gamma_aa[index]*gcaa*t111175*(3.52E2/9.0)+t111123*t111217*t111169*(6.08E2/3.0)+t111125*t111218*t111186* \
               (1.12E3/9.0)+gamma_aa[index]*gcaa*t111123*t111217*t111168*2.88E2)+ccaa2*t111130*t111123*(t111331*t111331) \
               *t111217*1.0/(t111297*t111297*t111297)*2.0+ccaa4*t111125*t111127*t111218*(t111327*t111327)*1.0/(t111285* \
               t111285*t111285)*2.0+ccaa3*gamma_aa[index]*gcaa*t111123*t111217*t111168*t111294*7.2E1+ccaa1*gamma_aa[index]* \
               gcaa*t111123*t111217*t111168*1.0/(t111288*t111288*t111288)*(1.28E2/9.0)+ccaa3*gamma_aa[index]*gcaa* \
               t111123*(t111321*t111321)*t111217*t111129*1.0/(t111293*t111293*t111293)*2.0-ccaa3*gamma_aa[index]* \
               gcaa*t111123*t111322*t111217*t111129*(gamma_aa[index]*gcaa*t111175*(8.8E1/3.0)+t111123*t111217*t111169* \
               (3.04E2/3.0)+gamma_aa[index]*gcaa*t111123*t111217*t111168*7.2E1)-ccaa3*gamma_aa[index]*gcaa*t111123* \
               t111321*t111322*t111217*t111174*1.6E1)+rho_a[index]*t111338*(t111352+t111354+t111348-t111268-t111277+ \
               t111133*t111193*(t111351-t111352+t111353-t111354+t111346-t111348+t111268+t111277-t111219*t111265*t111195* \
               t111339*2.0-a1f*c*c0f*t111208*t111263*(8.0/9.0)))-c0*t111411*t111417*(cx1*gamma_aa[index]*gx*t111405* \
               t111175*(8.8E1/9.0)-cx1*t111123*t111360*t111427*t111169*2.4E1+cx2*t111123*t111360*t111407*t111169* \
               (3.04E2/9.0)+cx4*t111125*t111404*t111361*t111186*(1.12E3/9.0)-cx2*t111123*t111360*t111172*t111370* \
               t111390*(3.2E1/3.0)-cx4*t111125*t111181*t111361*t111364*t111387*(6.4E1/3.0)-cx2*t111130*t111123*t111360* \
               t111390*(gamma_aa[index]*gx*t111175*(1.76E2/9.0)+t111123*t111360*t111169*(3.04E2/9.0))-cx4*t111125* \
               t111127*t111361*t111387*(gamma_aa[index]*gx*t111175*(3.52E2/9.0)+t111123*t111360*t111169*(6.08E2/3.0) \
               +t111125*t111361*t111186*(1.12E3/9.0)+gamma_aa[index]*gx*t111123*t111360*t111168*2.88E2)+cx2*t111130* \
               t111123*t111360*(t111370*t111370)*1.0/(t111373*t111373*t111373)*2.0+cx4*t111125*t111127*t111361*(t111364* \
               t111364)*1.0/(t111369*t111369*t111369)*2.0+cx3*gamma_aa[index]*gx*t111123*t111360*t111406*t111168* \
               7.2E1+cx1*gamma_aa[index]*gx*t111123*t111360*1.0/(t111363*t111363*t111363)*t111168*(1.28E2/9.0)+cx3* \
               gamma_aa[index]*gx*t111123*t111360*t111129*(t111382*t111382)*1.0/(t111377*t111377*t111377)*2.0-cx3* \
               gamma_aa[index]*gx*t111123*t111360*t111129*t111378*(gamma_aa[index]*gx*t111175*(8.8E1/3.0)+t111123* \
               t111360*t111169*(3.04E2/3.0)+gamma_aa[index]*gx*t111123*t111360*t111168*7.2E1)-cx3*gamma_aa[index]* \
               gx*t111123*t111360*t111174*t111382*t111378*1.6E1)+c0*t111416*t111417*(omega*t111394*(t111423+t111424- \
               t111435+t111418+t111393*t111438)*(2.778046668940015E15/5.2776558133248E13)+omega*t111359*(omega*t111436* \
               (2.315262988442614E31/9.903520314283042E27)-t111393*(omega*t111436*(7.717543294808713E30/4.951760157141521E27) \
               -omega*t111356*t111437*(1.40737488355328E14/8.334140006820045E15))-omega*t111356*t111437*(1.40737488355328E14/ \
               8.334140006820045E15)+t111391*t111393*t111438*t111359*(2.778046668940015E15/3.5184372088832E13)+t111391* \
               t111393*t111394*t111397*(7.717543294808713E30/9.903520314283042E27)+1.0/(omega*omega*omega)*t111421* \
               t111357*t111393*(1.108777112152858E31/2.37684487542793E29)+1.0/(omega*omega*omega*omega)*t111422*t111393* \
               t111397*(7.717543294808713E30/4.951760157141521E27)+t111421*1.0/pow(t111355,5.0/3.0)*t111393*t111395* \
               (3.080234563013177E46/1.115037259926531E43))*(4.0/3.0)-omega*t111403*t111436*(7.717543294808713E30/ \
               3.713820117856141E27))-c0*t111411*t111416*t111138*(4.0/9.0)+c0*t111411*t111434*t111429*(8.0/3.0)-c0* \
               t111434*t111417*t111428*2.0+c0*t111416*t111428*t111429*(8.0/3.0);
        } else {
            v_rho_a_rho_a_[index] = 0.0;
        }

        if (is_gga_) {

            //V_rho_a_gamma_aa
            if (rho_a[index] > cutoff_) {
                double t111440 = 1.0/pow(rho_a[index],1.0/3.0);
                double t111441 = c*t111440;
                double t111442 = sqrt(t111441);
                double t111443 = pow(t111441,3.0/2.0);
                double t111444 = c*c;
                double t111445 = 1.0/pow(rho_a[index],2.0/3.0);
                double t111446 = 1.0/c0p;
                double t111447 = b1p*t111442;
                double t111448 = b3p*t111443;
                double t111449 = b4p*t111444*t111445;
                double t111450 = b2p*c*t111440;
                double t111451 = t111450+t111447+t111448+t111449;
                double t111452 = 1.0/t111451;
                double t111453 = t111452*t111446*(1.0/2.0);
                double t111454 = t111453+1.0;
                double t111455 = log(t111454);
                double t111456 = a1p*c*t111440;
                double t111457 = t111456+1.0;
                double t111458 = 1.0/pow(rho_a[index],8.0/3.0);
                double t111459 = gamma_aa[index]*gamma_aa[index];
                double t111460 = gcaa*gcaa;
                double t111461 = t111460*t111460;
                double t111462 = 1.0/pow(rho_a[index],3.2E1/3.0);
                double t111463 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t111464 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t111465 = gamma_aa[index]*gcaa*t111458;
                double t111466 = t111465+1.0;
                double t111467 = gamma_aa[index]*gcaa*t111458*3.0;
                double t111468 = gamma_aa[index]*gcaa*t111460*t111464*t111459;
                double t111469 = t111460*t111463*t111459*3.0;
                double t111470 = t111467+t111468+t111469+1.0;
                double t111471 = t111459*t111459;
                double t111472 = gamma_aa[index]*gcaa*t111458*4.0;
                double t111473 = gamma_aa[index]*gcaa*t111460*t111464*t111459*4.0;
                double t111474 = t111460*t111463*t111459*6.0;
                double t111475 = t111461*t111462*t111471;
                double t111476 = t111472+t111473+t111474+t111475+1.0;
                double t111477 = gamma_aa[index]*gcaa*t111458*2.0;
                double t111478 = t111460*t111463*t111459;
                double t111479 = t111477+t111478+1.0;
                double t111480 = pow(2.0,1.0/3.0);
                double t111481 = t111480*2.0;
                double t111482 = t111481-2.0;
                double t111483 = two_13*2.0;
                double t111484 = t111483-2.0;
                double t111485 = 1.0/t111484;
                double t111486 = 1.0/c0f;
                double t111487 = b1f*t111442;
                double t111488 = b3f*t111443;
                double t111489 = b4f*t111444*t111445;
                double t111490 = b2f*c*t111440;
                double t111491 = t111490+t111487+t111488+t111489;
                double t111492 = 1.0/t111491;
                double t111493 = t111492*t111486*(1.0/2.0);
                double t111494 = t111493+1.0;
                double t111495 = log(t111494);
                double t111496 = a1f*c*t111440;
                double t111497 = t111496+1.0;
                double t111498 = c0f*t111495*t111497*2.0;
                double t111499 = c0p*t111455*t111457*2.0;
                double t111500 = rho_a[index]*2.0;
                double t111501 = 1.0/pow(t111500,1.0/3.0);
                double t111502 = c*t111501;
                double t111503 = gcab*gcab;
                double t111504 = t111503*t111503;
                double t111505 = 1.0/pow(rho_a[index],1.9E1/3.0);
                double t111506 = 1.0/pow(rho_a[index],3.5E1/3.0);
                double t111507 = gamma_aa[index]*gcab*t111458*2.0;
                double t111508 = t111503*t111463*t111459;
                double t111509 = t111507+t111508+1.0;
                double t111510 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]*rho_a[index]);
                double t111511 = gamma_aa[index]*gcab*t111458;
                double t111512 = t111511+1.0;
                double t111513 = gamma_aa[index]*gcab*t111458*3.0;
                double t111514 = gamma_aa[index]*gcab*t111503*t111464*t111459;
                double t111515 = t111503*t111463*t111459*3.0;
                double t111516 = t111513+t111514+t111515+1.0;
                double t111517 = gamma_aa[index]*gcab*t111458*4.0;
                double t111518 = gamma_aa[index]*gcab*t111503*t111464*t111459*4.0;
                double t111519 = t111503*t111463*t111459*6.0;
                double t111520 = t111504*t111462*t111471;
                double t111521 = t111520+t111517+t111518+t111519+1.0;
                double t111522 = 1.0/pow(rho_a[index],1.1E1/3.0);
                double t111523 = 1.0/(t111509*t111509);
                double t111524 = 1.0/(t111516*t111516);
                double t111525 = 1.0/(t111521*t111521);
                double t111526 = gamma_aa[index]*gcab*t111522*(8.0/3.0);
                double t111527 = t111503*t111505*t111459*(8.0/3.0);
                double t111528 = t111526+t111527;
                double t111529 = gcab*t111458;
                double t111530 = gamma_aa[index]*t111503*t111463;
                double t111531 = t111530+t111529;
                double t111532 = gcab*t111458*(3.0/2.0);
                double t111533 = gamma_aa[index]*t111503*t111463*3.0;
                double t111534 = gcab*t111503*t111464*t111459*(3.0/2.0);
                double t111535 = t111532+t111533+t111534;
                double t111536 = gamma_aa[index]*gcab*t111522*4.0;
                double t111537 = gamma_aa[index]*gcab*t111510*t111503*t111459*4.0;
                double t111538 = t111503*t111505*t111459*8.0;
                double t111539 = t111536+t111537+t111538;
                double t111540 = gamma_aa[index]*gcab*t111522*(1.6E1/3.0);
                double t111541 = gamma_aa[index]*gcab*t111510*t111503*t111459*1.6E1;
                double t111542 = t111503*t111505*t111459*1.6E1;
                double t111543 = t111504*t111506*t111471*(1.6E1/3.0);
                double t111544 = t111540+t111541+t111542+t111543;
                double t111545 = gcab*t111458*2.0;
                double t111546 = gamma_aa[index]*t111503*t111463*6.0;
                double t111547 = gcab*t111503*t111464*t111459*6.0;
                double t111548 = gamma_aa[index]*t111504*t111462*t111459*2.0;
                double t111549 = t111545+t111546+t111547+t111548;
                double t111550 = t111498-t111499;
                double t111551 = t111550*t111482*t111485;
                double t111552 = t111551+t111499;
                double t111553 = rho_a[index]*t111552*2.0;
                double t111554 = sqrt(t111502);
                double t111555 = b1p*t111554;
                double t111556 = pow(t111502,3.0/2.0);
                double t111557 = b3p*t111556;
                double t111558 = b2p*c*t111501;
                double t111559 = 1.0/pow(t111500,2.0/3.0);
                double t111560 = b4p*t111444*t111559;
                double t111561 = t111560+t111555+t111557+t111558;
                double t111562 = 1.0/t111561;
                double t111563 = t111562*t111446*(1.0/2.0);
                double t111564 = t111563+1.0;
                double t111565 = log(t111564);
                double t111566 = a1p*c*t111501;
                double t111567 = t111566+1.0;
                double t111568 = t111553-c0p*rho_a[index]*t111565*t111567*4.0;
                double t111569 = 1.0/t111521;
                double t111570 = 1.0/t111509;
                double t111571 = 1.0/t111516;
                double t111572 = 1.0/(t111512*t111512);
                double t111573 = 1.0/(t111512*t111512*t111512);
                double t111574 = ccab3*gcab*t111503*t111524*t111464*t111539*t111459*(3.0/2.0);
                double t111575 = ccab2*gamma_aa[index]*t111503*t111523*t111463*t111528;
                double t111576 = ccab3*gamma_aa[index]*gcab*t111510*t111503*t111524*t111535*t111459*4.0;
                double t111577 = ccab4*gamma_aa[index]*t111504*t111462*t111525*t111544*t111459*2.0;
                double t111578 = ccab4*t111504*t111506*t111471*t111525*t111549*(1.6E1/3.0);
                double t111579 = ccab2*t111503*t111531*t111505*t111523*t111459*(8.0/3.0);
                double t111580 = gamma_aa[index]*t111503*t111505*4.0;
                double t111581 = 1.0/(t111509*t111509*t111509);
                double t111582 = 1.0/(t111516*t111516*t111516);
                double t111583 = 1.0/(t111521*t111521*t111521);
                double t111584 = 1.0/pow(t111500,4.0/3.0);
                double t111585 = 1.0/pow(rho_a[index],4.0/3.0);
                double t111586 = 1.0/pow(rho_a[index],5.0/3.0);
                double t111587 = 1.0/sqrt(t111441);
                double t111588 = 1.0/t111454;
                double t111589 = 1.0/(t111451*t111451);
                double t111590 = b4p*t111444*t111586*(2.0/3.0);
                double t111591 = b2p*c*t111585*(1.0/3.0);
                double t111592 = b1p*c*t111585*t111587*(1.0/6.0);
                double t111593 = b3p*c*t111442*t111585*(1.0/2.0);
                double t111594 = t111590+t111591+t111592+t111593;
                double t111595 = t111457*t111594*t111588*t111589;
                double t111596 = 1.0/t111512;
                double t111597 = 1.0/t111466;
                double t111598 = 1.0/t111476;
                double t111599 = 1.0/t111479;
                double t111600 = 1.0/t111470;
                double t111601 = 1.0/(t111466*t111466);
                double t111602 = 1.0/(t111470*t111470);
                double t111603 = 1.0/(t111479*t111479);
                double t111604 = gcaa*t111458*3.0;
                double t111605 = gamma_aa[index]*t111460*t111463*6.0;
                double t111606 = gcaa*t111460*t111464*t111459*3.0;
                double t111607 = t111604+t111605+t111606;
                double t111608 = 1.0/(t111476*t111476);
                double t111609 = gcaa*t111458*4.0;
                double t111610 = gamma_aa[index]*t111460*t111463*1.2E1;
                double t111611 = gcaa*t111460*t111464*t111459*1.2E1;
                double t111612 = gamma_aa[index]*t111461*t111462*t111459*4.0;
                double t111613 = t111610+t111611+t111612+t111609;
                double t111614 = gcaa*t111458*2.0;
                double t111615 = gamma_aa[index]*t111460*t111463*2.0;
                double t111616 = t111614+t111615;
                double t111617 = gamma_aa[index]*gcaa*t111522*(1.6E1/3.0);
                double t111618 = t111460*t111505*t111459*(1.6E1/3.0);
                double t111619 = t111617+t111618;
                double t111620 = gamma_aa[index]*gcaa*t111522*8.0;
                double t111621 = gamma_aa[index]*gcaa*t111510*t111460*t111459*8.0;
                double t111622 = t111460*t111505*t111459*1.6E1;
                double t111623 = t111620+t111621+t111622;
                double t111624 = gamma_aa[index]*gcaa*t111522*(3.2E1/3.0);
                double t111625 = gamma_aa[index]*gcaa*t111510*t111460*t111459*3.2E1;
                double t111626 = t111460*t111505*t111459*3.2E1;
                double t111627 = t111461*t111506*t111471*(3.2E1/3.0);
                double t111628 = t111624+t111625+t111626+t111627;
                double t111629 = 1.0/t111494;
                double t111630 = 1.0/(t111491*t111491);
                double t111631 = b4f*t111444*t111586*(2.0/3.0);
                double t111632 = b2f*c*t111585*(1.0/3.0);
                double t111633 = b1f*c*t111585*t111587*(1.0/6.0);
                double t111634 = b3f*c*t111442*t111585*(1.0/2.0);
                double t111635 = t111631+t111632+t111633+t111634;
                double t111636 = a1f*c*c0f*t111495*t111585*(2.0/3.0);
                double t111637 = a1p*c*c0p*t111455*t111585*(2.0/3.0);
                double t111638 = ccaa1*gcaa*t111458*t111597;
                double t111639 = ccaa4*gamma_aa[index]*t111461*t111462*t111459*t111598*4.0;
                double t111640 = ccaa2*gamma_aa[index]*t111460*t111463*t111599*2.0;
                double t111641 = ccaa3*gcaa*t111600*t111460*t111464*t111459*3.0;
                double t111642 = t111640+t111641+t111638+t111639-ccaa1*gamma_aa[index]*t111601*t111460*t111463-ccaa4* \
                   t111613*t111461*t111462*t111471*t111608-ccaa2*t111603*t111460*t111463*t111616*t111459-ccaa3*gamma_aa[index]* \
                   gcaa*t111602*t111460*t111607*t111464*t111459;
                double t111643 = omega*omega;
                double t111644 = rho_a[index]*(8.334140006820045E15/1.40737488355328E14);
                double t111645 = 1.0/(rho_a[index]*rho_a[index]);
                double t111646 = 1.0/pow(t111644,4.0/3.0);
                double t111647 = 1.0/(omega*omega);
                double t111648 = pow(t111644,2.0/3.0);
                double t111650 = t111647*t111648;
                double t111649 = exp(-t111650);
                double t111651 = 1.0/pow(t111644,1.0/3.0);
                double t111652 = 1.0/omega;
                double t111653 = 1.0/rho_a[index];
                double t111654 = omega*t111643*t111653*(7.0368744177664E13/8.334140006820045E15);
                double t111655 = omega*t111651;
                double t111656 = gx*gx;
                double t111657 = t111656*t111656;
                double t111658 = gamma_aa[index]*gx*t111458;
                double t111659 = t111658+1.0;
                double t111660 = gamma_aa[index]*gx*t111458*3.0;
                double t111661 = gamma_aa[index]*gx*t111464*t111656*t111459;
                double t111662 = t111463*t111656*t111459*3.0;
                double t111663 = t111660+t111661+t111662+1.0;
                double t111664 = gamma_aa[index]*gx*t111458*4.0;
                double t111665 = gamma_aa[index]*gx*t111464*t111656*t111459*4.0;
                double t111666 = t111463*t111656*t111459*6.0;
                double t111667 = t111462*t111471*t111657;
                double t111668 = t111664+t111665+t111666+t111667+1.0;
                double t111669 = gamma_aa[index]*gx*t111458*2.0;
                double t111670 = t111463*t111656*t111459;
                double t111671 = t111670+t111669+1.0;
                double t111672 = pow(t111644,1.0/3.0);
                double t111673 = t111652*t111672;
                double t111674 = erf(t111673);
                double t111675 = t111674*(3.991211251234741E15/2.251799813685248E15);
                double t111676 = t111654-t111655;
                double t111704 = t111649*t111676;
                double t111705 = omega*t111651*(3.0/2.0);
                double t111677 = -t111704-t111705+t111654+t111675;
                double t111678 = 1.0/t111659;
                double t111679 = cx1*gx*t111458*t111678;
                double t111680 = 1.0/t111668;
                double t111681 = cx4*gamma_aa[index]*t111462*t111680*t111459*t111657*4.0;
                double t111682 = 1.0/t111671;
                double t111683 = cx2*gamma_aa[index]*t111463*t111682*t111656*2.0;
                double t111684 = 1.0/t111663;
                double t111685 = cx3*gx*t111464*t111656*t111459*t111684*3.0;
                double t111686 = 1.0/(t111659*t111659);
                double t111687 = gx*t111458*3.0;
                double t111688 = gamma_aa[index]*t111463*t111656*6.0;
                double t111689 = gx*t111464*t111656*t111459*3.0;
                double t111690 = t111687+t111688+t111689;
                double t111691 = 1.0/(t111663*t111663);
                double t111692 = gx*t111458*4.0;
                double t111693 = gamma_aa[index]*t111463*t111656*1.2E1;
                double t111694 = gx*t111464*t111656*t111459*1.2E1;
                double t111695 = gamma_aa[index]*t111462*t111459*t111657*4.0;
                double t111696 = t111692+t111693+t111694+t111695;
                double t111697 = 1.0/(t111668*t111668);
                double t111698 = gx*t111458*2.0;
                double t111699 = gamma_aa[index]*t111463*t111656*2.0;
                double t111700 = t111698+t111699;
                double t111701 = 1.0/(t111671*t111671);
                double t111702 = t111681+t111683+t111685+t111679-cx1*gamma_aa[index]*t111463*t111656*t111686-cx2* \
                   t111700*t111701*t111463*t111656*t111459-cx4*t111462*t111471*t111657*t111696*t111697-cx3*gamma_aa[index]* \
                   gx*t111464*t111690*t111691*t111656*t111459;
                double t111703 = pow(rho_a[index],4.0/3.0);
                double t111706 = omega*t111651*t111677*(4.0/3.0);
                double t111707 = t111706-1.0;
                double t111708 = gamma_aa[index]*gx*t111522*(1.6E1/3.0);
                double t111709 = t111505*t111656*t111459*(1.6E1/3.0);
                double t111710 = t111708+t111709;
                double t111711 = gamma_aa[index]*gx*t111522*8.0;
                double t111712 = gamma_aa[index]*gx*t111510*t111656*t111459*8.0;
                double t111713 = t111505*t111656*t111459*1.6E1;
                double t111714 = t111711+t111712+t111713;
                double t111715 = gamma_aa[index]*gx*t111522*(3.2E1/3.0);
                double t111716 = gamma_aa[index]*gx*t111510*t111656*t111459*3.2E1;
                double t111717 = t111505*t111656*t111459*3.2E1;
                double t111718 = t111506*t111471*t111657*(3.2E1/3.0);
                double t111719 = t111715+t111716+t111717+t111718;
                v_rho_a_gamma_aa_[index] = t111568*(t111574+t111575+t111576+t111577+t111578+t111579-ccab2*gamma_aa[index]* \
                   t111503*t111505*t111570*(4.0/3.0)+ccab1*gamma_aa[index]*t111503*t111505*t111572*(4.0/3.0)+ccab4*t111504* \
                   t111462*t111471*t111525*(gamma_aa[index]*t111503*t111505*8.0+gamma_aa[index]*t111504*t111506*t111459* \
                   8.0+gcab*t111510*t111503*t111459*1.6E1)+ccab2*gamma_aa[index]*t111504*t111523*t111506*t111459*(4.0/ \
                   3.0)-ccab4*gamma_aa[index]*t111504*t111506*t111459*t111569*8.0-ccab1*gcab*t111510*t111503*t111573* \
                   t111459*(4.0/3.0)-ccab3*gcab*t111510*t111503*t111571*t111459*4.0-ccab2*t111503*t111531*t111463*t111581* \
                   t111528*t111459*2.0-ccab4*t111504*t111462*t111471*t111544*t111583*t111549*2.0+ccab3*gamma_aa[index]* \
                   gcab*t111503*t111524*t111464*t111459*(t111580+gcab*t111510*t111503*t111459*4.0)-ccab3*gamma_aa[index]* \
                   gcab*t111503*t111535*t111464*t111582*t111539*t111459*2.0)-t111642*(t111499+t111482*t111485*(t111498- \
                   c0p*t111455*t111457*2.0))-(-t111551-t111499+rho_a[index]*((1.0/(t111561*t111561)*t111567*(b4p*1.0/ \
                   pow(t111500,5.0/3.0)*t111444*(2.0/3.0)+b2p*c*t111584*(1.0/3.0)+b3p*c*t111554*t111584*(1.0/2.0)+b1p* \
                   c*1.0/sqrt(t111502)*t111584*(1.0/6.0)))/t111564-a1p*c*c0p*t111565*t111584*(2.0/3.0))*2.0+rho_a[index]* \
                   (t111637-t111595+t111482*t111485*(t111636+t111595-t111630*t111635*t111629*t111497-a1p*c*c0p*t111455* \
                   t111585*(2.0/3.0)))+c0p*t111565*t111567*2.0)*(ccab1*gcab*t111458*t111596*(1.0/2.0)+ccab2*gamma_aa[index]* \
                   t111503*t111570*t111463-ccab1*gamma_aa[index]*t111503*t111463*t111572*(1.0/2.0)-ccab2*t111503*t111531* \
                   t111523*t111463*t111459-ccab4*t111504*t111462*t111471*t111525*t111549+ccab4*gamma_aa[index]*t111504* \
                   t111462*t111459*t111569*2.0+ccab3*gcab*t111503*t111571*t111464*t111459*(3.0/2.0)-ccab3*gamma_aa[index]* \
                   gcab*t111503*t111524*t111535*t111464*t111459)*2.0+t111568*(t111574+t111575+t111576+t111577+t111578+ \
                   t111579-ccab1*gcab*t111522*t111596*(4.0/3.0)-ccab2*gamma_aa[index]*t111503*t111505*t111570*4.0+ccab1* \
                   gamma_aa[index]*t111503*t111505*t111572*(8.0/3.0)+ccab4*t111504*t111462*t111471*t111525*(gcab*t111522* \
                   (1.6E1/3.0)+gamma_aa[index]*t111503*t111505*2.4E1+gamma_aa[index]*t111504*t111506*t111459*(4.0E1/3.0) \
                   +gcab*t111510*t111503*t111459*3.2E1)+ccab2*t111503*t111523*t111463*t111459*(t111580+gcab*t111522*(8.0/ \
                   3.0))-ccab4*gamma_aa[index]*t111504*t111506*t111459*t111569*(4.0E1/3.0)-ccab1*gcab*t111510*t111503* \
                   t111573*t111459*(4.0/3.0)-ccab3*gcab*t111510*t111503*t111571*t111459*8.0-ccab2*t111503*t111531*t111463* \
                   t111581*t111528*t111459*2.0-ccab4*t111504*t111462*t111471*t111544*t111583*t111549*2.0+ccab3*gamma_aa[index]* \
                   gcab*t111503*t111524*t111464*t111459*(gcab*t111522*4.0+gamma_aa[index]*t111503*t111505*1.2E1+gcab* \
                   t111510*t111503*t111459*8.0)-ccab3*gamma_aa[index]*gcab*t111503*t111535*t111464*t111582*t111539*t111459* \
                   2.0)-rho_a[index]*t111552*(ccaa1*gcaa*t111522*t111597*(-8.0/3.0)+ccaa1*gamma_aa[index]*t111601*t111460* \
                   t111505*8.0-ccaa2*gamma_aa[index]*t111460*t111505*t111599*(3.2E1/3.0)+ccaa2*t111603*t111460*t111505* \
                   t111616*t111459*(1.6E1/3.0)+ccaa4*t111613*t111461*t111506*t111471*t111608*(3.2E1/3.0)+ccaa4*t111461* \
                   t111462*t111471*t111608*(gcaa*t111522*(3.2E1/3.0)+gamma_aa[index]*t111460*t111505*6.4E1+gamma_aa[index]* \
                   t111461*t111506*t111459*(1.28E2/3.0)+gcaa*t111510*t111460*t111459*9.6E1)-ccaa1*gcaa*t111510*t111460* \
                   1.0/(t111466*t111466*t111466)*t111459*(1.6E1/3.0)+ccaa2*t111603*t111460*t111463*t111459*(gcaa*t111522* \
                   (1.6E1/3.0)+gamma_aa[index]*t111460*t111505*(3.2E1/3.0))+ccaa2*gamma_aa[index]*t111603*t111460*t111463* \
                   t111619*2.0-ccaa4*gamma_aa[index]*t111461*t111506*t111459*t111598*(1.28E2/3.0)-ccaa3*gcaa*t111510* \
                   t111600*t111460*t111459*2.4E1+ccaa4*gamma_aa[index]*t111461*t111462*t111608*t111628*t111459*4.0+ccaa3* \
                   gcaa*t111602*t111460*t111623*t111464*t111459*3.0-ccaa4*t111613*t111461*t111462*t111471*t111628*1.0/ \
                   (t111476*t111476*t111476)*2.0-ccaa2*t111460*t111463*t111616*t111619*t111459*1.0/(t111479*t111479*t111479) \
                   *2.0+ccaa3*gamma_aa[index]*gcaa*t111602*t111460*t111464*t111459*(gcaa*t111522*8.0+gamma_aa[index]* \
                   t111460*t111505*3.2E1+gcaa*t111510*t111460*t111459*2.4E1)+ccaa3*gamma_aa[index]*gcaa*t111510*t111602* \
                   t111460*t111607*t111459*8.0-ccaa3*gamma_aa[index]*gcaa*t111460*1.0/(t111470*t111470*t111470)*t111623* \
                   t111607*t111464*t111459*2.0)+rho_a[index]*t111642*(t111637-t111595+t111482*t111485*(t111636-t111637+ \
                   t111595-t111630*t111635*t111629*t111497))-c0*t111703*t111707*(cx1*gx*t111522*t111678*(-8.0/3.0)+cx1* \
                   gamma_aa[index]*t111505*t111656*t111686*8.0-cx2*gamma_aa[index]*t111505*t111682*t111656*(3.2E1/3.0) \
                   +cx2*t111700*t111701*t111505*t111656*t111459*(1.6E1/3.0)+cx4*t111506*t111471*t111657*t111696*t111697* \
                   (3.2E1/3.0)+cx4*t111462*t111471*t111657*t111697*(gx*t111522*(3.2E1/3.0)+gamma_aa[index]*t111505*t111656* \
                   6.4E1+gamma_aa[index]*t111506*t111459*t111657*(1.28E2/3.0)+gx*t111510*t111656*t111459*9.6E1)-cx1*gx* \
                   t111510*t111656*t111459*1.0/(t111659*t111659*t111659)*(1.6E1/3.0)+cx2*t111701*t111463*t111656*t111459* \
                   (gx*t111522*(1.6E1/3.0)+gamma_aa[index]*t111505*t111656*(3.2E1/3.0))+cx2*gamma_aa[index]*t111701*t111710* \
                   t111463*t111656*2.0-cx4*gamma_aa[index]*t111506*t111680*t111459*t111657*(1.28E2/3.0)-cx3*gx*t111510* \
                   t111656*t111459*t111684*2.4E1+cx4*gamma_aa[index]*t111462*t111719*t111459*t111657*t111697*4.0+cx3* \
                   gx*t111714*t111464*t111691*t111656*t111459*3.0-cx2*t111700*t111710*t111463*1.0/(t111671*t111671*t111671) \
                   *t111656*t111459*2.0-cx4*t111462*t111471*t111719*t111657*1.0/(t111668*t111668*t111668)*t111696*2.0+ \
                   cx3*gamma_aa[index]*gx*t111464*t111691*t111656*t111459*(gx*t111522*8.0+gamma_aa[index]*t111505*t111656* \
                   3.2E1+gx*t111510*t111656*t111459*2.4E1)+cx3*gamma_aa[index]*gx*t111510*t111690*t111691*t111656*t111459* \
                   8.0-cx3*gamma_aa[index]*gx*t111714*t111464*1.0/(t111663*t111663*t111663)*t111690*t111656*t111459*2.0) \
                   -c0*pow(rho_a[index],1.0/3.0)*t111702*t111707*(4.0/3.0)+c0*t111702*t111703*(omega*t111651*(omega*t111646* \
                   (-8.334140006820045E15/2.81474976710656E14)+t111649*(omega*t111646*(2.778046668940015E15/1.40737488355328E14) \
                   -omega*t111643*t111645*(7.0368744177664E13/8.334140006820045E15))+omega*t111643*t111645*(7.0368744177664E13/ \
                   8.334140006820045E15)+t111651*t111647*t111649*(t111655-omega*t111643*t111653*(7.0368744177664E13/8.334140006820045E15) \
                   )*(2.778046668940015E15/7.0368744177664E13)-1.0/sqrt(3.141592653589793)*t111652*1.0/pow(t111644,2.0/ \
                   3.0)*t111649*(1.108777112152858E31/1.584563250285287E29))*(4.0/3.0)+omega*t111646*t111677*(2.778046668940015E15/ \
                   1.05553116266496E14));
            } else {
                v_rho_a_gamma_aa_[index] = 0.0;
            }

            //V_gamma_aa_gamma_aa
            if (rho_a[index] > cutoff_) {
                double t111721 = 1.0/pow(rho_a[index],1.0/3.0);
                double t111722 = c*t111721;
                double t111723 = sqrt(t111722);
                double t111724 = pow(t111722,3.0/2.0);
                double t111725 = c*c;
                double t111726 = 1.0/pow(rho_a[index],2.0/3.0);
                double t111727 = 1.0/c0p;
                double t111728 = b1p*t111723;
                double t111729 = b3p*t111724;
                double t111730 = b4p*t111725*t111726;
                double t111731 = b2p*c*t111721;
                double t111732 = t111730+t111731+t111728+t111729;
                double t111733 = 1.0/t111732;
                double t111734 = t111733*t111727*(1.0/2.0);
                double t111735 = t111734+1.0;
                double t111736 = log(t111735);
                double t111737 = a1p*c*t111721;
                double t111738 = t111737+1.0;
                double t111739 = rho_a[index]*2.0;
                double t111740 = 1.0/pow(t111739,1.0/3.0);
                double t111741 = c*t111740;
                double t111742 = gcab*gcab;
                double t111743 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t111744 = 1.0/pow(rho_a[index],8.0/3.0);
                double t111745 = gamma_aa[index]*gamma_aa[index];
                double t111746 = t111742*t111742;
                double t111747 = 1.0/pow(rho_a[index],3.2E1/3.0);
                double t111748 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t111749 = gamma_aa[index]*gcab*t111744;
                double t111750 = t111749+1.0;
                double t111751 = gamma_aa[index]*gcab*t111744*2.0;
                double t111752 = t111742*t111743*t111745;
                double t111753 = t111751+t111752+1.0;
                double t111754 = gamma_aa[index]*gcab*t111744*3.0;
                double t111755 = gamma_aa[index]*gcab*t111742*t111745*t111748;
                double t111756 = t111742*t111743*t111745*3.0;
                double t111757 = t111754+t111755+t111756+1.0;
                double t111758 = t111745*t111745;
                double t111774 = gcab*t111744*2.0;
                double t111775 = gamma_aa[index]*t111742*t111743*6.0;
                double t111776 = gcab*t111742*t111745*t111748*6.0;
                double t111777 = gamma_aa[index]*t111745*t111746*t111747*2.0;
                double t111759 = t111774+t111775+t111776+t111777;
                double t111760 = gamma_aa[index]*gcab*t111744*4.0;
                double t111761 = gamma_aa[index]*gcab*t111742*t111745*t111748*4.0;
                double t111762 = t111742*t111743*t111745*6.0;
                double t111763 = t111746*t111747*t111758;
                double t111764 = t111760+t111761+t111762+t111763+1.0;
                double t111767 = gcab*t111744;
                double t111768 = gamma_aa[index]*t111742*t111743;
                double t111765 = t111767+t111768;
                double t111766 = 1.0/(t111757*t111757);
                double t111769 = 1.0/(t111753*t111753);
                double t111770 = gcab*t111744*(3.0/2.0);
                double t111771 = gamma_aa[index]*t111742*t111743*3.0;
                double t111772 = gcab*t111742*t111745*t111748*(3.0/2.0);
                double t111773 = t111770+t111771+t111772;
                double t111778 = 1.0/(t111764*t111764);
                double t111779 = pow(2.0,1.0/3.0);
                double t111780 = t111779*2.0;
                double t111781 = t111780-2.0;
                double t111782 = two_13*2.0;
                double t111783 = t111782-2.0;
                double t111784 = 1.0/t111783;
                double t111785 = 1.0/c0f;
                double t111786 = b1f*t111723;
                double t111787 = b3f*t111724;
                double t111788 = b4f*t111725*t111726;
                double t111789 = b2f*c*t111721;
                double t111790 = t111786+t111787+t111788+t111789;
                double t111791 = 1.0/t111790;
                double t111792 = t111791*t111785*(1.0/2.0);
                double t111793 = t111792+1.0;
                double t111794 = log(t111793);
                double t111795 = a1f*c*t111721;
                double t111796 = t111795+1.0;
                double t111797 = c0f*t111794*t111796*2.0;
                double t111798 = c0p*t111736*t111738*2.0;
                double t111799 = gcaa*gcaa;
                double t111800 = t111799*t111799;
                double t111801 = gamma_aa[index]*gcaa*t111744;
                double t111802 = t111801+1.0;
                double t111803 = gamma_aa[index]*gcaa*t111744*2.0;
                double t111804 = t111743*t111745*t111799;
                double t111805 = t111803+t111804+1.0;
                double t111806 = gamma_aa[index]*gcaa*t111744*3.0;
                double t111807 = gamma_aa[index]*gcaa*t111745*t111748*t111799;
                double t111808 = t111743*t111745*t111799*3.0;
                double t111809 = t111806+t111807+t111808+1.0;
                double t111825 = gcaa*t111744*4.0;
                double t111826 = gamma_aa[index]*t111743*t111799*1.2E1;
                double t111827 = gcaa*t111745*t111748*t111799*1.2E1;
                double t111828 = gamma_aa[index]*t111800*t111745*t111747*4.0;
                double t111810 = t111825+t111826+t111827+t111828;
                double t111811 = gamma_aa[index]*gcaa*t111744*4.0;
                double t111812 = gamma_aa[index]*gcaa*t111745*t111748*t111799*4.0;
                double t111813 = t111743*t111745*t111799*6.0;
                double t111814 = t111800*t111747*t111758;
                double t111815 = t111811+t111812+t111813+t111814+1.0;
                double t111818 = gcaa*t111744*2.0;
                double t111819 = gamma_aa[index]*t111743*t111799*2.0;
                double t111816 = t111818+t111819;
                double t111817 = 1.0/(t111809*t111809);
                double t111820 = 1.0/(t111805*t111805);
                double t111821 = gcaa*t111744*3.0;
                double t111822 = gamma_aa[index]*t111743*t111799*6.0;
                double t111823 = gcaa*t111745*t111748*t111799*3.0;
                double t111824 = t111821+t111822+t111823;
                double t111829 = 1.0/(t111815*t111815);
                double t111830 = rho_a[index]*(8.334140006820045E15/1.40737488355328E14);
                double t111831 = omega*omega;
                double t111832 = 1.0/rho_a[index];
                double t111833 = omega*t111831*t111832*(7.0368744177664E13/8.334140006820045E15);
                double t111834 = 1.0/pow(t111830,1.0/3.0);
                double t111835 = gx*gx;
                double t111836 = t111835*t111835;
                double t111837 = gamma_aa[index]*gx*t111744;
                double t111838 = t111837+1.0;
                double t111839 = gamma_aa[index]*gx*t111744*2.0;
                double t111840 = t111743*t111745*t111835;
                double t111841 = t111840+t111839+1.0;
                double t111842 = gamma_aa[index]*gx*t111744*3.0;
                double t111843 = gamma_aa[index]*gx*t111745*t111835*t111748;
                double t111844 = t111743*t111745*t111835*3.0;
                double t111845 = t111842+t111843+t111844+1.0;
                double t111861 = gx*t111744*4.0;
                double t111862 = gamma_aa[index]*t111743*t111835*1.2E1;
                double t111863 = gx*t111745*t111835*t111748*1.2E1;
                double t111864 = gamma_aa[index]*t111745*t111836*t111747*4.0;
                double t111846 = t111861+t111862+t111863+t111864;
                double t111847 = gamma_aa[index]*gx*t111744*4.0;
                double t111848 = gamma_aa[index]*gx*t111745*t111835*t111748*4.0;
                double t111849 = t111743*t111745*t111835*6.0;
                double t111850 = t111836*t111747*t111758;
                double t111851 = t111850+t111847+t111848+t111849+1.0;
                double t111854 = gx*t111744*2.0;
                double t111855 = gamma_aa[index]*t111743*t111835*2.0;
                double t111852 = t111854+t111855;
                double t111853 = 1.0/(t111845*t111845);
                double t111856 = 1.0/(t111841*t111841);
                double t111857 = gx*t111744*3.0;
                double t111858 = gamma_aa[index]*t111743*t111835*6.0;
                double t111859 = gx*t111745*t111835*t111748*3.0;
                double t111860 = t111857+t111858+t111859;
                double t111865 = 1.0/(t111851*t111851);
                v_gamma_aa_gamma_aa_[index] = (rho_a[index]*(t111798+t111781*t111784*(t111797-c0p*t111736*t111738* \
                   2.0))*2.0-c0p*rho_a[index]*log((t111727*(1.0/2.0))/(b1p*sqrt(t111741)+b3p*pow(t111741,3.0/2.0)+b4p* \
                   t111725*1.0/pow(t111739,2.0/3.0)+b2p*c*t111740)+1.0)*(a1p*c*t111740+1.0)*4.0)*(ccab1*1.0/(t111750* \
                   t111750)*t111742*t111743*(1.0/2.0)-(ccab2*t111742*t111743*(1.0/2.0))/t111753+ccab2*t111745*t111746* \
                   t111747*t111769*(1.0/2.0)-(ccab4*t111745*t111746*t111747*3.0)/t111764+ccab4*t111746*t111747*t111758* \
                   t111778*(t111742*t111743*3.0+t111745*t111746*t111747*3.0+gamma_aa[index]*gcab*t111742*t111748*6.0) \
                   -ccab1*gamma_aa[index]*gcab*1.0/(t111750*t111750*t111750)*t111742*t111748*(1.0/2.0)-(ccab3*gamma_aa[index]* \
                   gcab*t111742*t111748*(3.0/2.0))/t111757-ccab2*t111742*t111743*1.0/(t111753*t111753*t111753)*t111745* \
                   (t111765*t111765)*2.0-ccab4*t111746*1.0/(t111764*t111764*t111764)*t111747*t111758*(t111759*t111759) \
                   *2.0+ccab2*gamma_aa[index]*t111742*t111743*t111765*t111769*2.0+ccab4*gamma_aa[index]*t111745*t111746* \
                   t111747*t111759*t111778*4.0+ccab3*gcab*t111742*t111745*t111773*t111748*t111766*3.0+ccab3*gamma_aa[index]* \
                   gcab*t111742*t111745*t111748*t111766*(t111742*t111743*(3.0/2.0)+gamma_aa[index]*gcab*t111742*t111748* \
                   (3.0/2.0))-ccab3*gamma_aa[index]*gcab*t111742*t111745*(t111773*t111773)*t111748*1.0/(t111757*t111757* \
                   t111757)*2.0)*-4.0+rho_a[index]*(t111798+t111781*t111784*(t111797-t111798))*(ccaa1*1.0/(t111802*t111802) \
                   *t111743*t111799*2.0-(ccaa2*t111743*t111799*2.0)/t111805+ccaa2*t111800*t111820*t111745*t111747*2.0- \
                   (ccaa4*t111800*t111745*t111747*1.2E1)/t111815+ccaa4*t111800*t111747*t111829*t111758*(t111743*t111799* \
                   1.2E1+t111800*t111745*t111747*1.2E1+gamma_aa[index]*gcaa*t111748*t111799*2.4E1)-ccaa1*gamma_aa[index]* \
                   gcaa*1.0/(t111802*t111802*t111802)*t111748*t111799*2.0-(ccaa3*gamma_aa[index]*gcaa*t111748*t111799* \
                   6.0)/t111809-ccaa4*t111800*(t111810*t111810)*1.0/(t111815*t111815*t111815)*t111747*t111758*2.0-ccaa2* \
                   1.0/(t111805*t111805*t111805)*t111743*(t111816*t111816)*t111745*t111799*2.0+ccaa2*gamma_aa[index]* \
                   t111820*t111743*t111816*t111799*4.0+ccaa4*gamma_aa[index]*t111800*t111810*t111745*t111747*t111829* \
                   8.0+ccaa3*gcaa*t111824*t111745*t111817*t111748*t111799*6.0+ccaa3*gamma_aa[index]*gcaa*t111745*t111817* \
                   t111748*t111799*(t111743*t111799*6.0+gamma_aa[index]*gcaa*t111748*t111799*6.0)-ccaa3*gamma_aa[index]* \
                   gcaa*(t111824*t111824)*t111745*1.0/(t111809*t111809*t111809)*t111748*t111799*2.0)*2.0+c0*pow(rho_a[index],4.0/ \
                   3.0)*(omega*t111834*(t111833+erf(pow(t111830,1.0/3.0)/omega)*(3.991211251234741E15/2.251799813685248E15) \
                   -omega*t111834*(3.0/2.0)-exp(-1.0/(omega*omega)*pow(t111830,2.0/3.0))*(t111833-omega*t111834))*(4.0/ \
                   3.0)-1.0)*(cx1*t111743*t111835*1.0/(t111838*t111838)*2.0-(cx2*t111743*t111835*2.0)/t111841+cx2*t111745* \
                   t111836*t111747*t111856*2.0-(cx4*t111745*t111836*t111747*1.2E1)/t111851+cx4*t111836*t111747*t111865* \
                   t111758*(t111743*t111835*1.2E1+t111745*t111836*t111747*1.2E1+gamma_aa[index]*gx*t111835*t111748*2.4E1) \
                   -cx1*gamma_aa[index]*gx*t111835*t111748*1.0/(t111838*t111838*t111838)*2.0-(cx3*gamma_aa[index]*gx* \
                   t111835*t111748*6.0)/t111845-cx2*1.0/(t111841*t111841*t111841)*t111743*(t111852*t111852)*t111745*t111835* \
                   2.0-cx4*1.0/(t111851*t111851*t111851)*t111836*t111747*(t111846*t111846)*t111758*2.0+cx2*gamma_aa[index]* \
                   t111743*t111852*t111835*t111856*4.0+cx4*gamma_aa[index]*t111745*t111836*t111747*t111846*t111865*8.0+ \
                   cx3*gx*t111860*t111745*t111835*t111853*t111748*6.0+cx3*gamma_aa[index]*gx*t111745*t111835*t111853* \
                   t111748*(t111743*t111835*6.0+gamma_aa[index]*gx*t111835*t111748*6.0)-cx3*gamma_aa[index]*gx*(t111860* \
                   t111860)*t111745*t111835*1.0/(t111845*t111845*t111845)*t111748*2.0)*2.0;
            } else {
                v_gamma_aa_gamma_aa_[index] = 0.0;
            }

        }
        if (is_meta_) {

            //V_rho_a_tau_a
            if (rho_a[index] > cutoff_) {
                v_rho_a_tau_a_[index] = 0.0;
            } else {
                v_rho_a_tau_a_[index] = 0.0;
            }

            //V_tau_a_tau_a
            if (rho_a[index] > cutoff_) {
                v_tau_a_tau_a_[index] = 0.0;
            } else {
                v_tau_a_tau_a_[index] = 0.0;
            }

            if (is_gga_) {

                //V_gamma_aa_tau_a
                if (rho_a[index] > cutoff_) {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } else {
                    v_gamma_aa_tau_a_[index] = 0.0;
                }

            }
        }
    }
}
void wB97X_Functional::computeUKSFunctional(boost::shared_ptr<UKSFunctions> prop)
{
    int ntrue = prop->npoints();

    const double* restrict rho_a;
    const double* restrict rho_b;
    const double* restrict gamma_aa;
    const double* restrict gamma_ab;
    const double* restrict gamma_bb;
    const double* restrict tau_a;
    const double* restrict tau_b;

    rho_a = prop->property_value("RHO_A")->pointer();
    rho_b = prop->property_value("RHO_B")->pointer();
    if (is_gga_) {
        gamma_aa = prop->property_value("GAMMA_AA")->pointer();
        gamma_ab = prop->property_value("GAMMA_AB")->pointer();
        gamma_bb = prop->property_value("GAMMA_BB")->pointer();
    }
    if (is_meta_) {
        tau_a = prop->property_value("TAU_A")->pointer();
        tau_b = prop->property_value("TAU_B")->pointer();
    }

    double omega = params_[0].second;
    double c0 = params_[1].second;
    double two_13 = params_[2].second;
    double d2fz0 = params_[3].second;
    double c = params_[4].second;
    double Aa = params_[5].second;
    double a1a = params_[6].second;
    double b1a = params_[7].second;
    double b2a = params_[8].second;
    double b3a = params_[9].second;
    double b4a = params_[10].second;
    double c0p = params_[11].second;
    double a1p = params_[12].second;
    double b1p = params_[13].second;
    double b2p = params_[14].second;
    double b3p = params_[15].second;
    double b4p = params_[16].second;
    double c0f = params_[17].second;
    double a1f = params_[18].second;
    double b1f = params_[19].second;
    double b2f = params_[20].second;
    double b3f = params_[21].second;
    double b4f = params_[22].second;
    double gcab = params_[23].second;
    double gcaa = params_[24].second;
    double gx = params_[25].second;
    double ccab0 = params_[26].second;
    double ccab1 = params_[27].second;
    double ccab2 = params_[28].second;
    double ccab3 = params_[29].second;
    double ccab4 = params_[30].second;
    double ccaa0 = params_[31].second;
    double ccaa1 = params_[32].second;
    double ccaa2 = params_[33].second;
    double ccaa3 = params_[34].second;
    double ccaa4 = params_[35].second;
    double cx0 = params_[36].second;
    double cx1 = params_[37].second;
    double cx2 = params_[38].second;
    double cx3 = params_[39].second;
    double cx4 = params_[40].second;

    //Functional
    for (int index = 0; index < ntrue; index++) {

        //Functional Value
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t105434 = 1.0/pow(rho_a[index],1.0/3.0);
            double t105435 = c*t105434;
            double t105436 = sqrt(t105435);
            double t105437 = pow(t105435,3.0/2.0);
            double t105438 = c*c;
            double t105439 = 1.0/pow(rho_a[index],2.0/3.0);
            double t105440 = 1.0/c0p;
            double t105441 = b1p*t105436;
            double t105442 = b3p*t105437;
            double t105443 = b4p*t105438*t105439;
            double t105444 = b2p*c*t105434;
            double t105445 = t105441+t105442+t105443+t105444;
            double t105446 = 1.0/t105445;
            double t105447 = t105440*t105446*(1.0/2.0);
            double t105448 = t105447+1.0;
            double t105449 = log(t105448);
            double t105450 = a1p*c*t105434;
            double t105451 = t105450+1.0;
            double t105452 = pow(2.0,1.0/3.0);
            double t105453 = t105452*2.0;
            double t105454 = t105453-2.0;
            double t105455 = two_13*2.0;
            double t105456 = t105455-2.0;
            double t105457 = 1.0/t105456;
            double t105458 = 1.0/c0f;
            double t105459 = 1.0/pow(rho_b[index],1.0/3.0);
            double t105460 = c*t105459;
            double t105461 = sqrt(t105460);
            double t105462 = pow(t105460,3.0/2.0);
            double t105463 = 1.0/pow(rho_b[index],2.0/3.0);
            double t105464 = b1p*t105461;
            double t105465 = b3p*t105462;
            double t105466 = b4p*t105463*t105438;
            double t105467 = b2p*c*t105459;
            double t105468 = t105464+t105465+t105466+t105467;
            double t105469 = 1.0/t105468;
            double t105470 = t105440*t105469*(1.0/2.0);
            double t105471 = t105470+1.0;
            double t105472 = log(t105471);
            double t105473 = a1p*c*t105459;
            double t105474 = t105473+1.0;
            double t105475 = c0p*t105472*t105474*2.0;
            double t105476 = rho_a[index]+rho_b[index];
            double t105477 = 1.0/pow(t105476,1.0/3.0);
            double t105478 = c*t105477;
            double t105479 = sqrt(t105478);
            double t105480 = pow(t105478,3.0/2.0);
            double t105481 = 1.0/pow(t105476,2.0/3.0);
            double t105482 = b1p*t105479;
            double t105483 = b3p*t105480;
            double t105484 = b4p*t105481*t105438;
            double t105485 = b2p*c*t105477;
            double t105486 = t105482+t105483+t105484+t105485;
            double t105487 = 1.0/t105486;
            double t105488 = t105440*t105487*(1.0/2.0);
            double t105489 = t105488+1.0;
            double t105490 = log(t105489);
            double t105491 = a1p*c*t105477;
            double t105492 = t105491+1.0;
            double t105493 = c0p*t105490*t105492*2.0;
            double t105494 = rho_a[index]-rho_b[index];
            double t105495 = t105494*t105494;
            double t105496 = 1.0/t105476;
            double t105497 = t105494*t105496;
            double t105498 = 1.0/(t105476*t105476*t105476*t105476);
            double t105499 = t105495*t105495;
            double t105500 = t105497+1.0;
            double t105501 = pow(t105500,4.0/3.0);
            double t105502 = -t105497+1.0;
            double t105503 = pow(t105502,4.0/3.0);
            double t105504 = t105501+t105503-2.0;
            double t105507 = 1.0/pow(rho_a[index],8.0/3.0);
            double t105508 = gamma_aa[index]*t105507*(1.0/2.0);
            double t105509 = 1.0/pow(rho_b[index],8.0/3.0);
            double t105510 = gamma_bb[index]*t105509*(1.0/2.0);
            double t105505 = t105510+t105508;
            double t105506 = gcab*gcab;
            double t105511 = t105505*t105505;
            double t105512 = t105506*t105506;
            double t105513 = t105511*t105511;
            double t105514 = c0p*t105451*t105449*2.0;
            double t105515 = b1f*t105436;
            double t105516 = b3f*t105437;
            double t105517 = b4f*t105438*t105439;
            double t105518 = b2f*c*t105434;
            double t105519 = t105515+t105516+t105517+t105518;
            double t105520 = 1.0/t105519;
            double t105521 = t105520*t105458*(1.0/2.0);
            double t105522 = t105521+1.0;
            double t105523 = log(t105522);
            double t105524 = a1f*c*t105434;
            double t105525 = t105524+1.0;
            double t105526 = t105514-c0f*t105523*t105525*2.0;
            double t105527 = t105514-t105454*t105526*t105457;
            double t105528 = gamma_aa[index]*gamma_aa[index];
            double t105529 = gcaa*gcaa;
            double t105530 = t105528*t105528;
            double t105531 = t105529*t105529;
            double t105532 = 1.0/pow(rho_a[index],3.2E1/3.0);
            double t105533 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]);
            double t105534 = 1.0/pow(rho_a[index],1.6E1/3.0);
            double t105535 = b1f*t105461;
            double t105536 = b3f*t105462;
            double t105537 = b4f*t105463*t105438;
            double t105538 = b2f*c*t105459;
            double t105539 = t105535+t105536+t105537+t105538;
            double t105540 = 1.0/t105539;
            double t105541 = t105540*t105458*(1.0/2.0);
            double t105542 = t105541+1.0;
            double t105543 = log(t105542);
            double t105544 = a1f*c*t105459;
            double t105545 = t105544+1.0;
            double t105546 = t105475-c0f*t105543*t105545*2.0;
            double t105547 = t105475-t105454*t105546*t105457;
            double t105548 = gamma_bb[index]*gamma_bb[index];
            double t105549 = t105548*t105548;
            double t105550 = 1.0/pow(rho_b[index],3.2E1/3.0);
            double t105551 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
               rho_b[index]*rho_b[index]);
            double t105552 = 1.0/pow(rho_b[index],1.6E1/3.0);
            double t105553 = rho_a[index]*(8.334140006820045E15/1.40737488355328E14);
            double t105554 = omega*omega;
            double t105555 = 1.0/rho_a[index];
            double t105556 = omega*t105554*t105555*(7.0368744177664E13/8.334140006820045E15);
            double t105557 = 1.0/pow(t105553,1.0/3.0);
            double t105558 = gx*gx;
            double t105559 = t105558*t105558;
            double t105560 = 1.0/omega;
            double t105561 = rho_b[index]*(8.334140006820045E15/1.40737488355328E14);
            double t105562 = 1.0/(omega*omega);
            double t105563 = 1.0/rho_b[index];
            double t105564 = omega*t105554*t105563*(7.0368744177664E13/8.334140006820045E15);
            double t105565 = 1.0/pow(t105561,1.0/3.0);
            functional_[index] = (rho_a[index]*t105527+rho_b[index]*t105547-t105476*(t105493-t105504*t105457* \
               t105498*t105499*(t105493-c0f*log((t105458*(1.0/2.0))/(b1f*t105479+b3f*t105480+b2f*c*t105477+b4f*t105481* \
               t105438)+1.0)*(a1f*c*t105477+1.0)*2.0)+(Aa*t105504*t105457*log((1.0/2.0)/(Aa*(b1a*t105479+b3a*t105480+ \
               b2a*c*t105477+b4a*t105481*t105438))+1.0)*(t105498*t105499-1.0)*(a1a*c*t105477+1.0)*2.0)/d2fz0))*(ccab0+ \
               (ccab4*t105512*t105513)/(gcab*t105505*4.0+t105512*t105513+t105511*t105506*6.0+gcab*t105511*t105505* \
               t105506*4.0+1.0)+(ccab1*gcab*t105505)/(gcab*t105505+1.0)+(ccab2*t105511*t105506)/(gcab*t105505*2.0+ \
               t105511*t105506+1.0)+(ccab3*gcab*t105511*t105505*t105506)/(gcab*t105505*3.0+t105511*t105506*3.0+gcab* \
               t105511*t105505*t105506+1.0))-rho_a[index]*t105527*(ccaa0+(ccaa2*t105534*t105528*t105529)/(gamma_aa[index]* \
               gcaa*t105507*2.0+t105534*t105528*t105529+1.0)+(ccaa1*gamma_aa[index]*gcaa*t105507)/(gamma_aa[index]* \
               gcaa*t105507+1.0)+(ccaa4*t105530*t105531*t105532)/(gamma_aa[index]*gcaa*t105507*4.0+t105530*t105531* \
               t105532+t105534*t105528*t105529*6.0+gamma_aa[index]*gcaa*t105533*t105528*t105529*4.0+1.0)+(ccaa3*gamma_aa[index]* \
               gcaa*t105533*t105528*t105529)/(gamma_aa[index]*gcaa*t105507*3.0+t105534*t105528*t105529*3.0+gamma_aa[index]* \
               gcaa*t105533*t105528*t105529+1.0))-rho_b[index]*t105547*(ccaa0+(ccaa2*t105552*t105529*t105548)/(gamma_bb[index]* \
               gcaa*t105509*2.0+t105552*t105529*t105548+1.0)+(ccaa1*gamma_bb[index]*gcaa*t105509)/(gamma_bb[index]* \
               gcaa*t105509+1.0)+(ccaa4*t105531*t105550*t105549)/(gamma_bb[index]*gcaa*t105509*4.0+t105531*t105550* \
               t105549+t105552*t105529*t105548*6.0+gamma_bb[index]*gcaa*t105551*t105529*t105548*4.0+1.0)+(ccaa3*gamma_bb[index]* \
               gcaa*t105551*t105529*t105548)/(gamma_bb[index]*gcaa*t105509*3.0+t105552*t105529*t105548*3.0+gamma_bb[index]* \
               gcaa*t105551*t105529*t105548+1.0))-c0*pow(rho_a[index],4.0/3.0)*(omega*t105557*(t105556+erf(t105560* \
               pow(t105553,1.0/3.0))*(3.991211251234741E15/2.251799813685248E15)-omega*t105557*(3.0/2.0)-exp(-pow(t105553,2.0/ \
               3.0)*t105562)*(t105556-omega*t105557))*(4.0/3.0)-1.0)*(cx0+(cx2*t105534*t105528*t105558)/(gamma_aa[index]* \
               gx*t105507*2.0+t105534*t105528*t105558+1.0)+(cx1*gamma_aa[index]*gx*t105507)/(gamma_aa[index]*gx*t105507+ \
               1.0)+(cx4*t105530*t105532*t105559)/(gamma_aa[index]*gx*t105507*4.0+t105530*t105532*t105559+t105534* \
               t105528*t105558*6.0+gamma_aa[index]*gx*t105533*t105528*t105558*4.0+1.0)+(cx3*gamma_aa[index]*gx*t105533* \
               t105528*t105558)/(gamma_aa[index]*gx*t105507*3.0+t105534*t105528*t105558*3.0+gamma_aa[index]*gx*t105533* \
               t105528*t105558+1.0))-c0*pow(rho_b[index],4.0/3.0)*(omega*t105565*(t105564+erf(t105560*pow(t105561,1.0/ \
               3.0))*(3.991211251234741E15/2.251799813685248E15)-omega*t105565*(3.0/2.0)-exp(-pow(t105561,2.0/3.0) \
               *t105562)*(t105564-omega*t105565))*(4.0/3.0)-1.0)*(cx0+(cx2*t105552*t105548*t105558)/(gamma_bb[index]* \
               gx*t105509*2.0+t105552*t105548*t105558+1.0)+(cx1*gamma_bb[index]*gx*t105509)/(gamma_bb[index]*gx*t105509+ \
               1.0)+(cx4*t105550*t105549*t105559)/(gamma_bb[index]*gx*t105509*4.0+t105550*t105549*t105559+t105552* \
               t105548*t105558*6.0+gamma_bb[index]*gx*t105551*t105548*t105558*4.0+1.0)+(cx3*gamma_bb[index]*gx*t105551* \
               t105548*t105558)/(gamma_bb[index]*gx*t105509*3.0+t105552*t105548*t105558*3.0+gamma_bb[index]*gx*t105551* \
               t105548*t105558+1.0));
        } else if (rho_a[index] > cutoff_) {
            double t109949 = 1.0/pow(rho_a[index],1.0/3.0);
            double t109950 = c*t109949;
            double t109951 = sqrt(t109950);
            double t109952 = pow(t109950,3.0/2.0);
            double t109953 = c*c;
            double t109954 = 1.0/pow(rho_a[index],2.0/3.0);
            double t109955 = 1.0/c0p;
            double t109956 = b1p*t109951;
            double t109957 = b3p*t109952;
            double t109958 = b4p*t109953*t109954;
            double t109959 = b2p*c*t109949;
            double t109960 = t109956+t109957+t109958+t109959;
            double t109961 = 1.0/t109960;
            double t109962 = t109961*t109955*(1.0/2.0);
            double t109963 = t109962+1.0;
            double t109964 = log(t109963);
            double t109965 = a1p*c*t109949;
            double t109966 = t109965+1.0;
            double t109967 = gamma_aa[index]*gamma_aa[index];
            double t109968 = gcaa*gcaa;
            double t109969 = t109967*t109967;
            double t109970 = t109968*t109968;
            double t109971 = 1.0/pow(rho_a[index],3.2E1/3.0);
            double t109972 = 1.0/pow(rho_a[index],8.0/3.0);
            double t109973 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]);
            double t109974 = 1.0/pow(rho_a[index],1.6E1/3.0);
            double t109975 = rho_a[index]*(8.334140006820045E15/1.40737488355328E14);
            double t109976 = omega*omega;
            double t109977 = 1.0/rho_a[index];
            double t109978 = omega*t109976*t109977*(7.0368744177664E13/8.334140006820045E15);
            double t109979 = 1.0/pow(t109975,1.0/3.0);
            double t109980 = gx*gx;
            double t109981 = t109980*t109980;
            functional_[index] = -rho_a[index]*(((pow(2.0,1.0/3.0)*2.0-2.0)*(c0f*log((1.0/2.0)/(c0f*(b1f*t109951+ \
               b3f*t109952+b2f*c*t109949+b4f*t109953*t109954))+1.0)*(a1f*c*t109949+1.0)*2.0-c0p*t109964*t109966*2.0) \
               )/(two_13*2.0-2.0)+c0p*t109964*t109966*2.0)*(ccaa0+(ccaa2*t109974*t109967*t109968)/(gamma_aa[index]* \
               gcaa*t109972*2.0+t109974*t109967*t109968+1.0)+(ccaa1*gamma_aa[index]*gcaa*t109972)/(gamma_aa[index]* \
               gcaa*t109972+1.0)+(ccaa4*t109970*t109971*t109969)/(gamma_aa[index]*gcaa*t109972*4.0+t109970*t109971* \
               t109969+t109974*t109967*t109968*6.0+gamma_aa[index]*gcaa*t109973*t109967*t109968*4.0+1.0)+(ccaa3*gamma_aa[index]* \
               gcaa*t109973*t109967*t109968)/(gamma_aa[index]*gcaa*t109972*3.0+t109974*t109967*t109968*3.0+gamma_aa[index]* \
               gcaa*t109973*t109967*t109968+1.0))-c0*pow(rho_a[index],4.0/3.0)*(omega*t109979*(t109978+erf(pow(t109975,1.0/ \
               3.0)/omega)*(3.991211251234741E15/2.251799813685248E15)-omega*t109979*(3.0/2.0)-exp(-1.0/(omega*omega) \
               *pow(t109975,2.0/3.0))*(t109978-omega*t109979))*(4.0/3.0)-1.0)*(cx0+(cx2*t109980*t109974*t109967)/ \
               (gamma_aa[index]*gx*t109972*2.0+t109980*t109974*t109967+1.0)+(cx1*gamma_aa[index]*gx*t109972)/(gamma_aa[index]* \
               gx*t109972+1.0)+(cx4*t109971*t109981*t109969)/(gamma_aa[index]*gx*t109972*4.0+t109971*t109981*t109969+ \
               t109980*t109974*t109967*6.0+gamma_aa[index]*gx*t109980*t109973*t109967*4.0+1.0)+(cx3*gamma_aa[index]* \
               gx*t109980*t109973*t109967)/(gamma_aa[index]*gx*t109972*3.0+t109980*t109974*t109967*3.0+gamma_aa[index]* \
               gx*t109980*t109973*t109967+1.0));
        } else if (rho_b[index] > cutoff_) {
            double t109189 = 1.0/pow(rho_b[index],1.0/3.0);
            double t109190 = c*t109189;
            double t109191 = sqrt(t109190);
            double t109192 = pow(t109190,3.0/2.0);
            double t109193 = c*c;
            double t109194 = 1.0/pow(rho_b[index],2.0/3.0);
            double t109195 = 1.0/c0p;
            double t109196 = b1p*t109191;
            double t109197 = b3p*t109192;
            double t109198 = b4p*t109193*t109194;
            double t109199 = b2p*c*t109189;
            double t109200 = t109196+t109197+t109198+t109199;
            double t109201 = 1.0/t109200;
            double t109202 = t109201*t109195*(1.0/2.0);
            double t109203 = t109202+1.0;
            double t109204 = log(t109203);
            double t109205 = a1p*c*t109189;
            double t109206 = t109205+1.0;
            double t109207 = gamma_bb[index]*gamma_bb[index];
            double t109208 = gcaa*gcaa;
            double t109209 = t109207*t109207;
            double t109210 = t109208*t109208;
            double t109211 = 1.0/pow(rho_b[index],3.2E1/3.0);
            double t109212 = 1.0/pow(rho_b[index],8.0/3.0);
            double t109213 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
               rho_b[index]*rho_b[index]);
            double t109214 = 1.0/pow(rho_b[index],1.6E1/3.0);
            double t109215 = rho_b[index]*(8.334140006820045E15/1.40737488355328E14);
            double t109216 = omega*omega;
            double t109217 = 1.0/rho_b[index];
            double t109218 = omega*t109216*t109217*(7.0368744177664E13/8.334140006820045E15);
            double t109219 = 1.0/pow(t109215,1.0/3.0);
            double t109220 = gx*gx;
            double t109221 = t109220*t109220;
            functional_[index] = -rho_b[index]*(((pow(2.0,1.0/3.0)*2.0-2.0)*(c0f*log((1.0/2.0)/(c0f*(b1f*t109191+ \
               b3f*t109192+b2f*c*t109189+b4f*t109193*t109194))+1.0)*(a1f*c*t109189+1.0)*2.0-c0p*t109204*t109206*2.0) \
               )/(two_13*2.0-2.0)+c0p*t109204*t109206*2.0)*(ccaa0+(ccaa2*t109214*t109207*t109208)/(gamma_bb[index]* \
               gcaa*t109212*2.0+t109214*t109207*t109208+1.0)+(ccaa1*gamma_bb[index]*gcaa*t109212)/(gamma_bb[index]* \
               gcaa*t109212+1.0)+(ccaa4*t109210*t109211*t109209)/(gamma_bb[index]*gcaa*t109212*4.0+t109210*t109211* \
               t109209+t109214*t109207*t109208*6.0+gamma_bb[index]*gcaa*t109213*t109207*t109208*4.0+1.0)+(ccaa3*gamma_bb[index]* \
               gcaa*t109213*t109207*t109208)/(gamma_bb[index]*gcaa*t109212*3.0+t109214*t109207*t109208*3.0+gamma_bb[index]* \
               gcaa*t109213*t109207*t109208+1.0))-c0*pow(rho_b[index],4.0/3.0)*(omega*t109219*(t109218+erf(pow(t109215,1.0/ \
               3.0)/omega)*(3.991211251234741E15/2.251799813685248E15)-omega*t109219*(3.0/2.0)-exp(-1.0/(omega*omega) \
               *pow(t109215,2.0/3.0))*(t109218-omega*t109219))*(4.0/3.0)-1.0)*(cx0+(cx2*t109220*t109214*t109207)/ \
               (gamma_bb[index]*gx*t109212*2.0+t109220*t109214*t109207+1.0)+(cx1*gamma_bb[index]*gx*t109212)/(gamma_bb[index]* \
               gx*t109212+1.0)+(cx4*t109211*t109221*t109209)/(gamma_bb[index]*gx*t109212*4.0+t109211*t109221*t109209+ \
               t109220*t109214*t109207*6.0+gamma_bb[index]*gx*t109220*t109213*t109207*4.0+1.0)+(cx3*gamma_bb[index]* \
               gx*t109220*t109213*t109207)/(gamma_bb[index]*gx*t109212*3.0+t109220*t109214*t109207*3.0+gamma_bb[index]* \
               gx*t109220*t109213*t109207+1.0));
        } else {
            functional_[index] = 0.0;
        }

    }
    //First Partials
    for (int index = 0; index < ntrue && deriv_ >= 1; index++) {

        //V_rho_a
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t105567 = 1.0/pow(rho_a[index],1.0/3.0);
            double t105568 = c*t105567;
            double t105569 = sqrt(t105568);
            double t105570 = pow(t105568,3.0/2.0);
            double t105571 = c*c;
            double t105572 = 1.0/pow(rho_a[index],2.0/3.0);
            double t105573 = 1.0/c0p;
            double t105574 = b1p*t105569;
            double t105575 = b3p*t105570;
            double t105576 = b4p*t105571*t105572;
            double t105577 = b2p*c*t105567;
            double t105578 = t105574+t105575+t105576+t105577;
            double t105579 = 1.0/t105578;
            double t105580 = t105573*t105579*(1.0/2.0);
            double t105581 = t105580+1.0;
            double t105582 = log(t105581);
            double t105583 = a1p*c*t105567;
            double t105584 = t105583+1.0;
            double t105585 = gamma_aa[index]*gamma_aa[index];
            double t105586 = gcaa*gcaa;
            double t105587 = t105585*t105585;
            double t105588 = t105586*t105586;
            double t105589 = 1.0/pow(rho_a[index],3.2E1/3.0);
            double t105590 = 1.0/pow(rho_a[index],8.0/3.0);
            double t105591 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]);
            double t105592 = 1.0/pow(rho_a[index],1.6E1/3.0);
            double t105593 = pow(2.0,1.0/3.0);
            double t105594 = t105593*2.0;
            double t105595 = t105594-2.0;
            double t105596 = two_13*2.0;
            double t105597 = t105596-2.0;
            double t105598 = 1.0/t105597;
            double t105599 = 1.0/c0f;
            double t105600 = b1f*t105569;
            double t105601 = b3f*t105570;
            double t105602 = b4f*t105571*t105572;
            double t105603 = b2f*c*t105567;
            double t105604 = t105600+t105601+t105602+t105603;
            double t105605 = 1.0/t105604;
            double t105606 = t105605*t105599*(1.0/2.0);
            double t105607 = t105606+1.0;
            double t105608 = log(t105607);
            double t105609 = a1f*c*t105567;
            double t105610 = t105609+1.0;
            double t105611 = c0f*t105610*t105608*2.0;
            double t105612 = c0p*t105582*t105584*2.0;
            double t105613 = 1.0/pow(rho_b[index],1.0/3.0);
            double t105614 = c*t105613;
            double t105615 = sqrt(t105614);
            double t105616 = pow(t105614,3.0/2.0);
            double t105617 = 1.0/pow(rho_b[index],2.0/3.0);
            double t105618 = b1p*t105615;
            double t105619 = b3p*t105616;
            double t105620 = b4p*t105571*t105617;
            double t105621 = b2p*c*t105613;
            double t105622 = t105620+t105621+t105618+t105619;
            double t105623 = 1.0/t105622;
            double t105624 = t105623*t105573*(1.0/2.0);
            double t105625 = t105624+1.0;
            double t105626 = log(t105625);
            double t105627 = a1p*c*t105613;
            double t105628 = t105627+1.0;
            double t105629 = c0p*t105626*t105628*2.0;
            double t105630 = rho_a[index]+rho_b[index];
            double t105631 = 1.0/pow(t105630,1.0/3.0);
            double t105632 = c*t105631;
            double t105633 = sqrt(t105632);
            double t105634 = pow(t105632,3.0/2.0);
            double t105635 = 1.0/pow(t105630,2.0/3.0);
            double t105636 = b1p*t105633;
            double t105637 = b3p*t105634;
            double t105638 = b4p*t105571*t105635;
            double t105639 = b2p*c*t105631;
            double t105640 = t105636+t105637+t105638+t105639;
            double t105641 = 1.0/t105640;
            double t105642 = t105641*t105573*(1.0/2.0);
            double t105643 = t105642+1.0;
            double t105644 = log(t105643);
            double t105645 = a1p*c*t105631;
            double t105646 = t105645+1.0;
            double t105647 = c0p*t105644*t105646*2.0;
            double t105648 = rho_a[index]-rho_b[index];
            double t105649 = t105648*t105648;
            double t105650 = 1.0/t105630;
            double t105651 = t105650*t105648;
            double t105652 = 1.0/(t105630*t105630*t105630*t105630);
            double t105653 = t105649*t105649;
            double t105654 = t105651+1.0;
            double t105655 = pow(t105654,4.0/3.0);
            double t105656 = -t105651+1.0;
            double t105657 = pow(t105656,4.0/3.0);
            double t105658 = t105655+t105657-2.0;
            double t105659 = gcab*gcab;
            double t105663 = gamma_aa[index]*t105590*(1.0/2.0);
            double t105664 = 1.0/pow(rho_b[index],8.0/3.0);
            double t105665 = gamma_bb[index]*t105664*(1.0/2.0);
            double t105660 = t105663+t105665;
            double t105661 = t105660*t105660;
            double t105662 = 1.0/pow(rho_a[index],1.1E1/3.0);
            double t105666 = t105659*t105659;
            double t105667 = t105661*t105661;
            double t105668 = t105661*t105659*6.0;
            double t105669 = gcab*t105660*t105661*t105659*4.0;
            double t105670 = t105666*t105667;
            double t105671 = gcab*t105660*4.0;
            double t105672 = t105670+t105671+t105668+t105669+1.0;
            double t105673 = gcab*t105660;
            double t105674 = t105673+1.0;
            double t105675 = t105661*t105659;
            double t105676 = gcab*t105660*2.0;
            double t105677 = t105675+t105676+1.0;
            double t105678 = t105661*t105659*3.0;
            double t105679 = gcab*t105660*t105661*t105659;
            double t105680 = gcab*t105660*3.0;
            double t105681 = t105680+t105678+t105679+1.0;
            double t105682 = 1.0/t105677;
            double t105683 = 1.0/t105681;
            double t105684 = 1.0/t105674;
            double t105685 = 1.0/t105672;
            double t105686 = 1.0/pow(t105630,4.0/3.0);
            double t105687 = b1f*t105633;
            double t105688 = b3f*t105634;
            double t105689 = b4f*t105571*t105635;
            double t105690 = b2f*c*t105631;
            double t105691 = t105690+t105687+t105688+t105689;
            double t105692 = 1.0/t105691;
            double t105693 = t105692*t105599*(1.0/2.0);
            double t105694 = t105693+1.0;
            double t105695 = log(t105694);
            double t105696 = a1f*c*t105631;
            double t105697 = t105696+1.0;
            double t105699 = c0f*t105695*t105697*2.0;
            double t105698 = t105647-t105699;
            double t105700 = 1.0/(t105630*t105630);
            double t105727 = t105700*t105648;
            double t105701 = t105650-t105727;
            double t105702 = 1.0/pow(t105630,5.0/3.0);
            double t105703 = 1.0/sqrt(t105632);
            double t105704 = 1.0/t105643;
            double t105705 = 1.0/(t105640*t105640);
            double t105706 = b4p*t105702*t105571*(2.0/3.0);
            double t105707 = b2p*c*t105686*(1.0/3.0);
            double t105708 = b1p*c*t105703*t105686*(1.0/6.0);
            double t105709 = b3p*c*t105633*t105686*(1.0/2.0);
            double t105710 = t105706+t105707+t105708+t105709;
            double t105711 = t105710*t105704*t105705*t105646;
            double t105712 = 1.0/d2fz0;
            double t105713 = 1.0/Aa;
            double t105714 = b1a*t105633;
            double t105715 = b3a*t105634;
            double t105716 = b4a*t105571*t105635;
            double t105717 = b2a*c*t105631;
            double t105718 = t105714+t105715+t105716+t105717;
            double t105719 = 1.0/t105718;
            double t105720 = t105713*t105719*(1.0/2.0);
            double t105721 = t105720+1.0;
            double t105722 = log(t105721);
            double t105723 = a1a*c*t105631;
            double t105724 = t105723+1.0;
            double t105725 = 1.0/(t105630*t105630*t105630*t105630*t105630);
            double t105726 = pow(t105654,1.0/3.0);
            double t105728 = t105701*t105726*(4.0/3.0);
            double t105729 = pow(t105656,1.0/3.0);
            double t105730 = t105728-t105701*t105729*(4.0/3.0);
            double t105731 = t105652*t105653;
            double t105732 = t105731-1.0;
            double t105733 = 1.0/pow(rho_a[index],4.0/3.0);
            double t105734 = 1.0/pow(rho_a[index],5.0/3.0);
            double t105735 = 1.0/sqrt(t105568);
            double t105736 = 1.0/t105581;
            double t105737 = 1.0/(t105578*t105578);
            double t105738 = b4p*t105571*t105734*(2.0/3.0);
            double t105739 = b2p*c*t105733*(1.0/3.0);
            double t105740 = b1p*c*t105733*t105735*(1.0/6.0);
            double t105741 = b3p*c*t105733*t105569*(1.0/2.0);
            double t105742 = t105740+t105741+t105738+t105739;
            double t105743 = t105742*t105736*t105584*t105737;
            double t105744 = t105611-t105612;
            double t105745 = t105744*t105595*t105598;
            double t105746 = Aa*t105712*t105722*t105732*t105724*t105658*t105598*2.0;
            double t105747 = t105612+t105745;
            double t105748 = gamma_aa[index]*gcaa*t105590*4.0;
            double t105749 = gamma_aa[index]*gcaa*t105591*t105585*t105586*4.0;
            double t105750 = t105592*t105585*t105586*6.0;
            double t105751 = t105587*t105588*t105589;
            double t105752 = t105750+t105751+t105748+t105749+1.0;
            double t105753 = 1.0/t105752;
            double t105754 = gamma_aa[index]*gcaa*t105590;
            double t105755 = t105754+1.0;
            double t105756 = 1.0/t105755;
            double t105757 = gamma_aa[index]*gcaa*t105590*3.0;
            double t105758 = gamma_aa[index]*gcaa*t105591*t105585*t105586;
            double t105759 = t105592*t105585*t105586*3.0;
            double t105760 = t105757+t105758+t105759+1.0;
            double t105761 = 1.0/t105760;
            double t105762 = gamma_aa[index]*gcaa*t105590*2.0;
            double t105763 = t105592*t105585*t105586;
            double t105764 = t105762+t105763+1.0;
            double t105765 = 1.0/t105764;
            double t105766 = 1.0/pow(rho_a[index],1.9E1/3.0);
            double t105767 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]*rho_a[index]);
            double t105768 = 1.0/pow(rho_a[index],3.5E1/3.0);
            double t105769 = 1.0/t105607;
            double t105770 = 1.0/(t105604*t105604);
            double t105771 = b4f*t105571*t105734*(2.0/3.0);
            double t105772 = b2f*c*t105733*(1.0/3.0);
            double t105773 = b1f*c*t105733*t105735*(1.0/6.0);
            double t105774 = b3f*c*t105733*t105569*(1.0/2.0);
            double t105775 = t105771+t105772+t105773+t105774;
            double t105776 = a1f*c*c0f*t105733*t105608*(2.0/3.0);
            double t105777 = a1p*c*c0p*t105733*t105582*(2.0/3.0);
            double t105778 = ccaa4*t105753*t105587*t105588*t105589;
            double t105779 = ccaa1*gamma_aa[index]*gcaa*t105590*t105756;
            double t105780 = ccaa3*gamma_aa[index]*gcaa*t105761*t105591*t105585*t105586;
            double t105781 = ccaa2*t105592*t105585*t105765*t105586;
            double t105782 = ccaa0+t105780+t105781+t105778+t105779;
            double t105783 = omega*omega;
            double t105784 = rho_a[index]*(8.334140006820045E15/1.40737488355328E14);
            double t105785 = 1.0/(rho_a[index]*rho_a[index]);
            double t105786 = 1.0/pow(t105784,4.0/3.0);
            double t105787 = 1.0/(omega*omega);
            double t105788 = pow(t105784,2.0/3.0);
            double t105790 = t105787*t105788;
            double t105789 = exp(-t105790);
            double t105791 = 1.0/pow(t105784,1.0/3.0);
            double t105792 = 1.0/omega;
            double t105793 = 1.0/rho_a[index];
            double t105794 = omega*t105783*t105793*(7.0368744177664E13/8.334140006820045E15);
            double t105795 = omega*t105791;
            double t105796 = gx*gx;
            double t105797 = t105796*t105796;
            double t105798 = pow(t105784,1.0/3.0);
            double t105799 = t105792*t105798;
            double t105800 = erf(t105799);
            double t105801 = t105800*(3.991211251234741E15/2.251799813685248E15);
            double t105802 = t105794-t105795;
            double t105828 = t105802*t105789;
            double t105829 = omega*t105791*(3.0/2.0);
            double t105803 = t105801-t105828-t105829+t105794;
            double t105804 = gamma_aa[index]*gx*t105590*4.0;
            double t105805 = gamma_aa[index]*gx*t105591*t105585*t105796*4.0;
            double t105806 = t105592*t105585*t105796*6.0;
            double t105807 = t105587*t105589*t105797;
            double t105808 = t105804+t105805+t105806+t105807+1.0;
            double t105809 = 1.0/t105808;
            double t105810 = cx4*t105809*t105587*t105589*t105797;
            double t105811 = gamma_aa[index]*gx*t105590;
            double t105812 = t105811+1.0;
            double t105813 = 1.0/t105812;
            double t105814 = cx1*gamma_aa[index]*gx*t105813*t105590;
            double t105815 = gamma_aa[index]*gx*t105590*3.0;
            double t105816 = gamma_aa[index]*gx*t105591*t105585*t105796;
            double t105817 = t105592*t105585*t105796*3.0;
            double t105818 = t105815+t105816+t105817+1.0;
            double t105819 = 1.0/t105818;
            double t105820 = cx3*gamma_aa[index]*gx*t105591*t105585*t105819*t105796;
            double t105821 = gamma_aa[index]*gx*t105590*2.0;
            double t105822 = t105592*t105585*t105796;
            double t105823 = t105821+t105822+1.0;
            double t105824 = 1.0/t105823;
            double t105825 = cx2*t105824*t105592*t105585*t105796;
            double t105826 = cx0+t105810+t105820+t105814+t105825;
            double t105827 = pow(rho_a[index],4.0/3.0);
            double t105830 = omega*t105803*t105791*(4.0/3.0);
            double t105831 = t105830-1.0;
            v_rho_a_[index] = (ccab0+ccab1*gcab*t105660*t105684+ccab2*t105661*t105682*t105659+ccab4*t105666*t105667* \
               t105685+ccab3*gcab*t105660*t105661*t105683*t105659)*(t105612+t105745-t105647-t105746-rho_a[index]* \
               (-t105743+t105777+t105595*t105598*(t105743+t105776-t105610*t105770*t105775*t105769-a1p*c*c0p*t105733* \
               t105582*(2.0/3.0)))+t105630*(-t105711+t105652*t105653*t105658*t105598*(t105711-(1.0/(t105691*t105691) \
               *t105697*(b2f*c*t105686*(1.0/3.0)+b4f*t105702*t105571*(2.0/3.0)+b1f*c*t105703*t105686*(1.0/6.0)+b3f* \
               c*t105633*t105686*(1.0/2.0)))/t105694+a1f*c*c0f*t105686*t105695*(2.0/3.0)-a1p*c*c0p*t105644*t105686* \
               (2.0/3.0))+a1p*c*c0p*t105644*t105686*(2.0/3.0)+t105730*t105652*t105653*t105598*t105698-t105653*t105725* \
               t105658*t105598*t105698*4.0+t105652*t105648*t105649*t105658*t105598*t105698*4.0+Aa*t105712*t105722* \
               t105724*t105658*t105598*(t105653*t105725*4.0-t105652*t105648*t105649*4.0)*2.0-Aa*t105712*t105730*t105722* \
               t105732*t105724*t105598*2.0-(t105712*t105732*t105724*1.0/(t105718*t105718)*t105658*t105598*(b2a*c* \
               t105686*(1.0/3.0)+b4a*t105702*t105571*(2.0/3.0)+b1a*c*t105703*t105686*(1.0/6.0)+b3a*c*t105633*t105686* \
               (1.0/2.0)))/t105721+Aa*a1a*c*t105712*t105722*t105732*t105658*t105686*t105598*(2.0/3.0))+t105652*t105653* \
               t105658*t105598*t105698)-t105782*(t105612+t105595*t105598*(t105611-c0p*t105582*t105584*2.0))-(rho_a[index]* \
               t105747+rho_b[index]*(t105629-t105595*t105598*(t105629-c0f*log((t105599*(1.0/2.0))/(b1f*t105615+b3f* \
               t105616+b2f*c*t105613+b4f*t105571*t105617)+1.0)*(a1f*c*t105613+1.0)*2.0))-t105630*(t105647+t105746- \
               t105652*t105653*t105658*t105598*t105698))*(ccab1*gamma_aa[index]*gcab*t105662*t105684*(4.0/3.0)-ccab2* \
               t105661*t105659*1.0/(t105677*t105677)*(gamma_aa[index]*gcab*t105662*(8.0/3.0)+gamma_aa[index]*t105660* \
               t105662*t105659*(8.0/3.0))-ccab4*1.0/(t105672*t105672)*t105666*t105667*(gamma_aa[index]*gcab*t105662* \
               (1.6E1/3.0)+gamma_aa[index]*t105660*t105662*t105659*1.6E1+gamma_aa[index]*gcab*t105661*t105662*t105659* \
               1.6E1+gamma_aa[index]*t105660*t105661*t105662*t105666*(1.6E1/3.0))-ccab1*gamma_aa[index]*t105660*t105662* \
               1.0/(t105674*t105674)*t105659*(4.0/3.0)+ccab2*gamma_aa[index]*t105660*t105662*t105682*t105659*(8.0/ \
               3.0)-ccab3*gcab*t105660*t105661*1.0/(t105681*t105681)*t105659*(gamma_aa[index]*gcab*t105662*4.0+gamma_aa[index]* \
               t105660*t105662*t105659*8.0+gamma_aa[index]*gcab*t105661*t105662*t105659*4.0)+ccab3*gamma_aa[index]* \
               gcab*t105661*t105662*t105683*t105659*4.0+ccab4*gamma_aa[index]*t105660*t105661*t105662*t105666*t105685* \
               (1.6E1/3.0))+rho_a[index]*t105747*(ccaa1*gamma_aa[index]*gcaa*t105662*t105756*(8.0/3.0)+ccaa2*t105585* \
               t105765*t105586*t105766*(1.6E1/3.0)+ccaa4*t105753*t105587*t105588*t105768*(3.2E1/3.0)-ccaa1*1.0/(t105755* \
               t105755)*t105585*t105586*t105766*(8.0/3.0)-ccaa2*t105592*1.0/(t105764*t105764)*t105585*t105586*(gamma_aa[index]* \
               gcaa*t105662*(1.6E1/3.0)+t105585*t105586*t105766*(1.6E1/3.0))-ccaa4*1.0/(t105752*t105752)*t105587* \
               t105588*t105589*(gamma_aa[index]*gcaa*t105662*(3.2E1/3.0)+t105585*t105586*t105766*3.2E1+t105587*t105588* \
               t105768*(3.2E1/3.0)+gamma_aa[index]*gcaa*t105585*t105586*t105767*3.2E1)+ccaa3*gamma_aa[index]*gcaa* \
               t105761*t105585*t105586*t105767*8.0-ccaa3*gamma_aa[index]*gcaa*1.0/(t105760*t105760)*t105591*t105585* \
               t105586*(gamma_aa[index]*gcaa*t105662*8.0+t105585*t105586*t105766*1.6E1+gamma_aa[index]*gcaa*t105585* \
               t105586*t105767*8.0))+rho_a[index]*t105782*(-t105743+t105777+t105595*t105598*(t105743+t105776-t105777- \
               t105610*t105770*t105775*t105769))-c0*pow(rho_a[index],1.0/3.0)*t105831*t105826*(4.0/3.0)+c0*t105826* \
               t105827*(omega*t105791*(omega*t105786*(-8.334140006820045E15/2.81474976710656E14)+t105789*(omega*t105786* \
               (2.778046668940015E15/1.40737488355328E14)-omega*t105783*t105785*(7.0368744177664E13/8.334140006820045E15) \
               )+omega*t105783*t105785*(7.0368744177664E13/8.334140006820045E15)+t105791*t105787*t105789*(t105795- \
               omega*t105783*t105793*(7.0368744177664E13/8.334140006820045E15))*(2.778046668940015E15/7.0368744177664E13) \
               -1.0/sqrt(3.141592653589793)*t105792*1.0/pow(t105784,2.0/3.0)*t105789*(1.108777112152858E31/1.584563250285287E29) \
               )*(4.0/3.0)+omega*t105803*t105786*(2.778046668940015E15/1.05553116266496E14))+c0*t105831*t105827*(cx1* \
               gamma_aa[index]*gx*t105813*t105662*(8.0/3.0)+cx2*t105824*t105585*t105766*t105796*(1.6E1/3.0)+cx4*t105809* \
               t105587*t105768*t105797*(3.2E1/3.0)-cx1*1.0/(t105812*t105812)*t105585*t105766*t105796*(8.0/3.0)-cx2* \
               1.0/(t105823*t105823)*t105592*t105585*t105796*(gamma_aa[index]*gx*t105662*(1.6E1/3.0)+t105585*t105766* \
               t105796*(1.6E1/3.0))-cx4*1.0/(t105808*t105808)*t105587*t105589*t105797*(gamma_aa[index]*gx*t105662* \
               (3.2E1/3.0)+t105585*t105766*t105796*3.2E1+t105587*t105768*t105797*(3.2E1/3.0)+gamma_aa[index]*gx*t105585* \
               t105767*t105796*3.2E1)+cx3*gamma_aa[index]*gx*t105585*t105819*t105767*t105796*8.0-cx3*gamma_aa[index]* \
               gx*t105591*1.0/(t105818*t105818)*t105585*t105796*(gamma_aa[index]*gx*t105662*8.0+t105585*t105766*t105796* \
               1.6E1+gamma_aa[index]*gx*t105585*t105767*t105796*8.0));
        } else if (rho_a[index] > cutoff_) {
            double t109983 = 1.0/pow(rho_a[index],1.0/3.0);
            double t109984 = c*t109983;
            double t109985 = sqrt(t109984);
            double t109986 = pow(t109984,3.0/2.0);
            double t109987 = c*c;
            double t109988 = 1.0/pow(rho_a[index],2.0/3.0);
            double t109989 = 1.0/c0p;
            double t109990 = b1p*t109985;
            double t109991 = b3p*t109986;
            double t109992 = b4p*t109987*t109988;
            double t109993 = b2p*c*t109983;
            double t109994 = t109990+t109991+t109992+t109993;
            double t109995 = 1.0/t109994;
            double t109996 = t109995*t109989*(1.0/2.0);
            double t109997 = t109996+1.0;
            double t109998 = log(t109997);
            double t109999 = a1p*c*t109983;
            double t110000 = t109999+1.0;
            double t110001 = gamma_aa[index]*gamma_aa[index];
            double t110002 = gcaa*gcaa;
            double t110003 = t110001*t110001;
            double t110004 = t110002*t110002;
            double t110005 = 1.0/pow(rho_a[index],3.2E1/3.0);
            double t110006 = 1.0/pow(rho_a[index],8.0/3.0);
            double t110007 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]);
            double t110008 = 1.0/pow(rho_a[index],1.6E1/3.0);
            double t110009 = pow(2.0,1.0/3.0);
            double t110010 = t110009*2.0;
            double t110011 = t110010-2.0;
            double t110012 = two_13*2.0;
            double t110013 = t110012-2.0;
            double t110014 = 1.0/t110013;
            double t110015 = 1.0/c0f;
            double t110016 = b1f*t109985;
            double t110017 = b3f*t109986;
            double t110018 = b4f*t109987*t109988;
            double t110019 = b2f*c*t109983;
            double t110020 = t110016+t110017+t110018+t110019;
            double t110021 = 1.0/t110020;
            double t110022 = t110021*t110015*(1.0/2.0);
            double t110023 = t110022+1.0;
            double t110024 = log(t110023);
            double t110025 = a1f*c*t109983;
            double t110026 = t110025+1.0;
            double t110027 = c0f*t110024*t110026*2.0;
            double t110028 = c0p*t109998*t110000*2.0;
            double t110029 = gamma_aa[index]*gcaa*t110006*4.0;
            double t110030 = gamma_aa[index]*gcaa*t110001*t110002*t110007*4.0;
            double t110031 = t110001*t110002*t110008*6.0;
            double t110032 = t110003*t110004*t110005;
            double t110033 = t110030+t110031+t110032+t110029+1.0;
            double t110034 = 1.0/t110033;
            double t110035 = gamma_aa[index]*gcaa*t110006;
            double t110036 = t110035+1.0;
            double t110037 = 1.0/t110036;
            double t110038 = gamma_aa[index]*gcaa*t110006*3.0;
            double t110039 = gamma_aa[index]*gcaa*t110001*t110002*t110007;
            double t110040 = t110001*t110002*t110008*3.0;
            double t110041 = t110040+t110038+t110039+1.0;
            double t110042 = 1.0/t110041;
            double t110043 = gamma_aa[index]*gcaa*t110006*2.0;
            double t110044 = t110001*t110002*t110008;
            double t110045 = t110043+t110044+1.0;
            double t110046 = 1.0/t110045;
            double t110047 = 1.0/pow(rho_a[index],1.9E1/3.0);
            double t110048 = 1.0/pow(rho_a[index],1.1E1/3.0);
            double t110049 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]*rho_a[index]);
            double t110050 = 1.0/pow(rho_a[index],3.5E1/3.0);
            double t110051 = 1.0/pow(rho_a[index],4.0/3.0);
            double t110052 = 1.0/pow(rho_a[index],5.0/3.0);
            double t110053 = 1.0/sqrt(t109984);
            double t110054 = 1.0/t109997;
            double t110055 = 1.0/(t109994*t109994);
            double t110056 = b4p*t109987*t110052*(2.0/3.0);
            double t110057 = b2p*c*t110051*(1.0/3.0);
            double t110058 = b1p*c*t110051*t110053*(1.0/6.0);
            double t110059 = b3p*c*t109985*t110051*(1.0/2.0);
            double t110060 = t110056+t110057+t110058+t110059;
            double t110061 = t110000*t110060*t110054*t110055;
            double t110062 = ccaa4*t110003*t110004*t110005*t110034;
            double t110063 = ccaa1*gamma_aa[index]*gcaa*t110006*t110037;
            double t110064 = ccaa3*gamma_aa[index]*gcaa*t110001*t110002*t110042*t110007;
            double t110065 = ccaa2*t110001*t110002*t110008*t110046;
            double t110066 = ccaa0+t110062+t110063+t110064+t110065;
            double t110067 = omega*omega;
            double t110068 = rho_a[index]*(8.334140006820045E15/1.40737488355328E14);
            double t110069 = 1.0/(rho_a[index]*rho_a[index]);
            double t110070 = 1.0/pow(t110068,4.0/3.0);
            double t110071 = 1.0/(omega*omega);
            double t110072 = pow(t110068,2.0/3.0);
            double t110074 = t110071*t110072;
            double t110073 = exp(-t110074);
            double t110075 = 1.0/pow(t110068,1.0/3.0);
            double t110076 = 1.0/omega;
            double t110077 = 1.0/rho_a[index];
            double t110078 = omega*t110067*t110077*(7.0368744177664E13/8.334140006820045E15);
            double t110079 = omega*t110075;
            double t110080 = gx*gx;
            double t110081 = t110080*t110080;
            double t110082 = pow(t110068,1.0/3.0);
            double t110083 = t110082*t110076;
            double t110084 = erf(t110083);
            double t110085 = t110084*(3.991211251234741E15/2.251799813685248E15);
            double t110086 = t110078-t110079;
            double t110112 = t110073*t110086;
            double t110113 = omega*t110075*(3.0/2.0);
            double t110087 = -t110112-t110113+t110085+t110078;
            double t110088 = gamma_aa[index]*gx*t110006*4.0;
            double t110089 = gamma_aa[index]*gx*t110001*t110007*t110080*4.0;
            double t110090 = t110001*t110008*t110080*6.0;
            double t110091 = t110003*t110005*t110081;
            double t110092 = t110090+t110091+t110088+t110089+1.0;
            double t110093 = 1.0/t110092;
            double t110094 = cx4*t110003*t110005*t110081*t110093;
            double t110095 = gamma_aa[index]*gx*t110006;
            double t110096 = t110095+1.0;
            double t110097 = 1.0/t110096;
            double t110098 = cx1*gamma_aa[index]*gx*t110006*t110097;
            double t110099 = gamma_aa[index]*gx*t110006*3.0;
            double t110100 = gamma_aa[index]*gx*t110001*t110007*t110080;
            double t110101 = t110001*t110008*t110080*3.0;
            double t110102 = t110100+t110101+t110099+1.0;
            double t110103 = 1.0/t110102;
            double t110104 = cx3*gamma_aa[index]*gx*t110001*t110103*t110007*t110080;
            double t110105 = gamma_aa[index]*gx*t110006*2.0;
            double t110106 = t110001*t110008*t110080;
            double t110107 = t110105+t110106+1.0;
            double t110108 = 1.0/t110107;
            double t110109 = cx2*t110001*t110008*t110080*t110108;
            double t110110 = cx0+t110104+t110109+t110094+t110098;
            double t110111 = pow(rho_a[index],4.0/3.0);
            double t110114 = omega*t110075*t110087*(4.0/3.0);
            double t110115 = t110114-1.0;
            v_rho_a_[index] = -t110066*(t110028+t110011*t110014*(t110027-c0p*t109998*t110000*2.0))+rho_a[index]* \
               t110066*(-t110061+t110011*t110014*(t110061-(1.0/(t110020*t110020)*t110026*(b2f*c*t110051*(1.0/3.0) \
               +b4f*t109987*t110052*(2.0/3.0)+b1f*c*t110051*t110053*(1.0/6.0)+b3f*c*t109985*t110051*(1.0/2.0)))/t110023+ \
               a1f*c*c0f*t110024*t110051*(2.0/3.0)-a1p*c*c0p*t109998*t110051*(2.0/3.0))+a1p*c*c0p*t109998*t110051* \
               (2.0/3.0))+rho_a[index]*(t110028+t110011*t110014*(t110027-t110028))*(ccaa1*gamma_aa[index]*gcaa*t110037* \
               t110048*(8.0/3.0)+ccaa4*t110003*t110004*t110050*t110034*(3.2E1/3.0)+ccaa2*t110001*t110002*t110046* \
               t110047*(1.6E1/3.0)-ccaa1*t110001*t110002*1.0/(t110036*t110036)*t110047*(8.0/3.0)-ccaa2*t110001*t110002* \
               t110008*1.0/(t110045*t110045)*(gamma_aa[index]*gcaa*t110048*(1.6E1/3.0)+t110001*t110002*t110047*(1.6E1/ \
               3.0))-ccaa4*t110003*t110004*t110005*1.0/(t110033*t110033)*(gamma_aa[index]*gcaa*t110048*(3.2E1/3.0) \
               +t110003*t110004*t110050*(3.2E1/3.0)+t110001*t110002*t110047*3.2E1+gamma_aa[index]*gcaa*t110001*t110002* \
               t110049*3.2E1)+ccaa3*gamma_aa[index]*gcaa*t110001*t110002*t110042*t110049*8.0-ccaa3*gamma_aa[index]* \
               gcaa*t110001*t110002*1.0/(t110041*t110041)*t110007*(gamma_aa[index]*gcaa*t110048*8.0+t110001*t110002* \
               t110047*1.6E1+gamma_aa[index]*gcaa*t110001*t110002*t110049*8.0))-c0*pow(rho_a[index],1.0/3.0)*t110110* \
               t110115*(4.0/3.0)+c0*t110110*t110111*(omega*t110075*(omega*t110070*(-8.334140006820045E15/2.81474976710656E14) \
               +t110073*(omega*t110070*(2.778046668940015E15/1.40737488355328E14)-omega*t110067*t110069*(7.0368744177664E13/ \
               8.334140006820045E15))+omega*t110067*t110069*(7.0368744177664E13/8.334140006820045E15)+t110071*t110073* \
               t110075*(t110079-omega*t110067*t110077*(7.0368744177664E13/8.334140006820045E15))*(2.778046668940015E15/ \
               7.0368744177664E13)-1.0/sqrt(3.141592653589793)*t110073*t110076*1.0/pow(t110068,2.0/3.0)*(1.108777112152858E31/ \
               1.584563250285287E29))*(4.0/3.0)+omega*t110070*t110087*(2.778046668940015E15/1.05553116266496E14)) \
               +c0*t110111*t110115*(cx1*gamma_aa[index]*gx*t110048*t110097*(8.0/3.0)+cx2*t110001*t110080*t110108* \
               t110047*(1.6E1/3.0)+cx4*t110003*t110050*t110081*t110093*(3.2E1/3.0)-cx1*t110001*t110080*t110047*1.0/ \
               (t110096*t110096)*(8.0/3.0)-cx2*t110001*t110008*t110080*1.0/(t110107*t110107)*(gamma_aa[index]*gx* \
               t110048*(1.6E1/3.0)+t110001*t110080*t110047*(1.6E1/3.0))-cx4*t110003*t110005*t110081*1.0/(t110092* \
               t110092)*(gamma_aa[index]*gx*t110048*(3.2E1/3.0)+t110003*t110050*t110081*(3.2E1/3.0)+t110001*t110080* \
               t110047*3.2E1+gamma_aa[index]*gx*t110001*t110080*t110049*3.2E1)+cx3*gamma_aa[index]*gx*t110001*t110103* \
               t110080*t110049*8.0-cx3*gamma_aa[index]*gx*t110001*1.0/(t110102*t110102)*t110007*t110080*(gamma_aa[index]* \
               gx*t110048*8.0+t110001*t110080*t110047*1.6E1+gamma_aa[index]*gx*t110001*t110080*t110049*8.0));
        } else if (rho_b[index] > cutoff_) {
            v_rho_a_[index] = 0.0;
        } else {
            v_rho_a_[index] = 0.0;
        }

        //V_rho_b
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t105833 = 1.0/pow(rho_b[index],1.0/3.0);
            double t105834 = c*t105833;
            double t105835 = sqrt(t105834);
            double t105836 = pow(t105834,3.0/2.0);
            double t105837 = c*c;
            double t105838 = 1.0/pow(rho_b[index],2.0/3.0);
            double t105839 = 1.0/c0p;
            double t105840 = b1p*t105835;
            double t105841 = b3p*t105836;
            double t105842 = b4p*t105837*t105838;
            double t105843 = b2p*c*t105833;
            double t105844 = t105840+t105841+t105842+t105843;
            double t105845 = 1.0/t105844;
            double t105846 = t105845*t105839*(1.0/2.0);
            double t105847 = t105846+1.0;
            double t105848 = log(t105847);
            double t105849 = a1p*c*t105833;
            double t105850 = t105849+1.0;
            double t105851 = gamma_bb[index]*gamma_bb[index];
            double t105852 = gcaa*gcaa;
            double t105853 = t105851*t105851;
            double t105854 = t105852*t105852;
            double t105855 = 1.0/pow(rho_b[index],3.2E1/3.0);
            double t105856 = 1.0/pow(rho_b[index],8.0/3.0);
            double t105857 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
               rho_b[index]*rho_b[index]);
            double t105858 = 1.0/pow(rho_b[index],1.6E1/3.0);
            double t105859 = pow(2.0,1.0/3.0);
            double t105860 = t105859*2.0;
            double t105861 = t105860-2.0;
            double t105862 = two_13*2.0;
            double t105863 = t105862-2.0;
            double t105864 = 1.0/t105863;
            double t105865 = 1.0/c0f;
            double t105866 = 1.0/pow(rho_a[index],1.0/3.0);
            double t105867 = c*t105866;
            double t105868 = sqrt(t105867);
            double t105869 = pow(t105867,3.0/2.0);
            double t105870 = 1.0/pow(rho_a[index],2.0/3.0);
            double t105871 = b1p*t105868;
            double t105872 = b3p*t105869;
            double t105873 = b4p*t105870*t105837;
            double t105874 = b2p*c*t105866;
            double t105875 = t105871+t105872+t105873+t105874;
            double t105876 = 1.0/t105875;
            double t105877 = t105839*t105876*(1.0/2.0);
            double t105878 = t105877+1.0;
            double t105879 = log(t105878);
            double t105880 = a1p*c*t105866;
            double t105881 = t105880+1.0;
            double t105882 = c0p*t105881*t105879*2.0;
            double t105883 = b1f*t105835;
            double t105884 = b3f*t105836;
            double t105885 = b4f*t105837*t105838;
            double t105886 = b2f*c*t105833;
            double t105887 = t105883+t105884+t105885+t105886;
            double t105888 = 1.0/t105887;
            double t105889 = t105865*t105888*(1.0/2.0);
            double t105890 = t105889+1.0;
            double t105891 = log(t105890);
            double t105892 = a1f*c*t105833;
            double t105893 = t105892+1.0;
            double t105894 = c0f*t105891*t105893*2.0;
            double t105895 = c0p*t105850*t105848*2.0;
            double t105896 = rho_a[index]+rho_b[index];
            double t105897 = 1.0/pow(t105896,1.0/3.0);
            double t105898 = c*t105897;
            double t105899 = sqrt(t105898);
            double t105900 = pow(t105898,3.0/2.0);
            double t105901 = 1.0/pow(t105896,2.0/3.0);
            double t105902 = b1p*t105899;
            double t105903 = b3p*t105900;
            double t105904 = b4p*t105901*t105837;
            double t105905 = b2p*c*t105897;
            double t105906 = t105902+t105903+t105904+t105905;
            double t105907 = 1.0/t105906;
            double t105908 = t105907*t105839*(1.0/2.0);
            double t105909 = t105908+1.0;
            double t105910 = log(t105909);
            double t105911 = a1p*c*t105897;
            double t105912 = t105911+1.0;
            double t105913 = c0p*t105910*t105912*2.0;
            double t105914 = rho_a[index]-rho_b[index];
            double t105915 = t105914*t105914;
            double t105916 = 1.0/t105896;
            double t105917 = t105914*t105916;
            double t105918 = 1.0/(t105896*t105896*t105896*t105896);
            double t105919 = t105915*t105915;
            double t105920 = t105917+1.0;
            double t105921 = pow(t105920,4.0/3.0);
            double t105922 = -t105917+1.0;
            double t105923 = pow(t105922,4.0/3.0);
            double t105924 = t105921+t105923-2.0;
            double t105925 = gcab*gcab;
            double t105929 = 1.0/pow(rho_a[index],8.0/3.0);
            double t105930 = gamma_aa[index]*t105929*(1.0/2.0);
            double t105931 = gamma_bb[index]*t105856*(1.0/2.0);
            double t105926 = t105930+t105931;
            double t105927 = t105926*t105926;
            double t105928 = 1.0/pow(rho_b[index],1.1E1/3.0);
            double t105932 = t105925*t105925;
            double t105933 = t105927*t105927;
            double t105934 = t105925*t105927*6.0;
            double t105935 = gcab*t105925*t105926*t105927*4.0;
            double t105936 = t105932*t105933;
            double t105937 = gcab*t105926*4.0;
            double t105938 = t105934+t105935+t105936+t105937+1.0;
            double t105939 = gcab*t105926;
            double t105940 = t105939+1.0;
            double t105941 = t105925*t105927;
            double t105942 = gcab*t105926*2.0;
            double t105943 = t105941+t105942+1.0;
            double t105944 = t105925*t105927*3.0;
            double t105945 = gcab*t105925*t105926*t105927;
            double t105946 = gcab*t105926*3.0;
            double t105947 = t105944+t105945+t105946+1.0;
            double t105948 = 1.0/t105943;
            double t105949 = 1.0/t105947;
            double t105950 = 1.0/t105940;
            double t105951 = 1.0/t105938;
            double t105952 = 1.0/pow(t105896,4.0/3.0);
            double t105953 = b1f*t105899;
            double t105954 = b3f*t105900;
            double t105955 = b4f*t105901*t105837;
            double t105956 = b2f*c*t105897;
            double t105957 = t105953+t105954+t105955+t105956;
            double t105958 = 1.0/t105957;
            double t105959 = t105865*t105958*(1.0/2.0);
            double t105960 = t105959+1.0;
            double t105961 = log(t105960);
            double t105962 = a1f*c*t105897;
            double t105963 = t105962+1.0;
            double t105965 = c0f*t105961*t105963*2.0;
            double t105964 = t105913-t105965;
            double t105966 = 1.0/(t105896*t105896);
            double t105967 = t105914*t105966;
            double t105968 = t105916+t105967;
            double t105969 = 1.0/pow(t105896,5.0/3.0);
            double t105970 = 1.0/sqrt(t105898);
            double t105971 = 1.0/t105909;
            double t105972 = 1.0/(t105906*t105906);
            double t105973 = b4p*t105837*t105969*(2.0/3.0);
            double t105974 = b2p*c*t105952*(1.0/3.0);
            double t105975 = b1p*c*t105952*t105970*(1.0/6.0);
            double t105976 = b3p*c*t105952*t105899*(1.0/2.0);
            double t105977 = t105973+t105974+t105975+t105976;
            double t105978 = 1.0/d2fz0;
            double t105979 = 1.0/Aa;
            double t105980 = b1a*t105899;
            double t105981 = b3a*t105900;
            double t105982 = b4a*t105901*t105837;
            double t105983 = b2a*c*t105897;
            double t105984 = t105980+t105981+t105982+t105983;
            double t105985 = 1.0/t105984;
            double t105986 = t105985*t105979*(1.0/2.0);
            double t105987 = t105986+1.0;
            double t105988 = log(t105987);
            double t105989 = a1a*c*t105897;
            double t105990 = t105989+1.0;
            double t105991 = 1.0/(t105896*t105896*t105896*t105896*t105896);
            double t105992 = pow(t105920,1.0/3.0);
            double t105993 = t105992*t105968*(4.0/3.0);
            double t105994 = pow(t105922,1.0/3.0);
            double t105995 = t105993-t105994*t105968*(4.0/3.0);
            double t105996 = t105918*t105919;
            double t105997 = t105996-1.0;
            double t105998 = t105912*t105971*t105972*t105977;
            double t105999 = 1.0/pow(rho_b[index],4.0/3.0);
            double t106000 = 1.0/pow(rho_b[index],5.0/3.0);
            double t106001 = 1.0/sqrt(t105834);
            double t106002 = 1.0/t105847;
            double t106003 = 1.0/(t105844*t105844);
            double t106004 = b4p*t106000*t105837*(2.0/3.0);
            double t106005 = b2p*c*t105999*(1.0/3.0);
            double t106006 = b1p*c*t106001*t105999*(1.0/6.0);
            double t106007 = b3p*c*t105835*t105999*(1.0/2.0);
            double t106008 = t106004+t106005+t106006+t106007;
            double t106009 = t106002*t106003*t106008*t105850;
            double t106010 = t105894-t105895;
            double t106011 = t106010*t105861*t105864;
            double t106012 = Aa*t105924*t105864*t105990*t105978*t105988*t105997*2.0;
            double t106013 = t106011+t105895;
            double t106014 = gamma_bb[index]*gcaa*t105856*4.0;
            double t106015 = gamma_bb[index]*gcaa*t105851*t105852*t105857*4.0;
            double t106016 = t105851*t105852*t105858*6.0;
            double t106017 = t105853*t105854*t105855;
            double t106018 = t106014+t106015+t106016+t106017+1.0;
            double t106019 = 1.0/t106018;
            double t106020 = gamma_bb[index]*gcaa*t105856;
            double t106021 = t106020+1.0;
            double t106022 = 1.0/t106021;
            double t106023 = gamma_bb[index]*gcaa*t105856*3.0;
            double t106024 = gamma_bb[index]*gcaa*t105851*t105852*t105857;
            double t106025 = t105851*t105852*t105858*3.0;
            double t106026 = t106023+t106024+t106025+1.0;
            double t106027 = 1.0/t106026;
            double t106028 = gamma_bb[index]*gcaa*t105856*2.0;
            double t106029 = t105851*t105852*t105858;
            double t106030 = t106028+t106029+1.0;
            double t106031 = 1.0/t106030;
            double t106032 = 1.0/pow(rho_b[index],1.9E1/3.0);
            double t106033 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
               rho_b[index]*rho_b[index]*rho_b[index]);
            double t106034 = 1.0/pow(rho_b[index],3.5E1/3.0);
            double t106035 = 1.0/t105890;
            double t106036 = 1.0/(t105887*t105887);
            double t106037 = b4f*t106000*t105837*(2.0/3.0);
            double t106038 = b2f*c*t105999*(1.0/3.0);
            double t106039 = b1f*c*t106001*t105999*(1.0/6.0);
            double t106040 = b3f*c*t105835*t105999*(1.0/2.0);
            double t106041 = t106040+t106037+t106038+t106039;
            double t106042 = a1f*c*c0f*t105891*t105999*(2.0/3.0);
            double t106043 = a1p*c*c0p*t105848*t105999*(2.0/3.0);
            double t106044 = ccaa4*t106019*t105853*t105854*t105855;
            double t106045 = ccaa1*gamma_bb[index]*gcaa*t106022*t105856;
            double t106046 = ccaa3*gamma_bb[index]*gcaa*t106027*t105851*t105852*t105857;
            double t106047 = ccaa2*t106031*t105851*t105852*t105858;
            double t106048 = ccaa0+t106044+t106045+t106046+t106047;
            double t106049 = omega*omega;
            double t106050 = rho_b[index]*(8.334140006820045E15/1.40737488355328E14);
            double t106051 = 1.0/(rho_b[index]*rho_b[index]);
            double t106052 = 1.0/pow(t106050,4.0/3.0);
            double t106053 = 1.0/(omega*omega);
            double t106054 = pow(t106050,2.0/3.0);
            double t106056 = t106053*t106054;
            double t106055 = exp(-t106056);
            double t106057 = 1.0/pow(t106050,1.0/3.0);
            double t106058 = 1.0/omega;
            double t106059 = 1.0/rho_b[index];
            double t106060 = omega*t106049*t106059*(7.0368744177664E13/8.334140006820045E15);
            double t106061 = omega*t106057;
            double t106062 = gx*gx;
            double t106063 = t106062*t106062;
            double t106064 = pow(t106050,1.0/3.0);
            double t106065 = t106064*t106058;
            double t106066 = erf(t106065);
            double t106067 = t106066*(3.991211251234741E15/2.251799813685248E15);
            double t106068 = t106060-t106061;
            double t106094 = t106055*t106068;
            double t106095 = omega*t106057*(3.0/2.0);
            double t106069 = t106060+t106067-t106094-t106095;
            double t106070 = gamma_bb[index]*gx*t105856*4.0;
            double t106071 = gamma_bb[index]*gx*t106062*t105851*t105857*4.0;
            double t106072 = t106062*t105851*t105858*6.0;
            double t106073 = t106063*t105853*t105855;
            double t106074 = t106070+t106071+t106072+t106073+1.0;
            double t106075 = 1.0/t106074;
            double t106076 = cx4*t106063*t106075*t105853*t105855;
            double t106077 = gamma_bb[index]*gx*t105856;
            double t106078 = t106077+1.0;
            double t106079 = 1.0/t106078;
            double t106080 = cx1*gamma_bb[index]*gx*t106079*t105856;
            double t106081 = gamma_bb[index]*gx*t105856*3.0;
            double t106082 = gamma_bb[index]*gx*t106062*t105851*t105857;
            double t106083 = t106062*t105851*t105858*3.0;
            double t106084 = t106081+t106082+t106083+1.0;
            double t106085 = 1.0/t106084;
            double t106086 = cx3*gamma_bb[index]*gx*t106062*t105851*t106085*t105857;
            double t106087 = gamma_bb[index]*gx*t105856*2.0;
            double t106088 = t106062*t105851*t105858;
            double t106089 = t106087+t106088+1.0;
            double t106090 = 1.0/t106089;
            double t106091 = cx2*t106062*t106090*t105851*t105858;
            double t106092 = cx0+t106080+t106091+t106076+t106086;
            double t106093 = pow(rho_b[index],4.0/3.0);
            double t106096 = omega*t106057*t106069*(4.0/3.0);
            double t106097 = t106096-1.0;
            v_rho_b_[index] = -(ccab0+ccab1*gcab*t105950*t105926+ccab4*t105932*t105933*t105951+ccab2*t105925* \
               t105927*t105948+ccab3*gcab*t105925*t105926*t105927*t105949)*(-t106011+t106012+t105913-t105895+t105896* \
               (t105998-t105924*t105864*t105918*t105919*(t105998-(t105963*1.0/(t105957*t105957)*(b2f*c*t105952*(1.0/ \
               3.0)+b4f*t105837*t105969*(2.0/3.0)+b1f*c*t105952*t105970*(1.0/6.0)+b3f*c*t105952*t105899*(1.0/2.0) \
               ))/t105960+a1f*c*c0f*t105952*t105961*(2.0/3.0)-a1p*c*c0p*t105910*t105952*(2.0/3.0))-a1p*c*c0p*t105910* \
               t105952*(2.0/3.0)+t105924*t105864*t105919*t105964*t105991*4.0+t105864*t105918*t105919*t105964*t105995+ \
               t105914*t105915*t105924*t105864*t105918*t105964*4.0-Aa*t105924*t105864*t105990*t105978*t105988*(t105919* \
               t105991*4.0+t105914*t105915*t105918*4.0)*2.0-Aa*t105864*t105990*t105995*t105978*t105988*t105997*2.0+ \
               (t105924*t105864*t105990*1.0/(t105984*t105984)*t105978*t105997*(b2a*c*t105952*(1.0/3.0)+b4a*t105837* \
               t105969*(2.0/3.0)+b1a*c*t105952*t105970*(1.0/6.0)+b3a*c*t105952*t105899*(1.0/2.0)))/t105987-Aa*a1a* \
               c*t105924*t105952*t105864*t105978*t105988*t105997*(2.0/3.0))+rho_b[index]*(t106043-t106009+t105861* \
               t105864*(t106042+t106009-t106041*t106035*t106036*t105893-a1p*c*c0p*t105848*t105999*(2.0/3.0)))-t105924* \
               t105864*t105918*t105919*t105964)-t106048*(t105895+t105861*t105864*(t105894-c0p*t105850*t105848*2.0) \
               )-(rho_b[index]*t106013+rho_a[index]*(t105882-t105861*t105864*(t105882-c0f*log((t105865*(1.0/2.0)) \
               /(b1f*t105868+b3f*t105869+b2f*c*t105866+b4f*t105870*t105837)+1.0)*(a1f*c*t105866+1.0)*2.0))-t105896* \
               (t106012+t105913-t105924*t105864*t105918*t105919*t105964))*(ccab1*gamma_bb[index]*gcab*t105950*t105928* \
               (4.0/3.0)-ccab2*t105925*1.0/(t105943*t105943)*t105927*(gamma_bb[index]*gcab*t105928*(8.0/3.0)+gamma_bb[index]* \
               t105925*t105926*t105928*(8.0/3.0))-ccab4*t105932*t105933*1.0/(t105938*t105938)*(gamma_bb[index]*gcab* \
               t105928*(1.6E1/3.0)+gamma_bb[index]*t105925*t105926*t105928*1.6E1+gamma_bb[index]*gcab*t105925*t105927* \
               t105928*1.6E1+gamma_bb[index]*t105932*t105926*t105927*t105928*(1.6E1/3.0))-ccab1*gamma_bb[index]*1.0/ \
               (t105940*t105940)*t105925*t105926*t105928*(4.0/3.0)+ccab2*gamma_bb[index]*t105925*t105926*t105928* \
               t105948*(8.0/3.0)-ccab3*gcab*t105925*t105926*t105927*1.0/(t105947*t105947)*(gamma_bb[index]*gcab*t105928* \
               4.0+gamma_bb[index]*t105925*t105926*t105928*8.0+gamma_bb[index]*gcab*t105925*t105927*t105928*4.0)+ \
               ccab3*gamma_bb[index]*gcab*t105925*t105927*t105928*t105949*4.0+ccab4*gamma_bb[index]*t105932*t105951* \
               t105926*t105927*t105928*(1.6E1/3.0))+rho_b[index]*t106013*(ccaa1*gamma_bb[index]*gcaa*t106022*t105928* \
               (8.0/3.0)+ccaa2*t106031*t106032*t105851*t105852*(1.6E1/3.0)+ccaa4*t106034*t106019*t105853*t105854* \
               (3.2E1/3.0)-ccaa1*1.0/(t106021*t106021)*t106032*t105851*t105852*(8.0/3.0)-ccaa2*1.0/(t106030*t106030) \
               *t105851*t105852*t105858*(gamma_bb[index]*gcaa*t105928*(1.6E1/3.0)+t106032*t105851*t105852*(1.6E1/ \
               3.0))-ccaa4*1.0/(t106018*t106018)*t105853*t105854*t105855*(gamma_bb[index]*gcaa*t105928*(3.2E1/3.0) \
               +t106032*t105851*t105852*3.2E1+t106034*t105853*t105854*(3.2E1/3.0)+gamma_bb[index]*gcaa*t106033*t105851* \
               t105852*3.2E1)+ccaa3*gamma_bb[index]*gcaa*t106033*t106027*t105851*t105852*8.0-ccaa3*gamma_bb[index]* \
               gcaa*1.0/(t106026*t106026)*t105851*t105852*t105857*(gamma_bb[index]*gcaa*t105928*8.0+t106032*t105851* \
               t105852*1.6E1+gamma_bb[index]*gcaa*t106033*t105851*t105852*8.0))+rho_b[index]*t106048*(t106043-t106009+ \
               t105861*t105864*(t106042-t106043+t106009-t106041*t106035*t106036*t105893))-c0*pow(rho_b[index],1.0/ \
               3.0)*t106092*t106097*(4.0/3.0)+c0*t106092*t106093*(omega*t106057*(omega*t106052*(-8.334140006820045E15/ \
               2.81474976710656E14)+t106055*(omega*t106052*(2.778046668940015E15/1.40737488355328E14)-omega*t106051* \
               t106049*(7.0368744177664E13/8.334140006820045E15))+omega*t106051*t106049*(7.0368744177664E13/8.334140006820045E15) \
               +t106053*t106055*t106057*(t106061-omega*t106049*t106059*(7.0368744177664E13/8.334140006820045E15)) \
               *(2.778046668940015E15/7.0368744177664E13)-1.0/sqrt(3.141592653589793)*1.0/pow(t106050,2.0/3.0)*t106055* \
               t106058*(1.108777112152858E31/1.584563250285287E29))*(4.0/3.0)+omega*t106052*t106069*(2.778046668940015E15/ \
               1.05553116266496E14))+c0*t106093*t106097*(cx1*gamma_bb[index]*gx*t106079*t105928*(8.0/3.0)+cx2*t106032* \
               t106062*t106090*t105851*(1.6E1/3.0)+cx4*t106034*t106063*t106075*t105853*(3.2E1/3.0)-cx1*t106032*t106062* \
               t105851*1.0/(t106078*t106078)*(8.0/3.0)-cx2*t106062*t105851*1.0/(t106089*t106089)*t105858*(gamma_bb[index]* \
               gx*t105928*(1.6E1/3.0)+t106032*t106062*t105851*(1.6E1/3.0))-cx4*t106063*1.0/(t106074*t106074)*t105853* \
               t105855*(gamma_bb[index]*gx*t105928*(3.2E1/3.0)+t106032*t106062*t105851*3.2E1+t106034*t106063*t105853* \
               (3.2E1/3.0)+gamma_bb[index]*gx*t106033*t106062*t105851*3.2E1)+cx3*gamma_bb[index]*gx*t106033*t106062* \
               t105851*t106085*8.0-cx3*gamma_bb[index]*gx*t106062*1.0/(t106084*t106084)*t105851*t105857*(gamma_bb[index]* \
               gx*t105928*8.0+t106032*t106062*t105851*1.6E1+gamma_bb[index]*gx*t106033*t106062*t105851*8.0));
        } else if (rho_a[index] > cutoff_) {
            v_rho_b_[index] = 0.0;
        } else if (rho_b[index] > cutoff_) {
            double t109224 = 1.0/pow(rho_b[index],1.0/3.0);
            double t109225 = c*t109224;
            double t109226 = sqrt(t109225);
            double t109227 = pow(t109225,3.0/2.0);
            double t109228 = c*c;
            double t109229 = 1.0/pow(rho_b[index],2.0/3.0);
            double t109230 = 1.0/c0p;
            double t109231 = b1p*t109226;
            double t109232 = b3p*t109227;
            double t109233 = b4p*t109228*t109229;
            double t109234 = b2p*c*t109224;
            double t109235 = t109231+t109232+t109233+t109234;
            double t109236 = 1.0/t109235;
            double t109237 = t109230*t109236*(1.0/2.0);
            double t109238 = t109237+1.0;
            double t109239 = log(t109238);
            double t109240 = a1p*c*t109224;
            double t109241 = t109240+1.0;
            double t109242 = gamma_bb[index]*gamma_bb[index];
            double t109243 = gcaa*gcaa;
            double t109244 = t109242*t109242;
            double t109245 = t109243*t109243;
            double t109246 = 1.0/pow(rho_b[index],3.2E1/3.0);
            double t109247 = 1.0/pow(rho_b[index],8.0/3.0);
            double t109248 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
               rho_b[index]*rho_b[index]);
            double t109249 = 1.0/pow(rho_b[index],1.6E1/3.0);
            double t109250 = pow(2.0,1.0/3.0);
            double t109251 = t109250*2.0;
            double t109252 = t109251-2.0;
            double t109253 = two_13*2.0;
            double t109254 = t109253-2.0;
            double t109255 = 1.0/t109254;
            double t109256 = 1.0/c0f;
            double t109257 = b1f*t109226;
            double t109258 = b3f*t109227;
            double t109259 = b4f*t109228*t109229;
            double t109260 = b2f*c*t109224;
            double t109261 = t109260+t109257+t109258+t109259;
            double t109262 = 1.0/t109261;
            double t109263 = t109262*t109256*(1.0/2.0);
            double t109264 = t109263+1.0;
            double t109265 = log(t109264);
            double t109266 = a1f*c*t109224;
            double t109267 = t109266+1.0;
            double t109268 = c0f*t109265*t109267*2.0;
            double t109269 = c0p*t109241*t109239*2.0;
            double t109270 = gamma_bb[index]*gcaa*t109247*4.0;
            double t109271 = gamma_bb[index]*gcaa*t109242*t109243*t109248*4.0;
            double t109272 = t109242*t109243*t109249*6.0;
            double t109273 = t109244*t109245*t109246;
            double t109274 = t109270+t109271+t109272+t109273+1.0;
            double t109275 = 1.0/t109274;
            double t109276 = gamma_bb[index]*gcaa*t109247;
            double t109277 = t109276+1.0;
            double t109278 = 1.0/t109277;
            double t109279 = gamma_bb[index]*gcaa*t109247*3.0;
            double t109280 = gamma_bb[index]*gcaa*t109242*t109243*t109248;
            double t109281 = t109242*t109243*t109249*3.0;
            double t109282 = t109280+t109281+t109279+1.0;
            double t109283 = 1.0/t109282;
            double t109284 = gamma_bb[index]*gcaa*t109247*2.0;
            double t109285 = t109242*t109243*t109249;
            double t109286 = t109284+t109285+1.0;
            double t109287 = 1.0/t109286;
            double t109288 = 1.0/pow(rho_b[index],1.9E1/3.0);
            double t109289 = 1.0/pow(rho_b[index],1.1E1/3.0);
            double t109290 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
               rho_b[index]*rho_b[index]*rho_b[index]);
            double t109291 = 1.0/pow(rho_b[index],3.5E1/3.0);
            double t109292 = 1.0/pow(rho_b[index],4.0/3.0);
            double t109293 = 1.0/pow(rho_b[index],5.0/3.0);
            double t109294 = 1.0/sqrt(t109225);
            double t109295 = 1.0/t109238;
            double t109296 = 1.0/(t109235*t109235);
            double t109297 = b4p*t109228*t109293*(2.0/3.0);
            double t109298 = b2p*c*t109292*(1.0/3.0);
            double t109299 = b1p*c*t109292*t109294*(1.0/6.0);
            double t109300 = b3p*c*t109226*t109292*(1.0/2.0);
            double t109301 = t109300+t109297+t109298+t109299;
            double t109302 = t109301*t109241*t109295*t109296;
            double t109303 = ccaa4*t109244*t109245*t109246*t109275;
            double t109304 = ccaa1*gamma_bb[index]*gcaa*t109247*t109278;
            double t109305 = ccaa3*gamma_bb[index]*gcaa*t109242*t109243*t109283*t109248;
            double t109306 = ccaa2*t109242*t109243*t109249*t109287;
            double t109307 = ccaa0+t109303+t109304+t109305+t109306;
            double t109308 = omega*omega;
            double t109309 = rho_b[index]*(8.334140006820045E15/1.40737488355328E14);
            double t109310 = 1.0/(rho_b[index]*rho_b[index]);
            double t109311 = 1.0/pow(t109309,4.0/3.0);
            double t109312 = 1.0/(omega*omega);
            double t109313 = pow(t109309,2.0/3.0);
            double t109315 = t109312*t109313;
            double t109314 = exp(-t109315);
            double t109316 = 1.0/pow(t109309,1.0/3.0);
            double t109317 = 1.0/omega;
            double t109318 = 1.0/rho_b[index];
            double t109319 = omega*t109308*t109318*(7.0368744177664E13/8.334140006820045E15);
            double t109320 = omega*t109316;
            double t109321 = gx*gx;
            double t109322 = t109321*t109321;
            double t109323 = pow(t109309,1.0/3.0);
            double t109324 = t109323*t109317;
            double t109325 = erf(t109324);
            double t109326 = t109325*(3.991211251234741E15/2.251799813685248E15);
            double t109327 = t109314*(t109320-t109319);
            double t109353 = omega*t109316*(3.0/2.0);
            double t109328 = t109326-t109353+t109327+t109319;
            double t109329 = gamma_bb[index]*gx*t109247*4.0;
            double t109330 = gamma_bb[index]*gx*t109321*t109242*t109248*4.0;
            double t109331 = t109321*t109242*t109249*6.0;
            double t109332 = t109322*t109244*t109246;
            double t109333 = t109330+t109331+t109332+t109329+1.0;
            double t109334 = 1.0/t109333;
            double t109335 = cx4*t109322*t109244*t109334*t109246;
            double t109336 = gamma_bb[index]*gx*t109247;
            double t109337 = t109336+1.0;
            double t109338 = 1.0/t109337;
            double t109339 = cx1*gamma_bb[index]*gx*t109247*t109338;
            double t109340 = gamma_bb[index]*gx*t109247*3.0;
            double t109341 = gamma_bb[index]*gx*t109321*t109242*t109248;
            double t109342 = t109321*t109242*t109249*3.0;
            double t109343 = t109340+t109341+t109342+1.0;
            double t109344 = 1.0/t109343;
            double t109345 = cx3*gamma_bb[index]*gx*t109321*t109242*t109344*t109248;
            double t109346 = gamma_bb[index]*gx*t109247*2.0;
            double t109347 = t109321*t109242*t109249;
            double t109348 = t109346+t109347+1.0;
            double t109349 = 1.0/t109348;
            double t109350 = cx2*t109321*t109242*t109249*t109349;
            double t109351 = cx0+t109350+t109335+t109345+t109339;
            double t109352 = pow(rho_b[index],4.0/3.0);
            double t109354 = omega*t109316*t109328*(4.0/3.0);
            double t109355 = t109354-1.0;
            v_rho_b_[index] = -t109307*(t109269+t109252*t109255*(t109268-c0p*t109241*t109239*2.0))+rho_b[index]* \
               t109307*(-t109302+t109252*t109255*(t109302-(1.0/(t109261*t109261)*t109267*(b2f*c*t109292*(1.0/3.0) \
               +b4f*t109228*t109293*(2.0/3.0)+b1f*c*t109292*t109294*(1.0/6.0)+b3f*c*t109226*t109292*(1.0/2.0)))/t109264+ \
               a1f*c*c0f*t109265*t109292*(2.0/3.0)-a1p*c*c0p*t109292*t109239*(2.0/3.0))+a1p*c*c0p*t109292*t109239* \
               (2.0/3.0))+rho_b[index]*(t109269+t109252*t109255*(t109268-t109269))*(ccaa1*gamma_bb[index]*gcaa*t109278* \
               t109289*(8.0/3.0)+ccaa4*t109244*t109245*t109291*t109275*(3.2E1/3.0)+ccaa2*t109242*t109243*t109287* \
               t109288*(1.6E1/3.0)-ccaa1*t109242*t109243*1.0/(t109277*t109277)*t109288*(8.0/3.0)-ccaa2*t109242*t109243* \
               t109249*1.0/(t109286*t109286)*(gamma_bb[index]*gcaa*t109289*(1.6E1/3.0)+t109242*t109243*t109288*(1.6E1/ \
               3.0))-ccaa4*t109244*t109245*t109246*1.0/(t109274*t109274)*(gamma_bb[index]*gcaa*t109289*(3.2E1/3.0) \
               +t109244*t109245*t109291*(3.2E1/3.0)+t109242*t109243*t109288*3.2E1+gamma_bb[index]*gcaa*t109242*t109243* \
               t109290*3.2E1)+ccaa3*gamma_bb[index]*gcaa*t109242*t109243*t109290*t109283*8.0-ccaa3*gamma_bb[index]* \
               gcaa*t109242*t109243*1.0/(t109282*t109282)*t109248*(gamma_bb[index]*gcaa*t109289*8.0+t109242*t109243* \
               t109288*1.6E1+gamma_bb[index]*gcaa*t109242*t109243*t109290*8.0))-c0*pow(rho_b[index],1.0/3.0)*t109351* \
               t109355*(4.0/3.0)+c0*t109351*t109352*(omega*t109316*(omega*t109311*(-8.334140006820045E15/2.81474976710656E14) \
               +t109314*(omega*t109311*(2.778046668940015E15/1.40737488355328E14)-omega*t109310*t109308*(7.0368744177664E13/ \
               8.334140006820045E15))+omega*t109310*t109308*(7.0368744177664E13/8.334140006820045E15)+t109312*t109314* \
               t109316*(t109320-omega*t109308*t109318*(7.0368744177664E13/8.334140006820045E15))*(2.778046668940015E15/ \
               7.0368744177664E13)-1.0/sqrt(3.141592653589793)*t109314*t109317*1.0/pow(t109309,2.0/3.0)*(1.108777112152858E31/ \
               1.584563250285287E29))*(4.0/3.0)+omega*t109311*t109328*(2.778046668940015E15/1.05553116266496E14)) \
               +c0*t109352*t109355*(cx1*gamma_bb[index]*gx*t109338*t109289*(8.0/3.0)+cx2*t109321*t109242*t109349* \
               t109288*(1.6E1/3.0)+cx4*t109322*t109244*t109334*t109291*(3.2E1/3.0)-cx1*t109321*t109242*1.0/(t109337* \
               t109337)*t109288*(8.0/3.0)-cx2*t109321*t109242*t109249*1.0/(t109348*t109348)*(gamma_bb[index]*gx*t109289* \
               (1.6E1/3.0)+t109321*t109242*t109288*(1.6E1/3.0))-cx4*t109322*1.0/(t109333*t109333)*t109244*t109246* \
               (gamma_bb[index]*gx*t109289*(3.2E1/3.0)+t109322*t109244*t109291*(3.2E1/3.0)+t109321*t109242*t109288* \
               3.2E1+gamma_bb[index]*gx*t109321*t109242*t109290*3.2E1)+cx3*gamma_bb[index]*gx*t109321*t109242*t109290* \
               t109344*8.0-cx3*gamma_bb[index]*gx*t109321*t109242*1.0/(t109343*t109343)*t109248*(gamma_bb[index]* \
               gx*t109289*8.0+t109321*t109242*t109288*1.6E1+gamma_bb[index]*gx*t109321*t109242*t109290*8.0));
        } else {
            v_rho_b_[index] = 0.0;
        }

        if (is_gga_) {

            //V_gamma_aa
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t106099 = 1.0/pow(rho_a[index],1.0/3.0);
                double t106100 = c*t106099;
                double t106101 = sqrt(t106100);
                double t106102 = pow(t106100,3.0/2.0);
                double t106103 = c*c;
                double t106104 = 1.0/pow(rho_a[index],2.0/3.0);
                double t106105 = 1.0/c0p;
                double t106106 = b1p*t106101;
                double t106107 = b3p*t106102;
                double t106108 = b4p*t106103*t106104;
                double t106109 = b2p*c*t106099;
                double t106110 = t106106+t106107+t106108+t106109;
                double t106111 = 1.0/t106110;
                double t106112 = t106111*t106105*(1.0/2.0);
                double t106113 = t106112+1.0;
                double t106114 = log(t106113);
                double t106115 = a1p*c*t106099;
                double t106116 = t106115+1.0;
                double t106117 = pow(2.0,1.0/3.0);
                double t106118 = t106117*2.0;
                double t106119 = t106118-2.0;
                double t106120 = two_13*2.0;
                double t106121 = t106120-2.0;
                double t106122 = 1.0/t106121;
                double t106123 = 1.0/c0f;
                double t106124 = 1.0/pow(rho_b[index],1.0/3.0);
                double t106125 = c*t106124;
                double t106126 = sqrt(t106125);
                double t106127 = pow(t106125,3.0/2.0);
                double t106128 = 1.0/pow(rho_b[index],2.0/3.0);
                double t106129 = b1p*t106126;
                double t106130 = b3p*t106127;
                double t106131 = b4p*t106103*t106128;
                double t106132 = b2p*c*t106124;
                double t106133 = t106130+t106131+t106132+t106129;
                double t106134 = 1.0/t106133;
                double t106135 = t106105*t106134*(1.0/2.0);
                double t106136 = t106135+1.0;
                double t106137 = log(t106136);
                double t106138 = a1p*c*t106124;
                double t106139 = t106138+1.0;
                double t106140 = c0p*t106137*t106139*2.0;
                double t106141 = rho_a[index]+rho_b[index];
                double t106142 = 1.0/pow(t106141,1.0/3.0);
                double t106143 = c*t106142;
                double t106144 = sqrt(t106143);
                double t106145 = pow(t106143,3.0/2.0);
                double t106146 = 1.0/pow(t106141,2.0/3.0);
                double t106147 = b1p*t106144;
                double t106148 = b3p*t106145;
                double t106149 = b4p*t106103*t106146;
                double t106150 = b2p*c*t106142;
                double t106151 = t106150+t106147+t106148+t106149;
                double t106152 = 1.0/t106151;
                double t106153 = t106105*t106152*(1.0/2.0);
                double t106154 = t106153+1.0;
                double t106155 = log(t106154);
                double t106156 = a1p*c*t106142;
                double t106157 = t106156+1.0;
                double t106158 = c0p*t106155*t106157*2.0;
                double t106159 = rho_a[index]-rho_b[index];
                double t106160 = t106159*t106159;
                double t106161 = 1.0/t106141;
                double t106162 = t106161*t106159;
                double t106163 = 1.0/(t106141*t106141*t106141*t106141);
                double t106164 = t106160*t106160;
                double t106165 = t106162+1.0;
                double t106166 = pow(t106165,4.0/3.0);
                double t106167 = -t106162+1.0;
                double t106168 = pow(t106167,4.0/3.0);
                double t106169 = t106166+t106168-2.0;
                double t106170 = 1.0/pow(rho_a[index],8.0/3.0);
                double t106171 = gamma_aa[index]*t106170*(1.0/2.0);
                double t106172 = 1.0/pow(rho_b[index],8.0/3.0);
                double t106173 = gamma_bb[index]*t106172*(1.0/2.0);
                double t106174 = t106171+t106173;
                double t106175 = gcab*t106174;
                double t106176 = t106175+1.0;
                double t106177 = gcab*gcab;
                double t106178 = t106174*t106174;
                double t106179 = t106177*t106177;
                double t106180 = t106178*t106178;
                double t106181 = t106177*t106178;
                double t106182 = gcab*t106174*2.0;
                double t106183 = t106181+t106182+1.0;
                double t106184 = t106177*t106178*3.0;
                double t106185 = gcab*t106174*t106177*t106178;
                double t106186 = gcab*t106174*3.0;
                double t106187 = t106184+t106185+t106186+1.0;
                double t106188 = t106177*t106178*6.0;
                double t106189 = gcab*t106174*t106177*t106178*4.0;
                double t106190 = t106180*t106179;
                double t106191 = gcab*t106174*4.0;
                double t106192 = t106190+t106191+t106188+t106189+1.0;
                double t106193 = c0p*t106114*t106116*2.0;
                double t106194 = b1f*t106101;
                double t106195 = b3f*t106102;
                double t106196 = b4f*t106103*t106104;
                double t106197 = b2f*c*t106099;
                double t106198 = t106194+t106195+t106196+t106197;
                double t106199 = 1.0/t106198;
                double t106200 = t106123*t106199*(1.0/2.0);
                double t106201 = t106200+1.0;
                double t106202 = log(t106201);
                double t106203 = a1f*c*t106099;
                double t106204 = t106203+1.0;
                double t106205 = t106193-c0f*t106202*t106204*2.0;
                double t106206 = t106193-t106122*t106205*t106119;
                double t106207 = gamma_aa[index]*gamma_aa[index];
                double t106208 = gcaa*gcaa;
                double t106209 = t106208*t106208;
                double t106210 = 1.0/pow(rho_a[index],3.2E1/3.0);
                double t106211 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t106212 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t106213 = gamma_aa[index]*gcaa*t106170;
                double t106214 = t106213+1.0;
                double t106215 = gamma_aa[index]*gcaa*t106170*3.0;
                double t106216 = gamma_aa[index]*gcaa*t106212*t106207*t106208;
                double t106217 = t106211*t106207*t106208*3.0;
                double t106218 = t106215+t106216+t106217+1.0;
                double t106219 = t106207*t106207;
                double t106220 = gamma_aa[index]*gcaa*t106170*4.0;
                double t106221 = gamma_aa[index]*gcaa*t106212*t106207*t106208*4.0;
                double t106222 = t106211*t106207*t106208*6.0;
                double t106223 = t106210*t106209*t106219;
                double t106224 = t106220+t106221+t106222+t106223+1.0;
                double t106225 = gamma_aa[index]*gcaa*t106170*2.0;
                double t106226 = t106211*t106207*t106208;
                double t106227 = t106225+t106226+1.0;
                double t106228 = rho_a[index]*(8.334140006820045E15/1.40737488355328E14);
                double t106229 = omega*omega;
                double t106230 = 1.0/rho_a[index];
                double t106231 = omega*t106230*t106229*(7.0368744177664E13/8.334140006820045E15);
                double t106232 = 1.0/pow(t106228,1.0/3.0);
                double t106233 = gx*gx;
                double t106234 = t106233*t106233;
                double t106235 = gamma_aa[index]*gx*t106170;
                double t106236 = t106235+1.0;
                double t106237 = gamma_aa[index]*gx*t106170*3.0;
                double t106238 = gamma_aa[index]*gx*t106212*t106233*t106207;
                double t106239 = t106211*t106233*t106207*3.0;
                double t106240 = t106237+t106238+t106239+1.0;
                double t106241 = gamma_aa[index]*gx*t106170*4.0;
                double t106242 = gamma_aa[index]*gx*t106212*t106233*t106207*4.0;
                double t106243 = t106211*t106233*t106207*6.0;
                double t106244 = t106210*t106234*t106219;
                double t106245 = t106241+t106242+t106243+t106244+1.0;
                double t106246 = gamma_aa[index]*gx*t106170*2.0;
                double t106247 = t106211*t106233*t106207;
                double t106248 = t106246+t106247+1.0;
                v_gamma_aa_[index] = (rho_a[index]*t106206+rho_b[index]*(t106140-t106122*t106119*(t106140-c0f*log((t106123* \
                   (1.0/2.0))/(b1f*t106126+b3f*t106127+b2f*c*t106124+b4f*t106103*t106128)+1.0)*(a1f*c*t106124+1.0)*2.0) \
                   )-t106141*(t106158-t106122*t106163*t106164*t106169*(t106158-c0f*log((t106123*(1.0/2.0))/(b1f*t106144+ \
                   b3f*t106145+b2f*c*t106142+b4f*t106103*t106146)+1.0)*(a1f*c*t106142+1.0)*2.0)+(Aa*t106122*t106169*log((1.0/ \
                   2.0)/(Aa*(b1a*t106144+b3a*t106145+b2a*c*t106142+b4a*t106103*t106146))+1.0)*(t106163*t106164-1.0)*(a1a* \
                   c*t106142+1.0)*2.0)/d2fz0))*((ccab1*gcab*t106170*(1.0/2.0))/t106176-ccab4*t106180*1.0/(t106192*t106192) \
                   *t106179*(gcab*t106170*2.0+t106170*t106174*t106177*6.0+gcab*t106170*t106177*t106178*6.0+t106170*t106174* \
                   t106178*t106179*2.0)-ccab2*1.0/(t106183*t106183)*t106177*t106178*(gcab*t106170+t106170*t106174*t106177) \
                   +(ccab2*t106170*t106174*t106177)/t106183-ccab1*t106170*t106174*1.0/(t106176*t106176)*t106177*(1.0/ \
                   2.0)+(ccab3*gcab*t106170*t106177*t106178*(3.0/2.0))/t106187+(ccab4*t106170*t106174*t106178*t106179* \
                   2.0)/t106192-ccab3*gcab*t106174*t106177*t106178*1.0/(t106187*t106187)*(gcab*t106170*(3.0/2.0)+t106170* \
                   t106174*t106177*3.0+gcab*t106170*t106177*t106178*(3.0/2.0)))-rho_a[index]*t106206*((ccaa1*gcaa*t106170) \
                   /t106214-ccaa1*gamma_aa[index]*t106211*1.0/(t106214*t106214)*t106208+(ccaa2*gamma_aa[index]*t106211* \
                   t106208*2.0)/t106227-ccaa2*t106211*t106207*t106208*1.0/(t106227*t106227)*(gcaa*t106170*2.0+gamma_aa[index]* \
                   t106211*t106208*2.0)+(ccaa4*gamma_aa[index]*t106210*t106207*t106209*4.0)/t106224+(ccaa3*gcaa*t106212* \
                   t106207*t106208*3.0)/t106218-ccaa4*t106210*1.0/(t106224*t106224)*t106209*t106219*(gcaa*t106170*4.0+ \
                   gamma_aa[index]*t106211*t106208*1.2E1+gamma_aa[index]*t106210*t106207*t106209*4.0+gcaa*t106212*t106207* \
                   t106208*1.2E1)-ccaa3*gamma_aa[index]*gcaa*t106212*t106207*t106208*1.0/(t106218*t106218)*(gcaa*t106170* \
                   3.0+gamma_aa[index]*t106211*t106208*6.0+gcaa*t106212*t106207*t106208*3.0))-c0*pow(rho_a[index],4.0/ \
                   3.0)*(omega*t106232*(t106231+erf(pow(t106228,1.0/3.0)/omega)*(3.991211251234741E15/2.251799813685248E15) \
                   -omega*t106232*(3.0/2.0)-exp(-1.0/(omega*omega)*pow(t106228,2.0/3.0))*(t106231-omega*t106232))*(4.0/ \
                   3.0)-1.0)*((cx1*gx*t106170)/t106236-cx1*gamma_aa[index]*t106211*t106233*1.0/(t106236*t106236)+(cx2* \
                   gamma_aa[index]*t106211*t106233*2.0)/t106248-cx2*t106211*t106233*t106207*1.0/(t106248*t106248)*(gx* \
                   t106170*2.0+gamma_aa[index]*t106211*t106233*2.0)+(cx4*gamma_aa[index]*t106210*t106207*t106234*4.0) \
                   /t106245+(cx3*gx*t106212*t106233*t106207*3.0)/t106240-cx4*t106210*t106234*1.0/(t106245*t106245)*t106219* \
                   (gx*t106170*4.0+gamma_aa[index]*t106211*t106233*1.2E1+gamma_aa[index]*t106210*t106207*t106234*4.0+ \
                   gx*t106212*t106233*t106207*1.2E1)-cx3*gamma_aa[index]*gx*t106212*1.0/(t106240*t106240)*t106233*t106207* \
                   (gx*t106170*3.0+gamma_aa[index]*t106211*t106233*6.0+gx*t106212*t106233*t106207*3.0));
            } else if (rho_a[index] > cutoff_) {
                double t110118 = 1.0/pow(rho_a[index],1.0/3.0);
                double t110119 = c*t110118;
                double t110120 = sqrt(t110119);
                double t110121 = pow(t110119,3.0/2.0);
                double t110122 = c*c;
                double t110123 = 1.0/pow(rho_a[index],2.0/3.0);
                double t110124 = 1.0/c0p;
                double t110125 = b1p*t110120;
                double t110126 = b3p*t110121;
                double t110127 = b4p*t110122*t110123;
                double t110128 = b2p*c*t110118;
                double t110129 = t110125+t110126+t110127+t110128;
                double t110130 = 1.0/t110129;
                double t110131 = t110130*t110124*(1.0/2.0);
                double t110132 = t110131+1.0;
                double t110133 = log(t110132);
                double t110134 = a1p*c*t110118;
                double t110135 = t110134+1.0;
                double t110136 = 1.0/pow(rho_a[index],8.0/3.0);
                double t110137 = gamma_aa[index]*gamma_aa[index];
                double t110138 = gcaa*gcaa;
                double t110139 = t110138*t110138;
                double t110140 = 1.0/pow(rho_a[index],3.2E1/3.0);
                double t110141 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t110142 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t110143 = gamma_aa[index]*gcaa*t110136;
                double t110144 = t110143+1.0;
                double t110145 = gamma_aa[index]*gcaa*t110136*3.0;
                double t110146 = gamma_aa[index]*gcaa*t110142*t110137*t110138;
                double t110147 = t110141*t110137*t110138*3.0;
                double t110148 = t110145+t110146+t110147+1.0;
                double t110149 = t110137*t110137;
                double t110150 = gamma_aa[index]*gcaa*t110136*4.0;
                double t110151 = gamma_aa[index]*gcaa*t110142*t110137*t110138*4.0;
                double t110152 = t110141*t110137*t110138*6.0;
                double t110153 = t110140*t110139*t110149;
                double t110154 = t110150+t110151+t110152+t110153+1.0;
                double t110155 = gamma_aa[index]*gcaa*t110136*2.0;
                double t110156 = t110141*t110137*t110138;
                double t110157 = t110155+t110156+1.0;
                double t110158 = rho_a[index]*(8.334140006820045E15/1.40737488355328E14);
                double t110159 = omega*omega;
                double t110160 = 1.0/rho_a[index];
                double t110161 = omega*t110160*t110159*(7.0368744177664E13/8.334140006820045E15);
                double t110162 = 1.0/pow(t110158,1.0/3.0);
                double t110163 = gx*gx;
                double t110164 = t110163*t110163;
                double t110165 = gamma_aa[index]*gx*t110136;
                double t110166 = t110165+1.0;
                double t110167 = gamma_aa[index]*gx*t110136*3.0;
                double t110168 = gamma_aa[index]*gx*t110142*t110163*t110137;
                double t110169 = t110141*t110163*t110137*3.0;
                double t110170 = t110167+t110168+t110169+1.0;
                double t110171 = gamma_aa[index]*gx*t110136*4.0;
                double t110172 = gamma_aa[index]*gx*t110142*t110163*t110137*4.0;
                double t110173 = t110141*t110163*t110137*6.0;
                double t110174 = t110140*t110164*t110149;
                double t110175 = t110171+t110172+t110173+t110174+1.0;
                double t110176 = gamma_aa[index]*gx*t110136*2.0;
                double t110177 = t110141*t110163*t110137;
                double t110178 = t110176+t110177+1.0;
                v_gamma_aa_[index] = -rho_a[index]*(((pow(2.0,1.0/3.0)*2.0-2.0)*(c0f*log((1.0/2.0)/(c0f*(b1f*t110120+ \
                   b3f*t110121+b2f*c*t110118+b4f*t110122*t110123))+1.0)*(a1f*c*t110118+1.0)*2.0-c0p*t110133*t110135*2.0) \
                   )/(two_13*2.0-2.0)+c0p*t110133*t110135*2.0)*((ccaa1*gcaa*t110136)/t110144-ccaa1*gamma_aa[index]*t110141* \
                   1.0/(t110144*t110144)*t110138+(ccaa2*gamma_aa[index]*t110141*t110138*2.0)/t110157-ccaa2*t110141*t110137* \
                   t110138*1.0/(t110157*t110157)*(gcaa*t110136*2.0+gamma_aa[index]*t110141*t110138*2.0)+(ccaa4*gamma_aa[index]* \
                   t110140*t110137*t110139*4.0)/t110154+(ccaa3*gcaa*t110142*t110137*t110138*3.0)/t110148-ccaa4*t110140* \
                   1.0/(t110154*t110154)*t110139*t110149*(gcaa*t110136*4.0+gamma_aa[index]*t110141*t110138*1.2E1+gamma_aa[index]* \
                   t110140*t110137*t110139*4.0+gcaa*t110142*t110137*t110138*1.2E1)-ccaa3*gamma_aa[index]*gcaa*t110142* \
                   t110137*t110138*1.0/(t110148*t110148)*(gcaa*t110136*3.0+gamma_aa[index]*t110141*t110138*6.0+gcaa*t110142* \
                   t110137*t110138*3.0))-c0*pow(rho_a[index],4.0/3.0)*(omega*t110162*(t110161+erf(pow(t110158,1.0/3.0) \
                   /omega)*(3.991211251234741E15/2.251799813685248E15)-omega*t110162*(3.0/2.0)-exp(-1.0/(omega*omega) \
                   *pow(t110158,2.0/3.0))*(t110161-omega*t110162))*(4.0/3.0)-1.0)*((cx1*gx*t110136)/t110166-cx1*gamma_aa[index]* \
                   t110141*t110163*1.0/(t110166*t110166)+(cx2*gamma_aa[index]*t110141*t110163*2.0)/t110178-cx2*t110141* \
                   t110163*t110137*1.0/(t110178*t110178)*(gx*t110136*2.0+gamma_aa[index]*t110141*t110163*2.0)+(cx4*gamma_aa[index]* \
                   t110140*t110137*t110164*4.0)/t110175+(cx3*gx*t110142*t110163*t110137*3.0)/t110170-cx4*t110140*t110164* \
                   1.0/(t110175*t110175)*t110149*(gx*t110136*4.0+gamma_aa[index]*t110141*t110163*1.2E1+gamma_aa[index]* \
                   t110140*t110137*t110164*4.0+gx*t110142*t110163*t110137*1.2E1)-cx3*gamma_aa[index]*gx*t110142*1.0/(t110170* \
                   t110170)*t110163*t110137*(gx*t110136*3.0+gamma_aa[index]*t110141*t110163*6.0+gx*t110142*t110163*t110137* \
                   3.0));
            } else if (rho_b[index] > cutoff_) {
                v_gamma_aa_[index] = 0.0;
            } else {
                v_gamma_aa_[index] = 0.0;
            }

            //V_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_ab_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_ab_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_ab_[index] = 0.0;
            } else {
                v_gamma_ab_[index] = 0.0;
            }

            //V_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t106251 = 1.0/pow(rho_a[index],1.0/3.0);
                double t106252 = c*t106251;
                double t106253 = sqrt(t106252);
                double t106254 = pow(t106252,3.0/2.0);
                double t106255 = c*c;
                double t106256 = 1.0/pow(rho_a[index],2.0/3.0);
                double t106257 = 1.0/c0p;
                double t106258 = b1p*t106253;
                double t106259 = b3p*t106254;
                double t106260 = b4p*t106255*t106256;
                double t106261 = b2p*c*t106251;
                double t106262 = t106260+t106261+t106258+t106259;
                double t106263 = 1.0/t106262;
                double t106264 = t106263*t106257*(1.0/2.0);
                double t106265 = t106264+1.0;
                double t106266 = log(t106265);
                double t106267 = a1p*c*t106251;
                double t106268 = t106267+1.0;
                double t106269 = pow(2.0,1.0/3.0);
                double t106270 = t106269*2.0;
                double t106271 = t106270-2.0;
                double t106272 = two_13*2.0;
                double t106273 = t106272-2.0;
                double t106274 = 1.0/t106273;
                double t106275 = 1.0/c0f;
                double t106276 = 1.0/pow(rho_b[index],1.0/3.0);
                double t106277 = c*t106276;
                double t106278 = sqrt(t106277);
                double t106279 = pow(t106277,3.0/2.0);
                double t106280 = 1.0/pow(rho_b[index],2.0/3.0);
                double t106281 = b1p*t106278;
                double t106282 = b3p*t106279;
                double t106283 = b4p*t106280*t106255;
                double t106284 = b2p*c*t106276;
                double t106285 = t106281+t106282+t106283+t106284;
                double t106286 = 1.0/t106285;
                double t106287 = t106257*t106286*(1.0/2.0);
                double t106288 = t106287+1.0;
                double t106289 = log(t106288);
                double t106290 = a1p*c*t106276;
                double t106291 = t106290+1.0;
                double t106292 = c0p*t106291*t106289*2.0;
                double t106293 = rho_a[index]+rho_b[index];
                double t106294 = 1.0/pow(t106293,1.0/3.0);
                double t106295 = c*t106294;
                double t106296 = sqrt(t106295);
                double t106297 = pow(t106295,3.0/2.0);
                double t106298 = 1.0/pow(t106293,2.0/3.0);
                double t106299 = b1p*t106296;
                double t106300 = b3p*t106297;
                double t106301 = b4p*t106255*t106298;
                double t106302 = b2p*c*t106294;
                double t106303 = t106300+t106301+t106302+t106299;
                double t106304 = 1.0/t106303;
                double t106305 = t106304*t106257*(1.0/2.0);
                double t106306 = t106305+1.0;
                double t106307 = log(t106306);
                double t106308 = a1p*c*t106294;
                double t106309 = t106308+1.0;
                double t106310 = c0p*t106307*t106309*2.0;
                double t106311 = rho_a[index]-rho_b[index];
                double t106312 = t106311*t106311;
                double t106313 = 1.0/t106293;
                double t106314 = t106311*t106313;
                double t106315 = 1.0/(t106293*t106293*t106293*t106293);
                double t106316 = t106312*t106312;
                double t106317 = t106314+1.0;
                double t106318 = pow(t106317,4.0/3.0);
                double t106319 = -t106314+1.0;
                double t106320 = pow(t106319,4.0/3.0);
                double t106321 = t106320+t106318-2.0;
                double t106322 = 1.0/pow(rho_b[index],8.0/3.0);
                double t106323 = 1.0/pow(rho_a[index],8.0/3.0);
                double t106324 = gamma_aa[index]*t106323*(1.0/2.0);
                double t106325 = gamma_bb[index]*t106322*(1.0/2.0);
                double t106326 = t106324+t106325;
                double t106327 = gcab*t106326;
                double t106328 = t106327+1.0;
                double t106329 = gcab*gcab;
                double t106330 = t106326*t106326;
                double t106331 = t106329*t106329;
                double t106332 = t106330*t106330;
                double t106333 = t106330*t106329;
                double t106334 = gcab*t106326*2.0;
                double t106335 = t106333+t106334+1.0;
                double t106336 = t106330*t106329*3.0;
                double t106337 = gcab*t106330*t106326*t106329;
                double t106338 = gcab*t106326*3.0;
                double t106339 = t106336+t106337+t106338+1.0;
                double t106340 = t106330*t106329*6.0;
                double t106341 = gcab*t106330*t106326*t106329*4.0;
                double t106342 = t106331*t106332;
                double t106343 = gcab*t106326*4.0;
                double t106344 = t106340+t106341+t106342+t106343+1.0;
                double t106345 = c0p*t106266*t106268*2.0;
                double t106346 = b1f*t106278;
                double t106347 = b3f*t106279;
                double t106348 = b4f*t106280*t106255;
                double t106349 = b2f*c*t106276;
                double t106350 = t106346+t106347+t106348+t106349;
                double t106351 = 1.0/t106350;
                double t106352 = t106351*t106275*(1.0/2.0);
                double t106353 = t106352+1.0;
                double t106354 = log(t106353);
                double t106355 = a1f*c*t106276;
                double t106356 = t106355+1.0;
                double t106357 = t106292-c0f*t106354*t106356*2.0;
                double t106358 = t106292-t106271*t106274*t106357;
                double t106359 = gamma_bb[index]*gamma_bb[index];
                double t106360 = gcaa*gcaa;
                double t106361 = t106360*t106360;
                double t106362 = 1.0/pow(rho_b[index],3.2E1/3.0);
                double t106363 = 1.0/pow(rho_b[index],1.6E1/3.0);
                double t106364 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]);
                double t106365 = gamma_bb[index]*gcaa*t106322;
                double t106366 = t106365+1.0;
                double t106367 = gamma_bb[index]*gcaa*t106322*3.0;
                double t106368 = gamma_bb[index]*gcaa*t106360*t106364*t106359;
                double t106369 = t106360*t106363*t106359*3.0;
                double t106370 = t106367+t106368+t106369+1.0;
                double t106371 = t106359*t106359;
                double t106372 = gamma_bb[index]*gcaa*t106322*4.0;
                double t106373 = gamma_bb[index]*gcaa*t106360*t106364*t106359*4.0;
                double t106374 = t106360*t106363*t106359*6.0;
                double t106375 = t106361*t106362*t106371;
                double t106376 = t106372+t106373+t106374+t106375+1.0;
                double t106377 = gamma_bb[index]*gcaa*t106322*2.0;
                double t106378 = t106360*t106363*t106359;
                double t106379 = t106377+t106378+1.0;
                double t106380 = rho_b[index]*(8.334140006820045E15/1.40737488355328E14);
                double t106381 = omega*omega;
                double t106382 = 1.0/rho_b[index];
                double t106383 = omega*t106381*t106382*(7.0368744177664E13/8.334140006820045E15);
                double t106384 = 1.0/pow(t106380,1.0/3.0);
                double t106385 = gx*gx;
                double t106386 = t106385*t106385;
                double t106387 = gamma_bb[index]*gx*t106322;
                double t106388 = t106387+1.0;
                double t106389 = gamma_bb[index]*gx*t106322*3.0;
                double t106390 = gamma_bb[index]*gx*t106364*t106385*t106359;
                double t106391 = t106363*t106385*t106359*3.0;
                double t106392 = t106390+t106391+t106389+1.0;
                double t106393 = gamma_bb[index]*gx*t106322*4.0;
                double t106394 = gamma_bb[index]*gx*t106364*t106385*t106359*4.0;
                double t106395 = t106363*t106385*t106359*6.0;
                double t106396 = t106362*t106371*t106386;
                double t106397 = t106393+t106394+t106395+t106396+1.0;
                double t106398 = gamma_bb[index]*gx*t106322*2.0;
                double t106399 = t106363*t106385*t106359;
                double t106400 = t106398+t106399+1.0;
                v_gamma_bb_[index] = (rho_b[index]*t106358+rho_a[index]*(t106345-t106271*t106274*(t106345-c0f*log((t106275* \
                   (1.0/2.0))/(b1f*t106253+b3f*t106254+b2f*c*t106251+b4f*t106255*t106256)+1.0)*(a1f*c*t106251+1.0)*2.0) \
                   )-t106293*(t106310-t106321*t106315*t106316*t106274*(t106310-c0f*log((t106275*(1.0/2.0))/(b1f*t106296+ \
                   b3f*t106297+b2f*c*t106294+b4f*t106255*t106298)+1.0)*(a1f*c*t106294+1.0)*2.0)+(Aa*t106321*t106274*log((1.0/ \
                   2.0)/(Aa*(b1a*t106296+b3a*t106297+b2a*c*t106294+b4a*t106255*t106298))+1.0)*(t106315*t106316-1.0)*(a1a* \
                   c*t106294+1.0)*2.0)/d2fz0))*((ccab1*gcab*t106322*(1.0/2.0))/t106328-ccab4*t106331*t106332*1.0/(t106344* \
                   t106344)*(gcab*t106322*2.0+t106322*t106326*t106329*6.0+gcab*t106330*t106322*t106329*6.0+t106330*t106322* \
                   t106331*t106326*2.0)-ccab2*t106330*1.0/(t106335*t106335)*t106329*(gcab*t106322+t106322*t106326*t106329) \
                   +(ccab2*t106322*t106326*t106329)/t106335-ccab1*t106322*t106326*1.0/(t106328*t106328)*t106329*(1.0/ \
                   2.0)+(ccab3*gcab*t106330*t106322*t106329*(3.0/2.0))/t106339+(ccab4*t106330*t106322*t106331*t106326* \
                   2.0)/t106344-ccab3*gcab*t106330*t106326*t106329*1.0/(t106339*t106339)*(gcab*t106322*(3.0/2.0)+t106322* \
                   t106326*t106329*3.0+gcab*t106330*t106322*t106329*(3.0/2.0)))-rho_b[index]*t106358*((ccaa1*gcaa*t106322) \
                   /t106366-ccaa1*gamma_bb[index]*t106360*t106363*1.0/(t106366*t106366)+(ccaa2*gamma_bb[index]*t106360* \
                   t106363*2.0)/t106379-ccaa2*t106360*t106363*t106359*1.0/(t106379*t106379)*(gcaa*t106322*2.0+gamma_bb[index]* \
                   t106360*t106363*2.0)+(ccaa4*gamma_bb[index]*t106361*t106362*t106359*4.0)/t106376+(ccaa3*gcaa*t106360* \
                   t106364*t106359*3.0)/t106370-ccaa4*t106361*t106362*t106371*1.0/(t106376*t106376)*(gcaa*t106322*4.0+ \
                   gamma_bb[index]*t106360*t106363*1.2E1+gamma_bb[index]*t106361*t106362*t106359*4.0+gcaa*t106360*t106364* \
                   t106359*1.2E1)-ccaa3*gamma_bb[index]*gcaa*t106360*1.0/(t106370*t106370)*t106364*t106359*(gcaa*t106322* \
                   3.0+gamma_bb[index]*t106360*t106363*6.0+gcaa*t106360*t106364*t106359*3.0))-c0*pow(rho_b[index],4.0/ \
                   3.0)*(omega*t106384*(t106383+erf(pow(t106380,1.0/3.0)/omega)*(3.991211251234741E15/2.251799813685248E15) \
                   -omega*t106384*(3.0/2.0)-exp(-1.0/(omega*omega)*pow(t106380,2.0/3.0))*(t106383-omega*t106384))*(4.0/ \
                   3.0)-1.0)*((cx1*gx*t106322)/t106388-cx1*gamma_bb[index]*t106363*t106385*1.0/(t106388*t106388)+(cx2* \
                   gamma_bb[index]*t106363*t106385*2.0)/t106400-cx2*1.0/(t106400*t106400)*t106363*t106385*t106359*(gx* \
                   t106322*2.0+gamma_bb[index]*t106363*t106385*2.0)+(cx4*gamma_bb[index]*t106362*t106359*t106386*4.0) \
                   /t106397+(cx3*gx*t106364*t106385*t106359*3.0)/t106392-cx4*t106362*t106371*t106386*1.0/(t106397*t106397) \
                   *(gx*t106322*4.0+gamma_bb[index]*t106363*t106385*1.2E1+gamma_bb[index]*t106362*t106359*t106386*4.0+ \
                   gx*t106364*t106385*t106359*1.2E1)-cx3*gamma_bb[index]*gx*t106364*1.0/(t106392*t106392)*t106385*t106359* \
                   (gx*t106322*3.0+gamma_bb[index]*t106363*t106385*6.0+gx*t106364*t106385*t106359*3.0));
            } else if (rho_a[index] > cutoff_) {
                v_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                double t109359 = 1.0/pow(rho_b[index],1.0/3.0);
                double t109360 = c*t109359;
                double t109361 = sqrt(t109360);
                double t109362 = pow(t109360,3.0/2.0);
                double t109363 = c*c;
                double t109364 = 1.0/pow(rho_b[index],2.0/3.0);
                double t109365 = 1.0/c0p;
                double t109366 = b1p*t109361;
                double t109367 = b3p*t109362;
                double t109368 = b4p*t109363*t109364;
                double t109369 = b2p*c*t109359;
                double t109370 = t109366+t109367+t109368+t109369;
                double t109371 = 1.0/t109370;
                double t109372 = t109371*t109365*(1.0/2.0);
                double t109373 = t109372+1.0;
                double t109374 = log(t109373);
                double t109375 = a1p*c*t109359;
                double t109376 = t109375+1.0;
                double t109377 = 1.0/pow(rho_b[index],8.0/3.0);
                double t109378 = gamma_bb[index]*gamma_bb[index];
                double t109379 = gcaa*gcaa;
                double t109380 = t109379*t109379;
                double t109381 = 1.0/pow(rho_b[index],3.2E1/3.0);
                double t109382 = 1.0/pow(rho_b[index],1.6E1/3.0);
                double t109383 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]);
                double t109384 = gamma_bb[index]*gcaa*t109377;
                double t109385 = t109384+1.0;
                double t109386 = gamma_bb[index]*gcaa*t109377*3.0;
                double t109387 = gamma_bb[index]*gcaa*t109383*t109378*t109379;
                double t109388 = t109382*t109378*t109379*3.0;
                double t109389 = t109386+t109387+t109388+1.0;
                double t109390 = t109378*t109378;
                double t109391 = gamma_bb[index]*gcaa*t109377*4.0;
                double t109392 = gamma_bb[index]*gcaa*t109383*t109378*t109379*4.0;
                double t109393 = t109382*t109378*t109379*6.0;
                double t109394 = t109380*t109381*t109390;
                double t109395 = t109391+t109392+t109393+t109394+1.0;
                double t109396 = gamma_bb[index]*gcaa*t109377*2.0;
                double t109397 = t109382*t109378*t109379;
                double t109398 = t109396+t109397+1.0;
                double t109399 = rho_b[index]*(8.334140006820045E15/1.40737488355328E14);
                double t109400 = omega*omega;
                double t109401 = 1.0/rho_b[index];
                double t109402 = omega*t109400*t109401*(7.0368744177664E13/8.334140006820045E15);
                double t109403 = 1.0/pow(t109399,1.0/3.0);
                double t109404 = gx*gx;
                double t109405 = t109404*t109404;
                double t109406 = gamma_bb[index]*gx*t109377;
                double t109407 = t109406+1.0;
                double t109408 = gamma_bb[index]*gx*t109377*3.0;
                double t109409 = gamma_bb[index]*gx*t109404*t109383*t109378;
                double t109410 = t109404*t109382*t109378*3.0;
                double t109411 = t109410+t109408+t109409+1.0;
                double t109412 = gamma_bb[index]*gx*t109377*4.0;
                double t109413 = gamma_bb[index]*gx*t109404*t109383*t109378*4.0;
                double t109414 = t109404*t109382*t109378*6.0;
                double t109415 = t109405*t109381*t109390;
                double t109416 = t109412+t109413+t109414+t109415+1.0;
                double t109417 = gamma_bb[index]*gx*t109377*2.0;
                double t109418 = t109404*t109382*t109378;
                double t109419 = t109417+t109418+1.0;
                v_gamma_bb_[index] = -rho_b[index]*(((pow(2.0,1.0/3.0)*2.0-2.0)*(c0f*log((1.0/2.0)/(c0f*(b1f*t109361+ \
                   b3f*t109362+b2f*c*t109359+b4f*t109363*t109364))+1.0)*(a1f*c*t109359+1.0)*2.0-c0p*t109374*t109376*2.0) \
                   )/(two_13*2.0-2.0)+c0p*t109374*t109376*2.0)*((ccaa1*gcaa*t109377)/t109385-ccaa1*gamma_bb[index]*t109382* \
                   1.0/(t109385*t109385)*t109379+(ccaa2*gamma_bb[index]*t109382*t109379*2.0)/t109398-ccaa2*t109382*t109378* \
                   t109379*1.0/(t109398*t109398)*(gcaa*t109377*2.0+gamma_bb[index]*t109382*t109379*2.0)+(ccaa4*gamma_bb[index]* \
                   t109380*t109381*t109378*4.0)/t109395+(ccaa3*gcaa*t109383*t109378*t109379*3.0)/t109389-ccaa4*t109380* \
                   t109381*t109390*1.0/(t109395*t109395)*(gcaa*t109377*4.0+gamma_bb[index]*t109382*t109379*1.2E1+gamma_bb[index]* \
                   t109380*t109381*t109378*4.0+gcaa*t109383*t109378*t109379*1.2E1)-ccaa3*gamma_bb[index]*gcaa*t109383* \
                   t109378*t109379*1.0/(t109389*t109389)*(gcaa*t109377*3.0+gamma_bb[index]*t109382*t109379*6.0+gcaa*t109383* \
                   t109378*t109379*3.0))-c0*pow(rho_b[index],4.0/3.0)*(omega*t109403*(t109402+erf(pow(t109399,1.0/3.0) \
                   /omega)*(3.991211251234741E15/2.251799813685248E15)-omega*t109403*(3.0/2.0)-exp(-1.0/(omega*omega) \
                   *pow(t109399,2.0/3.0))*(t109402-omega*t109403))*(4.0/3.0)-1.0)*((cx1*gx*t109377)/t109407-cx1*gamma_bb[index]* \
                   t109404*1.0/(t109407*t109407)*t109382+(cx2*gamma_bb[index]*t109404*t109382*2.0)/t109419-cx2*t109404* \
                   t109382*1.0/(t109419*t109419)*t109378*(gx*t109377*2.0+gamma_bb[index]*t109404*t109382*2.0)+(cx4*gamma_bb[index]* \
                   t109405*t109381*t109378*4.0)/t109416+(cx3*gx*t109404*t109383*t109378*3.0)/t109411-cx4*t109405*1.0/ \
                   (t109416*t109416)*t109381*t109390*(gx*t109377*4.0+gamma_bb[index]*t109404*t109382*1.2E1+gamma_bb[index]* \
                   t109405*t109381*t109378*4.0+gx*t109404*t109383*t109378*1.2E1)-cx3*gamma_bb[index]*gx*1.0/(t109411* \
                   t109411)*t109404*t109383*t109378*(gx*t109377*3.0+gamma_bb[index]*t109404*t109382*6.0+gx*t109404*t109383* \
                   t109378*3.0));
            } else {
                v_gamma_bb_[index] = 0.0;
            }
        }
        if (is_meta_) {

            //V_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_tau_a_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_tau_a_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_tau_a_[index] = 0.0;
            } else {
                v_tau_a_[index] = 0.0;
            }

            //V_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_tau_b_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_tau_b_[index] = 0.0;
            } else {
                v_tau_b_[index] = 0.0;
            }
        }
    }
    //Second Partials
    for (int index = 0; index < ntrue && deriv_ >= 2; index++) {

        //V_rho_a_rho_a
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t106404 = rho_a[index]+rho_b[index];
            double t106405 = 1.0/pow(t106404,1.0/3.0);
            double t106406 = c*t106405;
            double t106407 = sqrt(t106406);
            double t106408 = b1p*t106407;
            double t106409 = pow(t106406,3.0/2.0);
            double t106410 = b3p*t106409;
            double t106411 = c*c;
            double t106412 = 1.0/pow(t106404,2.0/3.0);
            double t106413 = b4p*t106411*t106412;
            double t106414 = b2p*c*t106405;
            double t106415 = t106410+t106413+t106414+t106408;
            double t106416 = 1.0/pow(t106404,4.0/3.0);
            double t106417 = 1.0/c0p;
            double t106418 = 1.0/t106415;
            double t106419 = t106417*t106418*(1.0/2.0);
            double t106420 = t106419+1.0;
            double t106421 = a1p*c*t106405;
            double t106422 = t106421+1.0;
            double t106423 = rho_a[index]-rho_b[index];
            double t106424 = t106423*t106423;
            double t106425 = 1.0/t106404;
            double t106426 = t106423*t106425;
            double t106427 = two_13*2.0;
            double t106428 = t106427-2.0;
            double t106429 = 1.0/t106428;
            double t106430 = 1.0/c0f;
            double t106431 = b1f*t106407;
            double t106432 = b3f*t106409;
            double t106433 = b4f*t106411*t106412;
            double t106434 = b2f*c*t106405;
            double t106435 = t106431+t106432+t106433+t106434;
            double t106436 = 1.0/t106435;
            double t106437 = t106430*t106436*(1.0/2.0);
            double t106438 = t106437+1.0;
            double t106439 = log(t106438);
            double t106440 = a1f*c*t106405;
            double t106441 = t106440+1.0;
            double t106442 = log(t106420);
            double t106452 = c0f*t106441*t106439*2.0;
            double t106453 = c0p*t106422*t106442*2.0;
            double t106443 = t106452-t106453;
            double t106444 = t106426+1.0;
            double t106445 = pow(t106444,4.0/3.0);
            double t106446 = -t106426+1.0;
            double t106447 = pow(t106446,4.0/3.0);
            double t106448 = t106445+t106447-2.0;
            double t106449 = 1.0/(t106404*t106404);
            double t106480 = t106423*t106449;
            double t106450 = t106425-t106480;
            double t106451 = 1.0/(t106404*t106404*t106404*t106404);
            double t106454 = t106424*t106424;
            double t106455 = 1.0/pow(t106404,5.0/3.0);
            double t106456 = 1.0/sqrt(t106406);
            double t106457 = 1.0/t106420;
            double t106458 = 1.0/(t106415*t106415);
            double t106459 = b4p*t106411*t106455*(2.0/3.0);
            double t106460 = b2p*c*t106416*(1.0/3.0);
            double t106461 = b1p*c*t106416*t106456*(1.0/6.0);
            double t106462 = b3p*c*t106407*t106416*(1.0/2.0);
            double t106463 = t106460+t106461+t106462+t106459;
            double t106464 = t106422*t106463*t106457*t106458;
            double t106465 = 1.0/(t106404*t106404*t106404*t106404*t106404);
            double t106466 = 1.0/d2fz0;
            double t106467 = 1.0/Aa;
            double t106468 = b1a*t106407;
            double t106469 = b3a*t106409;
            double t106470 = b4a*t106411*t106412;
            double t106471 = b2a*c*t106405;
            double t106472 = t106470+t106471+t106468+t106469;
            double t106473 = 1.0/t106472;
            double t106474 = t106473*t106467*(1.0/2.0);
            double t106475 = t106474+1.0;
            double t106476 = log(t106475);
            double t106477 = a1a*c*t106405;
            double t106478 = t106477+1.0;
            double t106479 = pow(t106444,1.0/3.0);
            double t106481 = t106450*t106479*(4.0/3.0);
            double t106482 = pow(t106446,1.0/3.0);
            double t106557 = t106450*t106482*(4.0/3.0);
            double t106483 = t106481-t106557;
            double t106484 = t106451*t106454;
            double t106485 = t106484-1.0;
            double t106486 = 1.0/pow(rho_a[index],1.0/3.0);
            double t106487 = c*t106486;
            double t106488 = sqrt(t106487);
            double t106489 = b1f*t106488;
            double t106490 = pow(t106487,3.0/2.0);
            double t106491 = b3f*t106490;
            double t106492 = 1.0/pow(rho_a[index],2.0/3.0);
            double t106493 = b4f*t106411*t106492;
            double t106494 = b2f*c*t106486;
            double t106495 = t106491+t106493+t106494+t106489;
            double t106496 = 1.0/pow(rho_a[index],4.0/3.0);
            double t106497 = b1p*t106488;
            double t106498 = b3p*t106490;
            double t106499 = b4p*t106411*t106492;
            double t106500 = b2p*c*t106486;
            double t106501 = t106500+t106497+t106498+t106499;
            double t106502 = 1.0/pow(rho_a[index],5.0/3.0);
            double t106503 = 1.0/sqrt(t106487);
            double t106504 = 1.0/t106495;
            double t106505 = t106430*t106504*(1.0/2.0);
            double t106506 = t106505+1.0;
            double t106507 = 1.0/t106501;
            double t106508 = t106417*t106507*(1.0/2.0);
            double t106509 = t106508+1.0;
            double t106510 = a1p*c*t106486;
            double t106511 = t106510+1.0;
            double t106512 = 1.0/t106509;
            double t106513 = 1.0/(t106501*t106501);
            double t106514 = b4p*t106411*t106502*(2.0/3.0);
            double t106515 = b2p*c*t106496*(1.0/3.0);
            double t106516 = b1p*c*t106503*t106496*(1.0/6.0);
            double t106517 = b3p*c*t106496*t106488*(1.0/2.0);
            double t106518 = t106514+t106515+t106516+t106517;
            double t106519 = t106511*t106512*t106513*t106518;
            double t106520 = log(t106509);
            double t106521 = pow(2.0,1.0/3.0);
            double t106522 = t106521*2.0;
            double t106523 = t106522-2.0;
            double t106524 = log(t106506);
            double t106525 = a1f*c*t106486;
            double t106526 = t106525+1.0;
            double t106527 = gcab*gcab;
            double t106531 = 1.0/pow(rho_a[index],8.0/3.0);
            double t106532 = gamma_aa[index]*t106531*(1.0/2.0);
            double t106533 = 1.0/pow(rho_b[index],8.0/3.0);
            double t106534 = gamma_bb[index]*t106533*(1.0/2.0);
            double t106528 = t106532+t106534;
            double t106529 = t106528*t106528;
            double t106530 = 1.0/pow(rho_a[index],1.1E1/3.0);
            double t106535 = t106527*t106527;
            double t106536 = t106529*t106529;
            double t106537 = t106527*t106529*6.0;
            double t106538 = gcab*t106527*t106528*t106529*4.0;
            double t106539 = t106535*t106536;
            double t106540 = gcab*t106528*4.0;
            double t106541 = t106540+t106537+t106538+t106539+1.0;
            double t106542 = gcab*t106528;
            double t106543 = t106542+1.0;
            double t106544 = t106527*t106529;
            double t106545 = gcab*t106528*2.0;
            double t106546 = t106544+t106545+1.0;
            double t106547 = t106527*t106529*3.0;
            double t106548 = gcab*t106527*t106528*t106529;
            double t106549 = gcab*t106528*3.0;
            double t106550 = t106547+t106548+t106549+1.0;
            double t106551 = 1.0/t106546;
            double t106552 = 1.0/t106550;
            double t106553 = 1.0/t106543;
            double t106554 = 1.0/t106541;
            double t106555 = 1.0/pow(t106404,7.0/3.0);
            double t106556 = 1.0/pow(t106404,8.0/3.0);
            double t106558 = 1.0/t106438;
            double t106559 = 1.0/(t106435*t106435);
            double t106560 = b4f*t106411*t106455*(2.0/3.0);
            double t106561 = b2f*c*t106416*(1.0/3.0);
            double t106562 = b1f*c*t106416*t106456*(1.0/6.0);
            double t106563 = b3f*c*t106407*t106416*(1.0/2.0);
            double t106564 = t106560+t106561+t106562+t106563;
            double t106565 = a1f*c*c0f*t106416*t106439*(2.0/3.0);
            double t106567 = t106441*t106564*t106558*t106559;
            double t106568 = a1p*c*c0p*t106442*t106416*(2.0/3.0);
            double t106566 = t106464+t106565-t106567-t106568;
            double t106569 = t106463*t106463;
            double t106570 = 1.0/pow(t106406,3.0/2.0);
            double t106571 = b4p*t106411*t106556*(1.0E1/9.0);
            double t106572 = b2p*c*t106555*(4.0/9.0);
            double t106573 = b1p*c*t106456*t106555*(2.0/9.0);
            double t106574 = b3p*c*t106407*t106555*(2.0/3.0);
            double t106575 = b3p*t106411*t106456*t106556*(1.0/1.2E1);
            double t106576 = t106571+t106572+t106573+t106574+t106575-b1p*t106411*t106570*t106556*(1.0/3.6E1);
            double t106577 = 1.0/(t106415*t106415*t106415);
            double t106578 = t106422*t106457*t106577*t106569*2.0;
            double t106579 = t106564*t106564;
            double t106580 = 1.0/(t106420*t106420);
            double t106581 = 1.0/(t106415*t106415*t106415*t106415);
            double t106582 = t106449*2.0;
            double t106583 = 1.0/(t106404*t106404*t106404);
            double t106590 = t106423*t106583*2.0;
            double t106584 = -t106590+t106582;
            double t106585 = t106450*t106450;
            double t106586 = a1p*c*c0p*t106442*t106555*(8.0/9.0);
            double t106587 = 1.0/(t106404*t106404*t106404*t106404*t106404*t106404);
            double t106588 = t106454*t106465*4.0;
            double t106598 = t106423*t106424*t106451*4.0;
            double t106589 = t106588-t106598;
            double t106591 = t106482*t106584*(4.0/3.0);
            double t106592 = 1.0/pow(t106444,2.0/3.0);
            double t106593 = t106592*t106585*(4.0/9.0);
            double t106594 = 1.0/pow(t106446,2.0/3.0);
            double t106595 = t106585*t106594*(4.0/9.0);
            double t106596 = t106591+t106593+t106595-t106584*t106479*(4.0/3.0);
            double t106597 = 1.0/t106475;
            double t106599 = 1.0/(t106472*t106472);
            double t106600 = b4a*t106411*t106455*(2.0/3.0);
            double t106601 = b2a*c*t106416*(1.0/3.0);
            double t106602 = b1a*c*t106416*t106456*(1.0/6.0);
            double t106603 = b3a*c*t106407*t106416*(1.0/2.0);
            double t106604 = t106600+t106601+t106602+t106603;
            double t106605 = t106604*t106604;
            double t106606 = t106422*t106457*t106458*t106576;
            double t106607 = t106422*t106417*t106580*t106581*t106569*(1.0/2.0);
            double t106608 = a1p*c*t106416*t106463*t106457*t106458*(2.0/3.0);
            double t106609 = 1.0/t106506;
            double t106610 = b4f*t106411*t106502*(2.0/3.0);
            double t106611 = b2f*c*t106496*(1.0/3.0);
            double t106612 = b1f*c*t106503*t106496*(1.0/6.0);
            double t106613 = b3f*c*t106496*t106488*(1.0/2.0);
            double t106614 = t106610+t106611+t106612+t106613;
            double t106615 = 1.0/(t106495*t106495);
            double t106616 = 1.0/pow(rho_a[index],7.0/3.0);
            double t106617 = 1.0/pow(t106487,3.0/2.0);
            double t106618 = t106614*t106614;
            double t106619 = t106518*t106518;
            double t106620 = 1.0/(t106501*t106501*t106501);
            double t106621 = t106511*t106512*t106620*t106619*2.0;
            double t106622 = b4p*t106411*t106531*(1.0E1/9.0);
            double t106623 = b2p*c*t106616*(4.0/9.0);
            double t106624 = b3p*t106411*t106503*t106531*(1.0/1.2E1);
            double t106625 = b1p*c*t106503*t106616*(2.0/9.0);
            double t106626 = b3p*c*t106616*t106488*(2.0/3.0);
            double t106743 = b1p*t106411*t106531*t106617*(1.0/3.6E1);
            double t106627 = t106622+t106623+t106624+t106625+t106626-t106743;
            double t106628 = 1.0/(t106509*t106509);
            double t106629 = 1.0/(t106501*t106501*t106501*t106501);
            double t106630 = a1p*c*c0p*t106520*t106616*(8.0/9.0);
            double t106631 = a1f*c*c0f*t106524*t106496*(2.0/3.0);
            double t106632 = a1p*c*c0p*t106520*t106496*(2.0/3.0);
            double t106704 = t106614*t106615*t106526*t106609;
            double t106633 = t106631-t106632-t106704+t106519;
            double t106634 = gamma_aa[index]*gamma_aa[index];
            double t106635 = gcaa*gcaa;
            double t106636 = t106634*t106634;
            double t106637 = t106635*t106635;
            double t106638 = 1.0/pow(rho_a[index],3.2E1/3.0);
            double t106639 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]);
            double t106640 = 1.0/pow(rho_a[index],1.6E1/3.0);
            double t106641 = c0f*t106524*t106526*2.0;
            double t106643 = c0p*t106511*t106520*2.0;
            double t106642 = t106641-t106643;
            double t106644 = 1.0/pow(rho_b[index],1.0/3.0);
            double t106645 = c*t106644;
            double t106646 = sqrt(t106645);
            double t106647 = pow(t106645,3.0/2.0);
            double t106648 = 1.0/pow(rho_b[index],2.0/3.0);
            double t106649 = b1p*t106646;
            double t106650 = b3p*t106647;
            double t106651 = b4p*t106411*t106648;
            double t106652 = b2p*c*t106644;
            double t106653 = t106650+t106651+t106652+t106649;
            double t106654 = 1.0/t106653;
            double t106655 = t106417*t106654*(1.0/2.0);
            double t106656 = t106655+1.0;
            double t106657 = log(t106656);
            double t106658 = a1p*c*t106644;
            double t106659 = t106658+1.0;
            double t106660 = c0p*t106657*t106659*2.0;
            double t106661 = t106451*t106443*t106454*t106429*t106448;
            double t106662 = Aa*t106429*t106448*t106466*t106476*t106485*t106478*2.0;
            double t106663 = gamma_aa[index]*gcab*t106530*(1.6E1/3.0);
            double t106664 = gamma_aa[index]*gcab*t106530*t106527*t106529*1.6E1;
            double t106665 = gamma_aa[index]*t106530*t106535*t106528*t106529*(1.6E1/3.0);
            double t106666 = gamma_aa[index]*t106530*t106527*t106528*1.6E1;
            double t106667 = t106663+t106664+t106665+t106666;
            double t106668 = 1.0/(t106543*t106543);
            double t106669 = 1.0/pow(rho_a[index],2.2E1/3.0);
            double t106670 = gamma_aa[index]*gcab*t106530*(8.0/3.0);
            double t106671 = gamma_aa[index]*t106530*t106527*t106528*(8.0/3.0);
            double t106672 = t106670+t106671;
            double t106673 = 1.0/(t106550*t106550);
            double t106674 = 1.0/pow(rho_a[index],1.4E1/3.0);
            double t106675 = 1.0/(t106541*t106541);
            double t106676 = 1.0/(t106546*t106546);
            double t106677 = gamma_aa[index]*gcab*t106530*4.0;
            double t106678 = gamma_aa[index]*gcab*t106530*t106527*t106529*4.0;
            double t106679 = gamma_aa[index]*t106530*t106527*t106528*8.0;
            double t106680 = t106677+t106678+t106679;
            double t106681 = t106523*t106642*t106429;
            double t106682 = t106643+t106681;
            double t106683 = gamma_aa[index]*gcaa*t106531*4.0;
            double t106684 = gamma_aa[index]*gcaa*t106634*t106635*t106639*4.0;
            double t106685 = t106640*t106634*t106635*6.0;
            double t106686 = t106636*t106637*t106638;
            double t106687 = t106683+t106684+t106685+t106686+1.0;
            double t106688 = 1.0/t106687;
            double t106689 = gamma_aa[index]*gcaa*t106531;
            double t106690 = t106689+1.0;
            double t106691 = 1.0/t106690;
            double t106692 = gamma_aa[index]*gcaa*t106531*3.0;
            double t106693 = gamma_aa[index]*gcaa*t106634*t106635*t106639;
            double t106694 = t106640*t106634*t106635*3.0;
            double t106695 = t106692+t106693+t106694+1.0;
            double t106696 = 1.0/t106695;
            double t106697 = gamma_aa[index]*gcaa*t106531*2.0;
            double t106698 = t106640*t106634*t106635;
            double t106699 = t106697+t106698+1.0;
            double t106700 = 1.0/t106699;
            double t106701 = 1.0/pow(rho_a[index],1.9E1/3.0);
            double t106702 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]*rho_a[index]);
            double t106703 = 1.0/pow(rho_a[index],3.5E1/3.0);
            double t106705 = t106523*t106633*t106429;
            double t106706 = ccaa4*t106703*t106636*t106637*t106688*(3.2E1/3.0);
            double t106707 = ccaa1*gamma_aa[index]*gcaa*t106530*t106691*(8.0/3.0);
            double t106708 = ccaa3*gamma_aa[index]*gcaa*t106702*t106634*t106635*t106696*8.0;
            double t106709 = ccaa2*t106700*t106701*t106634*t106635*(1.6E1/3.0);
            double t106710 = 1.0/(t106690*t106690);
            double t106711 = gamma_aa[index]*gcaa*t106530*8.0;
            double t106712 = gamma_aa[index]*gcaa*t106702*t106634*t106635*8.0;
            double t106713 = t106701*t106634*t106635*1.6E1;
            double t106714 = t106711+t106712+t106713;
            double t106715 = 1.0/(t106695*t106695);
            double t106716 = gamma_aa[index]*gcaa*t106530*(3.2E1/3.0);
            double t106717 = gamma_aa[index]*gcaa*t106702*t106634*t106635*3.2E1;
            double t106718 = t106701*t106634*t106635*3.2E1;
            double t106719 = t106703*t106636*t106637*(3.2E1/3.0);
            double t106720 = t106716+t106717+t106718+t106719;
            double t106721 = 1.0/(t106687*t106687);
            double t106722 = gamma_aa[index]*gcaa*t106530*(1.6E1/3.0);
            double t106723 = t106701*t106634*t106635*(1.6E1/3.0);
            double t106724 = t106722+t106723;
            double t106725 = 1.0/(t106699*t106699);
            double t106726 = t106706+t106707+t106708+t106709-ccaa1*t106701*t106710*t106634*t106635*(8.0/3.0)- \
               ccaa2*t106640*t106634*t106724*t106635*t106725-ccaa4*t106720*t106721*t106636*t106637*t106638-ccaa3* \
               gamma_aa[index]*gcaa*t106714*t106634*t106715*t106635*t106639;
            double t106727 = t106632+t106705-t106519;
            double t106728 = 1.0/pow(rho_a[index],1.0E1);
            double t106729 = 1.0/pow(rho_a[index],3.8E1/3.0);
            double t106730 = ccaa4*t106636*t106637*t106638*t106688;
            double t106731 = ccaa1*gamma_aa[index]*gcaa*t106531*t106691;
            double t106732 = ccaa3*gamma_aa[index]*gcaa*t106634*t106635*t106639*t106696;
            double t106733 = ccaa2*t106700*t106640*t106634*t106635;
            double t106734 = ccaa0+t106730+t106731+t106732+t106733;
            double t106735 = 1.0/(t106495*t106495*t106495);
            double t106736 = b4f*t106411*t106531*(1.0E1/9.0);
            double t106737 = b2f*c*t106616*(4.0/9.0);
            double t106738 = b3f*t106411*t106503*t106531*(1.0/1.2E1);
            double t106739 = b1f*c*t106503*t106616*(2.0/9.0);
            double t106740 = b3f*c*t106616*t106488*(2.0/3.0);
            double t106741 = t106740+t106736+t106737+t106738+t106739-b1f*t106411*t106531*t106617*(1.0/3.6E1);
            double t106742 = t106615*t106741*t106526*t106609;
            double t106744 = t106511*t106512*t106513*t106627;
            double t106745 = 1.0/(t106506*t106506);
            double t106746 = 1.0/(t106495*t106495*t106495*t106495);
            double t106747 = t106430*t106526*t106618*t106745*t106746*(1.0/2.0);
            double t106748 = t106511*t106417*t106619*t106628*t106629*(1.0/2.0);
            double t106749 = a1f*c*t106614*t106615*t106609*t106496*(2.0/3.0);
            double t106750 = a1p*c*t106512*t106513*t106518*t106496*(2.0/3.0);
            double t106751 = rho_a[index]*(8.334140006820045E15/1.40737488355328E14);
            double t106752 = omega*omega;
            double t106753 = 1.0/rho_a[index];
            double t106754 = omega*t106752*t106753*(7.0368744177664E13/8.334140006820045E15);
            double t106755 = 1.0/pow(t106751,1.0/3.0);
            double t106756 = gx*gx;
            double t106757 = t106756*t106756;
            double t106758 = gamma_aa[index]*gx*t106531;
            double t106759 = t106758+1.0;
            double t106779 = gamma_aa[index]*gx*t106530*(3.2E1/3.0);
            double t106780 = gamma_aa[index]*gx*t106702*t106634*t106756*3.2E1;
            double t106781 = t106701*t106634*t106756*3.2E1;
            double t106782 = t106703*t106636*t106757*(3.2E1/3.0);
            double t106760 = t106780+t106781+t106782+t106779;
            double t106761 = gamma_aa[index]*gx*t106531*4.0;
            double t106762 = gamma_aa[index]*gx*t106634*t106639*t106756*4.0;
            double t106763 = t106640*t106634*t106756*6.0;
            double t106764 = t106636*t106638*t106757;
            double t106765 = t106761+t106762+t106763+t106764+1.0;
            double t106784 = gamma_aa[index]*gx*t106530*(1.6E1/3.0);
            double t106785 = t106701*t106634*t106756*(1.6E1/3.0);
            double t106766 = t106784+t106785;
            double t106767 = gamma_aa[index]*gx*t106531*2.0;
            double t106768 = t106640*t106634*t106756;
            double t106769 = t106767+t106768+1.0;
            double t106770 = gamma_aa[index]*gx*t106531*3.0;
            double t106771 = gamma_aa[index]*gx*t106634*t106639*t106756;
            double t106772 = t106640*t106634*t106756*3.0;
            double t106773 = t106770+t106771+t106772+1.0;
            double t106774 = 1.0/(t106773*t106773);
            double t106775 = gamma_aa[index]*gx*t106530*8.0;
            double t106776 = gamma_aa[index]*gx*t106702*t106634*t106756*8.0;
            double t106777 = t106701*t106634*t106756*1.6E1;
            double t106778 = t106775+t106776+t106777;
            double t106783 = 1.0/(t106765*t106765);
            double t106786 = 1.0/(t106769*t106769);
            double t106787 = 1.0/(omega*omega);
            double t106788 = pow(t106751,2.0/3.0);
            double t106793 = t106787*t106788;
            double t106789 = exp(-t106793);
            double t106790 = 1.0/(rho_a[index]*rho_a[index]);
            double t106791 = 1.0/pow(t106751,4.0/3.0);
            double t106792 = 1.0/omega;
            double t106799 = omega*t106755;
            double t106794 = t106754-t106799;
            double t106795 = pow(t106751,1.0/3.0);
            double t106796 = t106792*t106795;
            double t106797 = erf(t106796);
            double t106798 = t106797*(3.991211251234741E15/2.251799813685248E15);
            double t106805 = t106794*t106789;
            double t106806 = omega*t106755*(3.0/2.0);
            double t106800 = -t106805-t106806+t106754+t106798;
            double t106801 = 1.0/t106765;
            double t106802 = 1.0/t106759;
            double t106803 = 1.0/t106773;
            double t106804 = 1.0/t106769;
            double t106807 = omega*t106800*t106755*(4.0/3.0);
            double t106808 = t106807-1.0;
            double t106809 = cx4*t106801*t106636*t106638*t106757;
            double t106810 = cx1*gamma_aa[index]*gx*t106531*t106802;
            double t106811 = cx3*gamma_aa[index]*gx*t106803*t106634*t106639*t106756;
            double t106812 = cx2*t106640*t106804*t106634*t106756;
            double t106813 = cx0+t106810+t106811+t106812+t106809;
            double t106814 = pow(rho_a[index],4.0/3.0);
            double t106815 = omega*t106791*(8.334140006820045E15/2.81474976710656E14);
            double t106816 = omega*t106791*(2.778046668940015E15/1.40737488355328E14);
            double t106832 = omega*t106752*t106790*(7.0368744177664E13/8.334140006820045E15);
            double t106817 = -t106832+t106816;
            double t106818 = 1.0/sqrt(3.141592653589793);
            double t106819 = 1.0/pow(t106751,2.0/3.0);
            double t106820 = t106818*t106792*t106819*t106789*(1.108777112152858E31/1.584563250285287E29);
            double t106821 = t106755*t106794*t106787*t106789*(2.778046668940015E15/7.0368744177664E13);
            double t106822 = t106820+t106821+t106815-t106817*t106789-omega*t106752*t106790*(7.0368744177664E13/ \
               8.334140006820045E15);
            double t106823 = omega*t106800*t106791*(2.778046668940015E15/1.05553116266496E14);
            double t106824 = 1.0/(t106759*t106759);
            double t106825 = t106823-omega*t106822*t106755*(4.0/3.0);
            double t106826 = pow(rho_a[index],1.0/3.0);
            double t106827 = cx4*t106801*t106703*t106636*t106757*(3.2E1/3.0);
            double t106828 = cx1*gamma_aa[index]*gx*t106530*t106802*(8.0/3.0);
            double t106829 = cx3*gamma_aa[index]*gx*t106702*t106803*t106634*t106756*8.0;
            double t106830 = cx2*t106701*t106804*t106634*t106756*(1.6E1/3.0);
            double t106831 = t106830+t106827+t106828+t106829-cx1*t106701*t106634*t106824*t106756*(8.0/3.0)-cx2* \
               t106640*t106634*t106756*t106766*t106786-cx4*t106760*t106636*t106638*t106783*t106757-cx3*gamma_aa[index]* \
               gx*t106634*t106639*t106756*t106774*t106778;
            double t106833 = 1.0/pow(t106751,7.0/3.0);
            double t106834 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]);
            double t106835 = t106832-t106816;
            v_rho_a_rho_a_[index] = -(ccab0+ccab1*gcab*t106553*t106528+ccab2*t106551*t106527*t106529+ccab4*t106535* \
               t106536*t106554+ccab3*gcab*t106552*t106527*t106528*t106529)*(rho_a[index]*(-t106621-t106630+t106750+ \
               t106744+t106748+t106523*t106429*(t106621+t106630+t106742+t106747+t106749-t106511*t106512*t106513*t106627- \
               t106526*t106609*t106618*t106735*2.0-a1f*c*c0f*t106524*t106616*(8.0/9.0)-t106511*t106417*t106619*t106628* \
               t106629*(1.0/2.0)-a1p*c*t106512*t106513*t106518*t106496*(2.0/3.0)))+t106404*(-t106606-t106607-t106608+ \
               t106586+t106578+t106451*t106454*t106429*t106448*(t106606+t106607+t106608-t106586-t106578+t106441*1.0/ \
               (t106435*t106435*t106435)*t106558*t106579*2.0-t106441*t106558*t106559*(b2f*c*t106555*(4.0/9.0)+b4f* \
               t106411*t106556*(1.0E1/9.0)+b1f*c*t106456*t106555*(2.0/9.0)+b3f*c*t106407*t106555*(2.0/3.0)-b1f*t106411* \
               t106570*t106556*(1.0/3.6E1)+b3f*t106411*t106456*t106556*(1.0/1.2E1))-t106430*t106441*1.0/(t106435* \
               t106435*t106435*t106435)*1.0/(t106438*t106438)*t106579*(1.0/2.0)+a1f*c*c0f*t106555*t106439*(8.0/9.0) \
               -a1f*c*t106416*t106564*t106558*t106559*(2.0/3.0))+t106424*t106451*t106443*t106429*t106448*1.2E1+t106451* \
               t106443*t106454*t106429*t106596-t106443*t106454*t106429*t106465*t106483*8.0-t106451*t106454*t106429* \
               t106483*t106566*2.0+t106443*t106454*t106429*t106448*t106587*2.0E1+t106454*t106429*t106465*t106448* \
               t106566*8.0+t106423*t106424*t106451*t106443*t106429*t106483*8.0-t106423*t106424*t106443*t106429*t106465* \
               t106448*3.2E1-t106423*t106424*t106451*t106429*t106448*t106566*8.0-Aa*t106429*t106483*t106466*t106476* \
               t106478*t106589*4.0+Aa*t106429*t106466*t106476*t106485*t106478*t106596*2.0+Aa*t106429*t106448*t106466* \
               t106476*t106478*(t106424*t106451*1.2E1+t106454*t106587*2.0E1-t106423*t106424*t106465*3.2E1)*2.0+t106604* \
               t106429*t106483*t106466*t106485*t106478*t106597*t106599*2.0-t106604*t106429*t106448*t106466*t106478* \
               t106597*t106589*t106599*2.0+t106605*1.0/(t106472*t106472*t106472)*t106429*t106448*t106466*t106485* \
               t106478*t106597*2.0-t106429*t106448*t106466*t106485*t106478*t106597*t106599*(b2a*c*t106555*(4.0/9.0) \
               +b4a*t106411*t106556*(1.0E1/9.0)+b1a*c*t106456*t106555*(2.0/9.0)+b3a*c*t106407*t106555*(2.0/3.0)-b1a* \
               t106411*t106570*t106556*(1.0/3.6E1)+b3a*t106411*t106456*t106556*(1.0/1.2E1))-Aa*a1a*c*t106416*t106429* \
               t106483*t106466*t106476*t106485*(4.0/3.0)+Aa*a1a*c*t106429*t106555*t106448*t106466*t106476*t106485* \
               (8.0/9.0)+Aa*a1a*c*t106416*t106429*t106448*t106466*t106476*t106589*(4.0/3.0)-t106605*1.0/(t106472* \
               t106472*t106472*t106472)*t106429*t106448*t106466*1.0/(t106475*t106475)*t106467*t106485*t106478*(1.0/ \
               2.0)-a1a*c*t106604*t106416*t106429*t106448*t106466*t106485*t106597*t106599*(2.0/3.0))+t106523*t106633* \
               t106429*2.0-t106511*t106512*t106513*t106518*2.0+t106422*t106463*t106457*t106458*2.0-a1p*c*c0p*t106442* \
               t106416*(4.0/3.0)+a1p*c*c0p*t106520*t106496*(4.0/3.0)+t106451*t106443*t106454*t106429*t106483*2.0- \
               t106443*t106454*t106429*t106465*t106448*8.0-t106451*t106454*t106429*t106448*t106566*2.0+t106423*t106424* \
               t106451*t106443*t106429*t106448*8.0+Aa*t106429*t106483*t106466*t106476*t106485*t106478*4.0-Aa*t106429* \
               t106448*t106466*t106476*t106478*t106589*4.0+t106604*t106429*t106448*t106466*t106485*t106478*t106597* \
               t106599*2.0-Aa*a1a*c*t106416*t106429*t106448*t106466*t106476*t106485*(4.0/3.0))+(rho_a[index]*t106682+ \
               rho_b[index]*(t106660-t106523*t106429*(t106660-c0f*log((t106430*(1.0/2.0))/(b1f*t106646+b3f*t106647+ \
               b2f*c*t106644+b4f*t106411*t106648)+1.0)*(a1f*c*t106644+1.0)*2.0))-t106404*(t106453+t106661+t106662) \
               )*(-ccab2*t106527*t106529*t106676*(gamma_aa[index]*gcab*t106674*(8.8E1/9.0)+t106634*t106527*t106669* \
               (3.2E1/9.0)+gamma_aa[index]*t106527*t106528*t106674*(8.8E1/9.0))+ccab4*1.0/(t106541*t106541*t106541) \
               *t106535*t106536*(t106667*t106667)*2.0+ccab2*t106527*1.0/(t106546*t106546*t106546)*(t106672*t106672) \
               *t106529*2.0+ccab1*gamma_aa[index]*gcab*t106553*t106674*(4.4E1/9.0)+ccab2*t106551*t106634*t106527* \
               t106669*(3.2E1/9.0)-ccab1*t106634*t106527*t106668*t106669*(3.2E1/9.0)-ccab4*t106535*t106536*t106675* \
               (gamma_aa[index]*gcab*t106674*(1.76E2/9.0)+t106634*t106527*t106669*(6.4E1/3.0)+gamma_aa[index]*t106527* \
               t106528*t106674*(1.76E2/3.0)+t106535*t106634*t106529*t106669*(6.4E1/3.0)+gamma_aa[index]*gcab*t106527* \
               t106529*t106674*(1.76E2/3.0)+gamma_aa[index]*t106535*t106528*t106529*t106674*(1.76E2/9.0)+gcab*t106634* \
               t106527*t106528*t106669*(1.28E2/3.0))+ccab4*t106535*t106634*t106554*t106529*t106669*(6.4E1/3.0)+ccab2* \
               gamma_aa[index]*t106551*t106527*t106528*t106674*(8.8E1/9.0)-ccab1*gamma_aa[index]*t106527*t106528* \
               t106674*t106668*(4.4E1/9.0)+ccab3*gcab*1.0/(t106550*t106550*t106550)*t106527*(t106680*t106680)*t106528* \
               t106529*2.0+ccab3*gamma_aa[index]*gcab*t106552*t106527*t106529*t106674*(4.4E1/3.0)-ccab2*gamma_aa[index]* \
               t106530*t106527*t106528*t106672*t106676*(1.6E1/3.0)+ccab4*gamma_aa[index]*t106535*t106554*t106528* \
               t106529*t106674*(1.76E2/9.0)+ccab3*gcab*t106552*t106634*t106527*t106528*t106669*(3.2E1/3.0)+ccab1* \
               gcab*1.0/(t106543*t106543*t106543)*t106634*t106527*t106528*t106669*(3.2E1/9.0)-ccab3*gcab*t106527* \
               t106528*t106529*t106673*(gamma_aa[index]*gcab*t106674*(4.4E1/3.0)+t106634*t106527*t106669*(3.2E1/3.0) \
               +gamma_aa[index]*t106527*t106528*t106674*(8.8E1/3.0)+gamma_aa[index]*gcab*t106527*t106529*t106674* \
               (4.4E1/3.0)+gcab*t106634*t106527*t106528*t106669*(3.2E1/3.0))-ccab3*gamma_aa[index]*gcab*t106530*t106527* \
               t106680*t106529*t106673*8.0-ccab4*gamma_aa[index]*t106530*t106535*t106528*t106529*t106675*t106667* \
               (3.2E1/3.0))+t106734*t106727*2.0+t106726*t106682*2.0+(t106453+t106661+t106662+rho_a[index]*(t106632- \
               t106519+t106523*t106429*(t106631+t106519-t106614*t106615*t106526*t106609-a1p*c*c0p*t106520*t106496* \
               (2.0/3.0)))+t106404*(t106464-a1p*c*c0p*t106442*t106416*(2.0/3.0)+t106451*t106443*t106454*t106429*t106483- \
               t106443*t106454*t106429*t106465*t106448*4.0-t106451*t106454*t106429*t106448*t106566+t106423*t106424* \
               t106451*t106443*t106429*t106448*4.0+Aa*t106429*t106483*t106466*t106476*t106485*t106478*2.0-Aa*t106429* \
               t106448*t106466*t106476*t106478*t106589*2.0+t106604*t106429*t106448*t106466*t106485*t106478*t106597* \
               t106599-Aa*a1a*c*t106416*t106429*t106448*t106466*t106476*t106485*(2.0/3.0))-c0p*t106511*t106520*2.0- \
               t106523*t106642*t106429)*(ccab1*gamma_aa[index]*gcab*t106530*t106553*(4.0/3.0)-ccab2*t106527*t106672* \
               t106529*t106676-ccab4*t106535*t106536*t106675*t106667+ccab2*gamma_aa[index]*t106530*t106551*t106527* \
               t106528*(8.0/3.0)-ccab1*gamma_aa[index]*t106530*t106527*t106528*t106668*(4.0/3.0)+ccab3*gamma_aa[index]* \
               gcab*t106530*t106552*t106527*t106529*4.0+ccab4*gamma_aa[index]*t106530*t106535*t106554*t106528*t106529* \
               (1.6E1/3.0)-ccab3*gcab*t106527*t106680*t106528*t106529*t106673)*2.0-rho_a[index]*t106682*(ccaa1*gamma_aa[index]* \
               gcaa*t106691*t106674*(8.8E1/9.0)-ccaa1*t106710*t106634*t106635*t106669*2.4E1+ccaa2*t106700*t106634* \
               t106635*t106669*(3.04E2/9.0)+ccaa4*t106636*t106637*t106729*t106688*(1.12E3/9.0)-ccaa2*t106701*t106634* \
               t106724*t106635*t106725*(3.2E1/3.0)-ccaa4*t106720*t106703*t106721*t106636*t106637*(6.4E1/3.0)-ccaa2* \
               t106640*t106634*t106635*t106725*(gamma_aa[index]*gcaa*t106674*(1.76E2/9.0)+t106634*t106635*t106669* \
               (3.04E2/9.0))-ccaa4*t106721*t106636*t106637*t106638*(gamma_aa[index]*gcaa*t106674*(3.52E2/9.0)+t106634* \
               t106635*t106669*(6.08E2/3.0)+t106636*t106637*t106729*(1.12E3/9.0)+gamma_aa[index]*gcaa*t106634*t106635* \
               t106728*2.88E2)+ccaa2*t106640*t106634*(t106724*t106724)*t106635*1.0/(t106699*t106699*t106699)*2.0+ \
               ccaa4*(t106720*t106720)*t106636*t106637*t106638*1.0/(t106687*t106687*t106687)*2.0+ccaa3*gamma_aa[index]* \
               gcaa*t106634*t106635*t106728*t106696*7.2E1+ccaa1*gamma_aa[index]*gcaa*t106634*t106635*1.0/(t106690* \
               t106690*t106690)*t106728*(1.28E2/9.0)+ccaa3*gamma_aa[index]*gcaa*(t106714*t106714)*t106634*t106635* \
               t106639*1.0/(t106695*t106695*t106695)*2.0-ccaa3*gamma_aa[index]*gcaa*t106634*t106715*t106635*t106639* \
               (gamma_aa[index]*gcaa*t106674*(8.8E1/3.0)+t106634*t106635*t106669*(3.04E2/3.0)+gamma_aa[index]*gcaa* \
               t106634*t106635*t106728*7.2E1)-ccaa3*gamma_aa[index]*gcaa*t106702*t106714*t106634*t106715*t106635* \
               1.6E1)+rho_a[index]*t106734*(-t106621-t106630+t106750+t106744+t106748+t106523*t106429*(t106621+t106630- \
               t106750+t106742-t106744+t106747-t106748+t106749-t106526*t106609*t106618*t106735*2.0-a1f*c*c0f*t106524* \
               t106616*(8.0/9.0)))-rho_a[index]*t106726*t106727*2.0-c0*t106814*t106808*(cx1*gamma_aa[index]*gx*t106802* \
               t106674*(8.8E1/9.0)-cx1*t106634*t106824*t106756*t106669*2.4E1+cx2*t106804*t106634*t106756*t106669* \
               (3.04E2/9.0)+cx4*t106801*t106636*t106729*t106757*(1.12E3/9.0)-cx2*t106701*t106634*t106756*t106766* \
               t106786*(3.2E1/3.0)-cx4*t106703*t106760*t106636*t106783*t106757*(6.4E1/3.0)-cx2*t106640*t106634*t106756* \
               t106786*(gamma_aa[index]*gx*t106674*(1.76E2/9.0)+t106634*t106756*t106669*(3.04E2/9.0))-cx4*t106636* \
               t106638*t106783*t106757*(gamma_aa[index]*gx*t106674*(3.52E2/9.0)+t106634*t106756*t106669*(6.08E2/3.0) \
               +t106636*t106729*t106757*(1.12E3/9.0)+gamma_aa[index]*gx*t106634*t106728*t106756*2.88E2)+cx2*t106640* \
               t106634*t106756*(t106766*t106766)*1.0/(t106769*t106769*t106769)*2.0+cx4*(t106760*t106760)*t106636* \
               t106638*1.0/(t106765*t106765*t106765)*t106757*2.0+cx3*gamma_aa[index]*gx*t106803*t106634*t106728*t106756* \
               7.2E1+cx1*gamma_aa[index]*gx*t106634*t106728*t106756*1.0/(t106759*t106759*t106759)*(1.28E2/9.0)+cx3* \
               gamma_aa[index]*gx*t106634*1.0/(t106773*t106773*t106773)*t106639*t106756*(t106778*t106778)*2.0-cx3* \
               gamma_aa[index]*gx*t106634*t106639*t106756*t106774*(gamma_aa[index]*gx*t106674*(8.8E1/3.0)+t106634* \
               t106756*t106669*(3.04E2/3.0)+gamma_aa[index]*gx*t106634*t106728*t106756*7.2E1)-cx3*gamma_aa[index]* \
               gx*t106702*t106634*t106756*t106774*t106778*1.6E1)+c0*t106813*t106814*(omega*t106791*(t106820+t106821- \
               t106832+t106815+t106835*t106789)*(2.778046668940015E15/5.2776558133248E13)+omega*t106755*(omega*t106833* \
               (2.315262988442614E31/9.903520314283042E27)-t106789*(omega*t106833*(7.717543294808713E30/4.951760157141521E27) \
               -omega*t106752*t106834*(1.40737488355328E14/8.334140006820045E15))-omega*t106752*t106834*(1.40737488355328E14/ \
               8.334140006820045E15)+t106835*t106755*t106787*t106789*(2.778046668940015E15/3.5184372088832E13)+t106791* \
               t106794*t106787*t106789*(7.717543294808713E30/9.903520314283042E27)+1.0/(omega*omega*omega)*t106753* \
               t106818*t106789*(1.108777112152858E31/2.37684487542793E29)+1.0/(omega*omega*omega*omega)*t106819*t106794* \
               t106789*(7.717543294808713E30/4.951760157141521E27)+1.0/pow(t106751,5.0/3.0)*t106818*t106792*t106789* \
               (3.080234563013177E46/1.115037259926531E43))*(4.0/3.0)-omega*t106800*t106833*(7.717543294808713E30/ \
               3.713820117856141E27))-c0*t106831*t106814*t106825*2.0-c0*t106813*t106492*t106808*(4.0/9.0)+c0*t106813* \
               t106825*t106826*(8.0/3.0)+c0*t106831*t106808*t106826*(8.0/3.0);
        } else if (rho_a[index] > cutoff_) {
            double t110184 = 1.0/pow(rho_a[index],1.0/3.0);
            double t110185 = c*t110184;
            double t110186 = sqrt(t110185);
            double t110187 = b1f*t110186;
            double t110188 = pow(t110185,3.0/2.0);
            double t110189 = b3f*t110188;
            double t110190 = c*c;
            double t110191 = 1.0/pow(rho_a[index],2.0/3.0);
            double t110192 = b4f*t110190*t110191;
            double t110193 = b2f*c*t110184;
            double t110194 = t110192+t110193+t110187+t110189;
            double t110195 = 1.0/pow(rho_a[index],4.0/3.0);
            double t110196 = b1p*t110186;
            double t110197 = b3p*t110188;
            double t110198 = b4p*t110190*t110191;
            double t110199 = b2p*c*t110184;
            double t110200 = t110196+t110197+t110198+t110199;
            double t110201 = 1.0/pow(rho_a[index],5.0/3.0);
            double t110202 = 1.0/sqrt(t110185);
            double t110203 = 1.0/c0f;
            double t110204 = 1.0/t110194;
            double t110205 = t110203*t110204*(1.0/2.0);
            double t110206 = t110205+1.0;
            double t110207 = 1.0/c0p;
            double t110208 = 1.0/t110200;
            double t110209 = t110207*t110208*(1.0/2.0);
            double t110210 = t110209+1.0;
            double t110211 = a1p*c*t110184;
            double t110212 = t110211+1.0;
            double t110213 = 1.0/t110210;
            double t110214 = 1.0/(t110200*t110200);
            double t110215 = b4p*t110201*t110190*(2.0/3.0);
            double t110216 = b2p*c*t110195*(1.0/3.0);
            double t110217 = b1p*c*t110202*t110195*(1.0/6.0);
            double t110218 = b3p*c*t110186*t110195*(1.0/2.0);
            double t110219 = t110215+t110216+t110217+t110218;
            double t110220 = t110212*t110213*t110214*t110219;
            double t110221 = log(t110210);
            double t110222 = gamma_aa[index]*gamma_aa[index];
            double t110223 = gcaa*gcaa;
            double t110224 = t110222*t110222;
            double t110225 = t110223*t110223;
            double t110226 = 1.0/pow(rho_a[index],3.2E1/3.0);
            double t110227 = 1.0/pow(rho_a[index],8.0/3.0);
            double t110228 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]);
            double t110229 = 1.0/pow(rho_a[index],1.6E1/3.0);
            double t110230 = pow(2.0,1.0/3.0);
            double t110231 = t110230*2.0;
            double t110232 = t110231-2.0;
            double t110233 = two_13*2.0;
            double t110234 = t110233-2.0;
            double t110235 = 1.0/t110234;
            double t110236 = log(t110206);
            double t110237 = a1f*c*t110184;
            double t110238 = t110237+1.0;
            double t110239 = gamma_aa[index]*gcaa*t110227*4.0;
            double t110240 = gamma_aa[index]*gcaa*t110222*t110223*t110228*4.0;
            double t110241 = t110222*t110223*t110229*6.0;
            double t110242 = t110224*t110225*t110226;
            double t110243 = t110240+t110241+t110242+t110239+1.0;
            double t110244 = 1.0/t110243;
            double t110245 = gamma_aa[index]*gcaa*t110227;
            double t110246 = t110245+1.0;
            double t110247 = 1.0/t110246;
            double t110248 = gamma_aa[index]*gcaa*t110227*3.0;
            double t110249 = gamma_aa[index]*gcaa*t110222*t110223*t110228;
            double t110250 = t110222*t110223*t110229*3.0;
            double t110251 = t110250+t110248+t110249+1.0;
            double t110252 = 1.0/t110251;
            double t110253 = gamma_aa[index]*gcaa*t110227*2.0;
            double t110254 = t110222*t110223*t110229;
            double t110255 = t110253+t110254+1.0;
            double t110256 = 1.0/t110255;
            double t110257 = 1.0/pow(rho_a[index],1.9E1/3.0);
            double t110258 = 1.0/pow(rho_a[index],1.1E1/3.0);
            double t110259 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]*rho_a[index]);
            double t110260 = 1.0/pow(rho_a[index],3.5E1/3.0);
            double t110261 = 1.0/t110206;
            double t110262 = 1.0/(t110194*t110194);
            double t110263 = b4f*t110201*t110190*(2.0/3.0);
            double t110264 = b2f*c*t110195*(1.0/3.0);
            double t110265 = b1f*c*t110202*t110195*(1.0/6.0);
            double t110266 = b3f*c*t110186*t110195*(1.0/2.0);
            double t110267 = t110263+t110264+t110265+t110266;
            double t110268 = a1f*c*c0f*t110236*t110195*(2.0/3.0);
            double t110269 = a1p*c*c0p*t110221*t110195*(2.0/3.0);
            double t110270 = ccaa4*t110224*t110260*t110225*t110244*(3.2E1/3.0);
            double t110271 = ccaa1*gamma_aa[index]*gcaa*t110247*t110258*(8.0/3.0);
            double t110272 = ccaa3*gamma_aa[index]*gcaa*t110222*t110223*t110252*t110259*8.0;
            double t110273 = ccaa2*t110222*t110223*t110256*t110257*(1.6E1/3.0);
            double t110274 = 1.0/(t110246*t110246);
            double t110275 = gamma_aa[index]*gcaa*t110258*8.0;
            double t110276 = gamma_aa[index]*gcaa*t110222*t110223*t110259*8.0;
            double t110277 = t110222*t110223*t110257*1.6E1;
            double t110278 = t110275+t110276+t110277;
            double t110279 = 1.0/(t110251*t110251);
            double t110280 = gamma_aa[index]*gcaa*t110258*(3.2E1/3.0);
            double t110281 = gamma_aa[index]*gcaa*t110222*t110223*t110259*3.2E1;
            double t110282 = t110222*t110223*t110257*3.2E1;
            double t110283 = t110224*t110260*t110225*(3.2E1/3.0);
            double t110284 = t110280+t110281+t110282+t110283;
            double t110285 = 1.0/(t110243*t110243);
            double t110286 = gamma_aa[index]*gcaa*t110258*(1.6E1/3.0);
            double t110287 = t110222*t110223*t110257*(1.6E1/3.0);
            double t110288 = t110286+t110287;
            double t110289 = 1.0/(t110255*t110255);
            double t110290 = t110270+t110271+t110272+t110273-ccaa1*t110222*t110223*t110274*t110257*(8.0/3.0)- \
               ccaa4*t110224*t110225*t110226*t110284*t110285-ccaa2*t110222*t110223*t110229*t110288*t110289-ccaa3* \
               gamma_aa[index]*gcaa*t110222*t110223*t110228*t110278*t110279;
            double t110291 = c0f*t110236*t110238*2.0;
            double t110292 = c0p*t110212*t110221*2.0;
            double t110293 = 1.0/pow(rho_a[index],1.0E1);
            double t110294 = 1.0/pow(rho_a[index],2.2E1/3.0);
            double t110295 = 1.0/pow(rho_a[index],1.4E1/3.0);
            double t110296 = 1.0/pow(rho_a[index],3.8E1/3.0);
            double t110297 = ccaa4*t110224*t110225*t110226*t110244;
            double t110298 = ccaa1*gamma_aa[index]*gcaa*t110227*t110247;
            double t110299 = ccaa3*gamma_aa[index]*gcaa*t110222*t110223*t110252*t110228;
            double t110300 = ccaa2*t110222*t110223*t110229*t110256;
            double t110301 = ccaa0+t110300+t110297+t110298+t110299;
            double t110302 = 1.0/pow(rho_a[index],7.0/3.0);
            double t110303 = 1.0/pow(t110185,3.0/2.0);
            double t110304 = t110267*t110267;
            double t110305 = t110219*t110219;
            double t110306 = 1.0/(t110200*t110200*t110200);
            double t110307 = t110212*t110213*t110305*t110306*2.0;
            double t110308 = b4p*t110190*t110227*(1.0E1/9.0);
            double t110309 = b2p*c*t110302*(4.0/9.0);
            double t110310 = b3p*t110202*t110190*t110227*(1.0/1.2E1);
            double t110311 = b1p*c*t110202*t110302*(2.0/9.0);
            double t110312 = b3p*c*t110302*t110186*(2.0/3.0);
            double t110313 = t110310+t110311+t110312+t110308+t110309-b1p*t110303*t110190*t110227*(1.0/3.6E1);
            double t110314 = 1.0/(t110210*t110210);
            double t110315 = 1.0/(t110200*t110200*t110200*t110200);
            double t110316 = a1p*c*c0p*t110221*t110302*(8.0/9.0);
            double t110317 = rho_a[index]*(8.334140006820045E15/1.40737488355328E14);
            double t110318 = omega*omega;
            double t110319 = 1.0/rho_a[index];
            double t110320 = omega*t110318*t110319*(7.0368744177664E13/8.334140006820045E15);
            double t110321 = 1.0/pow(t110317,1.0/3.0);
            double t110322 = gx*gx;
            double t110323 = t110322*t110322;
            double t110324 = gamma_aa[index]*gx*t110227;
            double t110325 = t110324+1.0;
            double t110345 = gamma_aa[index]*gx*t110258*(3.2E1/3.0);
            double t110346 = gamma_aa[index]*gx*t110222*t110322*t110259*3.2E1;
            double t110347 = t110222*t110322*t110257*3.2E1;
            double t110348 = t110224*t110260*t110323*(3.2E1/3.0);
            double t110326 = t110345+t110346+t110347+t110348;
            double t110327 = gamma_aa[index]*gx*t110227*4.0;
            double t110328 = gamma_aa[index]*gx*t110222*t110322*t110228*4.0;
            double t110329 = t110222*t110322*t110229*6.0;
            double t110330 = t110224*t110323*t110226;
            double t110331 = t110330+t110327+t110328+t110329+1.0;
            double t110350 = gamma_aa[index]*gx*t110258*(1.6E1/3.0);
            double t110351 = t110222*t110322*t110257*(1.6E1/3.0);
            double t110332 = t110350+t110351;
            double t110333 = gamma_aa[index]*gx*t110227*2.0;
            double t110334 = t110222*t110322*t110229;
            double t110335 = t110333+t110334+1.0;
            double t110336 = gamma_aa[index]*gx*t110227*3.0;
            double t110337 = gamma_aa[index]*gx*t110222*t110322*t110228;
            double t110338 = t110222*t110322*t110229*3.0;
            double t110339 = t110336+t110337+t110338+1.0;
            double t110340 = 1.0/(t110339*t110339);
            double t110341 = gamma_aa[index]*gx*t110258*8.0;
            double t110342 = gamma_aa[index]*gx*t110222*t110322*t110259*8.0;
            double t110343 = t110222*t110322*t110257*1.6E1;
            double t110344 = t110341+t110342+t110343;
            double t110349 = 1.0/(t110331*t110331);
            double t110352 = 1.0/(t110335*t110335);
            double t110353 = 1.0/(omega*omega);
            double t110354 = pow(t110317,2.0/3.0);
            double t110359 = t110353*t110354;
            double t110355 = exp(-t110359);
            double t110356 = 1.0/(rho_a[index]*rho_a[index]);
            double t110357 = 1.0/pow(t110317,4.0/3.0);
            double t110358 = 1.0/omega;
            double t110365 = omega*t110321;
            double t110360 = t110320-t110365;
            double t110361 = pow(t110317,1.0/3.0);
            double t110362 = t110361*t110358;
            double t110363 = erf(t110362);
            double t110364 = t110363*(3.991211251234741E15/2.251799813685248E15);
            double t110371 = t110360*t110355;
            double t110372 = omega*t110321*(3.0/2.0);
            double t110366 = t110320-t110371-t110372+t110364;
            double t110367 = 1.0/t110331;
            double t110368 = 1.0/t110325;
            double t110369 = 1.0/t110339;
            double t110370 = 1.0/t110335;
            double t110373 = omega*t110321*t110366*(4.0/3.0);
            double t110374 = t110373-1.0;
            double t110375 = cx4*t110224*t110323*t110226*t110367;
            double t110376 = cx1*gamma_aa[index]*gx*t110227*t110368;
            double t110377 = cx3*gamma_aa[index]*gx*t110222*t110322*t110228*t110369;
            double t110378 = cx2*t110222*t110322*t110370*t110229;
            double t110379 = cx0+t110375+t110376+t110377+t110378;
            double t110380 = pow(rho_a[index],4.0/3.0);
            double t110381 = omega*t110357*(8.334140006820045E15/2.81474976710656E14);
            double t110382 = omega*t110357*(2.778046668940015E15/1.40737488355328E14);
            double t110398 = omega*t110318*t110356*(7.0368744177664E13/8.334140006820045E15);
            double t110383 = t110382-t110398;
            double t110384 = 1.0/sqrt(3.141592653589793);
            double t110385 = 1.0/pow(t110317,2.0/3.0);
            double t110386 = t110355*t110384*t110358*t110385*(1.108777112152858E31/1.584563250285287E29);
            double t110387 = t110321*t110360*t110353*t110355*(2.778046668940015E15/7.0368744177664E13);
            double t110399 = t110355*t110383;
            double t110388 = t110381+t110386+t110387-t110399-omega*t110318*t110356*(7.0368744177664E13/8.334140006820045E15) \
               ;
            double t110389 = omega*t110321*t110388*(4.0/3.0);
            double t110390 = t110389-omega*t110357*t110366*(2.778046668940015E15/1.05553116266496E14);
            double t110391 = 1.0/(t110325*t110325);
            double t110392 = pow(rho_a[index],1.0/3.0);
            double t110393 = cx4*t110224*t110260*t110323*t110367*(3.2E1/3.0);
            double t110394 = cx1*gamma_aa[index]*gx*t110258*t110368*(8.0/3.0);
            double t110395 = cx3*gamma_aa[index]*gx*t110222*t110322*t110259*t110369*8.0;
            double t110396 = cx2*t110222*t110322*t110370*t110257*(1.6E1/3.0);
            double t110397 = t110393+t110394+t110395+t110396-cx1*t110222*t110322*t110391*t110257*(8.0/3.0)-cx2* \
               t110222*t110322*t110332*t110352*t110229-cx4*t110224*t110323*t110226*t110326*t110349-cx3*gamma_aa[index]* \
               gx*t110222*t110322*t110340*t110344*t110228;
            double t110400 = 1.0/pow(t110317,7.0/3.0);
            double t110401 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]);
            v_rho_a_rho_a_[index] = t110290*(t110292+t110232*t110235*(t110291-c0p*t110212*t110221*2.0))*2.0+t110301* \
               (-t110220+t110269+t110232*t110235*(t110220+t110268-t110261*t110262*t110238*t110267-a1p*c*c0p*t110221* \
               t110195*(2.0/3.0)))*2.0+rho_a[index]*t110301*(-t110307-t110316+t110232*t110235*(t110307+t110316-t110212* \
               t110213*t110214*t110313-t110304*t110261*t110238*1.0/(t110194*t110194*t110194)*2.0+t110261*t110262* \
               t110238*(b2f*c*t110302*(4.0/9.0)+b4f*t110190*t110227*(1.0E1/9.0)+b1f*c*t110202*t110302*(2.0/9.0)+b3f* \
               c*t110302*t110186*(2.0/3.0)-b1f*t110303*t110190*t110227*(1.0/3.6E1)+b3f*t110202*t110190*t110227*(1.0/ \
               1.2E1))+t110203*t110304*1.0/(t110206*t110206)*t110238*1.0/(t110194*t110194*t110194*t110194)*(1.0/2.0) \
               -a1f*c*c0f*t110302*t110236*(8.0/9.0)-t110212*t110305*t110314*t110207*t110315*(1.0/2.0)+a1f*c*t110261* \
               t110262*t110195*t110267*(2.0/3.0)-a1p*c*t110213*t110214*t110219*t110195*(2.0/3.0))+t110212*t110213* \
               t110214*t110313+t110212*t110305*t110314*t110207*t110315*(1.0/2.0)+a1p*c*t110213*t110214*t110219*t110195* \
               (2.0/3.0))-rho_a[index]*t110290*(-t110220+t110269+t110232*t110235*(t110220+t110268-t110269-t110261* \
               t110262*t110238*t110267))*2.0-rho_a[index]*(t110292+t110232*t110235*(t110291-t110292))*(ccaa1*gamma_aa[index]* \
               gcaa*t110247*t110295*(8.8E1/9.0)-ccaa1*t110222*t110223*t110274*t110294*2.4E1+ccaa2*t110222*t110223* \
               t110256*t110294*(3.04E2/9.0)+ccaa4*t110224*t110225*t110244*t110296*(1.12E3/9.0)-ccaa4*t110224*t110260* \
               t110225*t110284*t110285*(6.4E1/3.0)-ccaa2*t110222*t110223*t110257*t110288*t110289*(3.2E1/3.0)-ccaa2* \
               t110222*t110223*t110229*t110289*(gamma_aa[index]*gcaa*t110295*(1.76E2/9.0)+t110222*t110223*t110294* \
               (3.04E2/9.0))-ccaa4*t110224*t110225*t110226*t110285*(gamma_aa[index]*gcaa*t110295*(3.52E2/9.0)+t110222* \
               t110223*t110294*(6.08E2/3.0)+t110224*t110225*t110296*(1.12E3/9.0)+gamma_aa[index]*gcaa*t110222*t110223* \
               t110293*2.88E2)+ccaa4*t110224*t110225*1.0/(t110243*t110243*t110243)*t110226*(t110284*t110284)*2.0+ \
               ccaa2*t110222*t110223*1.0/(t110255*t110255*t110255)*t110229*(t110288*t110288)*2.0+ccaa3*gamma_aa[index]* \
               gcaa*t110222*t110223*t110252*t110293*7.2E1+ccaa1*gamma_aa[index]*gcaa*t110222*t110223*1.0/(t110246* \
               t110246*t110246)*t110293*(1.28E2/9.0)+ccaa3*gamma_aa[index]*gcaa*t110222*t110223*1.0/(t110251*t110251* \
               t110251)*t110228*(t110278*t110278)*2.0-ccaa3*gamma_aa[index]*gcaa*t110222*t110223*t110228*t110279* \
               (gamma_aa[index]*gcaa*t110295*(8.8E1/3.0)+t110222*t110223*t110294*(3.04E2/3.0)+gamma_aa[index]*gcaa* \
               t110222*t110223*t110293*7.2E1)-ccaa3*gamma_aa[index]*gcaa*t110222*t110223*t110259*t110278*t110279* \
               1.6E1)-c0*t110380*t110374*(cx1*gamma_aa[index]*gx*t110295*t110368*(8.8E1/9.0)-cx1*t110222*t110322* \
               t110391*t110294*2.4E1+cx2*t110222*t110322*t110370*t110294*(3.04E2/9.0)+cx4*t110224*t110323*t110367* \
               t110296*(1.12E3/9.0)-cx2*t110222*t110322*t110332*t110352*t110257*(3.2E1/3.0)-cx4*t110224*t110260*t110323* \
               t110326*t110349*(6.4E1/3.0)-cx2*t110222*t110322*t110352*t110229*(gamma_aa[index]*gx*t110295*(1.76E2/ \
               9.0)+t110222*t110322*t110294*(3.04E2/9.0))-cx4*t110224*t110323*t110226*t110349*(gamma_aa[index]*gx* \
               t110295*(3.52E2/9.0)+t110222*t110322*t110294*(6.08E2/3.0)+t110224*t110323*t110296*(1.12E3/9.0)+gamma_aa[index]* \
               gx*t110222*t110322*t110293*2.88E2)+cx2*t110222*t110322*(t110332*t110332)*1.0/(t110335*t110335*t110335) \
               *t110229*2.0+cx4*1.0/(t110331*t110331*t110331)*t110224*t110323*t110226*(t110326*t110326)*2.0+cx3*gamma_aa[index]* \
               gx*t110222*t110322*t110293*t110369*7.2E1+cx1*gamma_aa[index]*gx*t110222*t110322*1.0/(t110325*t110325* \
               t110325)*t110293*(1.28E2/9.0)+cx3*gamma_aa[index]*gx*t110222*t110322*(t110344*t110344)*t110228*1.0/ \
               (t110339*t110339*t110339)*2.0-cx3*gamma_aa[index]*gx*t110222*t110322*t110340*t110228*(gamma_aa[index]* \
               gx*t110295*(8.8E1/3.0)+t110222*t110322*t110294*(3.04E2/3.0)+gamma_aa[index]*gx*t110222*t110322*t110293* \
               7.2E1)-cx3*gamma_aa[index]*gx*t110222*t110322*t110340*t110344*t110259*1.6E1)+c0*t110380*t110390*t110397* \
               2.0-c0*t110191*t110374*t110379*(4.0/9.0)-c0*t110390*t110392*t110379*(8.0/3.0)+c0*t110374*t110392*t110397* \
               (8.0/3.0)+c0*t110380*t110379*(omega*t110321*(omega*t110400*(2.315262988442614E31/9.903520314283042E27) \
               -t110355*(omega*t110400*(7.717543294808713E30/4.951760157141521E27)-omega*t110401*t110318*(1.40737488355328E14/ \
               8.334140006820045E15))-omega*t110401*t110318*(1.40737488355328E14/8.334140006820045E15)-t110321*t110353* \
               t110355*t110383*(2.778046668940015E15/3.5184372088832E13)+t110360*t110353*t110355*t110357*(7.717543294808713E30/ \
               9.903520314283042E27)+1.0/(omega*omega*omega*omega)*t110360*t110355*t110385*(7.717543294808713E30/ \
               4.951760157141521E27)+1.0/(omega*omega*omega)*t110319*t110355*t110384*(1.108777112152858E31/2.37684487542793E29) \
               +1.0/pow(t110317,5.0/3.0)*t110355*t110384*t110358*(3.080234563013177E46/1.115037259926531E43))*(4.0/ \
               3.0)+omega*t110357*(t110381+t110386+t110387-t110398-t110399)*(2.778046668940015E15/5.2776558133248E13) \
               -omega*t110400*t110366*(7.717543294808713E30/3.713820117856141E27));
        } else if (rho_b[index] > cutoff_) {
            v_rho_a_rho_a_[index] = 0.0;
        } else {
            v_rho_a_rho_a_[index] = 0.0;
        }

        //V_rho_a_rho_b
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t106837 = rho_a[index]+rho_b[index];
            double t106838 = 1.0/pow(t106837,1.0/3.0);
            double t106839 = c*t106838;
            double t106840 = sqrt(t106839);
            double t106841 = b1p*t106840;
            double t106842 = pow(t106839,3.0/2.0);
            double t106843 = b3p*t106842;
            double t106844 = c*c;
            double t106845 = 1.0/pow(t106837,2.0/3.0);
            double t106846 = b4p*t106844*t106845;
            double t106847 = b2p*c*t106838;
            double t106848 = t106841+t106843+t106846+t106847;
            double t106849 = 1.0/pow(t106837,4.0/3.0);
            double t106850 = 1.0/c0p;
            double t106851 = 1.0/t106848;
            double t106852 = t106850*t106851*(1.0/2.0);
            double t106853 = t106852+1.0;
            double t106854 = a1p*c*t106838;
            double t106855 = t106854+1.0;
            double t106856 = rho_a[index]-rho_b[index];
            double t106857 = t106856*t106856;
            double t106858 = 1.0/t106837;
            double t106859 = t106856*t106858;
            double t106860 = two_13*2.0;
            double t106861 = t106860-2.0;
            double t106862 = 1.0/t106861;
            double t106863 = 1.0/c0f;
            double t106864 = b1f*t106840;
            double t106865 = b3f*t106842;
            double t106866 = b4f*t106844*t106845;
            double t106867 = b2f*c*t106838;
            double t106868 = t106864+t106865+t106866+t106867;
            double t106869 = 1.0/t106868;
            double t106870 = t106863*t106869*(1.0/2.0);
            double t106871 = t106870+1.0;
            double t106872 = log(t106871);
            double t106873 = a1f*c*t106838;
            double t106874 = t106873+1.0;
            double t106875 = log(t106853);
            double t106885 = c0f*t106872*t106874*2.0;
            double t106886 = c0p*t106855*t106875*2.0;
            double t106876 = t106885-t106886;
            double t106877 = t106859+1.0;
            double t106878 = pow(t106877,4.0/3.0);
            double t106879 = -t106859+1.0;
            double t106880 = pow(t106879,4.0/3.0);
            double t106881 = t106880+t106878-2.0;
            double t106882 = 1.0/(t106837*t106837);
            double t106913 = t106882*t106856;
            double t106883 = -t106913+t106858;
            double t106884 = 1.0/(t106837*t106837*t106837*t106837);
            double t106887 = t106857*t106857;
            double t106888 = 1.0/pow(t106837,5.0/3.0);
            double t106889 = 1.0/sqrt(t106839);
            double t106890 = 1.0/t106853;
            double t106891 = 1.0/(t106848*t106848);
            double t106892 = b4p*t106844*t106888*(2.0/3.0);
            double t106893 = b2p*c*t106849*(1.0/3.0);
            double t106894 = b1p*c*t106849*t106889*(1.0/6.0);
            double t106895 = b3p*c*t106840*t106849*(1.0/2.0);
            double t106896 = t106892+t106893+t106894+t106895;
            double t106897 = t106890*t106855*t106891*t106896;
            double t106898 = 1.0/(t106837*t106837*t106837*t106837*t106837);
            double t106899 = 1.0/d2fz0;
            double t106900 = 1.0/Aa;
            double t106901 = b1a*t106840;
            double t106902 = b3a*t106842;
            double t106903 = b4a*t106844*t106845;
            double t106904 = b2a*c*t106838;
            double t106905 = t106901+t106902+t106903+t106904;
            double t106906 = 1.0/t106905;
            double t106907 = t106900*t106906*(1.0/2.0);
            double t106908 = t106907+1.0;
            double t106909 = log(t106908);
            double t106910 = a1a*c*t106838;
            double t106911 = t106910+1.0;
            double t106912 = pow(t106877,1.0/3.0);
            double t106914 = t106912*t106883*(4.0/3.0);
            double t106915 = pow(t106879,1.0/3.0);
            double t107059 = t106915*t106883*(4.0/3.0);
            double t106916 = t106914-t107059;
            double t106917 = t106884*t106887;
            double t106918 = t106917-1.0;
            double t106919 = 1.0/pow(rho_a[index],1.0/3.0);
            double t106920 = c*t106919;
            double t106921 = sqrt(t106920);
            double t106922 = b1f*t106921;
            double t106923 = pow(t106920,3.0/2.0);
            double t106924 = b3f*t106923;
            double t106925 = 1.0/pow(rho_a[index],2.0/3.0);
            double t106926 = b4f*t106844*t106925;
            double t106927 = b2f*c*t106919;
            double t106928 = t106922+t106924+t106926+t106927;
            double t106929 = 1.0/pow(rho_a[index],4.0/3.0);
            double t106930 = b1p*t106921;
            double t106931 = b3p*t106923;
            double t106932 = b4p*t106844*t106925;
            double t106933 = b2p*c*t106919;
            double t106934 = t106930+t106931+t106932+t106933;
            double t106935 = 1.0/pow(rho_a[index],5.0/3.0);
            double t106936 = 1.0/sqrt(t106920);
            double t106937 = 1.0/t106928;
            double t106938 = t106863*t106937*(1.0/2.0);
            double t106939 = t106938+1.0;
            double t106940 = 1.0/t106934;
            double t106941 = t106850*t106940*(1.0/2.0);
            double t106942 = t106941+1.0;
            double t106943 = a1p*c*t106919;
            double t106944 = t106943+1.0;
            double t106945 = 1.0/t106942;
            double t106946 = 1.0/(t106934*t106934);
            double t106947 = b4p*t106844*t106935*(2.0/3.0);
            double t106948 = b2p*c*t106929*(1.0/3.0);
            double t106949 = b1p*c*t106936*t106929*(1.0/6.0);
            double t106950 = b3p*c*t106921*t106929*(1.0/2.0);
            double t106951 = t106950+t106947+t106948+t106949;
            double t106952 = t106951*t106944*t106945*t106946;
            double t106953 = log(t106942);
            double t106954 = pow(2.0,1.0/3.0);
            double t106955 = t106954*2.0;
            double t106956 = t106955-2.0;
            double t106957 = log(t106939);
            double t106958 = a1f*c*t106919;
            double t106959 = t106958+1.0;
            double t106960 = gcab*gcab;
            double t106964 = 1.0/pow(rho_a[index],8.0/3.0);
            double t106965 = gamma_aa[index]*t106964*(1.0/2.0);
            double t106966 = 1.0/pow(rho_b[index],8.0/3.0);
            double t106967 = gamma_bb[index]*t106966*(1.0/2.0);
            double t106961 = t106965+t106967;
            double t106962 = t106961*t106961;
            double t106963 = 1.0/pow(rho_b[index],1.1E1/3.0);
            double t106968 = t106960*t106960;
            double t106969 = t106962*t106962;
            double t106970 = t106960*t106962*6.0;
            double t106971 = gcab*t106960*t106961*t106962*4.0;
            double t106972 = t106968*t106969;
            double t106973 = gcab*t106961*4.0;
            double t106974 = t106970+t106971+t106972+t106973+1.0;
            double t106975 = gcab*t106961;
            double t106976 = t106975+1.0;
            double t106977 = t106960*t106962;
            double t106978 = gcab*t106961*2.0;
            double t106979 = t106977+t106978+1.0;
            double t106980 = t106960*t106962*3.0;
            double t106981 = gcab*t106960*t106961*t106962;
            double t106982 = gcab*t106961*3.0;
            double t106983 = t106980+t106981+t106982+1.0;
            double t106984 = t106862*t106881*t106856*t106857*t106884*t106876*4.0;
            double t106985 = t106913+t106858;
            double t106986 = 1.0/t106871;
            double t106987 = 1.0/(t106868*t106868);
            double t106988 = b4f*t106844*t106888*(2.0/3.0);
            double t106989 = b2f*c*t106849*(1.0/3.0);
            double t106990 = b1f*c*t106849*t106889*(1.0/6.0);
            double t106991 = b3f*c*t106840*t106849*(1.0/2.0);
            double t106992 = t106990+t106991+t106988+t106989;
            double t106993 = a1f*c*c0f*t106872*t106849*(2.0/3.0);
            double t106994 = t106887*t106898*4.0;
            double t106995 = t106912*t106985*(4.0/3.0);
            double t107058 = t106915*t106985*(4.0/3.0);
            double t106996 = -t107058+t106995;
            double t106997 = 1.0/t106908;
            double t106998 = 1.0/(t106905*t106905);
            double t106999 = b4a*t106844*t106888*(2.0/3.0);
            double t107000 = b2a*c*t106849*(1.0/3.0);
            double t107001 = b1a*c*t106849*t106889*(1.0/6.0);
            double t107002 = b3a*c*t106840*t106849*(1.0/2.0);
            double t107003 = t107000+t107001+t107002+t106999;
            double t107004 = t107003*t106911*t106862*t106881*t106918*t106997*t106899*t106998;
            double t107005 = 1.0/pow(rho_b[index],1.0/3.0);
            double t107006 = c*t107005;
            double t107007 = sqrt(t107006);
            double t107008 = b1f*t107007;
            double t107009 = pow(t107006,3.0/2.0);
            double t107010 = b3f*t107009;
            double t107011 = 1.0/pow(rho_b[index],2.0/3.0);
            double t107012 = b4f*t107011*t106844;
            double t107013 = b2f*c*t107005;
            double t107014 = t107010+t107012+t107013+t107008;
            double t107015 = 1.0/pow(rho_b[index],4.0/3.0);
            double t107016 = b1p*t107007;
            double t107017 = b3p*t107009;
            double t107018 = b4p*t107011*t106844;
            double t107019 = b2p*c*t107005;
            double t107020 = t107016+t107017+t107018+t107019;
            double t107021 = 1.0/pow(rho_b[index],5.0/3.0);
            double t107022 = 1.0/sqrt(t107006);
            double t107023 = 1.0/t107014;
            double t107024 = t107023*t106863*(1.0/2.0);
            double t107025 = t107024+1.0;
            double t107026 = 1.0/t107020;
            double t107027 = t107026*t106850*(1.0/2.0);
            double t107028 = t107027+1.0;
            double t107029 = a1p*c*t107005;
            double t107030 = t107029+1.0;
            double t107031 = 1.0/t107028;
            double t107032 = 1.0/(t107020*t107020);
            double t107033 = b4p*t107021*t106844*(2.0/3.0);
            double t107034 = b2p*c*t107015*(1.0/3.0);
            double t107035 = b1p*c*t107022*t107015*(1.0/6.0);
            double t107036 = b3p*c*t107015*t107007*(1.0/2.0);
            double t107037 = t107033+t107034+t107035+t107036;
            double t107038 = t107030*t107031*t107032*t107037;
            double t107039 = log(t107028);
            double t107040 = log(t107025);
            double t107041 = a1f*c*t107005;
            double t107042 = t107041+1.0;
            double t107043 = t106862*t106881*t106884*t106876*t106887;
            double t107044 = Aa*t106911*t106862*t106881*t106909*t106918*t106899*2.0;
            double t107045 = 1.0/pow(rho_a[index],1.1E1/3.0);
            double t107046 = 1.0/(t106983*t106983);
            double t107047 = 1.0/t106976;
            double t107048 = 1.0/(t106974*t106974);
            double t107049 = 1.0/(t106979*t106979);
            double t107050 = 1.0/t106974;
            double t107051 = 1.0/(t106976*t106976);
            double t107052 = 1.0/t106979;
            double t107053 = 1.0/t106983;
            double t107055 = a1p*c*c0p*t106875*t106849*(2.0/3.0);
            double t107060 = t106874*t106992*t106986*t106987;
            double t107054 = -t107060-t107055+t106993+t106897;
            double t107056 = 1.0/pow(t106837,7.0/3.0);
            double t107057 = 1.0/pow(t106837,8.0/3.0);
            double t107061 = t106896*t106896;
            double t107062 = 1.0/pow(t106839,3.0/2.0);
            double t107063 = b4p*t107057*t106844*(1.0E1/9.0);
            double t107064 = b2p*c*t107056*(4.0/9.0);
            double t107065 = b1p*c*t107056*t106889*(2.0/9.0);
            double t107066 = b3p*c*t106840*t107056*(2.0/3.0);
            double t107067 = b3p*t107057*t106844*t106889*(1.0/1.2E1);
            double t107068 = t107063+t107064+t107065+t107066+t107067-b1p*t107062*t107057*t106844*(1.0/3.6E1);
            double t107069 = t107068*t106890*t106855*t106891;
            double t107070 = 1.0/(t106848*t106848*t106848);
            double t107071 = t106992*t106992;
            double t107072 = 1.0/(t106853*t106853);
            double t107073 = 1.0/(t106848*t106848*t106848*t106848);
            double t107074 = t107061*t107072*t107073*t106850*t106855*(1.0/2.0);
            double t107075 = t107060+t107055-t106993-t106897;
            double t107076 = 1.0/(t106837*t106837*t106837);
            double t107077 = a1p*c*t106890*t106891*t106849*t106896*(2.0/3.0);
            double t107078 = 1.0/(t106837*t106837*t106837*t106837*t106837*t106837);
            double t107079 = t106856*t106857*t106884*4.0;
            double t107080 = t107079+t106994;
            double t107081 = t107076*t106915*t106856*(8.0/3.0);
            double t107082 = 1.0/pow(t106877,2.0/3.0);
            double t107083 = t107082*t106883*t106985*(4.0/9.0);
            double t107084 = 1.0/pow(t106879,2.0/3.0);
            double t107085 = t107084*t106883*t106985*(4.0/9.0);
            double t107086 = t107081+t107083+t107085-t106912*t107076*t106856*(8.0/3.0);
            double t107087 = t107079-t106994;
            double t107088 = t107003*t107003;
            double t107089 = t106862*t106884*t106876*t106887*t106996;
            double t107090 = t106862*t106916*t106884*t106876*t106887;
            double t107091 = Aa*t107080*t106911*t106862*t106881*t106909*t106899*2.0;
            double t107092 = Aa*t106911*t106862*t106909*t106918*t106996*t106899*2.0;
            double t107093 = Aa*t106911*t106862*t106916*t106909*t106918*t106899*2.0;
            double t107094 = c0f*t106957*t106959*2.0;
            double t107096 = c0p*t106944*t106953*2.0;
            double t107095 = t107094-t107096;
            double t107097 = c0f*t107040*t107042*2.0;
            double t107099 = c0p*t107030*t107039*2.0;
            double t107098 = t107097-t107099;
            double t107100 = gamma_aa[index]*gcab*t107045*(8.0/3.0);
            double t107101 = gamma_aa[index]*t107045*t106960*t106961*(8.0/3.0);
            double t107102 = t107100+t107101;
            double t107103 = gamma_bb[index]*gcab*t106963*(8.0/3.0);
            double t107104 = gamma_bb[index]*t106960*t106961*t106963*(8.0/3.0);
            double t107105 = t107103+t107104;
            double t107106 = gamma_aa[index]*gcab*t107045*(1.6E1/3.0);
            double t107107 = gamma_aa[index]*gcab*t107045*t106960*t106962*1.6E1;
            double t107108 = gamma_aa[index]*t107045*t106961*t106962*t106968*(1.6E1/3.0);
            double t107109 = gamma_aa[index]*t107045*t106960*t106961*1.6E1;
            double t107110 = t107106+t107107+t107108+t107109;
            double t107111 = gamma_bb[index]*gcab*t106963*(1.6E1/3.0);
            double t107112 = gamma_bb[index]*gcab*t106960*t106962*t106963*1.6E1;
            double t107113 = gamma_bb[index]*t106961*t106962*t106963*t106968*(1.6E1/3.0);
            double t107114 = gamma_bb[index]*t106960*t106961*t106963*1.6E1;
            double t107115 = t107111+t107112+t107113+t107114;
            double t107116 = gamma_aa[index]*gcab*t107045*4.0;
            double t107117 = gamma_aa[index]*gcab*t107045*t106960*t106962*4.0;
            double t107118 = gamma_aa[index]*t107045*t106960*t106961*8.0;
            double t107119 = t107116+t107117+t107118;
            double t107120 = gamma_bb[index]*gcab*t106963*4.0;
            double t107121 = gamma_bb[index]*gcab*t106960*t106962*t106963*4.0;
            double t107122 = gamma_bb[index]*t106960*t106961*t106963*8.0;
            double t107123 = t107120+t107121+t107122;
            v_rho_a_rho_b_[index] = (t107043+t107044+t106886+rho_a[index]*(-t106952+t106862*t106956*(t106952- \
               (1.0/(t106928*t106928)*t106959*(b2f*c*t106929*(1.0/3.0)+b4f*t106844*t106935*(2.0/3.0)+b1f*c*t106936* \
               t106929*(1.0/6.0)+b3f*c*t106921*t106929*(1.0/2.0)))/t106939+a1f*c*c0f*t106929*t106957*(2.0/3.0)-a1p* \
               c*c0p*t106953*t106929*(2.0/3.0))+a1p*c*c0p*t106953*t106929*(2.0/3.0))+t106837*(t107004+t107090+t107093+ \
               t106984+t106897-a1p*c*c0p*t106875*t106849*(2.0/3.0)-t107054*t106862*t106881*t106884*t106887-t106862* \
               t106881*t106876*t106887*t106898*4.0-Aa*t106911*t106862*t106881*t106909*t106899*(t106994-t106856*t106857* \
               t106884*4.0)*2.0-Aa*a1a*c*t106862*t106881*t106909*t106918*t106849*t106899*(2.0/3.0))-c0p*t106944*t106953* \
               2.0-t107095*t106862*t106956)*(ccab1*gamma_bb[index]*gcab*t107047*t106963*(4.0/3.0)-ccab2*t107105*t107049* \
               t106960*t106962-ccab4*t107115*t107048*t106968*t106969-ccab1*gamma_bb[index]*t107051*t106960*t106961* \
               t106963*(4.0/3.0)+ccab2*gamma_bb[index]*t107052*t106960*t106961*t106963*(8.0/3.0)+ccab3*gamma_bb[index]* \
               gcab*t107053*t106960*t106962*t106963*4.0+ccab4*gamma_bb[index]*t107050*t106961*t106962*t106963*t106968* \
               (1.6E1/3.0)-ccab3*gcab*t107123*t107046*t106960*t106961*t106962)+(ccab0+ccab1*gcab*t107047*t106961+ \
               ccab2*t107052*t106960*t106962+ccab4*t107050*t106968*t106969+ccab3*gcab*t107053*t106960*t106961*t106962) \
               *(-t107090+t107091+t107092-t107093+t107089+t106837*(t107074+t107077+t107069-t107061*t107070*t106890* \
               t106855*2.0-a1p*c*c0p*t107056*t106875*(8.0/9.0)-t106862*t106881*t106884*t106887*(t107074+t107077+t107069- \
               t107061*t107070*t106890*t106855*2.0+t107071*t106874*1.0/(t106868*t106868*t106868)*t106986*2.0-t106874* \
               t106986*t106987*(b2f*c*t107056*(4.0/9.0)+b4f*t107057*t106844*(1.0E1/9.0)+b1f*c*t107056*t106889*(2.0/ \
               9.0)+b3f*c*t106840*t107056*(2.0/3.0)-b1f*t107062*t107057*t106844*(1.0/3.6E1)+b3f*t107057*t106844*t106889* \
               (1.0/1.2E1))-t107071*1.0/(t106871*t106871)*t106863*t106874*1.0/(t106868*t106868*t106868*t106868)*(1.0/ \
               2.0)+a1f*c*c0f*t107056*t106872*(8.0/9.0)-a1p*c*c0p*t107056*t106875*(8.0/9.0)-a1f*c*t106992*t106849* \
               t106986*t106987*(2.0/3.0))-t107075*t106862*t106916*t106884*t106887-t106862*t107078*t106881*t106876* \
               t106887*2.0E1+t107075*t106862*t106881*t106887*t106898*8.0+t106862*t106881*t106857*t106884*t106876* \
               1.2E1+t107086*t106862*t106884*t106876*t106887+t107075*t106862*t106884*t106887*t106996+t106862*t106916* \
               t106876*t106887*t106898*4.0-t106862*t106876*t106887*t106996*t106898*4.0+t106862*t106916*t106856*t106857* \
               t106884*t106876*4.0+t106862*t106856*t106857*t106884*t106876*t106996*4.0+Aa*t107080*t106911*t106862* \
               t106916*t106909*t106899*2.0+Aa*t106911*t107086*t106862*t106909*t106918*t106899*2.0+Aa*t106911*t106862* \
               t107087*t106909*t106996*t106899*2.0-Aa*t106911*t106862*t106881*t106909*t106899*(t107078*t106887*2.0E1- \
               t106857*t106884*1.2E1)*2.0+t107003*t107080*t106911*t106862*t106881*t106997*t106899*t106998-t107003* \
               t106911*t106862*t107087*t106881*t106997*t106899*t106998-t107003*t106911*t106862*t106916*t106918*t106997* \
               t106899*t106998+t107003*t106911*t106862*t106918*t106996*t106997*t106899*t106998-t106911*1.0/(t106905* \
               t106905*t106905)*t106862*t106881*t107088*t106918*t106997*t106899*2.0+t106911*t106862*t106881*t106918* \
               t106997*t106899*t106998*(b2a*c*t107056*(4.0/9.0)+b4a*t107057*t106844*(1.0E1/9.0)+b1a*c*t107056*t106889* \
               (2.0/9.0)+b3a*c*t106840*t107056*(2.0/3.0)-b1a*t107062*t107057*t106844*(1.0/3.6E1)+b3a*t107057*t106844* \
               t106889*(1.0/1.2E1))-Aa*a1a*c*t107080*t106862*t106881*t106909*t106849*t106899*(2.0/3.0)-Aa*a1a*c*t107056* \
               t106862*t106881*t106909*t106918*t106899*(8.0/9.0)+Aa*a1a*c*t106862*t107087*t106881*t106909*t106849* \
               t106899*(2.0/3.0)+Aa*a1a*c*t106862*t106916*t106909*t106918*t106849*t106899*(2.0/3.0)-Aa*a1a*c*t106862* \
               t106909*t106918*t106849*t106996*t106899*(2.0/3.0)+t106900*t106911*1.0/(t106905*t106905*t106905*t106905) \
               *t106862*t106881*1.0/(t106908*t106908)*t107088*t106918*t106899*(1.0/2.0)+a1a*c*t107003*t106862*t106881* \
               t106918*t106849*t106997*t106899*t106998*(2.0/3.0))-t106890*t106855*t106891*t106896*2.0+a1p*c*c0p*t106875* \
               t106849*(4.0/3.0)-t107075*t106862*t106881*t106884*t106887*2.0+t106862*t106881*t106876*t106887*t106898* \
               8.0-Aa*t106911*t106862*t107087*t106881*t106909*t106899*2.0-t107003*t106911*t106862*t106881*t106918* \
               t106997*t106899*t106998*2.0+Aa*a1a*c*t106862*t106881*t106909*t106918*t106849*t106899*(4.0/3.0))-(rho_a[index]* \
               (t107096+t107095*t106862*t106956)+rho_b[index]*(t107099+t106862*t107098*t106956)-t106837*(t107043+ \
               t107044+t106886))*(ccab4*t107048*t106968*t106969*(gamma_aa[index]*gamma_bb[index]*t107045*t106960* \
               t106963*(6.4E1/3.0)+gamma_aa[index]*gamma_bb[index]*t107045*t106962*t106963*t106968*(6.4E1/3.0)+gamma_aa[index]* \
               gamma_bb[index]*gcab*t107045*t106960*t106961*t106963*(1.28E2/3.0))-ccab2*t107102*t107105*t106960*t106962* \
               1.0/(t106979*t106979*t106979)*2.0-ccab4*t107110*t107115*1.0/(t106974*t106974*t106974)*t106968*t106969* \
               2.0+ccab3*gcab*t107046*t106960*t106961*t106962*(gamma_aa[index]*gamma_bb[index]*t107045*t106960*t106963* \
               (3.2E1/3.0)+gamma_aa[index]*gamma_bb[index]*gcab*t107045*t106960*t106961*t106963*(3.2E1/3.0))+ccab1* \
               gamma_aa[index]*gamma_bb[index]*t107051*t107045*t106960*t106963*(3.2E1/9.0)-ccab2*gamma_aa[index]* \
               gamma_bb[index]*t107052*t107045*t106960*t106963*(3.2E1/9.0)+ccab2*gamma_aa[index]*t107105*t107045* \
               t107049*t106960*t106961*(8.0/3.0)+ccab2*gamma_bb[index]*t107102*t107049*t106960*t106961*t106963*(8.0/ \
               3.0)-ccab3*gcab*t107123*t107119*t106960*t106961*t106962*1.0/(t106983*t106983*t106983)*2.0-ccab4*gamma_aa[index]* \
               gamma_bb[index]*t107050*t107045*t106962*t106963*t106968*(6.4E1/3.0)+ccab2*gamma_aa[index]*gamma_bb[index]* \
               t107045*t107049*t106962*t106963*t106968*(3.2E1/9.0)+ccab3*gamma_aa[index]*gcab*t107123*t107045*t107046* \
               t106960*t106962*4.0+ccab3*gamma_bb[index]*gcab*t107046*t107119*t106960*t106962*t106963*4.0+ccab4*gamma_aa[index]* \
               t107115*t107045*t107048*t106961*t106962*t106968*(1.6E1/3.0)+ccab4*gamma_bb[index]*t107110*t107048* \
               t106961*t106962*t106963*t106968*(1.6E1/3.0)-ccab3*gamma_aa[index]*gamma_bb[index]*gcab*t107053*t107045* \
               t106960*t106961*t106963*(3.2E1/3.0)-ccab1*gamma_aa[index]*gamma_bb[index]*gcab*t107045*t106960*t106961* \
               t106963*1.0/(t106976*t106976*t106976)*(3.2E1/9.0))+(t107043+t107044+t106886-t106837*(-t107004+t107055+ \
               t107091+t107092+t107089+t106984-t106897+t107054*t106862*t106881*t106884*t106887+t106862*t106881*t106876* \
               t106887*t106898*4.0+Aa*a1a*c*t106862*t106881*t106909*t106918*t106849*t106899*(2.0/3.0))+rho_b[index]* \
               (-t107038+t106862*t106956*(t107038-(1.0/(t107014*t107014)*t107042*(b2f*c*t107015*(1.0/3.0)+b4f*t107021* \
               t106844*(2.0/3.0)+b1f*c*t107022*t107015*(1.0/6.0)+b3f*c*t107015*t107007*(1.0/2.0)))/t107025+a1f*c* \
               c0f*t107040*t107015*(2.0/3.0)-a1p*c*c0p*t107015*t107039*(2.0/3.0))+a1p*c*c0p*t107015*t107039*(2.0/ \
               3.0))-c0p*t107030*t107039*2.0-t106862*t107098*t106956)*(ccab1*gamma_aa[index]*gcab*t107045*t107047* \
               (4.0/3.0)-ccab2*t107102*t107049*t106960*t106962-ccab4*t107110*t107048*t106968*t106969-ccab1*gamma_aa[index]* \
               t107051*t107045*t106960*t106961*(4.0/3.0)+ccab2*gamma_aa[index]*t107052*t107045*t106960*t106961*(8.0/ \
               3.0)+ccab3*gamma_aa[index]*gcab*t107053*t107045*t106960*t106962*4.0+ccab4*gamma_aa[index]*t107050* \
               t107045*t106961*t106962*t106968*(1.6E1/3.0)-ccab3*gcab*t107046*t107119*t106960*t106961*t106962);
        } else if (rho_a[index] > cutoff_) {
            v_rho_a_rho_b_[index] = 0.0;
        } else if (rho_b[index] > cutoff_) {
            v_rho_a_rho_b_[index] = 0.0;
        } else {
            v_rho_a_rho_b_[index] = 0.0;
        }

        //V_rho_b_rho_b
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t107125 = rho_a[index]+rho_b[index];
            double t107126 = 1.0/pow(t107125,1.0/3.0);
            double t107127 = c*t107126;
            double t107128 = sqrt(t107127);
            double t107129 = b1p*t107128;
            double t107130 = pow(t107127,3.0/2.0);
            double t107131 = b3p*t107130;
            double t107132 = c*c;
            double t107133 = 1.0/pow(t107125,2.0/3.0);
            double t107134 = b4p*t107132*t107133;
            double t107135 = b2p*c*t107126;
            double t107136 = t107131+t107134+t107135+t107129;
            double t107137 = 1.0/pow(t107125,4.0/3.0);
            double t107138 = 1.0/c0p;
            double t107139 = 1.0/t107136;
            double t107140 = t107138*t107139*(1.0/2.0);
            double t107141 = t107140+1.0;
            double t107142 = a1p*c*t107126;
            double t107143 = t107142+1.0;
            double t107144 = rho_a[index]-rho_b[index];
            double t107145 = t107144*t107144;
            double t107146 = 1.0/t107125;
            double t107147 = t107144*t107146;
            double t107148 = two_13*2.0;
            double t107149 = t107148-2.0;
            double t107150 = 1.0/t107149;
            double t107151 = 1.0/c0f;
            double t107152 = b1f*t107128;
            double t107153 = b3f*t107130;
            double t107154 = b4f*t107132*t107133;
            double t107155 = b2f*c*t107126;
            double t107156 = t107152+t107153+t107154+t107155;
            double t107157 = 1.0/t107156;
            double t107158 = t107151*t107157*(1.0/2.0);
            double t107159 = t107158+1.0;
            double t107160 = log(t107159);
            double t107161 = a1f*c*t107126;
            double t107162 = t107161+1.0;
            double t107163 = log(t107141);
            double t107174 = c0f*t107160*t107162*2.0;
            double t107175 = c0p*t107143*t107163*2.0;
            double t107164 = t107174-t107175;
            double t107165 = t107147+1.0;
            double t107166 = pow(t107165,4.0/3.0);
            double t107167 = -t107147+1.0;
            double t107168 = pow(t107167,4.0/3.0);
            double t107169 = t107166+t107168-2.0;
            double t107170 = 1.0/(t107125*t107125);
            double t107171 = t107170*t107144;
            double t107172 = t107171+t107146;
            double t107173 = 1.0/(t107125*t107125*t107125*t107125);
            double t107176 = t107145*t107145;
            double t107177 = 1.0/pow(t107125,5.0/3.0);
            double t107178 = 1.0/sqrt(t107127);
            double t107179 = 1.0/t107141;
            double t107180 = 1.0/(t107136*t107136);
            double t107181 = b4p*t107132*t107177*(2.0/3.0);
            double t107182 = b2p*c*t107137*(1.0/3.0);
            double t107183 = b1p*c*t107137*t107178*(1.0/6.0);
            double t107184 = b3p*c*t107128*t107137*(1.0/2.0);
            double t107185 = t107181+t107182+t107183+t107184;
            double t107186 = 1.0/(t107125*t107125*t107125*t107125*t107125);
            double t107187 = 1.0/d2fz0;
            double t107188 = 1.0/Aa;
            double t107189 = b1a*t107128;
            double t107190 = b3a*t107130;
            double t107191 = b4a*t107132*t107133;
            double t107192 = b2a*c*t107126;
            double t107193 = t107190+t107191+t107192+t107189;
            double t107194 = 1.0/t107193;
            double t107195 = t107194*t107188*(1.0/2.0);
            double t107196 = t107195+1.0;
            double t107197 = log(t107196);
            double t107198 = a1a*c*t107126;
            double t107199 = t107198+1.0;
            double t107200 = pow(t107165,1.0/3.0);
            double t107201 = t107200*t107172*(4.0/3.0);
            double t107202 = pow(t107167,1.0/3.0);
            double t107278 = t107202*t107172*(4.0/3.0);
            double t107203 = t107201-t107278;
            double t107204 = t107173*t107176;
            double t107205 = t107204-1.0;
            double t107206 = 1.0/pow(rho_b[index],1.0/3.0);
            double t107207 = c*t107206;
            double t107208 = sqrt(t107207);
            double t107209 = b1f*t107208;
            double t107210 = pow(t107207,3.0/2.0);
            double t107211 = b3f*t107210;
            double t107212 = 1.0/pow(rho_b[index],2.0/3.0);
            double t107213 = b4f*t107212*t107132;
            double t107214 = b2f*c*t107206;
            double t107215 = t107211+t107213+t107214+t107209;
            double t107216 = 1.0/pow(rho_b[index],4.0/3.0);
            double t107217 = b1p*t107208;
            double t107218 = b3p*t107210;
            double t107219 = b4p*t107212*t107132;
            double t107220 = b2p*c*t107206;
            double t107221 = t107220+t107217+t107218+t107219;
            double t107222 = 1.0/pow(rho_b[index],5.0/3.0);
            double t107223 = 1.0/sqrt(t107207);
            double t107224 = 1.0/t107215;
            double t107225 = t107151*t107224*(1.0/2.0);
            double t107226 = t107225+1.0;
            double t107227 = 1.0/t107221;
            double t107228 = t107227*t107138*(1.0/2.0);
            double t107229 = t107228+1.0;
            double t107230 = a1p*c*t107206;
            double t107231 = t107230+1.0;
            double t107232 = 1.0/t107229;
            double t107233 = 1.0/(t107221*t107221);
            double t107234 = b4p*t107132*t107222*(2.0/3.0);
            double t107235 = b2p*c*t107216*(1.0/3.0);
            double t107236 = b1p*c*t107223*t107216*(1.0/6.0);
            double t107237 = b3p*c*t107216*t107208*(1.0/2.0);
            double t107238 = t107234+t107235+t107236+t107237;
            double t107239 = t107231*t107232*t107233*t107238;
            double t107240 = log(t107229);
            double t107241 = pow(2.0,1.0/3.0);
            double t107242 = t107241*2.0;
            double t107243 = t107242-2.0;
            double t107244 = log(t107226);
            double t107245 = a1f*c*t107206;
            double t107246 = t107245+1.0;
            double t107247 = gcab*gcab;
            double t107251 = 1.0/pow(rho_a[index],8.0/3.0);
            double t107252 = gamma_aa[index]*t107251*(1.0/2.0);
            double t107253 = 1.0/pow(rho_b[index],8.0/3.0);
            double t107254 = gamma_bb[index]*t107253*(1.0/2.0);
            double t107248 = t107252+t107254;
            double t107249 = t107248*t107248;
            double t107250 = 1.0/pow(rho_b[index],1.1E1/3.0);
            double t107255 = t107247*t107247;
            double t107256 = t107249*t107249;
            double t107257 = t107247*t107249*6.0;
            double t107258 = gcab*t107247*t107248*t107249*4.0;
            double t107259 = t107255*t107256;
            double t107260 = gcab*t107248*4.0;
            double t107261 = t107260+t107257+t107258+t107259+1.0;
            double t107262 = gcab*t107248;
            double t107263 = t107262+1.0;
            double t107264 = t107247*t107249;
            double t107265 = gcab*t107248*2.0;
            double t107266 = t107264+t107265+1.0;
            double t107267 = t107247*t107249*3.0;
            double t107268 = gcab*t107247*t107248*t107249;
            double t107269 = gcab*t107248*3.0;
            double t107270 = t107267+t107268+t107269+1.0;
            double t107271 = a1p*c*c0p*t107163*t107137*(2.0/3.0);
            double t107272 = 1.0/t107266;
            double t107273 = 1.0/t107270;
            double t107274 = 1.0/t107263;
            double t107275 = 1.0/t107261;
            double t107276 = 1.0/pow(t107125,7.0/3.0);
            double t107277 = 1.0/pow(t107125,8.0/3.0);
            double t107279 = 1.0/t107159;
            double t107280 = 1.0/(t107156*t107156);
            double t107281 = b4f*t107132*t107177*(2.0/3.0);
            double t107282 = b2f*c*t107137*(1.0/3.0);
            double t107283 = b1f*c*t107137*t107178*(1.0/6.0);
            double t107284 = b3f*c*t107128*t107137*(1.0/2.0);
            double t107285 = t107281+t107282+t107283+t107284;
            double t107286 = t107162*t107280*t107285*t107279;
            double t107288 = t107143*t107180*t107185*t107179;
            double t107289 = a1f*c*c0f*t107160*t107137*(2.0/3.0);
            double t107287 = t107271+t107286-t107288-t107289;
            double t107290 = t107185*t107185;
            double t107291 = 1.0/pow(t107127,3.0/2.0);
            double t107292 = b4p*t107132*t107277*(1.0E1/9.0);
            double t107293 = b2p*c*t107276*(4.0/9.0);
            double t107294 = b1p*c*t107276*t107178*(2.0/9.0);
            double t107295 = b3p*c*t107128*t107276*(2.0/3.0);
            double t107296 = b3p*t107132*t107178*t107277*(1.0/1.2E1);
            double t107297 = t107292+t107293+t107294+t107295+t107296-b1p*t107132*t107291*t107277*(1.0/3.6E1);
            double t107298 = 1.0/(t107136*t107136*t107136);
            double t107299 = t107143*t107290*t107179*t107298*2.0;
            double t107300 = t107285*t107285;
            double t107301 = 1.0/(t107141*t107141);
            double t107302 = 1.0/(t107136*t107136*t107136*t107136);
            double t107303 = t107170*2.0;
            double t107304 = 1.0/(t107125*t107125*t107125);
            double t107305 = t107304*t107144*2.0;
            double t107306 = t107303+t107305;
            double t107307 = t107172*t107172;
            double t107308 = a1p*c*c0p*t107163*t107276*(8.0/9.0);
            double t107309 = 1.0/(t107125*t107125*t107125*t107125*t107125*t107125);
            double t107310 = t107144*t107145*t107173*4.0;
            double t107311 = t107176*t107186*4.0;
            double t107312 = t107310+t107311;
            double t107313 = t107200*t107306*(4.0/3.0);
            double t107314 = 1.0/pow(t107165,2.0/3.0);
            double t107315 = t107314*t107307*(4.0/9.0);
            double t107316 = 1.0/pow(t107167,2.0/3.0);
            double t107317 = t107307*t107316*(4.0/9.0);
            double t107318 = t107313+t107315+t107317-t107202*t107306*(4.0/3.0);
            double t107319 = 1.0/t107196;
            double t107320 = 1.0/(t107193*t107193);
            double t107321 = b4a*t107132*t107177*(2.0/3.0);
            double t107322 = b2a*c*t107137*(1.0/3.0);
            double t107323 = b1a*c*t107137*t107178*(1.0/6.0);
            double t107324 = b3a*c*t107128*t107137*(1.0/2.0);
            double t107325 = t107321+t107322+t107323+t107324;
            double t107326 = t107325*t107325;
            double t107327 = 1.0/t107226;
            double t107328 = b4f*t107132*t107222*(2.0/3.0);
            double t107329 = b2f*c*t107216*(1.0/3.0);
            double t107330 = b1f*c*t107223*t107216*(1.0/6.0);
            double t107331 = b3f*c*t107216*t107208*(1.0/2.0);
            double t107332 = t107330+t107331+t107328+t107329;
            double t107333 = 1.0/(t107215*t107215);
            double t107334 = 1.0/pow(rho_b[index],7.0/3.0);
            double t107335 = 1.0/pow(t107207,3.0/2.0);
            double t107336 = t107332*t107332;
            double t107337 = t107238*t107238;
            double t107338 = 1.0/(t107221*t107221*t107221);
            double t107339 = t107231*t107232*t107337*t107338*2.0;
            double t107340 = b4p*t107132*t107253*(1.0E1/9.0);
            double t107341 = b2p*c*t107334*(4.0/9.0);
            double t107342 = b3p*t107132*t107223*t107253*(1.0/1.2E1);
            double t107343 = b1p*c*t107223*t107334*(2.0/9.0);
            double t107344 = b3p*c*t107208*t107334*(2.0/3.0);
            double t107461 = b1p*t107132*t107253*t107335*(1.0/3.6E1);
            double t107345 = t107340+t107341+t107342+t107343+t107344-t107461;
            double t107346 = 1.0/(t107229*t107229);
            double t107347 = 1.0/(t107221*t107221*t107221*t107221);
            double t107348 = a1p*c*c0p*t107240*t107334*(8.0/9.0);
            double t107349 = a1f*c*c0f*t107216*t107244*(2.0/3.0);
            double t107350 = a1p*c*c0p*t107240*t107216*(2.0/3.0);
            double t107351 = t107332*t107333*t107246*t107327;
            double t107352 = t107350+t107351-t107239-t107349;
            double t107353 = gamma_bb[index]*gamma_bb[index];
            double t107354 = gcaa*gcaa;
            double t107355 = t107353*t107353;
            double t107356 = t107354*t107354;
            double t107357 = 1.0/pow(rho_b[index],3.2E1/3.0);
            double t107358 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
               rho_b[index]*rho_b[index]);
            double t107359 = 1.0/pow(rho_b[index],1.6E1/3.0);
            double t107360 = 1.0/pow(rho_a[index],1.0/3.0);
            double t107361 = c*t107360;
            double t107362 = sqrt(t107361);
            double t107363 = pow(t107361,3.0/2.0);
            double t107364 = 1.0/pow(rho_a[index],2.0/3.0);
            double t107365 = b1p*t107362;
            double t107366 = b3p*t107363;
            double t107367 = b4p*t107132*t107364;
            double t107368 = b2p*c*t107360;
            double t107369 = t107365+t107366+t107367+t107368;
            double t107370 = 1.0/t107369;
            double t107371 = t107370*t107138*(1.0/2.0);
            double t107372 = t107371+1.0;
            double t107373 = log(t107372);
            double t107374 = a1p*c*t107360;
            double t107375 = t107374+1.0;
            double t107376 = c0p*t107373*t107375*2.0;
            double t107377 = c0f*t107244*t107246*2.0;
            double t107379 = c0p*t107231*t107240*2.0;
            double t107378 = t107377-t107379;
            double t107380 = t107150*t107164*t107173*t107176*t107169;
            double t107381 = Aa*t107150*t107205*t107169*t107187*t107197*t107199*2.0;
            double t107382 = gamma_bb[index]*gcab*t107250*(1.6E1/3.0);
            double t107383 = gamma_bb[index]*gcab*t107250*t107247*t107249*1.6E1;
            double t107384 = gamma_bb[index]*t107250*t107255*t107248*t107249*(1.6E1/3.0);
            double t107385 = gamma_bb[index]*t107250*t107247*t107248*1.6E1;
            double t107386 = t107382+t107383+t107384+t107385;
            double t107387 = 1.0/(t107263*t107263);
            double t107388 = 1.0/pow(rho_b[index],2.2E1/3.0);
            double t107389 = gamma_bb[index]*gcab*t107250*(8.0/3.0);
            double t107390 = gamma_bb[index]*t107250*t107247*t107248*(8.0/3.0);
            double t107391 = t107390+t107389;
            double t107392 = 1.0/(t107270*t107270);
            double t107393 = 1.0/pow(rho_b[index],1.4E1/3.0);
            double t107394 = 1.0/(t107261*t107261);
            double t107395 = 1.0/(t107266*t107266);
            double t107396 = gamma_bb[index]*gcab*t107250*4.0;
            double t107397 = gamma_bb[index]*gcab*t107250*t107247*t107249*4.0;
            double t107398 = gamma_bb[index]*t107250*t107247*t107248*8.0;
            double t107399 = t107396+t107397+t107398;
            double t107400 = t107150*t107243*t107378;
            double t107401 = t107400+t107379;
            double t107402 = gamma_bb[index]*gcaa*t107253*4.0;
            double t107403 = gamma_bb[index]*gcaa*t107353*t107354*t107358*4.0;
            double t107404 = t107353*t107354*t107359*6.0;
            double t107405 = t107355*t107356*t107357;
            double t107406 = t107402+t107403+t107404+t107405+1.0;
            double t107407 = 1.0/t107406;
            double t107408 = gamma_bb[index]*gcaa*t107253;
            double t107409 = t107408+1.0;
            double t107410 = 1.0/t107409;
            double t107411 = gamma_bb[index]*gcaa*t107253*3.0;
            double t107412 = gamma_bb[index]*gcaa*t107353*t107354*t107358;
            double t107413 = t107353*t107354*t107359*3.0;
            double t107414 = t107411+t107412+t107413+1.0;
            double t107415 = 1.0/t107414;
            double t107416 = gamma_bb[index]*gcaa*t107253*2.0;
            double t107417 = t107353*t107354*t107359;
            double t107418 = t107416+t107417+1.0;
            double t107419 = 1.0/t107418;
            double t107420 = 1.0/pow(rho_b[index],1.9E1/3.0);
            double t107421 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
               rho_b[index]*rho_b[index]*rho_b[index]);
            double t107422 = 1.0/pow(rho_b[index],3.5E1/3.0);
            double t107423 = t107150*t107243*t107352;
            double t107424 = -t107350+t107423+t107239;
            double t107425 = ccaa4*t107422*t107407*t107355*t107356*(3.2E1/3.0);
            double t107426 = ccaa1*gamma_bb[index]*gcaa*t107410*t107250*(8.0/3.0);
            double t107427 = ccaa3*gamma_bb[index]*gcaa*t107421*t107415*t107353*t107354*8.0;
            double t107428 = ccaa2*t107420*t107353*t107354*t107419*(1.6E1/3.0);
            double t107429 = 1.0/(t107409*t107409);
            double t107430 = gamma_bb[index]*gcaa*t107250*8.0;
            double t107431 = gamma_bb[index]*gcaa*t107421*t107353*t107354*8.0;
            double t107432 = t107420*t107353*t107354*1.6E1;
            double t107433 = t107430+t107431+t107432;
            double t107434 = 1.0/(t107414*t107414);
            double t107435 = gamma_bb[index]*gcaa*t107250*(3.2E1/3.0);
            double t107436 = gamma_bb[index]*gcaa*t107421*t107353*t107354*3.2E1;
            double t107437 = t107420*t107353*t107354*3.2E1;
            double t107438 = t107422*t107355*t107356*(3.2E1/3.0);
            double t107439 = t107435+t107436+t107437+t107438;
            double t107440 = 1.0/(t107406*t107406);
            double t107441 = gamma_bb[index]*gcaa*t107250*(1.6E1/3.0);
            double t107442 = t107420*t107353*t107354*(1.6E1/3.0);
            double t107443 = t107441+t107442;
            double t107444 = 1.0/(t107418*t107418);
            double t107445 = t107425+t107426+t107427+t107428-ccaa1*t107420*t107353*t107354*t107429*(8.0/3.0)- \
               ccaa2*t107353*t107443*t107354*t107444*t107359-ccaa4*t107440*t107355*t107356*t107357*t107439-ccaa3* \
               gamma_bb[index]*gcaa*t107433*t107353*t107434*t107354*t107358;
            double t107446 = 1.0/pow(rho_b[index],1.0E1);
            double t107447 = 1.0/pow(rho_b[index],3.8E1/3.0);
            double t107448 = ccaa4*t107407*t107355*t107356*t107357;
            double t107449 = ccaa1*gamma_bb[index]*gcaa*t107410*t107253;
            double t107450 = ccaa3*gamma_bb[index]*gcaa*t107415*t107353*t107354*t107358;
            double t107451 = ccaa2*t107353*t107354*t107419*t107359;
            double t107452 = ccaa0+t107450+t107451+t107448+t107449;
            double t107453 = 1.0/(t107215*t107215*t107215);
            double t107454 = b4f*t107132*t107253*(1.0E1/9.0);
            double t107455 = b2f*c*t107334*(4.0/9.0);
            double t107456 = b3f*t107132*t107223*t107253*(1.0/1.2E1);
            double t107457 = b1f*c*t107223*t107334*(2.0/9.0);
            double t107458 = b3f*c*t107208*t107334*(2.0/3.0);
            double t107459 = t107454+t107455+t107456+t107457+t107458-b1f*t107132*t107253*t107335*(1.0/3.6E1);
            double t107460 = t107333*t107246*t107327*t107459;
            double t107462 = t107231*t107232*t107233*t107345;
            double t107463 = 1.0/(t107226*t107226);
            double t107464 = 1.0/(t107215*t107215*t107215*t107215);
            double t107465 = t107151*t107246*t107336*t107463*t107464*(1.0/2.0);
            double t107466 = t107231*t107138*t107337*t107346*t107347*(1.0/2.0);
            double t107467 = a1f*c*t107332*t107216*t107333*t107327*(2.0/3.0);
            double t107468 = a1p*c*t107232*t107233*t107216*t107238*(2.0/3.0);
            double t107469 = rho_b[index]*(8.334140006820045E15/1.40737488355328E14);
            double t107470 = omega*omega;
            double t107471 = 1.0/rho_b[index];
            double t107472 = omega*t107470*t107471*(7.0368744177664E13/8.334140006820045E15);
            double t107473 = 1.0/pow(t107469,1.0/3.0);
            double t107474 = gx*gx;
            double t107475 = t107474*t107474;
            double t107476 = gamma_bb[index]*gx*t107253;
            double t107477 = t107476+1.0;
            double t107497 = gamma_bb[index]*gx*t107250*(3.2E1/3.0);
            double t107498 = gamma_bb[index]*gx*t107421*t107353*t107474*3.2E1;
            double t107499 = t107420*t107353*t107474*3.2E1;
            double t107500 = t107422*t107355*t107475*(3.2E1/3.0);
            double t107478 = t107500+t107497+t107498+t107499;
            double t107479 = gamma_bb[index]*gx*t107253*4.0;
            double t107480 = gamma_bb[index]*gx*t107353*t107474*t107358*4.0;
            double t107481 = t107353*t107474*t107359*6.0;
            double t107482 = t107355*t107357*t107475;
            double t107483 = t107480+t107481+t107482+t107479+1.0;
            double t107502 = gamma_bb[index]*gx*t107250*(1.6E1/3.0);
            double t107503 = t107420*t107353*t107474*(1.6E1/3.0);
            double t107484 = t107502+t107503;
            double t107485 = gamma_bb[index]*gx*t107253*2.0;
            double t107486 = t107353*t107474*t107359;
            double t107487 = t107485+t107486+1.0;
            double t107488 = gamma_bb[index]*gx*t107253*3.0;
            double t107489 = gamma_bb[index]*gx*t107353*t107474*t107358;
            double t107490 = t107353*t107474*t107359*3.0;
            double t107491 = t107490+t107488+t107489+1.0;
            double t107492 = 1.0/(t107491*t107491);
            double t107493 = gamma_bb[index]*gx*t107250*8.0;
            double t107494 = gamma_bb[index]*gx*t107421*t107353*t107474*8.0;
            double t107495 = t107420*t107353*t107474*1.6E1;
            double t107496 = t107493+t107494+t107495;
            double t107501 = 1.0/(t107483*t107483);
            double t107504 = 1.0/(t107487*t107487);
            double t107505 = 1.0/(omega*omega);
            double t107506 = pow(t107469,2.0/3.0);
            double t107511 = t107505*t107506;
            double t107507 = exp(-t107511);
            double t107508 = 1.0/(rho_b[index]*rho_b[index]);
            double t107509 = 1.0/pow(t107469,4.0/3.0);
            double t107510 = 1.0/omega;
            double t107517 = omega*t107473;
            double t107512 = t107472-t107517;
            double t107513 = pow(t107469,1.0/3.0);
            double t107514 = t107510*t107513;
            double t107515 = erf(t107514);
            double t107516 = t107515*(3.991211251234741E15/2.251799813685248E15);
            double t107523 = t107512*t107507;
            double t107524 = omega*t107473*(3.0/2.0);
            double t107518 = -t107523-t107524+t107516+t107472;
            double t107519 = 1.0/t107483;
            double t107520 = 1.0/t107477;
            double t107521 = 1.0/t107491;
            double t107522 = 1.0/t107487;
            double t107525 = omega*t107473*t107518*(4.0/3.0);
            double t107526 = t107525-1.0;
            double t107527 = cx4*t107355*t107357*t107519*t107475;
            double t107528 = cx1*gamma_bb[index]*gx*t107520*t107253;
            double t107529 = cx3*gamma_bb[index]*gx*t107521*t107353*t107474*t107358;
            double t107530 = cx2*t107522*t107353*t107474*t107359;
            double t107531 = cx0+t107530+t107527+t107528+t107529;
            double t107532 = pow(rho_b[index],4.0/3.0);
            double t107533 = omega*t107509*(8.334140006820045E15/2.81474976710656E14);
            double t107534 = omega*t107509*(2.778046668940015E15/1.40737488355328E14);
            double t107550 = omega*t107470*t107508*(7.0368744177664E13/8.334140006820045E15);
            double t107535 = -t107550+t107534;
            double t107536 = 1.0/sqrt(3.141592653589793);
            double t107537 = 1.0/pow(t107469,2.0/3.0);
            double t107538 = t107510*t107507*t107536*t107537*(1.108777112152858E31/1.584563250285287E29);
            double t107539 = t107512*t107505*t107507*t107473*(2.778046668940015E15/7.0368744177664E13);
            double t107540 = t107533+t107538+t107539-t107507*t107535-omega*t107470*t107508*(7.0368744177664E13/ \
               8.334140006820045E15);
            double t107541 = omega*t107540*t107473*(4.0/3.0);
            double t107542 = t107541-omega*t107509*t107518*(2.778046668940015E15/1.05553116266496E14);
            double t107543 = 1.0/(t107477*t107477);
            double t107544 = pow(rho_b[index],1.0/3.0);
            double t107545 = cx4*t107422*t107355*t107519*t107475*(3.2E1/3.0);
            double t107546 = cx1*gamma_bb[index]*gx*t107250*t107520*(8.0/3.0);
            double t107547 = cx3*gamma_bb[index]*gx*t107421*t107521*t107353*t107474*8.0;
            double t107548 = cx2*t107420*t107522*t107353*t107474*(1.6E1/3.0);
            double t107549 = t107545+t107546+t107547+t107548-cx1*t107420*t107353*t107543*t107474*(8.0/3.0)-cx2* \
               t107504*t107353*t107474*t107484*t107359-cx4*t107501*t107355*t107357*t107475*t107478-cx3*gamma_bb[index]* \
               gx*t107353*t107474*t107492*t107358*t107496;
            double t107551 = 1.0/pow(t107469,7.0/3.0);
            double t107552 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]);
            double t107553 = t107550-t107534;
            v_rho_b_rho_b_[index] = (ccab0+ccab1*gcab*t107274*t107248+ccab2*t107272*t107247*t107249+ccab4*t107255* \
               t107256*t107275+ccab3*gcab*t107273*t107247*t107248*t107249)*(-rho_b[index]*(t107462-t107339-t107348+ \
               t107466+t107468+t107150*t107243*(t107460+t107339+t107348+t107465+t107467-t107231*t107232*t107233*t107345- \
               t107246*t107327*t107336*t107453*2.0-a1f*c*c0f*t107244*t107334*(8.0/9.0)-t107231*t107138*t107337*t107346* \
               t107347*(1.0/2.0)-a1p*c*t107232*t107233*t107216*t107238*(2.0/3.0)))-t107125*(t107308+t107299-t107143* \
               t107180*t107179*t107297-t107150*t107173*t107176*t107169*(t107308+t107299-t107143*t107180*t107179*t107297- \
               t107300*t107162*1.0/(t107156*t107156*t107156)*t107279*2.0+t107162*t107280*t107279*(b2f*c*t107276*(4.0/ \
               9.0)+b4f*t107132*t107277*(1.0E1/9.0)+b1f*c*t107276*t107178*(2.0/9.0)+b3f*c*t107128*t107276*(2.0/3.0) \
               -b1f*t107132*t107291*t107277*(1.0/3.6E1)+b3f*t107132*t107178*t107277*(1.0/1.2E1))+t107300*t107151* \
               t107162*1.0/(t107156*t107156*t107156*t107156)*1.0/(t107159*t107159)*(1.0/2.0)-a1f*c*c0f*t107160*t107276* \
               (8.0/9.0)-t107301*t107302*t107143*t107290*t107138*(1.0/2.0)+a1f*c*t107280*t107137*t107285*t107279* \
               (2.0/3.0)-a1p*c*t107180*t107137*t107185*t107179*(2.0/3.0))-t107301*t107302*t107143*t107290*t107138* \
               (1.0/2.0)+t107203*t107150*t107164*t107176*t107186*8.0-t107203*t107150*t107173*t107176*t107287*2.0+ \
               t107150*t107145*t107164*t107173*t107169*1.2E1+t107150*t107164*t107173*t107318*t107176+t107150*t107164* \
               t107309*t107176*t107169*2.0E1-t107150*t107176*t107186*t107169*t107287*8.0+t107203*t107150*t107144* \
               t107145*t107164*t107173*8.0+t107150*t107144*t107145*t107164*t107186*t107169*3.2E1-t107150*t107144* \
               t107145*t107173*t107169*t107287*8.0-a1p*c*t107180*t107137*t107185*t107179*(2.0/3.0)+Aa*t107203*t107150* \
               t107312*t107187*t107197*t107199*4.0+Aa*t107150*t107205*t107318*t107187*t107197*t107199*2.0+Aa*t107150* \
               t107169*t107187*t107197*t107199*(t107145*t107173*1.2E1+t107309*t107176*2.0E1+t107144*t107145*t107186* \
               3.2E1)*2.0-t107203*t107320*t107150*t107205*t107325*t107319*t107187*t107199*2.0-t107320*t107150*t107312* \
               t107325*t107319*t107169*t107187*t107199*2.0+t107150*t107205*t107326*1.0/(t107193*t107193*t107193)* \
               t107319*t107169*t107187*t107199*2.0-t107320*t107150*t107205*t107319*t107169*t107187*t107199*(b2a*c* \
               t107276*(4.0/9.0)+b4a*t107132*t107277*(1.0E1/9.0)+b1a*c*t107276*t107178*(2.0/9.0)+b3a*c*t107128*t107276* \
               (2.0/3.0)-b1a*t107132*t107291*t107277*(1.0/3.6E1)+b3a*t107132*t107178*t107277*(1.0/1.2E1))+Aa*a1a* \
               c*t107203*t107150*t107205*t107137*t107187*t107197*(4.0/3.0)+Aa*a1a*c*t107150*t107312*t107137*t107169* \
               t107187*t107197*(4.0/3.0)+Aa*a1a*c*t107150*t107205*t107276*t107169*t107187*t107197*(8.0/9.0)-t107150* \
               t107205*t107326*1.0/(t107193*t107193*t107193*t107193)*t107169*t107187*1.0/(t107196*t107196)*t107188* \
               t107199*(1.0/2.0)-a1a*c*t107320*t107150*t107205*t107325*t107137*t107319*t107169*t107187*(2.0/3.0)) \
               +t107150*t107243*t107352*2.0+t107231*t107232*t107233*t107238*2.0-t107143*t107180*t107185*t107179*2.0- \
               a1p*c*c0p*t107240*t107216*(4.0/3.0)+a1p*c*c0p*t107163*t107137*(4.0/3.0)+t107203*t107150*t107164*t107173* \
               t107176*2.0+t107150*t107164*t107176*t107186*t107169*8.0-t107150*t107173*t107176*t107169*t107287*2.0+ \
               t107150*t107144*t107145*t107164*t107173*t107169*8.0+Aa*t107203*t107150*t107205*t107187*t107197*t107199* \
               4.0+Aa*t107150*t107312*t107169*t107187*t107197*t107199*4.0-t107320*t107150*t107205*t107325*t107319* \
               t107169*t107187*t107199*2.0+Aa*a1a*c*t107150*t107205*t107137*t107169*t107187*t107197*(4.0/3.0))+(rho_b[index]* \
               t107401+rho_a[index]*(t107376-t107150*t107243*(t107376-c0f*log((t107151*(1.0/2.0))/(b1f*t107362+b3f* \
               t107363+b2f*c*t107360+b4f*t107132*t107364)+1.0)*(a1f*c*t107360+1.0)*2.0))-t107125*(t107380+t107381+ \
               t107175))*(-ccab2*t107247*t107249*t107395*(gamma_bb[index]*gcab*t107393*(8.8E1/9.0)+t107353*t107247* \
               t107388*(3.2E1/9.0)+gamma_bb[index]*t107247*t107248*t107393*(8.8E1/9.0))+ccab4*1.0/(t107261*t107261* \
               t107261)*t107255*t107256*(t107386*t107386)*2.0+ccab2*t107247*(t107391*t107391)*1.0/(t107266*t107266* \
               t107266)*t107249*2.0+ccab1*gamma_bb[index]*gcab*t107274*t107393*(4.4E1/9.0)+ccab2*t107272*t107353* \
               t107247*t107388*(3.2E1/9.0)-ccab1*t107353*t107247*t107387*t107388*(3.2E1/9.0)-ccab4*t107255*t107256* \
               t107394*(gamma_bb[index]*gcab*t107393*(1.76E2/9.0)+t107353*t107247*t107388*(6.4E1/3.0)+gamma_bb[index]* \
               t107247*t107248*t107393*(1.76E2/3.0)+t107353*t107255*t107249*t107388*(6.4E1/3.0)+gamma_bb[index]*gcab* \
               t107247*t107249*t107393*(1.76E2/3.0)+gamma_bb[index]*t107255*t107248*t107249*t107393*(1.76E2/9.0)+ \
               gcab*t107353*t107247*t107248*t107388*(1.28E2/3.0))+ccab4*t107353*t107255*t107275*t107249*t107388*(6.4E1/ \
               3.0)+ccab2*gamma_bb[index]*t107272*t107247*t107248*t107393*(8.8E1/9.0)-ccab1*gamma_bb[index]*t107247* \
               t107248*t107393*t107387*(4.4E1/9.0)+ccab3*gcab*1.0/(t107270*t107270*t107270)*t107247*t107248*t107249* \
               (t107399*t107399)*2.0+ccab3*gamma_bb[index]*gcab*t107273*t107247*t107249*t107393*(4.4E1/3.0)-ccab2* \
               gamma_bb[index]*t107250*t107247*t107391*t107248*t107395*(1.6E1/3.0)+ccab4*gamma_bb[index]*t107255* \
               t107248*t107275*t107249*t107393*(1.76E2/9.0)+ccab3*gcab*t107353*t107273*t107247*t107248*t107388*(3.2E1/ \
               3.0)+ccab1*gcab*1.0/(t107263*t107263*t107263)*t107353*t107247*t107248*t107388*(3.2E1/9.0)-ccab3*gcab* \
               t107247*t107248*t107392*t107249*(gamma_bb[index]*gcab*t107393*(4.4E1/3.0)+t107353*t107247*t107388* \
               (3.2E1/3.0)+gamma_bb[index]*t107247*t107248*t107393*(8.8E1/3.0)+gamma_bb[index]*gcab*t107247*t107249* \
               t107393*(4.4E1/3.0)+gcab*t107353*t107247*t107248*t107388*(3.2E1/3.0))-ccab3*gamma_bb[index]*gcab*t107250* \
               t107247*t107392*t107249*t107399*8.0-ccab4*gamma_bb[index]*t107250*t107255*t107248*t107249*t107394* \
               t107386*(3.2E1/3.0))+(t107380+t107381+t107175+rho_b[index]*(t107350-t107239+t107150*t107243*(t107239+ \
               t107349-t107332*t107333*t107246*t107327-a1p*c*c0p*t107240*t107216*(2.0/3.0)))-t107125*(t107271-t107143* \
               t107180*t107185*t107179+t107203*t107150*t107164*t107173*t107176+t107150*t107164*t107176*t107186*t107169* \
               4.0-t107150*t107173*t107176*t107169*t107287+t107150*t107144*t107145*t107164*t107173*t107169*4.0+Aa* \
               t107203*t107150*t107205*t107187*t107197*t107199*2.0+Aa*t107150*t107312*t107169*t107187*t107197*t107199* \
               2.0-t107320*t107150*t107205*t107325*t107319*t107169*t107187*t107199+Aa*a1a*c*t107150*t107205*t107137* \
               t107169*t107187*t107197*(2.0/3.0))-c0p*t107231*t107240*2.0-t107150*t107243*t107378)*(ccab1*gamma_bb[index]* \
               gcab*t107250*t107274*(4.0/3.0)-ccab2*t107247*t107391*t107249*t107395-ccab4*t107255*t107256*t107394* \
               t107386+ccab2*gamma_bb[index]*t107250*t107272*t107247*t107248*(8.0/3.0)-ccab1*gamma_bb[index]*t107250* \
               t107247*t107248*t107387*(4.0/3.0)+ccab3*gamma_bb[index]*gcab*t107250*t107273*t107247*t107249*4.0+ccab4* \
               gamma_bb[index]*t107250*t107255*t107248*t107275*t107249*(1.6E1/3.0)-ccab3*gcab*t107247*t107248*t107392* \
               t107249*t107399)*2.0+t107401*t107445*2.0-t107424*t107452*2.0-rho_b[index]*t107401*(ccaa1*gamma_bb[index]* \
               gcaa*t107410*t107393*(8.8E1/9.0)+ccaa4*t107407*t107355*t107356*t107447*(1.12E3/9.0)-ccaa1*t107353* \
               t107354*t107429*t107388*2.4E1+ccaa2*t107353*t107354*t107419*t107388*(3.04E2/9.0)-ccaa2*t107420*t107353* \
               t107443*t107354*t107444*(3.2E1/3.0)-ccaa4*t107422*t107440*t107355*t107356*t107439*(6.4E1/3.0)-ccaa2* \
               t107353*t107354*t107444*t107359*(gamma_bb[index]*gcaa*t107393*(1.76E2/9.0)+t107353*t107354*t107388* \
               (3.04E2/9.0))-ccaa4*t107440*t107355*t107356*t107357*(gamma_bb[index]*gcaa*t107393*(3.52E2/9.0)+t107353* \
               t107354*t107388*(6.08E2/3.0)+t107355*t107356*t107447*(1.12E3/9.0)+gamma_bb[index]*gcaa*t107353*t107354* \
               t107446*2.88E2)+ccaa2*t107353*(t107443*t107443)*t107354*1.0/(t107418*t107418*t107418)*t107359*2.0+ \
               ccaa4*1.0/(t107406*t107406*t107406)*t107355*t107356*t107357*(t107439*t107439)*2.0+ccaa3*gamma_bb[index]* \
               gcaa*t107415*t107353*t107354*t107446*7.2E1+ccaa1*gamma_bb[index]*gcaa*t107353*t107354*1.0/(t107409* \
               t107409*t107409)*t107446*(1.28E2/9.0)+ccaa3*gamma_bb[index]*gcaa*1.0/(t107414*t107414*t107414)*(t107433* \
               t107433)*t107353*t107354*t107358*2.0-ccaa3*gamma_bb[index]*gcaa*t107353*t107434*t107354*t107358*(gamma_bb[index]* \
               gcaa*t107393*(8.8E1/3.0)+t107353*t107354*t107388*(3.04E2/3.0)+gamma_bb[index]*gcaa*t107353*t107354* \
               t107446*7.2E1)-ccaa3*gamma_bb[index]*gcaa*t107421*t107433*t107353*t107434*t107354*1.6E1)+rho_b[index]* \
               t107452*(t107462-t107339-t107348+t107466+t107468+t107150*t107243*(t107460-t107462+t107339+t107348+ \
               t107465-t107466+t107467-t107468-t107246*t107327*t107336*t107453*2.0-a1f*c*c0f*t107244*t107334*(8.0/ \
               9.0)))+rho_b[index]*t107424*t107445*2.0-c0*t107532*t107526*(cx1*gamma_bb[index]*gx*t107520*t107393* \
               (8.8E1/9.0)-cx1*t107353*t107543*t107474*t107388*2.4E1+cx2*t107522*t107353*t107474*t107388*(3.04E2/ \
               9.0)+cx4*t107355*t107447*t107519*t107475*(1.12E3/9.0)-cx2*t107420*t107504*t107353*t107474*t107484* \
               (3.2E1/3.0)-cx4*t107501*t107422*t107355*t107475*t107478*(6.4E1/3.0)-cx2*t107504*t107353*t107474*t107359* \
               (gamma_bb[index]*gx*t107393*(1.76E2/9.0)+t107353*t107474*t107388*(3.04E2/9.0))-cx4*t107501*t107355* \
               t107357*t107475*(gamma_bb[index]*gx*t107393*(3.52E2/9.0)+t107355*t107447*t107475*(1.12E3/9.0)+t107353* \
               t107474*t107388*(6.08E2/3.0)+gamma_bb[index]*gx*t107353*t107446*t107474*2.88E2)+cx2*t107353*t107474* \
               (t107484*t107484)*t107359*1.0/(t107487*t107487*t107487)*2.0+cx4*t107355*t107357*1.0/(t107483*t107483* \
               t107483)*t107475*(t107478*t107478)*2.0+cx3*gamma_bb[index]*gx*t107521*t107353*t107446*t107474*7.2E1+ \
               cx1*gamma_bb[index]*gx*t107353*t107446*t107474*1.0/(t107477*t107477*t107477)*(1.28E2/9.0)+cx3*gamma_bb[index]* \
               gx*t107353*1.0/(t107491*t107491*t107491)*t107474*t107358*(t107496*t107496)*2.0-cx3*gamma_bb[index]* \
               gx*t107353*t107474*t107492*t107358*(gamma_bb[index]*gx*t107393*(8.8E1/3.0)+t107353*t107474*t107388* \
               (3.04E2/3.0)+gamma_bb[index]*gx*t107353*t107446*t107474*7.2E1)-cx3*gamma_bb[index]*gx*t107421*t107353* \
               t107474*t107492*t107496*1.6E1)+c0*t107531*t107532*(omega*t107509*(-t107550+t107533+t107538+t107539+ \
               t107507*t107553)*(2.778046668940015E15/5.2776558133248E13)+omega*t107473*(omega*t107551*(2.315262988442614E31/ \
               9.903520314283042E27)-t107507*(omega*t107551*(7.717543294808713E30/4.951760157141521E27)-omega*t107470* \
               t107552*(1.40737488355328E14/8.334140006820045E15))-omega*t107470*t107552*(1.40737488355328E14/8.334140006820045E15) \
               +t107512*t107505*t107507*t107509*(7.717543294808713E30/9.903520314283042E27)+t107505*t107507*t107553* \
               t107473*(2.778046668940015E15/3.5184372088832E13)+1.0/(omega*omega*omega*omega)*t107512*t107507*t107537* \
               (7.717543294808713E30/4.951760157141521E27)+1.0/(omega*omega*omega)*t107471*t107507*t107536*(1.108777112152858E31/ \
               2.37684487542793E29)+t107510*t107507*t107536*1.0/pow(t107469,5.0/3.0)*(3.080234563013177E46/1.115037259926531E43) \
               )*(4.0/3.0)-omega*t107551*t107518*(7.717543294808713E30/3.713820117856141E27))-c0*t107212*t107531* \
               t107526*(4.0/9.0)-c0*t107531*t107542*t107544*(8.0/3.0)+c0*t107532*t107542*t107549*2.0+c0*t107526*t107544* \
               t107549*(8.0/3.0);
        } else if (rho_a[index] > cutoff_) {
            v_rho_b_rho_b_[index] = 0.0;
        } else if (rho_b[index] > cutoff_) {
            double t109425 = 1.0/pow(rho_b[index],1.0/3.0);
            double t109426 = c*t109425;
            double t109427 = sqrt(t109426);
            double t109428 = b1f*t109427;
            double t109429 = pow(t109426,3.0/2.0);
            double t109430 = b3f*t109429;
            double t109431 = c*c;
            double t109432 = 1.0/pow(rho_b[index],2.0/3.0);
            double t109433 = b4f*t109431*t109432;
            double t109434 = b2f*c*t109425;
            double t109435 = t109430+t109433+t109434+t109428;
            double t109436 = 1.0/pow(rho_b[index],4.0/3.0);
            double t109437 = b1p*t109427;
            double t109438 = b3p*t109429;
            double t109439 = b4p*t109431*t109432;
            double t109440 = b2p*c*t109425;
            double t109441 = t109440+t109437+t109438+t109439;
            double t109442 = 1.0/pow(rho_b[index],5.0/3.0);
            double t109443 = 1.0/sqrt(t109426);
            double t109444 = 1.0/c0f;
            double t109445 = 1.0/t109435;
            double t109446 = t109444*t109445*(1.0/2.0);
            double t109447 = t109446+1.0;
            double t109448 = 1.0/c0p;
            double t109449 = 1.0/t109441;
            double t109450 = t109448*t109449*(1.0/2.0);
            double t109451 = t109450+1.0;
            double t109452 = a1p*c*t109425;
            double t109453 = t109452+1.0;
            double t109454 = 1.0/t109451;
            double t109455 = 1.0/(t109441*t109441);
            double t109456 = b4p*t109431*t109442*(2.0/3.0);
            double t109457 = b2p*c*t109436*(1.0/3.0);
            double t109458 = b1p*c*t109443*t109436*(1.0/6.0);
            double t109459 = b3p*c*t109427*t109436*(1.0/2.0);
            double t109460 = t109456+t109457+t109458+t109459;
            double t109461 = t109460*t109453*t109454*t109455;
            double t109462 = log(t109451);
            double t109463 = gamma_bb[index]*gamma_bb[index];
            double t109464 = gcaa*gcaa;
            double t109465 = t109463*t109463;
            double t109466 = t109464*t109464;
            double t109467 = 1.0/pow(rho_b[index],3.2E1/3.0);
            double t109468 = 1.0/pow(rho_b[index],8.0/3.0);
            double t109469 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
               rho_b[index]*rho_b[index]);
            double t109470 = 1.0/pow(rho_b[index],1.6E1/3.0);
            double t109471 = pow(2.0,1.0/3.0);
            double t109472 = t109471*2.0;
            double t109473 = t109472-2.0;
            double t109474 = two_13*2.0;
            double t109475 = t109474-2.0;
            double t109476 = 1.0/t109475;
            double t109477 = log(t109447);
            double t109478 = a1f*c*t109425;
            double t109479 = t109478+1.0;
            double t109480 = gamma_bb[index]*gcaa*t109468*4.0;
            double t109481 = gamma_bb[index]*gcaa*t109463*t109464*t109469*4.0;
            double t109482 = t109470*t109463*t109464*6.0;
            double t109483 = t109465*t109466*t109467;
            double t109484 = t109480+t109481+t109482+t109483+1.0;
            double t109485 = 1.0/t109484;
            double t109486 = gamma_bb[index]*gcaa*t109468;
            double t109487 = t109486+1.0;
            double t109488 = 1.0/t109487;
            double t109489 = gamma_bb[index]*gcaa*t109468*3.0;
            double t109490 = gamma_bb[index]*gcaa*t109463*t109464*t109469;
            double t109491 = t109470*t109463*t109464*3.0;
            double t109492 = t109490+t109491+t109489+1.0;
            double t109493 = 1.0/t109492;
            double t109494 = gamma_bb[index]*gcaa*t109468*2.0;
            double t109495 = t109470*t109463*t109464;
            double t109496 = t109494+t109495+1.0;
            double t109497 = 1.0/t109496;
            double t109498 = 1.0/pow(rho_b[index],1.9E1/3.0);
            double t109499 = 1.0/pow(rho_b[index],1.1E1/3.0);
            double t109500 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
               rho_b[index]*rho_b[index]*rho_b[index]);
            double t109501 = 1.0/pow(rho_b[index],3.5E1/3.0);
            double t109502 = 1.0/t109447;
            double t109503 = 1.0/(t109435*t109435);
            double t109504 = b4f*t109431*t109442*(2.0/3.0);
            double t109505 = b2f*c*t109436*(1.0/3.0);
            double t109506 = b1f*c*t109443*t109436*(1.0/6.0);
            double t109507 = b3f*c*t109427*t109436*(1.0/2.0);
            double t109508 = t109504+t109505+t109506+t109507;
            double t109509 = a1f*c*c0f*t109436*t109477*(2.0/3.0);
            double t109510 = a1p*c*c0p*t109462*t109436*(2.0/3.0);
            double t109511 = ccaa4*t109501*t109465*t109466*t109485*(3.2E1/3.0);
            double t109512 = ccaa1*gamma_bb[index]*gcaa*t109488*t109499*(8.0/3.0);
            double t109513 = ccaa3*gamma_bb[index]*gcaa*t109500*t109463*t109464*t109493*8.0;
            double t109514 = ccaa2*t109463*t109464*t109497*t109498*(1.6E1/3.0);
            double t109515 = 1.0/(t109487*t109487);
            double t109516 = gamma_bb[index]*gcaa*t109499*8.0;
            double t109517 = gamma_bb[index]*gcaa*t109500*t109463*t109464*8.0;
            double t109518 = t109463*t109464*t109498*1.6E1;
            double t109519 = t109516+t109517+t109518;
            double t109520 = 1.0/(t109492*t109492);
            double t109521 = gamma_bb[index]*gcaa*t109499*(3.2E1/3.0);
            double t109522 = gamma_bb[index]*gcaa*t109500*t109463*t109464*3.2E1;
            double t109523 = t109463*t109464*t109498*3.2E1;
            double t109524 = t109501*t109465*t109466*(3.2E1/3.0);
            double t109525 = t109521+t109522+t109523+t109524;
            double t109526 = 1.0/(t109484*t109484);
            double t109527 = gamma_bb[index]*gcaa*t109499*(1.6E1/3.0);
            double t109528 = t109463*t109464*t109498*(1.6E1/3.0);
            double t109529 = t109527+t109528;
            double t109530 = 1.0/(t109496*t109496);
            double t109531 = t109511+t109512+t109513+t109514-ccaa1*t109515*t109463*t109464*t109498*(8.0/3.0)- \
               ccaa2*t109530*t109470*t109463*t109464*t109529-ccaa4*t109525*t109526*t109465*t109466*t109467-ccaa3* \
               gamma_bb[index]*gcaa*t109520*t109463*t109464*t109519*t109469;
            double t109532 = c0f*t109477*t109479*2.0;
            double t109533 = c0p*t109453*t109462*2.0;
            double t109534 = 1.0/pow(rho_b[index],1.0E1);
            double t109535 = 1.0/pow(rho_b[index],2.2E1/3.0);
            double t109536 = 1.0/pow(rho_b[index],1.4E1/3.0);
            double t109537 = 1.0/pow(rho_b[index],3.8E1/3.0);
            double t109538 = ccaa4*t109465*t109466*t109467*t109485;
            double t109539 = ccaa1*gamma_bb[index]*gcaa*t109468*t109488;
            double t109540 = ccaa3*gamma_bb[index]*gcaa*t109463*t109464*t109493*t109469;
            double t109541 = ccaa2*t109470*t109463*t109464*t109497;
            double t109542 = ccaa0+t109540+t109541+t109538+t109539;
            double t109543 = 1.0/pow(rho_b[index],7.0/3.0);
            double t109544 = 1.0/pow(t109426,3.0/2.0);
            double t109545 = t109508*t109508;
            double t109546 = t109460*t109460;
            double t109547 = 1.0/(t109441*t109441*t109441);
            double t109548 = t109453*t109454*t109546*t109547*2.0;
            double t109549 = b4p*t109431*t109468*(1.0E1/9.0);
            double t109550 = b2p*c*t109543*(4.0/9.0);
            double t109551 = b3p*t109431*t109443*t109468*(1.0/1.2E1);
            double t109552 = b1p*c*t109443*t109543*(2.0/9.0);
            double t109553 = b3p*c*t109543*t109427*(2.0/3.0);
            double t109554 = t109550+t109551+t109552+t109553+t109549-b1p*t109431*t109544*t109468*(1.0/3.6E1);
            double t109555 = 1.0/(t109451*t109451);
            double t109556 = 1.0/(t109441*t109441*t109441*t109441);
            double t109557 = a1p*c*c0p*t109462*t109543*(8.0/9.0);
            double t109558 = rho_b[index]*(8.334140006820045E15/1.40737488355328E14);
            double t109559 = omega*omega;
            double t109560 = 1.0/rho_b[index];
            double t109561 = omega*t109560*t109559*(7.0368744177664E13/8.334140006820045E15);
            double t109562 = 1.0/pow(t109558,1.0/3.0);
            double t109563 = gx*gx;
            double t109564 = t109563*t109563;
            double t109565 = gamma_bb[index]*gx*t109468;
            double t109566 = t109565+1.0;
            double t109586 = gamma_bb[index]*gx*t109499*(3.2E1/3.0);
            double t109587 = gamma_bb[index]*gx*t109500*t109463*t109563*3.2E1;
            double t109588 = t109463*t109563*t109498*3.2E1;
            double t109589 = t109501*t109465*t109564*(3.2E1/3.0);
            double t109567 = t109586+t109587+t109588+t109589;
            double t109568 = gamma_bb[index]*gx*t109468*4.0;
            double t109569 = gamma_bb[index]*gx*t109463*t109563*t109469*4.0;
            double t109570 = t109470*t109463*t109563*6.0;
            double t109571 = t109465*t109564*t109467;
            double t109572 = t109570+t109571+t109568+t109569+1.0;
            double t109591 = gamma_bb[index]*gx*t109499*(1.6E1/3.0);
            double t109592 = t109463*t109563*t109498*(1.6E1/3.0);
            double t109573 = t109591+t109592;
            double t109574 = gamma_bb[index]*gx*t109468*2.0;
            double t109575 = t109470*t109463*t109563;
            double t109576 = t109574+t109575+1.0;
            double t109577 = gamma_bb[index]*gx*t109468*3.0;
            double t109578 = gamma_bb[index]*gx*t109463*t109563*t109469;
            double t109579 = t109470*t109463*t109563*3.0;
            double t109580 = t109577+t109578+t109579+1.0;
            double t109581 = 1.0/(t109580*t109580);
            double t109582 = gamma_bb[index]*gx*t109499*8.0;
            double t109583 = gamma_bb[index]*gx*t109500*t109463*t109563*8.0;
            double t109584 = t109463*t109563*t109498*1.6E1;
            double t109585 = t109582+t109583+t109584;
            double t109590 = 1.0/(t109572*t109572);
            double t109593 = 1.0/(t109576*t109576);
            double t109594 = 1.0/(omega*omega);
            double t109595 = pow(t109558,2.0/3.0);
            double t109600 = t109594*t109595;
            double t109596 = exp(-t109600);
            double t109597 = 1.0/(rho_b[index]*rho_b[index]);
            double t109598 = 1.0/pow(t109558,4.0/3.0);
            double t109599 = 1.0/omega;
            double t109606 = omega*t109562;
            double t109601 = t109561-t109606;
            double t109602 = pow(t109558,1.0/3.0);
            double t109603 = t109602*t109599;
            double t109604 = erf(t109603);
            double t109605 = t109604*(3.991211251234741E15/2.251799813685248E15);
            double t109612 = t109601*t109596;
            double t109613 = omega*t109562*(3.0/2.0);
            double t109607 = -t109612-t109613+t109605+t109561;
            double t109608 = 1.0/t109572;
            double t109609 = 1.0/t109566;
            double t109610 = 1.0/t109580;
            double t109611 = 1.0/t109576;
            double t109614 = omega*t109562*t109607*(4.0/3.0);
            double t109615 = t109614-1.0;
            double t109616 = cx4*t109608*t109465*t109564*t109467;
            double t109617 = cx1*gamma_bb[index]*gx*t109609*t109468;
            double t109618 = cx3*gamma_bb[index]*gx*t109610*t109463*t109563*t109469;
            double t109619 = cx2*t109611*t109470*t109463*t109563;
            double t109620 = cx0+t109616+t109617+t109618+t109619;
            double t109621 = pow(rho_b[index],4.0/3.0);
            double t109622 = omega*t109598*(8.334140006820045E15/2.81474976710656E14);
            double t109623 = omega*t109598*(2.778046668940015E15/1.40737488355328E14);
            double t109639 = omega*t109559*t109597*(7.0368744177664E13/8.334140006820045E15);
            double t109624 = t109623-t109639;
            double t109625 = 1.0/sqrt(3.141592653589793);
            double t109626 = 1.0/pow(t109558,2.0/3.0);
            double t109627 = t109625*t109626*t109596*t109599*(1.108777112152858E31/1.584563250285287E29);
            double t109628 = t109601*t109562*t109594*t109596*(2.778046668940015E15/7.0368744177664E13);
            double t109640 = t109624*t109596;
            double t109629 = t109622-t109640+t109627+t109628-omega*t109559*t109597*(7.0368744177664E13/8.334140006820045E15) \
               ;
            double t109630 = omega*t109562*t109629*(4.0/3.0);
            double t109631 = t109630-omega*t109607*t109598*(2.778046668940015E15/1.05553116266496E14);
            double t109632 = 1.0/(t109566*t109566);
            double t109633 = pow(rho_b[index],1.0/3.0);
            double t109634 = cx4*t109501*t109608*t109465*t109564*(3.2E1/3.0);
            double t109635 = cx1*gamma_bb[index]*gx*t109609*t109499*(8.0/3.0);
            double t109636 = cx3*gamma_bb[index]*gx*t109500*t109610*t109463*t109563*8.0;
            double t109637 = cx2*t109611*t109463*t109563*t109498*(1.6E1/3.0);
            double t109638 = t109634+t109635+t109636+t109637-cx1*t109632*t109463*t109563*t109498*(8.0/3.0)-cx2* \
               t109470*t109463*t109563*t109573*t109593-cx4*t109590*t109465*t109564*t109467*t109567-cx3*gamma_bb[index]* \
               gx*t109463*t109563*t109581*t109585*t109469;
            double t109641 = 1.0/pow(t109558,7.0/3.0);
            double t109642 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]);
            v_rho_b_rho_b_[index] = t109531*(t109533+t109473*t109476*(t109532-c0p*t109453*t109462*2.0))*2.0+t109542* \
               (t109510-t109461+t109473*t109476*(t109461+t109509-t109502*t109503*t109508*t109479-a1p*c*c0p*t109462* \
               t109436*(2.0/3.0)))*2.0+rho_b[index]*t109542*(-t109548-t109557+t109473*t109476*(t109548+t109557-t109453* \
               t109454*t109455*t109554-t109502*1.0/(t109435*t109435*t109435)*t109545*t109479*2.0+t109502*t109503* \
               t109479*(b2f*c*t109543*(4.0/9.0)+b4f*t109431*t109468*(1.0E1/9.0)+b1f*c*t109443*t109543*(2.0/9.0)+b3f* \
               c*t109543*t109427*(2.0/3.0)-b1f*t109431*t109544*t109468*(1.0/3.6E1)+b3f*t109431*t109443*t109468*(1.0/ \
               1.2E1))+1.0/(t109435*t109435*t109435*t109435)*t109444*t109545*1.0/(t109447*t109447)*t109479*(1.0/2.0) \
               -a1f*c*c0f*t109543*t109477*(8.0/9.0)-t109453*t109546*t109555*t109448*t109556*(1.0/2.0)+a1f*c*t109502* \
               t109503*t109436*t109508*(2.0/3.0)-a1p*c*t109460*t109436*t109454*t109455*(2.0/3.0))+t109453*t109454* \
               t109455*t109554+t109453*t109546*t109555*t109448*t109556*(1.0/2.0)+a1p*c*t109460*t109436*t109454*t109455* \
               (2.0/3.0))+rho_b[index]*t109531*(-t109510+t109461+t109473*t109476*(t109510-t109461-t109509+t109502* \
               t109503*t109508*t109479))*2.0-rho_b[index]*(t109533+t109473*t109476*(t109532-t109533))*(ccaa1*gamma_bb[index]* \
               gcaa*t109536*t109488*(8.8E1/9.0)-ccaa1*t109515*t109463*t109535*t109464*2.4E1+ccaa2*t109463*t109535* \
               t109464*t109497*(3.04E2/9.0)+ccaa4*t109465*t109537*t109466*t109485*(1.12E3/9.0)-ccaa4*t109501*t109525* \
               t109526*t109465*t109466*(6.4E1/3.0)-ccaa2*t109530*t109463*t109464*t109529*t109498*(3.2E1/3.0)-ccaa2* \
               t109530*t109470*t109463*t109464*(gamma_bb[index]*gcaa*t109536*(1.76E2/9.0)+t109463*t109535*t109464* \
               (3.04E2/9.0))-ccaa4*t109526*t109465*t109466*t109467*(gamma_bb[index]*gcaa*t109536*(3.52E2/9.0)+t109463* \
               t109535*t109464*(6.08E2/3.0)+t109465*t109537*t109466*(1.12E3/9.0)+gamma_bb[index]*gcaa*t109534*t109463* \
               t109464*2.88E2)+ccaa2*t109470*t109463*t109464*(t109529*t109529)*1.0/(t109496*t109496*t109496)*2.0+ \
               ccaa4*(t109525*t109525)*t109465*t109466*1.0/(t109484*t109484*t109484)*t109467*2.0+ccaa3*gamma_bb[index]* \
               gcaa*t109534*t109463*t109464*t109493*7.2E1+ccaa1*gamma_bb[index]*gcaa*t109534*t109463*t109464*1.0/ \
               (t109487*t109487*t109487)*(1.28E2/9.0)+ccaa3*gamma_bb[index]*gcaa*t109463*t109464*1.0/(t109492*t109492* \
               t109492)*(t109519*t109519)*t109469*2.0-ccaa3*gamma_bb[index]*gcaa*t109520*t109463*t109464*t109469* \
               (gamma_bb[index]*gcaa*t109536*(8.8E1/3.0)+t109463*t109535*t109464*(3.04E2/3.0)+gamma_bb[index]*gcaa* \
               t109534*t109463*t109464*7.2E1)-ccaa3*gamma_bb[index]*gcaa*t109500*t109520*t109463*t109464*t109519* \
               1.6E1)-c0*t109621*t109615*(cx1*gamma_bb[index]*gx*t109536*t109609*(8.8E1/9.0)-cx1*t109632*t109463* \
               t109535*t109563*2.4E1+cx2*t109611*t109463*t109535*t109563*(3.04E2/9.0)+cx4*t109608*t109465*t109537* \
               t109564*(1.12E3/9.0)-cx2*t109463*t109563*t109573*t109593*t109498*(3.2E1/3.0)-cx4*t109501*t109590*t109465* \
               t109564*t109567*(6.4E1/3.0)-cx2*t109470*t109463*t109563*t109593*(gamma_bb[index]*gx*t109536*(1.76E2/ \
               9.0)+t109463*t109535*t109563*(3.04E2/9.0))-cx4*t109590*t109465*t109564*t109467*(gamma_bb[index]*gx* \
               t109536*(3.52E2/9.0)+t109463*t109535*t109563*(6.08E2/3.0)+t109465*t109537*t109564*(1.12E3/9.0)+gamma_bb[index]* \
               gx*t109534*t109463*t109563*2.88E2)+cx2*t109470*t109463*t109563*(t109573*t109573)*1.0/(t109576*t109576* \
               t109576)*2.0+cx4*1.0/(t109572*t109572*t109572)*t109465*t109564*t109467*(t109567*t109567)*2.0+cx3*gamma_bb[index]* \
               gx*t109610*t109534*t109463*t109563*7.2E1+cx1*gamma_bb[index]*gx*t109534*t109463*t109563*1.0/(t109566* \
               t109566*t109566)*(1.28E2/9.0)+cx3*gamma_bb[index]*gx*t109463*1.0/(t109580*t109580*t109580)*t109563* \
               (t109585*t109585)*t109469*2.0-cx3*gamma_bb[index]*gx*t109463*t109563*t109581*t109469*(gamma_bb[index]* \
               gx*t109536*(8.8E1/3.0)+t109463*t109535*t109563*(3.04E2/3.0)+gamma_bb[index]*gx*t109534*t109463*t109563* \
               7.2E1)-cx3*gamma_bb[index]*gx*t109500*t109463*t109563*t109581*t109585*1.6E1)-c0*t109620*t109432*t109615* \
               (4.0/9.0)-c0*t109620*t109631*t109633*(8.0/3.0)+c0*t109621*t109631*t109638*2.0+c0*t109615*t109633*t109638* \
               (8.0/3.0)+c0*t109620*t109621*(omega*t109562*(omega*t109641*(2.315262988442614E31/9.903520314283042E27) \
               -t109596*(omega*t109641*(7.717543294808713E30/4.951760157141521E27)-omega*t109642*t109559*(1.40737488355328E14/ \
               8.334140006820045E15))-omega*t109642*t109559*(1.40737488355328E14/8.334140006820045E15)-t109624*t109562* \
               t109594*t109596*(2.778046668940015E15/3.5184372088832E13)+t109601*t109594*t109596*t109598*(7.717543294808713E30/ \
               9.903520314283042E27)+1.0/(omega*omega*omega*omega)*t109601*t109626*t109596*(7.717543294808713E30/ \
               4.951760157141521E27)+1.0/(omega*omega*omega)*t109560*t109625*t109596*(1.108777112152858E31/2.37684487542793E29) \
               +t109625*1.0/pow(t109558,5.0/3.0)*t109596*t109599*(3.080234563013177E46/1.115037259926531E43))*(4.0/ \
               3.0)+omega*t109598*(t109622-t109640+t109627+t109628-t109639)*(2.778046668940015E15/5.2776558133248E13) \
               -omega*t109641*t109607*(7.717543294808713E30/3.713820117856141E27));
        } else {
            v_rho_b_rho_b_[index] = 0.0;
        }

        if (is_gga_) {

            //V_rho_a_gamma_aa
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t107555 = 1.0/pow(rho_a[index],1.0/3.0);
                double t107556 = c*t107555;
                double t107557 = sqrt(t107556);
                double t107558 = pow(t107556,3.0/2.0);
                double t107559 = c*c;
                double t107560 = 1.0/pow(rho_a[index],2.0/3.0);
                double t107561 = 1.0/c0p;
                double t107562 = b1p*t107557;
                double t107563 = b3p*t107558;
                double t107564 = b4p*t107560*t107559;
                double t107565 = b2p*c*t107555;
                double t107566 = t107562+t107563+t107564+t107565;
                double t107567 = 1.0/t107566;
                double t107568 = t107561*t107567*(1.0/2.0);
                double t107569 = t107568+1.0;
                double t107570 = log(t107569);
                double t107571 = a1p*c*t107555;
                double t107572 = t107571+1.0;
                double t107573 = 1.0/pow(rho_a[index],8.0/3.0);
                double t107574 = gamma_aa[index]*gamma_aa[index];
                double t107575 = gcaa*gcaa;
                double t107576 = t107575*t107575;
                double t107577 = 1.0/pow(rho_a[index],3.2E1/3.0);
                double t107578 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t107579 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t107580 = gamma_aa[index]*gcaa*t107573;
                double t107581 = t107580+1.0;
                double t107582 = gamma_aa[index]*gcaa*t107573*3.0;
                double t107583 = gamma_aa[index]*gcaa*t107574*t107575*t107579;
                double t107584 = t107574*t107575*t107578*3.0;
                double t107585 = t107582+t107583+t107584+1.0;
                double t107586 = t107574*t107574;
                double t107587 = gamma_aa[index]*gcaa*t107573*4.0;
                double t107588 = gamma_aa[index]*gcaa*t107574*t107575*t107579*4.0;
                double t107589 = t107574*t107575*t107578*6.0;
                double t107590 = t107576*t107577*t107586;
                double t107591 = t107590+t107587+t107588+t107589+1.0;
                double t107592 = gamma_aa[index]*gcaa*t107573*2.0;
                double t107593 = t107574*t107575*t107578;
                double t107594 = t107592+t107593+1.0;
                double t107595 = rho_a[index]+rho_b[index];
                double t107596 = 1.0/pow(t107595,1.0/3.0);
                double t107597 = c*t107596;
                double t107598 = sqrt(t107597);
                double t107599 = b1p*t107598;
                double t107600 = pow(t107597,3.0/2.0);
                double t107601 = b3p*t107600;
                double t107602 = 1.0/pow(t107595,2.0/3.0);
                double t107603 = b4p*t107602*t107559;
                double t107604 = b2p*c*t107596;
                double t107605 = t107601+t107603+t107604+t107599;
                double t107606 = 1.0/pow(t107595,4.0/3.0);
                double t107607 = two_13*2.0;
                double t107608 = t107607-2.0;
                double t107609 = 1.0/t107608;
                double t107610 = 1.0/c0f;
                double t107611 = 1.0/t107605;
                double t107612 = t107611*t107561*(1.0/2.0);
                double t107613 = t107612+1.0;
                double t107614 = a1p*c*t107596;
                double t107615 = t107614+1.0;
                double t107616 = rho_a[index]-rho_b[index];
                double t107617 = t107616*t107616;
                double t107618 = 1.0/t107595;
                double t107619 = t107616*t107618;
                double t107620 = b1f*t107598;
                double t107621 = b3f*t107600;
                double t107622 = b4f*t107602*t107559;
                double t107623 = b2f*c*t107596;
                double t107624 = t107620+t107621+t107622+t107623;
                double t107625 = 1.0/t107624;
                double t107626 = t107610*t107625*(1.0/2.0);
                double t107627 = t107626+1.0;
                double t107628 = log(t107627);
                double t107629 = a1f*c*t107596;
                double t107630 = t107629+1.0;
                double t107631 = log(t107613);
                double t107641 = c0f*t107630*t107628*2.0;
                double t107642 = c0p*t107631*t107615*2.0;
                double t107632 = t107641-t107642;
                double t107633 = t107619+1.0;
                double t107634 = pow(t107633,4.0/3.0);
                double t107635 = -t107619+1.0;
                double t107636 = pow(t107635,4.0/3.0);
                double t107637 = t107634+t107636-2.0;
                double t107638 = 1.0/(t107595*t107595);
                double t107669 = t107616*t107638;
                double t107639 = t107618-t107669;
                double t107640 = 1.0/(t107595*t107595*t107595*t107595);
                double t107643 = t107617*t107617;
                double t107644 = 1.0/pow(t107595,5.0/3.0);
                double t107645 = 1.0/sqrt(t107597);
                double t107646 = 1.0/t107613;
                double t107647 = 1.0/(t107605*t107605);
                double t107648 = b4p*t107644*t107559*(2.0/3.0);
                double t107649 = b2p*c*t107606*(1.0/3.0);
                double t107650 = b1p*c*t107606*t107645*(1.0/6.0);
                double t107651 = b3p*c*t107606*t107598*(1.0/2.0);
                double t107652 = t107650+t107651+t107648+t107649;
                double t107653 = t107615*t107652*t107646*t107647;
                double t107654 = 1.0/(t107595*t107595*t107595*t107595*t107595);
                double t107655 = 1.0/d2fz0;
                double t107656 = 1.0/Aa;
                double t107657 = b1a*t107598;
                double t107658 = b3a*t107600;
                double t107659 = b4a*t107602*t107559;
                double t107660 = b2a*c*t107596;
                double t107661 = t107660+t107657+t107658+t107659;
                double t107662 = 1.0/t107661;
                double t107663 = t107662*t107656*(1.0/2.0);
                double t107664 = t107663+1.0;
                double t107665 = log(t107664);
                double t107666 = a1a*c*t107596;
                double t107667 = t107666+1.0;
                double t107668 = pow(t107633,1.0/3.0);
                double t107670 = t107639*t107668*(4.0/3.0);
                double t107671 = pow(t107635,1.0/3.0);
                double t107672 = t107670-t107671*t107639*(4.0/3.0);
                double t107673 = t107640*t107643;
                double t107674 = t107673-1.0;
                double t107675 = pow(2.0,1.0/3.0);
                double t107676 = t107675*2.0;
                double t107677 = t107676-2.0;
                double t107678 = a1f*c*t107555;
                double t107679 = t107678+1.0;
                double t107680 = b1f*t107557;
                double t107681 = b3f*t107558;
                double t107682 = b4f*t107560*t107559;
                double t107683 = b2f*c*t107555;
                double t107684 = t107680+t107681+t107682+t107683;
                double t107685 = 1.0/t107684;
                double t107686 = t107610*t107685*(1.0/2.0);
                double t107687 = t107686+1.0;
                double t107688 = 1.0/pow(rho_a[index],4.0/3.0);
                double t107689 = 1.0/pow(rho_a[index],5.0/3.0);
                double t107690 = 1.0/sqrt(t107556);
                double t107691 = log(t107687);
                double t107692 = 1.0/t107569;
                double t107693 = 1.0/(t107566*t107566);
                double t107694 = b4p*t107559*t107689*(2.0/3.0);
                double t107695 = b2p*c*t107688*(1.0/3.0);
                double t107696 = b1p*c*t107690*t107688*(1.0/6.0);
                double t107697 = b3p*c*t107557*t107688*(1.0/2.0);
                double t107698 = t107694+t107695+t107696+t107697;
                double t107699 = t107572*t107692*t107693*t107698;
                double t107700 = c0f*t107691*t107679*2.0;
                double t107701 = c0p*t107570*t107572*2.0;
                double t107702 = gamma_aa[index]*t107573*(1.0/2.0);
                double t107703 = 1.0/pow(rho_b[index],8.0/3.0);
                double t107704 = gamma_bb[index]*t107703*(1.0/2.0);
                double t107705 = t107702+t107704;
                double t107706 = gcab*t107705;
                double t107707 = t107706+1.0;
                double t107708 = gcab*gcab;
                double t107709 = t107705*t107705;
                double t107710 = t107708*t107708;
                double t107711 = t107709*t107709;
                double t107712 = t107708*t107709;
                double t107713 = gcab*t107705*2.0;
                double t107714 = t107712+t107713+1.0;
                double t107715 = t107708*t107709*3.0;
                double t107716 = gcab*t107705*t107708*t107709;
                double t107717 = gcab*t107705*3.0;
                double t107718 = t107715+t107716+t107717+1.0;
                double t107719 = t107708*t107709*6.0;
                double t107720 = gcab*t107705*t107708*t107709*4.0;
                double t107721 = t107710*t107711;
                double t107722 = gcab*t107705*4.0;
                double t107723 = t107720+t107721+t107722+t107719+1.0;
                double t107724 = t107700-t107701;
                double t107725 = 1.0/pow(rho_b[index],1.0/3.0);
                double t107726 = c*t107725;
                double t107727 = sqrt(t107726);
                double t107728 = pow(t107726,3.0/2.0);
                double t107729 = 1.0/pow(rho_b[index],2.0/3.0);
                double t107730 = b1p*t107727;
                double t107731 = b3p*t107728;
                double t107732 = b4p*t107729*t107559;
                double t107733 = b2p*c*t107725;
                double t107734 = t107730+t107731+t107732+t107733;
                double t107735 = 1.0/t107734;
                double t107736 = t107561*t107735*(1.0/2.0);
                double t107737 = t107736+1.0;
                double t107738 = log(t107737);
                double t107739 = a1p*c*t107725;
                double t107740 = t107739+1.0;
                double t107741 = c0p*t107740*t107738*2.0;
                double t107742 = t107640*t107632*t107643*t107609*t107637;
                double t107743 = Aa*t107609*t107637*t107655*t107665*t107674*t107667*2.0;
                double t107744 = 1.0/t107707;
                double t107745 = 1.0/pow(rho_a[index],1.1E1/3.0);
                double t107746 = 1.0/(t107707*t107707);
                double t107747 = 1.0/t107714;
                double t107748 = 1.0/(t107718*t107718);
                double t107749 = 1.0/pow(rho_a[index],1.9E1/3.0);
                double t107750 = 1.0/(t107714*t107714);
                double t107751 = 1.0/t107718;
                double t107752 = 1.0/t107723;
                double t107753 = 1.0/(t107723*t107723);
                double t107754 = gcab*t107573*2.0;
                double t107755 = t107705*t107573*t107708*6.0;
                double t107756 = gcab*t107573*t107708*t107709*6.0;
                double t107757 = t107710*t107705*t107573*t107709*2.0;
                double t107758 = t107754+t107755+t107756+t107757;
                double t107759 = gamma_aa[index]*gcab*t107745*(8.0/3.0);
                double t107760 = gamma_aa[index]*t107705*t107708*t107745*(8.0/3.0);
                double t107761 = t107760+t107759;
                double t107762 = gcab*t107573;
                double t107763 = t107705*t107573*t107708;
                double t107764 = t107762+t107763;
                double t107765 = gamma_aa[index]*gcab*t107745*(1.6E1/3.0);
                double t107766 = gamma_aa[index]*gcab*t107708*t107709*t107745*1.6E1;
                double t107767 = gamma_aa[index]*t107710*t107705*t107709*t107745*(1.6E1/3.0);
                double t107768 = gamma_aa[index]*t107705*t107708*t107745*1.6E1;
                double t107769 = t107765+t107766+t107767+t107768;
                double t107770 = gcab*t107573*(3.0/2.0);
                double t107771 = t107705*t107573*t107708*3.0;
                double t107772 = gcab*t107573*t107708*t107709*(3.0/2.0);
                double t107773 = t107770+t107771+t107772;
                double t107774 = gamma_aa[index]*gcab*t107745*4.0;
                double t107775 = gamma_aa[index]*gcab*t107708*t107709*t107745*4.0;
                double t107776 = gamma_aa[index]*t107705*t107708*t107745*8.0;
                double t107777 = t107774+t107775+t107776;
                double t107778 = t107724*t107609*t107677;
                double t107779 = t107701+t107778;
                double t107780 = 1.0/t107581;
                double t107781 = 1.0/t107591;
                double t107782 = 1.0/t107594;
                double t107783 = 1.0/t107585;
                double t107784 = 1.0/(t107581*t107581);
                double t107785 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]*rho_a[index]);
                double t107786 = 1.0/(t107585*t107585);
                double t107787 = 1.0/(t107594*t107594);
                double t107788 = gcaa*t107573*3.0;
                double t107789 = gamma_aa[index]*t107575*t107578*6.0;
                double t107790 = gcaa*t107574*t107575*t107579*3.0;
                double t107791 = t107790+t107788+t107789;
                double t107792 = 1.0/pow(rho_a[index],3.5E1/3.0);
                double t107793 = 1.0/(t107591*t107591);
                double t107794 = gcaa*t107573*4.0;
                double t107795 = gamma_aa[index]*t107575*t107578*1.2E1;
                double t107796 = gcaa*t107574*t107575*t107579*1.2E1;
                double t107797 = gamma_aa[index]*t107574*t107576*t107577*4.0;
                double t107798 = t107794+t107795+t107796+t107797;
                double t107799 = gcaa*t107573*2.0;
                double t107800 = gamma_aa[index]*t107575*t107578*2.0;
                double t107801 = t107800+t107799;
                double t107802 = gamma_aa[index]*gcaa*t107745*(1.6E1/3.0);
                double t107803 = t107574*t107575*t107749*(1.6E1/3.0);
                double t107804 = t107802+t107803;
                double t107805 = gamma_aa[index]*gcaa*t107745*8.0;
                double t107806 = gamma_aa[index]*gcaa*t107574*t107575*t107785*8.0;
                double t107807 = t107574*t107575*t107749*1.6E1;
                double t107808 = t107805+t107806+t107807;
                double t107809 = gamma_aa[index]*gcaa*t107745*(3.2E1/3.0);
                double t107810 = gamma_aa[index]*gcaa*t107574*t107575*t107785*3.2E1;
                double t107811 = t107574*t107575*t107749*3.2E1;
                double t107812 = t107576*t107792*t107586*(3.2E1/3.0);
                double t107813 = t107810+t107811+t107812+t107809;
                double t107814 = 1.0/t107687;
                double t107815 = 1.0/(t107684*t107684);
                double t107816 = b4f*t107559*t107689*(2.0/3.0);
                double t107817 = b2f*c*t107688*(1.0/3.0);
                double t107818 = b1f*c*t107690*t107688*(1.0/6.0);
                double t107819 = b3f*c*t107557*t107688*(1.0/2.0);
                double t107820 = t107816+t107817+t107818+t107819;
                double t107821 = a1f*c*c0f*t107691*t107688*(2.0/3.0);
                double t107822 = a1p*c*c0p*t107570*t107688*(2.0/3.0);
                double t107823 = ccaa1*gcaa*t107573*t107780;
                double t107824 = ccaa4*gamma_aa[index]*t107574*t107781*t107576*t107577*4.0;
                double t107825 = ccaa2*gamma_aa[index]*t107575*t107782*t107578*2.0;
                double t107826 = ccaa3*gcaa*t107574*t107575*t107783*t107579*3.0;
                double t107827 = t107823+t107824+t107825+t107826-ccaa1*gamma_aa[index]*t107575*t107784*t107578-ccaa2* \
                   t107801*t107574*t107575*t107578*t107787-ccaa4*t107576*t107577*t107586*t107793*t107798-ccaa3*gamma_aa[index]* \
                   gcaa*t107574*t107575*t107791*t107579*t107786;
                double t107828 = omega*omega;
                double t107829 = rho_a[index]*(8.334140006820045E15/1.40737488355328E14);
                double t107830 = 1.0/(rho_a[index]*rho_a[index]);
                double t107831 = 1.0/pow(t107829,4.0/3.0);
                double t107832 = 1.0/(omega*omega);
                double t107833 = pow(t107829,2.0/3.0);
                double t107835 = t107832*t107833;
                double t107834 = exp(-t107835);
                double t107836 = 1.0/pow(t107829,1.0/3.0);
                double t107837 = 1.0/omega;
                double t107838 = 1.0/rho_a[index];
                double t107839 = omega*t107828*t107838*(7.0368744177664E13/8.334140006820045E15);
                double t107840 = omega*t107836;
                double t107841 = gx*gx;
                double t107842 = t107841*t107841;
                double t107843 = gamma_aa[index]*gx*t107573;
                double t107844 = t107843+1.0;
                double t107845 = gamma_aa[index]*gx*t107573*3.0;
                double t107846 = gamma_aa[index]*gx*t107841*t107574*t107579;
                double t107847 = t107841*t107574*t107578*3.0;
                double t107848 = t107845+t107846+t107847+1.0;
                double t107849 = gamma_aa[index]*gx*t107573*4.0;
                double t107850 = gamma_aa[index]*gx*t107841*t107574*t107579*4.0;
                double t107851 = t107841*t107574*t107578*6.0;
                double t107852 = t107842*t107577*t107586;
                double t107853 = t107850+t107851+t107852+t107849+1.0;
                double t107854 = gamma_aa[index]*gx*t107573*2.0;
                double t107855 = t107841*t107574*t107578;
                double t107856 = t107854+t107855+1.0;
                double t107857 = pow(t107829,1.0/3.0);
                double t107858 = t107837*t107857;
                double t107859 = erf(t107858);
                double t107860 = t107859*(3.991211251234741E15/2.251799813685248E15);
                double t107861 = t107834*(t107840-t107839);
                double t107889 = omega*t107836*(3.0/2.0);
                double t107862 = t107860+t107861+t107839-t107889;
                double t107863 = 1.0/t107844;
                double t107864 = cx1*gx*t107573*t107863;
                double t107865 = 1.0/t107853;
                double t107866 = cx4*gamma_aa[index]*t107842*t107574*t107577*t107865*4.0;
                double t107867 = 1.0/t107856;
                double t107868 = cx2*gamma_aa[index]*t107841*t107578*t107867*2.0;
                double t107869 = 1.0/t107848;
                double t107870 = cx3*gx*t107841*t107574*t107579*t107869*3.0;
                double t107871 = 1.0/(t107844*t107844);
                double t107872 = gx*t107573*3.0;
                double t107873 = gamma_aa[index]*t107841*t107578*6.0;
                double t107874 = gx*t107841*t107574*t107579*3.0;
                double t107875 = t107872+t107873+t107874;
                double t107876 = 1.0/(t107848*t107848);
                double t107877 = gx*t107573*4.0;
                double t107878 = gamma_aa[index]*t107841*t107578*1.2E1;
                double t107879 = gx*t107841*t107574*t107579*1.2E1;
                double t107880 = gamma_aa[index]*t107842*t107574*t107577*4.0;
                double t107881 = t107880+t107877+t107878+t107879;
                double t107882 = 1.0/(t107853*t107853);
                double t107883 = gx*t107573*2.0;
                double t107884 = gamma_aa[index]*t107841*t107578*2.0;
                double t107885 = t107883+t107884;
                double t107886 = 1.0/(t107856*t107856);
                double t107887 = t107870+t107864+t107866+t107868-cx1*gamma_aa[index]*t107841*t107871*t107578-cx2* \
                   t107841*t107574*t107578*t107885*t107886-cx4*t107842*t107881*t107882*t107577*t107586-cx3*gamma_aa[index]* \
                   gx*t107841*t107574*t107875*t107579*t107876;
                double t107888 = pow(rho_a[index],4.0/3.0);
                double t107890 = omega*t107862*t107836*(4.0/3.0);
                double t107891 = t107890-1.0;
                double t107892 = gamma_aa[index]*gx*t107745*(1.6E1/3.0);
                double t107893 = t107841*t107574*t107749*(1.6E1/3.0);
                double t107894 = t107892+t107893;
                double t107895 = gamma_aa[index]*gx*t107745*8.0;
                double t107896 = gamma_aa[index]*gx*t107841*t107574*t107785*8.0;
                double t107897 = t107841*t107574*t107749*1.6E1;
                double t107898 = t107895+t107896+t107897;
                double t107899 = gamma_aa[index]*gx*t107745*(3.2E1/3.0);
                double t107900 = gamma_aa[index]*gx*t107841*t107574*t107785*3.2E1;
                double t107901 = t107841*t107574*t107749*3.2E1;
                double t107902 = t107842*t107792*t107586*(3.2E1/3.0);
                double t107903 = t107900+t107901+t107902+t107899;
                v_rho_a_gamma_aa_[index] = -(rho_a[index]*t107779+rho_b[index]*(t107741-t107609*t107677*(t107741- \
                   c0f*log((t107610*(1.0/2.0))/(b1f*t107727+b3f*t107728+b2f*c*t107725+b4f*t107729*t107559)+1.0)*(a1f* \
                   c*t107725+1.0)*2.0))-t107595*(t107642+t107742+t107743))*(ccab1*gcab*t107744*t107745*(4.0/3.0)-ccab2* \
                   t107750*t107708*t107709*(gcab*t107745*(8.0/3.0)+gamma_aa[index]*t107708*t107749*(4.0/3.0)+t107705* \
                   t107708*t107745*(8.0/3.0))-ccab4*t107710*t107711*t107753*(gcab*t107745*(1.6E1/3.0)+gamma_aa[index]* \
                   t107708*t107749*8.0+t107705*t107708*t107745*1.6E1+gamma_aa[index]*t107710*t107709*t107749*8.0+gcab* \
                   t107708*t107709*t107745*1.6E1+t107710*t107705*t107709*t107745*(1.6E1/3.0)+gamma_aa[index]*gcab*t107705* \
                   t107708*t107749*1.6E1)-ccab1*gamma_aa[index]*t107708*t107746*t107749*(4.0/3.0)+ccab2*gamma_aa[index]* \
                   t107708*t107747*t107749*(4.0/3.0)-ccab1*t107705*t107708*t107745*t107746*(4.0/3.0)+ccab2*t107705*t107708* \
                   t107745*t107747*(8.0/3.0)-ccab2*t107705*t107750*t107761*t107573*t107708+ccab4*t107710*t107705*t107752* \
                   t107709*t107745*(1.6E1/3.0)+ccab4*t107710*t107711*1.0/(t107723*t107723*t107723)*t107758*t107769*2.0+ \
                   ccab2*1.0/(t107714*t107714*t107714)*t107761*t107708*t107709*t107764*2.0+ccab4*gamma_aa[index]*t107710* \
                   t107752*t107709*t107749*8.0+ccab3*gcab*t107751*t107708*t107709*t107745*4.0+ccab3*gamma_aa[index]*gcab* \
                   t107705*t107751*t107708*t107749*4.0-ccab2*gamma_aa[index]*t107705*t107750*t107708*t107745*t107764* \
                   (8.0/3.0)-ccab3*gcab*t107573*t107708*t107709*t107748*t107777*(3.0/2.0)-ccab4*t107710*t107705*t107573* \
                   t107753*t107709*t107769*2.0-ccab3*gcab*t107705*t107708*t107709*t107748*(gcab*t107745*4.0+gamma_aa[index]* \
                   t107708*t107749*4.0+t107705*t107708*t107745*8.0+gcab*t107708*t107709*t107745*4.0+gamma_aa[index]*gcab* \
                   t107705*t107708*t107749*4.0)+ccab1*gamma_aa[index]*gcab*t107705*1.0/(t107707*t107707*t107707)*t107708* \
                   t107749*(4.0/3.0)+ccab3*gcab*t107705*t107708*t107709*1.0/(t107718*t107718*t107718)*t107773*t107777* \
                   2.0-ccab3*gamma_aa[index]*gcab*t107708*t107709*t107745*t107773*t107748*4.0-ccab4*gamma_aa[index]*t107710* \
                   t107705*t107753*t107709*t107745*t107758*(1.6E1/3.0))-t107827*(t107701+t107609*t107677*(t107700-c0p* \
                   t107570*t107572*2.0))-(-t107701+t107642+t107742+t107743+t107595*(t107653-t107640*t107643*t107609*t107637* \
                   (t107653-(t107630*1.0/(t107624*t107624)*(b2f*c*t107606*(1.0/3.0)+b4f*t107644*t107559*(2.0/3.0)+b1f* \
                   c*t107606*t107645*(1.0/6.0)+b3f*c*t107606*t107598*(1.0/2.0)))/t107627+a1f*c*c0f*t107606*t107628*(2.0/ \
                   3.0)-a1p*c*c0p*t107631*t107606*(2.0/3.0))-a1p*c*c0p*t107631*t107606*(2.0/3.0)+t107640*t107632*t107643* \
                   t107609*t107672-t107632*t107643*t107609*t107654*t107637*4.0+t107640*t107632*t107616*t107617*t107609* \
                   t107637*4.0-Aa*t107609*t107637*t107655*t107665*t107667*(t107643*t107654*4.0-t107640*t107616*t107617* \
                   4.0)*2.0+Aa*t107609*t107672*t107655*t107665*t107674*t107667*2.0+(1.0/(t107661*t107661)*t107609*t107637* \
                   t107655*t107674*t107667*(b2a*c*t107606*(1.0/3.0)+b4a*t107644*t107559*(2.0/3.0)+b1a*c*t107606*t107645* \
                   (1.0/6.0)+b3a*c*t107606*t107598*(1.0/2.0)))/t107664-Aa*a1a*c*t107606*t107609*t107637*t107655*t107665* \
                   t107674*(2.0/3.0))+rho_a[index]*(t107822-t107699+t107609*t107677*(t107821+t107699-t107820*t107814* \
                   t107815*t107679-a1p*c*c0p*t107570*t107688*(2.0/3.0)))-t107724*t107609*t107677)*(ccab1*gcab*t107573* \
                   t107744*(1.0/2.0)-ccab4*t107710*t107711*t107753*t107758-ccab1*t107705*t107573*t107708*t107746*(1.0/ \
                   2.0)+ccab2*t107705*t107573*t107708*t107747-ccab2*t107750*t107708*t107709*t107764+ccab4*t107710*t107705* \
                   t107752*t107573*t107709*2.0+ccab3*gcab*t107751*t107573*t107708*t107709*(3.0/2.0)-ccab3*gcab*t107705* \
                   t107708*t107709*t107773*t107748)-rho_a[index]*t107779*(ccaa1*gcaa*t107780*t107745*(-8.0/3.0)-ccaa2* \
                   gamma_aa[index]*t107575*t107782*t107749*(3.2E1/3.0)+ccaa1*gamma_aa[index]*t107575*t107784*t107749* \
                   8.0+ccaa2*t107801*t107574*t107575*t107749*t107787*(1.6E1/3.0)+ccaa4*t107576*t107792*t107586*t107793* \
                   t107798*(3.2E1/3.0)+ccaa4*t107576*t107577*t107586*t107793*(gcaa*t107745*(3.2E1/3.0)+gamma_aa[index]* \
                   t107575*t107749*6.4E1+gamma_aa[index]*t107574*t107576*t107792*(1.28E2/3.0)+gcaa*t107574*t107575*t107785* \
                   9.6E1)-ccaa1*gcaa*1.0/(t107581*t107581*t107581)*t107574*t107575*t107785*(1.6E1/3.0)+ccaa2*t107574* \
                   t107575*t107578*t107787*(gcaa*t107745*(1.6E1/3.0)+gamma_aa[index]*t107575*t107749*(3.2E1/3.0))-ccaa4* \
                   gamma_aa[index]*t107574*t107781*t107576*t107792*(1.28E2/3.0)+ccaa2*gamma_aa[index]*t107804*t107575* \
                   t107578*t107787*2.0-ccaa3*gcaa*t107574*t107575*t107783*t107785*2.4E1+ccaa4*gamma_aa[index]*t107813* \
                   t107574*t107576*t107577*t107793*4.0+ccaa3*gcaa*t107574*t107808*t107575*t107579*t107786*3.0-ccaa2*t107801* \
                   t107804*t107574*t107575*1.0/(t107594*t107594*t107594)*t107578*2.0-ccaa4*t107813*1.0/(t107591*t107591* \
                   t107591)*t107576*t107577*t107586*t107798*2.0+ccaa3*gamma_aa[index]*gcaa*t107574*t107575*t107579*t107786* \
                   (gcaa*t107745*8.0+gamma_aa[index]*t107575*t107749*3.2E1+gcaa*t107574*t107575*t107785*2.4E1)+ccaa3* \
                   gamma_aa[index]*gcaa*t107574*t107575*t107791*t107785*t107786*8.0-ccaa3*gamma_aa[index]*gcaa*t107574* \
                   t107808*t107575*t107791*1.0/(t107585*t107585*t107585)*t107579*2.0)+rho_a[index]*t107827*(t107822-t107699+ \
                   t107609*t107677*(t107821-t107822+t107699-t107820*t107814*t107815*t107679))-c0*t107891*t107888*(cx1* \
                   gx*t107745*t107863*(-8.0/3.0)+cx1*gamma_aa[index]*t107841*t107871*t107749*8.0-cx2*gamma_aa[index]* \
                   t107841*t107749*t107867*(3.2E1/3.0)+cx2*t107841*t107574*t107749*t107885*t107886*(1.6E1/3.0)+cx4*t107842* \
                   t107881*t107792*t107882*t107586*(3.2E1/3.0)+cx4*t107842*t107882*t107577*t107586*(gx*t107745*(3.2E1/ \
                   3.0)+gamma_aa[index]*t107841*t107749*6.4E1+gamma_aa[index]*t107842*t107574*t107792*(1.28E2/3.0)+gx* \
                   t107841*t107574*t107785*9.6E1)-cx1*gx*t107841*t107574*1.0/(t107844*t107844*t107844)*t107785*(1.6E1/ \
                   3.0)+cx2*t107841*t107574*t107578*t107886*(gx*t107745*(1.6E1/3.0)+gamma_aa[index]*t107841*t107749*(3.2E1/ \
                   3.0))+cx2*gamma_aa[index]*t107841*t107578*t107894*t107886*2.0-cx4*gamma_aa[index]*t107842*t107574* \
                   t107792*t107865*(1.28E2/3.0)-cx3*gx*t107841*t107574*t107785*t107869*2.4E1+cx4*gamma_aa[index]*t107903* \
                   t107842*t107574*t107882*t107577*4.0+cx3*gx*t107841*t107574*t107579*t107876*t107898*3.0-cx2*t107841* \
                   t107574*1.0/(t107856*t107856*t107856)*t107578*t107885*t107894*2.0-cx4*t107903*t107842*1.0/(t107853* \
                   t107853*t107853)*t107881*t107577*t107586*2.0+cx3*gamma_aa[index]*gx*t107841*t107574*t107579*t107876* \
                   (gx*t107745*8.0+gamma_aa[index]*t107841*t107749*3.2E1+gx*t107841*t107574*t107785*2.4E1)+cx3*gamma_aa[index]* \
                   gx*t107841*t107574*t107785*t107875*t107876*8.0-cx3*gamma_aa[index]*gx*t107841*t107574*1.0/(t107848* \
                   t107848*t107848)*t107875*t107579*t107898*2.0)-c0*pow(rho_a[index],1.0/3.0)*t107891*t107887*(4.0/3.0) \
                   +c0*t107887*t107888*(omega*t107836*(omega*t107831*(-8.334140006820045E15/2.81474976710656E14)+t107834* \
                   (omega*t107831*(2.778046668940015E15/1.40737488355328E14)-omega*t107830*t107828*(7.0368744177664E13/ \
                   8.334140006820045E15))+omega*t107830*t107828*(7.0368744177664E13/8.334140006820045E15)+t107832*t107834* \
                   t107836*(t107840-omega*t107828*t107838*(7.0368744177664E13/8.334140006820045E15))*(2.778046668940015E15/ \
                   7.0368744177664E13)-1.0/sqrt(3.141592653589793)*t107834*t107837*1.0/pow(t107829,2.0/3.0)*(1.108777112152858E31/ \
                   1.584563250285287E29))*(4.0/3.0)+omega*t107831*t107862*(2.778046668940015E15/1.05553116266496E14)) \
                   ;
            } else if (rho_a[index] > cutoff_) {
                double t110405 = 1.0/pow(rho_a[index],1.0/3.0);
                double t110406 = c*t110405;
                double t110407 = sqrt(t110406);
                double t110408 = pow(t110406,3.0/2.0);
                double t110409 = c*c;
                double t110410 = 1.0/pow(rho_a[index],2.0/3.0);
                double t110411 = 1.0/c0p;
                double t110412 = b1p*t110407;
                double t110413 = b3p*t110408;
                double t110414 = b4p*t110410*t110409;
                double t110415 = b2p*c*t110405;
                double t110416 = t110412+t110413+t110414+t110415;
                double t110417 = 1.0/t110416;
                double t110418 = t110411*t110417*(1.0/2.0);
                double t110419 = t110418+1.0;
                double t110420 = log(t110419);
                double t110421 = a1p*c*t110405;
                double t110422 = t110421+1.0;
                double t110423 = 1.0/pow(rho_a[index],8.0/3.0);
                double t110424 = gamma_aa[index]*gamma_aa[index];
                double t110425 = gcaa*gcaa;
                double t110426 = t110425*t110425;
                double t110427 = 1.0/pow(rho_a[index],3.2E1/3.0);
                double t110428 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t110429 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t110430 = gamma_aa[index]*gcaa*t110423;
                double t110431 = t110430+1.0;
                double t110432 = gamma_aa[index]*gcaa*t110423*3.0;
                double t110433 = gamma_aa[index]*gcaa*t110424*t110425*t110429;
                double t110434 = t110424*t110425*t110428*3.0;
                double t110435 = t110432+t110433+t110434+1.0;
                double t110436 = t110424*t110424;
                double t110437 = gamma_aa[index]*gcaa*t110423*4.0;
                double t110438 = gamma_aa[index]*gcaa*t110424*t110425*t110429*4.0;
                double t110439 = t110424*t110425*t110428*6.0;
                double t110440 = t110426*t110427*t110436;
                double t110441 = t110440+t110437+t110438+t110439+1.0;
                double t110442 = gamma_aa[index]*gcaa*t110423*2.0;
                double t110443 = t110424*t110425*t110428;
                double t110444 = t110442+t110443+1.0;
                double t110445 = pow(2.0,1.0/3.0);
                double t110446 = t110445*2.0;
                double t110447 = t110446-2.0;
                double t110448 = two_13*2.0;
                double t110449 = t110448-2.0;
                double t110450 = 1.0/t110449;
                double t110451 = 1.0/c0f;
                double t110452 = b1f*t110407;
                double t110453 = b3f*t110408;
                double t110454 = b4f*t110410*t110409;
                double t110455 = b2f*c*t110405;
                double t110456 = t110452+t110453+t110454+t110455;
                double t110457 = 1.0/t110456;
                double t110458 = t110451*t110457*(1.0/2.0);
                double t110459 = t110458+1.0;
                double t110460 = log(t110459);
                double t110461 = a1f*c*t110405;
                double t110462 = t110461+1.0;
                double t110463 = c0f*t110460*t110462*2.0;
                double t110464 = c0p*t110420*t110422*2.0;
                double t110465 = 1.0/t110431;
                double t110466 = 1.0/t110441;
                double t110467 = 1.0/t110444;
                double t110468 = 1.0/t110435;
                double t110469 = 1.0/pow(rho_a[index],1.9E1/3.0);
                double t110470 = 1.0/(t110431*t110431);
                double t110471 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]*rho_a[index]);
                double t110472 = 1.0/pow(rho_a[index],1.1E1/3.0);
                double t110473 = 1.0/(t110435*t110435);
                double t110474 = 1.0/(t110444*t110444);
                double t110475 = gcaa*t110423*3.0;
                double t110476 = gamma_aa[index]*t110425*t110428*6.0;
                double t110477 = gcaa*t110424*t110425*t110429*3.0;
                double t110478 = t110475+t110476+t110477;
                double t110479 = 1.0/pow(rho_a[index],3.5E1/3.0);
                double t110480 = 1.0/(t110441*t110441);
                double t110481 = gcaa*t110423*4.0;
                double t110482 = gamma_aa[index]*t110425*t110428*1.2E1;
                double t110483 = gcaa*t110424*t110425*t110429*1.2E1;
                double t110484 = gamma_aa[index]*t110424*t110426*t110427*4.0;
                double t110485 = t110481+t110482+t110483+t110484;
                double t110486 = gcaa*t110423*2.0;
                double t110487 = gamma_aa[index]*t110425*t110428*2.0;
                double t110488 = t110486+t110487;
                double t110489 = gamma_aa[index]*gcaa*t110472*(1.6E1/3.0);
                double t110490 = t110424*t110425*t110469*(1.6E1/3.0);
                double t110491 = t110490+t110489;
                double t110492 = gamma_aa[index]*gcaa*t110472*8.0;
                double t110493 = gamma_aa[index]*gcaa*t110424*t110425*t110471*8.0;
                double t110494 = t110424*t110425*t110469*1.6E1;
                double t110495 = t110492+t110493+t110494;
                double t110496 = gamma_aa[index]*gcaa*t110472*(3.2E1/3.0);
                double t110497 = gamma_aa[index]*gcaa*t110424*t110425*t110471*3.2E1;
                double t110498 = t110424*t110425*t110469*3.2E1;
                double t110499 = t110426*t110436*t110479*(3.2E1/3.0);
                double t110500 = t110496+t110497+t110498+t110499;
                double t110501 = 1.0/pow(rho_a[index],4.0/3.0);
                double t110502 = 1.0/pow(rho_a[index],5.0/3.0);
                double t110503 = 1.0/sqrt(t110406);
                double t110504 = 1.0/t110419;
                double t110505 = 1.0/(t110416*t110416);
                double t110506 = b4p*t110502*t110409*(2.0/3.0);
                double t110507 = b2p*c*t110501*(1.0/3.0);
                double t110508 = b1p*c*t110501*t110503*(1.0/6.0);
                double t110509 = b3p*c*t110501*t110407*(1.0/2.0);
                double t110510 = t110506+t110507+t110508+t110509;
                double t110511 = t110510*t110422*t110504*t110505;
                double t110512 = ccaa1*gcaa*t110423*t110465;
                double t110513 = ccaa4*gamma_aa[index]*t110424*t110426*t110427*t110466*4.0;
                double t110514 = ccaa2*gamma_aa[index]*t110425*t110428*t110467*2.0;
                double t110515 = ccaa3*gcaa*t110424*t110425*t110429*t110468*3.0;
                double t110516 = t110512+t110513+t110514+t110515-ccaa1*gamma_aa[index]*t110425*t110470*t110428-ccaa4* \
                   t110426*t110480*t110427*t110436*t110485-ccaa2*t110424*t110425*t110428*t110474*t110488-ccaa3*gamma_aa[index]* \
                   gcaa*t110424*t110425*t110473*t110429*t110478;
                double t110517 = omega*omega;
                double t110518 = rho_a[index]*(8.334140006820045E15/1.40737488355328E14);
                double t110519 = 1.0/(rho_a[index]*rho_a[index]);
                double t110520 = 1.0/pow(t110518,4.0/3.0);
                double t110521 = 1.0/(omega*omega);
                double t110522 = pow(t110518,2.0/3.0);
                double t110524 = t110521*t110522;
                double t110523 = exp(-t110524);
                double t110525 = 1.0/pow(t110518,1.0/3.0);
                double t110526 = 1.0/omega;
                double t110527 = 1.0/rho_a[index];
                double t110528 = omega*t110517*t110527*(7.0368744177664E13/8.334140006820045E15);
                double t110529 = omega*t110525;
                double t110530 = gx*gx;
                double t110531 = t110530*t110530;
                double t110532 = gamma_aa[index]*gx*t110423;
                double t110533 = t110532+1.0;
                double t110534 = gamma_aa[index]*gx*t110423*3.0;
                double t110535 = gamma_aa[index]*gx*t110530*t110424*t110429;
                double t110536 = t110530*t110424*t110428*3.0;
                double t110537 = t110534+t110535+t110536+1.0;
                double t110538 = gamma_aa[index]*gx*t110423*4.0;
                double t110539 = gamma_aa[index]*gx*t110530*t110424*t110429*4.0;
                double t110540 = t110530*t110424*t110428*6.0;
                double t110541 = t110531*t110427*t110436;
                double t110542 = t110540+t110541+t110538+t110539+1.0;
                double t110543 = gamma_aa[index]*gx*t110423*2.0;
                double t110544 = t110530*t110424*t110428;
                double t110545 = t110543+t110544+1.0;
                double t110546 = pow(t110518,1.0/3.0);
                double t110547 = t110526*t110546;
                double t110548 = erf(t110547);
                double t110549 = t110548*(3.991211251234741E15/2.251799813685248E15);
                double t110550 = t110528-t110529;
                double t110578 = t110523*t110550;
                double t110579 = omega*t110525*(3.0/2.0);
                double t110551 = t110528+t110549-t110578-t110579;
                double t110552 = 1.0/t110533;
                double t110553 = cx1*gx*t110423*t110552;
                double t110554 = 1.0/t110542;
                double t110555 = cx4*gamma_aa[index]*t110531*t110424*t110427*t110554*4.0;
                double t110556 = 1.0/t110545;
                double t110557 = cx2*gamma_aa[index]*t110530*t110428*t110556*2.0;
                double t110558 = 1.0/t110537;
                double t110559 = cx3*gx*t110530*t110424*t110429*t110558*3.0;
                double t110560 = 1.0/(t110533*t110533);
                double t110561 = gx*t110423*3.0;
                double t110562 = gamma_aa[index]*t110530*t110428*6.0;
                double t110563 = gx*t110530*t110424*t110429*3.0;
                double t110564 = t110561+t110562+t110563;
                double t110565 = 1.0/(t110537*t110537);
                double t110566 = gx*t110423*4.0;
                double t110567 = gamma_aa[index]*t110530*t110428*1.2E1;
                double t110568 = gx*t110530*t110424*t110429*1.2E1;
                double t110569 = gamma_aa[index]*t110531*t110424*t110427*4.0;
                double t110570 = t110566+t110567+t110568+t110569;
                double t110571 = 1.0/(t110542*t110542);
                double t110572 = gx*t110423*2.0;
                double t110573 = gamma_aa[index]*t110530*t110428*2.0;
                double t110574 = t110572+t110573;
                double t110575 = 1.0/(t110545*t110545);
                double t110576 = t110553+t110555+t110557+t110559-cx1*gamma_aa[index]*t110530*t110560*t110428-cx2* \
                   t110530*t110424*t110428*t110574*t110575-cx4*t110531*t110570*t110427*t110436*t110571-cx3*gamma_aa[index]* \
                   gx*t110530*t110424*t110429*t110564*t110565;
                double t110577 = pow(rho_a[index],4.0/3.0);
                double t110580 = omega*t110551*t110525*(4.0/3.0);
                double t110581 = t110580-1.0;
                double t110582 = gamma_aa[index]*gx*t110472*(1.6E1/3.0);
                double t110583 = t110530*t110424*t110469*(1.6E1/3.0);
                double t110584 = t110582+t110583;
                double t110585 = gamma_aa[index]*gx*t110472*8.0;
                double t110586 = gamma_aa[index]*gx*t110530*t110424*t110471*8.0;
                double t110587 = t110530*t110424*t110469*1.6E1;
                double t110588 = t110585+t110586+t110587;
                double t110589 = gamma_aa[index]*gx*t110472*(3.2E1/3.0);
                double t110590 = gamma_aa[index]*gx*t110530*t110424*t110471*3.2E1;
                double t110591 = t110530*t110424*t110469*3.2E1;
                double t110592 = t110531*t110436*t110479*(3.2E1/3.0);
                double t110593 = t110590+t110591+t110592+t110589;
                v_rho_a_gamma_aa_[index] = -t110516*(t110464+t110450*t110447*(t110463-c0p*t110420*t110422*2.0))+rho_a[index]* \
                   t110516*(-t110511+t110450*t110447*(t110511-(t110462*1.0/(t110456*t110456)*(b2f*c*t110501*(1.0/3.0) \
                   +b4f*t110502*t110409*(2.0/3.0)+b1f*c*t110501*t110503*(1.0/6.0)+b3f*c*t110501*t110407*(1.0/2.0)))/t110459+ \
                   a1f*c*c0f*t110501*t110460*(2.0/3.0)-a1p*c*c0p*t110420*t110501*(2.0/3.0))+a1p*c*c0p*t110420*t110501* \
                   (2.0/3.0))-rho_a[index]*(t110464+t110450*t110447*(t110463-t110464))*(ccaa1*gcaa*t110472*t110465*(- \
                   8.0/3.0)+ccaa1*gamma_aa[index]*t110425*t110470*t110469*8.0-ccaa2*gamma_aa[index]*t110425*t110467*t110469* \
                   (3.2E1/3.0)+ccaa2*t110424*t110425*t110474*t110469*t110488*(1.6E1/3.0)+ccaa4*t110426*t110480*t110436* \
                   t110485*t110479*(3.2E1/3.0)+ccaa4*t110426*t110480*t110427*t110436*(gcaa*t110472*(3.2E1/3.0)+gamma_aa[index]* \
                   t110425*t110469*6.4E1+gamma_aa[index]*t110424*t110426*t110479*(1.28E2/3.0)+gcaa*t110424*t110425*t110471* \
                   9.6E1)-ccaa1*gcaa*1.0/(t110431*t110431*t110431)*t110424*t110425*t110471*(1.6E1/3.0)+ccaa2*t110424* \
                   t110425*t110428*t110474*(gcaa*t110472*(1.6E1/3.0)+gamma_aa[index]*t110425*t110469*(3.2E1/3.0))+ccaa2* \
                   gamma_aa[index]*t110425*t110428*t110491*t110474*2.0-ccaa4*gamma_aa[index]*t110424*t110426*t110466* \
                   t110479*(1.28E2/3.0)-ccaa3*gcaa*t110424*t110425*t110471*t110468*2.4E1+ccaa4*gamma_aa[index]*t110500* \
                   t110424*t110426*t110480*t110427*4.0+ccaa3*gcaa*t110424*t110425*t110473*t110429*t110495*3.0-ccaa4*t110500* \
                   1.0/(t110441*t110441*t110441)*t110426*t110427*t110436*t110485*2.0-ccaa2*t110424*t110425*1.0/(t110444* \
                   t110444*t110444)*t110428*t110491*t110488*2.0+ccaa3*gamma_aa[index]*gcaa*t110424*t110425*t110473*t110429* \
                   (gcaa*t110472*8.0+gamma_aa[index]*t110425*t110469*3.2E1+gcaa*t110424*t110425*t110471*2.4E1)+ccaa3* \
                   gamma_aa[index]*gcaa*t110424*t110425*t110471*t110473*t110478*8.0-ccaa3*gamma_aa[index]*gcaa*t110424* \
                   t110425*1.0/(t110435*t110435*t110435)*t110429*t110495*t110478*2.0)-c0*t110581*t110577*(cx1*gx*t110552* \
                   t110472*(-8.0/3.0)+cx1*gamma_aa[index]*t110530*t110560*t110469*8.0-cx2*gamma_aa[index]*t110530*t110556* \
                   t110469*(3.2E1/3.0)+cx2*t110530*t110424*t110574*t110575*t110469*(1.6E1/3.0)+cx4*t110531*t110570*t110436* \
                   t110571*t110479*(3.2E1/3.0)+cx4*t110531*t110427*t110436*t110571*(gx*t110472*(3.2E1/3.0)+gamma_aa[index]* \
                   t110530*t110469*6.4E1+gamma_aa[index]*t110531*t110424*t110479*(1.28E2/3.0)+gx*t110530*t110424*t110471* \
                   9.6E1)-cx1*gx*t110530*t110424*1.0/(t110533*t110533*t110533)*t110471*(1.6E1/3.0)+cx2*t110530*t110424* \
                   t110428*t110575*(gx*t110472*(1.6E1/3.0)+gamma_aa[index]*t110530*t110469*(3.2E1/3.0))+cx2*gamma_aa[index]* \
                   t110530*t110428*t110575*t110584*2.0-cx4*gamma_aa[index]*t110531*t110424*t110554*t110479*(1.28E2/3.0) \
                   -cx3*gx*t110530*t110424*t110471*t110558*2.4E1+cx4*gamma_aa[index]*t110531*t110424*t110427*t110571* \
                   t110593*4.0+cx3*gx*t110530*t110424*t110429*t110565*t110588*3.0-cx2*t110530*t110424*t110428*1.0/(t110545* \
                   t110545*t110545)*t110574*t110584*2.0-cx4*t110531*1.0/(t110542*t110542*t110542)*t110570*t110427*t110436* \
                   t110593*2.0+cx3*gamma_aa[index]*gx*t110530*t110424*t110429*t110565*(gx*t110472*8.0+gamma_aa[index]* \
                   t110530*t110469*3.2E1+gx*t110530*t110424*t110471*2.4E1)+cx3*gamma_aa[index]*gx*t110530*t110424*t110471* \
                   t110564*t110565*8.0-cx3*gamma_aa[index]*gx*t110530*t110424*t110429*1.0/(t110537*t110537*t110537)*t110564* \
                   t110588*2.0)-c0*pow(rho_a[index],1.0/3.0)*t110581*t110576*(4.0/3.0)+c0*t110576*t110577*(omega*t110525* \
                   (omega*t110520*(-8.334140006820045E15/2.81474976710656E14)+t110523*(omega*t110520*(2.778046668940015E15/ \
                   1.40737488355328E14)-omega*t110517*t110519*(7.0368744177664E13/8.334140006820045E15))+omega*t110517* \
                   t110519*(7.0368744177664E13/8.334140006820045E15)+t110521*t110523*t110525*(t110529-omega*t110517*t110527* \
                   (7.0368744177664E13/8.334140006820045E15))*(2.778046668940015E15/7.0368744177664E13)-1.0/sqrt(3.141592653589793) \
                   *t110523*t110526*1.0/pow(t110518,2.0/3.0)*(1.108777112152858E31/1.584563250285287E29))*(4.0/3.0)+omega* \
                   t110520*t110551*(2.778046668940015E15/1.05553116266496E14));
            } else if (rho_b[index] > cutoff_) {
                v_rho_a_gamma_aa_[index] = 0.0;
            } else {
                v_rho_a_gamma_aa_[index] = 0.0;
            }

            //V_rho_a_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_a_gamma_ab_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_a_gamma_ab_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_a_gamma_ab_[index] = 0.0;
            } else {
                v_rho_a_gamma_ab_[index] = 0.0;
            }

            //V_rho_a_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t107906 = rho_a[index]+rho_b[index];
                double t107907 = 1.0/pow(t107906,1.0/3.0);
                double t107908 = c*t107907;
                double t107909 = sqrt(t107908);
                double t107910 = b1p*t107909;
                double t107911 = pow(t107908,3.0/2.0);
                double t107912 = b3p*t107911;
                double t107913 = c*c;
                double t107914 = 1.0/pow(t107906,2.0/3.0);
                double t107915 = b4p*t107913*t107914;
                double t107916 = b2p*c*t107907;
                double t107917 = t107910+t107912+t107915+t107916;
                double t107918 = 1.0/pow(t107906,4.0/3.0);
                double t107919 = 1.0/c0p;
                double t107920 = 1.0/t107917;
                double t107921 = t107920*t107919*(1.0/2.0);
                double t107922 = t107921+1.0;
                double t107923 = a1p*c*t107907;
                double t107924 = t107923+1.0;
                double t107925 = rho_a[index]-rho_b[index];
                double t107926 = t107925*t107925;
                double t107927 = 1.0/t107906;
                double t107928 = t107925*t107927;
                double t107929 = two_13*2.0;
                double t107930 = t107929-2.0;
                double t107931 = 1.0/t107930;
                double t107932 = 1.0/c0f;
                double t107933 = b1f*t107909;
                double t107934 = b3f*t107911;
                double t107935 = b4f*t107913*t107914;
                double t107936 = b2f*c*t107907;
                double t107937 = t107933+t107934+t107935+t107936;
                double t107938 = 1.0/t107937;
                double t107939 = t107932*t107938*(1.0/2.0);
                double t107940 = t107939+1.0;
                double t107941 = log(t107940);
                double t107942 = a1f*c*t107907;
                double t107943 = t107942+1.0;
                double t107944 = log(t107922);
                double t107954 = c0f*t107941*t107943*2.0;
                double t107955 = c0p*t107924*t107944*2.0;
                double t107945 = t107954-t107955;
                double t107946 = t107928+1.0;
                double t107947 = pow(t107946,4.0/3.0);
                double t107948 = -t107928+1.0;
                double t107949 = pow(t107948,4.0/3.0);
                double t107950 = t107947+t107949-2.0;
                double t107951 = 1.0/(t107906*t107906);
                double t107982 = t107951*t107925;
                double t107952 = t107927-t107982;
                double t107953 = 1.0/(t107906*t107906*t107906*t107906);
                double t107956 = t107926*t107926;
                double t107957 = 1.0/pow(t107906,5.0/3.0);
                double t107958 = 1.0/sqrt(t107908);
                double t107959 = 1.0/t107922;
                double t107960 = 1.0/(t107917*t107917);
                double t107961 = b4p*t107913*t107957*(2.0/3.0);
                double t107962 = b2p*c*t107918*(1.0/3.0);
                double t107963 = b1p*c*t107918*t107958*(1.0/6.0);
                double t107964 = b3p*c*t107909*t107918*(1.0/2.0);
                double t107965 = t107961+t107962+t107963+t107964;
                double t107966 = t107924*t107960*t107965*t107959;
                double t107967 = 1.0/(t107906*t107906*t107906*t107906*t107906);
                double t107968 = 1.0/d2fz0;
                double t107969 = 1.0/Aa;
                double t107970 = b1a*t107909;
                double t107971 = b3a*t107911;
                double t107972 = b4a*t107913*t107914;
                double t107973 = b2a*c*t107907;
                double t107974 = t107970+t107971+t107972+t107973;
                double t107975 = 1.0/t107974;
                double t107976 = t107975*t107969*(1.0/2.0);
                double t107977 = t107976+1.0;
                double t107978 = log(t107977);
                double t107979 = a1a*c*t107907;
                double t107980 = t107979+1.0;
                double t107981 = pow(t107946,1.0/3.0);
                double t107983 = t107952*t107981*(4.0/3.0);
                double t107984 = pow(t107948,1.0/3.0);
                double t107985 = t107983-t107952*t107984*(4.0/3.0);
                double t107986 = t107953*t107956;
                double t107987 = t107986-1.0;
                double t107988 = 1.0/pow(rho_a[index],1.0/3.0);
                double t107989 = c*t107988;
                double t107990 = sqrt(t107989);
                double t107991 = b1f*t107990;
                double t107992 = pow(t107989,3.0/2.0);
                double t107993 = b3f*t107992;
                double t107994 = 1.0/pow(rho_a[index],2.0/3.0);
                double t107995 = b4f*t107913*t107994;
                double t107996 = b2f*c*t107988;
                double t107997 = t107991+t107993+t107995+t107996;
                double t107998 = 1.0/pow(rho_a[index],4.0/3.0);
                double t107999 = b1p*t107990;
                double t108000 = b3p*t107992;
                double t108001 = b4p*t107913*t107994;
                double t108002 = b2p*c*t107988;
                double t108003 = t108000+t108001+t108002+t107999;
                double t108004 = 1.0/pow(rho_a[index],5.0/3.0);
                double t108005 = 1.0/sqrt(t107989);
                double t108006 = 1.0/t107997;
                double t108007 = t108006*t107932*(1.0/2.0);
                double t108008 = t108007+1.0;
                double t108009 = 1.0/t108003;
                double t108010 = t108009*t107919*(1.0/2.0);
                double t108011 = t108010+1.0;
                double t108012 = a1p*c*t107988;
                double t108013 = t108012+1.0;
                double t108014 = 1.0/t108011;
                double t108015 = 1.0/(t108003*t108003);
                double t108016 = b4p*t108004*t107913*(2.0/3.0);
                double t108017 = b2p*c*t107998*(1.0/3.0);
                double t108018 = b1p*c*t108005*t107998*(1.0/6.0);
                double t108019 = b3p*c*t107990*t107998*(1.0/2.0);
                double t108020 = t108016+t108017+t108018+t108019;
                double t108021 = t108020*t108013*t108014*t108015;
                double t108022 = log(t108011);
                double t108023 = pow(2.0,1.0/3.0);
                double t108024 = t108023*2.0;
                double t108025 = t108024-2.0;
                double t108026 = log(t108008);
                double t108027 = a1f*c*t107988;
                double t108028 = t108027+1.0;
                double t108029 = 1.0/pow(rho_b[index],8.0/3.0);
                double t108030 = 1.0/pow(rho_a[index],8.0/3.0);
                double t108031 = gamma_aa[index]*t108030*(1.0/2.0);
                double t108032 = gamma_bb[index]*t108029*(1.0/2.0);
                double t108033 = t108031+t108032;
                double t108034 = gcab*t108033;
                double t108035 = t108034+1.0;
                double t108036 = gcab*gcab;
                double t108037 = t108033*t108033;
                double t108038 = t108036*t108036;
                double t108039 = t108037*t108037;
                double t108040 = t108036*t108037;
                double t108041 = gcab*t108033*2.0;
                double t108042 = t108040+t108041+1.0;
                double t108043 = t108036*t108037*3.0;
                double t108044 = gcab*t108033*t108036*t108037;
                double t108045 = gcab*t108033*3.0;
                double t108046 = t108043+t108044+t108045+1.0;
                double t108047 = t108036*t108037*6.0;
                double t108048 = gcab*t108033*t108036*t108037*4.0;
                double t108049 = t108038*t108039;
                double t108050 = gcab*t108033*4.0;
                double t108051 = t108050+t108047+t108048+t108049+1.0;
                double t108052 = c0f*t108026*t108028*2.0;
                double t108054 = c0p*t108013*t108022*2.0;
                double t108053 = t108052-t108054;
                double t108055 = 1.0/pow(rho_b[index],1.0/3.0);
                double t108056 = c*t108055;
                double t108057 = sqrt(t108056);
                double t108058 = pow(t108056,3.0/2.0);
                double t108059 = 1.0/pow(rho_b[index],2.0/3.0);
                double t108060 = b1p*t108057;
                double t108061 = b3p*t108058;
                double t108062 = b4p*t107913*t108059;
                double t108063 = b2p*c*t108055;
                double t108064 = t108060+t108061+t108062+t108063;
                double t108065 = 1.0/t108064;
                double t108066 = t108065*t107919*(1.0/2.0);
                double t108067 = t108066+1.0;
                double t108068 = log(t108067);
                double t108069 = a1p*c*t108055;
                double t108070 = t108069+1.0;
                double t108071 = c0p*t108070*t108068*2.0;
                double t108072 = t107931*t107950*t107953*t107945*t107956;
                double t108073 = Aa*t107931*t107950*t107980*t107968*t107978*t107987*2.0;
                double t108074 = 1.0/pow(rho_a[index],1.1E1/3.0);
                double t108075 = 1.0/(t108046*t108046);
                double t108076 = 1.0/(t108051*t108051);
                double t108077 = gcab*t108029*2.0;
                double t108078 = t108033*t108036*t108029*6.0;
                double t108079 = gcab*t108036*t108037*t108029*6.0;
                double t108080 = t108033*t108037*t108029*t108038*2.0;
                double t108081 = t108080+t108077+t108078+t108079;
                double t108082 = 1.0/(t108042*t108042);
                double t108083 = gamma_aa[index]*gcab*t108074*(8.0/3.0);
                double t108084 = gamma_aa[index]*t108033*t108036*t108074*(8.0/3.0);
                double t108085 = t108083+t108084;
                double t108086 = gcab*t108029;
                double t108087 = t108033*t108036*t108029;
                double t108088 = t108086+t108087;
                double t108089 = gamma_aa[index]*gcab*t108074*(1.6E1/3.0);
                double t108090 = gamma_aa[index]*gcab*t108036*t108037*t108074*1.6E1;
                double t108091 = gamma_aa[index]*t108033*t108037*t108038*t108074*(1.6E1/3.0);
                double t108092 = gamma_aa[index]*t108033*t108036*t108074*1.6E1;
                double t108093 = t108090+t108091+t108092+t108089;
                double t108094 = 1.0/(t108035*t108035);
                double t108095 = 1.0/t108042;
                double t108096 = gcab*t108029*(3.0/2.0);
                double t108097 = t108033*t108036*t108029*3.0;
                double t108098 = gcab*t108036*t108037*t108029*(3.0/2.0);
                double t108099 = t108096+t108097+t108098;
                double t108100 = gamma_aa[index]*gcab*t108074*4.0;
                double t108101 = gamma_aa[index]*gcab*t108036*t108037*t108074*4.0;
                double t108102 = gamma_aa[index]*t108033*t108036*t108074*8.0;
                double t108103 = t108100+t108101+t108102;
                double t108104 = 1.0/t108046;
                double t108105 = 1.0/t108051;
                v_rho_a_gamma_bb_[index] = -(t108072+t108073+t107955+t107906*(t107966-t107931*t107950*t107953*t107956* \
                   (t107966-(t107943*1.0/(t107937*t107937)*(b2f*c*t107918*(1.0/3.0)+b4f*t107913*t107957*(2.0/3.0)+b1f* \
                   c*t107918*t107958*(1.0/6.0)+b3f*c*t107909*t107918*(1.0/2.0)))/t107940+a1f*c*c0f*t107941*t107918*(2.0/ \
                   3.0)-a1p*c*c0p*t107944*t107918*(2.0/3.0))-a1p*c*c0p*t107944*t107918*(2.0/3.0)-t107931*t107950*t107945* \
                   t107956*t107967*4.0+t107931*t107953*t107945*t107956*t107985+t107931*t107950*t107925*t107926*t107953* \
                   t107945*4.0-Aa*t107931*t107950*t107980*t107968*t107978*(t107956*t107967*4.0-t107925*t107926*t107953* \
                   4.0)*2.0+Aa*t107931*t107980*t107985*t107968*t107978*t107987*2.0+(t107931*t107950*t107980*1.0/(t107974* \
                   t107974)*t107968*t107987*(b2a*c*t107918*(1.0/3.0)+b4a*t107913*t107957*(2.0/3.0)+b1a*c*t107918*t107958* \
                   (1.0/6.0)+b3a*c*t107909*t107918*(1.0/2.0)))/t107977-Aa*a1a*c*t107931*t107950*t107918*t107968*t107978* \
                   t107987*(2.0/3.0))+rho_a[index]*(-t108021+t108025*t107931*(t108021-(t108028*1.0/(t107997*t107997)* \
                   (b2f*c*t107998*(1.0/3.0)+b4f*t108004*t107913*(2.0/3.0)+b1f*c*t108005*t107998*(1.0/6.0)+b3f*c*t107990* \
                   t107998*(1.0/2.0)))/t108008+a1f*c*c0f*t108026*t107998*(2.0/3.0)-a1p*c*c0p*t108022*t107998*(2.0/3.0) \
                   )+a1p*c*c0p*t108022*t107998*(2.0/3.0))-c0p*t108013*t108022*2.0-t108025*t108053*t107931)*((ccab1*gcab* \
                   t108029*(1.0/2.0))/t108035-ccab1*t108033*t108036*t108029*t108094*(1.0/2.0)+ccab2*t108033*t108036*t108029* \
                   t108095-ccab2*t108036*t108037*t108082*t108088-ccab4*t108081*t108038*t108039*t108076+ccab4*t108033* \
                   t108105*t108037*t108029*t108038*2.0+ccab3*gcab*t108104*t108036*t108037*t108029*(3.0/2.0)-ccab3*gcab* \
                   t108033*t108036*t108037*t108075*t108099)+(rho_a[index]*(t108054+t108025*t108053*t107931)+rho_b[index]* \
                   (t108071-t108025*t107931*(t108071-c0f*log((t107932*(1.0/2.0))/(b1f*t108057+b3f*t108058+b2f*c*t108055+ \
                   b4f*t107913*t108059)+1.0)*(a1f*c*t108055+1.0)*2.0))-t107906*(t108072+t108073+t107955))*(ccab4*t108038* \
                   t108039*t108076*(gamma_aa[index]*t108036*t108029*t108074*8.0+gamma_aa[index]*t108037*t108029*t108038* \
                   t108074*8.0+gamma_aa[index]*gcab*t108033*t108036*t108029*t108074*1.6E1)+ccab2*t108033*t108036*t108082* \
                   t108029*t108085-ccab4*1.0/(t108051*t108051*t108051)*t108081*t108038*t108039*t108093*2.0-ccab2*1.0/ \
                   (t108042*t108042*t108042)*t108036*t108037*t108085*t108088*2.0+ccab1*gamma_aa[index]*t108036*t108029* \
                   t108074*t108094*(4.0/3.0)-ccab2*gamma_aa[index]*t108036*t108029*t108074*t108095*(4.0/3.0)-ccab4*gamma_aa[index]* \
                   t108105*t108037*t108029*t108038*t108074*8.0+ccab2*gamma_aa[index]*t108033*t108036*t108082*t108074* \
                   t108088*(8.0/3.0)+ccab2*gamma_aa[index]*t108037*t108082*t108029*t108038*t108074*(4.0/3.0)+ccab3*gcab* \
                   t108103*t108036*t108037*t108029*t108075*(3.0/2.0)+ccab4*t108033*t108037*t108029*t108038*t108093*t108076* \
                   2.0+ccab3*gcab*t108033*t108036*t108037*t108075*(gamma_aa[index]*t108036*t108029*t108074*4.0+gamma_aa[index]* \
                   gcab*t108033*t108036*t108029*t108074*4.0)-ccab1*gamma_aa[index]*gcab*t108033*1.0/(t108035*t108035* \
                   t108035)*t108036*t108029*t108074*(4.0/3.0)-ccab3*gcab*t108103*t108033*t108036*t108037*1.0/(t108046* \
                   t108046*t108046)*t108099*2.0-ccab3*gamma_aa[index]*gcab*t108104*t108033*t108036*t108029*t108074*4.0+ \
                   ccab3*gamma_aa[index]*gcab*t108036*t108037*t108074*t108075*t108099*4.0+ccab4*gamma_aa[index]*t108033* \
                   t108081*t108037*t108038*t108074*t108076*(1.6E1/3.0));
            } else if (rho_a[index] > cutoff_) {
                v_rho_a_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_a_gamma_bb_[index] = 0.0;
            } else {
                v_rho_a_gamma_bb_[index] = 0.0;
            }

            //V_rho_b_gamma_aa
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t108107 = rho_a[index]+rho_b[index];
                double t108108 = 1.0/pow(t108107,1.0/3.0);
                double t108109 = c*t108108;
                double t108110 = sqrt(t108109);
                double t108111 = b1p*t108110;
                double t108112 = pow(t108109,3.0/2.0);
                double t108113 = b3p*t108112;
                double t108114 = c*c;
                double t108115 = 1.0/pow(t108107,2.0/3.0);
                double t108116 = b4p*t108114*t108115;
                double t108117 = b2p*c*t108108;
                double t108118 = t108111+t108113+t108116+t108117;
                double t108119 = 1.0/pow(t108107,4.0/3.0);
                double t108120 = 1.0/c0p;
                double t108121 = 1.0/t108118;
                double t108122 = t108120*t108121*(1.0/2.0);
                double t108123 = t108122+1.0;
                double t108124 = a1p*c*t108108;
                double t108125 = t108124+1.0;
                double t108126 = rho_a[index]-rho_b[index];
                double t108127 = t108126*t108126;
                double t108128 = 1.0/t108107;
                double t108129 = t108126*t108128;
                double t108130 = two_13*2.0;
                double t108131 = t108130-2.0;
                double t108132 = 1.0/t108131;
                double t108133 = 1.0/c0f;
                double t108134 = b1f*t108110;
                double t108135 = b3f*t108112;
                double t108136 = b4f*t108114*t108115;
                double t108137 = b2f*c*t108108;
                double t108138 = t108134+t108135+t108136+t108137;
                double t108139 = 1.0/t108138;
                double t108140 = t108133*t108139*(1.0/2.0);
                double t108141 = t108140+1.0;
                double t108142 = log(t108141);
                double t108143 = a1f*c*t108108;
                double t108144 = t108143+1.0;
                double t108145 = log(t108123);
                double t108156 = c0f*t108142*t108144*2.0;
                double t108157 = c0p*t108125*t108145*2.0;
                double t108146 = t108156-t108157;
                double t108147 = t108129+1.0;
                double t108148 = pow(t108147,4.0/3.0);
                double t108149 = -t108129+1.0;
                double t108150 = pow(t108149,4.0/3.0);
                double t108151 = t108150+t108148-2.0;
                double t108152 = 1.0/(t108107*t108107);
                double t108153 = t108152*t108126;
                double t108154 = t108153+t108128;
                double t108155 = 1.0/(t108107*t108107*t108107*t108107);
                double t108158 = t108127*t108127;
                double t108159 = 1.0/pow(t108107,5.0/3.0);
                double t108160 = 1.0/sqrt(t108109);
                double t108161 = 1.0/t108123;
                double t108162 = 1.0/(t108118*t108118);
                double t108163 = b4p*t108114*t108159*(2.0/3.0);
                double t108164 = b2p*c*t108119*(1.0/3.0);
                double t108165 = b1p*c*t108160*t108119*(1.0/6.0);
                double t108166 = b3p*c*t108110*t108119*(1.0/2.0);
                double t108167 = t108163+t108164+t108165+t108166;
                double t108168 = 1.0/(t108107*t108107*t108107*t108107*t108107);
                double t108169 = 1.0/d2fz0;
                double t108170 = 1.0/Aa;
                double t108171 = b1a*t108110;
                double t108172 = b3a*t108112;
                double t108173 = b4a*t108114*t108115;
                double t108174 = b2a*c*t108108;
                double t108175 = t108171+t108172+t108173+t108174;
                double t108176 = 1.0/t108175;
                double t108177 = t108170*t108176*(1.0/2.0);
                double t108178 = t108177+1.0;
                double t108179 = log(t108178);
                double t108180 = a1a*c*t108108;
                double t108181 = t108180+1.0;
                double t108182 = pow(t108147,1.0/3.0);
                double t108183 = t108154*t108182*(4.0/3.0);
                double t108184 = pow(t108149,1.0/3.0);
                double t108185 = t108183-t108154*t108184*(4.0/3.0);
                double t108186 = t108155*t108158;
                double t108187 = t108186-1.0;
                double t108188 = 1.0/pow(rho_b[index],1.0/3.0);
                double t108189 = c*t108188;
                double t108190 = sqrt(t108189);
                double t108191 = b1f*t108190;
                double t108192 = pow(t108189,3.0/2.0);
                double t108193 = b3f*t108192;
                double t108194 = 1.0/pow(rho_b[index],2.0/3.0);
                double t108195 = b4f*t108114*t108194;
                double t108196 = b2f*c*t108188;
                double t108197 = t108191+t108193+t108195+t108196;
                double t108198 = 1.0/pow(rho_b[index],4.0/3.0);
                double t108199 = b1p*t108190;
                double t108200 = b3p*t108192;
                double t108201 = b4p*t108114*t108194;
                double t108202 = b2p*c*t108188;
                double t108203 = t108200+t108201+t108202+t108199;
                double t108204 = 1.0/pow(rho_b[index],5.0/3.0);
                double t108205 = 1.0/sqrt(t108189);
                double t108206 = 1.0/t108197;
                double t108207 = t108133*t108206*(1.0/2.0);
                double t108208 = t108207+1.0;
                double t108209 = 1.0/t108203;
                double t108210 = t108120*t108209*(1.0/2.0);
                double t108211 = t108210+1.0;
                double t108212 = a1p*c*t108188;
                double t108213 = t108212+1.0;
                double t108214 = 1.0/t108211;
                double t108215 = 1.0/(t108203*t108203);
                double t108216 = b4p*t108114*t108204*(2.0/3.0);
                double t108217 = b2p*c*t108198*(1.0/3.0);
                double t108218 = b1p*c*t108205*t108198*(1.0/6.0);
                double t108219 = b3p*c*t108190*t108198*(1.0/2.0);
                double t108220 = t108216+t108217+t108218+t108219;
                double t108221 = t108220*t108213*t108214*t108215;
                double t108222 = log(t108211);
                double t108223 = pow(2.0,1.0/3.0);
                double t108224 = t108223*2.0;
                double t108225 = t108224-2.0;
                double t108226 = log(t108208);
                double t108227 = a1f*c*t108188;
                double t108228 = t108227+1.0;
                double t108229 = 1.0/pow(rho_a[index],8.0/3.0);
                double t108230 = gamma_aa[index]*t108229*(1.0/2.0);
                double t108231 = 1.0/pow(rho_b[index],8.0/3.0);
                double t108232 = gamma_bb[index]*t108231*(1.0/2.0);
                double t108233 = t108230+t108232;
                double t108234 = gcab*t108233;
                double t108235 = t108234+1.0;
                double t108236 = gcab*gcab;
                double t108237 = t108233*t108233;
                double t108238 = t108236*t108236;
                double t108239 = t108237*t108237;
                double t108240 = t108236*t108237;
                double t108241 = gcab*t108233*2.0;
                double t108242 = t108240+t108241+1.0;
                double t108243 = t108236*t108237*3.0;
                double t108244 = gcab*t108233*t108236*t108237;
                double t108245 = gcab*t108233*3.0;
                double t108246 = t108243+t108244+t108245+1.0;
                double t108247 = t108236*t108237*6.0;
                double t108248 = gcab*t108233*t108236*t108237*4.0;
                double t108249 = t108238*t108239;
                double t108250 = gcab*t108233*4.0;
                double t108251 = t108250+t108247+t108248+t108249+1.0;
                double t108252 = a1p*c*c0p*t108145*t108119*(2.0/3.0);
                double t108253 = 1.0/pow(rho_a[index],1.0/3.0);
                double t108254 = c*t108253;
                double t108255 = sqrt(t108254);
                double t108256 = pow(t108254,3.0/2.0);
                double t108257 = 1.0/pow(rho_a[index],2.0/3.0);
                double t108258 = b1p*t108255;
                double t108259 = b3p*t108256;
                double t108260 = b4p*t108114*t108257;
                double t108261 = b2p*c*t108253;
                double t108262 = t108260+t108261+t108258+t108259;
                double t108263 = 1.0/t108262;
                double t108264 = t108120*t108263*(1.0/2.0);
                double t108265 = t108264+1.0;
                double t108266 = log(t108265);
                double t108267 = a1p*c*t108253;
                double t108268 = t108267+1.0;
                double t108269 = c0p*t108266*t108268*2.0;
                double t108270 = c0f*t108226*t108228*2.0;
                double t108272 = c0p*t108213*t108222*2.0;
                double t108271 = t108270-t108272;
                double t108273 = t108132*t108151*t108146*t108155*t108158;
                double t108274 = Aa*t108132*t108151*t108181*t108169*t108187*t108179*2.0;
                double t108275 = 1.0/pow(rho_b[index],1.1E1/3.0);
                double t108276 = 1.0/(t108246*t108246);
                double t108277 = 1.0/(t108251*t108251);
                double t108278 = gcab*t108229*2.0;
                double t108279 = t108233*t108236*t108229*6.0;
                double t108280 = gcab*t108236*t108237*t108229*6.0;
                double t108281 = t108233*t108237*t108229*t108238*2.0;
                double t108282 = t108280+t108281+t108278+t108279;
                double t108283 = 1.0/(t108242*t108242);
                double t108284 = gamma_bb[index]*gcab*t108275*(8.0/3.0);
                double t108285 = gamma_bb[index]*t108233*t108236*t108275*(8.0/3.0);
                double t108286 = t108284+t108285;
                double t108287 = gcab*t108229;
                double t108288 = t108233*t108236*t108229;
                double t108289 = t108287+t108288;
                double t108290 = gamma_bb[index]*gcab*t108275*(1.6E1/3.0);
                double t108291 = gamma_bb[index]*gcab*t108236*t108237*t108275*1.6E1;
                double t108292 = gamma_bb[index]*t108233*t108237*t108238*t108275*(1.6E1/3.0);
                double t108293 = gamma_bb[index]*t108233*t108236*t108275*1.6E1;
                double t108294 = t108290+t108291+t108292+t108293;
                double t108295 = 1.0/(t108235*t108235);
                double t108296 = 1.0/t108242;
                double t108297 = gcab*t108229*(3.0/2.0);
                double t108298 = t108233*t108236*t108229*3.0;
                double t108299 = gcab*t108236*t108237*t108229*(3.0/2.0);
                double t108300 = t108297+t108298+t108299;
                double t108301 = gamma_bb[index]*gcab*t108275*4.0;
                double t108302 = gamma_bb[index]*gcab*t108236*t108237*t108275*4.0;
                double t108303 = gamma_bb[index]*t108233*t108236*t108275*8.0;
                double t108304 = t108301+t108302+t108303;
                double t108305 = 1.0/t108246;
                double t108306 = 1.0/t108251;
                v_rho_b_gamma_aa_[index] = (rho_b[index]*(t108272+t108132*t108225*t108271)+rho_a[index]*(t108269- \
                   t108132*t108225*(t108269-c0f*log((t108133*(1.0/2.0))/(b1f*t108255+b3f*t108256+b2f*c*t108253+b4f*t108114* \
                   t108257)+1.0)*(a1f*c*t108253+1.0)*2.0))-t108107*(t108273+t108157+t108274))*(ccab4*t108238*t108239* \
                   t108277*(gamma_bb[index]*t108236*t108229*t108275*8.0+gamma_bb[index]*t108237*t108229*t108238*t108275* \
                   8.0+gamma_bb[index]*gcab*t108233*t108236*t108229*t108275*1.6E1)+ccab2*t108233*t108236*t108229*t108283* \
                   t108286-ccab4*1.0/(t108251*t108251*t108251)*t108282*t108238*t108239*t108294*2.0-ccab2*1.0/(t108242* \
                   t108242*t108242)*t108236*t108237*t108286*t108289*2.0+ccab1*gamma_bb[index]*t108236*t108229*t108275* \
                   t108295*(4.0/3.0)-ccab2*gamma_bb[index]*t108236*t108229*t108275*t108296*(4.0/3.0)-ccab4*gamma_bb[index]* \
                   t108306*t108237*t108229*t108238*t108275*8.0+ccab2*gamma_bb[index]*t108233*t108236*t108283*t108275* \
                   t108289*(8.0/3.0)+ccab2*gamma_bb[index]*t108237*t108229*t108238*t108283*t108275*(4.0/3.0)+ccab3*gcab* \
                   t108304*t108236*t108237*t108229*t108276*(3.0/2.0)+ccab4*t108233*t108237*t108229*t108238*t108294*t108277* \
                   2.0+ccab3*gcab*t108233*t108236*t108237*t108276*(gamma_bb[index]*t108236*t108229*t108275*4.0+gamma_bb[index]* \
                   gcab*t108233*t108236*t108229*t108275*4.0)-ccab1*gamma_bb[index]*gcab*t108233*1.0/(t108235*t108235* \
                   t108235)*t108236*t108229*t108275*(4.0/3.0)-ccab3*gcab*t108300*t108304*t108233*t108236*t108237*1.0/ \
                   (t108246*t108246*t108246)*2.0-ccab3*gamma_bb[index]*gcab*t108233*t108305*t108236*t108229*t108275*4.0+ \
                   ccab3*gamma_bb[index]*gcab*t108300*t108236*t108237*t108275*t108276*4.0+ccab4*gamma_bb[index]*t108233* \
                   t108237*t108282*t108238*t108275*t108277*(1.6E1/3.0))-(t108273+t108157+t108274+rho_b[index]*(-t108221+ \
                   t108132*t108225*(t108221-(t108228*1.0/(t108197*t108197)*(b2f*c*t108198*(1.0/3.0)+b4f*t108114*t108204* \
                   (2.0/3.0)+b1f*c*t108205*t108198*(1.0/6.0)+b3f*c*t108190*t108198*(1.0/2.0)))/t108208+a1f*c*c0f*t108226* \
                   t108198*(2.0/3.0)-a1p*c*c0p*t108222*t108198*(2.0/3.0))+a1p*c*c0p*t108222*t108198*(2.0/3.0))-t108107* \
                   (t108252-t108125*t108161*t108162*t108167+t108132*t108151*t108146*t108158*t108168*4.0+t108132*t108146* \
                   t108155*t108158*t108185-t108132*t108151*t108155*t108158*(t108252-t108125*t108161*t108162*t108167+(t108144* \
                   1.0/(t108138*t108138)*(b2f*c*t108119*(1.0/3.0)+b4f*t108114*t108159*(2.0/3.0)+b1f*c*t108160*t108119* \
                   (1.0/6.0)+b3f*c*t108110*t108119*(1.0/2.0)))/t108141-a1f*c*c0f*t108142*t108119*(2.0/3.0))+t108132*t108151* \
                   t108126*t108127*t108146*t108155*4.0+Aa*t108132*t108151*t108181*t108169*t108179*(t108158*t108168*4.0+ \
                   t108126*t108127*t108155*4.0)*2.0+Aa*t108132*t108181*t108185*t108169*t108187*t108179*2.0-(t108132*t108151* \
                   t108181*1.0/(t108175*t108175)*t108169*t108187*(b2a*c*t108119*(1.0/3.0)+b4a*t108114*t108159*(2.0/3.0) \
                   +b1a*c*t108160*t108119*(1.0/6.0)+b3a*c*t108110*t108119*(1.0/2.0)))/t108178+Aa*a1a*c*t108132*t108151* \
                   t108119*t108169*t108187*t108179*(2.0/3.0))-c0p*t108213*t108222*2.0-t108132*t108225*t108271)*((ccab1* \
                   gcab*t108229*(1.0/2.0))/t108235-ccab1*t108233*t108236*t108229*t108295*(1.0/2.0)+ccab2*t108233*t108236* \
                   t108229*t108296-ccab2*t108236*t108237*t108283*t108289-ccab4*t108282*t108238*t108239*t108277+ccab4* \
                   t108233*t108306*t108237*t108229*t108238*2.0+ccab3*gcab*t108305*t108236*t108237*t108229*(3.0/2.0)-ccab3* \
                   gcab*t108300*t108233*t108236*t108237*t108276);
            } else if (rho_a[index] > cutoff_) {
                v_rho_b_gamma_aa_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_b_gamma_aa_[index] = 0.0;
            } else {
                v_rho_b_gamma_aa_[index] = 0.0;
            }

            //V_rho_b_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_b_gamma_ab_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_b_gamma_ab_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_b_gamma_ab_[index] = 0.0;
            } else {
                v_rho_b_gamma_ab_[index] = 0.0;
            }

            //V_rho_b_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t108309 = 1.0/pow(rho_b[index],1.0/3.0);
                double t108310 = c*t108309;
                double t108311 = sqrt(t108310);
                double t108312 = pow(t108310,3.0/2.0);
                double t108313 = c*c;
                double t108314 = 1.0/pow(rho_b[index],2.0/3.0);
                double t108315 = 1.0/c0p;
                double t108316 = b1p*t108311;
                double t108317 = b3p*t108312;
                double t108318 = b4p*t108313*t108314;
                double t108319 = b2p*c*t108309;
                double t108320 = t108316+t108317+t108318+t108319;
                double t108321 = 1.0/t108320;
                double t108322 = t108321*t108315*(1.0/2.0);
                double t108323 = t108322+1.0;
                double t108324 = log(t108323);
                double t108325 = a1p*c*t108309;
                double t108326 = t108325+1.0;
                double t108327 = 1.0/pow(rho_b[index],8.0/3.0);
                double t108328 = gamma_bb[index]*gamma_bb[index];
                double t108329 = gcaa*gcaa;
                double t108330 = t108329*t108329;
                double t108331 = 1.0/pow(rho_b[index],3.2E1/3.0);
                double t108332 = 1.0/pow(rho_b[index],1.6E1/3.0);
                double t108333 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]);
                double t108334 = gamma_bb[index]*gcaa*t108327;
                double t108335 = t108334+1.0;
                double t108336 = gamma_bb[index]*gcaa*t108327*3.0;
                double t108337 = gamma_bb[index]*gcaa*t108333*t108328*t108329;
                double t108338 = t108332*t108328*t108329*3.0;
                double t108339 = t108336+t108337+t108338+1.0;
                double t108340 = t108328*t108328;
                double t108341 = gamma_bb[index]*gcaa*t108327*4.0;
                double t108342 = gamma_bb[index]*gcaa*t108333*t108328*t108329*4.0;
                double t108343 = t108332*t108328*t108329*6.0;
                double t108344 = t108330*t108331*t108340;
                double t108345 = t108341+t108342+t108343+t108344+1.0;
                double t108346 = gamma_bb[index]*gcaa*t108327*2.0;
                double t108347 = t108332*t108328*t108329;
                double t108348 = t108346+t108347+1.0;
                double t108349 = rho_a[index]+rho_b[index];
                double t108350 = 1.0/pow(t108349,1.0/3.0);
                double t108351 = c*t108350;
                double t108352 = sqrt(t108351);
                double t108353 = b1p*t108352;
                double t108354 = pow(t108351,3.0/2.0);
                double t108355 = b3p*t108354;
                double t108356 = 1.0/pow(t108349,2.0/3.0);
                double t108357 = b4p*t108313*t108356;
                double t108358 = b2p*c*t108350;
                double t108359 = t108353+t108355+t108357+t108358;
                double t108360 = 1.0/pow(t108349,4.0/3.0);
                double t108361 = two_13*2.0;
                double t108362 = t108361-2.0;
                double t108363 = 1.0/t108362;
                double t108364 = 1.0/c0f;
                double t108365 = 1.0/t108359;
                double t108366 = t108315*t108365*(1.0/2.0);
                double t108367 = t108366+1.0;
                double t108368 = a1p*c*t108350;
                double t108369 = t108368+1.0;
                double t108370 = rho_a[index]-rho_b[index];
                double t108371 = t108370*t108370;
                double t108372 = 1.0/t108349;
                double t108373 = t108370*t108372;
                double t108374 = b1f*t108352;
                double t108375 = b3f*t108354;
                double t108376 = b4f*t108313*t108356;
                double t108377 = b2f*c*t108350;
                double t108378 = t108374+t108375+t108376+t108377;
                double t108379 = 1.0/t108378;
                double t108380 = t108364*t108379*(1.0/2.0);
                double t108381 = t108380+1.0;
                double t108382 = log(t108381);
                double t108383 = a1f*c*t108350;
                double t108384 = t108383+1.0;
                double t108385 = log(t108367);
                double t108396 = c0f*t108382*t108384*2.0;
                double t108397 = c0p*t108385*t108369*2.0;
                double t108386 = t108396-t108397;
                double t108387 = t108373+1.0;
                double t108388 = pow(t108387,4.0/3.0);
                double t108389 = -t108373+1.0;
                double t108390 = pow(t108389,4.0/3.0);
                double t108391 = t108390+t108388-2.0;
                double t108392 = 1.0/(t108349*t108349);
                double t108393 = t108370*t108392;
                double t108394 = t108372+t108393;
                double t108395 = 1.0/(t108349*t108349*t108349*t108349);
                double t108398 = t108371*t108371;
                double t108399 = 1.0/pow(t108349,5.0/3.0);
                double t108400 = 1.0/sqrt(t108351);
                double t108401 = 1.0/t108367;
                double t108402 = 1.0/(t108359*t108359);
                double t108403 = b4p*t108313*t108399*(2.0/3.0);
                double t108404 = b2p*c*t108360*(1.0/3.0);
                double t108405 = b1p*c*t108400*t108360*(1.0/6.0);
                double t108406 = b3p*c*t108360*t108352*(1.0/2.0);
                double t108407 = t108403+t108404+t108405+t108406;
                double t108408 = 1.0/(t108349*t108349*t108349*t108349*t108349);
                double t108409 = 1.0/d2fz0;
                double t108410 = 1.0/Aa;
                double t108411 = b1a*t108352;
                double t108412 = b3a*t108354;
                double t108413 = b4a*t108313*t108356;
                double t108414 = b2a*c*t108350;
                double t108415 = t108411+t108412+t108413+t108414;
                double t108416 = 1.0/t108415;
                double t108417 = t108410*t108416*(1.0/2.0);
                double t108418 = t108417+1.0;
                double t108419 = log(t108418);
                double t108420 = a1a*c*t108350;
                double t108421 = t108420+1.0;
                double t108422 = pow(t108387,1.0/3.0);
                double t108423 = t108422*t108394*(4.0/3.0);
                double t108424 = pow(t108389,1.0/3.0);
                double t108425 = t108423-t108424*t108394*(4.0/3.0);
                double t108426 = t108395*t108398;
                double t108427 = t108426-1.0;
                double t108428 = pow(2.0,1.0/3.0);
                double t108429 = t108428*2.0;
                double t108430 = t108429-2.0;
                double t108431 = a1f*c*t108309;
                double t108432 = t108431+1.0;
                double t108433 = b1f*t108311;
                double t108434 = b3f*t108312;
                double t108435 = b4f*t108313*t108314;
                double t108436 = b2f*c*t108309;
                double t108437 = t108433+t108434+t108435+t108436;
                double t108438 = 1.0/t108437;
                double t108439 = t108364*t108438*(1.0/2.0);
                double t108440 = t108439+1.0;
                double t108441 = 1.0/pow(rho_b[index],4.0/3.0);
                double t108442 = 1.0/pow(rho_b[index],5.0/3.0);
                double t108443 = 1.0/sqrt(t108310);
                double t108444 = log(t108440);
                double t108445 = 1.0/t108323;
                double t108446 = 1.0/(t108320*t108320);
                double t108447 = b4p*t108313*t108442*(2.0/3.0);
                double t108448 = b2p*c*t108441*(1.0/3.0);
                double t108449 = b1p*c*t108441*t108443*(1.0/6.0);
                double t108450 = b3p*c*t108311*t108441*(1.0/2.0);
                double t108451 = t108450+t108447+t108448+t108449;
                double t108452 = t108451*t108326*t108445*t108446;
                double t108453 = c0f*t108432*t108444*2.0;
                double t108454 = c0p*t108324*t108326*2.0;
                double t108455 = 1.0/pow(rho_a[index],8.0/3.0);
                double t108456 = gamma_aa[index]*t108455*(1.0/2.0);
                double t108457 = gamma_bb[index]*t108327*(1.0/2.0);
                double t108458 = t108456+t108457;
                double t108459 = gcab*t108458;
                double t108460 = t108459+1.0;
                double t108461 = gcab*gcab;
                double t108462 = t108458*t108458;
                double t108463 = t108461*t108461;
                double t108464 = t108462*t108462;
                double t108465 = t108461*t108462;
                double t108466 = gcab*t108458*2.0;
                double t108467 = t108465+t108466+1.0;
                double t108468 = t108461*t108462*3.0;
                double t108469 = gcab*t108461*t108462*t108458;
                double t108470 = gcab*t108458*3.0;
                double t108471 = t108470+t108468+t108469+1.0;
                double t108472 = t108461*t108462*6.0;
                double t108473 = gcab*t108461*t108462*t108458*4.0;
                double t108474 = t108463*t108464;
                double t108475 = gcab*t108458*4.0;
                double t108476 = t108472+t108473+t108474+t108475+1.0;
                double t108477 = a1p*c*c0p*t108360*t108385*(2.0/3.0);
                double t108478 = 1.0/pow(rho_a[index],1.0/3.0);
                double t108479 = c*t108478;
                double t108480 = sqrt(t108479);
                double t108481 = pow(t108479,3.0/2.0);
                double t108482 = 1.0/pow(rho_a[index],2.0/3.0);
                double t108483 = b1p*t108480;
                double t108484 = b3p*t108481;
                double t108485 = b4p*t108313*t108482;
                double t108486 = b2p*c*t108478;
                double t108487 = t108483+t108484+t108485+t108486;
                double t108488 = 1.0/t108487;
                double t108489 = t108315*t108488*(1.0/2.0);
                double t108490 = t108489+1.0;
                double t108491 = log(t108490);
                double t108492 = a1p*c*t108478;
                double t108493 = t108492+1.0;
                double t108494 = c0p*t108491*t108493*2.0;
                double t108495 = t108453-t108454;
                double t108496 = t108363*t108391*t108386*t108395*t108398;
                double t108497 = Aa*t108421*t108363*t108391*t108409*t108427*t108419*2.0;
                double t108498 = 1.0/t108460;
                double t108499 = 1.0/pow(rho_b[index],1.1E1/3.0);
                double t108500 = 1.0/(t108460*t108460);
                double t108501 = 1.0/t108467;
                double t108502 = 1.0/(t108471*t108471);
                double t108503 = 1.0/pow(rho_b[index],1.9E1/3.0);
                double t108504 = 1.0/(t108467*t108467);
                double t108505 = 1.0/t108471;
                double t108506 = 1.0/t108476;
                double t108507 = 1.0/(t108476*t108476);
                double t108508 = gcab*t108327*2.0;
                double t108509 = t108461*t108327*t108458*6.0;
                double t108510 = gcab*t108461*t108327*t108462*6.0;
                double t108511 = t108327*t108462*t108463*t108458*2.0;
                double t108512 = t108510+t108511+t108508+t108509;
                double t108513 = gamma_bb[index]*gcab*t108499*(8.0/3.0);
                double t108514 = gamma_bb[index]*t108461*t108458*t108499*(8.0/3.0);
                double t108515 = t108513+t108514;
                double t108516 = gcab*t108327;
                double t108517 = t108461*t108327*t108458;
                double t108518 = t108516+t108517;
                double t108519 = gamma_bb[index]*gcab*t108499*(1.6E1/3.0);
                double t108520 = gamma_bb[index]*gcab*t108461*t108462*t108499*1.6E1;
                double t108521 = gamma_bb[index]*t108462*t108463*t108458*t108499*(1.6E1/3.0);
                double t108522 = gamma_bb[index]*t108461*t108458*t108499*1.6E1;
                double t108523 = t108520+t108521+t108522+t108519;
                double t108524 = gcab*t108327*(3.0/2.0);
                double t108525 = t108461*t108327*t108458*3.0;
                double t108526 = gcab*t108461*t108327*t108462*(3.0/2.0);
                double t108527 = t108524+t108525+t108526;
                double t108528 = gamma_bb[index]*gcab*t108499*4.0;
                double t108529 = gamma_bb[index]*gcab*t108461*t108462*t108499*4.0;
                double t108530 = gamma_bb[index]*t108461*t108458*t108499*8.0;
                double t108531 = t108530+t108528+t108529;
                double t108532 = t108430*t108363*t108495;
                double t108533 = t108532+t108454;
                double t108534 = 1.0/t108335;
                double t108535 = 1.0/t108345;
                double t108536 = 1.0/t108348;
                double t108537 = 1.0/t108339;
                double t108538 = 1.0/(t108335*t108335);
                double t108539 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]*rho_b[index]);
                double t108540 = 1.0/(t108339*t108339);
                double t108541 = 1.0/(t108348*t108348);
                double t108542 = gcaa*t108327*3.0;
                double t108543 = gamma_bb[index]*t108332*t108329*6.0;
                double t108544 = gcaa*t108333*t108328*t108329*3.0;
                double t108545 = t108542+t108543+t108544;
                double t108546 = 1.0/pow(rho_b[index],3.5E1/3.0);
                double t108547 = 1.0/(t108345*t108345);
                double t108548 = gcaa*t108327*4.0;
                double t108549 = gamma_bb[index]*t108332*t108329*1.2E1;
                double t108550 = gcaa*t108333*t108328*t108329*1.2E1;
                double t108551 = gamma_bb[index]*t108330*t108331*t108328*4.0;
                double t108552 = t108550+t108551+t108548+t108549;
                double t108553 = gcaa*t108327*2.0;
                double t108554 = gamma_bb[index]*t108332*t108329*2.0;
                double t108555 = t108553+t108554;
                double t108556 = gamma_bb[index]*gcaa*t108499*(1.6E1/3.0);
                double t108557 = t108503*t108328*t108329*(1.6E1/3.0);
                double t108558 = t108556+t108557;
                double t108559 = gamma_bb[index]*gcaa*t108499*8.0;
                double t108560 = gamma_bb[index]*gcaa*t108328*t108329*t108539*8.0;
                double t108561 = t108503*t108328*t108329*1.6E1;
                double t108562 = t108560+t108561+t108559;
                double t108563 = gamma_bb[index]*gcaa*t108499*(3.2E1/3.0);
                double t108564 = gamma_bb[index]*gcaa*t108328*t108329*t108539*3.2E1;
                double t108565 = t108503*t108328*t108329*3.2E1;
                double t108566 = t108330*t108340*t108546*(3.2E1/3.0);
                double t108567 = t108563+t108564+t108565+t108566;
                double t108568 = 1.0/t108440;
                double t108569 = 1.0/(t108437*t108437);
                double t108570 = b4f*t108313*t108442*(2.0/3.0);
                double t108571 = b2f*c*t108441*(1.0/3.0);
                double t108572 = b1f*c*t108441*t108443*(1.0/6.0);
                double t108573 = b3f*c*t108311*t108441*(1.0/2.0);
                double t108574 = t108570+t108571+t108572+t108573;
                double t108575 = a1f*c*c0f*t108441*t108444*(2.0/3.0);
                double t108576 = a1p*c*c0p*t108324*t108441*(2.0/3.0);
                double t108577 = ccaa1*gcaa*t108327*t108534;
                double t108578 = ccaa4*gamma_bb[index]*t108330*t108331*t108328*t108535*4.0;
                double t108579 = ccaa2*gamma_bb[index]*t108332*t108329*t108536*2.0;
                double t108580 = ccaa3*gcaa*t108333*t108328*t108329*t108537*3.0;
                double t108581 = t108580+t108577+t108578+t108579-ccaa1*gamma_bb[index]*t108332*t108329*t108538-ccaa4* \
                   t108330*t108331*t108340*t108552*t108547-ccaa2*t108332*t108541*t108328*t108329*t108555-ccaa3*gamma_bb[index]* \
                   gcaa*t108333*t108540*t108328*t108329*t108545;
                double t108582 = omega*omega;
                double t108583 = rho_b[index]*(8.334140006820045E15/1.40737488355328E14);
                double t108584 = 1.0/(rho_b[index]*rho_b[index]);
                double t108585 = 1.0/pow(t108583,4.0/3.0);
                double t108586 = 1.0/(omega*omega);
                double t108587 = pow(t108583,2.0/3.0);
                double t108589 = t108586*t108587;
                double t108588 = exp(-t108589);
                double t108590 = 1.0/pow(t108583,1.0/3.0);
                double t108591 = 1.0/omega;
                double t108592 = 1.0/rho_b[index];
                double t108593 = omega*t108582*t108592*(7.0368744177664E13/8.334140006820045E15);
                double t108594 = omega*t108590;
                double t108595 = gx*gx;
                double t108596 = t108595*t108595;
                double t108597 = gamma_bb[index]*gx*t108327;
                double t108598 = t108597+1.0;
                double t108599 = gamma_bb[index]*gx*t108327*3.0;
                double t108600 = gamma_bb[index]*gx*t108333*t108328*t108595;
                double t108601 = t108332*t108328*t108595*3.0;
                double t108602 = t108600+t108601+t108599+1.0;
                double t108603 = gamma_bb[index]*gx*t108327*4.0;
                double t108604 = gamma_bb[index]*gx*t108333*t108328*t108595*4.0;
                double t108605 = t108332*t108328*t108595*6.0;
                double t108606 = t108331*t108340*t108596;
                double t108607 = t108603+t108604+t108605+t108606+1.0;
                double t108608 = gamma_bb[index]*gx*t108327*2.0;
                double t108609 = t108332*t108328*t108595;
                double t108610 = t108608+t108609+1.0;
                double t108611 = pow(t108583,1.0/3.0);
                double t108612 = t108611*t108591;
                double t108613 = erf(t108612);
                double t108614 = t108613*(3.991211251234741E15/2.251799813685248E15);
                double t108615 = t108593-t108594;
                double t108643 = t108615*t108588;
                double t108644 = omega*t108590*(3.0/2.0);
                double t108616 = t108614-t108643-t108644+t108593;
                double t108617 = 1.0/t108598;
                double t108618 = cx1*gx*t108327*t108617;
                double t108619 = 1.0/t108607;
                double t108620 = cx4*gamma_bb[index]*t108331*t108328*t108619*t108596*4.0;
                double t108621 = 1.0/t108610;
                double t108622 = cx2*gamma_bb[index]*t108332*t108621*t108595*2.0;
                double t108623 = 1.0/t108602;
                double t108624 = cx3*gx*t108333*t108623*t108328*t108595*3.0;
                double t108625 = 1.0/(t108598*t108598);
                double t108626 = gx*t108327*3.0;
                double t108627 = gamma_bb[index]*t108332*t108595*6.0;
                double t108628 = gx*t108333*t108328*t108595*3.0;
                double t108629 = t108626+t108627+t108628;
                double t108630 = 1.0/(t108602*t108602);
                double t108631 = gx*t108327*4.0;
                double t108632 = gamma_bb[index]*t108332*t108595*1.2E1;
                double t108633 = gx*t108333*t108328*t108595*1.2E1;
                double t108634 = gamma_bb[index]*t108331*t108328*t108596*4.0;
                double t108635 = t108631+t108632+t108633+t108634;
                double t108636 = 1.0/(t108607*t108607);
                double t108637 = gx*t108327*2.0;
                double t108638 = gamma_bb[index]*t108332*t108595*2.0;
                double t108639 = t108637+t108638;
                double t108640 = 1.0/(t108610*t108610);
                double t108641 = t108620+t108622+t108624+t108618-cx1*gamma_bb[index]*t108332*t108625*t108595-cx2* \
                   t108332*t108640*t108328*t108639*t108595-cx4*t108331*t108340*t108635*t108636*t108596-cx3*gamma_bb[index]* \
                   gx*t108333*t108630*t108328*t108629*t108595;
                double t108642 = pow(rho_b[index],4.0/3.0);
                double t108645 = omega*t108616*t108590*(4.0/3.0);
                double t108646 = t108645-1.0;
                double t108647 = gamma_bb[index]*gx*t108499*(1.6E1/3.0);
                double t108648 = t108503*t108328*t108595*(1.6E1/3.0);
                double t108649 = t108647+t108648;
                double t108650 = gamma_bb[index]*gx*t108499*8.0;
                double t108651 = gamma_bb[index]*gx*t108328*t108539*t108595*8.0;
                double t108652 = t108503*t108328*t108595*1.6E1;
                double t108653 = t108650+t108651+t108652;
                double t108654 = gamma_bb[index]*gx*t108499*(3.2E1/3.0);
                double t108655 = gamma_bb[index]*gx*t108328*t108539*t108595*3.2E1;
                double t108656 = t108503*t108328*t108595*3.2E1;
                double t108657 = t108340*t108546*t108596*(3.2E1/3.0);
                double t108658 = t108654+t108655+t108656+t108657;
                v_rho_b_gamma_bb_[index] = -(rho_b[index]*t108533+rho_a[index]*(t108494-t108430*t108363*(t108494- \
                   c0f*log((t108364*(1.0/2.0))/(b1f*t108480+b3f*t108481+b2f*c*t108478+b4f*t108313*t108482)+1.0)*(a1f* \
                   c*t108478+1.0)*2.0))-t108349*(t108397+t108496+t108497))*(ccab1*gcab*t108498*t108499*(4.0/3.0)-ccab2* \
                   t108504*t108461*t108462*(gcab*t108499*(8.0/3.0)+gamma_bb[index]*t108503*t108461*(4.0/3.0)+t108461* \
                   t108458*t108499*(8.0/3.0))-ccab4*t108507*t108463*t108464*(gcab*t108499*(1.6E1/3.0)+gamma_bb[index]* \
                   t108503*t108461*8.0+t108461*t108458*t108499*1.6E1+gamma_bb[index]*t108503*t108462*t108463*8.0+gcab* \
                   t108461*t108462*t108499*1.6E1+t108462*t108463*t108458*t108499*(1.6E1/3.0)+gamma_bb[index]*gcab*t108503* \
                   t108461*t108458*1.6E1)-ccab1*gamma_bb[index]*t108500*t108503*t108461*(4.0/3.0)+ccab2*gamma_bb[index]* \
                   t108501*t108503*t108461*(4.0/3.0)-ccab1*t108500*t108461*t108458*t108499*(4.0/3.0)+ccab2*t108501*t108461* \
                   t108458*t108499*(8.0/3.0)-ccab2*t108504*t108461*t108515*t108327*t108458+ccab4*t108506*t108462*t108463* \
                   t108458*t108499*(1.6E1/3.0)+ccab4*t108512*t108523*t108463*t108464*1.0/(t108476*t108476*t108476)*2.0+ \
                   ccab2*t108461*t108515*t108462*t108518*1.0/(t108467*t108467*t108467)*2.0+ccab4*gamma_bb[index]*t108503* \
                   t108506*t108462*t108463*8.0+ccab3*gcab*t108505*t108461*t108462*t108499*4.0+ccab3*gamma_bb[index]*gcab* \
                   t108503*t108505*t108461*t108458*4.0-ccab2*gamma_bb[index]*t108504*t108461*t108518*t108458*t108499* \
                   (8.0/3.0)-ccab3*gcab*t108502*t108531*t108461*t108327*t108462*(3.0/2.0)-ccab4*t108523*t108327*t108462* \
                   t108507*t108463*t108458*2.0-ccab3*gcab*t108502*t108461*t108462*t108458*(gcab*t108499*4.0+gamma_bb[index]* \
                   t108503*t108461*4.0+t108461*t108458*t108499*8.0+gcab*t108461*t108462*t108499*4.0+gamma_bb[index]*gcab* \
                   t108503*t108461*t108458*4.0)+ccab1*gamma_bb[index]*gcab*t108503*1.0/(t108460*t108460*t108460)*t108461* \
                   t108458*(4.0/3.0)+ccab3*gcab*t108531*t108461*t108462*1.0/(t108471*t108471*t108471)*t108527*t108458* \
                   2.0-ccab3*gamma_bb[index]*gcab*t108502*t108461*t108462*t108527*t108499*4.0-ccab4*gamma_bb[index]*t108512* \
                   t108462*t108507*t108463*t108458*t108499*(1.6E1/3.0))-(-t108454+t108397+t108496+t108497+rho_b[index]* \
                   (-t108452+t108576+t108430*t108363*(t108452+t108575-t108432*t108574*t108568*t108569-a1p*c*c0p*t108324* \
                   t108441*(2.0/3.0)))-t108349*(t108477-t108401*t108402*t108407*t108369+t108363*t108408*t108391*t108386* \
                   t108398*4.0+t108425*t108363*t108386*t108395*t108398-t108363*t108391*t108395*t108398*(t108477-t108401* \
                   t108402*t108407*t108369+(t108384*1.0/(t108378*t108378)*(b2f*c*t108360*(1.0/3.0)+b4f*t108313*t108399* \
                   (2.0/3.0)+b1f*c*t108400*t108360*(1.0/6.0)+b3f*c*t108360*t108352*(1.0/2.0)))/t108381-a1f*c*c0f*t108360* \
                   t108382*(2.0/3.0))+t108370*t108371*t108363*t108391*t108386*t108395*4.0+Aa*t108421*t108363*t108391* \
                   t108409*t108419*(t108408*t108398*4.0+t108370*t108371*t108395*4.0)*2.0+Aa*t108421*t108425*t108363*t108409* \
                   t108427*t108419*2.0-(t108421*1.0/(t108415*t108415)*t108363*t108391*t108409*t108427*(b2a*c*t108360* \
                   (1.0/3.0)+b4a*t108313*t108399*(2.0/3.0)+b1a*c*t108400*t108360*(1.0/6.0)+b3a*c*t108360*t108352*(1.0/ \
                   2.0)))/t108418+Aa*a1a*c*t108360*t108363*t108391*t108409*t108427*t108419*(2.0/3.0))-t108430*t108363* \
                   t108495)*(ccab1*gcab*t108327*t108498*(1.0/2.0)-ccab1*t108500*t108461*t108327*t108458*(1.0/2.0)+ccab2* \
                   t108501*t108461*t108327*t108458-ccab2*t108504*t108461*t108462*t108518-ccab4*t108512*t108507*t108463* \
                   t108464+ccab4*t108506*t108327*t108462*t108463*t108458*2.0+ccab3*gcab*t108505*t108461*t108327*t108462* \
                   (3.0/2.0)-ccab3*gcab*t108502*t108461*t108462*t108527*t108458)-t108581*(t108454+t108430*t108363*(t108453- \
                   c0p*t108324*t108326*2.0))-rho_b[index]*t108533*(ccaa1*gcaa*t108534*t108499*(-8.0/3.0)-ccaa2*gamma_bb[index]* \
                   t108503*t108329*t108536*(3.2E1/3.0)+ccaa1*gamma_bb[index]*t108503*t108329*t108538*8.0+ccaa4*t108330* \
                   t108340*t108552*t108546*t108547*(3.2E1/3.0)+ccaa2*t108503*t108541*t108328*t108329*t108555*(1.6E1/3.0) \
                   +ccaa4*t108330*t108331*t108340*t108547*(gcaa*t108499*(3.2E1/3.0)+gamma_bb[index]*t108503*t108329*6.4E1+ \
                   gamma_bb[index]*t108330*t108328*t108546*(1.28E2/3.0)+gcaa*t108328*t108329*t108539*9.6E1)-ccaa1*gcaa* \
                   1.0/(t108335*t108335*t108335)*t108328*t108329*t108539*(1.6E1/3.0)+ccaa2*t108332*t108541*t108328*t108329* \
                   (gcaa*t108499*(1.6E1/3.0)+gamma_bb[index]*t108503*t108329*(3.2E1/3.0))-ccaa4*gamma_bb[index]*t108330* \
                   t108328*t108535*t108546*(1.28E2/3.0)+ccaa2*gamma_bb[index]*t108332*t108541*t108329*t108558*2.0-ccaa3* \
                   gcaa*t108328*t108329*t108537*t108539*2.4E1+ccaa4*gamma_bb[index]*t108330*t108331*t108328*t108547*t108567* \
                   4.0+ccaa3*gcaa*t108333*t108540*t108328*t108562*t108329*3.0-ccaa4*t108330*t108331*t108340*1.0/(t108345* \
                   t108345*t108345)*t108552*t108567*2.0-ccaa2*t108332*t108328*t108329*1.0/(t108348*t108348*t108348)*t108555* \
                   t108558*2.0+ccaa3*gamma_bb[index]*gcaa*t108333*t108540*t108328*t108329*(gcaa*t108499*8.0+gamma_bb[index]* \
                   t108503*t108329*3.2E1+gcaa*t108328*t108329*t108539*2.4E1)+ccaa3*gamma_bb[index]*gcaa*t108540*t108328* \
                   t108329*t108545*t108539*8.0-ccaa3*gamma_bb[index]*gcaa*t108333*t108328*t108562*t108329*t108545*1.0/ \
                   (t108339*t108339*t108339)*2.0)+rho_b[index]*t108581*(-t108452+t108576+t108430*t108363*(t108452+t108575- \
                   t108576-t108432*t108574*t108568*t108569))-c0*t108642*t108646*(cx1*gx*t108617*t108499*(-8.0/3.0)+cx1* \
                   gamma_bb[index]*t108503*t108625*t108595*8.0-cx2*gamma_bb[index]*t108503*t108621*t108595*(3.2E1/3.0) \
                   +cx2*t108503*t108640*t108328*t108639*t108595*(1.6E1/3.0)+cx4*t108340*t108635*t108546*t108636*t108596* \
                   (3.2E1/3.0)+cx4*t108331*t108340*t108636*t108596*(gx*t108499*(3.2E1/3.0)+gamma_bb[index]*t108503*t108595* \
                   6.4E1+gamma_bb[index]*t108328*t108546*t108596*(1.28E2/3.0)+gx*t108328*t108539*t108595*9.6E1)-cx1*gx* \
                   t108328*t108539*t108595*1.0/(t108598*t108598*t108598)*(1.6E1/3.0)+cx2*t108332*t108640*t108328*t108595* \
                   (gx*t108499*(1.6E1/3.0)+gamma_bb[index]*t108503*t108595*(3.2E1/3.0))+cx2*gamma_bb[index]*t108332*t108640* \
                   t108595*t108649*2.0-cx4*gamma_bb[index]*t108328*t108546*t108619*t108596*(1.28E2/3.0)-cx3*gx*t108623* \
                   t108328*t108539*t108595*2.4E1+cx4*gamma_bb[index]*t108331*t108328*t108636*t108658*t108596*4.0+cx3* \
                   gx*t108333*t108630*t108328*t108653*t108595*3.0-cx2*1.0/(t108610*t108610*t108610)*t108332*t108328*t108639* \
                   t108595*t108649*2.0-cx4*t108331*t108340*1.0/(t108607*t108607*t108607)*t108635*t108658*t108596*2.0+ \
                   cx3*gamma_bb[index]*gx*t108333*t108630*t108328*t108595*(gx*t108499*8.0+gamma_bb[index]*t108503*t108595* \
                   3.2E1+gx*t108328*t108539*t108595*2.4E1)+cx3*gamma_bb[index]*gx*t108630*t108328*t108539*t108629*t108595* \
                   8.0-cx3*gamma_bb[index]*gx*1.0/(t108602*t108602*t108602)*t108333*t108328*t108653*t108629*t108595*2.0) \
                   -c0*pow(rho_b[index],1.0/3.0)*t108641*t108646*(4.0/3.0)+c0*t108641*t108642*(omega*t108590*(omega*t108585* \
                   (-8.334140006820045E15/2.81474976710656E14)+t108588*(omega*t108585*(2.778046668940015E15/1.40737488355328E14) \
                   -omega*t108582*t108584*(7.0368744177664E13/8.334140006820045E15))+omega*t108582*t108584*(7.0368744177664E13/ \
                   8.334140006820045E15)+t108590*t108586*t108588*(t108594-omega*t108582*t108592*(7.0368744177664E13/8.334140006820045E15) \
                   )*(2.778046668940015E15/7.0368744177664E13)-1.0/sqrt(3.141592653589793)*t108591*1.0/pow(t108583,2.0/ \
                   3.0)*t108588*(1.108777112152858E31/1.584563250285287E29))*(4.0/3.0)+omega*t108616*t108585*(2.778046668940015E15/ \
                   1.05553116266496E14));
            } else if (rho_a[index] > cutoff_) {
                v_rho_b_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                double t109649 = 1.0/pow(rho_b[index],1.0/3.0);
                double t109650 = c*t109649;
                double t109651 = sqrt(t109650);
                double t109652 = pow(t109650,3.0/2.0);
                double t109653 = c*c;
                double t109654 = 1.0/pow(rho_b[index],2.0/3.0);
                double t109655 = 1.0/c0p;
                double t109656 = b1p*t109651;
                double t109657 = b3p*t109652;
                double t109658 = b4p*t109653*t109654;
                double t109659 = b2p*c*t109649;
                double t109660 = t109656+t109657+t109658+t109659;
                double t109661 = 1.0/t109660;
                double t109662 = t109661*t109655*(1.0/2.0);
                double t109663 = t109662+1.0;
                double t109664 = log(t109663);
                double t109665 = a1p*c*t109649;
                double t109666 = t109665+1.0;
                double t109667 = 1.0/pow(rho_b[index],8.0/3.0);
                double t109668 = gamma_bb[index]*gamma_bb[index];
                double t109669 = gcaa*gcaa;
                double t109670 = t109669*t109669;
                double t109671 = 1.0/pow(rho_b[index],3.2E1/3.0);
                double t109672 = 1.0/pow(rho_b[index],1.6E1/3.0);
                double t109673 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]);
                double t109674 = gamma_bb[index]*gcaa*t109667;
                double t109675 = t109674+1.0;
                double t109676 = gamma_bb[index]*gcaa*t109667*3.0;
                double t109677 = gamma_bb[index]*gcaa*t109673*t109668*t109669;
                double t109678 = t109672*t109668*t109669*3.0;
                double t109679 = t109676+t109677+t109678+1.0;
                double t109680 = t109668*t109668;
                double t109681 = gamma_bb[index]*gcaa*t109667*4.0;
                double t109682 = gamma_bb[index]*gcaa*t109673*t109668*t109669*4.0;
                double t109683 = t109672*t109668*t109669*6.0;
                double t109684 = t109670*t109671*t109680;
                double t109685 = t109681+t109682+t109683+t109684+1.0;
                double t109686 = gamma_bb[index]*gcaa*t109667*2.0;
                double t109687 = t109672*t109668*t109669;
                double t109688 = t109686+t109687+1.0;
                double t109689 = pow(2.0,1.0/3.0);
                double t109690 = t109689*2.0;
                double t109691 = t109690-2.0;
                double t109692 = two_13*2.0;
                double t109693 = t109692-2.0;
                double t109694 = 1.0/t109693;
                double t109695 = 1.0/c0f;
                double t109696 = b1f*t109651;
                double t109697 = b3f*t109652;
                double t109698 = b4f*t109653*t109654;
                double t109699 = b2f*c*t109649;
                double t109700 = t109696+t109697+t109698+t109699;
                double t109701 = 1.0/t109700;
                double t109702 = t109701*t109695*(1.0/2.0);
                double t109703 = t109702+1.0;
                double t109704 = log(t109703);
                double t109705 = a1f*c*t109649;
                double t109706 = t109705+1.0;
                double t109707 = c0f*t109704*t109706*2.0;
                double t109708 = c0p*t109664*t109666*2.0;
                double t109709 = 1.0/t109675;
                double t109710 = 1.0/t109685;
                double t109711 = 1.0/t109688;
                double t109712 = 1.0/t109679;
                double t109713 = 1.0/pow(rho_b[index],1.9E1/3.0);
                double t109714 = 1.0/(t109675*t109675);
                double t109715 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]*rho_b[index]);
                double t109716 = 1.0/pow(rho_b[index],1.1E1/3.0);
                double t109717 = 1.0/(t109679*t109679);
                double t109718 = 1.0/(t109688*t109688);
                double t109719 = gcaa*t109667*3.0;
                double t109720 = gamma_bb[index]*t109672*t109669*6.0;
                double t109721 = gcaa*t109673*t109668*t109669*3.0;
                double t109722 = t109720+t109721+t109719;
                double t109723 = 1.0/pow(rho_b[index],3.5E1/3.0);
                double t109724 = 1.0/(t109685*t109685);
                double t109725 = gcaa*t109667*4.0;
                double t109726 = gamma_bb[index]*t109672*t109669*1.2E1;
                double t109727 = gcaa*t109673*t109668*t109669*1.2E1;
                double t109728 = gamma_bb[index]*t109670*t109671*t109668*4.0;
                double t109729 = t109725+t109726+t109727+t109728;
                double t109730 = gcaa*t109667*2.0;
                double t109731 = gamma_bb[index]*t109672*t109669*2.0;
                double t109732 = t109730+t109731;
                double t109733 = gamma_bb[index]*gcaa*t109716*(1.6E1/3.0);
                double t109734 = t109713*t109668*t109669*(1.6E1/3.0);
                double t109735 = t109733+t109734;
                double t109736 = gamma_bb[index]*gcaa*t109716*8.0;
                double t109737 = gamma_bb[index]*gcaa*t109715*t109668*t109669*8.0;
                double t109738 = t109713*t109668*t109669*1.6E1;
                double t109739 = t109736+t109737+t109738;
                double t109740 = gamma_bb[index]*gcaa*t109716*(3.2E1/3.0);
                double t109741 = gamma_bb[index]*gcaa*t109715*t109668*t109669*3.2E1;
                double t109742 = t109713*t109668*t109669*3.2E1;
                double t109743 = t109723*t109670*t109680*(3.2E1/3.0);
                double t109744 = t109740+t109741+t109742+t109743;
                double t109745 = 1.0/pow(rho_b[index],4.0/3.0);
                double t109746 = 1.0/pow(rho_b[index],5.0/3.0);
                double t109747 = 1.0/sqrt(t109650);
                double t109748 = 1.0/t109663;
                double t109749 = 1.0/(t109660*t109660);
                double t109750 = b4p*t109653*t109746*(2.0/3.0);
                double t109751 = b2p*c*t109745*(1.0/3.0);
                double t109752 = b1p*c*t109745*t109747*(1.0/6.0);
                double t109753 = b3p*c*t109651*t109745*(1.0/2.0);
                double t109754 = t109750+t109751+t109752+t109753;
                double t109755 = t109754*t109666*t109748*t109749;
                double t109756 = ccaa1*gcaa*t109709*t109667;
                double t109757 = ccaa4*gamma_bb[index]*t109710*t109670*t109671*t109668*4.0;
                double t109758 = ccaa2*gamma_bb[index]*t109711*t109672*t109669*2.0;
                double t109759 = ccaa3*gcaa*t109712*t109673*t109668*t109669*3.0;
                double t109760 = t109756+t109757+t109758+t109759-ccaa1*gamma_bb[index]*t109714*t109672*t109669-ccaa4* \
                   t109670*t109724*t109671*t109680*t109729-ccaa2*t109732*t109672*t109718*t109668*t109669-ccaa3*gamma_bb[index]* \
                   gcaa*t109722*t109717*t109673*t109668*t109669;
                double t109761 = omega*omega;
                double t109762 = rho_b[index]*(8.334140006820045E15/1.40737488355328E14);
                double t109763 = 1.0/(rho_b[index]*rho_b[index]);
                double t109764 = 1.0/pow(t109762,4.0/3.0);
                double t109765 = 1.0/(omega*omega);
                double t109766 = pow(t109762,2.0/3.0);
                double t109768 = t109765*t109766;
                double t109767 = exp(-t109768);
                double t109769 = 1.0/pow(t109762,1.0/3.0);
                double t109770 = 1.0/omega;
                double t109771 = 1.0/rho_b[index];
                double t109772 = omega*t109761*t109771*(7.0368744177664E13/8.334140006820045E15);
                double t109773 = omega*t109769;
                double t109774 = gx*gx;
                double t109775 = t109774*t109774;
                double t109776 = gamma_bb[index]*gx*t109667;
                double t109777 = t109776+1.0;
                double t109778 = gamma_bb[index]*gx*t109667*3.0;
                double t109779 = gamma_bb[index]*gx*t109673*t109774*t109668;
                double t109780 = t109672*t109774*t109668*3.0;
                double t109781 = t109780+t109778+t109779+1.0;
                double t109782 = gamma_bb[index]*gx*t109667*4.0;
                double t109783 = gamma_bb[index]*gx*t109673*t109774*t109668*4.0;
                double t109784 = t109672*t109774*t109668*6.0;
                double t109785 = t109671*t109680*t109775;
                double t109786 = t109782+t109783+t109784+t109785+1.0;
                double t109787 = gamma_bb[index]*gx*t109667*2.0;
                double t109788 = t109672*t109774*t109668;
                double t109789 = t109787+t109788+1.0;
                double t109790 = pow(t109762,1.0/3.0);
                double t109791 = t109770*t109790;
                double t109792 = erf(t109791);
                double t109793 = t109792*(3.991211251234741E15/2.251799813685248E15);
                double t109794 = t109772-t109773;
                double t109822 = t109767*t109794;
                double t109823 = omega*t109769*(3.0/2.0);
                double t109795 = -t109822-t109823+t109772+t109793;
                double t109796 = 1.0/t109777;
                double t109797 = cx1*gx*t109667*t109796;
                double t109798 = 1.0/t109786;
                double t109799 = cx4*gamma_bb[index]*t109671*t109775*t109668*t109798*4.0;
                double t109800 = 1.0/t109789;
                double t109801 = cx2*gamma_bb[index]*t109800*t109672*t109774*2.0;
                double t109802 = 1.0/t109781;
                double t109803 = cx3*gx*t109802*t109673*t109774*t109668*3.0;
                double t109804 = 1.0/(t109777*t109777);
                double t109805 = gx*t109667*3.0;
                double t109806 = gamma_bb[index]*t109672*t109774*6.0;
                double t109807 = gx*t109673*t109774*t109668*3.0;
                double t109808 = t109805+t109806+t109807;
                double t109809 = 1.0/(t109781*t109781);
                double t109810 = gx*t109667*4.0;
                double t109811 = gamma_bb[index]*t109672*t109774*1.2E1;
                double t109812 = gx*t109673*t109774*t109668*1.2E1;
                double t109813 = gamma_bb[index]*t109671*t109775*t109668*4.0;
                double t109814 = t109810+t109811+t109812+t109813;
                double t109815 = 1.0/(t109786*t109786);
                double t109816 = gx*t109667*2.0;
                double t109817 = gamma_bb[index]*t109672*t109774*2.0;
                double t109818 = t109816+t109817;
                double t109819 = 1.0/(t109789*t109789);
                double t109820 = t109801+t109803+t109797+t109799-cx1*gamma_bb[index]*t109804*t109672*t109774-cx2* \
                   t109672*t109818*t109774*t109819*t109668-cx4*t109814*t109671*t109680*t109815*t109775-cx3*gamma_bb[index]* \
                   gx*t109673*t109808*t109809*t109774*t109668;
                double t109821 = pow(rho_b[index],4.0/3.0);
                double t109824 = omega*t109795*t109769*(4.0/3.0);
                double t109825 = t109824-1.0;
                double t109826 = gamma_bb[index]*gx*t109716*(1.6E1/3.0);
                double t109827 = t109713*t109774*t109668*(1.6E1/3.0);
                double t109828 = t109826+t109827;
                double t109829 = gamma_bb[index]*gx*t109716*8.0;
                double t109830 = gamma_bb[index]*gx*t109715*t109774*t109668*8.0;
                double t109831 = t109713*t109774*t109668*1.6E1;
                double t109832 = t109830+t109831+t109829;
                double t109833 = gamma_bb[index]*gx*t109716*(3.2E1/3.0);
                double t109834 = gamma_bb[index]*gx*t109715*t109774*t109668*3.2E1;
                double t109835 = t109713*t109774*t109668*3.2E1;
                double t109836 = t109723*t109680*t109775*(3.2E1/3.0);
                double t109837 = t109833+t109834+t109835+t109836;
                v_rho_b_gamma_bb_[index] = -t109760*(t109708+t109691*t109694*(t109707-c0p*t109664*t109666*2.0))+rho_b[index]* \
                   t109760*(-t109755+t109691*t109694*(t109755-(1.0/(t109700*t109700)*t109706*(b2f*c*t109745*(1.0/3.0) \
                   +b4f*t109653*t109746*(2.0/3.0)+b1f*c*t109745*t109747*(1.0/6.0)+b3f*c*t109651*t109745*(1.0/2.0)))/t109703+ \
                   a1f*c*c0f*t109704*t109745*(2.0/3.0)-a1p*c*c0p*t109664*t109745*(2.0/3.0))+a1p*c*c0p*t109664*t109745* \
                   (2.0/3.0))-rho_b[index]*(t109708+t109691*t109694*(t109707-t109708))*(ccaa1*gcaa*t109716*t109709*(- \
                   8.0/3.0)-ccaa2*gamma_bb[index]*t109711*t109713*t109669*(3.2E1/3.0)+ccaa1*gamma_bb[index]*t109713*t109714* \
                   t109669*8.0+ccaa4*t109723*t109670*t109724*t109680*t109729*(3.2E1/3.0)+ccaa2*t109713*t109732*t109718* \
                   t109668*t109669*(1.6E1/3.0)+ccaa4*t109670*t109724*t109671*t109680*(gcaa*t109716*(3.2E1/3.0)+gamma_bb[index]* \
                   t109713*t109669*6.4E1+gamma_bb[index]*t109723*t109670*t109668*(1.28E2/3.0)+gcaa*t109715*t109668*t109669* \
                   9.6E1)-ccaa1*gcaa*t109715*1.0/(t109675*t109675*t109675)*t109668*t109669*(1.6E1/3.0)+ccaa2*t109672* \
                   t109718*t109668*t109669*(gcaa*t109716*(1.6E1/3.0)+gamma_bb[index]*t109713*t109669*(3.2E1/3.0))-ccaa4* \
                   gamma_bb[index]*t109710*t109723*t109670*t109668*(1.28E2/3.0)+ccaa2*gamma_bb[index]*t109672*t109735* \
                   t109718*t109669*2.0-ccaa3*gcaa*t109712*t109715*t109668*t109669*2.4E1+ccaa4*gamma_bb[index]*t109670* \
                   t109724*t109671*t109744*t109668*4.0+ccaa3*gcaa*t109717*t109673*t109739*t109668*t109669*3.0-ccaa4*t109670* \
                   t109671*t109680*t109744*t109729*1.0/(t109685*t109685*t109685)*2.0-ccaa2*t109732*t109672*t109735*t109668* \
                   t109669*1.0/(t109688*t109688*t109688)*2.0+ccaa3*gamma_bb[index]*gcaa*t109717*t109673*t109668*t109669* \
                   (gcaa*t109716*8.0+gamma_bb[index]*t109713*t109669*3.2E1+gcaa*t109715*t109668*t109669*2.4E1)+ccaa3* \
                   gamma_bb[index]*gcaa*t109722*t109715*t109717*t109668*t109669*8.0-ccaa3*gamma_bb[index]*gcaa*t109722* \
                   t109673*t109739*t109668*t109669*1.0/(t109679*t109679*t109679)*2.0)-c0*t109821*t109825*(cx1*gx*t109716* \
                   t109796*(-8.0/3.0)+cx1*gamma_bb[index]*t109713*t109804*t109774*8.0-cx2*gamma_bb[index]*t109800*t109713* \
                   t109774*(3.2E1/3.0)+cx2*t109713*t109818*t109774*t109819*t109668*(1.6E1/3.0)+cx4*t109723*t109814*t109680* \
                   t109815*t109775*(3.2E1/3.0)+cx4*t109671*t109680*t109815*t109775*(gx*t109716*(3.2E1/3.0)+gamma_bb[index]* \
                   t109713*t109774*6.4E1+gamma_bb[index]*t109723*t109775*t109668*(1.28E2/3.0)+gx*t109715*t109774*t109668* \
                   9.6E1)-cx1*gx*t109715*t109774*t109668*1.0/(t109777*t109777*t109777)*(1.6E1/3.0)+cx2*t109672*t109774* \
                   t109819*t109668*(gx*t109716*(1.6E1/3.0)+gamma_bb[index]*t109713*t109774*(3.2E1/3.0))+cx2*gamma_bb[index]* \
                   t109672*t109774*t109819*t109828*2.0-cx4*gamma_bb[index]*t109723*t109775*t109668*t109798*(1.28E2/3.0) \
                   -cx3*gx*t109802*t109715*t109774*t109668*2.4E1+cx4*gamma_bb[index]*t109671*t109815*t109837*t109775* \
                   t109668*4.0+cx3*gx*t109832*t109673*t109809*t109774*t109668*3.0-cx2*t109672*t109818*t109774*t109828* \
                   t109668*1.0/(t109789*t109789*t109789)*2.0-cx4*t109814*t109671*t109680*t109837*t109775*1.0/(t109786* \
                   t109786*t109786)*2.0+cx3*gamma_bb[index]*gx*t109673*t109809*t109774*t109668*(gx*t109716*8.0+gamma_bb[index]* \
                   t109713*t109774*3.2E1+gx*t109715*t109774*t109668*2.4E1)+cx3*gamma_bb[index]*gx*t109715*t109808*t109809* \
                   t109774*t109668*8.0-cx3*gamma_bb[index]*gx*t109832*t109673*1.0/(t109781*t109781*t109781)*t109808*t109774* \
                   t109668*2.0)-c0*pow(rho_b[index],1.0/3.0)*t109820*t109825*(4.0/3.0)+c0*t109820*t109821*(omega*t109769* \
                   (omega*t109764*(-8.334140006820045E15/2.81474976710656E14)+t109767*(omega*t109764*(2.778046668940015E15/ \
                   1.40737488355328E14)-omega*t109761*t109763*(7.0368744177664E13/8.334140006820045E15))+omega*t109761* \
                   t109763*(7.0368744177664E13/8.334140006820045E15)+t109765*t109767*t109769*(t109773-omega*t109761*t109771* \
                   (7.0368744177664E13/8.334140006820045E15))*(2.778046668940015E15/7.0368744177664E13)-1.0/sqrt(3.141592653589793) \
                   *t109770*1.0/pow(t109762,2.0/3.0)*t109767*(1.108777112152858E31/1.584563250285287E29))*(4.0/3.0)+omega* \
                   t109764*t109795*(2.778046668940015E15/1.05553116266496E14));
            } else {
                v_rho_b_gamma_bb_[index] = 0.0;
            }

            //V_gamma_aa_gamma_aa
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t108660 = 1.0/pow(rho_a[index],1.0/3.0);
                double t108661 = c*t108660;
                double t108662 = sqrt(t108661);
                double t108663 = pow(t108661,3.0/2.0);
                double t108664 = c*c;
                double t108665 = 1.0/pow(rho_a[index],2.0/3.0);
                double t108666 = 1.0/c0p;
                double t108667 = b1p*t108662;
                double t108668 = b3p*t108663;
                double t108669 = b4p*t108664*t108665;
                double t108670 = b2p*c*t108660;
                double t108671 = t108670+t108667+t108668+t108669;
                double t108672 = 1.0/t108671;
                double t108673 = t108672*t108666*(1.0/2.0);
                double t108674 = t108673+1.0;
                double t108675 = log(t108674);
                double t108676 = a1p*c*t108660;
                double t108677 = t108676+1.0;
                double t108678 = pow(2.0,1.0/3.0);
                double t108679 = t108678*2.0;
                double t108680 = t108679-2.0;
                double t108681 = two_13*2.0;
                double t108682 = t108681-2.0;
                double t108683 = 1.0/t108682;
                double t108684 = 1.0/c0f;
                double t108685 = 1.0/pow(rho_b[index],1.0/3.0);
                double t108686 = c*t108685;
                double t108687 = sqrt(t108686);
                double t108688 = pow(t108686,3.0/2.0);
                double t108689 = 1.0/pow(rho_b[index],2.0/3.0);
                double t108690 = b1p*t108687;
                double t108691 = b3p*t108688;
                double t108692 = b4p*t108664*t108689;
                double t108693 = b2p*c*t108685;
                double t108694 = t108690+t108691+t108692+t108693;
                double t108695 = 1.0/t108694;
                double t108696 = t108666*t108695*(1.0/2.0);
                double t108697 = t108696+1.0;
                double t108698 = log(t108697);
                double t108699 = a1p*c*t108685;
                double t108700 = t108699+1.0;
                double t108701 = c0p*t108700*t108698*2.0;
                double t108702 = rho_a[index]+rho_b[index];
                double t108703 = 1.0/pow(t108702,1.0/3.0);
                double t108704 = c*t108703;
                double t108705 = sqrt(t108704);
                double t108706 = pow(t108704,3.0/2.0);
                double t108707 = 1.0/pow(t108702,2.0/3.0);
                double t108708 = b1p*t108705;
                double t108709 = b3p*t108706;
                double t108710 = b4p*t108707*t108664;
                double t108711 = b2p*c*t108703;
                double t108712 = t108710+t108711+t108708+t108709;
                double t108713 = 1.0/t108712;
                double t108714 = t108713*t108666*(1.0/2.0);
                double t108715 = t108714+1.0;
                double t108716 = log(t108715);
                double t108717 = a1p*c*t108703;
                double t108718 = t108717+1.0;
                double t108719 = c0p*t108716*t108718*2.0;
                double t108720 = rho_a[index]-rho_b[index];
                double t108721 = t108720*t108720;
                double t108722 = 1.0/t108702;
                double t108723 = t108720*t108722;
                double t108724 = 1.0/(t108702*t108702*t108702*t108702);
                double t108725 = t108721*t108721;
                double t108726 = t108723+1.0;
                double t108727 = pow(t108726,4.0/3.0);
                double t108728 = -t108723+1.0;
                double t108729 = pow(t108728,4.0/3.0);
                double t108730 = t108727+t108729-2.0;
                double t108731 = gcab*gcab;
                double t108732 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t108733 = 1.0/pow(rho_a[index],8.0/3.0);
                double t108734 = gamma_aa[index]*t108733*(1.0/2.0);
                double t108735 = 1.0/pow(rho_b[index],8.0/3.0);
                double t108736 = gamma_bb[index]*t108735*(1.0/2.0);
                double t108737 = t108734+t108736;
                double t108738 = gcab*t108737;
                double t108739 = t108738+1.0;
                double t108740 = t108737*t108737;
                double t108741 = t108731*t108740;
                double t108742 = gcab*t108737*2.0;
                double t108743 = t108741+t108742+1.0;
                double t108744 = t108731*t108731;
                double t108761 = gcab*t108733*2.0;
                double t108762 = t108731*t108733*t108737*6.0;
                double t108763 = gcab*t108731*t108740*t108733*6.0;
                double t108764 = t108740*t108733*t108744*t108737*2.0;
                double t108745 = t108761+t108762+t108763+t108764;
                double t108746 = t108740*t108740;
                double t108766 = gcab*t108733*(3.0/2.0);
                double t108767 = t108731*t108733*t108737*3.0;
                double t108768 = gcab*t108731*t108740*t108733*(3.0/2.0);
                double t108747 = t108766+t108767+t108768;
                double t108748 = t108731*t108740*3.0;
                double t108749 = gcab*t108731*t108740*t108737;
                double t108750 = gcab*t108737*3.0;
                double t108751 = t108750+t108748+t108749+1.0;
                double t108758 = gcab*t108733;
                double t108759 = t108731*t108733*t108737;
                double t108752 = t108758+t108759;
                double t108753 = t108731*t108740*6.0;
                double t108754 = gcab*t108731*t108740*t108737*4.0;
                double t108755 = t108744*t108746;
                double t108756 = gcab*t108737*4.0;
                double t108757 = t108753+t108754+t108755+t108756+1.0;
                double t108760 = 1.0/(t108743*t108743);
                double t108765 = 1.0/(t108757*t108757);
                double t108769 = 1.0/(t108751*t108751);
                double t108770 = c0p*t108675*t108677*2.0;
                double t108771 = b1f*t108662;
                double t108772 = b3f*t108663;
                double t108773 = b4f*t108664*t108665;
                double t108774 = b2f*c*t108660;
                double t108775 = t108771+t108772+t108773+t108774;
                double t108776 = 1.0/t108775;
                double t108777 = t108684*t108776*(1.0/2.0);
                double t108778 = t108777+1.0;
                double t108779 = log(t108778);
                double t108780 = a1f*c*t108660;
                double t108781 = t108780+1.0;
                double t108782 = t108770-c0f*t108781*t108779*2.0;
                double t108783 = t108770-t108680*t108683*t108782;
                double t108784 = gcaa*gcaa;
                double t108785 = gamma_aa[index]*gamma_aa[index];
                double t108786 = t108784*t108784;
                double t108787 = 1.0/pow(rho_a[index],3.2E1/3.0);
                double t108788 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t108789 = gamma_aa[index]*gcaa*t108733;
                double t108790 = t108789+1.0;
                double t108791 = gamma_aa[index]*gcaa*t108733*2.0;
                double t108792 = t108732*t108784*t108785;
                double t108793 = t108791+t108792+1.0;
                double t108794 = gamma_aa[index]*gcaa*t108733*3.0;
                double t108795 = gamma_aa[index]*gcaa*t108784*t108785*t108788;
                double t108796 = t108732*t108784*t108785*3.0;
                double t108797 = t108794+t108795+t108796+1.0;
                double t108798 = t108785*t108785;
                double t108814 = gcaa*t108733*4.0;
                double t108815 = gamma_aa[index]*t108732*t108784*1.2E1;
                double t108816 = gcaa*t108784*t108785*t108788*1.2E1;
                double t108817 = gamma_aa[index]*t108785*t108786*t108787*4.0;
                double t108799 = t108814+t108815+t108816+t108817;
                double t108800 = gamma_aa[index]*gcaa*t108733*4.0;
                double t108801 = gamma_aa[index]*gcaa*t108784*t108785*t108788*4.0;
                double t108802 = t108732*t108784*t108785*6.0;
                double t108803 = t108786*t108787*t108798;
                double t108804 = t108800+t108801+t108802+t108803+1.0;
                double t108807 = gcaa*t108733*2.0;
                double t108808 = gamma_aa[index]*t108732*t108784*2.0;
                double t108805 = t108807+t108808;
                double t108806 = 1.0/(t108797*t108797);
                double t108809 = 1.0/(t108793*t108793);
                double t108810 = gcaa*t108733*3.0;
                double t108811 = gamma_aa[index]*t108732*t108784*6.0;
                double t108812 = gcaa*t108784*t108785*t108788*3.0;
                double t108813 = t108810+t108811+t108812;
                double t108818 = 1.0/(t108804*t108804);
                double t108819 = rho_a[index]*(8.334140006820045E15/1.40737488355328E14);
                double t108820 = omega*omega;
                double t108821 = 1.0/rho_a[index];
                double t108822 = omega*t108820*t108821*(7.0368744177664E13/8.334140006820045E15);
                double t108823 = 1.0/pow(t108819,1.0/3.0);
                double t108824 = gx*gx;
                double t108825 = t108824*t108824;
                double t108826 = gamma_aa[index]*gx*t108733;
                double t108827 = t108826+1.0;
                double t108828 = gamma_aa[index]*gx*t108733*2.0;
                double t108829 = t108732*t108824*t108785;
                double t108830 = t108828+t108829+1.0;
                double t108831 = gamma_aa[index]*gx*t108733*3.0;
                double t108832 = gamma_aa[index]*gx*t108824*t108785*t108788;
                double t108833 = t108732*t108824*t108785*3.0;
                double t108834 = t108831+t108832+t108833+1.0;
                double t108850 = gx*t108733*4.0;
                double t108851 = gamma_aa[index]*t108732*t108824*1.2E1;
                double t108852 = gx*t108824*t108785*t108788*1.2E1;
                double t108853 = gamma_aa[index]*t108825*t108785*t108787*4.0;
                double t108835 = t108850+t108851+t108852+t108853;
                double t108836 = gamma_aa[index]*gx*t108733*4.0;
                double t108837 = gamma_aa[index]*gx*t108824*t108785*t108788*4.0;
                double t108838 = t108732*t108824*t108785*6.0;
                double t108839 = t108825*t108787*t108798;
                double t108840 = t108836+t108837+t108838+t108839+1.0;
                double t108843 = gx*t108733*2.0;
                double t108844 = gamma_aa[index]*t108732*t108824*2.0;
                double t108841 = t108843+t108844;
                double t108842 = 1.0/(t108834*t108834);
                double t108845 = 1.0/(t108830*t108830);
                double t108846 = gx*t108733*3.0;
                double t108847 = gamma_aa[index]*t108732*t108824*6.0;
                double t108848 = gx*t108824*t108785*t108788*3.0;
                double t108849 = t108846+t108847+t108848;
                double t108854 = 1.0/(t108840*t108840);
                v_gamma_aa_gamma_aa_[index] = (rho_a[index]*t108783+rho_b[index]*(t108701-t108680*t108683*(t108701- \
                   c0f*log((t108684*(1.0/2.0))/(b1f*t108687+b3f*t108688+b2f*c*t108685+b4f*t108664*t108689)+1.0)*(a1f* \
                   c*t108685+1.0)*2.0))-t108702*(t108719-t108730*t108724*t108725*t108683*(t108719-c0f*log((t108684*(1.0/ \
                   2.0))/(b1f*t108705+b3f*t108706+b2f*c*t108703+b4f*t108707*t108664)+1.0)*(a1f*c*t108703+1.0)*2.0)+(Aa* \
                   t108730*t108683*log((1.0/2.0)/(Aa*(b1a*t108705+b3a*t108706+b2a*c*t108703+b4a*t108707*t108664))+1.0) \
                   *(t108724*t108725-1.0)*(a1a*c*t108703+1.0)*2.0)/d2fz0))*((ccab2*t108731*t108732*(1.0/2.0))/t108743- \
                   ccab1*t108731*t108732*1.0/(t108739*t108739)*(1.0/2.0)+ccab2*t108731*t108740*1.0/(t108743*t108743*t108743) \
                   *(t108752*t108752)*2.0+ccab4*t108744*(t108745*t108745)*t108746*1.0/(t108757*t108757*t108757)*2.0-ccab2* \
                   t108740*t108732*t108760*t108744*(1.0/2.0)-ccab4*t108744*t108746*t108765*(t108731*t108732*3.0+t108740* \
                   t108732*t108744*3.0+gcab*t108731*t108732*t108737*6.0)+(ccab4*t108740*t108732*t108744*3.0)/t108757- \
                   ccab2*t108731*t108733*t108760*t108752*t108737*2.0+(ccab3*gcab*t108731*t108732*t108737*(3.0/2.0))/t108751+ \
                   ccab1*gcab*t108731*t108732*t108737*1.0/(t108739*t108739*t108739)*(1.0/2.0)+ccab3*gcab*t108731*t108740* \
                   1.0/(t108751*t108751*t108751)*t108737*(t108747*t108747)*2.0-ccab3*gcab*t108731*t108740*t108733*t108747* \
                   t108769*3.0-ccab4*t108740*t108733*t108744*t108745*t108737*t108765*4.0-ccab3*gcab*t108731*t108740*t108737* \
                   t108769*(t108731*t108732*(3.0/2.0)+gcab*t108731*t108732*t108737*(3.0/2.0)))+rho_a[index]*t108783*(ccaa1* \
                   t108732*1.0/(t108790*t108790)*t108784*2.0-(ccaa2*t108732*t108784*2.0)/t108793+ccaa2*t108809*t108785* \
                   t108786*t108787*2.0-(ccaa4*t108785*t108786*t108787*1.2E1)/t108804+ccaa4*t108818*t108786*t108787*t108798* \
                   (t108732*t108784*1.2E1+t108785*t108786*t108787*1.2E1+gamma_aa[index]*gcaa*t108784*t108788*2.4E1)-ccaa1* \
                   gamma_aa[index]*gcaa*1.0/(t108790*t108790*t108790)*t108784*t108788*2.0-(ccaa3*gamma_aa[index]*gcaa* \
                   t108784*t108788*6.0)/t108797-ccaa2*t108732*(t108805*t108805)*t108784*1.0/(t108793*t108793*t108793) \
                   *t108785*2.0-ccaa4*1.0/(t108804*t108804*t108804)*t108786*t108787*t108798*(t108799*t108799)*2.0+ccaa2* \
                   gamma_aa[index]*t108732*t108805*t108809*t108784*4.0+ccaa4*gamma_aa[index]*t108818*t108785*t108786* \
                   t108787*t108799*8.0+ccaa3*gcaa*t108813*t108806*t108784*t108785*t108788*6.0+ccaa3*gamma_aa[index]*gcaa* \
                   t108806*t108784*t108785*t108788*(t108732*t108784*6.0+gamma_aa[index]*gcaa*t108784*t108788*6.0)-ccaa3* \
                   gamma_aa[index]*gcaa*(t108813*t108813)*t108784*t108785*t108788*1.0/(t108797*t108797*t108797)*2.0)+ \
                   c0*pow(rho_a[index],4.0/3.0)*(omega*t108823*(t108822+erf(pow(t108819,1.0/3.0)/omega)*(3.991211251234741E15/ \
                   2.251799813685248E15)-omega*t108823*(3.0/2.0)-exp(-1.0/(omega*omega)*pow(t108819,2.0/3.0))*(t108822- \
                   omega*t108823))*(4.0/3.0)-1.0)*(cx1*t108732*t108824*1.0/(t108827*t108827)*2.0-(cx2*t108732*t108824* \
                   2.0)/t108830+cx2*t108825*t108845*t108785*t108787*2.0-(cx4*t108825*t108785*t108787*1.2E1)/t108840+cx4* \
                   t108825*t108854*t108787*t108798*(t108732*t108824*1.2E1+t108825*t108785*t108787*1.2E1+gamma_aa[index]* \
                   gx*t108824*t108788*2.4E1)-cx1*gamma_aa[index]*gx*t108824*1.0/(t108827*t108827*t108827)*t108788*2.0- \
                   (cx3*gamma_aa[index]*gx*t108824*t108788*6.0)/t108834-cx2*1.0/(t108830*t108830*t108830)*t108732*(t108841* \
                   t108841)*t108824*t108785*2.0-cx4*1.0/(t108840*t108840*t108840)*t108825*(t108835*t108835)*t108787*t108798* \
                   2.0+cx2*gamma_aa[index]*t108732*t108841*t108824*t108845*4.0+cx4*gamma_aa[index]*t108825*t108835*t108854* \
                   t108785*t108787*8.0+cx3*gx*t108824*t108842*t108785*t108849*t108788*6.0+cx3*gamma_aa[index]*gx*t108824* \
                   t108842*t108785*t108788*(t108732*t108824*6.0+gamma_aa[index]*gx*t108824*t108788*6.0)-cx3*gamma_aa[index]* \
                   gx*t108824*1.0/(t108834*t108834*t108834)*t108785*(t108849*t108849)*t108788*2.0);
            } else if (rho_a[index] > cutoff_) {
                double t110600 = 1.0/pow(rho_a[index],1.0/3.0);
                double t110601 = c*t110600;
                double t110602 = sqrt(t110601);
                double t110603 = pow(t110601,3.0/2.0);
                double t110604 = c*c;
                double t110605 = 1.0/pow(rho_a[index],2.0/3.0);
                double t110606 = 1.0/c0p;
                double t110607 = b1p*t110602;
                double t110608 = b3p*t110603;
                double t110609 = b4p*t110604*t110605;
                double t110610 = b2p*c*t110600;
                double t110611 = t110610+t110607+t110608+t110609;
                double t110612 = 1.0/t110611;
                double t110613 = t110612*t110606*(1.0/2.0);
                double t110614 = t110613+1.0;
                double t110615 = log(t110614);
                double t110616 = a1p*c*t110600;
                double t110617 = t110616+1.0;
                double t110618 = gcaa*gcaa;
                double t110619 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t110620 = 1.0/pow(rho_a[index],8.0/3.0);
                double t110621 = gamma_aa[index]*gamma_aa[index];
                double t110622 = t110618*t110618;
                double t110623 = 1.0/pow(rho_a[index],3.2E1/3.0);
                double t110624 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t110625 = gamma_aa[index]*gcaa*t110620;
                double t110626 = t110625+1.0;
                double t110627 = gamma_aa[index]*gcaa*t110620*2.0;
                double t110628 = t110621*t110618*t110619;
                double t110629 = t110627+t110628+1.0;
                double t110630 = gamma_aa[index]*gcaa*t110620*3.0;
                double t110631 = gamma_aa[index]*gcaa*t110621*t110624*t110618;
                double t110632 = t110621*t110618*t110619*3.0;
                double t110633 = t110630+t110631+t110632+1.0;
                double t110634 = t110621*t110621;
                double t110650 = gcaa*t110620*4.0;
                double t110651 = gamma_aa[index]*t110618*t110619*1.2E1;
                double t110652 = gcaa*t110621*t110624*t110618*1.2E1;
                double t110653 = gamma_aa[index]*t110621*t110622*t110623*4.0;
                double t110635 = t110650+t110651+t110652+t110653;
                double t110636 = gamma_aa[index]*gcaa*t110620*4.0;
                double t110637 = gamma_aa[index]*gcaa*t110621*t110624*t110618*4.0;
                double t110638 = t110621*t110618*t110619*6.0;
                double t110639 = t110622*t110623*t110634;
                double t110640 = t110636+t110637+t110638+t110639+1.0;
                double t110643 = gcaa*t110620*2.0;
                double t110644 = gamma_aa[index]*t110618*t110619*2.0;
                double t110641 = t110643+t110644;
                double t110642 = 1.0/(t110633*t110633);
                double t110645 = 1.0/(t110629*t110629);
                double t110646 = gcaa*t110620*3.0;
                double t110647 = gamma_aa[index]*t110618*t110619*6.0;
                double t110648 = gcaa*t110621*t110624*t110618*3.0;
                double t110649 = t110646+t110647+t110648;
                double t110654 = 1.0/(t110640*t110640);
                double t110655 = rho_a[index]*(8.334140006820045E15/1.40737488355328E14);
                double t110656 = omega*omega;
                double t110657 = 1.0/rho_a[index];
                double t110658 = omega*t110656*t110657*(7.0368744177664E13/8.334140006820045E15);
                double t110659 = 1.0/pow(t110655,1.0/3.0);
                double t110660 = gx*gx;
                double t110661 = t110660*t110660;
                double t110662 = gamma_aa[index]*gx*t110620;
                double t110663 = t110662+1.0;
                double t110664 = gamma_aa[index]*gx*t110620*2.0;
                double t110665 = t110621*t110660*t110619;
                double t110666 = t110664+t110665+1.0;
                double t110667 = gamma_aa[index]*gx*t110620*3.0;
                double t110668 = gamma_aa[index]*gx*t110621*t110624*t110660;
                double t110669 = t110621*t110660*t110619*3.0;
                double t110670 = t110667+t110668+t110669+1.0;
                double t110686 = gx*t110620*4.0;
                double t110687 = gamma_aa[index]*t110660*t110619*1.2E1;
                double t110688 = gx*t110621*t110624*t110660*1.2E1;
                double t110689 = gamma_aa[index]*t110621*t110623*t110661*4.0;
                double t110671 = t110686+t110687+t110688+t110689;
                double t110672 = gamma_aa[index]*gx*t110620*4.0;
                double t110673 = gamma_aa[index]*gx*t110621*t110624*t110660*4.0;
                double t110674 = t110621*t110660*t110619*6.0;
                double t110675 = t110623*t110634*t110661;
                double t110676 = t110672+t110673+t110674+t110675+1.0;
                double t110679 = gx*t110620*2.0;
                double t110680 = gamma_aa[index]*t110660*t110619*2.0;
                double t110677 = t110680+t110679;
                double t110678 = 1.0/(t110670*t110670);
                double t110681 = 1.0/(t110666*t110666);
                double t110682 = gx*t110620*3.0;
                double t110683 = gamma_aa[index]*t110660*t110619*6.0;
                double t110684 = gx*t110621*t110624*t110660*3.0;
                double t110685 = t110682+t110683+t110684;
                double t110690 = 1.0/(t110676*t110676);
                v_gamma_aa_gamma_aa_[index] = rho_a[index]*(((pow(2.0,1.0/3.0)*2.0-2.0)*(c0f*log((1.0/2.0)/(c0f*(b1f* \
                   t110602+b3f*t110603+b2f*c*t110600+b4f*t110604*t110605))+1.0)*(a1f*c*t110600+1.0)*2.0-c0p*t110615*t110617* \
                   2.0))/(two_13*2.0-2.0)+c0p*t110615*t110617*2.0)*(ccaa1*1.0/(t110626*t110626)*t110618*t110619*2.0-(ccaa2* \
                   t110618*t110619*2.0)/t110629+ccaa2*t110621*t110622*t110623*t110645*2.0-(ccaa4*t110621*t110622*t110623* \
                   1.2E1)/t110640+ccaa4*t110622*t110623*t110634*t110654*(t110618*t110619*1.2E1+t110621*t110622*t110623* \
                   1.2E1+gamma_aa[index]*gcaa*t110624*t110618*2.4E1)-(ccaa3*gamma_aa[index]*gcaa*t110624*t110618*6.0) \
                   /t110633-ccaa1*gamma_aa[index]*gcaa*t110624*1.0/(t110626*t110626*t110626)*t110618*2.0-ccaa4*t110622* \
                   1.0/(t110640*t110640*t110640)*t110623*t110634*(t110635*t110635)*2.0-ccaa2*t110621*(t110641*t110641) \
                   *t110618*t110619*1.0/(t110629*t110629*t110629)*2.0+ccaa2*gamma_aa[index]*t110641*t110618*t110645*t110619* \
                   4.0+ccaa4*gamma_aa[index]*t110621*t110622*t110623*t110635*t110654*8.0+ccaa3*gcaa*t110621*t110624*t110642* \
                   t110618*t110649*6.0+ccaa3*gamma_aa[index]*gcaa*t110621*t110624*t110642*t110618*(t110618*t110619*6.0+ \
                   gamma_aa[index]*gcaa*t110624*t110618*6.0)-ccaa3*gamma_aa[index]*gcaa*t110621*t110624*1.0/(t110633* \
                   t110633*t110633)*t110618*(t110649*t110649)*2.0)+c0*pow(rho_a[index],4.0/3.0)*(omega*t110659*(t110658+ \
                   erf(pow(t110655,1.0/3.0)/omega)*(3.991211251234741E15/2.251799813685248E15)-omega*t110659*(3.0/2.0) \
                   -exp(-1.0/(omega*omega)*pow(t110655,2.0/3.0))*(t110658-omega*t110659))*(4.0/3.0)-1.0)*(cx1*t110660* \
                   1.0/(t110663*t110663)*t110619*2.0-(cx2*t110660*t110619*2.0)/t110666+cx2*t110621*t110623*t110661*t110681* \
                   2.0-(cx4*t110621*t110623*t110661*1.2E1)/t110676+cx4*t110623*t110634*t110661*t110690*(t110660*t110619* \
                   1.2E1+t110621*t110623*t110661*1.2E1+gamma_aa[index]*gx*t110624*t110660*2.4E1)-cx1*gamma_aa[index]* \
                   gx*t110624*t110660*1.0/(t110663*t110663*t110663)*2.0-(cx3*gamma_aa[index]*gx*t110624*t110660*6.0)/ \
                   t110670-cx2*t110621*t110660*t110619*1.0/(t110666*t110666*t110666)*(t110677*t110677)*2.0-cx4*t110623* \
                   t110634*t110661*(t110671*t110671)*1.0/(t110676*t110676*t110676)*2.0+cx2*gamma_aa[index]*t110660*t110681* \
                   t110619*t110677*4.0+cx4*gamma_aa[index]*t110621*t110623*t110661*t110671*t110690*8.0+cx3*gx*t110621* \
                   t110624*t110660*t110685*t110678*6.0+cx3*gamma_aa[index]*gx*t110621*t110624*t110660*t110678*(t110660* \
                   t110619*6.0+gamma_aa[index]*gx*t110624*t110660*6.0)-cx3*gamma_aa[index]*gx*t110621*t110624*t110660* \
                   1.0/(t110670*t110670*t110670)*(t110685*t110685)*2.0);
            } else if (rho_b[index] > cutoff_) {
                v_gamma_aa_gamma_aa_[index] = 0.0;
            } else {
                v_gamma_aa_gamma_aa_[index] = 0.0;
            }

            //V_gamma_aa_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_aa_gamma_ab_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_aa_gamma_ab_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_aa_gamma_ab_[index] = 0.0;
            } else {
                v_gamma_aa_gamma_ab_[index] = 0.0;
            }

            //V_gamma_aa_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t108857 = 1.0/pow(rho_a[index],1.0/3.0);
                double t108858 = c*t108857;
                double t108859 = sqrt(t108858);
                double t108860 = pow(t108858,3.0/2.0);
                double t108861 = c*c;
                double t108862 = 1.0/pow(rho_a[index],2.0/3.0);
                double t108863 = 1.0/c0p;
                double t108864 = b1p*t108859;
                double t108865 = b3p*t108860;
                double t108866 = b4p*t108861*t108862;
                double t108867 = b2p*c*t108857;
                double t108868 = t108864+t108865+t108866+t108867;
                double t108869 = 1.0/t108868;
                double t108870 = t108863*t108869*(1.0/2.0);
                double t108871 = t108870+1.0;
                double t108872 = log(t108871);
                double t108873 = a1p*c*t108857;
                double t108874 = t108873+1.0;
                double t108875 = pow(2.0,1.0/3.0);
                double t108876 = t108875*2.0;
                double t108877 = t108876-2.0;
                double t108878 = two_13*2.0;
                double t108879 = t108878-2.0;
                double t108880 = 1.0/t108879;
                double t108881 = 1.0/c0f;
                double t108882 = 1.0/pow(rho_b[index],1.0/3.0);
                double t108883 = c*t108882;
                double t108884 = sqrt(t108883);
                double t108885 = pow(t108883,3.0/2.0);
                double t108886 = 1.0/pow(rho_b[index],2.0/3.0);
                double t108887 = b1p*t108884;
                double t108888 = b3p*t108885;
                double t108889 = b4p*t108861*t108886;
                double t108890 = b2p*c*t108882;
                double t108891 = t108890+t108887+t108888+t108889;
                double t108892 = 1.0/t108891;
                double t108893 = t108863*t108892*(1.0/2.0);
                double t108894 = t108893+1.0;
                double t108895 = log(t108894);
                double t108896 = a1p*c*t108882;
                double t108897 = t108896+1.0;
                double t108898 = c0p*t108895*t108897*2.0;
                double t108899 = rho_a[index]+rho_b[index];
                double t108900 = 1.0/pow(t108899,1.0/3.0);
                double t108901 = c*t108900;
                double t108902 = sqrt(t108901);
                double t108903 = pow(t108901,3.0/2.0);
                double t108904 = 1.0/pow(t108899,2.0/3.0);
                double t108905 = b1p*t108902;
                double t108906 = b3p*t108903;
                double t108907 = b4p*t108904*t108861;
                double t108908 = b2p*c*t108900;
                double t108909 = t108905+t108906+t108907+t108908;
                double t108910 = 1.0/t108909;
                double t108911 = t108910*t108863*(1.0/2.0);
                double t108912 = t108911+1.0;
                double t108913 = log(t108912);
                double t108914 = a1p*c*t108900;
                double t108915 = t108914+1.0;
                double t108916 = c0p*t108913*t108915*2.0;
                double t108917 = rho_a[index]-rho_b[index];
                double t108918 = t108917*t108917;
                double t108919 = 1.0/t108899;
                double t108920 = t108917*t108919;
                double t108921 = 1.0/(t108899*t108899*t108899*t108899);
                double t108922 = t108918*t108918;
                double t108923 = t108920+1.0;
                double t108924 = pow(t108923,4.0/3.0);
                double t108925 = -t108920+1.0;
                double t108926 = pow(t108925,4.0/3.0);
                double t108927 = t108924+t108926-2.0;
                double t108928 = gcab*gcab;
                double t108931 = 1.0/pow(rho_a[index],8.0/3.0);
                double t108932 = 1.0/pow(rho_b[index],8.0/3.0);
                double t108933 = gamma_aa[index]*t108931*(1.0/2.0);
                double t108934 = gamma_bb[index]*t108932*(1.0/2.0);
                double t108929 = t108933+t108934;
                double t108930 = t108929*t108929;
                double t108935 = t108928*t108928;
                double t108936 = t108930*t108930;
                double t108937 = t108930*t108928*3.0;
                double t108938 = gcab*t108930*t108928*t108929;
                double t108939 = gcab*t108929*3.0;
                double t108940 = t108937+t108938+t108939+1.0;
                double t108941 = t108930*t108928;
                double t108942 = gcab*t108929*2.0;
                double t108943 = t108941+t108942+1.0;
                double t108944 = t108930*t108928*6.0;
                double t108945 = gcab*t108930*t108928*t108929*4.0;
                double t108946 = t108935*t108936;
                double t108947 = gcab*t108929*4.0;
                double t108948 = t108944+t108945+t108946+t108947+1.0;
                double t108949 = 1.0/(t108943*t108943);
                double t108950 = gcab*t108931;
                double t108951 = t108931*t108928*t108929;
                double t108952 = t108950+t108951;
                double t108953 = gcab*t108932;
                double t108954 = t108932*t108928*t108929;
                double t108955 = t108953+t108954;
                double t108956 = gcab*t108929;
                double t108957 = t108956+1.0;
                double t108958 = gcab*t108931*2.0;
                double t108959 = t108931*t108928*t108929*6.0;
                double t108960 = gcab*t108930*t108931*t108928*6.0;
                double t108961 = t108930*t108931*t108935*t108929*2.0;
                double t108962 = t108960+t108961+t108958+t108959;
                double t108963 = 1.0/(t108948*t108948);
                double t108964 = gcab*t108932*2.0;
                double t108965 = t108932*t108928*t108929*6.0;
                double t108966 = gcab*t108930*t108932*t108928*6.0;
                double t108967 = t108930*t108932*t108935*t108929*2.0;
                double t108968 = t108964+t108965+t108966+t108967;
                double t108969 = gcab*t108931*(3.0/2.0);
                double t108970 = t108931*t108928*t108929*3.0;
                double t108971 = gcab*t108930*t108931*t108928*(3.0/2.0);
                double t108972 = t108970+t108971+t108969;
                double t108973 = 1.0/(t108940*t108940);
                double t108974 = gcab*t108932*(3.0/2.0);
                double t108975 = t108932*t108928*t108929*3.0;
                double t108976 = gcab*t108930*t108932*t108928*(3.0/2.0);
                double t108977 = t108974+t108975+t108976;
                v_gamma_aa_gamma_bb_[index] = (-rho_b[index]*(t108898-t108880*t108877*(t108898-c0f*log((t108881*(1.0/ \
                   2.0))/(b1f*t108884+b3f*t108885+b2f*c*t108882+b4f*t108861*t108886)+1.0)*(a1f*c*t108882+1.0)*2.0))+t108899* \
                   (t108916-t108921*t108922*t108880*t108927*(t108916-c0f*log((t108881*(1.0/2.0))/(b1f*t108902+b3f*t108903+ \
                   b2f*c*t108900+b4f*t108904*t108861)+1.0)*(a1f*c*t108900+1.0)*2.0)+(Aa*t108880*t108927*log((1.0/2.0) \
                   /(Aa*(b1a*t108902+b3a*t108903+b2a*c*t108900+b4a*t108904*t108861))+1.0)*(t108921*t108922-1.0)*(a1a* \
                   c*t108900+1.0)*2.0)/d2fz0)+rho_a[index]*(t108880*t108877*(c0p*t108872*t108874*2.0-c0f*log((t108881* \
                   (1.0/2.0))/(b1f*t108859+b3f*t108860+b2f*c*t108857+b4f*t108861*t108862)+1.0)*(a1f*c*t108857+1.0)*2.0) \
                   -c0p*t108872*t108874*2.0))*(ccab4*t108935*t108936*t108963*(t108931*t108932*t108928*3.0+t108930*t108931* \
                   t108932*t108935*3.0+gcab*t108931*t108932*t108928*t108929*6.0)-(ccab2*t108931*t108932*t108928*(1.0/ \
                   2.0))/t108943+ccab1*t108931*t108932*t108928*1.0/(t108957*t108957)*(1.0/2.0)+ccab2*t108930*t108931* \
                   t108932*t108935*t108949*(1.0/2.0)+ccab2*t108932*t108952*t108928*t108929*t108949+ccab2*t108931*t108928* \
                   t108955*t108929*t108949-(ccab4*t108930*t108931*t108932*t108935*3.0)/t108948-ccab2*t108930*1.0/(t108943* \
                   t108943*t108943)*t108952*t108928*t108955*2.0-ccab4*t108935*t108962*t108936*1.0/(t108948*t108948*t108948) \
                   *t108968*2.0+ccab3*gcab*t108930*t108932*t108972*t108928*t108973*(3.0/2.0)+ccab3*gcab*t108930*t108931* \
                   t108928*t108973*t108977*(3.0/2.0)+ccab4*t108930*t108932*t108935*t108962*t108963*t108929*2.0+ccab4* \
                   t108930*t108931*t108935*t108963*t108929*t108968*2.0+ccab3*gcab*t108930*t108928*t108973*t108929*(t108931* \
                   t108932*t108928*(3.0/2.0)+gcab*t108931*t108932*t108928*t108929*(3.0/2.0))-(ccab3*gcab*t108931*t108932* \
                   t108928*t108929*(3.0/2.0))/t108940-ccab1*gcab*t108931*t108932*t108928*t108929*1.0/(t108957*t108957* \
                   t108957)*(1.0/2.0)-ccab3*gcab*t108930*1.0/(t108940*t108940*t108940)*t108972*t108928*t108929*t108977* \
                   2.0);
            } else if (rho_a[index] > cutoff_) {
                v_gamma_aa_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_aa_gamma_bb_[index] = 0.0;
            } else {
                v_gamma_aa_gamma_bb_[index] = 0.0;
            }

            //V_gamma_ab_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_ab_gamma_ab_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_ab_gamma_ab_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_ab_gamma_ab_[index] = 0.0;
            } else {
                v_gamma_ab_gamma_ab_[index] = 0.0;
            }

            //V_gamma_ab_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_ab_gamma_bb_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_ab_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_ab_gamma_bb_[index] = 0.0;
            } else {
                v_gamma_ab_gamma_bb_[index] = 0.0;
            }

            //V_gamma_bb_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t108981 = 1.0/pow(rho_a[index],1.0/3.0);
                double t108982 = c*t108981;
                double t108983 = sqrt(t108982);
                double t108984 = pow(t108982,3.0/2.0);
                double t108985 = c*c;
                double t108986 = 1.0/pow(rho_a[index],2.0/3.0);
                double t108987 = 1.0/c0p;
                double t108988 = b1p*t108983;
                double t108989 = b3p*t108984;
                double t108990 = b4p*t108985*t108986;
                double t108991 = b2p*c*t108981;
                double t108992 = t108990+t108991+t108988+t108989;
                double t108993 = 1.0/t108992;
                double t108994 = t108993*t108987*(1.0/2.0);
                double t108995 = t108994+1.0;
                double t108996 = log(t108995);
                double t108997 = a1p*c*t108981;
                double t108998 = t108997+1.0;
                double t108999 = pow(2.0,1.0/3.0);
                double t109000 = t108999*2.0;
                double t109001 = t109000-2.0;
                double t109002 = two_13*2.0;
                double t109003 = t109002-2.0;
                double t109004 = 1.0/t109003;
                double t109005 = 1.0/c0f;
                double t109006 = 1.0/pow(rho_b[index],1.0/3.0);
                double t109007 = c*t109006;
                double t109008 = sqrt(t109007);
                double t109009 = pow(t109007,3.0/2.0);
                double t109010 = 1.0/pow(rho_b[index],2.0/3.0);
                double t109011 = b1p*t109008;
                double t109012 = b3p*t109009;
                double t109013 = b4p*t109010*t108985;
                double t109014 = b2p*c*t109006;
                double t109015 = t109011+t109012+t109013+t109014;
                double t109016 = 1.0/t109015;
                double t109017 = t109016*t108987*(1.0/2.0);
                double t109018 = t109017+1.0;
                double t109019 = log(t109018);
                double t109020 = a1p*c*t109006;
                double t109021 = t109020+1.0;
                double t109022 = c0p*t109021*t109019*2.0;
                double t109023 = rho_a[index]+rho_b[index];
                double t109024 = 1.0/pow(t109023,1.0/3.0);
                double t109025 = c*t109024;
                double t109026 = sqrt(t109025);
                double t109027 = pow(t109025,3.0/2.0);
                double t109028 = 1.0/pow(t109023,2.0/3.0);
                double t109029 = b1p*t109026;
                double t109030 = b3p*t109027;
                double t109031 = b4p*t109028*t108985;
                double t109032 = b2p*c*t109024;
                double t109033 = t109030+t109031+t109032+t109029;
                double t109034 = 1.0/t109033;
                double t109035 = t109034*t108987*(1.0/2.0);
                double t109036 = t109035+1.0;
                double t109037 = log(t109036);
                double t109038 = a1p*c*t109024;
                double t109039 = t109038+1.0;
                double t109040 = c0p*t109037*t109039*2.0;
                double t109041 = rho_a[index]-rho_b[index];
                double t109042 = t109041*t109041;
                double t109043 = 1.0/t109023;
                double t109044 = t109041*t109043;
                double t109045 = 1.0/(t109023*t109023*t109023*t109023);
                double t109046 = t109042*t109042;
                double t109047 = t109044+1.0;
                double t109048 = pow(t109047,4.0/3.0);
                double t109049 = -t109044+1.0;
                double t109050 = pow(t109049,4.0/3.0);
                double t109051 = t109050+t109048-2.0;
                double t109052 = gcab*gcab;
                double t109053 = 1.0/pow(rho_b[index],1.6E1/3.0);
                double t109054 = 1.0/pow(rho_a[index],8.0/3.0);
                double t109055 = gamma_aa[index]*t109054*(1.0/2.0);
                double t109056 = 1.0/pow(rho_b[index],8.0/3.0);
                double t109057 = gamma_bb[index]*t109056*(1.0/2.0);
                double t109058 = t109055+t109057;
                double t109059 = gcab*t109058;
                double t109060 = t109059+1.0;
                double t109061 = t109058*t109058;
                double t109062 = t109052*t109061;
                double t109063 = gcab*t109058*2.0;
                double t109064 = t109062+t109063+1.0;
                double t109065 = t109052*t109052;
                double t109082 = gcab*t109056*2.0;
                double t109083 = t109052*t109056*t109058*6.0;
                double t109084 = gcab*t109052*t109061*t109056*6.0;
                double t109085 = t109061*t109056*t109065*t109058*2.0;
                double t109066 = t109082+t109083+t109084+t109085;
                double t109067 = t109061*t109061;
                double t109087 = gcab*t109056*(3.0/2.0);
                double t109088 = t109052*t109056*t109058*3.0;
                double t109089 = gcab*t109052*t109061*t109056*(3.0/2.0);
                double t109068 = t109087+t109088+t109089;
                double t109069 = t109052*t109061*3.0;
                double t109070 = gcab*t109052*t109061*t109058;
                double t109071 = gcab*t109058*3.0;
                double t109072 = t109070+t109071+t109069+1.0;
                double t109079 = gcab*t109056;
                double t109080 = t109052*t109056*t109058;
                double t109073 = t109080+t109079;
                double t109074 = t109052*t109061*6.0;
                double t109075 = gcab*t109052*t109061*t109058*4.0;
                double t109076 = t109065*t109067;
                double t109077 = gcab*t109058*4.0;
                double t109078 = t109074+t109075+t109076+t109077+1.0;
                double t109081 = 1.0/(t109064*t109064);
                double t109086 = 1.0/(t109078*t109078);
                double t109090 = 1.0/(t109072*t109072);
                double t109091 = b1f*t109008;
                double t109092 = b3f*t109009;
                double t109093 = b4f*t109010*t108985;
                double t109094 = b2f*c*t109006;
                double t109095 = t109091+t109092+t109093+t109094;
                double t109096 = 1.0/t109095;
                double t109097 = t109005*t109096*(1.0/2.0);
                double t109098 = t109097+1.0;
                double t109099 = log(t109098);
                double t109100 = a1f*c*t109006;
                double t109101 = t109100+1.0;
                double t109102 = t109022-c0f*t109101*t109099*2.0;
                double t109103 = t109022-t109001*t109102*t109004;
                double t109104 = gcaa*gcaa;
                double t109105 = gamma_bb[index]*gamma_bb[index];
                double t109106 = t109104*t109104;
                double t109107 = 1.0/pow(rho_b[index],3.2E1/3.0);
                double t109108 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]);
                double t109109 = gamma_bb[index]*gcaa*t109056;
                double t109110 = t109109+1.0;
                double t109111 = gamma_bb[index]*gcaa*t109056*2.0;
                double t109112 = t109104*t109105*t109053;
                double t109113 = t109111+t109112+1.0;
                double t109114 = gamma_bb[index]*gcaa*t109056*3.0;
                double t109115 = gamma_bb[index]*gcaa*t109104*t109105*t109108;
                double t109116 = t109104*t109105*t109053*3.0;
                double t109117 = t109114+t109115+t109116+1.0;
                double t109118 = t109105*t109105;
                double t109134 = gcaa*t109056*4.0;
                double t109135 = gamma_bb[index]*t109104*t109053*1.2E1;
                double t109136 = gcaa*t109104*t109105*t109108*1.2E1;
                double t109137 = gamma_bb[index]*t109105*t109106*t109107*4.0;
                double t109119 = t109134+t109135+t109136+t109137;
                double t109120 = gamma_bb[index]*gcaa*t109056*4.0;
                double t109121 = gamma_bb[index]*gcaa*t109104*t109105*t109108*4.0;
                double t109122 = t109104*t109105*t109053*6.0;
                double t109123 = t109106*t109107*t109118;
                double t109124 = t109120+t109121+t109122+t109123+1.0;
                double t109127 = gcaa*t109056*2.0;
                double t109128 = gamma_bb[index]*t109104*t109053*2.0;
                double t109125 = t109127+t109128;
                double t109126 = 1.0/(t109117*t109117);
                double t109129 = 1.0/(t109113*t109113);
                double t109130 = gcaa*t109056*3.0;
                double t109131 = gamma_bb[index]*t109104*t109053*6.0;
                double t109132 = gcaa*t109104*t109105*t109108*3.0;
                double t109133 = t109130+t109131+t109132;
                double t109138 = 1.0/(t109124*t109124);
                double t109139 = rho_b[index]*(8.334140006820045E15/1.40737488355328E14);
                double t109140 = omega*omega;
                double t109141 = 1.0/rho_b[index];
                double t109142 = omega*t109140*t109141*(7.0368744177664E13/8.334140006820045E15);
                double t109143 = 1.0/pow(t109139,1.0/3.0);
                double t109144 = gx*gx;
                double t109145 = t109144*t109144;
                double t109146 = gamma_bb[index]*gx*t109056;
                double t109147 = t109146+1.0;
                double t109148 = gamma_bb[index]*gx*t109056*2.0;
                double t109149 = t109105*t109053*t109144;
                double t109150 = t109148+t109149+1.0;
                double t109151 = gamma_bb[index]*gx*t109056*3.0;
                double t109152 = gamma_bb[index]*gx*t109105*t109108*t109144;
                double t109153 = t109105*t109053*t109144*3.0;
                double t109154 = t109151+t109152+t109153+1.0;
                double t109170 = gx*t109056*4.0;
                double t109171 = gamma_bb[index]*t109053*t109144*1.2E1;
                double t109172 = gx*t109105*t109108*t109144*1.2E1;
                double t109173 = gamma_bb[index]*t109105*t109107*t109145*4.0;
                double t109155 = t109170+t109171+t109172+t109173;
                double t109156 = gamma_bb[index]*gx*t109056*4.0;
                double t109157 = gamma_bb[index]*gx*t109105*t109108*t109144*4.0;
                double t109158 = t109105*t109053*t109144*6.0;
                double t109159 = t109107*t109118*t109145;
                double t109160 = t109156+t109157+t109158+t109159+1.0;
                double t109163 = gx*t109056*2.0;
                double t109164 = gamma_bb[index]*t109053*t109144*2.0;
                double t109161 = t109163+t109164;
                double t109162 = 1.0/(t109154*t109154);
                double t109165 = 1.0/(t109150*t109150);
                double t109166 = gx*t109056*3.0;
                double t109167 = gamma_bb[index]*t109053*t109144*6.0;
                double t109168 = gx*t109105*t109108*t109144*3.0;
                double t109169 = t109166+t109167+t109168;
                double t109174 = 1.0/(t109160*t109160);
                v_gamma_bb_gamma_bb_[index] = (-rho_b[index]*t109103+t109023*(t109040-t109004*t109051*t109045*t109046* \
                   (t109040-c0f*log((t109005*(1.0/2.0))/(b1f*t109026+b3f*t109027+b2f*c*t109024+b4f*t109028*t108985)+1.0) \
                   *(a1f*c*t109024+1.0)*2.0)+(Aa*t109004*t109051*log((1.0/2.0)/(Aa*(b1a*t109026+b3a*t109027+b2a*c*t109024+ \
                   b4a*t109028*t108985))+1.0)*(t109045*t109046-1.0)*(a1a*c*t109024+1.0)*2.0)/d2fz0)+rho_a[index]*(t109001* \
                   t109004*(c0p*t108996*t108998*2.0-c0f*log((t109005*(1.0/2.0))/(b1f*t108983+b3f*t108984+b2f*c*t108981+ \
                   b4f*t108985*t108986)+1.0)*(a1f*c*t108981+1.0)*2.0)-c0p*t108996*t108998*2.0))*(ccab1*1.0/(t109060*t109060) \
                   *t109052*t109053*(1.0/2.0)-(ccab2*t109052*t109053*(1.0/2.0))/t109064-ccab2*t109052*t109061*1.0/(t109064* \
                   t109064*t109064)*(t109073*t109073)*2.0-ccab4*t109065*(t109066*t109066)*t109067*1.0/(t109078*t109078* \
                   t109078)*2.0+ccab2*t109061*t109053*t109081*t109065*(1.0/2.0)+ccab4*t109065*t109067*t109086*(t109052* \
                   t109053*3.0+t109061*t109053*t109065*3.0+gcab*t109052*t109053*t109058*6.0)-(ccab4*t109061*t109053*t109065* \
                   3.0)/t109078+ccab2*t109052*t109081*t109073*t109056*t109058*2.0-ccab1*gcab*1.0/(t109060*t109060*t109060) \
                   *t109052*t109053*t109058*(1.0/2.0)-(ccab3*gcab*t109052*t109053*t109058*(3.0/2.0))/t109072-ccab3*gcab* \
                   t109052*t109061*1.0/(t109072*t109072*t109072)*t109058*(t109068*t109068)*2.0+ccab3*gcab*t109052*t109061* \
                   t109090*t109056*t109068*3.0+ccab4*t109061*t109056*t109065*t109066*t109058*t109086*4.0+ccab3*gcab*t109052* \
                   t109061*t109090*t109058*(t109052*t109053*(3.0/2.0)+gcab*t109052*t109053*t109058*(3.0/2.0)))+rho_b[index]* \
                   t109103*(ccaa1*1.0/(t109110*t109110)*t109104*t109053*2.0-(ccaa2*t109104*t109053*2.0)/t109113+ccaa2* \
                   t109105*t109106*t109107*t109129*2.0-(ccaa4*t109105*t109106*t109107*1.2E1)/t109124+ccaa4*t109106*t109107* \
                   t109118*t109138*(t109104*t109053*1.2E1+t109105*t109106*t109107*1.2E1+gamma_bb[index]*gcaa*t109104* \
                   t109108*2.4E1)-ccaa1*gamma_bb[index]*gcaa*1.0/(t109110*t109110*t109110)*t109104*t109108*2.0-(ccaa3* \
                   gamma_bb[index]*gcaa*t109104*t109108*6.0)/t109117-ccaa2*t109104*1.0/(t109113*t109113*t109113)*t109105* \
                   t109053*(t109125*t109125)*2.0-ccaa4*t109106*1.0/(t109124*t109124*t109124)*t109107*t109118*(t109119* \
                   t109119)*2.0+ccaa2*gamma_bb[index]*t109104*t109053*t109125*t109129*4.0+ccaa4*gamma_bb[index]*t109105* \
                   t109106*t109107*t109119*t109138*8.0+ccaa3*gcaa*t109104*t109105*t109133*t109108*t109126*6.0+ccaa3*gamma_bb[index]* \
                   gcaa*t109104*t109105*t109108*t109126*(t109104*t109053*6.0+gamma_bb[index]*gcaa*t109104*t109108*6.0) \
                   -ccaa3*gamma_bb[index]*gcaa*t109104*t109105*(t109133*t109133)*t109108*1.0/(t109117*t109117*t109117) \
                   *2.0)+c0*pow(rho_b[index],4.0/3.0)*(omega*t109143*(t109142+erf(pow(t109139,1.0/3.0)/omega)*(3.991211251234741E15/ \
                   2.251799813685248E15)-omega*t109143*(3.0/2.0)-exp(-1.0/(omega*omega)*pow(t109139,2.0/3.0))*(t109142- \
                   omega*t109143))*(4.0/3.0)-1.0)*(cx1*t109053*t109144*1.0/(t109147*t109147)*2.0-(cx2*t109053*t109144* \
                   2.0)/t109150+cx2*t109105*t109107*t109145*t109165*2.0-(cx4*t109105*t109107*t109145*1.2E1)/t109160+cx4* \
                   t109107*t109118*t109145*t109174*(t109053*t109144*1.2E1+t109105*t109107*t109145*1.2E1+gamma_bb[index]* \
                   gx*t109108*t109144*2.4E1)-cx1*gamma_bb[index]*gx*t109108*t109144*1.0/(t109147*t109147*t109147)*2.0- \
                   (cx3*gamma_bb[index]*gx*t109108*t109144*6.0)/t109154-cx2*t109105*1.0/(t109150*t109150*t109150)*t109053* \
                   (t109161*t109161)*t109144*2.0-cx4*1.0/(t109160*t109160*t109160)*t109107*t109118*t109145*(t109155*t109155) \
                   *2.0+cx2*gamma_bb[index]*t109053*t109161*t109144*t109165*4.0+cx4*gamma_bb[index]*t109105*t109107*t109145* \
                   t109155*t109174*8.0+cx3*gx*t109105*t109108*t109144*t109162*t109169*6.0+cx3*gamma_bb[index]*gx*t109105* \
                   t109108*t109144*t109162*(t109053*t109144*6.0+gamma_bb[index]*gx*t109108*t109144*6.0)-cx3*gamma_bb[index]* \
                   gx*t109105*t109108*t109144*1.0/(t109154*t109154*t109154)*(t109169*t109169)*2.0);
            } else if (rho_a[index] > cutoff_) {
                v_gamma_bb_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                double t109844 = 1.0/pow(rho_b[index],1.0/3.0);
                double t109845 = c*t109844;
                double t109846 = sqrt(t109845);
                double t109847 = pow(t109845,3.0/2.0);
                double t109848 = c*c;
                double t109849 = 1.0/pow(rho_b[index],2.0/3.0);
                double t109850 = 1.0/c0p;
                double t109851 = b1p*t109846;
                double t109852 = b3p*t109847;
                double t109853 = b4p*t109848*t109849;
                double t109854 = b2p*c*t109844;
                double t109855 = t109851+t109852+t109853+t109854;
                double t109856 = 1.0/t109855;
                double t109857 = t109850*t109856*(1.0/2.0);
                double t109858 = t109857+1.0;
                double t109859 = log(t109858);
                double t109860 = a1p*c*t109844;
                double t109861 = t109860+1.0;
                double t109862 = gcaa*gcaa;
                double t109863 = 1.0/pow(rho_b[index],1.6E1/3.0);
                double t109864 = 1.0/pow(rho_b[index],8.0/3.0);
                double t109865 = gamma_bb[index]*gamma_bb[index];
                double t109866 = t109862*t109862;
                double t109867 = 1.0/pow(rho_b[index],3.2E1/3.0);
                double t109868 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]);
                double t109869 = gamma_bb[index]*gcaa*t109864;
                double t109870 = t109869+1.0;
                double t109871 = gamma_bb[index]*gcaa*t109864*2.0;
                double t109872 = t109862*t109863*t109865;
                double t109873 = t109871+t109872+1.0;
                double t109874 = gamma_bb[index]*gcaa*t109864*3.0;
                double t109875 = gamma_bb[index]*gcaa*t109862*t109865*t109868;
                double t109876 = t109862*t109863*t109865*3.0;
                double t109877 = t109874+t109875+t109876+1.0;
                double t109878 = t109865*t109865;
                double t109894 = gcaa*t109864*4.0;
                double t109895 = gamma_bb[index]*t109862*t109863*1.2E1;
                double t109896 = gcaa*t109862*t109865*t109868*1.2E1;
                double t109897 = gamma_bb[index]*t109865*t109866*t109867*4.0;
                double t109879 = t109894+t109895+t109896+t109897;
                double t109880 = gamma_bb[index]*gcaa*t109864*4.0;
                double t109881 = gamma_bb[index]*gcaa*t109862*t109865*t109868*4.0;
                double t109882 = t109862*t109863*t109865*6.0;
                double t109883 = t109866*t109867*t109878;
                double t109884 = t109880+t109881+t109882+t109883+1.0;
                double t109887 = gcaa*t109864*2.0;
                double t109888 = gamma_bb[index]*t109862*t109863*2.0;
                double t109885 = t109887+t109888;
                double t109886 = 1.0/(t109877*t109877);
                double t109889 = 1.0/(t109873*t109873);
                double t109890 = gcaa*t109864*3.0;
                double t109891 = gamma_bb[index]*t109862*t109863*6.0;
                double t109892 = gcaa*t109862*t109865*t109868*3.0;
                double t109893 = t109890+t109891+t109892;
                double t109898 = 1.0/(t109884*t109884);
                double t109899 = rho_b[index]*(8.334140006820045E15/1.40737488355328E14);
                double t109900 = omega*omega;
                double t109901 = 1.0/rho_b[index];
                double t109902 = omega*t109900*t109901*(7.0368744177664E13/8.334140006820045E15);
                double t109903 = 1.0/pow(t109899,1.0/3.0);
                double t109904 = gx*gx;
                double t109905 = t109904*t109904;
                double t109906 = gamma_bb[index]*gx*t109864;
                double t109907 = t109906+1.0;
                double t109908 = gamma_bb[index]*gx*t109864*2.0;
                double t109909 = t109904*t109863*t109865;
                double t109910 = t109908+t109909+1.0;
                double t109911 = gamma_bb[index]*gx*t109864*3.0;
                double t109912 = gamma_bb[index]*gx*t109904*t109865*t109868;
                double t109913 = t109904*t109863*t109865*3.0;
                double t109914 = t109911+t109912+t109913+1.0;
                double t109930 = gx*t109864*4.0;
                double t109931 = gamma_bb[index]*t109904*t109863*1.2E1;
                double t109932 = gx*t109904*t109865*t109868*1.2E1;
                double t109933 = gamma_bb[index]*t109905*t109865*t109867*4.0;
                double t109915 = t109930+t109931+t109932+t109933;
                double t109916 = gamma_bb[index]*gx*t109864*4.0;
                double t109917 = gamma_bb[index]*gx*t109904*t109865*t109868*4.0;
                double t109918 = t109904*t109863*t109865*6.0;
                double t109919 = t109905*t109867*t109878;
                double t109920 = t109916+t109917+t109918+t109919+1.0;
                double t109923 = gx*t109864*2.0;
                double t109924 = gamma_bb[index]*t109904*t109863*2.0;
                double t109921 = t109923+t109924;
                double t109922 = 1.0/(t109914*t109914);
                double t109925 = 1.0/(t109910*t109910);
                double t109926 = gx*t109864*3.0;
                double t109927 = gamma_bb[index]*t109904*t109863*6.0;
                double t109928 = gx*t109904*t109865*t109868*3.0;
                double t109929 = t109926+t109927+t109928;
                double t109934 = 1.0/(t109920*t109920);
                v_gamma_bb_gamma_bb_[index] = rho_b[index]*(((pow(2.0,1.0/3.0)*2.0-2.0)*(c0f*log((1.0/2.0)/(c0f*(b1f* \
                   t109846+b3f*t109847+b2f*c*t109844+b4f*t109848*t109849))+1.0)*(a1f*c*t109844+1.0)*2.0-c0p*t109861*t109859* \
                   2.0))/(two_13*2.0-2.0)+c0p*t109861*t109859*2.0)*(ccaa1*1.0/(t109870*t109870)*t109862*t109863*2.0-(ccaa2* \
                   t109862*t109863*2.0)/t109873+ccaa2*t109865*t109866*t109867*t109889*2.0-(ccaa4*t109865*t109866*t109867* \
                   1.2E1)/t109884+ccaa4*t109866*t109867*t109878*t109898*(t109862*t109863*1.2E1+t109865*t109866*t109867* \
                   1.2E1+gamma_bb[index]*gcaa*t109862*t109868*2.4E1)-ccaa1*gamma_bb[index]*gcaa*1.0/(t109870*t109870* \
                   t109870)*t109862*t109868*2.0-(ccaa3*gamma_bb[index]*gcaa*t109862*t109868*6.0)/t109877-ccaa2*t109862* \
                   t109863*1.0/(t109873*t109873*t109873)*t109865*(t109885*t109885)*2.0-ccaa4*t109866*1.0/(t109884*t109884* \
                   t109884)*t109867*t109878*(t109879*t109879)*2.0+ccaa2*gamma_bb[index]*t109862*t109863*t109885*t109889* \
                   4.0+ccaa4*gamma_bb[index]*t109865*t109866*t109867*t109879*t109898*8.0+ccaa3*gcaa*t109862*t109865*t109893* \
                   t109868*t109886*6.0+ccaa3*gamma_bb[index]*gcaa*t109862*t109865*t109868*t109886*(t109862*t109863*6.0+ \
                   gamma_bb[index]*gcaa*t109862*t109868*6.0)-ccaa3*gamma_bb[index]*gcaa*t109862*t109865*(t109893*t109893) \
                   *t109868*1.0/(t109877*t109877*t109877)*2.0)+c0*pow(rho_b[index],4.0/3.0)*(omega*t109903*(t109902+erf(pow(t109899,1.0/ \
                   3.0)/omega)*(3.991211251234741E15/2.251799813685248E15)-omega*t109903*(3.0/2.0)-exp(-1.0/(omega*omega) \
                   *pow(t109899,2.0/3.0))*(t109902-omega*t109903))*(4.0/3.0)-1.0)*(cx1*t109904*1.0/(t109907*t109907)* \
                   t109863*2.0-(cx2*t109904*t109863*2.0)/t109910+cx2*t109905*t109925*t109865*t109867*2.0-(cx4*t109905* \
                   t109865*t109867*1.2E1)/t109920+cx4*t109905*t109934*t109867*t109878*(t109904*t109863*1.2E1+t109905* \
                   t109865*t109867*1.2E1+gamma_bb[index]*gx*t109904*t109868*2.4E1)-cx1*gamma_bb[index]*gx*t109904*1.0/ \
                   (t109907*t109907*t109907)*t109868*2.0-(cx3*gamma_bb[index]*gx*t109904*t109868*6.0)/t109914-cx2*1.0/ \
                   (t109910*t109910*t109910)*(t109921*t109921)*t109904*t109863*t109865*2.0-cx4*1.0/(t109920*t109920*t109920) \
                   *t109905*(t109915*t109915)*t109867*t109878*2.0+cx2*gamma_bb[index]*t109921*t109904*t109925*t109863* \
                   4.0+cx4*gamma_bb[index]*t109905*t109915*t109934*t109865*t109867*8.0+cx3*gx*t109904*t109922*t109865* \
                   t109929*t109868*6.0+cx3*gamma_bb[index]*gx*t109904*t109922*t109865*t109868*(t109904*t109863*6.0+gamma_bb[index]* \
                   gx*t109904*t109868*6.0)-cx3*gamma_bb[index]*gx*t109904*1.0/(t109914*t109914*t109914)*t109865*(t109929* \
                   t109929)*t109868*2.0);
            } else {
                v_gamma_bb_gamma_bb_[index] = 0.0;
            }

        }
        if (is_meta_) {

            //V_rho_a_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_a_tau_a_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_a_tau_a_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_a_tau_a_[index] = 0.0;
            } else {
                v_rho_a_tau_a_[index] = 0.0;
            }

            //V_rho_a_tau_b
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_a_tau_b_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_a_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_a_tau_b_[index] = 0.0;
            } else {
                v_rho_a_tau_b_[index] = 0.0;
            }

            //V_rho_b_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_b_tau_a_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_b_tau_a_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_b_tau_a_[index] = 0.0;
            } else {
                v_rho_b_tau_a_[index] = 0.0;
            }

            //V_rho_b_tau_b
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_b_tau_b_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_b_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_b_tau_b_[index] = 0.0;
            } else {
                v_rho_b_tau_b_[index] = 0.0;
            }

            //V_tau_a_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_tau_a_tau_a_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_tau_a_tau_a_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_tau_a_tau_a_[index] = 0.0;
            } else {
                v_tau_a_tau_a_[index] = 0.0;
            }

            //V_tau_a_tau_b
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_tau_a_tau_b_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_tau_a_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_tau_a_tau_b_[index] = 0.0;
            } else {
                v_tau_a_tau_b_[index] = 0.0;
            }

            //V_tau_b_tau_b
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_tau_b_tau_b_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_tau_b_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_tau_b_tau_b_[index] = 0.0;
            } else {
                v_tau_b_tau_b_[index] = 0.0;
            }

            if (is_gga_) {

                //V_gamma_aa_tau_a
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } else {
                    v_gamma_aa_tau_a_[index] = 0.0;
                }

                //V_gamma_aa_tau_b
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_aa_tau_b_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_aa_tau_b_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_aa_tau_b_[index] = 0.0;
                } else {
                    v_gamma_aa_tau_b_[index] = 0.0;
                }

                //V_gamma_ab_tau_a
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_ab_tau_a_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_ab_tau_a_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_ab_tau_a_[index] = 0.0;
                } else {
                    v_gamma_ab_tau_a_[index] = 0.0;
                }

                //V_gamma_ab_tau_b
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_ab_tau_b_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_ab_tau_b_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_ab_tau_b_[index] = 0.0;
                } else {
                    v_gamma_ab_tau_b_[index] = 0.0;
                }

                //V_gamma_bb_tau_a
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_bb_tau_a_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_bb_tau_a_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_bb_tau_a_[index] = 0.0;
                } else {
                    v_gamma_bb_tau_a_[index] = 0.0;
                }

                //V_gamma_bb_tau_b
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_bb_tau_b_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_bb_tau_b_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_bb_tau_b_[index] = 0.0;
                } else {
                    v_gamma_bb_tau_b_[index] = 0.0;
                }

            }
        }
    }
}

}}

