/**********************************************************
* TauHCTH0_functional.cc: definitions for TauHCTH0_functional for KS-DFT
* Robert Parrish, robparrish@gmail.com
* Autogenerated by MATLAB Script on 25-May-2011
*
***********************************************************/
#include <libmints/mints.h>
#include <libfock/points.h>
#include "TauHCTH0_functional.h"
#include <stdlib.h>
#include <cmath>
#include <string>
#include <string>
#include <vector>

using namespace psi;
using namespace boost;
using namespace std;

namespace psi { namespace functional {

TauHCTH0_Functional::TauHCTH0_Functional(int npoints, int deriv) : Functional(npoints, deriv)
{

    name_ = "TauHCTH0";
    description_ = "TauHCTH0 Power Series Hybrid Meta-GGA";
    citation_ = "A.D. Boese and N.C. Handy, J. Chem. Phys., 116(22), 9559, 2002";

    double X = 1.4999999999999999E-01;
    params_.push_back(make_pair("X",X));
    double C_k = 9.1155997446911918E+00;
    params_.push_back(make_pair("C_k",C_k));
    double c0 = -9.3052573634909974E-01;
    params_.push_back(make_pair("c0",c0));
    double two_13 = 1.2599210498948732E+00;
    params_.push_back(make_pair("two_13",two_13));
    double d2fz0 = 1.7099210000000000E+00;
    params_.push_back(make_pair("d2fz0",d2fz0));
    double c = 6.2035049089939986E-01;
    params_.push_back(make_pair("c",c));
    double Aa = 1.6886999999999999E-02;
    params_.push_back(make_pair("Aa",Aa));
    double a1a = 1.1125000000000000E-01;
    params_.push_back(make_pair("a1a",a1a));
    double b1a = 1.0356999999999999E+01;
    params_.push_back(make_pair("b1a",b1a));
    double b2a = 3.6231000000000000E+00;
    params_.push_back(make_pair("b2a",b2a));
    double b3a = 8.8026000000000004E-01;
    params_.push_back(make_pair("b3a",b3a));
    double b4a = 4.9670999999999998E-01;
    params_.push_back(make_pair("b4a",b4a));
    double c0p = 3.1091000000000001E-02;
    params_.push_back(make_pair("c0p",c0p));
    double a1p = 2.1370000000000000E-01;
    params_.push_back(make_pair("a1p",a1p));
    double b1p = 7.5956999999999999E+00;
    params_.push_back(make_pair("b1p",b1p));
    double b2p = 3.5876000000000001E+00;
    params_.push_back(make_pair("b2p",b2p));
    double b3p = 1.6382000000000001E+00;
    params_.push_back(make_pair("b3p",b3p));
    double b4p = 4.9293999999999999E-01;
    params_.push_back(make_pair("b4p",b4p));
    double c0f = 1.5545000000000000E-02;
    params_.push_back(make_pair("c0f",c0f));
    double a1f = 2.0548000000000000E-01;
    params_.push_back(make_pair("a1f",a1f));
    double b1f = 1.4118900000000000E+01;
    params_.push_back(make_pair("b1f",b1f));
    double b2f = 6.1977000000000002E+00;
    params_.push_back(make_pair("b2f",b2f));
    double b3f = 3.3662000000000001E+00;
    params_.push_back(make_pair("b3f",b3f));
    double b4f = 6.2517000000000000E-01;
    params_.push_back(make_pair("b4f",b4f));
    double gcab = 6.0000000000000001E-03;
    params_.push_back(make_pair("gcab",gcab));
    double gcaa = 2.0000000000000001E-01;
    params_.push_back(make_pair("gcaa",gcaa));
    double gx = 4.0000000000000001E-03;
    params_.push_back(make_pair("gx",gx));
    double ccab0 = 8.0489999999999995E-01;
    params_.push_back(make_pair("ccab0",ccab0));
    double ccab1 = 3.8388000000000000E+00;
    params_.push_back(make_pair("ccab1",ccab1));
    double ccab2 = -1.3547000000000001E+01;
    params_.push_back(make_pair("ccab2",ccab2));
    double ccab3 = 3.9133000000000000E+00;
    params_.push_back(make_pair("ccab3",ccab3));
    double ccaa0 = 1.8600000000000000E-01;
    params_.push_back(make_pair("ccaa0",ccaa0));
    double ccaa1 = 3.9782000000000002E+00;
    params_.push_back(make_pair("ccaa1",ccaa1));
    double ccaa2 = -7.0693999999999999E+00;
    params_.push_back(make_pair("ccaa2",ccaa2));
    double ccaa3 = 3.4746999999999999E+00;
    params_.push_back(make_pair("ccaa3",ccaa3));
    double cx0 = 8.6734999999999995E-01;
    params_.push_back(make_pair("cx0",cx0));
    double cx1 = 3.0080000000000001E-01;
    params_.push_back(make_pair("cx1",cx1));
    double cx2 = 1.2208000000000001E+00;
    params_.push_back(make_pair("cx2",cx2));
    double cx3 = 1.5740000000000001E-01;
    params_.push_back(make_pair("cx3",cx3));
    double cxnl0 = -2.3000000000000000E-03;
    params_.push_back(make_pair("cxnl0",cxnl0));
    double cxnl1 = -2.8489999999999999E-01;
    params_.push_back(make_pair("cxnl1",cxnl1));
    double cxnl2 = 5.4146000000000001E+00;
    params_.push_back(make_pair("cxnl2",cxnl2));
    double cxnl3 = -1.0909000000000001E+01;
    params_.push_back(make_pair("cxnl3",cxnl3));

    is_gga_ = true;
    is_meta_ = true;

    //Required allocateion
    allocate();
}
TauHCTH0_Functional::~TauHCTH0_Functional()
{
}
void TauHCTH0_Functional::computeRKSFunctional(boost::shared_ptr<RKSFunctions> prop)
{
    int ntrue = prop->npoints();

    const double* restrict rho_a;
    const double* restrict gamma_aa;
    const double* restrict tau_a;

    rho_a = prop->property_value("RHO_A")->pointer();
    if (is_gga_) {
        gamma_aa = prop->property_value("GAMMA_AA")->pointer();
    }
    if (is_meta_) {
        tau_a = prop->property_value("TAU_A")->pointer();
    }

    double X = params_[0].second;
    double C_k = params_[1].second;
    double c0 = params_[2].second;
    double two_13 = params_[3].second;
    double d2fz0 = params_[4].second;
    double c = params_[5].second;
    double Aa = params_[6].second;
    double a1a = params_[7].second;
    double b1a = params_[8].second;
    double b2a = params_[9].second;
    double b3a = params_[10].second;
    double b4a = params_[11].second;
    double c0p = params_[12].second;
    double a1p = params_[13].second;
    double b1p = params_[14].second;
    double b2p = params_[15].second;
    double b3p = params_[16].second;
    double b4p = params_[17].second;
    double c0f = params_[18].second;
    double a1f = params_[19].second;
    double b1f = params_[20].second;
    double b2f = params_[21].second;
    double b3f = params_[22].second;
    double b4f = params_[23].second;
    double gcab = params_[24].second;
    double gcaa = params_[25].second;
    double gx = params_[26].second;
    double ccab0 = params_[27].second;
    double ccab1 = params_[28].second;
    double ccab2 = params_[29].second;
    double ccab3 = params_[30].second;
    double ccaa0 = params_[31].second;
    double ccaa1 = params_[32].second;
    double ccaa2 = params_[33].second;
    double ccaa3 = params_[34].second;
    double cx0 = params_[35].second;
    double cx1 = params_[36].second;
    double cx2 = params_[37].second;
    double cx3 = params_[38].second;
    double cxnl0 = params_[39].second;
    double cxnl1 = params_[40].second;
    double cxnl2 = params_[41].second;
    double cxnl3 = params_[42].second;

    //Functional
    for (int index = 0; index < ntrue; index++) {

        //Functional Value
        if (rho_a[index] > cutoff_) {
            double t97908 = 1.0/pow(rho_a[index],1.0/3.0);
            double t97909 = c*t97908;
            double t97910 = sqrt(t97909);
            double t97911 = pow(t97909,3.0/2.0);
            double t97912 = c*c;
            double t97913 = 1.0/pow(rho_a[index],2.0/3.0);
            double t97914 = 1.0/c0p;
            double t97915 = b1p*t97910;
            double t97916 = b3p*t97911;
            double t97917 = b4p*t97912*t97913;
            double t97918 = b2p*c*t97908;
            double t97919 = t97915+t97916+t97917+t97918;
            double t97920 = 1.0/t97919;
            double t97921 = t97920*t97914*(1.0/2.0);
            double t97922 = t97921+1.0;
            double t97923 = log(t97922);
            double t97924 = a1p*c*t97908;
            double t97925 = t97924+1.0;
            double t97926 = rho_a[index]*2.0;
            double t97927 = 1.0/pow(t97926,1.0/3.0);
            double t97928 = c*t97927;
            double t97929 = 1.0/pow(rho_a[index],8.0/3.0);
            double t97930 = gamma_aa[index]*gamma_aa[index];
            double t97931 = gcab*gcab;
            double t97932 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]);
            double t97933 = 1.0/pow(rho_a[index],1.6E1/3.0);
            double t97934 = pow(2.0,1.0/3.0);
            double t97935 = t97934*2.0;
            double t97936 = t97935-2.0;
            double t97937 = two_13*2.0;
            double t97938 = t97937-2.0;
            double t97939 = 1.0/t97938;
            double t97940 = 1.0/c0f;
            double t97941 = b1f*t97910;
            double t97942 = b3f*t97911;
            double t97943 = b4f*t97912*t97913;
            double t97944 = b2f*c*t97908;
            double t97945 = t97941+t97942+t97943+t97944;
            double t97946 = 1.0/t97945;
            double t97947 = t97940*t97946*(1.0/2.0);
            double t97948 = t97947+1.0;
            double t97949 = log(t97948);
            double t97950 = a1f*c*t97908;
            double t97951 = t97950+1.0;
            double t97952 = c0f*t97951*t97949*2.0;
            double t97953 = c0p*t97923*t97925*2.0;
            double t97954 = gcaa*gcaa;
            double t97955 = pow(rho_a[index],5.0/3.0);
            double t97956 = 1.0/tau_a[index];
            double t97957 = C_k*t97955*t97956;
            double t97958 = t97957-1.0;
            double t97959 = t97958*t97958;
            double t97960 = t97957+1.0;
            double t97961 = t97959*t97959;
            double t97962 = gx*gx;
            double t97963 = gamma_aa[index]*gx*t97929;
            double t97964 = t97963+1.0;
            double t97965 = 1.0/t97964;
            double t97966 = gamma_aa[index]*gx*t97929*3.0;
            double t97967 = gamma_aa[index]*gx*t97930*t97932*t97962;
            double t97968 = t97930*t97933*t97962*3.0;
            double t97969 = t97966+t97967+t97968+1.0;
            double t97970 = 1.0/t97969;
            double t97971 = gamma_aa[index]*gx*t97929*2.0;
            double t97972 = t97930*t97933*t97962;
            double t97973 = t97971+t97972+1.0;
            double t97974 = 1.0/t97973;
            functional_[index] = (rho_a[index]*(t97953+t97936*t97939*(t97952-c0p*t97923*t97925*2.0))*2.0-c0p* \
               rho_a[index]*log((t97914*(1.0/2.0))/(b1p*sqrt(t97928)+b3p*pow(t97928,3.0/2.0)+b4p*t97912*1.0/pow(t97926,2.0/ \
               3.0)+b2p*c*t97927)+1.0)*(a1p*c*t97927+1.0)*4.0)*(ccab0+(ccab2*t97930*t97931*t97933)/(gamma_aa[index]* \
               gcab*t97929*2.0+t97930*t97931*t97933+1.0)+(ccab1*gamma_aa[index]*gcab*t97929)/(gamma_aa[index]*gcab* \
               t97929+1.0)+(ccab3*gamma_aa[index]*gcab*t97930*t97931*t97932)/(gamma_aa[index]*gcab*t97929*3.0+t97930* \
               t97931*t97933*3.0+gamma_aa[index]*gcab*t97930*t97931*t97932+1.0))-rho_a[index]*(t97953+t97936*t97939* \
               (t97952-t97953))*(ccaa0+(ccaa2*t97930*t97933*t97954)/(gamma_aa[index]*gcaa*t97929*2.0+t97930*t97933* \
               t97954+1.0)+(ccaa1*gamma_aa[index]*gcaa*t97929)/(gamma_aa[index]*gcaa*t97929+1.0)+(ccaa3*gamma_aa[index]* \
               gcaa*t97930*t97932*t97954)/(gamma_aa[index]*gcaa*t97929*3.0+t97930*t97933*t97954*3.0+gamma_aa[index]* \
               gcaa*t97930*t97932*t97954+1.0))*2.0-c0*pow(rho_a[index],4.0/3.0)*(X-1.0)*(cx0+(t97958/t97960+1.0/(t97960* \
               t97960*t97960*t97960*t97960)*t97961*t97958-1.0/(t97960*t97960*t97960)*t97958*t97959*2.0)*(cxnl0+cxnl1* \
               gamma_aa[index]*gx*t97929*t97965+cxnl2*t97930*t97933*t97962*t97974+cxnl3*gamma_aa[index]*gx*t97930* \
               t97932*t97970*t97962)+cx1*gamma_aa[index]*gx*t97929*t97965+cx2*t97930*t97933*t97962*t97974+cx3*gamma_aa[index]* \
               gx*t97930*t97932*t97970*t97962)*2.0;
        } else {
            functional_[index] = 0.0;
        }

    }
    //First Partials
    for (int index = 0; index < ntrue && deriv_ >= 1; index++) {

        //V_rho_a
        if (rho_a[index] > cutoff_) {
            double t97976 = 1.0/pow(rho_a[index],8.0/3.0);
            double t97977 = gamma_aa[index]*gamma_aa[index];
            double t97978 = gcab*gcab;
            double t97979 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]);
            double t97980 = 1.0/pow(rho_a[index],1.6E1/3.0);
            double t97981 = rho_a[index]*2.0;
            double t97982 = 1.0/pow(t97981,1.0/3.0);
            double t97983 = c*t97982;
            double t97984 = sqrt(t97983);
            double t97985 = b1p*t97984;
            double t97986 = pow(t97983,3.0/2.0);
            double t97987 = b3p*t97986;
            double t97988 = b2p*c*t97982;
            double t97989 = c*c;
            double t97990 = 1.0/pow(t97981,2.0/3.0);
            double t97991 = b4p*t97990*t97989;
            double t97992 = t97991+t97985+t97987+t97988;
            double t97993 = 1.0/pow(t97981,4.0/3.0);
            double t97994 = 1.0/c0p;
            double t97995 = 1.0/t97992;
            double t97996 = t97994*t97995*(1.0/2.0);
            double t97997 = t97996+1.0;
            double t97998 = 1.0/pow(rho_a[index],1.0/3.0);
            double t97999 = c*t97998;
            double t98000 = sqrt(t97999);
            double t98001 = b1f*t98000;
            double t98002 = pow(t97999,3.0/2.0);
            double t98003 = b3f*t98002;
            double t98004 = 1.0/pow(rho_a[index],2.0/3.0);
            double t98005 = b4f*t97989*t98004;
            double t98006 = b2f*c*t97998;
            double t98007 = t98001+t98003+t98005+t98006;
            double t98008 = 1.0/pow(rho_a[index],4.0/3.0);
            double t98009 = b1p*t98000;
            double t98010 = b3p*t98002;
            double t98011 = b4p*t97989*t98004;
            double t98012 = b2p*c*t97998;
            double t98013 = t98010+t98011+t98012+t98009;
            double t98014 = 1.0/pow(rho_a[index],5.0/3.0);
            double t98015 = 1.0/sqrt(t97999);
            double t98016 = 1.0/c0f;
            double t98017 = 1.0/t98007;
            double t98018 = t98016*t98017*(1.0/2.0);
            double t98019 = t98018+1.0;
            double t98020 = 1.0/t98013;
            double t98021 = t97994*t98020*(1.0/2.0);
            double t98022 = t98021+1.0;
            double t98023 = a1p*c*t97998;
            double t98024 = t98023+1.0;
            double t98025 = 1.0/t98022;
            double t98026 = 1.0/(t98013*t98013);
            double t98027 = b4p*t97989*t98014*(2.0/3.0);
            double t98028 = b2p*c*t98008*(1.0/3.0);
            double t98029 = b1p*c*t98015*t98008*(1.0/6.0);
            double t98030 = b3p*c*t98000*t98008*(1.0/2.0);
            double t98031 = t98030+t98027+t98028+t98029;
            double t98032 = t98031*t98024*t98025*t98026;
            double t98033 = log(t98022);
            double t98034 = log(t97997);
            double t98035 = a1p*c*t97982;
            double t98036 = t98035+1.0;
            double t98037 = pow(2.0,1.0/3.0);
            double t98038 = t98037*2.0;
            double t98039 = t98038-2.0;
            double t98040 = two_13*2.0;
            double t98041 = t98040-2.0;
            double t98042 = 1.0/t98041;
            double t98043 = log(t98019);
            double t98044 = a1f*c*t97998;
            double t98045 = t98044+1.0;
            double t98046 = c0f*t98043*t98045*2.0;
            double t98048 = c0p*t98024*t98033*2.0;
            double t98047 = t98046-t98048;
            double t98049 = gcaa*gcaa;
            double t98050 = pow(rho_a[index],5.0/3.0);
            double t98051 = 1.0/tau_a[index];
            double t98052 = C_k*t98050*t98051;
            double t98053 = t98052-1.0;
            double t98054 = t98053*t98053;
            double t98055 = t98052+1.0;
            double t98056 = t98054*t98054;
            double t98057 = gx*gx;
            double t98058 = gamma_aa[index]*gx*t97976;
            double t98059 = t98058+1.0;
            double t98060 = 1.0/t98059;
            double t98061 = gamma_aa[index]*gx*t97976*3.0;
            double t98062 = gamma_aa[index]*gx*t97977*t97979*t98057;
            double t98063 = t97980*t97977*t98057*3.0;
            double t98064 = t98061+t98062+t98063+1.0;
            double t98065 = 1.0/t98064;
            double t98066 = gamma_aa[index]*gx*t97976*2.0;
            double t98067 = t97980*t97977*t98057;
            double t98068 = t98066+t98067+1.0;
            double t98069 = 1.0/t98068;
            double t98070 = 1.0/t98055;
            double t98071 = t98070*t98053;
            double t98072 = 1.0/(t98055*t98055*t98055);
            double t98073 = 1.0/(t98055*t98055*t98055*t98055*t98055);
            double t98074 = t98053*t98073*t98056;
            double t98075 = t98071+t98074-t98053*t98054*t98072*2.0;
            double t98076 = 1.0/pow(rho_a[index],1.9E1/3.0);
            double t98077 = 1.0/pow(rho_a[index],1.1E1/3.0);
            double t98078 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]*rho_a[index]);
            double t98079 = cxnl1*gamma_aa[index]*gx*t97976*t98060;
            double t98080 = cxnl3*gamma_aa[index]*gx*t97977*t97979*t98065*t98057;
            double t98081 = cxnl2*t97980*t97977*t98057*t98069;
            double t98082 = cxnl0+t98080+t98081+t98079;
            double t98083 = pow(rho_a[index],2.0/3.0);
            double t98084 = 1.0/(t98059*t98059);
            double t98085 = gamma_aa[index]*gx*t98077*8.0;
            double t98086 = gamma_aa[index]*gx*t97977*t98057*t98078*8.0;
            double t98087 = t97977*t98057*t98076*1.6E1;
            double t98088 = t98085+t98086+t98087;
            double t98089 = 1.0/(t98064*t98064);
            double t98090 = gamma_aa[index]*gx*t98077*(1.6E1/3.0);
            double t98091 = t97977*t98057*t98076*(1.6E1/3.0);
            double t98092 = t98090+t98091;
            double t98093 = 1.0/(t98068*t98068);
            double t98094 = t98042*t98047*t98039;
            double t98095 = t98048+t98094;
            double t98096 = gamma_aa[index]*gcab*t97976;
            double t98097 = t98096+1.0;
            double t98098 = 1.0/t98097;
            double t98099 = gamma_aa[index]*gcab*t97976*3.0;
            double t98100 = gamma_aa[index]*gcab*t97977*t97978*t97979;
            double t98101 = t97980*t97977*t97978*3.0;
            double t98102 = t98100+t98101+t98099+1.0;
            double t98103 = 1.0/t98102;
            double t98104 = gamma_aa[index]*gcab*t97976*2.0;
            double t98105 = t97980*t97977*t97978;
            double t98106 = t98104+t98105+1.0;
            double t98107 = 1.0/t98106;
            double t98108 = gamma_aa[index]*gcaa*t97976;
            double t98109 = t98108+1.0;
            double t98110 = 1.0/t98109;
            double t98111 = gamma_aa[index]*gcaa*t97976*3.0;
            double t98112 = gamma_aa[index]*gcaa*t97977*t97979*t98049;
            double t98113 = t97980*t97977*t98049*3.0;
            double t98114 = t98111+t98112+t98113+1.0;
            double t98115 = 1.0/t98114;
            double t98116 = gamma_aa[index]*gcaa*t97976*2.0;
            double t98117 = t97980*t97977*t98049;
            double t98118 = t98116+t98117+1.0;
            double t98119 = 1.0/t98118;
            double t98120 = 1.0/t98019;
            double t98121 = 1.0/(t98007*t98007);
            double t98122 = b4f*t97989*t98014*(2.0/3.0);
            double t98123 = b2f*c*t98008*(1.0/3.0);
            double t98124 = b1f*c*t98015*t98008*(1.0/6.0);
            double t98125 = b3f*c*t98000*t98008*(1.0/2.0);
            double t98126 = t98122+t98123+t98124+t98125;
            double t98127 = a1f*c*c0f*t98043*t98008*(2.0/3.0);
            double t98128 = a1p*c*c0p*t98033*t98008*(2.0/3.0);
            double t98129 = ccaa1*gamma_aa[index]*gcaa*t97976*t98110;
            double t98130 = ccaa3*gamma_aa[index]*gcaa*t97977*t97979*t98115*t98049;
            double t98131 = ccaa2*t97980*t97977*t98119*t98049;
            double t98132 = ccaa0+t98130+t98131+t98129;
            v_rho_a_[index] = -(ccab0+ccab1*gamma_aa[index]*gcab*t97976*t98098+ccab2*t97980*t97977*t97978*t98107+ \
               ccab3*gamma_aa[index]*gcab*t97977*t97978*t97979*t98103)*(rho_a[index]*((1.0/(t97992*t97992)*t98036* \
               (b4p*1.0/pow(t97981,5.0/3.0)*t97989*(2.0/3.0)+b2p*c*t97993*(1.0/3.0)+b3p*c*t97984*t97993*(1.0/2.0) \
               +b1p*c*1.0/sqrt(t97983)*t97993*(1.0/6.0)))/t97997-a1p*c*c0p*t97993*t98034*(2.0/3.0))*2.0+rho_a[index]* \
               (-t98032+t98128+t98042*t98039*(t98032+t98127-t98120*t98121*t98045*t98126-a1p*c*c0p*t98033*t98008*(2.0/ \
               3.0)))-c0p*t98024*t98033*2.0+c0p*t98034*t98036*2.0-t98042*t98047*t98039)-t98132*t98095-(rho_a[index]* \
               t98095*2.0-c0p*rho_a[index]*t98034*t98036*4.0)*(ccab1*gamma_aa[index]*gcab*t98077*t98098*(4.0/3.0) \
               +ccab2*t97977*t97978*t98107*t98076*(8.0/3.0)-ccab1*t97977*t97978*t98076*1.0/(t98097*t98097)*(4.0/3.0) \
               -ccab2*t97980*t97977*t97978*1.0/(t98106*t98106)*(gamma_aa[index]*gcab*t98077*(8.0/3.0)+t97977*t97978* \
               t98076*(8.0/3.0))+ccab3*gamma_aa[index]*gcab*t97977*t97978*t98103*t98078*4.0-ccab3*gamma_aa[index]* \
               gcab*t97977*t97978*t97979*1.0/(t98102*t98102)*(gamma_aa[index]*gcab*t98077*4.0+t97977*t97978*t98076* \
               8.0+gamma_aa[index]*gcab*t97977*t97978*t98078*4.0))-(X-1.0)*(c0*pow(rho_a[index],1.0/3.0)*(cx0+t98082* \
               t98075+cx1*gamma_aa[index]*gx*t97976*t98060+cx2*t97980*t97977*t98057*t98069+cx3*gamma_aa[index]*gx* \
               t97977*t97979*t98065*t98057)*(4.0/3.0)-c0*pow(rho_a[index],4.0/3.0)*(t98075*(cxnl1*gamma_aa[index]* \
               gx*t98060*t98077*(8.0/3.0)-cxnl1*t97977*t98057*t98084*t98076*(8.0/3.0)+cxnl2*t97977*t98057*t98076* \
               t98069*(1.6E1/3.0)-cxnl2*t97980*t97977*t98092*t98057*t98093+cxnl3*gamma_aa[index]*gx*t97977*t98065* \
               t98057*t98078*8.0-cxnl3*gamma_aa[index]*gx*t97977*t97979*t98057*t98088*t98089)-t98082*(C_k*t98051* \
               t98070*t98083*(5.0/3.0)-C_k*t98051*t98054*t98072*t98083*1.0E1+C_k*t98051*t98073*t98056*t98083*(2.5E1/ \
               3.0)-C_k*t98051*t98053*1.0/(t98055*t98055)*t98083*(5.0/3.0)+C_k*t98051*t98053*t98054*1.0/(t98055*t98055* \
               t98055*t98055)*t98083*1.0E1-C_k*t98051*t98053*1.0/(t98055*t98055*t98055*t98055*t98055*t98055)*t98056* \
               t98083*(2.5E1/3.0))+cx1*gamma_aa[index]*gx*t98060*t98077*(8.0/3.0)-cx1*t97977*t98057*t98084*t98076* \
               (8.0/3.0)+cx2*t97977*t98057*t98076*t98069*(1.6E1/3.0)-cx2*t97980*t97977*t98092*t98057*t98093+cx3*gamma_aa[index]* \
               gx*t97977*t98065*t98057*t98078*8.0-cx3*gamma_aa[index]*gx*t97977*t97979*t98057*t98088*t98089))+rho_a[index]* \
               t98132*(-t98032+t98128+t98042*t98039*(t98032+t98127-t98128-t98120*t98121*t98045*t98126))+rho_a[index]* \
               t98095*(ccaa1*gamma_aa[index]*gcaa*t98110*t98077*(8.0/3.0)+ccaa2*t97977*t98119*t98049*t98076*(1.6E1/ \
               3.0)-ccaa1*t97977*1.0/(t98109*t98109)*t98049*t98076*(8.0/3.0)-ccaa2*t97980*t97977*1.0/(t98118*t98118) \
               *t98049*(gamma_aa[index]*gcaa*t98077*(1.6E1/3.0)+t97977*t98049*t98076*(1.6E1/3.0))+ccaa3*gamma_aa[index]* \
               gcaa*t97977*t98115*t98049*t98078*8.0-ccaa3*gamma_aa[index]*gcaa*t97977*t97979*1.0/(t98114*t98114)* \
               t98049*(gamma_aa[index]*gcaa*t98077*8.0+t97977*t98049*t98076*1.6E1+gamma_aa[index]*gcaa*t97977*t98049* \
               t98078*8.0));
        } else {
            v_rho_a_[index] = 0.0;
        }

        if (is_gga_) {

            if (rho_a[index] > cutoff_) {
                double t98134 = 1.0/pow(rho_a[index],1.0/3.0);
                double t98135 = c*t98134;
                double t98136 = sqrt(t98135);
                double t98137 = pow(t98135,3.0/2.0);
                double t98138 = c*c;
                double t98139 = 1.0/pow(rho_a[index],2.0/3.0);
                double t98140 = 1.0/c0p;
                double t98141 = b1p*t98136;
                double t98142 = b3p*t98137;
                double t98143 = b4p*t98138*t98139;
                double t98144 = b2p*c*t98134;
                double t98145 = t98141+t98142+t98143+t98144;
                double t98146 = 1.0/t98145;
                double t98147 = t98140*t98146*(1.0/2.0);
                double t98148 = t98147+1.0;
                double t98149 = log(t98148);
                double t98150 = a1p*c*t98134;
                double t98151 = t98150+1.0;
                double t98152 = rho_a[index]*2.0;
                double t98153 = 1.0/pow(t98152,1.0/3.0);
                double t98154 = c*t98153;
                double t98155 = 1.0/pow(rho_a[index],8.0/3.0);
                double t98156 = gcab*gcab;
                double t98157 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t98158 = gamma_aa[index]*gamma_aa[index];
                double t98159 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t98160 = gamma_aa[index]*gcab*t98155;
                double t98161 = t98160+1.0;
                double t98162 = gamma_aa[index]*gcab*t98155*3.0;
                double t98163 = gamma_aa[index]*gcab*t98156*t98158*t98159;
                double t98164 = t98156*t98157*t98158*3.0;
                double t98165 = t98162+t98163+t98164+1.0;
                double t98166 = gamma_aa[index]*gcab*t98155*2.0;
                double t98167 = t98156*t98157*t98158;
                double t98168 = t98166+t98167+1.0;
                double t98169 = pow(2.0,1.0/3.0);
                double t98170 = t98169*2.0;
                double t98171 = t98170-2.0;
                double t98172 = two_13*2.0;
                double t98173 = t98172-2.0;
                double t98174 = 1.0/t98173;
                double t98175 = 1.0/c0f;
                double t98176 = b1f*t98136;
                double t98177 = b3f*t98137;
                double t98178 = b4f*t98138*t98139;
                double t98179 = b2f*c*t98134;
                double t98180 = t98176+t98177+t98178+t98179;
                double t98181 = 1.0/t98180;
                double t98182 = t98181*t98175*(1.0/2.0);
                double t98183 = t98182+1.0;
                double t98184 = log(t98183);
                double t98185 = a1f*c*t98134;
                double t98186 = t98185+1.0;
                double t98187 = c0f*t98184*t98186*2.0;
                double t98188 = c0p*t98151*t98149*2.0;
                double t98189 = gcaa*gcaa;
                double t98190 = gamma_aa[index]*gcaa*t98155;
                double t98191 = t98190+1.0;
                double t98192 = gamma_aa[index]*gcaa*t98155*3.0;
                double t98193 = gamma_aa[index]*gcaa*t98158*t98159*t98189;
                double t98194 = t98157*t98158*t98189*3.0;
                double t98195 = t98192+t98193+t98194+1.0;
                double t98196 = gamma_aa[index]*gcaa*t98155*2.0;
                double t98197 = t98157*t98158*t98189;
                double t98198 = t98196+t98197+1.0;
                double t98199 = pow(rho_a[index],5.0/3.0);
                double t98200 = 1.0/tau_a[index];
                double t98201 = C_k*t98200*t98199;
                double t98202 = t98201-1.0;
                double t98203 = t98202*t98202;
                double t98204 = t98201+1.0;
                double t98205 = t98203*t98203;
                double t98206 = gx*gx;
                double t98207 = gamma_aa[index]*gx*t98155;
                double t98208 = t98207+1.0;
                double t98209 = gamma_aa[index]*gx*t98155*3.0;
                double t98210 = gamma_aa[index]*gx*t98206*t98158*t98159;
                double t98211 = t98206*t98157*t98158*3.0;
                double t98212 = t98210+t98211+t98209+1.0;
                double t98213 = gamma_aa[index]*gx*t98155*2.0;
                double t98214 = t98206*t98157*t98158;
                double t98215 = t98213+t98214+1.0;
                double t98216 = 1.0/t98208;
                double t98217 = 1.0/t98215;
                double t98218 = 1.0/t98212;
                double t98219 = 1.0/(t98208*t98208);
                double t98220 = gx*t98155*3.0;
                double t98221 = gamma_aa[index]*t98206*t98157*6.0;
                double t98222 = gx*t98206*t98158*t98159*3.0;
                double t98223 = t98220+t98221+t98222;
                double t98224 = 1.0/(t98212*t98212);
                double t98225 = gx*t98155*2.0;
                double t98226 = gamma_aa[index]*t98206*t98157*2.0;
                double t98227 = t98225+t98226;
                double t98228 = 1.0/(t98215*t98215);
                v_gamma_aa_[index] = (rho_a[index]*(t98188+t98171*t98174*(t98187-c0p*t98151*t98149*2.0))*2.0-c0p* \
                   rho_a[index]*log((t98140*(1.0/2.0))/(b1p*sqrt(t98154)+b3p*pow(t98154,3.0/2.0)+b4p*1.0/pow(t98152,2.0/ \
                   3.0)*t98138+b2p*c*t98153)+1.0)*(a1p*c*t98153+1.0)*4.0)*((ccab1*gcab*t98155*(1.0/2.0))/t98161-ccab1* \
                   gamma_aa[index]*1.0/(t98161*t98161)*t98156*t98157*(1.0/2.0)+(ccab2*gamma_aa[index]*t98156*t98157)/ \
                   t98168-ccab2*t98156*t98157*t98158*1.0/(t98168*t98168)*(gcab*t98155+gamma_aa[index]*t98156*t98157)+ \
                   (ccab3*gcab*t98156*t98158*t98159*(3.0/2.0))/t98165-ccab3*gamma_aa[index]*gcab*t98156*1.0/(t98165*t98165) \
                   *t98158*t98159*(gcab*t98155*(3.0/2.0)+gamma_aa[index]*t98156*t98157*3.0+gcab*t98156*t98158*t98159* \
                   (3.0/2.0)))*2.0-rho_a[index]*(t98188+t98171*t98174*(t98187-t98188))*((ccaa1*gcaa*t98155)/t98191-ccaa1* \
                   gamma_aa[index]*1.0/(t98191*t98191)*t98157*t98189+(ccaa2*gamma_aa[index]*t98157*t98189*2.0)/t98198- \
                   ccaa2*t98157*t98158*t98189*1.0/(t98198*t98198)*(gcaa*t98155*2.0+gamma_aa[index]*t98157*t98189*2.0) \
                   +(ccaa3*gcaa*t98158*t98159*t98189*3.0)/t98195-ccaa3*gamma_aa[index]*gcaa*t98158*t98159*1.0/(t98195* \
                   t98195)*t98189*(gcaa*t98155*3.0+gamma_aa[index]*t98157*t98189*6.0+gcaa*t98158*t98159*t98189*3.0))* \
                   2.0-c0*pow(rho_a[index],4.0/3.0)*(X-1.0)*((t98202/t98204-t98202*t98203*1.0/(t98204*t98204*t98204)* \
                   2.0+t98202*1.0/(t98204*t98204*t98204*t98204*t98204)*t98205)*(cxnl1*gx*t98216*t98155+cxnl2*gamma_aa[index]* \
                   t98206*t98217*t98157*2.0-cxnl1*gamma_aa[index]*t98206*t98219*t98157-cxnl2*t98206*t98227*t98228*t98157* \
                   t98158+cxnl3*gx*t98206*t98218*t98158*t98159*3.0-cxnl3*gamma_aa[index]*gx*t98223*t98206*t98224*t98158* \
                   t98159)+cx1*gx*t98216*t98155-cx1*gamma_aa[index]*t98206*t98219*t98157+cx2*gamma_aa[index]*t98206*t98217* \
                   t98157*2.0-cx2*t98206*t98227*t98228*t98157*t98158+cx3*gx*t98206*t98218*t98158*t98159*3.0-cx3*gamma_aa[index]* \
                   gx*t98223*t98206*t98224*t98158*t98159)*2.0;
            } else {
                v_gamma_aa_[index] = 0.0;
            }

        }
        if (is_meta_) {

            //V_tau_a
            if (rho_a[index] > cutoff_) {
                double t98230 = 1.0/pow(rho_a[index],8.0/3.0);
                double t98231 = gamma_aa[index]*gamma_aa[index];
                double t98232 = gx*gx;
                double t98233 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t98234 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t98235 = pow(rho_a[index],5.0/3.0);
                double t98236 = 1.0/(tau_a[index]*tau_a[index]);
                double t98237 = 1.0/tau_a[index];
                double t98238 = C_k*t98235*t98237;
                double t98239 = t98238-1.0;
                double t98240 = t98238+1.0;
                double t98241 = t98239*t98239;
                double t98242 = t98241*t98241;
                v_tau_a_[index] = c0*pow(rho_a[index],4.0/3.0)*(X-1.0)*(cxnl0+(cxnl2*t98231*t98232*t98234)/(gamma_aa[index]* \
                   gx*t98230*2.0+t98231*t98232*t98234+1.0)+(cxnl1*gamma_aa[index]*gx*t98230)/(gamma_aa[index]*gx*t98230+ \
                   1.0)+(cxnl3*gamma_aa[index]*gx*t98231*t98232*t98233)/(gamma_aa[index]*gx*t98230*3.0+t98231*t98232* \
                   t98234*3.0+gamma_aa[index]*gx*t98231*t98232*t98233+1.0))*((C_k*t98235*t98236)/t98240-C_k*1.0/(t98240* \
                   t98240*t98240)*t98241*t98235*t98236*6.0+C_k*1.0/(t98240*t98240*t98240*t98240*t98240)*t98242*t98235* \
                   t98236*5.0-C_k*1.0/(t98240*t98240)*t98235*t98236*t98239+C_k*1.0/(t98240*t98240*t98240*t98240)*t98241* \
                   t98235*t98236*t98239*6.0-C_k*1.0/(t98240*t98240*t98240*t98240*t98240*t98240)*t98242*t98235*t98236* \
                   t98239*5.0);
            } else {
                v_tau_a_[index] = 0.0;
            }

        }
    }
    //Second Partials
    for (int index = 0; index < ntrue && deriv_ >= 2; index++) {

        //V_rho_a_rho_a
        if (rho_a[index] > cutoff_) {
            double t98244 = rho_a[index]*2.0;
            double t98245 = 1.0/pow(t98244,1.0/3.0);
            double t98246 = c*t98245;
            double t98247 = sqrt(t98246);
            double t98248 = b1p*t98247;
            double t98249 = pow(t98246,3.0/2.0);
            double t98250 = b3p*t98249;
            double t98251 = b2p*c*t98245;
            double t98252 = c*c;
            double t98253 = 1.0/pow(t98244,2.0/3.0);
            double t98254 = b4p*t98252*t98253;
            double t98255 = t98250+t98251+t98254+t98248;
            double t98256 = 1.0/pow(t98244,8.0/3.0);
            double t98257 = 1.0/pow(t98244,7.0/3.0);
            double t98258 = 1.0/sqrt(t98246);
            double t98259 = 1.0/c0p;
            double t98260 = 1.0/t98255;
            double t98261 = t98260*t98259*(1.0/2.0);
            double t98262 = t98261+1.0;
            double t98263 = 1.0/t98262;
            double t98264 = a1p*c*t98245;
            double t98265 = t98264+1.0;
            double t98266 = 1.0/pow(t98244,4.0/3.0);
            double t98268 = b2p*c*t98266*(1.0/3.0);
            double t98269 = 1.0/pow(t98244,5.0/3.0);
            double t98270 = b4p*t98252*t98269*(2.0/3.0);
            double t98271 = b1p*c*t98266*t98258*(1.0/6.0);
            double t98272 = b3p*c*t98247*t98266*(1.0/2.0);
            double t98267 = t98270+t98271+t98272+t98268;
            double t98273 = t98267*t98267;
            double t98274 = 1.0/(t98255*t98255);
            double t98275 = log(t98262);
            double t98276 = 1.0/pow(rho_a[index],8.0/3.0);
            double t98277 = gamma_aa[index]*gamma_aa[index];
            double t98278 = gcab*gcab;
            double t98279 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]);
            double t98280 = 1.0/pow(rho_a[index],1.6E1/3.0);
            double t98281 = two_13*2.0;
            double t98282 = t98281-2.0;
            double t98283 = 1.0/t98282;
            double t98284 = 1.0/pow(rho_a[index],1.0/3.0);
            double t98285 = c*t98284;
            double t98286 = sqrt(t98285);
            double t98287 = b1f*t98286;
            double t98288 = pow(t98285,3.0/2.0);
            double t98289 = b3f*t98288;
            double t98290 = 1.0/pow(rho_a[index],2.0/3.0);
            double t98291 = b4f*t98252*t98290;
            double t98292 = b2f*c*t98284;
            double t98293 = t98291+t98292+t98287+t98289;
            double t98294 = 1.0/pow(rho_a[index],4.0/3.0);
            double t98295 = b1p*t98286;
            double t98296 = b3p*t98288;
            double t98297 = b4p*t98252*t98290;
            double t98298 = b2p*c*t98284;
            double t98299 = t98295+t98296+t98297+t98298;
            double t98300 = 1.0/pow(rho_a[index],5.0/3.0);
            double t98301 = 1.0/sqrt(t98285);
            double t98302 = 1.0/c0f;
            double t98303 = 1.0/t98293;
            double t98304 = t98302*t98303*(1.0/2.0);
            double t98305 = t98304+1.0;
            double t98306 = 1.0/t98299;
            double t98307 = t98306*t98259*(1.0/2.0);
            double t98308 = t98307+1.0;
            double t98309 = a1p*c*t98284;
            double t98310 = t98309+1.0;
            double t98311 = 1.0/t98308;
            double t98312 = 1.0/(t98299*t98299);
            double t98313 = b4p*t98300*t98252*(2.0/3.0);
            double t98314 = b2p*c*t98294*(1.0/3.0);
            double t98315 = b1p*c*t98301*t98294*(1.0/6.0);
            double t98316 = b3p*c*t98294*t98286*(1.0/2.0);
            double t98317 = t98313+t98314+t98315+t98316;
            double t98318 = t98310*t98311*t98312*t98317;
            double t98319 = log(t98308);
            double t98320 = gcaa*gcaa;
            double t98321 = pow(2.0,1.0/3.0);
            double t98322 = t98321*2.0;
            double t98323 = t98322-2.0;
            double t98324 = log(t98305);
            double t98325 = a1f*c*t98284;
            double t98326 = t98325+1.0;
            double t98327 = gamma_aa[index]*gcab*t98276*3.0;
            double t98328 = gamma_aa[index]*gcab*t98277*t98278*t98279;
            double t98329 = t98280*t98277*t98278*3.0;
            double t98330 = t98327+t98328+t98329+1.0;
            double t98331 = 1.0/t98330;
            double t98332 = gamma_aa[index]*gcab*t98276*2.0;
            double t98333 = t98280*t98277*t98278;
            double t98334 = t98332+t98333+1.0;
            double t98335 = 1.0/t98334;
            double t98336 = 1.0/pow(rho_a[index],1.0E1);
            double t98337 = gamma_aa[index]*gcab*t98276;
            double t98338 = t98337+1.0;
            double t98339 = 1.0/pow(rho_a[index],2.2E1/3.0);
            double t98341 = 1.0/pow(rho_a[index],1.1E1/3.0);
            double t98343 = 1.0/pow(rho_a[index],1.9E1/3.0);
            double t98349 = gamma_aa[index]*gcab*t98341*(8.0/3.0);
            double t98350 = t98343*t98277*t98278*(8.0/3.0);
            double t98340 = t98350+t98349;
            double t98342 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]*rho_a[index]);
            double t98344 = 1.0/(t98330*t98330);
            double t98345 = gamma_aa[index]*gcab*t98341*4.0;
            double t98346 = gamma_aa[index]*gcab*t98342*t98277*t98278*4.0;
            double t98347 = t98343*t98277*t98278*8.0;
            double t98348 = t98345+t98346+t98347;
            double t98351 = 1.0/(t98334*t98334);
            double t98352 = c0f*t98324*t98326*2.0;
            double t98353 = c0p*t98310*t98319*2.0;
            double t98354 = 1.0/t98338;
            double t98355 = 1.0/(t98338*t98338*t98338);
            double t98356 = ccab1*gamma_aa[index]*gcab*t98336*t98355*t98277*t98278*(3.2E1/9.0);
            double t98357 = 1.0/(t98338*t98338);
            double t98358 = t98340*t98340;
            double t98359 = 1.0/(t98334*t98334*t98334);
            double t98360 = ccab2*t98280*t98277*t98358*t98278*t98359*2.0;
            double t98361 = 1.0/pow(rho_a[index],1.4E1/3.0);
            double t98362 = t98348*t98348;
            double t98363 = 1.0/(t98330*t98330*t98330);
            double t98364 = ccab3*gamma_aa[index]*gcab*t98362*t98363*t98277*t98278*t98279*2.0;
            double t98365 = 1.0/t98305;
            double t98366 = 1.0/(t98293*t98293);
            double t98367 = b4f*t98300*t98252*(2.0/3.0);
            double t98368 = b2f*c*t98294*(1.0/3.0);
            double t98369 = b1f*c*t98301*t98294*(1.0/6.0);
            double t98370 = b3f*c*t98294*t98286*(1.0/2.0);
            double t98371 = t98370+t98367+t98368+t98369;
            double t98372 = a1f*c*c0f*t98324*t98294*(2.0/3.0);
            double t98373 = a1p*c*c0p*t98319*t98294*(2.0/3.0);
            double t98374 = t98352-t98353;
            double t98375 = t98323*t98283*t98374;
            double t98376 = ccab1*gamma_aa[index]*gcab*t98354*t98276;
            double t98377 = ccab3*gamma_aa[index]*gcab*t98331*t98277*t98278*t98279;
            double t98378 = ccab2*t98280*t98335*t98277*t98278;
            double t98379 = ccab0+t98376+t98377+t98378;
            double t98380 = b2p*c*t98257*(4.0/9.0);
            double t98381 = b4p*t98252*t98256*(1.0E1/9.0);
            double t98382 = 1.0/pow(t98246,3.0/2.0);
            double t98383 = b3p*t98252*t98256*t98258*(1.0/1.2E1);
            double t98384 = b1p*c*t98257*t98258*(2.0/9.0);
            double t98385 = b3p*c*t98247*t98257*(2.0/3.0);
            double t98386 = t98380+t98381+t98383+t98384+t98385-b1p*t98252*t98256*t98382*(1.0/3.6E1);
            double t98387 = t98263*t98265*t98274*t98386;
            double t98388 = 1.0/(t98255*t98255*t98255);
            double t98389 = 1.0/(t98262*t98262);
            double t98390 = 1.0/(t98255*t98255*t98255*t98255);
            double t98391 = t98273*t98390*t98265*t98259*t98389*(1.0/2.0);
            double t98392 = 1.0/d2fz0;
            double t98393 = 1.0/(rho_a[index]*rho_a[index]);
            double t98394 = 1.0/Aa;
            double t98395 = b1a*t98247;
            double t98396 = b3a*t98249;
            double t98397 = b2a*c*t98245;
            double t98398 = b4a*t98252*t98253;
            double t98399 = t98395+t98396+t98397+t98398;
            double t98400 = 1.0/t98399;
            double t98401 = t98400*t98394*(1.0/2.0);
            double t98402 = t98401+1.0;
            double t98403 = log(t98402);
            double t98404 = a1a*c*t98245;
            double t98405 = t98404+1.0;
            double t98406 = a1p*c*t98263*t98274*t98266*t98267*(2.0/3.0);
            double t98407 = 1.0/pow(rho_a[index],7.0/3.0);
            double t98408 = 1.0/pow(t98285,3.0/2.0);
            double t98409 = t98371*t98371;
            double t98410 = t98317*t98317;
            double t98411 = 1.0/(t98299*t98299*t98299);
            double t98412 = t98310*t98311*t98410*t98411*2.0;
            double t98413 = b4p*t98252*t98276*(1.0E1/9.0);
            double t98414 = b2p*c*t98407*(4.0/9.0);
            double t98415 = b3p*t98301*t98252*t98276*(1.0/1.2E1);
            double t98416 = b1p*c*t98301*t98407*(2.0/9.0);
            double t98417 = b3p*c*t98407*t98286*(2.0/3.0);
            double t98532 = b1p*t98252*t98408*t98276*(1.0/3.6E1);
            double t98418 = t98413+t98414+t98415-t98532+t98416+t98417;
            double t98419 = 1.0/(t98308*t98308);
            double t98420 = 1.0/(t98299*t98299*t98299*t98299);
            double t98421 = a1p*c*c0p*t98407*t98319*(8.0/9.0);
            double t98515 = t98326*t98371*t98365*t98366;
            double t98422 = -t98515+t98318+t98372-t98373;
            double t98423 = a1p*c*c0p*t98266*t98275*(4.0/3.0);
            double t98424 = pow(rho_a[index],5.0/3.0);
            double t98425 = 1.0/tau_a[index];
            double t98426 = C_k*t98424*t98425;
            double t98427 = t98426-1.0;
            double t98428 = t98427*t98427;
            double t98429 = t98426+1.0;
            double t98430 = t98428*t98428;
            double t98431 = gx*gx;
            double t98432 = gamma_aa[index]*gx*t98276;
            double t98433 = t98432+1.0;
            double t98434 = 1.0/t98433;
            double t98435 = gamma_aa[index]*gx*t98276*3.0;
            double t98436 = gamma_aa[index]*gx*t98431*t98277*t98279;
            double t98437 = t98431*t98280*t98277*3.0;
            double t98438 = t98435+t98436+t98437+1.0;
            double t98439 = 1.0/t98438;
            double t98440 = gamma_aa[index]*gx*t98276*2.0;
            double t98441 = t98431*t98280*t98277;
            double t98442 = t98440+t98441+1.0;
            double t98443 = 1.0/t98442;
            double t98444 = cxnl1*gamma_aa[index]*gx*t98434*t98276;
            double t98445 = cxnl3*gamma_aa[index]*gx*t98431*t98277*t98439*t98279;
            double t98446 = cxnl2*t98431*t98280*t98443*t98277;
            double t98447 = cxnl0+t98444+t98445+t98446;
            double t98448 = 1.0/t98429;
            double t98449 = pow(rho_a[index],4.0/3.0);
            double t98450 = 1.0/(t98429*t98429*t98429);
            double t98451 = 1.0/(t98429*t98429*t98429*t98429*t98429);
            double t98452 = C_k*C_k;
            double t98453 = 1.0/(tau_a[index]*tau_a[index]);
            double t98454 = 1.0/(t98429*t98429*t98429*t98429);
            double t98455 = 1.0/(t98429*t98429*t98429*t98429*t98429*t98429);
            double t98456 = 1.0/(t98429*t98429);
            double t98457 = t98427*t98448;
            double t98458 = t98430*t98451*t98427;
            double t98483 = t98450*t98427*t98428*2.0;
            double t98459 = -t98483+t98457+t98458;
            double t98466 = gamma_aa[index]*gx*t98341*(1.6E1/3.0);
            double t98467 = t98431*t98343*t98277*(1.6E1/3.0);
            double t98460 = t98466+t98467;
            double t98461 = 1.0/(t98438*t98438);
            double t98462 = gamma_aa[index]*gx*t98341*8.0;
            double t98463 = gamma_aa[index]*gx*t98431*t98342*t98277*8.0;
            double t98464 = t98431*t98343*t98277*1.6E1;
            double t98465 = t98462+t98463+t98464;
            double t98468 = 1.0/(t98442*t98442);
            double t98469 = pow(rho_a[index],2.0/3.0);
            double t98470 = 1.0/(t98433*t98433);
            double t98471 = 1.0/(t98433*t98433*t98433);
            double t98472 = t98460*t98460;
            double t98473 = 1.0/(t98442*t98442*t98442);
            double t98474 = gamma_aa[index]*gx*t98361*(8.8E1/3.0);
            double t98475 = gamma_aa[index]*gx*t98431*t98336*t98277*7.2E1;
            double t98476 = t98431*t98339*t98277*(3.04E2/3.0);
            double t98477 = t98474+t98475+t98476;
            double t98478 = t98465*t98465;
            double t98479 = 1.0/(t98438*t98438*t98438);
            double t98480 = gamma_aa[index]*gx*t98361*(1.76E2/9.0);
            double t98481 = t98431*t98339*t98277*(3.04E2/9.0);
            double t98482 = t98480+t98481;
            double t98484 = cxnl1*gamma_aa[index]*gx*t98341*t98434*(8.0/3.0);
            double t98485 = cxnl3*gamma_aa[index]*gx*t98431*t98342*t98277*t98439*8.0;
            double t98486 = cxnl2*t98431*t98343*t98443*t98277*(1.6E1/3.0);
            double t98487 = t98484+t98485+t98486-cxnl1*t98431*t98343*t98470*t98277*(8.0/3.0)-cxnl2*t98431*t98280* \
               t98460*t98277*t98468-cxnl3*gamma_aa[index]*gx*t98431*t98461*t98465*t98277*t98279;
            double t98488 = C_k*t98425*t98448*t98469*(5.0/3.0);
            double t98489 = C_k*t98425*t98427*t98454*t98428*t98469*1.0E1;
            double t98490 = C_k*t98430*t98451*t98425*t98469*(2.5E1/3.0);
            double t98491 = t98490+t98488+t98489-C_k*t98450*t98425*t98428*t98469*1.0E1-C_k*t98425*t98427*t98456* \
               t98469*(5.0/3.0)-C_k*t98430*t98425*t98427*t98455*t98469*(2.5E1/3.0);
            double t98492 = t98353+t98375;
            double t98493 = gamma_aa[index]*gcaa*t98276;
            double t98494 = t98493+1.0;
            double t98495 = 1.0/t98494;
            double t98496 = gamma_aa[index]*gcaa*t98276*3.0;
            double t98497 = gamma_aa[index]*gcaa*t98320*t98277*t98279;
            double t98498 = t98320*t98280*t98277*3.0;
            double t98499 = t98496+t98497+t98498+1.0;
            double t98500 = 1.0/t98499;
            double t98501 = gamma_aa[index]*gcaa*t98276*2.0;
            double t98502 = t98320*t98280*t98277;
            double t98503 = t98501+t98502+1.0;
            double t98504 = 1.0/t98503;
            double t98505 = 1.0/(t98494*t98494);
            double t98506 = gamma_aa[index]*gcaa*t98341*(1.6E1/3.0);
            double t98507 = t98320*t98343*t98277*(1.6E1/3.0);
            double t98508 = t98506+t98507;
            double t98509 = gamma_aa[index]*gcaa*t98341*8.0;
            double t98510 = gamma_aa[index]*gcaa*t98320*t98342*t98277*8.0;
            double t98511 = t98320*t98343*t98277*1.6E1;
            double t98512 = t98510+t98511+t98509;
            double t98513 = 1.0/(t98499*t98499);
            double t98514 = 1.0/(t98503*t98503);
            double t98516 = ccaa1*gamma_aa[index]*gcaa*t98341*t98495*(8.0/3.0);
            double t98517 = ccaa3*gamma_aa[index]*gcaa*t98320*t98500*t98342*t98277*8.0;
            double t98518 = ccaa2*t98320*t98504*t98343*t98277*(1.6E1/3.0);
            double t98519 = t98516+t98517+t98518-ccaa1*t98320*t98343*t98505*t98277*(8.0/3.0)-ccaa2*t98320*t98280* \
               t98514*t98508*t98277-ccaa3*gamma_aa[index]*gcaa*t98320*t98512*t98513*t98277*t98279;
            double t98520 = ccaa1*gamma_aa[index]*gcaa*t98276*t98495;
            double t98521 = ccaa3*gamma_aa[index]*gcaa*t98320*t98500*t98277*t98279;
            double t98522 = ccaa2*t98320*t98504*t98280*t98277;
            double t98523 = ccaa0+t98520+t98521+t98522;
            double t98524 = 1.0/(t98293*t98293*t98293);
            double t98525 = b4f*t98252*t98276*(1.0E1/9.0);
            double t98526 = b2f*c*t98407*(4.0/9.0);
            double t98527 = b3f*t98301*t98252*t98276*(1.0/1.2E1);
            double t98528 = b1f*c*t98301*t98407*(2.0/9.0);
            double t98529 = b3f*c*t98407*t98286*(2.0/3.0);
            double t98530 = t98525+t98526+t98527+t98528+t98529-b1f*t98252*t98408*t98276*(1.0/3.6E1);
            double t98531 = t98530*t98326*t98365*t98366;
            double t98533 = t98310*t98311*t98312*t98418;
            double t98534 = 1.0/(t98305*t98305);
            double t98535 = 1.0/(t98293*t98293*t98293*t98293);
            double t98536 = t98302*t98326*t98534*t98409*t98535*(1.0/2.0);
            double t98537 = t98310*t98410*t98420*t98419*t98259*(1.0/2.0);
            double t98538 = a1f*c*t98371*t98365*t98294*t98366*(2.0/3.0);
            double t98539 = a1p*c*t98311*t98312*t98317*t98294*(2.0/3.0);
            v_rho_a_rho_a_[index] = (rho_a[index]*(t98353+t98323*t98283*(t98352-c0p*t98310*t98319*2.0))*2.0-c0p* \
               rho_a[index]*t98265*t98275*4.0)*(t98360+t98364+t98356+ccab2*t98335*t98339*t98277*t98278*(3.2E1/9.0) \
               -ccab1*t98339*t98357*t98277*t98278*(3.2E1/9.0)-ccab2*1.0/pow(rho_a[index],3.8E1/3.0)*t98351*(t98277* \
               t98277)*(t98278*t98278)*(3.2E1/9.0)-ccab2*t98340*t98351*t98343*t98277*t98278*(1.6E1/3.0)+ccab3*gamma_aa[index]* \
               gcab*t98331*t98336*t98277*t98278*(3.2E1/3.0)-ccab3*gamma_aa[index]*gcab*t98344*t98277*t98278*t98279* \
               (t98339*t98277*t98278*(3.2E1/3.0)+gamma_aa[index]*gcab*t98336*t98277*t98278*(3.2E1/3.0))-ccab3*gamma_aa[index]* \
               gcab*t98342*t98344*t98348*t98277*t98278*8.0)-t98379*(-t98423-rho_a[index]*(t98406+t98391+t98387-t98263* \
               t98273*t98265*t98388*2.0-a1p*c*c0p*t98257*t98275*(8.0/9.0)+Aa*t98403*t98405*t98283*t98392*t98393*(4.0/ \
               9.0))*2.0+rho_a[index]*(-t98412-t98421+t98533+t98537+t98539+t98323*t98283*(t98412+t98421+t98531+t98536+ \
               t98538-t98310*t98311*t98312*t98418-t98326*t98524*t98409*t98365*2.0-a1f*c*c0f*t98324*t98407*(8.0/9.0) \
               -t98310*t98410*t98420*t98419*t98259*(1.0/2.0)-a1p*c*t98311*t98312*t98317*t98294*(2.0/3.0)))+t98323* \
               t98422*t98283*2.0-t98310*t98311*t98312*t98317*2.0+t98263*t98265*t98274*t98267*2.0+a1p*c*c0p*t98319* \
               t98294*(4.0/3.0))+t98492*t98519*2.0+(-t98353-t98375+rho_a[index]*(-t98318+t98373+t98323*t98422*t98283) \
               +rho_a[index]*(t98263*t98265*t98274*t98267-a1p*c*c0p*t98266*t98275*(2.0/3.0))*2.0+c0p*t98265*t98275* \
               2.0)*(ccab1*gamma_aa[index]*gcab*t98341*t98354*(4.0/3.0)+ccab2*t98343*t98335*t98277*t98278*(8.0/3.0) \
               -ccab1*t98343*t98357*t98277*t98278*(4.0/3.0)-ccab2*t98340*t98351*t98280*t98277*t98278+ccab3*gamma_aa[index]* \
               gcab*t98331*t98342*t98277*t98278*4.0-ccab3*gamma_aa[index]*gcab*t98344*t98348*t98277*t98278*t98279) \
               *4.0+t98523*(-t98318+t98373+t98323*t98283*(t98318+t98372-t98326*t98371*t98365*t98366-a1p*c*c0p*t98319* \
               t98294*(2.0/3.0)))*2.0-(X-1.0)*(-c0*t98449*(t98447*(t98452*t98453*t98456*t98449*(5.0E1/9.0)-C_k*t98425* \
               t98284*t98448*(1.0E1/9.0)-C_k*t98430*t98451*t98425*t98284*(5.0E1/9.0)+C_k*t98450*t98425*t98284*t98428* \
               (2.0E1/3.0)+C_k*t98425*t98427*t98284*t98456*(1.0E1/9.0)+t98430*t98452*t98453*t98455*t98449*(1.25E3/ \
               9.0)+t98450*t98452*t98453*t98427*t98449*(2.5E2/9.0)-t98452*t98453*t98454*t98428*t98449*1.0E2+t98451* \
               t98452*t98453*t98427*t98428*t98449*(1.0E2/9.0)-t98430*t98452*t98453*t98427*1.0/(t98429*t98429*t98429* \
               t98429*t98429*t98429*t98429)*t98449*(2.5E2/3.0)+C_k*t98430*t98425*t98427*t98284*t98455*(5.0E1/9.0) \
               -C_k*t98425*t98427*t98454*t98284*t98428*(2.0E1/3.0))-t98459*(cxnl1*gamma_aa[index]*gx*t98361*t98434* \
               (8.8E1/9.0)-cxnl1*t98431*t98470*t98339*t98277*2.4E1+cxnl2*t98431*t98443*t98339*t98277*(3.04E2/9.0) \
               +cxnl2*t98431*t98280*t98472*t98473*t98277*2.0-cxnl2*t98431*t98343*t98460*t98277*t98468*(3.2E1/3.0) \
               -cxnl2*t98431*t98280*t98482*t98277*t98468+cxnl1*gamma_aa[index]*gx*t98431*t98336*t98471*t98277*(1.28E2/ \
               9.0)+cxnl3*gamma_aa[index]*gx*t98431*t98336*t98277*t98439*7.2E1-cxnl3*gamma_aa[index]*gx*t98431*t98342* \
               t98461*t98465*t98277*1.6E1-cxnl3*gamma_aa[index]*gx*t98431*t98461*t98277*t98279*t98477+cxnl3*gamma_aa[index]* \
               gx*t98431*t98277*t98279*t98478*t98479*2.0)+t98491*t98487*2.0-cx1*gamma_aa[index]*gx*t98361*t98434* \
               (8.8E1/9.0)+cx1*t98431*t98470*t98339*t98277*2.4E1-cx2*t98431*t98443*t98339*t98277*(3.04E2/9.0)-cx2* \
               t98431*t98280*t98472*t98473*t98277*2.0+cx2*t98431*t98343*t98460*t98277*t98468*(3.2E1/3.0)+cx2*t98431* \
               t98280*t98482*t98277*t98468-cx1*gamma_aa[index]*gx*t98431*t98336*t98471*t98277*(1.28E2/9.0)-cx3*gamma_aa[index]* \
               gx*t98431*t98336*t98277*t98439*7.2E1+cx3*gamma_aa[index]*gx*t98431*t98342*t98461*t98465*t98277*1.6E1+ \
               cx3*gamma_aa[index]*gx*t98431*t98461*t98277*t98279*t98477-cx3*gamma_aa[index]*gx*t98431*t98277*t98279* \
               t98478*t98479*2.0)+c0*pow(rho_a[index],1.0/3.0)*(t98491*t98447-t98459*t98487-cx1*gamma_aa[index]*gx* \
               t98341*t98434*(8.0/3.0)+cx1*t98431*t98343*t98470*t98277*(8.0/3.0)-cx2*t98431*t98343*t98443*t98277* \
               (1.6E1/3.0)+cx2*t98431*t98280*t98460*t98277*t98468-cx3*gamma_aa[index]*gx*t98431*t98342*t98277*t98439* \
               8.0+cx3*gamma_aa[index]*gx*t98431*t98461*t98465*t98277*t98279)*(8.0/3.0)+c0*t98290*(cx0+t98447*t98459+ \
               cx1*gamma_aa[index]*gx*t98434*t98276+cx2*t98431*t98280*t98443*t98277+cx3*gamma_aa[index]*gx*t98431* \
               t98277*t98439*t98279)*(4.0/9.0))+(rho_a[index]*t98492*2.0-c0p*rho_a[index]*t98265*t98275*4.0)*(t98360+ \
               t98364+t98356+ccab1*gamma_aa[index]*gcab*t98361*t98354*(4.4E1/9.0)+ccab2*t98335*t98339*t98277*t98278* \
               (4.0E1/3.0)-ccab1*t98339*t98357*t98277*t98278*(7.6E1/9.0)-ccab2*t98340*t98351*t98343*t98277*t98278* \
               (1.6E1/3.0)-ccab2*t98351*t98280*t98277*t98278*(gamma_aa[index]*gcab*t98361*(8.8E1/9.0)+t98339*t98277* \
               t98278*(4.0E1/3.0))+ccab3*gamma_aa[index]*gcab*t98331*t98336*t98277*t98278*(7.6E1/3.0)-ccab3*gamma_aa[index]* \
               gcab*t98344*t98277*t98278*t98279*(gamma_aa[index]*gcab*t98361*(4.4E1/3.0)+t98339*t98277*t98278*4.0E1+ \
               gamma_aa[index]*gcab*t98336*t98277*t98278*(7.6E1/3.0))-ccab3*gamma_aa[index]*gcab*t98342*t98344*t98348* \
               t98277*t98278*8.0)+t98379*(t98423+rho_a[index]*(t98406+t98391+t98387-t98263*t98273*t98265*t98388*2.0- \
               a1p*c*c0p*t98257*t98275*(8.0/9.0)-Aa*t98403*t98405*t98283*t98392*t98393*(4.0/9.0))*2.0-t98263*t98265* \
               t98274*t98267*2.0)+rho_a[index]*t98519*(t98318-t98373+t98323*t98283*(t98515-t98318-t98372+t98373)) \
               *2.0-rho_a[index]*t98492*(ccaa1*gamma_aa[index]*gcaa*t98361*t98495*(8.8E1/9.0)-ccaa1*t98320*t98505* \
               t98339*t98277*2.4E1+ccaa2*t98320*t98504*t98339*t98277*(3.04E2/9.0)-ccaa2*t98320*t98343*t98514*t98508* \
               t98277*(3.2E1/3.0)-ccaa2*t98320*t98280*t98514*t98277*(gamma_aa[index]*gcaa*t98361*(1.76E2/9.0)+t98320* \
               t98339*t98277*(3.04E2/9.0))+ccaa2*t98320*1.0/(t98503*t98503*t98503)*t98280*(t98508*t98508)*t98277* \
               2.0+ccaa3*gamma_aa[index]*gcaa*t98320*t98500*t98336*t98277*7.2E1+ccaa1*gamma_aa[index]*gcaa*t98320* \
               t98336*t98277*1.0/(t98494*t98494*t98494)*(1.28E2/9.0)+ccaa3*gamma_aa[index]*gcaa*t98320*(t98512*t98512) \
               *t98277*t98279*1.0/(t98499*t98499*t98499)*2.0-ccaa3*gamma_aa[index]*gcaa*t98320*t98513*t98277*t98279* \
               (gamma_aa[index]*gcaa*t98361*(8.8E1/3.0)+t98320*t98339*t98277*(3.04E2/3.0)+gamma_aa[index]*gcaa*t98320* \
               t98336*t98277*7.2E1)-ccaa3*gamma_aa[index]*gcaa*t98320*t98512*t98342*t98513*t98277*1.6E1)+rho_a[index]* \
               t98523*(-t98412-t98421+t98533+t98537+t98539+t98323*t98283*(t98412+t98421+t98531-t98533+t98536-t98537+ \
               t98538-t98539-t98326*t98524*t98409*t98365*2.0-a1f*c*c0f*t98324*t98407*(8.0/9.0)));
        } else {
            v_rho_a_rho_a_[index] = 0.0;
        }

        if (is_gga_) {

            //V_rho_a_gamma_aa
            if (rho_a[index] > cutoff_) {
                double t98541 = 1.0/pow(rho_a[index],1.0/3.0);
                double t98542 = c*t98541;
                double t98543 = sqrt(t98542);
                double t98544 = pow(t98542,3.0/2.0);
                double t98545 = c*c;
                double t98546 = 1.0/pow(rho_a[index],2.0/3.0);
                double t98547 = 1.0/c0p;
                double t98548 = b1p*t98543;
                double t98549 = b3p*t98544;
                double t98550 = b4p*t98545*t98546;
                double t98551 = b2p*c*t98541;
                double t98552 = t98550+t98551+t98548+t98549;
                double t98553 = 1.0/t98552;
                double t98554 = t98553*t98547*(1.0/2.0);
                double t98555 = t98554+1.0;
                double t98556 = log(t98555);
                double t98557 = a1p*c*t98541;
                double t98558 = t98557+1.0;
                double t98559 = 1.0/pow(rho_a[index],8.0/3.0);
                double t98560 = gcaa*gcaa;
                double t98561 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t98562 = gamma_aa[index]*gamma_aa[index];
                double t98563 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t98564 = gamma_aa[index]*gcaa*t98559;
                double t98565 = t98564+1.0;
                double t98566 = gamma_aa[index]*gcaa*t98559*3.0;
                double t98567 = gamma_aa[index]*gcaa*t98560*t98562*t98563;
                double t98568 = t98560*t98561*t98562*3.0;
                double t98569 = t98566+t98567+t98568+1.0;
                double t98570 = gamma_aa[index]*gcaa*t98559*2.0;
                double t98571 = t98560*t98561*t98562;
                double t98572 = t98570+t98571+1.0;
                double t98573 = 1.0/tau_a[index];
                double t98574 = pow(rho_a[index],2.0/3.0);
                double t98575 = pow(rho_a[index],5.0/3.0);
                double t98576 = C_k*t98573*t98575;
                double t98577 = t98576-1.0;
                double t98578 = t98576+1.0;
                double t98579 = t98577*t98577;
                double t98580 = t98579*t98579;
                double t98581 = gx*gx;
                double t98582 = gamma_aa[index]*gx*t98559;
                double t98583 = t98582+1.0;
                double t98584 = gamma_aa[index]*gx*t98559*3.0;
                double t98585 = gamma_aa[index]*gx*t98562*t98563*t98581;
                double t98586 = t98561*t98562*t98581*3.0;
                double t98587 = t98584+t98585+t98586+1.0;
                double t98588 = gamma_aa[index]*gx*t98559*2.0;
                double t98589 = t98561*t98562*t98581;
                double t98590 = t98588+t98589+1.0;
                double t98591 = 1.0/t98578;
                double t98592 = 1.0/(t98578*t98578*t98578);
                double t98593 = 1.0/(t98578*t98578*t98578*t98578*t98578);
                double t98594 = 1.0/t98583;
                double t98595 = 1.0/t98590;
                double t98596 = 1.0/t98587;
                double t98597 = 1.0/pow(rho_a[index],1.9E1/3.0);
                double t98598 = 1.0/(t98583*t98583);
                double t98599 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]*rho_a[index]);
                double t98600 = 1.0/pow(rho_a[index],1.1E1/3.0);
                double t98601 = 1.0/(t98587*t98587);
                double t98602 = 1.0/(t98590*t98590);
                double t98603 = gx*t98559*3.0;
                double t98604 = gamma_aa[index]*t98561*t98581*6.0;
                double t98605 = gx*t98562*t98563*t98581*3.0;
                double t98606 = t98603+t98604+t98605;
                double t98607 = gx*t98559*2.0;
                double t98608 = gamma_aa[index]*t98561*t98581*2.0;
                double t98609 = t98607+t98608;
                double t98610 = gamma_aa[index]*gx*t98600*(1.6E1/3.0);
                double t98611 = t98562*t98581*t98597*(1.6E1/3.0);
                double t98612 = t98610+t98611;
                double t98613 = gamma_aa[index]*gx*t98600*8.0;
                double t98614 = gamma_aa[index]*gx*t98562*t98581*t98599*8.0;
                double t98615 = t98562*t98581*t98597*1.6E1;
                double t98616 = t98613+t98614+t98615;
                double t98617 = 1.0/(t98583*t98583*t98583);
                double t98618 = gx*t98600*8.0;
                double t98619 = gamma_aa[index]*t98581*t98597*3.2E1;
                double t98620 = gx*t98562*t98581*t98599*2.4E1;
                double t98621 = t98620+t98618+t98619;
                double t98622 = gx*t98600*(1.6E1/3.0);
                double t98623 = gamma_aa[index]*t98581*t98597*(3.2E1/3.0);
                double t98624 = t98622+t98623;
                double t98625 = 1.0/(t98590*t98590*t98590);
                double t98626 = 1.0/(t98587*t98587*t98587);
                double t98627 = t98591*t98577;
                double t98628 = t98580*t98593*t98577;
                double t98629 = t98627+t98628-t98592*t98577*t98579*2.0;
                double t98630 = cxnl1*gx*t98594*t98559;
                double t98631 = cxnl2*gamma_aa[index]*t98561*t98581*t98595*2.0;
                double t98632 = cxnl3*gx*t98562*t98563*t98581*t98596*3.0;
                double t98633 = t98630+t98631+t98632-cxnl1*gamma_aa[index]*t98561*t98581*t98598-cxnl2*t98602*t98561* \
                   t98562*t98581*t98609-cxnl3*gamma_aa[index]*gx*t98601*t98606*t98562*t98563*t98581;
                double t98634 = pow(2.0,1.0/3.0);
                double t98635 = t98634*2.0;
                double t98636 = t98635-2.0;
                double t98637 = two_13*2.0;
                double t98638 = t98637-2.0;
                double t98639 = 1.0/t98638;
                double t98640 = 1.0/c0f;
                double t98641 = b1f*t98543;
                double t98642 = b3f*t98544;
                double t98643 = b4f*t98545*t98546;
                double t98644 = b2f*c*t98541;
                double t98645 = t98641+t98642+t98643+t98644;
                double t98646 = 1.0/t98645;
                double t98647 = t98640*t98646*(1.0/2.0);
                double t98648 = t98647+1.0;
                double t98649 = log(t98648);
                double t98650 = a1f*c*t98541;
                double t98651 = t98650+1.0;
                double t98652 = c0f*t98651*t98649*2.0;
                double t98653 = c0p*t98556*t98558*2.0;
                double t98654 = rho_a[index]*2.0;
                double t98655 = 1.0/pow(t98654,1.0/3.0);
                double t98656 = c*t98655;
                double t98657 = gcab*gcab;
                double t98658 = gamma_aa[index]*gcab*t98559;
                double t98659 = t98658+1.0;
                double t98660 = gamma_aa[index]*gcab*t98559*3.0;
                double t98661 = gamma_aa[index]*gcab*t98562*t98563*t98657;
                double t98662 = t98561*t98562*t98657*3.0;
                double t98663 = t98660+t98661+t98662+1.0;
                double t98664 = gamma_aa[index]*gcab*t98559*2.0;
                double t98665 = t98561*t98562*t98657;
                double t98666 = t98664+t98665+1.0;
                double t98667 = 1.0/(t98663*t98663);
                double t98668 = 1.0/(t98666*t98666);
                double t98669 = gamma_aa[index]*gcab*t98600*(8.0/3.0);
                double t98670 = t98562*t98657*t98597*(8.0/3.0);
                double t98671 = t98670+t98669;
                double t98672 = gcab*t98559;
                double t98673 = gamma_aa[index]*t98561*t98657;
                double t98674 = t98672+t98673;
                double t98675 = gcab*t98559*(3.0/2.0);
                double t98676 = gamma_aa[index]*t98561*t98657*3.0;
                double t98677 = gcab*t98562*t98563*t98657*(3.0/2.0);
                double t98678 = t98675+t98676+t98677;
                double t98679 = gamma_aa[index]*gcab*t98600*4.0;
                double t98680 = gamma_aa[index]*gcab*t98562*t98657*t98599*4.0;
                double t98681 = t98562*t98657*t98597*8.0;
                double t98682 = t98680+t98681+t98679;
                double t98683 = sqrt(t98656);
                double t98684 = b1p*t98683;
                double t98685 = pow(t98656,3.0/2.0);
                double t98686 = b3p*t98685;
                double t98687 = b2p*c*t98655;
                double t98688 = 1.0/pow(t98654,2.0/3.0);
                double t98689 = b4p*t98545*t98688;
                double t98690 = t98684+t98686+t98687+t98689;
                double t98691 = 1.0/t98690;
                double t98692 = t98547*t98691*(1.0/2.0);
                double t98693 = t98692+1.0;
                double t98694 = a1p*c*t98655;
                double t98695 = t98694+1.0;
                double t98696 = 1.0/pow(t98654,4.0/3.0);
                double t98697 = log(t98693);
                double t98698 = 1.0/pow(rho_a[index],4.0/3.0);
                double t98699 = 1.0/pow(rho_a[index],5.0/3.0);
                double t98700 = 1.0/sqrt(t98542);
                double t98701 = 1.0/t98555;
                double t98702 = 1.0/(t98552*t98552);
                double t98703 = b4p*t98545*t98699*(2.0/3.0);
                double t98704 = b2p*c*t98698*(1.0/3.0);
                double t98705 = b1p*c*t98700*t98698*(1.0/6.0);
                double t98706 = b3p*c*t98543*t98698*(1.0/2.0);
                double t98707 = t98703+t98704+t98705+t98706;
                double t98708 = t98701*t98702*t98707*t98558;
                double t98709 = t98652-t98653;
                double t98710 = t98636*t98709*t98639;
                double t98711 = 1.0/t98659;
                double t98712 = 1.0/t98666;
                double t98713 = 1.0/t98663;
                double t98714 = 1.0/(t98659*t98659);
                double t98715 = t98710+t98653;
                double t98716 = rho_a[index]*t98715*2.0;
                double t98717 = t98716-c0p*rho_a[index]*t98695*t98697*4.0;
                double t98718 = 1.0/(t98659*t98659*t98659);
                double t98719 = ccab3*gcab*t98562*t98563*t98682*t98657*t98667*(3.0/2.0);
                double t98720 = ccab2*gamma_aa[index]*t98561*t98671*t98657*t98668;
                double t98721 = ccab3*gamma_aa[index]*gcab*t98562*t98657*t98667*t98678*t98599*4.0;
                double t98722 = gamma_aa[index]*t98657*t98597*4.0;
                double t98723 = ccab2*t98562*t98674*t98657*t98668*t98597*(8.0/3.0);
                double t98724 = 1.0/(t98666*t98666*t98666);
                double t98725 = 1.0/(t98663*t98663*t98663);
                double t98726 = 1.0/t98565;
                double t98727 = 1.0/t98572;
                double t98728 = 1.0/t98569;
                double t98729 = 1.0/(t98565*t98565);
                double t98730 = 1.0/(t98569*t98569);
                double t98731 = 1.0/(t98572*t98572);
                double t98732 = gcaa*t98559*3.0;
                double t98733 = gamma_aa[index]*t98560*t98561*6.0;
                double t98734 = gcaa*t98560*t98562*t98563*3.0;
                double t98735 = t98732+t98733+t98734;
                double t98736 = gcaa*t98559*2.0;
                double t98737 = gamma_aa[index]*t98560*t98561*2.0;
                double t98738 = t98736+t98737;
                double t98739 = gamma_aa[index]*gcaa*t98600*(1.6E1/3.0);
                double t98740 = t98560*t98562*t98597*(1.6E1/3.0);
                double t98741 = t98740+t98739;
                double t98742 = gamma_aa[index]*gcaa*t98600*8.0;
                double t98743 = gamma_aa[index]*gcaa*t98560*t98562*t98599*8.0;
                double t98744 = t98560*t98562*t98597*1.6E1;
                double t98745 = t98742+t98743+t98744;
                double t98746 = 1.0/t98648;
                double t98747 = 1.0/(t98645*t98645);
                double t98748 = b4f*t98545*t98699*(2.0/3.0);
                double t98749 = b2f*c*t98698*(1.0/3.0);
                double t98750 = b1f*c*t98700*t98698*(1.0/6.0);
                double t98751 = b3f*c*t98543*t98698*(1.0/2.0);
                double t98752 = t98750+t98751+t98748+t98749;
                double t98753 = a1f*c*c0f*t98649*t98698*(2.0/3.0);
                double t98754 = a1p*c*c0p*t98556*t98698*(2.0/3.0);
                double t98755 = ccaa1*gcaa*t98726*t98559;
                double t98756 = ccaa2*gamma_aa[index]*t98560*t98561*t98727*2.0;
                double t98757 = ccaa3*gcaa*t98560*t98562*t98563*t98728*3.0;
                double t98758 = t98755+t98756+t98757-ccaa1*gamma_aa[index]*t98560*t98561*t98729-ccaa2*t98560*t98731* \
                   t98561*t98562*t98738-ccaa3*gamma_aa[index]*gcaa*t98730*t98560*t98562*t98563*t98735;
                v_rho_a_gamma_aa_[index] = t98717*(t98720+t98721+t98723+t98719-ccab1*gcab*t98600*t98711*(4.0/3.0) \
                   -ccab2*gamma_aa[index]*t98712*t98657*t98597*4.0+ccab1*gamma_aa[index]*t98714*t98657*t98597*(8.0/3.0) \
                   +ccab2*t98561*t98562*t98657*t98668*(t98722+gcab*t98600*(8.0/3.0))-ccab3*gcab*t98713*t98562*t98657* \
                   t98599*8.0-ccab1*gcab*t98562*t98718*t98657*t98599*(4.0/3.0)-ccab2*t98561*t98562*t98724*t98671*t98674* \
                   t98657*2.0+ccab3*gamma_aa[index]*gcab*t98562*t98563*t98657*t98667*(gcab*t98600*4.0+gamma_aa[index]* \
                   t98657*t98597*1.2E1+gcab*t98562*t98657*t98599*8.0)-ccab3*gamma_aa[index]*gcab*t98562*t98563*t98725* \
                   t98682*t98657*t98678*2.0)-(c0*pow(rho_a[index],1.0/3.0)*(t98633*t98629+cx1*gx*t98594*t98559-cx1*gamma_aa[index]* \
                   t98561*t98581*t98598+cx2*gamma_aa[index]*t98561*t98581*t98595*2.0-cx2*t98602*t98561*t98562*t98581* \
                   t98609+cx3*gx*t98562*t98563*t98581*t98596*3.0-cx3*gamma_aa[index]*gx*t98601*t98606*t98562*t98563*t98581) \
                   *(4.0/3.0)+c0*pow(rho_a[index],4.0/3.0)*(t98629*(cxnl1*gx*t98600*t98594*(-8.0/3.0)-cxnl2*gamma_aa[index]* \
                   t98581*t98595*t98597*(3.2E1/3.0)+cxnl1*gamma_aa[index]*t98581*t98597*t98598*8.0+cxnl2*t98602*t98561* \
                   t98624*t98562*t98581+cxnl2*t98602*t98562*t98581*t98609*t98597*(1.6E1/3.0)+cxnl2*gamma_aa[index]*t98602* \
                   t98612*t98561*t98581*2.0-cxnl1*gx*t98562*t98581*t98617*t98599*(1.6E1/3.0)-cxnl3*gx*t98562*t98581*t98596* \
                   t98599*2.4E1+cxnl3*gx*t98601*t98562*t98616*t98563*t98581*3.0-cxnl2*t98612*t98561*t98562*t98625*t98581* \
                   t98609*2.0+cxnl3*gamma_aa[index]*gx*t98601*t98621*t98562*t98563*t98581+cxnl3*gamma_aa[index]*gx*t98601* \
                   t98606*t98562*t98581*t98599*8.0-cxnl3*gamma_aa[index]*gx*t98606*t98562*t98616*t98563*t98581*t98626* \
                   2.0)+t98633*(C_k*t98573*t98591*t98574*(5.0/3.0)+C_k*t98580*t98573*t98574*t98593*(2.5E1/3.0)-C_k*t98573* \
                   t98574*t98592*t98579*1.0E1-C_k*t98573*t98574*t98577*1.0/(t98578*t98578)*(5.0/3.0)-C_k*t98580*t98573* \
                   t98574*t98577*1.0/(t98578*t98578*t98578*t98578*t98578*t98578)*(2.5E1/3.0)+C_k*t98573*t98574*t98577* \
                   1.0/(t98578*t98578*t98578*t98578)*t98579*1.0E1)-cx1*gx*t98600*t98594*(8.0/3.0)+cx1*gamma_aa[index]* \
                   t98581*t98597*t98598*8.0-cx2*gamma_aa[index]*t98581*t98595*t98597*(3.2E1/3.0)+cx2*t98602*t98561*t98624* \
                   t98562*t98581+cx2*t98602*t98562*t98581*t98609*t98597*(1.6E1/3.0)+cx2*gamma_aa[index]*t98602*t98612* \
                   t98561*t98581*2.0-cx1*gx*t98562*t98581*t98617*t98599*(1.6E1/3.0)-cx3*gx*t98562*t98581*t98596*t98599* \
                   2.4E1+cx3*gx*t98601*t98562*t98616*t98563*t98581*3.0-cx2*t98612*t98561*t98562*t98625*t98581*t98609* \
                   2.0+cx3*gamma_aa[index]*gx*t98601*t98621*t98562*t98563*t98581+cx3*gamma_aa[index]*gx*t98601*t98606* \
                   t98562*t98581*t98599*8.0-cx3*gamma_aa[index]*gx*t98606*t98562*t98616*t98563*t98581*t98626*2.0))*(X- \
                   1.0)-t98758*(t98653+t98636*t98639*(t98652-c0p*t98556*t98558*2.0))-(-t98710-t98653+rho_a[index]*((1.0/ \
                   (t98690*t98690)*t98695*(b4p*t98545*1.0/pow(t98654,5.0/3.0)*(2.0/3.0)+b2p*c*t98696*(1.0/3.0)+b3p*c* \
                   t98683*t98696*(1.0/2.0)+b1p*c*1.0/sqrt(t98656)*t98696*(1.0/6.0)))/t98693-a1p*c*c0p*t98696*t98697*(2.0/ \
                   3.0))*2.0+rho_a[index]*(-t98708+t98754+t98636*t98639*(t98708+t98753-t98651*t98752*t98746*t98747-a1p* \
                   c*c0p*t98556*t98698*(2.0/3.0)))+c0p*t98695*t98697*2.0)*(ccab1*gcab*t98711*t98559*(1.0/2.0)+ccab2*gamma_aa[index]* \
                   t98712*t98561*t98657-ccab1*gamma_aa[index]*t98561*t98714*t98657*(1.0/2.0)-ccab2*t98561*t98562*t98674* \
                   t98657*t98668+ccab3*gcab*t98713*t98562*t98563*t98657*(3.0/2.0)-ccab3*gamma_aa[index]*gcab*t98562*t98563* \
                   t98657*t98667*t98678)*2.0+t98717*(t98720+t98721+t98723+t98719-ccab2*gamma_aa[index]*t98712*t98657* \
                   t98597*(4.0/3.0)+ccab1*gamma_aa[index]*t98714*t98657*t98597*(4.0/3.0)+ccab2*gamma_aa[index]*1.0/pow(rho_a[index],3.5E1/ \
                   3.0)*t98562*(t98657*t98657)*t98668*(4.0/3.0)-ccab3*gcab*t98713*t98562*t98657*t98599*4.0-ccab1*gcab* \
                   t98562*t98718*t98657*t98599*(4.0/3.0)-ccab2*t98561*t98562*t98724*t98671*t98674*t98657*2.0+ccab3*gamma_aa[index]* \
                   gcab*t98562*t98563*t98657*t98667*(t98722+gcab*t98562*t98657*t98599*4.0)-ccab3*gamma_aa[index]*gcab* \
                   t98562*t98563*t98725*t98682*t98657*t98678*2.0)+rho_a[index]*t98758*(-t98708+t98754+t98636*t98639*(t98708+ \
                   t98753-t98754-t98651*t98752*t98746*t98747))-rho_a[index]*t98715*(ccaa1*gcaa*t98600*t98726*(-8.0/3.0) \
                   -ccaa2*gamma_aa[index]*t98560*t98727*t98597*(3.2E1/3.0)+ccaa1*gamma_aa[index]*t98560*t98729*t98597* \
                   8.0+ccaa2*t98560*t98731*t98562*t98738*t98597*(1.6E1/3.0)-ccaa1*gcaa*t98560*t98562*1.0/(t98565*t98565* \
                   t98565)*t98599*(1.6E1/3.0)+ccaa2*t98560*t98731*t98561*t98562*(gcaa*t98600*(1.6E1/3.0)+gamma_aa[index]* \
                   t98560*t98597*(3.2E1/3.0))+ccaa2*gamma_aa[index]*t98560*t98731*t98561*t98741*2.0-ccaa3*gcaa*t98560* \
                   t98562*t98728*t98599*2.4E1+ccaa3*gcaa*t98730*t98560*t98562*t98563*t98745*3.0-ccaa2*t98560*t98561*t98741* \
                   t98562*1.0/(t98572*t98572*t98572)*t98738*2.0+ccaa3*gamma_aa[index]*gcaa*t98730*t98560*t98562*t98563* \
                   (gcaa*t98600*8.0+gamma_aa[index]*t98560*t98597*3.2E1+gcaa*t98560*t98562*t98599*2.4E1)+ccaa3*gamma_aa[index]* \
                   gcaa*t98730*t98560*t98562*t98735*t98599*8.0-ccaa3*gamma_aa[index]*gcaa*t98560*t98562*t98563*t98735* \
                   t98745*1.0/(t98569*t98569*t98569)*2.0);
            } else {
                v_rho_a_gamma_aa_[index] = 0.0;
            }

            //V_gamma_aa_gamma_aa
            if (rho_a[index] > cutoff_) {
                double t98760 = 1.0/pow(rho_a[index],1.0/3.0);
                double t98761 = c*t98760;
                double t98762 = sqrt(t98761);
                double t98763 = pow(t98761,3.0/2.0);
                double t98764 = c*c;
                double t98765 = 1.0/pow(rho_a[index],2.0/3.0);
                double t98766 = 1.0/c0p;
                double t98767 = b1p*t98762;
                double t98768 = b3p*t98763;
                double t98769 = b4p*t98764*t98765;
                double t98770 = b2p*c*t98760;
                double t98771 = t98770+t98767+t98768+t98769;
                double t98772 = 1.0/t98771;
                double t98773 = t98772*t98766*(1.0/2.0);
                double t98774 = t98773+1.0;
                double t98775 = log(t98774);
                double t98776 = a1p*c*t98760;
                double t98777 = t98776+1.0;
                double t98778 = rho_a[index]*2.0;
                double t98779 = 1.0/pow(t98778,1.0/3.0);
                double t98780 = c*t98779;
                double t98781 = gcab*gcab;
                double t98782 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t98783 = 1.0/pow(rho_a[index],8.0/3.0);
                double t98784 = gamma_aa[index]*gcab*t98783;
                double t98785 = t98784+1.0;
                double t98786 = gamma_aa[index]*gamma_aa[index];
                double t98787 = gamma_aa[index]*gcab*t98783*2.0;
                double t98788 = t98781*t98782*t98786;
                double t98789 = t98787+t98788+1.0;
                double t98790 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t98791 = gamma_aa[index]*gcab*t98783*3.0;
                double t98792 = gamma_aa[index]*gcab*t98781*t98790*t98786;
                double t98793 = t98781*t98782*t98786*3.0;
                double t98794 = t98791+t98792+t98793+1.0;
                double t98797 = gcab*t98783;
                double t98798 = gamma_aa[index]*t98781*t98782;
                double t98795 = t98797+t98798;
                double t98796 = 1.0/(t98794*t98794);
                double t98799 = 1.0/(t98789*t98789);
                double t98800 = gcab*t98783*(3.0/2.0);
                double t98801 = gamma_aa[index]*t98781*t98782*3.0;
                double t98802 = gcab*t98781*t98790*t98786*(3.0/2.0);
                double t98803 = t98800+t98801+t98802;
                double t98804 = pow(2.0,1.0/3.0);
                double t98805 = t98804*2.0;
                double t98806 = t98805-2.0;
                double t98807 = two_13*2.0;
                double t98808 = t98807-2.0;
                double t98809 = 1.0/t98808;
                double t98810 = 1.0/c0f;
                double t98811 = b1f*t98762;
                double t98812 = b3f*t98763;
                double t98813 = b4f*t98764*t98765;
                double t98814 = b2f*c*t98760;
                double t98815 = t98811+t98812+t98813+t98814;
                double t98816 = 1.0/t98815;
                double t98817 = t98810*t98816*(1.0/2.0);
                double t98818 = t98817+1.0;
                double t98819 = log(t98818);
                double t98820 = a1f*c*t98760;
                double t98821 = t98820+1.0;
                double t98822 = c0f*t98821*t98819*2.0;
                double t98823 = c0p*t98775*t98777*2.0;
                double t98824 = gcaa*gcaa;
                double t98825 = gamma_aa[index]*gcaa*t98783;
                double t98826 = t98825+1.0;
                double t98827 = 1.0/pow(rho_a[index],3.2E1/3.0);
                double t98828 = gamma_aa[index]*gcaa*t98783*2.0;
                double t98829 = t98824*t98782*t98786;
                double t98830 = t98828+t98829+1.0;
                double t98831 = gamma_aa[index]*gcaa*t98783*3.0;
                double t98832 = gamma_aa[index]*gcaa*t98824*t98790*t98786;
                double t98833 = t98824*t98782*t98786*3.0;
                double t98834 = t98831+t98832+t98833+1.0;
                double t98837 = gcaa*t98783*2.0;
                double t98838 = gamma_aa[index]*t98824*t98782*2.0;
                double t98835 = t98837+t98838;
                double t98836 = 1.0/(t98834*t98834);
                double t98839 = 1.0/(t98830*t98830);
                double t98840 = gcaa*t98783*3.0;
                double t98841 = gamma_aa[index]*t98824*t98782*6.0;
                double t98842 = gcaa*t98824*t98790*t98786*3.0;
                double t98843 = t98840+t98841+t98842;
                double t98844 = pow(rho_a[index],5.0/3.0);
                double t98845 = 1.0/tau_a[index];
                double t98846 = C_k*t98844*t98845;
                double t98847 = t98846-1.0;
                double t98848 = t98847*t98847;
                double t98849 = t98846+1.0;
                double t98850 = t98848*t98848;
                double t98851 = gx*gx;
                double t98852 = gamma_aa[index]*gx*t98783;
                double t98853 = t98852+1.0;
                double t98854 = gamma_aa[index]*gx*t98783*2.0;
                double t98855 = t98851*t98782*t98786;
                double t98856 = t98854+t98855+1.0;
                double t98857 = gamma_aa[index]*gx*t98783*3.0;
                double t98858 = gamma_aa[index]*gx*t98851*t98790*t98786;
                double t98859 = t98851*t98782*t98786*3.0;
                double t98860 = t98857+t98858+t98859+1.0;
                double t98863 = gx*t98783*2.0;
                double t98864 = gamma_aa[index]*t98851*t98782*2.0;
                double t98861 = t98863+t98864;
                double t98862 = 1.0/(t98860*t98860);
                double t98865 = 1.0/(t98856*t98856);
                double t98866 = gx*t98783*3.0;
                double t98867 = gamma_aa[index]*t98851*t98782*6.0;
                double t98868 = gx*t98851*t98790*t98786*3.0;
                double t98869 = t98866+t98867+t98868;
                double t98870 = 1.0/(t98853*t98853);
                double t98871 = 1.0/t98856;
                double t98872 = 1.0/t98860;
                double t98873 = 1.0/(t98853*t98853*t98853);
                double t98874 = t98851*t98851;
                double t98875 = t98851*t98782*6.0;
                double t98876 = gamma_aa[index]*gx*t98851*t98790*6.0;
                double t98877 = t98875+t98876;
                double t98878 = t98861*t98861;
                double t98879 = 1.0/(t98856*t98856*t98856);
                double t98880 = t98869*t98869;
                double t98881 = 1.0/(t98860*t98860*t98860);
                v_gamma_aa_gamma_aa_[index] = (rho_a[index]*(t98823+t98806*t98809*(t98822-c0p*t98775*t98777*2.0)) \
                   *2.0-c0p*rho_a[index]*log((t98766*(1.0/2.0))/(b1p*sqrt(t98780)+b3p*pow(t98780,3.0/2.0)+b4p*t98764* \
                   1.0/pow(t98778,2.0/3.0)+b2p*c*t98779)+1.0)*(a1p*c*t98779+1.0)*4.0)*(ccab1*t98781*t98782*1.0/(t98785* \
                   t98785)*(1.0/2.0)-(ccab2*t98781*t98782*(1.0/2.0))/t98789+ccab2*(t98781*t98781)*t98827*t98786*t98799* \
                   (1.0/2.0)-ccab1*gamma_aa[index]*gcab*t98781*t98790*1.0/(t98785*t98785*t98785)*(1.0/2.0)-(ccab3*gamma_aa[index]* \
                   gcab*t98781*t98790*(3.0/2.0))/t98794-ccab2*t98781*t98782*t98786*(t98795*t98795)*1.0/(t98789*t98789* \
                   t98789)*2.0+ccab2*gamma_aa[index]*t98781*t98782*t98795*t98799*2.0+ccab3*gcab*t98803*t98781*t98790* \
                   t98786*t98796*3.0+ccab3*gamma_aa[index]*gcab*t98781*t98790*t98786*t98796*(t98781*t98782*(3.0/2.0)+ \
                   gamma_aa[index]*gcab*t98781*t98790*(3.0/2.0))-ccab3*gamma_aa[index]*gcab*(t98803*t98803)*t98781*t98790* \
                   1.0/(t98794*t98794*t98794)*t98786*2.0)*-4.0-rho_a[index]*(t98823+t98806*t98809*(t98822-t98823))*((ccaa2* \
                   t98824*t98782*2.0)/t98830-ccaa1*t98824*1.0/(t98826*t98826)*t98782*2.0-ccaa2*(t98824*t98824)*t98827* \
                   t98839*t98786*2.0+(ccaa3*gamma_aa[index]*gcaa*t98824*t98790*6.0)/t98834+ccaa1*gamma_aa[index]*gcaa* \
                   t98824*t98790*1.0/(t98826*t98826*t98826)*2.0+ccaa2*1.0/(t98830*t98830*t98830)*t98824*(t98835*t98835) \
                   *t98782*t98786*2.0-ccaa2*gamma_aa[index]*t98824*t98835*t98782*t98839*4.0-ccaa3*gcaa*t98824*t98843* \
                   t98790*t98836*t98786*6.0-ccaa3*gamma_aa[index]*gcaa*t98824*t98790*t98836*t98786*(t98824*t98782*6.0+ \
                   gamma_aa[index]*gcaa*t98824*t98790*6.0)+ccaa3*gamma_aa[index]*gcaa*t98824*1.0/(t98834*t98834*t98834) \
                   *(t98843*t98843)*t98790*t98786*2.0)*2.0+c0*pow(rho_a[index],4.0/3.0)*(X-1.0)*((t98847/t98849+t98850* \
                   t98847*1.0/(t98849*t98849*t98849*t98849*t98849)-t98847*t98848*1.0/(t98849*t98849*t98849)*2.0)*(cxnl1* \
                   t98851*t98870*t98782*2.0-cxnl2*t98851*t98871*t98782*2.0+cxnl2*t98827*t98865*t98874*t98786*2.0-cxnl2* \
                   t98851*t98782*t98786*t98878*t98879*2.0-cxnl1*gamma_aa[index]*gx*t98851*t98790*t98873*2.0-cxnl3*gamma_aa[index]* \
                   gx*t98851*t98790*t98872*6.0+cxnl2*gamma_aa[index]*t98851*t98861*t98782*t98865*4.0+cxnl3*gx*t98851* \
                   t98790*t98862*t98786*t98869*6.0-cxnl3*gamma_aa[index]*gx*t98851*t98790*t98880*t98881*t98786*2.0+cxnl3* \
                   gamma_aa[index]*gx*t98851*t98790*t98862*t98786*t98877)+cx1*t98851*t98870*t98782*2.0-cx2*t98851*t98871* \
                   t98782*2.0+cx2*t98827*t98865*t98874*t98786*2.0-cx2*t98851*t98782*t98786*t98878*t98879*2.0-cx1*gamma_aa[index]* \
                   gx*t98851*t98790*t98873*2.0-cx3*gamma_aa[index]*gx*t98851*t98790*t98872*6.0+cx2*gamma_aa[index]*t98851* \
                   t98861*t98782*t98865*4.0+cx3*gx*t98851*t98790*t98862*t98786*t98869*6.0-cx3*gamma_aa[index]*gx*t98851* \
                   t98790*t98880*t98881*t98786*2.0+cx3*gamma_aa[index]*gx*t98851*t98790*t98862*t98786*t98877)*2.0;
            } else {
                v_gamma_aa_gamma_aa_[index] = 0.0;
            }

        }
        if (is_meta_) {

            //V_rho_a_tau_a
            if (rho_a[index] > cutoff_) {
                double t98883 = 1.0/pow(rho_a[index],8.0/3.0);
                double t98884 = gamma_aa[index]*gamma_aa[index];
                double t98885 = gx*gx;
                double t98886 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t98887 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t98888 = pow(rho_a[index],5.0/3.0);
                double t98889 = 1.0/tau_a[index];
                double t98890 = C_k*t98888*t98889;
                double t98891 = t98890+1.0;
                double t98892 = pow(rho_a[index],2.0/3.0);
                double t98893 = 1.0/(tau_a[index]*tau_a[index]);
                double t98894 = t98890-1.0;
                double t98895 = t98894*t98894;
                double t98896 = t98895*t98895;
                double t98897 = C_k*C_k;
                double t98898 = pow(rho_a[index],7.0/3.0);
                double t98899 = 1.0/(tau_a[index]*tau_a[index]*tau_a[index]);
                double t98900 = 1.0/(t98891*t98891*t98891);
                double t98901 = 1.0/(t98891*t98891*t98891*t98891);
                double t98902 = 1.0/(t98891*t98891*t98891*t98891*t98891);
                double t98903 = 1.0/(t98891*t98891*t98891*t98891*t98891*t98891);
                double t98904 = 1.0/(t98891*t98891);
                double t98905 = 1.0/t98891;
                double t98906 = gamma_aa[index]*gx*t98883;
                double t98907 = t98906+1.0;
                double t98908 = 1.0/t98907;
                double t98909 = gamma_aa[index]*gx*t98883*3.0;
                double t98910 = gamma_aa[index]*gx*t98884*t98885*t98886;
                double t98911 = t98884*t98885*t98887*3.0;
                double t98912 = t98910+t98911+t98909+1.0;
                double t98913 = 1.0/t98912;
                double t98914 = gamma_aa[index]*gx*t98883*2.0;
                double t98915 = t98884*t98885*t98887;
                double t98916 = t98914+t98915+1.0;
                double t98917 = 1.0/t98916;
                double t98918 = 1.0/pow(rho_a[index],1.9E1/3.0);
                double t98919 = 1.0/pow(rho_a[index],1.1E1/3.0);
                double t98920 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]*rho_a[index]);
                double t98921 = cxnl1*gamma_aa[index]*gx*t98908*t98883;
                double t98922 = cxnl3*gamma_aa[index]*gx*t98913*t98884*t98885*t98886;
                double t98923 = cxnl2*t98917*t98884*t98885*t98887;
                double t98924 = cxnl0+t98921+t98922+t98923;
                double t98925 = C_k*t98905*t98893*t98888;
                double t98926 = C_k*t98901*t98893*t98894*t98895*t98888*6.0;
                double t98927 = C_k*t98902*t98893*t98896*t98888*5.0;
                double t98928 = t98925+t98926+t98927-C_k*t98900*t98893*t98895*t98888*6.0-C_k*t98904*t98893*t98894* \
                   t98888-C_k*t98903*t98893*t98894*t98896*t98888*5.0;
                v_rho_a_tau_a_[index] = -(c0*pow(rho_a[index],4.0/3.0)*(t98924*(t98904*t98897*t98898*t98899*(1.0E1/ \
                   3.0)-C_k*t98905*t98892*t98893*(5.0/3.0)+C_k*t98900*t98892*t98893*t98895*1.0E1-C_k*t98902*t98892*t98893* \
                   t98896*(2.5E1/3.0)+C_k*t98904*t98892*t98893*t98894*(5.0/3.0)+t98900*t98894*t98897*t98898*t98899*(5.0E1/ \
                   3.0)-t98901*t98895*t98897*t98898*t98899*6.0E1+t98903*t98896*t98897*t98898*t98899*(2.5E2/3.0)+t98902* \
                   t98894*t98895*t98897*t98898*t98899*(2.0E1/3.0)-1.0/(t98891*t98891*t98891*t98891*t98891*t98891*t98891) \
                   *t98894*t98896*t98897*t98898*t98899*5.0E1-C_k*t98901*t98892*t98893*t98894*t98895*1.0E1+C_k*t98903* \
                   t98892*t98893*t98894*t98896*(2.5E1/3.0))+t98928*(cxnl1*gamma_aa[index]*gx*t98908*t98919*(8.0/3.0)+ \
                   cxnl2*t98917*t98918*t98884*t98885*(1.6E1/3.0)-cxnl1*1.0/(t98907*t98907)*t98918*t98884*t98885*(8.0/ \
                   3.0)-cxnl2*1.0/(t98916*t98916)*t98884*t98885*t98887*(gamma_aa[index]*gx*t98919*(1.6E1/3.0)+t98918* \
                   t98884*t98885*(1.6E1/3.0))+cxnl3*gamma_aa[index]*gx*t98920*t98913*t98884*t98885*8.0-cxnl3*gamma_aa[index]* \
                   gx*1.0/(t98912*t98912)*t98884*t98885*t98886*(gamma_aa[index]*gx*t98919*8.0+t98918*t98884*t98885*1.6E1+ \
                   gamma_aa[index]*gx*t98920*t98884*t98885*8.0)))-c0*pow(rho_a[index],1.0/3.0)*t98924*t98928*(4.0/3.0) \
                   )*(X-1.0);
            } else {
                v_rho_a_tau_a_[index] = 0.0;
            }

            //V_tau_a_tau_a
            if (rho_a[index] > cutoff_) {
                double t98930 = 1.0/pow(rho_a[index],8.0/3.0);
                double t98931 = gamma_aa[index]*gamma_aa[index];
                double t98932 = gx*gx;
                double t98933 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t98934 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t98935 = pow(rho_a[index],5.0/3.0);
                double t98936 = 1.0/tau_a[index];
                double t98937 = C_k*t98935*t98936;
                double t98938 = t98937+1.0;
                double t98939 = 1.0/(tau_a[index]*tau_a[index]*tau_a[index]);
                double t98940 = t98937-1.0;
                double t98941 = t98940*t98940;
                double t98942 = t98941*t98941;
                double t98943 = C_k*C_k;
                double t98944 = pow(rho_a[index],1.0E1/3.0);
                double t98945 = 1.0/(tau_a[index]*tau_a[index]*tau_a[index]*tau_a[index]);
                double t98946 = 1.0/(t98938*t98938*t98938);
                double t98947 = 1.0/(t98938*t98938*t98938*t98938);
                double t98948 = 1.0/(t98938*t98938*t98938*t98938*t98938);
                double t98949 = 1.0/(t98938*t98938*t98938*t98938*t98938*t98938);
                double t98950 = 1.0/(t98938*t98938);
                v_tau_a_tau_a_[index] = c0*pow(rho_a[index],4.0/3.0)*(X-1.0)*(cxnl0+(cxnl2*t98931*t98932*t98934)/ \
                   (gamma_aa[index]*gx*t98930*2.0+t98931*t98932*t98934+1.0)+(cxnl1*gamma_aa[index]*gx*t98930)/(gamma_aa[index]* \
                   gx*t98930+1.0)+(cxnl3*gamma_aa[index]*gx*t98931*t98932*t98933)/(gamma_aa[index]*gx*t98930*3.0+t98931* \
                   t98932*t98934*3.0+gamma_aa[index]*gx*t98931*t98932*t98933+1.0))*(t98950*t98943*t98944*t98945*2.0-(C_k* \
                   t98935*t98939*2.0)/t98938+C_k*t98940*t98950*t98935*t98939*2.0+C_k*t98941*t98935*t98946*t98939*1.2E1- \
                   C_k*t98942*t98935*t98939*t98948*1.0E1+t98940*t98943*t98944*t98945*t98946*1.0E1-t98941*t98943*t98944* \
                   t98945*t98947*3.6E1+t98942*t98943*t98944*t98945*t98949*5.0E1+t98940*t98941*t98943*t98944*t98945*t98948* \
                   4.0-t98940*t98942*t98943*t98944*t98945*1.0/(t98938*t98938*t98938*t98938*t98938*t98938*t98938)*3.0E1- \
                   C_k*t98940*t98941*t98935*t98947*t98939*1.2E1+C_k*t98940*t98942*t98935*t98939*t98949*1.0E1);
            } else {
                v_tau_a_tau_a_[index] = 0.0;
            }

            if (is_gga_) {

                //V_gamma_aa_tau_a
                if (rho_a[index] > cutoff_) {
                    double t98952 = pow(rho_a[index],5.0/3.0);
                    double t98953 = 1.0/(tau_a[index]*tau_a[index]);
                    double t98954 = 1.0/tau_a[index];
                    double t98955 = C_k*t98952*t98954;
                    double t98956 = t98955-1.0;
                    double t98957 = t98955+1.0;
                    double t98958 = t98956*t98956;
                    double t98959 = t98958*t98958;
                    double t98960 = 1.0/pow(rho_a[index],8.0/3.0);
                    double t98961 = gx*gx;
                    double t98962 = 1.0/pow(rho_a[index],1.6E1/3.0);
                    double t98963 = gamma_aa[index]*gamma_aa[index];
                    double t98964 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                       rho_a[index]*rho_a[index]);
                    double t98965 = gamma_aa[index]*gx*t98960;
                    double t98966 = t98965+1.0;
                    double t98967 = gamma_aa[index]*gx*t98960*3.0;
                    double t98968 = gamma_aa[index]*gx*t98961*t98963*t98964;
                    double t98969 = t98961*t98962*t98963*3.0;
                    double t98970 = t98967+t98968+t98969+1.0;
                    double t98971 = gamma_aa[index]*gx*t98960*2.0;
                    double t98972 = t98961*t98962*t98963;
                    double t98973 = t98971+t98972+1.0;
                    v_gamma_aa_tau_a_[index] = c0*pow(rho_a[index],4.0/3.0)*(X-1.0)*((cxnl1*gx*t98960)/t98966+(cxnl2* \
                       gamma_aa[index]*t98961*t98962*2.0)/t98973-cxnl1*gamma_aa[index]*t98961*t98962*1.0/(t98966*t98966)- \
                       cxnl2*t98961*t98962*t98963*1.0/(t98973*t98973)*(gx*t98960*2.0+gamma_aa[index]*t98961*t98962*2.0)+(cxnl3* \
                       gx*t98961*t98963*t98964*3.0)/t98970-cxnl3*gamma_aa[index]*gx*t98961*1.0/(t98970*t98970)*t98963*t98964* \
                       (gx*t98960*3.0+gamma_aa[index]*t98961*t98962*6.0+gx*t98961*t98963*t98964*3.0))*((C_k*t98952*t98953) \
                       /t98957-C_k*t98952*t98953*t98956*1.0/(t98957*t98957)-C_k*t98952*t98953*1.0/(t98957*t98957*t98957)* \
                       t98958*6.0+C_k*t98952*t98953*1.0/(t98957*t98957*t98957*t98957*t98957)*t98959*5.0+C_k*t98952*t98953* \
                       t98956*1.0/(t98957*t98957*t98957*t98957)*t98958*6.0-C_k*t98952*t98953*t98956*1.0/(t98957*t98957*t98957* \
                       t98957*t98957*t98957)*t98959*5.0);
                } else {
                    v_gamma_aa_tau_a_[index] = 0.0;
                }

            }
        }
    }
}
void TauHCTH0_Functional::computeUKSFunctional(boost::shared_ptr<UKSFunctions> prop)
{
    int ntrue = prop->npoints();

    const double* restrict rho_a;
    const double* restrict rho_b;
    const double* restrict gamma_aa;
    const double* restrict gamma_ab;
    const double* restrict gamma_bb;
    const double* restrict tau_a;
    const double* restrict tau_b;

    rho_a = prop->property_value("RHO_A")->pointer();
    rho_b = prop->property_value("RHO_B")->pointer();
    if (is_gga_) {
        gamma_aa = prop->property_value("GAMMA_AA")->pointer();
        gamma_ab = prop->property_value("GAMMA_AB")->pointer();
        gamma_bb = prop->property_value("GAMMA_BB")->pointer();
    }
    if (is_meta_) {
        tau_a = prop->property_value("TAU_A")->pointer();
        tau_b = prop->property_value("TAU_B")->pointer();
    }

    double X = params_[0].second;
    double C_k = params_[1].second;
    double c0 = params_[2].second;
    double two_13 = params_[3].second;
    double d2fz0 = params_[4].second;
    double c = params_[5].second;
    double Aa = params_[6].second;
    double a1a = params_[7].second;
    double b1a = params_[8].second;
    double b2a = params_[9].second;
    double b3a = params_[10].second;
    double b4a = params_[11].second;
    double c0p = params_[12].second;
    double a1p = params_[13].second;
    double b1p = params_[14].second;
    double b2p = params_[15].second;
    double b3p = params_[16].second;
    double b4p = params_[17].second;
    double c0f = params_[18].second;
    double a1f = params_[19].second;
    double b1f = params_[20].second;
    double b2f = params_[21].second;
    double b3f = params_[22].second;
    double b4f = params_[23].second;
    double gcab = params_[24].second;
    double gcaa = params_[25].second;
    double gx = params_[26].second;
    double ccab0 = params_[27].second;
    double ccab1 = params_[28].second;
    double ccab2 = params_[29].second;
    double ccab3 = params_[30].second;
    double ccaa0 = params_[31].second;
    double ccaa1 = params_[32].second;
    double ccaa2 = params_[33].second;
    double ccaa3 = params_[34].second;
    double cx0 = params_[35].second;
    double cx1 = params_[36].second;
    double cx2 = params_[37].second;
    double cx3 = params_[38].second;
    double cxnl0 = params_[39].second;
    double cxnl1 = params_[40].second;
    double cxnl2 = params_[41].second;
    double cxnl3 = params_[42].second;

    //Functional
    for (int index = 0; index < ntrue; index++) {

        //Functional Value
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t92769 = pow(rho_a[index],5.0/3.0);
            double t92770 = 1.0/tau_a[index];
            double t92771 = C_k*t92770*t92769;
            double t92772 = t92771-1.0;
            double t92773 = t92772*t92772;
            double t92774 = t92771+1.0;
            double t92775 = t92773*t92773;
            double t92776 = 1.0/pow(rho_a[index],8.0/3.0);
            double t92777 = gamma_aa[index]*gamma_aa[index];
            double t92778 = gx*gx;
            double t92779 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]);
            double t92780 = 1.0/pow(rho_a[index],1.6E1/3.0);
            double t92781 = gamma_aa[index]*gx*t92776;
            double t92782 = t92781+1.0;
            double t92783 = 1.0/t92782;
            double t92784 = gamma_aa[index]*gx*t92776*3.0;
            double t92785 = gamma_aa[index]*gx*t92777*t92778*t92779;
            double t92786 = t92780*t92777*t92778*3.0;
            double t92787 = t92784+t92785+t92786+1.0;
            double t92788 = 1.0/t92787;
            double t92789 = gamma_aa[index]*gx*t92776*2.0;
            double t92790 = t92780*t92777*t92778;
            double t92791 = t92790+t92789+1.0;
            double t92792 = 1.0/t92791;
            double t92793 = pow(rho_b[index],5.0/3.0);
            double t92794 = 1.0/tau_b[index];
            double t92795 = C_k*t92793*t92794;
            double t92796 = t92795-1.0;
            double t92797 = t92796*t92796;
            double t92798 = t92795+1.0;
            double t92799 = t92797*t92797;
            double t92800 = 1.0/pow(rho_b[index],8.0/3.0);
            double t92801 = gamma_bb[index]*gamma_bb[index];
            double t92802 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
               rho_b[index]*rho_b[index]);
            double t92803 = 1.0/pow(rho_b[index],1.6E1/3.0);
            double t92804 = gamma_bb[index]*gx*t92800;
            double t92805 = t92804+1.0;
            double t92806 = 1.0/t92805;
            double t92807 = gamma_bb[index]*gx*t92800*3.0;
            double t92808 = gamma_bb[index]*gx*t92801*t92802*t92778;
            double t92809 = t92801*t92803*t92778*3.0;
            double t92810 = t92807+t92808+t92809+1.0;
            double t92811 = 1.0/t92810;
            double t92812 = gamma_bb[index]*gx*t92800*2.0;
            double t92813 = t92801*t92803*t92778;
            double t92814 = t92812+t92813+1.0;
            double t92815 = 1.0/t92814;
            double t92816 = 1.0/pow(rho_a[index],1.0/3.0);
            double t92817 = c*t92816;
            double t92818 = sqrt(t92817);
            double t92819 = pow(t92817,3.0/2.0);
            double t92820 = c*c;
            double t92821 = 1.0/pow(rho_a[index],2.0/3.0);
            double t92822 = 1.0/c0p;
            double t92823 = b1p*t92818;
            double t92824 = b3p*t92819;
            double t92825 = b4p*t92820*t92821;
            double t92826 = b2p*c*t92816;
            double t92827 = t92823+t92824+t92825+t92826;
            double t92828 = 1.0/t92827;
            double t92829 = t92822*t92828*(1.0/2.0);
            double t92830 = t92829+1.0;
            double t92831 = log(t92830);
            double t92832 = a1p*c*t92816;
            double t92833 = t92832+1.0;
            double t92834 = pow(2.0,1.0/3.0);
            double t92835 = t92834*2.0;
            double t92836 = t92835-2.0;
            double t92837 = two_13*2.0;
            double t92838 = t92837-2.0;
            double t92839 = 1.0/t92838;
            double t92840 = 1.0/c0f;
            double t92841 = 1.0/pow(rho_b[index],1.0/3.0);
            double t92842 = c*t92841;
            double t92843 = sqrt(t92842);
            double t92844 = pow(t92842,3.0/2.0);
            double t92845 = 1.0/pow(rho_b[index],2.0/3.0);
            double t92846 = b1p*t92843;
            double t92847 = b3p*t92844;
            double t92848 = b4p*t92820*t92845;
            double t92849 = b2p*c*t92841;
            double t92850 = t92846+t92847+t92848+t92849;
            double t92851 = 1.0/t92850;
            double t92852 = t92822*t92851*(1.0/2.0);
            double t92853 = t92852+1.0;
            double t92854 = log(t92853);
            double t92855 = a1p*c*t92841;
            double t92856 = t92855+1.0;
            double t92857 = c0p*t92854*t92856*2.0;
            double t92858 = rho_a[index]+rho_b[index];
            double t92859 = 1.0/pow(t92858,1.0/3.0);
            double t92860 = c*t92859;
            double t92861 = sqrt(t92860);
            double t92862 = pow(t92860,3.0/2.0);
            double t92863 = 1.0/pow(t92858,2.0/3.0);
            double t92864 = b1p*t92861;
            double t92865 = b3p*t92862;
            double t92866 = b4p*t92820*t92863;
            double t92867 = b2p*c*t92859;
            double t92868 = t92864+t92865+t92866+t92867;
            double t92869 = 1.0/t92868;
            double t92870 = t92822*t92869*(1.0/2.0);
            double t92871 = t92870+1.0;
            double t92872 = log(t92871);
            double t92873 = a1p*c*t92859;
            double t92874 = t92873+1.0;
            double t92875 = c0p*t92872*t92874*2.0;
            double t92876 = rho_a[index]-rho_b[index];
            double t92877 = t92876*t92876;
            double t92878 = 1.0/t92858;
            double t92879 = t92876*t92878;
            double t92880 = 1.0/(t92858*t92858*t92858*t92858);
            double t92881 = t92877*t92877;
            double t92882 = t92879+1.0;
            double t92883 = pow(t92882,4.0/3.0);
            double t92884 = -t92879+1.0;
            double t92885 = pow(t92884,4.0/3.0);
            double t92886 = t92883+t92885-2.0;
            double t92889 = gamma_aa[index]*t92776*(1.0/2.0);
            double t92890 = gamma_bb[index]*t92800*(1.0/2.0);
            double t92887 = t92890+t92889;
            double t92888 = gcab*gcab;
            double t92891 = t92887*t92887;
            double t92892 = c0p*t92831*t92833*2.0;
            double t92893 = b1f*t92818;
            double t92894 = b3f*t92819;
            double t92895 = b4f*t92820*t92821;
            double t92896 = b2f*c*t92816;
            double t92897 = t92893+t92894+t92895+t92896;
            double t92898 = 1.0/t92897;
            double t92899 = t92840*t92898*(1.0/2.0);
            double t92900 = t92899+1.0;
            double t92901 = log(t92900);
            double t92902 = a1f*c*t92816;
            double t92903 = t92902+1.0;
            double t92904 = t92892-c0f*t92901*t92903*2.0;
            double t92905 = t92892-t92904*t92836*t92839;
            double t92906 = gcaa*gcaa;
            double t92907 = b1f*t92843;
            double t92908 = b3f*t92844;
            double t92909 = b4f*t92820*t92845;
            double t92910 = b2f*c*t92841;
            double t92911 = t92910+t92907+t92908+t92909;
            double t92912 = 1.0/t92911;
            double t92913 = t92840*t92912*(1.0/2.0);
            double t92914 = t92913+1.0;
            double t92915 = log(t92914);
            double t92916 = a1f*c*t92841;
            double t92917 = t92916+1.0;
            double t92918 = t92857-c0f*t92915*t92917*2.0;
            double t92919 = t92857-t92836*t92918*t92839;
            functional_[index] = (rho_a[index]*t92905+rho_b[index]*t92919-t92858*(t92875-t92880*t92881*t92839* \
               t92886*(t92875-c0f*log((t92840*(1.0/2.0))/(b1f*t92861+b3f*t92862+b2f*c*t92859+b4f*t92820*t92863)+1.0) \
               *(a1f*c*t92859+1.0)*2.0)+(Aa*t92839*t92886*log((1.0/2.0)/(Aa*(b1a*t92861+b3a*t92862+b2a*c*t92859+b4a* \
               t92820*t92863))+1.0)*(t92880*t92881-1.0)*(a1a*c*t92859+1.0)*2.0)/d2fz0))*(ccab0+(ccab1*gcab*t92887) \
               /(gcab*t92887+1.0)+(ccab2*t92891*t92888)/(gcab*t92887*2.0+t92891*t92888+1.0)+(ccab3*gcab*t92891*t92887* \
               t92888)/(gcab*t92887*3.0+t92891*t92888*3.0+gcab*t92891*t92887*t92888+1.0))-(c0*pow(rho_b[index],4.0/ \
               3.0)*(cx0+(t92796/t92798-t92796*t92797*1.0/(t92798*t92798*t92798)*2.0+t92796*1.0/(t92798*t92798*t92798* \
               t92798*t92798)*t92799)*(cxnl0+cxnl1*gamma_bb[index]*gx*t92800*t92806+cxnl2*t92801*t92803*t92815*t92778+ \
               cxnl3*gamma_bb[index]*gx*t92801*t92802*t92811*t92778)+cx1*gamma_bb[index]*gx*t92800*t92806+cx2*t92801* \
               t92803*t92815*t92778+cx3*gamma_bb[index]*gx*t92801*t92802*t92811*t92778)+c0*pow(rho_a[index],4.0/3.0) \
               *(cx0+(t92772/t92774-t92772*t92773*1.0/(t92774*t92774*t92774)*2.0+t92772*1.0/(t92774*t92774*t92774* \
               t92774*t92774)*t92775)*(cxnl0+cxnl1*gamma_aa[index]*gx*t92783*t92776+cxnl2*t92780*t92792*t92777*t92778+ \
               cxnl3*gamma_aa[index]*gx*t92777*t92778*t92779*t92788)+cx1*gamma_aa[index]*gx*t92783*t92776+cx2*t92780* \
               t92792*t92777*t92778+cx3*gamma_aa[index]*gx*t92777*t92778*t92779*t92788))*(X-1.0)-rho_b[index]*t92919* \
               (ccaa0+(ccaa2*t92801*t92803*t92906)/(gamma_bb[index]*gcaa*t92800*2.0+t92801*t92803*t92906+1.0)+(ccaa1* \
               gamma_bb[index]*gcaa*t92800)/(gamma_bb[index]*gcaa*t92800+1.0)+(ccaa3*gamma_bb[index]*gcaa*t92801* \
               t92802*t92906)/(gamma_bb[index]*gcaa*t92800*3.0+t92801*t92803*t92906*3.0+gamma_bb[index]*gcaa*t92801* \
               t92802*t92906+1.0))-rho_a[index]*t92905*(ccaa0+(ccaa2*t92780*t92906*t92777)/(gamma_aa[index]*gcaa* \
               t92776*2.0+t92780*t92906*t92777+1.0)+(ccaa1*gamma_aa[index]*gcaa*t92776)/(gamma_aa[index]*gcaa*t92776+ \
               1.0)+(ccaa3*gamma_aa[index]*gcaa*t92906*t92777*t92779)/(gamma_aa[index]*gcaa*t92776*3.0+t92780*t92906* \
               t92777*3.0+gamma_aa[index]*gcaa*t92906*t92777*t92779+1.0));
        } else if (rho_a[index] > cutoff_) {
            double t97101 = 1.0/pow(rho_a[index],1.0/3.0);
            double t97102 = c*t97101;
            double t97103 = sqrt(t97102);
            double t97104 = pow(t97102,3.0/2.0);
            double t97105 = c*c;
            double t97106 = 1.0/pow(rho_a[index],2.0/3.0);
            double t97107 = 1.0/c0p;
            double t97108 = b1p*t97103;
            double t97109 = b3p*t97104;
            double t97110 = b4p*t97105*t97106;
            double t97111 = b2p*c*t97101;
            double t97112 = t97110+t97111+t97108+t97109;
            double t97113 = 1.0/t97112;
            double t97114 = t97113*t97107*(1.0/2.0);
            double t97115 = t97114+1.0;
            double t97116 = log(t97115);
            double t97117 = a1p*c*t97101;
            double t97118 = t97117+1.0;
            double t97119 = 1.0/pow(rho_a[index],8.0/3.0);
            double t97120 = gamma_aa[index]*gamma_aa[index];
            double t97121 = gcaa*gcaa;
            double t97122 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]);
            double t97123 = 1.0/pow(rho_a[index],1.6E1/3.0);
            double t97124 = pow(rho_a[index],5.0/3.0);
            double t97125 = 1.0/tau_a[index];
            double t97126 = C_k*t97124*t97125;
            double t97127 = t97126-1.0;
            double t97128 = t97127*t97127;
            double t97129 = t97126+1.0;
            double t97130 = t97128*t97128;
            double t97131 = gx*gx;
            double t97132 = gamma_aa[index]*gx*t97119;
            double t97133 = t97132+1.0;
            double t97134 = 1.0/t97133;
            double t97135 = gamma_aa[index]*gx*t97119*3.0;
            double t97136 = gamma_aa[index]*gx*t97120*t97122*t97131;
            double t97137 = t97120*t97131*t97123*3.0;
            double t97138 = t97135+t97136+t97137+1.0;
            double t97139 = 1.0/t97138;
            double t97140 = gamma_aa[index]*gx*t97119*2.0;
            double t97141 = t97120*t97131*t97123;
            double t97142 = t97140+t97141+1.0;
            double t97143 = 1.0/t97142;
            functional_[index] = -rho_a[index]*(((pow(2.0,1.0/3.0)*2.0-2.0)*(c0f*log((1.0/2.0)/(c0f*(b1f*t97103+ \
               b3f*t97104+b2f*c*t97101+b4f*t97105*t97106))+1.0)*(a1f*c*t97101+1.0)*2.0-c0p*t97116*t97118*2.0))/(two_13* \
               2.0-2.0)+c0p*t97116*t97118*2.0)*(ccaa0+(ccaa2*t97120*t97121*t97123)/(gamma_aa[index]*gcaa*t97119*2.0+ \
               t97120*t97121*t97123+1.0)+(ccaa1*gamma_aa[index]*gcaa*t97119)/(gamma_aa[index]*gcaa*t97119+1.0)+(ccaa3* \
               gamma_aa[index]*gcaa*t97120*t97121*t97122)/(gamma_aa[index]*gcaa*t97119*3.0+t97120*t97121*t97123*3.0+ \
               gamma_aa[index]*gcaa*t97120*t97121*t97122+1.0))-c0*pow(rho_a[index],4.0/3.0)*(X-1.0)*(cx0+(t97127/ \
               t97129+t97130*t97127*1.0/(t97129*t97129*t97129*t97129*t97129)-t97127*t97128*1.0/(t97129*t97129*t97129) \
               *2.0)*(cxnl0+cxnl1*gamma_aa[index]*gx*t97134*t97119+cxnl2*t97120*t97131*t97123*t97143+cxnl3*gamma_aa[index]* \
               gx*t97120*t97122*t97131*t97139)+cx1*gamma_aa[index]*gx*t97134*t97119+cx2*t97120*t97131*t97123*t97143+ \
               cx3*gamma_aa[index]*gx*t97120*t97122*t97131*t97139);
        } else if (rho_b[index] > cutoff_) {
            double t96330 = 1.0/pow(rho_b[index],1.0/3.0);
            double t96331 = c*t96330;
            double t96332 = sqrt(t96331);
            double t96333 = pow(t96331,3.0/2.0);
            double t96334 = c*c;
            double t96335 = 1.0/pow(rho_b[index],2.0/3.0);
            double t96336 = 1.0/c0p;
            double t96337 = b1p*t96332;
            double t96338 = b3p*t96333;
            double t96339 = b4p*t96334*t96335;
            double t96340 = b2p*c*t96330;
            double t96341 = t96340+t96337+t96338+t96339;
            double t96342 = 1.0/t96341;
            double t96343 = t96342*t96336*(1.0/2.0);
            double t96344 = t96343+1.0;
            double t96345 = log(t96344);
            double t96346 = a1p*c*t96330;
            double t96347 = t96346+1.0;
            double t96348 = 1.0/pow(rho_b[index],8.0/3.0);
            double t96349 = gamma_bb[index]*gamma_bb[index];
            double t96350 = gcaa*gcaa;
            double t96351 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
               rho_b[index]*rho_b[index]);
            double t96352 = 1.0/pow(rho_b[index],1.6E1/3.0);
            double t96353 = pow(rho_b[index],5.0/3.0);
            double t96354 = 1.0/tau_b[index];
            double t96355 = C_k*t96353*t96354;
            double t96356 = t96355-1.0;
            double t96357 = t96356*t96356;
            double t96358 = t96355+1.0;
            double t96359 = t96357*t96357;
            double t96360 = gx*gx;
            double t96361 = gamma_bb[index]*gx*t96348;
            double t96362 = t96361+1.0;
            double t96363 = 1.0/t96362;
            double t96364 = gamma_bb[index]*gx*t96348*3.0;
            double t96365 = gamma_bb[index]*gx*t96351*t96360*t96349;
            double t96366 = t96360*t96352*t96349*3.0;
            double t96367 = t96364+t96365+t96366+1.0;
            double t96368 = 1.0/t96367;
            double t96369 = gamma_bb[index]*gx*t96348*2.0;
            double t96370 = t96360*t96352*t96349;
            double t96371 = t96370+t96369+1.0;
            double t96372 = 1.0/t96371;
            functional_[index] = -rho_b[index]*(((pow(2.0,1.0/3.0)*2.0-2.0)*(c0f*log((1.0/2.0)/(c0f*(b1f*t96332+ \
               b3f*t96333+b2f*c*t96330+b4f*t96334*t96335))+1.0)*(a1f*c*t96330+1.0)*2.0-c0p*t96345*t96347*2.0))/(two_13* \
               2.0-2.0)+c0p*t96345*t96347*2.0)*(ccaa0+(ccaa2*t96350*t96352*t96349)/(gamma_bb[index]*gcaa*t96348*2.0+ \
               t96350*t96352*t96349+1.0)+(ccaa1*gamma_bb[index]*gcaa*t96348)/(gamma_bb[index]*gcaa*t96348+1.0)+(ccaa3* \
               gamma_bb[index]*gcaa*t96350*t96351*t96349)/(gamma_bb[index]*gcaa*t96348*3.0+t96350*t96352*t96349*3.0+ \
               gamma_bb[index]*gcaa*t96350*t96351*t96349+1.0))-c0*pow(rho_b[index],4.0/3.0)*(X-1.0)*(cx0+(t96356/ \
               t96358-t96356*t96357*1.0/(t96358*t96358*t96358)*2.0+t96356*1.0/(t96358*t96358*t96358*t96358*t96358) \
               *t96359)*(cxnl0+cxnl1*gamma_bb[index]*gx*t96363*t96348+cxnl2*t96360*t96352*t96372*t96349+cxnl3*gamma_bb[index]* \
               gx*t96351*t96360*t96349*t96368)+cx1*gamma_bb[index]*gx*t96363*t96348+cx2*t96360*t96352*t96372*t96349+ \
               cx3*gamma_bb[index]*gx*t96351*t96360*t96349*t96368);
        } else {
            functional_[index] = 0.0;
        }

    }
    //First Partials
    for (int index = 0; index < ntrue && deriv_ >= 1; index++) {

        //V_rho_a
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t92921 = 1.0/pow(rho_a[index],1.0/3.0);
            double t92922 = c*t92921;
            double t92923 = sqrt(t92922);
            double t92924 = pow(t92922,3.0/2.0);
            double t92925 = c*c;
            double t92926 = 1.0/pow(rho_a[index],2.0/3.0);
            double t92927 = 1.0/c0p;
            double t92928 = b1p*t92923;
            double t92929 = b3p*t92924;
            double t92930 = b4p*t92925*t92926;
            double t92931 = b2p*c*t92921;
            double t92932 = t92930+t92931+t92928+t92929;
            double t92933 = 1.0/t92932;
            double t92934 = t92933*t92927*(1.0/2.0);
            double t92935 = t92934+1.0;
            double t92936 = log(t92935);
            double t92937 = a1p*c*t92921;
            double t92938 = t92937+1.0;
            double t92939 = pow(2.0,1.0/3.0);
            double t92940 = t92939*2.0;
            double t92941 = t92940-2.0;
            double t92942 = two_13*2.0;
            double t92943 = t92942-2.0;
            double t92944 = 1.0/t92943;
            double t92945 = 1.0/c0f;
            double t92946 = 1.0/pow(rho_b[index],1.0/3.0);
            double t92947 = c*t92946;
            double t92948 = sqrt(t92947);
            double t92949 = pow(t92947,3.0/2.0);
            double t92950 = 1.0/pow(rho_b[index],2.0/3.0);
            double t92951 = b1p*t92948;
            double t92952 = b3p*t92949;
            double t92953 = b4p*t92950*t92925;
            double t92954 = b2p*c*t92946;
            double t92955 = t92951+t92952+t92953+t92954;
            double t92956 = 1.0/t92955;
            double t92957 = t92927*t92956*(1.0/2.0);
            double t92958 = t92957+1.0;
            double t92959 = log(t92958);
            double t92960 = a1p*c*t92946;
            double t92961 = t92960+1.0;
            double t92962 = c0p*t92961*t92959*2.0;
            double t92963 = rho_a[index]+rho_b[index];
            double t92964 = 1.0/pow(t92963,1.0/3.0);
            double t92965 = c*t92964;
            double t92966 = sqrt(t92965);
            double t92967 = pow(t92965,3.0/2.0);
            double t92968 = 1.0/pow(t92963,2.0/3.0);
            double t92969 = b1p*t92966;
            double t92970 = b3p*t92967;
            double t92971 = b4p*t92925*t92968;
            double t92972 = b2p*c*t92964;
            double t92973 = t92970+t92971+t92972+t92969;
            double t92974 = 1.0/t92973;
            double t92975 = t92927*t92974*(1.0/2.0);
            double t92976 = t92975+1.0;
            double t92977 = log(t92976);
            double t92978 = a1p*c*t92964;
            double t92979 = t92978+1.0;
            double t92980 = c0p*t92977*t92979*2.0;
            double t92981 = rho_a[index]-rho_b[index];
            double t92982 = t92981*t92981;
            double t92983 = 1.0/t92963;
            double t92984 = t92981*t92983;
            double t92985 = 1.0/(t92963*t92963*t92963*t92963);
            double t92986 = t92982*t92982;
            double t92987 = t92984+1.0;
            double t92988 = pow(t92987,4.0/3.0);
            double t92989 = -t92984+1.0;
            double t92990 = pow(t92989,4.0/3.0);
            double t92991 = t92990+t92988-2.0;
            double t92992 = gcab*gcab;
            double t92996 = 1.0/pow(rho_a[index],8.0/3.0);
            double t92997 = gamma_aa[index]*t92996*(1.0/2.0);
            double t92998 = 1.0/pow(rho_b[index],8.0/3.0);
            double t92999 = gamma_bb[index]*t92998*(1.0/2.0);
            double t92993 = t92997+t92999;
            double t92994 = t92993*t92993;
            double t92995 = 1.0/pow(rho_a[index],1.1E1/3.0);
            double t93000 = gcab*t92993;
            double t93001 = t93000+1.0;
            double t93002 = t92992*t92994;
            double t93003 = gcab*t92993*2.0;
            double t93004 = t93002+t93003+1.0;
            double t93005 = t92992*t92994*3.0;
            double t93006 = gcab*t92992*t92993*t92994;
            double t93007 = gcab*t92993*3.0;
            double t93008 = t93005+t93006+t93007+1.0;
            double t93009 = c0p*t92936*t92938*2.0;
            double t93010 = 1.0/t93004;
            double t93011 = 1.0/t93008;
            double t93012 = 1.0/t93001;
            double t93013 = 1.0/pow(t92963,4.0/3.0);
            double t93014 = b1f*t92966;
            double t93015 = b3f*t92967;
            double t93016 = b4f*t92925*t92968;
            double t93017 = b2f*c*t92964;
            double t93018 = t93014+t93015+t93016+t93017;
            double t93019 = 1.0/t93018;
            double t93020 = t92945*t93019*(1.0/2.0);
            double t93021 = t93020+1.0;
            double t93022 = log(t93021);
            double t93023 = a1f*c*t92964;
            double t93024 = t93023+1.0;
            double t93026 = c0f*t93022*t93024*2.0;
            double t93025 = t92980-t93026;
            double t93027 = 1.0/(t92963*t92963);
            double t93054 = t92981*t93027;
            double t93028 = t92983-t93054;
            double t93029 = 1.0/pow(t92963,5.0/3.0);
            double t93030 = 1.0/sqrt(t92965);
            double t93031 = 1.0/t92976;
            double t93032 = 1.0/(t92973*t92973);
            double t93033 = b4p*t92925*t93029*(2.0/3.0);
            double t93034 = b2p*c*t93013*(1.0/3.0);
            double t93035 = b1p*c*t93030*t93013*(1.0/6.0);
            double t93036 = b3p*c*t92966*t93013*(1.0/2.0);
            double t93037 = t93033+t93034+t93035+t93036;
            double t93038 = t92979*t93031*t93032*t93037;
            double t93039 = 1.0/d2fz0;
            double t93040 = 1.0/Aa;
            double t93041 = b1a*t92966;
            double t93042 = b3a*t92967;
            double t93043 = b4a*t92925*t92968;
            double t93044 = b2a*c*t92964;
            double t93045 = t93041+t93042+t93043+t93044;
            double t93046 = 1.0/t93045;
            double t93047 = t93040*t93046*(1.0/2.0);
            double t93048 = t93047+1.0;
            double t93049 = log(t93048);
            double t93050 = a1a*c*t92964;
            double t93051 = t93050+1.0;
            double t93052 = 1.0/(t92963*t92963*t92963*t92963*t92963);
            double t93053 = pow(t92987,1.0/3.0);
            double t93055 = t93053*t93028*(4.0/3.0);
            double t93056 = pow(t92989,1.0/3.0);
            double t93057 = t93055-t93028*t93056*(4.0/3.0);
            double t93058 = t92985*t92986;
            double t93059 = t93058-1.0;
            double t93060 = a1f*c*t92921;
            double t93061 = t93060+1.0;
            double t93062 = b1f*t92923;
            double t93063 = b3f*t92924;
            double t93064 = b4f*t92925*t92926;
            double t93065 = b2f*c*t92921;
            double t93066 = t93062+t93063+t93064+t93065;
            double t93067 = 1.0/t93066;
            double t93068 = t92945*t93067*(1.0/2.0);
            double t93069 = t93068+1.0;
            double t93070 = 1.0/pow(rho_a[index],4.0/3.0);
            double t93071 = 1.0/pow(rho_a[index],5.0/3.0);
            double t93072 = 1.0/sqrt(t92922);
            double t93073 = log(t93069);
            double t93074 = 1.0/t92935;
            double t93075 = 1.0/(t92932*t92932);
            double t93076 = b4p*t92925*t93071*(2.0/3.0);
            double t93077 = b2p*c*t93070*(1.0/3.0);
            double t93078 = b1p*c*t93070*t93072*(1.0/6.0);
            double t93079 = b3p*c*t92923*t93070*(1.0/2.0);
            double t93080 = t93076+t93077+t93078+t93079;
            double t93081 = t92938*t93080*t93074*t93075;
            double t93082 = Aa*t92944*t92991*t93051*t93039*t93049*t93059*2.0;
            double t93084 = c0f*t93061*t93073*2.0;
            double t93083 = t93009-t93084;
            double t93085 = t92941*t92944*t93083;
            double t93086 = gamma_aa[index]*gamma_aa[index];
            double t93087 = gcaa*gcaa;
            double t93088 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]);
            double t93089 = 1.0/pow(rho_a[index],1.6E1/3.0);
            double t93090 = pow(rho_a[index],5.0/3.0);
            double t93091 = 1.0/tau_a[index];
            double t93092 = C_k*t93090*t93091;
            double t93093 = t93092-1.0;
            double t93094 = t93093*t93093;
            double t93095 = t93092+1.0;
            double t93096 = t93094*t93094;
            double t93097 = gx*gx;
            double t93098 = gamma_aa[index]*gx*t92996;
            double t93099 = t93098+1.0;
            double t93100 = 1.0/t93099;
            double t93101 = gamma_aa[index]*gx*t92996*3.0;
            double t93102 = gamma_aa[index]*gx*t93086*t93088*t93097;
            double t93103 = t93086*t93097*t93089*3.0;
            double t93104 = t93101+t93102+t93103+1.0;
            double t93105 = 1.0/t93104;
            double t93106 = gamma_aa[index]*gx*t92996*2.0;
            double t93107 = t93086*t93097*t93089;
            double t93108 = t93106+t93107+1.0;
            double t93109 = 1.0/t93108;
            double t93110 = 1.0/t93095;
            double t93111 = t93110*t93093;
            double t93112 = 1.0/(t93095*t93095*t93095);
            double t93113 = 1.0/(t93095*t93095*t93095*t93095*t93095);
            double t93114 = t93113*t93093*t93096;
            double t93115 = t93111+t93114-t93112*t93093*t93094*2.0;
            double t93116 = 1.0/pow(rho_a[index],1.9E1/3.0);
            double t93117 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]*rho_a[index]);
            double t93118 = cxnl1*gamma_aa[index]*gx*t92996*t93100;
            double t93119 = cxnl3*gamma_aa[index]*gx*t93105*t93086*t93088*t93097;
            double t93120 = cxnl2*t93109*t93086*t93097*t93089;
            double t93121 = cxnl0+t93120+t93118+t93119;
            double t93122 = pow(rho_a[index],2.0/3.0);
            double t93123 = 1.0/(t93099*t93099);
            double t93124 = gamma_aa[index]*gx*t92995*8.0;
            double t93125 = gamma_aa[index]*gx*t93117*t93086*t93097*8.0;
            double t93126 = t93116*t93086*t93097*1.6E1;
            double t93127 = t93124+t93125+t93126;
            double t93128 = 1.0/(t93104*t93104);
            double t93129 = gamma_aa[index]*gx*t92995*(1.6E1/3.0);
            double t93130 = t93116*t93086*t93097*(1.6E1/3.0);
            double t93131 = t93130+t93129;
            double t93132 = 1.0/(t93108*t93108);
            double t93133 = t93009-t93085;
            double t93134 = gamma_aa[index]*gcaa*t92996;
            double t93135 = t93134+1.0;
            double t93136 = 1.0/t93135;
            double t93137 = gamma_aa[index]*gcaa*t92996*3.0;
            double t93138 = gamma_aa[index]*gcaa*t93086*t93087*t93088;
            double t93139 = t93086*t93087*t93089*3.0;
            double t93140 = t93137+t93138+t93139+1.0;
            double t93141 = 1.0/t93140;
            double t93142 = gamma_aa[index]*gcaa*t92996*2.0;
            double t93143 = t93086*t93087*t93089;
            double t93144 = t93142+t93143+1.0;
            double t93145 = 1.0/t93144;
            double t93146 = 1.0/t93069;
            double t93147 = 1.0/(t93066*t93066);
            double t93148 = b4f*t92925*t93071*(2.0/3.0);
            double t93149 = b2f*c*t93070*(1.0/3.0);
            double t93150 = b1f*c*t93070*t93072*(1.0/6.0);
            double t93151 = b3f*c*t92923*t93070*(1.0/2.0);
            double t93152 = t93150+t93151+t93148+t93149;
            double t93153 = a1f*c*c0f*t93070*t93073*(2.0/3.0);
            double t93154 = a1p*c*c0p*t92936*t93070*(2.0/3.0);
            double t93155 = ccaa1*gamma_aa[index]*gcaa*t92996*t93136;
            double t93156 = ccaa3*gamma_aa[index]*gcaa*t93141*t93086*t93087*t93088;
            double t93157 = ccaa2*t93145*t93086*t93087*t93089;
            double t93158 = ccaa0+t93155+t93156+t93157;
            v_rho_a_[index] = -t93133*t93158-(rho_a[index]*(t93009-t92941*t92944*t93083)+rho_b[index]*(t92962- \
               t92941*t92944*(t92962-c0f*log((t92945*(1.0/2.0))/(b1f*t92948+b3f*t92949+b2f*c*t92946+b4f*t92950*t92925) \
               +1.0)*(a1f*c*t92946+1.0)*2.0))-t92963*(t92980+t93082-t92944*t92991*t92985*t92986*t93025))*(ccab1*gamma_aa[index]* \
               gcab*t92995*t93012*(4.0/3.0)-ccab2*t92992*t92994*1.0/(t93004*t93004)*(gamma_aa[index]*gcab*t92995* \
               (8.0/3.0)+gamma_aa[index]*t92992*t92993*t92995*(8.0/3.0))-ccab1*gamma_aa[index]*t92992*t92993*t92995* \
               1.0/(t93001*t93001)*(4.0/3.0)+ccab2*gamma_aa[index]*t92992*t92993*t92995*t93010*(8.0/3.0)-ccab3*gcab* \
               t92992*t92993*t92994*1.0/(t93008*t93008)*(gamma_aa[index]*gcab*t92995*4.0+gamma_aa[index]*t92992*t92993* \
               t92995*8.0+gamma_aa[index]*gcab*t92992*t92994*t92995*4.0)+ccab3*gamma_aa[index]*gcab*t92992*t92994* \
               t92995*t93011*4.0)-(ccab0+ccab1*gcab*t92993*t93012+ccab2*t92992*t92994*t93010+ccab3*gcab*t92992*t92993* \
               t92994*t93011)*(t92980-t93009+t93082+t93085+rho_a[index]*(-t93081+t93154+t92941*t92944*(t93081+t93153- \
               t93061*t93152*t93146*t93147-a1p*c*c0p*t92936*t93070*(2.0/3.0)))-t92963*(-t93038+t92944*t92991*t92985* \
               t92986*(t93038-(t93024*1.0/(t93018*t93018)*(b2f*c*t93013*(1.0/3.0)+b4f*t92925*t93029*(2.0/3.0)+b1f* \
               c*t93030*t93013*(1.0/6.0)+b3f*c*t92966*t93013*(1.0/2.0)))/t93021+a1f*c*c0f*t93013*t93022*(2.0/3.0) \
               -a1p*c*c0p*t92977*t93013*(2.0/3.0))+a1p*c*c0p*t92977*t93013*(2.0/3.0)-t92944*t92991*t92986*t93025* \
               t93052*4.0+t92944*t92985*t92986*t93025*t93057+t92944*t92981*t92982*t92991*t92985*t93025*4.0+Aa*t92944* \
               t92991*t93051*t93039*t93049*(t92986*t93052*4.0-t92981*t92982*t92985*4.0)*2.0-Aa*t92944*t93051*t93039* \
               t93057*t93049*t93059*2.0-(t92944*t92991*t93051*1.0/(t93045*t93045)*t93039*t93059*(b2a*c*t93013*(1.0/ \
               3.0)+b4a*t92925*t93029*(2.0/3.0)+b1a*c*t93030*t93013*(1.0/6.0)+b3a*c*t92966*t93013*(1.0/2.0)))/t93048+ \
               Aa*a1a*c*t92944*t92991*t93013*t93039*t93049*t93059*(2.0/3.0))-t92944*t92991*t92985*t92986*t93025)- \
               (X-1.0)*(c0*pow(rho_a[index],1.0/3.0)*(cx0+t93121*t93115+cx1*gamma_aa[index]*gx*t92996*t93100+cx2* \
               t93109*t93086*t93097*t93089+cx3*gamma_aa[index]*gx*t93105*t93086*t93088*t93097)*(4.0/3.0)-c0*pow(rho_a[index],4.0/ \
               3.0)*(t93115*(cxnl1*gamma_aa[index]*gx*t92995*t93100*(8.0/3.0)-cxnl1*t93123*t93116*t93086*t93097*(8.0/ \
               3.0)+cxnl2*t93116*t93109*t93086*t93097*(1.6E1/3.0)-cxnl2*t93131*t93132*t93086*t93097*t93089+cxnl3* \
               gamma_aa[index]*gx*t93105*t93117*t93086*t93097*8.0-cxnl3*gamma_aa[index]*gx*t93127*t93128*t93086*t93088* \
               t93097)-t93121*(C_k*t93110*t93122*t93091*(5.0/3.0)-C_k*t93112*t93122*t93091*t93094*1.0E1+C_k*t93113* \
               t93122*t93091*t93096*(2.5E1/3.0)-C_k*t93122*t93091*t93093*1.0/(t93095*t93095)*(5.0/3.0)+C_k*t93122* \
               t93091*t93093*t93094*1.0/(t93095*t93095*t93095*t93095)*1.0E1-C_k*t93122*t93091*t93093*1.0/(t93095* \
               t93095*t93095*t93095*t93095*t93095)*t93096*(2.5E1/3.0))+cx1*gamma_aa[index]*gx*t92995*t93100*(8.0/ \
               3.0)-cx1*t93123*t93116*t93086*t93097*(8.0/3.0)+cx2*t93116*t93109*t93086*t93097*(1.6E1/3.0)-cx2*t93131* \
               t93132*t93086*t93097*t93089+cx3*gamma_aa[index]*gx*t93105*t93117*t93086*t93097*8.0-cx3*gamma_aa[index]* \
               gx*t93127*t93128*t93086*t93088*t93097))+rho_a[index]*t93158*(-t93081+t93154+t92941*t92944*(t93081+ \
               t93153-t93154-t93061*t93152*t93146*t93147))+rho_a[index]*t93133*(ccaa1*gamma_aa[index]*gcaa*t92995* \
               t93136*(8.0/3.0)+ccaa2*t93116*t93145*t93086*t93087*(1.6E1/3.0)-ccaa1*t93116*1.0/(t93135*t93135)*t93086* \
               t93087*(8.0/3.0)-ccaa2*1.0/(t93144*t93144)*t93086*t93087*t93089*(gamma_aa[index]*gcaa*t92995*(1.6E1/ \
               3.0)+t93116*t93086*t93087*(1.6E1/3.0))+ccaa3*gamma_aa[index]*gcaa*t93141*t93117*t93086*t93087*8.0- \
               ccaa3*gamma_aa[index]*gcaa*1.0/(t93140*t93140)*t93086*t93087*t93088*(gamma_aa[index]*gcaa*t92995*8.0+ \
               t93116*t93086*t93087*1.6E1+gamma_aa[index]*gcaa*t93117*t93086*t93087*8.0));
        } else if (rho_a[index] > cutoff_) {
            double t97145 = 1.0/pow(rho_a[index],1.0/3.0);
            double t97146 = c*t97145;
            double t97147 = sqrt(t97146);
            double t97148 = pow(t97146,3.0/2.0);
            double t97149 = c*c;
            double t97150 = 1.0/pow(rho_a[index],2.0/3.0);
            double t97151 = 1.0/c0p;
            double t97152 = b1p*t97147;
            double t97153 = b3p*t97148;
            double t97154 = b4p*t97150*t97149;
            double t97155 = b2p*c*t97145;
            double t97156 = t97152+t97153+t97154+t97155;
            double t97157 = 1.0/t97156;
            double t97158 = t97151*t97157*(1.0/2.0);
            double t97159 = t97158+1.0;
            double t97160 = log(t97159);
            double t97161 = a1p*c*t97145;
            double t97162 = t97161+1.0;
            double t97163 = 1.0/pow(rho_a[index],8.0/3.0);
            double t97164 = gamma_aa[index]*gamma_aa[index];
            double t97165 = gcaa*gcaa;
            double t97166 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]);
            double t97167 = 1.0/pow(rho_a[index],1.6E1/3.0);
            double t97168 = pow(2.0,1.0/3.0);
            double t97169 = t97168*2.0;
            double t97170 = t97169-2.0;
            double t97171 = two_13*2.0;
            double t97172 = t97171-2.0;
            double t97173 = 1.0/t97172;
            double t97174 = 1.0/c0f;
            double t97175 = b1f*t97147;
            double t97176 = b3f*t97148;
            double t97177 = b4f*t97150*t97149;
            double t97178 = b2f*c*t97145;
            double t97179 = t97175+t97176+t97177+t97178;
            double t97180 = 1.0/t97179;
            double t97181 = t97180*t97174*(1.0/2.0);
            double t97182 = t97181+1.0;
            double t97183 = log(t97182);
            double t97184 = a1f*c*t97145;
            double t97185 = t97184+1.0;
            double t97186 = c0f*t97183*t97185*2.0;
            double t97187 = c0p*t97160*t97162*2.0;
            double t97188 = gamma_aa[index]*gcaa*t97163;
            double t97189 = t97188+1.0;
            double t97190 = 1.0/t97189;
            double t97191 = gamma_aa[index]*gcaa*t97163*3.0;
            double t97192 = gamma_aa[index]*gcaa*t97164*t97165*t97166;
            double t97193 = t97164*t97165*t97167*3.0;
            double t97194 = t97191+t97192+t97193+1.0;
            double t97195 = 1.0/t97194;
            double t97196 = gamma_aa[index]*gcaa*t97163*2.0;
            double t97197 = t97164*t97165*t97167;
            double t97198 = t97196+t97197+1.0;
            double t97199 = 1.0/t97198;
            double t97200 = 1.0/pow(rho_a[index],1.9E1/3.0);
            double t97201 = 1.0/pow(rho_a[index],1.1E1/3.0);
            double t97202 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]*rho_a[index]);
            double t97203 = 1.0/pow(rho_a[index],4.0/3.0);
            double t97204 = 1.0/pow(rho_a[index],5.0/3.0);
            double t97205 = 1.0/sqrt(t97146);
            double t97206 = 1.0/t97159;
            double t97207 = 1.0/(t97156*t97156);
            double t97208 = b4p*t97204*t97149*(2.0/3.0);
            double t97209 = b2p*c*t97203*(1.0/3.0);
            double t97210 = b1p*c*t97203*t97205*(1.0/6.0);
            double t97211 = b3p*c*t97203*t97147*(1.0/2.0);
            double t97212 = t97210+t97211+t97208+t97209;
            double t97213 = t97212*t97206*t97162*t97207;
            double t97214 = ccaa1*gamma_aa[index]*gcaa*t97163*t97190;
            double t97215 = ccaa3*gamma_aa[index]*gcaa*t97164*t97165*t97166*t97195;
            double t97216 = ccaa2*t97164*t97165*t97167*t97199;
            double t97217 = ccaa0+t97214+t97215+t97216;
            double t97218 = pow(rho_a[index],5.0/3.0);
            double t97219 = 1.0/tau_a[index];
            double t97220 = C_k*t97218*t97219;
            double t97221 = t97220-1.0;
            double t97222 = t97221*t97221;
            double t97223 = t97220+1.0;
            double t97224 = t97222*t97222;
            double t97225 = gx*gx;
            double t97226 = gamma_aa[index]*gx*t97163;
            double t97227 = t97226+1.0;
            double t97228 = 1.0/t97227;
            double t97229 = gamma_aa[index]*gx*t97163*3.0;
            double t97230 = gamma_aa[index]*gx*t97225*t97164*t97166;
            double t97231 = t97225*t97164*t97167*3.0;
            double t97232 = t97230+t97231+t97229+1.0;
            double t97233 = 1.0/t97232;
            double t97234 = gamma_aa[index]*gx*t97163*2.0;
            double t97235 = t97225*t97164*t97167;
            double t97236 = t97234+t97235+1.0;
            double t97237 = 1.0/t97236;
            double t97238 = X-1.0;
            double t97239 = 1.0/t97223;
            double t97240 = t97221*t97239;
            double t97241 = 1.0/(t97223*t97223*t97223);
            double t97242 = 1.0/(t97223*t97223*t97223*t97223*t97223);
            double t97243 = t97221*t97224*t97242;
            double t97244 = t97240+t97243-t97221*t97222*t97241*2.0;
            double t97245 = cxnl1*gamma_aa[index]*gx*t97163*t97228;
            double t97246 = cxnl3*gamma_aa[index]*gx*t97233*t97225*t97164*t97166;
            double t97247 = cxnl2*t97225*t97164*t97237*t97167;
            double t97248 = cxnl0+t97245+t97246+t97247;
            double t97249 = pow(rho_a[index],2.0/3.0);
            double t97250 = 1.0/(t97227*t97227);
            double t97251 = gamma_aa[index]*gx*t97201*8.0;
            double t97252 = gamma_aa[index]*gx*t97202*t97225*t97164*8.0;
            double t97253 = t97200*t97225*t97164*1.6E1;
            double t97254 = t97251+t97252+t97253;
            double t97255 = 1.0/(t97232*t97232);
            double t97256 = gamma_aa[index]*gx*t97201*(1.6E1/3.0);
            double t97257 = t97200*t97225*t97164*(1.6E1/3.0);
            double t97258 = t97256+t97257;
            double t97259 = 1.0/(t97236*t97236);
            v_rho_a_[index] = -t97217*(t97187+t97170*t97173*(t97186-c0p*t97160*t97162*2.0))+rho_a[index]*(t97187+ \
               t97170*t97173*(t97186-t97187))*(ccaa1*gamma_aa[index]*gcaa*t97201*t97190*(8.0/3.0)+ccaa2*t97200*t97164* \
               t97165*t97199*(1.6E1/3.0)-ccaa1*t97200*t97164*t97165*1.0/(t97189*t97189)*(8.0/3.0)-ccaa2*t97164*t97165* \
               t97167*1.0/(t97198*t97198)*(gamma_aa[index]*gcaa*t97201*(1.6E1/3.0)+t97200*t97164*t97165*(1.6E1/3.0) \
               )+ccaa3*gamma_aa[index]*gcaa*t97202*t97164*t97165*t97195*8.0-ccaa3*gamma_aa[index]*gcaa*t97164*t97165* \
               t97166*1.0/(t97194*t97194)*(gamma_aa[index]*gcaa*t97201*8.0+t97200*t97164*t97165*1.6E1+gamma_aa[index]* \
               gcaa*t97202*t97164*t97165*8.0))+rho_a[index]*t97217*(-t97213+t97170*t97173*(t97213-(t97185*1.0/(t97179* \
               t97179)*(b2f*c*t97203*(1.0/3.0)+b4f*t97204*t97149*(2.0/3.0)+b1f*c*t97203*t97205*(1.0/6.0)+b3f*c*t97203* \
               t97147*(1.0/2.0)))/t97182+a1f*c*c0f*t97203*t97183*(2.0/3.0)-a1p*c*c0p*t97203*t97160*(2.0/3.0))+a1p* \
               c*c0p*t97203*t97160*(2.0/3.0))-c0*pow(rho_a[index],1.0/3.0)*t97238*(cx0+t97244*t97248+cx1*gamma_aa[index]* \
               gx*t97163*t97228+cx2*t97225*t97164*t97237*t97167+cx3*gamma_aa[index]*gx*t97233*t97225*t97164*t97166) \
               *(4.0/3.0)+c0*pow(rho_a[index],4.0/3.0)*t97238*(t97244*(cxnl1*gamma_aa[index]*gx*t97201*t97228*(8.0/ \
               3.0)-cxnl1*t97200*t97250*t97225*t97164*(8.0/3.0)+cxnl2*t97200*t97225*t97164*t97237*(1.6E1/3.0)-cxnl2* \
               t97225*t97164*t97167*t97258*t97259+cxnl3*gamma_aa[index]*gx*t97202*t97233*t97225*t97164*8.0-cxnl3* \
               gamma_aa[index]*gx*t97225*t97164*t97254*t97255*t97166)-t97248*(C_k*t97219*t97239*t97249*(5.0/3.0)- \
               C_k*t97222*t97241*t97219*t97249*1.0E1+C_k*t97224*t97242*t97219*t97249*(2.5E1/3.0)-C_k*t97221*1.0/(t97223* \
               t97223)*t97219*t97249*(5.0/3.0)+C_k*t97221*t97222*1.0/(t97223*t97223*t97223*t97223)*t97219*t97249* \
               1.0E1-C_k*t97221*1.0/(t97223*t97223*t97223*t97223*t97223*t97223)*t97224*t97219*t97249*(2.5E1/3.0)) \
               +cx1*gamma_aa[index]*gx*t97201*t97228*(8.0/3.0)-cx1*t97200*t97250*t97225*t97164*(8.0/3.0)+cx2*t97200* \
               t97225*t97164*t97237*(1.6E1/3.0)-cx2*t97225*t97164*t97167*t97258*t97259+cx3*gamma_aa[index]*gx*t97202* \
               t97233*t97225*t97164*8.0-cx3*gamma_aa[index]*gx*t97225*t97164*t97254*t97255*t97166);
        } else if (rho_b[index] > cutoff_) {
            v_rho_a_[index] = 0.0;
        } else {
            v_rho_a_[index] = 0.0;
        }

        //V_rho_b
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t93160 = 1.0/pow(rho_a[index],1.0/3.0);
            double t93161 = c*t93160;
            double t93162 = sqrt(t93161);
            double t93163 = pow(t93161,3.0/2.0);
            double t93164 = c*c;
            double t93165 = 1.0/pow(rho_a[index],2.0/3.0);
            double t93166 = 1.0/c0p;
            double t93167 = b1p*t93162;
            double t93168 = b3p*t93163;
            double t93169 = b4p*t93164*t93165;
            double t93170 = b2p*c*t93160;
            double t93171 = t93170+t93167+t93168+t93169;
            double t93172 = 1.0/t93171;
            double t93173 = t93172*t93166*(1.0/2.0);
            double t93174 = t93173+1.0;
            double t93175 = log(t93174);
            double t93176 = a1p*c*t93160;
            double t93177 = t93176+1.0;
            double t93178 = pow(2.0,1.0/3.0);
            double t93179 = t93178*2.0;
            double t93180 = t93179-2.0;
            double t93181 = two_13*2.0;
            double t93182 = t93181-2.0;
            double t93183 = 1.0/t93182;
            double t93184 = 1.0/c0f;
            double t93185 = 1.0/pow(rho_b[index],1.0/3.0);
            double t93186 = c*t93185;
            double t93187 = sqrt(t93186);
            double t93188 = pow(t93186,3.0/2.0);
            double t93189 = 1.0/pow(rho_b[index],2.0/3.0);
            double t93190 = b1p*t93187;
            double t93191 = b3p*t93188;
            double t93192 = b4p*t93164*t93189;
            double t93193 = b2p*c*t93185;
            double t93194 = t93190+t93191+t93192+t93193;
            double t93195 = 1.0/t93194;
            double t93196 = t93166*t93195*(1.0/2.0);
            double t93197 = t93196+1.0;
            double t93198 = log(t93197);
            double t93199 = a1p*c*t93185;
            double t93200 = t93199+1.0;
            double t93201 = c0p*t93200*t93198*2.0;
            double t93202 = rho_a[index]+rho_b[index];
            double t93203 = 1.0/pow(t93202,1.0/3.0);
            double t93204 = c*t93203;
            double t93205 = sqrt(t93204);
            double t93206 = pow(t93204,3.0/2.0);
            double t93207 = 1.0/pow(t93202,2.0/3.0);
            double t93208 = b1p*t93205;
            double t93209 = b3p*t93206;
            double t93210 = b4p*t93207*t93164;
            double t93211 = b2p*c*t93203;
            double t93212 = t93210+t93211+t93208+t93209;
            double t93213 = 1.0/t93212;
            double t93214 = t93213*t93166*(1.0/2.0);
            double t93215 = t93214+1.0;
            double t93216 = log(t93215);
            double t93217 = a1p*c*t93203;
            double t93218 = t93217+1.0;
            double t93219 = c0p*t93216*t93218*2.0;
            double t93220 = rho_a[index]-rho_b[index];
            double t93221 = t93220*t93220;
            double t93222 = 1.0/t93202;
            double t93223 = t93220*t93222;
            double t93224 = 1.0/(t93202*t93202*t93202*t93202);
            double t93225 = t93221*t93221;
            double t93226 = t93223+1.0;
            double t93227 = pow(t93226,4.0/3.0);
            double t93228 = -t93223+1.0;
            double t93229 = pow(t93228,4.0/3.0);
            double t93230 = t93227+t93229-2.0;
            double t93231 = gcab*gcab;
            double t93235 = 1.0/pow(rho_a[index],8.0/3.0);
            double t93236 = gamma_aa[index]*t93235*(1.0/2.0);
            double t93237 = 1.0/pow(rho_b[index],8.0/3.0);
            double t93238 = gamma_bb[index]*t93237*(1.0/2.0);
            double t93232 = t93236+t93238;
            double t93233 = t93232*t93232;
            double t93234 = 1.0/pow(rho_b[index],1.1E1/3.0);
            double t93239 = gcab*t93232;
            double t93240 = t93239+1.0;
            double t93241 = t93231*t93233;
            double t93242 = gcab*t93232*2.0;
            double t93243 = t93241+t93242+1.0;
            double t93244 = t93231*t93233*3.0;
            double t93245 = gcab*t93231*t93232*t93233;
            double t93246 = gcab*t93232*3.0;
            double t93247 = t93244+t93245+t93246+1.0;
            double t93248 = c0p*t93175*t93177*2.0;
            double t93249 = 1.0/t93243;
            double t93250 = 1.0/t93247;
            double t93251 = 1.0/t93240;
            double t93252 = 1.0/pow(t93202,4.0/3.0);
            double t93253 = b1f*t93205;
            double t93254 = b3f*t93206;
            double t93255 = b4f*t93207*t93164;
            double t93256 = b2f*c*t93203;
            double t93257 = t93253+t93254+t93255+t93256;
            double t93258 = 1.0/t93257;
            double t93259 = t93184*t93258*(1.0/2.0);
            double t93260 = t93259+1.0;
            double t93261 = log(t93260);
            double t93262 = a1f*c*t93203;
            double t93263 = t93262+1.0;
            double t93265 = c0f*t93261*t93263*2.0;
            double t93264 = t93219-t93265;
            double t93266 = 1.0/(t93202*t93202);
            double t93267 = t93220*t93266;
            double t93268 = t93222+t93267;
            double t93269 = 1.0/pow(t93202,5.0/3.0);
            double t93270 = 1.0/sqrt(t93204);
            double t93271 = 1.0/t93215;
            double t93272 = 1.0/(t93212*t93212);
            double t93273 = b4p*t93164*t93269*(2.0/3.0);
            double t93274 = b2p*c*t93252*(1.0/3.0);
            double t93275 = b1p*c*t93252*t93270*(1.0/6.0);
            double t93276 = b3p*c*t93205*t93252*(1.0/2.0);
            double t93277 = t93273+t93274+t93275+t93276;
            double t93278 = 1.0/d2fz0;
            double t93279 = 1.0/Aa;
            double t93280 = b1a*t93205;
            double t93281 = b3a*t93206;
            double t93282 = b4a*t93207*t93164;
            double t93283 = b2a*c*t93203;
            double t93284 = t93280+t93281+t93282+t93283;
            double t93285 = 1.0/t93284;
            double t93286 = t93285*t93279*(1.0/2.0);
            double t93287 = t93286+1.0;
            double t93288 = log(t93287);
            double t93289 = a1a*c*t93203;
            double t93290 = t93289+1.0;
            double t93291 = 1.0/(t93202*t93202*t93202*t93202*t93202);
            double t93292 = pow(t93226,1.0/3.0);
            double t93293 = t93292*t93268*(4.0/3.0);
            double t93294 = pow(t93228,1.0/3.0);
            double t93295 = t93293-t93294*t93268*(4.0/3.0);
            double t93296 = t93224*t93225;
            double t93297 = t93296-1.0;
            double t93298 = t93271*t93218*t93272*t93277;
            double t93299 = a1f*c*t93185;
            double t93300 = t93299+1.0;
            double t93301 = b1f*t93187;
            double t93302 = b3f*t93188;
            double t93303 = b4f*t93164*t93189;
            double t93304 = b2f*c*t93185;
            double t93305 = t93301+t93302+t93303+t93304;
            double t93306 = 1.0/t93305;
            double t93307 = t93306*t93184*(1.0/2.0);
            double t93308 = t93307+1.0;
            double t93309 = 1.0/pow(rho_b[index],4.0/3.0);
            double t93310 = 1.0/pow(rho_b[index],5.0/3.0);
            double t93311 = 1.0/sqrt(t93186);
            double t93312 = log(t93308);
            double t93313 = 1.0/t93197;
            double t93314 = 1.0/(t93194*t93194);
            double t93315 = b4p*t93310*t93164*(2.0/3.0);
            double t93316 = b2p*c*t93309*(1.0/3.0);
            double t93317 = b1p*c*t93311*t93309*(1.0/6.0);
            double t93318 = b3p*c*t93309*t93187*(1.0/2.0);
            double t93319 = t93315+t93316+t93317+t93318;
            double t93320 = t93200*t93313*t93314*t93319;
            double t93323 = c0f*t93300*t93312*2.0;
            double t93321 = t93201-t93323;
            double t93322 = Aa*t93230*t93290*t93183*t93278*t93288*t93297*2.0;
            double t93324 = t93321*t93180*t93183;
            double t93325 = gamma_bb[index]*gamma_bb[index];
            double t93326 = gcaa*gcaa;
            double t93327 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
               rho_b[index]*rho_b[index]);
            double t93328 = 1.0/pow(rho_b[index],1.6E1/3.0);
            double t93329 = pow(rho_b[index],5.0/3.0);
            double t93330 = 1.0/tau_b[index];
            double t93331 = C_k*t93330*t93329;
            double t93332 = t93331-1.0;
            double t93333 = t93332*t93332;
            double t93334 = t93331+1.0;
            double t93335 = t93333*t93333;
            double t93336 = gx*gx;
            double t93337 = gamma_bb[index]*gx*t93237;
            double t93338 = t93337+1.0;
            double t93339 = 1.0/t93338;
            double t93340 = gamma_bb[index]*gx*t93237*3.0;
            double t93341 = gamma_bb[index]*gx*t93325*t93327*t93336;
            double t93342 = t93325*t93336*t93328*3.0;
            double t93343 = t93340+t93341+t93342+1.0;
            double t93344 = 1.0/t93343;
            double t93345 = gamma_bb[index]*gx*t93237*2.0;
            double t93346 = t93325*t93336*t93328;
            double t93347 = t93345+t93346+1.0;
            double t93348 = 1.0/t93347;
            double t93349 = 1.0/t93334;
            double t93350 = t93332*t93349;
            double t93351 = 1.0/(t93334*t93334*t93334);
            double t93352 = 1.0/(t93334*t93334*t93334*t93334*t93334);
            double t93353 = t93332*t93352*t93335;
            double t93354 = t93350+t93353-t93332*t93333*t93351*2.0;
            double t93355 = 1.0/pow(rho_b[index],1.9E1/3.0);
            double t93356 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
               rho_b[index]*rho_b[index]*rho_b[index]);
            double t93357 = cxnl1*gamma_bb[index]*gx*t93237*t93339;
            double t93358 = cxnl3*gamma_bb[index]*gx*t93325*t93344*t93327*t93336;
            double t93359 = cxnl2*t93325*t93336*t93328*t93348;
            double t93360 = cxnl0+t93357+t93358+t93359;
            double t93361 = pow(rho_b[index],2.0/3.0);
            double t93362 = 1.0/(t93338*t93338);
            double t93363 = gamma_bb[index]*gx*t93234*8.0;
            double t93364 = gamma_bb[index]*gx*t93325*t93336*t93356*8.0;
            double t93365 = t93325*t93336*t93355*1.6E1;
            double t93366 = t93363+t93364+t93365;
            double t93367 = 1.0/(t93343*t93343);
            double t93368 = gamma_bb[index]*gx*t93234*(1.6E1/3.0);
            double t93369 = t93325*t93336*t93355*(1.6E1/3.0);
            double t93370 = t93368+t93369;
            double t93371 = 1.0/(t93347*t93347);
            double t93372 = t93201-t93324;
            double t93373 = gamma_bb[index]*gcaa*t93237;
            double t93374 = t93373+1.0;
            double t93375 = 1.0/t93374;
            double t93376 = gamma_bb[index]*gcaa*t93237*3.0;
            double t93377 = gamma_bb[index]*gcaa*t93325*t93326*t93327;
            double t93378 = t93325*t93326*t93328*3.0;
            double t93379 = t93376+t93377+t93378+1.0;
            double t93380 = 1.0/t93379;
            double t93381 = gamma_bb[index]*gcaa*t93237*2.0;
            double t93382 = t93325*t93326*t93328;
            double t93383 = t93381+t93382+1.0;
            double t93384 = 1.0/t93383;
            double t93385 = 1.0/t93308;
            double t93386 = 1.0/(t93305*t93305);
            double t93387 = b4f*t93310*t93164*(2.0/3.0);
            double t93388 = b2f*c*t93309*(1.0/3.0);
            double t93389 = b1f*c*t93311*t93309*(1.0/6.0);
            double t93390 = b3f*c*t93309*t93187*(1.0/2.0);
            double t93391 = t93390+t93387+t93388+t93389;
            double t93392 = a1f*c*c0f*t93312*t93309*(2.0/3.0);
            double t93393 = a1p*c*c0p*t93309*t93198*(2.0/3.0);
            double t93394 = ccaa1*gamma_bb[index]*gcaa*t93237*t93375;
            double t93395 = ccaa3*gamma_bb[index]*gcaa*t93325*t93326*t93380*t93327;
            double t93396 = ccaa2*t93325*t93326*t93328*t93384;
            double t93397 = ccaa0+t93394+t93395+t93396;
            v_rho_b_[index] = -t93372*t93397-(ccab0+ccab1*gcab*t93232*t93251+ccab2*t93231*t93233*t93249+ccab3* \
               gcab*t93231*t93232*t93250*t93233)*(-t93201+t93322+t93324+t93219+t93202*(t93298-t93230*t93224*t93225* \
               t93183*(t93298-(t93263*1.0/(t93257*t93257)*(b2f*c*t93252*(1.0/3.0)+b4f*t93164*t93269*(2.0/3.0)+b1f* \
               c*t93252*t93270*(1.0/6.0)+b3f*c*t93205*t93252*(1.0/2.0)))/t93260+a1f*c*c0f*t93252*t93261*(2.0/3.0) \
               -a1p*c*c0p*t93216*t93252*(2.0/3.0))-a1p*c*c0p*t93216*t93252*(2.0/3.0)+t93230*t93225*t93183*t93264* \
               t93291*4.0+t93224*t93225*t93183*t93264*t93295+t93220*t93221*t93230*t93224*t93183*t93264*4.0-Aa*t93230* \
               t93290*t93183*t93278*t93288*(t93225*t93291*4.0+t93220*t93221*t93224*4.0)*2.0-Aa*t93290*t93183*t93295* \
               t93278*t93288*t93297*2.0+(t93230*t93290*t93183*1.0/(t93284*t93284)*t93278*t93297*(b2a*c*t93252*(1.0/ \
               3.0)+b4a*t93164*t93269*(2.0/3.0)+b1a*c*t93252*t93270*(1.0/6.0)+b3a*c*t93205*t93252*(1.0/2.0)))/t93287- \
               Aa*a1a*c*t93230*t93252*t93183*t93278*t93288*t93297*(2.0/3.0))+rho_b[index]*(-t93320+t93393+t93180* \
               t93183*(t93320+t93392-t93300*t93391*t93385*t93386-a1p*c*c0p*t93309*t93198*(2.0/3.0)))-t93230*t93224* \
               t93225*t93183*t93264)-(rho_b[index]*(t93201-t93321*t93180*t93183)+rho_a[index]*(t93248-t93180*t93183* \
               (t93248-c0f*log((t93184*(1.0/2.0))/(b1f*t93162+b3f*t93163+b2f*c*t93160+b4f*t93164*t93165)+1.0)*(a1f* \
               c*t93160+1.0)*2.0))-t93202*(t93322+t93219-t93230*t93224*t93225*t93183*t93264))*(ccab1*gamma_bb[index]* \
               gcab*t93251*t93234*(4.0/3.0)-ccab2*t93231*t93233*1.0/(t93243*t93243)*(gamma_bb[index]*gcab*t93234* \
               (8.0/3.0)+gamma_bb[index]*t93231*t93232*t93234*(8.0/3.0))-ccab1*gamma_bb[index]*t93231*1.0/(t93240* \
               t93240)*t93232*t93234*(4.0/3.0)+ccab2*gamma_bb[index]*t93231*t93232*t93234*t93249*(8.0/3.0)-ccab3* \
               gcab*t93231*t93232*t93233*1.0/(t93247*t93247)*(gamma_bb[index]*gcab*t93234*4.0+gamma_bb[index]*t93231* \
               t93232*t93234*8.0+gamma_bb[index]*gcab*t93231*t93233*t93234*4.0)+ccab3*gamma_bb[index]*gcab*t93231* \
               t93250*t93233*t93234*4.0)-(X-1.0)*(c0*pow(rho_b[index],1.0/3.0)*(cx0+t93360*t93354+cx1*gamma_bb[index]* \
               gx*t93237*t93339+cx2*t93325*t93336*t93328*t93348+cx3*gamma_bb[index]*gx*t93325*t93344*t93327*t93336) \
               *(4.0/3.0)-c0*pow(rho_b[index],4.0/3.0)*(t93354*(cxnl1*gamma_bb[index]*gx*t93234*t93339*(8.0/3.0)- \
               cxnl1*t93325*t93362*t93336*t93355*(8.0/3.0)+cxnl2*t93325*t93336*t93355*t93348*(1.6E1/3.0)-cxnl2*t93325* \
               t93370*t93371*t93336*t93328+cxnl3*gamma_bb[index]*gx*t93325*t93344*t93336*t93356*8.0-cxnl3*gamma_bb[index]* \
               gx*t93325*t93327*t93336*t93366*t93367)-t93360*(C_k*t93330*t93361*t93349*(5.0/3.0)-C_k*t93330*t93333* \
               t93351*t93361*1.0E1+C_k*t93330*t93352*t93361*t93335*(2.5E1/3.0)-C_k*t93330*t93332*1.0/(t93334*t93334) \
               *t93361*(5.0/3.0)+C_k*t93330*t93332*t93333*1.0/(t93334*t93334*t93334*t93334)*t93361*1.0E1-C_k*t93330* \
               t93332*1.0/(t93334*t93334*t93334*t93334*t93334*t93334)*t93361*t93335*(2.5E1/3.0))+cx1*gamma_bb[index]* \
               gx*t93234*t93339*(8.0/3.0)-cx1*t93325*t93362*t93336*t93355*(8.0/3.0)+cx2*t93325*t93336*t93355*t93348* \
               (1.6E1/3.0)-cx2*t93325*t93370*t93371*t93336*t93328+cx3*gamma_bb[index]*gx*t93325*t93344*t93336*t93356* \
               8.0-cx3*gamma_bb[index]*gx*t93325*t93327*t93336*t93366*t93367))+rho_b[index]*t93397*(-t93320+t93393+ \
               t93180*t93183*(t93320+t93392-t93393-t93300*t93391*t93385*t93386))+rho_b[index]*t93372*(ccaa1*gamma_bb[index]* \
               gcaa*t93234*t93375*(8.0/3.0)+ccaa2*t93325*t93326*t93355*t93384*(1.6E1/3.0)-ccaa1*t93325*t93326*t93355* \
               1.0/(t93374*t93374)*(8.0/3.0)-ccaa2*t93325*t93326*t93328*1.0/(t93383*t93383)*(gamma_bb[index]*gcaa* \
               t93234*(1.6E1/3.0)+t93325*t93326*t93355*(1.6E1/3.0))+ccaa3*gamma_bb[index]*gcaa*t93325*t93326*t93380* \
               t93356*8.0-ccaa3*gamma_bb[index]*gcaa*t93325*t93326*t93327*1.0/(t93379*t93379)*(gamma_bb[index]*gcaa* \
               t93234*8.0+t93325*t93326*t93355*1.6E1+gamma_bb[index]*gcaa*t93325*t93326*t93356*8.0));
        } else if (rho_a[index] > cutoff_) {
            v_rho_b_[index] = 0.0;
        } else if (rho_b[index] > cutoff_) {
            double t96375 = 1.0/pow(rho_b[index],1.0/3.0);
            double t96376 = c*t96375;
            double t96377 = sqrt(t96376);
            double t96378 = pow(t96376,3.0/2.0);
            double t96379 = c*c;
            double t96380 = 1.0/pow(rho_b[index],2.0/3.0);
            double t96381 = 1.0/c0p;
            double t96382 = b1p*t96377;
            double t96383 = b3p*t96378;
            double t96384 = b4p*t96380*t96379;
            double t96385 = b2p*c*t96375;
            double t96386 = t96382+t96383+t96384+t96385;
            double t96387 = 1.0/t96386;
            double t96388 = t96381*t96387*(1.0/2.0);
            double t96389 = t96388+1.0;
            double t96390 = log(t96389);
            double t96391 = a1p*c*t96375;
            double t96392 = t96391+1.0;
            double t96393 = 1.0/pow(rho_b[index],8.0/3.0);
            double t96394 = gamma_bb[index]*gamma_bb[index];
            double t96395 = gcaa*gcaa;
            double t96396 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
               rho_b[index]*rho_b[index]);
            double t96397 = 1.0/pow(rho_b[index],1.6E1/3.0);
            double t96398 = pow(2.0,1.0/3.0);
            double t96399 = t96398*2.0;
            double t96400 = t96399-2.0;
            double t96401 = two_13*2.0;
            double t96402 = t96401-2.0;
            double t96403 = 1.0/t96402;
            double t96404 = 1.0/c0f;
            double t96405 = b1f*t96377;
            double t96406 = b3f*t96378;
            double t96407 = b4f*t96380*t96379;
            double t96408 = b2f*c*t96375;
            double t96409 = t96405+t96406+t96407+t96408;
            double t96410 = 1.0/t96409;
            double t96411 = t96410*t96404*(1.0/2.0);
            double t96412 = t96411+1.0;
            double t96413 = log(t96412);
            double t96414 = a1f*c*t96375;
            double t96415 = t96414+1.0;
            double t96416 = c0f*t96413*t96415*2.0;
            double t96417 = c0p*t96390*t96392*2.0;
            double t96418 = gamma_bb[index]*gcaa*t96393;
            double t96419 = t96418+1.0;
            double t96420 = 1.0/t96419;
            double t96421 = gamma_bb[index]*gcaa*t96393*3.0;
            double t96422 = gamma_bb[index]*gcaa*t96394*t96395*t96396;
            double t96423 = t96394*t96395*t96397*3.0;
            double t96424 = t96421+t96422+t96423+1.0;
            double t96425 = 1.0/t96424;
            double t96426 = gamma_bb[index]*gcaa*t96393*2.0;
            double t96427 = t96394*t96395*t96397;
            double t96428 = t96426+t96427+1.0;
            double t96429 = 1.0/t96428;
            double t96430 = 1.0/pow(rho_b[index],1.9E1/3.0);
            double t96431 = 1.0/pow(rho_b[index],1.1E1/3.0);
            double t96432 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
               rho_b[index]*rho_b[index]*rho_b[index]);
            double t96433 = 1.0/pow(rho_b[index],4.0/3.0);
            double t96434 = 1.0/pow(rho_b[index],5.0/3.0);
            double t96435 = 1.0/sqrt(t96376);
            double t96436 = 1.0/t96389;
            double t96437 = 1.0/(t96386*t96386);
            double t96438 = b4p*t96434*t96379*(2.0/3.0);
            double t96439 = b2p*c*t96433*(1.0/3.0);
            double t96440 = b1p*c*t96433*t96435*(1.0/6.0);
            double t96441 = b3p*c*t96433*t96377*(1.0/2.0);
            double t96442 = t96440+t96441+t96438+t96439;
            double t96443 = t96442*t96436*t96392*t96437;
            double t96444 = ccaa1*gamma_bb[index]*gcaa*t96420*t96393;
            double t96445 = ccaa3*gamma_bb[index]*gcaa*t96425*t96394*t96395*t96396;
            double t96446 = ccaa2*t96429*t96394*t96395*t96397;
            double t96447 = ccaa0+t96444+t96445+t96446;
            double t96448 = pow(rho_b[index],5.0/3.0);
            double t96449 = 1.0/tau_b[index];
            double t96450 = C_k*t96448*t96449;
            double t96451 = t96450-1.0;
            double t96452 = t96451*t96451;
            double t96453 = t96450+1.0;
            double t96454 = t96452*t96452;
            double t96455 = gx*gx;
            double t96456 = gamma_bb[index]*gx*t96393;
            double t96457 = t96456+1.0;
            double t96458 = 1.0/t96457;
            double t96459 = gamma_bb[index]*gx*t96393*3.0;
            double t96460 = gamma_bb[index]*gx*t96455*t96394*t96396;
            double t96461 = t96455*t96394*t96397*3.0;
            double t96462 = t96460+t96461+t96459+1.0;
            double t96463 = 1.0/t96462;
            double t96464 = gamma_bb[index]*gx*t96393*2.0;
            double t96465 = t96455*t96394*t96397;
            double t96466 = t96464+t96465+1.0;
            double t96467 = 1.0/t96466;
            double t96468 = X-1.0;
            double t96469 = 1.0/t96453;
            double t96470 = t96451*t96469;
            double t96471 = 1.0/(t96453*t96453*t96453);
            double t96472 = 1.0/(t96453*t96453*t96453*t96453*t96453);
            double t96473 = t96451*t96454*t96472;
            double t96474 = t96470+t96473-t96451*t96452*t96471*2.0;
            double t96475 = cxnl1*gamma_bb[index]*gx*t96393*t96458;
            double t96476 = cxnl3*gamma_bb[index]*gx*t96463*t96455*t96394*t96396;
            double t96477 = cxnl2*t96455*t96394*t96467*t96397;
            double t96478 = cxnl0+t96475+t96476+t96477;
            double t96479 = pow(rho_b[index],2.0/3.0);
            double t96480 = 1.0/(t96457*t96457);
            double t96481 = gamma_bb[index]*gx*t96431*8.0;
            double t96482 = gamma_bb[index]*gx*t96432*t96455*t96394*8.0;
            double t96483 = t96430*t96455*t96394*1.6E1;
            double t96484 = t96481+t96482+t96483;
            double t96485 = 1.0/(t96462*t96462);
            double t96486 = gamma_bb[index]*gx*t96431*(1.6E1/3.0);
            double t96487 = t96430*t96455*t96394*(1.6E1/3.0);
            double t96488 = t96486+t96487;
            double t96489 = 1.0/(t96466*t96466);
            v_rho_b_[index] = -t96447*(t96417+t96400*t96403*(t96416-c0p*t96390*t96392*2.0))+rho_b[index]*(t96417+ \
               t96400*t96403*(t96416-t96417))*(ccaa1*gamma_bb[index]*gcaa*t96420*t96431*(8.0/3.0)+ccaa2*t96430*t96429* \
               t96394*t96395*(1.6E1/3.0)-ccaa1*t96430*1.0/(t96419*t96419)*t96394*t96395*(8.0/3.0)-ccaa2*1.0/(t96428* \
               t96428)*t96394*t96395*t96397*(gamma_bb[index]*gcaa*t96431*(1.6E1/3.0)+t96430*t96394*t96395*(1.6E1/ \
               3.0))+ccaa3*gamma_bb[index]*gcaa*t96432*t96425*t96394*t96395*8.0-ccaa3*gamma_bb[index]*gcaa*1.0/(t96424* \
               t96424)*t96394*t96395*t96396*(gamma_bb[index]*gcaa*t96431*8.0+t96430*t96394*t96395*1.6E1+gamma_bb[index]* \
               gcaa*t96432*t96394*t96395*8.0))+rho_b[index]*t96447*(-t96443+t96400*t96403*(t96443-(t96415*1.0/(t96409* \
               t96409)*(b2f*c*t96433*(1.0/3.0)+b4f*t96434*t96379*(2.0/3.0)+b1f*c*t96433*t96435*(1.0/6.0)+b3f*c*t96433* \
               t96377*(1.0/2.0)))/t96412+a1f*c*c0f*t96413*t96433*(2.0/3.0)-a1p*c*c0p*t96433*t96390*(2.0/3.0))+a1p* \
               c*c0p*t96433*t96390*(2.0/3.0))-c0*pow(rho_b[index],1.0/3.0)*t96468*(cx0+t96474*t96478+cx1*gamma_bb[index]* \
               gx*t96393*t96458+cx2*t96455*t96394*t96467*t96397+cx3*gamma_bb[index]*gx*t96463*t96455*t96394*t96396) \
               *(4.0/3.0)+c0*pow(rho_b[index],4.0/3.0)*t96468*(t96474*(cxnl1*gamma_bb[index]*gx*t96431*t96458*(8.0/ \
               3.0)-cxnl1*t96430*t96480*t96455*t96394*(8.0/3.0)+cxnl2*t96430*t96455*t96394*t96467*(1.6E1/3.0)-cxnl2* \
               t96455*t96394*t96397*t96488*t96489+cxnl3*gamma_bb[index]*gx*t96432*t96463*t96455*t96394*8.0-cxnl3* \
               gamma_bb[index]*gx*t96455*t96394*t96484*t96485*t96396)-t96478*(C_k*t96449*t96469*t96479*(5.0/3.0)- \
               C_k*t96452*t96471*t96449*t96479*1.0E1+C_k*t96454*t96472*t96449*t96479*(2.5E1/3.0)-C_k*t96451*1.0/(t96453* \
               t96453)*t96449*t96479*(5.0/3.0)+C_k*t96451*t96452*1.0/(t96453*t96453*t96453*t96453)*t96449*t96479* \
               1.0E1-C_k*t96451*1.0/(t96453*t96453*t96453*t96453*t96453*t96453)*t96454*t96449*t96479*(2.5E1/3.0)) \
               +cx1*gamma_bb[index]*gx*t96431*t96458*(8.0/3.0)-cx1*t96430*t96480*t96455*t96394*(8.0/3.0)+cx2*t96430* \
               t96455*t96394*t96467*(1.6E1/3.0)-cx2*t96455*t96394*t96397*t96488*t96489+cx3*gamma_bb[index]*gx*t96432* \
               t96463*t96455*t96394*8.0-cx3*gamma_bb[index]*gx*t96455*t96394*t96484*t96485*t96396);
        } else {
            v_rho_b_[index] = 0.0;
        }

        if (is_gga_) {

            //V_gamma_aa
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t93399 = 1.0/pow(rho_a[index],1.0/3.0);
                double t93400 = c*t93399;
                double t93401 = sqrt(t93400);
                double t93402 = pow(t93400,3.0/2.0);
                double t93403 = c*c;
                double t93404 = 1.0/pow(rho_a[index],2.0/3.0);
                double t93405 = 1.0/c0p;
                double t93406 = b1p*t93401;
                double t93407 = b3p*t93402;
                double t93408 = b4p*t93403*t93404;
                double t93409 = b2p*c*t93399;
                double t93410 = t93406+t93407+t93408+t93409;
                double t93411 = 1.0/t93410;
                double t93412 = t93411*t93405*(1.0/2.0);
                double t93413 = t93412+1.0;
                double t93414 = log(t93413);
                double t93415 = a1p*c*t93399;
                double t93416 = t93415+1.0;
                double t93417 = pow(2.0,1.0/3.0);
                double t93418 = t93417*2.0;
                double t93419 = t93418-2.0;
                double t93420 = two_13*2.0;
                double t93421 = t93420-2.0;
                double t93422 = 1.0/t93421;
                double t93423 = 1.0/c0f;
                double t93424 = 1.0/pow(rho_b[index],1.0/3.0);
                double t93425 = c*t93424;
                double t93426 = sqrt(t93425);
                double t93427 = pow(t93425,3.0/2.0);
                double t93428 = 1.0/pow(rho_b[index],2.0/3.0);
                double t93429 = b1p*t93426;
                double t93430 = b3p*t93427;
                double t93431 = b4p*t93403*t93428;
                double t93432 = b2p*c*t93424;
                double t93433 = t93430+t93431+t93432+t93429;
                double t93434 = 1.0/t93433;
                double t93435 = t93405*t93434*(1.0/2.0);
                double t93436 = t93435+1.0;
                double t93437 = log(t93436);
                double t93438 = a1p*c*t93424;
                double t93439 = t93438+1.0;
                double t93440 = c0p*t93437*t93439*2.0;
                double t93441 = rho_a[index]+rho_b[index];
                double t93442 = 1.0/pow(t93441,1.0/3.0);
                double t93443 = c*t93442;
                double t93444 = sqrt(t93443);
                double t93445 = pow(t93443,3.0/2.0);
                double t93446 = 1.0/pow(t93441,2.0/3.0);
                double t93447 = b1p*t93444;
                double t93448 = b3p*t93445;
                double t93449 = b4p*t93403*t93446;
                double t93450 = b2p*c*t93442;
                double t93451 = t93450+t93447+t93448+t93449;
                double t93452 = 1.0/t93451;
                double t93453 = t93405*t93452*(1.0/2.0);
                double t93454 = t93453+1.0;
                double t93455 = log(t93454);
                double t93456 = a1p*c*t93442;
                double t93457 = t93456+1.0;
                double t93458 = c0p*t93455*t93457*2.0;
                double t93459 = rho_a[index]-rho_b[index];
                double t93460 = t93459*t93459;
                double t93461 = 1.0/t93441;
                double t93462 = t93461*t93459;
                double t93463 = 1.0/(t93441*t93441*t93441*t93441);
                double t93464 = t93460*t93460;
                double t93465 = t93462+1.0;
                double t93466 = pow(t93465,4.0/3.0);
                double t93467 = -t93462+1.0;
                double t93468 = pow(t93467,4.0/3.0);
                double t93469 = t93466+t93468-2.0;
                double t93470 = 1.0/pow(rho_a[index],8.0/3.0);
                double t93471 = gamma_aa[index]*t93470*(1.0/2.0);
                double t93472 = 1.0/pow(rho_b[index],8.0/3.0);
                double t93473 = gamma_bb[index]*t93472*(1.0/2.0);
                double t93474 = t93471+t93473;
                double t93475 = gcab*t93474;
                double t93476 = t93475+1.0;
                double t93477 = gcab*gcab;
                double t93478 = t93474*t93474;
                double t93479 = t93477*t93478;
                double t93480 = gcab*t93474*2.0;
                double t93481 = t93480+t93479+1.0;
                double t93482 = t93477*t93478*3.0;
                double t93483 = gcab*t93474*t93477*t93478;
                double t93484 = gcab*t93474*3.0;
                double t93485 = t93482+t93483+t93484+1.0;
                double t93486 = c0p*t93414*t93416*2.0;
                double t93487 = b1f*t93401;
                double t93488 = b3f*t93402;
                double t93489 = b4f*t93403*t93404;
                double t93490 = b2f*c*t93399;
                double t93491 = t93490+t93487+t93488+t93489;
                double t93492 = 1.0/t93491;
                double t93493 = t93423*t93492*(1.0/2.0);
                double t93494 = t93493+1.0;
                double t93495 = log(t93494);
                double t93496 = a1f*c*t93399;
                double t93497 = t93496+1.0;
                double t93498 = t93486-c0f*t93495*t93497*2.0;
                double t93499 = t93486-t93422*t93419*t93498;
                double t93500 = gcaa*gcaa;
                double t93501 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t93502 = gamma_aa[index]*gamma_aa[index];
                double t93503 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t93504 = gamma_aa[index]*gcaa*t93470;
                double t93505 = t93504+1.0;
                double t93506 = gamma_aa[index]*gcaa*t93470*3.0;
                double t93507 = gamma_aa[index]*gcaa*t93500*t93502*t93503;
                double t93508 = t93500*t93501*t93502*3.0;
                double t93509 = t93506+t93507+t93508+1.0;
                double t93510 = gamma_aa[index]*gcaa*t93470*2.0;
                double t93511 = t93500*t93501*t93502;
                double t93512 = t93510+t93511+1.0;
                double t93513 = pow(rho_a[index],5.0/3.0);
                double t93514 = 1.0/tau_a[index];
                double t93515 = C_k*t93513*t93514;
                double t93516 = t93515-1.0;
                double t93517 = t93516*t93516;
                double t93518 = t93515+1.0;
                double t93519 = t93517*t93517;
                double t93520 = gx*gx;
                double t93521 = gamma_aa[index]*gx*t93470;
                double t93522 = t93521+1.0;
                double t93523 = gamma_aa[index]*gx*t93470*3.0;
                double t93524 = gamma_aa[index]*gx*t93502*t93520*t93503;
                double t93525 = t93501*t93502*t93520*3.0;
                double t93526 = t93523+t93524+t93525+1.0;
                double t93527 = gamma_aa[index]*gx*t93470*2.0;
                double t93528 = t93501*t93502*t93520;
                double t93529 = t93527+t93528+1.0;
                double t93530 = 1.0/t93522;
                double t93531 = 1.0/t93529;
                double t93532 = 1.0/t93526;
                double t93533 = 1.0/(t93522*t93522);
                double t93534 = gx*t93470*3.0;
                double t93535 = gamma_aa[index]*t93501*t93520*6.0;
                double t93536 = gx*t93502*t93520*t93503*3.0;
                double t93537 = t93534+t93535+t93536;
                double t93538 = 1.0/(t93526*t93526);
                double t93539 = gx*t93470*2.0;
                double t93540 = gamma_aa[index]*t93501*t93520*2.0;
                double t93541 = t93540+t93539;
                double t93542 = 1.0/(t93529*t93529);
                v_gamma_aa_[index] = (rho_a[index]*t93499+rho_b[index]*(t93440-t93422*t93419*(t93440-c0f*log((t93423* \
                   (1.0/2.0))/(b1f*t93426+b3f*t93427+b2f*c*t93424+b4f*t93403*t93428)+1.0)*(a1f*c*t93424+1.0)*2.0))-t93441* \
                   (t93458-t93422*t93463*t93464*t93469*(t93458-c0f*log((t93423*(1.0/2.0))/(b1f*t93444+b3f*t93445+b2f* \
                   c*t93442+b4f*t93403*t93446)+1.0)*(a1f*c*t93442+1.0)*2.0)+(Aa*t93422*t93469*log((1.0/2.0)/(Aa*(b1a* \
                   t93444+b3a*t93445+b2a*c*t93442+b4a*t93403*t93446))+1.0)*(t93463*t93464-1.0)*(a1a*c*t93442+1.0)*2.0) \
                   /d2fz0))*((ccab1*gcab*t93470*(1.0/2.0))/t93476-ccab2*1.0/(t93481*t93481)*t93477*t93478*(gcab*t93470+ \
                   t93470*t93474*t93477)+(ccab2*t93470*t93474*t93477)/t93481-ccab1*t93470*t93474*1.0/(t93476*t93476)* \
                   t93477*(1.0/2.0)+(ccab3*gcab*t93470*t93477*t93478*(3.0/2.0))/t93485-ccab3*gcab*t93474*1.0/(t93485* \
                   t93485)*t93477*t93478*(gcab*t93470*(3.0/2.0)+t93470*t93474*t93477*3.0+gcab*t93470*t93477*t93478*(3.0/ \
                   2.0)))-rho_a[index]*t93499*((ccaa1*gcaa*t93470)/t93505+(ccaa2*gamma_aa[index]*t93500*t93501*2.0)/t93512- \
                   ccaa1*gamma_aa[index]*t93500*t93501*1.0/(t93505*t93505)-ccaa2*t93500*t93501*t93502*1.0/(t93512*t93512) \
                   *(gcaa*t93470*2.0+gamma_aa[index]*t93500*t93501*2.0)+(ccaa3*gcaa*t93500*t93502*t93503*3.0)/t93509- \
                   ccaa3*gamma_aa[index]*gcaa*t93500*t93502*t93503*1.0/(t93509*t93509)*(gcaa*t93470*3.0+gamma_aa[index]* \
                   t93500*t93501*6.0+gcaa*t93500*t93502*t93503*3.0))-c0*pow(rho_a[index],4.0/3.0)*(X-1.0)*((t93516/t93518- \
                   t93516*t93517*1.0/(t93518*t93518*t93518)*2.0+t93516*1.0/(t93518*t93518*t93518*t93518*t93518)*t93519) \
                   *(cxnl1*gx*t93530*t93470+cxnl2*gamma_aa[index]*t93501*t93520*t93531*2.0-cxnl1*gamma_aa[index]*t93501* \
                   t93520*t93533-cxnl2*t93501*t93502*t93520*t93541*t93542+cxnl3*gx*t93502*t93520*t93503*t93532*3.0-cxnl3* \
                   gamma_aa[index]*gx*t93502*t93520*t93503*t93537*t93538)+cx1*gx*t93530*t93470-cx1*gamma_aa[index]*t93501* \
                   t93520*t93533+cx2*gamma_aa[index]*t93501*t93520*t93531*2.0-cx2*t93501*t93502*t93520*t93541*t93542+ \
                   cx3*gx*t93502*t93520*t93503*t93532*3.0-cx3*gamma_aa[index]*gx*t93502*t93520*t93503*t93537*t93538);
            } else if (rho_a[index] > cutoff_) {
                double t97262 = 1.0/pow(rho_a[index],1.0/3.0);
                double t97263 = c*t97262;
                double t97264 = sqrt(t97263);
                double t97265 = pow(t97263,3.0/2.0);
                double t97266 = c*c;
                double t97267 = 1.0/pow(rho_a[index],2.0/3.0);
                double t97268 = 1.0/c0p;
                double t97269 = b1p*t97264;
                double t97270 = b3p*t97265;
                double t97271 = b4p*t97266*t97267;
                double t97272 = b2p*c*t97262;
                double t97273 = t97270+t97271+t97272+t97269;
                double t97274 = 1.0/t97273;
                double t97275 = t97274*t97268*(1.0/2.0);
                double t97276 = t97275+1.0;
                double t97277 = log(t97276);
                double t97278 = a1p*c*t97262;
                double t97279 = t97278+1.0;
                double t97280 = 1.0/pow(rho_a[index],8.0/3.0);
                double t97281 = gcaa*gcaa;
                double t97282 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t97283 = gamma_aa[index]*gamma_aa[index];
                double t97284 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t97285 = gamma_aa[index]*gcaa*t97280;
                double t97286 = t97285+1.0;
                double t97287 = gamma_aa[index]*gcaa*t97280*3.0;
                double t97288 = gamma_aa[index]*gcaa*t97281*t97283*t97284;
                double t97289 = t97281*t97282*t97283*3.0;
                double t97290 = t97287+t97288+t97289+1.0;
                double t97291 = gamma_aa[index]*gcaa*t97280*2.0;
                double t97292 = t97281*t97282*t97283;
                double t97293 = t97291+t97292+1.0;
                double t97294 = pow(rho_a[index],5.0/3.0);
                double t97295 = 1.0/tau_a[index];
                double t97296 = C_k*t97294*t97295;
                double t97297 = t97296-1.0;
                double t97298 = t97297*t97297;
                double t97299 = t97296+1.0;
                double t97300 = t97298*t97298;
                double t97301 = gx*gx;
                double t97302 = gamma_aa[index]*gx*t97280;
                double t97303 = t97302+1.0;
                double t97304 = gamma_aa[index]*gx*t97280*3.0;
                double t97305 = gamma_aa[index]*gx*t97301*t97283*t97284;
                double t97306 = t97301*t97282*t97283*3.0;
                double t97307 = t97304+t97305+t97306+1.0;
                double t97308 = gamma_aa[index]*gx*t97280*2.0;
                double t97309 = t97301*t97282*t97283;
                double t97310 = t97308+t97309+1.0;
                double t97311 = 1.0/t97303;
                double t97312 = 1.0/t97310;
                double t97313 = 1.0/t97307;
                double t97314 = 1.0/(t97303*t97303);
                double t97315 = gx*t97280*3.0;
                double t97316 = gamma_aa[index]*t97301*t97282*6.0;
                double t97317 = gx*t97301*t97283*t97284*3.0;
                double t97318 = t97315+t97316+t97317;
                double t97319 = 1.0/(t97307*t97307);
                double t97320 = gx*t97280*2.0;
                double t97321 = gamma_aa[index]*t97301*t97282*2.0;
                double t97322 = t97320+t97321;
                double t97323 = 1.0/(t97310*t97310);
                v_gamma_aa_[index] = -rho_a[index]*(((pow(2.0,1.0/3.0)*2.0-2.0)*(c0f*log((1.0/2.0)/(c0f*(b1f*t97264+ \
                   b3f*t97265+b2f*c*t97262+b4f*t97266*t97267))+1.0)*(a1f*c*t97262+1.0)*2.0-c0p*t97277*t97279*2.0))/(two_13* \
                   2.0-2.0)+c0p*t97277*t97279*2.0)*((ccaa1*gcaa*t97280)/t97286+(ccaa2*gamma_aa[index]*t97281*t97282*2.0) \
                   /t97293-ccaa1*gamma_aa[index]*t97281*t97282*1.0/(t97286*t97286)-ccaa2*t97281*t97282*t97283*1.0/(t97293* \
                   t97293)*(gcaa*t97280*2.0+gamma_aa[index]*t97281*t97282*2.0)+(ccaa3*gcaa*t97281*t97283*t97284*3.0)/ \
                   t97290-ccaa3*gamma_aa[index]*gcaa*t97281*1.0/(t97290*t97290)*t97283*t97284*(gcaa*t97280*3.0+gamma_aa[index]* \
                   t97281*t97282*6.0+gcaa*t97281*t97283*t97284*3.0))-c0*pow(rho_a[index],4.0/3.0)*(X-1.0)*((t97297/t97299+ \
                   t97300*t97297*1.0/(t97299*t97299*t97299*t97299*t97299)-t97297*t97298*1.0/(t97299*t97299*t97299)*2.0) \
                   *(cxnl1*gx*t97311*t97280+cxnl2*gamma_aa[index]*t97301*t97312*t97282*2.0-cxnl1*gamma_aa[index]*t97301* \
                   t97314*t97282-cxnl2*t97301*t97322*t97323*t97282*t97283+cxnl3*gx*t97301*t97313*t97283*t97284*3.0-cxnl3* \
                   gamma_aa[index]*gx*t97301*t97318*t97283*t97319*t97284)+cx1*gx*t97311*t97280-cx1*gamma_aa[index]*t97301* \
                   t97314*t97282+cx2*gamma_aa[index]*t97301*t97312*t97282*2.0-cx2*t97301*t97322*t97323*t97282*t97283+ \
                   cx3*gx*t97301*t97313*t97283*t97284*3.0-cx3*gamma_aa[index]*gx*t97301*t97318*t97283*t97319*t97284);
            } else if (rho_b[index] > cutoff_) {
                v_gamma_aa_[index] = 0.0;
            } else {
                v_gamma_aa_[index] = 0.0;
            }

            //V_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_ab_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_ab_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_ab_[index] = 0.0;
            } else {
                v_gamma_ab_[index] = 0.0;
            }

            //V_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t93545 = 1.0/pow(rho_a[index],1.0/3.0);
                double t93546 = c*t93545;
                double t93547 = sqrt(t93546);
                double t93548 = pow(t93546,3.0/2.0);
                double t93549 = c*c;
                double t93550 = 1.0/pow(rho_a[index],2.0/3.0);
                double t93551 = 1.0/c0p;
                double t93552 = b1p*t93547;
                double t93553 = b3p*t93548;
                double t93554 = b4p*t93550*t93549;
                double t93555 = b2p*c*t93545;
                double t93556 = t93552+t93553+t93554+t93555;
                double t93557 = 1.0/t93556;
                double t93558 = t93551*t93557*(1.0/2.0);
                double t93559 = t93558+1.0;
                double t93560 = log(t93559);
                double t93561 = a1p*c*t93545;
                double t93562 = t93561+1.0;
                double t93563 = pow(2.0,1.0/3.0);
                double t93564 = t93563*2.0;
                double t93565 = t93564-2.0;
                double t93566 = two_13*2.0;
                double t93567 = t93566-2.0;
                double t93568 = 1.0/t93567;
                double t93569 = 1.0/c0f;
                double t93570 = 1.0/pow(rho_b[index],1.0/3.0);
                double t93571 = c*t93570;
                double t93572 = sqrt(t93571);
                double t93573 = pow(t93571,3.0/2.0);
                double t93574 = 1.0/pow(rho_b[index],2.0/3.0);
                double t93575 = b1p*t93572;
                double t93576 = b3p*t93573;
                double t93577 = b4p*t93574*t93549;
                double t93578 = b2p*c*t93570;
                double t93579 = t93575+t93576+t93577+t93578;
                double t93580 = 1.0/t93579;
                double t93581 = t93551*t93580*(1.0/2.0);
                double t93582 = t93581+1.0;
                double t93583 = log(t93582);
                double t93584 = a1p*c*t93570;
                double t93585 = t93584+1.0;
                double t93586 = c0p*t93583*t93585*2.0;
                double t93587 = rho_a[index]+rho_b[index];
                double t93588 = 1.0/pow(t93587,1.0/3.0);
                double t93589 = c*t93588;
                double t93590 = sqrt(t93589);
                double t93591 = pow(t93589,3.0/2.0);
                double t93592 = 1.0/pow(t93587,2.0/3.0);
                double t93593 = b1p*t93590;
                double t93594 = b3p*t93591;
                double t93595 = b4p*t93592*t93549;
                double t93596 = b2p*c*t93588;
                double t93597 = t93593+t93594+t93595+t93596;
                double t93598 = 1.0/t93597;
                double t93599 = t93551*t93598*(1.0/2.0);
                double t93600 = t93599+1.0;
                double t93601 = log(t93600);
                double t93602 = a1p*c*t93588;
                double t93603 = t93602+1.0;
                double t93604 = c0p*t93601*t93603*2.0;
                double t93605 = rho_a[index]-rho_b[index];
                double t93606 = t93605*t93605;
                double t93607 = 1.0/t93587;
                double t93608 = t93605*t93607;
                double t93609 = 1.0/(t93587*t93587*t93587*t93587);
                double t93610 = t93606*t93606;
                double t93611 = t93608+1.0;
                double t93612 = pow(t93611,4.0/3.0);
                double t93613 = -t93608+1.0;
                double t93614 = pow(t93613,4.0/3.0);
                double t93615 = t93612+t93614-2.0;
                double t93616 = 1.0/pow(rho_b[index],8.0/3.0);
                double t93617 = 1.0/pow(rho_a[index],8.0/3.0);
                double t93618 = gamma_aa[index]*t93617*(1.0/2.0);
                double t93619 = gamma_bb[index]*t93616*(1.0/2.0);
                double t93620 = t93618+t93619;
                double t93621 = gcab*t93620;
                double t93622 = t93621+1.0;
                double t93623 = gcab*gcab;
                double t93624 = t93620*t93620;
                double t93625 = t93623*t93624;
                double t93626 = gcab*t93620*2.0;
                double t93627 = t93625+t93626+1.0;
                double t93628 = t93623*t93624*3.0;
                double t93629 = gcab*t93620*t93623*t93624;
                double t93630 = gcab*t93620*3.0;
                double t93631 = t93630+t93628+t93629+1.0;
                double t93632 = c0p*t93560*t93562*2.0;
                double t93633 = b1f*t93572;
                double t93634 = b3f*t93573;
                double t93635 = b4f*t93574*t93549;
                double t93636 = b2f*c*t93570;
                double t93637 = t93633+t93634+t93635+t93636;
                double t93638 = 1.0/t93637;
                double t93639 = t93638*t93569*(1.0/2.0);
                double t93640 = t93639+1.0;
                double t93641 = log(t93640);
                double t93642 = a1f*c*t93570;
                double t93643 = t93642+1.0;
                double t93644 = t93586-c0f*t93641*t93643*2.0;
                double t93645 = t93586-t93644*t93565*t93568;
                double t93646 = gcaa*gcaa;
                double t93647 = 1.0/pow(rho_b[index],1.6E1/3.0);
                double t93648 = gamma_bb[index]*gamma_bb[index];
                double t93649 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]);
                double t93650 = gamma_bb[index]*gcaa*t93616;
                double t93651 = t93650+1.0;
                double t93652 = gamma_bb[index]*gcaa*t93616*3.0;
                double t93653 = gamma_bb[index]*gcaa*t93646*t93648*t93649;
                double t93654 = t93646*t93647*t93648*3.0;
                double t93655 = t93652+t93653+t93654+1.0;
                double t93656 = gamma_bb[index]*gcaa*t93616*2.0;
                double t93657 = t93646*t93647*t93648;
                double t93658 = t93656+t93657+1.0;
                double t93659 = pow(rho_b[index],5.0/3.0);
                double t93660 = 1.0/tau_b[index];
                double t93661 = C_k*t93660*t93659;
                double t93662 = t93661-1.0;
                double t93663 = t93662*t93662;
                double t93664 = t93661+1.0;
                double t93665 = t93663*t93663;
                double t93666 = gx*gx;
                double t93667 = gamma_bb[index]*gx*t93616;
                double t93668 = t93667+1.0;
                double t93669 = gamma_bb[index]*gx*t93616*3.0;
                double t93670 = gamma_bb[index]*gx*t93648*t93666*t93649;
                double t93671 = t93647*t93648*t93666*3.0;
                double t93672 = t93670+t93671+t93669+1.0;
                double t93673 = gamma_bb[index]*gx*t93616*2.0;
                double t93674 = t93647*t93648*t93666;
                double t93675 = t93673+t93674+1.0;
                double t93676 = 1.0/t93668;
                double t93677 = 1.0/t93675;
                double t93678 = 1.0/t93672;
                double t93679 = 1.0/(t93668*t93668);
                double t93680 = gx*t93616*3.0;
                double t93681 = gamma_bb[index]*t93647*t93666*6.0;
                double t93682 = gx*t93648*t93666*t93649*3.0;
                double t93683 = t93680+t93681+t93682;
                double t93684 = 1.0/(t93672*t93672);
                double t93685 = gx*t93616*2.0;
                double t93686 = gamma_bb[index]*t93647*t93666*2.0;
                double t93687 = t93685+t93686;
                double t93688 = 1.0/(t93675*t93675);
                v_gamma_bb_[index] = (rho_b[index]*t93645+rho_a[index]*(t93632-t93565*t93568*(t93632-c0f*log((t93569* \
                   (1.0/2.0))/(b1f*t93547+b3f*t93548+b2f*c*t93545+b4f*t93550*t93549)+1.0)*(a1f*c*t93545+1.0)*2.0))-t93587* \
                   (t93604-t93610*t93615*t93609*t93568*(t93604-c0f*log((t93569*(1.0/2.0))/(b1f*t93590+b3f*t93591+b2f* \
                   c*t93588+b4f*t93592*t93549)+1.0)*(a1f*c*t93588+1.0)*2.0)+(Aa*t93615*t93568*log((1.0/2.0)/(Aa*(b1a* \
                   t93590+b3a*t93591+b2a*c*t93588+b4a*t93592*t93549))+1.0)*(t93610*t93609-1.0)*(a1a*c*t93588+1.0)*2.0) \
                   /d2fz0))*((ccab1*gcab*t93616*(1.0/2.0))/t93622-ccab2*t93623*t93624*1.0/(t93627*t93627)*(gcab*t93616+ \
                   t93620*t93623*t93616)-ccab1*t93620*1.0/(t93622*t93622)*t93623*t93616*(1.0/2.0)+(ccab2*t93620*t93623* \
                   t93616)/t93627+(ccab3*gcab*t93623*t93624*t93616*(3.0/2.0))/t93631-ccab3*gcab*t93620*1.0/(t93631*t93631) \
                   *t93623*t93624*(gcab*t93616*(3.0/2.0)+t93620*t93623*t93616*3.0+gcab*t93623*t93624*t93616*(3.0/2.0) \
                   ))-rho_b[index]*t93645*((ccaa1*gcaa*t93616)/t93651-ccaa1*gamma_bb[index]*1.0/(t93651*t93651)*t93646* \
                   t93647+(ccaa2*gamma_bb[index]*t93646*t93647*2.0)/t93658-ccaa2*t93646*t93647*t93648*1.0/(t93658*t93658) \
                   *(gcaa*t93616*2.0+gamma_bb[index]*t93646*t93647*2.0)+(ccaa3*gcaa*t93646*t93648*t93649*3.0)/t93655- \
                   ccaa3*gamma_bb[index]*gcaa*t93646*1.0/(t93655*t93655)*t93648*t93649*(gcaa*t93616*3.0+gamma_bb[index]* \
                   t93646*t93647*6.0+gcaa*t93646*t93648*t93649*3.0))-c0*pow(rho_b[index],4.0/3.0)*(X-1.0)*((t93662/t93664- \
                   t93662*t93663*1.0/(t93664*t93664*t93664)*2.0+t93662*1.0/(t93664*t93664*t93664*t93664*t93664)*t93665) \
                   *(cxnl1*gx*t93616*t93676+cxnl2*gamma_bb[index]*t93647*t93666*t93677*2.0-cxnl1*gamma_bb[index]*t93647* \
                   t93666*t93679-cxnl2*t93647*t93648*t93666*t93687*t93688+cxnl3*gx*t93648*t93666*t93649*t93678*3.0-cxnl3* \
                   gamma_bb[index]*gx*t93683*t93648*t93666*t93684*t93649)+cx1*gx*t93616*t93676-cx1*gamma_bb[index]*t93647* \
                   t93666*t93679+cx2*gamma_bb[index]*t93647*t93666*t93677*2.0-cx2*t93647*t93648*t93666*t93687*t93688+ \
                   cx3*gx*t93648*t93666*t93649*t93678*3.0-cx3*gamma_bb[index]*gx*t93683*t93648*t93666*t93684*t93649);
            } else if (rho_a[index] > cutoff_) {
                v_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                double t96493 = 1.0/pow(rho_b[index],1.0/3.0);
                double t96494 = c*t96493;
                double t96495 = sqrt(t96494);
                double t96496 = pow(t96494,3.0/2.0);
                double t96497 = c*c;
                double t96498 = 1.0/pow(rho_b[index],2.0/3.0);
                double t96499 = 1.0/c0p;
                double t96500 = b1p*t96495;
                double t96501 = b3p*t96496;
                double t96502 = b4p*t96497*t96498;
                double t96503 = b2p*c*t96493;
                double t96504 = t96500+t96501+t96502+t96503;
                double t96505 = 1.0/t96504;
                double t96506 = t96505*t96499*(1.0/2.0);
                double t96507 = t96506+1.0;
                double t96508 = log(t96507);
                double t96509 = a1p*c*t96493;
                double t96510 = t96509+1.0;
                double t96511 = 1.0/pow(rho_b[index],8.0/3.0);
                double t96512 = gcaa*gcaa;
                double t96513 = 1.0/pow(rho_b[index],1.6E1/3.0);
                double t96514 = gamma_bb[index]*gamma_bb[index];
                double t96515 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]);
                double t96516 = gamma_bb[index]*gcaa*t96511;
                double t96517 = t96516+1.0;
                double t96518 = gamma_bb[index]*gcaa*t96511*3.0;
                double t96519 = gamma_bb[index]*gcaa*t96512*t96514*t96515;
                double t96520 = t96512*t96513*t96514*3.0;
                double t96521 = t96520+t96518+t96519+1.0;
                double t96522 = gamma_bb[index]*gcaa*t96511*2.0;
                double t96523 = t96512*t96513*t96514;
                double t96524 = t96522+t96523+1.0;
                double t96525 = pow(rho_b[index],5.0/3.0);
                double t96526 = 1.0/tau_b[index];
                double t96527 = C_k*t96525*t96526;
                double t96528 = t96527-1.0;
                double t96529 = t96528*t96528;
                double t96530 = t96527+1.0;
                double t96531 = t96529*t96529;
                double t96532 = gx*gx;
                double t96533 = gamma_bb[index]*gx*t96511;
                double t96534 = t96533+1.0;
                double t96535 = gamma_bb[index]*gx*t96511*3.0;
                double t96536 = gamma_bb[index]*gx*t96514*t96532*t96515;
                double t96537 = t96513*t96514*t96532*3.0;
                double t96538 = t96535+t96536+t96537+1.0;
                double t96539 = gamma_bb[index]*gx*t96511*2.0;
                double t96540 = t96513*t96514*t96532;
                double t96541 = t96540+t96539+1.0;
                double t96542 = 1.0/t96534;
                double t96543 = 1.0/t96541;
                double t96544 = 1.0/t96538;
                double t96545 = 1.0/(t96534*t96534);
                double t96546 = gx*t96511*3.0;
                double t96547 = gamma_bb[index]*t96513*t96532*6.0;
                double t96548 = gx*t96514*t96532*t96515*3.0;
                double t96549 = t96546+t96547+t96548;
                double t96550 = 1.0/(t96538*t96538);
                double t96551 = gx*t96511*2.0;
                double t96552 = gamma_bb[index]*t96513*t96532*2.0;
                double t96553 = t96551+t96552;
                double t96554 = 1.0/(t96541*t96541);
                v_gamma_bb_[index] = -rho_b[index]*(((pow(2.0,1.0/3.0)*2.0-2.0)*(c0f*log((1.0/2.0)/(c0f*(b1f*t96495+ \
                   b3f*t96496+b2f*c*t96493+b4f*t96497*t96498))+1.0)*(a1f*c*t96493+1.0)*2.0-c0p*t96510*t96508*2.0))/(two_13* \
                   2.0-2.0)+c0p*t96510*t96508*2.0)*((ccaa1*gcaa*t96511)/t96517+(ccaa2*gamma_bb[index]*t96512*t96513*2.0) \
                   /t96524-ccaa1*gamma_bb[index]*t96512*t96513*1.0/(t96517*t96517)-ccaa2*t96512*t96513*t96514*1.0/(t96524* \
                   t96524)*(gcaa*t96511*2.0+gamma_bb[index]*t96512*t96513*2.0)+(ccaa3*gcaa*t96512*t96514*t96515*3.0)/ \
                   t96521-ccaa3*gamma_bb[index]*gcaa*t96512*1.0/(t96521*t96521)*t96514*t96515*(gcaa*t96511*3.0+gamma_bb[index]* \
                   t96512*t96513*6.0+gcaa*t96512*t96514*t96515*3.0))-c0*pow(rho_b[index],4.0/3.0)*(X-1.0)*((t96528/t96530+ \
                   1.0/(t96530*t96530*t96530*t96530*t96530)*t96531*t96528-1.0/(t96530*t96530*t96530)*t96528*t96529*2.0) \
                   *(cxnl1*gx*t96511*t96542+cxnl2*gamma_bb[index]*t96513*t96532*t96543*2.0-cxnl1*gamma_bb[index]*t96513* \
                   t96532*t96545-cxnl2*t96513*t96514*t96532*t96553*t96554+cxnl3*gx*t96514*t96532*t96515*t96544*3.0-cxnl3* \
                   gamma_bb[index]*gx*t96514*t96532*t96550*t96515*t96549)+cx1*gx*t96511*t96542-cx1*gamma_bb[index]*t96513* \
                   t96532*t96545+cx2*gamma_bb[index]*t96513*t96532*t96543*2.0-cx2*t96513*t96514*t96532*t96553*t96554+ \
                   cx3*gx*t96514*t96532*t96515*t96544*3.0-cx3*gamma_bb[index]*gx*t96514*t96532*t96550*t96515*t96549);
            } else {
                v_gamma_bb_[index] = 0.0;
            }
        }
        if (is_meta_) {

            //V_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t93690 = 1.0/pow(rho_a[index],8.0/3.0);
                double t93691 = gamma_aa[index]*gamma_aa[index];
                double t93692 = gx*gx;
                double t93693 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t93694 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t93695 = pow(rho_a[index],5.0/3.0);
                double t93696 = 1.0/(tau_a[index]*tau_a[index]);
                double t93697 = 1.0/tau_a[index];
                double t93698 = C_k*t93695*t93697;
                double t93699 = t93698-1.0;
                double t93700 = t93698+1.0;
                double t93701 = t93699*t93699;
                double t93702 = t93701*t93701;
                v_tau_a_[index] = c0*pow(rho_a[index],4.0/3.0)*(X-1.0)*(cxnl0+(cxnl2*t93691*t93692*t93694)/(gamma_aa[index]* \
                   gx*t93690*2.0+t93691*t93692*t93694+1.0)+(cxnl1*gamma_aa[index]*gx*t93690)/(gamma_aa[index]*gx*t93690+ \
                   1.0)+(cxnl3*gamma_aa[index]*gx*t93691*t93692*t93693)/(gamma_aa[index]*gx*t93690*3.0+t93691*t93692* \
                   t93694*3.0+gamma_aa[index]*gx*t93691*t93692*t93693+1.0))*((C_k*t93695*t93696)/t93700-C_k*1.0/(t93700* \
                   t93700*t93700)*t93701*t93695*t93696*6.0+C_k*1.0/(t93700*t93700*t93700*t93700*t93700)*t93702*t93695* \
                   t93696*5.0-C_k*1.0/(t93700*t93700)*t93695*t93696*t93699+C_k*1.0/(t93700*t93700*t93700*t93700)*t93701* \
                   t93695*t93696*t93699*6.0-C_k*1.0/(t93700*t93700*t93700*t93700*t93700*t93700)*t93702*t93695*t93696* \
                   t93699*5.0);
            } else if (rho_a[index] > cutoff_) {
                double t97327 = 1.0/pow(rho_a[index],8.0/3.0);
                double t97328 = gamma_aa[index]*gamma_aa[index];
                double t97329 = gx*gx;
                double t97330 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t97331 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t97332 = pow(rho_a[index],5.0/3.0);
                double t97333 = 1.0/(tau_a[index]*tau_a[index]);
                double t97334 = 1.0/tau_a[index];
                double t97335 = C_k*t97332*t97334;
                double t97336 = t97335-1.0;
                double t97337 = t97335+1.0;
                double t97338 = t97336*t97336;
                double t97339 = t97338*t97338;
                v_tau_a_[index] = c0*pow(rho_a[index],4.0/3.0)*(X-1.0)*(cxnl0+(cxnl2*t97331*t97328*t97329)/(gamma_aa[index]* \
                   gx*t97327*2.0+t97331*t97328*t97329+1.0)+(cxnl1*gamma_aa[index]*gx*t97327)/(gamma_aa[index]*gx*t97327+ \
                   1.0)+(cxnl3*gamma_aa[index]*gx*t97330*t97328*t97329)/(gamma_aa[index]*gx*t97327*3.0+t97331*t97328* \
                   t97329*3.0+gamma_aa[index]*gx*t97330*t97328*t97329+1.0))*((C_k*t97332*t97333)/t97337-C_k*t97332*t97333* \
                   t97336*1.0/(t97337*t97337)-C_k*t97332*t97333*1.0/(t97337*t97337*t97337)*t97338*6.0+C_k*t97332*t97333* \
                   1.0/(t97337*t97337*t97337*t97337*t97337)*t97339*5.0+C_k*t97332*t97333*t97336*1.0/(t97337*t97337*t97337* \
                   t97337)*t97338*6.0-C_k*t97332*t97333*t97336*1.0/(t97337*t97337*t97337*t97337*t97337*t97337)*t97339* \
                   5.0);
            } else if (rho_b[index] > cutoff_) {
                v_tau_a_[index] = 0.0;
            } else {
                v_tau_a_[index] = 0.0;
            }

            //V_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t93704 = 1.0/pow(rho_b[index],8.0/3.0);
                double t93705 = gamma_bb[index]*gamma_bb[index];
                double t93706 = gx*gx;
                double t93707 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]);
                double t93708 = 1.0/pow(rho_b[index],1.6E1/3.0);
                double t93709 = pow(rho_b[index],5.0/3.0);
                double t93710 = 1.0/(tau_b[index]*tau_b[index]);
                double t93711 = 1.0/tau_b[index];
                double t93712 = C_k*t93711*t93709;
                double t93713 = t93712-1.0;
                double t93714 = t93712+1.0;
                double t93715 = t93713*t93713;
                double t93716 = t93715*t93715;
                v_tau_b_[index] = c0*pow(rho_b[index],4.0/3.0)*(X-1.0)*(cxnl0+(cxnl2*t93705*t93706*t93708)/(gamma_bb[index]* \
                   gx*t93704*2.0+t93705*t93706*t93708+1.0)+(cxnl1*gamma_bb[index]*gx*t93704)/(gamma_bb[index]*gx*t93704+ \
                   1.0)+(cxnl3*gamma_bb[index]*gx*t93705*t93706*t93707)/(gamma_bb[index]*gx*t93704*3.0+t93705*t93706* \
                   t93708*3.0+gamma_bb[index]*gx*t93705*t93706*t93707+1.0))*((C_k*t93710*t93709)/t93714-C_k*t93710*t93713* \
                   1.0/(t93714*t93714)*t93709-C_k*t93710*1.0/(t93714*t93714*t93714)*t93715*t93709*6.0+C_k*t93710*1.0/ \
                   (t93714*t93714*t93714*t93714*t93714)*t93716*t93709*5.0+C_k*t93710*t93713*1.0/(t93714*t93714*t93714* \
                   t93714)*t93715*t93709*6.0-C_k*t93710*t93713*1.0/(t93714*t93714*t93714*t93714*t93714*t93714)*t93716* \
                   t93709*5.0);
            } else if (rho_a[index] > cutoff_) {
                v_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                double t96557 = 1.0/pow(rho_b[index],8.0/3.0);
                double t96558 = gamma_bb[index]*gamma_bb[index];
                double t96559 = gx*gx;
                double t96560 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]);
                double t96561 = 1.0/pow(rho_b[index],1.6E1/3.0);
                double t96562 = pow(rho_b[index],5.0/3.0);
                double t96563 = 1.0/(tau_b[index]*tau_b[index]);
                double t96564 = 1.0/tau_b[index];
                double t96565 = C_k*t96562*t96564;
                double t96566 = t96565-1.0;
                double t96567 = t96565+1.0;
                double t96568 = t96566*t96566;
                double t96569 = t96568*t96568;
                v_tau_b_[index] = c0*pow(rho_b[index],4.0/3.0)*(X-1.0)*(cxnl0+(cxnl2*t96561*t96558*t96559)/(gamma_bb[index]* \
                   gx*t96557*2.0+t96561*t96558*t96559+1.0)+(cxnl1*gamma_bb[index]*gx*t96557)/(gamma_bb[index]*gx*t96557+ \
                   1.0)+(cxnl3*gamma_bb[index]*gx*t96560*t96558*t96559)/(gamma_bb[index]*gx*t96557*3.0+t96561*t96558* \
                   t96559*3.0+gamma_bb[index]*gx*t96560*t96558*t96559+1.0))*((C_k*t96562*t96563)/t96567-C_k*t96562*t96563* \
                   t96566*1.0/(t96567*t96567)-C_k*t96562*t96563*1.0/(t96567*t96567*t96567)*t96568*6.0+C_k*t96562*t96563* \
                   1.0/(t96567*t96567*t96567*t96567*t96567)*t96569*5.0+C_k*t96562*t96563*t96566*1.0/(t96567*t96567*t96567* \
                   t96567)*t96568*6.0-C_k*t96562*t96563*t96566*1.0/(t96567*t96567*t96567*t96567*t96567*t96567)*t96569* \
                   5.0);
            } else {
                v_tau_b_[index] = 0.0;
            }
        }
    }
    //Second Partials
    for (int index = 0; index < ntrue && deriv_ >= 2; index++) {

        //V_rho_a_rho_a
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t93718 = gcab*gcab;
            double t93722 = 1.0/pow(rho_a[index],8.0/3.0);
            double t93723 = gamma_aa[index]*t93722*(1.0/2.0);
            double t93724 = 1.0/pow(rho_b[index],8.0/3.0);
            double t93725 = gamma_bb[index]*t93724*(1.0/2.0);
            double t93719 = t93723+t93725;
            double t93720 = t93719*t93719;
            double t93721 = 1.0/pow(rho_a[index],1.1E1/3.0);
            double t93726 = gcab*t93719;
            double t93727 = t93726+1.0;
            double t93728 = t93720*t93718;
            double t93729 = gcab*t93719*2.0;
            double t93730 = t93728+t93729+1.0;
            double t93731 = t93720*t93718*3.0;
            double t93732 = gcab*t93720*t93718*t93719;
            double t93733 = gcab*t93719*3.0;
            double t93734 = t93731+t93732+t93733+1.0;
            double t93735 = rho_a[index]+rho_b[index];
            double t93736 = 1.0/pow(t93735,1.0/3.0);
            double t93737 = c*t93736;
            double t93738 = sqrt(t93737);
            double t93739 = b1p*t93738;
            double t93740 = pow(t93737,3.0/2.0);
            double t93741 = b3p*t93740;
            double t93742 = c*c;
            double t93743 = 1.0/pow(t93735,2.0/3.0);
            double t93744 = b4p*t93742*t93743;
            double t93745 = b2p*c*t93736;
            double t93746 = t93741+t93744+t93745+t93739;
            double t93747 = 1.0/pow(t93735,4.0/3.0);
            double t93748 = 1.0/c0p;
            double t93749 = 1.0/t93746;
            double t93750 = t93748*t93749*(1.0/2.0);
            double t93751 = t93750+1.0;
            double t93752 = a1p*c*t93736;
            double t93753 = t93752+1.0;
            double t93754 = rho_a[index]-rho_b[index];
            double t93755 = t93754*t93754;
            double t93756 = 1.0/t93735;
            double t93757 = t93754*t93756;
            double t93758 = two_13*2.0;
            double t93759 = t93758-2.0;
            double t93760 = 1.0/t93759;
            double t93761 = 1.0/c0f;
            double t93762 = b1f*t93738;
            double t93763 = b3f*t93740;
            double t93764 = b4f*t93742*t93743;
            double t93765 = b2f*c*t93736;
            double t93766 = t93762+t93763+t93764+t93765;
            double t93767 = 1.0/t93766;
            double t93768 = t93761*t93767*(1.0/2.0);
            double t93769 = t93768+1.0;
            double t93770 = log(t93769);
            double t93771 = a1f*c*t93736;
            double t93772 = t93771+1.0;
            double t93773 = log(t93751);
            double t93783 = c0f*t93770*t93772*2.0;
            double t93784 = c0p*t93753*t93773*2.0;
            double t93774 = t93783-t93784;
            double t93775 = t93757+1.0;
            double t93776 = pow(t93775,4.0/3.0);
            double t93777 = -t93757+1.0;
            double t93778 = pow(t93777,4.0/3.0);
            double t93779 = t93776+t93778-2.0;
            double t93780 = 1.0/(t93735*t93735);
            double t93811 = t93780*t93754;
            double t93781 = -t93811+t93756;
            double t93782 = 1.0/(t93735*t93735*t93735*t93735);
            double t93785 = t93755*t93755;
            double t93786 = 1.0/pow(t93735,5.0/3.0);
            double t93787 = 1.0/sqrt(t93737);
            double t93788 = 1.0/t93751;
            double t93789 = 1.0/(t93746*t93746);
            double t93790 = b4p*t93742*t93786*(2.0/3.0);
            double t93791 = b2p*c*t93747*(1.0/3.0);
            double t93792 = b1p*c*t93747*t93787*(1.0/6.0);
            double t93793 = b3p*c*t93738*t93747*(1.0/2.0);
            double t93794 = t93790+t93791+t93792+t93793;
            double t93795 = t93753*t93794*t93788*t93789;
            double t93796 = 1.0/(t93735*t93735*t93735*t93735*t93735);
            double t93797 = 1.0/d2fz0;
            double t93798 = 1.0/Aa;
            double t93799 = b1a*t93738;
            double t93800 = b3a*t93740;
            double t93801 = b4a*t93742*t93743;
            double t93802 = b2a*c*t93736;
            double t93803 = t93800+t93801+t93802+t93799;
            double t93804 = 1.0/t93803;
            double t93805 = t93804*t93798*(1.0/2.0);
            double t93806 = t93805+1.0;
            double t93807 = log(t93806);
            double t93808 = a1a*c*t93736;
            double t93809 = t93808+1.0;
            double t93810 = pow(t93775,1.0/3.0);
            double t93812 = t93810*t93781*(4.0/3.0);
            double t93813 = pow(t93777,1.0/3.0);
            double t93876 = t93813*t93781*(4.0/3.0);
            double t93814 = t93812-t93876;
            double t93815 = t93782*t93785;
            double t93816 = t93815-1.0;
            double t93817 = 1.0/pow(rho_a[index],1.0/3.0);
            double t93818 = c*t93817;
            double t93819 = sqrt(t93818);
            double t93820 = b1f*t93819;
            double t93821 = pow(t93818,3.0/2.0);
            double t93822 = b3f*t93821;
            double t93823 = 1.0/pow(rho_a[index],2.0/3.0);
            double t93824 = b4f*t93742*t93823;
            double t93825 = b2f*c*t93817;
            double t93826 = t93820+t93822+t93824+t93825;
            double t93827 = 1.0/pow(rho_a[index],4.0/3.0);
            double t93828 = b1p*t93819;
            double t93829 = b3p*t93821;
            double t93830 = b4p*t93742*t93823;
            double t93831 = b2p*c*t93817;
            double t93832 = t93830+t93831+t93828+t93829;
            double t93833 = 1.0/pow(rho_a[index],5.0/3.0);
            double t93834 = 1.0/sqrt(t93818);
            double t93835 = 1.0/t93826;
            double t93836 = t93761*t93835*(1.0/2.0);
            double t93837 = t93836+1.0;
            double t93838 = 1.0/t93832;
            double t93839 = t93748*t93838*(1.0/2.0);
            double t93840 = t93839+1.0;
            double t93841 = a1p*c*t93817;
            double t93842 = t93841+1.0;
            double t93843 = 1.0/t93840;
            double t93844 = 1.0/(t93832*t93832);
            double t93845 = b4p*t93742*t93833*(2.0/3.0);
            double t93846 = b2p*c*t93827*(1.0/3.0);
            double t93847 = b1p*c*t93834*t93827*(1.0/6.0);
            double t93848 = b3p*c*t93827*t93819*(1.0/2.0);
            double t93849 = t93845+t93846+t93847+t93848;
            double t93850 = t93842*t93843*t93844*t93849;
            double t93851 = log(t93840);
            double t93852 = pow(2.0,1.0/3.0);
            double t93853 = t93852*2.0;
            double t93854 = t93853-2.0;
            double t93855 = log(t93837);
            double t93856 = a1f*c*t93817;
            double t93857 = t93856+1.0;
            double t93858 = 1.0/t93837;
            double t93859 = 1.0/(t93826*t93826);
            double t93860 = b4f*t93742*t93833*(2.0/3.0);
            double t93861 = b2f*c*t93827*(1.0/3.0);
            double t93862 = b1f*c*t93834*t93827*(1.0/6.0);
            double t93863 = b3f*c*t93827*t93819*(1.0/2.0);
            double t93864 = t93860+t93861+t93862+t93863;
            double t93865 = a1f*c*c0f*t93827*t93855*(2.0/3.0);
            double t93866 = a1p*c*c0p*t93851*t93827*(2.0/3.0);
            double t93867 = gamma_aa[index]*gamma_aa[index];
            double t93868 = gcaa*gcaa;
            double t93869 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]);
            double t93870 = 1.0/pow(rho_a[index],1.6E1/3.0);
            double t93871 = 1.0/t93730;
            double t93872 = 1.0/t93734;
            double t93873 = 1.0/t93727;
            double t93874 = 1.0/pow(t93735,7.0/3.0);
            double t93875 = 1.0/pow(t93735,8.0/3.0);
            double t93877 = 1.0/t93769;
            double t93878 = 1.0/(t93766*t93766);
            double t93879 = b4f*t93742*t93786*(2.0/3.0);
            double t93880 = b2f*c*t93747*(1.0/3.0);
            double t93881 = b1f*c*t93747*t93787*(1.0/6.0);
            double t93882 = b3f*c*t93738*t93747*(1.0/2.0);
            double t93883 = t93880+t93881+t93882+t93879;
            double t93884 = a1f*c*c0f*t93770*t93747*(2.0/3.0);
            double t93886 = t93772*t93883*t93877*t93878;
            double t93887 = a1p*c*c0p*t93773*t93747*(2.0/3.0);
            double t93885 = t93884+t93795-t93886-t93887;
            double t93888 = t93794*t93794;
            double t93889 = 1.0/pow(t93737,3.0/2.0);
            double t93890 = b4p*t93742*t93875*(1.0E1/9.0);
            double t93891 = b2p*c*t93874*(4.0/9.0);
            double t93892 = b1p*c*t93874*t93787*(2.0/9.0);
            double t93893 = b3p*c*t93738*t93874*(2.0/3.0);
            double t93894 = b3p*t93742*t93875*t93787*(1.0/1.2E1);
            double t93895 = t93890+t93891+t93892+t93893+t93894-b1p*t93742*t93875*t93889*(1.0/3.6E1);
            double t93896 = 1.0/(t93746*t93746*t93746);
            double t93897 = t93753*t93788*t93896*t93888*2.0;
            double t93898 = t93883*t93883;
            double t93899 = 1.0/(t93751*t93751);
            double t93900 = 1.0/(t93746*t93746*t93746*t93746);
            double t93901 = t93780*2.0;
            double t93902 = 1.0/(t93735*t93735*t93735);
            double t93909 = t93902*t93754*2.0;
            double t93903 = t93901-t93909;
            double t93904 = t93781*t93781;
            double t93905 = a1p*c*c0p*t93773*t93874*(8.0/9.0);
            double t93906 = 1.0/(t93735*t93735*t93735*t93735*t93735*t93735);
            double t93907 = t93785*t93796*4.0;
            double t93917 = t93754*t93755*t93782*4.0;
            double t93908 = t93907-t93917;
            double t93910 = t93813*t93903*(4.0/3.0);
            double t93911 = 1.0/pow(t93775,2.0/3.0);
            double t93912 = t93911*t93904*(4.0/9.0);
            double t93913 = 1.0/pow(t93777,2.0/3.0);
            double t93914 = t93904*t93913*(4.0/9.0);
            double t93915 = t93910+t93912+t93914-t93810*t93903*(4.0/3.0);
            double t93916 = 1.0/t93806;
            double t93918 = 1.0/(t93803*t93803);
            double t93919 = b4a*t93742*t93786*(2.0/3.0);
            double t93920 = b2a*c*t93747*(1.0/3.0);
            double t93921 = b1a*c*t93747*t93787*(1.0/6.0);
            double t93922 = b3a*c*t93738*t93747*(1.0/2.0);
            double t93923 = t93920+t93921+t93922+t93919;
            double t93924 = t93923*t93923;
            double t93925 = t93753*t93895*t93788*t93789;
            double t93926 = 1.0/pow(rho_a[index],7.0/3.0);
            double t93927 = 1.0/pow(t93818,3.0/2.0);
            double t93928 = t93864*t93864;
            double t93929 = t93849*t93849;
            double t93930 = 1.0/(t93832*t93832*t93832);
            double t93931 = t93930*t93842*t93843*t93929*2.0;
            double t93932 = b4p*t93722*t93742*(1.0E1/9.0);
            double t93933 = b2p*c*t93926*(4.0/9.0);
            double t93934 = b3p*t93722*t93742*t93834*(1.0/1.2E1);
            double t93935 = b1p*c*t93834*t93926*(2.0/9.0);
            double t93936 = b3p*c*t93926*t93819*(2.0/3.0);
            double t94091 = b1p*t93722*t93742*t93927*(1.0/3.6E1);
            double t93937 = t93932+t93933+t93934+t93935+t93936-t94091;
            double t93938 = 1.0/(t93840*t93840);
            double t93939 = 1.0/(t93832*t93832*t93832*t93832);
            double t93940 = a1p*c*c0p*t93851*t93926*(8.0/9.0);
            double t93941 = t93900*t93753*t93748*t93888*t93899*(1.0/2.0);
            double t94072 = t93864*t93857*t93858*t93859;
            double t93942 = t93850+t93865-t93866-t94072;
            double t93943 = c0f*t93855*t93857*2.0;
            double t93945 = c0p*t93842*t93851*2.0;
            double t93944 = t93943-t93945;
            double t93946 = 1.0/pow(rho_b[index],1.0/3.0);
            double t93947 = c*t93946;
            double t93948 = sqrt(t93947);
            double t93949 = pow(t93947,3.0/2.0);
            double t93950 = 1.0/pow(rho_b[index],2.0/3.0);
            double t93951 = b1p*t93948;
            double t93952 = b3p*t93949;
            double t93953 = b4p*t93742*t93950;
            double t93954 = b2p*c*t93946;
            double t93955 = t93951+t93952+t93953+t93954;
            double t93956 = 1.0/t93955;
            double t93957 = t93748*t93956*(1.0/2.0);
            double t93958 = t93957+1.0;
            double t93959 = log(t93958);
            double t93960 = a1p*c*t93946;
            double t93961 = t93960+1.0;
            double t93962 = c0p*t93961*t93959*2.0;
            double t93963 = t93760*t93782*t93774*t93785*t93779;
            double t93964 = Aa*t93760*t93807*t93816*t93809*t93779*t93797*2.0;
            double t93965 = 1.0/(t93727*t93727);
            double t93966 = 1.0/pow(rho_a[index],2.2E1/3.0);
            double t93967 = gamma_aa[index]*gcab*t93721*(8.0/3.0);
            double t93968 = gamma_aa[index]*t93721*t93718*t93719*(8.0/3.0);
            double t93969 = t93967+t93968;
            double t93970 = 1.0/(t93734*t93734);
            double t93971 = 1.0/pow(rho_a[index],1.4E1/3.0);
            double t93972 = 1.0/(t93730*t93730);
            double t93973 = gamma_aa[index]*gcab*t93721*4.0;
            double t93974 = gamma_aa[index]*gcab*t93720*t93721*t93718*4.0;
            double t93975 = gamma_aa[index]*t93721*t93718*t93719*8.0;
            double t93976 = t93973+t93974+t93975;
            double t93977 = pow(rho_a[index],5.0/3.0);
            double t93978 = 1.0/tau_a[index];
            double t93979 = C_k*t93977*t93978;
            double t93980 = t93979-1.0;
            double t93981 = t93980*t93980;
            double t93982 = t93979+1.0;
            double t93983 = t93981*t93981;
            double t93984 = gx*gx;
            double t93985 = gamma_aa[index]*gx*t93722;
            double t93986 = t93985+1.0;
            double t93987 = 1.0/t93986;
            double t93988 = gamma_aa[index]*gx*t93722*3.0;
            double t93989 = gamma_aa[index]*gx*t93867*t93984*t93869;
            double t93990 = t93870*t93867*t93984*3.0;
            double t93991 = t93990+t93988+t93989+1.0;
            double t93992 = 1.0/t93991;
            double t93993 = gamma_aa[index]*gx*t93722*2.0;
            double t93994 = t93870*t93867*t93984;
            double t93995 = t93993+t93994+1.0;
            double t93996 = 1.0/t93995;
            double t93997 = cxnl1*gamma_aa[index]*gx*t93722*t93987;
            double t93998 = cxnl3*gamma_aa[index]*gx*t93992*t93867*t93984*t93869;
            double t93999 = cxnl2*t93870*t93867*t93984*t93996;
            double t94000 = cxnl0+t93997+t93998+t93999;
            double t94001 = 1.0/t93982;
            double t94002 = pow(rho_a[index],4.0/3.0);
            double t94003 = 1.0/(t93982*t93982*t93982);
            double t94004 = 1.0/(t93982*t93982*t93982*t93982*t93982);
            double t94005 = C_k*C_k;
            double t94006 = 1.0/(tau_a[index]*tau_a[index]);
            double t94007 = 1.0/(t93982*t93982*t93982*t93982);
            double t94008 = 1.0/(t93982*t93982*t93982*t93982*t93982*t93982);
            double t94009 = 1.0/(t93982*t93982);
            double t94010 = t93980*t94001;
            double t94011 = t93980*t93983*t94004;
            double t94039 = t93980*t93981*t94003*2.0;
            double t94012 = t94010+t94011-t94039;
            double t94013 = 1.0/pow(rho_a[index],1.0E1);
            double t94016 = 1.0/pow(rho_a[index],1.9E1/3.0);
            double t94022 = gamma_aa[index]*gx*t93721*(1.6E1/3.0);
            double t94023 = t93867*t93984*t94016*(1.6E1/3.0);
            double t94014 = t94022+t94023;
            double t94015 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]*rho_a[index]);
            double t94017 = 1.0/(t93991*t93991);
            double t94018 = gamma_aa[index]*gx*t93721*8.0;
            double t94019 = gamma_aa[index]*gx*t93867*t93984*t94015*8.0;
            double t94020 = t93867*t93984*t94016*1.6E1;
            double t94021 = t94020+t94018+t94019;
            double t94024 = 1.0/(t93995*t93995);
            double t94025 = pow(rho_a[index],2.0/3.0);
            double t94026 = 1.0/(t93986*t93986);
            double t94027 = 1.0/(t93986*t93986*t93986);
            double t94028 = t94014*t94014;
            double t94029 = 1.0/(t93995*t93995*t93995);
            double t94030 = gamma_aa[index]*gx*t93971*(8.8E1/3.0);
            double t94031 = gamma_aa[index]*gx*t93867*t93984*t94013*7.2E1;
            double t94032 = t93867*t93966*t93984*(3.04E2/3.0);
            double t94033 = t94030+t94031+t94032;
            double t94034 = t94021*t94021;
            double t94035 = 1.0/(t93991*t93991*t93991);
            double t94036 = gamma_aa[index]*gx*t93971*(1.76E2/9.0);
            double t94037 = t93867*t93966*t93984*(3.04E2/9.0);
            double t94038 = t94036+t94037;
            double t94040 = cxnl1*gamma_aa[index]*gx*t93721*t93987*(8.0/3.0);
            double t94041 = cxnl3*gamma_aa[index]*gx*t93992*t93867*t93984*t94015*8.0;
            double t94042 = cxnl2*t93867*t93984*t93996*t94016*(1.6E1/3.0);
            double t94043 = t94040+t94041+t94042-cxnl1*t93867*t93984*t94016*t94026*(8.0/3.0)-cxnl2*t93870*t93867* \
               t93984*t94014*t94024-cxnl3*gamma_aa[index]*gx*t93867*t93984*t93869*t94021*t94017;
            double t94044 = C_k*t93978*t94001*t94025*(5.0/3.0);
            double t94045 = C_k*t93980*t93981*t93978*t94007*t94025*1.0E1;
            double t94046 = C_k*t93983*t93978*t94004*t94025*(2.5E1/3.0);
            double t94047 = t94044+t94045+t94046-C_k*t93981*t93978*t94003*t94025*1.0E1-C_k*t93980*t93978*t94025* \
               t94009*(5.0/3.0)-C_k*t93980*t93983*t93978*t94025*t94008*(2.5E1/3.0);
            double t94048 = t93760*t93854*t93944;
            double t94049 = t93945+t94048;
            double t94050 = gamma_aa[index]*gcaa*t93722;
            double t94051 = t94050+1.0;
            double t94052 = 1.0/t94051;
            double t94053 = gamma_aa[index]*gcaa*t93722*3.0;
            double t94054 = gamma_aa[index]*gcaa*t93867*t93868*t93869;
            double t94055 = t93870*t93867*t93868*3.0;
            double t94056 = t94053+t94054+t94055+1.0;
            double t94057 = 1.0/t94056;
            double t94058 = gamma_aa[index]*gcaa*t93722*2.0;
            double t94059 = t93870*t93867*t93868;
            double t94060 = t94058+t94059+1.0;
            double t94061 = 1.0/t94060;
            double t94062 = 1.0/(t94051*t94051);
            double t94063 = gamma_aa[index]*gcaa*t93721*(1.6E1/3.0);
            double t94064 = t93867*t93868*t94016*(1.6E1/3.0);
            double t94065 = t94063+t94064;
            double t94066 = gamma_aa[index]*gcaa*t93721*8.0;
            double t94067 = gamma_aa[index]*gcaa*t93867*t93868*t94015*8.0;
            double t94068 = t93867*t93868*t94016*1.6E1;
            double t94069 = t94066+t94067+t94068;
            double t94070 = 1.0/(t94056*t94056);
            double t94071 = 1.0/(t94060*t94060);
            double t94073 = t93760*t93942*t93854;
            double t94074 = ccaa1*gamma_aa[index]*gcaa*t93721*t94052*(8.0/3.0);
            double t94075 = ccaa3*gamma_aa[index]*gcaa*t93867*t93868*t94015*t94057*8.0;
            double t94076 = ccaa2*t93867*t93868*t94016*t94061*(1.6E1/3.0);
            double t94077 = t94074+t94075+t94076-ccaa1*t93867*t93868*t94016*t94062*(8.0/3.0)-ccaa2*t93870*t93867* \
               t93868*t94071*t94065-ccaa3*gamma_aa[index]*gcaa*t93867*t93868*t93869*t94070*t94069;
            double t94078 = -t93850+t93866+t94073;
            double t94079 = ccaa1*gamma_aa[index]*gcaa*t93722*t94052;
            double t94080 = ccaa3*gamma_aa[index]*gcaa*t93867*t93868*t93869*t94057;
            double t94081 = ccaa2*t93870*t93867*t93868*t94061;
            double t94082 = ccaa0+t94080+t94081+t94079;
            double t94083 = 1.0/(t93826*t93826*t93826);
            double t94084 = b4f*t93722*t93742*(1.0E1/9.0);
            double t94085 = b2f*c*t93926*(4.0/9.0);
            double t94086 = b3f*t93722*t93742*t93834*(1.0/1.2E1);
            double t94087 = b1f*c*t93834*t93926*(2.0/9.0);
            double t94088 = b3f*c*t93926*t93819*(2.0/3.0);
            double t94089 = t94084+t94085+t94086+t94087+t94088-b1f*t93722*t93742*t93927*(1.0/3.6E1);
            double t94090 = t93857*t93858*t93859*t94089;
            double t94092 = t93842*t93843*t93844*t93937;
            double t94093 = 1.0/(t93837*t93837);
            double t94094 = 1.0/(t93826*t93826*t93826*t93826);
            double t94095 = t93761*t93928*t93857*t94093*t94094*(1.0/2.0);
            double t94096 = t93842*t93748*t93929*t93938*t93939*(1.0/2.0);
            double t94097 = a1f*c*t93827*t93864*t93858*t93859*(2.0/3.0);
            double t94098 = a1p*c*t93843*t93844*t93827*t93849*(2.0/3.0);
            v_rho_a_rho_a_[index] = t94082*t94078*2.0+t94049*t94077*2.0+(ccab1*gamma_aa[index]*gcab*t93721*t93873* \
               (4.0/3.0)-ccab2*t93720*t93718*t93972*t93969+ccab2*gamma_aa[index]*t93721*t93718*t93871*t93719*(8.0/ \
               3.0)-ccab1*gamma_aa[index]*t93721*t93718*t93719*t93965*(4.0/3.0)+ccab3*gamma_aa[index]*gcab*t93720* \
               t93721*t93718*t93872*4.0-ccab3*gcab*t93720*t93718*t93970*t93719*t93976)*(t93963+t93784+t93964+rho_a[index]* \
               (-t93850+t93866+t93760*t93854*(t93850+t93865-t93864*t93857*t93858*t93859-a1p*c*c0p*t93851*t93827*(2.0/ \
               3.0)))+t93735*(t93795-a1p*c*c0p*t93773*t93747*(2.0/3.0)+t93760*t93814*t93782*t93774*t93785-t93760* \
               t93782*t93785*t93885*t93779-t93760*t93774*t93785*t93796*t93779*4.0+t93760*t93754*t93755*t93782*t93774* \
               t93779*4.0+Aa*t93760*t93814*t93807*t93816*t93809*t93797*2.0-Aa*t93760*t93807*t93809*t93908*t93779* \
               t93797*2.0+t93760*t93923*t93816*t93916*t93809*t93918*t93779*t93797-Aa*a1a*c*t93760*t93807*t93816*t93747* \
               t93779*t93797*(2.0/3.0))-c0p*t93842*t93851*2.0-t93760*t93854*t93944)*2.0+(rho_a[index]*t94049+rho_b[index]* \
               (t93962-t93760*t93854*(t93962-c0f*log((t93761*(1.0/2.0))/(b1f*t93948+b3f*t93949+b2f*c*t93946+b4f*t93742* \
               t93950)+1.0)*(a1f*c*t93946+1.0)*2.0))-t93735*(t93963+t93784+t93964))*(-ccab2*t93720*t93718*t93972* \
               (gamma_aa[index]*gcab*t93971*(8.8E1/9.0)+t93718*t93867*t93966*(3.2E1/9.0)+gamma_aa[index]*t93718*t93719* \
               t93971*(8.8E1/9.0))+ccab2*t93720*1.0/(t93730*t93730*t93730)*t93718*(t93969*t93969)*2.0+ccab1*gamma_aa[index]* \
               gcab*t93971*t93873*(4.4E1/9.0)+ccab2*t93718*t93871*t93867*t93966*(3.2E1/9.0)-ccab1*t93718*t93965*t93867* \
               t93966*(3.2E1/9.0)+ccab2*gamma_aa[index]*t93718*t93871*t93719*t93971*(8.8E1/9.0)-ccab1*gamma_aa[index]* \
               t93718*t93719*t93971*t93965*(4.4E1/9.0)+ccab3*gcab*t93720*1.0/(t93734*t93734*t93734)*t93718*t93719* \
               (t93976*t93976)*2.0+ccab3*gamma_aa[index]*gcab*t93720*t93718*t93872*t93971*(4.4E1/3.0)-ccab2*gamma_aa[index]* \
               t93721*t93718*t93719*t93972*t93969*(1.6E1/3.0)+ccab3*gcab*t93718*t93719*t93872*t93867*t93966*(3.2E1/ \
               3.0)+ccab1*gcab*t93718*1.0/(t93727*t93727*t93727)*t93719*t93867*t93966*(3.2E1/9.0)-ccab3*gcab*t93720* \
               t93718*t93970*t93719*(gamma_aa[index]*gcab*t93971*(4.4E1/3.0)+t93718*t93867*t93966*(3.2E1/3.0)+gamma_aa[index]* \
               t93718*t93719*t93971*(8.8E1/3.0)+gamma_aa[index]*gcab*t93720*t93718*t93971*(4.4E1/3.0)+gcab*t93718* \
               t93719*t93867*t93966*(3.2E1/3.0))-ccab3*gamma_aa[index]*gcab*t93720*t93721*t93718*t93970*t93976*8.0) \
               -(ccab0+ccab1*gcab*t93719*t93873+ccab2*t93720*t93718*t93871+ccab3*gcab*t93720*t93718*t93719*t93872) \
               *(-t93735*(-t93905+t93941+t93925-t93897+t93760*t93782*t93785*t93779*(t93905-t93941-t93925+t93897-t93772* \
               1.0/(t93766*t93766*t93766)*t93877*t93898*2.0+t93772*t93877*t93878*(b2f*c*t93874*(4.0/9.0)+b4f*t93742* \
               t93875*(1.0E1/9.0)+b1f*c*t93874*t93787*(2.0/9.0)+b3f*c*t93738*t93874*(2.0/3.0)-b1f*t93742*t93875*t93889* \
               (1.0/3.6E1)+b3f*t93742*t93875*t93787*(1.0/1.2E1))+t93761*t93772*1.0/(t93766*t93766*t93766*t93766)* \
               1.0/(t93769*t93769)*t93898*(1.0/2.0)-a1f*c*c0f*t93770*t93874*(8.0/9.0)+a1f*c*t93747*t93883*t93877* \
               t93878*(2.0/3.0)-a1p*c*t93747*t93794*t93788*t93789*(2.0/3.0))-t93760*t93915*t93782*t93774*t93785+t93760* \
               t93814*t93782*t93785*t93885*2.0+t93760*t93814*t93774*t93785*t93796*8.0-t93760*t93755*t93782*t93774* \
               t93779*1.2E1-t93760*t93906*t93774*t93785*t93779*2.0E1-t93760*t93785*t93885*t93796*t93779*8.0-t93760* \
               t93814*t93754*t93755*t93782*t93774*8.0+t93760*t93754*t93755*t93782*t93885*t93779*8.0+t93760*t93754* \
               t93755*t93774*t93796*t93779*3.2E1+a1p*c*t93747*t93794*t93788*t93789*(2.0/3.0)+Aa*t93760*t93814*t93807* \
               t93809*t93908*t93797*4.0-Aa*t93760*t93807*t93816*t93915*t93809*t93797*2.0-Aa*t93760*t93807*t93809* \
               t93779*t93797*(t93755*t93782*1.2E1+t93906*t93785*2.0E1-t93754*t93755*t93796*3.2E1)*2.0-t93760*t93814* \
               t93923*t93816*t93916*t93809*t93918*t93797*2.0+t93760*t93923*t93916*t93809*t93908*t93918*t93779*t93797* \
               2.0-1.0/(t93803*t93803*t93803)*t93760*t93816*t93924*t93916*t93809*t93779*t93797*2.0+t93760*t93816* \
               t93916*t93809*t93918*t93779*t93797*(b2a*c*t93874*(4.0/9.0)+b4a*t93742*t93875*(1.0E1/9.0)+b1a*c*t93874* \
               t93787*(2.0/9.0)+b3a*c*t93738*t93874*(2.0/3.0)-b1a*t93742*t93875*t93889*(1.0/3.6E1)+b3a*t93742*t93875* \
               t93787*(1.0/1.2E1))+Aa*a1a*c*t93760*t93814*t93807*t93816*t93747*t93797*(4.0/3.0)-Aa*a1a*c*t93760*t93807* \
               t93816*t93874*t93779*t93797*(8.0/9.0)-Aa*a1a*c*t93760*t93807*t93908*t93747*t93779*t93797*(4.0/3.0) \
               +1.0/(t93803*t93803*t93803*t93803)*t93760*1.0/(t93806*t93806)*t93816*t93924*t93809*t93779*t93797*t93798* \
               (1.0/2.0)+a1a*c*t93760*t93923*t93816*t93916*t93747*t93918*t93779*t93797*(2.0/3.0))+rho_a[index]*(- \
               t93931-t93940+t94092+t94096+t94098+t93760*t93854*(t93931+t93940+t94090+t94095+t94097-t93842*t93843* \
               t93844*t93937-t93928*t93857*t93858*t94083*2.0-a1f*c*c0f*t93926*t93855*(8.0/9.0)-t93842*t93748*t93929* \
               t93938*t93939*(1.0/2.0)-a1p*c*t93843*t93844*t93827*t93849*(2.0/3.0)))+t93760*t93942*t93854*2.0-t93842* \
               t93843*t93844*t93849*2.0+t93753*t93794*t93788*t93789*2.0+a1p*c*c0p*t93851*t93827*(4.0/3.0)-a1p*c*c0p* \
               t93773*t93747*(4.0/3.0)+t93760*t93814*t93782*t93774*t93785*2.0-t93760*t93782*t93785*t93885*t93779* \
               2.0-t93760*t93774*t93785*t93796*t93779*8.0+t93760*t93754*t93755*t93782*t93774*t93779*8.0+Aa*t93760* \
               t93814*t93807*t93816*t93809*t93797*4.0-Aa*t93760*t93807*t93809*t93908*t93779*t93797*4.0+t93760*t93923* \
               t93816*t93916*t93809*t93918*t93779*t93797*2.0-Aa*a1a*c*t93760*t93807*t93816*t93747*t93779*t93797*(4.0/ \
               3.0))+(X-1.0)*(c0*t94002*(t94000*(t94002*t94005*t94006*t94009*(5.0E1/9.0)-C_k*t93817*t93978*t94001* \
               (1.0E1/9.0)+C_k*t93817*t93981*t93978*t94003*(2.0E1/3.0)-C_k*t93817*t93983*t93978*t94004*(5.0E1/9.0) \
               +C_k*t93817*t93980*t93978*t94009*(1.0E1/9.0)+t93980*t94002*t94003*t94005*t94006*(2.5E2/9.0)-t93981* \
               t94002*t94005*t94006*t94007*1.0E2+t93983*t94002*t94005*t94006*t94008*(1.25E3/9.0)+t93980*t93981*t94002* \
               t94004*t94005*t94006*(1.0E2/9.0)-t93980*1.0/(t93982*t93982*t93982*t93982*t93982*t93982*t93982)*t93983* \
               t94002*t94005*t94006*(2.5E2/3.0)-C_k*t93817*t93980*t93981*t93978*t94007*(2.0E1/3.0)+C_k*t93817*t93980* \
               t93983*t93978*t94008*(5.0E1/9.0))-t94012*(cxnl1*gamma_aa[index]*gx*t93971*t93987*(8.8E1/9.0)+cxnl2* \
               t93867*t93966*t93984*t93996*(3.04E2/9.0)-cxnl1*t93867*t93966*t93984*t94026*2.4E1-cxnl2*t93870*t93867* \
               t93984*t94024*t94038+cxnl2*t93870*t93867*t93984*t94028*t94029*2.0-cxnl2*t93867*t93984*t94014*t94024* \
               t94016*(3.2E1/3.0)+cxnl3*gamma_aa[index]*gx*t93992*t93867*t93984*t94013*7.2E1+cxnl1*gamma_aa[index]* \
               gx*t93867*t93984*t94013*t94027*(1.28E2/9.0)-cxnl3*gamma_aa[index]*gx*t93867*t93984*t93869*t94033*t94017+ \
               cxnl3*gamma_aa[index]*gx*t93867*t93984*t93869*t94034*t94035*2.0-cxnl3*gamma_aa[index]*gx*t93867*t93984* \
               t94021*t94015*t94017*1.6E1)+t94043*t94047*2.0-cx1*gamma_aa[index]*gx*t93971*t93987*(8.8E1/9.0)+cx1* \
               t93867*t93966*t93984*t94026*2.4E1-cx2*t93867*t93966*t93984*t93996*(3.04E2/9.0)+cx2*t93870*t93867*t93984* \
               t94024*t94038-cx2*t93870*t93867*t93984*t94028*t94029*2.0+cx2*t93867*t93984*t94014*t94024*t94016*(3.2E1/ \
               3.0)-cx1*gamma_aa[index]*gx*t93867*t93984*t94013*t94027*(1.28E2/9.0)-cx3*gamma_aa[index]*gx*t93992* \
               t93867*t93984*t94013*7.2E1+cx3*gamma_aa[index]*gx*t93867*t93984*t93869*t94033*t94017-cx3*gamma_aa[index]* \
               gx*t93867*t93984*t93869*t94034*t94035*2.0+cx3*gamma_aa[index]*gx*t93867*t93984*t94021*t94015*t94017* \
               1.6E1)+c0*pow(rho_a[index],1.0/3.0)*(t94012*t94043-t94000*t94047+cx1*gamma_aa[index]*gx*t93721*t93987* \
               (8.0/3.0)-cx1*t93867*t93984*t94016*t94026*(8.0/3.0)+cx2*t93867*t93984*t93996*t94016*(1.6E1/3.0)-cx2* \
               t93870*t93867*t93984*t94014*t94024+cx3*gamma_aa[index]*gx*t93992*t93867*t93984*t94015*8.0-cx3*gamma_aa[index]* \
               gx*t93867*t93984*t93869*t94021*t94017)*(8.0/3.0)-c0*t93823*(cx0+t94000*t94012+cx1*gamma_aa[index]* \
               gx*t93722*t93987+cx2*t93870*t93867*t93984*t93996+cx3*gamma_aa[index]*gx*t93992*t93867*t93984*t93869) \
               *(4.0/9.0))-rho_a[index]*t94049*(ccaa1*gamma_aa[index]*gcaa*t93971*t94052*(8.8E1/9.0)-ccaa1*t93867* \
               t93966*t93868*t94062*2.4E1+ccaa2*t93867*t93966*t93868*t94061*(3.04E2/9.0)-ccaa2*t93867*t93868*t94016* \
               t94071*t94065*(3.2E1/3.0)-ccaa2*t93870*t93867*t93868*t94071*(gamma_aa[index]*gcaa*t93971*(1.76E2/9.0) \
               +t93867*t93966*t93868*(3.04E2/9.0))+ccaa2*t93870*t93867*t93868*1.0/(t94060*t94060*t94060)*(t94065* \
               t94065)*2.0+ccaa3*gamma_aa[index]*gcaa*t93867*t93868*t94013*t94057*7.2E1+ccaa1*gamma_aa[index]*gcaa* \
               t93867*t93868*t94013*1.0/(t94051*t94051*t94051)*(1.28E2/9.0)+ccaa3*gamma_aa[index]*gcaa*t93867*t93868* \
               t93869*1.0/(t94056*t94056*t94056)*(t94069*t94069)*2.0-ccaa3*gamma_aa[index]*gcaa*t93867*t93868*t93869* \
               t94070*(gamma_aa[index]*gcaa*t93971*(8.8E1/3.0)+t93867*t93966*t93868*(3.04E2/3.0)+gamma_aa[index]* \
               gcaa*t93867*t93868*t94013*7.2E1)-ccaa3*gamma_aa[index]*gcaa*t93867*t93868*t94015*t94070*t94069*1.6E1) \
               +rho_a[index]*t94082*(-t93931-t93940+t94092+t94096+t94098+t93760*t93854*(t93931+t93940+t94090-t94092+ \
               t94095-t94096+t94097-t94098-t93928*t93857*t93858*t94083*2.0-a1f*c*c0f*t93926*t93855*(8.0/9.0)))-rho_a[index]* \
               t94077*t94078*2.0;
        } else if (rho_a[index] > cutoff_) {
            double t97342 = 1.0/pow(rho_a[index],1.0/3.0);
            double t97343 = c*t97342;
            double t97344 = sqrt(t97343);
            double t97345 = b1f*t97344;
            double t97346 = pow(t97343,3.0/2.0);
            double t97347 = b3f*t97346;
            double t97348 = c*c;
            double t97349 = 1.0/pow(rho_a[index],2.0/3.0);
            double t97350 = b4f*t97348*t97349;
            double t97351 = b2f*c*t97342;
            double t97352 = t97350+t97351+t97345+t97347;
            double t97353 = 1.0/pow(rho_a[index],4.0/3.0);
            double t97354 = b1p*t97344;
            double t97355 = b3p*t97346;
            double t97356 = b4p*t97348*t97349;
            double t97357 = b2p*c*t97342;
            double t97358 = t97354+t97355+t97356+t97357;
            double t97359 = 1.0/pow(rho_a[index],5.0/3.0);
            double t97360 = 1.0/sqrt(t97343);
            double t97361 = 1.0/c0f;
            double t97362 = 1.0/t97352;
            double t97363 = t97361*t97362*(1.0/2.0);
            double t97364 = t97363+1.0;
            double t97365 = 1.0/c0p;
            double t97366 = 1.0/t97358;
            double t97367 = t97365*t97366*(1.0/2.0);
            double t97368 = t97367+1.0;
            double t97369 = a1p*c*t97342;
            double t97370 = t97369+1.0;
            double t97371 = 1.0/t97368;
            double t97372 = 1.0/(t97358*t97358);
            double t97373 = b4p*t97348*t97359*(2.0/3.0);
            double t97374 = b2p*c*t97353*(1.0/3.0);
            double t97375 = b1p*c*t97360*t97353*(1.0/6.0);
            double t97376 = b3p*c*t97344*t97353*(1.0/2.0);
            double t97377 = t97373+t97374+t97375+t97376;
            double t97378 = t97370*t97371*t97372*t97377;
            double t97379 = log(t97368);
            double t97380 = 1.0/pow(rho_a[index],8.0/3.0);
            double t97381 = gamma_aa[index]*gamma_aa[index];
            double t97382 = gcaa*gcaa;
            double t97383 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]);
            double t97384 = 1.0/pow(rho_a[index],1.6E1/3.0);
            double t97385 = pow(2.0,1.0/3.0);
            double t97386 = t97385*2.0;
            double t97387 = t97386-2.0;
            double t97388 = two_13*2.0;
            double t97389 = t97388-2.0;
            double t97390 = 1.0/t97389;
            double t97391 = log(t97364);
            double t97392 = a1f*c*t97342;
            double t97393 = t97392+1.0;
            double t97394 = gamma_aa[index]*gcaa*t97380;
            double t97395 = t97394+1.0;
            double t97396 = 1.0/t97395;
            double t97397 = gamma_aa[index]*gcaa*t97380*3.0;
            double t97398 = gamma_aa[index]*gcaa*t97381*t97382*t97383;
            double t97399 = t97381*t97382*t97384*3.0;
            double t97400 = t97397+t97398+t97399+1.0;
            double t97401 = 1.0/t97400;
            double t97402 = gamma_aa[index]*gcaa*t97380*2.0;
            double t97403 = t97381*t97382*t97384;
            double t97404 = t97402+t97403+1.0;
            double t97405 = 1.0/t97404;
            double t97406 = 1.0/pow(rho_a[index],1.9E1/3.0);
            double t97407 = 1.0/pow(rho_a[index],1.1E1/3.0);
            double t97408 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]*rho_a[index]);
            double t97409 = c0f*t97391*t97393*2.0;
            double t97410 = c0p*t97370*t97379*2.0;
            double t97411 = 1.0/pow(rho_a[index],1.0E1);
            double t97412 = 1.0/pow(rho_a[index],2.2E1/3.0);
            double t97413 = 1.0/(t97395*t97395);
            double t97414 = gamma_aa[index]*gcaa*t97407*(1.6E1/3.0);
            double t97415 = t97406*t97381*t97382*(1.6E1/3.0);
            double t97416 = t97414+t97415;
            double t97417 = gamma_aa[index]*gcaa*t97407*8.0;
            double t97418 = gamma_aa[index]*gcaa*t97381*t97408*t97382*8.0;
            double t97419 = t97406*t97381*t97382*1.6E1;
            double t97420 = t97417+t97418+t97419;
            double t97421 = 1.0/(t97400*t97400);
            double t97422 = 1.0/pow(rho_a[index],1.4E1/3.0);
            double t97423 = 1.0/(t97404*t97404);
            double t97424 = 1.0/t97364;
            double t97425 = 1.0/(t97352*t97352);
            double t97426 = b4f*t97348*t97359*(2.0/3.0);
            double t97427 = b2f*c*t97353*(1.0/3.0);
            double t97428 = b1f*c*t97360*t97353*(1.0/6.0);
            double t97429 = b3f*c*t97344*t97353*(1.0/2.0);
            double t97430 = t97426+t97427+t97428+t97429;
            double t97431 = a1f*c*c0f*t97353*t97391*(2.0/3.0);
            double t97432 = a1p*c*c0p*t97353*t97379*(2.0/3.0);
            double t97433 = ccaa1*gamma_aa[index]*gcaa*t97407*t97396*(8.0/3.0);
            double t97434 = ccaa3*gamma_aa[index]*gcaa*t97401*t97381*t97408*t97382*8.0;
            double t97435 = ccaa2*t97405*t97406*t97381*t97382*(1.6E1/3.0);
            double t97436 = t97433+t97434+t97435-ccaa1*t97413*t97406*t97381*t97382*(8.0/3.0)-ccaa2*t97423*t97416* \
               t97381*t97382*t97384-ccaa3*gamma_aa[index]*gcaa*t97420*t97421*t97381*t97382*t97383;
            double t97437 = ccaa1*gamma_aa[index]*gcaa*t97380*t97396;
            double t97438 = ccaa3*gamma_aa[index]*gcaa*t97401*t97381*t97382*t97383;
            double t97439 = ccaa2*t97405*t97381*t97382*t97384;
            double t97440 = ccaa0+t97437+t97438+t97439;
            double t97441 = 1.0/pow(rho_a[index],7.0/3.0);
            double t97442 = 1.0/pow(t97343,3.0/2.0);
            double t97443 = t97430*t97430;
            double t97444 = t97377*t97377;
            double t97445 = 1.0/(t97358*t97358*t97358);
            double t97446 = t97370*t97371*t97444*t97445*2.0;
            double t97447 = b4p*t97380*t97348*(1.0E1/9.0);
            double t97448 = b2p*c*t97441*(4.0/9.0);
            double t97449 = b3p*t97360*t97380*t97348*(1.0/1.2E1);
            double t97450 = b1p*c*t97360*t97441*(2.0/9.0);
            double t97451 = b3p*c*t97441*t97344*(2.0/3.0);
            double t97452 = t97450+t97451+t97447+t97448+t97449-b1p*t97442*t97380*t97348*(1.0/3.6E1);
            double t97453 = 1.0/(t97368*t97368);
            double t97454 = 1.0/(t97358*t97358*t97358*t97358);
            double t97455 = a1p*c*c0p*t97441*t97379*(8.0/9.0);
            double t97456 = pow(rho_a[index],5.0/3.0);
            double t97457 = 1.0/tau_a[index];
            double t97458 = C_k*t97456*t97457;
            double t97459 = t97458-1.0;
            double t97460 = t97459*t97459;
            double t97461 = t97458+1.0;
            double t97462 = t97460*t97460;
            double t97463 = gx*gx;
            double t97464 = gamma_aa[index]*gx*t97380;
            double t97465 = t97464+1.0;
            double t97466 = 1.0/t97465;
            double t97467 = gamma_aa[index]*gx*t97380*3.0;
            double t97468 = gamma_aa[index]*gx*t97381*t97463*t97383;
            double t97469 = t97381*t97463*t97384*3.0;
            double t97470 = t97467+t97468+t97469+1.0;
            double t97471 = 1.0/t97470;
            double t97472 = gamma_aa[index]*gx*t97380*2.0;
            double t97473 = t97381*t97463*t97384;
            double t97474 = t97472+t97473+1.0;
            double t97475 = 1.0/t97474;
            double t97476 = X-1.0;
            double t97477 = cxnl1*gamma_aa[index]*gx*t97380*t97466;
            double t97478 = cxnl3*gamma_aa[index]*gx*t97381*t97471*t97463*t97383;
            double t97479 = cxnl2*t97381*t97463*t97384*t97475;
            double t97480 = cxnl0+t97477+t97478+t97479;
            double t97481 = 1.0/t97461;
            double t97482 = pow(rho_a[index],4.0/3.0);
            double t97483 = 1.0/(t97461*t97461*t97461);
            double t97484 = 1.0/(t97461*t97461*t97461*t97461*t97461);
            double t97485 = C_k*C_k;
            double t97486 = 1.0/(tau_a[index]*tau_a[index]);
            double t97487 = 1.0/(t97461*t97461*t97461*t97461);
            double t97488 = 1.0/(t97461*t97461*t97461*t97461*t97461*t97461);
            double t97489 = 1.0/(t97461*t97461);
            double t97490 = t97481*t97459;
            double t97491 = t97462*t97484*t97459;
            double t97516 = t97460*t97483*t97459*2.0;
            double t97492 = -t97516+t97490+t97491;
            double t97499 = gamma_aa[index]*gx*t97407*(1.6E1/3.0);
            double t97500 = t97406*t97381*t97463*(1.6E1/3.0);
            double t97493 = t97500+t97499;
            double t97494 = 1.0/(t97470*t97470);
            double t97495 = gamma_aa[index]*gx*t97407*8.0;
            double t97496 = gamma_aa[index]*gx*t97381*t97408*t97463*8.0;
            double t97497 = t97406*t97381*t97463*1.6E1;
            double t97498 = t97495+t97496+t97497;
            double t97501 = 1.0/(t97474*t97474);
            double t97502 = pow(rho_a[index],2.0/3.0);
            double t97503 = 1.0/(t97465*t97465);
            double t97504 = 1.0/(t97465*t97465*t97465);
            double t97505 = t97493*t97493;
            double t97506 = 1.0/(t97474*t97474*t97474);
            double t97507 = gamma_aa[index]*gx*t97422*(8.8E1/3.0);
            double t97508 = gamma_aa[index]*gx*t97411*t97381*t97463*7.2E1;
            double t97509 = t97412*t97381*t97463*(3.04E2/3.0);
            double t97510 = t97507+t97508+t97509;
            double t97511 = t97498*t97498;
            double t97512 = 1.0/(t97470*t97470*t97470);
            double t97513 = gamma_aa[index]*gx*t97422*(1.76E2/9.0);
            double t97514 = t97412*t97381*t97463*(3.04E2/9.0);
            double t97515 = t97513+t97514;
            double t97517 = cxnl1*gamma_aa[index]*gx*t97407*t97466*(8.0/3.0);
            double t97518 = cxnl3*gamma_aa[index]*gx*t97381*t97408*t97471*t97463*8.0;
            double t97519 = cxnl2*t97406*t97381*t97463*t97475*(1.6E1/3.0);
            double t97520 = t97517+t97518+t97519-cxnl1*t97503*t97406*t97381*t97463*(8.0/3.0)-cxnl2*t97501*t97381* \
               t97463*t97384*t97493-cxnl3*gamma_aa[index]*gx*t97381*t97463*t97383*t97494*t97498;
            double t97521 = C_k*t97502*t97481*t97457*(5.0/3.0);
            double t97522 = C_k*t97502*t97460*t97457*t97459*t97487*1.0E1;
            double t97523 = C_k*t97502*t97462*t97457*t97484*(2.5E1/3.0);
            double t97524 = t97521+t97522+t97523-C_k*t97502*t97460*t97483*t97457*1.0E1-C_k*t97502*t97457*t97459* \
               t97489*(5.0/3.0)-C_k*t97502*t97462*t97457*t97459*t97488*(2.5E1/3.0);
            v_rho_a_rho_a_[index] = t97436*(t97410+t97390*t97387*(t97409-c0p*t97370*t97379*2.0))*2.0+t97440*(t97432- \
               t97378+t97390*t97387*(t97431+t97378-t97430*t97424*t97425*t97393-a1p*c*c0p*t97353*t97379*(2.0/3.0)) \
               )*2.0+rho_a[index]*t97440*(-t97446-t97455+t97390*t97387*(t97446+t97455-t97370*t97371*t97452*t97372- \
               1.0/(t97352*t97352*t97352)*t97424*t97443*t97393*2.0+t97424*t97425*t97393*(b2f*c*t97441*(4.0/9.0)+b4f* \
               t97380*t97348*(1.0E1/9.0)+b1f*c*t97360*t97441*(2.0/9.0)+b3f*c*t97441*t97344*(2.0/3.0)-b1f*t97442*t97380* \
               t97348*(1.0/3.6E1)+b3f*t97360*t97380*t97348*(1.0/1.2E1))+1.0/(t97352*t97352*t97352*t97352)*t97361* \
               t97443*1.0/(t97364*t97364)*t97393*(1.0/2.0)-a1f*c*c0f*t97441*t97391*(8.0/9.0)-t97370*t97444*t97453* \
               t97454*t97365*(1.0/2.0)+a1f*c*t97430*t97424*t97353*t97425*(2.0/3.0)-a1p*c*t97353*t97371*t97372*t97377* \
               (2.0/3.0))+t97370*t97371*t97452*t97372+t97370*t97444*t97453*t97454*t97365*(1.0/2.0)+a1p*c*t97353*t97371* \
               t97372*t97377*(2.0/3.0))-rho_a[index]*t97436*(t97432-t97378+t97390*t97387*(t97431-t97432+t97378-t97430* \
               t97424*t97425*t97393))*2.0-rho_a[index]*(t97410-t97390*t97387*(t97410-t97409))*(ccaa1*gamma_aa[index]* \
               gcaa*t97422*t97396*(8.8E1/9.0)-ccaa1*t97412*t97413*t97381*t97382*2.4E1+ccaa2*t97412*t97405*t97381* \
               t97382*(3.04E2/9.0)-ccaa2*t97423*t97406*t97416*t97381*t97382*(3.2E1/3.0)-ccaa2*t97423*t97381*t97382* \
               t97384*(gamma_aa[index]*gcaa*t97422*(1.76E2/9.0)+t97412*t97381*t97382*(3.04E2/9.0))+ccaa2*1.0/(t97404* \
               t97404*t97404)*(t97416*t97416)*t97381*t97382*t97384*2.0+ccaa3*gamma_aa[index]*gcaa*t97401*t97411*t97381* \
               t97382*7.2E1+ccaa1*gamma_aa[index]*gcaa*t97411*t97381*t97382*1.0/(t97395*t97395*t97395)*(1.28E2/9.0) \
               +ccaa3*gamma_aa[index]*gcaa*1.0/(t97400*t97400*t97400)*(t97420*t97420)*t97381*t97382*t97383*2.0-ccaa3* \
               gamma_aa[index]*gcaa*t97421*t97381*t97382*t97383*(gamma_aa[index]*gcaa*t97422*(8.8E1/3.0)+t97412*t97381* \
               t97382*(3.04E2/3.0)+gamma_aa[index]*gcaa*t97411*t97381*t97382*7.2E1)-ccaa3*gamma_aa[index]*gcaa*t97420* \
               t97421*t97381*t97408*t97382*1.6E1)-c0*t97349*t97476*(cx0+t97480*t97492+cx1*gamma_aa[index]*gx*t97380* \
               t97466+cx2*t97381*t97463*t97384*t97475+cx3*gamma_aa[index]*gx*t97381*t97471*t97463*t97383)*(4.0/9.0) \
               +c0*t97482*t97476*(t97480*(t97482*t97485*t97486*t97489*(5.0E1/9.0)-C_k*t97342*t97481*t97457*(1.0E1/ \
               9.0)+C_k*t97342*t97460*t97483*t97457*(2.0E1/3.0)-C_k*t97342*t97462*t97457*t97484*(5.0E1/9.0)+C_k*t97342* \
               t97457*t97459*t97489*(1.0E1/9.0)-t97460*t97482*t97485*t97486*t97487*1.0E2+t97462*t97482*t97485*t97486* \
               t97488*(1.25E3/9.0)+t97482*t97483*t97485*t97459*t97486*(2.5E2/9.0)+t97460*t97482*t97484*t97485*t97459* \
               t97486*(1.0E2/9.0)-1.0/(t97461*t97461*t97461*t97461*t97461*t97461*t97461)*t97462*t97482*t97485*t97459* \
               t97486*(2.5E2/3.0)-C_k*t97342*t97460*t97457*t97459*t97487*(2.0E1/3.0)+C_k*t97342*t97462*t97457*t97459* \
               t97488*(5.0E1/9.0))-t97492*(cxnl1*gamma_aa[index]*gx*t97422*t97466*(8.8E1/9.0)-cxnl1*t97412*t97503* \
               t97381*t97463*2.4E1+cxnl2*t97412*t97381*t97463*t97475*(3.04E2/9.0)-cxnl2*t97501*t97406*t97381*t97463* \
               t97493*(3.2E1/3.0)-cxnl2*t97501*t97515*t97381*t97463*t97384+cxnl2*t97505*t97506*t97381*t97463*t97384* \
               2.0+cxnl1*gamma_aa[index]*gx*t97411*t97504*t97381*t97463*(1.28E2/9.0)+cxnl3*gamma_aa[index]*gx*t97411* \
               t97381*t97471*t97463*7.2E1+cxnl3*gamma_aa[index]*gx*t97511*t97512*t97381*t97463*t97383*2.0-cxnl3*gamma_aa[index]* \
               gx*t97510*t97381*t97463*t97383*t97494-cxnl3*gamma_aa[index]*gx*t97381*t97408*t97463*t97494*t97498* \
               1.6E1)+t97520*t97524*2.0-cx1*gamma_aa[index]*gx*t97422*t97466*(8.8E1/9.0)+cx1*t97412*t97503*t97381* \
               t97463*2.4E1-cx2*t97412*t97381*t97463*t97475*(3.04E2/9.0)+cx2*t97501*t97406*t97381*t97463*t97493*(3.2E1/ \
               3.0)+cx2*t97501*t97515*t97381*t97463*t97384-cx2*t97505*t97506*t97381*t97463*t97384*2.0-cx1*gamma_aa[index]* \
               gx*t97411*t97504*t97381*t97463*(1.28E2/9.0)-cx3*gamma_aa[index]*gx*t97411*t97381*t97471*t97463*7.2E1- \
               cx3*gamma_aa[index]*gx*t97511*t97512*t97381*t97463*t97383*2.0+cx3*gamma_aa[index]*gx*t97510*t97381* \
               t97463*t97383*t97494+cx3*gamma_aa[index]*gx*t97381*t97408*t97463*t97494*t97498*1.6E1)+c0*pow(rho_a[index],1.0/ \
               3.0)*t97476*(t97520*t97492-t97524*t97480+cx1*gamma_aa[index]*gx*t97407*t97466*(8.0/3.0)-cx1*t97503* \
               t97406*t97381*t97463*(8.0/3.0)+cx2*t97406*t97381*t97463*t97475*(1.6E1/3.0)-cx2*t97501*t97381*t97463* \
               t97384*t97493+cx3*gamma_aa[index]*gx*t97381*t97408*t97471*t97463*8.0-cx3*gamma_aa[index]*gx*t97381* \
               t97463*t97383*t97494*t97498)*(8.0/3.0);
        } else if (rho_b[index] > cutoff_) {
            v_rho_a_rho_a_[index] = 0.0;
        } else {
            v_rho_a_rho_a_[index] = 0.0;
        }

        //V_rho_a_rho_b
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t94100 = 1.0/pow(rho_a[index],1.0/3.0);
            double t94101 = c*t94100;
            double t94102 = sqrt(t94101);
            double t94103 = pow(t94101,3.0/2.0);
            double t94104 = c*c;
            double t94105 = 1.0/pow(rho_a[index],2.0/3.0);
            double t94106 = 1.0/c0p;
            double t94107 = b1p*t94102;
            double t94108 = b3p*t94103;
            double t94109 = b4p*t94104*t94105;
            double t94110 = b2p*c*t94100;
            double t94111 = t94110+t94107+t94108+t94109;
            double t94112 = 1.0/t94111;
            double t94113 = t94112*t94106*(1.0/2.0);
            double t94114 = t94113+1.0;
            double t94115 = log(t94114);
            double t94116 = a1p*c*t94100;
            double t94117 = t94116+1.0;
            double t94118 = pow(2.0,1.0/3.0);
            double t94119 = t94118*2.0;
            double t94120 = t94119-2.0;
            double t94121 = two_13*2.0;
            double t94122 = t94121-2.0;
            double t94123 = 1.0/t94122;
            double t94124 = 1.0/c0f;
            double t94125 = 1.0/pow(rho_b[index],1.0/3.0);
            double t94126 = c*t94125;
            double t94127 = sqrt(t94126);
            double t94128 = pow(t94126,3.0/2.0);
            double t94129 = 1.0/pow(rho_b[index],2.0/3.0);
            double t94130 = b1p*t94127;
            double t94131 = b3p*t94128;
            double t94132 = b4p*t94104*t94129;
            double t94133 = b2p*c*t94125;
            double t94134 = t94130+t94131+t94132+t94133;
            double t94135 = 1.0/t94134;
            double t94136 = t94106*t94135*(1.0/2.0);
            double t94137 = t94136+1.0;
            double t94138 = log(t94137);
            double t94139 = a1p*c*t94125;
            double t94140 = t94139+1.0;
            double t94141 = c0p*t94140*t94138*2.0;
            double t94142 = rho_a[index]+rho_b[index];
            double t94143 = 1.0/pow(t94142,1.0/3.0);
            double t94144 = c*t94143;
            double t94145 = sqrt(t94144);
            double t94146 = pow(t94144,3.0/2.0);
            double t94147 = 1.0/pow(t94142,2.0/3.0);
            double t94148 = b1p*t94145;
            double t94149 = b3p*t94146;
            double t94150 = b4p*t94104*t94147;
            double t94151 = b2p*c*t94143;
            double t94152 = t94150+t94151+t94148+t94149;
            double t94153 = 1.0/t94152;
            double t94154 = t94106*t94153*(1.0/2.0);
            double t94155 = t94154+1.0;
            double t94156 = log(t94155);
            double t94157 = a1p*c*t94143;
            double t94158 = t94157+1.0;
            double t94159 = c0p*t94156*t94158*2.0;
            double t94160 = rho_a[index]-rho_b[index];
            double t94161 = t94160*t94160;
            double t94162 = 1.0/t94142;
            double t94163 = t94160*t94162;
            double t94164 = 1.0/(t94142*t94142*t94142*t94142);
            double t94165 = t94161*t94161;
            double t94166 = t94163+1.0;
            double t94167 = pow(t94166,4.0/3.0);
            double t94168 = -t94163+1.0;
            double t94169 = pow(t94168,4.0/3.0);
            double t94170 = t94167+t94169-2.0;
            double t94171 = gcab*gcab;
            double t94172 = 1.0/pow(rho_a[index],1.1E1/3.0);
            double t94173 = 1.0/pow(rho_b[index],1.1E1/3.0);
            double t94174 = 1.0/pow(rho_a[index],8.0/3.0);
            double t94175 = gamma_aa[index]*t94174*(1.0/2.0);
            double t94176 = 1.0/pow(rho_b[index],8.0/3.0);
            double t94177 = gamma_bb[index]*t94176*(1.0/2.0);
            double t94178 = t94175+t94177;
            double t94179 = t94178*t94178;
            double t94180 = t94171*t94179*3.0;
            double t94181 = gcab*t94171*t94178*t94179;
            double t94182 = gcab*t94178*3.0;
            double t94183 = t94180+t94181+t94182+1.0;
            double t94184 = t94171*t94179;
            double t94185 = gcab*t94178*2.0;
            double t94186 = t94184+t94185+1.0;
            double t94187 = gamma_aa[index]*gcab*t94172*4.0;
            double t94188 = gamma_aa[index]*gcab*t94171*t94172*t94179*4.0;
            double t94189 = gamma_aa[index]*t94171*t94172*t94178*8.0;
            double t94190 = t94187+t94188+t94189;
            double t94191 = 1.0/(t94183*t94183);
            double t94192 = gamma_bb[index]*gcab*t94173*4.0;
            double t94193 = gamma_bb[index]*gcab*t94171*t94173*t94179*4.0;
            double t94194 = gamma_bb[index]*t94171*t94173*t94178*8.0;
            double t94195 = t94192+t94193+t94194;
            double t94196 = gamma_aa[index]*gcab*t94172*(8.0/3.0);
            double t94197 = gamma_aa[index]*t94171*t94172*t94178*(8.0/3.0);
            double t94198 = t94196+t94197;
            double t94199 = gamma_bb[index]*gcab*t94173*(8.0/3.0);
            double t94200 = gamma_bb[index]*t94171*t94173*t94178*(8.0/3.0);
            double t94201 = t94200+t94199;
            double t94202 = 1.0/(t94186*t94186);
            double t94203 = gcab*t94178;
            double t94204 = t94203+1.0;
            double t94205 = 1.0/(t94204*t94204);
            double t94206 = 1.0/t94186;
            double t94207 = 1.0/t94183;
            double t94208 = 1.0/pow(t94142,4.0/3.0);
            double t94209 = b1f*t94145;
            double t94210 = b3f*t94146;
            double t94211 = b4f*t94104*t94147;
            double t94212 = b2f*c*t94143;
            double t94213 = t94210+t94211+t94212+t94209;
            double t94214 = 1.0/t94213;
            double t94215 = t94124*t94214*(1.0/2.0);
            double t94216 = t94215+1.0;
            double t94217 = log(t94216);
            double t94218 = a1f*c*t94143;
            double t94219 = t94218+1.0;
            double t94221 = c0f*t94217*t94219*2.0;
            double t94220 = -t94221+t94159;
            double t94222 = 1.0/(t94142*t94142);
            double t94250 = t94222*t94160;
            double t94223 = -t94250+t94162;
            double t94224 = t94221-t94159;
            double t94225 = 1.0/pow(t94142,5.0/3.0);
            double t94226 = 1.0/sqrt(t94144);
            double t94227 = 1.0/t94155;
            double t94228 = 1.0/(t94152*t94152);
            double t94229 = b4p*t94104*t94225*(2.0/3.0);
            double t94230 = b2p*c*t94208*(1.0/3.0);
            double t94231 = b1p*c*t94208*t94226*(1.0/6.0);
            double t94232 = b3p*c*t94145*t94208*(1.0/2.0);
            double t94233 = t94230+t94231+t94232+t94229;
            double t94234 = t94233*t94227*t94228*t94158;
            double t94235 = 1.0/d2fz0;
            double t94236 = 1.0/Aa;
            double t94237 = b1a*t94145;
            double t94238 = b3a*t94146;
            double t94239 = b4a*t94104*t94147;
            double t94240 = b2a*c*t94143;
            double t94241 = t94240+t94237+t94238+t94239;
            double t94242 = 1.0/t94241;
            double t94243 = t94242*t94236*(1.0/2.0);
            double t94244 = t94243+1.0;
            double t94245 = log(t94244);
            double t94246 = a1a*c*t94143;
            double t94247 = t94246+1.0;
            double t94248 = 1.0/(t94142*t94142*t94142*t94142*t94142);
            double t94249 = pow(t94166,1.0/3.0);
            double t94251 = t94223*t94249*(4.0/3.0);
            double t94252 = pow(t94168,1.0/3.0);
            double t94332 = t94223*t94252*(4.0/3.0);
            double t94253 = t94251-t94332;
            double t94254 = t94164*t94165;
            double t94255 = t94254-1.0;
            double t94256 = a1f*c*t94100;
            double t94257 = t94256+1.0;
            double t94258 = b1f*t94102;
            double t94259 = b3f*t94103;
            double t94260 = b4f*t94104*t94105;
            double t94261 = b2f*c*t94100;
            double t94262 = t94260+t94261+t94258+t94259;
            double t94263 = 1.0/t94262;
            double t94264 = t94124*t94263*(1.0/2.0);
            double t94265 = t94264+1.0;
            double t94266 = 1.0/pow(rho_a[index],4.0/3.0);
            double t94267 = 1.0/pow(rho_a[index],5.0/3.0);
            double t94268 = 1.0/sqrt(t94101);
            double t94269 = log(t94265);
            double t94270 = 1.0/t94114;
            double t94271 = 1.0/(t94111*t94111);
            double t94272 = b4p*t94104*t94267*(2.0/3.0);
            double t94273 = b2p*c*t94266*(1.0/3.0);
            double t94274 = b1p*c*t94266*t94268*(1.0/6.0);
            double t94275 = b3p*c*t94102*t94266*(1.0/2.0);
            double t94276 = t94272+t94273+t94274+t94275;
            double t94277 = t94117*t94270*t94271*t94276;
            double t94278 = c0f*t94257*t94269*2.0;
            double t94279 = c0p*t94115*t94117*2.0;
            double t94280 = Aa*t94123*t94170*t94235*t94245*t94255*t94247*2.0;
            double t94281 = 1.0/t94204;
            double t94282 = t94123*t94170*t94224*t94165*t94248*4.0;
            double t94283 = t94250+t94162;
            double t94284 = 1.0/t94216;
            double t94285 = 1.0/(t94213*t94213);
            double t94286 = b4f*t94104*t94225*(2.0/3.0);
            double t94287 = b2f*c*t94208*(1.0/3.0);
            double t94288 = b1f*c*t94208*t94226*(1.0/6.0);
            double t94289 = b3f*c*t94145*t94208*(1.0/2.0);
            double t94290 = t94286+t94287+t94288+t94289;
            double t94291 = a1f*c*c0f*t94208*t94217*(2.0/3.0);
            double t94292 = a1p*c*c0p*t94208*t94156*(2.0/3.0);
            double t94293 = t94165*t94248*4.0;
            double t94294 = t94252*t94283*(4.0/3.0);
            double t94330 = t94283*t94249*(4.0/3.0);
            double t94295 = -t94330+t94294;
            double t94296 = 1.0/t94244;
            double t94297 = 1.0/(t94241*t94241);
            double t94298 = b4a*t94104*t94225*(2.0/3.0);
            double t94299 = b2a*c*t94208*(1.0/3.0);
            double t94300 = b1a*c*t94208*t94226*(1.0/6.0);
            double t94301 = b3a*c*t94145*t94208*(1.0/2.0);
            double t94302 = t94300+t94301+t94298+t94299;
            double t94303 = Aa*a1a*c*t94123*t94170*t94208*t94235*t94245*t94255*(2.0/3.0);
            double t94304 = a1f*c*t94125;
            double t94305 = t94304+1.0;
            double t94306 = b1f*t94127;
            double t94307 = b3f*t94128;
            double t94308 = b4f*t94104*t94129;
            double t94309 = b2f*c*t94125;
            double t94310 = t94306+t94307+t94308+t94309;
            double t94311 = 1.0/t94310;
            double t94312 = t94311*t94124*(1.0/2.0);
            double t94313 = t94312+1.0;
            double t94314 = 1.0/pow(rho_b[index],4.0/3.0);
            double t94315 = 1.0/pow(rho_b[index],5.0/3.0);
            double t94316 = 1.0/sqrt(t94126);
            double t94317 = log(t94313);
            double t94318 = 1.0/t94137;
            double t94319 = 1.0/(t94134*t94134);
            double t94320 = b4p*t94104*t94315*(2.0/3.0);
            double t94321 = b2p*c*t94314*(1.0/3.0);
            double t94322 = b1p*c*t94314*t94316*(1.0/6.0);
            double t94323 = b3p*c*t94314*t94127*(1.0/2.0);
            double t94324 = t94320+t94321+t94322+t94323;
            double t94325 = t94140*t94324*t94318*t94319;
            double t94326 = t94141-c0f*t94305*t94317*2.0;
            double t94327 = t94123*t94170*t94224*t94164*t94165;
            double t94328 = 1.0/pow(t94142,7.0/3.0);
            double t94329 = 1.0/pow(t94142,8.0/3.0);
            double t94331 = t94330-t94294;
            double t94348 = t94290*t94219*t94284*t94285;
            double t94333 = t94234+t94291-t94292-t94348;
            double t94334 = t94233*t94233;
            double t94335 = 1.0/pow(t94144,3.0/2.0);
            double t94336 = b4p*t94104*t94329*(1.0E1/9.0);
            double t94337 = b2p*c*t94328*(4.0/9.0);
            double t94338 = b1p*c*t94226*t94328*(2.0/9.0);
            double t94339 = b3p*c*t94145*t94328*(2.0/3.0);
            double t94340 = b3p*t94104*t94226*t94329*(1.0/1.2E1);
            double t94341 = t94340+t94336+t94337+t94338+t94339-b1p*t94104*t94335*t94329*(1.0/3.6E1);
            double t94342 = t94341*t94227*t94228*t94158;
            double t94343 = 1.0/(t94152*t94152*t94152);
            double t94344 = t94290*t94290;
            double t94345 = 1.0/(t94155*t94155);
            double t94346 = 1.0/(t94152*t94152*t94152*t94152);
            double t94347 = t94106*t94334*t94345*t94346*t94158*(1.0/2.0);
            double t94349 = 1.0/(t94142*t94142*t94142);
            double t94350 = a1p*c*t94233*t94208*t94227*t94228*(2.0/3.0);
            double t94351 = 1.0/(t94142*t94142*t94142*t94142*t94142*t94142);
            double t94352 = t94160*t94161*t94164*4.0;
            double t94353 = t94352+t94293;
            double t94354 = t94160*t94252*t94349*(8.0/3.0);
            double t94355 = 1.0/pow(t94166,2.0/3.0);
            double t94356 = t94223*t94283*t94355*(4.0/9.0);
            double t94357 = 1.0/pow(t94168,2.0/3.0);
            double t94358 = t94223*t94283*t94357*(4.0/9.0);
            double t94359 = t94354+t94356+t94358-t94160*t94249*t94349*(8.0/3.0);
            double t94360 = t94352-t94293;
            double t94361 = t94302*t94302;
            double t94362 = Aa*t94123*t94170*t94235*t94245*t94353*t94247*2.0;
            v_rho_a_rho_b_[index] = -(rho_b[index]*(t94141-t94120*t94123*t94326)+rho_a[index]*(t94279+t94120* \
               t94123*(t94278-c0p*t94115*t94117*2.0))-t94142*(t94280+t94159-t94220*t94123*t94170*t94164*t94165))* \
               (ccab2*t94201*t94171*1.0/(t94186*t94186*t94186)*t94179*t94198*-2.0+ccab3*gcab*t94171*t94191*t94178* \
               t94179*(gamma_aa[index]*gamma_bb[index]*t94171*t94172*t94173*(3.2E1/3.0)+gamma_aa[index]*gamma_bb[index]* \
               gcab*t94171*t94172*t94173*t94178*(3.2E1/3.0))+ccab1*gamma_aa[index]*gamma_bb[index]*t94205*t94171* \
               t94172*t94173*(3.2E1/9.0)-ccab2*gamma_aa[index]*gamma_bb[index]*t94206*t94171*t94172*t94173*(3.2E1/ \
               9.0)+ccab2*gamma_aa[index]*t94201*t94202*t94171*t94172*t94178*(8.0/3.0)+ccab2*gamma_bb[index]*t94202* \
               t94171*t94173*t94178*t94198*(8.0/3.0)+ccab2*gamma_aa[index]*gamma_bb[index]*t94202*(t94171*t94171) \
               *t94172*t94173*t94179*(3.2E1/9.0)-ccab3*gcab*t94171*t94190*1.0/(t94183*t94183*t94183)*t94195*t94178* \
               t94179*2.0+ccab3*gamma_bb[index]*gcab*t94171*t94190*t94173*t94191*t94179*4.0+ccab3*gamma_aa[index]* \
               gcab*t94171*t94172*t94191*t94195*t94179*4.0-ccab3*gamma_aa[index]*gamma_bb[index]*gcab*t94171*t94207* \
               t94172*t94173*t94178*(3.2E1/3.0)-ccab1*gamma_aa[index]*gamma_bb[index]*gcab*1.0/(t94204*t94204*t94204) \
               *t94171*t94172*t94173*t94178*(3.2E1/9.0))+(ccab1*gamma_aa[index]*gcab*t94172*t94281*(4.0/3.0)-ccab2* \
               t94202*t94171*t94179*t94198-ccab1*gamma_aa[index]*t94205*t94171*t94172*t94178*(4.0/3.0)+ccab2*gamma_aa[index]* \
               t94206*t94171*t94172*t94178*(8.0/3.0)+ccab3*gamma_aa[index]*gcab*t94171*t94207*t94172*t94179*4.0-ccab3* \
               gcab*t94171*t94190*t94191*t94178*t94179)*(-t94141+t94280+t94327+t94159-t94142*(t94303-t94234+t94362+ \
               t94282+t94292+t94123*t94170*t94333*t94164*t94165-t94123*t94224*t94164*t94165*t94295+t94123*t94160* \
               t94161*t94170*t94224*t94164*4.0-Aa*t94123*t94235*t94245*t94255*t94247*t94295*2.0-t94302*t94123*t94170* \
               t94235*t94255*t94247*t94296*t94297)+rho_b[index]*(-t94325+t94120*t94123*(t94325-(1.0/(t94310*t94310) \
               *t94305*(b2f*c*t94314*(1.0/3.0)+b4f*t94104*t94315*(2.0/3.0)+b1f*c*t94314*t94316*(1.0/6.0)+b3f*c*t94314* \
               t94127*(1.0/2.0)))/t94313+a1f*c*c0f*t94314*t94317*(2.0/3.0)-a1p*c*c0p*t94314*t94138*(2.0/3.0))+a1p* \
               c*c0p*t94314*t94138*(2.0/3.0))+t94120*t94123*t94326)+(ccab1*gamma_bb[index]*gcab*t94173*t94281*(4.0/ \
               3.0)-ccab2*t94201*t94202*t94171*t94179-ccab1*gamma_bb[index]*t94205*t94171*t94173*t94178*(4.0/3.0) \
               +ccab2*gamma_bb[index]*t94206*t94171*t94173*t94178*(8.0/3.0)+ccab3*gamma_bb[index]*gcab*t94171*t94207* \
               t94173*t94179*4.0-ccab3*gcab*t94171*t94191*t94195*t94178*t94179)*(t94280+t94327+t94159-t94279-t94142* \
               (t94303-t94234+t94282+t94292+t94123*t94170*t94164*t94165*(t94234+t94291-t94290*t94219*t94284*t94285- \
               a1p*c*c0p*t94208*t94156*(2.0/3.0))-t94123*t94224*t94253*t94164*t94165+t94220*t94123*t94160*t94161* \
               t94170*t94164*4.0-Aa*t94123*t94235*t94253*t94245*t94255*t94247*2.0+Aa*t94123*t94170*t94235*t94245* \
               t94247*(t94293-t94160*t94161*t94164*4.0)*2.0-t94302*t94123*t94170*t94235*t94255*t94247*t94296*t94297) \
               +rho_a[index]*(-t94277+t94120*t94123*(t94277-(1.0/(t94262*t94262)*t94257*(b2f*c*t94266*(1.0/3.0)+b4f* \
               t94104*t94267*(2.0/3.0)+b1f*c*t94266*t94268*(1.0/6.0)+b3f*c*t94102*t94266*(1.0/2.0)))/t94265+a1f*c* \
               c0f*t94266*t94269*(2.0/3.0)-a1p*c*c0p*t94115*t94266*(2.0/3.0))+a1p*c*c0p*t94115*t94266*(2.0/3.0))- \
               t94120*t94123*(t94278-t94279))+(ccab0+ccab1*gcab*t94281*t94178+ccab2*t94206*t94171*t94179+ccab3*gcab* \
               t94171*t94207*t94178*t94179)*(t94362+t94142*(t94350+t94342+t94347-t94334*t94343*t94227*t94158*2.0+ \
               t94123*t94253*t94164*t94165*(t94234+t94291-t94292-t94348)-a1p*c*c0p*t94156*t94328*(8.0/9.0)-t94123* \
               t94170*t94164*t94165*(t94350+t94342+t94347-t94334*t94343*t94227*t94158*2.0+1.0/(t94213*t94213*t94213) \
               *t94344*t94219*t94284*2.0-t94219*t94284*t94285*(b2f*c*t94328*(4.0/9.0)+b4f*t94104*t94329*(1.0E1/9.0) \
               +b1f*c*t94226*t94328*(2.0/9.0)+b3f*c*t94145*t94328*(2.0/3.0)-b1f*t94104*t94335*t94329*(1.0/3.6E1)+ \
               b3f*t94104*t94226*t94329*(1.0/1.2E1))-1.0/(t94213*t94213*t94213*t94213)*t94124*1.0/(t94216*t94216) \
               *t94344*t94219*(1.0/2.0)+a1f*c*c0f*t94217*t94328*(8.0/9.0)-a1p*c*c0p*t94156*t94328*(8.0/9.0)-a1f*c* \
               t94208*t94290*t94284*t94285*(2.0/3.0))+t94123*t94161*t94170*t94224*t94164*1.2E1-t94123*t94170*t94224* \
               t94351*t94165*2.0E1-t94123*t94331*t94333*t94164*t94165-t94123*t94331*t94224*t94165*t94248*4.0-t94123* \
               t94170*t94333*t94165*t94248*8.0+t94123*t94224*t94253*t94165*t94248*4.0+t94123*t94224*t94164*t94165* \
               t94359+t94123*t94160*t94331*t94161*t94224*t94164*4.0+t94123*t94160*t94161*t94224*t94253*t94164*4.0+ \
               Aa*t94123*t94331*t94360*t94235*t94245*t94247*2.0+Aa*t94123*t94235*t94253*t94245*t94353*t94247*2.0+ \
               Aa*t94123*t94235*t94245*t94255*t94247*t94359*2.0+Aa*t94123*t94170*t94235*t94245*t94247*(t94161*t94164* \
               1.2E1-t94351*t94165*2.0E1)*2.0-t94302*t94123*t94170*t94360*t94235*t94247*t94296*t94297+t94302*t94123* \
               t94331*t94235*t94255*t94247*t94296*t94297+t94302*t94123*t94170*t94235*t94353*t94247*t94296*t94297- \
               t94302*t94123*t94235*t94253*t94255*t94247*t94296*t94297-t94123*1.0/(t94241*t94241*t94241)*t94170*t94235* \
               t94361*t94255*t94247*t94296*2.0+t94123*t94170*t94235*t94255*t94247*t94296*t94297*(b2a*c*t94328*(4.0/ \
               9.0)+b4a*t94104*t94329*(1.0E1/9.0)+b1a*c*t94226*t94328*(2.0/9.0)+b3a*c*t94145*t94328*(2.0/3.0)-b1a* \
               t94104*t94335*t94329*(1.0/3.6E1)+b3a*t94104*t94226*t94329*(1.0/1.2E1))+Aa*a1a*c*t94123*t94170*t94360* \
               t94208*t94235*t94245*(2.0/3.0)-Aa*a1a*c*t94123*t94331*t94208*t94235*t94245*t94255*(2.0/3.0)-Aa*a1a* \
               c*t94123*t94170*t94208*t94235*t94245*t94353*(2.0/3.0)+Aa*a1a*c*t94123*t94208*t94235*t94253*t94245* \
               t94255*(2.0/3.0)-Aa*a1a*c*t94123*t94170*t94235*t94245*t94255*t94328*(8.0/9.0)+t94123*1.0/(t94241*t94241* \
               t94241*t94241)*t94170*t94235*1.0/(t94244*t94244)*t94361*t94236*t94255*t94247*(1.0/2.0)+a1a*c*t94302* \
               t94123*t94170*t94208*t94235*t94255*t94296*t94297*(2.0/3.0))-t94233*t94227*t94228*t94158*2.0+t94123* \
               t94170*t94164*t94165*(t94234+t94291-t94292-t94348)*2.0+a1p*c*c0p*t94208*t94156*(4.0/3.0)+t94123*t94331* \
               t94224*t94164*t94165-t94123*t94224*t94253*t94164*t94165+t94123*t94170*t94224*t94165*t94248*8.0-Aa* \
               t94123*t94170*t94360*t94235*t94245*t94247*2.0+Aa*t94123*t94331*t94235*t94245*t94255*t94247*2.0-Aa* \
               t94123*t94235*t94253*t94245*t94255*t94247*2.0-t94302*t94123*t94170*t94235*t94255*t94247*t94296*t94297* \
               2.0+Aa*a1a*c*t94123*t94170*t94208*t94235*t94245*t94255*(4.0/3.0));
        } else if (rho_a[index] > cutoff_) {
            v_rho_a_rho_b_[index] = 0.0;
        } else if (rho_b[index] > cutoff_) {
            v_rho_a_rho_b_[index] = 0.0;
        } else {
            v_rho_a_rho_b_[index] = 0.0;
        }

        //V_rho_b_rho_b
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t94364 = gcab*gcab;
            double t94368 = 1.0/pow(rho_a[index],8.0/3.0);
            double t94369 = gamma_aa[index]*t94368*(1.0/2.0);
            double t94370 = 1.0/pow(rho_b[index],8.0/3.0);
            double t94371 = gamma_bb[index]*t94370*(1.0/2.0);
            double t94365 = t94371+t94369;
            double t94366 = t94365*t94365;
            double t94367 = 1.0/pow(rho_b[index],1.1E1/3.0);
            double t94372 = gcab*t94365;
            double t94373 = t94372+1.0;
            double t94374 = t94364*t94366;
            double t94375 = gcab*t94365*2.0;
            double t94376 = t94374+t94375+1.0;
            double t94377 = t94364*t94366*3.0;
            double t94378 = gcab*t94364*t94365*t94366;
            double t94379 = gcab*t94365*3.0;
            double t94380 = t94377+t94378+t94379+1.0;
            double t94381 = rho_a[index]+rho_b[index];
            double t94382 = 1.0/pow(t94381,1.0/3.0);
            double t94383 = c*t94382;
            double t94384 = sqrt(t94383);
            double t94385 = b1p*t94384;
            double t94386 = pow(t94383,3.0/2.0);
            double t94387 = b3p*t94386;
            double t94388 = c*c;
            double t94389 = 1.0/pow(t94381,2.0/3.0);
            double t94390 = b4p*t94388*t94389;
            double t94391 = b2p*c*t94382;
            double t94392 = t94390+t94391+t94385+t94387;
            double t94393 = 1.0/pow(t94381,4.0/3.0);
            double t94394 = 1.0/c0p;
            double t94395 = 1.0/t94392;
            double t94396 = t94394*t94395*(1.0/2.0);
            double t94397 = t94396+1.0;
            double t94398 = a1p*c*t94382;
            double t94399 = t94398+1.0;
            double t94400 = rho_a[index]-rho_b[index];
            double t94401 = t94400*t94400;
            double t94402 = 1.0/t94381;
            double t94403 = t94400*t94402;
            double t94404 = two_13*2.0;
            double t94405 = t94404-2.0;
            double t94406 = 1.0/t94405;
            double t94407 = 1.0/c0f;
            double t94408 = b1f*t94384;
            double t94409 = b3f*t94386;
            double t94410 = b4f*t94388*t94389;
            double t94411 = b2f*c*t94382;
            double t94412 = t94410+t94411+t94408+t94409;
            double t94413 = 1.0/t94412;
            double t94414 = t94413*t94407*(1.0/2.0);
            double t94415 = t94414+1.0;
            double t94416 = log(t94415);
            double t94417 = a1f*c*t94382;
            double t94418 = t94417+1.0;
            double t94419 = log(t94397);
            double t94430 = c0f*t94416*t94418*2.0;
            double t94431 = c0p*t94419*t94399*2.0;
            double t94420 = t94430-t94431;
            double t94421 = t94403+1.0;
            double t94422 = pow(t94421,4.0/3.0);
            double t94423 = -t94403+1.0;
            double t94424 = pow(t94423,4.0/3.0);
            double t94425 = t94422+t94424-2.0;
            double t94426 = 1.0/(t94381*t94381);
            double t94427 = t94400*t94426;
            double t94428 = t94402+t94427;
            double t94429 = 1.0/(t94381*t94381*t94381*t94381);
            double t94432 = t94401*t94401;
            double t94433 = 1.0/pow(t94381,5.0/3.0);
            double t94434 = 1.0/sqrt(t94383);
            double t94435 = 1.0/t94397;
            double t94436 = 1.0/(t94392*t94392);
            double t94437 = b4p*t94433*t94388*(2.0/3.0);
            double t94438 = b2p*c*t94393*(1.0/3.0);
            double t94439 = b1p*c*t94434*t94393*(1.0/6.0);
            double t94440 = b3p*c*t94384*t94393*(1.0/2.0);
            double t94441 = t94440+t94437+t94438+t94439;
            double t94442 = 1.0/(t94381*t94381*t94381*t94381*t94381);
            double t94443 = 1.0/d2fz0;
            double t94444 = 1.0/Aa;
            double t94445 = b1a*t94384;
            double t94446 = b3a*t94386;
            double t94447 = b4a*t94388*t94389;
            double t94448 = b2a*c*t94382;
            double t94449 = t94445+t94446+t94447+t94448;
            double t94450 = 1.0/t94449;
            double t94451 = t94450*t94444*(1.0/2.0);
            double t94452 = t94451+1.0;
            double t94453 = log(t94452);
            double t94454 = a1a*c*t94382;
            double t94455 = t94454+1.0;
            double t94456 = pow(t94421,1.0/3.0);
            double t94457 = t94428*t94456*(4.0/3.0);
            double t94458 = pow(t94423,1.0/3.0);
            double t94522 = t94428*t94458*(4.0/3.0);
            double t94459 = -t94522+t94457;
            double t94460 = t94432*t94429;
            double t94461 = t94460-1.0;
            double t94462 = 1.0/pow(rho_b[index],1.0/3.0);
            double t94463 = c*t94462;
            double t94464 = sqrt(t94463);
            double t94465 = b1f*t94464;
            double t94466 = pow(t94463,3.0/2.0);
            double t94467 = b3f*t94466;
            double t94468 = 1.0/pow(rho_b[index],2.0/3.0);
            double t94469 = b4f*t94468*t94388;
            double t94470 = b2f*c*t94462;
            double t94471 = t94470+t94465+t94467+t94469;
            double t94472 = 1.0/pow(rho_b[index],4.0/3.0);
            double t94473 = b1p*t94464;
            double t94474 = b3p*t94466;
            double t94475 = b4p*t94468*t94388;
            double t94476 = b2p*c*t94462;
            double t94477 = t94473+t94474+t94475+t94476;
            double t94478 = 1.0/pow(rho_b[index],5.0/3.0);
            double t94479 = 1.0/sqrt(t94463);
            double t94480 = 1.0/t94471;
            double t94481 = t94407*t94480*(1.0/2.0);
            double t94482 = t94481+1.0;
            double t94483 = 1.0/t94477;
            double t94484 = t94483*t94394*(1.0/2.0);
            double t94485 = t94484+1.0;
            double t94486 = a1p*c*t94462;
            double t94487 = t94486+1.0;
            double t94488 = 1.0/t94485;
            double t94489 = 1.0/(t94477*t94477);
            double t94490 = b4p*t94388*t94478*(2.0/3.0);
            double t94491 = b2p*c*t94472*(1.0/3.0);
            double t94492 = b1p*c*t94472*t94479*(1.0/6.0);
            double t94493 = b3p*c*t94472*t94464*(1.0/2.0);
            double t94494 = t94490+t94491+t94492+t94493;
            double t94495 = t94494*t94487*t94488*t94489;
            double t94496 = log(t94485);
            double t94497 = pow(2.0,1.0/3.0);
            double t94498 = t94497*2.0;
            double t94499 = t94498-2.0;
            double t94500 = log(t94482);
            double t94501 = a1f*c*t94462;
            double t94502 = t94501+1.0;
            double t94503 = a1p*c*c0p*t94419*t94393*(2.0/3.0);
            double t94504 = 1.0/t94482;
            double t94505 = 1.0/(t94471*t94471);
            double t94506 = b4f*t94388*t94478*(2.0/3.0);
            double t94507 = b2f*c*t94472*(1.0/3.0);
            double t94508 = b1f*c*t94472*t94479*(1.0/6.0);
            double t94509 = b3f*c*t94472*t94464*(1.0/2.0);
            double t94510 = t94506+t94507+t94508+t94509;
            double t94511 = a1f*c*c0f*t94500*t94472*(2.0/3.0);
            double t94512 = a1p*c*c0p*t94472*t94496*(2.0/3.0);
            double t94513 = gamma_bb[index]*gamma_bb[index];
            double t94514 = gcaa*gcaa;
            double t94515 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
               rho_b[index]*rho_b[index]);
            double t94516 = 1.0/pow(rho_b[index],1.6E1/3.0);
            double t94517 = 1.0/t94376;
            double t94518 = 1.0/t94380;
            double t94519 = 1.0/t94373;
            double t94520 = 1.0/pow(t94381,7.0/3.0);
            double t94521 = 1.0/pow(t94381,8.0/3.0);
            double t94523 = 1.0/t94415;
            double t94524 = 1.0/(t94412*t94412);
            double t94525 = b4f*t94433*t94388*(2.0/3.0);
            double t94526 = b2f*c*t94393*(1.0/3.0);
            double t94527 = b1f*c*t94434*t94393*(1.0/6.0);
            double t94528 = b3f*c*t94384*t94393*(1.0/2.0);
            double t94529 = t94525+t94526+t94527+t94528;
            double t94530 = t94523*t94524*t94418*t94529;
            double t94532 = t94441*t94435*t94436*t94399;
            double t94533 = a1f*c*c0f*t94416*t94393*(2.0/3.0);
            double t94531 = t94503+t94530-t94532-t94533;
            double t94534 = t94441*t94441;
            double t94535 = 1.0/pow(t94383,3.0/2.0);
            double t94536 = b4p*t94521*t94388*(1.0E1/9.0);
            double t94537 = b2p*c*t94520*(4.0/9.0);
            double t94538 = b1p*c*t94520*t94434*(2.0/9.0);
            double t94539 = b3p*c*t94520*t94384*(2.0/3.0);
            double t94540 = b3p*t94521*t94434*t94388*(1.0/1.2E1);
            double t94541 = t94540+t94536+t94537+t94538+t94539-b1p*t94521*t94535*t94388*(1.0/3.6E1);
            double t94542 = 1.0/(t94392*t94392*t94392);
            double t94543 = t94542*t94435*t94534*t94399*2.0;
            double t94544 = t94529*t94529;
            double t94545 = 1.0/(t94397*t94397);
            double t94546 = 1.0/(t94392*t94392*t94392*t94392);
            double t94547 = t94426*2.0;
            double t94548 = 1.0/(t94381*t94381*t94381);
            double t94549 = t94400*t94548*2.0;
            double t94550 = t94547+t94549;
            double t94551 = t94428*t94428;
            double t94552 = a1p*c*c0p*t94520*t94419*(8.0/9.0);
            double t94553 = 1.0/(t94381*t94381*t94381*t94381*t94381*t94381);
            double t94554 = t94400*t94401*t94429*4.0;
            double t94555 = t94432*t94442*4.0;
            double t94556 = t94554+t94555;
            double t94557 = t94550*t94456*(4.0/3.0);
            double t94558 = 1.0/pow(t94421,2.0/3.0);
            double t94559 = t94551*t94558*(4.0/9.0);
            double t94560 = 1.0/pow(t94423,2.0/3.0);
            double t94561 = t94551*t94560*(4.0/9.0);
            double t94562 = t94561+t94557+t94559-t94550*t94458*(4.0/3.0);
            double t94563 = 1.0/t94452;
            double t94564 = 1.0/(t94449*t94449);
            double t94565 = b4a*t94433*t94388*(2.0/3.0);
            double t94566 = b2a*c*t94393*(1.0/3.0);
            double t94567 = b1a*c*t94434*t94393*(1.0/6.0);
            double t94568 = b3a*c*t94384*t94393*(1.0/2.0);
            double t94569 = t94565+t94566+t94567+t94568;
            double t94570 = t94569*t94569;
            double t94571 = 1.0/pow(rho_b[index],7.0/3.0);
            double t94572 = 1.0/pow(t94463,3.0/2.0);
            double t94573 = t94510*t94510;
            double t94574 = t94494*t94494;
            double t94575 = 1.0/(t94477*t94477*t94477);
            double t94576 = t94574*t94575*t94487*t94488*2.0;
            double t94577 = b4p*t94370*t94388*(1.0E1/9.0);
            double t94578 = b2p*c*t94571*(4.0/9.0);
            double t94579 = b3p*t94370*t94388*t94479*(1.0/1.2E1);
            double t94580 = b1p*c*t94571*t94479*(2.0/9.0);
            double t94581 = b3p*c*t94571*t94464*(2.0/3.0);
            double t94735 = b1p*t94370*t94572*t94388*(1.0/3.6E1);
            double t94582 = t94580+t94581-t94735+t94577+t94578+t94579;
            double t94583 = 1.0/(t94485*t94485);
            double t94584 = 1.0/(t94477*t94477*t94477*t94477);
            double t94585 = a1p*c*c0p*t94571*t94496*(8.0/9.0);
            double t94716 = t94510*t94502*t94504*t94505;
            double t94586 = t94511-t94512-t94716+t94495;
            double t94587 = 1.0/pow(rho_a[index],1.0/3.0);
            double t94588 = c*t94587;
            double t94589 = sqrt(t94588);
            double t94590 = pow(t94588,3.0/2.0);
            double t94591 = 1.0/pow(rho_a[index],2.0/3.0);
            double t94592 = b1p*t94589;
            double t94593 = b3p*t94590;
            double t94594 = b4p*t94591*t94388;
            double t94595 = b2p*c*t94587;
            double t94596 = t94592+t94593+t94594+t94595;
            double t94597 = 1.0/t94596;
            double t94598 = t94394*t94597*(1.0/2.0);
            double t94599 = t94598+1.0;
            double t94600 = log(t94599);
            double t94601 = a1p*c*t94587;
            double t94602 = t94601+1.0;
            double t94603 = c0p*t94600*t94602*2.0;
            double t94604 = c0f*t94500*t94502*2.0;
            double t94606 = c0p*t94487*t94496*2.0;
            double t94605 = t94604-t94606;
            double t94607 = t94420*t94432*t94406*t94425*t94429;
            double t94608 = Aa*t94406*t94425*t94443*t94461*t94453*t94455*2.0;
            double t94609 = 1.0/(t94373*t94373);
            double t94610 = 1.0/pow(rho_b[index],2.2E1/3.0);
            double t94611 = gamma_bb[index]*gcab*t94367*(8.0/3.0);
            double t94612 = gamma_bb[index]*t94364*t94365*t94367*(8.0/3.0);
            double t94613 = t94611+t94612;
            double t94614 = 1.0/(t94380*t94380);
            double t94615 = 1.0/pow(rho_b[index],1.4E1/3.0);
            double t94616 = 1.0/(t94376*t94376);
            double t94617 = gamma_bb[index]*gcab*t94367*4.0;
            double t94618 = gamma_bb[index]*gcab*t94364*t94366*t94367*4.0;
            double t94619 = gamma_bb[index]*t94364*t94365*t94367*8.0;
            double t94620 = t94617+t94618+t94619;
            double t94621 = pow(rho_b[index],5.0/3.0);
            double t94622 = 1.0/tau_b[index];
            double t94623 = C_k*t94621*t94622;
            double t94624 = t94623-1.0;
            double t94625 = t94624*t94624;
            double t94626 = t94623+1.0;
            double t94627 = t94625*t94625;
            double t94628 = gx*gx;
            double t94629 = gamma_bb[index]*gx*t94370;
            double t94630 = t94629+1.0;
            double t94631 = 1.0/t94630;
            double t94632 = gamma_bb[index]*gx*t94370*3.0;
            double t94633 = gamma_bb[index]*gx*t94513*t94515*t94628;
            double t94634 = t94513*t94516*t94628*3.0;
            double t94635 = t94632+t94633+t94634+1.0;
            double t94636 = 1.0/t94635;
            double t94637 = gamma_bb[index]*gx*t94370*2.0;
            double t94638 = t94513*t94516*t94628;
            double t94639 = t94637+t94638+1.0;
            double t94640 = 1.0/t94639;
            double t94641 = cxnl1*gamma_bb[index]*gx*t94370*t94631;
            double t94642 = cxnl3*gamma_bb[index]*gx*t94513*t94515*t94636*t94628;
            double t94643 = cxnl2*t94513*t94640*t94516*t94628;
            double t94644 = cxnl0+t94641+t94642+t94643;
            double t94645 = 1.0/t94626;
            double t94646 = pow(rho_b[index],4.0/3.0);
            double t94647 = 1.0/(t94626*t94626*t94626);
            double t94648 = 1.0/(t94626*t94626*t94626*t94626*t94626);
            double t94649 = C_k*C_k;
            double t94650 = 1.0/(tau_b[index]*tau_b[index]);
            double t94651 = 1.0/(t94626*t94626*t94626*t94626);
            double t94652 = 1.0/(t94626*t94626*t94626*t94626*t94626*t94626);
            double t94653 = 1.0/(t94626*t94626);
            double t94654 = t94624*t94645;
            double t94655 = t94624*t94627*t94648;
            double t94683 = t94624*t94625*t94647*2.0;
            double t94656 = t94654+t94655-t94683;
            double t94657 = 1.0/pow(rho_b[index],1.0E1);
            double t94660 = 1.0/pow(rho_b[index],1.9E1/3.0);
            double t94666 = gamma_bb[index]*gx*t94367*(1.6E1/3.0);
            double t94667 = t94513*t94660*t94628*(1.6E1/3.0);
            double t94658 = t94666+t94667;
            double t94659 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
               rho_b[index]*rho_b[index]*rho_b[index]);
            double t94661 = 1.0/(t94635*t94635);
            double t94662 = gamma_bb[index]*gx*t94367*8.0;
            double t94663 = gamma_bb[index]*gx*t94513*t94628*t94659*8.0;
            double t94664 = t94513*t94660*t94628*1.6E1;
            double t94665 = t94662+t94663+t94664;
            double t94668 = 1.0/(t94639*t94639);
            double t94669 = pow(rho_b[index],2.0/3.0);
            double t94670 = 1.0/(t94630*t94630);
            double t94671 = 1.0/(t94630*t94630*t94630);
            double t94672 = t94658*t94658;
            double t94673 = 1.0/(t94639*t94639*t94639);
            double t94674 = gamma_bb[index]*gx*t94615*(8.8E1/3.0);
            double t94675 = gamma_bb[index]*gx*t94513*t94628*t94657*7.2E1;
            double t94676 = t94610*t94513*t94628*(3.04E2/3.0);
            double t94677 = t94674+t94675+t94676;
            double t94678 = t94665*t94665;
            double t94679 = 1.0/(t94635*t94635*t94635);
            double t94680 = gamma_bb[index]*gx*t94615*(1.76E2/9.0);
            double t94681 = t94610*t94513*t94628*(3.04E2/9.0);
            double t94682 = t94680+t94681;
            double t94684 = cxnl1*gamma_bb[index]*gx*t94631*t94367*(8.0/3.0);
            double t94685 = cxnl3*gamma_bb[index]*gx*t94513*t94636*t94628*t94659*8.0;
            double t94686 = cxnl2*t94513*t94640*t94660*t94628*(1.6E1/3.0);
            double t94687 = t94684+t94685+t94686-cxnl1*t94513*t94660*t94670*t94628*(8.0/3.0)-cxnl2*t94513*t94516* \
               t94628*t94658*t94668-cxnl3*gamma_bb[index]*gx*t94513*t94515*t94661*t94628*t94665;
            double t94688 = C_k*t94622*t94645*t94669*(5.0/3.0);
            double t94689 = C_k*t94622*t94624*t94651*t94625*t94669*1.0E1;
            double t94690 = C_k*t94622*t94627*t94648*t94669*(2.5E1/3.0);
            double t94691 = t94690+t94688+t94689-C_k*t94622*t94624*t94653*t94669*(5.0/3.0)-C_k*t94622*t94625* \
               t94647*t94669*1.0E1-C_k*t94622*t94624*t94652*t94627*t94669*(2.5E1/3.0);
            double t94692 = t94406*t94605*t94499;
            double t94693 = t94606+t94692;
            double t94694 = gamma_bb[index]*gcaa*t94370;
            double t94695 = t94694+1.0;
            double t94696 = 1.0/t94695;
            double t94697 = gamma_bb[index]*gcaa*t94370*3.0;
            double t94698 = gamma_bb[index]*gcaa*t94513*t94514*t94515;
            double t94699 = t94513*t94514*t94516*3.0;
            double t94700 = t94697+t94698+t94699+1.0;
            double t94701 = 1.0/t94700;
            double t94702 = gamma_bb[index]*gcaa*t94370*2.0;
            double t94703 = t94513*t94514*t94516;
            double t94704 = t94702+t94703+1.0;
            double t94705 = 1.0/t94704;
            double t94706 = 1.0/(t94695*t94695);
            double t94707 = gamma_bb[index]*gcaa*t94367*(1.6E1/3.0);
            double t94708 = t94513*t94514*t94660*(1.6E1/3.0);
            double t94709 = t94707+t94708;
            double t94710 = gamma_bb[index]*gcaa*t94367*8.0;
            double t94711 = gamma_bb[index]*gcaa*t94513*t94514*t94659*8.0;
            double t94712 = t94513*t94514*t94660*1.6E1;
            double t94713 = t94710+t94711+t94712;
            double t94714 = 1.0/(t94700*t94700);
            double t94715 = 1.0/(t94704*t94704);
            double t94717 = t94406*t94586*t94499;
            double t94718 = ccaa1*gamma_bb[index]*gcaa*t94367*t94696*(8.0/3.0);
            double t94719 = ccaa3*gamma_bb[index]*gcaa*t94701*t94513*t94514*t94659*8.0;
            double t94720 = ccaa2*t94513*t94514*t94660*t94705*(1.6E1/3.0);
            double t94721 = t94720+t94718+t94719-ccaa1*t94513*t94514*t94660*t94706*(8.0/3.0)-ccaa2*t94513*t94514* \
               t94516*t94715*t94709-ccaa3*gamma_bb[index]*gcaa*t94513*t94514*t94515*t94713*t94714;
            double t94722 = t94512+t94717-t94495;
            double t94723 = ccaa1*gamma_bb[index]*gcaa*t94370*t94696;
            double t94724 = ccaa3*gamma_bb[index]*gcaa*t94701*t94513*t94514*t94515;
            double t94725 = ccaa2*t94513*t94514*t94516*t94705;
            double t94726 = ccaa0+t94723+t94724+t94725;
            double t94727 = 1.0/(t94471*t94471*t94471);
            double t94728 = b4f*t94370*t94388*(1.0E1/9.0);
            double t94729 = b2f*c*t94571*(4.0/9.0);
            double t94730 = b3f*t94370*t94388*t94479*(1.0/1.2E1);
            double t94731 = b1f*c*t94571*t94479*(2.0/9.0);
            double t94732 = b3f*c*t94571*t94464*(2.0/3.0);
            double t94733 = t94730+t94731+t94732+t94728+t94729-b1f*t94370*t94572*t94388*(1.0/3.6E1);
            double t94734 = t94502*t94504*t94505*t94733;
            double t94736 = t94582*t94487*t94488*t94489;
            double t94737 = 1.0/(t94482*t94482);
            double t94738 = 1.0/(t94471*t94471*t94471*t94471);
            double t94739 = t94502*t94407*t94573*t94737*t94738*(1.0/2.0);
            double t94740 = t94394*t94574*t94583*t94584*t94487*(1.0/2.0);
            double t94741 = a1f*c*t94510*t94504*t94505*t94472*(2.0/3.0);
            double t94742 = a1p*c*t94472*t94494*t94488*t94489*(2.0/3.0);
            v_rho_b_rho_b_[index] = (ccab1*gamma_bb[index]*gcab*t94519*t94367*(4.0/3.0)-ccab2*t94613*t94364*t94616* \
               t94366+ccab2*gamma_bb[index]*t94364*t94517*t94365*t94367*(8.0/3.0)-ccab1*gamma_bb[index]*t94364*t94365* \
               t94609*t94367*(4.0/3.0)+ccab3*gamma_bb[index]*gcab*t94364*t94518*t94366*t94367*4.0-ccab3*gcab*t94620* \
               t94614*t94364*t94365*t94366)*(t94431+t94607+t94608+rho_b[index]*(t94512-t94495+t94406*t94499*(t94511+ \
               t94495-t94510*t94502*t94504*t94505-a1p*c*c0p*t94472*t94496*(2.0/3.0)))-t94381*(t94503-t94441*t94435* \
               t94436*t94399+t94420*t94432*t94406*t94442*t94425*4.0-t94432*t94531*t94406*t94425*t94429+t94420*t94432* \
               t94406*t94429*t94459+t94400*t94401*t94420*t94406*t94425*t94429*4.0+Aa*t94406*t94425*t94443*t94453* \
               t94455*t94556*2.0+Aa*t94406*t94443*t94461*t94453*t94455*t94459*2.0-t94406*t94425*t94443*t94461*t94455* \
               t94563*t94564*t94569+Aa*a1a*c*t94406*t94425*t94443*t94461*t94453*t94393*(2.0/3.0))-c0p*t94487*t94496* \
               2.0-t94406*t94605*t94499)*2.0+t94722*t94726*2.0+t94721*t94693*2.0+(rho_b[index]*t94693+rho_a[index]* \
               (t94603-t94406*t94499*(t94603-c0f*log((t94407*(1.0/2.0))/(b1f*t94589+b3f*t94590+b2f*c*t94587+b4f*t94591* \
               t94388)+1.0)*(a1f*c*t94587+1.0)*2.0))-t94381*(t94431+t94607+t94608))*(-ccab2*t94364*t94616*t94366* \
               (gamma_bb[index]*gcab*t94615*(8.8E1/9.0)+t94610*t94513*t94364*(3.2E1/9.0)+gamma_bb[index]*t94615*t94364* \
               t94365*(8.8E1/9.0))+ccab2*(t94613*t94613)*t94364*t94366*1.0/(t94376*t94376*t94376)*2.0+ccab1*gamma_bb[index]* \
               gcab*t94615*t94519*(4.4E1/9.0)+ccab2*t94610*t94513*t94364*t94517*(3.2E1/9.0)-ccab1*t94610*t94513*t94364* \
               t94609*(3.2E1/9.0)+ccab2*gamma_bb[index]*t94615*t94364*t94517*t94365*(8.8E1/9.0)-ccab1*gamma_bb[index]* \
               t94615*t94364*t94365*t94609*(4.4E1/9.0)+ccab3*gcab*(t94620*t94620)*1.0/(t94380*t94380*t94380)*t94364* \
               t94365*t94366*2.0+ccab3*gamma_bb[index]*gcab*t94615*t94364*t94518*t94366*(4.4E1/3.0)-ccab2*gamma_bb[index]* \
               t94613*t94364*t94616*t94365*t94367*(1.6E1/3.0)+ccab3*gcab*t94610*t94513*t94364*t94365*t94518*(3.2E1/ \
               3.0)+ccab1*gcab*t94610*t94513*t94364*1.0/(t94373*t94373*t94373)*t94365*(3.2E1/9.0)-ccab3*gcab*t94614* \
               t94364*t94365*t94366*(gamma_bb[index]*gcab*t94615*(4.4E1/3.0)+t94610*t94513*t94364*(3.2E1/3.0)+gamma_bb[index]* \
               t94615*t94364*t94365*(8.8E1/3.0)+gamma_bb[index]*gcab*t94615*t94364*t94366*(4.4E1/3.0)+gcab*t94610* \
               t94513*t94364*t94365*(3.2E1/3.0))-ccab3*gamma_bb[index]*gcab*t94620*t94614*t94364*t94366*t94367*8.0) \
               -(X-1.0)*(-c0*t94646*(t94644*(t94650*t94653*t94646*t94649*(5.0E1/9.0)-C_k*t94622*t94462*t94645*(1.0E1/ \
               9.0)+C_k*t94622*t94462*t94624*t94653*(1.0E1/9.0)+C_k*t94622*t94462*t94625*t94647*(2.0E1/3.0)-C_k*t94622* \
               t94462*t94627*t94648*(5.0E1/9.0)-t94650*t94651*t94625*t94646*t94649*1.0E2+t94650*t94652*t94627*t94646* \
               t94649*(1.25E3/9.0)+t94650*t94624*t94646*t94647*t94649*(2.5E2/9.0)+t94650*t94624*t94625*t94646*t94648* \
               t94649*(1.0E2/9.0)-t94650*t94624*1.0/(t94626*t94626*t94626*t94626*t94626*t94626*t94626)*t94627*t94646* \
               t94649*(2.5E2/3.0)-C_k*t94622*t94462*t94624*t94651*t94625*(2.0E1/3.0)+C_k*t94622*t94462*t94624*t94652* \
               t94627*(5.0E1/9.0))-t94656*(cxnl1*gamma_bb[index]*gx*t94631*t94615*(8.8E1/9.0)+cxnl2*t94610*t94513* \
               t94640*t94628*(3.04E2/9.0)-cxnl1*t94610*t94513*t94670*t94628*2.4E1+cxnl2*t94513*t94516*t94672*t94628* \
               t94673*2.0-cxnl2*t94513*t94516*t94628*t94682*t94668-cxnl2*t94513*t94660*t94628*t94658*t94668*(3.2E1/ \
               3.0)+cxnl1*gamma_bb[index]*gx*t94513*t94671*t94628*t94657*(1.28E2/9.0)+cxnl3*gamma_bb[index]*gx*t94513* \
               t94636*t94628*t94657*7.2E1-cxnl3*gamma_bb[index]*gx*t94513*t94515*t94661*t94628*t94677-cxnl3*gamma_bb[index]* \
               gx*t94513*t94661*t94628*t94665*t94659*1.6E1+cxnl3*gamma_bb[index]*gx*t94513*t94515*t94628*t94678*t94679* \
               2.0)+t94691*t94687*2.0-cx1*gamma_bb[index]*gx*t94631*t94615*(8.8E1/9.0)+cx1*t94610*t94513*t94670*t94628* \
               2.4E1-cx2*t94610*t94513*t94640*t94628*(3.04E2/9.0)-cx2*t94513*t94516*t94672*t94628*t94673*2.0+cx2* \
               t94513*t94516*t94628*t94682*t94668+cx2*t94513*t94660*t94628*t94658*t94668*(3.2E1/3.0)-cx1*gamma_bb[index]* \
               gx*t94513*t94671*t94628*t94657*(1.28E2/9.0)-cx3*gamma_bb[index]*gx*t94513*t94636*t94628*t94657*7.2E1+ \
               cx3*gamma_bb[index]*gx*t94513*t94515*t94661*t94628*t94677+cx3*gamma_bb[index]*gx*t94513*t94661*t94628* \
               t94665*t94659*1.6E1-cx3*gamma_bb[index]*gx*t94513*t94515*t94628*t94678*t94679*2.0)+c0*pow(rho_b[index],1.0/ \
               3.0)*(t94644*t94691-t94656*t94687-cx1*gamma_bb[index]*gx*t94631*t94367*(8.0/3.0)+cx1*t94513*t94660* \
               t94670*t94628*(8.0/3.0)-cx2*t94513*t94640*t94660*t94628*(1.6E1/3.0)+cx2*t94513*t94516*t94628*t94658* \
               t94668-cx3*gamma_bb[index]*gx*t94513*t94636*t94628*t94659*8.0+cx3*gamma_bb[index]*gx*t94513*t94515* \
               t94661*t94628*t94665)*(8.0/3.0)+c0*t94468*(cx0+t94644*t94656+cx1*gamma_bb[index]*gx*t94370*t94631+ \
               cx2*t94513*t94640*t94516*t94628+cx3*gamma_bb[index]*gx*t94513*t94515*t94636*t94628)*(4.0/9.0))+(ccab0+ \
               ccab1*gcab*t94365*t94519+ccab2*t94364*t94517*t94366+ccab3*gcab*t94364*t94365*t94518*t94366)*(-rho_b[index]* \
               (t94740+t94742+t94736-t94576-t94585+t94406*t94499*(t94741+t94734+t94576+t94585+t94739-t94502*t94504* \
               t94573*t94727*2.0-t94582*t94487*t94488*t94489-a1f*c*c0f*t94500*t94571*(8.0/9.0)-t94394*t94574*t94583* \
               t94584*t94487*(1.0/2.0)-a1p*c*t94472*t94494*t94488*t94489*(2.0/3.0)))-t94381*(t94543+t94552-t94541* \
               t94435*t94436*t94399-t94432*t94406*t94425*t94429*(t94543+t94552-t94541*t94435*t94436*t94399-1.0/(t94412* \
               t94412*t94412)*t94523*t94418*t94544*2.0+t94523*t94524*t94418*(b2f*c*t94520*(4.0/9.0)+b4f*t94521*t94388* \
               (1.0E1/9.0)+b1f*c*t94520*t94434*(2.0/9.0)+b3f*c*t94520*t94384*(2.0/3.0)-b1f*t94521*t94535*t94388*(1.0/ \
               3.6E1)+b3f*t94521*t94434*t94388*(1.0/1.2E1))+1.0/(t94412*t94412*t94412*t94412)*1.0/(t94415*t94415) \
               *t94407*t94418*t94544*(1.0/2.0)-a1f*c*c0f*t94520*t94416*(8.0/9.0)-t94534*t94545*t94546*t94394*t94399* \
               (1.0/2.0)+a1f*c*t94523*t94524*t94393*t94529*(2.0/3.0)-a1p*c*t94441*t94435*t94436*t94393*(2.0/3.0)) \
               +t94401*t94420*t94406*t94425*t94429*1.2E1+t94420*t94432*t94406*t94425*t94553*2.0E1-t94432*t94531*t94406* \
               t94442*t94425*8.0+t94420*t94432*t94406*t94442*t94459*8.0+t94420*t94432*t94406*t94562*t94429-t94432* \
               t94531*t94406*t94429*t94459*2.0-t94534*t94545*t94546*t94394*t94399*(1.0/2.0)+t94400*t94401*t94420* \
               t94406*t94442*t94425*3.2E1-t94400*t94401*t94531*t94406*t94425*t94429*8.0+t94400*t94401*t94420*t94406* \
               t94429*t94459*8.0-a1p*c*t94441*t94435*t94436*t94393*(2.0/3.0)+Aa*t94406*t94443*t94461*t94453*t94562* \
               t94455*2.0+Aa*t94406*t94443*t94453*t94455*t94556*t94459*4.0+Aa*t94406*t94425*t94443*t94453*t94455* \
               (t94401*t94429*1.2E1+t94432*t94553*2.0E1+t94400*t94401*t94442*3.2E1)*2.0-t94406*t94425*t94443*t94455* \
               t94563*t94564*t94556*t94569*2.0-t94406*t94443*t94461*t94455*t94563*t94564*t94459*t94569*2.0+t94406* \
               t94425*t94443*t94461*t94570*t94455*t94563*1.0/(t94449*t94449*t94449)*2.0-t94406*t94425*t94443*t94461* \
               t94455*t94563*t94564*(b2a*c*t94520*(4.0/9.0)+b4a*t94521*t94388*(1.0E1/9.0)+b1a*c*t94520*t94434*(2.0/ \
               9.0)+b3a*c*t94520*t94384*(2.0/3.0)-b1a*t94521*t94535*t94388*(1.0/3.6E1)+b3a*t94521*t94434*t94388*(1.0/ \
               1.2E1))+Aa*a1a*c*t94520*t94406*t94425*t94443*t94461*t94453*(8.0/9.0)+Aa*a1a*c*t94406*t94425*t94443* \
               t94453*t94393*t94556*(4.0/3.0)+Aa*a1a*c*t94406*t94443*t94461*t94453*t94393*t94459*(4.0/3.0)-t94406* \
               t94425*t94443*1.0/(t94452*t94452)*t94461*t94444*t94570*t94455*1.0/(t94449*t94449*t94449*t94449)*(1.0/ \
               2.0)-a1a*c*t94406*t94425*t94443*t94461*t94563*t94393*t94564*t94569*(2.0/3.0))-t94406*t94586*t94499* \
               2.0-t94441*t94435*t94436*t94399*2.0+t94494*t94487*t94488*t94489*2.0+a1p*c*c0p*t94419*t94393*(4.0/3.0) \
               -a1p*c*c0p*t94472*t94496*(4.0/3.0)+t94420*t94432*t94406*t94442*t94425*8.0-t94432*t94531*t94406*t94425* \
               t94429*2.0+t94420*t94432*t94406*t94429*t94459*2.0+t94400*t94401*t94420*t94406*t94425*t94429*8.0+Aa* \
               t94406*t94425*t94443*t94453*t94455*t94556*4.0+Aa*t94406*t94443*t94461*t94453*t94455*t94459*4.0-t94406* \
               t94425*t94443*t94461*t94455*t94563*t94564*t94569*2.0+Aa*a1a*c*t94406*t94425*t94443*t94461*t94453*t94393* \
               (4.0/3.0))+rho_b[index]*t94726*(t94740+t94742+t94736-t94576-t94585-t94406*t94499*(t94740-t94741+t94742- \
               t94734+t94736-t94576-t94585-t94739+t94502*t94504*t94573*t94727*2.0+a1f*c*c0f*t94500*t94571*(8.0/9.0) \
               ))-rho_b[index]*t94693*(ccaa1*gamma_bb[index]*gcaa*t94615*t94696*(8.8E1/9.0)-ccaa1*t94610*t94513*t94514* \
               t94706*2.4E1+ccaa2*t94610*t94513*t94514*t94705*(3.04E2/9.0)-ccaa2*t94513*t94514*t94660*t94715*t94709* \
               (3.2E1/3.0)-ccaa2*t94513*t94514*t94516*t94715*(gamma_bb[index]*gcaa*t94615*(1.76E2/9.0)+t94610*t94513* \
               t94514*(3.04E2/9.0))+ccaa2*t94513*t94514*1.0/(t94704*t94704*t94704)*t94516*(t94709*t94709)*2.0+ccaa3* \
               gamma_bb[index]*gcaa*t94701*t94513*t94514*t94657*7.2E1+ccaa1*gamma_bb[index]*gcaa*t94513*t94514*t94657* \
               1.0/(t94695*t94695*t94695)*(1.28E2/9.0)+ccaa3*gamma_bb[index]*gcaa*1.0/(t94700*t94700*t94700)*t94513* \
               t94514*t94515*(t94713*t94713)*2.0-ccaa3*gamma_bb[index]*gcaa*t94513*t94514*t94515*t94714*(gamma_bb[index]* \
               gcaa*t94615*(8.8E1/3.0)+t94610*t94513*t94514*(3.04E2/3.0)+gamma_bb[index]*gcaa*t94513*t94514*t94657* \
               7.2E1)-ccaa3*gamma_bb[index]*gcaa*t94513*t94514*t94713*t94714*t94659*1.6E1)-rho_b[index]*t94721*t94722* \
               2.0;
        } else if (rho_a[index] > cutoff_) {
            v_rho_b_rho_b_[index] = 0.0;
        } else if (rho_b[index] > cutoff_) {
            double t96573 = 1.0/pow(rho_b[index],1.0/3.0);
            double t96574 = c*t96573;
            double t96575 = sqrt(t96574);
            double t96576 = b1f*t96575;
            double t96577 = pow(t96574,3.0/2.0);
            double t96578 = b3f*t96577;
            double t96579 = c*c;
            double t96580 = 1.0/pow(rho_b[index],2.0/3.0);
            double t96581 = b4f*t96580*t96579;
            double t96582 = b2f*c*t96573;
            double t96583 = t96581+t96582+t96576+t96578;
            double t96584 = 1.0/pow(rho_b[index],4.0/3.0);
            double t96585 = b1p*t96575;
            double t96586 = b3p*t96577;
            double t96587 = b4p*t96580*t96579;
            double t96588 = b2p*c*t96573;
            double t96589 = t96585+t96586+t96587+t96588;
            double t96590 = 1.0/pow(rho_b[index],5.0/3.0);
            double t96591 = 1.0/sqrt(t96574);
            double t96592 = 1.0/c0f;
            double t96593 = 1.0/t96583;
            double t96594 = t96592*t96593*(1.0/2.0);
            double t96595 = t96594+1.0;
            double t96596 = 1.0/c0p;
            double t96597 = 1.0/t96589;
            double t96598 = t96596*t96597*(1.0/2.0);
            double t96599 = t96598+1.0;
            double t96600 = a1p*c*t96573;
            double t96601 = t96600+1.0;
            double t96602 = 1.0/t96599;
            double t96603 = 1.0/(t96589*t96589);
            double t96604 = b4p*t96590*t96579*(2.0/3.0);
            double t96605 = b2p*c*t96584*(1.0/3.0);
            double t96606 = b1p*c*t96591*t96584*(1.0/6.0);
            double t96607 = b3p*c*t96575*t96584*(1.0/2.0);
            double t96608 = t96604+t96605+t96606+t96607;
            double t96609 = t96601*t96602*t96603*t96608;
            double t96610 = log(t96599);
            double t96611 = 1.0/pow(rho_b[index],8.0/3.0);
            double t96612 = gamma_bb[index]*gamma_bb[index];
            double t96613 = gcaa*gcaa;
            double t96614 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
               rho_b[index]*rho_b[index]);
            double t96615 = 1.0/pow(rho_b[index],1.6E1/3.0);
            double t96616 = pow(2.0,1.0/3.0);
            double t96617 = t96616*2.0;
            double t96618 = t96617-2.0;
            double t96619 = two_13*2.0;
            double t96620 = t96619-2.0;
            double t96621 = 1.0/t96620;
            double t96622 = log(t96595);
            double t96623 = a1f*c*t96573;
            double t96624 = t96623+1.0;
            double t96625 = gamma_bb[index]*gcaa*t96611;
            double t96626 = t96625+1.0;
            double t96627 = 1.0/t96626;
            double t96628 = gamma_bb[index]*gcaa*t96611*3.0;
            double t96629 = gamma_bb[index]*gcaa*t96612*t96613*t96614;
            double t96630 = t96612*t96613*t96615*3.0;
            double t96631 = t96630+t96628+t96629+1.0;
            double t96632 = 1.0/t96631;
            double t96633 = gamma_bb[index]*gcaa*t96611*2.0;
            double t96634 = t96612*t96613*t96615;
            double t96635 = t96633+t96634+1.0;
            double t96636 = 1.0/t96635;
            double t96637 = 1.0/pow(rho_b[index],1.9E1/3.0);
            double t96638 = 1.0/pow(rho_b[index],1.1E1/3.0);
            double t96639 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
               rho_b[index]*rho_b[index]*rho_b[index]);
            double t96640 = c0f*t96622*t96624*2.0;
            double t96641 = c0p*t96601*t96610*2.0;
            double t96642 = 1.0/pow(rho_b[index],1.0E1);
            double t96643 = 1.0/pow(rho_b[index],2.2E1/3.0);
            double t96644 = 1.0/(t96626*t96626);
            double t96645 = gamma_bb[index]*gcaa*t96638*(1.6E1/3.0);
            double t96646 = t96612*t96613*t96637*(1.6E1/3.0);
            double t96647 = t96645+t96646;
            double t96648 = gamma_bb[index]*gcaa*t96638*8.0;
            double t96649 = gamma_bb[index]*gcaa*t96612*t96613*t96639*8.0;
            double t96650 = t96612*t96613*t96637*1.6E1;
            double t96651 = t96650+t96648+t96649;
            double t96652 = 1.0/(t96631*t96631);
            double t96653 = 1.0/pow(rho_b[index],1.4E1/3.0);
            double t96654 = 1.0/(t96635*t96635);
            double t96655 = 1.0/t96595;
            double t96656 = 1.0/(t96583*t96583);
            double t96657 = b4f*t96590*t96579*(2.0/3.0);
            double t96658 = b2f*c*t96584*(1.0/3.0);
            double t96659 = b1f*c*t96591*t96584*(1.0/6.0);
            double t96660 = b3f*c*t96575*t96584*(1.0/2.0);
            double t96661 = t96660+t96657+t96658+t96659;
            double t96662 = a1f*c*c0f*t96622*t96584*(2.0/3.0);
            double t96663 = a1p*c*c0p*t96610*t96584*(2.0/3.0);
            double t96664 = ccaa1*gamma_bb[index]*gcaa*t96627*t96638*(8.0/3.0);
            double t96665 = ccaa3*gamma_bb[index]*gcaa*t96612*t96613*t96632*t96639*8.0;
            double t96666 = ccaa2*t96612*t96613*t96636*t96637*(1.6E1/3.0);
            double t96667 = t96664+t96665+t96666-ccaa1*t96612*t96613*t96644*t96637*(8.0/3.0)-ccaa2*t96612*t96613* \
               t96615*t96654*t96647-ccaa3*gamma_bb[index]*gcaa*t96612*t96613*t96614*t96651*t96652;
            double t96668 = ccaa1*gamma_bb[index]*gcaa*t96611*t96627;
            double t96669 = ccaa3*gamma_bb[index]*gcaa*t96612*t96613*t96614*t96632;
            double t96670 = ccaa2*t96612*t96613*t96615*t96636;
            double t96671 = ccaa0+t96670+t96668+t96669;
            double t96672 = 1.0/pow(rho_b[index],7.0/3.0);
            double t96673 = 1.0/pow(t96574,3.0/2.0);
            double t96674 = t96661*t96661;
            double t96675 = t96608*t96608;
            double t96676 = 1.0/(t96589*t96589*t96589);
            double t96677 = t96601*t96602*t96675*t96676*2.0;
            double t96678 = b4p*t96611*t96579*(1.0E1/9.0);
            double t96679 = b2p*c*t96672*(4.0/9.0);
            double t96680 = b3p*t96611*t96591*t96579*(1.0/1.2E1);
            double t96681 = b1p*c*t96591*t96672*(2.0/9.0);
            double t96682 = b3p*c*t96672*t96575*(2.0/3.0);
            double t96683 = t96680+t96681+t96682+t96678+t96679-b1p*t96611*t96673*t96579*(1.0/3.6E1);
            double t96684 = 1.0/(t96599*t96599);
            double t96685 = 1.0/(t96589*t96589*t96589*t96589);
            double t96686 = a1p*c*c0p*t96610*t96672*(8.0/9.0);
            double t96687 = pow(rho_b[index],5.0/3.0);
            double t96688 = 1.0/tau_b[index];
            double t96689 = C_k*t96687*t96688;
            double t96690 = t96689-1.0;
            double t96691 = t96690*t96690;
            double t96692 = t96689+1.0;
            double t96693 = t96691*t96691;
            double t96694 = gx*gx;
            double t96695 = gamma_bb[index]*gx*t96611;
            double t96696 = t96695+1.0;
            double t96697 = 1.0/t96696;
            double t96698 = gamma_bb[index]*gx*t96611*3.0;
            double t96699 = gamma_bb[index]*gx*t96612*t96614*t96694;
            double t96700 = t96612*t96615*t96694*3.0;
            double t96701 = t96700+t96698+t96699+1.0;
            double t96702 = 1.0/t96701;
            double t96703 = gamma_bb[index]*gx*t96611*2.0;
            double t96704 = t96612*t96615*t96694;
            double t96705 = t96703+t96704+1.0;
            double t96706 = 1.0/t96705;
            double t96707 = X-1.0;
            double t96708 = cxnl1*gamma_bb[index]*gx*t96611*t96697;
            double t96709 = cxnl3*gamma_bb[index]*gx*t96612*t96702*t96614*t96694;
            double t96710 = cxnl2*t96612*t96615*t96706*t96694;
            double t96711 = cxnl0+t96710+t96708+t96709;
            double t96712 = 1.0/t96692;
            double t96713 = pow(rho_b[index],4.0/3.0);
            double t96714 = 1.0/(t96692*t96692*t96692);
            double t96715 = 1.0/(t96692*t96692*t96692*t96692*t96692);
            double t96716 = C_k*C_k;
            double t96717 = 1.0/(tau_b[index]*tau_b[index]);
            double t96718 = 1.0/(t96692*t96692*t96692*t96692);
            double t96719 = 1.0/(t96692*t96692*t96692*t96692*t96692*t96692);
            double t96720 = 1.0/(t96692*t96692);
            double t96721 = t96712*t96690;
            double t96722 = t96715*t96690*t96693;
            double t96747 = t96714*t96690*t96691*2.0;
            double t96723 = t96721+t96722-t96747;
            double t96730 = gamma_bb[index]*gx*t96638*(1.6E1/3.0);
            double t96731 = t96612*t96637*t96694*(1.6E1/3.0);
            double t96724 = t96730+t96731;
            double t96725 = 1.0/(t96701*t96701);
            double t96726 = gamma_bb[index]*gx*t96638*8.0;
            double t96727 = gamma_bb[index]*gx*t96612*t96639*t96694*8.0;
            double t96728 = t96612*t96637*t96694*1.6E1;
            double t96729 = t96726+t96727+t96728;
            double t96732 = 1.0/(t96705*t96705);
            double t96733 = pow(rho_b[index],2.0/3.0);
            double t96734 = 1.0/(t96696*t96696);
            double t96735 = 1.0/(t96696*t96696*t96696);
            double t96736 = t96724*t96724;
            double t96737 = 1.0/(t96705*t96705*t96705);
            double t96738 = gamma_bb[index]*gx*t96653*(8.8E1/3.0);
            double t96739 = gamma_bb[index]*gx*t96612*t96642*t96694*7.2E1;
            double t96740 = t96612*t96643*t96694*(3.04E2/3.0);
            double t96741 = t96740+t96738+t96739;
            double t96742 = t96729*t96729;
            double t96743 = 1.0/(t96701*t96701*t96701);
            double t96744 = gamma_bb[index]*gx*t96653*(1.76E2/9.0);
            double t96745 = t96612*t96643*t96694*(3.04E2/9.0);
            double t96746 = t96744+t96745;
            double t96748 = cxnl1*gamma_bb[index]*gx*t96638*t96697*(8.0/3.0);
            double t96749 = cxnl3*gamma_bb[index]*gx*t96612*t96702*t96639*t96694*8.0;
            double t96750 = cxnl2*t96612*t96706*t96637*t96694*(1.6E1/3.0);
            double t96751 = t96750+t96748+t96749-cxnl1*t96612*t96734*t96637*t96694*(8.0/3.0)-cxnl2*t96612*t96615* \
               t96732*t96724*t96694-cxnl3*gamma_bb[index]*gx*t96612*t96614*t96725*t96729*t96694;
            double t96752 = C_k*t96712*t96733*t96688*(5.0/3.0);
            double t96753 = C_k*t96733*t96690*t96691*t96718*t96688*1.0E1;
            double t96754 = C_k*t96715*t96733*t96693*t96688*(2.5E1/3.0);
            double t96755 = t96752+t96753+t96754-C_k*t96720*t96733*t96690*t96688*(5.0/3.0)-C_k*t96714*t96733* \
               t96691*t96688*1.0E1-C_k*t96733*t96690*t96719*t96693*t96688*(2.5E1/3.0);
            v_rho_b_rho_b_[index] = t96667*(t96641+t96621*t96618*(t96640-c0p*t96601*t96610*2.0))*2.0+t96671*(- \
               t96609+t96663+t96621*t96618*(t96662+t96609-t96624*t96661*t96655*t96656-a1p*c*c0p*t96610*t96584*(2.0/ \
               3.0)))*2.0+rho_b[index]*t96671*(-t96677-t96686+t96621*t96618*(t96677+t96686-t96601*t96602*t96603*t96683- \
               t96624*1.0/(t96583*t96583*t96583)*t96655*t96674*2.0+t96624*t96655*t96656*(b2f*c*t96672*(4.0/9.0)+b4f* \
               t96611*t96579*(1.0E1/9.0)+b1f*c*t96591*t96672*(2.0/9.0)+b3f*c*t96672*t96575*(2.0/3.0)-b1f*t96611*t96673* \
               t96579*(1.0/3.6E1)+b3f*t96611*t96591*t96579*(1.0/1.2E1))+t96624*1.0/(t96583*t96583*t96583*t96583)* \
               t96592*t96674*1.0/(t96595*t96595)*(1.0/2.0)-a1f*c*c0f*t96622*t96672*(8.0/9.0)-t96601*t96675*t96684* \
               t96685*t96596*(1.0/2.0)+a1f*c*t96661*t96655*t96584*t96656*(2.0/3.0)-a1p*c*t96602*t96603*t96608*t96584* \
               (2.0/3.0))+t96601*t96602*t96603*t96683+t96601*t96675*t96684*t96685*t96596*(1.0/2.0)+a1p*c*t96602*t96603* \
               t96608*t96584*(2.0/3.0))-rho_b[index]*t96667*(-t96609+t96663+t96621*t96618*(t96662+t96609-t96663-t96624* \
               t96661*t96655*t96656))*2.0-rho_b[index]*(t96641+t96621*t96618*(t96640-t96641))*(ccaa1*gamma_bb[index]* \
               gcaa*t96653*t96627*(8.8E1/9.0)-ccaa1*t96612*t96613*t96643*t96644*2.4E1+ccaa2*t96612*t96613*t96643* \
               t96636*(3.04E2/9.0)-ccaa2*t96612*t96613*t96654*t96637*t96647*(3.2E1/3.0)-ccaa2*t96612*t96613*t96615* \
               t96654*(gamma_bb[index]*gcaa*t96653*(1.76E2/9.0)+t96612*t96613*t96643*(3.04E2/9.0))+ccaa2*t96612*t96613* \
               t96615*1.0/(t96635*t96635*t96635)*(t96647*t96647)*2.0+ccaa3*gamma_bb[index]*gcaa*t96612*t96613*t96632* \
               t96642*7.2E1+ccaa1*gamma_bb[index]*gcaa*t96612*t96613*t96642*1.0/(t96626*t96626*t96626)*(1.28E2/9.0) \
               +ccaa3*gamma_bb[index]*gcaa*t96612*t96613*1.0/(t96631*t96631*t96631)*t96614*(t96651*t96651)*2.0-ccaa3* \
               gamma_bb[index]*gcaa*t96612*t96613*t96614*t96652*(gamma_bb[index]*gcaa*t96653*(8.8E1/3.0)+t96612*t96613* \
               t96643*(3.04E2/3.0)+gamma_bb[index]*gcaa*t96612*t96613*t96642*7.2E1)-ccaa3*gamma_bb[index]*gcaa*t96612* \
               t96613*t96651*t96652*t96639*1.6E1)-c0*t96580*t96707*(cx0+t96711*t96723+cx1*gamma_bb[index]*gx*t96611* \
               t96697+cx2*t96612*t96615*t96706*t96694+cx3*gamma_bb[index]*gx*t96612*t96702*t96614*t96694)*(4.0/9.0) \
               +c0*t96713*t96707*(t96711*(t96720*t96713*t96716*t96717*(5.0E1/9.0)-C_k*t96712*t96573*t96688*(1.0E1/ \
               9.0)+C_k*t96720*t96573*t96690*t96688*(1.0E1/9.0)+C_k*t96714*t96573*t96691*t96688*(2.0E1/3.0)-C_k*t96715* \
               t96573*t96693*t96688*(5.0E1/9.0)+t96713*t96714*t96716*t96690*t96717*(2.5E2/9.0)-t96713*t96716*t96717* \
               t96691*t96718*1.0E2+t96713*t96716*t96717*t96719*t96693*(1.25E3/9.0)+t96713*t96715*t96716*t96690*t96717* \
               t96691*(1.0E2/9.0)-t96713*t96716*t96690*t96717*1.0/(t96692*t96692*t96692*t96692*t96692*t96692*t96692) \
               *t96693*(2.5E2/3.0)-C_k*t96573*t96690*t96691*t96718*t96688*(2.0E1/3.0)+C_k*t96573*t96690*t96719*t96693* \
               t96688*(5.0E1/9.0))-t96723*(cxnl1*gamma_bb[index]*gx*t96653*t96697*(8.8E1/9.0)-cxnl1*t96612*t96643* \
               t96734*t96694*2.4E1+cxnl2*t96612*t96643*t96706*t96694*(3.04E2/9.0)-cxnl2*t96612*t96615*t96732*t96746* \
               t96694-cxnl2*t96612*t96732*t96724*t96637*t96694*(3.2E1/3.0)+cxnl2*t96612*t96615*t96736*t96737*t96694* \
               2.0+cxnl3*gamma_bb[index]*gx*t96612*t96702*t96642*t96694*7.2E1+cxnl1*gamma_bb[index]*gx*t96612*t96642* \
               t96735*t96694*(1.28E2/9.0)-cxnl3*gamma_bb[index]*gx*t96612*t96614*t96741*t96725*t96694+cxnl3*gamma_bb[index]* \
               gx*t96612*t96614*t96742*t96743*t96694*2.0-cxnl3*gamma_bb[index]*gx*t96612*t96725*t96639*t96729*t96694* \
               1.6E1)+t96751*t96755*2.0-cx1*gamma_bb[index]*gx*t96653*t96697*(8.8E1/9.0)+cx1*t96612*t96643*t96734* \
               t96694*2.4E1-cx2*t96612*t96643*t96706*t96694*(3.04E2/9.0)+cx2*t96612*t96615*t96732*t96746*t96694+cx2* \
               t96612*t96732*t96724*t96637*t96694*(3.2E1/3.0)-cx2*t96612*t96615*t96736*t96737*t96694*2.0-cx1*gamma_bb[index]* \
               gx*t96612*t96642*t96735*t96694*(1.28E2/9.0)-cx3*gamma_bb[index]*gx*t96612*t96702*t96642*t96694*7.2E1+ \
               cx3*gamma_bb[index]*gx*t96612*t96614*t96741*t96725*t96694-cx3*gamma_bb[index]*gx*t96612*t96614*t96742* \
               t96743*t96694*2.0+cx3*gamma_bb[index]*gx*t96612*t96725*t96639*t96729*t96694*1.6E1)+c0*pow(rho_b[index],1.0/ \
               3.0)*t96707*(t96723*t96751-t96711*t96755+cx1*gamma_bb[index]*gx*t96638*t96697*(8.0/3.0)-cx1*t96612* \
               t96734*t96637*t96694*(8.0/3.0)+cx2*t96612*t96706*t96637*t96694*(1.6E1/3.0)-cx2*t96612*t96615*t96732* \
               t96724*t96694+cx3*gamma_bb[index]*gx*t96612*t96702*t96639*t96694*8.0-cx3*gamma_bb[index]*gx*t96612* \
               t96614*t96725*t96729*t96694)*(8.0/3.0);
        } else {
            v_rho_b_rho_b_[index] = 0.0;
        }

        if (is_gga_) {

            //V_rho_a_gamma_aa
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t94744 = 1.0/pow(rho_a[index],1.0/3.0);
                double t94745 = c*t94744;
                double t94746 = sqrt(t94745);
                double t94747 = pow(t94745,3.0/2.0);
                double t94748 = c*c;
                double t94749 = 1.0/pow(rho_a[index],2.0/3.0);
                double t94750 = 1.0/c0p;
                double t94751 = b1p*t94746;
                double t94752 = b3p*t94747;
                double t94753 = b4p*t94748*t94749;
                double t94754 = b2p*c*t94744;
                double t94755 = t94751+t94752+t94753+t94754;
                double t94756 = 1.0/t94755;
                double t94757 = t94750*t94756*(1.0/2.0);
                double t94758 = t94757+1.0;
                double t94759 = log(t94758);
                double t94760 = a1p*c*t94744;
                double t94761 = t94760+1.0;
                double t94762 = pow(2.0,1.0/3.0);
                double t94763 = t94762*2.0;
                double t94764 = t94763-2.0;
                double t94765 = two_13*2.0;
                double t94766 = t94765-2.0;
                double t94767 = 1.0/t94766;
                double t94768 = 1.0/c0f;
                double t94769 = 1.0/pow(rho_b[index],1.0/3.0);
                double t94770 = c*t94769;
                double t94771 = sqrt(t94770);
                double t94772 = pow(t94770,3.0/2.0);
                double t94773 = 1.0/pow(rho_b[index],2.0/3.0);
                double t94774 = b1p*t94771;
                double t94775 = b3p*t94772;
                double t94776 = b4p*t94773*t94748;
                double t94777 = b2p*c*t94769;
                double t94778 = t94774+t94775+t94776+t94777;
                double t94779 = 1.0/t94778;
                double t94780 = t94750*t94779*(1.0/2.0);
                double t94781 = t94780+1.0;
                double t94782 = log(t94781);
                double t94783 = a1p*c*t94769;
                double t94784 = t94783+1.0;
                double t94785 = c0p*t94782*t94784*2.0;
                double t94786 = rho_a[index]+rho_b[index];
                double t94787 = 1.0/pow(t94786,1.0/3.0);
                double t94788 = c*t94787;
                double t94789 = sqrt(t94788);
                double t94790 = pow(t94788,3.0/2.0);
                double t94791 = 1.0/pow(t94786,2.0/3.0);
                double t94792 = b1p*t94789;
                double t94793 = b3p*t94790;
                double t94794 = b4p*t94791*t94748;
                double t94795 = b2p*c*t94787;
                double t94796 = t94792+t94793+t94794+t94795;
                double t94797 = 1.0/t94796;
                double t94798 = t94750*t94797*(1.0/2.0);
                double t94799 = t94798+1.0;
                double t94800 = log(t94799);
                double t94801 = a1p*c*t94787;
                double t94802 = t94801+1.0;
                double t94803 = c0p*t94800*t94802*2.0;
                double t94804 = rho_a[index]-rho_b[index];
                double t94805 = t94804*t94804;
                double t94806 = 1.0/t94786;
                double t94807 = t94804*t94806;
                double t94808 = 1.0/(t94786*t94786*t94786*t94786);
                double t94809 = t94805*t94805;
                double t94810 = t94807+1.0;
                double t94811 = pow(t94810,4.0/3.0);
                double t94812 = -t94807+1.0;
                double t94813 = pow(t94812,4.0/3.0);
                double t94814 = t94811+t94813-2.0;
                double t94815 = 1.0/pow(rho_a[index],1.1E1/3.0);
                double t94816 = 1.0/pow(rho_a[index],8.0/3.0);
                double t94817 = gamma_aa[index]*t94816*(1.0/2.0);
                double t94818 = 1.0/pow(rho_b[index],8.0/3.0);
                double t94819 = gamma_bb[index]*t94818*(1.0/2.0);
                double t94820 = t94817+t94819;
                double t94821 = gcab*t94820;
                double t94822 = t94821+1.0;
                double t94823 = gcab*gcab;
                double t94824 = t94820*t94820;
                double t94825 = 1.0/pow(rho_a[index],1.9E1/3.0);
                double t94826 = t94823*t94824;
                double t94827 = gcab*t94820*2.0;
                double t94828 = t94826+t94827+1.0;
                double t94829 = t94823*t94824*3.0;
                double t94830 = gcab*t94820*t94823*t94824;
                double t94831 = gcab*t94820*3.0;
                double t94832 = t94830+t94831+t94829+1.0;
                double t94833 = 1.0/(t94822*t94822);
                double t94834 = 1.0/t94828;
                double t94835 = 1.0/(t94832*t94832);
                double t94836 = 1.0/(t94828*t94828);
                double t94837 = gamma_aa[index]*gcab*t94815*(8.0/3.0);
                double t94838 = gamma_aa[index]*t94820*t94823*t94815*(8.0/3.0);
                double t94839 = t94837+t94838;
                double t94840 = 1.0/t94832;
                double t94841 = gamma_aa[index]*gcab*t94815*4.0;
                double t94842 = gamma_aa[index]*gcab*t94823*t94815*t94824*4.0;
                double t94843 = gamma_aa[index]*t94820*t94823*t94815*8.0;
                double t94844 = t94841+t94842+t94843;
                double t94845 = gcab*t94816;
                double t94846 = t94820*t94823*t94816;
                double t94847 = t94845+t94846;
                double t94848 = gcab*t94816*(3.0/2.0);
                double t94849 = t94820*t94823*t94816*3.0;
                double t94850 = gcab*t94823*t94824*t94816*(3.0/2.0);
                double t94851 = t94850+t94848+t94849;
                double t94852 = b1f*t94746;
                double t94853 = b3f*t94747;
                double t94854 = b4f*t94748*t94749;
                double t94855 = b2f*c*t94744;
                double t94856 = t94852+t94853+t94854+t94855;
                double t94857 = 1.0/t94856;
                double t94858 = t94857*t94768*(1.0/2.0);
                double t94859 = t94858+1.0;
                double t94860 = log(t94859);
                double t94861 = a1f*c*t94744;
                double t94862 = t94861+1.0;
                double t94863 = c0f*t94860*t94862*2.0;
                double t94864 = c0p*t94761*t94759*2.0;
                double t94865 = gcaa*gcaa;
                double t94866 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t94867 = gamma_aa[index]*gamma_aa[index];
                double t94868 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t94869 = gamma_aa[index]*gcaa*t94816;
                double t94870 = t94869+1.0;
                double t94871 = gamma_aa[index]*gcaa*t94816*3.0;
                double t94872 = gamma_aa[index]*gcaa*t94865*t94867*t94868;
                double t94873 = t94865*t94866*t94867*3.0;
                double t94874 = t94871+t94872+t94873+1.0;
                double t94875 = gamma_aa[index]*gcaa*t94816*2.0;
                double t94876 = t94865*t94866*t94867;
                double t94877 = t94875+t94876+1.0;
                double t94878 = 1.0/tau_a[index];
                double t94879 = pow(rho_a[index],2.0/3.0);
                double t94880 = pow(rho_a[index],5.0/3.0);
                double t94881 = C_k*t94880*t94878;
                double t94882 = t94881-1.0;
                double t94883 = t94881+1.0;
                double t94884 = t94882*t94882;
                double t94885 = t94884*t94884;
                double t94886 = gx*gx;
                double t94887 = gamma_aa[index]*gx*t94816;
                double t94888 = t94887+1.0;
                double t94889 = gamma_aa[index]*gx*t94816*3.0;
                double t94890 = gamma_aa[index]*gx*t94867*t94868*t94886;
                double t94891 = t94866*t94867*t94886*3.0;
                double t94892 = t94890+t94891+t94889+1.0;
                double t94893 = gamma_aa[index]*gx*t94816*2.0;
                double t94894 = t94866*t94867*t94886;
                double t94895 = t94893+t94894+1.0;
                double t94896 = 1.0/t94883;
                double t94897 = 1.0/(t94883*t94883*t94883);
                double t94898 = 1.0/(t94883*t94883*t94883*t94883*t94883);
                double t94899 = 1.0/t94888;
                double t94900 = 1.0/t94895;
                double t94901 = 1.0/t94892;
                double t94902 = 1.0/(t94888*t94888);
                double t94903 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]*rho_a[index]);
                double t94904 = 1.0/(t94892*t94892);
                double t94905 = 1.0/(t94895*t94895);
                double t94906 = gx*t94816*3.0;
                double t94907 = gamma_aa[index]*t94866*t94886*6.0;
                double t94908 = gx*t94867*t94868*t94886*3.0;
                double t94909 = t94906+t94907+t94908;
                double t94910 = gx*t94816*2.0;
                double t94911 = gamma_aa[index]*t94866*t94886*2.0;
                double t94912 = t94910+t94911;
                double t94913 = gamma_aa[index]*gx*t94815*(1.6E1/3.0);
                double t94914 = t94825*t94867*t94886*(1.6E1/3.0);
                double t94915 = t94913+t94914;
                double t94916 = gamma_aa[index]*gx*t94815*8.0;
                double t94917 = gamma_aa[index]*gx*t94903*t94867*t94886*8.0;
                double t94918 = t94825*t94867*t94886*1.6E1;
                double t94919 = t94916+t94917+t94918;
                double t94920 = 1.0/(t94888*t94888*t94888);
                double t94921 = gx*t94815*8.0;
                double t94922 = gamma_aa[index]*t94825*t94886*3.2E1;
                double t94923 = gx*t94903*t94867*t94886*2.4E1;
                double t94924 = t94921+t94922+t94923;
                double t94925 = gx*t94815*(1.6E1/3.0);
                double t94926 = gamma_aa[index]*t94825*t94886*(3.2E1/3.0);
                double t94927 = t94925+t94926;
                double t94928 = 1.0/(t94895*t94895*t94895);
                double t94929 = 1.0/(t94892*t94892*t94892);
                double t94930 = t94882*t94896;
                double t94931 = t94882*t94885*t94898;
                double t94932 = t94930+t94931-t94882*t94884*t94897*2.0;
                double t94933 = cxnl1*gx*t94816*t94899;
                double t94934 = cxnl2*gamma_aa[index]*t94900*t94866*t94886*2.0;
                double t94935 = cxnl3*gx*t94901*t94867*t94868*t94886*3.0;
                double t94936 = t94933+t94934+t94935-cxnl1*gamma_aa[index]*t94902*t94866*t94886-cxnl2*t94912*t94905* \
                   t94866*t94867*t94886-cxnl3*gamma_aa[index]*gx*t94904*t94909*t94867*t94868*t94886;
                double t94937 = 1.0/t94822;
                double t94938 = 1.0/pow(t94786,4.0/3.0);
                double t94939 = b1f*t94789;
                double t94940 = b3f*t94790;
                double t94941 = b4f*t94791*t94748;
                double t94942 = b2f*c*t94787;
                double t94943 = t94940+t94941+t94942+t94939;
                double t94944 = 1.0/t94943;
                double t94945 = t94944*t94768*(1.0/2.0);
                double t94946 = t94945+1.0;
                double t94947 = log(t94946);
                double t94948 = a1f*c*t94787;
                double t94949 = t94948+1.0;
                double t94951 = c0f*t94947*t94949*2.0;
                double t94950 = t94803-t94951;
                double t94952 = 1.0/(t94786*t94786);
                double t94979 = t94804*t94952;
                double t94953 = t94806-t94979;
                double t94954 = 1.0/pow(t94786,5.0/3.0);
                double t94955 = 1.0/sqrt(t94788);
                double t94956 = 1.0/t94799;
                double t94957 = 1.0/(t94796*t94796);
                double t94958 = b4p*t94954*t94748*(2.0/3.0);
                double t94959 = b2p*c*t94938*(1.0/3.0);
                double t94960 = b1p*c*t94955*t94938*(1.0/6.0);
                double t94961 = b3p*c*t94938*t94789*(1.0/2.0);
                double t94962 = t94960+t94961+t94958+t94959;
                double t94963 = t94802*t94962*t94956*t94957;
                double t94964 = 1.0/d2fz0;
                double t94965 = 1.0/Aa;
                double t94966 = b1a*t94789;
                double t94967 = b3a*t94790;
                double t94968 = b4a*t94791*t94748;
                double t94969 = b2a*c*t94787;
                double t94970 = t94966+t94967+t94968+t94969;
                double t94971 = 1.0/t94970;
                double t94972 = t94971*t94965*(1.0/2.0);
                double t94973 = t94972+1.0;
                double t94974 = log(t94973);
                double t94975 = a1a*c*t94787;
                double t94976 = t94975+1.0;
                double t94977 = 1.0/(t94786*t94786*t94786*t94786*t94786);
                double t94978 = pow(t94810,1.0/3.0);
                double t94980 = t94953*t94978*(4.0/3.0);
                double t94981 = pow(t94812,1.0/3.0);
                double t94982 = t94980-t94953*t94981*(4.0/3.0);
                double t94983 = t94808*t94809;
                double t94984 = t94983-1.0;
                double t94985 = 1.0/pow(rho_a[index],4.0/3.0);
                double t94986 = 1.0/pow(rho_a[index],5.0/3.0);
                double t94987 = 1.0/sqrt(t94745);
                double t94988 = 1.0/t94758;
                double t94989 = 1.0/(t94755*t94755);
                double t94990 = b4p*t94748*t94986*(2.0/3.0);
                double t94991 = b2p*c*t94985*(1.0/3.0);
                double t94992 = b1p*c*t94985*t94987*(1.0/6.0);
                double t94993 = b3p*c*t94746*t94985*(1.0/2.0);
                double t94994 = t94990+t94991+t94992+t94993;
                double t94995 = t94761*t94994*t94988*t94989;
                double t94996 = t94863-t94864;
                double t94997 = t94764*t94767*t94996;
                double t94998 = Aa*t94814*t94964*t94767*t94974*t94984*t94976*2.0;
                double t94999 = t94864+t94997;
                double t95000 = 1.0/t94870;
                double t95001 = 1.0/t94877;
                double t95002 = 1.0/t94874;
                double t95003 = 1.0/(t94870*t94870);
                double t95004 = 1.0/(t94874*t94874);
                double t95005 = 1.0/(t94877*t94877);
                double t95006 = gcaa*t94816*3.0;
                double t95007 = gamma_aa[index]*t94865*t94866*6.0;
                double t95008 = gcaa*t94865*t94867*t94868*3.0;
                double t95009 = t95006+t95007+t95008;
                double t95010 = gcaa*t94816*2.0;
                double t95011 = gamma_aa[index]*t94865*t94866*2.0;
                double t95012 = t95010+t95011;
                double t95013 = gamma_aa[index]*gcaa*t94815*(1.6E1/3.0);
                double t95014 = t94825*t94865*t94867*(1.6E1/3.0);
                double t95015 = t95013+t95014;
                double t95016 = gamma_aa[index]*gcaa*t94815*8.0;
                double t95017 = gamma_aa[index]*gcaa*t94903*t94865*t94867*8.0;
                double t95018 = t94825*t94865*t94867*1.6E1;
                double t95019 = t95016+t95017+t95018;
                double t95020 = 1.0/t94859;
                double t95021 = 1.0/(t94856*t94856);
                double t95022 = b4f*t94748*t94986*(2.0/3.0);
                double t95023 = b2f*c*t94985*(1.0/3.0);
                double t95024 = b1f*c*t94985*t94987*(1.0/6.0);
                double t95025 = b3f*c*t94746*t94985*(1.0/2.0);
                double t95026 = t95022+t95023+t95024+t95025;
                double t95027 = a1f*c*c0f*t94860*t94985*(2.0/3.0);
                double t95028 = a1p*c*c0p*t94759*t94985*(2.0/3.0);
                double t95029 = ccaa1*gcaa*t94816*t95000;
                double t95030 = ccaa2*gamma_aa[index]*t94865*t94866*t95001*2.0;
                double t95031 = ccaa3*gcaa*t94865*t94867*t94868*t95002*3.0;
                double t95032 = t95030+t95031+t95029-ccaa1*gamma_aa[index]*t94865*t94866*t95003-ccaa2*t94865*t94866* \
                   t94867*t95012*t95005-ccaa3*gamma_aa[index]*gcaa*t94865*t94867*t94868*t95004*t95009;
                v_rho_a_gamma_aa_[index] = -t94999*t95032-(c0*pow(rho_a[index],1.0/3.0)*(t94932*t94936+cx1*gx*t94816* \
                   t94899-cx1*gamma_aa[index]*t94902*t94866*t94886+cx2*gamma_aa[index]*t94900*t94866*t94886*2.0-cx2*t94912* \
                   t94905*t94866*t94867*t94886+cx3*gx*t94901*t94867*t94868*t94886*3.0-cx3*gamma_aa[index]*gx*t94904*t94909* \
                   t94867*t94868*t94886)*(4.0/3.0)+c0*pow(rho_a[index],4.0/3.0)*(t94932*(cxnl1*gx*t94815*t94899*(-8.0/ \
                   3.0)-cxnl2*gamma_aa[index]*t94900*t94825*t94886*(3.2E1/3.0)+cxnl1*gamma_aa[index]*t94902*t94825*t94886* \
                   8.0+cxnl2*t94912*t94905*t94825*t94867*t94886*(1.6E1/3.0)+cxnl2*t94905*t94927*t94866*t94867*t94886+ \
                   cxnl2*gamma_aa[index]*t94905*t94915*t94866*t94886*2.0-cxnl1*gx*t94920*t94903*t94867*t94886*(1.6E1/ \
                   3.0)-cxnl3*gx*t94901*t94903*t94867*t94886*2.4E1+cxnl3*gx*t94904*t94919*t94867*t94868*t94886*3.0-cxnl2* \
                   t94912*t94915*t94928*t94866*t94867*t94886*2.0+cxnl3*gamma_aa[index]*gx*t94903*t94904*t94909*t94867* \
                   t94886*8.0+cxnl3*gamma_aa[index]*gx*t94904*t94924*t94867*t94868*t94886-cxnl3*gamma_aa[index]*gx*t94909* \
                   t94919*t94929*t94867*t94868*t94886*2.0)+t94936*(C_k*t94878*t94896*t94879*(5.0/3.0)-C_k*t94884*t94878* \
                   t94879*t94897*1.0E1+C_k*t94885*t94878*t94879*t94898*(2.5E1/3.0)-C_k*t94882*1.0/(t94883*t94883)*t94878* \
                   t94879*(5.0/3.0)+C_k*t94882*1.0/(t94883*t94883*t94883*t94883)*t94884*t94878*t94879*1.0E1-C_k*t94882* \
                   1.0/(t94883*t94883*t94883*t94883*t94883*t94883)*t94885*t94878*t94879*(2.5E1/3.0))-cx1*gx*t94815*t94899* \
                   (8.0/3.0)+cx1*gamma_aa[index]*t94902*t94825*t94886*8.0-cx2*gamma_aa[index]*t94900*t94825*t94886*(3.2E1/ \
                   3.0)+cx2*t94912*t94905*t94825*t94867*t94886*(1.6E1/3.0)+cx2*t94905*t94927*t94866*t94867*t94886+cx2* \
                   gamma_aa[index]*t94905*t94915*t94866*t94886*2.0-cx1*gx*t94920*t94903*t94867*t94886*(1.6E1/3.0)-cx3* \
                   gx*t94901*t94903*t94867*t94886*2.4E1+cx3*gx*t94904*t94919*t94867*t94868*t94886*3.0-cx2*t94912*t94915* \
                   t94928*t94866*t94867*t94886*2.0+cx3*gamma_aa[index]*gx*t94903*t94904*t94909*t94867*t94886*8.0+cx3* \
                   gamma_aa[index]*gx*t94904*t94924*t94867*t94868*t94886-cx3*gamma_aa[index]*gx*t94909*t94919*t94929* \
                   t94867*t94868*t94886*2.0))*(X-1.0)-(rho_a[index]*(t94864+t94764*t94767*(t94863-c0p*t94761*t94759*2.0) \
                   )+rho_b[index]*(t94785-t94764*t94767*(t94785-c0f*log((t94768*(1.0/2.0))/(b1f*t94771+b3f*t94772+b2f* \
                   c*t94769+b4f*t94773*t94748)+1.0)*(a1f*c*t94769+1.0)*2.0))-t94786*(t94803+t94998-t94814*t94950*t94808* \
                   t94809*t94767))*(ccab1*gcab*t94815*t94937*(4.0/3.0)-ccab2*t94823*t94824*t94836*(gcab*t94815*(8.0/3.0) \
                   +gamma_aa[index]*t94823*t94825*(4.0/3.0)+t94820*t94823*t94815*(8.0/3.0))-ccab1*gamma_aa[index]*t94823* \
                   t94833*t94825*(4.0/3.0)+ccab2*gamma_aa[index]*t94823*t94825*t94834*(4.0/3.0)-ccab1*t94820*t94823*t94815* \
                   t94833*(4.0/3.0)+ccab2*t94820*t94823*t94815*t94834*(8.0/3.0)-ccab2*t94820*t94823*t94816*t94836*t94839+ \
                   ccab2*t94823*t94824*1.0/(t94828*t94828*t94828)*t94847*t94839*2.0+ccab3*gcab*t94840*t94823*t94815*t94824* \
                   4.0+ccab3*gamma_aa[index]*gcab*t94820*t94840*t94823*t94825*4.0-ccab2*gamma_aa[index]*t94820*t94823* \
                   t94815*t94836*t94847*(8.0/3.0)-ccab3*gcab*t94823*t94824*t94816*t94835*t94844*(3.0/2.0)-ccab3*gcab* \
                   t94820*t94823*t94824*t94835*(gcab*t94815*4.0+gamma_aa[index]*t94823*t94825*4.0+t94820*t94823*t94815* \
                   8.0+gcab*t94823*t94815*t94824*4.0+gamma_aa[index]*gcab*t94820*t94823*t94825*4.0)+ccab1*gamma_aa[index]* \
                   gcab*t94820*1.0/(t94822*t94822*t94822)*t94823*t94825*(4.0/3.0)+ccab3*gcab*t94820*t94823*1.0/(t94832* \
                   t94832*t94832)*t94824*t94851*t94844*2.0-ccab3*gamma_aa[index]*gcab*t94823*t94815*t94824*t94851*t94835* \
                   4.0)+(ccab1*gcab*t94816*t94937*(1.0/2.0)-ccab1*t94820*t94823*t94833*t94816*(1.0/2.0)+ccab2*t94820* \
                   t94823*t94816*t94834-ccab2*t94823*t94824*t94836*t94847+ccab3*gcab*t94840*t94823*t94824*t94816*(3.0/ \
                   2.0)-ccab3*gcab*t94820*t94823*t94824*t94851*t94835)*(-t94803+t94864+t94997-t94998-rho_a[index]*(-t94995+ \
                   t95028+t94764*t94767*(t94995+t95027-t94862*t95020*t95021*t95026-a1p*c*c0p*t94759*t94985*(2.0/3.0)) \
                   )+t94786*(-t94963+t94814*t94808*t94809*t94767*(t94963-(1.0/(t94943*t94943)*t94949*(b2f*c*t94938*(1.0/ \
                   3.0)+b4f*t94954*t94748*(2.0/3.0)+b1f*c*t94955*t94938*(1.0/6.0)+b3f*c*t94938*t94789*(1.0/2.0)))/t94946+ \
                   a1f*c*c0f*t94938*t94947*(2.0/3.0)-a1p*c*c0p*t94800*t94938*(2.0/3.0))+a1p*c*c0p*t94800*t94938*(2.0/ \
                   3.0)+t94950*t94808*t94809*t94982*t94767-t94814*t94950*t94809*t94767*t94977*4.0+t94804*t94805*t94814* \
                   t94950*t94808*t94767*4.0+Aa*t94814*t94964*t94767*t94974*t94976*(t94809*t94977*4.0-t94804*t94805*t94808* \
                   4.0)*2.0-Aa*t94964*t94982*t94767*t94974*t94984*t94976*2.0-(t94814*1.0/(t94970*t94970)*t94964*t94767* \
                   t94984*t94976*(b2a*c*t94938*(1.0/3.0)+b4a*t94954*t94748*(2.0/3.0)+b1a*c*t94955*t94938*(1.0/6.0)+b3a* \
                   c*t94938*t94789*(1.0/2.0)))/t94973+Aa*a1a*c*t94814*t94964*t94767*t94938*t94974*t94984*(2.0/3.0))+t94814* \
                   t94950*t94808*t94809*t94767)+rho_a[index]*t95032*(-t94995+t95028+t94764*t94767*(t94995+t95027-t95028- \
                   t94862*t95020*t95021*t95026))-rho_a[index]*t94999*(ccaa1*gcaa*t94815*t95000*(-8.0/3.0)-ccaa2*gamma_aa[index]* \
                   t94825*t94865*t95001*(3.2E1/3.0)+ccaa1*gamma_aa[index]*t94825*t94865*t95003*8.0+ccaa2*t94825*t94865* \
                   t94867*t95012*t95005*(1.6E1/3.0)-ccaa1*gcaa*t94903*1.0/(t94870*t94870*t94870)*t94865*t94867*(1.6E1/ \
                   3.0)+ccaa2*t94865*t94866*t94867*t95005*(gcaa*t94815*(1.6E1/3.0)+gamma_aa[index]*t94825*t94865*(3.2E1/ \
                   3.0))+ccaa2*gamma_aa[index]*t94865*t94866*t95005*t95015*2.0-ccaa3*gcaa*t94903*t94865*t94867*t95002* \
                   2.4E1+ccaa3*gcaa*t94865*t94867*t94868*t95004*t95019*3.0-ccaa2*t94865*t94866*t94867*1.0/(t94877*t94877* \
                   t94877)*t95012*t95015*2.0+ccaa3*gamma_aa[index]*gcaa*t94865*t94867*t94868*t95004*(gcaa*t94815*8.0+ \
                   gamma_aa[index]*t94825*t94865*3.2E1+gcaa*t94903*t94865*t94867*2.4E1)+ccaa3*gamma_aa[index]*gcaa*t94903* \
                   t94865*t94867*t95004*t95009*8.0-ccaa3*gamma_aa[index]*gcaa*t94865*1.0/(t94874*t94874*t94874)*t94867* \
                   t94868*t95009*t95019*2.0);
            } else if (rho_a[index] > cutoff_) {
                double t97528 = 1.0/pow(rho_a[index],1.0/3.0);
                double t97529 = c*t97528;
                double t97530 = sqrt(t97529);
                double t97531 = pow(t97529,3.0/2.0);
                double t97532 = c*c;
                double t97533 = 1.0/pow(rho_a[index],2.0/3.0);
                double t97534 = 1.0/c0p;
                double t97535 = b1p*t97530;
                double t97536 = b3p*t97531;
                double t97537 = b4p*t97532*t97533;
                double t97538 = b2p*c*t97528;
                double t97539 = t97535+t97536+t97537+t97538;
                double t97540 = 1.0/t97539;
                double t97541 = t97540*t97534*(1.0/2.0);
                double t97542 = t97541+1.0;
                double t97543 = log(t97542);
                double t97544 = a1p*c*t97528;
                double t97545 = t97544+1.0;
                double t97546 = 1.0/pow(rho_a[index],8.0/3.0);
                double t97547 = gcaa*gcaa;
                double t97548 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t97549 = gamma_aa[index]*gamma_aa[index];
                double t97550 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t97551 = gamma_aa[index]*gcaa*t97546;
                double t97552 = t97551+1.0;
                double t97553 = gamma_aa[index]*gcaa*t97546*3.0;
                double t97554 = gamma_aa[index]*gcaa*t97550*t97547*t97549;
                double t97555 = t97547*t97548*t97549*3.0;
                double t97556 = t97553+t97554+t97555+1.0;
                double t97557 = gamma_aa[index]*gcaa*t97546*2.0;
                double t97558 = t97547*t97548*t97549;
                double t97559 = t97557+t97558+1.0;
                double t97560 = pow(2.0,1.0/3.0);
                double t97561 = t97560*2.0;
                double t97562 = t97561-2.0;
                double t97563 = two_13*2.0;
                double t97564 = t97563-2.0;
                double t97565 = 1.0/t97564;
                double t97566 = 1.0/c0f;
                double t97567 = b1f*t97530;
                double t97568 = b3f*t97531;
                double t97569 = b4f*t97532*t97533;
                double t97570 = b2f*c*t97528;
                double t97571 = t97570+t97567+t97568+t97569;
                double t97572 = 1.0/t97571;
                double t97573 = t97572*t97566*(1.0/2.0);
                double t97574 = t97573+1.0;
                double t97575 = log(t97574);
                double t97576 = a1f*c*t97528;
                double t97577 = t97576+1.0;
                double t97578 = c0f*t97575*t97577*2.0;
                double t97579 = c0p*t97543*t97545*2.0;
                double t97580 = 1.0/t97552;
                double t97581 = 1.0/t97559;
                double t97582 = 1.0/t97556;
                double t97583 = 1.0/pow(rho_a[index],1.9E1/3.0);
                double t97584 = 1.0/(t97552*t97552);
                double t97585 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]*rho_a[index]);
                double t97586 = 1.0/pow(rho_a[index],1.1E1/3.0);
                double t97587 = 1.0/(t97556*t97556);
                double t97588 = 1.0/(t97559*t97559);
                double t97589 = gcaa*t97546*3.0;
                double t97590 = gamma_aa[index]*t97547*t97548*6.0;
                double t97591 = gcaa*t97550*t97547*t97549*3.0;
                double t97592 = t97590+t97591+t97589;
                double t97593 = gcaa*t97546*2.0;
                double t97594 = gamma_aa[index]*t97547*t97548*2.0;
                double t97595 = t97593+t97594;
                double t97596 = gamma_aa[index]*gcaa*t97586*(1.6E1/3.0);
                double t97597 = t97547*t97583*t97549*(1.6E1/3.0);
                double t97598 = t97596+t97597;
                double t97599 = gamma_aa[index]*gcaa*t97586*8.0;
                double t97600 = gamma_aa[index]*gcaa*t97547*t97549*t97585*8.0;
                double t97601 = t97547*t97583*t97549*1.6E1;
                double t97602 = t97600+t97601+t97599;
                double t97603 = 1.0/pow(rho_a[index],4.0/3.0);
                double t97604 = 1.0/pow(rho_a[index],5.0/3.0);
                double t97605 = 1.0/sqrt(t97529);
                double t97606 = 1.0/t97542;
                double t97607 = 1.0/(t97539*t97539);
                double t97608 = b4p*t97532*t97604*(2.0/3.0);
                double t97609 = b2p*c*t97603*(1.0/3.0);
                double t97610 = b1p*c*t97603*t97605*(1.0/6.0);
                double t97611 = b3p*c*t97530*t97603*(1.0/2.0);
                double t97612 = t97610+t97611+t97608+t97609;
                double t97613 = t97612*t97606*t97607*t97545;
                double t97614 = ccaa1*gcaa*t97580*t97546;
                double t97615 = ccaa2*gamma_aa[index]*t97581*t97547*t97548*2.0;
                double t97616 = ccaa3*gcaa*t97550*t97582*t97547*t97549*3.0;
                double t97617 = t97614+t97615+t97616-ccaa1*gamma_aa[index]*t97547*t97548*t97584-ccaa2*t97547*t97548* \
                   t97549*t97595*t97588-ccaa3*gamma_aa[index]*gcaa*t97550*t97547*t97592*t97549*t97587;
                double t97618 = 1.0/tau_a[index];
                double t97619 = pow(rho_a[index],2.0/3.0);
                double t97620 = pow(rho_a[index],5.0/3.0);
                double t97621 = C_k*t97620*t97618;
                double t97622 = t97621-1.0;
                double t97623 = t97621+1.0;
                double t97624 = t97622*t97622;
                double t97625 = t97624*t97624;
                double t97626 = gx*gx;
                double t97627 = gamma_aa[index]*gx*t97546;
                double t97628 = t97627+1.0;
                double t97629 = gamma_aa[index]*gx*t97546*3.0;
                double t97630 = gamma_aa[index]*gx*t97550*t97626*t97549;
                double t97631 = t97626*t97548*t97549*3.0;
                double t97632 = t97630+t97631+t97629+1.0;
                double t97633 = gamma_aa[index]*gx*t97546*2.0;
                double t97634 = t97626*t97548*t97549;
                double t97635 = t97633+t97634+1.0;
                double t97636 = 1.0/t97623;
                double t97637 = 1.0/(t97623*t97623*t97623);
                double t97638 = 1.0/(t97623*t97623*t97623*t97623*t97623);
                double t97639 = 1.0/t97628;
                double t97640 = 1.0/t97635;
                double t97641 = 1.0/t97632;
                double t97642 = 1.0/(t97628*t97628);
                double t97643 = 1.0/(t97632*t97632);
                double t97644 = 1.0/(t97635*t97635);
                double t97645 = gx*t97546*3.0;
                double t97646 = gamma_aa[index]*t97626*t97548*6.0;
                double t97647 = gx*t97550*t97626*t97549*3.0;
                double t97648 = t97645+t97646+t97647;
                double t97649 = gx*t97546*2.0;
                double t97650 = gamma_aa[index]*t97626*t97548*2.0;
                double t97651 = t97650+t97649;
                double t97652 = gamma_aa[index]*gx*t97586*(1.6E1/3.0);
                double t97653 = t97626*t97583*t97549*(1.6E1/3.0);
                double t97654 = t97652+t97653;
                double t97655 = gamma_aa[index]*gx*t97586*8.0;
                double t97656 = gamma_aa[index]*gx*t97626*t97549*t97585*8.0;
                double t97657 = t97626*t97583*t97549*1.6E1;
                double t97658 = t97655+t97656+t97657;
                double t97659 = 1.0/(t97628*t97628*t97628);
                double t97660 = gx*t97586*8.0;
                double t97661 = gamma_aa[index]*t97626*t97583*3.2E1;
                double t97662 = gx*t97626*t97549*t97585*2.4E1;
                double t97663 = t97660+t97661+t97662;
                double t97664 = gx*t97586*(1.6E1/3.0);
                double t97665 = gamma_aa[index]*t97626*t97583*(3.2E1/3.0);
                double t97666 = t97664+t97665;
                double t97667 = 1.0/(t97635*t97635*t97635);
                double t97668 = 1.0/(t97632*t97632*t97632);
                double t97669 = X-1.0;
                double t97670 = t97622*t97636;
                double t97671 = t97622*t97625*t97638;
                double t97672 = t97670+t97671-t97622*t97624*t97637*2.0;
                double t97673 = cxnl1*gx*t97546*t97639;
                double t97674 = cxnl2*gamma_aa[index]*t97640*t97626*t97548*2.0;
                double t97675 = cxnl3*gx*t97550*t97641*t97626*t97549*3.0;
                double t97676 = t97673+t97674+t97675-cxnl1*gamma_aa[index]*t97642*t97626*t97548-cxnl2*t97651*t97626* \
                   t97644*t97548*t97549-cxnl3*gamma_aa[index]*gx*t97550*t97643*t97626*t97549*t97648;
                v_rho_a_gamma_aa_[index] = -t97617*(t97579+t97562*t97565*(t97578-c0p*t97543*t97545*2.0))+rho_a[index]* \
                   t97617*(-t97613+t97562*t97565*(t97613-(1.0/(t97571*t97571)*t97577*(b2f*c*t97603*(1.0/3.0)+b4f*t97532* \
                   t97604*(2.0/3.0)+b1f*c*t97603*t97605*(1.0/6.0)+b3f*c*t97530*t97603*(1.0/2.0)))/t97574+a1f*c*c0f*t97603* \
                   t97575*(2.0/3.0)-a1p*c*c0p*t97603*t97543*(2.0/3.0))+a1p*c*c0p*t97603*t97543*(2.0/3.0))-rho_a[index]* \
                   (t97579+t97562*t97565*(t97578-t97579))*(ccaa1*gcaa*t97580*t97586*(-8.0/3.0)-ccaa2*gamma_aa[index]* \
                   t97581*t97547*t97583*(3.2E1/3.0)+ccaa1*gamma_aa[index]*t97547*t97583*t97584*8.0+ccaa2*t97547*t97583* \
                   t97549*t97595*t97588*(1.6E1/3.0)-ccaa1*gcaa*1.0/(t97552*t97552*t97552)*t97547*t97549*t97585*(1.6E1/ \
                   3.0)+ccaa2*t97547*t97548*t97549*t97588*(gcaa*t97586*(1.6E1/3.0)+gamma_aa[index]*t97547*t97583*(3.2E1/ \
                   3.0))+ccaa2*gamma_aa[index]*t97547*t97548*t97588*t97598*2.0-ccaa3*gcaa*t97582*t97547*t97549*t97585* \
                   2.4E1+ccaa3*gcaa*t97602*t97550*t97547*t97549*t97587*3.0-ccaa2*t97547*t97548*t97549*1.0/(t97559*t97559* \
                   t97559)*t97595*t97598*2.0+ccaa3*gamma_aa[index]*gcaa*t97550*t97547*t97549*t97587*(gcaa*t97586*8.0+ \
                   gamma_aa[index]*t97547*t97583*3.2E1+gcaa*t97547*t97549*t97585*2.4E1)+ccaa3*gamma_aa[index]*gcaa*t97547* \
                   t97592*t97549*t97585*t97587*8.0-ccaa3*gamma_aa[index]*gcaa*t97602*t97550*t97547*1.0/(t97556*t97556* \
                   t97556)*t97592*t97549*2.0)-c0*pow(rho_a[index],4.0/3.0)*t97669*(t97672*(cxnl1*gx*t97639*t97586*(-8.0/ \
                   3.0)-cxnl2*gamma_aa[index]*t97640*t97626*t97583*(3.2E1/3.0)+cxnl1*gamma_aa[index]*t97642*t97626*t97583* \
                   8.0+cxnl2*t97651*t97626*t97644*t97583*t97549*(1.6E1/3.0)+cxnl2*t97626*t97644*t97548*t97549*t97666+ \
                   cxnl2*gamma_aa[index]*t97626*t97644*t97654*t97548*2.0-cxnl3*gx*t97641*t97626*t97549*t97585*2.4E1-cxnl1* \
                   gx*t97626*t97549*t97585*t97659*(1.6E1/3.0)+cxnl3*gx*t97550*t97643*t97626*t97549*t97658*3.0-cxnl2*t97651* \
                   t97626*t97654*t97548*t97549*t97667*2.0+cxnl3*gamma_aa[index]*gx*t97550*t97643*t97626*t97663*t97549+ \
                   cxnl3*gamma_aa[index]*gx*t97643*t97626*t97549*t97585*t97648*8.0-cxnl3*gamma_aa[index]*gx*t97550*t97626* \
                   t97549*t97648*t97658*t97668*2.0)+t97676*(C_k*t97618*t97636*t97619*(5.0/3.0)-C_k*t97624*t97618*t97619* \
                   t97637*1.0E1+C_k*t97625*t97618*t97619*t97638*(2.5E1/3.0)-C_k*t97622*1.0/(t97623*t97623)*t97618*t97619* \
                   (5.0/3.0)+C_k*t97622*1.0/(t97623*t97623*t97623*t97623)*t97624*t97618*t97619*1.0E1-C_k*t97622*1.0/(t97623* \
                   t97623*t97623*t97623*t97623*t97623)*t97625*t97618*t97619*(2.5E1/3.0))-cx1*gx*t97639*t97586*(8.0/3.0) \
                   +cx1*gamma_aa[index]*t97642*t97626*t97583*8.0-cx2*gamma_aa[index]*t97640*t97626*t97583*(3.2E1/3.0) \
                   +cx2*t97651*t97626*t97644*t97583*t97549*(1.6E1/3.0)+cx2*t97626*t97644*t97548*t97549*t97666+cx2*gamma_aa[index]* \
                   t97626*t97644*t97654*t97548*2.0-cx1*gx*t97626*t97549*t97585*t97659*(1.6E1/3.0)-cx3*gx*t97641*t97626* \
                   t97549*t97585*2.4E1+cx3*gx*t97550*t97643*t97626*t97549*t97658*3.0-cx2*t97651*t97626*t97654*t97548* \
                   t97549*t97667*2.0+cx3*gamma_aa[index]*gx*t97550*t97643*t97626*t97663*t97549+cx3*gamma_aa[index]*gx* \
                   t97643*t97626*t97549*t97585*t97648*8.0-cx3*gamma_aa[index]*gx*t97550*t97626*t97549*t97648*t97658*t97668* \
                   2.0)-c0*pow(rho_a[index],1.0/3.0)*t97669*(t97672*t97676+cx1*gx*t97546*t97639-cx1*gamma_aa[index]*t97642* \
                   t97626*t97548+cx2*gamma_aa[index]*t97640*t97626*t97548*2.0-cx2*t97651*t97626*t97644*t97548*t97549+ \
                   cx3*gx*t97550*t97641*t97626*t97549*3.0-cx3*gamma_aa[index]*gx*t97550*t97643*t97626*t97549*t97648)* \
                   (4.0/3.0);
            } else if (rho_b[index] > cutoff_) {
                v_rho_a_gamma_aa_[index] = 0.0;
            } else {
                v_rho_a_gamma_aa_[index] = 0.0;
            }

            //V_rho_a_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_a_gamma_ab_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_a_gamma_ab_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_a_gamma_ab_[index] = 0.0;
            } else {
                v_rho_a_gamma_ab_[index] = 0.0;
            }

            //V_rho_a_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t95035 = 1.0/pow(rho_a[index],1.0/3.0);
                double t95036 = c*t95035;
                double t95037 = sqrt(t95036);
                double t95038 = pow(t95036,3.0/2.0);
                double t95039 = c*c;
                double t95040 = 1.0/pow(rho_a[index],2.0/3.0);
                double t95041 = 1.0/c0p;
                double t95042 = b1p*t95037;
                double t95043 = b3p*t95038;
                double t95044 = b4p*t95040*t95039;
                double t95045 = b2p*c*t95035;
                double t95046 = t95042+t95043+t95044+t95045;
                double t95047 = 1.0/t95046;
                double t95048 = t95041*t95047*(1.0/2.0);
                double t95049 = t95048+1.0;
                double t95050 = log(t95049);
                double t95051 = a1p*c*t95035;
                double t95052 = t95051+1.0;
                double t95053 = pow(2.0,1.0/3.0);
                double t95054 = t95053*2.0;
                double t95055 = t95054-2.0;
                double t95056 = two_13*2.0;
                double t95057 = t95056-2.0;
                double t95058 = 1.0/t95057;
                double t95059 = 1.0/c0f;
                double t95060 = 1.0/pow(rho_b[index],1.0/3.0);
                double t95061 = c*t95060;
                double t95062 = sqrt(t95061);
                double t95063 = pow(t95061,3.0/2.0);
                double t95064 = 1.0/pow(rho_b[index],2.0/3.0);
                double t95065 = b1p*t95062;
                double t95066 = b3p*t95063;
                double t95067 = b4p*t95064*t95039;
                double t95068 = b2p*c*t95060;
                double t95069 = t95065+t95066+t95067+t95068;
                double t95070 = 1.0/t95069;
                double t95071 = t95041*t95070*(1.0/2.0);
                double t95072 = t95071+1.0;
                double t95073 = log(t95072);
                double t95074 = a1p*c*t95060;
                double t95075 = t95074+1.0;
                double t95076 = c0p*t95073*t95075*2.0;
                double t95077 = rho_a[index]+rho_b[index];
                double t95078 = 1.0/pow(t95077,1.0/3.0);
                double t95079 = c*t95078;
                double t95080 = sqrt(t95079);
                double t95081 = pow(t95079,3.0/2.0);
                double t95082 = 1.0/pow(t95077,2.0/3.0);
                double t95083 = b1p*t95080;
                double t95084 = b3p*t95081;
                double t95085 = b4p*t95082*t95039;
                double t95086 = b2p*c*t95078;
                double t95087 = t95083+t95084+t95085+t95086;
                double t95088 = 1.0/t95087;
                double t95089 = t95041*t95088*(1.0/2.0);
                double t95090 = t95089+1.0;
                double t95091 = log(t95090);
                double t95092 = a1p*c*t95078;
                double t95093 = t95092+1.0;
                double t95094 = c0p*t95091*t95093*2.0;
                double t95095 = rho_a[index]-rho_b[index];
                double t95096 = t95095*t95095;
                double t95097 = 1.0/t95077;
                double t95098 = t95095*t95097;
                double t95099 = 1.0/(t95077*t95077*t95077*t95077);
                double t95100 = t95096*t95096;
                double t95101 = t95098+1.0;
                double t95102 = pow(t95101,4.0/3.0);
                double t95103 = -t95098+1.0;
                double t95104 = pow(t95103,4.0/3.0);
                double t95105 = t95102+t95104-2.0;
                double t95106 = gcab*gcab;
                double t95107 = 1.0/pow(rho_a[index],1.1E1/3.0);
                double t95108 = 1.0/pow(rho_b[index],8.0/3.0);
                double t95109 = 1.0/pow(rho_a[index],8.0/3.0);
                double t95110 = gamma_aa[index]*t95109*(1.0/2.0);
                double t95111 = gamma_bb[index]*t95108*(1.0/2.0);
                double t95112 = t95110+t95111;
                double t95113 = t95112*t95112;
                double t95114 = t95113*t95106*3.0;
                double t95115 = gcab*t95112*t95113*t95106;
                double t95116 = gcab*t95112*3.0;
                double t95117 = t95114+t95115+t95116+1.0;
                double t95118 = 1.0/(t95117*t95117);
                double t95119 = gamma_aa[index]*gcab*t95107*(8.0/3.0);
                double t95120 = gamma_aa[index]*t95112*t95106*t95107*(8.0/3.0);
                double t95121 = t95120+t95119;
                double t95122 = t95113*t95106;
                double t95123 = gcab*t95112*2.0;
                double t95124 = t95122+t95123+1.0;
                double t95125 = gamma_aa[index]*gcab*t95107*4.0;
                double t95126 = gamma_aa[index]*gcab*t95113*t95106*t95107*4.0;
                double t95127 = gamma_aa[index]*t95112*t95106*t95107*8.0;
                double t95128 = t95125+t95126+t95127;
                double t95129 = gcab*t95108;
                double t95130 = t95112*t95106*t95108;
                double t95131 = t95130+t95129;
                double t95132 = 1.0/(t95124*t95124);
                double t95133 = gcab*t95112;
                double t95134 = t95133+1.0;
                double t95135 = gcab*t95108*(3.0/2.0);
                double t95136 = t95112*t95106*t95108*3.0;
                double t95137 = gcab*t95113*t95106*t95108*(3.0/2.0);
                double t95138 = t95135+t95136+t95137;
                double t95139 = c0p*t95050*t95052*2.0;
                double t95140 = 1.0/(t95134*t95134);
                double t95141 = 1.0/t95124;
                double t95142 = 1.0/t95117;
                double t95143 = 1.0/pow(t95077,4.0/3.0);
                double t95144 = b1f*t95080;
                double t95145 = b3f*t95081;
                double t95146 = b4f*t95082*t95039;
                double t95147 = b2f*c*t95078;
                double t95148 = t95144+t95145+t95146+t95147;
                double t95149 = 1.0/t95148;
                double t95150 = t95059*t95149*(1.0/2.0);
                double t95151 = t95150+1.0;
                double t95152 = log(t95151);
                double t95153 = a1f*c*t95078;
                double t95154 = t95153+1.0;
                double t95156 = c0f*t95152*t95154*2.0;
                double t95155 = -t95156+t95094;
                double t95157 = 1.0/(t95077*t95077);
                double t95185 = t95157*t95095;
                double t95158 = -t95185+t95097;
                double t95159 = t95156-t95094;
                double t95160 = 1.0/pow(t95077,5.0/3.0);
                double t95161 = 1.0/sqrt(t95079);
                double t95162 = 1.0/t95090;
                double t95163 = 1.0/(t95087*t95087);
                double t95164 = b4p*t95160*t95039*(2.0/3.0);
                double t95165 = b2p*c*t95143*(1.0/3.0);
                double t95166 = b1p*c*t95143*t95161*(1.0/6.0);
                double t95167 = b3p*c*t95080*t95143*(1.0/2.0);
                double t95168 = t95164+t95165+t95166+t95167;
                double t95169 = t95162*t95163*t95093*t95168;
                double t95170 = 1.0/d2fz0;
                double t95171 = 1.0/Aa;
                double t95172 = b1a*t95080;
                double t95173 = b3a*t95081;
                double t95174 = b4a*t95082*t95039;
                double t95175 = b2a*c*t95078;
                double t95176 = t95172+t95173+t95174+t95175;
                double t95177 = 1.0/t95176;
                double t95178 = t95171*t95177*(1.0/2.0);
                double t95179 = t95178+1.0;
                double t95180 = log(t95179);
                double t95181 = a1a*c*t95078;
                double t95182 = t95181+1.0;
                double t95183 = 1.0/(t95077*t95077*t95077*t95077*t95077);
                double t95184 = pow(t95101,1.0/3.0);
                double t95186 = t95184*t95158*(4.0/3.0);
                double t95187 = pow(t95103,1.0/3.0);
                double t95188 = t95186-t95158*t95187*(4.0/3.0);
                double t95189 = t95100*t95099;
                double t95190 = t95189-1.0;
                double t95191 = a1f*c*t95035;
                double t95192 = t95191+1.0;
                double t95193 = b1f*t95037;
                double t95194 = b3f*t95038;
                double t95195 = b4f*t95040*t95039;
                double t95196 = b2f*c*t95035;
                double t95197 = t95193+t95194+t95195+t95196;
                double t95198 = 1.0/t95197;
                double t95199 = t95059*t95198*(1.0/2.0);
                double t95200 = t95199+1.0;
                double t95201 = 1.0/pow(rho_a[index],4.0/3.0);
                double t95202 = 1.0/pow(rho_a[index],5.0/3.0);
                double t95203 = 1.0/sqrt(t95036);
                double t95204 = log(t95200);
                double t95205 = 1.0/t95049;
                double t95206 = 1.0/(t95046*t95046);
                double t95207 = b4p*t95202*t95039*(2.0/3.0);
                double t95208 = b2p*c*t95201*(1.0/3.0);
                double t95209 = b1p*c*t95201*t95203*(1.0/6.0);
                double t95210 = b3p*c*t95201*t95037*(1.0/2.0);
                double t95211 = t95210+t95207+t95208+t95209;
                double t95212 = t95211*t95052*t95205*t95206;
                double t95213 = Aa*t95105*t95170*t95180*t95190*t95182*t95058*2.0;
                double t95214 = t95139-c0f*t95204*t95192*2.0;
                v_rho_a_gamma_bb_[index] = -((ccab1*gcab*t95108*(1.0/2.0))/t95134-ccab2*t95113*t95131*t95132*t95106- \
                   ccab1*t95112*t95140*t95106*t95108*(1.0/2.0)+ccab2*t95112*t95141*t95106*t95108+ccab3*gcab*t95113*t95106* \
                   t95142*t95108*(3.0/2.0)-ccab3*gcab*t95112*t95113*t95106*t95118*t95138)*(t95213+t95094-t95139+rho_a[index]* \
                   (-t95212+t95055*t95058*(t95212-(t95192*1.0/(t95197*t95197)*(b2f*c*t95201*(1.0/3.0)+b4f*t95202*t95039* \
                   (2.0/3.0)+b1f*c*t95201*t95203*(1.0/6.0)+b3f*c*t95201*t95037*(1.0/2.0)))/t95200+a1f*c*c0f*t95201*t95204* \
                   (2.0/3.0)-a1p*c*c0p*t95201*t95050*(2.0/3.0))+a1p*c*c0p*t95201*t95050*(2.0/3.0))-t95077*(-t95169+t95100* \
                   t95105*t95058*t95099*(t95169-(t95154*1.0/(t95148*t95148)*(b2f*c*t95143*(1.0/3.0)+b4f*t95160*t95039* \
                   (2.0/3.0)+b1f*c*t95143*t95161*(1.0/6.0)+b3f*c*t95080*t95143*(1.0/2.0)))/t95151+a1f*c*c0f*t95143*t95152* \
                   (2.0/3.0)-a1p*c*c0p*t95143*t95091*(2.0/3.0))+a1p*c*c0p*t95143*t95091*(2.0/3.0)+t95100*t95105*t95183* \
                   t95058*t95159*4.0-t95100*t95058*t95159*t95188*t95099+t95105*t95155*t95058*t95095*t95096*t95099*4.0+ \
                   Aa*t95105*t95170*t95180*t95182*t95058*(t95100*t95183*4.0-t95095*t95096*t95099*4.0)*2.0-Aa*t95170*t95180* \
                   t95190*t95182*t95058*t95188*2.0-(t95105*t95170*t95190*t95182*t95058*1.0/(t95176*t95176)*(b2a*c*t95143* \
                   (1.0/3.0)+b4a*t95160*t95039*(2.0/3.0)+b1a*c*t95143*t95161*(1.0/6.0)+b3a*c*t95080*t95143*(1.0/2.0)) \
                   )/t95179+Aa*a1a*c*t95105*t95143*t95170*t95180*t95190*t95058*(2.0/3.0))+t95214*t95055*t95058+t95100* \
                   t95105*t95058*t95159*t95099)+(rho_a[index]*(t95139-t95214*t95055*t95058)+rho_b[index]*(t95076-t95055* \
                   t95058*(t95076-c0f*log((t95059*(1.0/2.0))/(b1f*t95062+b3f*t95063+b2f*c*t95060+b4f*t95064*t95039)+1.0) \
                   *(a1f*c*t95060+1.0)*2.0))-t95077*(t95213+t95094-t95100*t95105*t95155*t95058*t95099))*(ccab2*t95112* \
                   t95121*t95132*t95106*t95108-ccab2*t95121*t95113*t95131*t95106*1.0/(t95124*t95124*t95124)*2.0+ccab1* \
                   gamma_aa[index]*t95140*t95106*t95107*t95108*(4.0/3.0)-ccab2*gamma_aa[index]*t95141*t95106*t95107*t95108* \
                   (4.0/3.0)+ccab2*gamma_aa[index]*t95112*t95131*t95132*t95106*t95107*(8.0/3.0)+ccab3*gcab*t95113*t95106* \
                   t95108*t95118*t95128*(3.0/2.0)+ccab3*gcab*t95112*t95113*t95106*t95118*(gamma_aa[index]*t95106*t95107* \
                   t95108*4.0+gamma_aa[index]*gcab*t95112*t95106*t95107*t95108*4.0)+ccab2*gamma_aa[index]*t95113*t95132* \
                   (t95106*t95106)*t95107*t95108*(4.0/3.0)-ccab1*gamma_aa[index]*gcab*t95112*t95106*t95107*1.0/(t95134* \
                   t95134*t95134)*t95108*(4.0/3.0)-ccab3*gcab*t95112*t95113*t95106*1.0/(t95117*t95117*t95117)*t95128* \
                   t95138*2.0-ccab3*gamma_aa[index]*gcab*t95112*t95106*t95142*t95107*t95108*4.0+ccab3*gamma_aa[index]* \
                   gcab*t95113*t95106*t95107*t95118*t95138*4.0);
            } else if (rho_a[index] > cutoff_) {
                v_rho_a_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_a_gamma_bb_[index] = 0.0;
            } else {
                v_rho_a_gamma_bb_[index] = 0.0;
            }

            //V_rho_b_gamma_aa
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t95216 = 1.0/pow(rho_a[index],1.0/3.0);
                double t95217 = c*t95216;
                double t95218 = sqrt(t95217);
                double t95219 = pow(t95217,3.0/2.0);
                double t95220 = c*c;
                double t95221 = 1.0/pow(rho_a[index],2.0/3.0);
                double t95222 = 1.0/c0p;
                double t95223 = b1p*t95218;
                double t95224 = b3p*t95219;
                double t95225 = b4p*t95220*t95221;
                double t95226 = b2p*c*t95216;
                double t95227 = t95223+t95224+t95225+t95226;
                double t95228 = 1.0/t95227;
                double t95229 = t95222*t95228*(1.0/2.0);
                double t95230 = t95229+1.0;
                double t95231 = log(t95230);
                double t95232 = a1p*c*t95216;
                double t95233 = t95232+1.0;
                double t95234 = pow(2.0,1.0/3.0);
                double t95235 = t95234*2.0;
                double t95236 = t95235-2.0;
                double t95237 = two_13*2.0;
                double t95238 = t95237-2.0;
                double t95239 = 1.0/t95238;
                double t95240 = 1.0/c0f;
                double t95241 = 1.0/pow(rho_b[index],1.0/3.0);
                double t95242 = c*t95241;
                double t95243 = sqrt(t95242);
                double t95244 = pow(t95242,3.0/2.0);
                double t95245 = 1.0/pow(rho_b[index],2.0/3.0);
                double t95246 = b1p*t95243;
                double t95247 = b3p*t95244;
                double t95248 = b4p*t95220*t95245;
                double t95249 = b2p*c*t95241;
                double t95250 = t95246+t95247+t95248+t95249;
                double t95251 = 1.0/t95250;
                double t95252 = t95222*t95251*(1.0/2.0);
                double t95253 = t95252+1.0;
                double t95254 = log(t95253);
                double t95255 = a1p*c*t95241;
                double t95256 = t95255+1.0;
                double t95257 = c0p*t95254*t95256*2.0;
                double t95258 = rho_a[index]+rho_b[index];
                double t95259 = 1.0/pow(t95258,1.0/3.0);
                double t95260 = c*t95259;
                double t95261 = sqrt(t95260);
                double t95262 = pow(t95260,3.0/2.0);
                double t95263 = 1.0/pow(t95258,2.0/3.0);
                double t95264 = b1p*t95261;
                double t95265 = b3p*t95262;
                double t95266 = b4p*t95220*t95263;
                double t95267 = b2p*c*t95259;
                double t95268 = t95264+t95265+t95266+t95267;
                double t95269 = 1.0/t95268;
                double t95270 = t95222*t95269*(1.0/2.0);
                double t95271 = t95270+1.0;
                double t95272 = log(t95271);
                double t95273 = a1p*c*t95259;
                double t95274 = t95273+1.0;
                double t95275 = c0p*t95272*t95274*2.0;
                double t95276 = rho_a[index]-rho_b[index];
                double t95277 = t95276*t95276;
                double t95278 = 1.0/t95258;
                double t95279 = t95276*t95278;
                double t95280 = 1.0/(t95258*t95258*t95258*t95258);
                double t95281 = t95277*t95277;
                double t95282 = t95279+1.0;
                double t95283 = pow(t95282,4.0/3.0);
                double t95284 = -t95279+1.0;
                double t95285 = pow(t95284,4.0/3.0);
                double t95286 = t95283+t95285-2.0;
                double t95287 = gcab*gcab;
                double t95288 = 1.0/pow(rho_a[index],8.0/3.0);
                double t95289 = 1.0/pow(rho_b[index],1.1E1/3.0);
                double t95290 = gamma_aa[index]*t95288*(1.0/2.0);
                double t95291 = 1.0/pow(rho_b[index],8.0/3.0);
                double t95292 = gamma_bb[index]*t95291*(1.0/2.0);
                double t95293 = t95290+t95292;
                double t95294 = t95293*t95293;
                double t95295 = t95294*t95287*3.0;
                double t95296 = gcab*t95293*t95294*t95287;
                double t95297 = gcab*t95293*3.0;
                double t95298 = t95295+t95296+t95297+1.0;
                double t95299 = 1.0/(t95298*t95298);
                double t95300 = gamma_bb[index]*gcab*t95289*(8.0/3.0);
                double t95301 = gamma_bb[index]*t95293*t95287*t95289*(8.0/3.0);
                double t95302 = t95300+t95301;
                double t95303 = t95294*t95287;
                double t95304 = gcab*t95293*2.0;
                double t95305 = t95303+t95304+1.0;
                double t95306 = gamma_bb[index]*gcab*t95289*4.0;
                double t95307 = gamma_bb[index]*gcab*t95294*t95287*t95289*4.0;
                double t95308 = gamma_bb[index]*t95293*t95287*t95289*8.0;
                double t95309 = t95306+t95307+t95308;
                double t95310 = gcab*t95288;
                double t95311 = t95293*t95287*t95288;
                double t95312 = t95310+t95311;
                double t95313 = 1.0/(t95305*t95305);
                double t95314 = gcab*t95293;
                double t95315 = t95314+1.0;
                double t95316 = gcab*t95288*(3.0/2.0);
                double t95317 = t95293*t95287*t95288*3.0;
                double t95318 = gcab*t95294*t95287*t95288*(3.0/2.0);
                double t95319 = t95316+t95317+t95318;
                double t95320 = c0p*t95231*t95233*2.0;
                double t95321 = 1.0/(t95315*t95315);
                double t95322 = 1.0/t95305;
                double t95323 = 1.0/t95298;
                double t95324 = 1.0/pow(t95258,4.0/3.0);
                double t95325 = b1f*t95261;
                double t95326 = b3f*t95262;
                double t95327 = b4f*t95220*t95263;
                double t95328 = b2f*c*t95259;
                double t95329 = t95325+t95326+t95327+t95328;
                double t95330 = 1.0/t95329;
                double t95331 = t95240*t95330*(1.0/2.0);
                double t95332 = t95331+1.0;
                double t95333 = log(t95332);
                double t95334 = a1f*c*t95259;
                double t95335 = t95334+1.0;
                double t95337 = c0f*t95333*t95335*2.0;
                double t95336 = -t95337+t95275;
                double t95338 = 1.0/(t95258*t95258);
                double t95339 = t95338*t95276;
                double t95340 = t95339+t95278;
                double t95341 = t95337-t95275;
                double t95342 = 1.0/pow(t95258,5.0/3.0);
                double t95343 = 1.0/sqrt(t95260);
                double t95344 = 1.0/t95271;
                double t95345 = 1.0/(t95268*t95268);
                double t95346 = b4p*t95220*t95342*(2.0/3.0);
                double t95347 = b2p*c*t95324*(1.0/3.0);
                double t95348 = b1p*c*t95324*t95343*(1.0/6.0);
                double t95349 = b3p*c*t95261*t95324*(1.0/2.0);
                double t95350 = t95346+t95347+t95348+t95349;
                double t95351 = 1.0/d2fz0;
                double t95352 = 1.0/Aa;
                double t95353 = b1a*t95261;
                double t95354 = b3a*t95262;
                double t95355 = b4a*t95220*t95263;
                double t95356 = b2a*c*t95259;
                double t95357 = t95353+t95354+t95355+t95356;
                double t95358 = 1.0/t95357;
                double t95359 = t95352*t95358*(1.0/2.0);
                double t95360 = t95359+1.0;
                double t95361 = log(t95360);
                double t95362 = a1a*c*t95259;
                double t95363 = t95362+1.0;
                double t95364 = 1.0/(t95258*t95258*t95258*t95258*t95258);
                double t95365 = pow(t95282,1.0/3.0);
                double t95366 = t95340*t95365*(4.0/3.0);
                double t95367 = pow(t95284,1.0/3.0);
                double t95368 = t95366-t95340*t95367*(4.0/3.0);
                double t95369 = t95280*t95281;
                double t95370 = t95369-1.0;
                double t95371 = a1f*c*t95241;
                double t95372 = t95371+1.0;
                double t95373 = b1f*t95243;
                double t95374 = b3f*t95244;
                double t95375 = b4f*t95220*t95245;
                double t95376 = b2f*c*t95241;
                double t95377 = t95373+t95374+t95375+t95376;
                double t95378 = 1.0/t95377;
                double t95379 = t95240*t95378*(1.0/2.0);
                double t95380 = t95379+1.0;
                double t95381 = 1.0/pow(rho_b[index],4.0/3.0);
                double t95382 = 1.0/pow(rho_b[index],5.0/3.0);
                double t95383 = 1.0/sqrt(t95242);
                double t95384 = log(t95380);
                double t95385 = 1.0/t95253;
                double t95386 = 1.0/(t95250*t95250);
                double t95387 = b4p*t95220*t95382*(2.0/3.0);
                double t95388 = b2p*c*t95381*(1.0/3.0);
                double t95389 = b1p*c*t95381*t95383*(1.0/6.0);
                double t95390 = b3p*c*t95243*t95381*(1.0/2.0);
                double t95391 = t95390+t95387+t95388+t95389;
                double t95392 = t95256*t95391*t95385*t95386;
                double t95393 = t95257-c0f*t95372*t95384*2.0;
                double t95394 = Aa*t95351*t95361*t95370*t95363*t95239*t95286*2.0;
                double t95395 = a1p*c*c0p*t95324*t95272*(2.0/3.0);
                v_rho_b_gamma_aa_[index] = -((ccab1*gcab*t95288*(1.0/2.0))/t95315-ccab2*t95312*t95313*t95294*t95287- \
                   ccab1*t95321*t95293*t95287*t95288*(1.0/2.0)+ccab2*t95322*t95293*t95287*t95288+ccab3*gcab*t95323*t95294* \
                   t95287*t95288*(3.0/2.0)-ccab3*gcab*t95319*t95293*t95294*t95287*t95299)*(-t95257+t95275+t95394+rho_b[index]* \
                   (-t95392+t95236*t95239*(t95392-(t95372*1.0/(t95377*t95377)*(b2f*c*t95381*(1.0/3.0)+b4f*t95220*t95382* \
                   (2.0/3.0)+b1f*c*t95381*t95383*(1.0/6.0)+b3f*c*t95243*t95381*(1.0/2.0)))/t95380+a1f*c*c0f*t95381*t95384* \
                   (2.0/3.0)-a1p*c*c0p*t95254*t95381*(2.0/3.0))+a1p*c*c0p*t95254*t95381*(2.0/3.0))-t95258*(t95395-t95350* \
                   t95344*t95345*t95274+t95341*t95280*t95281*t95239*t95368+t95341*t95281*t95364*t95239*t95286*4.0-t95280* \
                   t95281*t95239*t95286*(t95395-t95350*t95344*t95345*t95274+(t95335*1.0/(t95329*t95329)*(b2f*c*t95324* \
                   (1.0/3.0)+b4f*t95220*t95342*(2.0/3.0)+b1f*c*t95324*t95343*(1.0/6.0)+b3f*c*t95261*t95324*(1.0/2.0)) \
                   )/t95332-a1f*c*c0f*t95324*t95333*(2.0/3.0))-t95280*t95336*t95239*t95276*t95277*t95286*4.0+Aa*t95351* \
                   t95361*t95363*t95239*t95286*(t95281*t95364*4.0+t95280*t95276*t95277*4.0)*2.0+Aa*t95351*t95361*t95370* \
                   t95363*t95239*t95368*2.0-(t95351*t95370*t95363*t95239*1.0/(t95357*t95357)*t95286*(b2a*c*t95324*(1.0/ \
                   3.0)+b4a*t95220*t95342*(2.0/3.0)+b1a*c*t95324*t95343*(1.0/6.0)+b3a*c*t95261*t95324*(1.0/2.0)))/t95360+ \
                   Aa*a1a*c*t95324*t95351*t95361*t95370*t95239*t95286*(2.0/3.0))+t95236*t95239*t95393+t95341*t95280*t95281* \
                   t95239*t95286)+(rho_b[index]*(t95257-t95236*t95239*t95393)+rho_a[index]*(t95320-t95236*t95239*(t95320- \
                   c0f*log((t95240*(1.0/2.0))/(b1f*t95218+b3f*t95219+b2f*c*t95216+b4f*t95220*t95221)+1.0)*(a1f*c*t95216+ \
                   1.0)*2.0))-t95258*(t95275+t95394-t95280*t95281*t95336*t95239*t95286))*(ccab2*t95302*t95313*t95293* \
                   t95287*t95288-ccab2*t95302*t95312*1.0/(t95305*t95305*t95305)*t95294*t95287*2.0+ccab1*gamma_bb[index]* \
                   t95321*t95287*t95288*t95289*(4.0/3.0)-ccab2*gamma_bb[index]*t95322*t95287*t95288*t95289*(4.0/3.0)+ \
                   ccab2*gamma_bb[index]*t95312*t95313*t95293*t95287*t95289*(8.0/3.0)+ccab3*gcab*t95309*t95294*t95287* \
                   t95288*t95299*(3.0/2.0)+ccab3*gcab*t95293*t95294*t95287*t95299*(gamma_bb[index]*t95287*t95288*t95289* \
                   4.0+gamma_bb[index]*gcab*t95293*t95287*t95288*t95289*4.0)+ccab2*gamma_bb[index]*t95313*t95294*(t95287* \
                   t95287)*t95288*t95289*(4.0/3.0)-ccab1*gamma_bb[index]*gcab*1.0/(t95315*t95315*t95315)*t95293*t95287* \
                   t95288*t95289*(4.0/3.0)-ccab3*gcab*t95309*t95319*t95293*t95294*t95287*1.0/(t95298*t95298*t95298)*2.0- \
                   ccab3*gamma_bb[index]*gcab*t95323*t95293*t95287*t95288*t95289*4.0+ccab3*gamma_bb[index]*gcab*t95319* \
                   t95294*t95287*t95289*t95299*4.0);
            } else if (rho_a[index] > cutoff_) {
                v_rho_b_gamma_aa_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_b_gamma_aa_[index] = 0.0;
            } else {
                v_rho_b_gamma_aa_[index] = 0.0;
            }

            //V_rho_b_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_b_gamma_ab_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_b_gamma_ab_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_b_gamma_ab_[index] = 0.0;
            } else {
                v_rho_b_gamma_ab_[index] = 0.0;
            }

            //V_rho_b_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t95398 = 1.0/pow(rho_a[index],1.0/3.0);
                double t95399 = c*t95398;
                double t95400 = sqrt(t95399);
                double t95401 = pow(t95399,3.0/2.0);
                double t95402 = c*c;
                double t95403 = 1.0/pow(rho_a[index],2.0/3.0);
                double t95404 = 1.0/c0p;
                double t95405 = b1p*t95400;
                double t95406 = b3p*t95401;
                double t95407 = b4p*t95402*t95403;
                double t95408 = b2p*c*t95398;
                double t95409 = t95405+t95406+t95407+t95408;
                double t95410 = 1.0/t95409;
                double t95411 = t95410*t95404*(1.0/2.0);
                double t95412 = t95411+1.0;
                double t95413 = log(t95412);
                double t95414 = a1p*c*t95398;
                double t95415 = t95414+1.0;
                double t95416 = pow(2.0,1.0/3.0);
                double t95417 = t95416*2.0;
                double t95418 = t95417-2.0;
                double t95419 = two_13*2.0;
                double t95420 = t95419-2.0;
                double t95421 = 1.0/t95420;
                double t95422 = 1.0/c0f;
                double t95423 = 1.0/pow(rho_b[index],1.0/3.0);
                double t95424 = c*t95423;
                double t95425 = sqrt(t95424);
                double t95426 = pow(t95424,3.0/2.0);
                double t95427 = 1.0/pow(rho_b[index],2.0/3.0);
                double t95428 = b1p*t95425;
                double t95429 = b3p*t95426;
                double t95430 = b4p*t95402*t95427;
                double t95431 = b2p*c*t95423;
                double t95432 = t95430+t95431+t95428+t95429;
                double t95433 = 1.0/t95432;
                double t95434 = t95404*t95433*(1.0/2.0);
                double t95435 = t95434+1.0;
                double t95436 = log(t95435);
                double t95437 = a1p*c*t95423;
                double t95438 = t95437+1.0;
                double t95439 = c0p*t95436*t95438*2.0;
                double t95440 = rho_a[index]+rho_b[index];
                double t95441 = 1.0/pow(t95440,1.0/3.0);
                double t95442 = c*t95441;
                double t95443 = sqrt(t95442);
                double t95444 = pow(t95442,3.0/2.0);
                double t95445 = 1.0/pow(t95440,2.0/3.0);
                double t95446 = b1p*t95443;
                double t95447 = b3p*t95444;
                double t95448 = b4p*t95402*t95445;
                double t95449 = b2p*c*t95441;
                double t95450 = t95446+t95447+t95448+t95449;
                double t95451 = 1.0/t95450;
                double t95452 = t95404*t95451*(1.0/2.0);
                double t95453 = t95452+1.0;
                double t95454 = log(t95453);
                double t95455 = a1p*c*t95441;
                double t95456 = t95455+1.0;
                double t95457 = c0p*t95454*t95456*2.0;
                double t95458 = rho_a[index]-rho_b[index];
                double t95459 = t95458*t95458;
                double t95460 = 1.0/t95440;
                double t95461 = t95460*t95458;
                double t95462 = 1.0/(t95440*t95440*t95440*t95440);
                double t95463 = t95459*t95459;
                double t95464 = t95461+1.0;
                double t95465 = pow(t95464,4.0/3.0);
                double t95466 = -t95461+1.0;
                double t95467 = pow(t95466,4.0/3.0);
                double t95468 = t95465+t95467-2.0;
                double t95469 = 1.0/pow(rho_b[index],1.1E1/3.0);
                double t95470 = 1.0/pow(rho_a[index],8.0/3.0);
                double t95471 = gamma_aa[index]*t95470*(1.0/2.0);
                double t95472 = 1.0/pow(rho_b[index],8.0/3.0);
                double t95473 = gamma_bb[index]*t95472*(1.0/2.0);
                double t95474 = t95471+t95473;
                double t95475 = gcab*t95474;
                double t95476 = t95475+1.0;
                double t95477 = gcab*gcab;
                double t95478 = t95474*t95474;
                double t95479 = 1.0/pow(rho_b[index],1.9E1/3.0);
                double t95480 = t95477*t95478;
                double t95481 = gcab*t95474*2.0;
                double t95482 = t95480+t95481+1.0;
                double t95483 = t95477*t95478*3.0;
                double t95484 = gcab*t95474*t95477*t95478;
                double t95485 = gcab*t95474*3.0;
                double t95486 = t95483+t95484+t95485+1.0;
                double t95487 = 1.0/(t95476*t95476);
                double t95488 = 1.0/t95482;
                double t95489 = 1.0/(t95486*t95486);
                double t95490 = 1.0/(t95482*t95482);
                double t95491 = gamma_bb[index]*gcab*t95469*(8.0/3.0);
                double t95492 = gamma_bb[index]*t95474*t95477*t95469*(8.0/3.0);
                double t95493 = t95491+t95492;
                double t95494 = 1.0/t95486;
                double t95495 = gamma_bb[index]*gcab*t95469*4.0;
                double t95496 = gamma_bb[index]*gcab*t95477*t95469*t95478*4.0;
                double t95497 = gamma_bb[index]*t95474*t95477*t95469*8.0;
                double t95498 = t95495+t95496+t95497;
                double t95499 = gcab*t95472;
                double t95500 = t95472*t95474*t95477;
                double t95501 = t95500+t95499;
                double t95502 = gcab*t95472*(3.0/2.0);
                double t95503 = t95472*t95474*t95477*3.0;
                double t95504 = gcab*t95472*t95477*t95478*(3.0/2.0);
                double t95505 = t95502+t95503+t95504;
                double t95506 = b1f*t95425;
                double t95507 = b3f*t95426;
                double t95508 = b4f*t95402*t95427;
                double t95509 = b2f*c*t95423;
                double t95510 = t95506+t95507+t95508+t95509;
                double t95511 = 1.0/t95510;
                double t95512 = t95511*t95422*(1.0/2.0);
                double t95513 = t95512+1.0;
                double t95514 = log(t95513);
                double t95515 = a1f*c*t95423;
                double t95516 = t95515+1.0;
                double t95650 = c0f*t95514*t95516*2.0;
                double t95517 = -t95650+t95439;
                double t95518 = t95439-t95421*t95418*t95517;
                double t95519 = gcaa*gcaa;
                double t95520 = 1.0/pow(rho_b[index],1.6E1/3.0);
                double t95521 = gamma_bb[index]*gamma_bb[index];
                double t95522 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]);
                double t95523 = gamma_bb[index]*gcaa*t95472;
                double t95524 = t95523+1.0;
                double t95525 = gamma_bb[index]*gcaa*t95472*3.0;
                double t95526 = gamma_bb[index]*gcaa*t95521*t95522*t95519;
                double t95527 = t95520*t95521*t95519*3.0;
                double t95528 = t95525+t95526+t95527+1.0;
                double t95529 = gamma_bb[index]*gcaa*t95472*2.0;
                double t95530 = t95520*t95521*t95519;
                double t95531 = t95530+t95529+1.0;
                double t95532 = 1.0/tau_b[index];
                double t95533 = pow(rho_b[index],2.0/3.0);
                double t95534 = pow(rho_b[index],5.0/3.0);
                double t95535 = C_k*t95532*t95534;
                double t95536 = t95535-1.0;
                double t95537 = t95535+1.0;
                double t95538 = t95536*t95536;
                double t95539 = t95538*t95538;
                double t95540 = gx*gx;
                double t95541 = gamma_bb[index]*gx*t95472;
                double t95542 = t95541+1.0;
                double t95543 = gamma_bb[index]*gx*t95472*3.0;
                double t95544 = gamma_bb[index]*gx*t95521*t95522*t95540;
                double t95545 = t95520*t95521*t95540*3.0;
                double t95546 = t95543+t95544+t95545+1.0;
                double t95547 = gamma_bb[index]*gx*t95472*2.0;
                double t95548 = t95520*t95521*t95540;
                double t95549 = t95547+t95548+1.0;
                double t95550 = 1.0/t95537;
                double t95551 = 1.0/(t95537*t95537*t95537);
                double t95552 = 1.0/(t95537*t95537*t95537*t95537*t95537);
                double t95553 = 1.0/t95542;
                double t95554 = 1.0/t95549;
                double t95555 = 1.0/t95546;
                double t95556 = 1.0/(t95542*t95542);
                double t95557 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]*rho_b[index]);
                double t95558 = 1.0/(t95546*t95546);
                double t95559 = 1.0/(t95549*t95549);
                double t95560 = gx*t95472*3.0;
                double t95561 = gamma_bb[index]*t95520*t95540*6.0;
                double t95562 = gx*t95521*t95522*t95540*3.0;
                double t95563 = t95560+t95561+t95562;
                double t95564 = gx*t95472*2.0;
                double t95565 = gamma_bb[index]*t95520*t95540*2.0;
                double t95566 = t95564+t95565;
                double t95567 = gamma_bb[index]*gx*t95469*(1.6E1/3.0);
                double t95568 = t95521*t95540*t95479*(1.6E1/3.0);
                double t95569 = t95567+t95568;
                double t95570 = gamma_bb[index]*gx*t95469*8.0;
                double t95571 = gamma_bb[index]*gx*t95521*t95540*t95557*8.0;
                double t95572 = t95521*t95540*t95479*1.6E1;
                double t95573 = t95570+t95571+t95572;
                double t95574 = 1.0/(t95542*t95542*t95542);
                double t95575 = gx*t95469*8.0;
                double t95576 = gamma_bb[index]*t95540*t95479*3.2E1;
                double t95577 = gx*t95521*t95540*t95557*2.4E1;
                double t95578 = t95575+t95576+t95577;
                double t95579 = gx*t95469*(1.6E1/3.0);
                double t95580 = gamma_bb[index]*t95540*t95479*(3.2E1/3.0);
                double t95581 = t95580+t95579;
                double t95582 = 1.0/(t95549*t95549*t95549);
                double t95583 = 1.0/(t95546*t95546*t95546);
                double t95584 = t95550*t95536;
                double t95585 = t95552*t95536*t95539;
                double t95586 = t95584+t95585-t95551*t95536*t95538*2.0;
                double t95587 = cxnl1*gx*t95472*t95553;
                double t95588 = cxnl2*gamma_bb[index]*t95520*t95540*t95554*2.0;
                double t95589 = cxnl3*gx*t95521*t95522*t95540*t95555*3.0;
                double t95590 = t95587+t95588+t95589-cxnl1*gamma_bb[index]*t95520*t95540*t95556-cxnl2*t95520*t95521* \
                   t95540*t95566*t95559-cxnl3*gamma_bb[index]*gx*t95521*t95522*t95540*t95563*t95558;
                double t95591 = 1.0/t95476;
                double t95592 = 1.0/pow(t95440,4.0/3.0);
                double t95593 = b1f*t95443;
                double t95594 = b3f*t95444;
                double t95595 = b4f*t95402*t95445;
                double t95596 = b2f*c*t95441;
                double t95597 = t95593+t95594+t95595+t95596;
                double t95598 = 1.0/t95597;
                double t95599 = t95422*t95598*(1.0/2.0);
                double t95600 = t95599+1.0;
                double t95601 = log(t95600);
                double t95602 = a1f*c*t95441;
                double t95603 = t95602+1.0;
                double t95605 = c0f*t95601*t95603*2.0;
                double t95604 = -t95605+t95457;
                double t95606 = 1.0/(t95440*t95440);
                double t95607 = t95606*t95458;
                double t95608 = t95460+t95607;
                double t95609 = t95605-t95457;
                double t95610 = 1.0/pow(t95440,5.0/3.0);
                double t95611 = 1.0/sqrt(t95442);
                double t95612 = 1.0/t95453;
                double t95613 = 1.0/(t95450*t95450);
                double t95614 = b4p*t95402*t95610*(2.0/3.0);
                double t95615 = b2p*c*t95592*(1.0/3.0);
                double t95616 = b1p*c*t95611*t95592*(1.0/6.0);
                double t95617 = b3p*c*t95443*t95592*(1.0/2.0);
                double t95618 = t95614+t95615+t95616+t95617;
                double t95619 = 1.0/d2fz0;
                double t95620 = 1.0/Aa;
                double t95621 = b1a*t95443;
                double t95622 = b3a*t95444;
                double t95623 = b4a*t95402*t95445;
                double t95624 = b2a*c*t95441;
                double t95625 = t95621+t95622+t95623+t95624;
                double t95626 = 1.0/t95625;
                double t95627 = t95620*t95626*(1.0/2.0);
                double t95628 = t95627+1.0;
                double t95629 = log(t95628);
                double t95630 = a1a*c*t95441;
                double t95631 = t95630+1.0;
                double t95632 = 1.0/(t95440*t95440*t95440*t95440*t95440);
                double t95633 = pow(t95464,1.0/3.0);
                double t95634 = t95633*t95608*(4.0/3.0);
                double t95635 = pow(t95466,1.0/3.0);
                double t95636 = t95634-t95608*t95635*(4.0/3.0);
                double t95637 = t95462*t95463;
                double t95638 = t95637-1.0;
                double t95639 = 1.0/pow(rho_b[index],4.0/3.0);
                double t95640 = 1.0/pow(rho_b[index],5.0/3.0);
                double t95641 = 1.0/sqrt(t95424);
                double t95642 = 1.0/t95435;
                double t95643 = 1.0/(t95432*t95432);
                double t95644 = b4p*t95402*t95640*(2.0/3.0);
                double t95645 = b2p*c*t95639*(1.0/3.0);
                double t95646 = b1p*c*t95641*t95639*(1.0/6.0);
                double t95647 = b3p*c*t95425*t95639*(1.0/2.0);
                double t95648 = t95644+t95645+t95646+t95647;
                double t95649 = t95642*t95643*t95438*t95648;
                double t95651 = Aa*t95421*t95631*t95619*t95629*t95638*t95468*2.0;
                double t95652 = a1p*c*c0p*t95454*t95592*(2.0/3.0);
                double t95653 = t95650-t95439;
                double t95654 = 1.0/t95524;
                double t95655 = 1.0/t95531;
                double t95656 = 1.0/t95528;
                double t95657 = 1.0/(t95524*t95524);
                double t95658 = 1.0/(t95528*t95528);
                double t95659 = 1.0/(t95531*t95531);
                double t95660 = gcaa*t95472*3.0;
                double t95661 = gamma_bb[index]*t95520*t95519*6.0;
                double t95662 = gcaa*t95521*t95522*t95519*3.0;
                double t95663 = t95660+t95661+t95662;
                double t95664 = gcaa*t95472*2.0;
                double t95665 = gamma_bb[index]*t95520*t95519*2.0;
                double t95666 = t95664+t95665;
                double t95667 = gamma_bb[index]*gcaa*t95469*(1.6E1/3.0);
                double t95668 = t95521*t95519*t95479*(1.6E1/3.0);
                double t95669 = t95667+t95668;
                double t95670 = gamma_bb[index]*gcaa*t95469*8.0;
                double t95671 = gamma_bb[index]*gcaa*t95521*t95519*t95557*8.0;
                double t95672 = t95521*t95519*t95479*1.6E1;
                double t95673 = t95670+t95671+t95672;
                double t95674 = 1.0/t95513;
                double t95675 = 1.0/(t95510*t95510);
                double t95676 = b4f*t95402*t95640*(2.0/3.0);
                double t95677 = b2f*c*t95639*(1.0/3.0);
                double t95678 = b1f*c*t95641*t95639*(1.0/6.0);
                double t95679 = b3f*c*t95425*t95639*(1.0/2.0);
                double t95680 = t95676+t95677+t95678+t95679;
                double t95681 = a1f*c*c0f*t95514*t95639*(2.0/3.0);
                double t95682 = a1p*c*c0p*t95436*t95639*(2.0/3.0);
                double t95683 = ccaa1*gcaa*t95472*t95654;
                double t95684 = ccaa2*gamma_bb[index]*t95520*t95519*t95655*2.0;
                double t95685 = ccaa3*gcaa*t95521*t95522*t95519*t95656*3.0;
                double t95686 = t95683+t95684+t95685-ccaa1*gamma_bb[index]*t95520*t95519*t95657-ccaa2*t95520*t95521* \
                   t95519*t95666*t95659-ccaa3*gamma_bb[index]*gcaa*t95521*t95522*t95519*t95663*t95658;
                v_rho_b_gamma_bb_[index] = -t95518*t95686-(c0*pow(rho_b[index],1.0/3.0)*(t95590*t95586+cx1*gx*t95472* \
                   t95553-cx1*gamma_bb[index]*t95520*t95540*t95556+cx2*gamma_bb[index]*t95520*t95540*t95554*2.0-cx2*t95520* \
                   t95521*t95540*t95566*t95559+cx3*gx*t95521*t95522*t95540*t95555*3.0-cx3*gamma_bb[index]*gx*t95521*t95522* \
                   t95540*t95563*t95558)*(4.0/3.0)+c0*pow(rho_b[index],4.0/3.0)*(t95586*(cxnl1*gx*t95553*t95469*(-8.0/ \
                   3.0)-cxnl2*gamma_bb[index]*t95540*t95554*t95479*(3.2E1/3.0)+cxnl1*gamma_bb[index]*t95540*t95556*t95479* \
                   8.0+cxnl2*t95520*t95521*t95540*t95581*t95559+cxnl2*t95521*t95540*t95566*t95559*t95479*(1.6E1/3.0)+ \
                   cxnl2*gamma_bb[index]*t95520*t95540*t95559*t95569*2.0-cxnl1*gx*t95521*t95540*t95574*t95557*(1.6E1/ \
                   3.0)-cxnl3*gx*t95521*t95540*t95555*t95557*2.4E1+cxnl3*gx*t95521*t95522*t95540*t95573*t95558*3.0-cxnl2* \
                   t95520*t95521*t95540*t95582*t95566*t95569*2.0+cxnl3*gamma_bb[index]*gx*t95521*t95522*t95540*t95558* \
                   t95578+cxnl3*gamma_bb[index]*gx*t95521*t95540*t95563*t95557*t95558*8.0-cxnl3*gamma_bb[index]*gx*t95521* \
                   t95522*t95540*t95563*t95573*t95583*2.0)+t95590*(C_k*t95532*t95550*t95533*(5.0/3.0)-C_k*t95532*t95533* \
                   t95551*t95538*1.0E1+C_k*t95532*t95533*t95552*t95539*(2.5E1/3.0)-C_k*t95532*t95533*t95536*1.0/(t95537* \
                   t95537)*(5.0/3.0)+C_k*t95532*t95533*t95536*1.0/(t95537*t95537*t95537*t95537)*t95538*1.0E1-C_k*t95532* \
                   t95533*t95536*1.0/(t95537*t95537*t95537*t95537*t95537*t95537)*t95539*(2.5E1/3.0))-cx1*gx*t95553*t95469* \
                   (8.0/3.0)+cx1*gamma_bb[index]*t95540*t95556*t95479*8.0-cx2*gamma_bb[index]*t95540*t95554*t95479*(3.2E1/ \
                   3.0)+cx2*t95520*t95521*t95540*t95581*t95559+cx2*t95521*t95540*t95566*t95559*t95479*(1.6E1/3.0)+cx2* \
                   gamma_bb[index]*t95520*t95540*t95559*t95569*2.0-cx1*gx*t95521*t95540*t95574*t95557*(1.6E1/3.0)-cx3* \
                   gx*t95521*t95540*t95555*t95557*2.4E1+cx3*gx*t95521*t95522*t95540*t95573*t95558*3.0-cx2*t95520*t95521* \
                   t95540*t95582*t95566*t95569*2.0+cx3*gamma_bb[index]*gx*t95521*t95522*t95540*t95558*t95578+cx3*gamma_bb[index]* \
                   gx*t95521*t95540*t95563*t95557*t95558*8.0-cx3*gamma_bb[index]*gx*t95521*t95522*t95540*t95563*t95573* \
                   t95583*2.0))*(X-1.0)+(-rho_b[index]*t95518+t95440*(t95651+t95457-t95421*t95604*t95462*t95463*t95468) \
                   +rho_a[index]*(t95421*t95418*(c0p*t95413*t95415*2.0-c0f*log((t95422*(1.0/2.0))/(b1f*t95400+b3f*t95401+ \
                   b2f*c*t95398+b4f*t95402*t95403)+1.0)*(a1f*c*t95398+1.0)*2.0)-c0p*t95413*t95415*2.0))*(ccab1*gcab*t95591* \
                   t95469*(4.0/3.0)-ccab2*t95490*t95477*t95478*(gcab*t95469*(8.0/3.0)+gamma_bb[index]*t95477*t95479*(4.0/ \
                   3.0)+t95474*t95477*t95469*(8.0/3.0))-ccab1*gamma_bb[index]*t95477*t95487*t95479*(4.0/3.0)+ccab2*gamma_bb[index]* \
                   t95477*t95479*t95488*(4.0/3.0)-ccab1*t95474*t95477*t95469*t95487*(4.0/3.0)+ccab2*t95474*t95477*t95469* \
                   t95488*(8.0/3.0)-ccab2*t95472*t95490*t95474*t95493*t95477+ccab2*t95501*1.0/(t95482*t95482*t95482)* \
                   t95493*t95477*t95478*2.0+ccab3*gcab*t95494*t95477*t95469*t95478*4.0+ccab3*gamma_bb[index]*gcab*t95474* \
                   t95494*t95477*t95479*4.0-ccab2*gamma_bb[index]*t95501*t95490*t95474*t95477*t95469*(8.0/3.0)-ccab3* \
                   gcab*t95472*t95477*t95478*t95489*t95498*(3.0/2.0)-ccab3*gcab*t95474*t95477*t95478*t95489*(gcab*t95469* \
                   4.0+gamma_bb[index]*t95477*t95479*4.0+t95474*t95477*t95469*8.0+gcab*t95477*t95469*t95478*4.0+gamma_bb[index]* \
                   gcab*t95474*t95477*t95479*4.0)+ccab1*gamma_bb[index]*gcab*t95474*1.0/(t95476*t95476*t95476)*t95477* \
                   t95479*(4.0/3.0)+ccab3*gcab*t95505*t95474*t95477*1.0/(t95486*t95486*t95486)*t95478*t95498*2.0-ccab3* \
                   gamma_bb[index]*gcab*t95505*t95477*t95469*t95478*t95489*4.0)-(ccab1*gcab*t95472*t95591*(1.0/2.0)-ccab2* \
                   t95501*t95490*t95477*t95478-ccab1*t95472*t95474*t95477*t95487*(1.0/2.0)+ccab2*t95472*t95474*t95477* \
                   t95488+ccab3*gcab*t95472*t95494*t95477*t95478*(3.0/2.0)-ccab3*gcab*t95505*t95474*t95477*t95478*t95489) \
                   *(t95651-t95439+t95457+rho_b[index]*(t95682-t95649+t95421*t95418*(t95681+t95649-t95516*t95680*t95674* \
                   t95675-a1p*c*c0p*t95436*t95639*(2.0/3.0)))-t95440*(t95652-t95612*t95613*t95456*t95618+t95421*t95462* \
                   t95463*t95609*t95636+t95421*t95632*t95463*t95609*t95468*4.0-t95421*t95462*t95463*t95468*(t95652-t95612* \
                   t95613*t95456*t95618+(t95603*1.0/(t95597*t95597)*(b2f*c*t95592*(1.0/3.0)+b4f*t95402*t95610*(2.0/3.0) \
                   +b1f*c*t95611*t95592*(1.0/6.0)+b3f*c*t95443*t95592*(1.0/2.0)))/t95600-a1f*c*c0f*t95601*t95592*(2.0/ \
                   3.0))-t95421*t95604*t95462*t95458*t95459*t95468*4.0+Aa*t95421*t95631*t95619*t95629*t95468*(t95632* \
                   t95463*4.0+t95462*t95458*t95459*4.0)*2.0+Aa*t95421*t95631*t95636*t95619*t95629*t95638*2.0-(t95421* \
                   t95631*1.0/(t95625*t95625)*t95619*t95638*t95468*(b2a*c*t95592*(1.0/3.0)+b4a*t95402*t95610*(2.0/3.0) \
                   +b1a*c*t95611*t95592*(1.0/6.0)+b3a*c*t95443*t95592*(1.0/2.0)))/t95628+Aa*a1a*c*t95421*t95592*t95619* \
                   t95629*t95638*t95468*(2.0/3.0))-t95421*t95418*t95653+t95421*t95462*t95463*t95609*t95468)+rho_b[index]* \
                   t95686*(t95682-t95649+t95421*t95418*(t95681-t95682+t95649-t95516*t95680*t95674*t95675))-rho_b[index]* \
                   (t95439+t95421*t95418*t95653)*(ccaa1*gcaa*t95654*t95469*(-8.0/3.0)-ccaa2*gamma_bb[index]*t95519*t95655* \
                   t95479*(3.2E1/3.0)+ccaa1*gamma_bb[index]*t95519*t95657*t95479*8.0+ccaa2*t95521*t95519*t95666*t95479* \
                   t95659*(1.6E1/3.0)-ccaa1*gcaa*t95521*1.0/(t95524*t95524*t95524)*t95519*t95557*(1.6E1/3.0)+ccaa2*t95520* \
                   t95521*t95519*t95659*(gcaa*t95469*(1.6E1/3.0)+gamma_bb[index]*t95519*t95479*(3.2E1/3.0))+ccaa2*gamma_bb[index]* \
                   t95520*t95519*t95659*t95669*2.0-ccaa3*gcaa*t95521*t95519*t95557*t95656*2.4E1+ccaa3*gcaa*t95521*t95522* \
                   t95519*t95673*t95658*3.0-ccaa2*t95520*t95521*1.0/(t95531*t95531*t95531)*t95519*t95666*t95669*2.0+ccaa3* \
                   gamma_bb[index]*gcaa*t95521*t95522*t95519*t95658*(gcaa*t95469*8.0+gamma_bb[index]*t95519*t95479*3.2E1+ \
                   gcaa*t95521*t95519*t95557*2.4E1)+ccaa3*gamma_bb[index]*gcaa*t95521*t95519*t95663*t95557*t95658*8.0- \
                   ccaa3*gamma_bb[index]*gcaa*t95521*t95522*t95519*1.0/(t95528*t95528*t95528)*t95663*t95673*2.0);
            } else if (rho_a[index] > cutoff_) {
                v_rho_b_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                double t96762 = 1.0/pow(rho_b[index],1.0/3.0);
                double t96763 = c*t96762;
                double t96764 = sqrt(t96763);
                double t96765 = pow(t96763,3.0/2.0);
                double t96766 = c*c;
                double t96767 = 1.0/pow(rho_b[index],2.0/3.0);
                double t96768 = 1.0/c0p;
                double t96769 = b1p*t96764;
                double t96770 = b3p*t96765;
                double t96771 = b4p*t96766*t96767;
                double t96772 = b2p*c*t96762;
                double t96773 = t96770+t96771+t96772+t96769;
                double t96774 = 1.0/t96773;
                double t96775 = t96774*t96768*(1.0/2.0);
                double t96776 = t96775+1.0;
                double t96777 = log(t96776);
                double t96778 = a1p*c*t96762;
                double t96779 = t96778+1.0;
                double t96780 = 1.0/pow(rho_b[index],8.0/3.0);
                double t96781 = gcaa*gcaa;
                double t96782 = 1.0/pow(rho_b[index],1.6E1/3.0);
                double t96783 = gamma_bb[index]*gamma_bb[index];
                double t96784 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]);
                double t96785 = gamma_bb[index]*gcaa*t96780;
                double t96786 = t96785+1.0;
                double t96787 = gamma_bb[index]*gcaa*t96780*3.0;
                double t96788 = gamma_bb[index]*gcaa*t96781*t96783*t96784;
                double t96789 = t96781*t96782*t96783*3.0;
                double t96790 = t96787+t96788+t96789+1.0;
                double t96791 = gamma_bb[index]*gcaa*t96780*2.0;
                double t96792 = t96781*t96782*t96783;
                double t96793 = t96791+t96792+1.0;
                double t96794 = pow(2.0,1.0/3.0);
                double t96795 = t96794*2.0;
                double t96796 = t96795-2.0;
                double t96797 = two_13*2.0;
                double t96798 = t96797-2.0;
                double t96799 = 1.0/t96798;
                double t96800 = 1.0/c0f;
                double t96801 = b1f*t96764;
                double t96802 = b3f*t96765;
                double t96803 = b4f*t96766*t96767;
                double t96804 = b2f*c*t96762;
                double t96805 = t96801+t96802+t96803+t96804;
                double t96806 = 1.0/t96805;
                double t96807 = t96800*t96806*(1.0/2.0);
                double t96808 = t96807+1.0;
                double t96809 = log(t96808);
                double t96810 = a1f*c*t96762;
                double t96811 = t96810+1.0;
                double t96812 = c0f*t96811*t96809*2.0;
                double t96813 = c0p*t96777*t96779*2.0;
                double t96814 = 1.0/t96786;
                double t96815 = 1.0/t96793;
                double t96816 = 1.0/t96790;
                double t96817 = 1.0/pow(rho_b[index],1.9E1/3.0);
                double t96818 = 1.0/(t96786*t96786);
                double t96819 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]*rho_b[index]);
                double t96820 = 1.0/pow(rho_b[index],1.1E1/3.0);
                double t96821 = 1.0/(t96790*t96790);
                double t96822 = 1.0/(t96793*t96793);
                double t96823 = gcaa*t96780*3.0;
                double t96824 = gamma_bb[index]*t96781*t96782*6.0;
                double t96825 = gcaa*t96781*t96783*t96784*3.0;
                double t96826 = t96823+t96824+t96825;
                double t96827 = gcaa*t96780*2.0;
                double t96828 = gamma_bb[index]*t96781*t96782*2.0;
                double t96829 = t96827+t96828;
                double t96830 = gamma_bb[index]*gcaa*t96820*(1.6E1/3.0);
                double t96831 = t96781*t96817*t96783*(1.6E1/3.0);
                double t96832 = t96830+t96831;
                double t96833 = gamma_bb[index]*gcaa*t96820*8.0;
                double t96834 = gamma_bb[index]*gcaa*t96781*t96783*t96819*8.0;
                double t96835 = t96781*t96817*t96783*1.6E1;
                double t96836 = t96833+t96834+t96835;
                double t96837 = 1.0/pow(rho_b[index],4.0/3.0);
                double t96838 = 1.0/pow(rho_b[index],5.0/3.0);
                double t96839 = 1.0/sqrt(t96763);
                double t96840 = 1.0/t96776;
                double t96841 = 1.0/(t96773*t96773);
                double t96842 = b4p*t96766*t96838*(2.0/3.0);
                double t96843 = b2p*c*t96837*(1.0/3.0);
                double t96844 = b1p*c*t96837*t96839*(1.0/6.0);
                double t96845 = b3p*c*t96764*t96837*(1.0/2.0);
                double t96846 = t96842+t96843+t96844+t96845;
                double t96847 = t96840*t96841*t96846*t96779;
                double t96848 = ccaa1*gcaa*t96814*t96780;
                double t96849 = ccaa2*gamma_bb[index]*t96815*t96781*t96782*2.0;
                double t96850 = ccaa3*gcaa*t96816*t96781*t96783*t96784*3.0;
                double t96851 = t96850+t96848+t96849-ccaa1*gamma_bb[index]*t96781*t96782*t96818-ccaa2*t96822*t96781* \
                   t96782*t96783*t96829-ccaa3*gamma_bb[index]*gcaa*t96821*t96781*t96826*t96783*t96784;
                double t96852 = 1.0/tau_b[index];
                double t96853 = pow(rho_b[index],2.0/3.0);
                double t96854 = pow(rho_b[index],5.0/3.0);
                double t96855 = C_k*t96852*t96854;
                double t96856 = t96855-1.0;
                double t96857 = t96855+1.0;
                double t96858 = t96856*t96856;
                double t96859 = t96858*t96858;
                double t96860 = gx*gx;
                double t96861 = gamma_bb[index]*gx*t96780;
                double t96862 = t96861+1.0;
                double t96863 = gamma_bb[index]*gx*t96780*3.0;
                double t96864 = gamma_bb[index]*gx*t96860*t96783*t96784;
                double t96865 = t96860*t96782*t96783*3.0;
                double t96866 = t96863+t96864+t96865+1.0;
                double t96867 = gamma_bb[index]*gx*t96780*2.0;
                double t96868 = t96860*t96782*t96783;
                double t96869 = t96867+t96868+1.0;
                double t96870 = 1.0/t96857;
                double t96871 = 1.0/(t96857*t96857*t96857);
                double t96872 = 1.0/(t96857*t96857*t96857*t96857*t96857);
                double t96873 = 1.0/t96862;
                double t96874 = 1.0/t96869;
                double t96875 = 1.0/t96866;
                double t96876 = 1.0/(t96862*t96862);
                double t96877 = 1.0/(t96866*t96866);
                double t96878 = 1.0/(t96869*t96869);
                double t96879 = gx*t96780*3.0;
                double t96880 = gamma_bb[index]*t96860*t96782*6.0;
                double t96881 = gx*t96860*t96783*t96784*3.0;
                double t96882 = t96880+t96881+t96879;
                double t96883 = gx*t96780*2.0;
                double t96884 = gamma_bb[index]*t96860*t96782*2.0;
                double t96885 = t96883+t96884;
                double t96886 = gamma_bb[index]*gx*t96820*(1.6E1/3.0);
                double t96887 = t96860*t96817*t96783*(1.6E1/3.0);
                double t96888 = t96886+t96887;
                double t96889 = gamma_bb[index]*gx*t96820*8.0;
                double t96890 = gamma_bb[index]*gx*t96860*t96783*t96819*8.0;
                double t96891 = t96860*t96817*t96783*1.6E1;
                double t96892 = t96890+t96891+t96889;
                double t96893 = 1.0/(t96862*t96862*t96862);
                double t96894 = gx*t96820*8.0;
                double t96895 = gamma_bb[index]*t96860*t96817*3.2E1;
                double t96896 = gx*t96860*t96783*t96819*2.4E1;
                double t96897 = t96894+t96895+t96896;
                double t96898 = gx*t96820*(1.6E1/3.0);
                double t96899 = gamma_bb[index]*t96860*t96817*(3.2E1/3.0);
                double t96900 = t96898+t96899;
                double t96901 = 1.0/(t96869*t96869*t96869);
                double t96902 = 1.0/(t96866*t96866*t96866);
                double t96903 = X-1.0;
                double t96904 = t96870*t96856;
                double t96905 = t96872*t96856*t96859;
                double t96906 = t96904+t96905-t96871*t96856*t96858*2.0;
                double t96907 = cxnl1*gx*t96780*t96873;
                double t96908 = cxnl2*gamma_bb[index]*t96860*t96782*t96874*2.0;
                double t96909 = cxnl3*gx*t96860*t96783*t96784*t96875*3.0;
                double t96910 = t96907+t96908+t96909-cxnl1*gamma_bb[index]*t96860*t96782*t96876-cxnl2*t96860*t96782* \
                   t96783*t96885*t96878-cxnl3*gamma_bb[index]*gx*t96860*t96783*t96882*t96784*t96877;
                v_rho_b_gamma_bb_[index] = -t96851*(t96813+t96796*t96799*(t96812-c0p*t96777*t96779*2.0))+rho_b[index]* \
                   t96851*(-t96847+t96796*t96799*(t96847-(t96811*1.0/(t96805*t96805)*(b2f*c*t96837*(1.0/3.0)+b4f*t96766* \
                   t96838*(2.0/3.0)+b1f*c*t96837*t96839*(1.0/6.0)+b3f*c*t96764*t96837*(1.0/2.0)))/t96808+a1f*c*c0f*t96809* \
                   t96837*(2.0/3.0)-a1p*c*c0p*t96837*t96777*(2.0/3.0))+a1p*c*c0p*t96837*t96777*(2.0/3.0))-rho_b[index]* \
                   (t96813+t96796*t96799*(t96812-t96813))*(ccaa1*gcaa*t96820*t96814*(-8.0/3.0)-ccaa2*gamma_bb[index]* \
                   t96815*t96781*t96817*(3.2E1/3.0)+ccaa1*gamma_bb[index]*t96781*t96817*t96818*8.0+ccaa2*t96822*t96781* \
                   t96817*t96783*t96829*(1.6E1/3.0)-ccaa1*gcaa*t96781*t96783*t96819*1.0/(t96786*t96786*t96786)*(1.6E1/ \
                   3.0)+ccaa2*t96822*t96781*t96782*t96783*(gcaa*t96820*(1.6E1/3.0)+gamma_bb[index]*t96781*t96817*(3.2E1/ \
                   3.0))+ccaa2*gamma_bb[index]*t96822*t96832*t96781*t96782*2.0-ccaa3*gcaa*t96816*t96781*t96783*t96819* \
                   2.4E1+ccaa3*gcaa*t96821*t96781*t96836*t96783*t96784*3.0-ccaa2*t96832*t96781*t96782*t96783*1.0/(t96793* \
                   t96793*t96793)*t96829*2.0+ccaa3*gamma_bb[index]*gcaa*t96821*t96781*t96783*t96784*(gcaa*t96820*8.0+ \
                   gamma_bb[index]*t96781*t96817*3.2E1+gcaa*t96781*t96783*t96819*2.4E1)+ccaa3*gamma_bb[index]*gcaa*t96821* \
                   t96781*t96826*t96783*t96819*8.0-ccaa3*gamma_bb[index]*gcaa*t96781*1.0/(t96790*t96790*t96790)*t96826* \
                   t96836*t96783*t96784*2.0)-c0*pow(rho_b[index],4.0/3.0)*t96903*(t96906*(cxnl1*gx*t96820*t96873*(-8.0/ \
                   3.0)-cxnl2*gamma_bb[index]*t96860*t96817*t96874*(3.2E1/3.0)+cxnl1*gamma_bb[index]*t96860*t96817*t96876* \
                   8.0+cxnl2*t96900*t96860*t96782*t96783*t96878+cxnl2*t96860*t96817*t96783*t96885*t96878*(1.6E1/3.0)+ \
                   cxnl2*gamma_bb[index]*t96860*t96782*t96878*t96888*2.0-cxnl1*gx*t96860*t96783*t96819*t96893*(1.6E1/ \
                   3.0)-cxnl3*gx*t96860*t96783*t96819*t96875*2.4E1+cxnl3*gx*t96860*t96783*t96784*t96892*t96877*3.0-cxnl2* \
                   t96901*t96860*t96782*t96783*t96885*t96888*2.0+cxnl3*gamma_bb[index]*gx*t96860*t96783*t96819*t96882* \
                   t96877*8.0+cxnl3*gamma_bb[index]*gx*t96860*t96783*t96784*t96877*t96897-cxnl3*gamma_bb[index]*gx*t96902* \
                   t96860*t96783*t96882*t96784*t96892*2.0)+t96910*(C_k*t96852*t96870*t96853*(5.0/3.0)-C_k*t96852*t96853* \
                   t96871*t96858*1.0E1+C_k*t96852*t96853*t96872*t96859*(2.5E1/3.0)-C_k*t96852*t96853*t96856*1.0/(t96857* \
                   t96857)*(5.0/3.0)+C_k*t96852*t96853*t96856*1.0/(t96857*t96857*t96857*t96857)*t96858*1.0E1-C_k*t96852* \
                   t96853*t96856*1.0/(t96857*t96857*t96857*t96857*t96857*t96857)*t96859*(2.5E1/3.0))-cx1*gx*t96820*t96873* \
                   (8.0/3.0)+cx1*gamma_bb[index]*t96860*t96817*t96876*8.0-cx2*gamma_bb[index]*t96860*t96817*t96874*(3.2E1/ \
                   3.0)+cx2*t96900*t96860*t96782*t96783*t96878+cx2*t96860*t96817*t96783*t96885*t96878*(1.6E1/3.0)+cx2* \
                   gamma_bb[index]*t96860*t96782*t96878*t96888*2.0-cx1*gx*t96860*t96783*t96819*t96893*(1.6E1/3.0)-cx3* \
                   gx*t96860*t96783*t96819*t96875*2.4E1+cx3*gx*t96860*t96783*t96784*t96892*t96877*3.0-cx2*t96901*t96860* \
                   t96782*t96783*t96885*t96888*2.0+cx3*gamma_bb[index]*gx*t96860*t96783*t96819*t96882*t96877*8.0+cx3* \
                   gamma_bb[index]*gx*t96860*t96783*t96784*t96877*t96897-cx3*gamma_bb[index]*gx*t96902*t96860*t96783* \
                   t96882*t96784*t96892*2.0)-c0*pow(rho_b[index],1.0/3.0)*t96903*(t96910*t96906+cx1*gx*t96780*t96873- \
                   cx1*gamma_bb[index]*t96860*t96782*t96876+cx2*gamma_bb[index]*t96860*t96782*t96874*2.0-cx2*t96860*t96782* \
                   t96783*t96885*t96878+cx3*gx*t96860*t96783*t96784*t96875*3.0-cx3*gamma_bb[index]*gx*t96860*t96783*t96882* \
                   t96784*t96877)*(4.0/3.0);
            } else {
                v_rho_b_gamma_bb_[index] = 0.0;
            }

            //V_gamma_aa_gamma_aa
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t95688 = 1.0/pow(rho_a[index],1.0/3.0);
                double t95689 = c*t95688;
                double t95690 = sqrt(t95689);
                double t95691 = pow(t95689,3.0/2.0);
                double t95692 = c*c;
                double t95693 = 1.0/pow(rho_a[index],2.0/3.0);
                double t95694 = 1.0/c0p;
                double t95695 = b1p*t95690;
                double t95696 = b3p*t95691;
                double t95697 = b4p*t95692*t95693;
                double t95698 = b2p*c*t95688;
                double t95699 = t95695+t95696+t95697+t95698;
                double t95700 = 1.0/t95699;
                double t95701 = t95700*t95694*(1.0/2.0);
                double t95702 = t95701+1.0;
                double t95703 = log(t95702);
                double t95704 = a1p*c*t95688;
                double t95705 = t95704+1.0;
                double t95706 = pow(2.0,1.0/3.0);
                double t95707 = t95706*2.0;
                double t95708 = t95707-2.0;
                double t95709 = two_13*2.0;
                double t95710 = t95709-2.0;
                double t95711 = 1.0/t95710;
                double t95712 = 1.0/c0f;
                double t95713 = 1.0/pow(rho_b[index],1.0/3.0);
                double t95714 = c*t95713;
                double t95715 = sqrt(t95714);
                double t95716 = pow(t95714,3.0/2.0);
                double t95717 = 1.0/pow(rho_b[index],2.0/3.0);
                double t95718 = b1p*t95715;
                double t95719 = b3p*t95716;
                double t95720 = b4p*t95717*t95692;
                double t95721 = b2p*c*t95713;
                double t95722 = t95720+t95721+t95718+t95719;
                double t95723 = 1.0/t95722;
                double t95724 = t95723*t95694*(1.0/2.0);
                double t95725 = t95724+1.0;
                double t95726 = log(t95725);
                double t95727 = a1p*c*t95713;
                double t95728 = t95727+1.0;
                double t95729 = c0p*t95726*t95728*2.0;
                double t95730 = rho_a[index]+rho_b[index];
                double t95731 = 1.0/pow(t95730,1.0/3.0);
                double t95732 = c*t95731;
                double t95733 = sqrt(t95732);
                double t95734 = pow(t95732,3.0/2.0);
                double t95735 = 1.0/pow(t95730,2.0/3.0);
                double t95736 = b1p*t95733;
                double t95737 = b3p*t95734;
                double t95738 = b4p*t95735*t95692;
                double t95739 = b2p*c*t95731;
                double t95740 = t95736+t95737+t95738+t95739;
                double t95741 = 1.0/t95740;
                double t95742 = t95741*t95694*(1.0/2.0);
                double t95743 = t95742+1.0;
                double t95744 = log(t95743);
                double t95745 = a1p*c*t95731;
                double t95746 = t95745+1.0;
                double t95747 = c0p*t95744*t95746*2.0;
                double t95748 = rho_a[index]-rho_b[index];
                double t95749 = t95748*t95748;
                double t95750 = 1.0/t95730;
                double t95751 = t95750*t95748;
                double t95752 = 1.0/(t95730*t95730*t95730*t95730);
                double t95753 = t95749*t95749;
                double t95754 = t95751+1.0;
                double t95755 = pow(t95754,4.0/3.0);
                double t95756 = -t95751+1.0;
                double t95757 = pow(t95756,4.0/3.0);
                double t95758 = t95755+t95757-2.0;
                double t95759 = gcab*gcab;
                double t95760 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t95761 = 1.0/pow(rho_a[index],8.0/3.0);
                double t95762 = gamma_aa[index]*t95761*(1.0/2.0);
                double t95763 = 1.0/pow(rho_b[index],8.0/3.0);
                double t95764 = gamma_bb[index]*t95763*(1.0/2.0);
                double t95765 = t95762+t95764;
                double t95766 = gcab*t95765;
                double t95767 = t95766+1.0;
                double t95768 = t95765*t95765;
                double t95769 = t95759*t95768;
                double t95770 = gcab*t95765*2.0;
                double t95771 = t95770+t95769+1.0;
                double t95781 = gcab*t95761*(3.0/2.0);
                double t95782 = t95761*t95765*t95759*3.0;
                double t95783 = gcab*t95761*t95759*t95768*(3.0/2.0);
                double t95772 = t95781+t95782+t95783;
                double t95773 = t95759*t95768*3.0;
                double t95774 = gcab*t95765*t95759*t95768;
                double t95775 = gcab*t95765*3.0;
                double t95776 = t95773+t95774+t95775+1.0;
                double t95778 = gcab*t95761;
                double t95779 = t95761*t95765*t95759;
                double t95777 = t95778+t95779;
                double t95780 = 1.0/(t95771*t95771);
                double t95784 = 1.0/(t95776*t95776);
                double t95785 = c0p*t95703*t95705*2.0;
                double t95786 = b1f*t95690;
                double t95787 = b3f*t95691;
                double t95788 = b4f*t95692*t95693;
                double t95789 = b2f*c*t95688;
                double t95790 = t95786+t95787+t95788+t95789;
                double t95791 = 1.0/t95790;
                double t95792 = t95712*t95791*(1.0/2.0);
                double t95793 = t95792+1.0;
                double t95794 = log(t95793);
                double t95795 = a1f*c*t95688;
                double t95796 = t95795+1.0;
                double t95797 = t95785-c0f*t95794*t95796*2.0;
                double t95798 = t95785-t95711*t95708*t95797;
                double t95799 = gcaa*gcaa;
                double t95800 = gamma_aa[index]*gcaa*t95761;
                double t95801 = t95800+1.0;
                double t95802 = gamma_aa[index]*gamma_aa[index];
                double t95803 = gamma_aa[index]*gcaa*t95761*2.0;
                double t95804 = t95802*t95760*t95799;
                double t95805 = t95803+t95804+1.0;
                double t95806 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t95807 = gamma_aa[index]*gcaa*t95761*3.0;
                double t95808 = gamma_aa[index]*gcaa*t95802*t95806*t95799;
                double t95809 = t95802*t95760*t95799*3.0;
                double t95810 = t95807+t95808+t95809+1.0;
                double t95813 = gcaa*t95761*2.0;
                double t95814 = gamma_aa[index]*t95760*t95799*2.0;
                double t95811 = t95813+t95814;
                double t95812 = 1.0/(t95810*t95810);
                double t95815 = 1.0/(t95805*t95805);
                double t95816 = gcaa*t95761*3.0;
                double t95817 = gamma_aa[index]*t95760*t95799*6.0;
                double t95818 = gcaa*t95802*t95806*t95799*3.0;
                double t95819 = t95816+t95817+t95818;
                double t95820 = pow(rho_a[index],5.0/3.0);
                double t95821 = 1.0/tau_a[index];
                double t95822 = C_k*t95820*t95821;
                double t95823 = t95822-1.0;
                double t95824 = t95823*t95823;
                double t95825 = t95822+1.0;
                double t95826 = t95824*t95824;
                double t95827 = gx*gx;
                double t95828 = gamma_aa[index]*gx*t95761;
                double t95829 = t95828+1.0;
                double t95830 = 1.0/pow(rho_a[index],3.2E1/3.0);
                double t95831 = gamma_aa[index]*gx*t95761*2.0;
                double t95832 = t95802*t95760*t95827;
                double t95833 = t95831+t95832+1.0;
                double t95834 = gamma_aa[index]*gx*t95761*3.0;
                double t95835 = gamma_aa[index]*gx*t95802*t95806*t95827;
                double t95836 = t95802*t95760*t95827*3.0;
                double t95837 = t95834+t95835+t95836+1.0;
                double t95840 = gx*t95761*2.0;
                double t95841 = gamma_aa[index]*t95760*t95827*2.0;
                double t95838 = t95840+t95841;
                double t95839 = 1.0/(t95837*t95837);
                double t95842 = 1.0/(t95833*t95833);
                double t95843 = gx*t95761*3.0;
                double t95844 = gamma_aa[index]*t95760*t95827*6.0;
                double t95845 = gx*t95802*t95806*t95827*3.0;
                double t95846 = t95843+t95844+t95845;
                double t95847 = 1.0/(t95829*t95829);
                double t95848 = 1.0/t95833;
                double t95849 = 1.0/t95837;
                double t95850 = 1.0/(t95829*t95829*t95829);
                double t95851 = t95827*t95827;
                double t95852 = t95760*t95827*6.0;
                double t95853 = gamma_aa[index]*gx*t95806*t95827*6.0;
                double t95854 = t95852+t95853;
                double t95855 = t95838*t95838;
                double t95856 = 1.0/(t95833*t95833*t95833);
                double t95857 = t95846*t95846;
                double t95858 = 1.0/(t95837*t95837*t95837);
                v_gamma_aa_gamma_aa_[index] = (rho_a[index]*t95798+rho_b[index]*(t95729-t95711*t95708*(t95729-c0f* \
                   log((t95712*(1.0/2.0))/(b1f*t95715+b3f*t95716+b2f*c*t95713+b4f*t95717*t95692)+1.0)*(a1f*c*t95713+1.0) \
                   *2.0))-t95730*(t95747-t95711*t95752*t95753*t95758*(t95747-c0f*log((t95712*(1.0/2.0))/(b1f*t95733+b3f* \
                   t95734+b2f*c*t95731+b4f*t95735*t95692)+1.0)*(a1f*c*t95731+1.0)*2.0)+(Aa*t95711*t95758*log((1.0/2.0) \
                   /(Aa*(b1a*t95733+b3a*t95734+b2a*c*t95731+b4a*t95735*t95692))+1.0)*(t95752*t95753-1.0)*(a1a*c*t95731+ \
                   1.0)*2.0)/d2fz0))*((ccab2*t95760*t95759*(1.0/2.0))/t95771-ccab1*t95760*1.0/(t95767*t95767)*t95759* \
                   (1.0/2.0)+ccab2*1.0/(t95771*t95771*t95771)*t95759*t95768*(t95777*t95777)*2.0-ccab2*t95760*t95780*(t95759* \
                   t95759)*t95768*(1.0/2.0)-ccab2*t95761*t95780*t95765*t95759*t95777*2.0+ccab1*gcab*t95760*t95765*1.0/ \
                   (t95767*t95767*t95767)*t95759*(1.0/2.0)+(ccab3*gcab*t95760*t95765*t95759*(3.0/2.0))/t95776+ccab3*gcab* \
                   (t95772*t95772)*t95765*1.0/(t95776*t95776*t95776)*t95759*t95768*2.0-ccab3*gcab*t95761*t95772*t95784* \
                   t95759*t95768*3.0-ccab3*gcab*t95765*t95784*t95759*t95768*(t95760*t95759*(3.0/2.0)+gcab*t95760*t95765* \
                   t95759*(3.0/2.0)))+rho_a[index]*t95798*(ccaa1*1.0/(t95801*t95801)*t95760*t95799*2.0-(ccaa2*t95760* \
                   t95799*2.0)/t95805+ccaa2*t95802*t95830*t95815*(t95799*t95799)*2.0-ccaa1*gamma_aa[index]*gcaa*1.0/(t95801* \
                   t95801*t95801)*t95806*t95799*2.0-(ccaa3*gamma_aa[index]*gcaa*t95806*t95799*6.0)/t95810-ccaa2*t95802* \
                   (t95811*t95811)*t95760*1.0/(t95805*t95805*t95805)*t95799*2.0+ccaa2*gamma_aa[index]*t95811*t95760*t95815* \
                   t95799*4.0+ccaa3*gcaa*t95802*t95812*t95806*t95819*t95799*6.0+ccaa3*gamma_aa[index]*gcaa*t95802*t95812* \
                   t95806*t95799*(t95760*t95799*6.0+gamma_aa[index]*gcaa*t95806*t95799*6.0)-ccaa3*gamma_aa[index]*gcaa* \
                   1.0/(t95810*t95810*t95810)*t95802*t95806*(t95819*t95819)*t95799*2.0)+c0*pow(rho_a[index],4.0/3.0)* \
                   (X-1.0)*((t95823/t95825-t95823*t95824*1.0/(t95825*t95825*t95825)*2.0+t95823*1.0/(t95825*t95825*t95825* \
                   t95825*t95825)*t95826)*(cxnl1*t95760*t95827*t95847*2.0-cxnl2*t95760*t95827*t95848*2.0+cxnl2*t95802* \
                   t95830*t95842*t95851*2.0-cxnl2*t95802*t95760*t95827*t95855*t95856*2.0-cxnl1*gamma_aa[index]*gx*t95850* \
                   t95806*t95827*2.0-cxnl3*gamma_aa[index]*gx*t95806*t95827*t95849*6.0+cxnl2*gamma_aa[index]*t95760*t95842* \
                   t95827*t95838*4.0+cxnl3*gx*t95802*t95806*t95827*t95846*t95839*6.0+cxnl3*gamma_aa[index]*gx*t95802* \
                   t95806*t95827*t95854*t95839-cxnl3*gamma_aa[index]*gx*t95802*t95806*t95827*t95857*t95858*2.0)+cx1*t95760* \
                   t95827*t95847*2.0-cx2*t95760*t95827*t95848*2.0+cx2*t95802*t95830*t95842*t95851*2.0-cx2*t95802*t95760* \
                   t95827*t95855*t95856*2.0-cx1*gamma_aa[index]*gx*t95850*t95806*t95827*2.0-cx3*gamma_aa[index]*gx*t95806* \
                   t95827*t95849*6.0+cx2*gamma_aa[index]*t95760*t95842*t95827*t95838*4.0+cx3*gx*t95802*t95806*t95827* \
                   t95846*t95839*6.0+cx3*gamma_aa[index]*gx*t95802*t95806*t95827*t95854*t95839-cx3*gamma_aa[index]*gx* \
                   t95802*t95806*t95827*t95857*t95858*2.0);
            } else if (rho_a[index] > cutoff_) {
                double t97683 = 1.0/pow(rho_a[index],1.0/3.0);
                double t97684 = c*t97683;
                double t97685 = sqrt(t97684);
                double t97686 = pow(t97684,3.0/2.0);
                double t97687 = c*c;
                double t97688 = 1.0/pow(rho_a[index],2.0/3.0);
                double t97689 = 1.0/c0p;
                double t97690 = b1p*t97685;
                double t97691 = b3p*t97686;
                double t97692 = b4p*t97687*t97688;
                double t97693 = b2p*c*t97683;
                double t97694 = t97690+t97691+t97692+t97693;
                double t97695 = 1.0/t97694;
                double t97696 = t97695*t97689*(1.0/2.0);
                double t97697 = t97696+1.0;
                double t97698 = log(t97697);
                double t97699 = a1p*c*t97683;
                double t97700 = t97699+1.0;
                double t97701 = gcaa*gcaa;
                double t97702 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t97703 = 1.0/pow(rho_a[index],8.0/3.0);
                double t97704 = gamma_aa[index]*gcaa*t97703;
                double t97705 = t97704+1.0;
                double t97706 = gamma_aa[index]*gamma_aa[index];
                double t97707 = gamma_aa[index]*gcaa*t97703*2.0;
                double t97708 = t97701*t97702*t97706;
                double t97709 = t97707+t97708+1.0;
                double t97710 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t97711 = gamma_aa[index]*gcaa*t97703*3.0;
                double t97712 = gamma_aa[index]*gcaa*t97701*t97710*t97706;
                double t97713 = t97701*t97702*t97706*3.0;
                double t97714 = t97711+t97712+t97713+1.0;
                double t97717 = gcaa*t97703*2.0;
                double t97718 = gamma_aa[index]*t97701*t97702*2.0;
                double t97715 = t97717+t97718;
                double t97716 = 1.0/(t97714*t97714);
                double t97719 = 1.0/(t97709*t97709);
                double t97720 = gcaa*t97703*3.0;
                double t97721 = gamma_aa[index]*t97701*t97702*6.0;
                double t97722 = gcaa*t97701*t97710*t97706*3.0;
                double t97723 = t97720+t97721+t97722;
                double t97724 = pow(rho_a[index],5.0/3.0);
                double t97725 = 1.0/tau_a[index];
                double t97726 = C_k*t97724*t97725;
                double t97727 = t97726-1.0;
                double t97728 = t97727*t97727;
                double t97729 = t97726+1.0;
                double t97730 = t97728*t97728;
                double t97731 = gx*gx;
                double t97732 = gamma_aa[index]*gx*t97703;
                double t97733 = t97732+1.0;
                double t97734 = 1.0/pow(rho_a[index],3.2E1/3.0);
                double t97735 = gamma_aa[index]*gx*t97703*2.0;
                double t97736 = t97702*t97731*t97706;
                double t97737 = t97735+t97736+1.0;
                double t97738 = gamma_aa[index]*gx*t97703*3.0;
                double t97739 = gamma_aa[index]*gx*t97710*t97731*t97706;
                double t97740 = t97702*t97731*t97706*3.0;
                double t97741 = t97740+t97738+t97739+1.0;
                double t97744 = gx*t97703*2.0;
                double t97745 = gamma_aa[index]*t97702*t97731*2.0;
                double t97742 = t97744+t97745;
                double t97743 = 1.0/(t97741*t97741);
                double t97746 = 1.0/(t97737*t97737);
                double t97747 = gx*t97703*3.0;
                double t97748 = gamma_aa[index]*t97702*t97731*6.0;
                double t97749 = gx*t97710*t97731*t97706*3.0;
                double t97750 = t97747+t97748+t97749;
                double t97751 = 1.0/(t97733*t97733);
                double t97752 = 1.0/t97737;
                double t97753 = 1.0/t97741;
                double t97754 = 1.0/(t97733*t97733*t97733);
                double t97755 = t97731*t97731;
                double t97756 = t97702*t97731*6.0;
                double t97757 = gamma_aa[index]*gx*t97710*t97731*6.0;
                double t97758 = t97756+t97757;
                double t97759 = t97742*t97742;
                double t97760 = 1.0/(t97737*t97737*t97737);
                double t97761 = t97750*t97750;
                double t97762 = 1.0/(t97741*t97741*t97741);
                v_gamma_aa_gamma_aa_[index] = rho_a[index]*(((pow(2.0,1.0/3.0)*2.0-2.0)*(c0f*log((1.0/2.0)/(c0f*(b1f* \
                   t97685+b3f*t97686+b2f*c*t97683+b4f*t97687*t97688))+1.0)*(a1f*c*t97683+1.0)*2.0-c0p*t97700*t97698*2.0) \
                   )/(two_13*2.0-2.0)+c0p*t97700*t97698*2.0)*(ccaa1*t97701*t97702*1.0/(t97705*t97705)*2.0-(ccaa2*t97701* \
                   t97702*2.0)/t97709+ccaa2*(t97701*t97701)*t97706*t97734*t97719*2.0-ccaa1*gamma_aa[index]*gcaa*t97701* \
                   t97710*1.0/(t97705*t97705*t97705)*2.0-(ccaa3*gamma_aa[index]*gcaa*t97701*t97710*6.0)/t97714-ccaa2* \
                   t97701*t97702*t97706*(t97715*t97715)*1.0/(t97709*t97709*t97709)*2.0+ccaa2*gamma_aa[index]*t97701*t97702* \
                   t97715*t97719*4.0+ccaa3*gcaa*t97701*t97710*t97723*t97706*t97716*6.0+ccaa3*gamma_aa[index]*gcaa*t97701* \
                   t97710*t97706*t97716*(t97701*t97702*6.0+gamma_aa[index]*gcaa*t97701*t97710*6.0)-ccaa3*gamma_aa[index]* \
                   gcaa*t97701*t97710*1.0/(t97714*t97714*t97714)*(t97723*t97723)*t97706*2.0)+c0*pow(rho_a[index],4.0/ \
                   3.0)*(X-1.0)*((t97727/t97729+t97730*t97727*1.0/(t97729*t97729*t97729*t97729*t97729)-t97727*t97728* \
                   1.0/(t97729*t97729*t97729)*2.0)*(cxnl1*t97702*t97731*t97751*2.0-cxnl2*t97702*t97731*t97752*2.0+cxnl2* \
                   t97706*t97734*t97746*t97755*2.0-cxnl2*t97702*t97731*t97706*t97760*t97759*2.0-cxnl1*gamma_aa[index]* \
                   gx*t97710*t97731*t97754*2.0-cxnl3*gamma_aa[index]*gx*t97710*t97731*t97753*6.0+cxnl2*gamma_aa[index]* \
                   t97702*t97731*t97742*t97746*4.0+cxnl3*gx*t97710*t97731*t97750*t97706*t97743*6.0-cxnl3*gamma_aa[index]* \
                   gx*t97710*t97731*t97706*t97761*t97762*2.0+cxnl3*gamma_aa[index]*gx*t97710*t97731*t97706*t97743*t97758) \
                   +cx1*t97702*t97731*t97751*2.0-cx2*t97702*t97731*t97752*2.0+cx2*t97706*t97734*t97746*t97755*2.0-cx2* \
                   t97702*t97731*t97706*t97760*t97759*2.0-cx1*gamma_aa[index]*gx*t97710*t97731*t97754*2.0-cx3*gamma_aa[index]* \
                   gx*t97710*t97731*t97753*6.0+cx2*gamma_aa[index]*t97702*t97731*t97742*t97746*4.0+cx3*gx*t97710*t97731* \
                   t97750*t97706*t97743*6.0-cx3*gamma_aa[index]*gx*t97710*t97731*t97706*t97761*t97762*2.0+cx3*gamma_aa[index]* \
                   gx*t97710*t97731*t97706*t97743*t97758);
            } else if (rho_b[index] > cutoff_) {
                v_gamma_aa_gamma_aa_[index] = 0.0;
            } else {
                v_gamma_aa_gamma_aa_[index] = 0.0;
            }

            //V_gamma_aa_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_aa_gamma_ab_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_aa_gamma_ab_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_aa_gamma_ab_[index] = 0.0;
            } else {
                v_gamma_aa_gamma_ab_[index] = 0.0;
            }

            //V_gamma_aa_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t95861 = 1.0/pow(rho_a[index],1.0/3.0);
                double t95862 = c*t95861;
                double t95863 = sqrt(t95862);
                double t95864 = pow(t95862,3.0/2.0);
                double t95865 = c*c;
                double t95866 = 1.0/pow(rho_a[index],2.0/3.0);
                double t95867 = 1.0/c0p;
                double t95868 = b1p*t95863;
                double t95869 = b3p*t95864;
                double t95870 = b4p*t95865*t95866;
                double t95871 = b2p*c*t95861;
                double t95872 = t95870+t95871+t95868+t95869;
                double t95873 = 1.0/t95872;
                double t95874 = t95873*t95867*(1.0/2.0);
                double t95875 = t95874+1.0;
                double t95876 = log(t95875);
                double t95877 = a1p*c*t95861;
                double t95878 = t95877+1.0;
                double t95879 = pow(2.0,1.0/3.0);
                double t95880 = t95879*2.0;
                double t95881 = t95880-2.0;
                double t95882 = two_13*2.0;
                double t95883 = t95882-2.0;
                double t95884 = 1.0/t95883;
                double t95885 = 1.0/c0f;
                double t95886 = 1.0/pow(rho_b[index],1.0/3.0);
                double t95887 = c*t95886;
                double t95888 = sqrt(t95887);
                double t95889 = pow(t95887,3.0/2.0);
                double t95890 = 1.0/pow(rho_b[index],2.0/3.0);
                double t95891 = b1p*t95888;
                double t95892 = b3p*t95889;
                double t95893 = b4p*t95890*t95865;
                double t95894 = b2p*c*t95886;
                double t95895 = t95891+t95892+t95893+t95894;
                double t95896 = 1.0/t95895;
                double t95897 = t95867*t95896*(1.0/2.0);
                double t95898 = t95897+1.0;
                double t95899 = log(t95898);
                double t95900 = a1p*c*t95886;
                double t95901 = t95900+1.0;
                double t95902 = c0p*t95901*t95899*2.0;
                double t95903 = rho_a[index]+rho_b[index];
                double t95904 = 1.0/pow(t95903,1.0/3.0);
                double t95905 = c*t95904;
                double t95906 = sqrt(t95905);
                double t95907 = pow(t95905,3.0/2.0);
                double t95908 = 1.0/pow(t95903,2.0/3.0);
                double t95909 = b1p*t95906;
                double t95910 = b3p*t95907;
                double t95911 = b4p*t95908*t95865;
                double t95912 = b2p*c*t95904;
                double t95913 = t95910+t95911+t95912+t95909;
                double t95914 = 1.0/t95913;
                double t95915 = t95914*t95867*(1.0/2.0);
                double t95916 = t95915+1.0;
                double t95917 = log(t95916);
                double t95918 = a1p*c*t95904;
                double t95919 = t95918+1.0;
                double t95920 = c0p*t95917*t95919*2.0;
                double t95921 = rho_a[index]-rho_b[index];
                double t95922 = t95921*t95921;
                double t95923 = 1.0/t95903;
                double t95924 = t95921*t95923;
                double t95925 = 1.0/(t95903*t95903*t95903*t95903);
                double t95926 = t95922*t95922;
                double t95927 = t95924+1.0;
                double t95928 = pow(t95927,4.0/3.0);
                double t95929 = -t95924+1.0;
                double t95930 = pow(t95929,4.0/3.0);
                double t95931 = t95930+t95928-2.0;
                double t95932 = gcab*gcab;
                double t95933 = 1.0/pow(rho_a[index],8.0/3.0);
                double t95934 = 1.0/pow(rho_b[index],8.0/3.0);
                double t95935 = gamma_aa[index]*t95933*(1.0/2.0);
                double t95936 = gamma_bb[index]*t95934*(1.0/2.0);
                double t95937 = t95935+t95936;
                double t95938 = t95937*t95937;
                double t95939 = t95932*t95938*3.0;
                double t95940 = gcab*t95932*t95937*t95938;
                double t95941 = gcab*t95937*3.0;
                double t95942 = t95940+t95941+t95939+1.0;
                double t95943 = t95932*t95938;
                double t95944 = gcab*t95937*2.0;
                double t95945 = t95943+t95944+1.0;
                double t95946 = 1.0/(t95945*t95945);
                double t95947 = gcab*t95933;
                double t95948 = t95932*t95933*t95937;
                double t95949 = t95947+t95948;
                double t95950 = gcab*t95934;
                double t95951 = t95932*t95934*t95937;
                double t95952 = t95950+t95951;
                double t95953 = gcab*t95937;
                double t95954 = t95953+1.0;
                double t95955 = gcab*t95933*(3.0/2.0);
                double t95956 = t95932*t95933*t95937*3.0;
                double t95957 = gcab*t95932*t95933*t95938*(3.0/2.0);
                double t95958 = t95955+t95956+t95957;
                double t95959 = 1.0/(t95942*t95942);
                double t95960 = gcab*t95934*(3.0/2.0);
                double t95961 = t95932*t95934*t95937*3.0;
                double t95962 = gcab*t95932*t95934*t95938*(3.0/2.0);
                double t95963 = t95960+t95961+t95962;
                v_gamma_aa_gamma_bb_[index] = (-rho_b[index]*(t95902-t95881*t95884*(t95902-c0f*log((t95885*(1.0/2.0) \
                   )/(b1f*t95888+b3f*t95889+b2f*c*t95886+b4f*t95890*t95865)+1.0)*(a1f*c*t95886+1.0)*2.0))+t95903*(t95920- \
                   t95931*t95925*t95926*t95884*(t95920-c0f*log((t95885*(1.0/2.0))/(b1f*t95906+b3f*t95907+b2f*c*t95904+ \
                   b4f*t95908*t95865)+1.0)*(a1f*c*t95904+1.0)*2.0)+(Aa*t95931*t95884*log((1.0/2.0)/(Aa*(b1a*t95906+b3a* \
                   t95907+b2a*c*t95904+b4a*t95908*t95865))+1.0)*(t95925*t95926-1.0)*(a1a*c*t95904+1.0)*2.0)/d2fz0)+rho_a[index]* \
                   (t95881*t95884*(c0p*t95876*t95878*2.0-c0f*log((t95885*(1.0/2.0))/(b1f*t95863+b3f*t95864+b2f*c*t95861+ \
                   b4f*t95865*t95866)+1.0)*(a1f*c*t95861+1.0)*2.0)-c0p*t95876*t95878*2.0))*(ccab1*t95932*t95933*t95934* \
                   1.0/(t95954*t95954)*(1.0/2.0)-(ccab2*t95932*t95933*t95934*(1.0/2.0))/t95945+ccab2*t95932*t95933*t95952* \
                   t95937*t95946+ccab2*t95932*t95934*t95937*t95946*t95949+ccab2*(t95932*t95932)*t95933*t95934*t95946* \
                   t95938*(1.0/2.0)-ccab2*t95932*t95952*1.0/(t95945*t95945*t95945)*t95938*t95949*2.0+ccab3*gcab*t95932* \
                   t95933*t95963*t95938*t95959*(3.0/2.0)+ccab3*gcab*t95932*t95934*t95938*t95958*t95959*(3.0/2.0)+ccab3* \
                   gcab*t95932*t95937*t95938*t95959*(t95932*t95933*t95934*(3.0/2.0)+gcab*t95932*t95933*t95934*t95937* \
                   (3.0/2.0))-(ccab3*gcab*t95932*t95933*t95934*t95937*(3.0/2.0))/t95942-ccab1*gcab*t95932*t95933*t95934* \
                   1.0/(t95954*t95954*t95954)*t95937*(1.0/2.0)-ccab3*gcab*t95932*1.0/(t95942*t95942*t95942)*t95963*t95937* \
                   t95938*t95958*2.0);
            } else if (rho_a[index] > cutoff_) {
                v_gamma_aa_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_aa_gamma_bb_[index] = 0.0;
            } else {
                v_gamma_aa_gamma_bb_[index] = 0.0;
            }

            //V_gamma_ab_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_ab_gamma_ab_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_ab_gamma_ab_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_ab_gamma_ab_[index] = 0.0;
            } else {
                v_gamma_ab_gamma_ab_[index] = 0.0;
            }

            //V_gamma_ab_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_ab_gamma_bb_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_ab_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_ab_gamma_bb_[index] = 0.0;
            } else {
                v_gamma_ab_gamma_bb_[index] = 0.0;
            }

            //V_gamma_bb_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t95967 = 1.0/pow(rho_a[index],1.0/3.0);
                double t95968 = c*t95967;
                double t95969 = sqrt(t95968);
                double t95970 = pow(t95968,3.0/2.0);
                double t95971 = c*c;
                double t95972 = 1.0/pow(rho_a[index],2.0/3.0);
                double t95973 = 1.0/c0p;
                double t95974 = b1p*t95969;
                double t95975 = b3p*t95970;
                double t95976 = b4p*t95971*t95972;
                double t95977 = b2p*c*t95967;
                double t95978 = t95974+t95975+t95976+t95977;
                double t95979 = 1.0/t95978;
                double t95980 = t95973*t95979*(1.0/2.0);
                double t95981 = t95980+1.0;
                double t95982 = log(t95981);
                double t95983 = a1p*c*t95967;
                double t95984 = t95983+1.0;
                double t95985 = pow(2.0,1.0/3.0);
                double t95986 = t95985*2.0;
                double t95987 = t95986-2.0;
                double t95988 = two_13*2.0;
                double t95989 = t95988-2.0;
                double t95990 = 1.0/t95989;
                double t95991 = 1.0/c0f;
                double t95992 = 1.0/pow(rho_b[index],1.0/3.0);
                double t95993 = c*t95992;
                double t95994 = sqrt(t95993);
                double t95995 = pow(t95993,3.0/2.0);
                double t95996 = 1.0/pow(rho_b[index],2.0/3.0);
                double t95997 = b1p*t95994;
                double t95998 = b3p*t95995;
                double t95999 = b4p*t95971*t95996;
                double t96000 = b2p*c*t95992;
                double t96001 = t95997+t95998+t95999+t96000;
                double t96002 = 1.0/t96001;
                double t96003 = t95973*t96002*(1.0/2.0);
                double t96004 = t96003+1.0;
                double t96005 = log(t96004);
                double t96006 = a1p*c*t95992;
                double t96007 = t96006+1.0;
                double t96008 = c0p*t96005*t96007*2.0;
                double t96009 = rho_a[index]+rho_b[index];
                double t96010 = 1.0/pow(t96009,1.0/3.0);
                double t96011 = c*t96010;
                double t96012 = sqrt(t96011);
                double t96013 = pow(t96011,3.0/2.0);
                double t96014 = 1.0/pow(t96009,2.0/3.0);
                double t96015 = b1p*t96012;
                double t96016 = b3p*t96013;
                double t96017 = b4p*t95971*t96014;
                double t96018 = b2p*c*t96010;
                double t96019 = t96015+t96016+t96017+t96018;
                double t96020 = 1.0/t96019;
                double t96021 = t95973*t96020*(1.0/2.0);
                double t96022 = t96021+1.0;
                double t96023 = log(t96022);
                double t96024 = a1p*c*t96010;
                double t96025 = t96024+1.0;
                double t96026 = c0p*t96023*t96025*2.0;
                double t96027 = rho_a[index]-rho_b[index];
                double t96028 = t96027*t96027;
                double t96029 = 1.0/t96009;
                double t96030 = t96027*t96029;
                double t96031 = 1.0/(t96009*t96009*t96009*t96009);
                double t96032 = t96028*t96028;
                double t96033 = t96030+1.0;
                double t96034 = pow(t96033,4.0/3.0);
                double t96035 = -t96030+1.0;
                double t96036 = pow(t96035,4.0/3.0);
                double t96037 = t96034+t96036-2.0;
                double t96038 = gcab*gcab;
                double t96039 = 1.0/pow(rho_b[index],1.6E1/3.0);
                double t96040 = 1.0/pow(rho_a[index],8.0/3.0);
                double t96041 = gamma_aa[index]*t96040*(1.0/2.0);
                double t96042 = 1.0/pow(rho_b[index],8.0/3.0);
                double t96043 = gamma_bb[index]*t96042*(1.0/2.0);
                double t96044 = t96041+t96043;
                double t96045 = gcab*t96044;
                double t96046 = t96045+1.0;
                double t96047 = t96044*t96044;
                double t96048 = t96038*t96047;
                double t96049 = gcab*t96044*2.0;
                double t96050 = t96048+t96049+1.0;
                double t96060 = gcab*t96042*(3.0/2.0);
                double t96061 = t96042*t96044*t96038*3.0;
                double t96062 = gcab*t96042*t96038*t96047*(3.0/2.0);
                double t96051 = t96060+t96061+t96062;
                double t96052 = t96038*t96047*3.0;
                double t96053 = gcab*t96044*t96038*t96047;
                double t96054 = gcab*t96044*3.0;
                double t96055 = t96052+t96053+t96054+1.0;
                double t96057 = gcab*t96042;
                double t96058 = t96042*t96044*t96038;
                double t96056 = t96057+t96058;
                double t96059 = 1.0/(t96050*t96050);
                double t96063 = 1.0/(t96055*t96055);
                double t96064 = c0p*t95982*t95984*2.0;
                double t96065 = b1f*t95994;
                double t96066 = b3f*t95995;
                double t96067 = b4f*t95971*t95996;
                double t96068 = b2f*c*t95992;
                double t96069 = t96065+t96066+t96067+t96068;
                double t96070 = 1.0/t96069;
                double t96071 = t95991*t96070*(1.0/2.0);
                double t96072 = t96071+1.0;
                double t96073 = log(t96072);
                double t96074 = a1f*c*t95992;
                double t96075 = t96074+1.0;
                double t96076 = t96008-c0f*t96073*t96075*2.0;
                double t96077 = t96008-t95990*t95987*t96076;
                double t96078 = gcaa*gcaa;
                double t96079 = gamma_bb[index]*gcaa*t96042;
                double t96080 = t96079+1.0;
                double t96081 = gamma_bb[index]*gamma_bb[index];
                double t96082 = gamma_bb[index]*gcaa*t96042*2.0;
                double t96083 = t96081*t96039*t96078;
                double t96084 = t96082+t96083+1.0;
                double t96085 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]);
                double t96086 = gamma_bb[index]*gcaa*t96042*3.0;
                double t96087 = gamma_bb[index]*gcaa*t96081*t96085*t96078;
                double t96088 = t96081*t96039*t96078*3.0;
                double t96089 = t96086+t96087+t96088+1.0;
                double t96092 = gcaa*t96042*2.0;
                double t96093 = gamma_bb[index]*t96039*t96078*2.0;
                double t96090 = t96092+t96093;
                double t96091 = 1.0/(t96089*t96089);
                double t96094 = 1.0/(t96084*t96084);
                double t96095 = gcaa*t96042*3.0;
                double t96096 = gamma_bb[index]*t96039*t96078*6.0;
                double t96097 = gcaa*t96081*t96085*t96078*3.0;
                double t96098 = t96095+t96096+t96097;
                double t96099 = pow(rho_b[index],5.0/3.0);
                double t96100 = 1.0/tau_b[index];
                double t96101 = C_k*t96100*t96099;
                double t96102 = t96101-1.0;
                double t96103 = t96102*t96102;
                double t96104 = t96101+1.0;
                double t96105 = t96103*t96103;
                double t96106 = gx*gx;
                double t96107 = gamma_bb[index]*gx*t96042;
                double t96108 = t96107+1.0;
                double t96109 = 1.0/pow(rho_b[index],3.2E1/3.0);
                double t96110 = gamma_bb[index]*gx*t96042*2.0;
                double t96111 = t96106*t96081*t96039;
                double t96112 = t96110+t96111+1.0;
                double t96113 = gamma_bb[index]*gx*t96042*3.0;
                double t96114 = gamma_bb[index]*gx*t96106*t96081*t96085;
                double t96115 = t96106*t96081*t96039*3.0;
                double t96116 = t96113+t96114+t96115+1.0;
                double t96119 = gx*t96042*2.0;
                double t96120 = gamma_bb[index]*t96106*t96039*2.0;
                double t96117 = t96120+t96119;
                double t96118 = 1.0/(t96116*t96116);
                double t96121 = 1.0/(t96112*t96112);
                double t96122 = gx*t96042*3.0;
                double t96123 = gamma_bb[index]*t96106*t96039*6.0;
                double t96124 = gx*t96106*t96081*t96085*3.0;
                double t96125 = t96122+t96123+t96124;
                double t96126 = 1.0/(t96108*t96108);
                double t96127 = 1.0/t96112;
                double t96128 = 1.0/t96116;
                double t96129 = 1.0/(t96108*t96108*t96108);
                double t96130 = t96106*t96106;
                double t96131 = t96106*t96039*6.0;
                double t96132 = gamma_bb[index]*gx*t96106*t96085*6.0;
                double t96133 = t96131+t96132;
                double t96134 = t96117*t96117;
                double t96135 = 1.0/(t96112*t96112*t96112);
                double t96136 = t96125*t96125;
                double t96137 = 1.0/(t96116*t96116*t96116);
                v_gamma_bb_gamma_bb_[index] = (rho_b[index]*t96077+rho_a[index]*(t96064-t95990*t95987*(t96064-c0f* \
                   log((t95991*(1.0/2.0))/(b1f*t95969+b3f*t95970+b2f*c*t95967+b4f*t95971*t95972)+1.0)*(a1f*c*t95967+1.0) \
                   *2.0))-t96009*(t96026-t95990*t96031*t96032*t96037*(t96026-c0f*log((t95991*(1.0/2.0))/(b1f*t96012+b3f* \
                   t96013+b2f*c*t96010+b4f*t95971*t96014)+1.0)*(a1f*c*t96010+1.0)*2.0)+(Aa*t95990*t96037*log((1.0/2.0) \
                   /(Aa*(b1a*t96012+b3a*t96013+b2a*c*t96010+b4a*t95971*t96014))+1.0)*(t96031*t96032-1.0)*(a1a*c*t96010+ \
                   1.0)*2.0)/d2fz0))*((ccab2*t96038*t96039*(1.0/2.0))/t96050-ccab1*1.0/(t96046*t96046)*t96038*t96039* \
                   (1.0/2.0)+ccab2*1.0/(t96050*t96050*t96050)*t96038*t96047*(t96056*t96056)*2.0-ccab2*(t96038*t96038) \
                   *t96047*t96039*t96059*(1.0/2.0)-ccab2*t96042*t96044*t96038*t96056*t96059*2.0+ccab1*gcab*t96044*1.0/ \
                   (t96046*t96046*t96046)*t96038*t96039*(1.0/2.0)+(ccab3*gcab*t96044*t96038*t96039*(3.0/2.0))/t96055+ \
                   ccab3*gcab*(t96051*t96051)*t96044*1.0/(t96055*t96055*t96055)*t96038*t96047*2.0-ccab3*gcab*t96042*t96051* \
                   t96063*t96038*t96047*3.0-ccab3*gcab*t96044*t96063*t96038*t96047*(t96038*t96039*(3.0/2.0)+gcab*t96044* \
                   t96038*t96039*(3.0/2.0)))+rho_b[index]*t96077*(ccaa1*1.0/(t96080*t96080)*t96039*t96078*2.0-(ccaa2* \
                   t96039*t96078*2.0)/t96084+ccaa2*t96081*t96109*t96094*(t96078*t96078)*2.0-ccaa1*gamma_bb[index]*gcaa* \
                   1.0/(t96080*t96080*t96080)*t96085*t96078*2.0-(ccaa3*gamma_bb[index]*gcaa*t96085*t96078*6.0)/t96089- \
                   ccaa2*t96081*(t96090*t96090)*t96039*1.0/(t96084*t96084*t96084)*t96078*2.0+ccaa2*gamma_bb[index]*t96090* \
                   t96039*t96094*t96078*4.0+ccaa3*gcaa*t96081*t96091*t96085*t96078*t96098*6.0+ccaa3*gamma_bb[index]*gcaa* \
                   t96081*t96091*t96085*t96078*(t96039*t96078*6.0+gamma_bb[index]*gcaa*t96085*t96078*6.0)-ccaa3*gamma_bb[index]* \
                   gcaa*t96081*t96085*t96078*1.0/(t96089*t96089*t96089)*(t96098*t96098)*2.0)+c0*pow(rho_b[index],4.0/ \
                   3.0)*(X-1.0)*((t96102/t96104-t96102*t96103*1.0/(t96104*t96104*t96104)*2.0+t96102*1.0/(t96104*t96104* \
                   t96104*t96104*t96104)*t96105)*(cxnl1*t96106*t96126*t96039*2.0-cxnl2*t96106*t96127*t96039*2.0+cxnl2* \
                   t96121*t96130*t96081*t96109*2.0-cxnl2*t96106*t96134*t96081*t96135*t96039*2.0-cxnl1*gamma_bb[index]* \
                   gx*t96106*t96129*t96085*2.0-cxnl3*gamma_bb[index]*gx*t96106*t96128*t96085*6.0+cxnl2*gamma_bb[index]* \
                   t96121*t96106*t96117*t96039*4.0+cxnl3*gx*t96106*t96125*t96081*t96118*t96085*6.0+cxnl3*gamma_bb[index]* \
                   gx*t96106*t96133*t96081*t96118*t96085-cxnl3*gamma_bb[index]*gx*t96106*t96081*t96136*t96137*t96085* \
                   2.0)+cx1*t96106*t96126*t96039*2.0-cx2*t96106*t96127*t96039*2.0+cx2*t96121*t96130*t96081*t96109*2.0- \
                   cx2*t96106*t96134*t96081*t96135*t96039*2.0-cx1*gamma_bb[index]*gx*t96106*t96129*t96085*2.0-cx3*gamma_bb[index]* \
                   gx*t96106*t96128*t96085*6.0+cx2*gamma_bb[index]*t96121*t96106*t96117*t96039*4.0+cx3*gx*t96106*t96125* \
                   t96081*t96118*t96085*6.0+cx3*gamma_bb[index]*gx*t96106*t96133*t96081*t96118*t96085-cx3*gamma_bb[index]* \
                   gx*t96106*t96081*t96136*t96137*t96085*2.0);
            } else if (rho_a[index] > cutoff_) {
                v_gamma_bb_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                double t96917 = 1.0/pow(rho_b[index],1.0/3.0);
                double t96918 = c*t96917;
                double t96919 = sqrt(t96918);
                double t96920 = pow(t96918,3.0/2.0);
                double t96921 = c*c;
                double t96922 = 1.0/pow(rho_b[index],2.0/3.0);
                double t96923 = 1.0/c0p;
                double t96924 = b1p*t96919;
                double t96925 = b3p*t96920;
                double t96926 = b4p*t96921*t96922;
                double t96927 = b2p*c*t96917;
                double t96928 = t96924+t96925+t96926+t96927;
                double t96929 = 1.0/t96928;
                double t96930 = t96923*t96929*(1.0/2.0);
                double t96931 = t96930+1.0;
                double t96932 = log(t96931);
                double t96933 = a1p*c*t96917;
                double t96934 = t96933+1.0;
                double t96935 = gcaa*gcaa;
                double t96936 = 1.0/pow(rho_b[index],1.6E1/3.0);
                double t96937 = 1.0/pow(rho_b[index],8.0/3.0);
                double t96938 = gamma_bb[index]*gcaa*t96937;
                double t96939 = t96938+1.0;
                double t96940 = gamma_bb[index]*gamma_bb[index];
                double t96941 = gamma_bb[index]*gcaa*t96937*2.0;
                double t96942 = t96940*t96935*t96936;
                double t96943 = t96941+t96942+1.0;
                double t96944 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]);
                double t96945 = gamma_bb[index]*gcaa*t96937*3.0;
                double t96946 = gamma_bb[index]*gcaa*t96940*t96935*t96944;
                double t96947 = t96940*t96935*t96936*3.0;
                double t96948 = t96945+t96946+t96947+1.0;
                double t96951 = gcaa*t96937*2.0;
                double t96952 = gamma_bb[index]*t96935*t96936*2.0;
                double t96949 = t96951+t96952;
                double t96950 = 1.0/(t96948*t96948);
                double t96953 = 1.0/(t96943*t96943);
                double t96954 = gcaa*t96937*3.0;
                double t96955 = gamma_bb[index]*t96935*t96936*6.0;
                double t96956 = gcaa*t96940*t96935*t96944*3.0;
                double t96957 = t96954+t96955+t96956;
                double t96958 = pow(rho_b[index],5.0/3.0);
                double t96959 = 1.0/tau_b[index];
                double t96960 = C_k*t96958*t96959;
                double t96961 = t96960-1.0;
                double t96962 = t96961*t96961;
                double t96963 = t96960+1.0;
                double t96964 = t96962*t96962;
                double t96965 = gx*gx;
                double t96966 = gamma_bb[index]*gx*t96937;
                double t96967 = t96966+1.0;
                double t96968 = 1.0/pow(rho_b[index],3.2E1/3.0);
                double t96969 = gamma_bb[index]*gx*t96937*2.0;
                double t96970 = t96940*t96936*t96965;
                double t96971 = t96970+t96969+1.0;
                double t96972 = gamma_bb[index]*gx*t96937*3.0;
                double t96973 = gamma_bb[index]*gx*t96940*t96944*t96965;
                double t96974 = t96940*t96936*t96965*3.0;
                double t96975 = t96972+t96973+t96974+1.0;
                double t96978 = gx*t96937*2.0;
                double t96979 = gamma_bb[index]*t96936*t96965*2.0;
                double t96976 = t96978+t96979;
                double t96977 = 1.0/(t96975*t96975);
                double t96980 = 1.0/(t96971*t96971);
                double t96981 = gx*t96937*3.0;
                double t96982 = gamma_bb[index]*t96936*t96965*6.0;
                double t96983 = gx*t96940*t96944*t96965*3.0;
                double t96984 = t96981+t96982+t96983;
                double t96985 = 1.0/(t96967*t96967);
                double t96986 = 1.0/t96971;
                double t96987 = 1.0/t96975;
                double t96988 = 1.0/(t96967*t96967*t96967);
                double t96989 = t96965*t96965;
                double t96990 = t96936*t96965*6.0;
                double t96991 = gamma_bb[index]*gx*t96944*t96965*6.0;
                double t96992 = t96990+t96991;
                double t96993 = t96976*t96976;
                double t96994 = 1.0/(t96971*t96971*t96971);
                double t96995 = t96984*t96984;
                double t96996 = 1.0/(t96975*t96975*t96975);
                v_gamma_bb_gamma_bb_[index] = -rho_b[index]*(((pow(2.0,1.0/3.0)*2.0-2.0)*(c0f*log((1.0/2.0)/(c0f* \
                   (b1f*t96919+b3f*t96920+b2f*c*t96917+b4f*t96921*t96922))+1.0)*(a1f*c*t96917+1.0)*2.0-c0p*t96932*t96934* \
                   2.0))/(two_13*2.0-2.0)+c0p*t96932*t96934*2.0)*((ccaa2*t96935*t96936*2.0)/t96943-ccaa1*t96935*t96936* \
                   1.0/(t96939*t96939)*2.0-ccaa2*t96940*(t96935*t96935)*t96953*t96968*2.0+ccaa1*gamma_bb[index]*gcaa* \
                   t96935*t96944*1.0/(t96939*t96939*t96939)*2.0+(ccaa3*gamma_bb[index]*gcaa*t96935*t96944*6.0)/t96948+ \
                   ccaa2*t96940*1.0/(t96943*t96943*t96943)*t96935*t96936*(t96949*t96949)*2.0-ccaa2*gamma_bb[index]*t96935* \
                   t96953*t96936*t96949*4.0-ccaa3*gcaa*t96940*t96950*t96935*t96944*t96957*6.0-ccaa3*gamma_bb[index]*gcaa* \
                   t96940*t96950*t96935*t96944*(t96935*t96936*6.0+gamma_bb[index]*gcaa*t96935*t96944*6.0)+ccaa3*gamma_bb[index]* \
                   gcaa*t96940*t96935*t96944*1.0/(t96948*t96948*t96948)*(t96957*t96957)*2.0)+c0*pow(rho_b[index],4.0/ \
                   3.0)*(X-1.0)*((t96961/t96963-t96961*t96962*1.0/(t96963*t96963*t96963)*2.0+t96961*1.0/(t96963*t96963* \
                   t96963*t96963*t96963)*t96964)*(cxnl1*t96936*t96965*t96985*2.0-cxnl2*t96936*t96965*t96986*2.0+cxnl2* \
                   t96940*t96980*t96968*t96989*2.0-cxnl2*t96940*t96936*t96965*t96993*t96994*2.0-cxnl1*gamma_bb[index]* \
                   gx*t96944*t96965*t96988*2.0-cxnl3*gamma_bb[index]*gx*t96944*t96965*t96987*6.0+cxnl2*gamma_bb[index]* \
                   t96980*t96936*t96965*t96976*4.0+cxnl3*gx*t96940*t96944*t96965*t96984*t96977*6.0+cxnl3*gamma_bb[index]* \
                   gx*t96940*t96944*t96965*t96992*t96977-cxnl3*gamma_bb[index]*gx*t96940*t96944*t96965*t96995*t96996* \
                   2.0)+cx1*t96936*t96965*t96985*2.0-cx2*t96936*t96965*t96986*2.0+cx2*t96940*t96980*t96968*t96989*2.0- \
                   cx2*t96940*t96936*t96965*t96993*t96994*2.0-cx1*gamma_bb[index]*gx*t96944*t96965*t96988*2.0-cx3*gamma_bb[index]* \
                   gx*t96944*t96965*t96987*6.0+cx2*gamma_bb[index]*t96980*t96936*t96965*t96976*4.0+cx3*gx*t96940*t96944* \
                   t96965*t96984*t96977*6.0+cx3*gamma_bb[index]*gx*t96940*t96944*t96965*t96992*t96977-cx3*gamma_bb[index]* \
                   gx*t96940*t96944*t96965*t96995*t96996*2.0);
            } else {
                v_gamma_bb_gamma_bb_[index] = 0.0;
            }

        }
        if (is_meta_) {

            //V_rho_a_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t96139 = 1.0/pow(rho_a[index],8.0/3.0);
                double t96140 = gamma_aa[index]*gamma_aa[index];
                double t96141 = gx*gx;
                double t96142 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t96143 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t96144 = pow(rho_a[index],5.0/3.0);
                double t96145 = 1.0/tau_a[index];
                double t96146 = C_k*t96144*t96145;
                double t96147 = t96146+1.0;
                double t96148 = pow(rho_a[index],2.0/3.0);
                double t96149 = 1.0/(tau_a[index]*tau_a[index]);
                double t96150 = t96146-1.0;
                double t96151 = t96150*t96150;
                double t96152 = t96151*t96151;
                double t96153 = C_k*C_k;
                double t96154 = pow(rho_a[index],7.0/3.0);
                double t96155 = 1.0/(tau_a[index]*tau_a[index]*tau_a[index]);
                double t96156 = 1.0/(t96147*t96147*t96147);
                double t96157 = 1.0/(t96147*t96147*t96147*t96147);
                double t96158 = 1.0/(t96147*t96147*t96147*t96147*t96147);
                double t96159 = 1.0/(t96147*t96147*t96147*t96147*t96147*t96147);
                double t96160 = 1.0/(t96147*t96147);
                double t96161 = 1.0/t96147;
                double t96162 = gamma_aa[index]*gx*t96139;
                double t96163 = t96162+1.0;
                double t96164 = 1.0/t96163;
                double t96165 = gamma_aa[index]*gx*t96139*3.0;
                double t96166 = gamma_aa[index]*gx*t96140*t96141*t96142;
                double t96167 = t96140*t96141*t96143*3.0;
                double t96168 = t96165+t96166+t96167+1.0;
                double t96169 = 1.0/t96168;
                double t96170 = gamma_aa[index]*gx*t96139*2.0;
                double t96171 = t96140*t96141*t96143;
                double t96172 = t96170+t96171+1.0;
                double t96173 = 1.0/t96172;
                double t96174 = 1.0/pow(rho_a[index],1.9E1/3.0);
                double t96175 = 1.0/pow(rho_a[index],1.1E1/3.0);
                double t96176 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]*rho_a[index]);
                double t96177 = cxnl1*gamma_aa[index]*gx*t96164*t96139;
                double t96178 = cxnl3*gamma_aa[index]*gx*t96140*t96141*t96142*t96169;
                double t96179 = cxnl2*t96140*t96141*t96143*t96173;
                double t96180 = cxnl0+t96177+t96178+t96179;
                double t96181 = C_k*t96161*t96144*t96149;
                double t96182 = C_k*t96150*t96151*t96144*t96157*t96149*6.0;
                double t96183 = C_k*t96152*t96144*t96149*t96158*5.0;
                double t96184 = t96181+t96182+t96183-C_k*t96150*t96160*t96144*t96149-C_k*t96151*t96144*t96156*t96149* \
                   6.0-C_k*t96150*t96152*t96144*t96149*t96159*5.0;
                v_rho_a_tau_a_[index] = -(c0*pow(rho_a[index],4.0/3.0)*(t96180*(t96160*t96153*t96154*t96155*(1.0E1/ \
                   3.0)-C_k*t96161*t96148*t96149*(5.0/3.0)+C_k*t96150*t96160*t96148*t96149*(5.0/3.0)+C_k*t96151*t96156* \
                   t96148*t96149*1.0E1-C_k*t96152*t96148*t96149*t96158*(2.5E1/3.0)+t96150*t96153*t96154*t96155*t96156* \
                   (5.0E1/3.0)-t96151*t96153*t96154*t96155*t96157*6.0E1+t96152*t96153*t96154*t96155*t96159*(2.5E2/3.0) \
                   +t96150*t96151*t96153*t96154*t96155*t96158*(2.0E1/3.0)-t96150*t96152*t96153*t96154*t96155*1.0/(t96147* \
                   t96147*t96147*t96147*t96147*t96147*t96147)*5.0E1-C_k*t96150*t96151*t96148*t96157*t96149*1.0E1+C_k* \
                   t96150*t96152*t96148*t96149*t96159*(2.5E1/3.0))+t96184*(cxnl1*gamma_aa[index]*gx*t96164*t96175*(8.0/ \
                   3.0)+cxnl2*t96140*t96141*t96173*t96174*(1.6E1/3.0)-cxnl1*t96140*t96141*1.0/(t96163*t96163)*t96174* \
                   (8.0/3.0)-cxnl2*t96140*t96141*t96143*1.0/(t96172*t96172)*(gamma_aa[index]*gx*t96175*(1.6E1/3.0)+t96140* \
                   t96141*t96174*(1.6E1/3.0))+cxnl3*gamma_aa[index]*gx*t96140*t96141*t96176*t96169*8.0-cxnl3*gamma_aa[index]* \
                   gx*t96140*t96141*t96142*1.0/(t96168*t96168)*(gamma_aa[index]*gx*t96175*8.0+t96140*t96141*t96174*1.6E1+ \
                   gamma_aa[index]*gx*t96140*t96141*t96176*8.0)))-c0*pow(rho_a[index],1.0/3.0)*t96180*t96184*(4.0/3.0) \
                   )*(X-1.0);
            } else if (rho_a[index] > cutoff_) {
                double t97769 = 1.0/pow(rho_a[index],8.0/3.0);
                double t97770 = gamma_aa[index]*gamma_aa[index];
                double t97771 = gx*gx;
                double t97772 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t97773 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t97774 = pow(rho_a[index],5.0/3.0);
                double t97775 = 1.0/tau_a[index];
                double t97776 = C_k*t97774*t97775;
                double t97777 = t97776+1.0;
                double t97778 = pow(rho_a[index],2.0/3.0);
                double t97779 = 1.0/(tau_a[index]*tau_a[index]);
                double t97780 = t97776-1.0;
                double t97781 = t97780*t97780;
                double t97782 = t97781*t97781;
                double t97783 = C_k*C_k;
                double t97784 = pow(rho_a[index],7.0/3.0);
                double t97785 = 1.0/(tau_a[index]*tau_a[index]*tau_a[index]);
                double t97786 = 1.0/(t97777*t97777*t97777);
                double t97787 = 1.0/(t97777*t97777*t97777*t97777);
                double t97788 = 1.0/(t97777*t97777*t97777*t97777*t97777);
                double t97789 = 1.0/(t97777*t97777*t97777*t97777*t97777*t97777);
                double t97790 = 1.0/(t97777*t97777);
                double t97791 = 1.0/t97777;
                double t97792 = gamma_aa[index]*gx*t97769;
                double t97793 = t97792+1.0;
                double t97794 = 1.0/t97793;
                double t97795 = gamma_aa[index]*gx*t97769*3.0;
                double t97796 = gamma_aa[index]*gx*t97770*t97771*t97772;
                double t97797 = t97770*t97771*t97773*3.0;
                double t97798 = t97795+t97796+t97797+1.0;
                double t97799 = 1.0/t97798;
                double t97800 = gamma_aa[index]*gx*t97769*2.0;
                double t97801 = t97770*t97771*t97773;
                double t97802 = t97800+t97801+1.0;
                double t97803 = 1.0/t97802;
                double t97804 = 1.0/pow(rho_a[index],1.9E1/3.0);
                double t97805 = 1.0/pow(rho_a[index],1.1E1/3.0);
                double t97806 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]*rho_a[index]);
                double t97807 = X-1.0;
                double t97808 = cxnl1*gamma_aa[index]*gx*t97794*t97769;
                double t97809 = cxnl3*gamma_aa[index]*gx*t97770*t97771*t97772*t97799;
                double t97810 = cxnl2*t97803*t97770*t97771*t97773;
                double t97811 = cxnl0+t97810+t97808+t97809;
                double t97812 = C_k*t97791*t97774*t97779;
                double t97813 = C_k*t97780*t97781*t97774*t97787*t97779*6.0;
                double t97814 = C_k*t97782*t97774*t97779*t97788*5.0;
                double t97815 = t97812+t97813+t97814-C_k*t97780*t97790*t97774*t97779-C_k*t97781*t97774*t97786*t97779* \
                   6.0-C_k*t97780*t97782*t97774*t97779*t97789*5.0;
                v_rho_a_tau_a_[index] = -c0*pow(rho_a[index],4.0/3.0)*t97807*(t97811*(t97790*t97783*t97784*t97785* \
                   (1.0E1/3.0)-C_k*t97791*t97778*t97779*(5.0/3.0)+C_k*t97780*t97790*t97778*t97779*(5.0/3.0)+C_k*t97781* \
                   t97786*t97778*t97779*1.0E1-C_k*t97782*t97778*t97779*t97788*(2.5E1/3.0)+t97780*t97783*t97784*t97785* \
                   t97786*(5.0E1/3.0)-t97781*t97783*t97784*t97785*t97787*6.0E1+t97782*t97783*t97784*t97785*t97789*(2.5E2/ \
                   3.0)+t97780*t97781*t97783*t97784*t97785*t97788*(2.0E1/3.0)-t97780*t97782*t97783*t97784*t97785*1.0/ \
                   (t97777*t97777*t97777*t97777*t97777*t97777*t97777)*5.0E1-C_k*t97780*t97781*t97778*t97787*t97779*1.0E1+ \
                   C_k*t97780*t97782*t97778*t97779*t97789*(2.5E1/3.0))+t97815*(cxnl1*gamma_aa[index]*gx*t97805*t97794* \
                   (8.0/3.0)+cxnl2*t97803*t97804*t97770*t97771*(1.6E1/3.0)-cxnl1*t97804*t97770*t97771*1.0/(t97793*t97793) \
                   *(8.0/3.0)-cxnl2*1.0/(t97802*t97802)*t97770*t97771*t97773*(gamma_aa[index]*gx*t97805*(1.6E1/3.0)+t97804* \
                   t97770*t97771*(1.6E1/3.0))+cxnl3*gamma_aa[index]*gx*t97770*t97806*t97771*t97799*8.0-cxnl3*gamma_aa[index]* \
                   gx*t97770*t97771*t97772*1.0/(t97798*t97798)*(gamma_aa[index]*gx*t97805*8.0+t97804*t97770*t97771*1.6E1+ \
                   gamma_aa[index]*gx*t97770*t97806*t97771*8.0)))+c0*pow(rho_a[index],1.0/3.0)*t97811*t97815*t97807*(4.0/ \
                   3.0);
            } else if (rho_b[index] > cutoff_) {
                v_rho_a_tau_a_[index] = 0.0;
            } else {
                v_rho_a_tau_a_[index] = 0.0;
            }

            //V_rho_a_tau_b
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_a_tau_b_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_a_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_a_tau_b_[index] = 0.0;
            } else {
                v_rho_a_tau_b_[index] = 0.0;
            }

            //V_rho_b_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_b_tau_a_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_b_tau_a_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_b_tau_a_[index] = 0.0;
            } else {
                v_rho_b_tau_a_[index] = 0.0;
            }

            //V_rho_b_tau_b
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t96188 = 1.0/pow(rho_b[index],8.0/3.0);
                double t96189 = gamma_bb[index]*gamma_bb[index];
                double t96190 = gx*gx;
                double t96191 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]);
                double t96192 = 1.0/pow(rho_b[index],1.6E1/3.0);
                double t96193 = pow(rho_b[index],5.0/3.0);
                double t96194 = 1.0/tau_b[index];
                double t96195 = C_k*t96193*t96194;
                double t96196 = t96195+1.0;
                double t96197 = pow(rho_b[index],2.0/3.0);
                double t96198 = 1.0/(tau_b[index]*tau_b[index]);
                double t96199 = t96195-1.0;
                double t96200 = t96199*t96199;
                double t96201 = t96200*t96200;
                double t96202 = C_k*C_k;
                double t96203 = pow(rho_b[index],7.0/3.0);
                double t96204 = 1.0/(tau_b[index]*tau_b[index]*tau_b[index]);
                double t96205 = 1.0/(t96196*t96196*t96196);
                double t96206 = 1.0/(t96196*t96196*t96196*t96196);
                double t96207 = 1.0/(t96196*t96196*t96196*t96196*t96196);
                double t96208 = 1.0/(t96196*t96196*t96196*t96196*t96196*t96196);
                double t96209 = 1.0/(t96196*t96196);
                double t96210 = 1.0/t96196;
                double t96211 = gamma_bb[index]*gx*t96188;
                double t96212 = t96211+1.0;
                double t96213 = 1.0/t96212;
                double t96214 = gamma_bb[index]*gx*t96188*3.0;
                double t96215 = gamma_bb[index]*gx*t96190*t96191*t96189;
                double t96216 = t96190*t96192*t96189*3.0;
                double t96217 = t96214+t96215+t96216+1.0;
                double t96218 = 1.0/t96217;
                double t96219 = gamma_bb[index]*gx*t96188*2.0;
                double t96220 = t96190*t96192*t96189;
                double t96221 = t96220+t96219+1.0;
                double t96222 = 1.0/t96221;
                double t96223 = 1.0/pow(rho_b[index],1.9E1/3.0);
                double t96224 = 1.0/pow(rho_b[index],1.1E1/3.0);
                double t96225 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]*rho_b[index]);
                double t96226 = cxnl1*gamma_bb[index]*gx*t96213*t96188;
                double t96227 = cxnl3*gamma_bb[index]*gx*t96190*t96191*t96218*t96189;
                double t96228 = cxnl2*t96222*t96190*t96192*t96189;
                double t96229 = cxnl0+t96226+t96227+t96228;
                double t96230 = C_k*t96210*t96193*t96198;
                double t96231 = C_k*t96200*t96206*t96193*t96198*t96199*6.0;
                double t96232 = C_k*t96201*t96207*t96193*t96198*5.0;
                double t96233 = t96230+t96231+t96232-C_k*t96200*t96205*t96193*t96198*6.0-C_k*t96209*t96193*t96198* \
                   t96199-C_k*t96201*t96208*t96193*t96198*t96199*5.0;
                v_rho_b_tau_b_[index] = -(c0*pow(rho_b[index],4.0/3.0)*(t96229*(t96202*t96203*t96204*t96209*(1.0E1/ \
                   3.0)-C_k*t96210*t96197*t96198*(5.0/3.0)+C_k*t96200*t96205*t96197*t96198*1.0E1-C_k*t96201*t96207*t96197* \
                   t96198*(2.5E1/3.0)+C_k*t96209*t96197*t96198*t96199*(5.0/3.0)-t96200*t96202*t96203*t96204*t96206*6.0E1+ \
                   t96201*t96202*t96203*t96204*t96208*(2.5E2/3.0)+t96202*t96203*t96204*t96205*t96199*(5.0E1/3.0)+t96200* \
                   t96202*t96203*t96204*t96207*t96199*(2.0E1/3.0)-t96201*t96202*t96203*t96204*1.0/(t96196*t96196*t96196* \
                   t96196*t96196*t96196*t96196)*t96199*5.0E1-C_k*t96200*t96206*t96197*t96198*t96199*1.0E1+C_k*t96201* \
                   t96208*t96197*t96198*t96199*(2.5E1/3.0))+t96233*(cxnl1*gamma_bb[index]*gx*t96213*t96224*(8.0/3.0)+ \
                   cxnl2*t96222*t96223*t96190*t96189*(1.6E1/3.0)-cxnl1*1.0/(t96212*t96212)*t96223*t96190*t96189*(8.0/ \
                   3.0)-cxnl2*1.0/(t96221*t96221)*t96190*t96192*t96189*(gamma_bb[index]*gx*t96224*(1.6E1/3.0)+t96223* \
                   t96190*t96189*(1.6E1/3.0))+cxnl3*gamma_bb[index]*gx*t96225*t96190*t96218*t96189*8.0-cxnl3*gamma_bb[index]* \
                   gx*t96190*1.0/(t96217*t96217)*t96191*t96189*(gamma_bb[index]*gx*t96224*8.0+t96223*t96190*t96189*1.6E1+ \
                   gamma_bb[index]*gx*t96225*t96190*t96189*8.0)))-c0*pow(rho_b[index],1.0/3.0)*t96233*t96229*(4.0/3.0) \
                   )*(X-1.0);
            } else if (rho_a[index] > cutoff_) {
                v_rho_b_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                double t97001 = 1.0/pow(rho_b[index],8.0/3.0);
                double t97002 = gamma_bb[index]*gamma_bb[index];
                double t97003 = gx*gx;
                double t97004 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]);
                double t97005 = 1.0/pow(rho_b[index],1.6E1/3.0);
                double t97006 = pow(rho_b[index],5.0/3.0);
                double t97007 = 1.0/tau_b[index];
                double t97008 = C_k*t97006*t97007;
                double t97009 = t97008+1.0;
                double t97010 = pow(rho_b[index],2.0/3.0);
                double t97011 = 1.0/(tau_b[index]*tau_b[index]);
                double t97012 = t97008-1.0;
                double t97013 = t97012*t97012;
                double t97014 = t97013*t97013;
                double t97015 = C_k*C_k;
                double t97016 = pow(rho_b[index],7.0/3.0);
                double t97017 = 1.0/(tau_b[index]*tau_b[index]*tau_b[index]);
                double t97018 = 1.0/(t97009*t97009*t97009);
                double t97019 = 1.0/(t97009*t97009*t97009*t97009);
                double t97020 = 1.0/(t97009*t97009*t97009*t97009*t97009);
                double t97021 = 1.0/(t97009*t97009*t97009*t97009*t97009*t97009);
                double t97022 = 1.0/(t97009*t97009);
                double t97023 = 1.0/t97009;
                double t97024 = gamma_bb[index]*gx*t97001;
                double t97025 = t97024+1.0;
                double t97026 = 1.0/t97025;
                double t97027 = gamma_bb[index]*gx*t97001*3.0;
                double t97028 = gamma_bb[index]*gx*t97002*t97003*t97004;
                double t97029 = t97002*t97003*t97005*3.0;
                double t97030 = t97027+t97028+t97029+1.0;
                double t97031 = 1.0/t97030;
                double t97032 = gamma_bb[index]*gx*t97001*2.0;
                double t97033 = t97002*t97003*t97005;
                double t97034 = t97032+t97033+1.0;
                double t97035 = 1.0/t97034;
                double t97036 = 1.0/pow(rho_b[index],1.9E1/3.0);
                double t97037 = 1.0/pow(rho_b[index],1.1E1/3.0);
                double t97038 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]*rho_b[index]);
                double t97039 = X-1.0;
                double t97040 = cxnl1*gamma_bb[index]*gx*t97001*t97026;
                double t97041 = cxnl3*gamma_bb[index]*gx*t97002*t97003*t97004*t97031;
                double t97042 = cxnl2*t97002*t97003*t97005*t97035;
                double t97043 = cxnl0+t97040+t97041+t97042;
                double t97044 = C_k*t97011*t97023*t97006;
                double t97045 = C_k*t97011*t97012*t97013*t97006*t97019*6.0;
                double t97046 = C_k*t97011*t97020*t97014*t97006*5.0;
                double t97047 = t97044+t97045+t97046-C_k*t97011*t97012*t97022*t97006-C_k*t97011*t97013*t97006*t97018* \
                   6.0-C_k*t97011*t97012*t97021*t97014*t97006*5.0;
                v_rho_b_tau_b_[index] = -c0*pow(rho_b[index],4.0/3.0)*t97039*(t97043*(t97022*t97015*t97016*t97017* \
                   (1.0E1/3.0)-C_k*t97010*t97011*t97023*(5.0/3.0)-C_k*t97010*t97011*t97020*t97014*(2.5E1/3.0)+C_k*t97010* \
                   t97011*t97012*t97022*(5.0/3.0)+C_k*t97010*t97011*t97013*t97018*1.0E1+t97021*t97014*t97015*t97016*t97017* \
                   (2.5E2/3.0)+t97012*t97015*t97016*t97017*t97018*(5.0E1/3.0)-t97013*t97015*t97016*t97017*t97019*6.0E1+ \
                   t97020*t97012*t97013*t97015*t97016*t97017*(2.0E1/3.0)-t97012*t97014*t97015*t97016*t97017*1.0/(t97009* \
                   t97009*t97009*t97009*t97009*t97009*t97009)*5.0E1+C_k*t97010*t97011*t97012*t97021*t97014*(2.5E1/3.0) \
                   -C_k*t97010*t97011*t97012*t97013*t97019*1.0E1)+t97047*(cxnl1*gamma_bb[index]*gx*t97026*t97037*(8.0/ \
                   3.0)+cxnl2*t97002*t97003*t97035*t97036*(1.6E1/3.0)-cxnl1*t97002*t97003*1.0/(t97025*t97025)*t97036* \
                   (8.0/3.0)-cxnl2*t97002*t97003*t97005*1.0/(t97034*t97034)*(gamma_bb[index]*gx*t97037*(1.6E1/3.0)+t97002* \
                   t97003*t97036*(1.6E1/3.0))+cxnl3*gamma_bb[index]*gx*t97002*t97003*t97031*t97038*8.0-cxnl3*gamma_bb[index]* \
                   gx*t97002*t97003*1.0/(t97030*t97030)*t97004*(gamma_bb[index]*gx*t97037*8.0+t97002*t97003*t97036*1.6E1+ \
                   gamma_bb[index]*gx*t97002*t97003*t97038*8.0)))+c0*pow(rho_b[index],1.0/3.0)*t97043*t97047*t97039*(4.0/ \
                   3.0);
            } else {
                v_rho_b_tau_b_[index] = 0.0;
            }

            //V_tau_a_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t96235 = 1.0/pow(rho_a[index],8.0/3.0);
                double t96236 = gamma_aa[index]*gamma_aa[index];
                double t96237 = gx*gx;
                double t96238 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t96239 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t96240 = pow(rho_a[index],5.0/3.0);
                double t96241 = 1.0/tau_a[index];
                double t96242 = C_k*t96240*t96241;
                double t96243 = t96242+1.0;
                double t96244 = 1.0/(tau_a[index]*tau_a[index]*tau_a[index]);
                double t96245 = t96242-1.0;
                double t96246 = t96245*t96245;
                double t96247 = t96246*t96246;
                double t96248 = C_k*C_k;
                double t96249 = pow(rho_a[index],1.0E1/3.0);
                double t96250 = 1.0/(tau_a[index]*tau_a[index]*tau_a[index]*tau_a[index]);
                double t96251 = 1.0/(t96243*t96243*t96243);
                double t96252 = 1.0/(t96243*t96243*t96243*t96243);
                double t96253 = 1.0/(t96243*t96243*t96243*t96243*t96243);
                double t96254 = 1.0/(t96243*t96243*t96243*t96243*t96243*t96243);
                double t96255 = 1.0/(t96243*t96243);
                v_tau_a_tau_a_[index] = c0*pow(rho_a[index],4.0/3.0)*(X-1.0)*(cxnl0+(cxnl2*t96236*t96237*t96239)/ \
                   (gamma_aa[index]*gx*t96235*2.0+t96236*t96237*t96239+1.0)+(cxnl1*gamma_aa[index]*gx*t96235)/(gamma_aa[index]* \
                   gx*t96235+1.0)+(cxnl3*gamma_aa[index]*gx*t96236*t96237*t96238)/(gamma_aa[index]*gx*t96235*3.0+t96236* \
                   t96237*t96239*3.0+gamma_aa[index]*gx*t96236*t96237*t96238+1.0))*(t96250*t96255*t96248*t96249*2.0-(C_k* \
                   t96240*t96244*2.0)/t96243+C_k*t96240*t96251*t96244*t96246*1.2E1-C_k*t96240*t96244*t96253*t96247*1.0E1+ \
                   C_k*t96240*t96244*t96245*t96255*2.0+t96250*t96251*t96245*t96248*t96249*1.0E1-t96250*t96252*t96246* \
                   t96248*t96249*3.6E1+t96250*t96254*t96247*t96248*t96249*5.0E1+t96250*t96253*t96245*t96246*t96248*t96249* \
                   4.0-t96250*1.0/(t96243*t96243*t96243*t96243*t96243*t96243*t96243)*t96245*t96247*t96248*t96249*3.0E1- \
                   C_k*t96240*t96252*t96244*t96245*t96246*1.2E1+C_k*t96240*t96244*t96245*t96254*t96247*1.0E1);
            } else if (rho_a[index] > cutoff_) {
                double t97820 = 1.0/pow(rho_a[index],8.0/3.0);
                double t97821 = gamma_aa[index]*gamma_aa[index];
                double t97822 = gx*gx;
                double t97823 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t97824 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t97825 = pow(rho_a[index],5.0/3.0);
                double t97826 = 1.0/tau_a[index];
                double t97827 = C_k*t97825*t97826;
                double t97828 = t97827+1.0;
                double t97829 = 1.0/(tau_a[index]*tau_a[index]*tau_a[index]);
                double t97830 = t97827-1.0;
                double t97831 = t97830*t97830;
                double t97832 = t97831*t97831;
                double t97833 = C_k*C_k;
                double t97834 = pow(rho_a[index],1.0E1/3.0);
                double t97835 = 1.0/(tau_a[index]*tau_a[index]*tau_a[index]*tau_a[index]);
                double t97836 = 1.0/(t97828*t97828*t97828);
                double t97837 = 1.0/(t97828*t97828*t97828*t97828);
                double t97838 = 1.0/(t97828*t97828*t97828*t97828*t97828);
                double t97839 = 1.0/(t97828*t97828*t97828*t97828*t97828*t97828);
                double t97840 = 1.0/(t97828*t97828);
                v_tau_a_tau_a_[index] = c0*pow(rho_a[index],4.0/3.0)*(X-1.0)*(cxnl0+(cxnl2*t97821*t97822*t97824)/ \
                   (gamma_aa[index]*gx*t97820*2.0+t97821*t97822*t97824+1.0)+(cxnl1*gamma_aa[index]*gx*t97820)/(gamma_aa[index]* \
                   gx*t97820+1.0)+(cxnl3*gamma_aa[index]*gx*t97821*t97822*t97823)/(gamma_aa[index]*gx*t97820*3.0+t97821* \
                   t97822*t97824*3.0+gamma_aa[index]*gx*t97821*t97822*t97823+1.0))*(t97840*t97833*t97834*t97835*2.0-(C_k* \
                   t97825*t97829*2.0)/t97828+C_k*t97830*t97840*t97825*t97829*2.0+C_k*t97831*t97825*t97836*t97829*1.2E1- \
                   C_k*t97832*t97825*t97829*t97838*1.0E1+t97830*t97833*t97834*t97835*t97836*1.0E1-t97831*t97833*t97834* \
                   t97835*t97837*3.6E1+t97832*t97833*t97834*t97835*t97839*5.0E1+t97830*t97831*t97833*t97834*t97835*t97838* \
                   4.0-t97830*t97832*t97833*t97834*t97835*1.0/(t97828*t97828*t97828*t97828*t97828*t97828*t97828)*3.0E1- \
                   C_k*t97830*t97831*t97825*t97837*t97829*1.2E1+C_k*t97830*t97832*t97825*t97829*t97839*1.0E1);
            } else if (rho_b[index] > cutoff_) {
                v_tau_a_tau_a_[index] = 0.0;
            } else {
                v_tau_a_tau_a_[index] = 0.0;
            }

            //V_tau_a_tau_b
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_tau_a_tau_b_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_tau_a_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_tau_a_tau_b_[index] = 0.0;
            } else {
                v_tau_a_tau_b_[index] = 0.0;
            }

            //V_tau_b_tau_b
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t96258 = 1.0/pow(rho_b[index],8.0/3.0);
                double t96259 = gamma_bb[index]*gamma_bb[index];
                double t96260 = gx*gx;
                double t96261 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]);
                double t96262 = 1.0/pow(rho_b[index],1.6E1/3.0);
                double t96263 = pow(rho_b[index],5.0/3.0);
                double t96264 = 1.0/tau_b[index];
                double t96265 = C_k*t96263*t96264;
                double t96266 = t96265+1.0;
                double t96267 = 1.0/(tau_b[index]*tau_b[index]*tau_b[index]);
                double t96268 = t96265-1.0;
                double t96269 = t96268*t96268;
                double t96270 = t96269*t96269;
                double t96271 = C_k*C_k;
                double t96272 = pow(rho_b[index],1.0E1/3.0);
                double t96273 = 1.0/(tau_b[index]*tau_b[index]*tau_b[index]*tau_b[index]);
                double t96274 = 1.0/(t96266*t96266*t96266);
                double t96275 = 1.0/(t96266*t96266*t96266*t96266);
                double t96276 = 1.0/(t96266*t96266*t96266*t96266*t96266);
                double t96277 = 1.0/(t96266*t96266*t96266*t96266*t96266*t96266);
                double t96278 = 1.0/(t96266*t96266);
                v_tau_b_tau_b_[index] = c0*pow(rho_b[index],4.0/3.0)*(X-1.0)*(cxnl0+(cxnl2*t96260*t96262*t96259)/ \
                   (gamma_bb[index]*gx*t96258*2.0+t96260*t96262*t96259+1.0)+(cxnl1*gamma_bb[index]*gx*t96258)/(gamma_bb[index]* \
                   gx*t96258+1.0)+(cxnl3*gamma_bb[index]*gx*t96260*t96261*t96259)/(gamma_bb[index]*gx*t96258*3.0+t96260* \
                   t96262*t96259*3.0+gamma_bb[index]*gx*t96260*t96261*t96259+1.0))*(t96271*t96272*t96273*t96278*2.0-(C_k* \
                   t96263*t96267*2.0)/t96266-C_k*t96270*t96263*t96267*t96276*1.0E1+C_k*t96263*t96274*t96267*t96269*1.2E1+ \
                   C_k*t96263*t96267*t96268*t96278*2.0+t96270*t96271*t96272*t96273*t96277*5.0E1+t96271*t96272*t96273* \
                   t96274*t96268*1.0E1-t96271*t96272*t96273*t96275*t96269*3.6E1+t96271*t96272*t96273*t96276*t96268*t96269* \
                   4.0-t96270*t96271*t96272*t96273*1.0/(t96266*t96266*t96266*t96266*t96266*t96266*t96266)*t96268*3.0E1+ \
                   C_k*t96270*t96263*t96267*t96268*t96277*1.0E1-C_k*t96263*t96275*t96267*t96268*t96269*1.2E1);
            } else if (rho_a[index] > cutoff_) {
                v_tau_b_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                double t97051 = 1.0/pow(rho_b[index],8.0/3.0);
                double t97052 = gamma_bb[index]*gamma_bb[index];
                double t97053 = gx*gx;
                double t97054 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]);
                double t97055 = 1.0/pow(rho_b[index],1.6E1/3.0);
                double t97056 = pow(rho_b[index],5.0/3.0);
                double t97057 = 1.0/tau_b[index];
                double t97058 = C_k*t97056*t97057;
                double t97059 = t97058+1.0;
                double t97060 = 1.0/(tau_b[index]*tau_b[index]*tau_b[index]);
                double t97061 = t97058-1.0;
                double t97062 = t97061*t97061;
                double t97063 = t97062*t97062;
                double t97064 = C_k*C_k;
                double t97065 = pow(rho_b[index],1.0E1/3.0);
                double t97066 = 1.0/(tau_b[index]*tau_b[index]*tau_b[index]*tau_b[index]);
                double t97067 = 1.0/(t97059*t97059*t97059);
                double t97068 = 1.0/(t97059*t97059*t97059*t97059);
                double t97069 = 1.0/(t97059*t97059*t97059*t97059*t97059);
                double t97070 = 1.0/(t97059*t97059*t97059*t97059*t97059*t97059);
                double t97071 = 1.0/(t97059*t97059);
                v_tau_b_tau_b_[index] = c0*pow(rho_b[index],4.0/3.0)*(X-1.0)*(cxnl0+(cxnl2*t97052*t97053*t97055)/ \
                   (gamma_bb[index]*gx*t97051*2.0+t97052*t97053*t97055+1.0)+(cxnl1*gamma_bb[index]*gx*t97051)/(gamma_bb[index]* \
                   gx*t97051+1.0)+(cxnl3*gamma_bb[index]*gx*t97052*t97053*t97054)/(gamma_bb[index]*gx*t97051*3.0+t97052* \
                   t97053*t97055*3.0+gamma_bb[index]*gx*t97052*t97053*t97054+1.0))*(t97071*t97064*t97065*t97066*2.0-(C_k* \
                   t97060*t97056*2.0)/t97059+C_k*t97060*t97061*t97071*t97056*2.0+C_k*t97060*t97062*t97056*t97067*1.2E1- \
                   C_k*t97060*t97063*t97056*t97069*1.0E1+t97070*t97063*t97064*t97065*t97066*5.0E1+t97061*t97064*t97065* \
                   t97066*t97067*1.0E1-t97062*t97064*t97065*t97066*t97068*3.6E1+t97061*t97062*t97064*t97065*t97066*t97069* \
                   4.0-t97061*t97063*t97064*t97065*t97066*1.0/(t97059*t97059*t97059*t97059*t97059*t97059*t97059)*3.0E1+ \
                   C_k*t97060*t97061*t97070*t97063*t97056*1.0E1-C_k*t97060*t97061*t97062*t97056*t97068*1.2E1);
            } else {
                v_tau_b_tau_b_[index] = 0.0;
            }

            if (is_gga_) {

                //V_gamma_aa_tau_a
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    double t96280 = pow(rho_a[index],5.0/3.0);
                    double t96281 = 1.0/(tau_a[index]*tau_a[index]);
                    double t96282 = 1.0/tau_a[index];
                    double t96283 = C_k*t96280*t96282;
                    double t96284 = t96283-1.0;
                    double t96285 = t96283+1.0;
                    double t96286 = t96284*t96284;
                    double t96287 = t96286*t96286;
                    double t96288 = 1.0/pow(rho_a[index],8.0/3.0);
                    double t96289 = gx*gx;
                    double t96290 = 1.0/pow(rho_a[index],1.6E1/3.0);
                    double t96291 = gamma_aa[index]*gamma_aa[index];
                    double t96292 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                       rho_a[index]*rho_a[index]);
                    double t96293 = gamma_aa[index]*gx*t96288;
                    double t96294 = t96293+1.0;
                    double t96295 = gamma_aa[index]*gx*t96288*3.0;
                    double t96296 = gamma_aa[index]*gx*t96291*t96292*t96289;
                    double t96297 = t96290*t96291*t96289*3.0;
                    double t96298 = t96295+t96296+t96297+1.0;
                    double t96299 = gamma_aa[index]*gx*t96288*2.0;
                    double t96300 = t96290*t96291*t96289;
                    double t96301 = t96300+t96299+1.0;
                    v_gamma_aa_tau_a_[index] = c0*pow(rho_a[index],4.0/3.0)*(X-1.0)*((cxnl1*gx*t96288)/t96294+(cxnl2* \
                       gamma_aa[index]*t96290*t96289*2.0)/t96301-cxnl1*gamma_aa[index]*t96290*1.0/(t96294*t96294)*t96289- \
                       cxnl2*1.0/(t96301*t96301)*t96290*t96291*t96289*(gx*t96288*2.0+gamma_aa[index]*t96290*t96289*2.0)+(cxnl3* \
                       gx*t96291*t96292*t96289*3.0)/t96298-cxnl3*gamma_aa[index]*gx*t96291*t96292*t96289*1.0/(t96298*t96298) \
                       *(gx*t96288*3.0+gamma_aa[index]*t96290*t96289*6.0+gx*t96291*t96292*t96289*3.0))*((C_k*t96280*t96281) \
                       /t96285-C_k*t96280*t96281*t96284*1.0/(t96285*t96285)-C_k*t96280*t96281*1.0/(t96285*t96285*t96285)* \
                       t96286*6.0+C_k*t96280*t96281*1.0/(t96285*t96285*t96285*t96285*t96285)*t96287*5.0+C_k*t96280*t96281* \
                       t96284*1.0/(t96285*t96285*t96285*t96285)*t96286*6.0-C_k*t96280*t96281*t96284*1.0/(t96285*t96285*t96285* \
                       t96285*t96285*t96285)*t96287*5.0);
                } else if (rho_a[index] > cutoff_) {
                    double t97844 = pow(rho_a[index],5.0/3.0);
                    double t97845 = 1.0/(tau_a[index]*tau_a[index]);
                    double t97846 = 1.0/tau_a[index];
                    double t97847 = C_k*t97844*t97846;
                    double t97848 = t97847-1.0;
                    double t97849 = t97847+1.0;
                    double t97850 = t97848*t97848;
                    double t97851 = t97850*t97850;
                    double t97852 = 1.0/pow(rho_a[index],8.0/3.0);
                    double t97853 = gx*gx;
                    double t97854 = 1.0/pow(rho_a[index],1.6E1/3.0);
                    double t97855 = gamma_aa[index]*gamma_aa[index];
                    double t97856 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                       rho_a[index]*rho_a[index]);
                    double t97857 = gamma_aa[index]*gx*t97852;
                    double t97858 = t97857+1.0;
                    double t97859 = gamma_aa[index]*gx*t97852*3.0;
                    double t97860 = gamma_aa[index]*gx*t97853*t97855*t97856;
                    double t97861 = t97853*t97854*t97855*3.0;
                    double t97862 = t97860+t97861+t97859+1.0;
                    double t97863 = gamma_aa[index]*gx*t97852*2.0;
                    double t97864 = t97853*t97854*t97855;
                    double t97865 = t97863+t97864+1.0;
                    v_gamma_aa_tau_a_[index] = c0*pow(rho_a[index],4.0/3.0)*(X-1.0)*((cxnl1*gx*t97852)/t97858+(cxnl2* \
                       gamma_aa[index]*t97853*t97854*2.0)/t97865-cxnl1*gamma_aa[index]*t97853*t97854*1.0/(t97858*t97858)- \
                       cxnl2*t97853*t97854*t97855*1.0/(t97865*t97865)*(gx*t97852*2.0+gamma_aa[index]*t97853*t97854*2.0)+(cxnl3* \
                       gx*t97853*t97855*t97856*3.0)/t97862-cxnl3*gamma_aa[index]*gx*t97853*1.0/(t97862*t97862)*t97855*t97856* \
                       (gx*t97852*3.0+gamma_aa[index]*t97853*t97854*6.0+gx*t97853*t97855*t97856*3.0))*((C_k*t97844*t97845) \
                       /t97849-C_k*t97850*t97844*t97845*1.0/(t97849*t97849*t97849)*6.0+C_k*t97851*t97844*t97845*1.0/(t97849* \
                       t97849*t97849*t97849*t97849)*5.0-C_k*t97844*t97845*t97848*1.0/(t97849*t97849)+C_k*t97850*t97844*t97845* \
                       t97848*1.0/(t97849*t97849*t97849*t97849)*6.0-C_k*t97851*t97844*t97845*t97848*1.0/(t97849*t97849*t97849* \
                       t97849*t97849*t97849)*5.0);
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } else {
                    v_gamma_aa_tau_a_[index] = 0.0;
                }

                //V_gamma_aa_tau_b
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_aa_tau_b_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_aa_tau_b_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_aa_tau_b_[index] = 0.0;
                } else {
                    v_gamma_aa_tau_b_[index] = 0.0;
                }

                //V_gamma_ab_tau_a
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_ab_tau_a_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_ab_tau_a_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_ab_tau_a_[index] = 0.0;
                } else {
                    v_gamma_ab_tau_a_[index] = 0.0;
                }

                //V_gamma_ab_tau_b
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_ab_tau_b_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_ab_tau_b_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_ab_tau_b_[index] = 0.0;
                } else {
                    v_gamma_ab_tau_b_[index] = 0.0;
                }

                //V_gamma_bb_tau_a
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_bb_tau_a_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_bb_tau_a_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_bb_tau_a_[index] = 0.0;
                } else {
                    v_gamma_bb_tau_a_[index] = 0.0;
                }

                //V_gamma_bb_tau_b
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    double t96307 = pow(rho_b[index],5.0/3.0);
                    double t96308 = 1.0/(tau_b[index]*tau_b[index]);
                    double t96309 = 1.0/tau_b[index];
                    double t96310 = C_k*t96307*t96309;
                    double t96311 = t96310-1.0;
                    double t96312 = t96310+1.0;
                    double t96313 = t96311*t96311;
                    double t96314 = t96313*t96313;
                    double t96315 = 1.0/pow(rho_b[index],8.0/3.0);
                    double t96316 = gx*gx;
                    double t96317 = 1.0/pow(rho_b[index],1.6E1/3.0);
                    double t96318 = gamma_bb[index]*gamma_bb[index];
                    double t96319 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                       rho_b[index]*rho_b[index]);
                    double t96320 = gamma_bb[index]*gx*t96315;
                    double t96321 = t96320+1.0;
                    double t96322 = gamma_bb[index]*gx*t96315*3.0;
                    double t96323 = gamma_bb[index]*gx*t96316*t96318*t96319;
                    double t96324 = t96316*t96317*t96318*3.0;
                    double t96325 = t96322+t96323+t96324+1.0;
                    double t96326 = gamma_bb[index]*gx*t96315*2.0;
                    double t96327 = t96316*t96317*t96318;
                    double t96328 = t96326+t96327+1.0;
                    v_gamma_bb_tau_b_[index] = c0*pow(rho_b[index],4.0/3.0)*(X-1.0)*((cxnl1*gx*t96315)/t96321-cxnl1*gamma_bb[index]* \
                       1.0/(t96321*t96321)*t96316*t96317+(cxnl2*gamma_bb[index]*t96316*t96317*2.0)/t96328-cxnl2*t96316*t96317* \
                       t96318*1.0/(t96328*t96328)*(gx*t96315*2.0+gamma_bb[index]*t96316*t96317*2.0)+(cxnl3*gx*t96316*t96318* \
                       t96319*3.0)/t96325-cxnl3*gamma_bb[index]*gx*t96316*1.0/(t96325*t96325)*t96318*t96319*(gx*t96315*3.0+ \
                       gamma_bb[index]*t96316*t96317*6.0+gx*t96316*t96318*t96319*3.0))*((C_k*t96307*t96308)/t96312-C_k*t96311* \
                       1.0/(t96312*t96312)*t96307*t96308-C_k*1.0/(t96312*t96312*t96312)*t96313*t96307*t96308*6.0+C_k*1.0/ \
                       (t96312*t96312*t96312*t96312*t96312)*t96314*t96307*t96308*5.0+C_k*t96311*1.0/(t96312*t96312*t96312* \
                       t96312)*t96313*t96307*t96308*6.0-C_k*t96311*1.0/(t96312*t96312*t96312*t96312*t96312*t96312)*t96314* \
                       t96307*t96308*5.0);
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_bb_tau_b_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    double t97078 = pow(rho_b[index],5.0/3.0);
                    double t97079 = 1.0/(tau_b[index]*tau_b[index]);
                    double t97080 = 1.0/tau_b[index];
                    double t97081 = C_k*t97080*t97078;
                    double t97082 = t97081-1.0;
                    double t97083 = t97081+1.0;
                    double t97084 = t97082*t97082;
                    double t97085 = t97084*t97084;
                    double t97086 = 1.0/pow(rho_b[index],8.0/3.0);
                    double t97087 = gx*gx;
                    double t97088 = 1.0/pow(rho_b[index],1.6E1/3.0);
                    double t97089 = gamma_bb[index]*gamma_bb[index];
                    double t97090 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                       rho_b[index]*rho_b[index]);
                    double t97091 = gamma_bb[index]*gx*t97086;
                    double t97092 = t97091+1.0;
                    double t97093 = gamma_bb[index]*gx*t97086*3.0;
                    double t97094 = gamma_bb[index]*gx*t97090*t97087*t97089;
                    double t97095 = t97087*t97088*t97089*3.0;
                    double t97096 = t97093+t97094+t97095+1.0;
                    double t97097 = gamma_bb[index]*gx*t97086*2.0;
                    double t97098 = t97087*t97088*t97089;
                    double t97099 = t97097+t97098+1.0;
                    v_gamma_bb_tau_b_[index] = c0*pow(rho_b[index],4.0/3.0)*(X-1.0)*((cxnl1*gx*t97086)/t97092-cxnl1*gamma_bb[index]* \
                       1.0/(t97092*t97092)*t97087*t97088+(cxnl2*gamma_bb[index]*t97087*t97088*2.0)/t97099-cxnl2*t97087*t97088* \
                       t97089*1.0/(t97099*t97099)*(gx*t97086*2.0+gamma_bb[index]*t97087*t97088*2.0)+(cxnl3*gx*t97090*t97087* \
                       t97089*3.0)/t97096-cxnl3*gamma_bb[index]*gx*t97090*t97087*1.0/(t97096*t97096)*t97089*(gx*t97086*3.0+ \
                       gamma_bb[index]*t97087*t97088*6.0+gx*t97090*t97087*t97089*3.0))*((C_k*t97078*t97079)/t97083-C_k*t97082* \
                       1.0/(t97083*t97083)*t97078*t97079-C_k*1.0/(t97083*t97083*t97083)*t97084*t97078*t97079*6.0+C_k*1.0/ \
                       (t97083*t97083*t97083*t97083*t97083)*t97085*t97078*t97079*5.0+C_k*t97082*1.0/(t97083*t97083*t97083* \
                       t97083)*t97084*t97078*t97079*6.0-C_k*t97082*1.0/(t97083*t97083*t97083*t97083*t97083*t97083)*t97085* \
                       t97078*t97079*5.0);
                } else {
                    v_gamma_bb_tau_b_[index] = 0.0;
                }

            }
        }
    }
}

}}

