/**********************************************************
* HCTH120_functional.cc: definitions for HCTH120_functional for KS-DFT
* Robert Parrish, robparrish@gmail.com
* Autogenerated by MATLAB Script on 25-May-2011
*
***********************************************************/
#include <libmints/points.h>
#include <libmints/vector.h>
#include <libciomr/libciomr.h>
#include "HCTH120_functional.h"
#include <stdlib.h>
#include <cmath>
#include <string>
#include <string>
#include <vector>

using namespace psi;
using namespace boost;
using namespace std;

namespace psi { namespace functional {

HCTH120_Functional::HCTH120_Functional(int npoints, int deriv) : Functional(npoints, deriv)
{
    
    name_ = "HCTH120";
    description_ = "HCTH120 Power Series GGA";
    citation_ = "A.D. Boese, et. al., J. Chem. Phys., 112(4), 1670-1678, 2000";
    
    double c0 = -9.3052573634909974E-01;
    params_.push_back(make_pair("c0",c0));
    double two_13 = 1.2599210498948732E+00;
    params_.push_back(make_pair("two_13",two_13));
    double d2fz0 = 1.7099210000000000E+00;
    params_.push_back(make_pair("d2fz0",d2fz0));
    double c = 6.2035049089939986E-01;
    params_.push_back(make_pair("c",c));
    double Aa = 1.6886999999999999E-02;
    params_.push_back(make_pair("Aa",Aa));
    double a1a = 1.1125000000000000E-01;
    params_.push_back(make_pair("a1a",a1a));
    double b1a = 1.0356999999999999E+01;
    params_.push_back(make_pair("b1a",b1a));
    double b2a = 3.6231000000000000E+00;
    params_.push_back(make_pair("b2a",b2a));
    double b3a = 8.8026000000000004E-01;
    params_.push_back(make_pair("b3a",b3a));
    double b4a = 4.9670999999999998E-01;
    params_.push_back(make_pair("b4a",b4a));
    double c0p = 3.1091000000000001E-02;
    params_.push_back(make_pair("c0p",c0p));
    double a1p = 2.1370000000000000E-01;
    params_.push_back(make_pair("a1p",a1p));
    double b1p = 7.5956999999999999E+00;
    params_.push_back(make_pair("b1p",b1p));
    double b2p = 3.5876000000000001E+00;
    params_.push_back(make_pair("b2p",b2p));
    double b3p = 1.6382000000000001E+00;
    params_.push_back(make_pair("b3p",b3p));
    double b4p = 4.9293999999999999E-01;
    params_.push_back(make_pair("b4p",b4p));
    double c0f = 1.5545000000000000E-02;
    params_.push_back(make_pair("c0f",c0f));
    double a1f = 2.0548000000000000E-01;
    params_.push_back(make_pair("a1f",a1f));
    double b1f = 1.4118900000000000E+01;
    params_.push_back(make_pair("b1f",b1f));
    double b2f = 6.1977000000000002E+00;
    params_.push_back(make_pair("b2f",b2f));
    double b3f = 3.3662000000000001E+00;
    params_.push_back(make_pair("b3f",b3f));
    double b4f = 6.2517000000000000E-01;
    params_.push_back(make_pair("b4f",b4f));
    double gcab = 6.0000000000000001E-03;
    params_.push_back(make_pair("gcab",gcab));
    double gcaa = 2.0000000000000001E-01;
    params_.push_back(make_pair("gcaa",gcaa));
    double gx = 4.0000000000000001E-03;
    params_.push_back(make_pair("gx",gx));
    double ccab0 = 5.1473000000000002E-01;
    params_.push_back(make_pair("ccab0",ccab0));
    double ccab1 = 6.9298200000000003E+00;
    params_.push_back(make_pair("ccab1",ccab1));
    double ccab2 = -2.4707300000000000E+01;
    params_.push_back(make_pair("ccab2",ccab2));
    double ccab3 = 2.3109800000000000E+01;
    params_.push_back(make_pair("ccab3",ccab3));
    double ccab4 = -1.1323399999999999E+01;
    params_.push_back(make_pair("ccab4",ccab4));
    double ccaa0 = 4.8950800000000000E-01;
    params_.push_back(make_pair("ccaa0",ccaa0));
    double ccaa1 = -2.6069900000000001E-01;
    params_.push_back(make_pair("ccaa1",ccaa1));
    double ccaa2 = 4.3291700000000000E-01;
    params_.push_back(make_pair("ccaa2",ccaa2));
    double ccaa3 = -1.9924700000000000E+00;
    params_.push_back(make_pair("ccaa3",ccaa3));
    double ccaa4 = 2.4853100000000001E+00;
    params_.push_back(make_pair("ccaa4",ccaa4));
    double cx0 = 1.0916300000000001E+00;
    params_.push_back(make_pair("cx0",cx0));
    double cx1 = -7.4721499999999996E-01;
    params_.push_back(make_pair("cx1",cx1));
    double cx2 = 5.0783300000000002E+00;
    params_.push_back(make_pair("cx2",cx2));
    double cx3 = -4.1074599999999997E+00;
    params_.push_back(make_pair("cx3",cx3));
    double cx4 = 1.1717299999999999E+00;
    params_.push_back(make_pair("cx4",cx4));

    is_gga_ = true;
    is_meta_ = false;

    //Required allocateion
    allocate();
}
HCTH120_Functional::~HCTH120_Functional()
{
}
void HCTH120_Functional::computeRKSFunctional(boost::shared_ptr<RKSFunctions> prop)
{
    int ntrue = prop->npoints();

    const double* restrict rho_a;
    const double* restrict gamma_aa;
    const double* restrict tau_a;

    rho_a = prop->property_value("RHO_A")->pointer();
    if (is_gga_) {
        gamma_aa = prop->property_value("GAMMA_AA")->pointer();
    }
    if (is_meta_) {
        tau_a = prop->property_value("TAU_A")->pointer();
    }

    double c0 = params_[0].second;
    double two_13 = params_[1].second;
    double d2fz0 = params_[2].second;
    double c = params_[3].second;
    double Aa = params_[4].second;
    double a1a = params_[5].second;
    double b1a = params_[6].second;
    double b2a = params_[7].second;
    double b3a = params_[8].second;
    double b4a = params_[9].second;
    double c0p = params_[10].second;
    double a1p = params_[11].second;
    double b1p = params_[12].second;
    double b2p = params_[13].second;
    double b3p = params_[14].second;
    double b4p = params_[15].second;
    double c0f = params_[16].second;
    double a1f = params_[17].second;
    double b1f = params_[18].second;
    double b2f = params_[19].second;
    double b3f = params_[20].second;
    double b4f = params_[21].second;
    double gcab = params_[22].second;
    double gcaa = params_[23].second;
    double gx = params_[24].second;
    double ccab0 = params_[25].second;
    double ccab1 = params_[26].second;
    double ccab2 = params_[27].second;
    double ccab3 = params_[28].second;
    double ccab4 = params_[29].second;
    double ccaa0 = params_[30].second;
    double ccaa1 = params_[31].second;
    double ccaa2 = params_[32].second;
    double ccaa3 = params_[33].second;
    double ccaa4 = params_[34].second;
    double cx0 = params_[35].second;
    double cx1 = params_[36].second;
    double cx2 = params_[37].second;
    double cx3 = params_[38].second;
    double cx4 = params_[39].second;

    //Functional
    for (int index = 0; index < ntrue; index++) {

        //Functional Value
        if (rho_a[index] > cutoff_) {
            double t68238 = 1.0/pow(rho_a[index],1.0/3.0);
            double t68239 = c*t68238;
            double t68240 = sqrt(t68239);
            double t68241 = pow(t68239,3.0/2.0);
            double t68242 = c*c;
            double t68243 = 1.0/pow(rho_a[index],2.0/3.0);
            double t68244 = 1.0/c0p;
            double t68245 = b1p*t68240;
            double t68246 = b3p*t68241;
            double t68247 = b4p*t68242*t68243;
            double t68248 = b2p*c*t68238;
            double t68249 = t68245+t68246+t68247+t68248;
            double t68250 = 1.0/t68249;
            double t68251 = t68250*t68244*(1.0/2.0);
            double t68252 = t68251+1.0;
            double t68253 = log(t68252);
            double t68254 = a1p*c*t68238;
            double t68255 = t68254+1.0;
            double t68256 = rho_a[index]*2.0;
            double t68257 = 1.0/pow(t68256,1.0/3.0);
            double t68258 = c*t68257;
            double t68259 = gamma_aa[index]*gamma_aa[index];
            double t68260 = gcab*gcab;
            double t68261 = t68259*t68259;
            double t68262 = t68260*t68260;
            double t68263 = 1.0/pow(rho_a[index],3.2E1/3.0);
            double t68264 = 1.0/pow(rho_a[index],8.0/3.0);
            double t68265 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]);
            double t68266 = 1.0/pow(rho_a[index],1.6E1/3.0);
            double t68267 = pow(2.0,1.0/3.0);
            double t68268 = t68267*2.0;
            double t68269 = t68268-2.0;
            double t68270 = two_13*2.0;
            double t68271 = t68270-2.0;
            double t68272 = 1.0/t68271;
            double t68273 = 1.0/c0f;
            double t68274 = b1f*t68240;
            double t68275 = b3f*t68241;
            double t68276 = b4f*t68242*t68243;
            double t68277 = b2f*c*t68238;
            double t68278 = t68274+t68275+t68276+t68277;
            double t68279 = 1.0/t68278;
            double t68280 = t68273*t68279*(1.0/2.0);
            double t68281 = t68280+1.0;
            double t68282 = log(t68281);
            double t68283 = a1f*c*t68238;
            double t68284 = t68283+1.0;
            double t68285 = c0f*t68282*t68284*2.0;
            double t68286 = c0p*t68253*t68255*2.0;
            double t68287 = gcaa*gcaa;
            double t68288 = t68287*t68287;
            double t68289 = gx*gx;
            double t68290 = t68289*t68289;
            functional_[index] = (rho_a[index]*(t68286+t68272*t68269*(t68285-c0p*t68253*t68255*2.0))*2.0-c0p* \
               rho_a[index]*log((t68244*(1.0/2.0))/(b1p*sqrt(t68258)+b3p*pow(t68258,3.0/2.0)+b4p*t68242*1.0/pow(t68256,2.0/ \
               3.0)+b2p*c*t68257)+1.0)*(a1p*c*t68257+1.0)*4.0)*(ccab0+(ccab2*t68260*t68266*t68259)/(gamma_aa[index]* \
               gcab*t68264*2.0+t68260*t68266*t68259+1.0)+(ccab1*gamma_aa[index]*gcab*t68264)/(gamma_aa[index]*gcab* \
               t68264+1.0)+(ccab4*t68261*t68262*t68263)/(gamma_aa[index]*gcab*t68264*4.0+t68261*t68262*t68263+t68260* \
               t68266*t68259*6.0+gamma_aa[index]*gcab*t68260*t68265*t68259*4.0+1.0)+(ccab3*gamma_aa[index]*gcab*t68260* \
               t68265*t68259)/(gamma_aa[index]*gcab*t68264*3.0+t68260*t68266*t68259*3.0+gamma_aa[index]*gcab*t68260* \
               t68265*t68259+1.0))-rho_a[index]*(t68286+t68272*t68269*(t68285-t68286))*(ccaa0+(ccaa2*t68266*t68259* \
               t68287)/(gamma_aa[index]*gcaa*t68264*2.0+t68266*t68259*t68287+1.0)+(ccaa1*gamma_aa[index]*gcaa*t68264) \
               /(gamma_aa[index]*gcaa*t68264+1.0)+(ccaa4*t68261*t68263*t68288)/(gamma_aa[index]*gcaa*t68264*4.0+t68261* \
               t68263*t68288+t68266*t68259*t68287*6.0+gamma_aa[index]*gcaa*t68265*t68259*t68287*4.0+1.0)+(ccaa3*gamma_aa[index]* \
               gcaa*t68265*t68259*t68287)/(gamma_aa[index]*gcaa*t68264*3.0+t68266*t68259*t68287*3.0+gamma_aa[index]* \
               gcaa*t68265*t68259*t68287+1.0))*2.0+c0*pow(rho_a[index],4.0/3.0)*(cx0+(cx2*t68266*t68259*t68289)/(gamma_aa[index]* \
               gx*t68264*2.0+t68266*t68259*t68289+1.0)+(cx1*gamma_aa[index]*gx*t68264)/(gamma_aa[index]*gx*t68264+ \
               1.0)+(cx4*t68261*t68263*t68290)/(gamma_aa[index]*gx*t68264*4.0+t68261*t68263*t68290+t68266*t68259* \
               t68289*6.0+gamma_aa[index]*gx*t68265*t68259*t68289*4.0+1.0)+(cx3*gamma_aa[index]*gx*t68265*t68259* \
               t68289)/(gamma_aa[index]*gx*t68264*3.0+t68266*t68259*t68289*3.0+gamma_aa[index]*gx*t68265*t68259*t68289+ \
               1.0))*2.0;
        } else {
            functional_[index] = 0.0;
        } 

    }
    //First Partials
    for (int index = 0; index < ntrue && deriv_ >= 1; index++) {
        
        //V_rho_a
        if (rho_a[index] > cutoff_) {
            double t68292 = gamma_aa[index]*gamma_aa[index];
            double t68293 = gcab*gcab;
            double t68294 = t68292*t68292;
            double t68295 = t68293*t68293;
            double t68296 = 1.0/pow(rho_a[index],3.2E1/3.0);
            double t68297 = 1.0/pow(rho_a[index],8.0/3.0);
            double t68298 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]);
            double t68299 = 1.0/pow(rho_a[index],1.6E1/3.0);
            double t68300 = rho_a[index]*2.0;
            double t68301 = 1.0/pow(t68300,1.0/3.0);
            double t68302 = c*t68301;
            double t68303 = sqrt(t68302);
            double t68304 = b1p*t68303;
            double t68305 = pow(t68302,3.0/2.0);
            double t68306 = b3p*t68305;
            double t68307 = b2p*c*t68301;
            double t68308 = c*c;
            double t68309 = 1.0/pow(t68300,2.0/3.0);
            double t68310 = b4p*t68308*t68309;
            double t68311 = t68310+t68304+t68306+t68307;
            double t68312 = 1.0/pow(t68300,4.0/3.0);
            double t68313 = 1.0/c0p;
            double t68314 = 1.0/t68311;
            double t68315 = t68313*t68314*(1.0/2.0);
            double t68316 = t68315+1.0;
            double t68317 = 1.0/pow(rho_a[index],1.0/3.0);
            double t68318 = c*t68317;
            double t68319 = sqrt(t68318);
            double t68320 = b1f*t68319;
            double t68321 = pow(t68318,3.0/2.0);
            double t68322 = b3f*t68321;
            double t68323 = 1.0/pow(rho_a[index],2.0/3.0);
            double t68324 = b4f*t68323*t68308;
            double t68325 = b2f*c*t68317;
            double t68326 = t68320+t68322+t68324+t68325;
            double t68327 = 1.0/pow(rho_a[index],4.0/3.0);
            double t68328 = b1p*t68319;
            double t68329 = b3p*t68321;
            double t68330 = b4p*t68323*t68308;
            double t68331 = b2p*c*t68317;
            double t68332 = t68330+t68331+t68328+t68329;
            double t68333 = 1.0/pow(rho_a[index],5.0/3.0);
            double t68334 = 1.0/sqrt(t68318);
            double t68335 = 1.0/c0f;
            double t68336 = 1.0/t68326;
            double t68337 = t68335*t68336*(1.0/2.0);
            double t68338 = t68337+1.0;
            double t68339 = 1.0/t68332;
            double t68340 = t68313*t68339*(1.0/2.0);
            double t68341 = t68340+1.0;
            double t68342 = a1p*c*t68317;
            double t68343 = t68342+1.0;
            double t68344 = 1.0/t68341;
            double t68345 = 1.0/(t68332*t68332);
            double t68346 = b4p*t68333*t68308*(2.0/3.0);
            double t68347 = b2p*c*t68327*(1.0/3.0);
            double t68348 = b1p*c*t68334*t68327*(1.0/6.0);
            double t68349 = b3p*c*t68327*t68319*(1.0/2.0);
            double t68350 = t68346+t68347+t68348+t68349;
            double t68351 = t68350*t68343*t68344*t68345;
            double t68352 = log(t68341);
            double t68353 = log(t68316);
            double t68354 = a1p*c*t68301;
            double t68355 = t68354+1.0;
            double t68356 = pow(2.0,1.0/3.0);
            double t68357 = t68356*2.0;
            double t68358 = t68357-2.0;
            double t68359 = two_13*2.0;
            double t68360 = t68359-2.0;
            double t68361 = 1.0/t68360;
            double t68362 = log(t68338);
            double t68363 = a1f*c*t68317;
            double t68364 = t68363+1.0;
            double t68365 = c0f*t68362*t68364*2.0;
            double t68367 = c0p*t68343*t68352*2.0;
            double t68366 = t68365-t68367;
            double t68368 = gcaa*gcaa;
            double t68369 = t68368*t68368;
            double t68370 = t68361*t68366*t68358;
            double t68371 = t68370+t68367;
            double t68372 = gamma_aa[index]*gcab*t68297*4.0;
            double t68373 = gamma_aa[index]*gcab*t68292*t68293*t68298*4.0;
            double t68374 = t68292*t68293*t68299*6.0;
            double t68375 = t68294*t68295*t68296;
            double t68376 = t68372+t68373+t68374+t68375+1.0;
            double t68377 = 1.0/t68376;
            double t68378 = gamma_aa[index]*gcab*t68297;
            double t68379 = t68378+1.0;
            double t68380 = 1.0/t68379;
            double t68381 = gamma_aa[index]*gcab*t68297*3.0;
            double t68382 = gamma_aa[index]*gcab*t68292*t68293*t68298;
            double t68383 = t68292*t68293*t68299*3.0;
            double t68384 = t68381+t68382+t68383+1.0;
            double t68385 = 1.0/t68384;
            double t68386 = gamma_aa[index]*gcab*t68297*2.0;
            double t68387 = t68292*t68293*t68299;
            double t68388 = t68386+t68387+1.0;
            double t68389 = 1.0/t68388;
            double t68390 = 1.0/pow(rho_a[index],1.9E1/3.0);
            double t68391 = 1.0/pow(rho_a[index],1.1E1/3.0);
            double t68392 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]*rho_a[index]);
            double t68393 = 1.0/pow(rho_a[index],3.5E1/3.0);
            double t68394 = gamma_aa[index]*gcaa*t68297*4.0;
            double t68395 = gamma_aa[index]*gcaa*t68292*t68368*t68298*4.0;
            double t68396 = t68292*t68368*t68299*6.0;
            double t68397 = t68294*t68296*t68369;
            double t68398 = t68394+t68395+t68396+t68397+1.0;
            double t68399 = 1.0/t68398;
            double t68400 = gamma_aa[index]*gcaa*t68297;
            double t68401 = t68400+1.0;
            double t68402 = 1.0/t68401;
            double t68403 = gamma_aa[index]*gcaa*t68297*3.0;
            double t68404 = gamma_aa[index]*gcaa*t68292*t68368*t68298;
            double t68405 = t68292*t68368*t68299*3.0;
            double t68406 = t68403+t68404+t68405+1.0;
            double t68407 = 1.0/t68406;
            double t68408 = gamma_aa[index]*gcaa*t68297*2.0;
            double t68409 = t68292*t68368*t68299;
            double t68410 = t68408+t68409+1.0;
            double t68411 = 1.0/t68410;
            double t68412 = gx*gx;
            double t68413 = t68412*t68412;
            double t68414 = gamma_aa[index]*gx*t68297*4.0;
            double t68415 = gamma_aa[index]*gx*t68412*t68292*t68298*4.0;
            double t68416 = t68412*t68292*t68299*6.0;
            double t68417 = t68413*t68294*t68296;
            double t68418 = t68414+t68415+t68416+t68417+1.0;
            double t68419 = 1.0/t68418;
            double t68420 = gamma_aa[index]*gx*t68297;
            double t68421 = t68420+1.0;
            double t68422 = 1.0/t68421;
            double t68423 = gamma_aa[index]*gx*t68297*3.0;
            double t68424 = gamma_aa[index]*gx*t68412*t68292*t68298;
            double t68425 = t68412*t68292*t68299*3.0;
            double t68426 = t68423+t68424+t68425+1.0;
            double t68427 = 1.0/t68426;
            double t68428 = gamma_aa[index]*gx*t68297*2.0;
            double t68429 = t68412*t68292*t68299;
            double t68430 = t68428+t68429+1.0;
            double t68431 = 1.0/t68430;
            double t68432 = 1.0/t68338;
            double t68433 = 1.0/(t68326*t68326);
            double t68434 = b4f*t68333*t68308*(2.0/3.0);
            double t68435 = b2f*c*t68327*(1.0/3.0);
            double t68436 = b1f*c*t68334*t68327*(1.0/6.0);
            double t68437 = b3f*c*t68327*t68319*(1.0/2.0);
            double t68438 = t68434+t68435+t68436+t68437;
            double t68439 = a1f*c*c0f*t68362*t68327*(2.0/3.0);
            double t68440 = a1p*c*c0p*t68352*t68327*(2.0/3.0);
            double t68441 = ccaa4*t68294*t68296*t68369*t68399;
            double t68442 = ccaa1*gamma_aa[index]*gcaa*t68402*t68297;
            double t68443 = ccaa3*gamma_aa[index]*gcaa*t68407*t68292*t68368*t68298;
            double t68444 = ccaa2*t68411*t68292*t68368*t68299;
            double t68445 = ccaa0+t68441+t68442+t68443+t68444;
            v_rho_a_[index] = -(rho_a[index]*t68371*2.0-c0p*rho_a[index]*t68353*t68355*4.0)*(ccab1*gamma_aa[index]* \
               gcab*t68380*t68391*(4.0/3.0)+ccab2*t68390*t68292*t68293*t68389*(8.0/3.0)+ccab4*t68294*t68393*t68295* \
               t68377*(1.6E1/3.0)-ccab1*t68390*t68292*t68293*1.0/(t68379*t68379)*(4.0/3.0)-ccab2*t68292*t68293*1.0/ \
               (t68388*t68388)*t68299*(gamma_aa[index]*gcab*t68391*(8.0/3.0)+t68390*t68292*t68293*(8.0/3.0))-ccab4* \
               t68294*t68295*1.0/(t68376*t68376)*t68296*(gamma_aa[index]*gcab*t68391*(1.6E1/3.0)+t68390*t68292*t68293* \
               1.6E1+t68294*t68393*t68295*(1.6E1/3.0)+gamma_aa[index]*gcab*t68292*t68293*t68392*1.6E1)+ccab3*gamma_aa[index]* \
               gcab*t68292*t68293*t68392*t68385*4.0-ccab3*gamma_aa[index]*gcab*t68292*t68293*1.0/(t68384*t68384)* \
               t68298*(gamma_aa[index]*gcab*t68391*4.0+t68390*t68292*t68293*8.0+gamma_aa[index]*gcab*t68292*t68293* \
               t68392*4.0))-t68371*t68445-(rho_a[index]*((1.0/(t68311*t68311)*t68355*(b4p*1.0/pow(t68300,5.0/3.0) \
               *t68308*(2.0/3.0)+b2p*c*t68312*(1.0/3.0)+b3p*c*t68303*t68312*(1.0/2.0)+b1p*c*1.0/sqrt(t68302)*t68312* \
               (1.0/6.0)))/t68316-a1p*c*c0p*t68312*t68353*(2.0/3.0))*2.0+rho_a[index]*(t68440-t68351+t68361*t68358* \
               (t68351+t68439-t68432*t68433*t68364*t68438-a1p*c*c0p*t68352*t68327*(2.0/3.0)))-c0p*t68343*t68352*2.0+ \
               c0p*t68353*t68355*2.0-t68361*t68366*t68358)*(ccab0+ccab1*gamma_aa[index]*gcab*t68380*t68297+ccab2* \
               t68292*t68293*t68299*t68389+ccab4*t68294*t68295*t68296*t68377+ccab3*gamma_aa[index]*gcab*t68292*t68293* \
               t68385*t68298)+rho_a[index]*t68371*(ccaa1*gamma_aa[index]*gcaa*t68402*t68391*(8.0/3.0)+ccaa2*t68411* \
               t68390*t68292*t68368*(1.6E1/3.0)+ccaa4*t68294*t68393*t68369*t68399*(3.2E1/3.0)-ccaa1*1.0/(t68401*t68401) \
               *t68390*t68292*t68368*(8.0/3.0)-ccaa2*1.0/(t68410*t68410)*t68292*t68368*t68299*(gamma_aa[index]*gcaa* \
               t68391*(1.6E1/3.0)+t68390*t68292*t68368*(1.6E1/3.0))-ccaa4*t68294*t68296*t68369*1.0/(t68398*t68398) \
               *(gamma_aa[index]*gcaa*t68391*(3.2E1/3.0)+t68390*t68292*t68368*3.2E1+t68294*t68393*t68369*(3.2E1/3.0) \
               +gamma_aa[index]*gcaa*t68292*t68392*t68368*3.2E1)+ccaa3*gamma_aa[index]*gcaa*t68407*t68292*t68392* \
               t68368*8.0-ccaa3*gamma_aa[index]*gcaa*1.0/(t68406*t68406)*t68292*t68368*t68298*(gamma_aa[index]*gcaa* \
               t68391*8.0+t68390*t68292*t68368*1.6E1+gamma_aa[index]*gcaa*t68292*t68392*t68368*8.0))+c0*pow(rho_a[index],1.0/ \
               3.0)*(cx0+cx1*gamma_aa[index]*gx*t68422*t68297+cx2*t68412*t68431*t68292*t68299+cx4*t68413*t68419*t68294* \
               t68296+cx3*gamma_aa[index]*gx*t68412*t68292*t68427*t68298)*(4.0/3.0)-c0*pow(rho_a[index],4.0/3.0)* \
               (cx1*gamma_aa[index]*gx*t68422*t68391*(8.0/3.0)+cx2*t68412*t68431*t68390*t68292*(1.6E1/3.0)+cx4*t68413* \
               t68419*t68294*t68393*(3.2E1/3.0)-cx1*t68412*1.0/(t68421*t68421)*t68390*t68292*(8.0/3.0)-cx2*t68412* \
               1.0/(t68430*t68430)*t68292*t68299*(gamma_aa[index]*gx*t68391*(1.6E1/3.0)+t68412*t68390*t68292*(1.6E1/ \
               3.0))-cx4*t68413*1.0/(t68418*t68418)*t68294*t68296*(gamma_aa[index]*gx*t68391*(3.2E1/3.0)+t68412*t68390* \
               t68292*3.2E1+t68413*t68294*t68393*(3.2E1/3.0)+gamma_aa[index]*gx*t68412*t68292*t68392*3.2E1)+cx3*gamma_aa[index]* \
               gx*t68412*t68292*t68427*t68392*8.0-cx3*gamma_aa[index]*gx*t68412*1.0/(t68426*t68426)*t68292*t68298* \
               (gamma_aa[index]*gx*t68391*8.0+t68412*t68390*t68292*1.6E1+gamma_aa[index]*gx*t68412*t68292*t68392* \
               8.0))-rho_a[index]*t68445*(-t68440+t68351+t68361*t68358*(t68440-t68351-t68439+t68432*t68433*t68364* \
               t68438));
        } else {
            v_rho_a_[index] = 0.0;
        } 
        
        if (is_gga_) {
            
            if (rho_a[index] > cutoff_) {
                double t68447 = 1.0/pow(rho_a[index],1.0/3.0);
                double t68448 = c*t68447;
                double t68449 = sqrt(t68448);
                double t68450 = pow(t68448,3.0/2.0);
                double t68451 = c*c;
                double t68452 = 1.0/pow(rho_a[index],2.0/3.0);
                double t68453 = 1.0/c0p;
                double t68454 = b1p*t68449;
                double t68455 = b3p*t68450;
                double t68456 = b4p*t68451*t68452;
                double t68457 = b2p*c*t68447;
                double t68458 = t68454+t68455+t68456+t68457;
                double t68459 = 1.0/t68458;
                double t68460 = t68453*t68459*(1.0/2.0);
                double t68461 = t68460+1.0;
                double t68462 = log(t68461);
                double t68463 = a1p*c*t68447;
                double t68464 = t68463+1.0;
                double t68465 = rho_a[index]*2.0;
                double t68466 = 1.0/pow(t68465,1.0/3.0);
                double t68467 = c*t68466;
                double t68468 = 1.0/pow(rho_a[index],8.0/3.0);
                double t68469 = gamma_aa[index]*gamma_aa[index];
                double t68470 = gcab*gcab;
                double t68471 = t68470*t68470;
                double t68472 = 1.0/pow(rho_a[index],3.2E1/3.0);
                double t68473 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t68474 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t68475 = gamma_aa[index]*gcab*t68468;
                double t68476 = t68475+1.0;
                double t68477 = gamma_aa[index]*gcab*t68468*3.0;
                double t68478 = gamma_aa[index]*gcab*t68470*t68474*t68469;
                double t68479 = t68470*t68473*t68469*3.0;
                double t68480 = t68477+t68478+t68479+1.0;
                double t68481 = t68469*t68469;
                double t68482 = gamma_aa[index]*gcab*t68468*4.0;
                double t68483 = gamma_aa[index]*gcab*t68470*t68474*t68469*4.0;
                double t68484 = t68470*t68473*t68469*6.0;
                double t68485 = t68471*t68472*t68481;
                double t68486 = t68482+t68483+t68484+t68485+1.0;
                double t68487 = gamma_aa[index]*gcab*t68468*2.0;
                double t68488 = t68470*t68473*t68469;
                double t68489 = t68487+t68488+1.0;
                double t68490 = gx*gx;
                double t68491 = t68490*t68490;
                double t68492 = gamma_aa[index]*gx*t68468;
                double t68493 = t68492+1.0;
                double t68494 = gamma_aa[index]*gx*t68468*3.0;
                double t68495 = gamma_aa[index]*gx*t68490*t68474*t68469;
                double t68496 = t68490*t68473*t68469*3.0;
                double t68497 = t68494+t68495+t68496+1.0;
                double t68498 = gamma_aa[index]*gx*t68468*4.0;
                double t68499 = gamma_aa[index]*gx*t68490*t68474*t68469*4.0;
                double t68500 = t68490*t68473*t68469*6.0;
                double t68501 = t68472*t68481*t68491;
                double t68502 = t68500+t68501+t68498+t68499+1.0;
                double t68503 = gamma_aa[index]*gx*t68468*2.0;
                double t68504 = t68490*t68473*t68469;
                double t68505 = t68503+t68504+1.0;
                double t68506 = pow(2.0,1.0/3.0);
                double t68507 = t68506*2.0;
                double t68508 = t68507-2.0;
                double t68509 = two_13*2.0;
                double t68510 = t68509-2.0;
                double t68511 = 1.0/t68510;
                double t68512 = 1.0/c0f;
                double t68513 = b1f*t68449;
                double t68514 = b3f*t68450;
                double t68515 = b4f*t68451*t68452;
                double t68516 = b2f*c*t68447;
                double t68517 = t68513+t68514+t68515+t68516;
                double t68518 = 1.0/t68517;
                double t68519 = t68512*t68518*(1.0/2.0);
                double t68520 = t68519+1.0;
                double t68521 = log(t68520);
                double t68522 = a1f*c*t68447;
                double t68523 = t68522+1.0;
                double t68524 = c0f*t68521*t68523*2.0;
                double t68525 = c0p*t68462*t68464*2.0;
                double t68526 = gcaa*gcaa;
                double t68527 = t68526*t68526;
                double t68528 = gamma_aa[index]*gcaa*t68468;
                double t68529 = t68528+1.0;
                double t68530 = gamma_aa[index]*gcaa*t68468*3.0;
                double t68531 = gamma_aa[index]*gcaa*t68526*t68474*t68469;
                double t68532 = t68526*t68473*t68469*3.0;
                double t68533 = t68530+t68531+t68532+1.0;
                double t68534 = gamma_aa[index]*gcaa*t68468*4.0;
                double t68535 = gamma_aa[index]*gcaa*t68526*t68474*t68469*4.0;
                double t68536 = t68526*t68473*t68469*6.0;
                double t68537 = t68472*t68481*t68527;
                double t68538 = t68534+t68535+t68536+t68537+1.0;
                double t68539 = gamma_aa[index]*gcaa*t68468*2.0;
                double t68540 = t68526*t68473*t68469;
                double t68541 = t68540+t68539+1.0;
                v_gamma_aa_[index] = (rho_a[index]*(t68525+t68511*t68508*(t68524-c0p*t68462*t68464*2.0))*2.0-c0p* \
                   rho_a[index]*log((t68453*(1.0/2.0))/(b1p*sqrt(t68467)+b3p*pow(t68467,3.0/2.0)+b4p*t68451*1.0/pow(t68465,2.0/ \
                   3.0)+b2p*c*t68466)+1.0)*(a1p*c*t68466+1.0)*4.0)*((ccab1*gcab*t68468*(1.0/2.0))/t68476-ccab1*gamma_aa[index]* \
                   t68470*t68473*1.0/(t68476*t68476)*(1.0/2.0)+(ccab2*gamma_aa[index]*t68470*t68473)/t68489-ccab2*t68470* \
                   t68473*t68469*1.0/(t68489*t68489)*(gcab*t68468+gamma_aa[index]*t68470*t68473)+(ccab4*gamma_aa[index]* \
                   t68471*t68472*t68469*2.0)/t68486+(ccab3*gcab*t68470*t68474*t68469*(3.0/2.0))/t68480-ccab4*t68471*t68472* \
                   t68481*1.0/(t68486*t68486)*(gcab*t68468*2.0+gamma_aa[index]*t68470*t68473*6.0+gamma_aa[index]*t68471* \
                   t68472*t68469*2.0+gcab*t68470*t68474*t68469*6.0)-ccab3*gamma_aa[index]*gcab*t68470*1.0/(t68480*t68480) \
                   *t68474*t68469*(gcab*t68468*(3.0/2.0)+gamma_aa[index]*t68470*t68473*3.0+gcab*t68470*t68474*t68469* \
                   (3.0/2.0)))*2.0-rho_a[index]*(t68525+t68511*t68508*(t68524-t68525))*((ccaa1*gcaa*t68468)/t68529+(ccaa2* \
                   gamma_aa[index]*t68526*t68473*2.0)/t68541-ccaa1*gamma_aa[index]*t68526*t68473*1.0/(t68529*t68529)- \
                   ccaa2*1.0/(t68541*t68541)*t68526*t68473*t68469*(gcaa*t68468*2.0+gamma_aa[index]*t68526*t68473*2.0) \
                   +(ccaa4*gamma_aa[index]*t68472*t68527*t68469*4.0)/t68538+(ccaa3*gcaa*t68526*t68474*t68469*3.0)/t68533- \
                   ccaa4*t68472*t68481*t68527*1.0/(t68538*t68538)*(gcaa*t68468*4.0+gamma_aa[index]*t68526*t68473*1.2E1+ \
                   gamma_aa[index]*t68472*t68527*t68469*4.0+gcaa*t68526*t68474*t68469*1.2E1)-ccaa3*gamma_aa[index]*gcaa* \
                   1.0/(t68533*t68533)*t68526*t68474*t68469*(gcaa*t68468*3.0+gamma_aa[index]*t68526*t68473*6.0+gcaa*t68526* \
                   t68474*t68469*3.0))*2.0+c0*pow(rho_a[index],4.0/3.0)*((cx1*gx*t68468)/t68493-cx1*gamma_aa[index]*t68490* \
                   t68473*1.0/(t68493*t68493)+(cx2*gamma_aa[index]*t68490*t68473*2.0)/t68505-cx2*1.0/(t68505*t68505)* \
                   t68490*t68473*t68469*(gx*t68468*2.0+gamma_aa[index]*t68490*t68473*2.0)+(cx4*gamma_aa[index]*t68472* \
                   t68491*t68469*4.0)/t68502+(cx3*gx*t68490*t68474*t68469*3.0)/t68497-cx4*1.0/(t68502*t68502)*t68472* \
                   t68481*t68491*(gx*t68468*4.0+gamma_aa[index]*t68490*t68473*1.2E1+gamma_aa[index]*t68472*t68491*t68469* \
                   4.0+gx*t68490*t68474*t68469*1.2E1)-cx3*gamma_aa[index]*gx*t68490*t68474*t68469*1.0/(t68497*t68497) \
                   *(gx*t68468*3.0+gamma_aa[index]*t68490*t68473*6.0+gx*t68490*t68474*t68469*3.0))*2.0;
            } else {
                v_gamma_aa_[index] = 0.0;
            } 
        
        }
        if (is_meta_) {
        
            //V_tau_a
            if (rho_a[index] > cutoff_) {
                v_tau_a_[index] = 0.0;
            } else {
                v_tau_a_[index] = 0.0;
            } 
        
        }
    }
    //Second Partials
    for (int index = 0; index < ntrue && deriv_ >= 2; index++) {
        
        //V_rho_a_rho_a
        if (rho_a[index] > cutoff_) {
            double t68544 = rho_a[index]*2.0;
            double t68545 = 1.0/pow(t68544,1.0/3.0);
            double t68546 = c*t68545;
            double t68547 = sqrt(t68546);
            double t68548 = b1p*t68547;
            double t68549 = pow(t68546,3.0/2.0);
            double t68550 = b3p*t68549;
            double t68551 = b2p*c*t68545;
            double t68552 = c*c;
            double t68553 = 1.0/pow(t68544,2.0/3.0);
            double t68554 = b4p*t68552*t68553;
            double t68555 = t68550+t68551+t68554+t68548;
            double t68556 = 1.0/pow(t68544,8.0/3.0);
            double t68557 = 1.0/pow(t68544,7.0/3.0);
            double t68558 = 1.0/sqrt(t68546);
            double t68559 = 1.0/c0p;
            double t68560 = 1.0/t68555;
            double t68561 = t68560*t68559*(1.0/2.0);
            double t68562 = t68561+1.0;
            double t68563 = 1.0/t68562;
            double t68564 = a1p*c*t68545;
            double t68565 = t68564+1.0;
            double t68566 = 1.0/pow(t68544,4.0/3.0);
            double t68568 = b2p*c*t68566*(1.0/3.0);
            double t68569 = 1.0/pow(t68544,5.0/3.0);
            double t68570 = b4p*t68552*t68569*(2.0/3.0);
            double t68571 = b1p*c*t68566*t68558*(1.0/6.0);
            double t68572 = b3p*c*t68547*t68566*(1.0/2.0);
            double t68567 = t68570+t68571+t68572+t68568;
            double t68573 = t68567*t68567;
            double t68574 = 1.0/(t68555*t68555);
            double t68575 = log(t68562);
            double t68576 = gamma_aa[index]*gamma_aa[index];
            double t68577 = gcab*gcab;
            double t68578 = t68576*t68576;
            double t68579 = t68577*t68577;
            double t68580 = 1.0/pow(rho_a[index],3.2E1/3.0);
            double t68581 = 1.0/pow(rho_a[index],8.0/3.0);
            double t68582 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]);
            double t68583 = 1.0/pow(rho_a[index],1.6E1/3.0);
            double t68584 = two_13*2.0;
            double t68585 = t68584-2.0;
            double t68586 = 1.0/t68585;
            double t68587 = 1.0/pow(rho_a[index],1.0/3.0);
            double t68588 = c*t68587;
            double t68589 = sqrt(t68588);
            double t68590 = pow(t68588,3.0/2.0);
            double t68591 = 1.0/pow(rho_a[index],2.0/3.0);
            double t68592 = b1p*t68589;
            double t68593 = b3p*t68590;
            double t68594 = b4p*t68552*t68591;
            double t68595 = b2p*c*t68587;
            double t68596 = t68592+t68593+t68594+t68595;
            double t68597 = 1.0/t68596;
            double t68598 = t68559*t68597*(1.0/2.0);
            double t68599 = t68598+1.0;
            double t68600 = log(t68599);
            double t68601 = a1p*c*t68587;
            double t68602 = t68601+1.0;
            double t68603 = gamma_aa[index]*gcab*t68581*4.0;
            double t68604 = gamma_aa[index]*gcab*t68582*t68576*t68577*4.0;
            double t68605 = t68583*t68576*t68577*6.0;
            double t68606 = t68580*t68578*t68579;
            double t68607 = t68603+t68604+t68605+t68606+1.0;
            double t68608 = 1.0/t68607;
            double t68609 = gamma_aa[index]*gcab*t68581;
            double t68610 = t68609+1.0;
            double t68611 = 1.0/t68610;
            double t68612 = gamma_aa[index]*gcab*t68581*3.0;
            double t68613 = gamma_aa[index]*gcab*t68582*t68576*t68577;
            double t68614 = t68583*t68576*t68577*3.0;
            double t68615 = t68612+t68613+t68614+1.0;
            double t68616 = 1.0/t68615;
            double t68617 = gamma_aa[index]*gcab*t68581*2.0;
            double t68618 = t68583*t68576*t68577;
            double t68619 = t68617+t68618+1.0;
            double t68620 = 1.0/t68619;
            double t68621 = 1.0/pow(rho_a[index],1.0E1);
            double t68622 = 1.0/pow(rho_a[index],2.2E1/3.0);
            double t68624 = 1.0/pow(rho_a[index],1.1E1/3.0);
            double t68625 = 1.0/pow(rho_a[index],1.9E1/3.0);
            double t68627 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]*rho_a[index]);
            double t68634 = 1.0/pow(rho_a[index],3.5E1/3.0);
            double t68635 = gamma_aa[index]*gcab*t68624*(1.6E1/3.0);
            double t68636 = gamma_aa[index]*gcab*t68627*t68576*t68577*1.6E1;
            double t68637 = t68625*t68576*t68577*1.6E1;
            double t68638 = t68634*t68578*t68579*(1.6E1/3.0);
            double t68623 = t68635+t68636+t68637+t68638;
            double t68641 = gamma_aa[index]*gcab*t68624*(8.0/3.0);
            double t68642 = t68625*t68576*t68577*(8.0/3.0);
            double t68626 = t68641+t68642;
            double t68628 = 1.0/pow(rho_a[index],1.4E1/3.0);
            double t68629 = 1.0/(t68615*t68615);
            double t68630 = gamma_aa[index]*gcab*t68624*4.0;
            double t68631 = gamma_aa[index]*gcab*t68627*t68576*t68577*4.0;
            double t68632 = t68625*t68576*t68577*8.0;
            double t68633 = t68630+t68631+t68632;
            double t68639 = 1.0/pow(rho_a[index],3.8E1/3.0);
            double t68640 = 1.0/(t68607*t68607);
            double t68643 = 1.0/(t68619*t68619);
            double t68644 = pow(2.0,1.0/3.0);
            double t68645 = t68644*2.0;
            double t68646 = t68645-2.0;
            double t68647 = a1f*c*t68587;
            double t68648 = t68647+1.0;
            double t68649 = 1.0/c0f;
            double t68650 = b1f*t68589;
            double t68651 = b3f*t68590;
            double t68652 = b4f*t68552*t68591;
            double t68653 = b2f*c*t68587;
            double t68654 = t68650+t68651+t68652+t68653;
            double t68655 = 1.0/t68654;
            double t68656 = t68655*t68649*(1.0/2.0);
            double t68657 = t68656+1.0;
            double t68658 = 1.0/pow(rho_a[index],4.0/3.0);
            double t68659 = 1.0/pow(rho_a[index],5.0/3.0);
            double t68660 = 1.0/sqrt(t68588);
            double t68661 = log(t68657);
            double t68662 = 1.0/t68599;
            double t68663 = 1.0/(t68596*t68596);
            double t68664 = b4p*t68552*t68659*(2.0/3.0);
            double t68665 = b2p*c*t68658*(1.0/3.0);
            double t68666 = b1p*c*t68660*t68658*(1.0/6.0);
            double t68667 = b3p*c*t68658*t68589*(1.0/2.0);
            double t68668 = t68664+t68665+t68666+t68667;
            double t68669 = t68602*t68662*t68663*t68668;
            double t68670 = gcaa*gcaa;
            double t68671 = t68670*t68670;
            double t68672 = 1.0/t68657;
            double t68673 = 1.0/(t68654*t68654);
            double t68674 = b4f*t68552*t68659*(2.0/3.0);
            double t68675 = b2f*c*t68658*(1.0/3.0);
            double t68676 = b1f*c*t68660*t68658*(1.0/6.0);
            double t68677 = b3f*c*t68658*t68589*(1.0/2.0);
            double t68678 = t68674+t68675+t68676+t68677;
            double t68679 = a1f*c*c0f*t68661*t68658*(2.0/3.0);
            double t68680 = a1p*c*c0p*t68600*t68658*(2.0/3.0);
            double t68681 = c0f*t68661*t68648*2.0;
            double t68682 = c0p*t68600*t68602*2.0;
            double t68683 = 1.0/(t68610*t68610);
            double t68684 = ccab4*t68580*t68608*t68578*t68579;
            double t68685 = ccab1*gamma_aa[index]*gcab*t68611*t68581;
            double t68686 = ccab3*gamma_aa[index]*gcab*t68616*t68582*t68576*t68577;
            double t68687 = ccab2*t68620*t68583*t68576*t68577;
            double t68688 = ccab0+t68684+t68685+t68686+t68687;
            double t68689 = b2p*c*t68557*(4.0/9.0);
            double t68690 = b4p*t68552*t68556*(1.0E1/9.0);
            double t68691 = 1.0/pow(t68546,3.0/2.0);
            double t68692 = b3p*t68552*t68556*t68558*(1.0/1.2E1);
            double t68693 = b1p*c*t68557*t68558*(2.0/9.0);
            double t68694 = b3p*c*t68547*t68557*(2.0/3.0);
            double t68695 = t68690+t68692+t68693+t68694+t68689-b1p*t68552*t68556*t68691*(1.0/3.6E1);
            double t68696 = t68563*t68565*t68574*t68695;
            double t68697 = 1.0/(t68555*t68555*t68555);
            double t68698 = 1.0/(t68562*t68562);
            double t68699 = 1.0/(t68555*t68555*t68555*t68555);
            double t68700 = t68573*t68565*t68559*t68698*t68699*(1.0/2.0);
            double t68701 = 1.0/d2fz0;
            double t68702 = 1.0/(rho_a[index]*rho_a[index]);
            double t68703 = 1.0/Aa;
            double t68704 = b1a*t68547;
            double t68705 = b3a*t68549;
            double t68706 = b2a*c*t68545;
            double t68707 = b4a*t68552*t68553;
            double t68708 = t68704+t68705+t68706+t68707;
            double t68709 = 1.0/t68708;
            double t68710 = t68703*t68709*(1.0/2.0);
            double t68711 = t68710+1.0;
            double t68712 = log(t68711);
            double t68713 = a1a*c*t68545;
            double t68714 = t68713+1.0;
            double t68715 = a1p*c*t68563*t68574*t68566*t68567*(2.0/3.0);
            double t68716 = 1.0/pow(rho_a[index],7.0/3.0);
            double t68717 = 1.0/pow(t68588,3.0/2.0);
            double t68718 = t68678*t68678;
            double t68719 = t68668*t68668;
            double t68720 = 1.0/(t68596*t68596*t68596);
            double t68721 = t68602*t68720*t68662*t68719*2.0;
            double t68722 = b4p*t68552*t68581*(1.0E1/9.0);
            double t68723 = b2p*c*t68716*(4.0/9.0);
            double t68724 = b3p*t68552*t68660*t68581*(1.0/1.2E1);
            double t68725 = b1p*c*t68660*t68716*(2.0/9.0);
            double t68726 = b3p*c*t68716*t68589*(2.0/3.0);
            double t68838 = b1p*t68552*t68581*t68717*(1.0/3.6E1);
            double t68727 = t68722+t68723+t68724+t68725+t68726-t68838;
            double t68728 = 1.0/(t68599*t68599);
            double t68729 = 1.0/(t68596*t68596*t68596*t68596);
            double t68730 = a1p*c*c0p*t68600*t68716*(8.0/9.0);
            double t68731 = t68672*t68673*t68648*t68678;
            double t68732 = t68731+t68680-t68669-t68679;
            double t68733 = a1p*c*c0p*t68566*t68575*(4.0/3.0);
            double t68734 = t68681-t68682;
            double t68735 = t68734*t68646*t68586;
            double t68736 = gamma_aa[index]*gcaa*t68581*4.0;
            double t68737 = gamma_aa[index]*gcaa*t68670*t68582*t68576*4.0;
            double t68738 = t68670*t68583*t68576*6.0;
            double t68739 = t68580*t68671*t68578;
            double t68740 = t68736+t68737+t68738+t68739+1.0;
            double t68741 = 1.0/t68740;
            double t68742 = gamma_aa[index]*gcaa*t68581;
            double t68743 = t68742+1.0;
            double t68744 = 1.0/t68743;
            double t68745 = gamma_aa[index]*gcaa*t68581*3.0;
            double t68746 = gamma_aa[index]*gcaa*t68670*t68582*t68576;
            double t68747 = t68670*t68583*t68576*3.0;
            double t68748 = t68745+t68746+t68747+1.0;
            double t68749 = 1.0/t68748;
            double t68750 = gamma_aa[index]*gcaa*t68581*2.0;
            double t68751 = t68670*t68583*t68576;
            double t68752 = t68750+t68751+1.0;
            double t68753 = 1.0/t68752;
            double t68754 = t68735+t68682;
            double t68755 = 1.0/(t68610*t68610*t68610);
            double t68756 = ccab1*gamma_aa[index]*gcab*t68621*t68755*t68576*t68577*(3.2E1/9.0);
            double t68757 = t68623*t68623;
            double t68758 = 1.0/(t68607*t68607*t68607);
            double t68759 = ccab4*t68580*t68757*t68578*t68758*t68579*2.0;
            double t68760 = t68626*t68626;
            double t68761 = 1.0/(t68619*t68619*t68619);
            double t68762 = ccab2*t68760*t68761*t68583*t68576*t68577*2.0;
            double t68763 = t68633*t68633;
            double t68764 = 1.0/(t68615*t68615*t68615);
            double t68765 = ccab3*gamma_aa[index]*gcab*t68582*t68763*t68764*t68576*t68577*2.0;
            double t68766 = t68732*t68646*t68586;
            double t68767 = -t68680+t68766+t68669;
            double t68768 = ccaa4*t68741*t68634*t68671*t68578*(3.2E1/3.0);
            double t68769 = ccaa1*gamma_aa[index]*gcaa*t68624*t68744*(8.0/3.0);
            double t68770 = ccaa3*gamma_aa[index]*gcaa*t68670*t68627*t68576*t68749*8.0;
            double t68771 = ccaa2*t68625*t68670*t68753*t68576*(1.6E1/3.0);
            double t68772 = 1.0/(t68743*t68743);
            double t68773 = gamma_aa[index]*gcaa*t68624*8.0;
            double t68774 = gamma_aa[index]*gcaa*t68670*t68627*t68576*8.0;
            double t68775 = t68625*t68670*t68576*1.6E1;
            double t68776 = t68773+t68774+t68775;
            double t68777 = 1.0/(t68748*t68748);
            double t68778 = gamma_aa[index]*gcaa*t68624*(3.2E1/3.0);
            double t68779 = gamma_aa[index]*gcaa*t68670*t68627*t68576*3.2E1;
            double t68780 = t68625*t68670*t68576*3.2E1;
            double t68781 = t68634*t68671*t68578*(3.2E1/3.0);
            double t68782 = t68780+t68781+t68778+t68779;
            double t68783 = 1.0/(t68740*t68740);
            double t68784 = gamma_aa[index]*gcaa*t68624*(1.6E1/3.0);
            double t68785 = t68625*t68670*t68576*(1.6E1/3.0);
            double t68786 = t68784+t68785;
            double t68787 = 1.0/(t68752*t68752);
            double t68788 = t68770+t68771+t68768+t68769-ccaa1*t68625*t68670*t68772*t68576*(8.0/3.0)-ccaa4*t68580* \
               t68671*t68782*t68783*t68578-ccaa2*t68670*t68583*t68576*t68786*t68787-ccaa3*gamma_aa[index]*gcaa*t68670* \
               t68582*t68576*t68776*t68777;
            double t68789 = gx*gx;
            double t68790 = t68789*t68789;
            double t68791 = gamma_aa[index]*gx*t68581;
            double t68792 = t68791+1.0;
            double t68812 = gamma_aa[index]*gx*t68624*(3.2E1/3.0);
            double t68813 = gamma_aa[index]*gx*t68627*t68576*t68789*3.2E1;
            double t68814 = t68625*t68576*t68789*3.2E1;
            double t68815 = t68634*t68790*t68578*(3.2E1/3.0);
            double t68793 = t68812+t68813+t68814+t68815;
            double t68794 = gamma_aa[index]*gx*t68581*4.0;
            double t68795 = gamma_aa[index]*gx*t68582*t68576*t68789*4.0;
            double t68796 = t68583*t68576*t68789*6.0;
            double t68797 = t68580*t68790*t68578;
            double t68798 = t68794+t68795+t68796+t68797+1.0;
            double t68817 = gamma_aa[index]*gx*t68624*(1.6E1/3.0);
            double t68818 = t68625*t68576*t68789*(1.6E1/3.0);
            double t68799 = t68817+t68818;
            double t68800 = gamma_aa[index]*gx*t68581*2.0;
            double t68801 = t68583*t68576*t68789;
            double t68802 = t68800+t68801+1.0;
            double t68803 = gamma_aa[index]*gx*t68581*3.0;
            double t68804 = gamma_aa[index]*gx*t68582*t68576*t68789;
            double t68805 = t68583*t68576*t68789*3.0;
            double t68806 = t68803+t68804+t68805+1.0;
            double t68807 = 1.0/(t68806*t68806);
            double t68808 = gamma_aa[index]*gx*t68624*8.0;
            double t68809 = gamma_aa[index]*gx*t68627*t68576*t68789*8.0;
            double t68810 = t68625*t68576*t68789*1.6E1;
            double t68811 = t68810+t68808+t68809;
            double t68816 = 1.0/(t68798*t68798);
            double t68819 = 1.0/(t68802*t68802);
            double t68820 = 1.0/t68798;
            double t68821 = 1.0/t68792;
            double t68822 = 1.0/t68806;
            double t68823 = 1.0/t68802;
            double t68824 = 1.0/(t68792*t68792);
            double t68825 = ccaa4*t68741*t68580*t68671*t68578;
            double t68826 = ccaa1*gamma_aa[index]*gcaa*t68581*t68744;
            double t68827 = ccaa3*gamma_aa[index]*gcaa*t68670*t68582*t68576*t68749;
            double t68828 = ccaa2*t68670*t68753*t68583*t68576;
            double t68829 = ccaa0+t68825+t68826+t68827+t68828;
            double t68830 = 1.0/(t68654*t68654*t68654);
            double t68831 = b4f*t68552*t68581*(1.0E1/9.0);
            double t68832 = b2f*c*t68716*(4.0/9.0);
            double t68833 = b3f*t68552*t68660*t68581*(1.0/1.2E1);
            double t68834 = b1f*c*t68660*t68716*(2.0/9.0);
            double t68835 = b3f*c*t68716*t68589*(2.0/3.0);
            double t68836 = t68831+t68832+t68833+t68834+t68835-b1f*t68552*t68581*t68717*(1.0/3.6E1);
            double t68837 = t68672*t68673*t68836*t68648;
            double t68839 = t68602*t68662*t68663*t68727;
            double t68840 = 1.0/(t68657*t68657);
            double t68841 = 1.0/(t68654*t68654*t68654*t68654);
            double t68842 = t68840*t68841*t68718*t68648*t68649*(1.0/2.0);
            double t68843 = t68602*t68719*t68728*t68729*t68559*(1.0/2.0);
            double t68844 = a1f*c*t68672*t68673*t68658*t68678*(2.0/3.0);
            double t68845 = a1p*c*t68662*t68663*t68658*t68668*(2.0/3.0);
            v_rho_a_rho_a_[index] = (t68735+t68682+rho_a[index]*t68767-rho_a[index]*(t68563*t68565*t68574*t68567- \
               a1p*c*c0p*t68566*t68575*(2.0/3.0))*2.0-c0p*t68565*t68575*2.0)*(ccab1*gamma_aa[index]*gcab*t68611*t68624* \
               (4.0/3.0)+ccab2*t68620*t68625*t68576*t68577*(8.0/3.0)-ccab1*t68625*t68683*t68576*t68577*(4.0/3.0)+ \
               ccab4*t68634*t68608*t68578*t68579*(1.6E1/3.0)-ccab4*t68640*t68623*t68580*t68578*t68579-ccab2*t68643* \
               t68626*t68583*t68576*t68577+ccab3*gamma_aa[index]*gcab*t68616*t68627*t68576*t68577*4.0-ccab3*gamma_aa[index]* \
               gcab*t68633*t68582*t68629*t68576*t68577)*-4.0+t68754*t68788*2.0+(rho_a[index]*(t68682+t68646*t68586* \
               (t68681-c0p*t68600*t68602*2.0))*2.0-c0p*rho_a[index]*t68565*t68575*4.0)*(t68762+t68756+t68765+t68759+ \
               ccab1*gamma_aa[index]*gcab*t68611*t68628*(4.4E1/9.0)+ccab2*t68620*t68622*t68576*t68577*(4.0E1/3.0) \
               -ccab1*t68622*t68683*t68576*t68577*(7.6E1/9.0)+ccab4*t68608*t68639*t68578*t68579*(3.68E2/9.0)-ccab2* \
               t68625*t68643*t68626*t68576*t68577*(1.6E1/3.0)-ccab4*t68640*t68623*t68634*t68578*t68579*(3.2E1/3.0) \
               -ccab2*t68643*t68583*t68576*t68577*(gamma_aa[index]*gcab*t68628*(8.8E1/9.0)+t68622*t68576*t68577*(4.0E1/ \
               3.0))-ccab4*t68640*t68580*t68578*t68579*(gamma_aa[index]*gcab*t68628*(1.76E2/9.0)+t68622*t68576*t68577* \
               8.0E1+t68639*t68578*t68579*(3.68E2/9.0)+gamma_aa[index]*gcab*t68621*t68576*t68577*(3.04E2/3.0))+ccab3* \
               gamma_aa[index]*gcab*t68621*t68616*t68576*t68577*(7.6E1/3.0)-ccab3*gamma_aa[index]*gcab*t68582*t68629* \
               t68576*t68577*(gamma_aa[index]*gcab*t68628*(4.4E1/3.0)+t68622*t68576*t68577*4.0E1+gamma_aa[index]* \
               gcab*t68621*t68576*t68577*(7.6E1/3.0))-ccab3*gamma_aa[index]*gcab*t68633*t68627*t68629*t68576*t68577* \
               8.0)+t68829*(t68680-t68669+t68646*t68586*(t68669+t68679-t68672*t68673*t68648*t68678-a1p*c*c0p*t68600* \
               t68658*(2.0/3.0)))*2.0+t68688*(t68733+rho_a[index]*(t68700+t68715+t68696-t68563*t68573*t68565*t68697* \
               2.0-a1p*c*c0p*t68557*t68575*(8.0/9.0)+Aa*t68701*t68702*t68712*t68714*t68586*(4.0/9.0))*2.0-rho_a[index]* \
               (-t68721-t68730+t68843+t68845+t68839+t68646*t68586*(t68721+t68730+t68842+t68844+t68837-t68602*t68662* \
               t68663*t68727-t68830*t68672*t68718*t68648*2.0-a1f*c*c0f*t68661*t68716*(8.0/9.0)-t68602*t68719*t68728* \
               t68729*t68559*(1.0/2.0)-a1p*c*t68662*t68663*t68658*t68668*(2.0/3.0)))+t68732*t68646*t68586*2.0+t68602* \
               t68662*t68663*t68668*2.0-t68563*t68565*t68574*t68567*2.0-a1p*c*c0p*t68600*t68658*(4.0/3.0))+(rho_a[index]* \
               t68754*2.0-c0p*rho_a[index]*t68565*t68575*4.0)*(t68762+t68756+t68765+t68759+ccab2*t68620*t68622*t68576* \
               t68577*(3.2E1/9.0)-ccab1*t68622*t68683*t68576*t68577*(3.2E1/9.0)-ccab2*t68643*t68639*t68578*t68579* \
               (3.2E1/9.0)+ccab4*t68608*t68639*t68578*t68579*(6.4E1/3.0)-ccab2*t68625*t68643*t68626*t68576*t68577* \
               (1.6E1/3.0)-ccab4*t68640*t68623*t68634*t68578*t68579*(3.2E1/3.0)-ccab4*t68640*t68580*t68578*t68579* \
               (t68622*t68576*t68577*(6.4E1/3.0)+t68639*t68578*t68579*(6.4E1/3.0)+gamma_aa[index]*gcab*t68621*t68576* \
               t68577*(1.28E2/3.0))+ccab3*gamma_aa[index]*gcab*t68621*t68616*t68576*t68577*(3.2E1/3.0)-ccab3*gamma_aa[index]* \
               gcab*t68582*t68629*t68576*t68577*(t68622*t68576*t68577*(3.2E1/3.0)+gamma_aa[index]*gcab*t68621*t68576* \
               t68577*(3.2E1/3.0))-ccab3*gamma_aa[index]*gcab*t68633*t68627*t68629*t68576*t68577*8.0)+t68688*(t68733+ \
               rho_a[index]*(t68700+t68715+t68696-t68563*t68573*t68565*t68697*2.0-a1p*c*c0p*t68557*t68575*(8.0/9.0) \
               -Aa*t68701*t68702*t68712*t68714*t68586*(4.0/9.0))*2.0-t68563*t68565*t68574*t68567*2.0)-c0*pow(rho_a[index],1.0/ \
               3.0)*(cx1*gamma_aa[index]*gx*t68821*t68624*(8.0/3.0)-cx1*t68625*t68824*t68576*t68789*(8.0/3.0)+cx2* \
               t68625*t68823*t68576*t68789*(1.6E1/3.0)+cx4*t68820*t68634*t68790*t68578*(3.2E1/3.0)-cx2*t68583*t68576* \
               t68819*t68789*t68799-cx4*t68580*t68816*t68790*t68793*t68578+cx3*gamma_aa[index]*gx*t68822*t68627*t68576* \
               t68789*8.0-cx3*gamma_aa[index]*gx*t68811*t68582*t68807*t68576*t68789)*(8.0/3.0)-rho_a[index]*t68754* \
               (ccaa1*gamma_aa[index]*gcaa*t68744*t68628*(8.8E1/9.0)-ccaa1*t68622*t68670*t68772*t68576*2.4E1+ccaa2* \
               t68622*t68670*t68753*t68576*(3.04E2/9.0)+ccaa4*t68741*t68671*t68639*t68578*(1.12E3/9.0)-ccaa4*t68634* \
               t68671*t68782*t68783*t68578*(6.4E1/3.0)-ccaa2*t68625*t68670*t68576*t68786*t68787*(3.2E1/3.0)-ccaa2* \
               t68670*t68583*t68576*t68787*(gamma_aa[index]*gcaa*t68628*(1.76E2/9.0)+t68622*t68670*t68576*(3.04E2/ \
               9.0))-ccaa4*t68580*t68671*t68783*t68578*(gamma_aa[index]*gcaa*t68628*(3.52E2/9.0)+t68622*t68670*t68576* \
               (6.08E2/3.0)+t68671*t68639*t68578*(1.12E3/9.0)+gamma_aa[index]*gcaa*t68621*t68670*t68576*2.88E2)+ccaa4* \
               1.0/(t68740*t68740*t68740)*t68580*t68671*(t68782*t68782)*t68578*2.0+ccaa2*t68670*1.0/(t68752*t68752* \
               t68752)*t68583*t68576*(t68786*t68786)*2.0+ccaa3*gamma_aa[index]*gcaa*t68621*t68670*t68576*t68749*7.2E1+ \
               ccaa1*gamma_aa[index]*gcaa*t68621*t68670*1.0/(t68743*t68743*t68743)*t68576*(1.28E2/9.0)+ccaa3*gamma_aa[index]* \
               gcaa*t68670*t68582*t68576*1.0/(t68748*t68748*t68748)*(t68776*t68776)*2.0-ccaa3*gamma_aa[index]*gcaa* \
               t68670*t68582*t68576*t68777*(gamma_aa[index]*gcaa*t68628*(8.8E1/3.0)+t68622*t68670*t68576*(3.04E2/ \
               3.0)+gamma_aa[index]*gcaa*t68621*t68670*t68576*7.2E1)-ccaa3*gamma_aa[index]*gcaa*t68670*t68627*t68576* \
               t68776*t68777*1.6E1)+rho_a[index]*t68829*(-t68721-t68730+t68843+t68845+t68839+t68646*t68586*(t68721+ \
               t68730+t68842-t68843+t68844-t68845+t68837-t68839-t68830*t68672*t68718*t68648*2.0-a1f*c*c0f*t68661* \
               t68716*(8.0/9.0)))+rho_a[index]*t68767*t68788*2.0+c0*pow(rho_a[index],4.0/3.0)*(cx1*gamma_aa[index]* \
               gx*t68821*t68628*(8.8E1/9.0)-cx1*t68622*t68824*t68576*t68789*2.4E1+cx2*t68622*t68823*t68576*t68789* \
               (3.04E2/9.0)+cx4*t68820*t68790*t68639*t68578*(1.12E3/9.0)-cx2*t68625*t68576*t68819*t68789*t68799*(3.2E1/ \
               3.0)-cx4*t68634*t68816*t68790*t68793*t68578*(6.4E1/3.0)-cx2*t68583*t68576*t68819*t68789*(gamma_aa[index]* \
               gx*t68628*(1.76E2/9.0)+t68622*t68576*t68789*(3.04E2/9.0))-cx4*t68580*t68816*t68790*t68578*(gamma_aa[index]* \
               gx*t68628*(3.52E2/9.0)+t68622*t68576*t68789*(6.08E2/3.0)+t68790*t68639*t68578*(1.12E3/9.0)+gamma_aa[index]* \
               gx*t68621*t68576*t68789*2.88E2)+cx2*1.0/(t68802*t68802*t68802)*t68583*t68576*t68789*(t68799*t68799) \
               *2.0+cx4*t68580*t68790*(t68793*t68793)*t68578*1.0/(t68798*t68798*t68798)*2.0+cx3*gamma_aa[index]*gx* \
               t68621*t68822*t68576*t68789*7.2E1+cx1*gamma_aa[index]*gx*t68621*t68576*1.0/(t68792*t68792*t68792)* \
               t68789*(1.28E2/9.0)+cx3*gamma_aa[index]*gx*(t68811*t68811)*1.0/(t68806*t68806*t68806)*t68582*t68576* \
               t68789*2.0-cx3*gamma_aa[index]*gx*t68582*t68807*t68576*t68789*(gamma_aa[index]*gx*t68628*(8.8E1/3.0) \
               +t68622*t68576*t68789*(3.04E2/3.0)+gamma_aa[index]*gx*t68621*t68576*t68789*7.2E1)-cx3*gamma_aa[index]* \
               gx*t68811*t68627*t68807*t68576*t68789*1.6E1)+c0*t68591*(cx0+cx1*gamma_aa[index]*gx*t68821*t68581+cx2* \
               t68823*t68583*t68576*t68789+cx4*t68820*t68580*t68790*t68578+cx3*gamma_aa[index]*gx*t68822*t68582*t68576* \
               t68789)*(4.0/9.0);
        } else {
            v_rho_a_rho_a_[index] = 0.0;
        } 
        
        if (is_gga_) {
        
            //V_rho_a_gamma_aa
            if (rho_a[index] > cutoff_) {
                double t68847 = 1.0/pow(rho_a[index],1.0/3.0);
                double t68848 = c*t68847;
                double t68849 = sqrt(t68848);
                double t68850 = pow(t68848,3.0/2.0);
                double t68851 = c*c;
                double t68852 = 1.0/pow(rho_a[index],2.0/3.0);
                double t68853 = 1.0/c0p;
                double t68854 = b1p*t68849;
                double t68855 = b3p*t68850;
                double t68856 = b4p*t68851*t68852;
                double t68857 = b2p*c*t68847;
                double t68858 = t68854+t68855+t68856+t68857;
                double t68859 = 1.0/t68858;
                double t68860 = t68853*t68859*(1.0/2.0);
                double t68861 = t68860+1.0;
                double t68862 = log(t68861);
                double t68863 = a1p*c*t68847;
                double t68864 = t68863+1.0;
                double t68865 = 1.0/pow(rho_a[index],8.0/3.0);
                double t68866 = gamma_aa[index]*gamma_aa[index];
                double t68867 = gcaa*gcaa;
                double t68868 = t68867*t68867;
                double t68869 = 1.0/pow(rho_a[index],3.2E1/3.0);
                double t68870 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t68871 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t68872 = gamma_aa[index]*gcaa*t68865;
                double t68873 = t68872+1.0;
                double t68874 = gamma_aa[index]*gcaa*t68865*3.0;
                double t68875 = gamma_aa[index]*gcaa*t68871*t68866*t68867;
                double t68876 = t68870*t68866*t68867*3.0;
                double t68877 = t68874+t68875+t68876+1.0;
                double t68878 = t68866*t68866;
                double t68879 = gamma_aa[index]*gcaa*t68865*4.0;
                double t68880 = gamma_aa[index]*gcaa*t68871*t68866*t68867*4.0;
                double t68881 = t68870*t68866*t68867*6.0;
                double t68882 = t68868*t68869*t68878;
                double t68883 = t68880+t68881+t68882+t68879+1.0;
                double t68884 = gamma_aa[index]*gcaa*t68865*2.0;
                double t68885 = t68870*t68866*t68867;
                double t68886 = t68884+t68885+1.0;
                double t68887 = pow(2.0,1.0/3.0);
                double t68888 = t68887*2.0;
                double t68889 = t68888-2.0;
                double t68890 = two_13*2.0;
                double t68891 = t68890-2.0;
                double t68892 = 1.0/t68891;
                double t68893 = 1.0/c0f;
                double t68894 = b1f*t68849;
                double t68895 = b3f*t68850;
                double t68896 = b4f*t68851*t68852;
                double t68897 = b2f*c*t68847;
                double t68898 = t68894+t68895+t68896+t68897;
                double t68899 = 1.0/t68898;
                double t68900 = t68893*t68899*(1.0/2.0);
                double t68901 = t68900+1.0;
                double t68902 = log(t68901);
                double t68903 = a1f*c*t68847;
                double t68904 = t68903+1.0;
                double t68905 = c0f*t68902*t68904*2.0;
                double t68906 = c0p*t68862*t68864*2.0;
                double t68907 = rho_a[index]*2.0;
                double t68908 = 1.0/pow(t68907,1.0/3.0);
                double t68909 = c*t68908;
                double t68910 = gcab*gcab;
                double t68911 = t68910*t68910;
                double t68912 = 1.0/pow(rho_a[index],1.9E1/3.0);
                double t68913 = 1.0/pow(rho_a[index],3.5E1/3.0);
                double t68914 = gamma_aa[index]*gcab*t68865*2.0;
                double t68915 = t68910*t68870*t68866;
                double t68916 = t68914+t68915+1.0;
                double t68917 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]*rho_a[index]);
                double t68918 = gamma_aa[index]*gcab*t68865;
                double t68919 = t68918+1.0;
                double t68920 = gamma_aa[index]*gcab*t68865*3.0;
                double t68921 = gamma_aa[index]*gcab*t68910*t68871*t68866;
                double t68922 = t68910*t68870*t68866*3.0;
                double t68923 = t68920+t68921+t68922+1.0;
                double t68924 = gamma_aa[index]*gcab*t68865*4.0;
                double t68925 = gamma_aa[index]*gcab*t68910*t68871*t68866*4.0;
                double t68926 = t68910*t68870*t68866*6.0;
                double t68927 = t68911*t68869*t68878;
                double t68928 = t68924+t68925+t68926+t68927+1.0;
                double t68929 = 1.0/pow(rho_a[index],1.1E1/3.0);
                double t68930 = 1.0/(t68916*t68916);
                double t68931 = 1.0/(t68923*t68923);
                double t68932 = 1.0/(t68928*t68928);
                double t68933 = gamma_aa[index]*gcab*t68929*(8.0/3.0);
                double t68934 = t68910*t68912*t68866*(8.0/3.0);
                double t68935 = t68933+t68934;
                double t68936 = gcab*t68865;
                double t68937 = gamma_aa[index]*t68910*t68870;
                double t68938 = t68936+t68937;
                double t68939 = gcab*t68865*(3.0/2.0);
                double t68940 = gamma_aa[index]*t68910*t68870*3.0;
                double t68941 = gcab*t68910*t68871*t68866*(3.0/2.0);
                double t68942 = t68940+t68941+t68939;
                double t68943 = gamma_aa[index]*gcab*t68929*4.0;
                double t68944 = gamma_aa[index]*gcab*t68910*t68917*t68866*4.0;
                double t68945 = t68910*t68912*t68866*8.0;
                double t68946 = t68943+t68944+t68945;
                double t68947 = gamma_aa[index]*gcab*t68929*(1.6E1/3.0);
                double t68948 = gamma_aa[index]*gcab*t68910*t68917*t68866*1.6E1;
                double t68949 = t68910*t68912*t68866*1.6E1;
                double t68950 = t68911*t68913*t68878*(1.6E1/3.0);
                double t68951 = t68950+t68947+t68948+t68949;
                double t68952 = gcab*t68865*2.0;
                double t68953 = gamma_aa[index]*t68910*t68870*6.0;
                double t68954 = gcab*t68910*t68871*t68866*6.0;
                double t68955 = gamma_aa[index]*t68911*t68866*t68869*2.0;
                double t68956 = t68952+t68953+t68954+t68955;
                double t68957 = t68905-t68906;
                double t68958 = t68892*t68957*t68889;
                double t68959 = t68906+t68958;
                double t68960 = rho_a[index]*t68959*2.0;
                double t68961 = sqrt(t68909);
                double t68962 = b1p*t68961;
                double t68963 = pow(t68909,3.0/2.0);
                double t68964 = b3p*t68963;
                double t68965 = b2p*c*t68908;
                double t68966 = 1.0/pow(t68907,2.0/3.0);
                double t68967 = b4p*t68851*t68966;
                double t68968 = t68962+t68964+t68965+t68967;
                double t68969 = 1.0/t68968;
                double t68970 = t68853*t68969*(1.0/2.0);
                double t68971 = t68970+1.0;
                double t68972 = log(t68971);
                double t68973 = a1p*c*t68908;
                double t68974 = t68973+1.0;
                double t68975 = t68960-c0p*rho_a[index]*t68972*t68974*4.0;
                double t68976 = 1.0/t68928;
                double t68977 = 1.0/t68916;
                double t68978 = 1.0/t68923;
                double t68979 = 1.0/(t68919*t68919);
                double t68980 = 1.0/(t68919*t68919*t68919);
                double t68981 = ccab3*gcab*t68910*t68931*t68871*t68946*t68866*(3.0/2.0);
                double t68982 = ccab2*gamma_aa[index]*t68910*t68930*t68870*t68935;
                double t68983 = ccab3*gamma_aa[index]*gcab*t68910*t68931*t68942*t68917*t68866*4.0;
                double t68984 = ccab4*gamma_aa[index]*t68911*t68932*t68951*t68866*t68869*2.0;
                double t68985 = ccab4*t68911*t68913*t68932*t68956*t68878*(1.6E1/3.0);
                double t68986 = ccab2*t68910*t68912*t68930*t68866*t68938*(8.0/3.0);
                double t68987 = gamma_aa[index]*t68910*t68912*4.0;
                double t68988 = 1.0/(t68916*t68916*t68916);
                double t68989 = 1.0/(t68923*t68923*t68923);
                double t68990 = 1.0/(t68928*t68928*t68928);
                double t68991 = 1.0/pow(t68907,4.0/3.0);
                double t68992 = 1.0/pow(rho_a[index],4.0/3.0);
                double t68993 = 1.0/pow(rho_a[index],5.0/3.0);
                double t68994 = 1.0/sqrt(t68848);
                double t68995 = 1.0/t68861;
                double t68996 = 1.0/(t68858*t68858);
                double t68997 = b4p*t68851*t68993*(2.0/3.0);
                double t68998 = b2p*c*t68992*(1.0/3.0);
                double t68999 = b1p*c*t68992*t68994*(1.0/6.0);
                double t69000 = b3p*c*t68992*t68849*(1.0/2.0);
                double t69001 = t68997+t68998+t68999+t69000;
                double t69002 = t68864*t68995*t68996*t69001;
                double t69003 = 1.0/t68919;
                double t69004 = gx*gx;
                double t69005 = t69004*t69004;
                double t69006 = gamma_aa[index]*gx*t68865;
                double t69007 = t69006+1.0;
                double t69008 = gamma_aa[index]*gx*t68865*3.0;
                double t69009 = gamma_aa[index]*gx*t68871*t68866*t69004;
                double t69010 = t68870*t68866*t69004*3.0;
                double t69011 = t69010+t69008+t69009+1.0;
                double t69012 = gamma_aa[index]*gx*t68865*4.0;
                double t69013 = gamma_aa[index]*gx*t68871*t68866*t69004*4.0;
                double t69014 = t68870*t68866*t69004*6.0;
                double t69015 = t68869*t68878*t69005;
                double t69016 = t69012+t69013+t69014+t69015+1.0;
                double t69017 = gamma_aa[index]*gx*t68865*2.0;
                double t69018 = t68870*t68866*t69004;
                double t69019 = t69017+t69018+1.0;
                double t69020 = 1.0/t68873;
                double t69021 = 1.0/t68883;
                double t69022 = 1.0/t68886;
                double t69023 = 1.0/t68877;
                double t69024 = 1.0/(t68873*t68873);
                double t69025 = 1.0/(t68877*t68877);
                double t69026 = 1.0/(t68886*t68886);
                double t69027 = gcaa*t68865*3.0;
                double t69028 = gamma_aa[index]*t68870*t68867*6.0;
                double t69029 = gcaa*t68871*t68866*t68867*3.0;
                double t69030 = t69027+t69028+t69029;
                double t69031 = 1.0/(t68883*t68883);
                double t69032 = gcaa*t68865*4.0;
                double t69033 = gamma_aa[index]*t68870*t68867*1.2E1;
                double t69034 = gcaa*t68871*t68866*t68867*1.2E1;
                double t69035 = gamma_aa[index]*t68866*t68868*t68869*4.0;
                double t69036 = t69032+t69033+t69034+t69035;
                double t69037 = gcaa*t68865*2.0;
                double t69038 = gamma_aa[index]*t68870*t68867*2.0;
                double t69039 = t69037+t69038;
                double t69040 = gamma_aa[index]*gcaa*t68929*(1.6E1/3.0);
                double t69041 = t68912*t68866*t68867*(1.6E1/3.0);
                double t69042 = t69040+t69041;
                double t69043 = gamma_aa[index]*gcaa*t68929*8.0;
                double t69044 = gamma_aa[index]*gcaa*t68917*t68866*t68867*8.0;
                double t69045 = t68912*t68866*t68867*1.6E1;
                double t69046 = t69043+t69044+t69045;
                double t69047 = gamma_aa[index]*gcaa*t68929*(3.2E1/3.0);
                double t69048 = gamma_aa[index]*gcaa*t68917*t68866*t68867*3.2E1;
                double t69049 = t68912*t68866*t68867*3.2E1;
                double t69050 = t68913*t68868*t68878*(3.2E1/3.0);
                double t69051 = t69050+t69047+t69048+t69049;
                double t69052 = 1.0/t68901;
                double t69053 = 1.0/(t68898*t68898);
                double t69054 = b4f*t68851*t68993*(2.0/3.0);
                double t69055 = b2f*c*t68992*(1.0/3.0);
                double t69056 = b1f*c*t68992*t68994*(1.0/6.0);
                double t69057 = b3f*c*t68992*t68849*(1.0/2.0);
                double t69058 = t69054+t69055+t69056+t69057;
                double t69059 = a1f*c*c0f*t68902*t68992*(2.0/3.0);
                double t69060 = a1p*c*c0p*t68862*t68992*(2.0/3.0);
                double t69061 = ccaa1*gcaa*t68865*t69020;
                double t69062 = ccaa4*gamma_aa[index]*t68866*t68868*t68869*t69021*4.0;
                double t69063 = ccaa2*gamma_aa[index]*t68870*t68867*t69022*2.0;
                double t69064 = ccaa3*gcaa*t68871*t68866*t68867*t69023*3.0;
                double t69065 = t69061+t69062+t69063+t69064-ccaa1*gamma_aa[index]*t68870*t68867*t69024-ccaa2*t68870* \
                   t68866*t68867*t69026*t69039-ccaa4*t68868*t68869*t68878*t69031*t69036-ccaa3*gamma_aa[index]*gcaa*t68871* \
                   t68866*t68867*t69030*t69025;
                double t69066 = 1.0/t69007;
                double t69067 = 1.0/t69016;
                double t69068 = 1.0/t69019;
                double t69069 = 1.0/t69011;
                double t69070 = 1.0/(t69007*t69007);
                double t69071 = 1.0/(t69011*t69011);
                double t69072 = 1.0/(t69019*t69019);
                double t69073 = gx*t68865*3.0;
                double t69074 = gamma_aa[index]*t68870*t69004*6.0;
                double t69075 = gx*t68871*t68866*t69004*3.0;
                double t69076 = t69073+t69074+t69075;
                double t69077 = 1.0/(t69016*t69016);
                double t69078 = gx*t68865*4.0;
                double t69079 = gamma_aa[index]*t68870*t69004*1.2E1;
                double t69080 = gx*t68871*t68866*t69004*1.2E1;
                double t69081 = gamma_aa[index]*t68866*t68869*t69005*4.0;
                double t69082 = t69080+t69081+t69078+t69079;
                double t69083 = gx*t68865*2.0;
                double t69084 = gamma_aa[index]*t68870*t69004*2.0;
                double t69085 = t69083+t69084;
                double t69086 = gamma_aa[index]*gx*t68929*(1.6E1/3.0);
                double t69087 = t68912*t68866*t69004*(1.6E1/3.0);
                double t69088 = t69086+t69087;
                double t69089 = gamma_aa[index]*gx*t68929*8.0;
                double t69090 = gamma_aa[index]*gx*t68917*t68866*t69004*8.0;
                double t69091 = t68912*t68866*t69004*1.6E1;
                double t69092 = t69090+t69091+t69089;
                double t69093 = gamma_aa[index]*gx*t68929*(3.2E1/3.0);
                double t69094 = gamma_aa[index]*gx*t68917*t68866*t69004*3.2E1;
                double t69095 = t68912*t68866*t69004*3.2E1;
                double t69096 = t68913*t68878*t69005*(3.2E1/3.0);
                double t69097 = t69093+t69094+t69095+t69096;
                v_rho_a_gamma_aa_[index] = t68975*(t68981+t68982+t68983+t68984+t68985+t68986-ccab2*gamma_aa[index]* \
                   t68910*t68912*t68977*(4.0/3.0)+ccab1*gamma_aa[index]*t68910*t68912*t68979*(4.0/3.0)+ccab4*t68911*t68932* \
                   t68869*t68878*(gamma_aa[index]*t68910*t68912*8.0+gamma_aa[index]*t68911*t68913*t68866*8.0+gcab*t68910* \
                   t68917*t68866*1.6E1)+ccab2*gamma_aa[index]*t68911*t68930*t68913*t68866*(4.0/3.0)-ccab4*gamma_aa[index]* \
                   t68911*t68913*t68866*t68976*8.0-ccab1*gcab*t68910*t68917*t68980*t68866*(4.0/3.0)-ccab3*gcab*t68910* \
                   t68917*t68866*t68978*4.0-ccab2*t68910*t68870*t68935*t68866*t68938*t68988*2.0-ccab4*t68911*t68951*t68990* \
                   t68956*t68869*t68878*2.0+ccab3*gamma_aa[index]*gcab*t68910*t68931*t68871*t68866*(t68987+gcab*t68910* \
                   t68917*t68866*4.0)-ccab3*gamma_aa[index]*gcab*t68910*t68942*t68871*t68946*t68866*t68989*2.0)-t69065* \
                   (t68906+t68892*t68889*(t68905-c0p*t68862*t68864*2.0))-(-t68906-t68958+rho_a[index]*((t68974*1.0/(t68968* \
                   t68968)*(b4p*t68851*1.0/pow(t68907,5.0/3.0)*(2.0/3.0)+b2p*c*t68991*(1.0/3.0)+b3p*c*t68961*t68991*(1.0/ \
                   2.0)+b1p*c*1.0/sqrt(t68909)*t68991*(1.0/6.0)))/t68971-a1p*c*c0p*t68972*t68991*(2.0/3.0))*2.0+rho_a[index]* \
                   (-t69002+t69060+t68892*t68889*(t69002+t69059-t68904*t69052*t69053*t69058-a1p*c*c0p*t68862*t68992*(2.0/ \
                   3.0)))+c0p*t68972*t68974*2.0)*(ccab1*gcab*t68865*t69003*(1.0/2.0)+ccab2*gamma_aa[index]*t68910*t68870* \
                   t68977-ccab1*gamma_aa[index]*t68910*t68870*t68979*(1.0/2.0)-ccab2*t68910*t68930*t68870*t68866*t68938- \
                   ccab4*t68911*t68932*t68956*t68869*t68878+ccab4*gamma_aa[index]*t68911*t68866*t68976*t68869*2.0+ccab3* \
                   gcab*t68910*t68871*t68866*t68978*(3.0/2.0)-ccab3*gamma_aa[index]*gcab*t68910*t68931*t68942*t68871* \
                   t68866)*2.0+t68975*(t68981+t68982+t68983+t68984+t68985+t68986-ccab1*gcab*t68929*t69003*(4.0/3.0)-ccab2* \
                   gamma_aa[index]*t68910*t68912*t68977*4.0+ccab1*gamma_aa[index]*t68910*t68912*t68979*(8.0/3.0)+ccab4* \
                   t68911*t68932*t68869*t68878*(gcab*t68929*(1.6E1/3.0)+gamma_aa[index]*t68910*t68912*2.4E1+gamma_aa[index]* \
                   t68911*t68913*t68866*(4.0E1/3.0)+gcab*t68910*t68917*t68866*3.2E1)+ccab2*t68910*t68930*t68870*t68866* \
                   (t68987+gcab*t68929*(8.0/3.0))-ccab4*gamma_aa[index]*t68911*t68913*t68866*t68976*(4.0E1/3.0)-ccab1* \
                   gcab*t68910*t68917*t68980*t68866*(4.0/3.0)-ccab3*gcab*t68910*t68917*t68866*t68978*8.0-ccab2*t68910* \
                   t68870*t68935*t68866*t68938*t68988*2.0-ccab4*t68911*t68951*t68990*t68956*t68869*t68878*2.0+ccab3*gamma_aa[index]* \
                   gcab*t68910*t68931*t68871*t68866*(gcab*t68929*4.0+gamma_aa[index]*t68910*t68912*1.2E1+gcab*t68910* \
                   t68917*t68866*8.0)-ccab3*gamma_aa[index]*gcab*t68910*t68942*t68871*t68946*t68866*t68989*2.0)-rho_a[index]* \
                   t68959*(ccaa1*gcaa*t68929*t69020*(-8.0/3.0)-ccaa2*gamma_aa[index]*t68912*t68867*t69022*(3.2E1/3.0) \
                   +ccaa1*gamma_aa[index]*t68912*t68867*t69024*8.0+ccaa2*t68912*t68866*t68867*t69026*t69039*(1.6E1/3.0) \
                   +ccaa4*t68913*t68868*t68878*t69031*t69036*(3.2E1/3.0)+ccaa4*t68868*t68869*t68878*t69031*(gcaa*t68929* \
                   (3.2E1/3.0)+gamma_aa[index]*t68912*t68867*6.4E1+gamma_aa[index]*t68913*t68866*t68868*(1.28E2/3.0)+ \
                   gcaa*t68917*t68866*t68867*9.6E1)-ccaa1*gcaa*t68917*1.0/(t68873*t68873*t68873)*t68866*t68867*(1.6E1/ \
                   3.0)+ccaa2*t68870*t68866*t68867*t69026*(gcaa*t68929*(1.6E1/3.0)+gamma_aa[index]*t68912*t68867*(3.2E1/ \
                   3.0))-ccaa4*gamma_aa[index]*t68913*t68866*t68868*t69021*(1.28E2/3.0)+ccaa2*gamma_aa[index]*t68870* \
                   t68867*t69042*t69026*2.0-ccaa3*gcaa*t68917*t68866*t68867*t69023*2.4E1+ccaa4*gamma_aa[index]*t68866* \
                   t68868*t68869*t69031*t69051*4.0+ccaa3*gcaa*t68871*t68866*t68867*t69025*t69046*3.0-ccaa2*t68870*t68866* \
                   t68867*1.0/(t68886*t68886*t68886)*t69042*t69039*2.0-ccaa4*1.0/(t68883*t68883*t68883)*t68868*t68869* \
                   t68878*t69051*t69036*2.0+ccaa3*gamma_aa[index]*gcaa*t68871*t68866*t68867*t69025*(gcaa*t68929*8.0+gamma_aa[index]* \
                   t68912*t68867*3.2E1+gcaa*t68917*t68866*t68867*2.4E1)+ccaa3*gamma_aa[index]*gcaa*t68917*t68866*t68867* \
                   t69030*t69025*8.0-ccaa3*gamma_aa[index]*gcaa*t68871*t68866*t68867*1.0/(t68877*t68877*t68877)*t69030* \
                   t69046*2.0)+c0*pow(rho_a[index],4.0/3.0)*(cx1*gx*t68929*t69066*(-8.0/3.0)+cx1*gamma_aa[index]*t68912* \
                   t69004*t69070*8.0-cx2*gamma_aa[index]*t68912*t69004*t69068*(3.2E1/3.0)+cx2*t68912*t68866*t69004*t69072* \
                   t69085*(1.6E1/3.0)+cx4*t68913*t68878*t69005*t69082*t69077*(3.2E1/3.0)+cx4*t68869*t68878*t69005*t69077* \
                   (gx*t68929*(3.2E1/3.0)+gamma_aa[index]*t68912*t69004*6.4E1+gamma_aa[index]*t68913*t68866*t69005*(1.28E2/ \
                   3.0)+gx*t68917*t68866*t69004*9.6E1)-cx1*gx*t68917*t68866*t69004*1.0/(t69007*t69007*t69007)*(1.6E1/ \
                   3.0)+cx2*t68870*t68866*t69004*t69072*(gx*t68929*(1.6E1/3.0)+gamma_aa[index]*t68912*t69004*(3.2E1/3.0) \
                   )+cx2*gamma_aa[index]*t68870*t69004*t69072*t69088*2.0-cx4*gamma_aa[index]*t68913*t68866*t69005*t69067* \
                   (1.28E2/3.0)-cx3*gx*t68917*t68866*t69004*t69069*2.4E1+cx4*gamma_aa[index]*t68866*t68869*t69005*t69077* \
                   t69097*4.0+cx3*gx*t68871*t68866*t69004*t69071*t69092*3.0-cx2*t68870*t68866*t69004*1.0/(t69019*t69019* \
                   t69019)*t69085*t69088*2.0-cx4*t68869*t68878*t69005*1.0/(t69016*t69016*t69016)*t69082*t69097*2.0+cx3* \
                   gamma_aa[index]*gx*t68871*t68866*t69004*t69071*(gx*t68929*8.0+gamma_aa[index]*t68912*t69004*3.2E1+ \
                   gx*t68917*t68866*t69004*2.4E1)+cx3*gamma_aa[index]*gx*t68917*t68866*t69004*t69071*t69076*8.0-cx3*gamma_aa[index]* \
                   gx*t68871*t68866*1.0/(t69011*t69011*t69011)*t69004*t69092*t69076*2.0)+rho_a[index]*t69065*(-t69002+ \
                   t69060+t68892*t68889*(t69002-t69060+t69059-t68904*t69052*t69053*t69058))+c0*pow(rho_a[index],1.0/3.0) \
                   *(cx1*gx*t68865*t69066-cx1*gamma_aa[index]*t68870*t69004*t69070+cx2*gamma_aa[index]*t68870*t69004* \
                   t69068*2.0-cx2*t68870*t68866*t69004*t69072*t69085-cx4*t68869*t68878*t69005*t69082*t69077+cx4*gamma_aa[index]* \
                   t68866*t68869*t69005*t69067*4.0+cx3*gx*t68871*t68866*t69004*t69069*3.0-cx3*gamma_aa[index]*gx*t68871* \
                   t68866*t69004*t69071*t69076)*(4.0/3.0);
            } else {
                v_rho_a_gamma_aa_[index] = 0.0;
            } 
        
            //V_gamma_aa_gamma_aa
            if (rho_a[index] > cutoff_) {
                double t69099 = 1.0/pow(rho_a[index],1.0/3.0);
                double t69100 = c*t69099;
                double t69101 = sqrt(t69100);
                double t69102 = pow(t69100,3.0/2.0);
                double t69103 = c*c;
                double t69104 = 1.0/pow(rho_a[index],2.0/3.0);
                double t69105 = 1.0/c0p;
                double t69106 = b1p*t69101;
                double t69107 = b3p*t69102;
                double t69108 = b4p*t69103*t69104;
                double t69109 = b2p*c*t69099;
                double t69110 = t69106+t69107+t69108+t69109;
                double t69111 = 1.0/t69110;
                double t69112 = t69111*t69105*(1.0/2.0);
                double t69113 = t69112+1.0;
                double t69114 = log(t69113);
                double t69115 = a1p*c*t69099;
                double t69116 = t69115+1.0;
                double t69117 = rho_a[index]*2.0;
                double t69118 = 1.0/pow(t69117,1.0/3.0);
                double t69119 = c*t69118;
                double t69120 = gcab*gcab;
                double t69121 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t69122 = 1.0/pow(rho_a[index],8.0/3.0);
                double t69123 = gamma_aa[index]*gamma_aa[index];
                double t69124 = t69120*t69120;
                double t69125 = 1.0/pow(rho_a[index],3.2E1/3.0);
                double t69126 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t69127 = gamma_aa[index]*gcab*t69122;
                double t69128 = t69127+1.0;
                double t69129 = gamma_aa[index]*gcab*t69122*2.0;
                double t69130 = t69120*t69121*t69123;
                double t69131 = t69130+t69129+1.0;
                double t69132 = gamma_aa[index]*gcab*t69122*3.0;
                double t69133 = gamma_aa[index]*gcab*t69120*t69123*t69126;
                double t69134 = t69120*t69121*t69123*3.0;
                double t69135 = t69132+t69133+t69134+1.0;
                double t69136 = t69123*t69123;
                double t69152 = gcab*t69122*2.0;
                double t69153 = gamma_aa[index]*t69120*t69121*6.0;
                double t69154 = gcab*t69120*t69123*t69126*6.0;
                double t69155 = gamma_aa[index]*t69123*t69124*t69125*2.0;
                double t69137 = t69152+t69153+t69154+t69155;
                double t69138 = gamma_aa[index]*gcab*t69122*4.0;
                double t69139 = gamma_aa[index]*gcab*t69120*t69123*t69126*4.0;
                double t69140 = t69120*t69121*t69123*6.0;
                double t69141 = t69124*t69125*t69136;
                double t69142 = t69140+t69141+t69138+t69139+1.0;
                double t69145 = gcab*t69122;
                double t69146 = gamma_aa[index]*t69120*t69121;
                double t69143 = t69145+t69146;
                double t69144 = 1.0/(t69135*t69135);
                double t69147 = 1.0/(t69131*t69131);
                double t69148 = gcab*t69122*(3.0/2.0);
                double t69149 = gamma_aa[index]*t69120*t69121*3.0;
                double t69150 = gcab*t69120*t69123*t69126*(3.0/2.0);
                double t69151 = t69150+t69148+t69149;
                double t69156 = 1.0/(t69142*t69142);
                double t69157 = gx*gx;
                double t69158 = t69157*t69157;
                double t69159 = gamma_aa[index]*gx*t69122;
                double t69160 = t69159+1.0;
                double t69161 = gamma_aa[index]*gx*t69122*2.0;
                double t69162 = t69121*t69123*t69157;
                double t69163 = t69161+t69162+1.0;
                double t69164 = gamma_aa[index]*gx*t69122*3.0;
                double t69165 = gamma_aa[index]*gx*t69123*t69126*t69157;
                double t69166 = t69121*t69123*t69157*3.0;
                double t69167 = t69164+t69165+t69166+1.0;
                double t69183 = gx*t69122*4.0;
                double t69184 = gamma_aa[index]*t69121*t69157*1.2E1;
                double t69185 = gx*t69123*t69126*t69157*1.2E1;
                double t69186 = gamma_aa[index]*t69123*t69125*t69158*4.0;
                double t69168 = t69183+t69184+t69185+t69186;
                double t69169 = gamma_aa[index]*gx*t69122*4.0;
                double t69170 = gamma_aa[index]*gx*t69123*t69126*t69157*4.0;
                double t69171 = t69121*t69123*t69157*6.0;
                double t69172 = t69125*t69136*t69158;
                double t69173 = t69170+t69171+t69172+t69169+1.0;
                double t69176 = gx*t69122*2.0;
                double t69177 = gamma_aa[index]*t69121*t69157*2.0;
                double t69174 = t69176+t69177;
                double t69175 = 1.0/(t69167*t69167);
                double t69178 = 1.0/(t69163*t69163);
                double t69179 = gx*t69122*3.0;
                double t69180 = gamma_aa[index]*t69121*t69157*6.0;
                double t69181 = gx*t69123*t69126*t69157*3.0;
                double t69182 = t69180+t69181+t69179;
                double t69187 = 1.0/(t69173*t69173);
                double t69188 = pow(2.0,1.0/3.0);
                double t69189 = t69188*2.0;
                double t69190 = t69189-2.0;
                double t69191 = two_13*2.0;
                double t69192 = t69191-2.0;
                double t69193 = 1.0/t69192;
                double t69194 = 1.0/c0f;
                double t69195 = b1f*t69101;
                double t69196 = b3f*t69102;
                double t69197 = b4f*t69103*t69104;
                double t69198 = b2f*c*t69099;
                double t69199 = t69195+t69196+t69197+t69198;
                double t69200 = 1.0/t69199;
                double t69201 = t69200*t69194*(1.0/2.0);
                double t69202 = t69201+1.0;
                double t69203 = log(t69202);
                double t69204 = a1f*c*t69099;
                double t69205 = t69204+1.0;
                double t69206 = c0f*t69203*t69205*2.0;
                double t69207 = c0p*t69114*t69116*2.0;
                double t69208 = gcaa*gcaa;
                double t69209 = t69208*t69208;
                double t69210 = gamma_aa[index]*gcaa*t69122;
                double t69211 = t69210+1.0;
                double t69212 = gamma_aa[index]*gcaa*t69122*2.0;
                double t69213 = t69121*t69123*t69208;
                double t69214 = t69212+t69213+1.0;
                double t69215 = gamma_aa[index]*gcaa*t69122*3.0;
                double t69216 = gamma_aa[index]*gcaa*t69123*t69126*t69208;
                double t69217 = t69121*t69123*t69208*3.0;
                double t69218 = t69215+t69216+t69217+1.0;
                double t69234 = gcaa*t69122*4.0;
                double t69235 = gamma_aa[index]*t69121*t69208*1.2E1;
                double t69236 = gcaa*t69123*t69126*t69208*1.2E1;
                double t69237 = gamma_aa[index]*t69123*t69125*t69209*4.0;
                double t69219 = t69234+t69235+t69236+t69237;
                double t69220 = gamma_aa[index]*gcaa*t69122*4.0;
                double t69221 = gamma_aa[index]*gcaa*t69123*t69126*t69208*4.0;
                double t69222 = t69121*t69123*t69208*6.0;
                double t69223 = t69125*t69136*t69209;
                double t69224 = t69220+t69221+t69222+t69223+1.0;
                double t69227 = gcaa*t69122*2.0;
                double t69228 = gamma_aa[index]*t69121*t69208*2.0;
                double t69225 = t69227+t69228;
                double t69226 = 1.0/(t69218*t69218);
                double t69229 = 1.0/(t69214*t69214);
                double t69230 = gcaa*t69122*3.0;
                double t69231 = gamma_aa[index]*t69121*t69208*6.0;
                double t69232 = gcaa*t69123*t69126*t69208*3.0;
                double t69233 = t69230+t69231+t69232;
                double t69238 = 1.0/(t69224*t69224);
                v_gamma_aa_gamma_aa_[index] = (rho_a[index]*(t69207+t69190*t69193*(t69206-c0p*t69114*t69116*2.0)) \
                   *2.0-c0p*rho_a[index]*log((t69105*(1.0/2.0))/(b1p*sqrt(t69119)+b3p*pow(t69119,3.0/2.0)+b4p*t69103* \
                   1.0/pow(t69117,2.0/3.0)+b2p*c*t69118)+1.0)*(a1p*c*t69118+1.0)*4.0)*((ccab2*t69120*t69121*(1.0/2.0) \
                   )/t69131-ccab1*t69120*t69121*1.0/(t69128*t69128)*(1.0/2.0)-ccab2*t69123*t69124*t69125*t69147*(1.0/ \
                   2.0)+(ccab4*t69123*t69124*t69125*3.0)/t69142-ccab4*t69124*t69125*t69136*t69156*(t69120*t69121*3.0+ \
                   t69123*t69124*t69125*3.0+gamma_aa[index]*gcab*t69120*t69126*6.0)+(ccab3*gamma_aa[index]*gcab*t69120* \
                   t69126*(3.0/2.0))/t69135+ccab1*gamma_aa[index]*gcab*t69120*t69126*1.0/(t69128*t69128*t69128)*(1.0/ \
                   2.0)+ccab2*t69120*t69121*1.0/(t69131*t69131*t69131)*t69123*(t69143*t69143)*2.0+ccab4*t69124*1.0/(t69142* \
                   t69142*t69142)*t69125*t69136*(t69137*t69137)*2.0-ccab2*gamma_aa[index]*t69120*t69121*t69143*t69147* \
                   2.0-ccab4*gamma_aa[index]*t69123*t69124*t69125*t69137*t69156*4.0-ccab3*gcab*t69120*t69123*t69151*t69126* \
                   t69144*3.0-ccab3*gamma_aa[index]*gcab*t69120*t69123*t69126*t69144*(t69120*t69121*(3.0/2.0)+gamma_aa[index]* \
                   gcab*t69120*t69126*(3.0/2.0))+ccab3*gamma_aa[index]*gcab*t69120*t69123*(t69151*t69151)*t69126*1.0/ \
                   (t69135*t69135*t69135)*2.0)*4.0+rho_a[index]*(t69207+t69190*t69193*(t69206-t69207))*(ccaa1*t69121* \
                   1.0/(t69211*t69211)*t69208*2.0-(ccaa2*t69121*t69208*2.0)/t69214+ccaa2*t69123*t69125*t69209*t69229* \
                   2.0-(ccaa4*t69123*t69125*t69209*1.2E1)/t69224+ccaa4*t69125*t69136*t69209*t69238*(t69121*t69208*1.2E1+ \
                   t69123*t69125*t69209*1.2E1+gamma_aa[index]*gcaa*t69126*t69208*2.4E1)-ccaa1*gamma_aa[index]*gcaa*1.0/ \
                   (t69211*t69211*t69211)*t69126*t69208*2.0-(ccaa3*gamma_aa[index]*gcaa*t69126*t69208*6.0)/t69218-ccaa2* \
                   t69121*t69123*1.0/(t69214*t69214*t69214)*(t69225*t69225)*t69208*2.0-ccaa4*t69125*1.0/(t69224*t69224* \
                   t69224)*t69136*t69209*(t69219*t69219)*2.0+ccaa2*gamma_aa[index]*t69121*t69225*t69208*t69229*4.0+ccaa4* \
                   gamma_aa[index]*t69123*t69125*t69209*t69219*t69238*8.0+ccaa3*gcaa*t69123*t69233*t69126*t69208*t69226* \
                   6.0+ccaa3*gamma_aa[index]*gcaa*t69123*t69126*t69208*t69226*(t69121*t69208*6.0+gamma_aa[index]*gcaa* \
                   t69126*t69208*6.0)-ccaa3*gamma_aa[index]*gcaa*t69123*(t69233*t69233)*t69126*t69208*1.0/(t69218*t69218* \
                   t69218)*2.0)*2.0-c0*pow(rho_a[index],4.0/3.0)*(cx1*t69121*1.0/(t69160*t69160)*t69157*2.0-(cx2*t69121* \
                   t69157*2.0)/t69163+cx2*t69123*t69125*t69158*t69178*2.0-(cx4*t69123*t69125*t69158*1.2E1)/t69173+cx4* \
                   t69125*t69136*t69158*t69187*(t69121*t69157*1.2E1+t69123*t69125*t69158*1.2E1+gamma_aa[index]*gx*t69126* \
                   t69157*2.4E1)-cx1*gamma_aa[index]*gx*1.0/(t69160*t69160*t69160)*t69126*t69157*2.0-(cx3*gamma_aa[index]* \
                   gx*t69126*t69157*6.0)/t69167-cx2*t69121*t69123*1.0/(t69163*t69163*t69163)*(t69174*t69174)*t69157*2.0- \
                   cx4*t69125*t69136*1.0/(t69173*t69173*t69173)*t69158*(t69168*t69168)*2.0+cx2*gamma_aa[index]*t69121* \
                   t69174*t69157*t69178*4.0+cx4*gamma_aa[index]*t69123*t69125*t69158*t69168*t69187*8.0+cx3*gx*t69123* \
                   t69126*t69182*t69157*t69175*6.0+cx3*gamma_aa[index]*gx*t69123*t69126*t69157*t69175*(t69121*t69157* \
                   6.0+gamma_aa[index]*gx*t69126*t69157*6.0)-cx3*gamma_aa[index]*gx*t69123*t69126*(t69182*t69182)*t69157* \
                   1.0/(t69167*t69167*t69167)*2.0)*2.0;
            } else {
                v_gamma_aa_gamma_aa_[index] = 0.0;
            } 
        
        }
        if (is_meta_) {
        
            //V_rho_a_tau_a
            if (rho_a[index] > cutoff_) {
                v_rho_a_tau_a_[index] = 0.0;
            } else {
                v_rho_a_tau_a_[index] = 0.0;
            } 
        
            //V_tau_a_tau_a
            if (rho_a[index] > cutoff_) {
                v_tau_a_tau_a_[index] = 0.0;
            } else {
                v_tau_a_tau_a_[index] = 0.0;
            } 
       
            if (is_gga_) {
        
                //V_gamma_aa_tau_a
                if (rho_a[index] > cutoff_) {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } else {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } 
       
            }
        }
    }
}
void HCTH120_Functional::computeUKSFunctional(boost::shared_ptr<UKSFunctions> prop)
{
    int ntrue = prop->npoints();

    const double* restrict rho_a;
    const double* restrict rho_b;
    const double* restrict gamma_aa;
    const double* restrict gamma_ab;
    const double* restrict gamma_bb;
    const double* restrict tau_a;
    const double* restrict tau_b;

    rho_a = prop->property_value("RHO_A")->pointer();
    rho_b = prop->property_value("RHO_B")->pointer();
    if (is_gga_) {
        gamma_aa = prop->property_value("GAMMA_AA")->pointer();
        gamma_ab = prop->property_value("GAMMA_AB")->pointer();
        gamma_bb = prop->property_value("GAMMA_BB")->pointer();
    }
    if (is_meta_) {
        tau_a = prop->property_value("TAU_A")->pointer();
        tau_b = prop->property_value("TAU_B")->pointer();
    }

    double c0 = params_[0].second;
    double two_13 = params_[1].second;
    double d2fz0 = params_[2].second;
    double c = params_[3].second;
    double Aa = params_[4].second;
    double a1a = params_[5].second;
    double b1a = params_[6].second;
    double b2a = params_[7].second;
    double b3a = params_[8].second;
    double b4a = params_[9].second;
    double c0p = params_[10].second;
    double a1p = params_[11].second;
    double b1p = params_[12].second;
    double b2p = params_[13].second;
    double b3p = params_[14].second;
    double b4p = params_[15].second;
    double c0f = params_[16].second;
    double a1f = params_[17].second;
    double b1f = params_[18].second;
    double b2f = params_[19].second;
    double b3f = params_[20].second;
    double b4f = params_[21].second;
    double gcab = params_[22].second;
    double gcaa = params_[23].second;
    double gx = params_[24].second;
    double ccab0 = params_[25].second;
    double ccab1 = params_[26].second;
    double ccab2 = params_[27].second;
    double ccab3 = params_[28].second;
    double ccab4 = params_[29].second;
    double ccaa0 = params_[30].second;
    double ccaa1 = params_[31].second;
    double ccaa2 = params_[32].second;
    double ccaa3 = params_[33].second;
    double ccaa4 = params_[34].second;
    double cx0 = params_[35].second;
    double cx1 = params_[36].second;
    double cx2 = params_[37].second;
    double cx3 = params_[38].second;
    double cx4 = params_[39].second;
    
    //Functional
    for (int index = 0; index < ntrue; index++) {

        //Functional Value
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t63413 = 1.0/pow(rho_a[index],1.0/3.0);
            double t63414 = c*t63413;
            double t63415 = sqrt(t63414);
            double t63416 = pow(t63414,3.0/2.0);
            double t63417 = c*c;
            double t63418 = 1.0/pow(rho_a[index],2.0/3.0);
            double t63419 = 1.0/c0p;
            double t63420 = b1p*t63415;
            double t63421 = b3p*t63416;
            double t63422 = b4p*t63417*t63418;
            double t63423 = b2p*c*t63413;
            double t63424 = t63420+t63421+t63422+t63423;
            double t63425 = 1.0/t63424;
            double t63426 = t63425*t63419*(1.0/2.0);
            double t63427 = t63426+1.0;
            double t63428 = log(t63427);
            double t63429 = a1p*c*t63413;
            double t63430 = t63429+1.0;
            double t63431 = pow(2.0,1.0/3.0);
            double t63432 = t63431*2.0;
            double t63433 = t63432-2.0;
            double t63434 = two_13*2.0;
            double t63435 = t63434-2.0;
            double t63436 = 1.0/t63435;
            double t63437 = 1.0/c0f;
            double t63438 = 1.0/pow(rho_b[index],1.0/3.0);
            double t63439 = c*t63438;
            double t63440 = sqrt(t63439);
            double t63441 = pow(t63439,3.0/2.0);
            double t63442 = 1.0/pow(rho_b[index],2.0/3.0);
            double t63443 = b1p*t63440;
            double t63444 = b3p*t63441;
            double t63445 = b4p*t63442*t63417;
            double t63446 = b2p*c*t63438;
            double t63447 = t63443+t63444+t63445+t63446;
            double t63448 = 1.0/t63447;
            double t63449 = t63419*t63448*(1.0/2.0);
            double t63450 = t63449+1.0;
            double t63451 = log(t63450);
            double t63452 = a1p*c*t63438;
            double t63453 = t63452+1.0;
            double t63454 = c0p*t63451*t63453*2.0;
            double t63455 = rho_a[index]+rho_b[index];
            double t63456 = 1.0/pow(t63455,1.0/3.0);
            double t63457 = c*t63456;
            double t63458 = sqrt(t63457);
            double t63459 = pow(t63457,3.0/2.0);
            double t63460 = 1.0/pow(t63455,2.0/3.0);
            double t63461 = b1p*t63458;
            double t63462 = b3p*t63459;
            double t63463 = b4p*t63460*t63417;
            double t63464 = b2p*c*t63456;
            double t63465 = t63461+t63462+t63463+t63464;
            double t63466 = 1.0/t63465;
            double t63467 = t63419*t63466*(1.0/2.0);
            double t63468 = t63467+1.0;
            double t63469 = log(t63468);
            double t63470 = a1p*c*t63456;
            double t63471 = t63470+1.0;
            double t63472 = c0p*t63471*t63469*2.0;
            double t63473 = rho_a[index]-rho_b[index];
            double t63474 = t63473*t63473;
            double t63475 = 1.0/t63455;
            double t63476 = t63473*t63475;
            double t63477 = 1.0/(t63455*t63455*t63455*t63455);
            double t63478 = t63474*t63474;
            double t63479 = t63476+1.0;
            double t63480 = pow(t63479,4.0/3.0);
            double t63481 = -t63476+1.0;
            double t63482 = pow(t63481,4.0/3.0);
            double t63483 = t63480+t63482-2.0;
            double t63486 = 1.0/pow(rho_a[index],8.0/3.0);
            double t63487 = gamma_aa[index]*t63486*(1.0/2.0);
            double t63488 = 1.0/pow(rho_b[index],8.0/3.0);
            double t63489 = gamma_bb[index]*t63488*(1.0/2.0);
            double t63484 = t63487+t63489;
            double t63485 = gcab*gcab;
            double t63490 = t63484*t63484;
            double t63491 = t63485*t63485;
            double t63492 = t63490*t63490;
            double t63493 = c0p*t63430*t63428*2.0;
            double t63494 = b1f*t63415;
            double t63495 = b3f*t63416;
            double t63496 = b4f*t63417*t63418;
            double t63497 = b2f*c*t63413;
            double t63498 = t63494+t63495+t63496+t63497;
            double t63499 = 1.0/t63498;
            double t63500 = t63437*t63499*(1.0/2.0);
            double t63501 = t63500+1.0;
            double t63502 = log(t63501);
            double t63503 = a1f*c*t63413;
            double t63504 = t63503+1.0;
            double t63505 = t63493-c0f*t63502*t63504*2.0;
            double t63506 = t63493-t63433*t63505*t63436;
            double t63507 = gamma_aa[index]*gamma_aa[index];
            double t63508 = gcaa*gcaa;
            double t63509 = t63507*t63507;
            double t63510 = t63508*t63508;
            double t63511 = 1.0/pow(rho_a[index],3.2E1/3.0);
            double t63512 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]);
            double t63513 = 1.0/pow(rho_a[index],1.6E1/3.0);
            double t63514 = b1f*t63440;
            double t63515 = b3f*t63441;
            double t63516 = b4f*t63442*t63417;
            double t63517 = b2f*c*t63438;
            double t63518 = t63514+t63515+t63516+t63517;
            double t63519 = 1.0/t63518;
            double t63520 = t63437*t63519*(1.0/2.0);
            double t63521 = t63520+1.0;
            double t63522 = log(t63521);
            double t63523 = a1f*c*t63438;
            double t63524 = t63523+1.0;
            double t63525 = t63454-c0f*t63522*t63524*2.0;
            double t63526 = t63454-t63433*t63525*t63436;
            double t63527 = gamma_bb[index]*gamma_bb[index];
            double t63528 = t63527*t63527;
            double t63529 = 1.0/pow(rho_b[index],3.2E1/3.0);
            double t63530 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
               rho_b[index]*rho_b[index]);
            double t63531 = 1.0/pow(rho_b[index],1.6E1/3.0);
            double t63532 = gx*gx;
            double t63533 = t63532*t63532;
            functional_[index] = (rho_a[index]*t63506+rho_b[index]*t63526-t63455*(t63472-t63436*t63483*t63477* \
               t63478*(t63472-c0f*log((t63437*(1.0/2.0))/(b1f*t63458+b3f*t63459+b2f*c*t63456+b4f*t63460*t63417)+1.0) \
               *(a1f*c*t63456+1.0)*2.0)+(Aa*t63436*t63483*log((1.0/2.0)/(Aa*(b1a*t63458+b3a*t63459+b2a*c*t63456+b4a* \
               t63460*t63417))+1.0)*(t63477*t63478-1.0)*(a1a*c*t63456+1.0)*2.0)/d2fz0))*(ccab0+(ccab4*t63491*t63492) \
               /(gcab*t63484*4.0+t63491*t63492+t63490*t63485*6.0+gcab*t63490*t63484*t63485*4.0+1.0)+(ccab1*gcab*t63484) \
               /(gcab*t63484+1.0)+(ccab2*t63490*t63485)/(gcab*t63484*2.0+t63490*t63485+1.0)+(ccab3*gcab*t63490*t63484* \
               t63485)/(gcab*t63484*3.0+t63490*t63485*3.0+gcab*t63490*t63484*t63485+1.0))+c0*pow(rho_a[index],4.0/ \
               3.0)*(cx0+(cx2*t63513*t63532*t63507)/(gamma_aa[index]*gx*t63486*2.0+t63513*t63532*t63507+1.0)+(cx1* \
               gamma_aa[index]*gx*t63486)/(gamma_aa[index]*gx*t63486+1.0)+(cx4*t63511*t63533*t63509)/(gamma_aa[index]* \
               gx*t63486*4.0+t63513*t63532*t63507*6.0+t63511*t63533*t63509+gamma_aa[index]*gx*t63512*t63532*t63507* \
               4.0+1.0)+(cx3*gamma_aa[index]*gx*t63512*t63532*t63507)/(gamma_aa[index]*gx*t63486*3.0+t63513*t63532* \
               t63507*3.0+gamma_aa[index]*gx*t63512*t63532*t63507+1.0))+c0*pow(rho_b[index],4.0/3.0)*(cx0+(cx2*t63531* \
               t63532*t63527)/(gamma_bb[index]*gx*t63488*2.0+t63531*t63532*t63527+1.0)+(cx1*gamma_bb[index]*gx*t63488) \
               /(gamma_bb[index]*gx*t63488+1.0)+(cx4*t63533*t63528*t63529)/(gamma_bb[index]*gx*t63488*4.0+t63531* \
               t63532*t63527*6.0+t63533*t63528*t63529+gamma_bb[index]*gx*t63530*t63532*t63527*4.0+1.0)+(cx3*gamma_bb[index]* \
               gx*t63530*t63532*t63527)/(gamma_bb[index]*gx*t63488*3.0+t63531*t63532*t63527*3.0+gamma_bb[index]*gx* \
               t63530*t63532*t63527+1.0))-rho_a[index]*t63506*(ccaa0+(ccaa2*t63513*t63507*t63508)/(gamma_aa[index]* \
               gcaa*t63486*2.0+t63513*t63507*t63508+1.0)+(ccaa1*gamma_aa[index]*gcaa*t63486)/(gamma_aa[index]*gcaa* \
               t63486+1.0)+(ccaa4*t63510*t63511*t63509)/(gamma_aa[index]*gcaa*t63486*4.0+t63510*t63511*t63509+t63513* \
               t63507*t63508*6.0+gamma_aa[index]*gcaa*t63512*t63507*t63508*4.0+1.0)+(ccaa3*gamma_aa[index]*gcaa*t63512* \
               t63507*t63508)/(gamma_aa[index]*gcaa*t63486*3.0+t63513*t63507*t63508*3.0+gamma_aa[index]*gcaa*t63512* \
               t63507*t63508+1.0))-rho_b[index]*t63526*(ccaa0+(ccaa2*t63531*t63508*t63527)/(gamma_bb[index]*gcaa* \
               t63488*2.0+t63531*t63508*t63527+1.0)+(ccaa1*gamma_bb[index]*gcaa*t63488)/(gamma_bb[index]*gcaa*t63488+ \
               1.0)+(ccaa4*t63510*t63528*t63529)/(gamma_bb[index]*gcaa*t63488*4.0+t63531*t63508*t63527*6.0+t63510* \
               t63528*t63529+gamma_bb[index]*gcaa*t63530*t63508*t63527*4.0+1.0)+(ccaa3*gamma_bb[index]*gcaa*t63530* \
               t63508*t63527)/(gamma_bb[index]*gcaa*t63488*3.0+t63531*t63508*t63527*3.0+gamma_bb[index]*gcaa*t63530* \
               t63508*t63527+1.0));
        } else if (rho_a[index] > cutoff_) {
            double t67563 = 1.0/pow(rho_a[index],1.0/3.0);
            double t67564 = c*t67563;
            double t67565 = sqrt(t67564);
            double t67566 = pow(t67564,3.0/2.0);
            double t67567 = c*c;
            double t67568 = 1.0/pow(rho_a[index],2.0/3.0);
            double t67569 = 1.0/c0p;
            double t67570 = b1p*t67565;
            double t67571 = b3p*t67566;
            double t67572 = b4p*t67567*t67568;
            double t67573 = b2p*c*t67563;
            double t67574 = t67570+t67571+t67572+t67573;
            double t67575 = 1.0/t67574;
            double t67576 = t67575*t67569*(1.0/2.0);
            double t67577 = t67576+1.0;
            double t67578 = log(t67577);
            double t67579 = a1p*c*t67563;
            double t67580 = t67579+1.0;
            double t67581 = gamma_aa[index]*gamma_aa[index];
            double t67582 = gcaa*gcaa;
            double t67583 = t67581*t67581;
            double t67584 = t67582*t67582;
            double t67585 = 1.0/pow(rho_a[index],3.2E1/3.0);
            double t67586 = 1.0/pow(rho_a[index],8.0/3.0);
            double t67587 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]);
            double t67588 = 1.0/pow(rho_a[index],1.6E1/3.0);
            double t67589 = gx*gx;
            double t67590 = t67589*t67589;
            functional_[index] = c0*pow(rho_a[index],4.0/3.0)*(cx0+(cx2*t67581*t67588*t67589)/(gamma_aa[index]* \
               gx*t67586*2.0+t67581*t67588*t67589+1.0)+(cx1*gamma_aa[index]*gx*t67586)/(gamma_aa[index]*gx*t67586+ \
               1.0)+(cx4*t67590*t67583*t67585)/(gamma_aa[index]*gx*t67586*4.0+t67590*t67583*t67585+t67581*t67588* \
               t67589*6.0+gamma_aa[index]*gx*t67581*t67587*t67589*4.0+1.0)+(cx3*gamma_aa[index]*gx*t67581*t67587* \
               t67589)/(gamma_aa[index]*gx*t67586*3.0+t67581*t67588*t67589*3.0+gamma_aa[index]*gx*t67581*t67587*t67589+ \
               1.0))-rho_a[index]*(((pow(2.0,1.0/3.0)*2.0-2.0)*(c0f*log((1.0/2.0)/(c0f*(b1f*t67565+b3f*t67566+b2f* \
               c*t67563+b4f*t67567*t67568))+1.0)*(a1f*c*t67563+1.0)*2.0-c0p*t67580*t67578*2.0))/(two_13*2.0-2.0)+ \
               c0p*t67580*t67578*2.0)*(ccaa0+(ccaa2*t67581*t67582*t67588)/(gamma_aa[index]*gcaa*t67586*2.0+t67581* \
               t67582*t67588+1.0)+(ccaa1*gamma_aa[index]*gcaa*t67586)/(gamma_aa[index]*gcaa*t67586+1.0)+(ccaa4*t67583* \
               t67584*t67585)/(gamma_aa[index]*gcaa*t67586*4.0+t67581*t67582*t67588*6.0+t67583*t67584*t67585+gamma_aa[index]* \
               gcaa*t67581*t67582*t67587*4.0+1.0)+(ccaa3*gamma_aa[index]*gcaa*t67581*t67582*t67587)/(gamma_aa[index]* \
               gcaa*t67586*3.0+t67581*t67582*t67588*3.0+gamma_aa[index]*gcaa*t67581*t67582*t67587+1.0));
        } else if (rho_b[index] > cutoff_) {
            double t66924 = 1.0/pow(rho_b[index],1.0/3.0);
            double t66925 = c*t66924;
            double t66926 = sqrt(t66925);
            double t66927 = pow(t66925,3.0/2.0);
            double t66928 = c*c;
            double t66929 = 1.0/pow(rho_b[index],2.0/3.0);
            double t66930 = 1.0/c0p;
            double t66931 = b1p*t66926;
            double t66932 = b3p*t66927;
            double t66933 = b4p*t66928*t66929;
            double t66934 = b2p*c*t66924;
            double t66935 = t66931+t66932+t66933+t66934;
            double t66936 = 1.0/t66935;
            double t66937 = t66930*t66936*(1.0/2.0);
            double t66938 = t66937+1.0;
            double t66939 = log(t66938);
            double t66940 = a1p*c*t66924;
            double t66941 = t66940+1.0;
            double t66942 = gamma_bb[index]*gamma_bb[index];
            double t66943 = gcaa*gcaa;
            double t66944 = t66942*t66942;
            double t66945 = t66943*t66943;
            double t66946 = 1.0/pow(rho_b[index],3.2E1/3.0);
            double t66947 = 1.0/pow(rho_b[index],8.0/3.0);
            double t66948 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
               rho_b[index]*rho_b[index]);
            double t66949 = 1.0/pow(rho_b[index],1.6E1/3.0);
            double t66950 = gx*gx;
            double t66951 = t66950*t66950;
            functional_[index] = c0*pow(rho_b[index],4.0/3.0)*(cx0+(cx2*t66950*t66942*t66949)/(gamma_bb[index]* \
               gx*t66947*2.0+t66950*t66942*t66949+1.0)+(cx1*gamma_bb[index]*gx*t66947)/(gamma_bb[index]*gx*t66947+ \
               1.0)+(cx4*t66951*t66944*t66946)/(gamma_bb[index]*gx*t66947*4.0+t66950*t66942*t66949*6.0+t66951*t66944* \
               t66946+gamma_bb[index]*gx*t66950*t66942*t66948*4.0+1.0)+(cx3*gamma_bb[index]*gx*t66950*t66942*t66948) \
               /(gamma_bb[index]*gx*t66947*3.0+t66950*t66942*t66949*3.0+gamma_bb[index]*gx*t66950*t66942*t66948+1.0) \
               )-rho_b[index]*(((pow(2.0,1.0/3.0)*2.0-2.0)*(c0f*log((1.0/2.0)/(c0f*(b1f*t66926+b3f*t66927+b2f*c*t66924+ \
               b4f*t66928*t66929))+1.0)*(a1f*c*t66924+1.0)*2.0-c0p*t66941*t66939*2.0))/(two_13*2.0-2.0)+c0p*t66941* \
               t66939*2.0)*(ccaa0+(ccaa2*t66942*t66943*t66949)/(gamma_bb[index]*gcaa*t66947*2.0+t66942*t66943*t66949+ \
               1.0)+(ccaa1*gamma_bb[index]*gcaa*t66947)/(gamma_bb[index]*gcaa*t66947+1.0)+(ccaa4*t66944*t66945*t66946) \
               /(gamma_bb[index]*gcaa*t66947*4.0+t66942*t66943*t66949*6.0+t66944*t66945*t66946+gamma_bb[index]*gcaa* \
               t66942*t66943*t66948*4.0+1.0)+(ccaa3*gamma_bb[index]*gcaa*t66942*t66943*t66948)/(gamma_bb[index]*gcaa* \
               t66947*3.0+t66942*t66943*t66949*3.0+gamma_bb[index]*gcaa*t66942*t66943*t66948+1.0));
        } else {
            functional_[index] = 0.0;
        } 
   
    }
    //First Partials
    for (int index = 0; index < ntrue && deriv_ >= 1; index++) {

        //V_rho_a
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t63535 = 1.0/pow(rho_a[index],1.0/3.0);
            double t63536 = c*t63535;
            double t63537 = sqrt(t63536);
            double t63538 = pow(t63536,3.0/2.0);
            double t63539 = c*c;
            double t63540 = 1.0/pow(rho_a[index],2.0/3.0);
            double t63541 = 1.0/c0p;
            double t63542 = b1p*t63537;
            double t63543 = b3p*t63538;
            double t63544 = b4p*t63540*t63539;
            double t63545 = b2p*c*t63535;
            double t63546 = t63542+t63543+t63544+t63545;
            double t63547 = 1.0/t63546;
            double t63548 = t63541*t63547*(1.0/2.0);
            double t63549 = t63548+1.0;
            double t63550 = log(t63549);
            double t63551 = a1p*c*t63535;
            double t63552 = t63551+1.0;
            double t63553 = gamma_aa[index]*gamma_aa[index];
            double t63554 = gcaa*gcaa;
            double t63555 = t63553*t63553;
            double t63556 = t63554*t63554;
            double t63557 = 1.0/pow(rho_a[index],3.2E1/3.0);
            double t63558 = 1.0/pow(rho_a[index],8.0/3.0);
            double t63559 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]);
            double t63560 = 1.0/pow(rho_a[index],1.6E1/3.0);
            double t63561 = pow(2.0,1.0/3.0);
            double t63562 = t63561*2.0;
            double t63563 = t63562-2.0;
            double t63564 = two_13*2.0;
            double t63565 = t63564-2.0;
            double t63566 = 1.0/t63565;
            double t63567 = 1.0/c0f;
            double t63568 = b1f*t63537;
            double t63569 = b3f*t63538;
            double t63570 = b4f*t63540*t63539;
            double t63571 = b2f*c*t63535;
            double t63572 = t63570+t63571+t63568+t63569;
            double t63573 = 1.0/t63572;
            double t63574 = t63573*t63567*(1.0/2.0);
            double t63575 = t63574+1.0;
            double t63576 = log(t63575);
            double t63577 = a1f*c*t63535;
            double t63578 = t63577+1.0;
            double t63579 = c0f*t63576*t63578*2.0;
            double t63580 = c0p*t63550*t63552*2.0;
            double t63581 = 1.0/pow(rho_b[index],1.0/3.0);
            double t63582 = c*t63581;
            double t63583 = sqrt(t63582);
            double t63584 = pow(t63582,3.0/2.0);
            double t63585 = 1.0/pow(rho_b[index],2.0/3.0);
            double t63586 = b1p*t63583;
            double t63587 = b3p*t63584;
            double t63588 = b4p*t63539*t63585;
            double t63589 = b2p*c*t63581;
            double t63590 = t63586+t63587+t63588+t63589;
            double t63591 = 1.0/t63590;
            double t63592 = t63541*t63591*(1.0/2.0);
            double t63593 = t63592+1.0;
            double t63594 = log(t63593);
            double t63595 = a1p*c*t63581;
            double t63596 = t63595+1.0;
            double t63597 = c0p*t63594*t63596*2.0;
            double t63598 = rho_a[index]+rho_b[index];
            double t63599 = 1.0/pow(t63598,1.0/3.0);
            double t63600 = c*t63599;
            double t63601 = sqrt(t63600);
            double t63602 = pow(t63600,3.0/2.0);
            double t63603 = 1.0/pow(t63598,2.0/3.0);
            double t63604 = b1p*t63601;
            double t63605 = b3p*t63602;
            double t63606 = b4p*t63603*t63539;
            double t63607 = b2p*c*t63599;
            double t63608 = t63604+t63605+t63606+t63607;
            double t63609 = 1.0/t63608;
            double t63610 = t63541*t63609*(1.0/2.0);
            double t63611 = t63610+1.0;
            double t63612 = log(t63611);
            double t63613 = a1p*c*t63599;
            double t63614 = t63613+1.0;
            double t63615 = c0p*t63612*t63614*2.0;
            double t63616 = rho_a[index]-rho_b[index];
            double t63617 = t63616*t63616;
            double t63618 = 1.0/t63598;
            double t63619 = t63616*t63618;
            double t63620 = 1.0/(t63598*t63598*t63598*t63598);
            double t63621 = t63617*t63617;
            double t63622 = t63619+1.0;
            double t63623 = pow(t63622,4.0/3.0);
            double t63624 = -t63619+1.0;
            double t63625 = pow(t63624,4.0/3.0);
            double t63626 = t63623+t63625-2.0;
            double t63627 = gcab*gcab;
            double t63631 = gamma_aa[index]*t63558*(1.0/2.0);
            double t63632 = 1.0/pow(rho_b[index],8.0/3.0);
            double t63633 = gamma_bb[index]*t63632*(1.0/2.0);
            double t63628 = t63631+t63633;
            double t63629 = t63628*t63628;
            double t63630 = 1.0/pow(rho_a[index],1.1E1/3.0);
            double t63634 = t63627*t63627;
            double t63635 = t63629*t63629;
            double t63636 = t63627*t63629*6.0;
            double t63637 = gcab*t63627*t63628*t63629*4.0;
            double t63638 = t63634*t63635;
            double t63639 = gcab*t63628*4.0;
            double t63640 = t63636+t63637+t63638+t63639+1.0;
            double t63641 = gcab*t63628;
            double t63642 = t63641+1.0;
            double t63643 = t63627*t63629;
            double t63644 = gcab*t63628*2.0;
            double t63645 = t63643+t63644+1.0;
            double t63646 = t63627*t63629*3.0;
            double t63647 = gcab*t63627*t63628*t63629;
            double t63648 = gcab*t63628*3.0;
            double t63649 = t63646+t63647+t63648+1.0;
            double t63650 = 1.0/t63645;
            double t63651 = 1.0/t63649;
            double t63652 = 1.0/t63642;
            double t63653 = 1.0/t63640;
            double t63654 = 1.0/pow(t63598,4.0/3.0);
            double t63655 = b1f*t63601;
            double t63656 = b3f*t63602;
            double t63657 = b4f*t63603*t63539;
            double t63658 = b2f*c*t63599;
            double t63659 = t63655+t63656+t63657+t63658;
            double t63660 = 1.0/t63659;
            double t63661 = t63660*t63567*(1.0/2.0);
            double t63662 = t63661+1.0;
            double t63663 = log(t63662);
            double t63664 = a1f*c*t63599;
            double t63665 = t63664+1.0;
            double t63667 = c0f*t63663*t63665*2.0;
            double t63666 = t63615-t63667;
            double t63668 = 1.0/(t63598*t63598);
            double t63695 = t63616*t63668;
            double t63669 = t63618-t63695;
            double t63670 = 1.0/pow(t63598,5.0/3.0);
            double t63671 = 1.0/sqrt(t63600);
            double t63672 = 1.0/t63611;
            double t63673 = 1.0/(t63608*t63608);
            double t63674 = b4p*t63670*t63539*(2.0/3.0);
            double t63675 = b2p*c*t63654*(1.0/3.0);
            double t63676 = b1p*c*t63671*t63654*(1.0/6.0);
            double t63677 = b3p*c*t63601*t63654*(1.0/2.0);
            double t63678 = t63674+t63675+t63676+t63677;
            double t63679 = t63614*t63672*t63673*t63678;
            double t63680 = 1.0/d2fz0;
            double t63681 = 1.0/Aa;
            double t63682 = b1a*t63601;
            double t63683 = b3a*t63602;
            double t63684 = b4a*t63603*t63539;
            double t63685 = b2a*c*t63599;
            double t63686 = t63682+t63683+t63684+t63685;
            double t63687 = 1.0/t63686;
            double t63688 = t63681*t63687*(1.0/2.0);
            double t63689 = t63688+1.0;
            double t63690 = log(t63689);
            double t63691 = a1a*c*t63599;
            double t63692 = t63691+1.0;
            double t63693 = 1.0/(t63598*t63598*t63598*t63598*t63598);
            double t63694 = pow(t63622,1.0/3.0);
            double t63696 = t63694*t63669*(4.0/3.0);
            double t63697 = pow(t63624,1.0/3.0);
            double t63698 = t63696-t63669*t63697*(4.0/3.0);
            double t63699 = t63620*t63621;
            double t63700 = t63699-1.0;
            double t63701 = 1.0/pow(rho_a[index],4.0/3.0);
            double t63702 = 1.0/pow(rho_a[index],5.0/3.0);
            double t63703 = 1.0/sqrt(t63536);
            double t63704 = 1.0/t63549;
            double t63705 = 1.0/(t63546*t63546);
            double t63706 = b4p*t63702*t63539*(2.0/3.0);
            double t63707 = b2p*c*t63701*(1.0/3.0);
            double t63708 = b1p*c*t63701*t63703*(1.0/6.0);
            double t63709 = b3p*c*t63701*t63537*(1.0/2.0);
            double t63710 = t63706+t63707+t63708+t63709;
            double t63711 = t63710*t63704*t63552*t63705;
            double t63712 = Aa*t63700*t63626*t63680*t63690*t63566*t63692*2.0;
            double t63713 = t63580-t63579;
            double t63714 = t63713*t63563*t63566;
            double t63715 = gamma_aa[index]*gcaa*t63558*4.0;
            double t63716 = gamma_aa[index]*gcaa*t63553*t63554*t63559*4.0;
            double t63717 = t63560*t63553*t63554*6.0;
            double t63718 = t63555*t63556*t63557;
            double t63719 = t63715+t63716+t63717+t63718+1.0;
            double t63720 = 1.0/t63719;
            double t63721 = gamma_aa[index]*gcaa*t63558;
            double t63722 = t63721+1.0;
            double t63723 = 1.0/t63722;
            double t63724 = gamma_aa[index]*gcaa*t63558*3.0;
            double t63725 = gamma_aa[index]*gcaa*t63553*t63554*t63559;
            double t63726 = t63560*t63553*t63554*3.0;
            double t63727 = t63724+t63725+t63726+1.0;
            double t63728 = 1.0/t63727;
            double t63729 = gamma_aa[index]*gcaa*t63558*2.0;
            double t63730 = t63560*t63553*t63554;
            double t63731 = t63730+t63729+1.0;
            double t63732 = 1.0/t63731;
            double t63733 = 1.0/pow(rho_a[index],1.9E1/3.0);
            double t63734 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]*rho_a[index]);
            double t63735 = 1.0/pow(rho_a[index],3.5E1/3.0);
            double t63736 = gx*gx;
            double t63737 = t63736*t63736;
            double t63738 = gamma_aa[index]*gx*t63558*4.0;
            double t63739 = gamma_aa[index]*gx*t63553*t63736*t63559*4.0;
            double t63740 = t63560*t63553*t63736*6.0;
            double t63741 = t63555*t63557*t63737;
            double t63742 = t63740+t63741+t63738+t63739+1.0;
            double t63743 = 1.0/t63742;
            double t63744 = gamma_aa[index]*gx*t63558;
            double t63745 = t63744+1.0;
            double t63746 = 1.0/t63745;
            double t63747 = gamma_aa[index]*gx*t63558*3.0;
            double t63748 = gamma_aa[index]*gx*t63553*t63736*t63559;
            double t63749 = t63560*t63553*t63736*3.0;
            double t63750 = t63747+t63748+t63749+1.0;
            double t63751 = 1.0/t63750;
            double t63752 = gamma_aa[index]*gx*t63558*2.0;
            double t63753 = t63560*t63553*t63736;
            double t63754 = t63752+t63753+1.0;
            double t63755 = 1.0/t63754;
            double t63756 = 1.0/t63575;
            double t63757 = 1.0/(t63572*t63572);
            double t63758 = b4f*t63702*t63539*(2.0/3.0);
            double t63759 = b2f*c*t63701*(1.0/3.0);
            double t63760 = b1f*c*t63701*t63703*(1.0/6.0);
            double t63761 = b3f*c*t63701*t63537*(1.0/2.0);
            double t63762 = t63760+t63761+t63758+t63759;
            double t63763 = a1f*c*c0f*t63701*t63576*(2.0/3.0);
            double t63764 = a1p*c*c0p*t63701*t63550*(2.0/3.0);
            double t63765 = ccaa4*t63720*t63555*t63556*t63557;
            double t63766 = ccaa1*gamma_aa[index]*gcaa*t63723*t63558;
            double t63767 = ccaa3*gamma_aa[index]*gcaa*t63553*t63554*t63728*t63559;
            double t63768 = ccaa2*t63560*t63732*t63553*t63554;
            double t63769 = ccaa0+t63765+t63766+t63767+t63768;
            v_rho_a_[index] = -(ccab0+ccab1*gcab*t63652*t63628+ccab2*t63650*t63627*t63629+ccab4*t63634*t63635* \
               t63653+ccab3*gcab*t63651*t63627*t63628*t63629)*(t63712+t63615+t63714-t63580+rho_a[index]*(-t63711+ \
               t63764+t63563*t63566*(t63711+t63763-t63762*t63756*t63757*t63578-a1p*c*c0p*t63701*t63550*(2.0/3.0)) \
               )-t63598*(-t63679+t63620*t63621*t63626*t63566*(t63679-(t63665*1.0/(t63659*t63659)*(b2f*c*t63654*(1.0/ \
               3.0)+b4f*t63670*t63539*(2.0/3.0)+b1f*c*t63671*t63654*(1.0/6.0)+b3f*c*t63601*t63654*(1.0/2.0)))/t63662+ \
               a1f*c*c0f*t63654*t63663*(2.0/3.0)-a1p*c*c0p*t63612*t63654*(2.0/3.0))+a1p*c*c0p*t63612*t63654*(2.0/ \
               3.0)+t63620*t63621*t63566*t63666*t63698-t63621*t63626*t63566*t63666*t63693*4.0+t63620*t63616*t63617* \
               t63626*t63566*t63666*4.0+Aa*t63626*t63680*t63690*t63566*t63692*(t63621*t63693*4.0-t63620*t63616*t63617* \
               4.0)*2.0-Aa*t63700*t63680*t63690*t63566*t63692*t63698*2.0-(t63700*t63626*t63680*t63566*t63692*1.0/ \
               (t63686*t63686)*(b2a*c*t63654*(1.0/3.0)+b4a*t63670*t63539*(2.0/3.0)+b1a*c*t63671*t63654*(1.0/6.0)+ \
               b3a*c*t63601*t63654*(1.0/2.0)))/t63689+Aa*a1a*c*t63700*t63626*t63680*t63654*t63690*t63566*(2.0/3.0) \
               )-t63620*t63621*t63626*t63566*t63666)-t63769*(t63580+t63563*t63566*(t63579-c0p*t63550*t63552*2.0)) \
               -(rho_a[index]*(t63580-t63713*t63563*t63566)+rho_b[index]*(t63597-t63563*t63566*(t63597-c0f*log((t63567* \
               (1.0/2.0))/(b1f*t63583+b3f*t63584+b2f*c*t63581+b4f*t63539*t63585)+1.0)*(a1f*c*t63581+1.0)*2.0))-t63598* \
               (t63712+t63615-t63620*t63621*t63626*t63566*t63666))*(ccab1*gamma_aa[index]*gcab*t63630*t63652*(4.0/ \
               3.0)-ccab2*t63627*1.0/(t63645*t63645)*t63629*(gamma_aa[index]*gcab*t63630*(8.0/3.0)+gamma_aa[index]* \
               t63630*t63627*t63628*(8.0/3.0))-ccab4*1.0/(t63640*t63640)*t63634*t63635*(gamma_aa[index]*gcab*t63630* \
               (1.6E1/3.0)+gamma_aa[index]*t63630*t63627*t63628*1.6E1+gamma_aa[index]*gcab*t63630*t63627*t63629*1.6E1+ \
               gamma_aa[index]*t63630*t63634*t63628*t63629*(1.6E1/3.0))-ccab1*gamma_aa[index]*t63630*1.0/(t63642* \
               t63642)*t63627*t63628*(4.0/3.0)+ccab2*gamma_aa[index]*t63630*t63650*t63627*t63628*(8.0/3.0)-ccab3* \
               gcab*t63627*t63628*t63629*1.0/(t63649*t63649)*(gamma_aa[index]*gcab*t63630*4.0+gamma_aa[index]*t63630* \
               t63627*t63628*8.0+gamma_aa[index]*gcab*t63630*t63627*t63629*4.0)+ccab3*gamma_aa[index]*gcab*t63630* \
               t63651*t63627*t63629*4.0+ccab4*gamma_aa[index]*t63630*t63634*t63653*t63628*t63629*(1.6E1/3.0))+c0* \
               pow(rho_a[index],1.0/3.0)*(cx0+cx1*gamma_aa[index]*gx*t63746*t63558+cx2*t63560*t63553*t63736*t63755+ \
               cx4*t63743*t63555*t63557*t63737+cx3*gamma_aa[index]*gx*t63553*t63751*t63736*t63559)*(4.0/3.0)+rho_a[index]* \
               t63769*(-t63711+t63764+t63563*t63566*(t63711+t63763-t63764-t63762*t63756*t63757*t63578))-rho_a[index]* \
               (t63714-t63580)*(ccaa1*gamma_aa[index]*gcaa*t63630*t63723*(8.0/3.0)+ccaa2*t63732*t63553*t63733*t63554* \
               (1.6E1/3.0)+ccaa4*t63720*t63555*t63735*t63556*(3.2E1/3.0)-ccaa1*1.0/(t63722*t63722)*t63553*t63733* \
               t63554*(8.0/3.0)-ccaa2*t63560*1.0/(t63731*t63731)*t63553*t63554*(gamma_aa[index]*gcaa*t63630*(1.6E1/ \
               3.0)+t63553*t63733*t63554*(1.6E1/3.0))-ccaa4*t63555*t63556*t63557*1.0/(t63719*t63719)*(gamma_aa[index]* \
               gcaa*t63630*(3.2E1/3.0)+t63553*t63733*t63554*3.2E1+t63555*t63735*t63556*(3.2E1/3.0)+gamma_aa[index]* \
               gcaa*t63553*t63554*t63734*3.2E1)+ccaa3*gamma_aa[index]*gcaa*t63553*t63554*t63734*t63728*8.0-ccaa3* \
               gamma_aa[index]*gcaa*t63553*t63554*1.0/(t63727*t63727)*t63559*(gamma_aa[index]*gcaa*t63630*8.0+t63553* \
               t63733*t63554*1.6E1+gamma_aa[index]*gcaa*t63553*t63554*t63734*8.0))-c0*pow(rho_a[index],4.0/3.0)*(cx1* \
               gamma_aa[index]*gx*t63630*t63746*(8.0/3.0)+cx2*t63553*t63733*t63736*t63755*(1.6E1/3.0)+cx4*t63743* \
               t63555*t63735*t63737*(3.2E1/3.0)-cx1*t63553*t63733*t63736*1.0/(t63745*t63745)*(8.0/3.0)-cx2*t63560* \
               t63553*t63736*1.0/(t63754*t63754)*(gamma_aa[index]*gx*t63630*(1.6E1/3.0)+t63553*t63733*t63736*(1.6E1/ \
               3.0))-cx4*1.0/(t63742*t63742)*t63555*t63557*t63737*(gamma_aa[index]*gx*t63630*(3.2E1/3.0)+t63553*t63733* \
               t63736*3.2E1+t63555*t63735*t63737*(3.2E1/3.0)+gamma_aa[index]*gx*t63553*t63734*t63736*3.2E1)+cx3*gamma_aa[index]* \
               gx*t63553*t63751*t63734*t63736*8.0-cx3*gamma_aa[index]*gx*1.0/(t63750*t63750)*t63553*t63736*t63559* \
               (gamma_aa[index]*gx*t63630*8.0+t63553*t63733*t63736*1.6E1+gamma_aa[index]*gx*t63553*t63734*t63736* \
               8.0));
        } else if (rho_a[index] > cutoff_) {
            double t67592 = 1.0/pow(rho_a[index],1.0/3.0);
            double t67593 = c*t67592;
            double t67594 = sqrt(t67593);
            double t67595 = pow(t67593,3.0/2.0);
            double t67596 = c*c;
            double t67597 = 1.0/pow(rho_a[index],2.0/3.0);
            double t67598 = 1.0/c0p;
            double t67599 = b1p*t67594;
            double t67600 = b3p*t67595;
            double t67601 = b4p*t67596*t67597;
            double t67602 = b2p*c*t67592;
            double t67603 = t67600+t67601+t67602+t67599;
            double t67604 = 1.0/t67603;
            double t67605 = t67604*t67598*(1.0/2.0);
            double t67606 = t67605+1.0;
            double t67607 = log(t67606);
            double t67608 = a1p*c*t67592;
            double t67609 = t67608+1.0;
            double t67610 = gamma_aa[index]*gamma_aa[index];
            double t67611 = gcaa*gcaa;
            double t67612 = t67610*t67610;
            double t67613 = t67611*t67611;
            double t67614 = 1.0/pow(rho_a[index],3.2E1/3.0);
            double t67615 = 1.0/pow(rho_a[index],8.0/3.0);
            double t67616 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]);
            double t67617 = 1.0/pow(rho_a[index],1.6E1/3.0);
            double t67618 = pow(2.0,1.0/3.0);
            double t67619 = t67618*2.0;
            double t67620 = t67619-2.0;
            double t67621 = two_13*2.0;
            double t67622 = t67621-2.0;
            double t67623 = 1.0/t67622;
            double t67624 = 1.0/c0f;
            double t67625 = b1f*t67594;
            double t67626 = b3f*t67595;
            double t67627 = b4f*t67596*t67597;
            double t67628 = b2f*c*t67592;
            double t67629 = t67625+t67626+t67627+t67628;
            double t67630 = 1.0/t67629;
            double t67631 = t67630*t67624*(1.0/2.0);
            double t67632 = t67631+1.0;
            double t67633 = log(t67632);
            double t67634 = a1f*c*t67592;
            double t67635 = t67634+1.0;
            double t67636 = c0f*t67633*t67635*2.0;
            double t67637 = c0p*t67607*t67609*2.0;
            double t67638 = gamma_aa[index]*gcaa*t67615*4.0;
            double t67639 = gamma_aa[index]*gcaa*t67610*t67611*t67616*4.0;
            double t67640 = t67610*t67611*t67617*6.0;
            double t67641 = t67612*t67613*t67614;
            double t67642 = t67640+t67641+t67638+t67639+1.0;
            double t67643 = 1.0/t67642;
            double t67644 = gamma_aa[index]*gcaa*t67615;
            double t67645 = t67644+1.0;
            double t67646 = 1.0/t67645;
            double t67647 = gamma_aa[index]*gcaa*t67615*3.0;
            double t67648 = gamma_aa[index]*gcaa*t67610*t67611*t67616;
            double t67649 = t67610*t67611*t67617*3.0;
            double t67650 = t67647+t67648+t67649+1.0;
            double t67651 = 1.0/t67650;
            double t67652 = gamma_aa[index]*gcaa*t67615*2.0;
            double t67653 = t67610*t67611*t67617;
            double t67654 = t67652+t67653+1.0;
            double t67655 = 1.0/t67654;
            double t67656 = 1.0/pow(rho_a[index],1.9E1/3.0);
            double t67657 = 1.0/pow(rho_a[index],1.1E1/3.0);
            double t67658 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]*rho_a[index]);
            double t67659 = 1.0/pow(rho_a[index],3.5E1/3.0);
            double t67660 = gx*gx;
            double t67661 = t67660*t67660;
            double t67662 = gamma_aa[index]*gx*t67615*4.0;
            double t67663 = gamma_aa[index]*gx*t67610*t67660*t67616*4.0;
            double t67664 = t67610*t67660*t67617*6.0;
            double t67665 = t67612*t67614*t67661;
            double t67666 = t67662+t67663+t67664+t67665+1.0;
            double t67667 = 1.0/t67666;
            double t67668 = gamma_aa[index]*gx*t67615;
            double t67669 = t67668+1.0;
            double t67670 = 1.0/t67669;
            double t67671 = gamma_aa[index]*gx*t67615*3.0;
            double t67672 = gamma_aa[index]*gx*t67610*t67660*t67616;
            double t67673 = t67610*t67660*t67617*3.0;
            double t67674 = t67671+t67672+t67673+1.0;
            double t67675 = 1.0/t67674;
            double t67676 = gamma_aa[index]*gx*t67615*2.0;
            double t67677 = t67610*t67660*t67617;
            double t67678 = t67676+t67677+1.0;
            double t67679 = 1.0/t67678;
            double t67680 = 1.0/pow(rho_a[index],4.0/3.0);
            double t67681 = 1.0/pow(rho_a[index],5.0/3.0);
            double t67682 = 1.0/sqrt(t67593);
            double t67683 = 1.0/t67606;
            double t67684 = 1.0/(t67603*t67603);
            double t67685 = b4p*t67681*t67596*(2.0/3.0);
            double t67686 = b2p*c*t67680*(1.0/3.0);
            double t67687 = b1p*c*t67680*t67682*(1.0/6.0);
            double t67688 = b3p*c*t67680*t67594*(1.0/2.0);
            double t67689 = t67685+t67686+t67687+t67688;
            double t67690 = t67609*t67683*t67684*t67689;
            double t67691 = ccaa4*t67612*t67613*t67614*t67643;
            double t67692 = ccaa1*gamma_aa[index]*gcaa*t67615*t67646;
            double t67693 = ccaa3*gamma_aa[index]*gcaa*t67610*t67611*t67651*t67616;
            double t67694 = ccaa2*t67610*t67611*t67617*t67655;
            double t67695 = ccaa0+t67691+t67692+t67693+t67694;
            v_rho_a_[index] = -t67695*(t67637+t67620*t67623*(t67636-c0p*t67607*t67609*2.0))+rho_a[index]*t67695* \
               (-t67690+t67620*t67623*(t67690-(t67635*1.0/(t67629*t67629)*(b2f*c*t67680*(1.0/3.0)+b4f*t67681*t67596* \
               (2.0/3.0)+b1f*c*t67680*t67682*(1.0/6.0)+b3f*c*t67680*t67594*(1.0/2.0)))/t67632+a1f*c*c0f*t67633*t67680* \
               (2.0/3.0)-a1p*c*c0p*t67607*t67680*(2.0/3.0))+a1p*c*c0p*t67607*t67680*(2.0/3.0))+c0*pow(rho_a[index],1.0/ \
               3.0)*(cx0+cx1*gamma_aa[index]*gx*t67615*t67670+cx2*t67610*t67660*t67617*t67679+cx4*t67612*t67614*t67661* \
               t67667+cx3*gamma_aa[index]*gx*t67610*t67660*t67616*t67675)*(4.0/3.0)+rho_a[index]*(t67637+t67620*t67623* \
               (t67636-t67637))*(ccaa1*gamma_aa[index]*gcaa*t67646*t67657*(8.0/3.0)+ccaa2*t67610*t67611*t67655*t67656* \
               (1.6E1/3.0)+ccaa4*t67612*t67613*t67643*t67659*(3.2E1/3.0)-ccaa1*t67610*t67611*1.0/(t67645*t67645)* \
               t67656*(8.0/3.0)-ccaa2*t67610*t67611*t67617*1.0/(t67654*t67654)*(gamma_aa[index]*gcaa*t67657*(1.6E1/ \
               3.0)+t67610*t67611*t67656*(1.6E1/3.0))-ccaa4*t67612*t67613*t67614*1.0/(t67642*t67642)*(gamma_aa[index]* \
               gcaa*t67657*(3.2E1/3.0)+t67610*t67611*t67656*3.2E1+t67612*t67613*t67659*(3.2E1/3.0)+gamma_aa[index]* \
               gcaa*t67610*t67611*t67658*3.2E1)+ccaa3*gamma_aa[index]*gcaa*t67610*t67611*t67651*t67658*8.0-ccaa3* \
               gamma_aa[index]*gcaa*t67610*t67611*1.0/(t67650*t67650)*t67616*(gamma_aa[index]*gcaa*t67657*8.0+t67610* \
               t67611*t67656*1.6E1+gamma_aa[index]*gcaa*t67610*t67611*t67658*8.0))-c0*pow(rho_a[index],4.0/3.0)*(cx1* \
               gamma_aa[index]*gx*t67670*t67657*(8.0/3.0)+cx2*t67610*t67660*t67656*t67679*(1.6E1/3.0)+cx4*t67612* \
               t67661*t67667*t67659*(3.2E1/3.0)-cx1*t67610*t67660*t67656*1.0/(t67669*t67669)*(8.0/3.0)-cx2*t67610* \
               t67660*t67617*1.0/(t67678*t67678)*(gamma_aa[index]*gx*t67657*(1.6E1/3.0)+t67610*t67660*t67656*(1.6E1/ \
               3.0))-cx4*t67612*t67614*t67661*1.0/(t67666*t67666)*(gamma_aa[index]*gx*t67657*(3.2E1/3.0)+t67610*t67660* \
               t67656*3.2E1+t67612*t67661*t67659*(3.2E1/3.0)+gamma_aa[index]*gx*t67610*t67660*t67658*3.2E1)+cx3*gamma_aa[index]* \
               gx*t67610*t67660*t67675*t67658*8.0-cx3*gamma_aa[index]*gx*t67610*t67660*t67616*1.0/(t67674*t67674) \
               *(gamma_aa[index]*gx*t67657*8.0+t67610*t67660*t67656*1.6E1+gamma_aa[index]*gx*t67610*t67660*t67658* \
               8.0));
        } else if (rho_b[index] > cutoff_) {
            v_rho_a_[index] = 0.0;
        } else {
            v_rho_a_[index] = 0.0;
        } 

        //V_rho_b
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t63771 = 1.0/pow(rho_b[index],1.0/3.0);
            double t63772 = c*t63771;
            double t63773 = sqrt(t63772);
            double t63774 = pow(t63772,3.0/2.0);
            double t63775 = c*c;
            double t63776 = 1.0/pow(rho_b[index],2.0/3.0);
            double t63777 = 1.0/c0p;
            double t63778 = b1p*t63773;
            double t63779 = b3p*t63774;
            double t63780 = b4p*t63775*t63776;
            double t63781 = b2p*c*t63771;
            double t63782 = t63780+t63781+t63778+t63779;
            double t63783 = 1.0/t63782;
            double t63784 = t63783*t63777*(1.0/2.0);
            double t63785 = t63784+1.0;
            double t63786 = log(t63785);
            double t63787 = a1p*c*t63771;
            double t63788 = t63787+1.0;
            double t63789 = gamma_bb[index]*gamma_bb[index];
            double t63790 = gcaa*gcaa;
            double t63791 = t63789*t63789;
            double t63792 = t63790*t63790;
            double t63793 = 1.0/pow(rho_b[index],3.2E1/3.0);
            double t63794 = 1.0/pow(rho_b[index],8.0/3.0);
            double t63795 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
               rho_b[index]*rho_b[index]);
            double t63796 = 1.0/pow(rho_b[index],1.6E1/3.0);
            double t63797 = pow(2.0,1.0/3.0);
            double t63798 = t63797*2.0;
            double t63799 = t63798-2.0;
            double t63800 = two_13*2.0;
            double t63801 = t63800-2.0;
            double t63802 = 1.0/t63801;
            double t63803 = 1.0/c0f;
            double t63804 = 1.0/pow(rho_a[index],1.0/3.0);
            double t63805 = c*t63804;
            double t63806 = sqrt(t63805);
            double t63807 = pow(t63805,3.0/2.0);
            double t63808 = 1.0/pow(rho_a[index],2.0/3.0);
            double t63809 = b1p*t63806;
            double t63810 = b3p*t63807;
            double t63811 = b4p*t63808*t63775;
            double t63812 = b2p*c*t63804;
            double t63813 = t63810+t63811+t63812+t63809;
            double t63814 = 1.0/t63813;
            double t63815 = t63814*t63777*(1.0/2.0);
            double t63816 = t63815+1.0;
            double t63817 = log(t63816);
            double t63818 = a1p*c*t63804;
            double t63819 = t63818+1.0;
            double t63820 = c0p*t63817*t63819*2.0;
            double t63821 = b1f*t63773;
            double t63822 = b3f*t63774;
            double t63823 = b4f*t63775*t63776;
            double t63824 = b2f*c*t63771;
            double t63825 = t63821+t63822+t63823+t63824;
            double t63826 = 1.0/t63825;
            double t63827 = t63803*t63826*(1.0/2.0);
            double t63828 = t63827+1.0;
            double t63829 = log(t63828);
            double t63830 = a1f*c*t63771;
            double t63831 = t63830+1.0;
            double t63832 = c0f*t63831*t63829*2.0;
            double t63833 = c0p*t63786*t63788*2.0;
            double t63834 = rho_a[index]+rho_b[index];
            double t63835 = 1.0/pow(t63834,1.0/3.0);
            double t63836 = c*t63835;
            double t63837 = sqrt(t63836);
            double t63838 = pow(t63836,3.0/2.0);
            double t63839 = 1.0/pow(t63834,2.0/3.0);
            double t63840 = b1p*t63837;
            double t63841 = b3p*t63838;
            double t63842 = b4p*t63775*t63839;
            double t63843 = b2p*c*t63835;
            double t63844 = t63840+t63841+t63842+t63843;
            double t63845 = 1.0/t63844;
            double t63846 = t63845*t63777*(1.0/2.0);
            double t63847 = t63846+1.0;
            double t63848 = log(t63847);
            double t63849 = a1p*c*t63835;
            double t63850 = t63849+1.0;
            double t63851 = c0p*t63850*t63848*2.0;
            double t63852 = rho_a[index]-rho_b[index];
            double t63853 = t63852*t63852;
            double t63854 = 1.0/t63834;
            double t63855 = t63852*t63854;
            double t63856 = 1.0/(t63834*t63834*t63834*t63834);
            double t63857 = t63853*t63853;
            double t63858 = t63855+1.0;
            double t63859 = pow(t63858,4.0/3.0);
            double t63860 = -t63855+1.0;
            double t63861 = pow(t63860,4.0/3.0);
            double t63862 = t63861+t63859-2.0;
            double t63863 = gcab*gcab;
            double t63867 = 1.0/pow(rho_a[index],8.0/3.0);
            double t63868 = gamma_aa[index]*t63867*(1.0/2.0);
            double t63869 = gamma_bb[index]*t63794*(1.0/2.0);
            double t63864 = t63868+t63869;
            double t63865 = t63864*t63864;
            double t63866 = 1.0/pow(rho_b[index],1.1E1/3.0);
            double t63870 = t63863*t63863;
            double t63871 = t63865*t63865;
            double t63872 = t63863*t63865*6.0;
            double t63873 = gcab*t63863*t63864*t63865*4.0;
            double t63874 = t63870*t63871;
            double t63875 = gcab*t63864*4.0;
            double t63876 = t63872+t63873+t63874+t63875+1.0;
            double t63877 = gcab*t63864;
            double t63878 = t63877+1.0;
            double t63879 = t63863*t63865;
            double t63880 = gcab*t63864*2.0;
            double t63881 = t63880+t63879+1.0;
            double t63882 = t63863*t63865*3.0;
            double t63883 = gcab*t63863*t63864*t63865;
            double t63884 = gcab*t63864*3.0;
            double t63885 = t63882+t63883+t63884+1.0;
            double t63886 = 1.0/t63881;
            double t63887 = 1.0/t63885;
            double t63888 = 1.0/t63878;
            double t63889 = 1.0/t63876;
            double t63890 = 1.0/pow(t63834,4.0/3.0);
            double t63891 = b1f*t63837;
            double t63892 = b3f*t63838;
            double t63893 = b4f*t63775*t63839;
            double t63894 = b2f*c*t63835;
            double t63895 = t63891+t63892+t63893+t63894;
            double t63896 = 1.0/t63895;
            double t63897 = t63803*t63896*(1.0/2.0);
            double t63898 = t63897+1.0;
            double t63899 = log(t63898);
            double t63900 = a1f*c*t63835;
            double t63901 = t63900+1.0;
            double t63903 = c0f*t63901*t63899*2.0;
            double t63902 = -t63903+t63851;
            double t63904 = 1.0/(t63834*t63834);
            double t63905 = t63904*t63852;
            double t63906 = t63905+t63854;
            double t63907 = t63903-t63851;
            double t63908 = 1.0/pow(t63834,5.0/3.0);
            double t63909 = 1.0/sqrt(t63836);
            double t63910 = 1.0/t63847;
            double t63911 = 1.0/(t63844*t63844);
            double t63912 = b4p*t63908*t63775*(2.0/3.0);
            double t63913 = b2p*c*t63890*(1.0/3.0);
            double t63914 = b1p*c*t63890*t63909*(1.0/6.0);
            double t63915 = b3p*c*t63890*t63837*(1.0/2.0);
            double t63916 = t63912+t63913+t63914+t63915;
            double t63917 = 1.0/d2fz0;
            double t63918 = 1.0/Aa;
            double t63919 = b1a*t63837;
            double t63920 = b3a*t63838;
            double t63921 = b4a*t63775*t63839;
            double t63922 = b2a*c*t63835;
            double t63923 = t63920+t63921+t63922+t63919;
            double t63924 = 1.0/t63923;
            double t63925 = t63924*t63918*(1.0/2.0);
            double t63926 = t63925+1.0;
            double t63927 = log(t63926);
            double t63928 = a1a*c*t63835;
            double t63929 = t63928+1.0;
            double t63930 = 1.0/(t63834*t63834*t63834*t63834*t63834);
            double t63931 = pow(t63858,1.0/3.0);
            double t63932 = t63931*t63906*(4.0/3.0);
            double t63933 = pow(t63860,1.0/3.0);
            double t63934 = t63932-t63906*t63933*(4.0/3.0);
            double t63935 = t63856*t63857;
            double t63936 = t63935-1.0;
            double t63937 = 1.0/pow(rho_b[index],4.0/3.0);
            double t63938 = 1.0/pow(rho_b[index],5.0/3.0);
            double t63939 = 1.0/sqrt(t63772);
            double t63940 = 1.0/t63785;
            double t63941 = 1.0/(t63782*t63782);
            double t63942 = b4p*t63775*t63938*(2.0/3.0);
            double t63943 = b2p*c*t63937*(1.0/3.0);
            double t63944 = b1p*c*t63937*t63939*(1.0/6.0);
            double t63945 = b3p*c*t63773*t63937*(1.0/2.0);
            double t63946 = t63942+t63943+t63944+t63945;
            double t63947 = t63940*t63941*t63946*t63788;
            double t63948 = t63832-t63833;
            double t63949 = t63802*t63948*t63799;
            double t63950 = Aa*t63802*t63862*t63917*t63927*t63936*t63929*2.0;
            double t63951 = a1p*c*c0p*t63890*t63848*(2.0/3.0);
            double t63952 = t63833+t63949;
            double t63953 = gamma_bb[index]*gcaa*t63794*4.0;
            double t63954 = gamma_bb[index]*gcaa*t63790*t63795*t63789*4.0;
            double t63955 = t63790*t63796*t63789*6.0;
            double t63956 = t63791*t63792*t63793;
            double t63957 = t63953+t63954+t63955+t63956+1.0;
            double t63958 = 1.0/t63957;
            double t63959 = gamma_bb[index]*gcaa*t63794;
            double t63960 = t63959+1.0;
            double t63961 = 1.0/t63960;
            double t63962 = gamma_bb[index]*gcaa*t63794*3.0;
            double t63963 = gamma_bb[index]*gcaa*t63790*t63795*t63789;
            double t63964 = t63790*t63796*t63789*3.0;
            double t63965 = t63962+t63963+t63964+1.0;
            double t63966 = 1.0/t63965;
            double t63967 = gamma_bb[index]*gcaa*t63794*2.0;
            double t63968 = t63790*t63796*t63789;
            double t63969 = t63967+t63968+1.0;
            double t63970 = 1.0/t63969;
            double t63971 = 1.0/pow(rho_b[index],1.9E1/3.0);
            double t63972 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
               rho_b[index]*rho_b[index]*rho_b[index]);
            double t63973 = 1.0/pow(rho_b[index],3.5E1/3.0);
            double t63974 = gx*gx;
            double t63975 = t63974*t63974;
            double t63976 = gamma_bb[index]*gx*t63794*4.0;
            double t63977 = gamma_bb[index]*gx*t63974*t63795*t63789*4.0;
            double t63978 = t63974*t63796*t63789*6.0;
            double t63979 = t63791*t63793*t63975;
            double t63980 = t63976+t63977+t63978+t63979+1.0;
            double t63981 = 1.0/t63980;
            double t63982 = gamma_bb[index]*gx*t63794;
            double t63983 = t63982+1.0;
            double t63984 = 1.0/t63983;
            double t63985 = gamma_bb[index]*gx*t63794*3.0;
            double t63986 = gamma_bb[index]*gx*t63974*t63795*t63789;
            double t63987 = t63974*t63796*t63789*3.0;
            double t63988 = t63985+t63986+t63987+1.0;
            double t63989 = 1.0/t63988;
            double t63990 = gamma_bb[index]*gx*t63794*2.0;
            double t63991 = t63974*t63796*t63789;
            double t63992 = t63990+t63991+1.0;
            double t63993 = 1.0/t63992;
            double t63994 = 1.0/t63828;
            double t63995 = 1.0/(t63825*t63825);
            double t63996 = b4f*t63775*t63938*(2.0/3.0);
            double t63997 = b2f*c*t63937*(1.0/3.0);
            double t63998 = b1f*c*t63937*t63939*(1.0/6.0);
            double t63999 = b3f*c*t63773*t63937*(1.0/2.0);
            double t64000 = t63996+t63997+t63998+t63999;
            double t64001 = a1f*c*c0f*t63829*t63937*(2.0/3.0);
            double t64002 = a1p*c*c0p*t63937*t63786*(2.0/3.0);
            double t64003 = ccaa4*t63791*t63792*t63793*t63958;
            double t64004 = ccaa1*gamma_bb[index]*gcaa*t63961*t63794;
            double t64005 = ccaa3*gamma_bb[index]*gcaa*t63790*t63795*t63966*t63789;
            double t64006 = ccaa2*t63790*t63970*t63796*t63789;
            double t64007 = ccaa0+t64003+t64004+t64005+t64006;
            v_rho_b_[index] = -t64007*(t63833+t63802*t63799*(t63832-c0p*t63786*t63788*2.0))-(ccab0+ccab1*gcab* \
               t63864*t63888+ccab2*t63863*t63865*t63886+ccab4*t63870*t63871*t63889+ccab3*gcab*t63863*t63864*t63865* \
               t63887)*(-t63833+t63851+t63950-t63949+rho_b[index]*(-t63947+t64002+t63802*t63799*(t63947+t64001-t63831* \
               t63994*t63995*t64000-a1p*c*c0p*t63937*t63786*(2.0/3.0)))-t63834*(t63951-t63910*t63911*t63850*t63916+ \
               t63802*t63930*t63862*t63907*t63857*4.0+t63802*t63907*t63934*t63856*t63857-t63802*t63862*t63856*t63857* \
               (t63951-t63910*t63911*t63850*t63916+(t63901*1.0/(t63895*t63895)*(b2f*c*t63890*(1.0/3.0)+b4f*t63908* \
               t63775*(2.0/3.0)+b1f*c*t63890*t63909*(1.0/6.0)+b3f*c*t63890*t63837*(1.0/2.0)))/t63898-a1f*c*c0f*t63890* \
               t63899*(2.0/3.0))-t63802*t63902*t63852*t63853*t63862*t63856*4.0+Aa*t63802*t63862*t63917*t63927*t63929* \
               (t63930*t63857*4.0+t63852*t63853*t63856*4.0)*2.0+Aa*t63802*t63934*t63917*t63927*t63936*t63929*2.0- \
               (t63802*1.0/(t63923*t63923)*t63862*t63917*t63936*t63929*(b2a*c*t63890*(1.0/3.0)+b4a*t63908*t63775* \
               (2.0/3.0)+b1a*c*t63890*t63909*(1.0/6.0)+b3a*c*t63890*t63837*(1.0/2.0)))/t63926+Aa*a1a*c*t63802*t63862* \
               t63890*t63917*t63927*t63936*(2.0/3.0))+t63802*t63862*t63907*t63856*t63857)-(rho_b[index]*t63952+rho_a[index]* \
               (t63820-t63802*t63799*(t63820-c0f*log((t63803*(1.0/2.0))/(b1f*t63806+b3f*t63807+b2f*c*t63804+b4f*t63808* \
               t63775)+1.0)*(a1f*c*t63804+1.0)*2.0))-t63834*(t63851+t63950-t63802*t63902*t63862*t63856*t63857))*(ccab1* \
               gamma_bb[index]*gcab*t63866*t63888*(4.0/3.0)-ccab2*t63863*1.0/(t63881*t63881)*t63865*(gamma_bb[index]* \
               gcab*t63866*(8.0/3.0)+gamma_bb[index]*t63863*t63864*t63866*(8.0/3.0))-ccab4*t63870*t63871*1.0/(t63876* \
               t63876)*(gamma_bb[index]*gcab*t63866*(1.6E1/3.0)+gamma_bb[index]*t63863*t63864*t63866*1.6E1+gamma_bb[index]* \
               gcab*t63863*t63865*t63866*1.6E1+gamma_bb[index]*t63870*t63864*t63865*t63866*(1.6E1/3.0))-ccab1*gamma_bb[index]* \
               t63863*t63864*t63866*1.0/(t63878*t63878)*(4.0/3.0)+ccab2*gamma_bb[index]*t63863*t63864*t63866*t63886* \
               (8.0/3.0)-ccab3*gcab*t63863*t63864*t63865*1.0/(t63885*t63885)*(gamma_bb[index]*gcab*t63866*4.0+gamma_bb[index]* \
               t63863*t63864*t63866*8.0+gamma_bb[index]*gcab*t63863*t63865*t63866*4.0)+ccab3*gamma_bb[index]*gcab* \
               t63863*t63865*t63866*t63887*4.0+ccab4*gamma_bb[index]*t63870*t63864*t63865*t63866*t63889*(1.6E1/3.0) \
               )+rho_b[index]*t63952*(ccaa1*gamma_bb[index]*gcaa*t63961*t63866*(8.0/3.0)+ccaa2*t63790*t63970*t63971* \
               t63789*(1.6E1/3.0)+ccaa4*t63791*t63792*t63973*t63958*(3.2E1/3.0)-ccaa1*1.0/(t63960*t63960)*t63790* \
               t63971*t63789*(8.0/3.0)-ccaa2*t63790*t63796*t63789*1.0/(t63969*t63969)*(gamma_bb[index]*gcaa*t63866* \
               (1.6E1/3.0)+t63790*t63971*t63789*(1.6E1/3.0))-ccaa4*t63791*t63792*t63793*1.0/(t63957*t63957)*(gamma_bb[index]* \
               gcaa*t63866*(3.2E1/3.0)+t63791*t63792*t63973*(3.2E1/3.0)+t63790*t63971*t63789*3.2E1+gamma_bb[index]* \
               gcaa*t63790*t63972*t63789*3.2E1)+ccaa3*gamma_bb[index]*gcaa*t63790*t63972*t63966*t63789*8.0-ccaa3* \
               gamma_bb[index]*gcaa*t63790*1.0/(t63965*t63965)*t63795*t63789*(gamma_bb[index]*gcaa*t63866*8.0+t63790* \
               t63971*t63789*1.6E1+gamma_bb[index]*gcaa*t63790*t63972*t63789*8.0))+c0*pow(rho_b[index],1.0/3.0)*(cx0+ \
               cx1*gamma_bb[index]*gx*t63794*t63984+cx2*t63974*t63993*t63796*t63789+cx4*t63791*t63981*t63793*t63975+ \
               cx3*gamma_bb[index]*gx*t63974*t63795*t63789*t63989)*(4.0/3.0)+rho_b[index]*t64007*(-t63947+t64002+ \
               t63802*t63799*(t63947+t64001-t64002-t63831*t63994*t63995*t64000))-c0*pow(rho_b[index],4.0/3.0)*(cx1* \
               gamma_bb[index]*gx*t63866*t63984*(8.0/3.0)+cx2*t63971*t63974*t63993*t63789*(1.6E1/3.0)+cx4*t63791* \
               t63981*t63973*t63975*(3.2E1/3.0)-cx1*t63971*t63974*1.0/(t63983*t63983)*t63789*(8.0/3.0)-cx2*t63974* \
               1.0/(t63992*t63992)*t63796*t63789*(gamma_bb[index]*gx*t63866*(1.6E1/3.0)+t63971*t63974*t63789*(1.6E1/ \
               3.0))-cx4*t63791*1.0/(t63980*t63980)*t63793*t63975*(gamma_bb[index]*gx*t63866*(3.2E1/3.0)+t63791*t63973* \
               t63975*(3.2E1/3.0)+t63971*t63974*t63789*3.2E1+gamma_bb[index]*gx*t63972*t63974*t63789*3.2E1)+cx3*gamma_bb[index]* \
               gx*t63972*t63974*t63789*t63989*8.0-cx3*gamma_bb[index]*gx*t63974*t63795*t63789*1.0/(t63988*t63988) \
               *(gamma_bb[index]*gx*t63866*8.0+t63971*t63974*t63789*1.6E1+gamma_bb[index]*gx*t63972*t63974*t63789* \
               8.0));
        } else if (rho_a[index] > cutoff_) {
            v_rho_b_[index] = 0.0;
        } else if (rho_b[index] > cutoff_) {
            double t66954 = 1.0/pow(rho_b[index],1.0/3.0);
            double t66955 = c*t66954;
            double t66956 = sqrt(t66955);
            double t66957 = pow(t66955,3.0/2.0);
            double t66958 = c*c;
            double t66959 = 1.0/pow(rho_b[index],2.0/3.0);
            double t66960 = 1.0/c0p;
            double t66961 = b1p*t66956;
            double t66962 = b3p*t66957;
            double t66963 = b4p*t66958*t66959;
            double t66964 = b2p*c*t66954;
            double t66965 = t66961+t66962+t66963+t66964;
            double t66966 = 1.0/t66965;
            double t66967 = t66960*t66966*(1.0/2.0);
            double t66968 = t66967+1.0;
            double t66969 = log(t66968);
            double t66970 = a1p*c*t66954;
            double t66971 = t66970+1.0;
            double t66972 = gamma_bb[index]*gamma_bb[index];
            double t66973 = gcaa*gcaa;
            double t66974 = t66972*t66972;
            double t66975 = t66973*t66973;
            double t66976 = 1.0/pow(rho_b[index],3.2E1/3.0);
            double t66977 = 1.0/pow(rho_b[index],8.0/3.0);
            double t66978 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
               rho_b[index]*rho_b[index]);
            double t66979 = 1.0/pow(rho_b[index],1.6E1/3.0);
            double t66980 = pow(2.0,1.0/3.0);
            double t66981 = t66980*2.0;
            double t66982 = t66981-2.0;
            double t66983 = two_13*2.0;
            double t66984 = t66983-2.0;
            double t66985 = 1.0/t66984;
            double t66986 = 1.0/c0f;
            double t66987 = b1f*t66956;
            double t66988 = b3f*t66957;
            double t66989 = b4f*t66958*t66959;
            double t66990 = b2f*c*t66954;
            double t66991 = t66990+t66987+t66988+t66989;
            double t66992 = 1.0/t66991;
            double t66993 = t66992*t66986*(1.0/2.0);
            double t66994 = t66993+1.0;
            double t66995 = log(t66994);
            double t66996 = a1f*c*t66954;
            double t66997 = t66996+1.0;
            double t66998 = c0f*t66995*t66997*2.0;
            double t66999 = c0p*t66971*t66969*2.0;
            double t67000 = gamma_bb[index]*gcaa*t66977*4.0;
            double t67001 = gamma_bb[index]*gcaa*t66972*t66973*t66978*4.0;
            double t67002 = t66972*t66973*t66979*6.0;
            double t67003 = t66974*t66975*t66976;
            double t67004 = t67000+t67001+t67002+t67003+1.0;
            double t67005 = 1.0/t67004;
            double t67006 = gamma_bb[index]*gcaa*t66977;
            double t67007 = t67006+1.0;
            double t67008 = 1.0/t67007;
            double t67009 = gamma_bb[index]*gcaa*t66977*3.0;
            double t67010 = gamma_bb[index]*gcaa*t66972*t66973*t66978;
            double t67011 = t66972*t66973*t66979*3.0;
            double t67012 = t67010+t67011+t67009+1.0;
            double t67013 = 1.0/t67012;
            double t67014 = gamma_bb[index]*gcaa*t66977*2.0;
            double t67015 = t66972*t66973*t66979;
            double t67016 = t67014+t67015+1.0;
            double t67017 = 1.0/t67016;
            double t67018 = 1.0/pow(rho_b[index],1.9E1/3.0);
            double t67019 = 1.0/pow(rho_b[index],1.1E1/3.0);
            double t67020 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
               rho_b[index]*rho_b[index]*rho_b[index]);
            double t67021 = 1.0/pow(rho_b[index],3.5E1/3.0);
            double t67022 = gx*gx;
            double t67023 = t67022*t67022;
            double t67024 = gamma_bb[index]*gx*t66977*4.0;
            double t67025 = gamma_bb[index]*gx*t66972*t66978*t67022*4.0;
            double t67026 = t66972*t66979*t67022*6.0;
            double t67027 = t66974*t66976*t67023;
            double t67028 = t67024+t67025+t67026+t67027+1.0;
            double t67029 = 1.0/t67028;
            double t67030 = gamma_bb[index]*gx*t66977;
            double t67031 = t67030+1.0;
            double t67032 = 1.0/t67031;
            double t67033 = gamma_bb[index]*gx*t66977*3.0;
            double t67034 = gamma_bb[index]*gx*t66972*t66978*t67022;
            double t67035 = t66972*t66979*t67022*3.0;
            double t67036 = t67033+t67034+t67035+1.0;
            double t67037 = 1.0/t67036;
            double t67038 = gamma_bb[index]*gx*t66977*2.0;
            double t67039 = t66972*t66979*t67022;
            double t67040 = t67038+t67039+1.0;
            double t67041 = 1.0/t67040;
            double t67042 = 1.0/pow(rho_b[index],4.0/3.0);
            double t67043 = 1.0/pow(rho_b[index],5.0/3.0);
            double t67044 = 1.0/sqrt(t66955);
            double t67045 = 1.0/t66968;
            double t67046 = 1.0/(t66965*t66965);
            double t67047 = b4p*t66958*t67043*(2.0/3.0);
            double t67048 = b2p*c*t67042*(1.0/3.0);
            double t67049 = b1p*c*t67042*t67044*(1.0/6.0);
            double t67050 = b3p*c*t66956*t67042*(1.0/2.0);
            double t67051 = t67050+t67047+t67048+t67049;
            double t67052 = t66971*t67051*t67045*t67046;
            double t67053 = ccaa4*t66974*t66975*t66976*t67005;
            double t67054 = ccaa1*gamma_bb[index]*gcaa*t66977*t67008;
            double t67055 = ccaa3*gamma_bb[index]*gcaa*t66972*t66973*t66978*t67013;
            double t67056 = ccaa2*t66972*t66973*t66979*t67017;
            double t67057 = ccaa0+t67053+t67054+t67055+t67056;
            v_rho_b_[index] = -t67057*(t66999+t66982*t66985*(t66998-c0p*t66971*t66969*2.0))+rho_b[index]*t67057* \
               (-t67052+t66982*t66985*(t67052-(1.0/(t66991*t66991)*t66997*(b2f*c*t67042*(1.0/3.0)+b4f*t66958*t67043* \
               (2.0/3.0)+b1f*c*t67042*t67044*(1.0/6.0)+b3f*c*t66956*t67042*(1.0/2.0)))/t66994+a1f*c*c0f*t66995*t67042* \
               (2.0/3.0)-a1p*c*c0p*t66969*t67042*(2.0/3.0))+a1p*c*c0p*t66969*t67042*(2.0/3.0))+c0*pow(rho_b[index],1.0/ \
               3.0)*(cx0+cx1*gamma_bb[index]*gx*t66977*t67032+cx2*t66972*t66979*t67022*t67041+cx4*t66974*t66976*t67023* \
               t67029+cx3*gamma_bb[index]*gx*t66972*t66978*t67022*t67037)*(4.0/3.0)+rho_b[index]*(t66999+t66982*t66985* \
               (t66998-t66999))*(ccaa1*gamma_bb[index]*gcaa*t67008*t67019*(8.0/3.0)+ccaa4*t66974*t66975*t67021*t67005* \
               (3.2E1/3.0)+ccaa2*t66972*t66973*t67017*t67018*(1.6E1/3.0)-ccaa1*t66972*t66973*1.0/(t67007*t67007)* \
               t67018*(8.0/3.0)-ccaa2*t66972*t66973*t66979*1.0/(t67016*t67016)*(gamma_bb[index]*gcaa*t67019*(1.6E1/ \
               3.0)+t66972*t66973*t67018*(1.6E1/3.0))-ccaa4*t66974*t66975*t66976*1.0/(t67004*t67004)*(gamma_bb[index]* \
               gcaa*t67019*(3.2E1/3.0)+t66974*t66975*t67021*(3.2E1/3.0)+t66972*t66973*t67018*3.2E1+gamma_bb[index]* \
               gcaa*t66972*t66973*t67020*3.2E1)+ccaa3*gamma_bb[index]*gcaa*t66972*t66973*t67020*t67013*8.0-ccaa3* \
               gamma_bb[index]*gcaa*t66972*t66973*t66978*1.0/(t67012*t67012)*(gamma_bb[index]*gcaa*t67019*8.0+t66972* \
               t66973*t67018*1.6E1+gamma_bb[index]*gcaa*t66972*t66973*t67020*8.0))-c0*pow(rho_b[index],4.0/3.0)*(cx1* \
               gamma_bb[index]*gx*t67032*t67019*(8.0/3.0)+cx2*t66972*t67022*t67041*t67018*(1.6E1/3.0)+cx4*t66974* \
               t67021*t67023*t67029*(3.2E1/3.0)-cx1*t66972*t67022*1.0/(t67031*t67031)*t67018*(8.0/3.0)-cx2*t66972* \
               t66979*t67022*1.0/(t67040*t67040)*(gamma_bb[index]*gx*t67019*(1.6E1/3.0)+t66972*t67022*t67018*(1.6E1/ \
               3.0))-cx4*t66974*t66976*t67023*1.0/(t67028*t67028)*(gamma_bb[index]*gx*t67019*(3.2E1/3.0)+t66974*t67021* \
               t67023*(3.2E1/3.0)+t66972*t67022*t67018*3.2E1+gamma_bb[index]*gx*t66972*t67020*t67022*3.2E1)+cx3*gamma_bb[index]* \
               gx*t66972*t67020*t67022*t67037*8.0-cx3*gamma_bb[index]*gx*t66972*t66978*t67022*1.0/(t67036*t67036) \
               *(gamma_bb[index]*gx*t67019*8.0+t66972*t67022*t67018*1.6E1+gamma_bb[index]*gx*t66972*t67020*t67022* \
               8.0));
        } else {
            v_rho_b_[index] = 0.0;
        } 

        if (is_gga_) {

            //V_gamma_aa
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t64009 = 1.0/pow(rho_a[index],1.0/3.0);
                double t64010 = c*t64009;
                double t64011 = sqrt(t64010);
                double t64012 = pow(t64010,3.0/2.0);
                double t64013 = c*c;
                double t64014 = 1.0/pow(rho_a[index],2.0/3.0);
                double t64015 = 1.0/c0p;
                double t64016 = b1p*t64011;
                double t64017 = b3p*t64012;
                double t64018 = b4p*t64013*t64014;
                double t64019 = b2p*c*t64009;
                double t64020 = t64016+t64017+t64018+t64019;
                double t64021 = 1.0/t64020;
                double t64022 = t64021*t64015*(1.0/2.0);
                double t64023 = t64022+1.0;
                double t64024 = log(t64023);
                double t64025 = a1p*c*t64009;
                double t64026 = t64025+1.0;
                double t64027 = pow(2.0,1.0/3.0);
                double t64028 = t64027*2.0;
                double t64029 = t64028-2.0;
                double t64030 = two_13*2.0;
                double t64031 = t64030-2.0;
                double t64032 = 1.0/t64031;
                double t64033 = 1.0/c0f;
                double t64034 = 1.0/pow(rho_b[index],1.0/3.0);
                double t64035 = c*t64034;
                double t64036 = sqrt(t64035);
                double t64037 = pow(t64035,3.0/2.0);
                double t64038 = 1.0/pow(rho_b[index],2.0/3.0);
                double t64039 = b1p*t64036;
                double t64040 = b3p*t64037;
                double t64041 = b4p*t64013*t64038;
                double t64042 = b2p*c*t64034;
                double t64043 = t64040+t64041+t64042+t64039;
                double t64044 = 1.0/t64043;
                double t64045 = t64015*t64044*(1.0/2.0);
                double t64046 = t64045+1.0;
                double t64047 = log(t64046);
                double t64048 = a1p*c*t64034;
                double t64049 = t64048+1.0;
                double t64050 = c0p*t64047*t64049*2.0;
                double t64051 = rho_a[index]+rho_b[index];
                double t64052 = 1.0/pow(t64051,1.0/3.0);
                double t64053 = c*t64052;
                double t64054 = sqrt(t64053);
                double t64055 = pow(t64053,3.0/2.0);
                double t64056 = 1.0/pow(t64051,2.0/3.0);
                double t64057 = b1p*t64054;
                double t64058 = b3p*t64055;
                double t64059 = b4p*t64013*t64056;
                double t64060 = b2p*c*t64052;
                double t64061 = t64060+t64057+t64058+t64059;
                double t64062 = 1.0/t64061;
                double t64063 = t64015*t64062*(1.0/2.0);
                double t64064 = t64063+1.0;
                double t64065 = log(t64064);
                double t64066 = a1p*c*t64052;
                double t64067 = t64066+1.0;
                double t64068 = c0p*t64065*t64067*2.0;
                double t64069 = rho_a[index]-rho_b[index];
                double t64070 = t64069*t64069;
                double t64071 = 1.0/t64051;
                double t64072 = t64071*t64069;
                double t64073 = 1.0/(t64051*t64051*t64051*t64051);
                double t64074 = t64070*t64070;
                double t64075 = t64072+1.0;
                double t64076 = pow(t64075,4.0/3.0);
                double t64077 = -t64072+1.0;
                double t64078 = pow(t64077,4.0/3.0);
                double t64079 = t64076+t64078-2.0;
                double t64080 = 1.0/pow(rho_a[index],8.0/3.0);
                double t64081 = gamma_aa[index]*t64080*(1.0/2.0);
                double t64082 = 1.0/pow(rho_b[index],8.0/3.0);
                double t64083 = gamma_bb[index]*t64082*(1.0/2.0);
                double t64084 = t64081+t64083;
                double t64085 = gcab*t64084;
                double t64086 = t64085+1.0;
                double t64087 = gcab*gcab;
                double t64088 = t64084*t64084;
                double t64089 = t64087*t64087;
                double t64090 = t64088*t64088;
                double t64091 = t64087*t64088;
                double t64092 = gcab*t64084*2.0;
                double t64093 = t64091+t64092+1.0;
                double t64094 = t64087*t64088*3.0;
                double t64095 = gcab*t64084*t64087*t64088;
                double t64096 = gcab*t64084*3.0;
                double t64097 = t64094+t64095+t64096+1.0;
                double t64098 = t64087*t64088*6.0;
                double t64099 = gcab*t64084*t64087*t64088*4.0;
                double t64100 = t64090*t64089;
                double t64101 = gcab*t64084*4.0;
                double t64102 = t64100+t64101+t64098+t64099+1.0;
                double t64103 = c0p*t64024*t64026*2.0;
                double t64104 = gamma_aa[index]*gamma_aa[index];
                double t64105 = gx*gx;
                double t64106 = t64105*t64105;
                double t64107 = 1.0/pow(rho_a[index],3.2E1/3.0);
                double t64108 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t64109 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t64110 = gamma_aa[index]*gx*t64080;
                double t64111 = t64110+1.0;
                double t64112 = gamma_aa[index]*gx*t64080*3.0;
                double t64113 = gamma_aa[index]*gx*t64104*t64105*t64109;
                double t64114 = t64104*t64105*t64108*3.0;
                double t64115 = t64112+t64113+t64114+1.0;
                double t64116 = t64104*t64104;
                double t64117 = gamma_aa[index]*gx*t64080*4.0;
                double t64118 = gamma_aa[index]*gx*t64104*t64105*t64109*4.0;
                double t64119 = t64104*t64105*t64108*6.0;
                double t64120 = t64106*t64107*t64116;
                double t64121 = t64120+t64117+t64118+t64119+1.0;
                double t64122 = gamma_aa[index]*gx*t64080*2.0;
                double t64123 = t64104*t64105*t64108;
                double t64124 = t64122+t64123+1.0;
                double t64125 = b1f*t64011;
                double t64126 = b3f*t64012;
                double t64127 = b4f*t64013*t64014;
                double t64128 = b2f*c*t64009;
                double t64129 = t64125+t64126+t64127+t64128;
                double t64130 = 1.0/t64129;
                double t64131 = t64130*t64033*(1.0/2.0);
                double t64132 = t64131+1.0;
                double t64133 = log(t64132);
                double t64134 = a1f*c*t64009;
                double t64135 = t64134+1.0;
                double t64136 = t64103-c0f*t64133*t64135*2.0;
                double t64137 = t64103-t64032*t64136*t64029;
                double t64138 = gcaa*gcaa;
                double t64139 = t64138*t64138;
                double t64140 = gamma_aa[index]*gcaa*t64080;
                double t64141 = t64140+1.0;
                double t64142 = gamma_aa[index]*gcaa*t64080*3.0;
                double t64143 = gamma_aa[index]*gcaa*t64104*t64109*t64138;
                double t64144 = t64104*t64108*t64138*3.0;
                double t64145 = t64142+t64143+t64144+1.0;
                double t64146 = gamma_aa[index]*gcaa*t64080*4.0;
                double t64147 = gamma_aa[index]*gcaa*t64104*t64109*t64138*4.0;
                double t64148 = t64104*t64108*t64138*6.0;
                double t64149 = t64107*t64116*t64139;
                double t64150 = t64146+t64147+t64148+t64149+1.0;
                double t64151 = gamma_aa[index]*gcaa*t64080*2.0;
                double t64152 = t64104*t64108*t64138;
                double t64153 = t64151+t64152+1.0;
                v_gamma_aa_[index] = (rho_a[index]*t64137+rho_b[index]*(t64050-t64032*t64029*(t64050-c0f*log((t64033* \
                   (1.0/2.0))/(b1f*t64036+b3f*t64037+b2f*c*t64034+b4f*t64013*t64038)+1.0)*(a1f*c*t64034+1.0)*2.0))-t64051* \
                   (t64068-t64032*t64073*t64074*t64079*(t64068-c0f*log((t64033*(1.0/2.0))/(b1f*t64054+b3f*t64055+b2f* \
                   c*t64052+b4f*t64013*t64056)+1.0)*(a1f*c*t64052+1.0)*2.0)+(Aa*t64032*t64079*log((1.0/2.0)/(Aa*(b1a* \
                   t64054+b3a*t64055+b2a*c*t64052+b4a*t64013*t64056))+1.0)*(t64073*t64074-1.0)*(a1a*c*t64052+1.0)*2.0) \
                   /d2fz0))*((ccab1*gcab*t64080*(1.0/2.0))/t64086-ccab4*1.0/(t64102*t64102)*t64090*t64089*(gcab*t64080* \
                   2.0+t64080*t64084*t64087*6.0+gcab*t64080*t64087*t64088*6.0+t64080*t64084*t64088*t64089*2.0)-ccab2* \
                   1.0/(t64093*t64093)*t64087*t64088*(gcab*t64080+t64080*t64084*t64087)+(ccab2*t64080*t64084*t64087)/ \
                   t64093-ccab1*t64080*t64084*1.0/(t64086*t64086)*t64087*(1.0/2.0)+(ccab3*gcab*t64080*t64087*t64088*(3.0/ \
                   2.0))/t64097+(ccab4*t64080*t64084*t64088*t64089*2.0)/t64102-ccab3*gcab*t64084*t64087*t64088*1.0/(t64097* \
                   t64097)*(gcab*t64080*(3.0/2.0)+t64080*t64084*t64087*3.0+gcab*t64080*t64087*t64088*(3.0/2.0)))-rho_a[index]* \
                   t64137*((ccaa1*gcaa*t64080)/t64141-ccaa1*gamma_aa[index]*1.0/(t64141*t64141)*t64108*t64138+(ccaa2* \
                   gamma_aa[index]*t64108*t64138*2.0)/t64153-ccaa2*t64104*t64108*1.0/(t64153*t64153)*t64138*(gcaa*t64080* \
                   2.0+gamma_aa[index]*t64108*t64138*2.0)+(ccaa4*gamma_aa[index]*t64104*t64107*t64139*4.0)/t64150+(ccaa3* \
                   gcaa*t64104*t64109*t64138*3.0)/t64145-ccaa4*1.0/(t64150*t64150)*t64107*t64116*t64139*(gcaa*t64080* \
                   4.0+gamma_aa[index]*t64108*t64138*1.2E1+gamma_aa[index]*t64104*t64107*t64139*4.0+gcaa*t64104*t64109* \
                   t64138*1.2E1)-ccaa3*gamma_aa[index]*gcaa*t64104*t64109*1.0/(t64145*t64145)*t64138*(gcaa*t64080*3.0+ \
                   gamma_aa[index]*t64108*t64138*6.0+gcaa*t64104*t64109*t64138*3.0))+c0*pow(rho_a[index],4.0/3.0)*((cx1* \
                   gx*t64080)/t64111-cx1*gamma_aa[index]*1.0/(t64111*t64111)*t64105*t64108+(cx2*gamma_aa[index]*t64105* \
                   t64108*2.0)/t64124-cx2*t64104*t64105*1.0/(t64124*t64124)*t64108*(gx*t64080*2.0+gamma_aa[index]*t64105* \
                   t64108*2.0)+(cx4*gamma_aa[index]*t64104*t64106*t64107*4.0)/t64121+(cx3*gx*t64104*t64105*t64109*3.0) \
                   /t64115-cx4*1.0/(t64121*t64121)*t64106*t64107*t64116*(gx*t64080*4.0+gamma_aa[index]*t64105*t64108* \
                   1.2E1+gamma_aa[index]*t64104*t64106*t64107*4.0+gx*t64104*t64105*t64109*1.2E1)-cx3*gamma_aa[index]* \
                   gx*t64104*t64105*1.0/(t64115*t64115)*t64109*(gx*t64080*3.0+gamma_aa[index]*t64105*t64108*6.0+gx*t64104* \
                   t64105*t64109*3.0));
            } else if (rho_a[index] > cutoff_) {
                double t67698 = 1.0/pow(rho_a[index],8.0/3.0);
                double t67699 = gamma_aa[index]*gamma_aa[index];
                double t67700 = gx*gx;
                double t67701 = t67700*t67700;
                double t67702 = 1.0/pow(rho_a[index],3.2E1/3.0);
                double t67703 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t67704 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t67705 = gamma_aa[index]*gx*t67698;
                double t67706 = t67705+1.0;
                double t67707 = gamma_aa[index]*gx*t67698*3.0;
                double t67708 = gamma_aa[index]*gx*t67700*t67704*t67699;
                double t67709 = t67700*t67703*t67699*3.0;
                double t67710 = t67707+t67708+t67709+1.0;
                double t67711 = t67699*t67699;
                double t67712 = gamma_aa[index]*gx*t67698*4.0;
                double t67713 = gamma_aa[index]*gx*t67700*t67704*t67699*4.0;
                double t67714 = t67700*t67703*t67699*6.0;
                double t67715 = t67701*t67702*t67711;
                double t67716 = t67712+t67713+t67714+t67715+1.0;
                double t67717 = gamma_aa[index]*gx*t67698*2.0;
                double t67718 = t67700*t67703*t67699;
                double t67719 = t67717+t67718+1.0;
                double t67720 = 1.0/pow(rho_a[index],1.0/3.0);
                double t67721 = c*t67720;
                double t67722 = sqrt(t67721);
                double t67723 = pow(t67721,3.0/2.0);
                double t67724 = c*c;
                double t67725 = 1.0/pow(rho_a[index],2.0/3.0);
                double t67726 = 1.0/c0p;
                double t67727 = b1p*t67722;
                double t67728 = b3p*t67723;
                double t67729 = b4p*t67724*t67725;
                double t67730 = b2p*c*t67720;
                double t67731 = t67730+t67727+t67728+t67729;
                double t67732 = 1.0/t67731;
                double t67733 = t67732*t67726*(1.0/2.0);
                double t67734 = t67733+1.0;
                double t67735 = log(t67734);
                double t67736 = a1p*c*t67720;
                double t67737 = t67736+1.0;
                double t67738 = gcaa*gcaa;
                double t67739 = t67738*t67738;
                double t67740 = gamma_aa[index]*gcaa*t67698;
                double t67741 = t67740+1.0;
                double t67742 = gamma_aa[index]*gcaa*t67698*3.0;
                double t67743 = gamma_aa[index]*gcaa*t67704*t67738*t67699;
                double t67744 = t67703*t67738*t67699*3.0;
                double t67745 = t67742+t67743+t67744+1.0;
                double t67746 = gamma_aa[index]*gcaa*t67698*4.0;
                double t67747 = gamma_aa[index]*gcaa*t67704*t67738*t67699*4.0;
                double t67748 = t67703*t67738*t67699*6.0;
                double t67749 = t67702*t67711*t67739;
                double t67750 = t67746+t67747+t67748+t67749+1.0;
                double t67751 = gamma_aa[index]*gcaa*t67698*2.0;
                double t67752 = t67703*t67738*t67699;
                double t67753 = t67751+t67752+1.0;
                v_gamma_aa_[index] = -rho_a[index]*(((pow(2.0,1.0/3.0)*2.0-2.0)*(c0f*log((1.0/2.0)/(c0f*(b1f*t67722+ \
                   b3f*t67723+b2f*c*t67720+b4f*t67724*t67725))+1.0)*(a1f*c*t67720+1.0)*2.0-c0p*t67735*t67737*2.0))/(two_13* \
                   2.0-2.0)+c0p*t67735*t67737*2.0)*((ccaa1*gcaa*t67698)/t67741-ccaa1*gamma_aa[index]*t67703*1.0/(t67741* \
                   t67741)*t67738+(ccaa2*gamma_aa[index]*t67703*t67738*2.0)/t67753-ccaa2*t67703*1.0/(t67753*t67753)*t67738* \
                   t67699*(gcaa*t67698*2.0+gamma_aa[index]*t67703*t67738*2.0)+(ccaa4*gamma_aa[index]*t67702*t67739*t67699* \
                   4.0)/t67750+(ccaa3*gcaa*t67704*t67738*t67699*3.0)/t67745-ccaa4*t67702*t67711*1.0/(t67750*t67750)*t67739* \
                   (gcaa*t67698*4.0+gamma_aa[index]*t67703*t67738*1.2E1+gamma_aa[index]*t67702*t67739*t67699*4.0+gcaa* \
                   t67704*t67738*t67699*1.2E1)-ccaa3*gamma_aa[index]*gcaa*t67704*1.0/(t67745*t67745)*t67738*t67699*(gcaa* \
                   t67698*3.0+gamma_aa[index]*t67703*t67738*6.0+gcaa*t67704*t67738*t67699*3.0))+c0*pow(rho_a[index],4.0/ \
                   3.0)*((cx1*gx*t67698)/t67706-cx1*gamma_aa[index]*t67700*t67703*1.0/(t67706*t67706)+(cx2*gamma_aa[index]* \
                   t67700*t67703*2.0)/t67719-cx2*t67700*t67703*1.0/(t67719*t67719)*t67699*(gx*t67698*2.0+gamma_aa[index]* \
                   t67700*t67703*2.0)+(cx4*gamma_aa[index]*t67701*t67702*t67699*4.0)/t67716+(cx3*gx*t67700*t67704*t67699* \
                   3.0)/t67710-cx4*t67701*t67702*t67711*1.0/(t67716*t67716)*(gx*t67698*4.0+gamma_aa[index]*t67700*t67703* \
                   1.2E1+gamma_aa[index]*t67701*t67702*t67699*4.0+gx*t67700*t67704*t67699*1.2E1)-cx3*gamma_aa[index]* \
                   gx*t67700*1.0/(t67710*t67710)*t67704*t67699*(gx*t67698*3.0+gamma_aa[index]*t67700*t67703*6.0+gx*t67700* \
                   t67704*t67699*3.0));
            } else if (rho_b[index] > cutoff_) {
                v_gamma_aa_[index] = 0.0;
            } else {
                v_gamma_aa_[index] = 0.0;
            } 

            //V_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_ab_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_ab_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_ab_[index] = 0.0;
            } else {
                v_gamma_ab_[index] = 0.0;
            } 

            //V_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t64156 = 1.0/pow(rho_a[index],1.0/3.0);
                double t64157 = c*t64156;
                double t64158 = sqrt(t64157);
                double t64159 = pow(t64157,3.0/2.0);
                double t64160 = c*c;
                double t64161 = 1.0/pow(rho_a[index],2.0/3.0);
                double t64162 = 1.0/c0p;
                double t64163 = b1p*t64158;
                double t64164 = b3p*t64159;
                double t64165 = b4p*t64160*t64161;
                double t64166 = b2p*c*t64156;
                double t64167 = t64163+t64164+t64165+t64166;
                double t64168 = 1.0/t64167;
                double t64169 = t64162*t64168*(1.0/2.0);
                double t64170 = t64169+1.0;
                double t64171 = log(t64170);
                double t64172 = a1p*c*t64156;
                double t64173 = t64172+1.0;
                double t64174 = pow(2.0,1.0/3.0);
                double t64175 = t64174*2.0;
                double t64176 = t64175-2.0;
                double t64177 = two_13*2.0;
                double t64178 = t64177-2.0;
                double t64179 = 1.0/t64178;
                double t64180 = 1.0/c0f;
                double t64181 = 1.0/pow(rho_b[index],1.0/3.0);
                double t64182 = c*t64181;
                double t64183 = sqrt(t64182);
                double t64184 = pow(t64182,3.0/2.0);
                double t64185 = 1.0/pow(rho_b[index],2.0/3.0);
                double t64186 = b1p*t64183;
                double t64187 = b3p*t64184;
                double t64188 = b4p*t64160*t64185;
                double t64189 = b2p*c*t64181;
                double t64190 = t64186+t64187+t64188+t64189;
                double t64191 = 1.0/t64190;
                double t64192 = t64162*t64191*(1.0/2.0);
                double t64193 = t64192+1.0;
                double t64194 = log(t64193);
                double t64195 = a1p*c*t64181;
                double t64196 = t64195+1.0;
                double t64197 = c0p*t64194*t64196*2.0;
                double t64198 = rho_a[index]+rho_b[index];
                double t64199 = 1.0/pow(t64198,1.0/3.0);
                double t64200 = c*t64199;
                double t64201 = sqrt(t64200);
                double t64202 = pow(t64200,3.0/2.0);
                double t64203 = 1.0/pow(t64198,2.0/3.0);
                double t64204 = b1p*t64201;
                double t64205 = b3p*t64202;
                double t64206 = b4p*t64203*t64160;
                double t64207 = b2p*c*t64199;
                double t64208 = t64204+t64205+t64206+t64207;
                double t64209 = 1.0/t64208;
                double t64210 = t64162*t64209*(1.0/2.0);
                double t64211 = t64210+1.0;
                double t64212 = log(t64211);
                double t64213 = a1p*c*t64199;
                double t64214 = t64213+1.0;
                double t64215 = c0p*t64212*t64214*2.0;
                double t64216 = rho_a[index]-rho_b[index];
                double t64217 = t64216*t64216;
                double t64218 = 1.0/t64198;
                double t64219 = t64216*t64218;
                double t64220 = 1.0/(t64198*t64198*t64198*t64198);
                double t64221 = t64217*t64217;
                double t64222 = t64219+1.0;
                double t64223 = pow(t64222,4.0/3.0);
                double t64224 = -t64219+1.0;
                double t64225 = pow(t64224,4.0/3.0);
                double t64226 = t64223+t64225-2.0;
                double t64227 = 1.0/pow(rho_b[index],8.0/3.0);
                double t64228 = 1.0/pow(rho_a[index],8.0/3.0);
                double t64229 = gamma_aa[index]*t64228*(1.0/2.0);
                double t64230 = gamma_bb[index]*t64227*(1.0/2.0);
                double t64231 = t64230+t64229;
                double t64232 = gcab*t64231;
                double t64233 = t64232+1.0;
                double t64234 = gcab*gcab;
                double t64235 = t64231*t64231;
                double t64236 = t64234*t64234;
                double t64237 = t64235*t64235;
                double t64238 = t64234*t64235;
                double t64239 = gcab*t64231*2.0;
                double t64240 = t64238+t64239+1.0;
                double t64241 = t64234*t64235*3.0;
                double t64242 = gcab*t64231*t64234*t64235;
                double t64243 = gcab*t64231*3.0;
                double t64244 = t64241+t64242+t64243+1.0;
                double t64245 = t64234*t64235*6.0;
                double t64246 = gcab*t64231*t64234*t64235*4.0;
                double t64247 = t64236*t64237;
                double t64248 = gcab*t64231*4.0;
                double t64249 = t64245+t64246+t64247+t64248+1.0;
                double t64250 = c0p*t64171*t64173*2.0;
                double t64251 = gamma_bb[index]*gamma_bb[index];
                double t64252 = gx*gx;
                double t64253 = t64252*t64252;
                double t64254 = 1.0/pow(rho_b[index],3.2E1/3.0);
                double t64255 = 1.0/pow(rho_b[index],1.6E1/3.0);
                double t64256 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]);
                double t64257 = gamma_bb[index]*gx*t64227;
                double t64258 = t64257+1.0;
                double t64259 = gamma_bb[index]*gx*t64227*3.0;
                double t64260 = gamma_bb[index]*gx*t64251*t64252*t64256;
                double t64261 = t64251*t64252*t64255*3.0;
                double t64262 = t64260+t64261+t64259+1.0;
                double t64263 = t64251*t64251;
                double t64264 = gamma_bb[index]*gx*t64227*4.0;
                double t64265 = gamma_bb[index]*gx*t64251*t64252*t64256*4.0;
                double t64266 = t64251*t64252*t64255*6.0;
                double t64267 = t64253*t64254*t64263;
                double t64268 = t64264+t64265+t64266+t64267+1.0;
                double t64269 = gamma_bb[index]*gx*t64227*2.0;
                double t64270 = t64251*t64252*t64255;
                double t64271 = t64270+t64269+1.0;
                double t64272 = b1f*t64183;
                double t64273 = b3f*t64184;
                double t64274 = b4f*t64160*t64185;
                double t64275 = b2f*c*t64181;
                double t64276 = t64272+t64273+t64274+t64275;
                double t64277 = 1.0/t64276;
                double t64278 = t64180*t64277*(1.0/2.0);
                double t64279 = t64278+1.0;
                double t64280 = log(t64279);
                double t64281 = a1f*c*t64181;
                double t64282 = t64281+1.0;
                double t64283 = t64197-c0f*t64280*t64282*2.0;
                double t64284 = t64197-t64283*t64176*t64179;
                double t64285 = gcaa*gcaa;
                double t64286 = t64285*t64285;
                double t64287 = gamma_bb[index]*gcaa*t64227;
                double t64288 = t64287+1.0;
                double t64289 = gamma_bb[index]*gcaa*t64227*3.0;
                double t64290 = gamma_bb[index]*gcaa*t64251*t64256*t64285;
                double t64291 = t64251*t64255*t64285*3.0;
                double t64292 = t64290+t64291+t64289+1.0;
                double t64293 = gamma_bb[index]*gcaa*t64227*4.0;
                double t64294 = gamma_bb[index]*gcaa*t64251*t64256*t64285*4.0;
                double t64295 = t64251*t64255*t64285*6.0;
                double t64296 = t64254*t64263*t64286;
                double t64297 = t64293+t64294+t64295+t64296+1.0;
                double t64298 = gamma_bb[index]*gcaa*t64227*2.0;
                double t64299 = t64251*t64255*t64285;
                double t64300 = t64298+t64299+1.0;
                v_gamma_bb_[index] = (rho_b[index]*t64284+rho_a[index]*(t64250-t64176*t64179*(t64250-c0f*log((t64180* \
                   (1.0/2.0))/(b1f*t64158+b3f*t64159+b2f*c*t64156+b4f*t64160*t64161)+1.0)*(a1f*c*t64156+1.0)*2.0))-t64198* \
                   (t64215-t64220*t64221*t64226*t64179*(t64215-c0f*log((t64180*(1.0/2.0))/(b1f*t64201+b3f*t64202+b2f* \
                   c*t64199+b4f*t64203*t64160)+1.0)*(a1f*c*t64199+1.0)*2.0)+(Aa*t64226*t64179*log((1.0/2.0)/(Aa*(b1a* \
                   t64201+b3a*t64202+b2a*c*t64199+b4a*t64203*t64160))+1.0)*(t64220*t64221-1.0)*(a1a*c*t64199+1.0)*2.0) \
                   /d2fz0))*((ccab1*gcab*t64227*(1.0/2.0))/t64233-ccab4*t64236*t64237*1.0/(t64249*t64249)*(gcab*t64227* \
                   2.0+t64231*t64234*t64227*6.0+gcab*t64234*t64235*t64227*6.0+t64231*t64235*t64227*t64236*2.0)-ccab2* \
                   1.0/(t64240*t64240)*t64234*t64235*(gcab*t64227+t64231*t64234*t64227)+(ccab2*t64231*t64234*t64227)/ \
                   t64240-ccab1*t64231*1.0/(t64233*t64233)*t64234*t64227*(1.0/2.0)+(ccab3*gcab*t64234*t64235*t64227*(3.0/ \
                   2.0))/t64244+(ccab4*t64231*t64235*t64227*t64236*2.0)/t64249-ccab3*gcab*t64231*t64234*t64235*1.0/(t64244* \
                   t64244)*(gcab*t64227*(3.0/2.0)+t64231*t64234*t64227*3.0+gcab*t64234*t64235*t64227*(3.0/2.0)))-rho_b[index]* \
                   t64284*((ccaa1*gcaa*t64227)/t64288+(ccaa2*gamma_bb[index]*t64255*t64285*2.0)/t64300-ccaa1*gamma_bb[index]* \
                   t64255*t64285*1.0/(t64288*t64288)-ccaa2*1.0/(t64300*t64300)*t64251*t64255*t64285*(gcaa*t64227*2.0+ \
                   gamma_bb[index]*t64255*t64285*2.0)+(ccaa4*gamma_bb[index]*t64251*t64254*t64286*4.0)/t64297+(ccaa3* \
                   gcaa*t64251*t64256*t64285*3.0)/t64292-ccaa4*t64254*t64263*t64286*1.0/(t64297*t64297)*(gcaa*t64227* \
                   4.0+gamma_bb[index]*t64255*t64285*1.2E1+gamma_bb[index]*t64251*t64254*t64286*4.0+gcaa*t64251*t64256* \
                   t64285*1.2E1)-ccaa3*gamma_bb[index]*gcaa*t64251*t64256*1.0/(t64292*t64292)*t64285*(gcaa*t64227*3.0+ \
                   gamma_bb[index]*t64255*t64285*6.0+gcaa*t64251*t64256*t64285*3.0))+c0*pow(rho_b[index],4.0/3.0)*((cx1* \
                   gx*t64227)/t64258-cx1*gamma_bb[index]*t64252*t64255*1.0/(t64258*t64258)+(cx2*gamma_bb[index]*t64252* \
                   t64255*2.0)/t64271-cx2*t64251*t64252*1.0/(t64271*t64271)*t64255*(gx*t64227*2.0+gamma_bb[index]*t64252* \
                   t64255*2.0)+(cx4*gamma_bb[index]*t64251*t64253*t64254*4.0)/t64268+(cx3*gx*t64251*t64252*t64256*3.0) \
                   /t64262-cx4*t64253*t64254*t64263*1.0/(t64268*t64268)*(gx*t64227*4.0+gamma_bb[index]*t64252*t64255* \
                   1.2E1+gamma_bb[index]*t64251*t64253*t64254*4.0+gx*t64251*t64252*t64256*1.2E1)-cx3*gamma_bb[index]* \
                   gx*t64251*t64252*1.0/(t64262*t64262)*t64256*(gx*t64227*3.0+gamma_bb[index]*t64252*t64255*6.0+gx*t64251* \
                   t64252*t64256*3.0));
            } else if (rho_a[index] > cutoff_) {
                v_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                double t67061 = 1.0/pow(rho_b[index],8.0/3.0);
                double t67062 = gamma_bb[index]*gamma_bb[index];
                double t67063 = gx*gx;
                double t67064 = t67063*t67063;
                double t67065 = 1.0/pow(rho_b[index],3.2E1/3.0);
                double t67066 = 1.0/pow(rho_b[index],1.6E1/3.0);
                double t67067 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]);
                double t67068 = gamma_bb[index]*gx*t67061;
                double t67069 = t67068+1.0;
                double t67070 = gamma_bb[index]*gx*t67061*3.0;
                double t67071 = gamma_bb[index]*gx*t67062*t67063*t67067;
                double t67072 = t67062*t67063*t67066*3.0;
                double t67073 = t67070+t67071+t67072+1.0;
                double t67074 = t67062*t67062;
                double t67075 = gamma_bb[index]*gx*t67061*4.0;
                double t67076 = gamma_bb[index]*gx*t67062*t67063*t67067*4.0;
                double t67077 = t67062*t67063*t67066*6.0;
                double t67078 = t67064*t67065*t67074;
                double t67079 = t67075+t67076+t67077+t67078+1.0;
                double t67080 = gamma_bb[index]*gx*t67061*2.0;
                double t67081 = t67062*t67063*t67066;
                double t67082 = t67080+t67081+1.0;
                double t67083 = 1.0/pow(rho_b[index],1.0/3.0);
                double t67084 = c*t67083;
                double t67085 = sqrt(t67084);
                double t67086 = pow(t67084,3.0/2.0);
                double t67087 = c*c;
                double t67088 = 1.0/pow(rho_b[index],2.0/3.0);
                double t67089 = 1.0/c0p;
                double t67090 = b1p*t67085;
                double t67091 = b3p*t67086;
                double t67092 = b4p*t67087*t67088;
                double t67093 = b2p*c*t67083;
                double t67094 = t67090+t67091+t67092+t67093;
                double t67095 = 1.0/t67094;
                double t67096 = t67095*t67089*(1.0/2.0);
                double t67097 = t67096+1.0;
                double t67098 = log(t67097);
                double t67099 = a1p*c*t67083;
                double t67100 = t67099+1.0;
                double t67101 = gcaa*gcaa;
                double t67102 = t67101*t67101;
                double t67103 = gamma_bb[index]*gcaa*t67061;
                double t67104 = t67103+1.0;
                double t67105 = gamma_bb[index]*gcaa*t67061*3.0;
                double t67106 = gamma_bb[index]*gcaa*t67101*t67062*t67067;
                double t67107 = t67101*t67062*t67066*3.0;
                double t67108 = t67105+t67106+t67107+1.0;
                double t67109 = gamma_bb[index]*gcaa*t67061*4.0;
                double t67110 = gamma_bb[index]*gcaa*t67101*t67062*t67067*4.0;
                double t67111 = t67101*t67062*t67066*6.0;
                double t67112 = t67102*t67065*t67074;
                double t67113 = t67110+t67111+t67112+t67109+1.0;
                double t67114 = gamma_bb[index]*gcaa*t67061*2.0;
                double t67115 = t67101*t67062*t67066;
                double t67116 = t67114+t67115+1.0;
                v_gamma_bb_[index] = -rho_b[index]*(((pow(2.0,1.0/3.0)*2.0-2.0)*(c0f*log((1.0/2.0)/(c0f*(b1f*t67085+ \
                   b3f*t67086+b2f*c*t67083+b4f*t67087*t67088))+1.0)*(a1f*c*t67083+1.0)*2.0-c0p*t67100*t67098*2.0))/(two_13* \
                   2.0-2.0)+c0p*t67100*t67098*2.0)*((ccaa1*gcaa*t67061)/t67104-ccaa1*gamma_bb[index]*t67101*1.0/(t67104* \
                   t67104)*t67066+(ccaa2*gamma_bb[index]*t67101*t67066*2.0)/t67116-ccaa2*t67101*t67062*1.0/(t67116*t67116) \
                   *t67066*(gcaa*t67061*2.0+gamma_bb[index]*t67101*t67066*2.0)+(ccaa4*gamma_bb[index]*t67102*t67062*t67065* \
                   4.0)/t67113+(ccaa3*gcaa*t67101*t67062*t67067*3.0)/t67108-ccaa4*t67102*1.0/(t67113*t67113)*t67065*t67074* \
                   (gcaa*t67061*4.0+gamma_bb[index]*t67101*t67066*1.2E1+gamma_bb[index]*t67102*t67062*t67065*4.0+gcaa* \
                   t67101*t67062*t67067*1.2E1)-ccaa3*gamma_bb[index]*gcaa*t67101*t67062*1.0/(t67108*t67108)*t67067*(gcaa* \
                   t67061*3.0+gamma_bb[index]*t67101*t67066*6.0+gcaa*t67101*t67062*t67067*3.0))+c0*pow(rho_b[index],4.0/ \
                   3.0)*((cx1*gx*t67061)/t67069-cx1*gamma_bb[index]*t67063*t67066*1.0/(t67069*t67069)+(cx2*gamma_bb[index]* \
                   t67063*t67066*2.0)/t67082-cx2*t67062*t67063*1.0/(t67082*t67082)*t67066*(gx*t67061*2.0+gamma_bb[index]* \
                   t67063*t67066*2.0)+(cx4*gamma_bb[index]*t67062*t67064*t67065*4.0)/t67079+(cx3*gx*t67062*t67063*t67067* \
                   3.0)/t67073-cx4*t67064*t67065*t67074*1.0/(t67079*t67079)*(gx*t67061*4.0+gamma_bb[index]*t67063*t67066* \
                   1.2E1+gamma_bb[index]*t67062*t67064*t67065*4.0+gx*t67062*t67063*t67067*1.2E1)-cx3*gamma_bb[index]* \
                   gx*t67062*t67063*1.0/(t67073*t67073)*t67067*(gx*t67061*3.0+gamma_bb[index]*t67063*t67066*6.0+gx*t67062* \
                   t67063*t67067*3.0));
            } else {
                v_gamma_bb_[index] = 0.0;
            } 
        }
        if (is_meta_) {

            //V_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_tau_a_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_tau_a_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_tau_a_[index] = 0.0;
            } else {
                v_tau_a_[index] = 0.0;
            } 

            //V_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_tau_b_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_tau_b_[index] = 0.0;
            } else {
                v_tau_b_[index] = 0.0;
            } 
        }
    }
    //Second Partials
    for (int index = 0; index < ntrue && deriv_ >= 2; index++) {

        //V_rho_a_rho_a
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t64304 = rho_a[index]+rho_b[index];
            double t64305 = 1.0/pow(t64304,1.0/3.0);
            double t64306 = c*t64305;
            double t64307 = sqrt(t64306);
            double t64308 = b1p*t64307;
            double t64309 = pow(t64306,3.0/2.0);
            double t64310 = b3p*t64309;
            double t64311 = c*c;
            double t64312 = 1.0/pow(t64304,2.0/3.0);
            double t64313 = b4p*t64311*t64312;
            double t64314 = b2p*c*t64305;
            double t64315 = t64310+t64313+t64314+t64308;
            double t64316 = 1.0/pow(t64304,4.0/3.0);
            double t64317 = 1.0/c0p;
            double t64318 = 1.0/t64315;
            double t64319 = t64317*t64318*(1.0/2.0);
            double t64320 = t64319+1.0;
            double t64321 = a1p*c*t64305;
            double t64322 = t64321+1.0;
            double t64323 = rho_a[index]-rho_b[index];
            double t64324 = t64323*t64323;
            double t64325 = 1.0/t64304;
            double t64326 = t64323*t64325;
            double t64327 = two_13*2.0;
            double t64328 = t64327-2.0;
            double t64329 = 1.0/t64328;
            double t64330 = 1.0/c0f;
            double t64331 = b1f*t64307;
            double t64332 = b3f*t64309;
            double t64333 = b4f*t64311*t64312;
            double t64334 = b2f*c*t64305;
            double t64335 = t64331+t64332+t64333+t64334;
            double t64336 = 1.0/t64335;
            double t64337 = t64330*t64336*(1.0/2.0);
            double t64338 = t64337+1.0;
            double t64339 = log(t64338);
            double t64340 = a1f*c*t64305;
            double t64341 = t64340+1.0;
            double t64342 = log(t64320);
            double t64352 = c0f*t64341*t64339*2.0;
            double t64353 = c0p*t64322*t64342*2.0;
            double t64343 = t64352-t64353;
            double t64344 = t64326+1.0;
            double t64345 = pow(t64344,4.0/3.0);
            double t64346 = -t64326+1.0;
            double t64347 = pow(t64346,4.0/3.0);
            double t64348 = t64345+t64347-2.0;
            double t64349 = 1.0/(t64304*t64304);
            double t64380 = t64323*t64349;
            double t64350 = t64325-t64380;
            double t64351 = 1.0/(t64304*t64304*t64304*t64304);
            double t64354 = t64324*t64324;
            double t64355 = 1.0/pow(t64304,5.0/3.0);
            double t64356 = 1.0/sqrt(t64306);
            double t64357 = 1.0/t64320;
            double t64358 = 1.0/(t64315*t64315);
            double t64359 = b4p*t64311*t64355*(2.0/3.0);
            double t64360 = b2p*c*t64316*(1.0/3.0);
            double t64361 = b1p*c*t64316*t64356*(1.0/6.0);
            double t64362 = b3p*c*t64307*t64316*(1.0/2.0);
            double t64363 = t64360+t64361+t64362+t64359;
            double t64364 = t64322*t64363*t64357*t64358;
            double t64365 = 1.0/(t64304*t64304*t64304*t64304*t64304);
            double t64366 = 1.0/d2fz0;
            double t64367 = 1.0/Aa;
            double t64368 = b1a*t64307;
            double t64369 = b3a*t64309;
            double t64370 = b4a*t64311*t64312;
            double t64371 = b2a*c*t64305;
            double t64372 = t64370+t64371+t64368+t64369;
            double t64373 = 1.0/t64372;
            double t64374 = t64373*t64367*(1.0/2.0);
            double t64375 = t64374+1.0;
            double t64376 = log(t64375);
            double t64377 = a1a*c*t64305;
            double t64378 = t64377+1.0;
            double t64379 = pow(t64344,1.0/3.0);
            double t64381 = t64350*t64379*(4.0/3.0);
            double t64382 = pow(t64346,1.0/3.0);
            double t64457 = t64350*t64382*(4.0/3.0);
            double t64383 = t64381-t64457;
            double t64384 = t64351*t64354;
            double t64385 = t64384-1.0;
            double t64386 = 1.0/pow(rho_a[index],1.0/3.0);
            double t64387 = c*t64386;
            double t64388 = sqrt(t64387);
            double t64389 = b1f*t64388;
            double t64390 = pow(t64387,3.0/2.0);
            double t64391 = b3f*t64390;
            double t64392 = 1.0/pow(rho_a[index],2.0/3.0);
            double t64393 = b4f*t64311*t64392;
            double t64394 = b2f*c*t64386;
            double t64395 = t64391+t64393+t64394+t64389;
            double t64396 = 1.0/pow(rho_a[index],4.0/3.0);
            double t64397 = b1p*t64388;
            double t64398 = b3p*t64390;
            double t64399 = b4p*t64311*t64392;
            double t64400 = b2p*c*t64386;
            double t64401 = t64400+t64397+t64398+t64399;
            double t64402 = 1.0/pow(rho_a[index],5.0/3.0);
            double t64403 = 1.0/sqrt(t64387);
            double t64404 = 1.0/t64395;
            double t64405 = t64330*t64404*(1.0/2.0);
            double t64406 = t64405+1.0;
            double t64407 = 1.0/t64401;
            double t64408 = t64317*t64407*(1.0/2.0);
            double t64409 = t64408+1.0;
            double t64410 = a1p*c*t64386;
            double t64411 = t64410+1.0;
            double t64412 = 1.0/t64409;
            double t64413 = 1.0/(t64401*t64401);
            double t64414 = b4p*t64311*t64402*(2.0/3.0);
            double t64415 = b2p*c*t64396*(1.0/3.0);
            double t64416 = b1p*c*t64403*t64396*(1.0/6.0);
            double t64417 = b3p*c*t64396*t64388*(1.0/2.0);
            double t64418 = t64414+t64415+t64416+t64417;
            double t64419 = t64411*t64412*t64413*t64418;
            double t64420 = log(t64409);
            double t64421 = pow(2.0,1.0/3.0);
            double t64422 = t64421*2.0;
            double t64423 = t64422-2.0;
            double t64424 = log(t64406);
            double t64425 = a1f*c*t64386;
            double t64426 = t64425+1.0;
            double t64427 = gcab*gcab;
            double t64431 = 1.0/pow(rho_a[index],8.0/3.0);
            double t64432 = gamma_aa[index]*t64431*(1.0/2.0);
            double t64433 = 1.0/pow(rho_b[index],8.0/3.0);
            double t64434 = gamma_bb[index]*t64433*(1.0/2.0);
            double t64428 = t64432+t64434;
            double t64429 = t64428*t64428;
            double t64430 = 1.0/pow(rho_a[index],1.1E1/3.0);
            double t64435 = t64427*t64427;
            double t64436 = t64429*t64429;
            double t64437 = t64427*t64429*6.0;
            double t64438 = gcab*t64427*t64428*t64429*4.0;
            double t64439 = t64435*t64436;
            double t64440 = gcab*t64428*4.0;
            double t64441 = t64440+t64437+t64438+t64439+1.0;
            double t64442 = gcab*t64428;
            double t64443 = t64442+1.0;
            double t64444 = t64427*t64429;
            double t64445 = gcab*t64428*2.0;
            double t64446 = t64444+t64445+1.0;
            double t64447 = t64427*t64429*3.0;
            double t64448 = gcab*t64427*t64428*t64429;
            double t64449 = gcab*t64428*3.0;
            double t64450 = t64447+t64448+t64449+1.0;
            double t64451 = 1.0/t64446;
            double t64452 = 1.0/t64450;
            double t64453 = 1.0/t64443;
            double t64454 = 1.0/t64441;
            double t64455 = 1.0/pow(t64304,7.0/3.0);
            double t64456 = 1.0/pow(t64304,8.0/3.0);
            double t64458 = 1.0/t64338;
            double t64459 = 1.0/(t64335*t64335);
            double t64460 = b4f*t64311*t64355*(2.0/3.0);
            double t64461 = b2f*c*t64316*(1.0/3.0);
            double t64462 = b1f*c*t64316*t64356*(1.0/6.0);
            double t64463 = b3f*c*t64307*t64316*(1.0/2.0);
            double t64464 = t64460+t64461+t64462+t64463;
            double t64465 = a1f*c*c0f*t64316*t64339*(2.0/3.0);
            double t64467 = t64341*t64464*t64458*t64459;
            double t64468 = a1p*c*c0p*t64342*t64316*(2.0/3.0);
            double t64466 = t64364+t64465-t64467-t64468;
            double t64469 = t64363*t64363;
            double t64470 = 1.0/pow(t64306,3.0/2.0);
            double t64471 = b4p*t64311*t64456*(1.0E1/9.0);
            double t64472 = b2p*c*t64455*(4.0/9.0);
            double t64473 = b1p*c*t64356*t64455*(2.0/9.0);
            double t64474 = b3p*c*t64307*t64455*(2.0/3.0);
            double t64475 = b3p*t64311*t64356*t64456*(1.0/1.2E1);
            double t64476 = t64471+t64472+t64473+t64474+t64475-b1p*t64311*t64470*t64456*(1.0/3.6E1);
            double t64477 = 1.0/(t64315*t64315*t64315);
            double t64478 = t64322*t64357*t64477*t64469*2.0;
            double t64479 = t64464*t64464;
            double t64480 = 1.0/(t64320*t64320);
            double t64481 = 1.0/(t64315*t64315*t64315*t64315);
            double t64482 = t64349*2.0;
            double t64483 = 1.0/(t64304*t64304*t64304);
            double t64490 = t64323*t64483*2.0;
            double t64484 = -t64490+t64482;
            double t64485 = t64350*t64350;
            double t64486 = a1p*c*c0p*t64342*t64455*(8.0/9.0);
            double t64487 = 1.0/(t64304*t64304*t64304*t64304*t64304*t64304);
            double t64488 = t64354*t64365*4.0;
            double t64498 = t64323*t64324*t64351*4.0;
            double t64489 = t64488-t64498;
            double t64491 = t64382*t64484*(4.0/3.0);
            double t64492 = 1.0/pow(t64344,2.0/3.0);
            double t64493 = t64492*t64485*(4.0/9.0);
            double t64494 = 1.0/pow(t64346,2.0/3.0);
            double t64495 = t64485*t64494*(4.0/9.0);
            double t64496 = t64491+t64493+t64495-t64484*t64379*(4.0/3.0);
            double t64497 = 1.0/t64375;
            double t64499 = 1.0/(t64372*t64372);
            double t64500 = b4a*t64311*t64355*(2.0/3.0);
            double t64501 = b2a*c*t64316*(1.0/3.0);
            double t64502 = b1a*c*t64316*t64356*(1.0/6.0);
            double t64503 = b3a*c*t64307*t64316*(1.0/2.0);
            double t64504 = t64500+t64501+t64502+t64503;
            double t64505 = t64504*t64504;
            double t64506 = t64322*t64357*t64358*t64476;
            double t64507 = t64322*t64317*t64480*t64481*t64469*(1.0/2.0);
            double t64508 = a1p*c*t64316*t64363*t64357*t64358*(2.0/3.0);
            double t64509 = 1.0/t64406;
            double t64510 = b4f*t64311*t64402*(2.0/3.0);
            double t64511 = b2f*c*t64396*(1.0/3.0);
            double t64512 = b1f*c*t64403*t64396*(1.0/6.0);
            double t64513 = b3f*c*t64396*t64388*(1.0/2.0);
            double t64514 = t64510+t64511+t64512+t64513;
            double t64515 = 1.0/(t64395*t64395);
            double t64516 = 1.0/pow(rho_a[index],7.0/3.0);
            double t64517 = 1.0/pow(t64387,3.0/2.0);
            double t64518 = t64514*t64514;
            double t64519 = t64418*t64418;
            double t64520 = 1.0/(t64401*t64401*t64401);
            double t64521 = t64411*t64412*t64520*t64519*2.0;
            double t64522 = b4p*t64311*t64431*(1.0E1/9.0);
            double t64523 = b2p*c*t64516*(4.0/9.0);
            double t64524 = b3p*t64311*t64403*t64431*(1.0/1.2E1);
            double t64525 = b1p*c*t64403*t64516*(2.0/9.0);
            double t64526 = b3p*c*t64516*t64388*(2.0/3.0);
            double t64679 = b1p*t64311*t64431*t64517*(1.0/3.6E1);
            double t64527 = t64522+t64523+t64524+t64525+t64526-t64679;
            double t64528 = 1.0/(t64409*t64409);
            double t64529 = 1.0/(t64401*t64401*t64401*t64401);
            double t64530 = a1p*c*c0p*t64420*t64516*(8.0/9.0);
            double t64531 = a1f*c*c0f*t64424*t64396*(2.0/3.0);
            double t64532 = a1p*c*c0p*t64420*t64396*(2.0/3.0);
            double t64604 = t64514*t64515*t64426*t64509;
            double t64533 = t64531-t64532-t64604+t64419;
            double t64534 = gamma_aa[index]*gamma_aa[index];
            double t64535 = gcaa*gcaa;
            double t64536 = t64534*t64534;
            double t64537 = t64535*t64535;
            double t64538 = 1.0/pow(rho_a[index],3.2E1/3.0);
            double t64539 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]);
            double t64540 = 1.0/pow(rho_a[index],1.6E1/3.0);
            double t64541 = c0f*t64424*t64426*2.0;
            double t64543 = c0p*t64411*t64420*2.0;
            double t64542 = t64541-t64543;
            double t64544 = 1.0/pow(rho_b[index],1.0/3.0);
            double t64545 = c*t64544;
            double t64546 = sqrt(t64545);
            double t64547 = pow(t64545,3.0/2.0);
            double t64548 = 1.0/pow(rho_b[index],2.0/3.0);
            double t64549 = b1p*t64546;
            double t64550 = b3p*t64547;
            double t64551 = b4p*t64311*t64548;
            double t64552 = b2p*c*t64544;
            double t64553 = t64550+t64551+t64552+t64549;
            double t64554 = 1.0/t64553;
            double t64555 = t64317*t64554*(1.0/2.0);
            double t64556 = t64555+1.0;
            double t64557 = log(t64556);
            double t64558 = a1p*c*t64544;
            double t64559 = t64558+1.0;
            double t64560 = c0p*t64557*t64559*2.0;
            double t64561 = t64351*t64343*t64354*t64329*t64348;
            double t64562 = Aa*t64329*t64348*t64366*t64376*t64385*t64378*2.0;
            double t64563 = gamma_aa[index]*gcab*t64430*(1.6E1/3.0);
            double t64564 = gamma_aa[index]*gcab*t64430*t64427*t64429*1.6E1;
            double t64565 = gamma_aa[index]*t64430*t64435*t64428*t64429*(1.6E1/3.0);
            double t64566 = gamma_aa[index]*t64430*t64427*t64428*1.6E1;
            double t64567 = t64563+t64564+t64565+t64566;
            double t64568 = 1.0/(t64443*t64443);
            double t64569 = 1.0/pow(rho_a[index],2.2E1/3.0);
            double t64570 = gamma_aa[index]*gcab*t64430*(8.0/3.0);
            double t64571 = gamma_aa[index]*t64430*t64427*t64428*(8.0/3.0);
            double t64572 = t64570+t64571;
            double t64573 = 1.0/(t64450*t64450);
            double t64574 = 1.0/pow(rho_a[index],1.4E1/3.0);
            double t64575 = 1.0/(t64441*t64441);
            double t64576 = 1.0/(t64446*t64446);
            double t64577 = gamma_aa[index]*gcab*t64430*4.0;
            double t64578 = gamma_aa[index]*gcab*t64430*t64427*t64429*4.0;
            double t64579 = gamma_aa[index]*t64430*t64427*t64428*8.0;
            double t64580 = t64577+t64578+t64579;
            double t64581 = t64423*t64542*t64329;
            double t64582 = t64543+t64581;
            double t64583 = gamma_aa[index]*gcaa*t64431*4.0;
            double t64584 = gamma_aa[index]*gcaa*t64534*t64535*t64539*4.0;
            double t64585 = t64540*t64534*t64535*6.0;
            double t64586 = t64536*t64537*t64538;
            double t64587 = t64583+t64584+t64585+t64586+1.0;
            double t64588 = 1.0/t64587;
            double t64589 = gamma_aa[index]*gcaa*t64431;
            double t64590 = t64589+1.0;
            double t64591 = 1.0/t64590;
            double t64592 = gamma_aa[index]*gcaa*t64431*3.0;
            double t64593 = gamma_aa[index]*gcaa*t64534*t64535*t64539;
            double t64594 = t64540*t64534*t64535*3.0;
            double t64595 = t64592+t64593+t64594+1.0;
            double t64596 = 1.0/t64595;
            double t64597 = gamma_aa[index]*gcaa*t64431*2.0;
            double t64598 = t64540*t64534*t64535;
            double t64599 = t64597+t64598+1.0;
            double t64600 = 1.0/t64599;
            double t64601 = 1.0/pow(rho_a[index],1.9E1/3.0);
            double t64602 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]*rho_a[index]);
            double t64603 = 1.0/pow(rho_a[index],3.5E1/3.0);
            double t64605 = t64423*t64533*t64329;
            double t64606 = ccaa4*t64603*t64536*t64537*t64588*(3.2E1/3.0);
            double t64607 = ccaa1*gamma_aa[index]*gcaa*t64430*t64591*(8.0/3.0);
            double t64608 = ccaa3*gamma_aa[index]*gcaa*t64602*t64534*t64535*t64596*8.0;
            double t64609 = ccaa2*t64600*t64601*t64534*t64535*(1.6E1/3.0);
            double t64610 = 1.0/(t64590*t64590);
            double t64611 = gamma_aa[index]*gcaa*t64430*8.0;
            double t64612 = gamma_aa[index]*gcaa*t64602*t64534*t64535*8.0;
            double t64613 = t64601*t64534*t64535*1.6E1;
            double t64614 = t64611+t64612+t64613;
            double t64615 = 1.0/(t64595*t64595);
            double t64616 = gamma_aa[index]*gcaa*t64430*(3.2E1/3.0);
            double t64617 = gamma_aa[index]*gcaa*t64602*t64534*t64535*3.2E1;
            double t64618 = t64601*t64534*t64535*3.2E1;
            double t64619 = t64603*t64536*t64537*(3.2E1/3.0);
            double t64620 = t64616+t64617+t64618+t64619;
            double t64621 = 1.0/(t64587*t64587);
            double t64622 = gamma_aa[index]*gcaa*t64430*(1.6E1/3.0);
            double t64623 = t64601*t64534*t64535*(1.6E1/3.0);
            double t64624 = t64622+t64623;
            double t64625 = 1.0/(t64599*t64599);
            double t64626 = t64606+t64607+t64608+t64609-ccaa1*t64601*t64610*t64534*t64535*(8.0/3.0)-ccaa2*t64540* \
               t64534*t64624*t64535*t64625-ccaa4*t64620*t64621*t64536*t64537*t64538-ccaa3*gamma_aa[index]*gcaa*t64614* \
               t64534*t64615*t64535*t64539;
            double t64627 = t64532+t64605-t64419;
            double t64628 = gx*gx;
            double t64629 = t64628*t64628;
            double t64630 = 1.0/pow(rho_a[index],1.0E1);
            double t64631 = gamma_aa[index]*gx*t64431;
            double t64632 = t64631+1.0;
            double t64652 = gamma_aa[index]*gx*t64430*(3.2E1/3.0);
            double t64653 = gamma_aa[index]*gx*t64602*t64534*t64628*3.2E1;
            double t64654 = t64601*t64534*t64628*3.2E1;
            double t64655 = t64603*t64536*t64629*(3.2E1/3.0);
            double t64633 = t64652+t64653+t64654+t64655;
            double t64634 = gamma_aa[index]*gx*t64431*4.0;
            double t64635 = gamma_aa[index]*gx*t64534*t64628*t64539*4.0;
            double t64636 = t64540*t64534*t64628*6.0;
            double t64637 = t64536*t64538*t64629;
            double t64638 = t64634+t64635+t64636+t64637+1.0;
            double t64658 = gamma_aa[index]*gx*t64430*(1.6E1/3.0);
            double t64659 = t64601*t64534*t64628*(1.6E1/3.0);
            double t64639 = t64658+t64659;
            double t64640 = gamma_aa[index]*gx*t64431*2.0;
            double t64641 = t64540*t64534*t64628;
            double t64642 = t64640+t64641+1.0;
            double t64643 = gamma_aa[index]*gx*t64431*3.0;
            double t64644 = gamma_aa[index]*gx*t64534*t64628*t64539;
            double t64645 = t64540*t64534*t64628*3.0;
            double t64646 = t64643+t64644+t64645+1.0;
            double t64647 = 1.0/(t64646*t64646);
            double t64648 = gamma_aa[index]*gx*t64430*8.0;
            double t64649 = gamma_aa[index]*gx*t64602*t64534*t64628*8.0;
            double t64650 = t64601*t64534*t64628*1.6E1;
            double t64651 = t64650+t64648+t64649;
            double t64656 = 1.0/pow(rho_a[index],3.8E1/3.0);
            double t64657 = 1.0/(t64638*t64638);
            double t64660 = 1.0/(t64642*t64642);
            double t64661 = 1.0/t64638;
            double t64662 = 1.0/t64632;
            double t64663 = 1.0/t64646;
            double t64664 = 1.0/t64642;
            double t64665 = 1.0/(t64632*t64632);
            double t64666 = ccaa4*t64536*t64537*t64538*t64588;
            double t64667 = ccaa1*gamma_aa[index]*gcaa*t64431*t64591;
            double t64668 = ccaa3*gamma_aa[index]*gcaa*t64534*t64535*t64539*t64596;
            double t64669 = ccaa2*t64600*t64540*t64534*t64535;
            double t64670 = ccaa0+t64666+t64667+t64668+t64669;
            double t64671 = 1.0/(t64395*t64395*t64395);
            double t64672 = b4f*t64311*t64431*(1.0E1/9.0);
            double t64673 = b2f*c*t64516*(4.0/9.0);
            double t64674 = b3f*t64311*t64403*t64431*(1.0/1.2E1);
            double t64675 = b1f*c*t64403*t64516*(2.0/9.0);
            double t64676 = b3f*c*t64516*t64388*(2.0/3.0);
            double t64677 = t64672+t64673+t64674+t64675+t64676-b1f*t64311*t64431*t64517*(1.0/3.6E1);
            double t64678 = t64515*t64426*t64509*t64677;
            double t64680 = t64411*t64412*t64413*t64527;
            double t64681 = 1.0/(t64406*t64406);
            double t64682 = 1.0/(t64395*t64395*t64395*t64395);
            double t64683 = t64330*t64426*t64518*t64681*t64682*(1.0/2.0);
            double t64684 = t64411*t64317*t64519*t64528*t64529*(1.0/2.0);
            double t64685 = a1f*c*t64514*t64515*t64509*t64396*(2.0/3.0);
            double t64686 = a1p*c*t64412*t64413*t64418*t64396*(2.0/3.0);
            v_rho_a_rho_a_[index] = -(ccab0+ccab1*gcab*t64453*t64428+ccab2*t64451*t64427*t64429+ccab4*t64435* \
               t64436*t64454+ccab3*gcab*t64452*t64427*t64428*t64429)*(rho_a[index]*(-t64521-t64530+t64680+t64684+ \
               t64686+t64423*t64329*(t64521+t64530+t64683+t64685+t64678-t64411*t64412*t64413*t64527-t64426*t64509* \
               t64518*t64671*2.0-a1f*c*c0f*t64424*t64516*(8.0/9.0)-t64411*t64317*t64519*t64528*t64529*(1.0/2.0)-a1p* \
               c*t64412*t64413*t64418*t64396*(2.0/3.0)))+t64304*(-t64506-t64507-t64508+t64486+t64478+t64351*t64354* \
               t64329*t64348*(t64506+t64507+t64508-t64486-t64478+t64341*1.0/(t64335*t64335*t64335)*t64458*t64479* \
               2.0-t64341*t64458*t64459*(b2f*c*t64455*(4.0/9.0)+b4f*t64311*t64456*(1.0E1/9.0)+b1f*c*t64356*t64455* \
               (2.0/9.0)+b3f*c*t64307*t64455*(2.0/3.0)-b1f*t64311*t64470*t64456*(1.0/3.6E1)+b3f*t64311*t64356*t64456* \
               (1.0/1.2E1))-t64330*t64341*1.0/(t64335*t64335*t64335*t64335)*1.0/(t64338*t64338)*t64479*(1.0/2.0)+ \
               a1f*c*c0f*t64455*t64339*(8.0/9.0)-a1f*c*t64316*t64464*t64458*t64459*(2.0/3.0))+t64324*t64351*t64343* \
               t64329*t64348*1.2E1+t64351*t64343*t64354*t64329*t64496-t64343*t64354*t64329*t64365*t64383*8.0-t64351* \
               t64354*t64329*t64383*t64466*2.0+t64343*t64354*t64329*t64348*t64487*2.0E1+t64354*t64329*t64365*t64348* \
               t64466*8.0+t64323*t64324*t64351*t64343*t64329*t64383*8.0-t64323*t64324*t64343*t64329*t64365*t64348* \
               3.2E1-t64323*t64324*t64351*t64329*t64348*t64466*8.0-Aa*t64329*t64383*t64366*t64376*t64378*t64489*4.0+ \
               Aa*t64329*t64366*t64376*t64385*t64378*t64496*2.0+Aa*t64329*t64348*t64366*t64376*t64378*(t64324*t64351* \
               1.2E1+t64354*t64487*2.0E1-t64323*t64324*t64365*3.2E1)*2.0+t64504*t64329*t64383*t64366*t64385*t64378* \
               t64497*t64499*2.0-t64504*t64329*t64348*t64366*t64378*t64497*t64489*t64499*2.0+t64505*1.0/(t64372*t64372* \
               t64372)*t64329*t64348*t64366*t64385*t64378*t64497*2.0-t64329*t64348*t64366*t64385*t64378*t64497*t64499* \
               (b2a*c*t64455*(4.0/9.0)+b4a*t64311*t64456*(1.0E1/9.0)+b1a*c*t64356*t64455*(2.0/9.0)+b3a*c*t64307*t64455* \
               (2.0/3.0)-b1a*t64311*t64470*t64456*(1.0/3.6E1)+b3a*t64311*t64356*t64456*(1.0/1.2E1))-Aa*a1a*c*t64316* \
               t64329*t64383*t64366*t64376*t64385*(4.0/3.0)+Aa*a1a*c*t64329*t64455*t64348*t64366*t64376*t64385*(8.0/ \
               9.0)+Aa*a1a*c*t64316*t64329*t64348*t64366*t64376*t64489*(4.0/3.0)-t64505*1.0/(t64372*t64372*t64372* \
               t64372)*t64329*t64348*t64366*1.0/(t64375*t64375)*t64367*t64385*t64378*(1.0/2.0)-a1a*c*t64504*t64316* \
               t64329*t64348*t64366*t64385*t64497*t64499*(2.0/3.0))+t64423*t64533*t64329*2.0-t64411*t64412*t64413* \
               t64418*2.0+t64322*t64363*t64357*t64358*2.0-a1p*c*c0p*t64342*t64316*(4.0/3.0)+a1p*c*c0p*t64420*t64396* \
               (4.0/3.0)+t64351*t64343*t64354*t64329*t64383*2.0-t64343*t64354*t64329*t64365*t64348*8.0-t64351*t64354* \
               t64329*t64348*t64466*2.0+t64323*t64324*t64351*t64343*t64329*t64348*8.0+Aa*t64329*t64383*t64366*t64376* \
               t64385*t64378*4.0-Aa*t64329*t64348*t64366*t64376*t64378*t64489*4.0+t64504*t64329*t64348*t64366*t64385* \
               t64378*t64497*t64499*2.0-Aa*a1a*c*t64316*t64329*t64348*t64366*t64376*t64385*(4.0/3.0))+(rho_a[index]* \
               t64582+rho_b[index]*(t64560-t64423*t64329*(t64560-c0f*log((t64330*(1.0/2.0))/(b1f*t64546+b3f*t64547+ \
               b2f*c*t64544+b4f*t64311*t64548)+1.0)*(a1f*c*t64544+1.0)*2.0))-t64304*(t64353+t64561+t64562))*(-ccab2* \
               t64427*t64429*t64576*(gamma_aa[index]*gcab*t64574*(8.8E1/9.0)+t64534*t64427*t64569*(3.2E1/9.0)+gamma_aa[index]* \
               t64427*t64428*t64574*(8.8E1/9.0))+ccab4*1.0/(t64441*t64441*t64441)*t64435*t64436*(t64567*t64567)*2.0+ \
               ccab2*t64427*1.0/(t64446*t64446*t64446)*(t64572*t64572)*t64429*2.0+ccab1*gamma_aa[index]*gcab*t64453* \
               t64574*(4.4E1/9.0)+ccab2*t64451*t64534*t64427*t64569*(3.2E1/9.0)-ccab1*t64534*t64427*t64568*t64569* \
               (3.2E1/9.0)-ccab4*t64435*t64436*t64575*(gamma_aa[index]*gcab*t64574*(1.76E2/9.0)+t64534*t64427*t64569* \
               (6.4E1/3.0)+gamma_aa[index]*t64427*t64428*t64574*(1.76E2/3.0)+t64435*t64534*t64429*t64569*(6.4E1/3.0) \
               +gamma_aa[index]*gcab*t64427*t64429*t64574*(1.76E2/3.0)+gamma_aa[index]*t64435*t64428*t64429*t64574* \
               (1.76E2/9.0)+gcab*t64534*t64427*t64428*t64569*(1.28E2/3.0))+ccab4*t64435*t64534*t64454*t64429*t64569* \
               (6.4E1/3.0)+ccab2*gamma_aa[index]*t64451*t64427*t64428*t64574*(8.8E1/9.0)-ccab1*gamma_aa[index]*t64427* \
               t64428*t64574*t64568*(4.4E1/9.0)+ccab3*gcab*1.0/(t64450*t64450*t64450)*t64427*(t64580*t64580)*t64428* \
               t64429*2.0+ccab3*gamma_aa[index]*gcab*t64452*t64427*t64429*t64574*(4.4E1/3.0)-ccab2*gamma_aa[index]* \
               t64430*t64427*t64428*t64572*t64576*(1.6E1/3.0)+ccab4*gamma_aa[index]*t64435*t64454*t64428*t64429*t64574* \
               (1.76E2/9.0)+ccab3*gcab*t64452*t64534*t64427*t64428*t64569*(3.2E1/3.0)+ccab1*gcab*1.0/(t64443*t64443* \
               t64443)*t64534*t64427*t64428*t64569*(3.2E1/9.0)-ccab3*gcab*t64427*t64428*t64429*t64573*(gamma_aa[index]* \
               gcab*t64574*(4.4E1/3.0)+t64534*t64427*t64569*(3.2E1/3.0)+gamma_aa[index]*t64427*t64428*t64574*(8.8E1/ \
               3.0)+gamma_aa[index]*gcab*t64427*t64429*t64574*(4.4E1/3.0)+gcab*t64534*t64427*t64428*t64569*(3.2E1/ \
               3.0))-ccab3*gamma_aa[index]*gcab*t64430*t64427*t64580*t64429*t64573*8.0-ccab4*gamma_aa[index]*t64430* \
               t64435*t64428*t64429*t64575*t64567*(3.2E1/3.0))+t64670*t64627*2.0+t64626*t64582*2.0+(t64353+t64561+ \
               t64562+rho_a[index]*(t64532-t64419+t64423*t64329*(t64531+t64419-t64514*t64515*t64426*t64509-a1p*c* \
               c0p*t64420*t64396*(2.0/3.0)))+t64304*(t64364-a1p*c*c0p*t64342*t64316*(2.0/3.0)+t64351*t64343*t64354* \
               t64329*t64383-t64343*t64354*t64329*t64365*t64348*4.0-t64351*t64354*t64329*t64348*t64466+t64323*t64324* \
               t64351*t64343*t64329*t64348*4.0+Aa*t64329*t64383*t64366*t64376*t64385*t64378*2.0-Aa*t64329*t64348* \
               t64366*t64376*t64378*t64489*2.0+t64504*t64329*t64348*t64366*t64385*t64378*t64497*t64499-Aa*a1a*c*t64316* \
               t64329*t64348*t64366*t64376*t64385*(2.0/3.0))-c0p*t64411*t64420*2.0-t64423*t64542*t64329)*(ccab1*gamma_aa[index]* \
               gcab*t64430*t64453*(4.0/3.0)-ccab2*t64427*t64572*t64429*t64576-ccab4*t64435*t64436*t64575*t64567+ccab2* \
               gamma_aa[index]*t64430*t64451*t64427*t64428*(8.0/3.0)-ccab1*gamma_aa[index]*t64430*t64427*t64428*t64568* \
               (4.0/3.0)+ccab3*gamma_aa[index]*gcab*t64430*t64452*t64427*t64429*4.0+ccab4*gamma_aa[index]*t64430* \
               t64435*t64454*t64428*t64429*(1.6E1/3.0)-ccab3*gcab*t64427*t64580*t64428*t64429*t64573)*2.0-c0*pow(rho_a[index],1.0/ \
               3.0)*(cx1*gamma_aa[index]*gx*t64430*t64662*(8.0/3.0)-cx1*t64601*t64534*t64628*t64665*(8.0/3.0)+cx2* \
               t64601*t64534*t64628*t64664*(1.6E1/3.0)+cx4*t64603*t64661*t64536*t64629*(3.2E1/3.0)-cx2*t64540*t64534* \
               t64660*t64628*t64639-cx4*t64633*t64536*t64538*t64629*t64657+cx3*gamma_aa[index]*gx*t64602*t64534*t64663* \
               t64628*8.0-cx3*gamma_aa[index]*gx*t64534*t64651*t64628*t64539*t64647)*(8.0/3.0)-rho_a[index]*t64582* \
               (ccaa1*gamma_aa[index]*gcaa*t64591*t64574*(8.8E1/9.0)-ccaa1*t64610*t64534*t64535*t64569*2.4E1+ccaa2* \
               t64600*t64534*t64535*t64569*(3.04E2/9.0)+ccaa4*t64536*t64537*t64656*t64588*(1.12E3/9.0)-ccaa2*t64601* \
               t64534*t64624*t64535*t64625*(3.2E1/3.0)-ccaa4*t64620*t64603*t64621*t64536*t64537*(6.4E1/3.0)-ccaa2* \
               t64540*t64534*t64535*t64625*(gamma_aa[index]*gcaa*t64574*(1.76E2/9.0)+t64534*t64535*t64569*(3.04E2/ \
               9.0))-ccaa4*t64621*t64536*t64537*t64538*(gamma_aa[index]*gcaa*t64574*(3.52E2/9.0)+t64534*t64535*t64569* \
               (6.08E2/3.0)+t64536*t64537*t64656*(1.12E3/9.0)+gamma_aa[index]*gcaa*t64630*t64534*t64535*2.88E2)+ccaa2* \
               t64540*t64534*(t64624*t64624)*t64535*1.0/(t64599*t64599*t64599)*2.0+ccaa4*(t64620*t64620)*t64536*t64537* \
               t64538*1.0/(t64587*t64587*t64587)*2.0+ccaa3*gamma_aa[index]*gcaa*t64630*t64534*t64535*t64596*7.2E1+ \
               ccaa1*gamma_aa[index]*gcaa*t64630*t64534*t64535*1.0/(t64590*t64590*t64590)*(1.28E2/9.0)+ccaa3*gamma_aa[index]* \
               gcaa*(t64614*t64614)*t64534*t64535*t64539*1.0/(t64595*t64595*t64595)*2.0-ccaa3*gamma_aa[index]*gcaa* \
               t64534*t64615*t64535*t64539*(gamma_aa[index]*gcaa*t64574*(8.8E1/3.0)+t64534*t64535*t64569*(3.04E2/ \
               3.0)+gamma_aa[index]*gcaa*t64630*t64534*t64535*7.2E1)-ccaa3*gamma_aa[index]*gcaa*t64602*t64614*t64534* \
               t64615*t64535*1.6E1)+rho_a[index]*t64670*(-t64521-t64530+t64680+t64684+t64686+t64423*t64329*(t64521+ \
               t64530-t64680+t64683-t64684+t64685-t64686+t64678-t64426*t64509*t64518*t64671*2.0-a1f*c*c0f*t64424* \
               t64516*(8.0/9.0)))-rho_a[index]*t64626*t64627*2.0+c0*pow(rho_a[index],4.0/3.0)*(cx1*gamma_aa[index]* \
               gx*t64662*t64574*(8.8E1/9.0)-cx1*t64534*t64628*t64665*t64569*2.4E1+cx2*t64534*t64628*t64664*t64569* \
               (3.04E2/9.0)+cx4*t64661*t64536*t64629*t64656*(1.12E3/9.0)-cx2*t64601*t64534*t64660*t64628*t64639*(3.2E1/ \
               3.0)-cx4*t64603*t64633*t64536*t64629*t64657*(6.4E1/3.0)-cx2*t64540*t64534*t64660*t64628*(gamma_aa[index]* \
               gx*t64574*(1.76E2/9.0)+t64534*t64628*t64569*(3.04E2/9.0))-cx4*t64536*t64538*t64629*t64657*(gamma_aa[index]* \
               gx*t64574*(3.52E2/9.0)+t64534*t64628*t64569*(6.08E2/3.0)+t64536*t64629*t64656*(1.12E3/9.0)+gamma_aa[index]* \
               gx*t64630*t64534*t64628*2.88E2)+cx2*t64540*t64534*1.0/(t64642*t64642*t64642)*t64628*(t64639*t64639) \
               *2.0+cx4*(t64633*t64633)*t64536*t64538*t64629*1.0/(t64638*t64638*t64638)*2.0+cx3*gamma_aa[index]*gx* \
               t64630*t64534*t64663*t64628*7.2E1+cx1*gamma_aa[index]*gx*t64630*1.0/(t64632*t64632*t64632)*t64534* \
               t64628*(1.28E2/9.0)+cx3*gamma_aa[index]*gx*t64534*(t64651*t64651)*t64628*1.0/(t64646*t64646*t64646) \
               *t64539*2.0-cx3*gamma_aa[index]*gx*t64534*t64628*t64539*t64647*(gamma_aa[index]*gx*t64574*(8.8E1/3.0) \
               +t64534*t64628*t64569*(3.04E2/3.0)+gamma_aa[index]*gx*t64630*t64534*t64628*7.2E1)-cx3*gamma_aa[index]* \
               gx*t64602*t64534*t64651*t64628*t64647*1.6E1)+c0*t64392*(cx0+cx1*gamma_aa[index]*gx*t64431*t64662+cx2* \
               t64540*t64534*t64628*t64664+cx4*t64661*t64536*t64538*t64629+cx3*gamma_aa[index]*gx*t64534*t64663*t64628* \
               t64539)*(4.0/9.0);
        } else if (rho_a[index] > cutoff_) {
            double t67759 = 1.0/pow(rho_a[index],1.0/3.0);
            double t67760 = c*t67759;
            double t67761 = sqrt(t67760);
            double t67762 = b1f*t67761;
            double t67763 = pow(t67760,3.0/2.0);
            double t67764 = b3f*t67763;
            double t67765 = c*c;
            double t67766 = 1.0/pow(rho_a[index],2.0/3.0);
            double t67767 = b4f*t67765*t67766;
            double t67768 = b2f*c*t67759;
            double t67769 = t67762+t67764+t67767+t67768;
            double t67770 = 1.0/pow(rho_a[index],4.0/3.0);
            double t67771 = b1p*t67761;
            double t67772 = b3p*t67763;
            double t67773 = b4p*t67765*t67766;
            double t67774 = b2p*c*t67759;
            double t67775 = t67771+t67772+t67773+t67774;
            double t67776 = 1.0/pow(rho_a[index],5.0/3.0);
            double t67777 = 1.0/sqrt(t67760);
            double t67778 = 1.0/c0f;
            double t67779 = 1.0/t67769;
            double t67780 = t67778*t67779*(1.0/2.0);
            double t67781 = t67780+1.0;
            double t67782 = 1.0/c0p;
            double t67783 = 1.0/t67775;
            double t67784 = t67782*t67783*(1.0/2.0);
            double t67785 = t67784+1.0;
            double t67786 = a1p*c*t67759;
            double t67787 = t67786+1.0;
            double t67788 = 1.0/t67785;
            double t67789 = 1.0/(t67775*t67775);
            double t67790 = b4p*t67765*t67776*(2.0/3.0);
            double t67791 = b2p*c*t67770*(1.0/3.0);
            double t67792 = b1p*c*t67770*t67777*(1.0/6.0);
            double t67793 = b3p*c*t67761*t67770*(1.0/2.0);
            double t67794 = t67790+t67791+t67792+t67793;
            double t67795 = t67794*t67787*t67788*t67789;
            double t67796 = log(t67785);
            double t67797 = gamma_aa[index]*gamma_aa[index];
            double t67798 = gcaa*gcaa;
            double t67799 = t67797*t67797;
            double t67800 = t67798*t67798;
            double t67801 = 1.0/pow(rho_a[index],3.2E1/3.0);
            double t67802 = 1.0/pow(rho_a[index],8.0/3.0);
            double t67803 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]);
            double t67804 = 1.0/pow(rho_a[index],1.6E1/3.0);
            double t67805 = pow(2.0,1.0/3.0);
            double t67806 = t67805*2.0;
            double t67807 = t67806-2.0;
            double t67808 = two_13*2.0;
            double t67809 = t67808-2.0;
            double t67810 = 1.0/t67809;
            double t67811 = log(t67781);
            double t67812 = a1f*c*t67759;
            double t67813 = t67812+1.0;
            double t67814 = gamma_aa[index]*gcaa*t67802*4.0;
            double t67815 = gamma_aa[index]*gcaa*t67803*t67797*t67798*4.0;
            double t67816 = t67804*t67797*t67798*6.0;
            double t67817 = t67800*t67801*t67799;
            double t67818 = t67814+t67815+t67816+t67817+1.0;
            double t67819 = 1.0/t67818;
            double t67820 = gamma_aa[index]*gcaa*t67802;
            double t67821 = t67820+1.0;
            double t67822 = 1.0/t67821;
            double t67823 = gamma_aa[index]*gcaa*t67802*3.0;
            double t67824 = gamma_aa[index]*gcaa*t67803*t67797*t67798;
            double t67825 = t67804*t67797*t67798*3.0;
            double t67826 = t67823+t67824+t67825+1.0;
            double t67827 = 1.0/t67826;
            double t67828 = gamma_aa[index]*gcaa*t67802*2.0;
            double t67829 = t67804*t67797*t67798;
            double t67830 = t67828+t67829+1.0;
            double t67831 = 1.0/t67830;
            double t67832 = 1.0/pow(rho_a[index],1.9E1/3.0);
            double t67833 = 1.0/pow(rho_a[index],1.1E1/3.0);
            double t67834 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]*rho_a[index]);
            double t67835 = 1.0/pow(rho_a[index],3.5E1/3.0);
            double t67836 = 1.0/t67781;
            double t67837 = 1.0/(t67769*t67769);
            double t67838 = b4f*t67765*t67776*(2.0/3.0);
            double t67839 = b2f*c*t67770*(1.0/3.0);
            double t67840 = b1f*c*t67770*t67777*(1.0/6.0);
            double t67841 = b3f*c*t67761*t67770*(1.0/2.0);
            double t67842 = t67840+t67841+t67838+t67839;
            double t67843 = a1f*c*c0f*t67811*t67770*(2.0/3.0);
            double t67844 = a1p*c*c0p*t67770*t67796*(2.0/3.0);
            double t67845 = ccaa4*t67800*t67835*t67819*t67799*(3.2E1/3.0);
            double t67846 = ccaa1*gamma_aa[index]*gcaa*t67822*t67833*(8.0/3.0);
            double t67847 = ccaa3*gamma_aa[index]*gcaa*t67834*t67827*t67797*t67798*8.0;
            double t67848 = ccaa2*t67831*t67832*t67797*t67798*(1.6E1/3.0);
            double t67849 = 1.0/(t67821*t67821);
            double t67850 = gamma_aa[index]*gcaa*t67833*8.0;
            double t67851 = gamma_aa[index]*gcaa*t67834*t67797*t67798*8.0;
            double t67852 = t67832*t67797*t67798*1.6E1;
            double t67853 = t67850+t67851+t67852;
            double t67854 = 1.0/(t67826*t67826);
            double t67855 = gamma_aa[index]*gcaa*t67833*(3.2E1/3.0);
            double t67856 = gamma_aa[index]*gcaa*t67834*t67797*t67798*3.2E1;
            double t67857 = t67832*t67797*t67798*3.2E1;
            double t67858 = t67800*t67835*t67799*(3.2E1/3.0);
            double t67859 = t67855+t67856+t67857+t67858;
            double t67860 = 1.0/(t67818*t67818);
            double t67861 = gamma_aa[index]*gcaa*t67833*(1.6E1/3.0);
            double t67862 = t67832*t67797*t67798*(1.6E1/3.0);
            double t67863 = t67861+t67862;
            double t67864 = 1.0/(t67830*t67830);
            double t67865 = t67845+t67846+t67847+t67848-ccaa1*t67832*t67849*t67797*t67798*(8.0/3.0)-ccaa4*t67800* \
               t67801*t67860*t67859*t67799-ccaa2*t67804*t67863*t67864*t67797*t67798-ccaa3*gamma_aa[index]*gcaa*t67803* \
               t67853*t67854*t67797*t67798;
            double t67866 = gx*gx;
            double t67867 = t67866*t67866;
            double t67868 = 1.0/pow(rho_a[index],1.0E1);
            double t67869 = gamma_aa[index]*gx*t67802;
            double t67870 = t67869+1.0;
            double t67871 = 1.0/pow(rho_a[index],2.2E1/3.0);
            double t67892 = gamma_aa[index]*gx*t67833*(3.2E1/3.0);
            double t67893 = gamma_aa[index]*gx*t67834*t67866*t67797*3.2E1;
            double t67894 = t67832*t67866*t67797*3.2E1;
            double t67895 = t67835*t67867*t67799*(3.2E1/3.0);
            double t67872 = t67892+t67893+t67894+t67895;
            double t67873 = gamma_aa[index]*gx*t67802*4.0;
            double t67874 = gamma_aa[index]*gx*t67803*t67866*t67797*4.0;
            double t67875 = t67804*t67866*t67797*6.0;
            double t67876 = t67801*t67867*t67799;
            double t67877 = t67873+t67874+t67875+t67876+1.0;
            double t67898 = gamma_aa[index]*gx*t67833*(1.6E1/3.0);
            double t67899 = t67832*t67866*t67797*(1.6E1/3.0);
            double t67878 = t67898+t67899;
            double t67879 = gamma_aa[index]*gx*t67802*2.0;
            double t67880 = t67804*t67866*t67797;
            double t67881 = t67880+t67879+1.0;
            double t67882 = gamma_aa[index]*gx*t67802*3.0;
            double t67883 = gamma_aa[index]*gx*t67803*t67866*t67797;
            double t67884 = t67804*t67866*t67797*3.0;
            double t67885 = t67882+t67883+t67884+1.0;
            double t67886 = 1.0/pow(rho_a[index],1.4E1/3.0);
            double t67887 = 1.0/(t67885*t67885);
            double t67888 = gamma_aa[index]*gx*t67833*8.0;
            double t67889 = gamma_aa[index]*gx*t67834*t67866*t67797*8.0;
            double t67890 = t67832*t67866*t67797*1.6E1;
            double t67891 = t67890+t67888+t67889;
            double t67896 = 1.0/pow(rho_a[index],3.8E1/3.0);
            double t67897 = 1.0/(t67877*t67877);
            double t67900 = 1.0/(t67881*t67881);
            double t67901 = 1.0/t67877;
            double t67902 = 1.0/t67870;
            double t67903 = 1.0/t67885;
            double t67904 = 1.0/t67881;
            double t67905 = c0f*t67811*t67813*2.0;
            double t67906 = c0p*t67787*t67796*2.0;
            double t67907 = 1.0/(t67870*t67870);
            double t67908 = ccaa4*t67800*t67801*t67819*t67799;
            double t67909 = ccaa1*gamma_aa[index]*gcaa*t67802*t67822;
            double t67910 = ccaa3*gamma_aa[index]*gcaa*t67803*t67827*t67797*t67798;
            double t67911 = ccaa2*t67804*t67831*t67797*t67798;
            double t67912 = ccaa0+t67910+t67911+t67908+t67909;
            double t67913 = 1.0/pow(rho_a[index],7.0/3.0);
            double t67914 = 1.0/pow(t67760,3.0/2.0);
            double t67915 = t67842*t67842;
            double t67916 = t67794*t67794;
            double t67917 = 1.0/(t67775*t67775*t67775);
            double t67918 = t67916*t67917*t67787*t67788*2.0;
            double t67919 = b4p*t67802*t67765*(1.0E1/9.0);
            double t67920 = b2p*c*t67913*(4.0/9.0);
            double t67921 = b3p*t67802*t67765*t67777*(1.0/1.2E1);
            double t67922 = b1p*c*t67913*t67777*(2.0/9.0);
            double t67923 = b3p*c*t67913*t67761*(2.0/3.0);
            double t67924 = t67920+t67921+t67922+t67923+t67919-b1p*t67802*t67914*t67765*(1.0/3.6E1);
            double t67925 = 1.0/(t67785*t67785);
            double t67926 = 1.0/(t67775*t67775*t67775*t67775);
            double t67927 = a1p*c*c0p*t67913*t67796*(8.0/9.0);
            v_rho_a_rho_a_[index] = t67865*(t67906+t67810*t67807*(t67905-c0p*t67787*t67796*2.0))*2.0+t67912*(t67844- \
               t67795+t67810*t67807*(t67843+t67795-t67813*t67842*t67836*t67837-a1p*c*c0p*t67770*t67796*(2.0/3.0)) \
               )*2.0-c0*pow(rho_a[index],1.0/3.0)*(cx1*gamma_aa[index]*gx*t67902*t67833*(8.0/3.0)-cx1*t67832*t67907* \
               t67866*t67797*(8.0/3.0)+cx2*t67832*t67904*t67866*t67797*(1.6E1/3.0)+cx4*t67901*t67835*t67867*t67799* \
               (3.2E1/3.0)-cx2*t67900*t67804*t67866*t67797*t67878-cx4*t67801*t67872*t67867*t67897*t67799+cx3*gamma_aa[index]* \
               gx*t67903*t67834*t67866*t67797*8.0-cx3*gamma_aa[index]*gx*t67803*t67891*t67866*t67797*t67887)*(8.0/ \
               3.0)+rho_a[index]*t67912*(-t67918-t67927+t67810*t67807*(t67918+t67927-t67924*t67787*t67788*t67789- \
               t67813*t67915*t67836*1.0/(t67769*t67769*t67769)*2.0+t67813*t67836*t67837*(b2f*c*t67913*(4.0/9.0)+b4f* \
               t67802*t67765*(1.0E1/9.0)+b1f*c*t67913*t67777*(2.0/9.0)+b3f*c*t67913*t67761*(2.0/3.0)-b1f*t67802*t67914* \
               t67765*(1.0/3.6E1)+b3f*t67802*t67765*t67777*(1.0/1.2E1))+t67813*t67915*1.0/(t67781*t67781)*1.0/(t67769* \
               t67769*t67769*t67769)*t67778*(1.0/2.0)-a1f*c*c0f*t67811*t67913*(8.0/9.0)-t67916*t67925*t67782*t67926* \
               t67787*(1.0/2.0)+a1f*c*t67770*t67842*t67836*t67837*(2.0/3.0)-a1p*c*t67770*t67794*t67788*t67789*(2.0/ \
               3.0))+t67924*t67787*t67788*t67789+t67916*t67925*t67782*t67926*t67787*(1.0/2.0)+a1p*c*t67770*t67794* \
               t67788*t67789*(2.0/3.0))-rho_a[index]*t67865*(t67844-t67795+t67810*t67807*(t67843-t67844+t67795-t67813* \
               t67842*t67836*t67837))*2.0-rho_a[index]*(t67906+t67810*t67807*(t67905-t67906))*(ccaa1*gamma_aa[index]* \
               gcaa*t67822*t67886*(8.8E1/9.0)+ccaa2*t67831*t67871*t67797*t67798*(3.04E2/9.0)+ccaa4*t67800*t67819* \
               t67896*t67799*(1.12E3/9.0)-ccaa1*t67871*t67849*t67797*t67798*2.4E1-ccaa4*t67800*t67860*t67835*t67859* \
               t67799*(6.4E1/3.0)-ccaa2*t67832*t67863*t67864*t67797*t67798*(3.2E1/3.0)-ccaa2*t67804*t67864*t67797* \
               t67798*(gamma_aa[index]*gcaa*t67886*(1.76E2/9.0)+t67871*t67797*t67798*(3.04E2/9.0))-ccaa4*t67800*t67801* \
               t67860*t67799*(gamma_aa[index]*gcaa*t67886*(3.52E2/9.0)+t67800*t67896*t67799*(1.12E3/9.0)+t67871*t67797* \
               t67798*(6.08E2/3.0)+gamma_aa[index]*gcaa*t67868*t67797*t67798*2.88E2)+ccaa4*t67800*t67801*1.0/(t67818* \
               t67818*t67818)*(t67859*t67859)*t67799*2.0+ccaa2*1.0/(t67830*t67830*t67830)*t67804*(t67863*t67863)* \
               t67797*t67798*2.0+ccaa3*gamma_aa[index]*gcaa*t67827*t67868*t67797*t67798*7.2E1+ccaa1*gamma_aa[index]* \
               gcaa*1.0/(t67821*t67821*t67821)*t67868*t67797*t67798*(1.28E2/9.0)+ccaa3*gamma_aa[index]*gcaa*t67803* \
               1.0/(t67826*t67826*t67826)*(t67853*t67853)*t67797*t67798*2.0-ccaa3*gamma_aa[index]*gcaa*t67803*t67854* \
               t67797*t67798*(gamma_aa[index]*gcaa*t67886*(8.8E1/3.0)+t67871*t67797*t67798*(3.04E2/3.0)+gamma_aa[index]* \
               gcaa*t67868*t67797*t67798*7.2E1)-ccaa3*gamma_aa[index]*gcaa*t67834*t67853*t67854*t67797*t67798*1.6E1) \
               +c0*pow(rho_a[index],4.0/3.0)*(cx1*gamma_aa[index]*gx*t67902*t67886*(8.8E1/9.0)-cx1*t67871*t67907* \
               t67866*t67797*2.4E1+cx2*t67904*t67871*t67866*t67797*(3.04E2/9.0)+cx4*t67901*t67867*t67896*t67799*(1.12E3/ \
               9.0)-cx2*t67900*t67832*t67866*t67797*t67878*(3.2E1/3.0)-cx4*t67835*t67872*t67867*t67897*t67799*(6.4E1/ \
               3.0)-cx2*t67900*t67804*t67866*t67797*(gamma_aa[index]*gx*t67886*(1.76E2/9.0)+t67871*t67866*t67797* \
               (3.04E2/9.0))-cx4*t67801*t67867*t67897*t67799*(gamma_aa[index]*gx*t67886*(3.52E2/9.0)+t67871*t67866* \
               t67797*(6.08E2/3.0)+t67867*t67896*t67799*(1.12E3/9.0)+gamma_aa[index]*gx*t67866*t67868*t67797*2.88E2) \
               +cx2*t67804*1.0/(t67881*t67881*t67881)*t67866*t67797*(t67878*t67878)*2.0+cx4*t67801*(t67872*t67872) \
               *t67867*1.0/(t67877*t67877*t67877)*t67799*2.0+cx3*gamma_aa[index]*gx*t67903*t67866*t67868*t67797*7.2E1+ \
               cx1*gamma_aa[index]*gx*1.0/(t67870*t67870*t67870)*t67866*t67868*t67797*(1.28E2/9.0)+cx3*gamma_aa[index]* \
               gx*t67803*(t67891*t67891)*t67866*1.0/(t67885*t67885*t67885)*t67797*2.0-cx3*gamma_aa[index]*gx*t67803* \
               t67866*t67797*t67887*(gamma_aa[index]*gx*t67886*(8.8E1/3.0)+t67871*t67866*t67797*(3.04E2/3.0)+gamma_aa[index]* \
               gx*t67866*t67868*t67797*7.2E1)-cx3*gamma_aa[index]*gx*t67834*t67891*t67866*t67797*t67887*1.6E1)+c0* \
               t67766*(cx0+cx1*gamma_aa[index]*gx*t67802*t67902+cx2*t67804*t67904*t67866*t67797+cx4*t67801*t67901* \
               t67867*t67799+cx3*gamma_aa[index]*gx*t67803*t67903*t67866*t67797)*(4.0/9.0);
        } else if (rho_b[index] > cutoff_) {
            v_rho_a_rho_a_[index] = 0.0;
        } else {
            v_rho_a_rho_a_[index] = 0.0;
        } 

        //V_rho_a_rho_b
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t64688 = rho_a[index]+rho_b[index];
            double t64689 = 1.0/pow(t64688,1.0/3.0);
            double t64690 = c*t64689;
            double t64691 = sqrt(t64690);
            double t64692 = b1p*t64691;
            double t64693 = pow(t64690,3.0/2.0);
            double t64694 = b3p*t64693;
            double t64695 = c*c;
            double t64696 = 1.0/pow(t64688,2.0/3.0);
            double t64697 = b4p*t64695*t64696;
            double t64698 = b2p*c*t64689;
            double t64699 = t64692+t64694+t64697+t64698;
            double t64700 = 1.0/pow(t64688,4.0/3.0);
            double t64701 = 1.0/c0p;
            double t64702 = 1.0/t64699;
            double t64703 = t64701*t64702*(1.0/2.0);
            double t64704 = t64703+1.0;
            double t64705 = a1p*c*t64689;
            double t64706 = t64705+1.0;
            double t64707 = rho_a[index]-rho_b[index];
            double t64708 = t64707*t64707;
            double t64709 = 1.0/t64688;
            double t64710 = t64707*t64709;
            double t64711 = two_13*2.0;
            double t64712 = t64711-2.0;
            double t64713 = 1.0/t64712;
            double t64714 = 1.0/c0f;
            double t64715 = b1f*t64691;
            double t64716 = b3f*t64693;
            double t64717 = b4f*t64695*t64696;
            double t64718 = b2f*c*t64689;
            double t64719 = t64715+t64716+t64717+t64718;
            double t64720 = 1.0/t64719;
            double t64721 = t64720*t64714*(1.0/2.0);
            double t64722 = t64721+1.0;
            double t64723 = log(t64722);
            double t64724 = a1f*c*t64689;
            double t64725 = t64724+1.0;
            double t64726 = log(t64704);
            double t64736 = c0f*t64723*t64725*2.0;
            double t64737 = c0p*t64706*t64726*2.0;
            double t64727 = t64736-t64737;
            double t64728 = t64710+1.0;
            double t64729 = pow(t64728,4.0/3.0);
            double t64730 = -t64710+1.0;
            double t64731 = pow(t64730,4.0/3.0);
            double t64732 = t64731+t64729-2.0;
            double t64733 = 1.0/(t64688*t64688);
            double t64764 = t64733*t64707;
            double t64734 = t64709-t64764;
            double t64735 = 1.0/(t64688*t64688*t64688*t64688);
            double t64738 = t64708*t64708;
            double t64739 = 1.0/pow(t64688,5.0/3.0);
            double t64740 = 1.0/sqrt(t64690);
            double t64741 = 1.0/t64704;
            double t64742 = 1.0/(t64699*t64699);
            double t64743 = b4p*t64739*t64695*(2.0/3.0);
            double t64744 = b2p*c*t64700*(1.0/3.0);
            double t64745 = b1p*c*t64700*t64740*(1.0/6.0);
            double t64746 = b3p*c*t64700*t64691*(1.0/2.0);
            double t64747 = t64743+t64744+t64745+t64746;
            double t64748 = t64741*t64706*t64742*t64747;
            double t64749 = 1.0/(t64688*t64688*t64688*t64688*t64688);
            double t64750 = 1.0/d2fz0;
            double t64751 = 1.0/Aa;
            double t64752 = b1a*t64691;
            double t64753 = b3a*t64693;
            double t64754 = b4a*t64695*t64696;
            double t64755 = b2a*c*t64689;
            double t64756 = t64752+t64753+t64754+t64755;
            double t64757 = 1.0/t64756;
            double t64758 = t64751*t64757*(1.0/2.0);
            double t64759 = t64758+1.0;
            double t64760 = log(t64759);
            double t64761 = a1a*c*t64689;
            double t64762 = t64761+1.0;
            double t64763 = pow(t64728,1.0/3.0);
            double t64765 = t64734*t64763*(4.0/3.0);
            double t64766 = pow(t64730,1.0/3.0);
            double t64910 = t64734*t64766*(4.0/3.0);
            double t64767 = -t64910+t64765;
            double t64768 = t64735*t64738;
            double t64769 = t64768-1.0;
            double t64770 = 1.0/pow(rho_a[index],1.0/3.0);
            double t64771 = c*t64770;
            double t64772 = sqrt(t64771);
            double t64773 = b1f*t64772;
            double t64774 = pow(t64771,3.0/2.0);
            double t64775 = b3f*t64774;
            double t64776 = 1.0/pow(rho_a[index],2.0/3.0);
            double t64777 = b4f*t64695*t64776;
            double t64778 = b2f*c*t64770;
            double t64779 = t64773+t64775+t64777+t64778;
            double t64780 = 1.0/pow(rho_a[index],4.0/3.0);
            double t64781 = b1p*t64772;
            double t64782 = b3p*t64774;
            double t64783 = b4p*t64695*t64776;
            double t64784 = b2p*c*t64770;
            double t64785 = t64781+t64782+t64783+t64784;
            double t64786 = 1.0/pow(rho_a[index],5.0/3.0);
            double t64787 = 1.0/sqrt(t64771);
            double t64788 = 1.0/t64779;
            double t64789 = t64714*t64788*(1.0/2.0);
            double t64790 = t64789+1.0;
            double t64791 = 1.0/t64785;
            double t64792 = t64701*t64791*(1.0/2.0);
            double t64793 = t64792+1.0;
            double t64794 = a1p*c*t64770;
            double t64795 = t64794+1.0;
            double t64796 = 1.0/t64793;
            double t64797 = 1.0/(t64785*t64785);
            double t64798 = b4p*t64695*t64786*(2.0/3.0);
            double t64799 = b2p*c*t64780*(1.0/3.0);
            double t64800 = b1p*c*t64780*t64787*(1.0/6.0);
            double t64801 = b3p*c*t64780*t64772*(1.0/2.0);
            double t64802 = t64800+t64801+t64798+t64799;
            double t64803 = t64802*t64795*t64796*t64797;
            double t64804 = log(t64793);
            double t64805 = pow(2.0,1.0/3.0);
            double t64806 = t64805*2.0;
            double t64807 = t64806-2.0;
            double t64808 = log(t64790);
            double t64809 = a1f*c*t64770;
            double t64810 = t64809+1.0;
            double t64811 = gcab*gcab;
            double t64815 = 1.0/pow(rho_a[index],8.0/3.0);
            double t64816 = gamma_aa[index]*t64815*(1.0/2.0);
            double t64817 = 1.0/pow(rho_b[index],8.0/3.0);
            double t64818 = gamma_bb[index]*t64817*(1.0/2.0);
            double t64812 = t64816+t64818;
            double t64813 = t64812*t64812;
            double t64814 = 1.0/pow(rho_b[index],1.1E1/3.0);
            double t64819 = t64811*t64811;
            double t64820 = t64813*t64813;
            double t64821 = t64811*t64813*6.0;
            double t64822 = gcab*t64811*t64812*t64813*4.0;
            double t64823 = t64820*t64819;
            double t64824 = gcab*t64812*4.0;
            double t64825 = t64821+t64822+t64823+t64824+1.0;
            double t64826 = gcab*t64812;
            double t64827 = t64826+1.0;
            double t64828 = t64811*t64813;
            double t64829 = gcab*t64812*2.0;
            double t64830 = t64828+t64829+1.0;
            double t64831 = t64811*t64813*3.0;
            double t64832 = gcab*t64811*t64812*t64813;
            double t64833 = gcab*t64812*3.0;
            double t64834 = t64831+t64832+t64833+1.0;
            double t64835 = t64713*t64732*t64707*t64708*t64735*t64727*4.0;
            double t64836 = t64709+t64764;
            double t64837 = 1.0/t64722;
            double t64838 = 1.0/(t64719*t64719);
            double t64839 = b4f*t64739*t64695*(2.0/3.0);
            double t64840 = b2f*c*t64700*(1.0/3.0);
            double t64841 = b1f*c*t64700*t64740*(1.0/6.0);
            double t64842 = b3f*c*t64700*t64691*(1.0/2.0);
            double t64843 = t64840+t64841+t64842+t64839;
            double t64844 = a1f*c*c0f*t64700*t64723*(2.0/3.0);
            double t64845 = t64738*t64749*4.0;
            double t64846 = t64763*t64836*(4.0/3.0);
            double t64909 = t64836*t64766*(4.0/3.0);
            double t64847 = t64846-t64909;
            double t64848 = 1.0/t64759;
            double t64849 = 1.0/(t64756*t64756);
            double t64850 = b4a*t64739*t64695*(2.0/3.0);
            double t64851 = b2a*c*t64700*(1.0/3.0);
            double t64852 = b1a*c*t64700*t64740*(1.0/6.0);
            double t64853 = b3a*c*t64700*t64691*(1.0/2.0);
            double t64854 = t64850+t64851+t64852+t64853;
            double t64855 = t64713*t64732*t64750*t64762*t64854*t64848*t64849*t64769;
            double t64856 = 1.0/pow(rho_b[index],1.0/3.0);
            double t64857 = c*t64856;
            double t64858 = sqrt(t64857);
            double t64859 = b1f*t64858;
            double t64860 = pow(t64857,3.0/2.0);
            double t64861 = b3f*t64860;
            double t64862 = 1.0/pow(rho_b[index],2.0/3.0);
            double t64863 = b4f*t64862*t64695;
            double t64864 = b2f*c*t64856;
            double t64865 = t64861+t64863+t64864+t64859;
            double t64866 = 1.0/pow(rho_b[index],4.0/3.0);
            double t64867 = b1p*t64858;
            double t64868 = b3p*t64860;
            double t64869 = b4p*t64862*t64695;
            double t64870 = b2p*c*t64856;
            double t64871 = t64870+t64867+t64868+t64869;
            double t64872 = 1.0/pow(rho_b[index],5.0/3.0);
            double t64873 = 1.0/sqrt(t64857);
            double t64874 = 1.0/t64865;
            double t64875 = t64714*t64874*(1.0/2.0);
            double t64876 = t64875+1.0;
            double t64877 = 1.0/t64871;
            double t64878 = t64701*t64877*(1.0/2.0);
            double t64879 = t64878+1.0;
            double t64880 = a1p*c*t64856;
            double t64881 = t64880+1.0;
            double t64882 = 1.0/t64879;
            double t64883 = 1.0/(t64871*t64871);
            double t64884 = b4p*t64872*t64695*(2.0/3.0);
            double t64885 = b2p*c*t64866*(1.0/3.0);
            double t64886 = b1p*c*t64873*t64866*(1.0/6.0);
            double t64887 = b3p*c*t64866*t64858*(1.0/2.0);
            double t64888 = t64884+t64885+t64886+t64887;
            double t64889 = t64881*t64882*t64883*t64888;
            double t64890 = log(t64879);
            double t64891 = log(t64876);
            double t64892 = a1f*c*t64856;
            double t64893 = t64892+1.0;
            double t64894 = t64713*t64732*t64735*t64727*t64738;
            double t64895 = Aa*t64713*t64732*t64750*t64760*t64762*t64769*2.0;
            double t64896 = 1.0/pow(rho_a[index],1.1E1/3.0);
            double t64897 = 1.0/(t64834*t64834);
            double t64898 = 1.0/t64827;
            double t64899 = 1.0/(t64825*t64825);
            double t64900 = 1.0/(t64830*t64830);
            double t64901 = 1.0/t64825;
            double t64902 = 1.0/(t64827*t64827);
            double t64903 = 1.0/t64830;
            double t64904 = 1.0/t64834;
            double t64906 = a1p*c*c0p*t64700*t64726*(2.0/3.0);
            double t64911 = t64725*t64843*t64837*t64838;
            double t64905 = -t64911-t64906+t64844+t64748;
            double t64907 = 1.0/pow(t64688,7.0/3.0);
            double t64908 = 1.0/pow(t64688,8.0/3.0);
            double t64912 = t64747*t64747;
            double t64913 = 1.0/pow(t64690,3.0/2.0);
            double t64914 = b4p*t64908*t64695*(1.0E1/9.0);
            double t64915 = b2p*c*t64907*(4.0/9.0);
            double t64916 = b1p*c*t64740*t64907*(2.0/9.0);
            double t64917 = b3p*c*t64691*t64907*(2.0/3.0);
            double t64918 = b3p*t64740*t64908*t64695*(1.0/1.2E1);
            double t64919 = t64914+t64915+t64916+t64917+t64918-b1p*t64913*t64908*t64695*(1.0/3.6E1);
            double t64920 = t64741*t64706*t64742*t64919;
            double t64921 = 1.0/(t64699*t64699*t64699);
            double t64922 = t64843*t64843;
            double t64923 = 1.0/(t64704*t64704);
            double t64924 = 1.0/(t64699*t64699*t64699*t64699);
            double t64925 = t64701*t64912*t64706*t64923*t64924*(1.0/2.0);
            double t64926 = t64911+t64906-t64844-t64748;
            double t64927 = 1.0/(t64688*t64688*t64688);
            double t64928 = a1p*c*t64700*t64741*t64742*t64747*(2.0/3.0);
            double t64929 = 1.0/(t64688*t64688*t64688*t64688*t64688*t64688);
            double t64930 = t64707*t64708*t64735*4.0;
            double t64931 = t64930+t64845;
            double t64932 = t64707*t64927*t64766*(8.0/3.0);
            double t64933 = 1.0/pow(t64728,2.0/3.0);
            double t64934 = t64734*t64933*t64836*(4.0/9.0);
            double t64935 = 1.0/pow(t64730,2.0/3.0);
            double t64936 = t64734*t64836*t64935*(4.0/9.0);
            double t64937 = t64932+t64934+t64936-t64707*t64763*t64927*(8.0/3.0);
            double t64938 = t64930-t64845;
            double t64939 = t64854*t64854;
            double t64940 = t64713*t64735*t64727*t64738*t64847;
            double t64941 = t64713*t64735*t64727*t64738*t64767;
            double t64942 = Aa*t64713*t64732*t64750*t64760*t64931*t64762*2.0;
            double t64943 = Aa*t64713*t64750*t64760*t64762*t64847*t64769*2.0;
            double t64944 = Aa*t64713*t64750*t64760*t64762*t64767*t64769*2.0;
            double t64945 = c0f*t64810*t64808*2.0;
            double t64947 = c0p*t64804*t64795*2.0;
            double t64946 = t64945-t64947;
            double t64948 = c0f*t64891*t64893*2.0;
            double t64950 = c0p*t64881*t64890*2.0;
            double t64949 = -t64950+t64948;
            double t64951 = gamma_aa[index]*gcab*t64896*(8.0/3.0);
            double t64952 = gamma_aa[index]*t64811*t64812*t64896*(8.0/3.0);
            double t64953 = t64951+t64952;
            double t64954 = gamma_bb[index]*gcab*t64814*(8.0/3.0);
            double t64955 = gamma_bb[index]*t64811*t64812*t64814*(8.0/3.0);
            double t64956 = t64954+t64955;
            double t64957 = gamma_aa[index]*gcab*t64896*(1.6E1/3.0);
            double t64958 = gamma_aa[index]*gcab*t64811*t64813*t64896*1.6E1;
            double t64959 = gamma_aa[index]*t64812*t64813*t64819*t64896*(1.6E1/3.0);
            double t64960 = gamma_aa[index]*t64811*t64812*t64896*1.6E1;
            double t64961 = t64960+t64957+t64958+t64959;
            double t64962 = gamma_bb[index]*gcab*t64814*(1.6E1/3.0);
            double t64963 = gamma_bb[index]*gcab*t64811*t64813*t64814*1.6E1;
            double t64964 = gamma_bb[index]*t64812*t64813*t64814*t64819*(1.6E1/3.0);
            double t64965 = gamma_bb[index]*t64811*t64812*t64814*1.6E1;
            double t64966 = t64962+t64963+t64964+t64965;
            double t64967 = gamma_aa[index]*gcab*t64896*4.0;
            double t64968 = gamma_aa[index]*gcab*t64811*t64813*t64896*4.0;
            double t64969 = gamma_aa[index]*t64811*t64812*t64896*8.0;
            double t64970 = t64967+t64968+t64969;
            double t64971 = gamma_bb[index]*gcab*t64814*4.0;
            double t64972 = gamma_bb[index]*gcab*t64811*t64813*t64814*4.0;
            double t64973 = gamma_bb[index]*t64811*t64812*t64814*8.0;
            double t64974 = t64971+t64972+t64973;
            v_rho_a_rho_b_[index] = (t64737+t64894+t64895+rho_a[index]*(-t64803+t64713*t64807*(t64803-(t64810* \
               1.0/(t64779*t64779)*(b2f*c*t64780*(1.0/3.0)+b4f*t64695*t64786*(2.0/3.0)+b1f*c*t64780*t64787*(1.0/6.0) \
               +b3f*c*t64780*t64772*(1.0/2.0)))/t64790+a1f*c*c0f*t64780*t64808*(2.0/3.0)-a1p*c*c0p*t64804*t64780* \
               (2.0/3.0))+a1p*c*c0p*t64804*t64780*(2.0/3.0))+t64688*(t64941+t64835+t64944+t64855+t64748-a1p*c*c0p* \
               t64700*t64726*(2.0/3.0)-t64713*t64732*t64905*t64735*t64738-t64713*t64732*t64727*t64738*t64749*4.0- \
               Aa*t64713*t64732*t64750*t64760*t64762*(t64845-t64707*t64708*t64735*4.0)*2.0-Aa*a1a*c*t64700*t64713* \
               t64732*t64750*t64760*t64769*(2.0/3.0))-c0p*t64804*t64795*2.0-t64713*t64807*t64946)*(ccab1*gamma_bb[index]* \
               gcab*t64814*t64898*(4.0/3.0)-ccab2*t64900*t64811*t64813*t64956-ccab4*t64820*t64819*t64966*t64899-ccab1* \
               gamma_bb[index]*t64811*t64812*t64902*t64814*(4.0/3.0)+ccab2*gamma_bb[index]*t64811*t64812*t64903*t64814* \
               (8.0/3.0)+ccab3*gamma_bb[index]*gcab*t64811*t64813*t64814*t64904*4.0+ccab4*gamma_bb[index]*t64901* \
               t64812*t64813*t64814*t64819*(1.6E1/3.0)-ccab3*gcab*t64811*t64812*t64813*t64974*t64897)+(ccab0+ccab1* \
               gcab*t64812*t64898+ccab2*t64811*t64813*t64903+ccab4*t64820*t64901*t64819+ccab3*gcab*t64811*t64812* \
               t64813*t64904)*(t64940-t64941+t64942+t64943-t64944+t64688*(t64920+t64925+t64928-t64741*t64912*t64921* \
               t64706*2.0-a1p*c*c0p*t64726*t64907*(8.0/9.0)-t64713*t64732*t64735*t64738*(t64920+t64925+t64928-t64741* \
               t64912*t64921*t64706*2.0+t64922*t64725*1.0/(t64719*t64719*t64719)*t64837*2.0-t64725*t64837*t64838* \
               (b2f*c*t64907*(4.0/9.0)+b4f*t64908*t64695*(1.0E1/9.0)+b1f*c*t64740*t64907*(2.0/9.0)+b3f*c*t64691*t64907* \
               (2.0/3.0)-b1f*t64913*t64908*t64695*(1.0/3.6E1)+b3f*t64740*t64908*t64695*(1.0/1.2E1))-1.0/(t64722*t64722) \
               *t64714*t64922*t64725*1.0/(t64719*t64719*t64719*t64719)*(1.0/2.0)+a1f*c*c0f*t64723*t64907*(8.0/9.0) \
               -a1p*c*c0p*t64726*t64907*(8.0/9.0)-a1f*c*t64700*t64843*t64837*t64838*(2.0/3.0))+t64713*t64732*t64708* \
               t64735*t64727*1.2E1-t64713*t64732*t64727*t64738*t64929*2.0E1+t64713*t64732*t64926*t64738*t64749*8.0+ \
               t64713*t64735*t64727*t64738*t64937+t64713*t64735*t64926*t64738*t64847-t64713*t64735*t64926*t64738* \
               t64767-t64713*t64727*t64738*t64847*t64749*4.0+t64713*t64727*t64738*t64749*t64767*4.0+t64713*t64707* \
               t64708*t64735*t64727*t64847*4.0+t64713*t64707*t64708*t64735*t64727*t64767*4.0+Aa*t64713*t64750*t64760* \
               t64931*t64762*t64767*2.0+Aa*t64713*t64750*t64760*t64762*t64847*t64938*2.0+Aa*t64713*t64750*t64760* \
               t64762*t64937*t64769*2.0+Aa*t64713*t64732*t64750*t64760*t64762*(t64708*t64735*1.2E1-t64738*t64929* \
               2.0E1)*2.0+t64713*t64732*t64750*t64931*t64762*t64854*t64848*t64849-t64713*t64732*t64750*t64762*t64854* \
               t64848*t64938*t64849+t64713*t64750*t64762*t64854*t64847*t64848*t64849*t64769-t64713*t64750*t64762* \
               t64854*t64767*t64848*t64849*t64769-t64713*t64732*t64750*t64762*1.0/(t64756*t64756*t64756)*t64848*t64939* \
               t64769*2.0+t64713*t64732*t64750*t64762*t64848*t64849*t64769*(b2a*c*t64907*(4.0/9.0)+b4a*t64908*t64695* \
               (1.0E1/9.0)+b1a*c*t64740*t64907*(2.0/9.0)+b3a*c*t64691*t64907*(2.0/3.0)-b1a*t64913*t64908*t64695*(1.0/ \
               3.6E1)+b3a*t64740*t64908*t64695*(1.0/1.2E1))-Aa*a1a*c*t64700*t64713*t64732*t64750*t64760*t64931*(2.0/ \
               3.0)+Aa*a1a*c*t64700*t64713*t64732*t64750*t64760*t64938*(2.0/3.0)-Aa*a1a*c*t64700*t64713*t64750*t64760* \
               t64847*t64769*(2.0/3.0)+Aa*a1a*c*t64700*t64713*t64750*t64760*t64767*t64769*(2.0/3.0)-Aa*a1a*c*t64713* \
               t64732*t64750*t64760*t64907*t64769*(8.0/9.0)+t64713*t64732*t64750*t64751*t64762*1.0/(t64756*t64756* \
               t64756*t64756)*1.0/(t64759*t64759)*t64939*t64769*(1.0/2.0)+a1a*c*t64700*t64713*t64732*t64750*t64854* \
               t64848*t64849*t64769*(2.0/3.0))-t64741*t64706*t64742*t64747*2.0+a1p*c*c0p*t64700*t64726*(4.0/3.0)- \
               t64713*t64732*t64735*t64926*t64738*2.0+t64713*t64732*t64727*t64738*t64749*8.0-Aa*t64713*t64732*t64750* \
               t64760*t64762*t64938*2.0-t64713*t64732*t64750*t64762*t64854*t64848*t64849*t64769*2.0+Aa*a1a*c*t64700* \
               t64713*t64732*t64750*t64760*t64769*(4.0/3.0))-(rho_b[index]*(t64950+t64713*t64807*t64949)+rho_a[index]* \
               (t64947+t64713*t64807*t64946)-t64688*(t64737+t64894+t64895))*(ccab4*t64820*t64819*t64899*(gamma_aa[index]* \
               gamma_bb[index]*t64811*t64814*t64896*(6.4E1/3.0)+gamma_aa[index]*gamma_bb[index]*t64813*t64814*t64819* \
               t64896*(6.4E1/3.0)+gamma_aa[index]*gamma_bb[index]*gcab*t64811*t64812*t64814*t64896*(1.28E2/3.0))- \
               ccab2*t64811*1.0/(t64830*t64830*t64830)*t64813*t64953*t64956*2.0-ccab4*t64820*1.0/(t64825*t64825*t64825) \
               *t64961*t64819*t64966*2.0+ccab3*gcab*t64811*t64812*t64813*t64897*(gamma_aa[index]*gamma_bb[index]* \
               t64811*t64814*t64896*(3.2E1/3.0)+gamma_aa[index]*gamma_bb[index]*gcab*t64811*t64812*t64814*t64896* \
               (3.2E1/3.0))+ccab1*gamma_aa[index]*gamma_bb[index]*t64811*t64902*t64814*t64896*(3.2E1/9.0)-ccab2*gamma_aa[index]* \
               gamma_bb[index]*t64811*t64903*t64814*t64896*(3.2E1/9.0)+ccab2*gamma_bb[index]*t64900*t64811*t64812* \
               t64814*t64953*(8.0/3.0)+ccab2*gamma_aa[index]*t64900*t64811*t64812*t64956*t64896*(8.0/3.0)-ccab3*gcab* \
               t64811*t64812*t64813*1.0/(t64834*t64834*t64834)*t64970*t64974*2.0+ccab2*gamma_aa[index]*gamma_bb[index]* \
               t64900*t64813*t64814*t64819*t64896*(3.2E1/9.0)-ccab4*gamma_aa[index]*gamma_bb[index]*t64901*t64813* \
               t64814*t64819*t64896*(6.4E1/3.0)+ccab3*gamma_bb[index]*gcab*t64811*t64813*t64814*t64970*t64897*4.0+ \
               ccab3*gamma_aa[index]*gcab*t64811*t64813*t64974*t64896*t64897*4.0+ccab4*gamma_bb[index]*t64812*t64813* \
               t64814*t64961*t64819*t64899*(1.6E1/3.0)+ccab4*gamma_aa[index]*t64812*t64813*t64819*t64966*t64896*t64899* \
               (1.6E1/3.0)-ccab3*gamma_aa[index]*gamma_bb[index]*gcab*t64811*t64812*t64814*t64904*t64896*(3.2E1/3.0) \
               -ccab1*gamma_aa[index]*gamma_bb[index]*gcab*t64811*t64812*t64814*1.0/(t64827*t64827*t64827)*t64896* \
               (3.2E1/9.0))+(t64737+t64894+t64895-t64688*(t64940+t64906+t64942+t64835+t64943-t64855-t64748+t64713* \
               t64732*t64905*t64735*t64738+t64713*t64732*t64727*t64738*t64749*4.0+Aa*a1a*c*t64700*t64713*t64732*t64750* \
               t64760*t64769*(2.0/3.0))+rho_b[index]*(-t64889+t64713*t64807*(t64889-(1.0/(t64865*t64865)*t64893*(b2f* \
               c*t64866*(1.0/3.0)+b4f*t64872*t64695*(2.0/3.0)+b1f*c*t64873*t64866*(1.0/6.0)+b3f*c*t64866*t64858*(1.0/ \
               2.0)))/t64876+a1f*c*c0f*t64891*t64866*(2.0/3.0)-a1p*c*c0p*t64890*t64866*(2.0/3.0))+a1p*c*c0p*t64890* \
               t64866*(2.0/3.0))-c0p*t64881*t64890*2.0-t64713*t64807*t64949)*(ccab1*gamma_aa[index]*gcab*t64896*t64898* \
               (4.0/3.0)-ccab2*t64900*t64811*t64813*t64953-ccab4*t64820*t64961*t64819*t64899-ccab1*gamma_aa[index]* \
               t64811*t64812*t64902*t64896*(4.0/3.0)+ccab2*gamma_aa[index]*t64811*t64812*t64903*t64896*(8.0/3.0)+ \
               ccab3*gamma_aa[index]*gcab*t64811*t64813*t64904*t64896*4.0+ccab4*gamma_aa[index]*t64901*t64812*t64813* \
               t64819*t64896*(1.6E1/3.0)-ccab3*gcab*t64811*t64812*t64813*t64970*t64897);
        } else if (rho_a[index] > cutoff_) {
            v_rho_a_rho_b_[index] = 0.0;
        } else if (rho_b[index] > cutoff_) {
            v_rho_a_rho_b_[index] = 0.0;
        } else {
            v_rho_a_rho_b_[index] = 0.0;
        } 

        //V_rho_b_rho_b
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t64976 = rho_a[index]+rho_b[index];
            double t64977 = 1.0/pow(t64976,1.0/3.0);
            double t64978 = c*t64977;
            double t64979 = sqrt(t64978);
            double t64980 = b1p*t64979;
            double t64981 = pow(t64978,3.0/2.0);
            double t64982 = b3p*t64981;
            double t64983 = c*c;
            double t64984 = 1.0/pow(t64976,2.0/3.0);
            double t64985 = b4p*t64983*t64984;
            double t64986 = b2p*c*t64977;
            double t64987 = t64980+t64982+t64985+t64986;
            double t64988 = 1.0/pow(t64976,4.0/3.0);
            double t64989 = 1.0/c0p;
            double t64990 = 1.0/t64987;
            double t64991 = t64990*t64989*(1.0/2.0);
            double t64992 = t64991+1.0;
            double t64993 = a1p*c*t64977;
            double t64994 = t64993+1.0;
            double t64995 = rho_a[index]-rho_b[index];
            double t64996 = t64995*t64995;
            double t64997 = 1.0/t64976;
            double t64998 = t64995*t64997;
            double t64999 = two_13*2.0;
            double t65000 = t64999-2.0;
            double t65001 = 1.0/t65000;
            double t65002 = 1.0/c0f;
            double t65003 = b1f*t64979;
            double t65004 = b3f*t64981;
            double t65005 = b4f*t64983*t64984;
            double t65006 = b2f*c*t64977;
            double t65007 = t65003+t65004+t65005+t65006;
            double t65008 = 1.0/t65007;
            double t65009 = t65002*t65008*(1.0/2.0);
            double t65010 = t65009+1.0;
            double t65011 = log(t65010);
            double t65012 = a1f*c*t64977;
            double t65013 = t65012+1.0;
            double t65014 = log(t64992);
            double t65025 = c0f*t65011*t65013*2.0;
            double t65026 = c0p*t64994*t65014*2.0;
            double t65015 = t65025-t65026;
            double t65016 = t64998+1.0;
            double t65017 = pow(t65016,4.0/3.0);
            double t65018 = -t64998+1.0;
            double t65019 = pow(t65018,4.0/3.0);
            double t65020 = t65017+t65019-2.0;
            double t65021 = 1.0/(t64976*t64976);
            double t65022 = t64995*t65021;
            double t65023 = t64997+t65022;
            double t65024 = 1.0/(t64976*t64976*t64976*t64976);
            double t65027 = t64996*t64996;
            double t65028 = 1.0/pow(t64976,5.0/3.0);
            double t65029 = 1.0/sqrt(t64978);
            double t65030 = 1.0/t64992;
            double t65031 = 1.0/(t64987*t64987);
            double t65032 = b4p*t64983*t65028*(2.0/3.0);
            double t65033 = b2p*c*t64988*(1.0/3.0);
            double t65034 = b1p*c*t64988*t65029*(1.0/6.0);
            double t65035 = b3p*c*t64979*t64988*(1.0/2.0);
            double t65036 = t65032+t65033+t65034+t65035;
            double t65037 = 1.0/(t64976*t64976*t64976*t64976*t64976);
            double t65038 = 1.0/d2fz0;
            double t65039 = 1.0/Aa;
            double t65040 = b1a*t64979;
            double t65041 = b3a*t64981;
            double t65042 = b4a*t64983*t64984;
            double t65043 = b2a*c*t64977;
            double t65044 = t65040+t65041+t65042+t65043;
            double t65045 = 1.0/t65044;
            double t65046 = t65045*t65039*(1.0/2.0);
            double t65047 = t65046+1.0;
            double t65048 = log(t65047);
            double t65049 = a1a*c*t64977;
            double t65050 = t65049+1.0;
            double t65051 = pow(t65016,1.0/3.0);
            double t65052 = t65023*t65051*(4.0/3.0);
            double t65053 = pow(t65018,1.0/3.0);
            double t65129 = t65023*t65053*(4.0/3.0);
            double t65054 = t65052-t65129;
            double t65055 = t65024*t65027;
            double t65056 = t65055-1.0;
            double t65057 = 1.0/pow(rho_b[index],1.0/3.0);
            double t65058 = c*t65057;
            double t65059 = sqrt(t65058);
            double t65060 = b1f*t65059;
            double t65061 = pow(t65058,3.0/2.0);
            double t65062 = b3f*t65061;
            double t65063 = 1.0/pow(rho_b[index],2.0/3.0);
            double t65064 = b4f*t64983*t65063;
            double t65065 = b2f*c*t65057;
            double t65066 = t65060+t65062+t65064+t65065;
            double t65067 = 1.0/pow(rho_b[index],4.0/3.0);
            double t65068 = b1p*t65059;
            double t65069 = b3p*t65061;
            double t65070 = b4p*t64983*t65063;
            double t65071 = b2p*c*t65057;
            double t65072 = t65070+t65071+t65068+t65069;
            double t65073 = 1.0/pow(rho_b[index],5.0/3.0);
            double t65074 = 1.0/sqrt(t65058);
            double t65075 = 1.0/t65066;
            double t65076 = t65002*t65075*(1.0/2.0);
            double t65077 = t65076+1.0;
            double t65078 = 1.0/t65072;
            double t65079 = t64989*t65078*(1.0/2.0);
            double t65080 = t65079+1.0;
            double t65081 = a1p*c*t65057;
            double t65082 = t65081+1.0;
            double t65083 = 1.0/t65080;
            double t65084 = 1.0/(t65072*t65072);
            double t65085 = b4p*t64983*t65073*(2.0/3.0);
            double t65086 = b2p*c*t65067*(1.0/3.0);
            double t65087 = b1p*c*t65074*t65067*(1.0/6.0);
            double t65088 = b3p*c*t65067*t65059*(1.0/2.0);
            double t65089 = t65085+t65086+t65087+t65088;
            double t65090 = t65082*t65083*t65084*t65089;
            double t65091 = log(t65080);
            double t65092 = pow(2.0,1.0/3.0);
            double t65093 = t65092*2.0;
            double t65094 = t65093-2.0;
            double t65095 = log(t65077);
            double t65096 = a1f*c*t65057;
            double t65097 = t65096+1.0;
            double t65098 = gcab*gcab;
            double t65102 = 1.0/pow(rho_a[index],8.0/3.0);
            double t65103 = gamma_aa[index]*t65102*(1.0/2.0);
            double t65104 = 1.0/pow(rho_b[index],8.0/3.0);
            double t65105 = gamma_bb[index]*t65104*(1.0/2.0);
            double t65099 = t65103+t65105;
            double t65100 = t65099*t65099;
            double t65101 = 1.0/pow(rho_b[index],1.1E1/3.0);
            double t65106 = t65098*t65098;
            double t65107 = t65100*t65100;
            double t65108 = t65100*t65098*6.0;
            double t65109 = gcab*t65100*t65098*t65099*4.0;
            double t65110 = t65106*t65107;
            double t65111 = gcab*t65099*4.0;
            double t65112 = t65110+t65111+t65108+t65109+1.0;
            double t65113 = gcab*t65099;
            double t65114 = t65113+1.0;
            double t65115 = t65100*t65098;
            double t65116 = gcab*t65099*2.0;
            double t65117 = t65115+t65116+1.0;
            double t65118 = t65100*t65098*3.0;
            double t65119 = gcab*t65100*t65098*t65099;
            double t65120 = gcab*t65099*3.0;
            double t65121 = t65120+t65118+t65119+1.0;
            double t65122 = a1p*c*c0p*t64988*t65014*(2.0/3.0);
            double t65123 = 1.0/t65117;
            double t65124 = 1.0/t65121;
            double t65125 = 1.0/t65114;
            double t65126 = 1.0/t65112;
            double t65127 = 1.0/pow(t64976,7.0/3.0);
            double t65128 = 1.0/pow(t64976,8.0/3.0);
            double t65130 = 1.0/t65010;
            double t65131 = 1.0/(t65007*t65007);
            double t65132 = b4f*t64983*t65028*(2.0/3.0);
            double t65133 = b2f*c*t64988*(1.0/3.0);
            double t65134 = b1f*c*t64988*t65029*(1.0/6.0);
            double t65135 = b3f*c*t64979*t64988*(1.0/2.0);
            double t65136 = t65132+t65133+t65134+t65135;
            double t65137 = t65013*t65130*t65131*t65136;
            double t65139 = t64994*t65030*t65031*t65036;
            double t65140 = a1f*c*c0f*t64988*t65011*(2.0/3.0);
            double t65138 = t65122-t65140+t65137-t65139;
            double t65141 = t65036*t65036;
            double t65142 = 1.0/pow(t64978,3.0/2.0);
            double t65143 = b4p*t64983*t65128*(1.0E1/9.0);
            double t65144 = b2p*c*t65127*(4.0/9.0);
            double t65145 = b1p*c*t65127*t65029*(2.0/9.0);
            double t65146 = b3p*c*t64979*t65127*(2.0/3.0);
            double t65147 = b3p*t64983*t65029*t65128*(1.0/1.2E1);
            double t65148 = t65143+t65144+t65145+t65146+t65147-b1p*t64983*t65142*t65128*(1.0/3.6E1);
            double t65149 = 1.0/(t64987*t64987*t64987);
            double t65150 = t64994*t65030*t65141*t65149*2.0;
            double t65151 = t65136*t65136;
            double t65152 = 1.0/(t64992*t64992);
            double t65153 = 1.0/(t64987*t64987*t64987*t64987);
            double t65154 = t65021*2.0;
            double t65155 = 1.0/(t64976*t64976*t64976);
            double t65156 = t64995*t65155*2.0;
            double t65157 = t65154+t65156;
            double t65158 = t65023*t65023;
            double t65159 = a1p*c*c0p*t65014*t65127*(8.0/9.0);
            double t65160 = 1.0/(t64976*t64976*t64976*t64976*t64976*t64976);
            double t65161 = t64995*t64996*t65024*4.0;
            double t65162 = t65027*t65037*4.0;
            double t65163 = t65161+t65162;
            double t65164 = t65051*t65157*(4.0/3.0);
            double t65165 = 1.0/pow(t65016,2.0/3.0);
            double t65166 = t65165*t65158*(4.0/9.0);
            double t65167 = 1.0/pow(t65018,2.0/3.0);
            double t65168 = t65158*t65167*(4.0/9.0);
            double t65169 = t65164+t65166+t65168-t65053*t65157*(4.0/3.0);
            double t65170 = 1.0/t65047;
            double t65171 = 1.0/(t65044*t65044);
            double t65172 = b4a*t64983*t65028*(2.0/3.0);
            double t65173 = b2a*c*t64988*(1.0/3.0);
            double t65174 = b1a*c*t64988*t65029*(1.0/6.0);
            double t65175 = b3a*c*t64979*t64988*(1.0/2.0);
            double t65176 = t65172+t65173+t65174+t65175;
            double t65177 = t65176*t65176;
            double t65178 = 1.0/t65077;
            double t65179 = b4f*t64983*t65073*(2.0/3.0);
            double t65180 = b2f*c*t65067*(1.0/3.0);
            double t65181 = b1f*c*t65074*t65067*(1.0/6.0);
            double t65182 = b3f*c*t65067*t65059*(1.0/2.0);
            double t65183 = t65180+t65181+t65182+t65179;
            double t65184 = 1.0/(t65066*t65066);
            double t65185 = 1.0/pow(rho_b[index],7.0/3.0);
            double t65186 = 1.0/pow(t65058,3.0/2.0);
            double t65187 = t65183*t65183;
            double t65188 = t65089*t65089;
            double t65189 = 1.0/(t65072*t65072*t65072);
            double t65190 = t65082*t65083*t65188*t65189*2.0;
            double t65191 = b4p*t64983*t65104*(1.0E1/9.0);
            double t65192 = b2p*c*t65185*(4.0/9.0);
            double t65193 = b3p*t64983*t65104*t65074*(1.0/1.2E1);
            double t65194 = b1p*c*t65074*t65185*(2.0/9.0);
            double t65195 = b3p*c*t65059*t65185*(2.0/3.0);
            double t65348 = b1p*t64983*t65104*t65186*(1.0/3.6E1);
            double t65196 = t65191+t65192+t65193+t65194+t65195-t65348;
            double t65197 = 1.0/(t65080*t65080);
            double t65198 = 1.0/(t65072*t65072*t65072*t65072);
            double t65199 = a1p*c*c0p*t65091*t65185*(8.0/9.0);
            double t65200 = a1f*c*c0f*t65067*t65095*(2.0/3.0);
            double t65201 = a1p*c*c0p*t65091*t65067*(2.0/3.0);
            double t65273 = t65183*t65184*t65097*t65178;
            double t65202 = t65200-t65201+t65090-t65273;
            double t65203 = gamma_bb[index]*gamma_bb[index];
            double t65204 = gcaa*gcaa;
            double t65205 = t65203*t65203;
            double t65206 = t65204*t65204;
            double t65207 = 1.0/pow(rho_b[index],3.2E1/3.0);
            double t65208 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
               rho_b[index]*rho_b[index]);
            double t65209 = 1.0/pow(rho_b[index],1.6E1/3.0);
            double t65210 = 1.0/pow(rho_a[index],1.0/3.0);
            double t65211 = c*t65210;
            double t65212 = sqrt(t65211);
            double t65213 = pow(t65211,3.0/2.0);
            double t65214 = 1.0/pow(rho_a[index],2.0/3.0);
            double t65215 = b1p*t65212;
            double t65216 = b3p*t65213;
            double t65217 = b4p*t64983*t65214;
            double t65218 = b2p*c*t65210;
            double t65219 = t65215+t65216+t65217+t65218;
            double t65220 = 1.0/t65219;
            double t65221 = t64989*t65220*(1.0/2.0);
            double t65222 = t65221+1.0;
            double t65223 = log(t65222);
            double t65224 = a1p*c*t65210;
            double t65225 = t65224+1.0;
            double t65226 = c0p*t65223*t65225*2.0;
            double t65227 = c0f*t65095*t65097*2.0;
            double t65229 = c0p*t65082*t65091*2.0;
            double t65228 = t65227-t65229;
            double t65230 = t65001*t65020*t65015*t65024*t65027;
            double t65231 = Aa*t65001*t65020*t65050*t65038*t65056*t65048*2.0;
            double t65232 = gamma_bb[index]*gcab*t65101*(1.6E1/3.0);
            double t65233 = gamma_bb[index]*gcab*t65100*t65101*t65098*1.6E1;
            double t65234 = gamma_bb[index]*t65100*t65101*t65106*t65099*(1.6E1/3.0);
            double t65235 = gamma_bb[index]*t65101*t65098*t65099*1.6E1;
            double t65236 = t65232+t65233+t65234+t65235;
            double t65237 = 1.0/(t65114*t65114);
            double t65238 = 1.0/pow(rho_b[index],2.2E1/3.0);
            double t65239 = gamma_bb[index]*gcab*t65101*(8.0/3.0);
            double t65240 = gamma_bb[index]*t65101*t65098*t65099*(8.0/3.0);
            double t65241 = t65240+t65239;
            double t65242 = 1.0/(t65121*t65121);
            double t65243 = 1.0/pow(rho_b[index],1.4E1/3.0);
            double t65244 = 1.0/(t65112*t65112);
            double t65245 = 1.0/(t65117*t65117);
            double t65246 = gamma_bb[index]*gcab*t65101*4.0;
            double t65247 = gamma_bb[index]*gcab*t65100*t65101*t65098*4.0;
            double t65248 = gamma_bb[index]*t65101*t65098*t65099*8.0;
            double t65249 = t65246+t65247+t65248;
            double t65250 = t65001*t65228*t65094;
            double t65251 = t65250+t65229;
            double t65252 = gamma_bb[index]*gcaa*t65104*4.0;
            double t65253 = gamma_bb[index]*gcaa*t65203*t65204*t65208*4.0;
            double t65254 = t65203*t65204*t65209*6.0;
            double t65255 = t65205*t65206*t65207;
            double t65256 = t65252+t65253+t65254+t65255+1.0;
            double t65257 = 1.0/t65256;
            double t65258 = gamma_bb[index]*gcaa*t65104;
            double t65259 = t65258+1.0;
            double t65260 = 1.0/t65259;
            double t65261 = gamma_bb[index]*gcaa*t65104*3.0;
            double t65262 = gamma_bb[index]*gcaa*t65203*t65204*t65208;
            double t65263 = t65203*t65204*t65209*3.0;
            double t65264 = t65261+t65262+t65263+1.0;
            double t65265 = 1.0/t65264;
            double t65266 = gamma_bb[index]*gcaa*t65104*2.0;
            double t65267 = t65203*t65204*t65209;
            double t65268 = t65266+t65267+1.0;
            double t65269 = 1.0/t65268;
            double t65270 = 1.0/pow(rho_b[index],1.9E1/3.0);
            double t65271 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
               rho_b[index]*rho_b[index]*rho_b[index]);
            double t65272 = 1.0/pow(rho_b[index],3.5E1/3.0);
            double t65274 = t65001*t65202*t65094;
            double t65275 = ccaa4*t65205*t65206*t65272*t65257*(3.2E1/3.0);
            double t65276 = ccaa1*gamma_bb[index]*gcaa*t65101*t65260*(8.0/3.0);
            double t65277 = ccaa3*gamma_bb[index]*gcaa*t65203*t65204*t65271*t65265*8.0;
            double t65278 = ccaa2*t65203*t65204*t65270*t65269*(1.6E1/3.0);
            double t65279 = 1.0/(t65259*t65259);
            double t65280 = gamma_bb[index]*gcaa*t65101*8.0;
            double t65281 = gamma_bb[index]*gcaa*t65203*t65204*t65271*8.0;
            double t65282 = t65203*t65204*t65270*1.6E1;
            double t65283 = t65280+t65281+t65282;
            double t65284 = 1.0/(t65264*t65264);
            double t65285 = gamma_bb[index]*gcaa*t65101*(3.2E1/3.0);
            double t65286 = gamma_bb[index]*gcaa*t65203*t65204*t65271*3.2E1;
            double t65287 = t65203*t65204*t65270*3.2E1;
            double t65288 = t65205*t65206*t65272*(3.2E1/3.0);
            double t65289 = t65285+t65286+t65287+t65288;
            double t65290 = 1.0/(t65256*t65256);
            double t65291 = gamma_bb[index]*gcaa*t65101*(1.6E1/3.0);
            double t65292 = t65203*t65204*t65270*(1.6E1/3.0);
            double t65293 = t65291+t65292;
            double t65294 = 1.0/(t65268*t65268);
            double t65295 = t65275+t65276+t65277+t65278-ccaa1*t65203*t65204*t65270*t65279*(8.0/3.0)-ccaa2*t65203* \
               t65204*t65209*t65293*t65294-ccaa4*t65205*t65206*t65207*t65290*t65289-ccaa3*gamma_bb[index]*gcaa*t65203* \
               t65204*t65208*t65283*t65284;
            double t65296 = t65201-t65090+t65274;
            double t65297 = gx*gx;
            double t65298 = t65297*t65297;
            double t65299 = 1.0/pow(rho_b[index],1.0E1);
            double t65300 = gamma_bb[index]*gx*t65104;
            double t65301 = t65300+1.0;
            double t65321 = gamma_bb[index]*gx*t65101*(3.2E1/3.0);
            double t65322 = gamma_bb[index]*gx*t65203*t65271*t65297*3.2E1;
            double t65323 = t65203*t65270*t65297*3.2E1;
            double t65324 = t65205*t65272*t65298*(3.2E1/3.0);
            double t65302 = t65321+t65322+t65323+t65324;
            double t65303 = gamma_bb[index]*gx*t65104*4.0;
            double t65304 = gamma_bb[index]*gx*t65203*t65208*t65297*4.0;
            double t65305 = t65203*t65209*t65297*6.0;
            double t65306 = t65205*t65207*t65298;
            double t65307 = t65303+t65304+t65305+t65306+1.0;
            double t65327 = gamma_bb[index]*gx*t65101*(1.6E1/3.0);
            double t65328 = t65203*t65270*t65297*(1.6E1/3.0);
            double t65308 = t65327+t65328;
            double t65309 = gamma_bb[index]*gx*t65104*2.0;
            double t65310 = t65203*t65209*t65297;
            double t65311 = t65310+t65309+1.0;
            double t65312 = gamma_bb[index]*gx*t65104*3.0;
            double t65313 = gamma_bb[index]*gx*t65203*t65208*t65297;
            double t65314 = t65203*t65209*t65297*3.0;
            double t65315 = t65312+t65313+t65314+1.0;
            double t65316 = 1.0/(t65315*t65315);
            double t65317 = gamma_bb[index]*gx*t65101*8.0;
            double t65318 = gamma_bb[index]*gx*t65203*t65271*t65297*8.0;
            double t65319 = t65203*t65270*t65297*1.6E1;
            double t65320 = t65317+t65318+t65319;
            double t65325 = 1.0/pow(rho_b[index],3.8E1/3.0);
            double t65326 = 1.0/(t65307*t65307);
            double t65329 = 1.0/(t65311*t65311);
            double t65330 = 1.0/t65307;
            double t65331 = 1.0/t65301;
            double t65332 = 1.0/t65315;
            double t65333 = 1.0/t65311;
            double t65334 = 1.0/(t65301*t65301);
            double t65335 = ccaa4*t65205*t65206*t65207*t65257;
            double t65336 = ccaa1*gamma_bb[index]*gcaa*t65104*t65260;
            double t65337 = ccaa3*gamma_bb[index]*gcaa*t65203*t65204*t65208*t65265;
            double t65338 = ccaa2*t65203*t65204*t65209*t65269;
            double t65339 = ccaa0+t65335+t65336+t65337+t65338;
            double t65340 = 1.0/(t65066*t65066*t65066);
            double t65341 = b4f*t64983*t65104*(1.0E1/9.0);
            double t65342 = b2f*c*t65185*(4.0/9.0);
            double t65343 = b3f*t64983*t65104*t65074*(1.0/1.2E1);
            double t65344 = b1f*c*t65074*t65185*(2.0/9.0);
            double t65345 = b3f*c*t65059*t65185*(2.0/3.0);
            double t65346 = t65341+t65342+t65343+t65344+t65345-b1f*t64983*t65104*t65186*(1.0/3.6E1);
            double t65347 = t65184*t65346*t65097*t65178;
            double t65349 = t65082*t65083*t65084*t65196;
            double t65350 = 1.0/(t65077*t65077);
            double t65351 = 1.0/(t65066*t65066*t65066*t65066);
            double t65352 = t65002*t65350*t65351*t65097*t65187*(1.0/2.0);
            double t65353 = t64989*t65082*t65188*t65197*t65198*(1.0/2.0);
            double t65354 = a1f*c*t65183*t65067*t65184*t65178*(2.0/3.0);
            double t65355 = a1p*c*t65083*t65084*t65067*t65089*(2.0/3.0);
            v_rho_b_rho_b_[index] = (ccab0+ccab1*gcab*t65125*t65099+ccab2*t65100*t65123*t65098+ccab4*t65106*t65107* \
               t65126+ccab3*gcab*t65100*t65124*t65098*t65099)*(-rho_b[index]*(-t65190+t65353+t65355+t65349-t65199+ \
               t65001*t65094*(t65190+t65352+t65354+t65347+t65199-t65082*t65083*t65084*t65196-t65340*t65097*t65178* \
               t65187*2.0-a1f*c*c0f*t65095*t65185*(8.0/9.0)-t64989*t65082*t65188*t65197*t65198*(1.0/2.0)-a1p*c*t65083* \
               t65084*t65067*t65089*(2.0/3.0)))-t64976*(t65150+t65159-t64994*t65030*t65031*t65148-t65001*t65020*t65024* \
               t65027*(t65150+t65159-t64994*t65030*t65031*t65148-t65013*t65130*1.0/(t65007*t65007*t65007)*t65151* \
               2.0+t65013*t65130*t65131*(b2f*c*t65127*(4.0/9.0)+b4f*t64983*t65128*(1.0E1/9.0)+b1f*c*t65127*t65029* \
               (2.0/9.0)+b3f*c*t64979*t65127*(2.0/3.0)-b1f*t64983*t65142*t65128*(1.0/3.6E1)+b3f*t64983*t65029*t65128* \
               (1.0/1.2E1))+1.0/(t65010*t65010)*t65002*t65013*1.0/(t65007*t65007*t65007*t65007)*t65151*(1.0/2.0)- \
               a1f*c*c0f*t65011*t65127*(8.0/9.0)-t64994*t64989*t65141*t65152*t65153*(1.0/2.0)+a1f*c*t64988*t65130* \
               t65131*t65136*(2.0/3.0)-a1p*c*t64988*t65030*t65031*t65036*(2.0/3.0))-t64994*t64989*t65141*t65152*t65153* \
               (1.0/2.0)+t64996*t65001*t65020*t65015*t65024*1.2E1+t65001*t65020*t65015*t65160*t65027*2.0E1-t65001* \
               t65020*t65027*t65037*t65138*8.0+t65001*t65015*t65027*t65054*t65037*8.0-t65001*t65024*t65027*t65054* \
               t65138*2.0+t65001*t65015*t65024*t65027*t65169+t64995*t64996*t65001*t65020*t65015*t65037*3.2E1-t64995* \
               t64996*t65001*t65020*t65024*t65138*8.0+t64995*t64996*t65001*t65015*t65024*t65054*8.0-a1p*c*t64988* \
               t65030*t65031*t65036*(2.0/3.0)+Aa*t65001*t65050*t65054*t65163*t65038*t65048*4.0+Aa*t65001*t65050*t65038* \
               t65056*t65048*t65169*2.0+Aa*t65001*t65020*t65050*t65038*t65048*(t64996*t65024*1.2E1+t65160*t65027* \
               2.0E1+t64995*t64996*t65037*3.2E1)*2.0-t65001*t65020*t65050*t65170*t65171*t65163*t65038*t65176*2.0- \
               t65001*t65050*t65170*t65054*t65171*t65038*t65056*t65176*2.0+t65001*t65020*t65050*1.0/(t65044*t65044* \
               t65044)*t65170*t65038*t65056*t65177*2.0-t65001*t65020*t65050*t65170*t65171*t65038*t65056*(b2a*c*t65127* \
               (4.0/9.0)+b4a*t64983*t65128*(1.0E1/9.0)+b1a*c*t65127*t65029*(2.0/9.0)+b3a*c*t64979*t65127*(2.0/3.0) \
               -b1a*t64983*t65142*t65128*(1.0/3.6E1)+b3a*t64983*t65029*t65128*(1.0/1.2E1))+Aa*a1a*c*t64988*t65001* \
               t65020*t65163*t65038*t65048*(4.0/3.0)+Aa*a1a*c*t64988*t65001*t65054*t65038*t65056*t65048*(4.0/3.0) \
               +Aa*a1a*c*t65001*t65020*t65127*t65038*t65056*t65048*(8.0/9.0)-t65001*t65020*t65050*1.0/(t65044*t65044* \
               t65044*t65044)*t65038*1.0/(t65047*t65047)*t65056*t65039*t65177*(1.0/2.0)-a1a*c*t64988*t65001*t65020* \
               t65170*t65171*t65038*t65056*t65176*(2.0/3.0))-t65001*t65202*t65094*2.0-t64994*t65030*t65031*t65036* \
               2.0+t65082*t65083*t65084*t65089*2.0+a1p*c*c0p*t64988*t65014*(4.0/3.0)-a1p*c*c0p*t65091*t65067*(4.0/ \
               3.0)+t65001*t65020*t65015*t65027*t65037*8.0-t65001*t65020*t65024*t65027*t65138*2.0+t65001*t65015*t65024* \
               t65027*t65054*2.0+t64995*t64996*t65001*t65020*t65015*t65024*8.0+Aa*t65001*t65020*t65050*t65163*t65038* \
               t65048*4.0+Aa*t65001*t65050*t65054*t65038*t65056*t65048*4.0-t65001*t65020*t65050*t65170*t65171*t65038* \
               t65056*t65176*2.0+Aa*a1a*c*t64988*t65001*t65020*t65038*t65056*t65048*(4.0/3.0))+(rho_b[index]*t65251+ \
               rho_a[index]*(t65226-t65001*t65094*(t65226-c0f*log((t65002*(1.0/2.0))/(b1f*t65212+b3f*t65213+b2f*c* \
               t65210+b4f*t64983*t65214)+1.0)*(a1f*c*t65210+1.0)*2.0))-t64976*(t65230+t65231+t65026))*(-ccab2*t65100* \
               t65245*t65098*(gamma_bb[index]*gcab*t65243*(8.8E1/9.0)+t65203*t65238*t65098*(3.2E1/9.0)+gamma_bb[index]* \
               t65243*t65098*t65099*(8.8E1/9.0))+ccab4*1.0/(t65112*t65112*t65112)*t65106*t65107*(t65236*t65236)*2.0+ \
               ccab2*t65100*(t65241*t65241)*1.0/(t65117*t65117*t65117)*t65098*2.0+ccab1*gamma_bb[index]*gcab*t65125* \
               t65243*(4.4E1/9.0)+ccab2*t65203*t65123*t65238*t65098*(3.2E1/9.0)-ccab1*t65203*t65237*t65238*t65098* \
               (3.2E1/9.0)-ccab4*t65106*t65107*t65244*(gamma_bb[index]*gcab*t65243*(1.76E2/9.0)+t65203*t65238*t65098* \
               (6.4E1/3.0)+gamma_bb[index]*t65243*t65098*t65099*(1.76E2/3.0)+t65100*t65203*t65106*t65238*(6.4E1/3.0) \
               +gamma_bb[index]*gcab*t65100*t65243*t65098*(1.76E2/3.0)+gamma_bb[index]*t65100*t65106*t65243*t65099* \
               (1.76E2/9.0)+gcab*t65203*t65238*t65098*t65099*(1.28E2/3.0))+ccab4*t65100*t65203*t65106*t65126*t65238* \
               (6.4E1/3.0)+ccab2*gamma_bb[index]*t65123*t65243*t65098*t65099*(8.8E1/9.0)-ccab1*gamma_bb[index]*t65243* \
               t65237*t65098*t65099*(4.4E1/9.0)+ccab3*gcab*t65100*1.0/(t65121*t65121*t65121)*(t65249*t65249)*t65098* \
               t65099*2.0+ccab3*gamma_bb[index]*gcab*t65100*t65124*t65243*t65098*(4.4E1/3.0)+ccab4*gamma_bb[index]* \
               t65100*t65106*t65126*t65243*t65099*(1.76E2/9.0)-ccab2*gamma_bb[index]*t65101*t65241*t65245*t65098* \
               t65099*(1.6E1/3.0)+ccab3*gcab*t65203*t65124*t65238*t65098*t65099*(3.2E1/3.0)+ccab1*gcab*t65203*1.0/ \
               (t65114*t65114*t65114)*t65238*t65098*t65099*(3.2E1/9.0)-ccab3*gcab*t65100*t65242*t65098*t65099*(gamma_bb[index]* \
               gcab*t65243*(4.4E1/3.0)+t65203*t65238*t65098*(3.2E1/3.0)+gamma_bb[index]*t65243*t65098*t65099*(8.8E1/ \
               3.0)+gamma_bb[index]*gcab*t65100*t65243*t65098*(4.4E1/3.0)+gcab*t65203*t65238*t65098*t65099*(3.2E1/ \
               3.0))-ccab3*gamma_bb[index]*gcab*t65100*t65101*t65242*t65249*t65098*8.0-ccab4*gamma_bb[index]*t65100* \
               t65101*t65106*t65244*t65236*t65099*(3.2E1/3.0))+(t65230+t65231+t65026+rho_b[index]*(t65201-t65090+ \
               t65001*t65094*(t65200+t65090-t65183*t65184*t65097*t65178-a1p*c*c0p*t65091*t65067*(2.0/3.0)))-t64976* \
               (t65122-t64994*t65030*t65031*t65036+t65001*t65020*t65015*t65027*t65037*4.0-t65001*t65020*t65024*t65027* \
               t65138+t65001*t65015*t65024*t65027*t65054+t64995*t64996*t65001*t65020*t65015*t65024*4.0+Aa*t65001* \
               t65020*t65050*t65163*t65038*t65048*2.0+Aa*t65001*t65050*t65054*t65038*t65056*t65048*2.0-t65001*t65020* \
               t65050*t65170*t65171*t65038*t65056*t65176+Aa*a1a*c*t64988*t65001*t65020*t65038*t65056*t65048*(2.0/ \
               3.0))-c0p*t65082*t65091*2.0-t65001*t65228*t65094)*(ccab1*gamma_bb[index]*gcab*t65101*t65125*(4.0/3.0) \
               -ccab2*t65100*t65241*t65245*t65098-ccab4*t65106*t65107*t65244*t65236+ccab2*gamma_bb[index]*t65101* \
               t65123*t65098*t65099*(8.0/3.0)-ccab1*gamma_bb[index]*t65101*t65237*t65098*t65099*(4.0/3.0)+ccab3*gamma_bb[index]* \
               gcab*t65100*t65101*t65124*t65098*4.0+ccab4*gamma_bb[index]*t65100*t65101*t65106*t65126*t65099*(1.6E1/ \
               3.0)-ccab3*gcab*t65100*t65242*t65249*t65098*t65099)*2.0+t65251*t65295*2.0+t65339*t65296*2.0-c0*pow(rho_b[index],1.0/ \
               3.0)*(cx1*gamma_bb[index]*gx*t65101*t65331*(8.0/3.0)-cx1*t65203*t65270*t65334*t65297*(8.0/3.0)+cx2* \
               t65203*t65270*t65333*t65297*(1.6E1/3.0)+cx4*t65330*t65205*t65272*t65298*(3.2E1/3.0)-cx2*t65203*t65209* \
               t65308*t65329*t65297-cx4*t65302*t65205*t65207*t65326*t65298+cx3*gamma_bb[index]*gx*t65203*t65332*t65271* \
               t65297*8.0-cx3*gamma_bb[index]*gx*t65203*t65320*t65208*t65316*t65297)*(8.0/3.0)-rho_b[index]*t65251* \
               (ccaa1*gamma_bb[index]*gcaa*t65260*t65243*(8.8E1/9.0)-ccaa1*t65203*t65204*t65238*t65279*2.4E1+ccaa2* \
               t65203*t65204*t65238*t65269*(3.04E2/9.0)+ccaa4*t65205*t65206*t65325*t65257*(1.12E3/9.0)-ccaa2*t65203* \
               t65204*t65270*t65293*t65294*(3.2E1/3.0)-ccaa4*t65205*t65206*t65272*t65290*t65289*(6.4E1/3.0)-ccaa2* \
               t65203*t65204*t65209*t65294*(gamma_bb[index]*gcaa*t65243*(1.76E2/9.0)+t65203*t65204*t65238*(3.04E2/ \
               9.0))-ccaa4*t65205*t65206*t65207*t65290*(gamma_bb[index]*gcaa*t65243*(3.52E2/9.0)+t65203*t65204*t65238* \
               (6.08E2/3.0)+t65205*t65206*t65325*(1.12E3/9.0)+gamma_bb[index]*gcaa*t65203*t65204*t65299*2.88E2)+ccaa2* \
               t65203*t65204*t65209*(t65293*t65293)*1.0/(t65268*t65268*t65268)*2.0+ccaa4*t65205*t65206*t65207*1.0/ \
               (t65256*t65256*t65256)*(t65289*t65289)*2.0+ccaa3*gamma_bb[index]*gcaa*t65203*t65204*t65265*t65299* \
               7.2E1+ccaa1*gamma_bb[index]*gcaa*t65203*t65204*1.0/(t65259*t65259*t65259)*t65299*(1.28E2/9.0)+ccaa3* \
               gamma_bb[index]*gcaa*t65203*t65204*t65208*1.0/(t65264*t65264*t65264)*(t65283*t65283)*2.0-ccaa3*gamma_bb[index]* \
               gcaa*t65203*t65204*t65208*t65284*(gamma_bb[index]*gcaa*t65243*(8.8E1/3.0)+t65203*t65204*t65238*(3.04E2/ \
               3.0)+gamma_bb[index]*gcaa*t65203*t65204*t65299*7.2E1)-ccaa3*gamma_bb[index]*gcaa*t65203*t65204*t65271* \
               t65283*t65284*1.6E1)+rho_b[index]*t65339*(-t65190+t65353+t65355+t65349-t65199+t65001*t65094*(t65190+ \
               t65352-t65353+t65354-t65355+t65347-t65349+t65199-t65340*t65097*t65178*t65187*2.0-a1f*c*c0f*t65095* \
               t65185*(8.0/9.0)))-rho_b[index]*t65295*t65296*2.0+c0*pow(rho_b[index],4.0/3.0)*(cx1*gamma_bb[index]* \
               gx*t65331*t65243*(8.8E1/9.0)-cx1*t65203*t65334*t65238*t65297*2.4E1+cx2*t65203*t65333*t65238*t65297* \
               (3.04E2/9.0)+cx4*t65330*t65205*t65325*t65298*(1.12E3/9.0)-cx2*t65203*t65270*t65308*t65329*t65297*(3.2E1/ \
               3.0)-cx4*t65302*t65205*t65272*t65326*t65298*(6.4E1/3.0)-cx2*t65203*t65209*t65329*t65297*(gamma_bb[index]* \
               gx*t65243*(1.76E2/9.0)+t65203*t65238*t65297*(3.04E2/9.0))-cx4*t65205*t65207*t65326*t65298*(gamma_bb[index]* \
               gx*t65243*(3.52E2/9.0)+t65203*t65238*t65297*(6.08E2/3.0)+t65205*t65325*t65298*(1.12E3/9.0)+gamma_bb[index]* \
               gx*t65203*t65297*t65299*2.88E2)+cx2*t65203*1.0/(t65311*t65311*t65311)*t65209*(t65308*t65308)*t65297* \
               2.0+cx4*(t65302*t65302)*t65205*t65207*1.0/(t65307*t65307*t65307)*t65298*2.0+cx3*gamma_bb[index]*gx* \
               t65203*t65332*t65297*t65299*7.2E1+cx1*gamma_bb[index]*gx*1.0/(t65301*t65301*t65301)*t65203*t65297* \
               t65299*(1.28E2/9.0)+cx3*gamma_bb[index]*gx*t65203*(t65320*t65320)*1.0/(t65315*t65315*t65315)*t65208* \
               t65297*2.0-cx3*gamma_bb[index]*gx*t65203*t65208*t65316*t65297*(gamma_bb[index]*gx*t65243*(8.8E1/3.0) \
               +t65203*t65238*t65297*(3.04E2/3.0)+gamma_bb[index]*gx*t65203*t65297*t65299*7.2E1)-cx3*gamma_bb[index]* \
               gx*t65203*t65320*t65271*t65316*t65297*1.6E1)+c0*t65063*(cx0+cx1*gamma_bb[index]*gx*t65104*t65331+cx2* \
               t65203*t65333*t65209*t65297+cx4*t65330*t65205*t65207*t65298+cx3*gamma_bb[index]*gx*t65203*t65332*t65208* \
               t65297)*(4.0/9.0);
        } else if (rho_a[index] > cutoff_) {
            v_rho_b_rho_b_[index] = 0.0;
        } else if (rho_b[index] > cutoff_) {
            double t67122 = 1.0/pow(rho_b[index],1.0/3.0);
            double t67123 = c*t67122;
            double t67124 = sqrt(t67123);
            double t67125 = b1f*t67124;
            double t67126 = pow(t67123,3.0/2.0);
            double t67127 = b3f*t67126;
            double t67128 = c*c;
            double t67129 = 1.0/pow(rho_b[index],2.0/3.0);
            double t67130 = b4f*t67128*t67129;
            double t67131 = b2f*c*t67122;
            double t67132 = t67130+t67131+t67125+t67127;
            double t67133 = 1.0/pow(rho_b[index],4.0/3.0);
            double t67134 = b1p*t67124;
            double t67135 = b3p*t67126;
            double t67136 = b4p*t67128*t67129;
            double t67137 = b2p*c*t67122;
            double t67138 = t67134+t67135+t67136+t67137;
            double t67139 = 1.0/pow(rho_b[index],5.0/3.0);
            double t67140 = 1.0/sqrt(t67123);
            double t67141 = 1.0/c0f;
            double t67142 = 1.0/t67132;
            double t67143 = t67141*t67142*(1.0/2.0);
            double t67144 = t67143+1.0;
            double t67145 = 1.0/c0p;
            double t67146 = 1.0/t67138;
            double t67147 = t67145*t67146*(1.0/2.0);
            double t67148 = t67147+1.0;
            double t67149 = a1p*c*t67122;
            double t67150 = t67149+1.0;
            double t67151 = 1.0/t67148;
            double t67152 = 1.0/(t67138*t67138);
            double t67153 = b4p*t67128*t67139*(2.0/3.0);
            double t67154 = b2p*c*t67133*(1.0/3.0);
            double t67155 = b1p*c*t67140*t67133*(1.0/6.0);
            double t67156 = b3p*c*t67124*t67133*(1.0/2.0);
            double t67157 = t67153+t67154+t67155+t67156;
            double t67158 = t67150*t67151*t67152*t67157;
            double t67159 = log(t67148);
            double t67160 = gamma_bb[index]*gamma_bb[index];
            double t67161 = gcaa*gcaa;
            double t67162 = t67160*t67160;
            double t67163 = t67161*t67161;
            double t67164 = 1.0/pow(rho_b[index],3.2E1/3.0);
            double t67165 = 1.0/pow(rho_b[index],8.0/3.0);
            double t67166 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
               rho_b[index]*rho_b[index]);
            double t67167 = 1.0/pow(rho_b[index],1.6E1/3.0);
            double t67168 = pow(2.0,1.0/3.0);
            double t67169 = t67168*2.0;
            double t67170 = t67169-2.0;
            double t67171 = two_13*2.0;
            double t67172 = t67171-2.0;
            double t67173 = 1.0/t67172;
            double t67174 = log(t67144);
            double t67175 = a1f*c*t67122;
            double t67176 = t67175+1.0;
            double t67177 = gamma_bb[index]*gcaa*t67165*4.0;
            double t67178 = gamma_bb[index]*gcaa*t67160*t67161*t67166*4.0;
            double t67179 = t67160*t67161*t67167*6.0;
            double t67180 = t67162*t67163*t67164;
            double t67181 = t67180+t67177+t67178+t67179+1.0;
            double t67182 = 1.0/t67181;
            double t67183 = gamma_bb[index]*gcaa*t67165;
            double t67184 = t67183+1.0;
            double t67185 = 1.0/t67184;
            double t67186 = gamma_bb[index]*gcaa*t67165*3.0;
            double t67187 = gamma_bb[index]*gcaa*t67160*t67161*t67166;
            double t67188 = t67160*t67161*t67167*3.0;
            double t67189 = t67186+t67187+t67188+1.0;
            double t67190 = 1.0/t67189;
            double t67191 = gamma_bb[index]*gcaa*t67165*2.0;
            double t67192 = t67160*t67161*t67167;
            double t67193 = t67191+t67192+1.0;
            double t67194 = 1.0/t67193;
            double t67195 = 1.0/pow(rho_b[index],1.9E1/3.0);
            double t67196 = 1.0/pow(rho_b[index],1.1E1/3.0);
            double t67197 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
               rho_b[index]*rho_b[index]*rho_b[index]);
            double t67198 = 1.0/pow(rho_b[index],3.5E1/3.0);
            double t67199 = 1.0/t67144;
            double t67200 = 1.0/(t67132*t67132);
            double t67201 = b4f*t67128*t67139*(2.0/3.0);
            double t67202 = b2f*c*t67133*(1.0/3.0);
            double t67203 = b1f*c*t67140*t67133*(1.0/6.0);
            double t67204 = b3f*c*t67124*t67133*(1.0/2.0);
            double t67205 = t67201+t67202+t67203+t67204;
            double t67206 = a1f*c*c0f*t67133*t67174*(2.0/3.0);
            double t67207 = a1p*c*c0p*t67133*t67159*(2.0/3.0);
            double t67208 = ccaa4*t67162*t67163*t67182*t67198*(3.2E1/3.0);
            double t67209 = ccaa1*gamma_bb[index]*gcaa*t67185*t67196*(8.0/3.0);
            double t67210 = ccaa3*gamma_bb[index]*gcaa*t67160*t67161*t67190*t67197*8.0;
            double t67211 = ccaa2*t67160*t67161*t67194*t67195*(1.6E1/3.0);
            double t67212 = 1.0/(t67184*t67184);
            double t67213 = gamma_bb[index]*gcaa*t67196*8.0;
            double t67214 = gamma_bb[index]*gcaa*t67160*t67161*t67197*8.0;
            double t67215 = t67160*t67161*t67195*1.6E1;
            double t67216 = t67213+t67214+t67215;
            double t67217 = 1.0/(t67189*t67189);
            double t67218 = gamma_bb[index]*gcaa*t67196*(3.2E1/3.0);
            double t67219 = gamma_bb[index]*gcaa*t67160*t67161*t67197*3.2E1;
            double t67220 = t67160*t67161*t67195*3.2E1;
            double t67221 = t67162*t67163*t67198*(3.2E1/3.0);
            double t67222 = t67220+t67221+t67218+t67219;
            double t67223 = 1.0/(t67181*t67181);
            double t67224 = gamma_bb[index]*gcaa*t67196*(1.6E1/3.0);
            double t67225 = t67160*t67161*t67195*(1.6E1/3.0);
            double t67226 = t67224+t67225;
            double t67227 = 1.0/(t67193*t67193);
            double t67228 = t67210+t67211+t67208+t67209-ccaa1*t67212*t67160*t67161*t67195*(8.0/3.0)-ccaa4*t67222* \
               t67223*t67162*t67163*t67164-ccaa2*t67160*t67161*t67226*t67227*t67167-ccaa3*gamma_bb[index]*gcaa*t67160* \
               t67161*t67216*t67217*t67166;
            double t67229 = gx*gx;
            double t67230 = t67229*t67229;
            double t67231 = 1.0/pow(rho_b[index],1.0E1);
            double t67232 = gamma_bb[index]*gx*t67165;
            double t67233 = t67232+1.0;
            double t67234 = 1.0/pow(rho_b[index],2.2E1/3.0);
            double t67255 = gamma_bb[index]*gx*t67196*(3.2E1/3.0);
            double t67256 = gamma_bb[index]*gx*t67160*t67229*t67197*3.2E1;
            double t67257 = t67160*t67229*t67195*3.2E1;
            double t67258 = t67230*t67162*t67198*(3.2E1/3.0);
            double t67235 = t67255+t67256+t67257+t67258;
            double t67236 = gamma_bb[index]*gx*t67165*4.0;
            double t67237 = gamma_bb[index]*gx*t67160*t67166*t67229*4.0;
            double t67238 = t67160*t67229*t67167*6.0;
            double t67239 = t67230*t67162*t67164;
            double t67240 = t67236+t67237+t67238+t67239+1.0;
            double t67261 = gamma_bb[index]*gx*t67196*(1.6E1/3.0);
            double t67262 = t67160*t67229*t67195*(1.6E1/3.0);
            double t67241 = t67261+t67262;
            double t67242 = gamma_bb[index]*gx*t67165*2.0;
            double t67243 = t67160*t67229*t67167;
            double t67244 = t67242+t67243+1.0;
            double t67245 = gamma_bb[index]*gx*t67165*3.0;
            double t67246 = gamma_bb[index]*gx*t67160*t67166*t67229;
            double t67247 = t67160*t67229*t67167*3.0;
            double t67248 = t67245+t67246+t67247+1.0;
            double t67249 = 1.0/pow(rho_b[index],1.4E1/3.0);
            double t67250 = 1.0/(t67248*t67248);
            double t67251 = gamma_bb[index]*gx*t67196*8.0;
            double t67252 = gamma_bb[index]*gx*t67160*t67229*t67197*8.0;
            double t67253 = t67160*t67229*t67195*1.6E1;
            double t67254 = t67251+t67252+t67253;
            double t67259 = 1.0/pow(rho_b[index],3.8E1/3.0);
            double t67260 = 1.0/(t67240*t67240);
            double t67263 = 1.0/(t67244*t67244);
            double t67264 = 1.0/t67240;
            double t67265 = 1.0/t67233;
            double t67266 = 1.0/t67248;
            double t67267 = 1.0/t67244;
            double t67268 = c0f*t67174*t67176*2.0;
            double t67269 = c0p*t67150*t67159*2.0;
            double t67270 = 1.0/(t67233*t67233);
            double t67271 = ccaa4*t67162*t67163*t67164*t67182;
            double t67272 = ccaa1*gamma_bb[index]*gcaa*t67165*t67185;
            double t67273 = ccaa3*gamma_bb[index]*gcaa*t67160*t67161*t67190*t67166;
            double t67274 = ccaa2*t67160*t67161*t67167*t67194;
            double t67275 = ccaa0+t67271+t67272+t67273+t67274;
            double t67276 = 1.0/pow(rho_b[index],7.0/3.0);
            double t67277 = 1.0/pow(t67123,3.0/2.0);
            double t67278 = t67205*t67205;
            double t67279 = t67157*t67157;
            double t67280 = 1.0/(t67138*t67138*t67138);
            double t67281 = t67150*t67151*t67280*t67279*2.0;
            double t67282 = b4p*t67128*t67165*(1.0E1/9.0);
            double t67283 = b2p*c*t67276*(4.0/9.0);
            double t67284 = b3p*t67140*t67128*t67165*(1.0/1.2E1);
            double t67285 = b1p*c*t67140*t67276*(2.0/9.0);
            double t67286 = b3p*c*t67124*t67276*(2.0/3.0);
            double t67287 = t67282+t67283+t67284+t67285+t67286-b1p*t67128*t67165*t67277*(1.0/3.6E1);
            double t67288 = 1.0/(t67148*t67148);
            double t67289 = 1.0/(t67138*t67138*t67138*t67138);
            double t67290 = a1p*c*c0p*t67159*t67276*(8.0/9.0);
            v_rho_b_rho_b_[index] = t67228*(t67269+t67170*t67173*(t67268-c0p*t67150*t67159*2.0))*2.0+t67275*(t67207- \
               t67158+t67170*t67173*(t67206+t67158-t67200*t67205*t67176*t67199-a1p*c*c0p*t67133*t67159*(2.0/3.0)) \
               )*2.0-c0*pow(rho_b[index],1.0/3.0)*(cx1*gamma_bb[index]*gx*t67265*t67196*(8.0/3.0)-cx1*t67160*t67270* \
               t67229*t67195*(8.0/3.0)+cx2*t67160*t67229*t67195*t67267*(1.6E1/3.0)+cx4*t67230*t67162*t67264*t67198* \
               (3.2E1/3.0)-cx2*t67160*t67241*t67263*t67229*t67167-cx4*t67230*t67260*t67162*t67235*t67164+cx3*gamma_bb[index]* \
               gx*t67160*t67229*t67266*t67197*8.0-cx3*gamma_bb[index]*gx*t67160*t67250*t67254*t67166*t67229)*(8.0/ \
               3.0)+rho_b[index]*t67275*(-t67281-t67290+t67170*t67173*(t67281+t67290-t67150*t67151*t67152*t67287- \
               1.0/(t67132*t67132*t67132)*t67176*t67278*t67199*2.0+t67200*t67176*t67199*(b2f*c*t67276*(4.0/9.0)+b4f* \
               t67128*t67165*(1.0E1/9.0)+b1f*c*t67140*t67276*(2.0/9.0)+b3f*c*t67124*t67276*(2.0/3.0)-b1f*t67128*t67165* \
               t67277*(1.0/3.6E1)+b3f*t67140*t67128*t67165*(1.0/1.2E1))+1.0/(t67132*t67132*t67132*t67132)*t67141* \
               1.0/(t67144*t67144)*t67176*t67278*(1.0/2.0)-a1f*c*c0f*t67174*t67276*(8.0/9.0)-t67150*t67145*t67279* \
               t67288*t67289*(1.0/2.0)+a1f*c*t67200*t67133*t67205*t67199*(2.0/3.0)-a1p*c*t67133*t67151*t67152*t67157* \
               (2.0/3.0))+t67150*t67151*t67152*t67287+t67150*t67145*t67279*t67288*t67289*(1.0/2.0)+a1p*c*t67133*t67151* \
               t67152*t67157*(2.0/3.0))-rho_b[index]*t67228*(t67207-t67158+t67170*t67173*(t67206-t67207+t67158-t67200* \
               t67205*t67176*t67199))*2.0-rho_b[index]*(t67269+t67170*t67173*(t67268-t67269))*(ccaa1*gamma_bb[index]* \
               gcaa*t67185*t67249*(8.8E1/9.0)-ccaa1*t67212*t67160*t67161*t67234*2.4E1+ccaa2*t67160*t67161*t67234* \
               t67194*(3.04E2/9.0)+ccaa4*t67162*t67163*t67182*t67259*(1.12E3/9.0)-ccaa2*t67160*t67161*t67226*t67227* \
               t67195*(3.2E1/3.0)-ccaa4*t67222*t67223*t67162*t67163*t67198*(6.4E1/3.0)-ccaa2*t67160*t67161*t67227* \
               t67167*(gamma_bb[index]*gcaa*t67249*(1.76E2/9.0)+t67160*t67161*t67234*(3.04E2/9.0))-ccaa4*t67223*t67162* \
               t67163*t67164*(gamma_bb[index]*gcaa*t67249*(3.52E2/9.0)+t67160*t67161*t67234*(6.08E2/3.0)+t67162*t67163* \
               t67259*(1.12E3/9.0)+gamma_bb[index]*gcaa*t67231*t67160*t67161*2.88E2)+ccaa4*(t67222*t67222)*t67162* \
               t67163*1.0/(t67181*t67181*t67181)*t67164*2.0+ccaa2*t67160*t67161*(t67226*t67226)*1.0/(t67193*t67193* \
               t67193)*t67167*2.0+ccaa3*gamma_bb[index]*gcaa*t67231*t67160*t67161*t67190*7.2E1+ccaa1*gamma_bb[index]* \
               gcaa*t67231*t67160*t67161*1.0/(t67184*t67184*t67184)*(1.28E2/9.0)+ccaa3*gamma_bb[index]*gcaa*t67160* \
               t67161*(t67216*t67216)*t67166*1.0/(t67189*t67189*t67189)*2.0-ccaa3*gamma_bb[index]*gcaa*t67160*t67161* \
               t67217*t67166*(gamma_bb[index]*gcaa*t67249*(8.8E1/3.0)+t67160*t67161*t67234*(3.04E2/3.0)+gamma_bb[index]* \
               gcaa*t67231*t67160*t67161*7.2E1)-ccaa3*gamma_bb[index]*gcaa*t67160*t67161*t67216*t67217*t67197*1.6E1) \
               +c0*pow(rho_b[index],4.0/3.0)*(cx1*gamma_bb[index]*gx*t67265*t67249*(8.8E1/9.0)-cx1*t67160*t67234* \
               t67270*t67229*2.4E1+cx2*t67160*t67234*t67229*t67267*(3.04E2/9.0)+cx4*t67230*t67162*t67264*t67259*(1.12E3/ \
               9.0)-cx2*t67160*t67241*t67263*t67229*t67195*(3.2E1/3.0)-cx4*t67230*t67260*t67162*t67235*t67198*(6.4E1/ \
               3.0)-cx2*t67160*t67263*t67229*t67167*(gamma_bb[index]*gx*t67249*(1.76E2/9.0)+t67160*t67234*t67229* \
               (3.04E2/9.0))-cx4*t67230*t67260*t67162*t67164*(gamma_bb[index]*gx*t67249*(3.52E2/9.0)+t67160*t67234* \
               t67229*(6.08E2/3.0)+t67230*t67162*t67259*(1.12E3/9.0)+gamma_bb[index]*gx*t67231*t67160*t67229*2.88E2) \
               +cx2*t67160*(t67241*t67241)*1.0/(t67244*t67244*t67244)*t67229*t67167*2.0+cx4*t67230*1.0/(t67240*t67240* \
               t67240)*t67162*(t67235*t67235)*t67164*2.0+cx3*gamma_bb[index]*gx*t67231*t67160*t67229*t67266*7.2E1+ \
               cx1*gamma_bb[index]*gx*t67231*t67160*1.0/(t67233*t67233*t67233)*t67229*(1.28E2/9.0)+cx3*gamma_bb[index]* \
               gx*t67160*(t67254*t67254)*t67166*t67229*1.0/(t67248*t67248*t67248)*2.0-cx3*gamma_bb[index]*gx*t67160* \
               t67250*t67166*t67229*(gamma_bb[index]*gx*t67249*(8.8E1/3.0)+t67160*t67234*t67229*(3.04E2/3.0)+gamma_bb[index]* \
               gx*t67231*t67160*t67229*7.2E1)-cx3*gamma_bb[index]*gx*t67160*t67250*t67254*t67229*t67197*1.6E1)+c0* \
               t67129*(cx0+cx1*gamma_bb[index]*gx*t67165*t67265+cx2*t67160*t67229*t67167*t67267+cx4*t67230*t67162* \
               t67164*t67264+cx3*gamma_bb[index]*gx*t67160*t67166*t67229*t67266)*(4.0/9.0);
        } else {
            v_rho_b_rho_b_[index] = 0.0;
        } 

        if (is_gga_) {

            //V_rho_a_gamma_aa
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t65357 = 1.0/pow(rho_a[index],1.0/3.0);
                double t65358 = c*t65357;
                double t65359 = sqrt(t65358);
                double t65360 = pow(t65358,3.0/2.0);
                double t65361 = c*c;
                double t65362 = 1.0/pow(rho_a[index],2.0/3.0);
                double t65363 = 1.0/c0p;
                double t65364 = b1p*t65359;
                double t65365 = b3p*t65360;
                double t65366 = b4p*t65361*t65362;
                double t65367 = b2p*c*t65357;
                double t65368 = t65364+t65365+t65366+t65367;
                double t65369 = 1.0/t65368;
                double t65370 = t65363*t65369*(1.0/2.0);
                double t65371 = t65370+1.0;
                double t65372 = log(t65371);
                double t65373 = a1p*c*t65357;
                double t65374 = t65373+1.0;
                double t65375 = 1.0/pow(rho_a[index],8.0/3.0);
                double t65376 = gamma_aa[index]*gamma_aa[index];
                double t65377 = gcaa*gcaa;
                double t65378 = t65377*t65377;
                double t65379 = 1.0/pow(rho_a[index],3.2E1/3.0);
                double t65380 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t65381 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t65382 = gamma_aa[index]*gcaa*t65375;
                double t65383 = t65382+1.0;
                double t65384 = gamma_aa[index]*gcaa*t65375*3.0;
                double t65385 = gamma_aa[index]*gcaa*t65381*t65376*t65377;
                double t65386 = t65380*t65376*t65377*3.0;
                double t65387 = t65384+t65385+t65386+1.0;
                double t65388 = t65376*t65376;
                double t65389 = gamma_aa[index]*gcaa*t65375*4.0;
                double t65390 = gamma_aa[index]*gcaa*t65381*t65376*t65377*4.0;
                double t65391 = t65380*t65376*t65377*6.0;
                double t65392 = t65378*t65379*t65388;
                double t65393 = t65390+t65391+t65392+t65389+1.0;
                double t65394 = gamma_aa[index]*gcaa*t65375*2.0;
                double t65395 = t65380*t65376*t65377;
                double t65396 = t65394+t65395+1.0;
                double t65397 = rho_a[index]+rho_b[index];
                double t65398 = 1.0/pow(t65397,1.0/3.0);
                double t65399 = c*t65398;
                double t65400 = sqrt(t65399);
                double t65401 = b1p*t65400;
                double t65402 = pow(t65399,3.0/2.0);
                double t65403 = b3p*t65402;
                double t65404 = 1.0/pow(t65397,2.0/3.0);
                double t65405 = b4p*t65404*t65361;
                double t65406 = b2p*c*t65398;
                double t65407 = t65401+t65403+t65405+t65406;
                double t65408 = 1.0/pow(t65397,4.0/3.0);
                double t65409 = two_13*2.0;
                double t65410 = t65409-2.0;
                double t65411 = 1.0/t65410;
                double t65412 = 1.0/c0f;
                double t65413 = 1.0/t65407;
                double t65414 = t65413*t65363*(1.0/2.0);
                double t65415 = t65414+1.0;
                double t65416 = a1p*c*t65398;
                double t65417 = t65416+1.0;
                double t65418 = rho_a[index]-rho_b[index];
                double t65419 = t65418*t65418;
                double t65420 = 1.0/t65397;
                double t65421 = t65420*t65418;
                double t65422 = b1f*t65400;
                double t65423 = b3f*t65402;
                double t65424 = b4f*t65404*t65361;
                double t65425 = b2f*c*t65398;
                double t65426 = t65422+t65423+t65424+t65425;
                double t65427 = 1.0/t65426;
                double t65428 = t65412*t65427*(1.0/2.0);
                double t65429 = t65428+1.0;
                double t65430 = log(t65429);
                double t65431 = a1f*c*t65398;
                double t65432 = t65431+1.0;
                double t65433 = log(t65415);
                double t65443 = c0f*t65430*t65432*2.0;
                double t65444 = c0p*t65433*t65417*2.0;
                double t65434 = t65443-t65444;
                double t65435 = t65421+1.0;
                double t65436 = pow(t65435,4.0/3.0);
                double t65437 = -t65421+1.0;
                double t65438 = pow(t65437,4.0/3.0);
                double t65439 = t65436+t65438-2.0;
                double t65440 = 1.0/(t65397*t65397);
                double t65471 = t65440*t65418;
                double t65441 = t65420-t65471;
                double t65442 = 1.0/(t65397*t65397*t65397*t65397);
                double t65445 = t65419*t65419;
                double t65446 = 1.0/pow(t65397,5.0/3.0);
                double t65447 = 1.0/sqrt(t65399);
                double t65448 = 1.0/t65415;
                double t65449 = 1.0/(t65407*t65407);
                double t65450 = b4p*t65361*t65446*(2.0/3.0);
                double t65451 = b2p*c*t65408*(1.0/3.0);
                double t65452 = b1p*c*t65408*t65447*(1.0/6.0);
                double t65453 = b3p*c*t65400*t65408*(1.0/2.0);
                double t65454 = t65450+t65451+t65452+t65453;
                double t65455 = t65417*t65454*t65448*t65449;
                double t65456 = 1.0/(t65397*t65397*t65397*t65397*t65397);
                double t65457 = 1.0/d2fz0;
                double t65458 = 1.0/Aa;
                double t65459 = b1a*t65400;
                double t65460 = b3a*t65402;
                double t65461 = b4a*t65404*t65361;
                double t65462 = b2a*c*t65398;
                double t65463 = t65460+t65461+t65462+t65459;
                double t65464 = 1.0/t65463;
                double t65465 = t65464*t65458*(1.0/2.0);
                double t65466 = t65465+1.0;
                double t65467 = log(t65466);
                double t65468 = a1a*c*t65398;
                double t65469 = t65468+1.0;
                double t65470 = pow(t65435,1.0/3.0);
                double t65472 = t65441*t65470*(4.0/3.0);
                double t65473 = pow(t65437,1.0/3.0);
                double t65474 = t65472-t65441*t65473*(4.0/3.0);
                double t65475 = t65442*t65445;
                double t65476 = t65475-1.0;
                double t65477 = pow(2.0,1.0/3.0);
                double t65478 = t65477*2.0;
                double t65479 = t65478-2.0;
                double t65480 = a1f*c*t65357;
                double t65481 = t65480+1.0;
                double t65482 = b1f*t65359;
                double t65483 = b3f*t65360;
                double t65484 = b4f*t65361*t65362;
                double t65485 = b2f*c*t65357;
                double t65486 = t65482+t65483+t65484+t65485;
                double t65487 = 1.0/t65486;
                double t65488 = t65412*t65487*(1.0/2.0);
                double t65489 = t65488+1.0;
                double t65490 = 1.0/pow(rho_a[index],4.0/3.0);
                double t65491 = 1.0/pow(rho_a[index],5.0/3.0);
                double t65492 = 1.0/sqrt(t65358);
                double t65493 = log(t65489);
                double t65494 = 1.0/t65371;
                double t65495 = 1.0/(t65368*t65368);
                double t65496 = b4p*t65361*t65491*(2.0/3.0);
                double t65497 = b2p*c*t65490*(1.0/3.0);
                double t65498 = b1p*c*t65490*t65492*(1.0/6.0);
                double t65499 = b3p*c*t65490*t65359*(1.0/2.0);
                double t65500 = t65496+t65497+t65498+t65499;
                double t65501 = t65500*t65374*t65494*t65495;
                double t65502 = c0f*t65481*t65493*2.0;
                double t65503 = c0p*t65372*t65374*2.0;
                double t65504 = gamma_aa[index]*t65375*(1.0/2.0);
                double t65505 = 1.0/pow(rho_b[index],8.0/3.0);
                double t65506 = gamma_bb[index]*t65505*(1.0/2.0);
                double t65507 = t65504+t65506;
                double t65508 = gcab*t65507;
                double t65509 = t65508+1.0;
                double t65510 = gcab*gcab;
                double t65511 = t65507*t65507;
                double t65512 = t65510*t65510;
                double t65513 = t65511*t65511;
                double t65514 = t65510*t65511;
                double t65515 = gcab*t65507*2.0;
                double t65516 = t65514+t65515+1.0;
                double t65517 = t65510*t65511*3.0;
                double t65518 = gcab*t65510*t65511*t65507;
                double t65519 = gcab*t65507*3.0;
                double t65520 = t65517+t65518+t65519+1.0;
                double t65521 = t65510*t65511*6.0;
                double t65522 = gcab*t65510*t65511*t65507*4.0;
                double t65523 = t65512*t65513;
                double t65524 = gcab*t65507*4.0;
                double t65525 = t65521+t65522+t65523+t65524+1.0;
                double t65526 = t65502-t65503;
                double t65527 = 1.0/pow(rho_b[index],1.0/3.0);
                double t65528 = c*t65527;
                double t65529 = sqrt(t65528);
                double t65530 = pow(t65528,3.0/2.0);
                double t65531 = 1.0/pow(rho_b[index],2.0/3.0);
                double t65532 = b1p*t65529;
                double t65533 = b3p*t65530;
                double t65534 = b4p*t65531*t65361;
                double t65535 = b2p*c*t65527;
                double t65536 = t65532+t65533+t65534+t65535;
                double t65537 = 1.0/t65536;
                double t65538 = t65363*t65537*(1.0/2.0);
                double t65539 = t65538+1.0;
                double t65540 = log(t65539);
                double t65541 = a1p*c*t65527;
                double t65542 = t65541+1.0;
                double t65543 = c0p*t65540*t65542*2.0;
                double t65544 = t65411*t65442*t65434*t65445*t65439;
                double t65545 = Aa*t65411*t65439*t65457*t65467*t65476*t65469*2.0;
                double t65546 = 1.0/t65509;
                double t65547 = 1.0/pow(rho_a[index],1.1E1/3.0);
                double t65548 = 1.0/(t65509*t65509);
                double t65549 = 1.0/t65516;
                double t65550 = 1.0/(t65520*t65520);
                double t65551 = 1.0/pow(rho_a[index],1.9E1/3.0);
                double t65552 = 1.0/(t65516*t65516);
                double t65553 = 1.0/t65520;
                double t65554 = 1.0/t65525;
                double t65555 = 1.0/(t65525*t65525);
                double t65556 = gcab*t65375*2.0;
                double t65557 = t65510*t65507*t65375*6.0;
                double t65558 = gcab*t65510*t65511*t65375*6.0;
                double t65559 = t65511*t65512*t65507*t65375*2.0;
                double t65560 = t65556+t65557+t65558+t65559;
                double t65561 = gamma_aa[index]*gcab*t65547*(8.0/3.0);
                double t65562 = gamma_aa[index]*t65510*t65507*t65547*(8.0/3.0);
                double t65563 = t65561+t65562;
                double t65564 = gcab*t65375;
                double t65565 = t65510*t65507*t65375;
                double t65566 = t65564+t65565;
                double t65567 = gamma_aa[index]*gcab*t65547*(1.6E1/3.0);
                double t65568 = gamma_aa[index]*gcab*t65510*t65511*t65547*1.6E1;
                double t65569 = gamma_aa[index]*t65511*t65512*t65507*t65547*(1.6E1/3.0);
                double t65570 = gamma_aa[index]*t65510*t65507*t65547*1.6E1;
                double t65571 = t65570+t65567+t65568+t65569;
                double t65572 = gcab*t65375*(3.0/2.0);
                double t65573 = t65510*t65507*t65375*3.0;
                double t65574 = gcab*t65510*t65511*t65375*(3.0/2.0);
                double t65575 = t65572+t65573+t65574;
                double t65576 = gamma_aa[index]*gcab*t65547*4.0;
                double t65577 = gamma_aa[index]*gcab*t65510*t65511*t65547*4.0;
                double t65578 = gamma_aa[index]*t65510*t65507*t65547*8.0;
                double t65579 = t65576+t65577+t65578;
                double t65580 = gx*gx;
                double t65581 = t65580*t65580;
                double t65582 = gamma_aa[index]*gx*t65375;
                double t65583 = t65582+1.0;
                double t65584 = gamma_aa[index]*gx*t65375*3.0;
                double t65585 = gamma_aa[index]*gx*t65381*t65580*t65376;
                double t65586 = t65380*t65580*t65376*3.0;
                double t65587 = t65584+t65585+t65586+1.0;
                double t65588 = gamma_aa[index]*gx*t65375*4.0;
                double t65589 = gamma_aa[index]*gx*t65381*t65580*t65376*4.0;
                double t65590 = t65380*t65580*t65376*6.0;
                double t65591 = t65581*t65379*t65388;
                double t65592 = t65590+t65591+t65588+t65589+1.0;
                double t65593 = gamma_aa[index]*gx*t65375*2.0;
                double t65594 = t65380*t65580*t65376;
                double t65595 = t65593+t65594+1.0;
                double t65596 = t65411*t65526*t65479;
                double t65597 = t65503+t65596;
                double t65598 = 1.0/t65383;
                double t65599 = 1.0/t65393;
                double t65600 = 1.0/t65396;
                double t65601 = 1.0/t65387;
                double t65602 = 1.0/(t65383*t65383);
                double t65603 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]*rho_a[index]);
                double t65604 = 1.0/(t65387*t65387);
                double t65605 = 1.0/(t65396*t65396);
                double t65606 = gcaa*t65375*3.0;
                double t65607 = gamma_aa[index]*t65380*t65377*6.0;
                double t65608 = gcaa*t65381*t65376*t65377*3.0;
                double t65609 = t65606+t65607+t65608;
                double t65610 = 1.0/pow(rho_a[index],3.5E1/3.0);
                double t65611 = 1.0/(t65393*t65393);
                double t65612 = gcaa*t65375*4.0;
                double t65613 = gamma_aa[index]*t65380*t65377*1.2E1;
                double t65614 = gcaa*t65381*t65376*t65377*1.2E1;
                double t65615 = gamma_aa[index]*t65376*t65378*t65379*4.0;
                double t65616 = t65612+t65613+t65614+t65615;
                double t65617 = gcaa*t65375*2.0;
                double t65618 = gamma_aa[index]*t65380*t65377*2.0;
                double t65619 = t65617+t65618;
                double t65620 = gamma_aa[index]*gcaa*t65547*(1.6E1/3.0);
                double t65621 = t65551*t65376*t65377*(1.6E1/3.0);
                double t65622 = t65620+t65621;
                double t65623 = gamma_aa[index]*gcaa*t65547*8.0;
                double t65624 = gamma_aa[index]*gcaa*t65603*t65376*t65377*8.0;
                double t65625 = t65551*t65376*t65377*1.6E1;
                double t65626 = t65623+t65624+t65625;
                double t65627 = gamma_aa[index]*gcaa*t65547*(3.2E1/3.0);
                double t65628 = gamma_aa[index]*gcaa*t65603*t65376*t65377*3.2E1;
                double t65629 = t65551*t65376*t65377*3.2E1;
                double t65630 = t65610*t65378*t65388*(3.2E1/3.0);
                double t65631 = t65630+t65627+t65628+t65629;
                double t65632 = 1.0/t65489;
                double t65633 = 1.0/(t65486*t65486);
                double t65634 = b4f*t65361*t65491*(2.0/3.0);
                double t65635 = b2f*c*t65490*(1.0/3.0);
                double t65636 = b1f*c*t65490*t65492*(1.0/6.0);
                double t65637 = b3f*c*t65490*t65359*(1.0/2.0);
                double t65638 = t65634+t65635+t65636+t65637;
                double t65639 = a1f*c*c0f*t65490*t65493*(2.0/3.0);
                double t65640 = a1p*c*c0p*t65372*t65490*(2.0/3.0);
                double t65641 = ccaa1*gcaa*t65375*t65598;
                double t65642 = ccaa4*gamma_aa[index]*t65376*t65378*t65379*t65599*4.0;
                double t65643 = ccaa2*gamma_aa[index]*t65600*t65380*t65377*2.0;
                double t65644 = ccaa3*gcaa*t65601*t65381*t65376*t65377*3.0;
                double t65645 = t65641+t65642+t65643+t65644-ccaa1*gamma_aa[index]*t65602*t65380*t65377-ccaa2*t65380* \
                   t65605*t65376*t65619*t65377-ccaa4*t65611*t65616*t65378*t65379*t65388-ccaa3*gamma_aa[index]*gcaa*t65604* \
                   t65381*t65609*t65376*t65377;
                double t65646 = 1.0/t65583;
                double t65647 = 1.0/t65592;
                double t65648 = 1.0/t65595;
                double t65649 = 1.0/t65587;
                double t65650 = 1.0/(t65583*t65583);
                double t65651 = 1.0/(t65587*t65587);
                double t65652 = 1.0/(t65595*t65595);
                double t65653 = gx*t65375*3.0;
                double t65654 = gamma_aa[index]*t65380*t65580*6.0;
                double t65655 = gx*t65381*t65580*t65376*3.0;
                double t65656 = t65653+t65654+t65655;
                double t65657 = 1.0/(t65592*t65592);
                double t65658 = gx*t65375*4.0;
                double t65659 = gamma_aa[index]*t65380*t65580*1.2E1;
                double t65660 = gx*t65381*t65580*t65376*1.2E1;
                double t65661 = gamma_aa[index]*t65581*t65376*t65379*4.0;
                double t65662 = t65660+t65661+t65658+t65659;
                double t65663 = gx*t65375*2.0;
                double t65664 = gamma_aa[index]*t65380*t65580*2.0;
                double t65665 = t65663+t65664;
                double t65666 = gamma_aa[index]*gx*t65547*(1.6E1/3.0);
                double t65667 = t65551*t65580*t65376*(1.6E1/3.0);
                double t65668 = t65666+t65667;
                double t65669 = gamma_aa[index]*gx*t65547*8.0;
                double t65670 = gamma_aa[index]*gx*t65603*t65580*t65376*8.0;
                double t65671 = t65551*t65580*t65376*1.6E1;
                double t65672 = t65670+t65671+t65669;
                double t65673 = gamma_aa[index]*gx*t65547*(3.2E1/3.0);
                double t65674 = gamma_aa[index]*gx*t65603*t65580*t65376*3.2E1;
                double t65675 = t65551*t65580*t65376*3.2E1;
                double t65676 = t65610*t65581*t65388*(3.2E1/3.0);
                double t65677 = t65673+t65674+t65675+t65676;
                v_rho_a_gamma_aa_[index] = -(rho_a[index]*t65597+rho_b[index]*(t65543-t65411*t65479*(t65543-c0f*log((t65412* \
                   (1.0/2.0))/(b1f*t65529+b3f*t65530+b2f*c*t65527+b4f*t65531*t65361)+1.0)*(a1f*c*t65527+1.0)*2.0))-t65397* \
                   (t65444+t65544+t65545))*(ccab1*gcab*t65546*t65547*(4.0/3.0)-ccab2*t65510*t65511*t65552*(gcab*t65547* \
                   (8.0/3.0)+gamma_aa[index]*t65510*t65551*(4.0/3.0)+t65510*t65507*t65547*(8.0/3.0))-ccab4*t65512*t65513* \
                   t65555*(gcab*t65547*(1.6E1/3.0)+gamma_aa[index]*t65510*t65551*8.0+t65510*t65507*t65547*1.6E1+gamma_aa[index]* \
                   t65511*t65512*t65551*8.0+gcab*t65510*t65511*t65547*1.6E1+t65511*t65512*t65507*t65547*(1.6E1/3.0)+gamma_aa[index]* \
                   gcab*t65510*t65551*t65507*1.6E1)-ccab1*gamma_aa[index]*t65510*t65551*t65548*(4.0/3.0)+ccab2*gamma_aa[index]* \
                   t65510*t65551*t65549*(4.0/3.0)-ccab1*t65510*t65507*t65547*t65548*(4.0/3.0)+ccab2*t65510*t65507*t65547* \
                   t65549*(8.0/3.0)-ccab2*t65510*t65507*t65552*t65563*t65375+ccab4*t65511*t65512*t65507*t65554*t65547* \
                   (1.6E1/3.0)+ccab4*t65512*t65513*t65560*1.0/(t65525*t65525*t65525)*t65571*2.0+ccab2*t65510*t65511*1.0/ \
                   (t65516*t65516*t65516)*t65563*t65566*2.0+ccab4*gamma_aa[index]*t65511*t65512*t65551*t65554*8.0+ccab3* \
                   gcab*t65510*t65511*t65553*t65547*4.0+ccab3*gamma_aa[index]*gcab*t65510*t65551*t65507*t65553*4.0-ccab2* \
                   gamma_aa[index]*t65510*t65507*t65552*t65547*t65566*(8.0/3.0)-ccab3*gcab*t65510*t65511*t65550*t65375* \
                   t65579*(3.0/2.0)-ccab4*t65511*t65512*t65507*t65571*t65375*t65555*2.0-ccab3*gcab*t65510*t65511*t65550* \
                   t65507*(gcab*t65547*4.0+gamma_aa[index]*t65510*t65551*4.0+t65510*t65507*t65547*8.0+gcab*t65510*t65511* \
                   t65547*4.0+gamma_aa[index]*gcab*t65510*t65551*t65507*4.0)+ccab1*gamma_aa[index]*gcab*t65510*t65551* \
                   t65507*1.0/(t65509*t65509*t65509)*(4.0/3.0)+ccab3*gcab*t65510*t65511*1.0/(t65520*t65520*t65520)*t65507* \
                   t65575*t65579*2.0-ccab3*gamma_aa[index]*gcab*t65510*t65511*t65550*t65547*t65575*4.0-ccab4*gamma_aa[index]* \
                   t65511*t65512*t65560*t65507*t65555*t65547*(1.6E1/3.0))-t65645*(t65503+t65411*t65479*(t65502-c0p*t65372* \
                   t65374*2.0))-(-t65503+t65444+t65544+t65545+t65397*(t65455-t65411*t65442*t65445*t65439*(t65455-(t65432* \
                   1.0/(t65426*t65426)*(b2f*c*t65408*(1.0/3.0)+b4f*t65361*t65446*(2.0/3.0)+b1f*c*t65408*t65447*(1.0/6.0) \
                   +b3f*c*t65400*t65408*(1.0/2.0)))/t65429+a1f*c*c0f*t65430*t65408*(2.0/3.0)-a1p*c*c0p*t65433*t65408* \
                   (2.0/3.0))-a1p*c*c0p*t65433*t65408*(2.0/3.0)+t65411*t65442*t65434*t65445*t65474-t65411*t65434*t65445* \
                   t65456*t65439*4.0+t65411*t65442*t65434*t65418*t65419*t65439*4.0-Aa*t65411*t65439*t65457*t65467*t65469* \
                   (t65445*t65456*4.0-t65442*t65418*t65419*4.0)*2.0+Aa*t65411*t65474*t65457*t65467*t65476*t65469*2.0+ \
                   (t65411*1.0/(t65463*t65463)*t65439*t65457*t65476*t65469*(b2a*c*t65408*(1.0/3.0)+b4a*t65361*t65446* \
                   (2.0/3.0)+b1a*c*t65408*t65447*(1.0/6.0)+b3a*c*t65400*t65408*(1.0/2.0)))/t65466-Aa*a1a*c*t65411*t65408* \
                   t65439*t65457*t65467*t65476*(2.0/3.0))+rho_a[index]*(-t65501+t65640+t65411*t65479*(t65501+t65639-t65632* \
                   t65633*t65481*t65638-a1p*c*c0p*t65372*t65490*(2.0/3.0)))-t65411*t65526*t65479)*(ccab1*gcab*t65375* \
                   t65546*(1.0/2.0)-ccab2*t65510*t65511*t65552*t65566-ccab4*t65512*t65513*t65560*t65555-ccab1*t65510* \
                   t65507*t65375*t65548*(1.0/2.0)+ccab2*t65510*t65507*t65375*t65549+ccab4*t65511*t65512*t65507*t65554* \
                   t65375*2.0+ccab3*gcab*t65510*t65511*t65553*t65375*(3.0/2.0)-ccab3*gcab*t65510*t65511*t65550*t65507* \
                   t65575)-rho_a[index]*t65597*(ccaa1*gcaa*t65547*t65598*(-8.0/3.0)-ccaa2*gamma_aa[index]*t65600*t65551* \
                   t65377*(3.2E1/3.0)+ccaa1*gamma_aa[index]*t65602*t65551*t65377*8.0+ccaa4*t65610*t65611*t65616*t65378* \
                   t65388*(3.2E1/3.0)+ccaa2*t65551*t65605*t65376*t65619*t65377*(1.6E1/3.0)+ccaa4*t65611*t65378*t65379* \
                   t65388*(gcaa*t65547*(3.2E1/3.0)+gamma_aa[index]*t65551*t65377*6.4E1+gamma_aa[index]*t65610*t65376* \
                   t65378*(1.28E2/3.0)+gcaa*t65603*t65376*t65377*9.6E1)-ccaa1*gcaa*t65603*1.0/(t65383*t65383*t65383)* \
                   t65376*t65377*(1.6E1/3.0)+ccaa2*t65380*t65605*t65376*t65377*(gcaa*t65547*(1.6E1/3.0)+gamma_aa[index]* \
                   t65551*t65377*(3.2E1/3.0))+ccaa2*gamma_aa[index]*t65622*t65380*t65605*t65377*2.0-ccaa4*gamma_aa[index]* \
                   t65610*t65376*t65378*t65599*(1.28E2/3.0)-ccaa3*gcaa*t65601*t65603*t65376*t65377*2.4E1+ccaa4*gamma_aa[index]* \
                   t65611*t65631*t65376*t65378*t65379*4.0+ccaa3*gcaa*t65604*t65381*t65626*t65376*t65377*3.0-ccaa2*t65622* \
                   t65380*t65376*t65619*t65377*1.0/(t65396*t65396*t65396)*2.0-ccaa4*t65631*t65616*1.0/(t65393*t65393* \
                   t65393)*t65378*t65379*t65388*2.0+ccaa3*gamma_aa[index]*gcaa*t65604*t65381*t65376*t65377*(gcaa*t65547* \
                   8.0+gamma_aa[index]*t65551*t65377*3.2E1+gcaa*t65603*t65376*t65377*2.4E1)+ccaa3*gamma_aa[index]*gcaa* \
                   t65603*t65604*t65609*t65376*t65377*8.0-ccaa3*gamma_aa[index]*gcaa*t65381*t65626*t65609*t65376*t65377* \
                   1.0/(t65387*t65387*t65387)*2.0)+c0*pow(rho_a[index],4.0/3.0)*(cx1*gx*t65547*t65646*(-8.0/3.0)+cx1* \
                   gamma_aa[index]*t65551*t65650*t65580*8.0-cx2*gamma_aa[index]*t65551*t65580*t65648*(3.2E1/3.0)+cx2* \
                   t65551*t65580*t65652*t65376*t65665*(1.6E1/3.0)+cx4*t65610*t65581*t65662*t65657*t65388*(3.2E1/3.0)+ \
                   cx4*t65581*t65657*t65379*t65388*(gx*t65547*(3.2E1/3.0)+gamma_aa[index]*t65551*t65580*6.4E1+gamma_aa[index]* \
                   t65610*t65581*t65376*(1.28E2/3.0)+gx*t65603*t65580*t65376*9.6E1)-cx1*gx*t65603*t65580*t65376*1.0/(t65583* \
                   t65583*t65583)*(1.6E1/3.0)+cx2*t65380*t65580*t65652*t65376*(gx*t65547*(1.6E1/3.0)+gamma_aa[index]* \
                   t65551*t65580*(3.2E1/3.0))+cx2*gamma_aa[index]*t65380*t65580*t65652*t65668*2.0-cx4*gamma_aa[index]* \
                   t65610*t65581*t65376*t65647*(1.28E2/3.0)-cx3*gx*t65603*t65580*t65376*t65649*2.4E1+cx4*gamma_aa[index]* \
                   t65581*t65376*t65657*t65379*t65677*4.0+cx3*gx*t65381*t65651*t65580*t65672*t65376*3.0-cx2*t65380*t65580* \
                   t65376*t65665*1.0/(t65595*t65595*t65595)*t65668*2.0-cx4*t65581*t65662*1.0/(t65592*t65592*t65592)*t65379* \
                   t65388*t65677*2.0+cx3*gamma_aa[index]*gx*t65381*t65651*t65580*t65376*(gx*t65547*8.0+gamma_aa[index]* \
                   t65551*t65580*3.2E1+gx*t65603*t65580*t65376*2.4E1)+cx3*gamma_aa[index]*gx*t65603*t65651*t65580*t65376* \
                   t65656*8.0-cx3*gamma_aa[index]*gx*t65381*t65580*t65672*t65376*t65656*1.0/(t65587*t65587*t65587)*2.0) \
                   +rho_a[index]*t65645*(-t65501+t65640+t65411*t65479*(t65501-t65640+t65639-t65632*t65633*t65481*t65638) \
                   )+c0*pow(rho_a[index],1.0/3.0)*(cx1*gx*t65375*t65646-cx1*gamma_aa[index]*t65380*t65650*t65580+cx2* \
                   gamma_aa[index]*t65380*t65580*t65648*2.0-cx2*t65380*t65580*t65652*t65376*t65665-cx4*t65581*t65662* \
                   t65657*t65379*t65388+cx4*gamma_aa[index]*t65581*t65376*t65647*t65379*4.0+cx3*gx*t65381*t65580*t65376* \
                   t65649*3.0-cx3*gamma_aa[index]*gx*t65381*t65651*t65580*t65376*t65656)*(4.0/3.0);
            } else if (rho_a[index] > cutoff_) {
                double t67931 = 1.0/pow(rho_a[index],1.0/3.0);
                double t67932 = c*t67931;
                double t67933 = sqrt(t67932);
                double t67934 = pow(t67932,3.0/2.0);
                double t67935 = c*c;
                double t67936 = 1.0/pow(rho_a[index],2.0/3.0);
                double t67937 = 1.0/c0p;
                double t67938 = b1p*t67933;
                double t67939 = b3p*t67934;
                double t67940 = b4p*t67935*t67936;
                double t67941 = b2p*c*t67931;
                double t67942 = t67940+t67941+t67938+t67939;
                double t67943 = 1.0/t67942;
                double t67944 = t67943*t67937*(1.0/2.0);
                double t67945 = t67944+1.0;
                double t67946 = log(t67945);
                double t67947 = a1p*c*t67931;
                double t67948 = t67947+1.0;
                double t67949 = 1.0/pow(rho_a[index],8.0/3.0);
                double t67950 = gamma_aa[index]*gamma_aa[index];
                double t67951 = gcaa*gcaa;
                double t67952 = t67951*t67951;
                double t67953 = 1.0/pow(rho_a[index],3.2E1/3.0);
                double t67954 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t67955 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t67956 = gamma_aa[index]*gcaa*t67949;
                double t67957 = t67956+1.0;
                double t67958 = gamma_aa[index]*gcaa*t67949*3.0;
                double t67959 = gamma_aa[index]*gcaa*t67950*t67951*t67955;
                double t67960 = t67950*t67951*t67954*3.0;
                double t67961 = t67960+t67958+t67959+1.0;
                double t67962 = t67950*t67950;
                double t67963 = gamma_aa[index]*gcaa*t67949*4.0;
                double t67964 = gamma_aa[index]*gcaa*t67950*t67951*t67955*4.0;
                double t67965 = t67950*t67951*t67954*6.0;
                double t67966 = t67952*t67953*t67962;
                double t67967 = t67963+t67964+t67965+t67966+1.0;
                double t67968 = gamma_aa[index]*gcaa*t67949*2.0;
                double t67969 = t67950*t67951*t67954;
                double t67970 = t67968+t67969+1.0;
                double t67971 = gx*gx;
                double t67972 = t67971*t67971;
                double t67973 = gamma_aa[index]*gx*t67949;
                double t67974 = t67973+1.0;
                double t67975 = gamma_aa[index]*gx*t67949*3.0;
                double t67976 = gamma_aa[index]*gx*t67950*t67971*t67955;
                double t67977 = t67950*t67971*t67954*3.0;
                double t67978 = t67975+t67976+t67977+1.0;
                double t67979 = gamma_aa[index]*gx*t67949*4.0;
                double t67980 = gamma_aa[index]*gx*t67950*t67971*t67955*4.0;
                double t67981 = t67950*t67971*t67954*6.0;
                double t67982 = t67953*t67962*t67972;
                double t67983 = t67980+t67981+t67982+t67979+1.0;
                double t67984 = gamma_aa[index]*gx*t67949*2.0;
                double t67985 = t67950*t67971*t67954;
                double t67986 = t67984+t67985+1.0;
                double t67987 = pow(2.0,1.0/3.0);
                double t67988 = t67987*2.0;
                double t67989 = t67988-2.0;
                double t67990 = two_13*2.0;
                double t67991 = t67990-2.0;
                double t67992 = 1.0/t67991;
                double t67993 = 1.0/c0f;
                double t67994 = b1f*t67933;
                double t67995 = b3f*t67934;
                double t67996 = b4f*t67935*t67936;
                double t67997 = b2f*c*t67931;
                double t67998 = t67994+t67995+t67996+t67997;
                double t67999 = 1.0/t67998;
                double t68000 = t67993*t67999*(1.0/2.0);
                double t68001 = t68000+1.0;
                double t68002 = log(t68001);
                double t68003 = a1f*c*t67931;
                double t68004 = t68003+1.0;
                double t68005 = c0f*t68002*t68004*2.0;
                double t68006 = c0p*t67946*t67948*2.0;
                double t68007 = 1.0/t67957;
                double t68008 = 1.0/t67967;
                double t68009 = 1.0/t67970;
                double t68010 = 1.0/t67961;
                double t68011 = 1.0/pow(rho_a[index],1.9E1/3.0);
                double t68012 = 1.0/(t67957*t67957);
                double t68013 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]*rho_a[index]);
                double t68014 = 1.0/pow(rho_a[index],1.1E1/3.0);
                double t68015 = 1.0/(t67961*t67961);
                double t68016 = 1.0/(t67970*t67970);
                double t68017 = gcaa*t67949*3.0;
                double t68018 = gamma_aa[index]*t67951*t67954*6.0;
                double t68019 = gcaa*t67950*t67951*t67955*3.0;
                double t68020 = t68017+t68018+t68019;
                double t68021 = 1.0/pow(rho_a[index],3.5E1/3.0);
                double t68022 = 1.0/(t67967*t67967);
                double t68023 = gcaa*t67949*4.0;
                double t68024 = gamma_aa[index]*t67951*t67954*1.2E1;
                double t68025 = gcaa*t67950*t67951*t67955*1.2E1;
                double t68026 = gamma_aa[index]*t67950*t67952*t67953*4.0;
                double t68027 = t68023+t68024+t68025+t68026;
                double t68028 = gcaa*t67949*2.0;
                double t68029 = gamma_aa[index]*t67951*t67954*2.0;
                double t68030 = t68028+t68029;
                double t68031 = gamma_aa[index]*gcaa*t68014*(1.6E1/3.0);
                double t68032 = t67950*t67951*t68011*(1.6E1/3.0);
                double t68033 = t68031+t68032;
                double t68034 = gamma_aa[index]*gcaa*t68014*8.0;
                double t68035 = gamma_aa[index]*gcaa*t67950*t67951*t68013*8.0;
                double t68036 = t67950*t67951*t68011*1.6E1;
                double t68037 = t68034+t68035+t68036;
                double t68038 = gamma_aa[index]*gcaa*t68014*(3.2E1/3.0);
                double t68039 = gamma_aa[index]*gcaa*t67950*t67951*t68013*3.2E1;
                double t68040 = t67950*t67951*t68011*3.2E1;
                double t68041 = t67952*t67962*t68021*(3.2E1/3.0);
                double t68042 = t68040+t68041+t68038+t68039;
                double t68043 = 1.0/pow(rho_a[index],4.0/3.0);
                double t68044 = 1.0/pow(rho_a[index],5.0/3.0);
                double t68045 = 1.0/sqrt(t67932);
                double t68046 = 1.0/t67945;
                double t68047 = 1.0/(t67942*t67942);
                double t68048 = b4p*t67935*t68044*(2.0/3.0);
                double t68049 = b2p*c*t68043*(1.0/3.0);
                double t68050 = b1p*c*t68043*t68045*(1.0/6.0);
                double t68051 = b3p*c*t67933*t68043*(1.0/2.0);
                double t68052 = t68050+t68051+t68048+t68049;
                double t68053 = t67948*t68052*t68046*t68047;
                double t68054 = ccaa1*gcaa*t67949*t68007;
                double t68055 = ccaa4*gamma_aa[index]*t67950*t67952*t67953*t68008*4.0;
                double t68056 = ccaa2*gamma_aa[index]*t67951*t67954*t68009*2.0;
                double t68057 = ccaa3*gcaa*t67950*t67951*t67955*t68010*3.0;
                double t68058 = t68054+t68055+t68056+t68057-ccaa1*gamma_aa[index]*t67951*t67954*t68012-ccaa2*t67950* \
                   t67951*t67954*t68030*t68016-ccaa4*t67952*t67953*t67962*t68022*t68027-ccaa3*gamma_aa[index]*gcaa*t67950* \
                   t67951*t67955*t68020*t68015;
                double t68059 = 1.0/t67974;
                double t68060 = 1.0/t67983;
                double t68061 = 1.0/t67986;
                double t68062 = 1.0/t67978;
                double t68063 = 1.0/(t67974*t67974);
                double t68064 = 1.0/(t67978*t67978);
                double t68065 = 1.0/(t67986*t67986);
                double t68066 = gx*t67949*3.0;
                double t68067 = gamma_aa[index]*t67971*t67954*6.0;
                double t68068 = gx*t67950*t67971*t67955*3.0;
                double t68069 = t68066+t68067+t68068;
                double t68070 = 1.0/(t67983*t67983);
                double t68071 = gx*t67949*4.0;
                double t68072 = gamma_aa[index]*t67971*t67954*1.2E1;
                double t68073 = gx*t67950*t67971*t67955*1.2E1;
                double t68074 = gamma_aa[index]*t67950*t67953*t67972*4.0;
                double t68075 = t68071+t68072+t68073+t68074;
                double t68076 = gx*t67949*2.0;
                double t68077 = gamma_aa[index]*t67971*t67954*2.0;
                double t68078 = t68076+t68077;
                double t68079 = gamma_aa[index]*gx*t68014*(1.6E1/3.0);
                double t68080 = t67950*t67971*t68011*(1.6E1/3.0);
                double t68081 = t68080+t68079;
                double t68082 = gamma_aa[index]*gx*t68014*8.0;
                double t68083 = gamma_aa[index]*gx*t67950*t67971*t68013*8.0;
                double t68084 = t67950*t67971*t68011*1.6E1;
                double t68085 = t68082+t68083+t68084;
                double t68086 = gamma_aa[index]*gx*t68014*(3.2E1/3.0);
                double t68087 = gamma_aa[index]*gx*t67950*t67971*t68013*3.2E1;
                double t68088 = t67950*t67971*t68011*3.2E1;
                double t68089 = t67962*t67972*t68021*(3.2E1/3.0);
                double t68090 = t68086+t68087+t68088+t68089;
                v_rho_a_gamma_aa_[index] = -t68058*(t68006+t67992*t67989*(t68005-c0p*t67946*t67948*2.0))+rho_a[index]* \
                   t68058*(-t68053+t67992*t67989*(t68053-(1.0/(t67998*t67998)*t68004*(b2f*c*t68043*(1.0/3.0)+b4f*t67935* \
                   t68044*(2.0/3.0)+b1f*c*t68043*t68045*(1.0/6.0)+b3f*c*t67933*t68043*(1.0/2.0)))/t68001+a1f*c*c0f*t68002* \
                   t68043*(2.0/3.0)-a1p*c*c0p*t67946*t68043*(2.0/3.0))+a1p*c*c0p*t67946*t68043*(2.0/3.0))-rho_a[index]* \
                   (t68006+t67992*t67989*(t68005-t68006))*(ccaa1*gcaa*t68014*t68007*(-8.0/3.0)+ccaa1*gamma_aa[index]* \
                   t67951*t68011*t68012*8.0-ccaa2*gamma_aa[index]*t67951*t68011*t68009*(3.2E1/3.0)+ccaa2*t67950*t67951* \
                   t68011*t68030*t68016*(1.6E1/3.0)+ccaa4*t67952*t67962*t68021*t68022*t68027*(3.2E1/3.0)+ccaa4*t67952* \
                   t67953*t67962*t68022*(gcaa*t68014*(3.2E1/3.0)+gamma_aa[index]*t67951*t68011*6.4E1+gamma_aa[index]* \
                   t67950*t67952*t68021*(1.28E2/3.0)+gcaa*t67950*t67951*t68013*9.6E1)-ccaa1*gcaa*t67950*t67951*1.0/(t67957* \
                   t67957*t67957)*t68013*(1.6E1/3.0)+ccaa2*t67950*t67951*t67954*t68016*(gcaa*t68014*(1.6E1/3.0)+gamma_aa[index]* \
                   t67951*t68011*(3.2E1/3.0))-ccaa4*gamma_aa[index]*t67950*t67952*t68021*t68008*(1.28E2/3.0)+ccaa2*gamma_aa[index]* \
                   t67951*t67954*t68033*t68016*2.0-ccaa3*gcaa*t67950*t67951*t68010*t68013*2.4E1+ccaa4*gamma_aa[index]* \
                   t67950*t67952*t67953*t68022*t68042*4.0+ccaa3*gcaa*t67950*t67951*t67955*t68015*t68037*3.0-ccaa2*t67950* \
                   t67951*1.0/(t67970*t67970*t67970)*t67954*t68030*t68033*2.0-ccaa4*t67952*t67953*t67962*1.0/(t67967* \
                   t67967*t67967)*t68042*t68027*2.0+ccaa3*gamma_aa[index]*gcaa*t67950*t67951*t67955*t68015*(gcaa*t68014* \
                   8.0+gamma_aa[index]*t67951*t68011*3.2E1+gcaa*t67950*t67951*t68013*2.4E1)+ccaa3*gamma_aa[index]*gcaa* \
                   t67950*t67951*t68020*t68013*t68015*8.0-ccaa3*gamma_aa[index]*gcaa*t67950*t67951*1.0/(t67961*t67961* \
                   t67961)*t67955*t68020*t68037*2.0)+c0*pow(rho_a[index],4.0/3.0)*(cx1*gx*t68014*t68059*(-8.0/3.0)+cx1* \
                   gamma_aa[index]*t67971*t68011*t68063*8.0-cx2*gamma_aa[index]*t67971*t68011*t68061*(3.2E1/3.0)+cx2* \
                   t67950*t67971*t68011*t68065*t68078*(1.6E1/3.0)+cx4*t67962*t67972*t68021*t68070*t68075*(3.2E1/3.0)+ \
                   cx4*t67953*t67962*t67972*t68070*(gx*t68014*(3.2E1/3.0)+gamma_aa[index]*t67971*t68011*6.4E1+gamma_aa[index]* \
                   t67950*t67972*t68021*(1.28E2/3.0)+gx*t67950*t67971*t68013*9.6E1)-cx1*gx*t67950*t67971*1.0/(t67974* \
                   t67974*t67974)*t68013*(1.6E1/3.0)+cx2*t67950*t67971*t67954*t68065*(gx*t68014*(1.6E1/3.0)+gamma_aa[index]* \
                   t67971*t68011*(3.2E1/3.0))+cx2*gamma_aa[index]*t67971*t67954*t68081*t68065*2.0-cx4*gamma_aa[index]* \
                   t67950*t67972*t68021*t68060*(1.28E2/3.0)-cx3*gx*t67950*t67971*t68013*t68062*2.4E1+cx4*gamma_aa[index]* \
                   t67950*t67953*t67972*t68070*t68090*4.0+cx3*gx*t67950*t67971*t67955*t68064*t68085*3.0-cx2*t67950*t67971* \
                   t67954*1.0/(t67986*t67986*t67986)*t68081*t68078*2.0-cx4*t67953*t67962*t67972*1.0/(t67983*t67983*t67983) \
                   *t68090*t68075*2.0+cx3*gamma_aa[index]*gx*t67950*t67971*t67955*t68064*(gx*t68014*8.0+gamma_aa[index]* \
                   t67971*t68011*3.2E1+gx*t67950*t67971*t68013*2.4E1)+cx3*gamma_aa[index]*gx*t67950*t67971*t68013*t68064* \
                   t68069*8.0-cx3*gamma_aa[index]*gx*t67950*t67971*t67955*1.0/(t67978*t67978*t67978)*t68085*t68069*2.0) \
                   +c0*pow(rho_a[index],1.0/3.0)*(cx1*gx*t67949*t68059-cx1*gamma_aa[index]*t67971*t67954*t68063+cx2*gamma_aa[index]* \
                   t67971*t67954*t68061*2.0-cx2*t67950*t67971*t67954*t68065*t68078-cx4*t67953*t67962*t67972*t68070*t68075+ \
                   cx4*gamma_aa[index]*t67950*t67953*t67972*t68060*4.0+cx3*gx*t67950*t67971*t67955*t68062*3.0-cx3*gamma_aa[index]* \
                   gx*t67950*t67971*t67955*t68064*t68069)*(4.0/3.0);
            } else if (rho_b[index] > cutoff_) {
                v_rho_a_gamma_aa_[index] = 0.0;
            } else {
                v_rho_a_gamma_aa_[index] = 0.0;
            } 

            //V_rho_a_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_a_gamma_ab_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_a_gamma_ab_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_a_gamma_ab_[index] = 0.0;
            } else {
                v_rho_a_gamma_ab_[index] = 0.0;
            } 

            //V_rho_a_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t65680 = rho_a[index]+rho_b[index];
                double t65681 = 1.0/pow(t65680,1.0/3.0);
                double t65682 = c*t65681;
                double t65683 = sqrt(t65682);
                double t65684 = b1p*t65683;
                double t65685 = pow(t65682,3.0/2.0);
                double t65686 = b3p*t65685;
                double t65687 = c*c;
                double t65688 = 1.0/pow(t65680,2.0/3.0);
                double t65689 = b4p*t65687*t65688;
                double t65690 = b2p*c*t65681;
                double t65691 = t65690+t65684+t65686+t65689;
                double t65692 = 1.0/pow(t65680,4.0/3.0);
                double t65693 = 1.0/c0p;
                double t65694 = 1.0/t65691;
                double t65695 = t65693*t65694*(1.0/2.0);
                double t65696 = t65695+1.0;
                double t65697 = a1p*c*t65681;
                double t65698 = t65697+1.0;
                double t65699 = rho_a[index]-rho_b[index];
                double t65700 = t65699*t65699;
                double t65701 = 1.0/t65680;
                double t65702 = t65701*t65699;
                double t65703 = two_13*2.0;
                double t65704 = t65703-2.0;
                double t65705 = 1.0/t65704;
                double t65706 = 1.0/c0f;
                double t65707 = b1f*t65683;
                double t65708 = b3f*t65685;
                double t65709 = b4f*t65687*t65688;
                double t65710 = b2f*c*t65681;
                double t65711 = t65710+t65707+t65708+t65709;
                double t65712 = 1.0/t65711;
                double t65713 = t65712*t65706*(1.0/2.0);
                double t65714 = t65713+1.0;
                double t65715 = log(t65714);
                double t65716 = a1f*c*t65681;
                double t65717 = t65716+1.0;
                double t65718 = log(t65696);
                double t65728 = c0f*t65715*t65717*2.0;
                double t65729 = c0p*t65718*t65698*2.0;
                double t65719 = t65728-t65729;
                double t65720 = t65702+1.0;
                double t65721 = pow(t65720,4.0/3.0);
                double t65722 = -t65702+1.0;
                double t65723 = pow(t65722,4.0/3.0);
                double t65724 = t65721+t65723-2.0;
                double t65725 = 1.0/(t65680*t65680);
                double t65756 = t65725*t65699;
                double t65726 = t65701-t65756;
                double t65727 = 1.0/(t65680*t65680*t65680*t65680);
                double t65730 = t65700*t65700;
                double t65731 = 1.0/pow(t65680,5.0/3.0);
                double t65732 = 1.0/sqrt(t65682);
                double t65733 = 1.0/t65696;
                double t65734 = 1.0/(t65691*t65691);
                double t65735 = b4p*t65731*t65687*(2.0/3.0);
                double t65736 = b2p*c*t65692*(1.0/3.0);
                double t65737 = b1p*c*t65732*t65692*(1.0/6.0);
                double t65738 = b3p*c*t65683*t65692*(1.0/2.0);
                double t65739 = t65735+t65736+t65737+t65738;
                double t65740 = t65733*t65734*t65739*t65698;
                double t65741 = 1.0/(t65680*t65680*t65680*t65680*t65680);
                double t65742 = 1.0/d2fz0;
                double t65743 = 1.0/Aa;
                double t65744 = b1a*t65683;
                double t65745 = b3a*t65685;
                double t65746 = b4a*t65687*t65688;
                double t65747 = b2a*c*t65681;
                double t65748 = t65744+t65745+t65746+t65747;
                double t65749 = 1.0/t65748;
                double t65750 = t65743*t65749*(1.0/2.0);
                double t65751 = t65750+1.0;
                double t65752 = log(t65751);
                double t65753 = a1a*c*t65681;
                double t65754 = t65753+1.0;
                double t65755 = pow(t65720,1.0/3.0);
                double t65757 = t65726*t65755*(4.0/3.0);
                double t65758 = pow(t65722,1.0/3.0);
                double t65759 = t65757-t65726*t65758*(4.0/3.0);
                double t65760 = t65730*t65727;
                double t65761 = t65760-1.0;
                double t65762 = 1.0/pow(rho_a[index],1.0/3.0);
                double t65763 = c*t65762;
                double t65764 = sqrt(t65763);
                double t65765 = b1f*t65764;
                double t65766 = pow(t65763,3.0/2.0);
                double t65767 = b3f*t65766;
                double t65768 = 1.0/pow(rho_a[index],2.0/3.0);
                double t65769 = b4f*t65687*t65768;
                double t65770 = b2f*c*t65762;
                double t65771 = t65770+t65765+t65767+t65769;
                double t65772 = 1.0/pow(rho_a[index],4.0/3.0);
                double t65773 = b1p*t65764;
                double t65774 = b3p*t65766;
                double t65775 = b4p*t65687*t65768;
                double t65776 = b2p*c*t65762;
                double t65777 = t65773+t65774+t65775+t65776;
                double t65778 = 1.0/pow(rho_a[index],5.0/3.0);
                double t65779 = 1.0/sqrt(t65763);
                double t65780 = 1.0/t65771;
                double t65781 = t65706*t65780*(1.0/2.0);
                double t65782 = t65781+1.0;
                double t65783 = 1.0/t65777;
                double t65784 = t65693*t65783*(1.0/2.0);
                double t65785 = t65784+1.0;
                double t65786 = a1p*c*t65762;
                double t65787 = t65786+1.0;
                double t65788 = 1.0/t65785;
                double t65789 = 1.0/(t65777*t65777);
                double t65790 = b4p*t65687*t65778*(2.0/3.0);
                double t65791 = b2p*c*t65772*(1.0/3.0);
                double t65792 = b1p*c*t65772*t65779*(1.0/6.0);
                double t65793 = b3p*c*t65772*t65764*(1.0/2.0);
                double t65794 = t65790+t65791+t65792+t65793;
                double t65795 = t65794*t65787*t65788*t65789;
                double t65796 = log(t65785);
                double t65797 = pow(2.0,1.0/3.0);
                double t65798 = t65797*2.0;
                double t65799 = t65798-2.0;
                double t65800 = log(t65782);
                double t65801 = a1f*c*t65762;
                double t65802 = t65801+1.0;
                double t65803 = 1.0/pow(rho_b[index],8.0/3.0);
                double t65804 = 1.0/pow(rho_a[index],8.0/3.0);
                double t65805 = gamma_aa[index]*t65804*(1.0/2.0);
                double t65806 = gamma_bb[index]*t65803*(1.0/2.0);
                double t65807 = t65805+t65806;
                double t65808 = gcab*t65807;
                double t65809 = t65808+1.0;
                double t65810 = gcab*gcab;
                double t65811 = t65807*t65807;
                double t65812 = t65810*t65810;
                double t65813 = t65811*t65811;
                double t65814 = t65810*t65811;
                double t65815 = gcab*t65807*2.0;
                double t65816 = t65814+t65815+1.0;
                double t65817 = t65810*t65811*3.0;
                double t65818 = gcab*t65810*t65811*t65807;
                double t65819 = gcab*t65807*3.0;
                double t65820 = t65817+t65818+t65819+1.0;
                double t65821 = t65810*t65811*6.0;
                double t65822 = gcab*t65810*t65811*t65807*4.0;
                double t65823 = t65812*t65813;
                double t65824 = gcab*t65807*4.0;
                double t65825 = t65821+t65822+t65823+t65824+1.0;
                double t65826 = c0f*t65800*t65802*2.0;
                double t65828 = c0p*t65787*t65796*2.0;
                double t65827 = t65826-t65828;
                double t65829 = 1.0/pow(rho_b[index],1.0/3.0);
                double t65830 = c*t65829;
                double t65831 = sqrt(t65830);
                double t65832 = pow(t65830,3.0/2.0);
                double t65833 = 1.0/pow(rho_b[index],2.0/3.0);
                double t65834 = b1p*t65831;
                double t65835 = b3p*t65832;
                double t65836 = b4p*t65833*t65687;
                double t65837 = b2p*c*t65829;
                double t65838 = t65834+t65835+t65836+t65837;
                double t65839 = 1.0/t65838;
                double t65840 = t65693*t65839*(1.0/2.0);
                double t65841 = t65840+1.0;
                double t65842 = log(t65841);
                double t65843 = a1p*c*t65829;
                double t65844 = t65843+1.0;
                double t65845 = c0p*t65842*t65844*2.0;
                double t65846 = t65730*t65705*t65724*t65727*t65719;
                double t65847 = Aa*t65705*t65724*t65742*t65752*t65761*t65754*2.0;
                double t65848 = 1.0/pow(rho_a[index],1.1E1/3.0);
                double t65849 = 1.0/(t65820*t65820);
                double t65850 = 1.0/(t65825*t65825);
                double t65851 = gcab*t65803*2.0;
                double t65852 = t65810*t65803*t65807*6.0;
                double t65853 = gcab*t65810*t65811*t65803*6.0;
                double t65854 = t65811*t65803*t65812*t65807*2.0;
                double t65855 = t65851+t65852+t65853+t65854;
                double t65856 = 1.0/(t65816*t65816);
                double t65857 = gamma_aa[index]*gcab*t65848*(8.0/3.0);
                double t65858 = gamma_aa[index]*t65810*t65807*t65848*(8.0/3.0);
                double t65859 = t65857+t65858;
                double t65860 = gcab*t65803;
                double t65861 = t65810*t65803*t65807;
                double t65862 = t65860+t65861;
                double t65863 = gamma_aa[index]*gcab*t65848*(1.6E1/3.0);
                double t65864 = gamma_aa[index]*gcab*t65810*t65811*t65848*1.6E1;
                double t65865 = gamma_aa[index]*t65811*t65812*t65807*t65848*(1.6E1/3.0);
                double t65866 = gamma_aa[index]*t65810*t65807*t65848*1.6E1;
                double t65867 = t65863+t65864+t65865+t65866;
                double t65868 = 1.0/(t65809*t65809);
                double t65869 = 1.0/t65816;
                double t65870 = gcab*t65803*(3.0/2.0);
                double t65871 = t65810*t65803*t65807*3.0;
                double t65872 = gcab*t65810*t65811*t65803*(3.0/2.0);
                double t65873 = t65870+t65871+t65872;
                double t65874 = gamma_aa[index]*gcab*t65848*4.0;
                double t65875 = gamma_aa[index]*gcab*t65810*t65811*t65848*4.0;
                double t65876 = gamma_aa[index]*t65810*t65807*t65848*8.0;
                double t65877 = t65874+t65875+t65876;
                double t65878 = 1.0/t65820;
                double t65879 = 1.0/t65825;
                v_rho_a_gamma_bb_[index] = -(t65729+t65846+t65847+t65680*(t65740-t65730*t65705*t65724*t65727*(t65740- \
                   (1.0/(t65711*t65711)*t65717*(b2f*c*t65692*(1.0/3.0)+b4f*t65731*t65687*(2.0/3.0)+b1f*c*t65732*t65692* \
                   (1.0/6.0)+b3f*c*t65683*t65692*(1.0/2.0)))/t65714+a1f*c*c0f*t65715*t65692*(2.0/3.0)-a1p*c*c0p*t65718* \
                   t65692*(2.0/3.0))-a1p*c*c0p*t65718*t65692*(2.0/3.0)-t65730*t65705*t65741*t65724*t65719*4.0+t65730* \
                   t65705*t65727*t65719*t65759+t65700*t65705*t65724*t65727*t65719*t65699*4.0-Aa*t65705*t65724*t65742* \
                   t65752*t65754*(t65730*t65741*4.0-t65700*t65727*t65699*4.0)*2.0+Aa*t65705*t65742*t65752*t65761*t65754* \
                   t65759*2.0+(t65705*t65724*t65742*t65761*t65754*1.0/(t65748*t65748)*(b2a*c*t65692*(1.0/3.0)+b4a*t65731* \
                   t65687*(2.0/3.0)+b1a*c*t65732*t65692*(1.0/6.0)+b3a*c*t65683*t65692*(1.0/2.0)))/t65751-Aa*a1a*c*t65705* \
                   t65724*t65742*t65752*t65761*t65692*(2.0/3.0))+rho_a[index]*(-t65795+t65705*t65799*(t65795-(t65802* \
                   1.0/(t65771*t65771)*(b2f*c*t65772*(1.0/3.0)+b4f*t65687*t65778*(2.0/3.0)+b1f*c*t65772*t65779*(1.0/6.0) \
                   +b3f*c*t65772*t65764*(1.0/2.0)))/t65782+a1f*c*c0f*t65800*t65772*(2.0/3.0)-a1p*c*c0p*t65772*t65796* \
                   (2.0/3.0))+a1p*c*c0p*t65772*t65796*(2.0/3.0))-c0p*t65787*t65796*2.0-t65705*t65827*t65799)*((ccab1* \
                   gcab*t65803*(1.0/2.0))/t65809-ccab2*t65810*t65811*t65862*t65856-ccab1*t65810*t65803*t65807*t65868* \
                   (1.0/2.0)-ccab4*t65812*t65813*t65850*t65855+ccab2*t65810*t65803*t65807*t65869+ccab4*t65811*t65803* \
                   t65812*t65807*t65879*2.0+ccab3*gcab*t65810*t65811*t65803*t65878*(3.0/2.0)-ccab3*gcab*t65810*t65811* \
                   t65807*t65873*t65849)+(rho_a[index]*(t65828+t65705*t65827*t65799)+rho_b[index]*(t65845-t65705*t65799* \
                   (t65845-c0f*log((t65706*(1.0/2.0))/(b1f*t65831+b3f*t65832+b2f*c*t65829+b4f*t65833*t65687)+1.0)*(a1f* \
                   c*t65829+1.0)*2.0))-t65680*(t65729+t65846+t65847))*(ccab4*t65812*t65813*t65850*(gamma_aa[index]*t65810* \
                   t65803*t65848*8.0+gamma_aa[index]*t65811*t65803*t65812*t65848*8.0+gamma_aa[index]*gcab*t65810*t65803* \
                   t65807*t65848*1.6E1)+ccab2*t65810*t65803*t65807*t65856*t65859-ccab2*t65810*t65811*1.0/(t65816*t65816* \
                   t65816)*t65862*t65859*2.0-ccab4*t65812*t65813*1.0/(t65825*t65825*t65825)*t65855*t65867*2.0+ccab1*gamma_aa[index]* \
                   t65810*t65803*t65848*t65868*(4.0/3.0)-ccab2*gamma_aa[index]*t65810*t65803*t65848*t65869*(4.0/3.0)+ \
                   ccab2*gamma_aa[index]*t65811*t65803*t65812*t65856*t65848*(4.0/3.0)-ccab4*gamma_aa[index]*t65811*t65803* \
                   t65812*t65848*t65879*8.0+ccab2*gamma_aa[index]*t65810*t65807*t65862*t65856*t65848*(8.0/3.0)+ccab3* \
                   gcab*t65810*t65811*t65803*t65849*t65877*(3.0/2.0)+ccab4*t65811*t65803*t65812*t65850*t65807*t65867* \
                   2.0+ccab3*gcab*t65810*t65811*t65807*t65849*(gamma_aa[index]*t65810*t65803*t65848*4.0+gamma_aa[index]* \
                   gcab*t65810*t65803*t65807*t65848*4.0)-ccab1*gamma_aa[index]*gcab*t65810*t65803*t65807*1.0/(t65809* \
                   t65809*t65809)*t65848*(4.0/3.0)-ccab3*gcab*t65810*t65811*1.0/(t65820*t65820*t65820)*t65807*t65873* \
                   t65877*2.0+ccab3*gamma_aa[index]*gcab*t65810*t65811*t65873*t65848*t65849*4.0-ccab3*gamma_aa[index]* \
                   gcab*t65810*t65803*t65807*t65848*t65878*4.0+ccab4*gamma_aa[index]*t65811*t65812*t65850*t65807*t65855* \
                   t65848*(1.6E1/3.0));
            } else if (rho_a[index] > cutoff_) {
                v_rho_a_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_a_gamma_bb_[index] = 0.0;
            } else {
                v_rho_a_gamma_bb_[index] = 0.0;
            } 

            //V_rho_b_gamma_aa
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t65881 = rho_a[index]+rho_b[index];
                double t65882 = 1.0/pow(t65881,1.0/3.0);
                double t65883 = c*t65882;
                double t65884 = sqrt(t65883);
                double t65885 = b1p*t65884;
                double t65886 = pow(t65883,3.0/2.0);
                double t65887 = b3p*t65886;
                double t65888 = c*c;
                double t65889 = 1.0/pow(t65881,2.0/3.0);
                double t65890 = b4p*t65888*t65889;
                double t65891 = b2p*c*t65882;
                double t65892 = t65890+t65891+t65885+t65887;
                double t65893 = 1.0/pow(t65881,4.0/3.0);
                double t65894 = 1.0/c0p;
                double t65895 = 1.0/t65892;
                double t65896 = t65894*t65895*(1.0/2.0);
                double t65897 = t65896+1.0;
                double t65898 = a1p*c*t65882;
                double t65899 = t65898+1.0;
                double t65900 = rho_a[index]-rho_b[index];
                double t65901 = t65900*t65900;
                double t65902 = 1.0/t65881;
                double t65903 = t65900*t65902;
                double t65904 = two_13*2.0;
                double t65905 = t65904-2.0;
                double t65906 = 1.0/t65905;
                double t65907 = 1.0/c0f;
                double t65908 = b1f*t65884;
                double t65909 = b3f*t65886;
                double t65910 = b4f*t65888*t65889;
                double t65911 = b2f*c*t65882;
                double t65912 = t65910+t65911+t65908+t65909;
                double t65913 = 1.0/t65912;
                double t65914 = t65913*t65907*(1.0/2.0);
                double t65915 = t65914+1.0;
                double t65916 = log(t65915);
                double t65917 = a1f*c*t65882;
                double t65918 = t65917+1.0;
                double t65919 = log(t65897);
                double t65930 = c0f*t65916*t65918*2.0;
                double t65931 = c0p*t65919*t65899*2.0;
                double t65920 = t65930-t65931;
                double t65921 = t65903+1.0;
                double t65922 = pow(t65921,4.0/3.0);
                double t65923 = -t65903+1.0;
                double t65924 = pow(t65923,4.0/3.0);
                double t65925 = t65922+t65924-2.0;
                double t65926 = 1.0/(t65881*t65881);
                double t65927 = t65900*t65926;
                double t65928 = t65902+t65927;
                double t65929 = 1.0/(t65881*t65881*t65881*t65881);
                double t65932 = t65901*t65901;
                double t65933 = 1.0/pow(t65881,5.0/3.0);
                double t65934 = 1.0/sqrt(t65883);
                double t65935 = 1.0/t65897;
                double t65936 = 1.0/(t65892*t65892);
                double t65937 = b4p*t65933*t65888*(2.0/3.0);
                double t65938 = b2p*c*t65893*(1.0/3.0);
                double t65939 = b1p*c*t65934*t65893*(1.0/6.0);
                double t65940 = b3p*c*t65884*t65893*(1.0/2.0);
                double t65941 = t65940+t65937+t65938+t65939;
                double t65942 = 1.0/(t65881*t65881*t65881*t65881*t65881);
                double t65943 = 1.0/d2fz0;
                double t65944 = 1.0/Aa;
                double t65945 = b1a*t65884;
                double t65946 = b3a*t65886;
                double t65947 = b4a*t65888*t65889;
                double t65948 = b2a*c*t65882;
                double t65949 = t65945+t65946+t65947+t65948;
                double t65950 = 1.0/t65949;
                double t65951 = t65950*t65944*(1.0/2.0);
                double t65952 = t65951+1.0;
                double t65953 = log(t65952);
                double t65954 = a1a*c*t65882;
                double t65955 = t65954+1.0;
                double t65956 = pow(t65921,1.0/3.0);
                double t65957 = t65928*t65956*(4.0/3.0);
                double t65958 = pow(t65923,1.0/3.0);
                double t65959 = t65957-t65928*t65958*(4.0/3.0);
                double t65960 = t65932*t65929;
                double t65961 = t65960-1.0;
                double t65962 = 1.0/pow(rho_b[index],1.0/3.0);
                double t65963 = c*t65962;
                double t65964 = sqrt(t65963);
                double t65965 = b1f*t65964;
                double t65966 = pow(t65963,3.0/2.0);
                double t65967 = b3f*t65966;
                double t65968 = 1.0/pow(rho_b[index],2.0/3.0);
                double t65969 = b4f*t65968*t65888;
                double t65970 = b2f*c*t65962;
                double t65971 = t65970+t65965+t65967+t65969;
                double t65972 = 1.0/pow(rho_b[index],4.0/3.0);
                double t65973 = b1p*t65964;
                double t65974 = b3p*t65966;
                double t65975 = b4p*t65968*t65888;
                double t65976 = b2p*c*t65962;
                double t65977 = t65973+t65974+t65975+t65976;
                double t65978 = 1.0/pow(rho_b[index],5.0/3.0);
                double t65979 = 1.0/sqrt(t65963);
                double t65980 = 1.0/t65971;
                double t65981 = t65907*t65980*(1.0/2.0);
                double t65982 = t65981+1.0;
                double t65983 = 1.0/t65977;
                double t65984 = t65983*t65894*(1.0/2.0);
                double t65985 = t65984+1.0;
                double t65986 = a1p*c*t65962;
                double t65987 = t65986+1.0;
                double t65988 = 1.0/t65985;
                double t65989 = 1.0/(t65977*t65977);
                double t65990 = b4p*t65888*t65978*(2.0/3.0);
                double t65991 = b2p*c*t65972*(1.0/3.0);
                double t65992 = b1p*c*t65972*t65979*(1.0/6.0);
                double t65993 = b3p*c*t65972*t65964*(1.0/2.0);
                double t65994 = t65990+t65991+t65992+t65993;
                double t65995 = t65994*t65987*t65988*t65989;
                double t65996 = log(t65985);
                double t65997 = pow(2.0,1.0/3.0);
                double t65998 = t65997*2.0;
                double t65999 = t65998-2.0;
                double t66000 = log(t65982);
                double t66001 = a1f*c*t65962;
                double t66002 = t66001+1.0;
                double t66003 = 1.0/pow(rho_a[index],8.0/3.0);
                double t66004 = gamma_aa[index]*t66003*(1.0/2.0);
                double t66005 = 1.0/pow(rho_b[index],8.0/3.0);
                double t66006 = gamma_bb[index]*t66005*(1.0/2.0);
                double t66007 = t66004+t66006;
                double t66008 = gcab*t66007;
                double t66009 = t66008+1.0;
                double t66010 = gcab*gcab;
                double t66011 = t66007*t66007;
                double t66012 = t66010*t66010;
                double t66013 = t66011*t66011;
                double t66014 = t66010*t66011;
                double t66015 = gcab*t66007*2.0;
                double t66016 = t66014+t66015+1.0;
                double t66017 = t66010*t66011*3.0;
                double t66018 = gcab*t66010*t66011*t66007;
                double t66019 = gcab*t66007*3.0;
                double t66020 = t66017+t66018+t66019+1.0;
                double t66021 = t66010*t66011*6.0;
                double t66022 = gcab*t66010*t66011*t66007*4.0;
                double t66023 = t66012*t66013;
                double t66024 = gcab*t66007*4.0;
                double t66025 = t66021+t66022+t66023+t66024+1.0;
                double t66026 = a1p*c*c0p*t65919*t65893*(2.0/3.0);
                double t66027 = 1.0/pow(rho_a[index],1.0/3.0);
                double t66028 = c*t66027;
                double t66029 = sqrt(t66028);
                double t66030 = pow(t66028,3.0/2.0);
                double t66031 = 1.0/pow(rho_a[index],2.0/3.0);
                double t66032 = b1p*t66029;
                double t66033 = b3p*t66030;
                double t66034 = b4p*t65888*t66031;
                double t66035 = b2p*c*t66027;
                double t66036 = t66032+t66033+t66034+t66035;
                double t66037 = 1.0/t66036;
                double t66038 = t65894*t66037*(1.0/2.0);
                double t66039 = t66038+1.0;
                double t66040 = log(t66039);
                double t66041 = a1p*c*t66027;
                double t66042 = t66041+1.0;
                double t66043 = c0p*t66040*t66042*2.0;
                double t66044 = c0f*t66000*t66002*2.0;
                double t66046 = c0p*t65987*t65996*2.0;
                double t66045 = t66044-t66046;
                double t66047 = t65920*t65932*t65906*t65925*t65929;
                double t66048 = Aa*t65906*t65925*t65943*t65961*t65953*t65955*2.0;
                double t66049 = 1.0/pow(rho_b[index],1.1E1/3.0);
                double t66050 = 1.0/(t66020*t66020);
                double t66051 = 1.0/(t66025*t66025);
                double t66052 = gcab*t66003*2.0;
                double t66053 = t66010*t66003*t66007*6.0;
                double t66054 = gcab*t66010*t66011*t66003*6.0;
                double t66055 = t66011*t66003*t66012*t66007*2.0;
                double t66056 = t66052+t66053+t66054+t66055;
                double t66057 = 1.0/(t66016*t66016);
                double t66058 = gamma_bb[index]*gcab*t66049*(8.0/3.0);
                double t66059 = gamma_bb[index]*t66010*t66007*t66049*(8.0/3.0);
                double t66060 = t66058+t66059;
                double t66061 = gcab*t66003;
                double t66062 = t66010*t66003*t66007;
                double t66063 = t66061+t66062;
                double t66064 = gamma_bb[index]*gcab*t66049*(1.6E1/3.0);
                double t66065 = gamma_bb[index]*gcab*t66010*t66011*t66049*1.6E1;
                double t66066 = gamma_bb[index]*t66011*t66012*t66007*t66049*(1.6E1/3.0);
                double t66067 = gamma_bb[index]*t66010*t66007*t66049*1.6E1;
                double t66068 = t66064+t66065+t66066+t66067;
                double t66069 = 1.0/(t66009*t66009);
                double t66070 = 1.0/t66016;
                double t66071 = gcab*t66003*(3.0/2.0);
                double t66072 = t66010*t66003*t66007*3.0;
                double t66073 = gcab*t66010*t66011*t66003*(3.0/2.0);
                double t66074 = t66071+t66072+t66073;
                double t66075 = gamma_bb[index]*gcab*t66049*4.0;
                double t66076 = gamma_bb[index]*gcab*t66010*t66011*t66049*4.0;
                double t66077 = gamma_bb[index]*t66010*t66007*t66049*8.0;
                double t66078 = t66075+t66076+t66077;
                double t66079 = 1.0/t66020;
                double t66080 = 1.0/t66025;
                v_rho_b_gamma_aa_[index] = (rho_b[index]*(t66046+t65906*t65999*t66045)+rho_a[index]*(t66043-t65906* \
                   t65999*(t66043-c0f*log((t65907*(1.0/2.0))/(b1f*t66029+b3f*t66030+b2f*c*t66027+b4f*t65888*t66031)+1.0) \
                   *(a1f*c*t66027+1.0)*2.0))-t65881*(t65931+t66047+t66048))*(ccab4*t66012*t66013*t66051*(gamma_bb[index]* \
                   t66010*t66003*t66049*8.0+gamma_bb[index]*t66011*t66003*t66012*t66049*8.0+gamma_bb[index]*gcab*t66010* \
                   t66003*t66007*t66049*1.6E1)+ccab2*t66010*t66003*t66060*t66007*t66057-ccab2*t66010*t66011*t66060*1.0/ \
                   (t66016*t66016*t66016)*t66063*2.0-ccab4*t66012*t66013*1.0/(t66025*t66025*t66025)*t66056*t66068*2.0- \
                   ccab2*gamma_bb[index]*t66010*t66003*t66070*t66049*(4.0/3.0)+ccab1*gamma_bb[index]*t66010*t66003*t66049* \
                   t66069*(4.0/3.0)-ccab4*gamma_bb[index]*t66011*t66003*t66012*t66080*t66049*8.0+ccab2*gamma_bb[index]* \
                   t66011*t66003*t66012*t66057*t66049*(4.0/3.0)+ccab2*gamma_bb[index]*t66010*t66007*t66063*t66057*t66049* \
                   (8.0/3.0)+ccab3*gcab*t66010*t66011*t66003*t66050*t66078*(3.0/2.0)+ccab4*t66011*t66003*t66012*t66051* \
                   t66007*t66068*2.0+ccab3*gcab*t66010*t66011*t66050*t66007*(gamma_bb[index]*t66010*t66003*t66049*4.0+ \
                   gamma_bb[index]*gcab*t66010*t66003*t66007*t66049*4.0)-ccab1*gamma_bb[index]*gcab*t66010*t66003*t66007* \
                   1.0/(t66009*t66009*t66009)*t66049*(4.0/3.0)-ccab3*gcab*t66010*t66011*1.0/(t66020*t66020*t66020)*t66007* \
                   t66074*t66078*2.0+ccab3*gamma_bb[index]*gcab*t66010*t66011*t66050*t66074*t66049*4.0-ccab3*gamma_bb[index]* \
                   gcab*t66010*t66003*t66007*t66049*t66079*4.0+ccab4*gamma_bb[index]*t66011*t66012*t66051*t66007*t66056* \
                   t66049*(1.6E1/3.0))-(t65931+t66047+t66048+rho_b[index]*(-t65995+t65906*t65999*(t65995-(1.0/(t65971* \
                   t65971)*t66002*(b2f*c*t65972*(1.0/3.0)+b4f*t65888*t65978*(2.0/3.0)+b1f*c*t65972*t65979*(1.0/6.0)+b3f* \
                   c*t65972*t65964*(1.0/2.0)))/t65982+a1f*c*c0f*t65972*t66000*(2.0/3.0)-a1p*c*c0p*t65972*t65996*(2.0/ \
                   3.0))+a1p*c*c0p*t65972*t65996*(2.0/3.0))-t65881*(t66026-t65941*t65935*t65936*t65899+t65920*t65932* \
                   t65906*t65942*t65925*4.0+t65920*t65932*t65906*t65929*t65959-t65932*t65906*t65925*t65929*(t66026-t65941* \
                   t65935*t65936*t65899+(1.0/(t65912*t65912)*t65918*(b2f*c*t65893*(1.0/3.0)+b4f*t65933*t65888*(2.0/3.0) \
                   +b1f*c*t65934*t65893*(1.0/6.0)+b3f*c*t65884*t65893*(1.0/2.0)))/t65915-a1f*c*c0f*t65916*t65893*(2.0/ \
                   3.0))+t65900*t65901*t65920*t65906*t65925*t65929*4.0+Aa*t65906*t65925*t65943*t65953*t65955*(t65932* \
                   t65942*4.0+t65900*t65901*t65929*4.0)*2.0+Aa*t65906*t65943*t65961*t65953*t65955*t65959*2.0-(t65906* \
                   t65925*t65943*t65961*t65955*1.0/(t65949*t65949)*(b2a*c*t65893*(1.0/3.0)+b4a*t65933*t65888*(2.0/3.0) \
                   +b1a*c*t65934*t65893*(1.0/6.0)+b3a*c*t65884*t65893*(1.0/2.0)))/t65952+Aa*a1a*c*t65906*t65925*t65943* \
                   t65961*t65953*t65893*(2.0/3.0))-c0p*t65987*t65996*2.0-t65906*t65999*t66045)*((ccab1*gcab*t66003*(1.0/ \
                   2.0))/t66009+ccab2*t66010*t66003*t66007*t66070-ccab2*t66010*t66011*t66063*t66057-ccab1*t66010*t66003* \
                   t66007*t66069*(1.0/2.0)-ccab4*t66012*t66013*t66051*t66056+ccab4*t66011*t66003*t66012*t66007*t66080* \
                   2.0+ccab3*gcab*t66010*t66011*t66003*t66079*(3.0/2.0)-ccab3*gcab*t66010*t66011*t66050*t66007*t66074) \
                   ;
            } else if (rho_a[index] > cutoff_) {
                v_rho_b_gamma_aa_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_b_gamma_aa_[index] = 0.0;
            } else {
                v_rho_b_gamma_aa_[index] = 0.0;
            } 

            //V_rho_b_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_b_gamma_ab_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_b_gamma_ab_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_b_gamma_ab_[index] = 0.0;
            } else {
                v_rho_b_gamma_ab_[index] = 0.0;
            } 

            //V_rho_b_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t66083 = 1.0/pow(rho_b[index],1.0/3.0);
                double t66084 = c*t66083;
                double t66085 = sqrt(t66084);
                double t66086 = pow(t66084,3.0/2.0);
                double t66087 = c*c;
                double t66088 = 1.0/pow(rho_b[index],2.0/3.0);
                double t66089 = 1.0/c0p;
                double t66090 = b1p*t66085;
                double t66091 = b3p*t66086;
                double t66092 = b4p*t66087*t66088;
                double t66093 = b2p*c*t66083;
                double t66094 = t66090+t66091+t66092+t66093;
                double t66095 = 1.0/t66094;
                double t66096 = t66095*t66089*(1.0/2.0);
                double t66097 = t66096+1.0;
                double t66098 = log(t66097);
                double t66099 = a1p*c*t66083;
                double t66100 = t66099+1.0;
                double t66101 = 1.0/pow(rho_b[index],8.0/3.0);
                double t66102 = gamma_bb[index]*gamma_bb[index];
                double t66103 = gcaa*gcaa;
                double t66104 = t66103*t66103;
                double t66105 = 1.0/pow(rho_b[index],3.2E1/3.0);
                double t66106 = 1.0/pow(rho_b[index],1.6E1/3.0);
                double t66107 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]);
                double t66108 = gamma_bb[index]*gcaa*t66101;
                double t66109 = t66108+1.0;
                double t66110 = gamma_bb[index]*gcaa*t66101*3.0;
                double t66111 = gamma_bb[index]*gcaa*t66102*t66103*t66107;
                double t66112 = t66102*t66103*t66106*3.0;
                double t66113 = t66110+t66111+t66112+1.0;
                double t66114 = t66102*t66102;
                double t66115 = gamma_bb[index]*gcaa*t66101*4.0;
                double t66116 = gamma_bb[index]*gcaa*t66102*t66103*t66107*4.0;
                double t66117 = t66102*t66103*t66106*6.0;
                double t66118 = t66104*t66105*t66114;
                double t66119 = t66115+t66116+t66117+t66118+1.0;
                double t66120 = gamma_bb[index]*gcaa*t66101*2.0;
                double t66121 = t66102*t66103*t66106;
                double t66122 = t66120+t66121+1.0;
                double t66123 = rho_a[index]+rho_b[index];
                double t66124 = 1.0/pow(t66123,1.0/3.0);
                double t66125 = c*t66124;
                double t66126 = sqrt(t66125);
                double t66127 = b1p*t66126;
                double t66128 = pow(t66125,3.0/2.0);
                double t66129 = b3p*t66128;
                double t66130 = 1.0/pow(t66123,2.0/3.0);
                double t66131 = b4p*t66130*t66087;
                double t66132 = b2p*c*t66124;
                double t66133 = t66131+t66132+t66127+t66129;
                double t66134 = 1.0/pow(t66123,4.0/3.0);
                double t66135 = two_13*2.0;
                double t66136 = t66135-2.0;
                double t66137 = 1.0/t66136;
                double t66138 = 1.0/c0f;
                double t66139 = 1.0/t66133;
                double t66140 = t66139*t66089*(1.0/2.0);
                double t66141 = t66140+1.0;
                double t66142 = a1p*c*t66124;
                double t66143 = t66142+1.0;
                double t66144 = rho_a[index]-rho_b[index];
                double t66145 = t66144*t66144;
                double t66146 = 1.0/t66123;
                double t66147 = t66144*t66146;
                double t66148 = b1f*t66126;
                double t66149 = b3f*t66128;
                double t66150 = b4f*t66130*t66087;
                double t66151 = b2f*c*t66124;
                double t66152 = t66150+t66151+t66148+t66149;
                double t66153 = 1.0/t66152;
                double t66154 = t66153*t66138*(1.0/2.0);
                double t66155 = t66154+1.0;
                double t66156 = log(t66155);
                double t66157 = a1f*c*t66124;
                double t66158 = t66157+1.0;
                double t66159 = log(t66141);
                double t66170 = c0f*t66156*t66158*2.0;
                double t66171 = c0p*t66143*t66159*2.0;
                double t66160 = t66170-t66171;
                double t66161 = t66147+1.0;
                double t66162 = pow(t66161,4.0/3.0);
                double t66163 = -t66147+1.0;
                double t66164 = pow(t66163,4.0/3.0);
                double t66165 = t66162+t66164-2.0;
                double t66166 = 1.0/(t66123*t66123);
                double t66167 = t66144*t66166;
                double t66168 = t66146+t66167;
                double t66169 = 1.0/(t66123*t66123*t66123*t66123);
                double t66172 = t66145*t66145;
                double t66173 = 1.0/pow(t66123,5.0/3.0);
                double t66174 = 1.0/sqrt(t66125);
                double t66175 = 1.0/t66141;
                double t66176 = 1.0/(t66133*t66133);
                double t66177 = b4p*t66173*t66087*(2.0/3.0);
                double t66178 = b2p*c*t66134*(1.0/3.0);
                double t66179 = b1p*c*t66134*t66174*(1.0/6.0);
                double t66180 = b3p*c*t66134*t66126*(1.0/2.0);
                double t66181 = t66180+t66177+t66178+t66179;
                double t66182 = 1.0/(t66123*t66123*t66123*t66123*t66123);
                double t66183 = 1.0/d2fz0;
                double t66184 = 1.0/Aa;
                double t66185 = b1a*t66126;
                double t66186 = b3a*t66128;
                double t66187 = b4a*t66130*t66087;
                double t66188 = b2a*c*t66124;
                double t66189 = t66185+t66186+t66187+t66188;
                double t66190 = 1.0/t66189;
                double t66191 = t66190*t66184*(1.0/2.0);
                double t66192 = t66191+1.0;
                double t66193 = log(t66192);
                double t66194 = a1a*c*t66124;
                double t66195 = t66194+1.0;
                double t66196 = pow(t66161,1.0/3.0);
                double t66197 = t66168*t66196*(4.0/3.0);
                double t66198 = pow(t66163,1.0/3.0);
                double t66199 = t66197-t66168*t66198*(4.0/3.0);
                double t66200 = t66172*t66169;
                double t66201 = t66200-1.0;
                double t66202 = pow(2.0,1.0/3.0);
                double t66203 = t66202*2.0;
                double t66204 = t66203-2.0;
                double t66205 = a1f*c*t66083;
                double t66206 = t66205+1.0;
                double t66207 = b1f*t66085;
                double t66208 = b3f*t66086;
                double t66209 = b4f*t66087*t66088;
                double t66210 = b2f*c*t66083;
                double t66211 = t66210+t66207+t66208+t66209;
                double t66212 = 1.0/t66211;
                double t66213 = t66212*t66138*(1.0/2.0);
                double t66214 = t66213+1.0;
                double t66215 = 1.0/pow(rho_b[index],4.0/3.0);
                double t66216 = 1.0/pow(rho_b[index],5.0/3.0);
                double t66217 = 1.0/sqrt(t66084);
                double t66218 = log(t66214);
                double t66219 = 1.0/t66097;
                double t66220 = 1.0/(t66094*t66094);
                double t66221 = b4p*t66216*t66087*(2.0/3.0);
                double t66222 = b2p*c*t66215*(1.0/3.0);
                double t66223 = b1p*c*t66215*t66217*(1.0/6.0);
                double t66224 = b3p*c*t66215*t66085*(1.0/2.0);
                double t66225 = t66221+t66222+t66223+t66224;
                double t66226 = t66100*t66220*t66225*t66219;
                double t66227 = c0f*t66206*t66218*2.0;
                double t66228 = c0p*t66100*t66098*2.0;
                double t66229 = 1.0/pow(rho_a[index],8.0/3.0);
                double t66230 = gamma_aa[index]*t66229*(1.0/2.0);
                double t66231 = gamma_bb[index]*t66101*(1.0/2.0);
                double t66232 = t66230+t66231;
                double t66233 = gcab*t66232;
                double t66234 = t66233+1.0;
                double t66235 = gcab*gcab;
                double t66236 = t66232*t66232;
                double t66237 = t66235*t66235;
                double t66238 = t66236*t66236;
                double t66239 = t66235*t66236;
                double t66240 = gcab*t66232*2.0;
                double t66241 = t66240+t66239+1.0;
                double t66242 = t66235*t66236*3.0;
                double t66243 = gcab*t66232*t66235*t66236;
                double t66244 = gcab*t66232*3.0;
                double t66245 = t66242+t66243+t66244+1.0;
                double t66246 = t66235*t66236*6.0;
                double t66247 = gcab*t66232*t66235*t66236*4.0;
                double t66248 = t66237*t66238;
                double t66249 = gcab*t66232*4.0;
                double t66250 = t66246+t66247+t66248+t66249+1.0;
                double t66251 = a1p*c*c0p*t66134*t66159*(2.0/3.0);
                double t66252 = 1.0/pow(rho_a[index],1.0/3.0);
                double t66253 = c*t66252;
                double t66254 = sqrt(t66253);
                double t66255 = pow(t66253,3.0/2.0);
                double t66256 = 1.0/pow(rho_a[index],2.0/3.0);
                double t66257 = b1p*t66254;
                double t66258 = b3p*t66255;
                double t66259 = b4p*t66256*t66087;
                double t66260 = b2p*c*t66252;
                double t66261 = t66260+t66257+t66258+t66259;
                double t66262 = 1.0/t66261;
                double t66263 = t66262*t66089*(1.0/2.0);
                double t66264 = t66263+1.0;
                double t66265 = log(t66264);
                double t66266 = a1p*c*t66252;
                double t66267 = t66266+1.0;
                double t66268 = c0p*t66265*t66267*2.0;
                double t66269 = t66227-t66228;
                double t66270 = t66160*t66172*t66137*t66165*t66169;
                double t66271 = Aa*t66201*t66137*t66165*t66183*t66193*t66195*2.0;
                double t66272 = 1.0/t66234;
                double t66273 = 1.0/pow(rho_b[index],1.1E1/3.0);
                double t66274 = 1.0/(t66234*t66234);
                double t66275 = 1.0/t66241;
                double t66276 = 1.0/(t66245*t66245);
                double t66277 = 1.0/pow(rho_b[index],1.9E1/3.0);
                double t66278 = 1.0/(t66241*t66241);
                double t66279 = 1.0/t66245;
                double t66280 = 1.0/t66250;
                double t66281 = 1.0/(t66250*t66250);
                double t66282 = gcab*t66101*2.0;
                double t66283 = t66101*t66232*t66235*6.0;
                double t66284 = gcab*t66101*t66235*t66236*6.0;
                double t66285 = t66101*t66232*t66236*t66237*2.0;
                double t66286 = t66282+t66283+t66284+t66285;
                double t66287 = gamma_bb[index]*gcab*t66273*(8.0/3.0);
                double t66288 = gamma_bb[index]*t66232*t66235*t66273*(8.0/3.0);
                double t66289 = t66287+t66288;
                double t66290 = gcab*t66101;
                double t66291 = t66101*t66232*t66235;
                double t66292 = t66290+t66291;
                double t66293 = gamma_bb[index]*gcab*t66273*(1.6E1/3.0);
                double t66294 = gamma_bb[index]*gcab*t66235*t66236*t66273*1.6E1;
                double t66295 = gamma_bb[index]*t66232*t66236*t66237*t66273*(1.6E1/3.0);
                double t66296 = gamma_bb[index]*t66232*t66235*t66273*1.6E1;
                double t66297 = t66293+t66294+t66295+t66296;
                double t66298 = gcab*t66101*(3.0/2.0);
                double t66299 = t66101*t66232*t66235*3.0;
                double t66300 = gcab*t66101*t66235*t66236*(3.0/2.0);
                double t66301 = t66300+t66298+t66299;
                double t66302 = gamma_bb[index]*gcab*t66273*4.0;
                double t66303 = gamma_bb[index]*gcab*t66235*t66236*t66273*4.0;
                double t66304 = gamma_bb[index]*t66232*t66235*t66273*8.0;
                double t66305 = t66302+t66303+t66304;
                double t66306 = gx*gx;
                double t66307 = t66306*t66306;
                double t66308 = gamma_bb[index]*gx*t66101;
                double t66309 = t66308+1.0;
                double t66310 = gamma_bb[index]*gx*t66101*3.0;
                double t66311 = gamma_bb[index]*gx*t66102*t66107*t66306;
                double t66312 = t66102*t66106*t66306*3.0;
                double t66313 = t66310+t66311+t66312+1.0;
                double t66314 = gamma_bb[index]*gx*t66101*4.0;
                double t66315 = gamma_bb[index]*gx*t66102*t66107*t66306*4.0;
                double t66316 = t66102*t66106*t66306*6.0;
                double t66317 = t66105*t66114*t66307;
                double t66318 = t66314+t66315+t66316+t66317+1.0;
                double t66319 = gamma_bb[index]*gx*t66101*2.0;
                double t66320 = t66102*t66106*t66306;
                double t66321 = t66320+t66319+1.0;
                double t66322 = t66204*t66137*t66269;
                double t66323 = t66322+t66228;
                double t66324 = 1.0/t66109;
                double t66325 = 1.0/t66119;
                double t66326 = 1.0/t66122;
                double t66327 = 1.0/t66113;
                double t66328 = 1.0/(t66109*t66109);
                double t66329 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]*rho_b[index]);
                double t66330 = 1.0/(t66113*t66113);
                double t66331 = 1.0/(t66122*t66122);
                double t66332 = gcaa*t66101*3.0;
                double t66333 = gamma_bb[index]*t66103*t66106*6.0;
                double t66334 = gcaa*t66102*t66103*t66107*3.0;
                double t66335 = t66332+t66333+t66334;
                double t66336 = 1.0/pow(rho_b[index],3.5E1/3.0);
                double t66337 = 1.0/(t66119*t66119);
                double t66338 = gcaa*t66101*4.0;
                double t66339 = gamma_bb[index]*t66103*t66106*1.2E1;
                double t66340 = gcaa*t66102*t66103*t66107*1.2E1;
                double t66341 = gamma_bb[index]*t66102*t66104*t66105*4.0;
                double t66342 = t66340+t66341+t66338+t66339;
                double t66343 = gcaa*t66101*2.0;
                double t66344 = gamma_bb[index]*t66103*t66106*2.0;
                double t66345 = t66343+t66344;
                double t66346 = gamma_bb[index]*gcaa*t66273*(1.6E1/3.0);
                double t66347 = t66102*t66103*t66277*(1.6E1/3.0);
                double t66348 = t66346+t66347;
                double t66349 = gamma_bb[index]*gcaa*t66273*8.0;
                double t66350 = gamma_bb[index]*gcaa*t66102*t66103*t66329*8.0;
                double t66351 = t66102*t66103*t66277*1.6E1;
                double t66352 = t66350+t66351+t66349;
                double t66353 = gamma_bb[index]*gcaa*t66273*(3.2E1/3.0);
                double t66354 = gamma_bb[index]*gcaa*t66102*t66103*t66329*3.2E1;
                double t66355 = t66102*t66103*t66277*3.2E1;
                double t66356 = t66104*t66114*t66336*(3.2E1/3.0);
                double t66357 = t66353+t66354+t66355+t66356;
                double t66358 = 1.0/t66214;
                double t66359 = 1.0/(t66211*t66211);
                double t66360 = b4f*t66216*t66087*(2.0/3.0);
                double t66361 = b2f*c*t66215*(1.0/3.0);
                double t66362 = b1f*c*t66215*t66217*(1.0/6.0);
                double t66363 = b3f*c*t66215*t66085*(1.0/2.0);
                double t66364 = t66360+t66361+t66362+t66363;
                double t66365 = a1f*c*c0f*t66215*t66218*(2.0/3.0);
                double t66366 = a1p*c*c0p*t66215*t66098*(2.0/3.0);
                double t66367 = ccaa1*gcaa*t66101*t66324;
                double t66368 = ccaa4*gamma_bb[index]*t66102*t66104*t66105*t66325*4.0;
                double t66369 = ccaa2*gamma_bb[index]*t66103*t66106*t66326*2.0;
                double t66370 = ccaa3*gcaa*t66102*t66103*t66107*t66327*3.0;
                double t66371 = t66370+t66367+t66368+t66369-ccaa1*gamma_bb[index]*t66103*t66106*t66328-ccaa2*t66102* \
                   t66103*t66106*t66331*t66345-ccaa4*t66104*t66105*t66114*t66342*t66337-ccaa3*gamma_bb[index]*gcaa*t66102* \
                   t66103*t66330*t66107*t66335;
                double t66372 = 1.0/t66309;
                double t66373 = 1.0/t66318;
                double t66374 = 1.0/t66321;
                double t66375 = 1.0/t66313;
                double t66376 = 1.0/(t66309*t66309);
                double t66377 = 1.0/(t66313*t66313);
                double t66378 = 1.0/(t66321*t66321);
                double t66379 = gx*t66101*3.0;
                double t66380 = gamma_bb[index]*t66106*t66306*6.0;
                double t66381 = gx*t66102*t66107*t66306*3.0;
                double t66382 = t66380+t66381+t66379;
                double t66383 = 1.0/(t66318*t66318);
                double t66384 = gx*t66101*4.0;
                double t66385 = gamma_bb[index]*t66106*t66306*1.2E1;
                double t66386 = gx*t66102*t66107*t66306*1.2E1;
                double t66387 = gamma_bb[index]*t66102*t66105*t66307*4.0;
                double t66388 = t66384+t66385+t66386+t66387;
                double t66389 = gx*t66101*2.0;
                double t66390 = gamma_bb[index]*t66106*t66306*2.0;
                double t66391 = t66390+t66389;
                double t66392 = gamma_bb[index]*gx*t66273*(1.6E1/3.0);
                double t66393 = t66102*t66306*t66277*(1.6E1/3.0);
                double t66394 = t66392+t66393;
                double t66395 = gamma_bb[index]*gx*t66273*8.0;
                double t66396 = gamma_bb[index]*gx*t66102*t66306*t66329*8.0;
                double t66397 = t66102*t66306*t66277*1.6E1;
                double t66398 = t66395+t66396+t66397;
                double t66399 = gamma_bb[index]*gx*t66273*(3.2E1/3.0);
                double t66400 = gamma_bb[index]*gx*t66102*t66306*t66329*3.2E1;
                double t66401 = t66102*t66306*t66277*3.2E1;
                double t66402 = t66114*t66307*t66336*(3.2E1/3.0);
                double t66403 = t66400+t66401+t66402+t66399;
                v_rho_b_gamma_bb_[index] = -(rho_b[index]*t66323+rho_a[index]*(t66268-t66204*t66137*(t66268-c0f*log((t66138* \
                   (1.0/2.0))/(b1f*t66254+b3f*t66255+b2f*c*t66252+b4f*t66256*t66087)+1.0)*(a1f*c*t66252+1.0)*2.0))-t66123* \
                   (t66171+t66270+t66271))*(ccab1*gcab*t66272*t66273*(4.0/3.0)-ccab2*t66235*t66236*t66278*(gcab*t66273* \
                   (8.0/3.0)+gamma_bb[index]*t66235*t66277*(4.0/3.0)+t66232*t66235*t66273*(8.0/3.0))-ccab4*t66281*t66237* \
                   t66238*(gcab*t66273*(1.6E1/3.0)+gamma_bb[index]*t66235*t66277*8.0+t66232*t66235*t66273*1.6E1+gamma_bb[index]* \
                   t66236*t66237*t66277*8.0+gcab*t66235*t66236*t66273*1.6E1+t66232*t66236*t66237*t66273*(1.6E1/3.0)+gamma_bb[index]* \
                   gcab*t66232*t66235*t66277*1.6E1)-ccab1*gamma_bb[index]*t66235*t66274*t66277*(4.0/3.0)+ccab2*gamma_bb[index]* \
                   t66235*t66275*t66277*(4.0/3.0)-ccab1*t66232*t66235*t66273*t66274*(4.0/3.0)+ccab2*t66232*t66235*t66273* \
                   t66275*(8.0/3.0)+ccab4*t66232*t66280*t66236*t66237*t66273*(1.6E1/3.0)-ccab2*t66101*t66232*t66235*t66278* \
                   t66289+ccab2*1.0/(t66241*t66241*t66241)*t66235*t66236*t66292*t66289*2.0+ccab4*1.0/(t66250*t66250*t66250) \
                   *t66237*t66238*t66286*t66297*2.0+ccab4*gamma_bb[index]*t66280*t66236*t66237*t66277*8.0+ccab3*gcab* \
                   t66235*t66236*t66273*t66279*4.0+ccab3*gamma_bb[index]*gcab*t66232*t66235*t66277*t66279*4.0-ccab2*gamma_bb[index]* \
                   t66232*t66235*t66273*t66292*t66278*(8.0/3.0)-ccab3*gcab*t66101*t66305*t66235*t66236*t66276*(3.0/2.0) \
                   -ccab4*t66101*t66232*t66236*t66281*t66237*t66297*2.0-ccab3*gcab*t66232*t66235*t66236*t66276*(gcab* \
                   t66273*4.0+gamma_bb[index]*t66235*t66277*4.0+t66232*t66235*t66273*8.0+gcab*t66235*t66236*t66273*4.0+ \
                   gamma_bb[index]*gcab*t66232*t66235*t66277*4.0)+ccab1*gamma_bb[index]*gcab*t66232*1.0/(t66234*t66234* \
                   t66234)*t66235*t66277*(4.0/3.0)+ccab3*gcab*t66301*t66232*t66305*t66235*t66236*1.0/(t66245*t66245*t66245) \
                   *2.0-ccab3*gamma_bb[index]*gcab*t66301*t66235*t66236*t66273*t66276*4.0-ccab4*gamma_bb[index]*t66232* \
                   t66236*t66281*t66237*t66273*t66286*(1.6E1/3.0))-(t66171+t66270+t66271-t66228+rho_b[index]*(-t66226+ \
                   t66366+t66204*t66137*(t66226+t66365-t66206*t66364*t66358*t66359-a1p*c*c0p*t66215*t66098*(2.0/3.0)) \
                   )-t66123*(t66251-t66143*t66181*t66175*t66176+t66160*t66172*t66137*t66182*t66165*4.0+t66160*t66172* \
                   t66137*t66169*t66199-t66172*t66137*t66165*t66169*(t66251-t66143*t66181*t66175*t66176+(1.0/(t66152* \
                   t66152)*t66158*(b2f*c*t66134*(1.0/3.0)+b4f*t66173*t66087*(2.0/3.0)+b1f*c*t66134*t66174*(1.0/6.0)+b3f* \
                   c*t66134*t66126*(1.0/2.0)))/t66155-a1f*c*c0f*t66134*t66156*(2.0/3.0))+t66160*t66144*t66145*t66137* \
                   t66165*t66169*4.0+Aa*t66137*t66165*t66183*t66193*t66195*(t66172*t66182*4.0+t66144*t66145*t66169*4.0) \
                   *2.0+Aa*t66201*t66137*t66183*t66193*t66195*t66199*2.0-(t66201*t66137*t66165*t66183*t66195*1.0/(t66189* \
                   t66189)*(b2a*c*t66134*(1.0/3.0)+b4a*t66173*t66087*(2.0/3.0)+b1a*c*t66134*t66174*(1.0/6.0)+b3a*c*t66134* \
                   t66126*(1.0/2.0)))/t66192+Aa*a1a*c*t66201*t66134*t66137*t66165*t66183*t66193*(2.0/3.0))-t66204*t66137* \
                   t66269)*(ccab1*gcab*t66101*t66272*(1.0/2.0)-ccab1*t66101*t66232*t66235*t66274*(1.0/2.0)+ccab2*t66101* \
                   t66232*t66235*t66275-ccab2*t66235*t66236*t66292*t66278-ccab4*t66281*t66237*t66238*t66286+ccab4*t66101* \
                   t66232*t66280*t66236*t66237*2.0+ccab3*gcab*t66101*t66235*t66236*t66279*(3.0/2.0)-ccab3*gcab*t66301* \
                   t66232*t66235*t66236*t66276)-t66371*(t66228+t66204*t66137*(t66227-c0p*t66100*t66098*2.0))-rho_b[index]* \
                   t66323*(ccaa1*gcaa*t66324*t66273*(-8.0/3.0)-ccaa2*gamma_bb[index]*t66103*t66326*t66277*(3.2E1/3.0) \
                   +ccaa1*gamma_bb[index]*t66103*t66328*t66277*8.0+ccaa2*t66102*t66103*t66331*t66345*t66277*(1.6E1/3.0) \
                   +ccaa4*t66104*t66114*t66342*t66336*t66337*(3.2E1/3.0)+ccaa4*t66104*t66105*t66114*t66337*(gcaa*t66273* \
                   (3.2E1/3.0)+gamma_bb[index]*t66103*t66277*6.4E1+gamma_bb[index]*t66102*t66104*t66336*(1.28E2/3.0)+ \
                   gcaa*t66102*t66103*t66329*9.6E1)-ccaa1*gcaa*t66102*t66103*1.0/(t66109*t66109*t66109)*t66329*(1.6E1/ \
                   3.0)+ccaa2*t66102*t66103*t66106*t66331*(gcaa*t66273*(1.6E1/3.0)+gamma_bb[index]*t66103*t66277*(3.2E1/ \
                   3.0))-ccaa4*gamma_bb[index]*t66102*t66104*t66325*t66336*(1.28E2/3.0)+ccaa2*gamma_bb[index]*t66103* \
                   t66106*t66331*t66348*2.0-ccaa3*gcaa*t66102*t66103*t66327*t66329*2.4E1+ccaa4*gamma_bb[index]*t66102* \
                   t66104*t66105*t66337*t66357*4.0+ccaa3*gcaa*t66102*t66103*t66330*t66107*t66352*3.0-ccaa2*t66102*t66103* \
                   1.0/(t66122*t66122*t66122)*t66106*t66345*t66348*2.0-ccaa4*t66104*t66105*t66114*t66342*1.0/(t66119* \
                   t66119*t66119)*t66357*2.0+ccaa3*gamma_bb[index]*gcaa*t66102*t66103*t66330*t66107*(gcaa*t66273*8.0+ \
                   gamma_bb[index]*t66103*t66277*3.2E1+gcaa*t66102*t66103*t66329*2.4E1)+ccaa3*gamma_bb[index]*gcaa*t66102* \
                   t66103*t66330*t66335*t66329*8.0-ccaa3*gamma_bb[index]*gcaa*t66102*t66103*1.0/(t66113*t66113*t66113) \
                   *t66107*t66352*t66335*2.0)+c0*pow(rho_b[index],4.0/3.0)*(cx1*gx*t66273*t66372*(-8.0/3.0)+cx1*gamma_bb[index]* \
                   t66306*t66277*t66376*8.0-cx2*gamma_bb[index]*t66306*t66374*t66277*(3.2E1/3.0)+cx2*t66102*t66306*t66391* \
                   t66277*t66378*(1.6E1/3.0)+cx4*t66114*t66307*t66336*t66383*t66388*(3.2E1/3.0)+cx4*t66105*t66114*t66307* \
                   t66383*(gx*t66273*(3.2E1/3.0)+gamma_bb[index]*t66306*t66277*6.4E1+gamma_bb[index]*t66102*t66307*t66336* \
                   (1.28E2/3.0)+gx*t66102*t66306*t66329*9.6E1)-cx1*gx*t66102*t66306*1.0/(t66309*t66309*t66309)*t66329* \
                   (1.6E1/3.0)+cx2*t66102*t66106*t66306*t66378*(gx*t66273*(1.6E1/3.0)+gamma_bb[index]*t66306*t66277*(3.2E1/ \
                   3.0))+cx2*gamma_bb[index]*t66106*t66306*t66394*t66378*2.0-cx4*gamma_bb[index]*t66102*t66307*t66336* \
                   t66373*(1.28E2/3.0)-cx3*gx*t66102*t66306*t66329*t66375*2.4E1+cx4*gamma_bb[index]*t66102*t66105*t66403* \
                   t66307*t66383*4.0+cx3*gx*t66102*t66107*t66306*t66377*t66398*3.0-cx2*t66102*1.0/(t66321*t66321*t66321) \
                   *t66106*t66306*t66391*t66394*2.0-cx4*t66105*t66114*t66403*t66307*1.0/(t66318*t66318*t66318)*t66388* \
                   2.0+cx3*gamma_bb[index]*gx*t66102*t66107*t66306*t66377*(gx*t66273*8.0+gamma_bb[index]*t66306*t66277* \
                   3.2E1+gx*t66102*t66306*t66329*2.4E1)+cx3*gamma_bb[index]*gx*t66102*t66306*t66382*t66329*t66377*8.0- \
                   cx3*gamma_bb[index]*gx*t66102*1.0/(t66313*t66313*t66313)*t66107*t66306*t66382*t66398*2.0)+rho_b[index]* \
                   t66371*(-t66226+t66366+t66204*t66137*(t66226+t66365-t66366-t66206*t66364*t66358*t66359))+c0*pow(rho_b[index],1.0/ \
                   3.0)*(cx1*gx*t66101*t66372-cx1*gamma_bb[index]*t66106*t66306*t66376+cx2*gamma_bb[index]*t66106*t66306* \
                   t66374*2.0-cx2*t66102*t66106*t66306*t66391*t66378-cx4*t66105*t66114*t66307*t66383*t66388+cx4*gamma_bb[index]* \
                   t66102*t66105*t66307*t66373*4.0+cx3*gx*t66102*t66107*t66306*t66375*3.0-cx3*gamma_bb[index]*gx*t66102* \
                   t66107*t66306*t66382*t66377)*(4.0/3.0);
            } else if (rho_a[index] > cutoff_) {
                v_rho_b_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                double t67297 = 1.0/pow(rho_b[index],1.0/3.0);
                double t67298 = c*t67297;
                double t67299 = sqrt(t67298);
                double t67300 = pow(t67298,3.0/2.0);
                double t67301 = c*c;
                double t67302 = 1.0/pow(rho_b[index],2.0/3.0);
                double t67303 = 1.0/c0p;
                double t67304 = b1p*t67299;
                double t67305 = b3p*t67300;
                double t67306 = b4p*t67301*t67302;
                double t67307 = b2p*c*t67297;
                double t67308 = t67304+t67305+t67306+t67307;
                double t67309 = 1.0/t67308;
                double t67310 = t67303*t67309*(1.0/2.0);
                double t67311 = t67310+1.0;
                double t67312 = log(t67311);
                double t67313 = a1p*c*t67297;
                double t67314 = t67313+1.0;
                double t67315 = 1.0/pow(rho_b[index],8.0/3.0);
                double t67316 = gamma_bb[index]*gamma_bb[index];
                double t67317 = gcaa*gcaa;
                double t67318 = t67317*t67317;
                double t67319 = 1.0/pow(rho_b[index],3.2E1/3.0);
                double t67320 = 1.0/pow(rho_b[index],1.6E1/3.0);
                double t67321 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]);
                double t67322 = gamma_bb[index]*gcaa*t67315;
                double t67323 = t67322+1.0;
                double t67324 = gamma_bb[index]*gcaa*t67315*3.0;
                double t67325 = gamma_bb[index]*gcaa*t67321*t67316*t67317;
                double t67326 = t67320*t67316*t67317*3.0;
                double t67327 = t67324+t67325+t67326+1.0;
                double t67328 = t67316*t67316;
                double t67329 = gamma_bb[index]*gcaa*t67315*4.0;
                double t67330 = gamma_bb[index]*gcaa*t67321*t67316*t67317*4.0;
                double t67331 = t67320*t67316*t67317*6.0;
                double t67332 = t67318*t67319*t67328;
                double t67333 = t67330+t67331+t67332+t67329+1.0;
                double t67334 = gamma_bb[index]*gcaa*t67315*2.0;
                double t67335 = t67320*t67316*t67317;
                double t67336 = t67334+t67335+1.0;
                double t67337 = gx*gx;
                double t67338 = t67337*t67337;
                double t67339 = gamma_bb[index]*gx*t67315;
                double t67340 = t67339+1.0;
                double t67341 = gamma_bb[index]*gx*t67315*3.0;
                double t67342 = gamma_bb[index]*gx*t67321*t67316*t67337;
                double t67343 = t67320*t67316*t67337*3.0;
                double t67344 = t67341+t67342+t67343+1.0;
                double t67345 = gamma_bb[index]*gx*t67315*4.0;
                double t67346 = gamma_bb[index]*gx*t67321*t67316*t67337*4.0;
                double t67347 = t67320*t67316*t67337*6.0;
                double t67348 = t67319*t67328*t67338;
                double t67349 = t67345+t67346+t67347+t67348+1.0;
                double t67350 = gamma_bb[index]*gx*t67315*2.0;
                double t67351 = t67320*t67316*t67337;
                double t67352 = t67350+t67351+1.0;
                double t67353 = pow(2.0,1.0/3.0);
                double t67354 = t67353*2.0;
                double t67355 = t67354-2.0;
                double t67356 = two_13*2.0;
                double t67357 = t67356-2.0;
                double t67358 = 1.0/t67357;
                double t67359 = 1.0/c0f;
                double t67360 = b1f*t67299;
                double t67361 = b3f*t67300;
                double t67362 = b4f*t67301*t67302;
                double t67363 = b2f*c*t67297;
                double t67364 = t67360+t67361+t67362+t67363;
                double t67365 = 1.0/t67364;
                double t67366 = t67365*t67359*(1.0/2.0);
                double t67367 = t67366+1.0;
                double t67368 = log(t67367);
                double t67369 = a1f*c*t67297;
                double t67370 = t67369+1.0;
                double t67371 = c0f*t67370*t67368*2.0;
                double t67372 = c0p*t67312*t67314*2.0;
                double t67373 = 1.0/t67323;
                double t67374 = 1.0/t67333;
                double t67375 = 1.0/t67336;
                double t67376 = 1.0/t67327;
                double t67377 = 1.0/pow(rho_b[index],1.9E1/3.0);
                double t67378 = 1.0/(t67323*t67323);
                double t67379 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]*rho_b[index]);
                double t67380 = 1.0/pow(rho_b[index],1.1E1/3.0);
                double t67381 = 1.0/(t67327*t67327);
                double t67382 = 1.0/(t67336*t67336);
                double t67383 = gcaa*t67315*3.0;
                double t67384 = gamma_bb[index]*t67320*t67317*6.0;
                double t67385 = gcaa*t67321*t67316*t67317*3.0;
                double t67386 = t67383+t67384+t67385;
                double t67387 = 1.0/pow(rho_b[index],3.5E1/3.0);
                double t67388 = 1.0/(t67333*t67333);
                double t67389 = gcaa*t67315*4.0;
                double t67390 = gamma_bb[index]*t67320*t67317*1.2E1;
                double t67391 = gcaa*t67321*t67316*t67317*1.2E1;
                double t67392 = gamma_bb[index]*t67316*t67318*t67319*4.0;
                double t67393 = t67390+t67391+t67392+t67389;
                double t67394 = gcaa*t67315*2.0;
                double t67395 = gamma_bb[index]*t67320*t67317*2.0;
                double t67396 = t67394+t67395;
                double t67397 = gamma_bb[index]*gcaa*t67380*(1.6E1/3.0);
                double t67398 = t67316*t67317*t67377*(1.6E1/3.0);
                double t67399 = t67397+t67398;
                double t67400 = gamma_bb[index]*gcaa*t67380*8.0;
                double t67401 = gamma_bb[index]*gcaa*t67316*t67317*t67379*8.0;
                double t67402 = t67316*t67317*t67377*1.6E1;
                double t67403 = t67400+t67401+t67402;
                double t67404 = gamma_bb[index]*gcaa*t67380*(3.2E1/3.0);
                double t67405 = gamma_bb[index]*gcaa*t67316*t67317*t67379*3.2E1;
                double t67406 = t67316*t67317*t67377*3.2E1;
                double t67407 = t67318*t67328*t67387*(3.2E1/3.0);
                double t67408 = t67404+t67405+t67406+t67407;
                double t67409 = 1.0/pow(rho_b[index],4.0/3.0);
                double t67410 = 1.0/pow(rho_b[index],5.0/3.0);
                double t67411 = 1.0/sqrt(t67298);
                double t67412 = 1.0/t67311;
                double t67413 = 1.0/(t67308*t67308);
                double t67414 = b4p*t67301*t67410*(2.0/3.0);
                double t67415 = b2p*c*t67409*(1.0/3.0);
                double t67416 = b1p*c*t67411*t67409*(1.0/6.0);
                double t67417 = b3p*c*t67409*t67299*(1.0/2.0);
                double t67418 = t67414+t67415+t67416+t67417;
                double t67419 = t67412*t67314*t67413*t67418;
                double t67420 = ccaa1*gcaa*t67315*t67373;
                double t67421 = ccaa4*gamma_bb[index]*t67316*t67318*t67319*t67374*4.0;
                double t67422 = ccaa2*gamma_bb[index]*t67320*t67317*t67375*2.0;
                double t67423 = ccaa3*gcaa*t67321*t67316*t67317*t67376*3.0;
                double t67424 = t67420+t67421+t67422+t67423-ccaa1*gamma_bb[index]*t67320*t67317*t67378-ccaa2*t67320* \
                   t67316*t67317*t67382*t67396-ccaa4*t67318*t67319*t67328*t67393*t67388-ccaa3*gamma_bb[index]*gcaa*t67321* \
                   t67316*t67317*t67381*t67386;
                double t67425 = 1.0/t67340;
                double t67426 = 1.0/t67349;
                double t67427 = 1.0/t67352;
                double t67428 = 1.0/t67344;
                double t67429 = 1.0/(t67340*t67340);
                double t67430 = 1.0/(t67344*t67344);
                double t67431 = 1.0/(t67352*t67352);
                double t67432 = gx*t67315*3.0;
                double t67433 = gamma_bb[index]*t67320*t67337*6.0;
                double t67434 = gx*t67321*t67316*t67337*3.0;
                double t67435 = t67432+t67433+t67434;
                double t67436 = 1.0/(t67349*t67349);
                double t67437 = gx*t67315*4.0;
                double t67438 = gamma_bb[index]*t67320*t67337*1.2E1;
                double t67439 = gx*t67321*t67316*t67337*1.2E1;
                double t67440 = gamma_bb[index]*t67316*t67319*t67338*4.0;
                double t67441 = t67440+t67437+t67438+t67439;
                double t67442 = gx*t67315*2.0;
                double t67443 = gamma_bb[index]*t67320*t67337*2.0;
                double t67444 = t67442+t67443;
                double t67445 = gamma_bb[index]*gx*t67380*(1.6E1/3.0);
                double t67446 = t67316*t67337*t67377*(1.6E1/3.0);
                double t67447 = t67445+t67446;
                double t67448 = gamma_bb[index]*gx*t67380*8.0;
                double t67449 = gamma_bb[index]*gx*t67316*t67337*t67379*8.0;
                double t67450 = t67316*t67337*t67377*1.6E1;
                double t67451 = t67450+t67448+t67449;
                double t67452 = gamma_bb[index]*gx*t67380*(3.2E1/3.0);
                double t67453 = gamma_bb[index]*gx*t67316*t67337*t67379*3.2E1;
                double t67454 = t67316*t67337*t67377*3.2E1;
                double t67455 = t67328*t67338*t67387*(3.2E1/3.0);
                double t67456 = t67452+t67453+t67454+t67455;
                v_rho_b_gamma_bb_[index] = -t67424*(t67372+t67355*t67358*(t67371-c0p*t67312*t67314*2.0))+rho_b[index]* \
                   t67424*(-t67419+t67355*t67358*(t67419-(t67370*1.0/(t67364*t67364)*(b2f*c*t67409*(1.0/3.0)+b4f*t67301* \
                   t67410*(2.0/3.0)+b1f*c*t67411*t67409*(1.0/6.0)+b3f*c*t67409*t67299*(1.0/2.0)))/t67367+a1f*c*c0f*t67409* \
                   t67368*(2.0/3.0)-a1p*c*c0p*t67312*t67409*(2.0/3.0))+a1p*c*c0p*t67312*t67409*(2.0/3.0))-rho_b[index]* \
                   (t67372+t67355*t67358*(t67371-t67372))*(ccaa1*gcaa*t67380*t67373*(-8.0/3.0)-ccaa2*gamma_bb[index]* \
                   t67317*t67375*t67377*(3.2E1/3.0)+ccaa1*gamma_bb[index]*t67317*t67377*t67378*8.0+ccaa2*t67316*t67317* \
                   t67382*t67377*t67396*(1.6E1/3.0)+ccaa4*t67318*t67328*t67393*t67387*t67388*(3.2E1/3.0)+ccaa4*t67318* \
                   t67319*t67328*t67388*(gcaa*t67380*(3.2E1/3.0)+gamma_bb[index]*t67317*t67377*6.4E1+gamma_bb[index]* \
                   t67316*t67318*t67387*(1.28E2/3.0)+gcaa*t67316*t67317*t67379*9.6E1)-ccaa1*gcaa*1.0/(t67323*t67323*t67323) \
                   *t67316*t67317*t67379*(1.6E1/3.0)+ccaa2*t67320*t67316*t67317*t67382*(gcaa*t67380*(1.6E1/3.0)+gamma_bb[index]* \
                   t67317*t67377*(3.2E1/3.0))+ccaa2*gamma_bb[index]*t67320*t67317*t67382*t67399*2.0-ccaa4*gamma_bb[index]* \
                   t67316*t67318*t67374*t67387*(1.28E2/3.0)-ccaa3*gcaa*t67316*t67317*t67376*t67379*2.4E1+ccaa4*gamma_bb[index]* \
                   t67316*t67318*t67408*t67319*t67388*4.0+ccaa3*gcaa*t67321*t67403*t67316*t67317*t67381*3.0-ccaa4*1.0/ \
                   (t67333*t67333*t67333)*t67318*t67408*t67319*t67328*t67393*2.0-ccaa2*t67320*t67316*t67317*1.0/(t67336* \
                   t67336*t67336)*t67396*t67399*2.0+ccaa3*gamma_bb[index]*gcaa*t67321*t67316*t67317*t67381*(gcaa*t67380* \
                   8.0+gamma_bb[index]*t67317*t67377*3.2E1+gcaa*t67316*t67317*t67379*2.4E1)+ccaa3*gamma_bb[index]*gcaa* \
                   t67316*t67317*t67381*t67386*t67379*8.0-ccaa3*gamma_bb[index]*gcaa*t67321*t67403*t67316*t67317*1.0/ \
                   (t67327*t67327*t67327)*t67386*2.0)+c0*pow(rho_b[index],4.0/3.0)*(cx1*gx*t67380*t67425*(-8.0/3.0)+cx1* \
                   gamma_bb[index]*t67337*t67429*t67377*8.0-cx2*gamma_bb[index]*t67337*t67427*t67377*(3.2E1/3.0)+cx2* \
                   t67431*t67316*t67444*t67337*t67377*(1.6E1/3.0)+cx4*t67441*t67328*t67436*t67338*t67387*(3.2E1/3.0)+ \
                   cx4*t67319*t67328*t67436*t67338*(gx*t67380*(3.2E1/3.0)+gamma_bb[index]*t67337*t67377*6.4E1+gamma_bb[index]* \
                   t67316*t67338*t67387*(1.28E2/3.0)+gx*t67316*t67337*t67379*9.6E1)-cx1*gx*1.0/(t67340*t67340*t67340) \
                   *t67316*t67337*t67379*(1.6E1/3.0)+cx2*t67320*t67431*t67316*t67337*(gx*t67380*(1.6E1/3.0)+gamma_bb[index]* \
                   t67337*t67377*(3.2E1/3.0))+cx2*gamma_bb[index]*t67320*t67431*t67337*t67447*2.0-cx4*gamma_bb[index]* \
                   t67316*t67426*t67338*t67387*(1.28E2/3.0)-cx3*gx*t67316*t67337*t67428*t67379*2.4E1+cx4*gamma_bb[index]* \
                   t67316*t67319*t67436*t67338*t67456*4.0+cx3*gx*t67321*t67430*t67316*t67451*t67337*3.0-cx2*t67320*t67316* \
                   1.0/(t67352*t67352*t67352)*t67444*t67337*t67447*2.0-cx4*t67441*t67319*t67328*t67338*t67456*1.0/(t67349* \
                   t67349*t67349)*2.0+cx3*gamma_bb[index]*gx*t67321*t67430*t67316*t67337*(gx*t67380*8.0+gamma_bb[index]* \
                   t67337*t67377*3.2E1+gx*t67316*t67337*t67379*2.4E1)+cx3*gamma_bb[index]*gx*t67430*t67316*t67435*t67337* \
                   t67379*8.0-cx3*gamma_bb[index]*gx*t67321*t67316*t67451*1.0/(t67344*t67344*t67344)*t67435*t67337*2.0) \
                   +c0*pow(rho_b[index],1.0/3.0)*(cx1*gx*t67315*t67425-cx1*gamma_bb[index]*t67320*t67337*t67429+cx2*gamma_bb[index]* \
                   t67320*t67337*t67427*2.0-cx2*t67320*t67431*t67316*t67444*t67337-cx4*t67441*t67319*t67328*t67436*t67338+ \
                   cx4*gamma_bb[index]*t67316*t67426*t67319*t67338*4.0+cx3*gx*t67321*t67316*t67337*t67428*3.0-cx3*gamma_bb[index]* \
                   gx*t67321*t67430*t67316*t67435*t67337)*(4.0/3.0);
            } else {
                v_rho_b_gamma_bb_[index] = 0.0;
            } 

            //V_gamma_aa_gamma_aa
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t66405 = 1.0/pow(rho_a[index],1.0/3.0);
                double t66406 = c*t66405;
                double t66407 = sqrt(t66406);
                double t66408 = pow(t66406,3.0/2.0);
                double t66409 = c*c;
                double t66410 = 1.0/pow(rho_a[index],2.0/3.0);
                double t66411 = 1.0/c0p;
                double t66412 = b1p*t66407;
                double t66413 = b3p*t66408;
                double t66414 = b4p*t66410*t66409;
                double t66415 = b2p*c*t66405;
                double t66416 = t66412+t66413+t66414+t66415;
                double t66417 = 1.0/t66416;
                double t66418 = t66411*t66417*(1.0/2.0);
                double t66419 = t66418+1.0;
                double t66420 = log(t66419);
                double t66421 = a1p*c*t66405;
                double t66422 = t66421+1.0;
                double t66423 = pow(2.0,1.0/3.0);
                double t66424 = t66423*2.0;
                double t66425 = t66424-2.0;
                double t66426 = two_13*2.0;
                double t66427 = t66426-2.0;
                double t66428 = 1.0/t66427;
                double t66429 = 1.0/c0f;
                double t66430 = 1.0/pow(rho_b[index],1.0/3.0);
                double t66431 = c*t66430;
                double t66432 = sqrt(t66431);
                double t66433 = pow(t66431,3.0/2.0);
                double t66434 = 1.0/pow(rho_b[index],2.0/3.0);
                double t66435 = b1p*t66432;
                double t66436 = b3p*t66433;
                double t66437 = b4p*t66434*t66409;
                double t66438 = b2p*c*t66430;
                double t66439 = t66435+t66436+t66437+t66438;
                double t66440 = 1.0/t66439;
                double t66441 = t66411*t66440*(1.0/2.0);
                double t66442 = t66441+1.0;
                double t66443 = log(t66442);
                double t66444 = a1p*c*t66430;
                double t66445 = t66444+1.0;
                double t66446 = c0p*t66443*t66445*2.0;
                double t66447 = rho_a[index]+rho_b[index];
                double t66448 = 1.0/pow(t66447,1.0/3.0);
                double t66449 = c*t66448;
                double t66450 = sqrt(t66449);
                double t66451 = pow(t66449,3.0/2.0);
                double t66452 = 1.0/pow(t66447,2.0/3.0);
                double t66453 = b1p*t66450;
                double t66454 = b3p*t66451;
                double t66455 = b4p*t66452*t66409;
                double t66456 = b2p*c*t66448;
                double t66457 = t66453+t66454+t66455+t66456;
                double t66458 = 1.0/t66457;
                double t66459 = t66411*t66458*(1.0/2.0);
                double t66460 = t66459+1.0;
                double t66461 = log(t66460);
                double t66462 = a1p*c*t66448;
                double t66463 = t66462+1.0;
                double t66464 = c0p*t66461*t66463*2.0;
                double t66465 = rho_a[index]-rho_b[index];
                double t66466 = t66465*t66465;
                double t66467 = 1.0/t66447;
                double t66468 = t66465*t66467;
                double t66469 = 1.0/(t66447*t66447*t66447*t66447);
                double t66470 = t66466*t66466;
                double t66471 = t66468+1.0;
                double t66472 = pow(t66471,4.0/3.0);
                double t66473 = -t66468+1.0;
                double t66474 = pow(t66473,4.0/3.0);
                double t66475 = t66472+t66474-2.0;
                double t66476 = gcab*gcab;
                double t66477 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t66478 = 1.0/pow(rho_a[index],8.0/3.0);
                double t66479 = gamma_aa[index]*t66478*(1.0/2.0);
                double t66480 = 1.0/pow(rho_b[index],8.0/3.0);
                double t66481 = gamma_bb[index]*t66480*(1.0/2.0);
                double t66482 = t66481+t66479;
                double t66483 = gcab*t66482;
                double t66484 = t66483+1.0;
                double t66485 = t66482*t66482;
                double t66486 = t66476*t66485;
                double t66487 = gcab*t66482*2.0;
                double t66488 = t66486+t66487+1.0;
                double t66489 = t66476*t66476;
                double t66506 = gcab*t66478*2.0;
                double t66507 = t66482*t66476*t66478*6.0;
                double t66508 = gcab*t66476*t66485*t66478*6.0;
                double t66509 = t66482*t66485*t66478*t66489*2.0;
                double t66490 = t66506+t66507+t66508+t66509;
                double t66491 = t66485*t66485;
                double t66511 = gcab*t66478*(3.0/2.0);
                double t66512 = t66482*t66476*t66478*3.0;
                double t66513 = gcab*t66476*t66485*t66478*(3.0/2.0);
                double t66492 = t66511+t66512+t66513;
                double t66493 = t66476*t66485*3.0;
                double t66494 = gcab*t66482*t66476*t66485;
                double t66495 = gcab*t66482*3.0;
                double t66496 = t66493+t66494+t66495+1.0;
                double t66503 = gcab*t66478;
                double t66504 = t66482*t66476*t66478;
                double t66497 = t66503+t66504;
                double t66498 = t66476*t66485*6.0;
                double t66499 = gcab*t66482*t66476*t66485*4.0;
                double t66500 = t66491*t66489;
                double t66501 = gcab*t66482*4.0;
                double t66502 = t66500+t66501+t66498+t66499+1.0;
                double t66505 = 1.0/(t66488*t66488);
                double t66510 = 1.0/(t66502*t66502);
                double t66514 = 1.0/(t66496*t66496);
                double t66515 = gx*gx;
                double t66516 = gamma_aa[index]*gamma_aa[index];
                double t66517 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t66518 = t66515*t66515;
                double t66519 = 1.0/pow(rho_a[index],3.2E1/3.0);
                double t66520 = gamma_aa[index]*gx*t66478;
                double t66521 = t66520+1.0;
                double t66522 = gamma_aa[index]*gx*t66478*2.0;
                double t66523 = t66515*t66516*t66477;
                double t66524 = t66522+t66523+1.0;
                double t66525 = gamma_aa[index]*gx*t66478*3.0;
                double t66526 = gamma_aa[index]*gx*t66515*t66516*t66517;
                double t66527 = t66515*t66516*t66477*3.0;
                double t66528 = t66525+t66526+t66527+1.0;
                double t66529 = t66516*t66516;
                double t66545 = gx*t66478*4.0;
                double t66546 = gamma_aa[index]*t66515*t66477*1.2E1;
                double t66547 = gx*t66515*t66516*t66517*1.2E1;
                double t66548 = gamma_aa[index]*t66516*t66518*t66519*4.0;
                double t66530 = t66545+t66546+t66547+t66548;
                double t66531 = gamma_aa[index]*gx*t66478*4.0;
                double t66532 = gamma_aa[index]*gx*t66515*t66516*t66517*4.0;
                double t66533 = t66515*t66516*t66477*6.0;
                double t66534 = t66518*t66519*t66529;
                double t66535 = t66531+t66532+t66533+t66534+1.0;
                double t66538 = gx*t66478*2.0;
                double t66539 = gamma_aa[index]*t66515*t66477*2.0;
                double t66536 = t66538+t66539;
                double t66537 = 1.0/(t66528*t66528);
                double t66540 = 1.0/(t66524*t66524);
                double t66541 = gx*t66478*3.0;
                double t66542 = gamma_aa[index]*t66515*t66477*6.0;
                double t66543 = gx*t66515*t66516*t66517*3.0;
                double t66544 = t66541+t66542+t66543;
                double t66549 = 1.0/(t66535*t66535);
                double t66550 = b1f*t66407;
                double t66551 = b3f*t66408;
                double t66552 = b4f*t66410*t66409;
                double t66553 = b2f*c*t66405;
                double t66554 = t66550+t66551+t66552+t66553;
                double t66555 = 1.0/t66554;
                double t66556 = t66429*t66555*(1.0/2.0);
                double t66557 = t66556+1.0;
                double t66558 = log(t66557);
                double t66559 = a1f*c*t66405;
                double t66560 = t66559+1.0;
                double t66561 = c0f*t66560*t66558*2.0;
                double t66562 = c0p*t66420*t66422*2.0;
                double t66563 = gcaa*gcaa;
                double t66564 = t66563*t66563;
                double t66565 = gamma_aa[index]*gcaa*t66478;
                double t66566 = t66565+1.0;
                double t66567 = gamma_aa[index]*gcaa*t66478*2.0;
                double t66568 = t66516*t66563*t66477;
                double t66569 = t66567+t66568+1.0;
                double t66570 = gamma_aa[index]*gcaa*t66478*3.0;
                double t66571 = gamma_aa[index]*gcaa*t66516*t66517*t66563;
                double t66572 = t66516*t66563*t66477*3.0;
                double t66573 = t66570+t66571+t66572+1.0;
                double t66589 = gcaa*t66478*4.0;
                double t66590 = gamma_aa[index]*t66563*t66477*1.2E1;
                double t66591 = gcaa*t66516*t66517*t66563*1.2E1;
                double t66592 = gamma_aa[index]*t66516*t66519*t66564*4.0;
                double t66574 = t66590+t66591+t66592+t66589;
                double t66575 = gamma_aa[index]*gcaa*t66478*4.0;
                double t66576 = gamma_aa[index]*gcaa*t66516*t66517*t66563*4.0;
                double t66577 = t66516*t66563*t66477*6.0;
                double t66578 = t66519*t66564*t66529;
                double t66579 = t66575+t66576+t66577+t66578+1.0;
                double t66582 = gcaa*t66478*2.0;
                double t66583 = gamma_aa[index]*t66563*t66477*2.0;
                double t66580 = t66582+t66583;
                double t66581 = 1.0/(t66573*t66573);
                double t66584 = 1.0/(t66569*t66569);
                double t66585 = gcaa*t66478*3.0;
                double t66586 = gamma_aa[index]*t66563*t66477*6.0;
                double t66587 = gcaa*t66516*t66517*t66563*3.0;
                double t66588 = t66585+t66586+t66587;
                double t66593 = 1.0/(t66579*t66579);
                v_gamma_aa_gamma_aa_[index] = -(rho_a[index]*(t66562+t66425*t66428*(t66561-c0p*t66420*t66422*2.0) \
                   )+rho_b[index]*(t66446-t66425*t66428*(t66446-c0f*log((t66429*(1.0/2.0))/(b1f*t66432+b3f*t66433+b2f* \
                   c*t66430+b4f*t66434*t66409)+1.0)*(a1f*c*t66430+1.0)*2.0))-t66447*(t66464-t66470*t66428*t66475*t66469* \
                   (t66464-c0f*log((t66429*(1.0/2.0))/(b1f*t66450+b3f*t66451+b2f*c*t66448+b4f*t66452*t66409)+1.0)*(a1f* \
                   c*t66448+1.0)*2.0)+(Aa*t66428*t66475*log((1.0/2.0)/(Aa*(b1a*t66450+b3a*t66451+b2a*c*t66448+b4a*t66452* \
                   t66409))+1.0)*(t66470*t66469-1.0)*(a1a*c*t66448+1.0)*2.0)/d2fz0))*(ccab1*1.0/(t66484*t66484)*t66476* \
                   t66477*(1.0/2.0)-(ccab2*t66476*t66477*(1.0/2.0))/t66488-ccab4*1.0/(t66502*t66502*t66502)*(t66490*t66490) \
                   *t66491*t66489*2.0-ccab2*t66476*t66485*1.0/(t66488*t66488*t66488)*(t66497*t66497)*2.0+ccab2*t66505* \
                   t66485*t66477*t66489*(1.0/2.0)+ccab4*t66510*t66491*t66489*(t66476*t66477*3.0+t66485*t66477*t66489* \
                   3.0+gcab*t66482*t66476*t66477*6.0)-(ccab4*t66485*t66477*t66489*3.0)/t66502+ccab2*t66505*t66482*t66476* \
                   t66478*t66497*2.0-ccab1*gcab*t66482*1.0/(t66484*t66484*t66484)*t66476*t66477*(1.0/2.0)-(ccab3*gcab* \
                   t66482*t66476*t66477*(3.0/2.0))/t66496-ccab3*gcab*t66482*(t66492*t66492)*t66476*t66485*1.0/(t66496* \
                   t66496*t66496)*2.0+ccab3*gcab*t66514*t66492*t66476*t66485*t66478*3.0+ccab4*t66510*t66490*t66482*t66485* \
                   t66478*t66489*4.0+ccab3*gcab*t66514*t66482*t66476*t66485*(t66476*t66477*(3.0/2.0)+gcab*t66482*t66476* \
                   t66477*(3.0/2.0)))+rho_a[index]*(t66562+t66425*t66428*(t66561-t66562))*(ccaa1*t66563*1.0/(t66566*t66566) \
                   *t66477*2.0-(ccaa2*t66563*t66477*2.0)/t66569+ccaa2*t66516*t66519*t66564*t66584*2.0-(ccaa4*t66516*t66519* \
                   t66564*1.2E1)/t66579+ccaa4*t66519*t66564*t66529*t66593*(t66563*t66477*1.2E1+t66516*t66519*t66564*1.2E1+ \
                   gamma_aa[index]*gcaa*t66517*t66563*2.4E1)-(ccaa3*gamma_aa[index]*gcaa*t66517*t66563*6.0)/t66573-ccaa1* \
                   gamma_aa[index]*gcaa*t66517*t66563*1.0/(t66566*t66566*t66566)*2.0-ccaa2*t66516*(t66580*t66580)*t66563* \
                   t66477*1.0/(t66569*t66569*t66569)*2.0-ccaa4*t66519*t66564*t66529*(t66574*t66574)*1.0/(t66579*t66579* \
                   t66579)*2.0+ccaa2*gamma_aa[index]*t66580*t66563*t66584*t66477*4.0+ccaa4*gamma_aa[index]*t66516*t66519* \
                   t66564*t66574*t66593*8.0+ccaa3*gcaa*t66516*t66517*t66563*t66581*t66588*6.0+ccaa3*gamma_aa[index]*gcaa* \
                   t66516*t66517*t66563*t66581*(t66563*t66477*6.0+gamma_aa[index]*gcaa*t66517*t66563*6.0)-ccaa3*gamma_aa[index]* \
                   gcaa*t66516*t66517*t66563*1.0/(t66573*t66573*t66573)*(t66588*t66588)*2.0)-c0*pow(rho_a[index],4.0/ \
                   3.0)*(cx1*1.0/(t66521*t66521)*t66515*t66477*2.0-(cx2*t66515*t66477*2.0)/t66524+cx2*t66540*t66516*t66518* \
                   t66519*2.0-(cx4*t66516*t66518*t66519*1.2E1)/t66535+cx4*t66518*t66519*t66529*t66549*(t66515*t66477* \
                   1.2E1+t66516*t66518*t66519*1.2E1+gamma_aa[index]*gx*t66515*t66517*2.4E1)-cx1*gamma_aa[index]*gx*1.0/ \
                   (t66521*t66521*t66521)*t66515*t66517*2.0-(cx3*gamma_aa[index]*gx*t66515*t66517*6.0)/t66528-cx2*t66515* \
                   1.0/(t66524*t66524*t66524)*t66516*(t66536*t66536)*t66477*2.0-cx4*(t66530*t66530)*1.0/(t66535*t66535* \
                   t66535)*t66518*t66519*t66529*2.0+cx2*gamma_aa[index]*t66540*t66515*t66536*t66477*4.0+cx4*gamma_aa[index]* \
                   t66530*t66516*t66518*t66519*t66549*8.0+cx3*gx*t66515*t66516*t66517*t66544*t66537*6.0+cx3*gamma_aa[index]* \
                   gx*t66515*t66516*t66517*t66537*(t66515*t66477*6.0+gamma_aa[index]*gx*t66515*t66517*6.0)-cx3*gamma_aa[index]* \
                   gx*t66515*t66516*t66517*(t66544*t66544)*1.0/(t66528*t66528*t66528)*2.0);
            } else if (rho_a[index] > cutoff_) {
                double t68097 = gx*gx;
                double t68098 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t68099 = 1.0/pow(rho_a[index],8.0/3.0);
                double t68100 = gamma_aa[index]*gamma_aa[index];
                double t68101 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t68102 = t68097*t68097;
                double t68103 = 1.0/pow(rho_a[index],3.2E1/3.0);
                double t68104 = gamma_aa[index]*gx*t68099;
                double t68105 = t68104+1.0;
                double t68106 = gamma_aa[index]*gx*t68099*2.0;
                double t68107 = t68100*t68097*t68098;
                double t68108 = t68106+t68107+1.0;
                double t68109 = gamma_aa[index]*gx*t68099*3.0;
                double t68110 = gamma_aa[index]*gx*t68100*t68101*t68097;
                double t68111 = t68100*t68097*t68098*3.0;
                double t68112 = t68110+t68111+t68109+1.0;
                double t68113 = t68100*t68100;
                double t68129 = gx*t68099*4.0;
                double t68130 = gamma_aa[index]*t68097*t68098*1.2E1;
                double t68131 = gx*t68100*t68101*t68097*1.2E1;
                double t68132 = gamma_aa[index]*t68100*t68102*t68103*4.0;
                double t68114 = t68130+t68131+t68132+t68129;
                double t68115 = gamma_aa[index]*gx*t68099*4.0;
                double t68116 = gamma_aa[index]*gx*t68100*t68101*t68097*4.0;
                double t68117 = t68100*t68097*t68098*6.0;
                double t68118 = t68102*t68103*t68113;
                double t68119 = t68115+t68116+t68117+t68118+1.0;
                double t68122 = gx*t68099*2.0;
                double t68123 = gamma_aa[index]*t68097*t68098*2.0;
                double t68120 = t68122+t68123;
                double t68121 = 1.0/(t68112*t68112);
                double t68124 = 1.0/(t68108*t68108);
                double t68125 = gx*t68099*3.0;
                double t68126 = gamma_aa[index]*t68097*t68098*6.0;
                double t68127 = gx*t68100*t68101*t68097*3.0;
                double t68128 = t68125+t68126+t68127;
                double t68133 = 1.0/(t68119*t68119);
                double t68134 = 1.0/pow(rho_a[index],1.0/3.0);
                double t68135 = c*t68134;
                double t68136 = sqrt(t68135);
                double t68137 = pow(t68135,3.0/2.0);
                double t68138 = c*c;
                double t68139 = 1.0/pow(rho_a[index],2.0/3.0);
                double t68140 = 1.0/c0p;
                double t68141 = b1p*t68136;
                double t68142 = b3p*t68137;
                double t68143 = b4p*t68138*t68139;
                double t68144 = b2p*c*t68134;
                double t68145 = t68141+t68142+t68143+t68144;
                double t68146 = 1.0/t68145;
                double t68147 = t68140*t68146*(1.0/2.0);
                double t68148 = t68147+1.0;
                double t68149 = log(t68148);
                double t68150 = a1p*c*t68134;
                double t68151 = t68150+1.0;
                double t68152 = gcaa*gcaa;
                double t68153 = t68152*t68152;
                double t68154 = gamma_aa[index]*gcaa*t68099;
                double t68155 = t68154+1.0;
                double t68156 = gamma_aa[index]*gcaa*t68099*2.0;
                double t68157 = t68100*t68152*t68098;
                double t68158 = t68156+t68157+1.0;
                double t68159 = gamma_aa[index]*gcaa*t68099*3.0;
                double t68160 = gamma_aa[index]*gcaa*t68100*t68101*t68152;
                double t68161 = t68100*t68152*t68098*3.0;
                double t68162 = t68160+t68161+t68159+1.0;
                double t68178 = gcaa*t68099*4.0;
                double t68179 = gamma_aa[index]*t68152*t68098*1.2E1;
                double t68180 = gcaa*t68100*t68101*t68152*1.2E1;
                double t68181 = gamma_aa[index]*t68100*t68103*t68153*4.0;
                double t68163 = t68180+t68181+t68178+t68179;
                double t68164 = gamma_aa[index]*gcaa*t68099*4.0;
                double t68165 = gamma_aa[index]*gcaa*t68100*t68101*t68152*4.0;
                double t68166 = t68100*t68152*t68098*6.0;
                double t68167 = t68103*t68113*t68153;
                double t68168 = t68164+t68165+t68166+t68167+1.0;
                double t68171 = gcaa*t68099*2.0;
                double t68172 = gamma_aa[index]*t68152*t68098*2.0;
                double t68169 = t68171+t68172;
                double t68170 = 1.0/(t68162*t68162);
                double t68173 = 1.0/(t68158*t68158);
                double t68174 = gcaa*t68099*3.0;
                double t68175 = gamma_aa[index]*t68152*t68098*6.0;
                double t68176 = gcaa*t68100*t68101*t68152*3.0;
                double t68177 = t68174+t68175+t68176;
                double t68182 = 1.0/(t68168*t68168);
                v_gamma_aa_gamma_aa_[index] = -c0*pow(rho_a[index],4.0/3.0)*(cx1*1.0/(t68105*t68105)*t68097*t68098* \
                   2.0-(cx2*t68097*t68098*2.0)/t68108+cx2*t68100*t68102*t68103*t68124*2.0-(cx4*t68100*t68102*t68103*1.2E1) \
                   /t68119+cx4*t68102*t68103*t68113*t68133*(t68097*t68098*1.2E1+t68100*t68102*t68103*1.2E1+gamma_aa[index]* \
                   gx*t68101*t68097*2.4E1)-cx1*gamma_aa[index]*gx*t68101*1.0/(t68105*t68105*t68105)*t68097*2.0-(cx3*gamma_aa[index]* \
                   gx*t68101*t68097*6.0)/t68112-cx2*t68100*(t68120*t68120)*1.0/(t68108*t68108*t68108)*t68097*t68098*2.0- \
                   cx4*t68102*t68103*t68113*(t68114*t68114)*1.0/(t68119*t68119*t68119)*2.0+cx2*gamma_aa[index]*t68120* \
                   t68124*t68097*t68098*4.0+cx4*gamma_aa[index]*t68100*t68102*t68103*t68114*t68133*8.0+cx3*gx*t68100* \
                   t68101*t68121*t68128*t68097*6.0+cx3*gamma_aa[index]*gx*t68100*t68101*t68121*t68097*(t68097*t68098* \
                   6.0+gamma_aa[index]*gx*t68101*t68097*6.0)-cx3*gamma_aa[index]*gx*t68100*t68101*1.0/(t68112*t68112* \
                   t68112)*(t68128*t68128)*t68097*2.0)+rho_a[index]*(((pow(2.0,1.0/3.0)*2.0-2.0)*(c0f*log((1.0/2.0)/(c0f* \
                   (b1f*t68136+b3f*t68137+b2f*c*t68134+b4f*t68138*t68139))+1.0)*(a1f*c*t68134+1.0)*2.0-c0p*t68151*t68149* \
                   2.0))/(two_13*2.0-2.0)+c0p*t68151*t68149*2.0)*(ccaa1*t68152*1.0/(t68155*t68155)*t68098*2.0-(ccaa2* \
                   t68152*t68098*2.0)/t68158+ccaa2*t68100*t68103*t68153*t68173*2.0-(ccaa4*t68100*t68103*t68153*1.2E1) \
                   /t68168+ccaa4*t68103*t68113*t68153*t68182*(t68152*t68098*1.2E1+t68100*t68103*t68153*1.2E1+gamma_aa[index]* \
                   gcaa*t68101*t68152*2.4E1)-(ccaa3*gamma_aa[index]*gcaa*t68101*t68152*6.0)/t68162-ccaa1*gamma_aa[index]* \
                   gcaa*t68101*t68152*1.0/(t68155*t68155*t68155)*2.0-ccaa4*t68103*t68113*t68153*(t68163*t68163)*1.0/(t68168* \
                   t68168*t68168)*2.0-ccaa2*t68100*t68152*1.0/(t68158*t68158*t68158)*(t68169*t68169)*t68098*2.0+ccaa2* \
                   gamma_aa[index]*t68152*t68173*t68169*t68098*4.0+ccaa4*gamma_aa[index]*t68100*t68103*t68153*t68163* \
                   t68182*8.0+ccaa3*gcaa*t68100*t68101*t68152*t68170*t68177*6.0+ccaa3*gamma_aa[index]*gcaa*t68100*t68101* \
                   t68152*t68170*(t68152*t68098*6.0+gamma_aa[index]*gcaa*t68101*t68152*6.0)-ccaa3*gamma_aa[index]*gcaa* \
                   t68100*t68101*t68152*1.0/(t68162*t68162*t68162)*(t68177*t68177)*2.0);
            } else if (rho_b[index] > cutoff_) {
                v_gamma_aa_gamma_aa_[index] = 0.0;
            } else {
                v_gamma_aa_gamma_aa_[index] = 0.0;
            } 

            //V_gamma_aa_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_aa_gamma_ab_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_aa_gamma_ab_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_aa_gamma_ab_[index] = 0.0;
            } else {
                v_gamma_aa_gamma_ab_[index] = 0.0;
            } 

            //V_gamma_aa_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t66596 = 1.0/pow(rho_a[index],1.0/3.0);
                double t66597 = c*t66596;
                double t66598 = sqrt(t66597);
                double t66599 = pow(t66597,3.0/2.0);
                double t66600 = c*c;
                double t66601 = 1.0/pow(rho_a[index],2.0/3.0);
                double t66602 = 1.0/c0p;
                double t66603 = b1p*t66598;
                double t66604 = b3p*t66599;
                double t66605 = b4p*t66600*t66601;
                double t66606 = b2p*c*t66596;
                double t66607 = t66603+t66604+t66605+t66606;
                double t66608 = 1.0/t66607;
                double t66609 = t66602*t66608*(1.0/2.0);
                double t66610 = t66609+1.0;
                double t66611 = log(t66610);
                double t66612 = a1p*c*t66596;
                double t66613 = t66612+1.0;
                double t66614 = pow(2.0,1.0/3.0);
                double t66615 = t66614*2.0;
                double t66616 = t66615-2.0;
                double t66617 = two_13*2.0;
                double t66618 = t66617-2.0;
                double t66619 = 1.0/t66618;
                double t66620 = 1.0/c0f;
                double t66621 = 1.0/pow(rho_b[index],1.0/3.0);
                double t66622 = c*t66621;
                double t66623 = sqrt(t66622);
                double t66624 = pow(t66622,3.0/2.0);
                double t66625 = 1.0/pow(rho_b[index],2.0/3.0);
                double t66626 = b1p*t66623;
                double t66627 = b3p*t66624;
                double t66628 = b4p*t66600*t66625;
                double t66629 = b2p*c*t66621;
                double t66630 = t66626+t66627+t66628+t66629;
                double t66631 = 1.0/t66630;
                double t66632 = t66602*t66631*(1.0/2.0);
                double t66633 = t66632+1.0;
                double t66634 = log(t66633);
                double t66635 = a1p*c*t66621;
                double t66636 = t66635+1.0;
                double t66637 = c0p*t66634*t66636*2.0;
                double t66638 = rho_a[index]+rho_b[index];
                double t66639 = 1.0/pow(t66638,1.0/3.0);
                double t66640 = c*t66639;
                double t66641 = sqrt(t66640);
                double t66642 = pow(t66640,3.0/2.0);
                double t66643 = 1.0/pow(t66638,2.0/3.0);
                double t66644 = b1p*t66641;
                double t66645 = b3p*t66642;
                double t66646 = b4p*t66600*t66643;
                double t66647 = b2p*c*t66639;
                double t66648 = t66644+t66645+t66646+t66647;
                double t66649 = 1.0/t66648;
                double t66650 = t66602*t66649*(1.0/2.0);
                double t66651 = t66650+1.0;
                double t66652 = log(t66651);
                double t66653 = a1p*c*t66639;
                double t66654 = t66653+1.0;
                double t66655 = c0p*t66652*t66654*2.0;
                double t66656 = rho_a[index]-rho_b[index];
                double t66657 = t66656*t66656;
                double t66658 = 1.0/t66638;
                double t66659 = t66656*t66658;
                double t66660 = 1.0/(t66638*t66638*t66638*t66638);
                double t66661 = t66657*t66657;
                double t66662 = t66659+1.0;
                double t66663 = pow(t66662,4.0/3.0);
                double t66664 = -t66659+1.0;
                double t66665 = pow(t66664,4.0/3.0);
                double t66666 = t66663+t66665-2.0;
                double t66667 = gcab*gcab;
                double t66670 = 1.0/pow(rho_a[index],8.0/3.0);
                double t66671 = 1.0/pow(rho_b[index],8.0/3.0);
                double t66672 = gamma_aa[index]*t66670*(1.0/2.0);
                double t66673 = gamma_bb[index]*t66671*(1.0/2.0);
                double t66668 = t66672+t66673;
                double t66669 = t66668*t66668;
                double t66674 = t66667*t66667;
                double t66675 = t66669*t66669;
                double t66676 = t66667*t66669*3.0;
                double t66677 = gcab*t66667*t66668*t66669;
                double t66678 = gcab*t66668*3.0;
                double t66679 = t66676+t66677+t66678+1.0;
                double t66680 = t66667*t66669;
                double t66681 = gcab*t66668*2.0;
                double t66682 = t66680+t66681+1.0;
                double t66683 = t66667*t66669*6.0;
                double t66684 = gcab*t66667*t66668*t66669*4.0;
                double t66685 = t66674*t66675;
                double t66686 = gcab*t66668*4.0;
                double t66687 = t66683+t66684+t66685+t66686+1.0;
                double t66688 = 1.0/(t66682*t66682);
                double t66689 = gcab*t66670;
                double t66690 = t66670*t66667*t66668;
                double t66691 = t66690+t66689;
                double t66692 = gcab*t66671;
                double t66693 = t66671*t66667*t66668;
                double t66694 = t66692+t66693;
                double t66695 = gcab*t66668;
                double t66696 = t66695+1.0;
                double t66697 = gcab*t66670*2.0;
                double t66698 = t66670*t66667*t66668*6.0;
                double t66699 = gcab*t66670*t66667*t66669*6.0;
                double t66700 = t66670*t66674*t66668*t66669*2.0;
                double t66701 = t66700+t66697+t66698+t66699;
                double t66702 = 1.0/(t66687*t66687);
                double t66703 = gcab*t66671*2.0;
                double t66704 = t66671*t66667*t66668*6.0;
                double t66705 = gcab*t66671*t66667*t66669*6.0;
                double t66706 = t66671*t66674*t66668*t66669*2.0;
                double t66707 = t66703+t66704+t66705+t66706;
                double t66708 = gcab*t66670*(3.0/2.0);
                double t66709 = t66670*t66667*t66668*3.0;
                double t66710 = gcab*t66670*t66667*t66669*(3.0/2.0);
                double t66711 = t66710+t66708+t66709;
                double t66712 = 1.0/(t66679*t66679);
                double t66713 = gcab*t66671*(3.0/2.0);
                double t66714 = t66671*t66667*t66668*3.0;
                double t66715 = gcab*t66671*t66667*t66669*(3.0/2.0);
                double t66716 = t66713+t66714+t66715;
                v_gamma_aa_gamma_bb_[index] = (-rho_b[index]*(t66637-t66616*t66619*(t66637-c0f*log((t66620*(1.0/2.0) \
                   )/(b1f*t66623+b3f*t66624+b2f*c*t66621+b4f*t66600*t66625)+1.0)*(a1f*c*t66621+1.0)*2.0))+t66638*(t66655- \
                   t66660*t66661*t66619*t66666*(t66655-c0f*log((t66620*(1.0/2.0))/(b1f*t66641+b3f*t66642+b2f*c*t66639+ \
                   b4f*t66600*t66643)+1.0)*(a1f*c*t66639+1.0)*2.0)+(Aa*t66619*t66666*log((1.0/2.0)/(Aa*(b1a*t66641+b3a* \
                   t66642+b2a*c*t66639+b4a*t66600*t66643))+1.0)*(t66660*t66661-1.0)*(a1a*c*t66639+1.0)*2.0)/d2fz0)+rho_a[index]* \
                   (t66616*t66619*(c0p*t66611*t66613*2.0-c0f*log((t66620*(1.0/2.0))/(b1f*t66598+b3f*t66599+b2f*c*t66596+ \
                   b4f*t66600*t66601)+1.0)*(a1f*c*t66596+1.0)*2.0)-c0p*t66611*t66613*2.0))*(ccab4*t66702*t66674*t66675* \
                   (t66670*t66671*t66667*3.0+t66670*t66671*t66674*t66669*3.0+gcab*t66670*t66671*t66667*t66668*6.0)-(ccab2* \
                   t66670*t66671*t66667*(1.0/2.0))/t66682+ccab1*t66670*t66671*t66667*1.0/(t66696*t66696)*(1.0/2.0)+ccab2* \
                   t66670*t66671*t66674*t66669*t66688*(1.0/2.0)+ccab2*t66671*t66691*t66667*t66668*t66688+ccab2*t66670* \
                   t66667*t66694*t66668*t66688-ccab4*t66701*t66707*t66674*t66675*1.0/(t66687*t66687*t66687)*2.0-(ccab4* \
                   t66670*t66671*t66674*t66669*3.0)/t66687-ccab2*1.0/(t66682*t66682*t66682)*t66691*t66667*t66694*t66669* \
                   2.0+ccab3*gcab*t66711*t66712*t66671*t66667*t66669*(3.0/2.0)+ccab3*gcab*t66712*t66670*t66716*t66667* \
                   t66669*(3.0/2.0)+ccab4*t66701*t66702*t66671*t66674*t66668*t66669*2.0+ccab4*t66702*t66670*t66707*t66674* \
                   t66668*t66669*2.0+ccab3*gcab*t66712*t66667*t66668*t66669*(t66670*t66671*t66667*(3.0/2.0)+gcab*t66670* \
                   t66671*t66667*t66668*(3.0/2.0))-ccab1*gcab*t66670*t66671*t66667*t66668*1.0/(t66696*t66696*t66696)* \
                   (1.0/2.0)-(ccab3*gcab*t66670*t66671*t66667*t66668*(3.0/2.0))/t66679-ccab3*gcab*t66711*t66716*t66667* \
                   t66668*t66669*1.0/(t66679*t66679*t66679)*2.0);
            } else if (rho_a[index] > cutoff_) {
                v_gamma_aa_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_aa_gamma_bb_[index] = 0.0;
            } else {
                v_gamma_aa_gamma_bb_[index] = 0.0;
            } 

            //V_gamma_ab_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_ab_gamma_ab_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_ab_gamma_ab_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_ab_gamma_ab_[index] = 0.0;
            } else {
                v_gamma_ab_gamma_ab_[index] = 0.0;
            } 

            //V_gamma_ab_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_ab_gamma_bb_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_ab_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_ab_gamma_bb_[index] = 0.0;
            } else {
                v_gamma_ab_gamma_bb_[index] = 0.0;
            } 

            //V_gamma_bb_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t66720 = 1.0/pow(rho_a[index],1.0/3.0);
                double t66721 = c*t66720;
                double t66722 = sqrt(t66721);
                double t66723 = pow(t66721,3.0/2.0);
                double t66724 = c*c;
                double t66725 = 1.0/pow(rho_a[index],2.0/3.0);
                double t66726 = 1.0/c0p;
                double t66727 = b1p*t66722;
                double t66728 = b3p*t66723;
                double t66729 = b4p*t66724*t66725;
                double t66730 = b2p*c*t66720;
                double t66731 = t66730+t66727+t66728+t66729;
                double t66732 = 1.0/t66731;
                double t66733 = t66732*t66726*(1.0/2.0);
                double t66734 = t66733+1.0;
                double t66735 = log(t66734);
                double t66736 = a1p*c*t66720;
                double t66737 = t66736+1.0;
                double t66738 = pow(2.0,1.0/3.0);
                double t66739 = t66738*2.0;
                double t66740 = t66739-2.0;
                double t66741 = two_13*2.0;
                double t66742 = t66741-2.0;
                double t66743 = 1.0/t66742;
                double t66744 = 1.0/c0f;
                double t66745 = 1.0/pow(rho_b[index],1.0/3.0);
                double t66746 = c*t66745;
                double t66747 = sqrt(t66746);
                double t66748 = pow(t66746,3.0/2.0);
                double t66749 = 1.0/pow(rho_b[index],2.0/3.0);
                double t66750 = b1p*t66747;
                double t66751 = b3p*t66748;
                double t66752 = b4p*t66724*t66749;
                double t66753 = b2p*c*t66745;
                double t66754 = t66750+t66751+t66752+t66753;
                double t66755 = 1.0/t66754;
                double t66756 = t66726*t66755*(1.0/2.0);
                double t66757 = t66756+1.0;
                double t66758 = log(t66757);
                double t66759 = a1p*c*t66745;
                double t66760 = t66759+1.0;
                double t66761 = c0p*t66760*t66758*2.0;
                double t66762 = rho_a[index]+rho_b[index];
                double t66763 = 1.0/pow(t66762,1.0/3.0);
                double t66764 = c*t66763;
                double t66765 = sqrt(t66764);
                double t66766 = pow(t66764,3.0/2.0);
                double t66767 = 1.0/pow(t66762,2.0/3.0);
                double t66768 = b1p*t66765;
                double t66769 = b3p*t66766;
                double t66770 = b4p*t66724*t66767;
                double t66771 = b2p*c*t66763;
                double t66772 = t66770+t66771+t66768+t66769;
                double t66773 = 1.0/t66772;
                double t66774 = t66726*t66773*(1.0/2.0);
                double t66775 = t66774+1.0;
                double t66776 = log(t66775);
                double t66777 = a1p*c*t66763;
                double t66778 = t66777+1.0;
                double t66779 = c0p*t66776*t66778*2.0;
                double t66780 = rho_a[index]-rho_b[index];
                double t66781 = t66780*t66780;
                double t66782 = 1.0/t66762;
                double t66783 = t66780*t66782;
                double t66784 = 1.0/(t66762*t66762*t66762*t66762);
                double t66785 = t66781*t66781;
                double t66786 = t66783+1.0;
                double t66787 = pow(t66786,4.0/3.0);
                double t66788 = -t66783+1.0;
                double t66789 = pow(t66788,4.0/3.0);
                double t66790 = t66787+t66789-2.0;
                double t66791 = gcab*gcab;
                double t66792 = 1.0/pow(rho_b[index],1.6E1/3.0);
                double t66793 = 1.0/pow(rho_a[index],8.0/3.0);
                double t66794 = gamma_aa[index]*t66793*(1.0/2.0);
                double t66795 = 1.0/pow(rho_b[index],8.0/3.0);
                double t66796 = gamma_bb[index]*t66795*(1.0/2.0);
                double t66797 = t66794+t66796;
                double t66798 = gcab*t66797;
                double t66799 = t66798+1.0;
                double t66800 = t66797*t66797;
                double t66801 = t66800*t66791;
                double t66802 = gcab*t66797*2.0;
                double t66803 = t66801+t66802+1.0;
                double t66804 = t66791*t66791;
                double t66821 = gcab*t66795*2.0;
                double t66822 = t66791*t66795*t66797*6.0;
                double t66823 = gcab*t66800*t66791*t66795*6.0;
                double t66824 = t66800*t66804*t66795*t66797*2.0;
                double t66805 = t66821+t66822+t66823+t66824;
                double t66806 = t66800*t66800;
                double t66826 = gcab*t66795*(3.0/2.0);
                double t66827 = t66791*t66795*t66797*3.0;
                double t66828 = gcab*t66800*t66791*t66795*(3.0/2.0);
                double t66807 = t66826+t66827+t66828;
                double t66808 = t66800*t66791*3.0;
                double t66809 = gcab*t66800*t66791*t66797;
                double t66810 = gcab*t66797*3.0;
                double t66811 = t66810+t66808+t66809+1.0;
                double t66818 = gcab*t66795;
                double t66819 = t66791*t66795*t66797;
                double t66812 = t66818+t66819;
                double t66813 = t66800*t66791*6.0;
                double t66814 = gcab*t66800*t66791*t66797*4.0;
                double t66815 = t66804*t66806;
                double t66816 = gcab*t66797*4.0;
                double t66817 = t66813+t66814+t66815+t66816+1.0;
                double t66820 = 1.0/(t66803*t66803);
                double t66825 = 1.0/(t66817*t66817);
                double t66829 = 1.0/(t66811*t66811);
                double t66830 = c0p*t66735*t66737*2.0;
                double t66831 = gx*gx;
                double t66832 = gamma_bb[index]*gamma_bb[index];
                double t66833 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]);
                double t66834 = t66831*t66831;
                double t66835 = 1.0/pow(rho_b[index],3.2E1/3.0);
                double t66836 = gamma_bb[index]*gx*t66795;
                double t66837 = t66836+1.0;
                double t66838 = gamma_bb[index]*gx*t66795*2.0;
                double t66839 = t66831*t66832*t66792;
                double t66840 = t66838+t66839+1.0;
                double t66841 = gamma_bb[index]*gx*t66795*3.0;
                double t66842 = gamma_bb[index]*gx*t66831*t66832*t66833;
                double t66843 = t66831*t66832*t66792*3.0;
                double t66844 = t66841+t66842+t66843+1.0;
                double t66845 = t66832*t66832;
                double t66861 = gx*t66795*4.0;
                double t66862 = gamma_bb[index]*t66831*t66792*1.2E1;
                double t66863 = gx*t66831*t66832*t66833*1.2E1;
                double t66864 = gamma_bb[index]*t66832*t66834*t66835*4.0;
                double t66846 = t66861+t66862+t66863+t66864;
                double t66847 = gamma_bb[index]*gx*t66795*4.0;
                double t66848 = gamma_bb[index]*gx*t66831*t66832*t66833*4.0;
                double t66849 = t66831*t66832*t66792*6.0;
                double t66850 = t66834*t66835*t66845;
                double t66851 = t66850+t66847+t66848+t66849+1.0;
                double t66854 = gx*t66795*2.0;
                double t66855 = gamma_bb[index]*t66831*t66792*2.0;
                double t66852 = t66854+t66855;
                double t66853 = 1.0/(t66844*t66844);
                double t66856 = 1.0/(t66840*t66840);
                double t66857 = gx*t66795*3.0;
                double t66858 = gamma_bb[index]*t66831*t66792*6.0;
                double t66859 = gx*t66831*t66832*t66833*3.0;
                double t66860 = t66857+t66858+t66859;
                double t66865 = 1.0/(t66851*t66851);
                double t66866 = b1f*t66747;
                double t66867 = b3f*t66748;
                double t66868 = b4f*t66724*t66749;
                double t66869 = b2f*c*t66745;
                double t66870 = t66866+t66867+t66868+t66869;
                double t66871 = 1.0/t66870;
                double t66872 = t66744*t66871*(1.0/2.0);
                double t66873 = t66872+1.0;
                double t66874 = log(t66873);
                double t66875 = a1f*c*t66745;
                double t66876 = t66875+1.0;
                double t66877 = t66761-c0f*t66874*t66876*2.0;
                double t66878 = t66761-t66740*t66743*t66877;
                double t66879 = gcaa*gcaa;
                double t66880 = t66879*t66879;
                double t66881 = gamma_bb[index]*gcaa*t66795;
                double t66882 = t66881+1.0;
                double t66883 = gamma_bb[index]*gcaa*t66795*2.0;
                double t66884 = t66832*t66792*t66879;
                double t66885 = t66883+t66884+1.0;
                double t66886 = gamma_bb[index]*gcaa*t66795*3.0;
                double t66887 = gamma_bb[index]*gcaa*t66832*t66833*t66879;
                double t66888 = t66832*t66792*t66879*3.0;
                double t66889 = t66886+t66887+t66888+1.0;
                double t66905 = gcaa*t66795*4.0;
                double t66906 = gamma_bb[index]*t66792*t66879*1.2E1;
                double t66907 = gcaa*t66832*t66833*t66879*1.2E1;
                double t66908 = gamma_bb[index]*t66832*t66835*t66880*4.0;
                double t66890 = t66905+t66906+t66907+t66908;
                double t66891 = gamma_bb[index]*gcaa*t66795*4.0;
                double t66892 = gamma_bb[index]*gcaa*t66832*t66833*t66879*4.0;
                double t66893 = t66832*t66792*t66879*6.0;
                double t66894 = t66835*t66880*t66845;
                double t66895 = t66891+t66892+t66893+t66894+1.0;
                double t66898 = gcaa*t66795*2.0;
                double t66899 = gamma_bb[index]*t66792*t66879*2.0;
                double t66896 = t66898+t66899;
                double t66897 = 1.0/(t66889*t66889);
                double t66900 = 1.0/(t66885*t66885);
                double t66901 = gcaa*t66795*3.0;
                double t66902 = gamma_bb[index]*t66792*t66879*6.0;
                double t66903 = gcaa*t66832*t66833*t66879*3.0;
                double t66904 = t66901+t66902+t66903;
                double t66909 = 1.0/(t66895*t66895);
                v_gamma_bb_gamma_bb_[index] = (rho_b[index]*t66878+rho_a[index]*(t66830-t66740*t66743*(t66830-c0f* \
                   log((t66744*(1.0/2.0))/(b1f*t66722+b3f*t66723+b2f*c*t66720+b4f*t66724*t66725)+1.0)*(a1f*c*t66720+1.0) \
                   *2.0))-t66762*(t66779-t66743*t66790*t66784*t66785*(t66779-c0f*log((t66744*(1.0/2.0))/(b1f*t66765+b3f* \
                   t66766+b2f*c*t66763+b4f*t66724*t66767)+1.0)*(a1f*c*t66763+1.0)*2.0)+(Aa*t66743*t66790*log((1.0/2.0) \
                   /(Aa*(b1a*t66765+b3a*t66766+b2a*c*t66763+b4a*t66724*t66767))+1.0)*(t66784*t66785-1.0)*(a1a*c*t66763+ \
                   1.0)*2.0)/d2fz0))*((ccab2*t66791*t66792*(1.0/2.0))/t66803-ccab1*t66791*t66792*1.0/(t66799*t66799)* \
                   (1.0/2.0)+ccab2*t66800*1.0/(t66803*t66803*t66803)*(t66812*t66812)*t66791*2.0+ccab4*t66804*(t66805* \
                   t66805)*t66806*1.0/(t66817*t66817*t66817)*2.0-ccab2*t66800*t66820*t66804*t66792*(1.0/2.0)-ccab4*t66804* \
                   t66806*t66825*(t66791*t66792*3.0+t66800*t66804*t66792*3.0+gcab*t66791*t66792*t66797*6.0)+(ccab4*t66800* \
                   t66804*t66792*3.0)/t66817-ccab2*t66820*t66812*t66791*t66795*t66797*2.0+(ccab3*gcab*t66791*t66792*t66797* \
                   (3.0/2.0))/t66811+ccab1*gcab*t66791*t66792*t66797*1.0/(t66799*t66799*t66799)*(1.0/2.0)+ccab3*gcab* \
                   t66800*1.0/(t66811*t66811*t66811)*(t66807*t66807)*t66791*t66797*2.0-ccab3*gcab*t66800*t66807*t66791* \
                   t66829*t66795*3.0-ccab4*t66800*t66804*t66805*t66825*t66795*t66797*4.0-ccab3*gcab*t66800*t66791*t66829* \
                   t66797*(t66791*t66792*(3.0/2.0)+gcab*t66791*t66792*t66797*(3.0/2.0)))-c0*pow(rho_b[index],4.0/3.0) \
                   *(cx1*t66831*t66792*1.0/(t66837*t66837)*2.0-(cx2*t66831*t66792*2.0)/t66840+cx2*t66832*t66834*t66835* \
                   t66856*2.0-(cx4*t66832*t66834*t66835*1.2E1)/t66851+cx4*t66834*t66835*t66845*t66865*(t66831*t66792* \
                   1.2E1+t66832*t66834*t66835*1.2E1+gamma_bb[index]*gx*t66831*t66833*2.4E1)-cx1*gamma_bb[index]*gx*t66831* \
                   t66833*1.0/(t66837*t66837*t66837)*2.0-(cx3*gamma_bb[index]*gx*t66831*t66833*6.0)/t66844-cx2*t66831* \
                   1.0/(t66840*t66840*t66840)*t66832*(t66852*t66852)*t66792*2.0-cx4*1.0/(t66851*t66851*t66851)*t66834* \
                   t66835*t66845*(t66846*t66846)*2.0+cx2*gamma_bb[index]*t66831*t66852*t66792*t66856*4.0+cx4*gamma_bb[index]* \
                   t66832*t66834*t66835*t66846*t66865*8.0+cx3*gx*t66831*t66832*t66833*t66860*t66853*6.0+cx3*gamma_bb[index]* \
                   gx*t66831*t66832*t66833*t66853*(t66831*t66792*6.0+gamma_bb[index]*gx*t66831*t66833*6.0)-cx3*gamma_bb[index]* \
                   gx*t66831*t66832*t66833*(t66860*t66860)*1.0/(t66844*t66844*t66844)*2.0)+rho_b[index]*t66878*(ccaa1* \
                   t66792*1.0/(t66882*t66882)*t66879*2.0-(ccaa2*t66792*t66879*2.0)/t66885+ccaa2*t66900*t66832*t66835* \
                   t66880*2.0-(ccaa4*t66832*t66835*t66880*1.2E1)/t66895+ccaa4*t66835*t66880*t66845*t66909*(t66792*t66879* \
                   1.2E1+t66832*t66835*t66880*1.2E1+gamma_bb[index]*gcaa*t66833*t66879*2.4E1)-ccaa1*gamma_bb[index]*gcaa* \
                   t66833*1.0/(t66882*t66882*t66882)*t66879*2.0-(ccaa3*gamma_bb[index]*gcaa*t66833*t66879*6.0)/t66889- \
                   ccaa4*t66835*t66880*t66845*(t66890*t66890)*1.0/(t66895*t66895*t66895)*2.0-ccaa2*t66832*t66792*1.0/ \
                   (t66885*t66885*t66885)*(t66896*t66896)*t66879*2.0+ccaa2*gamma_bb[index]*t66900*t66792*t66896*t66879* \
                   4.0+ccaa4*gamma_bb[index]*t66832*t66835*t66880*t66890*t66909*8.0+ccaa3*gcaa*t66832*t66904*t66833*t66879* \
                   t66897*6.0+ccaa3*gamma_bb[index]*gcaa*t66832*t66833*t66879*t66897*(t66792*t66879*6.0+gamma_bb[index]* \
                   gcaa*t66833*t66879*6.0)-ccaa3*gamma_bb[index]*gcaa*t66832*(t66904*t66904)*t66833*t66879*1.0/(t66889* \
                   t66889*t66889)*2.0);
            } else if (rho_a[index] > cutoff_) {
                v_gamma_bb_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                double t67463 = gx*gx;
                double t67464 = 1.0/pow(rho_b[index],1.6E1/3.0);
                double t67465 = 1.0/pow(rho_b[index],8.0/3.0);
                double t67466 = gamma_bb[index]*gamma_bb[index];
                double t67467 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]);
                double t67468 = t67463*t67463;
                double t67469 = 1.0/pow(rho_b[index],3.2E1/3.0);
                double t67470 = gamma_bb[index]*gx*t67465;
                double t67471 = t67470+1.0;
                double t67472 = gamma_bb[index]*gx*t67465*2.0;
                double t67473 = t67463*t67464*t67466;
                double t67474 = t67472+t67473+1.0;
                double t67475 = gamma_bb[index]*gx*t67465*3.0;
                double t67476 = gamma_bb[index]*gx*t67463*t67466*t67467;
                double t67477 = t67463*t67464*t67466*3.0;
                double t67478 = t67475+t67476+t67477+1.0;
                double t67479 = t67466*t67466;
                double t67495 = gx*t67465*4.0;
                double t67496 = gamma_bb[index]*t67463*t67464*1.2E1;
                double t67497 = gx*t67463*t67466*t67467*1.2E1;
                double t67498 = gamma_bb[index]*t67466*t67468*t67469*4.0;
                double t67480 = t67495+t67496+t67497+t67498;
                double t67481 = gamma_bb[index]*gx*t67465*4.0;
                double t67482 = gamma_bb[index]*gx*t67463*t67466*t67467*4.0;
                double t67483 = t67463*t67464*t67466*6.0;
                double t67484 = t67468*t67469*t67479;
                double t67485 = t67481+t67482+t67483+t67484+1.0;
                double t67488 = gx*t67465*2.0;
                double t67489 = gamma_bb[index]*t67463*t67464*2.0;
                double t67486 = t67488+t67489;
                double t67487 = 1.0/(t67478*t67478);
                double t67490 = 1.0/(t67474*t67474);
                double t67491 = gx*t67465*3.0;
                double t67492 = gamma_bb[index]*t67463*t67464*6.0;
                double t67493 = gx*t67463*t67466*t67467*3.0;
                double t67494 = t67491+t67492+t67493;
                double t67499 = 1.0/(t67485*t67485);
                double t67500 = 1.0/pow(rho_b[index],1.0/3.0);
                double t67501 = c*t67500;
                double t67502 = sqrt(t67501);
                double t67503 = pow(t67501,3.0/2.0);
                double t67504 = c*c;
                double t67505 = 1.0/pow(rho_b[index],2.0/3.0);
                double t67506 = 1.0/c0p;
                double t67507 = b1p*t67502;
                double t67508 = b3p*t67503;
                double t67509 = b4p*t67504*t67505;
                double t67510 = b2p*c*t67500;
                double t67511 = t67510+t67507+t67508+t67509;
                double t67512 = 1.0/t67511;
                double t67513 = t67512*t67506*(1.0/2.0);
                double t67514 = t67513+1.0;
                double t67515 = log(t67514);
                double t67516 = a1p*c*t67500;
                double t67517 = t67516+1.0;
                double t67518 = gcaa*gcaa;
                double t67519 = t67518*t67518;
                double t67520 = gamma_bb[index]*gcaa*t67465;
                double t67521 = t67520+1.0;
                double t67522 = gamma_bb[index]*gcaa*t67465*2.0;
                double t67523 = t67464*t67518*t67466;
                double t67524 = t67522+t67523+1.0;
                double t67525 = gamma_bb[index]*gcaa*t67465*3.0;
                double t67526 = gamma_bb[index]*gcaa*t67518*t67466*t67467;
                double t67527 = t67464*t67518*t67466*3.0;
                double t67528 = t67525+t67526+t67527+1.0;
                double t67544 = gcaa*t67465*4.0;
                double t67545 = gamma_bb[index]*t67464*t67518*1.2E1;
                double t67546 = gcaa*t67518*t67466*t67467*1.2E1;
                double t67547 = gamma_bb[index]*t67519*t67466*t67469*4.0;
                double t67529 = t67544+t67545+t67546+t67547;
                double t67530 = gamma_bb[index]*gcaa*t67465*4.0;
                double t67531 = gamma_bb[index]*gcaa*t67518*t67466*t67467*4.0;
                double t67532 = t67464*t67518*t67466*6.0;
                double t67533 = t67519*t67469*t67479;
                double t67534 = t67530+t67531+t67532+t67533+1.0;
                double t67537 = gcaa*t67465*2.0;
                double t67538 = gamma_bb[index]*t67464*t67518*2.0;
                double t67535 = t67537+t67538;
                double t67536 = 1.0/(t67528*t67528);
                double t67539 = 1.0/(t67524*t67524);
                double t67540 = gcaa*t67465*3.0;
                double t67541 = gamma_bb[index]*t67464*t67518*6.0;
                double t67542 = gcaa*t67518*t67466*t67467*3.0;
                double t67543 = t67540+t67541+t67542;
                double t67548 = 1.0/(t67534*t67534);
                v_gamma_bb_gamma_bb_[index] = -c0*pow(rho_b[index],4.0/3.0)*(cx1*1.0/(t67471*t67471)*t67463*t67464* \
                   2.0-(cx2*t67463*t67464*2.0)/t67474+cx2*t67490*t67466*t67468*t67469*2.0-(cx4*t67466*t67468*t67469*1.2E1) \
                   /t67485+cx4*t67468*t67469*t67479*t67499*(t67463*t67464*1.2E1+t67466*t67468*t67469*1.2E1+gamma_bb[index]* \
                   gx*t67463*t67467*2.4E1)-cx1*gamma_bb[index]*gx*1.0/(t67471*t67471*t67471)*t67463*t67467*2.0-(cx3*gamma_bb[index]* \
                   gx*t67463*t67467*6.0)/t67478-cx2*t67463*t67464*1.0/(t67474*t67474*t67474)*t67466*(t67486*t67486)*2.0- \
                   cx4*(t67480*t67480)*1.0/(t67485*t67485*t67485)*t67468*t67469*t67479*2.0+cx2*gamma_bb[index]*t67463* \
                   t67490*t67464*t67486*4.0+cx4*gamma_bb[index]*t67480*t67466*t67468*t67469*t67499*8.0+cx3*gx*t67463* \
                   t67466*t67467*t67494*t67487*6.0+cx3*gamma_bb[index]*gx*t67463*t67466*t67467*t67487*(t67463*t67464* \
                   6.0+gamma_bb[index]*gx*t67463*t67467*6.0)-cx3*gamma_bb[index]*gx*t67463*t67466*t67467*(t67494*t67494) \
                   *1.0/(t67478*t67478*t67478)*2.0)+rho_b[index]*(((pow(2.0,1.0/3.0)*2.0-2.0)*(c0f*log((1.0/2.0)/(c0f* \
                   (b1f*t67502+b3f*t67503+b2f*c*t67500+b4f*t67504*t67505))+1.0)*(a1f*c*t67500+1.0)*2.0-c0p*t67515*t67517* \
                   2.0))/(two_13*2.0-2.0)+c0p*t67515*t67517*2.0)*(ccaa1*1.0/(t67521*t67521)*t67464*t67518*2.0-(ccaa2* \
                   t67464*t67518*2.0)/t67524+ccaa2*t67519*t67466*t67539*t67469*2.0-(ccaa4*t67519*t67466*t67469*1.2E1) \
                   /t67534+ccaa4*t67519*t67548*t67469*t67479*(t67464*t67518*1.2E1+t67519*t67466*t67469*1.2E1+gamma_bb[index]* \
                   gcaa*t67518*t67467*2.4E1)-ccaa1*gamma_bb[index]*gcaa*1.0/(t67521*t67521*t67521)*t67518*t67467*2.0- \
                   (ccaa3*gamma_bb[index]*gcaa*t67518*t67467*6.0)/t67528-ccaa2*1.0/(t67524*t67524*t67524)*(t67535*t67535) \
                   *t67464*t67518*t67466*2.0-ccaa4*1.0/(t67534*t67534*t67534)*t67519*(t67529*t67529)*t67469*t67479*2.0+ \
                   ccaa2*gamma_bb[index]*t67535*t67464*t67518*t67539*4.0+ccaa4*gamma_bb[index]*t67519*t67466*t67529*t67548* \
                   t67469*8.0+ccaa3*gcaa*t67543*t67518*t67536*t67466*t67467*6.0+ccaa3*gamma_bb[index]*gcaa*t67518*t67536* \
                   t67466*t67467*(t67464*t67518*6.0+gamma_bb[index]*gcaa*t67518*t67467*6.0)-ccaa3*gamma_bb[index]*gcaa* \
                   (t67543*t67543)*t67518*1.0/(t67528*t67528*t67528)*t67466*t67467*2.0);
            } else {
                v_gamma_bb_gamma_bb_[index] = 0.0;
            } 

        }                       
        if (is_meta_) {

            //V_rho_a_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_a_tau_a_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_a_tau_a_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_a_tau_a_[index] = 0.0;
            } else {
                v_rho_a_tau_a_[index] = 0.0;
            } 

            //V_rho_a_tau_b
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_a_tau_b_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_a_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_a_tau_b_[index] = 0.0;
            } else {
                v_rho_a_tau_b_[index] = 0.0;
            } 

            //V_rho_b_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_b_tau_a_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_b_tau_a_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_b_tau_a_[index] = 0.0;
            } else {
                v_rho_b_tau_a_[index] = 0.0;
            } 

            //V_rho_b_tau_b
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_b_tau_b_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_b_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_b_tau_b_[index] = 0.0;
            } else {
                v_rho_b_tau_b_[index] = 0.0;
            } 

            //V_tau_a_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_tau_a_tau_a_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_tau_a_tau_a_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_tau_a_tau_a_[index] = 0.0;
            } else {
                v_tau_a_tau_a_[index] = 0.0;
            } 

            //V_tau_a_tau_b
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_tau_a_tau_b_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_tau_a_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_tau_a_tau_b_[index] = 0.0;
            } else {
                v_tau_a_tau_b_[index] = 0.0;
            } 

            //V_tau_b_tau_b
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_tau_b_tau_b_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_tau_b_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_tau_b_tau_b_[index] = 0.0;
            } else {
                v_tau_b_tau_b_[index] = 0.0;
            } 

            if (is_gga_) {
            	
                //V_gamma_aa_tau_a
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } else {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } 
            	
                //V_gamma_aa_tau_b
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_aa_tau_b_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_aa_tau_b_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_aa_tau_b_[index] = 0.0;
                } else {
                    v_gamma_aa_tau_b_[index] = 0.0;
                } 
            	
                //V_gamma_ab_tau_a
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_ab_tau_a_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_ab_tau_a_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_ab_tau_a_[index] = 0.0;
                } else {
                    v_gamma_ab_tau_a_[index] = 0.0;
                } 
            	
                //V_gamma_ab_tau_b
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_ab_tau_b_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_ab_tau_b_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_ab_tau_b_[index] = 0.0;
                } else {
                    v_gamma_ab_tau_b_[index] = 0.0;
                } 
            	
                //V_gamma_bb_tau_a
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_bb_tau_a_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_bb_tau_a_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_bb_tau_a_[index] = 0.0;
                } else {
                    v_gamma_bb_tau_a_[index] = 0.0;
                } 
            	
                //V_gamma_bb_tau_b
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_bb_tau_b_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_bb_tau_b_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_bb_tau_b_[index] = 0.0;
                } else {
                    v_gamma_bb_tau_b_[index] = 0.0;
                } 
          
            }  
        }
    }
}

}}

