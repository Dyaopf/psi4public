/**********************************************************
* HCTH120_functional.cc: definitions for HCTH120_functional for KS-DFT
* Robert Parrish, robparrish@gmail.com
* Autogenerated by MATLAB Script on 27-Oct-2010
*
***********************************************************/
#include <libmints/properties.h>
#include <libciomr/libciomr.h>
#include "HCTH120_functional.h"
#include <stdlib.h>
#include <cmath>
#include <string>
#include <string>
#include <vector>

using namespace psi;
using namespace boost;
using namespace std;

namespace psi { namespace functional {

HCTH120_Functional::HCTH120_Functional(int npoints, int deriv) : Functional(npoints, deriv)
{
    
    name_ = "HCTH120";
    description_ = "HCTH120 Power Series GGA";
    citation_ = "A.D. Boese, et. al., J. Chem. Phys., 112(4), 1670-1678, 2000";
    
    double c0 = -9.3052573634909974E-01;
    params_.push_back(make_pair("c0",c0));
    double two_13 = 1.2599210498948732E+00;
    params_.push_back(make_pair("two_13",two_13));
    double d2fz0 = 1.7099210000000000E+00;
    params_.push_back(make_pair("d2fz0",d2fz0));
    double c = 6.2035049089939986E-01;
    params_.push_back(make_pair("c",c));
    double Aa = 1.6886999999999999E-02;
    params_.push_back(make_pair("Aa",Aa));
    double a1a = 1.1125000000000000E-01;
    params_.push_back(make_pair("a1a",a1a));
    double b1a = 1.0356999999999999E+01;
    params_.push_back(make_pair("b1a",b1a));
    double b2a = 3.6231000000000000E+00;
    params_.push_back(make_pair("b2a",b2a));
    double b3a = 8.8026000000000004E-01;
    params_.push_back(make_pair("b3a",b3a));
    double b4a = 4.9670999999999998E-01;
    params_.push_back(make_pair("b4a",b4a));
    double c0p = 3.1091000000000001E-02;
    params_.push_back(make_pair("c0p",c0p));
    double a1p = 2.1370000000000000E-01;
    params_.push_back(make_pair("a1p",a1p));
    double b1p = 7.5956999999999999E+00;
    params_.push_back(make_pair("b1p",b1p));
    double b2p = 3.5876000000000001E+00;
    params_.push_back(make_pair("b2p",b2p));
    double b3p = 1.6382000000000001E+00;
    params_.push_back(make_pair("b3p",b3p));
    double b4p = 4.9293999999999999E-01;
    params_.push_back(make_pair("b4p",b4p));
    double c0f = 1.5545000000000000E-02;
    params_.push_back(make_pair("c0f",c0f));
    double a1f = 2.0548000000000000E-01;
    params_.push_back(make_pair("a1f",a1f));
    double b1f = 1.4118900000000000E+01;
    params_.push_back(make_pair("b1f",b1f));
    double b2f = 6.1977000000000002E+00;
    params_.push_back(make_pair("b2f",b2f));
    double b3f = 3.3662000000000001E+00;
    params_.push_back(make_pair("b3f",b3f));
    double b4f = 6.2517000000000000E-01;
    params_.push_back(make_pair("b4f",b4f));
    double gcab = 6.0000000000000001E-03;
    params_.push_back(make_pair("gcab",gcab));
    double gcaa = 2.0000000000000001E-01;
    params_.push_back(make_pair("gcaa",gcaa));
    double gx = 4.0000000000000001E-03;
    params_.push_back(make_pair("gx",gx));
    double ccab0 = 5.1473000000000002E-01;
    params_.push_back(make_pair("ccab0",ccab0));
    double ccab1 = 6.9298200000000003E+00;
    params_.push_back(make_pair("ccab1",ccab1));
    double ccab2 = -2.4707300000000000E+01;
    params_.push_back(make_pair("ccab2",ccab2));
    double ccab3 = 2.3109800000000000E+01;
    params_.push_back(make_pair("ccab3",ccab3));
    double ccab4 = -1.1323399999999999E+01;
    params_.push_back(make_pair("ccab4",ccab4));
    double ccaa0 = 4.8950800000000000E-01;
    params_.push_back(make_pair("ccaa0",ccaa0));
    double ccaa1 = -2.6069900000000001E-01;
    params_.push_back(make_pair("ccaa1",ccaa1));
    double ccaa2 = 4.3291700000000000E-01;
    params_.push_back(make_pair("ccaa2",ccaa2));
    double ccaa3 = -1.9924700000000000E+00;
    params_.push_back(make_pair("ccaa3",ccaa3));
    double ccaa4 = 2.4853100000000001E+00;
    params_.push_back(make_pair("ccaa4",ccaa4));
    double cx0 = 1.0916300000000001E+00;
    params_.push_back(make_pair("cx0",cx0));
    double cx1 = -7.4721499999999996E-01;
    params_.push_back(make_pair("cx1",cx1));
    double cx2 = 5.0783300000000002E+00;
    params_.push_back(make_pair("cx2",cx2));
    double cx3 = -4.1074599999999997E+00;
    params_.push_back(make_pair("cx3",cx3));
    double cx4 = 1.1717299999999999E+00;
    params_.push_back(make_pair("cx4",cx4));

    is_gga_ = true;
    is_meta_ = false;

    //Required allocateion
    allocate();
}
HCTH120_Functional::~HCTH120_Functional()
{
}
void HCTH120_Functional::computeRKSFunctional(shared_ptr<Properties> prop)
{
    int ntrue = prop->getTrueSize();

    double* rho_a;
    double* gamma_aa;
    double* tau_a;

    rho_a = prop->getRhoA();
    if (is_gga_) {
        gamma_aa = prop->getGammaAA();
    }
    if (is_meta_) {
        tau_a = prop->getTauA();
    }

    double c0 = params_[0].second;
    double two_13 = params_[1].second;
    double d2fz0 = params_[2].second;
    double c = params_[3].second;
    double Aa = params_[4].second;
    double a1a = params_[5].second;
    double b1a = params_[6].second;
    double b2a = params_[7].second;
    double b3a = params_[8].second;
    double b4a = params_[9].second;
    double c0p = params_[10].second;
    double a1p = params_[11].second;
    double b1p = params_[12].second;
    double b2p = params_[13].second;
    double b3p = params_[14].second;
    double b4p = params_[15].second;
    double c0f = params_[16].second;
    double a1f = params_[17].second;
    double b1f = params_[18].second;
    double b2f = params_[19].second;
    double b3f = params_[20].second;
    double b4f = params_[21].second;
    double gcab = params_[22].second;
    double gcaa = params_[23].second;
    double gx = params_[24].second;
    double ccab0 = params_[25].second;
    double ccab1 = params_[26].second;
    double ccab2 = params_[27].second;
    double ccab3 = params_[28].second;
    double ccab4 = params_[29].second;
    double ccaa0 = params_[30].second;
    double ccaa1 = params_[31].second;
    double ccaa2 = params_[32].second;
    double ccaa3 = params_[33].second;
    double ccaa4 = params_[34].second;
    double cx0 = params_[35].second;
    double cx1 = params_[36].second;
    double cx2 = params_[37].second;
    double cx3 = params_[38].second;
    double cx4 = params_[39].second;

    //Functional
    for (int index = 0; index < ntrue; index++) {

        //Functional Value
        if (rho_a[index] > cutoff_) {
            double t67961 = 1/pow(rho_a[index],1.0/3.0);
            double t67962 = c*t67961;
            double t67963 = sqrt(t67962);
            double t67964 = pow(t67962,3.0/2.0);
            double t67965 = c*c;
            double t67966 = 1/pow(rho_a[index],2.0/3.0);
            double t67967 = 1/c0p;
            double t67968 = b1p*t67963;
            double t67969 = b3p*t67964;
            double t67970 = b4p*t67965*t67966;
            double t67971 = b2p*c*t67961;
            double t67972 = t67970+t67971+t67968+t67969;
            double t67973 = 1/t67972;
            double t67974 = t67973*t67967*(1.0/2.0);
            double t67975 = t67974+1.0;
            double t67976 = log(t67975);
            double t67977 = a1p*c*t67961;
            double t67978 = t67977+1.0;
            double t67979 = rho_a[index]*2.0;
            double t67980 = 1/pow(t67979,1.0/3.0);
            double t67981 = c*t67980;
            double t67982 = gamma_aa[index]*gamma_aa[index];
            double t67983 = gcab*gcab;
            double t67984 = t67982*t67982;
            double t67985 = t67983*t67983;
            double t67986 = 1/pow(rho_a[index],3.2E1/3.0);
            double t67987 = 1/pow(rho_a[index],8.0/3.0);
            double t67988 = 1/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]);
            double t67989 = 1/pow(rho_a[index],1.6E1/3.0);
            double t67990 = pow(2.0,1.0/3.0);
            double t67991 = t67990*2.0;
            double t67992 = t67991-2.0;
            double t67993 = two_13*2.0;
            double t67994 = t67993-2.0;
            double t67995 = 1/t67994;
            double t67996 = 1/c0f;
            double t67997 = b1f*t67963;
            double t67998 = b3f*t67964;
            double t67999 = b4f*t67965*t67966;
            double t68000 = b2f*c*t67961;
            double t68001 = t67997+t67998+t67999+t68000;
            double t68002 = 1/t68001;
            double t68003 = t67996*t68002*(1.0/2.0);
            double t68004 = t68003+1.0;
            double t68005 = log(t68004);
            double t68006 = a1f*c*t67961;
            double t68007 = t68006+1.0;
            double t68008 = c0f*t68005*t68007*2.0;
            double t68009 = c0p*t67976*t67978*2.0;
            double t68010 = gcaa*gcaa;
            double t68011 = t68010*t68010;
            double t68012 = gx*gx;
            double t68013 = t68012*t68012;
            functional_[index] = (rho_a[index]*(t68009+t67992*t67995*(t68008-c0p*t67976*t67978*2.0))*2.0-c0p* \
               rho_a[index]*log((t67967*(1.0/2.0))/(b1p*sqrt(t67981)+b3p*pow(t67981,3.0/2.0)+b4p*t67965*1/pow(t67979,2.0/ \
               3.0)+b2p*c*t67980)+1.0)*(a1p*c*t67980+1.0)*4.0)*(ccab0+(ccab2*t67982*t67983*t67989)/(gamma_aa[index]* \
               gcab*t67987*2.0+t67982*t67983*t67989+1.0)+(ccab1*gamma_aa[index]*gcab*t67987)/(gamma_aa[index]*gcab* \
               t67987+1.0)+(ccab4*t67984*t67985*t67986)/(gamma_aa[index]*gcab*t67987*4.0+t67982*t67983*t67989*6.0+ \
               t67984*t67985*t67986+gamma_aa[index]*gcab*t67982*t67983*t67988*4.0+1.0)+(ccab3*gamma_aa[index]*gcab* \
               t67982*t67983*t67988)/(gamma_aa[index]*gcab*t67987*3.0+t67982*t67983*t67989*3.0+gamma_aa[index]*gcab* \
               t67982*t67983*t67988+1.0))-rho_a[index]*(t68009+t67992*t67995*(t68008-t68009))*(ccaa0+(ccaa2*t67982* \
               t67989*t68010)/(gamma_aa[index]*gcaa*t67987*2.0+t67982*t67989*t68010+1.0)+(ccaa1*gamma_aa[index]*gcaa* \
               t67987)/(gamma_aa[index]*gcaa*t67987+1.0)+(ccaa4*t67984*t67986*t68011)/(gamma_aa[index]*gcaa*t67987* \
               4.0+t67982*t67989*t68010*6.0+t67984*t67986*t68011+gamma_aa[index]*gcaa*t67982*t67988*t68010*4.0+1.0) \
               +(ccaa3*gamma_aa[index]*gcaa*t67982*t67988*t68010)/(gamma_aa[index]*gcaa*t67987*3.0+t67982*t67989* \
               t68010*3.0+gamma_aa[index]*gcaa*t67982*t67988*t68010+1.0))*2.0+c0*pow(rho_a[index],4.0/3.0)*(cx0+(cx2* \
               t67982*t67989*t68012)/(gamma_aa[index]*gx*t67987*2.0+t67982*t67989*t68012+1.0)+(cx1*gamma_aa[index]* \
               gx*t67987)/(gamma_aa[index]*gx*t67987+1.0)+(cx4*t67984*t67986*t68013)/(gamma_aa[index]*gx*t67987*4.0+ \
               t67982*t67989*t68012*6.0+t67984*t67986*t68013+gamma_aa[index]*gx*t67982*t67988*t68012*4.0+1.0)+(cx3* \
               gamma_aa[index]*gx*t67982*t67988*t68012)/(gamma_aa[index]*gx*t67987*3.0+t67982*t67989*t68012*3.0+gamma_aa[index]* \
               gx*t67982*t67988*t68012+1.0))*2.0;
        } else {
            functional_[index] = 0.0;
        } 

    }
    //First Partials
    for (int index = 0; index < ntrue && deriv_ >= 1; index++) {
        
        //V_rho_a
        if (rho_a[index] > cutoff_) {
            double t68015 = gamma_aa[index]*gamma_aa[index];
            double t68016 = gcab*gcab;
            double t68017 = t68015*t68015;
            double t68018 = t68016*t68016;
            double t68019 = 1/pow(rho_a[index],3.2E1/3.0);
            double t68020 = 1/pow(rho_a[index],8.0/3.0);
            double t68021 = 1/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]);
            double t68022 = 1/pow(rho_a[index],1.6E1/3.0);
            double t68023 = rho_a[index]*2.0;
            double t68024 = 1/pow(t68023,1.0/3.0);
            double t68025 = c*t68024;
            double t68026 = sqrt(t68025);
            double t68027 = b1p*t68026;
            double t68028 = pow(t68025,3.0/2.0);
            double t68029 = b3p*t68028;
            double t68030 = b2p*c*t68024;
            double t68031 = c*c;
            double t68032 = 1/pow(t68023,2.0/3.0);
            double t68033 = b4p*t68031*t68032;
            double t68034 = t68030+t68033+t68027+t68029;
            double t68035 = 1/pow(t68023,4.0/3.0);
            double t68036 = 1/c0p;
            double t68037 = 1/t68034;
            double t68038 = t68036*t68037*(1.0/2.0);
            double t68039 = t68038+1.0;
            double t68040 = 1/pow(rho_a[index],1.0/3.0);
            double t68041 = c*t68040;
            double t68042 = sqrt(t68041);
            double t68043 = b1f*t68042;
            double t68044 = pow(t68041,3.0/2.0);
            double t68045 = b3f*t68044;
            double t68046 = 1/pow(rho_a[index],2.0/3.0);
            double t68047 = b4f*t68031*t68046;
            double t68048 = b2f*c*t68040;
            double t68049 = t68043+t68045+t68047+t68048;
            double t68050 = 1/pow(rho_a[index],4.0/3.0);
            double t68051 = b1p*t68042;
            double t68052 = b3p*t68044;
            double t68053 = b4p*t68031*t68046;
            double t68054 = b2p*c*t68040;
            double t68055 = t68051+t68052+t68053+t68054;
            double t68056 = 1/pow(rho_a[index],5.0/3.0);
            double t68057 = 1/sqrt(t68041);
            double t68058 = 1/c0f;
            double t68059 = 1/t68049;
            double t68060 = t68058*t68059*(1.0/2.0);
            double t68061 = t68060+1.0;
            double t68062 = 1/t68055;
            double t68063 = t68062*t68036*(1.0/2.0);
            double t68064 = t68063+1.0;
            double t68065 = a1p*c*t68040;
            double t68066 = t68065+1.0;
            double t68067 = 1/t68064;
            double t68068 = 1/(t68055*t68055);
            double t68069 = b4p*t68031*t68056*(2.0/3.0);
            double t68070 = b2p*c*t68050*(1.0/3.0);
            double t68071 = b1p*c*t68050*t68057*(1.0/6.0);
            double t68072 = b3p*c*t68050*t68042*(1.0/2.0);
            double t68073 = t68070+t68071+t68072+t68069;
            double t68074 = t68073*t68066*t68067*t68068;
            double t68075 = log(t68064);
            double t68076 = log(t68039);
            double t68077 = a1p*c*t68024;
            double t68078 = t68077+1.0;
            double t68079 = pow(2.0,1.0/3.0);
            double t68080 = t68079*2.0;
            double t68081 = t68080-2.0;
            double t68082 = two_13*2.0;
            double t68083 = t68082-2.0;
            double t68084 = 1/t68083;
            double t68085 = log(t68061);
            double t68086 = a1f*c*t68040;
            double t68087 = t68086+1.0;
            double t68088 = c0f*t68085*t68087*2.0;
            double t68090 = c0p*t68066*t68075*2.0;
            double t68089 = -t68090+t68088;
            double t68091 = gcaa*gcaa;
            double t68092 = t68091*t68091;
            double t68093 = t68081*t68084*t68089;
            double t68094 = t68090+t68093;
            double t68095 = gamma_aa[index]*gcab*t68020*4.0;
            double t68096 = gamma_aa[index]*gcab*t68021*t68015*t68016*4.0;
            double t68097 = t68022*t68015*t68016*6.0;
            double t68098 = t68017*t68018*t68019;
            double t68099 = t68095+t68096+t68097+t68098+1.0;
            double t68100 = 1/t68099;
            double t68101 = gamma_aa[index]*gcab*t68020;
            double t68102 = t68101+1.0;
            double t68103 = 1/t68102;
            double t68104 = gamma_aa[index]*gcab*t68020*3.0;
            double t68105 = gamma_aa[index]*gcab*t68021*t68015*t68016;
            double t68106 = t68022*t68015*t68016*3.0;
            double t68107 = t68104+t68105+t68106+1.0;
            double t68108 = 1/t68107;
            double t68109 = gamma_aa[index]*gcab*t68020*2.0;
            double t68110 = t68022*t68015*t68016;
            double t68111 = t68110+t68109+1.0;
            double t68112 = 1/t68111;
            double t68113 = 1/pow(rho_a[index],1.9E1/3.0);
            double t68114 = 1/pow(rho_a[index],1.1E1/3.0);
            double t68115 = 1/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]*rho_a[index]);
            double t68116 = 1/pow(rho_a[index],3.5E1/3.0);
            double t68117 = gamma_aa[index]*gcaa*t68020*4.0;
            double t68118 = gamma_aa[index]*gcaa*t68021*t68015*t68091*4.0;
            double t68119 = t68022*t68015*t68091*6.0;
            double t68120 = t68017*t68019*t68092;
            double t68121 = t68120+t68117+t68118+t68119+1.0;
            double t68122 = 1/t68121;
            double t68123 = gamma_aa[index]*gcaa*t68020;
            double t68124 = t68123+1.0;
            double t68125 = 1/t68124;
            double t68126 = gamma_aa[index]*gcaa*t68020*3.0;
            double t68127 = gamma_aa[index]*gcaa*t68021*t68015*t68091;
            double t68128 = t68022*t68015*t68091*3.0;
            double t68129 = t68126+t68127+t68128+1.0;
            double t68130 = 1/t68129;
            double t68131 = gamma_aa[index]*gcaa*t68020*2.0;
            double t68132 = t68022*t68015*t68091;
            double t68133 = t68131+t68132+1.0;
            double t68134 = 1/t68133;
            double t68135 = gx*gx;
            double t68136 = t68135*t68135;
            double t68137 = gamma_aa[index]*gx*t68020*4.0;
            double t68138 = gamma_aa[index]*gx*t68021*t68015*t68135*4.0;
            double t68139 = t68022*t68015*t68135*6.0;
            double t68140 = t68017*t68019*t68136;
            double t68141 = t68140+t68137+t68138+t68139+1.0;
            double t68142 = 1/t68141;
            double t68143 = gamma_aa[index]*gx*t68020;
            double t68144 = t68143+1.0;
            double t68145 = 1/t68144;
            double t68146 = gamma_aa[index]*gx*t68020*3.0;
            double t68147 = gamma_aa[index]*gx*t68021*t68015*t68135;
            double t68148 = t68022*t68015*t68135*3.0;
            double t68149 = t68146+t68147+t68148+1.0;
            double t68150 = 1/t68149;
            double t68151 = gamma_aa[index]*gx*t68020*2.0;
            double t68152 = t68022*t68015*t68135;
            double t68153 = t68151+t68152+1.0;
            double t68154 = 1/t68153;
            double t68155 = 1/t68061;
            double t68156 = 1/(t68049*t68049);
            double t68157 = b4f*t68031*t68056*(2.0/3.0);
            double t68158 = b2f*c*t68050*(1.0/3.0);
            double t68159 = b1f*c*t68050*t68057*(1.0/6.0);
            double t68160 = b3f*c*t68050*t68042*(1.0/2.0);
            double t68161 = t68160+t68157+t68158+t68159;
            double t68162 = a1f*c*c0f*t68050*t68085*(2.0/3.0);
            double t68163 = a1p*c*c0p*t68050*t68075*(2.0/3.0);
            double t68164 = ccaa4*t68122*t68017*t68019*t68092;
            double t68165 = ccaa1*gamma_aa[index]*gcaa*t68020*t68125;
            double t68166 = ccaa3*gamma_aa[index]*gcaa*t68021*t68130*t68015*t68091;
            double t68167 = ccaa2*t68022*t68015*t68134*t68091;
            double t68168 = ccaa0+t68164+t68165+t68166+t68167;
            v_rho_a_[index] = -(rho_a[index]*t68094*2.0-c0p*rho_a[index]*t68076*t68078*4.0)*(ccab1*gamma_aa[index]* \
               gcab*t68103*t68114*(4.0/3.0)+ccab2*t68112*t68113*t68015*t68016*(8.0/3.0)+ccab4*t68100*t68017*t68116* \
               t68018*(1.6E1/3.0)-ccab1*1/(t68102*t68102)*t68113*t68015*t68016*(4.0/3.0)-ccab2*1/(t68111*t68111)* \
               t68022*t68015*t68016*(gamma_aa[index]*gcab*t68114*(8.0/3.0)+t68113*t68015*t68016*(8.0/3.0))-ccab4* \
               t68017*t68018*t68019*1/(t68099*t68099)*(gamma_aa[index]*gcab*t68114*(1.6E1/3.0)+t68113*t68015*t68016* \
               1.6E1+t68017*t68116*t68018*(1.6E1/3.0)+gamma_aa[index]*gcab*t68015*t68016*t68115*1.6E1)+ccab3*gamma_aa[index]* \
               gcab*t68015*t68016*t68115*t68108*4.0-ccab3*gamma_aa[index]*gcab*t68021*t68015*t68016*1/(t68107*t68107) \
               *(gamma_aa[index]*gcab*t68114*4.0+t68113*t68015*t68016*8.0+gamma_aa[index]*gcab*t68015*t68016*t68115* \
               4.0))-t68094*t68168-(rho_a[index]*((1/(t68034*t68034)*t68078*(b4p*t68031*1/pow(t68023,5.0/3.0)*(2.0/ \
               3.0)+b2p*c*t68035*(1.0/3.0)+b3p*c*t68026*t68035*(1.0/2.0)+b1p*c*1/sqrt(t68025)*t68035*(1.0/6.0)))/ \
               t68039-a1p*c*c0p*t68035*t68076*(2.0/3.0))*2.0+rho_a[index]*(t68163-t68074+t68081*t68084*(t68162+t68074- \
               t68161*t68155*t68156*t68087-a1p*c*c0p*t68050*t68075*(2.0/3.0)))-c0p*t68066*t68075*2.0+c0p*t68076*t68078* \
               2.0-t68081*t68084*t68089)*(ccab0+ccab1*gamma_aa[index]*gcab*t68020*t68103+ccab2*t68022*t68112*t68015* \
               t68016+ccab4*t68100*t68017*t68018*t68019+ccab3*gamma_aa[index]*gcab*t68021*t68015*t68016*t68108)+rho_a[index]* \
               t68094*(ccaa1*gamma_aa[index]*gcaa*t68114*t68125*(8.0/3.0)+ccaa2*t68113*t68015*t68134*t68091*(1.6E1/ \
               3.0)+ccaa4*t68122*t68017*t68116*t68092*(3.2E1/3.0)-ccaa1*t68113*t68015*1/(t68124*t68124)*t68091*(8.0/ \
               3.0)-ccaa2*t68022*t68015*1/(t68133*t68133)*t68091*(gamma_aa[index]*gcaa*t68114*(1.6E1/3.0)+t68113* \
               t68015*t68091*(1.6E1/3.0))-ccaa4*1/(t68121*t68121)*t68017*t68019*t68092*(gamma_aa[index]*gcaa*t68114* \
               (3.2E1/3.0)+t68113*t68015*t68091*3.2E1+t68017*t68116*t68092*(3.2E1/3.0)+gamma_aa[index]*gcaa*t68015* \
               t68115*t68091*3.2E1)+ccaa3*gamma_aa[index]*gcaa*t68130*t68015*t68115*t68091*8.0-ccaa3*gamma_aa[index]* \
               gcaa*t68021*t68015*t68091*1/(t68129*t68129)*(gamma_aa[index]*gcaa*t68114*8.0+t68113*t68015*t68091* \
               1.6E1+gamma_aa[index]*gcaa*t68015*t68115*t68091*8.0))+c0*pow(rho_a[index],1.0/3.0)*(cx0+cx1*gamma_aa[index]* \
               gx*t68020*t68145+cx2*t68022*t68015*t68135*t68154+cx4*t68142*t68017*t68019*t68136+cx3*gamma_aa[index]* \
               gx*t68021*t68015*t68150*t68135)*(4.0/3.0)+rho_a[index]*t68168*(t68163-t68074+t68081*t68084*(t68162- \
               t68163+t68074-t68161*t68155*t68156*t68087))-c0*pow(rho_a[index],4.0/3.0)*(cx1*gamma_aa[index]*gx*t68114* \
               t68145*(8.0/3.0)+cx2*t68113*t68015*t68135*t68154*(1.6E1/3.0)+cx4*t68142*t68017*t68116*t68136*(3.2E1/ \
               3.0)-cx1*t68113*t68015*t68135*1/(t68144*t68144)*(8.0/3.0)-cx2*t68022*t68015*t68135*1/(t68153*t68153) \
               *(gamma_aa[index]*gx*t68114*(1.6E1/3.0)+t68113*t68015*t68135*(1.6E1/3.0))-cx4*1/(t68141*t68141)*t68017* \
               t68019*t68136*(gamma_aa[index]*gx*t68114*(3.2E1/3.0)+t68113*t68015*t68135*3.2E1+t68017*t68116*t68136* \
               (3.2E1/3.0)+gamma_aa[index]*gx*t68015*t68115*t68135*3.2E1)+cx3*gamma_aa[index]*gx*t68015*t68150*t68115* \
               t68135*8.0-cx3*gamma_aa[index]*gx*t68021*t68015*t68135*1/(t68149*t68149)*(gamma_aa[index]*gx*t68114* \
               8.0+t68113*t68015*t68135*1.6E1+gamma_aa[index]*gx*t68015*t68115*t68135*8.0));
        } else {
            v_rho_a_[index] = 0.0;
        } 
        
        if (is_gga_) {
            
            if (rho_a[index] > cutoff_) {
                double t68170 = 1/pow(rho_a[index],1.0/3.0);
                double t68171 = c*t68170;
                double t68172 = sqrt(t68171);
                double t68173 = pow(t68171,3.0/2.0);
                double t68174 = c*c;
                double t68175 = 1/pow(rho_a[index],2.0/3.0);
                double t68176 = 1/c0p;
                double t68177 = b1p*t68172;
                double t68178 = b3p*t68173;
                double t68179 = b4p*t68174*t68175;
                double t68180 = b2p*c*t68170;
                double t68181 = t68180+t68177+t68178+t68179;
                double t68182 = 1/t68181;
                double t68183 = t68182*t68176*(1.0/2.0);
                double t68184 = t68183+1.0;
                double t68185 = log(t68184);
                double t68186 = a1p*c*t68170;
                double t68187 = t68186+1.0;
                double t68188 = rho_a[index]*2.0;
                double t68189 = 1/pow(t68188,1.0/3.0);
                double t68190 = c*t68189;
                double t68191 = 1/pow(rho_a[index],8.0/3.0);
                double t68192 = gamma_aa[index]*gamma_aa[index];
                double t68193 = gcab*gcab;
                double t68194 = t68193*t68193;
                double t68195 = 1/pow(rho_a[index],3.2E1/3.0);
                double t68196 = 1/pow(rho_a[index],1.6E1/3.0);
                double t68197 = 1/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t68198 = gamma_aa[index]*gcab*t68191;
                double t68199 = t68198+1.0;
                double t68200 = gamma_aa[index]*gcab*t68191*3.0;
                double t68201 = gamma_aa[index]*gcab*t68192*t68193*t68197;
                double t68202 = t68192*t68193*t68196*3.0;
                double t68203 = t68200+t68201+t68202+1.0;
                double t68204 = t68192*t68192;
                double t68205 = gamma_aa[index]*gcab*t68191*4.0;
                double t68206 = gamma_aa[index]*gcab*t68192*t68193*t68197*4.0;
                double t68207 = t68192*t68193*t68196*6.0;
                double t68208 = t68204*t68194*t68195;
                double t68209 = t68205+t68206+t68207+t68208+1.0;
                double t68210 = gamma_aa[index]*gcab*t68191*2.0;
                double t68211 = t68192*t68193*t68196;
                double t68212 = t68210+t68211+1.0;
                double t68213 = gx*gx;
                double t68214 = t68213*t68213;
                double t68215 = gamma_aa[index]*gx*t68191;
                double t68216 = t68215+1.0;
                double t68217 = gamma_aa[index]*gx*t68191*3.0;
                double t68218 = gamma_aa[index]*gx*t68213*t68192*t68197;
                double t68219 = t68213*t68192*t68196*3.0;
                double t68220 = t68217+t68218+t68219+1.0;
                double t68221 = gamma_aa[index]*gx*t68191*4.0;
                double t68222 = gamma_aa[index]*gx*t68213*t68192*t68197*4.0;
                double t68223 = t68213*t68192*t68196*6.0;
                double t68224 = t68204*t68214*t68195;
                double t68225 = t68221+t68222+t68223+t68224+1.0;
                double t68226 = gamma_aa[index]*gx*t68191*2.0;
                double t68227 = t68213*t68192*t68196;
                double t68228 = t68226+t68227+1.0;
                double t68229 = pow(2.0,1.0/3.0);
                double t68230 = t68229*2.0;
                double t68231 = t68230-2.0;
                double t68232 = two_13*2.0;
                double t68233 = t68232-2.0;
                double t68234 = 1/t68233;
                double t68235 = 1/c0f;
                double t68236 = b1f*t68172;
                double t68237 = b3f*t68173;
                double t68238 = b4f*t68174*t68175;
                double t68239 = b2f*c*t68170;
                double t68240 = t68236+t68237+t68238+t68239;
                double t68241 = 1/t68240;
                double t68242 = t68241*t68235*(1.0/2.0);
                double t68243 = t68242+1.0;
                double t68244 = log(t68243);
                double t68245 = a1f*c*t68170;
                double t68246 = t68245+1.0;
                double t68247 = c0f*t68244*t68246*2.0;
                double t68248 = c0p*t68185*t68187*2.0;
                double t68249 = gcaa*gcaa;
                double t68250 = t68249*t68249;
                double t68251 = gamma_aa[index]*gcaa*t68191;
                double t68252 = t68251+1.0;
                double t68253 = gamma_aa[index]*gcaa*t68191*3.0;
                double t68254 = gamma_aa[index]*gcaa*t68192*t68249*t68197;
                double t68255 = t68192*t68249*t68196*3.0;
                double t68256 = t68253+t68254+t68255+1.0;
                double t68257 = gamma_aa[index]*gcaa*t68191*4.0;
                double t68258 = gamma_aa[index]*gcaa*t68192*t68249*t68197*4.0;
                double t68259 = t68192*t68249*t68196*6.0;
                double t68260 = t68204*t68250*t68195;
                double t68261 = t68260+t68257+t68258+t68259+1.0;
                double t68262 = gamma_aa[index]*gcaa*t68191*2.0;
                double t68263 = t68192*t68249*t68196;
                double t68264 = t68262+t68263+1.0;
                v_gamma_aa_[index] = (rho_a[index]*(t68248+t68231*t68234*(t68247-c0p*t68185*t68187*2.0))*2.0-c0p* \
                   rho_a[index]*log((t68176*(1.0/2.0))/(b1p*sqrt(t68190)+b3p*pow(t68190,3.0/2.0)+b4p*t68174*1/pow(t68188,2.0/ \
                   3.0)+b2p*c*t68189)+1.0)*(a1p*c*t68189+1.0)*4.0)*((ccab1*gcab*t68191*(1.0/2.0))/t68199+(ccab2*gamma_aa[index]* \
                   t68193*t68196)/t68212-ccab1*gamma_aa[index]*t68193*t68196*1/(t68199*t68199)*(1.0/2.0)-ccab2*1/(t68212* \
                   t68212)*t68192*t68193*t68196*(gcab*t68191+gamma_aa[index]*t68193*t68196)+(ccab4*gamma_aa[index]*t68192* \
                   t68194*t68195*2.0)/t68209+(ccab3*gcab*t68192*t68193*t68197*(3.0/2.0))/t68203-ccab4*t68204*1/(t68209* \
                   t68209)*t68194*t68195*(gcab*t68191*2.0+gamma_aa[index]*t68193*t68196*6.0+gamma_aa[index]*t68192*t68194* \
                   t68195*2.0+gcab*t68192*t68193*t68197*6.0)-ccab3*gamma_aa[index]*gcab*1/(t68203*t68203)*t68192*t68193* \
                   t68197*(gcab*t68191*(3.0/2.0)+gamma_aa[index]*t68193*t68196*3.0+gcab*t68192*t68193*t68197*(3.0/2.0) \
                   ))*2.0-rho_a[index]*(t68248+t68231*t68234*(t68247-t68248))*((ccaa1*gcaa*t68191)/t68252-ccaa1*gamma_aa[index]* \
                   1/(t68252*t68252)*t68249*t68196+(ccaa2*gamma_aa[index]*t68249*t68196*2.0)/t68264-ccaa2*t68192*1/(t68264* \
                   t68264)*t68249*t68196*(gcaa*t68191*2.0+gamma_aa[index]*t68249*t68196*2.0)+(ccaa4*gamma_aa[index]*t68250* \
                   t68192*t68195*4.0)/t68261+(ccaa3*gcaa*t68192*t68249*t68197*3.0)/t68256-ccaa4*t68204*t68250*1/(t68261* \
                   t68261)*t68195*(gcaa*t68191*4.0+gamma_aa[index]*t68249*t68196*1.2E1+gamma_aa[index]*t68250*t68192* \
                   t68195*4.0+gcaa*t68192*t68249*t68197*1.2E1)-ccaa3*gamma_aa[index]*gcaa*t68192*1/(t68256*t68256)*t68249* \
                   t68197*(gcaa*t68191*3.0+gamma_aa[index]*t68249*t68196*6.0+gcaa*t68192*t68249*t68197*3.0))*2.0+c0*pow(rho_a[index],4.0/ \
                   3.0)*((cx1*gx*t68191)/t68216-cx1*gamma_aa[index]*t68213*1/(t68216*t68216)*t68196+(cx2*gamma_aa[index]* \
                   t68213*t68196*2.0)/t68228-cx2*t68213*t68192*1/(t68228*t68228)*t68196*(gx*t68191*2.0+gamma_aa[index]* \
                   t68213*t68196*2.0)+(cx4*gamma_aa[index]*t68214*t68192*t68195*4.0)/t68225+(cx3*gx*t68213*t68192*t68197* \
                   3.0)/t68220-cx4*t68204*t68214*1/(t68225*t68225)*t68195*(gx*t68191*4.0+gamma_aa[index]*t68213*t68196* \
                   1.2E1+gamma_aa[index]*t68214*t68192*t68195*4.0+gx*t68213*t68192*t68197*1.2E1)-cx3*gamma_aa[index]* \
                   gx*1/(t68220*t68220)*t68213*t68192*t68197*(gx*t68191*3.0+gamma_aa[index]*t68213*t68196*6.0+gx*t68213* \
                   t68192*t68197*3.0))*2.0;
            } else {
                v_gamma_aa_[index] = 0.0;
            } 
        
        }
        if (is_meta_) {
        
            //V_tau_a
            if (rho_a[index] > cutoff_) {
                v_tau_a_[index] = 0.0;
            } else {
                v_tau_a_[index] = 0.0;
            } 
        
        }
    }
    //Second Partials
    for (int index = 0; index < ntrue && deriv_ >= 2; index++) {
        
        //V_rho_a_rho_a
        if (rho_a[index] > cutoff_) {
            double t68267 = rho_a[index]*2.0;
            double t68268 = 1/pow(t68267,1.0/3.0);
            double t68269 = c*t68268;
            double t68270 = sqrt(t68269);
            double t68271 = b1p*t68270;
            double t68272 = pow(t68269,3.0/2.0);
            double t68273 = b3p*t68272;
            double t68274 = b2p*c*t68268;
            double t68275 = c*c;
            double t68276 = 1/pow(t68267,2.0/3.0);
            double t68277 = b4p*t68275*t68276;
            double t68278 = t68271+t68273+t68274+t68277;
            double t68279 = 1/pow(t68267,8.0/3.0);
            double t68280 = 1/pow(t68267,7.0/3.0);
            double t68281 = 1/sqrt(t68269);
            double t68282 = 1/c0p;
            double t68283 = 1/t68278;
            double t68284 = t68282*t68283*(1.0/2.0);
            double t68285 = t68284+1.0;
            double t68286 = 1/t68285;
            double t68287 = a1p*c*t68268;
            double t68288 = t68287+1.0;
            double t68289 = 1/pow(t68267,4.0/3.0);
            double t68291 = b2p*c*t68289*(1.0/3.0);
            double t68292 = 1/pow(t68267,5.0/3.0);
            double t68293 = b4p*t68292*t68275*(2.0/3.0);
            double t68294 = b1p*c*t68281*t68289*(1.0/6.0);
            double t68295 = b3p*c*t68270*t68289*(1.0/2.0);
            double t68290 = t68291+t68293+t68294+t68295;
            double t68296 = t68290*t68290;
            double t68297 = 1/(t68278*t68278);
            double t68298 = log(t68285);
            double t68299 = gamma_aa[index]*gamma_aa[index];
            double t68300 = gcab*gcab;
            double t68301 = t68299*t68299;
            double t68302 = t68300*t68300;
            double t68303 = 1/pow(rho_a[index],3.2E1/3.0);
            double t68304 = 1/pow(rho_a[index],8.0/3.0);
            double t68305 = 1/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]);
            double t68306 = 1/pow(rho_a[index],1.6E1/3.0);
            double t68307 = two_13*2.0;
            double t68308 = t68307-2.0;
            double t68309 = 1/t68308;
            double t68310 = 1/pow(rho_a[index],1.0/3.0);
            double t68311 = c*t68310;
            double t68312 = sqrt(t68311);
            double t68313 = pow(t68311,3.0/2.0);
            double t68314 = 1/pow(rho_a[index],2.0/3.0);
            double t68315 = b1p*t68312;
            double t68316 = b3p*t68313;
            double t68317 = b4p*t68314*t68275;
            double t68318 = b2p*c*t68310;
            double t68319 = t68315+t68316+t68317+t68318;
            double t68320 = 1/t68319;
            double t68321 = t68320*t68282*(1.0/2.0);
            double t68322 = t68321+1.0;
            double t68323 = log(t68322);
            double t68324 = a1p*c*t68310;
            double t68325 = t68324+1.0;
            double t68326 = gamma_aa[index]*gcab*t68304*4.0;
            double t68327 = gamma_aa[index]*gcab*t68300*t68305*t68299*4.0;
            double t68328 = t68300*t68306*t68299*6.0;
            double t68329 = t68301*t68302*t68303;
            double t68330 = t68326+t68327+t68328+t68329+1.0;
            double t68331 = 1/t68330;
            double t68332 = gamma_aa[index]*gcab*t68304;
            double t68333 = t68332+1.0;
            double t68334 = 1/t68333;
            double t68335 = gamma_aa[index]*gcab*t68304*3.0;
            double t68336 = gamma_aa[index]*gcab*t68300*t68305*t68299;
            double t68337 = t68300*t68306*t68299*3.0;
            double t68338 = t68335+t68336+t68337+1.0;
            double t68339 = 1/t68338;
            double t68340 = gamma_aa[index]*gcab*t68304*2.0;
            double t68341 = t68300*t68306*t68299;
            double t68342 = t68340+t68341+1.0;
            double t68343 = 1/t68342;
            double t68344 = 1/pow(rho_a[index],1.0E1);
            double t68345 = 1/pow(rho_a[index],2.2E1/3.0);
            double t68347 = 1/pow(rho_a[index],1.1E1/3.0);
            double t68348 = 1/pow(rho_a[index],1.9E1/3.0);
            double t68350 = 1/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]*rho_a[index]);
            double t68357 = 1/pow(rho_a[index],3.5E1/3.0);
            double t68358 = gamma_aa[index]*gcab*t68347*(1.6E1/3.0);
            double t68359 = gamma_aa[index]*gcab*t68300*t68350*t68299*1.6E1;
            double t68360 = t68300*t68348*t68299*1.6E1;
            double t68361 = t68301*t68302*t68357*(1.6E1/3.0);
            double t68346 = t68360+t68361+t68358+t68359;
            double t68364 = gamma_aa[index]*gcab*t68347*(8.0/3.0);
            double t68365 = t68300*t68348*t68299*(8.0/3.0);
            double t68349 = t68364+t68365;
            double t68351 = 1/pow(rho_a[index],1.4E1/3.0);
            double t68352 = 1/(t68338*t68338);
            double t68353 = gamma_aa[index]*gcab*t68347*4.0;
            double t68354 = gamma_aa[index]*gcab*t68300*t68350*t68299*4.0;
            double t68355 = t68300*t68348*t68299*8.0;
            double t68356 = t68353+t68354+t68355;
            double t68362 = 1/pow(rho_a[index],3.8E1/3.0);
            double t68363 = 1/(t68330*t68330);
            double t68366 = 1/(t68342*t68342);
            double t68367 = pow(2.0,1.0/3.0);
            double t68368 = t68367*2.0;
            double t68369 = t68368-2.0;
            double t68370 = a1f*c*t68310;
            double t68371 = t68370+1.0;
            double t68372 = 1/c0f;
            double t68373 = b1f*t68312;
            double t68374 = b3f*t68313;
            double t68375 = b4f*t68314*t68275;
            double t68376 = b2f*c*t68310;
            double t68377 = t68373+t68374+t68375+t68376;
            double t68378 = 1/t68377;
            double t68379 = t68372*t68378*(1.0/2.0);
            double t68380 = t68379+1.0;
            double t68381 = 1/pow(rho_a[index],4.0/3.0);
            double t68382 = 1/pow(rho_a[index],5.0/3.0);
            double t68383 = 1/sqrt(t68311);
            double t68384 = log(t68380);
            double t68385 = 1/t68322;
            double t68386 = 1/(t68319*t68319);
            double t68387 = b4p*t68382*t68275*(2.0/3.0);
            double t68388 = b2p*c*t68381*(1.0/3.0);
            double t68389 = b1p*c*t68381*t68383*(1.0/6.0);
            double t68390 = b3p*c*t68312*t68381*(1.0/2.0);
            double t68391 = t68390+t68387+t68388+t68389;
            double t68392 = t68325*t68391*t68385*t68386;
            double t68393 = gcaa*gcaa;
            double t68394 = t68393*t68393;
            double t68395 = 1/t68380;
            double t68396 = 1/(t68377*t68377);
            double t68397 = b4f*t68382*t68275*(2.0/3.0);
            double t68398 = b2f*c*t68381*(1.0/3.0);
            double t68399 = b1f*c*t68381*t68383*(1.0/6.0);
            double t68400 = b3f*c*t68312*t68381*(1.0/2.0);
            double t68401 = t68400+t68397+t68398+t68399;
            double t68402 = a1f*c*c0f*t68381*t68384*(2.0/3.0);
            double t68403 = a1p*c*c0p*t68323*t68381*(2.0/3.0);
            double t68404 = c0f*t68371*t68384*2.0;
            double t68405 = c0p*t68323*t68325*2.0;
            double t68406 = 1/(t68333*t68333);
            double t68407 = ccab4*t68301*t68302*t68303*t68331;
            double t68408 = ccab1*gamma_aa[index]*gcab*t68304*t68334;
            double t68409 = ccab3*gamma_aa[index]*gcab*t68300*t68305*t68339*t68299;
            double t68410 = ccab2*t68300*t68306*t68343*t68299;
            double t68411 = ccab0+t68410+t68407+t68408+t68409;
            double t68412 = b2p*c*t68280*(4.0/9.0);
            double t68413 = b4p*t68275*t68279*(1.0E1/9.0);
            double t68414 = 1/pow(t68269,3.0/2.0);
            double t68415 = b3p*t68281*t68275*t68279*(1.0/1.2E1);
            double t68416 = b1p*c*t68280*t68281*(2.0/9.0);
            double t68417 = b3p*c*t68270*t68280*(2.0/3.0);
            double t68418 = t68412+t68413+t68415+t68416+t68417-b1p*t68414*t68275*t68279*(1.0/3.6E1);
            double t68419 = t68418*t68286*t68288*t68297;
            double t68420 = 1/(t68278*t68278*t68278);
            double t68421 = 1/(t68285*t68285);
            double t68422 = 1/(t68278*t68278*t68278*t68278);
            double t68423 = t68421*t68422*t68282*t68296*t68288*(1.0/2.0);
            double t68424 = 1/d2fz0;
            double t68425 = 1/(rho_a[index]*rho_a[index]);
            double t68426 = 1/Aa;
            double t68427 = b1a*t68270;
            double t68428 = b3a*t68272;
            double t68429 = b2a*c*t68268;
            double t68430 = b4a*t68275*t68276;
            double t68431 = t68430+t68427+t68428+t68429;
            double t68432 = 1/t68431;
            double t68433 = t68432*t68426*(1.0/2.0);
            double t68434 = t68433+1.0;
            double t68435 = log(t68434);
            double t68436 = a1a*c*t68268;
            double t68437 = t68436+1.0;
            double t68438 = a1p*c*t68290*t68286*t68297*t68289*(2.0/3.0);
            double t68439 = 1/pow(rho_a[index],7.0/3.0);
            double t68440 = 1/pow(t68311,3.0/2.0);
            double t68441 = t68401*t68401;
            double t68442 = t68391*t68391;
            double t68443 = 1/(t68319*t68319*t68319);
            double t68444 = t68325*t68442*t68443*t68385*2.0;
            double t68445 = b4p*t68304*t68275*(1.0E1/9.0);
            double t68446 = b2p*c*t68439*(4.0/9.0);
            double t68447 = b3p*t68304*t68275*t68383*(1.0/1.2E1);
            double t68448 = b1p*c*t68383*t68439*(2.0/9.0);
            double t68449 = b3p*c*t68312*t68439*(2.0/3.0);
            double t68561 = b1p*t68304*t68440*t68275*(1.0/3.6E1);
            double t68450 = -t68561+t68445+t68446+t68447+t68448+t68449;
            double t68451 = 1/(t68322*t68322);
            double t68452 = 1/(t68319*t68319*t68319*t68319);
            double t68453 = a1p*c*c0p*t68323*t68439*(8.0/9.0);
            double t68488 = t68401*t68371*t68395*t68396;
            double t68454 = t68402-t68403+t68392-t68488;
            double t68455 = a1p*c*c0p*t68289*t68298*(4.0/3.0);
            double t68456 = t68404-t68405;
            double t68457 = gamma_aa[index]*gcaa*t68304*4.0;
            double t68458 = gamma_aa[index]*gcaa*t68305*t68393*t68299*4.0;
            double t68459 = t68306*t68393*t68299*6.0;
            double t68460 = t68301*t68303*t68394;
            double t68461 = t68460+t68457+t68458+t68459+1.0;
            double t68462 = 1/t68461;
            double t68463 = gamma_aa[index]*gcaa*t68304;
            double t68464 = t68463+1.0;
            double t68465 = 1/t68464;
            double t68466 = gamma_aa[index]*gcaa*t68304*3.0;
            double t68467 = gamma_aa[index]*gcaa*t68305*t68393*t68299;
            double t68468 = t68306*t68393*t68299*3.0;
            double t68469 = t68466+t68467+t68468+1.0;
            double t68470 = 1/t68469;
            double t68471 = gamma_aa[index]*gcaa*t68304*2.0;
            double t68472 = t68306*t68393*t68299;
            double t68473 = t68471+t68472+1.0;
            double t68474 = 1/t68473;
            double t68475 = t68309*t68456*t68369;
            double t68476 = t68405+t68475;
            double t68477 = 1/(t68333*t68333*t68333);
            double t68478 = ccab1*gamma_aa[index]*gcab*t68300*t68344*t68477*t68299*(3.2E1/9.0);
            double t68479 = t68346*t68346;
            double t68480 = 1/(t68330*t68330*t68330);
            double t68481 = ccab4*t68301*t68302*t68303*t68480*t68479*2.0;
            double t68482 = t68349*t68349;
            double t68483 = 1/(t68342*t68342*t68342);
            double t68484 = ccab2*t68300*t68306*t68482*t68483*t68299*2.0;
            double t68485 = t68356*t68356;
            double t68486 = 1/(t68338*t68338*t68338);
            double t68487 = ccab3*gamma_aa[index]*gcab*t68300*t68305*t68485*t68486*t68299*2.0;
            double t68489 = t68309*t68454*t68369;
            double t68490 = ccaa4*t68301*t68462*t68357*t68394*(3.2E1/3.0);
            double t68491 = ccaa1*gamma_aa[index]*gcaa*t68347*t68465*(8.0/3.0);
            double t68492 = ccaa3*gamma_aa[index]*gcaa*t68350*t68470*t68393*t68299*8.0;
            double t68493 = ccaa2*t68348*t68393*t68474*t68299*(1.6E1/3.0);
            double t68494 = 1/(t68464*t68464);
            double t68495 = gamma_aa[index]*gcaa*t68347*8.0;
            double t68496 = gamma_aa[index]*gcaa*t68350*t68393*t68299*8.0;
            double t68497 = t68348*t68393*t68299*1.6E1;
            double t68498 = t68495+t68496+t68497;
            double t68499 = 1/(t68469*t68469);
            double t68500 = gamma_aa[index]*gcaa*t68347*(3.2E1/3.0);
            double t68501 = gamma_aa[index]*gcaa*t68350*t68393*t68299*3.2E1;
            double t68502 = t68348*t68393*t68299*3.2E1;
            double t68503 = t68301*t68357*t68394*(3.2E1/3.0);
            double t68504 = t68500+t68501+t68502+t68503;
            double t68505 = 1/(t68461*t68461);
            double t68506 = gamma_aa[index]*gcaa*t68347*(1.6E1/3.0);
            double t68507 = t68348*t68393*t68299*(1.6E1/3.0);
            double t68508 = t68506+t68507;
            double t68509 = 1/(t68473*t68473);
            double t68510 = t68490+t68491+t68492+t68493-ccaa1*t68348*t68393*t68494*t68299*(8.0/3.0)-ccaa4*t68301* \
               t68303*t68504*t68505*t68394-ccaa2*t68306*t68508*t68509*t68393*t68299-ccaa3*gamma_aa[index]*gcaa*t68305* \
               t68393*t68299*t68498*t68499;
            double t68511 = t68403-t68392+t68489;
            double t68512 = gx*gx;
            double t68513 = t68512*t68512;
            double t68514 = gamma_aa[index]*gx*t68304;
            double t68515 = t68514+1.0;
            double t68535 = gamma_aa[index]*gx*t68347*(3.2E1/3.0);
            double t68536 = gamma_aa[index]*gx*t68350*t68512*t68299*3.2E1;
            double t68537 = t68512*t68348*t68299*3.2E1;
            double t68538 = t68301*t68513*t68357*(3.2E1/3.0);
            double t68516 = t68535+t68536+t68537+t68538;
            double t68517 = gamma_aa[index]*gx*t68304*4.0;
            double t68518 = gamma_aa[index]*gx*t68305*t68512*t68299*4.0;
            double t68519 = t68512*t68306*t68299*6.0;
            double t68520 = t68301*t68303*t68513;
            double t68521 = t68520+t68517+t68518+t68519+1.0;
            double t68540 = gamma_aa[index]*gx*t68347*(1.6E1/3.0);
            double t68541 = t68512*t68348*t68299*(1.6E1/3.0);
            double t68522 = t68540+t68541;
            double t68523 = gamma_aa[index]*gx*t68304*2.0;
            double t68524 = t68512*t68306*t68299;
            double t68525 = t68523+t68524+1.0;
            double t68526 = gamma_aa[index]*gx*t68304*3.0;
            double t68527 = gamma_aa[index]*gx*t68305*t68512*t68299;
            double t68528 = t68512*t68306*t68299*3.0;
            double t68529 = t68526+t68527+t68528+1.0;
            double t68530 = 1/(t68529*t68529);
            double t68531 = gamma_aa[index]*gx*t68347*8.0;
            double t68532 = gamma_aa[index]*gx*t68350*t68512*t68299*8.0;
            double t68533 = t68512*t68348*t68299*1.6E1;
            double t68534 = t68531+t68532+t68533;
            double t68539 = 1/(t68521*t68521);
            double t68542 = 1/(t68525*t68525);
            double t68543 = 1/t68521;
            double t68544 = 1/t68515;
            double t68545 = 1/t68529;
            double t68546 = 1/t68525;
            double t68547 = 1/(t68515*t68515);
            double t68548 = ccaa4*t68301*t68303*t68462*t68394;
            double t68549 = ccaa1*gamma_aa[index]*gcaa*t68304*t68465;
            double t68550 = ccaa3*gamma_aa[index]*gcaa*t68305*t68470*t68393*t68299;
            double t68551 = ccaa2*t68306*t68393*t68474*t68299;
            double t68552 = ccaa0+t68550+t68551+t68548+t68549;
            double t68553 = 1/(t68377*t68377*t68377);
            double t68554 = b4f*t68304*t68275*(1.0E1/9.0);
            double t68555 = b2f*c*t68439*(4.0/9.0);
            double t68556 = b3f*t68304*t68275*t68383*(1.0/1.2E1);
            double t68557 = b1f*c*t68383*t68439*(2.0/9.0);
            double t68558 = b3f*c*t68312*t68439*(2.0/3.0);
            double t68559 = t68554+t68555+t68556+t68557+t68558-b1f*t68304*t68440*t68275*(1.0/3.6E1);
            double t68560 = t68371*t68395*t68396*t68559;
            double t68562 = t68450*t68325*t68385*t68386;
            double t68563 = 1/(t68380*t68380);
            double t68564 = 1/(t68377*t68377*t68377*t68377);
            double t68565 = t68441*t68371*t68372*t68563*t68564*(1.0/2.0);
            double t68566 = t68325*t68442*t68451*t68452*t68282*(1.0/2.0);
            double t68567 = a1f*c*t68401*t68381*t68395*t68396*(2.0/3.0);
            double t68568 = a1p*c*t68381*t68391*t68385*t68386*(2.0/3.0);
            v_rho_a_rho_a_[index] = -t68411*(-t68455-rho_a[index]*(t68423+t68419+t68438-t68420*t68286*t68296* \
               t68288*2.0-a1p*c*c0p*t68280*t68298*(8.0/9.0)+Aa*t68424*t68425*t68309*t68435*t68437*(4.0/9.0))*2.0+ \
               rho_a[index]*(-t68444-t68453+t68562+t68566+t68568+t68309*t68369*(t68560+t68444+t68453+t68565+t68567- \
               t68441*t68371*t68553*t68395*2.0-t68450*t68325*t68385*t68386-a1f*c*c0f*t68384*t68439*(8.0/9.0)-t68325* \
               t68442*t68451*t68452*t68282*(1.0/2.0)-a1p*c*t68381*t68391*t68385*t68386*(2.0/3.0)))+t68309*t68454* \
               t68369*2.0-t68325*t68391*t68385*t68386*2.0+t68290*t68286*t68288*t68297*2.0+a1p*c*c0p*t68323*t68381* \
               (4.0/3.0))+t68510*t68476*2.0+(rho_a[index]*(t68405+t68309*t68369*(t68404-c0p*t68323*t68325*2.0))*2.0- \
               c0p*rho_a[index]*t68288*t68298*4.0)*(t68481+t68484+t68478+t68487+ccab1*gamma_aa[index]*gcab*t68351* \
               t68334*(4.4E1/9.0)+ccab4*t68301*t68302*t68331*t68362*(3.68E2/9.0)-ccab1*t68300*t68406*t68345*t68299* \
               (7.6E1/9.0)+ccab2*t68300*t68343*t68345*t68299*(4.0E1/3.0)-ccab4*t68301*t68302*t68363*t68346*t68357* \
               (3.2E1/3.0)-ccab2*t68300*t68348*t68366*t68349*t68299*(1.6E1/3.0)-ccab2*t68300*t68306*t68366*t68299* \
               (gamma_aa[index]*gcab*t68351*(8.8E1/9.0)+t68300*t68345*t68299*(4.0E1/3.0))-ccab4*t68301*t68302*t68303* \
               t68363*(gamma_aa[index]*gcab*t68351*(1.76E2/9.0)+t68301*t68302*t68362*(3.68E2/9.0)+t68300*t68345*t68299* \
               8.0E1+gamma_aa[index]*gcab*t68300*t68344*t68299*(3.04E2/3.0))+ccab3*gamma_aa[index]*gcab*t68300*t68344* \
               t68339*t68299*(7.6E1/3.0)-ccab3*gamma_aa[index]*gcab*t68300*t68305*t68352*t68299*(gamma_aa[index]* \
               gcab*t68351*(4.4E1/3.0)+t68300*t68345*t68299*4.0E1+gamma_aa[index]*gcab*t68300*t68344*t68299*(7.6E1/ \
               3.0))-ccab3*gamma_aa[index]*gcab*t68300*t68350*t68352*t68356*t68299*8.0)+t68552*(t68403-t68392+t68309* \
               t68369*(t68402+t68392-t68401*t68371*t68395*t68396-a1p*c*c0p*t68323*t68381*(2.0/3.0)))*2.0+(rho_a[index]* \
               t68476*2.0-c0p*rho_a[index]*t68288*t68298*4.0)*(t68481+t68484+t68478+t68487+ccab4*t68301*t68302*t68331* \
               t68362*(6.4E1/3.0)-ccab2*t68301*t68302*t68362*t68366*(3.2E1/9.0)-ccab1*t68300*t68406*t68345*t68299* \
               (3.2E1/9.0)+ccab2*t68300*t68343*t68345*t68299*(3.2E1/9.0)-ccab4*t68301*t68302*t68363*t68346*t68357* \
               (3.2E1/3.0)-ccab2*t68300*t68348*t68366*t68349*t68299*(1.6E1/3.0)-ccab4*t68301*t68302*t68303*t68363* \
               (t68301*t68302*t68362*(6.4E1/3.0)+t68300*t68345*t68299*(6.4E1/3.0)+gamma_aa[index]*gcab*t68300*t68344* \
               t68299*(1.28E2/3.0))+ccab3*gamma_aa[index]*gcab*t68300*t68344*t68339*t68299*(3.2E1/3.0)-ccab3*gamma_aa[index]* \
               gcab*t68300*t68305*t68352*t68299*(t68300*t68345*t68299*(3.2E1/3.0)+gamma_aa[index]*gcab*t68300*t68344* \
               t68299*(3.2E1/3.0))-ccab3*gamma_aa[index]*gcab*t68300*t68350*t68352*t68356*t68299*8.0)+t68411*(t68455+ \
               rho_a[index]*(t68423+t68419+t68438-t68420*t68286*t68296*t68288*2.0-a1p*c*c0p*t68280*t68298*(8.0/9.0) \
               -Aa*t68424*t68425*t68309*t68435*t68437*(4.0/9.0))*2.0-t68290*t68286*t68288*t68297*2.0)+(-t68405+rho_a[index]* \
               t68511+rho_a[index]*(t68290*t68286*t68288*t68297-a1p*c*c0p*t68289*t68298*(2.0/3.0))*2.0+c0p*t68288* \
               t68298*2.0-t68309*t68456*t68369)*(ccab1*gamma_aa[index]*gcab*t68334*t68347*(4.0/3.0)+ccab4*t68301* \
               t68302*t68331*t68357*(1.6E1/3.0)-ccab1*t68300*t68406*t68348*t68299*(4.0/3.0)+ccab2*t68300*t68343*t68348* \
               t68299*(8.0/3.0)-ccab4*t68301*t68302*t68303*t68363*t68346-ccab2*t68300*t68306*t68366*t68349*t68299+ \
               ccab3*gamma_aa[index]*gcab*t68300*t68350*t68339*t68299*4.0-ccab3*gamma_aa[index]*gcab*t68300*t68305* \
               t68352*t68356*t68299)*4.0-c0*pow(rho_a[index],1.0/3.0)*(cx1*gamma_aa[index]*gx*t68544*t68347*(8.0/ \
               3.0)-cx1*t68512*t68348*t68547*t68299*(8.0/3.0)+cx2*t68512*t68348*t68546*t68299*(1.6E1/3.0)+cx4*t68301* \
               t68513*t68543*t68357*(3.2E1/3.0)-cx2*t68512*t68306*t68522*t68542*t68299-cx4*t68301*t68303*t68513*t68516* \
               t68539+cx3*gamma_aa[index]*gx*t68350*t68512*t68545*t68299*8.0-cx3*gamma_aa[index]*gx*t68305*t68512* \
               t68530*t68534*t68299)*(8.0/3.0)-rho_a[index]*t68476*(ccaa1*gamma_aa[index]*gcaa*t68351*t68465*(8.8E1/ \
               9.0)+ccaa4*t68301*t68362*t68462*t68394*(1.12E3/9.0)+ccaa2*t68345*t68393*t68474*t68299*(3.04E2/9.0) \
               -ccaa1*t68345*t68393*t68494*t68299*2.4E1-ccaa4*t68301*t68504*t68505*t68357*t68394*(6.4E1/3.0)-ccaa2* \
               t68508*t68509*t68348*t68393*t68299*(3.2E1/3.0)-ccaa2*t68306*t68509*t68393*t68299*(gamma_aa[index]* \
               gcaa*t68351*(1.76E2/9.0)+t68345*t68393*t68299*(3.04E2/9.0))-ccaa4*t68301*t68303*t68505*t68394*(gamma_aa[index]* \
               gcaa*t68351*(3.52E2/9.0)+t68301*t68362*t68394*(1.12E3/9.0)+t68345*t68393*t68299*(6.08E2/3.0)+gamma_aa[index]* \
               gcaa*t68344*t68393*t68299*2.88E2)+ccaa4*t68301*t68303*(t68504*t68504)*1/(t68461*t68461*t68461)*t68394* \
               2.0+ccaa2*t68306*(t68508*t68508)*1/(t68473*t68473*t68473)*t68393*t68299*2.0+ccaa3*gamma_aa[index]* \
               gcaa*t68344*t68470*t68393*t68299*7.2E1+ccaa1*gamma_aa[index]*gcaa*t68344*1/(t68464*t68464*t68464)* \
               t68393*t68299*(1.28E2/9.0)+ccaa3*gamma_aa[index]*gcaa*t68305*t68393*1/(t68469*t68469*t68469)*t68299* \
               (t68498*t68498)*2.0-ccaa3*gamma_aa[index]*gcaa*t68305*t68393*t68299*t68499*(gamma_aa[index]*gcaa*t68351* \
               (8.8E1/3.0)+t68345*t68393*t68299*(3.04E2/3.0)+gamma_aa[index]*gcaa*t68344*t68393*t68299*7.2E1)-ccaa3* \
               gamma_aa[index]*gcaa*t68350*t68393*t68299*t68498*t68499*1.6E1)+rho_a[index]*t68552*(-t68444-t68453+ \
               t68562+t68566+t68568+t68309*t68369*(t68560+t68444+t68453-t68562+t68565-t68566+t68567-t68568-t68441* \
               t68371*t68553*t68395*2.0-a1f*c*c0f*t68384*t68439*(8.0/9.0)))-rho_a[index]*t68510*t68511*2.0+c0*pow(rho_a[index],4.0/ \
               3.0)*(cx1*gamma_aa[index]*gx*t68351*t68544*(8.8E1/9.0)-cx1*t68512*t68345*t68547*t68299*2.4E1+cx2*t68512* \
               t68345*t68546*t68299*(3.04E2/9.0)+cx4*t68301*t68513*t68362*t68543*(1.12E3/9.0)-cx2*t68512*t68522*t68542* \
               t68348*t68299*(3.2E1/3.0)-cx4*t68301*t68513*t68516*t68357*t68539*(6.4E1/3.0)-cx2*t68512*t68306*t68542* \
               t68299*(gamma_aa[index]*gx*t68351*(1.76E2/9.0)+t68512*t68345*t68299*(3.04E2/9.0))-cx4*t68301*t68303* \
               t68513*t68539*(gamma_aa[index]*gx*t68351*(3.52E2/9.0)+t68301*t68513*t68362*(1.12E3/9.0)+t68512*t68345* \
               t68299*(6.08E2/3.0)+gamma_aa[index]*gx*t68512*t68344*t68299*2.88E2)+cx2*t68512*t68306*(t68522*t68522) \
               *1/(t68525*t68525*t68525)*t68299*2.0+cx4*t68301*t68303*1/(t68521*t68521*t68521)*t68513*(t68516*t68516) \
               *2.0+cx3*gamma_aa[index]*gx*t68512*t68344*t68545*t68299*7.2E1+cx1*gamma_aa[index]*gx*t68512*t68344* \
               1/(t68515*t68515*t68515)*t68299*(1.28E2/9.0)+cx3*gamma_aa[index]*gx*t68305*t68512*(t68534*t68534)* \
               1/(t68529*t68529*t68529)*t68299*2.0-cx3*gamma_aa[index]*gx*t68305*t68512*t68530*t68299*(gamma_aa[index]* \
               gx*t68351*(8.8E1/3.0)+t68512*t68345*t68299*(3.04E2/3.0)+gamma_aa[index]*gx*t68512*t68344*t68299*7.2E1) \
               -cx3*gamma_aa[index]*gx*t68350*t68512*t68530*t68534*t68299*1.6E1)+c0*t68314*(cx0+cx1*gamma_aa[index]* \
               gx*t68304*t68544+cx2*t68512*t68306*t68546*t68299+cx4*t68301*t68303*t68513*t68543+cx3*gamma_aa[index]* \
               gx*t68305*t68512*t68545*t68299)*(4.0/9.0);
        } else {
            v_rho_a_rho_a_[index] = 0.0;
        } 
        
        if (is_gga_) {
        
            //V_rho_a_gamma_aa
            if (rho_a[index] > cutoff_) {
                double t68570 = 1/pow(rho_a[index],1.0/3.0);
                double t68571 = c*t68570;
                double t68572 = sqrt(t68571);
                double t68573 = pow(t68571,3.0/2.0);
                double t68574 = c*c;
                double t68575 = 1/pow(rho_a[index],2.0/3.0);
                double t68576 = 1/c0p;
                double t68577 = b1p*t68572;
                double t68578 = b3p*t68573;
                double t68579 = b4p*t68574*t68575;
                double t68580 = b2p*c*t68570;
                double t68581 = t68580+t68577+t68578+t68579;
                double t68582 = 1/t68581;
                double t68583 = t68582*t68576*(1.0/2.0);
                double t68584 = t68583+1.0;
                double t68585 = log(t68584);
                double t68586 = a1p*c*t68570;
                double t68587 = t68586+1.0;
                double t68588 = 1/pow(rho_a[index],8.0/3.0);
                double t68589 = gamma_aa[index]*gamma_aa[index];
                double t68590 = gcaa*gcaa;
                double t68591 = t68590*t68590;
                double t68592 = 1/pow(rho_a[index],3.2E1/3.0);
                double t68593 = 1/pow(rho_a[index],1.6E1/3.0);
                double t68594 = 1/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t68595 = gamma_aa[index]*gcaa*t68588;
                double t68596 = t68595+1.0;
                double t68597 = gamma_aa[index]*gcaa*t68588*3.0;
                double t68598 = gamma_aa[index]*gcaa*t68590*t68594*t68589;
                double t68599 = t68590*t68593*t68589*3.0;
                double t68600 = t68597+t68598+t68599+1.0;
                double t68601 = t68589*t68589;
                double t68602 = gamma_aa[index]*gcaa*t68588*4.0;
                double t68603 = gamma_aa[index]*gcaa*t68590*t68594*t68589*4.0;
                double t68604 = t68590*t68593*t68589*6.0;
                double t68605 = t68601*t68591*t68592;
                double t68606 = t68602+t68603+t68604+t68605+1.0;
                double t68607 = gamma_aa[index]*gcaa*t68588*2.0;
                double t68608 = t68590*t68593*t68589;
                double t68609 = t68607+t68608+1.0;
                double t68610 = pow(2.0,1.0/3.0);
                double t68611 = t68610*2.0;
                double t68612 = t68611-2.0;
                double t68613 = two_13*2.0;
                double t68614 = t68613-2.0;
                double t68615 = 1/t68614;
                double t68616 = 1/c0f;
                double t68617 = b1f*t68572;
                double t68618 = b3f*t68573;
                double t68619 = b4f*t68574*t68575;
                double t68620 = b2f*c*t68570;
                double t68621 = t68620+t68617+t68618+t68619;
                double t68622 = 1/t68621;
                double t68623 = t68622*t68616*(1.0/2.0);
                double t68624 = t68623+1.0;
                double t68625 = log(t68624);
                double t68626 = a1f*c*t68570;
                double t68627 = t68626+1.0;
                double t68628 = c0f*t68625*t68627*2.0;
                double t68629 = c0p*t68585*t68587*2.0;
                double t68630 = rho_a[index]*2.0;
                double t68631 = 1/pow(t68630,1.0/3.0);
                double t68632 = c*t68631;
                double t68633 = gcab*gcab;
                double t68634 = t68633*t68633;
                double t68635 = 1/pow(rho_a[index],1.9E1/3.0);
                double t68636 = 1/pow(rho_a[index],3.5E1/3.0);
                double t68637 = gamma_aa[index]*gcab*t68588*2.0;
                double t68638 = t68633*t68593*t68589;
                double t68639 = t68637+t68638+1.0;
                double t68640 = 1/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]*rho_a[index]);
                double t68641 = gamma_aa[index]*gcab*t68588;
                double t68642 = t68641+1.0;
                double t68643 = gamma_aa[index]*gcab*t68588*3.0;
                double t68644 = gamma_aa[index]*gcab*t68633*t68594*t68589;
                double t68645 = t68633*t68593*t68589*3.0;
                double t68646 = t68643+t68644+t68645+1.0;
                double t68647 = gamma_aa[index]*gcab*t68588*4.0;
                double t68648 = gamma_aa[index]*gcab*t68633*t68594*t68589*4.0;
                double t68649 = t68633*t68593*t68589*6.0;
                double t68650 = t68601*t68634*t68592;
                double t68651 = t68650+t68647+t68648+t68649+1.0;
                double t68652 = 1/pow(rho_a[index],1.1E1/3.0);
                double t68653 = 1/(t68639*t68639);
                double t68654 = 1/(t68646*t68646);
                double t68655 = 1/(t68651*t68651);
                double t68656 = gamma_aa[index]*gcab*t68652*(8.0/3.0);
                double t68657 = t68633*t68635*t68589*(8.0/3.0);
                double t68658 = t68656+t68657;
                double t68659 = gcab*t68588;
                double t68660 = gamma_aa[index]*t68633*t68593;
                double t68661 = t68660+t68659;
                double t68662 = gcab*t68588*(3.0/2.0);
                double t68663 = gamma_aa[index]*t68633*t68593*3.0;
                double t68664 = gcab*t68633*t68594*t68589*(3.0/2.0);
                double t68665 = t68662+t68663+t68664;
                double t68666 = gamma_aa[index]*gcab*t68652*4.0;
                double t68667 = gamma_aa[index]*gcab*t68640*t68633*t68589*4.0;
                double t68668 = t68633*t68635*t68589*8.0;
                double t68669 = t68666+t68667+t68668;
                double t68670 = gamma_aa[index]*gcab*t68652*(1.6E1/3.0);
                double t68671 = gamma_aa[index]*gcab*t68640*t68633*t68589*1.6E1;
                double t68672 = t68633*t68635*t68589*1.6E1;
                double t68673 = t68601*t68634*t68636*(1.6E1/3.0);
                double t68674 = t68670+t68671+t68672+t68673;
                double t68675 = gcab*t68588*2.0;
                double t68676 = gamma_aa[index]*t68633*t68593*6.0;
                double t68677 = gcab*t68633*t68594*t68589*6.0;
                double t68678 = gamma_aa[index]*t68634*t68592*t68589*2.0;
                double t68679 = t68675+t68676+t68677+t68678;
                double t68680 = t68628-t68629;
                double t68681 = t68612*t68615*t68680;
                double t68682 = t68681+t68629;
                double t68683 = rho_a[index]*t68682*2.0;
                double t68684 = sqrt(t68632);
                double t68685 = b1p*t68684;
                double t68686 = pow(t68632,3.0/2.0);
                double t68687 = b3p*t68686;
                double t68688 = b2p*c*t68631;
                double t68689 = 1/pow(t68630,2.0/3.0);
                double t68690 = b4p*t68574*t68689;
                double t68691 = t68690+t68685+t68687+t68688;
                double t68692 = 1/t68691;
                double t68693 = t68692*t68576*(1.0/2.0);
                double t68694 = t68693+1.0;
                double t68695 = log(t68694);
                double t68696 = a1p*c*t68631;
                double t68697 = t68696+1.0;
                double t68698 = t68683-c0p*rho_a[index]*t68695*t68697*4.0;
                double t68699 = 1/t68651;
                double t68700 = 1/t68639;
                double t68701 = 1/t68646;
                double t68702 = 1/(t68642*t68642);
                double t68703 = 1/(t68642*t68642*t68642);
                double t68704 = ccab3*gcab*t68633*t68654*t68594*t68669*t68589*(3.0/2.0);
                double t68705 = ccab2*gamma_aa[index]*t68633*t68653*t68593*t68658;
                double t68706 = ccab3*gamma_aa[index]*gcab*t68640*t68633*t68654*t68665*t68589*4.0;
                double t68707 = ccab4*gamma_aa[index]*t68634*t68592*t68655*t68674*t68589*2.0;
                double t68708 = ccab4*t68601*t68634*t68636*t68655*t68679*(1.6E1/3.0);
                double t68709 = ccab2*t68633*t68661*t68635*t68653*t68589*(8.0/3.0);
                double t68710 = gamma_aa[index]*t68633*t68635*4.0;
                double t68711 = 1/(t68639*t68639*t68639);
                double t68712 = 1/(t68646*t68646*t68646);
                double t68713 = 1/(t68651*t68651*t68651);
                double t68714 = 1/pow(t68630,4.0/3.0);
                double t68715 = 1/pow(rho_a[index],4.0/3.0);
                double t68716 = 1/pow(rho_a[index],5.0/3.0);
                double t68717 = 1/sqrt(t68571);
                double t68718 = 1/t68584;
                double t68719 = 1/(t68581*t68581);
                double t68720 = b4p*t68716*t68574*(2.0/3.0);
                double t68721 = b2p*c*t68715*(1.0/3.0);
                double t68722 = b1p*c*t68715*t68717*(1.0/6.0);
                double t68723 = b3p*c*t68715*t68572*(1.0/2.0);
                double t68724 = t68720+t68721+t68722+t68723;
                double t68725 = t68724*t68718*t68719*t68587;
                double t68726 = 1/t68642;
                double t68727 = gx*gx;
                double t68728 = t68727*t68727;
                double t68729 = gamma_aa[index]*gx*t68588;
                double t68730 = t68729+1.0;
                double t68731 = gamma_aa[index]*gx*t68588*3.0;
                double t68732 = gamma_aa[index]*gx*t68727*t68594*t68589;
                double t68733 = t68727*t68593*t68589*3.0;
                double t68734 = t68731+t68732+t68733+1.0;
                double t68735 = gamma_aa[index]*gx*t68588*4.0;
                double t68736 = gamma_aa[index]*gx*t68727*t68594*t68589*4.0;
                double t68737 = t68727*t68593*t68589*6.0;
                double t68738 = t68601*t68592*t68728;
                double t68739 = t68735+t68736+t68737+t68738+1.0;
                double t68740 = gamma_aa[index]*gx*t68588*2.0;
                double t68741 = t68727*t68593*t68589;
                double t68742 = t68740+t68741+1.0;
                double t68743 = 1/t68596;
                double t68744 = 1/t68606;
                double t68745 = 1/t68609;
                double t68746 = 1/t68600;
                double t68747 = 1/(t68596*t68596);
                double t68748 = 1/(t68600*t68600);
                double t68749 = 1/(t68609*t68609);
                double t68750 = gcaa*t68588*3.0;
                double t68751 = gamma_aa[index]*t68590*t68593*6.0;
                double t68752 = gcaa*t68590*t68594*t68589*3.0;
                double t68753 = t68750+t68751+t68752;
                double t68754 = 1/(t68606*t68606);
                double t68755 = gcaa*t68588*4.0;
                double t68756 = gamma_aa[index]*t68590*t68593*1.2E1;
                double t68757 = gcaa*t68590*t68594*t68589*1.2E1;
                double t68758 = gamma_aa[index]*t68591*t68592*t68589*4.0;
                double t68759 = t68755+t68756+t68757+t68758;
                double t68760 = gcaa*t68588*2.0;
                double t68761 = gamma_aa[index]*t68590*t68593*2.0;
                double t68762 = t68760+t68761;
                double t68763 = gamma_aa[index]*gcaa*t68652*(1.6E1/3.0);
                double t68764 = t68590*t68635*t68589*(1.6E1/3.0);
                double t68765 = t68763+t68764;
                double t68766 = gamma_aa[index]*gcaa*t68652*8.0;
                double t68767 = gamma_aa[index]*gcaa*t68640*t68590*t68589*8.0;
                double t68768 = t68590*t68635*t68589*1.6E1;
                double t68769 = t68766+t68767+t68768;
                double t68770 = gamma_aa[index]*gcaa*t68652*(3.2E1/3.0);
                double t68771 = gamma_aa[index]*gcaa*t68640*t68590*t68589*3.2E1;
                double t68772 = t68590*t68635*t68589*3.2E1;
                double t68773 = t68601*t68591*t68636*(3.2E1/3.0);
                double t68774 = t68770+t68771+t68772+t68773;
                double t68775 = 1/t68624;
                double t68776 = 1/(t68621*t68621);
                double t68777 = b4f*t68716*t68574*(2.0/3.0);
                double t68778 = b2f*c*t68715*(1.0/3.0);
                double t68779 = b1f*c*t68715*t68717*(1.0/6.0);
                double t68780 = b3f*c*t68715*t68572*(1.0/2.0);
                double t68781 = t68780+t68777+t68778+t68779;
                double t68782 = a1f*c*c0f*t68625*t68715*(2.0/3.0);
                double t68783 = a1p*c*c0p*t68715*t68585*(2.0/3.0);
                double t68784 = ccaa1*gcaa*t68743*t68588;
                double t68785 = ccaa4*gamma_aa[index]*t68591*t68744*t68592*t68589*4.0;
                double t68786 = ccaa2*gamma_aa[index]*t68590*t68745*t68593*2.0;
                double t68787 = ccaa3*gcaa*t68590*t68746*t68594*t68589*3.0;
                double t68788 = t68784+t68785+t68786+t68787-ccaa1*gamma_aa[index]*t68590*t68593*t68747-ccaa4*t68601* \
                   t68591*t68592*t68754*t68759-ccaa2*t68590*t68762*t68593*t68749*t68589-ccaa3*gamma_aa[index]*gcaa*t68590* \
                   t68753*t68594*t68748*t68589;
                double t68789 = 1/t68730;
                double t68790 = 1/t68739;
                double t68791 = 1/t68742;
                double t68792 = 1/t68734;
                double t68793 = 1/(t68730*t68730);
                double t68794 = 1/(t68734*t68734);
                double t68795 = 1/(t68742*t68742);
                double t68796 = gx*t68588*3.0;
                double t68797 = gamma_aa[index]*t68727*t68593*6.0;
                double t68798 = gx*t68727*t68594*t68589*3.0;
                double t68799 = t68796+t68797+t68798;
                double t68800 = 1/(t68739*t68739);
                double t68801 = gx*t68588*4.0;
                double t68802 = gamma_aa[index]*t68727*t68593*1.2E1;
                double t68803 = gx*t68727*t68594*t68589*1.2E1;
                double t68804 = gamma_aa[index]*t68592*t68728*t68589*4.0;
                double t68805 = t68801+t68802+t68803+t68804;
                double t68806 = gx*t68588*2.0;
                double t68807 = gamma_aa[index]*t68727*t68593*2.0;
                double t68808 = t68806+t68807;
                double t68809 = gamma_aa[index]*gx*t68652*(1.6E1/3.0);
                double t68810 = t68635*t68727*t68589*(1.6E1/3.0);
                double t68811 = t68810+t68809;
                double t68812 = gamma_aa[index]*gx*t68652*8.0;
                double t68813 = gamma_aa[index]*gx*t68640*t68727*t68589*8.0;
                double t68814 = t68635*t68727*t68589*1.6E1;
                double t68815 = t68812+t68813+t68814;
                double t68816 = gamma_aa[index]*gx*t68652*(3.2E1/3.0);
                double t68817 = gamma_aa[index]*gx*t68640*t68727*t68589*3.2E1;
                double t68818 = t68635*t68727*t68589*3.2E1;
                double t68819 = t68601*t68636*t68728*(3.2E1/3.0);
                double t68820 = t68816+t68817+t68818+t68819;
                v_rho_a_gamma_aa_[index] = t68698*(t68704+t68705+t68706+t68707+t68708+t68709-ccab2*gamma_aa[index]* \
                   t68700*t68633*t68635*(4.0/3.0)+ccab1*gamma_aa[index]*t68702*t68633*t68635*(4.0/3.0)+ccab4*t68601*t68634* \
                   t68592*t68655*(gamma_aa[index]*t68633*t68635*8.0+gamma_aa[index]*t68634*t68636*t68589*8.0+gcab*t68640* \
                   t68633*t68589*1.6E1)+ccab2*gamma_aa[index]*t68634*t68653*t68636*t68589*(4.0/3.0)-ccab4*gamma_aa[index]* \
                   t68634*t68636*t68589*t68699*8.0-ccab1*gcab*t68640*t68703*t68633*t68589*(4.0/3.0)-ccab3*gcab*t68701* \
                   t68640*t68633*t68589*4.0-ccab4*t68601*t68713*t68634*t68592*t68674*t68679*2.0-ccab2*t68711*t68633*t68661* \
                   t68593*t68658*t68589*2.0+ccab3*gamma_aa[index]*gcab*t68633*t68654*t68594*t68589*(t68710+gcab*t68640* \
                   t68633*t68589*4.0)-ccab3*gamma_aa[index]*gcab*t68712*t68633*t68665*t68594*t68669*t68589*2.0)-t68788* \
                   (t68629+t68612*t68615*(t68628-c0p*t68585*t68587*2.0))-(-t68681-t68629+rho_a[index]*((1/(t68691*t68691) \
                   *t68697*(b4p*1/pow(t68630,5.0/3.0)*t68574*(2.0/3.0)+b2p*c*t68714*(1.0/3.0)+b3p*c*t68714*t68684*(1.0/ \
                   2.0)+b1p*c*1/sqrt(t68632)*t68714*(1.0/6.0)))/t68694-a1p*c*c0p*t68714*t68695*(2.0/3.0))*2.0+rho_a[index]* \
                   (-t68725+t68783+t68612*t68615*(t68725+t68782-t68627*t68781*t68775*t68776-a1p*c*c0p*t68715*t68585*(2.0/ \
                   3.0)))+c0p*t68695*t68697*2.0)*(ccab1*gcab*t68726*t68588*(1.0/2.0)+ccab2*gamma_aa[index]*t68700*t68633* \
                   t68593-ccab1*gamma_aa[index]*t68702*t68633*t68593*(1.0/2.0)-ccab4*t68601*t68634*t68592*t68655*t68679- \
                   ccab2*t68633*t68661*t68653*t68593*t68589+ccab4*gamma_aa[index]*t68634*t68592*t68589*t68699*2.0+ccab3* \
                   gcab*t68701*t68633*t68594*t68589*(3.0/2.0)-ccab3*gamma_aa[index]*gcab*t68633*t68654*t68665*t68594* \
                   t68589)*2.0+t68698*(t68704+t68705+t68706+t68707+t68708+t68709-ccab1*gcab*t68652*t68726*(4.0/3.0)-ccab2* \
                   gamma_aa[index]*t68700*t68633*t68635*4.0+ccab1*gamma_aa[index]*t68702*t68633*t68635*(8.0/3.0)+ccab4* \
                   t68601*t68634*t68592*t68655*(gcab*t68652*(1.6E1/3.0)+gamma_aa[index]*t68633*t68635*2.4E1+gamma_aa[index]* \
                   t68634*t68636*t68589*(4.0E1/3.0)+gcab*t68640*t68633*t68589*3.2E1)+ccab2*t68633*t68653*t68593*t68589* \
                   (t68710+gcab*t68652*(8.0/3.0))-ccab4*gamma_aa[index]*t68634*t68636*t68589*t68699*(4.0E1/3.0)-ccab1* \
                   gcab*t68640*t68703*t68633*t68589*(4.0/3.0)-ccab3*gcab*t68701*t68640*t68633*t68589*8.0-ccab4*t68601* \
                   t68713*t68634*t68592*t68674*t68679*2.0-ccab2*t68711*t68633*t68661*t68593*t68658*t68589*2.0+ccab3*gamma_aa[index]* \
                   gcab*t68633*t68654*t68594*t68589*(gcab*t68652*4.0+gamma_aa[index]*t68633*t68635*1.2E1+gcab*t68640* \
                   t68633*t68589*8.0)-ccab3*gamma_aa[index]*gcab*t68712*t68633*t68665*t68594*t68669*t68589*2.0)-rho_a[index]* \
                   t68682*(ccaa1*gcaa*t68652*t68743*(-8.0/3.0)-ccaa2*gamma_aa[index]*t68590*t68635*t68745*(3.2E1/3.0) \
                   +ccaa1*gamma_aa[index]*t68590*t68635*t68747*8.0+ccaa4*t68601*t68591*t68636*t68754*t68759*(3.2E1/3.0) \
                   +ccaa2*t68590*t68635*t68762*t68749*t68589*(1.6E1/3.0)+ccaa4*t68601*t68591*t68592*t68754*(gcaa*t68652* \
                   (3.2E1/3.0)+gamma_aa[index]*t68590*t68635*6.4E1+gamma_aa[index]*t68591*t68636*t68589*(1.28E2/3.0)+ \
                   gcaa*t68640*t68590*t68589*9.6E1)-ccaa1*gcaa*t68640*t68590*1/(t68596*t68596*t68596)*t68589*(1.6E1/3.0) \
                   +ccaa2*t68590*t68593*t68749*t68589*(gcaa*t68652*(1.6E1/3.0)+gamma_aa[index]*t68590*t68635*(3.2E1/3.0) \
                   )+ccaa2*gamma_aa[index]*t68590*t68593*t68765*t68749*2.0-ccaa4*gamma_aa[index]*t68591*t68636*t68744* \
                   t68589*(1.28E2/3.0)-ccaa3*gcaa*t68640*t68590*t68746*t68589*2.4E1+ccaa4*gamma_aa[index]*t68591*t68592* \
                   t68754*t68774*t68589*4.0+ccaa3*gcaa*t68590*t68594*t68748*t68589*t68769*3.0-ccaa4*t68601*1/(t68606* \
                   t68606*t68606)*t68591*t68592*t68774*t68759*2.0-ccaa2*t68590*1/(t68609*t68609*t68609)*t68762*t68593* \
                   t68765*t68589*2.0+ccaa3*gamma_aa[index]*gcaa*t68590*t68594*t68748*t68589*(gcaa*t68652*8.0+gamma_aa[index]* \
                   t68590*t68635*3.2E1+gcaa*t68640*t68590*t68589*2.4E1)+ccaa3*gamma_aa[index]*gcaa*t68640*t68590*t68753* \
                   t68748*t68589*8.0-ccaa3*gamma_aa[index]*gcaa*1/(t68600*t68600*t68600)*t68590*t68753*t68594*t68589* \
                   t68769*2.0)+c0*pow(rho_a[index],4.0/3.0)*(cx1*gx*t68652*t68789*(-8.0/3.0)+cx1*gamma_aa[index]*t68635* \
                   t68727*t68793*8.0-cx2*gamma_aa[index]*t68635*t68727*t68791*(3.2E1/3.0)+cx2*t68635*t68727*t68808*t68795* \
                   t68589*(1.6E1/3.0)+cx4*t68601*t68800*t68805*t68636*t68728*(3.2E1/3.0)+cx4*t68601*t68800*t68592*t68728* \
                   (gx*t68652*(3.2E1/3.0)+gamma_aa[index]*t68635*t68727*6.4E1+gamma_aa[index]*t68636*t68728*t68589*(1.28E2/ \
                   3.0)+gx*t68640*t68727*t68589*9.6E1)-cx1*gx*t68640*1/(t68730*t68730*t68730)*t68727*t68589*(1.6E1/3.0) \
                   +cx2*t68727*t68593*t68795*t68589*(gx*t68652*(1.6E1/3.0)+gamma_aa[index]*t68635*t68727*(3.2E1/3.0)) \
                   +cx2*gamma_aa[index]*t68811*t68727*t68593*t68795*2.0-cx4*gamma_aa[index]*t68636*t68790*t68728*t68589* \
                   (1.28E2/3.0)-cx3*gx*t68640*t68727*t68792*t68589*2.4E1+cx4*gamma_aa[index]*t68800*t68820*t68592*t68728* \
                   t68589*4.0+cx3*gx*t68815*t68727*t68594*t68794*t68589*3.0-cx2*t68811*1/(t68742*t68742*t68742)*t68727* \
                   t68808*t68593*t68589*2.0-cx4*t68601*t68820*t68805*t68592*t68728*1/(t68739*t68739*t68739)*2.0+cx3*gamma_aa[index]* \
                   gx*t68727*t68594*t68794*t68589*(gx*t68652*8.0+gamma_aa[index]*t68635*t68727*3.2E1+gx*t68640*t68727* \
                   t68589*2.4E1)+cx3*gamma_aa[index]*gx*t68640*t68727*t68794*t68589*t68799*8.0-cx3*gamma_aa[index]*gx* \
                   1/(t68734*t68734*t68734)*t68815*t68727*t68594*t68589*t68799*2.0)+rho_a[index]*t68788*(-t68725+t68783+ \
                   t68612*t68615*(t68725+t68782-t68783-t68627*t68781*t68775*t68776))+c0*pow(rho_a[index],1.0/3.0)*(cx1* \
                   gx*t68588*t68789-cx1*gamma_aa[index]*t68727*t68593*t68793+cx2*gamma_aa[index]*t68727*t68593*t68791* \
                   2.0-cx2*t68727*t68808*t68593*t68795*t68589-cx4*t68601*t68800*t68805*t68592*t68728+cx4*gamma_aa[index]* \
                   t68592*t68790*t68728*t68589*4.0+cx3*gx*t68727*t68594*t68792*t68589*3.0-cx3*gamma_aa[index]*gx*t68727* \
                   t68594*t68794*t68589*t68799)*(4.0/3.0);
            } else {
                v_rho_a_gamma_aa_[index] = 0.0;
            } 
        
            //V_gamma_aa_gamma_aa
            if (rho_a[index] > cutoff_) {
                double t68822 = 1/pow(rho_a[index],1.0/3.0);
                double t68823 = c*t68822;
                double t68824 = sqrt(t68823);
                double t68825 = pow(t68823,3.0/2.0);
                double t68826 = c*c;
                double t68827 = 1/pow(rho_a[index],2.0/3.0);
                double t68828 = 1/c0p;
                double t68829 = b1p*t68824;
                double t68830 = b3p*t68825;
                double t68831 = b4p*t68826*t68827;
                double t68832 = b2p*c*t68822;
                double t68833 = t68830+t68831+t68832+t68829;
                double t68834 = 1/t68833;
                double t68835 = t68834*t68828*(1.0/2.0);
                double t68836 = t68835+1.0;
                double t68837 = log(t68836);
                double t68838 = a1p*c*t68822;
                double t68839 = t68838+1.0;
                double t68840 = rho_a[index]*2.0;
                double t68841 = 1/pow(t68840,1.0/3.0);
                double t68842 = c*t68841;
                double t68843 = gcab*gcab;
                double t68844 = 1/pow(rho_a[index],1.6E1/3.0);
                double t68845 = 1/pow(rho_a[index],8.0/3.0);
                double t68846 = gamma_aa[index]*gamma_aa[index];
                double t68847 = t68843*t68843;
                double t68848 = 1/pow(rho_a[index],3.2E1/3.0);
                double t68849 = 1/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t68850 = gamma_aa[index]*gcab*t68845;
                double t68851 = t68850+1.0;
                double t68852 = gamma_aa[index]*gcab*t68845*2.0;
                double t68853 = t68843*t68844*t68846;
                double t68854 = t68852+t68853+1.0;
                double t68855 = gamma_aa[index]*gcab*t68845*3.0;
                double t68856 = gamma_aa[index]*gcab*t68843*t68846*t68849;
                double t68857 = t68843*t68844*t68846*3.0;
                double t68858 = t68855+t68856+t68857+1.0;
                double t68859 = t68846*t68846;
                double t68875 = gcab*t68845*2.0;
                double t68876 = gamma_aa[index]*t68843*t68844*6.0;
                double t68877 = gcab*t68843*t68846*t68849*6.0;
                double t68878 = gamma_aa[index]*t68846*t68847*t68848*2.0;
                double t68860 = t68875+t68876+t68877+t68878;
                double t68861 = gamma_aa[index]*gcab*t68845*4.0;
                double t68862 = gamma_aa[index]*gcab*t68843*t68846*t68849*4.0;
                double t68863 = t68843*t68844*t68846*6.0;
                double t68864 = t68847*t68848*t68859;
                double t68865 = t68861+t68862+t68863+t68864+1.0;
                double t68868 = gcab*t68845;
                double t68869 = gamma_aa[index]*t68843*t68844;
                double t68866 = t68868+t68869;
                double t68867 = 1/(t68858*t68858);
                double t68870 = 1/(t68854*t68854);
                double t68871 = gcab*t68845*(3.0/2.0);
                double t68872 = gamma_aa[index]*t68843*t68844*3.0;
                double t68873 = gcab*t68843*t68846*t68849*(3.0/2.0);
                double t68874 = t68871+t68872+t68873;
                double t68879 = 1/(t68865*t68865);
                double t68880 = gx*gx;
                double t68881 = t68880*t68880;
                double t68882 = gamma_aa[index]*gx*t68845;
                double t68883 = t68882+1.0;
                double t68884 = gamma_aa[index]*gx*t68845*2.0;
                double t68885 = t68844*t68880*t68846;
                double t68886 = t68884+t68885+1.0;
                double t68887 = gamma_aa[index]*gx*t68845*3.0;
                double t68888 = gamma_aa[index]*gx*t68880*t68846*t68849;
                double t68889 = t68844*t68880*t68846*3.0;
                double t68890 = t68887+t68888+t68889+1.0;
                double t68906 = gx*t68845*4.0;
                double t68907 = gamma_aa[index]*t68844*t68880*1.2E1;
                double t68908 = gx*t68880*t68846*t68849*1.2E1;
                double t68909 = gamma_aa[index]*t68881*t68846*t68848*4.0;
                double t68891 = t68906+t68907+t68908+t68909;
                double t68892 = gamma_aa[index]*gx*t68845*4.0;
                double t68893 = gamma_aa[index]*gx*t68880*t68846*t68849*4.0;
                double t68894 = t68844*t68880*t68846*6.0;
                double t68895 = t68881*t68848*t68859;
                double t68896 = t68892+t68893+t68894+t68895+1.0;
                double t68899 = gx*t68845*2.0;
                double t68900 = gamma_aa[index]*t68844*t68880*2.0;
                double t68897 = t68900+t68899;
                double t68898 = 1/(t68890*t68890);
                double t68901 = 1/(t68886*t68886);
                double t68902 = gx*t68845*3.0;
                double t68903 = gamma_aa[index]*t68844*t68880*6.0;
                double t68904 = gx*t68880*t68846*t68849*3.0;
                double t68905 = t68902+t68903+t68904;
                double t68910 = 1/(t68896*t68896);
                double t68911 = pow(2.0,1.0/3.0);
                double t68912 = t68911*2.0;
                double t68913 = t68912-2.0;
                double t68914 = two_13*2.0;
                double t68915 = t68914-2.0;
                double t68916 = 1/t68915;
                double t68917 = 1/c0f;
                double t68918 = b1f*t68824;
                double t68919 = b3f*t68825;
                double t68920 = b4f*t68826*t68827;
                double t68921 = b2f*c*t68822;
                double t68922 = t68920+t68921+t68918+t68919;
                double t68923 = 1/t68922;
                double t68924 = t68923*t68917*(1.0/2.0);
                double t68925 = t68924+1.0;
                double t68926 = log(t68925);
                double t68927 = a1f*c*t68822;
                double t68928 = t68927+1.0;
                double t68929 = c0f*t68926*t68928*2.0;
                double t68930 = c0p*t68837*t68839*2.0;
                double t68931 = gcaa*gcaa;
                double t68932 = t68931*t68931;
                double t68933 = gamma_aa[index]*gcaa*t68845;
                double t68934 = t68933+1.0;
                double t68935 = gamma_aa[index]*gcaa*t68845*2.0;
                double t68936 = t68931*t68844*t68846;
                double t68937 = t68935+t68936+1.0;
                double t68938 = gamma_aa[index]*gcaa*t68845*3.0;
                double t68939 = gamma_aa[index]*gcaa*t68931*t68846*t68849;
                double t68940 = t68931*t68844*t68846*3.0;
                double t68941 = t68940+t68938+t68939+1.0;
                double t68957 = gcaa*t68845*4.0;
                double t68958 = gamma_aa[index]*t68931*t68844*1.2E1;
                double t68959 = gcaa*t68931*t68846*t68849*1.2E1;
                double t68960 = gamma_aa[index]*t68932*t68846*t68848*4.0;
                double t68942 = t68960+t68957+t68958+t68959;
                double t68943 = gamma_aa[index]*gcaa*t68845*4.0;
                double t68944 = gamma_aa[index]*gcaa*t68931*t68846*t68849*4.0;
                double t68945 = t68931*t68844*t68846*6.0;
                double t68946 = t68932*t68848*t68859;
                double t68947 = t68943+t68944+t68945+t68946+1.0;
                double t68950 = gcaa*t68845*2.0;
                double t68951 = gamma_aa[index]*t68931*t68844*2.0;
                double t68948 = t68950+t68951;
                double t68949 = 1/(t68941*t68941);
                double t68952 = 1/(t68937*t68937);
                double t68953 = gcaa*t68845*3.0;
                double t68954 = gamma_aa[index]*t68931*t68844*6.0;
                double t68955 = gcaa*t68931*t68846*t68849*3.0;
                double t68956 = t68953+t68954+t68955;
                double t68961 = 1/(t68947*t68947);
                v_gamma_aa_gamma_aa_[index] = (rho_a[index]*(t68930+t68913*t68916*(t68929-c0p*t68837*t68839*2.0)) \
                   *2.0-c0p*rho_a[index]*log((t68828*(1.0/2.0))/(b1p*sqrt(t68842)+b3p*pow(t68842,3.0/2.0)+b4p*1/pow(t68840,2.0/ \
                   3.0)*t68826+b2p*c*t68841)+1.0)*(a1p*c*t68841+1.0)*4.0)*(ccab1*1/(t68851*t68851)*t68843*t68844*(1.0/ \
                   2.0)-(ccab2*t68843*t68844*(1.0/2.0))/t68854+ccab2*t68870*t68846*t68847*t68848*(1.0/2.0)-(ccab4*t68846* \
                   t68847*t68848*3.0)/t68865+ccab4*t68847*t68848*t68859*t68879*(t68843*t68844*3.0+t68846*t68847*t68848* \
                   3.0+gamma_aa[index]*gcab*t68843*t68849*6.0)-ccab1*gamma_aa[index]*gcab*1/(t68851*t68851*t68851)*t68843* \
                   t68849*(1.0/2.0)-(ccab3*gamma_aa[index]*gcab*t68843*t68849*(3.0/2.0))/t68858-ccab2*t68843*t68844*1/ \
                   (t68854*t68854*t68854)*t68846*(t68866*t68866)*2.0-ccab4*(t68860*t68860)*t68847*1/(t68865*t68865*t68865) \
                   *t68848*t68859*2.0+ccab2*gamma_aa[index]*t68843*t68870*t68844*t68866*2.0+ccab4*gamma_aa[index]*t68860* \
                   t68846*t68847*t68848*t68879*4.0+ccab3*gcab*t68843*t68846*t68874*t68849*t68867*3.0+ccab3*gamma_aa[index]* \
                   gcab*t68843*t68846*t68849*t68867*(t68843*t68844*(3.0/2.0)+gamma_aa[index]*gcab*t68843*t68849*(3.0/ \
                   2.0))-ccab3*gamma_aa[index]*gcab*t68843*t68846*(t68874*t68874)*t68849*1/(t68858*t68858*t68858)*2.0) \
                   *-4.0+rho_a[index]*(t68930-t68913*t68916*(t68930-t68929))*(ccaa1*t68931*t68844*1/(t68934*t68934)*2.0- \
                   (ccaa2*t68931*t68844*2.0)/t68937+ccaa2*t68932*t68952*t68846*t68848*2.0-(ccaa4*t68932*t68846*t68848* \
                   1.2E1)/t68947+ccaa4*t68932*t68961*t68848*t68859*(t68931*t68844*1.2E1+t68932*t68846*t68848*1.2E1+gamma_aa[index]* \
                   gcaa*t68931*t68849*2.4E1)-(ccaa3*gamma_aa[index]*gcaa*t68931*t68849*6.0)/t68941-ccaa1*gamma_aa[index]* \
                   gcaa*t68931*1/(t68934*t68934*t68934)*t68849*2.0-ccaa2*t68931*t68844*t68846*1/(t68937*t68937*t68937) \
                   *(t68948*t68948)*2.0-ccaa4*t68932*(t68942*t68942)*t68848*1/(t68947*t68947*t68947)*t68859*2.0+ccaa2* \
                   gamma_aa[index]*t68931*t68844*t68952*t68948*4.0+ccaa4*gamma_aa[index]*t68932*t68942*t68961*t68846* \
                   t68848*8.0+ccaa3*gcaa*t68931*t68846*t68956*t68849*t68949*6.0+ccaa3*gamma_aa[index]*gcaa*t68931*t68846* \
                   t68849*t68949*(t68931*t68844*6.0+gamma_aa[index]*gcaa*t68931*t68849*6.0)-ccaa3*gamma_aa[index]*gcaa* \
                   t68931*1/(t68941*t68941*t68941)*t68846*(t68956*t68956)*t68849*2.0)*2.0-c0*pow(rho_a[index],4.0/3.0) \
                   *(cx1*t68844*t68880*1/(t68883*t68883)*2.0-(cx2*t68844*t68880*2.0)/t68886+cx2*t68901*t68881*t68846* \
                   t68848*2.0-(cx4*t68881*t68846*t68848*1.2E1)/t68896+cx4*t68910*t68881*t68848*t68859*(t68844*t68880* \
                   1.2E1+t68881*t68846*t68848*1.2E1+gamma_aa[index]*gx*t68880*t68849*2.4E1)-cx1*gamma_aa[index]*gx*t68880* \
                   1/(t68883*t68883*t68883)*t68849*2.0-(cx3*gamma_aa[index]*gx*t68880*t68849*6.0)/t68890-cx2*t68844*t68880* \
                   t68846*1/(t68886*t68886*t68886)*(t68897*t68897)*2.0-cx4*t68881*(t68891*t68891)*t68848*t68859*1/(t68896* \
                   t68896*t68896)*2.0+cx2*gamma_aa[index]*t68901*t68844*t68880*t68897*4.0+cx4*gamma_aa[index]*t68910* \
                   t68881*t68846*t68891*t68848*8.0+cx3*gx*t68905*t68880*t68846*t68849*t68898*6.0+cx3*gamma_aa[index]* \
                   gx*t68880*t68846*t68849*t68898*(t68844*t68880*6.0+gamma_aa[index]*gx*t68880*t68849*6.0)-cx3*gamma_aa[index]* \
                   gx*(t68905*t68905)*t68880*1/(t68890*t68890*t68890)*t68846*t68849*2.0)*2.0;
            } else {
                v_gamma_aa_gamma_aa_[index] = 0.0;
            } 
        
        }
        if (is_meta_) {
        
            //V_rho_a_tau_a
            if (rho_a[index] > cutoff_) {
                v_rho_a_tau_a_[index] = 0.0;
            } else {
                v_rho_a_tau_a_[index] = 0.0;
            } 
        
            //V_tau_a_tau_a
            if (rho_a[index] > cutoff_) {
                v_tau_a_tau_a_[index] = 0.0;
            } else {
                v_tau_a_tau_a_[index] = 0.0;
            } 
       
            if (is_gga_) {
        
                //V_gamma_aa_tau_a
                if (rho_a[index] > cutoff_) {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } else {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } 
       
            }
        }
    }
}
void HCTH120_Functional::computeUKSFunctional(shared_ptr<Properties> prop)
{
    int ntrue = prop->getTrueSize();

    double* rho_a;
    double* rho_b;
    double* gamma_aa;
    double* gamma_ab;
    double* gamma_bb;
    double* tau_a;
    double* tau_b;

    rho_a = prop->getRhoA();
    rho_b = prop->getRhoB();
    if (is_gga_) {
        gamma_aa = prop->getGammaAA();
        gamma_ab = prop->getGammaAB();
        gamma_bb = prop->getGammaBB();
    }
    if (is_meta_) {
        tau_a = prop->getTauA();
        tau_b = prop->getTauB();
    }

    double c0 = params_[0].second;
    double two_13 = params_[1].second;
    double d2fz0 = params_[2].second;
    double c = params_[3].second;
    double Aa = params_[4].second;
    double a1a = params_[5].second;
    double b1a = params_[6].second;
    double b2a = params_[7].second;
    double b3a = params_[8].second;
    double b4a = params_[9].second;
    double c0p = params_[10].second;
    double a1p = params_[11].second;
    double b1p = params_[12].second;
    double b2p = params_[13].second;
    double b3p = params_[14].second;
    double b4p = params_[15].second;
    double c0f = params_[16].second;
    double a1f = params_[17].second;
    double b1f = params_[18].second;
    double b2f = params_[19].second;
    double b3f = params_[20].second;
    double b4f = params_[21].second;
    double gcab = params_[22].second;
    double gcaa = params_[23].second;
    double gx = params_[24].second;
    double ccab0 = params_[25].second;
    double ccab1 = params_[26].second;
    double ccab2 = params_[27].second;
    double ccab3 = params_[28].second;
    double ccab4 = params_[29].second;
    double ccaa0 = params_[30].second;
    double ccaa1 = params_[31].second;
    double ccaa2 = params_[32].second;
    double ccaa3 = params_[33].second;
    double ccaa4 = params_[34].second;
    double cx0 = params_[35].second;
    double cx1 = params_[36].second;
    double cx2 = params_[37].second;
    double cx3 = params_[38].second;
    double cx4 = params_[39].second;
    
    //Functional
    for (int index = 0; index < ntrue; index++) {

        //Functional Value
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t63140 = 1/pow(rho_a[index],1.0/3.0);
            double t63141 = c*t63140;
            double t63142 = sqrt(t63141);
            double t63143 = pow(t63141,3.0/2.0);
            double t63144 = c*c;
            double t63145 = 1/pow(rho_a[index],2.0/3.0);
            double t63146 = 1/c0p;
            double t63147 = b1p*t63142;
            double t63148 = b3p*t63143;
            double t63149 = b4p*t63144*t63145;
            double t63150 = b2p*c*t63140;
            double t63151 = t63150+t63147+t63148+t63149;
            double t63152 = 1/t63151;
            double t63153 = t63152*t63146*(1.0/2.0);
            double t63154 = t63153+1.0;
            double t63155 = log(t63154);
            double t63156 = a1p*c*t63140;
            double t63157 = t63156+1.0;
            double t63158 = pow(2.0,1.0/3.0);
            double t63159 = t63158*2.0;
            double t63160 = t63159-2.0;
            double t63161 = two_13*2.0;
            double t63162 = t63161-2.0;
            double t63163 = 1/t63162;
            double t63164 = 1/c0f;
            double t63165 = 1/pow(rho_b[index],1.0/3.0);
            double t63166 = c*t63165;
            double t63167 = sqrt(t63166);
            double t63168 = pow(t63166,3.0/2.0);
            double t63169 = 1/pow(rho_b[index],2.0/3.0);
            double t63170 = b1p*t63167;
            double t63171 = b3p*t63168;
            double t63172 = b4p*t63144*t63169;
            double t63173 = b2p*c*t63165;
            double t63174 = t63170+t63171+t63172+t63173;
            double t63175 = 1/t63174;
            double t63176 = t63146*t63175*(1.0/2.0);
            double t63177 = t63176+1.0;
            double t63178 = log(t63177);
            double t63179 = a1p*c*t63165;
            double t63180 = t63179+1.0;
            double t63181 = c0p*t63180*t63178*2.0;
            double t63182 = rho_a[index]+rho_b[index];
            double t63183 = 1/pow(t63182,1.0/3.0);
            double t63184 = c*t63183;
            double t63185 = sqrt(t63184);
            double t63186 = pow(t63184,3.0/2.0);
            double t63187 = 1/pow(t63182,2.0/3.0);
            double t63188 = b1p*t63185;
            double t63189 = b3p*t63186;
            double t63190 = b4p*t63144*t63187;
            double t63191 = b2p*c*t63183;
            double t63192 = t63190+t63191+t63188+t63189;
            double t63193 = 1/t63192;
            double t63194 = t63146*t63193*(1.0/2.0);
            double t63195 = t63194+1.0;
            double t63196 = log(t63195);
            double t63197 = a1p*c*t63183;
            double t63198 = t63197+1.0;
            double t63199 = c0p*t63196*t63198*2.0;
            double t63200 = rho_a[index]-rho_b[index];
            double t63201 = t63200*t63200;
            double t63202 = 1/t63182;
            double t63203 = t63200*t63202;
            double t63204 = 1/(t63182*t63182*t63182*t63182);
            double t63205 = t63201*t63201;
            double t63206 = t63203+1.0;
            double t63207 = pow(t63206,4.0/3.0);
            double t63208 = -t63203+1.0;
            double t63209 = pow(t63208,4.0/3.0);
            double t63210 = t63207+t63209-2.0;
            double t63213 = 1/pow(rho_a[index],8.0/3.0);
            double t63214 = gamma_aa[index]*t63213*(1.0/2.0);
            double t63215 = 1/pow(rho_b[index],8.0/3.0);
            double t63216 = gamma_bb[index]*t63215*(1.0/2.0);
            double t63211 = t63214+t63216;
            double t63212 = gcab*gcab;
            double t63217 = t63211*t63211;
            double t63218 = t63212*t63212;
            double t63219 = t63217*t63217;
            double t63220 = c0p*t63155*t63157*2.0;
            double t63221 = b1f*t63142;
            double t63222 = b3f*t63143;
            double t63223 = b4f*t63144*t63145;
            double t63224 = b2f*c*t63140;
            double t63225 = t63221+t63222+t63223+t63224;
            double t63226 = 1/t63225;
            double t63227 = t63226*t63164*(1.0/2.0);
            double t63228 = t63227+1.0;
            double t63229 = log(t63228);
            double t63230 = a1f*c*t63140;
            double t63231 = t63230+1.0;
            double t63232 = t63220-c0f*t63231*t63229*2.0;
            double t63233 = t63220-t63160*t63232*t63163;
            double t63234 = gamma_aa[index]*gamma_aa[index];
            double t63235 = gcaa*gcaa;
            double t63236 = t63234*t63234;
            double t63237 = t63235*t63235;
            double t63238 = 1/pow(rho_a[index],3.2E1/3.0);
            double t63239 = 1/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]);
            double t63240 = 1/pow(rho_a[index],1.6E1/3.0);
            double t63241 = b1f*t63167;
            double t63242 = b3f*t63168;
            double t63243 = b4f*t63144*t63169;
            double t63244 = b2f*c*t63165;
            double t63245 = t63241+t63242+t63243+t63244;
            double t63246 = 1/t63245;
            double t63247 = t63164*t63246*(1.0/2.0);
            double t63248 = t63247+1.0;
            double t63249 = log(t63248);
            double t63250 = a1f*c*t63165;
            double t63251 = t63250+1.0;
            double t63252 = t63181-c0f*t63251*t63249*2.0;
            double t63253 = t63181-t63160*t63252*t63163;
            double t63254 = gamma_bb[index]*gamma_bb[index];
            double t63255 = t63254*t63254;
            double t63256 = 1/pow(rho_b[index],3.2E1/3.0);
            double t63257 = 1/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
               rho_b[index]*rho_b[index]);
            double t63258 = 1/pow(rho_b[index],1.6E1/3.0);
            double t63259 = gx*gx;
            double t63260 = t63259*t63259;
            functional_[index] = (rho_a[index]*t63233+rho_b[index]*t63253-t63182*(t63199-t63210*t63204*t63205* \
               t63163*(t63199-c0f*log((t63164*(1.0/2.0))/(b1f*t63185+b3f*t63186+b2f*c*t63183+b4f*t63144*t63187)+1.0) \
               *(a1f*c*t63183+1.0)*2.0)+(Aa*t63210*t63163*log((1.0/2.0)/(Aa*(b1a*t63185+b3a*t63186+b2a*c*t63183+b4a* \
               t63144*t63187))+1.0)*(t63204*t63205-1.0)*(a1a*c*t63183+1.0)*2.0)/d2fz0))*(ccab0+(ccab4*t63218*t63219) \
               /(gcab*t63211*4.0+t63212*t63217*6.0+t63218*t63219+gcab*t63211*t63212*t63217*4.0+1.0)+(ccab1*gcab*t63211) \
               /(gcab*t63211+1.0)+(ccab2*t63212*t63217)/(gcab*t63211*2.0+t63212*t63217+1.0)+(ccab3*gcab*t63211*t63212* \
               t63217)/(gcab*t63211*3.0+t63212*t63217*3.0+gcab*t63211*t63212*t63217+1.0))+c0*pow(rho_a[index],4.0/ \
               3.0)*(cx0+(cx2*t63240*t63234*t63259)/(gamma_aa[index]*gx*t63213*2.0+t63240*t63234*t63259+1.0)+(cx1* \
               gamma_aa[index]*gx*t63213)/(gamma_aa[index]*gx*t63213+1.0)+(cx4*t63260*t63236*t63238)/(gamma_aa[index]* \
               gx*t63213*4.0+t63240*t63234*t63259*6.0+t63260*t63236*t63238+gamma_aa[index]*gx*t63234*t63239*t63259* \
               4.0+1.0)+(cx3*gamma_aa[index]*gx*t63234*t63239*t63259)/(gamma_aa[index]*gx*t63213*3.0+t63240*t63234* \
               t63259*3.0+gamma_aa[index]*gx*t63234*t63239*t63259+1.0))+c0*pow(rho_b[index],4.0/3.0)*(cx0+(cx2*t63254* \
               t63258*t63259)/(gamma_bb[index]*gx*t63215*2.0+t63254*t63258*t63259+1.0)+(cx1*gamma_bb[index]*gx*t63215) \
               /(gamma_bb[index]*gx*t63215+1.0)+(cx4*t63260*t63255*t63256)/(gamma_bb[index]*gx*t63215*4.0+t63260* \
               t63255*t63256+t63254*t63258*t63259*6.0+gamma_bb[index]*gx*t63254*t63257*t63259*4.0+1.0)+(cx3*gamma_bb[index]* \
               gx*t63254*t63257*t63259)/(gamma_bb[index]*gx*t63215*3.0+t63254*t63258*t63259*3.0+gamma_bb[index]*gx* \
               t63254*t63257*t63259+1.0))-rho_a[index]*t63233*(ccaa0+(ccaa2*t63240*t63234*t63235)/(gamma_aa[index]* \
               gcaa*t63213*2.0+t63240*t63234*t63235+1.0)+(ccaa1*gamma_aa[index]*gcaa*t63213)/(gamma_aa[index]*gcaa* \
               t63213+1.0)+(ccaa4*t63236*t63237*t63238)/(gamma_aa[index]*gcaa*t63213*4.0+t63240*t63234*t63235*6.0+ \
               t63236*t63237*t63238+gamma_aa[index]*gcaa*t63234*t63235*t63239*4.0+1.0)+(ccaa3*gamma_aa[index]*gcaa* \
               t63234*t63235*t63239)/(gamma_aa[index]*gcaa*t63213*3.0+t63240*t63234*t63235*3.0+gamma_aa[index]*gcaa* \
               t63234*t63235*t63239+1.0))-rho_b[index]*t63253*(ccaa0+(ccaa2*t63235*t63254*t63258)/(gamma_bb[index]* \
               gcaa*t63215*2.0+t63235*t63254*t63258+1.0)+(ccaa1*gamma_bb[index]*gcaa*t63215)/(gamma_bb[index]*gcaa* \
               t63215+1.0)+(ccaa4*t63237*t63255*t63256)/(gamma_bb[index]*gcaa*t63215*4.0+t63235*t63254*t63258*6.0+ \
               t63237*t63255*t63256+gamma_bb[index]*gcaa*t63235*t63254*t63257*4.0+1.0)+(ccaa3*gamma_bb[index]*gcaa* \
               t63235*t63254*t63257)/(gamma_bb[index]*gcaa*t63215*3.0+t63235*t63254*t63258*3.0+gamma_bb[index]*gcaa* \
               t63235*t63254*t63257+1.0));
        } else if (rho_a[index] > cutoff_) {
            double t67286 = 1/pow(rho_a[index],1.0/3.0);
            double t67287 = c*t67286;
            double t67288 = sqrt(t67287);
            double t67289 = pow(t67287,3.0/2.0);
            double t67290 = c*c;
            double t67291 = 1/pow(rho_a[index],2.0/3.0);
            double t67292 = 1/c0p;
            double t67293 = b1p*t67288;
            double t67294 = b3p*t67289;
            double t67295 = b4p*t67290*t67291;
            double t67296 = b2p*c*t67286;
            double t67297 = t67293+t67294+t67295+t67296;
            double t67298 = 1/t67297;
            double t67299 = t67292*t67298*(1.0/2.0);
            double t67300 = t67299+1.0;
            double t67301 = log(t67300);
            double t67302 = a1p*c*t67286;
            double t67303 = t67302+1.0;
            double t67304 = gamma_aa[index]*gamma_aa[index];
            double t67305 = gcaa*gcaa;
            double t67306 = t67304*t67304;
            double t67307 = t67305*t67305;
            double t67308 = 1/pow(rho_a[index],3.2E1/3.0);
            double t67309 = 1/pow(rho_a[index],8.0/3.0);
            double t67310 = 1/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]);
            double t67311 = 1/pow(rho_a[index],1.6E1/3.0);
            double t67312 = gx*gx;
            double t67313 = t67312*t67312;
            functional_[index] = c0*pow(rho_a[index],4.0/3.0)*(cx0+(cx2*t67311*t67312*t67304)/(gamma_aa[index]* \
               gx*t67309*2.0+t67311*t67312*t67304+1.0)+(cx1*gamma_aa[index]*gx*t67309)/(gamma_aa[index]*gx*t67309+ \
               1.0)+(cx4*t67313*t67306*t67308)/(gamma_aa[index]*gx*t67309*4.0+t67311*t67312*t67304*6.0+t67313*t67306* \
               t67308+gamma_aa[index]*gx*t67310*t67312*t67304*4.0+1.0)+(cx3*gamma_aa[index]*gx*t67310*t67312*t67304) \
               /(gamma_aa[index]*gx*t67309*3.0+t67311*t67312*t67304*3.0+gamma_aa[index]*gx*t67310*t67312*t67304+1.0) \
               )-rho_a[index]*(((pow(2.0,1.0/3.0)*2.0-2.0)*(c0f*log((1.0/2.0)/(c0f*(b1f*t67288+b3f*t67289+b2f*c*t67286+ \
               b4f*t67290*t67291))+1.0)*(a1f*c*t67286+1.0)*2.0-c0p*t67301*t67303*2.0))/(two_13*2.0-2.0)+c0p*t67301* \
               t67303*2.0)*(ccaa0+(ccaa2*t67311*t67304*t67305)/(gamma_aa[index]*gcaa*t67309*2.0+t67311*t67304*t67305+ \
               1.0)+(ccaa1*gamma_aa[index]*gcaa*t67309)/(gamma_aa[index]*gcaa*t67309+1.0)+(ccaa4*t67306*t67307*t67308) \
               /(gamma_aa[index]*gcaa*t67309*4.0+t67311*t67304*t67305*6.0+t67306*t67307*t67308+gamma_aa[index]*gcaa* \
               t67310*t67304*t67305*4.0+1.0)+(ccaa3*gamma_aa[index]*gcaa*t67310*t67304*t67305)/(gamma_aa[index]*gcaa* \
               t67309*3.0+t67311*t67304*t67305*3.0+gamma_aa[index]*gcaa*t67310*t67304*t67305+1.0));
        } else if (rho_b[index] > cutoff_) {
            double t66647 = 1/pow(rho_b[index],1.0/3.0);
            double t66648 = c*t66647;
            double t66649 = sqrt(t66648);
            double t66650 = pow(t66648,3.0/2.0);
            double t66651 = c*c;
            double t66652 = 1/pow(rho_b[index],2.0/3.0);
            double t66653 = 1/c0p;
            double t66654 = b1p*t66649;
            double t66655 = b3p*t66650;
            double t66656 = b4p*t66651*t66652;
            double t66657 = b2p*c*t66647;
            double t66658 = t66654+t66655+t66656+t66657;
            double t66659 = 1/t66658;
            double t66660 = t66653*t66659*(1.0/2.0);
            double t66661 = t66660+1.0;
            double t66662 = log(t66661);
            double t66663 = a1p*c*t66647;
            double t66664 = t66663+1.0;
            double t66665 = gamma_bb[index]*gamma_bb[index];
            double t66666 = gcaa*gcaa;
            double t66667 = t66665*t66665;
            double t66668 = t66666*t66666;
            double t66669 = 1/pow(rho_b[index],3.2E1/3.0);
            double t66670 = 1/pow(rho_b[index],8.0/3.0);
            double t66671 = 1/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
               rho_b[index]*rho_b[index]);
            double t66672 = 1/pow(rho_b[index],1.6E1/3.0);
            double t66673 = gx*gx;
            double t66674 = t66673*t66673;
            functional_[index] = c0*pow(rho_b[index],4.0/3.0)*(cx0+(cx2*t66672*t66673*t66665)/(gamma_bb[index]* \
               gx*t66670*2.0+t66672*t66673*t66665+1.0)+(cx1*gamma_bb[index]*gx*t66670)/(gamma_bb[index]*gx*t66670+ \
               1.0)+(cx4*t66674*t66667*t66669)/(gamma_bb[index]*gx*t66670*4.0+t66672*t66673*t66665*6.0+t66674*t66667* \
               t66669+gamma_bb[index]*gx*t66671*t66673*t66665*4.0+1.0)+(cx3*gamma_bb[index]*gx*t66671*t66673*t66665) \
               /(gamma_bb[index]*gx*t66670*3.0+t66672*t66673*t66665*3.0+gamma_bb[index]*gx*t66671*t66673*t66665+1.0) \
               )-rho_b[index]*(((pow(2.0,1.0/3.0)*2.0-2.0)*(c0f*log((1.0/2.0)/(c0f*(b1f*t66649+b3f*t66650+b2f*c*t66647+ \
               b4f*t66651*t66652))+1.0)*(a1f*c*t66647+1.0)*2.0-c0p*t66662*t66664*2.0))/(two_13*2.0-2.0)+c0p*t66662* \
               t66664*2.0)*(ccaa0+(ccaa2*t66672*t66665*t66666)/(gamma_bb[index]*gcaa*t66670*2.0+t66672*t66665*t66666+ \
               1.0)+(ccaa1*gamma_bb[index]*gcaa*t66670)/(gamma_bb[index]*gcaa*t66670+1.0)+(ccaa4*t66667*t66668*t66669) \
               /(gamma_bb[index]*gcaa*t66670*4.0+t66672*t66665*t66666*6.0+t66667*t66668*t66669+gamma_bb[index]*gcaa* \
               t66671*t66665*t66666*4.0+1.0)+(ccaa3*gamma_bb[index]*gcaa*t66671*t66665*t66666)/(gamma_bb[index]*gcaa* \
               t66670*3.0+t66672*t66665*t66666*3.0+gamma_bb[index]*gcaa*t66671*t66665*t66666+1.0));
        } else {
            functional_[index] = 0.0;
        } 
   
    }
    //First Partials
    for (int index = 0; index < ntrue && deriv_ >= 1; index++) {

        //V_rho_a
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t63262 = 1/pow(rho_a[index],1.0/3.0);
            double t63263 = c*t63262;
            double t63264 = sqrt(t63263);
            double t63265 = pow(t63263,3.0/2.0);
            double t63266 = c*c;
            double t63267 = 1/pow(rho_a[index],2.0/3.0);
            double t63268 = 1/c0p;
            double t63269 = b1p*t63264;
            double t63270 = b3p*t63265;
            double t63271 = b4p*t63266*t63267;
            double t63272 = b2p*c*t63262;
            double t63273 = t63270+t63271+t63272+t63269;
            double t63274 = 1/t63273;
            double t63275 = t63274*t63268*(1.0/2.0);
            double t63276 = t63275+1.0;
            double t63277 = log(t63276);
            double t63278 = a1p*c*t63262;
            double t63279 = t63278+1.0;
            double t63280 = gamma_aa[index]*gamma_aa[index];
            double t63281 = gcaa*gcaa;
            double t63282 = t63280*t63280;
            double t63283 = t63281*t63281;
            double t63284 = 1/pow(rho_a[index],3.2E1/3.0);
            double t63285 = 1/pow(rho_a[index],8.0/3.0);
            double t63286 = 1/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]);
            double t63287 = 1/pow(rho_a[index],1.6E1/3.0);
            double t63288 = pow(2.0,1.0/3.0);
            double t63289 = t63288*2.0;
            double t63290 = t63289-2.0;
            double t63291 = two_13*2.0;
            double t63292 = t63291-2.0;
            double t63293 = 1/t63292;
            double t63294 = 1/c0f;
            double t63295 = b1f*t63264;
            double t63296 = b3f*t63265;
            double t63297 = b4f*t63266*t63267;
            double t63298 = b2f*c*t63262;
            double t63299 = t63295+t63296+t63297+t63298;
            double t63300 = 1/t63299;
            double t63301 = t63300*t63294*(1.0/2.0);
            double t63302 = t63301+1.0;
            double t63303 = log(t63302);
            double t63304 = a1f*c*t63262;
            double t63305 = t63304+1.0;
            double t63306 = c0f*t63303*t63305*2.0;
            double t63307 = c0p*t63277*t63279*2.0;
            double t63308 = 1/pow(rho_b[index],1.0/3.0);
            double t63309 = c*t63308;
            double t63310 = sqrt(t63309);
            double t63311 = pow(t63309,3.0/2.0);
            double t63312 = 1/pow(rho_b[index],2.0/3.0);
            double t63313 = b1p*t63310;
            double t63314 = b3p*t63311;
            double t63315 = b4p*t63312*t63266;
            double t63316 = b2p*c*t63308;
            double t63317 = t63313+t63314+t63315+t63316;
            double t63318 = 1/t63317;
            double t63319 = t63318*t63268*(1.0/2.0);
            double t63320 = t63319+1.0;
            double t63321 = log(t63320);
            double t63322 = a1p*c*t63308;
            double t63323 = t63322+1.0;
            double t63324 = c0p*t63321*t63323*2.0;
            double t63325 = rho_a[index]+rho_b[index];
            double t63326 = 1/pow(t63325,1.0/3.0);
            double t63327 = c*t63326;
            double t63328 = sqrt(t63327);
            double t63329 = pow(t63327,3.0/2.0);
            double t63330 = 1/pow(t63325,2.0/3.0);
            double t63331 = b1p*t63328;
            double t63332 = b3p*t63329;
            double t63333 = b4p*t63330*t63266;
            double t63334 = b2p*c*t63326;
            double t63335 = t63331+t63332+t63333+t63334;
            double t63336 = 1/t63335;
            double t63337 = t63336*t63268*(1.0/2.0);
            double t63338 = t63337+1.0;
            double t63339 = log(t63338);
            double t63340 = a1p*c*t63326;
            double t63341 = t63340+1.0;
            double t63342 = c0p*t63341*t63339*2.0;
            double t63343 = rho_a[index]-rho_b[index];
            double t63344 = t63343*t63343;
            double t63345 = 1/t63325;
            double t63346 = t63343*t63345;
            double t63347 = 1/(t63325*t63325*t63325*t63325);
            double t63348 = t63344*t63344;
            double t63349 = t63346+1.0;
            double t63350 = pow(t63349,4.0/3.0);
            double t63351 = -t63346+1.0;
            double t63352 = pow(t63351,4.0/3.0);
            double t63353 = t63350+t63352-2.0;
            double t63354 = gcab*gcab;
            double t63358 = gamma_aa[index]*t63285*(1.0/2.0);
            double t63359 = 1/pow(rho_b[index],8.0/3.0);
            double t63360 = gamma_bb[index]*t63359*(1.0/2.0);
            double t63355 = t63360+t63358;
            double t63356 = t63355*t63355;
            double t63357 = 1/pow(rho_a[index],1.1E1/3.0);
            double t63361 = t63354*t63354;
            double t63362 = t63356*t63356;
            double t63363 = t63354*t63356*6.0;
            double t63364 = gcab*t63354*t63355*t63356*4.0;
            double t63365 = t63361*t63362;
            double t63366 = gcab*t63355*4.0;
            double t63367 = t63363+t63364+t63365+t63366+1.0;
            double t63368 = gcab*t63355;
            double t63369 = t63368+1.0;
            double t63370 = t63354*t63356;
            double t63371 = gcab*t63355*2.0;
            double t63372 = t63370+t63371+1.0;
            double t63373 = t63354*t63356*3.0;
            double t63374 = gcab*t63354*t63355*t63356;
            double t63375 = gcab*t63355*3.0;
            double t63376 = t63373+t63374+t63375+1.0;
            double t63377 = 1/t63372;
            double t63378 = 1/t63376;
            double t63379 = 1/t63369;
            double t63380 = 1/t63367;
            double t63381 = 1/pow(t63325,4.0/3.0);
            double t63382 = b1f*t63328;
            double t63383 = b3f*t63329;
            double t63384 = b4f*t63330*t63266;
            double t63385 = b2f*c*t63326;
            double t63386 = t63382+t63383+t63384+t63385;
            double t63387 = 1/t63386;
            double t63388 = t63294*t63387*(1.0/2.0);
            double t63389 = t63388+1.0;
            double t63390 = log(t63389);
            double t63391 = a1f*c*t63326;
            double t63392 = t63391+1.0;
            double t63394 = c0f*t63390*t63392*2.0;
            double t63393 = t63342-t63394;
            double t63395 = 1/(t63325*t63325);
            double t63422 = t63343*t63395;
            double t63396 = -t63422+t63345;
            double t63397 = 1/pow(t63325,5.0/3.0);
            double t63398 = 1/sqrt(t63327);
            double t63399 = 1/t63338;
            double t63400 = 1/(t63335*t63335);
            double t63401 = b4p*t63266*t63397*(2.0/3.0);
            double t63402 = b2p*c*t63381*(1.0/3.0);
            double t63403 = b1p*c*t63381*t63398*(1.0/6.0);
            double t63404 = b3p*c*t63381*t63328*(1.0/2.0);
            double t63405 = t63401+t63402+t63403+t63404;
            double t63406 = t63400*t63341*t63405*t63399;
            double t63407 = 1/d2fz0;
            double t63408 = 1/Aa;
            double t63409 = b1a*t63328;
            double t63410 = b3a*t63329;
            double t63411 = b4a*t63330*t63266;
            double t63412 = b2a*c*t63326;
            double t63413 = t63410+t63411+t63412+t63409;
            double t63414 = 1/t63413;
            double t63415 = t63414*t63408*(1.0/2.0);
            double t63416 = t63415+1.0;
            double t63417 = log(t63416);
            double t63418 = a1a*c*t63326;
            double t63419 = t63418+1.0;
            double t63420 = 1/(t63325*t63325*t63325*t63325*t63325);
            double t63421 = pow(t63349,1.0/3.0);
            double t63423 = t63421*t63396*(4.0/3.0);
            double t63424 = pow(t63351,1.0/3.0);
            double t63425 = t63423-t63424*t63396*(4.0/3.0);
            double t63426 = t63347*t63348;
            double t63427 = t63426-1.0;
            double t63428 = 1/pow(rho_a[index],4.0/3.0);
            double t63429 = 1/pow(rho_a[index],5.0/3.0);
            double t63430 = 1/sqrt(t63263);
            double t63431 = 1/t63276;
            double t63432 = 1/(t63273*t63273);
            double t63433 = b4p*t63266*t63429*(2.0/3.0);
            double t63434 = b2p*c*t63428*(1.0/3.0);
            double t63435 = b1p*c*t63430*t63428*(1.0/6.0);
            double t63436 = b3p*c*t63264*t63428*(1.0/2.0);
            double t63437 = t63433+t63434+t63435+t63436;
            double t63438 = t63431*t63432*t63437*t63279;
            double t63439 = t63306-t63307;
            double t63440 = t63290*t63293*t63439;
            double t63441 = Aa*t63353*t63407*t63417*t63427*t63293*t63419*2.0;
            double t63442 = t63440+t63307;
            double t63443 = gamma_aa[index]*gcaa*t63285*4.0;
            double t63444 = gamma_aa[index]*gcaa*t63280*t63281*t63286*4.0;
            double t63445 = t63280*t63281*t63287*6.0;
            double t63446 = t63282*t63283*t63284;
            double t63447 = t63443+t63444+t63445+t63446+1.0;
            double t63448 = 1/t63447;
            double t63449 = gamma_aa[index]*gcaa*t63285;
            double t63450 = t63449+1.0;
            double t63451 = 1/t63450;
            double t63452 = gamma_aa[index]*gcaa*t63285*3.0;
            double t63453 = gamma_aa[index]*gcaa*t63280*t63281*t63286;
            double t63454 = t63280*t63281*t63287*3.0;
            double t63455 = t63452+t63453+t63454+1.0;
            double t63456 = 1/t63455;
            double t63457 = gamma_aa[index]*gcaa*t63285*2.0;
            double t63458 = t63280*t63281*t63287;
            double t63459 = t63457+t63458+1.0;
            double t63460 = 1/t63459;
            double t63461 = 1/pow(rho_a[index],1.9E1/3.0);
            double t63462 = 1/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]*rho_a[index]);
            double t63463 = 1/pow(rho_a[index],3.5E1/3.0);
            double t63464 = gx*gx;
            double t63465 = t63464*t63464;
            double t63466 = gamma_aa[index]*gx*t63285*4.0;
            double t63467 = gamma_aa[index]*gx*t63280*t63464*t63286*4.0;
            double t63468 = t63280*t63464*t63287*6.0;
            double t63469 = t63282*t63284*t63465;
            double t63470 = t63466+t63467+t63468+t63469+1.0;
            double t63471 = 1/t63470;
            double t63472 = gamma_aa[index]*gx*t63285;
            double t63473 = t63472+1.0;
            double t63474 = 1/t63473;
            double t63475 = gamma_aa[index]*gx*t63285*3.0;
            double t63476 = gamma_aa[index]*gx*t63280*t63464*t63286;
            double t63477 = t63280*t63464*t63287*3.0;
            double t63478 = t63475+t63476+t63477+1.0;
            double t63479 = 1/t63478;
            double t63480 = gamma_aa[index]*gx*t63285*2.0;
            double t63481 = t63280*t63464*t63287;
            double t63482 = t63480+t63481+1.0;
            double t63483 = 1/t63482;
            double t63484 = 1/t63302;
            double t63485 = 1/(t63299*t63299);
            double t63486 = b4f*t63266*t63429*(2.0/3.0);
            double t63487 = b2f*c*t63428*(1.0/3.0);
            double t63488 = b1f*c*t63430*t63428*(1.0/6.0);
            double t63489 = b3f*c*t63264*t63428*(1.0/2.0);
            double t63490 = t63486+t63487+t63488+t63489;
            double t63491 = a1f*c*c0f*t63303*t63428*(2.0/3.0);
            double t63492 = a1p*c*c0p*t63428*t63277*(2.0/3.0);
            double t63493 = ccaa4*t63282*t63283*t63284*t63448;
            double t63494 = ccaa1*gamma_aa[index]*gcaa*t63451*t63285;
            double t63495 = ccaa3*gamma_aa[index]*gcaa*t63280*t63281*t63456*t63286;
            double t63496 = ccaa2*t63280*t63460*t63281*t63287;
            double t63497 = ccaa0+t63493+t63494+t63495+t63496;
            v_rho_a_[index] = (ccab0+ccab1*gcab*t63355*t63379+ccab4*t63361*t63362*t63380+ccab2*t63354*t63356* \
               t63377+ccab3*gcab*t63354*t63355*t63356*t63378)*(t63440-t63342-t63441+t63307-rho_a[index]*(-t63438+ \
               t63492+t63290*t63293*(t63491+t63438-t63305*t63490*t63484*t63485-a1p*c*c0p*t63428*t63277*(2.0/3.0)) \
               )+t63325*(-t63406+t63353*t63293*t63347*t63348*(t63406-(t63392*1/(t63386*t63386)*(b2f*c*t63381*(1.0/ \
               3.0)+b4f*t63266*t63397*(2.0/3.0)+b1f*c*t63381*t63398*(1.0/6.0)+b3f*c*t63381*t63328*(1.0/2.0)))/t63389+ \
               a1f*c*c0f*t63381*t63390*(2.0/3.0)-a1p*c*c0p*t63381*t63339*(2.0/3.0))+a1p*c*c0p*t63381*t63339*(2.0/ \
               3.0)-t63420*t63353*t63293*t63348*t63393*4.0+t63425*t63293*t63347*t63348*t63393+t63343*t63344*t63353* \
               t63293*t63347*t63393*4.0+Aa*t63353*t63407*t63417*t63293*t63419*(t63420*t63348*4.0-t63343*t63344*t63347* \
               4.0)*2.0-Aa*t63407*t63425*t63417*t63427*t63293*t63419*2.0-(1/(t63413*t63413)*t63353*t63407*t63427* \
               t63293*t63419*(b2a*c*t63381*(1.0/3.0)+b4a*t63266*t63397*(2.0/3.0)+b1a*c*t63381*t63398*(1.0/6.0)+b3a* \
               c*t63381*t63328*(1.0/2.0)))/t63416+Aa*a1a*c*t63353*t63407*t63381*t63417*t63427*t63293*(2.0/3.0))+t63353* \
               t63293*t63347*t63348*t63393)-t63497*(t63307+t63290*t63293*(t63306-c0p*t63277*t63279*2.0))-(rho_a[index]* \
               t63442+rho_b[index]*(t63324-t63290*t63293*(t63324-c0f*log((t63294*(1.0/2.0))/(b1f*t63310+b3f*t63311+ \
               b2f*c*t63308+b4f*t63312*t63266)+1.0)*(a1f*c*t63308+1.0)*2.0))-t63325*(t63342+t63441-t63353*t63293* \
               t63347*t63348*t63393))*(ccab1*gamma_aa[index]*gcab*t63357*t63379*(4.0/3.0)-ccab2*t63354*1/(t63372* \
               t63372)*t63356*(gamma_aa[index]*gcab*t63357*(8.0/3.0)+gamma_aa[index]*t63354*t63355*t63357*(8.0/3.0) \
               )-ccab4*t63361*t63362*1/(t63367*t63367)*(gamma_aa[index]*gcab*t63357*(1.6E1/3.0)+gamma_aa[index]*t63354* \
               t63355*t63357*1.6E1+gamma_aa[index]*gcab*t63354*t63356*t63357*1.6E1+gamma_aa[index]*t63361*t63355* \
               t63356*t63357*(1.6E1/3.0))-ccab1*gamma_aa[index]*t63354*t63355*t63357*1/(t63369*t63369)*(4.0/3.0)+ \
               ccab2*gamma_aa[index]*t63354*t63355*t63357*t63377*(8.0/3.0)-ccab3*gcab*t63354*t63355*t63356*1/(t63376* \
               t63376)*(gamma_aa[index]*gcab*t63357*4.0+gamma_aa[index]*t63354*t63355*t63357*8.0+gamma_aa[index]* \
               gcab*t63354*t63356*t63357*4.0)+ccab3*gamma_aa[index]*gcab*t63354*t63356*t63357*t63378*4.0+ccab4*gamma_aa[index]* \
               t63361*t63380*t63355*t63356*t63357*(1.6E1/3.0))+rho_a[index]*t63442*(ccaa1*gamma_aa[index]*gcaa*t63451* \
               t63357*(8.0/3.0)+ccaa2*t63280*t63460*t63281*t63461*(1.6E1/3.0)+ccaa4*t63282*t63283*t63463*t63448*(3.2E1/ \
               3.0)-ccaa1*1/(t63450*t63450)*t63280*t63281*t63461*(8.0/3.0)-ccaa2*t63280*t63281*t63287*1/(t63459*t63459) \
               *(gamma_aa[index]*gcaa*t63357*(1.6E1/3.0)+t63280*t63281*t63461*(1.6E1/3.0))-ccaa4*t63282*t63283*t63284* \
               1/(t63447*t63447)*(gamma_aa[index]*gcaa*t63357*(3.2E1/3.0)+t63280*t63281*t63461*3.2E1+t63282*t63283* \
               t63463*(3.2E1/3.0)+gamma_aa[index]*gcaa*t63280*t63281*t63462*3.2E1)+ccaa3*gamma_aa[index]*gcaa*t63280* \
               t63281*t63462*t63456*8.0-ccaa3*gamma_aa[index]*gcaa*t63280*t63281*1/(t63455*t63455)*t63286*(gamma_aa[index]* \
               gcaa*t63357*8.0+t63280*t63281*t63461*1.6E1+gamma_aa[index]*gcaa*t63280*t63281*t63462*8.0))+c0*pow(rho_a[index],1.0/ \
               3.0)*(cx0+cx1*gamma_aa[index]*gx*t63285*t63474+cx2*t63280*t63464*t63483*t63287+cx4*t63282*t63471*t63284* \
               t63465+cx3*gamma_aa[index]*gx*t63280*t63464*t63286*t63479)*(4.0/3.0)+rho_a[index]*t63497*(-t63438+ \
               t63492+t63290*t63293*(t63491+t63438-t63492-t63305*t63490*t63484*t63485))-c0*pow(rho_a[index],4.0/3.0) \
               *(cx1*gamma_aa[index]*gx*t63357*t63474*(8.0/3.0)+cx2*t63280*t63461*t63464*t63483*(1.6E1/3.0)+cx4*t63282* \
               t63471*t63463*t63465*(3.2E1/3.0)-cx1*t63280*t63461*t63464*1/(t63473*t63473)*(8.0/3.0)-cx2*t63280*t63464* \
               1/(t63482*t63482)*t63287*(gamma_aa[index]*gx*t63357*(1.6E1/3.0)+t63280*t63461*t63464*(1.6E1/3.0))- \
               cx4*1/(t63470*t63470)*t63282*t63284*t63465*(gamma_aa[index]*gx*t63357*(3.2E1/3.0)+t63280*t63461*t63464* \
               3.2E1+t63282*t63463*t63465*(3.2E1/3.0)+gamma_aa[index]*gx*t63280*t63462*t63464*3.2E1)+cx3*gamma_aa[index]* \
               gx*t63280*t63462*t63464*t63479*8.0-cx3*gamma_aa[index]*gx*t63280*t63464*t63286*1/(t63478*t63478)*(gamma_aa[index]* \
               gx*t63357*8.0+t63280*t63461*t63464*1.6E1+gamma_aa[index]*gx*t63280*t63462*t63464*8.0));
        } else if (rho_a[index] > cutoff_) {
            double t67315 = 1/pow(rho_a[index],1.0/3.0);
            double t67316 = c*t67315;
            double t67317 = sqrt(t67316);
            double t67318 = pow(t67316,3.0/2.0);
            double t67319 = c*c;
            double t67320 = 1/pow(rho_a[index],2.0/3.0);
            double t67321 = 1/c0p;
            double t67322 = b1p*t67317;
            double t67323 = b3p*t67318;
            double t67324 = b4p*t67320*t67319;
            double t67325 = b2p*c*t67315;
            double t67326 = t67322+t67323+t67324+t67325;
            double t67327 = 1/t67326;
            double t67328 = t67321*t67327*(1.0/2.0);
            double t67329 = t67328+1.0;
            double t67330 = log(t67329);
            double t67331 = a1p*c*t67315;
            double t67332 = t67331+1.0;
            double t67333 = gamma_aa[index]*gamma_aa[index];
            double t67334 = gcaa*gcaa;
            double t67335 = t67333*t67333;
            double t67336 = t67334*t67334;
            double t67337 = 1/pow(rho_a[index],3.2E1/3.0);
            double t67338 = 1/pow(rho_a[index],8.0/3.0);
            double t67339 = 1/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]);
            double t67340 = 1/pow(rho_a[index],1.6E1/3.0);
            double t67341 = pow(2.0,1.0/3.0);
            double t67342 = t67341*2.0;
            double t67343 = t67342-2.0;
            double t67344 = two_13*2.0;
            double t67345 = t67344-2.0;
            double t67346 = 1/t67345;
            double t67347 = 1/c0f;
            double t67348 = b1f*t67317;
            double t67349 = b3f*t67318;
            double t67350 = b4f*t67320*t67319;
            double t67351 = b2f*c*t67315;
            double t67352 = t67350+t67351+t67348+t67349;
            double t67353 = 1/t67352;
            double t67354 = t67353*t67347*(1.0/2.0);
            double t67355 = t67354+1.0;
            double t67356 = log(t67355);
            double t67357 = a1f*c*t67315;
            double t67358 = t67357+1.0;
            double t67359 = c0f*t67356*t67358*2.0;
            double t67360 = c0p*t67330*t67332*2.0;
            double t67361 = gamma_aa[index]*gcaa*t67338*4.0;
            double t67362 = gamma_aa[index]*gcaa*t67333*t67334*t67339*4.0;
            double t67363 = t67340*t67333*t67334*6.0;
            double t67364 = t67335*t67336*t67337;
            double t67365 = t67361+t67362+t67363+t67364+1.0;
            double t67366 = 1/t67365;
            double t67367 = gamma_aa[index]*gcaa*t67338;
            double t67368 = t67367+1.0;
            double t67369 = 1/t67368;
            double t67370 = gamma_aa[index]*gcaa*t67338*3.0;
            double t67371 = gamma_aa[index]*gcaa*t67333*t67334*t67339;
            double t67372 = t67340*t67333*t67334*3.0;
            double t67373 = t67370+t67371+t67372+1.0;
            double t67374 = 1/t67373;
            double t67375 = gamma_aa[index]*gcaa*t67338*2.0;
            double t67376 = t67340*t67333*t67334;
            double t67377 = t67375+t67376+1.0;
            double t67378 = 1/t67377;
            double t67379 = 1/pow(rho_a[index],1.9E1/3.0);
            double t67380 = 1/pow(rho_a[index],1.1E1/3.0);
            double t67381 = 1/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]*rho_a[index]);
            double t67382 = 1/pow(rho_a[index],3.5E1/3.0);
            double t67383 = gx*gx;
            double t67384 = t67383*t67383;
            double t67385 = gamma_aa[index]*gx*t67338*4.0;
            double t67386 = gamma_aa[index]*gx*t67333*t67383*t67339*4.0;
            double t67387 = t67340*t67333*t67383*6.0;
            double t67388 = t67335*t67337*t67384;
            double t67389 = t67385+t67386+t67387+t67388+1.0;
            double t67390 = 1/t67389;
            double t67391 = gamma_aa[index]*gx*t67338;
            double t67392 = t67391+1.0;
            double t67393 = 1/t67392;
            double t67394 = gamma_aa[index]*gx*t67338*3.0;
            double t67395 = gamma_aa[index]*gx*t67333*t67383*t67339;
            double t67396 = t67340*t67333*t67383*3.0;
            double t67397 = t67394+t67395+t67396+1.0;
            double t67398 = 1/t67397;
            double t67399 = gamma_aa[index]*gx*t67338*2.0;
            double t67400 = t67340*t67333*t67383;
            double t67401 = t67400+t67399+1.0;
            double t67402 = 1/t67401;
            double t67403 = 1/pow(rho_a[index],4.0/3.0);
            double t67404 = 1/pow(rho_a[index],5.0/3.0);
            double t67405 = 1/sqrt(t67316);
            double t67406 = 1/t67329;
            double t67407 = 1/(t67326*t67326);
            double t67408 = b4p*t67404*t67319*(2.0/3.0);
            double t67409 = b2p*c*t67403*(1.0/3.0);
            double t67410 = b1p*c*t67403*t67405*(1.0/6.0);
            double t67411 = b3p*c*t67403*t67317*(1.0/2.0);
            double t67412 = t67410+t67411+t67408+t67409;
            double t67413 = t67412*t67332*t67406*t67407;
            double t67414 = ccaa4*t67335*t67336*t67337*t67366;
            double t67415 = ccaa1*gamma_aa[index]*gcaa*t67338*t67369;
            double t67416 = ccaa3*gamma_aa[index]*gcaa*t67333*t67334*t67374*t67339;
            double t67417 = ccaa2*t67340*t67333*t67334*t67378;
            double t67418 = ccaa0+t67414+t67415+t67416+t67417;
            v_rho_a_[index] = -t67418*(t67360+t67343*t67346*(t67359-c0p*t67330*t67332*2.0))+rho_a[index]*t67418* \
               (-t67413+t67343*t67346*(t67413-(1/(t67352*t67352)*t67358*(b2f*c*t67403*(1.0/3.0)+b4f*t67404*t67319* \
               (2.0/3.0)+b1f*c*t67403*t67405*(1.0/6.0)+b3f*c*t67403*t67317*(1.0/2.0)))/t67355+a1f*c*c0f*t67403*t67356* \
               (2.0/3.0)-a1p*c*c0p*t67330*t67403*(2.0/3.0))+a1p*c*c0p*t67330*t67403*(2.0/3.0))+c0*pow(rho_a[index],1.0/ \
               3.0)*(cx0+cx1*gamma_aa[index]*gx*t67338*t67393+cx2*t67402*t67340*t67333*t67383+cx4*t67335*t67390*t67337* \
               t67384+cx3*gamma_aa[index]*gx*t67333*t67383*t67339*t67398)*(4.0/3.0)+rho_a[index]*(t67360-t67343*t67346* \
               (t67360-t67359))*(ccaa1*gamma_aa[index]*gcaa*t67380*t67369*(8.0/3.0)+ccaa4*t67335*t67336*t67382*t67366* \
               (3.2E1/3.0)+ccaa2*t67333*t67334*t67378*t67379*(1.6E1/3.0)-ccaa1*t67333*t67334*1/(t67368*t67368)*t67379* \
               (8.0/3.0)-ccaa2*t67340*t67333*t67334*1/(t67377*t67377)*(gamma_aa[index]*gcaa*t67380*(1.6E1/3.0)+t67333* \
               t67334*t67379*(1.6E1/3.0))-ccaa4*t67335*t67336*t67337*1/(t67365*t67365)*(gamma_aa[index]*gcaa*t67380* \
               (3.2E1/3.0)+t67335*t67336*t67382*(3.2E1/3.0)+t67333*t67334*t67379*3.2E1+gamma_aa[index]*gcaa*t67333* \
               t67334*t67381*3.2E1)+ccaa3*gamma_aa[index]*gcaa*t67333*t67334*t67381*t67374*8.0-ccaa3*gamma_aa[index]* \
               gcaa*t67333*t67334*1/(t67373*t67373)*t67339*(gamma_aa[index]*gcaa*t67380*8.0+t67333*t67334*t67379* \
               1.6E1+gamma_aa[index]*gcaa*t67333*t67334*t67381*8.0))-c0*pow(rho_a[index],4.0/3.0)*(cx1*gamma_aa[index]* \
               gx*t67380*t67393*(8.0/3.0)+cx2*t67402*t67333*t67383*t67379*(1.6E1/3.0)+cx4*t67335*t67390*t67382*t67384* \
               (3.2E1/3.0)-cx1*t67333*t67383*1/(t67392*t67392)*t67379*(8.0/3.0)-cx2*1/(t67401*t67401)*t67340*t67333* \
               t67383*(gamma_aa[index]*gx*t67380*(1.6E1/3.0)+t67333*t67383*t67379*(1.6E1/3.0))-cx4*t67335*t67337* \
               t67384*1/(t67389*t67389)*(gamma_aa[index]*gx*t67380*(3.2E1/3.0)+t67335*t67382*t67384*(3.2E1/3.0)+t67333* \
               t67383*t67379*3.2E1+gamma_aa[index]*gx*t67333*t67381*t67383*3.2E1)+cx3*gamma_aa[index]*gx*t67333*t67381* \
               t67383*t67398*8.0-cx3*gamma_aa[index]*gx*t67333*t67383*t67339*1/(t67397*t67397)*(gamma_aa[index]*gx* \
               t67380*8.0+t67333*t67383*t67379*1.6E1+gamma_aa[index]*gx*t67333*t67381*t67383*8.0));
        } else if (rho_b[index] > cutoff_) {
            v_rho_a_[index] = 0.0;
        } else {
            v_rho_a_[index] = 0.0;
        } 

        //V_rho_b
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t63499 = 1/pow(rho_b[index],1.0/3.0);
            double t63500 = c*t63499;
            double t63501 = sqrt(t63500);
            double t63502 = pow(t63500,3.0/2.0);
            double t63503 = c*c;
            double t63504 = 1/pow(rho_b[index],2.0/3.0);
            double t63505 = 1/c0p;
            double t63506 = b1p*t63501;
            double t63507 = b3p*t63502;
            double t63508 = b4p*t63503*t63504;
            double t63509 = b2p*c*t63499;
            double t63510 = t63506+t63507+t63508+t63509;
            double t63511 = 1/t63510;
            double t63512 = t63511*t63505*(1.0/2.0);
            double t63513 = t63512+1.0;
            double t63514 = log(t63513);
            double t63515 = a1p*c*t63499;
            double t63516 = t63515+1.0;
            double t63517 = gamma_bb[index]*gamma_bb[index];
            double t63518 = gcaa*gcaa;
            double t63519 = t63517*t63517;
            double t63520 = t63518*t63518;
            double t63521 = 1/pow(rho_b[index],3.2E1/3.0);
            double t63522 = 1/pow(rho_b[index],8.0/3.0);
            double t63523 = 1/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
               rho_b[index]*rho_b[index]);
            double t63524 = 1/pow(rho_b[index],1.6E1/3.0);
            double t63525 = pow(2.0,1.0/3.0);
            double t63526 = t63525*2.0;
            double t63527 = t63526-2.0;
            double t63528 = two_13*2.0;
            double t63529 = t63528-2.0;
            double t63530 = 1/t63529;
            double t63531 = 1/c0f;
            double t63532 = 1/pow(rho_a[index],1.0/3.0);
            double t63533 = c*t63532;
            double t63534 = sqrt(t63533);
            double t63535 = pow(t63533,3.0/2.0);
            double t63536 = 1/pow(rho_a[index],2.0/3.0);
            double t63537 = b1p*t63534;
            double t63538 = b3p*t63535;
            double t63539 = b4p*t63503*t63536;
            double t63540 = b2p*c*t63532;
            double t63541 = t63540+t63537+t63538+t63539;
            double t63542 = 1/t63541;
            double t63543 = t63505*t63542*(1.0/2.0);
            double t63544 = t63543+1.0;
            double t63545 = log(t63544);
            double t63546 = a1p*c*t63532;
            double t63547 = t63546+1.0;
            double t63548 = c0p*t63545*t63547*2.0;
            double t63549 = b1f*t63501;
            double t63550 = b3f*t63502;
            double t63551 = b4f*t63503*t63504;
            double t63552 = b2f*c*t63499;
            double t63553 = t63550+t63551+t63552+t63549;
            double t63554 = 1/t63553;
            double t63555 = t63531*t63554*(1.0/2.0);
            double t63556 = t63555+1.0;
            double t63557 = log(t63556);
            double t63558 = a1f*c*t63499;
            double t63559 = t63558+1.0;
            double t63560 = c0f*t63557*t63559*2.0;
            double t63561 = c0p*t63514*t63516*2.0;
            double t63562 = rho_a[index]+rho_b[index];
            double t63563 = 1/pow(t63562,1.0/3.0);
            double t63564 = c*t63563;
            double t63565 = sqrt(t63564);
            double t63566 = pow(t63564,3.0/2.0);
            double t63567 = 1/pow(t63562,2.0/3.0);
            double t63568 = b1p*t63565;
            double t63569 = b3p*t63566;
            double t63570 = b4p*t63503*t63567;
            double t63571 = b2p*c*t63563;
            double t63572 = t63570+t63571+t63568+t63569;
            double t63573 = 1/t63572;
            double t63574 = t63505*t63573*(1.0/2.0);
            double t63575 = t63574+1.0;
            double t63576 = log(t63575);
            double t63577 = a1p*c*t63563;
            double t63578 = t63577+1.0;
            double t63579 = c0p*t63576*t63578*2.0;
            double t63580 = rho_a[index]-rho_b[index];
            double t63581 = t63580*t63580;
            double t63582 = 1/t63562;
            double t63583 = t63580*t63582;
            double t63584 = 1/(t63562*t63562*t63562*t63562);
            double t63585 = t63581*t63581;
            double t63586 = t63583+1.0;
            double t63587 = pow(t63586,4.0/3.0);
            double t63588 = -t63583+1.0;
            double t63589 = pow(t63588,4.0/3.0);
            double t63590 = t63587+t63589-2.0;
            double t63591 = gcab*gcab;
            double t63595 = 1/pow(rho_a[index],8.0/3.0);
            double t63596 = gamma_aa[index]*t63595*(1.0/2.0);
            double t63597 = gamma_bb[index]*t63522*(1.0/2.0);
            double t63592 = t63596+t63597;
            double t63593 = t63592*t63592;
            double t63594 = 1/pow(rho_b[index],1.1E1/3.0);
            double t63598 = t63591*t63591;
            double t63599 = t63593*t63593;
            double t63600 = t63591*t63593*6.0;
            double t63601 = gcab*t63591*t63592*t63593*4.0;
            double t63602 = t63598*t63599;
            double t63603 = gcab*t63592*4.0;
            double t63604 = t63600+t63601+t63602+t63603+1.0;
            double t63605 = gcab*t63592;
            double t63606 = t63605+1.0;
            double t63607 = t63591*t63593;
            double t63608 = gcab*t63592*2.0;
            double t63609 = t63607+t63608+1.0;
            double t63610 = t63591*t63593*3.0;
            double t63611 = gcab*t63591*t63592*t63593;
            double t63612 = gcab*t63592*3.0;
            double t63613 = t63610+t63611+t63612+1.0;
            double t63614 = 1/t63609;
            double t63615 = 1/t63613;
            double t63616 = 1/t63606;
            double t63617 = 1/t63604;
            double t63618 = 1/pow(t63562,4.0/3.0);
            double t63619 = b1f*t63565;
            double t63620 = b3f*t63566;
            double t63621 = b4f*t63503*t63567;
            double t63622 = b2f*c*t63563;
            double t63623 = t63620+t63621+t63622+t63619;
            double t63624 = 1/t63623;
            double t63625 = t63531*t63624*(1.0/2.0);
            double t63626 = t63625+1.0;
            double t63627 = log(t63626);
            double t63628 = a1f*c*t63563;
            double t63629 = t63628+1.0;
            double t63631 = c0f*t63627*t63629*2.0;
            double t63630 = -t63631+t63579;
            double t63632 = 1/(t63562*t63562);
            double t63633 = t63632*t63580;
            double t63634 = t63633+t63582;
            double t63635 = t63631-t63579;
            double t63636 = 1/pow(t63562,5.0/3.0);
            double t63637 = 1/sqrt(t63564);
            double t63638 = 1/t63575;
            double t63639 = 1/(t63572*t63572);
            double t63640 = b4p*t63503*t63636*(2.0/3.0);
            double t63641 = b2p*c*t63618*(1.0/3.0);
            double t63642 = b1p*c*t63618*t63637*(1.0/6.0);
            double t63643 = b3p*c*t63618*t63565*(1.0/2.0);
            double t63644 = t63640+t63641+t63642+t63643;
            double t63645 = 1/d2fz0;
            double t63646 = 1/Aa;
            double t63647 = b1a*t63565;
            double t63648 = b3a*t63566;
            double t63649 = b4a*t63503*t63567;
            double t63650 = b2a*c*t63563;
            double t63651 = t63650+t63647+t63648+t63649;
            double t63652 = 1/t63651;
            double t63653 = t63652*t63646*(1.0/2.0);
            double t63654 = t63653+1.0;
            double t63655 = log(t63654);
            double t63656 = a1a*c*t63563;
            double t63657 = t63656+1.0;
            double t63658 = 1/(t63562*t63562*t63562*t63562*t63562);
            double t63659 = pow(t63586,1.0/3.0);
            double t63660 = t63634*t63659*(4.0/3.0);
            double t63661 = pow(t63588,1.0/3.0);
            double t63662 = t63660-t63634*t63661*(4.0/3.0);
            double t63663 = t63584*t63585;
            double t63664 = t63663-1.0;
            double t63665 = 1/pow(rho_b[index],4.0/3.0);
            double t63666 = 1/pow(rho_b[index],5.0/3.0);
            double t63667 = 1/sqrt(t63500);
            double t63668 = 1/t63513;
            double t63669 = 1/(t63510*t63510);
            double t63670 = b4p*t63503*t63666*(2.0/3.0);
            double t63671 = b2p*c*t63665*(1.0/3.0);
            double t63672 = b1p*c*t63665*t63667*(1.0/6.0);
            double t63673 = b3p*c*t63501*t63665*(1.0/2.0);
            double t63674 = t63670+t63671+t63672+t63673;
            double t63675 = t63516*t63674*t63668*t63669;
            double t63676 = t63560-t63561;
            double t63677 = t63530*t63527*t63676;
            double t63678 = Aa*t63530*t63590*t63645*t63655*t63664*t63657*2.0;
            double t63679 = a1p*c*c0p*t63618*t63576*(2.0/3.0);
            double t63680 = t63561+t63677;
            double t63681 = gamma_bb[index]*gcaa*t63522*4.0;
            double t63682 = gamma_bb[index]*gcaa*t63523*t63517*t63518*4.0;
            double t63683 = t63524*t63517*t63518*6.0;
            double t63684 = t63520*t63521*t63519;
            double t63685 = t63681+t63682+t63683+t63684+1.0;
            double t63686 = 1/t63685;
            double t63687 = gamma_bb[index]*gcaa*t63522;
            double t63688 = t63687+1.0;
            double t63689 = 1/t63688;
            double t63690 = gamma_bb[index]*gcaa*t63522*3.0;
            double t63691 = gamma_bb[index]*gcaa*t63523*t63517*t63518;
            double t63692 = t63524*t63517*t63518*3.0;
            double t63693 = t63690+t63691+t63692+1.0;
            double t63694 = 1/t63693;
            double t63695 = gamma_bb[index]*gcaa*t63522*2.0;
            double t63696 = t63524*t63517*t63518;
            double t63697 = t63695+t63696+1.0;
            double t63698 = 1/t63697;
            double t63699 = 1/pow(rho_b[index],1.9E1/3.0);
            double t63700 = 1/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
               rho_b[index]*rho_b[index]*rho_b[index]);
            double t63701 = 1/pow(rho_b[index],3.5E1/3.0);
            double t63702 = gx*gx;
            double t63703 = t63702*t63702;
            double t63704 = gamma_bb[index]*gx*t63522*4.0;
            double t63705 = gamma_bb[index]*gx*t63702*t63523*t63517*4.0;
            double t63706 = t63702*t63524*t63517*6.0;
            double t63707 = t63521*t63703*t63519;
            double t63708 = t63704+t63705+t63706+t63707+1.0;
            double t63709 = 1/t63708;
            double t63710 = gamma_bb[index]*gx*t63522;
            double t63711 = t63710+1.0;
            double t63712 = 1/t63711;
            double t63713 = gamma_bb[index]*gx*t63522*3.0;
            double t63714 = gamma_bb[index]*gx*t63702*t63523*t63517;
            double t63715 = t63702*t63524*t63517*3.0;
            double t63716 = t63713+t63714+t63715+1.0;
            double t63717 = 1/t63716;
            double t63718 = gamma_bb[index]*gx*t63522*2.0;
            double t63719 = t63702*t63524*t63517;
            double t63720 = t63718+t63719+1.0;
            double t63721 = 1/t63720;
            double t63722 = 1/t63556;
            double t63723 = 1/(t63553*t63553);
            double t63724 = b4f*t63503*t63666*(2.0/3.0);
            double t63725 = b2f*c*t63665*(1.0/3.0);
            double t63726 = b1f*c*t63665*t63667*(1.0/6.0);
            double t63727 = b3f*c*t63501*t63665*(1.0/2.0);
            double t63728 = t63724+t63725+t63726+t63727;
            double t63729 = a1f*c*c0f*t63557*t63665*(2.0/3.0);
            double t63730 = a1p*c*c0p*t63514*t63665*(2.0/3.0);
            double t63731 = ccaa4*t63520*t63521*t63519*t63686;
            double t63732 = ccaa1*gamma_bb[index]*gcaa*t63522*t63689;
            double t63733 = ccaa3*gamma_bb[index]*gcaa*t63523*t63517*t63518*t63694;
            double t63734 = ccaa2*t63524*t63517*t63518*t63698;
            double t63735 = ccaa0+t63731+t63732+t63733+t63734;
            v_rho_b_[index] = -t63735*(t63561+t63530*t63527*(t63560-c0p*t63514*t63516*2.0))-(ccab0+ccab1*gcab* \
               t63616*t63592+ccab2*t63614*t63591*t63593+ccab4*t63617*t63598*t63599+ccab3*gcab*t63615*t63591*t63592* \
               t63593)*(-t63561-t63677+t63579+t63678+rho_b[index]*(t63730-t63675+t63530*t63527*(t63675+t63729-t63722* \
               t63723*t63728*t63559-a1p*c*c0p*t63514*t63665*(2.0/3.0)))-t63562*(t63679-t63644*t63638*t63639*t63578+ \
               t63530*t63635*t63662*t63584*t63585+t63530*t63590*t63635*t63585*t63658*4.0-t63530*t63590*t63584*t63585* \
               (t63679-t63644*t63638*t63639*t63578+(1/(t63623*t63623)*t63629*(b2f*c*t63618*(1.0/3.0)+b4f*t63503*t63636* \
               (2.0/3.0)+b1f*c*t63618*t63637*(1.0/6.0)+b3f*c*t63618*t63565*(1.0/2.0)))/t63626-a1f*c*c0f*t63618*t63627* \
               (2.0/3.0))-t63530*t63630*t63580*t63581*t63590*t63584*4.0+Aa*t63530*t63590*t63645*t63655*t63657*(t63585* \
               t63658*4.0+t63580*t63581*t63584*4.0)*2.0+Aa*t63530*t63662*t63645*t63655*t63664*t63657*2.0-(t63530* \
               1/(t63651*t63651)*t63590*t63645*t63664*t63657*(b2a*c*t63618*(1.0/3.0)+b4a*t63503*t63636*(2.0/3.0)+ \
               b1a*c*t63618*t63637*(1.0/6.0)+b3a*c*t63618*t63565*(1.0/2.0)))/t63654+Aa*a1a*c*t63530*t63590*t63618* \
               t63645*t63655*t63664*(2.0/3.0))+t63530*t63590*t63635*t63584*t63585)-(rho_b[index]*t63680+rho_a[index]* \
               (t63548-t63530*t63527*(t63548-c0f*log((t63531*(1.0/2.0))/(b1f*t63534+b3f*t63535+b2f*c*t63532+b4f*t63503* \
               t63536)+1.0)*(a1f*c*t63532+1.0)*2.0))-t63562*(t63579+t63678-t63530*t63630*t63590*t63584*t63585))*(ccab1* \
               gamma_bb[index]*gcab*t63616*t63594*(4.0/3.0)-ccab2*t63591*1/(t63609*t63609)*t63593*(gamma_bb[index]* \
               gcab*t63594*(8.0/3.0)+gamma_bb[index]*t63591*t63592*t63594*(8.0/3.0))-ccab4*1/(t63604*t63604)*t63598* \
               t63599*(gamma_bb[index]*gcab*t63594*(1.6E1/3.0)+gamma_bb[index]*t63591*t63592*t63594*1.6E1+gamma_bb[index]* \
               gcab*t63591*t63593*t63594*1.6E1+gamma_bb[index]*t63592*t63593*t63594*t63598*(1.6E1/3.0))-ccab1*gamma_bb[index]* \
               1/(t63606*t63606)*t63591*t63592*t63594*(4.0/3.0)+ccab2*gamma_bb[index]*t63614*t63591*t63592*t63594* \
               (8.0/3.0)-ccab3*gcab*1/(t63613*t63613)*t63591*t63592*t63593*(gamma_bb[index]*gcab*t63594*4.0+gamma_bb[index]* \
               t63591*t63592*t63594*8.0+gamma_bb[index]*gcab*t63591*t63593*t63594*4.0)+ccab3*gamma_bb[index]*gcab* \
               t63615*t63591*t63593*t63594*4.0+ccab4*gamma_bb[index]*t63617*t63592*t63593*t63594*t63598*(1.6E1/3.0) \
               )+rho_b[index]*t63680*(ccaa1*gamma_bb[index]*gcaa*t63594*t63689*(8.0/3.0)+ccaa4*t63520*t63701*t63519* \
               t63686*(3.2E1/3.0)+ccaa2*t63517*t63518*t63698*t63699*(1.6E1/3.0)-ccaa1*t63517*t63518*1/(t63688*t63688) \
               *t63699*(8.0/3.0)-ccaa2*t63524*t63517*t63518*1/(t63697*t63697)*(gamma_bb[index]*gcaa*t63594*(1.6E1/ \
               3.0)+t63517*t63518*t63699*(1.6E1/3.0))-ccaa4*t63520*t63521*t63519*1/(t63685*t63685)*(gamma_bb[index]* \
               gcaa*t63594*(3.2E1/3.0)+t63520*t63701*t63519*(3.2E1/3.0)+t63517*t63518*t63699*3.2E1+gamma_bb[index]* \
               gcaa*t63700*t63517*t63518*3.2E1)+ccaa3*gamma_bb[index]*gcaa*t63700*t63517*t63518*t63694*8.0-ccaa3* \
               gamma_bb[index]*gcaa*t63523*t63517*t63518*1/(t63693*t63693)*(gamma_bb[index]*gcaa*t63594*8.0+t63517* \
               t63518*t63699*1.6E1+gamma_bb[index]*gcaa*t63700*t63517*t63518*8.0))+c0*pow(rho_b[index],1.0/3.0)*(cx0+ \
               cx1*gamma_bb[index]*gx*t63522*t63712+cx2*t63702*t63721*t63524*t63517+cx4*t63521*t63703*t63519*t63709+ \
               cx3*gamma_bb[index]*gx*t63702*t63523*t63517*t63717)*(4.0/3.0)-c0*pow(rho_b[index],4.0/3.0)*(cx1*gamma_bb[index]* \
               gx*t63712*t63594*(8.0/3.0)+cx2*t63702*t63721*t63517*t63699*(1.6E1/3.0)+cx4*t63701*t63703*t63519*t63709* \
               (3.2E1/3.0)-cx1*t63702*1/(t63711*t63711)*t63517*t63699*(8.0/3.0)-cx2*t63702*1/(t63720*t63720)*t63524* \
               t63517*(gamma_bb[index]*gx*t63594*(1.6E1/3.0)+t63702*t63517*t63699*(1.6E1/3.0))-cx4*t63521*t63703* \
               t63519*1/(t63708*t63708)*(gamma_bb[index]*gx*t63594*(3.2E1/3.0)+t63701*t63703*t63519*(3.2E1/3.0)+t63702* \
               t63517*t63699*3.2E1+gamma_bb[index]*gx*t63700*t63702*t63517*3.2E1)+cx3*gamma_bb[index]*gx*t63700*t63702* \
               t63517*t63717*8.0-cx3*gamma_bb[index]*gx*t63702*t63523*t63517*1/(t63716*t63716)*(gamma_bb[index]*gx* \
               t63594*8.0+t63702*t63517*t63699*1.6E1+gamma_bb[index]*gx*t63700*t63702*t63517*8.0))-rho_b[index]*t63735* \
               (-t63730+t63675+t63530*t63527*(t63730-t63675-t63729+t63722*t63723*t63728*t63559));
        } else if (rho_a[index] > cutoff_) {
            v_rho_b_[index] = 0.0;
        } else if (rho_b[index] > cutoff_) {
            double t66677 = 1/pow(rho_b[index],1.0/3.0);
            double t66678 = c*t66677;
            double t66679 = sqrt(t66678);
            double t66680 = pow(t66678,3.0/2.0);
            double t66681 = c*c;
            double t66682 = 1/pow(rho_b[index],2.0/3.0);
            double t66683 = 1/c0p;
            double t66684 = b1p*t66679;
            double t66685 = b3p*t66680;
            double t66686 = b4p*t66681*t66682;
            double t66687 = b2p*c*t66677;
            double t66688 = t66684+t66685+t66686+t66687;
            double t66689 = 1/t66688;
            double t66690 = t66683*t66689*(1.0/2.0);
            double t66691 = t66690+1.0;
            double t66692 = log(t66691);
            double t66693 = a1p*c*t66677;
            double t66694 = t66693+1.0;
            double t66695 = gamma_bb[index]*gamma_bb[index];
            double t66696 = gcaa*gcaa;
            double t66697 = t66695*t66695;
            double t66698 = t66696*t66696;
            double t66699 = 1/pow(rho_b[index],3.2E1/3.0);
            double t66700 = 1/pow(rho_b[index],8.0/3.0);
            double t66701 = 1/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
               rho_b[index]*rho_b[index]);
            double t66702 = 1/pow(rho_b[index],1.6E1/3.0);
            double t66703 = pow(2.0,1.0/3.0);
            double t66704 = t66703*2.0;
            double t66705 = t66704-2.0;
            double t66706 = two_13*2.0;
            double t66707 = t66706-2.0;
            double t66708 = 1/t66707;
            double t66709 = 1/c0f;
            double t66710 = b1f*t66679;
            double t66711 = b3f*t66680;
            double t66712 = b4f*t66681*t66682;
            double t66713 = b2f*c*t66677;
            double t66714 = t66710+t66711+t66712+t66713;
            double t66715 = 1/t66714;
            double t66716 = t66715*t66709*(1.0/2.0);
            double t66717 = t66716+1.0;
            double t66718 = log(t66717);
            double t66719 = a1f*c*t66677;
            double t66720 = t66719+1.0;
            double t66721 = c0f*t66720*t66718*2.0;
            double t66722 = c0p*t66692*t66694*2.0;
            double t66723 = gamma_bb[index]*gcaa*t66700*4.0;
            double t66724 = gamma_bb[index]*gcaa*t66701*t66695*t66696*4.0;
            double t66725 = t66702*t66695*t66696*6.0;
            double t66726 = t66697*t66698*t66699;
            double t66727 = t66723+t66724+t66725+t66726+1.0;
            double t66728 = 1/t66727;
            double t66729 = gamma_bb[index]*gcaa*t66700;
            double t66730 = t66729+1.0;
            double t66731 = 1/t66730;
            double t66732 = gamma_bb[index]*gcaa*t66700*3.0;
            double t66733 = gamma_bb[index]*gcaa*t66701*t66695*t66696;
            double t66734 = t66702*t66695*t66696*3.0;
            double t66735 = t66732+t66733+t66734+1.0;
            double t66736 = 1/t66735;
            double t66737 = gamma_bb[index]*gcaa*t66700*2.0;
            double t66738 = t66702*t66695*t66696;
            double t66739 = t66737+t66738+1.0;
            double t66740 = 1/t66739;
            double t66741 = 1/pow(rho_b[index],1.9E1/3.0);
            double t66742 = 1/pow(rho_b[index],1.1E1/3.0);
            double t66743 = 1/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
               rho_b[index]*rho_b[index]*rho_b[index]);
            double t66744 = 1/pow(rho_b[index],3.5E1/3.0);
            double t66745 = gx*gx;
            double t66746 = t66745*t66745;
            double t66747 = gamma_bb[index]*gx*t66700*4.0;
            double t66748 = gamma_bb[index]*gx*t66701*t66745*t66695*4.0;
            double t66749 = t66702*t66745*t66695*6.0;
            double t66750 = t66746*t66697*t66699;
            double t66751 = t66750+t66747+t66748+t66749+1.0;
            double t66752 = 1/t66751;
            double t66753 = gamma_bb[index]*gx*t66700;
            double t66754 = t66753+1.0;
            double t66755 = 1/t66754;
            double t66756 = gamma_bb[index]*gx*t66700*3.0;
            double t66757 = gamma_bb[index]*gx*t66701*t66745*t66695;
            double t66758 = t66702*t66745*t66695*3.0;
            double t66759 = t66756+t66757+t66758+1.0;
            double t66760 = 1/t66759;
            double t66761 = gamma_bb[index]*gx*t66700*2.0;
            double t66762 = t66702*t66745*t66695;
            double t66763 = t66761+t66762+1.0;
            double t66764 = 1/t66763;
            double t66765 = 1/pow(rho_b[index],4.0/3.0);
            double t66766 = 1/pow(rho_b[index],5.0/3.0);
            double t66767 = 1/sqrt(t66678);
            double t66768 = 1/t66691;
            double t66769 = 1/(t66688*t66688);
            double t66770 = b4p*t66681*t66766*(2.0/3.0);
            double t66771 = b2p*c*t66765*(1.0/3.0);
            double t66772 = b1p*c*t66765*t66767*(1.0/6.0);
            double t66773 = b3p*c*t66765*t66679*(1.0/2.0);
            double t66774 = t66770+t66771+t66772+t66773;
            double t66775 = t66774*t66694*t66768*t66769;
            double t66776 = ccaa4*t66728*t66697*t66698*t66699;
            double t66777 = ccaa1*gamma_bb[index]*gcaa*t66700*t66731;
            double t66778 = ccaa3*gamma_bb[index]*gcaa*t66701*t66736*t66695*t66696;
            double t66779 = ccaa2*t66702*t66740*t66695*t66696;
            double t66780 = ccaa0+t66776+t66777+t66778+t66779;
            v_rho_b_[index] = -t66780*(t66722+t66705*t66708*(t66721-c0p*t66692*t66694*2.0))+rho_b[index]*t66780* \
               (-t66775+t66705*t66708*(t66775-(t66720*1/(t66714*t66714)*(b2f*c*t66765*(1.0/3.0)+b4f*t66681*t66766* \
               (2.0/3.0)+b1f*c*t66765*t66767*(1.0/6.0)+b3f*c*t66765*t66679*(1.0/2.0)))/t66717+a1f*c*c0f*t66718*t66765* \
               (2.0/3.0)-a1p*c*c0p*t66692*t66765*(2.0/3.0))+a1p*c*c0p*t66692*t66765*(2.0/3.0))+c0*pow(rho_b[index],1.0/ \
               3.0)*(cx0+cx1*gamma_bb[index]*gx*t66700*t66755+cx2*t66702*t66745*t66764*t66695+cx4*t66752*t66746*t66697* \
               t66699+cx3*gamma_bb[index]*gx*t66701*t66760*t66745*t66695)*(4.0/3.0)+rho_b[index]*(t66722+t66705*t66708* \
               (t66721-t66722))*(ccaa1*gamma_bb[index]*gcaa*t66731*t66742*(8.0/3.0)+ccaa2*t66740*t66741*t66695*t66696* \
               (1.6E1/3.0)+ccaa4*t66744*t66728*t66697*t66698*(3.2E1/3.0)-ccaa1*1/(t66730*t66730)*t66741*t66695*t66696* \
               (8.0/3.0)-ccaa2*t66702*1/(t66739*t66739)*t66695*t66696*(gamma_bb[index]*gcaa*t66742*(1.6E1/3.0)+t66741* \
               t66695*t66696*(1.6E1/3.0))-ccaa4*1/(t66727*t66727)*t66697*t66698*t66699*(gamma_bb[index]*gcaa*t66742* \
               (3.2E1/3.0)+t66741*t66695*t66696*3.2E1+t66744*t66697*t66698*(3.2E1/3.0)+gamma_bb[index]*gcaa*t66743* \
               t66695*t66696*3.2E1)+ccaa3*gamma_bb[index]*gcaa*t66743*t66736*t66695*t66696*8.0-ccaa3*gamma_bb[index]* \
               gcaa*t66701*1/(t66735*t66735)*t66695*t66696*(gamma_bb[index]*gcaa*t66742*8.0+t66741*t66695*t66696* \
               1.6E1+gamma_bb[index]*gcaa*t66743*t66695*t66696*8.0))-c0*pow(rho_b[index],4.0/3.0)*(cx1*gamma_bb[index]* \
               gx*t66742*t66755*(8.0/3.0)+cx2*t66741*t66745*t66764*t66695*(1.6E1/3.0)+cx4*t66752*t66744*t66746*t66697* \
               (3.2E1/3.0)-cx1*t66741*t66745*1/(t66754*t66754)*t66695*(8.0/3.0)-cx2*t66702*t66745*1/(t66763*t66763) \
               *t66695*(gamma_bb[index]*gx*t66742*(1.6E1/3.0)+t66741*t66745*t66695*(1.6E1/3.0))-cx4*1/(t66751*t66751) \
               *t66746*t66697*t66699*(gamma_bb[index]*gx*t66742*(3.2E1/3.0)+t66741*t66745*t66695*3.2E1+t66744*t66746* \
               t66697*(3.2E1/3.0)+gamma_bb[index]*gx*t66743*t66745*t66695*3.2E1)+cx3*gamma_bb[index]*gx*t66760*t66743* \
               t66745*t66695*8.0-cx3*gamma_bb[index]*gx*t66701*t66745*t66695*1/(t66759*t66759)*(gamma_bb[index]*gx* \
               t66742*8.0+t66741*t66745*t66695*1.6E1+gamma_bb[index]*gx*t66743*t66745*t66695*8.0));
        } else {
            v_rho_b_[index] = 0.0;
        } 

        if (is_gga_) {

            //V_gamma_aa
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t63737 = 1/pow(rho_a[index],1.0/3.0);
                double t63738 = c*t63737;
                double t63739 = sqrt(t63738);
                double t63740 = pow(t63738,3.0/2.0);
                double t63741 = c*c;
                double t63742 = 1/pow(rho_a[index],2.0/3.0);
                double t63743 = 1/c0p;
                double t63744 = b1p*t63739;
                double t63745 = b3p*t63740;
                double t63746 = b4p*t63741*t63742;
                double t63747 = b2p*c*t63737;
                double t63748 = t63744+t63745+t63746+t63747;
                double t63749 = 1/t63748;
                double t63750 = t63743*t63749*(1.0/2.0);
                double t63751 = t63750+1.0;
                double t63752 = log(t63751);
                double t63753 = a1p*c*t63737;
                double t63754 = t63753+1.0;
                double t63755 = pow(2.0,1.0/3.0);
                double t63756 = t63755*2.0;
                double t63757 = t63756-2.0;
                double t63758 = two_13*2.0;
                double t63759 = t63758-2.0;
                double t63760 = 1/t63759;
                double t63761 = 1/c0f;
                double t63762 = 1/pow(rho_b[index],1.0/3.0);
                double t63763 = c*t63762;
                double t63764 = sqrt(t63763);
                double t63765 = pow(t63763,3.0/2.0);
                double t63766 = 1/pow(rho_b[index],2.0/3.0);
                double t63767 = b1p*t63764;
                double t63768 = b3p*t63765;
                double t63769 = b4p*t63741*t63766;
                double t63770 = b2p*c*t63762;
                double t63771 = t63770+t63767+t63768+t63769;
                double t63772 = 1/t63771;
                double t63773 = t63743*t63772*(1.0/2.0);
                double t63774 = t63773+1.0;
                double t63775 = log(t63774);
                double t63776 = a1p*c*t63762;
                double t63777 = t63776+1.0;
                double t63778 = c0p*t63775*t63777*2.0;
                double t63779 = rho_a[index]+rho_b[index];
                double t63780 = 1/pow(t63779,1.0/3.0);
                double t63781 = c*t63780;
                double t63782 = sqrt(t63781);
                double t63783 = pow(t63781,3.0/2.0);
                double t63784 = 1/pow(t63779,2.0/3.0);
                double t63785 = b1p*t63782;
                double t63786 = b3p*t63783;
                double t63787 = b4p*t63741*t63784;
                double t63788 = b2p*c*t63780;
                double t63789 = t63785+t63786+t63787+t63788;
                double t63790 = 1/t63789;
                double t63791 = t63743*t63790*(1.0/2.0);
                double t63792 = t63791+1.0;
                double t63793 = log(t63792);
                double t63794 = a1p*c*t63780;
                double t63795 = t63794+1.0;
                double t63796 = c0p*t63793*t63795*2.0;
                double t63797 = rho_a[index]-rho_b[index];
                double t63798 = t63797*t63797;
                double t63799 = 1/t63779;
                double t63800 = t63797*t63799;
                double t63801 = 1/(t63779*t63779*t63779*t63779);
                double t63802 = t63798*t63798;
                double t63803 = t63800+1.0;
                double t63804 = pow(t63803,4.0/3.0);
                double t63805 = -t63800+1.0;
                double t63806 = pow(t63805,4.0/3.0);
                double t63807 = t63804+t63806-2.0;
                double t63808 = 1/pow(rho_a[index],8.0/3.0);
                double t63809 = gamma_aa[index]*t63808*(1.0/2.0);
                double t63810 = 1/pow(rho_b[index],8.0/3.0);
                double t63811 = gamma_bb[index]*t63810*(1.0/2.0);
                double t63812 = t63811+t63809;
                double t63813 = gcab*t63812;
                double t63814 = t63813+1.0;
                double t63815 = gcab*gcab;
                double t63816 = t63812*t63812;
                double t63817 = t63815*t63815;
                double t63818 = t63816*t63816;
                double t63819 = t63815*t63816;
                double t63820 = gcab*t63812*2.0;
                double t63821 = t63820+t63819+1.0;
                double t63822 = t63815*t63816*3.0;
                double t63823 = gcab*t63812*t63815*t63816;
                double t63824 = gcab*t63812*3.0;
                double t63825 = t63822+t63823+t63824+1.0;
                double t63826 = t63815*t63816*6.0;
                double t63827 = gcab*t63812*t63815*t63816*4.0;
                double t63828 = t63817*t63818;
                double t63829 = gcab*t63812*4.0;
                double t63830 = t63826+t63827+t63828+t63829+1.0;
                double t63831 = c0p*t63752*t63754*2.0;
                double t63832 = gamma_aa[index]*gamma_aa[index];
                double t63833 = gx*gx;
                double t63834 = t63833*t63833;
                double t63835 = 1/pow(rho_a[index],3.2E1/3.0);
                double t63836 = 1/pow(rho_a[index],1.6E1/3.0);
                double t63837 = 1/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t63838 = gamma_aa[index]*gx*t63808;
                double t63839 = t63838+1.0;
                double t63840 = gamma_aa[index]*gx*t63808*3.0;
                double t63841 = gamma_aa[index]*gx*t63832*t63833*t63837;
                double t63842 = t63832*t63833*t63836*3.0;
                double t63843 = t63840+t63841+t63842+1.0;
                double t63844 = t63832*t63832;
                double t63845 = gamma_aa[index]*gx*t63808*4.0;
                double t63846 = gamma_aa[index]*gx*t63832*t63833*t63837*4.0;
                double t63847 = t63832*t63833*t63836*6.0;
                double t63848 = t63834*t63835*t63844;
                double t63849 = t63845+t63846+t63847+t63848+1.0;
                double t63850 = gamma_aa[index]*gx*t63808*2.0;
                double t63851 = t63832*t63833*t63836;
                double t63852 = t63850+t63851+1.0;
                double t63853 = b1f*t63739;
                double t63854 = b3f*t63740;
                double t63855 = b4f*t63741*t63742;
                double t63856 = b2f*c*t63737;
                double t63857 = t63853+t63854+t63855+t63856;
                double t63858 = 1/t63857;
                double t63859 = t63761*t63858*(1.0/2.0);
                double t63860 = t63859+1.0;
                double t63861 = log(t63860);
                double t63862 = a1f*c*t63737;
                double t63863 = t63862+1.0;
                double t63864 = t63831-c0f*t63861*t63863*2.0;
                double t63865 = t63831-t63760*t63864*t63757;
                double t63866 = gcaa*gcaa;
                double t63867 = t63866*t63866;
                double t63868 = gamma_aa[index]*gcaa*t63808;
                double t63869 = t63868+1.0;
                double t63870 = gamma_aa[index]*gcaa*t63808*3.0;
                double t63871 = gamma_aa[index]*gcaa*t63832*t63837*t63866;
                double t63872 = t63832*t63836*t63866*3.0;
                double t63873 = t63870+t63871+t63872+1.0;
                double t63874 = gamma_aa[index]*gcaa*t63808*4.0;
                double t63875 = gamma_aa[index]*gcaa*t63832*t63837*t63866*4.0;
                double t63876 = t63832*t63836*t63866*6.0;
                double t63877 = t63835*t63844*t63867;
                double t63878 = t63874+t63875+t63876+t63877+1.0;
                double t63879 = gamma_aa[index]*gcaa*t63808*2.0;
                double t63880 = t63832*t63836*t63866;
                double t63881 = t63880+t63879+1.0;
                v_gamma_aa_[index] = (rho_a[index]*t63865+rho_b[index]*(t63778-t63760*t63757*(t63778-c0f*log((t63761* \
                   (1.0/2.0))/(b1f*t63764+b3f*t63765+b2f*c*t63762+b4f*t63741*t63766)+1.0)*(a1f*c*t63762+1.0)*2.0))-t63779* \
                   (t63796-t63801*t63802*t63760*t63807*(t63796-c0f*log((t63761*(1.0/2.0))/(b1f*t63782+b3f*t63783+b2f* \
                   c*t63780+b4f*t63741*t63784)+1.0)*(a1f*c*t63780+1.0)*2.0)+(Aa*t63760*t63807*log((1.0/2.0)/(Aa*(b1a* \
                   t63782+b3a*t63783+b2a*c*t63780+b4a*t63741*t63784))+1.0)*(t63801*t63802-1.0)*(a1a*c*t63780+1.0)*2.0) \
                   /d2fz0))*((ccab1*gcab*t63808*(1.0/2.0))/t63814-ccab4*1/(t63830*t63830)*t63817*t63818*(gcab*t63808* \
                   2.0+t63812*t63815*t63808*6.0+gcab*t63815*t63816*t63808*6.0+t63812*t63816*t63808*t63817*2.0)-ccab2* \
                   1/(t63821*t63821)*t63815*t63816*(gcab*t63808+t63812*t63815*t63808)+(ccab2*t63812*t63815*t63808)/t63821- \
                   ccab1*t63812*1/(t63814*t63814)*t63815*t63808*(1.0/2.0)+(ccab3*gcab*t63815*t63816*t63808*(3.0/2.0)) \
                   /t63825+(ccab4*t63812*t63816*t63808*t63817*2.0)/t63830-ccab3*gcab*t63812*t63815*t63816*1/(t63825*t63825) \
                   *(gcab*t63808*(3.0/2.0)+t63812*t63815*t63808*3.0+gcab*t63815*t63816*t63808*(3.0/2.0)))-rho_a[index]* \
                   t63865*((ccaa1*gcaa*t63808)/t63869+(ccaa2*gamma_aa[index]*t63836*t63866*2.0)/t63881-ccaa1*gamma_aa[index]* \
                   t63836*t63866*1/(t63869*t63869)-ccaa2*t63832*t63836*1/(t63881*t63881)*t63866*(gcaa*t63808*2.0+gamma_aa[index]* \
                   t63836*t63866*2.0)+(ccaa4*gamma_aa[index]*t63832*t63835*t63867*4.0)/t63878+(ccaa3*gcaa*t63832*t63837* \
                   t63866*3.0)/t63873-ccaa4*t63835*t63844*t63867*1/(t63878*t63878)*(gcaa*t63808*4.0+gamma_aa[index]*t63836* \
                   t63866*1.2E1+gamma_aa[index]*t63832*t63835*t63867*4.0+gcaa*t63832*t63837*t63866*1.2E1)-ccaa3*gamma_aa[index]* \
                   gcaa*t63832*t63837*1/(t63873*t63873)*t63866*(gcaa*t63808*3.0+gamma_aa[index]*t63836*t63866*6.0+gcaa* \
                   t63832*t63837*t63866*3.0))+c0*pow(rho_a[index],4.0/3.0)*((cx1*gx*t63808)/t63839-cx1*gamma_aa[index]* \
                   t63833*t63836*1/(t63839*t63839)+(cx2*gamma_aa[index]*t63833*t63836*2.0)/t63852-cx2*t63832*t63833*1/ \
                   (t63852*t63852)*t63836*(gx*t63808*2.0+gamma_aa[index]*t63833*t63836*2.0)+(cx4*gamma_aa[index]*t63832* \
                   t63834*t63835*4.0)/t63849+(cx3*gx*t63832*t63833*t63837*3.0)/t63843-cx4*t63834*t63835*t63844*1/(t63849* \
                   t63849)*(gx*t63808*4.0+gamma_aa[index]*t63833*t63836*1.2E1+gamma_aa[index]*t63832*t63834*t63835*4.0+ \
                   gx*t63832*t63833*t63837*1.2E1)-cx3*gamma_aa[index]*gx*t63832*t63833*1/(t63843*t63843)*t63837*(gx*t63808* \
                   3.0+gamma_aa[index]*t63833*t63836*6.0+gx*t63832*t63833*t63837*3.0));
            } else if (rho_a[index] > cutoff_) {
                double t67421 = 1/pow(rho_a[index],8.0/3.0);
                double t67422 = gamma_aa[index]*gamma_aa[index];
                double t67423 = gx*gx;
                double t67424 = t67423*t67423;
                double t67425 = 1/pow(rho_a[index],3.2E1/3.0);
                double t67426 = 1/pow(rho_a[index],1.6E1/3.0);
                double t67427 = 1/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t67428 = gamma_aa[index]*gx*t67421;
                double t67429 = t67428+1.0;
                double t67430 = gamma_aa[index]*gx*t67421*3.0;
                double t67431 = gamma_aa[index]*gx*t67422*t67423*t67427;
                double t67432 = t67422*t67423*t67426*3.0;
                double t67433 = t67430+t67431+t67432+1.0;
                double t67434 = t67422*t67422;
                double t67435 = gamma_aa[index]*gx*t67421*4.0;
                double t67436 = gamma_aa[index]*gx*t67422*t67423*t67427*4.0;
                double t67437 = t67422*t67423*t67426*6.0;
                double t67438 = t67424*t67425*t67434;
                double t67439 = t67435+t67436+t67437+t67438+1.0;
                double t67440 = gamma_aa[index]*gx*t67421*2.0;
                double t67441 = t67422*t67423*t67426;
                double t67442 = t67440+t67441+1.0;
                double t67443 = 1/pow(rho_a[index],1.0/3.0);
                double t67444 = c*t67443;
                double t67445 = sqrt(t67444);
                double t67446 = pow(t67444,3.0/2.0);
                double t67447 = c*c;
                double t67448 = 1/pow(rho_a[index],2.0/3.0);
                double t67449 = 1/c0p;
                double t67450 = b1p*t67445;
                double t67451 = b3p*t67446;
                double t67452 = b4p*t67447*t67448;
                double t67453 = b2p*c*t67443;
                double t67454 = t67450+t67451+t67452+t67453;
                double t67455 = 1/t67454;
                double t67456 = t67455*t67449*(1.0/2.0);
                double t67457 = t67456+1.0;
                double t67458 = log(t67457);
                double t67459 = a1p*c*t67443;
                double t67460 = t67459+1.0;
                double t67461 = gcaa*gcaa;
                double t67462 = t67461*t67461;
                double t67463 = gamma_aa[index]*gcaa*t67421;
                double t67464 = t67463+1.0;
                double t67465 = gamma_aa[index]*gcaa*t67421*3.0;
                double t67466 = gamma_aa[index]*gcaa*t67422*t67461*t67427;
                double t67467 = t67422*t67461*t67426*3.0;
                double t67468 = t67465+t67466+t67467+1.0;
                double t67469 = gamma_aa[index]*gcaa*t67421*4.0;
                double t67470 = gamma_aa[index]*gcaa*t67422*t67461*t67427*4.0;
                double t67471 = t67422*t67461*t67426*6.0;
                double t67472 = t67425*t67434*t67462;
                double t67473 = t67470+t67471+t67472+t67469+1.0;
                double t67474 = gamma_aa[index]*gcaa*t67421*2.0;
                double t67475 = t67422*t67461*t67426;
                double t67476 = t67474+t67475+1.0;
                v_gamma_aa_[index] = -rho_a[index]*(((pow(2.0,1.0/3.0)*2.0-2.0)*(c0f*log((1.0/2.0)/(c0f*(b1f*t67445+ \
                   b3f*t67446+b2f*c*t67443+b4f*t67447*t67448))+1.0)*(a1f*c*t67443+1.0)*2.0-c0p*t67460*t67458*2.0))/(two_13* \
                   2.0-2.0)+c0p*t67460*t67458*2.0)*((ccaa1*gcaa*t67421)/t67464-ccaa1*gamma_aa[index]*t67461*t67426*1/ \
                   (t67464*t67464)+(ccaa2*gamma_aa[index]*t67461*t67426*2.0)/t67476-ccaa2*t67422*t67461*t67426*1/(t67476* \
                   t67476)*(gcaa*t67421*2.0+gamma_aa[index]*t67461*t67426*2.0)+(ccaa4*gamma_aa[index]*t67422*t67425*t67462* \
                   4.0)/t67473+(ccaa3*gcaa*t67422*t67461*t67427*3.0)/t67468-ccaa4*t67425*t67434*t67462*1/(t67473*t67473) \
                   *(gcaa*t67421*4.0+gamma_aa[index]*t67461*t67426*1.2E1+gamma_aa[index]*t67422*t67425*t67462*4.0+gcaa* \
                   t67422*t67461*t67427*1.2E1)-ccaa3*gamma_aa[index]*gcaa*t67422*t67461*t67427*1/(t67468*t67468)*(gcaa* \
                   t67421*3.0+gamma_aa[index]*t67461*t67426*6.0+gcaa*t67422*t67461*t67427*3.0))+c0*pow(rho_a[index],4.0/ \
                   3.0)*((cx1*gx*t67421)/t67429-cx1*gamma_aa[index]*t67423*t67426*1/(t67429*t67429)+(cx2*gamma_aa[index]* \
                   t67423*t67426*2.0)/t67442-cx2*t67422*t67423*1/(t67442*t67442)*t67426*(gx*t67421*2.0+gamma_aa[index]* \
                   t67423*t67426*2.0)+(cx4*gamma_aa[index]*t67422*t67424*t67425*4.0)/t67439+(cx3*gx*t67422*t67423*t67427* \
                   3.0)/t67433-cx4*t67424*t67425*t67434*1/(t67439*t67439)*(gx*t67421*4.0+gamma_aa[index]*t67423*t67426* \
                   1.2E1+gamma_aa[index]*t67422*t67424*t67425*4.0+gx*t67422*t67423*t67427*1.2E1)-cx3*gamma_aa[index]* \
                   gx*t67422*t67423*1/(t67433*t67433)*t67427*(gx*t67421*3.0+gamma_aa[index]*t67423*t67426*6.0+gx*t67422* \
                   t67423*t67427*3.0));
            } else if (rho_b[index] > cutoff_) {
                v_gamma_aa_[index] = 0.0;
            } else {
                v_gamma_aa_[index] = 0.0;
            } 

            //V_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_ab_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_ab_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_ab_[index] = 0.0;
            } else {
                v_gamma_ab_[index] = 0.0;
            } 

            //V_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t63884 = 1/pow(rho_a[index],1.0/3.0);
                double t63885 = c*t63884;
                double t63886 = sqrt(t63885);
                double t63887 = pow(t63885,3.0/2.0);
                double t63888 = c*c;
                double t63889 = 1/pow(rho_a[index],2.0/3.0);
                double t63890 = 1/c0p;
                double t63891 = b1p*t63886;
                double t63892 = b3p*t63887;
                double t63893 = b4p*t63888*t63889;
                double t63894 = b2p*c*t63884;
                double t63895 = t63891+t63892+t63893+t63894;
                double t63896 = 1/t63895;
                double t63897 = t63890*t63896*(1.0/2.0);
                double t63898 = t63897+1.0;
                double t63899 = log(t63898);
                double t63900 = a1p*c*t63884;
                double t63901 = t63900+1.0;
                double t63902 = pow(2.0,1.0/3.0);
                double t63903 = t63902*2.0;
                double t63904 = t63903-2.0;
                double t63905 = two_13*2.0;
                double t63906 = t63905-2.0;
                double t63907 = 1/t63906;
                double t63908 = 1/c0f;
                double t63909 = 1/pow(rho_b[index],1.0/3.0);
                double t63910 = c*t63909;
                double t63911 = sqrt(t63910);
                double t63912 = pow(t63910,3.0/2.0);
                double t63913 = 1/pow(rho_b[index],2.0/3.0);
                double t63914 = b1p*t63911;
                double t63915 = b3p*t63912;
                double t63916 = b4p*t63913*t63888;
                double t63917 = b2p*c*t63909;
                double t63918 = t63914+t63915+t63916+t63917;
                double t63919 = 1/t63918;
                double t63920 = t63890*t63919*(1.0/2.0);
                double t63921 = t63920+1.0;
                double t63922 = log(t63921);
                double t63923 = a1p*c*t63909;
                double t63924 = t63923+1.0;
                double t63925 = c0p*t63922*t63924*2.0;
                double t63926 = rho_a[index]+rho_b[index];
                double t63927 = 1/pow(t63926,1.0/3.0);
                double t63928 = c*t63927;
                double t63929 = sqrt(t63928);
                double t63930 = pow(t63928,3.0/2.0);
                double t63931 = 1/pow(t63926,2.0/3.0);
                double t63932 = b1p*t63929;
                double t63933 = b3p*t63930;
                double t63934 = b4p*t63931*t63888;
                double t63935 = b2p*c*t63927;
                double t63936 = t63932+t63933+t63934+t63935;
                double t63937 = 1/t63936;
                double t63938 = t63890*t63937*(1.0/2.0);
                double t63939 = t63938+1.0;
                double t63940 = log(t63939);
                double t63941 = a1p*c*t63927;
                double t63942 = t63941+1.0;
                double t63943 = c0p*t63940*t63942*2.0;
                double t63944 = rho_a[index]-rho_b[index];
                double t63945 = t63944*t63944;
                double t63946 = 1/t63926;
                double t63947 = t63944*t63946;
                double t63948 = 1/(t63926*t63926*t63926*t63926);
                double t63949 = t63945*t63945;
                double t63950 = t63947+1.0;
                double t63951 = pow(t63950,4.0/3.0);
                double t63952 = -t63947+1.0;
                double t63953 = pow(t63952,4.0/3.0);
                double t63954 = t63951+t63953-2.0;
                double t63955 = 1/pow(rho_b[index],8.0/3.0);
                double t63956 = 1/pow(rho_a[index],8.0/3.0);
                double t63957 = gamma_aa[index]*t63956*(1.0/2.0);
                double t63958 = gamma_bb[index]*t63955*(1.0/2.0);
                double t63959 = t63957+t63958;
                double t63960 = gcab*t63959;
                double t63961 = t63960+1.0;
                double t63962 = gcab*gcab;
                double t63963 = t63959*t63959;
                double t63964 = t63962*t63962;
                double t63965 = t63963*t63963;
                double t63966 = t63962*t63963;
                double t63967 = gcab*t63959*2.0;
                double t63968 = t63966+t63967+1.0;
                double t63969 = t63962*t63963*3.0;
                double t63970 = gcab*t63962*t63963*t63959;
                double t63971 = gcab*t63959*3.0;
                double t63972 = t63970+t63971+t63969+1.0;
                double t63973 = t63962*t63963*6.0;
                double t63974 = gcab*t63962*t63963*t63959*4.0;
                double t63975 = t63964*t63965;
                double t63976 = gcab*t63959*4.0;
                double t63977 = t63973+t63974+t63975+t63976+1.0;
                double t63978 = c0p*t63901*t63899*2.0;
                double t63979 = gamma_bb[index]*gamma_bb[index];
                double t63980 = gx*gx;
                double t63981 = t63980*t63980;
                double t63982 = 1/pow(rho_b[index],3.2E1/3.0);
                double t63983 = 1/pow(rho_b[index],1.6E1/3.0);
                double t63984 = 1/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]);
                double t63985 = gamma_bb[index]*gx*t63955;
                double t63986 = t63985+1.0;
                double t63987 = gamma_bb[index]*gx*t63955*3.0;
                double t63988 = gamma_bb[index]*gx*t63980*t63984*t63979;
                double t63989 = t63980*t63983*t63979*3.0;
                double t63990 = t63987+t63988+t63989+1.0;
                double t63991 = t63979*t63979;
                double t63992 = gamma_bb[index]*gx*t63955*4.0;
                double t63993 = gamma_bb[index]*gx*t63980*t63984*t63979*4.0;
                double t63994 = t63980*t63983*t63979*6.0;
                double t63995 = t63981*t63982*t63991;
                double t63996 = t63992+t63993+t63994+t63995+1.0;
                double t63997 = gamma_bb[index]*gx*t63955*2.0;
                double t63998 = t63980*t63983*t63979;
                double t63999 = t63997+t63998+1.0;
                double t64000 = b1f*t63911;
                double t64001 = b3f*t63912;
                double t64002 = b4f*t63913*t63888;
                double t64003 = b2f*c*t63909;
                double t64004 = t64000+t64001+t64002+t64003;
                double t64005 = 1/t64004;
                double t64006 = t63908*t64005*(1.0/2.0);
                double t64007 = t64006+1.0;
                double t64008 = log(t64007);
                double t64009 = a1f*c*t63909;
                double t64010 = t64009+1.0;
                double t64011 = t63925-c0f*t64010*t64008*2.0;
                double t64012 = t63925-t63904*t63907*t64011;
                double t64013 = gcaa*gcaa;
                double t64014 = t64013*t64013;
                double t64015 = gamma_bb[index]*gcaa*t63955;
                double t64016 = t64015+1.0;
                double t64017 = gamma_bb[index]*gcaa*t63955*3.0;
                double t64018 = gamma_bb[index]*gcaa*t63984*t63979*t64013;
                double t64019 = t63983*t63979*t64013*3.0;
                double t64020 = t64017+t64018+t64019+1.0;
                double t64021 = gamma_bb[index]*gcaa*t63955*4.0;
                double t64022 = gamma_bb[index]*gcaa*t63984*t63979*t64013*4.0;
                double t64023 = t63983*t63979*t64013*6.0;
                double t64024 = t63982*t63991*t64014;
                double t64025 = t64021+t64022+t64023+t64024+1.0;
                double t64026 = gamma_bb[index]*gcaa*t63955*2.0;
                double t64027 = t63983*t63979*t64013;
                double t64028 = t64026+t64027+1.0;
                v_gamma_bb_[index] = (rho_b[index]*t64012+rho_a[index]*(t63978-t63904*t63907*(t63978-c0f*log((t63908* \
                   (1.0/2.0))/(b1f*t63886+b3f*t63887+b2f*c*t63884+b4f*t63888*t63889)+1.0)*(a1f*c*t63884+1.0)*2.0))-t63926* \
                   (t63943-t63907*t63954*t63948*t63949*(t63943-c0f*log((t63908*(1.0/2.0))/(b1f*t63929+b3f*t63930+b2f* \
                   c*t63927+b4f*t63931*t63888)+1.0)*(a1f*c*t63927+1.0)*2.0)+(Aa*t63907*t63954*log((1.0/2.0)/(Aa*(b1a* \
                   t63929+b3a*t63930+b2a*c*t63927+b4a*t63931*t63888))+1.0)*(t63948*t63949-1.0)*(a1a*c*t63927+1.0)*2.0) \
                   /d2fz0))*((ccab1*gcab*t63955*(1.0/2.0))/t63961-ccab4*t63964*t63965*1/(t63977*t63977)*(gcab*t63955* \
                   2.0+t63962*t63955*t63959*6.0+gcab*t63962*t63963*t63955*6.0+t63963*t63955*t63964*t63959*2.0)-ccab2* \
                   t63962*t63963*1/(t63968*t63968)*(gcab*t63955+t63962*t63955*t63959)-ccab1*1/(t63961*t63961)*t63962* \
                   t63955*t63959*(1.0/2.0)+(ccab2*t63962*t63955*t63959)/t63968+(ccab3*gcab*t63962*t63963*t63955*(3.0/ \
                   2.0))/t63972+(ccab4*t63963*t63955*t63964*t63959*2.0)/t63977-ccab3*gcab*t63962*t63963*1/(t63972*t63972) \
                   *t63959*(gcab*t63955*(3.0/2.0)+t63962*t63955*t63959*3.0+gcab*t63962*t63963*t63955*(3.0/2.0)))-rho_b[index]* \
                   t64012*((ccaa1*gcaa*t63955)/t64016-ccaa1*gamma_bb[index]*t63983*t64013*1/(t64016*t64016)+(ccaa2*gamma_bb[index]* \
                   t63983*t64013*2.0)/t64028-ccaa2*t63983*t63979*t64013*1/(t64028*t64028)*(gcaa*t63955*2.0+gamma_bb[index]* \
                   t63983*t64013*2.0)+(ccaa4*gamma_bb[index]*t63982*t63979*t64014*4.0)/t64025+(ccaa3*gcaa*t63984*t63979* \
                   t64013*3.0)/t64020-ccaa4*t63982*t63991*t64014*1/(t64025*t64025)*(gcaa*t63955*4.0+gamma_bb[index]*t63983* \
                   t64013*1.2E1+gamma_bb[index]*t63982*t63979*t64014*4.0+gcaa*t63984*t63979*t64013*1.2E1)-ccaa3*gamma_bb[index]* \
                   gcaa*t63984*t63979*1/(t64020*t64020)*t64013*(gcaa*t63955*3.0+gamma_bb[index]*t63983*t64013*6.0+gcaa* \
                   t63984*t63979*t64013*3.0))+c0*pow(rho_b[index],4.0/3.0)*((cx1*gx*t63955)/t63986-cx1*gamma_bb[index]* \
                   t63980*t63983*1/(t63986*t63986)+(cx2*gamma_bb[index]*t63980*t63983*2.0)/t63999-cx2*t63980*t63983*t63979* \
                   1/(t63999*t63999)*(gx*t63955*2.0+gamma_bb[index]*t63980*t63983*2.0)+(cx4*gamma_bb[index]*t63981*t63982* \
                   t63979*4.0)/t63996+(cx3*gx*t63980*t63984*t63979*3.0)/t63990-cx4*t63981*t63982*t63991*1/(t63996*t63996) \
                   *(gx*t63955*4.0+gamma_bb[index]*t63980*t63983*1.2E1+gamma_bb[index]*t63981*t63982*t63979*4.0+gx*t63980* \
                   t63984*t63979*1.2E1)-cx3*gamma_bb[index]*gx*t63980*1/(t63990*t63990)*t63984*t63979*(gx*t63955*3.0+ \
                   gamma_bb[index]*t63980*t63983*6.0+gx*t63980*t63984*t63979*3.0));
            } else if (rho_a[index] > cutoff_) {
                v_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                double t66784 = 1/pow(rho_b[index],8.0/3.0);
                double t66785 = gamma_bb[index]*gamma_bb[index];
                double t66786 = gx*gx;
                double t66787 = t66786*t66786;
                double t66788 = 1/pow(rho_b[index],3.2E1/3.0);
                double t66789 = 1/pow(rho_b[index],1.6E1/3.0);
                double t66790 = 1/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]);
                double t66791 = gamma_bb[index]*gx*t66784;
                double t66792 = t66791+1.0;
                double t66793 = gamma_bb[index]*gx*t66784*3.0;
                double t66794 = gamma_bb[index]*gx*t66790*t66785*t66786;
                double t66795 = t66785*t66786*t66789*3.0;
                double t66796 = t66793+t66794+t66795+1.0;
                double t66797 = t66785*t66785;
                double t66798 = gamma_bb[index]*gx*t66784*4.0;
                double t66799 = gamma_bb[index]*gx*t66790*t66785*t66786*4.0;
                double t66800 = t66785*t66786*t66789*6.0;
                double t66801 = t66787*t66788*t66797;
                double t66802 = t66800+t66801+t66798+t66799+1.0;
                double t66803 = gamma_bb[index]*gx*t66784*2.0;
                double t66804 = t66785*t66786*t66789;
                double t66805 = t66803+t66804+1.0;
                double t66806 = 1/pow(rho_b[index],1.0/3.0);
                double t66807 = c*t66806;
                double t66808 = sqrt(t66807);
                double t66809 = pow(t66807,3.0/2.0);
                double t66810 = c*c;
                double t66811 = 1/pow(rho_b[index],2.0/3.0);
                double t66812 = 1/c0p;
                double t66813 = b1p*t66808;
                double t66814 = b3p*t66809;
                double t66815 = b4p*t66810*t66811;
                double t66816 = b2p*c*t66806;
                double t66817 = t66813+t66814+t66815+t66816;
                double t66818 = 1/t66817;
                double t66819 = t66812*t66818*(1.0/2.0);
                double t66820 = t66819+1.0;
                double t66821 = log(t66820);
                double t66822 = a1p*c*t66806;
                double t66823 = t66822+1.0;
                double t66824 = gcaa*gcaa;
                double t66825 = t66824*t66824;
                double t66826 = gamma_bb[index]*gcaa*t66784;
                double t66827 = t66826+1.0;
                double t66828 = gamma_bb[index]*gcaa*t66784*3.0;
                double t66829 = gamma_bb[index]*gcaa*t66824*t66790*t66785;
                double t66830 = t66824*t66785*t66789*3.0;
                double t66831 = t66830+t66828+t66829+1.0;
                double t66832 = gamma_bb[index]*gcaa*t66784*4.0;
                double t66833 = gamma_bb[index]*gcaa*t66824*t66790*t66785*4.0;
                double t66834 = t66824*t66785*t66789*6.0;
                double t66835 = t66825*t66788*t66797;
                double t66836 = t66832+t66833+t66834+t66835+1.0;
                double t66837 = gamma_bb[index]*gcaa*t66784*2.0;
                double t66838 = t66824*t66785*t66789;
                double t66839 = t66837+t66838+1.0;
                v_gamma_bb_[index] = -rho_b[index]*(((pow(2.0,1.0/3.0)*2.0-2.0)*(c0f*log((1.0/2.0)/(c0f*(b1f*t66808+ \
                   b3f*t66809+b2f*c*t66806+b4f*t66810*t66811))+1.0)*(a1f*c*t66806+1.0)*2.0-c0p*t66821*t66823*2.0))/(two_13* \
                   2.0-2.0)+c0p*t66821*t66823*2.0)*((ccaa1*gcaa*t66784)/t66827-ccaa1*gamma_bb[index]*t66824*1/(t66827* \
                   t66827)*t66789+(ccaa2*gamma_bb[index]*t66824*t66789*2.0)/t66839-ccaa2*t66824*t66785*1/(t66839*t66839) \
                   *t66789*(gcaa*t66784*2.0+gamma_bb[index]*t66824*t66789*2.0)+(ccaa4*gamma_bb[index]*t66825*t66785*t66788* \
                   4.0)/t66836+(ccaa3*gcaa*t66824*t66790*t66785*3.0)/t66831-ccaa4*t66825*1/(t66836*t66836)*t66788*t66797* \
                   (gcaa*t66784*4.0+gamma_bb[index]*t66824*t66789*1.2E1+gamma_bb[index]*t66825*t66785*t66788*4.0+gcaa* \
                   t66824*t66790*t66785*1.2E1)-ccaa3*gamma_bb[index]*gcaa*1/(t66831*t66831)*t66824*t66790*t66785*(gcaa* \
                   t66784*3.0+gamma_bb[index]*t66824*t66789*6.0+gcaa*t66824*t66790*t66785*3.0))+c0*pow(rho_b[index],4.0/ \
                   3.0)*((cx1*gx*t66784)/t66792-cx1*gamma_bb[index]*1/(t66792*t66792)*t66786*t66789+(cx2*gamma_bb[index]* \
                   t66786*t66789*2.0)/t66805-cx2*1/(t66805*t66805)*t66785*t66786*t66789*(gx*t66784*2.0+gamma_bb[index]* \
                   t66786*t66789*2.0)+(cx4*gamma_bb[index]*t66785*t66787*t66788*4.0)/t66802+(cx3*gx*t66790*t66785*t66786* \
                   3.0)/t66796-cx4*1/(t66802*t66802)*t66787*t66788*t66797*(gx*t66784*4.0+gamma_bb[index]*t66786*t66789* \
                   1.2E1+gamma_bb[index]*t66785*t66787*t66788*4.0+gx*t66790*t66785*t66786*1.2E1)-cx3*gamma_bb[index]* \
                   gx*t66790*t66785*t66786*1/(t66796*t66796)*(gx*t66784*3.0+gamma_bb[index]*t66786*t66789*6.0+gx*t66790* \
                   t66785*t66786*3.0));
            } else {
                v_gamma_bb_[index] = 0.0;
            } 
        }
        if (is_meta_) {

            //V_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_tau_a_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_tau_a_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_tau_a_[index] = 0.0;
            } else {
                v_tau_a_[index] = 0.0;
            } 

            //V_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_tau_b_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_tau_b_[index] = 0.0;
            } else {
                v_tau_b_[index] = 0.0;
            } 
        }
    }
    //Second Partials
    for (int index = 0; index < ntrue && deriv_ >= 2; index++) {

        //V_rho_a_rho_a
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t64032 = rho_a[index]+rho_b[index];
            double t64033 = 1/pow(t64032,1.0/3.0);
            double t64034 = c*t64033;
            double t64035 = sqrt(t64034);
            double t64036 = b1p*t64035;
            double t64037 = pow(t64034,3.0/2.0);
            double t64038 = b3p*t64037;
            double t64039 = c*c;
            double t64040 = 1/pow(t64032,2.0/3.0);
            double t64041 = b4p*t64040*t64039;
            double t64042 = b2p*c*t64033;
            double t64043 = t64041+t64042+t64036+t64038;
            double t64044 = 1/pow(t64032,4.0/3.0);
            double t64045 = 1/c0p;
            double t64046 = 1/t64043;
            double t64047 = t64045*t64046*(1.0/2.0);
            double t64048 = t64047+1.0;
            double t64049 = a1p*c*t64033;
            double t64050 = t64049+1.0;
            double t64051 = rho_a[index]-rho_b[index];
            double t64052 = t64051*t64051;
            double t64053 = 1/t64032;
            double t64054 = t64051*t64053;
            double t64055 = two_13*2.0;
            double t64056 = t64055-2.0;
            double t64057 = 1/t64056;
            double t64058 = 1/c0f;
            double t64059 = b1f*t64035;
            double t64060 = b3f*t64037;
            double t64061 = b4f*t64040*t64039;
            double t64062 = b2f*c*t64033;
            double t64063 = t64060+t64061+t64062+t64059;
            double t64064 = 1/t64063;
            double t64065 = t64064*t64058*(1.0/2.0);
            double t64066 = t64065+1.0;
            double t64067 = log(t64066);
            double t64068 = a1f*c*t64033;
            double t64069 = t64068+1.0;
            double t64070 = log(t64048);
            double t64080 = c0f*t64067*t64069*2.0;
            double t64081 = c0p*t64050*t64070*2.0;
            double t64071 = t64080-t64081;
            double t64072 = t64054+1.0;
            double t64073 = pow(t64072,4.0/3.0);
            double t64074 = -t64054+1.0;
            double t64075 = pow(t64074,4.0/3.0);
            double t64076 = t64073+t64075-2.0;
            double t64077 = 1/(t64032*t64032);
            double t64108 = t64051*t64077;
            double t64078 = t64053-t64108;
            double t64079 = 1/(t64032*t64032*t64032*t64032);
            double t64082 = t64052*t64052;
            double t64083 = 1/pow(t64032,5.0/3.0);
            double t64084 = 1/sqrt(t64034);
            double t64085 = 1/t64048;
            double t64086 = 1/(t64043*t64043);
            double t64087 = b4p*t64083*t64039*(2.0/3.0);
            double t64088 = b2p*c*t64044*(1.0/3.0);
            double t64089 = b1p*c*t64044*t64084*(1.0/6.0);
            double t64090 = b3p*c*t64035*t64044*(1.0/2.0);
            double t64091 = t64090+t64087+t64088+t64089;
            double t64092 = t64050*t64091*t64085*t64086;
            double t64093 = 1/(t64032*t64032*t64032*t64032*t64032);
            double t64094 = 1/d2fz0;
            double t64095 = 1/Aa;
            double t64096 = b1a*t64035;
            double t64097 = b3a*t64037;
            double t64098 = b4a*t64040*t64039;
            double t64099 = b2a*c*t64033;
            double t64100 = t64096+t64097+t64098+t64099;
            double t64101 = 1/t64100;
            double t64102 = t64101*t64095*(1.0/2.0);
            double t64103 = t64102+1.0;
            double t64104 = log(t64103);
            double t64105 = a1a*c*t64033;
            double t64106 = t64105+1.0;
            double t64107 = pow(t64072,1.0/3.0);
            double t64109 = t64107*t64078*(4.0/3.0);
            double t64110 = pow(t64074,1.0/3.0);
            double t64185 = t64110*t64078*(4.0/3.0);
            double t64111 = t64109-t64185;
            double t64112 = t64082*t64079;
            double t64113 = t64112-1.0;
            double t64114 = 1/pow(rho_a[index],1.0/3.0);
            double t64115 = c*t64114;
            double t64116 = sqrt(t64115);
            double t64117 = b1f*t64116;
            double t64118 = pow(t64115,3.0/2.0);
            double t64119 = b3f*t64118;
            double t64120 = 1/pow(rho_a[index],2.0/3.0);
            double t64121 = b4f*t64120*t64039;
            double t64122 = b2f*c*t64114;
            double t64123 = t64121+t64122+t64117+t64119;
            double t64124 = 1/pow(rho_a[index],4.0/3.0);
            double t64125 = b1p*t64116;
            double t64126 = b3p*t64118;
            double t64127 = b4p*t64120*t64039;
            double t64128 = b2p*c*t64114;
            double t64129 = t64125+t64126+t64127+t64128;
            double t64130 = 1/pow(rho_a[index],5.0/3.0);
            double t64131 = 1/sqrt(t64115);
            double t64132 = 1/t64123;
            double t64133 = t64132*t64058*(1.0/2.0);
            double t64134 = t64133+1.0;
            double t64135 = 1/t64129;
            double t64136 = t64045*t64135*(1.0/2.0);
            double t64137 = t64136+1.0;
            double t64138 = a1p*c*t64114;
            double t64139 = t64138+1.0;
            double t64140 = 1/t64137;
            double t64141 = 1/(t64129*t64129);
            double t64142 = b4p*t64130*t64039*(2.0/3.0);
            double t64143 = b2p*c*t64124*(1.0/3.0);
            double t64144 = b1p*c*t64131*t64124*(1.0/6.0);
            double t64145 = b3p*c*t64124*t64116*(1.0/2.0);
            double t64146 = t64142+t64143+t64144+t64145;
            double t64147 = t64140*t64141*t64146*t64139;
            double t64148 = log(t64137);
            double t64149 = pow(2.0,1.0/3.0);
            double t64150 = t64149*2.0;
            double t64151 = t64150-2.0;
            double t64152 = log(t64134);
            double t64153 = a1f*c*t64114;
            double t64154 = t64153+1.0;
            double t64155 = gcab*gcab;
            double t64159 = 1/pow(rho_a[index],8.0/3.0);
            double t64160 = gamma_aa[index]*t64159*(1.0/2.0);
            double t64161 = 1/pow(rho_b[index],8.0/3.0);
            double t64162 = gamma_bb[index]*t64161*(1.0/2.0);
            double t64156 = t64160+t64162;
            double t64157 = t64156*t64156;
            double t64158 = 1/pow(rho_a[index],1.1E1/3.0);
            double t64163 = t64155*t64155;
            double t64164 = t64157*t64157;
            double t64165 = t64155*t64157*6.0;
            double t64166 = gcab*t64155*t64156*t64157*4.0;
            double t64167 = t64163*t64164;
            double t64168 = gcab*t64156*4.0;
            double t64169 = t64165+t64166+t64167+t64168+1.0;
            double t64170 = gcab*t64156;
            double t64171 = t64170+1.0;
            double t64172 = t64155*t64157;
            double t64173 = gcab*t64156*2.0;
            double t64174 = t64172+t64173+1.0;
            double t64175 = t64155*t64157*3.0;
            double t64176 = gcab*t64155*t64156*t64157;
            double t64177 = gcab*t64156*3.0;
            double t64178 = t64175+t64176+t64177+1.0;
            double t64179 = 1/t64174;
            double t64180 = 1/t64178;
            double t64181 = 1/t64171;
            double t64182 = 1/t64169;
            double t64183 = 1/pow(t64032,7.0/3.0);
            double t64184 = 1/pow(t64032,8.0/3.0);
            double t64186 = 1/t64066;
            double t64187 = 1/(t64063*t64063);
            double t64188 = b4f*t64083*t64039*(2.0/3.0);
            double t64189 = b2f*c*t64044*(1.0/3.0);
            double t64190 = b1f*c*t64044*t64084*(1.0/6.0);
            double t64191 = b3f*c*t64035*t64044*(1.0/2.0);
            double t64192 = t64190+t64191+t64188+t64189;
            double t64193 = a1f*c*c0f*t64044*t64067*(2.0/3.0);
            double t64195 = t64192*t64069*t64186*t64187;
            double t64196 = a1p*c*c0p*t64070*t64044*(2.0/3.0);
            double t64194 = t64092+t64193-t64195-t64196;
            double t64197 = t64091*t64091;
            double t64198 = 1/pow(t64034,3.0/2.0);
            double t64199 = b4p*t64039*t64184*(1.0E1/9.0);
            double t64200 = b2p*c*t64183*(4.0/9.0);
            double t64201 = b1p*c*t64084*t64183*(2.0/9.0);
            double t64202 = b3p*c*t64035*t64183*(2.0/3.0);
            double t64203 = b3p*t64039*t64084*t64184*(1.0/1.2E1);
            double t64204 = t64200+t64201+t64202+t64203+t64199-b1p*t64039*t64184*t64198*(1.0/3.6E1);
            double t64205 = 1/(t64043*t64043*t64043);
            double t64206 = t64050*t64205*t64085*t64197*2.0;
            double t64207 = t64192*t64192;
            double t64208 = 1/(t64048*t64048);
            double t64209 = 1/(t64043*t64043*t64043*t64043);
            double t64210 = t64077*2.0;
            double t64211 = 1/(t64032*t64032*t64032);
            double t64218 = t64211*t64051*2.0;
            double t64212 = t64210-t64218;
            double t64213 = t64078*t64078;
            double t64214 = a1p*c*c0p*t64070*t64183*(8.0/9.0);
            double t64215 = 1/(t64032*t64032*t64032*t64032*t64032*t64032);
            double t64216 = t64082*t64093*4.0;
            double t64226 = t64051*t64052*t64079*4.0;
            double t64217 = t64216-t64226;
            double t64219 = t64110*t64212*(4.0/3.0);
            double t64220 = 1/pow(t64072,2.0/3.0);
            double t64221 = t64220*t64213*(4.0/9.0);
            double t64222 = 1/pow(t64074,2.0/3.0);
            double t64223 = t64213*t64222*(4.0/9.0);
            double t64224 = t64221+t64223+t64219-t64212*t64107*(4.0/3.0);
            double t64225 = 1/t64103;
            double t64227 = 1/(t64100*t64100);
            double t64228 = b4a*t64083*t64039*(2.0/3.0);
            double t64229 = b2a*c*t64044*(1.0/3.0);
            double t64230 = b1a*c*t64044*t64084*(1.0/6.0);
            double t64231 = b3a*c*t64035*t64044*(1.0/2.0);
            double t64232 = t64230+t64231+t64228+t64229;
            double t64233 = t64232*t64232;
            double t64234 = t64050*t64204*t64085*t64086;
            double t64235 = 1/t64134;
            double t64236 = b4f*t64130*t64039*(2.0/3.0);
            double t64237 = b2f*c*t64124*(1.0/3.0);
            double t64238 = b1f*c*t64131*t64124*(1.0/6.0);
            double t64239 = b3f*c*t64124*t64116*(1.0/2.0);
            double t64240 = t64236+t64237+t64238+t64239;
            double t64241 = 1/(t64123*t64123);
            double t64242 = 1/pow(rho_a[index],7.0/3.0);
            double t64243 = 1/pow(t64115,3.0/2.0);
            double t64244 = t64240*t64240;
            double t64245 = t64146*t64146;
            double t64246 = 1/(t64129*t64129*t64129);
            double t64247 = t64140*t64245*t64246*t64139*2.0;
            double t64248 = b4p*t64039*t64159*(1.0E1/9.0);
            double t64249 = b2p*c*t64242*(4.0/9.0);
            double t64250 = b3p*t64131*t64039*t64159*(1.0/1.2E1);
            double t64251 = b1p*c*t64131*t64242*(2.0/9.0);
            double t64252 = b3p*c*t64116*t64242*(2.0/3.0);
            double t64404 = b1p*t64243*t64039*t64159*(1.0/3.6E1);
            double t64253 = t64250+t64251-t64404+t64252+t64248+t64249;
            double t64254 = 1/(t64137*t64137);
            double t64255 = 1/(t64129*t64129*t64129*t64129);
            double t64256 = a1p*c*c0p*t64242*t64148*(8.0/9.0);
            double t64257 = a1f*c*c0f*t64124*t64152*(2.0/3.0);
            double t64258 = a1p*c*c0p*t64124*t64148*(2.0/3.0);
            double t64259 = t64050*t64045*t64208*t64209*t64197*(1.0/2.0);
            double t64331 = t64240*t64241*t64154*t64235;
            double t64260 = -t64331+t64147+t64257-t64258;
            double t64261 = gamma_aa[index]*gamma_aa[index];
            double t64262 = gcaa*gcaa;
            double t64263 = t64261*t64261;
            double t64264 = t64262*t64262;
            double t64265 = 1/pow(rho_a[index],3.2E1/3.0);
            double t64266 = 1/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]);
            double t64267 = 1/pow(rho_a[index],1.6E1/3.0);
            double t64268 = c0f*t64152*t64154*2.0;
            double t64270 = c0p*t64139*t64148*2.0;
            double t64269 = -t64270+t64268;
            double t64271 = 1/pow(rho_b[index],1.0/3.0);
            double t64272 = c*t64271;
            double t64273 = sqrt(t64272);
            double t64274 = pow(t64272,3.0/2.0);
            double t64275 = 1/pow(rho_b[index],2.0/3.0);
            double t64276 = b1p*t64273;
            double t64277 = b3p*t64274;
            double t64278 = b4p*t64039*t64275;
            double t64279 = b2p*c*t64271;
            double t64280 = t64276+t64277+t64278+t64279;
            double t64281 = 1/t64280;
            double t64282 = t64045*t64281*(1.0/2.0);
            double t64283 = t64282+1.0;
            double t64284 = log(t64283);
            double t64285 = a1p*c*t64271;
            double t64286 = t64285+1.0;
            double t64287 = c0p*t64284*t64286*2.0;
            double t64288 = t64071*t64082*t64057*t64076*t64079;
            double t64289 = Aa*t64104*t64113*t64106*t64057*t64076*t64094*2.0;
            double t64290 = gamma_aa[index]*gcab*t64158*(1.6E1/3.0);
            double t64291 = gamma_aa[index]*gcab*t64155*t64157*t64158*1.6E1;
            double t64292 = gamma_aa[index]*t64163*t64156*t64157*t64158*(1.6E1/3.0);
            double t64293 = gamma_aa[index]*t64155*t64156*t64158*1.6E1;
            double t64294 = t64290+t64291+t64292+t64293;
            double t64295 = 1/(t64171*t64171);
            double t64296 = 1/pow(rho_a[index],2.2E1/3.0);
            double t64297 = gamma_aa[index]*gcab*t64158*(8.0/3.0);
            double t64298 = gamma_aa[index]*t64155*t64156*t64158*(8.0/3.0);
            double t64299 = t64297+t64298;
            double t64300 = 1/(t64178*t64178);
            double t64301 = 1/pow(rho_a[index],1.4E1/3.0);
            double t64302 = 1/(t64169*t64169);
            double t64303 = 1/(t64174*t64174);
            double t64304 = gamma_aa[index]*gcab*t64158*4.0;
            double t64305 = gamma_aa[index]*gcab*t64155*t64157*t64158*4.0;
            double t64306 = gamma_aa[index]*t64155*t64156*t64158*8.0;
            double t64307 = t64304+t64305+t64306;
            double t64308 = t64151*t64057*t64269;
            double t64309 = t64270+t64308;
            double t64310 = gamma_aa[index]*gcaa*t64159*4.0;
            double t64311 = gamma_aa[index]*gcaa*t64261*t64262*t64266*4.0;
            double t64312 = t64261*t64262*t64267*6.0;
            double t64313 = t64263*t64264*t64265;
            double t64314 = t64310+t64311+t64312+t64313+1.0;
            double t64315 = 1/t64314;
            double t64316 = gamma_aa[index]*gcaa*t64159;
            double t64317 = t64316+1.0;
            double t64318 = 1/t64317;
            double t64319 = gamma_aa[index]*gcaa*t64159*3.0;
            double t64320 = gamma_aa[index]*gcaa*t64261*t64262*t64266;
            double t64321 = t64261*t64262*t64267*3.0;
            double t64322 = t64320+t64321+t64319+1.0;
            double t64323 = 1/t64322;
            double t64324 = gamma_aa[index]*gcaa*t64159*2.0;
            double t64325 = t64261*t64262*t64267;
            double t64326 = t64324+t64325+1.0;
            double t64327 = 1/t64326;
            double t64328 = 1/pow(rho_a[index],1.9E1/3.0);
            double t64329 = 1/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]*rho_a[index]);
            double t64330 = 1/pow(rho_a[index],3.5E1/3.0);
            double t64332 = ccaa4*t64330*t64315*t64263*t64264*(3.2E1/3.0);
            double t64333 = ccaa1*gamma_aa[index]*gcaa*t64318*t64158*(8.0/3.0);
            double t64334 = ccaa3*gamma_aa[index]*gcaa*t64323*t64261*t64262*t64329*8.0;
            double t64335 = ccaa2*t64261*t64262*t64327*t64328*(1.6E1/3.0);
            double t64336 = 1/(t64317*t64317);
            double t64337 = gamma_aa[index]*gcaa*t64158*8.0;
            double t64338 = gamma_aa[index]*gcaa*t64261*t64262*t64329*8.0;
            double t64339 = t64261*t64262*t64328*1.6E1;
            double t64340 = t64337+t64338+t64339;
            double t64341 = 1/(t64322*t64322);
            double t64342 = gamma_aa[index]*gcaa*t64158*(3.2E1/3.0);
            double t64343 = gamma_aa[index]*gcaa*t64261*t64262*t64329*3.2E1;
            double t64344 = t64261*t64262*t64328*3.2E1;
            double t64345 = t64330*t64263*t64264*(3.2E1/3.0);
            double t64346 = t64342+t64343+t64344+t64345;
            double t64347 = 1/(t64314*t64314);
            double t64348 = gamma_aa[index]*gcaa*t64158*(1.6E1/3.0);
            double t64349 = t64261*t64262*t64328*(1.6E1/3.0);
            double t64350 = t64348+t64349;
            double t64351 = 1/(t64326*t64326);
            double t64352 = t64332+t64333+t64334+t64335-ccaa1*t64261*t64262*t64336*t64328*(8.0/3.0)-ccaa2*t64350* \
               t64261*t64351*t64262*t64267-ccaa4*t64263*t64264*t64265*t64346*t64347-ccaa3*gamma_aa[index]*gcaa*t64340* \
               t64341*t64261*t64262*t64266;
            double t64353 = gx*gx;
            double t64354 = t64353*t64353;
            double t64355 = 1/pow(rho_a[index],1.0E1);
            double t64356 = gamma_aa[index]*gx*t64159;
            double t64357 = t64356+1.0;
            double t64377 = gamma_aa[index]*gx*t64158*(3.2E1/3.0);
            double t64378 = gamma_aa[index]*gx*t64261*t64353*t64329*3.2E1;
            double t64379 = t64261*t64353*t64328*3.2E1;
            double t64380 = t64330*t64263*t64354*(3.2E1/3.0);
            double t64358 = t64380+t64377+t64378+t64379;
            double t64359 = gamma_aa[index]*gx*t64159*4.0;
            double t64360 = gamma_aa[index]*gx*t64261*t64353*t64266*4.0;
            double t64361 = t64261*t64353*t64267*6.0;
            double t64362 = t64263*t64354*t64265;
            double t64363 = t64360+t64361+t64362+t64359+1.0;
            double t64383 = gamma_aa[index]*gx*t64158*(1.6E1/3.0);
            double t64384 = t64261*t64353*t64328*(1.6E1/3.0);
            double t64364 = t64383+t64384;
            double t64365 = gamma_aa[index]*gx*t64159*2.0;
            double t64366 = t64261*t64353*t64267;
            double t64367 = t64365+t64366+1.0;
            double t64368 = gamma_aa[index]*gx*t64159*3.0;
            double t64369 = gamma_aa[index]*gx*t64261*t64353*t64266;
            double t64370 = t64261*t64353*t64267*3.0;
            double t64371 = t64370+t64368+t64369+1.0;
            double t64372 = 1/(t64371*t64371);
            double t64373 = gamma_aa[index]*gx*t64158*8.0;
            double t64374 = gamma_aa[index]*gx*t64261*t64353*t64329*8.0;
            double t64375 = t64261*t64353*t64328*1.6E1;
            double t64376 = t64373+t64374+t64375;
            double t64381 = 1/pow(rho_a[index],3.8E1/3.0);
            double t64382 = 1/(t64363*t64363);
            double t64385 = 1/(t64367*t64367);
            double t64386 = 1/t64363;
            double t64387 = 1/t64357;
            double t64388 = 1/t64371;
            double t64389 = 1/t64367;
            double t64390 = 1/(t64357*t64357);
            double t64391 = ccaa4*t64315*t64263*t64264*t64265;
            double t64392 = ccaa1*gamma_aa[index]*gcaa*t64318*t64159;
            double t64393 = ccaa3*gamma_aa[index]*gcaa*t64323*t64261*t64262*t64266;
            double t64394 = ccaa2*t64261*t64262*t64327*t64267;
            double t64395 = ccaa0+t64391+t64392+t64393+t64394;
            double t64396 = 1/(t64123*t64123*t64123);
            double t64397 = b4f*t64039*t64159*(1.0E1/9.0);
            double t64398 = b2f*c*t64242*(4.0/9.0);
            double t64399 = b3f*t64131*t64039*t64159*(1.0/1.2E1);
            double t64400 = b1f*c*t64131*t64242*(2.0/9.0);
            double t64401 = b3f*c*t64116*t64242*(2.0/3.0);
            double t64402 = t64400+t64401+t64397+t64398+t64399-b1f*t64243*t64039*t64159*(1.0/3.6E1);
            double t64403 = t64402*t64241*t64154*t64235;
            double t64405 = t64140*t64141*t64253*t64139;
            double t64406 = 1/(t64134*t64134);
            double t64407 = 1/(t64123*t64123*t64123*t64123);
            double t64408 = t64154*t64244*t64406*t64407*t64058*(1.0/2.0);
            double t64409 = t64045*t64245*t64254*t64255*t64139*(1.0/2.0);
            double t64410 = a1f*c*t64240*t64124*t64241*t64235*(2.0/3.0);
            double t64411 = a1p*c*t64140*t64141*t64124*t64146*(2.0/3.0);
            v_rho_a_rho_a_[index] = (rho_a[index]*t64309+rho_b[index]*(t64287-t64151*t64057*(t64287-c0f*log((t64058* \
               (1.0/2.0))/(b1f*t64273+b3f*t64274+b2f*c*t64271+b4f*t64039*t64275)+1.0)*(a1f*c*t64271+1.0)*2.0))-t64032* \
               (t64081+t64288+t64289))*(-ccab2*t64303*t64155*t64157*(gamma_aa[index]*gcab*t64301*(8.8E1/9.0)+t64261* \
               t64155*t64296*(3.2E1/9.0)+gamma_aa[index]*t64301*t64155*t64156*(8.8E1/9.0))+ccab4*t64163*t64164*(t64294* \
               t64294)*1/(t64169*t64169*t64169)*2.0+ccab2*t64155*1/(t64174*t64174*t64174)*t64157*(t64299*t64299)* \
               2.0+ccab1*gamma_aa[index]*gcab*t64301*t64181*(4.4E1/9.0)-ccab1*t64261*t64155*t64295*t64296*(3.2E1/ \
               9.0)+ccab2*t64261*t64155*t64179*t64296*(3.2E1/9.0)-ccab4*t64302*t64163*t64164*(gamma_aa[index]*gcab* \
               t64301*(1.76E2/9.0)+t64261*t64155*t64296*(6.4E1/3.0)+gamma_aa[index]*t64301*t64155*t64156*(1.76E2/ \
               3.0)+t64261*t64163*t64157*t64296*(6.4E1/3.0)+gamma_aa[index]*gcab*t64301*t64155*t64157*(1.76E2/3.0) \
               +gamma_aa[index]*t64301*t64163*t64156*t64157*(1.76E2/9.0)+gcab*t64261*t64155*t64156*t64296*(1.28E2/ \
               3.0))+ccab4*t64261*t64163*t64182*t64157*t64296*(6.4E1/3.0)-ccab1*gamma_aa[index]*t64301*t64155*t64156* \
               t64295*(4.4E1/9.0)+ccab2*gamma_aa[index]*t64301*t64155*t64156*t64179*(8.8E1/9.0)+ccab3*gcab*(t64307* \
               t64307)*t64155*t64156*t64157*1/(t64178*t64178*t64178)*2.0+ccab3*gamma_aa[index]*gcab*t64301*t64180* \
               t64155*t64157*(4.4E1/3.0)+ccab4*gamma_aa[index]*t64301*t64163*t64182*t64156*t64157*(1.76E2/9.0)-ccab2* \
               gamma_aa[index]*t64303*t64155*t64156*t64158*t64299*(1.6E1/3.0)+ccab3*gcab*t64180*t64261*t64155*t64156* \
               t64296*(3.2E1/3.0)+ccab1*gcab*1/(t64171*t64171*t64171)*t64261*t64155*t64156*t64296*(3.2E1/9.0)-ccab3* \
               gcab*t64300*t64155*t64156*t64157*(gamma_aa[index]*gcab*t64301*(4.4E1/3.0)+t64261*t64155*t64296*(3.2E1/ \
               3.0)+gamma_aa[index]*t64301*t64155*t64156*(8.8E1/3.0)+gamma_aa[index]*gcab*t64301*t64155*t64157*(4.4E1/ \
               3.0)+gcab*t64261*t64155*t64156*t64296*(3.2E1/3.0))-ccab3*gamma_aa[index]*gcab*t64300*t64307*t64155* \
               t64157*t64158*8.0-ccab4*gamma_aa[index]*t64302*t64163*t64156*t64157*t64158*t64294*(3.2E1/3.0))+t64395* \
               (-t64147+t64258+t64151*t64260*t64057)*2.0+t64352*t64309*2.0+(t64081+t64288+t64289+rho_a[index]*(-t64147+ \
               t64258+t64151*t64057*(t64147+t64257-t64240*t64241*t64154*t64235-a1p*c*c0p*t64124*t64148*(2.0/3.0)) \
               )+t64032*(t64092-a1p*c*c0p*t64070*t64044*(2.0/3.0)+t64111*t64071*t64082*t64057*t64079-t64071*t64082* \
               t64057*t64093*t64076*4.0-t64082*t64057*t64076*t64194*t64079+t64051*t64052*t64071*t64057*t64076*t64079* \
               4.0+Aa*t64111*t64104*t64113*t64106*t64057*t64094*2.0-Aa*t64104*t64106*t64217*t64057*t64076*t64094* \
               2.0+t64113*t64106*t64232*t64225*t64227*t64057*t64076*t64094-Aa*a1a*c*t64104*t64113*t64044*t64057*t64076* \
               t64094*(2.0/3.0))-c0p*t64139*t64148*2.0-t64151*t64057*t64269)*(ccab1*gamma_aa[index]*gcab*t64181*t64158* \
               (4.0/3.0)-ccab4*t64302*t64163*t64164*t64294-ccab2*t64303*t64155*t64157*t64299-ccab1*gamma_aa[index]* \
               t64155*t64156*t64158*t64295*(4.0/3.0)+ccab2*gamma_aa[index]*t64155*t64156*t64158*t64179*(8.0/3.0)+ \
               ccab3*gamma_aa[index]*gcab*t64180*t64155*t64157*t64158*4.0+ccab4*gamma_aa[index]*t64163*t64182*t64156* \
               t64157*t64158*(1.6E1/3.0)-ccab3*gcab*t64300*t64307*t64155*t64156*t64157)*2.0-(ccab0+ccab1*gcab*t64181* \
               t64156+ccab4*t64163*t64164*t64182+ccab2*t64155*t64157*t64179+ccab3*gcab*t64180*t64155*t64156*t64157) \
               *(-t64032*(-t64214-t64206+t64234+t64259+t64082*t64057*t64076*t64079*(t64214+t64206-t64234-t64259-1/ \
               (t64063*t64063*t64063)*t64207*t64069*t64186*2.0+t64069*t64186*t64187*(b2f*c*t64183*(4.0/9.0)+b4f*t64039* \
               t64184*(1.0E1/9.0)+b1f*c*t64084*t64183*(2.0/9.0)+b3f*c*t64035*t64183*(2.0/3.0)-b1f*t64039*t64184*t64198* \
               (1.0/3.6E1)+b3f*t64039*t64084*t64184*(1.0/1.2E1))+1/(t64063*t64063*t64063*t64063)*t64207*1/(t64066* \
               t64066)*t64058*t64069*(1.0/2.0)-a1f*c*c0f*t64183*t64067*(8.0/9.0)+a1f*c*t64044*t64192*t64186*t64187* \
               (2.0/3.0)-a1p*c*t64044*t64091*t64085*t64086*(2.0/3.0))+t64111*t64071*t64082*t64057*t64093*8.0-t64071* \
               t64215*t64082*t64057*t64076*2.0E1-t64071*t64224*t64082*t64057*t64079+t64111*t64082*t64057*t64194*t64079* \
               2.0-t64052*t64071*t64057*t64076*t64079*1.2E1-t64082*t64057*t64093*t64076*t64194*8.0-t64111*t64051* \
               t64052*t64071*t64057*t64079*8.0+t64051*t64052*t64071*t64057*t64093*t64076*3.2E1+t64051*t64052*t64057* \
               t64076*t64194*t64079*8.0+a1p*c*t64044*t64091*t64085*t64086*(2.0/3.0)+Aa*t64111*t64104*t64106*t64217* \
               t64057*t64094*4.0-Aa*t64104*t64113*t64106*t64224*t64057*t64094*2.0-Aa*t64104*t64106*t64057*t64076* \
               t64094*(t64215*t64082*2.0E1+t64052*t64079*1.2E1-t64051*t64052*t64093*3.2E1)*2.0-t64111*t64113*t64106* \
               t64232*t64225*t64227*t64057*t64094*2.0+t64106*t64232*t64225*t64217*t64227*t64057*t64076*t64094*2.0- \
               1/(t64100*t64100*t64100)*t64113*t64106*t64233*t64225*t64057*t64076*t64094*2.0+t64113*t64106*t64225* \
               t64227*t64057*t64076*t64094*(b2a*c*t64183*(4.0/9.0)+b4a*t64039*t64184*(1.0E1/9.0)+b1a*c*t64084*t64183* \
               (2.0/9.0)+b3a*c*t64035*t64183*(2.0/3.0)-b1a*t64039*t64184*t64198*(1.0/3.6E1)+b3a*t64039*t64084*t64184* \
               (1.0/1.2E1))+Aa*a1a*c*t64111*t64104*t64113*t64044*t64057*t64094*(4.0/3.0)-Aa*a1a*c*t64104*t64113*t64057* \
               t64183*t64076*t64094*(8.0/9.0)-Aa*a1a*c*t64104*t64044*t64217*t64057*t64076*t64094*(4.0/3.0)+1/(t64100* \
               t64100*t64100*t64100)*1/(t64103*t64103)*t64113*t64106*t64233*t64057*t64076*t64094*t64095*(1.0/2.0) \
               +a1a*c*t64113*t64232*t64044*t64225*t64227*t64057*t64076*t64094*(2.0/3.0))+rho_a[index]*(t64411+t64405- \
               t64247-t64256+t64409+t64151*t64057*(t64410+t64403+t64408+t64247+t64256-t64140*t64141*t64253*t64139- \
               t64154*t64235*t64244*t64396*2.0-a1f*c*c0f*t64152*t64242*(8.0/9.0)-t64045*t64245*t64254*t64255*t64139* \
               (1.0/2.0)-a1p*c*t64140*t64141*t64124*t64146*(2.0/3.0)))+t64151*t64260*t64057*2.0-t64140*t64141*t64146* \
               t64139*2.0+t64050*t64091*t64085*t64086*2.0-a1p*c*c0p*t64070*t64044*(4.0/3.0)+a1p*c*c0p*t64124*t64148* \
               (4.0/3.0)+t64111*t64071*t64082*t64057*t64079*2.0-t64071*t64082*t64057*t64093*t64076*8.0-t64082*t64057* \
               t64076*t64194*t64079*2.0+t64051*t64052*t64071*t64057*t64076*t64079*8.0+Aa*t64111*t64104*t64113*t64106* \
               t64057*t64094*4.0-Aa*t64104*t64106*t64217*t64057*t64076*t64094*4.0+t64113*t64106*t64232*t64225*t64227* \
               t64057*t64076*t64094*2.0-Aa*a1a*c*t64104*t64113*t64044*t64057*t64076*t64094*(4.0/3.0))+rho_a[index]* \
               t64352*(t64147-t64258+t64151*t64057*(t64331-t64147-t64257+t64258))*2.0-c0*pow(rho_a[index],1.0/3.0) \
               *(cx1*gamma_aa[index]*gx*t64158*t64387*(8.0/3.0)-cx1*t64261*t64353*t64390*t64328*(8.0/3.0)+cx2*t64261* \
               t64353*t64328*t64389*(1.6E1/3.0)+cx4*t64330*t64263*t64354*t64386*(3.2E1/3.0)-cx2*t64261*t64353*t64364* \
               t64267*t64385-cx4*t64263*t64354*t64265*t64382*t64358+cx3*gamma_aa[index]*gx*t64261*t64353*t64329*t64388* \
               8.0-cx3*gamma_aa[index]*gx*t64261*t64353*t64372*t64266*t64376)*(8.0/3.0)-rho_a[index]*t64309*(ccaa1* \
               gamma_aa[index]*gcaa*t64301*t64318*(8.8E1/9.0)+ccaa4*t64315*t64263*t64264*t64381*(1.12E3/9.0)-ccaa1* \
               t64261*t64262*t64336*t64296*2.4E1+ccaa2*t64261*t64262*t64327*t64296*(3.04E2/9.0)-ccaa2*t64350*t64261* \
               t64351*t64262*t64328*(3.2E1/3.0)-ccaa4*t64330*t64263*t64264*t64346*t64347*(6.4E1/3.0)-ccaa2*t64261* \
               t64351*t64262*t64267*(gamma_aa[index]*gcaa*t64301*(1.76E2/9.0)+t64261*t64262*t64296*(3.04E2/9.0))- \
               ccaa4*t64263*t64264*t64265*t64347*(gamma_aa[index]*gcaa*t64301*(3.52E2/9.0)+t64263*t64264*t64381*(1.12E3/ \
               9.0)+t64261*t64262*t64296*(6.08E2/3.0)+gamma_aa[index]*gcaa*t64261*t64262*t64355*2.88E2)+ccaa2*(t64350* \
               t64350)*t64261*t64262*1/(t64326*t64326*t64326)*t64267*2.0+ccaa4*1/(t64314*t64314*t64314)*t64263*t64264* \
               t64265*(t64346*t64346)*2.0+ccaa3*gamma_aa[index]*gcaa*t64323*t64261*t64262*t64355*7.2E1+ccaa1*gamma_aa[index]* \
               gcaa*t64261*t64262*1/(t64317*t64317*t64317)*t64355*(1.28E2/9.0)+ccaa3*gamma_aa[index]*gcaa*1/(t64322* \
               t64322*t64322)*(t64340*t64340)*t64261*t64262*t64266*2.0-ccaa3*gamma_aa[index]*gcaa*t64341*t64261*t64262* \
               t64266*(gamma_aa[index]*gcaa*t64301*(8.8E1/3.0)+t64261*t64262*t64296*(3.04E2/3.0)+gamma_aa[index]* \
               gcaa*t64261*t64262*t64355*7.2E1)-ccaa3*gamma_aa[index]*gcaa*t64340*t64341*t64261*t64262*t64329*1.6E1) \
               +rho_a[index]*t64395*(t64411+t64405-t64247-t64256+t64409+t64151*t64057*(t64410-t64411+t64403-t64405+ \
               t64408+t64247+t64256-t64409-t64154*t64235*t64244*t64396*2.0-a1f*c*c0f*t64152*t64242*(8.0/9.0)))+c0* \
               pow(rho_a[index],4.0/3.0)*(cx1*gamma_aa[index]*gx*t64301*t64387*(8.8E1/9.0)-cx1*t64261*t64353*t64390* \
               t64296*2.4E1+cx2*t64261*t64353*t64296*t64389*(3.04E2/9.0)+cx4*t64263*t64354*t64381*t64386*(1.12E3/ \
               9.0)-cx2*t64261*t64353*t64328*t64364*t64385*(3.2E1/3.0)-cx4*t64330*t64263*t64354*t64382*t64358*(6.4E1/ \
               3.0)-cx2*t64261*t64353*t64267*t64385*(gamma_aa[index]*gx*t64301*(1.76E2/9.0)+t64261*t64353*t64296* \
               (3.04E2/9.0))-cx4*t64263*t64354*t64265*t64382*(gamma_aa[index]*gx*t64301*(3.52E2/9.0)+t64263*t64354* \
               t64381*(1.12E3/9.0)+t64261*t64353*t64296*(6.08E2/3.0)+gamma_aa[index]*gx*t64261*t64353*t64355*2.88E2) \
               +cx2*t64261*t64353*(t64364*t64364)*t64267*1/(t64367*t64367*t64367)*2.0+cx4*t64263*t64354*1/(t64363* \
               t64363*t64363)*t64265*(t64358*t64358)*2.0+cx3*gamma_aa[index]*gx*t64261*t64353*t64355*t64388*7.2E1+ \
               cx1*gamma_aa[index]*gx*t64261*t64353*t64355*1/(t64357*t64357*t64357)*(1.28E2/9.0)+cx3*gamma_aa[index]* \
               gx*t64261*t64353*1/(t64371*t64371*t64371)*t64266*(t64376*t64376)*2.0-cx3*gamma_aa[index]*gx*t64261* \
               t64353*t64372*t64266*(gamma_aa[index]*gx*t64301*(8.8E1/3.0)+t64261*t64353*t64296*(3.04E2/3.0)+gamma_aa[index]* \
               gx*t64261*t64353*t64355*7.2E1)-cx3*gamma_aa[index]*gx*t64261*t64353*t64372*t64329*t64376*1.6E1)+c0* \
               t64120*(cx0+cx1*gamma_aa[index]*gx*t64159*t64387+cx2*t64261*t64353*t64267*t64389+cx4*t64263*t64354* \
               t64265*t64386+cx3*gamma_aa[index]*gx*t64261*t64353*t64266*t64388)*(4.0/9.0);
        } else if (rho_a[index] > cutoff_) {
            double t67482 = 1/pow(rho_a[index],1.0/3.0);
            double t67483 = c*t67482;
            double t67484 = sqrt(t67483);
            double t67485 = b1f*t67484;
            double t67486 = pow(t67483,3.0/2.0);
            double t67487 = b3f*t67486;
            double t67488 = c*c;
            double t67489 = 1/pow(rho_a[index],2.0/3.0);
            double t67490 = b4f*t67488*t67489;
            double t67491 = b2f*c*t67482;
            double t67492 = t67490+t67491+t67485+t67487;
            double t67493 = 1/pow(rho_a[index],4.0/3.0);
            double t67494 = b1p*t67484;
            double t67495 = b3p*t67486;
            double t67496 = b4p*t67488*t67489;
            double t67497 = b2p*c*t67482;
            double t67498 = t67494+t67495+t67496+t67497;
            double t67499 = 1/pow(rho_a[index],5.0/3.0);
            double t67500 = 1/sqrt(t67483);
            double t67501 = 1/c0f;
            double t67502 = 1/t67492;
            double t67503 = t67501*t67502*(1.0/2.0);
            double t67504 = t67503+1.0;
            double t67505 = 1/c0p;
            double t67506 = 1/t67498;
            double t67507 = t67505*t67506*(1.0/2.0);
            double t67508 = t67507+1.0;
            double t67509 = a1p*c*t67482;
            double t67510 = t67509+1.0;
            double t67511 = 1/t67508;
            double t67512 = 1/(t67498*t67498);
            double t67513 = b4p*t67488*t67499*(2.0/3.0);
            double t67514 = b2p*c*t67493*(1.0/3.0);
            double t67515 = b1p*c*t67500*t67493*(1.0/6.0);
            double t67516 = b3p*c*t67484*t67493*(1.0/2.0);
            double t67517 = t67513+t67514+t67515+t67516;
            double t67518 = t67510*t67511*t67512*t67517;
            double t67519 = log(t67508);
            double t67520 = gamma_aa[index]*gamma_aa[index];
            double t67521 = gcaa*gcaa;
            double t67522 = t67520*t67520;
            double t67523 = t67521*t67521;
            double t67524 = 1/pow(rho_a[index],3.2E1/3.0);
            double t67525 = 1/pow(rho_a[index],8.0/3.0);
            double t67526 = 1/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]);
            double t67527 = 1/pow(rho_a[index],1.6E1/3.0);
            double t67528 = pow(2.0,1.0/3.0);
            double t67529 = t67528*2.0;
            double t67530 = t67529-2.0;
            double t67531 = two_13*2.0;
            double t67532 = t67531-2.0;
            double t67533 = 1/t67532;
            double t67534 = log(t67504);
            double t67535 = a1f*c*t67482;
            double t67536 = t67535+1.0;
            double t67537 = gamma_aa[index]*gcaa*t67525*4.0;
            double t67538 = gamma_aa[index]*gcaa*t67520*t67521*t67526*4.0;
            double t67539 = t67520*t67521*t67527*6.0;
            double t67540 = t67522*t67523*t67524;
            double t67541 = t67540+t67537+t67538+t67539+1.0;
            double t67542 = 1/t67541;
            double t67543 = gamma_aa[index]*gcaa*t67525;
            double t67544 = t67543+1.0;
            double t67545 = 1/t67544;
            double t67546 = gamma_aa[index]*gcaa*t67525*3.0;
            double t67547 = gamma_aa[index]*gcaa*t67520*t67521*t67526;
            double t67548 = t67520*t67521*t67527*3.0;
            double t67549 = t67546+t67547+t67548+1.0;
            double t67550 = 1/t67549;
            double t67551 = gamma_aa[index]*gcaa*t67525*2.0;
            double t67552 = t67520*t67521*t67527;
            double t67553 = t67551+t67552+1.0;
            double t67554 = 1/t67553;
            double t67555 = 1/pow(rho_a[index],1.9E1/3.0);
            double t67556 = 1/pow(rho_a[index],1.1E1/3.0);
            double t67557 = 1/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]*rho_a[index]);
            double t67558 = 1/pow(rho_a[index],3.5E1/3.0);
            double t67559 = 1/t67504;
            double t67560 = 1/(t67492*t67492);
            double t67561 = b4f*t67488*t67499*(2.0/3.0);
            double t67562 = b2f*c*t67493*(1.0/3.0);
            double t67563 = b1f*c*t67500*t67493*(1.0/6.0);
            double t67564 = b3f*c*t67484*t67493*(1.0/2.0);
            double t67565 = t67561+t67562+t67563+t67564;
            double t67566 = a1f*c*c0f*t67534*t67493*(2.0/3.0);
            double t67567 = a1p*c*c0p*t67519*t67493*(2.0/3.0);
            double t67568 = ccaa4*t67522*t67523*t67542*t67558*(3.2E1/3.0);
            double t67569 = ccaa1*gamma_aa[index]*gcaa*t67545*t67556*(8.0/3.0);
            double t67570 = ccaa3*gamma_aa[index]*gcaa*t67520*t67521*t67550*t67557*8.0;
            double t67571 = ccaa2*t67520*t67521*t67554*t67555*(1.6E1/3.0);
            double t67572 = 1/(t67544*t67544);
            double t67573 = gamma_aa[index]*gcaa*t67556*8.0;
            double t67574 = gamma_aa[index]*gcaa*t67520*t67521*t67557*8.0;
            double t67575 = t67520*t67521*t67555*1.6E1;
            double t67576 = t67573+t67574+t67575;
            double t67577 = 1/(t67549*t67549);
            double t67578 = gamma_aa[index]*gcaa*t67556*(3.2E1/3.0);
            double t67579 = gamma_aa[index]*gcaa*t67520*t67521*t67557*3.2E1;
            double t67580 = t67520*t67521*t67555*3.2E1;
            double t67581 = t67522*t67523*t67558*(3.2E1/3.0);
            double t67582 = t67580+t67581+t67578+t67579;
            double t67583 = 1/(t67541*t67541);
            double t67584 = gamma_aa[index]*gcaa*t67556*(1.6E1/3.0);
            double t67585 = t67520*t67521*t67555*(1.6E1/3.0);
            double t67586 = t67584+t67585;
            double t67587 = 1/(t67553*t67553);
            double t67588 = t67570+t67571+t67568+t67569-ccaa1*t67520*t67521*t67572*t67555*(8.0/3.0)-ccaa4*t67522* \
               t67523*t67524*t67582*t67583-ccaa2*t67520*t67521*t67527*t67586*t67587-ccaa3*gamma_aa[index]*gcaa*t67520* \
               t67521*t67526*t67576*t67577;
            double t67589 = gx*gx;
            double t67590 = t67589*t67589;
            double t67591 = 1/pow(rho_a[index],1.0E1);
            double t67592 = gamma_aa[index]*gx*t67525;
            double t67593 = t67592+1.0;
            double t67594 = 1/pow(rho_a[index],2.2E1/3.0);
            double t67615 = gamma_aa[index]*gx*t67556*(3.2E1/3.0);
            double t67616 = gamma_aa[index]*gx*t67520*t67557*t67589*3.2E1;
            double t67617 = t67520*t67555*t67589*3.2E1;
            double t67618 = t67522*t67590*t67558*(3.2E1/3.0);
            double t67595 = t67615+t67616+t67617+t67618;
            double t67596 = gamma_aa[index]*gx*t67525*4.0;
            double t67597 = gamma_aa[index]*gx*t67520*t67526*t67589*4.0;
            double t67598 = t67520*t67527*t67589*6.0;
            double t67599 = t67522*t67524*t67590;
            double t67600 = t67596+t67597+t67598+t67599+1.0;
            double t67621 = gamma_aa[index]*gx*t67556*(1.6E1/3.0);
            double t67622 = t67520*t67555*t67589*(1.6E1/3.0);
            double t67601 = t67621+t67622;
            double t67602 = gamma_aa[index]*gx*t67525*2.0;
            double t67603 = t67520*t67527*t67589;
            double t67604 = t67602+t67603+1.0;
            double t67605 = gamma_aa[index]*gx*t67525*3.0;
            double t67606 = gamma_aa[index]*gx*t67520*t67526*t67589;
            double t67607 = t67520*t67527*t67589*3.0;
            double t67608 = t67605+t67606+t67607+1.0;
            double t67609 = 1/pow(rho_a[index],1.4E1/3.0);
            double t67610 = 1/(t67608*t67608);
            double t67611 = gamma_aa[index]*gx*t67556*8.0;
            double t67612 = gamma_aa[index]*gx*t67520*t67557*t67589*8.0;
            double t67613 = t67520*t67555*t67589*1.6E1;
            double t67614 = t67611+t67612+t67613;
            double t67619 = 1/pow(rho_a[index],3.8E1/3.0);
            double t67620 = 1/(t67600*t67600);
            double t67623 = 1/(t67604*t67604);
            double t67624 = 1/t67600;
            double t67625 = 1/t67593;
            double t67626 = 1/t67608;
            double t67627 = 1/t67604;
            double t67628 = c0f*t67534*t67536*2.0;
            double t67629 = c0p*t67510*t67519*2.0;
            double t67630 = 1/(t67593*t67593);
            double t67631 = ccaa4*t67522*t67523*t67524*t67542;
            double t67632 = ccaa1*gamma_aa[index]*gcaa*t67525*t67545;
            double t67633 = ccaa3*gamma_aa[index]*gcaa*t67520*t67521*t67550*t67526;
            double t67634 = ccaa2*t67520*t67521*t67527*t67554;
            double t67635 = ccaa0+t67631+t67632+t67633+t67634;
            double t67636 = 1/pow(rho_a[index],7.0/3.0);
            double t67637 = 1/pow(t67483,3.0/2.0);
            double t67638 = t67565*t67565;
            double t67639 = t67517*t67517;
            double t67640 = 1/(t67498*t67498*t67498);
            double t67641 = t67510*t67511*t67640*t67639*2.0;
            double t67642 = b4p*t67525*t67488*(1.0E1/9.0);
            double t67643 = b2p*c*t67636*(4.0/9.0);
            double t67644 = b3p*t67500*t67525*t67488*(1.0/1.2E1);
            double t67645 = b1p*c*t67500*t67636*(2.0/9.0);
            double t67646 = b3p*c*t67636*t67484*(2.0/3.0);
            double t67647 = t67642+t67643+t67644+t67645+t67646-b1p*t67525*t67637*t67488*(1.0/3.6E1);
            double t67648 = 1/(t67508*t67508);
            double t67649 = 1/(t67498*t67498*t67498*t67498);
            double t67650 = a1p*c*c0p*t67519*t67636*(8.0/9.0);
            v_rho_a_rho_a_[index] = t67588*(t67629+t67530*t67533*(t67628-c0p*t67510*t67519*2.0))*2.0+t67635*(- \
               t67518+t67567+t67530*t67533*(t67518+t67566-t67560*t67536*t67565*t67559-a1p*c*c0p*t67519*t67493*(2.0/ \
               3.0)))*2.0-c0*pow(rho_a[index],1.0/3.0)*(cx1*gamma_aa[index]*gx*t67625*t67556*(8.0/3.0)-cx1*t67520* \
               t67630*t67555*t67589*(8.0/3.0)+cx2*t67520*t67555*t67627*t67589*(1.6E1/3.0)+cx4*t67522*t67624*t67590* \
               t67558*(3.2E1/3.0)-cx2*t67520*t67601*t67623*t67527*t67589-cx4*t67620*t67522*t67524*t67590*t67595+cx3* \
               gamma_aa[index]*gx*t67520*t67626*t67557*t67589*8.0-cx3*gamma_aa[index]*gx*t67520*t67610*t67614*t67526* \
               t67589)*(8.0/3.0)+rho_a[index]*t67635*(-t67641-t67650+t67530*t67533*(t67641+t67650-t67510*t67511*t67512* \
               t67647-t67536*1/(t67492*t67492*t67492)*t67638*t67559*2.0+t67560*t67536*t67559*(b2f*c*t67636*(4.0/9.0) \
               +b4f*t67525*t67488*(1.0E1/9.0)+b1f*c*t67500*t67636*(2.0/9.0)+b3f*c*t67636*t67484*(2.0/3.0)-b1f*t67525* \
               t67637*t67488*(1.0/3.6E1)+b3f*t67500*t67525*t67488*(1.0/1.2E1))+t67501*1/(t67504*t67504)*t67536*1/ \
               (t67492*t67492*t67492*t67492)*t67638*(1.0/2.0)-a1f*c*c0f*t67534*t67636*(8.0/9.0)-t67510*t67505*t67639* \
               t67648*t67649*(1.0/2.0)+a1f*c*t67560*t67493*t67565*t67559*(2.0/3.0)-a1p*c*t67511*t67512*t67517*t67493* \
               (2.0/3.0))+t67510*t67511*t67512*t67647+t67510*t67505*t67639*t67648*t67649*(1.0/2.0)+a1p*c*t67511*t67512* \
               t67517*t67493*(2.0/3.0))-rho_a[index]*t67588*(-t67518+t67567+t67530*t67533*(t67518+t67566-t67567-t67560* \
               t67536*t67565*t67559))*2.0-rho_a[index]*(t67629+t67530*t67533*(t67628-t67629))*(ccaa1*gamma_aa[index]* \
               gcaa*t67545*t67609*(8.8E1/9.0)-ccaa1*t67520*t67521*t67572*t67594*2.4E1+ccaa2*t67520*t67521*t67554* \
               t67594*(3.04E2/9.0)+ccaa4*t67522*t67523*t67542*t67619*(1.12E3/9.0)-ccaa2*t67520*t67521*t67555*t67586* \
               t67587*(3.2E1/3.0)-ccaa4*t67522*t67523*t67582*t67583*t67558*(6.4E1/3.0)-ccaa2*t67520*t67521*t67527* \
               t67587*(gamma_aa[index]*gcaa*t67609*(1.76E2/9.0)+t67520*t67521*t67594*(3.04E2/9.0))-ccaa4*t67522*t67523* \
               t67524*t67583*(gamma_aa[index]*gcaa*t67609*(3.52E2/9.0)+t67520*t67521*t67594*(6.08E2/3.0)+t67522*t67523* \
               t67619*(1.12E3/9.0)+gamma_aa[index]*gcaa*t67520*t67521*t67591*2.88E2)+ccaa4*t67522*t67523*1/(t67541* \
               t67541*t67541)*t67524*(t67582*t67582)*2.0+ccaa2*t67520*t67521*1/(t67553*t67553*t67553)*t67527*(t67586* \
               t67586)*2.0+ccaa3*gamma_aa[index]*gcaa*t67520*t67521*t67550*t67591*7.2E1+ccaa1*gamma_aa[index]*gcaa* \
               t67520*t67521*1/(t67544*t67544*t67544)*t67591*(1.28E2/9.0)+ccaa3*gamma_aa[index]*gcaa*t67520*t67521* \
               t67526*1/(t67549*t67549*t67549)*(t67576*t67576)*2.0-ccaa3*gamma_aa[index]*gcaa*t67520*t67521*t67526* \
               t67577*(gamma_aa[index]*gcaa*t67609*(8.8E1/3.0)+t67520*t67521*t67594*(3.04E2/3.0)+gamma_aa[index]* \
               gcaa*t67520*t67521*t67591*7.2E1)-ccaa3*gamma_aa[index]*gcaa*t67520*t67521*t67557*t67576*t67577*1.6E1) \
               +c0*pow(rho_a[index],4.0/3.0)*(cx1*gamma_aa[index]*gx*t67625*t67609*(8.8E1/9.0)-cx1*t67520*t67630* \
               t67594*t67589*2.4E1+cx2*t67520*t67627*t67594*t67589*(3.04E2/9.0)+cx4*t67522*t67624*t67590*t67619*(1.12E3/ \
               9.0)-cx2*t67520*t67601*t67623*t67555*t67589*(3.2E1/3.0)-cx4*t67620*t67522*t67590*t67558*t67595*(6.4E1/ \
               3.0)-cx2*t67520*t67623*t67527*t67589*(gamma_aa[index]*gx*t67609*(1.76E2/9.0)+t67520*t67594*t67589* \
               (3.04E2/9.0))-cx4*t67620*t67522*t67524*t67590*(gamma_aa[index]*gx*t67609*(3.52E2/9.0)+t67522*t67590* \
               t67619*(1.12E3/9.0)+t67520*t67594*t67589*(6.08E2/3.0)+gamma_aa[index]*gx*t67520*t67591*t67589*2.88E2) \
               +cx2*t67520*(t67601*t67601)*1/(t67604*t67604*t67604)*t67527*t67589*2.0+cx4*1/(t67600*t67600*t67600) \
               *t67522*t67524*t67590*(t67595*t67595)*2.0+cx3*gamma_aa[index]*gx*t67520*t67626*t67591*t67589*7.2E1+ \
               cx1*gamma_aa[index]*gx*t67520*t67591*1/(t67593*t67593*t67593)*t67589*(1.28E2/9.0)+cx3*gamma_aa[index]* \
               gx*t67520*(t67614*t67614)*t67526*1/(t67608*t67608*t67608)*t67589*2.0-cx3*gamma_aa[index]*gx*t67520* \
               t67610*t67526*t67589*(gamma_aa[index]*gx*t67609*(8.8E1/3.0)+t67520*t67594*t67589*(3.04E2/3.0)+gamma_aa[index]* \
               gx*t67520*t67591*t67589*7.2E1)-cx3*gamma_aa[index]*gx*t67520*t67610*t67614*t67557*t67589*1.6E1)+c0* \
               t67489*(cx0+cx1*gamma_aa[index]*gx*t67525*t67625+cx2*t67520*t67527*t67627*t67589+cx4*t67522*t67524* \
               t67624*t67590+cx3*gamma_aa[index]*gx*t67520*t67526*t67626*t67589)*(4.0/9.0);
        } else if (rho_b[index] > cutoff_) {
            v_rho_a_rho_a_[index] = 0.0;
        } else {
            v_rho_a_rho_a_[index] = 0.0;
        } 

        //V_rho_a_rho_b
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t64413 = rho_a[index]+rho_b[index];
            double t64414 = 1/pow(t64413,1.0/3.0);
            double t64415 = c*t64414;
            double t64416 = sqrt(t64415);
            double t64417 = b1p*t64416;
            double t64418 = pow(t64415,3.0/2.0);
            double t64419 = b3p*t64418;
            double t64420 = c*c;
            double t64421 = 1/pow(t64413,2.0/3.0);
            double t64422 = b4p*t64420*t64421;
            double t64423 = b2p*c*t64414;
            double t64424 = t64422+t64423+t64417+t64419;
            double t64425 = 1/pow(t64413,4.0/3.0);
            double t64426 = 1/c0p;
            double t64427 = 1/t64424;
            double t64428 = t64426*t64427*(1.0/2.0);
            double t64429 = t64428+1.0;
            double t64430 = a1p*c*t64414;
            double t64431 = t64430+1.0;
            double t64432 = rho_a[index]-rho_b[index];
            double t64433 = t64432*t64432;
            double t64434 = 1/t64413;
            double t64435 = t64432*t64434;
            double t64436 = two_13*2.0;
            double t64437 = t64436-2.0;
            double t64438 = 1/t64437;
            double t64439 = 1/c0f;
            double t64440 = b1f*t64416;
            double t64441 = b3f*t64418;
            double t64442 = b4f*t64420*t64421;
            double t64443 = b2f*c*t64414;
            double t64444 = t64440+t64441+t64442+t64443;
            double t64445 = 1/t64444;
            double t64446 = t64445*t64439*(1.0/2.0);
            double t64447 = t64446+1.0;
            double t64448 = log(t64447);
            double t64449 = a1f*c*t64414;
            double t64450 = t64449+1.0;
            double t64451 = log(t64429);
            double t64461 = c0f*t64450*t64448*2.0;
            double t64462 = c0p*t64431*t64451*2.0;
            double t64452 = t64461-t64462;
            double t64453 = t64435+1.0;
            double t64454 = pow(t64453,4.0/3.0);
            double t64455 = -t64435+1.0;
            double t64456 = pow(t64455,4.0/3.0);
            double t64457 = t64454+t64456-2.0;
            double t64458 = 1/(t64413*t64413);
            double t64489 = t64432*t64458;
            double t64459 = t64434-t64489;
            double t64460 = 1/(t64413*t64413*t64413*t64413);
            double t64463 = t64433*t64433;
            double t64464 = 1/pow(t64413,5.0/3.0);
            double t64465 = 1/sqrt(t64415);
            double t64466 = 1/t64429;
            double t64467 = 1/(t64424*t64424);
            double t64468 = b4p*t64420*t64464*(2.0/3.0);
            double t64469 = b2p*c*t64425*(1.0/3.0);
            double t64470 = b1p*c*t64425*t64465*(1.0/6.0);
            double t64471 = b3p*c*t64416*t64425*(1.0/2.0);
            double t64472 = t64470+t64471+t64468+t64469;
            double t64473 = t64431*t64472*t64466*t64467;
            double t64474 = 1/(t64413*t64413*t64413*t64413*t64413);
            double t64475 = 1/d2fz0;
            double t64476 = 1/Aa;
            double t64477 = b1a*t64416;
            double t64478 = b3a*t64418;
            double t64479 = b4a*t64420*t64421;
            double t64480 = b2a*c*t64414;
            double t64481 = t64480+t64477+t64478+t64479;
            double t64482 = 1/t64481;
            double t64483 = t64482*t64476*(1.0/2.0);
            double t64484 = t64483+1.0;
            double t64485 = log(t64484);
            double t64486 = a1a*c*t64414;
            double t64487 = t64486+1.0;
            double t64488 = pow(t64453,1.0/3.0);
            double t64490 = t64459*t64488*(4.0/3.0);
            double t64491 = pow(t64455,1.0/3.0);
            double t64635 = t64491*t64459*(4.0/3.0);
            double t64492 = t64490-t64635;
            double t64493 = t64460*t64463;
            double t64494 = t64493-1.0;
            double t64495 = 1/pow(rho_a[index],1.0/3.0);
            double t64496 = c*t64495;
            double t64497 = sqrt(t64496);
            double t64498 = b1f*t64497;
            double t64499 = pow(t64496,3.0/2.0);
            double t64500 = b3f*t64499;
            double t64501 = 1/pow(rho_a[index],2.0/3.0);
            double t64502 = b4f*t64420*t64501;
            double t64503 = b2f*c*t64495;
            double t64504 = t64500+t64502+t64503+t64498;
            double t64505 = 1/pow(rho_a[index],4.0/3.0);
            double t64506 = b1p*t64497;
            double t64507 = b3p*t64499;
            double t64508 = b4p*t64420*t64501;
            double t64509 = b2p*c*t64495;
            double t64510 = t64506+t64507+t64508+t64509;
            double t64511 = 1/pow(rho_a[index],5.0/3.0);
            double t64512 = 1/sqrt(t64496);
            double t64513 = 1/t64504;
            double t64514 = t64513*t64439*(1.0/2.0);
            double t64515 = t64514+1.0;
            double t64516 = 1/t64510;
            double t64517 = t64426*t64516*(1.0/2.0);
            double t64518 = t64517+1.0;
            double t64519 = a1p*c*t64495;
            double t64520 = t64519+1.0;
            double t64521 = 1/t64518;
            double t64522 = 1/(t64510*t64510);
            double t64523 = b4p*t64420*t64511*(2.0/3.0);
            double t64524 = b2p*c*t64505*(1.0/3.0);
            double t64525 = b1p*c*t64512*t64505*(1.0/6.0);
            double t64526 = b3p*c*t64505*t64497*(1.0/2.0);
            double t64527 = t64523+t64524+t64525+t64526;
            double t64528 = t64520*t64521*t64522*t64527;
            double t64529 = log(t64518);
            double t64530 = pow(2.0,1.0/3.0);
            double t64531 = t64530*2.0;
            double t64532 = t64531-2.0;
            double t64533 = log(t64515);
            double t64534 = a1f*c*t64495;
            double t64535 = t64534+1.0;
            double t64536 = gcab*gcab;
            double t64540 = 1/pow(rho_a[index],8.0/3.0);
            double t64541 = gamma_aa[index]*t64540*(1.0/2.0);
            double t64542 = 1/pow(rho_b[index],8.0/3.0);
            double t64543 = gamma_bb[index]*t64542*(1.0/2.0);
            double t64537 = t64541+t64543;
            double t64538 = t64537*t64537;
            double t64539 = 1/pow(rho_b[index],1.1E1/3.0);
            double t64544 = t64536*t64536;
            double t64545 = t64538*t64538;
            double t64546 = t64536*t64538*6.0;
            double t64547 = gcab*t64536*t64537*t64538*4.0;
            double t64548 = t64544*t64545;
            double t64549 = gcab*t64537*4.0;
            double t64550 = t64546+t64547+t64548+t64549+1.0;
            double t64551 = gcab*t64537;
            double t64552 = t64551+1.0;
            double t64553 = t64536*t64538;
            double t64554 = gcab*t64537*2.0;
            double t64555 = t64553+t64554+1.0;
            double t64556 = t64536*t64538*3.0;
            double t64557 = gcab*t64536*t64537*t64538;
            double t64558 = gcab*t64537*3.0;
            double t64559 = t64556+t64557+t64558+1.0;
            double t64560 = t64432*t64433*t64460*t64452*t64438*t64457*4.0;
            double t64561 = t64434+t64489;
            double t64562 = 1/t64447;
            double t64563 = 1/(t64444*t64444);
            double t64564 = b4f*t64420*t64464*(2.0/3.0);
            double t64565 = b2f*c*t64425*(1.0/3.0);
            double t64566 = b1f*c*t64425*t64465*(1.0/6.0);
            double t64567 = b3f*c*t64416*t64425*(1.0/2.0);
            double t64568 = t64564+t64565+t64566+t64567;
            double t64569 = a1f*c*c0f*t64425*t64448*(2.0/3.0);
            double t64570 = t64463*t64474*4.0;
            double t64571 = t64561*t64491*(4.0/3.0);
            double t64634 = t64561*t64488*(4.0/3.0);
            double t64572 = t64571-t64634;
            double t64573 = 1/t64484;
            double t64574 = 1/(t64481*t64481);
            double t64575 = b4a*t64420*t64464*(2.0/3.0);
            double t64576 = b2a*c*t64425*(1.0/3.0);
            double t64577 = b1a*c*t64425*t64465*(1.0/6.0);
            double t64578 = b3a*c*t64416*t64425*(1.0/2.0);
            double t64579 = t64575+t64576+t64577+t64578;
            double t64580 = t64438*t64573*t64457*t64475*t64574*t64494*t64487*t64579;
            double t64581 = 1/pow(rho_b[index],1.0/3.0);
            double t64582 = c*t64581;
            double t64583 = sqrt(t64582);
            double t64584 = b1f*t64583;
            double t64585 = pow(t64582,3.0/2.0);
            double t64586 = b3f*t64585;
            double t64587 = 1/pow(rho_b[index],2.0/3.0);
            double t64588 = b4f*t64420*t64587;
            double t64589 = b2f*c*t64581;
            double t64590 = t64584+t64586+t64588+t64589;
            double t64591 = 1/pow(rho_b[index],4.0/3.0);
            double t64592 = b1p*t64583;
            double t64593 = b3p*t64585;
            double t64594 = b4p*t64420*t64587;
            double t64595 = b2p*c*t64581;
            double t64596 = t64592+t64593+t64594+t64595;
            double t64597 = 1/pow(rho_b[index],5.0/3.0);
            double t64598 = 1/sqrt(t64582);
            double t64599 = 1/t64590;
            double t64600 = t64439*t64599*(1.0/2.0);
            double t64601 = t64600+1.0;
            double t64602 = 1/t64596;
            double t64603 = t64602*t64426*(1.0/2.0);
            double t64604 = t64603+1.0;
            double t64605 = a1p*c*t64581;
            double t64606 = t64605+1.0;
            double t64607 = 1/t64604;
            double t64608 = 1/(t64596*t64596);
            double t64609 = b4p*t64420*t64597*(2.0/3.0);
            double t64610 = b2p*c*t64591*(1.0/3.0);
            double t64611 = b1p*c*t64591*t64598*(1.0/6.0);
            double t64612 = b3p*c*t64591*t64583*(1.0/2.0);
            double t64613 = t64610+t64611+t64612+t64609;
            double t64614 = t64613*t64606*t64607*t64608;
            double t64615 = log(t64604);
            double t64616 = log(t64601);
            double t64617 = a1f*c*t64581;
            double t64618 = t64617+1.0;
            double t64619 = t64460*t64452*t64463*t64438*t64457;
            double t64620 = Aa*t64438*t64457*t64475*t64485*t64494*t64487*2.0;
            double t64621 = 1/pow(rho_a[index],1.1E1/3.0);
            double t64622 = 1/(t64559*t64559);
            double t64623 = 1/t64552;
            double t64624 = 1/(t64550*t64550);
            double t64625 = 1/(t64555*t64555);
            double t64626 = 1/t64550;
            double t64627 = 1/(t64552*t64552);
            double t64628 = 1/t64555;
            double t64629 = 1/t64559;
            double t64631 = a1p*c*c0p*t64451*t64425*(2.0/3.0);
            double t64636 = t64450*t64562*t64563*t64568;
            double t64630 = -t64631+t64473-t64636+t64569;
            double t64632 = 1/pow(t64413,7.0/3.0);
            double t64633 = 1/pow(t64413,8.0/3.0);
            double t64637 = t64472*t64472;
            double t64638 = 1/pow(t64415,3.0/2.0);
            double t64639 = b4p*t64420*t64633*(1.0E1/9.0);
            double t64640 = b2p*c*t64632*(4.0/9.0);
            double t64641 = b1p*c*t64632*t64465*(2.0/9.0);
            double t64642 = b3p*c*t64416*t64632*(2.0/3.0);
            double t64643 = b3p*t64420*t64633*t64465*(1.0/1.2E1);
            double t64644 = t64640+t64641+t64642+t64643+t64639-b1p*t64420*t64633*t64638*(1.0/3.6E1);
            double t64645 = t64431*t64644*t64466*t64467;
            double t64646 = 1/(t64424*t64424*t64424);
            double t64647 = t64568*t64568;
            double t64648 = 1/(t64429*t64429);
            double t64649 = 1/(t64424*t64424*t64424*t64424);
            double t64650 = t64431*t64426*t64637*t64648*t64649*(1.0/2.0);
            double t64651 = t64631-t64473+t64636-t64569;
            double t64652 = 1/(t64413*t64413*t64413);
            double t64653 = a1p*c*t64425*t64472*t64466*t64467*(2.0/3.0);
            double t64654 = 1/(t64413*t64413*t64413*t64413*t64413*t64413);
            double t64655 = t64432*t64433*t64460*4.0;
            double t64656 = t64570+t64655;
            double t64657 = t64432*t64652*t64491*(8.0/3.0);
            double t64658 = 1/pow(t64453,2.0/3.0);
            double t64659 = t64561*t64459*t64658*(4.0/9.0);
            double t64660 = 1/pow(t64455,2.0/3.0);
            double t64661 = t64561*t64660*t64459*(4.0/9.0);
            double t64662 = t64661+t64657+t64659-t64432*t64652*t64488*(8.0/3.0);
            double t64663 = t64579*t64579;
            double t64664 = t64570-t64655;
            double t64665 = t64460*t64452*t64463*t64438*t64492;
            double t64666 = Aa*t64438*t64457*t64475*t64485*t64656*t64487*2.0;
            double t64667 = Aa*t64438*t64492*t64475*t64485*t64494*t64487*2.0;
            double t64668 = c0f*t64533*t64535*2.0;
            double t64670 = c0p*t64520*t64529*2.0;
            double t64669 = -t64670+t64668;
            double t64671 = c0f*t64616*t64618*2.0;
            double t64673 = c0p*t64606*t64615*2.0;
            double t64672 = t64671-t64673;
            double t64674 = gamma_aa[index]*gcab*t64621*(8.0/3.0);
            double t64675 = gamma_aa[index]*t64621*t64536*t64537*(8.0/3.0);
            double t64676 = t64674+t64675;
            double t64677 = gamma_bb[index]*gcab*t64539*(8.0/3.0);
            double t64678 = gamma_bb[index]*t64536*t64537*t64539*(8.0/3.0);
            double t64679 = t64677+t64678;
            double t64680 = gamma_aa[index]*gcab*t64621*(1.6E1/3.0);
            double t64681 = gamma_aa[index]*gcab*t64621*t64536*t64538*1.6E1;
            double t64682 = gamma_aa[index]*t64621*t64544*t64537*t64538*(1.6E1/3.0);
            double t64683 = gamma_aa[index]*t64621*t64536*t64537*1.6E1;
            double t64684 = t64680+t64681+t64682+t64683;
            double t64685 = gamma_bb[index]*gcab*t64539*(1.6E1/3.0);
            double t64686 = gamma_bb[index]*gcab*t64536*t64538*t64539*1.6E1;
            double t64687 = gamma_bb[index]*t64544*t64537*t64538*t64539*(1.6E1/3.0);
            double t64688 = gamma_bb[index]*t64536*t64537*t64539*1.6E1;
            double t64689 = t64685+t64686+t64687+t64688;
            double t64690 = gamma_aa[index]*gcab*t64621*4.0;
            double t64691 = gamma_aa[index]*gcab*t64621*t64536*t64538*4.0;
            double t64692 = gamma_aa[index]*t64621*t64536*t64537*8.0;
            double t64693 = t64690+t64691+t64692;
            double t64694 = gamma_bb[index]*gcab*t64539*4.0;
            double t64695 = gamma_bb[index]*gcab*t64536*t64538*t64539*4.0;
            double t64696 = gamma_bb[index]*t64536*t64537*t64539*8.0;
            double t64697 = t64694+t64695+t64696;
            v_rho_a_rho_b_[index] = (t64620+t64462+t64619+rho_a[index]*(-t64528+t64532*t64438*(t64528-(1/(t64504* \
               t64504)*t64535*(b2f*c*t64505*(1.0/3.0)+b4f*t64420*t64511*(2.0/3.0)+b1f*c*t64512*t64505*(1.0/6.0)+b3f* \
               c*t64505*t64497*(1.0/2.0)))/t64515+a1f*c*c0f*t64505*t64533*(2.0/3.0)-a1p*c*c0p*t64505*t64529*(2.0/ \
               3.0))+a1p*c*c0p*t64505*t64529*(2.0/3.0))+t64413*(t64560+t64580+t64473+t64665+t64667-a1p*c*c0p*t64451* \
               t64425*(2.0/3.0)-t64630*t64460*t64463*t64438*t64457-t64452*t64463*t64438*t64474*t64457*4.0-Aa*t64438* \
               t64457*t64475*t64485*t64487*(t64570-t64432*t64433*t64460*4.0)*2.0-Aa*a1a*c*t64425*t64438*t64457*t64475* \
               t64485*t64494*(2.0/3.0))-c0p*t64520*t64529*2.0-t64532*t64438*t64669)*(ccab1*gamma_bb[index]*gcab*t64623* \
               t64539*(4.0/3.0)-ccab4*t64624*t64544*t64545*t64689-ccab2*t64625*t64536*t64538*t64679-ccab1*gamma_bb[index]* \
               t64536*t64537*t64627*t64539*(4.0/3.0)+ccab2*gamma_bb[index]*t64536*t64537*t64628*t64539*(8.0/3.0)+ \
               ccab3*gamma_bb[index]*gcab*t64536*t64538*t64539*t64629*4.0+ccab4*gamma_bb[index]*t64544*t64626*t64537* \
               t64538*t64539*(1.6E1/3.0)-ccab3*gcab*t64622*t64536*t64537*t64538*t64697)-(ccab0+ccab1*gcab*t64623* \
               t64537+ccab4*t64544*t64545*t64626+ccab2*t64536*t64538*t64628+ccab3*gcab*t64536*t64537*t64538*t64629) \
               *(t64665-t64666+t64667-t64413*(t64650+t64653+t64645-t64431*t64466*t64637*t64646*2.0-a1p*c*c0p*t64451* \
               t64632*(8.0/9.0)-t64460*t64463*t64438*t64457*(t64650+t64653+t64645-t64431*t64466*t64637*t64646*2.0+ \
               t64450*1/(t64444*t64444*t64444)*t64562*t64647*2.0-t64450*t64562*t64563*(b2f*c*t64632*(4.0/9.0)+b4f* \
               t64420*t64633*(1.0E1/9.0)+b1f*c*t64632*t64465*(2.0/9.0)+b3f*c*t64416*t64632*(2.0/3.0)-b1f*t64420*t64633* \
               t64638*(1.0/3.6E1)+b3f*t64420*t64633*t64465*(1.0/1.2E1))-t64450*1/(t64444*t64444*t64444*t64444)*1/ \
               (t64447*t64447)*t64439*t64647*(1.0/2.0)+a1f*c*c0f*t64632*t64448*(8.0/9.0)-a1p*c*c0p*t64451*t64632* \
               (8.0/9.0)-a1f*c*t64425*t64562*t64563*t64568*(2.0/3.0))+t64433*t64460*t64452*t64438*t64457*1.2E1+t64460* \
               t64452*t64463*t64662*t64438-t64460*t64651*t64463*t64572*t64438-t64460*t64651*t64463*t64438*t64492+ \
               t64452*t64463*t64572*t64438*t64474*4.0+t64452*t64463*t64438*t64474*t64492*4.0-t64452*t64463*t64438* \
               t64654*t64457*2.0E1+t64651*t64463*t64438*t64474*t64457*8.0-t64432*t64433*t64460*t64452*t64572*t64438* \
               4.0+t64432*t64433*t64460*t64452*t64438*t64492*4.0+Aa*t64572*t64438*t64475*t64664*t64485*t64487*2.0+ \
               Aa*t64662*t64438*t64475*t64485*t64494*t64487*2.0+Aa*t64438*t64492*t64475*t64485*t64656*t64487*2.0+ \
               Aa*t64438*t64457*t64475*t64485*t64487*(t64433*t64460*1.2E1-t64463*t64654*2.0E1)*2.0-t64572*t64438* \
               t64573*t64475*t64574*t64494*t64487*t64579-t64438*t64492*t64573*t64475*t64574*t64494*t64487*t64579+ \
               t64438*t64573*t64457*t64475*t64574*t64664*t64487*t64579+t64438*t64573*t64457*t64475*t64574*t64656* \
               t64487*t64579-1/(t64481*t64481*t64481)*t64438*t64573*t64663*t64457*t64475*t64494*t64487*2.0+t64438* \
               t64573*t64457*t64475*t64574*t64494*t64487*(b2a*c*t64632*(4.0/9.0)+b4a*t64420*t64633*(1.0E1/9.0)+b1a* \
               c*t64632*t64465*(2.0/9.0)+b3a*c*t64416*t64632*(2.0/3.0)-b1a*t64420*t64633*t64638*(1.0/3.6E1)+b3a*t64420* \
               t64633*t64465*(1.0/1.2E1))+Aa*a1a*c*t64425*t64572*t64438*t64475*t64485*t64494*(2.0/3.0)+Aa*a1a*c*t64425* \
               t64438*t64492*t64475*t64485*t64494*(2.0/3.0)-Aa*a1a*c*t64425*t64438*t64457*t64475*t64664*t64485*(2.0/ \
               3.0)-Aa*a1a*c*t64425*t64438*t64457*t64475*t64485*t64656*(2.0/3.0)-Aa*a1a*c*t64632*t64438*t64457*t64475* \
               t64485*t64494*(8.0/9.0)+1/(t64481*t64481*t64481*t64481)*t64438*t64663*t64457*t64475*1/(t64484*t64484) \
               *t64476*t64494*t64487*(1.0/2.0)+a1a*c*t64425*t64438*t64573*t64457*t64475*t64574*t64494*t64579*(2.0/ \
               3.0))+t64431*t64472*t64466*t64467*2.0-a1p*c*c0p*t64451*t64425*(4.0/3.0)+t64460*t64452*t64463*t64572* \
               t64438+t64460*t64651*t64463*t64438*t64457*2.0-t64452*t64463*t64438*t64474*t64457*8.0+Aa*t64572*t64438* \
               t64475*t64485*t64494*t64487*2.0-Aa*t64438*t64457*t64475*t64664*t64485*t64487*2.0+t64438*t64573*t64457* \
               t64475*t64574*t64494*t64487*t64579*2.0-Aa*a1a*c*t64425*t64438*t64457*t64475*t64485*t64494*(4.0/3.0) \
               )-(rho_b[index]*(t64673+t64532*t64438*t64672)+rho_a[index]*(t64670+t64532*t64438*t64669)-t64413*(t64620+ \
               t64462+t64619))*(ccab4*t64624*t64544*t64545*(gamma_aa[index]*gamma_bb[index]*t64621*t64536*t64539* \
               (6.4E1/3.0)+gamma_aa[index]*gamma_bb[index]*t64621*t64544*t64538*t64539*(6.4E1/3.0)+gamma_aa[index]* \
               gamma_bb[index]*gcab*t64621*t64536*t64537*t64539*(1.28E2/3.0))-ccab4*1/(t64550*t64550*t64550)*t64544* \
               t64545*t64684*t64689*2.0-ccab2*t64536*1/(t64555*t64555*t64555)*t64538*t64676*t64679*2.0+ccab3*gcab* \
               t64622*t64536*t64537*t64538*(gamma_aa[index]*gamma_bb[index]*t64621*t64536*t64539*(3.2E1/3.0)+gamma_aa[index]* \
               gamma_bb[index]*gcab*t64621*t64536*t64537*t64539*(3.2E1/3.0))+ccab1*gamma_aa[index]*gamma_bb[index]* \
               t64621*t64536*t64627*t64539*(3.2E1/9.0)-ccab2*gamma_aa[index]*gamma_bb[index]*t64621*t64536*t64628* \
               t64539*(3.2E1/9.0)+ccab2*gamma_aa[index]*t64621*t64625*t64536*t64537*t64679*(8.0/3.0)+ccab2*gamma_bb[index]* \
               t64625*t64536*t64537*t64539*t64676*(8.0/3.0)-ccab3*gcab*t64536*t64537*t64538*t64693*1/(t64559*t64559* \
               t64559)*t64697*2.0+ccab2*gamma_aa[index]*gamma_bb[index]*t64621*t64544*t64625*t64538*t64539*(3.2E1/ \
               9.0)-ccab4*gamma_aa[index]*gamma_bb[index]*t64621*t64544*t64626*t64538*t64539*(6.4E1/3.0)+ccab3*gamma_aa[index]* \
               gcab*t64621*t64622*t64536*t64538*t64697*4.0+ccab3*gamma_bb[index]*gcab*t64622*t64536*t64538*t64539* \
               t64693*4.0+ccab4*gamma_aa[index]*t64621*t64624*t64544*t64537*t64538*t64689*(1.6E1/3.0)+ccab4*gamma_bb[index]* \
               t64624*t64544*t64537*t64538*t64539*t64684*(1.6E1/3.0)-ccab3*gamma_aa[index]*gamma_bb[index]*gcab*t64621* \
               t64536*t64537*t64539*t64629*(3.2E1/3.0)-ccab1*gamma_aa[index]*gamma_bb[index]*gcab*t64621*1/(t64552* \
               t64552*t64552)*t64536*t64537*t64539*(3.2E1/9.0))+(t64620+t64462+t64619-t64413*(t64631+t64560-t64580- \
               t64473+t64666+t64630*t64460*t64463*t64438*t64457-t64460*t64452*t64463*t64572*t64438+t64452*t64463* \
               t64438*t64474*t64457*4.0-Aa*t64572*t64438*t64475*t64485*t64494*t64487*2.0+Aa*a1a*c*t64425*t64438*t64457* \
               t64475*t64485*t64494*(2.0/3.0))+rho_b[index]*(-t64614+t64532*t64438*(t64614-(1/(t64590*t64590)*t64618* \
               (b2f*c*t64591*(1.0/3.0)+b4f*t64420*t64597*(2.0/3.0)+b1f*c*t64591*t64598*(1.0/6.0)+b3f*c*t64591*t64583* \
               (1.0/2.0)))/t64601+a1f*c*c0f*t64616*t64591*(2.0/3.0)-a1p*c*c0p*t64615*t64591*(2.0/3.0))+a1p*c*c0p* \
               t64615*t64591*(2.0/3.0))-c0p*t64606*t64615*2.0-t64532*t64438*t64672)*(ccab1*gamma_aa[index]*gcab*t64621* \
               t64623*(4.0/3.0)-ccab4*t64624*t64544*t64545*t64684-ccab2*t64625*t64536*t64538*t64676-ccab1*gamma_aa[index]* \
               t64621*t64536*t64537*t64627*(4.0/3.0)+ccab2*gamma_aa[index]*t64621*t64536*t64537*t64628*(8.0/3.0)+ \
               ccab3*gamma_aa[index]*gcab*t64621*t64536*t64538*t64629*4.0+ccab4*gamma_aa[index]*t64621*t64544*t64626* \
               t64537*t64538*(1.6E1/3.0)-ccab3*gcab*t64622*t64536*t64537*t64538*t64693);
        } else if (rho_a[index] > cutoff_) {
            v_rho_a_rho_b_[index] = 0.0;
        } else if (rho_b[index] > cutoff_) {
            v_rho_a_rho_b_[index] = 0.0;
        } else {
            v_rho_a_rho_b_[index] = 0.0;
        } 

        //V_rho_b_rho_b
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t64699 = rho_a[index]+rho_b[index];
            double t64700 = 1/pow(t64699,1.0/3.0);
            double t64701 = c*t64700;
            double t64702 = sqrt(t64701);
            double t64703 = b1p*t64702;
            double t64704 = pow(t64701,3.0/2.0);
            double t64705 = b3p*t64704;
            double t64706 = c*c;
            double t64707 = 1/pow(t64699,2.0/3.0);
            double t64708 = b4p*t64706*t64707;
            double t64709 = b2p*c*t64700;
            double t64710 = t64703+t64705+t64708+t64709;
            double t64711 = 1/pow(t64699,4.0/3.0);
            double t64712 = 1/c0p;
            double t64713 = 1/t64710;
            double t64714 = t64712*t64713*(1.0/2.0);
            double t64715 = t64714+1.0;
            double t64716 = a1p*c*t64700;
            double t64717 = t64716+1.0;
            double t64718 = rho_a[index]-rho_b[index];
            double t64719 = t64718*t64718;
            double t64720 = 1/t64699;
            double t64721 = t64720*t64718;
            double t64722 = two_13*2.0;
            double t64723 = t64722-2.0;
            double t64724 = 1/t64723;
            double t64725 = 1/c0f;
            double t64726 = b1f*t64702;
            double t64727 = b3f*t64704;
            double t64728 = b4f*t64706*t64707;
            double t64729 = b2f*c*t64700;
            double t64730 = t64726+t64727+t64728+t64729;
            double t64731 = 1/t64730;
            double t64732 = t64731*t64725*(1.0/2.0);
            double t64733 = t64732+1.0;
            double t64734 = log(t64733);
            double t64735 = a1f*c*t64700;
            double t64736 = t64735+1.0;
            double t64737 = log(t64715);
            double t64748 = c0f*t64734*t64736*2.0;
            double t64749 = c0p*t64717*t64737*2.0;
            double t64738 = t64748-t64749;
            double t64739 = t64721+1.0;
            double t64740 = pow(t64739,4.0/3.0);
            double t64741 = -t64721+1.0;
            double t64742 = pow(t64741,4.0/3.0);
            double t64743 = t64740+t64742-2.0;
            double t64744 = 1/(t64699*t64699);
            double t64745 = t64744*t64718;
            double t64746 = t64720+t64745;
            double t64747 = 1/(t64699*t64699*t64699*t64699);
            double t64750 = t64719*t64719;
            double t64751 = 1/pow(t64699,5.0/3.0);
            double t64752 = 1/sqrt(t64701);
            double t64753 = 1/t64715;
            double t64754 = 1/(t64710*t64710);
            double t64755 = b4p*t64706*t64751*(2.0/3.0);
            double t64756 = b2p*c*t64711*(1.0/3.0);
            double t64757 = b1p*c*t64711*t64752*(1.0/6.0);
            double t64758 = b3p*c*t64702*t64711*(1.0/2.0);
            double t64759 = t64755+t64756+t64757+t64758;
            double t64760 = 1/(t64699*t64699*t64699*t64699*t64699);
            double t64761 = 1/d2fz0;
            double t64762 = 1/Aa;
            double t64763 = b1a*t64702;
            double t64764 = b3a*t64704;
            double t64765 = b4a*t64706*t64707;
            double t64766 = b2a*c*t64700;
            double t64767 = t64763+t64764+t64765+t64766;
            double t64768 = 1/t64767;
            double t64769 = t64762*t64768*(1.0/2.0);
            double t64770 = t64769+1.0;
            double t64771 = log(t64770);
            double t64772 = a1a*c*t64700;
            double t64773 = t64772+1.0;
            double t64774 = pow(t64739,1.0/3.0);
            double t64775 = t64746*t64774*(4.0/3.0);
            double t64776 = pow(t64741,1.0/3.0);
            double t64852 = t64746*t64776*(4.0/3.0);
            double t64777 = -t64852+t64775;
            double t64778 = t64750*t64747;
            double t64779 = t64778-1.0;
            double t64780 = 1/pow(rho_b[index],1.0/3.0);
            double t64781 = c*t64780;
            double t64782 = sqrt(t64781);
            double t64783 = b1f*t64782;
            double t64784 = pow(t64781,3.0/2.0);
            double t64785 = b3f*t64784;
            double t64786 = 1/pow(rho_b[index],2.0/3.0);
            double t64787 = b4f*t64706*t64786;
            double t64788 = b2f*c*t64780;
            double t64789 = t64783+t64785+t64787+t64788;
            double t64790 = 1/pow(rho_b[index],4.0/3.0);
            double t64791 = b1p*t64782;
            double t64792 = b3p*t64784;
            double t64793 = b4p*t64706*t64786;
            double t64794 = b2p*c*t64780;
            double t64795 = t64791+t64792+t64793+t64794;
            double t64796 = 1/pow(rho_b[index],5.0/3.0);
            double t64797 = 1/sqrt(t64781);
            double t64798 = 1/t64789;
            double t64799 = t64725*t64798*(1.0/2.0);
            double t64800 = t64799+1.0;
            double t64801 = 1/t64795;
            double t64802 = t64801*t64712*(1.0/2.0);
            double t64803 = t64802+1.0;
            double t64804 = a1p*c*t64780;
            double t64805 = t64804+1.0;
            double t64806 = 1/t64803;
            double t64807 = 1/(t64795*t64795);
            double t64808 = b4p*t64706*t64796*(2.0/3.0);
            double t64809 = b2p*c*t64790*(1.0/3.0);
            double t64810 = b1p*c*t64790*t64797*(1.0/6.0);
            double t64811 = b3p*c*t64790*t64782*(1.0/2.0);
            double t64812 = t64810+t64811+t64808+t64809;
            double t64813 = t64812*t64805*t64806*t64807;
            double t64814 = log(t64803);
            double t64815 = pow(2.0,1.0/3.0);
            double t64816 = t64815*2.0;
            double t64817 = t64816-2.0;
            double t64818 = log(t64800);
            double t64819 = a1f*c*t64780;
            double t64820 = t64819+1.0;
            double t64821 = gcab*gcab;
            double t64825 = 1/pow(rho_a[index],8.0/3.0);
            double t64826 = gamma_aa[index]*t64825*(1.0/2.0);
            double t64827 = 1/pow(rho_b[index],8.0/3.0);
            double t64828 = gamma_bb[index]*t64827*(1.0/2.0);
            double t64822 = t64826+t64828;
            double t64823 = t64822*t64822;
            double t64824 = 1/pow(rho_b[index],1.1E1/3.0);
            double t64829 = t64821*t64821;
            double t64830 = t64823*t64823;
            double t64831 = t64821*t64823*6.0;
            double t64832 = gcab*t64821*t64822*t64823*4.0;
            double t64833 = t64830*t64829;
            double t64834 = gcab*t64822*4.0;
            double t64835 = t64831+t64832+t64833+t64834+1.0;
            double t64836 = gcab*t64822;
            double t64837 = t64836+1.0;
            double t64838 = t64821*t64823;
            double t64839 = gcab*t64822*2.0;
            double t64840 = t64838+t64839+1.0;
            double t64841 = t64821*t64823*3.0;
            double t64842 = gcab*t64821*t64822*t64823;
            double t64843 = gcab*t64822*3.0;
            double t64844 = t64841+t64842+t64843+1.0;
            double t64845 = a1p*c*c0p*t64711*t64737*(2.0/3.0);
            double t64846 = 1/t64840;
            double t64847 = 1/t64844;
            double t64848 = 1/t64837;
            double t64849 = 1/t64835;
            double t64850 = 1/pow(t64699,7.0/3.0);
            double t64851 = 1/pow(t64699,8.0/3.0);
            double t64853 = 1/t64733;
            double t64854 = 1/(t64730*t64730);
            double t64855 = b4f*t64706*t64751*(2.0/3.0);
            double t64856 = b2f*c*t64711*(1.0/3.0);
            double t64857 = b1f*c*t64711*t64752*(1.0/6.0);
            double t64858 = b3f*c*t64702*t64711*(1.0/2.0);
            double t64859 = t64855+t64856+t64857+t64858;
            double t64860 = t64736*t64853*t64854*t64859;
            double t64862 = t64717*t64753*t64754*t64759;
            double t64863 = a1f*c*c0f*t64711*t64734*(2.0/3.0);
            double t64861 = t64860-t64862+t64845-t64863;
            double t64864 = t64759*t64759;
            double t64865 = 1/pow(t64701,3.0/2.0);
            double t64866 = b4p*t64706*t64851*(1.0E1/9.0);
            double t64867 = b2p*c*t64850*(4.0/9.0);
            double t64868 = b1p*c*t64850*t64752*(2.0/9.0);
            double t64869 = b3p*c*t64702*t64850*(2.0/3.0);
            double t64870 = b3p*t64706*t64752*t64851*(1.0/1.2E1);
            double t64871 = t64870+t64866+t64867+t64868+t64869-b1p*t64706*t64851*t64865*(1.0/3.6E1);
            double t64872 = 1/(t64710*t64710*t64710);
            double t64873 = t64717*t64753*t64872*t64864*2.0;
            double t64874 = t64859*t64859;
            double t64875 = 1/(t64715*t64715);
            double t64876 = 1/(t64710*t64710*t64710*t64710);
            double t64877 = t64744*2.0;
            double t64878 = 1/(t64699*t64699*t64699);
            double t64879 = t64718*t64878*2.0;
            double t64880 = t64877+t64879;
            double t64881 = t64746*t64746;
            double t64882 = a1p*c*c0p*t64850*t64737*(8.0/9.0);
            double t64883 = 1/(t64699*t64699*t64699*t64699*t64699*t64699);
            double t64884 = t64718*t64719*t64747*4.0;
            double t64885 = t64750*t64760*4.0;
            double t64886 = t64884+t64885;
            double t64887 = t64880*t64774*(4.0/3.0);
            double t64888 = 1/pow(t64739,2.0/3.0);
            double t64889 = t64881*t64888*(4.0/9.0);
            double t64890 = 1/pow(t64741,2.0/3.0);
            double t64891 = t64881*t64890*(4.0/9.0);
            double t64892 = t64891+t64887+t64889-t64880*t64776*(4.0/3.0);
            double t64893 = 1/t64770;
            double t64894 = 1/(t64767*t64767);
            double t64895 = b4a*t64706*t64751*(2.0/3.0);
            double t64896 = b2a*c*t64711*(1.0/3.0);
            double t64897 = b1a*c*t64711*t64752*(1.0/6.0);
            double t64898 = b3a*c*t64702*t64711*(1.0/2.0);
            double t64899 = t64895+t64896+t64897+t64898;
            double t64900 = t64899*t64899;
            double t64901 = 1/t64800;
            double t64902 = b4f*t64706*t64796*(2.0/3.0);
            double t64903 = b2f*c*t64790*(1.0/3.0);
            double t64904 = b1f*c*t64790*t64797*(1.0/6.0);
            double t64905 = b3f*c*t64790*t64782*(1.0/2.0);
            double t64906 = t64902+t64903+t64904+t64905;
            double t64907 = 1/(t64789*t64789);
            double t64908 = 1/pow(rho_b[index],7.0/3.0);
            double t64909 = 1/pow(t64781,3.0/2.0);
            double t64910 = t64906*t64906;
            double t64911 = t64812*t64812;
            double t64912 = 1/(t64795*t64795*t64795);
            double t64913 = t64911*t64912*t64805*t64806*2.0;
            double t64914 = b4p*t64706*t64827*(1.0E1/9.0);
            double t64915 = b2p*c*t64908*(4.0/9.0);
            double t64916 = b3p*t64706*t64827*t64797*(1.0/1.2E1);
            double t64917 = b1p*c*t64908*t64797*(2.0/9.0);
            double t64918 = b3p*c*t64782*t64908*(2.0/3.0);
            double t65071 = b1p*t64706*t64827*t64909*(1.0/3.6E1);
            double t64919 = t64914+t64915+t64916+t64917+t64918-t65071;
            double t64920 = 1/(t64803*t64803);
            double t64921 = 1/(t64795*t64795*t64795*t64795);
            double t64922 = a1p*c*c0p*t64814*t64908*(8.0/9.0);
            double t64923 = a1f*c*c0f*t64790*t64818*(2.0/3.0);
            double t64924 = a1p*c*c0p*t64814*t64790*(2.0/3.0);
            double t64996 = t64820*t64901*t64906*t64907;
            double t64925 = t64813+t64923-t64924-t64996;
            double t64926 = gamma_bb[index]*gamma_bb[index];
            double t64927 = gcaa*gcaa;
            double t64928 = t64926*t64926;
            double t64929 = t64927*t64927;
            double t64930 = 1/pow(rho_b[index],3.2E1/3.0);
            double t64931 = 1/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
               rho_b[index]*rho_b[index]);
            double t64932 = 1/pow(rho_b[index],1.6E1/3.0);
            double t64933 = 1/pow(rho_a[index],1.0/3.0);
            double t64934 = c*t64933;
            double t64935 = sqrt(t64934);
            double t64936 = pow(t64934,3.0/2.0);
            double t64937 = 1/pow(rho_a[index],2.0/3.0);
            double t64938 = b1p*t64935;
            double t64939 = b3p*t64936;
            double t64940 = b4p*t64706*t64937;
            double t64941 = b2p*c*t64933;
            double t64942 = t64940+t64941+t64938+t64939;
            double t64943 = 1/t64942;
            double t64944 = t64712*t64943*(1.0/2.0);
            double t64945 = t64944+1.0;
            double t64946 = log(t64945);
            double t64947 = a1p*c*t64933;
            double t64948 = t64947+1.0;
            double t64949 = c0p*t64946*t64948*2.0;
            double t64950 = c0f*t64820*t64818*2.0;
            double t64952 = c0p*t64805*t64814*2.0;
            double t64951 = t64950-t64952;
            double t64953 = t64750*t64724*t64743*t64738*t64747;
            double t64954 = Aa*t64724*t64743*t64761*t64771*t64773*t64779*2.0;
            double t64955 = gamma_bb[index]*gcab*t64824*(1.6E1/3.0);
            double t64956 = gamma_bb[index]*gcab*t64821*t64823*t64824*1.6E1;
            double t64957 = gamma_bb[index]*t64822*t64823*t64824*t64829*(1.6E1/3.0);
            double t64958 = gamma_bb[index]*t64821*t64822*t64824*1.6E1;
            double t64959 = t64955+t64956+t64957+t64958;
            double t64960 = 1/(t64837*t64837);
            double t64961 = 1/pow(rho_b[index],2.2E1/3.0);
            double t64962 = gamma_bb[index]*gcab*t64824*(8.0/3.0);
            double t64963 = gamma_bb[index]*t64821*t64822*t64824*(8.0/3.0);
            double t64964 = t64962+t64963;
            double t64965 = 1/(t64844*t64844);
            double t64966 = 1/pow(rho_b[index],1.4E1/3.0);
            double t64967 = 1/(t64835*t64835);
            double t64968 = 1/(t64840*t64840);
            double t64969 = gamma_bb[index]*gcab*t64824*4.0;
            double t64970 = gamma_bb[index]*gcab*t64821*t64823*t64824*4.0;
            double t64971 = gamma_bb[index]*t64821*t64822*t64824*8.0;
            double t64972 = t64970+t64971+t64969;
            double t64973 = t64724*t64951*t64817;
            double t64974 = t64952+t64973;
            double t64975 = gamma_bb[index]*gcaa*t64827*4.0;
            double t64976 = gamma_bb[index]*gcaa*t64931*t64926*t64927*4.0;
            double t64977 = t64932*t64926*t64927*6.0;
            double t64978 = t64930*t64928*t64929;
            double t64979 = t64975+t64976+t64977+t64978+1.0;
            double t64980 = 1/t64979;
            double t64981 = gamma_bb[index]*gcaa*t64827;
            double t64982 = t64981+1.0;
            double t64983 = 1/t64982;
            double t64984 = gamma_bb[index]*gcaa*t64827*3.0;
            double t64985 = gamma_bb[index]*gcaa*t64931*t64926*t64927;
            double t64986 = t64932*t64926*t64927*3.0;
            double t64987 = t64984+t64985+t64986+1.0;
            double t64988 = 1/t64987;
            double t64989 = gamma_bb[index]*gcaa*t64827*2.0;
            double t64990 = t64932*t64926*t64927;
            double t64991 = t64990+t64989+1.0;
            double t64992 = 1/t64991;
            double t64993 = 1/pow(rho_b[index],1.9E1/3.0);
            double t64994 = 1/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
               rho_b[index]*rho_b[index]*rho_b[index]);
            double t64995 = 1/pow(rho_b[index],3.5E1/3.0);
            double t64997 = t64724*t64817*t64925;
            double t64998 = ccaa4*t64980*t64928*t64929*t64995*(3.2E1/3.0);
            double t64999 = ccaa1*gamma_bb[index]*gcaa*t64824*t64983*(8.0/3.0);
            double t65000 = ccaa3*gamma_bb[index]*gcaa*t64926*t64927*t64994*t64988*8.0;
            double t65001 = ccaa2*t64926*t64927*t64992*t64993*(1.6E1/3.0);
            double t65002 = 1/(t64982*t64982);
            double t65003 = gamma_bb[index]*gcaa*t64824*8.0;
            double t65004 = gamma_bb[index]*gcaa*t64926*t64927*t64994*8.0;
            double t65005 = t64926*t64927*t64993*1.6E1;
            double t65006 = t65003+t65004+t65005;
            double t65007 = 1/(t64987*t64987);
            double t65008 = gamma_bb[index]*gcaa*t64824*(3.2E1/3.0);
            double t65009 = gamma_bb[index]*gcaa*t64926*t64927*t64994*3.2E1;
            double t65010 = t64926*t64927*t64993*3.2E1;
            double t65011 = t64928*t64929*t64995*(3.2E1/3.0);
            double t65012 = t65010+t65011+t65008+t65009;
            double t65013 = 1/(t64979*t64979);
            double t65014 = gamma_bb[index]*gcaa*t64824*(1.6E1/3.0);
            double t65015 = t64926*t64927*t64993*(1.6E1/3.0);
            double t65016 = t65014+t65015;
            double t65017 = 1/(t64991*t64991);
            double t65018 = t64998+t64999+t65000+t65001-ccaa1*t64926*t64927*t64993*t65002*(8.0/3.0)-ccaa4*t64930* \
               t64928*t64929*t65012*t65013-ccaa2*t64932*t64926*t64927*t65016*t65017-ccaa3*gamma_bb[index]*gcaa*t64931* \
               t64926*t64927*t65006*t65007;
            double t65019 = -t64813+t64924+t64997;
            double t65020 = gx*gx;
            double t65021 = t65020*t65020;
            double t65022 = 1/pow(rho_b[index],1.0E1);
            double t65023 = gamma_bb[index]*gx*t64827;
            double t65024 = t65023+1.0;
            double t65044 = gamma_bb[index]*gx*t64824*(3.2E1/3.0);
            double t65045 = gamma_bb[index]*gx*t64926*t64994*t65020*3.2E1;
            double t65046 = t64926*t64993*t65020*3.2E1;
            double t65047 = t64928*t64995*t65021*(3.2E1/3.0);
            double t65025 = t65044+t65045+t65046+t65047;
            double t65026 = gamma_bb[index]*gx*t64827*4.0;
            double t65027 = gamma_bb[index]*gx*t64931*t64926*t65020*4.0;
            double t65028 = t64932*t64926*t65020*6.0;
            double t65029 = t64930*t64928*t65021;
            double t65030 = t65026+t65027+t65028+t65029+1.0;
            double t65050 = gamma_bb[index]*gx*t64824*(1.6E1/3.0);
            double t65051 = t64926*t64993*t65020*(1.6E1/3.0);
            double t65031 = t65050+t65051;
            double t65032 = gamma_bb[index]*gx*t64827*2.0;
            double t65033 = t64932*t64926*t65020;
            double t65034 = t65032+t65033+1.0;
            double t65035 = gamma_bb[index]*gx*t64827*3.0;
            double t65036 = gamma_bb[index]*gx*t64931*t64926*t65020;
            double t65037 = t64932*t64926*t65020*3.0;
            double t65038 = t65035+t65036+t65037+1.0;
            double t65039 = 1/(t65038*t65038);
            double t65040 = gamma_bb[index]*gx*t64824*8.0;
            double t65041 = gamma_bb[index]*gx*t64926*t64994*t65020*8.0;
            double t65042 = t64926*t64993*t65020*1.6E1;
            double t65043 = t65040+t65041+t65042;
            double t65048 = 1/pow(rho_b[index],3.8E1/3.0);
            double t65049 = 1/(t65030*t65030);
            double t65052 = 1/(t65034*t65034);
            double t65053 = 1/t65030;
            double t65054 = 1/t65024;
            double t65055 = 1/t65038;
            double t65056 = 1/t65034;
            double t65057 = 1/(t65024*t65024);
            double t65058 = ccaa4*t64930*t64980*t64928*t64929;
            double t65059 = ccaa1*gamma_bb[index]*gcaa*t64827*t64983;
            double t65060 = ccaa3*gamma_bb[index]*gcaa*t64931*t64926*t64927*t64988;
            double t65061 = ccaa2*t64932*t64926*t64927*t64992;
            double t65062 = ccaa0+t65060+t65061+t65058+t65059;
            double t65063 = 1/(t64789*t64789*t64789);
            double t65064 = b4f*t64706*t64827*(1.0E1/9.0);
            double t65065 = b2f*c*t64908*(4.0/9.0);
            double t65066 = b3f*t64706*t64827*t64797*(1.0/1.2E1);
            double t65067 = b1f*c*t64908*t64797*(2.0/9.0);
            double t65068 = b3f*c*t64782*t64908*(2.0/3.0);
            double t65069 = t65064+t65065+t65066+t65067+t65068-b1f*t64706*t64827*t64909*(1.0/3.6E1);
            double t65070 = t64820*t64901*t64907*t65069;
            double t65072 = t64805*t64806*t64807*t64919;
            double t65073 = 1/(t64800*t64800);
            double t65074 = 1/(t64789*t64789*t64789*t64789);
            double t65075 = t64820*t64910*t64725*t65073*t65074*(1.0/2.0);
            double t65076 = t64712*t64911*t64920*t64921*t64805*(1.0/2.0);
            double t65077 = a1f*c*t64901*t64906*t64790*t64907*(2.0/3.0);
            double t65078 = a1p*c*t64812*t64806*t64807*t64790*(2.0/3.0);
            v_rho_b_rho_b_[index] = (ccab0+ccab1*gcab*t64822*t64848+ccab2*t64821*t64823*t64846+ccab4*t64830*t64829* \
               t64849+ccab3*gcab*t64821*t64822*t64823*t64847)*(-rho_b[index]*(-t64913-t64922+t65072+t65076+t65078+ \
               t64724*t64817*(t64913+t64922+t65070+t65075+t65077-t64805*t64806*t64807*t64919-t64820*t64901*t64910* \
               t65063*2.0-a1f*c*c0f*t64818*t64908*(8.0/9.0)-t64712*t64911*t64920*t64921*t64805*(1.0/2.0)-a1p*c*t64812* \
               t64806*t64807*t64790*(2.0/3.0)))-t64699*(t64873+t64882-t64717*t64753*t64754*t64871-t64750*t64724*t64743* \
               t64747*(t64873+t64882-t64717*t64753*t64754*t64871-1/(t64730*t64730*t64730)*t64736*t64853*t64874*2.0+ \
               t64736*t64853*t64854*(b2f*c*t64850*(4.0/9.0)+b4f*t64706*t64851*(1.0E1/9.0)+b1f*c*t64850*t64752*(2.0/ \
               9.0)+b3f*c*t64702*t64850*(2.0/3.0)-b1f*t64706*t64851*t64865*(1.0/3.6E1)+b3f*t64706*t64752*t64851*(1.0/ \
               1.2E1))+1/(t64730*t64730*t64730*t64730)*1/(t64733*t64733)*t64725*t64736*t64874*(1.0/2.0)-a1f*c*c0f* \
               t64850*t64734*(8.0/9.0)-t64712*t64717*t64864*t64875*t64876*(1.0/2.0)+a1f*c*t64711*t64853*t64854*t64859* \
               (2.0/3.0)-a1p*c*t64711*t64753*t64754*t64759*(2.0/3.0))-t64750*t64724*t64760*t64743*t64861*8.0+t64750* \
               t64724*t64743*t64738*t64883*2.0E1+t64750*t64724*t64760*t64738*t64777*8.0-t64750*t64724*t64861*t64747* \
               t64777*2.0+t64750*t64724*t64738*t64747*t64892+t64724*t64743*t64719*t64738*t64747*1.2E1-t64712*t64717* \
               t64864*t64875*t64876*(1.0/2.0)+t64724*t64760*t64743*t64718*t64719*t64738*3.2E1-t64724*t64743*t64861* \
               t64718*t64719*t64747*8.0+t64724*t64718*t64719*t64738*t64747*t64777*8.0-a1p*c*t64711*t64753*t64754* \
               t64759*(2.0/3.0)+Aa*t64724*t64761*t64771*t64773*t64892*t64779*2.0+Aa*t64724*t64761*t64771*t64773*t64777* \
               t64886*4.0+Aa*t64724*t64743*t64761*t64771*t64773*(t64750*t64883*2.0E1+t64719*t64747*1.2E1+t64760*t64718* \
               t64719*3.2E1)*2.0-t64724*t64743*t64761*t64773*t64893*t64894*t64886*t64899*2.0-t64724*t64761*t64773* \
               t64893*t64777*t64894*t64779*t64899*2.0+t64900*t64724*t64743*t64761*t64773*1/(t64767*t64767*t64767) \
               *t64893*t64779*2.0-t64724*t64743*t64761*t64773*t64893*t64894*t64779*(b2a*c*t64850*(4.0/9.0)+b4a*t64706* \
               t64851*(1.0E1/9.0)+b1a*c*t64850*t64752*(2.0/9.0)+b3a*c*t64702*t64850*(2.0/3.0)-b1a*t64706*t64851*t64865* \
               (1.0/3.6E1)+b3a*t64706*t64752*t64851*(1.0/1.2E1))+Aa*a1a*c*t64711*t64724*t64743*t64761*t64771*t64886* \
               (4.0/3.0)+Aa*a1a*c*t64724*t64850*t64743*t64761*t64771*t64779*(8.0/9.0)+Aa*a1a*c*t64711*t64724*t64761* \
               t64771*t64777*t64779*(4.0/3.0)-t64900*t64724*t64743*t64761*1/(t64770*t64770)*t64762*t64773*1/(t64767* \
               t64767*t64767*t64767)*t64779*(1.0/2.0)-a1a*c*t64711*t64724*t64743*t64761*t64893*t64894*t64779*t64899* \
               (2.0/3.0))-t64724*t64817*t64925*2.0+t64812*t64805*t64806*t64807*2.0-t64717*t64753*t64754*t64759*2.0+ \
               a1p*c*c0p*t64711*t64737*(4.0/3.0)-a1p*c*c0p*t64814*t64790*(4.0/3.0)+t64750*t64724*t64760*t64743*t64738* \
               8.0-t64750*t64724*t64743*t64861*t64747*2.0+t64750*t64724*t64738*t64747*t64777*2.0+t64724*t64743*t64718* \
               t64719*t64738*t64747*8.0+Aa*t64724*t64743*t64761*t64771*t64773*t64886*4.0+Aa*t64724*t64761*t64771* \
               t64773*t64777*t64779*4.0-t64724*t64743*t64761*t64773*t64893*t64894*t64779*t64899*2.0+Aa*a1a*c*t64711* \
               t64724*t64743*t64761*t64771*t64779*(4.0/3.0))+(rho_b[index]*t64974+rho_a[index]*(t64949-t64724*t64817* \
               (t64949-c0f*log((t64725*(1.0/2.0))/(b1f*t64935+b3f*t64936+b2f*c*t64933+b4f*t64706*t64937)+1.0)*(a1f* \
               c*t64933+1.0)*2.0))-t64699*(t64953+t64954+t64749))*(-ccab2*t64821*t64823*t64968*(gamma_bb[index]*gcab* \
               t64966*(8.8E1/9.0)+t64821*t64961*t64926*(3.2E1/9.0)+gamma_bb[index]*t64821*t64822*t64966*(8.8E1/9.0) \
               )+ccab2*t64821*1/(t64840*t64840*t64840)*t64823*(t64964*t64964)*2.0+ccab4*t64830*1/(t64835*t64835*t64835) \
               *t64829*(t64959*t64959)*2.0+ccab1*gamma_bb[index]*gcab*t64848*t64966*(4.4E1/9.0)-ccab1*t64821*t64960* \
               t64961*t64926*(3.2E1/9.0)+ccab2*t64821*t64961*t64926*t64846*(3.2E1/9.0)-ccab4*t64830*t64829*t64967* \
               (gamma_bb[index]*gcab*t64966*(1.76E2/9.0)+t64821*t64961*t64926*(6.4E1/3.0)+gamma_bb[index]*t64821* \
               t64822*t64966*(1.76E2/3.0)+t64823*t64961*t64926*t64829*(6.4E1/3.0)+gamma_bb[index]*gcab*t64821*t64823* \
               t64966*(1.76E2/3.0)+gamma_bb[index]*t64822*t64823*t64829*t64966*(1.76E2/9.0)+gcab*t64821*t64822*t64961* \
               t64926*(1.28E2/3.0))+ccab4*t64823*t64961*t64926*t64829*t64849*(6.4E1/3.0)-ccab1*gamma_bb[index]*t64821* \
               t64822*t64960*t64966*(4.4E1/9.0)+ccab2*gamma_bb[index]*t64821*t64822*t64846*t64966*(8.8E1/9.0)+ccab3* \
               gcab*t64821*t64822*t64823*1/(t64844*t64844*t64844)*(t64972*t64972)*2.0+ccab3*gamma_bb[index]*gcab* \
               t64821*t64823*t64847*t64966*(4.4E1/3.0)-ccab2*gamma_bb[index]*t64821*t64822*t64824*t64964*t64968*(1.6E1/ \
               3.0)+ccab4*gamma_bb[index]*t64822*t64823*t64829*t64849*t64966*(1.76E2/9.0)+ccab3*gcab*t64821*t64822* \
               t64961*t64926*t64847*(3.2E1/3.0)+ccab1*gcab*t64821*t64822*t64961*t64926*1/(t64837*t64837*t64837)*(3.2E1/ \
               9.0)-ccab3*gcab*t64821*t64822*t64823*t64965*(gamma_bb[index]*gcab*t64966*(4.4E1/3.0)+t64821*t64961* \
               t64926*(3.2E1/3.0)+gamma_bb[index]*t64821*t64822*t64966*(8.8E1/3.0)+gamma_bb[index]*gcab*t64821*t64823* \
               t64966*(4.4E1/3.0)+gcab*t64821*t64822*t64961*t64926*(3.2E1/3.0))-ccab3*gamma_bb[index]*gcab*t64821* \
               t64823*t64824*t64972*t64965*8.0-ccab4*gamma_bb[index]*t64822*t64823*t64824*t64829*t64967*t64959*(3.2E1/ \
               3.0))+(t64953+t64954+t64749+rho_b[index]*(-t64813+t64924+t64724*t64817*(t64813+t64923-t64820*t64901* \
               t64906*t64907-a1p*c*c0p*t64814*t64790*(2.0/3.0)))-t64699*(t64845-t64717*t64753*t64754*t64759+t64750* \
               t64724*t64760*t64743*t64738*4.0-t64750*t64724*t64743*t64861*t64747+t64750*t64724*t64738*t64747*t64777+ \
               t64724*t64743*t64718*t64719*t64738*t64747*4.0+Aa*t64724*t64743*t64761*t64771*t64773*t64886*2.0+Aa* \
               t64724*t64761*t64771*t64773*t64777*t64779*2.0-t64724*t64743*t64761*t64773*t64893*t64894*t64779*t64899+ \
               Aa*a1a*c*t64711*t64724*t64743*t64761*t64771*t64779*(2.0/3.0))-c0p*t64805*t64814*2.0-t64724*t64951* \
               t64817)*(ccab1*gamma_bb[index]*gcab*t64824*t64848*(4.0/3.0)-ccab2*t64821*t64823*t64964*t64968-ccab4* \
               t64830*t64829*t64967*t64959-ccab1*gamma_bb[index]*t64821*t64822*t64824*t64960*(4.0/3.0)+ccab2*gamma_bb[index]* \
               t64821*t64822*t64824*t64846*(8.0/3.0)+ccab3*gamma_bb[index]*gcab*t64821*t64823*t64824*t64847*4.0+ccab4* \
               gamma_bb[index]*t64822*t64823*t64824*t64829*t64849*(1.6E1/3.0)-ccab3*gcab*t64821*t64822*t64823*t64972* \
               t64965)*2.0+t64974*t65018*2.0+t65062*t65019*2.0-c0*pow(rho_b[index],1.0/3.0)*(cx1*gamma_bb[index]* \
               gx*t64824*t65054*(8.0/3.0)-cx1*t64926*t64993*t65020*t65057*(8.0/3.0)+cx2*t64926*t64993*t65020*t65056* \
               (1.6E1/3.0)+cx4*t64928*t64995*t65021*t65053*(3.2E1/3.0)-cx2*t64932*t64926*t65020*t65031*t65052-cx4* \
               t64930*t64928*t65021*t65025*t65049+cx3*gamma_bb[index]*gx*t64926*t64994*t65020*t65055*8.0-cx3*gamma_bb[index]* \
               gx*t64931*t64926*t65020*t65043*t65039)*(8.0/3.0)-rho_b[index]*t64974*(ccaa1*gamma_bb[index]*gcaa*t64983* \
               t64966*(8.8E1/9.0)+ccaa2*t64961*t64926*t64927*t64992*(3.04E2/9.0)-ccaa1*t64961*t64926*t64927*t65002* \
               2.4E1+ccaa4*t64980*t64928*t64929*t65048*(1.12E3/9.0)-ccaa2*t64926*t64927*t64993*t65016*t65017*(3.2E1/ \
               3.0)-ccaa4*t64928*t64929*t64995*t65012*t65013*(6.4E1/3.0)-ccaa2*t64932*t64926*t64927*t65017*(gamma_bb[index]* \
               gcaa*t64966*(1.76E2/9.0)+t64961*t64926*t64927*(3.04E2/9.0))-ccaa4*t64930*t64928*t64929*t65013*(gamma_bb[index]* \
               gcaa*t64966*(3.52E2/9.0)+t64961*t64926*t64927*(6.08E2/3.0)+t64928*t64929*t65048*(1.12E3/9.0)+gamma_bb[index]* \
               gcaa*t64926*t64927*t65022*2.88E2)+ccaa2*t64932*t64926*t64927*1/(t64991*t64991*t64991)*(t65016*t65016) \
               *2.0+ccaa4*t64930*t64928*t64929*1/(t64979*t64979*t64979)*(t65012*t65012)*2.0+ccaa3*gamma_bb[index]* \
               gcaa*t64926*t64927*t64988*t65022*7.2E1+ccaa1*gamma_bb[index]*gcaa*t64926*t64927*1/(t64982*t64982*t64982) \
               *t65022*(1.28E2/9.0)+ccaa3*gamma_bb[index]*gcaa*t64931*t64926*t64927*1/(t64987*t64987*t64987)*(t65006* \
               t65006)*2.0-ccaa3*gamma_bb[index]*gcaa*t64931*t64926*t64927*t65007*(gamma_bb[index]*gcaa*t64966*(8.8E1/ \
               3.0)+t64961*t64926*t64927*(3.04E2/3.0)+gamma_bb[index]*gcaa*t64926*t64927*t65022*7.2E1)-ccaa3*gamma_bb[index]* \
               gcaa*t64926*t64927*t64994*t65006*t65007*1.6E1)+rho_b[index]*t65062*(-t64913-t64922+t65072+t65076+t65078+ \
               t64724*t64817*(t64913+t64922+t65070-t65072+t65075-t65076+t65077-t65078-t64820*t64901*t64910*t65063* \
               2.0-a1f*c*c0f*t64818*t64908*(8.0/9.0)))-rho_b[index]*t65018*t65019*2.0+c0*pow(rho_b[index],4.0/3.0) \
               *(cx1*gamma_bb[index]*gx*t64966*t65054*(8.8E1/9.0)-cx1*t64961*t64926*t65020*t65057*2.4E1+cx2*t64961* \
               t64926*t65020*t65056*(3.04E2/9.0)+cx4*t64928*t65021*t65053*t65048*(1.12E3/9.0)-cx2*t64926*t64993*t65020* \
               t65031*t65052*(3.2E1/3.0)-cx4*t64928*t64995*t65021*t65025*t65049*(6.4E1/3.0)-cx2*t64932*t64926*t65020* \
               t65052*(gamma_bb[index]*gx*t64966*(1.76E2/9.0)+t64961*t64926*t65020*(3.04E2/9.0))-cx4*t64930*t64928* \
               t65021*t65049*(gamma_bb[index]*gx*t64966*(3.52E2/9.0)+t64961*t64926*t65020*(6.08E2/3.0)+t64928*t65021* \
               t65048*(1.12E3/9.0)+gamma_bb[index]*gx*t64926*t65020*t65022*2.88E2)+cx2*t64932*t64926*t65020*(t65031* \
               t65031)*1/(t65034*t65034*t65034)*2.0+cx4*t64930*t64928*t65021*1/(t65030*t65030*t65030)*(t65025*t65025) \
               *2.0+cx3*gamma_bb[index]*gx*t64926*t65020*t65022*t65055*7.2E1+cx1*gamma_bb[index]*gx*t64926*t65020* \
               t65022*1/(t65024*t65024*t65024)*(1.28E2/9.0)+cx3*gamma_bb[index]*gx*t64931*t64926*t65020*(t65043*t65043) \
               *1/(t65038*t65038*t65038)*2.0-cx3*gamma_bb[index]*gx*t64931*t64926*t65020*t65039*(gamma_bb[index]* \
               gx*t64966*(8.8E1/3.0)+t64961*t64926*t65020*(3.04E2/3.0)+gamma_bb[index]*gx*t64926*t65020*t65022*7.2E1) \
               -cx3*gamma_bb[index]*gx*t64926*t64994*t65020*t65043*t65039*1.6E1)+c0*t64786*(cx0+cx1*gamma_bb[index]* \
               gx*t64827*t65054+cx2*t64932*t64926*t65020*t65056+cx4*t64930*t64928*t65021*t65053+cx3*gamma_bb[index]* \
               gx*t64931*t64926*t65020*t65055)*(4.0/9.0);
        } else if (rho_a[index] > cutoff_) {
            v_rho_b_rho_b_[index] = 0.0;
        } else if (rho_b[index] > cutoff_) {
            double t66845 = 1/pow(rho_b[index],1.0/3.0);
            double t66846 = c*t66845;
            double t66847 = sqrt(t66846);
            double t66848 = b1f*t66847;
            double t66849 = pow(t66846,3.0/2.0);
            double t66850 = b3f*t66849;
            double t66851 = c*c;
            double t66852 = 1/pow(rho_b[index],2.0/3.0);
            double t66853 = b4f*t66851*t66852;
            double t66854 = b2f*c*t66845;
            double t66855 = t66850+t66853+t66854+t66848;
            double t66856 = 1/pow(rho_b[index],4.0/3.0);
            double t66857 = b1p*t66847;
            double t66858 = b3p*t66849;
            double t66859 = b4p*t66851*t66852;
            double t66860 = b2p*c*t66845;
            double t66861 = t66860+t66857+t66858+t66859;
            double t66862 = 1/pow(rho_b[index],5.0/3.0);
            double t66863 = 1/sqrt(t66846);
            double t66864 = 1/c0f;
            double t66865 = 1/t66855;
            double t66866 = t66864*t66865*(1.0/2.0);
            double t66867 = t66866+1.0;
            double t66868 = 1/c0p;
            double t66869 = 1/t66861;
            double t66870 = t66868*t66869*(1.0/2.0);
            double t66871 = t66870+1.0;
            double t66872 = a1p*c*t66845;
            double t66873 = t66872+1.0;
            double t66874 = 1/t66871;
            double t66875 = 1/(t66861*t66861);
            double t66876 = b4p*t66851*t66862*(2.0/3.0);
            double t66877 = b2p*c*t66856*(1.0/3.0);
            double t66878 = b1p*c*t66863*t66856*(1.0/6.0);
            double t66879 = b3p*c*t66847*t66856*(1.0/2.0);
            double t66880 = t66876+t66877+t66878+t66879;
            double t66881 = t66880*t66873*t66874*t66875;
            double t66882 = log(t66871);
            double t66883 = gamma_bb[index]*gamma_bb[index];
            double t66884 = gcaa*gcaa;
            double t66885 = t66883*t66883;
            double t66886 = t66884*t66884;
            double t66887 = 1/pow(rho_b[index],3.2E1/3.0);
            double t66888 = 1/pow(rho_b[index],8.0/3.0);
            double t66889 = 1/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
               rho_b[index]*rho_b[index]);
            double t66890 = 1/pow(rho_b[index],1.6E1/3.0);
            double t66891 = pow(2.0,1.0/3.0);
            double t66892 = t66891*2.0;
            double t66893 = t66892-2.0;
            double t66894 = two_13*2.0;
            double t66895 = t66894-2.0;
            double t66896 = 1/t66895;
            double t66897 = log(t66867);
            double t66898 = a1f*c*t66845;
            double t66899 = t66898+1.0;
            double t66900 = gamma_bb[index]*gcaa*t66888*4.0;
            double t66901 = gamma_bb[index]*gcaa*t66883*t66884*t66889*4.0;
            double t66902 = t66890*t66883*t66884*6.0;
            double t66903 = t66885*t66886*t66887;
            double t66904 = t66900+t66901+t66902+t66903+1.0;
            double t66905 = 1/t66904;
            double t66906 = gamma_bb[index]*gcaa*t66888;
            double t66907 = t66906+1.0;
            double t66908 = 1/t66907;
            double t66909 = gamma_bb[index]*gcaa*t66888*3.0;
            double t66910 = gamma_bb[index]*gcaa*t66883*t66884*t66889;
            double t66911 = t66890*t66883*t66884*3.0;
            double t66912 = t66910+t66911+t66909+1.0;
            double t66913 = 1/t66912;
            double t66914 = gamma_bb[index]*gcaa*t66888*2.0;
            double t66915 = t66890*t66883*t66884;
            double t66916 = t66914+t66915+1.0;
            double t66917 = 1/t66916;
            double t66918 = 1/pow(rho_b[index],1.9E1/3.0);
            double t66919 = 1/pow(rho_b[index],1.1E1/3.0);
            double t66920 = 1/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
               rho_b[index]*rho_b[index]*rho_b[index]);
            double t66921 = 1/pow(rho_b[index],3.5E1/3.0);
            double t66922 = 1/t66867;
            double t66923 = 1/(t66855*t66855);
            double t66924 = b4f*t66851*t66862*(2.0/3.0);
            double t66925 = b2f*c*t66856*(1.0/3.0);
            double t66926 = b1f*c*t66863*t66856*(1.0/6.0);
            double t66927 = b3f*c*t66847*t66856*(1.0/2.0);
            double t66928 = t66924+t66925+t66926+t66927;
            double t66929 = a1f*c*c0f*t66856*t66897*(2.0/3.0);
            double t66930 = a1p*c*c0p*t66882*t66856*(2.0/3.0);
            double t66931 = ccaa4*t66921*t66905*t66885*t66886*(3.2E1/3.0);
            double t66932 = ccaa1*gamma_bb[index]*gcaa*t66908*t66919*(8.0/3.0);
            double t66933 = ccaa3*gamma_bb[index]*gcaa*t66920*t66913*t66883*t66884*8.0;
            double t66934 = ccaa2*t66917*t66918*t66883*t66884*(1.6E1/3.0);
            double t66935 = 1/(t66907*t66907);
            double t66936 = gamma_bb[index]*gcaa*t66919*8.0;
            double t66937 = gamma_bb[index]*gcaa*t66920*t66883*t66884*8.0;
            double t66938 = t66918*t66883*t66884*1.6E1;
            double t66939 = t66936+t66937+t66938;
            double t66940 = 1/(t66912*t66912);
            double t66941 = gamma_bb[index]*gcaa*t66919*(3.2E1/3.0);
            double t66942 = gamma_bb[index]*gcaa*t66920*t66883*t66884*3.2E1;
            double t66943 = t66918*t66883*t66884*3.2E1;
            double t66944 = t66921*t66885*t66886*(3.2E1/3.0);
            double t66945 = t66941+t66942+t66943+t66944;
            double t66946 = 1/(t66904*t66904);
            double t66947 = gamma_bb[index]*gcaa*t66919*(1.6E1/3.0);
            double t66948 = t66918*t66883*t66884*(1.6E1/3.0);
            double t66949 = t66947+t66948;
            double t66950 = 1/(t66916*t66916);
            double t66951 = t66931+t66932+t66933+t66934-ccaa1*t66935*t66918*t66883*t66884*(8.0/3.0)-ccaa2*t66950* \
               t66890*t66883*t66884*t66949-ccaa4*t66945*t66946*t66885*t66886*t66887-ccaa3*gamma_bb[index]*gcaa*t66940* \
               t66883*t66884*t66939*t66889;
            double t66952 = gx*gx;
            double t66953 = t66952*t66952;
            double t66954 = 1/pow(rho_b[index],1.0E1);
            double t66955 = gamma_bb[index]*gx*t66888;
            double t66956 = t66955+1.0;
            double t66957 = 1/pow(rho_b[index],2.2E1/3.0);
            double t66978 = gamma_bb[index]*gx*t66919*(3.2E1/3.0);
            double t66979 = gamma_bb[index]*gx*t66920*t66952*t66883*3.2E1;
            double t66980 = t66952*t66918*t66883*3.2E1;
            double t66981 = t66921*t66953*t66885*(3.2E1/3.0);
            double t66958 = t66980+t66981+t66978+t66979;
            double t66959 = gamma_bb[index]*gx*t66888*4.0;
            double t66960 = gamma_bb[index]*gx*t66952*t66883*t66889*4.0;
            double t66961 = t66952*t66890*t66883*6.0;
            double t66962 = t66953*t66885*t66887;
            double t66963 = t66960+t66961+t66962+t66959+1.0;
            double t66984 = gamma_bb[index]*gx*t66919*(1.6E1/3.0);
            double t66985 = t66952*t66918*t66883*(1.6E1/3.0);
            double t66964 = t66984+t66985;
            double t66965 = gamma_bb[index]*gx*t66888*2.0;
            double t66966 = t66952*t66890*t66883;
            double t66967 = t66965+t66966+1.0;
            double t66968 = gamma_bb[index]*gx*t66888*3.0;
            double t66969 = gamma_bb[index]*gx*t66952*t66883*t66889;
            double t66970 = t66952*t66890*t66883*3.0;
            double t66971 = t66970+t66968+t66969+1.0;
            double t66972 = 1/pow(rho_b[index],1.4E1/3.0);
            double t66973 = 1/(t66971*t66971);
            double t66974 = gamma_bb[index]*gx*t66919*8.0;
            double t66975 = gamma_bb[index]*gx*t66920*t66952*t66883*8.0;
            double t66976 = t66952*t66918*t66883*1.6E1;
            double t66977 = t66974+t66975+t66976;
            double t66982 = 1/pow(rho_b[index],3.8E1/3.0);
            double t66983 = 1/(t66963*t66963);
            double t66986 = 1/(t66967*t66967);
            double t66987 = 1/t66963;
            double t66988 = 1/t66956;
            double t66989 = 1/t66971;
            double t66990 = 1/t66967;
            double t66991 = c0f*t66897*t66899*2.0;
            double t66992 = c0p*t66873*t66882*2.0;
            double t66993 = 1/(t66956*t66956);
            double t66994 = ccaa4*t66905*t66885*t66886*t66887;
            double t66995 = ccaa1*gamma_bb[index]*gcaa*t66908*t66888;
            double t66996 = ccaa3*gamma_bb[index]*gcaa*t66913*t66883*t66884*t66889;
            double t66997 = ccaa2*t66890*t66917*t66883*t66884;
            double t66998 = ccaa0+t66994+t66995+t66996+t66997;
            double t66999 = 1/pow(rho_b[index],7.0/3.0);
            double t67000 = 1/pow(t66846,3.0/2.0);
            double t67001 = t66928*t66928;
            double t67002 = t66880*t66880;
            double t67003 = 1/(t66861*t66861*t66861);
            double t67004 = t66873*t66874*t67002*t67003*2.0;
            double t67005 = b4p*t66851*t66888*(1.0E1/9.0);
            double t67006 = b2p*c*t66999*(4.0/9.0);
            double t67007 = b3p*t66851*t66863*t66888*(1.0/1.2E1);
            double t67008 = b1p*c*t66863*t66999*(2.0/9.0);
            double t67009 = b3p*c*t66847*t66999*(2.0/3.0);
            double t67010 = t67005+t67006+t67007+t67008+t67009-b1p*t66851*t66888*t67000*(1.0/3.6E1);
            double t67011 = 1/(t66871*t66871);
            double t67012 = 1/(t66861*t66861*t66861*t66861);
            double t67013 = a1p*c*c0p*t66882*t66999*(8.0/9.0);
            v_rho_b_rho_b_[index] = t66951*(t66992+t66893*t66896*(t66991-c0p*t66873*t66882*2.0))*2.0+t66998*(t66930- \
               t66881+t66893*t66896*(t66881+t66929-t66922*t66923*t66928*t66899-a1p*c*c0p*t66882*t66856*(2.0/3.0)) \
               )*2.0-c0*pow(rho_b[index],1.0/3.0)*(cx1*gamma_bb[index]*gx*t66919*t66988*(8.0/3.0)-cx1*t66952*t66918* \
               t66883*t66993*(8.0/3.0)+cx2*t66952*t66918*t66990*t66883*(1.6E1/3.0)+cx4*t66921*t66953*t66885*t66987* \
               (3.2E1/3.0)-cx2*t66952*t66890*t66883*t66964*t66986-cx4*t66953*t66983*t66885*t66958*t66887+cx3*gamma_bb[index]* \
               gx*t66920*t66952*t66883*t66989*8.0-cx3*gamma_bb[index]*gx*t66952*t66883*t66973*t66977*t66889)*(8.0/ \
               3.0)+rho_b[index]*t66998*(-t67004-t67013+t66893*t66896*(t67004+t67013-t66873*t66874*t66875*t67010- \
               t66922*1/(t66855*t66855*t66855)*t66899*t67001*2.0+t66922*t66923*t66899*(b2f*c*t66999*(4.0/9.0)+b4f* \
               t66851*t66888*(1.0E1/9.0)+b1f*c*t66863*t66999*(2.0/9.0)+b3f*c*t66847*t66999*(2.0/3.0)-b1f*t66851*t66888* \
               t67000*(1.0/3.6E1)+b3f*t66851*t66863*t66888*(1.0/1.2E1))+1/(t66855*t66855*t66855*t66855)*t66864*1/ \
               (t66867*t66867)*t66899*t67001*(1.0/2.0)-a1f*c*c0f*t66897*t66999*(8.0/9.0)-t66873*t66868*t67002*t67011* \
               t67012*(1.0/2.0)+a1f*c*t66922*t66923*t66856*t66928*(2.0/3.0)-a1p*c*t66880*t66856*t66874*t66875*(2.0/ \
               3.0))+t66873*t66874*t66875*t67010+t66873*t66868*t67002*t67011*t67012*(1.0/2.0)+a1p*c*t66880*t66856* \
               t66874*t66875*(2.0/3.0))+rho_b[index]*t66951*(-t66930+t66881+t66893*t66896*(t66930-t66881-t66929+t66922* \
               t66923*t66928*t66899))*2.0-rho_b[index]*(t66992+t66893*t66896*(t66991-t66992))*(ccaa1*gamma_bb[index]* \
               gcaa*t66908*t66972*(8.8E1/9.0)-ccaa1*t66935*t66883*t66884*t66957*2.4E1+ccaa2*t66917*t66883*t66884* \
               t66957*(3.04E2/9.0)+ccaa4*t66905*t66982*t66885*t66886*(1.12E3/9.0)-ccaa2*t66950*t66918*t66883*t66884* \
               t66949*(3.2E1/3.0)-ccaa4*t66921*t66945*t66946*t66885*t66886*(6.4E1/3.0)-ccaa2*t66950*t66890*t66883* \
               t66884*(gamma_bb[index]*gcaa*t66972*(1.76E2/9.0)+t66883*t66884*t66957*(3.04E2/9.0))-ccaa4*t66946*t66885* \
               t66886*t66887*(gamma_bb[index]*gcaa*t66972*(3.52E2/9.0)+t66883*t66884*t66957*(6.08E2/3.0)+t66982*t66885* \
               t66886*(1.12E3/9.0)+gamma_bb[index]*gcaa*t66954*t66883*t66884*2.88E2)+ccaa2*1/(t66916*t66916*t66916) \
               *t66890*t66883*t66884*(t66949*t66949)*2.0+ccaa4*1/(t66904*t66904*t66904)*(t66945*t66945)*t66885*t66886* \
               t66887*2.0+ccaa3*gamma_bb[index]*gcaa*t66913*t66954*t66883*t66884*7.2E1+ccaa1*gamma_bb[index]*gcaa* \
               1/(t66907*t66907*t66907)*t66954*t66883*t66884*(1.28E2/9.0)+ccaa3*gamma_bb[index]*gcaa*1/(t66912*t66912* \
               t66912)*t66883*t66884*(t66939*t66939)*t66889*2.0-ccaa3*gamma_bb[index]*gcaa*t66940*t66883*t66884*t66889* \
               (gamma_bb[index]*gcaa*t66972*(8.8E1/3.0)+t66883*t66884*t66957*(3.04E2/3.0)+gamma_bb[index]*gcaa*t66954* \
               t66883*t66884*7.2E1)-ccaa3*gamma_bb[index]*gcaa*t66920*t66940*t66883*t66884*t66939*1.6E1)+c0*pow(rho_b[index],4.0/ \
               3.0)*(cx1*gamma_bb[index]*gx*t66972*t66988*(8.8E1/9.0)-cx1*t66952*t66883*t66957*t66993*2.4E1+cx2*t66952* \
               t66990*t66883*t66957*(3.04E2/9.0)+cx4*t66953*t66982*t66885*t66987*(1.12E3/9.0)-cx2*t66952*t66918*t66883* \
               t66964*t66986*(3.2E1/3.0)-cx4*t66921*t66953*t66983*t66885*t66958*(6.4E1/3.0)-cx2*t66952*t66890*t66883* \
               t66986*(gamma_bb[index]*gx*t66972*(1.76E2/9.0)+t66952*t66883*t66957*(3.04E2/9.0))-cx4*t66953*t66983* \
               t66885*t66887*(gamma_bb[index]*gx*t66972*(3.52E2/9.0)+t66952*t66883*t66957*(6.08E2/3.0)+t66953*t66982* \
               t66885*(1.12E3/9.0)+gamma_bb[index]*gx*t66952*t66954*t66883*2.88E2)+cx2*t66952*t66890*t66883*(t66964* \
               t66964)*1/(t66967*t66967*t66967)*2.0+cx4*t66953*1/(t66963*t66963*t66963)*t66885*(t66958*t66958)*t66887* \
               2.0+cx3*gamma_bb[index]*gx*t66952*t66954*t66883*t66989*7.2E1+cx1*gamma_bb[index]*gx*t66952*t66954* \
               t66883*1/(t66956*t66956*t66956)*(1.28E2/9.0)+cx3*gamma_bb[index]*gx*t66952*1/(t66971*t66971*t66971) \
               *t66883*(t66977*t66977)*t66889*2.0-cx3*gamma_bb[index]*gx*t66952*t66883*t66973*t66889*(gamma_bb[index]* \
               gx*t66972*(8.8E1/3.0)+t66952*t66883*t66957*(3.04E2/3.0)+gamma_bb[index]*gx*t66952*t66954*t66883*7.2E1) \
               -cx3*gamma_bb[index]*gx*t66920*t66952*t66883*t66973*t66977*1.6E1)+c0*t66852*(cx0+cx1*gamma_bb[index]* \
               gx*t66888*t66988+cx2*t66952*t66890*t66990*t66883+cx4*t66953*t66885*t66887*t66987+cx3*gamma_bb[index]* \
               gx*t66952*t66883*t66889*t66989)*(4.0/9.0);
        } else {
            v_rho_b_rho_b_[index] = 0.0;
        } 

        if (is_gga_) {

            //V_rho_a_gamma_aa
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t65080 = 1/pow(rho_a[index],1.0/3.0);
                double t65081 = c*t65080;
                double t65082 = sqrt(t65081);
                double t65083 = pow(t65081,3.0/2.0);
                double t65084 = c*c;
                double t65085 = 1/pow(rho_a[index],2.0/3.0);
                double t65086 = 1/c0p;
                double t65087 = b1p*t65082;
                double t65088 = b3p*t65083;
                double t65089 = b4p*t65084*t65085;
                double t65090 = b2p*c*t65080;
                double t65091 = t65090+t65087+t65088+t65089;
                double t65092 = 1/t65091;
                double t65093 = t65092*t65086*(1.0/2.0);
                double t65094 = t65093+1.0;
                double t65095 = log(t65094);
                double t65096 = a1p*c*t65080;
                double t65097 = t65096+1.0;
                double t65098 = 1/pow(rho_a[index],8.0/3.0);
                double t65099 = gamma_aa[index]*gamma_aa[index];
                double t65100 = gcaa*gcaa;
                double t65101 = t65100*t65100;
                double t65102 = 1/pow(rho_a[index],3.2E1/3.0);
                double t65103 = 1/pow(rho_a[index],1.6E1/3.0);
                double t65104 = 1/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t65105 = gamma_aa[index]*gcaa*t65098;
                double t65106 = t65105+1.0;
                double t65107 = gamma_aa[index]*gcaa*t65098*3.0;
                double t65108 = gamma_aa[index]*gcaa*t65100*t65104*t65099;
                double t65109 = t65100*t65103*t65099*3.0;
                double t65110 = t65107+t65108+t65109+1.0;
                double t65111 = t65099*t65099;
                double t65112 = gamma_aa[index]*gcaa*t65098*4.0;
                double t65113 = gamma_aa[index]*gcaa*t65100*t65104*t65099*4.0;
                double t65114 = t65100*t65103*t65099*6.0;
                double t65115 = t65101*t65102*t65111;
                double t65116 = t65112+t65113+t65114+t65115+1.0;
                double t65117 = gamma_aa[index]*gcaa*t65098*2.0;
                double t65118 = t65100*t65103*t65099;
                double t65119 = t65117+t65118+1.0;
                double t65120 = rho_a[index]+rho_b[index];
                double t65121 = 1/pow(t65120,1.0/3.0);
                double t65122 = c*t65121;
                double t65123 = sqrt(t65122);
                double t65124 = b1p*t65123;
                double t65125 = pow(t65122,3.0/2.0);
                double t65126 = b3p*t65125;
                double t65127 = 1/pow(t65120,2.0/3.0);
                double t65128 = b4p*t65127*t65084;
                double t65129 = b2p*c*t65121;
                double t65130 = t65124+t65126+t65128+t65129;
                double t65131 = 1/pow(t65120,4.0/3.0);
                double t65132 = two_13*2.0;
                double t65133 = t65132-2.0;
                double t65134 = 1/t65133;
                double t65135 = 1/c0f;
                double t65136 = 1/t65130;
                double t65137 = t65136*t65086*(1.0/2.0);
                double t65138 = t65137+1.0;
                double t65139 = a1p*c*t65121;
                double t65140 = t65139+1.0;
                double t65141 = rho_a[index]-rho_b[index];
                double t65142 = t65141*t65141;
                double t65143 = 1/t65120;
                double t65144 = t65141*t65143;
                double t65145 = b1f*t65123;
                double t65146 = b3f*t65125;
                double t65147 = b4f*t65127*t65084;
                double t65148 = b2f*c*t65121;
                double t65149 = t65145+t65146+t65147+t65148;
                double t65150 = 1/t65149;
                double t65151 = t65150*t65135*(1.0/2.0);
                double t65152 = t65151+1.0;
                double t65153 = log(t65152);
                double t65154 = a1f*c*t65121;
                double t65155 = t65154+1.0;
                double t65156 = log(t65138);
                double t65166 = c0f*t65153*t65155*2.0;
                double t65167 = c0p*t65140*t65156*2.0;
                double t65157 = t65166-t65167;
                double t65158 = t65144+1.0;
                double t65159 = pow(t65158,4.0/3.0);
                double t65160 = -t65144+1.0;
                double t65161 = pow(t65160,4.0/3.0);
                double t65162 = t65161+t65159-2.0;
                double t65163 = 1/(t65120*t65120);
                double t65194 = t65141*t65163;
                double t65164 = t65143-t65194;
                double t65165 = 1/(t65120*t65120*t65120*t65120);
                double t65168 = t65142*t65142;
                double t65169 = 1/pow(t65120,5.0/3.0);
                double t65170 = 1/sqrt(t65122);
                double t65171 = 1/t65138;
                double t65172 = 1/(t65130*t65130);
                double t65173 = b4p*t65084*t65169*(2.0/3.0);
                double t65174 = b2p*c*t65131*(1.0/3.0);
                double t65175 = b1p*c*t65131*t65170*(1.0/6.0);
                double t65176 = b3p*c*t65131*t65123*(1.0/2.0);
                double t65177 = t65173+t65174+t65175+t65176;
                double t65178 = t65140*t65171*t65172*t65177;
                double t65179 = 1/(t65120*t65120*t65120*t65120*t65120);
                double t65180 = 1/d2fz0;
                double t65181 = 1/Aa;
                double t65182 = b1a*t65123;
                double t65183 = b3a*t65125;
                double t65184 = b4a*t65127*t65084;
                double t65185 = b2a*c*t65121;
                double t65186 = t65182+t65183+t65184+t65185;
                double t65187 = 1/t65186;
                double t65188 = t65181*t65187*(1.0/2.0);
                double t65189 = t65188+1.0;
                double t65190 = log(t65189);
                double t65191 = a1a*c*t65121;
                double t65192 = t65191+1.0;
                double t65193 = pow(t65158,1.0/3.0);
                double t65195 = t65164*t65193*(4.0/3.0);
                double t65196 = pow(t65160,1.0/3.0);
                double t65197 = t65195-t65164*t65196*(4.0/3.0);
                double t65198 = t65165*t65168;
                double t65199 = t65198-1.0;
                double t65200 = pow(2.0,1.0/3.0);
                double t65201 = t65200*2.0;
                double t65202 = t65201-2.0;
                double t65203 = a1f*c*t65080;
                double t65204 = t65203+1.0;
                double t65205 = b1f*t65082;
                double t65206 = b3f*t65083;
                double t65207 = b4f*t65084*t65085;
                double t65208 = b2f*c*t65080;
                double t65209 = t65205+t65206+t65207+t65208;
                double t65210 = 1/t65209;
                double t65211 = t65210*t65135*(1.0/2.0);
                double t65212 = t65211+1.0;
                double t65213 = 1/pow(rho_a[index],4.0/3.0);
                double t65214 = 1/pow(rho_a[index],5.0/3.0);
                double t65215 = 1/sqrt(t65081);
                double t65216 = log(t65212);
                double t65217 = 1/t65094;
                double t65218 = 1/(t65091*t65091);
                double t65219 = b4p*t65214*t65084*(2.0/3.0);
                double t65220 = b2p*c*t65213*(1.0/3.0);
                double t65221 = b1p*c*t65213*t65215*(1.0/6.0);
                double t65222 = b3p*c*t65213*t65082*(1.0/2.0);
                double t65223 = t65220+t65221+t65222+t65219;
                double t65224 = t65223*t65217*t65218*t65097;
                double t65225 = c0f*t65204*t65216*2.0;
                double t65226 = c0p*t65095*t65097*2.0;
                double t65227 = gamma_aa[index]*t65098*(1.0/2.0);
                double t65228 = 1/pow(rho_b[index],8.0/3.0);
                double t65229 = gamma_bb[index]*t65228*(1.0/2.0);
                double t65230 = t65227+t65229;
                double t65231 = gcab*t65230;
                double t65232 = t65231+1.0;
                double t65233 = gcab*gcab;
                double t65234 = t65230*t65230;
                double t65235 = t65233*t65233;
                double t65236 = t65234*t65234;
                double t65237 = t65233*t65234;
                double t65238 = gcab*t65230*2.0;
                double t65239 = t65237+t65238+1.0;
                double t65240 = t65233*t65234*3.0;
                double t65241 = gcab*t65230*t65233*t65234;
                double t65242 = gcab*t65230*3.0;
                double t65243 = t65240+t65241+t65242+1.0;
                double t65244 = t65233*t65234*6.0;
                double t65245 = gcab*t65230*t65233*t65234*4.0;
                double t65246 = t65235*t65236;
                double t65247 = gcab*t65230*4.0;
                double t65248 = t65244+t65245+t65246+t65247+1.0;
                double t65249 = t65225-t65226;
                double t65250 = 1/pow(rho_b[index],1.0/3.0);
                double t65251 = c*t65250;
                double t65252 = sqrt(t65251);
                double t65253 = pow(t65251,3.0/2.0);
                double t65254 = 1/pow(rho_b[index],2.0/3.0);
                double t65255 = b1p*t65252;
                double t65256 = b3p*t65253;
                double t65257 = b4p*t65254*t65084;
                double t65258 = b2p*c*t65250;
                double t65259 = t65255+t65256+t65257+t65258;
                double t65260 = 1/t65259;
                double t65261 = t65260*t65086*(1.0/2.0);
                double t65262 = t65261+1.0;
                double t65263 = log(t65262);
                double t65264 = a1p*c*t65250;
                double t65265 = t65264+1.0;
                double t65266 = c0p*t65263*t65265*2.0;
                double t65267 = t65134*t65162*t65165*t65157*t65168;
                double t65268 = Aa*t65134*t65162*t65180*t65190*t65192*t65199*2.0;
                double t65269 = 1/t65232;
                double t65270 = 1/pow(rho_a[index],1.1E1/3.0);
                double t65271 = 1/(t65232*t65232);
                double t65272 = 1/t65239;
                double t65273 = 1/(t65243*t65243);
                double t65274 = 1/pow(rho_a[index],1.9E1/3.0);
                double t65275 = 1/(t65239*t65239);
                double t65276 = 1/t65243;
                double t65277 = 1/t65248;
                double t65278 = 1/(t65248*t65248);
                double t65279 = gcab*t65098*2.0;
                double t65280 = t65230*t65233*t65098*6.0;
                double t65281 = gcab*t65233*t65234*t65098*6.0;
                double t65282 = t65230*t65234*t65235*t65098*2.0;
                double t65283 = t65280+t65281+t65282+t65279;
                double t65284 = gamma_aa[index]*gcab*t65270*(8.0/3.0);
                double t65285 = gamma_aa[index]*t65230*t65233*t65270*(8.0/3.0);
                double t65286 = t65284+t65285;
                double t65287 = gcab*t65098;
                double t65288 = t65230*t65233*t65098;
                double t65289 = t65287+t65288;
                double t65290 = gamma_aa[index]*gcab*t65270*(1.6E1/3.0);
                double t65291 = gamma_aa[index]*gcab*t65233*t65234*t65270*1.6E1;
                double t65292 = gamma_aa[index]*t65230*t65234*t65270*t65235*(1.6E1/3.0);
                double t65293 = gamma_aa[index]*t65230*t65233*t65270*1.6E1;
                double t65294 = t65290+t65291+t65292+t65293;
                double t65295 = gcab*t65098*(3.0/2.0);
                double t65296 = t65230*t65233*t65098*3.0;
                double t65297 = gcab*t65233*t65234*t65098*(3.0/2.0);
                double t65298 = t65295+t65296+t65297;
                double t65299 = gamma_aa[index]*gcab*t65270*4.0;
                double t65300 = gamma_aa[index]*gcab*t65233*t65234*t65270*4.0;
                double t65301 = gamma_aa[index]*t65230*t65233*t65270*8.0;
                double t65302 = t65300+t65301+t65299;
                double t65303 = gx*gx;
                double t65304 = t65303*t65303;
                double t65305 = gamma_aa[index]*gx*t65098;
                double t65306 = t65305+1.0;
                double t65307 = gamma_aa[index]*gx*t65098*3.0;
                double t65308 = gamma_aa[index]*gx*t65104*t65303*t65099;
                double t65309 = t65103*t65303*t65099*3.0;
                double t65310 = t65307+t65308+t65309+1.0;
                double t65311 = gamma_aa[index]*gx*t65098*4.0;
                double t65312 = gamma_aa[index]*gx*t65104*t65303*t65099*4.0;
                double t65313 = t65103*t65303*t65099*6.0;
                double t65314 = t65102*t65111*t65304;
                double t65315 = t65311+t65312+t65313+t65314+1.0;
                double t65316 = gamma_aa[index]*gx*t65098*2.0;
                double t65317 = t65103*t65303*t65099;
                double t65318 = t65316+t65317+1.0;
                double t65319 = t65202*t65134*t65249;
                double t65320 = t65226+t65319;
                double t65321 = 1/t65106;
                double t65322 = 1/t65116;
                double t65323 = 1/t65119;
                double t65324 = 1/t65110;
                double t65325 = 1/(t65106*t65106);
                double t65326 = 1/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]*rho_a[index]);
                double t65327 = 1/(t65110*t65110);
                double t65328 = 1/(t65119*t65119);
                double t65329 = gcaa*t65098*3.0;
                double t65330 = gamma_aa[index]*t65100*t65103*6.0;
                double t65331 = gcaa*t65100*t65104*t65099*3.0;
                double t65332 = t65330+t65331+t65329;
                double t65333 = 1/pow(rho_a[index],3.5E1/3.0);
                double t65334 = 1/(t65116*t65116);
                double t65335 = gcaa*t65098*4.0;
                double t65336 = gamma_aa[index]*t65100*t65103*1.2E1;
                double t65337 = gcaa*t65100*t65104*t65099*1.2E1;
                double t65338 = gamma_aa[index]*t65101*t65102*t65099*4.0;
                double t65339 = t65335+t65336+t65337+t65338;
                double t65340 = gcaa*t65098*2.0;
                double t65341 = gamma_aa[index]*t65100*t65103*2.0;
                double t65342 = t65340+t65341;
                double t65343 = gamma_aa[index]*gcaa*t65270*(1.6E1/3.0);
                double t65344 = t65100*t65274*t65099*(1.6E1/3.0);
                double t65345 = t65343+t65344;
                double t65346 = gamma_aa[index]*gcaa*t65270*8.0;
                double t65347 = gamma_aa[index]*gcaa*t65100*t65326*t65099*8.0;
                double t65348 = t65100*t65274*t65099*1.6E1;
                double t65349 = t65346+t65347+t65348;
                double t65350 = gamma_aa[index]*gcaa*t65270*(3.2E1/3.0);
                double t65351 = gamma_aa[index]*gcaa*t65100*t65326*t65099*3.2E1;
                double t65352 = t65100*t65274*t65099*3.2E1;
                double t65353 = t65101*t65111*t65333*(3.2E1/3.0);
                double t65354 = t65350+t65351+t65352+t65353;
                double t65355 = 1/t65212;
                double t65356 = 1/(t65209*t65209);
                double t65357 = b4f*t65214*t65084*(2.0/3.0);
                double t65358 = b2f*c*t65213*(1.0/3.0);
                double t65359 = b1f*c*t65213*t65215*(1.0/6.0);
                double t65360 = b3f*c*t65213*t65082*(1.0/2.0);
                double t65361 = t65360+t65357+t65358+t65359;
                double t65362 = a1f*c*c0f*t65213*t65216*(2.0/3.0);
                double t65363 = a1p*c*c0p*t65213*t65095*(2.0/3.0);
                double t65364 = ccaa1*gcaa*t65321*t65098;
                double t65365 = ccaa4*gamma_aa[index]*t65101*t65102*t65322*t65099*4.0;
                double t65366 = ccaa2*gamma_aa[index]*t65100*t65103*t65323*2.0;
                double t65367 = ccaa3*gcaa*t65100*t65104*t65324*t65099*3.0;
                double t65368 = t65364+t65365+t65366+t65367-ccaa1*gamma_aa[index]*t65100*t65103*t65325-ccaa4*t65101* \
                   t65102*t65111*t65334*t65339-ccaa2*t65100*t65103*t65342*t65328*t65099-ccaa3*gamma_aa[index]*gcaa*t65100* \
                   t65104*t65332*t65327*t65099;
                double t65369 = 1/t65306;
                double t65370 = 1/t65315;
                double t65371 = 1/t65318;
                double t65372 = 1/t65310;
                double t65373 = 1/(t65306*t65306);
                double t65374 = 1/(t65310*t65310);
                double t65375 = 1/(t65318*t65318);
                double t65376 = gx*t65098*3.0;
                double t65377 = gamma_aa[index]*t65103*t65303*6.0;
                double t65378 = gx*t65104*t65303*t65099*3.0;
                double t65379 = t65376+t65377+t65378;
                double t65380 = 1/(t65315*t65315);
                double t65381 = gx*t65098*4.0;
                double t65382 = gamma_aa[index]*t65103*t65303*1.2E1;
                double t65383 = gx*t65104*t65303*t65099*1.2E1;
                double t65384 = gamma_aa[index]*t65102*t65304*t65099*4.0;
                double t65385 = t65381+t65382+t65383+t65384;
                double t65386 = gx*t65098*2.0;
                double t65387 = gamma_aa[index]*t65103*t65303*2.0;
                double t65388 = t65386+t65387;
                double t65389 = gamma_aa[index]*gx*t65270*(1.6E1/3.0);
                double t65390 = t65303*t65274*t65099*(1.6E1/3.0);
                double t65391 = t65390+t65389;
                double t65392 = gamma_aa[index]*gx*t65270*8.0;
                double t65393 = gamma_aa[index]*gx*t65303*t65326*t65099*8.0;
                double t65394 = t65303*t65274*t65099*1.6E1;
                double t65395 = t65392+t65393+t65394;
                double t65396 = gamma_aa[index]*gx*t65270*(3.2E1/3.0);
                double t65397 = gamma_aa[index]*gx*t65303*t65326*t65099*3.2E1;
                double t65398 = t65303*t65274*t65099*3.2E1;
                double t65399 = t65111*t65304*t65333*(3.2E1/3.0);
                double t65400 = t65396+t65397+t65398+t65399;
                v_rho_a_gamma_aa_[index] = -(rho_a[index]*t65320+rho_b[index]*(t65266-t65202*t65134*(t65266-c0f*log((t65135* \
                   (1.0/2.0))/(b1f*t65252+b3f*t65253+b2f*c*t65250+b4f*t65254*t65084)+1.0)*(a1f*c*t65250+1.0)*2.0))-t65120* \
                   (t65167+t65267+t65268))*(ccab1*gcab*t65270*t65269*(4.0/3.0)-ccab2*t65233*t65234*t65275*(gcab*t65270* \
                   (8.0/3.0)+gamma_aa[index]*t65233*t65274*(4.0/3.0)+t65230*t65233*t65270*(8.0/3.0))-ccab4*t65235*t65236* \
                   t65278*(gcab*t65270*(1.6E1/3.0)+gamma_aa[index]*t65233*t65274*8.0+t65230*t65233*t65270*1.6E1+gamma_aa[index]* \
                   t65234*t65235*t65274*8.0+gcab*t65233*t65234*t65270*1.6E1+t65230*t65234*t65270*t65235*(1.6E1/3.0)+gamma_aa[index]* \
                   gcab*t65230*t65233*t65274*1.6E1)-ccab1*gamma_aa[index]*t65233*t65271*t65274*(4.0/3.0)+ccab2*gamma_aa[index]* \
                   t65233*t65272*t65274*(4.0/3.0)-ccab1*t65230*t65233*t65270*t65271*(4.0/3.0)+ccab2*t65230*t65233*t65270* \
                   t65272*(8.0/3.0)+ccab4*t65230*t65234*t65270*t65235*t65277*(1.6E1/3.0)-ccab2*t65230*t65233*t65275*t65286* \
                   t65098+ccab4*t65235*t65236*t65283*1/(t65248*t65248*t65248)*t65294*2.0+ccab2*t65233*t65234*1/(t65239* \
                   t65239*t65239)*t65286*t65289*2.0+ccab4*gamma_aa[index]*t65234*t65235*t65274*t65277*8.0+ccab3*gcab* \
                   t65233*t65234*t65270*t65276*4.0+ccab3*gamma_aa[index]*gcab*t65230*t65233*t65274*t65276*4.0-ccab2*gamma_aa[index]* \
                   t65230*t65233*t65270*t65275*t65289*(8.0/3.0)-ccab3*gcab*t65302*t65233*t65234*t65273*t65098*(3.0/2.0) \
                   -ccab4*t65230*t65234*t65235*t65294*t65098*t65278*2.0-ccab3*gcab*t65230*t65233*t65234*t65273*(gcab* \
                   t65270*4.0+gamma_aa[index]*t65233*t65274*4.0+t65230*t65233*t65270*8.0+gcab*t65233*t65234*t65270*4.0+ \
                   gamma_aa[index]*gcab*t65230*t65233*t65274*4.0)+ccab1*gamma_aa[index]*gcab*t65230*1/(t65232*t65232* \
                   t65232)*t65233*t65274*(4.0/3.0)+ccab3*gcab*t65230*t65302*t65233*t65234*1/(t65243*t65243*t65243)*t65298* \
                   2.0-ccab3*gamma_aa[index]*gcab*t65233*t65234*t65270*t65273*t65298*4.0-ccab4*gamma_aa[index]*t65230* \
                   t65234*t65270*t65235*t65283*t65278*(1.6E1/3.0))-t65368*(t65226+t65202*t65134*(t65225-c0p*t65095*t65097* \
                   2.0))-(-t65226+t65167+t65267+t65268+t65120*(t65178-t65134*t65162*t65165*t65168*(t65178-(t65155*1/(t65149* \
                   t65149)*(b2f*c*t65131*(1.0/3.0)+b4f*t65084*t65169*(2.0/3.0)+b1f*c*t65131*t65170*(1.0/6.0)+b3f*c*t65131* \
                   t65123*(1.0/2.0)))/t65152+a1f*c*c0f*t65131*t65153*(2.0/3.0)-a1p*c*c0p*t65131*t65156*(2.0/3.0))-a1p* \
                   c*c0p*t65131*t65156*(2.0/3.0)-t65134*t65162*t65157*t65168*t65179*4.0+t65134*t65165*t65157*t65168*t65197+ \
                   t65141*t65142*t65134*t65162*t65165*t65157*4.0-Aa*t65134*t65162*t65180*t65190*t65192*(t65168*t65179* \
                   4.0-t65141*t65142*t65165*4.0)*2.0+Aa*t65134*t65180*t65190*t65192*t65197*t65199*2.0+(t65134*t65162* \
                   t65180*t65192*1/(t65186*t65186)*t65199*(b2a*c*t65131*(1.0/3.0)+b4a*t65084*t65169*(2.0/3.0)+b1a*c*t65131* \
                   t65170*(1.0/6.0)+b3a*c*t65131*t65123*(1.0/2.0)))/t65189-Aa*a1a*c*t65131*t65134*t65162*t65180*t65190* \
                   t65199*(2.0/3.0))+rho_a[index]*(-t65224+t65363+t65202*t65134*(t65224+t65362-t65204*t65361*t65355*t65356- \
                   a1p*c*c0p*t65213*t65095*(2.0/3.0)))-t65202*t65134*t65249)*(ccab1*gcab*t65098*t65269*(1.0/2.0)-ccab1* \
                   t65230*t65233*t65271*t65098*(1.0/2.0)+ccab2*t65230*t65233*t65272*t65098-ccab2*t65233*t65234*t65275* \
                   t65289-ccab4*t65235*t65236*t65283*t65278+ccab4*t65230*t65234*t65235*t65277*t65098*2.0+ccab3*gcab*t65233* \
                   t65234*t65276*t65098*(3.0/2.0)-ccab3*gcab*t65230*t65233*t65234*t65273*t65298)-rho_a[index]*t65320* \
                   (ccaa1*gcaa*t65321*t65270*(-8.0/3.0)-ccaa2*gamma_aa[index]*t65100*t65323*t65274*(3.2E1/3.0)+ccaa1* \
                   gamma_aa[index]*t65100*t65325*t65274*8.0+ccaa4*t65101*t65111*t65333*t65334*t65339*(3.2E1/3.0)+ccaa2* \
                   t65100*t65342*t65274*t65328*t65099*(1.6E1/3.0)+ccaa4*t65101*t65102*t65111*t65334*(gcaa*t65270*(3.2E1/ \
                   3.0)+gamma_aa[index]*t65100*t65274*6.4E1+gamma_aa[index]*t65101*t65333*t65099*(1.28E2/3.0)+gcaa*t65100* \
                   t65326*t65099*9.6E1)-ccaa1*gcaa*t65100*1/(t65106*t65106*t65106)*t65326*t65099*(1.6E1/3.0)+ccaa2*t65100* \
                   t65103*t65328*t65099*(gcaa*t65270*(1.6E1/3.0)+gamma_aa[index]*t65100*t65274*(3.2E1/3.0))+ccaa2*gamma_aa[index]* \
                   t65100*t65103*t65345*t65328*2.0-ccaa4*gamma_aa[index]*t65101*t65322*t65333*t65099*(1.28E2/3.0)-ccaa3* \
                   gcaa*t65100*t65324*t65326*t65099*2.4E1+ccaa4*gamma_aa[index]*t65101*t65102*t65334*t65354*t65099*4.0+ \
                   ccaa3*gcaa*t65100*t65104*t65327*t65349*t65099*3.0-ccaa4*t65101*t65102*t65111*1/(t65116*t65116*t65116) \
                   *t65354*t65339*2.0-ccaa2*t65100*t65103*t65342*1/(t65119*t65119*t65119)*t65345*t65099*2.0+ccaa3*gamma_aa[index]* \
                   gcaa*t65100*t65104*t65327*t65099*(gcaa*t65270*8.0+gamma_aa[index]*t65100*t65274*3.2E1+gcaa*t65100* \
                   t65326*t65099*2.4E1)+ccaa3*gamma_aa[index]*gcaa*t65100*t65332*t65326*t65327*t65099*8.0-ccaa3*gamma_aa[index]* \
                   gcaa*t65100*1/(t65110*t65110*t65110)*t65104*t65332*t65349*t65099*2.0)+c0*pow(rho_a[index],4.0/3.0) \
                   *(cx1*gx*t65270*t65369*(-8.0/3.0)+cx1*gamma_aa[index]*t65303*t65274*t65373*8.0-cx2*gamma_aa[index]* \
                   t65303*t65371*t65274*(3.2E1/3.0)+cx2*t65303*t65274*t65375*t65099*t65388*(1.6E1/3.0)+cx4*t65111*t65304* \
                   t65333*t65380*t65385*(3.2E1/3.0)+cx4*t65102*t65111*t65304*t65380*(gx*t65270*(3.2E1/3.0)+gamma_aa[index]* \
                   t65303*t65274*6.4E1+gamma_aa[index]*t65304*t65333*t65099*(1.28E2/3.0)+gx*t65303*t65326*t65099*9.6E1) \
                   -cx1*gx*t65303*1/(t65306*t65306*t65306)*t65326*t65099*(1.6E1/3.0)+cx2*t65103*t65303*t65375*t65099* \
                   (gx*t65270*(1.6E1/3.0)+gamma_aa[index]*t65303*t65274*(3.2E1/3.0))+cx2*gamma_aa[index]*t65103*t65303* \
                   t65391*t65375*2.0-cx4*gamma_aa[index]*t65304*t65333*t65370*t65099*(1.28E2/3.0)-cx3*gx*t65303*t65326* \
                   t65372*t65099*2.4E1+cx4*gamma_aa[index]*t65102*t65400*t65304*t65380*t65099*4.0+cx3*gx*t65104*t65303* \
                   t65374*t65395*t65099*3.0-cx2*t65103*t65303*1/(t65318*t65318*t65318)*t65391*t65099*t65388*2.0-cx4*t65102* \
                   t65111*t65400*t65304*1/(t65315*t65315*t65315)*t65385*2.0+cx3*gamma_aa[index]*gx*t65104*t65303*t65374* \
                   t65099*(gx*t65270*8.0+gamma_aa[index]*t65303*t65274*3.2E1+gx*t65303*t65326*t65099*2.4E1)+cx3*gamma_aa[index]* \
                   gx*t65303*t65326*t65374*t65099*t65379*8.0-cx3*gamma_aa[index]*gx*1/(t65310*t65310*t65310)*t65104*t65303* \
                   t65395*t65099*t65379*2.0)+rho_a[index]*t65368*(-t65224+t65363+t65202*t65134*(t65224+t65362-t65363- \
                   t65204*t65361*t65355*t65356))+c0*pow(rho_a[index],1.0/3.0)*(cx1*gx*t65098*t65369-cx1*gamma_aa[index]* \
                   t65103*t65303*t65373+cx2*gamma_aa[index]*t65103*t65303*t65371*2.0-cx2*t65103*t65303*t65375*t65099* \
                   t65388-cx4*t65102*t65111*t65304*t65380*t65385+cx4*gamma_aa[index]*t65102*t65304*t65370*t65099*4.0+ \
                   cx3*gx*t65104*t65303*t65372*t65099*3.0-cx3*gamma_aa[index]*gx*t65104*t65303*t65374*t65099*t65379)* \
                   (4.0/3.0);
            } else if (rho_a[index] > cutoff_) {
                double t67654 = 1/pow(rho_a[index],1.0/3.0);
                double t67655 = c*t67654;
                double t67656 = sqrt(t67655);
                double t67657 = pow(t67655,3.0/2.0);
                double t67658 = c*c;
                double t67659 = 1/pow(rho_a[index],2.0/3.0);
                double t67660 = 1/c0p;
                double t67661 = b1p*t67656;
                double t67662 = b3p*t67657;
                double t67663 = b4p*t67658*t67659;
                double t67664 = b2p*c*t67654;
                double t67665 = t67661+t67662+t67663+t67664;
                double t67666 = 1/t67665;
                double t67667 = t67660*t67666*(1.0/2.0);
                double t67668 = t67667+1.0;
                double t67669 = log(t67668);
                double t67670 = a1p*c*t67654;
                double t67671 = t67670+1.0;
                double t67672 = 1/pow(rho_a[index],8.0/3.0);
                double t67673 = gamma_aa[index]*gamma_aa[index];
                double t67674 = gcaa*gcaa;
                double t67675 = t67674*t67674;
                double t67676 = 1/pow(rho_a[index],3.2E1/3.0);
                double t67677 = 1/pow(rho_a[index],1.6E1/3.0);
                double t67678 = 1/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t67679 = gamma_aa[index]*gcaa*t67672;
                double t67680 = t67679+1.0;
                double t67681 = gamma_aa[index]*gcaa*t67672*3.0;
                double t67682 = gamma_aa[index]*gcaa*t67673*t67674*t67678;
                double t67683 = t67673*t67674*t67677*3.0;
                double t67684 = t67681+t67682+t67683+1.0;
                double t67685 = t67673*t67673;
                double t67686 = gamma_aa[index]*gcaa*t67672*4.0;
                double t67687 = gamma_aa[index]*gcaa*t67673*t67674*t67678*4.0;
                double t67688 = t67673*t67674*t67677*6.0;
                double t67689 = t67675*t67676*t67685;
                double t67690 = t67686+t67687+t67688+t67689+1.0;
                double t67691 = gamma_aa[index]*gcaa*t67672*2.0;
                double t67692 = t67673*t67674*t67677;
                double t67693 = t67691+t67692+1.0;
                double t67694 = gx*gx;
                double t67695 = t67694*t67694;
                double t67696 = gamma_aa[index]*gx*t67672;
                double t67697 = t67696+1.0;
                double t67698 = gamma_aa[index]*gx*t67672*3.0;
                double t67699 = gamma_aa[index]*gx*t67673*t67694*t67678;
                double t67700 = t67673*t67694*t67677*3.0;
                double t67701 = t67700+t67698+t67699+1.0;
                double t67702 = gamma_aa[index]*gx*t67672*4.0;
                double t67703 = gamma_aa[index]*gx*t67673*t67694*t67678*4.0;
                double t67704 = t67673*t67694*t67677*6.0;
                double t67705 = t67676*t67685*t67695;
                double t67706 = t67702+t67703+t67704+t67705+1.0;
                double t67707 = gamma_aa[index]*gx*t67672*2.0;
                double t67708 = t67673*t67694*t67677;
                double t67709 = t67707+t67708+1.0;
                double t67710 = pow(2.0,1.0/3.0);
                double t67711 = t67710*2.0;
                double t67712 = t67711-2.0;
                double t67713 = two_13*2.0;
                double t67714 = t67713-2.0;
                double t67715 = 1/t67714;
                double t67716 = 1/c0f;
                double t67717 = b1f*t67656;
                double t67718 = b3f*t67657;
                double t67719 = b4f*t67658*t67659;
                double t67720 = b2f*c*t67654;
                double t67721 = t67720+t67717+t67718+t67719;
                double t67722 = 1/t67721;
                double t67723 = t67722*t67716*(1.0/2.0);
                double t67724 = t67723+1.0;
                double t67725 = log(t67724);
                double t67726 = a1f*c*t67654;
                double t67727 = t67726+1.0;
                double t67728 = c0f*t67725*t67727*2.0;
                double t67729 = c0p*t67671*t67669*2.0;
                double t67730 = 1/t67680;
                double t67731 = 1/t67690;
                double t67732 = 1/t67693;
                double t67733 = 1/t67684;
                double t67734 = 1/pow(rho_a[index],1.9E1/3.0);
                double t67735 = 1/(t67680*t67680);
                double t67736 = 1/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]*rho_a[index]);
                double t67737 = 1/pow(rho_a[index],1.1E1/3.0);
                double t67738 = 1/(t67684*t67684);
                double t67739 = 1/(t67693*t67693);
                double t67740 = gcaa*t67672*3.0;
                double t67741 = gamma_aa[index]*t67674*t67677*6.0;
                double t67742 = gcaa*t67673*t67674*t67678*3.0;
                double t67743 = t67740+t67741+t67742;
                double t67744 = 1/pow(rho_a[index],3.5E1/3.0);
                double t67745 = 1/(t67690*t67690);
                double t67746 = gcaa*t67672*4.0;
                double t67747 = gamma_aa[index]*t67674*t67677*1.2E1;
                double t67748 = gcaa*t67673*t67674*t67678*1.2E1;
                double t67749 = gamma_aa[index]*t67673*t67675*t67676*4.0;
                double t67750 = t67746+t67747+t67748+t67749;
                double t67751 = gcaa*t67672*2.0;
                double t67752 = gamma_aa[index]*t67674*t67677*2.0;
                double t67753 = t67751+t67752;
                double t67754 = gamma_aa[index]*gcaa*t67737*(1.6E1/3.0);
                double t67755 = t67734*t67673*t67674*(1.6E1/3.0);
                double t67756 = t67754+t67755;
                double t67757 = gamma_aa[index]*gcaa*t67737*8.0;
                double t67758 = gamma_aa[index]*gcaa*t67673*t67736*t67674*8.0;
                double t67759 = t67734*t67673*t67674*1.6E1;
                double t67760 = t67757+t67758+t67759;
                double t67761 = gamma_aa[index]*gcaa*t67737*(3.2E1/3.0);
                double t67762 = gamma_aa[index]*gcaa*t67673*t67736*t67674*3.2E1;
                double t67763 = t67734*t67673*t67674*3.2E1;
                double t67764 = t67744*t67675*t67685*(3.2E1/3.0);
                double t67765 = t67761+t67762+t67763+t67764;
                double t67766 = 1/pow(rho_a[index],4.0/3.0);
                double t67767 = 1/pow(rho_a[index],5.0/3.0);
                double t67768 = 1/sqrt(t67655);
                double t67769 = 1/t67668;
                double t67770 = 1/(t67665*t67665);
                double t67771 = b4p*t67658*t67767*(2.0/3.0);
                double t67772 = b2p*c*t67766*(1.0/3.0);
                double t67773 = b1p*c*t67766*t67768*(1.0/6.0);
                double t67774 = b3p*c*t67656*t67766*(1.0/2.0);
                double t67775 = t67771+t67772+t67773+t67774;
                double t67776 = t67671*t67770*t67775*t67769;
                double t67777 = ccaa1*gcaa*t67730*t67672;
                double t67778 = ccaa4*gamma_aa[index]*t67731*t67673*t67675*t67676*4.0;
                double t67779 = ccaa2*gamma_aa[index]*t67732*t67674*t67677*2.0;
                double t67780 = ccaa3*gcaa*t67733*t67673*t67674*t67678*3.0;
                double t67781 = t67780+t67777+t67778+t67779-ccaa1*gamma_aa[index]*t67735*t67674*t67677-ccaa4*t67750* \
                   t67745*t67675*t67676*t67685-ccaa2*t67753*t67673*t67674*t67739*t67677-ccaa3*gamma_aa[index]*gcaa*t67743* \
                   t67673*t67674*t67738*t67678;
                double t67782 = 1/t67697;
                double t67783 = 1/t67706;
                double t67784 = 1/t67709;
                double t67785 = 1/t67701;
                double t67786 = 1/(t67697*t67697);
                double t67787 = 1/(t67701*t67701);
                double t67788 = 1/(t67709*t67709);
                double t67789 = gx*t67672*3.0;
                double t67790 = gamma_aa[index]*t67694*t67677*6.0;
                double t67791 = gx*t67673*t67694*t67678*3.0;
                double t67792 = t67790+t67791+t67789;
                double t67793 = 1/(t67706*t67706);
                double t67794 = gx*t67672*4.0;
                double t67795 = gamma_aa[index]*t67694*t67677*1.2E1;
                double t67796 = gx*t67673*t67694*t67678*1.2E1;
                double t67797 = gamma_aa[index]*t67673*t67676*t67695*4.0;
                double t67798 = t67794+t67795+t67796+t67797;
                double t67799 = gx*t67672*2.0;
                double t67800 = gamma_aa[index]*t67694*t67677*2.0;
                double t67801 = t67800+t67799;
                double t67802 = gamma_aa[index]*gx*t67737*(1.6E1/3.0);
                double t67803 = t67734*t67673*t67694*(1.6E1/3.0);
                double t67804 = t67802+t67803;
                double t67805 = gamma_aa[index]*gx*t67737*8.0;
                double t67806 = gamma_aa[index]*gx*t67673*t67736*t67694*8.0;
                double t67807 = t67734*t67673*t67694*1.6E1;
                double t67808 = t67805+t67806+t67807;
                double t67809 = gamma_aa[index]*gx*t67737*(3.2E1/3.0);
                double t67810 = gamma_aa[index]*gx*t67673*t67736*t67694*3.2E1;
                double t67811 = t67734*t67673*t67694*3.2E1;
                double t67812 = t67744*t67685*t67695*(3.2E1/3.0);
                double t67813 = t67810+t67811+t67812+t67809;
                v_rho_a_gamma_aa_[index] = -t67781*(t67729+t67712*t67715*(t67728-c0p*t67671*t67669*2.0))+rho_a[index]* \
                   t67781*(-t67776+t67712*t67715*(t67776-(1/(t67721*t67721)*t67727*(b2f*c*t67766*(1.0/3.0)+b4f*t67658* \
                   t67767*(2.0/3.0)+b1f*c*t67766*t67768*(1.0/6.0)+b3f*c*t67656*t67766*(1.0/2.0)))/t67724+a1f*c*c0f*t67725* \
                   t67766*(2.0/3.0)-a1p*c*c0p*t67766*t67669*(2.0/3.0))+a1p*c*c0p*t67766*t67669*(2.0/3.0))-rho_a[index]* \
                   (t67729+t67712*t67715*(t67728-t67729))*(ccaa1*gcaa*t67730*t67737*(-8.0/3.0)-ccaa2*gamma_aa[index]* \
                   t67732*t67734*t67674*(3.2E1/3.0)+ccaa1*gamma_aa[index]*t67734*t67735*t67674*8.0+ccaa2*t67734*t67753* \
                   t67673*t67674*t67739*(1.6E1/3.0)+ccaa4*t67750*t67744*t67745*t67675*t67685*(3.2E1/3.0)+ccaa4*t67745* \
                   t67675*t67676*t67685*(gcaa*t67737*(3.2E1/3.0)+gamma_aa[index]*t67734*t67674*6.4E1+gamma_aa[index]* \
                   t67744*t67673*t67675*(1.28E2/3.0)+gcaa*t67673*t67736*t67674*9.6E1)-ccaa1*gcaa*1/(t67680*t67680*t67680) \
                   *t67673*t67736*t67674*(1.6E1/3.0)+ccaa2*t67673*t67674*t67739*t67677*(gcaa*t67737*(1.6E1/3.0)+gamma_aa[index]* \
                   t67734*t67674*(3.2E1/3.0))-ccaa4*gamma_aa[index]*t67731*t67744*t67673*t67675*(1.28E2/3.0)+ccaa2*gamma_aa[index]* \
                   t67674*t67756*t67739*t67677*2.0-ccaa3*gcaa*t67733*t67673*t67736*t67674*2.4E1+ccaa4*gamma_aa[index]* \
                   t67673*t67745*t67675*t67765*t67676*4.0+ccaa3*gcaa*t67760*t67673*t67674*t67738*t67678*3.0-ccaa4*t67750* \
                   1/(t67690*t67690*t67690)*t67675*t67765*t67676*t67685*2.0-ccaa2*t67753*t67673*t67674*1/(t67693*t67693* \
                   t67693)*t67756*t67677*2.0+ccaa3*gamma_aa[index]*gcaa*t67673*t67674*t67738*t67678*(gcaa*t67737*8.0+ \
                   gamma_aa[index]*t67734*t67674*3.2E1+gcaa*t67673*t67736*t67674*2.4E1)+ccaa3*gamma_aa[index]*gcaa*t67743* \
                   t67673*t67736*t67674*t67738*8.0-ccaa3*gamma_aa[index]*gcaa*t67760*t67743*t67673*t67674*1/(t67684*t67684* \
                   t67684)*t67678*2.0)+c0*pow(rho_a[index],4.0/3.0)*(cx1*gx*t67737*t67782*(-8.0/3.0)+cx1*gamma_aa[index]* \
                   t67734*t67694*t67786*8.0-cx2*gamma_aa[index]*t67734*t67694*t67784*(3.2E1/3.0)+cx2*t67801*t67734*t67673* \
                   t67694*t67788*(1.6E1/3.0)+cx4*t67744*t67685*t67793*t67695*t67798*(3.2E1/3.0)+cx4*t67676*t67685*t67793* \
                   t67695*(gx*t67737*(3.2E1/3.0)+gamma_aa[index]*t67734*t67694*6.4E1+gamma_aa[index]*t67744*t67673*t67695* \
                   (1.28E2/3.0)+gx*t67673*t67736*t67694*9.6E1)-cx1*gx*t67673*t67736*t67694*1/(t67697*t67697*t67697)*(1.6E1/ \
                   3.0)+cx2*t67673*t67694*t67677*t67788*(gx*t67737*(1.6E1/3.0)+gamma_aa[index]*t67734*t67694*(3.2E1/3.0) \
                   )+cx2*gamma_aa[index]*t67804*t67694*t67677*t67788*2.0-cx4*gamma_aa[index]*t67744*t67673*t67783*t67695* \
                   (1.28E2/3.0)-cx3*gx*t67673*t67736*t67694*t67785*2.4E1+cx4*gamma_aa[index]*t67813*t67673*t67676*t67793* \
                   t67695*4.0+cx3*gx*t67673*t67808*t67694*t67678*t67787*3.0-cx2*t67801*t67804*t67673*1/(t67709*t67709* \
                   t67709)*t67694*t67677*2.0-cx4*t67813*1/(t67706*t67706*t67706)*t67676*t67685*t67695*t67798*2.0+cx3* \
                   gamma_aa[index]*gx*t67673*t67694*t67678*t67787*(gx*t67737*8.0+gamma_aa[index]*t67734*t67694*3.2E1+ \
                   gx*t67673*t67736*t67694*2.4E1)+cx3*gamma_aa[index]*gx*t67673*t67736*t67792*t67694*t67787*8.0-cx3*gamma_aa[index]* \
                   gx*1/(t67701*t67701*t67701)*t67673*t67808*t67792*t67694*t67678*2.0)+c0*pow(rho_a[index],1.0/3.0)*(cx1* \
                   gx*t67672*t67782-cx1*gamma_aa[index]*t67694*t67677*t67786+cx2*gamma_aa[index]*t67694*t67784*t67677* \
                   2.0-cx2*t67801*t67673*t67694*t67677*t67788-cx4*t67676*t67685*t67793*t67695*t67798+cx4*gamma_aa[index]* \
                   t67673*t67783*t67676*t67695*4.0+cx3*gx*t67673*t67694*t67785*t67678*3.0-cx3*gamma_aa[index]*gx*t67673* \
                   t67792*t67694*t67678*t67787)*(4.0/3.0);
            } else if (rho_b[index] > cutoff_) {
                v_rho_a_gamma_aa_[index] = 0.0;
            } else {
                v_rho_a_gamma_aa_[index] = 0.0;
            } 

            //V_rho_a_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_a_gamma_ab_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_a_gamma_ab_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_a_gamma_ab_[index] = 0.0;
            } else {
                v_rho_a_gamma_ab_[index] = 0.0;
            } 

            //V_rho_a_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t65403 = rho_a[index]+rho_b[index];
                double t65404 = 1/pow(t65403,1.0/3.0);
                double t65405 = c*t65404;
                double t65406 = sqrt(t65405);
                double t65407 = b1p*t65406;
                double t65408 = pow(t65405,3.0/2.0);
                double t65409 = b3p*t65408;
                double t65410 = c*c;
                double t65411 = 1/pow(t65403,2.0/3.0);
                double t65412 = b4p*t65410*t65411;
                double t65413 = b2p*c*t65404;
                double t65414 = t65412+t65413+t65407+t65409;
                double t65415 = 1/pow(t65403,4.0/3.0);
                double t65416 = 1/c0p;
                double t65417 = 1/t65414;
                double t65418 = t65416*t65417*(1.0/2.0);
                double t65419 = t65418+1.0;
                double t65420 = a1p*c*t65404;
                double t65421 = t65420+1.0;
                double t65422 = rho_a[index]-rho_b[index];
                double t65423 = t65422*t65422;
                double t65424 = 1/t65403;
                double t65425 = t65422*t65424;
                double t65426 = two_13*2.0;
                double t65427 = t65426-2.0;
                double t65428 = 1/t65427;
                double t65429 = 1/c0f;
                double t65430 = b1f*t65406;
                double t65431 = b3f*t65408;
                double t65432 = b4f*t65410*t65411;
                double t65433 = b2f*c*t65404;
                double t65434 = t65430+t65431+t65432+t65433;
                double t65435 = 1/t65434;
                double t65436 = t65435*t65429*(1.0/2.0);
                double t65437 = t65436+1.0;
                double t65438 = log(t65437);
                double t65439 = a1f*c*t65404;
                double t65440 = t65439+1.0;
                double t65441 = log(t65419);
                double t65451 = c0f*t65440*t65438*2.0;
                double t65452 = c0p*t65421*t65441*2.0;
                double t65442 = t65451-t65452;
                double t65443 = t65425+1.0;
                double t65444 = pow(t65443,4.0/3.0);
                double t65445 = -t65425+1.0;
                double t65446 = pow(t65445,4.0/3.0);
                double t65447 = t65444+t65446-2.0;
                double t65448 = 1/(t65403*t65403);
                double t65479 = t65422*t65448;
                double t65449 = t65424-t65479;
                double t65450 = 1/(t65403*t65403*t65403*t65403);
                double t65453 = t65423*t65423;
                double t65454 = 1/pow(t65403,5.0/3.0);
                double t65455 = 1/sqrt(t65405);
                double t65456 = 1/t65419;
                double t65457 = 1/(t65414*t65414);
                double t65458 = b4p*t65410*t65454*(2.0/3.0);
                double t65459 = b2p*c*t65415*(1.0/3.0);
                double t65460 = b1p*c*t65415*t65455*(1.0/6.0);
                double t65461 = b3p*c*t65406*t65415*(1.0/2.0);
                double t65462 = t65460+t65461+t65458+t65459;
                double t65463 = t65421*t65462*t65456*t65457;
                double t65464 = 1/(t65403*t65403*t65403*t65403*t65403);
                double t65465 = 1/d2fz0;
                double t65466 = 1/Aa;
                double t65467 = b1a*t65406;
                double t65468 = b3a*t65408;
                double t65469 = b4a*t65410*t65411;
                double t65470 = b2a*c*t65404;
                double t65471 = t65470+t65467+t65468+t65469;
                double t65472 = 1/t65471;
                double t65473 = t65472*t65466*(1.0/2.0);
                double t65474 = t65473+1.0;
                double t65475 = log(t65474);
                double t65476 = a1a*c*t65404;
                double t65477 = t65476+1.0;
                double t65478 = pow(t65443,1.0/3.0);
                double t65480 = t65449*t65478*(4.0/3.0);
                double t65481 = pow(t65445,1.0/3.0);
                double t65482 = t65480-t65481*t65449*(4.0/3.0);
                double t65483 = t65450*t65453;
                double t65484 = t65483-1.0;
                double t65485 = 1/pow(rho_a[index],1.0/3.0);
                double t65486 = c*t65485;
                double t65487 = sqrt(t65486);
                double t65488 = b1f*t65487;
                double t65489 = pow(t65486,3.0/2.0);
                double t65490 = b3f*t65489;
                double t65491 = 1/pow(rho_a[index],2.0/3.0);
                double t65492 = b4f*t65410*t65491;
                double t65493 = b2f*c*t65485;
                double t65494 = t65490+t65492+t65493+t65488;
                double t65495 = 1/pow(rho_a[index],4.0/3.0);
                double t65496 = b1p*t65487;
                double t65497 = b3p*t65489;
                double t65498 = b4p*t65410*t65491;
                double t65499 = b2p*c*t65485;
                double t65500 = t65496+t65497+t65498+t65499;
                double t65501 = 1/pow(rho_a[index],5.0/3.0);
                double t65502 = 1/sqrt(t65486);
                double t65503 = 1/t65494;
                double t65504 = t65503*t65429*(1.0/2.0);
                double t65505 = t65504+1.0;
                double t65506 = 1/t65500;
                double t65507 = t65416*t65506*(1.0/2.0);
                double t65508 = t65507+1.0;
                double t65509 = a1p*c*t65485;
                double t65510 = t65509+1.0;
                double t65511 = 1/t65508;
                double t65512 = 1/(t65500*t65500);
                double t65513 = b4p*t65410*t65501*(2.0/3.0);
                double t65514 = b2p*c*t65495*(1.0/3.0);
                double t65515 = b1p*c*t65502*t65495*(1.0/6.0);
                double t65516 = b3p*c*t65495*t65487*(1.0/2.0);
                double t65517 = t65513+t65514+t65515+t65516;
                double t65518 = t65510*t65511*t65512*t65517;
                double t65519 = log(t65508);
                double t65520 = pow(2.0,1.0/3.0);
                double t65521 = t65520*2.0;
                double t65522 = t65521-2.0;
                double t65523 = log(t65505);
                double t65524 = a1f*c*t65485;
                double t65525 = t65524+1.0;
                double t65526 = 1/pow(rho_b[index],8.0/3.0);
                double t65527 = 1/pow(rho_a[index],8.0/3.0);
                double t65528 = gamma_aa[index]*t65527*(1.0/2.0);
                double t65529 = gamma_bb[index]*t65526*(1.0/2.0);
                double t65530 = t65528+t65529;
                double t65531 = gcab*t65530;
                double t65532 = t65531+1.0;
                double t65533 = gcab*gcab;
                double t65534 = t65530*t65530;
                double t65535 = t65533*t65533;
                double t65536 = t65534*t65534;
                double t65537 = t65533*t65534;
                double t65538 = gcab*t65530*2.0;
                double t65539 = t65537+t65538+1.0;
                double t65540 = t65533*t65534*3.0;
                double t65541 = gcab*t65530*t65533*t65534;
                double t65542 = gcab*t65530*3.0;
                double t65543 = t65540+t65541+t65542+1.0;
                double t65544 = t65533*t65534*6.0;
                double t65545 = gcab*t65530*t65533*t65534*4.0;
                double t65546 = t65535*t65536;
                double t65547 = gcab*t65530*4.0;
                double t65548 = t65544+t65545+t65546+t65547+1.0;
                double t65549 = c0f*t65523*t65525*2.0;
                double t65551 = c0p*t65510*t65519*2.0;
                double t65550 = -t65551+t65549;
                double t65552 = 1/pow(rho_b[index],1.0/3.0);
                double t65553 = c*t65552;
                double t65554 = sqrt(t65553);
                double t65555 = pow(t65553,3.0/2.0);
                double t65556 = 1/pow(rho_b[index],2.0/3.0);
                double t65557 = b1p*t65554;
                double t65558 = b3p*t65555;
                double t65559 = b4p*t65410*t65556;
                double t65560 = b2p*c*t65552;
                double t65561 = t65560+t65557+t65558+t65559;
                double t65562 = 1/t65561;
                double t65563 = t65416*t65562*(1.0/2.0);
                double t65564 = t65563+1.0;
                double t65565 = log(t65564);
                double t65566 = a1p*c*t65552;
                double t65567 = t65566+1.0;
                double t65568 = c0p*t65565*t65567*2.0;
                double t65569 = t65450*t65442*t65453*t65428*t65447;
                double t65570 = Aa*t65428*t65447*t65465*t65475*t65484*t65477*2.0;
                double t65571 = 1/pow(rho_a[index],1.1E1/3.0);
                double t65572 = 1/(t65543*t65543);
                double t65573 = 1/(t65548*t65548);
                double t65574 = gcab*t65526*2.0;
                double t65575 = t65530*t65533*t65526*6.0;
                double t65576 = gcab*t65533*t65534*t65526*6.0;
                double t65577 = t65530*t65534*t65526*t65535*2.0;
                double t65578 = t65574+t65575+t65576+t65577;
                double t65579 = 1/(t65539*t65539);
                double t65580 = gamma_aa[index]*gcab*t65571*(8.0/3.0);
                double t65581 = gamma_aa[index]*t65530*t65533*t65571*(8.0/3.0);
                double t65582 = t65580+t65581;
                double t65583 = gcab*t65526;
                double t65584 = t65530*t65533*t65526;
                double t65585 = t65583+t65584;
                double t65586 = gamma_aa[index]*gcab*t65571*(1.6E1/3.0);
                double t65587 = gamma_aa[index]*gcab*t65533*t65534*t65571*1.6E1;
                double t65588 = gamma_aa[index]*t65530*t65534*t65535*t65571*(1.6E1/3.0);
                double t65589 = gamma_aa[index]*t65530*t65533*t65571*1.6E1;
                double t65590 = t65586+t65587+t65588+t65589;
                double t65591 = 1/(t65532*t65532);
                double t65592 = 1/t65539;
                double t65593 = gcab*t65526*(3.0/2.0);
                double t65594 = t65530*t65533*t65526*3.0;
                double t65595 = gcab*t65533*t65534*t65526*(3.0/2.0);
                double t65596 = t65593+t65594+t65595;
                double t65597 = gamma_aa[index]*gcab*t65571*4.0;
                double t65598 = gamma_aa[index]*gcab*t65533*t65534*t65571*4.0;
                double t65599 = gamma_aa[index]*t65530*t65533*t65571*8.0;
                double t65600 = t65597+t65598+t65599;
                double t65601 = 1/t65543;
                double t65602 = 1/t65548;
                v_rho_a_gamma_bb_[index] = -(t65452+t65570+t65569+t65403*(t65463-t65450*t65453*t65428*t65447*(t65463- \
                   (t65440*1/(t65434*t65434)*(b2f*c*t65415*(1.0/3.0)+b4f*t65410*t65454*(2.0/3.0)+b1f*c*t65415*t65455* \
                   (1.0/6.0)+b3f*c*t65406*t65415*(1.0/2.0)))/t65437+a1f*c*c0f*t65415*t65438*(2.0/3.0)-a1p*c*c0p*t65441* \
                   t65415*(2.0/3.0))-a1p*c*c0p*t65441*t65415*(2.0/3.0)+t65450*t65442*t65453*t65428*t65482-t65442*t65453* \
                   t65428*t65464*t65447*4.0+t65422*t65423*t65450*t65442*t65428*t65447*4.0-Aa*t65428*t65447*t65465*t65475* \
                   t65477*(t65453*t65464*4.0-t65422*t65423*t65450*4.0)*2.0+Aa*t65428*t65482*t65465*t65475*t65484*t65477* \
                   2.0+(1/(t65471*t65471)*t65428*t65447*t65465*t65484*t65477*(b2a*c*t65415*(1.0/3.0)+b4a*t65410*t65454* \
                   (2.0/3.0)+b1a*c*t65415*t65455*(1.0/6.0)+b3a*c*t65406*t65415*(1.0/2.0)))/t65474-Aa*a1a*c*t65415*t65428* \
                   t65447*t65465*t65475*t65484*(2.0/3.0))+rho_a[index]*(-t65518+t65522*t65428*(t65518-(t65525*1/(t65494* \
                   t65494)*(b2f*c*t65495*(1.0/3.0)+b4f*t65410*t65501*(2.0/3.0)+b1f*c*t65502*t65495*(1.0/6.0)+b3f*c*t65495* \
                   t65487*(1.0/2.0)))/t65505+a1f*c*c0f*t65523*t65495*(2.0/3.0)-a1p*c*c0p*t65519*t65495*(2.0/3.0))+a1p* \
                   c*c0p*t65519*t65495*(2.0/3.0))-c0p*t65510*t65519*2.0-t65522*t65550*t65428)*((ccab1*gcab*t65526*(1.0/ \
                   2.0))/t65532-ccab1*t65530*t65533*t65526*t65591*(1.0/2.0)+ccab2*t65530*t65533*t65526*t65592-ccab2*t65533* \
                   t65534*t65585*t65579-ccab4*t65535*t65536*t65573*t65578+ccab4*t65530*t65602*t65534*t65526*t65535*2.0+ \
                   ccab3*gcab*t65601*t65533*t65534*t65526*(3.0/2.0)-ccab3*gcab*t65530*t65533*t65534*t65572*t65596)+(rho_a[index]* \
                   (t65551+t65522*t65550*t65428)+rho_b[index]*(t65568-t65522*t65428*(t65568-c0f*log((t65429*(1.0/2.0) \
                   )/(b1f*t65554+b3f*t65555+b2f*c*t65552+b4f*t65410*t65556)+1.0)*(a1f*c*t65552+1.0)*2.0))-t65403*(t65452+ \
                   t65570+t65569))*(ccab4*t65535*t65536*t65573*(gamma_aa[index]*t65533*t65526*t65571*8.0+gamma_aa[index]* \
                   t65534*t65526*t65535*t65571*8.0+gamma_aa[index]*gcab*t65530*t65533*t65526*t65571*1.6E1)+ccab2*t65530* \
                   t65533*t65526*t65582*t65579-ccab2*t65533*t65534*t65582*1/(t65539*t65539*t65539)*t65585*2.0-ccab4*t65535* \
                   t65536*t65590*1/(t65548*t65548*t65548)*t65578*2.0+ccab1*gamma_aa[index]*t65533*t65526*t65571*t65591* \
                   (4.0/3.0)-ccab2*gamma_aa[index]*t65533*t65526*t65571*t65592*(4.0/3.0)-ccab4*gamma_aa[index]*t65602* \
                   t65534*t65526*t65535*t65571*8.0+ccab2*gamma_aa[index]*t65530*t65533*t65571*t65585*t65579*(8.0/3.0) \
                   +ccab2*gamma_aa[index]*t65534*t65526*t65535*t65571*t65579*(4.0/3.0)+ccab3*gcab*t65600*t65533*t65534* \
                   t65526*t65572*(3.0/2.0)+ccab4*t65530*t65534*t65526*t65535*t65590*t65573*2.0+ccab3*gcab*t65530*t65533* \
                   t65534*t65572*(gamma_aa[index]*t65533*t65526*t65571*4.0+gamma_aa[index]*gcab*t65530*t65533*t65526* \
                   t65571*4.0)-ccab1*gamma_aa[index]*gcab*t65530*1/(t65532*t65532*t65532)*t65533*t65526*t65571*(4.0/3.0) \
                   -ccab3*gcab*t65600*t65530*t65533*t65534*1/(t65543*t65543*t65543)*t65596*2.0-ccab3*gamma_aa[index]* \
                   gcab*t65601*t65530*t65533*t65526*t65571*4.0+ccab3*gamma_aa[index]*gcab*t65533*t65534*t65571*t65572* \
                   t65596*4.0+ccab4*gamma_aa[index]*t65530*t65534*t65535*t65571*t65573*t65578*(1.6E1/3.0));
            } else if (rho_a[index] > cutoff_) {
                v_rho_a_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_a_gamma_bb_[index] = 0.0;
            } else {
                v_rho_a_gamma_bb_[index] = 0.0;
            } 

            //V_rho_b_gamma_aa
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t65604 = rho_a[index]+rho_b[index];
                double t65605 = 1/pow(t65604,1.0/3.0);
                double t65606 = c*t65605;
                double t65607 = sqrt(t65606);
                double t65608 = b1p*t65607;
                double t65609 = pow(t65606,3.0/2.0);
                double t65610 = b3p*t65609;
                double t65611 = c*c;
                double t65612 = 1/pow(t65604,2.0/3.0);
                double t65613 = b4p*t65611*t65612;
                double t65614 = b2p*c*t65605;
                double t65615 = t65610+t65613+t65614+t65608;
                double t65616 = 1/pow(t65604,4.0/3.0);
                double t65617 = 1/c0p;
                double t65618 = 1/t65615;
                double t65619 = t65617*t65618*(1.0/2.0);
                double t65620 = t65619+1.0;
                double t65621 = a1p*c*t65605;
                double t65622 = t65621+1.0;
                double t65623 = rho_a[index]-rho_b[index];
                double t65624 = t65623*t65623;
                double t65625 = 1/t65604;
                double t65626 = t65623*t65625;
                double t65627 = two_13*2.0;
                double t65628 = t65627-2.0;
                double t65629 = 1/t65628;
                double t65630 = 1/c0f;
                double t65631 = b1f*t65607;
                double t65632 = b3f*t65609;
                double t65633 = b4f*t65611*t65612;
                double t65634 = b2f*c*t65605;
                double t65635 = t65631+t65632+t65633+t65634;
                double t65636 = 1/t65635;
                double t65637 = t65630*t65636*(1.0/2.0);
                double t65638 = t65637+1.0;
                double t65639 = log(t65638);
                double t65640 = a1f*c*t65605;
                double t65641 = t65640+1.0;
                double t65642 = log(t65620);
                double t65653 = c0f*t65641*t65639*2.0;
                double t65654 = c0p*t65622*t65642*2.0;
                double t65643 = t65653-t65654;
                double t65644 = t65626+1.0;
                double t65645 = pow(t65644,4.0/3.0);
                double t65646 = -t65626+1.0;
                double t65647 = pow(t65646,4.0/3.0);
                double t65648 = t65645+t65647-2.0;
                double t65649 = 1/(t65604*t65604);
                double t65650 = t65623*t65649;
                double t65651 = t65650+t65625;
                double t65652 = 1/(t65604*t65604*t65604*t65604);
                double t65655 = t65624*t65624;
                double t65656 = 1/pow(t65604,5.0/3.0);
                double t65657 = 1/sqrt(t65606);
                double t65658 = 1/t65620;
                double t65659 = 1/(t65615*t65615);
                double t65660 = b4p*t65611*t65656*(2.0/3.0);
                double t65661 = b2p*c*t65616*(1.0/3.0);
                double t65662 = b1p*c*t65616*t65657*(1.0/6.0);
                double t65663 = b3p*c*t65607*t65616*(1.0/2.0);
                double t65664 = t65660+t65661+t65662+t65663;
                double t65665 = 1/(t65604*t65604*t65604*t65604*t65604);
                double t65666 = 1/d2fz0;
                double t65667 = 1/Aa;
                double t65668 = b1a*t65607;
                double t65669 = b3a*t65609;
                double t65670 = b4a*t65611*t65612;
                double t65671 = b2a*c*t65605;
                double t65672 = t65670+t65671+t65668+t65669;
                double t65673 = 1/t65672;
                double t65674 = t65673*t65667*(1.0/2.0);
                double t65675 = t65674+1.0;
                double t65676 = log(t65675);
                double t65677 = a1a*c*t65605;
                double t65678 = t65677+1.0;
                double t65679 = pow(t65644,1.0/3.0);
                double t65680 = t65651*t65679*(4.0/3.0);
                double t65681 = pow(t65646,1.0/3.0);
                double t65682 = t65680-t65651*t65681*(4.0/3.0);
                double t65683 = t65652*t65655;
                double t65684 = t65683-1.0;
                double t65685 = 1/pow(rho_b[index],1.0/3.0);
                double t65686 = c*t65685;
                double t65687 = sqrt(t65686);
                double t65688 = b1f*t65687;
                double t65689 = pow(t65686,3.0/2.0);
                double t65690 = b3f*t65689;
                double t65691 = 1/pow(rho_b[index],2.0/3.0);
                double t65692 = b4f*t65611*t65691;
                double t65693 = b2f*c*t65685;
                double t65694 = t65690+t65692+t65693+t65688;
                double t65695 = 1/pow(rho_b[index],4.0/3.0);
                double t65696 = b1p*t65687;
                double t65697 = b3p*t65689;
                double t65698 = b4p*t65611*t65691;
                double t65699 = b2p*c*t65685;
                double t65700 = t65696+t65697+t65698+t65699;
                double t65701 = 1/pow(rho_b[index],5.0/3.0);
                double t65702 = 1/sqrt(t65686);
                double t65703 = 1/t65694;
                double t65704 = t65630*t65703*(1.0/2.0);
                double t65705 = t65704+1.0;
                double t65706 = 1/t65700;
                double t65707 = t65706*t65617*(1.0/2.0);
                double t65708 = t65707+1.0;
                double t65709 = a1p*c*t65685;
                double t65710 = t65709+1.0;
                double t65711 = 1/t65708;
                double t65712 = 1/(t65700*t65700);
                double t65713 = b4p*t65611*t65701*(2.0/3.0);
                double t65714 = b2p*c*t65695*(1.0/3.0);
                double t65715 = b1p*c*t65702*t65695*(1.0/6.0);
                double t65716 = b3p*c*t65695*t65687*(1.0/2.0);
                double t65717 = t65713+t65714+t65715+t65716;
                double t65718 = t65710*t65711*t65712*t65717;
                double t65719 = log(t65708);
                double t65720 = pow(2.0,1.0/3.0);
                double t65721 = t65720*2.0;
                double t65722 = t65721-2.0;
                double t65723 = log(t65705);
                double t65724 = a1f*c*t65685;
                double t65725 = t65724+1.0;
                double t65726 = 1/pow(rho_a[index],8.0/3.0);
                double t65727 = gamma_aa[index]*t65726*(1.0/2.0);
                double t65728 = 1/pow(rho_b[index],8.0/3.0);
                double t65729 = gamma_bb[index]*t65728*(1.0/2.0);
                double t65730 = t65727+t65729;
                double t65731 = gcab*t65730;
                double t65732 = t65731+1.0;
                double t65733 = gcab*gcab;
                double t65734 = t65730*t65730;
                double t65735 = t65733*t65733;
                double t65736 = t65734*t65734;
                double t65737 = t65733*t65734;
                double t65738 = gcab*t65730*2.0;
                double t65739 = t65737+t65738+1.0;
                double t65740 = t65733*t65734*3.0;
                double t65741 = gcab*t65730*t65733*t65734;
                double t65742 = gcab*t65730*3.0;
                double t65743 = t65740+t65741+t65742+1.0;
                double t65744 = t65733*t65734*6.0;
                double t65745 = gcab*t65730*t65733*t65734*4.0;
                double t65746 = t65735*t65736;
                double t65747 = gcab*t65730*4.0;
                double t65748 = t65744+t65745+t65746+t65747+1.0;
                double t65749 = a1p*c*c0p*t65642*t65616*(2.0/3.0);
                double t65750 = 1/pow(rho_a[index],1.0/3.0);
                double t65751 = c*t65750;
                double t65752 = sqrt(t65751);
                double t65753 = pow(t65751,3.0/2.0);
                double t65754 = 1/pow(rho_a[index],2.0/3.0);
                double t65755 = b1p*t65752;
                double t65756 = b3p*t65753;
                double t65757 = b4p*t65611*t65754;
                double t65758 = b2p*c*t65750;
                double t65759 = t65755+t65756+t65757+t65758;
                double t65760 = 1/t65759;
                double t65761 = t65760*t65617*(1.0/2.0);
                double t65762 = t65761+1.0;
                double t65763 = log(t65762);
                double t65764 = a1p*c*t65750;
                double t65765 = t65764+1.0;
                double t65766 = c0p*t65763*t65765*2.0;
                double t65767 = c0f*t65723*t65725*2.0;
                double t65769 = c0p*t65710*t65719*2.0;
                double t65768 = t65767-t65769;
                double t65770 = t65643*t65652*t65655*t65629*t65648;
                double t65771 = Aa*t65629*t65648*t65666*t65684*t65676*t65678*2.0;
                double t65772 = 1/pow(rho_b[index],1.1E1/3.0);
                double t65773 = 1/(t65743*t65743);
                double t65774 = 1/(t65748*t65748);
                double t65775 = gcab*t65726*2.0;
                double t65776 = t65730*t65733*t65726*6.0;
                double t65777 = gcab*t65733*t65734*t65726*6.0;
                double t65778 = t65730*t65734*t65726*t65735*2.0;
                double t65779 = t65775+t65776+t65777+t65778;
                double t65780 = 1/(t65739*t65739);
                double t65781 = gamma_bb[index]*gcab*t65772*(8.0/3.0);
                double t65782 = gamma_bb[index]*t65730*t65733*t65772*(8.0/3.0);
                double t65783 = t65781+t65782;
                double t65784 = gcab*t65726;
                double t65785 = t65730*t65733*t65726;
                double t65786 = t65784+t65785;
                double t65787 = gamma_bb[index]*gcab*t65772*(1.6E1/3.0);
                double t65788 = gamma_bb[index]*gcab*t65733*t65734*t65772*1.6E1;
                double t65789 = gamma_bb[index]*t65730*t65734*t65735*t65772*(1.6E1/3.0);
                double t65790 = gamma_bb[index]*t65730*t65733*t65772*1.6E1;
                double t65791 = t65790+t65787+t65788+t65789;
                double t65792 = 1/(t65732*t65732);
                double t65793 = 1/t65739;
                double t65794 = gcab*t65726*(3.0/2.0);
                double t65795 = t65730*t65733*t65726*3.0;
                double t65796 = gcab*t65733*t65734*t65726*(3.0/2.0);
                double t65797 = t65794+t65795+t65796;
                double t65798 = gamma_bb[index]*gcab*t65772*4.0;
                double t65799 = gamma_bb[index]*gcab*t65733*t65734*t65772*4.0;
                double t65800 = gamma_bb[index]*t65730*t65733*t65772*8.0;
                double t65801 = t65800+t65798+t65799;
                double t65802 = 1/t65743;
                double t65803 = 1/t65748;
                v_rho_b_gamma_aa_[index] = (rho_b[index]*(t65769+t65722*t65629*t65768)+rho_a[index]*(t65766-t65722* \
                   t65629*(t65766-c0f*log((t65630*(1.0/2.0))/(b1f*t65752+b3f*t65753+b2f*c*t65750+b4f*t65611*t65754)+1.0) \
                   *(a1f*c*t65750+1.0)*2.0))-t65604*(t65770+t65654+t65771))*(ccab4*t65735*t65736*t65774*(gamma_bb[index]* \
                   t65733*t65726*t65772*8.0+gamma_bb[index]*t65734*t65726*t65735*t65772*8.0+gamma_bb[index]*gcab*t65730* \
                   t65733*t65726*t65772*1.6E1)+ccab2*t65730*t65733*t65726*t65780*t65783-ccab2*t65733*t65734*t65783*1/ \
                   (t65739*t65739*t65739)*t65786*2.0-ccab4*t65735*t65736*t65791*1/(t65748*t65748*t65748)*t65779*2.0+ccab1* \
                   gamma_bb[index]*t65733*t65726*t65772*t65792*(4.0/3.0)-ccab2*gamma_bb[index]*t65733*t65726*t65772*t65793* \
                   (4.0/3.0)-ccab4*gamma_bb[index]*t65803*t65734*t65726*t65735*t65772*8.0+ccab2*gamma_bb[index]*t65730* \
                   t65733*t65780*t65772*t65786*(8.0/3.0)+ccab2*gamma_bb[index]*t65734*t65726*t65735*t65780*t65772*(4.0/ \
                   3.0)+ccab3*gcab*t65801*t65733*t65734*t65726*t65773*(3.0/2.0)+ccab4*t65730*t65734*t65726*t65735*t65791* \
                   t65774*2.0+ccab3*gcab*t65730*t65733*t65734*t65773*(gamma_bb[index]*t65733*t65726*t65772*4.0+gamma_bb[index]* \
                   gcab*t65730*t65733*t65726*t65772*4.0)-ccab1*gamma_bb[index]*gcab*t65730*1/(t65732*t65732*t65732)*t65733* \
                   t65726*t65772*(4.0/3.0)-ccab3*gcab*t65801*t65730*t65733*t65734*1/(t65743*t65743*t65743)*t65797*2.0- \
                   ccab3*gamma_bb[index]*gcab*t65730*t65802*t65733*t65726*t65772*4.0+ccab3*gamma_bb[index]*gcab*t65733* \
                   t65734*t65772*t65773*t65797*4.0+ccab4*gamma_bb[index]*t65730*t65734*t65735*t65772*t65774*t65779*(1.6E1/ \
                   3.0))-(t65770+t65654+t65771+rho_b[index]*(-t65718+t65722*t65629*(t65718-(t65725*1/(t65694*t65694)* \
                   (b2f*c*t65695*(1.0/3.0)+b4f*t65611*t65701*(2.0/3.0)+b1f*c*t65702*t65695*(1.0/6.0)+b3f*c*t65695*t65687* \
                   (1.0/2.0)))/t65705+a1f*c*c0f*t65723*t65695*(2.0/3.0)-a1p*c*c0p*t65719*t65695*(2.0/3.0))+a1p*c*c0p* \
                   t65719*t65695*(2.0/3.0))-t65604*(t65749-t65622*t65664*t65658*t65659+t65643*t65652*t65655*t65682*t65629+ \
                   t65643*t65655*t65629*t65665*t65648*4.0-t65652*t65655*t65629*t65648*(t65749-t65622*t65664*t65658*t65659+ \
                   (t65641*1/(t65635*t65635)*(b2f*c*t65616*(1.0/3.0)+b4f*t65611*t65656*(2.0/3.0)+b1f*c*t65616*t65657* \
                   (1.0/6.0)+b3f*c*t65607*t65616*(1.0/2.0)))/t65638-a1f*c*c0f*t65616*t65639*(2.0/3.0))+t65623*t65624* \
                   t65643*t65652*t65629*t65648*4.0+Aa*t65629*t65648*t65666*t65676*t65678*(t65655*t65665*4.0+t65623*t65624* \
                   t65652*4.0)*2.0+Aa*t65682*t65629*t65666*t65684*t65676*t65678*2.0-(1/(t65672*t65672)*t65629*t65648* \
                   t65666*t65684*t65678*(b2a*c*t65616*(1.0/3.0)+b4a*t65611*t65656*(2.0/3.0)+b1a*c*t65616*t65657*(1.0/ \
                   6.0)+b3a*c*t65607*t65616*(1.0/2.0)))/t65675+Aa*a1a*c*t65616*t65629*t65648*t65666*t65684*t65676*(2.0/ \
                   3.0))-c0p*t65710*t65719*2.0-t65722*t65629*t65768)*((ccab1*gcab*t65726*(1.0/2.0))/t65732-ccab1*t65730* \
                   t65733*t65726*t65792*(1.0/2.0)+ccab2*t65730*t65733*t65726*t65793-ccab2*t65733*t65734*t65780*t65786- \
                   ccab4*t65735*t65736*t65774*t65779+ccab4*t65730*t65803*t65734*t65726*t65735*2.0+ccab3*gcab*t65802*t65733* \
                   t65734*t65726*(3.0/2.0)-ccab3*gcab*t65730*t65733*t65734*t65773*t65797);
            } else if (rho_a[index] > cutoff_) {
                v_rho_b_gamma_aa_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_b_gamma_aa_[index] = 0.0;
            } else {
                v_rho_b_gamma_aa_[index] = 0.0;
            } 

            //V_rho_b_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_b_gamma_ab_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_b_gamma_ab_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_b_gamma_ab_[index] = 0.0;
            } else {
                v_rho_b_gamma_ab_[index] = 0.0;
            } 

            //V_rho_b_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t65806 = 1/pow(rho_b[index],1.0/3.0);
                double t65807 = c*t65806;
                double t65808 = sqrt(t65807);
                double t65809 = pow(t65807,3.0/2.0);
                double t65810 = c*c;
                double t65811 = 1/pow(rho_b[index],2.0/3.0);
                double t65812 = 1/c0p;
                double t65813 = b1p*t65808;
                double t65814 = b3p*t65809;
                double t65815 = b4p*t65810*t65811;
                double t65816 = b2p*c*t65806;
                double t65817 = t65813+t65814+t65815+t65816;
                double t65818 = 1/t65817;
                double t65819 = t65812*t65818*(1.0/2.0);
                double t65820 = t65819+1.0;
                double t65821 = log(t65820);
                double t65822 = a1p*c*t65806;
                double t65823 = t65822+1.0;
                double t65824 = 1/pow(rho_b[index],8.0/3.0);
                double t65825 = gamma_bb[index]*gamma_bb[index];
                double t65826 = gcaa*gcaa;
                double t65827 = t65826*t65826;
                double t65828 = 1/pow(rho_b[index],3.2E1/3.0);
                double t65829 = 1/pow(rho_b[index],1.6E1/3.0);
                double t65830 = 1/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]);
                double t65831 = gamma_bb[index]*gcaa*t65824;
                double t65832 = t65831+1.0;
                double t65833 = gamma_bb[index]*gcaa*t65824*3.0;
                double t65834 = gamma_bb[index]*gcaa*t65830*t65825*t65826;
                double t65835 = t65825*t65826*t65829*3.0;
                double t65836 = t65833+t65834+t65835+1.0;
                double t65837 = t65825*t65825;
                double t65838 = gamma_bb[index]*gcaa*t65824*4.0;
                double t65839 = gamma_bb[index]*gcaa*t65830*t65825*t65826*4.0;
                double t65840 = t65825*t65826*t65829*6.0;
                double t65841 = t65827*t65828*t65837;
                double t65842 = t65840+t65841+t65838+t65839+1.0;
                double t65843 = gamma_bb[index]*gcaa*t65824*2.0;
                double t65844 = t65825*t65826*t65829;
                double t65845 = t65843+t65844+1.0;
                double t65846 = rho_a[index]+rho_b[index];
                double t65847 = 1/pow(t65846,1.0/3.0);
                double t65848 = c*t65847;
                double t65849 = sqrt(t65848);
                double t65850 = b1p*t65849;
                double t65851 = pow(t65848,3.0/2.0);
                double t65852 = b3p*t65851;
                double t65853 = 1/pow(t65846,2.0/3.0);
                double t65854 = b4p*t65810*t65853;
                double t65855 = b2p*c*t65847;
                double t65856 = t65850+t65852+t65854+t65855;
                double t65857 = 1/pow(t65846,4.0/3.0);
                double t65858 = two_13*2.0;
                double t65859 = t65858-2.0;
                double t65860 = 1/t65859;
                double t65861 = 1/c0f;
                double t65862 = 1/t65856;
                double t65863 = t65812*t65862*(1.0/2.0);
                double t65864 = t65863+1.0;
                double t65865 = a1p*c*t65847;
                double t65866 = t65865+1.0;
                double t65867 = rho_a[index]-rho_b[index];
                double t65868 = t65867*t65867;
                double t65869 = 1/t65846;
                double t65870 = t65867*t65869;
                double t65871 = b1f*t65849;
                double t65872 = b3f*t65851;
                double t65873 = b4f*t65810*t65853;
                double t65874 = b2f*c*t65847;
                double t65875 = t65871+t65872+t65873+t65874;
                double t65876 = 1/t65875;
                double t65877 = t65861*t65876*(1.0/2.0);
                double t65878 = t65877+1.0;
                double t65879 = log(t65878);
                double t65880 = a1f*c*t65847;
                double t65881 = t65880+1.0;
                double t65882 = log(t65864);
                double t65893 = c0f*t65881*t65879*2.0;
                double t65894 = c0p*t65882*t65866*2.0;
                double t65883 = t65893-t65894;
                double t65884 = t65870+1.0;
                double t65885 = pow(t65884,4.0/3.0);
                double t65886 = -t65870+1.0;
                double t65887 = pow(t65886,4.0/3.0);
                double t65888 = t65885+t65887-2.0;
                double t65889 = 1/(t65846*t65846);
                double t65890 = t65867*t65889;
                double t65891 = t65890+t65869;
                double t65892 = 1/(t65846*t65846*t65846*t65846);
                double t65895 = t65868*t65868;
                double t65896 = 1/pow(t65846,5.0/3.0);
                double t65897 = 1/sqrt(t65848);
                double t65898 = 1/t65864;
                double t65899 = 1/(t65856*t65856);
                double t65900 = b4p*t65810*t65896*(2.0/3.0);
                double t65901 = b2p*c*t65857*(1.0/3.0);
                double t65902 = b1p*c*t65857*t65897*(1.0/6.0);
                double t65903 = b3p*c*t65857*t65849*(1.0/2.0);
                double t65904 = t65900+t65901+t65902+t65903;
                double t65905 = 1/(t65846*t65846*t65846*t65846*t65846);
                double t65906 = 1/d2fz0;
                double t65907 = 1/Aa;
                double t65908 = b1a*t65849;
                double t65909 = b3a*t65851;
                double t65910 = b4a*t65810*t65853;
                double t65911 = b2a*c*t65847;
                double t65912 = t65910+t65911+t65908+t65909;
                double t65913 = 1/t65912;
                double t65914 = t65913*t65907*(1.0/2.0);
                double t65915 = t65914+1.0;
                double t65916 = log(t65915);
                double t65917 = a1a*c*t65847;
                double t65918 = t65917+1.0;
                double t65919 = pow(t65884,1.0/3.0);
                double t65920 = t65891*t65919*(4.0/3.0);
                double t65921 = pow(t65886,1.0/3.0);
                double t65922 = t65920-t65921*t65891*(4.0/3.0);
                double t65923 = t65892*t65895;
                double t65924 = t65923-1.0;
                double t65925 = pow(2.0,1.0/3.0);
                double t65926 = t65925*2.0;
                double t65927 = t65926-2.0;
                double t65928 = a1f*c*t65806;
                double t65929 = t65928+1.0;
                double t65930 = b1f*t65808;
                double t65931 = b3f*t65809;
                double t65932 = b4f*t65810*t65811;
                double t65933 = b2f*c*t65806;
                double t65934 = t65930+t65931+t65932+t65933;
                double t65935 = 1/t65934;
                double t65936 = t65861*t65935*(1.0/2.0);
                double t65937 = t65936+1.0;
                double t65938 = 1/pow(rho_b[index],4.0/3.0);
                double t65939 = 1/pow(rho_b[index],5.0/3.0);
                double t65940 = 1/sqrt(t65807);
                double t65941 = log(t65937);
                double t65942 = 1/t65820;
                double t65943 = 1/(t65817*t65817);
                double t65944 = b4p*t65810*t65939*(2.0/3.0);
                double t65945 = b2p*c*t65938*(1.0/3.0);
                double t65946 = b1p*c*t65940*t65938*(1.0/6.0);
                double t65947 = b3p*c*t65808*t65938*(1.0/2.0);
                double t65948 = t65944+t65945+t65946+t65947;
                double t65949 = t65823*t65942*t65943*t65948;
                double t65950 = c0f*t65941*t65929*2.0;
                double t65951 = c0p*t65821*t65823*2.0;
                double t65952 = 1/pow(rho_a[index],8.0/3.0);
                double t65953 = gamma_aa[index]*t65952*(1.0/2.0);
                double t65954 = gamma_bb[index]*t65824*(1.0/2.0);
                double t65955 = t65953+t65954;
                double t65956 = gcab*t65955;
                double t65957 = t65956+1.0;
                double t65958 = gcab*gcab;
                double t65959 = t65955*t65955;
                double t65960 = t65958*t65958;
                double t65961 = t65959*t65959;
                double t65962 = t65958*t65959;
                double t65963 = gcab*t65955*2.0;
                double t65964 = t65962+t65963+1.0;
                double t65965 = t65958*t65959*3.0;
                double t65966 = gcab*t65955*t65958*t65959;
                double t65967 = gcab*t65955*3.0;
                double t65968 = t65965+t65966+t65967+1.0;
                double t65969 = t65958*t65959*6.0;
                double t65970 = gcab*t65955*t65958*t65959*4.0;
                double t65971 = t65960*t65961;
                double t65972 = gcab*t65955*4.0;
                double t65973 = t65970+t65971+t65972+t65969+1.0;
                double t65974 = a1p*c*c0p*t65882*t65857*(2.0/3.0);
                double t65975 = 1/pow(rho_a[index],1.0/3.0);
                double t65976 = c*t65975;
                double t65977 = sqrt(t65976);
                double t65978 = pow(t65976,3.0/2.0);
                double t65979 = 1/pow(rho_a[index],2.0/3.0);
                double t65980 = b1p*t65977;
                double t65981 = b3p*t65978;
                double t65982 = b4p*t65810*t65979;
                double t65983 = b2p*c*t65975;
                double t65984 = t65980+t65981+t65982+t65983;
                double t65985 = 1/t65984;
                double t65986 = t65812*t65985*(1.0/2.0);
                double t65987 = t65986+1.0;
                double t65988 = log(t65987);
                double t65989 = a1p*c*t65975;
                double t65990 = t65989+1.0;
                double t65991 = c0p*t65990*t65988*2.0;
                double t65992 = t65950-t65951;
                double t65993 = t65860*t65883*t65892*t65895*t65888;
                double t65994 = Aa*t65860*t65906*t65924*t65916*t65918*t65888*2.0;
                double t65995 = 1/t65957;
                double t65996 = 1/pow(rho_b[index],1.1E1/3.0);
                double t65997 = 1/(t65957*t65957);
                double t65998 = 1/t65964;
                double t65999 = 1/(t65968*t65968);
                double t66000 = 1/pow(rho_b[index],1.9E1/3.0);
                double t66001 = 1/(t65964*t65964);
                double t66002 = 1/t65968;
                double t66003 = 1/t65973;
                double t66004 = 1/(t65973*t65973);
                double t66005 = gcab*t65824*2.0;
                double t66006 = t65824*t65955*t65958*6.0;
                double t66007 = gcab*t65824*t65958*t65959*6.0;
                double t66008 = t65824*t65960*t65955*t65959*2.0;
                double t66009 = t66005+t66006+t66007+t66008;
                double t66010 = gamma_bb[index]*gcab*t65996*(8.0/3.0);
                double t66011 = gamma_bb[index]*t65955*t65958*t65996*(8.0/3.0);
                double t66012 = t66010+t66011;
                double t66013 = gcab*t65824;
                double t66014 = t65824*t65955*t65958;
                double t66015 = t66013+t66014;
                double t66016 = gamma_bb[index]*gcab*t65996*(1.6E1/3.0);
                double t66017 = gamma_bb[index]*gcab*t65958*t65959*t65996*1.6E1;
                double t66018 = gamma_bb[index]*t65960*t65955*t65959*t65996*(1.6E1/3.0);
                double t66019 = gamma_bb[index]*t65955*t65958*t65996*1.6E1;
                double t66020 = t66016+t66017+t66018+t66019;
                double t66021 = gcab*t65824*(3.0/2.0);
                double t66022 = t65824*t65955*t65958*3.0;
                double t66023 = gcab*t65824*t65958*t65959*(3.0/2.0);
                double t66024 = t66021+t66022+t66023;
                double t66025 = gamma_bb[index]*gcab*t65996*4.0;
                double t66026 = gamma_bb[index]*gcab*t65958*t65959*t65996*4.0;
                double t66027 = gamma_bb[index]*t65955*t65958*t65996*8.0;
                double t66028 = t66025+t66026+t66027;
                double t66029 = gx*gx;
                double t66030 = t66029*t66029;
                double t66031 = gamma_bb[index]*gx*t65824;
                double t66032 = t66031+1.0;
                double t66033 = gamma_bb[index]*gx*t65824*3.0;
                double t66034 = gamma_bb[index]*gx*t65830*t65825*t66029;
                double t66035 = t65825*t65829*t66029*3.0;
                double t66036 = t66033+t66034+t66035+1.0;
                double t66037 = gamma_bb[index]*gx*t65824*4.0;
                double t66038 = gamma_bb[index]*gx*t65830*t65825*t66029*4.0;
                double t66039 = t65825*t65829*t66029*6.0;
                double t66040 = t65828*t65837*t66030;
                double t66041 = t66040+t66037+t66038+t66039+1.0;
                double t66042 = gamma_bb[index]*gx*t65824*2.0;
                double t66043 = t65825*t65829*t66029;
                double t66044 = t66042+t66043+1.0;
                double t66045 = t65860*t65927*t65992;
                double t66046 = t65951+t66045;
                double t66047 = 1/t65832;
                double t66048 = 1/t65842;
                double t66049 = 1/t65845;
                double t66050 = 1/t65836;
                double t66051 = 1/(t65832*t65832);
                double t66052 = 1/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]*rho_b[index]);
                double t66053 = 1/(t65836*t65836);
                double t66054 = 1/(t65845*t65845);
                double t66055 = gcaa*t65824*3.0;
                double t66056 = gamma_bb[index]*t65826*t65829*6.0;
                double t66057 = gcaa*t65830*t65825*t65826*3.0;
                double t66058 = t66055+t66056+t66057;
                double t66059 = 1/pow(rho_b[index],3.5E1/3.0);
                double t66060 = 1/(t65842*t65842);
                double t66061 = gcaa*t65824*4.0;
                double t66062 = gamma_bb[index]*t65826*t65829*1.2E1;
                double t66063 = gcaa*t65830*t65825*t65826*1.2E1;
                double t66064 = gamma_bb[index]*t65825*t65827*t65828*4.0;
                double t66065 = t66061+t66062+t66063+t66064;
                double t66066 = gcaa*t65824*2.0;
                double t66067 = gamma_bb[index]*t65826*t65829*2.0;
                double t66068 = t66066+t66067;
                double t66069 = gamma_bb[index]*gcaa*t65996*(1.6E1/3.0);
                double t66070 = t65825*t65826*t66000*(1.6E1/3.0);
                double t66071 = t66070+t66069;
                double t66072 = gamma_bb[index]*gcaa*t65996*8.0;
                double t66073 = gamma_bb[index]*gcaa*t65825*t65826*t66052*8.0;
                double t66074 = t65825*t65826*t66000*1.6E1;
                double t66075 = t66072+t66073+t66074;
                double t66076 = gamma_bb[index]*gcaa*t65996*(3.2E1/3.0);
                double t66077 = gamma_bb[index]*gcaa*t65825*t65826*t66052*3.2E1;
                double t66078 = t65825*t65826*t66000*3.2E1;
                double t66079 = t65827*t65837*t66059*(3.2E1/3.0);
                double t66080 = t66076+t66077+t66078+t66079;
                double t66081 = 1/t65937;
                double t66082 = 1/(t65934*t65934);
                double t66083 = b4f*t65810*t65939*(2.0/3.0);
                double t66084 = b2f*c*t65938*(1.0/3.0);
                double t66085 = b1f*c*t65940*t65938*(1.0/6.0);
                double t66086 = b3f*c*t65808*t65938*(1.0/2.0);
                double t66087 = t66083+t66084+t66085+t66086;
                double t66088 = a1f*c*c0f*t65941*t65938*(2.0/3.0);
                double t66089 = a1p*c*c0p*t65821*t65938*(2.0/3.0);
                double t66090 = ccaa1*gcaa*t65824*t66047;
                double t66091 = ccaa4*gamma_bb[index]*t65825*t65827*t65828*t66048*4.0;
                double t66092 = ccaa2*gamma_bb[index]*t65826*t65829*t66049*2.0;
                double t66093 = ccaa3*gcaa*t65830*t65825*t65826*t66050*3.0;
                double t66094 = t66090+t66091+t66092+t66093-ccaa1*gamma_bb[index]*t65826*t65829*t66051-ccaa4*t65827* \
                   t65828*t65837*t66060*t66065-ccaa2*t65825*t65826*t65829*t66054*t66068-ccaa3*gamma_bb[index]*gcaa*t65830* \
                   t65825*t65826*t66053*t66058;
                double t66095 = 1/t66032;
                double t66096 = 1/t66041;
                double t66097 = 1/t66044;
                double t66098 = 1/t66036;
                double t66099 = 1/(t66032*t66032);
                double t66100 = 1/(t66036*t66036);
                double t66101 = 1/(t66044*t66044);
                double t66102 = gx*t65824*3.0;
                double t66103 = gamma_bb[index]*t65829*t66029*6.0;
                double t66104 = gx*t65830*t65825*t66029*3.0;
                double t66105 = t66102+t66103+t66104;
                double t66106 = 1/(t66041*t66041);
                double t66107 = gx*t65824*4.0;
                double t66108 = gamma_bb[index]*t65829*t66029*1.2E1;
                double t66109 = gx*t65830*t65825*t66029*1.2E1;
                double t66110 = gamma_bb[index]*t65825*t65828*t66030*4.0;
                double t66111 = t66110+t66107+t66108+t66109;
                double t66112 = gx*t65824*2.0;
                double t66113 = gamma_bb[index]*t65829*t66029*2.0;
                double t66114 = t66112+t66113;
                double t66115 = gamma_bb[index]*gx*t65996*(1.6E1/3.0);
                double t66116 = t65825*t66000*t66029*(1.6E1/3.0);
                double t66117 = t66115+t66116;
                double t66118 = gamma_bb[index]*gx*t65996*8.0;
                double t66119 = gamma_bb[index]*gx*t65825*t66052*t66029*8.0;
                double t66120 = t65825*t66000*t66029*1.6E1;
                double t66121 = t66120+t66118+t66119;
                double t66122 = gamma_bb[index]*gx*t65996*(3.2E1/3.0);
                double t66123 = gamma_bb[index]*gx*t65825*t66052*t66029*3.2E1;
                double t66124 = t65825*t66000*t66029*3.2E1;
                double t66125 = t65837*t66030*t66059*(3.2E1/3.0);
                double t66126 = t66122+t66123+t66124+t66125;
                v_rho_b_gamma_bb_[index] = -(rho_b[index]*t66046+rho_a[index]*(t65991-t65860*t65927*(t65991-c0f*log((t65861* \
                   (1.0/2.0))/(b1f*t65977+b3f*t65978+b2f*c*t65975+b4f*t65810*t65979)+1.0)*(a1f*c*t65975+1.0)*2.0))-t65846* \
                   (t65894+t65993+t65994))*(ccab1*gcab*t65995*t65996*(4.0/3.0)-ccab2*t65958*t65959*t66001*(gcab*t65996* \
                   (8.0/3.0)+gamma_bb[index]*t65958*t66000*(4.0/3.0)+t65955*t65958*t65996*(8.0/3.0))-ccab4*t65960*t65961* \
                   t66004*(gcab*t65996*(1.6E1/3.0)+gamma_bb[index]*t65958*t66000*8.0+t65955*t65958*t65996*1.6E1+gamma_bb[index]* \
                   t65960*t65959*t66000*8.0+gcab*t65958*t65959*t65996*1.6E1+t65960*t65955*t65959*t65996*(1.6E1/3.0)+gamma_bb[index]* \
                   gcab*t65955*t65958*t66000*1.6E1)-ccab1*gamma_bb[index]*t65958*t65997*t66000*(4.0/3.0)+ccab2*gamma_bb[index]* \
                   t65958*t65998*t66000*(4.0/3.0)-ccab1*t65955*t65958*t65996*t65997*(4.0/3.0)+ccab2*t65955*t65958*t65996* \
                   t65998*(8.0/3.0)+ccab4*t65960*t65955*t65959*t65996*t66003*(1.6E1/3.0)-ccab2*t65824*t65955*t65958*t66001* \
                   t66012+ccab4*t65960*t65961*1/(t65973*t65973*t65973)*t66020*t66009*2.0+ccab2*1/(t65964*t65964*t65964) \
                   *t65958*t65959*t66012*t66015*2.0+ccab4*gamma_bb[index]*t65960*t65959*t66000*t66003*8.0+ccab3*gcab* \
                   t65958*t65959*t65996*t66002*4.0+ccab3*gamma_bb[index]*gcab*t65955*t65958*t66000*t66002*4.0-ccab2*gamma_bb[index]* \
                   t65955*t65958*t65996*t66001*t66015*(8.0/3.0)-ccab3*gcab*t65824*t65958*t65959*t65999*t66028*(3.0/2.0) \
                   -ccab4*t65824*t65960*t65955*t65959*t66020*t66004*2.0-ccab3*gcab*t65955*t65958*t65959*t65999*(gcab* \
                   t65996*4.0+gamma_bb[index]*t65958*t66000*4.0+t65955*t65958*t65996*8.0+gcab*t65958*t65959*t65996*4.0+ \
                   gamma_bb[index]*gcab*t65955*t65958*t66000*4.0)+ccab1*gamma_bb[index]*gcab*t65955*1/(t65957*t65957* \
                   t65957)*t65958*t66000*(4.0/3.0)+ccab3*gcab*t65955*t65958*t65959*1/(t65968*t65968*t65968)*t66024*t66028* \
                   2.0-ccab3*gamma_bb[index]*gcab*t65958*t65959*t65996*t65999*t66024*4.0-ccab4*gamma_bb[index]*t65960* \
                   t65955*t65959*t65996*t66004*t66009*(1.6E1/3.0))-(-t65951+t65894+t65993+t65994+rho_b[index]*(-t65949+ \
                   t66089+t65860*t65927*(t65949+t66088-t65929*t66081*t66082*t66087-a1p*c*c0p*t65821*t65938*(2.0/3.0)) \
                   )-t65846*(t65974-t65904*t65866*t65898*t65899+t65922*t65860*t65883*t65892*t65895+t65860*t65905*t65883* \
                   t65895*t65888*4.0-t65860*t65892*t65895*t65888*(t65974-t65904*t65866*t65898*t65899+(t65881*1/(t65875* \
                   t65875)*(b2f*c*t65857*(1.0/3.0)+b4f*t65810*t65896*(2.0/3.0)+b1f*c*t65857*t65897*(1.0/6.0)+b3f*c*t65857* \
                   t65849*(1.0/2.0)))/t65878-a1f*c*c0f*t65857*t65879*(2.0/3.0))+t65860*t65883*t65892*t65867*t65868*t65888* \
                   4.0+Aa*t65860*t65906*t65916*t65918*t65888*(t65905*t65895*4.0+t65892*t65867*t65868*4.0)*2.0+Aa*t65922* \
                   t65860*t65906*t65924*t65916*t65918*2.0-(1/(t65912*t65912)*t65860*t65906*t65924*t65918*t65888*(b2a* \
                   c*t65857*(1.0/3.0)+b4a*t65810*t65896*(2.0/3.0)+b1a*c*t65857*t65897*(1.0/6.0)+b3a*c*t65857*t65849*(1.0/ \
                   2.0)))/t65915+Aa*a1a*c*t65860*t65906*t65924*t65916*t65857*t65888*(2.0/3.0))-t65860*t65927*t65992)* \
                   (ccab1*gcab*t65824*t65995*(1.0/2.0)-ccab1*t65824*t65955*t65958*t65997*(1.0/2.0)+ccab2*t65824*t65955* \
                   t65958*t65998-ccab4*t65960*t65961*t66004*t66009-ccab2*t65958*t65959*t66001*t66015+ccab4*t65824*t65960* \
                   t65955*t65959*t66003*2.0+ccab3*gcab*t65824*t65958*t65959*t66002*(3.0/2.0)-ccab3*gcab*t65955*t65958* \
                   t65959*t65999*t66024)-t66094*(t65951+t65860*t65927*(t65950-c0p*t65821*t65823*2.0))-rho_b[index]*t66046* \
                   (ccaa1*gcaa*t65996*t66047*(-8.0/3.0)+ccaa1*gamma_bb[index]*t65826*t66000*t66051*8.0-ccaa2*gamma_bb[index]* \
                   t65826*t66000*t66049*(3.2E1/3.0)+ccaa2*t65825*t65826*t66000*t66054*t66068*(1.6E1/3.0)+ccaa4*t65827* \
                   t65837*t66060*t66065*t66059*(3.2E1/3.0)+ccaa4*t65827*t65828*t65837*t66060*(gcaa*t65996*(3.2E1/3.0) \
                   +gamma_bb[index]*t65826*t66000*6.4E1+gamma_bb[index]*t65825*t65827*t66059*(1.28E2/3.0)+gcaa*t65825* \
                   t65826*t66052*9.6E1)-ccaa1*gcaa*1/(t65832*t65832*t65832)*t65825*t65826*t66052*(1.6E1/3.0)+ccaa2*t65825* \
                   t65826*t65829*t66054*(gcaa*t65996*(1.6E1/3.0)+gamma_bb[index]*t65826*t66000*(3.2E1/3.0))+ccaa2*gamma_bb[index]* \
                   t65826*t65829*t66071*t66054*2.0-ccaa4*gamma_bb[index]*t65825*t65827*t66048*t66059*(1.28E2/3.0)-ccaa3* \
                   gcaa*t65825*t65826*t66050*t66052*2.4E1+ccaa4*gamma_bb[index]*t65825*t65827*t65828*t66060*t66080*4.0+ \
                   ccaa3*gcaa*t65830*t65825*t65826*t66053*t66075*3.0-ccaa4*1/(t65842*t65842*t65842)*t65827*t65828*t65837* \
                   t66080*t66065*2.0-ccaa2*t65825*t65826*1/(t65845*t65845*t65845)*t65829*t66071*t66068*2.0+ccaa3*gamma_bb[index]* \
                   gcaa*t65830*t65825*t65826*t66053*(gcaa*t65996*8.0+gamma_bb[index]*t65826*t66000*3.2E1+gcaa*t65825* \
                   t65826*t66052*2.4E1)+ccaa3*gamma_bb[index]*gcaa*t65825*t65826*t66052*t66053*t66058*8.0-ccaa3*gamma_bb[index]* \
                   gcaa*t65830*t65825*t65826*1/(t65836*t65836*t65836)*t66075*t66058*2.0)+c0*pow(rho_b[index],4.0/3.0) \
                   *(cx1*gx*t65996*t66095*(-8.0/3.0)+cx1*gamma_bb[index]*t66000*t66029*t66099*8.0-cx2*gamma_bb[index]* \
                   t66000*t66029*t66097*(3.2E1/3.0)+cx2*t65825*t66000*t66101*t66114*t66029*(1.6E1/3.0)+cx4*t65837*t66030* \
                   t66111*t66106*t66059*(3.2E1/3.0)+cx4*t65828*t65837*t66030*t66106*(gx*t65996*(3.2E1/3.0)+gamma_bb[index]* \
                   t66000*t66029*6.4E1+gamma_bb[index]*t65825*t66030*t66059*(1.28E2/3.0)+gx*t65825*t66052*t66029*9.6E1) \
                   -cx1*gx*t65825*1/(t66032*t66032*t66032)*t66052*t66029*(1.6E1/3.0)+cx2*t65825*t65829*t66101*t66029* \
                   (gx*t65996*(1.6E1/3.0)+gamma_bb[index]*t66000*t66029*(3.2E1/3.0))+cx2*gamma_bb[index]*t65829*t66101* \
                   t66117*t66029*2.0-cx4*gamma_bb[index]*t65825*t66030*t66059*t66096*(1.28E2/3.0)-cx3*gx*t65825*t66052* \
                   t66029*t66098*2.4E1+cx4*gamma_bb[index]*t65825*t65828*t66030*t66106*t66126*4.0+cx3*gx*t65830*t65825* \
                   t66100*t66121*t66029*3.0-cx2*t65825*t65829*t66114*1/(t66044*t66044*t66044)*t66117*t66029*2.0-cx4*t65828* \
                   t65837*t66030*t66111*1/(t66041*t66041*t66041)*t66126*2.0+cx3*gamma_bb[index]*gx*t65830*t65825*t66100* \
                   t66029*(gx*t65996*8.0+gamma_bb[index]*t66000*t66029*3.2E1+gx*t65825*t66052*t66029*2.4E1)+cx3*gamma_bb[index]* \
                   gx*t65825*t66100*t66105*t66052*t66029*8.0-cx3*gamma_bb[index]*gx*t65830*t65825*t66121*t66105*1/(t66036* \
                   t66036*t66036)*t66029*2.0)+rho_b[index]*t66094*(-t65949+t66089+t65860*t65927*(t65949+t66088-t66089- \
                   t65929*t66081*t66082*t66087))+c0*pow(rho_b[index],1.0/3.0)*(cx1*gx*t65824*t66095-cx1*gamma_bb[index]* \
                   t65829*t66029*t66099+cx2*gamma_bb[index]*t65829*t66029*t66097*2.0-cx2*t65825*t65829*t66101*t66114* \
                   t66029-cx4*t65828*t65837*t66030*t66111*t66106+cx4*gamma_bb[index]*t65825*t65828*t66030*t66096*4.0+ \
                   cx3*gx*t65830*t65825*t66029*t66098*3.0-cx3*gamma_bb[index]*gx*t65830*t65825*t66100*t66105*t66029)* \
                   (4.0/3.0);
            } else if (rho_a[index] > cutoff_) {
                v_rho_b_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                double t67020 = 1/pow(rho_b[index],1.0/3.0);
                double t67021 = c*t67020;
                double t67022 = sqrt(t67021);
                double t67023 = pow(t67021,3.0/2.0);
                double t67024 = c*c;
                double t67025 = 1/pow(rho_b[index],2.0/3.0);
                double t67026 = 1/c0p;
                double t67027 = b1p*t67022;
                double t67028 = b3p*t67023;
                double t67029 = b4p*t67024*t67025;
                double t67030 = b2p*c*t67020;
                double t67031 = t67030+t67027+t67028+t67029;
                double t67032 = 1/t67031;
                double t67033 = t67032*t67026*(1.0/2.0);
                double t67034 = t67033+1.0;
                double t67035 = log(t67034);
                double t67036 = a1p*c*t67020;
                double t67037 = t67036+1.0;
                double t67038 = 1/pow(rho_b[index],8.0/3.0);
                double t67039 = gamma_bb[index]*gamma_bb[index];
                double t67040 = gcaa*gcaa;
                double t67041 = t67040*t67040;
                double t67042 = 1/pow(rho_b[index],3.2E1/3.0);
                double t67043 = 1/pow(rho_b[index],1.6E1/3.0);
                double t67044 = 1/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]);
                double t67045 = gamma_bb[index]*gcaa*t67038;
                double t67046 = t67045+1.0;
                double t67047 = gamma_bb[index]*gcaa*t67038*3.0;
                double t67048 = gamma_bb[index]*gcaa*t67040*t67044*t67039;
                double t67049 = t67040*t67043*t67039*3.0;
                double t67050 = t67047+t67048+t67049+1.0;
                double t67051 = t67039*t67039;
                double t67052 = gamma_bb[index]*gcaa*t67038*4.0;
                double t67053 = gamma_bb[index]*gcaa*t67040*t67044*t67039*4.0;
                double t67054 = t67040*t67043*t67039*6.0;
                double t67055 = t67041*t67042*t67051;
                double t67056 = t67052+t67053+t67054+t67055+1.0;
                double t67057 = gamma_bb[index]*gcaa*t67038*2.0;
                double t67058 = t67040*t67043*t67039;
                double t67059 = t67057+t67058+1.0;
                double t67060 = gx*gx;
                double t67061 = t67060*t67060;
                double t67062 = gamma_bb[index]*gx*t67038;
                double t67063 = t67062+1.0;
                double t67064 = gamma_bb[index]*gx*t67038*3.0;
                double t67065 = gamma_bb[index]*gx*t67060*t67044*t67039;
                double t67066 = t67060*t67043*t67039*3.0;
                double t67067 = t67064+t67065+t67066+1.0;
                double t67068 = gamma_bb[index]*gx*t67038*4.0;
                double t67069 = gamma_bb[index]*gx*t67060*t67044*t67039*4.0;
                double t67070 = t67060*t67043*t67039*6.0;
                double t67071 = t67042*t67051*t67061;
                double t67072 = t67070+t67071+t67068+t67069+1.0;
                double t67073 = gamma_bb[index]*gx*t67038*2.0;
                double t67074 = t67060*t67043*t67039;
                double t67075 = t67073+t67074+1.0;
                double t67076 = pow(2.0,1.0/3.0);
                double t67077 = t67076*2.0;
                double t67078 = t67077-2.0;
                double t67079 = two_13*2.0;
                double t67080 = t67079-2.0;
                double t67081 = 1/t67080;
                double t67082 = 1/c0f;
                double t67083 = b1f*t67022;
                double t67084 = b3f*t67023;
                double t67085 = b4f*t67024*t67025;
                double t67086 = b2f*c*t67020;
                double t67087 = t67083+t67084+t67085+t67086;
                double t67088 = 1/t67087;
                double t67089 = t67082*t67088*(1.0/2.0);
                double t67090 = t67089+1.0;
                double t67091 = log(t67090);
                double t67092 = a1f*c*t67020;
                double t67093 = t67092+1.0;
                double t67094 = c0f*t67091*t67093*2.0;
                double t67095 = c0p*t67035*t67037*2.0;
                double t67096 = 1/t67046;
                double t67097 = 1/t67056;
                double t67098 = 1/t67059;
                double t67099 = 1/t67050;
                double t67100 = 1/pow(rho_b[index],1.9E1/3.0);
                double t67101 = 1/(t67046*t67046);
                double t67102 = 1/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]*rho_b[index]);
                double t67103 = 1/pow(rho_b[index],1.1E1/3.0);
                double t67104 = 1/(t67050*t67050);
                double t67105 = 1/(t67059*t67059);
                double t67106 = gcaa*t67038*3.0;
                double t67107 = gamma_bb[index]*t67040*t67043*6.0;
                double t67108 = gcaa*t67040*t67044*t67039*3.0;
                double t67109 = t67106+t67107+t67108;
                double t67110 = 1/pow(rho_b[index],3.5E1/3.0);
                double t67111 = 1/(t67056*t67056);
                double t67112 = gcaa*t67038*4.0;
                double t67113 = gamma_bb[index]*t67040*t67043*1.2E1;
                double t67114 = gcaa*t67040*t67044*t67039*1.2E1;
                double t67115 = gamma_bb[index]*t67041*t67042*t67039*4.0;
                double t67116 = t67112+t67113+t67114+t67115;
                double t67117 = gcaa*t67038*2.0;
                double t67118 = gamma_bb[index]*t67040*t67043*2.0;
                double t67119 = t67117+t67118;
                double t67120 = gamma_bb[index]*gcaa*t67103*(1.6E1/3.0);
                double t67121 = t67100*t67040*t67039*(1.6E1/3.0);
                double t67122 = t67120+t67121;
                double t67123 = gamma_bb[index]*gcaa*t67103*8.0;
                double t67124 = gamma_bb[index]*gcaa*t67102*t67040*t67039*8.0;
                double t67125 = t67100*t67040*t67039*1.6E1;
                double t67126 = t67123+t67124+t67125;
                double t67127 = gamma_bb[index]*gcaa*t67103*(3.2E1/3.0);
                double t67128 = gamma_bb[index]*gcaa*t67102*t67040*t67039*3.2E1;
                double t67129 = t67100*t67040*t67039*3.2E1;
                double t67130 = t67110*t67041*t67051*(3.2E1/3.0);
                double t67131 = t67130+t67127+t67128+t67129;
                double t67132 = 1/pow(rho_b[index],4.0/3.0);
                double t67133 = 1/pow(rho_b[index],5.0/3.0);
                double t67134 = 1/sqrt(t67021);
                double t67135 = 1/t67034;
                double t67136 = 1/(t67031*t67031);
                double t67137 = b4p*t67024*t67133*(2.0/3.0);
                double t67138 = b2p*c*t67132*(1.0/3.0);
                double t67139 = b1p*c*t67132*t67134*(1.0/6.0);
                double t67140 = b3p*c*t67022*t67132*(1.0/2.0);
                double t67141 = t67140+t67137+t67138+t67139;
                double t67142 = t67141*t67135*t67037*t67136;
                double t67143 = ccaa1*gcaa*t67038*t67096;
                double t67144 = ccaa4*gamma_bb[index]*t67041*t67042*t67039*t67097*4.0;
                double t67145 = ccaa2*gamma_bb[index]*t67040*t67043*t67098*2.0;
                double t67146 = ccaa3*gcaa*t67040*t67044*t67039*t67099*3.0;
                double t67147 = t67143+t67144+t67145+t67146-ccaa1*gamma_bb[index]*t67101*t67040*t67043-ccaa4*t67111* \
                   t67041*t67042*t67051*t67116-ccaa2*t67040*t67105*t67043*t67119*t67039-ccaa3*gamma_bb[index]*gcaa*t67040* \
                   t67104*t67044*t67109*t67039;
                double t67148 = 1/t67063;
                double t67149 = 1/t67072;
                double t67150 = 1/t67075;
                double t67151 = 1/t67067;
                double t67152 = 1/(t67063*t67063);
                double t67153 = 1/(t67067*t67067);
                double t67154 = 1/(t67075*t67075);
                double t67155 = gx*t67038*3.0;
                double t67156 = gamma_bb[index]*t67060*t67043*6.0;
                double t67157 = gx*t67060*t67044*t67039*3.0;
                double t67158 = t67155+t67156+t67157;
                double t67159 = 1/(t67072*t67072);
                double t67160 = gx*t67038*4.0;
                double t67161 = gamma_bb[index]*t67060*t67043*1.2E1;
                double t67162 = gx*t67060*t67044*t67039*1.2E1;
                double t67163 = gamma_bb[index]*t67042*t67061*t67039*4.0;
                double t67164 = t67160+t67161+t67162+t67163;
                double t67165 = gx*t67038*2.0;
                double t67166 = gamma_bb[index]*t67060*t67043*2.0;
                double t67167 = t67165+t67166;
                double t67168 = gamma_bb[index]*gx*t67103*(1.6E1/3.0);
                double t67169 = t67100*t67060*t67039*(1.6E1/3.0);
                double t67170 = t67168+t67169;
                double t67171 = gamma_bb[index]*gx*t67103*8.0;
                double t67172 = gamma_bb[index]*gx*t67102*t67060*t67039*8.0;
                double t67173 = t67100*t67060*t67039*1.6E1;
                double t67174 = t67171+t67172+t67173;
                double t67175 = gamma_bb[index]*gx*t67103*(3.2E1/3.0);
                double t67176 = gamma_bb[index]*gx*t67102*t67060*t67039*3.2E1;
                double t67177 = t67100*t67060*t67039*3.2E1;
                double t67178 = t67110*t67051*t67061*(3.2E1/3.0);
                double t67179 = t67175+t67176+t67177+t67178;
                v_rho_b_gamma_bb_[index] = -t67147*(t67095+t67081*t67078*(t67094-c0p*t67035*t67037*2.0))+rho_b[index]* \
                   t67147*(-t67142+t67081*t67078*(t67142-(t67093*1/(t67087*t67087)*(b2f*c*t67132*(1.0/3.0)+b4f*t67024* \
                   t67133*(2.0/3.0)+b1f*c*t67132*t67134*(1.0/6.0)+b3f*c*t67022*t67132*(1.0/2.0)))/t67090+a1f*c*c0f*t67132* \
                   t67091*(2.0/3.0)-a1p*c*c0p*t67132*t67035*(2.0/3.0))+a1p*c*c0p*t67132*t67035*(2.0/3.0))-rho_b[index]* \
                   (t67095+t67081*t67078*(t67094-t67095))*(ccaa1*gcaa*t67103*t67096*(-8.0/3.0)+ccaa1*gamma_bb[index]* \
                   t67100*t67101*t67040*8.0-ccaa2*gamma_bb[index]*t67100*t67040*t67098*(3.2E1/3.0)+ccaa4*t67110*t67111* \
                   t67041*t67051*t67116*(3.2E1/3.0)+ccaa2*t67100*t67040*t67105*t67119*t67039*(1.6E1/3.0)+ccaa4*t67111* \
                   t67041*t67042*t67051*(gcaa*t67103*(3.2E1/3.0)+gamma_bb[index]*t67100*t67040*6.4E1+gamma_bb[index]* \
                   t67110*t67041*t67039*(1.28E2/3.0)+gcaa*t67102*t67040*t67039*9.6E1)-ccaa1*gcaa*t67102*t67040*1/(t67046* \
                   t67046*t67046)*t67039*(1.6E1/3.0)+ccaa2*t67040*t67105*t67043*t67039*(gcaa*t67103*(1.6E1/3.0)+gamma_bb[index]* \
                   t67100*t67040*(3.2E1/3.0))+ccaa2*gamma_bb[index]*t67040*t67122*t67105*t67043*2.0-ccaa4*gamma_bb[index]* \
                   t67110*t67041*t67039*t67097*(1.28E2/3.0)-ccaa3*gcaa*t67102*t67040*t67039*t67099*2.4E1+ccaa4*gamma_bb[index]* \
                   t67111*t67041*t67131*t67042*t67039*4.0+ccaa3*gcaa*t67040*t67104*t67044*t67126*t67039*3.0-ccaa4*t67041* \
                   t67131*t67042*t67051*t67116*1/(t67056*t67056*t67056)*2.0-ccaa2*t67040*t67122*t67043*t67119*t67039* \
                   1/(t67059*t67059*t67059)*2.0+ccaa3*gamma_bb[index]*gcaa*t67040*t67104*t67044*t67039*(gcaa*t67103*8.0+ \
                   gamma_bb[index]*t67100*t67040*3.2E1+gcaa*t67102*t67040*t67039*2.4E1)+ccaa3*gamma_bb[index]*gcaa*t67102* \
                   t67040*t67104*t67109*t67039*8.0-ccaa3*gamma_bb[index]*gcaa*t67040*1/(t67050*t67050*t67050)*t67044* \
                   t67126*t67109*t67039*2.0)+c0*pow(rho_b[index],4.0/3.0)*(cx1*gx*t67103*t67148*(-8.0/3.0)+cx1*gamma_bb[index]* \
                   t67100*t67060*t67152*8.0-cx2*gamma_bb[index]*t67100*t67060*t67150*(3.2E1/3.0)+cx2*t67100*t67060*t67154* \
                   t67039*t67167*(1.6E1/3.0)+cx4*t67110*t67051*t67061*t67164*t67159*(3.2E1/3.0)+cx4*t67042*t67051*t67061* \
                   t67159*(gx*t67103*(3.2E1/3.0)+gamma_bb[index]*t67100*t67060*6.4E1+gamma_bb[index]*t67110*t67061*t67039* \
                   (1.28E2/3.0)+gx*t67102*t67060*t67039*9.6E1)-cx1*gx*t67102*t67060*1/(t67063*t67063*t67063)*t67039*(1.6E1/ \
                   3.0)+cx2*t67060*t67043*t67154*t67039*(gx*t67103*(1.6E1/3.0)+gamma_bb[index]*t67100*t67060*(3.2E1/3.0) \
                   )+cx2*gamma_bb[index]*t67060*t67043*t67170*t67154*2.0-cx4*gamma_bb[index]*t67110*t67061*t67039*t67149* \
                   (1.28E2/3.0)-cx3*gx*t67102*t67060*t67151*t67039*2.4E1+cx4*gamma_bb[index]*t67042*t67061*t67039*t67159* \
                   t67179*4.0+cx3*gx*t67060*t67044*t67153*t67039*t67174*3.0-cx2*t67060*t67043*t67170*t67039*1/(t67075* \
                   t67075*t67075)*t67167*2.0-cx4*t67042*t67051*t67061*1/(t67072*t67072*t67072)*t67164*t67179*2.0+cx3* \
                   gamma_bb[index]*gx*t67060*t67044*t67153*t67039*(gx*t67103*8.0+gamma_bb[index]*t67100*t67060*3.2E1+ \
                   gx*t67102*t67060*t67039*2.4E1)+cx3*gamma_bb[index]*gx*t67102*t67060*t67153*t67039*t67158*8.0-cx3*gamma_bb[index]* \
                   gx*t67060*t67044*t67039*t67174*1/(t67067*t67067*t67067)*t67158*2.0)+c0*pow(rho_b[index],1.0/3.0)*(cx1* \
                   gx*t67038*t67148-cx1*gamma_bb[index]*t67060*t67043*t67152+cx2*gamma_bb[index]*t67060*t67150*t67043* \
                   2.0-cx2*t67060*t67043*t67154*t67039*t67167-cx4*t67042*t67051*t67061*t67164*t67159+cx4*gamma_bb[index]* \
                   t67042*t67061*t67039*t67149*4.0+cx3*gx*t67060*t67151*t67044*t67039*3.0-cx3*gamma_bb[index]*gx*t67060* \
                   t67044*t67153*t67039*t67158)*(4.0/3.0);
            } else {
                v_rho_b_gamma_bb_[index] = 0.0;
            } 

            //V_gamma_aa_gamma_aa
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t66128 = 1/pow(rho_a[index],1.0/3.0);
                double t66129 = c*t66128;
                double t66130 = sqrt(t66129);
                double t66131 = pow(t66129,3.0/2.0);
                double t66132 = c*c;
                double t66133 = 1/pow(rho_a[index],2.0/3.0);
                double t66134 = 1/c0p;
                double t66135 = b1p*t66130;
                double t66136 = b3p*t66131;
                double t66137 = b4p*t66132*t66133;
                double t66138 = b2p*c*t66128;
                double t66139 = t66135+t66136+t66137+t66138;
                double t66140 = 1/t66139;
                double t66141 = t66140*t66134*(1.0/2.0);
                double t66142 = t66141+1.0;
                double t66143 = log(t66142);
                double t66144 = a1p*c*t66128;
                double t66145 = t66144+1.0;
                double t66146 = pow(2.0,1.0/3.0);
                double t66147 = t66146*2.0;
                double t66148 = t66147-2.0;
                double t66149 = two_13*2.0;
                double t66150 = t66149-2.0;
                double t66151 = 1/t66150;
                double t66152 = 1/c0f;
                double t66153 = 1/pow(rho_b[index],1.0/3.0);
                double t66154 = c*t66153;
                double t66155 = sqrt(t66154);
                double t66156 = pow(t66154,3.0/2.0);
                double t66157 = 1/pow(rho_b[index],2.0/3.0);
                double t66158 = b1p*t66155;
                double t66159 = b3p*t66156;
                double t66160 = b4p*t66132*t66157;
                double t66161 = b2p*c*t66153;
                double t66162 = t66160+t66161+t66158+t66159;
                double t66163 = 1/t66162;
                double t66164 = t66134*t66163*(1.0/2.0);
                double t66165 = t66164+1.0;
                double t66166 = log(t66165);
                double t66167 = a1p*c*t66153;
                double t66168 = t66167+1.0;
                double t66169 = c0p*t66166*t66168*2.0;
                double t66170 = rho_a[index]+rho_b[index];
                double t66171 = 1/pow(t66170,1.0/3.0);
                double t66172 = c*t66171;
                double t66173 = sqrt(t66172);
                double t66174 = pow(t66172,3.0/2.0);
                double t66175 = 1/pow(t66170,2.0/3.0);
                double t66176 = b1p*t66173;
                double t66177 = b3p*t66174;
                double t66178 = b4p*t66132*t66175;
                double t66179 = b2p*c*t66171;
                double t66180 = t66176+t66177+t66178+t66179;
                double t66181 = 1/t66180;
                double t66182 = t66134*t66181*(1.0/2.0);
                double t66183 = t66182+1.0;
                double t66184 = log(t66183);
                double t66185 = a1p*c*t66171;
                double t66186 = t66185+1.0;
                double t66187 = c0p*t66184*t66186*2.0;
                double t66188 = rho_a[index]-rho_b[index];
                double t66189 = t66188*t66188;
                double t66190 = 1/t66170;
                double t66191 = t66190*t66188;
                double t66192 = 1/(t66170*t66170*t66170*t66170);
                double t66193 = t66189*t66189;
                double t66194 = t66191+1.0;
                double t66195 = pow(t66194,4.0/3.0);
                double t66196 = -t66191+1.0;
                double t66197 = pow(t66196,4.0/3.0);
                double t66198 = t66195+t66197-2.0;
                double t66199 = gcab*gcab;
                double t66200 = 1/pow(rho_a[index],1.6E1/3.0);
                double t66201 = 1/pow(rho_a[index],8.0/3.0);
                double t66202 = gamma_aa[index]*t66201*(1.0/2.0);
                double t66203 = 1/pow(rho_b[index],8.0/3.0);
                double t66204 = gamma_bb[index]*t66203*(1.0/2.0);
                double t66205 = t66202+t66204;
                double t66206 = gcab*t66205;
                double t66207 = t66206+1.0;
                double t66208 = t66205*t66205;
                double t66209 = t66208*t66199;
                double t66210 = gcab*t66205*2.0;
                double t66211 = t66210+t66209+1.0;
                double t66212 = t66199*t66199;
                double t66229 = gcab*t66201*2.0;
                double t66230 = t66201*t66205*t66199*6.0;
                double t66231 = gcab*t66201*t66208*t66199*6.0;
                double t66232 = t66201*t66212*t66205*t66208*2.0;
                double t66213 = t66230+t66231+t66232+t66229;
                double t66214 = t66208*t66208;
                double t66234 = gcab*t66201*(3.0/2.0);
                double t66235 = t66201*t66205*t66199*3.0;
                double t66236 = gcab*t66201*t66208*t66199*(3.0/2.0);
                double t66215 = t66234+t66235+t66236;
                double t66216 = t66208*t66199*3.0;
                double t66217 = gcab*t66205*t66208*t66199;
                double t66218 = gcab*t66205*3.0;
                double t66219 = t66216+t66217+t66218+1.0;
                double t66226 = gcab*t66201;
                double t66227 = t66201*t66205*t66199;
                double t66220 = t66226+t66227;
                double t66221 = t66208*t66199*6.0;
                double t66222 = gcab*t66205*t66208*t66199*4.0;
                double t66223 = t66212*t66214;
                double t66224 = gcab*t66205*4.0;
                double t66225 = t66221+t66222+t66223+t66224+1.0;
                double t66228 = 1/(t66211*t66211);
                double t66233 = 1/(t66225*t66225);
                double t66237 = 1/(t66219*t66219);
                double t66238 = c0p*t66143*t66145*2.0;
                double t66239 = gx*gx;
                double t66240 = gamma_aa[index]*gamma_aa[index];
                double t66241 = 1/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t66242 = t66239*t66239;
                double t66243 = 1/pow(rho_a[index],3.2E1/3.0);
                double t66244 = gamma_aa[index]*gx*t66201;
                double t66245 = t66244+1.0;
                double t66246 = gamma_aa[index]*gx*t66201*2.0;
                double t66247 = t66200*t66240*t66239;
                double t66248 = t66246+t66247+1.0;
                double t66249 = gamma_aa[index]*gx*t66201*3.0;
                double t66250 = gamma_aa[index]*gx*t66240*t66241*t66239;
                double t66251 = t66200*t66240*t66239*3.0;
                double t66252 = t66250+t66251+t66249+1.0;
                double t66253 = t66240*t66240;
                double t66269 = gx*t66201*4.0;
                double t66270 = gamma_aa[index]*t66200*t66239*1.2E1;
                double t66271 = gx*t66240*t66241*t66239*1.2E1;
                double t66272 = gamma_aa[index]*t66240*t66242*t66243*4.0;
                double t66254 = t66270+t66271+t66272+t66269;
                double t66255 = gamma_aa[index]*gx*t66201*4.0;
                double t66256 = gamma_aa[index]*gx*t66240*t66241*t66239*4.0;
                double t66257 = t66200*t66240*t66239*6.0;
                double t66258 = t66242*t66243*t66253;
                double t66259 = t66255+t66256+t66257+t66258+1.0;
                double t66262 = gx*t66201*2.0;
                double t66263 = gamma_aa[index]*t66200*t66239*2.0;
                double t66260 = t66262+t66263;
                double t66261 = 1/(t66252*t66252);
                double t66264 = 1/(t66248*t66248);
                double t66265 = gx*t66201*3.0;
                double t66266 = gamma_aa[index]*t66200*t66239*6.0;
                double t66267 = gx*t66240*t66241*t66239*3.0;
                double t66268 = t66265+t66266+t66267;
                double t66273 = 1/(t66259*t66259);
                double t66274 = b1f*t66130;
                double t66275 = b3f*t66131;
                double t66276 = b4f*t66132*t66133;
                double t66277 = b2f*c*t66128;
                double t66278 = t66274+t66275+t66276+t66277;
                double t66279 = 1/t66278;
                double t66280 = t66152*t66279*(1.0/2.0);
                double t66281 = t66280+1.0;
                double t66282 = log(t66281);
                double t66283 = a1f*c*t66128;
                double t66284 = t66283+1.0;
                double t66285 = t66238-c0f*t66282*t66284*2.0;
                double t66286 = t66238-t66151*t66148*t66285;
                double t66287 = gcaa*gcaa;
                double t66288 = t66287*t66287;
                double t66289 = gamma_aa[index]*gcaa*t66201;
                double t66290 = t66289+1.0;
                double t66291 = gamma_aa[index]*gcaa*t66201*2.0;
                double t66292 = t66200*t66240*t66287;
                double t66293 = t66291+t66292+1.0;
                double t66294 = gamma_aa[index]*gcaa*t66201*3.0;
                double t66295 = gamma_aa[index]*gcaa*t66240*t66241*t66287;
                double t66296 = t66200*t66240*t66287*3.0;
                double t66297 = t66294+t66295+t66296+1.0;
                double t66313 = gcaa*t66201*4.0;
                double t66314 = gamma_aa[index]*t66200*t66287*1.2E1;
                double t66315 = gcaa*t66240*t66241*t66287*1.2E1;
                double t66316 = gamma_aa[index]*t66240*t66243*t66288*4.0;
                double t66298 = t66313+t66314+t66315+t66316;
                double t66299 = gamma_aa[index]*gcaa*t66201*4.0;
                double t66300 = gamma_aa[index]*gcaa*t66240*t66241*t66287*4.0;
                double t66301 = t66200*t66240*t66287*6.0;
                double t66302 = t66243*t66253*t66288;
                double t66303 = t66300+t66301+t66302+t66299+1.0;
                double t66306 = gcaa*t66201*2.0;
                double t66307 = gamma_aa[index]*t66200*t66287*2.0;
                double t66304 = t66306+t66307;
                double t66305 = 1/(t66297*t66297);
                double t66308 = 1/(t66293*t66293);
                double t66309 = gcaa*t66201*3.0;
                double t66310 = gamma_aa[index]*t66200*t66287*6.0;
                double t66311 = gcaa*t66240*t66241*t66287*3.0;
                double t66312 = t66310+t66311+t66309;
                double t66317 = 1/(t66303*t66303);
                v_gamma_aa_gamma_aa_[index] = (rho_a[index]*t66286+rho_b[index]*(t66169-t66151*t66148*(t66169-c0f* \
                   log((t66152*(1.0/2.0))/(b1f*t66155+b3f*t66156+b2f*c*t66153+b4f*t66132*t66157)+1.0)*(a1f*c*t66153+1.0) \
                   *2.0))-t66170*(t66187-t66151*t66192*t66193*t66198*(t66187-c0f*log((t66152*(1.0/2.0))/(b1f*t66173+b3f* \
                   t66174+b2f*c*t66171+b4f*t66132*t66175)+1.0)*(a1f*c*t66171+1.0)*2.0)+(Aa*t66151*t66198*log((1.0/2.0) \
                   /(Aa*(b1a*t66173+b3a*t66174+b2a*c*t66171+b4a*t66132*t66175))+1.0)*(t66192*t66193-1.0)*(a1a*c*t66171+ \
                   1.0)*2.0)/d2fz0))*((ccab2*t66200*t66199*(1.0/2.0))/t66211-ccab1*t66200*1/(t66207*t66207)*t66199*(1.0/ \
                   2.0)+ccab4*t66212*(t66213*t66213)*t66214*1/(t66225*t66225*t66225)*2.0+ccab2*1/(t66211*t66211*t66211) \
                   *(t66220*t66220)*t66208*t66199*2.0-ccab2*t66200*t66212*t66208*t66228*(1.0/2.0)-ccab4*t66212*t66214* \
                   t66233*(t66200*t66199*3.0+t66200*t66212*t66208*3.0+gcab*t66200*t66205*t66199*6.0)+(ccab4*t66200*t66212* \
                   t66208*3.0)/t66225-ccab2*t66201*t66220*t66205*t66228*t66199*2.0+ccab1*gcab*t66200*t66205*1/(t66207* \
                   t66207*t66207)*t66199*(1.0/2.0)+(ccab3*gcab*t66200*t66205*t66199*(3.0/2.0))/t66219+ccab3*gcab*t66205* \
                   (t66215*t66215)*t66208*1/(t66219*t66219*t66219)*t66199*2.0-ccab3*gcab*t66201*t66215*t66208*t66237* \
                   t66199*3.0-ccab4*t66201*t66212*t66213*t66205*t66233*t66208*4.0-ccab3*gcab*t66205*t66208*t66237*t66199* \
                   (t66200*t66199*(3.0/2.0)+gcab*t66200*t66205*t66199*(3.0/2.0)))-c0*pow(rho_a[index],4.0/3.0)*(cx1*t66200* \
                   1/(t66245*t66245)*t66239*2.0-(cx2*t66200*t66239*2.0)/t66248+cx2*t66240*t66242*t66243*t66264*2.0-(cx4* \
                   t66240*t66242*t66243*1.2E1)/t66259+cx4*t66242*t66243*t66253*t66273*(t66200*t66239*1.2E1+t66240*t66242* \
                   t66243*1.2E1+gamma_aa[index]*gx*t66241*t66239*2.4E1)-cx1*gamma_aa[index]*gx*t66241*1/(t66245*t66245* \
                   t66245)*t66239*2.0-(cx3*gamma_aa[index]*gx*t66241*t66239*6.0)/t66252-cx2*t66200*t66240*(t66260*t66260) \
                   *t66239*1/(t66248*t66248*t66248)*2.0-cx4*t66242*t66243*t66253*(t66254*t66254)*1/(t66259*t66259*t66259) \
                   *2.0+cx2*gamma_aa[index]*t66200*t66260*t66264*t66239*4.0+cx4*gamma_aa[index]*t66240*t66242*t66243* \
                   t66254*t66273*8.0+cx3*gx*t66240*t66241*t66261*t66239*t66268*6.0+cx3*gamma_aa[index]*gx*t66240*t66241* \
                   t66261*t66239*(t66200*t66239*6.0+gamma_aa[index]*gx*t66241*t66239*6.0)-cx3*gamma_aa[index]*gx*t66240* \
                   t66241*1/(t66252*t66252*t66252)*t66239*(t66268*t66268)*2.0)+rho_a[index]*t66286*(ccaa1*t66200*1/(t66290* \
                   t66290)*t66287*2.0-(ccaa2*t66200*t66287*2.0)/t66293+ccaa2*t66240*t66243*t66308*t66288*2.0-(ccaa4*t66240* \
                   t66243*t66288*1.2E1)/t66303+ccaa4*t66243*t66253*t66317*t66288*(t66200*t66287*1.2E1+t66240*t66243*t66288* \
                   1.2E1+gamma_aa[index]*gcaa*t66241*t66287*2.4E1)-ccaa1*gamma_aa[index]*gcaa*t66241*1/(t66290*t66290* \
                   t66290)*t66287*2.0-(ccaa3*gamma_aa[index]*gcaa*t66241*t66287*6.0)/t66297-ccaa2*t66200*t66240*(t66304* \
                   t66304)*1/(t66293*t66293*t66293)*t66287*2.0-ccaa4*1/(t66303*t66303*t66303)*t66243*t66253*t66288*(t66298* \
                   t66298)*2.0+ccaa2*gamma_aa[index]*t66200*t66304*t66308*t66287*4.0+ccaa4*gamma_aa[index]*t66240*t66243* \
                   t66317*t66288*t66298*8.0+ccaa3*gcaa*t66240*t66312*t66241*t66305*t66287*6.0+ccaa3*gamma_aa[index]*gcaa* \
                   t66240*t66241*t66305*t66287*(t66200*t66287*6.0+gamma_aa[index]*gcaa*t66241*t66287*6.0)-ccaa3*gamma_aa[index]* \
                   gcaa*t66240*(t66312*t66312)*t66241*t66287*1/(t66297*t66297*t66297)*2.0);
            } else if (rho_a[index] > cutoff_) {
                double t67820 = gx*gx;
                double t67821 = 1/pow(rho_a[index],1.6E1/3.0);
                double t67822 = 1/pow(rho_a[index],8.0/3.0);
                double t67823 = gamma_aa[index]*gamma_aa[index];
                double t67824 = 1/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t67825 = t67820*t67820;
                double t67826 = 1/pow(rho_a[index],3.2E1/3.0);
                double t67827 = gamma_aa[index]*gx*t67822;
                double t67828 = t67827+1.0;
                double t67829 = gamma_aa[index]*gx*t67822*2.0;
                double t67830 = t67820*t67821*t67823;
                double t67831 = t67830+t67829+1.0;
                double t67832 = gamma_aa[index]*gx*t67822*3.0;
                double t67833 = gamma_aa[index]*gx*t67820*t67823*t67824;
                double t67834 = t67820*t67821*t67823*3.0;
                double t67835 = t67832+t67833+t67834+1.0;
                double t67836 = t67823*t67823;
                double t67852 = gx*t67822*4.0;
                double t67853 = gamma_aa[index]*t67820*t67821*1.2E1;
                double t67854 = gx*t67820*t67823*t67824*1.2E1;
                double t67855 = gamma_aa[index]*t67823*t67825*t67826*4.0;
                double t67837 = t67852+t67853+t67854+t67855;
                double t67838 = gamma_aa[index]*gx*t67822*4.0;
                double t67839 = gamma_aa[index]*gx*t67820*t67823*t67824*4.0;
                double t67840 = t67820*t67821*t67823*6.0;
                double t67841 = t67825*t67826*t67836;
                double t67842 = t67840+t67841+t67838+t67839+1.0;
                double t67845 = gx*t67822*2.0;
                double t67846 = gamma_aa[index]*t67820*t67821*2.0;
                double t67843 = t67845+t67846;
                double t67844 = 1/(t67835*t67835);
                double t67847 = 1/(t67831*t67831);
                double t67848 = gx*t67822*3.0;
                double t67849 = gamma_aa[index]*t67820*t67821*6.0;
                double t67850 = gx*t67820*t67823*t67824*3.0;
                double t67851 = t67850+t67848+t67849;
                double t67856 = 1/(t67842*t67842);
                double t67857 = 1/pow(rho_a[index],1.0/3.0);
                double t67858 = c*t67857;
                double t67859 = sqrt(t67858);
                double t67860 = pow(t67858,3.0/2.0);
                double t67861 = c*c;
                double t67862 = 1/pow(rho_a[index],2.0/3.0);
                double t67863 = 1/c0p;
                double t67864 = b1p*t67859;
                double t67865 = b3p*t67860;
                double t67866 = b4p*t67861*t67862;
                double t67867 = b2p*c*t67857;
                double t67868 = t67864+t67865+t67866+t67867;
                double t67869 = 1/t67868;
                double t67870 = t67863*t67869*(1.0/2.0);
                double t67871 = t67870+1.0;
                double t67872 = log(t67871);
                double t67873 = a1p*c*t67857;
                double t67874 = t67873+1.0;
                double t67875 = gcaa*gcaa;
                double t67876 = t67875*t67875;
                double t67877 = gamma_aa[index]*gcaa*t67822;
                double t67878 = t67877+1.0;
                double t67879 = gamma_aa[index]*gcaa*t67822*2.0;
                double t67880 = t67821*t67823*t67875;
                double t67881 = t67880+t67879+1.0;
                double t67882 = gamma_aa[index]*gcaa*t67822*3.0;
                double t67883 = gamma_aa[index]*gcaa*t67823*t67824*t67875;
                double t67884 = t67821*t67823*t67875*3.0;
                double t67885 = t67882+t67883+t67884+1.0;
                double t67901 = gcaa*t67822*4.0;
                double t67902 = gamma_aa[index]*t67821*t67875*1.2E1;
                double t67903 = gcaa*t67823*t67824*t67875*1.2E1;
                double t67904 = gamma_aa[index]*t67823*t67826*t67876*4.0;
                double t67886 = t67901+t67902+t67903+t67904;
                double t67887 = gamma_aa[index]*gcaa*t67822*4.0;
                double t67888 = gamma_aa[index]*gcaa*t67823*t67824*t67875*4.0;
                double t67889 = t67821*t67823*t67875*6.0;
                double t67890 = t67826*t67836*t67876;
                double t67891 = t67890+t67887+t67888+t67889+1.0;
                double t67894 = gcaa*t67822*2.0;
                double t67895 = gamma_aa[index]*t67821*t67875*2.0;
                double t67892 = t67894+t67895;
                double t67893 = 1/(t67885*t67885);
                double t67896 = 1/(t67881*t67881);
                double t67897 = gcaa*t67822*3.0;
                double t67898 = gamma_aa[index]*t67821*t67875*6.0;
                double t67899 = gcaa*t67823*t67824*t67875*3.0;
                double t67900 = t67897+t67898+t67899;
                double t67905 = 1/(t67891*t67891);
                v_gamma_aa_gamma_aa_[index] = -c0*pow(rho_a[index],4.0/3.0)*(cx1*t67820*t67821*1/(t67828*t67828)* \
                   2.0-(cx2*t67820*t67821*2.0)/t67831+cx2*t67823*t67825*t67826*t67847*2.0-(cx4*t67823*t67825*t67826*1.2E1) \
                   /t67842+cx4*t67825*t67826*t67836*t67856*(t67820*t67821*1.2E1+t67823*t67825*t67826*1.2E1+gamma_aa[index]* \
                   gx*t67820*t67824*2.4E1)-cx1*gamma_aa[index]*gx*t67820*t67824*1/(t67828*t67828*t67828)*2.0-(cx3*gamma_aa[index]* \
                   gx*t67820*t67824*6.0)/t67835-cx2*t67820*t67821*1/(t67831*t67831*t67831)*t67823*(t67843*t67843)*2.0- \
                   cx4*1/(t67842*t67842*t67842)*t67825*t67826*t67836*(t67837*t67837)*2.0+cx2*gamma_aa[index]*t67820*t67821* \
                   t67843*t67847*4.0+cx4*gamma_aa[index]*t67823*t67825*t67826*t67837*t67856*8.0+cx3*gx*t67820*t67823* \
                   t67824*t67851*t67844*6.0+cx3*gamma_aa[index]*gx*t67820*t67823*t67824*t67844*(t67820*t67821*6.0+gamma_aa[index]* \
                   gx*t67820*t67824*6.0)-cx3*gamma_aa[index]*gx*t67820*t67823*t67824*(t67851*t67851)*1/(t67835*t67835* \
                   t67835)*2.0)-rho_a[index]*(((pow(2.0,1.0/3.0)*2.0-2.0)*(c0f*log((1.0/2.0)/(c0f*(b1f*t67859+b3f*t67860+ \
                   b2f*c*t67857+b4f*t67861*t67862))+1.0)*(a1f*c*t67857+1.0)*2.0-c0p*t67872*t67874*2.0))/(two_13*2.0-2.0) \
                   +c0p*t67872*t67874*2.0)*((ccaa2*t67821*t67875*2.0)/t67881-ccaa1*t67821*t67875*1/(t67878*t67878)*2.0- \
                   ccaa2*t67823*t67826*t67876*t67896*2.0+(ccaa4*t67823*t67826*t67876*1.2E1)/t67891-ccaa4*t67905*t67826* \
                   t67836*t67876*(t67821*t67875*1.2E1+t67823*t67826*t67876*1.2E1+gamma_aa[index]*gcaa*t67824*t67875*2.4E1) \
                   +(ccaa3*gamma_aa[index]*gcaa*t67824*t67875*6.0)/t67885+ccaa1*gamma_aa[index]*gcaa*t67824*t67875*1/ \
                   (t67878*t67878*t67878)*2.0+ccaa2*t67821*t67823*1/(t67881*t67881*t67881)*(t67892*t67892)*t67875*2.0+ \
                   ccaa4*t67826*t67836*1/(t67891*t67891*t67891)*t67876*(t67886*t67886)*2.0-ccaa2*gamma_aa[index]*t67821* \
                   t67892*t67875*t67896*4.0-ccaa4*gamma_aa[index]*t67823*t67905*t67826*t67876*t67886*8.0-ccaa3*gcaa*t67900* \
                   t67823*t67824*t67875*t67893*6.0-ccaa3*gamma_aa[index]*gcaa*t67823*t67824*t67875*t67893*(t67821*t67875* \
                   6.0+gamma_aa[index]*gcaa*t67824*t67875*6.0)+ccaa3*gamma_aa[index]*gcaa*(t67900*t67900)*t67823*t67824* \
                   t67875*1/(t67885*t67885*t67885)*2.0);
            } else if (rho_b[index] > cutoff_) {
                v_gamma_aa_gamma_aa_[index] = 0.0;
            } else {
                v_gamma_aa_gamma_aa_[index] = 0.0;
            } 

            //V_gamma_aa_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_aa_gamma_ab_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_aa_gamma_ab_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_aa_gamma_ab_[index] = 0.0;
            } else {
                v_gamma_aa_gamma_ab_[index] = 0.0;
            } 

            //V_gamma_aa_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t66320 = 1/pow(rho_a[index],1.0/3.0);
                double t66321 = c*t66320;
                double t66322 = sqrt(t66321);
                double t66323 = pow(t66321,3.0/2.0);
                double t66324 = c*c;
                double t66325 = 1/pow(rho_a[index],2.0/3.0);
                double t66326 = 1/c0p;
                double t66327 = b1p*t66322;
                double t66328 = b3p*t66323;
                double t66329 = b4p*t66324*t66325;
                double t66330 = b2p*c*t66320;
                double t66331 = t66330+t66327+t66328+t66329;
                double t66332 = 1/t66331;
                double t66333 = t66332*t66326*(1.0/2.0);
                double t66334 = t66333+1.0;
                double t66335 = log(t66334);
                double t66336 = a1p*c*t66320;
                double t66337 = t66336+1.0;
                double t66338 = pow(2.0,1.0/3.0);
                double t66339 = t66338*2.0;
                double t66340 = t66339-2.0;
                double t66341 = two_13*2.0;
                double t66342 = t66341-2.0;
                double t66343 = 1/t66342;
                double t66344 = 1/c0f;
                double t66345 = 1/pow(rho_b[index],1.0/3.0);
                double t66346 = c*t66345;
                double t66347 = sqrt(t66346);
                double t66348 = pow(t66346,3.0/2.0);
                double t66349 = 1/pow(rho_b[index],2.0/3.0);
                double t66350 = b1p*t66347;
                double t66351 = b3p*t66348;
                double t66352 = b4p*t66324*t66349;
                double t66353 = b2p*c*t66345;
                double t66354 = t66350+t66351+t66352+t66353;
                double t66355 = 1/t66354;
                double t66356 = t66326*t66355*(1.0/2.0);
                double t66357 = t66356+1.0;
                double t66358 = log(t66357);
                double t66359 = a1p*c*t66345;
                double t66360 = t66359+1.0;
                double t66361 = c0p*t66360*t66358*2.0;
                double t66362 = rho_a[index]+rho_b[index];
                double t66363 = 1/pow(t66362,1.0/3.0);
                double t66364 = c*t66363;
                double t66365 = sqrt(t66364);
                double t66366 = pow(t66364,3.0/2.0);
                double t66367 = 1/pow(t66362,2.0/3.0);
                double t66368 = b1p*t66365;
                double t66369 = b3p*t66366;
                double t66370 = b4p*t66324*t66367;
                double t66371 = b2p*c*t66363;
                double t66372 = t66370+t66371+t66368+t66369;
                double t66373 = 1/t66372;
                double t66374 = t66326*t66373*(1.0/2.0);
                double t66375 = t66374+1.0;
                double t66376 = log(t66375);
                double t66377 = a1p*c*t66363;
                double t66378 = t66377+1.0;
                double t66379 = c0p*t66376*t66378*2.0;
                double t66380 = rho_a[index]-rho_b[index];
                double t66381 = t66380*t66380;
                double t66382 = 1/t66362;
                double t66383 = t66380*t66382;
                double t66384 = 1/(t66362*t66362*t66362*t66362);
                double t66385 = t66381*t66381;
                double t66386 = t66383+1.0;
                double t66387 = pow(t66386,4.0/3.0);
                double t66388 = -t66383+1.0;
                double t66389 = pow(t66388,4.0/3.0);
                double t66390 = t66387+t66389-2.0;
                double t66391 = gcab*gcab;
                double t66394 = 1/pow(rho_a[index],8.0/3.0);
                double t66395 = 1/pow(rho_b[index],8.0/3.0);
                double t66396 = gamma_aa[index]*t66394*(1.0/2.0);
                double t66397 = gamma_bb[index]*t66395*(1.0/2.0);
                double t66392 = t66396+t66397;
                double t66393 = t66392*t66392;
                double t66398 = t66391*t66391;
                double t66399 = t66393*t66393;
                double t66400 = t66391*t66393*3.0;
                double t66401 = gcab*t66391*t66392*t66393;
                double t66402 = gcab*t66392*3.0;
                double t66403 = t66400+t66401+t66402+1.0;
                double t66404 = t66391*t66393;
                double t66405 = gcab*t66392*2.0;
                double t66406 = t66404+t66405+1.0;
                double t66407 = t66391*t66393*6.0;
                double t66408 = gcab*t66391*t66392*t66393*4.0;
                double t66409 = t66398*t66399;
                double t66410 = gcab*t66392*4.0;
                double t66411 = t66410+t66407+t66408+t66409+1.0;
                double t66412 = 1/(t66406*t66406);
                double t66413 = gcab*t66394;
                double t66414 = t66391*t66392*t66394;
                double t66415 = t66413+t66414;
                double t66416 = gcab*t66395;
                double t66417 = t66391*t66392*t66395;
                double t66418 = t66416+t66417;
                double t66419 = gcab*t66392;
                double t66420 = t66419+1.0;
                double t66421 = gcab*t66394*2.0;
                double t66422 = t66391*t66392*t66394*6.0;
                double t66423 = gcab*t66391*t66393*t66394*6.0;
                double t66424 = t66392*t66393*t66394*t66398*2.0;
                double t66425 = t66421+t66422+t66423+t66424;
                double t66426 = 1/(t66411*t66411);
                double t66427 = gcab*t66395*2.0;
                double t66428 = t66391*t66392*t66395*6.0;
                double t66429 = gcab*t66391*t66393*t66395*6.0;
                double t66430 = t66392*t66393*t66395*t66398*2.0;
                double t66431 = t66430+t66427+t66428+t66429;
                double t66432 = gcab*t66394*(3.0/2.0);
                double t66433 = t66391*t66392*t66394*3.0;
                double t66434 = gcab*t66391*t66393*t66394*(3.0/2.0);
                double t66435 = t66432+t66433+t66434;
                double t66436 = 1/(t66403*t66403);
                double t66437 = gcab*t66395*(3.0/2.0);
                double t66438 = t66391*t66392*t66395*3.0;
                double t66439 = gcab*t66391*t66393*t66395*(3.0/2.0);
                double t66440 = t66437+t66438+t66439;
                v_gamma_aa_gamma_bb_[index] = (-rho_b[index]*(t66361-t66340*t66343*(t66361-c0f*log((t66344*(1.0/2.0) \
                   )/(b1f*t66347+b3f*t66348+b2f*c*t66345+b4f*t66324*t66349)+1.0)*(a1f*c*t66345+1.0)*2.0))+t66362*(t66379- \
                   t66343*t66390*t66384*t66385*(t66379-c0f*log((t66344*(1.0/2.0))/(b1f*t66365+b3f*t66366+b2f*c*t66363+ \
                   b4f*t66324*t66367)+1.0)*(a1f*c*t66363+1.0)*2.0)+(Aa*t66343*t66390*log((1.0/2.0)/(Aa*(b1a*t66365+b3a* \
                   t66366+b2a*c*t66363+b4a*t66324*t66367))+1.0)*(t66384*t66385-1.0)*(a1a*c*t66363+1.0)*2.0)/d2fz0)+rho_a[index]* \
                   (t66340*t66343*(c0p*t66335*t66337*2.0-c0f*log((t66344*(1.0/2.0))/(b1f*t66322+b3f*t66323+b2f*c*t66320+ \
                   b4f*t66324*t66325)+1.0)*(a1f*c*t66320+1.0)*2.0)-c0p*t66335*t66337*2.0))*(ccab4*t66426*t66398*t66399* \
                   (t66391*t66394*t66395*3.0+t66393*t66394*t66395*t66398*3.0+gcab*t66391*t66392*t66394*t66395*6.0)+ccab1* \
                   1/(t66420*t66420)*t66391*t66394*t66395*(1.0/2.0)-(ccab2*t66391*t66394*t66395*(1.0/2.0))/t66406+ccab2* \
                   t66412*t66415*t66391*t66392*t66395+ccab2*t66412*t66391*t66418*t66392*t66394+ccab2*t66412*t66393*t66394* \
                   t66395*t66398*(1.0/2.0)-ccab2*1/(t66406*t66406*t66406)*t66415*t66391*t66418*t66393*2.0-ccab4*1/(t66411* \
                   t66411*t66411)*t66431*t66425*t66398*t66399*2.0-(ccab4*t66393*t66394*t66395*t66398*3.0)/t66411+ccab3* \
                   gcab*t66440*t66391*t66436*t66393*t66394*(3.0/2.0)+ccab3*gcab*t66435*t66391*t66436*t66393*t66395*(3.0/ \
                   2.0)+ccab4*t66431*t66426*t66392*t66393*t66394*t66398*2.0+ccab4*t66425*t66426*t66392*t66393*t66395* \
                   t66398*2.0+ccab3*gcab*t66391*t66436*t66392*t66393*(t66391*t66394*t66395*(3.0/2.0)+gcab*t66391*t66392* \
                   t66394*t66395*(3.0/2.0))-ccab1*gcab*1/(t66420*t66420*t66420)*t66391*t66392*t66394*t66395*(1.0/2.0) \
                   -(ccab3*gcab*t66391*t66392*t66394*t66395*(3.0/2.0))/t66403-ccab3*gcab*1/(t66403*t66403*t66403)*t66440* \
                   t66435*t66391*t66392*t66393*2.0);
            } else if (rho_a[index] > cutoff_) {
                v_gamma_aa_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_aa_gamma_bb_[index] = 0.0;
            } else {
                v_gamma_aa_gamma_bb_[index] = 0.0;
            } 

            //V_gamma_ab_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_ab_gamma_ab_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_ab_gamma_ab_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_ab_gamma_ab_[index] = 0.0;
            } else {
                v_gamma_ab_gamma_ab_[index] = 0.0;
            } 

            //V_gamma_ab_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_ab_gamma_bb_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_ab_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_ab_gamma_bb_[index] = 0.0;
            } else {
                v_gamma_ab_gamma_bb_[index] = 0.0;
            } 

            //V_gamma_bb_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t66444 = 1/pow(rho_a[index],1.0/3.0);
                double t66445 = c*t66444;
                double t66446 = sqrt(t66445);
                double t66447 = pow(t66445,3.0/2.0);
                double t66448 = c*c;
                double t66449 = 1/pow(rho_a[index],2.0/3.0);
                double t66450 = 1/c0p;
                double t66451 = b1p*t66446;
                double t66452 = b3p*t66447;
                double t66453 = b4p*t66448*t66449;
                double t66454 = b2p*c*t66444;
                double t66455 = t66451+t66452+t66453+t66454;
                double t66456 = 1/t66455;
                double t66457 = t66450*t66456*(1.0/2.0);
                double t66458 = t66457+1.0;
                double t66459 = log(t66458);
                double t66460 = a1p*c*t66444;
                double t66461 = t66460+1.0;
                double t66462 = pow(2.0,1.0/3.0);
                double t66463 = t66462*2.0;
                double t66464 = t66463-2.0;
                double t66465 = two_13*2.0;
                double t66466 = t66465-2.0;
                double t66467 = 1/t66466;
                double t66468 = 1/c0f;
                double t66469 = 1/pow(rho_b[index],1.0/3.0);
                double t66470 = c*t66469;
                double t66471 = sqrt(t66470);
                double t66472 = pow(t66470,3.0/2.0);
                double t66473 = 1/pow(rho_b[index],2.0/3.0);
                double t66474 = b1p*t66471;
                double t66475 = b3p*t66472;
                double t66476 = b4p*t66473*t66448;
                double t66477 = b2p*c*t66469;
                double t66478 = t66474+t66475+t66476+t66477;
                double t66479 = 1/t66478;
                double t66480 = t66450*t66479*(1.0/2.0);
                double t66481 = t66480+1.0;
                double t66482 = log(t66481);
                double t66483 = a1p*c*t66469;
                double t66484 = t66483+1.0;
                double t66485 = c0p*t66482*t66484*2.0;
                double t66486 = rho_a[index]+rho_b[index];
                double t66487 = 1/pow(t66486,1.0/3.0);
                double t66488 = c*t66487;
                double t66489 = sqrt(t66488);
                double t66490 = pow(t66488,3.0/2.0);
                double t66491 = 1/pow(t66486,2.0/3.0);
                double t66492 = b1p*t66489;
                double t66493 = b3p*t66490;
                double t66494 = b4p*t66491*t66448;
                double t66495 = b2p*c*t66487;
                double t66496 = t66492+t66493+t66494+t66495;
                double t66497 = 1/t66496;
                double t66498 = t66450*t66497*(1.0/2.0);
                double t66499 = t66498+1.0;
                double t66500 = log(t66499);
                double t66501 = a1p*c*t66487;
                double t66502 = t66501+1.0;
                double t66503 = c0p*t66500*t66502*2.0;
                double t66504 = rho_a[index]-rho_b[index];
                double t66505 = t66504*t66504;
                double t66506 = 1/t66486;
                double t66507 = t66504*t66506;
                double t66508 = 1/(t66486*t66486*t66486*t66486);
                double t66509 = t66505*t66505;
                double t66510 = t66507+1.0;
                double t66511 = pow(t66510,4.0/3.0);
                double t66512 = -t66507+1.0;
                double t66513 = pow(t66512,4.0/3.0);
                double t66514 = t66511+t66513-2.0;
                double t66515 = gcab*gcab;
                double t66516 = 1/pow(rho_b[index],1.6E1/3.0);
                double t66517 = 1/pow(rho_a[index],8.0/3.0);
                double t66518 = gamma_aa[index]*t66517*(1.0/2.0);
                double t66519 = 1/pow(rho_b[index],8.0/3.0);
                double t66520 = gamma_bb[index]*t66519*(1.0/2.0);
                double t66521 = t66520+t66518;
                double t66522 = gcab*t66521;
                double t66523 = t66522+1.0;
                double t66524 = t66521*t66521;
                double t66525 = t66515*t66524;
                double t66526 = gcab*t66521*2.0;
                double t66527 = t66525+t66526+1.0;
                double t66528 = t66515*t66515;
                double t66545 = gcab*t66519*2.0;
                double t66546 = t66521*t66515*t66519*6.0;
                double t66547 = gcab*t66515*t66524*t66519*6.0;
                double t66548 = t66521*t66524*t66519*t66528*2.0;
                double t66529 = t66545+t66546+t66547+t66548;
                double t66530 = t66524*t66524;
                double t66550 = gcab*t66519*(3.0/2.0);
                double t66551 = t66521*t66515*t66519*3.0;
                double t66552 = gcab*t66515*t66524*t66519*(3.0/2.0);
                double t66531 = t66550+t66551+t66552;
                double t66532 = t66515*t66524*3.0;
                double t66533 = gcab*t66521*t66515*t66524;
                double t66534 = gcab*t66521*3.0;
                double t66535 = t66532+t66533+t66534+1.0;
                double t66542 = gcab*t66519;
                double t66543 = t66521*t66515*t66519;
                double t66536 = t66542+t66543;
                double t66537 = t66515*t66524*6.0;
                double t66538 = gcab*t66521*t66515*t66524*4.0;
                double t66539 = t66530*t66528;
                double t66540 = gcab*t66521*4.0;
                double t66541 = t66540+t66537+t66538+t66539+1.0;
                double t66544 = 1/(t66527*t66527);
                double t66549 = 1/(t66541*t66541);
                double t66553 = 1/(t66535*t66535);
                double t66554 = gx*gx;
                double t66555 = gamma_bb[index]*gamma_bb[index];
                double t66556 = 1/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]);
                double t66557 = t66554*t66554;
                double t66558 = 1/pow(rho_b[index],3.2E1/3.0);
                double t66559 = gamma_bb[index]*gx*t66519;
                double t66560 = t66559+1.0;
                double t66561 = gamma_bb[index]*gx*t66519*2.0;
                double t66562 = t66516*t66554*t66555;
                double t66563 = t66561+t66562+1.0;
                double t66564 = gamma_bb[index]*gx*t66519*3.0;
                double t66565 = gamma_bb[index]*gx*t66554*t66555*t66556;
                double t66566 = t66516*t66554*t66555*3.0;
                double t66567 = t66564+t66565+t66566+1.0;
                double t66568 = t66555*t66555;
                double t66584 = gx*t66519*4.0;
                double t66585 = gamma_bb[index]*t66516*t66554*1.2E1;
                double t66586 = gx*t66554*t66555*t66556*1.2E1;
                double t66587 = gamma_bb[index]*t66555*t66557*t66558*4.0;
                double t66569 = t66584+t66585+t66586+t66587;
                double t66570 = gamma_bb[index]*gx*t66519*4.0;
                double t66571 = gamma_bb[index]*gx*t66554*t66555*t66556*4.0;
                double t66572 = t66516*t66554*t66555*6.0;
                double t66573 = t66557*t66558*t66568;
                double t66574 = t66570+t66571+t66572+t66573+1.0;
                double t66577 = gx*t66519*2.0;
                double t66578 = gamma_bb[index]*t66516*t66554*2.0;
                double t66575 = t66577+t66578;
                double t66576 = 1/(t66567*t66567);
                double t66579 = 1/(t66563*t66563);
                double t66580 = gx*t66519*3.0;
                double t66581 = gamma_bb[index]*t66516*t66554*6.0;
                double t66582 = gx*t66554*t66555*t66556*3.0;
                double t66583 = t66580+t66581+t66582;
                double t66588 = 1/(t66574*t66574);
                double t66589 = b1f*t66471;
                double t66590 = b3f*t66472;
                double t66591 = b4f*t66473*t66448;
                double t66592 = b2f*c*t66469;
                double t66593 = t66590+t66591+t66592+t66589;
                double t66594 = 1/t66593;
                double t66595 = t66468*t66594*(1.0/2.0);
                double t66596 = t66595+1.0;
                double t66597 = log(t66596);
                double t66598 = a1f*c*t66469;
                double t66599 = t66598+1.0;
                double t66600 = t66485-c0f*t66597*t66599*2.0;
                double t66601 = t66485-t66600*t66464*t66467;
                double t66602 = gcaa*gcaa;
                double t66603 = t66602*t66602;
                double t66604 = gamma_bb[index]*gcaa*t66519;
                double t66605 = t66604+1.0;
                double t66606 = gamma_bb[index]*gcaa*t66519*2.0;
                double t66607 = t66602*t66516*t66555;
                double t66608 = t66606+t66607+1.0;
                double t66609 = gamma_bb[index]*gcaa*t66519*3.0;
                double t66610 = gamma_bb[index]*gcaa*t66602*t66555*t66556;
                double t66611 = t66602*t66516*t66555*3.0;
                double t66612 = t66610+t66611+t66609+1.0;
                double t66628 = gcaa*t66519*4.0;
                double t66629 = gamma_bb[index]*t66602*t66516*1.2E1;
                double t66630 = gcaa*t66602*t66555*t66556*1.2E1;
                double t66631 = gamma_bb[index]*t66603*t66555*t66558*4.0;
                double t66613 = t66630+t66631+t66628+t66629;
                double t66614 = gamma_bb[index]*gcaa*t66519*4.0;
                double t66615 = gamma_bb[index]*gcaa*t66602*t66555*t66556*4.0;
                double t66616 = t66602*t66516*t66555*6.0;
                double t66617 = t66603*t66558*t66568;
                double t66618 = t66614+t66615+t66616+t66617+1.0;
                double t66621 = gcaa*t66519*2.0;
                double t66622 = gamma_bb[index]*t66602*t66516*2.0;
                double t66619 = t66621+t66622;
                double t66620 = 1/(t66612*t66612);
                double t66623 = 1/(t66608*t66608);
                double t66624 = gcaa*t66519*3.0;
                double t66625 = gamma_bb[index]*t66602*t66516*6.0;
                double t66626 = gcaa*t66602*t66555*t66556*3.0;
                double t66627 = t66624+t66625+t66626;
                double t66632 = 1/(t66618*t66618);
                v_gamma_bb_gamma_bb_[index] = (-rho_b[index]*t66601+t66486*(t66503-t66514*t66508*t66509*t66467*(t66503- \
                   c0f*log((t66468*(1.0/2.0))/(b1f*t66489+b3f*t66490+b2f*c*t66487+b4f*t66491*t66448)+1.0)*(a1f*c*t66487+ \
                   1.0)*2.0)+(Aa*t66514*t66467*log((1.0/2.0)/(Aa*(b1a*t66489+b3a*t66490+b2a*c*t66487+b4a*t66491*t66448) \
                   )+1.0)*(t66508*t66509-1.0)*(a1a*c*t66487+1.0)*2.0)/d2fz0)+rho_a[index]*(t66464*t66467*(c0p*t66461* \
                   t66459*2.0-c0f*log((t66468*(1.0/2.0))/(b1f*t66446+b3f*t66447+b2f*c*t66444+b4f*t66448*t66449)+1.0)* \
                   (a1f*c*t66444+1.0)*2.0)-c0p*t66461*t66459*2.0))*(ccab1*1/(t66523*t66523)*t66515*t66516*(1.0/2.0)-(ccab2* \
                   t66515*t66516*(1.0/2.0))/t66527-ccab2*t66515*t66524*1/(t66527*t66527*t66527)*(t66536*t66536)*2.0-ccab4* \
                   t66530*1/(t66541*t66541*t66541)*t66528*(t66529*t66529)*2.0+ccab2*t66524*t66516*t66544*t66528*(1.0/ \
                   2.0)+ccab4*t66530*t66528*t66549*(t66515*t66516*3.0+t66524*t66516*t66528*3.0+gcab*t66521*t66515*t66516* \
                   6.0)-(ccab4*t66524*t66516*t66528*3.0)/t66541+ccab2*t66521*t66515*t66544*t66536*t66519*2.0-ccab1*gcab* \
                   t66521*1/(t66523*t66523*t66523)*t66515*t66516*(1.0/2.0)-(ccab3*gcab*t66521*t66515*t66516*(3.0/2.0) \
                   )/t66535-ccab3*gcab*t66521*(t66531*t66531)*t66515*t66524*1/(t66535*t66535*t66535)*2.0+ccab3*gcab*t66531* \
                   t66515*t66524*t66553*t66519*3.0+ccab4*t66521*t66524*t66519*t66528*t66529*t66549*4.0+ccab3*gcab*t66521* \
                   t66515*t66524*t66553*(t66515*t66516*(3.0/2.0)+gcab*t66521*t66515*t66516*(3.0/2.0)))-c0*pow(rho_b[index],4.0/ \
                   3.0)*(cx1*1/(t66560*t66560)*t66516*t66554*2.0-(cx2*t66516*t66554*2.0)/t66563+cx2*t66555*t66557*t66558* \
                   t66579*2.0-(cx4*t66555*t66557*t66558*1.2E1)/t66574+cx4*t66557*t66558*t66568*t66588*(t66516*t66554* \
                   1.2E1+t66555*t66557*t66558*1.2E1+gamma_bb[index]*gx*t66554*t66556*2.4E1)-cx1*gamma_bb[index]*gx*1/ \
                   (t66560*t66560*t66560)*t66554*t66556*2.0-(cx3*gamma_bb[index]*gx*t66554*t66556*6.0)/t66567-cx2*t66516* \
                   t66554*1/(t66563*t66563*t66563)*t66555*(t66575*t66575)*2.0-cx4*1/(t66574*t66574*t66574)*t66557*t66558* \
                   t66568*(t66569*t66569)*2.0+cx2*gamma_bb[index]*t66516*t66554*t66575*t66579*4.0+cx4*gamma_bb[index]* \
                   t66555*t66557*t66558*t66569*t66588*8.0+cx3*gx*t66554*t66555*t66556*t66583*t66576*6.0+cx3*gamma_bb[index]* \
                   gx*t66554*t66555*t66556*t66576*(t66516*t66554*6.0+gamma_bb[index]*gx*t66554*t66556*6.0)-cx3*gamma_bb[index]* \
                   gx*t66554*t66555*t66556*(t66583*t66583)*1/(t66567*t66567*t66567)*2.0)+rho_b[index]*t66601*(ccaa1*t66602* \
                   1/(t66605*t66605)*t66516*2.0-(ccaa2*t66602*t66516*2.0)/t66608+ccaa2*t66603*t66623*t66555*t66558*2.0- \
                   (ccaa4*t66603*t66555*t66558*1.2E1)/t66618+ccaa4*t66603*t66632*t66558*t66568*(t66602*t66516*1.2E1+t66603* \
                   t66555*t66558*1.2E1+gamma_bb[index]*gcaa*t66602*t66556*2.4E1)-(ccaa3*gamma_bb[index]*gcaa*t66602*t66556* \
                   6.0)/t66612-ccaa1*gamma_bb[index]*gcaa*t66602*1/(t66605*t66605*t66605)*t66556*2.0-ccaa2*t66602*t66516* \
                   1/(t66608*t66608*t66608)*t66555*(t66619*t66619)*2.0-ccaa4*t66603*(t66613*t66613)*1/(t66618*t66618* \
                   t66618)*t66558*t66568*2.0+ccaa2*gamma_bb[index]*t66602*t66623*t66516*t66619*4.0+ccaa4*gamma_bb[index]* \
                   t66603*t66613*t66632*t66555*t66558*8.0+ccaa3*gcaa*t66602*t66620*t66555*t66627*t66556*6.0+ccaa3*gamma_bb[index]* \
                   gcaa*t66602*t66620*t66555*t66556*(t66602*t66516*6.0+gamma_bb[index]*gcaa*t66602*t66556*6.0)-ccaa3* \
                   gamma_bb[index]*gcaa*t66602*1/(t66612*t66612*t66612)*t66555*(t66627*t66627)*t66556*2.0);
            } else if (rho_a[index] > cutoff_) {
                v_gamma_bb_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                double t67186 = gx*gx;
                double t67187 = 1/pow(rho_b[index],1.6E1/3.0);
                double t67188 = 1/pow(rho_b[index],8.0/3.0);
                double t67189 = gamma_bb[index]*gamma_bb[index];
                double t67190 = 1/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]);
                double t67191 = t67186*t67186;
                double t67192 = 1/pow(rho_b[index],3.2E1/3.0);
                double t67193 = gamma_bb[index]*gx*t67188;
                double t67194 = t67193+1.0;
                double t67195 = gamma_bb[index]*gx*t67188*2.0;
                double t67196 = t67186*t67187*t67189;
                double t67197 = t67195+t67196+1.0;
                double t67198 = gamma_bb[index]*gx*t67188*3.0;
                double t67199 = gamma_bb[index]*gx*t67190*t67186*t67189;
                double t67200 = t67186*t67187*t67189*3.0;
                double t67201 = t67200+t67198+t67199+1.0;
                double t67202 = t67189*t67189;
                double t67218 = gx*t67188*4.0;
                double t67219 = gamma_bb[index]*t67186*t67187*1.2E1;
                double t67220 = gx*t67190*t67186*t67189*1.2E1;
                double t67221 = gamma_bb[index]*t67191*t67192*t67189*4.0;
                double t67203 = t67220+t67221+t67218+t67219;
                double t67204 = gamma_bb[index]*gx*t67188*4.0;
                double t67205 = gamma_bb[index]*gx*t67190*t67186*t67189*4.0;
                double t67206 = t67186*t67187*t67189*6.0;
                double t67207 = t67202*t67191*t67192;
                double t67208 = t67204+t67205+t67206+t67207+1.0;
                double t67211 = gx*t67188*2.0;
                double t67212 = gamma_bb[index]*t67186*t67187*2.0;
                double t67209 = t67211+t67212;
                double t67210 = 1/(t67201*t67201);
                double t67213 = 1/(t67197*t67197);
                double t67214 = gx*t67188*3.0;
                double t67215 = gamma_bb[index]*t67186*t67187*6.0;
                double t67216 = gx*t67190*t67186*t67189*3.0;
                double t67217 = t67214+t67215+t67216;
                double t67222 = 1/(t67208*t67208);
                double t67223 = 1/pow(rho_b[index],1.0/3.0);
                double t67224 = c*t67223;
                double t67225 = sqrt(t67224);
                double t67226 = pow(t67224,3.0/2.0);
                double t67227 = c*c;
                double t67228 = 1/pow(rho_b[index],2.0/3.0);
                double t67229 = 1/c0p;
                double t67230 = b1p*t67225;
                double t67231 = b3p*t67226;
                double t67232 = b4p*t67227*t67228;
                double t67233 = b2p*c*t67223;
                double t67234 = t67230+t67231+t67232+t67233;
                double t67235 = 1/t67234;
                double t67236 = t67235*t67229*(1.0/2.0);
                double t67237 = t67236+1.0;
                double t67238 = log(t67237);
                double t67239 = a1p*c*t67223;
                double t67240 = t67239+1.0;
                double t67241 = gcaa*gcaa;
                double t67242 = t67241*t67241;
                double t67243 = gamma_bb[index]*gcaa*t67188;
                double t67244 = t67243+1.0;
                double t67245 = gamma_bb[index]*gcaa*t67188*2.0;
                double t67246 = t67241*t67187*t67189;
                double t67247 = t67245+t67246+1.0;
                double t67248 = gamma_bb[index]*gcaa*t67188*3.0;
                double t67249 = gamma_bb[index]*gcaa*t67241*t67190*t67189;
                double t67250 = t67241*t67187*t67189*3.0;
                double t67251 = t67250+t67248+t67249+1.0;
                double t67267 = gcaa*t67188*4.0;
                double t67268 = gamma_bb[index]*t67241*t67187*1.2E1;
                double t67269 = gcaa*t67241*t67190*t67189*1.2E1;
                double t67270 = gamma_bb[index]*t67242*t67192*t67189*4.0;
                double t67252 = t67270+t67267+t67268+t67269;
                double t67253 = gamma_bb[index]*gcaa*t67188*4.0;
                double t67254 = gamma_bb[index]*gcaa*t67241*t67190*t67189*4.0;
                double t67255 = t67241*t67187*t67189*6.0;
                double t67256 = t67202*t67242*t67192;
                double t67257 = t67253+t67254+t67255+t67256+1.0;
                double t67260 = gcaa*t67188*2.0;
                double t67261 = gamma_bb[index]*t67241*t67187*2.0;
                double t67258 = t67260+t67261;
                double t67259 = 1/(t67251*t67251);
                double t67262 = 1/(t67247*t67247);
                double t67263 = gcaa*t67188*3.0;
                double t67264 = gamma_bb[index]*t67241*t67187*6.0;
                double t67265 = gcaa*t67241*t67190*t67189*3.0;
                double t67266 = t67263+t67264+t67265;
                double t67271 = 1/(t67257*t67257);
                v_gamma_bb_gamma_bb_[index] = -c0*pow(rho_b[index],4.0/3.0)*(cx1*1/(t67194*t67194)*t67186*t67187* \
                   2.0-(cx2*t67186*t67187*2.0)/t67197+cx2*t67213*t67191*t67192*t67189*2.0-(cx4*t67191*t67192*t67189*1.2E1) \
                   /t67208+cx4*t67202*t67222*t67191*t67192*(t67186*t67187*1.2E1+t67191*t67192*t67189*1.2E1+gamma_bb[index]* \
                   gx*t67190*t67186*2.4E1)-cx1*gamma_bb[index]*gx*t67190*1/(t67194*t67194*t67194)*t67186*2.0-(cx3*gamma_bb[index]* \
                   gx*t67190*t67186*6.0)/t67201-cx2*(t67209*t67209)*t67186*t67187*1/(t67197*t67197*t67197)*t67189*2.0- \
                   cx4*t67202*(t67203*t67203)*1/(t67208*t67208*t67208)*t67191*t67192*2.0+cx2*gamma_bb[index]*t67213*t67209* \
                   t67186*t67187*4.0+cx4*gamma_bb[index]*t67203*t67222*t67191*t67192*t67189*8.0+cx3*gx*t67210*t67190* \
                   t67217*t67186*t67189*6.0+cx3*gamma_bb[index]*gx*t67210*t67190*t67186*t67189*(t67186*t67187*6.0+gamma_bb[index]* \
                   gx*t67190*t67186*6.0)-cx3*gamma_bb[index]*gx*1/(t67201*t67201*t67201)*t67190*(t67217*t67217)*t67186* \
                   t67189*2.0)+rho_b[index]*(((pow(2.0,1.0/3.0)*2.0-2.0)*(c0f*log((1.0/2.0)/(c0f*(b1f*t67225+b3f*t67226+ \
                   b2f*c*t67223+b4f*t67227*t67228))+1.0)*(a1f*c*t67223+1.0)*2.0-c0p*t67240*t67238*2.0))/(two_13*2.0-2.0) \
                   +c0p*t67240*t67238*2.0)*(ccaa1*t67241*1/(t67244*t67244)*t67187*2.0-(ccaa2*t67241*t67187*2.0)/t67247+ \
                   ccaa2*t67242*t67262*t67192*t67189*2.0-(ccaa4*t67242*t67192*t67189*1.2E1)/t67257+ccaa4*t67202*t67242* \
                   t67271*t67192*(t67241*t67187*1.2E1+t67242*t67192*t67189*1.2E1+gamma_bb[index]*gcaa*t67241*t67190*2.4E1) \
                   -(ccaa3*gamma_bb[index]*gcaa*t67241*t67190*6.0)/t67251-ccaa1*gamma_bb[index]*gcaa*t67241*t67190*1/ \
                   (t67244*t67244*t67244)*2.0-ccaa4*t67202*t67242*(t67252*t67252)*t67192*1/(t67257*t67257*t67257)*2.0- \
                   ccaa2*t67241*1/(t67247*t67247*t67247)*(t67258*t67258)*t67187*t67189*2.0+ccaa2*gamma_bb[index]*t67241* \
                   t67262*t67258*t67187*4.0+ccaa4*gamma_bb[index]*t67242*t67252*t67271*t67192*t67189*8.0+ccaa3*gcaa*t67241* \
                   t67190*t67266*t67259*t67189*6.0+ccaa3*gamma_bb[index]*gcaa*t67241*t67190*t67259*t67189*(t67241*t67187* \
                   6.0+gamma_bb[index]*gcaa*t67241*t67190*6.0)-ccaa3*gamma_bb[index]*gcaa*t67241*1/(t67251*t67251*t67251) \
                   *t67190*(t67266*t67266)*t67189*2.0);
            } else {
                v_gamma_bb_gamma_bb_[index] = 0.0;
            } 

        }                       
        if (is_meta_) {

            //V_rho_a_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_a_tau_a_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_a_tau_a_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_a_tau_a_[index] = 0.0;
            } else {
                v_rho_a_tau_a_[index] = 0.0;
            } 

            //V_rho_a_tau_b
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_a_tau_b_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_a_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_a_tau_b_[index] = 0.0;
            } else {
                v_rho_a_tau_b_[index] = 0.0;
            } 

            //V_rho_b_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_b_tau_a_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_b_tau_a_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_b_tau_a_[index] = 0.0;
            } else {
                v_rho_b_tau_a_[index] = 0.0;
            } 

            //V_rho_b_tau_b
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_b_tau_b_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_b_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_b_tau_b_[index] = 0.0;
            } else {
                v_rho_b_tau_b_[index] = 0.0;
            } 

            //V_tau_a_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_tau_a_tau_a_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_tau_a_tau_a_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_tau_a_tau_a_[index] = 0.0;
            } else {
                v_tau_a_tau_a_[index] = 0.0;
            } 

            //V_tau_a_tau_b
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_tau_a_tau_b_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_tau_a_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_tau_a_tau_b_[index] = 0.0;
            } else {
                v_tau_a_tau_b_[index] = 0.0;
            } 

            //V_tau_b_tau_b
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_tau_b_tau_b_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_tau_b_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_tau_b_tau_b_[index] = 0.0;
            } else {
                v_tau_b_tau_b_[index] = 0.0;
            } 

            if (is_gga_) {
            	
                //V_gamma_aa_tau_a
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } else {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } 
            	
                //V_gamma_aa_tau_b
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_aa_tau_b_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_aa_tau_b_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_aa_tau_b_[index] = 0.0;
                } else {
                    v_gamma_aa_tau_b_[index] = 0.0;
                } 
            	
                //V_gamma_ab_tau_a
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_ab_tau_a_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_ab_tau_a_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_ab_tau_a_[index] = 0.0;
                } else {
                    v_gamma_ab_tau_a_[index] = 0.0;
                } 
            	
                //V_gamma_ab_tau_b
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_ab_tau_b_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_ab_tau_b_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_ab_tau_b_[index] = 0.0;
                } else {
                    v_gamma_ab_tau_b_[index] = 0.0;
                } 
            	
                //V_gamma_bb_tau_a
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_bb_tau_a_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_bb_tau_a_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_bb_tau_a_[index] = 0.0;
                } else {
                    v_gamma_bb_tau_a_[index] = 0.0;
                } 
            	
                //V_gamma_bb_tau_b
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_bb_tau_b_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_bb_tau_b_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_bb_tau_b_[index] = 0.0;
                } else {
                    v_gamma_bb_tau_b_[index] = 0.0;
                } 
          
            }  
        }
    }
}

}}

