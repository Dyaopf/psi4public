/**********************************************************
* B88II_X_functional.cc: definitions for B88II_X_functional for KS-DFT
* Robert Parrish, robparrish@gmail.com
* Autogenerated by MATLAB Script on 31-Oct-2010
*
***********************************************************/
#include <libmints/properties.h>
#include <libciomr/libciomr.h>
#include "B88II_X_functional.h"
#include <stdlib.h>
#include <cmath>
#include <string>
#include <string>
#include <vector>

using namespace psi;
using namespace boost;
using namespace std;

namespace psi { namespace functional {

B88II_X_Functional::B88II_X_Functional(int npoints, int deriv) : Functional(npoints, deriv)
{
    
    name_ = "B88II_X";
    description_ = "Becke Exchange GGA Correction (B88)";
    citation_ = "A.D. Becke, Phys. Rev. A, 38(6):3098-3100, 1988";
    
    double d = 4.1999999999999997E-03;
    params_.push_back(make_pair("d",d));

    is_gga_ = true;
    is_meta_ = false;

    //Required allocateion
    allocate();
}
B88II_X_Functional::~B88II_X_Functional()
{
}
void B88II_X_Functional::computeRKSFunctional(shared_ptr<Properties> prop)
{
    int ntrue = prop->getTrueSize();

    double* rho_a;
    double* gamma_aa;
    double* tau_a;

    rho_a = prop->getRhoA();
    if (is_gga_) {
        gamma_aa = prop->getGammaAA();
    }
    if (is_meta_) {
        tau_a = prop->getTauA();
    }

    double d = params_[0].second;

    //Functional
    for (int index = 0; index < ntrue; index++) {

        //Functional Value
        if (rho_a[index] > cutoff_) {
            /** Tree Code for functional_[index] value. **/
            /**
            Function Tree: 2 elements.
            ------------------------
            Element:      1
            Name:         chi_a
            Expression:   gamma_aa[index]^(1/2)/rho_a[index]^(4/3)
            Dependencies: None
            ------------------------
            Element:      2
            Name:         functional
            Expression:   -(2*chi_a^2*d*rho_a[index]^(4/3))/(6*chi_a*d*asinh(chi_a) + 1)
            Dependencies: chi_a
            ------------------------
            **/
            
            // Intermediate chi_a:
            double chi_a = sqrt(gamma_aa[index])*1/pow(rho_a[index],4.0/3.0);
            
            // Final functional_[index]:
            functional_[index] = ((chi_a*chi_a)*d*pow(rho_a[index],4.0/3.0)*-2.0)/(chi_a*d*log(chi_a+sqrt(chi_a*chi_a+1.0) \
                   )*6.0+1.0);
            
        } 

    }
    //First Partials
    for (int index = 0; index < ntrue && deriv_ >= 1; index++) {
        
        //V_rho_a
        if (rho_a[index] > cutoff_) {
            /** Tree Code for v_rho_a_[index] value. **/
            
            // Intermediate chi_a:
            double chi_a = sqrt(gamma_aa[index])*1/pow(rho_a[index],4.0/3.0);
            
            // Intermediate functional_chi_a:
            double t31293 = pow(rho_a[index],4.0/3.0);
            double t31294 = log(chi_a+sqrt(chi_a*chi_a+1.0));
            double t31295 = chi_a*d*t31294*6.0;
            double t31296 = t31295+1.0;
            double t31297 = chi_a*chi_a;
            double functional_chi_a = (chi_a*d*t31293*-2.0)/t31296+d*t31293*1/(t31296*t31296)*t31297*(d*t31294*6.0+ \
                   chi_a*d*1/sqrt(t31297+1.0)*6.0);
            
            // Intermediate chi_a_rho_a:
            double chi_a_rho_a = sqrt(gamma_aa[index])*1/pow(rho_a[index],7.0/3.0)*(-4.0/3.0);
            
            // Final v_rho_a_[index]:
            v_rho_a_[index] = chi_a_rho_a*functional_chi_a-((chi_a*chi_a)*d*pow(rho_a[index],1.0/3.0)*(4.0/3.0))/(chi_a* \
                   d*log(chi_a+sqrt(chi_a*chi_a+1.0))*6.0+1.0);
            
        } 
        
        if (is_gga_) {
            
            if (rho_a[index] > cutoff_) {
                /** Tree Code for v_gamma_aa_[index] value. **/
                
                // Intermediate chi_a:
                double chi_a = sqrt(gamma_aa[index])*1/pow(rho_a[index],4.0/3.0);
                
                // Intermediate functional_chi_a:
                double t31302 = pow(rho_a[index],4.0/3.0);
                double t31303 = log(chi_a+sqrt(chi_a*chi_a+1.0));
                double t31304 = chi_a*d*t31303*6.0;
                double t31305 = t31304+1.0;
                double t31306 = chi_a*chi_a;
                double functional_chi_a = (chi_a*d*t31302*-2.0)/t31305+d*t31302*1/(t31305*t31305)*t31306*(d*t31303*6.0+ \
                       chi_a*d*1/sqrt(t31306+1.0)*6.0);
                
                // Intermediate chi_a_gamma_aa:
                double chi_a_gamma_aa = 1/sqrt(gamma_aa[index])*1/pow(rho_a[index],4.0/3.0)*(1.0/2.0);
                
                // Final v_gamma_aa_[index]:
                v_gamma_aa_[index] = chi_a_gamma_aa*functional_chi_a*2.0;
                
            } 
        
        }
        if (is_meta_) {
        
            //V_tau_a
            if (rho_a[index] > cutoff_) {
                /** Tree Code for v_tau_a_[index] value. **/
                
                // Final v_tau_a_[index]:
                v_tau_a_[index] = 0.0;
                
            } 
        
        }
    }
    //Second Partials
    for (int index = 0; index < ntrue && deriv_ >= 2; index++) {
        
        //V_rho_a_rho_a
        if (rho_a[index] > cutoff_) {
            /** Tree Code for v_rho_a_rho_a_[index] value. **/
            
            // Intermediate chi_a:
            double chi_a = sqrt(gamma_aa[index])*1/pow(rho_a[index],4.0/3.0);
            
            // Intermediate functional_chi_a_chi_a:
            double t31312 = pow(rho_a[index],4.0/3.0);
            double t31313 = log(chi_a+sqrt(chi_a*chi_a+1.0));
            double t31314 = chi_a*d*t31313*6.0;
            double t31315 = t31314+1.0;
            double t31316 = chi_a*chi_a;
            double t31317 = 1/(t31315*t31315);
            double t31318 = t31316+1.0;
            double t31319 = 1/sqrt(t31318);
            double t31320 = d*t31313*6.0;
            double t31321 = chi_a*d*t31319*6.0;
            double t31322 = t31320+t31321;
            double functional_chi_a_chi_a = (d*t31312*-2.0)/t31315-d*t31312*(t31322*t31322)*1/(t31315*t31315*t31315) \
                   *t31316*2.0+chi_a*d*t31312*t31322*t31317*4.0+d*t31312*t31316*t31317*(d*t31319*1.2E1-d*t31316*1/pow(t31318,3.0/ \
                   2.0)*6.0);
            
            // Intermediate functional_chi_a:
            double t31324 = pow(rho_a[index],4.0/3.0);
            double t31325 = log(chi_a+sqrt(chi_a*chi_a+1.0));
            double t31326 = chi_a*d*t31325*6.0;
            double t31327 = t31326+1.0;
            double t31328 = chi_a*chi_a;
            double functional_chi_a = (chi_a*d*t31324*-2.0)/t31327+d*t31324*1/(t31327*t31327)*t31328*(d*t31325*6.0+ \
                   chi_a*d*1/sqrt(t31328+1.0)*6.0);
            
            // Intermediate chi_a_rho_a_rho_a:
            double chi_a_rho_a_rho_a = sqrt(gamma_aa[index])*1/pow(rho_a[index],1.0E1/3.0)*(2.8E1/9.0);
            
            // Intermediate chi_a_rho_a:
            double chi_a_rho_a = sqrt(gamma_aa[index])*1/pow(rho_a[index],7.0/3.0)*(-4.0/3.0);
            
            // Final v_rho_a_rho_a_[index]:
            v_rho_a_rho_a_[index] = chi_a_rho_a_rho_a*functional_chi_a+(chi_a_rho_a*chi_a_rho_a)*functional_chi_a_chi_a- \
                   ((chi_a*chi_a)*d*1/pow(rho_a[index],2.0/3.0)*(4.0/9.0))/(chi_a*d*log(chi_a+sqrt(chi_a*chi_a+1.0))*6.0+1.0) \
                   ;
            
        } 
        
        if (is_gga_) {
        
            //V_rho_a_gamma_aa
            if (rho_a[index] > cutoff_) {
                /** Tree Code for v_rho_a_gamma_aa_[index] value. **/
                
                // Intermediate chi_a:
                double chi_a = sqrt(gamma_aa[index])*1/pow(rho_a[index],4.0/3.0);
                
                // Intermediate functional_chi_a_chi_a:
                double t31334 = pow(rho_a[index],4.0/3.0);
                double t31335 = log(chi_a+sqrt(chi_a*chi_a+1.0));
                double t31336 = chi_a*d*t31335*6.0;
                double t31337 = t31336+1.0;
                double t31338 = chi_a*chi_a;
                double t31339 = 1/(t31337*t31337);
                double t31340 = t31338+1.0;
                double t31341 = 1/sqrt(t31340);
                double t31342 = d*t31335*6.0;
                double t31343 = chi_a*d*t31341*6.0;
                double t31344 = t31342+t31343;
                double functional_chi_a_chi_a = (d*t31334*-2.0)/t31337-d*t31334*(t31344*t31344)*1/(t31337*t31337*t31337) \
                       *t31338*2.0+chi_a*d*t31334*t31344*t31339*4.0+d*t31334*t31338*t31339*(d*t31341*1.2E1-d*1/pow(t31340,3.0/ \
                       2.0)*t31338*6.0);
                
                // Intermediate functional_chi_a:
                double t31346 = pow(rho_a[index],4.0/3.0);
                double t31347 = log(chi_a+sqrt(chi_a*chi_a+1.0));
                double t31348 = chi_a*d*t31347*6.0;
                double t31349 = t31348+1.0;
                double t31350 = chi_a*chi_a;
                double functional_chi_a = (chi_a*d*t31346*-2.0)/t31349+d*t31350*t31346*1/(t31349*t31349)*(d*t31347*6.0+ \
                       chi_a*d*1/sqrt(t31350+1.0)*6.0);
                
                // Intermediate chi_a_rho_a_gamma_aa:
                double chi_a_rho_a_gamma_aa = 1/sqrt(gamma_aa[index])*1/pow(rho_a[index],7.0/3.0)*(-2.0/3.0);
                
                // Intermediate chi_a_gamma_aa:
                double chi_a_gamma_aa = 1/sqrt(gamma_aa[index])*1/pow(rho_a[index],4.0/3.0)*(1.0/2.0);
                
                // Intermediate chi_a_rho_a:
                double chi_a_rho_a = sqrt(gamma_aa[index])*1/pow(rho_a[index],7.0/3.0)*(-4.0/3.0);
                
                // Final v_rho_a_gamma_aa_[index]:
                v_rho_a_gamma_aa_[index] = chi_a_rho_a_gamma_aa*functional_chi_a+chi_a_rho_a*chi_a_gamma_aa*functional_chi_a_chi_a;
                
            } 
        
            //V_gamma_aa_gamma_aa
            if (rho_a[index] > cutoff_) {
                /** Tree Code for v_gamma_aa_gamma_aa_[index] value. **/
                
                // Intermediate chi_a:
                double chi_a = sqrt(gamma_aa[index])*1/pow(rho_a[index],4.0/3.0);
                
                // Intermediate functional_chi_a_chi_a:
                double t31357 = pow(rho_a[index],4.0/3.0);
                double t31358 = log(chi_a+sqrt(chi_a*chi_a+1.0));
                double t31359 = chi_a*d*t31358*6.0;
                double t31360 = t31359+1.0;
                double t31361 = chi_a*chi_a;
                double t31362 = 1/(t31360*t31360);
                double t31363 = t31361+1.0;
                double t31364 = 1/sqrt(t31363);
                double t31365 = d*t31358*6.0;
                double t31366 = chi_a*d*t31364*6.0;
                double t31367 = t31365+t31366;
                double functional_chi_a_chi_a = (d*t31357*-2.0)/t31360-d*1/(t31360*t31360*t31360)*t31361*t31357*(t31367* \
                       t31367)*2.0+chi_a*d*t31362*t31357*t31367*4.0+d*t31361*t31362*t31357*(d*t31364*1.2E1-d*t31361*1/pow(t31363,3.0/ \
                       2.0)*6.0);
                
                // Intermediate functional_chi_a:
                double t31369 = pow(rho_a[index],4.0/3.0);
                double t31370 = log(chi_a+sqrt(chi_a*chi_a+1.0));
                double t31371 = chi_a*d*t31370*6.0;
                double t31372 = t31371+1.0;
                double t31373 = chi_a*chi_a;
                double functional_chi_a = (chi_a*d*t31369*-2.0)/t31372+d*1/(t31372*t31372)*t31373*t31369*(d*t31370*6.0+ \
                       chi_a*d*1/sqrt(t31373+1.0)*6.0);
                
                // Intermediate chi_a_gamma_aa_gamma_aa:
                double chi_a_gamma_aa_gamma_aa = 1/pow(gamma_aa[index],3.0/2.0)*1/pow(rho_a[index],4.0/3.0)*(-1.0/4.0);
                
                // Intermediate chi_a_gamma_aa:
                double chi_a_gamma_aa = 1/sqrt(gamma_aa[index])*1/pow(rho_a[index],4.0/3.0)*(1.0/2.0);
                
                // Final v_gamma_aa_gamma_aa_[index]:
                v_gamma_aa_gamma_aa_[index] = chi_a_gamma_aa_gamma_aa*functional_chi_a*2.0+(chi_a_gamma_aa*chi_a_gamma_aa) \
                       *functional_chi_a_chi_a*2.0;
                
            } 
        
        }
        if (is_meta_) {
        
            //V_rho_a_tau_a
            if (rho_a[index] > cutoff_) {
                /** Tree Code for v_rho_a_tau_a_[index] value. **/
                
                // Final v_rho_a_tau_a_[index]:
                v_rho_a_tau_a_[index] = 0.0;
                
            } 
        
            //V_tau_a_tau_a
            if (rho_a[index] > cutoff_) {
                /** Tree Code for v_tau_a_tau_a_[index] value. **/
                
                // Final v_tau_a_tau_a_[index]:
                v_tau_a_tau_a_[index] = 0.0;
                
            } 
       
            if (is_gga_) {
        
                //V_gamma_aa_tau_a
                if (rho_a[index] > cutoff_) {
                    /** Tree Code for v_gamma_aa_tau_a_[index] value. **/
                    
                    // Final v_gamma_aa_tau_a_[index]:
                    v_gamma_aa_tau_a_[index] = 0.0;
                    
                } 
       
            }
        }
    }
}
void B88II_X_Functional::computeUKSFunctional(shared_ptr<Properties> prop)
{
    int ntrue = prop->getTrueSize();

    double* rho_a;
    double* rho_b;
    double* gamma_aa;
    double* gamma_ab;
    double* gamma_bb;
    double* tau_a;
    double* tau_b;

    rho_a = prop->getRhoA();
    rho_b = prop->getRhoB();
    if (is_gga_) {
        gamma_aa = prop->getGammaAA();
        gamma_ab = prop->getGammaAB();
        gamma_bb = prop->getGammaBB();
    }
    if (is_meta_) {
        tau_a = prop->getTauA();
        tau_b = prop->getTauB();
    }

    double d = params_[0].second;
    
    //Functional
    for (int index = 0; index < ntrue; index++) {

        //Functional Value
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            /** Tree Code for functional_[index] value. **/
            /**
            Function Tree: 3 elements.
            ------------------------
            Element:      1
            Name:         chi_a
            Expression:   gamma_aa[index]^(1/2)/rho_a[index]^(4/3)
            Dependencies: None
            ------------------------
            Element:      2
            Name:         chi_b
            Expression:   gamma_bb[index]^(1/2)/rho_b[index]^(4/3)
            Dependencies: None
            ------------------------
            Element:      3
            Name:         functional
            Expression:   - (chi_a^2*d*rho_a[index]^(4/3))/(6*chi_a*d*asinh(chi_a) + 1) - (chi_b^2*d*rho_b[index]^(4/3))/ ...
                   (6*chi_b*d*asinh(chi_b) + 1)
            Dependencies: chi_a,chi_b
            ------------------------
            **/
            
            // Intermediate chi_b:
            double chi_b = sqrt(gamma_bb[index])*1/pow(rho_b[index],4.0/3.0);
            
            // Intermediate chi_a:
            double chi_a = sqrt(gamma_aa[index])*1/pow(rho_a[index],4.0/3.0);
            
            // Final functional_[index]:
            functional_[index] = -((chi_a*chi_a)*d*pow(rho_a[index],4.0/3.0))/(chi_a*d*log(chi_a+sqrt(chi_a*chi_a+1.0))* \
                   6.0+1.0)-((chi_b*chi_b)*d*pow(rho_b[index],4.0/3.0))/(chi_b*d*log(chi_b+sqrt(chi_b*chi_b+1.0))*6.0+1.0);
            
        } else if (rho_a[index] > cutoff_) {
            /** Tree Code for functional_[index] value. **/
            
            // Intermediate chi_a:
            double chi_a = sqrt(gamma_aa[index])*1/pow(rho_a[index],4.0/3.0);
            
            // Final functional_[index]:
            functional_[index] = -((chi_a*chi_a)*d*pow(rho_a[index],4.0/3.0))/(chi_a*d*log(chi_a+sqrt(chi_a*chi_a+1.0))* \
                   6.0+1.0);
            
        } else if (rho_b[index] > cutoff_) {
            /** Tree Code for functional_[index] value. **/
            
            // Intermediate chi_b:
            double chi_b = sqrt(gamma_bb[index])*1/pow(rho_b[index],4.0/3.0);
            
            // Final functional_[index]:
            functional_[index] = -((chi_b*chi_b)*d*pow(rho_b[index],4.0/3.0))/(chi_b*d*log(chi_b+sqrt(chi_b*chi_b+1.0))* \
                   6.0+1.0);
            
        } 
   
    }
    //First Partials
    for (int index = 0; index < ntrue && deriv_ >= 1; index++) {

        //V_rho_a
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            /** Tree Code for v_rho_a_[index] value. **/
            
            // Intermediate chi_a:
            double chi_a = sqrt(gamma_aa[index])*1/pow(rho_a[index],4.0/3.0);
            
            // Intermediate functional_chi_a:
            double t30866 = pow(rho_a[index],4.0/3.0);
            double t30867 = log(chi_a+sqrt(chi_a*chi_a+1.0));
            double t30868 = chi_a*d*t30867*6.0;
            double t30869 = t30868+1.0;
            double t30870 = chi_a*chi_a;
            double functional_chi_a = (chi_a*d*t30866*-2.0)/t30869+d*t30870*t30866*1/(t30869*t30869)*(d*t30867*6.0+ \
                   chi_a*d*1/sqrt(t30870+1.0)*6.0);
            
            // Intermediate chi_a_rho_a:
            double chi_a_rho_a = sqrt(gamma_aa[index])*1/pow(rho_a[index],7.0/3.0)*(-4.0/3.0);
            
            // Final v_rho_a_[index]:
            v_rho_a_[index] = chi_a_rho_a*functional_chi_a-((chi_a*chi_a)*d*pow(rho_a[index],1.0/3.0)*(4.0/3.0))/(chi_a* \
                   d*log(chi_a+sqrt(chi_a*chi_a+1.0))*6.0+1.0);
            
        } else if (rho_a[index] > cutoff_) {
            /** Tree Code for v_rho_a_[index] value. **/
            
            // Intermediate chi_a:
            double chi_a = sqrt(gamma_aa[index])*1/pow(rho_a[index],4.0/3.0);
            
            // Intermediate functional_chi_a:
            double t30876 = pow(rho_a[index],4.0/3.0);
            double t30877 = log(chi_a+sqrt(chi_a*chi_a+1.0));
            double t30878 = chi_a*d*t30877*6.0;
            double t30879 = t30878+1.0;
            double t30880 = chi_a*chi_a;
            double functional_chi_a = (chi_a*d*t30876*-2.0)/t30879+d*t30880*t30876*1/(t30879*t30879)*(d*t30877*6.0+ \
                   chi_a*d*1/sqrt(t30880+1.0)*6.0);
            
            // Intermediate chi_a_rho_a:
            double chi_a_rho_a = sqrt(gamma_aa[index])*1/pow(rho_a[index],7.0/3.0)*(-4.0/3.0);
            
            // Final v_rho_a_[index]:
            v_rho_a_[index] = chi_a_rho_a*functional_chi_a-((chi_a*chi_a)*d*pow(rho_a[index],1.0/3.0)*(4.0/3.0))/(chi_a* \
                   d*log(chi_a+sqrt(chi_a*chi_a+1.0))*6.0+1.0);
            
        } else if (rho_b[index] > cutoff_) {
            /** Tree Code for v_rho_a_[index] value. **/
            
            // Final v_rho_a_[index]:
            v_rho_a_[index] = 0.0;
            
        } 

        //V_rho_b
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            /** Tree Code for v_rho_b_[index] value. **/
            
            // Intermediate chi_b:
            double chi_b = sqrt(gamma_bb[index])*1/pow(rho_b[index],4.0/3.0);
            
            // Intermediate functional_chi_b:
            double t30885 = pow(rho_b[index],4.0/3.0);
            double t30886 = log(chi_b+sqrt(chi_b*chi_b+1.0));
            double t30887 = chi_b*d*t30886*6.0;
            double t30888 = t30887+1.0;
            double t30889 = chi_b*chi_b;
            double functional_chi_b = (chi_b*d*t30885*-2.0)/t30888+d*t30885*1/(t30888*t30888)*t30889*(d*t30886*6.0+ \
                   chi_b*d*1/sqrt(t30889+1.0)*6.0);
            
            // Intermediate chi_b_rho_b:
            double chi_b_rho_b = sqrt(gamma_bb[index])*1/pow(rho_b[index],7.0/3.0)*(-4.0/3.0);
            
            // Final v_rho_b_[index]:
            v_rho_b_[index] = chi_b_rho_b*functional_chi_b-((chi_b*chi_b)*d*pow(rho_b[index],1.0/3.0)*(4.0/3.0))/(chi_b* \
                   d*log(chi_b+sqrt(chi_b*chi_b+1.0))*6.0+1.0);
            
        } else if (rho_a[index] > cutoff_) {
            /** Tree Code for v_rho_b_[index] value. **/
            
            // Final v_rho_b_[index]:
            v_rho_b_[index] = 0.0;
            
        } else if (rho_b[index] > cutoff_) {
            /** Tree Code for v_rho_b_[index] value. **/
            
            // Intermediate chi_b:
            double chi_b = sqrt(gamma_bb[index])*1/pow(rho_b[index],4.0/3.0);
            
            // Intermediate functional_chi_b:
            double t30894 = pow(rho_b[index],4.0/3.0);
            double t30895 = log(chi_b+sqrt(chi_b*chi_b+1.0));
            double t30896 = chi_b*d*t30895*6.0;
            double t30897 = t30896+1.0;
            double t30898 = chi_b*chi_b;
            double functional_chi_b = (chi_b*d*t30894*-2.0)/t30897+d*t30894*1/(t30897*t30897)*t30898*(d*t30895*6.0+ \
                   chi_b*d*1/sqrt(t30898+1.0)*6.0);
            
            // Intermediate chi_b_rho_b:
            double chi_b_rho_b = sqrt(gamma_bb[index])*1/pow(rho_b[index],7.0/3.0)*(-4.0/3.0);
            
            // Final v_rho_b_[index]:
            v_rho_b_[index] = chi_b_rho_b*functional_chi_b-((chi_b*chi_b)*d*pow(rho_b[index],1.0/3.0)*(4.0/3.0))/(chi_b* \
                   d*log(chi_b+sqrt(chi_b*chi_b+1.0))*6.0+1.0);
            
        } 

        if (is_gga_) {

            //V_gamma_aa
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                /** Tree Code for v_gamma_aa_[index] value. **/
                
                // Intermediate chi_a:
                double chi_a = sqrt(gamma_aa[index])*1/pow(rho_a[index],4.0/3.0);
                
                // Intermediate functional_chi_a:
                double t30904 = pow(rho_a[index],4.0/3.0);
                double t30905 = log(chi_a+sqrt(chi_a*chi_a+1.0));
                double t30906 = chi_a*d*t30905*6.0;
                double t30907 = t30906+1.0;
                double t30908 = chi_a*chi_a;
                double functional_chi_a = (chi_a*d*t30904*-2.0)/t30907+d*t30904*1/(t30907*t30907)*t30908*(d*t30905*6.0+ \
                       chi_a*d*1/sqrt(t30908+1.0)*6.0);
                
                // Intermediate chi_a_gamma_aa:
                double chi_a_gamma_aa = 1/sqrt(gamma_aa[index])*1/pow(rho_a[index],4.0/3.0)*(1.0/2.0);
                
                // Final v_gamma_aa_[index]:
                v_gamma_aa_[index] = chi_a_gamma_aa*functional_chi_a;
                
            } else if (rho_a[index] > cutoff_) {
                /** Tree Code for v_gamma_aa_[index] value. **/
                
                // Intermediate chi_a:
                double chi_a = sqrt(gamma_aa[index])*1/pow(rho_a[index],4.0/3.0);
                
                // Intermediate functional_chi_a:
                double t30914 = pow(rho_a[index],4.0/3.0);
                double t30915 = log(chi_a+sqrt(chi_a*chi_a+1.0));
                double t30916 = chi_a*d*t30915*6.0;
                double t30917 = t30916+1.0;
                double t30918 = chi_a*chi_a;
                double functional_chi_a = (chi_a*d*t30914*-2.0)/t30917+d*t30914*1/(t30917*t30917)*t30918*(d*t30915*6.0+ \
                       chi_a*d*1/sqrt(t30918+1.0)*6.0);
                
                // Intermediate chi_a_gamma_aa:
                double chi_a_gamma_aa = 1/sqrt(gamma_aa[index])*1/pow(rho_a[index],4.0/3.0)*(1.0/2.0);
                
                // Final v_gamma_aa_[index]:
                v_gamma_aa_[index] = chi_a_gamma_aa*functional_chi_a;
                
            } else if (rho_b[index] > cutoff_) {
                /** Tree Code for v_gamma_aa_[index] value. **/
                
                // Final v_gamma_aa_[index]:
                v_gamma_aa_[index] = 0.0;
                
            } 

            //V_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                /** Tree Code for v_gamma_ab_[index] value. **/
                
                // Final v_gamma_ab_[index]:
                v_gamma_ab_[index] = 0.0;
                
            } else if (rho_a[index] > cutoff_) {
                /** Tree Code for v_gamma_ab_[index] value. **/
                
                // Final v_gamma_ab_[index]:
                v_gamma_ab_[index] = 0.0;
                
            } else if (rho_b[index] > cutoff_) {
                /** Tree Code for v_gamma_ab_[index] value. **/
                
                // Final v_gamma_ab_[index]:
                v_gamma_ab_[index] = 0.0;
                
            } 

            //V_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                /** Tree Code for v_gamma_bb_[index] value. **/
                
                // Intermediate chi_b:
                double chi_b = sqrt(gamma_bb[index])*1/pow(rho_b[index],4.0/3.0);
                
                // Intermediate functional_chi_b:
                double t30926 = pow(rho_b[index],4.0/3.0);
                double t30927 = log(chi_b+sqrt(chi_b*chi_b+1.0));
                double t30928 = chi_b*d*t30927*6.0;
                double t30929 = t30928+1.0;
                double t30930 = chi_b*chi_b;
                double functional_chi_b = (chi_b*d*t30926*-2.0)/t30929+d*t30930*t30926*1/(t30929*t30929)*(d*t30927*6.0+ \
                       chi_b*d*1/sqrt(t30930+1.0)*6.0);
                
                // Intermediate chi_b_gamma_bb:
                double chi_b_gamma_bb = 1/sqrt(gamma_bb[index])*1/pow(rho_b[index],4.0/3.0)*(1.0/2.0);
                
                // Final v_gamma_bb_[index]:
                v_gamma_bb_[index] = chi_b_gamma_bb*functional_chi_b;
                
            } else if (rho_a[index] > cutoff_) {
                /** Tree Code for v_gamma_bb_[index] value. **/
                
                // Final v_gamma_bb_[index]:
                v_gamma_bb_[index] = 0.0;
                
            } else if (rho_b[index] > cutoff_) {
                /** Tree Code for v_gamma_bb_[index] value. **/
                
                // Intermediate chi_b:
                double chi_b = sqrt(gamma_bb[index])*1/pow(rho_b[index],4.0/3.0);
                
                // Intermediate functional_chi_b:
                double t30935 = pow(rho_b[index],4.0/3.0);
                double t30936 = log(chi_b+sqrt(chi_b*chi_b+1.0));
                double t30937 = chi_b*d*t30936*6.0;
                double t30938 = t30937+1.0;
                double t30939 = chi_b*chi_b;
                double functional_chi_b = (chi_b*d*t30935*-2.0)/t30938+d*t30935*1/(t30938*t30938)*t30939*(d*t30936*6.0+ \
                       chi_b*d*1/sqrt(t30939+1.0)*6.0);
                
                // Intermediate chi_b_gamma_bb:
                double chi_b_gamma_bb = 1/sqrt(gamma_bb[index])*1/pow(rho_b[index],4.0/3.0)*(1.0/2.0);
                
                // Final v_gamma_bb_[index]:
                v_gamma_bb_[index] = chi_b_gamma_bb*functional_chi_b;
                
            } 
        }
        if (is_meta_) {

            //V_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                /** Tree Code for v_tau_a_[index] value. **/
                
                // Final v_tau_a_[index]:
                v_tau_a_[index] = 0.0;
                
            } else if (rho_a[index] > cutoff_) {
                /** Tree Code for v_tau_a_[index] value. **/
                
                // Final v_tau_a_[index]:
                v_tau_a_[index] = 0.0;
                
            } else if (rho_b[index] > cutoff_) {
                /** Tree Code for v_tau_a_[index] value. **/
                
                // Final v_tau_a_[index]:
                v_tau_a_[index] = 0.0;
                
            } 

            //V_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                /** Tree Code for v_tau_b_[index] value. **/
                
                // Final v_tau_b_[index]:
                v_tau_b_[index] = 0.0;
                
            } else if (rho_a[index] > cutoff_) {
                /** Tree Code for v_tau_b_[index] value. **/
                
                // Final v_tau_b_[index]:
                v_tau_b_[index] = 0.0;
                
            } else if (rho_b[index] > cutoff_) {
                /** Tree Code for v_tau_b_[index] value. **/
                
                // Final v_tau_b_[index]:
                v_tau_b_[index] = 0.0;
                
            } 
        }
    }
    //Second Partials
    for (int index = 0; index < ntrue && deriv_ >= 2; index++) {

        //V_rho_a_rho_a
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            /** Tree Code for v_rho_a_rho_a_[index] value. **/
            
            // Intermediate chi_a:
            double chi_a = sqrt(gamma_aa[index])*1/pow(rho_a[index],4.0/3.0);
            
            // Intermediate functional_chi_a_chi_a:
            double t30951 = pow(rho_a[index],4.0/3.0);
            double t30952 = log(chi_a+sqrt(chi_a*chi_a+1.0));
            double t30953 = chi_a*d*t30952*6.0;
            double t30954 = t30953+1.0;
            double t30955 = chi_a*chi_a;
            double t30956 = 1/(t30954*t30954);
            double t30957 = t30955+1.0;
            double t30958 = 1/sqrt(t30957);
            double t30959 = d*t30952*6.0;
            double t30960 = chi_a*d*t30958*6.0;
            double t30961 = t30960+t30959;
            double functional_chi_a_chi_a = (d*t30951*-2.0)/t30954-d*t30951*(t30961*t30961)*1/(t30954*t30954*t30954) \
                   *t30955*2.0+chi_a*d*t30951*t30961*t30956*4.0+d*t30951*t30955*t30956*(d*t30958*1.2E1-d*t30955*1/pow(t30957,3.0/ \
                   2.0)*6.0);
            
            // Intermediate functional_chi_a:
            double t30963 = pow(rho_a[index],4.0/3.0);
            double t30964 = log(chi_a+sqrt(chi_a*chi_a+1.0));
            double t30965 = chi_a*d*t30964*6.0;
            double t30966 = t30965+1.0;
            double t30967 = chi_a*chi_a;
            double functional_chi_a = (chi_a*d*t30963*-2.0)/t30966+d*t30963*1/(t30966*t30966)*t30967*(d*t30964*6.0+ \
                   chi_a*d*1/sqrt(t30967+1.0)*6.0);
            
            // Intermediate chi_a_rho_a_rho_a:
            double chi_a_rho_a_rho_a = sqrt(gamma_aa[index])*1/pow(rho_a[index],1.0E1/3.0)*(2.8E1/9.0);
            
            // Intermediate chi_a_rho_a:
            double chi_a_rho_a = sqrt(gamma_aa[index])*1/pow(rho_a[index],7.0/3.0)*(-4.0/3.0);
            
            // Final v_rho_a_rho_a_[index]:
            v_rho_a_rho_a_[index] = chi_a_rho_a_rho_a*functional_chi_a+(chi_a_rho_a*chi_a_rho_a)*functional_chi_a_chi_a- \
                   ((chi_a*chi_a)*d*1/pow(rho_a[index],2.0/3.0)*(4.0/9.0))/(chi_a*d*log(chi_a+sqrt(chi_a*chi_a+1.0))*6.0+1.0) \
                   ;
            
        } else if (rho_a[index] > cutoff_) {
            /** Tree Code for v_rho_a_rho_a_[index] value. **/
            
            // Intermediate chi_a:
            double chi_a = sqrt(gamma_aa[index])*1/pow(rho_a[index],4.0/3.0);
            
            // Intermediate functional_chi_a_chi_a:
            double t30974 = pow(rho_a[index],4.0/3.0);
            double t30975 = log(chi_a+sqrt(chi_a*chi_a+1.0));
            double t30976 = chi_a*d*t30975*6.0;
            double t30977 = t30976+1.0;
            double t30978 = chi_a*chi_a;
            double t30979 = 1/(t30977*t30977);
            double t30980 = t30978+1.0;
            double t30981 = 1/sqrt(t30980);
            double t30982 = d*t30975*6.0;
            double t30983 = chi_a*d*t30981*6.0;
            double t30984 = t30982+t30983;
            double functional_chi_a_chi_a = (d*t30974*-2.0)/t30977-d*t30974*(t30984*t30984)*1/(t30977*t30977*t30977) \
                   *t30978*2.0+chi_a*d*t30974*t30984*t30979*4.0+d*t30974*t30978*t30979*(d*t30981*1.2E1-d*1/pow(t30980,3.0/ \
                   2.0)*t30978*6.0);
            
            // Intermediate functional_chi_a:
            double t30986 = pow(rho_a[index],4.0/3.0);
            double t30987 = log(chi_a+sqrt(chi_a*chi_a+1.0));
            double t30988 = chi_a*d*t30987*6.0;
            double t30989 = t30988+1.0;
            double t30990 = chi_a*chi_a;
            double functional_chi_a = (chi_a*d*t30986*-2.0)/t30989+d*t30990*t30986*1/(t30989*t30989)*(d*t30987*6.0+ \
                   chi_a*d*1/sqrt(t30990+1.0)*6.0);
            
            // Intermediate chi_a_rho_a_rho_a:
            double chi_a_rho_a_rho_a = sqrt(gamma_aa[index])*1/pow(rho_a[index],1.0E1/3.0)*(2.8E1/9.0);
            
            // Intermediate chi_a_rho_a:
            double chi_a_rho_a = sqrt(gamma_aa[index])*1/pow(rho_a[index],7.0/3.0)*(-4.0/3.0);
            
            // Final v_rho_a_rho_a_[index]:
            v_rho_a_rho_a_[index] = chi_a_rho_a_rho_a*functional_chi_a+(chi_a_rho_a*chi_a_rho_a)*functional_chi_a_chi_a- \
                   ((chi_a*chi_a)*d*1/pow(rho_a[index],2.0/3.0)*(4.0/9.0))/(chi_a*d*log(chi_a+sqrt(chi_a*chi_a+1.0))*6.0+1.0) \
                   ;
            
        } else if (rho_b[index] > cutoff_) {
            /** Tree Code for v_rho_a_rho_a_[index] value. **/
            
            // Final v_rho_a_rho_a_[index]:
            v_rho_a_rho_a_[index] = 0.0;
            
        } 

        //V_rho_a_rho_b
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            /** Tree Code for v_rho_a_rho_b_[index] value. **/
            
            // Final v_rho_a_rho_b_[index]:
            v_rho_a_rho_b_[index] = 0.0;
            
        } else if (rho_a[index] > cutoff_) {
            /** Tree Code for v_rho_a_rho_b_[index] value. **/
            
            // Final v_rho_a_rho_b_[index]:
            v_rho_a_rho_b_[index] = 0.0;
            
        } else if (rho_b[index] > cutoff_) {
            /** Tree Code for v_rho_a_rho_b_[index] value. **/
            
            // Final v_rho_a_rho_b_[index]:
            v_rho_a_rho_b_[index] = 0.0;
            
        } 

        //V_rho_b_rho_b
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            /** Tree Code for v_rho_b_rho_b_[index] value. **/
            
            // Intermediate chi_b:
            double chi_b = sqrt(gamma_bb[index])*1/pow(rho_b[index],4.0/3.0);
            
            // Intermediate functional_chi_b_chi_b:
            double t30999 = pow(rho_b[index],4.0/3.0);
            double t31000 = log(chi_b+sqrt(chi_b*chi_b+1.0));
            double t31001 = chi_b*d*t31000*6.0;
            double t31002 = t31001+1.0;
            double t31003 = chi_b*chi_b;
            double t31004 = 1/(t31002*t31002);
            double t31005 = t31003+1.0;
            double t31006 = 1/sqrt(t31005);
            double t31007 = d*t31000*6.0;
            double t31008 = chi_b*d*t31006*6.0;
            double t31009 = t31007+t31008;
            double functional_chi_b_chi_b = (d*t30999*-2.0)/t31002-d*t30999*1/(t31002*t31002*t31002)*t31003*(t31009* \
                   t31009)*2.0+chi_b*d*t30999*t31004*t31009*4.0+d*t30999*t31003*t31004*(d*t31006*1.2E1-d*t31003*1/pow(t31005,3.0/ \
                   2.0)*6.0);
            
            // Intermediate functional_chi_b:
            double t31011 = pow(rho_b[index],4.0/3.0);
            double t31012 = log(chi_b+sqrt(chi_b*chi_b+1.0));
            double t31013 = chi_b*d*t31012*6.0;
            double t31014 = t31013+1.0;
            double t31015 = chi_b*chi_b;
            double functional_chi_b = (chi_b*d*t31011*-2.0)/t31014+d*t31011*1/(t31014*t31014)*t31015*(d*t31012*6.0+ \
                   chi_b*d*1/sqrt(t31015+1.0)*6.0);
            
            // Intermediate chi_b_rho_b_rho_b:
            double chi_b_rho_b_rho_b = sqrt(gamma_bb[index])*1/pow(rho_b[index],1.0E1/3.0)*(2.8E1/9.0);
            
            // Intermediate chi_b_rho_b:
            double chi_b_rho_b = sqrt(gamma_bb[index])*1/pow(rho_b[index],7.0/3.0)*(-4.0/3.0);
            
            // Final v_rho_b_rho_b_[index]:
            v_rho_b_rho_b_[index] = chi_b_rho_b_rho_b*functional_chi_b+(chi_b_rho_b*chi_b_rho_b)*functional_chi_b_chi_b- \
                   ((chi_b*chi_b)*d*1/pow(rho_b[index],2.0/3.0)*(4.0/9.0))/(chi_b*d*log(chi_b+sqrt(chi_b*chi_b+1.0))*6.0+1.0) \
                   ;
            
        } else if (rho_a[index] > cutoff_) {
            /** Tree Code for v_rho_b_rho_b_[index] value. **/
            
            // Final v_rho_b_rho_b_[index]:
            v_rho_b_rho_b_[index] = 0.0;
            
        } else if (rho_b[index] > cutoff_) {
            /** Tree Code for v_rho_b_rho_b_[index] value. **/
            
            // Intermediate chi_b:
            double chi_b = sqrt(gamma_bb[index])*1/pow(rho_b[index],4.0/3.0);
            
            // Intermediate functional_chi_b_chi_b:
            double t31021 = pow(rho_b[index],4.0/3.0);
            double t31022 = log(chi_b+sqrt(chi_b*chi_b+1.0));
            double t31023 = chi_b*d*t31022*6.0;
            double t31024 = t31023+1.0;
            double t31025 = chi_b*chi_b;
            double t31026 = 1/(t31024*t31024);
            double t31027 = t31025+1.0;
            double t31028 = 1/sqrt(t31027);
            double t31029 = d*t31022*6.0;
            double t31030 = chi_b*d*t31028*6.0;
            double t31031 = t31030+t31029;
            double functional_chi_b_chi_b = (d*t31021*-2.0)/t31024-d*t31021*(t31031*t31031)*1/(t31024*t31024*t31024) \
                   *t31025*2.0+chi_b*d*t31021*t31031*t31026*4.0+d*t31021*t31025*t31026*(d*t31028*1.2E1-d*t31025*1/pow(t31027,3.0/ \
                   2.0)*6.0);
            
            // Intermediate functional_chi_b:
            double t31033 = pow(rho_b[index],4.0/3.0);
            double t31034 = log(chi_b+sqrt(chi_b*chi_b+1.0));
            double t31035 = chi_b*d*t31034*6.0;
            double t31036 = t31035+1.0;
            double t31037 = chi_b*chi_b;
            double functional_chi_b = (chi_b*d*t31033*-2.0)/t31036+d*t31033*1/(t31036*t31036)*t31037*(d*t31034*6.0+ \
                   chi_b*d*1/sqrt(t31037+1.0)*6.0);
            
            // Intermediate chi_b_rho_b_rho_b:
            double chi_b_rho_b_rho_b = sqrt(gamma_bb[index])*1/pow(rho_b[index],1.0E1/3.0)*(2.8E1/9.0);
            
            // Intermediate chi_b_rho_b:
            double chi_b_rho_b = sqrt(gamma_bb[index])*1/pow(rho_b[index],7.0/3.0)*(-4.0/3.0);
            
            // Final v_rho_b_rho_b_[index]:
            v_rho_b_rho_b_[index] = chi_b_rho_b_rho_b*functional_chi_b+(chi_b_rho_b*chi_b_rho_b)*functional_chi_b_chi_b- \
                   ((chi_b*chi_b)*d*1/pow(rho_b[index],2.0/3.0)*(4.0/9.0))/(chi_b*d*log(chi_b+sqrt(chi_b*chi_b+1.0))*6.0+1.0) \
                   ;
            
        } 

        if (is_gga_) {

            //V_rho_a_gamma_aa
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                /** Tree Code for v_rho_a_gamma_aa_[index] value. **/
                
                // Intermediate chi_a:
                double chi_a = sqrt(gamma_aa[index])*1/pow(rho_a[index],4.0/3.0);
                
                // Intermediate functional_chi_a_chi_a:
                double t31044 = pow(rho_a[index],4.0/3.0);
                double t31045 = log(chi_a+sqrt(chi_a*chi_a+1.0));
                double t31046 = chi_a*d*t31045*6.0;
                double t31047 = t31046+1.0;
                double t31048 = chi_a*chi_a;
                double t31049 = 1/(t31047*t31047);
                double t31050 = t31048+1.0;
                double t31051 = 1/sqrt(t31050);
                double t31052 = d*t31045*6.0;
                double t31053 = chi_a*d*t31051*6.0;
                double t31054 = t31052+t31053;
                double functional_chi_a_chi_a = (d*t31044*-2.0)/t31047-d*t31044*(t31054*t31054)*1/(t31047*t31047*t31047) \
                       *t31048*2.0+chi_a*d*t31044*t31054*t31049*4.0+d*t31044*t31048*t31049*(d*t31051*1.2E1-d*1/pow(t31050,3.0/ \
                       2.0)*t31048*6.0);
                
                // Intermediate functional_chi_a:
                double t31056 = pow(rho_a[index],4.0/3.0);
                double t31057 = log(chi_a+sqrt(chi_a*chi_a+1.0));
                double t31058 = chi_a*d*t31057*6.0;
                double t31059 = t31058+1.0;
                double t31060 = chi_a*chi_a;
                double functional_chi_a = (chi_a*d*t31056*-2.0)/t31059+d*t31060*t31056*1/(t31059*t31059)*(d*t31057*6.0+ \
                       chi_a*d*1/sqrt(t31060+1.0)*6.0);
                
                // Intermediate chi_a_rho_a_gamma_aa:
                double chi_a_rho_a_gamma_aa = 1/sqrt(gamma_aa[index])*1/pow(rho_a[index],7.0/3.0)*(-2.0/3.0);
                
                // Intermediate chi_a_gamma_aa:
                double chi_a_gamma_aa = 1/sqrt(gamma_aa[index])*1/pow(rho_a[index],4.0/3.0)*(1.0/2.0);
                
                // Intermediate chi_a_rho_a:
                double chi_a_rho_a = sqrt(gamma_aa[index])*1/pow(rho_a[index],7.0/3.0)*(-4.0/3.0);
                
                // Final v_rho_a_gamma_aa_[index]:
                v_rho_a_gamma_aa_[index] = chi_a_rho_a_gamma_aa*functional_chi_a+chi_a_rho_a*chi_a_gamma_aa*functional_chi_a_chi_a;
                
            } else if (rho_a[index] > cutoff_) {
                /** Tree Code for v_rho_a_gamma_aa_[index] value. **/
                
                // Intermediate chi_a:
                double chi_a = sqrt(gamma_aa[index])*1/pow(rho_a[index],4.0/3.0);
                
                // Intermediate functional_chi_a_chi_a:
                double t31068 = pow(rho_a[index],4.0/3.0);
                double t31069 = log(chi_a+sqrt(chi_a*chi_a+1.0));
                double t31070 = chi_a*d*t31069*6.0;
                double t31071 = t31070+1.0;
                double t31072 = chi_a*chi_a;
                double t31073 = 1/(t31071*t31071);
                double t31074 = t31072+1.0;
                double t31075 = 1/sqrt(t31074);
                double t31076 = d*t31069*6.0;
                double t31077 = chi_a*d*t31075*6.0;
                double t31078 = t31076+t31077;
                double functional_chi_a_chi_a = (d*t31068*-2.0)/t31071-d*1/(t31071*t31071*t31071)*t31072*t31068*(t31078* \
                       t31078)*2.0+chi_a*d*t31073*t31068*t31078*4.0+d*t31072*t31073*t31068*(d*t31075*1.2E1-d*t31072*1/pow(t31074,3.0/ \
                       2.0)*6.0);
                
                // Intermediate functional_chi_a:
                double t31080 = pow(rho_a[index],4.0/3.0);
                double t31081 = log(chi_a+sqrt(chi_a*chi_a+1.0));
                double t31082 = chi_a*d*t31081*6.0;
                double t31083 = t31082+1.0;
                double t31084 = chi_a*chi_a;
                double functional_chi_a = (chi_a*d*t31080*-2.0)/t31083+d*t31080*1/(t31083*t31083)*t31084*(d*t31081*6.0+ \
                       chi_a*d*1/sqrt(t31084+1.0)*6.0);
                
                // Intermediate chi_a_rho_a_gamma_aa:
                double chi_a_rho_a_gamma_aa = 1/sqrt(gamma_aa[index])*1/pow(rho_a[index],7.0/3.0)*(-2.0/3.0);
                
                // Intermediate chi_a_gamma_aa:
                double chi_a_gamma_aa = 1/sqrt(gamma_aa[index])*1/pow(rho_a[index],4.0/3.0)*(1.0/2.0);
                
                // Intermediate chi_a_rho_a:
                double chi_a_rho_a = sqrt(gamma_aa[index])*1/pow(rho_a[index],7.0/3.0)*(-4.0/3.0);
                
                // Final v_rho_a_gamma_aa_[index]:
                v_rho_a_gamma_aa_[index] = chi_a_rho_a_gamma_aa*functional_chi_a+chi_a_rho_a*chi_a_gamma_aa*functional_chi_a_chi_a;
                
            } else if (rho_b[index] > cutoff_) {
                /** Tree Code for v_rho_a_gamma_aa_[index] value. **/
                
                // Final v_rho_a_gamma_aa_[index]:
                v_rho_a_gamma_aa_[index] = 0.0;
                
            } 

            //V_rho_a_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                /** Tree Code for v_rho_a_gamma_ab_[index] value. **/
                
                // Final v_rho_a_gamma_ab_[index]:
                v_rho_a_gamma_ab_[index] = 0.0;
                
            } else if (rho_a[index] > cutoff_) {
                /** Tree Code for v_rho_a_gamma_ab_[index] value. **/
                
                // Final v_rho_a_gamma_ab_[index]:
                v_rho_a_gamma_ab_[index] = 0.0;
                
            } else if (rho_b[index] > cutoff_) {
                /** Tree Code for v_rho_a_gamma_ab_[index] value. **/
                
                // Final v_rho_a_gamma_ab_[index]:
                v_rho_a_gamma_ab_[index] = 0.0;
                
            } 

            //V_rho_a_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                /** Tree Code for v_rho_a_gamma_bb_[index] value. **/
                
                // Final v_rho_a_gamma_bb_[index]:
                v_rho_a_gamma_bb_[index] = 0.0;
                
            } else if (rho_a[index] > cutoff_) {
                /** Tree Code for v_rho_a_gamma_bb_[index] value. **/
                
                // Final v_rho_a_gamma_bb_[index]:
                v_rho_a_gamma_bb_[index] = 0.0;
                
            } else if (rho_b[index] > cutoff_) {
                /** Tree Code for v_rho_a_gamma_bb_[index] value. **/
                
                // Final v_rho_a_gamma_bb_[index]:
                v_rho_a_gamma_bb_[index] = 0.0;
                
            } 

            //V_rho_b_gamma_aa
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                /** Tree Code for v_rho_b_gamma_aa_[index] value. **/
                
                // Final v_rho_b_gamma_aa_[index]:
                v_rho_b_gamma_aa_[index] = 0.0;
                
            } else if (rho_a[index] > cutoff_) {
                /** Tree Code for v_rho_b_gamma_aa_[index] value. **/
                
                // Final v_rho_b_gamma_aa_[index]:
                v_rho_b_gamma_aa_[index] = 0.0;
                
            } else if (rho_b[index] > cutoff_) {
                /** Tree Code for v_rho_b_gamma_aa_[index] value. **/
                
                // Final v_rho_b_gamma_aa_[index]:
                v_rho_b_gamma_aa_[index] = 0.0;
                
            } 

            //V_rho_b_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                /** Tree Code for v_rho_b_gamma_ab_[index] value. **/
                
                // Final v_rho_b_gamma_ab_[index]:
                v_rho_b_gamma_ab_[index] = 0.0;
                
            } else if (rho_a[index] > cutoff_) {
                /** Tree Code for v_rho_b_gamma_ab_[index] value. **/
                
                // Final v_rho_b_gamma_ab_[index]:
                v_rho_b_gamma_ab_[index] = 0.0;
                
            } else if (rho_b[index] > cutoff_) {
                /** Tree Code for v_rho_b_gamma_ab_[index] value. **/
                
                // Final v_rho_b_gamma_ab_[index]:
                v_rho_b_gamma_ab_[index] = 0.0;
                
            } 

            //V_rho_b_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                /** Tree Code for v_rho_b_gamma_bb_[index] value. **/
                
                // Intermediate chi_b:
                double chi_b = sqrt(gamma_bb[index])*1/pow(rho_b[index],4.0/3.0);
                
                // Intermediate functional_chi_b_chi_b:
                double t31103 = pow(rho_b[index],4.0/3.0);
                double t31104 = log(chi_b+sqrt(chi_b*chi_b+1.0));
                double t31105 = chi_b*d*t31104*6.0;
                double t31106 = t31105+1.0;
                double t31107 = chi_b*chi_b;
                double t31108 = 1/(t31106*t31106);
                double t31109 = t31107+1.0;
                double t31110 = 1/sqrt(t31109);
                double t31111 = d*t31104*6.0;
                double t31112 = chi_b*d*t31110*6.0;
                double t31113 = t31111+t31112;
                double functional_chi_b_chi_b = (d*t31103*-2.0)/t31106-d*t31103*(t31113*t31113)*1/(t31106*t31106*t31106) \
                       *t31107*2.0+chi_b*d*t31103*t31113*t31108*4.0+d*t31103*t31107*t31108*(d*t31110*1.2E1-d*t31107*1/pow(t31109,3.0/ \
                       2.0)*6.0);
                
                // Intermediate functional_chi_b:
                double t31115 = pow(rho_b[index],4.0/3.0);
                double t31116 = log(chi_b+sqrt(chi_b*chi_b+1.0));
                double t31117 = chi_b*d*t31116*6.0;
                double t31118 = t31117+1.0;
                double t31119 = chi_b*chi_b;
                double functional_chi_b = (chi_b*d*t31115*-2.0)/t31118+d*t31115*1/(t31118*t31118)*t31119*(d*t31116*6.0+ \
                       chi_b*d*1/sqrt(t31119+1.0)*6.0);
                
                // Intermediate chi_b_rho_b_gamma_bb:
                double chi_b_rho_b_gamma_bb = 1/sqrt(gamma_bb[index])*1/pow(rho_b[index],7.0/3.0)*(-2.0/3.0);
                
                // Intermediate chi_b_gamma_bb:
                double chi_b_gamma_bb = 1/sqrt(gamma_bb[index])*1/pow(rho_b[index],4.0/3.0)*(1.0/2.0);
                
                // Intermediate chi_b_rho_b:
                double chi_b_rho_b = sqrt(gamma_bb[index])*1/pow(rho_b[index],7.0/3.0)*(-4.0/3.0);
                
                // Final v_rho_b_gamma_bb_[index]:
                v_rho_b_gamma_bb_[index] = chi_b_rho_b_gamma_bb*functional_chi_b+chi_b_rho_b*chi_b_gamma_bb*functional_chi_b_chi_b;
                
            } else if (rho_a[index] > cutoff_) {
                /** Tree Code for v_rho_b_gamma_bb_[index] value. **/
                
                // Final v_rho_b_gamma_bb_[index]:
                v_rho_b_gamma_bb_[index] = 0.0;
                
            } else if (rho_b[index] > cutoff_) {
                /** Tree Code for v_rho_b_gamma_bb_[index] value. **/
                
                // Intermediate chi_b:
                double chi_b = sqrt(gamma_bb[index])*1/pow(rho_b[index],4.0/3.0);
                
                // Intermediate functional_chi_b_chi_b:
                double t31126 = pow(rho_b[index],4.0/3.0);
                double t31127 = log(chi_b+sqrt(chi_b*chi_b+1.0));
                double t31128 = chi_b*d*t31127*6.0;
                double t31129 = t31128+1.0;
                double t31130 = chi_b*chi_b;
                double t31131 = 1/(t31129*t31129);
                double t31132 = t31130+1.0;
                double t31133 = 1/sqrt(t31132);
                double t31134 = d*t31127*6.0;
                double t31135 = chi_b*d*t31133*6.0;
                double t31136 = t31134+t31135;
                double functional_chi_b_chi_b = (d*t31126*-2.0)/t31129-d*t31130*t31126*(t31136*t31136)*1/(t31129*t31129* \
                       t31129)*2.0+chi_b*d*t31131*t31126*t31136*4.0+d*t31130*t31131*t31126*(d*t31133*1.2E1-d*t31130*1/pow(t31132,3.0/ \
                       2.0)*6.0);
                
                // Intermediate functional_chi_b:
                double t31138 = pow(rho_b[index],4.0/3.0);
                double t31139 = log(chi_b+sqrt(chi_b*chi_b+1.0));
                double t31140 = chi_b*d*t31139*6.0;
                double t31141 = t31140+1.0;
                double t31142 = chi_b*chi_b;
                double functional_chi_b = (chi_b*d*t31138*-2.0)/t31141+d*1/(t31141*t31141)*t31142*t31138*(d*t31139*6.0+ \
                       chi_b*d*1/sqrt(t31142+1.0)*6.0);
                
                // Intermediate chi_b_rho_b_gamma_bb:
                double chi_b_rho_b_gamma_bb = 1/sqrt(gamma_bb[index])*1/pow(rho_b[index],7.0/3.0)*(-2.0/3.0);
                
                // Intermediate chi_b_gamma_bb:
                double chi_b_gamma_bb = 1/sqrt(gamma_bb[index])*1/pow(rho_b[index],4.0/3.0)*(1.0/2.0);
                
                // Intermediate chi_b_rho_b:
                double chi_b_rho_b = sqrt(gamma_bb[index])*1/pow(rho_b[index],7.0/3.0)*(-4.0/3.0);
                
                // Final v_rho_b_gamma_bb_[index]:
                v_rho_b_gamma_bb_[index] = chi_b_rho_b_gamma_bb*functional_chi_b+chi_b_rho_b*chi_b_gamma_bb*functional_chi_b_chi_b;
                
            } 

            //V_gamma_aa_gamma_aa
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                /** Tree Code for v_gamma_aa_gamma_aa_[index] value. **/
                
                // Intermediate chi_a:
                double chi_a = sqrt(gamma_aa[index])*1/pow(rho_a[index],4.0/3.0);
                
                // Intermediate functional_chi_a_chi_a:
                double t31150 = pow(rho_a[index],4.0/3.0);
                double t31151 = log(chi_a+sqrt(chi_a*chi_a+1.0));
                double t31152 = chi_a*d*t31151*6.0;
                double t31153 = t31152+1.0;
                double t31154 = chi_a*chi_a;
                double t31155 = 1/(t31153*t31153);
                double t31156 = t31154+1.0;
                double t31157 = 1/sqrt(t31156);
                double t31158 = d*t31151*6.0;
                double t31159 = chi_a*d*t31157*6.0;
                double t31160 = t31158+t31159;
                double functional_chi_a_chi_a = (d*t31150*-2.0)/t31153-d*t31150*(t31160*t31160)*1/(t31153*t31153*t31153) \
                       *t31154*2.0+chi_a*d*t31150*t31160*t31155*4.0+d*t31150*t31154*t31155*(d*t31157*1.2E1-d*t31154*1/pow(t31156,3.0/ \
                       2.0)*6.0);
                
                // Intermediate functional_chi_a:
                double t31162 = pow(rho_a[index],4.0/3.0);
                double t31163 = log(chi_a+sqrt(chi_a*chi_a+1.0));
                double t31164 = chi_a*d*t31163*6.0;
                double t31165 = t31164+1.0;
                double t31166 = chi_a*chi_a;
                double functional_chi_a = (chi_a*d*t31162*-2.0)/t31165+d*t31162*1/(t31165*t31165)*t31166*(d*t31163*6.0+ \
                       chi_a*d*1/sqrt(t31166+1.0)*6.0);
                
                // Intermediate chi_a_gamma_aa_gamma_aa:
                double chi_a_gamma_aa_gamma_aa = 1/pow(gamma_aa[index],3.0/2.0)*1/pow(rho_a[index],4.0/3.0)*(-1.0/4.0);
                
                // Intermediate chi_a_gamma_aa:
                double chi_a_gamma_aa = 1/sqrt(gamma_aa[index])*1/pow(rho_a[index],4.0/3.0)*(1.0/2.0);
                
                // Final v_gamma_aa_gamma_aa_[index]:
                v_gamma_aa_gamma_aa_[index] = chi_a_gamma_aa_gamma_aa*functional_chi_a+(chi_a_gamma_aa*chi_a_gamma_aa) \
                       *functional_chi_a_chi_a;
                
            } else if (rho_a[index] > cutoff_) {
                /** Tree Code for v_gamma_aa_gamma_aa_[index] value. **/
                
                // Intermediate chi_a:
                double chi_a = sqrt(gamma_aa[index])*1/pow(rho_a[index],4.0/3.0);
                
                // Intermediate functional_chi_a_chi_a:
                double t31173 = pow(rho_a[index],4.0/3.0);
                double t31174 = log(chi_a+sqrt(chi_a*chi_a+1.0));
                double t31175 = chi_a*d*t31174*6.0;
                double t31176 = t31175+1.0;
                double t31177 = chi_a*chi_a;
                double t31178 = 1/(t31176*t31176);
                double t31179 = t31177+1.0;
                double t31180 = 1/sqrt(t31179);
                double t31181 = d*t31174*6.0;
                double t31182 = chi_a*d*t31180*6.0;
                double t31183 = t31181+t31182;
                double functional_chi_a_chi_a = (d*t31173*-2.0)/t31176-d*t31173*(t31183*t31183)*1/(t31176*t31176*t31176) \
                       *t31177*2.0+chi_a*d*t31173*t31183*t31178*4.0+d*t31173*t31177*t31178*(d*t31180*1.2E1-d*t31177*1/pow(t31179,3.0/ \
                       2.0)*6.0);
                
                // Intermediate functional_chi_a:
                double t31185 = pow(rho_a[index],4.0/3.0);
                double t31186 = log(chi_a+sqrt(chi_a*chi_a+1.0));
                double t31187 = chi_a*d*t31186*6.0;
                double t31188 = t31187+1.0;
                double t31189 = chi_a*chi_a;
                double functional_chi_a = (chi_a*d*t31185*-2.0)/t31188+d*t31185*1/(t31188*t31188)*t31189*(d*t31186*6.0+ \
                       chi_a*d*1/sqrt(t31189+1.0)*6.0);
                
                // Intermediate chi_a_gamma_aa_gamma_aa:
                double chi_a_gamma_aa_gamma_aa = 1/pow(gamma_aa[index],3.0/2.0)*1/pow(rho_a[index],4.0/3.0)*(-1.0/4.0);
                
                // Intermediate chi_a_gamma_aa:
                double chi_a_gamma_aa = 1/sqrt(gamma_aa[index])*1/pow(rho_a[index],4.0/3.0)*(1.0/2.0);
                
                // Final v_gamma_aa_gamma_aa_[index]:
                v_gamma_aa_gamma_aa_[index] = chi_a_gamma_aa_gamma_aa*functional_chi_a+(chi_a_gamma_aa*chi_a_gamma_aa) \
                       *functional_chi_a_chi_a;
                
            } else if (rho_b[index] > cutoff_) {
                /** Tree Code for v_gamma_aa_gamma_aa_[index] value. **/
                
                // Final v_gamma_aa_gamma_aa_[index]:
                v_gamma_aa_gamma_aa_[index] = 0.0;
                
            } 

            //V_gamma_aa_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                /** Tree Code for v_gamma_aa_gamma_ab_[index] value. **/
                
                // Final v_gamma_aa_gamma_ab_[index]:
                v_gamma_aa_gamma_ab_[index] = 0.0;
                
            } else if (rho_a[index] > cutoff_) {
                /** Tree Code for v_gamma_aa_gamma_ab_[index] value. **/
                
                // Final v_gamma_aa_gamma_ab_[index]:
                v_gamma_aa_gamma_ab_[index] = 0.0;
                
            } else if (rho_b[index] > cutoff_) {
                /** Tree Code for v_gamma_aa_gamma_ab_[index] value. **/
                
                // Final v_gamma_aa_gamma_ab_[index]:
                v_gamma_aa_gamma_ab_[index] = 0.0;
                
            } 

            //V_gamma_aa_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                /** Tree Code for v_gamma_aa_gamma_bb_[index] value. **/
                
                // Final v_gamma_aa_gamma_bb_[index]:
                v_gamma_aa_gamma_bb_[index] = 0.0;
                
            } else if (rho_a[index] > cutoff_) {
                /** Tree Code for v_gamma_aa_gamma_bb_[index] value. **/
                
                // Final v_gamma_aa_gamma_bb_[index]:
                v_gamma_aa_gamma_bb_[index] = 0.0;
                
            } else if (rho_b[index] > cutoff_) {
                /** Tree Code for v_gamma_aa_gamma_bb_[index] value. **/
                
                // Final v_gamma_aa_gamma_bb_[index]:
                v_gamma_aa_gamma_bb_[index] = 0.0;
                
            } 

            //V_gamma_ab_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                /** Tree Code for v_gamma_ab_gamma_ab_[index] value. **/
                
                // Final v_gamma_ab_gamma_ab_[index]:
                v_gamma_ab_gamma_ab_[index] = 0.0;
                
            } else if (rho_a[index] > cutoff_) {
                /** Tree Code for v_gamma_ab_gamma_ab_[index] value. **/
                
                // Final v_gamma_ab_gamma_ab_[index]:
                v_gamma_ab_gamma_ab_[index] = 0.0;
                
            } else if (rho_b[index] > cutoff_) {
                /** Tree Code for v_gamma_ab_gamma_ab_[index] value. **/
                
                // Final v_gamma_ab_gamma_ab_[index]:
                v_gamma_ab_gamma_ab_[index] = 0.0;
                
            } 

            //V_gamma_ab_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                /** Tree Code for v_gamma_ab_gamma_bb_[index] value. **/
                
                // Final v_gamma_ab_gamma_bb_[index]:
                v_gamma_ab_gamma_bb_[index] = 0.0;
                
            } else if (rho_a[index] > cutoff_) {
                /** Tree Code for v_gamma_ab_gamma_bb_[index] value. **/
                
                // Final v_gamma_ab_gamma_bb_[index]:
                v_gamma_ab_gamma_bb_[index] = 0.0;
                
            } else if (rho_b[index] > cutoff_) {
                /** Tree Code for v_gamma_ab_gamma_bb_[index] value. **/
                
                // Final v_gamma_ab_gamma_bb_[index]:
                v_gamma_ab_gamma_bb_[index] = 0.0;
                
            } 

            //V_gamma_bb_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                /** Tree Code for v_gamma_bb_gamma_bb_[index] value. **/
                
                // Intermediate chi_b:
                double chi_b = sqrt(gamma_bb[index])*1/pow(rho_b[index],4.0/3.0);
                
                // Intermediate functional_chi_b_chi_b:
                double t31207 = pow(rho_b[index],4.0/3.0);
                double t31208 = log(chi_b+sqrt(chi_b*chi_b+1.0));
                double t31209 = chi_b*d*t31208*6.0;
                double t31210 = t31209+1.0;
                double t31211 = chi_b*chi_b;
                double t31212 = 1/(t31210*t31210);
                double t31213 = t31211+1.0;
                double t31214 = 1/sqrt(t31213);
                double t31215 = d*t31208*6.0;
                double t31216 = chi_b*d*t31214*6.0;
                double t31217 = t31215+t31216;
                double functional_chi_b_chi_b = (d*t31207*-2.0)/t31210-d*1/(t31210*t31210*t31210)*t31211*t31207*(t31217* \
                       t31217)*2.0+chi_b*d*t31212*t31207*t31217*4.0+d*t31211*t31212*t31207*(d*t31214*1.2E1-d*t31211*1/pow(t31213,3.0/ \
                       2.0)*6.0);
                
                // Intermediate functional_chi_b:
                double t31219 = pow(rho_b[index],4.0/3.0);
                double t31220 = log(chi_b+sqrt(chi_b*chi_b+1.0));
                double t31221 = chi_b*d*t31220*6.0;
                double t31222 = t31221+1.0;
                double t31223 = chi_b*chi_b;
                double functional_chi_b = (chi_b*d*t31219*-2.0)/t31222+d*1/(t31222*t31222)*t31223*t31219*(d*t31220*6.0+ \
                       chi_b*d*1/sqrt(t31223+1.0)*6.0);
                
                // Intermediate chi_b_gamma_bb_gamma_bb:
                double chi_b_gamma_bb_gamma_bb = 1/pow(gamma_bb[index],3.0/2.0)*1/pow(rho_b[index],4.0/3.0)*(-1.0/4.0);
                
                // Intermediate chi_b_gamma_bb:
                double chi_b_gamma_bb = 1/sqrt(gamma_bb[index])*1/pow(rho_b[index],4.0/3.0)*(1.0/2.0);
                
                // Final v_gamma_bb_gamma_bb_[index]:
                v_gamma_bb_gamma_bb_[index] = chi_b_gamma_bb_gamma_bb*functional_chi_b+(chi_b_gamma_bb*chi_b_gamma_bb) \
                       *functional_chi_b_chi_b;
                
            } else if (rho_a[index] > cutoff_) {
                /** Tree Code for v_gamma_bb_gamma_bb_[index] value. **/
                
                // Final v_gamma_bb_gamma_bb_[index]:
                v_gamma_bb_gamma_bb_[index] = 0.0;
                
            } else if (rho_b[index] > cutoff_) {
                /** Tree Code for v_gamma_bb_gamma_bb_[index] value. **/
                
                // Intermediate chi_b:
                double chi_b = sqrt(gamma_bb[index])*1/pow(rho_b[index],4.0/3.0);
                
                // Intermediate functional_chi_b_chi_b:
                double t31229 = pow(rho_b[index],4.0/3.0);
                double t31230 = log(chi_b+sqrt(chi_b*chi_b+1.0));
                double t31231 = chi_b*d*t31230*6.0;
                double t31232 = t31231+1.0;
                double t31233 = chi_b*chi_b;
                double t31234 = 1/(t31232*t31232);
                double t31235 = t31233+1.0;
                double t31236 = 1/sqrt(t31235);
                double t31237 = d*t31230*6.0;
                double t31238 = chi_b*d*t31236*6.0;
                double t31239 = t31237+t31238;
                double functional_chi_b_chi_b = (d*t31229*-2.0)/t31232-d*1/(t31232*t31232*t31232)*t31233*t31229*(t31239* \
                       t31239)*2.0+chi_b*d*t31234*t31229*t31239*4.0+d*t31233*t31234*t31229*(d*t31236*1.2E1-d*t31233*1/pow(t31235,3.0/ \
                       2.0)*6.0);
                
                // Intermediate functional_chi_b:
                double t31241 = pow(rho_b[index],4.0/3.0);
                double t31242 = log(chi_b+sqrt(chi_b*chi_b+1.0));
                double t31243 = chi_b*d*t31242*6.0;
                double t31244 = t31243+1.0;
                double t31245 = chi_b*chi_b;
                double functional_chi_b = (chi_b*d*t31241*-2.0)/t31244+d*t31241*1/(t31244*t31244)*t31245*(d*t31242*6.0+ \
                       chi_b*d*1/sqrt(t31245+1.0)*6.0);
                
                // Intermediate chi_b_gamma_bb_gamma_bb:
                double chi_b_gamma_bb_gamma_bb = 1/pow(gamma_bb[index],3.0/2.0)*1/pow(rho_b[index],4.0/3.0)*(-1.0/4.0);
                
                // Intermediate chi_b_gamma_bb:
                double chi_b_gamma_bb = 1/sqrt(gamma_bb[index])*1/pow(rho_b[index],4.0/3.0)*(1.0/2.0);
                
                // Final v_gamma_bb_gamma_bb_[index]:
                v_gamma_bb_gamma_bb_[index] = chi_b_gamma_bb_gamma_bb*functional_chi_b+(chi_b_gamma_bb*chi_b_gamma_bb) \
                       *functional_chi_b_chi_b;
                
            } 

        }                       
        if (is_meta_) {

            //V_rho_a_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                /** Tree Code for v_rho_a_tau_a_[index] value. **/
                
                // Final v_rho_a_tau_a_[index]:
                v_rho_a_tau_a_[index] = 0.0;
                
            } else if (rho_a[index] > cutoff_) {
                /** Tree Code for v_rho_a_tau_a_[index] value. **/
                
                // Final v_rho_a_tau_a_[index]:
                v_rho_a_tau_a_[index] = 0.0;
                
            } else if (rho_b[index] > cutoff_) {
                /** Tree Code for v_rho_a_tau_a_[index] value. **/
                
                // Final v_rho_a_tau_a_[index]:
                v_rho_a_tau_a_[index] = 0.0;
                
            } 

            //V_rho_a_tau_b
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                /** Tree Code for v_rho_a_tau_b_[index] value. **/
                
                // Final v_rho_a_tau_b_[index]:
                v_rho_a_tau_b_[index] = 0.0;
                
            } else if (rho_a[index] > cutoff_) {
                /** Tree Code for v_rho_a_tau_b_[index] value. **/
                
                // Final v_rho_a_tau_b_[index]:
                v_rho_a_tau_b_[index] = 0.0;
                
            } else if (rho_b[index] > cutoff_) {
                /** Tree Code for v_rho_a_tau_b_[index] value. **/
                
                // Final v_rho_a_tau_b_[index]:
                v_rho_a_tau_b_[index] = 0.0;
                
            } 

            //V_rho_b_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                /** Tree Code for v_rho_b_tau_a_[index] value. **/
                
                // Final v_rho_b_tau_a_[index]:
                v_rho_b_tau_a_[index] = 0.0;
                
            } else if (rho_a[index] > cutoff_) {
                /** Tree Code for v_rho_b_tau_a_[index] value. **/
                
                // Final v_rho_b_tau_a_[index]:
                v_rho_b_tau_a_[index] = 0.0;
                
            } else if (rho_b[index] > cutoff_) {
                /** Tree Code for v_rho_b_tau_a_[index] value. **/
                
                // Final v_rho_b_tau_a_[index]:
                v_rho_b_tau_a_[index] = 0.0;
                
            } 

            //V_rho_b_tau_b
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                /** Tree Code for v_rho_b_tau_b_[index] value. **/
                
                // Final v_rho_b_tau_b_[index]:
                v_rho_b_tau_b_[index] = 0.0;
                
            } else if (rho_a[index] > cutoff_) {
                /** Tree Code for v_rho_b_tau_b_[index] value. **/
                
                // Final v_rho_b_tau_b_[index]:
                v_rho_b_tau_b_[index] = 0.0;
                
            } else if (rho_b[index] > cutoff_) {
                /** Tree Code for v_rho_b_tau_b_[index] value. **/
                
                // Final v_rho_b_tau_b_[index]:
                v_rho_b_tau_b_[index] = 0.0;
                
            } 

            //V_tau_a_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                /** Tree Code for v_tau_a_tau_a_[index] value. **/
                
                // Final v_tau_a_tau_a_[index]:
                v_tau_a_tau_a_[index] = 0.0;
                
            } else if (rho_a[index] > cutoff_) {
                /** Tree Code for v_tau_a_tau_a_[index] value. **/
                
                // Final v_tau_a_tau_a_[index]:
                v_tau_a_tau_a_[index] = 0.0;
                
            } else if (rho_b[index] > cutoff_) {
                /** Tree Code for v_tau_a_tau_a_[index] value. **/
                
                // Final v_tau_a_tau_a_[index]:
                v_tau_a_tau_a_[index] = 0.0;
                
            } 

            //V_tau_a_tau_b
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                /** Tree Code for v_tau_a_tau_b_[index] value. **/
                
                // Final v_tau_a_tau_b_[index]:
                v_tau_a_tau_b_[index] = 0.0;
                
            } else if (rho_a[index] > cutoff_) {
                /** Tree Code for v_tau_a_tau_b_[index] value. **/
                
                // Final v_tau_a_tau_b_[index]:
                v_tau_a_tau_b_[index] = 0.0;
                
            } else if (rho_b[index] > cutoff_) {
                /** Tree Code for v_tau_a_tau_b_[index] value. **/
                
                // Final v_tau_a_tau_b_[index]:
                v_tau_a_tau_b_[index] = 0.0;
                
            } 

            //V_tau_b_tau_b
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                /** Tree Code for v_tau_b_tau_b_[index] value. **/
                
                // Final v_tau_b_tau_b_[index]:
                v_tau_b_tau_b_[index] = 0.0;
                
            } else if (rho_a[index] > cutoff_) {
                /** Tree Code for v_tau_b_tau_b_[index] value. **/
                
                // Final v_tau_b_tau_b_[index]:
                v_tau_b_tau_b_[index] = 0.0;
                
            } else if (rho_b[index] > cutoff_) {
                /** Tree Code for v_tau_b_tau_b_[index] value. **/
                
                // Final v_tau_b_tau_b_[index]:
                v_tau_b_tau_b_[index] = 0.0;
                
            } 

            if (is_gga_) {
            	
                //V_gamma_aa_tau_a
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    /** Tree Code for v_gamma_aa_tau_a_[index] value. **/
                    
                    // Final v_gamma_aa_tau_a_[index]:
                    v_gamma_aa_tau_a_[index] = 0.0;
                    
                } else if (rho_a[index] > cutoff_) {
                    /** Tree Code for v_gamma_aa_tau_a_[index] value. **/
                    
                    // Final v_gamma_aa_tau_a_[index]:
                    v_gamma_aa_tau_a_[index] = 0.0;
                    
                } else if (rho_b[index] > cutoff_) {
                    /** Tree Code for v_gamma_aa_tau_a_[index] value. **/
                    
                    // Final v_gamma_aa_tau_a_[index]:
                    v_gamma_aa_tau_a_[index] = 0.0;
                    
                } 
            	
                //V_gamma_aa_tau_b
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    /** Tree Code for v_gamma_aa_tau_b_[index] value. **/
                    
                    // Final v_gamma_aa_tau_b_[index]:
                    v_gamma_aa_tau_b_[index] = 0.0;
                    
                } else if (rho_a[index] > cutoff_) {
                    /** Tree Code for v_gamma_aa_tau_b_[index] value. **/
                    
                    // Final v_gamma_aa_tau_b_[index]:
                    v_gamma_aa_tau_b_[index] = 0.0;
                    
                } else if (rho_b[index] > cutoff_) {
                    /** Tree Code for v_gamma_aa_tau_b_[index] value. **/
                    
                    // Final v_gamma_aa_tau_b_[index]:
                    v_gamma_aa_tau_b_[index] = 0.0;
                    
                } 
            	
                //V_gamma_ab_tau_a
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    /** Tree Code for v_gamma_ab_tau_a_[index] value. **/
                    
                    // Final v_gamma_ab_tau_a_[index]:
                    v_gamma_ab_tau_a_[index] = 0.0;
                    
                } else if (rho_a[index] > cutoff_) {
                    /** Tree Code for v_gamma_ab_tau_a_[index] value. **/
                    
                    // Final v_gamma_ab_tau_a_[index]:
                    v_gamma_ab_tau_a_[index] = 0.0;
                    
                } else if (rho_b[index] > cutoff_) {
                    /** Tree Code for v_gamma_ab_tau_a_[index] value. **/
                    
                    // Final v_gamma_ab_tau_a_[index]:
                    v_gamma_ab_tau_a_[index] = 0.0;
                    
                } 
            	
                //V_gamma_ab_tau_b
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    /** Tree Code for v_gamma_ab_tau_a_[index] value. **/
                    
                    // Final v_gamma_ab_tau_a_[index]:
                    v_gamma_ab_tau_a_[index] = 0.0;
                    
                } else if (rho_a[index] > cutoff_) {
                    /** Tree Code for v_gamma_ab_tau_a_[index] value. **/
                    
                    // Final v_gamma_ab_tau_a_[index]:
                    v_gamma_ab_tau_a_[index] = 0.0;
                    
                } else if (rho_b[index] > cutoff_) {
                    /** Tree Code for v_gamma_ab_tau_a_[index] value. **/
                    
                    // Final v_gamma_ab_tau_a_[index]:
                    v_gamma_ab_tau_a_[index] = 0.0;
                    
                } 
            	
                //V_gamma_bb_tau_a
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    /** Tree Code for v_gamma_bb_tau_a_[index] value. **/
                    
                    // Final v_gamma_bb_tau_a_[index]:
                    v_gamma_bb_tau_a_[index] = 0.0;
                    
                } else if (rho_a[index] > cutoff_) {
                    /** Tree Code for v_gamma_bb_tau_a_[index] value. **/
                    
                    // Final v_gamma_bb_tau_a_[index]:
                    v_gamma_bb_tau_a_[index] = 0.0;
                    
                } else if (rho_b[index] > cutoff_) {
                    /** Tree Code for v_gamma_bb_tau_a_[index] value. **/
                    
                    // Final v_gamma_bb_tau_a_[index]:
                    v_gamma_bb_tau_a_[index] = 0.0;
                    
                } 
            	
                //V_gamma_bb_tau_b
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    /** Tree Code for v_gamma_bb_tau_b_[index] value. **/
                    
                    // Final v_gamma_bb_tau_b_[index]:
                    v_gamma_bb_tau_b_[index] = 0.0;
                    
                } else if (rho_a[index] > cutoff_) {
                    /** Tree Code for v_gamma_bb_tau_b_[index] value. **/
                    
                    // Final v_gamma_bb_tau_b_[index]:
                    v_gamma_bb_tau_b_[index] = 0.0;
                    
                } else if (rho_b[index] > cutoff_) {
                    /** Tree Code for v_gamma_bb_tau_b_[index] value. **/
                    
                    // Final v_gamma_bb_tau_b_[index]:
                    v_gamma_bb_tau_b_[index] = 0.0;
                    
                } 
          
            }  
        }
    }
}

}}

