#include <libmints/vector.h>
#include "P86_Cfunctional.h"
#include "utility.h"
#include <cmath>

using namespace psi;

namespace psi {

P86_CFunctional::P86_CFunctional()
{
    name_ = "P86_C";
    description_ = "    P86 Correlation (PZ81 LSDA + P86 GGA)\n";
    citation_ = "    J.P. Perdew, Phys. Rev. B., 33, 8822-8824, 1986\n";
    alpha_ = 1.0;
    omega_ = 0.0;
    lrc_ = false;
    gga_ = true;
    meta_ = false;
    parameters_["c"] =   6.2035049089939986E-01;
    parameters_["two_13"] =   1.2599210498948732E+00;
    parameters_["EcPld_1"] =  -1.4230000000000001E-01;
    parameters_["EcPld_2"] =   1.0528999999999999E+00;
    parameters_["EcPld_3"] =   3.3339999999999997E-01;
    parameters_["EcFld_1"] =  -8.4300000000000000E-02;
    parameters_["EcFld_2"] =   1.3980999999999999E+00;
    parameters_["EcFld_3"] =   2.6110000000000000E-01;
    parameters_["EcPhd_1"] =   3.1099999999999999E-02;
    parameters_["EcPhd_2"] =  -4.8000000000000001E-02;
    parameters_["EcPhd_3"] =   2.0000000000000000E-03;
    parameters_["EcPhd_4"] =  -1.1599999999999999E-02;
    parameters_["EcFhd_1"] =   1.5550000000000000E-02;
    parameters_["EcFhd_2"] =  -2.6900000000000000E-02;
    parameters_["EcFhd_3"] =   6.9999999999999999E-04;
    parameters_["EcFhd_4"] =  -4.7999999999999996E-03;
    parameters_["Fg"] =   1.1000000000000000E-01;
    parameters_["Bg"] =   7.3889999999999999E-06;
    parameters_["Cx"] =   1.6670000000000001E-03;
    parameters_["Cinf"] =   4.2350000000000000E-03;
    parameters_["Cg_1"] =   2.5680000000000000E-03;
    parameters_["Cg_2"] =   2.3265999999999998E-02;
    parameters_["Cg_3"] =   8.7230000000000008E+00;
    parameters_["Cg_4"] =   4.7199999999999998E-01;
    parameters_["Pg_1"] =   1.7450000000000001E+00;
}
P86_CFunctional::~P86_CFunctional()
{
}
void P86_CFunctional::compute_functional(const std::map<std::string,SharedVector>& in, const std::map<std::string,SharedVector>& out, int npoints, int deriv, double alpha)
{
    double c = parameters_["c"];
    double two_13 = parameters_["two_13"];
    double EcPld_1 = parameters_["EcPld_1"];
    double EcPld_2 = parameters_["EcPld_2"];
    double EcPld_3 = parameters_["EcPld_3"];
    double EcFld_1 = parameters_["EcFld_1"];
    double EcFld_2 = parameters_["EcFld_2"];
    double EcFld_3 = parameters_["EcFld_3"];
    double EcPhd_1 = parameters_["EcPhd_1"];
    double EcPhd_2 = parameters_["EcPhd_2"];
    double EcPhd_3 = parameters_["EcPhd_3"];
    double EcPhd_4 = parameters_["EcPhd_4"];
    double EcFhd_1 = parameters_["EcFhd_1"];
    double EcFhd_2 = parameters_["EcFhd_2"];
    double EcFhd_3 = parameters_["EcFhd_3"];
    double EcFhd_4 = parameters_["EcFhd_4"];
    double Fg = parameters_["Fg"];
    double Bg = parameters_["Bg"];
    double Cx = parameters_["Cx"];
    double Cinf = parameters_["Cinf"];
    double Cg_1 = parameters_["Cg_1"];
    double Cg_2 = parameters_["Cg_2"];
    double Cg_3 = parameters_["Cg_3"];
    double Cg_4 = parameters_["Cg_4"];
    double Pg_1 = parameters_["Pg_1"];

    // Overall scale factor
    double scale = alpha_ * alpha;

    // => Input variables <= //

    double* rho_ap = NULL;
    double* rho_bp = NULL;
    double* gamma_aap = NULL;
    double* gamma_abp = NULL;
    double* gamma_bbp = NULL;
    double* tau_ap = NULL;
    double* tau_bp = NULL;

    if (true) {
        rho_ap = in.find("RHO_A")->second->pointer();
        rho_bp = in.find("RHO_B")->second->pointer();
    }
    if (gga_) {  
        gamma_aap = in.find("GAMMA_AA")->second->pointer();
        gamma_abp = in.find("GAMMA_AB")->second->pointer();
        gamma_bbp = in.find("GAMMA_BB")->second->pointer();
    } 
    if (meta_)  {
        tau_ap = in.find("TAU_A")->second->pointer();
        tau_bp = in.find("TAU_B")->second->pointer();
    }

    // => Outut variables <= //

    double* v = NULL;

    double* v_rho_a = NULL;
    double* v_rho_b = NULL;
    double* v_gamma_aa = NULL;
    double* v_gamma_ab = NULL;
    double* v_gamma_bb = NULL;
    double* v_tau_a = NULL;
    double* v_tau_b = NULL;
     
    double* v_rho_a_rho_a = NULL;
    double* v_rho_a_rho_b = NULL;
    double* v_rho_b_rho_b = NULL;
    double* v_gamma_aa_gamma_aa = NULL;
    double* v_gamma_aa_gamma_ab = NULL;
    double* v_gamma_aa_gamma_bb = NULL;
    double* v_gamma_ab_gamma_ab = NULL;
    double* v_gamma_ab_gamma_bb = NULL;
    double* v_gamma_bb_gamma_bb = NULL;
    double* v_tau_a_tau_a = NULL;
    double* v_tau_a_tau_b = NULL;
    double* v_tau_b_tau_b = NULL;
    double* v_rho_a_gamma_aa = NULL;
    double* v_rho_a_gamma_ab = NULL;
    double* v_rho_a_gamma_bb = NULL;
    double* v_rho_b_gamma_aa = NULL;
    double* v_rho_b_gamma_ab = NULL;
    double* v_rho_b_gamma_bb = NULL;
    double* v_rho_a_tau_a = NULL;
    double* v_rho_a_tau_b = NULL;
    double* v_rho_b_tau_a = NULL;
    double* v_rho_b_tau_b = NULL;
    double* v_gamma_aa_tau_a = NULL;
    double* v_gamma_aa_tau_b = NULL;
    double* v_gamma_ab_tau_a = NULL;
    double* v_gamma_ab_tau_b = NULL;
    double* v_gamma_bb_tau_a = NULL;
    double* v_gamma_bb_tau_b = NULL;

    if (deriv >= 0) {
        v = out.find("V")->second->pointer();
    } 
    if (deriv >= 1) {
        if (true) {
            v_rho_a = out.find("V_RHO_A")->second->pointer();
            v_rho_b = out.find("V_RHO_B")->second->pointer();
        }
        if (gga_) {
            v_gamma_aa = out.find("V_GAMMA_AA")->second->pointer();
            v_gamma_ab = out.find("V_GAMMA_AB")->second->pointer();
            v_gamma_bb = out.find("V_GAMMA_BB")->second->pointer();
        }
        if (meta_) {    
            v_tau_a = out.find("V_TAU_A")->second->pointer();
            v_tau_b = out.find("V_TAU_B")->second->pointer();
        }
    }
    if (deriv >= 2) {
        if (true) {
            v_rho_a_rho_a = out.find("V_RHO_A_RHO_A")->second->pointer();
            v_rho_a_rho_b = out.find("V_RHO_A_RHO_B")->second->pointer();
            v_rho_b_rho_b = out.find("V_RHO_B_RHO_B")->second->pointer();
        }
        if (gga_) {
            v_gamma_aa_gamma_aa = out.find("V_GAMMA_AA_GAMMA_AA")->second->pointer();
            v_gamma_aa_gamma_ab = out.find("V_GAMMA_AA_GAMMA_AB")->second->pointer();
            v_gamma_aa_gamma_bb = out.find("V_GAMMA_AA_GAMMA_BB")->second->pointer();
            v_gamma_ab_gamma_ab = out.find("V_GAMMA_AB_GAMMA_AB")->second->pointer();
            v_gamma_ab_gamma_bb = out.find("V_GAMMA_AB_GAMMA_BB")->second->pointer();
            v_gamma_bb_gamma_bb = out.find("V_GAMMA_BB_GAMMA_BB")->second->pointer();
        }
        if (meta_) {
            v_tau_a_tau_a = out.find("V_TAU_A_TAU_A")->second->pointer();
            v_tau_a_tau_b = out.find("V_TAU_A_TAU_B")->second->pointer();
            v_tau_b_tau_b = out.find("V_TAU_B_TAU_B")->second->pointer();
        }
        if (gga_) {
            v_rho_a_gamma_aa = out.find("V_RHO_A_GAMMA_AA")->second->pointer();
            v_rho_a_gamma_ab = out.find("V_RHO_A_GAMMA_AB")->second->pointer();
            v_rho_a_gamma_bb = out.find("V_RHO_A_GAMMA_BB")->second->pointer();
            v_rho_b_gamma_aa = out.find("V_RHO_B_GAMMA_AA")->second->pointer();
            v_rho_b_gamma_ab = out.find("V_RHO_B_GAMMA_AB")->second->pointer();
            v_rho_b_gamma_bb = out.find("V_RHO_B_GAMMA_BB")->second->pointer();
        }
        if (meta_) {
            v_rho_a_tau_a = out.find("V_RHO_A_TAU_A")->second->pointer();
            v_rho_a_tau_b = out.find("V_RHO_A_TAU_B")->second->pointer();
            v_rho_b_tau_a = out.find("V_RHO_B_TAU_A")->second->pointer();
            v_rho_b_tau_b = out.find("V_RHO_B_TAU_B")->second->pointer();
        }
        if (gga_ && meta_) {
            v_gamma_aa_tau_a = out.find("V_GAMMA_AA_TAU_A")->second->pointer();
            v_gamma_aa_tau_b = out.find("V_GAMMA_AA_TAU_B")->second->pointer();
            v_gamma_ab_tau_a = out.find("V_GAMMA_AB_TAU_A")->second->pointer();
            v_gamma_ab_tau_b = out.find("V_GAMMA_AB_TAU_B")->second->pointer();
            v_gamma_bb_tau_a = out.find("V_GAMMA_BB_TAU_A")->second->pointer();
            v_gamma_bb_tau_b = out.find("V_GAMMA_BB_TAU_B")->second->pointer();
        }
    }

    // => Loop over points <= //

    for (int Q = 0; Q < npoints; Q++) {

        // Input variables 
        double rho_a;
        double rho_b;
        double gamma_aa;
        double gamma_ab;
        double gamma_bb;
        double tau_a;
        double tau_b;

        if (true) {
            rho_a = rho_ap[Q];
            rho_b = rho_bp[Q];
        }        
        if (gga_) {
            gamma_aa = gamma_aap[Q];
            gamma_ab = gamma_abp[Q];
            gamma_bb = gamma_bbp[Q];
        }        
        if (meta_) {
            tau_a = tau_ap[Q];
            tau_b = tau_bp[Q];
        }        

        // Definitions (asymptotics to prevent numerical problems)
        if (rho_a < lsda_cutoff_ && rho_b < lsda_cutoff_) {
            continue;
        } else if (rho_a < lsda_cutoff_) {
            // v
            if (deriv >= 0) {
                double t41303 = rho_a+rho_b;
                double t41304 = 1.0/pow(t41303,1.0/3.0);
                double t41305 = c*t41304;
                double t41306 = log(t41305);
                double t41307 = EcPhd_1*t41306;
                double t41308 = pow(2.0,1.0/3.0);
                double t41309 = t41308*2.0;
                double t41310 = t41309-2.0;
                double t41311 = two_13*2.0;
                double t41312 = t41311-2.0;
                double t41313 = 1.0/t41312;
                double t41314 = sqrt(t41305);
                double t41315 = EcPld_2*t41314;
                double t41316 = EcPld_3*c*t41304;
                double t41317 = t41315+t41316+1.0;
                double t41318 = 1.0/t41317;
                double t41319 = EcPld_1*t41318;
                double t41320 = c*c;
                double t41321 = 1.0/pow(t41303,2.0/3.0);
                double t41322 = Bg*t41320*t41321;
                double t41323 = Cg_2*c*t41304;
                double t41324 = Cg_1+t41322+t41323;
                double t41325 = 1.0/t41303;
                double t41326 = Bg*c*t41320*t41325*1.0E4;
                double t41327 = Cg_4*t41320*t41321;
                double t41328 = Cg_3*c*t41304;
                double t41329 = t41326+t41327+t41328+1.0;
                double t41330 = 1.0/t41329;
                double t41331 = t41330*t41324;
                double t41332 = Cx+t41331;
                double t41333 = gamma_ab*2.0;
                double t41334 = gamma_aa+gamma_bb+t41333;
                v[Q] += scale * t41303*(heaviside(-c*t41304+1.0)*(EcPhd_2+t41307+t41310*t41313*(EcFhd_2-EcPhd_2-t41307+EcFhd_1*t41306+EcFhd_4*c*t41304-EcPhd_4*c*t41304+EcFhd_3*c*t41304*t41306-EcPhd_3*c*t41304*t41306)+EcPhd_4*c*t41304+EcPhd_3*c*t41304*t41306)+heaviside(t41305-1.0)*(t41319-t41310*t41313*(t41319-EcFld_1/(EcFld_2*t41314+EcFld_3*c*t41304+1.0))))+(1.0/pow(t41303,4.0/3.0)*t41332*t41334*exp(-(Cinf*Fg*Pg_1*1.0/pow(t41303,7.0/6.0)*sqrt(t41334))/t41332))/two_13;
            }
            
            // v_rho_a
            if (deriv >= 1) {
                double t41336 = rho_a+rho_b;
                double t41337 = 1.0/pow(t41336,4.0/3.0);
                double t41338 = 1.0/pow(t41336,1.0/3.0);
                double t41339 = c*t41338;
                double t41340 = 1.0/sqrt(t41339);
                double t41341 = sqrt(t41339);
                double t41342 = EcPld_3*c*t41337*(1.0/3.0);
                double t41343 = EcPld_2*c*t41340*t41337*(1.0/6.0);
                double t41344 = t41342+t41343;
                double t41345 = EcPld_2*t41341;
                double t41346 = EcPld_3*c*t41338;
                double t41347 = t41345+t41346+1.0;
                double t41348 = 1.0/(t41347*t41347);
                double t41349 = EcPld_1*t41344*t41348;
                double t41350 = pow(2.0,1.0/3.0);
                double t41351 = t41350*2.0;
                double t41352 = t41351-2.0;
                double t41353 = two_13*2.0;
                double t41354 = t41353-2.0;
                double t41355 = 1.0/t41354;
                double t41356 = 1.0/t41336;
                double t41357 = EcPhd_1*t41356*(1.0/3.0);
                double t41358 = log(t41339);
                double t41359 = EcPhd_3*c*t41337*(1.0/3.0);
                double t41360 = EcPhd_4*c*t41337*(1.0/3.0);
                double t41361 = EcPhd_3*c*t41337*t41358*(1.0/3.0);
                double t41362 = t41339-1.0;
                double t41363 = EcPhd_1*t41358;
                double t41364 = dirac(t41362);
                double t41365 = EcFld_2*t41341;
                double t41366 = EcFld_3*c*t41338;
                double t41367 = t41365+t41366+1.0;
                double t41368 = 1.0/t41347;
                double t41369 = EcPld_1*t41368;
                double t41370 = -t41339+1.0;
                double t41371 = heaviside(t41370);
                double t41372 = EcFhd_1*t41358;
                double t41373 = EcFhd_4*c*t41338;
                double t41374 = EcPhd_4*c*t41338;
                double t41375 = EcFhd_3*c*t41338*t41358;
                double t41376 = EcPhd_3*c*t41338*t41358;
                double t41377 = heaviside(t41362);
                double t41378 = 1.0/t41367;
                double t41379 = t41369-EcFld_1*t41378;
                double t41380 = t41369-t41352*t41355*t41379;
                double t41381 = c*c;
                double t41382 = 1.0/pow(t41336,2.0/3.0);
                double t41383 = Bg*c*t41381*t41356*1.0E4;
                double t41384 = Cg_4*t41381*t41382;
                double t41385 = Cg_3*c*t41338;
                double t41386 = t41383+t41384+t41385+1.0;
                double t41387 = 1.0/t41386;
                double t41388 = 1.0/pow(t41336,5.0/3.0);
                double t41389 = Bg*t41381*t41382;
                double t41390 = Cg_2*c*t41338;
                double t41391 = Cg_1+t41390+t41389;
                double t41392 = gamma_ab*2.0;
                double t41393 = gamma_aa+gamma_bb+t41392;
                double t41394 = 1.0/two_13;
                double t41395 = 1.0/pow(t41336,7.0/6.0);
                double t41396 = t41391*t41387;
                double t41397 = Cx+t41396;
                double t41398 = 1.0/t41397;
                double t41399 = sqrt(t41393);
                double t41401 = Cinf*Fg*Pg_1*t41395*t41398*t41399;
                double t41400 = exp(-t41401);
                double t41402 = Bg*t41381*t41388*(2.0/3.0);
                double t41403 = Cg_2*c*t41337*(1.0/3.0);
                double t41404 = t41402+t41403;
                double t41405 = t41404*t41387;
                double t41406 = 1.0/(t41336*t41336);
                double t41407 = Bg*c*t41406*t41381*1.0E4;
                double t41408 = Cg_4*t41381*t41388*(2.0/3.0);
                double t41409 = Cg_3*c*t41337*(1.0/3.0);
                double t41410 = t41407+t41408+t41409;
                double t41411 = 1.0/(t41386*t41386);
                double t41412 = t41405-t41410*t41411*t41391;
                v_rho_a[Q] += scale * t41371*(EcPhd_2+t41363+t41374+t41376+t41352*t41355*(EcFhd_2-EcPhd_2-t41363+t41372+t41373-t41374+t41375-t41376))+t41380*t41377+t41336*(t41377*(t41349-t41352*t41355*(t41349-EcFld_1*1.0/(t41367*t41367)*(EcFld_3*c*t41337*(1.0/3.0)+EcFld_2*c*t41340*t41337*(1.0/6.0))))-t41371*(t41360+t41361+t41357+t41359-t41352*t41355*(t41360+t41361+t41357+t41359-EcFhd_1*t41356*(1.0/3.0)-EcFhd_3*c*t41337*(1.0/3.0)-EcFhd_4*c*t41337*(1.0/3.0)-EcFhd_3*c*t41337*t41358*(1.0/3.0)))-c*t41380*t41337*t41364*(1.0/3.0)+c*t41337*t41364*(EcPhd_2+t41363+t41374+t41376+t41352*t41355*(EcFhd_2-EcPhd_2-t41363+t41372+t41373+t41375-EcPhd_4*c*t41338-EcPhd_3*c*t41338*t41358))*(1.0/3.0))-t41400*1.0/pow(t41336,7.0/3.0)*t41393*t41394*t41397*(4.0/3.0)-t41400*t41412*t41337*t41393*t41394+t41400*t41337*t41393*t41394*t41397*(Cinf*Fg*Pg_1*1.0/pow(t41336,1.3E1/6.0)*t41398*t41399*(7.0/6.0)-Cinf*Fg*Pg_1*t41412*t41395*1.0/(t41397*t41397)*t41399);
            }
            
            // v_rho_b
            if (deriv >= 1) {
                double t41414 = rho_a+rho_b;
                double t41415 = 1.0/pow(t41414,4.0/3.0);
                double t41416 = 1.0/pow(t41414,1.0/3.0);
                double t41417 = c*t41416;
                double t41418 = 1.0/sqrt(t41417);
                double t41419 = sqrt(t41417);
                double t41420 = EcPld_3*c*t41415*(1.0/3.0);
                double t41421 = EcPld_2*c*t41415*t41418*(1.0/6.0);
                double t41422 = t41420+t41421;
                double t41423 = EcPld_2*t41419;
                double t41424 = EcPld_3*c*t41416;
                double t41425 = t41423+t41424+1.0;
                double t41426 = 1.0/(t41425*t41425);
                double t41427 = EcPld_1*t41422*t41426;
                double t41428 = pow(2.0,1.0/3.0);
                double t41429 = t41428*2.0;
                double t41430 = t41429-2.0;
                double t41431 = two_13*2.0;
                double t41432 = t41431-2.0;
                double t41433 = 1.0/t41432;
                double t41434 = 1.0/t41414;
                double t41435 = EcPhd_1*t41434*(1.0/3.0);
                double t41436 = log(t41417);
                double t41437 = EcPhd_3*c*t41415*(1.0/3.0);
                double t41438 = EcPhd_4*c*t41415*(1.0/3.0);
                double t41439 = EcPhd_3*c*t41415*t41436*(1.0/3.0);
                double t41440 = t41417-1.0;
                double t41441 = EcPhd_1*t41436;
                double t41442 = dirac(t41440);
                double t41443 = EcFld_2*t41419;
                double t41444 = EcFld_3*c*t41416;
                double t41445 = t41443+t41444+1.0;
                double t41446 = 1.0/t41425;
                double t41447 = EcPld_1*t41446;
                double t41448 = -t41417+1.0;
                double t41449 = heaviside(t41448);
                double t41450 = EcFhd_1*t41436;
                double t41451 = EcFhd_4*c*t41416;
                double t41452 = EcPhd_4*c*t41416;
                double t41453 = EcFhd_3*c*t41416*t41436;
                double t41454 = EcPhd_3*c*t41416*t41436;
                double t41455 = heaviside(t41440);
                double t41456 = 1.0/t41445;
                double t41457 = t41447-EcFld_1*t41456;
                double t41458 = t41447-t41430*t41433*t41457;
                double t41459 = c*c;
                double t41460 = 1.0/pow(t41414,2.0/3.0);
                double t41461 = Bg*c*t41434*t41459*1.0E4;
                double t41462 = Cg_4*t41460*t41459;
                double t41463 = Cg_3*c*t41416;
                double t41464 = t41461+t41462+t41463+1.0;
                double t41465 = 1.0/t41464;
                double t41466 = 1.0/pow(t41414,5.0/3.0);
                double t41467 = Bg*t41460*t41459;
                double t41468 = Cg_2*c*t41416;
                double t41469 = Cg_1+t41467+t41468;
                double t41470 = gamma_ab*2.0;
                double t41471 = gamma_aa+gamma_bb+t41470;
                double t41472 = 1.0/two_13;
                double t41473 = 1.0/pow(t41414,7.0/6.0);
                double t41474 = t41465*t41469;
                double t41475 = Cx+t41474;
                double t41476 = 1.0/t41475;
                double t41477 = sqrt(t41471);
                double t41479 = Cinf*Fg*Pg_1*t41473*t41476*t41477;
                double t41478 = exp(-t41479);
                double t41480 = Bg*t41466*t41459*(2.0/3.0);
                double t41481 = Cg_2*c*t41415*(1.0/3.0);
                double t41482 = t41480+t41481;
                double t41483 = t41482*t41465;
                double t41484 = 1.0/(t41414*t41414);
                double t41485 = Bg*c*t41484*t41459*1.0E4;
                double t41486 = Cg_4*t41466*t41459*(2.0/3.0);
                double t41487 = Cg_3*c*t41415*(1.0/3.0);
                double t41488 = t41485+t41486+t41487;
                double t41489 = 1.0/(t41464*t41464);
                double t41490 = t41483-t41469*t41488*t41489;
                v_rho_b[Q] += scale * t41449*(EcPhd_2+t41441+t41452+t41454+t41430*t41433*(EcFhd_2-EcPhd_2-t41441+t41450+t41451-t41452+t41453-t41454))+t41455*t41458+t41414*(t41455*(t41427-t41430*t41433*(t41427-EcFld_1*1.0/(t41445*t41445)*(EcFld_3*c*t41415*(1.0/3.0)+EcFld_2*c*t41415*t41418*(1.0/6.0))))-t41449*(t41435+t41437+t41438+t41439-t41430*t41433*(t41435+t41437+t41438+t41439-EcFhd_1*t41434*(1.0/3.0)-EcFhd_3*c*t41415*(1.0/3.0)-EcFhd_4*c*t41415*(1.0/3.0)-EcFhd_3*c*t41415*t41436*(1.0/3.0)))-c*t41415*t41442*t41458*(1.0/3.0)+c*t41415*t41442*(EcPhd_2+t41441+t41452+t41454+t41430*t41433*(EcFhd_2-EcPhd_2-t41441+t41450+t41451+t41453-EcPhd_4*c*t41416-EcPhd_3*c*t41416*t41436))*(1.0/3.0))-1.0/pow(t41414,7.0/3.0)*t41471*t41472*t41475*t41478*(4.0/3.0)-t41415*t41471*t41472*t41490*t41478+t41415*t41471*t41472*t41475*t41478*(Cinf*Fg*Pg_1*1.0/pow(t41414,1.3E1/6.0)*t41476*t41477*(7.0/6.0)-Cinf*Fg*Pg_1*t41490*t41473*1.0/(t41475*t41475)*t41477);
            }
            
            // v_gamma_aa
            if (deriv >= 1) {
                double t41492 = rho_a+rho_b;
                double t41493 = c*c;
                double t41494 = 1.0/pow(t41492,2.0/3.0);
                double t41495 = 1.0/pow(t41492,1.0/3.0);
                double t41496 = Bg*t41493*t41494;
                double t41497 = Cg_2*c*t41495;
                double t41498 = Cg_1+t41496+t41497;
                double t41499 = 1.0/t41492;
                double t41500 = Bg*c*t41493*t41499*1.0E4;
                double t41501 = Cg_4*t41493*t41494;
                double t41502 = Cg_3*c*t41495;
                double t41503 = t41500+t41501+t41502+1.0;
                double t41504 = 1.0/t41503;
                double t41505 = t41504*t41498;
                double t41506 = Cx+t41505;
                double t41507 = 1.0/two_13;
                double t41508 = 1.0/pow(t41492,7.0/6.0);
                double t41509 = 1.0/t41506;
                double t41510 = gamma_ab*2.0;
                double t41511 = gamma_aa+gamma_bb+t41510;
                double t41512 = sqrt(t41511);
                double t41513 = exp(-Cinf*Fg*Pg_1*t41512*t41508*t41509);
                v_gamma_aa[Q] += scale * t41513*t41506*t41507*1.0/pow(t41492,4.0/3.0)-Cinf*Fg*Pg_1*t41512*t41513*t41507*1.0/pow(t41492,5.0/2.0)*(1.0/2.0);
            }
            
            // v_gamma_ab
            if (deriv >= 1) {
                double t41515 = rho_a+rho_b;
                double t41516 = c*c;
                double t41517 = 1.0/pow(t41515,2.0/3.0);
                double t41518 = 1.0/pow(t41515,1.0/3.0);
                double t41519 = Bg*t41516*t41517;
                double t41520 = Cg_2*c*t41518;
                double t41521 = Cg_1+t41520+t41519;
                double t41522 = 1.0/t41515;
                double t41523 = Bg*c*t41522*t41516*1.0E4;
                double t41524 = Cg_4*t41516*t41517;
                double t41525 = Cg_3*c*t41518;
                double t41526 = t41523+t41524+t41525+1.0;
                double t41527 = 1.0/t41526;
                double t41528 = t41521*t41527;
                double t41529 = Cx+t41528;
                double t41530 = 1.0/two_13;
                double t41531 = 1.0/pow(t41515,7.0/6.0);
                double t41532 = 1.0/t41529;
                double t41533 = gamma_ab*2.0;
                double t41534 = gamma_aa+gamma_bb+t41533;
                double t41535 = sqrt(t41534);
                double t41536 = exp(-Cinf*Fg*Pg_1*t41531*t41532*t41535);
                v_gamma_ab[Q] += scale * t41530*1.0/pow(t41515,4.0/3.0)*t41536*t41529*2.0-Cinf*Fg*Pg_1*t41530*1.0/pow(t41515,5.0/2.0)*t41535*t41536;
            }
            
            // v_gamma_bb
            if (deriv >= 1) {
                double t41538 = rho_a+rho_b;
                double t41539 = c*c;
                double t41540 = 1.0/pow(t41538,2.0/3.0);
                double t41541 = 1.0/pow(t41538,1.0/3.0);
                double t41542 = Bg*t41540*t41539;
                double t41543 = Cg_2*c*t41541;
                double t41544 = Cg_1+t41542+t41543;
                double t41545 = 1.0/t41538;
                double t41546 = Bg*c*t41545*t41539*1.0E4;
                double t41547 = Cg_4*t41540*t41539;
                double t41548 = Cg_3*c*t41541;
                double t41549 = t41546+t41547+t41548+1.0;
                double t41550 = 1.0/t41549;
                double t41551 = t41550*t41544;
                double t41552 = Cx+t41551;
                double t41553 = 1.0/two_13;
                double t41554 = 1.0/pow(t41538,7.0/6.0);
                double t41555 = 1.0/t41552;
                double t41556 = gamma_ab*2.0;
                double t41557 = gamma_aa+gamma_bb+t41556;
                double t41558 = sqrt(t41557);
                double t41559 = exp(-Cinf*Fg*Pg_1*t41554*t41555*t41558);
                v_gamma_bb[Q] += scale * t41552*t41553*1.0/pow(t41538,4.0/3.0)*t41559-Cinf*Fg*Pg_1*t41553*1.0/pow(t41538,5.0/2.0)*t41558*t41559*(1.0/2.0);
            }
            
            // v_rho_a_rho_a
            if (deriv >= 2) {
                double t41563 = rho_a+rho_b;
                double t41564 = 1.0/pow(t41563,4.0/3.0);
                double t41565 = 1.0/pow(t41563,1.0/3.0);
                double t41566 = c*t41565;
                double t41567 = 1.0/sqrt(t41566);
                double t41568 = sqrt(t41566);
                double t41569 = EcPld_3*c*t41564*(1.0/3.0);
                double t41570 = EcPld_2*c*t41564*t41567*(1.0/6.0);
                double t41571 = t41570+t41569;
                double t41572 = EcPld_2*t41568;
                double t41573 = EcPld_3*c*t41565;
                double t41574 = t41572+t41573+1.0;
                double t41575 = 1.0/(t41574*t41574);
                double t41576 = EcPld_1*t41571*t41575;
                double t41577 = t41566-1.0;
                double t41578 = heaviside(t41577);
                double t41579 = pow(2.0,1.0/3.0);
                double t41580 = t41579*2.0;
                double t41581 = t41580-2.0;
                double t41582 = two_13*2.0;
                double t41583 = t41582-2.0;
                double t41584 = 1.0/t41583;
                double t41585 = EcFld_3*c*t41564*(1.0/3.0);
                double t41586 = EcFld_2*c*t41564*t41567*(1.0/6.0);
                double t41587 = t41585+t41586;
                double t41588 = EcFld_2*t41568;
                double t41589 = EcFld_3*c*t41565;
                double t41590 = t41588+t41589+1.0;
                double t41591 = t41571*t41571;
                double t41592 = 1.0/(t41574*t41574*t41574);
                double t41593 = EcPld_1*t41591*t41592*2.0;
                double t41594 = 1.0/pow(t41563,7.0/3.0);
                double t41595 = 1.0/(t41590*t41590);
                double t41596 = c*c;
                double t41597 = 1.0/pow(t41563,8.0/3.0);
                double t41598 = 1.0/pow(t41566,3.0/2.0);
                double t41599 = EcPld_3*c*t41594*(4.0/9.0);
                double t41600 = EcPld_2*c*t41567*t41594*(2.0/9.0);
                double t41601 = t41600+t41599-EcPld_2*t41596*t41597*t41598*(1.0/3.6E1);
                double t41602 = EcPld_1*t41601*t41575;
                double t41603 = 1.0/(t41563*t41563);
                double t41604 = EcPhd_1*t41603*(1.0/3.0);
                double t41605 = log(t41566);
                double t41606 = EcPhd_3*c*t41594*(5.0/9.0);
                double t41607 = EcPhd_4*c*t41594*(4.0/9.0);
                double t41608 = EcPhd_3*c*t41605*t41594*(4.0/9.0);
                double t41609 = 1.0/t41574;
                double t41610 = EcPld_1*t41609;
                double t41611 = t41576-EcFld_1*t41595*t41587;
                double t41612 = t41576-t41611*t41581*t41584;
                double t41613 = dirac(t41577);
                double t41614 = EcPhd_1*t41605;
                double t41615 = 1.0/t41563;
                double t41616 = EcPhd_1*t41615*(1.0/3.0);
                double t41617 = EcPhd_3*c*t41564*(1.0/3.0);
                double t41618 = EcPhd_4*c*t41564*(1.0/3.0);
                double t41619 = EcPhd_3*c*t41605*t41564*(1.0/3.0);
                double t41620 = 1.0/t41590;
                double t41636 = EcFld_1*t41620;
                double t41621 = t41610-t41636;
                double t41637 = t41621*t41581*t41584;
                double t41622 = t41610-t41637;
                double t41623 = dirac(t41577,1.0);
                double t41624 = EcFhd_1*t41605;
                double t41625 = EcFhd_4*c*t41565;
                double t41626 = EcPhd_4*c*t41565;
                double t41627 = EcFhd_3*c*t41605*t41565;
                double t41628 = EcPhd_3*c*t41605*t41565;
                double t41629 = -t41566+1.0;
                double t41630 = heaviside(t41629);
                double t41631 = t41616+t41617+t41618+t41619-EcFhd_1*t41615*(1.0/3.0)-EcFhd_3*c*t41564*(1.0/3.0)-EcFhd_4*c*t41564*(1.0/3.0)-EcFhd_3*c*t41605*t41564*(1.0/3.0);
                double t41632 = t41616+t41617+t41618+t41619-t41631*t41581*t41584;
                double t41633 = EcFhd_2-EcPhd_2-t41614+t41624+t41625-t41626+t41627-t41628;
                double t41634 = t41633*t41581*t41584;
                double t41635 = EcPhd_2+t41614+t41634+t41626+t41628;
                double t41638 = 1.0/pow(t41563,2.0/3.0);
                double t41639 = Bg*c*t41615*t41596*1.0E4;
                double t41640 = Cg_4*t41638*t41596;
                double t41641 = Cg_3*c*t41565;
                double t41642 = t41640+t41641+t41639+1.0;
                double t41643 = 1.0/t41642;
                double t41644 = 1.0/pow(t41563,5.0/3.0);
                double t41645 = Bg*t41638*t41596;
                double t41646 = Cg_2*c*t41565;
                double t41647 = Cg_1+t41645+t41646;
                double t41648 = gamma_ab*2.0;
                double t41649 = gamma_aa+gamma_bb+t41648;
                double t41650 = 1.0/two_13;
                double t41651 = 1.0/pow(t41563,7.0/6.0);
                double t41652 = t41643*t41647;
                double t41653 = Cx+t41652;
                double t41654 = 1.0/t41653;
                double t41655 = sqrt(t41649);
                double t41657 = Cinf*Fg*Pg_1*t41651*t41654*t41655;
                double t41656 = exp(-t41657);
                double t41658 = Bg*t41644*t41596*(2.0/3.0);
                double t41659 = Cg_2*c*t41564*(1.0/3.0);
                double t41660 = t41658+t41659;
                double t41661 = Bg*c*t41603*t41596*1.0E4;
                double t41662 = Cg_4*t41644*t41596*(2.0/3.0);
                double t41663 = Cg_3*c*t41564*(1.0/3.0);
                double t41664 = t41661+t41662+t41663;
                double t41665 = 1.0/(t41642*t41642);
                double t41666 = t41660*t41643;
                double t41681 = t41664*t41647*t41665;
                double t41667 = -t41681+t41666;
                double t41668 = Bg*t41596*t41597*(1.0E1/9.0);
                double t41669 = Cg_2*c*t41594*(4.0/9.0);
                double t41670 = t41668+t41669;
                double t41671 = t41643*t41670;
                double t41672 = 1.0/(t41563*t41563*t41563);
                double t41673 = Bg*c*t41672*t41596*2.0E4;
                double t41674 = Cg_4*t41596*t41597*(1.0E1/9.0);
                double t41675 = Cg_3*c*t41594*(4.0/9.0);
                double t41676 = t41673+t41674+t41675;
                double t41677 = t41664*t41664;
                double t41678 = 1.0/(t41642*t41642*t41642);
                double t41679 = t41647*t41677*t41678*2.0;
                double t41680 = t41671+t41679-t41660*t41664*t41665*2.0-t41647*t41665*t41676;
                double t41682 = 1.0/(t41653*t41653);
                double t41683 = 1.0/pow(t41563,1.3E1/6.0);
                double t41684 = Cinf*Fg*Pg_1*t41654*t41655*t41683*(7.0/6.0);
                double t41686 = Cinf*Fg*Pg_1*t41651*t41655*t41682*t41667;
                double t41685 = t41684-t41686;
                v_rho_a_rho_a[Q] += scale * t41630*t41632*-2.0+t41612*t41578*2.0+t41563*(t41630*(t41604+t41606+t41607+t41608-t41581*t41584*(t41604+t41606+t41607+t41608-EcFhd_1*t41603*(1.0/3.0)-EcFhd_3*c*t41594*(5.0/9.0)-EcFhd_4*c*t41594*(4.0/9.0)-EcFhd_3*c*t41605*t41594*(4.0/9.0)))+t41578*(-t41602+t41593+t41581*t41584*(t41602-t41593+EcFld_1*1.0/(t41590*t41590*t41590)*(t41587*t41587)*2.0-EcFld_1*t41595*(EcFld_3*c*t41594*(4.0/9.0)-EcFld_2*t41596*t41597*t41598*(1.0/3.6E1)+EcFld_2*c*t41567*t41594*(2.0/9.0))))-c*t41612*t41613*t41564*(2.0/3.0)-c*t41613*t41632*t41564*(2.0/3.0)+c*t41613*t41622*t41594*(4.0/9.0)+t41622*t41623*t41596*t41597*(1.0/9.0)-t41623*t41635*t41596*t41597*(1.0/9.0)-c*t41613*t41594*(EcPhd_2+t41614+t41626+t41628+t41581*t41584*(EcFhd_2-EcPhd_2-t41614+t41624+t41625+t41627-EcPhd_4*c*t41565-EcPhd_3*c*t41605*t41565))*(4.0/9.0))-c*t41613*t41622*t41564*(2.0/3.0)+c*t41613*t41635*t41564*(2.0/3.0)+t41650*1.0/pow(t41563,1.0E1/3.0)*t41653*t41656*t41649*(2.8E1/9.0)+t41650*t41680*t41564*t41656*t41649+t41650*t41656*t41594*t41649*t41667*(8.0/3.0)-t41650*t41653*t41656*t41594*t41649*t41685*(8.0/3.0)-t41650*t41564*t41656*t41649*t41667*t41685*2.0+t41650*t41653*t41564*t41656*t41649*(t41685*t41685)-t41650*t41653*t41564*t41656*t41649*(Cinf*Fg*Pg_1*1.0/pow(t41563,1.9E1/6.0)*t41654*t41655*(9.1E1/3.6E1)-Cinf*Fg*Pg_1*t41651*t41680*t41655*t41682-Cinf*Fg*Pg_1*t41655*t41682*t41683*t41667*(7.0/3.0)+Cinf*Fg*Pg_1*t41651*1.0/(t41653*t41653*t41653)*t41655*(t41667*t41667)*2.0);
            }
            
            // v_rho_a_rho_b
            if (deriv >= 2) {
                double t41688 = rho_a+rho_b;
                double t41689 = 1.0/pow(t41688,4.0/3.0);
                double t41690 = 1.0/pow(t41688,1.0/3.0);
                double t41691 = c*t41690;
                double t41692 = 1.0/sqrt(t41691);
                double t41693 = sqrt(t41691);
                double t41694 = EcPld_3*c*t41689*(1.0/3.0);
                double t41695 = EcPld_2*c*t41692*t41689*(1.0/6.0);
                double t41696 = t41694+t41695;
                double t41697 = EcPld_2*t41693;
                double t41698 = EcPld_3*c*t41690;
                double t41699 = t41697+t41698+1.0;
                double t41700 = 1.0/(t41699*t41699);
                double t41701 = EcPld_1*t41700*t41696;
                double t41702 = t41691-1.0;
                double t41703 = heaviside(t41702);
                double t41704 = pow(2.0,1.0/3.0);
                double t41705 = t41704*2.0;
                double t41706 = t41705-2.0;
                double t41707 = two_13*2.0;
                double t41708 = t41707-2.0;
                double t41709 = 1.0/t41708;
                double t41710 = EcFld_3*c*t41689*(1.0/3.0);
                double t41711 = EcFld_2*c*t41692*t41689*(1.0/6.0);
                double t41712 = t41710+t41711;
                double t41713 = EcFld_2*t41693;
                double t41714 = EcFld_3*c*t41690;
                double t41715 = t41713+t41714+1.0;
                double t41716 = t41696*t41696;
                double t41717 = 1.0/(t41699*t41699*t41699);
                double t41718 = EcPld_1*t41716*t41717*2.0;
                double t41719 = 1.0/pow(t41688,7.0/3.0);
                double t41720 = 1.0/(t41715*t41715);
                double t41721 = c*c;
                double t41722 = 1.0/pow(t41688,8.0/3.0);
                double t41723 = 1.0/pow(t41691,3.0/2.0);
                double t41724 = EcPld_3*c*t41719*(4.0/9.0);
                double t41725 = EcPld_2*c*t41692*t41719*(2.0/9.0);
                double t41726 = t41724+t41725-EcPld_2*t41721*t41722*t41723*(1.0/3.6E1);
                double t41727 = EcPld_1*t41700*t41726;
                double t41728 = 1.0/(t41688*t41688);
                double t41729 = EcPhd_1*t41728*(1.0/3.0);
                double t41730 = log(t41691);
                double t41731 = EcPhd_3*c*t41719*(5.0/9.0);
                double t41732 = EcPhd_4*c*t41719*(4.0/9.0);
                double t41733 = EcPhd_3*c*t41730*t41719*(4.0/9.0);
                double t41734 = 1.0/t41699;
                double t41735 = EcPld_1*t41734;
                double t41736 = t41701-EcFld_1*t41720*t41712;
                double t41737 = t41701-t41706*t41709*t41736;
                double t41738 = dirac(t41702);
                double t41739 = EcPhd_1*t41730;
                double t41740 = 1.0/t41688;
                double t41741 = EcPhd_1*t41740*(1.0/3.0);
                double t41742 = EcPhd_3*c*t41689*(1.0/3.0);
                double t41743 = EcPhd_4*c*t41689*(1.0/3.0);
                double t41744 = EcPhd_3*c*t41730*t41689*(1.0/3.0);
                double t41745 = 1.0/t41715;
                double t41761 = EcFld_1*t41745;
                double t41746 = -t41761+t41735;
                double t41747 = t41735-t41706*t41709*t41746;
                double t41748 = dirac(t41702,1.0);
                double t41749 = EcFhd_1*t41730;
                double t41750 = EcFhd_4*c*t41690;
                double t41751 = EcPhd_4*c*t41690;
                double t41752 = EcFhd_3*c*t41730*t41690;
                double t41753 = EcPhd_3*c*t41730*t41690;
                double t41754 = EcFhd_2-EcPhd_2+t41750-t41751+t41752-t41753-t41739+t41749;
                double t41755 = t41706*t41709*t41754;
                double t41756 = EcPhd_2+t41751+t41753+t41755+t41739;
                double t41757 = -t41691+1.0;
                double t41758 = heaviside(t41757);
                double t41759 = t41741+t41742+t41743+t41744-EcFhd_1*t41740*(1.0/3.0)-EcFhd_3*c*t41689*(1.0/3.0)-EcFhd_4*c*t41689*(1.0/3.0)-EcFhd_3*c*t41730*t41689*(1.0/3.0);
                double t41760 = t41741+t41742+t41743+t41744-t41706*t41709*t41759;
                double t41762 = 1.0/pow(t41688,2.0/3.0);
                double t41763 = Bg*c*t41721*t41740*1.0E4;
                double t41764 = Cg_4*t41721*t41762;
                double t41765 = Cg_3*c*t41690;
                double t41766 = t41763+t41764+t41765+1.0;
                double t41767 = 1.0/t41766;
                double t41768 = 1.0/pow(t41688,5.0/3.0);
                double t41769 = Bg*t41721*t41762;
                double t41770 = Cg_2*c*t41690;
                double t41771 = Cg_1+t41770+t41769;
                double t41772 = gamma_ab*2.0;
                double t41773 = gamma_aa+gamma_bb+t41772;
                double t41774 = 1.0/two_13;
                double t41775 = 1.0/pow(t41688,7.0/6.0);
                double t41776 = t41771*t41767;
                double t41777 = Cx+t41776;
                double t41778 = 1.0/t41777;
                double t41779 = sqrt(t41773);
                double t41781 = Cinf*Fg*Pg_1*t41775*t41778*t41779;
                double t41780 = exp(-t41781);
                double t41782 = Bg*t41721*t41768*(2.0/3.0);
                double t41783 = Cg_2*c*t41689*(1.0/3.0);
                double t41784 = t41782+t41783;
                double t41785 = Bg*c*t41721*t41728*1.0E4;
                double t41786 = Cg_4*t41721*t41768*(2.0/3.0);
                double t41787 = Cg_3*c*t41689*(1.0/3.0);
                double t41788 = t41785+t41786+t41787;
                double t41789 = 1.0/(t41766*t41766);
                double t41790 = t41784*t41767;
                double t41805 = t41771*t41788*t41789;
                double t41791 = -t41805+t41790;
                double t41792 = Bg*t41721*t41722*(1.0E1/9.0);
                double t41793 = Cg_2*c*t41719*(4.0/9.0);
                double t41794 = t41792+t41793;
                double t41795 = t41767*t41794;
                double t41796 = 1.0/(t41688*t41688*t41688);
                double t41797 = Bg*c*t41721*t41796*2.0E4;
                double t41798 = Cg_4*t41721*t41722*(1.0E1/9.0);
                double t41799 = Cg_3*c*t41719*(4.0/9.0);
                double t41800 = t41797+t41798+t41799;
                double t41801 = t41788*t41788;
                double t41802 = 1.0/(t41766*t41766*t41766);
                double t41803 = t41801*t41802*t41771*2.0;
                double t41804 = t41803+t41795-t41800*t41771*t41789-t41784*t41788*t41789*2.0;
                double t41806 = 1.0/(t41777*t41777);
                double t41807 = 1.0/pow(t41688,1.3E1/6.0);
                double t41808 = Cinf*Fg*Pg_1*t41807*t41778*t41779*(7.0/6.0);
                double t41810 = Cinf*Fg*Pg_1*t41806*t41791*t41775*t41779;
                double t41809 = -t41810+t41808;
                v_rho_a_rho_b[Q] += scale * -t41688*(-t41758*(t41731+t41732+t41733+t41729-t41706*t41709*(t41731+t41732+t41733+t41729-EcFhd_1*t41728*(1.0/3.0)-EcFhd_3*c*t41719*(5.0/9.0)-EcFhd_4*c*t41719*(4.0/9.0)-EcFhd_3*c*t41730*t41719*(4.0/9.0)))+t41703*(-t41718+t41727+t41706*t41709*(t41718-t41727-EcFld_1*(t41712*t41712)*1.0/(t41715*t41715*t41715)*2.0+EcFld_1*t41720*(EcFld_3*c*t41719*(4.0/9.0)-EcFld_2*t41721*t41722*t41723*(1.0/3.6E1)+EcFld_2*c*t41692*t41719*(2.0/9.0))))-c*t41719*t41738*t41747*(4.0/9.0)+c*t41719*t41738*t41756*(4.0/9.0)+c*t41760*t41738*t41689*(2.0/3.0)+c*t41737*t41738*t41689*(2.0/3.0)-t41721*t41722*t41747*t41748*(1.0/9.0)+t41721*t41722*t41756*t41748*(1.0/9.0))+t41703*t41737*2.0-t41760*t41758*2.0+c*t41738*t41756*t41689*(2.0/3.0)-c*t41738*t41689*(t41735+t41706*t41709*(t41761-t41735))*(2.0/3.0)+t41780*t41773*t41774*t41777*1.0/pow(t41688,1.0E1/3.0)*(2.8E1/9.0)+t41780*t41719*t41773*t41791*t41774*(8.0/3.0)+t41804*t41780*t41773*t41774*t41689-t41780*t41719*t41773*t41809*t41774*t41777*(8.0/3.0)-t41780*t41773*t41791*t41809*t41774*t41689*2.0+t41780*t41773*(t41809*t41809)*t41774*t41777*t41689-t41780*t41773*t41774*t41777*t41689*(Cinf*Fg*Pg_1*1.0/pow(t41688,1.9E1/6.0)*t41778*t41779*(9.1E1/3.6E1)-Cinf*Fg*Pg_1*t41804*t41806*t41775*t41779-Cinf*Fg*Pg_1*t41806*t41807*t41791*t41779*(7.0/3.0)+Cinf*Fg*Pg_1*(t41791*t41791)*t41775*1.0/(t41777*t41777*t41777)*t41779*2.0);
            }
            
            // v_rho_b_rho_b
            if (deriv >= 2) {
                double t41812 = rho_a+rho_b;
                double t41813 = 1.0/pow(t41812,4.0/3.0);
                double t41814 = 1.0/pow(t41812,1.0/3.0);
                double t41815 = c*t41814;
                double t41816 = 1.0/sqrt(t41815);
                double t41817 = sqrt(t41815);
                double t41818 = EcPld_3*c*t41813*(1.0/3.0);
                double t41819 = EcPld_2*c*t41813*t41816*(1.0/6.0);
                double t41820 = t41818+t41819;
                double t41821 = EcPld_2*t41817;
                double t41822 = EcPld_3*c*t41814;
                double t41823 = t41821+t41822+1.0;
                double t41824 = 1.0/(t41823*t41823);
                double t41825 = EcPld_1*t41820*t41824;
                double t41826 = t41815-1.0;
                double t41827 = heaviside(t41826);
                double t41828 = pow(2.0,1.0/3.0);
                double t41829 = t41828*2.0;
                double t41830 = t41829-2.0;
                double t41831 = two_13*2.0;
                double t41832 = t41831-2.0;
                double t41833 = 1.0/t41832;
                double t41834 = EcFld_3*c*t41813*(1.0/3.0);
                double t41835 = EcFld_2*c*t41813*t41816*(1.0/6.0);
                double t41836 = t41834+t41835;
                double t41837 = EcFld_2*t41817;
                double t41838 = EcFld_3*c*t41814;
                double t41839 = t41837+t41838+1.0;
                double t41840 = t41820*t41820;
                double t41841 = 1.0/(t41823*t41823*t41823);
                double t41842 = EcPld_1*t41840*t41841*2.0;
                double t41843 = 1.0/pow(t41812,7.0/3.0);
                double t41844 = 1.0/(t41839*t41839);
                double t41845 = c*c;
                double t41846 = 1.0/pow(t41812,8.0/3.0);
                double t41847 = 1.0/pow(t41815,3.0/2.0);
                double t41848 = EcPld_3*c*t41843*(4.0/9.0);
                double t41849 = EcPld_2*c*t41816*t41843*(2.0/9.0);
                double t41850 = t41848+t41849-EcPld_2*t41845*t41846*t41847*(1.0/3.6E1);
                double t41851 = EcPld_1*t41850*t41824;
                double t41852 = 1.0/(t41812*t41812);
                double t41853 = EcPhd_1*t41852*(1.0/3.0);
                double t41854 = log(t41815);
                double t41855 = EcPhd_3*c*t41843*(5.0/9.0);
                double t41856 = EcPhd_4*c*t41843*(4.0/9.0);
                double t41857 = EcPhd_3*c*t41843*t41854*(4.0/9.0);
                double t41858 = 1.0/t41823;
                double t41859 = EcPld_1*t41858;
                double t41860 = t41825-EcFld_1*t41844*t41836;
                double t41861 = t41825-t41830*t41833*t41860;
                double t41862 = dirac(t41826);
                double t41863 = EcPhd_1*t41854;
                double t41864 = 1.0/t41812;
                double t41865 = EcPhd_1*t41864*(1.0/3.0);
                double t41866 = EcPhd_3*c*t41813*(1.0/3.0);
                double t41867 = EcPhd_4*c*t41813*(1.0/3.0);
                double t41868 = EcPhd_3*c*t41813*t41854*(1.0/3.0);
                double t41869 = 1.0/t41839;
                double t41885 = EcFld_1*t41869;
                double t41870 = -t41885+t41859;
                double t41871 = t41859-t41830*t41833*t41870;
                double t41872 = dirac(t41826,1.0);
                double t41873 = EcFhd_1*t41854;
                double t41874 = EcFhd_4*c*t41814;
                double t41875 = EcPhd_4*c*t41814;
                double t41876 = EcFhd_3*c*t41814*t41854;
                double t41877 = EcPhd_3*c*t41814*t41854;
                double t41878 = EcFhd_2-EcPhd_2-t41863+t41873+t41874-t41875+t41876-t41877;
                double t41879 = t41830*t41833*t41878;
                double t41880 = EcPhd_2+t41863+t41875+t41877+t41879;
                double t41881 = -t41815+1.0;
                double t41882 = heaviside(t41881);
                double t41883 = t41865+t41866+t41867+t41868-EcFhd_1*t41864*(1.0/3.0)-EcFhd_3*c*t41813*(1.0/3.0)-EcFhd_4*c*t41813*(1.0/3.0)-EcFhd_3*c*t41813*t41854*(1.0/3.0);
                double t41884 = t41865+t41866+t41867+t41868-t41830*t41833*t41883;
                double t41886 = 1.0/pow(t41812,2.0/3.0);
                double t41887 = Bg*c*t41845*t41864*1.0E4;
                double t41888 = Cg_4*t41845*t41886;
                double t41889 = Cg_3*c*t41814;
                double t41890 = t41887+t41888+t41889+1.0;
                double t41891 = 1.0/t41890;
                double t41892 = 1.0/pow(t41812,5.0/3.0);
                double t41893 = Bg*t41845*t41886;
                double t41894 = Cg_2*c*t41814;
                double t41895 = Cg_1+t41893+t41894;
                double t41896 = gamma_ab*2.0;
                double t41897 = gamma_aa+gamma_bb+t41896;
                double t41898 = 1.0/two_13;
                double t41899 = 1.0/pow(t41812,7.0/6.0);
                double t41900 = t41891*t41895;
                double t41901 = Cx+t41900;
                double t41902 = 1.0/t41901;
                double t41903 = sqrt(t41897);
                double t41905 = Cinf*Fg*Pg_1*t41902*t41903*t41899;
                double t41904 = exp(-t41905);
                double t41906 = Bg*t41845*t41892*(2.0/3.0);
                double t41907 = Cg_2*c*t41813*(1.0/3.0);
                double t41908 = t41906+t41907;
                double t41909 = Bg*c*t41852*t41845*1.0E4;
                double t41910 = Cg_4*t41845*t41892*(2.0/3.0);
                double t41911 = Cg_3*c*t41813*(1.0/3.0);
                double t41912 = t41910+t41911+t41909;
                double t41913 = 1.0/(t41890*t41890);
                double t41914 = t41908*t41891;
                double t41929 = t41912*t41913*t41895;
                double t41915 = t41914-t41929;
                double t41916 = Bg*t41845*t41846*(1.0E1/9.0);
                double t41917 = Cg_2*c*t41843*(4.0/9.0);
                double t41918 = t41916+t41917;
                double t41919 = t41891*t41918;
                double t41920 = 1.0/(t41812*t41812*t41812);
                double t41921 = Bg*c*t41920*t41845*2.0E4;
                double t41922 = Cg_4*t41845*t41846*(1.0E1/9.0);
                double t41923 = Cg_3*c*t41843*(4.0/9.0);
                double t41924 = t41921+t41922+t41923;
                double t41925 = t41912*t41912;
                double t41926 = 1.0/(t41890*t41890*t41890);
                double t41927 = t41925*t41926*t41895*2.0;
                double t41928 = t41927+t41919-t41912*t41913*t41908*2.0-t41913*t41924*t41895;
                double t41930 = 1.0/(t41901*t41901);
                double t41931 = 1.0/pow(t41812,1.3E1/6.0);
                double t41932 = Cinf*Fg*Pg_1*t41902*t41903*t41931*(7.0/6.0);
                double t41934 = Cinf*Fg*Pg_1*t41903*t41930*t41915*t41899;
                double t41933 = t41932-t41934;
                v_rho_b_rho_b[Q] += scale * -t41812*(-t41882*(t41853+t41855+t41856+t41857-t41830*t41833*(t41853+t41855+t41856+t41857-EcFhd_1*t41852*(1.0/3.0)-EcFhd_3*c*t41843*(5.0/9.0)-EcFhd_4*c*t41843*(4.0/9.0)-EcFhd_3*c*t41843*t41854*(4.0/9.0)))+t41827*(-t41842+t41851+t41830*t41833*(t41842-t41851-EcFld_1*(t41836*t41836)*1.0/(t41839*t41839*t41839)*2.0+EcFld_1*t41844*(EcFld_3*c*t41843*(4.0/9.0)-EcFld_2*t41845*t41846*t41847*(1.0/3.6E1)+EcFld_2*c*t41816*t41843*(2.0/9.0))))+c*t41813*t41861*t41862*(2.0/3.0)-c*t41843*t41862*t41871*(4.0/9.0)+c*t41843*t41862*t41880*(4.0/9.0)+c*t41813*t41862*t41884*(2.0/3.0)-t41871*t41845*t41872*t41846*(1.0/9.0)+t41880*t41845*t41872*t41846*(1.0/9.0))+t41861*t41827*2.0-t41882*t41884*2.0+c*t41813*t41862*t41880*(2.0/3.0)-c*t41813*t41862*(t41859+t41830*t41833*(t41885-t41859))*(2.0/3.0)+t41901*1.0/pow(t41812,1.0E1/3.0)*t41904*t41897*t41898*(2.8E1/9.0)+t41904*t41843*t41915*t41897*t41898*(8.0/3.0)+t41813*t41904*t41928*t41897*t41898-t41901*t41904*t41843*t41933*t41897*t41898*(8.0/3.0)-t41813*t41904*t41915*t41933*t41897*t41898*2.0+t41901*t41813*t41904*(t41933*t41933)*t41897*t41898-t41901*t41813*t41904*t41897*t41898*(Cinf*Fg*Pg_1*1.0/pow(t41812,1.9E1/6.0)*t41902*t41903*(9.1E1/3.6E1)-Cinf*Fg*Pg_1*t41903*t41930*t41931*t41915*(7.0/3.0)-Cinf*Fg*Pg_1*t41903*t41930*t41928*t41899+Cinf*Fg*Pg_1*1.0/(t41901*t41901*t41901)*t41903*(t41915*t41915)*t41899*2.0);
            }
            
            // v_gamma_aa_gamma_aa
            if (deriv >= 2) {
                double t42200 = rho_a+rho_b;
                double t42201 = c*c;
                double t42202 = 1.0/pow(t42200,2.0/3.0);
                double t42203 = 1.0/pow(t42200,1.0/3.0);
                double t42204 = Bg*t42201*t42202;
                double t42205 = Cg_2*c*t42203;
                double t42206 = Cg_1+t42204+t42205;
                double t42207 = 1.0/t42200;
                double t42208 = Bg*c*t42201*t42207*1.0E4;
                double t42209 = Cg_4*t42201*t42202;
                double t42210 = Cg_3*c*t42203;
                double t42211 = t42210+t42208+t42209+1.0;
                double t42212 = 1.0/t42211;
                double t42213 = t42212*t42206;
                double t42214 = Cx+t42213;
                double t42215 = 1.0/t42214;
                double t42216 = 1.0/two_13;
                double t42217 = 1.0/pow(t42200,7.0/6.0);
                double t42218 = gamma_ab*2.0;
                double t42219 = gamma_aa+gamma_bb+t42218;
                double t42220 = sqrt(t42219);
                double t42221 = exp(-Cinf*Fg*Pg_1*t42220*t42215*t42217);
                v_gamma_aa_gamma_aa[Q] += scale * (Cinf*Cinf)*(Fg*Fg)*(Pg_1*Pg_1)*1.0/pow(t42200,1.1E1/3.0)*t42221*t42215*t42216*(1.0/4.0)-Cinf*Fg*Pg_1*1.0/pow(t42200,5.0/2.0)*t42221*t42216*1.0/sqrt(t42219)*(3.0/4.0);
            }
            
            // v_gamma_aa_gamma_ab
            if (deriv >= 2) {
                double t42223 = rho_a+rho_b;
                double t42224 = c*c;
                double t42225 = 1.0/pow(t42223,2.0/3.0);
                double t42226 = 1.0/pow(t42223,1.0/3.0);
                double t42227 = Bg*t42224*t42225;
                double t42228 = Cg_2*c*t42226;
                double t42229 = Cg_1+t42227+t42228;
                double t42230 = 1.0/t42223;
                double t42231 = Bg*c*t42230*t42224*1.0E4;
                double t42232 = Cg_4*t42224*t42225;
                double t42233 = Cg_3*c*t42226;
                double t42234 = t42231+t42232+t42233+1.0;
                double t42235 = 1.0/t42234;
                double t42236 = t42235*t42229;
                double t42237 = Cx+t42236;
                double t42238 = 1.0/t42237;
                double t42239 = 1.0/two_13;
                double t42240 = 1.0/pow(t42223,7.0/6.0);
                double t42241 = gamma_ab*2.0;
                double t42242 = gamma_aa+gamma_bb+t42241;
                double t42243 = sqrt(t42242);
                double t42244 = exp(-Cinf*Fg*Pg_1*t42240*t42243*t42238);
                v_gamma_aa_gamma_ab[Q] += scale * (Cinf*Cinf)*(Fg*Fg)*(Pg_1*Pg_1)*1.0/pow(t42223,1.1E1/3.0)*t42244*t42238*t42239*(1.0/2.0)-Cinf*Fg*Pg_1*1.0/pow(t42223,5.0/2.0)*1.0/sqrt(t42242)*t42244*t42239*(3.0/2.0);
            }
            
            // v_gamma_aa_gamma_bb
            if (deriv >= 2) {
                double t42246 = rho_a+rho_b;
                double t42247 = c*c;
                double t42248 = 1.0/pow(t42246,2.0/3.0);
                double t42249 = 1.0/pow(t42246,1.0/3.0);
                double t42250 = Bg*t42247*t42248;
                double t42251 = Cg_2*c*t42249;
                double t42252 = Cg_1+t42250+t42251;
                double t42253 = 1.0/t42246;
                double t42254 = Bg*c*t42253*t42247*1.0E4;
                double t42255 = Cg_4*t42247*t42248;
                double t42256 = Cg_3*c*t42249;
                double t42257 = t42254+t42255+t42256+1.0;
                double t42258 = 1.0/t42257;
                double t42259 = t42252*t42258;
                double t42260 = Cx+t42259;
                double t42261 = 1.0/t42260;
                double t42262 = 1.0/two_13;
                double t42263 = 1.0/pow(t42246,7.0/6.0);
                double t42264 = gamma_ab*2.0;
                double t42265 = gamma_aa+gamma_bb+t42264;
                double t42266 = sqrt(t42265);
                double t42267 = exp(-Cinf*Fg*Pg_1*t42261*t42263*t42266);
                v_gamma_aa_gamma_bb[Q] += scale * (Cinf*Cinf)*(Fg*Fg)*(Pg_1*Pg_1)*t42261*t42262*1.0/pow(t42246,1.1E1/3.0)*t42267*(1.0/4.0)-Cinf*Fg*Pg_1*t42262*1.0/pow(t42246,5.0/2.0)*1.0/sqrt(t42265)*t42267*(3.0/4.0);
            }
            
            // v_gamma_ab_gamma_ab
            if (deriv >= 2) {
                double t42269 = rho_a+rho_b;
                double t42270 = c*c;
                double t42271 = 1.0/pow(t42269,2.0/3.0);
                double t42272 = 1.0/pow(t42269,1.0/3.0);
                double t42273 = Bg*t42270*t42271;
                double t42274 = Cg_2*c*t42272;
                double t42275 = Cg_1+t42273+t42274;
                double t42276 = 1.0/t42269;
                double t42277 = Bg*c*t42270*t42276*1.0E4;
                double t42278 = Cg_4*t42270*t42271;
                double t42279 = Cg_3*c*t42272;
                double t42280 = t42277+t42278+t42279+1.0;
                double t42281 = 1.0/t42280;
                double t42282 = t42281*t42275;
                double t42283 = Cx+t42282;
                double t42284 = 1.0/t42283;
                double t42285 = 1.0/two_13;
                double t42286 = 1.0/pow(t42269,7.0/6.0);
                double t42287 = gamma_ab*2.0;
                double t42288 = gamma_aa+gamma_bb+t42287;
                double t42289 = sqrt(t42288);
                double t42290 = exp(-Cinf*Fg*Pg_1*t42284*t42286*t42289);
                v_gamma_ab_gamma_ab[Q] += scale * (Cinf*Cinf)*(Fg*Fg)*(Pg_1*Pg_1)*t42290*t42284*t42285*1.0/pow(t42269,1.1E1/3.0)-Cinf*Fg*Pg_1*t42290*t42285*1.0/pow(t42269,5.0/2.0)*1.0/sqrt(t42288)*3.0;
            }
            
            // v_gamma_ab_gamma_bb
            if (deriv >= 2) {
                double t42292 = rho_a+rho_b;
                double t42293 = c*c;
                double t42294 = 1.0/pow(t42292,2.0/3.0);
                double t42295 = 1.0/pow(t42292,1.0/3.0);
                double t42296 = Bg*t42293*t42294;
                double t42297 = Cg_2*c*t42295;
                double t42298 = Cg_1+t42296+t42297;
                double t42299 = 1.0/t42292;
                double t42300 = Bg*c*t42293*t42299*1.0E4;
                double t42301 = Cg_4*t42293*t42294;
                double t42302 = Cg_3*c*t42295;
                double t42303 = t42300+t42301+t42302+1.0;
                double t42304 = 1.0/t42303;
                double t42305 = t42304*t42298;
                double t42306 = Cx+t42305;
                double t42307 = 1.0/t42306;
                double t42308 = 1.0/two_13;
                double t42309 = 1.0/pow(t42292,7.0/6.0);
                double t42310 = gamma_ab*2.0;
                double t42311 = gamma_aa+gamma_bb+t42310;
                double t42312 = sqrt(t42311);
                double t42313 = exp(-Cinf*Fg*Pg_1*t42312*t42307*t42309);
                v_gamma_ab_gamma_bb[Q] += scale * (Cinf*Cinf)*(Fg*Fg)*(Pg_1*Pg_1)*t42313*t42307*t42308*1.0/pow(t42292,1.1E1/3.0)*(1.0/2.0)-Cinf*Fg*Pg_1*1.0/sqrt(t42311)*t42313*t42308*1.0/pow(t42292,5.0/2.0)*(3.0/2.0);
            }
            
            // v_gamma_bb_gamma_bb
            if (deriv >= 2) {
                double t42315 = rho_a+rho_b;
                double t42316 = c*c;
                double t42317 = 1.0/pow(t42315,2.0/3.0);
                double t42318 = 1.0/pow(t42315,1.0/3.0);
                double t42319 = Bg*t42316*t42317;
                double t42320 = Cg_2*c*t42318;
                double t42321 = Cg_1+t42320+t42319;
                double t42322 = 1.0/t42315;
                double t42323 = Bg*c*t42322*t42316*1.0E4;
                double t42324 = Cg_4*t42316*t42317;
                double t42325 = Cg_3*c*t42318;
                double t42326 = t42323+t42324+t42325+1.0;
                double t42327 = 1.0/t42326;
                double t42328 = t42321*t42327;
                double t42329 = Cx+t42328;
                double t42330 = 1.0/t42329;
                double t42331 = 1.0/two_13;
                double t42332 = 1.0/pow(t42315,7.0/6.0);
                double t42333 = gamma_ab*2.0;
                double t42334 = gamma_aa+gamma_bb+t42333;
                double t42335 = sqrt(t42334);
                double t42336 = exp(-Cinf*Fg*Pg_1*t42330*t42332*t42335);
                v_gamma_bb_gamma_bb[Q] += scale * (Cinf*Cinf)*(Fg*Fg)*(Pg_1*Pg_1)*t42330*t42331*1.0/pow(t42315,1.1E1/3.0)*t42336*(1.0/4.0)-Cinf*Fg*Pg_1*t42331*1.0/pow(t42315,5.0/2.0)*1.0/sqrt(t42334)*t42336*(3.0/4.0);
            }
            
            // v_rho_a_gamma_aa
            if (deriv >= 2) {
                double t41936 = rho_a+rho_b;
                double t41937 = c*c;
                double t41938 = 1.0/pow(t41936,2.0/3.0);
                double t41939 = 1.0/pow(t41936,1.0/3.0);
                double t41940 = 1.0/pow(t41936,4.0/3.0);
                double t41941 = 1.0/t41936;
                double t41942 = Bg*c*t41941*t41937*1.0E4;
                double t41943 = Cg_4*t41937*t41938;
                double t41944 = Cg_3*c*t41939;
                double t41945 = t41942+t41943+t41944+1.0;
                double t41946 = 1.0/t41945;
                double t41947 = 1.0/pow(t41936,5.0/3.0);
                double t41948 = Bg*t41937*t41938;
                double t41949 = Cg_2*c*t41939;
                double t41950 = Cg_1+t41948+t41949;
                double t41951 = 1.0/two_13;
                double t41952 = 1.0/pow(t41936,7.0/6.0);
                double t41953 = t41950*t41946;
                double t41954 = Cx+t41953;
                double t41955 = 1.0/t41954;
                double t41956 = gamma_ab*2.0;
                double t41957 = gamma_aa+gamma_bb+t41956;
                double t41958 = sqrt(t41957);
                double t41960 = Cinf*Fg*Pg_1*t41952*t41955*t41958;
                double t41959 = exp(-t41960);
                double t41961 = Bg*t41937*t41947*(2.0/3.0);
                double t41962 = Cg_2*c*t41940*(1.0/3.0);
                double t41963 = t41961+t41962;
                double t41964 = t41963*t41946;
                double t41965 = 1.0/(t41936*t41936);
                double t41966 = Bg*c*t41937*t41965*1.0E4;
                double t41967 = Cg_4*t41937*t41947*(2.0/3.0);
                double t41968 = Cg_3*c*t41940*(1.0/3.0);
                double t41969 = t41966+t41967+t41968;
                double t41970 = 1.0/(t41945*t41945);
                double t41973 = t41950*t41970*t41969;
                double t41971 = t41964-t41973;
                double t41972 = 1.0/pow(t41936,1.3E1/6.0);
                double t41974 = 1.0/(t41954*t41954);
                double t41975 = 1.0/sqrt(t41957);
                double t41976 = Cinf*Fg*Pg_1*t41972*t41955*t41958*(7.0/6.0);
                double t41977 = t41976-Cinf*Fg*Pg_1*t41952*t41971*t41974*t41958;
                double t41978 = 1.0/pow(t41936,5.0/2.0);
                v_rho_a_gamma_aa[Q] += scale * -t41940*t41951*t41971*t41959-t41951*1.0/pow(t41936,7.0/3.0)*t41954*t41959*(4.0/3.0)+t41940*t41951*t41954*t41959*t41977+t41940*t41951*t41954*t41957*t41959*(Cinf*Fg*Pg_1*t41972*t41955*t41975*(7.0/1.2E1)-Cinf*Fg*Pg_1*t41952*t41971*t41974*t41975*(1.0/2.0))+Cinf*Fg*Pg_1*t41951*1.0/pow(t41936,7.0/2.0)*t41958*t41959*(2.0/3.0)-Cinf*Fg*Pg_1*t41951*t41958*t41959*t41977*t41978*(1.0/2.0)+Cinf*Fg*Pg_1*t41951*t41971*t41955*t41958*t41959*t41978*(1.0/2.0);
            }
            
            // v_rho_a_gamma_ab
            if (deriv >= 2) {
                double t41980 = rho_a+rho_b;
                double t41981 = c*c;
                double t41982 = 1.0/pow(t41980,2.0/3.0);
                double t41983 = 1.0/pow(t41980,1.0/3.0);
                double t41984 = 1.0/pow(t41980,4.0/3.0);
                double t41985 = 1.0/t41980;
                double t41986 = Bg*c*t41981*t41985*1.0E4;
                double t41987 = Cg_4*t41981*t41982;
                double t41988 = Cg_3*c*t41983;
                double t41989 = t41986+t41987+t41988+1.0;
                double t41990 = 1.0/t41989;
                double t41991 = 1.0/pow(t41980,5.0/3.0);
                double t41992 = Bg*t41981*t41982;
                double t41993 = Cg_2*c*t41983;
                double t41994 = Cg_1+t41992+t41993;
                double t41995 = 1.0/two_13;
                double t41996 = 1.0/pow(t41980,7.0/6.0);
                double t41997 = t41990*t41994;
                double t41998 = Cx+t41997;
                double t41999 = 1.0/t41998;
                double t42000 = gamma_ab*2.0;
                double t42001 = gamma_aa+gamma_bb+t42000;
                double t42002 = sqrt(t42001);
                double t42004 = Cinf*Fg*Pg_1*t41996*t41999*t42002;
                double t42003 = exp(-t42004);
                double t42005 = Bg*t41981*t41991*(2.0/3.0);
                double t42006 = Cg_2*c*t41984*(1.0/3.0);
                double t42007 = t42005+t42006;
                double t42008 = t41990*t42007;
                double t42009 = 1.0/(t41980*t41980);
                double t42010 = Bg*c*t41981*t42009*1.0E4;
                double t42011 = Cg_4*t41981*t41991*(2.0/3.0);
                double t42012 = Cg_3*c*t41984*(1.0/3.0);
                double t42013 = t42010+t42011+t42012;
                double t42014 = 1.0/(t41989*t41989);
                double t42017 = t41994*t42013*t42014;
                double t42015 = t42008-t42017;
                double t42016 = 1.0/pow(t41980,1.3E1/6.0);
                double t42018 = 1.0/(t41998*t41998);
                double t42019 = 1.0/sqrt(t42001);
                double t42020 = Cinf*Fg*Pg_1*t41999*t42002*t42016*(7.0/6.0);
                double t42021 = t42020-Cinf*Fg*Pg_1*t41996*t42002*t42015*t42018;
                double t42022 = 1.0/pow(t41980,5.0/2.0);
                v_rho_a_gamma_ab[Q] += scale * t41984*t41995*t42003*t42015*-2.0-1.0/pow(t41980,7.0/3.0)*t41995*t41998*t42003*(8.0/3.0)+t41984*t41995*t41998*t42003*t42021*2.0+t41984*t41995*t41998*t42001*t42003*(Cinf*Fg*Pg_1*t41999*t42016*t42019*(7.0/6.0)-Cinf*Fg*Pg_1*t41996*t42015*t42018*t42019)+Cinf*Fg*Pg_1*1.0/pow(t41980,7.0/2.0)*t41995*t42002*t42003*(4.0/3.0)-Cinf*Fg*Pg_1*t41995*t42002*t42003*t42021*t42022+Cinf*Fg*Pg_1*t41995*t41999*t42002*t42003*t42022*t42015;
            }
            
            // v_rho_a_gamma_bb
            if (deriv >= 2) {
                double t42024 = rho_a+rho_b;
                double t42025 = c*c;
                double t42026 = 1.0/pow(t42024,2.0/3.0);
                double t42027 = 1.0/pow(t42024,1.0/3.0);
                double t42028 = 1.0/pow(t42024,4.0/3.0);
                double t42029 = 1.0/t42024;
                double t42030 = Bg*c*t42025*t42029*1.0E4;
                double t42031 = Cg_4*t42025*t42026;
                double t42032 = Cg_3*c*t42027;
                double t42033 = t42030+t42031+t42032+1.0;
                double t42034 = 1.0/t42033;
                double t42035 = 1.0/pow(t42024,5.0/3.0);
                double t42036 = Bg*t42025*t42026;
                double t42037 = Cg_2*c*t42027;
                double t42038 = Cg_1+t42036+t42037;
                double t42039 = 1.0/two_13;
                double t42040 = 1.0/pow(t42024,7.0/6.0);
                double t42041 = t42034*t42038;
                double t42042 = Cx+t42041;
                double t42043 = 1.0/t42042;
                double t42044 = gamma_ab*2.0;
                double t42045 = gamma_aa+gamma_bb+t42044;
                double t42046 = sqrt(t42045);
                double t42048 = Cinf*Fg*Pg_1*t42040*t42043*t42046;
                double t42047 = exp(-t42048);
                double t42049 = Bg*t42025*t42035*(2.0/3.0);
                double t42050 = Cg_2*c*t42028*(1.0/3.0);
                double t42051 = t42050+t42049;
                double t42052 = t42051*t42034;
                double t42053 = 1.0/(t42024*t42024);
                double t42054 = Bg*c*t42025*t42053*1.0E4;
                double t42055 = Cg_4*t42025*t42035*(2.0/3.0);
                double t42056 = Cg_3*c*t42028*(1.0/3.0);
                double t42057 = t42054+t42055+t42056;
                double t42058 = 1.0/(t42033*t42033);
                double t42061 = t42038*t42057*t42058;
                double t42059 = t42052-t42061;
                double t42060 = 1.0/pow(t42024,1.3E1/6.0);
                double t42062 = 1.0/(t42042*t42042);
                double t42063 = 1.0/sqrt(t42045);
                double t42064 = Cinf*Fg*Pg_1*t42060*t42043*t42046*(7.0/6.0);
                double t42065 = t42064-Cinf*Fg*Pg_1*t42040*t42062*t42046*t42059;
                double t42066 = 1.0/pow(t42024,5.0/2.0);
                v_rho_a_gamma_bb[Q] += scale * -t42028*t42047*t42039*t42059-1.0/pow(t42024,7.0/3.0)*t42042*t42047*t42039*(4.0/3.0)+t42042*t42028*t42047*t42065*t42039+t42042*t42045*t42028*t42047*t42039*(Cinf*Fg*Pg_1*t42060*t42043*t42063*(7.0/1.2E1)-Cinf*Fg*Pg_1*t42040*t42062*t42063*t42059*(1.0/2.0))+Cinf*Fg*Pg_1*1.0/pow(t42024,7.0/2.0)*t42046*t42047*t42039*(2.0/3.0)-Cinf*Fg*Pg_1*t42046*t42047*t42065*t42039*t42066*(1.0/2.0)+Cinf*Fg*Pg_1*t42043*t42046*t42047*t42039*t42066*t42059*(1.0/2.0);
            }
            
            // v_rho_b_gamma_aa
            if (deriv >= 2) {
                double t42068 = rho_a+rho_b;
                double t42069 = c*c;
                double t42070 = 1.0/pow(t42068,2.0/3.0);
                double t42071 = 1.0/pow(t42068,1.0/3.0);
                double t42072 = 1.0/pow(t42068,4.0/3.0);
                double t42073 = 1.0/t42068;
                double t42074 = Bg*c*t42073*t42069*1.0E4;
                double t42075 = Cg_4*t42070*t42069;
                double t42076 = Cg_3*c*t42071;
                double t42077 = t42074+t42075+t42076+1.0;
                double t42078 = 1.0/t42077;
                double t42079 = 1.0/pow(t42068,5.0/3.0);
                double t42080 = Bg*t42070*t42069;
                double t42081 = Cg_2*c*t42071;
                double t42082 = Cg_1+t42080+t42081;
                double t42083 = 1.0/two_13;
                double t42084 = 1.0/pow(t42068,7.0/6.0);
                double t42085 = t42082*t42078;
                double t42086 = Cx+t42085;
                double t42087 = 1.0/t42086;
                double t42088 = gamma_ab*2.0;
                double t42089 = gamma_aa+gamma_bb+t42088;
                double t42090 = sqrt(t42089);
                double t42092 = Cinf*Fg*Pg_1*t42090*t42084*t42087;
                double t42091 = exp(-t42092);
                double t42093 = Bg*t42069*t42079*(2.0/3.0);
                double t42094 = Cg_2*c*t42072*(1.0/3.0);
                double t42095 = t42093+t42094;
                double t42096 = t42095*t42078;
                double t42097 = 1.0/(t42068*t42068);
                double t42098 = Bg*c*t42069*t42097*1.0E4;
                double t42099 = Cg_4*t42069*t42079*(2.0/3.0);
                double t42100 = Cg_3*c*t42072*(1.0/3.0);
                double t42101 = t42100+t42098+t42099;
                double t42102 = 1.0/(t42077*t42077);
                double t42105 = t42101*t42102*t42082;
                double t42103 = -t42105+t42096;
                double t42104 = 1.0/pow(t42068,1.3E1/6.0);
                double t42106 = 1.0/(t42086*t42086);
                double t42107 = 1.0/sqrt(t42089);
                double t42108 = Cinf*Fg*Pg_1*t42104*t42090*t42087*(7.0/6.0);
                double t42109 = t42108-Cinf*Fg*Pg_1*t42103*t42106*t42090*t42084;
                double t42110 = 1.0/pow(t42068,5.0/2.0);
                v_rho_b_gamma_aa[Q] += scale * -t42103*t42072*t42091*t42083-t42091*t42083*1.0/pow(t42068,7.0/3.0)*t42086*(4.0/3.0)+t42072*t42091*t42109*t42083*t42086+t42072*t42091*t42083*t42086*t42089*(Cinf*Fg*Pg_1*t42104*t42107*t42087*(7.0/1.2E1)-Cinf*Fg*Pg_1*t42103*t42106*t42107*t42084*(1.0/2.0))+Cinf*Fg*Pg_1*t42090*t42091*t42083*1.0/pow(t42068,7.0/2.0)*(2.0/3.0)-Cinf*Fg*Pg_1*t42110*t42090*t42091*t42109*t42083*(1.0/2.0)+Cinf*Fg*Pg_1*t42110*t42103*t42090*t42091*t42083*t42087*(1.0/2.0);
            }
            
            // v_rho_b_gamma_ab
            if (deriv >= 2) {
                double t42112 = rho_a+rho_b;
                double t42113 = c*c;
                double t42114 = 1.0/pow(t42112,2.0/3.0);
                double t42115 = 1.0/pow(t42112,1.0/3.0);
                double t42116 = 1.0/pow(t42112,4.0/3.0);
                double t42117 = 1.0/t42112;
                double t42118 = Bg*c*t42113*t42117*1.0E4;
                double t42119 = Cg_4*t42113*t42114;
                double t42120 = Cg_3*c*t42115;
                double t42121 = t42120+t42118+t42119+1.0;
                double t42122 = 1.0/t42121;
                double t42123 = 1.0/pow(t42112,5.0/3.0);
                double t42124 = Bg*t42113*t42114;
                double t42125 = Cg_2*c*t42115;
                double t42126 = Cg_1+t42124+t42125;
                double t42127 = 1.0/two_13;
                double t42128 = 1.0/pow(t42112,7.0/6.0);
                double t42129 = t42122*t42126;
                double t42130 = Cx+t42129;
                double t42131 = 1.0/t42130;
                double t42132 = gamma_ab*2.0;
                double t42133 = gamma_aa+gamma_bb+t42132;
                double t42134 = sqrt(t42133);
                double t42136 = Cinf*Fg*Pg_1*t42131*t42134*t42128;
                double t42135 = exp(-t42136);
                double t42137 = Bg*t42113*t42123*(2.0/3.0);
                double t42138 = Cg_2*c*t42116*(1.0/3.0);
                double t42139 = t42137+t42138;
                double t42140 = t42122*t42139;
                double t42141 = 1.0/(t42112*t42112);
                double t42142 = Bg*c*t42113*t42141*1.0E4;
                double t42143 = Cg_4*t42113*t42123*(2.0/3.0);
                double t42144 = Cg_3*c*t42116*(1.0/3.0);
                double t42145 = t42142+t42143+t42144;
                double t42146 = 1.0/(t42121*t42121);
                double t42149 = t42126*t42145*t42146;
                double t42147 = t42140-t42149;
                double t42148 = 1.0/pow(t42112,1.3E1/6.0);
                double t42150 = 1.0/(t42130*t42130);
                double t42151 = 1.0/sqrt(t42133);
                double t42152 = Cinf*Fg*Pg_1*t42131*t42134*t42148*(7.0/6.0);
                double t42153 = t42152-Cinf*Fg*Pg_1*t42150*t42134*t42128*t42147;
                double t42154 = 1.0/pow(t42112,5.0/2.0);
                v_rho_b_gamma_ab[Q] += scale * t42116*t42135*t42127*t42147*-2.0-1.0/pow(t42112,7.0/3.0)*t42130*t42135*t42127*(8.0/3.0)+t42130*t42116*t42135*t42153*t42127*2.0+t42130*t42133*t42116*t42135*t42127*(Cinf*Fg*Pg_1*t42131*t42151*t42148*(7.0/6.0)-Cinf*Fg*Pg_1*t42150*t42151*t42128*t42147)+Cinf*Fg*Pg_1*1.0/pow(t42112,7.0/2.0)*t42134*t42135*t42127*(4.0/3.0)-Cinf*Fg*Pg_1*t42134*t42135*t42153*t42127*t42154+Cinf*Fg*Pg_1*t42131*t42134*t42135*t42127*t42154*t42147;
            }
            
            // v_rho_b_gamma_bb
            if (deriv >= 2) {
                double t42156 = rho_a+rho_b;
                double t42157 = c*c;
                double t42158 = 1.0/pow(t42156,2.0/3.0);
                double t42159 = 1.0/pow(t42156,1.0/3.0);
                double t42160 = 1.0/pow(t42156,4.0/3.0);
                double t42161 = 1.0/t42156;
                double t42162 = Bg*c*t42161*t42157*1.0E4;
                double t42163 = Cg_4*t42157*t42158;
                double t42164 = Cg_3*c*t42159;
                double t42165 = t42162+t42163+t42164+1.0;
                double t42166 = 1.0/t42165;
                double t42167 = 1.0/pow(t42156,5.0/3.0);
                double t42168 = Bg*t42157*t42158;
                double t42169 = Cg_2*c*t42159;
                double t42170 = Cg_1+t42168+t42169;
                double t42171 = 1.0/two_13;
                double t42172 = 1.0/pow(t42156,7.0/6.0);
                double t42173 = t42170*t42166;
                double t42174 = Cx+t42173;
                double t42175 = 1.0/t42174;
                double t42176 = gamma_ab*2.0;
                double t42177 = gamma_aa+gamma_bb+t42176;
                double t42178 = sqrt(t42177);
                double t42180 = Cinf*Fg*Pg_1*t42172*t42175*t42178;
                double t42179 = exp(-t42180);
                double t42181 = Bg*t42157*t42167*(2.0/3.0);
                double t42182 = Cg_2*c*t42160*(1.0/3.0);
                double t42183 = t42181+t42182;
                double t42184 = t42183*t42166;
                double t42185 = 1.0/(t42156*t42156);
                double t42186 = Bg*c*t42157*t42185*1.0E4;
                double t42187 = Cg_4*t42157*t42167*(2.0/3.0);
                double t42188 = Cg_3*c*t42160*(1.0/3.0);
                double t42189 = t42186+t42187+t42188;
                double t42190 = 1.0/(t42165*t42165);
                double t42193 = t42170*t42190*t42189;
                double t42191 = t42184-t42193;
                double t42192 = 1.0/pow(t42156,1.3E1/6.0);
                double t42194 = 1.0/(t42174*t42174);
                double t42195 = 1.0/sqrt(t42177);
                double t42196 = Cinf*Fg*Pg_1*t42192*t42175*t42178*(7.0/6.0);
                double t42197 = t42196-Cinf*Fg*Pg_1*t42172*t42191*t42194*t42178;
                double t42198 = 1.0/pow(t42156,5.0/2.0);
                v_rho_b_gamma_bb[Q] += scale * -t42160*t42171*t42191*t42179-t42171*1.0/pow(t42156,7.0/3.0)*t42174*t42179*(4.0/3.0)+t42160*t42171*t42174*t42179*t42197+t42160*t42171*t42174*t42177*t42179*(Cinf*Fg*Pg_1*t42192*t42175*t42195*(7.0/1.2E1)-Cinf*Fg*Pg_1*t42172*t42191*t42194*t42195*(1.0/2.0))+Cinf*Fg*Pg_1*t42171*1.0/pow(t42156,7.0/2.0)*t42178*t42179*(2.0/3.0)-Cinf*Fg*Pg_1*t42171*t42178*t42179*t42197*t42198*(1.0/2.0)+Cinf*Fg*Pg_1*t42171*t42191*t42175*t42178*t42179*t42198*(1.0/2.0);
            }
            
        } else if (rho_b < lsda_cutoff_) {
            // v
            if (deriv >= 0) {
                double t42351 = rho_a+rho_b;
                double t42352 = 1.0/pow(t42351,1.0/3.0);
                double t42353 = c*t42352;
                double t42354 = log(t42353);
                double t42355 = EcPhd_1*t42354;
                double t42356 = pow(2.0,1.0/3.0);
                double t42357 = t42356*2.0;
                double t42358 = t42357-2.0;
                double t42359 = two_13*2.0;
                double t42360 = t42359-2.0;
                double t42361 = 1.0/t42360;
                double t42362 = sqrt(t42353);
                double t42363 = EcPld_2*t42362;
                double t42364 = EcPld_3*c*t42352;
                double t42365 = t42363+t42364+1.0;
                double t42366 = 1.0/t42365;
                double t42367 = EcPld_1*t42366;
                double t42368 = c*c;
                double t42369 = 1.0/pow(t42351,2.0/3.0);
                double t42370 = Bg*t42368*t42369;
                double t42371 = Cg_2*c*t42352;
                double t42372 = Cg_1+t42370+t42371;
                double t42373 = 1.0/t42351;
                double t42374 = Bg*c*t42373*t42368*1.0E4;
                double t42375 = Cg_4*t42368*t42369;
                double t42376 = Cg_3*c*t42352;
                double t42377 = t42374+t42375+t42376+1.0;
                double t42378 = 1.0/t42377;
                double t42379 = t42372*t42378;
                double t42380 = Cx+t42379;
                double t42381 = gamma_ab*2.0;
                double t42382 = gamma_aa+gamma_bb+t42381;
                v[Q] += scale * t42351*(heaviside(-c*t42352+1.0)*(EcPhd_2+t42355+t42361*t42358*(EcFhd_2-EcPhd_2-t42355+EcFhd_1*t42354+EcFhd_4*c*t42352-EcPhd_4*c*t42352+EcFhd_3*c*t42352*t42354-EcPhd_3*c*t42352*t42354)+EcPhd_4*c*t42352+EcPhd_3*c*t42352*t42354)+heaviside(t42353-1.0)*(t42367-t42361*t42358*(t42367-EcFld_1/(EcFld_2*t42362+EcFld_3*c*t42352+1.0))))+(1.0/pow(t42351,4.0/3.0)*t42380*t42382*exp(-(Cinf*Fg*Pg_1*1.0/pow(t42351,7.0/6.0)*sqrt(t42382))/t42380))/two_13;
            }
            
            // v_rho_a
            if (deriv >= 1) {
                double t42384 = rho_a+rho_b;
                double t42385 = 1.0/pow(t42384,4.0/3.0);
                double t42386 = 1.0/pow(t42384,1.0/3.0);
                double t42387 = c*t42386;
                double t42388 = 1.0/sqrt(t42387);
                double t42389 = sqrt(t42387);
                double t42390 = EcPld_3*c*t42385*(1.0/3.0);
                double t42391 = EcPld_2*c*t42385*t42388*(1.0/6.0);
                double t42392 = t42390+t42391;
                double t42393 = EcPld_2*t42389;
                double t42394 = EcPld_3*c*t42386;
                double t42395 = t42393+t42394+1.0;
                double t42396 = 1.0/(t42395*t42395);
                double t42397 = EcPld_1*t42392*t42396;
                double t42398 = pow(2.0,1.0/3.0);
                double t42399 = t42398*2.0;
                double t42400 = t42399-2.0;
                double t42401 = two_13*2.0;
                double t42402 = t42401-2.0;
                double t42403 = 1.0/t42402;
                double t42404 = 1.0/t42384;
                double t42405 = EcPhd_1*t42404*(1.0/3.0);
                double t42406 = log(t42387);
                double t42407 = EcPhd_3*c*t42385*(1.0/3.0);
                double t42408 = EcPhd_4*c*t42385*(1.0/3.0);
                double t42409 = EcPhd_3*c*t42406*t42385*(1.0/3.0);
                double t42410 = t42387-1.0;
                double t42411 = EcPhd_1*t42406;
                double t42412 = dirac(t42410);
                double t42413 = EcFld_2*t42389;
                double t42414 = EcFld_3*c*t42386;
                double t42415 = t42413+t42414+1.0;
                double t42416 = 1.0/t42395;
                double t42417 = EcPld_1*t42416;
                double t42418 = -t42387+1.0;
                double t42419 = heaviside(t42418);
                double t42420 = EcFhd_1*t42406;
                double t42421 = EcFhd_4*c*t42386;
                double t42422 = EcPhd_4*c*t42386;
                double t42423 = EcFhd_3*c*t42406*t42386;
                double t42424 = EcPhd_3*c*t42406*t42386;
                double t42425 = heaviside(t42410);
                double t42426 = 1.0/t42415;
                double t42427 = t42417-EcFld_1*t42426;
                double t42428 = t42417-t42400*t42403*t42427;
                double t42429 = c*c;
                double t42430 = 1.0/pow(t42384,2.0/3.0);
                double t42431 = Bg*c*t42404*t42429*1.0E4;
                double t42432 = Cg_4*t42430*t42429;
                double t42433 = Cg_3*c*t42386;
                double t42434 = t42431+t42432+t42433+1.0;
                double t42435 = 1.0/t42434;
                double t42436 = 1.0/pow(t42384,5.0/3.0);
                double t42437 = Bg*t42430*t42429;
                double t42438 = Cg_2*c*t42386;
                double t42439 = Cg_1+t42437+t42438;
                double t42440 = gamma_ab*2.0;
                double t42441 = gamma_aa+gamma_bb+t42440;
                double t42442 = 1.0/two_13;
                double t42443 = 1.0/pow(t42384,7.0/6.0);
                double t42444 = t42435*t42439;
                double t42445 = Cx+t42444;
                double t42446 = 1.0/t42445;
                double t42447 = sqrt(t42441);
                double t42449 = Cinf*Fg*Pg_1*t42443*t42446*t42447;
                double t42448 = exp(-t42449);
                double t42450 = Bg*t42436*t42429*(2.0/3.0);
                double t42451 = Cg_2*c*t42385*(1.0/3.0);
                double t42452 = t42450+t42451;
                double t42453 = t42452*t42435;
                double t42454 = 1.0/(t42384*t42384);
                double t42455 = Bg*c*t42454*t42429*1.0E4;
                double t42456 = Cg_4*t42436*t42429*(2.0/3.0);
                double t42457 = Cg_3*c*t42385*(1.0/3.0);
                double t42458 = t42455+t42456+t42457;
                double t42459 = 1.0/(t42434*t42434);
                double t42460 = t42453-t42439*t42458*t42459;
                v_rho_a[Q] += scale * t42419*(EcPhd_2+t42411+t42422+t42424+t42400*t42403*(EcFhd_2-EcPhd_2-t42411+t42420+t42421-t42422+t42423-t42424))+t42425*t42428+t42384*(t42425*(t42397-t42400*t42403*(t42397-EcFld_1*1.0/(t42415*t42415)*(EcFld_3*c*t42385*(1.0/3.0)+EcFld_2*c*t42385*t42388*(1.0/6.0))))-t42419*(t42405+t42407+t42408+t42409-t42400*t42403*(t42405+t42407+t42408+t42409-EcFhd_1*t42404*(1.0/3.0)-EcFhd_3*c*t42385*(1.0/3.0)-EcFhd_4*c*t42385*(1.0/3.0)-EcFhd_3*c*t42406*t42385*(1.0/3.0)))-c*t42412*t42428*t42385*(1.0/3.0)+c*t42412*t42385*(EcPhd_2+t42411+t42422+t42424+t42400*t42403*(EcFhd_2-EcPhd_2-t42411+t42420+t42421+t42423-EcPhd_4*c*t42386-EcPhd_3*c*t42406*t42386))*(1.0/3.0))-t42441*t42442*t42445*1.0/pow(t42384,7.0/3.0)*t42448*(4.0/3.0)-t42441*t42442*t42460*t42385*t42448+t42441*t42442*t42445*t42385*t42448*(Cinf*Fg*Pg_1*t42446*1.0/pow(t42384,1.3E1/6.0)*t42447*(7.0/6.0)-Cinf*Fg*Pg_1*t42460*t42443*1.0/(t42445*t42445)*t42447);
            }
            
            // v_rho_b
            if (deriv >= 1) {
                double t42462 = rho_a+rho_b;
                double t42463 = 1.0/pow(t42462,4.0/3.0);
                double t42464 = 1.0/pow(t42462,1.0/3.0);
                double t42465 = c*t42464;
                double t42466 = 1.0/sqrt(t42465);
                double t42467 = sqrt(t42465);
                double t42468 = EcPld_3*c*t42463*(1.0/3.0);
                double t42469 = EcPld_2*c*t42463*t42466*(1.0/6.0);
                double t42470 = t42468+t42469;
                double t42471 = EcPld_2*t42467;
                double t42472 = EcPld_3*c*t42464;
                double t42473 = t42471+t42472+1.0;
                double t42474 = 1.0/(t42473*t42473);
                double t42475 = EcPld_1*t42470*t42474;
                double t42476 = pow(2.0,1.0/3.0);
                double t42477 = t42476*2.0;
                double t42478 = t42477-2.0;
                double t42479 = two_13*2.0;
                double t42480 = t42479-2.0;
                double t42481 = 1.0/t42480;
                double t42482 = 1.0/t42462;
                double t42483 = EcPhd_1*t42482*(1.0/3.0);
                double t42484 = log(t42465);
                double t42485 = EcPhd_3*c*t42463*(1.0/3.0);
                double t42486 = EcPhd_4*c*t42463*(1.0/3.0);
                double t42487 = EcPhd_3*c*t42463*t42484*(1.0/3.0);
                double t42488 = t42465-1.0;
                double t42489 = EcPhd_1*t42484;
                double t42490 = dirac(t42488);
                double t42491 = EcFld_2*t42467;
                double t42492 = EcFld_3*c*t42464;
                double t42493 = t42491+t42492+1.0;
                double t42494 = 1.0/t42473;
                double t42495 = EcPld_1*t42494;
                double t42496 = -t42465+1.0;
                double t42497 = heaviside(t42496);
                double t42498 = EcFhd_1*t42484;
                double t42499 = EcFhd_4*c*t42464;
                double t42500 = EcPhd_4*c*t42464;
                double t42501 = EcFhd_3*c*t42464*t42484;
                double t42502 = EcPhd_3*c*t42464*t42484;
                double t42503 = heaviside(t42488);
                double t42504 = 1.0/t42493;
                double t42505 = t42495-EcFld_1*t42504;
                double t42506 = t42495-t42505*t42481*t42478;
                double t42507 = c*c;
                double t42508 = 1.0/pow(t42462,2.0/3.0);
                double t42509 = Bg*c*t42507*t42482*1.0E4;
                double t42510 = Cg_4*t42507*t42508;
                double t42511 = Cg_3*c*t42464;
                double t42512 = t42510+t42511+t42509+1.0;
                double t42513 = 1.0/t42512;
                double t42514 = 1.0/pow(t42462,5.0/3.0);
                double t42515 = Bg*t42507*t42508;
                double t42516 = Cg_2*c*t42464;
                double t42517 = Cg_1+t42515+t42516;
                double t42518 = gamma_ab*2.0;
                double t42519 = gamma_aa+gamma_bb+t42518;
                double t42520 = 1.0/two_13;
                double t42521 = 1.0/pow(t42462,7.0/6.0);
                double t42522 = t42513*t42517;
                double t42523 = Cx+t42522;
                double t42524 = 1.0/t42523;
                double t42525 = sqrt(t42519);
                double t42527 = Cinf*Fg*Pg_1*t42521*t42524*t42525;
                double t42526 = exp(-t42527);
                double t42528 = Bg*t42514*t42507*(2.0/3.0);
                double t42529 = Cg_2*c*t42463*(1.0/3.0);
                double t42530 = t42528+t42529;
                double t42531 = t42530*t42513;
                double t42532 = 1.0/(t42462*t42462);
                double t42533 = Bg*c*t42532*t42507*1.0E4;
                double t42534 = Cg_4*t42514*t42507*(2.0/3.0);
                double t42535 = Cg_3*c*t42463*(1.0/3.0);
                double t42536 = t42533+t42534+t42535;
                double t42537 = 1.0/(t42512*t42512);
                double t42538 = t42531-t42517*t42536*t42537;
                v_rho_b[Q] += scale * t42497*(EcPhd_2+t42500+t42502+t42489+t42481*t42478*(EcFhd_2-EcPhd_2-t42500+t42501-t42502-t42489+t42498+t42499))+t42503*t42506+t42462*(t42503*(t42475-t42481*t42478*(t42475-EcFld_1*1.0/(t42493*t42493)*(EcFld_3*c*t42463*(1.0/3.0)+EcFld_2*c*t42463*t42466*(1.0/6.0))))-t42497*(t42483+t42485+t42486+t42487-t42481*t42478*(t42483+t42485+t42486+t42487-EcFhd_1*t42482*(1.0/3.0)-EcFhd_3*c*t42463*(1.0/3.0)-EcFhd_4*c*t42463*(1.0/3.0)-EcFhd_3*c*t42463*t42484*(1.0/3.0)))-c*t42506*t42463*t42490*(1.0/3.0)+c*t42463*t42490*(EcPhd_2+t42500+t42502+t42489+t42481*t42478*(EcFhd_2-EcPhd_2+t42501-t42489+t42498+t42499-EcPhd_4*c*t42464-EcPhd_3*c*t42464*t42484))*(1.0/3.0))-t42520*t42523*1.0/pow(t42462,7.0/3.0)*t42526*t42519*(4.0/3.0)-t42520*t42463*t42526*t42519*t42538+t42520*t42523*t42463*t42526*t42519*(Cinf*Fg*Pg_1*t42524*1.0/pow(t42462,1.3E1/6.0)*t42525*(7.0/6.0)-Cinf*Fg*Pg_1*t42521*1.0/(t42523*t42523)*t42525*t42538);
            }
            
            // v_gamma_aa
            if (deriv >= 1) {
                double t42540 = rho_a+rho_b;
                double t42541 = c*c;
                double t42542 = 1.0/pow(t42540,2.0/3.0);
                double t42543 = 1.0/pow(t42540,1.0/3.0);
                double t42544 = Bg*t42541*t42542;
                double t42545 = Cg_2*c*t42543;
                double t42546 = Cg_1+t42544+t42545;
                double t42547 = 1.0/t42540;
                double t42548 = Bg*c*t42541*t42547*1.0E4;
                double t42549 = Cg_4*t42541*t42542;
                double t42550 = Cg_3*c*t42543;
                double t42551 = t42550+t42548+t42549+1.0;
                double t42552 = 1.0/t42551;
                double t42553 = t42552*t42546;
                double t42554 = Cx+t42553;
                double t42555 = 1.0/two_13;
                double t42556 = 1.0/pow(t42540,7.0/6.0);
                double t42557 = 1.0/t42554;
                double t42558 = gamma_ab*2.0;
                double t42559 = gamma_aa+gamma_bb+t42558;
                double t42560 = sqrt(t42559);
                double t42561 = exp(-Cinf*Fg*Pg_1*t42560*t42556*t42557);
                v_gamma_aa[Q] += scale * 1.0/pow(t42540,4.0/3.0)*t42561*t42554*t42555-Cinf*Fg*Pg_1*1.0/pow(t42540,5.0/2.0)*t42560*t42561*t42555*(1.0/2.0);
            }
            
            // v_gamma_ab
            if (deriv >= 1) {
                double t42563 = rho_a+rho_b;
                double t42564 = c*c;
                double t42565 = 1.0/pow(t42563,2.0/3.0);
                double t42566 = 1.0/pow(t42563,1.0/3.0);
                double t42567 = Bg*t42564*t42565;
                double t42568 = Cg_2*c*t42566;
                double t42569 = Cg_1+t42567+t42568;
                double t42570 = 1.0/t42563;
                double t42571 = Bg*c*t42570*t42564*1.0E4;
                double t42572 = Cg_4*t42564*t42565;
                double t42573 = Cg_3*c*t42566;
                double t42574 = t42571+t42572+t42573+1.0;
                double t42575 = 1.0/t42574;
                double t42576 = t42575*t42569;
                double t42577 = Cx+t42576;
                double t42578 = 1.0/two_13;
                double t42579 = 1.0/pow(t42563,7.0/6.0);
                double t42580 = 1.0/t42577;
                double t42581 = gamma_ab*2.0;
                double t42582 = gamma_aa+gamma_bb+t42581;
                double t42583 = sqrt(t42582);
                double t42584 = exp(-Cinf*Fg*Pg_1*t42580*t42583*t42579);
                v_gamma_ab[Q] += scale * 1.0/pow(t42563,4.0/3.0)*t42584*t42577*t42578*2.0-Cinf*Fg*Pg_1*1.0/pow(t42563,5.0/2.0)*t42583*t42584*t42578;
            }
            
            // v_gamma_bb
            if (deriv >= 1) {
                double t42586 = rho_a+rho_b;
                double t42587 = c*c;
                double t42588 = 1.0/pow(t42586,2.0/3.0);
                double t42589 = 1.0/pow(t42586,1.0/3.0);
                double t42590 = Bg*t42587*t42588;
                double t42591 = Cg_2*c*t42589;
                double t42592 = Cg_1+t42590+t42591;
                double t42593 = 1.0/t42586;
                double t42594 = Bg*c*t42593*t42587*1.0E4;
                double t42595 = Cg_4*t42587*t42588;
                double t42596 = Cg_3*c*t42589;
                double t42597 = t42594+t42595+t42596+1.0;
                double t42598 = 1.0/t42597;
                double t42599 = t42592*t42598;
                double t42600 = Cx+t42599;
                double t42601 = 1.0/two_13;
                double t42602 = 1.0/pow(t42586,7.0/6.0);
                double t42603 = 1.0/t42600;
                double t42604 = gamma_ab*2.0;
                double t42605 = gamma_aa+gamma_bb+t42604;
                double t42606 = sqrt(t42605);
                double t42607 = exp(-Cinf*Fg*Pg_1*t42602*t42603*t42606);
                v_gamma_bb[Q] += scale * t42600*t42601*t42607*1.0/pow(t42586,4.0/3.0)-Cinf*Fg*Pg_1*t42601*t42606*t42607*1.0/pow(t42586,5.0/2.0)*(1.0/2.0);
            }
            
            // v_rho_a_rho_a
            if (deriv >= 2) {
                double t42611 = rho_a+rho_b;
                double t42612 = 1.0/pow(t42611,4.0/3.0);
                double t42613 = 1.0/pow(t42611,1.0/3.0);
                double t42614 = c*t42613;
                double t42615 = 1.0/sqrt(t42614);
                double t42616 = sqrt(t42614);
                double t42617 = EcPld_3*c*t42612*(1.0/3.0);
                double t42618 = EcPld_2*c*t42612*t42615*(1.0/6.0);
                double t42619 = t42617+t42618;
                double t42620 = EcPld_2*t42616;
                double t42621 = EcPld_3*c*t42613;
                double t42622 = t42620+t42621+1.0;
                double t42623 = 1.0/(t42622*t42622);
                double t42624 = EcPld_1*t42623*t42619;
                double t42625 = t42614-1.0;
                double t42626 = heaviside(t42625);
                double t42627 = pow(2.0,1.0/3.0);
                double t42628 = t42627*2.0;
                double t42629 = t42628-2.0;
                double t42630 = two_13*2.0;
                double t42631 = t42630-2.0;
                double t42632 = 1.0/t42631;
                double t42633 = EcFld_3*c*t42612*(1.0/3.0);
                double t42634 = EcFld_2*c*t42612*t42615*(1.0/6.0);
                double t42635 = t42633+t42634;
                double t42636 = EcFld_2*t42616;
                double t42637 = EcFld_3*c*t42613;
                double t42638 = t42636+t42637+1.0;
                double t42639 = t42619*t42619;
                double t42640 = 1.0/(t42622*t42622*t42622);
                double t42641 = EcPld_1*t42640*t42639*2.0;
                double t42642 = 1.0/pow(t42611,7.0/3.0);
                double t42643 = 1.0/(t42638*t42638);
                double t42644 = c*c;
                double t42645 = 1.0/pow(t42611,8.0/3.0);
                double t42646 = 1.0/pow(t42614,3.0/2.0);
                double t42647 = EcPld_3*c*t42642*(4.0/9.0);
                double t42648 = EcPld_2*c*t42615*t42642*(2.0/9.0);
                double t42649 = t42647+t42648-EcPld_2*t42644*t42645*t42646*(1.0/3.6E1);
                double t42650 = EcPld_1*t42623*t42649;
                double t42651 = 1.0/(t42611*t42611);
                double t42652 = EcPhd_1*t42651*(1.0/3.0);
                double t42653 = log(t42614);
                double t42654 = EcPhd_3*c*t42642*(5.0/9.0);
                double t42655 = EcPhd_4*c*t42642*(4.0/9.0);
                double t42656 = EcPhd_3*c*t42642*t42653*(4.0/9.0);
                double t42657 = 1.0/t42622;
                double t42658 = EcPld_1*t42657;
                double t42659 = t42624-EcFld_1*t42643*t42635;
                double t42660 = t42624-t42632*t42629*t42659;
                double t42661 = dirac(t42625);
                double t42662 = EcPhd_1*t42653;
                double t42663 = 1.0/t42611;
                double t42664 = EcPhd_1*t42663*(1.0/3.0);
                double t42665 = EcPhd_3*c*t42612*(1.0/3.0);
                double t42666 = EcPhd_4*c*t42612*(1.0/3.0);
                double t42667 = EcPhd_3*c*t42612*t42653*(1.0/3.0);
                double t42668 = 1.0/t42638;
                double t42684 = EcFld_1*t42668;
                double t42669 = -t42684+t42658;
                double t42670 = t42658-t42632*t42629*t42669;
                double t42671 = dirac(t42625,1.0);
                double t42672 = EcFhd_1*t42653;
                double t42673 = EcFhd_4*c*t42613;
                double t42674 = EcPhd_4*c*t42613;
                double t42675 = EcFhd_3*c*t42613*t42653;
                double t42676 = EcPhd_3*c*t42613*t42653;
                double t42677 = EcFhd_2-EcPhd_2-t42662+t42672+t42673-t42674+t42675-t42676;
                double t42678 = t42632*t42629*t42677;
                double t42679 = EcPhd_2+t42662+t42674+t42676+t42678;
                double t42680 = -t42614+1.0;
                double t42681 = heaviside(t42680);
                double t42682 = t42664+t42665+t42666+t42667-EcFhd_1*t42663*(1.0/3.0)-EcFhd_3*c*t42612*(1.0/3.0)-EcFhd_4*c*t42612*(1.0/3.0)-EcFhd_3*c*t42612*t42653*(1.0/3.0);
                double t42683 = t42664+t42665+t42666+t42667-t42632*t42682*t42629;
                double t42685 = 1.0/pow(t42611,2.0/3.0);
                double t42686 = Bg*c*t42644*t42663*1.0E4;
                double t42687 = Cg_4*t42644*t42685;
                double t42688 = Cg_3*c*t42613;
                double t42689 = t42686+t42687+t42688+1.0;
                double t42690 = 1.0/t42689;
                double t42691 = 1.0/pow(t42611,5.0/3.0);
                double t42692 = Bg*t42644*t42685;
                double t42693 = Cg_2*c*t42613;
                double t42694 = Cg_1+t42692+t42693;
                double t42695 = gamma_ab*2.0;
                double t42696 = gamma_aa+gamma_bb+t42695;
                double t42697 = 1.0/two_13;
                double t42698 = 1.0/pow(t42611,7.0/6.0);
                double t42699 = t42690*t42694;
                double t42700 = Cx+t42699;
                double t42701 = 1.0/t42700;
                double t42702 = sqrt(t42696);
                double t42704 = Cinf*Fg*Pg_1*t42701*t42702*t42698;
                double t42703 = exp(-t42704);
                double t42705 = Bg*t42644*t42691*(2.0/3.0);
                double t42706 = Cg_2*c*t42612*(1.0/3.0);
                double t42707 = t42705+t42706;
                double t42708 = Bg*c*t42651*t42644*1.0E4;
                double t42709 = Cg_4*t42644*t42691*(2.0/3.0);
                double t42710 = Cg_3*c*t42612*(1.0/3.0);
                double t42711 = t42710+t42708+t42709;
                double t42712 = 1.0/(t42689*t42689);
                double t42713 = t42707*t42690;
                double t42728 = t42711*t42712*t42694;
                double t42714 = t42713-t42728;
                double t42715 = Bg*t42644*t42645*(1.0E1/9.0);
                double t42716 = Cg_2*c*t42642*(4.0/9.0);
                double t42717 = t42715+t42716;
                double t42718 = t42690*t42717;
                double t42719 = 1.0/(t42611*t42611*t42611);
                double t42720 = Bg*c*t42644*t42719*2.0E4;
                double t42721 = Cg_4*t42644*t42645*(1.0E1/9.0);
                double t42722 = Cg_3*c*t42642*(4.0/9.0);
                double t42723 = t42720+t42721+t42722;
                double t42724 = t42711*t42711;
                double t42725 = 1.0/(t42689*t42689*t42689);
                double t42726 = t42724*t42725*t42694*2.0;
                double t42727 = t42726+t42718-t42711*t42712*t42707*2.0-t42712*t42723*t42694;
                double t42729 = 1.0/(t42700*t42700);
                double t42730 = 1.0/pow(t42611,1.3E1/6.0);
                double t42731 = Cinf*Fg*Pg_1*t42701*t42702*t42730*(7.0/6.0);
                double t42733 = Cinf*Fg*Pg_1*t42702*t42714*t42729*t42698;
                double t42732 = t42731-t42733;
                v_rho_a_rho_a[Q] += scale * -t42611*(-t42681*(t42652+t42654+t42655+t42656-t42632*t42629*(t42652+t42654+t42655+t42656-EcFhd_1*t42651*(1.0/3.0)-EcFhd_3*c*t42642*(5.0/9.0)-EcFhd_4*c*t42642*(4.0/9.0)-EcFhd_3*c*t42642*t42653*(4.0/9.0)))+t42626*(-t42641+t42650+t42632*t42629*(t42641-t42650-EcFld_1*(t42635*t42635)*1.0/(t42638*t42638*t42638)*2.0+EcFld_1*t42643*(EcFld_3*c*t42642*(4.0/9.0)-EcFld_2*t42644*t42645*t42646*(1.0/3.6E1)+EcFld_2*c*t42615*t42642*(2.0/9.0))))+c*t42612*t42660*t42661*(2.0/3.0)-c*t42642*t42661*t42670*(4.0/9.0)+c*t42612*t42661*t42683*(2.0/3.0)+c*t42642*t42661*t42679*(4.0/9.0)-t42670*t42644*t42671*t42645*(1.0/9.0)+t42644*t42671*t42645*t42679*(1.0/9.0))+t42660*t42626*2.0-t42681*t42683*2.0+c*t42612*t42661*t42679*(2.0/3.0)-c*t42612*t42661*(t42658+t42632*t42629*(t42684-t42658))*(2.0/3.0)+t42700*1.0/pow(t42611,1.0E1/3.0)*t42703*t42696*t42697*(2.8E1/9.0)+t42703*t42642*t42714*t42696*t42697*(8.0/3.0)+t42612*t42703*t42727*t42696*t42697-t42700*t42703*t42642*t42732*t42696*t42697*(8.0/3.0)-t42612*t42703*t42714*t42732*t42696*t42697*2.0+t42700*t42612*t42703*(t42732*t42732)*t42696*t42697-t42700*t42612*t42703*t42696*t42697*(Cinf*Fg*Pg_1*1.0/pow(t42611,1.9E1/6.0)*t42701*t42702*(9.1E1/3.6E1)-Cinf*Fg*Pg_1*t42702*t42730*t42714*t42729*(7.0/3.0)-Cinf*Fg*Pg_1*t42702*t42727*t42729*t42698+Cinf*Fg*Pg_1*1.0/(t42700*t42700*t42700)*t42702*(t42714*t42714)*t42698*2.0);
            }
            
            // v_rho_a_rho_b
            if (deriv >= 2) {
                double t42735 = rho_a+rho_b;
                double t42736 = 1.0/pow(t42735,4.0/3.0);
                double t42737 = 1.0/pow(t42735,1.0/3.0);
                double t42738 = c*t42737;
                double t42739 = 1.0/sqrt(t42738);
                double t42740 = sqrt(t42738);
                double t42741 = EcPld_3*c*t42736*(1.0/3.0);
                double t42742 = EcPld_2*c*t42736*t42739*(1.0/6.0);
                double t42743 = t42741+t42742;
                double t42744 = EcPld_2*t42740;
                double t42745 = EcPld_3*c*t42737;
                double t42746 = t42744+t42745+1.0;
                double t42747 = 1.0/(t42746*t42746);
                double t42748 = EcPld_1*t42743*t42747;
                double t42749 = t42738-1.0;
                double t42750 = heaviside(t42749);
                double t42751 = pow(2.0,1.0/3.0);
                double t42752 = t42751*2.0;
                double t42753 = t42752-2.0;
                double t42754 = two_13*2.0;
                double t42755 = t42754-2.0;
                double t42756 = 1.0/t42755;
                double t42757 = EcFld_3*c*t42736*(1.0/3.0);
                double t42758 = EcFld_2*c*t42736*t42739*(1.0/6.0);
                double t42759 = t42757+t42758;
                double t42760 = EcFld_2*t42740;
                double t42761 = EcFld_3*c*t42737;
                double t42762 = t42760+t42761+1.0;
                double t42763 = t42743*t42743;
                double t42764 = 1.0/(t42746*t42746*t42746);
                double t42765 = EcPld_1*t42763*t42764*2.0;
                double t42766 = 1.0/pow(t42735,7.0/3.0);
                double t42767 = 1.0/(t42762*t42762);
                double t42768 = c*c;
                double t42769 = 1.0/pow(t42735,8.0/3.0);
                double t42770 = 1.0/pow(t42738,3.0/2.0);
                double t42771 = EcPld_3*c*t42766*(4.0/9.0);
                double t42772 = EcPld_2*c*t42739*t42766*(2.0/9.0);
                double t42773 = t42771+t42772-EcPld_2*t42770*t42768*t42769*(1.0/3.6E1);
                double t42774 = EcPld_1*t42773*t42747;
                double t42775 = 1.0/(t42735*t42735);
                double t42776 = EcPhd_1*t42775*(1.0/3.0);
                double t42777 = log(t42738);
                double t42778 = EcPhd_3*c*t42766*(5.0/9.0);
                double t42779 = EcPhd_4*c*t42766*(4.0/9.0);
                double t42780 = EcPhd_3*c*t42766*t42777*(4.0/9.0);
                double t42781 = 1.0/t42746;
                double t42782 = EcPld_1*t42781;
                double t42783 = t42748-EcFld_1*t42767*t42759;
                double t42784 = t42748-t42753*t42756*t42783;
                double t42785 = dirac(t42749);
                double t42786 = EcPhd_1*t42777;
                double t42787 = 1.0/t42735;
                double t42788 = EcPhd_1*t42787*(1.0/3.0);
                double t42789 = EcPhd_3*c*t42736*(1.0/3.0);
                double t42790 = EcPhd_4*c*t42736*(1.0/3.0);
                double t42791 = EcPhd_3*c*t42736*t42777*(1.0/3.0);
                double t42792 = 1.0/t42762;
                double t42808 = EcFld_1*t42792;
                double t42793 = -t42808+t42782;
                double t42794 = t42782-t42753*t42756*t42793;
                double t42795 = dirac(t42749,1.0);
                double t42796 = EcFhd_1*t42777;
                double t42797 = EcFhd_4*c*t42737;
                double t42798 = EcPhd_4*c*t42737;
                double t42799 = EcFhd_3*c*t42737*t42777;
                double t42800 = EcPhd_3*c*t42737*t42777;
                double t42801 = EcFhd_2-EcPhd_2-t42800-t42786+t42796+t42797-t42798+t42799;
                double t42802 = t42801*t42753*t42756;
                double t42803 = EcPhd_2+t42800+t42802+t42786+t42798;
                double t42804 = -t42738+1.0;
                double t42805 = heaviside(t42804);
                double t42806 = t42790+t42791+t42788+t42789-EcFhd_1*t42787*(1.0/3.0)-EcFhd_3*c*t42736*(1.0/3.0)-EcFhd_4*c*t42736*(1.0/3.0)-EcFhd_3*c*t42736*t42777*(1.0/3.0);
                double t42807 = t42790+t42791+t42788+t42789-t42806*t42753*t42756;
                double t42809 = 1.0/pow(t42735,2.0/3.0);
                double t42810 = Bg*c*t42768*t42787*1.0E4;
                double t42811 = Cg_4*t42809*t42768;
                double t42812 = Cg_3*c*t42737;
                double t42813 = t42810+t42811+t42812+1.0;
                double t42814 = 1.0/t42813;
                double t42815 = 1.0/pow(t42735,5.0/3.0);
                double t42816 = Bg*t42809*t42768;
                double t42817 = Cg_2*c*t42737;
                double t42818 = Cg_1+t42816+t42817;
                double t42819 = gamma_ab*2.0;
                double t42820 = gamma_aa+gamma_bb+t42819;
                double t42821 = 1.0/two_13;
                double t42822 = 1.0/pow(t42735,7.0/6.0);
                double t42823 = t42814*t42818;
                double t42824 = Cx+t42823;
                double t42825 = 1.0/t42824;
                double t42826 = sqrt(t42820);
                double t42828 = Cinf*Fg*Pg_1*t42822*t42825*t42826;
                double t42827 = exp(-t42828);
                double t42829 = Bg*t42815*t42768*(2.0/3.0);
                double t42830 = Cg_2*c*t42736*(1.0/3.0);
                double t42831 = t42830+t42829;
                double t42832 = Bg*c*t42775*t42768*1.0E4;
                double t42833 = Cg_4*t42815*t42768*(2.0/3.0);
                double t42834 = Cg_3*c*t42736*(1.0/3.0);
                double t42835 = t42832+t42833+t42834;
                double t42836 = 1.0/(t42813*t42813);
                double t42837 = t42831*t42814;
                double t42852 = t42835*t42818*t42836;
                double t42838 = -t42852+t42837;
                double t42839 = Bg*t42768*t42769*(1.0E1/9.0);
                double t42840 = Cg_2*c*t42766*(4.0/9.0);
                double t42841 = t42840+t42839;
                double t42842 = t42814*t42841;
                double t42843 = 1.0/(t42735*t42735*t42735);
                double t42844 = Bg*c*t42843*t42768*2.0E4;
                double t42845 = Cg_4*t42768*t42769*(1.0E1/9.0);
                double t42846 = Cg_3*c*t42766*(4.0/9.0);
                double t42847 = t42844+t42845+t42846;
                double t42848 = t42835*t42835;
                double t42849 = 1.0/(t42813*t42813*t42813);
                double t42850 = t42818*t42848*t42849*2.0;
                double t42851 = t42850+t42842-t42831*t42835*t42836*2.0-t42818*t42836*t42847;
                double t42853 = 1.0/(t42824*t42824);
                double t42854 = 1.0/pow(t42735,1.3E1/6.0);
                double t42855 = Cinf*Fg*Pg_1*t42825*t42826*t42854*(7.0/6.0);
                double t42857 = Cinf*Fg*Pg_1*t42822*t42826*t42853*t42838;
                double t42856 = t42855-t42857;
                v_rho_a_rho_b[Q] += scale * -t42735*(-t42805*(t42780+t42776+t42778+t42779-t42753*t42756*(t42780+t42776+t42778+t42779-EcFhd_1*t42775*(1.0/3.0)-EcFhd_3*c*t42766*(5.0/9.0)-EcFhd_4*c*t42766*(4.0/9.0)-EcFhd_3*c*t42766*t42777*(4.0/9.0)))+t42750*(-t42765+t42774+t42753*t42756*(t42765-t42774-EcFld_1*1.0/(t42762*t42762*t42762)*(t42759*t42759)*2.0+EcFld_1*t42767*(EcFld_3*c*t42766*(4.0/9.0)-EcFld_2*t42770*t42768*t42769*(1.0/3.6E1)+EcFld_2*c*t42739*t42766*(2.0/9.0))))+c*t42803*t42766*t42785*(4.0/9.0)+c*t42807*t42736*t42785*(2.0/3.0)+c*t42736*t42784*t42785*(2.0/3.0)-c*t42766*t42785*t42794*(4.0/9.0)+t42803*t42768*t42795*t42769*(1.0/9.0)-t42794*t42768*t42795*t42769*(1.0/9.0))-t42805*t42807*2.0+t42750*t42784*2.0+c*t42803*t42736*t42785*(2.0/3.0)-c*t42736*t42785*(t42782+t42753*t42756*(t42808-t42782))*(2.0/3.0)+t42820*t42821*t42824*1.0/pow(t42735,1.0E1/3.0)*t42827*(2.8E1/9.0)+t42820*t42821*t42851*t42736*t42827+t42820*t42821*t42827*t42766*t42838*(8.0/3.0)-t42820*t42821*t42824*t42827*t42766*t42856*(8.0/3.0)-t42820*t42821*t42736*t42827*t42838*t42856*2.0+t42820*t42821*t42824*t42736*t42827*(t42856*t42856)-t42820*t42821*t42824*t42736*t42827*(Cinf*Fg*Pg_1*1.0/pow(t42735,1.9E1/6.0)*t42825*t42826*(9.1E1/3.6E1)-Cinf*Fg*Pg_1*t42822*t42851*t42826*t42853-Cinf*Fg*Pg_1*t42826*t42853*t42854*t42838*(7.0/3.0)+Cinf*Fg*Pg_1*t42822*1.0/(t42824*t42824*t42824)*t42826*(t42838*t42838)*2.0);
            }
            
            // v_rho_b_rho_b
            if (deriv >= 2) {
                double t42859 = rho_a+rho_b;
                double t42860 = 1.0/pow(t42859,4.0/3.0);
                double t42861 = 1.0/pow(t42859,1.0/3.0);
                double t42862 = c*t42861;
                double t42863 = 1.0/sqrt(t42862);
                double t42864 = sqrt(t42862);
                double t42865 = EcPld_3*c*t42860*(1.0/3.0);
                double t42866 = EcPld_2*c*t42860*t42863*(1.0/6.0);
                double t42867 = t42865+t42866;
                double t42868 = EcPld_2*t42864;
                double t42869 = EcPld_3*c*t42861;
                double t42870 = t42868+t42869+1.0;
                double t42871 = 1.0/(t42870*t42870);
                double t42872 = EcPld_1*t42871*t42867;
                double t42873 = t42862-1.0;
                double t42874 = heaviside(t42873);
                double t42875 = pow(2.0,1.0/3.0);
                double t42876 = t42875*2.0;
                double t42877 = t42876-2.0;
                double t42878 = two_13*2.0;
                double t42879 = t42878-2.0;
                double t42880 = 1.0/t42879;
                double t42881 = EcFld_3*c*t42860*(1.0/3.0);
                double t42882 = EcFld_2*c*t42860*t42863*(1.0/6.0);
                double t42883 = t42881+t42882;
                double t42884 = EcFld_2*t42864;
                double t42885 = EcFld_3*c*t42861;
                double t42886 = t42884+t42885+1.0;
                double t42887 = t42867*t42867;
                double t42888 = 1.0/(t42870*t42870*t42870);
                double t42889 = EcPld_1*t42887*t42888*2.0;
                double t42890 = 1.0/pow(t42859,7.0/3.0);
                double t42891 = 1.0/(t42886*t42886);
                double t42892 = c*c;
                double t42893 = 1.0/pow(t42859,8.0/3.0);
                double t42894 = 1.0/pow(t42862,3.0/2.0);
                double t42895 = EcPld_3*c*t42890*(4.0/9.0);
                double t42896 = EcPld_2*c*t42863*t42890*(2.0/9.0);
                double t42897 = t42895+t42896-EcPld_2*t42892*t42893*t42894*(1.0/3.6E1);
                double t42898 = EcPld_1*t42871*t42897;
                double t42899 = 1.0/(t42859*t42859);
                double t42900 = EcPhd_1*t42899*(1.0/3.0);
                double t42901 = log(t42862);
                double t42902 = EcPhd_3*c*t42890*(5.0/9.0);
                double t42903 = EcPhd_4*c*t42890*(4.0/9.0);
                double t42904 = EcPhd_3*c*t42901*t42890*(4.0/9.0);
                double t42905 = 1.0/t42870;
                double t42906 = EcPld_1*t42905;
                double t42907 = t42872-EcFld_1*t42891*t42883;
                double t42908 = t42872-t42880*t42907*t42877;
                double t42909 = dirac(t42873);
                double t42910 = EcPhd_1*t42901;
                double t42911 = 1.0/t42859;
                double t42912 = EcPhd_1*t42911*(1.0/3.0);
                double t42913 = EcPhd_3*c*t42860*(1.0/3.0);
                double t42914 = EcPhd_4*c*t42860*(1.0/3.0);
                double t42915 = EcPhd_3*c*t42901*t42860*(1.0/3.0);
                double t42916 = 1.0/t42886;
                double t42932 = EcFld_1*t42916;
                double t42917 = -t42932+t42906;
                double t42918 = t42906-t42880*t42917*t42877;
                double t42919 = dirac(t42873,1.0);
                double t42920 = EcFhd_1*t42901;
                double t42921 = EcFhd_4*c*t42861;
                double t42922 = EcPhd_4*c*t42861;
                double t42923 = EcFhd_3*c*t42901*t42861;
                double t42924 = EcPhd_3*c*t42901*t42861;
                double t42925 = EcFhd_2-EcPhd_2-t42910+t42920+t42921-t42922+t42923-t42924;
                double t42926 = t42880*t42925*t42877;
                double t42927 = EcPhd_2+t42910+t42922+t42924+t42926;
                double t42928 = -t42862+1.0;
                double t42929 = heaviside(t42928);
                double t42930 = t42912+t42913+t42914+t42915-EcFhd_1*t42911*(1.0/3.0)-EcFhd_3*c*t42860*(1.0/3.0)-EcFhd_4*c*t42860*(1.0/3.0)-EcFhd_3*c*t42901*t42860*(1.0/3.0);
                double t42931 = t42912+t42913+t42914+t42915-t42930*t42880*t42877;
                double t42933 = 1.0/pow(t42859,2.0/3.0);
                double t42934 = Bg*c*t42911*t42892*1.0E4;
                double t42935 = Cg_4*t42933*t42892;
                double t42936 = Cg_3*c*t42861;
                double t42937 = t42934+t42935+t42936+1.0;
                double t42938 = 1.0/t42937;
                double t42939 = 1.0/pow(t42859,5.0/3.0);
                double t42940 = Bg*t42933*t42892;
                double t42941 = Cg_2*c*t42861;
                double t42942 = Cg_1+t42940+t42941;
                double t42943 = gamma_ab*2.0;
                double t42944 = gamma_aa+gamma_bb+t42943;
                double t42945 = 1.0/two_13;
                double t42946 = 1.0/pow(t42859,7.0/6.0);
                double t42947 = t42942*t42938;
                double t42948 = Cx+t42947;
                double t42949 = 1.0/t42948;
                double t42950 = sqrt(t42944);
                double t42952 = Cinf*Fg*Pg_1*t42950*t42946*t42949;
                double t42951 = exp(-t42952);
                double t42953 = Bg*t42892*t42939*(2.0/3.0);
                double t42954 = Cg_2*c*t42860*(1.0/3.0);
                double t42955 = t42953+t42954;
                double t42956 = Bg*c*t42892*t42899*1.0E4;
                double t42957 = Cg_4*t42892*t42939*(2.0/3.0);
                double t42958 = Cg_3*c*t42860*(1.0/3.0);
                double t42959 = t42956+t42957+t42958;
                double t42960 = 1.0/(t42937*t42937);
                double t42961 = t42955*t42938;
                double t42976 = t42942*t42960*t42959;
                double t42962 = t42961-t42976;
                double t42963 = Bg*t42892*t42893*(1.0E1/9.0);
                double t42964 = Cg_2*c*t42890*(4.0/9.0);
                double t42965 = t42963+t42964;
                double t42966 = t42938*t42965;
                double t42967 = 1.0/(t42859*t42859*t42859);
                double t42968 = Bg*c*t42892*t42967*2.0E4;
                double t42969 = Cg_4*t42892*t42893*(1.0E1/9.0);
                double t42970 = Cg_3*c*t42890*(4.0/9.0);
                double t42971 = t42970+t42968+t42969;
                double t42972 = t42959*t42959;
                double t42973 = 1.0/(t42937*t42937*t42937);
                double t42974 = t42942*t42972*t42973*2.0;
                double t42975 = t42974+t42966-t42942*t42960*t42971-t42960*t42955*t42959*2.0;
                double t42977 = 1.0/(t42948*t42948);
                double t42978 = 1.0/pow(t42859,1.3E1/6.0);
                double t42979 = Cinf*Fg*Pg_1*t42950*t42949*t42978*(7.0/6.0);
                double t42981 = Cinf*Fg*Pg_1*t42950*t42962*t42946*t42977;
                double t42980 = -t42981+t42979;
                v_rho_b_rho_b[Q] += scale * -t42859*(-t42929*(t42900+t42902+t42903+t42904-t42880*t42877*(t42900+t42902+t42903+t42904-EcFhd_1*t42899*(1.0/3.0)-EcFhd_3*c*t42890*(5.0/9.0)-EcFhd_4*c*t42890*(4.0/9.0)-EcFhd_3*c*t42901*t42890*(4.0/9.0)))+t42874*(-t42889+t42898+t42880*t42877*(t42889-t42898-EcFld_1*(t42883*t42883)*1.0/(t42886*t42886*t42886)*2.0+EcFld_1*t42891*(EcFld_3*c*t42890*(4.0/9.0)-EcFld_2*t42892*t42893*t42894*(1.0/3.6E1)+EcFld_2*c*t42863*t42890*(2.0/9.0))))+c*t42931*t42860*t42909*(2.0/3.0)+c*t42860*t42908*t42909*(2.0/3.0)-c*t42890*t42909*t42918*(4.0/9.0)+c*t42890*t42909*t42927*(4.0/9.0)-t42918*t42892*t42919*t42893*(1.0/9.0)+t42927*t42892*t42919*t42893*(1.0/9.0))-t42931*t42929*2.0+t42908*t42874*2.0+c*t42860*t42909*t42927*(2.0/3.0)-c*t42860*t42909*(t42906+t42880*t42877*(t42932-t42906))*(2.0/3.0)+t42951*t42944*t42945*t42948*1.0/pow(t42859,1.0E1/3.0)*(2.8E1/9.0)+t42951*t42890*t42944*t42962*t42945*(8.0/3.0)+t42860*t42951*t42944*t42945*t42975-t42860*t42951*t42944*t42962*t42980*t42945*2.0-t42951*t42890*t42944*t42980*t42945*t42948*(8.0/3.0)+t42860*t42951*t42944*(t42980*t42980)*t42945*t42948-t42860*t42951*t42944*t42945*t42948*(Cinf*Fg*Pg_1*t42950*1.0/pow(t42859,1.9E1/6.0)*t42949*(9.1E1/3.6E1)-Cinf*Fg*Pg_1*t42950*t42946*t42975*t42977-Cinf*Fg*Pg_1*t42950*t42962*t42977*t42978*(7.0/3.0)+Cinf*Fg*Pg_1*t42950*(t42962*t42962)*t42946*1.0/(t42948*t42948*t42948)*2.0);
            }
            
            // v_gamma_aa_gamma_aa
            if (deriv >= 2) {
                double t43247 = rho_a+rho_b;
                double t43248 = c*c;
                double t43249 = 1.0/pow(t43247,2.0/3.0);
                double t43250 = 1.0/pow(t43247,1.0/3.0);
                double t43251 = Bg*t43248*t43249;
                double t43252 = Cg_2*c*t43250;
                double t43253 = Cg_1+t43251+t43252;
                double t43254 = 1.0/t43247;
                double t43255 = Bg*c*t43254*t43248*1.0E4;
                double t43256 = Cg_4*t43248*t43249;
                double t43257 = Cg_3*c*t43250;
                double t43258 = t43255+t43256+t43257+1.0;
                double t43259 = 1.0/t43258;
                double t43260 = t43253*t43259;
                double t43261 = Cx+t43260;
                double t43262 = 1.0/t43261;
                double t43263 = 1.0/two_13;
                double t43264 = 1.0/pow(t43247,7.0/6.0);
                double t43265 = gamma_ab*2.0;
                double t43266 = gamma_aa+gamma_bb+t43265;
                double t43267 = sqrt(t43266);
                double t43268 = exp(-Cinf*Fg*Pg_1*t43262*t43264*t43267);
                v_gamma_aa_gamma_aa[Q] += scale * (Cinf*Cinf)*(Fg*Fg)*(Pg_1*Pg_1)*t43262*t43263*1.0/pow(t43247,1.1E1/3.0)*t43268*(1.0/4.0)-Cinf*Fg*Pg_1*t43263*1.0/pow(t43247,5.0/2.0)*1.0/sqrt(t43266)*t43268*(3.0/4.0);
            }
            
            // v_gamma_aa_gamma_ab
            if (deriv >= 2) {
                double t43270 = rho_a+rho_b;
                double t43271 = c*c;
                double t43272 = 1.0/pow(t43270,2.0/3.0);
                double t43273 = 1.0/pow(t43270,1.0/3.0);
                double t43274 = Bg*t43271*t43272;
                double t43275 = Cg_2*c*t43273;
                double t43276 = Cg_1+t43274+t43275;
                double t43277 = 1.0/t43270;
                double t43278 = Bg*c*t43271*t43277*1.0E4;
                double t43279 = Cg_4*t43271*t43272;
                double t43280 = Cg_3*c*t43273;
                double t43281 = t43280+t43278+t43279+1.0;
                double t43282 = 1.0/t43281;
                double t43283 = t43282*t43276;
                double t43284 = Cx+t43283;
                double t43285 = 1.0/t43284;
                double t43286 = 1.0/two_13;
                double t43287 = 1.0/pow(t43270,7.0/6.0);
                double t43288 = gamma_ab*2.0;
                double t43289 = gamma_aa+gamma_bb+t43288;
                double t43290 = sqrt(t43289);
                double t43291 = exp(-Cinf*Fg*Pg_1*t43290*t43285*t43287);
                v_gamma_aa_gamma_ab[Q] += scale * (Cinf*Cinf)*(Fg*Fg)*(Pg_1*Pg_1)*1.0/pow(t43270,1.1E1/3.0)*t43291*t43285*t43286*(1.0/2.0)-Cinf*Fg*Pg_1*1.0/pow(t43270,5.0/2.0)*t43291*t43286*1.0/sqrt(t43289)*(3.0/2.0);
            }
            
            // v_gamma_aa_gamma_bb
            if (deriv >= 2) {
                double t43293 = rho_a+rho_b;
                double t43294 = c*c;
                double t43295 = 1.0/pow(t43293,2.0/3.0);
                double t43296 = 1.0/pow(t43293,1.0/3.0);
                double t43297 = Bg*t43294*t43295;
                double t43298 = Cg_2*c*t43296;
                double t43299 = Cg_1+t43297+t43298;
                double t43300 = 1.0/t43293;
                double t43301 = Bg*c*t43300*t43294*1.0E4;
                double t43302 = Cg_4*t43294*t43295;
                double t43303 = Cg_3*c*t43296;
                double t43304 = t43301+t43302+t43303+1.0;
                double t43305 = 1.0/t43304;
                double t43306 = t43305*t43299;
                double t43307 = Cx+t43306;
                double t43308 = 1.0/t43307;
                double t43309 = 1.0/two_13;
                double t43310 = 1.0/pow(t43293,7.0/6.0);
                double t43311 = gamma_ab*2.0;
                double t43312 = gamma_aa+gamma_bb+t43311;
                double t43313 = sqrt(t43312);
                double t43314 = exp(-Cinf*Fg*Pg_1*t43310*t43313*t43308);
                v_gamma_aa_gamma_bb[Q] += scale * (Cinf*Cinf)*(Fg*Fg)*(Pg_1*Pg_1)*t43314*t43308*t43309*1.0/pow(t43293,1.1E1/3.0)*(1.0/4.0)-Cinf*Fg*Pg_1*1.0/sqrt(t43312)*t43314*t43309*1.0/pow(t43293,5.0/2.0)*(3.0/4.0);
            }
            
            // v_gamma_ab_gamma_ab
            if (deriv >= 2) {
                double t43316 = rho_a+rho_b;
                double t43317 = c*c;
                double t43318 = 1.0/pow(t43316,2.0/3.0);
                double t43319 = 1.0/pow(t43316,1.0/3.0);
                double t43320 = Bg*t43317*t43318;
                double t43321 = Cg_2*c*t43319;
                double t43322 = Cg_1+t43320+t43321;
                double t43323 = 1.0/t43316;
                double t43324 = Bg*c*t43323*t43317*1.0E4;
                double t43325 = Cg_4*t43317*t43318;
                double t43326 = Cg_3*c*t43319;
                double t43327 = t43324+t43325+t43326+1.0;
                double t43328 = 1.0/t43327;
                double t43329 = t43322*t43328;
                double t43330 = Cx+t43329;
                double t43331 = 1.0/t43330;
                double t43332 = 1.0/two_13;
                double t43333 = 1.0/pow(t43316,7.0/6.0);
                double t43334 = gamma_ab*2.0;
                double t43335 = gamma_aa+gamma_bb+t43334;
                double t43336 = sqrt(t43335);
                double t43337 = exp(-Cinf*Fg*Pg_1*t43331*t43333*t43336);
                v_gamma_ab_gamma_ab[Q] += scale * (Cinf*Cinf)*(Fg*Fg)*(Pg_1*Pg_1)*t43331*t43332*1.0/pow(t43316,1.1E1/3.0)*t43337-Cinf*Fg*Pg_1*t43332*1.0/pow(t43316,5.0/2.0)*1.0/sqrt(t43335)*t43337*3.0;
            }
            
            // v_gamma_ab_gamma_bb
            if (deriv >= 2) {
                double t43339 = rho_a+rho_b;
                double t43340 = c*c;
                double t43341 = 1.0/pow(t43339,2.0/3.0);
                double t43342 = 1.0/pow(t43339,1.0/3.0);
                double t43343 = Bg*t43340*t43341;
                double t43344 = Cg_2*c*t43342;
                double t43345 = Cg_1+t43343+t43344;
                double t43346 = 1.0/t43339;
                double t43347 = Bg*c*t43340*t43346*1.0E4;
                double t43348 = Cg_4*t43340*t43341;
                double t43349 = Cg_3*c*t43342;
                double t43350 = t43347+t43348+t43349+1.0;
                double t43351 = 1.0/t43350;
                double t43352 = t43351*t43345;
                double t43353 = Cx+t43352;
                double t43354 = 1.0/t43353;
                double t43355 = 1.0/two_13;
                double t43356 = 1.0/pow(t43339,7.0/6.0);
                double t43357 = gamma_ab*2.0;
                double t43358 = gamma_aa+gamma_bb+t43357;
                double t43359 = sqrt(t43358);
                double t43360 = exp(-Cinf*Fg*Pg_1*t43354*t43356*t43359);
                v_gamma_ab_gamma_bb[Q] += scale * (Cinf*Cinf)*(Fg*Fg)*(Pg_1*Pg_1)*t43360*t43354*t43355*1.0/pow(t43339,1.1E1/3.0)*(1.0/2.0)-Cinf*Fg*Pg_1*t43360*t43355*1.0/pow(t43339,5.0/2.0)*1.0/sqrt(t43358)*(3.0/2.0);
            }
            
            // v_gamma_bb_gamma_bb
            if (deriv >= 2) {
                double t43362 = rho_a+rho_b;
                double t43363 = c*c;
                double t43364 = 1.0/pow(t43362,2.0/3.0);
                double t43365 = 1.0/pow(t43362,1.0/3.0);
                double t43366 = Bg*t43363*t43364;
                double t43367 = Cg_2*c*t43365;
                double t43368 = Cg_1+t43366+t43367;
                double t43369 = 1.0/t43362;
                double t43370 = Bg*c*t43363*t43369*1.0E4;
                double t43371 = Cg_4*t43363*t43364;
                double t43372 = Cg_3*c*t43365;
                double t43373 = t43370+t43371+t43372+1.0;
                double t43374 = 1.0/t43373;
                double t43375 = t43374*t43368;
                double t43376 = Cx+t43375;
                double t43377 = 1.0/t43376;
                double t43378 = 1.0/two_13;
                double t43379 = 1.0/pow(t43362,7.0/6.0);
                double t43380 = gamma_ab*2.0;
                double t43381 = gamma_aa+gamma_bb+t43380;
                double t43382 = sqrt(t43381);
                double t43383 = exp(-Cinf*Fg*Pg_1*t43382*t43377*t43379);
                v_gamma_bb_gamma_bb[Q] += scale * (Cinf*Cinf)*(Fg*Fg)*(Pg_1*Pg_1)*1.0/pow(t43362,1.1E1/3.0)*t43383*t43377*t43378*(1.0/4.0)-Cinf*Fg*Pg_1*1.0/pow(t43362,5.0/2.0)*1.0/sqrt(t43381)*t43383*t43378*(3.0/4.0);
            }
            
            // v_rho_a_gamma_aa
            if (deriv >= 2) {
                double t42983 = rho_a+rho_b;
                double t42984 = c*c;
                double t42985 = 1.0/pow(t42983,2.0/3.0);
                double t42986 = 1.0/pow(t42983,1.0/3.0);
                double t42987 = 1.0/pow(t42983,4.0/3.0);
                double t42988 = 1.0/t42983;
                double t42989 = Bg*c*t42984*t42988*1.0E4;
                double t42990 = Cg_4*t42984*t42985;
                double t42991 = Cg_3*c*t42986;
                double t42992 = t42990+t42991+t42989+1.0;
                double t42993 = 1.0/t42992;
                double t42994 = 1.0/pow(t42983,5.0/3.0);
                double t42995 = Bg*t42984*t42985;
                double t42996 = Cg_2*c*t42986;
                double t42997 = Cg_1+t42995+t42996;
                double t42998 = 1.0/two_13;
                double t42999 = 1.0/pow(t42983,7.0/6.0);
                double t43000 = t42993*t42997;
                double t43001 = Cx+t43000;
                double t43002 = 1.0/t43001;
                double t43003 = gamma_ab*2.0;
                double t43004 = gamma_aa+gamma_bb+t43003;
                double t43005 = sqrt(t43004);
                double t43007 = Cinf*Fg*Pg_1*t42999*t43002*t43005;
                double t43006 = exp(-t43007);
                double t43008 = Bg*t42984*t42994*(2.0/3.0);
                double t43009 = Cg_2*c*t42987*(1.0/3.0);
                double t43010 = t43008+t43009;
                double t43011 = t42993*t43010;
                double t43012 = 1.0/(t42983*t42983);
                double t43013 = Bg*c*t42984*t43012*1.0E4;
                double t43014 = Cg_4*t42984*t42994*(2.0/3.0);
                double t43015 = Cg_3*c*t42987*(1.0/3.0);
                double t43016 = t43013+t43014+t43015;
                double t43017 = 1.0/(t42992*t42992);
                double t43020 = t42997*t43016*t43017;
                double t43018 = t43011-t43020;
                double t43019 = 1.0/pow(t42983,1.3E1/6.0);
                double t43021 = 1.0/(t43001*t43001);
                double t43022 = 1.0/sqrt(t43004);
                double t43023 = Cinf*Fg*Pg_1*t43002*t43005*t43019*(7.0/6.0);
                double t43024 = t43023-Cinf*Fg*Pg_1*t42999*t43021*t43005*t43018;
                double t43025 = 1.0/pow(t42983,5.0/2.0);
                v_rho_a_gamma_aa[Q] += scale * -t42987*t42998*t43006*t43018-1.0/pow(t42983,7.0/3.0)*t42998*t43001*t43006*(4.0/3.0)+t42987*t42998*t43001*t43006*t43024+t42987*t42998*t43001*t43004*t43006*(Cinf*Fg*Pg_1*t43002*t43022*t43019*(7.0/1.2E1)-Cinf*Fg*Pg_1*t42999*t43021*t43022*t43018*(1.0/2.0))+Cinf*Fg*Pg_1*1.0/pow(t42983,7.0/2.0)*t42998*t43005*t43006*(2.0/3.0)-Cinf*Fg*Pg_1*t42998*t43005*t43006*t43024*t43025*(1.0/2.0)+Cinf*Fg*Pg_1*t42998*t43002*t43005*t43006*t43025*t43018*(1.0/2.0);
            }
            
            // v_rho_a_gamma_ab
            if (deriv >= 2) {
                double t43027 = rho_a+rho_b;
                double t43028 = c*c;
                double t43029 = 1.0/pow(t43027,2.0/3.0);
                double t43030 = 1.0/pow(t43027,1.0/3.0);
                double t43031 = 1.0/pow(t43027,4.0/3.0);
                double t43032 = 1.0/t43027;
                double t43033 = Bg*c*t43032*t43028*1.0E4;
                double t43034 = Cg_4*t43028*t43029;
                double t43035 = Cg_3*c*t43030;
                double t43036 = t43033+t43034+t43035+1.0;
                double t43037 = 1.0/t43036;
                double t43038 = 1.0/pow(t43027,5.0/3.0);
                double t43039 = Bg*t43028*t43029;
                double t43040 = Cg_2*c*t43030;
                double t43041 = Cg_1+t43040+t43039;
                double t43042 = 1.0/two_13;
                double t43043 = 1.0/pow(t43027,7.0/6.0);
                double t43044 = t43041*t43037;
                double t43045 = Cx+t43044;
                double t43046 = 1.0/t43045;
                double t43047 = gamma_ab*2.0;
                double t43048 = gamma_aa+gamma_bb+t43047;
                double t43049 = sqrt(t43048);
                double t43051 = Cinf*Fg*Pg_1*t43043*t43046*t43049;
                double t43050 = exp(-t43051);
                double t43052 = Bg*t43028*t43038*(2.0/3.0);
                double t43053 = Cg_2*c*t43031*(1.0/3.0);
                double t43054 = t43052+t43053;
                double t43055 = t43054*t43037;
                double t43056 = 1.0/(t43027*t43027);
                double t43057 = Bg*c*t43028*t43056*1.0E4;
                double t43058 = Cg_4*t43028*t43038*(2.0/3.0);
                double t43059 = Cg_3*c*t43031*(1.0/3.0);
                double t43060 = t43057+t43058+t43059;
                double t43061 = 1.0/(t43036*t43036);
                double t43064 = t43041*t43060*t43061;
                double t43062 = t43055-t43064;
                double t43063 = 1.0/pow(t43027,1.3E1/6.0);
                double t43065 = 1.0/(t43045*t43045);
                double t43066 = 1.0/sqrt(t43048);
                double t43067 = Cinf*Fg*Pg_1*t43063*t43046*t43049*(7.0/6.0);
                double t43068 = t43067-Cinf*Fg*Pg_1*t43043*t43062*t43065*t43049;
                double t43069 = 1.0/pow(t43027,5.0/2.0);
                v_rho_a_gamma_ab[Q] += scale * t43031*t43050*t43042*t43062*-2.0-t43050*t43042*1.0/pow(t43027,7.0/3.0)*t43045*(8.0/3.0)+t43031*t43050*t43042*t43045*t43068*2.0+t43031*t43050*t43042*t43045*t43048*(Cinf*Fg*Pg_1*t43063*t43046*t43066*(7.0/6.0)-Cinf*Fg*Pg_1*t43043*t43062*t43065*t43066)+Cinf*Fg*Pg_1*t43050*t43042*1.0/pow(t43027,7.0/2.0)*t43049*(4.0/3.0)-Cinf*Fg*Pg_1*t43050*t43042*t43049*t43068*t43069+Cinf*Fg*Pg_1*t43050*t43042*t43062*t43046*t43049*t43069;
            }
            
            // v_rho_a_gamma_bb
            if (deriv >= 2) {
                double t43071 = rho_a+rho_b;
                double t43072 = c*c;
                double t43073 = 1.0/pow(t43071,2.0/3.0);
                double t43074 = 1.0/pow(t43071,1.0/3.0);
                double t43075 = 1.0/pow(t43071,4.0/3.0);
                double t43076 = 1.0/t43071;
                double t43077 = Bg*c*t43072*t43076*1.0E4;
                double t43078 = Cg_4*t43072*t43073;
                double t43079 = Cg_3*c*t43074;
                double t43080 = t43077+t43078+t43079+1.0;
                double t43081 = 1.0/t43080;
                double t43082 = 1.0/pow(t43071,5.0/3.0);
                double t43083 = Bg*t43072*t43073;
                double t43084 = Cg_2*c*t43074;
                double t43085 = Cg_1+t43083+t43084;
                double t43086 = 1.0/two_13;
                double t43087 = 1.0/pow(t43071,7.0/6.0);
                double t43088 = t43081*t43085;
                double t43089 = Cx+t43088;
                double t43090 = 1.0/t43089;
                double t43091 = gamma_ab*2.0;
                double t43092 = gamma_aa+gamma_bb+t43091;
                double t43093 = sqrt(t43092);
                double t43095 = Cinf*Fg*Pg_1*t43090*t43093*t43087;
                double t43094 = exp(-t43095);
                double t43096 = Bg*t43072*t43082*(2.0/3.0);
                double t43097 = Cg_2*c*t43075*(1.0/3.0);
                double t43098 = t43096+t43097;
                double t43099 = t43081*t43098;
                double t43100 = 1.0/(t43071*t43071);
                double t43101 = Bg*c*t43100*t43072*1.0E4;
                double t43102 = Cg_4*t43072*t43082*(2.0/3.0);
                double t43103 = Cg_3*c*t43075*(1.0/3.0);
                double t43104 = t43101+t43102+t43103;
                double t43105 = 1.0/(t43080*t43080);
                double t43108 = t43104*t43105*t43085;
                double t43106 = -t43108+t43099;
                double t43107 = 1.0/pow(t43071,1.3E1/6.0);
                double t43109 = 1.0/(t43089*t43089);
                double t43110 = 1.0/sqrt(t43092);
                double t43111 = Cinf*Fg*Pg_1*t43107*t43090*t43093*(7.0/6.0);
                double t43112 = t43111-Cinf*Fg*Pg_1*t43106*t43109*t43093*t43087;
                double t43113 = 1.0/pow(t43071,5.0/2.0);
                v_rho_a_gamma_bb[Q] += scale * -t43106*t43075*t43094*t43086-1.0/pow(t43071,7.0/3.0)*t43094*t43086*t43089*(4.0/3.0)+t43112*t43075*t43094*t43086*t43089+t43092*t43075*t43094*t43086*t43089*(Cinf*Fg*Pg_1*t43110*t43107*t43090*(7.0/1.2E1)-Cinf*Fg*Pg_1*t43110*t43106*t43109*t43087*(1.0/2.0))+Cinf*Fg*Pg_1*1.0/pow(t43071,7.0/2.0)*t43093*t43094*t43086*(2.0/3.0)-Cinf*Fg*Pg_1*t43112*t43113*t43093*t43094*t43086*(1.0/2.0)+Cinf*Fg*Pg_1*t43113*t43106*t43090*t43093*t43094*t43086*(1.0/2.0);
            }
            
            // v_rho_b_gamma_aa
            if (deriv >= 2) {
                double t43115 = rho_a+rho_b;
                double t43116 = c*c;
                double t43117 = 1.0/pow(t43115,2.0/3.0);
                double t43118 = 1.0/pow(t43115,1.0/3.0);
                double t43119 = 1.0/pow(t43115,4.0/3.0);
                double t43120 = 1.0/t43115;
                double t43121 = Bg*c*t43120*t43116*1.0E4;
                double t43122 = Cg_4*t43116*t43117;
                double t43123 = Cg_3*c*t43118;
                double t43124 = t43121+t43122+t43123+1.0;
                double t43125 = 1.0/t43124;
                double t43126 = 1.0/pow(t43115,5.0/3.0);
                double t43127 = Bg*t43116*t43117;
                double t43128 = Cg_2*c*t43118;
                double t43129 = Cg_1+t43127+t43128;
                double t43130 = 1.0/two_13;
                double t43131 = 1.0/pow(t43115,7.0/6.0);
                double t43132 = t43125*t43129;
                double t43133 = Cx+t43132;
                double t43134 = 1.0/t43133;
                double t43135 = gamma_ab*2.0;
                double t43136 = gamma_aa+gamma_bb+t43135;
                double t43137 = sqrt(t43136);
                double t43139 = Cinf*Fg*Pg_1*t43131*t43134*t43137;
                double t43138 = exp(-t43139);
                double t43140 = Bg*t43116*t43126*(2.0/3.0);
                double t43141 = Cg_2*c*t43119*(1.0/3.0);
                double t43142 = t43140+t43141;
                double t43143 = t43142*t43125;
                double t43144 = 1.0/(t43115*t43115);
                double t43145 = Bg*c*t43116*t43144*1.0E4;
                double t43146 = Cg_4*t43116*t43126*(2.0/3.0);
                double t43147 = Cg_3*c*t43119*(1.0/3.0);
                double t43148 = t43145+t43146+t43147;
                double t43149 = 1.0/(t43124*t43124);
                double t43152 = t43129*t43148*t43149;
                double t43150 = t43143-t43152;
                double t43151 = 1.0/pow(t43115,1.3E1/6.0);
                double t43153 = 1.0/(t43133*t43133);
                double t43154 = 1.0/sqrt(t43136);
                double t43155 = Cinf*Fg*Pg_1*t43151*t43134*t43137*(7.0/6.0);
                double t43156 = t43155-Cinf*Fg*Pg_1*t43131*t43150*t43153*t43137;
                double t43157 = 1.0/pow(t43115,5.0/2.0);
                v_rho_b_gamma_aa[Q] += scale * -t43130*t43150*t43119*t43138-t43130*1.0/pow(t43115,7.0/3.0)*t43133*t43138*(4.0/3.0)+t43130*t43133*t43119*t43138*t43156+t43130*t43133*t43136*t43119*t43138*(Cinf*Fg*Pg_1*t43151*t43134*t43154*(7.0/1.2E1)-Cinf*Fg*Pg_1*t43131*t43150*t43153*t43154*(1.0/2.0))+Cinf*Fg*Pg_1*t43130*1.0/pow(t43115,7.0/2.0)*t43137*t43138*(2.0/3.0)-Cinf*Fg*Pg_1*t43130*t43137*t43138*t43156*t43157*(1.0/2.0)+Cinf*Fg*Pg_1*t43130*t43150*t43134*t43137*t43138*t43157*(1.0/2.0);
            }
            
            // v_rho_b_gamma_ab
            if (deriv >= 2) {
                double t43159 = rho_a+rho_b;
                double t43160 = c*c;
                double t43161 = 1.0/pow(t43159,2.0/3.0);
                double t43162 = 1.0/pow(t43159,1.0/3.0);
                double t43163 = 1.0/pow(t43159,4.0/3.0);
                double t43164 = 1.0/t43159;
                double t43165 = Bg*c*t43160*t43164*1.0E4;
                double t43166 = Cg_4*t43160*t43161;
                double t43167 = Cg_3*c*t43162;
                double t43168 = t43165+t43166+t43167+1.0;
                double t43169 = 1.0/t43168;
                double t43170 = 1.0/pow(t43159,5.0/3.0);
                double t43171 = Bg*t43160*t43161;
                double t43172 = Cg_2*c*t43162;
                double t43173 = Cg_1+t43171+t43172;
                double t43174 = 1.0/two_13;
                double t43175 = 1.0/pow(t43159,7.0/6.0);
                double t43176 = t43173*t43169;
                double t43177 = Cx+t43176;
                double t43178 = 1.0/t43177;
                double t43179 = gamma_ab*2.0;
                double t43180 = gamma_aa+gamma_bb+t43179;
                double t43181 = sqrt(t43180);
                double t43183 = Cinf*Fg*Pg_1*t43181*t43175*t43178;
                double t43182 = exp(-t43183);
                double t43184 = Bg*t43160*t43170*(2.0/3.0);
                double t43185 = Cg_2*c*t43163*(1.0/3.0);
                double t43186 = t43184+t43185;
                double t43187 = t43186*t43169;
                double t43188 = 1.0/(t43159*t43159);
                double t43189 = Bg*c*t43160*t43188*1.0E4;
                double t43190 = Cg_4*t43160*t43170*(2.0/3.0);
                double t43191 = Cg_3*c*t43163*(1.0/3.0);
                double t43192 = t43190+t43191+t43189;
                double t43193 = 1.0/(t43168*t43168);
                double t43196 = t43173*t43192*t43193;
                double t43194 = t43187-t43196;
                double t43195 = 1.0/pow(t43159,1.3E1/6.0);
                double t43197 = 1.0/(t43177*t43177);
                double t43198 = 1.0/sqrt(t43180);
                double t43199 = Cinf*Fg*Pg_1*t43181*t43195*t43178*(7.0/6.0);
                double t43200 = t43199-Cinf*Fg*Pg_1*t43181*t43175*t43194*t43197;
                double t43201 = 1.0/pow(t43159,5.0/2.0);
                v_rho_b_gamma_ab[Q] += scale * t43163*t43182*t43174*t43194*-2.0-t43182*t43174*1.0/pow(t43159,7.0/3.0)*t43177*(8.0/3.0)+t43200*t43163*t43182*t43174*t43177*2.0+t43180*t43163*t43182*t43174*t43177*(Cinf*Fg*Pg_1*t43195*t43178*t43198*(7.0/6.0)-Cinf*Fg*Pg_1*t43175*t43194*t43197*t43198)+Cinf*Fg*Pg_1*t43181*t43182*t43174*1.0/pow(t43159,7.0/2.0)*(4.0/3.0)-Cinf*Fg*Pg_1*t43200*t43201*t43181*t43182*t43174+Cinf*Fg*Pg_1*t43201*t43181*t43182*t43174*t43194*t43178;
            }
            
            // v_rho_b_gamma_bb
            if (deriv >= 2) {
                double t43203 = rho_a+rho_b;
                double t43204 = c*c;
                double t43205 = 1.0/pow(t43203,2.0/3.0);
                double t43206 = 1.0/pow(t43203,1.0/3.0);
                double t43207 = 1.0/pow(t43203,4.0/3.0);
                double t43208 = 1.0/t43203;
                double t43209 = Bg*c*t43204*t43208*1.0E4;
                double t43210 = Cg_4*t43204*t43205;
                double t43211 = Cg_3*c*t43206;
                double t43212 = t43210+t43211+t43209+1.0;
                double t43213 = 1.0/t43212;
                double t43214 = 1.0/pow(t43203,5.0/3.0);
                double t43215 = Bg*t43204*t43205;
                double t43216 = Cg_2*c*t43206;
                double t43217 = Cg_1+t43215+t43216;
                double t43218 = 1.0/two_13;
                double t43219 = 1.0/pow(t43203,7.0/6.0);
                double t43220 = t43213*t43217;
                double t43221 = Cx+t43220;
                double t43222 = 1.0/t43221;
                double t43223 = gamma_ab*2.0;
                double t43224 = gamma_aa+gamma_bb+t43223;
                double t43225 = sqrt(t43224);
                double t43227 = Cinf*Fg*Pg_1*t43222*t43225*t43219;
                double t43226 = exp(-t43227);
                double t43228 = Bg*t43204*t43214*(2.0/3.0);
                double t43229 = Cg_2*c*t43207*(1.0/3.0);
                double t43230 = t43228+t43229;
                double t43231 = t43230*t43213;
                double t43232 = 1.0/(t43203*t43203);
                double t43233 = Bg*c*t43204*t43232*1.0E4;
                double t43234 = Cg_4*t43204*t43214*(2.0/3.0);
                double t43235 = Cg_3*c*t43207*(1.0/3.0);
                double t43236 = t43233+t43234+t43235;
                double t43237 = 1.0/(t43212*t43212);
                double t43240 = t43217*t43236*t43237;
                double t43238 = t43231-t43240;
                double t43239 = 1.0/pow(t43203,1.3E1/6.0);
                double t43241 = 1.0/(t43221*t43221);
                double t43242 = 1.0/sqrt(t43224);
                double t43243 = Cinf*Fg*Pg_1*t43222*t43225*t43239*(7.0/6.0);
                double t43244 = t43243-Cinf*Fg*Pg_1*t43241*t43225*t43219*t43238;
                double t43245 = 1.0/pow(t43203,5.0/2.0);
                v_rho_b_gamma_bb[Q] += scale * -t43207*t43226*t43218*t43238-1.0/pow(t43203,7.0/3.0)*t43221*t43226*t43218*(4.0/3.0)+t43221*t43207*t43226*t43244*t43218+t43221*t43224*t43207*t43226*t43218*(Cinf*Fg*Pg_1*t43222*t43242*t43239*(7.0/1.2E1)-Cinf*Fg*Pg_1*t43241*t43242*t43219*t43238*(1.0/2.0))+Cinf*Fg*Pg_1*1.0/pow(t43203,7.0/2.0)*t43225*t43226*t43218*(2.0/3.0)-Cinf*Fg*Pg_1*t43225*t43226*t43244*t43218*t43245*(1.0/2.0)+Cinf*Fg*Pg_1*t43222*t43225*t43226*t43218*t43245*t43238*(1.0/2.0);
            }
            
        } else {
            // v
            if (deriv >= 0) {
                double t39936 = rho_a+rho_b;
                double t39937 = 1.0/pow(t39936,1.0/3.0);
                double t39938 = 1.0/t39936;
                double t39939 = rho_a-rho_b;
                double t39940 = t39938*t39939;
                double t39941 = c*t39937;
                double t39942 = log(t39941);
                double t39943 = EcPhd_1*t39942;
                double t39944 = two_13*2.0;
                double t39945 = t39944-2.0;
                double t39946 = 1.0/t39945;
                double t39947 = sqrt(t39941);
                double t39948 = EcPld_2*t39947;
                double t39949 = EcPld_3*c*t39937;
                double t39950 = t39948+t39949+1.0;
                double t39951 = 1.0/t39950;
                double t39952 = EcPld_1*t39951;
                double t39953 = t39940+1.0;
                double t39954 = pow(t39953,4.0/3.0);
                double t39955 = -t39940+1.0;
                double t39956 = pow(t39955,4.0/3.0);
                double t39957 = t39954+t39956-2.0;
                double t39958 = c*c;
                double t39959 = 1.0/pow(t39936,2.0/3.0);
                double t39960 = Bg*t39958*t39959;
                double t39961 = Cg_2*c*t39937;
                double t39962 = Cg_1+t39960+t39961;
                double t39963 = Bg*c*t39938*t39958*1.0E4;
                double t39964 = Cg_4*t39958*t39959;
                double t39965 = Cg_3*c*t39937;
                double t39966 = t39963+t39964+t39965+1.0;
                double t39967 = 1.0/t39966;
                double t39968 = t39962*t39967;
                double t39969 = Cx+t39968;
                double t39970 = gamma_ab*2.0;
                double t39971 = gamma_aa+gamma_bb+t39970;
                v[Q] += scale * t39936*(heaviside(-c*t39937+1.0)*(EcPhd_2+t39943+t39946*t39957*(EcFhd_2-EcPhd_2-t39943+EcFhd_1*t39942+EcFhd_4*c*t39937-EcPhd_4*c*t39937+EcFhd_3*c*t39942*t39937-EcPhd_3*c*t39942*t39937)+EcPhd_4*c*t39937+EcPhd_3*c*t39942*t39937)+heaviside(t39941-1.0)*(t39952-t39946*t39957*(t39952-EcFld_1/(EcFld_2*t39947+EcFld_3*c*t39937+1.0))))+(t39971*1.0/pow(t39936,4.0/3.0)*t39969*exp(-(Cinf*Fg*Pg_1*sqrt(t39971)*1.0/pow(t39936,7.0/6.0))/t39969)*1.0/sqrt(pow(t39938*t39939*(-1.0/2.0)+1.0/2.0,5.0/3.0)+pow(t39938*t39939*(1.0/2.0)+1.0/2.0,5.0/3.0)))/two_13;
            }
            
            // v_rho_a
            if (deriv >= 1) {
                double t39973 = rho_a+rho_b;
                double t39974 = 1.0/pow(t39973,1.0/3.0);
                double t39975 = 1.0/t39973;
                double t39976 = rho_a-rho_b;
                double t39977 = t39975*t39976;
                double t39978 = c*t39974;
                double t39979 = log(t39978);
                double t39980 = EcPhd_1*t39979;
                double t39981 = 1.0/pow(t39973,4.0/3.0);
                double t39982 = two_13*2.0;
                double t39983 = t39982-2.0;
                double t39984 = 1.0/t39983;
                double t39985 = t39977+1.0;
                double t39986 = pow(t39985,4.0/3.0);
                double t39987 = -t39977+1.0;
                double t39988 = pow(t39987,4.0/3.0);
                double t39989 = t39986+t39988-2.0;
                double t39990 = EcPhd_1*t39975*(1.0/3.0);
                double t39991 = EcPhd_3*c*t39981*(1.0/3.0);
                double t39992 = EcPhd_4*c*t39981*(1.0/3.0);
                double t39993 = 1.0/(t39973*t39973);
                double t40004 = t39993*t39976;
                double t39994 = t39975-t40004;
                double t39995 = EcFhd_1*t39979;
                double t39996 = EcFhd_4*c*t39974;
                double t39997 = EcPhd_4*c*t39974;
                double t39998 = EcFhd_3*c*t39974*t39979;
                double t39999 = EcPhd_3*c*t39974*t39979;
                double t40000 = EcPhd_3*c*t39981*t39979*(1.0/3.0);
                double t40001 = 1.0/sqrt(t39978);
                double t40002 = sqrt(t39978);
                double t40003 = pow(t39985,1.0/3.0);
                double t40005 = t39994*t40003*(4.0/3.0);
                double t40006 = pow(t39987,1.0/3.0);
                double t40007 = t40005-t39994*t40006*(4.0/3.0);
                double t40008 = EcFld_2*t40002;
                double t40009 = EcFld_3*c*t39974;
                double t40010 = t40008+t40009+1.0;
                double t40011 = EcPld_2*t40002;
                double t40012 = EcPld_3*c*t39974;
                double t40013 = t40011+t40012+1.0;
                double t40014 = EcPld_3*c*t39981*(1.0/3.0);
                double t40015 = EcPld_2*c*t39981*t40001*(1.0/6.0);
                double t40016 = t40014+t40015;
                double t40017 = 1.0/(t40013*t40013);
                double t40018 = t39978-1.0;
                double t40019 = EcFhd_2-EcPhd_2-t39980+t39995+t39996-t39997+t39998-t39999;
                double t40020 = dirac(t40018);
                double t40021 = 1.0/t40013;
                double t40022 = EcPld_1*t40021;
                double t40023 = 1.0/t40010;
                double t40026 = EcFld_1*t40023;
                double t40024 = t40022-t40026;
                double t40025 = heaviside(t40018);
                double t40027 = t40022-t39984*t39989*t40024;
                double t40028 = c*c;
                double t40029 = 1.0/pow(t39973,2.0/3.0);
                double t40030 = Bg*c*t39975*t40028*1.0E4;
                double t40031 = Cg_4*t40028*t40029;
                double t40032 = Cg_3*c*t39974;
                double t40033 = t40030+t40031+t40032+1.0;
                double t40034 = 1.0/t40033;
                double t40035 = 1.0/pow(t39973,5.0/3.0);
                double t40036 = Bg*t40028*t40029;
                double t40037 = Cg_2*c*t39974;
                double t40038 = Cg_1+t40036+t40037;
                double t40039 = gamma_ab*2.0;
                double t40040 = gamma_aa+gamma_bb+t40039;
                double t40041 = 1.0/two_13;
                double t40042 = 1.0/pow(t39973,7.0/6.0);
                double t40043 = t40034*t40038;
                double t40044 = Cx+t40043;
                double t40045 = 1.0/t40044;
                double t40046 = sqrt(t40040);
                double t40051 = Cinf*Fg*Pg_1*t40042*t40045*t40046;
                double t40047 = exp(-t40051);
                double t40048 = t39975*t39976*(1.0/2.0);
                double t40049 = t40048+1.0/2.0;
                double t40050 = pow(t40049,5.0/3.0);
                double t40052 = -t40048+1.0/2.0;
                double t40053 = pow(t40052,5.0/3.0);
                double t40054 = t40050+t40053;
                double t40055 = 1.0/sqrt(t40054);
                double t40056 = Bg*t40035*t40028*(2.0/3.0);
                double t40057 = Cg_2*c*t39981*(1.0/3.0);
                double t40058 = t40056+t40057;
                double t40059 = t40034*t40058;
                double t40060 = Bg*c*t39993*t40028*1.0E4;
                double t40061 = Cg_4*t40035*t40028*(2.0/3.0);
                double t40062 = Cg_3*c*t39981*(1.0/3.0);
                double t40063 = t40060+t40061+t40062;
                double t40064 = 1.0/(t40033*t40033);
                double t40065 = t40059-t40063*t40064*t40038;
                double t40066 = t39975*(1.0/2.0);
                double t40067 = t40066-t39993*t39976*(1.0/2.0);
                v_rho_a[Q] += scale * -t39973*(heaviside(-t39978+1.0)*(t39990+t39991+t39992+t40000-t39984*t39989*(t39990+t39991+t39992+t40000-EcFhd_1*t39975*(1.0/3.0)-EcFhd_3*c*t39981*(1.0/3.0)-EcFhd_4*c*t39981*(1.0/3.0)-EcFhd_3*c*t39981*t39979*(1.0/3.0))-t39984*t40007*t40019)-t40025*(t39984*t39989*(EcFld_1*1.0/(t40010*t40010)*(EcFld_3*c*t39981*(1.0/3.0)+EcFld_2*c*t39981*t40001*(1.0/6.0))-EcPld_1*t40016*t40017)+EcPld_1*t40016*t40017-t39984*t40024*t40007)+c*t39981*t40020*t40027*(1.0/3.0)-c*t39981*t40020*(EcPhd_2+t39980+t39997+t39999+t39984*t39989*t40019)*(1.0/3.0))+t40025*t40027+heaviside(-c*t39974+1.0)*(EcPhd_2+t39980+t39997+t39999+t39984*t39989*(EcFhd_2-EcPhd_2-t39980+t39995+t39996+t39998-EcPhd_4*c*t39974-EcPhd_3*c*t39974*t39979))-1.0/pow(t39973,7.0/3.0)*t40040*t40041*t40044*t40055*t40047*(4.0/3.0)-t39981*t40040*t40041*t40047*t40065*1.0/sqrt(t40050+pow(t39975*t39976*(-1.0/2.0)+1.0/2.0,5.0/3.0))+t39981*t40040*t40041*t40044*1.0/pow(t40054,3.0/2.0)*t40047*(pow(t40052,2.0/3.0)*t40067*(5.0/3.0)-pow(t40049,2.0/3.0)*t40067*(5.0/3.0))*(1.0/2.0)+t39981*t40040*t40041*t40044*t40055*t40047*(Cinf*Fg*Pg_1*1.0/pow(t39973,1.3E1/6.0)*t40045*t40046*(7.0/6.0)-Cinf*Fg*Pg_1*t40042*1.0/(t40044*t40044)*t40046*t40065);
            }
            
            // v_rho_b
            if (deriv >= 1) {
                double t40069 = rho_a+rho_b;
                double t40070 = 1.0/pow(t40069,1.0/3.0);
                double t40071 = 1.0/t40069;
                double t40072 = rho_a-rho_b;
                double t40073 = t40071*t40072;
                double t40074 = c*t40070;
                double t40075 = log(t40074);
                double t40076 = EcPhd_1*t40075;
                double t40077 = 1.0/pow(t40069,4.0/3.0);
                double t40078 = two_13*2.0;
                double t40079 = t40078-2.0;
                double t40080 = 1.0/t40079;
                double t40081 = t40073+1.0;
                double t40082 = pow(t40081,4.0/3.0);
                double t40083 = -t40073+1.0;
                double t40084 = pow(t40083,4.0/3.0);
                double t40085 = t40082+t40084-2.0;
                double t40086 = EcPhd_1*t40071*(1.0/3.0);
                double t40087 = EcPhd_3*c*t40077*(1.0/3.0);
                double t40088 = EcPhd_4*c*t40077*(1.0/3.0);
                double t40089 = 1.0/(t40069*t40069);
                double t40090 = t40072*t40089;
                double t40091 = t40071+t40090;
                double t40092 = EcFhd_1*t40075;
                double t40093 = EcFhd_4*c*t40070;
                double t40094 = EcPhd_4*c*t40070;
                double t40095 = EcFhd_3*c*t40070*t40075;
                double t40096 = EcPhd_3*c*t40070*t40075;
                double t40097 = EcPhd_3*c*t40075*t40077*(1.0/3.0);
                double t40098 = 1.0/sqrt(t40074);
                double t40099 = sqrt(t40074);
                double t40100 = pow(t40081,1.0/3.0);
                double t40101 = t40100*t40091*(4.0/3.0);
                double t40102 = pow(t40083,1.0/3.0);
                double t40103 = t40101-t40102*t40091*(4.0/3.0);
                double t40104 = EcFld_2*t40099;
                double t40105 = EcFld_3*c*t40070;
                double t40106 = t40104+t40105+1.0;
                double t40107 = EcPld_2*t40099;
                double t40108 = EcPld_3*c*t40070;
                double t40109 = t40107+t40108+1.0;
                double t40110 = EcPld_3*c*t40077*(1.0/3.0);
                double t40111 = EcPld_2*c*t40077*t40098*(1.0/6.0);
                double t40112 = t40110+t40111;
                double t40113 = 1.0/(t40109*t40109);
                double t40114 = t40074-1.0;
                double t40115 = EcFhd_2-EcPhd_2+t40092+t40093-t40076-t40094+t40095-t40096;
                double t40116 = dirac(t40114);
                double t40117 = 1.0/t40109;
                double t40118 = EcPld_1*t40117;
                double t40119 = 1.0/t40106;
                double t40122 = EcFld_1*t40119;
                double t40120 = -t40122+t40118;
                double t40121 = heaviside(t40114);
                double t40123 = c*c;
                double t40124 = 1.0/pow(t40069,2.0/3.0);
                double t40125 = Bg*c*t40123*t40071*1.0E4;
                double t40126 = Cg_4*t40123*t40124;
                double t40127 = Cg_3*c*t40070;
                double t40128 = t40125+t40126+t40127+1.0;
                double t40129 = 1.0/t40128;
                double t40130 = 1.0/pow(t40069,5.0/3.0);
                double t40131 = Bg*t40123*t40124;
                double t40132 = Cg_2*c*t40070;
                double t40133 = Cg_1+t40131+t40132;
                double t40134 = gamma_ab*2.0;
                double t40135 = gamma_aa+gamma_bb+t40134;
                double t40136 = 1.0/two_13;
                double t40137 = 1.0/pow(t40069,7.0/6.0);
                double t40138 = t40133*t40129;
                double t40139 = Cx+t40138;
                double t40140 = 1.0/t40139;
                double t40141 = sqrt(t40135);
                double t40146 = Cinf*Fg*Pg_1*t40140*t40141*t40137;
                double t40142 = exp(-t40146);
                double t40143 = t40071*t40072*(1.0/2.0);
                double t40144 = t40143+1.0/2.0;
                double t40145 = pow(t40144,5.0/3.0);
                double t40147 = -t40143+1.0/2.0;
                double t40148 = pow(t40147,5.0/3.0);
                double t40149 = t40145+t40148;
                double t40150 = 1.0/sqrt(t40149);
                double t40151 = Bg*t40130*t40123*(2.0/3.0);
                double t40152 = Cg_2*c*t40077*(1.0/3.0);
                double t40153 = t40151+t40152;
                double t40154 = t40153*t40129;
                double t40155 = Bg*c*t40123*t40089*1.0E4;
                double t40156 = Cg_4*t40130*t40123*(2.0/3.0);
                double t40157 = Cg_3*c*t40077*(1.0/3.0);
                double t40158 = t40155+t40156+t40157;
                double t40159 = 1.0/(t40128*t40128);
                double t40160 = t40154-t40133*t40158*t40159;
                double t40161 = t40071*(1.0/2.0);
                double t40162 = t40072*t40089*(1.0/2.0);
                double t40163 = t40161+t40162;
                v_rho_b[Q] += scale * -t40069*(heaviside(-t40074+1.0)*(t40086+t40087+t40088+t40097-t40080*t40085*(t40086+t40087+t40088+t40097-EcFhd_1*t40071*(1.0/3.0)-EcFhd_3*c*t40077*(1.0/3.0)-EcFhd_4*c*t40077*(1.0/3.0)-EcFhd_3*c*t40075*t40077*(1.0/3.0))+t40103*t40115*t40080)-t40121*(t40080*t40085*(EcFld_1*1.0/(t40106*t40106)*(EcFld_3*c*t40077*(1.0/3.0)+EcFld_2*c*t40077*t40098*(1.0/6.0))-EcPld_1*t40112*t40113)+EcPld_1*t40112*t40113+t40120*t40103*t40080)+c*t40116*t40077*(t40118-t40120*t40080*t40085)*(1.0/3.0)-c*t40116*t40077*(EcPhd_2+t40076+t40094+t40096+t40115*t40080*t40085)*(1.0/3.0))+heaviside(-c*t40070+1.0)*(EcPhd_2+t40076+t40094+t40096+t40080*t40085*(EcFhd_2-EcPhd_2+t40092+t40093-t40076+t40095-EcPhd_4*c*t40070-EcPhd_3*c*t40070*t40075))+t40121*(t40118+t40080*t40085*(t40122-t40118))-t40150*t40142*t40135*t40136*t40139*1.0/pow(t40069,7.0/3.0)*(4.0/3.0)-t40142*t40160*t40135*t40136*t40077*1.0/sqrt(t40145+pow(t40071*t40072*(-1.0/2.0)+1.0/2.0,5.0/3.0))+t40142*t40135*t40136*t40139*t40077*1.0/pow(t40149,3.0/2.0)*(pow(t40144,2.0/3.0)*t40163*(5.0/3.0)-t40163*pow(t40147,2.0/3.0)*(5.0/3.0))*(1.0/2.0)+t40150*t40142*t40135*t40136*t40139*t40077*(Cinf*Fg*Pg_1*t40140*t40141*1.0/pow(t40069,1.3E1/6.0)*(7.0/6.0)-Cinf*Fg*Pg_1*t40141*t40160*t40137*1.0/(t40139*t40139));
            }
            
            // v_gamma_aa
            if (deriv >= 1) {
                double t40165 = rho_a+rho_b;
                double t40166 = c*c;
                double t40167 = 1.0/pow(t40165,2.0/3.0);
                double t40168 = 1.0/pow(t40165,1.0/3.0);
                double t40169 = 1.0/t40165;
                double t40170 = rho_a-rho_b;
                double t40171 = Bg*t40166*t40167;
                double t40172 = Cg_2*c*t40168;
                double t40173 = Cg_1+t40171+t40172;
                double t40174 = Bg*c*t40166*t40169*1.0E4;
                double t40175 = Cg_4*t40166*t40167;
                double t40176 = Cg_3*c*t40168;
                double t40177 = t40174+t40175+t40176+1.0;
                double t40178 = 1.0/t40177;
                double t40179 = t40173*t40178;
                double t40180 = Cx+t40179;
                double t40181 = 1.0/two_13;
                double t40182 = 1.0/pow(t40165,7.0/6.0);
                double t40183 = 1.0/t40180;
                double t40184 = gamma_ab*2.0;
                double t40185 = gamma_aa+gamma_bb+t40184;
                double t40186 = sqrt(t40185);
                double t40187 = exp(-Cinf*Fg*Pg_1*t40182*t40183*t40186);
                double t40188 = t40170*t40169*(1.0/2.0);
                double t40189 = t40188+1.0/2.0;
                double t40190 = pow(t40189,5.0/3.0);
                v_gamma_aa[Q] += scale * t40180*t40181*1.0/pow(t40165,4.0/3.0)*t40187*1.0/sqrt(t40190+pow(t40170*t40169*(-1.0/2.0)+1.0/2.0,5.0/3.0))-Cinf*Fg*Pg_1*t40181*1.0/pow(t40165,5.0/2.0)*t40186*t40187*1.0/sqrt(t40190+pow(-t40188+1.0/2.0,5.0/3.0))*(1.0/2.0);
            }
            
            // v_gamma_ab
            if (deriv >= 1) {
                double t40192 = rho_a+rho_b;
                double t40193 = c*c;
                double t40194 = 1.0/pow(t40192,2.0/3.0);
                double t40195 = 1.0/pow(t40192,1.0/3.0);
                double t40196 = 1.0/t40192;
                double t40197 = rho_a-rho_b;
                double t40198 = Bg*t40193*t40194;
                double t40199 = Cg_2*c*t40195;
                double t40200 = Cg_1+t40198+t40199;
                double t40201 = Bg*c*t40193*t40196*1.0E4;
                double t40202 = Cg_4*t40193*t40194;
                double t40203 = Cg_3*c*t40195;
                double t40204 = t40201+t40202+t40203+1.0;
                double t40205 = 1.0/t40204;
                double t40206 = t40200*t40205;
                double t40207 = Cx+t40206;
                double t40208 = 1.0/two_13;
                double t40209 = 1.0/pow(t40192,7.0/6.0);
                double t40210 = 1.0/t40207;
                double t40211 = gamma_ab*2.0;
                double t40212 = gamma_aa+gamma_bb+t40211;
                double t40213 = sqrt(t40212);
                double t40214 = exp(-Cinf*Fg*Pg_1*t40210*t40213*t40209);
                double t40215 = t40196*t40197*(1.0/2.0);
                double t40216 = t40215+1.0/2.0;
                double t40217 = pow(t40216,5.0/3.0);
                v_gamma_ab[Q] += scale * t40214*t40207*t40208*1.0/pow(t40192,4.0/3.0)*1.0/sqrt(t40217+pow(t40196*t40197*(-1.0/2.0)+1.0/2.0,5.0/3.0))*2.0-Cinf*Fg*Pg_1*t40213*t40214*t40208*1.0/pow(t40192,5.0/2.0)*1.0/sqrt(t40217+pow(-t40215+1.0/2.0,5.0/3.0));
            }
            
            // v_gamma_bb
            if (deriv >= 1) {
                double t40219 = rho_a+rho_b;
                double t40220 = c*c;
                double t40221 = 1.0/pow(t40219,2.0/3.0);
                double t40222 = 1.0/pow(t40219,1.0/3.0);
                double t40223 = 1.0/t40219;
                double t40224 = rho_a-rho_b;
                double t40225 = Bg*t40220*t40221;
                double t40226 = Cg_2*c*t40222;
                double t40227 = Cg_1+t40225+t40226;
                double t40228 = Bg*c*t40220*t40223*1.0E4;
                double t40229 = Cg_4*t40220*t40221;
                double t40230 = Cg_3*c*t40222;
                double t40231 = t40230+t40228+t40229+1.0;
                double t40232 = 1.0/t40231;
                double t40233 = t40232*t40227;
                double t40234 = Cx+t40233;
                double t40235 = 1.0/two_13;
                double t40236 = 1.0/pow(t40219,7.0/6.0);
                double t40237 = 1.0/t40234;
                double t40238 = gamma_ab*2.0;
                double t40239 = gamma_aa+gamma_bb+t40238;
                double t40240 = sqrt(t40239);
                double t40241 = exp(-Cinf*Fg*Pg_1*t40240*t40236*t40237);
                double t40242 = t40223*t40224*(1.0/2.0);
                double t40243 = t40242+1.0/2.0;
                double t40244 = pow(t40243,5.0/3.0);
                v_gamma_bb[Q] += scale * t40241*t40234*t40235*1.0/pow(t40219,4.0/3.0)*1.0/sqrt(t40244+pow(t40223*t40224*(-1.0/2.0)+1.0/2.0,5.0/3.0))-Cinf*Fg*Pg_1*t40240*t40241*t40235*1.0/pow(t40219,5.0/2.0)*1.0/sqrt(t40244+pow(-t40242+1.0/2.0,5.0/3.0))*(1.0/2.0);
            }
            
            // v_rho_a_rho_a
            if (deriv >= 2) {
                double t40248 = rho_a+rho_b;
                double t40249 = 1.0/pow(t40248,4.0/3.0);
                double t40250 = 1.0/pow(t40248,1.0/3.0);
                double t40251 = c*t40250;
                double t40258 = 1.0/sqrt(t40251);
                double t40260 = EcPld_3*c*t40249*(1.0/3.0);
                double t40261 = EcPld_2*c*t40249*t40258*(1.0/6.0);
                double t40252 = t40260+t40261;
                double t40253 = 1.0/t40248;
                double t40254 = rho_a-rho_b;
                double t40255 = t40253*t40254;
                double t40256 = 1.0/(t40248*t40248);
                double t40293 = t40254*t40256;
                double t40257 = t40253-t40293;
                double t40259 = sqrt(t40251);
                double t40262 = EcPld_2*t40259;
                double t40263 = EcPld_3*c*t40250;
                double t40264 = t40262+t40263+1.0;
                double t40265 = two_13*2.0;
                double t40266 = t40265-2.0;
                double t40267 = 1.0/t40266;
                double t40268 = t40255+1.0;
                double t40269 = -t40255+1.0;
                double t40270 = EcFld_3*c*t40249*(1.0/3.0);
                double t40271 = EcFld_2*c*t40249*t40258*(1.0/6.0);
                double t40272 = t40270+t40271;
                double t40273 = EcFld_2*t40259;
                double t40274 = EcFld_3*c*t40250;
                double t40275 = t40273+t40274+1.0;
                double t40276 = t40252*t40252;
                double t40277 = 1.0/(t40264*t40264*t40264);
                double t40278 = EcPld_1*t40276*t40277*2.0;
                double t40279 = 1.0/pow(t40248,7.0/3.0);
                double t40280 = 1.0/(t40275*t40275);
                double t40281 = c*c;
                double t40282 = 1.0/pow(t40248,8.0/3.0);
                double t40283 = 1.0/pow(t40251,3.0/2.0);
                double t40284 = 1.0/(t40264*t40264);
                double t40285 = EcPld_3*c*t40279*(4.0/9.0);
                double t40286 = EcPld_2*c*t40258*t40279*(2.0/9.0);
                double t40287 = t40285+t40286-EcPld_2*t40281*t40282*t40283*(1.0/3.6E1);
                double t40288 = pow(t40268,1.0/3.0);
                double t40289 = pow(t40269,1.0/3.0);
                double t40290 = t40256*2.0;
                double t40291 = 1.0/(t40248*t40248*t40248);
                double t40295 = t40254*t40291*2.0;
                double t40292 = t40290-t40295;
                double t40294 = t40257*t40257;
                double t40296 = t40292*t40289*(4.0/3.0);
                double t40297 = 1.0/pow(t40268,2.0/3.0);
                double t40298 = t40294*t40297*(4.0/9.0);
                double t40299 = 1.0/pow(t40269,2.0/3.0);
                double t40300 = t40294*t40299*(4.0/9.0);
                double t40301 = t40300+t40296+t40298-t40292*t40288*(4.0/3.0);
                double t40302 = log(t40251);
                double t40303 = pow(t40268,4.0/3.0);
                double t40304 = pow(t40269,4.0/3.0);
                double t40305 = t40303+t40304-2.0;
                double t40306 = EcPhd_1*t40256*(1.0/3.0);
                double t40307 = EcPhd_3*c*t40279*(5.0/9.0);
                double t40308 = EcPhd_4*c*t40279*(4.0/9.0);
                double t40309 = t40257*t40288*(4.0/3.0);
                double t40329 = t40257*t40289*(4.0/3.0);
                double t40310 = t40309-t40329;
                double t40311 = EcPhd_3*c*t40302*t40279*(4.0/9.0);
                double t40312 = t40251-1.0;
                double t40313 = 1.0/t40264;
                double t40314 = EcPld_1*t40313;
                double t40315 = 1.0/t40275;
                double t40334 = EcFld_1*t40315;
                double t40316 = t40314-t40334;
                double t40317 = EcFhd_1*t40302;
                double t40318 = EcPhd_1*t40302;
                double t40319 = EcFhd_4*c*t40250;
                double t40320 = EcFhd_3*c*t40302*t40250;
                double t40321 = dirac(t40312);
                double t40322 = EcFhd_1*t40253*(1.0/3.0);
                double t40323 = EcPhd_1*t40253*(1.0/3.0);
                double t40324 = EcFhd_3*c*t40249*(1.0/3.0);
                double t40325 = EcFhd_4*c*t40249*(1.0/3.0);
                double t40326 = EcPhd_3*c*t40249*(1.0/3.0);
                double t40327 = EcPhd_4*c*t40249*(1.0/3.0);
                double t40328 = EcFhd_3*c*t40302*t40249*(1.0/3.0);
                double t40330 = EcPhd_4*c*t40250;
                double t40331 = EcPhd_3*c*t40302*t40250;
                double t40332 = EcFld_1*t40280*t40272;
                double t40335 = EcPld_1*t40252*t40284;
                double t40333 = t40332-t40335;
                double t40351 = t40305*t40316*t40267;
                double t40336 = t40314-t40351;
                double t40337 = dirac(t40312,1.0);
                double t40338 = EcFhd_2-EcPhd_2+t40320-t40330-t40331+t40317-t40318+t40319;
                double t40339 = EcPld_1*t40284*t40287;
                double t40340 = t40305*t40338*t40267;
                double t40341 = EcPhd_2+t40330+t40331+t40340+t40318;
                double t40343 = EcPhd_3*c*t40302*t40249*(1.0/3.0);
                double t40342 = t40322-t40323+t40324+t40325-t40343-t40326-t40327+t40328;
                double t40344 = -t40251+1.0;
                double t40345 = heaviside(t40344);
                double t40346 = t40305*t40342*t40267;
                double t40347 = t40323+t40343+t40326+t40327+t40346-t40310*t40338*t40267;
                double t40348 = heaviside(t40312);
                double t40349 = t40305*t40333*t40267;
                double t40350 = t40335+t40349-t40310*t40316*t40267;
                double t40352 = 1.0/pow(t40248,2.0/3.0);
                double t40353 = gamma_ab*2.0;
                double t40354 = gamma_aa+gamma_bb+t40353;
                double t40355 = Bg*c*t40253*t40281*1.0E4;
                double t40356 = Cg_4*t40352*t40281;
                double t40357 = Cg_3*c*t40250;
                double t40358 = t40355+t40356+t40357+1.0;
                double t40359 = 1.0/t40358;
                double t40360 = 1.0/pow(t40248,5.0/3.0);
                double t40361 = Bg*t40352*t40281;
                double t40362 = Cg_2*c*t40250;
                double t40363 = Cg_1+t40361+t40362;
                double t40364 = 1.0/(t40358*t40358);
                double t40365 = Bg*c*t40281*t40256*1.0E4;
                double t40366 = Cg_4*t40360*t40281*(2.0/3.0);
                double t40367 = Cg_3*c*t40249*(1.0/3.0);
                double t40368 = t40365+t40366+t40367;
                double t40369 = 1.0/two_13;
                double t40370 = 1.0/pow(t40248,7.0/6.0);
                double t40371 = t40363*t40359;
                double t40372 = Cx+t40371;
                double t40373 = 1.0/t40372;
                double t40374 = sqrt(t40354);
                double t40382 = Cinf*Fg*Pg_1*t40370*t40373*t40374;
                double t40375 = exp(-t40382);
                double t40376 = t40253*t40254*(1.0/2.0);
                double t40377 = t40376+1.0/2.0;
                double t40378 = pow(t40377,5.0/3.0);
                double t40379 = Bg*t40360*t40281*(2.0/3.0);
                double t40380 = Cg_2*c*t40249*(1.0/3.0);
                double t40381 = t40380+t40379;
                double t40383 = -t40376+1.0/2.0;
                double t40384 = pow(t40383,5.0/3.0);
                double t40385 = t40384+t40378;
                double t40386 = 1.0/sqrt(t40385);
                double t40387 = t40253*(1.0/2.0);
                double t40393 = t40254*t40256*(1.0/2.0);
                double t40388 = -t40393+t40387;
                double t40395 = pow(t40383,2.0/3.0);
                double t40396 = pow(t40377,2.0/3.0);
                double t40415 = t40395*t40388*(5.0/3.0);
                double t40416 = t40396*t40388*(5.0/3.0);
                double t40389 = t40415-t40416;
                double t40390 = t40381*t40359;
                double t40392 = t40363*t40364*t40368;
                double t40391 = t40390-t40392;
                double t40394 = t40388*t40388;
                double t40397 = t40256-t40254*t40291;
                double t40398 = 1.0/(t40372*t40372);
                double t40399 = Bg*t40281*t40282*(1.0E1/9.0);
                double t40400 = Cg_2*c*t40279*(4.0/9.0);
                double t40401 = t40400+t40399;
                double t40402 = t40401*t40359;
                double t40403 = Bg*c*t40281*t40291*2.0E4;
                double t40404 = Cg_4*t40281*t40282*(1.0E1/9.0);
                double t40405 = Cg_3*c*t40279*(4.0/9.0);
                double t40406 = t40403+t40404+t40405;
                double t40407 = t40368*t40368;
                double t40408 = 1.0/(t40358*t40358*t40358);
                double t40409 = t40407*t40363*t40408*2.0;
                double t40410 = t40402+t40409-t40406*t40363*t40364-t40381*t40364*t40368*2.0;
                double t40411 = 1.0/pow(t40248,1.3E1/6.0);
                double t40412 = Cinf*Fg*Pg_1*t40411*t40373*t40374*(7.0/6.0);
                double t40417 = Cinf*Fg*Pg_1*t40370*t40391*t40374*t40398;
                double t40413 = t40412-t40417;
                double t40414 = 1.0/pow(t40385,3.0/2.0);
                v_rho_a_rho_a[Q] += scale * t40248*(t40348*(-t40339+t40278+t40305*t40267*(t40339-t40278+EcFld_1*(t40272*t40272)*1.0/(t40275*t40275*t40275)*2.0-EcFld_1*t40280*(EcFld_3*c*t40279*(4.0/9.0)-EcFld_2*t40281*t40282*t40283*(1.0/3.6E1)+EcFld_2*c*t40258*t40279*(2.0/9.0)))+t40310*t40333*t40267*2.0-t40301*t40316*t40267)+t40345*(t40311+t40306+t40307+t40308-t40305*t40267*(t40311+t40306+t40307+t40308-EcFhd_1*t40256*(1.0/3.0)-EcFhd_3*c*t40279*(5.0/9.0)-EcFhd_4*c*t40279*(4.0/9.0)-EcFhd_3*c*t40302*t40279*(4.0/9.0))-t40310*t40342*t40267*2.0+t40301*t40338*t40267)-c*t40321*t40350*t40249*(2.0/3.0)-c*t40321*t40341*t40279*(4.0/9.0)-c*t40321*t40347*t40249*(2.0/3.0)+c*t40321*t40336*t40279*(4.0/9.0)-t40341*t40281*t40282*t40337*(1.0/9.0)+t40281*t40282*t40336*t40337*(1.0/9.0))+t40350*t40348*2.0-t40345*t40347*2.0+c*t40321*t40341*t40249*(2.0/3.0)-c*t40321*t40336*t40249*(2.0/3.0)+t40354*t40391*t40375*t40386*t40279*t40369*(8.0/3.0)+t40354*t40372*1.0/pow(t40248,1.0E1/3.0)*t40375*t40386*t40369*(2.8E1/9.0)+t40410*t40354*t40249*t40375*t40369*1.0/sqrt(t40378+pow(t40253*t40254*(-1.0/2.0)+1.0/2.0,5.0/3.0))+t40354*t40372*t40249*t40375*1.0/pow(t40385,5.0/2.0)*t40369*(t40389*t40389)*(3.0/4.0)-t40354*t40372*t40249*t40375*t40386*t40369*(Cinf*Fg*Pg_1*t40373*1.0/pow(t40248,1.9E1/6.0)*t40374*(9.1E1/3.6E1)-Cinf*Fg*Pg_1*t40410*t40370*t40374*t40398-Cinf*Fg*Pg_1*t40411*t40391*t40374*t40398*(7.0/3.0)+Cinf*Fg*Pg_1*t40370*1.0/(t40372*t40372*t40372)*(t40391*t40391)*t40374*2.0)-t40414*t40354*t40372*t40249*t40375*t40369*(t40395*t40397*(5.0/3.0)-t40396*t40397*(5.0/3.0)+1.0/pow(t40383,1.0/3.0)*t40394*(1.0E1/9.0)+t40394*1.0/pow(t40377,1.0/3.0)*(1.0E1/9.0))*(1.0/2.0)-t40413*t40354*t40391*t40249*t40375*t40386*t40369*2.0-t40413*t40354*t40372*t40375*t40386*t40279*t40369*(8.0/3.0)-t40414*t40354*t40391*t40249*t40375*t40369*t40389-t40414*t40354*t40372*t40375*t40279*t40369*t40389*(4.0/3.0)+(t40413*t40413)*t40354*t40372*t40249*t40375*t40386*t40369+t40413*t40414*t40354*t40372*t40249*t40375*t40369*t40389;
            }
            
            // v_rho_a_rho_b
            if (deriv >= 2) {
                double t40419 = rho_a+rho_b;
                double t40420 = rho_a-rho_b;
                double t40421 = 1.0/t40419;
                double t40422 = t40420*t40421;
                double t40423 = 1.0/(t40419*t40419*t40419);
                double t40424 = t40422+1.0;
                double t40425 = 1.0/(t40419*t40419);
                double t40426 = t40420*t40425;
                double t40427 = -t40422+1.0;
                double t40428 = t40421+t40426;
                double t40429 = t40421-t40426;
                double t40430 = 1.0/pow(t40419,1.0/3.0);
                double t40431 = c*t40430;
                double t40432 = log(t40431);
                double t40433 = 1.0/pow(t40419,7.0/3.0);
                double t40434 = two_13*2.0;
                double t40435 = t40434-2.0;
                double t40436 = 1.0/t40435;
                double t40437 = EcPhd_1*t40425*(1.0/3.0);
                double t40438 = EcPhd_3*c*t40433*(5.0/9.0);
                double t40439 = EcPhd_4*c*t40433*(4.0/9.0);
                double t40440 = pow(t40424,1.0/3.0);
                double t40441 = pow(t40427,1.0/3.0);
                double t40442 = 1.0/pow(t40419,4.0/3.0);
                double t40443 = EcFhd_1*t40421*(1.0/3.0);
                double t40444 = EcFhd_3*c*t40442*(1.0/3.0);
                double t40445 = EcFhd_4*c*t40442*(1.0/3.0);
                double t40446 = EcFhd_3*c*t40432*t40442*(1.0/3.0);
                double t40499 = EcPhd_1*t40421*(1.0/3.0);
                double t40500 = EcPhd_3*c*t40442*(1.0/3.0);
                double t40501 = EcPhd_4*c*t40442*(1.0/3.0);
                double t40502 = EcPhd_3*c*t40432*t40442*(1.0/3.0);
                double t40447 = -t40500-t40501-t40502+t40443+t40444+t40445+t40446-t40499;
                double t40448 = EcPhd_3*c*t40432*t40433*(4.0/9.0);
                double t40452 = 1.0/sqrt(t40431);
                double t40454 = EcPld_3*c*t40442*(1.0/3.0);
                double t40455 = EcPld_2*c*t40442*t40452*(1.0/6.0);
                double t40449 = t40454+t40455;
                double t40450 = t40440*t40428*(4.0/3.0);
                double t40503 = t40441*t40428*(4.0/3.0);
                double t40451 = -t40503+t40450;
                double t40453 = sqrt(t40431);
                double t40456 = EcPld_2*t40453;
                double t40457 = EcPld_3*c*t40430;
                double t40458 = t40456+t40457+1.0;
                double t40459 = t40440*t40429*(4.0/3.0);
                double t40507 = t40441*t40429*(4.0/3.0);
                double t40460 = -t40507+t40459;
                double t40461 = EcFld_3*c*t40442*(1.0/3.0);
                double t40462 = EcFld_2*c*t40442*t40452*(1.0/6.0);
                double t40463 = t40461+t40462;
                double t40464 = EcFld_2*t40453;
                double t40465 = EcFld_3*c*t40430;
                double t40466 = t40464+t40465+1.0;
                double t40467 = 1.0/(t40466*t40466);
                double t40468 = EcFld_1*t40463*t40467;
                double t40469 = 1.0/(t40458*t40458);
                double t40509 = EcPld_1*t40449*t40469;
                double t40470 = -t40509+t40468;
                double t40471 = pow(t40424,4.0/3.0);
                double t40472 = pow(t40427,4.0/3.0);
                double t40473 = t40471+t40472-2.0;
                double t40474 = t40449*t40449;
                double t40475 = 1.0/(t40458*t40458*t40458);
                double t40476 = EcPld_1*t40474*t40475*2.0;
                double t40477 = c*c;
                double t40478 = 1.0/pow(t40419,8.0/3.0);
                double t40479 = 1.0/pow(t40431,3.0/2.0);
                double t40480 = EcPld_3*c*t40433*(4.0/9.0);
                double t40481 = EcPld_2*c*t40433*t40452*(2.0/9.0);
                double t40482 = t40480+t40481-EcPld_2*t40477*t40478*t40479*(1.0/3.6E1);
                double t40483 = t40420*t40423*t40441*(8.0/3.0);
                double t40484 = 1.0/pow(t40424,2.0/3.0);
                double t40485 = t40428*t40429*t40484*(4.0/9.0);
                double t40486 = 1.0/pow(t40427,2.0/3.0);
                double t40487 = t40428*t40429*t40486*(4.0/9.0);
                double t40488 = t40483+t40485+t40487-t40420*t40440*t40423*(8.0/3.0);
                double t40489 = t40431-1.0;
                double t40490 = 1.0/t40458;
                double t40491 = EcPld_1*t40490;
                double t40492 = 1.0/t40466;
                double t40510 = EcFld_1*t40492;
                double t40493 = -t40510+t40491;
                double t40494 = EcFhd_1*t40432;
                double t40495 = EcPhd_1*t40432;
                double t40496 = EcFhd_4*c*t40430;
                double t40497 = EcFhd_3*c*t40430*t40432;
                double t40498 = dirac(t40489);
                double t40504 = EcPhd_4*c*t40430;
                double t40505 = EcPhd_3*c*t40430*t40432;
                double t40506 = t40436*t40473*t40447;
                double t40508 = EcFhd_2-EcPhd_2-t40504-t40505+t40494-t40495+t40496+t40497;
                double t40511 = t40470*t40436*t40473;
                double t40512 = t40510-t40491;
                double t40513 = dirac(t40489,1.0);
                double t40514 = t40436*t40508*t40473;
                double t40515 = EcPhd_2+t40504+t40505+t40514+t40495;
                double t40516 = -t40431+1.0;
                double t40517 = heaviside(t40516);
                double t40518 = t40451*t40436*t40508;
                double t40519 = t40500+t40501+t40502+t40506+t40518+t40499;
                double t40520 = t40500+t40501+t40502+t40506+t40499-t40460*t40436*t40508;
                double t40521 = heaviside(t40489);
                double t40522 = t40511+t40509-t40512*t40451*t40436;
                double t40523 = t40512*t40460*t40436;
                double t40524 = t40511+t40523+t40509;
                double t40525 = t40512*t40436*t40473;
                double t40526 = t40525+t40491;
                double t40527 = 1.0/pow(t40419,2.0/3.0);
                double t40528 = gamma_ab*2.0;
                double t40529 = gamma_aa+gamma_bb+t40528;
                double t40530 = Bg*c*t40421*t40477*1.0E4;
                double t40531 = Cg_4*t40527*t40477;
                double t40532 = Cg_3*c*t40430;
                double t40533 = t40530+t40531+t40532+1.0;
                double t40534 = 1.0/t40533;
                double t40535 = 1.0/pow(t40419,5.0/3.0);
                double t40536 = Bg*t40527*t40477;
                double t40537 = Cg_2*c*t40430;
                double t40538 = Cg_1+t40536+t40537;
                double t40539 = 1.0/(t40533*t40533);
                double t40540 = Bg*c*t40425*t40477*1.0E4;
                double t40541 = Cg_4*t40535*t40477*(2.0/3.0);
                double t40542 = Cg_3*c*t40442*(1.0/3.0);
                double t40543 = t40540+t40541+t40542;
                double t40544 = 1.0/two_13;
                double t40545 = 1.0/pow(t40419,7.0/6.0);
                double t40546 = t40534*t40538;
                double t40547 = Cx+t40546;
                double t40548 = 1.0/t40547;
                double t40549 = sqrt(t40529);
                double t40557 = Cinf*Fg*Pg_1*t40545*t40548*t40549;
                double t40550 = exp(-t40557);
                double t40551 = t40420*t40421*(1.0/2.0);
                double t40552 = t40551+1.0/2.0;
                double t40553 = pow(t40552,5.0/3.0);
                double t40554 = Bg*t40535*t40477*(2.0/3.0);
                double t40555 = Cg_2*c*t40442*(1.0/3.0);
                double t40556 = t40554+t40555;
                double t40558 = -t40551+1.0/2.0;
                double t40559 = pow(t40558,5.0/3.0);
                double t40560 = t40553+t40559;
                double t40561 = 1.0/sqrt(t40560);
                double t40562 = t40421*(1.0/2.0);
                double t40563 = t40420*t40425*(1.0/2.0);
                double t40564 = t40562+t40563;
                double t40565 = t40534*t40556;
                double t40567 = t40543*t40538*t40539;
                double t40566 = t40565-t40567;
                double t40568 = 1.0/(t40547*t40547);
                double t40569 = Bg*t40477*t40478*(1.0E1/9.0);
                double t40570 = Cg_2*c*t40433*(4.0/9.0);
                double t40571 = t40570+t40569;
                double t40572 = t40534*t40571;
                double t40573 = Bg*c*t40423*t40477*2.0E4;
                double t40574 = Cg_4*t40477*t40478*(1.0E1/9.0);
                double t40575 = Cg_3*c*t40433*(4.0/9.0);
                double t40576 = t40573+t40574+t40575;
                double t40577 = t40543*t40543;
                double t40578 = 1.0/(t40533*t40533*t40533);
                double t40579 = t40538*t40577*t40578*2.0;
                double t40580 = t40572+t40579-t40543*t40556*t40539*2.0-t40538*t40539*t40576;
                double t40581 = 1.0/pow(t40419,1.3E1/6.0);
                double t40582 = Cinf*Fg*Pg_1*t40581*t40548*t40549*(7.0/6.0);
                double t40592 = Cinf*Fg*Pg_1*t40545*t40566*t40549*t40568;
                double t40583 = t40582-t40592;
                double t40584 = 1.0/pow(t40560,3.0/2.0);
                double t40585 = pow(t40558,2.0/3.0);
                double t40586 = t40562-t40563;
                double t40587 = pow(t40552,2.0/3.0);
                double t40588 = t40585*t40586*(5.0/3.0);
                double t40593 = t40586*t40587*(5.0/3.0);
                double t40589 = -t40593+t40588;
                double t40590 = t40564*t40585*(5.0/3.0);
                double t40594 = t40564*t40587*(5.0/3.0);
                double t40591 = t40590-t40594;
                v_rho_a_rho_b[Q] += scale * t40521*t40522+t40521*t40524-t40520*t40517-t40517*t40519-t40419*(-t40521*(t40476-EcPld_1*t40482*t40469-t40451*t40470*t40436+t40460*t40470*t40436+t40436*t40493*t40488-t40436*t40473*(t40476-EcFld_1*(t40463*t40463)*1.0/(t40466*t40466*t40466)*2.0-EcPld_1*t40482*t40469+EcFld_1*t40467*(EcFld_3*c*t40433*(4.0/9.0)-EcFld_2*t40477*t40478*t40479*(1.0/3.6E1)+EcFld_2*c*t40433*t40452*(2.0/9.0))))-t40517*(t40437+t40438+t40439+t40448-t40436*t40473*(t40437+t40438+t40439+t40448-EcFhd_1*t40425*(1.0/3.0)-EcFhd_3*c*t40433*(5.0/9.0)-EcFhd_4*c*t40433*(4.0/9.0)-EcFhd_3*c*t40432*t40433*(4.0/9.0))+t40451*t40436*t40447-t40460*t40436*t40447-t40436*t40508*t40488)+c*t40520*t40442*t40498*(1.0/3.0)+c*t40522*t40442*t40498*(1.0/3.0)+c*t40433*t40515*t40498*(4.0/9.0)+c*t40442*t40524*t40498*(1.0/3.0)-c*t40433*t40526*t40498*(4.0/9.0)+c*t40442*t40519*t40498*(1.0/3.0)+t40513*t40515*t40477*t40478*(1.0/9.0)-t40513*t40477*t40478*(t40491-t40436*t40473*t40493)*(1.0/9.0))+c*t40442*t40515*t40498*(2.0/3.0)-c*t40442*t40526*t40498*(2.0/3.0)+t40433*t40550*t40561*t40544*t40529*t40566*(8.0/3.0)+t40550*t40561*t40544*1.0/pow(t40419,1.0E1/3.0)*t40529*t40547*(2.8E1/9.0)+t40442*t40550*t40544*t40580*t40529*1.0/sqrt(t40553+pow(t40420*t40421*(-1.0/2.0)+1.0/2.0,5.0/3.0))-t40442*t40550*t40561*t40544*t40529*t40547*(Cinf*Fg*Pg_1*1.0/pow(t40419,1.9E1/6.0)*t40548*t40549*(9.1E1/3.6E1)-Cinf*Fg*Pg_1*t40580*t40545*t40549*t40568-Cinf*Fg*Pg_1*t40581*t40566*t40549*t40568*(7.0/3.0)+Cinf*Fg*Pg_1*t40545*1.0/(t40547*t40547*t40547)*(t40566*t40566)*t40549*2.0)-t40433*t40550*t40561*t40544*t40529*t40547*t40583*(8.0/3.0)-t40442*t40550*t40561*t40544*t40529*t40583*t40566*2.0+t40433*t40550*t40544*t40591*t40529*t40547*t40584*(2.0/3.0)+t40442*t40550*t40544*t40591*t40529*t40566*t40584*(1.0/2.0)-t40433*t40550*t40544*t40529*t40547*t40584*t40589*(2.0/3.0)-t40442*t40550*t40544*t40529*t40566*t40584*t40589*(1.0/2.0)+t40442*t40550*t40544*t40529*t40547*t40584*(1.0/pow(t40552,1.0/3.0)*t40564*t40586*(1.0E1/9.0)+t40420*t40423*t40585*(5.0/3.0)-t40420*t40423*t40587*(5.0/3.0)+t40564*1.0/pow(t40558,1.0/3.0)*(t40562-t40420*t40425*(1.0/2.0))*(1.0E1/9.0))*(1.0/2.0)+t40442*t40550*t40561*t40544*t40529*t40547*(t40583*t40583)-t40442*t40550*t40544*t40591*t40529*t40547*t40583*t40584*(1.0/2.0)+t40442*t40550*t40544*t40529*t40547*t40583*t40584*t40589*(1.0/2.0)-t40442*t40550*1.0/pow(t40560,5.0/2.0)*t40544*t40591*t40529*t40547*t40589*(3.0/4.0);
            }
            
            // v_rho_b_rho_b
            if (deriv >= 2) {
                double t40596 = rho_a+rho_b;
                double t40597 = 1.0/pow(t40596,4.0/3.0);
                double t40598 = 1.0/pow(t40596,1.0/3.0);
                double t40599 = c*t40598;
                double t40607 = 1.0/sqrt(t40599);
                double t40609 = EcPld_3*c*t40597*(1.0/3.0);
                double t40610 = EcPld_2*c*t40607*t40597*(1.0/6.0);
                double t40600 = t40610+t40609;
                double t40601 = 1.0/t40596;
                double t40602 = rho_a-rho_b;
                double t40603 = t40601*t40602;
                double t40604 = 1.0/(t40596*t40596);
                double t40605 = t40602*t40604;
                double t40606 = t40601+t40605;
                double t40608 = sqrt(t40599);
                double t40611 = EcPld_2*t40608;
                double t40612 = EcPld_3*c*t40598;
                double t40613 = t40611+t40612+1.0;
                double t40614 = two_13*2.0;
                double t40615 = t40614-2.0;
                double t40616 = 1.0/t40615;
                double t40617 = t40603+1.0;
                double t40618 = -t40603+1.0;
                double t40619 = EcFld_3*c*t40597*(1.0/3.0);
                double t40620 = EcFld_2*c*t40607*t40597*(1.0/6.0);
                double t40621 = t40620+t40619;
                double t40622 = EcFld_2*t40608;
                double t40623 = EcFld_3*c*t40598;
                double t40624 = t40622+t40623+1.0;
                double t40625 = t40600*t40600;
                double t40626 = 1.0/(t40613*t40613*t40613);
                double t40627 = EcPld_1*t40625*t40626*2.0;
                double t40628 = 1.0/pow(t40596,7.0/3.0);
                double t40629 = 1.0/(t40624*t40624);
                double t40630 = c*c;
                double t40631 = 1.0/pow(t40596,8.0/3.0);
                double t40632 = 1.0/pow(t40599,3.0/2.0);
                double t40633 = 1.0/(t40613*t40613);
                double t40634 = EcPld_3*c*t40628*(4.0/9.0);
                double t40635 = EcPld_2*c*t40607*t40628*(2.0/9.0);
                double t40636 = t40634+t40635-EcPld_2*t40630*t40631*t40632*(1.0/3.6E1);
                double t40637 = pow(t40617,1.0/3.0);
                double t40638 = pow(t40618,1.0/3.0);
                double t40639 = t40604*2.0;
                double t40640 = 1.0/(t40596*t40596*t40596);
                double t40641 = t40602*t40640*2.0;
                double t40642 = t40641+t40639;
                double t40643 = t40606*t40606;
                double t40644 = t40642*t40637*(4.0/3.0);
                double t40645 = 1.0/pow(t40617,2.0/3.0);
                double t40646 = t40643*t40645*(4.0/9.0);
                double t40647 = 1.0/pow(t40618,2.0/3.0);
                double t40648 = t40643*t40647*(4.0/9.0);
                double t40649 = t40644+t40646+t40648-t40642*t40638*(4.0/3.0);
                double t40650 = log(t40599);
                double t40651 = pow(t40617,4.0/3.0);
                double t40652 = pow(t40618,4.0/3.0);
                double t40653 = t40651+t40652-2.0;
                double t40654 = EcPhd_1*t40604*(1.0/3.0);
                double t40655 = EcPhd_3*c*t40628*(5.0/9.0);
                double t40656 = EcPhd_4*c*t40628*(4.0/9.0);
                double t40657 = t40606*t40637*(4.0/3.0);
                double t40677 = t40606*t40638*(4.0/3.0);
                double t40658 = t40657-t40677;
                double t40659 = EcPhd_3*c*t40650*t40628*(4.0/9.0);
                double t40660 = t40599-1.0;
                double t40661 = 1.0/t40613;
                double t40662 = EcPld_1*t40661;
                double t40663 = 1.0/t40624;
                double t40682 = EcFld_1*t40663;
                double t40664 = t40662-t40682;
                double t40665 = EcFhd_1*t40650;
                double t40666 = EcPhd_1*t40650;
                double t40667 = EcFhd_4*c*t40598;
                double t40668 = EcFhd_3*c*t40650*t40598;
                double t40669 = dirac(t40660);
                double t40670 = EcFhd_1*t40601*(1.0/3.0);
                double t40671 = EcPhd_1*t40601*(1.0/3.0);
                double t40672 = EcFhd_3*c*t40597*(1.0/3.0);
                double t40673 = EcFhd_4*c*t40597*(1.0/3.0);
                double t40674 = EcPhd_3*c*t40597*(1.0/3.0);
                double t40675 = EcPhd_4*c*t40597*(1.0/3.0);
                double t40676 = EcFhd_3*c*t40650*t40597*(1.0/3.0);
                double t40678 = EcPhd_4*c*t40598;
                double t40679 = EcPhd_3*c*t40650*t40598;
                double t40680 = EcFld_1*t40621*t40629;
                double t40683 = EcPld_1*t40600*t40633;
                double t40681 = t40680-t40683;
                double t40699 = t40616*t40653*t40664;
                double t40684 = t40662-t40699;
                double t40685 = dirac(t40660,1.0);
                double t40686 = EcFhd_2-EcPhd_2+t40665-t40666+t40667+t40668-t40678-t40679;
                double t40687 = EcPld_1*t40633*t40636;
                double t40688 = t40616*t40653*t40686;
                double t40689 = EcPhd_2+t40666+t40678+t40679+t40688;
                double t40691 = EcPhd_3*c*t40650*t40597*(1.0/3.0);
                double t40690 = t40670-t40671+t40672+t40673-t40691-t40674-t40675+t40676;
                double t40692 = -t40599+1.0;
                double t40693 = heaviside(t40692);
                double t40694 = t40616*t40653*t40690;
                double t40695 = t40616*t40658*t40686;
                double t40696 = t40671+t40691+t40674+t40675+t40694+t40695;
                double t40697 = heaviside(t40660);
                double t40698 = t40616*t40653*t40681;
                double t40700 = 1.0/pow(t40596,2.0/3.0);
                double t40701 = gamma_ab*2.0;
                double t40702 = gamma_aa+gamma_bb+t40701;
                double t40703 = Bg*c*t40601*t40630*1.0E4;
                double t40704 = Cg_4*t40700*t40630;
                double t40705 = Cg_3*c*t40598;
                double t40706 = t40703+t40704+t40705+1.0;
                double t40707 = 1.0/t40706;
                double t40708 = 1.0/pow(t40596,5.0/3.0);
                double t40709 = Bg*t40700*t40630;
                double t40710 = Cg_2*c*t40598;
                double t40711 = Cg_1+t40710+t40709;
                double t40712 = 1.0/(t40706*t40706);
                double t40713 = Bg*c*t40630*t40604*1.0E4;
                double t40714 = Cg_4*t40630*t40708*(2.0/3.0);
                double t40715 = Cg_3*c*t40597*(1.0/3.0);
                double t40716 = t40713+t40714+t40715;
                double t40717 = 1.0/two_13;
                double t40718 = 1.0/pow(t40596,7.0/6.0);
                double t40719 = t40711*t40707;
                double t40720 = Cx+t40719;
                double t40721 = 1.0/t40720;
                double t40722 = sqrt(t40702);
                double t40730 = Cinf*Fg*Pg_1*t40721*t40722*t40718;
                double t40723 = exp(-t40730);
                double t40724 = t40601*t40602*(1.0/2.0);
                double t40725 = t40724+1.0/2.0;
                double t40726 = pow(t40725,5.0/3.0);
                double t40727 = Bg*t40630*t40708*(2.0/3.0);
                double t40728 = Cg_2*c*t40597*(1.0/3.0);
                double t40729 = t40727+t40728;
                double t40731 = -t40724+1.0/2.0;
                double t40732 = pow(t40731,5.0/3.0);
                double t40733 = t40732+t40726;
                double t40734 = 1.0/sqrt(t40733);
                double t40735 = t40601*(1.0/2.0);
                double t40736 = t40602*t40604*(1.0/2.0);
                double t40737 = t40735+t40736;
                double t40743 = pow(t40731,2.0/3.0);
                double t40744 = pow(t40725,2.0/3.0);
                double t40764 = t40743*t40737*(5.0/3.0);
                double t40765 = t40744*t40737*(5.0/3.0);
                double t40738 = t40764-t40765;
                double t40739 = t40707*t40729;
                double t40741 = t40711*t40712*t40716;
                double t40740 = -t40741+t40739;
                double t40742 = t40737*t40737;
                double t40745 = t40602*t40640;
                double t40746 = t40604+t40745;
                double t40747 = 1.0/(t40720*t40720);
                double t40748 = Bg*t40630*t40631*(1.0E1/9.0);
                double t40749 = Cg_2*c*t40628*(4.0/9.0);
                double t40750 = t40748+t40749;
                double t40751 = t40750*t40707;
                double t40752 = Bg*c*t40630*t40640*2.0E4;
                double t40753 = Cg_4*t40630*t40631*(1.0E1/9.0);
                double t40754 = Cg_3*c*t40628*(4.0/9.0);
                double t40755 = t40752+t40753+t40754;
                double t40756 = t40716*t40716;
                double t40757 = 1.0/(t40706*t40706*t40706);
                double t40758 = t40711*t40756*t40757*2.0;
                double t40759 = t40751+t40758-t40711*t40712*t40755-t40712*t40716*t40729*2.0;
                double t40760 = 1.0/pow(t40596,1.3E1/6.0);
                double t40761 = Cinf*Fg*Pg_1*t40721*t40722*t40760*(7.0/6.0);
                double t40766 = Cinf*Fg*Pg_1*t40722*t40740*t40718*t40747;
                double t40762 = t40761-t40766;
                double t40763 = 1.0/pow(t40733,3.0/2.0);
                v_rho_b_rho_b[Q] += scale * t40697*(t40683+t40698+t40616*t40658*(t40662-t40682))*2.0-t40693*t40696*2.0-t40596*(t40697*(-t40627+t40687+t40616*t40653*(t40627-t40687-EcFld_1*(t40621*t40621)*1.0/(t40624*t40624*t40624)*2.0+EcFld_1*t40629*(EcFld_3*c*t40628*(4.0/9.0)-EcFld_2*t40630*t40631*t40632*(1.0/3.6E1)+EcFld_2*c*t40607*t40628*(2.0/9.0)))+t40616*t40681*t40658*2.0+t40616*t40664*t40649)-t40693*(t40654+t40655+t40656+t40659-t40616*t40653*(t40654+t40655+t40656+t40659-EcFhd_1*t40604*(1.0/3.0)-EcFhd_3*c*t40628*(5.0/9.0)-EcFhd_4*c*t40628*(4.0/9.0)-EcFhd_3*c*t40650*t40628*(4.0/9.0))+t40616*t40690*t40658*2.0+t40616*t40649*t40686)-c*t40628*t40684*t40669*(4.0/9.0)+c*t40628*t40669*t40689*(4.0/9.0)+c*t40597*t40669*t40696*(2.0/3.0)-t40630*t40631*t40684*t40685*(1.0/9.0)+t40630*t40631*t40685*t40689*(1.0/9.0)+c*t40597*t40669*(t40683+t40698+t40616*t40664*t40658)*(2.0/3.0))-c*t40684*t40597*t40669*(2.0/3.0)+c*t40597*t40669*t40689*(2.0/3.0)+t40702*t40740*t40723*t40734*t40717*t40628*(8.0/3.0)+t40702*t40720*t40723*t40734*t40717*1.0/pow(t40596,1.0E1/3.0)*(2.8E1/9.0)+t40702*t40723*t40717*t40597*t40759*1.0/sqrt(t40726+pow(t40601*t40602*(-1.0/2.0)+1.0/2.0,5.0/3.0))+t40702*t40720*t40723*1.0/pow(t40733,5.0/2.0)*t40717*(t40738*t40738)*t40597*(3.0/4.0)-t40702*t40720*t40723*t40734*t40717*t40597*(Cinf*Fg*Pg_1*t40721*t40722*1.0/pow(t40596,1.9E1/6.0)*(9.1E1/3.6E1)-Cinf*Fg*Pg_1*t40722*t40740*t40760*t40747*(7.0/3.0)-Cinf*Fg*Pg_1*t40722*t40718*t40747*t40759+Cinf*Fg*Pg_1*1.0/(t40720*t40720*t40720)*t40722*(t40740*t40740)*t40718*2.0)-t40702*t40720*t40723*t40717*t40763*t40597*(t40743*t40746*(-5.0/3.0)+t40744*t40746*(5.0/3.0)+1.0/pow(t40731,1.0/3.0)*t40742*(1.0E1/9.0)+t40742*1.0/pow(t40725,1.0/3.0)*(1.0E1/9.0))*(1.0/2.0)-t40702*t40720*t40723*t40734*t40717*t40762*t40628*(8.0/3.0)+t40702*t40720*t40723*t40717*t40628*t40763*t40738*(4.0/3.0)-t40702*t40740*t40723*t40734*t40717*t40762*t40597*2.0+t40702*t40740*t40723*t40717*t40763*t40738*t40597+t40702*t40720*t40723*t40734*t40717*(t40762*t40762)*t40597-t40702*t40720*t40723*t40717*t40762*t40763*t40738*t40597;
            }
            
            // v_gamma_aa_gamma_aa
            if (deriv >= 2) {
                double t41128 = rho_a+rho_b;
                double t41129 = c*c;
                double t41130 = 1.0/pow(t41128,2.0/3.0);
                double t41131 = 1.0/pow(t41128,1.0/3.0);
                double t41132 = 1.0/t41128;
                double t41133 = rho_a-rho_b;
                double t41134 = Bg*t41130*t41129;
                double t41135 = Cg_2*c*t41131;
                double t41136 = Cg_1+t41134+t41135;
                double t41137 = Bg*c*t41132*t41129*1.0E4;
                double t41138 = Cg_4*t41130*t41129;
                double t41139 = Cg_3*c*t41131;
                double t41140 = t41137+t41138+t41139+1.0;
                double t41141 = 1.0/t41140;
                double t41142 = t41141*t41136;
                double t41143 = Cx+t41142;
                double t41144 = 1.0/t41143;
                double t41145 = 1.0/two_13;
                double t41146 = 1.0/pow(t41128,7.0/6.0);
                double t41147 = gamma_ab*2.0;
                double t41148 = gamma_aa+gamma_bb+t41147;
                double t41149 = sqrt(t41148);
                double t41150 = exp(-Cinf*Fg*Pg_1*t41144*t41146*t41149);
                double t41151 = t41132*t41133*(1.0/2.0);
                double t41152 = t41151+1.0/2.0;
                double t41153 = pow(t41152,5.0/3.0);
                v_gamma_aa_gamma_aa[Q] += scale * Cinf*Fg*Pg_1*t41150*t41145*1.0/pow(t41128,5.0/2.0)*1.0/sqrt(t41148)*1.0/sqrt(t41153+pow(-t41151+1.0/2.0,5.0/3.0))*(-3.0/4.0)+(Cinf*Cinf)*(Fg*Fg)*(Pg_1*Pg_1)*t41150*t41144*t41145*1.0/pow(t41128,1.1E1/3.0)*1.0/sqrt(t41153+pow(t41132*t41133*(-1.0/2.0)+1.0/2.0,5.0/3.0))*(1.0/4.0);
            }
            
            // v_gamma_aa_gamma_ab
            if (deriv >= 2) {
                double t41155 = rho_a+rho_b;
                double t41156 = c*c;
                double t41157 = 1.0/pow(t41155,2.0/3.0);
                double t41158 = 1.0/pow(t41155,1.0/3.0);
                double t41159 = 1.0/t41155;
                double t41160 = rho_a-rho_b;
                double t41161 = Bg*t41156*t41157;
                double t41162 = Cg_2*c*t41158;
                double t41163 = Cg_1+t41161+t41162;
                double t41164 = Bg*c*t41156*t41159*1.0E4;
                double t41165 = Cg_4*t41156*t41157;
                double t41166 = Cg_3*c*t41158;
                double t41167 = t41164+t41165+t41166+1.0;
                double t41168 = 1.0/t41167;
                double t41169 = t41163*t41168;
                double t41170 = Cx+t41169;
                double t41171 = 1.0/t41170;
                double t41172 = 1.0/two_13;
                double t41173 = 1.0/pow(t41155,7.0/6.0);
                double t41174 = gamma_ab*2.0;
                double t41175 = gamma_aa+gamma_bb+t41174;
                double t41176 = sqrt(t41175);
                double t41177 = exp(-Cinf*Fg*Pg_1*t41171*t41173*t41176);
                double t41178 = t41160*t41159*(1.0/2.0);
                double t41179 = t41178+1.0/2.0;
                double t41180 = pow(t41179,5.0/3.0);
                v_gamma_aa_gamma_ab[Q] += scale * Cinf*Fg*Pg_1*t41172*1.0/pow(t41155,5.0/2.0)*1.0/sqrt(t41175)*t41177*1.0/sqrt(t41180+pow(-t41178+1.0/2.0,5.0/3.0))*(-3.0/2.0)+(Cinf*Cinf)*(Fg*Fg)*(Pg_1*Pg_1)*t41171*t41172*1.0/pow(t41155,1.1E1/3.0)*t41177*1.0/sqrt(t41180+pow(t41160*t41159*(-1.0/2.0)+1.0/2.0,5.0/3.0))*(1.0/2.0);
            }
            
            // v_gamma_aa_gamma_bb
            if (deriv >= 2) {
                double t41182 = rho_a+rho_b;
                double t41183 = c*c;
                double t41184 = 1.0/pow(t41182,2.0/3.0);
                double t41185 = 1.0/pow(t41182,1.0/3.0);
                double t41186 = 1.0/t41182;
                double t41187 = rho_a-rho_b;
                double t41188 = Bg*t41183*t41184;
                double t41189 = Cg_2*c*t41185;
                double t41190 = Cg_1+t41188+t41189;
                double t41191 = Bg*c*t41183*t41186*1.0E4;
                double t41192 = Cg_4*t41183*t41184;
                double t41193 = Cg_3*c*t41185;
                double t41194 = t41191+t41192+t41193+1.0;
                double t41195 = 1.0/t41194;
                double t41196 = t41190*t41195;
                double t41197 = Cx+t41196;
                double t41198 = 1.0/t41197;
                double t41199 = 1.0/two_13;
                double t41200 = 1.0/pow(t41182,7.0/6.0);
                double t41201 = gamma_ab*2.0;
                double t41202 = gamma_aa+gamma_bb+t41201;
                double t41203 = sqrt(t41202);
                double t41204 = exp(-Cinf*Fg*Pg_1*t41200*t41203*t41198);
                double t41205 = t41186*t41187*(1.0/2.0);
                double t41206 = t41205+1.0/2.0;
                double t41207 = pow(t41206,5.0/3.0);
                v_gamma_aa_gamma_bb[Q] += scale * Cinf*Fg*Pg_1*1.0/sqrt(t41202)*t41204*1.0/pow(t41182,5.0/2.0)*t41199*1.0/sqrt(t41207+pow(-t41205+1.0/2.0,5.0/3.0))*(-3.0/4.0)+(Cinf*Cinf)*(Fg*Fg)*(Pg_1*Pg_1)*t41204*1.0/pow(t41182,1.1E1/3.0)*t41198*t41199*1.0/sqrt(t41207+pow(t41186*t41187*(-1.0/2.0)+1.0/2.0,5.0/3.0))*(1.0/4.0);
            }
            
            // v_gamma_ab_gamma_ab
            if (deriv >= 2) {
                double t41209 = rho_a+rho_b;
                double t41210 = c*c;
                double t41211 = 1.0/pow(t41209,2.0/3.0);
                double t41212 = 1.0/pow(t41209,1.0/3.0);
                double t41213 = 1.0/t41209;
                double t41214 = rho_a-rho_b;
                double t41215 = Bg*t41210*t41211;
                double t41216 = Cg_2*c*t41212;
                double t41217 = Cg_1+t41215+t41216;
                double t41218 = Bg*c*t41210*t41213*1.0E4;
                double t41219 = Cg_4*t41210*t41211;
                double t41220 = Cg_3*c*t41212;
                double t41221 = t41220+t41218+t41219+1.0;
                double t41222 = 1.0/t41221;
                double t41223 = t41222*t41217;
                double t41224 = Cx+t41223;
                double t41225 = 1.0/t41224;
                double t41226 = 1.0/two_13;
                double t41227 = 1.0/pow(t41209,7.0/6.0);
                double t41228 = gamma_ab*2.0;
                double t41229 = gamma_aa+gamma_bb+t41228;
                double t41230 = sqrt(t41229);
                double t41231 = exp(-Cinf*Fg*Pg_1*t41230*t41225*t41227);
                double t41232 = t41213*t41214*(1.0/2.0);
                double t41233 = t41232+1.0/2.0;
                double t41234 = pow(t41233,5.0/3.0);
                v_gamma_ab_gamma_ab[Q] += scale * Cinf*Fg*Pg_1*t41231*t41226*1.0/pow(t41209,5.0/2.0)*1.0/sqrt(t41229)*1.0/sqrt(t41234+pow(-t41232+1.0/2.0,5.0/3.0))*-3.0+(Cinf*Cinf)*(Fg*Fg)*(Pg_1*Pg_1)*t41231*t41225*t41226*1.0/pow(t41209,1.1E1/3.0)*1.0/sqrt(t41234+pow(t41213*t41214*(-1.0/2.0)+1.0/2.0,5.0/3.0));
            }
            
            // v_gamma_ab_gamma_bb
            if (deriv >= 2) {
                double t41236 = rho_a+rho_b;
                double t41237 = c*c;
                double t41238 = 1.0/pow(t41236,2.0/3.0);
                double t41239 = 1.0/pow(t41236,1.0/3.0);
                double t41240 = 1.0/t41236;
                double t41241 = rho_a-rho_b;
                double t41242 = Bg*t41237*t41238;
                double t41243 = Cg_2*c*t41239;
                double t41244 = Cg_1+t41242+t41243;
                double t41245 = Bg*c*t41240*t41237*1.0E4;
                double t41246 = Cg_4*t41237*t41238;
                double t41247 = Cg_3*c*t41239;
                double t41248 = t41245+t41246+t41247+1.0;
                double t41249 = 1.0/t41248;
                double t41250 = t41244*t41249;
                double t41251 = Cx+t41250;
                double t41252 = 1.0/t41251;
                double t41253 = 1.0/two_13;
                double t41254 = 1.0/pow(t41236,7.0/6.0);
                double t41255 = gamma_ab*2.0;
                double t41256 = gamma_aa+gamma_bb+t41255;
                double t41257 = sqrt(t41256);
                double t41258 = exp(-Cinf*Fg*Pg_1*t41252*t41254*t41257);
                double t41259 = t41240*t41241*(1.0/2.0);
                double t41260 = t41259+1.0/2.0;
                double t41261 = pow(t41260,5.0/3.0);
                v_gamma_ab_gamma_bb[Q] += scale * Cinf*Fg*Pg_1*t41253*1.0/pow(t41236,5.0/2.0)*1.0/sqrt(t41256)*t41258*1.0/sqrt(t41261+pow(-t41259+1.0/2.0,5.0/3.0))*(-3.0/2.0)+(Cinf*Cinf)*(Fg*Fg)*(Pg_1*Pg_1)*t41252*t41253*1.0/pow(t41236,1.1E1/3.0)*t41258*1.0/sqrt(t41261+pow(t41240*t41241*(-1.0/2.0)+1.0/2.0,5.0/3.0))*(1.0/2.0);
            }
            
            // v_gamma_bb_gamma_bb
            if (deriv >= 2) {
                double t41263 = rho_a+rho_b;
                double t41264 = c*c;
                double t41265 = 1.0/pow(t41263,2.0/3.0);
                double t41266 = 1.0/pow(t41263,1.0/3.0);
                double t41267 = 1.0/t41263;
                double t41268 = rho_a-rho_b;
                double t41269 = Bg*t41264*t41265;
                double t41270 = Cg_2*c*t41266;
                double t41271 = Cg_1+t41270+t41269;
                double t41272 = Bg*c*t41264*t41267*1.0E4;
                double t41273 = Cg_4*t41264*t41265;
                double t41274 = Cg_3*c*t41266;
                double t41275 = t41272+t41273+t41274+1.0;
                double t41276 = 1.0/t41275;
                double t41277 = t41271*t41276;
                double t41278 = Cx+t41277;
                double t41279 = 1.0/t41278;
                double t41280 = 1.0/two_13;
                double t41281 = 1.0/pow(t41263,7.0/6.0);
                double t41282 = gamma_ab*2.0;
                double t41283 = gamma_aa+gamma_bb+t41282;
                double t41284 = sqrt(t41283);
                double t41285 = exp(-Cinf*Fg*Pg_1*t41281*t41284*t41279);
                double t41286 = t41267*t41268*(1.0/2.0);
                double t41287 = t41286+1.0/2.0;
                double t41288 = pow(t41287,5.0/3.0);
                v_gamma_bb_gamma_bb[Q] += scale * Cinf*Fg*Pg_1*t41280*1.0/pow(t41263,5.0/2.0)*1.0/sqrt(t41283)*t41285*1.0/sqrt(t41288+pow(-t41286+1.0/2.0,5.0/3.0))*(-3.0/4.0)+(Cinf*Cinf)*(Fg*Fg)*(Pg_1*Pg_1)*t41280*1.0/pow(t41263,1.1E1/3.0)*t41285*t41279*1.0/sqrt(t41288+pow(t41267*t41268*(-1.0/2.0)+1.0/2.0,5.0/3.0))*(1.0/4.0);
            }
            
            // v_rho_a_gamma_aa
            if (deriv >= 2) {
                double t40768 = rho_a+rho_b;
                double t40769 = c*c;
                double t40770 = 1.0/pow(t40768,2.0/3.0);
                double t40771 = 1.0/pow(t40768,1.0/3.0);
                double t40772 = 1.0/t40768;
                double t40773 = rho_a-rho_b;
                double t40774 = 1.0/pow(t40768,4.0/3.0);
                double t40775 = Bg*c*t40772*t40769*1.0E4;
                double t40776 = Cg_4*t40770*t40769;
                double t40777 = Cg_3*c*t40771;
                double t40778 = t40775+t40776+t40777+1.0;
                double t40779 = 1.0/t40778;
                double t40780 = 1.0/pow(t40768,5.0/3.0);
                double t40781 = Bg*t40770*t40769;
                double t40782 = Cg_2*c*t40771;
                double t40783 = Cg_1+t40781+t40782;
                double t40784 = 1.0/two_13;
                double t40785 = 1.0/pow(t40768,7.0/6.0);
                double t40786 = t40783*t40779;
                double t40787 = Cx+t40786;
                double t40788 = 1.0/t40787;
                double t40789 = gamma_ab*2.0;
                double t40790 = gamma_aa+gamma_bb+t40789;
                double t40791 = sqrt(t40790);
                double t40796 = Cinf*Fg*Pg_1*t40791*t40785*t40788;
                double t40792 = exp(-t40796);
                double t40793 = t40772*t40773*(1.0/2.0);
                double t40794 = t40793+1.0/2.0;
                double t40795 = pow(t40794,5.0/3.0);
                double t40797 = -t40793+1.0/2.0;
                double t40798 = pow(t40797,5.0/3.0);
                double t40799 = t40795+t40798;
                double t40800 = 1.0/sqrt(t40799);
                double t40801 = Bg*t40780*t40769*(2.0/3.0);
                double t40802 = Cg_2*c*t40774*(1.0/3.0);
                double t40803 = t40801+t40802;
                double t40804 = t40803*t40779;
                double t40805 = 1.0/(t40768*t40768);
                double t40806 = Bg*c*t40805*t40769*1.0E4;
                double t40807 = Cg_4*t40780*t40769*(2.0/3.0);
                double t40808 = Cg_3*c*t40774*(1.0/3.0);
                double t40809 = t40806+t40807+t40808;
                double t40810 = 1.0/(t40778*t40778);
                double t40815 = t40810*t40809*t40783;
                double t40811 = t40804-t40815;
                double t40812 = t40772*(1.0/2.0);
                double t40823 = t40805*t40773*(1.0/2.0);
                double t40813 = t40812-t40823;
                double t40814 = 1.0/pow(t40768,1.3E1/6.0);
                double t40816 = 1.0/(t40787*t40787);
                double t40817 = 1.0/sqrt(t40790);
                double t40818 = Cinf*Fg*Pg_1*t40814*t40791*t40788*(7.0/6.0);
                double t40819 = t40818-Cinf*Fg*Pg_1*t40811*t40816*t40791*t40785;
                double t40820 = 1.0/pow(t40799,3.0/2.0);
                double t40821 = 1.0/pow(t40768,5.0/2.0);
                double t40822 = pow(t40797,2.0/3.0);
                double t40824 = t40813*t40822*(5.0/3.0);
                double t40825 = pow(t40794,2.0/3.0);
                double t40826 = t40824-t40813*t40825*(5.0/3.0);
                v_rho_a_gamma_aa[Q] += scale * t40800*t40792*t40784*1.0/pow(t40768,7.0/3.0)*t40787*(-4.0/3.0)-t40811*t40774*t40792*t40784*1.0/sqrt(t40795+pow(t40772*t40773*(-1.0/2.0)+1.0/2.0,5.0/3.0))+t40800*t40774*t40792*t40819*t40784*t40787+t40820*t40826*t40774*t40792*t40784*t40787*(1.0/2.0)+t40800*t40790*t40774*t40792*t40784*t40787*(Cinf*Fg*Pg_1*t40814*t40817*t40788*(7.0/1.2E1)-Cinf*Fg*Pg_1*t40811*t40816*t40817*t40785*(1.0/2.0))+Cinf*Fg*Pg_1*t40800*t40791*t40792*t40784*1.0/pow(t40768,7.0/2.0)*(2.0/3.0)-Cinf*Fg*Pg_1*t40800*t40821*t40791*t40792*t40819*t40784*(1.0/2.0)-Cinf*Fg*Pg_1*t40820*t40821*t40826*t40791*t40792*t40784*(1.0/4.0)+Cinf*Fg*Pg_1*t40800*t40811*t40821*t40791*t40792*t40784*t40788*(1.0/2.0);
            }
            
            // v_rho_a_gamma_ab
            if (deriv >= 2) {
                double t40828 = rho_a+rho_b;
                double t40829 = c*c;
                double t40830 = 1.0/pow(t40828,2.0/3.0);
                double t40831 = 1.0/pow(t40828,1.0/3.0);
                double t40832 = 1.0/t40828;
                double t40833 = rho_a-rho_b;
                double t40834 = 1.0/pow(t40828,4.0/3.0);
                double t40835 = Bg*c*t40832*t40829*1.0E4;
                double t40836 = Cg_4*t40830*t40829;
                double t40837 = Cg_3*c*t40831;
                double t40838 = t40835+t40836+t40837+1.0;
                double t40839 = 1.0/t40838;
                double t40840 = 1.0/pow(t40828,5.0/3.0);
                double t40841 = Bg*t40830*t40829;
                double t40842 = Cg_2*c*t40831;
                double t40843 = Cg_1+t40841+t40842;
                double t40844 = 1.0/two_13;
                double t40845 = 1.0/pow(t40828,7.0/6.0);
                double t40846 = t40843*t40839;
                double t40847 = Cx+t40846;
                double t40848 = 1.0/t40847;
                double t40849 = gamma_ab*2.0;
                double t40850 = gamma_aa+gamma_bb+t40849;
                double t40851 = sqrt(t40850);
                double t40856 = Cinf*Fg*Pg_1*t40851*t40845*t40848;
                double t40852 = exp(-t40856);
                double t40853 = t40832*t40833*(1.0/2.0);
                double t40854 = t40853+1.0/2.0;
                double t40855 = pow(t40854,5.0/3.0);
                double t40857 = -t40853+1.0/2.0;
                double t40858 = pow(t40857,5.0/3.0);
                double t40859 = t40855+t40858;
                double t40860 = 1.0/sqrt(t40859);
                double t40861 = Bg*t40840*t40829*(2.0/3.0);
                double t40862 = Cg_2*c*t40834*(1.0/3.0);
                double t40863 = t40861+t40862;
                double t40864 = t40863*t40839;
                double t40865 = 1.0/(t40828*t40828);
                double t40866 = Bg*c*t40829*t40865*1.0E4;
                double t40867 = Cg_4*t40840*t40829*(2.0/3.0);
                double t40868 = Cg_3*c*t40834*(1.0/3.0);
                double t40869 = t40866+t40867+t40868;
                double t40870 = 1.0/(t40838*t40838);
                double t40875 = t40843*t40870*t40869;
                double t40871 = t40864-t40875;
                double t40872 = t40832*(1.0/2.0);
                double t40883 = t40833*t40865*(1.0/2.0);
                double t40873 = t40872-t40883;
                double t40874 = 1.0/pow(t40828,1.3E1/6.0);
                double t40876 = 1.0/(t40847*t40847);
                double t40877 = 1.0/sqrt(t40850);
                double t40878 = Cinf*Fg*Pg_1*t40851*t40874*t40848*(7.0/6.0);
                double t40879 = t40878-Cinf*Fg*Pg_1*t40851*t40871*t40845*t40876;
                double t40880 = 1.0/pow(t40859,3.0/2.0);
                double t40881 = 1.0/pow(t40828,5.0/2.0);
                double t40882 = pow(t40857,2.0/3.0);
                double t40884 = t40873*t40882*(5.0/3.0);
                double t40885 = pow(t40854,2.0/3.0);
                double t40886 = t40884-t40873*t40885*(5.0/3.0);
                v_rho_a_gamma_ab[Q] += scale * t40860*t40852*t40844*1.0/pow(t40828,7.0/3.0)*t40847*(-8.0/3.0)-t40834*t40852*t40844*t40871*1.0/sqrt(t40855+pow(t40832*t40833*(-1.0/2.0)+1.0/2.0,5.0/3.0))*2.0+t40860*t40834*t40852*t40844*t40847*t40879*2.0+t40834*t40852*t40844*t40880*t40847*t40886+t40850*t40860*t40834*t40852*t40844*t40847*(Cinf*Fg*Pg_1*t40874*t40848*t40877*(7.0/6.0)-Cinf*Fg*Pg_1*t40871*t40845*t40876*t40877)+Cinf*Fg*Pg_1*t40851*t40860*t40852*t40844*1.0/pow(t40828,7.0/2.0)*(4.0/3.0)-Cinf*Fg*Pg_1*t40851*t40860*t40852*t40844*t40881*t40879-Cinf*Fg*Pg_1*t40851*t40852*t40844*t40880*t40881*t40886*(1.0/2.0)+Cinf*Fg*Pg_1*t40851*t40860*t40852*t40844*t40871*t40881*t40848;
            }
            
            // v_rho_a_gamma_bb
            if (deriv >= 2) {
                double t40888 = rho_a+rho_b;
                double t40889 = c*c;
                double t40890 = 1.0/pow(t40888,2.0/3.0);
                double t40891 = 1.0/pow(t40888,1.0/3.0);
                double t40892 = 1.0/t40888;
                double t40893 = rho_a-rho_b;
                double t40894 = 1.0/pow(t40888,4.0/3.0);
                double t40895 = Bg*c*t40892*t40889*1.0E4;
                double t40896 = Cg_4*t40890*t40889;
                double t40897 = Cg_3*c*t40891;
                double t40898 = t40895+t40896+t40897+1.0;
                double t40899 = 1.0/t40898;
                double t40900 = 1.0/pow(t40888,5.0/3.0);
                double t40901 = Bg*t40890*t40889;
                double t40902 = Cg_2*c*t40891;
                double t40903 = Cg_1+t40901+t40902;
                double t40904 = 1.0/two_13;
                double t40905 = 1.0/pow(t40888,7.0/6.0);
                double t40906 = t40903*t40899;
                double t40907 = Cx+t40906;
                double t40908 = 1.0/t40907;
                double t40909 = gamma_ab*2.0;
                double t40910 = gamma_aa+gamma_bb+t40909;
                double t40911 = sqrt(t40910);
                double t40916 = Cinf*Fg*Pg_1*t40911*t40905*t40908;
                double t40912 = exp(-t40916);
                double t40913 = t40892*t40893*(1.0/2.0);
                double t40914 = t40913+1.0/2.0;
                double t40915 = pow(t40914,5.0/3.0);
                double t40917 = -t40913+1.0/2.0;
                double t40918 = pow(t40917,5.0/3.0);
                double t40919 = t40915+t40918;
                double t40920 = 1.0/sqrt(t40919);
                double t40921 = Bg*t40900*t40889*(2.0/3.0);
                double t40922 = Cg_2*c*t40894*(1.0/3.0);
                double t40923 = t40921+t40922;
                double t40924 = t40923*t40899;
                double t40925 = 1.0/(t40888*t40888);
                double t40926 = Bg*c*t40925*t40889*1.0E4;
                double t40927 = Cg_4*t40900*t40889*(2.0/3.0);
                double t40928 = Cg_3*c*t40894*(1.0/3.0);
                double t40929 = t40926+t40927+t40928;
                double t40930 = 1.0/(t40898*t40898);
                double t40935 = t40903*t40930*t40929;
                double t40931 = t40924-t40935;
                double t40932 = t40892*(1.0/2.0);
                double t40943 = t40925*t40893*(1.0/2.0);
                double t40933 = t40932-t40943;
                double t40934 = 1.0/pow(t40888,1.3E1/6.0);
                double t40936 = 1.0/(t40907*t40907);
                double t40937 = 1.0/sqrt(t40910);
                double t40938 = Cinf*Fg*Pg_1*t40911*t40934*t40908*(7.0/6.0);
                double t40939 = t40938-Cinf*Fg*Pg_1*t40911*t40931*t40905*t40936;
                double t40940 = 1.0/pow(t40919,3.0/2.0);
                double t40941 = 1.0/pow(t40888,5.0/2.0);
                double t40942 = pow(t40917,2.0/3.0);
                double t40944 = t40933*t40942*(5.0/3.0);
                double t40945 = pow(t40914,2.0/3.0);
                double t40946 = t40944-t40933*t40945*(5.0/3.0);
                v_rho_a_gamma_bb[Q] += scale * t40920*t40912*t40904*t40907*1.0/pow(t40888,7.0/3.0)*(-4.0/3.0)-t40912*t40904*t40931*t40894*1.0/sqrt(t40915+pow(t40892*t40893*(-1.0/2.0)+1.0/2.0,5.0/3.0))+t40920*t40912*t40904*t40907*t40894*t40939+t40912*t40904*t40940*t40907*t40946*t40894*(1.0/2.0)+t40910*t40920*t40912*t40904*t40907*t40894*(Cinf*Fg*Pg_1*t40934*t40908*t40937*(7.0/1.2E1)-Cinf*Fg*Pg_1*t40931*t40905*t40936*t40937*(1.0/2.0))+Cinf*Fg*Pg_1*t40911*t40920*t40912*t40904*1.0/pow(t40888,7.0/2.0)*(2.0/3.0)-Cinf*Fg*Pg_1*t40911*t40920*t40912*t40904*t40941*t40939*(1.0/2.0)-Cinf*Fg*Pg_1*t40911*t40912*t40904*t40940*t40941*t40946*(1.0/4.0)+Cinf*Fg*Pg_1*t40911*t40920*t40912*t40904*t40931*t40941*t40908*(1.0/2.0);
            }
            
            // v_rho_b_gamma_aa
            if (deriv >= 2) {
                double t40948 = rho_a+rho_b;
                double t40949 = c*c;
                double t40950 = 1.0/pow(t40948,2.0/3.0);
                double t40951 = 1.0/pow(t40948,1.0/3.0);
                double t40952 = 1.0/t40948;
                double t40953 = rho_a-rho_b;
                double t40954 = 1.0/pow(t40948,4.0/3.0);
                double t40955 = Bg*c*t40952*t40949*1.0E4;
                double t40956 = Cg_4*t40950*t40949;
                double t40957 = Cg_3*c*t40951;
                double t40958 = t40955+t40956+t40957+1.0;
                double t40959 = 1.0/t40958;
                double t40960 = 1.0/pow(t40948,5.0/3.0);
                double t40961 = Bg*t40950*t40949;
                double t40962 = Cg_2*c*t40951;
                double t40963 = Cg_1+t40961+t40962;
                double t40964 = 1.0/two_13;
                double t40965 = 1.0/pow(t40948,7.0/6.0);
                double t40966 = t40963*t40959;
                double t40967 = Cx+t40966;
                double t40968 = 1.0/t40967;
                double t40969 = gamma_ab*2.0;
                double t40970 = gamma_aa+gamma_bb+t40969;
                double t40971 = sqrt(t40970);
                double t40976 = Cinf*Fg*Pg_1*t40971*t40965*t40968;
                double t40972 = exp(-t40976);
                double t40973 = t40952*t40953*(1.0/2.0);
                double t40974 = t40973+1.0/2.0;
                double t40975 = pow(t40974,5.0/3.0);
                double t40977 = -t40973+1.0/2.0;
                double t40978 = pow(t40977,5.0/3.0);
                double t40979 = t40975+t40978;
                double t40980 = 1.0/sqrt(t40979);
                double t40981 = Bg*t40960*t40949*(2.0/3.0);
                double t40982 = Cg_2*c*t40954*(1.0/3.0);
                double t40983 = t40981+t40982;
                double t40984 = t40983*t40959;
                double t40985 = 1.0/(t40948*t40948);
                double t40986 = Bg*c*t40949*t40985*1.0E4;
                double t40987 = Cg_4*t40960*t40949*(2.0/3.0);
                double t40988 = Cg_3*c*t40954*(1.0/3.0);
                double t40989 = t40986+t40987+t40988;
                double t40990 = 1.0/(t40958*t40958);
                double t40996 = t40963*t40990*t40989;
                double t40991 = t40984-t40996;
                double t40992 = t40952*(1.0/2.0);
                double t40993 = t40953*t40985*(1.0/2.0);
                double t40994 = t40992+t40993;
                double t40995 = 1.0/pow(t40948,1.3E1/6.0);
                double t40997 = 1.0/(t40967*t40967);
                double t40998 = 1.0/sqrt(t40970);
                double t40999 = Cinf*Fg*Pg_1*t40971*t40968*t40995*(7.0/6.0);
                double t41000 = t40999-Cinf*Fg*Pg_1*t40971*t40991*t40965*t40997;
                double t41001 = 1.0/pow(t40979,3.0/2.0);
                double t41002 = 1.0/pow(t40948,5.0/2.0);
                double t41003 = pow(t40977,2.0/3.0);
                double t41004 = t40994*t41003*(5.0/3.0);
                double t41005 = pow(t40974,2.0/3.0);
                double t41006 = t41004-t40994*t41005*(5.0/3.0);
                v_rho_b_gamma_aa[Q] += scale * t40980*t40972*t40964*1.0/pow(t40948,7.0/3.0)*t40967*(-4.0/3.0)-t40954*t40972*t40964*t40991*1.0/sqrt(t40975+pow(t40952*t40953*(-1.0/2.0)+1.0/2.0,5.0/3.0))+t40980*t40954*t40972*t40964*t40967*t41000-t40954*t40972*t40964*t40967*t41001*t41006*(1.0/2.0)+t40970*t40980*t40954*t40972*t40964*t40967*(Cinf*Fg*Pg_1*t40968*t40995*t40998*(7.0/1.2E1)-Cinf*Fg*Pg_1*t40991*t40965*t40997*t40998*(1.0/2.0))+Cinf*Fg*Pg_1*t40971*t40980*t40972*t40964*1.0/pow(t40948,7.0/2.0)*(2.0/3.0)-Cinf*Fg*Pg_1*t40971*t40980*t40972*t40964*t41000*t41002*(1.0/2.0)+Cinf*Fg*Pg_1*t40971*t40972*t40964*t41001*t41002*t41006*(1.0/4.0)+Cinf*Fg*Pg_1*t40971*t40980*t40972*t40964*t40991*t40968*t41002*(1.0/2.0);
            }
            
            // v_rho_b_gamma_ab
            if (deriv >= 2) {
                double t41008 = rho_a+rho_b;
                double t41009 = c*c;
                double t41010 = 1.0/pow(t41008,2.0/3.0);
                double t41011 = 1.0/pow(t41008,1.0/3.0);
                double t41012 = 1.0/t41008;
                double t41013 = rho_a-rho_b;
                double t41014 = 1.0/pow(t41008,4.0/3.0);
                double t41015 = Bg*c*t41012*t41009*1.0E4;
                double t41016 = Cg_4*t41010*t41009;
                double t41017 = Cg_3*c*t41011;
                double t41018 = t41015+t41016+t41017+1.0;
                double t41019 = 1.0/t41018;
                double t41020 = 1.0/pow(t41008,5.0/3.0);
                double t41021 = Bg*t41010*t41009;
                double t41022 = Cg_2*c*t41011;
                double t41023 = Cg_1+t41021+t41022;
                double t41024 = 1.0/two_13;
                double t41025 = 1.0/pow(t41008,7.0/6.0);
                double t41026 = t41023*t41019;
                double t41027 = Cx+t41026;
                double t41028 = 1.0/t41027;
                double t41029 = gamma_ab*2.0;
                double t41030 = gamma_aa+gamma_bb+t41029;
                double t41031 = sqrt(t41030);
                double t41036 = Cinf*Fg*Pg_1*t41031*t41025*t41028;
                double t41032 = exp(-t41036);
                double t41033 = t41012*t41013*(1.0/2.0);
                double t41034 = t41033+1.0/2.0;
                double t41035 = pow(t41034,5.0/3.0);
                double t41037 = -t41033+1.0/2.0;
                double t41038 = pow(t41037,5.0/3.0);
                double t41039 = t41035+t41038;
                double t41040 = 1.0/sqrt(t41039);
                double t41041 = Bg*t41020*t41009*(2.0/3.0);
                double t41042 = Cg_2*c*t41014*(1.0/3.0);
                double t41043 = t41041+t41042;
                double t41044 = t41043*t41019;
                double t41045 = 1.0/(t41008*t41008);
                double t41046 = Bg*c*t41009*t41045*1.0E4;
                double t41047 = Cg_4*t41020*t41009*(2.0/3.0);
                double t41048 = Cg_3*c*t41014*(1.0/3.0);
                double t41049 = t41046+t41047+t41048;
                double t41050 = 1.0/(t41018*t41018);
                double t41056 = t41023*t41050*t41049;
                double t41051 = t41044-t41056;
                double t41052 = t41012*(1.0/2.0);
                double t41053 = t41013*t41045*(1.0/2.0);
                double t41054 = t41052+t41053;
                double t41055 = 1.0/pow(t41008,1.3E1/6.0);
                double t41057 = 1.0/(t41027*t41027);
                double t41058 = 1.0/sqrt(t41030);
                double t41059 = Cinf*Fg*Pg_1*t41031*t41028*t41055*(7.0/6.0);
                double t41060 = t41059-Cinf*Fg*Pg_1*t41031*t41051*t41025*t41057;
                double t41061 = 1.0/pow(t41039,3.0/2.0);
                double t41062 = 1.0/pow(t41008,5.0/2.0);
                double t41063 = pow(t41037,2.0/3.0);
                double t41064 = t41054*t41063*(5.0/3.0);
                double t41065 = pow(t41034,2.0/3.0);
                double t41066 = t41064-t41054*t41065*(5.0/3.0);
                v_rho_b_gamma_ab[Q] += scale * t41040*t41032*t41024*1.0/pow(t41008,7.0/3.0)*t41027*(-8.0/3.0)-t41014*t41032*t41024*t41051*1.0/sqrt(t41035+pow(t41012*t41013*(-1.0/2.0)+1.0/2.0,5.0/3.0))*2.0+t41040*t41014*t41032*t41024*t41060*t41027*2.0-t41014*t41032*t41024*t41061*t41027*t41066+t41030*t41040*t41014*t41032*t41024*t41027*(Cinf*Fg*Pg_1*t41028*t41055*t41058*(7.0/6.0)-Cinf*Fg*Pg_1*t41051*t41025*t41057*t41058)+Cinf*Fg*Pg_1*t41031*t41040*t41032*t41024*1.0/pow(t41008,7.0/2.0)*(4.0/3.0)-Cinf*Fg*Pg_1*t41031*t41040*t41032*t41024*t41060*t41062+Cinf*Fg*Pg_1*t41031*t41032*t41024*t41061*t41062*t41066*(1.0/2.0)+Cinf*Fg*Pg_1*t41031*t41040*t41032*t41024*t41051*t41062*t41028;
            }
            
            // v_rho_b_gamma_bb
            if (deriv >= 2) {
                double t41068 = rho_a+rho_b;
                double t41069 = c*c;
                double t41070 = 1.0/pow(t41068,2.0/3.0);
                double t41071 = 1.0/pow(t41068,1.0/3.0);
                double t41072 = 1.0/t41068;
                double t41073 = rho_a-rho_b;
                double t41074 = 1.0/pow(t41068,4.0/3.0);
                double t41075 = Bg*c*t41072*t41069*1.0E4;
                double t41076 = Cg_4*t41070*t41069;
                double t41077 = Cg_3*c*t41071;
                double t41078 = t41075+t41076+t41077+1.0;
                double t41079 = 1.0/t41078;
                double t41080 = 1.0/pow(t41068,5.0/3.0);
                double t41081 = Bg*t41070*t41069;
                double t41082 = Cg_2*c*t41071;
                double t41083 = Cg_1+t41081+t41082;
                double t41084 = 1.0/two_13;
                double t41085 = 1.0/pow(t41068,7.0/6.0);
                double t41086 = t41083*t41079;
                double t41087 = Cx+t41086;
                double t41088 = 1.0/t41087;
                double t41089 = gamma_ab*2.0;
                double t41090 = gamma_aa+gamma_bb+t41089;
                double t41091 = sqrt(t41090);
                double t41096 = Cinf*Fg*Pg_1*t41091*t41085*t41088;
                double t41092 = exp(-t41096);
                double t41093 = t41072*t41073*(1.0/2.0);
                double t41094 = t41093+1.0/2.0;
                double t41095 = pow(t41094,5.0/3.0);
                double t41097 = -t41093+1.0/2.0;
                double t41098 = pow(t41097,5.0/3.0);
                double t41099 = t41095+t41098;
                double t41100 = 1.0/sqrt(t41099);
                double t41101 = Bg*t41080*t41069*(2.0/3.0);
                double t41102 = Cg_2*c*t41074*(1.0/3.0);
                double t41103 = t41101+t41102;
                double t41104 = t41103*t41079;
                double t41105 = 1.0/(t41068*t41068);
                double t41106 = Bg*c*t41105*t41069*1.0E4;
                double t41107 = Cg_4*t41080*t41069*(2.0/3.0);
                double t41108 = Cg_3*c*t41074*(1.0/3.0);
                double t41109 = t41106+t41107+t41108;
                double t41110 = 1.0/(t41078*t41078);
                double t41116 = t41110*t41109*t41083;
                double t41111 = t41104-t41116;
                double t41112 = t41072*(1.0/2.0);
                double t41113 = t41105*t41073*(1.0/2.0);
                double t41114 = t41112+t41113;
                double t41115 = 1.0/pow(t41068,1.3E1/6.0);
                double t41117 = 1.0/(t41087*t41087);
                double t41118 = 1.0/sqrt(t41090);
                double t41119 = Cinf*Fg*Pg_1*t41115*t41091*t41088*(7.0/6.0);
                double t41120 = t41119-Cinf*Fg*Pg_1*t41111*t41117*t41091*t41085;
                double t41121 = 1.0/pow(t41099,3.0/2.0);
                double t41122 = 1.0/pow(t41068,5.0/2.0);
                double t41123 = pow(t41097,2.0/3.0);
                double t41124 = t41114*t41123*(5.0/3.0);
                double t41125 = pow(t41094,2.0/3.0);
                double t41126 = t41124-t41114*t41125*(5.0/3.0);
                v_rho_b_gamma_bb[Q] += scale * t41100*t41092*t41084*1.0/pow(t41068,7.0/3.0)*t41087*(-4.0/3.0)-t41111*t41074*t41092*t41084*1.0/sqrt(t41095+pow(t41072*t41073*(-1.0/2.0)+1.0/2.0,5.0/3.0))+t41100*t41120*t41074*t41092*t41084*t41087-t41121*t41126*t41074*t41092*t41084*t41087*(1.0/2.0)+t41100*t41090*t41074*t41092*t41084*t41087*(Cinf*Fg*Pg_1*t41115*t41118*t41088*(7.0/1.2E1)-Cinf*Fg*Pg_1*t41111*t41117*t41118*t41085*(1.0/2.0))+Cinf*Fg*Pg_1*t41100*t41091*t41092*t41084*1.0/pow(t41068,7.0/2.0)*(2.0/3.0)-Cinf*Fg*Pg_1*t41100*t41120*t41122*t41091*t41092*t41084*(1.0/2.0)+Cinf*Fg*Pg_1*t41121*t41122*t41126*t41091*t41092*t41084*(1.0/4.0)+Cinf*Fg*Pg_1*t41100*t41111*t41122*t41091*t41092*t41084*t41088*(1.0/2.0);
            }
            
        }
    }
}

}
