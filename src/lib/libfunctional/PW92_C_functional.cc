/**********************************************************
* PW92_C_functional.cc: definitions for PW92_C_functional for KS-DFT
* Robert Parrish, robparrish@gmail.com
* Autogenerated by MATLAB Script on 25-May-2011
*
***********************************************************/
#include <libmints/points.h>
#include <libmints/vector.h>
#include <libciomr/libciomr.h>
#include "PW92_C_functional.h"
#include <stdlib.h>
#include <cmath>
#include <string>
#include <string>
#include <vector>

using namespace psi;
using namespace boost;
using namespace std;

namespace psi { namespace functional {

PW92_C_Functional::PW92_C_Functional(int npoints, int deriv) : Functional(npoints, deriv)
{
    
    name_ = "PW92_C";
    description_ = "PW92 LSDA Correlation";
    citation_ = "J.P. Perdew and Y. Wang, Phys. Rev. B., 45(23), 13244, 1992";
    
    double c = 6.2035049089939986E-01;
    params_.push_back(make_pair("c",c));
    double two_13 = 1.2599210498948732E+00;
    params_.push_back(make_pair("two_13",two_13));
    double d2fz0 = 1.7099210000000000E+00;
    params_.push_back(make_pair("d2fz0",d2fz0));
    double Aa = 1.6886999999999999E-02;
    params_.push_back(make_pair("Aa",Aa));
    double a1a = 1.1125000000000000E-01;
    params_.push_back(make_pair("a1a",a1a));
    double b1a = 1.0356999999999999E+01;
    params_.push_back(make_pair("b1a",b1a));
    double b2a = 3.6231000000000000E+00;
    params_.push_back(make_pair("b2a",b2a));
    double b3a = 8.8026000000000004E-01;
    params_.push_back(make_pair("b3a",b3a));
    double b4a = 4.9670999999999998E-01;
    params_.push_back(make_pair("b4a",b4a));
    double c0p = 3.1091000000000001E-02;
    params_.push_back(make_pair("c0p",c0p));
    double a1p = 2.1370000000000000E-01;
    params_.push_back(make_pair("a1p",a1p));
    double b1p = 7.5956999999999999E+00;
    params_.push_back(make_pair("b1p",b1p));
    double b2p = 3.5876000000000001E+00;
    params_.push_back(make_pair("b2p",b2p));
    double b3p = 1.6382000000000001E+00;
    params_.push_back(make_pair("b3p",b3p));
    double b4p = 4.9293999999999999E-01;
    params_.push_back(make_pair("b4p",b4p));
    double c0f = 1.5545000000000000E-02;
    params_.push_back(make_pair("c0f",c0f));
    double a1f = 2.0548000000000000E-01;
    params_.push_back(make_pair("a1f",a1f));
    double b1f = 1.4118900000000000E+01;
    params_.push_back(make_pair("b1f",b1f));
    double b2f = 6.1977000000000002E+00;
    params_.push_back(make_pair("b2f",b2f));
    double b3f = 3.3662000000000001E+00;
    params_.push_back(make_pair("b3f",b3f));
    double b4f = 6.2517000000000000E-01;
    params_.push_back(make_pair("b4f",b4f));

    is_gga_ = false;
    is_meta_ = false;

    //Required allocateion
    allocate();
}
PW92_C_Functional::~PW92_C_Functional()
{
}
void PW92_C_Functional::computeRKSFunctional(boost::shared_ptr<RKSFunctions> prop)
{
    int ntrue = prop->npoints();

    const double* restrict rho_a;
    const double* restrict gamma_aa;
    const double* restrict tau_a;

    rho_a = prop->property_value("RHO_A")->pointer();
    if (is_gga_) {
        gamma_aa = prop->property_value("GAMMA_AA")->pointer();
    }
    if (is_meta_) {
        tau_a = prop->property_value("TAU_A")->pointer();
    }

    double c = params_[0].second;
    double two_13 = params_[1].second;
    double d2fz0 = params_[2].second;
    double Aa = params_[3].second;
    double a1a = params_[4].second;
    double b1a = params_[5].second;
    double b2a = params_[6].second;
    double b3a = params_[7].second;
    double b4a = params_[8].second;
    double c0p = params_[9].second;
    double a1p = params_[10].second;
    double b1p = params_[11].second;
    double b2p = params_[12].second;
    double b3p = params_[13].second;
    double b4p = params_[14].second;
    double c0f = params_[15].second;
    double a1f = params_[16].second;
    double b1f = params_[17].second;
    double b2f = params_[18].second;
    double b3f = params_[19].second;
    double b4f = params_[20].second;

    //Functional
    for (int index = 0; index < ntrue; index++) {

        //Functional Value
        if (rho_a[index] > cutoff_) {
            double t18849 = rho_a[index]*2.0;
            double t18850 = 1.0/pow(t18849,1.0/3.0);
            double t18851 = c*t18850;
            functional_[index] = c0p*rho_a[index]*log((1.0/2.0)/(c0p*(b1p*sqrt(t18851)+b3p*pow(t18851,3.0/2.0) \
               +b4p*(c*c)*1.0/pow(t18849,2.0/3.0)+b2p*c*t18850))+1.0)*(a1p*c*t18850+1.0)*-4.0;
        } else {
            functional_[index] = 0.0;
        } 

    }
    //First Partials
    for (int index = 0; index < ntrue && deriv_ >= 1; index++) {
        
        //V_rho_a
        if (rho_a[index] > cutoff_) {
            double t18853 = rho_a[index]*2.0;
            double t18854 = 1.0/pow(t18853,1.0/3.0);
            double t18855 = c*t18854;
            double t18856 = sqrt(t18855);
            double t18857 = b1p*t18856;
            double t18858 = pow(t18855,3.0/2.0);
            double t18859 = b3p*t18858;
            double t18860 = b2p*c*t18854;
            double t18861 = c*c;
            double t18862 = 1.0/pow(t18853,2.0/3.0);
            double t18863 = b4p*t18861*t18862;
            double t18864 = t18860+t18863+t18857+t18859;
            double t18865 = 1.0/pow(t18853,4.0/3.0);
            double t18866 = 1.0/c0p;
            double t18867 = 1.0/t18864;
            double t18868 = t18866*t18867*(1.0/2.0);
            double t18869 = t18868+1.0;
            double t18870 = log(t18869);
            double t18871 = a1p*c*t18854;
            double t18872 = t18871+1.0;
            v_rho_a_[index] = rho_a[index]*((t18872*1.0/(t18864*t18864)*(b4p*t18861*1.0/pow(t18853,5.0/3.0)*(2.0/ \
               3.0)+b2p*c*t18865*(1.0/3.0)+b3p*c*t18856*t18865*(1.0/2.0)+b1p*c*1.0/sqrt(t18855)*t18865*(1.0/6.0)) \
               )/t18869-a1p*c*c0p*t18870*t18865*(2.0/3.0))*-2.0-c0p*t18870*t18872*2.0;
        } else {
            v_rho_a_[index] = 0.0;
        } 
        
        if (is_gga_) {
            
            if (rho_a[index] > cutoff_) {
                v_gamma_aa_[index] = 0.0;
            } else {
                v_gamma_aa_[index] = 0.0;
            } 
        
        }
        if (is_meta_) {
        
            //V_tau_a
            if (rho_a[index] > cutoff_) {
                v_tau_a_[index] = 0.0;
            } else {
                v_tau_a_[index] = 0.0;
            } 
        
        }
    }
    //Second Partials
    for (int index = 0; index < ntrue && deriv_ >= 2; index++) {
        
        //V_rho_a_rho_a
        if (rho_a[index] > cutoff_) {
            double t18876 = rho_a[index]*2.0;
            double t18877 = 1.0/pow(t18876,1.0/3.0);
            double t18878 = c*t18877;
            double t18879 = sqrt(t18878);
            double t18880 = b1p*t18879;
            double t18881 = pow(t18878,3.0/2.0);
            double t18882 = b3p*t18881;
            double t18883 = b2p*c*t18877;
            double t18884 = c*c;
            double t18885 = 1.0/pow(t18876,2.0/3.0);
            double t18886 = b4p*t18884*t18885;
            double t18887 = t18880+t18882+t18883+t18886;
            double t18888 = 1.0/pow(t18876,8.0/3.0);
            double t18889 = 1.0/pow(t18876,7.0/3.0);
            double t18890 = 1.0/sqrt(t18878);
            double t18891 = 1.0/c0p;
            double t18892 = 1.0/t18887;
            double t18893 = t18891*t18892*(1.0/2.0);
            double t18894 = t18893+1.0;
            double t18895 = 1.0/t18894;
            double t18896 = a1p*c*t18877;
            double t18897 = t18896+1.0;
            double t18898 = 1.0/pow(t18876,4.0/3.0);
            double t18900 = b2p*c*t18898*(1.0/3.0);
            double t18901 = 1.0/pow(t18876,5.0/3.0);
            double t18902 = b4p*t18901*t18884*(2.0/3.0);
            double t18903 = b1p*c*t18890*t18898*(1.0/6.0);
            double t18904 = b3p*c*t18879*t18898*(1.0/2.0);
            double t18899 = t18900+t18902+t18903+t18904;
            double t18905 = t18899*t18899;
            double t18906 = 1.0/(t18887*t18887);
            double t18907 = b2p*c*t18889*(4.0/9.0);
            double t18908 = b4p*t18884*t18888*(1.0E1/9.0);
            double t18909 = 1.0/pow(t18878,3.0/2.0);
            double t18910 = b3p*t18890*t18884*t18888*(1.0/1.2E1);
            double t18911 = b1p*c*t18890*t18889*(2.0/9.0);
            double t18912 = b3p*c*t18879*t18889*(2.0/3.0);
            double t18913 = t18910+t18911+t18912+t18907+t18908-b1p*t18909*t18884*t18888*(1.0/3.6E1);
            double t18914 = t18913*t18906*t18895*t18897;
            double t18915 = 1.0/(t18887*t18887*t18887);
            double t18916 = log(t18894);
            double t18917 = 1.0/(t18894*t18894);
            double t18918 = 1.0/(t18887*t18887*t18887*t18887);
            double t18919 = t18905*t18917*t18891*t18918*t18897*(1.0/2.0);
            double t18920 = 1.0/d2fz0;
            double t18921 = 1.0/(rho_a[index]*rho_a[index]);
            double t18922 = 1.0/Aa;
            double t18923 = b1a*t18879;
            double t18924 = b3a*t18881;
            double t18925 = b2a*c*t18877;
            double t18926 = b4a*t18884*t18885;
            double t18927 = t18923+t18924+t18925+t18926;
            double t18928 = 1.0/t18927;
            double t18929 = t18922*t18928*(1.0/2.0);
            double t18930 = t18929+1.0;
            double t18931 = log(t18930);
            double t18932 = two_13*2.0;
            double t18933 = t18932-2.0;
            double t18934 = 1.0/t18933;
            double t18935 = a1a*c*t18877;
            double t18936 = t18935+1.0;
            double t18937 = a1p*c*t18906*t18895*t18898*t18899*(2.0/3.0);
            v_rho_a_rho_a_[index] = rho_a[index]*(t18914+t18919+t18937-t18905*t18915*t18895*t18897*2.0-a1p*c* \
               c0p*t18916*t18889*(8.0/9.0)-Aa*t18920*t18921*t18931*t18934*t18936*(4.0/9.0))*2.0+rho_a[index]*(t18914+ \
               t18919+t18937-t18905*t18915*t18895*t18897*2.0-a1p*c*c0p*t18916*t18889*(8.0/9.0)+Aa*t18920*t18921*t18931* \
               t18934*t18936*(4.0/9.0))*2.0-t18906*t18895*t18897*t18899*4.0+a1p*c*c0p*t18916*t18898*(8.0/3.0);
        } else {
            v_rho_a_rho_a_[index] = 0.0;
        } 
        
        if (is_gga_) {
        
            //V_rho_a_gamma_aa
            if (rho_a[index] > cutoff_) {
                v_rho_a_gamma_aa_[index] = 0.0;
            } else {
                v_rho_a_gamma_aa_[index] = 0.0;
            } 
        
            //V_gamma_aa_gamma_aa
            if (rho_a[index] > cutoff_) {
                v_gamma_aa_gamma_aa_[index] = 0.0;
            } else {
                v_gamma_aa_gamma_aa_[index] = 0.0;
            } 
        
        }
        if (is_meta_) {
        
            //V_rho_a_tau_a
            if (rho_a[index] > cutoff_) {
                v_rho_a_tau_a_[index] = 0.0;
            } else {
                v_rho_a_tau_a_[index] = 0.0;
            } 
        
            //V_tau_a_tau_a
            if (rho_a[index] > cutoff_) {
                v_tau_a_tau_a_[index] = 0.0;
            } else {
                v_tau_a_tau_a_[index] = 0.0;
            } 
       
            if (is_gga_) {
        
                //V_gamma_aa_tau_a
                if (rho_a[index] > cutoff_) {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } else {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } 
       
            }
        }
    }
}
void PW92_C_Functional::computeUKSFunctional(boost::shared_ptr<UKSFunctions> prop)
{
    int ntrue = prop->npoints();

    const double* restrict rho_a;
    const double* restrict rho_b;
    const double* restrict gamma_aa;
    const double* restrict gamma_ab;
    const double* restrict gamma_bb;
    const double* restrict tau_a;
    const double* restrict tau_b;

    rho_a = prop->property_value("RHO_A")->pointer();
    rho_b = prop->property_value("RHO_B")->pointer();
    if (is_gga_) {
        gamma_aa = prop->property_value("GAMMA_AA")->pointer();
        gamma_ab = prop->property_value("GAMMA_AB")->pointer();
        gamma_bb = prop->property_value("GAMMA_BB")->pointer();
    }
    if (is_meta_) {
        tau_a = prop->property_value("TAU_A")->pointer();
        tau_b = prop->property_value("TAU_B")->pointer();
    }

    double c = params_[0].second;
    double two_13 = params_[1].second;
    double d2fz0 = params_[2].second;
    double Aa = params_[3].second;
    double a1a = params_[4].second;
    double b1a = params_[5].second;
    double b2a = params_[6].second;
    double b3a = params_[7].second;
    double b4a = params_[8].second;
    double c0p = params_[9].second;
    double a1p = params_[10].second;
    double b1p = params_[11].second;
    double b2p = params_[12].second;
    double b3p = params_[13].second;
    double b4p = params_[14].second;
    double c0f = params_[15].second;
    double a1f = params_[16].second;
    double b1f = params_[17].second;
    double b2f = params_[18].second;
    double b3f = params_[19].second;
    double b4f = params_[20].second;
    
    //Functional
    for (int index = 0; index < ntrue; index++) {

        //Functional Value
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t17449 = rho_a[index]+rho_b[index];
            double t17450 = 1.0/pow(t17449,1.0/3.0);
            double t17451 = c*t17450;
            double t17452 = sqrt(t17451);
            double t17453 = pow(t17451,3.0/2.0);
            double t17454 = c*c;
            double t17455 = 1.0/pow(t17449,2.0/3.0);
            double t17456 = 1.0/c0p;
            double t17457 = b1p*t17452;
            double t17458 = b3p*t17453;
            double t17459 = b4p*t17454*t17455;
            double t17460 = b2p*c*t17450;
            double t17461 = t17460+t17457+t17458+t17459;
            double t17462 = 1.0/t17461;
            double t17463 = t17462*t17456*(1.0/2.0);
            double t17464 = t17463+1.0;
            double t17465 = log(t17464);
            double t17466 = a1p*c*t17450;
            double t17467 = t17466+1.0;
            double t17468 = c0p*t17465*t17467*2.0;
            double t17469 = rho_a[index]-rho_b[index];
            double t17470 = t17469*t17469;
            double t17471 = 1.0/t17449;
            double t17472 = t17471*t17469;
            double t17473 = two_13*2.0;
            double t17474 = t17473-2.0;
            double t17475 = 1.0/t17474;
            double t17476 = 1.0/(t17449*t17449*t17449*t17449);
            double t17477 = t17470*t17470;
            double t17478 = t17472+1.0;
            double t17479 = pow(t17478,4.0/3.0);
            double t17480 = -t17472+1.0;
            double t17481 = pow(t17480,4.0/3.0);
            double t17482 = t17481+t17479-2.0;
            functional_[index] = -t17449*(t17468-t17482*t17475*t17476*t17477*(t17468-c0f*log((1.0/2.0)/(c0f*(b1f* \
               t17452+b3f*t17453+b2f*c*t17450+b4f*t17454*t17455))+1.0)*(a1f*c*t17450+1.0)*2.0)+(Aa*t17482*t17475* \
               log((1.0/2.0)/(Aa*(b1a*t17452+b3a*t17453+b2a*c*t17450+b4a*t17454*t17455))+1.0)*(t17476*t17477-1.0) \
               *(a1a*c*t17450+1.0)*2.0)/d2fz0);
        } else if (rho_a[index] > cutoff_) {
            double t18448 = rho_a[index]+rho_b[index];
            double t18449 = 1.0/pow(t18448,1.0/3.0);
            double t18450 = c*t18449;
            double t18451 = sqrt(t18450);
            double t18452 = pow(t18450,3.0/2.0);
            double t18453 = c*c;
            double t18454 = 1.0/pow(t18448,2.0/3.0);
            double t18455 = 1.0/c0p;
            double t18456 = b1p*t18451;
            double t18457 = b3p*t18452;
            double t18458 = b4p*t18453*t18454;
            double t18459 = b2p*c*t18449;
            double t18460 = t18456+t18457+t18458+t18459;
            double t18461 = 1.0/t18460;
            double t18462 = t18461*t18455*(1.0/2.0);
            double t18463 = t18462+1.0;
            double t18464 = log(t18463);
            double t18465 = a1p*c*t18449;
            double t18466 = t18465+1.0;
            double t18467 = c0p*t18464*t18466*2.0;
            functional_[index] = -t18448*(t18467-((pow(2.0,1.0/3.0)*2.0-2.0)*(t18467-c0f*log((1.0/2.0)/(c0f*(b1f* \
               t18451+b3f*t18452+b2f*c*t18449+b4f*t18453*t18454))+1.0)*(a1f*c*t18449+1.0)*2.0))/(two_13*2.0-2.0)) \
               ;
        } else if (rho_b[index] > cutoff_) {
            double t18083 = rho_a[index]+rho_b[index];
            double t18084 = 1.0/pow(t18083,1.0/3.0);
            double t18085 = c*t18084;
            double t18086 = sqrt(t18085);
            double t18087 = pow(t18085,3.0/2.0);
            double t18088 = c*c;
            double t18089 = 1.0/pow(t18083,2.0/3.0);
            double t18090 = 1.0/c0p;
            double t18091 = b1p*t18086;
            double t18092 = b3p*t18087;
            double t18093 = b4p*t18088*t18089;
            double t18094 = b2p*c*t18084;
            double t18095 = t18091+t18092+t18093+t18094;
            double t18096 = 1.0/t18095;
            double t18097 = t18090*t18096*(1.0/2.0);
            double t18098 = t18097+1.0;
            double t18099 = log(t18098);
            double t18100 = a1p*c*t18084;
            double t18101 = t18100+1.0;
            double t18102 = c0p*t18101*t18099*2.0;
            functional_[index] = -t18083*(t18102-((pow(2.0,1.0/3.0)*2.0-2.0)*(t18102-c0f*log((1.0/2.0)/(c0f*(b1f* \
               t18086+b3f*t18087+b2f*c*t18084+b4f*t18088*t18089))+1.0)*(a1f*c*t18084+1.0)*2.0))/(two_13*2.0-2.0)) \
               ;
        } else {
            functional_[index] = 0.0;
        } 
   
    }
    //First Partials
    for (int index = 0; index < ntrue && deriv_ >= 1; index++) {

        //V_rho_a
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t17484 = rho_a[index]+rho_b[index];
            double t17485 = 1.0/pow(t17484,1.0/3.0);
            double t17486 = c*t17485;
            double t17487 = sqrt(t17486);
            double t17488 = b1p*t17487;
            double t17489 = pow(t17486,3.0/2.0);
            double t17490 = b3p*t17489;
            double t17491 = c*c;
            double t17492 = 1.0/pow(t17484,2.0/3.0);
            double t17493 = b4p*t17491*t17492;
            double t17494 = b2p*c*t17485;
            double t17495 = t17490+t17493+t17494+t17488;
            double t17496 = 1.0/pow(t17484,4.0/3.0);
            double t17497 = 1.0/c0p;
            double t17498 = 1.0/t17495;
            double t17499 = t17497*t17498*(1.0/2.0);
            double t17500 = t17499+1.0;
            double t17501 = a1p*c*t17485;
            double t17502 = t17501+1.0;
            double t17503 = rho_a[index]-rho_b[index];
            double t17504 = t17503*t17503;
            double t17505 = 1.0/t17484;
            double t17506 = t17503*t17505;
            double t17507 = two_13*2.0;
            double t17508 = t17507-2.0;
            double t17509 = 1.0/t17508;
            double t17510 = 1.0/c0f;
            double t17511 = b1f*t17487;
            double t17512 = b3f*t17489;
            double t17513 = b4f*t17491*t17492;
            double t17514 = b2f*c*t17485;
            double t17515 = t17511+t17512+t17513+t17514;
            double t17516 = 1.0/t17515;
            double t17517 = t17510*t17516*(1.0/2.0);
            double t17518 = t17517+1.0;
            double t17519 = log(t17518);
            double t17520 = a1f*c*t17485;
            double t17521 = t17520+1.0;
            double t17522 = log(t17500);
            double t17532 = c0f*t17521*t17519*2.0;
            double t17533 = c0p*t17502*t17522*2.0;
            double t17523 = t17532-t17533;
            double t17524 = t17506+1.0;
            double t17525 = pow(t17524,4.0/3.0);
            double t17526 = -t17506+1.0;
            double t17527 = pow(t17526,4.0/3.0);
            double t17528 = t17525+t17527-2.0;
            double t17529 = 1.0/(t17484*t17484);
            double t17560 = t17503*t17529;
            double t17530 = t17505-t17560;
            double t17531 = 1.0/(t17484*t17484*t17484*t17484);
            double t17534 = t17504*t17504;
            double t17535 = 1.0/pow(t17484,5.0/3.0);
            double t17536 = 1.0/sqrt(t17486);
            double t17537 = 1.0/t17500;
            double t17538 = 1.0/(t17495*t17495);
            double t17539 = b4p*t17535*t17491*(2.0/3.0);
            double t17540 = b2p*c*t17496*(1.0/3.0);
            double t17541 = b1p*c*t17536*t17496*(1.0/6.0);
            double t17542 = b3p*c*t17487*t17496*(1.0/2.0);
            double t17543 = t17540+t17541+t17542+t17539;
            double t17544 = t17502*t17543*t17537*t17538;
            double t17545 = 1.0/(t17484*t17484*t17484*t17484*t17484);
            double t17546 = 1.0/d2fz0;
            double t17547 = 1.0/Aa;
            double t17548 = b1a*t17487;
            double t17549 = b3a*t17489;
            double t17550 = b4a*t17491*t17492;
            double t17551 = b2a*c*t17485;
            double t17552 = t17550+t17551+t17548+t17549;
            double t17553 = 1.0/t17552;
            double t17554 = t17553*t17547*(1.0/2.0);
            double t17555 = t17554+1.0;
            double t17556 = log(t17555);
            double t17557 = a1a*c*t17485;
            double t17558 = t17557+1.0;
            double t17559 = pow(t17524,1.0/3.0);
            double t17561 = t17530*t17559*(4.0/3.0);
            double t17562 = pow(t17526,1.0/3.0);
            double t17563 = t17561-t17530*t17562*(4.0/3.0);
            double t17564 = t17531*t17534;
            double t17565 = t17564-1.0;
            v_rho_a_[index] = -t17533-t17484*(t17544-t17531*t17534*t17509*t17528*(t17544-(t17521*1.0/(t17515* \
               t17515)*(b2f*c*t17496*(1.0/3.0)+b4f*t17535*t17491*(2.0/3.0)+b1f*c*t17536*t17496*(1.0/6.0)+b3f*c*t17487* \
               t17496*(1.0/2.0)))/t17518+a1f*c*c0f*t17519*t17496*(2.0/3.0)-a1p*c*c0p*t17522*t17496*(2.0/3.0))-a1p* \
               c*c0p*t17522*t17496*(2.0/3.0)+t17531*t17523*t17534*t17509*t17563-t17523*t17534*t17509*t17545*t17528* \
               4.0+t17503*t17504*t17531*t17523*t17509*t17528*4.0-Aa*t17509*t17528*t17546*t17556*t17558*(t17534*t17545* \
               4.0-t17503*t17504*t17531*4.0)*2.0+Aa*t17509*t17563*t17546*t17556*t17565*t17558*2.0+(1.0/(t17552*t17552) \
               *t17509*t17528*t17546*t17565*t17558*(b2a*c*t17496*(1.0/3.0)+b4a*t17535*t17491*(2.0/3.0)+b1a*c*t17536* \
               t17496*(1.0/6.0)+b3a*c*t17487*t17496*(1.0/2.0)))/t17555-Aa*a1a*c*t17509*t17528*t17546*t17556*t17565* \
               t17496*(2.0/3.0))-t17531*t17523*t17534*t17509*t17528-Aa*t17509*t17528*t17546*t17556*t17565*t17558* \
               2.0;
        } else if (rho_a[index] > cutoff_) {
            double t18469 = rho_a[index]+rho_b[index];
            double t18470 = 1.0/pow(t18469,1.0/3.0);
            double t18471 = c*t18470;
            double t18472 = sqrt(t18471);
            double t18473 = b1f*t18472;
            double t18474 = pow(t18471,3.0/2.0);
            double t18475 = b3f*t18474;
            double t18476 = c*c;
            double t18477 = 1.0/pow(t18469,2.0/3.0);
            double t18478 = b4f*t18476*t18477;
            double t18479 = b2f*c*t18470;
            double t18480 = t18473+t18475+t18478+t18479;
            double t18481 = 1.0/pow(t18469,4.0/3.0);
            double t18482 = b1p*t18472;
            double t18483 = b3p*t18474;
            double t18484 = b4p*t18476*t18477;
            double t18485 = b2p*c*t18470;
            double t18486 = t18482+t18483+t18484+t18485;
            double t18487 = 1.0/pow(t18469,5.0/3.0);
            double t18488 = 1.0/sqrt(t18471);
            double t18489 = 1.0/c0f;
            double t18490 = 1.0/t18480;
            double t18491 = t18490*t18489*(1.0/2.0);
            double t18492 = t18491+1.0;
            double t18493 = 1.0/c0p;
            double t18494 = 1.0/t18486;
            double t18495 = t18493*t18494*(1.0/2.0);
            double t18496 = t18495+1.0;
            double t18497 = a1p*c*t18470;
            double t18498 = t18497+1.0;
            double t18499 = 1.0/t18496;
            double t18500 = 1.0/(t18486*t18486);
            double t18501 = b4p*t18476*t18487*(2.0/3.0);
            double t18502 = b2p*c*t18481*(1.0/3.0);
            double t18503 = b1p*c*t18481*t18488*(1.0/6.0);
            double t18504 = b3p*c*t18472*t18481*(1.0/2.0);
            double t18505 = t18501+t18502+t18503+t18504;
            double t18506 = t18500*t18505*t18498*t18499;
            double t18507 = log(t18496);
            double t18508 = pow(2.0,1.0/3.0);
            double t18509 = t18508*2.0;
            double t18510 = t18509-2.0;
            double t18511 = two_13*2.0;
            double t18512 = t18511-2.0;
            double t18513 = 1.0/t18512;
            double t18514 = log(t18492);
            double t18515 = a1f*c*t18470;
            double t18516 = t18515+1.0;
            v_rho_a_[index] = t18469*(-t18506+t18510*t18513*(t18506-(1.0/(t18480*t18480)*t18516*(b2f*c*t18481* \
               (1.0/3.0)+b4f*t18476*t18487*(2.0/3.0)+b1f*c*t18481*t18488*(1.0/6.0)+b3f*c*t18472*t18481*(1.0/2.0)) \
               )/t18492+a1f*c*c0f*t18514*t18481*(2.0/3.0)-a1p*c*c0p*t18507*t18481*(2.0/3.0))+a1p*c*c0p*t18507*t18481* \
               (2.0/3.0))-c0p*t18507*t18498*2.0-t18510*t18513*(c0f*t18514*t18516*2.0-c0p*t18507*t18498*2.0);
        } else if (rho_b[index] > cutoff_) {
            double t18104 = rho_a[index]+rho_b[index];
            double t18105 = 1.0/pow(t18104,1.0/3.0);
            double t18106 = c*t18105;
            double t18107 = sqrt(t18106);
            double t18108 = b1f*t18107;
            double t18109 = pow(t18106,3.0/2.0);
            double t18110 = b3f*t18109;
            double t18111 = c*c;
            double t18112 = 1.0/pow(t18104,2.0/3.0);
            double t18113 = b4f*t18111*t18112;
            double t18114 = b2f*c*t18105;
            double t18115 = t18110+t18113+t18114+t18108;
            double t18116 = 1.0/pow(t18104,4.0/3.0);
            double t18117 = b1p*t18107;
            double t18118 = b3p*t18109;
            double t18119 = b4p*t18111*t18112;
            double t18120 = b2p*c*t18105;
            double t18121 = t18120+t18117+t18118+t18119;
            double t18122 = 1.0/pow(t18104,5.0/3.0);
            double t18123 = 1.0/sqrt(t18106);
            double t18124 = 1.0/c0f;
            double t18125 = 1.0/t18115;
            double t18126 = t18124*t18125*(1.0/2.0);
            double t18127 = t18126+1.0;
            double t18128 = 1.0/c0p;
            double t18129 = 1.0/t18121;
            double t18130 = t18128*t18129*(1.0/2.0);
            double t18131 = t18130+1.0;
            double t18132 = a1p*c*t18105;
            double t18133 = t18132+1.0;
            double t18134 = 1.0/t18131;
            double t18135 = 1.0/(t18121*t18121);
            double t18136 = b4p*t18111*t18122*(2.0/3.0);
            double t18137 = b2p*c*t18116*(1.0/3.0);
            double t18138 = b1p*c*t18123*t18116*(1.0/6.0);
            double t18139 = b3p*c*t18107*t18116*(1.0/2.0);
            double t18140 = t18136+t18137+t18138+t18139;
            double t18141 = t18140*t18133*t18134*t18135;
            double t18142 = log(t18131);
            double t18143 = pow(2.0,1.0/3.0);
            double t18144 = t18143*2.0;
            double t18145 = t18144-2.0;
            double t18146 = two_13*2.0;
            double t18147 = t18146-2.0;
            double t18148 = 1.0/t18147;
            double t18149 = log(t18127);
            double t18150 = a1f*c*t18105;
            double t18151 = t18150+1.0;
            v_rho_a_[index] = t18104*(-t18141+t18145*t18148*(t18141-(1.0/(t18115*t18115)*t18151*(b2f*c*t18116* \
               (1.0/3.0)+b4f*t18111*t18122*(2.0/3.0)+b1f*c*t18123*t18116*(1.0/6.0)+b3f*c*t18107*t18116*(1.0/2.0)) \
               )/t18127+a1f*c*c0f*t18116*t18149*(2.0/3.0)-a1p*c*c0p*t18142*t18116*(2.0/3.0))+a1p*c*c0p*t18142*t18116* \
               (2.0/3.0))-c0p*t18133*t18142*2.0-t18145*t18148*(c0f*t18151*t18149*2.0-c0p*t18133*t18142*2.0);
        } else {
            v_rho_a_[index] = 0.0;
        } 

        //V_rho_b
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t17567 = rho_a[index]+rho_b[index];
            double t17568 = 1.0/pow(t17567,1.0/3.0);
            double t17569 = c*t17568;
            double t17570 = sqrt(t17569);
            double t17571 = b1p*t17570;
            double t17572 = pow(t17569,3.0/2.0);
            double t17573 = b3p*t17572;
            double t17574 = c*c;
            double t17575 = 1.0/pow(t17567,2.0/3.0);
            double t17576 = b4p*t17574*t17575;
            double t17577 = b2p*c*t17568;
            double t17578 = t17571+t17573+t17576+t17577;
            double t17579 = 1.0/pow(t17567,4.0/3.0);
            double t17580 = 1.0/c0p;
            double t17581 = 1.0/t17578;
            double t17582 = t17580*t17581*(1.0/2.0);
            double t17583 = t17582+1.0;
            double t17584 = a1p*c*t17568;
            double t17585 = t17584+1.0;
            double t17586 = rho_a[index]-rho_b[index];
            double t17587 = t17586*t17586;
            double t17588 = 1.0/t17567;
            double t17589 = t17586*t17588;
            double t17590 = two_13*2.0;
            double t17591 = t17590-2.0;
            double t17592 = 1.0/t17591;
            double t17593 = 1.0/c0f;
            double t17594 = b1f*t17570;
            double t17595 = b3f*t17572;
            double t17596 = b4f*t17574*t17575;
            double t17597 = b2f*c*t17568;
            double t17598 = t17594+t17595+t17596+t17597;
            double t17599 = 1.0/t17598;
            double t17600 = t17593*t17599*(1.0/2.0);
            double t17601 = t17600+1.0;
            double t17602 = log(t17601);
            double t17603 = a1f*c*t17568;
            double t17604 = t17603+1.0;
            double t17605 = log(t17583);
            double t17616 = c0f*t17602*t17604*2.0;
            double t17617 = c0p*t17605*t17585*2.0;
            double t17606 = t17616-t17617;
            double t17607 = t17589+1.0;
            double t17608 = pow(t17607,4.0/3.0);
            double t17609 = -t17589+1.0;
            double t17610 = pow(t17609,4.0/3.0);
            double t17611 = t17610+t17608-2.0;
            double t17612 = 1.0/(t17567*t17567);
            double t17613 = t17612*t17586;
            double t17614 = t17613+t17588;
            double t17615 = 1.0/(t17567*t17567*t17567*t17567);
            double t17618 = t17587*t17587;
            double t17619 = 1.0/pow(t17567,5.0/3.0);
            double t17620 = 1.0/sqrt(t17569);
            double t17621 = 1.0/t17583;
            double t17622 = 1.0/(t17578*t17578);
            double t17623 = b4p*t17574*t17619*(2.0/3.0);
            double t17624 = b2p*c*t17579*(1.0/3.0);
            double t17625 = b1p*c*t17620*t17579*(1.0/6.0);
            double t17626 = b3p*c*t17570*t17579*(1.0/2.0);
            double t17627 = t17623+t17624+t17625+t17626;
            double t17628 = 1.0/(t17567*t17567*t17567*t17567*t17567);
            double t17629 = 1.0/d2fz0;
            double t17630 = 1.0/Aa;
            double t17631 = b1a*t17570;
            double t17632 = b3a*t17572;
            double t17633 = b4a*t17574*t17575;
            double t17634 = b2a*c*t17568;
            double t17635 = t17631+t17632+t17633+t17634;
            double t17636 = 1.0/t17635;
            double t17637 = t17630*t17636*(1.0/2.0);
            double t17638 = t17637+1.0;
            double t17639 = log(t17638);
            double t17640 = a1a*c*t17568;
            double t17641 = t17640+1.0;
            double t17642 = pow(t17607,1.0/3.0);
            double t17643 = t17614*t17642*(4.0/3.0);
            double t17644 = pow(t17609,1.0/3.0);
            double t17645 = t17643-t17614*t17644*(4.0/3.0);
            double t17646 = t17615*t17618;
            double t17647 = t17646-1.0;
            v_rho_b_[index] = -t17617+t17567*(-t17621*t17622*t17627*t17585+a1p*c*c0p*t17605*t17579*(2.0/3.0)+ \
               t17611*t17606*t17618*t17592*t17628*4.0+t17606*t17615*t17618*t17645*t17592+t17611*t17615*t17618*t17592* \
               (t17621*t17622*t17627*t17585-(t17604*1.0/(t17598*t17598)*(b2f*c*t17579*(1.0/3.0)+b4f*t17574*t17619* \
               (2.0/3.0)+b1f*c*t17620*t17579*(1.0/6.0)+b3f*c*t17570*t17579*(1.0/2.0)))/t17601+a1f*c*c0f*t17602*t17579* \
               (2.0/3.0)-a1p*c*c0p*t17605*t17579*(2.0/3.0))+t17611*t17606*t17615*t17592*t17586*t17587*4.0+Aa*t17611* \
               t17641*t17592*t17629*t17639*(t17618*t17628*4.0+t17615*t17586*t17587*4.0)*2.0+Aa*t17641*t17645*t17592* \
               t17629*t17647*t17639*2.0-(t17611*t17641*1.0/(t17635*t17635)*t17592*t17629*t17647*(b2a*c*t17579*(1.0/ \
               3.0)+b4a*t17574*t17619*(2.0/3.0)+b1a*c*t17620*t17579*(1.0/6.0)+b3a*c*t17570*t17579*(1.0/2.0)))/t17638+ \
               Aa*a1a*c*t17611*t17592*t17629*t17647*t17639*t17579*(2.0/3.0))-t17611*t17606*t17615*t17618*t17592-Aa* \
               t17611*t17641*t17592*t17629*t17647*t17639*2.0;
        } else if (rho_a[index] > cutoff_) {
            double t18518 = rho_a[index]+rho_b[index];
            double t18519 = 1.0/pow(t18518,1.0/3.0);
            double t18520 = c*t18519;
            double t18521 = sqrt(t18520);
            double t18522 = b1f*t18521;
            double t18523 = pow(t18520,3.0/2.0);
            double t18524 = b3f*t18523;
            double t18525 = c*c;
            double t18526 = 1.0/pow(t18518,2.0/3.0);
            double t18527 = b4f*t18525*t18526;
            double t18528 = b2f*c*t18519;
            double t18529 = t18522+t18524+t18527+t18528;
            double t18530 = 1.0/pow(t18518,4.0/3.0);
            double t18531 = b1p*t18521;
            double t18532 = b3p*t18523;
            double t18533 = b4p*t18525*t18526;
            double t18534 = b2p*c*t18519;
            double t18535 = t18531+t18532+t18533+t18534;
            double t18536 = 1.0/pow(t18518,5.0/3.0);
            double t18537 = 1.0/sqrt(t18520);
            double t18538 = 1.0/c0f;
            double t18539 = 1.0/t18529;
            double t18540 = t18538*t18539*(1.0/2.0);
            double t18541 = t18540+1.0;
            double t18542 = 1.0/c0p;
            double t18543 = 1.0/t18535;
            double t18544 = t18542*t18543*(1.0/2.0);
            double t18545 = t18544+1.0;
            double t18546 = a1p*c*t18519;
            double t18547 = t18546+1.0;
            double t18548 = 1.0/t18545;
            double t18549 = 1.0/(t18535*t18535);
            double t18550 = b4p*t18525*t18536*(2.0/3.0);
            double t18551 = b2p*c*t18530*(1.0/3.0);
            double t18552 = b1p*c*t18530*t18537*(1.0/6.0);
            double t18553 = b3p*c*t18521*t18530*(1.0/2.0);
            double t18554 = t18550+t18551+t18552+t18553;
            double t18555 = t18554*t18547*t18548*t18549;
            double t18556 = log(t18545);
            double t18557 = pow(2.0,1.0/3.0);
            double t18558 = t18557*2.0;
            double t18559 = t18558-2.0;
            double t18560 = two_13*2.0;
            double t18561 = t18560-2.0;
            double t18562 = 1.0/t18561;
            double t18563 = log(t18541);
            double t18564 = a1f*c*t18519;
            double t18565 = t18564+1.0;
            v_rho_b_[index] = t18518*(-t18555+t18562*t18559*(t18555-(1.0/(t18529*t18529)*t18565*(b2f*c*t18530* \
               (1.0/3.0)+b4f*t18525*t18536*(2.0/3.0)+b1f*c*t18530*t18537*(1.0/6.0)+b3f*c*t18521*t18530*(1.0/2.0)) \
               )/t18541+a1f*c*c0f*t18530*t18563*(2.0/3.0)-a1p*c*c0p*t18530*t18556*(2.0/3.0))+a1p*c*c0p*t18530*t18556* \
               (2.0/3.0))-c0p*t18547*t18556*2.0-t18562*t18559*(c0f*t18563*t18565*2.0-c0p*t18547*t18556*2.0);
        } else if (rho_b[index] > cutoff_) {
            double t18153 = rho_a[index]+rho_b[index];
            double t18154 = 1.0/pow(t18153,1.0/3.0);
            double t18155 = c*t18154;
            double t18156 = sqrt(t18155);
            double t18157 = b1f*t18156;
            double t18158 = pow(t18155,3.0/2.0);
            double t18159 = b3f*t18158;
            double t18160 = c*c;
            double t18161 = 1.0/pow(t18153,2.0/3.0);
            double t18162 = b4f*t18160*t18161;
            double t18163 = b2f*c*t18154;
            double t18164 = t18162+t18163+t18157+t18159;
            double t18165 = 1.0/pow(t18153,4.0/3.0);
            double t18166 = b1p*t18156;
            double t18167 = b3p*t18158;
            double t18168 = b4p*t18160*t18161;
            double t18169 = b2p*c*t18154;
            double t18170 = t18166+t18167+t18168+t18169;
            double t18171 = 1.0/pow(t18153,5.0/3.0);
            double t18172 = 1.0/sqrt(t18155);
            double t18173 = 1.0/c0f;
            double t18174 = 1.0/t18164;
            double t18175 = t18173*t18174*(1.0/2.0);
            double t18176 = t18175+1.0;
            double t18177 = 1.0/c0p;
            double t18178 = 1.0/t18170;
            double t18179 = t18177*t18178*(1.0/2.0);
            double t18180 = t18179+1.0;
            double t18181 = a1p*c*t18154;
            double t18182 = t18181+1.0;
            double t18183 = 1.0/t18180;
            double t18184 = 1.0/(t18170*t18170);
            double t18185 = b4p*t18160*t18171*(2.0/3.0);
            double t18186 = b2p*c*t18165*(1.0/3.0);
            double t18187 = b1p*c*t18172*t18165*(1.0/6.0);
            double t18188 = b3p*c*t18156*t18165*(1.0/2.0);
            double t18189 = t18185+t18186+t18187+t18188;
            double t18190 = t18182*t18183*t18184*t18189;
            double t18191 = log(t18180);
            double t18192 = pow(2.0,1.0/3.0);
            double t18193 = t18192*2.0;
            double t18194 = t18193-2.0;
            double t18195 = two_13*2.0;
            double t18196 = t18195-2.0;
            double t18197 = 1.0/t18196;
            double t18198 = log(t18176);
            double t18199 = a1f*c*t18154;
            double t18200 = t18199+1.0;
            v_rho_b_[index] = t18153*(-t18190+t18194*t18197*(t18190-(t18200*1.0/(t18164*t18164)*(b2f*c*t18165* \
               (1.0/3.0)+b4f*t18160*t18171*(2.0/3.0)+b1f*c*t18172*t18165*(1.0/6.0)+b3f*c*t18156*t18165*(1.0/2.0)) \
               )/t18176+a1f*c*c0f*t18165*t18198*(2.0/3.0)-a1p*c*c0p*t18191*t18165*(2.0/3.0))+a1p*c*c0p*t18191*t18165* \
               (2.0/3.0))-c0p*t18182*t18191*2.0-t18194*t18197*(c0f*t18200*t18198*2.0-c0p*t18182*t18191*2.0);
        } else {
            v_rho_b_[index] = 0.0;
        } 

        if (is_gga_) {

            //V_gamma_aa
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_aa_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_aa_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_aa_[index] = 0.0;
            } else {
                v_gamma_aa_[index] = 0.0;
            } 

            //V_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_ab_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_ab_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_ab_[index] = 0.0;
            } else {
                v_gamma_ab_[index] = 0.0;
            } 

            //V_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_bb_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_bb_[index] = 0.0;
            } else {
                v_gamma_bb_[index] = 0.0;
            } 
        }
        if (is_meta_) {

            //V_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_tau_a_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_tau_a_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_tau_a_[index] = 0.0;
            } else {
                v_tau_a_[index] = 0.0;
            } 

            //V_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_tau_b_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_tau_b_[index] = 0.0;
            } else {
                v_tau_b_[index] = 0.0;
            } 
        }
    }
    //Second Partials
    for (int index = 0; index < ntrue && deriv_ >= 2; index++) {

        //V_rho_a_rho_a
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t17654 = rho_a[index]+rho_b[index];
            double t17655 = 1.0/pow(t17654,1.0/3.0);
            double t17656 = c*t17655;
            double t17657 = sqrt(t17656);
            double t17658 = b1p*t17657;
            double t17659 = pow(t17656,3.0/2.0);
            double t17660 = b3p*t17659;
            double t17661 = c*c;
            double t17662 = 1.0/pow(t17654,2.0/3.0);
            double t17663 = b4p*t17661*t17662;
            double t17664 = b2p*c*t17655;
            double t17665 = t17660+t17663+t17664+t17658;
            double t17666 = 1.0/pow(t17654,7.0/3.0);
            double t17667 = 1.0/pow(t17654,8.0/3.0);
            double t17668 = 1.0/sqrt(t17656);
            double t17669 = a1p*c*t17655;
            double t17670 = t17669+1.0;
            double t17671 = 1.0/c0p;
            double t17672 = 1.0/t17665;
            double t17673 = t17671*t17672*(1.0/2.0);
            double t17674 = t17673+1.0;
            double t17675 = 1.0/t17674;
            double t17676 = 1.0/pow(t17654,4.0/3.0);
            double t17716 = 1.0/pow(t17654,5.0/3.0);
            double t17718 = b4p*t17661*t17716*(2.0/3.0);
            double t17719 = b2p*c*t17676*(1.0/3.0);
            double t17720 = b1p*c*t17676*t17668*(1.0/6.0);
            double t17721 = b3p*c*t17657*t17676*(1.0/2.0);
            double t17677 = t17720+t17721+t17718+t17719;
            double t17678 = rho_a[index]-rho_b[index];
            double t17679 = 1.0/t17654;
            double t17680 = t17678*t17679;
            double t17681 = two_13*2.0;
            double t17682 = t17681-2.0;
            double t17683 = 1.0/t17682;
            double t17684 = 1.0/c0f;
            double t17685 = b1f*t17657;
            double t17686 = b3f*t17659;
            double t17687 = b4f*t17661*t17662;
            double t17688 = b2f*c*t17655;
            double t17689 = t17685+t17686+t17687+t17688;
            double t17690 = 1.0/t17689;
            double t17691 = t17690*t17684*(1.0/2.0);
            double t17692 = t17691+1.0;
            double t17693 = log(t17692);
            double t17694 = a1f*c*t17655;
            double t17695 = t17694+1.0;
            double t17696 = log(t17674);
            double t17704 = c0f*t17693*t17695*2.0;
            double t17705 = c0p*t17670*t17696*2.0;
            double t17697 = t17704-t17705;
            double t17698 = t17678*t17678;
            double t17699 = t17680+1.0;
            double t17700 = pow(t17699,4.0/3.0);
            double t17701 = -t17680+1.0;
            double t17702 = pow(t17701,4.0/3.0);
            double t17703 = t17700+t17702-2.0;
            double t17706 = 1.0/(t17654*t17654);
            double t17710 = t17706*t17678;
            double t17707 = -t17710+t17679;
            double t17708 = 1.0/(t17654*t17654*t17654*t17654);
            double t17709 = pow(t17699,1.0/3.0);
            double t17711 = t17707*t17709*(4.0/3.0);
            double t17712 = pow(t17701,1.0/3.0);
            double t17745 = t17712*t17707*(4.0/3.0);
            double t17713 = t17711-t17745;
            double t17714 = 1.0/(t17654*t17654*t17654*t17654*t17654);
            double t17715 = t17698*t17698;
            double t17717 = 1.0/(t17665*t17665);
            double t17722 = 1.0/t17692;
            double t17723 = 1.0/(t17689*t17689);
            double t17724 = b4f*t17661*t17716*(2.0/3.0);
            double t17725 = b2f*c*t17676*(1.0/3.0);
            double t17726 = b1f*c*t17676*t17668*(1.0/6.0);
            double t17727 = b3f*c*t17657*t17676*(1.0/2.0);
            double t17728 = t17724+t17725+t17726+t17727;
            double t17729 = t17722*t17723*t17728*t17695;
            double t17730 = a1p*c*c0p*t17676*t17696*(2.0/3.0);
            double t17746 = t17670*t17717*t17675*t17677;
            double t17747 = a1f*c*c0f*t17693*t17676*(2.0/3.0);
            double t17731 = t17730-t17746+t17729-t17747;
            double t17732 = t17677*t17677;
            double t17733 = 1.0/pow(t17656,3.0/2.0);
            double t17734 = b4p*t17661*t17667*(1.0E1/9.0);
            double t17735 = b2p*c*t17666*(4.0/9.0);
            double t17736 = b1p*c*t17666*t17668*(2.0/9.0);
            double t17737 = b3p*c*t17657*t17666*(2.0/3.0);
            double t17738 = b3p*t17661*t17667*t17668*(1.0/1.2E1);
            double t17739 = t17734+t17735+t17736+t17737+t17738-b1p*t17661*t17733*t17667*(1.0/3.6E1);
            double t17740 = 1.0/(t17665*t17665*t17665);
            double t17741 = t17740*t17732*t17670*t17675*2.0;
            double t17742 = t17728*t17728;
            double t17743 = 1.0/(t17674*t17674);
            double t17744 = 1.0/(t17665*t17665*t17665*t17665);
            double t17748 = t17706*2.0;
            double t17749 = 1.0/(t17654*t17654*t17654);
            double t17767 = t17749*t17678*2.0;
            double t17750 = t17748-t17767;
            double t17751 = t17707*t17707;
            double t17752 = a1p*c*c0p*t17666*t17696*(8.0/9.0);
            double t17753 = 1.0/(t17654*t17654*t17654*t17654*t17654*t17654);
            double t17754 = 1.0/d2fz0;
            double t17755 = 1.0/Aa;
            double t17756 = b1a*t17657;
            double t17757 = b3a*t17659;
            double t17758 = b4a*t17661*t17662;
            double t17759 = b2a*c*t17655;
            double t17760 = t17756+t17757+t17758+t17759;
            double t17761 = 1.0/t17760;
            double t17762 = t17761*t17755*(1.0/2.0);
            double t17763 = t17762+1.0;
            double t17764 = log(t17763);
            double t17765 = a1a*c*t17655;
            double t17766 = t17765+1.0;
            double t17768 = t17712*t17750*(4.0/3.0);
            double t17769 = 1.0/pow(t17699,2.0/3.0);
            double t17770 = t17751*t17769*(4.0/9.0);
            double t17771 = 1.0/pow(t17701,2.0/3.0);
            double t17772 = t17751*t17771*(4.0/9.0);
            double t17773 = t17770+t17772+t17768-t17750*t17709*(4.0/3.0);
            double t17774 = t17714*t17715*4.0;
            double t17786 = t17708*t17678*t17698*4.0;
            double t17775 = t17774-t17786;
            double t17776 = 1.0/t17763;
            double t17777 = t17715*t17708;
            double t17778 = t17777-1.0;
            double t17779 = 1.0/(t17760*t17760);
            double t17780 = b4a*t17661*t17716*(2.0/3.0);
            double t17781 = b2a*c*t17676*(1.0/3.0);
            double t17782 = b1a*c*t17676*t17668*(1.0/6.0);
            double t17783 = b3a*c*t17657*t17676*(1.0/2.0);
            double t17784 = t17780+t17781+t17782+t17783;
            double t17785 = t17784*t17784;
            v_rho_a_rho_a_[index] = -t17654*(t17741+t17752-t17670*t17717*t17675*t17739-t17703*t17715*t17708*t17683* \
               (t17741+t17752-t17670*t17717*t17675*t17739-t17722*t17742*t17695*1.0/(t17689*t17689*t17689)*2.0+t17722* \
               t17723*t17695*(b2f*c*t17666*(4.0/9.0)+b4f*t17661*t17667*(1.0E1/9.0)+b1f*c*t17666*t17668*(2.0/9.0)+ \
               b3f*c*t17657*t17666*(2.0/3.0)-b1f*t17661*t17733*t17667*(1.0/3.6E1)+b3f*t17661*t17667*t17668*(1.0/1.2E1) \
               )+t17742*1.0/(t17692*t17692)*t17684*t17695*1.0/(t17689*t17689*t17689*t17689)*(1.0/2.0)-a1f*c*c0f*t17666* \
               t17693*(8.0/9.0)-t17732*t17670*t17671*t17743*t17744*(1.0/2.0)+a1f*c*t17722*t17723*t17728*t17676*(2.0/ \
               3.0)-a1p*c*t17717*t17675*t17676*t17677*(2.0/3.0))-t17703*t17731*t17714*t17715*t17683*8.0+t17713*t17731* \
               t17715*t17708*t17683*2.0-t17732*t17670*t17671*t17743*t17744*(1.0/2.0)-t17713*t17714*t17715*t17683* \
               t17697*8.0+t17703*t17715*t17753*t17683*t17697*2.0E1+t17715*t17708*t17683*t17773*t17697+t17703*t17708* \
               t17683*t17697*t17698*1.2E1+t17703*t17731*t17708*t17683*t17678*t17698*8.0-t17703*t17714*t17683*t17678* \
               t17697*t17698*3.2E1+t17713*t17708*t17683*t17678*t17697*t17698*8.0-a1p*c*t17717*t17675*t17676*t17677* \
               (2.0/3.0)-Aa*t17713*t17754*t17683*t17764*t17766*t17775*4.0+Aa*t17754*t17683*t17764*t17773*t17766*t17778* \
               2.0+Aa*t17703*t17754*t17683*t17764*t17766*(t17715*t17753*2.0E1+t17708*t17698*1.2E1-t17714*t17678*t17698* \
               3.2E1)*2.0-t17703*t17754*t17683*t17766*t17775*t17784*t17776*t17779*2.0+t17713*t17754*t17683*t17766* \
               t17784*t17776*t17778*t17779*2.0+t17703*1.0/(t17760*t17760*t17760)*t17754*t17683*t17766*t17776*t17785* \
               t17778*2.0-t17703*t17754*t17683*t17766*t17776*t17778*t17779*(b2a*c*t17666*(4.0/9.0)+b4a*t17661*t17667* \
               (1.0E1/9.0)+b1a*c*t17666*t17668*(2.0/9.0)+b3a*c*t17657*t17666*(2.0/3.0)-b1a*t17661*t17733*t17667*(1.0/ \
               3.6E1)+b3a*t17661*t17667*t17668*(1.0/1.2E1))+Aa*a1a*c*t17703*t17754*t17683*t17764*t17676*t17775*(4.0/ \
               3.0)+Aa*a1a*c*t17703*t17754*t17683*t17764*t17666*t17778*(8.0/9.0)-Aa*a1a*c*t17713*t17754*t17683*t17764* \
               t17676*t17778*(4.0/3.0)-t17703*1.0/(t17760*t17760*t17760*t17760)*t17754*1.0/(t17763*t17763)*t17683* \
               t17755*t17766*t17785*t17778*(1.0/2.0)-a1a*c*t17703*t17754*t17683*t17676*t17784*t17776*t17778*t17779* \
               (2.0/3.0))-t17670*t17717*t17675*t17677*2.0+a1p*c*c0p*t17676*t17696*(4.0/3.0)-t17703*t17731*t17715* \
               t17708*t17683*2.0+t17703*t17714*t17715*t17683*t17697*8.0-t17713*t17715*t17708*t17683*t17697*2.0-t17703* \
               t17708*t17683*t17678*t17697*t17698*8.0-Aa*t17713*t17754*t17683*t17764*t17766*t17778*4.0+Aa*t17703* \
               t17754*t17683*t17764*t17766*(t17774-t17786)*4.0-t17703*t17754*t17683*t17766*t17784*t17776*t17778*t17779* \
               2.0+Aa*a1a*c*t17703*t17754*t17683*t17764*t17676*t17778*(4.0/3.0);
        } else if (rho_a[index] > cutoff_) {
            double t18572 = rho_a[index]+rho_b[index];
            double t18573 = 1.0/pow(t18572,1.0/3.0);
            double t18574 = c*t18573;
            double t18575 = sqrt(t18574);
            double t18576 = b1f*t18575;
            double t18577 = pow(t18574,3.0/2.0);
            double t18578 = b3f*t18577;
            double t18579 = c*c;
            double t18580 = 1.0/pow(t18572,2.0/3.0);
            double t18581 = b4f*t18580*t18579;
            double t18582 = b2f*c*t18573;
            double t18583 = t18581+t18582+t18576+t18578;
            double t18584 = 1.0/pow(t18572,7.0/3.0);
            double t18585 = 1.0/pow(t18572,8.0/3.0);
            double t18586 = 1.0/sqrt(t18574);
            double t18587 = b1p*t18575;
            double t18588 = b3p*t18577;
            double t18589 = b4p*t18580*t18579;
            double t18590 = b2p*c*t18573;
            double t18591 = t18590+t18587+t18588+t18589;
            double t18592 = 1.0/pow(t18574,3.0/2.0);
            double t18593 = a1f*c*t18573;
            double t18594 = t18593+1.0;
            double t18595 = 1.0/c0f;
            double t18596 = 1.0/t18583;
            double t18597 = t18595*t18596*(1.0/2.0);
            double t18598 = t18597+1.0;
            double t18599 = 1.0/t18598;
            double t18600 = 1.0/pow(t18572,4.0/3.0);
            double t18609 = 1.0/pow(t18572,5.0/3.0);
            double t18611 = b4f*t18609*t18579*(2.0/3.0);
            double t18612 = b2f*c*t18600*(1.0/3.0);
            double t18613 = b1f*c*t18600*t18586*(1.0/6.0);
            double t18614 = b3f*c*t18600*t18575*(1.0/2.0);
            double t18601 = t18611+t18612+t18613+t18614;
            double t18602 = a1p*c*t18573;
            double t18603 = t18602+1.0;
            double t18604 = 1.0/c0p;
            double t18605 = 1.0/t18591;
            double t18606 = t18604*t18605*(1.0/2.0);
            double t18607 = t18606+1.0;
            double t18608 = 1.0/t18607;
            double t18616 = b4p*t18609*t18579*(2.0/3.0);
            double t18617 = b2p*c*t18600*(1.0/3.0);
            double t18618 = b1p*c*t18600*t18586*(1.0/6.0);
            double t18619 = b3p*c*t18600*t18575*(1.0/2.0);
            double t18610 = t18616+t18617+t18618+t18619;
            double t18615 = t18601*t18601;
            double t18620 = t18610*t18610;
            double t18621 = 1.0/(t18583*t18583);
            double t18622 = 1.0/(t18591*t18591);
            double t18623 = b4p*t18585*t18579*(1.0E1/9.0);
            double t18624 = b2p*c*t18584*(4.0/9.0);
            double t18625 = b1p*c*t18584*t18586*(2.0/9.0);
            double t18626 = b3p*c*t18575*t18584*(2.0/3.0);
            double t18627 = b3p*t18585*t18586*t18579*(1.0/1.2E1);
            double t18628 = t18623+t18624+t18625+t18626+t18627-b1p*t18592*t18585*t18579*(1.0/3.6E1);
            double t18629 = t18603*t18622*t18608*t18628;
            double t18630 = 1.0/(t18591*t18591*t18591);
            double t18631 = 1.0/(t18607*t18607);
            double t18632 = 1.0/(t18591*t18591*t18591*t18591);
            double t18633 = t18620*t18603*t18604*t18631*t18632*(1.0/2.0);
            double t18634 = log(t18607);
            double t18635 = a1p*c*t18600*t18610*t18622*t18608*(2.0/3.0);
            double t18636 = pow(2.0,1.0/3.0);
            double t18637 = t18636*2.0;
            double t18638 = t18637-2.0;
            double t18639 = two_13*2.0;
            double t18640 = t18639-2.0;
            double t18641 = 1.0/t18640;
            double t18642 = log(t18598);
            v_rho_a_rho_a_[index] = t18572*(t18633+t18635+t18629-t18641*t18638*(t18633+t18635+t18629-t18620*t18603* \
               t18630*t18608*2.0+t18615*1.0/(t18583*t18583*t18583)*t18594*t18599*2.0-t18621*t18594*t18599*(b2f*c* \
               t18584*(4.0/9.0)+b4f*t18585*t18579*(1.0E1/9.0)+b1f*c*t18584*t18586*(2.0/9.0)+b3f*c*t18575*t18584*(2.0/ \
               3.0)-b1f*t18592*t18585*t18579*(1.0/3.6E1)+b3f*t18585*t18586*t18579*(1.0/1.2E1))-t18615*1.0/(t18583* \
               t18583*t18583*t18583)*t18594*t18595*1.0/(t18598*t18598)*(1.0/2.0)+a1f*c*c0f*t18642*t18584*(8.0/9.0) \
               -a1p*c*c0p*t18634*t18584*(8.0/9.0)-a1f*c*t18600*t18601*t18621*t18599*(2.0/3.0))-t18620*t18603*t18630* \
               t18608*2.0-a1p*c*c0p*t18634*t18584*(8.0/9.0))+t18641*t18638*(t18610*t18603*t18622*t18608-t18601*t18621* \
               t18594*t18599+a1f*c*c0f*t18600*t18642*(2.0/3.0)-a1p*c*c0p*t18600*t18634*(2.0/3.0))*2.0-t18610*t18603* \
               t18622*t18608*2.0+a1p*c*c0p*t18600*t18634*(4.0/3.0);
        } else if (rho_b[index] > cutoff_) {
            double t18207 = rho_a[index]+rho_b[index];
            double t18208 = 1.0/pow(t18207,1.0/3.0);
            double t18209 = c*t18208;
            double t18210 = sqrt(t18209);
            double t18211 = b1f*t18210;
            double t18212 = pow(t18209,3.0/2.0);
            double t18213 = b3f*t18212;
            double t18214 = c*c;
            double t18215 = 1.0/pow(t18207,2.0/3.0);
            double t18216 = b4f*t18214*t18215;
            double t18217 = b2f*c*t18208;
            double t18218 = t18211+t18213+t18216+t18217;
            double t18219 = 1.0/pow(t18207,7.0/3.0);
            double t18220 = 1.0/pow(t18207,8.0/3.0);
            double t18221 = 1.0/sqrt(t18209);
            double t18222 = b1p*t18210;
            double t18223 = b3p*t18212;
            double t18224 = b4p*t18214*t18215;
            double t18225 = b2p*c*t18208;
            double t18226 = t18222+t18223+t18224+t18225;
            double t18227 = 1.0/pow(t18209,3.0/2.0);
            double t18228 = a1f*c*t18208;
            double t18229 = t18228+1.0;
            double t18230 = 1.0/c0f;
            double t18231 = 1.0/t18218;
            double t18232 = t18230*t18231*(1.0/2.0);
            double t18233 = t18232+1.0;
            double t18234 = 1.0/t18233;
            double t18235 = 1.0/pow(t18207,4.0/3.0);
            double t18244 = 1.0/pow(t18207,5.0/3.0);
            double t18246 = b4f*t18214*t18244*(2.0/3.0);
            double t18247 = b2f*c*t18235*(1.0/3.0);
            double t18248 = b1f*c*t18221*t18235*(1.0/6.0);
            double t18249 = b3f*c*t18210*t18235*(1.0/2.0);
            double t18236 = t18246+t18247+t18248+t18249;
            double t18237 = a1p*c*t18208;
            double t18238 = t18237+1.0;
            double t18239 = 1.0/c0p;
            double t18240 = 1.0/t18226;
            double t18241 = t18240*t18239*(1.0/2.0);
            double t18242 = t18241+1.0;
            double t18243 = 1.0/t18242;
            double t18251 = b4p*t18214*t18244*(2.0/3.0);
            double t18252 = b2p*c*t18235*(1.0/3.0);
            double t18253 = b1p*c*t18221*t18235*(1.0/6.0);
            double t18254 = b3p*c*t18210*t18235*(1.0/2.0);
            double t18245 = t18251+t18252+t18253+t18254;
            double t18250 = t18236*t18236;
            double t18255 = t18245*t18245;
            double t18256 = 1.0/(t18218*t18218);
            double t18257 = 1.0/(t18226*t18226);
            double t18258 = b4p*t18220*t18214*(1.0E1/9.0);
            double t18259 = b2p*c*t18219*(4.0/9.0);
            double t18260 = b1p*c*t18221*t18219*(2.0/9.0);
            double t18261 = b3p*c*t18210*t18219*(2.0/3.0);
            double t18262 = b3p*t18220*t18221*t18214*(1.0/1.2E1);
            double t18263 = t18260+t18261+t18262+t18258+t18259-b1p*t18220*t18214*t18227*(1.0/3.6E1);
            double t18264 = t18243*t18263*t18238*t18257;
            double t18265 = 1.0/(t18226*t18226*t18226);
            double t18266 = 1.0/(t18242*t18242);
            double t18267 = 1.0/(t18226*t18226*t18226*t18226);
            double t18268 = t18255*t18238*t18239*t18266*t18267*(1.0/2.0);
            double t18269 = log(t18242);
            double t18270 = a1p*c*t18243*t18235*t18245*t18257*(2.0/3.0);
            double t18271 = pow(2.0,1.0/3.0);
            double t18272 = t18271*2.0;
            double t18273 = t18272-2.0;
            double t18274 = two_13*2.0;
            double t18275 = t18274-2.0;
            double t18276 = 1.0/t18275;
            double t18277 = log(t18233);
            v_rho_a_rho_a_[index] = t18207*(t18270+t18264+t18268-t18273*t18276*(t18270+t18264+t18268-t18243*t18255* \
               t18238*t18265*2.0+t18250*t18234*1.0/(t18218*t18218*t18218)*t18229*2.0-t18234*t18229*t18256*(b2f*c* \
               t18219*(4.0/9.0)+b4f*t18220*t18214*(1.0E1/9.0)+b1f*c*t18221*t18219*(2.0/9.0)+b3f*c*t18210*t18219*(2.0/ \
               3.0)-b1f*t18220*t18214*t18227*(1.0/3.6E1)+b3f*t18220*t18221*t18214*(1.0/1.2E1))-t18230*t18250*1.0/ \
               (t18233*t18233)*1.0/(t18218*t18218*t18218*t18218)*t18229*(1.0/2.0)+a1f*c*c0f*t18219*t18277*(8.0/9.0) \
               -a1p*c*c0p*t18219*t18269*(8.0/9.0)-a1f*c*t18234*t18235*t18236*t18256*(2.0/3.0))-t18243*t18255*t18238* \
               t18265*2.0-a1p*c*c0p*t18219*t18269*(8.0/9.0))-t18273*t18276*(t18234*t18236*t18229*t18256-t18243*t18245* \
               t18238*t18257-a1f*c*c0f*t18235*t18277*(2.0/3.0)+a1p*c*c0p*t18235*t18269*(2.0/3.0))*2.0-t18243*t18245* \
               t18238*t18257*2.0+a1p*c*c0p*t18235*t18269*(4.0/3.0);
        } else {
            v_rho_a_rho_a_[index] = 0.0;
        } 

        //V_rho_a_rho_b
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t17788 = rho_a[index]+rho_b[index];
            double t17789 = 1.0/pow(t17788,1.0/3.0);
            double t17790 = c*t17789;
            double t17791 = sqrt(t17790);
            double t17792 = b1p*t17791;
            double t17793 = pow(t17790,3.0/2.0);
            double t17794 = b3p*t17793;
            double t17795 = c*c;
            double t17796 = 1.0/pow(t17788,2.0/3.0);
            double t17797 = b4p*t17795*t17796;
            double t17798 = b2p*c*t17789;
            double t17799 = t17792+t17794+t17797+t17798;
            double t17800 = 1.0/pow(t17788,7.0/3.0);
            double t17801 = 1.0/pow(t17788,8.0/3.0);
            double t17802 = 1.0/sqrt(t17790);
            double t17803 = a1p*c*t17789;
            double t17804 = t17803+1.0;
            double t17805 = 1.0/c0p;
            double t17806 = 1.0/t17799;
            double t17807 = t17805*t17806*(1.0/2.0);
            double t17808 = t17807+1.0;
            double t17809 = 1.0/t17808;
            double t17810 = 1.0/pow(t17788,4.0/3.0);
            double t17853 = 1.0/pow(t17788,5.0/3.0);
            double t17855 = b4p*t17853*t17795*(2.0/3.0);
            double t17856 = b2p*c*t17810*(1.0/3.0);
            double t17857 = b1p*c*t17810*t17802*(1.0/6.0);
            double t17858 = b3p*c*t17810*t17791*(1.0/2.0);
            double t17811 = t17855+t17856+t17857+t17858;
            double t17812 = rho_a[index]-rho_b[index];
            double t17813 = 1.0/t17788;
            double t17814 = t17812*t17813;
            double t17815 = two_13*2.0;
            double t17816 = t17815-2.0;
            double t17817 = 1.0/t17816;
            double t17818 = 1.0/c0f;
            double t17819 = b1f*t17791;
            double t17820 = b3f*t17793;
            double t17821 = b4f*t17795*t17796;
            double t17822 = b2f*c*t17789;
            double t17823 = t17820+t17821+t17822+t17819;
            double t17824 = 1.0/t17823;
            double t17825 = t17824*t17818*(1.0/2.0);
            double t17826 = t17825+1.0;
            double t17827 = log(t17826);
            double t17828 = a1f*c*t17789;
            double t17829 = t17828+1.0;
            double t17830 = log(t17808);
            double t17842 = c0f*t17827*t17829*2.0;
            double t17843 = c0p*t17830*t17804*2.0;
            double t17831 = t17842-t17843;
            double t17832 = t17812*t17812;
            double t17833 = t17814+1.0;
            double t17834 = pow(t17833,4.0/3.0);
            double t17835 = -t17814+1.0;
            double t17836 = pow(t17835,4.0/3.0);
            double t17837 = t17834+t17836-2.0;
            double t17838 = 1.0/(t17788*t17788);
            double t17839 = t17812*t17838;
            double t17840 = t17813+t17839;
            double t17841 = 1.0/(t17788*t17788*t17788*t17788);
            double t17844 = pow(t17833,1.0/3.0);
            double t17845 = t17840*t17844*(4.0/3.0);
            double t17846 = pow(t17835,1.0/3.0);
            double t17880 = t17840*t17846*(4.0/3.0);
            double t17847 = -t17880+t17845;
            double t17848 = t17832*t17832;
            double t17849 = t17813-t17839;
            double t17850 = t17844*t17849*(4.0/3.0);
            double t17884 = t17846*t17849*(4.0/3.0);
            double t17851 = t17850-t17884;
            double t17852 = 1.0/(t17788*t17788*t17788*t17788*t17788);
            double t17854 = 1.0/(t17799*t17799);
            double t17859 = t17811*t17811;
            double t17860 = 1.0/t17826;
            double t17861 = 1.0/(t17823*t17823);
            double t17862 = 1.0/pow(t17790,3.0/2.0);
            double t17863 = b4p*t17801*t17795*(1.0E1/9.0);
            double t17864 = b2p*c*t17800*(4.0/9.0);
            double t17865 = b1p*c*t17800*t17802*(2.0/9.0);
            double t17866 = b3p*c*t17800*t17791*(2.0/3.0);
            double t17867 = b3p*t17801*t17802*t17795*(1.0/1.2E1);
            double t17868 = t17863+t17864+t17865+t17866+t17867-b1p*t17801*t17862*t17795*(1.0/3.6E1);
            double t17869 = t17804*t17809*t17854*t17868;
            double t17870 = b4f*t17853*t17795*(2.0/3.0);
            double t17871 = b2f*c*t17810*(1.0/3.0);
            double t17872 = b1f*c*t17810*t17802*(1.0/6.0);
            double t17873 = b3f*c*t17810*t17791*(1.0/2.0);
            double t17874 = t17870+t17871+t17872+t17873;
            double t17875 = 1.0/(t17799*t17799*t17799);
            double t17876 = t17874*t17874;
            double t17877 = 1.0/(t17808*t17808);
            double t17878 = 1.0/(t17799*t17799*t17799*t17799);
            double t17879 = t17804*t17805*t17859*t17877*t17878*(1.0/2.0);
            double t17881 = t17811*t17804*t17809*t17854;
            double t17882 = a1f*c*c0f*t17810*t17827*(2.0/3.0);
            double t17885 = t17860*t17861*t17829*t17874;
            double t17886 = a1p*c*c0p*t17810*t17830*(2.0/3.0);
            double t17883 = t17881+t17882-t17885-t17886;
            double t17887 = 1.0/(t17788*t17788*t17788);
            double t17888 = a1p*c*t17810*t17811*t17809*t17854*(2.0/3.0);
            double t17889 = 1.0/(t17788*t17788*t17788*t17788*t17788*t17788);
            double t17890 = 1.0/d2fz0;
            double t17891 = 1.0/Aa;
            double t17892 = b1a*t17791;
            double t17893 = b3a*t17793;
            double t17894 = b4a*t17795*t17796;
            double t17895 = b2a*c*t17789;
            double t17896 = t17892+t17893+t17894+t17895;
            double t17897 = 1.0/t17896;
            double t17898 = t17891*t17897*(1.0/2.0);
            double t17899 = t17898+1.0;
            double t17900 = log(t17899);
            double t17901 = a1a*c*t17789;
            double t17902 = t17901+1.0;
            double t17903 = t17852*t17848*4.0;
            double t17904 = t17812*t17846*t17887*(8.0/3.0);
            double t17905 = 1.0/pow(t17833,2.0/3.0);
            double t17906 = t17840*t17905*t17849*(4.0/9.0);
            double t17907 = 1.0/pow(t17835,2.0/3.0);
            double t17908 = t17840*t17907*t17849*(4.0/9.0);
            double t17909 = t17904+t17906+t17908-t17812*t17844*t17887*(8.0/3.0);
            double t17910 = t17812*t17832*t17841*4.0;
            double t17911 = 1.0/t17899;
            double t17912 = t17910+t17903;
            double t17913 = 1.0/(t17896*t17896);
            double t17914 = b4a*t17853*t17795*(2.0/3.0);
            double t17915 = b2a*c*t17810*(1.0/3.0);
            double t17916 = b1a*c*t17810*t17802*(1.0/6.0);
            double t17917 = b3a*c*t17810*t17791*(1.0/2.0);
            double t17918 = t17914+t17915+t17916+t17917;
            double t17919 = t17841*t17848;
            double t17920 = t17919-1.0;
            double t17921 = t17918*t17918;
            double t17922 = t17910-t17903;
            v_rho_a_rho_b_[index] = t17788*(t17869+t17879+t17888-t17804*t17809*t17875*t17859*2.0+t17841*t17851* \
               t17817*t17848*(t17881+t17882-t17885-t17886)-a1p*c*c0p*t17800*t17830*(8.0/9.0)-t17841*t17817*t17837* \
               t17848*(t17869+t17879+t17888-t17804*t17809*t17875*t17859*2.0+1.0/(t17823*t17823*t17823)*t17860*t17829* \
               t17876*2.0-t17860*t17861*t17829*(b2f*c*t17800*(4.0/9.0)+b4f*t17801*t17795*(1.0E1/9.0)+b1f*c*t17800* \
               t17802*(2.0/9.0)+b3f*c*t17800*t17791*(2.0/3.0)-b1f*t17801*t17862*t17795*(1.0/3.6E1)+b3f*t17801*t17802* \
               t17795*(1.0/1.2E1))-1.0/(t17823*t17823*t17823*t17823)*1.0/(t17826*t17826)*t17818*t17829*t17876*(1.0/ \
               2.0)+a1f*c*c0f*t17800*t17827*(8.0/9.0)-a1p*c*c0p*t17800*t17830*(8.0/9.0)-a1f*c*t17810*t17860*t17861* \
               t17874*(2.0/3.0))+t17831*t17832*t17841*t17817*t17837*1.2E1+t17831*t17851*t17852*t17817*t17848*4.0+ \
               t17831*t17841*t17817*t17909*t17848-t17831*t17852*t17817*t17847*t17848*4.0-t17841*t17817*t17847*t17883* \
               t17848-t17852*t17817*t17837*t17883*t17848*8.0-t17831*t17817*t17837*t17848*t17889*2.0E1+t17812*t17831* \
               t17832*t17841*t17851*t17817*4.0+t17812*t17831*t17832*t17841*t17817*t17847*4.0+Aa*t17900*t17902*t17912* \
               t17851*t17817*t17890*2.0+Aa*t17900*t17902*t17920*t17817*t17890*t17909*2.0-Aa*t17900*t17902*t17817* \
               t17890*t17847*(t17903-t17812*t17832*t17841*4.0)*2.0+Aa*t17900*t17902*t17817*t17890*t17837*(t17832* \
               t17841*1.2E1-t17848*t17889*2.0E1)*2.0-t17902*t17911*t17920*t17913*t17851*t17817*t17890*t17918+t17902* \
               t17911*t17920*t17913*t17817*t17890*t17918*t17847+t17902*t17911*t17912*t17913*t17817*t17890*t17837* \
               t17918-t17902*t17911*t17913*t17922*t17817*t17890*t17837*t17918-t17902*t17911*t17920*t17921*t17817* \
               t17890*t17837*1.0/(t17896*t17896*t17896)*2.0+t17902*t17911*t17920*t17913*t17817*t17890*t17837*(b2a* \
               c*t17800*(4.0/9.0)+b4a*t17801*t17795*(1.0E1/9.0)+b1a*c*t17800*t17802*(2.0/9.0)+b3a*c*t17800*t17791* \
               (2.0/3.0)-b1a*t17801*t17862*t17795*(1.0/3.6E1)+b3a*t17801*t17802*t17795*(1.0/1.2E1))+Aa*a1a*c*t17810* \
               t17900*t17920*t17851*t17817*t17890*(2.0/3.0)-Aa*a1a*c*t17800*t17900*t17920*t17817*t17890*t17837*(8.0/ \
               9.0)-Aa*a1a*c*t17810*t17900*t17920*t17817*t17890*t17847*(2.0/3.0)-Aa*a1a*c*t17810*t17900*t17912*t17817* \
               t17890*t17837*(2.0/3.0)+Aa*a1a*c*t17810*t17900*t17922*t17817*t17890*t17837*(2.0/3.0)+t17902*t17920* \
               t17921*t17817*t17890*t17837*t17891*1.0/(t17896*t17896*t17896*t17896)*1.0/(t17899*t17899)*(1.0/2.0) \
               +a1a*c*t17810*t17911*t17920*t17913*t17817*t17890*t17837*t17918*(2.0/3.0))-t17811*t17804*t17809*t17854* \
               2.0+t17841*t17817*t17837*t17848*(t17881+t17882-t17885-t17886)*2.0+a1p*c*c0p*t17810*t17830*(4.0/3.0) \
               -t17831*t17841*t17851*t17817*t17848+t17831*t17841*t17817*t17847*t17848+t17831*t17852*t17817*t17837* \
               t17848*8.0-Aa*t17900*t17902*t17920*t17851*t17817*t17890*2.0+Aa*t17900*t17902*t17920*t17817*t17890* \
               t17847*2.0+Aa*t17900*t17902*t17912*t17817*t17890*t17837*2.0-Aa*t17900*t17902*t17922*t17817*t17890* \
               t17837*2.0-t17902*t17911*t17920*t17913*t17817*t17890*t17837*t17918*2.0+Aa*a1a*c*t17810*t17900*t17920* \
               t17817*t17890*t17837*(4.0/3.0);
        } else if (rho_a[index] > cutoff_) {
            double t18644 = rho_a[index]+rho_b[index];
            double t18645 = 1.0/pow(t18644,1.0/3.0);
            double t18646 = c*t18645;
            double t18647 = sqrt(t18646);
            double t18648 = b1f*t18647;
            double t18649 = pow(t18646,3.0/2.0);
            double t18650 = b3f*t18649;
            double t18651 = c*c;
            double t18652 = 1.0/pow(t18644,2.0/3.0);
            double t18653 = b4f*t18651*t18652;
            double t18654 = b2f*c*t18645;
            double t18655 = t18650+t18653+t18654+t18648;
            double t18656 = 1.0/pow(t18644,7.0/3.0);
            double t18657 = 1.0/pow(t18644,8.0/3.0);
            double t18658 = 1.0/sqrt(t18646);
            double t18659 = b1p*t18647;
            double t18660 = b3p*t18649;
            double t18661 = b4p*t18651*t18652;
            double t18662 = b2p*c*t18645;
            double t18663 = t18660+t18661+t18662+t18659;
            double t18664 = 1.0/pow(t18646,3.0/2.0);
            double t18665 = a1f*c*t18645;
            double t18666 = t18665+1.0;
            double t18667 = 1.0/c0f;
            double t18668 = 1.0/t18655;
            double t18669 = t18667*t18668*(1.0/2.0);
            double t18670 = t18669+1.0;
            double t18671 = 1.0/t18670;
            double t18672 = 1.0/pow(t18644,4.0/3.0);
            double t18681 = 1.0/pow(t18644,5.0/3.0);
            double t18683 = b4f*t18651*t18681*(2.0/3.0);
            double t18684 = b2f*c*t18672*(1.0/3.0);
            double t18685 = b1f*c*t18672*t18658*(1.0/6.0);
            double t18686 = b3f*c*t18672*t18647*(1.0/2.0);
            double t18673 = t18683+t18684+t18685+t18686;
            double t18674 = a1p*c*t18645;
            double t18675 = t18674+1.0;
            double t18676 = 1.0/c0p;
            double t18677 = 1.0/t18663;
            double t18678 = t18676*t18677*(1.0/2.0);
            double t18679 = t18678+1.0;
            double t18680 = 1.0/t18679;
            double t18688 = b4p*t18651*t18681*(2.0/3.0);
            double t18689 = b2p*c*t18672*(1.0/3.0);
            double t18690 = b1p*c*t18672*t18658*(1.0/6.0);
            double t18691 = b3p*c*t18672*t18647*(1.0/2.0);
            double t18682 = t18690+t18691+t18688+t18689;
            double t18687 = t18673*t18673;
            double t18692 = t18682*t18682;
            double t18693 = 1.0/(t18655*t18655);
            double t18694 = 1.0/(t18663*t18663);
            double t18695 = b4p*t18651*t18657*(1.0E1/9.0);
            double t18696 = b2p*c*t18656*(4.0/9.0);
            double t18697 = b1p*c*t18656*t18658*(2.0/9.0);
            double t18698 = b3p*c*t18647*t18656*(2.0/3.0);
            double t18699 = b3p*t18651*t18657*t18658*(1.0/1.2E1);
            double t18700 = t18695+t18696+t18697+t18698+t18699-b1p*t18651*t18664*t18657*(1.0/3.6E1);
            double t18701 = t18700*t18680*t18675*t18694;
            double t18702 = 1.0/(t18663*t18663*t18663);
            double t18703 = 1.0/(t18679*t18679);
            double t18704 = 1.0/(t18663*t18663*t18663*t18663);
            double t18705 = t18703*t18704*t18692*t18675*t18676*(1.0/2.0);
            double t18706 = log(t18679);
            double t18707 = a1p*c*t18680*t18672*t18682*t18694*(2.0/3.0);
            double t18708 = pow(2.0,1.0/3.0);
            double t18709 = t18708*2.0;
            double t18710 = t18709-2.0;
            double t18711 = two_13*2.0;
            double t18712 = t18711-2.0;
            double t18713 = 1.0/t18712;
            double t18714 = log(t18670);
            v_rho_a_rho_b_[index] = t18644*(t18701+t18705+t18707-t18710*t18713*(t18701+t18705+t18707-t18702*t18680* \
               t18692*t18675*2.0+t18671*1.0/(t18655*t18655*t18655)*t18666*t18687*2.0-t18671*t18666*t18693*(b2f*c* \
               t18656*(4.0/9.0)+b4f*t18651*t18657*(1.0E1/9.0)+b1f*c*t18656*t18658*(2.0/9.0)+b3f*c*t18647*t18656*(2.0/ \
               3.0)-b1f*t18651*t18664*t18657*(1.0/3.6E1)+b3f*t18651*t18657*t18658*(1.0/1.2E1))-1.0/(t18670*t18670) \
               *1.0/(t18655*t18655*t18655*t18655)*t18666*t18667*t18687*(1.0/2.0)+a1f*c*c0f*t18714*t18656*(8.0/9.0) \
               -a1p*c*c0p*t18706*t18656*(8.0/9.0)-a1f*c*t18671*t18672*t18673*t18693*(2.0/3.0))-t18702*t18680*t18692* \
               t18675*2.0-a1p*c*c0p*t18706*t18656*(8.0/9.0))-t18710*t18713*(t18671*t18673*t18666*t18693-t18680*t18682* \
               t18675*t18694-a1f*c*c0f*t18714*t18672*(2.0/3.0)+a1p*c*c0p*t18706*t18672*(2.0/3.0))*2.0-t18680*t18682* \
               t18675*t18694*2.0+a1p*c*c0p*t18706*t18672*(4.0/3.0);
        } else if (rho_b[index] > cutoff_) {
            double t18279 = rho_a[index]+rho_b[index];
            double t18280 = 1.0/pow(t18279,1.0/3.0);
            double t18281 = c*t18280;
            double t18282 = sqrt(t18281);
            double t18283 = b1f*t18282;
            double t18284 = pow(t18281,3.0/2.0);
            double t18285 = b3f*t18284;
            double t18286 = c*c;
            double t18287 = 1.0/pow(t18279,2.0/3.0);
            double t18288 = b4f*t18286*t18287;
            double t18289 = b2f*c*t18280;
            double t18290 = t18283+t18285+t18288+t18289;
            double t18291 = 1.0/pow(t18279,7.0/3.0);
            double t18292 = 1.0/pow(t18279,8.0/3.0);
            double t18293 = 1.0/sqrt(t18281);
            double t18294 = b1p*t18282;
            double t18295 = b3p*t18284;
            double t18296 = b4p*t18286*t18287;
            double t18297 = b2p*c*t18280;
            double t18298 = t18294+t18295+t18296+t18297;
            double t18299 = 1.0/pow(t18281,3.0/2.0);
            double t18300 = a1f*c*t18280;
            double t18301 = t18300+1.0;
            double t18302 = 1.0/c0f;
            double t18303 = 1.0/t18290;
            double t18304 = t18302*t18303*(1.0/2.0);
            double t18305 = t18304+1.0;
            double t18306 = 1.0/t18305;
            double t18307 = 1.0/pow(t18279,4.0/3.0);
            double t18316 = 1.0/pow(t18279,5.0/3.0);
            double t18318 = b4f*t18316*t18286*(2.0/3.0);
            double t18319 = b2f*c*t18307*(1.0/3.0);
            double t18320 = b1f*c*t18307*t18293*(1.0/6.0);
            double t18321 = b3f*c*t18307*t18282*(1.0/2.0);
            double t18308 = t18320+t18321+t18318+t18319;
            double t18309 = a1p*c*t18280;
            double t18310 = t18309+1.0;
            double t18311 = 1.0/c0p;
            double t18312 = 1.0/t18298;
            double t18313 = t18311*t18312*(1.0/2.0);
            double t18314 = t18313+1.0;
            double t18315 = 1.0/t18314;
            double t18323 = b4p*t18316*t18286*(2.0/3.0);
            double t18324 = b2p*c*t18307*(1.0/3.0);
            double t18325 = b1p*c*t18307*t18293*(1.0/6.0);
            double t18326 = b3p*c*t18307*t18282*(1.0/2.0);
            double t18317 = t18323+t18324+t18325+t18326;
            double t18322 = t18308*t18308;
            double t18327 = t18317*t18317;
            double t18328 = 1.0/(t18290*t18290);
            double t18329 = 1.0/(t18298*t18298);
            double t18330 = b4p*t18292*t18286*(1.0E1/9.0);
            double t18331 = b2p*c*t18291*(4.0/9.0);
            double t18332 = b1p*c*t18291*t18293*(2.0/9.0);
            double t18333 = b3p*c*t18282*t18291*(2.0/3.0);
            double t18334 = b3p*t18292*t18293*t18286*(1.0/1.2E1);
            double t18335 = t18330+t18331+t18332+t18333+t18334-b1p*t18292*t18286*t18299*(1.0/3.6E1);
            double t18336 = t18310*t18315*t18335*t18329;
            double t18337 = 1.0/(t18298*t18298*t18298);
            double t18338 = 1.0/(t18314*t18314);
            double t18339 = 1.0/(t18298*t18298*t18298*t18298);
            double t18340 = t18310*t18311*t18327*t18338*t18339*(1.0/2.0);
            double t18341 = log(t18314);
            double t18342 = a1p*c*t18315*t18307*t18317*t18329*(2.0/3.0);
            double t18343 = pow(2.0,1.0/3.0);
            double t18344 = t18343*2.0;
            double t18345 = t18344-2.0;
            double t18346 = two_13*2.0;
            double t18347 = t18346-2.0;
            double t18348 = 1.0/t18347;
            double t18349 = log(t18305);
            v_rho_a_rho_b_[index] = t18279*(t18340+t18342+t18336-t18345*t18348*(t18340+t18342+t18336-t18310*t18315* \
               t18327*t18337*2.0+t18301*t18322*t18306*1.0/(t18290*t18290*t18290)*2.0-t18301*t18306*t18328*(b2f*c* \
               t18291*(4.0/9.0)+b4f*t18292*t18286*(1.0E1/9.0)+b1f*c*t18291*t18293*(2.0/9.0)+b3f*c*t18282*t18291*(2.0/ \
               3.0)-b1f*t18292*t18286*t18299*(1.0/3.6E1)+b3f*t18292*t18293*t18286*(1.0/1.2E1))-t18301*t18302*t18322* \
               1.0/(t18305*t18305)*1.0/(t18290*t18290*t18290*t18290)*(1.0/2.0)+a1f*c*c0f*t18291*t18349*(8.0/9.0)- \
               a1p*c*c0p*t18341*t18291*(8.0/9.0)-a1f*c*t18306*t18307*t18308*t18328*(2.0/3.0))-t18310*t18315*t18327* \
               t18337*2.0-a1p*c*c0p*t18341*t18291*(8.0/9.0))-t18345*t18348*(t18301*t18306*t18308*t18328-t18310*t18315* \
               t18317*t18329-a1f*c*c0f*t18307*t18349*(2.0/3.0)+a1p*c*c0p*t18341*t18307*(2.0/3.0))*2.0-t18310*t18315* \
               t18317*t18329*2.0+a1p*c*c0p*t18341*t18307*(4.0/3.0);
        } else {
            v_rho_a_rho_b_[index] = 0.0;
        } 

        //V_rho_b_rho_b
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t17924 = rho_a[index]+rho_b[index];
            double t17925 = 1.0/pow(t17924,1.0/3.0);
            double t17926 = c*t17925;
            double t17927 = sqrt(t17926);
            double t17928 = b1p*t17927;
            double t17929 = pow(t17926,3.0/2.0);
            double t17930 = b3p*t17929;
            double t17931 = c*c;
            double t17932 = 1.0/pow(t17924,2.0/3.0);
            double t17933 = b4p*t17931*t17932;
            double t17934 = b2p*c*t17925;
            double t17935 = t17930+t17933+t17934+t17928;
            double t17936 = 1.0/pow(t17924,7.0/3.0);
            double t17937 = 1.0/pow(t17924,8.0/3.0);
            double t17938 = 1.0/sqrt(t17926);
            double t17939 = a1p*c*t17925;
            double t17940 = t17939+1.0;
            double t17941 = 1.0/c0p;
            double t17942 = 1.0/t17935;
            double t17943 = t17941*t17942*(1.0/2.0);
            double t17944 = t17943+1.0;
            double t17945 = 1.0/t17944;
            double t17946 = 1.0/pow(t17924,4.0/3.0);
            double t17986 = 1.0/pow(t17924,5.0/3.0);
            double t17988 = b4p*t17931*t17986*(2.0/3.0);
            double t17989 = b2p*c*t17946*(1.0/3.0);
            double t17990 = b1p*c*t17946*t17938*(1.0/6.0);
            double t17991 = b3p*c*t17927*t17946*(1.0/2.0);
            double t17947 = t17990+t17991+t17988+t17989;
            double t17948 = rho_a[index]-rho_b[index];
            double t17949 = 1.0/t17924;
            double t17950 = t17948*t17949;
            double t17951 = two_13*2.0;
            double t17952 = t17951-2.0;
            double t17953 = 1.0/t17952;
            double t17954 = 1.0/c0f;
            double t17955 = b1f*t17927;
            double t17956 = b3f*t17929;
            double t17957 = b4f*t17931*t17932;
            double t17958 = b2f*c*t17925;
            double t17959 = t17955+t17956+t17957+t17958;
            double t17960 = 1.0/t17959;
            double t17961 = t17960*t17954*(1.0/2.0);
            double t17962 = t17961+1.0;
            double t17963 = log(t17962);
            double t17964 = a1f*c*t17925;
            double t17965 = t17964+1.0;
            double t17966 = log(t17944);
            double t17974 = c0f*t17963*t17965*2.0;
            double t17975 = c0p*t17940*t17966*2.0;
            double t17967 = t17974-t17975;
            double t17968 = t17948*t17948;
            double t17969 = t17950+1.0;
            double t17970 = pow(t17969,4.0/3.0);
            double t17971 = -t17950+1.0;
            double t17972 = pow(t17971,4.0/3.0);
            double t17973 = t17970+t17972-2.0;
            double t17976 = 1.0/(t17924*t17924);
            double t17977 = t17948*t17976;
            double t17978 = t17949+t17977;
            double t17979 = 1.0/(t17924*t17924*t17924*t17924);
            double t17980 = pow(t17969,1.0/3.0);
            double t17981 = t17980*t17978*(4.0/3.0);
            double t17982 = pow(t17971,1.0/3.0);
            double t18014 = t17982*t17978*(4.0/3.0);
            double t17983 = t17981-t18014;
            double t17984 = 1.0/(t17924*t17924*t17924*t17924*t17924);
            double t17985 = t17968*t17968;
            double t17987 = 1.0/(t17935*t17935);
            double t17992 = 1.0/t17962;
            double t17993 = 1.0/(t17959*t17959);
            double t17994 = b4f*t17931*t17986*(2.0/3.0);
            double t17995 = b2f*c*t17946*(1.0/3.0);
            double t17996 = b1f*c*t17946*t17938*(1.0/6.0);
            double t17997 = b3f*c*t17927*t17946*(1.0/2.0);
            double t17998 = t17994+t17995+t17996+t17997;
            double t17999 = t17940*t17945*t17947*t17987;
            double t18000 = a1f*c*c0f*t17963*t17946*(2.0/3.0);
            double t18001 = t17947*t17947;
            double t18002 = 1.0/pow(t17926,3.0/2.0);
            double t18003 = b4p*t17931*t17937*(1.0E1/9.0);
            double t18004 = b2p*c*t17936*(4.0/9.0);
            double t18005 = b1p*c*t17936*t17938*(2.0/9.0);
            double t18006 = b3p*c*t17927*t17936*(2.0/3.0);
            double t18007 = b3p*t17931*t17937*t17938*(1.0/1.2E1);
            double t18008 = t18003+t18004+t18005+t18006+t18007-b1p*t17931*t17937*t18002*(1.0/3.6E1);
            double t18009 = 1.0/(t17935*t17935*t17935);
            double t18010 = t17940*t17945*t18001*t18009*2.0;
            double t18011 = t17998*t17998;
            double t18012 = 1.0/(t17944*t17944);
            double t18013 = 1.0/(t17935*t17935*t17935*t17935);
            double t18015 = t17976*2.0;
            double t18016 = 1.0/(t17924*t17924*t17924);
            double t18017 = t17948*t18016*2.0;
            double t18018 = t18015+t18017;
            double t18019 = t17978*t17978;
            double t18020 = a1p*c*c0p*t17936*t17966*(8.0/9.0);
            double t18021 = 1.0/(t17924*t17924*t17924*t17924*t17924*t17924);
            double t18022 = 1.0/d2fz0;
            double t18023 = 1.0/Aa;
            double t18024 = b1a*t17927;
            double t18025 = b3a*t17929;
            double t18026 = b4a*t17931*t17932;
            double t18027 = b2a*c*t17925;
            double t18028 = t18024+t18025+t18026+t18027;
            double t18029 = 1.0/t18028;
            double t18030 = t18023*t18029*(1.0/2.0);
            double t18031 = t18030+1.0;
            double t18032 = log(t18031);
            double t18033 = a1a*c*t17925;
            double t18034 = t18033+1.0;
            double t18035 = t17980*t18018*(4.0/3.0);
            double t18036 = 1.0/pow(t17969,2.0/3.0);
            double t18037 = t18036*t18019*(4.0/9.0);
            double t18038 = 1.0/pow(t17971,2.0/3.0);
            double t18039 = t18019*t18038*(4.0/9.0);
            double t18040 = t18035+t18037+t18039-t17982*t18018*(4.0/3.0);
            double t18041 = t17948*t17968*t17979*4.0;
            double t18042 = t17984*t17985*4.0;
            double t18043 = t18041+t18042;
            double t18044 = 1.0/t18031;
            double t18045 = t17985*t17979;
            double t18046 = t18045-1.0;
            double t18047 = 1.0/(t18028*t18028);
            double t18048 = b4a*t17931*t17986*(2.0/3.0);
            double t18049 = b2a*c*t17946*(1.0/3.0);
            double t18050 = b1a*c*t17946*t17938*(1.0/6.0);
            double t18051 = b3a*c*t17927*t17946*(1.0/2.0);
            double t18052 = t18050+t18051+t18048+t18049;
            double t18053 = t18052*t18052;
            double t18055 = t17965*t17992*t17993*t17998;
            double t18056 = a1p*c*c0p*t17946*t17966*(2.0/3.0);
            double t18054 = t17999+t18000-t18055-t18056;
            v_rho_b_rho_b_[index] = -t17924*(t18010+t18020-t17940*t17945*t17987*t18008-t17953*t17973*t17985*t17979* \
               (t18010+t18020-t17940*t17945*t17987*t18008-t17965*t17992*1.0/(t17959*t17959*t17959)*t18011*2.0+t17965* \
               t17992*t17993*(b2f*c*t17936*(4.0/9.0)+b4f*t17931*t17937*(1.0E1/9.0)+b1f*c*t17936*t17938*(2.0/9.0)+ \
               b3f*c*t17927*t17936*(2.0/3.0)-b1f*t17931*t17937*t18002*(1.0/3.6E1)+b3f*t17931*t17937*t17938*(1.0/1.2E1) \
               )+1.0/(t17962*t17962)*t17954*t17965*1.0/(t17959*t17959*t17959*t17959)*t18011*(1.0/2.0)-a1f*c*c0f*t17936* \
               t17963*(8.0/9.0)-t17940*t17941*t18001*t18012*t18013*(1.0/2.0)+a1f*c*t17946*t17992*t17993*t17998*(2.0/ \
               3.0)-a1p*c*t17945*t17946*t17947*t17987*(2.0/3.0))+t17953*t17983*t17984*t17967*t17985*8.0+t17953*t17973* \
               t17967*t17968*t17979*1.2E1+t17953*t17973*t17967*t17985*t18021*2.0E1+t17953*t17973*t17984*t17985*t18054* \
               8.0+t17953*t17967*t17985*t17979*t18040+t17953*t17983*t17985*t17979*t18054*2.0-t17940*t17941*t18001* \
               t18012*t18013*(1.0/2.0)+t17953*t17973*t17948*t17984*t17967*t17968*3.2E1+t17953*t17983*t17948*t17967* \
               t17968*t17979*8.0+t17953*t17973*t17948*t17968*t17979*t18054*8.0-a1p*c*t17945*t17946*t17947*t17987* \
               (2.0/3.0)+Aa*t17953*t17983*t18022*t18032*t18034*t18043*4.0+Aa*t17953*t18022*t18040*t18032*t18034*t18046* \
               2.0+Aa*t17953*t17973*t18022*t18032*t18034*(t17968*t17979*1.2E1+t17985*t18021*2.0E1+t17948*t17984*t17968* \
               3.2E1)*2.0-t17953*t17973*t18022*t18034*t18043*t18052*t18044*t18047*2.0-t17953*t17983*t18022*t18034* \
               t18052*t18044*t18046*t18047*2.0+t17953*t17973*t18022*t18034*t18044*t18053*1.0/(t18028*t18028*t18028) \
               *t18046*2.0-t17953*t17973*t18022*t18034*t18044*t18046*t18047*(b2a*c*t17936*(4.0/9.0)+b4a*t17931*t17937* \
               (1.0E1/9.0)+b1a*c*t17936*t17938*(2.0/9.0)+b3a*c*t17927*t17936*(2.0/3.0)-b1a*t17931*t17937*t18002*(1.0/ \
               3.6E1)+b3a*t17931*t17937*t17938*(1.0/1.2E1))+Aa*a1a*c*t17953*t17946*t17973*t18022*t18032*t18043*(4.0/ \
               3.0)+Aa*a1a*c*t17953*t17936*t17973*t18022*t18032*t18046*(8.0/9.0)+Aa*a1a*c*t17953*t17946*t17983*t18022* \
               t18032*t18046*(4.0/3.0)-t17953*t17973*t18022*1.0/(t18031*t18031)*t18023*t18034*t18053*1.0/(t18028* \
               t18028*t18028*t18028)*t18046*(1.0/2.0)-a1a*c*t17953*t17946*t17973*t18022*t18052*t18044*t18046*t18047* \
               (2.0/3.0))-t17940*t17945*t17947*t17987*2.0+t17953*t17973*t17985*t17979*(t17999+t18000-t18055-t18056) \
               *2.0+a1p*c*c0p*t17946*t17966*(4.0/3.0)+t17953*t17973*t17984*t17967*t17985*8.0+t17953*t17983*t17967* \
               t17985*t17979*2.0+t17953*t17973*t17948*t17967*t17968*t17979*8.0+Aa*t17953*t17973*t18022*t18032*t18034* \
               t18043*4.0+Aa*t17953*t17983*t18022*t18032*t18034*t18046*4.0-t17953*t17973*t18022*t18034*t18052*t18044* \
               t18046*t18047*2.0+Aa*a1a*c*t17953*t17946*t17973*t18022*t18032*t18046*(4.0/3.0);
        } else if (rho_a[index] > cutoff_) {
            double t18716 = rho_a[index]+rho_b[index];
            double t18717 = 1.0/pow(t18716,1.0/3.0);
            double t18718 = c*t18717;
            double t18719 = sqrt(t18718);
            double t18720 = b1f*t18719;
            double t18721 = pow(t18718,3.0/2.0);
            double t18722 = b3f*t18721;
            double t18723 = c*c;
            double t18724 = 1.0/pow(t18716,2.0/3.0);
            double t18725 = b4f*t18723*t18724;
            double t18726 = b2f*c*t18717;
            double t18727 = t18720+t18722+t18725+t18726;
            double t18728 = 1.0/pow(t18716,7.0/3.0);
            double t18729 = 1.0/pow(t18716,8.0/3.0);
            double t18730 = 1.0/sqrt(t18718);
            double t18731 = b1p*t18719;
            double t18732 = b3p*t18721;
            double t18733 = b4p*t18723*t18724;
            double t18734 = b2p*c*t18717;
            double t18735 = t18731+t18732+t18733+t18734;
            double t18736 = 1.0/pow(t18718,3.0/2.0);
            double t18737 = a1f*c*t18717;
            double t18738 = t18737+1.0;
            double t18739 = 1.0/c0f;
            double t18740 = 1.0/t18727;
            double t18741 = t18740*t18739*(1.0/2.0);
            double t18742 = t18741+1.0;
            double t18743 = 1.0/t18742;
            double t18744 = 1.0/pow(t18716,4.0/3.0);
            double t18753 = 1.0/pow(t18716,5.0/3.0);
            double t18755 = b4f*t18723*t18753*(2.0/3.0);
            double t18756 = b2f*c*t18744*(1.0/3.0);
            double t18757 = b1f*c*t18730*t18744*(1.0/6.0);
            double t18758 = b3f*c*t18744*t18719*(1.0/2.0);
            double t18745 = t18755+t18756+t18757+t18758;
            double t18746 = a1p*c*t18717;
            double t18747 = t18746+1.0;
            double t18748 = 1.0/c0p;
            double t18749 = 1.0/t18735;
            double t18750 = t18748*t18749*(1.0/2.0);
            double t18751 = t18750+1.0;
            double t18752 = 1.0/t18751;
            double t18760 = b4p*t18723*t18753*(2.0/3.0);
            double t18761 = b2p*c*t18744*(1.0/3.0);
            double t18762 = b1p*c*t18730*t18744*(1.0/6.0);
            double t18763 = b3p*c*t18744*t18719*(1.0/2.0);
            double t18754 = t18760+t18761+t18762+t18763;
            double t18759 = t18745*t18745;
            double t18764 = t18754*t18754;
            double t18765 = 1.0/(t18727*t18727);
            double t18766 = 1.0/(t18735*t18735);
            double t18767 = b4p*t18723*t18729*(1.0E1/9.0);
            double t18768 = b2p*c*t18728*(4.0/9.0);
            double t18769 = b1p*c*t18730*t18728*(2.0/9.0);
            double t18770 = b3p*c*t18719*t18728*(2.0/3.0);
            double t18771 = b3p*t18730*t18723*t18729*(1.0/1.2E1);
            double t18772 = t18770+t18771+t18767+t18768+t18769-b1p*t18723*t18736*t18729*(1.0/3.6E1);
            double t18773 = t18752*t18772*t18747*t18766;
            double t18774 = 1.0/(t18735*t18735*t18735);
            double t18775 = 1.0/(t18751*t18751);
            double t18776 = 1.0/(t18735*t18735*t18735*t18735);
            double t18777 = t18764*t18747*t18748*t18775*t18776*(1.0/2.0);
            double t18778 = log(t18751);
            double t18779 = a1p*c*t18752*t18744*t18754*t18766*(2.0/3.0);
            double t18780 = pow(2.0,1.0/3.0);
            double t18781 = t18780*2.0;
            double t18782 = t18781-2.0;
            double t18783 = two_13*2.0;
            double t18784 = t18783-2.0;
            double t18785 = 1.0/t18784;
            double t18786 = log(t18742);
            v_rho_b_rho_b_[index] = t18716*(t18773+t18777+t18779-t18782*t18785*(t18773+t18777+t18779-t18752*t18764* \
               t18747*t18774*2.0+t18743*1.0/(t18727*t18727*t18727)*t18738*t18759*2.0-t18743*t18738*t18765*(b2f*c* \
               t18728*(4.0/9.0)+b4f*t18723*t18729*(1.0E1/9.0)+b1f*c*t18730*t18728*(2.0/9.0)+b3f*c*t18719*t18728*(2.0/ \
               3.0)-b1f*t18723*t18736*t18729*(1.0/3.6E1)+b3f*t18730*t18723*t18729*(1.0/1.2E1))-1.0/(t18742*t18742) \
               *1.0/(t18727*t18727*t18727*t18727)*t18738*t18739*t18759*(1.0/2.0)+a1f*c*c0f*t18728*t18786*(8.0/9.0) \
               -a1p*c*c0p*t18728*t18778*(8.0/9.0)-a1f*c*t18743*t18744*t18745*t18765*(2.0/3.0))-t18752*t18764*t18747* \
               t18774*2.0-a1p*c*c0p*t18728*t18778*(8.0/9.0))-t18782*t18785*(t18743*t18745*t18738*t18765-t18752*t18754* \
               t18747*t18766-a1f*c*c0f*t18744*t18786*(2.0/3.0)+a1p*c*c0p*t18744*t18778*(2.0/3.0))*2.0-t18752*t18754* \
               t18747*t18766*2.0+a1p*c*c0p*t18744*t18778*(4.0/3.0);
        } else if (rho_b[index] > cutoff_) {
            double t18351 = rho_a[index]+rho_b[index];
            double t18352 = 1.0/pow(t18351,1.0/3.0);
            double t18353 = c*t18352;
            double t18354 = sqrt(t18353);
            double t18355 = b1f*t18354;
            double t18356 = pow(t18353,3.0/2.0);
            double t18357 = b3f*t18356;
            double t18358 = c*c;
            double t18359 = 1.0/pow(t18351,2.0/3.0);
            double t18360 = b4f*t18358*t18359;
            double t18361 = b2f*c*t18352;
            double t18362 = t18360+t18361+t18355+t18357;
            double t18363 = 1.0/pow(t18351,7.0/3.0);
            double t18364 = 1.0/pow(t18351,8.0/3.0);
            double t18365 = 1.0/sqrt(t18353);
            double t18366 = b1p*t18354;
            double t18367 = b3p*t18356;
            double t18368 = b4p*t18358*t18359;
            double t18369 = b2p*c*t18352;
            double t18370 = t18366+t18367+t18368+t18369;
            double t18371 = 1.0/pow(t18353,3.0/2.0);
            double t18372 = a1f*c*t18352;
            double t18373 = t18372+1.0;
            double t18374 = 1.0/c0f;
            double t18375 = 1.0/t18362;
            double t18376 = t18374*t18375*(1.0/2.0);
            double t18377 = t18376+1.0;
            double t18378 = 1.0/t18377;
            double t18379 = 1.0/pow(t18351,4.0/3.0);
            double t18388 = 1.0/pow(t18351,5.0/3.0);
            double t18390 = b4f*t18358*t18388*(2.0/3.0);
            double t18391 = b2f*c*t18379*(1.0/3.0);
            double t18392 = b1f*c*t18365*t18379*(1.0/6.0);
            double t18393 = b3f*c*t18354*t18379*(1.0/2.0);
            double t18380 = t18390+t18391+t18392+t18393;
            double t18381 = a1p*c*t18352;
            double t18382 = t18381+1.0;
            double t18383 = 1.0/c0p;
            double t18384 = 1.0/t18370;
            double t18385 = t18383*t18384*(1.0/2.0);
            double t18386 = t18385+1.0;
            double t18387 = 1.0/t18386;
            double t18395 = b4p*t18358*t18388*(2.0/3.0);
            double t18396 = b2p*c*t18379*(1.0/3.0);
            double t18397 = b1p*c*t18365*t18379*(1.0/6.0);
            double t18398 = b3p*c*t18354*t18379*(1.0/2.0);
            double t18389 = t18395+t18396+t18397+t18398;
            double t18394 = t18380*t18380;
            double t18399 = t18389*t18389;
            double t18400 = 1.0/(t18362*t18362);
            double t18401 = 1.0/(t18370*t18370);
            double t18402 = b4p*t18364*t18358*(1.0E1/9.0);
            double t18403 = b2p*c*t18363*(4.0/9.0);
            double t18404 = b1p*c*t18363*t18365*(2.0/9.0);
            double t18405 = b3p*c*t18354*t18363*(2.0/3.0);
            double t18406 = b3p*t18364*t18365*t18358*(1.0/1.2E1);
            double t18407 = t18402+t18403+t18404+t18405+t18406-b1p*t18371*t18364*t18358*(1.0/3.6E1);
            double t18408 = t18401*t18407*t18382*t18387;
            double t18409 = 1.0/(t18370*t18370*t18370);
            double t18410 = 1.0/(t18386*t18386);
            double t18411 = 1.0/(t18370*t18370*t18370*t18370);
            double t18412 = t18410*t18411*t18382*t18383*t18399*(1.0/2.0);
            double t18413 = log(t18386);
            double t18414 = a1p*c*t18401*t18387*t18379*t18389*(2.0/3.0);
            double t18415 = pow(2.0,1.0/3.0);
            double t18416 = t18415*2.0;
            double t18417 = t18416-2.0;
            double t18418 = two_13*2.0;
            double t18419 = t18418-2.0;
            double t18420 = 1.0/t18419;
            double t18421 = log(t18377);
            v_rho_b_rho_b_[index] = t18351*(t18412+t18414+t18408-t18420*t18417*(t18412+t18414+t18408-t18382*t18409* \
               t18387*t18399*2.0+1.0/(t18362*t18362*t18362)*t18373*t18394*t18378*2.0-t18400*t18373*t18378*(b2f*c* \
               t18363*(4.0/9.0)+b4f*t18364*t18358*(1.0E1/9.0)+b1f*c*t18363*t18365*(2.0/9.0)+b3f*c*t18354*t18363*(2.0/ \
               3.0)-b1f*t18371*t18364*t18358*(1.0/3.6E1)+b3f*t18364*t18365*t18358*(1.0/1.2E1))-1.0/(t18362*t18362* \
               t18362*t18362)*t18373*t18374*t18394*1.0/(t18377*t18377)*(1.0/2.0)+a1f*c*c0f*t18421*t18363*(8.0/9.0) \
               -a1p*c*c0p*t18413*t18363*(8.0/9.0)-a1f*c*t18400*t18380*t18378*t18379*(2.0/3.0))-t18382*t18409*t18387* \
               t18399*2.0-a1p*c*c0p*t18413*t18363*(8.0/9.0))-t18420*t18417*(t18400*t18380*t18373*t18378-t18401*t18382* \
               t18387*t18389-a1f*c*c0f*t18421*t18379*(2.0/3.0)+a1p*c*c0p*t18413*t18379*(2.0/3.0))*2.0-t18401*t18382* \
               t18387*t18389*2.0+a1p*c*c0p*t18413*t18379*(4.0/3.0);
        } else {
            v_rho_b_rho_b_[index] = 0.0;
        } 

        if (is_gga_) {

            //V_rho_a_gamma_aa
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_a_gamma_aa_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_a_gamma_aa_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_a_gamma_aa_[index] = 0.0;
            } else {
                v_rho_a_gamma_aa_[index] = 0.0;
            } 

            //V_rho_a_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_a_gamma_ab_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_a_gamma_ab_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_a_gamma_ab_[index] = 0.0;
            } else {
                v_rho_a_gamma_ab_[index] = 0.0;
            } 

            //V_rho_a_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_a_gamma_bb_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_a_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_a_gamma_bb_[index] = 0.0;
            } else {
                v_rho_a_gamma_bb_[index] = 0.0;
            } 

            //V_rho_b_gamma_aa
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_b_gamma_aa_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_b_gamma_aa_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_b_gamma_aa_[index] = 0.0;
            } else {
                v_rho_b_gamma_aa_[index] = 0.0;
            } 

            //V_rho_b_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_b_gamma_ab_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_b_gamma_ab_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_b_gamma_ab_[index] = 0.0;
            } else {
                v_rho_b_gamma_ab_[index] = 0.0;
            } 

            //V_rho_b_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_b_gamma_bb_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_b_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_b_gamma_bb_[index] = 0.0;
            } else {
                v_rho_b_gamma_bb_[index] = 0.0;
            } 

            //V_gamma_aa_gamma_aa
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_aa_gamma_aa_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_aa_gamma_aa_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_aa_gamma_aa_[index] = 0.0;
            } else {
                v_gamma_aa_gamma_aa_[index] = 0.0;
            } 

            //V_gamma_aa_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_aa_gamma_ab_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_aa_gamma_ab_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_aa_gamma_ab_[index] = 0.0;
            } else {
                v_gamma_aa_gamma_ab_[index] = 0.0;
            } 

            //V_gamma_aa_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_aa_gamma_bb_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_aa_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_aa_gamma_bb_[index] = 0.0;
            } else {
                v_gamma_aa_gamma_bb_[index] = 0.0;
            } 

            //V_gamma_ab_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_ab_gamma_ab_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_ab_gamma_ab_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_ab_gamma_ab_[index] = 0.0;
            } else {
                v_gamma_ab_gamma_ab_[index] = 0.0;
            } 

            //V_gamma_ab_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_ab_gamma_bb_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_ab_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_ab_gamma_bb_[index] = 0.0;
            } else {
                v_gamma_ab_gamma_bb_[index] = 0.0;
            } 

            //V_gamma_bb_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_bb_gamma_bb_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_bb_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_bb_gamma_bb_[index] = 0.0;
            } else {
                v_gamma_bb_gamma_bb_[index] = 0.0;
            } 

        }                       
        if (is_meta_) {

            //V_rho_a_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_a_tau_a_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_a_tau_a_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_a_tau_a_[index] = 0.0;
            } else {
                v_rho_a_tau_a_[index] = 0.0;
            } 

            //V_rho_a_tau_b
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_a_tau_b_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_a_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_a_tau_b_[index] = 0.0;
            } else {
                v_rho_a_tau_b_[index] = 0.0;
            } 

            //V_rho_b_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_b_tau_a_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_b_tau_a_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_b_tau_a_[index] = 0.0;
            } else {
                v_rho_b_tau_a_[index] = 0.0;
            } 

            //V_rho_b_tau_b
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_b_tau_b_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_b_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_b_tau_b_[index] = 0.0;
            } else {
                v_rho_b_tau_b_[index] = 0.0;
            } 

            //V_tau_a_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_tau_a_tau_a_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_tau_a_tau_a_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_tau_a_tau_a_[index] = 0.0;
            } else {
                v_tau_a_tau_a_[index] = 0.0;
            } 

            //V_tau_a_tau_b
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_tau_a_tau_b_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_tau_a_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_tau_a_tau_b_[index] = 0.0;
            } else {
                v_tau_a_tau_b_[index] = 0.0;
            } 

            //V_tau_b_tau_b
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_tau_b_tau_b_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_tau_b_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_tau_b_tau_b_[index] = 0.0;
            } else {
                v_tau_b_tau_b_[index] = 0.0;
            } 

            if (is_gga_) {
            	
                //V_gamma_aa_tau_a
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } else {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } 
            	
                //V_gamma_aa_tau_b
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_aa_tau_b_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_aa_tau_b_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_aa_tau_b_[index] = 0.0;
                } else {
                    v_gamma_aa_tau_b_[index] = 0.0;
                } 
            	
                //V_gamma_ab_tau_a
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_ab_tau_a_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_ab_tau_a_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_ab_tau_a_[index] = 0.0;
                } else {
                    v_gamma_ab_tau_a_[index] = 0.0;
                } 
            	
                //V_gamma_ab_tau_b
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_ab_tau_b_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_ab_tau_b_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_ab_tau_b_[index] = 0.0;
                } else {
                    v_gamma_ab_tau_b_[index] = 0.0;
                } 
            	
                //V_gamma_bb_tau_a
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_bb_tau_a_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_bb_tau_a_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_bb_tau_a_[index] = 0.0;
                } else {
                    v_gamma_bb_tau_a_[index] = 0.0;
                } 
            	
                //V_gamma_bb_tau_b
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_bb_tau_b_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_bb_tau_b_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_bb_tau_b_[index] = 0.0;
                } else {
                    v_gamma_bb_tau_b_[index] = 0.0;
                } 
          
            }  
        }
    }
}

}}

