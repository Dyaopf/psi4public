/**********************************************************
* PW92_C_functional.cc: definitions for PW92_C_functional for KS-DFT
* Robert Parrish, robparrish@gmail.com
* Autogenerated by MATLAB Script on 27-Oct-2010
*
***********************************************************/
#include <libmints/properties.h>
#include <libciomr/libciomr.h>
#include "PW92_C_functional.h"
#include <stdlib.h>
#include <cmath>
#include <string>
#include <string>
#include <vector>

using namespace psi;
using namespace boost;
using namespace std;

namespace psi { namespace functional {

PW92_C_Functional::PW92_C_Functional(int npoints, int deriv) : Functional(npoints, deriv)
{
    
    name_ = "PW92_C";
    description_ = "PW92 LSDA Correlation";
    citation_ = "J.P. Perdew and Y. Wang, Phys. Rev. B., 45(23), 13244, 1992";
    
    double c = 6.2035049089939986E-01;
    params_.push_back(make_pair("c",c));
    double two_13 = 1.2599210498948732E+00;
    params_.push_back(make_pair("two_13",two_13));
    double d2fz0 = 1.7099210000000000E+00;
    params_.push_back(make_pair("d2fz0",d2fz0));
    double Aa = 1.6886999999999999E-02;
    params_.push_back(make_pair("Aa",Aa));
    double a1a = 1.1125000000000000E-01;
    params_.push_back(make_pair("a1a",a1a));
    double b1a = 1.0356999999999999E+01;
    params_.push_back(make_pair("b1a",b1a));
    double b2a = 3.6231000000000000E+00;
    params_.push_back(make_pair("b2a",b2a));
    double b3a = 8.8026000000000004E-01;
    params_.push_back(make_pair("b3a",b3a));
    double b4a = 4.9670999999999998E-01;
    params_.push_back(make_pair("b4a",b4a));
    double c0p = 3.1091000000000001E-02;
    params_.push_back(make_pair("c0p",c0p));
    double a1p = 2.1370000000000000E-01;
    params_.push_back(make_pair("a1p",a1p));
    double b1p = 7.5956999999999999E+00;
    params_.push_back(make_pair("b1p",b1p));
    double b2p = 3.5876000000000001E+00;
    params_.push_back(make_pair("b2p",b2p));
    double b3p = 1.6382000000000001E+00;
    params_.push_back(make_pair("b3p",b3p));
    double b4p = 4.9293999999999999E-01;
    params_.push_back(make_pair("b4p",b4p));
    double c0f = 1.5545000000000000E-02;
    params_.push_back(make_pair("c0f",c0f));
    double a1f = 2.0548000000000000E-01;
    params_.push_back(make_pair("a1f",a1f));
    double b1f = 1.4118900000000000E+01;
    params_.push_back(make_pair("b1f",b1f));
    double b2f = 6.1977000000000002E+00;
    params_.push_back(make_pair("b2f",b2f));
    double b3f = 3.3662000000000001E+00;
    params_.push_back(make_pair("b3f",b3f));
    double b4f = 6.2517000000000000E-01;
    params_.push_back(make_pair("b4f",b4f));

    is_gga_ = false;
    is_meta_ = false;

    //Required allocateion
    allocate();
}
PW92_C_Functional::~PW92_C_Functional()
{
}
void PW92_C_Functional::computeRKSFunctional(shared_ptr<Properties> prop)
{
    int ntrue = prop->getTrueSize();

    double* rho_a;
    double* gamma_aa;
    double* tau_a;

    rho_a = prop->getRhoA();
    if (is_gga_) {
        gamma_aa = prop->getGammaAA();
    }
    if (is_meta_) {
        tau_a = prop->getTauA();
    }

    double c = params_[0].second;
    double two_13 = params_[1].second;
    double d2fz0 = params_[2].second;
    double Aa = params_[3].second;
    double a1a = params_[4].second;
    double b1a = params_[5].second;
    double b2a = params_[6].second;
    double b3a = params_[7].second;
    double b4a = params_[8].second;
    double c0p = params_[9].second;
    double a1p = params_[10].second;
    double b1p = params_[11].second;
    double b2p = params_[12].second;
    double b3p = params_[13].second;
    double b4p = params_[14].second;
    double c0f = params_[15].second;
    double a1f = params_[16].second;
    double b1f = params_[17].second;
    double b2f = params_[18].second;
    double b3f = params_[19].second;
    double b4f = params_[20].second;

    //Functional
    for (int index = 0; index < ntrue; index++) {

        //Functional Value
        if (rho_a[index] > cutoff_) {
            double t18592 = rho_a[index]*2.0;
            double t18593 = 1/pow(t18592,1.0/3.0);
            double t18594 = c*t18593;
            functional_[index] = c0p*rho_a[index]*log((1.0/2.0)/(c0p*(b1p*sqrt(t18594)+b3p*pow(t18594,3.0/2.0) \
               +b4p*(c*c)*1/pow(t18592,2.0/3.0)+b2p*c*t18593))+1.0)*(a1p*c*t18593+1.0)*-4.0;
        } else {
            functional_[index] = 0.0;
        } 

    }
    //First Partials
    for (int index = 0; index < ntrue && deriv_ >= 1; index++) {
        
        //V_rho_a
        if (rho_a[index] > cutoff_) {
            double t18596 = rho_a[index]*2.0;
            double t18597 = 1/pow(t18596,1.0/3.0);
            double t18598 = c*t18597;
            double t18599 = sqrt(t18598);
            double t18600 = b1p*t18599;
            double t18601 = pow(t18598,3.0/2.0);
            double t18602 = b3p*t18601;
            double t18603 = b2p*c*t18597;
            double t18604 = c*c;
            double t18605 = 1/pow(t18596,2.0/3.0);
            double t18606 = b4p*t18604*t18605;
            double t18607 = t18600+t18602+t18603+t18606;
            double t18608 = 1/pow(t18596,4.0/3.0);
            double t18609 = 1/c0p;
            double t18610 = 1/t18607;
            double t18611 = t18610*t18609*(1.0/2.0);
            double t18612 = t18611+1.0;
            double t18613 = log(t18612);
            double t18614 = a1p*c*t18597;
            double t18615 = t18614+1.0;
            v_rho_a_[index] = rho_a[index]*((t18615*1/(t18607*t18607)*(b4p*t18604*1/pow(t18596,5.0/3.0)*(2.0/ \
               3.0)+b2p*c*t18608*(1.0/3.0)+b3p*c*t18608*t18599*(1.0/2.0)+b1p*c*t18608*1/sqrt(t18598)*(1.0/6.0)))/ \
               t18612-a1p*c*c0p*t18613*t18608*(2.0/3.0))*-2.0-c0p*t18613*t18615*2.0;
        } else {
            v_rho_a_[index] = 0.0;
        } 
        
        if (is_gga_) {
            
            if (rho_a[index] > cutoff_) {
                v_gamma_aa_[index] = 0.0;
            } else {
                v_gamma_aa_[index] = 0.0;
            } 
        
        }
        if (is_meta_) {
        
            //V_tau_a
            if (rho_a[index] > cutoff_) {
                v_tau_a_[index] = 0.0;
            } else {
                v_tau_a_[index] = 0.0;
            } 
        
        }
    }
    //Second Partials
    for (int index = 0; index < ntrue && deriv_ >= 2; index++) {
        
        //V_rho_a_rho_a
        if (rho_a[index] > cutoff_) {
            double t18619 = rho_a[index]*2.0;
            double t18620 = 1/pow(t18619,1.0/3.0);
            double t18621 = c*t18620;
            double t18622 = sqrt(t18621);
            double t18623 = b1p*t18622;
            double t18624 = pow(t18621,3.0/2.0);
            double t18625 = b3p*t18624;
            double t18626 = b2p*c*t18620;
            double t18627 = c*c;
            double t18628 = 1/pow(t18619,2.0/3.0);
            double t18629 = b4p*t18627*t18628;
            double t18630 = t18623+t18625+t18626+t18629;
            double t18631 = 1/pow(t18619,8.0/3.0);
            double t18632 = 1/pow(t18619,7.0/3.0);
            double t18633 = 1/sqrt(t18621);
            double t18634 = 1/c0p;
            double t18635 = 1/t18630;
            double t18636 = t18634*t18635*(1.0/2.0);
            double t18637 = t18636+1.0;
            double t18638 = 1/t18637;
            double t18639 = a1p*c*t18620;
            double t18640 = t18639+1.0;
            double t18641 = 1/pow(t18619,4.0/3.0);
            double t18643 = b2p*c*t18641*(1.0/3.0);
            double t18644 = 1/pow(t18619,5.0/3.0);
            double t18645 = b4p*t18644*t18627*(2.0/3.0);
            double t18646 = b1p*c*t18641*t18633*(1.0/6.0);
            double t18647 = b3p*c*t18622*t18641*(1.0/2.0);
            double t18642 = t18643+t18645+t18646+t18647;
            double t18648 = t18642*t18642;
            double t18649 = 1/(t18630*t18630);
            double t18650 = b2p*c*t18632*(4.0/9.0);
            double t18651 = b4p*t18631*t18627*(1.0E1/9.0);
            double t18652 = 1/pow(t18621,3.0/2.0);
            double t18653 = b3p*t18631*t18633*t18627*(1.0/1.2E1);
            double t18654 = b1p*c*t18632*t18633*(2.0/9.0);
            double t18655 = b3p*c*t18622*t18632*(2.0/3.0);
            double t18656 = t18650+t18651+t18653+t18654+t18655-b1p*t18631*t18652*t18627*(1.0/3.6E1);
            double t18657 = t18640*t18638*t18656*t18649;
            double t18658 = 1/(t18630*t18630*t18630);
            double t18659 = log(t18637);
            double t18660 = 1/(t18637*t18637);
            double t18661 = 1/(t18630*t18630*t18630*t18630);
            double t18662 = t18640*t18660*t18634*t18661*t18648*(1.0/2.0);
            double t18663 = 1/d2fz0;
            double t18664 = 1/(rho_a[index]*rho_a[index]);
            double t18665 = 1/Aa;
            double t18666 = b1a*t18622;
            double t18667 = b3a*t18624;
            double t18668 = b2a*c*t18620;
            double t18669 = b4a*t18627*t18628;
            double t18670 = t18666+t18667+t18668+t18669;
            double t18671 = 1/t18670;
            double t18672 = t18671*t18665*(1.0/2.0);
            double t18673 = t18672+1.0;
            double t18674 = log(t18673);
            double t18675 = two_13*2.0;
            double t18676 = t18675-2.0;
            double t18677 = 1/t18676;
            double t18678 = a1a*c*t18620;
            double t18679 = t18678+1.0;
            double t18680 = a1p*c*t18641*t18642*t18638*t18649*(2.0/3.0);
            v_rho_a_rho_a_[index] = rho_a[index]*(t18662+t18680+t18657-t18640*t18638*t18648*t18658*2.0-a1p*c* \
               c0p*t18632*t18659*(8.0/9.0)-Aa*t18663*t18664*t18674*t18677*t18679*(4.0/9.0))*2.0+rho_a[index]*(t18662+ \
               t18680+t18657-t18640*t18638*t18648*t18658*2.0-a1p*c*c0p*t18632*t18659*(8.0/9.0)+Aa*t18663*t18664*t18674* \
               t18677*t18679*(4.0/9.0))*2.0-t18640*t18642*t18638*t18649*4.0+a1p*c*c0p*t18641*t18659*(8.0/3.0);
        } else {
            v_rho_a_rho_a_[index] = 0.0;
        } 
        
        if (is_gga_) {
        
            //V_rho_a_gamma_aa
            if (rho_a[index] > cutoff_) {
                v_rho_a_gamma_aa_[index] = 0.0;
            } else {
                v_rho_a_gamma_aa_[index] = 0.0;
            } 
        
            //V_gamma_aa_gamma_aa
            if (rho_a[index] > cutoff_) {
                v_gamma_aa_gamma_aa_[index] = 0.0;
            } else {
                v_gamma_aa_gamma_aa_[index] = 0.0;
            } 
        
        }
        if (is_meta_) {
        
            //V_rho_a_tau_a
            if (rho_a[index] > cutoff_) {
                v_rho_a_tau_a_[index] = 0.0;
            } else {
                v_rho_a_tau_a_[index] = 0.0;
            } 
        
            //V_tau_a_tau_a
            if (rho_a[index] > cutoff_) {
                v_tau_a_tau_a_[index] = 0.0;
            } else {
                v_tau_a_tau_a_[index] = 0.0;
            } 
       
            if (is_gga_) {
        
                //V_gamma_aa_tau_a
                if (rho_a[index] > cutoff_) {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } else {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } 
       
            }
        }
    }
}
void PW92_C_Functional::computeUKSFunctional(shared_ptr<Properties> prop)
{
    int ntrue = prop->getTrueSize();

    double* rho_a;
    double* rho_b;
    double* gamma_aa;
    double* gamma_ab;
    double* gamma_bb;
    double* tau_a;
    double* tau_b;

    rho_a = prop->getRhoA();
    rho_b = prop->getRhoB();
    if (is_gga_) {
        gamma_aa = prop->getGammaAA();
        gamma_ab = prop->getGammaAB();
        gamma_bb = prop->getGammaBB();
    }
    if (is_meta_) {
        tau_a = prop->getTauA();
        tau_b = prop->getTauB();
    }

    double c = params_[0].second;
    double two_13 = params_[1].second;
    double d2fz0 = params_[2].second;
    double Aa = params_[3].second;
    double a1a = params_[4].second;
    double b1a = params_[5].second;
    double b2a = params_[6].second;
    double b3a = params_[7].second;
    double b4a = params_[8].second;
    double c0p = params_[9].second;
    double a1p = params_[10].second;
    double b1p = params_[11].second;
    double b2p = params_[12].second;
    double b3p = params_[13].second;
    double b4p = params_[14].second;
    double c0f = params_[15].second;
    double a1f = params_[16].second;
    double b1f = params_[17].second;
    double b2f = params_[18].second;
    double b3f = params_[19].second;
    double b4f = params_[20].second;
    
    //Functional
    for (int index = 0; index < ntrue; index++) {

        //Functional Value
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t17190 = rho_a[index]+rho_b[index];
            double t17191 = 1/pow(t17190,1.0/3.0);
            double t17192 = c*t17191;
            double t17193 = sqrt(t17192);
            double t17194 = pow(t17192,3.0/2.0);
            double t17195 = c*c;
            double t17196 = 1/pow(t17190,2.0/3.0);
            double t17197 = 1/c0p;
            double t17198 = b1p*t17193;
            double t17199 = b3p*t17194;
            double t17200 = b4p*t17195*t17196;
            double t17201 = b2p*c*t17191;
            double t17202 = t17200+t17201+t17198+t17199;
            double t17203 = 1/t17202;
            double t17204 = t17203*t17197*(1.0/2.0);
            double t17205 = t17204+1.0;
            double t17206 = log(t17205);
            double t17207 = a1p*c*t17191;
            double t17208 = t17207+1.0;
            double t17209 = c0p*t17206*t17208*2.0;
            double t17210 = rho_a[index]-rho_b[index];
            double t17211 = t17210*t17210;
            double t17212 = 1/t17190;
            double t17213 = t17210*t17212;
            double t17214 = two_13*2.0;
            double t17215 = t17214-2.0;
            double t17216 = 1/t17215;
            double t17217 = 1/(t17190*t17190*t17190*t17190);
            double t17218 = t17211*t17211;
            double t17219 = t17213+1.0;
            double t17220 = pow(t17219,4.0/3.0);
            double t17221 = -t17213+1.0;
            double t17222 = pow(t17221,4.0/3.0);
            double t17223 = t17220+t17222-2.0;
            functional_[index] = -t17190*(t17209-t17223*t17216*t17217*t17218*(t17209-c0f*log((1.0/2.0)/(c0f*(b1f* \
               t17193+b3f*t17194+b2f*c*t17191+b4f*t17195*t17196))+1.0)*(a1f*c*t17191+1.0)*2.0)+(Aa*t17223*t17216* \
               log((1.0/2.0)/(Aa*(b1a*t17193+b3a*t17194+b2a*c*t17191+b4a*t17195*t17196))+1.0)*(t17217*t17218-1.0) \
               *(a1a*c*t17191+1.0)*2.0)/d2fz0);
        } else if (rho_a[index] > cutoff_) {
            double t18191 = rho_a[index]+rho_b[index];
            double t18192 = 1/pow(t18191,1.0/3.0);
            double t18193 = c*t18192;
            double t18194 = sqrt(t18193);
            double t18195 = pow(t18193,3.0/2.0);
            double t18196 = c*c;
            double t18197 = 1/pow(t18191,2.0/3.0);
            double t18198 = 1/c0p;
            double t18199 = b1p*t18194;
            double t18200 = b3p*t18195;
            double t18201 = b4p*t18196*t18197;
            double t18202 = b2p*c*t18192;
            double t18203 = t18200+t18201+t18202+t18199;
            double t18204 = 1/t18203;
            double t18205 = t18204*t18198*(1.0/2.0);
            double t18206 = t18205+1.0;
            double t18207 = log(t18206);
            double t18208 = a1p*c*t18192;
            double t18209 = t18208+1.0;
            double t18210 = c0p*t18207*t18209*2.0;
            functional_[index] = -t18191*(t18210-((pow(2.0,1.0/3.0)*2.0-2.0)*(t18210-c0f*log((1.0/2.0)/(c0f*(b1f* \
               t18194+b3f*t18195+b2f*c*t18192+b4f*t18196*t18197))+1.0)*(a1f*c*t18192+1.0)*2.0))/(two_13*2.0-2.0)) \
               ;
        } else if (rho_b[index] > cutoff_) {
            double t17826 = rho_a[index]+rho_b[index];
            double t17827 = 1/pow(t17826,1.0/3.0);
            double t17828 = c*t17827;
            double t17829 = sqrt(t17828);
            double t17830 = pow(t17828,3.0/2.0);
            double t17831 = c*c;
            double t17832 = 1/pow(t17826,2.0/3.0);
            double t17833 = 1/c0p;
            double t17834 = b1p*t17829;
            double t17835 = b3p*t17830;
            double t17836 = b4p*t17831*t17832;
            double t17837 = b2p*c*t17827;
            double t17838 = t17834+t17835+t17836+t17837;
            double t17839 = 1/t17838;
            double t17840 = t17833*t17839*(1.0/2.0);
            double t17841 = t17840+1.0;
            double t17842 = log(t17841);
            double t17843 = a1p*c*t17827;
            double t17844 = t17843+1.0;
            double t17845 = c0p*t17842*t17844*2.0;
            functional_[index] = -t17826*(t17845-((pow(2.0,1.0/3.0)*2.0-2.0)*(t17845-c0f*log((1.0/2.0)/(c0f*(b1f* \
               t17829+b3f*t17830+b2f*c*t17827+b4f*t17831*t17832))+1.0)*(a1f*c*t17827+1.0)*2.0))/(two_13*2.0-2.0)) \
               ;
        } else {
            functional_[index] = 0.0;
        } 
   
    }
    //First Partials
    for (int index = 0; index < ntrue && deriv_ >= 1; index++) {

        //V_rho_a
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t17225 = rho_a[index]+rho_b[index];
            double t17226 = 1/pow(t17225,1.0/3.0);
            double t17227 = c*t17226;
            double t17228 = sqrt(t17227);
            double t17229 = b1p*t17228;
            double t17230 = pow(t17227,3.0/2.0);
            double t17231 = b3p*t17230;
            double t17232 = c*c;
            double t17233 = 1/pow(t17225,2.0/3.0);
            double t17234 = b4p*t17232*t17233;
            double t17235 = b2p*c*t17226;
            double t17236 = t17231+t17234+t17235+t17229;
            double t17237 = 1/pow(t17225,4.0/3.0);
            double t17238 = 1/c0p;
            double t17239 = 1/t17236;
            double t17240 = t17238*t17239*(1.0/2.0);
            double t17241 = t17240+1.0;
            double t17242 = a1p*c*t17226;
            double t17243 = t17242+1.0;
            double t17244 = rho_a[index]-rho_b[index];
            double t17245 = t17244*t17244;
            double t17246 = 1/t17225;
            double t17247 = t17244*t17246;
            double t17248 = two_13*2.0;
            double t17249 = t17248-2.0;
            double t17250 = 1/t17249;
            double t17251 = 1/c0f;
            double t17252 = b1f*t17228;
            double t17253 = b3f*t17230;
            double t17254 = b4f*t17232*t17233;
            double t17255 = b2f*c*t17226;
            double t17256 = t17252+t17253+t17254+t17255;
            double t17257 = 1/t17256;
            double t17258 = t17251*t17257*(1.0/2.0);
            double t17259 = t17258+1.0;
            double t17260 = log(t17259);
            double t17261 = a1f*c*t17226;
            double t17262 = t17261+1.0;
            double t17263 = log(t17241);
            double t17273 = c0f*t17260*t17262*2.0;
            double t17274 = c0p*t17243*t17263*2.0;
            double t17264 = t17273-t17274;
            double t17265 = t17247+1.0;
            double t17266 = pow(t17265,4.0/3.0);
            double t17267 = -t17247+1.0;
            double t17268 = pow(t17267,4.0/3.0);
            double t17269 = t17266+t17268-2.0;
            double t17270 = 1/(t17225*t17225);
            double t17301 = t17270*t17244;
            double t17271 = -t17301+t17246;
            double t17272 = 1/(t17225*t17225*t17225*t17225);
            double t17275 = t17245*t17245;
            double t17276 = 1/pow(t17225,5.0/3.0);
            double t17277 = 1/sqrt(t17227);
            double t17278 = 1/t17241;
            double t17279 = 1/(t17236*t17236);
            double t17280 = b4p*t17232*t17276*(2.0/3.0);
            double t17281 = b2p*c*t17237*(1.0/3.0);
            double t17282 = b1p*c*t17237*t17277*(1.0/6.0);
            double t17283 = b3p*c*t17228*t17237*(1.0/2.0);
            double t17284 = t17280+t17281+t17282+t17283;
            double t17285 = t17243*t17284*t17278*t17279;
            double t17286 = 1/(t17225*t17225*t17225*t17225*t17225);
            double t17287 = 1/d2fz0;
            double t17288 = 1/Aa;
            double t17289 = b1a*t17228;
            double t17290 = b3a*t17230;
            double t17291 = b4a*t17232*t17233;
            double t17292 = b2a*c*t17226;
            double t17293 = t17290+t17291+t17292+t17289;
            double t17294 = 1/t17293;
            double t17295 = t17294*t17288*(1.0/2.0);
            double t17296 = t17295+1.0;
            double t17297 = log(t17296);
            double t17298 = a1a*c*t17226;
            double t17299 = t17298+1.0;
            double t17300 = pow(t17265,1.0/3.0);
            double t17302 = t17300*t17271*(4.0/3.0);
            double t17303 = pow(t17267,1.0/3.0);
            double t17304 = t17302-t17303*t17271*(4.0/3.0);
            double t17305 = t17272*t17275;
            double t17306 = t17305-1.0;
            v_rho_a_[index] = -t17274-t17225*(t17285-t17250*t17272*t17275*t17269*(t17285-(t17262*1/(t17256*t17256) \
               *(b2f*c*t17237*(1.0/3.0)+b4f*t17232*t17276*(2.0/3.0)+b1f*c*t17237*t17277*(1.0/6.0)+b3f*c*t17228*t17237* \
               (1.0/2.0)))/t17259+a1f*c*c0f*t17260*t17237*(2.0/3.0)-a1p*c*c0p*t17263*t17237*(2.0/3.0))-a1p*c*c0p* \
               t17263*t17237*(2.0/3.0)+t17250*t17304*t17272*t17264*t17275-t17250*t17264*t17275*t17286*t17269*4.0+ \
               t17250*t17244*t17245*t17272*t17264*t17269*4.0-Aa*t17250*t17269*t17287*t17297*t17299*(t17275*t17286* \
               4.0-t17244*t17245*t17272*4.0)*2.0+Aa*t17250*t17304*t17306*t17287*t17297*t17299*2.0+(t17250*t17306* \
               1/(t17293*t17293)*t17269*t17287*t17299*(b2a*c*t17237*(1.0/3.0)+b4a*t17232*t17276*(2.0/3.0)+b1a*c*t17237* \
               t17277*(1.0/6.0)+b3a*c*t17228*t17237*(1.0/2.0)))/t17296-Aa*a1a*c*t17250*t17306*t17237*t17269*t17287* \
               t17297*(2.0/3.0))-t17250*t17272*t17264*t17275*t17269-Aa*t17250*t17306*t17269*t17287*t17297*t17299* \
               2.0;
        } else if (rho_a[index] > cutoff_) {
            double t18212 = rho_a[index]+rho_b[index];
            double t18213 = 1/pow(t18212,1.0/3.0);
            double t18214 = c*t18213;
            double t18215 = sqrt(t18214);
            double t18216 = b1f*t18215;
            double t18217 = pow(t18214,3.0/2.0);
            double t18218 = b3f*t18217;
            double t18219 = c*c;
            double t18220 = 1/pow(t18212,2.0/3.0);
            double t18221 = b4f*t18220*t18219;
            double t18222 = b2f*c*t18213;
            double t18223 = t18221+t18222+t18216+t18218;
            double t18224 = 1/pow(t18212,4.0/3.0);
            double t18225 = b1p*t18215;
            double t18226 = b3p*t18217;
            double t18227 = b4p*t18220*t18219;
            double t18228 = b2p*c*t18213;
            double t18229 = t18225+t18226+t18227+t18228;
            double t18230 = 1/pow(t18212,5.0/3.0);
            double t18231 = 1/sqrt(t18214);
            double t18232 = 1/c0f;
            double t18233 = 1/t18223;
            double t18234 = t18232*t18233*(1.0/2.0);
            double t18235 = t18234+1.0;
            double t18236 = 1/c0p;
            double t18237 = 1/t18229;
            double t18238 = t18236*t18237*(1.0/2.0);
            double t18239 = t18238+1.0;
            double t18240 = a1p*c*t18213;
            double t18241 = t18240+1.0;
            double t18242 = 1/t18239;
            double t18243 = 1/(t18229*t18229);
            double t18244 = b4p*t18230*t18219*(2.0/3.0);
            double t18245 = b2p*c*t18224*(1.0/3.0);
            double t18246 = b1p*c*t18231*t18224*(1.0/6.0);
            double t18247 = b3p*c*t18215*t18224*(1.0/2.0);
            double t18248 = t18244+t18245+t18246+t18247;
            double t18249 = t18241*t18242*t18243*t18248;
            double t18250 = log(t18239);
            double t18251 = pow(2.0,1.0/3.0);
            double t18252 = t18251*2.0;
            double t18253 = t18252-2.0;
            double t18254 = two_13*2.0;
            double t18255 = t18254-2.0;
            double t18256 = 1/t18255;
            double t18257 = log(t18235);
            double t18258 = a1f*c*t18213;
            double t18259 = t18258+1.0;
            v_rho_a_[index] = t18212*(-t18249+t18253*t18256*(t18249-(1/(t18223*t18223)*t18259*(b2f*c*t18224*(1.0/ \
               3.0)+b4f*t18230*t18219*(2.0/3.0)+b1f*c*t18231*t18224*(1.0/6.0)+b3f*c*t18215*t18224*(1.0/2.0)))/t18235+ \
               a1f*c*c0f*t18224*t18257*(2.0/3.0)-a1p*c*c0p*t18250*t18224*(2.0/3.0))+a1p*c*c0p*t18250*t18224*(2.0/ \
               3.0))-c0p*t18241*t18250*2.0-t18253*t18256*(c0f*t18257*t18259*2.0-c0p*t18241*t18250*2.0);
        } else if (rho_b[index] > cutoff_) {
            double t17847 = rho_a[index]+rho_b[index];
            double t17848 = 1/pow(t17847,1.0/3.0);
            double t17849 = c*t17848;
            double t17850 = sqrt(t17849);
            double t17851 = b1f*t17850;
            double t17852 = pow(t17849,3.0/2.0);
            double t17853 = b3f*t17852;
            double t17854 = c*c;
            double t17855 = 1/pow(t17847,2.0/3.0);
            double t17856 = b4f*t17854*t17855;
            double t17857 = b2f*c*t17848;
            double t17858 = t17851+t17853+t17856+t17857;
            double t17859 = 1/pow(t17847,4.0/3.0);
            double t17860 = b1p*t17850;
            double t17861 = b3p*t17852;
            double t17862 = b4p*t17854*t17855;
            double t17863 = b2p*c*t17848;
            double t17864 = t17860+t17861+t17862+t17863;
            double t17865 = 1/pow(t17847,5.0/3.0);
            double t17866 = 1/sqrt(t17849);
            double t17867 = 1/c0f;
            double t17868 = 1/t17858;
            double t17869 = t17867*t17868*(1.0/2.0);
            double t17870 = t17869+1.0;
            double t17871 = 1/c0p;
            double t17872 = 1/t17864;
            double t17873 = t17871*t17872*(1.0/2.0);
            double t17874 = t17873+1.0;
            double t17875 = a1p*c*t17848;
            double t17876 = t17875+1.0;
            double t17877 = 1/t17874;
            double t17878 = 1/(t17864*t17864);
            double t17879 = b4p*t17854*t17865*(2.0/3.0);
            double t17880 = b2p*c*t17859*(1.0/3.0);
            double t17881 = b1p*c*t17866*t17859*(1.0/6.0);
            double t17882 = b3p*c*t17850*t17859*(1.0/2.0);
            double t17883 = t17880+t17881+t17882+t17879;
            double t17884 = t17883*t17876*t17877*t17878;
            double t17885 = log(t17874);
            double t17886 = pow(2.0,1.0/3.0);
            double t17887 = t17886*2.0;
            double t17888 = t17887-2.0;
            double t17889 = two_13*2.0;
            double t17890 = t17889-2.0;
            double t17891 = 1/t17890;
            double t17892 = log(t17870);
            double t17893 = a1f*c*t17848;
            double t17894 = t17893+1.0;
            v_rho_a_[index] = t17847*(-t17884+t17891*t17888*(t17884-(1/(t17858*t17858)*t17894*(b2f*c*t17859*(1.0/ \
               3.0)+b4f*t17854*t17865*(2.0/3.0)+b1f*c*t17866*t17859*(1.0/6.0)+b3f*c*t17850*t17859*(1.0/2.0)))/t17870+ \
               a1f*c*c0f*t17892*t17859*(2.0/3.0)-a1p*c*c0p*t17885*t17859*(2.0/3.0))+a1p*c*c0p*t17885*t17859*(2.0/ \
               3.0))-c0p*t17876*t17885*2.0-t17891*t17888*(c0f*t17892*t17894*2.0-c0p*t17876*t17885*2.0);
        } else {
            v_rho_a_[index] = 0.0;
        } 

        //V_rho_b
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t17308 = rho_a[index]+rho_b[index];
            double t17309 = 1/pow(t17308,1.0/3.0);
            double t17310 = c*t17309;
            double t17311 = sqrt(t17310);
            double t17312 = b1p*t17311;
            double t17313 = pow(t17310,3.0/2.0);
            double t17314 = b3p*t17313;
            double t17315 = c*c;
            double t17316 = 1/pow(t17308,2.0/3.0);
            double t17317 = b4p*t17315*t17316;
            double t17318 = b2p*c*t17309;
            double t17319 = t17312+t17314+t17317+t17318;
            double t17320 = 1/pow(t17308,4.0/3.0);
            double t17321 = 1/c0p;
            double t17322 = 1/t17319;
            double t17323 = t17321*t17322*(1.0/2.0);
            double t17324 = t17323+1.0;
            double t17325 = a1p*c*t17309;
            double t17326 = t17325+1.0;
            double t17327 = rho_a[index]-rho_b[index];
            double t17328 = t17327*t17327;
            double t17329 = 1/t17308;
            double t17330 = t17327*t17329;
            double t17331 = two_13*2.0;
            double t17332 = t17331-2.0;
            double t17333 = 1/t17332;
            double t17334 = 1/c0f;
            double t17335 = b1f*t17311;
            double t17336 = b3f*t17313;
            double t17337 = b4f*t17315*t17316;
            double t17338 = b2f*c*t17309;
            double t17339 = t17335+t17336+t17337+t17338;
            double t17340 = 1/t17339;
            double t17341 = t17340*t17334*(1.0/2.0);
            double t17342 = t17341+1.0;
            double t17343 = log(t17342);
            double t17344 = a1f*c*t17309;
            double t17345 = t17344+1.0;
            double t17346 = log(t17324);
            double t17357 = c0f*t17343*t17345*2.0;
            double t17358 = c0p*t17326*t17346*2.0;
            double t17347 = t17357-t17358;
            double t17348 = t17330+1.0;
            double t17349 = pow(t17348,4.0/3.0);
            double t17350 = -t17330+1.0;
            double t17351 = pow(t17350,4.0/3.0);
            double t17352 = t17351+t17349-2.0;
            double t17353 = 1/(t17308*t17308);
            double t17354 = t17353*t17327;
            double t17355 = t17354+t17329;
            double t17356 = 1/(t17308*t17308*t17308*t17308);
            double t17359 = t17328*t17328;
            double t17360 = 1/pow(t17308,5.0/3.0);
            double t17361 = 1/sqrt(t17310);
            double t17362 = 1/t17324;
            double t17363 = 1/(t17319*t17319);
            double t17364 = b4p*t17315*t17360*(2.0/3.0);
            double t17365 = b2p*c*t17320*(1.0/3.0);
            double t17366 = b1p*c*t17320*t17361*(1.0/6.0);
            double t17367 = b3p*c*t17311*t17320*(1.0/2.0);
            double t17368 = t17364+t17365+t17366+t17367;
            double t17369 = 1/(t17308*t17308*t17308*t17308*t17308);
            double t17370 = 1/d2fz0;
            double t17371 = 1/Aa;
            double t17372 = b1a*t17311;
            double t17373 = b3a*t17313;
            double t17374 = b4a*t17315*t17316;
            double t17375 = b2a*c*t17309;
            double t17376 = t17372+t17373+t17374+t17375;
            double t17377 = 1/t17376;
            double t17378 = t17371*t17377*(1.0/2.0);
            double t17379 = t17378+1.0;
            double t17380 = log(t17379);
            double t17381 = a1a*c*t17309;
            double t17382 = t17381+1.0;
            double t17383 = pow(t17348,1.0/3.0);
            double t17384 = t17355*t17383*(4.0/3.0);
            double t17385 = pow(t17350,1.0/3.0);
            double t17386 = t17384-t17355*t17385*(4.0/3.0);
            double t17387 = t17356*t17359;
            double t17388 = t17387-1.0;
            v_rho_b_[index] = -t17358+t17308*(-t17326*t17362*t17363*t17368+a1p*c*c0p*t17320*t17346*(2.0/3.0)+ \
               t17333*t17352*t17347*t17359*t17369*4.0+t17333*t17347*t17356*t17359*t17386+t17333*t17352*t17356*t17359* \
               (t17326*t17362*t17363*t17368-(t17345*1/(t17339*t17339)*(b2f*c*t17320*(1.0/3.0)+b4f*t17315*t17360*(2.0/ \
               3.0)+b1f*c*t17320*t17361*(1.0/6.0)+b3f*c*t17311*t17320*(1.0/2.0)))/t17342+a1f*c*c0f*t17320*t17343* \
               (2.0/3.0)-a1p*c*c0p*t17320*t17346*(2.0/3.0))+t17333*t17352*t17327*t17328*t17347*t17356*4.0+Aa*t17333* \
               t17352*t17370*t17380*t17382*(t17359*t17369*4.0+t17327*t17328*t17356*4.0)*2.0+Aa*t17333*t17370*t17380* \
               t17382*t17386*t17388*2.0-(t17333*t17352*t17370*t17382*1/(t17376*t17376)*t17388*(b2a*c*t17320*(1.0/ \
               3.0)+b4a*t17315*t17360*(2.0/3.0)+b1a*c*t17320*t17361*(1.0/6.0)+b3a*c*t17311*t17320*(1.0/2.0)))/t17379+ \
               Aa*a1a*c*t17320*t17333*t17352*t17370*t17380*t17388*(2.0/3.0))-t17333*t17352*t17347*t17356*t17359-Aa* \
               t17333*t17352*t17370*t17380*t17382*t17388*2.0;
        } else if (rho_a[index] > cutoff_) {
            double t18261 = rho_a[index]+rho_b[index];
            double t18262 = 1/pow(t18261,1.0/3.0);
            double t18263 = c*t18262;
            double t18264 = sqrt(t18263);
            double t18265 = b1f*t18264;
            double t18266 = pow(t18263,3.0/2.0);
            double t18267 = b3f*t18266;
            double t18268 = c*c;
            double t18269 = 1/pow(t18261,2.0/3.0);
            double t18270 = b4f*t18268*t18269;
            double t18271 = b2f*c*t18262;
            double t18272 = t18270+t18271+t18265+t18267;
            double t18273 = 1/pow(t18261,4.0/3.0);
            double t18274 = b1p*t18264;
            double t18275 = b3p*t18266;
            double t18276 = b4p*t18268*t18269;
            double t18277 = b2p*c*t18262;
            double t18278 = t18274+t18275+t18276+t18277;
            double t18279 = 1/pow(t18261,5.0/3.0);
            double t18280 = 1/sqrt(t18263);
            double t18281 = 1/c0f;
            double t18282 = 1/t18272;
            double t18283 = t18281*t18282*(1.0/2.0);
            double t18284 = t18283+1.0;
            double t18285 = 1/c0p;
            double t18286 = 1/t18278;
            double t18287 = t18285*t18286*(1.0/2.0);
            double t18288 = t18287+1.0;
            double t18289 = a1p*c*t18262;
            double t18290 = t18289+1.0;
            double t18291 = 1/t18288;
            double t18292 = 1/(t18278*t18278);
            double t18293 = b4p*t18268*t18279*(2.0/3.0);
            double t18294 = b2p*c*t18273*(1.0/3.0);
            double t18295 = b1p*c*t18280*t18273*(1.0/6.0);
            double t18296 = b3p*c*t18264*t18273*(1.0/2.0);
            double t18297 = t18293+t18294+t18295+t18296;
            double t18298 = t18290*t18291*t18292*t18297;
            double t18299 = log(t18288);
            double t18300 = pow(2.0,1.0/3.0);
            double t18301 = t18300*2.0;
            double t18302 = t18301-2.0;
            double t18303 = two_13*2.0;
            double t18304 = t18303-2.0;
            double t18305 = 1/t18304;
            double t18306 = log(t18284);
            double t18307 = a1f*c*t18262;
            double t18308 = t18307+1.0;
            v_rho_b_[index] = t18261*(-t18298+t18302*t18305*(t18298-(1/(t18272*t18272)*t18308*(b2f*c*t18273*(1.0/ \
               3.0)+b4f*t18268*t18279*(2.0/3.0)+b1f*c*t18280*t18273*(1.0/6.0)+b3f*c*t18264*t18273*(1.0/2.0)))/t18284+ \
               a1f*c*c0f*t18306*t18273*(2.0/3.0)-a1p*c*c0p*t18273*t18299*(2.0/3.0))+a1p*c*c0p*t18273*t18299*(2.0/ \
               3.0))-c0p*t18290*t18299*2.0-t18302*t18305*(c0f*t18306*t18308*2.0-c0p*t18290*t18299*2.0);
        } else if (rho_b[index] > cutoff_) {
            double t17896 = rho_a[index]+rho_b[index];
            double t17897 = 1/pow(t17896,1.0/3.0);
            double t17898 = c*t17897;
            double t17899 = sqrt(t17898);
            double t17900 = b1f*t17899;
            double t17901 = pow(t17898,3.0/2.0);
            double t17902 = b3f*t17901;
            double t17903 = c*c;
            double t17904 = 1/pow(t17896,2.0/3.0);
            double t17905 = b4f*t17903*t17904;
            double t17906 = b2f*c*t17897;
            double t17907 = t17900+t17902+t17905+t17906;
            double t17908 = 1/pow(t17896,4.0/3.0);
            double t17909 = b1p*t17899;
            double t17910 = b3p*t17901;
            double t17911 = b4p*t17903*t17904;
            double t17912 = b2p*c*t17897;
            double t17913 = t17910+t17911+t17912+t17909;
            double t17914 = 1/pow(t17896,5.0/3.0);
            double t17915 = 1/sqrt(t17898);
            double t17916 = 1/c0f;
            double t17917 = 1/t17907;
            double t17918 = t17916*t17917*(1.0/2.0);
            double t17919 = t17918+1.0;
            double t17920 = 1/c0p;
            double t17921 = 1/t17913;
            double t17922 = t17920*t17921*(1.0/2.0);
            double t17923 = t17922+1.0;
            double t17924 = a1p*c*t17897;
            double t17925 = t17924+1.0;
            double t17926 = 1/t17923;
            double t17927 = 1/(t17913*t17913);
            double t17928 = b4p*t17903*t17914*(2.0/3.0);
            double t17929 = b2p*c*t17908*(1.0/3.0);
            double t17930 = b1p*c*t17915*t17908*(1.0/6.0);
            double t17931 = b3p*c*t17908*t17899*(1.0/2.0);
            double t17932 = t17930+t17931+t17928+t17929;
            double t17933 = t17932*t17925*t17926*t17927;
            double t17934 = log(t17923);
            double t17935 = pow(2.0,1.0/3.0);
            double t17936 = t17935*2.0;
            double t17937 = t17936-2.0;
            double t17938 = two_13*2.0;
            double t17939 = t17938-2.0;
            double t17940 = 1/t17939;
            double t17941 = log(t17919);
            double t17942 = a1f*c*t17897;
            double t17943 = t17942+1.0;
            v_rho_b_[index] = t17896*(-t17933+t17940*t17937*(t17933-(1/(t17907*t17907)*t17943*(b2f*c*t17908*(1.0/ \
               3.0)+b4f*t17903*t17914*(2.0/3.0)+b1f*c*t17915*t17908*(1.0/6.0)+b3f*c*t17908*t17899*(1.0/2.0)))/t17919+ \
               a1f*c*c0f*t17941*t17908*(2.0/3.0)-a1p*c*c0p*t17934*t17908*(2.0/3.0))+a1p*c*c0p*t17934*t17908*(2.0/ \
               3.0))-c0p*t17925*t17934*2.0-t17940*t17937*(c0f*t17941*t17943*2.0-c0p*t17925*t17934*2.0);
        } else {
            v_rho_b_[index] = 0.0;
        } 

        if (is_gga_) {

            //V_gamma_aa
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_aa_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_aa_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_aa_[index] = 0.0;
            } else {
                v_gamma_aa_[index] = 0.0;
            } 

            //V_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_ab_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_ab_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_ab_[index] = 0.0;
            } else {
                v_gamma_ab_[index] = 0.0;
            } 

            //V_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_bb_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_bb_[index] = 0.0;
            } else {
                v_gamma_bb_[index] = 0.0;
            } 
        }
        if (is_meta_) {

            //V_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_tau_a_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_tau_a_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_tau_a_[index] = 0.0;
            } else {
                v_tau_a_[index] = 0.0;
            } 

            //V_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_tau_b_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_tau_b_[index] = 0.0;
            } else {
                v_tau_b_[index] = 0.0;
            } 
        }
    }
    //Second Partials
    for (int index = 0; index < ntrue && deriv_ >= 2; index++) {

        //V_rho_a_rho_a
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t17395 = rho_a[index]+rho_b[index];
            double t17396 = 1/pow(t17395,1.0/3.0);
            double t17397 = c*t17396;
            double t17398 = sqrt(t17397);
            double t17399 = b1p*t17398;
            double t17400 = pow(t17397,3.0/2.0);
            double t17401 = b3p*t17400;
            double t17402 = c*c;
            double t17403 = 1/pow(t17395,2.0/3.0);
            double t17404 = b4p*t17402*t17403;
            double t17405 = b2p*c*t17396;
            double t17406 = t17401+t17404+t17405+t17399;
            double t17407 = 1/pow(t17395,7.0/3.0);
            double t17408 = 1/pow(t17395,8.0/3.0);
            double t17409 = 1/sqrt(t17397);
            double t17410 = a1p*c*t17396;
            double t17411 = t17410+1.0;
            double t17412 = 1/c0p;
            double t17413 = 1/t17406;
            double t17414 = t17412*t17413*(1.0/2.0);
            double t17415 = t17414+1.0;
            double t17416 = 1/t17415;
            double t17417 = 1/pow(t17395,4.0/3.0);
            double t17457 = 1/pow(t17395,5.0/3.0);
            double t17459 = b4p*t17402*t17457*(2.0/3.0);
            double t17460 = b2p*c*t17417*(1.0/3.0);
            double t17461 = b1p*c*t17417*t17409*(1.0/6.0);
            double t17462 = b3p*c*t17417*t17398*(1.0/2.0);
            double t17418 = t17460+t17461+t17462+t17459;
            double t17419 = rho_a[index]-rho_b[index];
            double t17420 = 1/t17395;
            double t17421 = t17420*t17419;
            double t17422 = two_13*2.0;
            double t17423 = t17422-2.0;
            double t17424 = 1/t17423;
            double t17425 = 1/c0f;
            double t17426 = b1f*t17398;
            double t17427 = b3f*t17400;
            double t17428 = b4f*t17402*t17403;
            double t17429 = b2f*c*t17396;
            double t17430 = t17426+t17427+t17428+t17429;
            double t17431 = 1/t17430;
            double t17432 = t17431*t17425*(1.0/2.0);
            double t17433 = t17432+1.0;
            double t17434 = log(t17433);
            double t17435 = a1f*c*t17396;
            double t17436 = t17435+1.0;
            double t17437 = log(t17415);
            double t17445 = c0f*t17434*t17436*2.0;
            double t17446 = c0p*t17411*t17437*2.0;
            double t17438 = t17445-t17446;
            double t17439 = t17419*t17419;
            double t17440 = t17421+1.0;
            double t17441 = pow(t17440,4.0/3.0);
            double t17442 = -t17421+1.0;
            double t17443 = pow(t17442,4.0/3.0);
            double t17444 = t17441+t17443-2.0;
            double t17447 = 1/(t17395*t17395);
            double t17451 = t17419*t17447;
            double t17448 = t17420-t17451;
            double t17449 = 1/(t17395*t17395*t17395*t17395);
            double t17450 = pow(t17440,1.0/3.0);
            double t17452 = t17450*t17448*(4.0/3.0);
            double t17453 = pow(t17442,1.0/3.0);
            double t17485 = t17453*t17448*(4.0/3.0);
            double t17454 = t17452-t17485;
            double t17455 = 1/(t17395*t17395*t17395*t17395*t17395);
            double t17456 = t17439*t17439;
            double t17458 = 1/(t17406*t17406);
            double t17463 = 1/t17433;
            double t17464 = 1/(t17430*t17430);
            double t17465 = b4f*t17402*t17457*(2.0/3.0);
            double t17466 = b2f*c*t17417*(1.0/3.0);
            double t17467 = b1f*c*t17417*t17409*(1.0/6.0);
            double t17468 = b3f*c*t17417*t17398*(1.0/2.0);
            double t17469 = t17465+t17466+t17467+t17468;
            double t17470 = t17411*t17416*t17418*t17458;
            double t17471 = a1f*c*c0f*t17434*t17417*(2.0/3.0);
            double t17472 = t17418*t17418;
            double t17473 = 1/pow(t17397,3.0/2.0);
            double t17474 = b4p*t17402*t17408*(1.0E1/9.0);
            double t17475 = b2p*c*t17407*(4.0/9.0);
            double t17476 = b1p*c*t17407*t17409*(2.0/9.0);
            double t17477 = b3p*c*t17407*t17398*(2.0/3.0);
            double t17478 = b3p*t17402*t17408*t17409*(1.0/1.2E1);
            double t17479 = t17474+t17475+t17476+t17477+t17478-b1p*t17402*t17408*t17473*(1.0/3.6E1);
            double t17480 = 1/(t17406*t17406*t17406);
            double t17481 = t17411*t17416*t17480*t17472*2.0;
            double t17482 = t17469*t17469;
            double t17483 = 1/(t17415*t17415);
            double t17484 = 1/(t17406*t17406*t17406*t17406);
            double t17526 = t17436*t17463*t17464*t17469;
            double t17527 = a1p*c*c0p*t17417*t17437*(2.0/3.0);
            double t17486 = t17470+t17471-t17526-t17527;
            double t17487 = t17447*2.0;
            double t17488 = 1/(t17395*t17395*t17395);
            double t17506 = t17419*t17488*2.0;
            double t17489 = -t17506+t17487;
            double t17490 = t17448*t17448;
            double t17491 = a1p*c*c0p*t17407*t17437*(8.0/9.0);
            double t17492 = 1/(t17395*t17395*t17395*t17395*t17395*t17395);
            double t17493 = 1/d2fz0;
            double t17494 = 1/Aa;
            double t17495 = b1a*t17398;
            double t17496 = b3a*t17400;
            double t17497 = b4a*t17402*t17403;
            double t17498 = b2a*c*t17396;
            double t17499 = t17495+t17496+t17497+t17498;
            double t17500 = 1/t17499;
            double t17501 = t17500*t17494*(1.0/2.0);
            double t17502 = t17501+1.0;
            double t17503 = log(t17502);
            double t17504 = a1a*c*t17396;
            double t17505 = t17504+1.0;
            double t17507 = t17453*t17489*(4.0/3.0);
            double t17508 = 1/pow(t17440,2.0/3.0);
            double t17509 = t17490*t17508*(4.0/9.0);
            double t17510 = 1/pow(t17442,2.0/3.0);
            double t17511 = t17510*t17490*(4.0/9.0);
            double t17512 = t17511+t17507+t17509-t17450*t17489*(4.0/3.0);
            double t17513 = t17455*t17456*4.0;
            double t17525 = t17419*t17439*t17449*4.0;
            double t17514 = t17513-t17525;
            double t17515 = 1/t17502;
            double t17516 = t17456*t17449;
            double t17517 = t17516-1.0;
            double t17518 = 1/(t17499*t17499);
            double t17519 = b4a*t17402*t17457*(2.0/3.0);
            double t17520 = b2a*c*t17417*(1.0/3.0);
            double t17521 = b1a*c*t17417*t17409*(1.0/6.0);
            double t17522 = b3a*c*t17417*t17398*(1.0/2.0);
            double t17523 = t17520+t17521+t17522+t17519;
            double t17524 = t17523*t17523;
            v_rho_a_rho_a_[index] = t17395*(-t17481-t17491+t17411*t17416*t17458*t17479+t17424*t17444*t17456*t17449* \
               (t17481+t17491-t17411*t17416*t17458*t17479-1/(t17430*t17430*t17430)*t17436*t17463*t17482*2.0+t17436* \
               t17463*t17464*(b2f*c*t17407*(4.0/9.0)+b4f*t17402*t17408*(1.0E1/9.0)+b1f*c*t17407*t17409*(2.0/9.0)+ \
               b3f*c*t17407*t17398*(2.0/3.0)-b1f*t17402*t17408*t17473*(1.0/3.6E1)+b3f*t17402*t17408*t17409*(1.0/1.2E1) \
               )+1/(t17430*t17430*t17430*t17430)*1/(t17433*t17433)*t17425*t17436*t17482*(1.0/2.0)-a1f*c*c0f*t17407* \
               t17434*(8.0/9.0)-t17411*t17412*t17472*t17483*t17484*(1.0/2.0)+a1f*c*t17417*t17463*t17464*t17469*(2.0/ \
               3.0)-a1p*c*t17416*t17417*t17418*t17458*(2.0/3.0))+t17411*t17412*t17472*t17483*t17484*(1.0/2.0)-t17512* \
               t17424*t17438*t17456*t17449-t17424*t17444*t17438*t17456*t17492*2.0E1+t17424*t17454*t17455*t17438*t17456* \
               8.0-t17424*t17444*t17455*t17456*t17486*8.0-t17424*t17444*t17438*t17439*t17449*1.2E1+t17424*t17454* \
               t17456*t17449*t17486*2.0+t17424*t17444*t17419*t17455*t17438*t17439*3.2E1-t17424*t17454*t17419*t17438* \
               t17439*t17449*8.0+t17424*t17444*t17419*t17439*t17449*t17486*8.0+a1p*c*t17416*t17417*t17418*t17458* \
               (2.0/3.0)-Aa*t17503*t17512*t17424*t17505*t17517*t17493*2.0+Aa*t17503*t17424*t17505*t17514*t17454*t17493* \
               4.0-Aa*t17503*t17424*t17505*t17444*t17493*(t17456*t17492*2.0E1+t17439*t17449*1.2E1-t17419*t17455*t17439* \
               3.2E1)*2.0+t17424*t17505*t17514*t17523*t17515*t17444*t17518*t17493*2.0-t17424*t17505*t17523*t17515* \
               t17454*t17517*t17518*t17493*2.0-t17424*t17505*t17515*t17524*t17444*t17517*t17493*1/(t17499*t17499* \
               t17499)*2.0+t17424*t17505*t17515*t17444*t17517*t17518*t17493*(b2a*c*t17407*(4.0/9.0)+b4a*t17402*t17408* \
               (1.0E1/9.0)+b1a*c*t17407*t17409*(2.0/9.0)+b3a*c*t17407*t17398*(2.0/3.0)-b1a*t17402*t17408*t17473*(1.0/ \
               3.6E1)+b3a*t17402*t17408*t17409*(1.0/1.2E1))-Aa*a1a*c*t17503*t17424*t17407*t17444*t17517*t17493*(8.0/ \
               9.0)+Aa*a1a*c*t17503*t17424*t17417*t17454*t17517*t17493*(4.0/3.0)+1/(t17502*t17502)*t17424*t17505* \
               t17524*t17444*t17517*t17493*t17494*1/(t17499*t17499*t17499*t17499)*(1.0/2.0)-Aa*a1a*c*t17503*t17424* \
               t17417*t17444*t17493*(t17513-t17525)*(4.0/3.0)+a1a*c*t17424*t17523*t17515*t17417*t17444*t17517*t17518* \
               t17493*(2.0/3.0))-t17411*t17416*t17418*t17458*2.0+t17424*t17444*t17456*t17449*(t17470+t17471-t17526- \
               t17527)*2.0+a1p*c*c0p*t17417*t17437*(4.0/3.0)+t17424*t17444*t17455*t17438*t17456*8.0-t17424*t17454* \
               t17438*t17456*t17449*2.0-t17424*t17444*t17419*t17438*t17439*t17449*8.0-Aa*t17503*t17424*t17505*t17454* \
               t17517*t17493*4.0+Aa*t17503*t17424*t17505*t17444*t17493*(t17513-t17525)*4.0-t17424*t17505*t17523*t17515* \
               t17444*t17517*t17518*t17493*2.0+Aa*a1a*c*t17503*t17424*t17417*t17444*t17517*t17493*(4.0/3.0);
        } else if (rho_a[index] > cutoff_) {
            double t18315 = rho_a[index]+rho_b[index];
            double t18316 = 1/pow(t18315,1.0/3.0);
            double t18317 = c*t18316;
            double t18318 = sqrt(t18317);
            double t18319 = b1f*t18318;
            double t18320 = pow(t18317,3.0/2.0);
            double t18321 = b3f*t18320;
            double t18322 = c*c;
            double t18323 = 1/pow(t18315,2.0/3.0);
            double t18324 = b4f*t18322*t18323;
            double t18325 = b2f*c*t18316;
            double t18326 = t18321+t18324+t18325+t18319;
            double t18327 = 1/pow(t18315,7.0/3.0);
            double t18328 = 1/pow(t18315,8.0/3.0);
            double t18329 = 1/sqrt(t18317);
            double t18330 = b1p*t18318;
            double t18331 = b3p*t18320;
            double t18332 = b4p*t18322*t18323;
            double t18333 = b2p*c*t18316;
            double t18334 = t18330+t18331+t18332+t18333;
            double t18335 = 1/pow(t18317,3.0/2.0);
            double t18336 = a1f*c*t18316;
            double t18337 = t18336+1.0;
            double t18338 = 1/c0f;
            double t18339 = 1/t18326;
            double t18340 = t18338*t18339*(1.0/2.0);
            double t18341 = t18340+1.0;
            double t18342 = 1/t18341;
            double t18343 = 1/pow(t18315,4.0/3.0);
            double t18352 = 1/pow(t18315,5.0/3.0);
            double t18354 = b4f*t18322*t18352*(2.0/3.0);
            double t18355 = b2f*c*t18343*(1.0/3.0);
            double t18356 = b1f*c*t18343*t18329*(1.0/6.0);
            double t18357 = b3f*c*t18343*t18318*(1.0/2.0);
            double t18344 = t18354+t18355+t18356+t18357;
            double t18345 = a1p*c*t18316;
            double t18346 = t18345+1.0;
            double t18347 = 1/c0p;
            double t18348 = 1/t18334;
            double t18349 = t18347*t18348*(1.0/2.0);
            double t18350 = t18349+1.0;
            double t18351 = 1/t18350;
            double t18359 = b4p*t18322*t18352*(2.0/3.0);
            double t18360 = b2p*c*t18343*(1.0/3.0);
            double t18361 = b1p*c*t18343*t18329*(1.0/6.0);
            double t18362 = b3p*c*t18343*t18318*(1.0/2.0);
            double t18353 = t18360+t18361+t18362+t18359;
            double t18358 = t18344*t18344;
            double t18363 = t18353*t18353;
            double t18364 = 1/(t18326*t18326);
            double t18365 = 1/(t18334*t18334);
            double t18366 = b4p*t18322*t18328*(1.0E1/9.0);
            double t18367 = b2p*c*t18327*(4.0/9.0);
            double t18368 = b1p*c*t18327*t18329*(2.0/9.0);
            double t18369 = b3p*c*t18318*t18327*(2.0/3.0);
            double t18370 = b3p*t18322*t18328*t18329*(1.0/1.2E1);
            double t18371 = t18370+t18366+t18367+t18368+t18369-b1p*t18322*t18335*t18328*(1.0/3.6E1);
            double t18372 = t18351*t18371*t18346*t18365;
            double t18373 = 1/(t18334*t18334*t18334);
            double t18374 = 1/(t18350*t18350);
            double t18375 = 1/(t18334*t18334*t18334*t18334);
            double t18376 = t18363*t18346*t18347*t18374*t18375*(1.0/2.0);
            double t18377 = log(t18350);
            double t18378 = a1p*c*t18351*t18343*t18353*t18365*(2.0/3.0);
            double t18379 = pow(2.0,1.0/3.0);
            double t18380 = t18379*2.0;
            double t18381 = t18380-2.0;
            double t18382 = two_13*2.0;
            double t18383 = t18382-2.0;
            double t18384 = 1/t18383;
            double t18385 = log(t18341);
            v_rho_a_rho_a_[index] = t18315*(t18372+t18376+t18378-t18381*t18384*(t18372+t18376+t18378-t18351*t18363* \
               t18346*t18373*2.0+t18342*1/(t18326*t18326*t18326)*t18337*t18358*2.0-t18342*t18337*t18364*(b2f*c*t18327* \
               (4.0/9.0)+b4f*t18322*t18328*(1.0E1/9.0)+b1f*c*t18327*t18329*(2.0/9.0)+b3f*c*t18318*t18327*(2.0/3.0) \
               -b1f*t18322*t18335*t18328*(1.0/3.6E1)+b3f*t18322*t18328*t18329*(1.0/1.2E1))-1/(t18341*t18341)*1/(t18326* \
               t18326*t18326*t18326)*t18337*t18338*t18358*(1.0/2.0)+a1f*c*c0f*t18327*t18385*(8.0/9.0)-a1p*c*c0p*t18327* \
               t18377*(8.0/9.0)-a1f*c*t18342*t18343*t18344*t18364*(2.0/3.0))-t18351*t18363*t18346*t18373*2.0-a1p* \
               c*c0p*t18327*t18377*(8.0/9.0))-t18381*t18384*(t18342*t18344*t18337*t18364-t18351*t18353*t18346*t18365- \
               a1f*c*c0f*t18343*t18385*(2.0/3.0)+a1p*c*c0p*t18343*t18377*(2.0/3.0))*2.0-t18351*t18353*t18346*t18365* \
               2.0+a1p*c*c0p*t18343*t18377*(4.0/3.0);
        } else if (rho_b[index] > cutoff_) {
            double t17950 = rho_a[index]+rho_b[index];
            double t17951 = 1/pow(t17950,1.0/3.0);
            double t17952 = c*t17951;
            double t17953 = sqrt(t17952);
            double t17954 = b1f*t17953;
            double t17955 = pow(t17952,3.0/2.0);
            double t17956 = b3f*t17955;
            double t17957 = c*c;
            double t17958 = 1/pow(t17950,2.0/3.0);
            double t17959 = b4f*t17957*t17958;
            double t17960 = b2f*c*t17951;
            double t17961 = t17960+t17954+t17956+t17959;
            double t17962 = 1/pow(t17950,7.0/3.0);
            double t17963 = 1/pow(t17950,8.0/3.0);
            double t17964 = 1/sqrt(t17952);
            double t17965 = b1p*t17953;
            double t17966 = b3p*t17955;
            double t17967 = b4p*t17957*t17958;
            double t17968 = b2p*c*t17951;
            double t17969 = t17965+t17966+t17967+t17968;
            double t17970 = 1/pow(t17952,3.0/2.0);
            double t17971 = a1f*c*t17951;
            double t17972 = t17971+1.0;
            double t17973 = 1/c0f;
            double t17974 = 1/t17961;
            double t17975 = t17973*t17974*(1.0/2.0);
            double t17976 = t17975+1.0;
            double t17977 = 1/t17976;
            double t17978 = 1/pow(t17950,4.0/3.0);
            double t17987 = 1/pow(t17950,5.0/3.0);
            double t17989 = b4f*t17957*t17987*(2.0/3.0);
            double t17990 = b2f*c*t17978*(1.0/3.0);
            double t17991 = b1f*c*t17964*t17978*(1.0/6.0);
            double t17992 = b3f*c*t17953*t17978*(1.0/2.0);
            double t17979 = t17990+t17991+t17992+t17989;
            double t17980 = a1p*c*t17951;
            double t17981 = t17980+1.0;
            double t17982 = 1/c0p;
            double t17983 = 1/t17969;
            double t17984 = t17982*t17983*(1.0/2.0);
            double t17985 = t17984+1.0;
            double t17986 = 1/t17985;
            double t17994 = b4p*t17957*t17987*(2.0/3.0);
            double t17995 = b2p*c*t17978*(1.0/3.0);
            double t17996 = b1p*c*t17964*t17978*(1.0/6.0);
            double t17997 = b3p*c*t17953*t17978*(1.0/2.0);
            double t17988 = t17994+t17995+t17996+t17997;
            double t17993 = t17979*t17979;
            double t17998 = t17988*t17988;
            double t17999 = 1/(t17961*t17961);
            double t18000 = 1/(t17969*t17969);
            double t18001 = b4p*t17963*t17957*(1.0E1/9.0);
            double t18002 = b2p*c*t17962*(4.0/9.0);
            double t18003 = b1p*c*t17962*t17964*(2.0/9.0);
            double t18004 = b3p*c*t17953*t17962*(2.0/3.0);
            double t18005 = b3p*t17963*t17964*t17957*(1.0/1.2E1);
            double t18006 = t18001+t18002+t18003+t18004+t18005-b1p*t17970*t17963*t17957*(1.0/3.6E1);
            double t18007 = t17981*t17986*t18000*t18006;
            double t18008 = 1/(t17969*t17969*t17969);
            double t18009 = 1/(t17985*t17985);
            double t18010 = 1/(t17969*t17969*t17969*t17969);
            double t18011 = t17981*t17982*t17998*t18010*t18009*(1.0/2.0);
            double t18012 = log(t17985);
            double t18013 = a1p*c*t17986*t17978*t17988*t18000*(2.0/3.0);
            double t18014 = pow(2.0,1.0/3.0);
            double t18015 = t18014*2.0;
            double t18016 = t18015-2.0;
            double t18017 = two_13*2.0;
            double t18018 = t18017-2.0;
            double t18019 = 1/t18018;
            double t18020 = log(t17976);
            v_rho_a_rho_a_[index] = t17950*(t18011+t18013+t18007-t18016*t18019*(t18011+t18013+t18007-t17981*t17986* \
               t17998*t18008*2.0+1/(t17961*t17961*t17961)*t17972*t17993*t17977*2.0-t17972*t17977*t17999*(b2f*c*t17962* \
               (4.0/9.0)+b4f*t17963*t17957*(1.0E1/9.0)+b1f*c*t17962*t17964*(2.0/9.0)+b3f*c*t17953*t17962*(2.0/3.0) \
               -b1f*t17970*t17963*t17957*(1.0/3.6E1)+b3f*t17963*t17964*t17957*(1.0/1.2E1))-1/(t17961*t17961*t17961* \
               t17961)*t17972*t17973*t17993*1/(t17976*t17976)*(1.0/2.0)+a1f*c*c0f*t17962*t18020*(8.0/9.0)-a1p*c*c0p* \
               t17962*t18012*(8.0/9.0)-a1f*c*t17977*t17978*t17979*t17999*(2.0/3.0))-t17981*t17986*t17998*t18008*2.0- \
               a1p*c*c0p*t17962*t18012*(8.0/9.0))-t18016*t18019*(t17972*t17977*t17979*t17999-t17981*t17986*t17988* \
               t18000-a1f*c*c0f*t17978*t18020*(2.0/3.0)+a1p*c*c0p*t17978*t18012*(2.0/3.0))*2.0-t17981*t17986*t17988* \
               t18000*2.0+a1p*c*c0p*t17978*t18012*(4.0/3.0);
        } else {
            v_rho_a_rho_a_[index] = 0.0;
        } 

        //V_rho_a_rho_b
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t17529 = rho_a[index]+rho_b[index];
            double t17530 = 1/pow(t17529,1.0/3.0);
            double t17531 = c*t17530;
            double t17532 = sqrt(t17531);
            double t17533 = b1p*t17532;
            double t17534 = pow(t17531,3.0/2.0);
            double t17535 = b3p*t17534;
            double t17536 = c*c;
            double t17537 = 1/pow(t17529,2.0/3.0);
            double t17538 = b4p*t17536*t17537;
            double t17539 = b2p*c*t17530;
            double t17540 = t17533+t17535+t17538+t17539;
            double t17541 = 1/pow(t17529,7.0/3.0);
            double t17542 = 1/pow(t17529,8.0/3.0);
            double t17543 = 1/sqrt(t17531);
            double t17544 = a1p*c*t17530;
            double t17545 = t17544+1.0;
            double t17546 = 1/c0p;
            double t17547 = 1/t17540;
            double t17548 = t17546*t17547*(1.0/2.0);
            double t17549 = t17548+1.0;
            double t17550 = 1/t17549;
            double t17551 = 1/pow(t17529,4.0/3.0);
            double t17594 = 1/pow(t17529,5.0/3.0);
            double t17596 = b4p*t17536*t17594*(2.0/3.0);
            double t17597 = b2p*c*t17551*(1.0/3.0);
            double t17598 = b1p*c*t17551*t17543*(1.0/6.0);
            double t17599 = b3p*c*t17532*t17551*(1.0/2.0);
            double t17552 = t17596+t17597+t17598+t17599;
            double t17553 = rho_a[index]-rho_b[index];
            double t17554 = 1/t17529;
            double t17555 = t17553*t17554;
            double t17556 = two_13*2.0;
            double t17557 = t17556-2.0;
            double t17558 = 1/t17557;
            double t17559 = 1/c0f;
            double t17560 = b1f*t17532;
            double t17561 = b3f*t17534;
            double t17562 = b4f*t17536*t17537;
            double t17563 = b2f*c*t17530;
            double t17564 = t17560+t17561+t17562+t17563;
            double t17565 = 1/t17564;
            double t17566 = t17565*t17559*(1.0/2.0);
            double t17567 = t17566+1.0;
            double t17568 = log(t17567);
            double t17569 = a1f*c*t17530;
            double t17570 = t17569+1.0;
            double t17571 = log(t17549);
            double t17583 = c0f*t17570*t17568*2.0;
            double t17584 = c0p*t17571*t17545*2.0;
            double t17572 = t17583-t17584;
            double t17573 = t17553*t17553;
            double t17574 = t17555+1.0;
            double t17575 = pow(t17574,4.0/3.0);
            double t17576 = -t17555+1.0;
            double t17577 = pow(t17576,4.0/3.0);
            double t17578 = t17575+t17577-2.0;
            double t17579 = 1/(t17529*t17529);
            double t17580 = t17553*t17579;
            double t17581 = t17580+t17554;
            double t17582 = 1/(t17529*t17529*t17529*t17529);
            double t17585 = pow(t17574,1.0/3.0);
            double t17586 = t17581*t17585*(4.0/3.0);
            double t17587 = pow(t17576,1.0/3.0);
            double t17621 = t17581*t17587*(4.0/3.0);
            double t17588 = -t17621+t17586;
            double t17589 = t17573*t17573;
            double t17590 = t17580-t17554;
            double t17591 = t17590*t17585*(4.0/3.0);
            double t17592 = 1/(t17529*t17529*t17529*t17529*t17529);
            double t17644 = t17590*t17587*(4.0/3.0);
            double t17593 = -t17644+t17591;
            double t17595 = 1/(t17540*t17540);
            double t17600 = t17552*t17552;
            double t17601 = 1/t17567;
            double t17602 = 1/(t17564*t17564);
            double t17603 = 1/pow(t17531,3.0/2.0);
            double t17604 = b4p*t17542*t17536*(1.0E1/9.0);
            double t17605 = b2p*c*t17541*(4.0/9.0);
            double t17606 = b1p*c*t17541*t17543*(2.0/9.0);
            double t17607 = b3p*c*t17532*t17541*(2.0/3.0);
            double t17608 = b3p*t17542*t17543*t17536*(1.0/1.2E1);
            double t17609 = t17604+t17605+t17606+t17607+t17608-b1p*t17603*t17542*t17536*(1.0/3.6E1);
            double t17610 = t17550*t17545*t17609*t17595;
            double t17611 = b4f*t17536*t17594*(2.0/3.0);
            double t17612 = b2f*c*t17551*(1.0/3.0);
            double t17613 = b1f*c*t17551*t17543*(1.0/6.0);
            double t17614 = b3f*c*t17532*t17551*(1.0/2.0);
            double t17615 = t17611+t17612+t17613+t17614;
            double t17616 = 1/(t17540*t17540*t17540);
            double t17617 = t17615*t17615;
            double t17618 = 1/(t17549*t17549);
            double t17619 = 1/(t17540*t17540*t17540*t17540);
            double t17620 = t17600*t17545*t17546*t17618*t17619*(1.0/2.0);
            double t17622 = t17601*t17602*t17570*t17615;
            double t17623 = a1p*c*c0p*t17551*t17571*(2.0/3.0);
            double t17625 = t17550*t17552*t17545*t17595;
            double t17626 = a1f*c*c0f*t17551*t17568*(2.0/3.0);
            double t17624 = t17622+t17623-t17625-t17626;
            double t17627 = 1/(t17529*t17529*t17529);
            double t17628 = a1p*c*t17550*t17551*t17552*t17595*(2.0/3.0);
            double t17629 = 1/(t17529*t17529*t17529*t17529*t17529*t17529);
            double t17630 = 1/d2fz0;
            double t17631 = 1/Aa;
            double t17632 = b1a*t17532;
            double t17633 = b3a*t17534;
            double t17634 = b4a*t17536*t17537;
            double t17635 = b2a*c*t17530;
            double t17636 = t17632+t17633+t17634+t17635;
            double t17637 = 1/t17636;
            double t17638 = t17631*t17637*(1.0/2.0);
            double t17639 = t17638+1.0;
            double t17640 = log(t17639);
            double t17641 = a1a*c*t17530;
            double t17642 = t17641+1.0;
            double t17643 = t17592*t17589*4.0;
            double t17645 = t17553*t17627*t17585*(8.0/3.0);
            double t17646 = 1/pow(t17574,2.0/3.0);
            double t17647 = t17581*t17590*t17646*(4.0/9.0);
            double t17648 = 1/pow(t17576,2.0/3.0);
            double t17649 = t17581*t17590*t17648*(4.0/9.0);
            double t17650 = t17645+t17647+t17649-t17553*t17627*t17587*(8.0/3.0);
            double t17651 = t17553*t17573*t17582*4.0;
            double t17652 = 1/t17639;
            double t17653 = t17651+t17643;
            double t17654 = 1/(t17636*t17636);
            double t17655 = b4a*t17536*t17594*(2.0/3.0);
            double t17656 = b2a*c*t17551*(1.0/3.0);
            double t17657 = b1a*c*t17551*t17543*(1.0/6.0);
            double t17658 = b3a*c*t17532*t17551*(1.0/2.0);
            double t17659 = t17655+t17656+t17657+t17658;
            double t17660 = t17582*t17589;
            double t17661 = t17660-1.0;
            double t17662 = t17659*t17659;
            double t17663 = t17651-t17643;
            double t17664 = t17600*t17550*t17616*t17545*2.0;
            double t17665 = a1p*c*c0p*t17541*t17571*(8.0/9.0);
            v_rho_a_rho_b_[index] = t17529*(t17610+t17620+t17628-t17664-t17665-t17582*t17558*t17578*t17589*(t17610+ \
               t17620+t17628-t17664-t17665+t17601*t17570*t17617*1/(t17564*t17564*t17564)*2.0-t17601*t17602*t17570* \
               (b2f*c*t17541*(4.0/9.0)+b4f*t17542*t17536*(1.0E1/9.0)+b1f*c*t17541*t17543*(2.0/9.0)+b3f*c*t17532*t17541* \
               (2.0/3.0)-b1f*t17603*t17542*t17536*(1.0/3.6E1)+b3f*t17542*t17543*t17536*(1.0/1.2E1))-t17570*t17617* \
               1/(t17564*t17564*t17564*t17564)*1/(t17567*t17567)*t17559*(1.0/2.0)+a1f*c*c0f*t17541*t17568*(8.0/9.0) \
               -a1f*c*t17601*t17602*t17551*t17615*(2.0/3.0))-t17650*t17572*t17582*t17558*t17589+t17572*t17573*t17582* \
               t17558*t17578*1.2E1+t17624*t17582*t17593*t17558*t17589-t17572*t17592*t17593*t17558*t17589*4.0+t17624* \
               t17582*t17558*t17588*t17589+t17624*t17592*t17558*t17578*t17589*8.0-t17572*t17592*t17558*t17588*t17589* \
               4.0-t17572*t17629*t17558*t17578*t17589*2.0E1-t17553*t17572*t17573*t17582*t17593*t17558*4.0+t17553* \
               t17572*t17573*t17582*t17558*t17588*4.0-Aa*t17630*t17640*t17650*t17642*t17661*t17558*2.0-Aa*t17630* \
               t17640*t17642*t17653*t17593*t17558*2.0+Aa*t17630*t17640*t17642*t17663*t17558*t17588*2.0+Aa*t17630* \
               t17640*t17642*t17558*t17578*(t17573*t17582*1.2E1-t17629*t17589*2.0E1)*2.0+t17630*t17642*t17652*t17661* \
               t17654*t17593*t17558*t17659+t17630*t17642*t17652*t17661*t17654*t17558*t17659*t17588+t17630*t17642* \
               t17652*t17653*t17654*t17558*t17578*t17659-t17630*t17642*t17652*t17654*t17663*t17558*t17578*t17659- \
               t17630*t17642*t17652*t17661*t17662*1/(t17636*t17636*t17636)*t17558*t17578*2.0+t17630*t17642*t17652* \
               t17661*t17654*t17558*t17578*(b2a*c*t17541*(4.0/9.0)+b4a*t17542*t17536*(1.0E1/9.0)+b1a*c*t17541*t17543* \
               (2.0/9.0)+b3a*c*t17532*t17541*(2.0/3.0)-b1a*t17603*t17542*t17536*(1.0/3.6E1)+b3a*t17542*t17543*t17536* \
               (1.0/1.2E1))-Aa*a1a*c*t17630*t17640*t17551*t17661*t17593*t17558*(2.0/3.0)-Aa*a1a*c*t17630*t17541*t17640* \
               t17661*t17558*t17578*(8.0/9.0)-Aa*a1a*c*t17630*t17640*t17551*t17661*t17558*t17588*(2.0/3.0)-Aa*a1a* \
               c*t17630*t17640*t17551*t17653*t17558*t17578*(2.0/3.0)+Aa*a1a*c*t17630*t17640*t17551*t17663*t17558* \
               t17578*(2.0/3.0)+t17630*t17631*t17642*t17661*t17662*1/(t17636*t17636*t17636*t17636)*t17558*1/(t17639* \
               t17639)*t17578*(1.0/2.0)+a1a*c*t17630*t17551*t17652*t17661*t17654*t17558*t17578*t17659*(2.0/3.0))- \
               t17550*t17552*t17545*t17595*2.0+a1p*c*c0p*t17551*t17571*(4.0/3.0)+t17572*t17582*t17558*t17589*(t17591- \
               t17587*(t17580-t17554)*(4.0/3.0))-t17624*t17582*t17558*t17578*t17589*2.0+t17572*t17582*t17558*t17588* \
               t17589+t17572*t17592*t17558*t17578*t17589*8.0+Aa*t17630*t17640*t17642*t17661*t17558*(t17591-t17587* \
               (t17580-t17554)*(4.0/3.0))*2.0+Aa*t17630*t17640*t17642*t17661*t17558*t17588*2.0+Aa*t17630*t17640*t17642* \
               t17653*t17558*t17578*2.0-Aa*t17630*t17640*t17642*t17663*t17558*t17578*2.0-t17630*t17642*t17652*t17661* \
               t17654*t17558*t17578*t17659*2.0+Aa*a1a*c*t17630*t17640*t17551*t17661*t17558*t17578*(4.0/3.0);
        } else if (rho_a[index] > cutoff_) {
            double t18387 = rho_a[index]+rho_b[index];
            double t18388 = 1/pow(t18387,1.0/3.0);
            double t18389 = c*t18388;
            double t18390 = sqrt(t18389);
            double t18391 = b1f*t18390;
            double t18392 = pow(t18389,3.0/2.0);
            double t18393 = b3f*t18392;
            double t18394 = c*c;
            double t18395 = 1/pow(t18387,2.0/3.0);
            double t18396 = b4f*t18394*t18395;
            double t18397 = b2f*c*t18388;
            double t18398 = t18391+t18393+t18396+t18397;
            double t18399 = 1/pow(t18387,7.0/3.0);
            double t18400 = 1/pow(t18387,8.0/3.0);
            double t18401 = 1/sqrt(t18389);
            double t18402 = b1p*t18390;
            double t18403 = b3p*t18392;
            double t18404 = b4p*t18394*t18395;
            double t18405 = b2p*c*t18388;
            double t18406 = t18402+t18403+t18404+t18405;
            double t18407 = 1/pow(t18389,3.0/2.0);
            double t18408 = a1f*c*t18388;
            double t18409 = t18408+1.0;
            double t18410 = 1/c0f;
            double t18411 = 1/t18398;
            double t18412 = t18410*t18411*(1.0/2.0);
            double t18413 = t18412+1.0;
            double t18414 = 1/t18413;
            double t18415 = 1/pow(t18387,4.0/3.0);
            double t18424 = 1/pow(t18387,5.0/3.0);
            double t18426 = b4f*t18424*t18394*(2.0/3.0);
            double t18427 = b2f*c*t18415*(1.0/3.0);
            double t18428 = b1f*c*t18401*t18415*(1.0/6.0);
            double t18429 = b3f*c*t18415*t18390*(1.0/2.0);
            double t18416 = t18426+t18427+t18428+t18429;
            double t18417 = a1p*c*t18388;
            double t18418 = t18417+1.0;
            double t18419 = 1/c0p;
            double t18420 = 1/t18406;
            double t18421 = t18420*t18419*(1.0/2.0);
            double t18422 = t18421+1.0;
            double t18423 = 1/t18422;
            double t18431 = b4p*t18424*t18394*(2.0/3.0);
            double t18432 = b2p*c*t18415*(1.0/3.0);
            double t18433 = b1p*c*t18401*t18415*(1.0/6.0);
            double t18434 = b3p*c*t18415*t18390*(1.0/2.0);
            double t18425 = t18431+t18432+t18433+t18434;
            double t18430 = t18416*t18416;
            double t18435 = t18425*t18425;
            double t18436 = 1/(t18398*t18398);
            double t18437 = 1/(t18406*t18406);
            double t18438 = b4p*t18400*t18394*(1.0E1/9.0);
            double t18439 = b2p*c*t18399*(4.0/9.0);
            double t18440 = b1p*c*t18401*t18399*(2.0/9.0);
            double t18441 = b3p*c*t18390*t18399*(2.0/3.0);
            double t18442 = b3p*t18400*t18401*t18394*(1.0/1.2E1);
            double t18443 = t18440+t18441+t18442+t18438+t18439-b1p*t18400*t18407*t18394*(1.0/3.6E1);
            double t18444 = t18423*t18443*t18418*t18437;
            double t18445 = 1/(t18406*t18406*t18406);
            double t18446 = 1/(t18422*t18422);
            double t18447 = 1/(t18406*t18406*t18406*t18406);
            double t18448 = t18435*t18418*t18419*t18446*t18447*(1.0/2.0);
            double t18449 = log(t18422);
            double t18450 = a1p*c*t18423*t18415*t18425*t18437*(2.0/3.0);
            double t18451 = pow(2.0,1.0/3.0);
            double t18452 = t18451*2.0;
            double t18453 = t18452-2.0;
            double t18454 = two_13*2.0;
            double t18455 = t18454-2.0;
            double t18456 = 1/t18455;
            double t18457 = log(t18413);
            v_rho_a_rho_b_[index] = t18387*(t18450+t18444+t18448-t18453*t18456*(t18450+t18444+t18448-t18423*t18435* \
               t18418*t18445*2.0+t18430*t18414*t18409*1/(t18398*t18398*t18398)*2.0-t18414*t18409*t18436*(b2f*c*t18399* \
               (4.0/9.0)+b4f*t18400*t18394*(1.0E1/9.0)+b1f*c*t18401*t18399*(2.0/9.0)+b3f*c*t18390*t18399*(2.0/3.0) \
               -b1f*t18400*t18407*t18394*(1.0/3.6E1)+b3f*t18400*t18401*t18394*(1.0/1.2E1))-t18410*t18430*1/(t18413* \
               t18413)*t18409*1/(t18398*t18398*t18398*t18398)*(1.0/2.0)+a1f*c*c0f*t18457*t18399*(8.0/9.0)-a1p*c*c0p* \
               t18449*t18399*(8.0/9.0)-a1f*c*t18414*t18415*t18416*t18436*(2.0/3.0))-t18423*t18435*t18418*t18445*2.0- \
               a1p*c*c0p*t18449*t18399*(8.0/9.0))-t18453*t18456*(t18414*t18416*t18409*t18436-t18423*t18425*t18418* \
               t18437-a1f*c*c0f*t18415*t18457*(2.0/3.0)+a1p*c*c0p*t18415*t18449*(2.0/3.0))*2.0-t18423*t18425*t18418* \
               t18437*2.0+a1p*c*c0p*t18415*t18449*(4.0/3.0);
        } else if (rho_b[index] > cutoff_) {
            double t18022 = rho_a[index]+rho_b[index];
            double t18023 = 1/pow(t18022,1.0/3.0);
            double t18024 = c*t18023;
            double t18025 = sqrt(t18024);
            double t18026 = b1f*t18025;
            double t18027 = pow(t18024,3.0/2.0);
            double t18028 = b3f*t18027;
            double t18029 = c*c;
            double t18030 = 1/pow(t18022,2.0/3.0);
            double t18031 = b4f*t18030*t18029;
            double t18032 = b2f*c*t18023;
            double t18033 = t18031+t18032+t18026+t18028;
            double t18034 = 1/pow(t18022,7.0/3.0);
            double t18035 = 1/pow(t18022,8.0/3.0);
            double t18036 = 1/sqrt(t18024);
            double t18037 = b1p*t18025;
            double t18038 = b3p*t18027;
            double t18039 = b4p*t18030*t18029;
            double t18040 = b2p*c*t18023;
            double t18041 = t18040+t18037+t18038+t18039;
            double t18042 = 1/pow(t18024,3.0/2.0);
            double t18043 = a1f*c*t18023;
            double t18044 = t18043+1.0;
            double t18045 = 1/c0f;
            double t18046 = 1/t18033;
            double t18047 = t18045*t18046*(1.0/2.0);
            double t18048 = t18047+1.0;
            double t18049 = 1/t18048;
            double t18050 = 1/pow(t18022,4.0/3.0);
            double t18059 = 1/pow(t18022,5.0/3.0);
            double t18061 = b4f*t18029*t18059*(2.0/3.0);
            double t18062 = b2f*c*t18050*(1.0/3.0);
            double t18063 = b1f*c*t18050*t18036*(1.0/6.0);
            double t18064 = b3f*c*t18050*t18025*(1.0/2.0);
            double t18051 = t18061+t18062+t18063+t18064;
            double t18052 = a1p*c*t18023;
            double t18053 = t18052+1.0;
            double t18054 = 1/c0p;
            double t18055 = 1/t18041;
            double t18056 = t18054*t18055*(1.0/2.0);
            double t18057 = t18056+1.0;
            double t18058 = 1/t18057;
            double t18066 = b4p*t18029*t18059*(2.0/3.0);
            double t18067 = b2p*c*t18050*(1.0/3.0);
            double t18068 = b1p*c*t18050*t18036*(1.0/6.0);
            double t18069 = b3p*c*t18050*t18025*(1.0/2.0);
            double t18060 = t18066+t18067+t18068+t18069;
            double t18065 = t18051*t18051;
            double t18070 = t18060*t18060;
            double t18071 = 1/(t18033*t18033);
            double t18072 = 1/(t18041*t18041);
            double t18073 = b4p*t18035*t18029*(1.0E1/9.0);
            double t18074 = b2p*c*t18034*(4.0/9.0);
            double t18075 = b1p*c*t18034*t18036*(2.0/9.0);
            double t18076 = b3p*c*t18025*t18034*(2.0/3.0);
            double t18077 = b3p*t18035*t18036*t18029*(1.0/1.2E1);
            double t18078 = t18073+t18074+t18075+t18076+t18077-b1p*t18042*t18035*t18029*(1.0/3.6E1);
            double t18079 = t18053*t18072*t18058*t18078;
            double t18080 = 1/(t18041*t18041*t18041);
            double t18081 = 1/(t18057*t18057);
            double t18082 = 1/(t18041*t18041*t18041*t18041);
            double t18083 = t18070*t18053*t18054*t18081*t18082*(1.0/2.0);
            double t18084 = log(t18057);
            double t18085 = a1p*c*t18050*t18060*t18072*t18058*(2.0/3.0);
            double t18086 = pow(2.0,1.0/3.0);
            double t18087 = t18086*2.0;
            double t18088 = t18087-2.0;
            double t18089 = two_13*2.0;
            double t18090 = t18089-2.0;
            double t18091 = 1/t18090;
            double t18092 = log(t18048);
            v_rho_a_rho_b_[index] = t18022*(t18083+t18085+t18079-t18091*t18088*(t18083+t18085+t18079-t18070*t18053* \
               t18080*t18058*2.0+1/(t18033*t18033*t18033)*t18044*t18065*t18049*2.0-t18044*t18071*t18049*(b2f*c*t18034* \
               (4.0/9.0)+b4f*t18035*t18029*(1.0E1/9.0)+b1f*c*t18034*t18036*(2.0/9.0)+b3f*c*t18025*t18034*(2.0/3.0) \
               -b1f*t18042*t18035*t18029*(1.0/3.6E1)+b3f*t18035*t18036*t18029*(1.0/1.2E1))-1/(t18033*t18033*t18033* \
               t18033)*t18044*t18045*t18065*1/(t18048*t18048)*(1.0/2.0)+a1f*c*c0f*t18034*t18092*(8.0/9.0)-a1p*c*c0p* \
               t18034*t18084*(8.0/9.0)-a1f*c*t18050*t18051*t18071*t18049*(2.0/3.0))-t18070*t18053*t18080*t18058*2.0- \
               a1p*c*c0p*t18034*t18084*(8.0/9.0))-t18091*t18088*(t18051*t18044*t18071*t18049-t18060*t18053*t18072* \
               t18058-a1f*c*c0f*t18050*t18092*(2.0/3.0)+a1p*c*c0p*t18050*t18084*(2.0/3.0))*2.0-t18060*t18053*t18072* \
               t18058*2.0+a1p*c*c0p*t18050*t18084*(4.0/3.0);
        } else {
            v_rho_a_rho_b_[index] = 0.0;
        } 

        //V_rho_b_rho_b
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t17667 = rho_a[index]+rho_b[index];
            double t17668 = 1/pow(t17667,1.0/3.0);
            double t17669 = c*t17668;
            double t17670 = sqrt(t17669);
            double t17671 = b1p*t17670;
            double t17672 = pow(t17669,3.0/2.0);
            double t17673 = b3p*t17672;
            double t17674 = c*c;
            double t17675 = 1/pow(t17667,2.0/3.0);
            double t17676 = b4p*t17674*t17675;
            double t17677 = b2p*c*t17668;
            double t17678 = t17671+t17673+t17676+t17677;
            double t17679 = 1/pow(t17667,7.0/3.0);
            double t17680 = 1/pow(t17667,8.0/3.0);
            double t17681 = 1/sqrt(t17669);
            double t17682 = a1p*c*t17668;
            double t17683 = t17682+1.0;
            double t17684 = 1/c0p;
            double t17685 = 1/t17678;
            double t17686 = t17684*t17685*(1.0/2.0);
            double t17687 = t17686+1.0;
            double t17688 = 1/t17687;
            double t17689 = 1/pow(t17667,4.0/3.0);
            double t17729 = 1/pow(t17667,5.0/3.0);
            double t17731 = b4p*t17674*t17729*(2.0/3.0);
            double t17732 = b2p*c*t17689*(1.0/3.0);
            double t17733 = b1p*c*t17681*t17689*(1.0/6.0);
            double t17734 = b3p*c*t17670*t17689*(1.0/2.0);
            double t17690 = t17731+t17732+t17733+t17734;
            double t17691 = rho_a[index]-rho_b[index];
            double t17692 = 1/t17667;
            double t17693 = t17691*t17692;
            double t17694 = two_13*2.0;
            double t17695 = t17694-2.0;
            double t17696 = 1/t17695;
            double t17697 = 1/c0f;
            double t17698 = b1f*t17670;
            double t17699 = b3f*t17672;
            double t17700 = b4f*t17674*t17675;
            double t17701 = b2f*c*t17668;
            double t17702 = t17700+t17701+t17698+t17699;
            double t17703 = 1/t17702;
            double t17704 = t17703*t17697*(1.0/2.0);
            double t17705 = t17704+1.0;
            double t17706 = log(t17705);
            double t17707 = a1f*c*t17668;
            double t17708 = t17707+1.0;
            double t17709 = log(t17687);
            double t17717 = c0f*t17706*t17708*2.0;
            double t17718 = c0p*t17709*t17683*2.0;
            double t17710 = t17717-t17718;
            double t17711 = t17691*t17691;
            double t17712 = t17693+1.0;
            double t17713 = pow(t17712,4.0/3.0);
            double t17714 = -t17693+1.0;
            double t17715 = pow(t17714,4.0/3.0);
            double t17716 = t17713+t17715-2.0;
            double t17719 = 1/(t17667*t17667);
            double t17720 = t17691*t17719;
            double t17721 = t17720+t17692;
            double t17722 = 1/(t17667*t17667*t17667*t17667);
            double t17723 = pow(t17712,1.0/3.0);
            double t17724 = t17721*t17723*(4.0/3.0);
            double t17725 = pow(t17714,1.0/3.0);
            double t17758 = t17721*t17725*(4.0/3.0);
            double t17726 = t17724-t17758;
            double t17727 = 1/(t17667*t17667*t17667*t17667*t17667);
            double t17728 = t17711*t17711;
            double t17730 = 1/(t17678*t17678);
            double t17735 = 1/t17705;
            double t17736 = 1/(t17702*t17702);
            double t17737 = b4f*t17674*t17729*(2.0/3.0);
            double t17738 = b2f*c*t17689*(1.0/3.0);
            double t17739 = b1f*c*t17681*t17689*(1.0/6.0);
            double t17740 = b3f*c*t17670*t17689*(1.0/2.0);
            double t17741 = t17740+t17737+t17738+t17739;
            double t17742 = t17741*t17708*t17735*t17736;
            double t17743 = a1p*c*c0p*t17709*t17689*(2.0/3.0);
            double t17759 = t17730*t17690*t17683*t17688;
            double t17760 = a1f*c*c0f*t17706*t17689*(2.0/3.0);
            double t17744 = t17742-t17760+t17743-t17759;
            double t17745 = t17690*t17690;
            double t17746 = 1/pow(t17669,3.0/2.0);
            double t17747 = b4p*t17680*t17674*(1.0E1/9.0);
            double t17748 = b2p*c*t17679*(4.0/9.0);
            double t17749 = b1p*c*t17681*t17679*(2.0/9.0);
            double t17750 = b3p*c*t17670*t17679*(2.0/3.0);
            double t17751 = b3p*t17680*t17681*t17674*(1.0/1.2E1);
            double t17752 = t17750+t17751+t17747+t17748+t17749-b1p*t17680*t17674*t17746*(1.0/3.6E1);
            double t17753 = 1/(t17678*t17678*t17678);
            double t17754 = t17753*t17745*t17683*t17688*2.0;
            double t17755 = t17741*t17741;
            double t17756 = 1/(t17687*t17687);
            double t17757 = 1/(t17678*t17678*t17678*t17678);
            double t17761 = t17719*2.0;
            double t17762 = 1/(t17667*t17667*t17667);
            double t17763 = t17762*t17691*2.0;
            double t17764 = t17761+t17763;
            double t17765 = t17721*t17721;
            double t17766 = a1p*c*c0p*t17709*t17679*(8.0/9.0);
            double t17767 = 1/(t17667*t17667*t17667*t17667*t17667*t17667);
            double t17768 = 1/d2fz0;
            double t17769 = 1/Aa;
            double t17770 = b1a*t17670;
            double t17771 = b3a*t17672;
            double t17772 = b4a*t17674*t17675;
            double t17773 = b2a*c*t17668;
            double t17774 = t17770+t17771+t17772+t17773;
            double t17775 = 1/t17774;
            double t17776 = t17775*t17769*(1.0/2.0);
            double t17777 = t17776+1.0;
            double t17778 = log(t17777);
            double t17779 = a1a*c*t17668;
            double t17780 = t17779+1.0;
            double t17781 = t17723*t17764*(4.0/3.0);
            double t17782 = 1/pow(t17712,2.0/3.0);
            double t17783 = t17782*t17765*(4.0/9.0);
            double t17784 = 1/pow(t17714,2.0/3.0);
            double t17785 = t17765*t17784*(4.0/9.0);
            double t17786 = t17781+t17783+t17785-t17725*t17764*(4.0/3.0);
            double t17787 = t17711*t17722*t17691*4.0;
            double t17788 = t17727*t17728*4.0;
            double t17789 = t17787+t17788;
            double t17790 = 1/t17777;
            double t17791 = t17722*t17728;
            double t17792 = t17791-1.0;
            double t17793 = 1/(t17774*t17774);
            double t17794 = b4a*t17674*t17729*(2.0/3.0);
            double t17795 = b2a*c*t17689*(1.0/3.0);
            double t17796 = b1a*c*t17681*t17689*(1.0/6.0);
            double t17797 = b3a*c*t17670*t17689*(1.0/2.0);
            double t17798 = t17794+t17795+t17796+t17797;
            double t17799 = t17798*t17798;
            v_rho_b_rho_b_[index] = -t17667*(t17754+t17766-t17730*t17752*t17683*t17688-t17722*t17716*t17728*t17696* \
               (t17754+t17766-t17730*t17752*t17683*t17688-1/(t17702*t17702*t17702)*t17708*t17735*t17755*2.0+t17708* \
               t17735*t17736*(b2f*c*t17679*(4.0/9.0)+b4f*t17680*t17674*(1.0E1/9.0)+b1f*c*t17681*t17679*(2.0/9.0)+ \
               b3f*c*t17670*t17679*(2.0/3.0)-b1f*t17680*t17674*t17746*(1.0/3.6E1)+b3f*t17680*t17681*t17674*(1.0/1.2E1) \
               )+1/(t17702*t17702*t17702*t17702)*1/(t17705*t17705)*t17708*t17755*t17697*(1.0/2.0)-a1f*c*c0f*t17706* \
               t17679*(8.0/9.0)-t17745*t17683*t17684*t17756*t17757*(1.0/2.0)+a1f*c*t17741*t17735*t17736*t17689*(2.0/ \
               3.0)-a1p*c*t17730*t17690*t17688*t17689*(2.0/3.0))+t17710*t17711*t17722*t17716*t17696*1.2E1+t17710* \
               t17726*t17727*t17728*t17696*8.0+t17710*t17722*t17728*t17696*t17786-t17722*t17726*t17744*t17728*t17696* \
               2.0+t17710*t17716*t17728*t17767*t17696*2.0E1-t17716*t17744*t17727*t17728*t17696*8.0-t17745*t17683* \
               t17684*t17756*t17757*(1.0/2.0)+t17710*t17711*t17722*t17726*t17691*t17696*8.0+t17710*t17711*t17716* \
               t17691*t17727*t17696*3.2E1-t17711*t17722*t17716*t17744*t17691*t17696*8.0-a1p*c*t17730*t17690*t17688* \
               t17689*(2.0/3.0)+Aa*t17726*t17780*t17696*t17768*t17778*t17789*4.0+Aa*t17780*t17792*t17696*t17768*t17786* \
               t17778*2.0+Aa*t17716*t17780*t17696*t17768*t17778*(t17711*t17722*1.2E1+t17728*t17767*2.0E1+t17711*t17691* \
               t17727*3.2E1)*2.0-t17726*t17780*t17790*t17792*t17793*t17696*t17768*t17798*2.0-t17716*t17780*t17790* \
               t17793*t17696*t17768*t17789*t17798*2.0+t17716*t17780*t17790*1/(t17774*t17774*t17774)*t17792*t17696* \
               t17768*t17799*2.0-t17716*t17780*t17790*t17792*t17793*t17696*t17768*(b2a*c*t17679*(4.0/9.0)+b4a*t17680* \
               t17674*(1.0E1/9.0)+b1a*c*t17681*t17679*(2.0/9.0)+b3a*c*t17670*t17679*(2.0/3.0)-b1a*t17680*t17674*t17746* \
               (1.0/3.6E1)+b3a*t17680*t17681*t17674*(1.0/1.2E1))+Aa*a1a*c*t17716*t17792*t17696*t17768*t17679*t17778* \
               (8.0/9.0)+Aa*a1a*c*t17726*t17792*t17696*t17768*t17778*t17689*(4.0/3.0)+Aa*a1a*c*t17716*t17696*t17768* \
               t17778*t17689*t17789*(4.0/3.0)-t17716*t17780*1/(t17774*t17774*t17774*t17774)*t17792*t17696*t17768* \
               1/(t17777*t17777)*t17769*t17799*(1.0/2.0)-a1a*c*t17716*t17790*t17792*t17793*t17696*t17768*t17689*t17798* \
               (2.0/3.0))-t17730*t17690*t17683*t17688*2.0+a1p*c*c0p*t17709*t17689*(4.0/3.0)+t17710*t17722*t17726* \
               t17728*t17696*2.0+t17710*t17716*t17727*t17728*t17696*8.0-t17722*t17716*t17744*t17728*t17696*2.0+t17710* \
               t17711*t17722*t17716*t17691*t17696*8.0+Aa*t17726*t17780*t17792*t17696*t17768*t17778*4.0+Aa*t17716* \
               t17780*t17696*t17768*t17778*t17789*4.0-t17716*t17780*t17790*t17792*t17793*t17696*t17768*t17798*2.0+ \
               Aa*a1a*c*t17716*t17792*t17696*t17768*t17778*t17689*(4.0/3.0);
        } else if (rho_a[index] > cutoff_) {
            double t18459 = rho_a[index]+rho_b[index];
            double t18460 = 1/pow(t18459,1.0/3.0);
            double t18461 = c*t18460;
            double t18462 = sqrt(t18461);
            double t18463 = b1f*t18462;
            double t18464 = pow(t18461,3.0/2.0);
            double t18465 = b3f*t18464;
            double t18466 = c*c;
            double t18467 = 1/pow(t18459,2.0/3.0);
            double t18468 = b4f*t18466*t18467;
            double t18469 = b2f*c*t18460;
            double t18470 = t18463+t18465+t18468+t18469;
            double t18471 = 1/pow(t18459,7.0/3.0);
            double t18472 = 1/pow(t18459,8.0/3.0);
            double t18473 = 1/sqrt(t18461);
            double t18474 = b1p*t18462;
            double t18475 = b3p*t18464;
            double t18476 = b4p*t18466*t18467;
            double t18477 = b2p*c*t18460;
            double t18478 = t18474+t18475+t18476+t18477;
            double t18479 = 1/pow(t18461,3.0/2.0);
            double t18480 = a1f*c*t18460;
            double t18481 = t18480+1.0;
            double t18482 = 1/c0f;
            double t18483 = 1/t18470;
            double t18484 = t18482*t18483*(1.0/2.0);
            double t18485 = t18484+1.0;
            double t18486 = 1/t18485;
            double t18487 = 1/pow(t18459,4.0/3.0);
            double t18496 = 1/pow(t18459,5.0/3.0);
            double t18498 = b4f*t18466*t18496*(2.0/3.0);
            double t18499 = b2f*c*t18487*(1.0/3.0);
            double t18500 = b1f*c*t18473*t18487*(1.0/6.0);
            double t18501 = b3f*c*t18462*t18487*(1.0/2.0);
            double t18488 = t18500+t18501+t18498+t18499;
            double t18489 = a1p*c*t18460;
            double t18490 = t18489+1.0;
            double t18491 = 1/c0p;
            double t18492 = 1/t18478;
            double t18493 = t18491*t18492*(1.0/2.0);
            double t18494 = t18493+1.0;
            double t18495 = 1/t18494;
            double t18503 = b4p*t18466*t18496*(2.0/3.0);
            double t18504 = b2p*c*t18487*(1.0/3.0);
            double t18505 = b1p*c*t18473*t18487*(1.0/6.0);
            double t18506 = b3p*c*t18462*t18487*(1.0/2.0);
            double t18497 = t18503+t18504+t18505+t18506;
            double t18502 = t18488*t18488;
            double t18507 = t18497*t18497;
            double t18508 = 1/(t18470*t18470);
            double t18509 = 1/(t18478*t18478);
            double t18510 = b4p*t18472*t18466*(1.0E1/9.0);
            double t18511 = b2p*c*t18471*(4.0/9.0);
            double t18512 = b1p*c*t18471*t18473*(2.0/9.0);
            double t18513 = b3p*c*t18462*t18471*(2.0/3.0);
            double t18514 = b3p*t18472*t18473*t18466*(1.0/1.2E1);
            double t18515 = t18510+t18511+t18512+t18513+t18514-b1p*t18472*t18466*t18479*(1.0/3.6E1);
            double t18516 = t18515*t18490*t18509*t18495;
            double t18517 = 1/(t18478*t18478*t18478);
            double t18518 = 1/(t18494*t18494);
            double t18519 = 1/(t18478*t18478*t18478*t18478);
            double t18520 = t18507*t18490*t18491*t18518*t18519*(1.0/2.0);
            double t18521 = log(t18494);
            double t18522 = a1p*c*t18509*t18495*t18487*t18497*(2.0/3.0);
            double t18523 = pow(2.0,1.0/3.0);
            double t18524 = t18523*2.0;
            double t18525 = t18524-2.0;
            double t18526 = two_13*2.0;
            double t18527 = t18526-2.0;
            double t18528 = 1/t18527;
            double t18529 = log(t18485);
            v_rho_b_rho_b_[index] = t18459*(t18520+t18522+t18516-t18525*t18528*(t18520+t18522+t18516-t18507*t18490* \
               t18517*t18495*2.0+t18502*1/(t18470*t18470*t18470)*t18481*t18486*2.0-t18481*t18508*t18486*(b2f*c*t18471* \
               (4.0/9.0)+b4f*t18472*t18466*(1.0E1/9.0)+b1f*c*t18471*t18473*(2.0/9.0)+b3f*c*t18462*t18471*(2.0/3.0) \
               -b1f*t18472*t18466*t18479*(1.0/3.6E1)+b3f*t18472*t18473*t18466*(1.0/1.2E1))-t18502*1/(t18470*t18470* \
               t18470*t18470)*t18481*t18482*1/(t18485*t18485)*(1.0/2.0)+a1f*c*c0f*t18471*t18529*(8.0/9.0)-a1p*c*c0p* \
               t18521*t18471*(8.0/9.0)-a1f*c*t18508*t18486*t18487*t18488*(2.0/3.0))-t18507*t18490*t18517*t18495*2.0- \
               a1p*c*c0p*t18521*t18471*(8.0/9.0))-t18525*t18528*(t18481*t18508*t18486*t18488-t18490*t18509*t18495* \
               t18497-a1f*c*c0f*t18529*t18487*(2.0/3.0)+a1p*c*c0p*t18521*t18487*(2.0/3.0))*2.0-t18490*t18509*t18495* \
               t18497*2.0+a1p*c*c0p*t18521*t18487*(4.0/3.0);
        } else if (rho_b[index] > cutoff_) {
            double t18094 = rho_a[index]+rho_b[index];
            double t18095 = 1/pow(t18094,1.0/3.0);
            double t18096 = c*t18095;
            double t18097 = sqrt(t18096);
            double t18098 = b1f*t18097;
            double t18099 = pow(t18096,3.0/2.0);
            double t18100 = b3f*t18099;
            double t18101 = c*c;
            double t18102 = 1/pow(t18094,2.0/3.0);
            double t18103 = b4f*t18101*t18102;
            double t18104 = b2f*c*t18095;
            double t18105 = t18100+t18103+t18104+t18098;
            double t18106 = 1/pow(t18094,7.0/3.0);
            double t18107 = 1/pow(t18094,8.0/3.0);
            double t18108 = 1/sqrt(t18096);
            double t18109 = b1p*t18097;
            double t18110 = b3p*t18099;
            double t18111 = b4p*t18101*t18102;
            double t18112 = b2p*c*t18095;
            double t18113 = t18110+t18111+t18112+t18109;
            double t18114 = 1/pow(t18096,3.0/2.0);
            double t18115 = a1f*c*t18095;
            double t18116 = t18115+1.0;
            double t18117 = 1/c0f;
            double t18118 = 1/t18105;
            double t18119 = t18117*t18118*(1.0/2.0);
            double t18120 = t18119+1.0;
            double t18121 = 1/t18120;
            double t18122 = 1/pow(t18094,4.0/3.0);
            double t18131 = 1/pow(t18094,5.0/3.0);
            double t18133 = b4f*t18101*t18131*(2.0/3.0);
            double t18134 = b2f*c*t18122*(1.0/3.0);
            double t18135 = b1f*c*t18122*t18108*(1.0/6.0);
            double t18136 = b3f*c*t18122*t18097*(1.0/2.0);
            double t18123 = t18133+t18134+t18135+t18136;
            double t18124 = a1p*c*t18095;
            double t18125 = t18124+1.0;
            double t18126 = 1/c0p;
            double t18127 = 1/t18113;
            double t18128 = t18126*t18127*(1.0/2.0);
            double t18129 = t18128+1.0;
            double t18130 = 1/t18129;
            double t18138 = b4p*t18101*t18131*(2.0/3.0);
            double t18139 = b2p*c*t18122*(1.0/3.0);
            double t18140 = b1p*c*t18122*t18108*(1.0/6.0);
            double t18141 = b3p*c*t18122*t18097*(1.0/2.0);
            double t18132 = t18140+t18141+t18138+t18139;
            double t18137 = t18123*t18123;
            double t18142 = t18132*t18132;
            double t18143 = 1/(t18105*t18105);
            double t18144 = 1/(t18113*t18113);
            double t18145 = b4p*t18101*t18107*(1.0E1/9.0);
            double t18146 = b2p*c*t18106*(4.0/9.0);
            double t18147 = b1p*c*t18106*t18108*(2.0/9.0);
            double t18148 = b3p*c*t18106*t18097*(2.0/3.0);
            double t18149 = b3p*t18101*t18107*t18108*(1.0/1.2E1);
            double t18150 = t18145+t18146+t18147+t18148+t18149-b1p*t18101*t18114*t18107*(1.0/3.6E1);
            double t18151 = t18130*t18150*t18125*t18144;
            double t18152 = 1/(t18113*t18113*t18113);
            double t18153 = 1/(t18129*t18129);
            double t18154 = 1/(t18113*t18113*t18113*t18113);
            double t18155 = t18142*t18125*t18126*t18153*t18154*(1.0/2.0);
            double t18156 = log(t18129);
            double t18157 = a1p*c*t18130*t18122*t18132*t18144*(2.0/3.0);
            double t18158 = pow(2.0,1.0/3.0);
            double t18159 = t18158*2.0;
            double t18160 = t18159-2.0;
            double t18161 = two_13*2.0;
            double t18162 = t18161-2.0;
            double t18163 = 1/t18162;
            double t18164 = log(t18120);
            v_rho_b_rho_b_[index] = t18094*(t18151+t18155+t18157-t18160*t18163*(t18151+t18155+t18157-t18130*t18142* \
               t18125*t18152*2.0+t18121*1/(t18105*t18105*t18105)*t18116*t18137*2.0-t18121*t18116*t18143*(b2f*c*t18106* \
               (4.0/9.0)+b4f*t18101*t18107*(1.0E1/9.0)+b1f*c*t18106*t18108*(2.0/9.0)+b3f*c*t18106*t18097*(2.0/3.0) \
               -b1f*t18101*t18114*t18107*(1.0/3.6E1)+b3f*t18101*t18107*t18108*(1.0/1.2E1))-1/(t18120*t18120)*1/(t18105* \
               t18105*t18105*t18105)*t18116*t18117*t18137*(1.0/2.0)+a1f*c*c0f*t18106*t18164*(8.0/9.0)-a1p*c*c0p*t18106* \
               t18156*(8.0/9.0)-a1f*c*t18121*t18122*t18123*t18143*(2.0/3.0))-t18130*t18142*t18125*t18152*2.0-a1p* \
               c*c0p*t18106*t18156*(8.0/9.0))-t18160*t18163*(t18121*t18123*t18116*t18143-t18130*t18132*t18125*t18144- \
               a1f*c*c0f*t18122*t18164*(2.0/3.0)+a1p*c*c0p*t18122*t18156*(2.0/3.0))*2.0-t18130*t18132*t18125*t18144* \
               2.0+a1p*c*c0p*t18122*t18156*(4.0/3.0);
        } else {
            v_rho_b_rho_b_[index] = 0.0;
        } 

        if (is_gga_) {

            //V_rho_a_gamma_aa
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_a_gamma_aa_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_a_gamma_aa_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_a_gamma_aa_[index] = 0.0;
            } else {
                v_rho_a_gamma_aa_[index] = 0.0;
            } 

            //V_rho_a_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_a_gamma_ab_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_a_gamma_ab_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_a_gamma_ab_[index] = 0.0;
            } else {
                v_rho_a_gamma_ab_[index] = 0.0;
            } 

            //V_rho_a_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_a_gamma_bb_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_a_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_a_gamma_bb_[index] = 0.0;
            } else {
                v_rho_a_gamma_bb_[index] = 0.0;
            } 

            //V_rho_b_gamma_aa
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_b_gamma_aa_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_b_gamma_aa_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_b_gamma_aa_[index] = 0.0;
            } else {
                v_rho_b_gamma_aa_[index] = 0.0;
            } 

            //V_rho_b_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_b_gamma_ab_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_b_gamma_ab_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_b_gamma_ab_[index] = 0.0;
            } else {
                v_rho_b_gamma_ab_[index] = 0.0;
            } 

            //V_rho_b_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_b_gamma_bb_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_b_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_b_gamma_bb_[index] = 0.0;
            } else {
                v_rho_b_gamma_bb_[index] = 0.0;
            } 

            //V_gamma_aa_gamma_aa
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_aa_gamma_aa_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_aa_gamma_aa_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_aa_gamma_aa_[index] = 0.0;
            } else {
                v_gamma_aa_gamma_aa_[index] = 0.0;
            } 

            //V_gamma_aa_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_aa_gamma_ab_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_aa_gamma_ab_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_aa_gamma_ab_[index] = 0.0;
            } else {
                v_gamma_aa_gamma_ab_[index] = 0.0;
            } 

            //V_gamma_aa_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_aa_gamma_bb_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_aa_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_aa_gamma_bb_[index] = 0.0;
            } else {
                v_gamma_aa_gamma_bb_[index] = 0.0;
            } 

            //V_gamma_ab_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_ab_gamma_ab_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_ab_gamma_ab_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_ab_gamma_ab_[index] = 0.0;
            } else {
                v_gamma_ab_gamma_ab_[index] = 0.0;
            } 

            //V_gamma_ab_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_ab_gamma_bb_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_ab_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_ab_gamma_bb_[index] = 0.0;
            } else {
                v_gamma_ab_gamma_bb_[index] = 0.0;
            } 

            //V_gamma_bb_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_bb_gamma_bb_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_bb_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_bb_gamma_bb_[index] = 0.0;
            } else {
                v_gamma_bb_gamma_bb_[index] = 0.0;
            } 

        }                       
        if (is_meta_) {

            //V_rho_a_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_a_tau_a_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_a_tau_a_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_a_tau_a_[index] = 0.0;
            } else {
                v_rho_a_tau_a_[index] = 0.0;
            } 

            //V_rho_a_tau_b
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_a_tau_b_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_a_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_a_tau_b_[index] = 0.0;
            } else {
                v_rho_a_tau_b_[index] = 0.0;
            } 

            //V_rho_b_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_b_tau_a_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_b_tau_a_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_b_tau_a_[index] = 0.0;
            } else {
                v_rho_b_tau_a_[index] = 0.0;
            } 

            //V_rho_b_tau_b
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_b_tau_b_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_b_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_b_tau_b_[index] = 0.0;
            } else {
                v_rho_b_tau_b_[index] = 0.0;
            } 

            //V_tau_a_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_tau_a_tau_a_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_tau_a_tau_a_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_tau_a_tau_a_[index] = 0.0;
            } else {
                v_tau_a_tau_a_[index] = 0.0;
            } 

            //V_tau_a_tau_b
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_tau_a_tau_b_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_tau_a_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_tau_a_tau_b_[index] = 0.0;
            } else {
                v_tau_a_tau_b_[index] = 0.0;
            } 

            //V_tau_b_tau_b
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_tau_b_tau_b_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_tau_b_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_tau_b_tau_b_[index] = 0.0;
            } else {
                v_tau_b_tau_b_[index] = 0.0;
            } 

            if (is_gga_) {
            	
                //V_gamma_aa_tau_a
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } else {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } 
            	
                //V_gamma_aa_tau_b
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_aa_tau_b_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_aa_tau_b_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_aa_tau_b_[index] = 0.0;
                } else {
                    v_gamma_aa_tau_b_[index] = 0.0;
                } 
            	
                //V_gamma_ab_tau_a
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_ab_tau_a_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_ab_tau_a_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_ab_tau_a_[index] = 0.0;
                } else {
                    v_gamma_ab_tau_a_[index] = 0.0;
                } 
            	
                //V_gamma_ab_tau_b
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_ab_tau_b_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_ab_tau_b_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_ab_tau_b_[index] = 0.0;
                } else {
                    v_gamma_ab_tau_b_[index] = 0.0;
                } 
            	
                //V_gamma_bb_tau_a
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_bb_tau_a_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_bb_tau_a_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_bb_tau_a_[index] = 0.0;
                } else {
                    v_gamma_bb_tau_a_[index] = 0.0;
                } 
            	
                //V_gamma_bb_tau_b
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_bb_tau_b_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_bb_tau_b_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_bb_tau_b_[index] = 0.0;
                } else {
                    v_gamma_bb_tau_b_[index] = 0.0;
                } 
          
            }  
        }
    }
}

}}

