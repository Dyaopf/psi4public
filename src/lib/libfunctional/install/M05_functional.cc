/**********************************************************
* M05_functional.cc: definitions for M05_functional for KS-DFT
* Robert Parrish, robparrish@gmail.com
* Autogenerated by MATLAB Script on 06-Mar-2012
*
***********************************************************/
#include <libmints/mints.h>
#include <libfock/points.h>
#include "M05_functional.h"
#include <stdlib.h>
#include <cmath>
#include <string>
#include <string>
#include <vector>

using namespace psi;
using namespace boost;
using namespace std;

namespace psi { namespace functional {

M05_Functional::M05_Functional(int npoints, int deriv) : Functional(npoints, deriv)
{

    name_ = "M05";
    description_ = "M05 Meta-GGA Functional";
    citation_ = "Yan Zhao, Nathan E. Schultz, and D. G. Truhlar, J. Chem. Phys., 123, 161103, 2005";

    double X = 2.8000000000000003E-01;
    params_.push_back(make_pair("X",X));
    double C_k = 9.1155997446911918E+00;
    params_.push_back(make_pair("C_k",C_k));
    double k = 3.0936677262801355E+00;
    params_.push_back(make_pair("k",k));
    double e = -2.3873241463784300E-01;
    params_.push_back(make_pair("e",e));
    double kp = 8.0400000000000005E-01;
    params_.push_back(make_pair("kp",kp));
    double mu_ = 2.1951497276451709E-01;
    params_.push_back(make_pair("mu_",mu_));
    double a_1 = 8.1509999999999999E-02;
    params_.push_back(make_pair("a_1",a_1));
    double a_2 = -4.3956000000000001E-01;
    params_.push_back(make_pair("a_2",a_2));
    double a_3 = -3.2242199999999999E+00;
    params_.push_back(make_pair("a_3",a_3));
    double a_4 = 2.0181900000000002E+00;
    params_.push_back(make_pair("a_4",a_4));
    double a_5 = 8.7943099999999994E+00;
    params_.push_back(make_pair("a_5",a_5));
    double a_6 = -2.9499999999999999E-03;
    params_.push_back(make_pair("a_6",a_6));
    double a_7 = 9.8202900000000000E+00;
    params_.push_back(make_pair("a_7",a_7));
    double a_8 = -4.8235099999999997E+00;
    params_.push_back(make_pair("a_8",a_8));
    double a_9 = -4.8175739999999998E+01;
    params_.push_back(make_pair("a_9",a_9));
    double a_10 = 3.6480199999999998E+00;
    params_.push_back(make_pair("a_10",a_10));
    double a_11 = 3.4022480000000002E+01;
    params_.push_back(make_pair("a_11",a_11));
    double two_13 = 1.2599210498948732E+00;
    params_.push_back(make_pair("two_13",two_13));
    double d2fz0 = 1.7099210000000000E+00;
    params_.push_back(make_pair("d2fz0",d2fz0));
    double c = 6.2035049089939986E-01;
    params_.push_back(make_pair("c",c));
    double Aa = 1.6886999999999999E-02;
    params_.push_back(make_pair("Aa",Aa));
    double a1a = 1.1125000000000000E-01;
    params_.push_back(make_pair("a1a",a1a));
    double b1a = 1.0356999999999999E+01;
    params_.push_back(make_pair("b1a",b1a));
    double b2a = 3.6231000000000000E+00;
    params_.push_back(make_pair("b2a",b2a));
    double b3a = 8.8026000000000004E-01;
    params_.push_back(make_pair("b3a",b3a));
    double b4a = 4.9670999999999998E-01;
    params_.push_back(make_pair("b4a",b4a));
    double c0p = 3.1091000000000001E-02;
    params_.push_back(make_pair("c0p",c0p));
    double a1p = 2.1370000000000000E-01;
    params_.push_back(make_pair("a1p",a1p));
    double b1p = 7.5956999999999999E+00;
    params_.push_back(make_pair("b1p",b1p));
    double b2p = 3.5876000000000001E+00;
    params_.push_back(make_pair("b2p",b2p));
    double b3p = 1.6382000000000001E+00;
    params_.push_back(make_pair("b3p",b3p));
    double b4p = 4.9293999999999999E-01;
    params_.push_back(make_pair("b4p",b4p));
    double c0f = 1.5545000000000000E-02;
    params_.push_back(make_pair("c0f",c0f));
    double a1f = 2.0548000000000000E-01;
    params_.push_back(make_pair("a1f",a1f));
    double b1f = 1.4118900000000000E+01;
    params_.push_back(make_pair("b1f",b1f));
    double b2f = 6.1977000000000002E+00;
    params_.push_back(make_pair("b2f",b2f));
    double b3f = 3.3662000000000001E+00;
    params_.push_back(make_pair("b3f",b3f));
    double b4f = 6.2517000000000000E-01;
    params_.push_back(make_pair("b4f",b4f));
    double gcab = 3.0999999999999999E-03;
    params_.push_back(make_pair("gcab",gcab));
    double gcaa = 5.9999999999999998E-02;
    params_.push_back(make_pair("gcaa",gcaa));
    double ccab0 = 1.0000000000000000E+00;
    params_.push_back(make_pair("ccab0",ccab0));
    double ccab1 = 3.7856900000000002E+00;
    params_.push_back(make_pair("ccab1",ccab1));
    double ccab2 = -1.4152609999999999E+01;
    params_.push_back(make_pair("ccab2",ccab2));
    double ccab3 = -7.4658899999999999E+00;
    params_.push_back(make_pair("ccab3",ccab3));
    double ccab4 = 1.7944910000000000E+01;
    params_.push_back(make_pair("ccab4",ccab4));
    double ccaa0 = 1.0000000000000000E+00;
    params_.push_back(make_pair("ccaa0",ccaa0));
    double ccaa1 = 3.7734399999999999E+00;
    params_.push_back(make_pair("ccaa1",ccaa1));
    double ccaa2 = -2.6044630000000002E+01;
    params_.push_back(make_pair("ccaa2",ccaa2));
    double ccaa3 = 3.0699130000000000E+01;
    params_.push_back(make_pair("ccaa3",ccaa3));
    double ccaa4 = -9.2269500000000004E+00;
    params_.push_back(make_pair("ccaa4",ccaa4));

    is_gga_ = true;
    is_meta_ = true;

    //Required allocateion
    allocate();
}
M05_Functional::~M05_Functional()
{
}
void M05_Functional::computeRKSFunctional(boost::shared_ptr<RKSFunctions> prop)
{
    int ntrue = prop->npoints();

    const double* restrict rho_a;
    const double* restrict gamma_aa;
    const double* restrict tau_a;

    rho_a = prop->property_value("RHO_A")->pointer();
    if (is_gga_) {
        gamma_aa = prop->property_value("GAMMA_AA")->pointer();
    }
    if (is_meta_) {
        tau_a = prop->property_value("TAU_A")->pointer();
    }

    double X = params_[0].second;
    double C_k = params_[1].second;
    double k = params_[2].second;
    double e = params_[3].second;
    double kp = params_[4].second;
    double mu_ = params_[5].second;
    double a_1 = params_[6].second;
    double a_2 = params_[7].second;
    double a_3 = params_[8].second;
    double a_4 = params_[9].second;
    double a_5 = params_[10].second;
    double a_6 = params_[11].second;
    double a_7 = params_[12].second;
    double a_8 = params_[13].second;
    double a_9 = params_[14].second;
    double a_10 = params_[15].second;
    double a_11 = params_[16].second;
    double two_13 = params_[17].second;
    double d2fz0 = params_[18].second;
    double c = params_[19].second;
    double Aa = params_[20].second;
    double a1a = params_[21].second;
    double b1a = params_[22].second;
    double b2a = params_[23].second;
    double b3a = params_[24].second;
    double b4a = params_[25].second;
    double c0p = params_[26].second;
    double a1p = params_[27].second;
    double b1p = params_[28].second;
    double b2p = params_[29].second;
    double b3p = params_[30].second;
    double b4p = params_[31].second;
    double c0f = params_[32].second;
    double a1f = params_[33].second;
    double b1f = params_[34].second;
    double b2f = params_[35].second;
    double b3f = params_[36].second;
    double b4f = params_[37].second;
    double gcab = params_[38].second;
    double gcaa = params_[39].second;
    double ccab0 = params_[40].second;
    double ccab1 = params_[41].second;
    double ccab2 = params_[42].second;
    double ccab3 = params_[43].second;
    double ccab4 = params_[44].second;
    double ccaa0 = params_[45].second;
    double ccaa1 = params_[46].second;
    double ccaa2 = params_[47].second;
    double ccaa3 = params_[48].second;
    double ccaa4 = params_[49].second;

    //Functional
    for (int index = 0; index < ntrue; index++) {

        //Functional Value
        if (rho_a[index] > cutoff_) {
            double t75642 = 1.0/pow(rho_a[index],1.0/3.0);
            double t75643 = c*t75642;
            double t75644 = sqrt(t75643);
            double t75645 = pow(t75643,3.0/2.0);
            double t75646 = c*c;
            double t75647 = 1.0/pow(rho_a[index],2.0/3.0);
            double t75648 = 1.0/c0p;
            double t75649 = b1p*t75644;
            double t75650 = b3p*t75645;
            double t75651 = b4p*t75646*t75647;
            double t75652 = b2p*c*t75642;
            double t75653 = t75650+t75651+t75652+t75649;
            double t75654 = 1.0/t75653;
            double t75655 = t75654*t75648*(1.0/2.0);
            double t75656 = t75655+1.0;
            double t75657 = log(t75656);
            double t75658 = a1p*c*t75642;
            double t75659 = t75658+1.0;
            double t75660 = rho_a[index]*2.0;
            double t75661 = 1.0/pow(t75660,1.0/3.0);
            double t75662 = c*t75661;
            double t75663 = gamma_aa[index]*gamma_aa[index];
            double t75664 = gcab*gcab;
            double t75665 = t75663*t75663;
            double t75666 = t75664*t75664;
            double t75667 = 1.0/pow(rho_a[index],3.2E1/3.0);
            double t75668 = 1.0/pow(rho_a[index],8.0/3.0);
            double t75669 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]);
            double t75670 = 1.0/pow(rho_a[index],1.6E1/3.0);
            double t75671 = 1.0/pow(t75660,2.0/3.0);
            double t75672 = pow(rho_a[index],5.0/3.0);
            double t75673 = 1.0/tau_a[index];
            double t75674 = C_k*t75672*t75673;
            double t75675 = t75674-1.0;
            double t75676 = t75675*t75675;
            double t75677 = t75676*t75676;
            double t75678 = t75677*t75677;
            double t75679 = t75674+1.0;
            double t75680 = pow(2.0,1.0/3.0);
            double t75681 = t75680*2.0;
            double t75682 = t75681-2.0;
            double t75683 = two_13*2.0;
            double t75684 = t75683-2.0;
            double t75685 = 1.0/t75684;
            double t75686 = 1.0/c0f;
            double t75687 = b1f*t75644;
            double t75688 = b3f*t75645;
            double t75689 = b4f*t75646*t75647;
            double t75690 = b2f*c*t75642;
            double t75691 = t75690+t75687+t75688+t75689;
            double t75692 = 1.0/t75691;
            double t75693 = t75692*t75686*(1.0/2.0);
            double t75694 = t75693+1.0;
            double t75695 = log(t75694);
            double t75696 = a1f*c*t75642;
            double t75697 = t75696+1.0;
            double t75698 = c0f*t75695*t75697*2.0;
            double t75699 = c0p*t75657*t75659*2.0;
            double t75700 = gcaa*gcaa;
            double t75701 = t75700*t75700;
            functional_[index] = (rho_a[index]*(t75699+t75682*t75685*(t75698-c0p*t75657*t75659*2.0))*2.0-c0p* \
               rho_a[index]*log((t75648*(1.0/2.0))/(b1p*sqrt(t75662)+b3p*pow(t75662,3.0/2.0)+b2p*c*t75661+b4p*t75671* \
               t75646)+1.0)*(a1p*c*t75661+1.0)*4.0)*(ccab0+(ccab2*t75670*t75663*t75664)/(gamma_aa[index]*gcab*t75668* \
               2.0+t75670*t75663*t75664+1.0)+(ccab1*gamma_aa[index]*gcab*t75668)/(gamma_aa[index]*gcab*t75668+1.0) \
               +(ccab4*t75665*t75666*t75667)/(gamma_aa[index]*gcab*t75668*4.0+t75670*t75663*t75664*6.0+t75665*t75666* \
               t75667+gamma_aa[index]*gcab*t75663*t75664*t75669*4.0+1.0)+(ccab3*gamma_aa[index]*gcab*t75663*t75664* \
               t75669)/(gamma_aa[index]*gcab*t75668*3.0+t75670*t75663*t75664*3.0+gamma_aa[index]*gcab*t75663*t75664* \
               t75669+1.0))-rho_a[index]*( ( (tau_a[index]-1.0/1.0E20 > 0.0) ? 1.0*(t75673*(tau_a[index]*2.0-(gamma_aa[index]* \
               (1.0/4.0))/rho_a[index])*(1.0/2.0)-1.0) : 0.0 ) +1.0)*(t75699+t75682*t75685*(t75698-t75699))*(ccaa0+ \
               (ccaa2*t75700*t75670*t75663)/(gamma_aa[index]*gcaa*t75668*2.0+t75700*t75670*t75663+1.0)+(ccaa1*gamma_aa[index]* \
               gcaa*t75668)/(gamma_aa[index]*gcaa*t75668+1.0)+(ccaa4*t75701*t75665*t75667)/(gamma_aa[index]*gcaa* \
               t75668*4.0+t75700*t75670*t75663*6.0+t75701*t75665*t75667+gamma_aa[index]*gcaa*t75700*t75663*t75669* \
               4.0+1.0)+(ccaa3*gamma_aa[index]*gcaa*t75700*t75663*t75669)/(gamma_aa[index]*gcaa*t75668*3.0+t75700* \
               t75670*t75663*3.0+gamma_aa[index]*gcaa*t75700*t75663*t75669+1.0))*2.0-rho_a[index]*(X-1.0)*(kp-kp/ \
               ((gamma_aa[index]*1.0/(k*k)*mu_*1.0/(rho_a[index]*rho_a[index])*t75671*(1.0/4.0))/kp+1.0)+1.0)*((a_1* \
               t75675)/t75679+a_2*t75676*1.0/(t75679*t75679)+a_4*t75677*1.0/(t75679*t75679*t75679*t75679)+a_8*t75678* \
               1.0/(t75679*t75679*t75679*t75679*t75679*t75679*t75679*t75679)+a_10*t75676*t75678*1.0/pow(t75679,1.0E1) \
               +a_3*t75675*t75676*1.0/(t75679*t75679*t75679)+a_5*t75675*t75677*1.0/(t75679*t75679*t75679*t75679*t75679) \
               +a_6*t75676*t75677*1.0/(t75679*t75679*t75679*t75679*t75679*t75679)+a_9*t75675*t75678*1.0/(t75679*t75679* \
               t75679*t75679*t75679*t75679*t75679*t75679*t75679)+a_11*t75675*t75676*t75678*1.0/pow(t75679,1.1E1)+ \
               a_7*t75675*t75676*t75677*1.0/(t75679*t75679*t75679*t75679*t75679*t75679*t75679)+1.0)*2.0;
        } else {
            functional_[index] = 0.0;
        } 

    }
    //First Partials
    for (int index = 0; index < ntrue && deriv_ >= 1; index++) {

        //V_rho_a
        if (rho_a[index] > cutoff_) {
            double t75703 = gamma_aa[index]*gamma_aa[index];
            double t75704 = gcab*gcab;
            double t75705 = t75703*t75703;
            double t75706 = t75704*t75704;
            double t75707 = 1.0/pow(rho_a[index],3.2E1/3.0);
            double t75708 = 1.0/pow(rho_a[index],8.0/3.0);
            double t75709 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]);
            double t75710 = 1.0/pow(rho_a[index],1.6E1/3.0);
            double t75711 = rho_a[index]*2.0;
            double t75712 = 1.0/pow(t75711,1.0/3.0);
            double t75713 = c*t75712;
            double t75714 = sqrt(t75713);
            double t75715 = b1p*t75714;
            double t75716 = pow(t75713,3.0/2.0);
            double t75717 = b3p*t75716;
            double t75718 = b2p*c*t75712;
            double t75719 = c*c;
            double t75720 = 1.0/pow(t75711,2.0/3.0);
            double t75721 = b4p*t75720*t75719;
            double t75722 = t75721+t75715+t75717+t75718;
            double t75723 = 1.0/pow(t75711,4.0/3.0);
            double t75724 = 1.0/c0p;
            double t75725 = 1.0/t75722;
            double t75726 = t75724*t75725*(1.0/2.0);
            double t75727 = t75726+1.0;
            double t75728 = 1.0/pow(rho_a[index],1.0/3.0);
            double t75729 = c*t75728;
            double t75730 = sqrt(t75729);
            double t75731 = b1f*t75730;
            double t75732 = pow(t75729,3.0/2.0);
            double t75733 = b3f*t75732;
            double t75734 = 1.0/pow(rho_a[index],2.0/3.0);
            double t75735 = b4f*t75734*t75719;
            double t75736 = b2f*c*t75728;
            double t75737 = t75731+t75733+t75735+t75736;
            double t75738 = 1.0/pow(rho_a[index],4.0/3.0);
            double t75739 = b1p*t75730;
            double t75740 = b3p*t75732;
            double t75741 = b4p*t75734*t75719;
            double t75742 = b2p*c*t75728;
            double t75743 = t75740+t75741+t75742+t75739;
            double t75744 = 1.0/pow(rho_a[index],5.0/3.0);
            double t75745 = 1.0/sqrt(t75729);
            double t75746 = 1.0/c0f;
            double t75747 = 1.0/t75737;
            double t75748 = t75746*t75747*(1.0/2.0);
            double t75749 = t75748+1.0;
            double t75750 = 1.0/t75743;
            double t75751 = t75750*t75724*(1.0/2.0);
            double t75752 = t75751+1.0;
            double t75753 = a1p*c*t75728;
            double t75754 = t75753+1.0;
            double t75755 = 1.0/t75752;
            double t75756 = 1.0/(t75743*t75743);
            double t75757 = b4p*t75744*t75719*(2.0/3.0);
            double t75758 = b2p*c*t75738*(1.0/3.0);
            double t75759 = b1p*c*t75745*t75738*(1.0/6.0);
            double t75760 = b3p*c*t75730*t75738*(1.0/2.0);
            double t75761 = t75760+t75757+t75758+t75759;
            double t75762 = t75761*t75754*t75755*t75756;
            double t75763 = log(t75752);
            double t75764 = log(t75727);
            double t75765 = a1p*c*t75712;
            double t75766 = t75765+1.0;
            double t75767 = pow(2.0,1.0/3.0);
            double t75768 = t75767*2.0;
            double t75769 = t75768-2.0;
            double t75770 = two_13*2.0;
            double t75771 = t75770-2.0;
            double t75772 = 1.0/t75771;
            double t75773 = log(t75749);
            double t75774 = a1f*c*t75728;
            double t75775 = t75774+1.0;
            double t75776 = c0f*t75773*t75775*2.0;
            double t75778 = c0p*t75754*t75763*2.0;
            double t75777 = t75776-t75778;
            double t75779 = gamma_aa[index]*gcab*t75708*4.0;
            double t75780 = gamma_aa[index]*gcab*t75703*t75704*t75709*4.0;
            double t75781 = t75710*t75703*t75704*6.0;
            double t75782 = t75705*t75706*t75707;
            double t75783 = t75780+t75781+t75782+t75779+1.0;
            double t75784 = 1.0/t75783;
            double t75785 = gamma_aa[index]*gcab*t75708;
            double t75786 = t75785+1.0;
            double t75787 = 1.0/t75786;
            double t75788 = gamma_aa[index]*gcab*t75708*3.0;
            double t75789 = gamma_aa[index]*gcab*t75703*t75704*t75709;
            double t75790 = t75710*t75703*t75704*3.0;
            double t75791 = t75790+t75788+t75789+1.0;
            double t75792 = 1.0/t75791;
            double t75793 = gamma_aa[index]*gcab*t75708*2.0;
            double t75794 = t75710*t75703*t75704;
            double t75795 = t75793+t75794+1.0;
            double t75796 = 1.0/t75795;
            double t75797 = 1.0/pow(rho_a[index],1.9E1/3.0);
            double t75798 = 1.0/pow(rho_a[index],1.1E1/3.0);
            double t75799 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]*rho_a[index]);
            double t75800 = 1.0/pow(rho_a[index],3.5E1/3.0);
            double t75801 = pow(rho_a[index],5.0/3.0);
            double t75802 = 1.0/tau_a[index];
            double t75803 = C_k*t75801*t75802;
            double t75804 = t75803-1.0;
            double t75805 = t75804*t75804;
            double t75806 = t75805*t75805;
            double t75807 = t75806*t75806;
            double t75808 = t75803+1.0;
            double t75809 = 1.0/(k*k);
            double t75810 = 1.0/kp;
            double t75811 = 1.0/(rho_a[index]*rho_a[index]);
            double t75812 = gamma_aa[index]*mu_*t75720*t75810*t75811*t75809*(1.0/4.0);
            double t75813 = t75812+1.0;
            double t75814 = 1.0/t75813;
            double t75815 = kp-kp*t75814+1.0;
            double t75816 = 1.0/t75808;
            double t75817 = pow(rho_a[index],2.0/3.0);
            double t75818 = 1.0/(t75808*t75808);
            double t75819 = 1.0/pow(t75808,1.0E1);
            double t75820 = 1.0/pow(t75808,1.1E1);
            double t75821 = 1.0/(t75808*t75808*t75808);
            double t75822 = 1.0/(t75808*t75808*t75808*t75808);
            double t75823 = 1.0/(t75808*t75808*t75808*t75808*t75808);
            double t75824 = 1.0/(t75808*t75808*t75808*t75808*t75808*t75808);
            double t75825 = 1.0/(t75808*t75808*t75808*t75808*t75808*t75808*t75808);
            double t75826 = 1.0/(t75808*t75808*t75808*t75808*t75808*t75808*t75808*t75808);
            double t75827 = 1.0/(t75808*t75808*t75808*t75808*t75808*t75808*t75808*t75808*t75808);
            double t75828 = 1.0/pow(t75711,5.0/3.0);
            double t75829 = a_1*t75804*t75816;
            double t75830 = a_10*t75805*t75807*t75819;
            double t75831 = a_11*t75820*t75804*t75805*t75807;
            double t75832 = a_2*t75805*t75818;
            double t75833 = a_3*t75821*t75804*t75805;
            double t75834 = a_4*t75822*t75806;
            double t75835 = a_5*t75804*t75823*t75806;
            double t75836 = a_6*t75805*t75806*t75824;
            double t75837 = a_7*t75804*t75805*t75806*t75825;
            double t75838 = a_8*t75807*t75826;
            double t75839 = a_9*t75804*t75807*t75827;
            double t75840 = t75830+t75831+t75832+t75833+t75834+t75835+t75836+t75837+t75829+t75838+t75839+1.0;
            double t75841 = t75772*t75777*t75769;
            double t75842 = t75841+t75778;
            double t75843 = gcaa*gcaa;
            double t75844 = t75843*t75843;
            double t75845 = tau_a[index]-1.0/1.0E20;
            double t75846 = ( (t75845 > 0.0) ?  1.0 : 0.0 ) ;
            double t75847 = tau_a[index]*2.0;
            double t75848 = 1.0/rho_a[index];
            double t75872 = gamma_aa[index]*t75848*(1.0/4.0);
            double t75849 = -t75872+t75847;
            double t75850 = t75802*t75849*(1.0/2.0);
            double t75851 = t75850-1.0;
            double t75852 = t75851*t75846;
            double t75853 = t75852+1.0;
            double t75854 = gamma_aa[index]*gcaa*t75708*4.0;
            double t75855 = gamma_aa[index]*gcaa*t75703*t75843*t75709*4.0;
            double t75856 = t75710*t75703*t75843*6.0;
            double t75857 = t75705*t75707*t75844;
            double t75858 = t75854+t75855+t75856+t75857+1.0;
            double t75859 = 1.0/t75858;
            double t75860 = gamma_aa[index]*gcaa*t75708;
            double t75861 = t75860+1.0;
            double t75862 = 1.0/t75861;
            double t75863 = gamma_aa[index]*gcaa*t75708*3.0;
            double t75864 = gamma_aa[index]*gcaa*t75703*t75843*t75709;
            double t75865 = t75710*t75703*t75843*3.0;
            double t75866 = t75863+t75864+t75865+1.0;
            double t75867 = 1.0/t75866;
            double t75868 = gamma_aa[index]*gcaa*t75708*2.0;
            double t75869 = t75710*t75703*t75843;
            double t75870 = t75868+t75869+1.0;
            double t75871 = 1.0/t75870;
            double t75873 = 1.0/t75749;
            double t75874 = 1.0/(t75737*t75737);
            double t75875 = b4f*t75744*t75719*(2.0/3.0);
            double t75876 = b2f*c*t75738*(1.0/3.0);
            double t75877 = b1f*c*t75745*t75738*(1.0/6.0);
            double t75878 = b3f*c*t75730*t75738*(1.0/2.0);
            double t75879 = t75875+t75876+t75877+t75878;
            double t75880 = a1f*c*c0f*t75773*t75738*(2.0/3.0);
            double t75881 = a1p*c*c0p*t75763*t75738*(2.0/3.0);
            double t75882 = ccaa4*t75705*t75707*t75844*t75859;
            double t75883 = ccaa1*gamma_aa[index]*gcaa*t75708*t75862;
            double t75884 = ccaa3*gamma_aa[index]*gcaa*t75703*t75843*t75709*t75867;
            double t75885 = ccaa2*t75710*t75703*t75843*t75871;
            double t75886 = ccaa0+t75882+t75883+t75884+t75885;
            v_rho_a_[index] = -(rho_a[index]*t75842*2.0-c0p*rho_a[index]*t75764*t75766*4.0)*(ccab1*gamma_aa[index]* \
               gcab*t75787*t75798*(4.0/3.0)+ccab4*t75800*t75705*t75706*t75784*(1.6E1/3.0)+ccab2*t75703*t75704*t75796* \
               t75797*(8.0/3.0)-ccab1*t75703*t75704*1.0/(t75786*t75786)*t75797*(4.0/3.0)-ccab2*t75710*t75703*t75704* \
               1.0/(t75795*t75795)*(gamma_aa[index]*gcab*t75798*(8.0/3.0)+t75703*t75704*t75797*(8.0/3.0))-ccab4*t75705* \
               t75706*t75707*1.0/(t75783*t75783)*(gamma_aa[index]*gcab*t75798*(1.6E1/3.0)+t75800*t75705*t75706*(1.6E1/ \
               3.0)+t75703*t75704*t75797*1.6E1+gamma_aa[index]*gcab*t75703*t75704*t75799*1.6E1)+ccab3*gamma_aa[index]* \
               gcab*t75703*t75704*t75792*t75799*4.0-ccab3*gamma_aa[index]*gcab*t75703*t75704*t75709*1.0/(t75791*t75791) \
               *(gamma_aa[index]*gcab*t75798*4.0+t75703*t75704*t75797*8.0+gamma_aa[index]*gcab*t75703*t75704*t75799* \
               4.0))-(X-1.0)*(t75840*t75815+rho_a[index]*t75815*(C_k*a_1*t75802*t75816*t75817*(5.0/3.0)-C_k*a_1*t75802* \
               t75804*t75817*t75818*(5.0/3.0)-C_k*a_2*t75802*t75821*t75805*t75817*(1.0E1/3.0)+C_k*a_2*t75802*t75804* \
               t75817*t75818*(1.0E1/3.0)+C_k*a_3*t75802*t75821*t75805*t75817*5.0-C_k*a_4*t75802*t75823*t75806*t75817* \
               (2.0E1/3.0)+C_k*a_5*t75802*t75823*t75806*t75817*(2.5E1/3.0)-C_k*a_8*t75802*t75807*t75817*t75827*(4.0E1/ \
               3.0)+C_k*a_9*t75802*t75807*t75817*t75827*1.5E1-C_k*a_10*t75802*t75820*t75805*t75807*t75817*(5.0E1/ \
               3.0)+C_k*a_11*t75802*t75820*t75805*t75807*t75817*(5.5E1/3.0)+C_k*a_10*t75802*t75804*t75807*t75817* \
               t75819*(5.0E1/3.0)-C_k*a_3*t75802*t75804*t75822*t75805*t75817*5.0+C_k*a_4*t75802*t75804*t75822*t75805* \
               t75817*(2.0E1/3.0)-C_k*a_5*t75802*t75804*t75806*t75824*t75817*(2.5E1/3.0)+C_k*a_6*t75802*t75804*t75806* \
               t75824*t75817*1.0E1-C_k*a_6*t75802*t75805*t75806*t75825*t75817*1.0E1+C_k*a_7*t75802*t75805*t75806* \
               t75825*t75817*(3.5E1/3.0)-C_k*a_9*t75802*t75804*t75807*t75817*t75819*1.5E1-C_k*a_11*t75802*t75804* \
               t75805*t75807*1.0/pow(t75808,1.2E1)*t75817*(5.5E1/3.0)-C_k*a_7*t75802*t75804*t75805*t75806*t75817* \
               t75826*(3.5E1/3.0)+C_k*a_8*t75802*t75804*t75805*t75806*t75817*t75826*(4.0E1/3.0))-kp*rho_a[index]* \
               1.0/(t75813*t75813)*t75840*(gamma_aa[index]*mu_*t75810*t75811*t75809*t75828*(1.0/3.0)+gamma_aa[index]* \
               mu_*1.0/(rho_a[index]*rho_a[index]*rho_a[index])*t75720*t75810*t75809*(1.0/2.0)))-(rho_a[index]*((1.0/ \
               (t75722*t75722)*t75766*(b2p*c*t75723*(1.0/3.0)+b4p*t75719*t75828*(2.0/3.0)+b3p*c*t75714*t75723*(1.0/ \
               2.0)+b1p*c*1.0/sqrt(t75713)*t75723*(1.0/6.0)))/t75727-a1p*c*c0p*t75723*t75764*(2.0/3.0))*2.0+rho_a[index]* \
               (-t75762+t75881+t75772*t75769*(t75762+t75880-t75873*t75775*t75874*t75879-a1p*c*c0p*t75763*t75738*(2.0/ \
               3.0)))-c0p*t75754*t75763*2.0+c0p*t75764*t75766*2.0-t75772*t75777*t75769)*(ccab0+ccab1*gamma_aa[index]* \
               gcab*t75708*t75787+ccab2*t75710*t75703*t75704*t75796+ccab4*t75705*t75706*t75707*t75784+ccab3*gamma_aa[index]* \
               gcab*t75703*t75704*t75709*t75792)-t75842*t75853*t75886+rho_a[index]*t75842*t75853*(ccaa1*gamma_aa[index]* \
               gcaa*t75862*t75798*(8.0/3.0)+ccaa4*t75800*t75705*t75844*t75859*(3.2E1/3.0)+ccaa2*t75703*t75843*t75871* \
               t75797*(1.6E1/3.0)-ccaa1*t75703*t75843*1.0/(t75861*t75861)*t75797*(8.0/3.0)-ccaa2*t75710*t75703*t75843* \
               1.0/(t75870*t75870)*(gamma_aa[index]*gcaa*t75798*(1.6E1/3.0)+t75703*t75843*t75797*(1.6E1/3.0))-ccaa4* \
               t75705*t75707*t75844*1.0/(t75858*t75858)*(gamma_aa[index]*gcaa*t75798*(3.2E1/3.0)+t75800*t75705*t75844* \
               (3.2E1/3.0)+t75703*t75843*t75797*3.2E1+gamma_aa[index]*gcaa*t75703*t75843*t75799*3.2E1)+ccaa3*gamma_aa[index]* \
               gcaa*t75703*t75843*t75867*t75799*8.0-ccaa3*gamma_aa[index]*gcaa*t75703*t75843*t75709*1.0/(t75866*t75866) \
               *(gamma_aa[index]*gcaa*t75798*8.0+t75703*t75843*t75797*1.6E1+gamma_aa[index]*gcaa*t75703*t75843*t75799* \
               8.0))+rho_a[index]*t75853*t75886*(-t75762+t75881+t75772*t75769*(t75762+t75880-t75881-t75873*t75775* \
               t75874*t75879))-gamma_aa[index]*t75802*t75842*t75846*t75848*t75886*(1.0/8.0);
        } else {
            v_rho_a_[index] = 0.0;
        } 

        if (is_gga_) {

            if (rho_a[index] > cutoff_) {
                double t75888 = 1.0/pow(rho_a[index],1.0/3.0);
                double t75889 = c*t75888;
                double t75890 = sqrt(t75889);
                double t75891 = pow(t75889,3.0/2.0);
                double t75892 = c*c;
                double t75893 = 1.0/pow(rho_a[index],2.0/3.0);
                double t75894 = 1.0/c0p;
                double t75895 = b1p*t75890;
                double t75896 = b3p*t75891;
                double t75897 = b4p*t75892*t75893;
                double t75898 = b2p*c*t75888;
                double t75899 = t75895+t75896+t75897+t75898;
                double t75900 = 1.0/t75899;
                double t75901 = t75900*t75894*(1.0/2.0);
                double t75902 = t75901+1.0;
                double t75903 = log(t75902);
                double t75904 = a1p*c*t75888;
                double t75905 = t75904+1.0;
                double t75906 = rho_a[index]*2.0;
                double t75907 = 1.0/pow(t75906,1.0/3.0);
                double t75908 = c*t75907;
                double t75909 = 1.0/pow(rho_a[index],8.0/3.0);
                double t75910 = gamma_aa[index]*gamma_aa[index];
                double t75911 = gcab*gcab;
                double t75912 = t75911*t75911;
                double t75913 = 1.0/pow(rho_a[index],3.2E1/3.0);
                double t75914 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t75915 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t75916 = gamma_aa[index]*gcab*t75909;
                double t75917 = t75916+1.0;
                double t75918 = gamma_aa[index]*gcab*t75909*3.0;
                double t75919 = gamma_aa[index]*gcab*t75910*t75911*t75915;
                double t75920 = t75910*t75911*t75914*3.0;
                double t75921 = t75920+t75918+t75919+1.0;
                double t75922 = t75910*t75910;
                double t75923 = gamma_aa[index]*gcab*t75909*4.0;
                double t75924 = gamma_aa[index]*gcab*t75910*t75911*t75915*4.0;
                double t75925 = t75910*t75911*t75914*6.0;
                double t75926 = t75912*t75913*t75922;
                double t75927 = t75923+t75924+t75925+t75926+1.0;
                double t75928 = gamma_aa[index]*gcab*t75909*2.0;
                double t75929 = t75910*t75911*t75914;
                double t75930 = t75928+t75929+1.0;
                double t75931 = pow(2.0,1.0/3.0);
                double t75932 = t75931*2.0;
                double t75933 = t75932-2.0;
                double t75934 = two_13*2.0;
                double t75935 = t75934-2.0;
                double t75936 = 1.0/t75935;
                double t75937 = 1.0/c0f;
                double t75938 = b1f*t75890;
                double t75939 = b3f*t75891;
                double t75940 = b4f*t75892*t75893;
                double t75941 = b2f*c*t75888;
                double t75942 = t75940+t75941+t75938+t75939;
                double t75943 = 1.0/t75942;
                double t75944 = t75943*t75937*(1.0/2.0);
                double t75945 = t75944+1.0;
                double t75946 = log(t75945);
                double t75947 = a1f*c*t75888;
                double t75948 = t75947+1.0;
                double t75949 = c0f*t75946*t75948*2.0;
                double t75950 = c0p*t75903*t75905*2.0;
                double t75951 = gcaa*gcaa;
                double t75952 = t75951*t75951;
                double t75953 = t75950-t75949;
                double t75954 = t75950-t75933*t75953*t75936;
                double t75955 = tau_a[index]-1.0/1.0E20;
                double t75956 = ( (t75955 > 0.0) ?  1.0 : 0.0 ) ;
                double t75957 = 1.0/tau_a[index];
                double t75958 = gamma_aa[index]*gcaa*t75909;
                double t75959 = t75958+1.0;
                double t75960 = 1.0/t75959;
                double t75961 = gamma_aa[index]*gcaa*t75909*4.0;
                double t75962 = gamma_aa[index]*gcaa*t75910*t75915*t75951*4.0;
                double t75963 = t75910*t75914*t75951*6.0;
                double t75964 = t75913*t75922*t75952;
                double t75965 = t75961+t75962+t75963+t75964+1.0;
                double t75966 = 1.0/t75965;
                double t75967 = gamma_aa[index]*gcaa*t75909*2.0;
                double t75968 = t75910*t75914*t75951;
                double t75969 = t75967+t75968+1.0;
                double t75970 = 1.0/t75969;
                double t75971 = gamma_aa[index]*gcaa*t75909*3.0;
                double t75972 = gamma_aa[index]*gcaa*t75910*t75915*t75951;
                double t75973 = t75910*t75914*t75951*3.0;
                double t75974 = t75971+t75972+t75973+1.0;
                double t75975 = 1.0/t75974;
                double t75976 = 1.0/rho_a[index];
                double t75977 = 1.0/(k*k);
                double t75978 = 1.0/pow(t75906,2.0/3.0);
                double t75979 = pow(rho_a[index],5.0/3.0);
                double t75980 = C_k*t75957*t75979;
                double t75981 = t75980-1.0;
                double t75982 = t75981*t75981;
                double t75983 = t75982*t75982;
                double t75984 = t75983*t75983;
                double t75985 = t75980+1.0;
                v_gamma_aa_[index] = (rho_a[index]*(t75950+t75933*t75936*(t75949-c0p*t75903*t75905*2.0))*2.0-c0p* \
                   rho_a[index]*log((t75894*(1.0/2.0))/(b1p*sqrt(t75908)+b3p*pow(t75908,3.0/2.0)+b2p*c*t75907+b4p*t75892* \
                   t75978)+1.0)*(a1p*c*t75907+1.0)*4.0)*((ccab1*gcab*t75909*(1.0/2.0))/t75917+(ccab2*gamma_aa[index]* \
                   t75911*t75914)/t75930-ccab1*gamma_aa[index]*t75911*t75914*1.0/(t75917*t75917)*(1.0/2.0)-ccab2*t75910* \
                   t75911*1.0/(t75930*t75930)*t75914*(gcab*t75909+gamma_aa[index]*t75911*t75914)+(ccab4*gamma_aa[index]* \
                   t75910*t75912*t75913*2.0)/t75927+(ccab3*gcab*t75910*t75911*t75915*(3.0/2.0))/t75921-ccab4*t75912*t75913* \
                   t75922*1.0/(t75927*t75927)*(gcab*t75909*2.0+gamma_aa[index]*t75911*t75914*6.0+gamma_aa[index]*t75910* \
                   t75912*t75913*2.0+gcab*t75910*t75911*t75915*6.0)-ccab3*gamma_aa[index]*gcab*t75910*t75911*1.0/(t75921* \
                   t75921)*t75915*(gcab*t75909*(3.0/2.0)+gamma_aa[index]*t75911*t75914*3.0+gcab*t75910*t75911*t75915* \
                   (3.0/2.0)))*2.0+t75954*t75956*t75957*(ccaa0+ccaa1*gamma_aa[index]*gcaa*t75960*t75909+ccaa2*t75910* \
                   t75914*t75951*t75970+ccaa4*t75913*t75922*t75952*t75966+ccaa3*gamma_aa[index]*gcaa*t75910*t75915*t75951* \
                   t75975)*(1.0/4.0)-rho_a[index]*t75954*(t75956*(t75957*(tau_a[index]*2.0-gamma_aa[index]*t75976*(1.0/ \
                   4.0))*(1.0/2.0)-1.0)+1.0)*(ccaa1*gcaa*t75960*t75909+ccaa2*gamma_aa[index]*t75914*t75951*t75970*2.0- \
                   ccaa1*gamma_aa[index]*t75914*t75951*1.0/(t75959*t75959)-ccaa2*t75910*t75914*t75951*1.0/(t75969*t75969) \
                   *(gcaa*t75909*2.0+gamma_aa[index]*t75914*t75951*2.0)-ccaa4*t75913*t75922*t75952*1.0/(t75965*t75965) \
                   *(gcaa*t75909*4.0+gamma_aa[index]*t75914*t75951*1.2E1+gamma_aa[index]*t75910*t75913*t75952*4.0+gcaa* \
                   t75910*t75915*t75951*1.2E1)+ccaa4*gamma_aa[index]*t75910*t75913*t75952*t75966*4.0+ccaa3*gcaa*t75910* \
                   t75915*t75951*t75975*3.0-ccaa3*gamma_aa[index]*gcaa*t75910*t75915*t75951*1.0/(t75974*t75974)*(gcaa* \
                   t75909*3.0+gamma_aa[index]*t75914*t75951*6.0+gcaa*t75910*t75915*t75951*3.0))*2.0-mu_*t75976*t75977* \
                   t75978*1.0/pow((gamma_aa[index]*mu_*1.0/(rho_a[index]*rho_a[index])*t75977*t75978*(1.0/4.0))/kp+1.0,2.0) \
                   *(X-1.0)*((a_1*t75981)/t75985+a_2*t75982*1.0/(t75985*t75985)+a_4*t75983*1.0/(t75985*t75985*t75985* \
                   t75985)+a_8*t75984*1.0/(t75985*t75985*t75985*t75985*t75985*t75985*t75985*t75985)+a_10*t75982*t75984* \
                   1.0/pow(t75985,1.0E1)+a_3*t75981*t75982*1.0/(t75985*t75985*t75985)+a_5*t75981*t75983*1.0/(t75985*t75985* \
                   t75985*t75985*t75985)+a_6*t75982*t75983*1.0/(t75985*t75985*t75985*t75985*t75985*t75985)+a_9*t75981* \
                   t75984*1.0/(t75985*t75985*t75985*t75985*t75985*t75985*t75985*t75985*t75985)+a_11*t75981*t75982*t75984* \
                   1.0/pow(t75985,1.1E1)+a_7*t75981*t75982*t75983*1.0/(t75985*t75985*t75985*t75985*t75985*t75985*t75985) \
                   +1.0)*(1.0/2.0);
            } else {
                v_gamma_aa_[index] = 0.0;
            } 

        }
        if (is_meta_) {

            //V_tau_a
            if (rho_a[index] > cutoff_) {
                double t75987 = pow(rho_a[index],5.0/3.0);
                double t75988 = 1.0/(tau_a[index]*tau_a[index]);
                double t75989 = 1.0/tau_a[index];
                double t75990 = C_k*t75987*t75989;
                double t75991 = t75990+1.0;
                double t75992 = t75990-1.0;
                double t75993 = 1.0/(t75991*t75991);
                double t75994 = t75992*t75992;
                double t75995 = t75994*t75994;
                double t75996 = t75995*t75995;
                double t75997 = 1.0/pow(t75991,1.1E1);
                double t75998 = 1.0/(t75991*t75991*t75991);
                double t75999 = 1.0/(t75991*t75991*t75991*t75991);
                double t76000 = 1.0/(t75991*t75991*t75991*t75991*t75991);
                double t76001 = 1.0/(t75991*t75991*t75991*t75991*t75991*t75991);
                double t76002 = 1.0/(t75991*t75991*t75991*t75991*t75991*t75991*t75991);
                double t76003 = 1.0/(t75991*t75991*t75991*t75991*t75991*t75991*t75991*t75991);
                double t76004 = 1.0/(t75991*t75991*t75991*t75991*t75991*t75991*t75991*t75991*t75991);
                double t76005 = 1.0/pow(t75991,1.0E1);
                double t76006 = 1.0/pow(rho_a[index],1.0/3.0);
                double t76007 = c*t76006;
                double t76008 = sqrt(t76007);
                double t76009 = pow(t76007,3.0/2.0);
                double t76010 = c*c;
                double t76011 = 1.0/pow(rho_a[index],2.0/3.0);
                double t76012 = 1.0/c0p;
                double t76013 = b1p*t76008;
                double t76014 = b3p*t76009;
                double t76015 = b4p*t76010*t76011;
                double t76016 = b2p*c*t76006;
                double t76017 = t76013+t76014+t76015+t76016;
                double t76018 = 1.0/t76017;
                double t76019 = t76012*t76018*(1.0/2.0);
                double t76020 = t76019+1.0;
                double t76021 = log(t76020);
                double t76022 = a1p*c*t76006;
                double t76023 = t76022+1.0;
                double t76024 = tau_a[index]-1.0/1.0E20;
                double t76025 = tau_a[index]*2.0;
                double t76026 = 1.0/rho_a[index];
                double t76027 = t76025-gamma_aa[index]*t76026*(1.0/4.0);
                double t76028 = gamma_aa[index]*gamma_aa[index];
                double t76029 = gcaa*gcaa;
                double t76030 = t76028*t76028;
                double t76031 = t76029*t76029;
                double t76032 = 1.0/pow(rho_a[index],3.2E1/3.0);
                double t76033 = 1.0/pow(rho_a[index],8.0/3.0);
                double t76034 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t76035 = 1.0/pow(rho_a[index],1.6E1/3.0);
                v_tau_a_[index] = -rho_a[index]*(((pow(2.0,1.0/3.0)*2.0-2.0)*(c0f*log((1.0/2.0)/(c0f*(b1f*t76008+ \
                   b3f*t76009+b2f*c*t76006+b4f*t76010*t76011))+1.0)*(a1f*c*t76006+1.0)*2.0-c0p*t76021*t76023*2.0))/(two_13* \
                   2.0-2.0)+c0p*t76021*t76023*2.0)*( ( (t76024 > 0.0) ? 1.0*(t75989-t75988*t76027*(1.0/2.0)) : 0.0 )  \
                   + 0.0 )*(ccaa0+(ccaa2*t76035*t76028*t76029)/(gamma_aa[index]*gcaa*t76033*2.0+t76035*t76028*t76029+ \
                   1.0)+(ccaa1*gamma_aa[index]*gcaa*t76033)/(gamma_aa[index]*gcaa*t76033+1.0)+(ccaa4*t76030*t76031*t76032) \
                   /(gamma_aa[index]*gcaa*t76033*4.0+t76030*t76031*t76032+t76035*t76028*t76029*6.0+gamma_aa[index]*gcaa* \
                   t76034*t76028*t76029*4.0+1.0)+(ccaa3*gamma_aa[index]*gcaa*t76034*t76028*t76029)/(gamma_aa[index]*gcaa* \
                   t76033*3.0+t76035*t76028*t76029*3.0+gamma_aa[index]*gcaa*t76034*t76028*t76029+1.0))+rho_a[index]*(X- \
                   1.0)*(kp-kp/((gamma_aa[index]*1.0/(k*k)*mu_*1.0/(rho_a[index]*rho_a[index])*1.0/pow(rho_a[index]*2.0,2.0/ \
                   3.0)*(1.0/4.0))/kp+1.0)+1.0)*((C_k*a_1*t75987*t75988)/t75991-C_k*a_1*t75992*t75993*t75987*t75988+C_k* \
                   a_2*t75992*t75993*t75987*t75988*2.0-C_k*a_2*t75994*t75987*t75988*t75998*2.0+C_k*a_3*t75994*t75987* \
                   t75988*t75998*3.0-C_k*a_4*t75995*t75987*t75988*t76000*4.0+C_k*a_5*t75995*t75987*t75988*t76000*5.0- \
                   C_k*a_8*t75987*t75996*t75988*t76004*8.0+C_k*a_9*t75987*t75996*t75988*t76004*9.0-C_k*a_10*t75994*t75987* \
                   t75996*t75988*t75997*1.0E1+C_k*a_11*t75994*t75987*t75996*t75988*t75997*1.1E1+C_k*a_10*t75992*t75987* \
                   t75996*t75988*t76005*1.0E1-C_k*a_3*t75992*t75994*t75987*t75988*t75999*3.0+C_k*a_4*t75992*t75994*t75987* \
                   t75988*t75999*4.0-C_k*a_5*t75992*t75995*t75987*t75988*t76001*5.0+C_k*a_6*t75992*t75995*t75987*t75988* \
                   t76001*6.0-C_k*a_6*t75994*t75995*t75987*t75988*t76002*6.0+C_k*a_7*t75994*t75995*t75987*t75988*t76002* \
                   7.0-C_k*a_9*t75992*t75987*t75996*t75988*t76005*9.0-C_k*a_11*1.0/pow(t75991,1.2E1)*t75992*t75994*t75987* \
                   t75996*t75988*1.1E1-C_k*a_7*t75992*t75994*t75995*t75987*t75988*t76003*7.0+C_k*a_8*t75992*t75994*t75995* \
                   t75987*t75988*t76003*8.0);
            } else {
                v_tau_a_[index] = 0.0;
            } 

        }
    }
    //Second Partials
    for (int index = 0; index < ntrue && deriv_ >= 2; index++) {

        //V_rho_a_rho_a
        if (rho_a[index] > cutoff_) {
            double t76037 = rho_a[index]*2.0;
            double t76038 = 1.0/pow(t76037,1.0/3.0);
            double t76039 = c*t76038;
            double t76040 = sqrt(t76039);
            double t76041 = b1p*t76040;
            double t76042 = pow(t76039,3.0/2.0);
            double t76043 = b3p*t76042;
            double t76044 = b2p*c*t76038;
            double t76045 = c*c;
            double t76046 = 1.0/pow(t76037,2.0/3.0);
            double t76047 = b4p*t76045*t76046;
            double t76048 = t76041+t76043+t76044+t76047;
            double t76049 = 1.0/pow(t76037,8.0/3.0);
            double t76050 = 1.0/pow(t76037,7.0/3.0);
            double t76051 = 1.0/sqrt(t76039);
            double t76052 = 1.0/c0p;
            double t76053 = 1.0/t76048;
            double t76054 = t76052*t76053*(1.0/2.0);
            double t76055 = t76054+1.0;
            double t76056 = 1.0/t76055;
            double t76057 = a1p*c*t76038;
            double t76058 = t76057+1.0;
            double t76059 = 1.0/pow(t76037,4.0/3.0);
            double t76061 = b2p*c*t76059*(1.0/3.0);
            double t76062 = 1.0/pow(t76037,5.0/3.0);
            double t76063 = b4p*t76062*t76045*(2.0/3.0);
            double t76064 = b1p*c*t76051*t76059*(1.0/6.0);
            double t76065 = b3p*c*t76040*t76059*(1.0/2.0);
            double t76060 = t76061+t76063+t76064+t76065;
            double t76066 = t76060*t76060;
            double t76067 = 1.0/(t76048*t76048);
            double t76068 = log(t76055);
            double t76069 = gamma_aa[index]*gamma_aa[index];
            double t76070 = gcab*gcab;
            double t76071 = t76069*t76069;
            double t76072 = t76070*t76070;
            double t76073 = 1.0/pow(rho_a[index],3.2E1/3.0);
            double t76074 = 1.0/pow(rho_a[index],8.0/3.0);
            double t76075 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]);
            double t76076 = 1.0/pow(rho_a[index],1.6E1/3.0);
            double t76077 = two_13*2.0;
            double t76078 = t76077-2.0;
            double t76079 = 1.0/t76078;
            double t76080 = 1.0/pow(rho_a[index],1.0/3.0);
            double t76081 = c*t76080;
            double t76082 = sqrt(t76081);
            double t76083 = pow(t76081,3.0/2.0);
            double t76084 = 1.0/pow(rho_a[index],2.0/3.0);
            double t76085 = b1p*t76082;
            double t76086 = b3p*t76083;
            double t76087 = b4p*t76045*t76084;
            double t76088 = b2p*c*t76080;
            double t76089 = t76085+t76086+t76087+t76088;
            double t76090 = 1.0/t76089;
            double t76091 = t76052*t76090*(1.0/2.0);
            double t76092 = t76091+1.0;
            double t76093 = log(t76092);
            double t76094 = a1p*c*t76080;
            double t76095 = t76094+1.0;
            double t76096 = gamma_aa[index]*gcab*t76074*4.0;
            double t76097 = gamma_aa[index]*gcab*t76070*t76075*t76069*4.0;
            double t76098 = t76070*t76076*t76069*6.0;
            double t76099 = t76071*t76072*t76073;
            double t76100 = t76096+t76097+t76098+t76099+1.0;
            double t76101 = 1.0/t76100;
            double t76102 = gamma_aa[index]*gcab*t76074;
            double t76103 = t76102+1.0;
            double t76104 = 1.0/t76103;
            double t76105 = gamma_aa[index]*gcab*t76074*3.0;
            double t76106 = gamma_aa[index]*gcab*t76070*t76075*t76069;
            double t76107 = t76070*t76076*t76069*3.0;
            double t76108 = t76105+t76106+t76107+1.0;
            double t76109 = 1.0/t76108;
            double t76110 = gamma_aa[index]*gcab*t76074*2.0;
            double t76111 = t76070*t76076*t76069;
            double t76112 = t76110+t76111+1.0;
            double t76113 = 1.0/t76112;
            double t76114 = 1.0/pow(rho_a[index],1.0E1);
            double t76115 = 1.0/pow(rho_a[index],2.2E1/3.0);
            double t76117 = 1.0/pow(rho_a[index],1.1E1/3.0);
            double t76118 = 1.0/pow(rho_a[index],1.9E1/3.0);
            double t76120 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]*rho_a[index]);
            double t76127 = 1.0/pow(rho_a[index],3.5E1/3.0);
            double t76128 = gamma_aa[index]*gcab*t76117*(1.6E1/3.0);
            double t76129 = gamma_aa[index]*gcab*t76120*t76070*t76069*1.6E1;
            double t76130 = t76070*t76118*t76069*1.6E1;
            double t76131 = t76071*t76072*t76127*(1.6E1/3.0);
            double t76116 = t76130+t76131+t76128+t76129;
            double t76134 = gamma_aa[index]*gcab*t76117*(8.0/3.0);
            double t76135 = t76070*t76118*t76069*(8.0/3.0);
            double t76119 = t76134+t76135;
            double t76121 = 1.0/pow(rho_a[index],1.4E1/3.0);
            double t76122 = 1.0/(t76108*t76108);
            double t76123 = gamma_aa[index]*gcab*t76117*4.0;
            double t76124 = gamma_aa[index]*gcab*t76120*t76070*t76069*4.0;
            double t76125 = t76070*t76118*t76069*8.0;
            double t76126 = t76123+t76124+t76125;
            double t76132 = 1.0/pow(rho_a[index],3.8E1/3.0);
            double t76133 = 1.0/(t76100*t76100);
            double t76136 = 1.0/(t76112*t76112);
            double t76137 = pow(2.0,1.0/3.0);
            double t76138 = t76137*2.0;
            double t76139 = t76138-2.0;
            double t76140 = a1f*c*t76080;
            double t76141 = t76140+1.0;
            double t76142 = 1.0/c0f;
            double t76143 = b1f*t76082;
            double t76144 = b3f*t76083;
            double t76145 = b4f*t76045*t76084;
            double t76146 = b2f*c*t76080;
            double t76147 = t76143+t76144+t76145+t76146;
            double t76148 = 1.0/t76147;
            double t76149 = t76142*t76148*(1.0/2.0);
            double t76150 = t76149+1.0;
            double t76151 = 1.0/pow(rho_a[index],4.0/3.0);
            double t76152 = 1.0/pow(rho_a[index],5.0/3.0);
            double t76153 = 1.0/sqrt(t76081);
            double t76154 = log(t76150);
            double t76155 = 1.0/t76092;
            double t76156 = 1.0/(t76089*t76089);
            double t76157 = b4p*t76152*t76045*(2.0/3.0);
            double t76158 = b2p*c*t76151*(1.0/3.0);
            double t76159 = b1p*c*t76151*t76153*(1.0/6.0);
            double t76160 = b3p*c*t76151*t76082*(1.0/2.0);
            double t76161 = t76160+t76157+t76158+t76159;
            double t76162 = t76161*t76155*t76156*t76095;
            double t76163 = c0f*t76141*t76154*2.0;
            double t76164 = c0p*t76093*t76095*2.0;
            double t76165 = 1.0/(t76103*t76103);
            double t76166 = 1.0/(rho_a[index]*rho_a[index]);
            double t76167 = 1.0/tau_a[index];
            double t76168 = pow(rho_a[index],2.0/3.0);
            double t76169 = pow(rho_a[index],5.0/3.0);
            double t76170 = C_k*t76167*t76169;
            double t76171 = t76170+1.0;
            double t76172 = t76170-1.0;
            double t76173 = 1.0/(t76171*t76171);
            double t76174 = t76172*t76172;
            double t76175 = t76174*t76174;
            double t76176 = t76175*t76175;
            double t76177 = 1.0/pow(t76171,1.1E1);
            double t76178 = 1.0/(t76171*t76171*t76171);
            double t76179 = 1.0/(t76171*t76171*t76171*t76171);
            double t76180 = 1.0/(t76171*t76171*t76171*t76171*t76171);
            double t76181 = 1.0/(t76171*t76171*t76171*t76171*t76171*t76171);
            double t76182 = 1.0/(t76171*t76171*t76171*t76171*t76171*t76171*t76171);
            double t76183 = 1.0/(t76171*t76171*t76171*t76171*t76171*t76171*t76171*t76171);
            double t76184 = 1.0/(t76171*t76171*t76171*t76171*t76171*t76171*t76171*t76171*t76171);
            double t76185 = 1.0/pow(t76171,1.0E1);
            double t76186 = 1.0/(k*k);
            double t76187 = 1.0/kp;
            double t76188 = gamma_aa[index]*mu_*t76046*t76166*t76186*t76187*(1.0/4.0);
            double t76189 = t76188+1.0;
            double t76190 = 1.0/t76189;
            double t76191 = kp-kp*t76190+1.0;
            double t76192 = C_k*C_k;
            double t76193 = pow(rho_a[index],4.0/3.0);
            double t76194 = 1.0/(tau_a[index]*tau_a[index]);
            double t76195 = 1.0/t76171;
            double t76196 = 1.0/pow(t76171,1.2E1);
            double t76197 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]);
            double t76198 = gamma_aa[index]*mu_*t76046*t76186*t76187*t76197*(1.0/2.0);
            double t76199 = gamma_aa[index]*mu_*t76062*t76166*t76186*t76187*(1.0/3.0);
            double t76200 = t76198+t76199;
            double t76201 = a_1*t76172*t76195;
            double t76202 = a_10*t76174*t76176*t76185;
            double t76203 = a_11*t76172*t76174*t76176*t76177;
            double t76204 = a_2*t76173*t76174;
            double t76205 = a_3*t76172*t76174*t76178;
            double t76206 = a_4*t76175*t76179;
            double t76207 = a_5*t76180*t76172*t76175;
            double t76208 = a_6*t76181*t76174*t76175;
            double t76209 = a_7*t76172*t76182*t76174*t76175;
            double t76210 = a_8*t76183*t76176;
            double t76211 = a_9*t76172*t76184*t76176;
            double t76212 = t76201+t76210+t76202+t76211+t76203+t76204+t76205+t76206+t76207+t76208+t76209+1.0;
            double t76213 = 1.0/(t76189*t76189);
            double t76214 = C_k*a_1*t76167*t76168*t76195*(5.0/3.0);
            double t76215 = C_k*a_2*t76172*t76173*t76167*t76168*(1.0E1/3.0);
            double t76216 = C_k*a_10*t76172*t76167*t76176*t76185*t76168*(5.0E1/3.0);
            double t76217 = C_k*a_11*t76174*t76167*t76176*t76168*t76177*(5.5E1/3.0);
            double t76218 = C_k*a_3*t76174*t76167*t76168*t76178*5.0;
            double t76219 = C_k*a_4*t76172*t76174*t76167*t76168*t76179*(2.0E1/3.0);
            double t76220 = C_k*a_5*t76180*t76175*t76167*t76168*(2.5E1/3.0);
            double t76221 = C_k*a_6*t76172*t76181*t76175*t76167*t76168*1.0E1;
            double t76222 = C_k*a_7*t76182*t76174*t76175*t76167*t76168*(3.5E1/3.0);
            double t76223 = C_k*a_8*t76172*t76174*t76183*t76175*t76167*t76168*(4.0E1/3.0);
            double t76224 = C_k*a_9*t76184*t76167*t76176*t76168*1.5E1;
            double t76225 = t76220+t76221+t76222+t76214+t76223+t76215+t76224+t76216+t76217+t76218+t76219-C_k* \
               a_1*t76172*t76173*t76167*t76168*(5.0/3.0)-C_k*a_2*t76174*t76167*t76168*t76178*(1.0E1/3.0)-C_k*a_4* \
               t76180*t76175*t76167*t76168*(2.0E1/3.0)-C_k*a_8*t76184*t76167*t76176*t76168*(4.0E1/3.0)-C_k*a_10*t76174* \
               t76167*t76176*t76168*t76177*(5.0E1/3.0)-C_k*a_3*t76172*t76174*t76167*t76168*t76179*5.0-C_k*a_5*t76172* \
               t76181*t76175*t76167*t76168*(2.5E1/3.0)-C_k*a_6*t76182*t76174*t76175*t76167*t76168*1.0E1-C_k*a_9*t76172* \
               t76167*t76176*t76185*t76168*1.5E1-C_k*a_11*t76172*t76174*t76167*t76176*t76168*t76196*(5.5E1/3.0)-C_k* \
               a_7*t76172*t76174*t76183*t76175*t76167*t76168*(3.5E1/3.0);
            double t76226 = ccab4*t76101*t76071*t76072*t76073;
            double t76227 = ccab1*gamma_aa[index]*gcab*t76104*t76074;
            double t76228 = ccab3*gamma_aa[index]*gcab*t76070*t76109*t76075*t76069;
            double t76229 = ccab2*t76113*t76070*t76076*t76069;
            double t76230 = ccab0+t76226+t76227+t76228+t76229;
            double t76231 = b2p*c*t76050*(4.0/9.0);
            double t76232 = b4p*t76045*t76049*(1.0E1/9.0);
            double t76233 = 1.0/pow(t76039,3.0/2.0);
            double t76234 = b3p*t76051*t76045*t76049*(1.0/1.2E1);
            double t76235 = b1p*c*t76050*t76051*(2.0/9.0);
            double t76236 = b3p*c*t76040*t76050*(2.0/3.0);
            double t76237 = t76231+t76232+t76234+t76235+t76236-b1p*t76233*t76045*t76049*(1.0/3.6E1);
            double t76238 = t76056*t76237*t76058*t76067;
            double t76239 = 1.0/(t76048*t76048*t76048);
            double t76240 = 1.0/(t76055*t76055);
            double t76241 = 1.0/(t76048*t76048*t76048*t76048);
            double t76242 = t76240*t76052*t76241*t76066*t76058*(1.0/2.0);
            double t76243 = 1.0/d2fz0;
            double t76244 = 1.0/Aa;
            double t76245 = b1a*t76040;
            double t76246 = b3a*t76042;
            double t76247 = b2a*c*t76038;
            double t76248 = b4a*t76045*t76046;
            double t76249 = t76245+t76246+t76247+t76248;
            double t76250 = 1.0/t76249;
            double t76251 = t76250*t76244*(1.0/2.0);
            double t76252 = t76251+1.0;
            double t76253 = log(t76252);
            double t76254 = a1a*c*t76038;
            double t76255 = t76254+1.0;
            double t76256 = a1p*c*t76060*t76056*t76067*t76059*(2.0/3.0);
            double t76257 = 1.0/t76150;
            double t76258 = b4f*t76152*t76045*(2.0/3.0);
            double t76259 = b2f*c*t76151*(1.0/3.0);
            double t76260 = b1f*c*t76151*t76153*(1.0/6.0);
            double t76261 = b3f*c*t76151*t76082*(1.0/2.0);
            double t76262 = t76260+t76261+t76258+t76259;
            double t76263 = 1.0/(t76147*t76147);
            double t76264 = 1.0/pow(rho_a[index],7.0/3.0);
            double t76265 = 1.0/pow(t76081,3.0/2.0);
            double t76266 = t76262*t76262;
            double t76267 = t76161*t76161;
            double t76268 = 1.0/(t76089*t76089*t76089);
            double t76269 = t76155*t76095*t76267*t76268*2.0;
            double t76270 = b4p*t76045*t76074*(1.0E1/9.0);
            double t76271 = b2p*c*t76264*(4.0/9.0);
            double t76272 = b3p*t76045*t76153*t76074*(1.0/1.2E1);
            double t76273 = b1p*c*t76153*t76264*(2.0/9.0);
            double t76274 = b3p*c*t76082*t76264*(2.0/3.0);
            double t76356 = b1p*t76045*t76074*t76265*(1.0/3.6E1);
            double t76275 = t76270+t76271+t76272+t76273+t76274-t76356;
            double t76276 = 1.0/(t76092*t76092);
            double t76277 = 1.0/(t76089*t76089*t76089*t76089);
            double t76278 = a1p*c*c0p*t76093*t76264*(8.0/9.0);
            double t76279 = a1f*c*c0f*t76151*t76154*(2.0/3.0);
            double t76280 = a1p*c*c0p*t76151*t76093*(2.0/3.0);
            double t76281 = a1p*c*c0p*t76059*t76068*(4.0/3.0);
            double t76282 = t76163-t76164;
            double t76283 = 1.0/(t76103*t76103*t76103);
            double t76284 = ccab1*gamma_aa[index]*gcab*t76114*t76070*t76283*t76069*(3.2E1/9.0);
            double t76285 = t76116*t76116;
            double t76286 = 1.0/(t76100*t76100*t76100);
            double t76287 = ccab4*t76071*t76072*t76073*t76285*t76286*2.0;
            double t76288 = t76119*t76119;
            double t76289 = 1.0/(t76112*t76112*t76112);
            double t76290 = ccab2*t76070*t76076*t76069*t76288*t76289*2.0;
            double t76291 = t76126*t76126;
            double t76292 = 1.0/(t76108*t76108*t76108);
            double t76293 = ccab3*gamma_aa[index]*gcab*t76070*t76075*t76291*t76292*t76069*2.0;
            double t76364 = t76141*t76262*t76263*t76257;
            double t76294 = t76162-t76280-t76364+t76279;
            double t76295 = gcaa*gcaa;
            double t76296 = t76295*t76295;
            double t76297 = t76282*t76139*t76079;
            double t76298 = t76164+t76297;
            double t76299 = tau_a[index]-1.0/1.0E20;
            double t76300 = ( (t76299 > 0.0) ?  1.0 : 0.0 ) ;
            double t76301 = tau_a[index]*2.0;
            double t76302 = 1.0/rho_a[index];
            double t76326 = gamma_aa[index]*t76302*(1.0/4.0);
            double t76303 = t76301-t76326;
            double t76304 = t76303*t76167*(1.0/2.0);
            double t76305 = t76304-1.0;
            double t76306 = t76300*t76305;
            double t76307 = t76306+1.0;
            double t76308 = gamma_aa[index]*gcaa*t76074*4.0;
            double t76309 = gamma_aa[index]*gcaa*t76075*t76069*t76295*4.0;
            double t76310 = t76076*t76069*t76295*6.0;
            double t76311 = t76071*t76073*t76296;
            double t76312 = t76310+t76311+t76308+t76309+1.0;
            double t76313 = 1.0/t76312;
            double t76314 = gamma_aa[index]*gcaa*t76074;
            double t76315 = t76314+1.0;
            double t76316 = 1.0/t76315;
            double t76317 = gamma_aa[index]*gcaa*t76074*3.0;
            double t76318 = gamma_aa[index]*gcaa*t76075*t76069*t76295;
            double t76319 = t76076*t76069*t76295*3.0;
            double t76320 = t76317+t76318+t76319+1.0;
            double t76321 = 1.0/t76320;
            double t76322 = gamma_aa[index]*gcaa*t76074*2.0;
            double t76323 = t76076*t76069*t76295;
            double t76324 = t76322+t76323+1.0;
            double t76325 = 1.0/t76324;
            double t76327 = 1.0/(t76315*t76315);
            double t76328 = gamma_aa[index]*gcaa*t76117*(3.2E1/3.0);
            double t76329 = gamma_aa[index]*gcaa*t76120*t76069*t76295*3.2E1;
            double t76330 = t76118*t76069*t76295*3.2E1;
            double t76331 = t76071*t76127*t76296*(3.2E1/3.0);
            double t76332 = t76330+t76331+t76328+t76329;
            double t76333 = gamma_aa[index]*gcaa*t76117*(1.6E1/3.0);
            double t76334 = t76118*t76069*t76295*(1.6E1/3.0);
            double t76335 = t76333+t76334;
            double t76336 = gamma_aa[index]*gcaa*t76117*8.0;
            double t76337 = gamma_aa[index]*gcaa*t76120*t76069*t76295*8.0;
            double t76338 = t76118*t76069*t76295*1.6E1;
            double t76339 = t76336+t76337+t76338;
            double t76340 = 1.0/(t76320*t76320);
            double t76341 = 1.0/(t76312*t76312);
            double t76342 = 1.0/(t76324*t76324);
            double t76343 = ccaa4*t76313*t76071*t76073*t76296;
            double t76344 = ccaa1*gamma_aa[index]*gcaa*t76316*t76074;
            double t76345 = ccaa3*gamma_aa[index]*gcaa*t76321*t76075*t76069*t76295;
            double t76346 = ccaa2*t76325*t76076*t76069*t76295;
            double t76347 = ccaa0+t76343+t76344+t76345+t76346;
            double t76348 = 1.0/(t76147*t76147*t76147);
            double t76349 = b4f*t76045*t76074*(1.0E1/9.0);
            double t76350 = b2f*c*t76264*(4.0/9.0);
            double t76351 = b3f*t76045*t76153*t76074*(1.0/1.2E1);
            double t76352 = b1f*c*t76153*t76264*(2.0/9.0);
            double t76353 = b3f*c*t76082*t76264*(2.0/3.0);
            double t76354 = t76350+t76351+t76352+t76353+t76349-b1f*t76045*t76074*t76265*(1.0/3.6E1);
            double t76355 = t76141*t76263*t76354*t76257;
            double t76357 = t76155*t76156*t76095*t76275;
            double t76358 = 1.0/(t76150*t76150);
            double t76359 = 1.0/(t76147*t76147*t76147*t76147);
            double t76360 = t76141*t76142*t76266*t76358*t76359*(1.0/2.0);
            double t76361 = t76052*t76095*t76267*t76276*t76277*(1.0/2.0);
            double t76362 = a1f*c*t76151*t76262*t76263*t76257*(2.0/3.0);
            double t76363 = a1p*c*t76151*t76161*t76155*t76156*(2.0/3.0);
            double t76365 = t76139*t76294*t76079;
            double t76366 = ccaa4*t76313*t76071*t76127*t76296*(3.2E1/3.0);
            double t76367 = ccaa1*gamma_aa[index]*gcaa*t76117*t76316*(8.0/3.0);
            double t76368 = ccaa3*gamma_aa[index]*gcaa*t76120*t76321*t76069*t76295*8.0;
            double t76369 = ccaa2*t76118*t76325*t76069*t76295*(1.6E1/3.0);
            double t76372 = ccaa1*t76118*t76327*t76069*t76295*(8.0/3.0);
            double t76373 = ccaa3*gamma_aa[index]*gcaa*t76340*t76075*t76069*t76339*t76295;
            double t76374 = ccaa4*t76071*t76332*t76341*t76073*t76296;
            double t76375 = ccaa2*t76342*t76335*t76076*t76069*t76295;
            double t76370 = -t76372-t76373-t76374+t76366-t76375+t76367+t76368+t76369;
            double t76371 = -t76162+t76280+t76365;
            v_rho_a_rho_a_[index] = -t76230*(-t76281-rho_a[index]*(t76242+t76238+t76256-t76056*t76066*t76058* \
               t76239*2.0-a1p*c*c0p*t76050*t76068*(8.0/9.0)+Aa*t76243*t76253*t76255*t76166*t76079*(4.0/9.0))*2.0+ \
               rho_a[index]*(t76361+t76363+t76357-t76269-t76278+t76139*t76079*(t76360+t76362+t76355+t76269+t76278- \
               t76141*t76257*t76266*t76348*2.0-t76155*t76156*t76095*t76275-a1f*c*c0f*t76154*t76264*(8.0/9.0)-t76052* \
               t76095*t76267*t76276*t76277*(1.0/2.0)-a1p*c*t76151*t76161*t76155*t76156*(2.0/3.0)))+t76139*t76294* \
               t76079*2.0+t76060*t76056*t76058*t76067*2.0-t76161*t76155*t76156*t76095*2.0+a1p*c*c0p*t76151*t76093* \
               (4.0/3.0))+(-t76164+rho_a[index]*(-t76162+t76280+t76139*t76079*(t76162+t76279-t76141*t76262*t76263* \
               t76257-a1p*c*c0p*t76151*t76093*(2.0/3.0)))+rho_a[index]*(t76060*t76056*t76058*t76067-a1p*c*c0p*t76059* \
               t76068*(2.0/3.0))*2.0+c0p*t76058*t76068*2.0-t76282*t76139*t76079)*(ccab1*gamma_aa[index]*gcab*t76104* \
               t76117*(4.0/3.0)+ccab4*t76101*t76071*t76072*t76127*(1.6E1/3.0)+ccab2*t76113*t76070*t76118*t76069*(8.0/ \
               3.0)-ccab1*t76070*t76118*t76165*t76069*(4.0/3.0)-ccab4*t76133*t76071*t76116*t76072*t76073-ccab2*t76070* \
               t76136*t76119*t76076*t76069+ccab3*gamma_aa[index]*gcab*t76120*t76070*t76109*t76069*4.0-ccab3*gamma_aa[index]* \
               gcab*t76122*t76070*t76126*t76075*t76069)*4.0+(rho_a[index]*(t76164+t76139*t76079*(t76163-c0p*t76093* \
               t76095*2.0))*2.0-c0p*rho_a[index]*t76058*t76068*4.0)*(t76290+t76284+t76293+t76287+ccab1*gamma_aa[index]* \
               gcab*t76121*t76104*(4.4E1/9.0)+ccab4*t76101*t76132*t76071*t76072*(3.68E2/9.0)+ccab2*t76113*t76070* \
               t76115*t76069*(4.0E1/3.0)-ccab1*t76070*t76115*t76165*t76069*(7.6E1/9.0)-ccab4*t76133*t76071*t76116* \
               t76072*t76127*(3.2E1/3.0)-ccab2*t76070*t76118*t76136*t76119*t76069*(1.6E1/3.0)-ccab2*t76070*t76136* \
               t76076*t76069*(gamma_aa[index]*gcab*t76121*(8.8E1/9.0)+t76070*t76115*t76069*(4.0E1/3.0))-ccab4*t76133* \
               t76071*t76072*t76073*(gamma_aa[index]*gcab*t76121*(1.76E2/9.0)+t76132*t76071*t76072*(3.68E2/9.0)+t76070* \
               t76115*t76069*8.0E1+gamma_aa[index]*gcab*t76114*t76070*t76069*(3.04E2/3.0))+ccab3*gamma_aa[index]* \
               gcab*t76114*t76070*t76109*t76069*(7.6E1/3.0)-ccab3*gamma_aa[index]*gcab*t76122*t76070*t76075*t76069* \
               (gamma_aa[index]*gcab*t76121*(4.4E1/3.0)+t76070*t76115*t76069*4.0E1+gamma_aa[index]*gcab*t76114*t76070* \
               t76069*(7.6E1/3.0))-ccab3*gamma_aa[index]*gcab*t76120*t76122*t76070*t76126*t76069*8.0)-(X-1.0)*(t76225* \
               t76191*2.0+rho_a[index]*t76191*(C_k*a_1*t76080*t76167*t76195*(1.0E1/9.0)-a_1*t76173*t76192*t76193* \
               t76194*(5.0E1/9.0)+a_2*t76173*t76192*t76193*t76194*(5.0E1/9.0)+a_1*t76172*t76192*t76193*t76194*t76178* \
               (5.0E1/9.0)+a_10*t76192*t76193*t76176*t76185*t76194*2.5E2-a_2*t76172*t76192*t76193*t76194*t76178*(2.0E2/ \
               9.0)+a_2*t76174*t76192*t76193*t76194*t76179*(5.0E1/3.0)+a_3*t76172*t76192*t76193*t76194*t76178*(5.0E1/ \
               3.0)-a_3*t76174*t76192*t76193*t76194*t76179*5.0E1+a_4*t76181*t76192*t76175*t76193*t76194*(5.0E2/9.0) \
               +a_4*t76174*t76192*t76193*t76194*t76179*(1.0E2/3.0)-a_5*t76181*t76192*t76175*t76193*t76194*(1.25E3/ \
               9.0)+a_6*t76181*t76192*t76175*t76193*t76194*(2.5E2/3.0)+a_8*t76192*t76193*t76176*t76185*t76194*2.0E2- \
               a_9*t76192*t76193*t76176*t76185*t76194*4.5E2-C_k*a_1*t76080*t76172*t76173*t76167*(1.0E1/9.0)+C_k*a_2* \
               t76080*t76172*t76173*t76167*(2.0E1/9.0)-C_k*a_2*t76080*t76174*t76167*t76178*(2.0E1/9.0)+C_k*a_3*t76080* \
               t76174*t76167*t76178*(1.0E1/3.0)-C_k*a_4*t76080*t76180*t76175*t76167*(4.0E1/9.0)+C_k*a_5*t76080*t76180* \
               t76175*t76167*(5.0E1/9.0)-C_k*a_8*t76080*t76184*t76167*t76176*(8.0E1/9.0)+C_k*a_9*t76080*t76184*t76167* \
               t76176*1.0E1+C_k*a_10*t76080*t76172*t76167*t76176*t76185*(1.0E2/9.0)-C_k*a_10*t76080*t76174*t76167* \
               t76176*t76177*(1.0E2/9.0)+C_k*a_11*t76080*t76174*t76167*t76176*t76177*(1.1E2/9.0)-C_k*a_3*t76080*t76172* \
               t76174*t76167*t76179*(1.0E1/3.0)+C_k*a_4*t76080*t76172*t76174*t76167*t76179*(4.0E1/9.0)-C_k*a_5*t76080* \
               t76172*t76181*t76175*t76167*(5.0E1/9.0)+C_k*a_6*t76080*t76172*t76181*t76175*t76167*(2.0E1/3.0)-C_k* \
               a_6*t76080*t76182*t76174*t76175*t76167*(2.0E1/3.0)+C_k*a_7*t76080*t76182*t76174*t76175*t76167*(7.0E1/ \
               9.0)-C_k*a_9*t76080*t76172*t76167*t76176*t76185*1.0E1-a_10*t76172*t76192*t76193*t76176*t76194*t76177* \
               (5.0E3/9.0)+a_11*t76172*t76192*t76193*t76176*t76194*t76177*(2.75E3/9.0)+a_10*t76174*t76192*t76193* \
               t76176*t76194*t76196*(2.75E3/9.0)-a_11*t76174*t76192*t76193*t76176*t76194*t76196*(6.05E3/9.0)+a_3* \
               t76180*t76172*t76174*t76192*t76193*t76194*(1.0E2/3.0)-a_4*t76180*t76172*t76174*t76192*t76193*t76194* \
               (8.0E2/9.0)+a_5*t76180*t76172*t76174*t76192*t76193*t76194*(5.0E2/9.0)+a_5*t76172*t76182*t76192*t76175* \
               t76193*t76194*(2.5E2/3.0)-a_6*t76172*t76182*t76192*t76175*t76193*t76194*2.0E2+a_6*t76174*t76183*t76192* \
               t76175*t76193*t76194*(3.5E2/3.0)+a_7*t76172*t76182*t76192*t76175*t76193*t76194*(3.5E2/3.0)-a_7*t76174* \
               t76183*t76192*t76175*t76193*t76194*(2.45E3/9.0)+a_8*t76174*t76183*t76192*t76175*t76193*t76194*(1.4E3/ \
               9.0)+a_9*t76172*t76192*t76193*t76176*t76194*t76177*2.5E2+a_11*1.0/pow(t76171,1.3E1)*t76172*t76174* \
               t76192*t76193*t76176*t76194*(1.1E3/3.0)-C_k*a_11*t76080*t76172*t76174*t76167*t76176*t76196*(1.1E2/ \
               9.0)-C_k*a_7*t76080*t76172*t76174*t76183*t76175*t76167*(7.0E1/9.0)+C_k*a_8*t76080*t76172*t76174*t76183* \
               t76175*t76167*(8.0E1/9.0)+a_7*t76172*t76174*t76192*t76175*t76184*t76193*t76194*(1.4E3/9.0)-a_8*t76172* \
               t76174*t76192*t76175*t76184*t76193*t76194*(3.2E3/9.0)+a_9*t76172*t76174*t76192*t76175*t76184*t76193* \
               t76194*2.0E2)-kp*t76200*t76212*t76213*2.0-kp*rho_a[index]*(t76200*t76200)*t76212*1.0/(t76189*t76189* \
               t76189)*2.0-kp*rho_a[index]*t76200*t76213*t76225*2.0+kp*rho_a[index]*t76212*t76213*(gamma_aa[index]* \
               mu_*t76062*t76186*t76187*t76197*(4.0/3.0)+gamma_aa[index]*mu_*t76049*t76166*t76186*t76187*(1.0E1/9.0) \
               +gamma_aa[index]*mu_*1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index])*t76046*t76186*t76187* \
               (3.0/2.0)))+(rho_a[index]*t76298*2.0-c0p*rho_a[index]*t76058*t76068*4.0)*(t76290+t76284+t76293+t76287+ \
               ccab4*t76101*t76132*t76071*t76072*(6.4E1/3.0)-ccab2*t76132*t76071*t76072*t76136*(3.2E1/9.0)+ccab2* \
               t76113*t76070*t76115*t76069*(3.2E1/9.0)-ccab1*t76070*t76115*t76165*t76069*(3.2E1/9.0)-ccab4*t76133* \
               t76071*t76116*t76072*t76127*(3.2E1/3.0)-ccab2*t76070*t76118*t76136*t76119*t76069*(1.6E1/3.0)-ccab4* \
               t76133*t76071*t76072*t76073*(t76132*t76071*t76072*(6.4E1/3.0)+t76070*t76115*t76069*(6.4E1/3.0)+gamma_aa[index]* \
               gcab*t76114*t76070*t76069*(1.28E2/3.0))+ccab3*gamma_aa[index]*gcab*t76114*t76070*t76109*t76069*(3.2E1/ \
               3.0)-ccab3*gamma_aa[index]*gcab*t76122*t76070*t76075*t76069*(t76070*t76115*t76069*(3.2E1/3.0)+gamma_aa[index]* \
               gcab*t76114*t76070*t76069*(3.2E1/3.0))-ccab3*gamma_aa[index]*gcab*t76120*t76122*t76070*t76126*t76069* \
               8.0)+t76230*(t76281+rho_a[index]*(t76242+t76238+t76256-t76056*t76066*t76058*t76239*2.0-a1p*c*c0p*t76050* \
               t76068*(8.0/9.0)-Aa*t76243*t76253*t76255*t76166*t76079*(4.0/9.0))*2.0-t76060*t76056*t76058*t76067* \
               2.0)+t76307*t76371*t76347*2.0+t76307*t76370*t76298*2.0-rho_a[index]*t76307*t76298*(ccaa1*gamma_aa[index]* \
               gcaa*t76121*t76316*(8.8E1/9.0)+ccaa4*t76132*t76313*t76071*t76296*(1.12E3/9.0)+ccaa2*t76115*t76325* \
               t76069*t76295*(3.04E2/9.0)-ccaa1*t76115*t76327*t76069*t76295*2.4E1-ccaa4*t76071*t76332*t76341*t76127* \
               t76296*(6.4E1/3.0)-ccaa2*t76342*t76118*t76335*t76069*t76295*(3.2E1/3.0)-ccaa2*t76342*t76076*t76069* \
               t76295*(gamma_aa[index]*gcaa*t76121*(1.76E2/9.0)+t76115*t76069*t76295*(3.04E2/9.0))-ccaa4*t76071*t76341* \
               t76073*t76296*(gamma_aa[index]*gcaa*t76121*(3.52E2/9.0)+t76132*t76071*t76296*(1.12E3/9.0)+t76115*t76069* \
               t76295*(6.08E2/3.0)+gamma_aa[index]*gcaa*t76114*t76069*t76295*2.88E2)+ccaa4*1.0/(t76312*t76312*t76312) \
               *t76071*(t76332*t76332)*t76073*t76296*2.0+ccaa2*1.0/(t76324*t76324*t76324)*(t76335*t76335)*t76076* \
               t76069*t76295*2.0+ccaa3*gamma_aa[index]*gcaa*t76114*t76321*t76069*t76295*7.2E1+ccaa1*gamma_aa[index]* \
               gcaa*t76114*1.0/(t76315*t76315*t76315)*t76069*t76295*(1.28E2/9.0)+ccaa3*gamma_aa[index]*gcaa*1.0/(t76320* \
               t76320*t76320)*t76075*t76069*(t76339*t76339)*t76295*2.0-ccaa3*gamma_aa[index]*gcaa*t76340*t76075*t76069* \
               t76295*(gamma_aa[index]*gcaa*t76121*(8.8E1/3.0)+t76115*t76069*t76295*(3.04E2/3.0)+gamma_aa[index]* \
               gcaa*t76114*t76069*t76295*7.2E1)-ccaa3*gamma_aa[index]*gcaa*t76120*t76340*t76069*t76339*t76295*1.6E1) \
               +rho_a[index]*t76307*t76347*(t76361+t76363+t76357-t76269-t76278+t76139*t76079*(t76360-t76361+t76362- \
               t76363+t76355-t76357+t76269+t76278-t76141*t76257*t76266*t76348*2.0-a1f*c*c0f*t76154*t76264*(8.0/9.0) \
               ))-rho_a[index]*t76307*t76370*t76371*2.0+gamma_aa[index]*t76300*t76302*t76370*t76167*t76298*(1.0/4.0) \
               +gamma_aa[index]*t76300*t76302*t76167*t76347*(-t76162+t76280+t76365)*(1.0/4.0);
        } else {
            v_rho_a_rho_a_[index] = 0.0;
        } 

        if (is_gga_) {

            //V_rho_a_gamma_aa
            if (rho_a[index] > cutoff_) {
                double t76377 = 1.0/(k*k);
                double t76378 = 1.0/kp;
                double t76379 = rho_a[index]*2.0;
                double t76380 = 1.0/(rho_a[index]*rho_a[index]);
                double t76381 = 1.0/pow(t76379,2.0/3.0);
                double t76382 = pow(rho_a[index],5.0/3.0);
                double t76383 = 1.0/tau_a[index];
                double t76384 = C_k*t76382*t76383;
                double t76385 = t76384-1.0;
                double t76386 = t76385*t76385;
                double t76387 = t76386*t76386;
                double t76388 = t76387*t76387;
                double t76389 = t76384+1.0;
                double t76390 = gamma_aa[index]*mu_*t76380*t76381*t76377*t76378*(1.0/4.0);
                double t76391 = t76390+1.0;
                double t76392 = 1.0/(t76391*t76391);
                double t76393 = 1.0/t76389;
                double t76394 = a_1*t76393*t76385;
                double t76395 = 1.0/pow(t76389,1.0E1);
                double t76396 = a_10*t76386*t76395*t76388;
                double t76397 = 1.0/pow(t76389,1.1E1);
                double t76398 = a_11*t76385*t76386*t76388*t76397;
                double t76399 = 1.0/(t76389*t76389);
                double t76400 = a_2*t76386*t76399;
                double t76401 = 1.0/(t76389*t76389*t76389);
                double t76402 = a_3*t76401*t76385*t76386;
                double t76403 = 1.0/(t76389*t76389*t76389*t76389);
                double t76404 = a_4*t76403*t76387;
                double t76405 = 1.0/(t76389*t76389*t76389*t76389*t76389);
                double t76406 = a_5*t76405*t76385*t76387;
                double t76407 = 1.0/(t76389*t76389*t76389*t76389*t76389*t76389);
                double t76408 = a_6*t76407*t76386*t76387;
                double t76409 = 1.0/(t76389*t76389*t76389*t76389*t76389*t76389*t76389);
                double t76410 = a_7*t76409*t76385*t76386*t76387;
                double t76411 = 1.0/(t76389*t76389*t76389*t76389*t76389*t76389*t76389*t76389);
                double t76412 = a_8*t76411*t76388;
                double t76413 = 1.0/(t76389*t76389*t76389*t76389*t76389*t76389*t76389*t76389*t76389);
                double t76414 = a_9*t76413*t76385*t76388;
                double t76415 = t76400+t76410+t76402+t76412+t76404+t76414+t76406+t76408+t76394+t76396+t76398+1.0;
                double t76416 = pow(rho_a[index],2.0/3.0);
                double t76417 = 1.0/rho_a[index];
                double t76418 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]);
                double t76419 = 1.0/pow(t76379,5.0/3.0);
                double t76420 = 1.0/pow(rho_a[index],1.0/3.0);
                double t76421 = c*t76420;
                double t76422 = sqrt(t76421);
                double t76423 = pow(t76421,3.0/2.0);
                double t76424 = c*c;
                double t76425 = 1.0/pow(rho_a[index],2.0/3.0);
                double t76426 = 1.0/c0p;
                double t76427 = b1p*t76422;
                double t76428 = b3p*t76423;
                double t76429 = b4p*t76424*t76425;
                double t76430 = b2p*c*t76420;
                double t76431 = t76430+t76427+t76428+t76429;
                double t76432 = 1.0/t76431;
                double t76433 = t76432*t76426*(1.0/2.0);
                double t76434 = t76433+1.0;
                double t76435 = log(t76434);
                double t76436 = a1p*c*t76420;
                double t76437 = t76436+1.0;
                double t76438 = 1.0/pow(t76379,1.0/3.0);
                double t76439 = c*t76438;
                double t76440 = gamma_aa[index]*gamma_aa[index];
                double t76441 = gcab*gcab;
                double t76442 = t76441*t76441;
                double t76443 = 1.0/pow(rho_a[index],8.0/3.0);
                double t76444 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t76445 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t76446 = 1.0/pow(rho_a[index],1.9E1/3.0);
                double t76447 = 1.0/pow(rho_a[index],3.5E1/3.0);
                double t76448 = gamma_aa[index]*gcab*t76443*2.0;
                double t76449 = t76440*t76441*t76444;
                double t76450 = t76448+t76449+1.0;
                double t76451 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]*rho_a[index]);
                double t76452 = gamma_aa[index]*gcab*t76443;
                double t76453 = t76452+1.0;
                double t76454 = gamma_aa[index]*gcab*t76443*3.0;
                double t76455 = gamma_aa[index]*gcab*t76440*t76441*t76445;
                double t76456 = t76440*t76441*t76444*3.0;
                double t76457 = t76454+t76455+t76456+1.0;
                double t76458 = t76440*t76440;
                double t76459 = 1.0/pow(rho_a[index],3.2E1/3.0);
                double t76460 = gamma_aa[index]*gcab*t76443*4.0;
                double t76461 = gamma_aa[index]*gcab*t76440*t76441*t76445*4.0;
                double t76462 = t76440*t76441*t76444*6.0;
                double t76463 = t76442*t76458*t76459;
                double t76464 = t76460+t76461+t76462+t76463+1.0;
                double t76465 = 1.0/pow(rho_a[index],1.1E1/3.0);
                double t76466 = 1.0/(t76450*t76450);
                double t76467 = 1.0/(t76457*t76457);
                double t76468 = 1.0/(t76464*t76464);
                double t76469 = gamma_aa[index]*gcab*t76465*(8.0/3.0);
                double t76470 = t76440*t76441*t76446*(8.0/3.0);
                double t76471 = t76470+t76469;
                double t76472 = gcab*t76443;
                double t76473 = gamma_aa[index]*t76441*t76444;
                double t76474 = t76472+t76473;
                double t76475 = gcab*t76443*(3.0/2.0);
                double t76476 = gamma_aa[index]*t76441*t76444*3.0;
                double t76477 = gcab*t76440*t76441*t76445*(3.0/2.0);
                double t76478 = t76475+t76476+t76477;
                double t76479 = gamma_aa[index]*gcab*t76465*4.0;
                double t76480 = gamma_aa[index]*gcab*t76440*t76441*t76451*4.0;
                double t76481 = t76440*t76441*t76446*8.0;
                double t76482 = t76480+t76481+t76479;
                double t76483 = gamma_aa[index]*gcab*t76465*(1.6E1/3.0);
                double t76484 = gamma_aa[index]*gcab*t76440*t76441*t76451*1.6E1;
                double t76485 = t76440*t76441*t76446*1.6E1;
                double t76486 = t76442*t76447*t76458*(1.6E1/3.0);
                double t76487 = t76483+t76484+t76485+t76486;
                double t76488 = gcab*t76443*2.0;
                double t76489 = gamma_aa[index]*t76441*t76444*6.0;
                double t76490 = gcab*t76440*t76441*t76445*6.0;
                double t76491 = gamma_aa[index]*t76440*t76442*t76459*2.0;
                double t76492 = t76490+t76491+t76488+t76489;
                double t76493 = pow(2.0,1.0/3.0);
                double t76494 = t76493*2.0;
                double t76495 = t76494-2.0;
                double t76496 = two_13*2.0;
                double t76497 = t76496-2.0;
                double t76498 = 1.0/t76497;
                double t76499 = 1.0/c0f;
                double t76500 = b1f*t76422;
                double t76501 = b3f*t76423;
                double t76502 = b4f*t76424*t76425;
                double t76503 = b2f*c*t76420;
                double t76504 = t76500+t76501+t76502+t76503;
                double t76505 = 1.0/t76504;
                double t76506 = t76505*t76499*(1.0/2.0);
                double t76507 = t76506+1.0;
                double t76508 = log(t76507);
                double t76509 = a1f*c*t76420;
                double t76510 = t76509+1.0;
                double t76511 = c0f*t76510*t76508*2.0;
                double t76512 = c0p*t76435*t76437*2.0;
                double t76513 = sqrt(t76439);
                double t76514 = b1p*t76513;
                double t76515 = pow(t76439,3.0/2.0);
                double t76516 = b3p*t76515;
                double t76517 = b2p*c*t76438;
                double t76518 = b4p*t76424*t76381;
                double t76519 = t76514+t76516+t76517+t76518;
                double t76520 = 1.0/t76519;
                double t76521 = t76520*t76426*(1.0/2.0);
                double t76522 = t76521+1.0;
                double t76523 = log(t76522);
                double t76524 = a1p*c*t76438;
                double t76525 = t76524+1.0;
                double t76526 = 1.0/t76464;
                double t76527 = 1.0/t76450;
                double t76528 = 1.0/t76457;
                double t76529 = 1.0/(t76453*t76453);
                double t76530 = 1.0/(t76453*t76453*t76453);
                double t76531 = ccab3*gcab*t76440*t76441*t76445*t76482*t76467*(3.0/2.0);
                double t76532 = ccab2*gamma_aa[index]*t76441*t76444*t76471*t76466;
                double t76533 = ccab3*gamma_aa[index]*gcab*t76440*t76441*t76451*t76467*t76478*4.0;
                double t76534 = ccab4*gamma_aa[index]*t76440*t76442*t76459*t76468*t76487*2.0;
                double t76535 = ccab4*t76442*t76447*t76492*t76458*t76468*(1.6E1/3.0);
                double t76536 = ccab2*t76440*t76441*t76446*t76474*t76466*(8.0/3.0);
                double t76537 = gamma_aa[index]*t76441*t76446*4.0;
                double t76538 = 1.0/(t76450*t76450*t76450);
                double t76539 = 1.0/(t76457*t76457*t76457);
                double t76540 = 1.0/(t76464*t76464*t76464);
                double t76541 = 1.0/pow(t76379,4.0/3.0);
                double t76542 = 1.0/pow(rho_a[index],4.0/3.0);
                double t76543 = 1.0/pow(rho_a[index],5.0/3.0);
                double t76544 = 1.0/sqrt(t76421);
                double t76545 = 1.0/t76434;
                double t76546 = 1.0/(t76431*t76431);
                double t76547 = b4p*t76424*t76543*(2.0/3.0);
                double t76548 = b2p*c*t76542*(1.0/3.0);
                double t76549 = b1p*c*t76542*t76544*(1.0/6.0);
                double t76550 = b3p*c*t76422*t76542*(1.0/2.0);
                double t76551 = t76550+t76547+t76548+t76549;
                double t76552 = t76551*t76437*t76545*t76546;
                double t76553 = t76511-t76512;
                double t76554 = t76553*t76495*t76498;
                double t76555 = 1.0/t76453;
                double t76556 = t76512+t76554;
                double t76557 = gcaa*gcaa;
                double t76558 = t76557*t76557;
                double t76559 = gamma_aa[index]*gcaa*t76443;
                double t76560 = t76559+1.0;
                double t76561 = gamma_aa[index]*gcaa*t76443*3.0;
                double t76562 = gamma_aa[index]*gcaa*t76440*t76445*t76557;
                double t76563 = t76440*t76444*t76557*3.0;
                double t76564 = t76561+t76562+t76563+1.0;
                double t76565 = gamma_aa[index]*gcaa*t76443*4.0;
                double t76566 = gamma_aa[index]*gcaa*t76440*t76445*t76557*4.0;
                double t76567 = t76440*t76444*t76557*6.0;
                double t76568 = t76458*t76459*t76558;
                double t76569 = t76565+t76566+t76567+t76568+1.0;
                double t76570 = gamma_aa[index]*gcaa*t76443*2.0;
                double t76571 = t76440*t76444*t76557;
                double t76572 = t76570+t76571+1.0;
                double t76573 = tau_a[index]-1.0/1.0E20;
                double t76574 = ( (t76573 > 0.0) ?  1.0 : 0.0 ) ;
                double t76575 = tau_a[index]*2.0;
                double t76613 = gamma_aa[index]*t76417*(1.0/4.0);
                double t76576 = -t76613+t76575;
                double t76577 = t76383*t76576*(1.0/2.0);
                double t76578 = t76577-1.0;
                double t76579 = t76574*t76578;
                double t76580 = t76579+1.0;
                double t76581 = 1.0/t76560;
                double t76582 = 1.0/t76569;
                double t76583 = 1.0/t76572;
                double t76584 = 1.0/t76564;
                double t76585 = 1.0/(t76560*t76560);
                double t76586 = 1.0/(t76564*t76564);
                double t76587 = 1.0/(t76572*t76572);
                double t76588 = gcaa*t76443*3.0;
                double t76589 = gamma_aa[index]*t76444*t76557*6.0;
                double t76590 = gcaa*t76440*t76445*t76557*3.0;
                double t76591 = t76590+t76588+t76589;
                double t76592 = 1.0/(t76569*t76569);
                double t76593 = gcaa*t76443*4.0;
                double t76594 = gamma_aa[index]*t76444*t76557*1.2E1;
                double t76595 = gcaa*t76440*t76445*t76557*1.2E1;
                double t76596 = gamma_aa[index]*t76440*t76459*t76558*4.0;
                double t76597 = t76593+t76594+t76595+t76596;
                double t76598 = gcaa*t76443*2.0;
                double t76599 = gamma_aa[index]*t76444*t76557*2.0;
                double t76600 = t76598+t76599;
                double t76601 = gamma_aa[index]*gcaa*t76465*(1.6E1/3.0);
                double t76602 = t76440*t76446*t76557*(1.6E1/3.0);
                double t76603 = t76601+t76602;
                double t76604 = gamma_aa[index]*gcaa*t76465*8.0;
                double t76605 = gamma_aa[index]*gcaa*t76440*t76451*t76557*8.0;
                double t76606 = t76440*t76446*t76557*1.6E1;
                double t76607 = t76604+t76605+t76606;
                double t76608 = gamma_aa[index]*gcaa*t76465*(3.2E1/3.0);
                double t76609 = gamma_aa[index]*gcaa*t76440*t76451*t76557*3.2E1;
                double t76610 = t76440*t76446*t76557*3.2E1;
                double t76611 = t76447*t76458*t76558*(3.2E1/3.0);
                double t76612 = t76610+t76611+t76608+t76609;
                double t76614 = 1.0/t76507;
                double t76615 = 1.0/(t76504*t76504);
                double t76616 = b4f*t76424*t76543*(2.0/3.0);
                double t76617 = b2f*c*t76542*(1.0/3.0);
                double t76618 = b1f*c*t76542*t76544*(1.0/6.0);
                double t76619 = b3f*c*t76422*t76542*(1.0/2.0);
                double t76620 = t76616+t76617+t76618+t76619;
                double t76621 = a1f*c*c0f*t76542*t76508*(2.0/3.0);
                double t76622 = a1p*c*c0p*t76542*t76435*(2.0/3.0);
                double t76623 = ccaa1*gcaa*t76443*t76581;
                double t76624 = ccaa4*gamma_aa[index]*t76440*t76582*t76459*t76558*4.0;
                double t76625 = ccaa2*gamma_aa[index]*t76444*t76583*t76557*2.0;
                double t76626 = ccaa3*gcaa*t76440*t76445*t76557*t76584*3.0;
                double t76631 = ccaa1*gamma_aa[index]*t76444*t76557*t76585;
                double t76632 = ccaa3*gamma_aa[index]*gcaa*t76440*t76445*t76591*t76557*t76586;
                double t76633 = ccaa4*t76592*t76458*t76459*t76558*t76597;
                double t76634 = ccaa2*t76600*t76440*t76444*t76557*t76587;
                double t76627 = -t76631+t76623-t76632+t76624-t76633+t76625-t76634+t76626;
                double t76628 = t76621-t76622+t76552-t76510*t76620*t76614*t76615;
                double t76629 = t76628*t76495*t76498;
                double t76630 = t76622-t76552+t76629;
                v_rho_a_gamma_aa_[index] = (rho_a[index]*t76556*2.0-c0p*rho_a[index]*t76523*t76525*4.0)*(t76531+t76532+ \
                   t76533+t76534+t76535+t76536-ccab1*gcab*t76465*t76555*(4.0/3.0)-ccab2*gamma_aa[index]*t76441*t76446* \
                   t76527*4.0+ccab1*gamma_aa[index]*t76441*t76446*t76529*(8.0/3.0)+ccab4*t76442*t76458*t76459*t76468* \
                   (gcab*t76465*(1.6E1/3.0)+gamma_aa[index]*t76441*t76446*2.4E1+gamma_aa[index]*t76440*t76442*t76447* \
                   (4.0E1/3.0)+gcab*t76440*t76441*t76451*3.2E1)+ccab2*t76440*t76441*t76444*t76466*(t76537+gcab*t76465* \
                   (8.0/3.0))-ccab4*gamma_aa[index]*t76440*t76442*t76526*t76447*(4.0E1/3.0)-ccab1*gcab*t76440*t76530* \
                   t76441*t76451*(4.0/3.0)-ccab3*gcab*t76440*t76441*t76451*t76528*8.0-ccab2*t76440*t76441*t76444*t76471* \
                   t76474*t76538*2.0-ccab4*t76540*t76442*t76492*t76458*t76459*t76487*2.0+ccab3*gamma_aa[index]*gcab*t76440* \
                   t76441*t76445*t76467*(gcab*t76465*4.0+gamma_aa[index]*t76441*t76446*1.2E1+gcab*t76440*t76441*t76451* \
                   8.0)-ccab3*gamma_aa[index]*gcab*t76440*t76441*t76445*t76482*t76539*t76478*2.0)-(-t76512-t76554+rho_a[index]* \
                   ((t76525*1.0/(t76519*t76519)*(b2p*c*t76541*(1.0/3.0)+b4p*t76424*t76419*(2.0/3.0)+b3p*c*t76513*t76541* \
                   (1.0/2.0)+b1p*c*t76541*1.0/sqrt(t76439)*(1.0/6.0)))/t76522-a1p*c*c0p*t76523*t76541*(2.0/3.0))*2.0+ \
                   rho_a[index]*(t76622-t76552+t76495*t76498*(t76621+t76552-t76510*t76620*t76614*t76615-a1p*c*c0p*t76542* \
                   t76435*(2.0/3.0)))+c0p*t76523*t76525*2.0)*(ccab1*gcab*t76443*t76555*(1.0/2.0)+ccab2*gamma_aa[index]* \
                   t76441*t76444*t76527-ccab1*gamma_aa[index]*t76441*t76444*t76529*(1.0/2.0)-ccab2*t76440*t76441*t76444* \
                   t76474*t76466-ccab4*t76442*t76492*t76458*t76459*t76468+ccab4*gamma_aa[index]*t76440*t76442*t76526* \
                   t76459*2.0+ccab3*gcab*t76440*t76441*t76445*t76528*(3.0/2.0)-ccab3*gamma_aa[index]*gcab*t76440*t76441* \
                   t76445*t76467*t76478)*2.0-(X-1.0)*(-kp*rho_a[index]*t76415*t76392*(mu_*t76380*t76419*t76377*t76378* \
                   (1.0/3.0)+mu_*t76381*t76418*t76377*t76378*(1.0/2.0))+mu_*t76415*t76380*t76381*t76392*t76377*(1.0/4.0) \
                   +mu_*t76381*t76417*t76392*t76377*(C_k*a_1*t76416*t76383*t76393*(5.0/3.0)-C_k*a_1*t76416*t76383*t76385* \
                   t76399*(5.0/3.0)-C_k*a_2*t76401*t76416*t76383*t76386*(1.0E1/3.0)+C_k*a_2*t76416*t76383*t76385*t76399* \
                   (1.0E1/3.0)+C_k*a_3*t76401*t76416*t76383*t76386*5.0-C_k*a_4*t76405*t76416*t76383*t76387*(2.0E1/3.0) \
                   +C_k*a_5*t76405*t76416*t76383*t76387*(2.5E1/3.0)-C_k*a_8*t76413*t76416*t76383*t76388*(4.0E1/3.0)+C_k* \
                   a_9*t76413*t76416*t76383*t76388*1.5E1+C_k*a_10*t76416*t76383*t76385*t76395*t76388*(5.0E1/3.0)-C_k* \
                   a_10*t76416*t76383*t76386*t76388*t76397*(5.0E1/3.0)+C_k*a_11*t76416*t76383*t76386*t76388*t76397*(5.5E1/ \
                   3.0)-C_k*a_3*t76403*t76416*t76383*t76385*t76386*5.0+C_k*a_4*t76403*t76416*t76383*t76385*t76386*(2.0E1/ \
                   3.0)-C_k*a_5*t76407*t76416*t76383*t76385*t76387*(2.5E1/3.0)+C_k*a_6*t76407*t76416*t76383*t76385*t76387* \
                   1.0E1-C_k*a_6*t76416*t76409*t76383*t76386*t76387*1.0E1+C_k*a_7*t76416*t76409*t76383*t76386*t76387* \
                   (3.5E1/3.0)-C_k*a_9*t76416*t76383*t76385*t76395*t76388*1.5E1-C_k*a_11*t76416*t76383*t76385*t76386* \
                   t76388*1.0/pow(t76389,1.2E1)*(5.5E1/3.0)-C_k*a_7*t76411*t76416*t76383*t76385*t76386*t76387*(3.5E1/ \
                   3.0)+C_k*a_8*t76411*t76416*t76383*t76385*t76386*t76387*(4.0E1/3.0))*(1.0/4.0)+mu_*t76415*t76381*t76417* \
                   1.0/(t76391*t76391*t76391)*t76377*(gamma_aa[index]*mu_*t76380*t76419*t76377*t76378*(1.0/3.0)+gamma_aa[index]* \
                   mu_*t76381*t76418*t76377*t76378*(1.0/2.0))*(1.0/2.0))+(rho_a[index]*(t76512+t76495*t76498*(t76511- \
                   c0p*t76435*t76437*2.0))*2.0-c0p*rho_a[index]*t76523*t76525*4.0)*(t76531+t76532+t76533+t76534+t76535+ \
                   t76536-ccab2*gamma_aa[index]*t76441*t76446*t76527*(4.0/3.0)+ccab1*gamma_aa[index]*t76441*t76446*t76529* \
                   (4.0/3.0)+ccab4*t76442*t76458*t76459*t76468*(gamma_aa[index]*t76441*t76446*8.0+gamma_aa[index]*t76440* \
                   t76442*t76447*8.0+gcab*t76440*t76441*t76451*1.6E1)-ccab4*gamma_aa[index]*t76440*t76442*t76526*t76447* \
                   8.0+ccab2*gamma_aa[index]*t76440*t76442*t76447*t76466*(4.0/3.0)-ccab1*gcab*t76440*t76530*t76441*t76451* \
                   (4.0/3.0)-ccab3*gcab*t76440*t76441*t76451*t76528*4.0-ccab2*t76440*t76441*t76444*t76471*t76474*t76538* \
                   2.0-ccab4*t76540*t76442*t76492*t76458*t76459*t76487*2.0+ccab3*gamma_aa[index]*gcab*t76440*t76441*t76445* \
                   t76467*(t76537+gcab*t76440*t76441*t76451*4.0)-ccab3*gamma_aa[index]*gcab*t76440*t76441*t76445*t76482* \
                   t76539*t76478*2.0)-t76580*t76627*t76556+rho_a[index]*t76630*t76580*t76627-rho_a[index]*t76580*t76556* \
                   (ccaa1*gcaa*t76581*t76465*(-8.0/3.0)-ccaa2*gamma_aa[index]*t76446*t76583*t76557*(3.2E1/3.0)+ccaa1* \
                   gamma_aa[index]*t76446*t76557*t76585*8.0+ccaa2*t76600*t76440*t76446*t76557*t76587*(1.6E1/3.0)+ccaa4* \
                   t76447*t76592*t76458*t76558*t76597*(3.2E1/3.0)+ccaa4*t76592*t76458*t76459*t76558*(gcaa*t76465*(3.2E1/ \
                   3.0)+gamma_aa[index]*t76446*t76557*6.4E1+gamma_aa[index]*t76440*t76447*t76558*(1.28E2/3.0)+gcaa*t76440* \
                   t76451*t76557*9.6E1)-ccaa1*gcaa*t76440*t76451*1.0/(t76560*t76560*t76560)*t76557*(1.6E1/3.0)+ccaa2* \
                   t76440*t76444*t76557*t76587*(gcaa*t76465*(1.6E1/3.0)+gamma_aa[index]*t76446*t76557*(3.2E1/3.0))+ccaa2* \
                   gamma_aa[index]*t76603*t76444*t76557*t76587*2.0-ccaa4*gamma_aa[index]*t76440*t76447*t76582*t76558* \
                   (1.28E2/3.0)-ccaa3*gcaa*t76440*t76451*t76557*t76584*2.4E1+ccaa4*gamma_aa[index]*t76440*t76612*t76592* \
                   t76459*t76558*4.0+ccaa3*gcaa*t76440*t76445*t76607*t76557*t76586*3.0-ccaa2*t76600*t76440*t76603*t76444* \
                   1.0/(t76572*t76572*t76572)*t76557*2.0-ccaa4*t76612*t76458*t76459*t76558*1.0/(t76569*t76569*t76569) \
                   *t76597*2.0+ccaa3*gamma_aa[index]*gcaa*t76440*t76445*t76557*t76586*(gcaa*t76465*8.0+gamma_aa[index]* \
                   t76446*t76557*3.2E1+gcaa*t76440*t76451*t76557*2.4E1)+ccaa3*gamma_aa[index]*gcaa*t76440*t76451*t76591* \
                   t76557*t76586*8.0-ccaa3*gamma_aa[index]*gcaa*t76440*t76445*t76607*1.0/(t76564*t76564*t76564)*t76591* \
                   t76557*2.0)-t76630*t76383*t76574*(ccaa0+ccaa1*gamma_aa[index]*gcaa*t76443*t76581+ccaa2*t76440*t76444* \
                   t76583*t76557+ccaa4*t76582*t76458*t76459*t76558+ccaa3*gamma_aa[index]*gcaa*t76440*t76445*t76557*t76584) \
                   *(1.0/8.0)-t76383*t76556*t76574*(ccaa1*gamma_aa[index]*gcaa*t76581*t76465*(8.0/3.0)+ccaa2*t76440*t76446* \
                   t76583*t76557*(1.6E1/3.0)-ccaa1*t76440*t76446*t76557*t76585*(8.0/3.0)+ccaa4*t76447*t76582*t76458*t76558* \
                   (3.2E1/3.0)-ccaa2*t76440*t76603*t76444*t76557*t76587-ccaa4*t76612*t76592*t76458*t76459*t76558+ccaa3* \
                   gamma_aa[index]*gcaa*t76440*t76451*t76557*t76584*8.0-ccaa3*gamma_aa[index]*gcaa*t76440*t76445*t76607* \
                   t76557*t76586)*(1.0/8.0)-gamma_aa[index]*t76417*t76383*t76627*t76556*t76574*(1.0/8.0);
            } else {
                v_rho_a_gamma_aa_[index] = 0.0;
            } 

            //V_gamma_aa_gamma_aa
            if (rho_a[index] > cutoff_) {
                double t76636 = 1.0/pow(rho_a[index],1.0/3.0);
                double t76637 = c*t76636;
                double t76638 = sqrt(t76637);
                double t76639 = pow(t76637,3.0/2.0);
                double t76640 = c*c;
                double t76641 = 1.0/pow(rho_a[index],2.0/3.0);
                double t76642 = 1.0/c0p;
                double t76643 = b1p*t76638;
                double t76644 = b3p*t76639;
                double t76645 = b4p*t76640*t76641;
                double t76646 = b2p*c*t76636;
                double t76647 = t76643+t76644+t76645+t76646;
                double t76648 = 1.0/t76647;
                double t76649 = t76642*t76648*(1.0/2.0);
                double t76650 = t76649+1.0;
                double t76651 = log(t76650);
                double t76652 = a1p*c*t76636;
                double t76653 = t76652+1.0;
                double t76654 = rho_a[index]*2.0;
                double t76655 = 1.0/pow(t76654,1.0/3.0);
                double t76656 = c*t76655;
                double t76657 = gcab*gcab;
                double t76658 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t76659 = 1.0/pow(rho_a[index],8.0/3.0);
                double t76660 = gamma_aa[index]*gamma_aa[index];
                double t76661 = t76657*t76657;
                double t76662 = 1.0/pow(rho_a[index],3.2E1/3.0);
                double t76663 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t76664 = gamma_aa[index]*gcab*t76659;
                double t76665 = t76664+1.0;
                double t76666 = gamma_aa[index]*gcab*t76659*2.0;
                double t76667 = t76660*t76657*t76658;
                double t76668 = t76666+t76667+1.0;
                double t76669 = gamma_aa[index]*gcab*t76659*3.0;
                double t76670 = gamma_aa[index]*gcab*t76660*t76663*t76657;
                double t76671 = t76660*t76657*t76658*3.0;
                double t76672 = t76670+t76671+t76669+1.0;
                double t76673 = t76660*t76660;
                double t76689 = gcab*t76659*2.0;
                double t76690 = gamma_aa[index]*t76657*t76658*6.0;
                double t76691 = gcab*t76660*t76663*t76657*6.0;
                double t76692 = gamma_aa[index]*t76660*t76661*t76662*2.0;
                double t76674 = t76690+t76691+t76692+t76689;
                double t76675 = gamma_aa[index]*gcab*t76659*4.0;
                double t76676 = gamma_aa[index]*gcab*t76660*t76663*t76657*4.0;
                double t76677 = t76660*t76657*t76658*6.0;
                double t76678 = t76661*t76662*t76673;
                double t76679 = t76675+t76676+t76677+t76678+1.0;
                double t76682 = gcab*t76659;
                double t76683 = gamma_aa[index]*t76657*t76658;
                double t76680 = t76682+t76683;
                double t76681 = 1.0/(t76672*t76672);
                double t76684 = 1.0/(t76668*t76668);
                double t76685 = gcab*t76659*(3.0/2.0);
                double t76686 = gamma_aa[index]*t76657*t76658*3.0;
                double t76687 = gcab*t76660*t76663*t76657*(3.0/2.0);
                double t76688 = t76685+t76686+t76687;
                double t76693 = 1.0/(t76679*t76679);
                double t76694 = pow(2.0,1.0/3.0);
                double t76695 = t76694*2.0;
                double t76696 = t76695-2.0;
                double t76697 = two_13*2.0;
                double t76698 = t76697-2.0;
                double t76699 = 1.0/t76698;
                double t76700 = 1.0/c0f;
                double t76701 = b1f*t76638;
                double t76702 = b3f*t76639;
                double t76703 = b4f*t76640*t76641;
                double t76704 = b2f*c*t76636;
                double t76705 = t76701+t76702+t76703+t76704;
                double t76706 = 1.0/t76705;
                double t76707 = t76700*t76706*(1.0/2.0);
                double t76708 = t76707+1.0;
                double t76709 = log(t76708);
                double t76710 = a1f*c*t76636;
                double t76711 = t76710+1.0;
                double t76712 = c0f*t76711*t76709*2.0;
                double t76713 = c0p*t76651*t76653*2.0;
                double t76714 = gcaa*gcaa;
                double t76715 = t76714*t76714;
                double t76716 = gamma_aa[index]*gcaa*t76659;
                double t76717 = t76716+1.0;
                double t76718 = gamma_aa[index]*gcaa*t76659*2.0;
                double t76719 = t76660*t76714*t76658;
                double t76720 = t76718+t76719+1.0;
                double t76721 = gamma_aa[index]*gcaa*t76659*3.0;
                double t76722 = gamma_aa[index]*gcaa*t76660*t76714*t76663;
                double t76723 = t76660*t76714*t76658*3.0;
                double t76724 = t76721+t76722+t76723+1.0;
                double t76740 = gcaa*t76659*4.0;
                double t76741 = gamma_aa[index]*t76714*t76658*1.2E1;
                double t76742 = gcaa*t76660*t76714*t76663*1.2E1;
                double t76743 = gamma_aa[index]*t76660*t76715*t76662*4.0;
                double t76725 = t76740+t76741+t76742+t76743;
                double t76726 = gamma_aa[index]*gcaa*t76659*4.0;
                double t76727 = gamma_aa[index]*gcaa*t76660*t76714*t76663*4.0;
                double t76728 = t76660*t76714*t76658*6.0;
                double t76729 = t76715*t76662*t76673;
                double t76730 = t76726+t76727+t76728+t76729+1.0;
                double t76733 = gcaa*t76659*2.0;
                double t76734 = gamma_aa[index]*t76714*t76658*2.0;
                double t76731 = t76733+t76734;
                double t76732 = 1.0/(t76724*t76724);
                double t76735 = 1.0/(t76720*t76720);
                double t76736 = gcaa*t76659*3.0;
                double t76737 = gamma_aa[index]*t76714*t76658*6.0;
                double t76738 = gcaa*t76660*t76714*t76663*3.0;
                double t76739 = t76736+t76737+t76738;
                double t76744 = 1.0/(t76730*t76730);
                double t76745 = 1.0/tau_a[index];
                double t76746 = tau_a[index]-1.0/1.0E20;
                double t76747 = ( (t76746 > 0.0) ?  1.0 : 0.0 ) ;
                double t76748 = t76712-t76713;
                double t76749 = t76748*t76696*t76699;
                double t76750 = t76713+t76749;
                double t76751 = 1.0/t76730;
                double t76752 = 1.0/t76720;
                double t76753 = 1.0/t76724;
                double t76754 = 1.0/(t76717*t76717);
                double t76755 = 1.0/kp;
                double t76756 = 1.0/pow(t76654,2.0/3.0);
                double t76757 = pow(rho_a[index],5.0/3.0);
                double t76758 = C_k*t76745*t76757;
                double t76759 = t76758-1.0;
                double t76760 = t76759*t76759;
                double t76761 = t76760*t76760;
                double t76762 = t76761*t76761;
                double t76763 = t76758+1.0;
                v_gamma_aa_gamma_aa_[index] = (rho_a[index]*(t76713+t76696*t76699*(t76712-c0p*t76651*t76653*2.0)) \
                   *2.0-c0p*rho_a[index]*log((t76642*(1.0/2.0))/(b1p*sqrt(t76656)+b3p*pow(t76656,3.0/2.0)+b2p*c*t76655+ \
                   b4p*t76640*t76756)+1.0)*(a1p*c*t76655+1.0)*4.0)*(ccab1*1.0/(t76665*t76665)*t76657*t76658*(1.0/2.0) \
                   -(ccab2*t76657*t76658*(1.0/2.0))/t76668+ccab2*t76660*t76661*t76662*t76684*(1.0/2.0)-(ccab4*t76660* \
                   t76661*t76662*3.0)/t76679+ccab4*t76661*t76662*t76673*t76693*(t76657*t76658*3.0+t76660*t76661*t76662* \
                   3.0+gamma_aa[index]*gcab*t76663*t76657*6.0)-(ccab3*gamma_aa[index]*gcab*t76663*t76657*(3.0/2.0))/t76672- \
                   ccab1*gamma_aa[index]*gcab*t76663*1.0/(t76665*t76665*t76665)*t76657*(1.0/2.0)-ccab2*t76660*(t76680* \
                   t76680)*t76657*t76658*1.0/(t76668*t76668*t76668)*2.0-ccab4*t76661*t76662*t76673*(t76674*t76674)*1.0/ \
                   (t76679*t76679*t76679)*2.0+ccab2*gamma_aa[index]*t76680*t76657*t76684*t76658*2.0+ccab4*gamma_aa[index]* \
                   t76660*t76661*t76662*t76674*t76693*4.0+ccab3*gcab*t76660*t76663*t76681*t76657*t76688*3.0+ccab3*gamma_aa[index]* \
                   gcab*t76660*t76663*t76681*t76657*(t76657*t76658*(3.0/2.0)+gamma_aa[index]*gcab*t76663*t76657*(3.0/ \
                   2.0))-ccab3*gamma_aa[index]*gcab*t76660*t76663*1.0/(t76672*t76672*t76672)*t76657*(t76688*t76688)*2.0) \
                   *-4.0+t76750*t76745*t76747*((ccaa1*gcaa*t76659)/t76717+ccaa2*gamma_aa[index]*t76714*t76752*t76658* \
                   2.0-ccaa1*gamma_aa[index]*t76714*t76754*t76658-ccaa2*t76731*t76660*t76714*t76735*t76658-ccaa4*t76715* \
                   t76662*t76725*t76744*t76673+ccaa4*gamma_aa[index]*t76660*t76715*t76751*t76662*4.0+ccaa3*gcaa*t76660* \
                   t76714*t76663*t76753*3.0-ccaa3*gamma_aa[index]*gcaa*t76660*t76714*t76732*t76663*t76739)*(1.0/2.0)- \
                   rho_a[index]*t76750*(t76747*(t76745*(tau_a[index]*2.0-(gamma_aa[index]*(1.0/4.0))/rho_a[index])*(1.0/ \
                   2.0)-1.0)+1.0)*(ccaa2*t76714*t76752*t76658*2.0-ccaa1*t76714*t76754*t76658*2.0-ccaa2*t76660*t76715* \
                   t76662*t76735*2.0+ccaa4*t76660*t76715*t76751*t76662*1.2E1-ccaa4*t76715*t76662*t76744*t76673*(t76714* \
                   t76658*1.2E1+t76660*t76715*t76662*1.2E1+gamma_aa[index]*gcaa*t76714*t76663*2.4E1)+ccaa1*gamma_aa[index]* \
                   gcaa*t76714*t76663*1.0/(t76717*t76717*t76717)*2.0+ccaa2*1.0/(t76720*t76720*t76720)*(t76731*t76731) \
                   *t76660*t76714*t76658*2.0+ccaa4*1.0/(t76730*t76730*t76730)*t76715*t76662*(t76725*t76725)*t76673*2.0+ \
                   ccaa3*gamma_aa[index]*gcaa*t76714*t76663*t76753*6.0-ccaa2*gamma_aa[index]*t76731*t76714*t76735*t76658* \
                   4.0-ccaa4*gamma_aa[index]*t76660*t76715*t76662*t76725*t76744*8.0-ccaa3*gcaa*t76660*t76714*t76732*t76663* \
                   t76739*6.0-ccaa3*gamma_aa[index]*gcaa*t76660*t76714*t76732*t76663*(t76714*t76658*6.0+gamma_aa[index]* \
                   gcaa*t76714*t76663*6.0)+ccaa3*gamma_aa[index]*gcaa*t76660*t76714*1.0/(t76724*t76724*t76724)*t76663* \
                   (t76739*t76739)*2.0)*2.0+1.0/(k*k*k*k)*(mu_*mu_)*1.0/(rho_a[index]*rho_a[index]*rho_a[index])*1.0/ \
                   pow(t76654,4.0/3.0)*t76755*1.0/pow(gamma_aa[index]*1.0/(k*k)*mu_*1.0/(rho_a[index]*rho_a[index])*t76755* \
                   t76756*(1.0/4.0)+1.0,3.0)*(X-1.0)*((a_1*t76759)/t76763+a_2*t76760*1.0/(t76763*t76763)+a_4*t76761*1.0/ \
                   (t76763*t76763*t76763*t76763)+a_8*t76762*1.0/(t76763*t76763*t76763*t76763*t76763*t76763*t76763*t76763) \
                   +a_10*t76760*t76762*1.0/pow(t76763,1.0E1)+a_3*t76760*1.0/(t76763*t76763*t76763)*t76759+a_5*t76761* \
                   1.0/(t76763*t76763*t76763*t76763*t76763)*t76759+a_6*t76760*t76761*1.0/(t76763*t76763*t76763*t76763* \
                   t76763*t76763)+a_9*t76762*1.0/(t76763*t76763*t76763*t76763*t76763*t76763*t76763*t76763*t76763)*t76759+ \
                   a_11*t76760*t76762*1.0/pow(t76763,1.1E1)*t76759+a_7*t76760*t76761*1.0/(t76763*t76763*t76763*t76763* \
                   t76763*t76763*t76763)*t76759+1.0)*(1.0/4.0);
            } else {
                v_gamma_aa_gamma_aa_[index] = 0.0;
            } 

        }
        if (is_meta_) {

            //V_rho_a_tau_a
            if (rho_a[index] > cutoff_) {
                double t76765 = pow(rho_a[index],5.0/3.0);
                double t76766 = 1.0/(tau_a[index]*tau_a[index]);
                double t76767 = 1.0/tau_a[index];
                double t76768 = C_k*t76765*t76767;
                double t76769 = t76768+1.0;
                double t76770 = t76768-1.0;
                double t76771 = 1.0/(t76769*t76769);
                double t76772 = t76770*t76770;
                double t76773 = t76772*t76772;
                double t76774 = t76773*t76773;
                double t76775 = 1.0/pow(t76769,1.1E1);
                double t76776 = 1.0/(t76769*t76769*t76769);
                double t76777 = 1.0/(t76769*t76769*t76769*t76769);
                double t76778 = 1.0/(t76769*t76769*t76769*t76769*t76769);
                double t76779 = 1.0/(t76769*t76769*t76769*t76769*t76769*t76769);
                double t76780 = 1.0/(t76769*t76769*t76769*t76769*t76769*t76769*t76769);
                double t76781 = 1.0/(t76769*t76769*t76769*t76769*t76769*t76769*t76769*t76769);
                double t76782 = 1.0/(t76769*t76769*t76769*t76769*t76769*t76769*t76769*t76769*t76769);
                double t76783 = 1.0/pow(t76769,1.0E1);
                double t76784 = 1.0/(k*k);
                double t76785 = 1.0/kp;
                double t76786 = 1.0/(rho_a[index]*rho_a[index]);
                double t76787 = rho_a[index]*2.0;
                double t76788 = 1.0/pow(t76787,2.0/3.0);
                double t76789 = gamma_aa[index]*mu_*t76784*t76785*t76786*t76788*(1.0/4.0);
                double t76790 = t76789+1.0;
                double t76791 = 1.0/t76790;
                double t76792 = kp-kp*t76791+1.0;
                double t76793 = C_k*C_k;
                double t76794 = pow(rho_a[index],7.0/3.0);
                double t76795 = 1.0/(tau_a[index]*tau_a[index]*tau_a[index]);
                double t76796 = 1.0/t76769;
                double t76797 = 1.0/pow(t76769,1.2E1);
                double t76798 = pow(rho_a[index],2.0/3.0);
                double t76799 = C_k*a_1*t76765*t76766*t76796;
                double t76800 = C_k*a_2*t76770*t76771*t76765*t76766*2.0;
                double t76801 = C_k*a_10*t76770*t76765*t76774*t76783*t76766*1.0E1;
                double t76802 = C_k*a_11*t76772*t76765*t76774*t76766*t76775*1.1E1;
                double t76803 = C_k*a_3*t76772*t76765*t76766*t76776*3.0;
                double t76804 = C_k*a_4*t76770*t76772*t76765*t76766*t76777*4.0;
                double t76805 = C_k*a_5*t76773*t76765*t76766*t76778*5.0;
                double t76806 = C_k*a_6*t76770*t76773*t76765*t76766*t76779*6.0;
                double t76807 = C_k*a_7*t76780*t76772*t76773*t76765*t76766*7.0;
                double t76808 = C_k*a_8*t76770*t76772*t76781*t76773*t76765*t76766*8.0;
                double t76809 = C_k*a_9*t76782*t76765*t76774*t76766*9.0;
                double t76810 = t76800+t76801+t76802+t76803+t76804+t76805+t76806+t76807+t76808+t76809+t76799-C_k* \
                   a_1*t76770*t76771*t76765*t76766-C_k*a_2*t76772*t76765*t76766*t76776*2.0-C_k*a_4*t76773*t76765*t76766* \
                   t76778*4.0-C_k*a_8*t76782*t76765*t76774*t76766*8.0-C_k*a_10*t76772*t76765*t76774*t76766*t76775*1.0E1- \
                   C_k*a_3*t76770*t76772*t76765*t76766*t76777*3.0-C_k*a_5*t76770*t76773*t76765*t76766*t76779*5.0-C_k* \
                   a_6*t76780*t76772*t76773*t76765*t76766*6.0-C_k*a_9*t76770*t76765*t76774*t76783*t76766*9.0-C_k*a_11* \
                   t76770*t76772*t76765*t76774*t76766*t76797*1.1E1-C_k*a_7*t76770*t76772*t76781*t76773*t76765*t76766* \
                   7.0;
                double t76811 = 1.0/pow(rho_a[index],1.0/3.0);
                double t76812 = c*t76811;
                double t76813 = sqrt(t76812);
                double t76814 = pow(t76812,3.0/2.0);
                double t76815 = c*c;
                double t76816 = 1.0/pow(rho_a[index],2.0/3.0);
                double t76817 = 1.0/c0p;
                double t76818 = b1p*t76813;
                double t76819 = b3p*t76814;
                double t76820 = b4p*t76815*t76816;
                double t76821 = b2p*c*t76811;
                double t76822 = t76820+t76821+t76818+t76819;
                double t76823 = 1.0/t76822;
                double t76824 = t76823*t76817*(1.0/2.0);
                double t76825 = t76824+1.0;
                double t76826 = log(t76825);
                double t76827 = a1p*c*t76811;
                double t76828 = t76827+1.0;
                double t76829 = tau_a[index]-1.0/1.0E20;
                double t76830 = tau_a[index]*2.0;
                double t76831 = 1.0/rho_a[index];
                double t76862 = gamma_aa[index]*t76831*(1.0/4.0);
                double t76832 = t76830-t76862;
                double t76833 = gamma_aa[index]*gamma_aa[index];
                double t76834 = gcaa*gcaa;
                double t76835 = t76833*t76833;
                double t76836 = t76834*t76834;
                double t76837 = 1.0/pow(rho_a[index],3.2E1/3.0);
                double t76838 = 1.0/pow(rho_a[index],8.0/3.0);
                double t76839 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t76840 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t76841 = pow(2.0,1.0/3.0);
                double t76842 = t76841*2.0;
                double t76843 = t76842-2.0;
                double t76844 = two_13*2.0;
                double t76845 = t76844-2.0;
                double t76846 = 1.0/t76845;
                double t76847 = 1.0/c0f;
                double t76848 = b1f*t76813;
                double t76849 = b3f*t76814;
                double t76850 = b4f*t76815*t76816;
                double t76851 = b2f*c*t76811;
                double t76852 = t76850+t76851+t76848+t76849;
                double t76853 = 1.0/t76852;
                double t76854 = t76853*t76847*(1.0/2.0);
                double t76855 = t76854+1.0;
                double t76856 = log(t76855);
                double t76857 = a1f*c*t76811;
                double t76858 = t76857+1.0;
                double t76859 = c0f*t76856*t76858*2.0;
                double t76860 = c0p*t76826*t76828*2.0;
                double t76861 = ( (t76829 > 0.0) ?  1.0 : 0.0 ) ;
                double t76892 = t76832*t76766*(1.0/2.0);
                double t76863 = -t76892+t76767;
                double t76864 = t76861*t76863;
                double t76865 = 0.0 ;
                double t76866 = t76832*t76767*(1.0/2.0);
                double t76867 = t76866-1.0;
                double t76868 = t76865*t76867;
                double t76869 = t76864+t76868;
                double t76870 = gamma_aa[index]*gcaa*t76838*4.0;
                double t76871 = gamma_aa[index]*gcaa*t76833*t76834*t76839*4.0;
                double t76872 = t76840*t76833*t76834*6.0;
                double t76873 = t76835*t76836*t76837;
                double t76874 = t76870+t76871+t76872+t76873+1.0;
                double t76875 = 1.0/t76874;
                double t76876 = gamma_aa[index]*gcaa*t76838;
                double t76877 = t76876+1.0;
                double t76878 = 1.0/t76877;
                double t76879 = gamma_aa[index]*gcaa*t76838*3.0;
                double t76880 = gamma_aa[index]*gcaa*t76833*t76834*t76839;
                double t76881 = t76840*t76833*t76834*3.0;
                double t76882 = t76880+t76881+t76879+1.0;
                double t76883 = 1.0/t76882;
                double t76884 = gamma_aa[index]*gcaa*t76838*2.0;
                double t76885 = t76840*t76833*t76834;
                double t76886 = t76884+t76885+1.0;
                double t76887 = 1.0/t76886;
                double t76888 = 1.0/pow(rho_a[index],1.9E1/3.0);
                double t76889 = 1.0/pow(rho_a[index],1.1E1/3.0);
                double t76890 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]*rho_a[index]);
                double t76891 = 1.0/pow(rho_a[index],3.5E1/3.0);
                double t76893 = 1.0/pow(rho_a[index],4.0/3.0);
                double t76894 = 1.0/pow(rho_a[index],5.0/3.0);
                double t76895 = 1.0/sqrt(t76812);
                double t76896 = 1.0/t76825;
                double t76897 = 1.0/(t76822*t76822);
                double t76898 = b4p*t76815*t76894*(2.0/3.0);
                double t76899 = b2p*c*t76893*(1.0/3.0);
                double t76900 = b1p*c*t76893*t76895*(1.0/6.0);
                double t76901 = b3p*c*t76813*t76893*(1.0/2.0);
                double t76902 = t76900+t76901+t76898+t76899;
                double t76903 = t76902*t76828*t76896*t76897;
                double t76904 = ccaa4*t76835*t76836*t76837*t76875;
                double t76905 = ccaa1*gamma_aa[index]*gcaa*t76838*t76878;
                double t76906 = ccaa3*gamma_aa[index]*gcaa*t76833*t76834*t76883*t76839;
                double t76907 = ccaa2*t76840*t76833*t76834*t76887;
                double t76908 = ccaa0+t76904+t76905+t76906+t76907;
                double t76909 = t76860-t76859;
                double t76911 = t76843*t76846*t76909;
                double t76910 = -t76911+t76860;
                v_rho_a_tau_a_[index] = (X-1.0)*(t76810*t76792+rho_a[index]*t76792*(C_k*a_1*t76766*t76796*t76798* \
                   (5.0/3.0)-a_1*t76771*t76793*t76794*t76795*(1.0E1/3.0)+a_2*t76771*t76793*t76794*t76795*(1.0E1/3.0)+ \
                   a_1*t76770*t76793*t76776*t76794*t76795*(1.0E1/3.0)+a_10*t76774*t76783*t76793*t76794*t76795*1.5E2-a_2* \
                   t76770*t76793*t76776*t76794*t76795*(4.0E1/3.0)+a_2*t76772*t76793*t76794*t76777*t76795*1.0E1+a_3*t76770* \
                   t76793*t76776*t76794*t76795*1.0E1-a_3*t76772*t76793*t76794*t76777*t76795*3.0E1+a_4*t76772*t76793*t76794* \
                   t76777*t76795*2.0E1+a_4*t76773*t76793*t76794*t76795*t76779*(1.0E2/3.0)-a_5*t76773*t76793*t76794*t76795* \
                   t76779*(2.5E2/3.0)+a_6*t76773*t76793*t76794*t76795*t76779*5.0E1+a_8*t76774*t76783*t76793*t76794*t76795* \
                   1.2E2-a_9*t76774*t76783*t76793*t76794*t76795*2.7E2-C_k*a_1*t76770*t76771*t76766*t76798*(5.0/3.0)+C_k* \
                   a_2*t76770*t76771*t76766*t76798*(1.0E1/3.0)-C_k*a_2*t76772*t76766*t76776*t76798*(1.0E1/3.0)+C_k*a_3* \
                   t76772*t76766*t76776*t76798*5.0-C_k*a_4*t76773*t76766*t76778*t76798*(2.0E1/3.0)+C_k*a_5*t76773*t76766* \
                   t76778*t76798*(2.5E1/3.0)-C_k*a_8*t76782*t76774*t76766*t76798*(4.0E1/3.0)+C_k*a_9*t76782*t76774*t76766* \
                   t76798*1.5E1+C_k*a_10*t76770*t76774*t76783*t76766*t76798*(5.0E1/3.0)-C_k*a_10*t76772*t76774*t76766* \
                   t76775*t76798*(5.0E1/3.0)+C_k*a_11*t76772*t76774*t76766*t76775*t76798*(5.5E1/3.0)-C_k*a_3*t76770*t76772* \
                   t76766*t76777*t76798*5.0+C_k*a_4*t76770*t76772*t76766*t76777*t76798*(2.0E1/3.0)-C_k*a_5*t76770*t76773* \
                   t76766*t76779*t76798*(2.5E1/3.0)-C_k*a_6*t76780*t76772*t76773*t76766*t76798*1.0E1+C_k*a_6*t76770*t76773* \
                   t76766*t76779*t76798*1.0E1+C_k*a_7*t76780*t76772*t76773*t76766*t76798*(3.5E1/3.0)-C_k*a_9*t76770*t76774* \
                   t76783*t76766*t76798*1.5E1-a_10*t76770*t76774*t76775*t76793*t76794*t76795*(1.0E3/3.0)+a_11*t76770* \
                   t76774*t76775*t76793*t76794*t76795*(5.5E2/3.0)+a_10*t76772*t76774*t76793*t76794*t76795*t76797*(5.5E2/ \
                   3.0)-a_11*t76772*t76774*t76793*t76794*t76795*t76797*(1.21E3/3.0)+a_3*t76770*t76772*t76793*t76794*t76795* \
                   t76778*2.0E1-a_4*t76770*t76772*t76793*t76794*t76795*t76778*(1.6E2/3.0)+a_5*t76770*t76780*t76773*t76793* \
                   t76794*t76795*5.0E1+a_5*t76770*t76772*t76793*t76794*t76795*t76778*(1.0E2/3.0)-a_6*t76770*t76780*t76773* \
                   t76793*t76794*t76795*1.2E2+a_6*t76772*t76781*t76773*t76793*t76794*t76795*7.0E1+a_7*t76770*t76780*t76773* \
                   t76793*t76794*t76795*7.0E1-a_7*t76772*t76781*t76773*t76793*t76794*t76795*(4.9E2/3.0)+a_8*t76772*t76781* \
                   t76773*t76793*t76794*t76795*(2.8E2/3.0)+a_9*t76770*t76774*t76775*t76793*t76794*t76795*1.5E2+a_11*t76770* \
                   t76772*t76774*t76793*t76794*t76795*1.0/pow(t76769,1.3E1)*2.2E2-C_k*a_11*t76770*t76772*t76774*t76766* \
                   t76797*t76798*(5.5E1/3.0)-C_k*a_7*t76770*t76772*t76781*t76773*t76766*t76798*(3.5E1/3.0)+C_k*a_8*t76770* \
                   t76772*t76781*t76773*t76766*t76798*(4.0E1/3.0)+a_7*t76770*t76772*t76773*t76782*t76793*t76794*t76795* \
                   (2.8E2/3.0)-a_8*t76770*t76772*t76773*t76782*t76793*t76794*t76795*(6.4E2/3.0)+a_9*t76770*t76772*t76773* \
                   t76782*t76793*t76794*t76795*1.2E2)-kp*rho_a[index]*t76810*1.0/(t76790*t76790)*(gamma_aa[index]*mu_* \
                   1.0/(rho_a[index]*rho_a[index]*rho_a[index])*t76784*t76785*t76788*(1.0/2.0)+gamma_aa[index]*mu_*t76784* \
                   t76785*t76786*1.0/pow(t76787,5.0/3.0)*(1.0/3.0)))-t76908*t76869*(t76860+t76843*t76846*(t76859-c0p* \
                   t76826*t76828*2.0))+rho_a[index]*t76908*t76869*(-t76903+t76843*t76846*(t76903-(1.0/(t76852*t76852) \
                   *t76858*(b2f*c*t76893*(1.0/3.0)+b4f*t76815*t76894*(2.0/3.0)+b1f*c*t76893*t76895*(1.0/6.0)+b3f*c*t76813* \
                   t76893*(1.0/2.0)))/t76855+a1f*c*c0f*t76856*t76893*(2.0/3.0)-a1p*c*c0p*t76826*t76893*(2.0/3.0))+a1p* \
                   c*c0p*t76826*t76893*(2.0/3.0))+rho_a[index]*t76910*t76869*(ccaa1*gamma_aa[index]*gcaa*t76878*t76889* \
                   (8.0/3.0)+ccaa4*t76835*t76836*t76891*t76875*(3.2E1/3.0)+ccaa2*t76833*t76834*t76887*t76888*(1.6E1/3.0) \
                   -ccaa1*t76833*t76834*1.0/(t76877*t76877)*t76888*(8.0/3.0)-ccaa2*t76840*t76833*t76834*1.0/(t76886*t76886) \
                   *(gamma_aa[index]*gcaa*t76889*(1.6E1/3.0)+t76833*t76834*t76888*(1.6E1/3.0))-ccaa4*t76835*t76836*t76837* \
                   1.0/(t76874*t76874)*(gamma_aa[index]*gcaa*t76889*(3.2E1/3.0)+t76835*t76836*t76891*(3.2E1/3.0)+t76833* \
                   t76834*t76888*3.2E1+gamma_aa[index]*gcaa*t76833*t76834*t76890*3.2E1)+ccaa3*gamma_aa[index]*gcaa*t76833* \
                   t76834*t76890*t76883*8.0-ccaa3*gamma_aa[index]*gcaa*t76833*t76834*1.0/(t76882*t76882)*t76839*(gamma_aa[index]* \
                   gcaa*t76889*8.0+t76833*t76834*t76888*1.6E1+gamma_aa[index]*gcaa*t76833*t76834*t76890*8.0))+gamma_aa[index]* \
                   t76910*t76831*t76861*t76908*t76766*(1.0/8.0)-gamma_aa[index]*t76910*t76831*t76908*t76865*t76767*(1.0/ \
                   8.0);
            } else {
                v_rho_a_tau_a_[index] = 0.0;
            } 

            //V_tau_a_tau_a
            if (rho_a[index] > cutoff_) {
                double t76913 = 1.0/pow(rho_a[index],1.0/3.0);
                double t76914 = c*t76913;
                double t76915 = sqrt(t76914);
                double t76916 = pow(t76914,3.0/2.0);
                double t76917 = c*c;
                double t76918 = 1.0/pow(rho_a[index],2.0/3.0);
                double t76919 = 1.0/c0p;
                double t76920 = b1p*t76915;
                double t76921 = b3p*t76916;
                double t76922 = b4p*t76917*t76918;
                double t76923 = b2p*c*t76913;
                double t76924 = t76920+t76921+t76922+t76923;
                double t76925 = 1.0/t76924;
                double t76926 = t76925*t76919*(1.0/2.0);
                double t76927 = t76926+1.0;
                double t76928 = log(t76927);
                double t76929 = a1p*c*t76913;
                double t76930 = t76929+1.0;
                double t76931 = 1.0/tau_a[index];
                double t76932 = tau_a[index]*2.0;
                double t76933 = 1.0/rho_a[index];
                double t76937 = gamma_aa[index]*t76933*(1.0/4.0);
                double t76934 = t76932-t76937;
                double t76935 = tau_a[index]-1.0/1.0E20;
                double t76936 = 1.0/(tau_a[index]*tau_a[index]);
                double t76938 = gamma_aa[index]*gamma_aa[index];
                double t76939 = gcaa*gcaa;
                double t76940 = t76938*t76938;
                double t76941 = t76939*t76939;
                double t76942 = 1.0/pow(rho_a[index],3.2E1/3.0);
                double t76943 = 1.0/pow(rho_a[index],8.0/3.0);
                double t76944 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t76945 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t76946 = C_k*C_k;
                double t76947 = pow(rho_a[index],1.0E1/3.0);
                double t76948 = 1.0/(tau_a[index]*tau_a[index]*tau_a[index]*tau_a[index]);
                double t76949 = pow(rho_a[index],5.0/3.0);
                double t76950 = C_k*t76931*t76949;
                double t76951 = t76950+1.0;
                double t76952 = 1.0/(t76951*t76951);
                double t76953 = 1.0/(tau_a[index]*tau_a[index]*tau_a[index]);
                double t76954 = t76950-1.0;
                double t76955 = t76954*t76954;
                double t76956 = t76955*t76955;
                double t76957 = t76956*t76956;
                double t76958 = 1.0/pow(t76951,1.1E1);
                double t76959 = 1.0/pow(t76951,1.2E1);
                double t76960 = 1.0/(t76951*t76951*t76951*t76951);
                double t76961 = 1.0/(t76951*t76951*t76951*t76951*t76951);
                double t76962 = 1.0/(t76951*t76951*t76951*t76951*t76951*t76951);
                double t76963 = 1.0/(t76951*t76951*t76951*t76951*t76951*t76951*t76951);
                double t76964 = 1.0/(t76951*t76951*t76951*t76951*t76951*t76951*t76951*t76951);
                double t76965 = 1.0/(t76951*t76951*t76951*t76951*t76951*t76951*t76951*t76951*t76951);
                double t76966 = 1.0/pow(t76951,1.0E1);
                double t76967 = 1.0/(t76951*t76951*t76951);
                v_tau_a_tau_a_[index] = -rho_a[index]*(X-1.0)*(kp-kp/((gamma_aa[index]*1.0/(k*k)*mu_*1.0/(rho_a[index]* \
                   rho_a[index])*1.0/pow(rho_a[index]*2.0,2.0/3.0)*(1.0/4.0))/kp+1.0)+1.0)*(a_1*t76952*t76946*t76947* \
                   t76948*-2.0+a_2*t76952*t76946*t76947*t76948*2.0+(C_k*a_1*t76953*t76949*2.0)/t76951+a_1*t76954*t76946* \
                   t76947*t76948*t76967*2.0+a_10*t76946*t76947*t76948*t76957*t76966*9.0E1+a_2*t76960*t76946*t76955*t76947* \
                   t76948*6.0-a_2*t76954*t76946*t76947*t76948*t76967*8.0-a_3*t76960*t76946*t76955*t76947*t76948*1.8E1+ \
                   a_3*t76954*t76946*t76947*t76948*t76967*6.0+a_4*t76960*t76946*t76955*t76947*t76948*1.2E1+a_4*t76962* \
                   t76946*t76947*t76956*t76948*2.0E1-a_5*t76962*t76946*t76947*t76956*t76948*5.0E1+a_6*t76962*t76946*t76947* \
                   t76956*t76948*3.0E1+a_8*t76946*t76947*t76948*t76957*t76966*7.2E1-a_9*t76946*t76947*t76948*t76957*t76966* \
                   1.62E2-C_k*a_1*t76952*t76953*t76954*t76949*2.0+C_k*a_2*t76952*t76953*t76954*t76949*4.0-C_k*a_2*t76953* \
                   t76955*t76949*t76967*4.0+C_k*a_3*t76953*t76955*t76949*t76967*6.0-C_k*a_4*t76961*t76953*t76956*t76949* \
                   8.0+C_k*a_5*t76961*t76953*t76956*t76949*1.0E1-C_k*a_8*t76953*t76965*t76957*t76949*1.6E1+C_k*a_9*t76953* \
                   t76965*t76957*t76949*1.8E1+C_k*a_10*t76953*t76954*t76957*t76966*t76949*2.0E1-C_k*a_10*t76953*t76955* \
                   t76957*t76949*t76958*2.0E1+C_k*a_11*t76953*t76955*t76957*t76949*t76958*2.2E1-C_k*a_3*t76960*t76953* \
                   t76954*t76955*t76949*6.0+C_k*a_4*t76960*t76953*t76954*t76955*t76949*8.0-C_k*a_5*t76953*t76962*t76954* \
                   t76956*t76949*1.0E1+C_k*a_6*t76953*t76962*t76954*t76956*t76949*1.2E1-C_k*a_6*t76953*t76963*t76955* \
                   t76956*t76949*1.2E1+C_k*a_7*t76953*t76963*t76955*t76956*t76949*1.4E1-C_k*a_9*t76953*t76954*t76957* \
                   t76966*t76949*1.8E1-a_10*t76954*t76946*t76947*t76948*t76957*t76958*2.0E2+a_11*t76954*t76946*t76947* \
                   t76948*t76957*t76958*1.1E2+a_10*t76946*t76955*t76947*t76948*t76957*t76959*1.1E2-a_11*t76946*t76955* \
                   t76947*t76948*t76957*t76959*2.42E2+a_3*t76961*t76954*t76946*t76955*t76947*t76948*1.2E1-a_4*t76961* \
                   t76954*t76946*t76955*t76947*t76948*3.2E1+a_5*t76961*t76954*t76946*t76955*t76947*t76948*2.0E1+a_5*t76954* \
                   t76963*t76946*t76947*t76956*t76948*3.0E1-a_6*t76954*t76963*t76946*t76947*t76956*t76948*7.2E1+a_6*t76946* \
                   t76955*t76964*t76947*t76956*t76948*4.2E1+a_7*t76954*t76963*t76946*t76947*t76956*t76948*4.2E1-a_7*t76946* \
                   t76955*t76964*t76947*t76956*t76948*9.8E1+a_8*t76946*t76955*t76964*t76947*t76956*t76948*5.6E1+a_9*t76954* \
                   t76946*t76947*t76948*t76957*t76958*9.0E1+a_11*1.0/pow(t76951,1.3E1)*t76954*t76946*t76955*t76947*t76948* \
                   t76957*1.32E2-C_k*a_11*t76953*t76954*t76955*t76957*t76949*t76959*2.2E1-C_k*a_7*t76953*t76954*t76955* \
                   t76964*t76956*t76949*1.4E1+C_k*a_8*t76953*t76954*t76955*t76964*t76956*t76949*1.6E1+a_7*t76954*t76946* \
                   t76955*t76947*t76956*t76965*t76948*5.6E1-a_8*t76954*t76946*t76955*t76947*t76956*t76965*t76948*1.28E2+ \
                   a_9*t76954*t76946*t76955*t76947*t76956*t76965*t76948*7.2E1)-rho_a[index]*(((pow(2.0,1.0/3.0)*2.0-2.0) \
                   *(c0f*log((1.0/2.0)/(c0f*(b1f*t76915+b3f*t76916+b2f*c*t76913+b4f*t76917*t76918))+1.0)*(a1f*c*t76913+ \
                   1.0)*2.0-c0p*t76930*t76928*2.0))/(two_13*2.0-2.0)+c0p*t76930*t76928*2.0)*( 0.0 - ( (t76935 > 0.0)  \
                   ? 1.0*(t76936*2.0-t76934*t76953) : 0.0 ) + 0.0 )*(ccaa0+(ccaa2*t76945*t76938*t76939)/(gamma_aa[index]* \
                   gcaa*t76943*2.0+t76945*t76938*t76939+1.0)+(ccaa1*gamma_aa[index]*gcaa*t76943)/(gamma_aa[index]*gcaa* \
                   t76943+1.0)+(ccaa4*t76940*t76941*t76942)/(gamma_aa[index]*gcaa*t76943*4.0+t76940*t76941*t76942+t76945* \
                   t76938*t76939*6.0+gamma_aa[index]*gcaa*t76944*t76938*t76939*4.0+1.0)+(ccaa3*gamma_aa[index]*gcaa*t76944* \
                   t76938*t76939)/(gamma_aa[index]*gcaa*t76943*3.0+t76945*t76938*t76939*3.0+gamma_aa[index]*gcaa*t76944* \
                   t76938*t76939+1.0));
            } else {
                v_tau_a_tau_a_[index] = 0.0;
            } 

            if (is_gga_) {

                //V_gamma_aa_tau_a
                if (rho_a[index] > cutoff_) {
                    double t76969 = 1.0/pow(rho_a[index],1.0/3.0);
                    double t76970 = c*t76969;
                    double t76971 = sqrt(t76970);
                    double t76972 = pow(t76970,3.0/2.0);
                    double t76973 = c*c;
                    double t76974 = 1.0/pow(rho_a[index],2.0/3.0);
                    double t76975 = 1.0/c0p;
                    double t76976 = b1p*t76971;
                    double t76977 = b3p*t76972;
                    double t76978 = b4p*t76973*t76974;
                    double t76979 = b2p*c*t76969;
                    double t76980 = t76976+t76977+t76978+t76979;
                    double t76981 = 1.0/t76980;
                    double t76982 = t76981*t76975*(1.0/2.0);
                    double t76983 = t76982+1.0;
                    double t76984 = log(t76983);
                    double t76985 = a1p*c*t76969;
                    double t76986 = t76985+1.0;
                    double t76987 = tau_a[index]-1.0/1.0E20;
                    double t76988 = 1.0/tau_a[index];
                    double t76989 = tau_a[index]*2.0;
                    double t76990 = 1.0/rho_a[index];
                    double t76991 = t76989-gamma_aa[index]*t76990*(1.0/4.0);
                    double t76992 = 1.0/pow(rho_a[index],8.0/3.0);
                    double t76993 = gamma_aa[index]*gamma_aa[index];
                    double t76994 = gcaa*gcaa;
                    double t76995 = t76994*t76994;
                    double t76996 = 1.0/pow(rho_a[index],3.2E1/3.0);
                    double t76997 = 1.0/pow(rho_a[index],1.6E1/3.0);
                    double t76998 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                       rho_a[index]*rho_a[index]);
                    double t76999 = gamma_aa[index]*gcaa*t76992;
                    double t77000 = t76999+1.0;
                    double t77001 = gamma_aa[index]*gcaa*t76992*3.0;
                    double t77002 = gamma_aa[index]*gcaa*t76993*t76994*t76998;
                    double t77003 = t76993*t76994*t76997*3.0;
                    double t77004 = t77001+t77002+t77003+1.0;
                    double t77005 = t76993*t76993;
                    double t77006 = gamma_aa[index]*gcaa*t76992*4.0;
                    double t77007 = gamma_aa[index]*gcaa*t76993*t76994*t76998*4.0;
                    double t77008 = t76993*t76994*t76997*6.0;
                    double t77009 = t76995*t76996*t77005;
                    double t77010 = t77006+t77007+t77008+t77009+1.0;
                    double t77011 = gamma_aa[index]*gcaa*t76992*2.0;
                    double t77012 = t76993*t76994*t76997;
                    double t77013 = t77011+t77012+1.0;
                    double t77014 = pow(2.0,1.0/3.0);
                    double t77015 = t77014*2.0;
                    double t77016 = t77015-2.0;
                    double t77017 = two_13*2.0;
                    double t77018 = t77017-2.0;
                    double t77019 = 1.0/t77018;
                    double t77020 = 1.0/c0f;
                    double t77021 = b1f*t76971;
                    double t77022 = b3f*t76972;
                    double t77023 = b4f*t76973*t76974;
                    double t77024 = b2f*c*t76969;
                    double t77025 = t77021+t77022+t77023+t77024;
                    double t77026 = 1.0/t77025;
                    double t77027 = t77020*t77026*(1.0/2.0);
                    double t77028 = t77027+1.0;
                    double t77029 = log(t77028);
                    double t77030 = a1f*c*t76969;
                    double t77031 = t77030+1.0;
                    double t77032 = c0f*t77031*t77029*2.0;
                    double t77033 = c0p*t76984*t76986*2.0;
                    double t77034 = 0.0 ;
                    double t77035 = 1.0/(tau_a[index]*tau_a[index]);
                    double t77036 = ( (t76987 > 0.0) ?  1.0 : 0.0 ) ;
                    double t77037 = 1.0/t77010;
                    double t77038 = 1.0/t77000;
                    double t77039 = 1.0/t77004;
                    double t77040 = 1.0/t77013;
                    double t77041 = 1.0/(k*k);
                    double t77042 = rho_a[index]*2.0;
                    double t77043 = 1.0/pow(t77042,2.0/3.0);
                    double t77044 = pow(rho_a[index],5.0/3.0);
                    double t77045 = C_k*t76988*t77044;
                    double t77046 = t77045+1.0;
                    double t77047 = t77045-1.0;
                    double t77048 = 1.0/(t77046*t77046);
                    double t77049 = t77047*t77047;
                    double t77050 = t77049*t77049;
                    double t77051 = t77050*t77050;
                    double t77052 = 1.0/pow(t77046,1.1E1);
                    double t77053 = 1.0/(t77046*t77046*t77046);
                    double t77054 = 1.0/(t77046*t77046*t77046*t77046);
                    double t77055 = 1.0/(t77046*t77046*t77046*t77046*t77046);
                    double t77056 = 1.0/(t77046*t77046*t77046*t77046*t77046*t77046);
                    double t77057 = 1.0/(t77046*t77046*t77046*t77046*t77046*t77046*t77046);
                    double t77058 = 1.0/(t77046*t77046*t77046*t77046*t77046*t77046*t77046*t77046);
                    double t77059 = 1.0/(t77046*t77046*t77046*t77046*t77046*t77046*t77046*t77046*t77046);
                    double t77060 = 1.0/pow(t77046,1.0E1);
                    v_gamma_aa_tau_a_[index] = rho_a[index]*(t77033+t77016*t77019*(t77032-t77033))*(t76990*t76988*t77034* \
                       (1.0/8.0)-t76990*t77035*t77036*(1.0/8.0))*(ccaa0+ccaa1*gamma_aa[index]*gcaa*t76992*t77038+ccaa2*t76993* \
                       t76994*t76997*t77040+ccaa4*t76995*t76996*t77005*t77037+ccaa3*gamma_aa[index]*gcaa*t76993*t76994*t76998* \
                       t77039)-rho_a[index]*(t77033+t77016*t77019*(t77032-c0p*t76984*t76986*2.0))*(t77034*(t76991*t76988* \
                       (1.0/2.0)-1.0)+t77036*(t76988-t76991*t77035*(1.0/2.0)))*(ccaa1*gcaa*t76992*t77038+ccaa2*gamma_aa[index]* \
                       t76994*t76997*t77040*2.0-ccaa1*gamma_aa[index]*t76994*t76997*1.0/(t77000*t77000)-ccaa2*t76993*t76994* \
                       t76997*1.0/(t77013*t77013)*(gcaa*t76992*2.0+gamma_aa[index]*t76994*t76997*2.0)-ccaa4*t76995*t76996* \
                       1.0/(t77010*t77010)*t77005*(gcaa*t76992*4.0+gamma_aa[index]*t76994*t76997*1.2E1+gamma_aa[index]*t76993* \
                       t76995*t76996*4.0+gcaa*t76993*t76994*t76998*1.2E1)+ccaa4*gamma_aa[index]*t76993*t76995*t76996*t77037* \
                       4.0+ccaa3*gcaa*t76993*t76994*t76998*t77039*3.0-ccaa3*gamma_aa[index]*gcaa*t76993*t76994*t76998*1.0/ \
                       (t77004*t77004)*(gcaa*t76992*3.0+gamma_aa[index]*t76994*t76997*6.0+gcaa*t76993*t76994*t76998*3.0)) \
                       +mu_*t76990*t77041*t77043*1.0/pow((gamma_aa[index]*mu_*1.0/(rho_a[index]*rho_a[index])*t77041*t77043* \
                       (1.0/4.0))/kp+1.0,2.0)*(X-1.0)*((C_k*a_1*t77035*t77044)/t77046-C_k*a_1*t77035*t77044*t77047*t77048- \
                       C_k*a_2*t77035*t77044*t77053*t77049*2.0+C_k*a_2*t77035*t77044*t77047*t77048*2.0+C_k*a_3*t77035*t77044* \
                       t77053*t77049*3.0-C_k*a_4*t77050*t77035*t77044*t77055*4.0+C_k*a_5*t77050*t77035*t77044*t77055*5.0- \
                       C_k*a_8*t77051*t77035*t77044*t77059*8.0+C_k*a_9*t77051*t77035*t77044*t77059*9.0+C_k*a_10*t77051*t77060* \
                       t77035*t77044*t77047*1.0E1-C_k*a_10*t77051*t77052*t77035*t77044*t77049*1.0E1+C_k*a_11*t77051*t77052* \
                       t77035*t77044*t77049*1.1E1-C_k*a_3*t77035*t77044*t77054*t77047*t77049*3.0+C_k*a_4*t77035*t77044*t77054* \
                       t77047*t77049*4.0-C_k*a_5*t77050*t77035*t77044*t77047*t77056*5.0+C_k*a_6*t77050*t77035*t77044*t77047* \
                       t77056*6.0-C_k*a_6*t77050*t77035*t77044*t77057*t77049*6.0+C_k*a_7*t77050*t77035*t77044*t77057*t77049* \
                       7.0-C_k*a_9*t77051*t77060*t77035*t77044*t77047*9.0-C_k*a_11*t77051*t77035*t77044*1.0/pow(t77046,1.2E1) \
                       *t77047*t77049*1.1E1-C_k*a_7*t77050*t77035*t77044*t77047*t77049*t77058*7.0+C_k*a_8*t77050*t77035*t77044* \
                       t77047*t77049*t77058*8.0)*(1.0/4.0);
                } else {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } 

            }
        }
    }
}
void M05_Functional::computeUKSFunctional(boost::shared_ptr<UKSFunctions> prop)
{
    int ntrue = prop->npoints();

    const double* restrict rho_a;
    const double* restrict rho_b;
    const double* restrict gamma_aa;
    const double* restrict gamma_ab;
    const double* restrict gamma_bb;
    const double* restrict tau_a;
    const double* restrict tau_b;

    rho_a = prop->property_value("RHO_A")->pointer();
    rho_b = prop->property_value("RHO_B")->pointer();
    if (is_gga_) {
        gamma_aa = prop->property_value("GAMMA_AA")->pointer();
        gamma_ab = prop->property_value("GAMMA_AB")->pointer();
        gamma_bb = prop->property_value("GAMMA_BB")->pointer();
    }
    if (is_meta_) {
        tau_a = prop->property_value("TAU_A")->pointer();
        tau_b = prop->property_value("TAU_B")->pointer();
    }

    double X = params_[0].second;
    double C_k = params_[1].second;
    double k = params_[2].second;
    double e = params_[3].second;
    double kp = params_[4].second;
    double mu_ = params_[5].second;
    double a_1 = params_[6].second;
    double a_2 = params_[7].second;
    double a_3 = params_[8].second;
    double a_4 = params_[9].second;
    double a_5 = params_[10].second;
    double a_6 = params_[11].second;
    double a_7 = params_[12].second;
    double a_8 = params_[13].second;
    double a_9 = params_[14].second;
    double a_10 = params_[15].second;
    double a_11 = params_[16].second;
    double two_13 = params_[17].second;
    double d2fz0 = params_[18].second;
    double c = params_[19].second;
    double Aa = params_[20].second;
    double a1a = params_[21].second;
    double b1a = params_[22].second;
    double b2a = params_[23].second;
    double b3a = params_[24].second;
    double b4a = params_[25].second;
    double c0p = params_[26].second;
    double a1p = params_[27].second;
    double b1p = params_[28].second;
    double b2p = params_[29].second;
    double b3p = params_[30].second;
    double b4p = params_[31].second;
    double c0f = params_[32].second;
    double a1f = params_[33].second;
    double b1f = params_[34].second;
    double b2f = params_[35].second;
    double b3f = params_[36].second;
    double b4f = params_[37].second;
    double gcab = params_[38].second;
    double gcaa = params_[39].second;
    double ccab0 = params_[40].second;
    double ccab1 = params_[41].second;
    double ccab2 = params_[42].second;
    double ccab3 = params_[43].second;
    double ccab4 = params_[44].second;
    double ccaa0 = params_[45].second;
    double ccaa1 = params_[46].second;
    double ccaa2 = params_[47].second;
    double ccaa3 = params_[48].second;
    double ccaa4 = params_[49].second;

    //Functional
    for (int index = 0; index < ntrue; index++) {

        //Functional Value
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t68976 = pow(rho_a[index],5.0/3.0);
            double t68977 = 1.0/tau_a[index];
            double t68978 = C_k*t68976*t68977;
            double t68979 = t68978-1.0;
            double t68980 = t68979*t68979;
            double t68981 = t68980*t68980;
            double t68982 = t68981*t68981;
            double t68983 = t68978+1.0;
            double t68984 = 1.0/(k*k);
            double t68985 = 1.0/kp;
            double t68986 = pow(rho_b[index],5.0/3.0);
            double t68987 = 1.0/tau_b[index];
            double t68988 = C_k*t68986*t68987;
            double t68989 = t68988-1.0;
            double t68990 = t68989*t68989;
            double t68991 = t68990*t68990;
            double t68992 = t68991*t68991;
            double t68993 = t68988+1.0;
            double t68994 = 1.0/pow(rho_a[index],1.0/3.0);
            double t68995 = c*t68994;
            double t68996 = sqrt(t68995);
            double t68997 = pow(t68995,3.0/2.0);
            double t68998 = c*c;
            double t68999 = 1.0/pow(rho_a[index],2.0/3.0);
            double t69000 = 1.0/c0p;
            double t69001 = b1p*t68996;
            double t69002 = b3p*t68997;
            double t69003 = b4p*t68998*t68999;
            double t69004 = b2p*c*t68994;
            double t69005 = t69001+t69002+t69003+t69004;
            double t69006 = 1.0/t69005;
            double t69007 = t69000*t69006*(1.0/2.0);
            double t69008 = t69007+1.0;
            double t69009 = log(t69008);
            double t69010 = a1p*c*t68994;
            double t69011 = t69010+1.0;
            double t69012 = pow(2.0,1.0/3.0);
            double t69013 = t69012*2.0;
            double t69014 = t69013-2.0;
            double t69015 = two_13*2.0;
            double t69016 = t69015-2.0;
            double t69017 = 1.0/t69016;
            double t69018 = 1.0/c0f;
            double t69019 = 1.0/pow(rho_b[index],1.0/3.0);
            double t69020 = c*t69019;
            double t69021 = sqrt(t69020);
            double t69022 = pow(t69020,3.0/2.0);
            double t69023 = 1.0/pow(rho_b[index],2.0/3.0);
            double t69024 = b1p*t69021;
            double t69025 = b3p*t69022;
            double t69026 = b4p*t68998*t69023;
            double t69027 = b2p*c*t69019;
            double t69028 = t69024+t69025+t69026+t69027;
            double t69029 = 1.0/t69028;
            double t69030 = t69000*t69029*(1.0/2.0);
            double t69031 = t69030+1.0;
            double t69032 = log(t69031);
            double t69033 = a1p*c*t69019;
            double t69034 = t69033+1.0;
            double t69035 = c0p*t69032*t69034*2.0;
            double t69036 = rho_a[index]+rho_b[index];
            double t69037 = 1.0/pow(t69036,1.0/3.0);
            double t69038 = c*t69037;
            double t69039 = sqrt(t69038);
            double t69040 = pow(t69038,3.0/2.0);
            double t69041 = 1.0/pow(t69036,2.0/3.0);
            double t69042 = b1p*t69039;
            double t69043 = b3p*t69040;
            double t69044 = b4p*t68998*t69041;
            double t69045 = b2p*c*t69037;
            double t69046 = t69042+t69043+t69044+t69045;
            double t69047 = 1.0/t69046;
            double t69048 = t69000*t69047*(1.0/2.0);
            double t69049 = t69048+1.0;
            double t69050 = log(t69049);
            double t69051 = a1p*c*t69037;
            double t69052 = t69051+1.0;
            double t69053 = c0p*t69050*t69052*2.0;
            double t69054 = rho_a[index]-rho_b[index];
            double t69055 = t69054*t69054;
            double t69056 = 1.0/t69036;
            double t69057 = t69054*t69056;
            double t69058 = 1.0/(t69036*t69036*t69036*t69036);
            double t69059 = t69055*t69055;
            double t69060 = t69057+1.0;
            double t69061 = pow(t69060,4.0/3.0);
            double t69062 = -t69057+1.0;
            double t69063 = pow(t69062,4.0/3.0);
            double t69064 = t69061+t69063-2.0;
            double t69067 = 1.0/pow(rho_a[index],8.0/3.0);
            double t69068 = gamma_aa[index]*t69067*(1.0/2.0);
            double t69069 = 1.0/pow(rho_b[index],8.0/3.0);
            double t69070 = gamma_bb[index]*t69069*(1.0/2.0);
            double t69065 = t69070+t69068;
            double t69066 = gcab*gcab;
            double t69071 = t69065*t69065;
            double t69072 = t69066*t69066;
            double t69073 = t69071*t69071;
            double t69074 = c0p*t69011*t69009*2.0;
            double t69075 = b1f*t68996;
            double t69076 = b3f*t68997;
            double t69077 = b4f*t68998*t68999;
            double t69078 = b2f*c*t68994;
            double t69079 = t69075+t69076+t69077+t69078;
            double t69080 = 1.0/t69079;
            double t69081 = t69080*t69018*(1.0/2.0);
            double t69082 = t69081+1.0;
            double t69083 = log(t69082);
            double t69084 = a1f*c*t68994;
            double t69085 = t69084+1.0;
            double t69086 = t69074-c0f*t69083*t69085*2.0;
            double t69087 = t69074-t69014*t69017*t69086;
            double t69088 = gamma_aa[index]*gamma_aa[index];
            double t69089 = gcaa*gcaa;
            double t69090 = t69088*t69088;
            double t69091 = t69089*t69089;
            double t69092 = 1.0/pow(rho_a[index],3.2E1/3.0);
            double t69093 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]);
            double t69094 = 1.0/pow(rho_a[index],1.6E1/3.0);
            double t69095 = b1f*t69021;
            double t69096 = b3f*t69022;
            double t69097 = b4f*t68998*t69023;
            double t69098 = b2f*c*t69019;
            double t69099 = t69095+t69096+t69097+t69098;
            double t69100 = 1.0/t69099;
            double t69101 = t69100*t69018*(1.0/2.0);
            double t69102 = t69101+1.0;
            double t69103 = log(t69102);
            double t69104 = a1f*c*t69019;
            double t69105 = t69104+1.0;
            double t69106 = t69035-c0f*t69103*t69105*2.0;
            double t69107 = t69035-t69014*t69106*t69017;
            double t69108 = gamma_bb[index]*gamma_bb[index];
            double t69109 = t69108*t69108;
            double t69110 = 1.0/pow(rho_b[index],3.2E1/3.0);
            double t69111 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
               rho_b[index]*rho_b[index]);
            double t69112 = 1.0/pow(rho_b[index],1.6E1/3.0);
            functional_[index] = (rho_b[index]*t69107+rho_a[index]*t69087-t69036*(t69053-t69017*t69064*t69058* \
               t69059*(t69053-c0f*log((t69018*(1.0/2.0))/(b1f*t69039+b3f*t69040+b2f*c*t69037+b4f*t68998*t69041)+1.0) \
               *(a1f*c*t69037+1.0)*2.0)+(Aa*t69017*t69064*log((1.0/2.0)/(Aa*(b1a*t69039+b3a*t69040+b2a*c*t69037+b4a* \
               t68998*t69041))+1.0)*(t69058*t69059-1.0)*(a1a*c*t69037+1.0)*2.0)/d2fz0))*(ccab0+(ccab4*t69072*t69073) \
               /(gcab*t69065*4.0+t69072*t69073+t69071*t69066*6.0+gcab*t69071*t69065*t69066*4.0+1.0)+(ccab1*gcab*t69065) \
               /(gcab*t69065+1.0)+(ccab2*t69071*t69066)/(gcab*t69065*2.0+t69071*t69066+1.0)+(ccab3*gcab*t69071*t69065* \
               t69066)/(gcab*t69065*3.0+t69071*t69066*3.0+gcab*t69071*t69065*t69066+1.0))-(rho_a[index]*(kp-kp/(gamma_aa[index]* \
               mu_*1.0/(rho_a[index]*rho_a[index])*t68984*t68985*1.0/pow(rho_a[index]*2.0,2.0/3.0)*(1.0/4.0)+1.0) \
               +1.0)*((a_1*t68979)/t68983+a_2*t68980*1.0/(t68983*t68983)+a_4*t68981*1.0/(t68983*t68983*t68983*t68983) \
               +a_8*t68982*1.0/(t68983*t68983*t68983*t68983*t68983*t68983*t68983*t68983)+a_10*t68980*t68982*1.0/pow(t68983,1.0E1) \
               +a_3*t68980*1.0/(t68983*t68983*t68983)*t68979+a_5*t68981*1.0/(t68983*t68983*t68983*t68983*t68983)* \
               t68979+a_6*t68980*t68981*1.0/(t68983*t68983*t68983*t68983*t68983*t68983)+a_9*t68982*1.0/(t68983*t68983* \
               t68983*t68983*t68983*t68983*t68983*t68983*t68983)*t68979+a_11*t68980*t68982*1.0/pow(t68983,1.1E1)* \
               t68979+a_7*t68980*t68981*1.0/(t68983*t68983*t68983*t68983*t68983*t68983*t68983)*t68979+1.0)+rho_b[index]* \
               (kp-kp/(gamma_bb[index]*mu_*1.0/(rho_b[index]*rho_b[index])*t68984*t68985*1.0/pow(rho_b[index]*2.0,2.0/ \
               3.0)*(1.0/4.0)+1.0)+1.0)*((a_1*t68989)/t68993+a_2*t68990*1.0/(t68993*t68993)+a_4*t68991*1.0/(t68993* \
               t68993*t68993*t68993)+a_8*t68992*1.0/(t68993*t68993*t68993*t68993*t68993*t68993*t68993*t68993)+a_10* \
               t68990*t68992*1.0/pow(t68993,1.0E1)+a_3*t68990*1.0/(t68993*t68993*t68993)*t68989+a_5*t68991*1.0/(t68993* \
               t68993*t68993*t68993*t68993)*t68989+a_6*t68990*t68991*1.0/(t68993*t68993*t68993*t68993*t68993*t68993) \
               +a_9*t68992*1.0/(t68993*t68993*t68993*t68993*t68993*t68993*t68993*t68993*t68993)*t68989+a_11*t68990* \
               t68992*1.0/pow(t68993,1.1E1)*t68989+a_7*t68990*t68991*1.0/(t68993*t68993*t68993*t68993*t68993*t68993* \
               t68993)*t68989+1.0))*(X-1.0)-rho_b[index]*t69107*( ( (tau_b[index]-1.0/1.0E20 > 0.0) ? 1.0*(t68987* \
               (tau_b[index]*2.0-(gamma_bb[index]*(1.0/4.0))/rho_b[index])*(1.0/2.0)-1.0) : 0.0 ) +1.0)*(ccaa0+(ccaa2* \
               t69112*t69108*t69089)/(gamma_bb[index]*gcaa*t69069*2.0+t69112*t69108*t69089+1.0)+(ccaa1*gamma_bb[index]* \
               gcaa*t69069)/(gamma_bb[index]*gcaa*t69069+1.0)+(ccaa4*t69110*t69091*t69109)/(gamma_bb[index]*gcaa* \
               t69069*4.0+t69110*t69091*t69109+t69112*t69108*t69089*6.0+gamma_bb[index]*gcaa*t69111*t69108*t69089* \
               4.0+1.0)+(ccaa3*gamma_bb[index]*gcaa*t69111*t69108*t69089)/(gamma_bb[index]*gcaa*t69069*3.0+t69112* \
               t69108*t69089*3.0+gamma_bb[index]*gcaa*t69111*t69108*t69089+1.0))-rho_a[index]*t69087*( ( (tau_a[index]- \
               1.0/1.0E20 > 0.0) ? 1.0*(t68977*(tau_a[index]*2.0-(gamma_aa[index]*(1.0/4.0))/rho_a[index])*(1.0/2.0) \
               -1.0) : 0.0 ) +1.0)*(ccaa0+(ccaa2*t69094*t69088*t69089)/(gamma_aa[index]*gcaa*t69067*2.0+t69094*t69088* \
               t69089+1.0)+(ccaa1*gamma_aa[index]*gcaa*t69067)/(gamma_aa[index]*gcaa*t69067+1.0)+(ccaa4*t69090*t69091* \
               t69092)/(gamma_aa[index]*gcaa*t69067*4.0+t69090*t69091*t69092+t69094*t69088*t69089*6.0+gamma_aa[index]* \
               gcaa*t69093*t69088*t69089*4.0+1.0)+(ccaa3*gamma_aa[index]*gcaa*t69093*t69088*t69089)/(gamma_aa[index]* \
               gcaa*t69067*3.0+t69094*t69088*t69089*3.0+gamma_aa[index]*gcaa*t69093*t69088*t69089+1.0));
        } else if (rho_a[index] > cutoff_) {
            double t74479 = pow(rho_a[index],5.0/3.0);
            double t74480 = 1.0/tau_a[index];
            double t74481 = C_k*t74480*t74479;
            double t74482 = t74481-1.0;
            double t74483 = t74482*t74482;
            double t74484 = t74483*t74483;
            double t74485 = t74484*t74484;
            double t74486 = t74481+1.0;
            double t74487 = 1.0/pow(rho_a[index],1.0/3.0);
            double t74488 = c*t74487;
            double t74489 = sqrt(t74488);
            double t74490 = pow(t74488,3.0/2.0);
            double t74491 = c*c;
            double t74492 = 1.0/pow(rho_a[index],2.0/3.0);
            double t74493 = 1.0/c0p;
            double t74494 = b1p*t74489;
            double t74495 = b3p*t74490;
            double t74496 = b4p*t74491*t74492;
            double t74497 = b2p*c*t74487;
            double t74498 = t74494+t74495+t74496+t74497;
            double t74499 = 1.0/t74498;
            double t74500 = t74493*t74499*(1.0/2.0);
            double t74501 = t74500+1.0;
            double t74502 = log(t74501);
            double t74503 = a1p*c*t74487;
            double t74504 = t74503+1.0;
            double t74505 = gamma_aa[index]*gamma_aa[index];
            double t74506 = gcaa*gcaa;
            double t74507 = t74505*t74505;
            double t74508 = t74506*t74506;
            double t74509 = 1.0/pow(rho_a[index],3.2E1/3.0);
            double t74510 = 1.0/pow(rho_a[index],8.0/3.0);
            double t74511 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]);
            double t74512 = 1.0/pow(rho_a[index],1.6E1/3.0);
            functional_[index] = -rho_a[index]*(X-1.0)*(kp-kp/((gamma_aa[index]*1.0/(k*k)*mu_*1.0/(rho_a[index]* \
               rho_a[index])*1.0/pow(rho_a[index]*2.0,2.0/3.0)*(1.0/4.0))/kp+1.0)+1.0)*((a_1*t74482)/t74486+a_2*t74483* \
               1.0/(t74486*t74486)+a_4*t74484*1.0/(t74486*t74486*t74486*t74486)+a_8*t74485*1.0/(t74486*t74486*t74486* \
               t74486*t74486*t74486*t74486*t74486)+a_10*t74483*t74485*1.0/pow(t74486,1.0E1)+a_3*t74482*t74483*1.0/ \
               (t74486*t74486*t74486)+a_5*t74482*t74484*1.0/(t74486*t74486*t74486*t74486*t74486)+a_6*t74483*t74484* \
               1.0/(t74486*t74486*t74486*t74486*t74486*t74486)+a_9*t74482*t74485*1.0/(t74486*t74486*t74486*t74486* \
               t74486*t74486*t74486*t74486*t74486)+a_11*t74482*t74483*t74485*1.0/pow(t74486,1.1E1)+a_7*t74482*t74483* \
               t74484*1.0/(t74486*t74486*t74486*t74486*t74486*t74486*t74486)+1.0)-rho_a[index]*(((pow(2.0,1.0/3.0) \
               *2.0-2.0)*(c0f*log((1.0/2.0)/(c0f*(b1f*t74489+b3f*t74490+b2f*c*t74487+b4f*t74491*t74492))+1.0)*(a1f* \
               c*t74487+1.0)*2.0-c0p*t74502*t74504*2.0))/(two_13*2.0-2.0)+c0p*t74502*t74504*2.0)*( ( (tau_a[index]- \
               1.0/1.0E20 > 0.0) ? 1.0*(t74480*(tau_a[index]*2.0-(gamma_aa[index]*(1.0/4.0))/rho_a[index])*(1.0/2.0) \
               -1.0) : 0.0 ) +1.0)*(ccaa0+(ccaa2*t74512*t74505*t74506)/(gamma_aa[index]*gcaa*t74510*2.0+t74512*t74505* \
               t74506+1.0)+(ccaa1*gamma_aa[index]*gcaa*t74510)/(gamma_aa[index]*gcaa*t74510+1.0)+(ccaa4*t74507*t74508* \
               t74509)/(gamma_aa[index]*gcaa*t74510*4.0+t74512*t74505*t74506*6.0+t74507*t74508*t74509+gamma_aa[index]* \
               gcaa*t74511*t74505*t74506*4.0+1.0)+(ccaa3*gamma_aa[index]*gcaa*t74511*t74505*t74506)/(gamma_aa[index]* \
               gcaa*t74510*3.0+t74512*t74505*t74506*3.0+gamma_aa[index]*gcaa*t74511*t74505*t74506+1.0));
        } else if (rho_b[index] > cutoff_) {
            double t73352 = pow(rho_b[index],5.0/3.0);
            double t73353 = 1.0/tau_b[index];
            double t73354 = C_k*t73352*t73353;
            double t73355 = t73354-1.0;
            double t73356 = t73355*t73355;
            double t73357 = t73356*t73356;
            double t73358 = t73357*t73357;
            double t73359 = t73354+1.0;
            double t73360 = 1.0/pow(rho_b[index],1.0/3.0);
            double t73361 = c*t73360;
            double t73362 = sqrt(t73361);
            double t73363 = pow(t73361,3.0/2.0);
            double t73364 = c*c;
            double t73365 = 1.0/pow(rho_b[index],2.0/3.0);
            double t73366 = 1.0/c0p;
            double t73367 = b1p*t73362;
            double t73368 = b3p*t73363;
            double t73369 = b4p*t73364*t73365;
            double t73370 = b2p*c*t73360;
            double t73371 = t73370+t73367+t73368+t73369;
            double t73372 = 1.0/t73371;
            double t73373 = t73372*t73366*(1.0/2.0);
            double t73374 = t73373+1.0;
            double t73375 = log(t73374);
            double t73376 = a1p*c*t73360;
            double t73377 = t73376+1.0;
            double t73378 = gamma_bb[index]*gamma_bb[index];
            double t73379 = gcaa*gcaa;
            double t73380 = t73378*t73378;
            double t73381 = t73379*t73379;
            double t73382 = 1.0/pow(rho_b[index],3.2E1/3.0);
            double t73383 = 1.0/pow(rho_b[index],8.0/3.0);
            double t73384 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
               rho_b[index]*rho_b[index]);
            double t73385 = 1.0/pow(rho_b[index],1.6E1/3.0);
            functional_[index] = -rho_b[index]*(X-1.0)*(kp-kp/((gamma_bb[index]*1.0/(k*k)*mu_*1.0/(rho_b[index]* \
               rho_b[index])*1.0/pow(rho_b[index]*2.0,2.0/3.0)*(1.0/4.0))/kp+1.0)+1.0)*((a_1*t73355)/t73359+a_2*t73356* \
               1.0/(t73359*t73359)+a_4*t73357*1.0/(t73359*t73359*t73359*t73359)+a_8*t73358*1.0/(t73359*t73359*t73359* \
               t73359*t73359*t73359*t73359*t73359)+a_10*t73356*t73358*1.0/pow(t73359,1.0E1)+a_3*t73355*t73356*1.0/ \
               (t73359*t73359*t73359)+a_5*t73355*t73357*1.0/(t73359*t73359*t73359*t73359*t73359)+a_6*t73356*t73357* \
               1.0/(t73359*t73359*t73359*t73359*t73359*t73359)+a_9*t73355*t73358*1.0/(t73359*t73359*t73359*t73359* \
               t73359*t73359*t73359*t73359*t73359)+a_11*t73355*t73356*t73358*1.0/pow(t73359,1.1E1)+a_7*t73355*t73356* \
               t73357*1.0/(t73359*t73359*t73359*t73359*t73359*t73359*t73359)+1.0)-rho_b[index]*(((pow(2.0,1.0/3.0) \
               *2.0-2.0)*(c0f*log((1.0/2.0)/(c0f*(b1f*t73362+b3f*t73363+b2f*c*t73360+b4f*t73364*t73365))+1.0)*(a1f* \
               c*t73360+1.0)*2.0-c0p*t73375*t73377*2.0))/(two_13*2.0-2.0)+c0p*t73375*t73377*2.0)*( ( (tau_b[index]- \
               1.0/1.0E20 > 0.0) ? 1.0*(t73353*(tau_b[index]*2.0-(gamma_bb[index]*(1.0/4.0))/rho_b[index])*(1.0/2.0) \
               -1.0) : 0.0 ) +1.0)*(ccaa0+(ccaa2*t73385*t73378*t73379)/(gamma_bb[index]*gcaa*t73383*2.0+t73385*t73378* \
               t73379+1.0)+(ccaa1*gamma_bb[index]*gcaa*t73383)/(gamma_bb[index]*gcaa*t73383+1.0)+(ccaa4*t73380*t73381* \
               t73382)/(gamma_bb[index]*gcaa*t73383*4.0+t73380*t73381*t73382+t73385*t73378*t73379*6.0+gamma_bb[index]* \
               gcaa*t73384*t73378*t73379*4.0+1.0)+(ccaa3*gamma_bb[index]*gcaa*t73384*t73378*t73379)/(gamma_bb[index]* \
               gcaa*t73383*3.0+t73385*t73378*t73379*3.0+gamma_bb[index]*gcaa*t73384*t73378*t73379+1.0));
        } else {
            functional_[index] = 0.0;
        } 

    }
    //First Partials
    for (int index = 0; index < ntrue && deriv_ >= 1; index++) {

        //V_rho_a
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t69114 = 1.0/pow(rho_a[index],1.0/3.0);
            double t69115 = c*t69114;
            double t69116 = sqrt(t69115);
            double t69117 = pow(t69115,3.0/2.0);
            double t69118 = c*c;
            double t69119 = 1.0/pow(rho_a[index],2.0/3.0);
            double t69120 = 1.0/c0p;
            double t69121 = b1p*t69116;
            double t69122 = b3p*t69117;
            double t69123 = b4p*t69118*t69119;
            double t69124 = b2p*c*t69114;
            double t69125 = t69121+t69122+t69123+t69124;
            double t69126 = 1.0/t69125;
            double t69127 = t69120*t69126*(1.0/2.0);
            double t69128 = t69127+1.0;
            double t69129 = log(t69128);
            double t69130 = a1p*c*t69114;
            double t69131 = t69130+1.0;
            double t69132 = pow(2.0,1.0/3.0);
            double t69133 = t69132*2.0;
            double t69134 = t69133-2.0;
            double t69135 = two_13*2.0;
            double t69136 = t69135-2.0;
            double t69137 = 1.0/t69136;
            double t69138 = 1.0/c0f;
            double t69139 = 1.0/pow(rho_b[index],1.0/3.0);
            double t69140 = c*t69139;
            double t69141 = sqrt(t69140);
            double t69142 = pow(t69140,3.0/2.0);
            double t69143 = 1.0/pow(rho_b[index],2.0/3.0);
            double t69144 = b1p*t69141;
            double t69145 = b3p*t69142;
            double t69146 = b4p*t69143*t69118;
            double t69147 = b2p*c*t69139;
            double t69148 = t69144+t69145+t69146+t69147;
            double t69149 = 1.0/t69148;
            double t69150 = t69120*t69149*(1.0/2.0);
            double t69151 = t69150+1.0;
            double t69152 = log(t69151);
            double t69153 = a1p*c*t69139;
            double t69154 = t69153+1.0;
            double t69155 = c0p*t69152*t69154*2.0;
            double t69156 = rho_a[index]+rho_b[index];
            double t69157 = 1.0/pow(t69156,1.0/3.0);
            double t69158 = c*t69157;
            double t69159 = sqrt(t69158);
            double t69160 = pow(t69158,3.0/2.0);
            double t69161 = 1.0/pow(t69156,2.0/3.0);
            double t69162 = b1p*t69159;
            double t69163 = b3p*t69160;
            double t69164 = b4p*t69161*t69118;
            double t69165 = b2p*c*t69157;
            double t69166 = t69162+t69163+t69164+t69165;
            double t69167 = 1.0/t69166;
            double t69168 = t69120*t69167*(1.0/2.0);
            double t69169 = t69168+1.0;
            double t69170 = log(t69169);
            double t69171 = a1p*c*t69157;
            double t69172 = t69171+1.0;
            double t69173 = c0p*t69170*t69172*2.0;
            double t69174 = rho_a[index]-rho_b[index];
            double t69175 = t69174*t69174;
            double t69176 = 1.0/t69156;
            double t69177 = t69174*t69176;
            double t69178 = 1.0/(t69156*t69156*t69156*t69156);
            double t69179 = t69175*t69175;
            double t69180 = t69177+1.0;
            double t69181 = pow(t69180,4.0/3.0);
            double t69182 = -t69177+1.0;
            double t69183 = pow(t69182,4.0/3.0);
            double t69184 = t69181+t69183-2.0;
            double t69185 = gcab*gcab;
            double t69189 = 1.0/pow(rho_a[index],8.0/3.0);
            double t69190 = gamma_aa[index]*t69189*(1.0/2.0);
            double t69191 = 1.0/pow(rho_b[index],8.0/3.0);
            double t69192 = gamma_bb[index]*t69191*(1.0/2.0);
            double t69186 = t69190+t69192;
            double t69187 = t69186*t69186;
            double t69188 = 1.0/pow(rho_a[index],1.1E1/3.0);
            double t69193 = t69185*t69185;
            double t69194 = t69187*t69187;
            double t69195 = t69185*t69187*6.0;
            double t69196 = gcab*t69185*t69186*t69187*4.0;
            double t69197 = t69193*t69194;
            double t69198 = gcab*t69186*4.0;
            double t69199 = t69195+t69196+t69197+t69198+1.0;
            double t69200 = gcab*t69186;
            double t69201 = t69200+1.0;
            double t69202 = t69185*t69187;
            double t69203 = gcab*t69186*2.0;
            double t69204 = t69202+t69203+1.0;
            double t69205 = t69185*t69187*3.0;
            double t69206 = gcab*t69185*t69186*t69187;
            double t69207 = gcab*t69186*3.0;
            double t69208 = t69205+t69206+t69207+1.0;
            double t69209 = c0p*t69131*t69129*2.0;
            double t69210 = pow(rho_a[index],5.0/3.0);
            double t69211 = 1.0/tau_a[index];
            double t69212 = C_k*t69210*t69211;
            double t69213 = t69212-1.0;
            double t69214 = t69213*t69213;
            double t69215 = t69214*t69214;
            double t69216 = t69215*t69215;
            double t69217 = t69212+1.0;
            double t69218 = 1.0/(k*k);
            double t69219 = 1.0/kp;
            double t69220 = 1.0/(rho_a[index]*rho_a[index]);
            double t69221 = rho_a[index]*2.0;
            double t69222 = 1.0/pow(t69221,2.0/3.0);
            double t69223 = gamma_aa[index]*mu_*t69220*t69222*t69218*t69219*(1.0/4.0);
            double t69224 = t69223+1.0;
            double t69225 = 1.0/t69224;
            double t69226 = kp-kp*t69225+1.0;
            double t69227 = 1.0/t69217;
            double t69228 = pow(rho_a[index],2.0/3.0);
            double t69229 = 1.0/(t69217*t69217);
            double t69230 = 1.0/pow(t69217,1.0E1);
            double t69231 = 1.0/pow(t69217,1.1E1);
            double t69232 = 1.0/(t69217*t69217*t69217);
            double t69233 = 1.0/(t69217*t69217*t69217*t69217);
            double t69234 = 1.0/(t69217*t69217*t69217*t69217*t69217);
            double t69235 = 1.0/(t69217*t69217*t69217*t69217*t69217*t69217);
            double t69236 = 1.0/(t69217*t69217*t69217*t69217*t69217*t69217*t69217);
            double t69237 = 1.0/(t69217*t69217*t69217*t69217*t69217*t69217*t69217*t69217);
            double t69238 = 1.0/(t69217*t69217*t69217*t69217*t69217*t69217*t69217*t69217*t69217);
            double t69239 = a_1*t69213*t69227;
            double t69240 = a_10*t69230*t69214*t69216;
            double t69241 = a_11*t69213*t69231*t69214*t69216;
            double t69242 = a_2*t69214*t69229;
            double t69243 = a_3*t69213*t69214*t69232;
            double t69244 = a_4*t69215*t69233;
            double t69245 = a_5*t69213*t69215*t69234;
            double t69246 = a_6*t69214*t69215*t69235;
            double t69247 = a_7*t69213*t69214*t69215*t69236;
            double t69248 = a_8*t69216*t69237;
            double t69249 = a_9*t69213*t69216*t69238;
            double t69250 = t69240+t69241+t69242+t69243+t69244+t69245+t69246+t69247+t69239+t69248+t69249+1.0;
            double t69251 = 1.0/t69204;
            double t69252 = 1.0/t69208;
            double t69253 = 1.0/t69201;
            double t69254 = 1.0/t69199;
            double t69255 = 1.0/pow(t69156,4.0/3.0);
            double t69256 = b1f*t69159;
            double t69257 = b3f*t69160;
            double t69258 = b4f*t69161*t69118;
            double t69259 = b2f*c*t69157;
            double t69260 = t69256+t69257+t69258+t69259;
            double t69261 = 1.0/t69260;
            double t69262 = t69261*t69138*(1.0/2.0);
            double t69263 = t69262+1.0;
            double t69264 = log(t69263);
            double t69265 = a1f*c*t69157;
            double t69266 = t69265+1.0;
            double t69268 = c0f*t69264*t69266*2.0;
            double t69267 = t69173-t69268;
            double t69269 = 1.0/(t69156*t69156);
            double t69296 = t69174*t69269;
            double t69270 = t69176-t69296;
            double t69271 = 1.0/pow(t69156,5.0/3.0);
            double t69272 = 1.0/sqrt(t69158);
            double t69273 = 1.0/t69169;
            double t69274 = 1.0/(t69166*t69166);
            double t69275 = b4p*t69118*t69271*(2.0/3.0);
            double t69276 = b2p*c*t69255*(1.0/3.0);
            double t69277 = b1p*c*t69272*t69255*(1.0/6.0);
            double t69278 = b3p*c*t69255*t69159*(1.0/2.0);
            double t69279 = t69275+t69276+t69277+t69278;
            double t69280 = t69172*t69273*t69274*t69279;
            double t69281 = 1.0/d2fz0;
            double t69282 = 1.0/Aa;
            double t69283 = b1a*t69159;
            double t69284 = b3a*t69160;
            double t69285 = b4a*t69161*t69118;
            double t69286 = b2a*c*t69157;
            double t69287 = t69283+t69284+t69285+t69286;
            double t69288 = 1.0/t69287;
            double t69289 = t69282*t69288*(1.0/2.0);
            double t69290 = t69289+1.0;
            double t69291 = log(t69290);
            double t69292 = a1a*c*t69157;
            double t69293 = t69292+1.0;
            double t69294 = 1.0/(t69156*t69156*t69156*t69156*t69156);
            double t69295 = pow(t69180,1.0/3.0);
            double t69297 = t69270*t69295*(4.0/3.0);
            double t69298 = pow(t69182,1.0/3.0);
            double t69299 = t69297-t69270*t69298*(4.0/3.0);
            double t69300 = t69178*t69179;
            double t69301 = t69300-1.0;
            double t69302 = a1f*c*t69114;
            double t69303 = t69302+1.0;
            double t69304 = b1f*t69116;
            double t69305 = b3f*t69117;
            double t69306 = b4f*t69118*t69119;
            double t69307 = b2f*c*t69114;
            double t69308 = t69304+t69305+t69306+t69307;
            double t69309 = 1.0/t69308;
            double t69310 = t69138*t69309*(1.0/2.0);
            double t69311 = t69310+1.0;
            double t69312 = 1.0/pow(rho_a[index],4.0/3.0);
            double t69313 = 1.0/pow(rho_a[index],5.0/3.0);
            double t69314 = 1.0/sqrt(t69115);
            double t69315 = log(t69311);
            double t69316 = 1.0/t69128;
            double t69317 = 1.0/(t69125*t69125);
            double t69318 = b4p*t69313*t69118*(2.0/3.0);
            double t69319 = b2p*c*t69312*(1.0/3.0);
            double t69320 = b1p*c*t69312*t69314*(1.0/6.0);
            double t69321 = b3p*c*t69312*t69116*(1.0/2.0);
            double t69322 = t69320+t69321+t69318+t69319;
            double t69323 = t69131*t69322*t69316*t69317;
            double t69324 = Aa*t69301*t69137*t69281*t69291*t69184*t69293*2.0;
            double t69326 = c0f*t69303*t69315*2.0;
            double t69325 = t69209-t69326;
            double t69327 = t69134*t69325*t69137;
            double t69328 = gamma_aa[index]*gamma_aa[index];
            double t69329 = gcaa*gcaa;
            double t69330 = t69328*t69328;
            double t69331 = t69329*t69329;
            double t69332 = 1.0/pow(rho_a[index],3.2E1/3.0);
            double t69333 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]);
            double t69334 = 1.0/pow(rho_a[index],1.6E1/3.0);
            double t69335 = t69209-t69327;
            double t69336 = tau_a[index]-1.0/1.0E20;
            double t69337 = ( (t69336 > 0.0) ?  1.0 : 0.0 ) ;
            double t69338 = tau_a[index]*2.0;
            double t69339 = 1.0/rho_a[index];
            double t69366 = gamma_aa[index]*t69339*(1.0/4.0);
            double t69340 = t69338-t69366;
            double t69341 = t69211*t69340*(1.0/2.0);
            double t69342 = t69341-1.0;
            double t69343 = t69342*t69337;
            double t69344 = t69343+1.0;
            double t69345 = gamma_aa[index]*gcaa*t69189*4.0;
            double t69346 = gamma_aa[index]*gcaa*t69333*t69328*t69329*4.0;
            double t69347 = t69334*t69328*t69329*6.0;
            double t69348 = t69330*t69331*t69332;
            double t69349 = t69345+t69346+t69347+t69348+1.0;
            double t69350 = 1.0/t69349;
            double t69351 = gamma_aa[index]*gcaa*t69189;
            double t69352 = t69351+1.0;
            double t69353 = 1.0/t69352;
            double t69354 = gamma_aa[index]*gcaa*t69189*3.0;
            double t69355 = gamma_aa[index]*gcaa*t69333*t69328*t69329;
            double t69356 = t69334*t69328*t69329*3.0;
            double t69357 = t69354+t69355+t69356+1.0;
            double t69358 = 1.0/t69357;
            double t69359 = gamma_aa[index]*gcaa*t69189*2.0;
            double t69360 = t69334*t69328*t69329;
            double t69361 = t69360+t69359+1.0;
            double t69362 = 1.0/t69361;
            double t69363 = 1.0/pow(rho_a[index],1.9E1/3.0);
            double t69364 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]*rho_a[index]);
            double t69365 = 1.0/pow(rho_a[index],3.5E1/3.0);
            double t69367 = 1.0/t69311;
            double t69368 = 1.0/(t69308*t69308);
            double t69369 = b4f*t69313*t69118*(2.0/3.0);
            double t69370 = b2f*c*t69312*(1.0/3.0);
            double t69371 = b1f*c*t69312*t69314*(1.0/6.0);
            double t69372 = b3f*c*t69312*t69116*(1.0/2.0);
            double t69373 = t69370+t69371+t69372+t69369;
            double t69374 = a1f*c*c0f*t69312*t69315*(2.0/3.0);
            double t69375 = a1p*c*c0p*t69312*t69129*(2.0/3.0);
            double t69376 = ccaa4*t69330*t69331*t69332*t69350;
            double t69377 = ccaa1*gamma_aa[index]*gcaa*t69353*t69189;
            double t69378 = ccaa3*gamma_aa[index]*gcaa*t69333*t69328*t69329*t69358;
            double t69379 = ccaa2*t69334*t69362*t69328*t69329;
            double t69380 = ccaa0+t69376+t69377+t69378+t69379;
            v_rho_a_[index] = -(ccab0+ccab1*gcab*t69253*t69186+ccab2*t69251*t69185*t69187+ccab4*t69254*t69193* \
               t69194+ccab3*gcab*t69252*t69185*t69186*t69187)*(t69324+t69173-t69209+t69327+rho_a[index]*(-t69323+ \
               t69375+t69134*t69137*(t69323+t69374-t69303*t69373*t69367*t69368-a1p*c*c0p*t69312*t69129*(2.0/3.0)) \
               )-t69156*(-t69280+t69137*t69184*t69178*t69179*(t69280-(1.0/(t69260*t69260)*t69266*(b2f*c*t69255*(1.0/ \
               3.0)+b4f*t69118*t69271*(2.0/3.0)+b1f*c*t69272*t69255*(1.0/6.0)+b3f*c*t69255*t69159*(1.0/2.0)))/t69263+ \
               a1f*c*c0f*t69255*t69264*(2.0/3.0)-a1p*c*c0p*t69170*t69255*(2.0/3.0))+a1p*c*c0p*t69170*t69255*(2.0/ \
               3.0)-t69137*t69184*t69267*t69294*t69179*4.0+t69137*t69267*t69178*t69179*t69299+t69137*t69174*t69175* \
               t69184*t69267*t69178*4.0+Aa*t69137*t69281*t69291*t69184*t69293*(t69294*t69179*4.0-t69174*t69175*t69178* \
               4.0)*2.0-Aa*t69301*t69137*t69281*t69291*t69293*t69299*2.0-(t69301*t69137*t69281*t69184*t69293*1.0/ \
               (t69287*t69287)*(b2a*c*t69255*(1.0/3.0)+b4a*t69118*t69271*(2.0/3.0)+b1a*c*t69272*t69255*(1.0/6.0)+ \
               b3a*c*t69255*t69159*(1.0/2.0)))/t69290+Aa*a1a*c*t69301*t69137*t69281*t69255*t69291*t69184*(2.0/3.0) \
               )-t69137*t69184*t69267*t69178*t69179)-(X-1.0)*(t69250*t69226+rho_a[index]*t69226*(C_k*a_1*t69211*t69227* \
               t69228*(5.0/3.0)-C_k*a_1*t69211*t69213*t69228*t69229*(5.0/3.0)-C_k*a_2*t69211*t69214*t69232*t69228* \
               (1.0E1/3.0)+C_k*a_2*t69211*t69213*t69228*t69229*(1.0E1/3.0)+C_k*a_3*t69211*t69214*t69232*t69228*5.0- \
               C_k*a_4*t69211*t69215*t69234*t69228*(2.0E1/3.0)+C_k*a_5*t69211*t69215*t69234*t69228*(2.5E1/3.0)-C_k* \
               a_8*t69211*t69216*t69228*t69238*(4.0E1/3.0)+C_k*a_9*t69211*t69216*t69228*t69238*1.5E1+C_k*a_10*t69211* \
               t69230*t69213*t69216*t69228*(5.0E1/3.0)-C_k*a_10*t69211*t69231*t69214*t69216*t69228*(5.0E1/3.0)+C_k* \
               a_11*t69211*t69231*t69214*t69216*t69228*(5.5E1/3.0)-C_k*a_3*t69211*t69213*t69214*t69233*t69228*5.0+ \
               C_k*a_4*t69211*t69213*t69214*t69233*t69228*(2.0E1/3.0)-C_k*a_5*t69211*t69213*t69215*t69235*t69228* \
               (2.5E1/3.0)+C_k*a_6*t69211*t69213*t69215*t69235*t69228*1.0E1-C_k*a_6*t69211*t69214*t69215*t69236*t69228* \
               1.0E1+C_k*a_7*t69211*t69214*t69215*t69236*t69228*(3.5E1/3.0)-C_k*a_9*t69211*t69230*t69213*t69216*t69228* \
               1.5E1-C_k*a_11*t69211*t69213*t69214*t69216*1.0/pow(t69217,1.2E1)*t69228*(5.5E1/3.0)-C_k*a_7*t69211* \
               t69213*t69214*t69215*t69228*t69237*(3.5E1/3.0)+C_k*a_8*t69211*t69213*t69214*t69215*t69228*t69237*(4.0E1/ \
               3.0))-kp*rho_a[index]*t69250*1.0/(t69224*t69224)*(gamma_aa[index]*mu_*1.0/(rho_a[index]*rho_a[index]* \
               rho_a[index])*t69222*t69218*t69219*(1.0/2.0)+gamma_aa[index]*mu_*t69220*1.0/pow(t69221,5.0/3.0)*t69218* \
               t69219*(1.0/3.0)))-(rho_a[index]*(t69209-t69134*t69325*t69137)+rho_b[index]*(t69155-t69134*t69137* \
               (t69155-c0f*log((t69138*(1.0/2.0))/(b1f*t69141+b3f*t69142+b2f*c*t69139+b4f*t69143*t69118)+1.0)*(a1f* \
               c*t69139+1.0)*2.0))-t69156*(t69324+t69173-t69137*t69184*t69267*t69178*t69179))*(ccab1*gamma_aa[index]* \
               gcab*t69253*t69188*(4.0/3.0)-ccab2*1.0/(t69204*t69204)*t69185*t69187*(gamma_aa[index]*gcab*t69188* \
               (8.0/3.0)+gamma_aa[index]*t69185*t69186*t69188*(8.0/3.0))-ccab4*t69193*t69194*1.0/(t69199*t69199)* \
               (gamma_aa[index]*gcab*t69188*(1.6E1/3.0)+gamma_aa[index]*t69185*t69186*t69188*1.6E1+gamma_aa[index]* \
               gcab*t69185*t69187*t69188*1.6E1+gamma_aa[index]*t69193*t69186*t69187*t69188*(1.6E1/3.0))-ccab1*gamma_aa[index]* \
               1.0/(t69201*t69201)*t69185*t69186*t69188*(4.0/3.0)+ccab2*gamma_aa[index]*t69251*t69185*t69186*t69188* \
               (8.0/3.0)-ccab3*gcab*1.0/(t69208*t69208)*t69185*t69186*t69187*(gamma_aa[index]*gcab*t69188*4.0+gamma_aa[index]* \
               t69185*t69186*t69188*8.0+gamma_aa[index]*gcab*t69185*t69187*t69188*4.0)+ccab3*gamma_aa[index]*gcab* \
               t69252*t69185*t69187*t69188*4.0+ccab4*gamma_aa[index]*t69254*t69193*t69186*t69187*t69188*(1.6E1/3.0) \
               )-t69335*t69344*t69380+rho_a[index]*t69335*t69344*(ccaa1*gamma_aa[index]*gcaa*t69353*t69188*(8.0/3.0) \
               +ccaa4*t69330*t69331*t69350*t69365*(3.2E1/3.0)+ccaa2*t69362*t69363*t69328*t69329*(1.6E1/3.0)-ccaa1* \
               1.0/(t69352*t69352)*t69363*t69328*t69329*(8.0/3.0)-ccaa2*t69334*1.0/(t69361*t69361)*t69328*t69329* \
               (gamma_aa[index]*gcaa*t69188*(1.6E1/3.0)+t69363*t69328*t69329*(1.6E1/3.0))-ccaa4*t69330*t69331*t69332* \
               1.0/(t69349*t69349)*(gamma_aa[index]*gcaa*t69188*(3.2E1/3.0)+t69330*t69331*t69365*(3.2E1/3.0)+t69363* \
               t69328*t69329*3.2E1+gamma_aa[index]*gcaa*t69328*t69364*t69329*3.2E1)+ccaa3*gamma_aa[index]*gcaa*t69328* \
               t69364*t69329*t69358*8.0-ccaa3*gamma_aa[index]*gcaa*t69333*t69328*t69329*1.0/(t69357*t69357)*(gamma_aa[index]* \
               gcaa*t69188*8.0+t69363*t69328*t69329*1.6E1+gamma_aa[index]*gcaa*t69328*t69364*t69329*8.0))+rho_a[index]* \
               t69344*t69380*(-t69323+t69375+t69134*t69137*(t69323+t69374-t69375-t69303*t69373*t69367*t69368))-gamma_aa[index]* \
               t69211*t69335*t69380*t69337*t69339*(1.0/8.0);
        } else if (rho_a[index] > cutoff_) {
            double t74514 = pow(rho_a[index],5.0/3.0);
            double t74515 = 1.0/tau_a[index];
            double t74516 = C_k*t74514*t74515;
            double t74517 = t74516-1.0;
            double t74518 = t74517*t74517;
            double t74519 = t74518*t74518;
            double t74520 = t74519*t74519;
            double t74521 = t74516+1.0;
            double t74522 = 1.0/pow(rho_a[index],1.0/3.0);
            double t74523 = c*t74522;
            double t74524 = sqrt(t74523);
            double t74525 = pow(t74523,3.0/2.0);
            double t74526 = c*c;
            double t74527 = 1.0/pow(rho_a[index],2.0/3.0);
            double t74528 = 1.0/c0p;
            double t74529 = b1p*t74524;
            double t74530 = b3p*t74525;
            double t74531 = b4p*t74526*t74527;
            double t74532 = b2p*c*t74522;
            double t74533 = t74530+t74531+t74532+t74529;
            double t74534 = 1.0/t74533;
            double t74535 = t74534*t74528*(1.0/2.0);
            double t74536 = t74535+1.0;
            double t74537 = log(t74536);
            double t74538 = a1p*c*t74522;
            double t74539 = t74538+1.0;
            double t74540 = gamma_aa[index]*gamma_aa[index];
            double t74541 = gcaa*gcaa;
            double t74542 = t74540*t74540;
            double t74543 = t74541*t74541;
            double t74544 = 1.0/pow(rho_a[index],3.2E1/3.0);
            double t74545 = 1.0/pow(rho_a[index],8.0/3.0);
            double t74546 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]);
            double t74547 = 1.0/pow(rho_a[index],1.6E1/3.0);
            double t74548 = pow(2.0,1.0/3.0);
            double t74549 = t74548*2.0;
            double t74550 = t74549-2.0;
            double t74551 = two_13*2.0;
            double t74552 = t74551-2.0;
            double t74553 = 1.0/t74552;
            double t74554 = 1.0/c0f;
            double t74555 = b1f*t74524;
            double t74556 = b3f*t74525;
            double t74557 = b4f*t74526*t74527;
            double t74558 = b2f*c*t74522;
            double t74559 = t74555+t74556+t74557+t74558;
            double t74560 = 1.0/t74559;
            double t74561 = t74560*t74554*(1.0/2.0);
            double t74562 = t74561+1.0;
            double t74563 = log(t74562);
            double t74564 = a1f*c*t74522;
            double t74565 = t74564+1.0;
            double t74566 = c0f*t74563*t74565*2.0;
            double t74567 = c0p*t74537*t74539*2.0;
            double t74568 = tau_a[index]-1.0/1.0E20;
            double t74569 = ( (t74568 > 0.0) ?  1.0 : 0.0 ) ;
            double t74570 = tau_a[index]*2.0;
            double t74571 = 1.0/rho_a[index];
            double t74621 = gamma_aa[index]*t74571*(1.0/4.0);
            double t74572 = -t74621+t74570;
            double t74573 = t74515*t74572*(1.0/2.0);
            double t74574 = t74573-1.0;
            double t74575 = t74574*t74569;
            double t74576 = t74575+1.0;
            double t74577 = gamma_aa[index]*gcaa*t74545*4.0;
            double t74578 = gamma_aa[index]*gcaa*t74540*t74541*t74546*4.0;
            double t74579 = t74540*t74541*t74547*6.0;
            double t74580 = t74542*t74543*t74544;
            double t74581 = t74580+t74577+t74578+t74579+1.0;
            double t74582 = 1.0/t74581;
            double t74583 = gamma_aa[index]*gcaa*t74545;
            double t74584 = t74583+1.0;
            double t74585 = 1.0/t74584;
            double t74586 = gamma_aa[index]*gcaa*t74545*3.0;
            double t74587 = gamma_aa[index]*gcaa*t74540*t74541*t74546;
            double t74588 = t74540*t74541*t74547*3.0;
            double t74589 = t74586+t74587+t74588+1.0;
            double t74590 = 1.0/t74589;
            double t74591 = gamma_aa[index]*gcaa*t74545*2.0;
            double t74592 = t74540*t74541*t74547;
            double t74593 = t74591+t74592+1.0;
            double t74594 = 1.0/t74593;
            double t74595 = 1.0/pow(rho_a[index],1.9E1/3.0);
            double t74596 = 1.0/pow(rho_a[index],1.1E1/3.0);
            double t74597 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]*rho_a[index]);
            double t74598 = 1.0/pow(rho_a[index],3.5E1/3.0);
            double t74599 = X-1.0;
            double t74600 = 1.0/(k*k);
            double t74601 = 1.0/kp;
            double t74602 = 1.0/(rho_a[index]*rho_a[index]);
            double t74603 = rho_a[index]*2.0;
            double t74604 = 1.0/pow(t74603,2.0/3.0);
            double t74605 = gamma_aa[index]*mu_*t74600*t74601*t74602*t74604*(1.0/4.0);
            double t74606 = t74605+1.0;
            double t74607 = 1.0/t74606;
            double t74608 = kp-kp*t74607+1.0;
            double t74609 = 1.0/t74521;
            double t74610 = pow(rho_a[index],2.0/3.0);
            double t74611 = 1.0/(t74521*t74521);
            double t74612 = 1.0/pow(t74521,1.0E1);
            double t74613 = 1.0/pow(t74521,1.1E1);
            double t74614 = 1.0/(t74521*t74521*t74521);
            double t74615 = 1.0/(t74521*t74521*t74521*t74521);
            double t74616 = 1.0/(t74521*t74521*t74521*t74521*t74521);
            double t74617 = 1.0/(t74521*t74521*t74521*t74521*t74521*t74521);
            double t74618 = 1.0/(t74521*t74521*t74521*t74521*t74521*t74521*t74521);
            double t74619 = 1.0/(t74521*t74521*t74521*t74521*t74521*t74521*t74521*t74521);
            double t74620 = 1.0/(t74521*t74521*t74521*t74521*t74521*t74521*t74521*t74521*t74521);
            double t74622 = 1.0/pow(rho_a[index],4.0/3.0);
            double t74623 = 1.0/pow(rho_a[index],5.0/3.0);
            double t74624 = 1.0/sqrt(t74523);
            double t74625 = 1.0/t74536;
            double t74626 = 1.0/(t74533*t74533);
            double t74627 = b4p*t74623*t74526*(2.0/3.0);
            double t74628 = b2p*c*t74622*(1.0/3.0);
            double t74629 = b1p*c*t74622*t74624*(1.0/6.0);
            double t74630 = b3p*c*t74622*t74524*(1.0/2.0);
            double t74631 = t74630+t74627+t74628+t74629;
            double t74632 = t74631*t74625*t74626*t74539;
            double t74633 = ccaa4*t74542*t74543*t74544*t74582;
            double t74634 = ccaa1*gamma_aa[index]*gcaa*t74545*t74585;
            double t74635 = ccaa3*gamma_aa[index]*gcaa*t74540*t74541*t74590*t74546;
            double t74636 = ccaa2*t74540*t74541*t74547*t74594;
            double t74637 = ccaa0+t74633+t74634+t74635+t74636;
            double t74638 = t74566-t74567;
            double t74639 = t74550*t74553*t74638;
            double t74640 = t74567+t74639;
            double t74641 = a_1*t74517*t74609;
            double t74642 = a_10*t74520*t74612*t74518;
            double t74643 = a_11*t74520*t74613*t74517*t74518;
            double t74644 = a_2*t74611*t74518;
            double t74645 = a_3*t74614*t74517*t74518;
            double t74646 = a_4*t74615*t74519;
            double t74647 = a_5*t74517*t74616*t74519;
            double t74648 = a_6*t74518*t74617*t74519;
            double t74649 = a_7*t74517*t74518*t74519*t74618;
            double t74650 = a_8*t74520*t74619;
            double t74651 = a_9*t74520*t74620*t74517;
            double t74652 = t74641+t74650+t74642+t74651+t74643+t74644+t74645+t74646+t74647+t74648+t74649+1.0;
            v_rho_a_[index] = -t74652*t74608*t74599-t74637*t74576*(t74567+t74550*t74553*(t74566-c0p*t74537*t74539* \
               2.0))+rho_a[index]*t74637*t74576*(-t74632+t74550*t74553*(t74632-(t74565*1.0/(t74559*t74559)*(b2f*c* \
               t74622*(1.0/3.0)+b4f*t74623*t74526*(2.0/3.0)+b1f*c*t74622*t74624*(1.0/6.0)+b3f*c*t74622*t74524*(1.0/ \
               2.0)))/t74562+a1f*c*c0f*t74622*t74563*(2.0/3.0)-a1p*c*c0p*t74622*t74537*(2.0/3.0))+a1p*c*c0p*t74622* \
               t74537*(2.0/3.0))-rho_a[index]*t74608*t74599*(C_k*a_1*t74610*t74515*t74609*(5.0/3.0)-C_k*a_1*t74610* \
               t74611*t74515*t74517*(5.0/3.0)+C_k*a_2*t74610*t74611*t74515*t74517*(1.0E1/3.0)-C_k*a_2*t74610*t74515* \
               t74614*t74518*(1.0E1/3.0)+C_k*a_3*t74610*t74515*t74614*t74518*5.0-C_k*a_4*t74610*t74515*t74616*t74519* \
               (2.0E1/3.0)+C_k*a_5*t74610*t74515*t74616*t74519*(2.5E1/3.0)-C_k*a_8*t74520*t74610*t74620*t74515*(4.0E1/ \
               3.0)+C_k*a_9*t74520*t74610*t74620*t74515*1.5E1+C_k*a_10*t74520*t74610*t74612*t74515*t74517*(5.0E1/ \
               3.0)-C_k*a_10*t74520*t74610*t74613*t74515*t74518*(5.0E1/3.0)+C_k*a_11*t74520*t74610*t74613*t74515* \
               t74518*(5.5E1/3.0)-C_k*a_3*t74610*t74515*t74615*t74517*t74518*5.0+C_k*a_4*t74610*t74515*t74615*t74517* \
               t74518*(2.0E1/3.0)-C_k*a_5*t74610*t74515*t74517*t74617*t74519*(2.5E1/3.0)+C_k*a_6*t74610*t74515*t74517* \
               t74617*t74519*1.0E1-C_k*a_6*t74610*t74515*t74518*t74519*t74618*1.0E1+C_k*a_7*t74610*t74515*t74518* \
               t74519*t74618*(3.5E1/3.0)-C_k*a_9*t74520*t74610*t74612*t74515*t74517*1.5E1-C_k*a_11*t74520*t74610* \
               1.0/pow(t74521,1.2E1)*t74515*t74517*t74518*(5.5E1/3.0)-C_k*a_7*t74610*t74515*t74517*t74518*t74519* \
               t74619*(3.5E1/3.0)+C_k*a_8*t74610*t74515*t74517*t74518*t74519*t74619*(4.0E1/3.0))+rho_a[index]*t74640* \
               t74576*(ccaa1*gamma_aa[index]*gcaa*t74585*t74596*(8.0/3.0)+ccaa2*t74540*t74541*t74594*t74595*(1.6E1/ \
               3.0)+ccaa4*t74542*t74543*t74582*t74598*(3.2E1/3.0)-ccaa1*t74540*t74541*1.0/(t74584*t74584)*t74595* \
               (8.0/3.0)-ccaa2*t74540*t74541*t74547*1.0/(t74593*t74593)*(gamma_aa[index]*gcaa*t74596*(1.6E1/3.0)+ \
               t74540*t74541*t74595*(1.6E1/3.0))-ccaa4*t74542*t74543*t74544*1.0/(t74581*t74581)*(gamma_aa[index]* \
               gcaa*t74596*(3.2E1/3.0)+t74540*t74541*t74595*3.2E1+t74542*t74543*t74598*(3.2E1/3.0)+gamma_aa[index]* \
               gcaa*t74540*t74541*t74597*3.2E1)+ccaa3*gamma_aa[index]*gcaa*t74540*t74541*t74590*t74597*8.0-ccaa3* \
               gamma_aa[index]*gcaa*t74540*t74541*t74546*1.0/(t74589*t74589)*(gamma_aa[index]*gcaa*t74596*8.0+t74540* \
               t74541*t74595*1.6E1+gamma_aa[index]*gcaa*t74540*t74541*t74597*8.0))-gamma_aa[index]*t74640*t74515* \
               t74571*t74637*t74569*(1.0/8.0)+kp*rho_a[index]*1.0/(t74606*t74606)*t74652*t74599*(gamma_aa[index]* \
               mu_*1.0/(rho_a[index]*rho_a[index]*rho_a[index])*t74600*t74601*t74604*(1.0/2.0)+gamma_aa[index]*mu_* \
               t74600*t74601*t74602*1.0/pow(t74603,5.0/3.0)*(1.0/3.0));
        } else if (rho_b[index] > cutoff_) {
            v_rho_a_[index] = 0.0;
        } else {
            v_rho_a_[index] = 0.0;
        } 

        //V_rho_b
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t69382 = 1.0/pow(rho_a[index],1.0/3.0);
            double t69383 = c*t69382;
            double t69384 = sqrt(t69383);
            double t69385 = pow(t69383,3.0/2.0);
            double t69386 = c*c;
            double t69387 = 1.0/pow(rho_a[index],2.0/3.0);
            double t69388 = 1.0/c0p;
            double t69389 = b1p*t69384;
            double t69390 = b3p*t69385;
            double t69391 = b4p*t69386*t69387;
            double t69392 = b2p*c*t69382;
            double t69393 = t69390+t69391+t69392+t69389;
            double t69394 = 1.0/t69393;
            double t69395 = t69394*t69388*(1.0/2.0);
            double t69396 = t69395+1.0;
            double t69397 = log(t69396);
            double t69398 = a1p*c*t69382;
            double t69399 = t69398+1.0;
            double t69400 = pow(2.0,1.0/3.0);
            double t69401 = t69400*2.0;
            double t69402 = t69401-2.0;
            double t69403 = two_13*2.0;
            double t69404 = t69403-2.0;
            double t69405 = 1.0/t69404;
            double t69406 = 1.0/c0f;
            double t69407 = 1.0/pow(rho_b[index],1.0/3.0);
            double t69408 = c*t69407;
            double t69409 = sqrt(t69408);
            double t69410 = pow(t69408,3.0/2.0);
            double t69411 = 1.0/pow(rho_b[index],2.0/3.0);
            double t69412 = b1p*t69409;
            double t69413 = b3p*t69410;
            double t69414 = b4p*t69411*t69386;
            double t69415 = b2p*c*t69407;
            double t69416 = t69412+t69413+t69414+t69415;
            double t69417 = 1.0/t69416;
            double t69418 = t69417*t69388*(1.0/2.0);
            double t69419 = t69418+1.0;
            double t69420 = log(t69419);
            double t69421 = a1p*c*t69407;
            double t69422 = t69421+1.0;
            double t69423 = c0p*t69420*t69422*2.0;
            double t69424 = rho_a[index]+rho_b[index];
            double t69425 = 1.0/pow(t69424,1.0/3.0);
            double t69426 = c*t69425;
            double t69427 = sqrt(t69426);
            double t69428 = pow(t69426,3.0/2.0);
            double t69429 = 1.0/pow(t69424,2.0/3.0);
            double t69430 = b1p*t69427;
            double t69431 = b3p*t69428;
            double t69432 = b4p*t69429*t69386;
            double t69433 = b2p*c*t69425;
            double t69434 = t69430+t69431+t69432+t69433;
            double t69435 = 1.0/t69434;
            double t69436 = t69435*t69388*(1.0/2.0);
            double t69437 = t69436+1.0;
            double t69438 = log(t69437);
            double t69439 = a1p*c*t69425;
            double t69440 = t69439+1.0;
            double t69441 = c0p*t69440*t69438*2.0;
            double t69442 = rho_a[index]-rho_b[index];
            double t69443 = t69442*t69442;
            double t69444 = 1.0/t69424;
            double t69445 = t69442*t69444;
            double t69446 = 1.0/(t69424*t69424*t69424*t69424);
            double t69447 = t69443*t69443;
            double t69448 = t69445+1.0;
            double t69449 = pow(t69448,4.0/3.0);
            double t69450 = -t69445+1.0;
            double t69451 = pow(t69450,4.0/3.0);
            double t69452 = t69451+t69449-2.0;
            double t69453 = gcab*gcab;
            double t69457 = 1.0/pow(rho_a[index],8.0/3.0);
            double t69458 = gamma_aa[index]*t69457*(1.0/2.0);
            double t69459 = 1.0/pow(rho_b[index],8.0/3.0);
            double t69460 = gamma_bb[index]*t69459*(1.0/2.0);
            double t69454 = t69460+t69458;
            double t69455 = t69454*t69454;
            double t69456 = 1.0/pow(rho_b[index],1.1E1/3.0);
            double t69461 = t69453*t69453;
            double t69462 = t69455*t69455;
            double t69463 = t69453*t69455*6.0;
            double t69464 = gcab*t69453*t69454*t69455*4.0;
            double t69465 = t69461*t69462;
            double t69466 = gcab*t69454*4.0;
            double t69467 = t69463+t69464+t69465+t69466+1.0;
            double t69468 = gcab*t69454;
            double t69469 = t69468+1.0;
            double t69470 = t69453*t69455;
            double t69471 = gcab*t69454*2.0;
            double t69472 = t69470+t69471+1.0;
            double t69473 = t69453*t69455*3.0;
            double t69474 = gcab*t69453*t69454*t69455;
            double t69475 = gcab*t69454*3.0;
            double t69476 = t69473+t69474+t69475+1.0;
            double t69477 = c0p*t69397*t69399*2.0;
            double t69478 = pow(rho_b[index],5.0/3.0);
            double t69479 = 1.0/tau_b[index];
            double t69480 = C_k*t69478*t69479;
            double t69481 = t69480-1.0;
            double t69482 = t69481*t69481;
            double t69483 = t69482*t69482;
            double t69484 = t69483*t69483;
            double t69485 = t69480+1.0;
            double t69486 = 1.0/(k*k);
            double t69487 = 1.0/kp;
            double t69488 = 1.0/(rho_b[index]*rho_b[index]);
            double t69489 = rho_b[index]*2.0;
            double t69490 = 1.0/pow(t69489,2.0/3.0);
            double t69491 = gamma_bb[index]*mu_*t69490*t69486*t69487*t69488*(1.0/4.0);
            double t69492 = t69491+1.0;
            double t69493 = 1.0/t69492;
            double t69494 = kp-kp*t69493+1.0;
            double t69495 = 1.0/t69485;
            double t69496 = pow(rho_b[index],2.0/3.0);
            double t69497 = 1.0/(t69485*t69485);
            double t69498 = 1.0/pow(t69485,1.0E1);
            double t69499 = 1.0/pow(t69485,1.1E1);
            double t69500 = 1.0/(t69485*t69485*t69485);
            double t69501 = 1.0/(t69485*t69485*t69485*t69485);
            double t69502 = 1.0/(t69485*t69485*t69485*t69485*t69485);
            double t69503 = 1.0/(t69485*t69485*t69485*t69485*t69485*t69485);
            double t69504 = 1.0/(t69485*t69485*t69485*t69485*t69485*t69485*t69485);
            double t69505 = 1.0/(t69485*t69485*t69485*t69485*t69485*t69485*t69485*t69485);
            double t69506 = 1.0/(t69485*t69485*t69485*t69485*t69485*t69485*t69485*t69485*t69485);
            double t69507 = a_1*t69481*t69495;
            double t69508 = a_10*t69482*t69484*t69498;
            double t69509 = a_11*t69481*t69482*t69484*t69499;
            double t69510 = a_2*t69482*t69497;
            double t69511 = a_3*t69500*t69481*t69482;
            double t69512 = a_4*t69501*t69483;
            double t69513 = a_5*t69502*t69481*t69483;
            double t69514 = a_6*t69503*t69482*t69483;
            double t69515 = a_7*t69504*t69481*t69482*t69483;
            double t69516 = a_8*t69505*t69484;
            double t69517 = a_9*t69506*t69481*t69484;
            double t69518 = t69510+t69511+t69512+t69513+t69514+t69515+t69507+t69516+t69508+t69517+t69509+1.0;
            double t69519 = 1.0/t69472;
            double t69520 = 1.0/t69476;
            double t69521 = 1.0/t69469;
            double t69522 = 1.0/t69467;
            double t69523 = 1.0/pow(t69424,4.0/3.0);
            double t69524 = b1f*t69427;
            double t69525 = b3f*t69428;
            double t69526 = b4f*t69429*t69386;
            double t69527 = b2f*c*t69425;
            double t69528 = t69524+t69525+t69526+t69527;
            double t69529 = 1.0/t69528;
            double t69530 = t69406*t69529*(1.0/2.0);
            double t69531 = t69530+1.0;
            double t69532 = log(t69531);
            double t69533 = a1f*c*t69425;
            double t69534 = t69533+1.0;
            double t69536 = c0f*t69532*t69534*2.0;
            double t69535 = t69441-t69536;
            double t69537 = 1.0/(t69424*t69424);
            double t69538 = t69442*t69537;
            double t69539 = t69444+t69538;
            double t69540 = 1.0/pow(t69424,5.0/3.0);
            double t69541 = 1.0/sqrt(t69426);
            double t69542 = 1.0/t69437;
            double t69543 = 1.0/(t69434*t69434);
            double t69544 = b4p*t69540*t69386*(2.0/3.0);
            double t69545 = b2p*c*t69523*(1.0/3.0);
            double t69546 = b1p*c*t69523*t69541*(1.0/6.0);
            double t69547 = b3p*c*t69523*t69427*(1.0/2.0);
            double t69548 = t69544+t69545+t69546+t69547;
            double t69549 = 1.0/d2fz0;
            double t69550 = 1.0/Aa;
            double t69551 = b1a*t69427;
            double t69552 = b3a*t69428;
            double t69553 = b4a*t69429*t69386;
            double t69554 = b2a*c*t69425;
            double t69555 = t69551+t69552+t69553+t69554;
            double t69556 = 1.0/t69555;
            double t69557 = t69550*t69556*(1.0/2.0);
            double t69558 = t69557+1.0;
            double t69559 = log(t69558);
            double t69560 = a1a*c*t69425;
            double t69561 = t69560+1.0;
            double t69562 = 1.0/(t69424*t69424*t69424*t69424*t69424);
            double t69563 = pow(t69448,1.0/3.0);
            double t69564 = t69563*t69539*(4.0/3.0);
            double t69565 = pow(t69450,1.0/3.0);
            double t69566 = t69564-t69565*t69539*(4.0/3.0);
            double t69567 = t69446*t69447;
            double t69568 = t69567-1.0;
            double t69569 = t69440*t69542*t69543*t69548;
            double t69570 = a1f*c*t69407;
            double t69571 = t69570+1.0;
            double t69572 = b1f*t69409;
            double t69573 = b3f*t69410;
            double t69574 = b4f*t69411*t69386;
            double t69575 = b2f*c*t69407;
            double t69576 = t69572+t69573+t69574+t69575;
            double t69577 = 1.0/t69576;
            double t69578 = t69406*t69577*(1.0/2.0);
            double t69579 = t69578+1.0;
            double t69580 = 1.0/pow(rho_b[index],4.0/3.0);
            double t69581 = 1.0/pow(rho_b[index],5.0/3.0);
            double t69582 = 1.0/sqrt(t69408);
            double t69583 = log(t69579);
            double t69584 = 1.0/t69419;
            double t69585 = 1.0/(t69416*t69416);
            double t69586 = b4p*t69581*t69386*(2.0/3.0);
            double t69587 = b2p*c*t69580*(1.0/3.0);
            double t69588 = b1p*c*t69580*t69582*(1.0/6.0);
            double t69589 = b3p*c*t69409*t69580*(1.0/2.0);
            double t69590 = t69586+t69587+t69588+t69589;
            double t69591 = t69422*t69590*t69584*t69585;
            double t69594 = c0f*t69571*t69583*2.0;
            double t69592 = t69423-t69594;
            double t69593 = Aa*t69405*t69452*t69561*t69549*t69559*t69568*2.0;
            double t69595 = t69402*t69405*t69592;
            double t69596 = gamma_bb[index]*gamma_bb[index];
            double t69597 = gcaa*gcaa;
            double t69598 = t69596*t69596;
            double t69599 = t69597*t69597;
            double t69600 = 1.0/pow(rho_b[index],3.2E1/3.0);
            double t69601 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
               rho_b[index]*rho_b[index]);
            double t69602 = 1.0/pow(rho_b[index],1.6E1/3.0);
            double t69603 = t69423-t69595;
            double t69604 = tau_b[index]-1.0/1.0E20;
            double t69605 = ( (t69604 > 0.0) ?  1.0 : 0.0 ) ;
            double t69606 = tau_b[index]*2.0;
            double t69607 = 1.0/rho_b[index];
            double t69634 = gamma_bb[index]*t69607*(1.0/4.0);
            double t69608 = t69606-t69634;
            double t69609 = t69608*t69479*(1.0/2.0);
            double t69610 = t69609-1.0;
            double t69611 = t69610*t69605;
            double t69612 = t69611+1.0;
            double t69613 = gamma_bb[index]*gcaa*t69459*4.0;
            double t69614 = gamma_bb[index]*gcaa*t69601*t69596*t69597*4.0;
            double t69615 = t69602*t69596*t69597*6.0;
            double t69616 = t69600*t69598*t69599;
            double t69617 = t69613+t69614+t69615+t69616+1.0;
            double t69618 = 1.0/t69617;
            double t69619 = gamma_bb[index]*gcaa*t69459;
            double t69620 = t69619+1.0;
            double t69621 = 1.0/t69620;
            double t69622 = gamma_bb[index]*gcaa*t69459*3.0;
            double t69623 = gamma_bb[index]*gcaa*t69601*t69596*t69597;
            double t69624 = t69602*t69596*t69597*3.0;
            double t69625 = t69622+t69623+t69624+1.0;
            double t69626 = 1.0/t69625;
            double t69627 = gamma_bb[index]*gcaa*t69459*2.0;
            double t69628 = t69602*t69596*t69597;
            double t69629 = t69627+t69628+1.0;
            double t69630 = 1.0/t69629;
            double t69631 = 1.0/pow(rho_b[index],1.9E1/3.0);
            double t69632 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
               rho_b[index]*rho_b[index]*rho_b[index]);
            double t69633 = 1.0/pow(rho_b[index],3.5E1/3.0);
            double t69635 = 1.0/t69579;
            double t69636 = 1.0/(t69576*t69576);
            double t69637 = b4f*t69581*t69386*(2.0/3.0);
            double t69638 = b2f*c*t69580*(1.0/3.0);
            double t69639 = b1f*c*t69580*t69582*(1.0/6.0);
            double t69640 = b3f*c*t69409*t69580*(1.0/2.0);
            double t69641 = t69640+t69637+t69638+t69639;
            double t69642 = a1f*c*c0f*t69580*t69583*(2.0/3.0);
            double t69643 = a1p*c*c0p*t69420*t69580*(2.0/3.0);
            double t69644 = ccaa4*t69600*t69618*t69598*t69599;
            double t69645 = ccaa1*gamma_bb[index]*gcaa*t69621*t69459;
            double t69646 = ccaa3*gamma_bb[index]*gcaa*t69601*t69626*t69596*t69597;
            double t69647 = ccaa2*t69602*t69630*t69596*t69597;
            double t69648 = ccaa0+t69644+t69645+t69646+t69647;
            v_rho_b_[index] = -(X-1.0)*(t69518*t69494+rho_b[index]*t69494*(C_k*a_1*t69495*t69496*t69479*(5.0/ \
               3.0)-C_k*a_1*t69481*t69496*t69479*t69497*(5.0/3.0)-C_k*a_2*t69500*t69482*t69496*t69479*(1.0E1/3.0) \
               +C_k*a_2*t69481*t69496*t69479*t69497*(1.0E1/3.0)+C_k*a_3*t69500*t69482*t69496*t69479*5.0-C_k*a_4*t69502* \
               t69483*t69496*t69479*(2.0E1/3.0)+C_k*a_5*t69502*t69483*t69496*t69479*(2.5E1/3.0)-C_k*a_8*t69506*t69484* \
               t69496*t69479*(4.0E1/3.0)+C_k*a_9*t69506*t69484*t69496*t69479*1.5E1+C_k*a_10*t69481*t69484*t69496* \
               t69479*t69498*(5.0E1/3.0)-C_k*a_10*t69482*t69484*t69496*t69479*t69499*(5.0E1/3.0)+C_k*a_11*t69482* \
               t69484*t69496*t69479*t69499*(5.5E1/3.0)-C_k*a_3*t69501*t69481*t69482*t69496*t69479*5.0+C_k*a_4*t69501* \
               t69481*t69482*t69496*t69479*(2.0E1/3.0)-C_k*a_5*t69503*t69481*t69483*t69496*t69479*(2.5E1/3.0)+C_k* \
               a_6*t69503*t69481*t69483*t69496*t69479*1.0E1-C_k*a_6*t69504*t69482*t69483*t69496*t69479*1.0E1+C_k* \
               a_7*t69504*t69482*t69483*t69496*t69479*(3.5E1/3.0)-C_k*a_9*t69481*t69484*t69496*t69479*t69498*1.5E1- \
               C_k*a_11*t69481*t69482*t69484*1.0/pow(t69485,1.2E1)*t69496*t69479*(5.5E1/3.0)-C_k*a_7*t69505*t69481* \
               t69482*t69483*t69496*t69479*(3.5E1/3.0)+C_k*a_8*t69505*t69481*t69482*t69483*t69496*t69479*(4.0E1/3.0) \
               )-kp*rho_b[index]*t69518*1.0/(t69492*t69492)*(gamma_bb[index]*mu_*1.0/(rho_b[index]*rho_b[index]*rho_b[index]) \
               *t69490*t69486*t69487*(1.0/2.0)+gamma_bb[index]*mu_*t69486*t69487*t69488*1.0/pow(t69489,5.0/3.0)*(1.0/ \
               3.0)))-(ccab0+ccab1*gcab*t69521*t69454+ccab4*t69522*t69461*t69462+ccab2*t69453*t69455*t69519+ccab3* \
               gcab*t69520*t69453*t69454*t69455)*(-t69423+t69441+t69593+t69595+t69424*(t69569-t69405*t69452*t69446* \
               t69447*(t69569-(t69534*1.0/(t69528*t69528)*(b2f*c*t69523*(1.0/3.0)+b4f*t69540*t69386*(2.0/3.0)+b1f* \
               c*t69523*t69541*(1.0/6.0)+b3f*c*t69523*t69427*(1.0/2.0)))/t69531+a1f*c*c0f*t69523*t69532*(2.0/3.0) \
               -a1p*c*c0p*t69523*t69438*(2.0/3.0))-a1p*c*c0p*t69523*t69438*(2.0/3.0)+t69405*t69452*t69535*t69562* \
               t69447*4.0+t69405*t69535*t69446*t69447*t69566+t69405*t69442*t69443*t69452*t69535*t69446*4.0-Aa*t69405* \
               t69452*t69561*t69549*t69559*(t69562*t69447*4.0+t69442*t69443*t69446*4.0)*2.0-Aa*t69405*t69561*t69566* \
               t69549*t69559*t69568*2.0+(t69405*t69452*t69561*1.0/(t69555*t69555)*t69549*t69568*(b2a*c*t69523*(1.0/ \
               3.0)+b4a*t69540*t69386*(2.0/3.0)+b1a*c*t69523*t69541*(1.0/6.0)+b3a*c*t69523*t69427*(1.0/2.0)))/t69558- \
               Aa*a1a*c*t69405*t69523*t69452*t69549*t69559*t69568*(2.0/3.0))+rho_b[index]*(t69643-t69591+t69402*t69405* \
               (t69642+t69591-t69641*t69571*t69635*t69636-a1p*c*c0p*t69420*t69580*(2.0/3.0)))-t69405*t69452*t69535* \
               t69446*t69447)-(rho_b[index]*(t69423-t69402*t69405*t69592)+rho_a[index]*(t69477-t69402*t69405*(t69477- \
               c0f*log((t69406*(1.0/2.0))/(b1f*t69384+b3f*t69385+b2f*c*t69382+b4f*t69386*t69387)+1.0)*(a1f*c*t69382+ \
               1.0)*2.0))-t69424*(t69441+t69593-t69405*t69452*t69535*t69446*t69447))*(ccab1*gamma_bb[index]*gcab* \
               t69521*t69456*(4.0/3.0)-ccab2*t69453*1.0/(t69472*t69472)*t69455*(gamma_bb[index]*gcab*t69456*(8.0/ \
               3.0)+gamma_bb[index]*t69453*t69454*t69456*(8.0/3.0))-ccab4*t69461*t69462*1.0/(t69467*t69467)*(gamma_bb[index]* \
               gcab*t69456*(1.6E1/3.0)+gamma_bb[index]*t69453*t69454*t69456*1.6E1+gamma_bb[index]*gcab*t69453*t69455* \
               t69456*1.6E1+gamma_bb[index]*t69461*t69454*t69455*t69456*(1.6E1/3.0))-ccab1*gamma_bb[index]*t69453* \
               t69454*t69456*1.0/(t69469*t69469)*(4.0/3.0)+ccab2*gamma_bb[index]*t69453*t69454*t69456*t69519*(8.0/ \
               3.0)-ccab3*gcab*t69453*t69454*t69455*1.0/(t69476*t69476)*(gamma_bb[index]*gcab*t69456*4.0+gamma_bb[index]* \
               t69453*t69454*t69456*8.0+gamma_bb[index]*gcab*t69453*t69455*t69456*4.0)+ccab3*gamma_bb[index]*gcab* \
               t69520*t69453*t69455*t69456*4.0+ccab4*gamma_bb[index]*t69522*t69461*t69454*t69455*t69456*(1.6E1/3.0) \
               )-t69603*t69612*t69648+rho_b[index]*t69603*t69612*(ccaa1*gamma_bb[index]*gcaa*t69621*t69456*(8.0/3.0) \
               +ccaa2*t69630*t69631*t69596*t69597*(1.6E1/3.0)+ccaa4*t69633*t69618*t69598*t69599*(3.2E1/3.0)-ccaa1* \
               1.0/(t69620*t69620)*t69631*t69596*t69597*(8.0/3.0)-ccaa2*t69602*1.0/(t69629*t69629)*t69596*t69597* \
               (gamma_bb[index]*gcaa*t69456*(1.6E1/3.0)+t69631*t69596*t69597*(1.6E1/3.0))-ccaa4*t69600*1.0/(t69617* \
               t69617)*t69598*t69599*(gamma_bb[index]*gcaa*t69456*(3.2E1/3.0)+t69631*t69596*t69597*3.2E1+t69633*t69598* \
               t69599*(3.2E1/3.0)+gamma_bb[index]*gcaa*t69632*t69596*t69597*3.2E1)+ccaa3*gamma_bb[index]*gcaa*t69632* \
               t69626*t69596*t69597*8.0-ccaa3*gamma_bb[index]*gcaa*t69601*1.0/(t69625*t69625)*t69596*t69597*(gamma_bb[index]* \
               gcaa*t69456*8.0+t69631*t69596*t69597*1.6E1+gamma_bb[index]*gcaa*t69632*t69596*t69597*8.0))+rho_b[index]* \
               t69612*t69648*(t69643-t69591+t69402*t69405*(t69642-t69643+t69591-t69641*t69571*t69635*t69636))-gamma_bb[index]* \
               t69603*t69605*t69607*t69648*t69479*(1.0/8.0);
        } else if (rho_a[index] > cutoff_) {
            v_rho_b_[index] = 0.0;
        } else if (rho_b[index] > cutoff_) {
            double t73388 = pow(rho_b[index],5.0/3.0);
            double t73389 = 1.0/tau_b[index];
            double t73390 = C_k*t73388*t73389;
            double t73391 = t73390-1.0;
            double t73392 = t73391*t73391;
            double t73393 = t73392*t73392;
            double t73394 = t73393*t73393;
            double t73395 = t73390+1.0;
            double t73396 = 1.0/pow(rho_b[index],1.0/3.0);
            double t73397 = c*t73396;
            double t73398 = sqrt(t73397);
            double t73399 = pow(t73397,3.0/2.0);
            double t73400 = c*c;
            double t73401 = 1.0/pow(rho_b[index],2.0/3.0);
            double t73402 = 1.0/c0p;
            double t73403 = b1p*t73398;
            double t73404 = b3p*t73399;
            double t73405 = b4p*t73400*t73401;
            double t73406 = b2p*c*t73396;
            double t73407 = t73403+t73404+t73405+t73406;
            double t73408 = 1.0/t73407;
            double t73409 = t73402*t73408*(1.0/2.0);
            double t73410 = t73409+1.0;
            double t73411 = log(t73410);
            double t73412 = a1p*c*t73396;
            double t73413 = t73412+1.0;
            double t73414 = gamma_bb[index]*gamma_bb[index];
            double t73415 = gcaa*gcaa;
            double t73416 = t73414*t73414;
            double t73417 = t73415*t73415;
            double t73418 = 1.0/pow(rho_b[index],3.2E1/3.0);
            double t73419 = 1.0/pow(rho_b[index],8.0/3.0);
            double t73420 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
               rho_b[index]*rho_b[index]);
            double t73421 = 1.0/pow(rho_b[index],1.6E1/3.0);
            double t73422 = pow(2.0,1.0/3.0);
            double t73423 = t73422*2.0;
            double t73424 = t73423-2.0;
            double t73425 = two_13*2.0;
            double t73426 = t73425-2.0;
            double t73427 = 1.0/t73426;
            double t73428 = 1.0/c0f;
            double t73429 = b1f*t73398;
            double t73430 = b3f*t73399;
            double t73431 = b4f*t73400*t73401;
            double t73432 = b2f*c*t73396;
            double t73433 = t73430+t73431+t73432+t73429;
            double t73434 = 1.0/t73433;
            double t73435 = t73434*t73428*(1.0/2.0);
            double t73436 = t73435+1.0;
            double t73437 = log(t73436);
            double t73438 = a1f*c*t73396;
            double t73439 = t73438+1.0;
            double t73440 = c0f*t73437*t73439*2.0;
            double t73441 = c0p*t73411*t73413*2.0;
            double t73442 = tau_b[index]-1.0/1.0E20;
            double t73443 = ( (t73442 > 0.0) ?  1.0 : 0.0 ) ;
            double t73444 = tau_b[index]*2.0;
            double t73445 = 1.0/rho_b[index];
            double t73495 = gamma_bb[index]*t73445*(1.0/4.0);
            double t73446 = t73444-t73495;
            double t73447 = t73446*t73389*(1.0/2.0);
            double t73448 = t73447-1.0;
            double t73449 = t73443*t73448;
            double t73450 = t73449+1.0;
            double t73451 = gamma_bb[index]*gcaa*t73419*4.0;
            double t73452 = gamma_bb[index]*gcaa*t73420*t73414*t73415*4.0;
            double t73453 = t73421*t73414*t73415*6.0;
            double t73454 = t73416*t73417*t73418;
            double t73455 = t73451+t73452+t73453+t73454+1.0;
            double t73456 = 1.0/t73455;
            double t73457 = gamma_bb[index]*gcaa*t73419;
            double t73458 = t73457+1.0;
            double t73459 = 1.0/t73458;
            double t73460 = gamma_bb[index]*gcaa*t73419*3.0;
            double t73461 = gamma_bb[index]*gcaa*t73420*t73414*t73415;
            double t73462 = t73421*t73414*t73415*3.0;
            double t73463 = t73460+t73461+t73462+1.0;
            double t73464 = 1.0/t73463;
            double t73465 = gamma_bb[index]*gcaa*t73419*2.0;
            double t73466 = t73421*t73414*t73415;
            double t73467 = t73465+t73466+1.0;
            double t73468 = 1.0/t73467;
            double t73469 = 1.0/pow(rho_b[index],1.9E1/3.0);
            double t73470 = 1.0/pow(rho_b[index],1.1E1/3.0);
            double t73471 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
               rho_b[index]*rho_b[index]*rho_b[index]);
            double t73472 = 1.0/pow(rho_b[index],3.5E1/3.0);
            double t73473 = X-1.0;
            double t73474 = 1.0/(k*k);
            double t73475 = 1.0/kp;
            double t73476 = 1.0/(rho_b[index]*rho_b[index]);
            double t73477 = rho_b[index]*2.0;
            double t73478 = 1.0/pow(t73477,2.0/3.0);
            double t73479 = gamma_bb[index]*mu_*t73474*t73475*t73476*t73478*(1.0/4.0);
            double t73480 = t73479+1.0;
            double t73481 = 1.0/t73480;
            double t73482 = kp-kp*t73481+1.0;
            double t73483 = 1.0/t73395;
            double t73484 = pow(rho_b[index],2.0/3.0);
            double t73485 = 1.0/(t73395*t73395);
            double t73486 = 1.0/pow(t73395,1.0E1);
            double t73487 = 1.0/pow(t73395,1.1E1);
            double t73488 = 1.0/(t73395*t73395*t73395);
            double t73489 = 1.0/(t73395*t73395*t73395*t73395);
            double t73490 = 1.0/(t73395*t73395*t73395*t73395*t73395);
            double t73491 = 1.0/(t73395*t73395*t73395*t73395*t73395*t73395);
            double t73492 = 1.0/(t73395*t73395*t73395*t73395*t73395*t73395*t73395);
            double t73493 = 1.0/(t73395*t73395*t73395*t73395*t73395*t73395*t73395*t73395);
            double t73494 = 1.0/(t73395*t73395*t73395*t73395*t73395*t73395*t73395*t73395*t73395);
            double t73496 = 1.0/pow(rho_b[index],4.0/3.0);
            double t73497 = 1.0/pow(rho_b[index],5.0/3.0);
            double t73498 = 1.0/sqrt(t73397);
            double t73499 = 1.0/t73410;
            double t73500 = 1.0/(t73407*t73407);
            double t73501 = b4p*t73400*t73497*(2.0/3.0);
            double t73502 = b2p*c*t73496*(1.0/3.0);
            double t73503 = b1p*c*t73496*t73498*(1.0/6.0);
            double t73504 = b3p*c*t73496*t73398*(1.0/2.0);
            double t73505 = t73501+t73502+t73503+t73504;
            double t73506 = t73500*t73413*t73505*t73499;
            double t73507 = ccaa4*t73416*t73417*t73418*t73456;
            double t73508 = ccaa1*gamma_bb[index]*gcaa*t73419*t73459;
            double t73509 = ccaa3*gamma_bb[index]*gcaa*t73420*t73414*t73415*t73464;
            double t73510 = ccaa2*t73421*t73414*t73415*t73468;
            double t73511 = ccaa0+t73510+t73507+t73508+t73509;
            double t73512 = t73440-t73441;
            double t73513 = t73512*t73424*t73427;
            double t73514 = t73441+t73513;
            double t73515 = a_1*t73391*t73483;
            double t73516 = a_10*t73392*t73394*t73486;
            double t73517 = a_11*t73391*t73392*t73394*t73487;
            double t73518 = a_2*t73392*t73485;
            double t73519 = a_3*t73391*t73392*t73488;
            double t73520 = a_4*t73393*t73489;
            double t73521 = a_5*t73391*t73490*t73393;
            double t73522 = a_6*t73392*t73491*t73393;
            double t73523 = a_7*t73391*t73392*t73393*t73492;
            double t73524 = a_8*t73394*t73493;
            double t73525 = a_9*t73391*t73394*t73494;
            double t73526 = t73520+t73521+t73522+t73523+t73515+t73524+t73516+t73525+t73517+t73518+t73519+1.0;
            v_rho_b_[index] = -t73526*t73473*t73482-t73511*t73450*(t73441+t73424*t73427*(t73440-c0p*t73411*t73413* \
               2.0))+rho_b[index]*t73511*t73450*(-t73506+t73424*t73427*(t73506-(1.0/(t73433*t73433)*t73439*(b2f*c* \
               t73496*(1.0/3.0)+b4f*t73400*t73497*(2.0/3.0)+b1f*c*t73496*t73498*(1.0/6.0)+b3f*c*t73496*t73398*(1.0/ \
               2.0)))/t73436+a1f*c*c0f*t73437*t73496*(2.0/3.0)-a1p*c*c0p*t73411*t73496*(2.0/3.0))+a1p*c*c0p*t73411* \
               t73496*(2.0/3.0))-rho_b[index]*t73473*t73482*(C_k*a_1*t73483*t73484*t73389*(5.0/3.0)-C_k*a_1*t73391* \
               t73484*t73485*t73389*(5.0/3.0)+C_k*a_2*t73391*t73484*t73485*t73389*(1.0E1/3.0)-C_k*a_2*t73392*t73484* \
               t73389*t73488*(1.0E1/3.0)+C_k*a_3*t73392*t73484*t73389*t73488*5.0-C_k*a_4*t73490*t73393*t73484*t73389* \
               (2.0E1/3.0)+C_k*a_5*t73490*t73393*t73484*t73389*(2.5E1/3.0)-C_k*a_8*t73394*t73484*t73494*t73389*(4.0E1/ \
               3.0)+C_k*a_9*t73394*t73484*t73494*t73389*1.5E1+C_k*a_10*t73391*t73394*t73484*t73486*t73389*(5.0E1/ \
               3.0)-C_k*a_10*t73392*t73394*t73484*t73487*t73389*(5.0E1/3.0)+C_k*a_11*t73392*t73394*t73484*t73487* \
               t73389*(5.5E1/3.0)-C_k*a_3*t73391*t73392*t73484*t73389*t73489*5.0+C_k*a_4*t73391*t73392*t73484*t73389* \
               t73489*(2.0E1/3.0)-C_k*a_5*t73391*t73491*t73393*t73484*t73389*(2.5E1/3.0)+C_k*a_6*t73391*t73491*t73393* \
               t73484*t73389*1.0E1-C_k*a_6*t73392*t73393*t73492*t73484*t73389*1.0E1+C_k*a_7*t73392*t73393*t73492* \
               t73484*t73389*(3.5E1/3.0)-C_k*a_9*t73391*t73394*t73484*t73486*t73389*1.5E1-C_k*a_11*t73391*t73392* \
               t73394*t73484*1.0/pow(t73395,1.2E1)*t73389*(5.5E1/3.0)-C_k*a_7*t73391*t73392*t73393*t73484*t73493* \
               t73389*(3.5E1/3.0)+C_k*a_8*t73391*t73392*t73393*t73484*t73493*t73389*(4.0E1/3.0))+rho_b[index]*t73450* \
               t73514*(ccaa1*gamma_bb[index]*gcaa*t73470*t73459*(8.0/3.0)+ccaa4*t73416*t73417*t73472*t73456*(3.2E1/ \
               3.0)+ccaa2*t73414*t73415*t73468*t73469*(1.6E1/3.0)-ccaa1*t73414*t73415*1.0/(t73458*t73458)*t73469* \
               (8.0/3.0)-ccaa2*t73421*t73414*t73415*1.0/(t73467*t73467)*(gamma_bb[index]*gcaa*t73470*(1.6E1/3.0)+ \
               t73414*t73415*t73469*(1.6E1/3.0))-ccaa4*t73416*t73417*t73418*1.0/(t73455*t73455)*(gamma_bb[index]* \
               gcaa*t73470*(3.2E1/3.0)+t73416*t73417*t73472*(3.2E1/3.0)+t73414*t73415*t73469*3.2E1+gamma_bb[index]* \
               gcaa*t73414*t73415*t73471*3.2E1)+ccaa3*gamma_bb[index]*gcaa*t73414*t73415*t73471*t73464*8.0-ccaa3* \
               gamma_bb[index]*gcaa*t73420*t73414*t73415*1.0/(t73463*t73463)*(gamma_bb[index]*gcaa*t73470*8.0+t73414* \
               t73415*t73469*1.6E1+gamma_bb[index]*gcaa*t73414*t73415*t73471*8.0))-gamma_bb[index]*t73511*t73514* \
               t73443*t73445*t73389*(1.0/8.0)+kp*rho_b[index]*1.0/(t73480*t73480)*t73526*t73473*(gamma_bb[index]* \
               mu_*1.0/(rho_b[index]*rho_b[index]*rho_b[index])*t73474*t73475*t73478*(1.0/2.0)+gamma_bb[index]*mu_* \
               t73474*t73475*t73476*1.0/pow(t73477,5.0/3.0)*(1.0/3.0));
        } else {
            v_rho_b_[index] = 0.0;
        } 

        if (is_gga_) {

            //V_gamma_aa
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t69650 = 1.0/pow(rho_a[index],1.0/3.0);
                double t69651 = c*t69650;
                double t69652 = sqrt(t69651);
                double t69653 = pow(t69651,3.0/2.0);
                double t69654 = c*c;
                double t69655 = 1.0/pow(rho_a[index],2.0/3.0);
                double t69656 = 1.0/c0p;
                double t69657 = b1p*t69652;
                double t69658 = b3p*t69653;
                double t69659 = b4p*t69654*t69655;
                double t69660 = b2p*c*t69650;
                double t69661 = t69660+t69657+t69658+t69659;
                double t69662 = 1.0/t69661;
                double t69663 = t69662*t69656*(1.0/2.0);
                double t69664 = t69663+1.0;
                double t69665 = log(t69664);
                double t69666 = a1p*c*t69650;
                double t69667 = t69666+1.0;
                double t69668 = pow(2.0,1.0/3.0);
                double t69669 = t69668*2.0;
                double t69670 = t69669-2.0;
                double t69671 = two_13*2.0;
                double t69672 = t69671-2.0;
                double t69673 = 1.0/t69672;
                double t69674 = 1.0/c0f;
                double t69675 = 1.0/pow(rho_b[index],1.0/3.0);
                double t69676 = c*t69675;
                double t69677 = sqrt(t69676);
                double t69678 = pow(t69676,3.0/2.0);
                double t69679 = 1.0/pow(rho_b[index],2.0/3.0);
                double t69680 = b1p*t69677;
                double t69681 = b3p*t69678;
                double t69682 = b4p*t69654*t69679;
                double t69683 = b2p*c*t69675;
                double t69684 = t69680+t69681+t69682+t69683;
                double t69685 = 1.0/t69684;
                double t69686 = t69656*t69685*(1.0/2.0);
                double t69687 = t69686+1.0;
                double t69688 = log(t69687);
                double t69689 = a1p*c*t69675;
                double t69690 = t69689+1.0;
                double t69691 = c0p*t69690*t69688*2.0;
                double t69692 = rho_a[index]+rho_b[index];
                double t69693 = 1.0/pow(t69692,1.0/3.0);
                double t69694 = c*t69693;
                double t69695 = sqrt(t69694);
                double t69696 = pow(t69694,3.0/2.0);
                double t69697 = 1.0/pow(t69692,2.0/3.0);
                double t69698 = b1p*t69695;
                double t69699 = b3p*t69696;
                double t69700 = b4p*t69654*t69697;
                double t69701 = b2p*c*t69693;
                double t69702 = t69700+t69701+t69698+t69699;
                double t69703 = 1.0/t69702;
                double t69704 = t69703*t69656*(1.0/2.0);
                double t69705 = t69704+1.0;
                double t69706 = log(t69705);
                double t69707 = a1p*c*t69693;
                double t69708 = t69707+1.0;
                double t69709 = c0p*t69706*t69708*2.0;
                double t69710 = rho_a[index]-rho_b[index];
                double t69711 = t69710*t69710;
                double t69712 = 1.0/t69692;
                double t69713 = t69710*t69712;
                double t69714 = 1.0/(t69692*t69692*t69692*t69692);
                double t69715 = t69711*t69711;
                double t69716 = t69713+1.0;
                double t69717 = pow(t69716,4.0/3.0);
                double t69718 = -t69713+1.0;
                double t69719 = pow(t69718,4.0/3.0);
                double t69720 = t69717+t69719-2.0;
                double t69721 = 1.0/pow(rho_a[index],8.0/3.0);
                double t69722 = gamma_aa[index]*t69721*(1.0/2.0);
                double t69723 = 1.0/pow(rho_b[index],8.0/3.0);
                double t69724 = gamma_bb[index]*t69723*(1.0/2.0);
                double t69725 = t69722+t69724;
                double t69726 = gcab*t69725;
                double t69727 = t69726+1.0;
                double t69728 = gcab*gcab;
                double t69729 = t69725*t69725;
                double t69730 = t69728*t69728;
                double t69731 = t69729*t69729;
                double t69732 = t69728*t69729;
                double t69733 = gcab*t69725*2.0;
                double t69734 = t69732+t69733+1.0;
                double t69735 = t69728*t69729*3.0;
                double t69736 = gcab*t69725*t69728*t69729;
                double t69737 = gcab*t69725*3.0;
                double t69738 = t69735+t69736+t69737+1.0;
                double t69739 = t69728*t69729*6.0;
                double t69740 = gcab*t69725*t69728*t69729*4.0;
                double t69741 = t69730*t69731;
                double t69742 = gcab*t69725*4.0;
                double t69743 = t69740+t69741+t69742+t69739+1.0;
                double t69744 = c0p*t69665*t69667*2.0;
                double t69745 = b1f*t69652;
                double t69746 = b3f*t69653;
                double t69747 = b4f*t69654*t69655;
                double t69748 = b2f*c*t69650;
                double t69749 = t69745+t69746+t69747+t69748;
                double t69750 = 1.0/t69749;
                double t69751 = t69750*t69674*(1.0/2.0);
                double t69752 = t69751+1.0;
                double t69753 = log(t69752);
                double t69754 = a1f*c*t69650;
                double t69755 = t69754+1.0;
                double t69765 = c0f*t69753*t69755*2.0;
                double t69756 = t69744-t69765;
                double t69766 = t69670*t69673*t69756;
                double t69757 = t69744-t69766;
                double t69758 = gamma_aa[index]*gamma_aa[index];
                double t69759 = gcaa*gcaa;
                double t69760 = t69758*t69758;
                double t69761 = t69759*t69759;
                double t69762 = 1.0/pow(rho_a[index],3.2E1/3.0);
                double t69763 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t69764 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t69767 = tau_a[index]-1.0/1.0E20;
                double t69768 = ( (t69767 > 0.0) ?  1.0 : 0.0 ) ;
                double t69769 = 1.0/tau_a[index];
                double t69770 = gamma_aa[index]*gcaa*t69721;
                double t69771 = t69770+1.0;
                double t69772 = 1.0/t69771;
                double t69773 = gamma_aa[index]*gcaa*t69721*4.0;
                double t69774 = gamma_aa[index]*gcaa*t69763*t69758*t69759*4.0;
                double t69775 = t69764*t69758*t69759*6.0;
                double t69776 = t69760*t69761*t69762;
                double t69777 = t69773+t69774+t69775+t69776+1.0;
                double t69778 = 1.0/t69777;
                double t69779 = gamma_aa[index]*gcaa*t69721*2.0;
                double t69780 = t69764*t69758*t69759;
                double t69781 = t69780+t69779+1.0;
                double t69782 = 1.0/t69781;
                double t69783 = gamma_aa[index]*gcaa*t69721*3.0;
                double t69784 = gamma_aa[index]*gcaa*t69763*t69758*t69759;
                double t69785 = t69764*t69758*t69759*3.0;
                double t69786 = t69783+t69784+t69785+1.0;
                double t69787 = 1.0/t69786;
                double t69788 = 1.0/rho_a[index];
                double t69789 = 1.0/(k*k);
                double t69790 = rho_a[index]*2.0;
                double t69791 = 1.0/pow(t69790,2.0/3.0);
                double t69792 = pow(rho_a[index],5.0/3.0);
                double t69793 = C_k*t69792*t69769;
                double t69794 = t69793-1.0;
                double t69795 = t69794*t69794;
                double t69796 = t69795*t69795;
                double t69797 = t69796*t69796;
                double t69798 = t69793+1.0;
                v_gamma_aa_[index] = (rho_a[index]*t69757+rho_b[index]*(t69691-t69670*t69673*(t69691-c0f*log((t69674* \
                   (1.0/2.0))/(b1f*t69677+b3f*t69678+b2f*c*t69675+b4f*t69654*t69679)+1.0)*(a1f*c*t69675+1.0)*2.0))-t69692* \
                   (t69709-t69720*t69714*t69715*t69673*(t69709-c0f*log((t69674*(1.0/2.0))/(b1f*t69695+b3f*t69696+b2f* \
                   c*t69693+b4f*t69654*t69697)+1.0)*(a1f*c*t69693+1.0)*2.0)+(Aa*t69720*t69673*log((1.0/2.0)/(Aa*(b1a* \
                   t69695+b3a*t69696+b2a*c*t69693+b4a*t69654*t69697))+1.0)*(t69714*t69715-1.0)*(a1a*c*t69693+1.0)*2.0) \
                   /d2fz0))*((ccab1*gcab*t69721*(1.0/2.0))/t69727-ccab4*t69730*t69731*1.0/(t69743*t69743)*(gcab*t69721* \
                   2.0+t69721*t69725*t69728*6.0+gcab*t69721*t69728*t69729*6.0+t69721*t69730*t69725*t69729*2.0)-ccab2* \
                   1.0/(t69734*t69734)*t69728*t69729*(gcab*t69721+t69721*t69725*t69728)+(ccab2*t69721*t69725*t69728)/ \
                   t69734-ccab1*t69721*t69725*1.0/(t69727*t69727)*t69728*(1.0/2.0)+(ccab3*gcab*t69721*t69728*t69729*(3.0/ \
                   2.0))/t69738+(ccab4*t69721*t69730*t69725*t69729*2.0)/t69743-ccab3*gcab*t69725*t69728*t69729*1.0/(t69738* \
                   t69738)*(gcab*t69721*(3.0/2.0)+t69721*t69725*t69728*3.0+gcab*t69721*t69728*t69729*(3.0/2.0)))+t69757* \
                   t69768*t69769*(ccaa0+ccaa1*gamma_aa[index]*gcaa*t69721*t69772+ccaa4*t69760*t69761*t69762*t69778+ccaa2* \
                   t69764*t69782*t69758*t69759+ccaa3*gamma_aa[index]*gcaa*t69763*t69758*t69759*t69787)*(1.0/8.0)-rho_a[index]* \
                   t69757*(t69768*(t69769*(tau_a[index]*2.0-gamma_aa[index]*t69788*(1.0/4.0))*(1.0/2.0)-1.0)+1.0)*(ccaa1* \
                   gcaa*t69721*t69772+ccaa2*gamma_aa[index]*t69764*t69782*t69759*2.0-ccaa1*gamma_aa[index]*1.0/(t69771* \
                   t69771)*t69764*t69759-ccaa2*1.0/(t69781*t69781)*t69764*t69758*t69759*(gcaa*t69721*2.0+gamma_aa[index]* \
                   t69764*t69759*2.0)-ccaa4*t69760*t69761*t69762*1.0/(t69777*t69777)*(gcaa*t69721*4.0+gamma_aa[index]* \
                   t69764*t69759*1.2E1+gamma_aa[index]*t69761*t69762*t69758*4.0+gcaa*t69763*t69758*t69759*1.2E1)+ccaa4* \
                   gamma_aa[index]*t69761*t69762*t69758*t69778*4.0+ccaa3*gcaa*t69763*t69758*t69759*t69787*3.0-ccaa3*gamma_aa[index]* \
                   gcaa*t69763*t69758*t69759*1.0/(t69786*t69786)*(gcaa*t69721*3.0+gamma_aa[index]*t69764*t69759*6.0+gcaa* \
                   t69763*t69758*t69759*3.0))-mu_*t69791*t69788*t69789*1.0/pow((gamma_aa[index]*mu_*1.0/(rho_a[index]* \
                   rho_a[index])*t69791*t69789*(1.0/4.0))/kp+1.0,2.0)*(X-1.0)*((a_1*t69794)/t69798+a_2*t69795*1.0/(t69798* \
                   t69798)+a_4*t69796*1.0/(t69798*t69798*t69798*t69798)+a_8*t69797*1.0/(t69798*t69798*t69798*t69798*t69798* \
                   t69798*t69798*t69798)+a_10*t69795*t69797*1.0/pow(t69798,1.0E1)+a_3*t69794*t69795*1.0/(t69798*t69798* \
                   t69798)+a_5*t69794*t69796*1.0/(t69798*t69798*t69798*t69798*t69798)+a_6*t69795*t69796*1.0/(t69798*t69798* \
                   t69798*t69798*t69798*t69798)+a_9*t69794*t69797*1.0/(t69798*t69798*t69798*t69798*t69798*t69798*t69798* \
                   t69798*t69798)+a_11*t69794*t69795*t69797*1.0/pow(t69798,1.1E1)+a_7*t69794*t69795*t69796*1.0/(t69798* \
                   t69798*t69798*t69798*t69798*t69798*t69798)+1.0)*(1.0/4.0);
            } else if (rho_a[index] > cutoff_) {
                double t74655 = 1.0/pow(rho_a[index],1.0/3.0);
                double t74656 = c*t74655;
                double t74657 = sqrt(t74656);
                double t74658 = pow(t74656,3.0/2.0);
                double t74659 = c*c;
                double t74660 = 1.0/pow(rho_a[index],2.0/3.0);
                double t74661 = 1.0/c0p;
                double t74662 = b1p*t74657;
                double t74663 = b3p*t74658;
                double t74664 = b4p*t74660*t74659;
                double t74665 = b2p*c*t74655;
                double t74666 = t74662+t74663+t74664+t74665;
                double t74667 = 1.0/t74666;
                double t74668 = t74661*t74667*(1.0/2.0);
                double t74669 = t74668+1.0;
                double t74670 = log(t74669);
                double t74671 = a1p*c*t74655;
                double t74672 = t74671+1.0;
                double t74673 = gamma_aa[index]*gamma_aa[index];
                double t74674 = gcaa*gcaa;
                double t74675 = t74673*t74673;
                double t74676 = t74674*t74674;
                double t74677 = 1.0/pow(rho_a[index],3.2E1/3.0);
                double t74678 = 1.0/pow(rho_a[index],8.0/3.0);
                double t74679 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t74680 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t74681 = pow(2.0,1.0/3.0);
                double t74682 = t74681*2.0;
                double t74683 = t74682-2.0;
                double t74684 = two_13*2.0;
                double t74685 = t74684-2.0;
                double t74686 = 1.0/t74685;
                double t74687 = 1.0/c0f;
                double t74688 = b1f*t74657;
                double t74689 = b3f*t74658;
                double t74690 = b4f*t74660*t74659;
                double t74691 = b2f*c*t74655;
                double t74692 = t74690+t74691+t74688+t74689;
                double t74693 = 1.0/t74692;
                double t74694 = t74693*t74687*(1.0/2.0);
                double t74695 = t74694+1.0;
                double t74696 = log(t74695);
                double t74697 = a1f*c*t74655;
                double t74698 = t74697+1.0;
                double t74699 = c0f*t74696*t74698*2.0;
                double t74700 = c0p*t74670*t74672*2.0;
                double t74701 = tau_a[index]-1.0/1.0E20;
                double t74702 = ( (t74701 > 0.0) ?  1.0 : 0.0 ) ;
                double t74703 = 1.0/tau_a[index];
                double t74704 = gamma_aa[index]*gcaa*t74678;
                double t74705 = t74704+1.0;
                double t74706 = 1.0/t74705;
                double t74707 = gamma_aa[index]*gcaa*t74678*4.0;
                double t74708 = gamma_aa[index]*gcaa*t74673*t74674*t74679*4.0;
                double t74709 = t74680*t74673*t74674*6.0;
                double t74710 = t74675*t74676*t74677;
                double t74711 = t74710+t74707+t74708+t74709+1.0;
                double t74712 = 1.0/t74711;
                double t74713 = gamma_aa[index]*gcaa*t74678*2.0;
                double t74714 = t74680*t74673*t74674;
                double t74715 = t74713+t74714+1.0;
                double t74716 = 1.0/t74715;
                double t74717 = gamma_aa[index]*gcaa*t74678*3.0;
                double t74718 = gamma_aa[index]*gcaa*t74673*t74674*t74679;
                double t74719 = t74680*t74673*t74674*3.0;
                double t74720 = t74717+t74718+t74719+1.0;
                double t74721 = 1.0/t74720;
                double t74722 = 1.0/rho_a[index];
                double t74723 = 1.0/(k*k);
                double t74724 = rho_a[index]*2.0;
                double t74725 = 1.0/pow(t74724,2.0/3.0);
                double t74726 = pow(rho_a[index],5.0/3.0);
                double t74727 = C_k*t74703*t74726;
                double t74728 = t74727-1.0;
                double t74729 = t74728*t74728;
                double t74730 = t74729*t74729;
                double t74731 = t74730*t74730;
                double t74732 = t74727+1.0;
                v_gamma_aa_[index] = -rho_a[index]*(t74700-t74683*t74686*(t74700-t74699))*(t74702*(t74703*(tau_a[index]* \
                   2.0-gamma_aa[index]*t74722*(1.0/4.0))*(1.0/2.0)-1.0)+1.0)*(ccaa1*gcaa*t74706*t74678+ccaa2*gamma_aa[index]* \
                   t74680*t74716*t74674*2.0-ccaa1*gamma_aa[index]*1.0/(t74705*t74705)*t74680*t74674-ccaa2*1.0/(t74715* \
                   t74715)*t74680*t74673*t74674*(gcaa*t74678*2.0+gamma_aa[index]*t74680*t74674*2.0)-ccaa4*1.0/(t74711* \
                   t74711)*t74675*t74676*t74677*(gcaa*t74678*4.0+gamma_aa[index]*t74680*t74674*1.2E1+gamma_aa[index]* \
                   t74673*t74676*t74677*4.0+gcaa*t74673*t74674*t74679*1.2E1)+ccaa4*gamma_aa[index]*t74712*t74673*t74676* \
                   t74677*4.0+ccaa3*gcaa*t74721*t74673*t74674*t74679*3.0-ccaa3*gamma_aa[index]*gcaa*1.0/(t74720*t74720) \
                   *t74673*t74674*t74679*(gcaa*t74678*3.0+gamma_aa[index]*t74680*t74674*6.0+gcaa*t74673*t74674*t74679* \
                   3.0))+t74702*t74703*(t74700+t74683*t74686*(t74699-c0p*t74670*t74672*2.0))*(ccaa0+ccaa1*gamma_aa[index]* \
                   gcaa*t74706*t74678+ccaa2*t74680*t74716*t74673*t74674+ccaa4*t74712*t74675*t74676*t74677+ccaa3*gamma_aa[index]* \
                   gcaa*t74721*t74673*t74674*t74679)*(1.0/8.0)-mu_*t74722*t74723*t74725*1.0/pow((gamma_aa[index]*mu_* \
                   1.0/(rho_a[index]*rho_a[index])*t74723*t74725*(1.0/4.0))/kp+1.0,2.0)*(X-1.0)*((a_1*t74728)/t74732+ \
                   a_2*1.0/(t74732*t74732)*t74729+a_4*t74730*1.0/(t74732*t74732*t74732*t74732)+a_8*t74731*1.0/(t74732* \
                   t74732*t74732*t74732*t74732*t74732*t74732*t74732)+a_10*t74731*1.0/pow(t74732,1.0E1)*t74729+a_3*1.0/ \
                   (t74732*t74732*t74732)*t74728*t74729+a_5*t74730*1.0/(t74732*t74732*t74732*t74732*t74732)*t74728+a_6* \
                   t74730*1.0/(t74732*t74732*t74732*t74732*t74732*t74732)*t74729+a_9*t74731*1.0/(t74732*t74732*t74732* \
                   t74732*t74732*t74732*t74732*t74732*t74732)*t74728+a_11*t74731*1.0/pow(t74732,1.1E1)*t74728*t74729+ \
                   a_7*t74730*1.0/(t74732*t74732*t74732*t74732*t74732*t74732*t74732)*t74728*t74729+1.0)*(1.0/4.0);
            } else if (rho_b[index] > cutoff_) {
                v_gamma_aa_[index] = 0.0;
            } else {
                v_gamma_aa_[index] = 0.0;
            } 

            //V_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_ab_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_ab_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_ab_[index] = 0.0;
            } else {
                v_gamma_ab_[index] = 0.0;
            } 

            //V_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t69801 = 1.0/pow(rho_a[index],1.0/3.0);
                double t69802 = c*t69801;
                double t69803 = sqrt(t69802);
                double t69804 = pow(t69802,3.0/2.0);
                double t69805 = c*c;
                double t69806 = 1.0/pow(rho_a[index],2.0/3.0);
                double t69807 = 1.0/c0p;
                double t69808 = b1p*t69803;
                double t69809 = b3p*t69804;
                double t69810 = b4p*t69805*t69806;
                double t69811 = b2p*c*t69801;
                double t69812 = t69810+t69811+t69808+t69809;
                double t69813 = 1.0/t69812;
                double t69814 = t69813*t69807*(1.0/2.0);
                double t69815 = t69814+1.0;
                double t69816 = log(t69815);
                double t69817 = a1p*c*t69801;
                double t69818 = t69817+1.0;
                double t69819 = pow(2.0,1.0/3.0);
                double t69820 = t69819*2.0;
                double t69821 = t69820-2.0;
                double t69822 = two_13*2.0;
                double t69823 = t69822-2.0;
                double t69824 = 1.0/t69823;
                double t69825 = 1.0/c0f;
                double t69826 = 1.0/pow(rho_b[index],1.0/3.0);
                double t69827 = c*t69826;
                double t69828 = sqrt(t69827);
                double t69829 = pow(t69827,3.0/2.0);
                double t69830 = 1.0/pow(rho_b[index],2.0/3.0);
                double t69831 = b1p*t69828;
                double t69832 = b3p*t69829;
                double t69833 = b4p*t69830*t69805;
                double t69834 = b2p*c*t69826;
                double t69835 = t69831+t69832+t69833+t69834;
                double t69836 = 1.0/t69835;
                double t69837 = t69807*t69836*(1.0/2.0);
                double t69838 = t69837+1.0;
                double t69839 = log(t69838);
                double t69840 = a1p*c*t69826;
                double t69841 = t69840+1.0;
                double t69842 = c0p*t69841*t69839*2.0;
                double t69843 = rho_a[index]+rho_b[index];
                double t69844 = 1.0/pow(t69843,1.0/3.0);
                double t69845 = c*t69844;
                double t69846 = sqrt(t69845);
                double t69847 = pow(t69845,3.0/2.0);
                double t69848 = 1.0/pow(t69843,2.0/3.0);
                double t69849 = b1p*t69846;
                double t69850 = b3p*t69847;
                double t69851 = b4p*t69805*t69848;
                double t69852 = b2p*c*t69844;
                double t69853 = t69850+t69851+t69852+t69849;
                double t69854 = 1.0/t69853;
                double t69855 = t69807*t69854*(1.0/2.0);
                double t69856 = t69855+1.0;
                double t69857 = log(t69856);
                double t69858 = a1p*c*t69844;
                double t69859 = t69858+1.0;
                double t69860 = c0p*t69857*t69859*2.0;
                double t69861 = rho_a[index]-rho_b[index];
                double t69862 = t69861*t69861;
                double t69863 = 1.0/t69843;
                double t69864 = t69861*t69863;
                double t69865 = 1.0/(t69843*t69843*t69843*t69843);
                double t69866 = t69862*t69862;
                double t69867 = t69864+1.0;
                double t69868 = pow(t69867,4.0/3.0);
                double t69869 = -t69864+1.0;
                double t69870 = pow(t69869,4.0/3.0);
                double t69871 = t69870+t69868-2.0;
                double t69872 = 1.0/pow(rho_b[index],8.0/3.0);
                double t69873 = 1.0/pow(rho_a[index],8.0/3.0);
                double t69874 = gamma_aa[index]*t69873*(1.0/2.0);
                double t69875 = gamma_bb[index]*t69872*(1.0/2.0);
                double t69876 = t69874+t69875;
                double t69877 = gcab*t69876;
                double t69878 = t69877+1.0;
                double t69879 = gcab*gcab;
                double t69880 = t69876*t69876;
                double t69881 = t69879*t69879;
                double t69882 = t69880*t69880;
                double t69883 = t69880*t69879;
                double t69884 = gcab*t69876*2.0;
                double t69885 = t69883+t69884+1.0;
                double t69886 = t69880*t69879*3.0;
                double t69887 = gcab*t69880*t69876*t69879;
                double t69888 = gcab*t69876*3.0;
                double t69889 = t69886+t69887+t69888+1.0;
                double t69890 = t69880*t69879*6.0;
                double t69891 = gcab*t69880*t69876*t69879*4.0;
                double t69892 = t69881*t69882;
                double t69893 = gcab*t69876*4.0;
                double t69894 = t69890+t69891+t69892+t69893+1.0;
                double t69895 = c0p*t69816*t69818*2.0;
                double t69896 = b1f*t69828;
                double t69897 = b3f*t69829;
                double t69898 = b4f*t69830*t69805;
                double t69899 = b2f*c*t69826;
                double t69900 = t69896+t69897+t69898+t69899;
                double t69901 = 1.0/t69900;
                double t69902 = t69901*t69825*(1.0/2.0);
                double t69903 = t69902+1.0;
                double t69904 = log(t69903);
                double t69905 = a1f*c*t69826;
                double t69906 = t69905+1.0;
                double t69916 = c0f*t69904*t69906*2.0;
                double t69907 = t69842-t69916;
                double t69917 = t69821*t69824*t69907;
                double t69908 = t69842-t69917;
                double t69909 = gamma_bb[index]*gamma_bb[index];
                double t69910 = gcaa*gcaa;
                double t69911 = t69909*t69909;
                double t69912 = t69910*t69910;
                double t69913 = 1.0/pow(rho_b[index],3.2E1/3.0);
                double t69914 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]);
                double t69915 = 1.0/pow(rho_b[index],1.6E1/3.0);
                double t69918 = tau_b[index]-1.0/1.0E20;
                double t69919 = ( (t69918 > 0.0) ?  1.0 : 0.0 ) ;
                double t69920 = 1.0/tau_b[index];
                double t69921 = gamma_bb[index]*gcaa*t69872;
                double t69922 = t69921+1.0;
                double t69923 = 1.0/t69922;
                double t69924 = gamma_bb[index]*gcaa*t69872*4.0;
                double t69925 = gamma_bb[index]*gcaa*t69910*t69914*t69909*4.0;
                double t69926 = t69910*t69915*t69909*6.0;
                double t69927 = t69911*t69912*t69913;
                double t69928 = t69924+t69925+t69926+t69927+1.0;
                double t69929 = 1.0/t69928;
                double t69930 = gamma_bb[index]*gcaa*t69872*2.0;
                double t69931 = t69910*t69915*t69909;
                double t69932 = t69930+t69931+1.0;
                double t69933 = 1.0/t69932;
                double t69934 = gamma_bb[index]*gcaa*t69872*3.0;
                double t69935 = gamma_bb[index]*gcaa*t69910*t69914*t69909;
                double t69936 = t69910*t69915*t69909*3.0;
                double t69937 = t69934+t69935+t69936+1.0;
                double t69938 = 1.0/t69937;
                double t69939 = 1.0/rho_b[index];
                double t69940 = 1.0/(k*k);
                double t69941 = rho_b[index]*2.0;
                double t69942 = 1.0/pow(t69941,2.0/3.0);
                double t69943 = pow(rho_b[index],5.0/3.0);
                double t69944 = C_k*t69920*t69943;
                double t69945 = t69944-1.0;
                double t69946 = t69945*t69945;
                double t69947 = t69946*t69946;
                double t69948 = t69947*t69947;
                double t69949 = t69944+1.0;
                v_gamma_bb_[index] = (rho_b[index]*t69908+rho_a[index]*(t69895-t69821*t69824*(t69895-c0f*log((t69825* \
                   (1.0/2.0))/(b1f*t69803+b3f*t69804+b2f*c*t69801+b4f*t69805*t69806)+1.0)*(a1f*c*t69801+1.0)*2.0))-t69843* \
                   (t69860-t69824*t69871*t69865*t69866*(t69860-c0f*log((t69825*(1.0/2.0))/(b1f*t69846+b3f*t69847+b2f* \
                   c*t69844+b4f*t69805*t69848)+1.0)*(a1f*c*t69844+1.0)*2.0)+(Aa*t69824*t69871*log((1.0/2.0)/(Aa*(b1a* \
                   t69846+b3a*t69847+b2a*c*t69844+b4a*t69805*t69848))+1.0)*(t69865*t69866-1.0)*(a1a*c*t69844+1.0)*2.0) \
                   /d2fz0))*((ccab1*gcab*t69872*(1.0/2.0))/t69878-ccab4*t69881*t69882*1.0/(t69894*t69894)*(gcab*t69872* \
                   2.0+t69872*t69876*t69879*6.0+gcab*t69880*t69872*t69879*6.0+t69880*t69872*t69881*t69876*2.0)-ccab2* \
                   t69880*1.0/(t69885*t69885)*t69879*(gcab*t69872+t69872*t69876*t69879)+(ccab2*t69872*t69876*t69879)/ \
                   t69885-ccab1*t69872*t69876*1.0/(t69878*t69878)*t69879*(1.0/2.0)+(ccab3*gcab*t69880*t69872*t69879*(3.0/ \
                   2.0))/t69889+(ccab4*t69880*t69872*t69881*t69876*2.0)/t69894-ccab3*gcab*t69880*t69876*t69879*1.0/(t69889* \
                   t69889)*(gcab*t69872*(3.0/2.0)+t69872*t69876*t69879*3.0+gcab*t69880*t69872*t69879*(3.0/2.0)))+t69920* \
                   t69908*t69919*(ccaa0+ccaa1*gamma_bb[index]*gcaa*t69923*t69872+ccaa2*t69910*t69915*t69933*t69909+ccaa4* \
                   t69911*t69912*t69913*t69929+ccaa3*gamma_bb[index]*gcaa*t69910*t69914*t69909*t69938)*(1.0/8.0)-rho_b[index]* \
                   t69908*(t69919*(t69920*(tau_b[index]*2.0-gamma_bb[index]*t69939*(1.0/4.0))*(1.0/2.0)-1.0)+1.0)*(ccaa1* \
                   gcaa*t69923*t69872+ccaa2*gamma_bb[index]*t69910*t69915*t69933*2.0-ccaa1*gamma_bb[index]*t69910*1.0/ \
                   (t69922*t69922)*t69915-ccaa2*t69910*1.0/(t69932*t69932)*t69915*t69909*(gcaa*t69872*2.0+gamma_bb[index]* \
                   t69910*t69915*2.0)-ccaa4*t69911*t69912*t69913*1.0/(t69928*t69928)*(gcaa*t69872*4.0+gamma_bb[index]* \
                   t69910*t69915*1.2E1+gamma_bb[index]*t69912*t69913*t69909*4.0+gcaa*t69910*t69914*t69909*1.2E1)+ccaa4* \
                   gamma_bb[index]*t69912*t69913*t69909*t69929*4.0+ccaa3*gcaa*t69910*t69914*t69909*t69938*3.0-ccaa3*gamma_bb[index]* \
                   gcaa*t69910*t69914*t69909*1.0/(t69937*t69937)*(gcaa*t69872*3.0+gamma_bb[index]*t69910*t69915*6.0+gcaa* \
                   t69910*t69914*t69909*3.0))-mu_*t69940*t69942*t69939*1.0/pow((gamma_bb[index]*mu_*1.0/(rho_b[index]* \
                   rho_b[index])*t69940*t69942*(1.0/4.0))/kp+1.0,2.0)*(X-1.0)*((a_1*t69945)/t69949+a_2*t69946*1.0/(t69949* \
                   t69949)+a_4*t69947*1.0/(t69949*t69949*t69949*t69949)+a_8*t69948*1.0/(t69949*t69949*t69949*t69949*t69949* \
                   t69949*t69949*t69949)+a_10*t69946*t69948*1.0/pow(t69949,1.0E1)+a_3*t69945*t69946*1.0/(t69949*t69949* \
                   t69949)+a_5*t69945*t69947*1.0/(t69949*t69949*t69949*t69949*t69949)+a_6*t69946*t69947*1.0/(t69949*t69949* \
                   t69949*t69949*t69949*t69949)+a_9*t69945*t69948*1.0/(t69949*t69949*t69949*t69949*t69949*t69949*t69949* \
                   t69949*t69949)+a_11*t69945*t69946*t69948*1.0/pow(t69949,1.1E1)+a_7*t69945*t69946*t69947*1.0/(t69949* \
                   t69949*t69949*t69949*t69949*t69949*t69949)+1.0)*(1.0/4.0);
            } else if (rho_a[index] > cutoff_) {
                v_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                double t73530 = 1.0/pow(rho_b[index],1.0/3.0);
                double t73531 = c*t73530;
                double t73532 = sqrt(t73531);
                double t73533 = pow(t73531,3.0/2.0);
                double t73534 = c*c;
                double t73535 = 1.0/pow(rho_b[index],2.0/3.0);
                double t73536 = 1.0/c0p;
                double t73537 = b1p*t73532;
                double t73538 = b3p*t73533;
                double t73539 = b4p*t73534*t73535;
                double t73540 = b2p*c*t73530;
                double t73541 = t73540+t73537+t73538+t73539;
                double t73542 = 1.0/t73541;
                double t73543 = t73542*t73536*(1.0/2.0);
                double t73544 = t73543+1.0;
                double t73545 = log(t73544);
                double t73546 = a1p*c*t73530;
                double t73547 = t73546+1.0;
                double t73548 = gamma_bb[index]*gamma_bb[index];
                double t73549 = gcaa*gcaa;
                double t73550 = t73548*t73548;
                double t73551 = t73549*t73549;
                double t73552 = 1.0/pow(rho_b[index],3.2E1/3.0);
                double t73553 = 1.0/pow(rho_b[index],8.0/3.0);
                double t73554 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]);
                double t73555 = 1.0/pow(rho_b[index],1.6E1/3.0);
                double t73556 = pow(2.0,1.0/3.0);
                double t73557 = t73556*2.0;
                double t73558 = t73557-2.0;
                double t73559 = two_13*2.0;
                double t73560 = t73559-2.0;
                double t73561 = 1.0/t73560;
                double t73562 = 1.0/c0f;
                double t73563 = b1f*t73532;
                double t73564 = b3f*t73533;
                double t73565 = b4f*t73534*t73535;
                double t73566 = b2f*c*t73530;
                double t73567 = t73563+t73564+t73565+t73566;
                double t73568 = 1.0/t73567;
                double t73569 = t73562*t73568*(1.0/2.0);
                double t73570 = t73569+1.0;
                double t73571 = log(t73570);
                double t73572 = a1f*c*t73530;
                double t73573 = t73572+1.0;
                double t73574 = c0f*t73571*t73573*2.0;
                double t73575 = c0p*t73545*t73547*2.0;
                double t73576 = tau_b[index]-1.0/1.0E20;
                double t73577 = ( (t73576 > 0.0) ?  1.0 : 0.0 ) ;
                double t73578 = 1.0/tau_b[index];
                double t73579 = gamma_bb[index]*gcaa*t73553;
                double t73580 = t73579+1.0;
                double t73581 = 1.0/t73580;
                double t73582 = gamma_bb[index]*gcaa*t73553*4.0;
                double t73583 = gamma_bb[index]*gcaa*t73554*t73548*t73549*4.0;
                double t73584 = t73555*t73548*t73549*6.0;
                double t73585 = t73550*t73551*t73552;
                double t73586 = t73582+t73583+t73584+t73585+1.0;
                double t73587 = 1.0/t73586;
                double t73588 = gamma_bb[index]*gcaa*t73553*2.0;
                double t73589 = t73555*t73548*t73549;
                double t73590 = t73588+t73589+1.0;
                double t73591 = 1.0/t73590;
                double t73592 = gamma_bb[index]*gcaa*t73553*3.0;
                double t73593 = gamma_bb[index]*gcaa*t73554*t73548*t73549;
                double t73594 = t73555*t73548*t73549*3.0;
                double t73595 = t73592+t73593+t73594+1.0;
                double t73596 = 1.0/t73595;
                double t73597 = 1.0/rho_b[index];
                double t73598 = 1.0/(k*k);
                double t73599 = rho_b[index]*2.0;
                double t73600 = 1.0/pow(t73599,2.0/3.0);
                double t73601 = pow(rho_b[index],5.0/3.0);
                double t73602 = C_k*t73601*t73578;
                double t73603 = t73602-1.0;
                double t73604 = t73603*t73603;
                double t73605 = t73604*t73604;
                double t73606 = t73605*t73605;
                double t73607 = t73602+1.0;
                v_gamma_bb_[index] = -rho_b[index]*(t73575+t73561*t73558*(t73574-t73575))*(t73577*(t73578*(tau_b[index]* \
                   2.0-gamma_bb[index]*t73597*(1.0/4.0))*(1.0/2.0)-1.0)+1.0)*(ccaa1*gcaa*t73553*t73581+ccaa2*gamma_bb[index]* \
                   t73555*t73591*t73549*2.0-ccaa1*gamma_bb[index]*1.0/(t73580*t73580)*t73555*t73549-ccaa2*1.0/(t73590* \
                   t73590)*t73555*t73548*t73549*(gcaa*t73553*2.0+gamma_bb[index]*t73555*t73549*2.0)-ccaa4*t73550*t73551* \
                   t73552*1.0/(t73586*t73586)*(gcaa*t73553*4.0+gamma_bb[index]*t73555*t73549*1.2E1+gamma_bb[index]*t73551* \
                   t73552*t73548*4.0+gcaa*t73554*t73548*t73549*1.2E1)+ccaa4*gamma_bb[index]*t73551*t73552*t73548*t73587* \
                   4.0+ccaa3*gcaa*t73554*t73548*t73549*t73596*3.0-ccaa3*gamma_bb[index]*gcaa*t73554*t73548*t73549*1.0/ \
                   (t73595*t73595)*(gcaa*t73553*3.0+gamma_bb[index]*t73555*t73549*6.0+gcaa*t73554*t73548*t73549*3.0)) \
                   +t73577*t73578*(t73575+t73561*t73558*(t73574-c0p*t73545*t73547*2.0))*(ccaa0+ccaa1*gamma_bb[index]* \
                   gcaa*t73553*t73581+ccaa4*t73550*t73551*t73552*t73587+ccaa2*t73555*t73591*t73548*t73549+ccaa3*gamma_bb[index]* \
                   gcaa*t73554*t73548*t73549*t73596)*(1.0/8.0)-mu_*t73600*t73597*t73598*1.0/pow((gamma_bb[index]*mu_* \
                   1.0/(rho_b[index]*rho_b[index])*t73600*t73598*(1.0/4.0))/kp+1.0,2.0)*(X-1.0)*((a_1*t73603)/t73607+ \
                   a_2*t73604*1.0/(t73607*t73607)+a_4*t73605*1.0/(t73607*t73607*t73607*t73607)+a_8*t73606*1.0/(t73607* \
                   t73607*t73607*t73607*t73607*t73607*t73607*t73607)+a_10*t73604*t73606*1.0/pow(t73607,1.0E1)+a_3*t73603* \
                   t73604*1.0/(t73607*t73607*t73607)+a_5*t73603*t73605*1.0/(t73607*t73607*t73607*t73607*t73607)+a_6*t73604* \
                   t73605*1.0/(t73607*t73607*t73607*t73607*t73607*t73607)+a_9*t73603*t73606*1.0/(t73607*t73607*t73607* \
                   t73607*t73607*t73607*t73607*t73607*t73607)+a_11*t73603*t73604*t73606*1.0/pow(t73607,1.1E1)+a_7*t73603* \
                   t73604*t73605*1.0/(t73607*t73607*t73607*t73607*t73607*t73607*t73607)+1.0)*(1.0/4.0);
            } else {
                v_gamma_bb_[index] = 0.0;
            } 
        }
        if (is_meta_) {

            //V_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t69951 = pow(rho_a[index],5.0/3.0);
                double t69952 = 1.0/(tau_a[index]*tau_a[index]);
                double t69953 = 1.0/tau_a[index];
                double t69954 = C_k*t69951*t69953;
                double t69955 = t69954+1.0;
                double t69956 = t69954-1.0;
                double t69957 = 1.0/(t69955*t69955);
                double t69958 = t69956*t69956;
                double t69959 = t69958*t69958;
                double t69960 = t69959*t69959;
                double t69961 = 1.0/pow(t69955,1.1E1);
                double t69962 = 1.0/(t69955*t69955*t69955);
                double t69963 = 1.0/(t69955*t69955*t69955*t69955);
                double t69964 = 1.0/(t69955*t69955*t69955*t69955*t69955);
                double t69965 = 1.0/(t69955*t69955*t69955*t69955*t69955*t69955);
                double t69966 = 1.0/(t69955*t69955*t69955*t69955*t69955*t69955*t69955);
                double t69967 = 1.0/(t69955*t69955*t69955*t69955*t69955*t69955*t69955*t69955);
                double t69968 = 1.0/(t69955*t69955*t69955*t69955*t69955*t69955*t69955*t69955*t69955);
                double t69969 = 1.0/pow(t69955,1.0E1);
                double t69970 = 1.0/pow(rho_a[index],1.0/3.0);
                double t69971 = c*t69970;
                double t69972 = sqrt(t69971);
                double t69973 = pow(t69971,3.0/2.0);
                double t69974 = c*c;
                double t69975 = 1.0/pow(rho_a[index],2.0/3.0);
                double t69976 = 1.0/c0p;
                double t69977 = b1p*t69972;
                double t69978 = b3p*t69973;
                double t69979 = b4p*t69974*t69975;
                double t69980 = b2p*c*t69970;
                double t69981 = t69980+t69977+t69978+t69979;
                double t69982 = 1.0/t69981;
                double t69983 = t69982*t69976*(1.0/2.0);
                double t69984 = t69983+1.0;
                double t69985 = log(t69984);
                double t69986 = a1p*c*t69970;
                double t69987 = t69986+1.0;
                double t69988 = tau_a[index]-1.0/1.0E20;
                double t69989 = tau_a[index]*2.0;
                double t69990 = 1.0/rho_a[index];
                double t69991 = t69989-gamma_aa[index]*t69990*(1.0/4.0);
                double t69992 = gamma_aa[index]*gamma_aa[index];
                double t69993 = gcaa*gcaa;
                double t69994 = t69992*t69992;
                double t69995 = t69993*t69993;
                double t69996 = 1.0/pow(rho_a[index],3.2E1/3.0);
                double t69997 = 1.0/pow(rho_a[index],8.0/3.0);
                double t69998 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t69999 = 1.0/pow(rho_a[index],1.6E1/3.0);
                v_tau_a_[index] = -rho_a[index]*(((pow(2.0,1.0/3.0)*2.0-2.0)*(c0f*log((1.0/2.0)/(c0f*(b1f*t69972+ \
                   b3f*t69973+b2f*c*t69970+b4f*t69974*t69975))+1.0)*(a1f*c*t69970+1.0)*2.0-c0p*t69985*t69987*2.0))/(two_13* \
                   2.0-2.0)+c0p*t69985*t69987*2.0)*( ( (t69988 > 0.0) ? 1.0*(t69953-t69952*t69991*(1.0/2.0)) : 0.0 )  \
                   + 0.0 )*(ccaa0+(ccaa2*t69992*t69993*t69999)/(gamma_aa[index]*gcaa*t69997*2.0+t69992*t69993*t69999+ \
                   1.0)+(ccaa1*gamma_aa[index]*gcaa*t69997)/(gamma_aa[index]*gcaa*t69997+1.0)+(ccaa4*t69994*t69995*t69996) \
                   /(gamma_aa[index]*gcaa*t69997*4.0+t69992*t69993*t69999*6.0+t69994*t69995*t69996+gamma_aa[index]*gcaa* \
                   t69992*t69993*t69998*4.0+1.0)+(ccaa3*gamma_aa[index]*gcaa*t69992*t69993*t69998)/(gamma_aa[index]*gcaa* \
                   t69997*3.0+t69992*t69993*t69999*3.0+gamma_aa[index]*gcaa*t69992*t69993*t69998+1.0))+rho_a[index]*(X- \
                   1.0)*(kp-kp/((gamma_aa[index]*1.0/(k*k)*mu_*1.0/(rho_a[index]*rho_a[index])*1.0/pow(rho_a[index]*2.0,2.0/ \
                   3.0)*(1.0/4.0))/kp+1.0)+1.0)*((C_k*a_1*t69951*t69952)/t69955-C_k*a_1*t69951*t69952*t69956*t69957-C_k* \
                   a_2*t69951*t69952*t69962*t69958*2.0+C_k*a_2*t69951*t69952*t69956*t69957*2.0+C_k*a_3*t69951*t69952* \
                   t69962*t69958*3.0-C_k*a_4*t69951*t69952*t69964*t69959*4.0+C_k*a_5*t69951*t69952*t69964*t69959*5.0- \
                   C_k*a_8*t69951*t69960*t69952*t69968*8.0+C_k*a_9*t69951*t69960*t69952*t69968*9.0-C_k*a_10*t69951*t69960* \
                   t69952*t69961*t69958*1.0E1+C_k*a_11*t69951*t69960*t69952*t69961*t69958*1.1E1+C_k*a_10*t69951*t69960* \
                   t69952*t69956*t69969*1.0E1-C_k*a_3*t69951*t69952*t69963*t69956*t69958*3.0+C_k*a_4*t69951*t69952*t69963* \
                   t69956*t69958*4.0-C_k*a_5*t69951*t69952*t69956*t69965*t69959*5.0+C_k*a_6*t69951*t69952*t69956*t69965* \
                   t69959*6.0-C_k*a_6*t69951*t69952*t69966*t69958*t69959*6.0+C_k*a_7*t69951*t69952*t69966*t69958*t69959* \
                   7.0-C_k*a_9*t69951*t69960*t69952*t69956*t69969*9.0-C_k*a_11*t69951*t69960*t69952*1.0/pow(t69955,1.2E1) \
                   *t69956*t69958*1.1E1-C_k*a_7*t69951*t69952*t69956*t69958*t69967*t69959*7.0+C_k*a_8*t69951*t69952*t69956* \
                   t69958*t69967*t69959*8.0);
            } else if (rho_a[index] > cutoff_) {
                double t74736 = pow(rho_a[index],5.0/3.0);
                double t74737 = 1.0/(tau_a[index]*tau_a[index]);
                double t74738 = 1.0/tau_a[index];
                double t74739 = C_k*t74736*t74738;
                double t74740 = t74739+1.0;
                double t74741 = t74739-1.0;
                double t74742 = 1.0/(t74740*t74740);
                double t74743 = t74741*t74741;
                double t74744 = t74743*t74743;
                double t74745 = t74744*t74744;
                double t74746 = 1.0/pow(t74740,1.1E1);
                double t74747 = 1.0/(t74740*t74740*t74740);
                double t74748 = 1.0/(t74740*t74740*t74740*t74740);
                double t74749 = 1.0/(t74740*t74740*t74740*t74740*t74740);
                double t74750 = 1.0/(t74740*t74740*t74740*t74740*t74740*t74740);
                double t74751 = 1.0/(t74740*t74740*t74740*t74740*t74740*t74740*t74740);
                double t74752 = 1.0/(t74740*t74740*t74740*t74740*t74740*t74740*t74740*t74740);
                double t74753 = 1.0/(t74740*t74740*t74740*t74740*t74740*t74740*t74740*t74740*t74740);
                double t74754 = 1.0/pow(t74740,1.0E1);
                double t74755 = 1.0/pow(rho_a[index],1.0/3.0);
                double t74756 = c*t74755;
                double t74757 = sqrt(t74756);
                double t74758 = pow(t74756,3.0/2.0);
                double t74759 = c*c;
                double t74760 = 1.0/pow(rho_a[index],2.0/3.0);
                double t74761 = 1.0/c0p;
                double t74762 = b1p*t74757;
                double t74763 = b3p*t74758;
                double t74764 = b4p*t74760*t74759;
                double t74765 = b2p*c*t74755;
                double t74766 = t74762+t74763+t74764+t74765;
                double t74767 = 1.0/t74766;
                double t74768 = t74761*t74767*(1.0/2.0);
                double t74769 = t74768+1.0;
                double t74770 = log(t74769);
                double t74771 = a1p*c*t74755;
                double t74772 = t74771+1.0;
                double t74773 = tau_a[index]-1.0/1.0E20;
                double t74774 = tau_a[index]*2.0;
                double t74775 = 1.0/rho_a[index];
                double t74776 = t74774-gamma_aa[index]*t74775*(1.0/4.0);
                double t74777 = gamma_aa[index]*gamma_aa[index];
                double t74778 = gcaa*gcaa;
                double t74779 = t74777*t74777;
                double t74780 = t74778*t74778;
                double t74781 = 1.0/pow(rho_a[index],3.2E1/3.0);
                double t74782 = 1.0/pow(rho_a[index],8.0/3.0);
                double t74783 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t74784 = 1.0/pow(rho_a[index],1.6E1/3.0);
                v_tau_a_[index] = -rho_a[index]*(((pow(2.0,1.0/3.0)*2.0-2.0)*(c0f*log((1.0/2.0)/(c0f*(b1f*t74757+ \
                   b3f*t74758+b2f*c*t74755+b4f*t74760*t74759))+1.0)*(a1f*c*t74755+1.0)*2.0-c0p*t74770*t74772*2.0))/(two_13* \
                   2.0-2.0)+c0p*t74770*t74772*2.0)*( ( (t74773 > 0.0) ? 1.0*(t74738-t74737*t74776*(1.0/2.0)) : 0.0 )  \
                   + 0.0 )*(ccaa0+(ccaa2*t74784*t74777*t74778)/(gamma_aa[index]*gcaa*t74782*2.0+t74784*t74777*t74778+ \
                   1.0)+(ccaa1*gamma_aa[index]*gcaa*t74782)/(gamma_aa[index]*gcaa*t74782+1.0)+(ccaa4*t74780*t74781*t74779) \
                   /(gamma_aa[index]*gcaa*t74782*4.0+t74780*t74781*t74779+t74784*t74777*t74778*6.0+gamma_aa[index]*gcaa* \
                   t74783*t74777*t74778*4.0+1.0)+(ccaa3*gamma_aa[index]*gcaa*t74783*t74777*t74778)/(gamma_aa[index]*gcaa* \
                   t74782*3.0+t74784*t74777*t74778*3.0+gamma_aa[index]*gcaa*t74783*t74777*t74778+1.0))+rho_a[index]*(X- \
                   1.0)*(kp-kp/((gamma_aa[index]*1.0/(k*k)*mu_*1.0/(rho_a[index]*rho_a[index])*1.0/pow(rho_a[index]*2.0,2.0/ \
                   3.0)*(1.0/4.0))/kp+1.0)+1.0)*((C_k*a_1*t74736*t74737)/t74740-C_k*a_1*t74741*t74742*t74736*t74737+C_k* \
                   a_2*t74741*t74742*t74736*t74737*2.0-C_k*a_2*t74743*t74736*t74737*t74747*2.0+C_k*a_3*t74743*t74736* \
                   t74737*t74747*3.0-C_k*a_4*t74744*t74736*t74737*t74749*4.0+C_k*a_5*t74744*t74736*t74737*t74749*5.0- \
                   C_k*a_8*t74753*t74736*t74745*t74737*8.0+C_k*a_9*t74753*t74736*t74745*t74737*9.0+C_k*a_10*t74741*t74736* \
                   t74745*t74754*t74737*1.0E1-C_k*a_10*t74743*t74736*t74745*t74737*t74746*1.0E1+C_k*a_11*t74743*t74736* \
                   t74745*t74737*t74746*1.1E1-C_k*a_3*t74741*t74743*t74736*t74737*t74748*3.0+C_k*a_4*t74741*t74743*t74736* \
                   t74737*t74748*4.0-C_k*a_5*t74741*t74750*t74744*t74736*t74737*5.0+C_k*a_6*t74741*t74750*t74744*t74736* \
                   t74737*6.0-C_k*a_6*t74751*t74743*t74744*t74736*t74737*6.0+C_k*a_7*t74751*t74743*t74744*t74736*t74737* \
                   7.0-C_k*a_9*t74741*t74736*t74745*t74754*t74737*9.0-C_k*a_11*1.0/pow(t74740,1.2E1)*t74741*t74743*t74736* \
                   t74745*t74737*1.1E1-C_k*a_7*t74741*t74743*t74752*t74744*t74736*t74737*7.0+C_k*a_8*t74741*t74743*t74752* \
                   t74744*t74736*t74737*8.0);
            } else if (rho_b[index] > cutoff_) {
                v_tau_a_[index] = 0.0;
            } else {
                v_tau_a_[index] = 0.0;
            } 

            //V_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t70001 = pow(rho_b[index],5.0/3.0);
                double t70002 = 1.0/(tau_b[index]*tau_b[index]);
                double t70003 = 1.0/tau_b[index];
                double t70004 = C_k*t70001*t70003;
                double t70005 = t70004+1.0;
                double t70006 = t70004-1.0;
                double t70007 = 1.0/(t70005*t70005);
                double t70008 = t70006*t70006;
                double t70009 = t70008*t70008;
                double t70010 = t70009*t70009;
                double t70011 = 1.0/pow(t70005,1.1E1);
                double t70012 = 1.0/(t70005*t70005*t70005);
                double t70013 = 1.0/(t70005*t70005*t70005*t70005);
                double t70014 = 1.0/(t70005*t70005*t70005*t70005*t70005);
                double t70015 = 1.0/(t70005*t70005*t70005*t70005*t70005*t70005);
                double t70016 = 1.0/(t70005*t70005*t70005*t70005*t70005*t70005*t70005);
                double t70017 = 1.0/(t70005*t70005*t70005*t70005*t70005*t70005*t70005*t70005);
                double t70018 = 1.0/(t70005*t70005*t70005*t70005*t70005*t70005*t70005*t70005*t70005);
                double t70019 = 1.0/pow(t70005,1.0E1);
                double t70020 = 1.0/pow(rho_b[index],1.0/3.0);
                double t70021 = c*t70020;
                double t70022 = sqrt(t70021);
                double t70023 = pow(t70021,3.0/2.0);
                double t70024 = c*c;
                double t70025 = 1.0/pow(rho_b[index],2.0/3.0);
                double t70026 = 1.0/c0p;
                double t70027 = b1p*t70022;
                double t70028 = b3p*t70023;
                double t70029 = b4p*t70024*t70025;
                double t70030 = b2p*c*t70020;
                double t70031 = t70030+t70027+t70028+t70029;
                double t70032 = 1.0/t70031;
                double t70033 = t70032*t70026*(1.0/2.0);
                double t70034 = t70033+1.0;
                double t70035 = log(t70034);
                double t70036 = a1p*c*t70020;
                double t70037 = t70036+1.0;
                double t70038 = tau_b[index]-1.0/1.0E20;
                double t70039 = tau_b[index]*2.0;
                double t70040 = 1.0/rho_b[index];
                double t70041 = t70039-gamma_bb[index]*t70040*(1.0/4.0);
                double t70042 = gamma_bb[index]*gamma_bb[index];
                double t70043 = gcaa*gcaa;
                double t70044 = t70042*t70042;
                double t70045 = t70043*t70043;
                double t70046 = 1.0/pow(rho_b[index],3.2E1/3.0);
                double t70047 = 1.0/pow(rho_b[index],8.0/3.0);
                double t70048 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]);
                double t70049 = 1.0/pow(rho_b[index],1.6E1/3.0);
                v_tau_b_[index] = -rho_b[index]*(((pow(2.0,1.0/3.0)*2.0-2.0)*(c0f*log((1.0/2.0)/(c0f*(b1f*t70022+ \
                   b3f*t70023+b2f*c*t70020+b4f*t70024*t70025))+1.0)*(a1f*c*t70020+1.0)*2.0-c0p*t70035*t70037*2.0))/(two_13* \
                   2.0-2.0)+c0p*t70035*t70037*2.0)*( ( (t70038 > 0.0) ? 1.0*(t70003-t70002*t70041*(1.0/2.0)) : 0.0 )  \
                   + 0.0 )*(ccaa0+(ccaa2*t70042*t70043*t70049)/(gamma_bb[index]*gcaa*t70047*2.0+t70042*t70043*t70049+ \
                   1.0)+(ccaa1*gamma_bb[index]*gcaa*t70047)/(gamma_bb[index]*gcaa*t70047+1.0)+(ccaa4*t70044*t70045*t70046) \
                   /(gamma_bb[index]*gcaa*t70047*4.0+t70042*t70043*t70049*6.0+t70044*t70045*t70046+gamma_bb[index]*gcaa* \
                   t70042*t70043*t70048*4.0+1.0)+(ccaa3*gamma_bb[index]*gcaa*t70042*t70043*t70048)/(gamma_bb[index]*gcaa* \
                   t70047*3.0+t70042*t70043*t70049*3.0+gamma_bb[index]*gcaa*t70042*t70043*t70048+1.0))+rho_b[index]*(X- \
                   1.0)*(kp-kp/((gamma_bb[index]*1.0/(k*k)*mu_*1.0/(rho_b[index]*rho_b[index])*1.0/pow(rho_b[index]*2.0,2.0/ \
                   3.0)*(1.0/4.0))/kp+1.0)+1.0)*((C_k*a_1*t70001*t70002)/t70005-C_k*a_1*t70001*t70002*t70006*t70007-C_k* \
                   a_2*t70001*t70002*t70012*t70008*2.0+C_k*a_2*t70001*t70002*t70006*t70007*2.0+C_k*a_3*t70001*t70002* \
                   t70012*t70008*3.0-C_k*a_4*t70001*t70002*t70014*t70009*4.0+C_k*a_5*t70001*t70002*t70014*t70009*5.0- \
                   C_k*a_8*t70001*t70010*t70002*t70018*8.0+C_k*a_9*t70001*t70010*t70002*t70018*9.0-C_k*a_10*t70001*t70010* \
                   t70002*t70011*t70008*1.0E1+C_k*a_11*t70001*t70010*t70002*t70011*t70008*1.1E1+C_k*a_10*t70001*t70010* \
                   t70002*t70006*t70019*1.0E1-C_k*a_3*t70001*t70002*t70013*t70006*t70008*3.0+C_k*a_4*t70001*t70002*t70013* \
                   t70006*t70008*4.0-C_k*a_5*t70001*t70002*t70006*t70015*t70009*5.0+C_k*a_6*t70001*t70002*t70006*t70015* \
                   t70009*6.0-C_k*a_6*t70001*t70002*t70016*t70008*t70009*6.0+C_k*a_7*t70001*t70002*t70016*t70008*t70009* \
                   7.0-C_k*a_9*t70001*t70010*t70002*t70006*t70019*9.0-C_k*a_11*t70001*t70010*t70002*1.0/pow(t70005,1.2E1) \
                   *t70006*t70008*1.1E1-C_k*a_7*t70001*t70002*t70006*t70008*t70017*t70009*7.0+C_k*a_8*t70001*t70002*t70006* \
                   t70008*t70017*t70009*8.0);
            } else if (rho_a[index] > cutoff_) {
                v_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                double t73610 = pow(rho_b[index],5.0/3.0);
                double t73611 = 1.0/(tau_b[index]*tau_b[index]);
                double t73612 = 1.0/tau_b[index];
                double t73613 = C_k*t73610*t73612;
                double t73614 = t73613+1.0;
                double t73615 = t73613-1.0;
                double t73616 = 1.0/(t73614*t73614);
                double t73617 = t73615*t73615;
                double t73618 = t73617*t73617;
                double t73619 = t73618*t73618;
                double t73620 = 1.0/pow(t73614,1.1E1);
                double t73621 = 1.0/(t73614*t73614*t73614);
                double t73622 = 1.0/(t73614*t73614*t73614*t73614);
                double t73623 = 1.0/(t73614*t73614*t73614*t73614*t73614);
                double t73624 = 1.0/(t73614*t73614*t73614*t73614*t73614*t73614);
                double t73625 = 1.0/(t73614*t73614*t73614*t73614*t73614*t73614*t73614);
                double t73626 = 1.0/(t73614*t73614*t73614*t73614*t73614*t73614*t73614*t73614);
                double t73627 = 1.0/(t73614*t73614*t73614*t73614*t73614*t73614*t73614*t73614*t73614);
                double t73628 = 1.0/pow(t73614,1.0E1);
                double t73629 = 1.0/pow(rho_b[index],1.0/3.0);
                double t73630 = c*t73629;
                double t73631 = sqrt(t73630);
                double t73632 = pow(t73630,3.0/2.0);
                double t73633 = c*c;
                double t73634 = 1.0/pow(rho_b[index],2.0/3.0);
                double t73635 = 1.0/c0p;
                double t73636 = b1p*t73631;
                double t73637 = b3p*t73632;
                double t73638 = b4p*t73633*t73634;
                double t73639 = b2p*c*t73629;
                double t73640 = t73636+t73637+t73638+t73639;
                double t73641 = 1.0/t73640;
                double t73642 = t73641*t73635*(1.0/2.0);
                double t73643 = t73642+1.0;
                double t73644 = log(t73643);
                double t73645 = a1p*c*t73629;
                double t73646 = t73645+1.0;
                double t73647 = tau_b[index]-1.0/1.0E20;
                double t73648 = tau_b[index]*2.0;
                double t73649 = 1.0/rho_b[index];
                double t73650 = t73648-gamma_bb[index]*t73649*(1.0/4.0);
                double t73651 = gamma_bb[index]*gamma_bb[index];
                double t73652 = gcaa*gcaa;
                double t73653 = t73651*t73651;
                double t73654 = t73652*t73652;
                double t73655 = 1.0/pow(rho_b[index],3.2E1/3.0);
                double t73656 = 1.0/pow(rho_b[index],8.0/3.0);
                double t73657 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]);
                double t73658 = 1.0/pow(rho_b[index],1.6E1/3.0);
                v_tau_b_[index] = -rho_b[index]*(((pow(2.0,1.0/3.0)*2.0-2.0)*(c0f*log((1.0/2.0)/(c0f*(b1f*t73631+ \
                   b3f*t73632+b2f*c*t73629+b4f*t73633*t73634))+1.0)*(a1f*c*t73629+1.0)*2.0-c0p*t73644*t73646*2.0))/(two_13* \
                   2.0-2.0)+c0p*t73644*t73646*2.0)*( ( (t73647 > 0.0) ? 1.0*(t73612-t73611*t73650*(1.0/2.0)) : 0.0 )  \
                   + 0.0 )*(ccaa0+(ccaa2*t73651*t73652*t73658)/(gamma_bb[index]*gcaa*t73656*2.0+t73651*t73652*t73658+ \
                   1.0)+(ccaa1*gamma_bb[index]*gcaa*t73656)/(gamma_bb[index]*gcaa*t73656+1.0)+(ccaa4*t73653*t73654*t73655) \
                   /(gamma_bb[index]*gcaa*t73656*4.0+t73651*t73652*t73658*6.0+t73653*t73654*t73655+gamma_bb[index]*gcaa* \
                   t73651*t73652*t73657*4.0+1.0)+(ccaa3*gamma_bb[index]*gcaa*t73651*t73652*t73657)/(gamma_bb[index]*gcaa* \
                   t73656*3.0+t73651*t73652*t73658*3.0+gamma_bb[index]*gcaa*t73651*t73652*t73657+1.0))+rho_b[index]*(X- \
                   1.0)*(kp-kp/((gamma_bb[index]*1.0/(k*k)*mu_*1.0/(rho_b[index]*rho_b[index])*1.0/pow(rho_b[index]*2.0,2.0/ \
                   3.0)*(1.0/4.0))/kp+1.0)+1.0)*((C_k*a_1*t73610*t73611)/t73614-C_k*a_1*t73610*t73611*t73615*t73616-C_k* \
                   a_2*t73610*t73611*t73621*t73617*2.0+C_k*a_2*t73610*t73611*t73615*t73616*2.0+C_k*a_3*t73610*t73611* \
                   t73621*t73617*3.0-C_k*a_4*t73610*t73611*t73623*t73618*4.0+C_k*a_5*t73610*t73611*t73623*t73618*5.0- \
                   C_k*a_8*t73610*t73611*t73627*t73619*8.0+C_k*a_9*t73610*t73611*t73627*t73619*9.0-C_k*a_10*t73610*t73611* \
                   t73620*t73617*t73619*1.0E1+C_k*a_11*t73610*t73611*t73620*t73617*t73619*1.1E1+C_k*a_10*t73610*t73611* \
                   t73615*t73619*t73628*1.0E1-C_k*a_3*t73610*t73611*t73622*t73615*t73617*3.0+C_k*a_4*t73610*t73611*t73622* \
                   t73615*t73617*4.0-C_k*a_5*t73610*t73611*t73615*t73624*t73618*5.0+C_k*a_6*t73610*t73611*t73615*t73624* \
                   t73618*6.0-C_k*a_6*t73610*t73611*t73625*t73617*t73618*6.0+C_k*a_7*t73610*t73611*t73625*t73617*t73618* \
                   7.0-C_k*a_9*t73610*t73611*t73615*t73619*t73628*9.0-C_k*a_11*t73610*t73611*1.0/pow(t73614,1.2E1)*t73615* \
                   t73617*t73619*1.1E1-C_k*a_7*t73610*t73611*t73615*t73617*t73626*t73618*7.0+C_k*a_8*t73610*t73611*t73615* \
                   t73617*t73626*t73618*8.0);
            } else {
                v_tau_b_[index] = 0.0;
            } 
        }
    }
    //Second Partials
    for (int index = 0; index < ntrue && deriv_ >= 2; index++) {

        //V_rho_a_rho_a
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t70051 = rho_a[index]+rho_b[index];
            double t70052 = 1.0/pow(t70051,1.0/3.0);
            double t70053 = c*t70052;
            double t70054 = sqrt(t70053);
            double t70055 = b1p*t70054;
            double t70056 = pow(t70053,3.0/2.0);
            double t70057 = b3p*t70056;
            double t70058 = c*c;
            double t70059 = 1.0/pow(t70051,2.0/3.0);
            double t70060 = b4p*t70058*t70059;
            double t70061 = b2p*c*t70052;
            double t70062 = t70060+t70061+t70055+t70057;
            double t70063 = 1.0/pow(t70051,4.0/3.0);
            double t70064 = 1.0/c0p;
            double t70065 = 1.0/t70062;
            double t70066 = t70064*t70065*(1.0/2.0);
            double t70067 = t70066+1.0;
            double t70068 = a1p*c*t70052;
            double t70069 = t70068+1.0;
            double t70070 = rho_a[index]-rho_b[index];
            double t70071 = t70070*t70070;
            double t70072 = 1.0/t70051;
            double t70073 = t70070*t70072;
            double t70074 = two_13*2.0;
            double t70075 = t70074-2.0;
            double t70076 = 1.0/t70075;
            double t70077 = 1.0/c0f;
            double t70078 = b1f*t70054;
            double t70079 = b3f*t70056;
            double t70080 = b4f*t70058*t70059;
            double t70081 = b2f*c*t70052;
            double t70082 = t70080+t70081+t70078+t70079;
            double t70083 = 1.0/t70082;
            double t70084 = t70083*t70077*(1.0/2.0);
            double t70085 = t70084+1.0;
            double t70086 = log(t70085);
            double t70087 = a1f*c*t70052;
            double t70088 = t70087+1.0;
            double t70089 = log(t70067);
            double t70099 = c0f*t70086*t70088*2.0;
            double t70100 = c0p*t70069*t70089*2.0;
            double t70090 = -t70100+t70099;
            double t70091 = t70073+1.0;
            double t70092 = pow(t70091,4.0/3.0);
            double t70093 = -t70073+1.0;
            double t70094 = pow(t70093,4.0/3.0);
            double t70095 = t70092+t70094-2.0;
            double t70096 = 1.0/(t70051*t70051);
            double t70127 = t70070*t70096;
            double t70097 = t70072-t70127;
            double t70098 = 1.0/(t70051*t70051*t70051*t70051);
            double t70101 = t70071*t70071;
            double t70102 = 1.0/pow(t70051,5.0/3.0);
            double t70103 = 1.0/sqrt(t70053);
            double t70104 = 1.0/t70067;
            double t70105 = 1.0/(t70062*t70062);
            double t70106 = b4p*t70102*t70058*(2.0/3.0);
            double t70107 = b2p*c*t70063*(1.0/3.0);
            double t70108 = b1p*c*t70103*t70063*(1.0/6.0);
            double t70109 = b3p*c*t70054*t70063*(1.0/2.0);
            double t70110 = t70106+t70107+t70108+t70109;
            double t70111 = t70110*t70104*t70105*t70069;
            double t70112 = 1.0/(t70051*t70051*t70051*t70051*t70051);
            double t70113 = 1.0/d2fz0;
            double t70114 = 1.0/Aa;
            double t70115 = b1a*t70054;
            double t70116 = b3a*t70056;
            double t70117 = b4a*t70058*t70059;
            double t70118 = b2a*c*t70052;
            double t70119 = t70115+t70116+t70117+t70118;
            double t70120 = 1.0/t70119;
            double t70121 = t70120*t70114*(1.0/2.0);
            double t70122 = t70121+1.0;
            double t70123 = log(t70122);
            double t70124 = a1a*c*t70052;
            double t70125 = t70124+1.0;
            double t70126 = pow(t70091,1.0/3.0);
            double t70128 = t70126*t70097*(4.0/3.0);
            double t70129 = pow(t70093,1.0/3.0);
            double t70204 = t70129*t70097*(4.0/3.0);
            double t70130 = -t70204+t70128;
            double t70131 = t70101*t70098;
            double t70132 = t70131-1.0;
            double t70133 = 1.0/pow(rho_a[index],1.0/3.0);
            double t70134 = c*t70133;
            double t70135 = sqrt(t70134);
            double t70136 = b1f*t70135;
            double t70137 = pow(t70134,3.0/2.0);
            double t70138 = b3f*t70137;
            double t70139 = 1.0/pow(rho_a[index],2.0/3.0);
            double t70140 = b4f*t70058*t70139;
            double t70141 = b2f*c*t70133;
            double t70142 = t70140+t70141+t70136+t70138;
            double t70143 = 1.0/pow(rho_a[index],4.0/3.0);
            double t70144 = b1p*t70135;
            double t70145 = b3p*t70137;
            double t70146 = b4p*t70058*t70139;
            double t70147 = b2p*c*t70133;
            double t70148 = t70144+t70145+t70146+t70147;
            double t70149 = 1.0/pow(rho_a[index],5.0/3.0);
            double t70150 = 1.0/sqrt(t70134);
            double t70151 = 1.0/t70142;
            double t70152 = t70151*t70077*(1.0/2.0);
            double t70153 = t70152+1.0;
            double t70154 = 1.0/t70148;
            double t70155 = t70064*t70154*(1.0/2.0);
            double t70156 = t70155+1.0;
            double t70157 = a1p*c*t70133;
            double t70158 = t70157+1.0;
            double t70159 = 1.0/t70156;
            double t70160 = 1.0/(t70148*t70148);
            double t70161 = b4p*t70058*t70149*(2.0/3.0);
            double t70162 = b2p*c*t70143*(1.0/3.0);
            double t70163 = b1p*c*t70150*t70143*(1.0/6.0);
            double t70164 = b3p*c*t70143*t70135*(1.0/2.0);
            double t70165 = t70161+t70162+t70163+t70164;
            double t70166 = t70160*t70165*t70158*t70159;
            double t70167 = log(t70156);
            double t70168 = pow(2.0,1.0/3.0);
            double t70169 = t70168*2.0;
            double t70170 = t70169-2.0;
            double t70171 = log(t70153);
            double t70172 = a1f*c*t70133;
            double t70173 = t70172+1.0;
            double t70174 = gcab*gcab;
            double t70178 = 1.0/pow(rho_a[index],8.0/3.0);
            double t70179 = gamma_aa[index]*t70178*(1.0/2.0);
            double t70180 = 1.0/pow(rho_b[index],8.0/3.0);
            double t70181 = gamma_bb[index]*t70180*(1.0/2.0);
            double t70175 = t70181+t70179;
            double t70176 = t70175*t70175;
            double t70177 = 1.0/pow(rho_a[index],1.1E1/3.0);
            double t70182 = t70174*t70174;
            double t70183 = t70176*t70176;
            double t70184 = t70174*t70176*6.0;
            double t70185 = gcab*t70174*t70175*t70176*4.0;
            double t70186 = t70182*t70183;
            double t70187 = gcab*t70175*4.0;
            double t70188 = t70184+t70185+t70186+t70187+1.0;
            double t70189 = gcab*t70175;
            double t70190 = t70189+1.0;
            double t70191 = t70174*t70176;
            double t70192 = gcab*t70175*2.0;
            double t70193 = t70191+t70192+1.0;
            double t70194 = t70174*t70176*3.0;
            double t70195 = gcab*t70174*t70175*t70176;
            double t70196 = gcab*t70175*3.0;
            double t70197 = t70194+t70195+t70196+1.0;
            double t70198 = 1.0/t70193;
            double t70199 = 1.0/t70197;
            double t70200 = 1.0/t70190;
            double t70201 = 1.0/t70188;
            double t70202 = 1.0/pow(t70051,7.0/3.0);
            double t70203 = 1.0/pow(t70051,8.0/3.0);
            double t70205 = 1.0/t70085;
            double t70206 = 1.0/(t70082*t70082);
            double t70207 = b4f*t70102*t70058*(2.0/3.0);
            double t70208 = b2f*c*t70063*(1.0/3.0);
            double t70209 = b1f*c*t70103*t70063*(1.0/6.0);
            double t70210 = b3f*c*t70054*t70063*(1.0/2.0);
            double t70211 = t70210+t70207+t70208+t70209;
            double t70212 = a1f*c*c0f*t70063*t70086*(2.0/3.0);
            double t70214 = t70211*t70205*t70206*t70088;
            double t70215 = a1p*c*c0p*t70063*t70089*(2.0/3.0);
            double t70213 = t70111+t70212-t70214-t70215;
            double t70216 = t70110*t70110;
            double t70217 = 1.0/pow(t70053,3.0/2.0);
            double t70218 = b4p*t70203*t70058*(1.0E1/9.0);
            double t70219 = b2p*c*t70202*(4.0/9.0);
            double t70220 = b1p*c*t70103*t70202*(2.0/9.0);
            double t70221 = b3p*c*t70202*t70054*(2.0/3.0);
            double t70222 = b3p*t70103*t70203*t70058*(1.0/1.2E1);
            double t70223 = t70220+t70221+t70222+t70218+t70219-b1p*t70203*t70217*t70058*(1.0/3.6E1);
            double t70224 = 1.0/(t70062*t70062*t70062);
            double t70225 = t70104*t70224*t70216*t70069*2.0;
            double t70226 = t70211*t70211;
            double t70227 = 1.0/(t70067*t70067);
            double t70228 = 1.0/(t70062*t70062*t70062*t70062);
            double t70229 = t70096*2.0;
            double t70230 = 1.0/(t70051*t70051*t70051);
            double t70237 = t70230*t70070*2.0;
            double t70231 = -t70237+t70229;
            double t70232 = t70097*t70097;
            double t70233 = a1p*c*c0p*t70202*t70089*(8.0/9.0);
            double t70234 = 1.0/(t70051*t70051*t70051*t70051*t70051*t70051);
            double t70235 = t70101*t70112*4.0;
            double t70245 = t70070*t70071*t70098*4.0;
            double t70236 = t70235-t70245;
            double t70238 = t70231*t70129*(4.0/3.0);
            double t70239 = 1.0/pow(t70091,2.0/3.0);
            double t70240 = t70232*t70239*(4.0/9.0);
            double t70241 = 1.0/pow(t70093,2.0/3.0);
            double t70242 = t70232*t70241*(4.0/9.0);
            double t70243 = t70240+t70242+t70238-t70231*t70126*(4.0/3.0);
            double t70244 = 1.0/t70122;
            double t70246 = 1.0/(t70119*t70119);
            double t70247 = b4a*t70102*t70058*(2.0/3.0);
            double t70248 = b2a*c*t70063*(1.0/3.0);
            double t70249 = b1a*c*t70103*t70063*(1.0/6.0);
            double t70250 = b3a*c*t70054*t70063*(1.0/2.0);
            double t70251 = t70250+t70247+t70248+t70249;
            double t70252 = t70251*t70251;
            double t70253 = t70104*t70105*t70223*t70069;
            double t70254 = 1.0/t70153;
            double t70255 = b4f*t70058*t70149*(2.0/3.0);
            double t70256 = b2f*c*t70143*(1.0/3.0);
            double t70257 = b1f*c*t70150*t70143*(1.0/6.0);
            double t70258 = b3f*c*t70143*t70135*(1.0/2.0);
            double t70259 = t70255+t70256+t70257+t70258;
            double t70260 = 1.0/(t70142*t70142);
            double t70261 = 1.0/pow(rho_a[index],7.0/3.0);
            double t70262 = 1.0/pow(t70134,3.0/2.0);
            double t70263 = t70259*t70259;
            double t70264 = t70165*t70165;
            double t70265 = 1.0/(t70148*t70148*t70148);
            double t70266 = t70264*t70265*t70158*t70159*2.0;
            double t70267 = b4p*t70058*t70178*(1.0E1/9.0);
            double t70268 = b2p*c*t70261*(4.0/9.0);
            double t70269 = b3p*t70150*t70058*t70178*(1.0/1.2E1);
            double t70270 = b1p*c*t70150*t70261*(2.0/9.0);
            double t70271 = b3p*c*t70135*t70261*(2.0/3.0);
            double t70454 = b1p*t70262*t70058*t70178*(1.0/3.6E1);
            double t70272 = t70270+t70271-t70454+t70267+t70268+t70269;
            double t70273 = 1.0/(t70156*t70156);
            double t70274 = 1.0/(t70148*t70148*t70148*t70148);
            double t70275 = a1p*c*c0p*t70261*t70167*(8.0/9.0);
            double t70276 = a1f*c*c0f*t70143*t70171*(2.0/3.0);
            double t70277 = a1p*c*c0p*t70143*t70167*(2.0/3.0);
            double t70278 = t70216*t70064*t70227*t70228*t70069*(1.0/2.0);
            double t70279 = 1.0/tau_a[index];
            double t70280 = pow(rho_a[index],2.0/3.0);
            double t70281 = pow(rho_a[index],5.0/3.0);
            double t70282 = C_k*t70281*t70279;
            double t70283 = t70282+1.0;
            double t70284 = t70282-1.0;
            double t70285 = 1.0/(t70283*t70283);
            double t70286 = t70284*t70284;
            double t70287 = t70286*t70286;
            double t70288 = t70287*t70287;
            double t70289 = 1.0/pow(t70283,1.1E1);
            double t70290 = 1.0/(t70283*t70283*t70283);
            double t70291 = 1.0/(t70283*t70283*t70283*t70283);
            double t70292 = 1.0/(t70283*t70283*t70283*t70283*t70283);
            double t70293 = 1.0/(t70283*t70283*t70283*t70283*t70283*t70283);
            double t70294 = 1.0/(t70283*t70283*t70283*t70283*t70283*t70283*t70283);
            double t70295 = 1.0/(t70283*t70283*t70283*t70283*t70283*t70283*t70283*t70283);
            double t70296 = 1.0/(t70283*t70283*t70283*t70283*t70283*t70283*t70283*t70283*t70283);
            double t70297 = 1.0/pow(t70283,1.0E1);
            double t70298 = 1.0/(k*k);
            double t70299 = 1.0/kp;
            double t70300 = 1.0/(rho_a[index]*rho_a[index]);
            double t70301 = rho_a[index]*2.0;
            double t70302 = 1.0/pow(t70301,2.0/3.0);
            double t70303 = gamma_aa[index]*mu_*t70300*t70302*t70298*t70299*(1.0/4.0);
            double t70304 = t70303+1.0;
            double t70305 = 1.0/t70304;
            double t70306 = kp-kp*t70305+1.0;
            double t70307 = C_k*C_k;
            double t70308 = pow(rho_a[index],4.0/3.0);
            double t70309 = 1.0/(tau_a[index]*tau_a[index]);
            double t70310 = 1.0/t70283;
            double t70311 = 1.0/pow(t70283,1.2E1);
            double t70312 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]);
            double t70313 = gamma_aa[index]*mu_*t70302*t70312*t70298*t70299*(1.0/2.0);
            double t70314 = 1.0/pow(t70301,5.0/3.0);
            double t70315 = gamma_aa[index]*mu_*t70300*t70314*t70298*t70299*(1.0/3.0);
            double t70316 = t70313+t70315;
            double t70317 = a_1*t70310*t70284;
            double t70318 = a_10*t70286*t70288*t70297;
            double t70319 = a_11*t70284*t70286*t70288*t70289;
            double t70320 = a_2*t70285*t70286;
            double t70321 = a_3*t70290*t70284*t70286;
            double t70322 = a_4*t70291*t70287;
            double t70323 = a_5*t70292*t70284*t70287;
            double t70324 = a_6*t70293*t70286*t70287;
            double t70325 = a_7*t70284*t70294*t70286*t70287;
            double t70326 = a_8*t70295*t70288;
            double t70327 = a_9*t70284*t70296*t70288;
            double t70328 = t70320+t70321+t70322+t70323+t70324+t70325+t70317+t70326+t70318+t70327+t70319+1.0;
            double t70329 = 1.0/(t70304*t70304);
            double t70330 = C_k*a_1*t70310*t70280*t70279*(5.0/3.0);
            double t70331 = C_k*a_2*t70280*t70284*t70285*t70279*(1.0E1/3.0);
            double t70332 = C_k*a_10*t70280*t70284*t70279*t70288*t70297*(5.0E1/3.0);
            double t70333 = C_k*a_11*t70280*t70286*t70279*t70288*t70289*(5.5E1/3.0);
            double t70334 = C_k*a_3*t70280*t70290*t70286*t70279*5.0;
            double t70335 = C_k*a_4*t70280*t70291*t70284*t70286*t70279*(2.0E1/3.0);
            double t70336 = C_k*a_5*t70280*t70292*t70287*t70279*(2.5E1/3.0);
            double t70337 = C_k*a_6*t70280*t70284*t70293*t70287*t70279*1.0E1;
            double t70338 = C_k*a_7*t70280*t70294*t70286*t70287*t70279*(3.5E1/3.0);
            double t70339 = C_k*a_8*t70280*t70284*t70286*t70295*t70287*t70279*(4.0E1/3.0);
            double t70340 = C_k*a_9*t70280*t70296*t70279*t70288*1.5E1;
            double t70341 = t70330+t70331+t70340+t70332+t70333+t70334+t70335+t70336+t70337+t70338+t70339-C_k* \
               a_1*t70280*t70284*t70285*t70279*(5.0/3.0)-C_k*a_2*t70280*t70290*t70286*t70279*(1.0E1/3.0)-C_k*a_4* \
               t70280*t70292*t70287*t70279*(2.0E1/3.0)-C_k*a_8*t70280*t70296*t70279*t70288*(4.0E1/3.0)-C_k*a_10*t70280* \
               t70286*t70279*t70288*t70289*(5.0E1/3.0)-C_k*a_3*t70280*t70291*t70284*t70286*t70279*5.0-C_k*a_5*t70280* \
               t70284*t70293*t70287*t70279*(2.5E1/3.0)-C_k*a_6*t70280*t70294*t70286*t70287*t70279*1.0E1-C_k*a_9*t70280* \
               t70284*t70279*t70288*t70297*1.5E1-C_k*a_11*t70311*t70280*t70284*t70286*t70279*t70288*(5.5E1/3.0)-C_k* \
               a_7*t70280*t70284*t70286*t70295*t70287*t70279*(3.5E1/3.0);
            double t70342 = c0f*t70171*t70173*2.0;
            double t70344 = c0p*t70158*t70167*2.0;
            double t70343 = t70342-t70344;
            double t70345 = 1.0/pow(rho_b[index],1.0/3.0);
            double t70346 = c*t70345;
            double t70347 = sqrt(t70346);
            double t70348 = pow(t70346,3.0/2.0);
            double t70349 = 1.0/pow(rho_b[index],2.0/3.0);
            double t70350 = b1p*t70347;
            double t70351 = b3p*t70348;
            double t70352 = b4p*t70058*t70349;
            double t70353 = b2p*c*t70345;
            double t70354 = t70350+t70351+t70352+t70353;
            double t70355 = 1.0/t70354;
            double t70356 = t70064*t70355*(1.0/2.0);
            double t70357 = t70356+1.0;
            double t70358 = log(t70357);
            double t70359 = a1p*c*t70345;
            double t70360 = t70359+1.0;
            double t70361 = c0p*t70360*t70358*2.0;
            double t70362 = t70101*t70090*t70076*t70095*t70098;
            double t70363 = Aa*t70113*t70123*t70132*t70125*t70076*t70095*2.0;
            double t70364 = gamma_aa[index]*gcab*t70177*(1.6E1/3.0);
            double t70365 = gamma_aa[index]*gcab*t70174*t70176*t70177*1.6E1;
            double t70366 = gamma_aa[index]*t70182*t70175*t70176*t70177*(1.6E1/3.0);
            double t70367 = gamma_aa[index]*t70174*t70175*t70177*1.6E1;
            double t70368 = t70364+t70365+t70366+t70367;
            double t70369 = 1.0/(t70190*t70190);
            double t70370 = gamma_aa[index]*gamma_aa[index];
            double t70371 = 1.0/pow(rho_a[index],2.2E1/3.0);
            double t70372 = gamma_aa[index]*gcab*t70177*(8.0/3.0);
            double t70373 = gamma_aa[index]*t70174*t70175*t70177*(8.0/3.0);
            double t70374 = t70372+t70373;
            double t70375 = 1.0/(t70197*t70197);
            double t70376 = 1.0/pow(rho_a[index],1.4E1/3.0);
            double t70377 = 1.0/(t70188*t70188);
            double t70378 = 1.0/(t70193*t70193);
            double t70379 = gamma_aa[index]*gcab*t70177*4.0;
            double t70380 = gamma_aa[index]*gcab*t70174*t70176*t70177*4.0;
            double t70381 = gamma_aa[index]*t70174*t70175*t70177*8.0;
            double t70382 = t70380+t70381+t70379;
            double t70462 = t70260*t70173*t70254*t70259;
            double t70383 = -t70462+t70166+t70276-t70277;
            double t70384 = gcaa*gcaa;
            double t70385 = t70370*t70370;
            double t70386 = t70384*t70384;
            double t70387 = 1.0/pow(rho_a[index],3.2E1/3.0);
            double t70388 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]);
            double t70389 = 1.0/pow(rho_a[index],1.6E1/3.0);
            double t70390 = t70170*t70343*t70076;
            double t70391 = t70344+t70390;
            double t70392 = tau_a[index]-1.0/1.0E20;
            double t70393 = ( (t70392 > 0.0) ?  1.0 : 0.0 ) ;
            double t70394 = tau_a[index]*2.0;
            double t70395 = 1.0/rho_a[index];
            double t70422 = gamma_aa[index]*t70395*(1.0/4.0);
            double t70396 = -t70422+t70394;
            double t70397 = t70279*t70396*(1.0/2.0);
            double t70398 = t70397-1.0;
            double t70399 = t70393*t70398;
            double t70400 = t70399+1.0;
            double t70401 = gamma_aa[index]*gcaa*t70178*4.0;
            double t70402 = gamma_aa[index]*gcaa*t70370*t70384*t70388*4.0;
            double t70403 = t70370*t70384*t70389*6.0;
            double t70404 = t70385*t70386*t70387;
            double t70405 = t70401+t70402+t70403+t70404+1.0;
            double t70406 = 1.0/t70405;
            double t70407 = gamma_aa[index]*gcaa*t70178;
            double t70408 = t70407+1.0;
            double t70409 = 1.0/t70408;
            double t70410 = gamma_aa[index]*gcaa*t70178*3.0;
            double t70411 = gamma_aa[index]*gcaa*t70370*t70384*t70388;
            double t70412 = t70370*t70384*t70389*3.0;
            double t70413 = t70410+t70411+t70412+1.0;
            double t70414 = 1.0/t70413;
            double t70415 = gamma_aa[index]*gcaa*t70178*2.0;
            double t70416 = t70370*t70384*t70389;
            double t70417 = t70415+t70416+1.0;
            double t70418 = 1.0/t70417;
            double t70419 = 1.0/pow(rho_a[index],1.9E1/3.0);
            double t70420 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]*rho_a[index]);
            double t70421 = 1.0/pow(rho_a[index],3.5E1/3.0);
            double t70423 = 1.0/pow(rho_a[index],1.0E1);
            double t70424 = 1.0/(t70408*t70408);
            double t70425 = gamma_aa[index]*gcaa*t70177*(3.2E1/3.0);
            double t70426 = gamma_aa[index]*gcaa*t70420*t70370*t70384*3.2E1;
            double t70427 = t70370*t70419*t70384*3.2E1;
            double t70428 = t70421*t70385*t70386*(3.2E1/3.0);
            double t70429 = t70425+t70426+t70427+t70428;
            double t70430 = gamma_aa[index]*gcaa*t70177*(1.6E1/3.0);
            double t70431 = t70370*t70419*t70384*(1.6E1/3.0);
            double t70432 = t70430+t70431;
            double t70433 = gamma_aa[index]*gcaa*t70177*8.0;
            double t70434 = gamma_aa[index]*gcaa*t70420*t70370*t70384*8.0;
            double t70435 = t70370*t70419*t70384*1.6E1;
            double t70436 = t70433+t70434+t70435;
            double t70437 = 1.0/(t70413*t70413);
            double t70438 = 1.0/(t70405*t70405);
            double t70439 = 1.0/pow(rho_a[index],3.8E1/3.0);
            double t70440 = 1.0/(t70417*t70417);
            double t70441 = ccaa4*t70406*t70385*t70386*t70387;
            double t70442 = ccaa1*gamma_aa[index]*gcaa*t70409*t70178;
            double t70443 = ccaa3*gamma_aa[index]*gcaa*t70414*t70370*t70384*t70388;
            double t70444 = ccaa2*t70370*t70418*t70384*t70389;
            double t70445 = ccaa0+t70441+t70442+t70443+t70444;
            double t70446 = 1.0/(t70142*t70142*t70142);
            double t70447 = b4f*t70058*t70178*(1.0E1/9.0);
            double t70448 = b2f*c*t70261*(4.0/9.0);
            double t70449 = b3f*t70150*t70058*t70178*(1.0/1.2E1);
            double t70450 = b1f*c*t70150*t70261*(2.0/9.0);
            double t70451 = b3f*c*t70135*t70261*(2.0/3.0);
            double t70452 = t70450+t70451+t70447+t70448+t70449-b1f*t70262*t70058*t70178*(1.0/3.6E1);
            double t70453 = t70260*t70173*t70254*t70452;
            double t70455 = t70160*t70272*t70158*t70159;
            double t70456 = 1.0/(t70153*t70153);
            double t70457 = 1.0/(t70142*t70142*t70142*t70142);
            double t70458 = t70173*t70263*t70077*t70456*t70457*(1.0/2.0);
            double t70459 = t70064*t70264*t70273*t70274*t70158*(1.0/2.0);
            double t70460 = a1f*c*t70143*t70260*t70254*t70259*(2.0/3.0);
            double t70461 = a1p*c*t70160*t70143*t70165*t70159*(2.0/3.0);
            double t70463 = ccaa4*t70421*t70406*t70385*t70386*(3.2E1/3.0);
            double t70464 = ccaa1*gamma_aa[index]*gcaa*t70409*t70177*(8.0/3.0);
            double t70465 = ccaa3*gamma_aa[index]*gcaa*t70420*t70414*t70370*t70384*8.0;
            double t70466 = ccaa2*t70370*t70418*t70419*t70384*(1.6E1/3.0);
            double t70471 = ccaa1*t70370*t70424*t70419*t70384*(8.0/3.0);
            double t70472 = ccaa3*gamma_aa[index]*gcaa*t70370*t70436*t70437*t70384*t70388;
            double t70473 = ccaa4*t70429*t70438*t70385*t70386*t70387;
            double t70474 = ccaa2*t70440*t70432*t70370*t70384*t70389;
            double t70467 = -t70471+t70463-t70472+t70464-t70473+t70465-t70474+t70466;
            double t70468 = t70462-t70166-t70276+t70277;
            double t70469 = t70170*t70076*t70468;
            double t70470 = t70166-t70277+t70469;
            v_rho_a_rho_a_[index] = (rho_a[index]*t70391+rho_b[index]*(t70361-t70170*t70076*(t70361-c0f*log((t70077* \
               (1.0/2.0))/(b1f*t70347+b3f*t70348+b2f*c*t70345+b4f*t70058*t70349)+1.0)*(a1f*c*t70345+1.0)*2.0))-t70051* \
               (t70100+t70362+t70363))*(-ccab2*t70174*t70176*t70378*(gamma_aa[index]*gcab*t70376*(8.8E1/9.0)+t70370* \
               t70371*t70174*(3.2E1/9.0)+gamma_aa[index]*t70174*t70175*t70376*(8.8E1/9.0))+ccab2*t70174*1.0/(t70193* \
               t70193*t70193)*t70176*(t70374*t70374)*2.0+ccab4*t70182*t70183*1.0/(t70188*t70188*t70188)*(t70368*t70368) \
               *2.0+ccab1*gamma_aa[index]*gcab*t70200*t70376*(4.4E1/9.0)-ccab1*t70370*t70371*t70174*t70369*(3.2E1/ \
               9.0)+ccab2*t70370*t70371*t70174*t70198*(3.2E1/9.0)-ccab4*t70182*t70183*t70377*(gamma_aa[index]*gcab* \
               t70376*(1.76E2/9.0)+t70370*t70371*t70174*(6.4E1/3.0)+gamma_aa[index]*t70174*t70175*t70376*(1.76E2/ \
               3.0)+t70370*t70182*t70371*t70176*(6.4E1/3.0)+gamma_aa[index]*gcab*t70174*t70176*t70376*(1.76E2/3.0) \
               +gamma_aa[index]*t70182*t70175*t70176*t70376*(1.76E2/9.0)+gcab*t70370*t70371*t70174*t70175*(1.28E2/ \
               3.0))+ccab4*t70201*t70370*t70182*t70371*t70176*(6.4E1/3.0)-ccab1*gamma_aa[index]*t70174*t70175*t70376* \
               t70369*(4.4E1/9.0)+ccab2*gamma_aa[index]*t70174*t70175*t70376*t70198*(8.8E1/9.0)+ccab3*gcab*t70174* \
               t70175*(t70382*t70382)*t70176*1.0/(t70197*t70197*t70197)*2.0+ccab3*gamma_aa[index]*gcab*t70174*t70176* \
               t70376*t70199*(4.4E1/3.0)+ccab4*gamma_aa[index]*t70201*t70182*t70175*t70176*t70376*(1.76E2/9.0)-ccab2* \
               gamma_aa[index]*t70174*t70175*t70374*t70177*t70378*(1.6E1/3.0)+ccab3*gcab*t70370*t70371*t70174*t70175* \
               t70199*(3.2E1/3.0)+ccab1*gcab*1.0/(t70190*t70190*t70190)*t70370*t70371*t70174*t70175*(3.2E1/9.0)-ccab3* \
               gcab*t70174*t70175*t70176*t70375*(gamma_aa[index]*gcab*t70376*(4.4E1/3.0)+t70370*t70371*t70174*(3.2E1/ \
               3.0)+gamma_aa[index]*t70174*t70175*t70376*(8.8E1/3.0)+gamma_aa[index]*gcab*t70174*t70176*t70376*(4.4E1/ \
               3.0)+gcab*t70370*t70371*t70174*t70175*(3.2E1/3.0))-ccab3*gamma_aa[index]*gcab*t70174*t70382*t70176* \
               t70177*t70375*8.0-ccab4*gamma_aa[index]*t70182*t70175*t70176*t70177*t70368*t70377*(3.2E1/3.0))-(X- \
               1.0)*(t70341*t70306*2.0+rho_a[index]*t70306*(C_k*a_1*t70310*t70133*t70279*(1.0E1/9.0)-a_1*t70307*t70308* \
               t70309*t70285*(5.0E1/9.0)+a_2*t70307*t70308*t70309*t70285*(5.0E1/9.0)+a_1*t70307*t70290*t70308*t70309* \
               t70284*(5.0E1/9.0)+a_10*t70307*t70308*t70309*t70288*t70297*2.5E2-a_2*t70307*t70290*t70308*t70309*t70284* \
               (2.0E2/9.0)+a_2*t70307*t70308*t70291*t70309*t70286*(5.0E1/3.0)+a_3*t70307*t70290*t70308*t70309*t70284* \
               (5.0E1/3.0)-a_3*t70307*t70308*t70291*t70309*t70286*5.0E1+a_4*t70307*t70308*t70291*t70309*t70286*(1.0E2/ \
               3.0)+a_4*t70307*t70308*t70309*t70293*t70287*(5.0E2/9.0)-a_5*t70307*t70308*t70309*t70293*t70287*(1.25E3/ \
               9.0)+a_6*t70307*t70308*t70309*t70293*t70287*(2.5E2/3.0)+a_8*t70307*t70308*t70309*t70288*t70297*2.0E2- \
               a_9*t70307*t70308*t70309*t70288*t70297*4.5E2-C_k*a_1*t70133*t70284*t70285*t70279*(1.0E1/9.0)-C_k*a_2* \
               t70133*t70290*t70286*t70279*(2.0E1/9.0)+C_k*a_2*t70133*t70284*t70285*t70279*(2.0E1/9.0)+C_k*a_3*t70133* \
               t70290*t70286*t70279*(1.0E1/3.0)-C_k*a_4*t70133*t70292*t70287*t70279*(4.0E1/9.0)+C_k*a_5*t70133*t70292* \
               t70287*t70279*(5.0E1/9.0)-C_k*a_8*t70133*t70296*t70279*t70288*(8.0E1/9.0)+C_k*a_9*t70133*t70296*t70279* \
               t70288*1.0E1+C_k*a_10*t70133*t70284*t70279*t70288*t70297*(1.0E2/9.0)-C_k*a_10*t70133*t70286*t70279* \
               t70288*t70289*(1.0E2/9.0)+C_k*a_11*t70133*t70286*t70279*t70288*t70289*(1.1E2/9.0)-C_k*a_3*t70133*t70291* \
               t70284*t70286*t70279*(1.0E1/3.0)+C_k*a_4*t70133*t70291*t70284*t70286*t70279*(4.0E1/9.0)-C_k*a_5*t70133* \
               t70284*t70293*t70287*t70279*(5.0E1/9.0)+C_k*a_6*t70133*t70284*t70293*t70287*t70279*(2.0E1/3.0)-C_k* \
               a_6*t70133*t70294*t70286*t70287*t70279*(2.0E1/3.0)+C_k*a_7*t70133*t70294*t70286*t70287*t70279*(7.0E1/ \
               9.0)-C_k*a_9*t70133*t70284*t70279*t70288*t70297*1.0E1+a_10*t70311*t70307*t70308*t70309*t70286*t70288* \
               (2.75E3/9.0)-a_11*t70311*t70307*t70308*t70309*t70286*t70288*(6.05E3/9.0)-a_10*t70307*t70308*t70309* \
               t70284*t70288*t70289*(5.0E3/9.0)+a_11*t70307*t70308*t70309*t70284*t70288*t70289*(2.75E3/9.0)+a_3*t70307* \
               t70308*t70309*t70292*t70284*t70286*(1.0E2/3.0)-a_4*t70307*t70308*t70309*t70292*t70284*t70286*(8.0E2/ \
               9.0)+a_5*t70307*t70308*t70309*t70292*t70284*t70286*(5.0E2/9.0)+a_5*t70307*t70308*t70309*t70284*t70294* \
               t70287*(2.5E2/3.0)-a_6*t70307*t70308*t70309*t70284*t70294*t70287*2.0E2+a_6*t70307*t70308*t70309*t70286* \
               t70295*t70287*(3.5E2/3.0)+a_7*t70307*t70308*t70309*t70284*t70294*t70287*(3.5E2/3.0)-a_7*t70307*t70308* \
               t70309*t70286*t70295*t70287*(2.45E3/9.0)+a_8*t70307*t70308*t70309*t70286*t70295*t70287*(1.4E3/9.0) \
               +a_9*t70307*t70308*t70309*t70284*t70288*t70289*2.5E2+a_11*t70307*t70308*t70309*1.0/pow(t70283,1.3E1) \
               *t70284*t70286*t70288*(1.1E3/3.0)-C_k*a_11*t70311*t70133*t70284*t70286*t70279*t70288*(1.1E2/9.0)-C_k* \
               a_7*t70133*t70284*t70286*t70295*t70287*t70279*(7.0E1/9.0)+C_k*a_8*t70133*t70284*t70286*t70295*t70287* \
               t70279*(8.0E1/9.0)+a_7*t70307*t70308*t70309*t70284*t70286*t70287*t70296*(1.4E3/9.0)-a_8*t70307*t70308* \
               t70309*t70284*t70286*t70287*t70296*(3.2E3/9.0)+a_9*t70307*t70308*t70309*t70284*t70286*t70287*t70296* \
               2.0E2)-kp*t70316*t70328*t70329*2.0+kp*rho_a[index]*t70328*t70329*(gamma_aa[index]*mu_*t70312*t70314* \
               t70298*t70299*(4.0/3.0)+gamma_aa[index]*mu_*1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]) \
               *t70302*t70298*t70299*(3.0/2.0)+gamma_aa[index]*mu_*t70300*1.0/pow(t70301,8.0/3.0)*t70298*t70299*(1.0E1/ \
               9.0))-kp*rho_a[index]*1.0/(t70304*t70304*t70304)*(t70316*t70316)*t70328*2.0-kp*rho_a[index]*t70341* \
               t70316*t70329*2.0)+(t70100+t70362+t70363+rho_a[index]*(-t70166+t70277+t70170*t70076*(t70166+t70276- \
               t70260*t70173*t70254*t70259-a1p*c*c0p*t70143*t70167*(2.0/3.0)))+t70051*(t70111-a1p*c*c0p*t70063*t70089* \
               (2.0/3.0)-t70101*t70112*t70090*t70076*t70095*4.0+t70101*t70130*t70090*t70076*t70098-t70101*t70213* \
               t70076*t70095*t70098+t70070*t70071*t70090*t70076*t70095*t70098*4.0+Aa*t70130*t70113*t70123*t70132* \
               t70125*t70076*2.0-Aa*t70113*t70123*t70125*t70236*t70076*t70095*2.0+t70113*t70132*t70125*t70251*t70244* \
               t70246*t70076*t70095-Aa*a1a*c*t70113*t70123*t70132*t70063*t70076*t70095*(2.0/3.0))-c0p*t70158*t70167* \
               2.0-t70170*t70343*t70076)*(ccab1*gamma_aa[index]*gcab*t70200*t70177*(4.0/3.0)-ccab2*t70174*t70176* \
               t70374*t70378-ccab4*t70182*t70183*t70368*t70377-ccab1*gamma_aa[index]*t70174*t70175*t70177*t70369* \
               (4.0/3.0)+ccab2*gamma_aa[index]*t70174*t70175*t70177*t70198*(8.0/3.0)+ccab3*gamma_aa[index]*gcab*t70174* \
               t70176*t70177*t70199*4.0+ccab4*gamma_aa[index]*t70201*t70182*t70175*t70176*t70177*(1.6E1/3.0)-ccab3* \
               gcab*t70174*t70175*t70382*t70176*t70375)*2.0-(ccab0+ccab1*gcab*t70200*t70175+ccab4*t70201*t70182*t70183+ \
               ccab2*t70174*t70176*t70198+ccab3*gcab*t70174*t70175*t70176*t70199)*(-t70051*(-t70233-t70225+t70253+ \
               t70278+t70101*t70076*t70095*t70098*(t70233+t70225-t70253-t70278-t70205*1.0/(t70082*t70082*t70082)* \
               t70226*t70088*2.0+t70205*t70206*t70088*(b2f*c*t70202*(4.0/9.0)+b4f*t70203*t70058*(1.0E1/9.0)+b1f*c* \
               t70103*t70202*(2.0/9.0)+b3f*c*t70202*t70054*(2.0/3.0)-b1f*t70203*t70217*t70058*(1.0/3.6E1)+b3f*t70103* \
               t70203*t70058*(1.0/1.2E1))+1.0/(t70082*t70082*t70082*t70082)*t70226*1.0/(t70085*t70085)*t70077*t70088* \
               (1.0/2.0)-a1f*c*c0f*t70202*t70086*(8.0/9.0)+a1f*c*t70211*t70205*t70206*t70063*(2.0/3.0)-a1p*c*t70110* \
               t70104*t70105*t70063*(2.0/3.0))+t70101*t70112*t70130*t70090*t70076*8.0-t70101*t70112*t70213*t70076* \
               t70095*8.0+t70101*t70130*t70213*t70076*t70098*2.0-t70101*t70090*t70234*t70076*t70095*2.0E1-t70101* \
               t70090*t70243*t70076*t70098-t70071*t70090*t70076*t70095*t70098*1.2E1+t70112*t70070*t70071*t70090*t70076* \
               t70095*3.2E1-t70130*t70070*t70071*t70090*t70076*t70098*8.0+t70213*t70070*t70071*t70076*t70095*t70098* \
               8.0+a1p*c*t70110*t70104*t70105*t70063*(2.0/3.0)+Aa*t70130*t70113*t70123*t70125*t70236*t70076*4.0-Aa* \
               t70113*t70123*t70132*t70125*t70243*t70076*2.0-Aa*t70113*t70123*t70125*t70076*t70095*(t70101*t70234* \
               2.0E1+t70071*t70098*1.2E1-t70112*t70070*t70071*3.2E1)*2.0-t70130*t70113*t70132*t70125*t70251*t70244* \
               t70246*t70076*2.0+t70113*t70125*t70251*t70244*t70236*t70246*t70076*t70095*2.0-t70113*t70132*t70125* \
               t70252*t70244*1.0/(t70119*t70119*t70119)*t70076*t70095*2.0+t70113*t70132*t70125*t70244*t70246*t70076* \
               t70095*(b2a*c*t70202*(4.0/9.0)+b4a*t70203*t70058*(1.0E1/9.0)+b1a*c*t70103*t70202*(2.0/9.0)+b3a*c*t70202* \
               t70054*(2.0/3.0)-b1a*t70203*t70217*t70058*(1.0/3.6E1)+b3a*t70103*t70203*t70058*(1.0/1.2E1))+Aa*a1a* \
               c*t70130*t70113*t70123*t70132*t70063*t70076*(4.0/3.0)-Aa*a1a*c*t70202*t70113*t70123*t70132*t70076* \
               t70095*(8.0/9.0)-Aa*a1a*c*t70113*t70123*t70063*t70236*t70076*t70095*(4.0/3.0)+t70113*1.0/(t70122*t70122) \
               *t70114*t70132*t70125*t70252*1.0/(t70119*t70119*t70119*t70119)*t70076*t70095*(1.0/2.0)+a1a*c*t70113* \
               t70132*t70251*t70063*t70244*t70246*t70076*t70095*(2.0/3.0))+rho_a[index]*(t70461-t70266-t70275+t70455+ \
               t70459+t70170*t70076*(t70460+t70453+t70266+t70275+t70458-t70160*t70272*t70158*t70159-t70173*t70254* \
               t70263*t70446*2.0-a1f*c*c0f*t70171*t70261*(8.0/9.0)-t70064*t70264*t70273*t70274*t70158*(1.0/2.0)-a1p* \
               c*t70160*t70143*t70165*t70159*(2.0/3.0)))+t70170*t70076*t70383*2.0+t70110*t70104*t70105*t70069*2.0- \
               t70160*t70165*t70158*t70159*2.0+a1p*c*c0p*t70143*t70167*(4.0/3.0)-a1p*c*c0p*t70063*t70089*(4.0/3.0) \
               -t70101*t70112*t70090*t70076*t70095*8.0+t70101*t70130*t70090*t70076*t70098*2.0-t70101*t70213*t70076* \
               t70095*t70098*2.0+t70070*t70071*t70090*t70076*t70095*t70098*8.0+Aa*t70130*t70113*t70123*t70132*t70125* \
               t70076*4.0-Aa*t70113*t70123*t70125*t70236*t70076*t70095*4.0+t70113*t70132*t70125*t70251*t70244*t70246* \
               t70076*t70095*2.0-Aa*a1a*c*t70113*t70123*t70132*t70063*t70076*t70095*(4.0/3.0))+t70400*t70445*(-t70166+ \
               t70277+t70170*t70076*t70383)*2.0+t70400*t70391*t70467*2.0-rho_a[index]*t70400*t70391*(ccaa1*gamma_aa[index]* \
               gcaa*t70409*t70376*(8.8E1/9.0)-ccaa1*t70370*t70424*t70371*t70384*2.4E1+ccaa2*t70370*t70371*t70418* \
               t70384*(3.04E2/9.0)+ccaa4*t70406*t70385*t70439*t70386*(1.12E3/9.0)-ccaa2*t70440*t70432*t70370*t70419* \
               t70384*(3.2E1/3.0)-ccaa4*t70421*t70429*t70438*t70385*t70386*(6.4E1/3.0)-ccaa2*t70440*t70370*t70384* \
               t70389*(gamma_aa[index]*gcaa*t70376*(1.76E2/9.0)+t70370*t70371*t70384*(3.04E2/9.0))-ccaa4*t70438*t70385* \
               t70386*t70387*(gamma_aa[index]*gcaa*t70376*(3.52E2/9.0)+t70370*t70371*t70384*(6.08E2/3.0)+t70385*t70439* \
               t70386*(1.12E3/9.0)+gamma_aa[index]*gcaa*t70423*t70370*t70384*2.88E2)+ccaa2*(t70432*t70432)*t70370* \
               1.0/(t70417*t70417*t70417)*t70384*t70389*2.0+ccaa4*1.0/(t70405*t70405*t70405)*(t70429*t70429)*t70385* \
               t70386*t70387*2.0+ccaa3*gamma_aa[index]*gcaa*t70414*t70423*t70370*t70384*7.2E1+ccaa1*gamma_aa[index]* \
               gcaa*t70423*t70370*1.0/(t70408*t70408*t70408)*t70384*(1.28E2/9.0)+ccaa3*gamma_aa[index]*gcaa*1.0/(t70413* \
               t70413*t70413)*t70370*(t70436*t70436)*t70384*t70388*2.0-ccaa3*gamma_aa[index]*gcaa*t70370*t70437*t70384* \
               t70388*(gamma_aa[index]*gcaa*t70376*(8.8E1/3.0)+t70370*t70371*t70384*(3.04E2/3.0)+gamma_aa[index]* \
               gcaa*t70423*t70370*t70384*7.2E1)-ccaa3*gamma_aa[index]*gcaa*t70420*t70370*t70436*t70437*t70384*1.6E1) \
               +rho_a[index]*t70400*t70445*(t70461-t70266-t70275+t70455+t70459+t70170*t70076*(t70460-t70461+t70453+ \
               t70266+t70275-t70455+t70458-t70459-t70173*t70254*t70263*t70446*2.0-a1f*c*c0f*t70171*t70261*(8.0/9.0) \
               ))+rho_a[index]*t70400*t70470*t70467*2.0-gamma_aa[index]*t70470*t70445*t70393*t70395*t70279*(1.0/4.0) \
               +gamma_aa[index]*t70391*t70393*t70395*t70467*t70279*(1.0/4.0);
        } else if (rho_a[index] > cutoff_) {
            double t74787 = 1.0/pow(rho_a[index],1.0/3.0);
            double t74788 = c*t74787;
            double t74789 = sqrt(t74788);
            double t74790 = b1f*t74789;
            double t74791 = pow(t74788,3.0/2.0);
            double t74792 = b3f*t74791;
            double t74793 = c*c;
            double t74794 = 1.0/pow(rho_a[index],2.0/3.0);
            double t74795 = b4f*t74793*t74794;
            double t74796 = b2f*c*t74787;
            double t74797 = t74790+t74792+t74795+t74796;
            double t74798 = 1.0/pow(rho_a[index],4.0/3.0);
            double t74799 = b1p*t74789;
            double t74800 = b3p*t74791;
            double t74801 = b4p*t74793*t74794;
            double t74802 = b2p*c*t74787;
            double t74803 = t74800+t74801+t74802+t74799;
            double t74804 = 1.0/pow(rho_a[index],5.0/3.0);
            double t74805 = 1.0/sqrt(t74788);
            double t74806 = 1.0/c0f;
            double t74807 = 1.0/t74797;
            double t74808 = t74806*t74807*(1.0/2.0);
            double t74809 = t74808+1.0;
            double t74810 = 1.0/c0p;
            double t74811 = 1.0/t74803;
            double t74812 = t74810*t74811*(1.0/2.0);
            double t74813 = t74812+1.0;
            double t74814 = a1p*c*t74787;
            double t74815 = t74814+1.0;
            double t74816 = 1.0/t74813;
            double t74817 = 1.0/(t74803*t74803);
            double t74818 = b4p*t74804*t74793*(2.0/3.0);
            double t74819 = b2p*c*t74798*(1.0/3.0);
            double t74820 = b1p*c*t74805*t74798*(1.0/6.0);
            double t74821 = b3p*c*t74789*t74798*(1.0/2.0);
            double t74822 = t74820+t74821+t74818+t74819;
            double t74823 = t74822*t74815*t74816*t74817;
            double t74824 = log(t74813);
            double t74825 = gamma_aa[index]*gamma_aa[index];
            double t74826 = gcaa*gcaa;
            double t74827 = t74825*t74825;
            double t74828 = t74826*t74826;
            double t74829 = 1.0/pow(rho_a[index],3.2E1/3.0);
            double t74830 = 1.0/pow(rho_a[index],8.0/3.0);
            double t74831 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]);
            double t74832 = 1.0/pow(rho_a[index],1.6E1/3.0);
            double t74833 = pow(2.0,1.0/3.0);
            double t74834 = t74833*2.0;
            double t74835 = t74834-2.0;
            double t74836 = two_13*2.0;
            double t74837 = t74836-2.0;
            double t74838 = 1.0/t74837;
            double t74839 = log(t74809);
            double t74840 = a1f*c*t74787;
            double t74841 = t74840+1.0;
            double t74842 = tau_a[index]-1.0/1.0E20;
            double t74843 = ( (t74842 > 0.0) ?  1.0 : 0.0 ) ;
            double t74844 = 1.0/tau_a[index];
            double t74845 = tau_a[index]*2.0;
            double t74846 = 1.0/rho_a[index];
            double t74894 = gamma_aa[index]*t74846*(1.0/4.0);
            double t74847 = t74845-t74894;
            double t74848 = t74844*t74847*(1.0/2.0);
            double t74849 = t74848-1.0;
            double t74850 = t74843*t74849;
            double t74851 = t74850+1.0;
            double t74852 = gamma_aa[index]*gcaa*t74830*4.0;
            double t74853 = gamma_aa[index]*gcaa*t74831*t74825*t74826*4.0;
            double t74854 = t74832*t74825*t74826*6.0;
            double t74855 = t74827*t74828*t74829;
            double t74856 = t74852+t74853+t74854+t74855+1.0;
            double t74857 = 1.0/t74856;
            double t74858 = gamma_aa[index]*gcaa*t74830;
            double t74859 = t74858+1.0;
            double t74860 = 1.0/t74859;
            double t74861 = gamma_aa[index]*gcaa*t74830*3.0;
            double t74862 = gamma_aa[index]*gcaa*t74831*t74825*t74826;
            double t74863 = t74832*t74825*t74826*3.0;
            double t74864 = t74861+t74862+t74863+1.0;
            double t74865 = 1.0/t74864;
            double t74866 = gamma_aa[index]*gcaa*t74830*2.0;
            double t74867 = t74832*t74825*t74826;
            double t74868 = t74866+t74867+1.0;
            double t74869 = 1.0/t74868;
            double t74870 = 1.0/pow(rho_a[index],1.9E1/3.0);
            double t74871 = 1.0/pow(rho_a[index],1.1E1/3.0);
            double t74872 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]*rho_a[index]);
            double t74873 = 1.0/pow(rho_a[index],3.5E1/3.0);
            double t74874 = pow(rho_a[index],2.0/3.0);
            double t74875 = pow(rho_a[index],5.0/3.0);
            double t74876 = C_k*t74844*t74875;
            double t74877 = t74876+1.0;
            double t74878 = t74876-1.0;
            double t74879 = 1.0/(t74877*t74877);
            double t74880 = t74878*t74878;
            double t74881 = t74880*t74880;
            double t74882 = t74881*t74881;
            double t74883 = 1.0/pow(t74877,1.1E1);
            double t74884 = 1.0/(t74877*t74877*t74877);
            double t74885 = 1.0/(t74877*t74877*t74877*t74877);
            double t74886 = 1.0/(t74877*t74877*t74877*t74877*t74877);
            double t74887 = 1.0/(t74877*t74877*t74877*t74877*t74877*t74877);
            double t74888 = 1.0/(t74877*t74877*t74877*t74877*t74877*t74877*t74877);
            double t74889 = 1.0/(t74877*t74877*t74877*t74877*t74877*t74877*t74877*t74877);
            double t74890 = 1.0/(t74877*t74877*t74877*t74877*t74877*t74877*t74877*t74877*t74877);
            double t74891 = 1.0/pow(t74877,1.0E1);
            double t74892 = c0f*t74841*t74839*2.0;
            double t74893 = c0p*t74815*t74824*2.0;
            double t74895 = 1.0/pow(rho_a[index],1.0E1);
            double t74896 = 1.0/pow(rho_a[index],2.2E1/3.0);
            double t74897 = 1.0/(t74859*t74859);
            double t74898 = gamma_aa[index]*gcaa*t74871*(3.2E1/3.0);
            double t74899 = gamma_aa[index]*gcaa*t74825*t74826*t74872*3.2E1;
            double t74900 = t74825*t74870*t74826*3.2E1;
            double t74901 = t74827*t74828*t74873*(3.2E1/3.0);
            double t74902 = t74900+t74901+t74898+t74899;
            double t74903 = gamma_aa[index]*gcaa*t74871*(1.6E1/3.0);
            double t74904 = t74825*t74870*t74826*(1.6E1/3.0);
            double t74905 = t74903+t74904;
            double t74906 = gamma_aa[index]*gcaa*t74871*8.0;
            double t74907 = gamma_aa[index]*gcaa*t74825*t74826*t74872*8.0;
            double t74908 = t74825*t74870*t74826*1.6E1;
            double t74909 = t74906+t74907+t74908;
            double t74910 = 1.0/(t74864*t74864);
            double t74911 = 1.0/pow(rho_a[index],1.4E1/3.0);
            double t74912 = 1.0/(t74856*t74856);
            double t74913 = 1.0/pow(rho_a[index],3.8E1/3.0);
            double t74914 = 1.0/(t74868*t74868);
            double t74915 = ccaa4*t74827*t74828*t74829*t74857;
            double t74916 = ccaa1*gamma_aa[index]*gcaa*t74830*t74860;
            double t74917 = ccaa3*gamma_aa[index]*gcaa*t74831*t74825*t74826*t74865;
            double t74918 = ccaa2*t74832*t74825*t74826*t74869;
            double t74919 = ccaa0+t74915+t74916+t74917+t74918;
            double t74920 = 1.0/t74809;
            double t74921 = b4f*t74804*t74793*(2.0/3.0);
            double t74922 = b2f*c*t74798*(1.0/3.0);
            double t74923 = b1f*c*t74805*t74798*(1.0/6.0);
            double t74924 = b3f*c*t74789*t74798*(1.0/2.0);
            double t74925 = t74921+t74922+t74923+t74924;
            double t74926 = 1.0/(t74797*t74797);
            double t74927 = 1.0/pow(rho_a[index],7.0/3.0);
            double t74928 = 1.0/pow(t74788,3.0/2.0);
            double t74929 = t74925*t74925;
            double t74930 = t74822*t74822;
            double t74931 = 1.0/(t74803*t74803*t74803);
            double t74932 = t74930*t74931*t74815*t74816*2.0;
            double t74933 = b4p*t74830*t74793*(1.0E1/9.0);
            double t74934 = b2p*c*t74927*(4.0/9.0);
            double t74935 = b3p*t74830*t74805*t74793*(1.0/1.2E1);
            double t74936 = b1p*c*t74805*t74927*(2.0/9.0);
            double t74937 = b3p*c*t74927*t74789*(2.0/3.0);
            double t74938 = t74933+t74934+t74935+t74936+t74937-b1p*t74830*t74793*t74928*(1.0/3.6E1);
            double t74939 = 1.0/(t74813*t74813);
            double t74940 = 1.0/(t74803*t74803*t74803*t74803);
            double t74941 = a1p*c*c0p*t74824*t74927*(8.0/9.0);
            double t74942 = a1f*c*c0f*t74839*t74798*(2.0/3.0);
            double t74943 = a1p*c*c0p*t74824*t74798*(2.0/3.0);
            double t74944 = ccaa4*t74827*t74828*t74873*t74857*(3.2E1/3.0);
            double t74945 = ccaa1*gamma_aa[index]*gcaa*t74860*t74871*(8.0/3.0);
            double t74946 = ccaa3*gamma_aa[index]*gcaa*t74825*t74826*t74872*t74865*8.0;
            double t74947 = ccaa2*t74825*t74870*t74826*t74869*(1.6E1/3.0);
            double t74984 = ccaa1*t74825*t74870*t74826*t74897*(8.0/3.0);
            double t74985 = ccaa3*gamma_aa[index]*gcaa*t74910*t74831*t74825*t74826*t74909;
            double t74986 = ccaa4*t74902*t74912*t74827*t74828*t74829;
            double t74987 = ccaa2*t74832*t74905*t74914*t74825*t74826;
            double t74948 = t74944+t74945+t74946+t74947-t74984-t74985-t74986-t74987;
            double t74949 = X-1.0;
            double t74950 = 1.0/(k*k);
            double t74951 = 1.0/kp;
            double t74952 = 1.0/(rho_a[index]*rho_a[index]);
            double t74953 = rho_a[index]*2.0;
            double t74954 = 1.0/pow(t74953,2.0/3.0);
            double t74955 = gamma_aa[index]*mu_*t74950*t74951*t74952*t74954*(1.0/4.0);
            double t74956 = t74955+1.0;
            double t74957 = 1.0/t74956;
            double t74958 = kp-kp*t74957+1.0;
            double t74959 = C_k*C_k;
            double t74960 = pow(rho_a[index],4.0/3.0);
            double t74961 = 1.0/(tau_a[index]*tau_a[index]);
            double t74962 = 1.0/t74877;
            double t74963 = 1.0/pow(t74877,1.2E1);
            double t74964 = t74823+t74942-t74943-t74920*t74841*t74925*t74926;
            double t74965 = t74835*t74838*t74964;
            double t74966 = 1.0/(t74956*t74956);
            double t74967 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]);
            double t74968 = 1.0/pow(t74953,5.0/3.0);
            double t74969 = a_1*t74962*t74878;
            double t74970 = a_10*t74880*t74882*t74891;
            double t74971 = a_11*t74880*t74882*t74883*t74878;
            double t74972 = a_2*t74880*t74879;
            double t74973 = a_3*t74880*t74884*t74878;
            double t74974 = a_4*t74881*t74885;
            double t74975 = a_5*t74881*t74886*t74878;
            double t74976 = a_6*t74880*t74881*t74887;
            double t74977 = a_7*t74880*t74881*t74878*t74888;
            double t74978 = a_8*t74882*t74889;
            double t74979 = a_9*t74890*t74882*t74878;
            double t74980 = t74970+t74971+t74972+t74973+t74974+t74975+t74976+t74977+t74969+t74978+t74979+1.0;
            double t74981 = t74892-t74893;
            double t74982 = t74835*t74981*t74838;
            double t74983 = t74982+t74893;
            double t74988 = gamma_aa[index]*mu_*t74950*t74951*t74954*t74967*(1.0/2.0);
            double t74989 = gamma_aa[index]*mu_*t74950*t74951*t74952*t74968*(1.0/3.0);
            double t74990 = t74988+t74989;
            double t74991 = C_k*a_1*t74844*t74962*t74874*(5.0/3.0);
            double t74992 = C_k*a_2*t74844*t74874*t74878*t74879*(1.0E1/3.0);
            double t74993 = C_k*a_10*t74844*t74882*t74891*t74874*t74878*(5.0E1/3.0);
            double t74994 = C_k*a_11*t74844*t74880*t74882*t74874*t74883*(5.5E1/3.0);
            double t74995 = C_k*a_3*t74844*t74880*t74874*t74884*5.0;
            double t74996 = C_k*a_4*t74844*t74880*t74874*t74885*t74878*(2.0E1/3.0);
            double t74997 = C_k*a_5*t74844*t74881*t74874*t74886*(2.5E1/3.0);
            double t74998 = C_k*a_6*t74844*t74881*t74874*t74878*t74887*1.0E1;
            double t74999 = C_k*a_7*t74844*t74880*t74881*t74874*t74888*(3.5E1/3.0);
            double t75000 = C_k*a_8*t74844*t74880*t74881*t74874*t74878*t74889*(4.0E1/3.0);
            double t75001 = C_k*a_9*t74844*t74890*t74882*t74874*1.5E1;
            double t75002 = t74991+t74992+t74993+t74994+t74995+t74996+t74997+t74998+t74999+t75000+t75001-C_k* \
               a_1*t74844*t74874*t74878*t74879*(5.0/3.0)-C_k*a_2*t74844*t74880*t74874*t74884*(1.0E1/3.0)-C_k*a_4* \
               t74844*t74881*t74874*t74886*(2.0E1/3.0)-C_k*a_8*t74844*t74890*t74882*t74874*(4.0E1/3.0)-C_k*a_10*t74844* \
               t74880*t74882*t74874*t74883*(5.0E1/3.0)-C_k*a_3*t74844*t74880*t74874*t74885*t74878*5.0-C_k*a_5*t74844* \
               t74881*t74874*t74878*t74887*(2.5E1/3.0)-C_k*a_6*t74844*t74880*t74881*t74874*t74888*1.0E1-C_k*a_9*t74844* \
               t74882*t74891*t74874*t74878*1.5E1-C_k*a_11*t74844*t74880*t74882*t74963*t74874*t74878*(5.5E1/3.0)-C_k* \
               a_7*t74844*t74880*t74881*t74874*t74878*t74889*(3.5E1/3.0);
            v_rho_a_rho_a_[index] = t74851*t74919*(-t74823+t74943+t74835*t74838*(t74823+t74942-t74920*t74841* \
               t74925*t74926-a1p*c*c0p*t74824*t74798*(2.0/3.0)))*2.0-t74949*t74958*t75002*2.0+t74851*t74948*(t74893+ \
               t74835*t74838*(t74892-c0p*t74815*t74824*2.0))*2.0-rho_a[index]*t74851*t74983*(ccaa1*gamma_aa[index]* \
               gcaa*t74911*t74860*(8.8E1/9.0)+ccaa4*t74913*t74827*t74828*t74857*(1.12E3/9.0)-ccaa1*t74825*t74826* \
               t74896*t74897*2.4E1+ccaa2*t74825*t74826*t74869*t74896*(3.04E2/9.0)-ccaa2*t74905*t74914*t74825*t74870* \
               t74826*(3.2E1/3.0)-ccaa4*t74902*t74912*t74827*t74828*t74873*(6.4E1/3.0)-ccaa2*t74832*t74914*t74825* \
               t74826*(gamma_aa[index]*gcaa*t74911*(1.76E2/9.0)+t74825*t74826*t74896*(3.04E2/9.0))-ccaa4*t74912*t74827* \
               t74828*t74829*(gamma_aa[index]*gcaa*t74911*(3.52E2/9.0)+t74913*t74827*t74828*(1.12E3/9.0)+t74825*t74826* \
               t74896*(6.08E2/3.0)+gamma_aa[index]*gcaa*t74825*t74826*t74895*2.88E2)+ccaa2*t74832*(t74905*t74905) \
               *t74825*t74826*1.0/(t74868*t74868*t74868)*2.0+ccaa4*(t74902*t74902)*t74827*t74828*t74829*1.0/(t74856* \
               t74856*t74856)*2.0+ccaa3*gamma_aa[index]*gcaa*t74825*t74826*t74865*t74895*7.2E1+ccaa1*gamma_aa[index]* \
               gcaa*t74825*t74826*1.0/(t74859*t74859*t74859)*t74895*(1.28E2/9.0)+ccaa3*gamma_aa[index]*gcaa*t74831* \
               t74825*t74826*1.0/(t74864*t74864*t74864)*(t74909*t74909)*2.0-ccaa3*gamma_aa[index]*gcaa*t74910*t74831* \
               t74825*t74826*(gamma_aa[index]*gcaa*t74911*(8.8E1/3.0)+t74825*t74826*t74896*(3.04E2/3.0)+gamma_aa[index]* \
               gcaa*t74825*t74826*t74895*7.2E1)-ccaa3*gamma_aa[index]*gcaa*t74910*t74825*t74826*t74872*t74909*1.6E1) \
               -rho_a[index]*t74949*t74958*(C_k*a_1*t74844*t74962*t74787*(1.0E1/9.0)-a_1*t74960*t74961*t74959*t74879* \
               (5.0E1/9.0)+a_2*t74960*t74961*t74959*t74879*(5.0E1/9.0)+a_1*t74960*t74961*t74884*t74878*t74959*(5.0E1/ \
               9.0)+a_10*t74960*t74961*t74882*t74891*t74959*2.5E2+a_2*t74960*t74880*t74961*t74885*t74959*(5.0E1/3.0) \
               -a_2*t74960*t74961*t74884*t74878*t74959*(2.0E2/9.0)-a_3*t74960*t74880*t74961*t74885*t74959*5.0E1+a_3* \
               t74960*t74961*t74884*t74878*t74959*(5.0E1/3.0)+a_4*t74960*t74880*t74961*t74885*t74959*(1.0E2/3.0)+ \
               a_4*t74960*t74961*t74881*t74887*t74959*(5.0E2/9.0)-a_5*t74960*t74961*t74881*t74887*t74959*(1.25E3/ \
               9.0)+a_6*t74960*t74961*t74881*t74887*t74959*(2.5E2/3.0)+a_8*t74960*t74961*t74882*t74891*t74959*2.0E2- \
               a_9*t74960*t74961*t74882*t74891*t74959*4.5E2-C_k*a_1*t74844*t74787*t74878*t74879*(1.0E1/9.0)-C_k*a_2* \
               t74844*t74880*t74884*t74787*(2.0E1/9.0)+C_k*a_2*t74844*t74787*t74878*t74879*(2.0E1/9.0)+C_k*a_3*t74844* \
               t74880*t74884*t74787*(1.0E1/3.0)-C_k*a_4*t74844*t74881*t74787*t74886*(4.0E1/9.0)+C_k*a_5*t74844*t74881* \
               t74787*t74886*(5.0E1/9.0)-C_k*a_8*t74844*t74890*t74882*t74787*(8.0E1/9.0)+C_k*a_9*t74844*t74890*t74882* \
               t74787*1.0E1-C_k*a_10*t74844*t74880*t74882*t74883*t74787*(1.0E2/9.0)+C_k*a_11*t74844*t74880*t74882* \
               t74883*t74787*(1.1E2/9.0)+C_k*a_10*t74844*t74882*t74891*t74787*t74878*(1.0E2/9.0)-C_k*a_3*t74844*t74880* \
               t74885*t74787*t74878*(1.0E1/3.0)+C_k*a_4*t74844*t74880*t74885*t74787*t74878*(4.0E1/9.0)-C_k*a_5*t74844* \
               t74881*t74787*t74878*t74887*(5.0E1/9.0)-C_k*a_6*t74844*t74880*t74881*t74787*t74888*(2.0E1/3.0)+C_k* \
               a_6*t74844*t74881*t74787*t74878*t74887*(2.0E1/3.0)+C_k*a_7*t74844*t74880*t74881*t74787*t74888*(7.0E1/ \
               9.0)-C_k*a_9*t74844*t74882*t74891*t74787*t74878*1.0E1+a_10*t74960*t74880*t74961*t74882*t74963*t74959* \
               (2.75E3/9.0)-a_11*t74960*t74880*t74961*t74882*t74963*t74959*(6.05E3/9.0)-a_10*t74960*t74961*t74882* \
               t74883*t74878*t74959*(5.0E3/9.0)+a_11*t74960*t74961*t74882*t74883*t74878*t74959*(2.75E3/9.0)+a_3*t74960* \
               t74880*t74961*t74886*t74878*t74959*(1.0E2/3.0)-a_4*t74960*t74880*t74961*t74886*t74878*t74959*(8.0E2/ \
               9.0)+a_5*t74960*t74880*t74961*t74886*t74878*t74959*(5.0E2/9.0)+a_5*t74960*t74961*t74881*t74878*t74959* \
               t74888*(2.5E2/3.0)+a_6*t74960*t74880*t74961*t74881*t74959*t74889*(3.5E2/3.0)-a_6*t74960*t74961*t74881* \
               t74878*t74959*t74888*2.0E2-a_7*t74960*t74880*t74961*t74881*t74959*t74889*(2.45E3/9.0)+a_7*t74960*t74961* \
               t74881*t74878*t74959*t74888*(3.5E2/3.0)+a_8*t74960*t74880*t74961*t74881*t74959*t74889*(1.4E3/9.0)+ \
               a_9*t74960*t74961*t74882*t74883*t74878*t74959*2.5E2+a_11*t74960*t74880*t74961*t74882*1.0/pow(t74877,1.3E1) \
               *t74878*t74959*(1.1E3/3.0)-C_k*a_11*t74844*t74880*t74882*t74963*t74787*t74878*(1.1E2/9.0)-C_k*a_7* \
               t74844*t74880*t74881*t74787*t74878*t74889*(7.0E1/9.0)+C_k*a_8*t74844*t74880*t74881*t74787*t74878*t74889* \
               (8.0E1/9.0)+a_7*t74960*t74880*t74961*t74881*t74890*t74878*t74959*(1.4E3/9.0)-a_8*t74960*t74880*t74961* \
               t74881*t74890*t74878*t74959*(3.2E3/9.0)+a_9*t74960*t74880*t74961*t74881*t74890*t74878*t74959*2.0E2) \
               -rho_a[index]*t74851*t74948*(-t74823+t74943+t74965)*2.0+rho_a[index]*t74851*t74919*(-t74932-t74941+ \
               t74835*t74838*(t74932+t74941-t74815*t74816*t74817*t74938-t74920*t74841*t74929*1.0/(t74797*t74797*t74797) \
               *2.0+t74920*t74841*t74926*(b2f*c*t74927*(4.0/9.0)+b4f*t74830*t74793*(1.0E1/9.0)+b1f*c*t74805*t74927* \
               (2.0/9.0)+b3f*c*t74927*t74789*(2.0/3.0)-b1f*t74830*t74793*t74928*(1.0/3.6E1)+b3f*t74830*t74805*t74793* \
               (1.0/1.2E1))+t74841*t74806*1.0/(t74809*t74809)*t74929*1.0/(t74797*t74797*t74797*t74797)*(1.0/2.0)- \
               a1f*c*c0f*t74927*t74839*(8.0/9.0)-t74810*t74930*t74940*t74815*t74939*(1.0/2.0)+a1f*c*t74920*t74925* \
               t74926*t74798*(2.0/3.0)-a1p*c*t74822*t74816*t74817*t74798*(2.0/3.0))+t74815*t74816*t74817*t74938+t74810* \
               t74930*t74940*t74815*t74939*(1.0/2.0)+a1p*c*t74822*t74816*t74817*t74798*(2.0/3.0))+kp*t74980*t74990* \
               t74966*t74949*2.0+gamma_aa[index]*t74843*t74844*t74846*t74983*t74948*(1.0/4.0)+kp*rho_a[index]*t74990* \
               t74966*t74949*t75002*2.0+gamma_aa[index]*t74843*t74844*t74846*t74919*(-t74823+t74943+t74965)*(1.0/ \
               4.0)-kp*rho_a[index]*t74980*t74966*t74949*(gamma_aa[index]*mu_*t74950*t74951*t74967*t74968*(4.0/3.0) \
               +gamma_aa[index]*mu_*1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index])*t74950*t74951*t74954* \
               (3.0/2.0)+gamma_aa[index]*mu_*t74950*t74951*t74952*1.0/pow(t74953,8.0/3.0)*(1.0E1/9.0))+kp*rho_a[index]* \
               t74980*(t74990*t74990)*1.0/(t74956*t74956*t74956)*t74949*2.0;
        } else if (rho_b[index] > cutoff_) {
            v_rho_a_rho_a_[index] = 0.0;
        } else {
            v_rho_a_rho_a_[index] = 0.0;
        } 

        //V_rho_a_rho_b
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t70476 = rho_a[index]+rho_b[index];
            double t70477 = 1.0/pow(t70476,1.0/3.0);
            double t70478 = c*t70477;
            double t70479 = sqrt(t70478);
            double t70480 = b1p*t70479;
            double t70481 = pow(t70478,3.0/2.0);
            double t70482 = b3p*t70481;
            double t70483 = c*c;
            double t70484 = 1.0/pow(t70476,2.0/3.0);
            double t70485 = b4p*t70483*t70484;
            double t70486 = b2p*c*t70477;
            double t70487 = t70480+t70482+t70485+t70486;
            double t70488 = 1.0/pow(t70476,4.0/3.0);
            double t70489 = 1.0/c0p;
            double t70490 = 1.0/t70487;
            double t70491 = t70490*t70489*(1.0/2.0);
            double t70492 = t70491+1.0;
            double t70493 = a1p*c*t70477;
            double t70494 = t70493+1.0;
            double t70495 = rho_a[index]-rho_b[index];
            double t70496 = t70495*t70495;
            double t70497 = 1.0/t70476;
            double t70498 = t70495*t70497;
            double t70499 = two_13*2.0;
            double t70500 = t70499-2.0;
            double t70501 = 1.0/t70500;
            double t70502 = 1.0/c0f;
            double t70503 = b1f*t70479;
            double t70504 = b3f*t70481;
            double t70505 = b4f*t70483*t70484;
            double t70506 = b2f*c*t70477;
            double t70507 = t70503+t70504+t70505+t70506;
            double t70508 = 1.0/t70507;
            double t70509 = t70502*t70508*(1.0/2.0);
            double t70510 = t70509+1.0;
            double t70511 = log(t70510);
            double t70512 = a1f*c*t70477;
            double t70513 = t70512+1.0;
            double t70514 = log(t70492);
            double t70524 = c0f*t70511*t70513*2.0;
            double t70525 = c0p*t70514*t70494*2.0;
            double t70515 = t70524-t70525;
            double t70516 = t70498+1.0;
            double t70517 = pow(t70516,4.0/3.0);
            double t70518 = -t70498+1.0;
            double t70519 = pow(t70518,4.0/3.0);
            double t70520 = t70517+t70519-2.0;
            double t70521 = 1.0/(t70476*t70476);
            double t70552 = t70521*t70495;
            double t70522 = -t70552+t70497;
            double t70523 = 1.0/(t70476*t70476*t70476*t70476);
            double t70526 = t70496*t70496;
            double t70527 = 1.0/pow(t70476,5.0/3.0);
            double t70528 = 1.0/sqrt(t70478);
            double t70529 = 1.0/t70492;
            double t70530 = 1.0/(t70487*t70487);
            double t70531 = b4p*t70527*t70483*(2.0/3.0);
            double t70532 = b2p*c*t70488*(1.0/3.0);
            double t70533 = b1p*c*t70528*t70488*(1.0/6.0);
            double t70534 = b3p*c*t70479*t70488*(1.0/2.0);
            double t70535 = t70531+t70532+t70533+t70534;
            double t70536 = t70530*t70535*t70529*t70494;
            double t70537 = 1.0/(t70476*t70476*t70476*t70476*t70476);
            double t70538 = 1.0/d2fz0;
            double t70539 = 1.0/Aa;
            double t70540 = b1a*t70479;
            double t70541 = b3a*t70481;
            double t70542 = b4a*t70483*t70484;
            double t70543 = b2a*c*t70477;
            double t70544 = t70540+t70541+t70542+t70543;
            double t70545 = 1.0/t70544;
            double t70546 = t70545*t70539*(1.0/2.0);
            double t70547 = t70546+1.0;
            double t70548 = log(t70547);
            double t70549 = a1a*c*t70477;
            double t70550 = t70549+1.0;
            double t70551 = pow(t70516,1.0/3.0);
            double t70553 = t70522*t70551*(4.0/3.0);
            double t70554 = pow(t70518,1.0/3.0);
            double t70698 = t70522*t70554*(4.0/3.0);
            double t70555 = t70553-t70698;
            double t70556 = t70523*t70526;
            double t70557 = t70556-1.0;
            double t70558 = 1.0/pow(rho_a[index],1.0/3.0);
            double t70559 = c*t70558;
            double t70560 = sqrt(t70559);
            double t70561 = b1f*t70560;
            double t70562 = pow(t70559,3.0/2.0);
            double t70563 = b3f*t70562;
            double t70564 = 1.0/pow(rho_a[index],2.0/3.0);
            double t70565 = b4f*t70483*t70564;
            double t70566 = b2f*c*t70558;
            double t70567 = t70561+t70563+t70565+t70566;
            double t70568 = 1.0/pow(rho_a[index],4.0/3.0);
            double t70569 = b1p*t70560;
            double t70570 = b3p*t70562;
            double t70571 = b4p*t70483*t70564;
            double t70572 = b2p*c*t70558;
            double t70573 = t70570+t70571+t70572+t70569;
            double t70574 = 1.0/pow(rho_a[index],5.0/3.0);
            double t70575 = 1.0/sqrt(t70559);
            double t70576 = 1.0/t70567;
            double t70577 = t70502*t70576*(1.0/2.0);
            double t70578 = t70577+1.0;
            double t70579 = 1.0/t70573;
            double t70580 = t70489*t70579*(1.0/2.0);
            double t70581 = t70580+1.0;
            double t70582 = a1p*c*t70558;
            double t70583 = t70582+1.0;
            double t70584 = 1.0/t70581;
            double t70585 = 1.0/(t70573*t70573);
            double t70586 = b4p*t70483*t70574*(2.0/3.0);
            double t70587 = b2p*c*t70568*(1.0/3.0);
            double t70588 = b1p*c*t70575*t70568*(1.0/6.0);
            double t70589 = b3p*c*t70560*t70568*(1.0/2.0);
            double t70590 = t70586+t70587+t70588+t70589;
            double t70591 = t70590*t70583*t70584*t70585;
            double t70592 = log(t70581);
            double t70593 = pow(2.0,1.0/3.0);
            double t70594 = t70593*2.0;
            double t70595 = t70594-2.0;
            double t70596 = log(t70578);
            double t70597 = a1f*c*t70558;
            double t70598 = t70597+1.0;
            double t70599 = gcab*gcab;
            double t70603 = 1.0/pow(rho_a[index],8.0/3.0);
            double t70604 = gamma_aa[index]*t70603*(1.0/2.0);
            double t70605 = 1.0/pow(rho_b[index],8.0/3.0);
            double t70606 = gamma_bb[index]*t70605*(1.0/2.0);
            double t70600 = t70604+t70606;
            double t70601 = t70600*t70600;
            double t70602 = 1.0/pow(rho_b[index],1.1E1/3.0);
            double t70607 = t70599*t70599;
            double t70608 = t70601*t70601;
            double t70609 = t70601*t70599*6.0;
            double t70610 = gcab*t70600*t70601*t70599*4.0;
            double t70611 = t70607*t70608;
            double t70612 = gcab*t70600*4.0;
            double t70613 = t70610+t70611+t70612+t70609+1.0;
            double t70614 = gcab*t70600;
            double t70615 = t70614+1.0;
            double t70616 = t70601*t70599;
            double t70617 = gcab*t70600*2.0;
            double t70618 = t70616+t70617+1.0;
            double t70619 = t70601*t70599*3.0;
            double t70620 = gcab*t70600*t70601*t70599;
            double t70621 = gcab*t70600*3.0;
            double t70622 = t70620+t70621+t70619+1.0;
            double t70623 = t70501*t70520*t70523*t70515*t70495*t70496*4.0;
            double t70624 = t70552+t70497;
            double t70625 = 1.0/t70510;
            double t70626 = 1.0/(t70507*t70507);
            double t70627 = b4f*t70527*t70483*(2.0/3.0);
            double t70628 = b2f*c*t70488*(1.0/3.0);
            double t70629 = b1f*c*t70528*t70488*(1.0/6.0);
            double t70630 = b3f*c*t70479*t70488*(1.0/2.0);
            double t70631 = t70630+t70627+t70628+t70629;
            double t70632 = a1f*c*c0f*t70511*t70488*(2.0/3.0);
            double t70633 = t70526*t70537*4.0;
            double t70634 = t70551*t70624*(4.0/3.0);
            double t70697 = t70624*t70554*(4.0/3.0);
            double t70635 = t70634-t70697;
            double t70636 = 1.0/t70547;
            double t70637 = 1.0/(t70544*t70544);
            double t70638 = b4a*t70527*t70483*(2.0/3.0);
            double t70639 = b2a*c*t70488*(1.0/3.0);
            double t70640 = b1a*c*t70528*t70488*(1.0/6.0);
            double t70641 = b3a*c*t70479*t70488*(1.0/2.0);
            double t70642 = t70640+t70641+t70638+t70639;
            double t70643 = t70501*t70520*t70550*t70642*t70636*t70538*t70637*t70557;
            double t70644 = 1.0/pow(rho_b[index],1.0/3.0);
            double t70645 = c*t70644;
            double t70646 = sqrt(t70645);
            double t70647 = b1f*t70646;
            double t70648 = pow(t70645,3.0/2.0);
            double t70649 = b3f*t70648;
            double t70650 = 1.0/pow(rho_b[index],2.0/3.0);
            double t70651 = b4f*t70650*t70483;
            double t70652 = b2f*c*t70644;
            double t70653 = t70651+t70652+t70647+t70649;
            double t70654 = 1.0/pow(rho_b[index],4.0/3.0);
            double t70655 = b1p*t70646;
            double t70656 = b3p*t70648;
            double t70657 = b4p*t70650*t70483;
            double t70658 = b2p*c*t70644;
            double t70659 = t70655+t70656+t70657+t70658;
            double t70660 = 1.0/pow(rho_b[index],5.0/3.0);
            double t70661 = 1.0/sqrt(t70645);
            double t70662 = 1.0/t70653;
            double t70663 = t70502*t70662*(1.0/2.0);
            double t70664 = t70663+1.0;
            double t70665 = 1.0/t70659;
            double t70666 = t70665*t70489*(1.0/2.0);
            double t70667 = t70666+1.0;
            double t70668 = a1p*c*t70644;
            double t70669 = t70668+1.0;
            double t70670 = 1.0/t70667;
            double t70671 = 1.0/(t70659*t70659);
            double t70672 = b4p*t70660*t70483*(2.0/3.0);
            double t70673 = b2p*c*t70654*(1.0/3.0);
            double t70674 = b1p*c*t70661*t70654*(1.0/6.0);
            double t70675 = b3p*c*t70654*t70646*(1.0/2.0);
            double t70676 = t70672+t70673+t70674+t70675;
            double t70677 = t70670*t70671*t70676*t70669;
            double t70678 = log(t70667);
            double t70679 = log(t70664);
            double t70680 = a1f*c*t70644;
            double t70681 = t70680+1.0;
            double t70682 = t70501*t70520*t70523*t70515*t70526;
            double t70683 = Aa*t70501*t70520*t70550*t70538*t70548*t70557*2.0;
            double t70684 = 1.0/pow(rho_a[index],1.1E1/3.0);
            double t70685 = 1.0/(t70622*t70622);
            double t70686 = 1.0/t70615;
            double t70687 = 1.0/(t70613*t70613);
            double t70688 = 1.0/(t70618*t70618);
            double t70689 = 1.0/t70613;
            double t70690 = 1.0/(t70615*t70615);
            double t70691 = 1.0/t70618;
            double t70692 = 1.0/t70622;
            double t70694 = a1p*c*c0p*t70514*t70488*(2.0/3.0);
            double t70699 = t70513*t70631*t70625*t70626;
            double t70693 = t70632+t70536-t70694-t70699;
            double t70695 = 1.0/pow(t70476,7.0/3.0);
            double t70696 = 1.0/pow(t70476,8.0/3.0);
            double t70700 = t70535*t70535;
            double t70701 = 1.0/pow(t70478,3.0/2.0);
            double t70702 = b4p*t70483*t70696*(1.0E1/9.0);
            double t70703 = b2p*c*t70695*(4.0/9.0);
            double t70704 = b1p*c*t70528*t70695*(2.0/9.0);
            double t70705 = b3p*c*t70479*t70695*(2.0/3.0);
            double t70706 = b3p*t70483*t70528*t70696*(1.0/1.2E1);
            double t70707 = t70702+t70703+t70704+t70705+t70706-b1p*t70701*t70483*t70696*(1.0/3.6E1);
            double t70708 = t70530*t70707*t70529*t70494;
            double t70709 = 1.0/(t70487*t70487*t70487);
            double t70710 = t70631*t70631;
            double t70711 = 1.0/(t70492*t70492);
            double t70712 = 1.0/(t70487*t70487*t70487*t70487);
            double t70713 = t70700*t70711*t70712*t70494*t70489*(1.0/2.0);
            double t70714 = 1.0/(t70476*t70476*t70476);
            double t70715 = a1p*c*t70530*t70535*t70529*t70488*(2.0/3.0);
            double t70716 = 1.0/(t70476*t70476*t70476*t70476*t70476*t70476);
            double t70717 = t70523*t70495*t70496*4.0;
            double t70718 = t70633+t70717;
            double t70719 = t70714*t70554*t70495*(8.0/3.0);
            double t70720 = 1.0/pow(t70516,2.0/3.0);
            double t70721 = t70522*t70720*t70624*(4.0/9.0);
            double t70722 = 1.0/pow(t70518,2.0/3.0);
            double t70723 = t70522*t70722*t70624*(4.0/9.0);
            double t70724 = t70721+t70723+t70719-t70551*t70714*t70495*(8.0/3.0);
            double t70725 = t70642*t70642;
            double t70726 = t70633-t70717;
            double t70727 = t70501*t70523*t70515*t70526*t70635;
            double t70728 = t70501*t70523*t70515*t70526*t70555;
            double t70729 = Aa*t70501*t70520*t70550*t70538*t70718*t70548*2.0;
            double t70730 = Aa*t70501*t70550*t70635*t70538*t70548*t70557*2.0;
            double t70731 = Aa*t70501*t70550*t70555*t70538*t70548*t70557*2.0;
            double t70732 = c0f*t70596*t70598*2.0;
            double t70734 = c0p*t70583*t70592*2.0;
            double t70733 = t70732-t70734;
            double t70735 = c0f*t70681*t70679*2.0;
            double t70737 = c0p*t70669*t70678*2.0;
            double t70736 = t70735-t70737;
            double t70738 = gamma_aa[index]*gcab*t70684*(8.0/3.0);
            double t70739 = gamma_aa[index]*t70600*t70684*t70599*(8.0/3.0);
            double t70740 = t70738+t70739;
            double t70741 = gamma_bb[index]*gcab*t70602*(8.0/3.0);
            double t70742 = gamma_bb[index]*t70600*t70602*t70599*(8.0/3.0);
            double t70743 = t70741+t70742;
            double t70744 = gamma_aa[index]*gcab*t70684*(1.6E1/3.0);
            double t70745 = gamma_aa[index]*gcab*t70601*t70684*t70599*1.6E1;
            double t70746 = gamma_aa[index]*t70600*t70601*t70607*t70684*(1.6E1/3.0);
            double t70747 = gamma_aa[index]*t70600*t70684*t70599*1.6E1;
            double t70748 = t70744+t70745+t70746+t70747;
            double t70749 = gamma_bb[index]*gcab*t70602*(1.6E1/3.0);
            double t70750 = gamma_bb[index]*gcab*t70601*t70602*t70599*1.6E1;
            double t70751 = gamma_bb[index]*t70600*t70601*t70602*t70607*(1.6E1/3.0);
            double t70752 = gamma_bb[index]*t70600*t70602*t70599*1.6E1;
            double t70753 = t70750+t70751+t70752+t70749;
            double t70754 = gamma_aa[index]*gcab*t70684*4.0;
            double t70755 = gamma_aa[index]*gcab*t70601*t70684*t70599*4.0;
            double t70756 = gamma_aa[index]*t70600*t70684*t70599*8.0;
            double t70757 = t70754+t70755+t70756;
            double t70758 = gamma_bb[index]*gcab*t70602*4.0;
            double t70759 = gamma_bb[index]*gcab*t70601*t70602*t70599*4.0;
            double t70760 = gamma_bb[index]*t70600*t70602*t70599*8.0;
            double t70761 = t70760+t70758+t70759;
            v_rho_a_rho_b_[index] = (t70525+t70682+t70683+rho_a[index]*(-t70591+t70501*t70595*(t70591-(1.0/(t70567* \
               t70567)*t70598*(b2f*c*t70568*(1.0/3.0)+b4f*t70483*t70574*(2.0/3.0)+b1f*c*t70575*t70568*(1.0/6.0)+b3f* \
               c*t70560*t70568*(1.0/2.0)))/t70578+a1f*c*c0f*t70568*t70596*(2.0/3.0)-a1p*c*c0p*t70592*t70568*(2.0/ \
               3.0))+a1p*c*c0p*t70592*t70568*(2.0/3.0))+t70476*(t70623+t70731+t70643+t70536+t70728-a1p*c*c0p*t70514* \
               t70488*(2.0/3.0)-t70501*t70520*t70515*t70526*t70537*4.0-t70501*t70520*t70523*t70526*t70693-Aa*t70501* \
               t70520*t70550*t70538*t70548*(t70633-t70523*t70495*t70496*4.0)*2.0-Aa*a1a*c*t70501*t70520*t70538*t70548* \
               t70557*t70488*(2.0/3.0))-c0p*t70583*t70592*2.0-t70501*t70733*t70595)*(ccab1*gamma_bb[index]*gcab*t70602* \
               t70686*(4.0/3.0)-ccab4*t70607*t70608*t70753*t70687-ccab2*t70601*t70743*t70688*t70599-ccab1*gamma_bb[index]* \
               t70600*t70602*t70690*t70599*(4.0/3.0)+ccab2*gamma_bb[index]*t70600*t70602*t70691*t70599*(8.0/3.0)+ \
               ccab3*gamma_bb[index]*gcab*t70601*t70602*t70692*t70599*4.0+ccab4*gamma_bb[index]*t70600*t70601*t70602* \
               t70607*t70689*(1.6E1/3.0)-ccab3*gcab*t70600*t70601*t70761*t70685*t70599)+(ccab0+ccab1*gcab*t70600* \
               t70686+ccab2*t70601*t70691*t70599+ccab4*t70607*t70608*t70689+ccab3*gcab*t70600*t70601*t70692*t70599) \
               *(t70730-t70731+t70727-t70728+t70729+t70476*(t70713+t70715+t70708-t70700*t70529*t70709*t70494*2.0+ \
               t70501*t70523*t70526*t70555*(t70632+t70536-t70694-t70699)-a1p*c*c0p*t70514*t70695*(8.0/9.0)-t70501* \
               t70520*t70523*t70526*(t70713+t70715+t70708-t70700*t70529*t70709*t70494*2.0+t70710*t70513*1.0/(t70507* \
               t70507*t70507)*t70625*2.0-t70513*t70625*t70626*(b2f*c*t70695*(4.0/9.0)+b4f*t70483*t70696*(1.0E1/9.0) \
               +b1f*c*t70528*t70695*(2.0/9.0)+b3f*c*t70479*t70695*(2.0/3.0)-b1f*t70701*t70483*t70696*(1.0/3.6E1)+ \
               b3f*t70483*t70528*t70696*(1.0/1.2E1))-1.0/(t70510*t70510)*t70502*t70710*t70513*1.0/(t70507*t70507* \
               t70507*t70507)*(1.0/2.0)+a1f*c*c0f*t70511*t70695*(8.0/9.0)-a1p*c*c0p*t70514*t70695*(8.0/9.0)-a1f*c* \
               t70631*t70625*t70626*t70488*(2.0/3.0))-t70501*t70520*t70515*t70526*t70716*2.0E1+t70501*t70520*t70523* \
               t70515*t70496*1.2E1+t70501*t70523*t70515*t70526*t70724-t70501*t70520*t70526*t70537*t70693*8.0-t70501* \
               t70515*t70526*t70635*t70537*4.0+t70501*t70515*t70526*t70537*t70555*4.0-t70501*t70523*t70526*t70635* \
               t70693+t70501*t70523*t70515*t70635*t70495*t70496*4.0+t70501*t70523*t70515*t70555*t70495*t70496*4.0- \
               Aa*t70501*t70550*t70635*t70726*t70538*t70548*2.0+Aa*t70501*t70550*t70724*t70538*t70548*t70557*2.0+ \
               Aa*t70501*t70550*t70555*t70538*t70718*t70548*2.0-Aa*t70501*t70520*t70550*t70538*t70548*(t70526*t70716* \
               2.0E1-t70523*t70496*1.2E1)*2.0+t70501*t70520*t70550*t70642*t70636*t70726*t70538*t70637+t70501*t70520* \
               t70550*t70642*t70636*t70538*t70637*t70718+t70501*t70550*t70642*t70635*t70636*t70538*t70637*t70557- \
               t70501*t70550*t70642*t70555*t70636*t70538*t70637*t70557-t70501*t70520*t70550*1.0/(t70544*t70544*t70544) \
               *t70725*t70636*t70538*t70557*2.0+t70501*t70520*t70550*t70636*t70538*t70637*t70557*(b2a*c*t70695*(4.0/ \
               9.0)+b4a*t70483*t70696*(1.0E1/9.0)+b1a*c*t70528*t70695*(2.0/9.0)+b3a*c*t70479*t70695*(2.0/3.0)-b1a* \
               t70701*t70483*t70696*(1.0/3.6E1)+b3a*t70483*t70528*t70696*(1.0/1.2E1))-Aa*a1a*c*t70501*t70520*t70726* \
               t70538*t70548*t70488*(2.0/3.0)-Aa*a1a*c*t70501*t70520*t70538*t70718*t70548*t70488*(2.0/3.0)-Aa*a1a* \
               c*t70501*t70520*t70538*t70548*t70557*t70695*(8.0/9.0)-Aa*a1a*c*t70501*t70635*t70538*t70548*t70557* \
               t70488*(2.0/3.0)+Aa*a1a*c*t70501*t70555*t70538*t70548*t70557*t70488*(2.0/3.0)+t70501*t70520*t70550* \
               1.0/(t70544*t70544*t70544*t70544)*t70725*t70538*1.0/(t70547*t70547)*t70539*t70557*(1.0/2.0)+a1a*c* \
               t70501*t70520*t70642*t70636*t70538*t70637*t70557*t70488*(2.0/3.0))-t70530*t70535*t70529*t70494*2.0+ \
               t70501*t70520*t70523*t70526*(t70632+t70536-t70694-t70699)*2.0+a1p*c*c0p*t70514*t70488*(4.0/3.0)+t70501* \
               t70520*t70515*t70526*t70537*8.0+Aa*t70501*t70520*t70550*t70538*t70548*(t70633-t70717)*2.0-t70501*t70520* \
               t70550*t70642*t70636*t70538*t70637*t70557*2.0+Aa*a1a*c*t70501*t70520*t70538*t70548*t70557*t70488*(4.0/ \
               3.0))-(rho_a[index]*(t70734+t70501*t70733*t70595)+rho_b[index]*(t70737+t70501*t70736*t70595)-t70476* \
               (t70525+t70682+t70683))*(ccab4*t70607*t70608*t70687*(gamma_aa[index]*gamma_bb[index]*t70602*t70684* \
               t70599*(6.4E1/3.0)+gamma_aa[index]*gamma_bb[index]*t70601*t70602*t70607*t70684*(6.4E1/3.0)+gamma_aa[index]* \
               gamma_bb[index]*gcab*t70600*t70602*t70684*t70599*(1.28E2/3.0))-ccab2*t70601*t70740*t70743*1.0/(t70618* \
               t70618*t70618)*t70599*2.0-ccab4*1.0/(t70613*t70613*t70613)*t70607*t70608*t70753*t70748*2.0+ccab3*gcab* \
               t70600*t70601*t70685*t70599*(gamma_aa[index]*gamma_bb[index]*t70602*t70684*t70599*(3.2E1/3.0)+gamma_aa[index]* \
               gamma_bb[index]*gcab*t70600*t70602*t70684*t70599*(3.2E1/3.0))+ccab1*gamma_aa[index]*gamma_bb[index]* \
               t70602*t70690*t70684*t70599*(3.2E1/9.0)-ccab2*gamma_aa[index]*gamma_bb[index]*t70602*t70691*t70684* \
               t70599*(3.2E1/9.0)+ccab2*gamma_bb[index]*t70600*t70602*t70740*t70688*t70599*(8.0/3.0)+ccab2*gamma_aa[index]* \
               t70600*t70743*t70684*t70688*t70599*(8.0/3.0)-ccab3*gcab*t70600*t70601*1.0/(t70622*t70622*t70622)*t70761* \
               t70757*t70599*2.0+ccab2*gamma_aa[index]*gamma_bb[index]*t70601*t70602*t70607*t70684*t70688*(3.2E1/ \
               9.0)-ccab4*gamma_aa[index]*gamma_bb[index]*t70601*t70602*t70607*t70684*t70689*(6.4E1/3.0)+ccab3*gamma_bb[index]* \
               gcab*t70601*t70602*t70685*t70757*t70599*4.0+ccab3*gamma_aa[index]*gcab*t70601*t70761*t70684*t70685* \
               t70599*4.0+ccab4*gamma_bb[index]*t70600*t70601*t70602*t70607*t70748*t70687*(1.6E1/3.0)+ccab4*gamma_aa[index]* \
               t70600*t70601*t70607*t70753*t70684*t70687*(1.6E1/3.0)-ccab3*gamma_aa[index]*gamma_bb[index]*gcab*t70600* \
               t70602*t70692*t70684*t70599*(3.2E1/3.0)-ccab1*gamma_aa[index]*gamma_bb[index]*gcab*t70600*t70602*1.0/ \
               (t70615*t70615*t70615)*t70684*t70599*(3.2E1/9.0))+(t70525+t70682+t70683-t70476*(t70730+t70623-t70643- \
               t70536+t70727+t70729+t70694+t70501*t70520*t70515*t70526*t70537*4.0+t70501*t70520*t70523*t70526*t70693+ \
               Aa*a1a*c*t70501*t70520*t70538*t70548*t70557*t70488*(2.0/3.0))+rho_b[index]*(-t70677+t70501*t70595* \
               (t70677-(1.0/(t70653*t70653)*t70681*(b2f*c*t70654*(1.0/3.0)+b4f*t70660*t70483*(2.0/3.0)+b1f*c*t70661* \
               t70654*(1.0/6.0)+b3f*c*t70654*t70646*(1.0/2.0)))/t70664+a1f*c*c0f*t70654*t70679*(2.0/3.0)-a1p*c*c0p* \
               t70654*t70678*(2.0/3.0))+a1p*c*c0p*t70654*t70678*(2.0/3.0))-c0p*t70669*t70678*2.0-t70501*t70736*t70595) \
               *(ccab1*gamma_aa[index]*gcab*t70684*t70686*(4.0/3.0)-ccab2*t70601*t70740*t70688*t70599-ccab4*t70607* \
               t70608*t70748*t70687-ccab1*gamma_aa[index]*t70600*t70690*t70684*t70599*(4.0/3.0)+ccab2*gamma_aa[index]* \
               t70600*t70691*t70684*t70599*(8.0/3.0)+ccab3*gamma_aa[index]*gcab*t70601*t70692*t70684*t70599*4.0+ccab4* \
               gamma_aa[index]*t70600*t70601*t70607*t70684*t70689*(1.6E1/3.0)-ccab3*gcab*t70600*t70601*t70685*t70757* \
               t70599);
        } else if (rho_a[index] > cutoff_) {
            v_rho_a_rho_b_[index] = 0.0;
        } else if (rho_b[index] > cutoff_) {
            v_rho_a_rho_b_[index] = 0.0;
        } else {
            v_rho_a_rho_b_[index] = 0.0;
        } 

        //V_rho_b_rho_b
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t70763 = rho_a[index]+rho_b[index];
            double t70764 = 1.0/pow(t70763,1.0/3.0);
            double t70765 = c*t70764;
            double t70766 = sqrt(t70765);
            double t70767 = b1p*t70766;
            double t70768 = pow(t70765,3.0/2.0);
            double t70769 = b3p*t70768;
            double t70770 = c*c;
            double t70771 = 1.0/pow(t70763,2.0/3.0);
            double t70772 = b4p*t70770*t70771;
            double t70773 = b2p*c*t70764;
            double t70774 = t70772+t70773+t70767+t70769;
            double t70775 = 1.0/pow(t70763,4.0/3.0);
            double t70776 = 1.0/c0p;
            double t70777 = 1.0/t70774;
            double t70778 = t70776*t70777*(1.0/2.0);
            double t70779 = t70778+1.0;
            double t70780 = a1p*c*t70764;
            double t70781 = t70780+1.0;
            double t70782 = rho_a[index]-rho_b[index];
            double t70783 = t70782*t70782;
            double t70784 = 1.0/t70763;
            double t70785 = t70782*t70784;
            double t70786 = two_13*2.0;
            double t70787 = t70786-2.0;
            double t70788 = 1.0/t70787;
            double t70789 = 1.0/c0f;
            double t70790 = b1f*t70766;
            double t70791 = b3f*t70768;
            double t70792 = b4f*t70770*t70771;
            double t70793 = b2f*c*t70764;
            double t70794 = t70790+t70791+t70792+t70793;
            double t70795 = 1.0/t70794;
            double t70796 = t70795*t70789*(1.0/2.0);
            double t70797 = t70796+1.0;
            double t70798 = log(t70797);
            double t70799 = a1f*c*t70764;
            double t70800 = t70799+1.0;
            double t70801 = log(t70779);
            double t70812 = c0f*t70800*t70798*2.0;
            double t70813 = c0p*t70801*t70781*2.0;
            double t70802 = t70812-t70813;
            double t70803 = t70785+1.0;
            double t70804 = pow(t70803,4.0/3.0);
            double t70805 = -t70785+1.0;
            double t70806 = pow(t70805,4.0/3.0);
            double t70807 = t70804+t70806-2.0;
            double t70808 = 1.0/(t70763*t70763);
            double t70809 = t70808*t70782;
            double t70810 = t70809+t70784;
            double t70811 = 1.0/(t70763*t70763*t70763*t70763);
            double t70814 = t70783*t70783;
            double t70815 = 1.0/pow(t70763,5.0/3.0);
            double t70816 = 1.0/sqrt(t70765);
            double t70817 = 1.0/t70779;
            double t70818 = 1.0/(t70774*t70774);
            double t70819 = b4p*t70770*t70815*(2.0/3.0);
            double t70820 = b2p*c*t70775*(1.0/3.0);
            double t70821 = b1p*c*t70816*t70775*(1.0/6.0);
            double t70822 = b3p*c*t70766*t70775*(1.0/2.0);
            double t70823 = t70820+t70821+t70822+t70819;
            double t70824 = 1.0/(t70763*t70763*t70763*t70763*t70763);
            double t70825 = 1.0/d2fz0;
            double t70826 = 1.0/Aa;
            double t70827 = b1a*t70766;
            double t70828 = b3a*t70768;
            double t70829 = b4a*t70770*t70771;
            double t70830 = b2a*c*t70764;
            double t70831 = t70830+t70827+t70828+t70829;
            double t70832 = 1.0/t70831;
            double t70833 = t70832*t70826*(1.0/2.0);
            double t70834 = t70833+1.0;
            double t70835 = log(t70834);
            double t70836 = a1a*c*t70764;
            double t70837 = t70836+1.0;
            double t70838 = pow(t70803,1.0/3.0);
            double t70839 = t70810*t70838*(4.0/3.0);
            double t70840 = pow(t70805,1.0/3.0);
            double t70916 = t70810*t70840*(4.0/3.0);
            double t70841 = -t70916+t70839;
            double t70842 = t70811*t70814;
            double t70843 = t70842-1.0;
            double t70844 = 1.0/pow(rho_b[index],1.0/3.0);
            double t70845 = c*t70844;
            double t70846 = sqrt(t70845);
            double t70847 = b1f*t70846;
            double t70848 = pow(t70845,3.0/2.0);
            double t70849 = b3f*t70848;
            double t70850 = 1.0/pow(rho_b[index],2.0/3.0);
            double t70851 = b4f*t70850*t70770;
            double t70852 = b2f*c*t70844;
            double t70853 = t70851+t70852+t70847+t70849;
            double t70854 = 1.0/pow(rho_b[index],4.0/3.0);
            double t70855 = b1p*t70846;
            double t70856 = b3p*t70848;
            double t70857 = b4p*t70850*t70770;
            double t70858 = b2p*c*t70844;
            double t70859 = t70855+t70856+t70857+t70858;
            double t70860 = 1.0/pow(rho_b[index],5.0/3.0);
            double t70861 = 1.0/sqrt(t70845);
            double t70862 = 1.0/t70853;
            double t70863 = t70862*t70789*(1.0/2.0);
            double t70864 = t70863+1.0;
            double t70865 = 1.0/t70859;
            double t70866 = t70865*t70776*(1.0/2.0);
            double t70867 = t70866+1.0;
            double t70868 = a1p*c*t70844;
            double t70869 = t70868+1.0;
            double t70870 = 1.0/t70867;
            double t70871 = 1.0/(t70859*t70859);
            double t70872 = b4p*t70770*t70860*(2.0/3.0);
            double t70873 = b2p*c*t70854*(1.0/3.0);
            double t70874 = b1p*c*t70861*t70854*(1.0/6.0);
            double t70875 = b3p*c*t70854*t70846*(1.0/2.0);
            double t70876 = t70872+t70873+t70874+t70875;
            double t70877 = t70870*t70871*t70876*t70869;
            double t70878 = log(t70867);
            double t70879 = pow(2.0,1.0/3.0);
            double t70880 = t70879*2.0;
            double t70881 = t70880-2.0;
            double t70882 = log(t70864);
            double t70883 = a1f*c*t70844;
            double t70884 = t70883+1.0;
            double t70885 = gcab*gcab;
            double t70889 = 1.0/pow(rho_a[index],8.0/3.0);
            double t70890 = gamma_aa[index]*t70889*(1.0/2.0);
            double t70891 = 1.0/pow(rho_b[index],8.0/3.0);
            double t70892 = gamma_bb[index]*t70891*(1.0/2.0);
            double t70886 = t70890+t70892;
            double t70887 = t70886*t70886;
            double t70888 = 1.0/pow(rho_b[index],1.1E1/3.0);
            double t70893 = t70885*t70885;
            double t70894 = t70887*t70887;
            double t70895 = t70885*t70887*6.0;
            double t70896 = gcab*t70885*t70886*t70887*4.0;
            double t70897 = t70893*t70894;
            double t70898 = gcab*t70886*4.0;
            double t70899 = t70895+t70896+t70897+t70898+1.0;
            double t70900 = gcab*t70886;
            double t70901 = t70900+1.0;
            double t70902 = t70885*t70887;
            double t70903 = gcab*t70886*2.0;
            double t70904 = t70902+t70903+1.0;
            double t70905 = t70885*t70887*3.0;
            double t70906 = gcab*t70885*t70886*t70887;
            double t70907 = gcab*t70886*3.0;
            double t70908 = t70905+t70906+t70907+1.0;
            double t70909 = a1p*c*c0p*t70801*t70775*(2.0/3.0);
            double t70910 = 1.0/t70904;
            double t70911 = 1.0/t70908;
            double t70912 = 1.0/t70901;
            double t70913 = 1.0/t70899;
            double t70914 = 1.0/pow(t70763,7.0/3.0);
            double t70915 = 1.0/pow(t70763,8.0/3.0);
            double t70917 = 1.0/t70797;
            double t70918 = 1.0/(t70794*t70794);
            double t70919 = b4f*t70770*t70815*(2.0/3.0);
            double t70920 = b2f*c*t70775*(1.0/3.0);
            double t70921 = b1f*c*t70816*t70775*(1.0/6.0);
            double t70922 = b3f*c*t70766*t70775*(1.0/2.0);
            double t70923 = t70920+t70921+t70922+t70919;
            double t70924 = t70800*t70923*t70917*t70918;
            double t70926 = t70823*t70781*t70817*t70818;
            double t70927 = a1f*c*c0f*t70775*t70798*(2.0/3.0);
            double t70925 = t70924-t70926+t70909-t70927;
            double t70928 = t70823*t70823;
            double t70929 = 1.0/pow(t70765,3.0/2.0);
            double t70930 = b4p*t70770*t70915*(1.0E1/9.0);
            double t70931 = b2p*c*t70914*(4.0/9.0);
            double t70932 = b1p*c*t70914*t70816*(2.0/9.0);
            double t70933 = b3p*c*t70914*t70766*(2.0/3.0);
            double t70934 = b3p*t70770*t70816*t70915*(1.0/1.2E1);
            double t70935 = t70930+t70931+t70932+t70933+t70934-b1p*t70770*t70915*t70929*(1.0/3.6E1);
            double t70936 = 1.0/(t70774*t70774*t70774);
            double t70937 = t70781*t70817*t70936*t70928*2.0;
            double t70938 = t70923*t70923;
            double t70939 = 1.0/(t70779*t70779);
            double t70940 = 1.0/(t70774*t70774*t70774*t70774);
            double t70941 = t70808*2.0;
            double t70942 = 1.0/(t70763*t70763*t70763);
            double t70943 = t70942*t70782*2.0;
            double t70944 = t70941+t70943;
            double t70945 = t70810*t70810;
            double t70946 = a1p*c*c0p*t70801*t70914*(8.0/9.0);
            double t70947 = 1.0/(t70763*t70763*t70763*t70763*t70763*t70763);
            double t70948 = t70811*t70782*t70783*4.0;
            double t70949 = t70814*t70824*4.0;
            double t70950 = t70948+t70949;
            double t70951 = t70944*t70838*(4.0/3.0);
            double t70952 = 1.0/pow(t70803,2.0/3.0);
            double t70953 = t70952*t70945*(4.0/9.0);
            double t70954 = 1.0/pow(t70805,2.0/3.0);
            double t70955 = t70945*t70954*(4.0/9.0);
            double t70956 = t70951+t70953+t70955-t70840*t70944*(4.0/3.0);
            double t70957 = 1.0/t70834;
            double t70958 = 1.0/(t70831*t70831);
            double t70959 = b4a*t70770*t70815*(2.0/3.0);
            double t70960 = b2a*c*t70775*(1.0/3.0);
            double t70961 = b1a*c*t70816*t70775*(1.0/6.0);
            double t70962 = b3a*c*t70766*t70775*(1.0/2.0);
            double t70963 = t70960+t70961+t70962+t70959;
            double t70964 = t70963*t70963;
            double t70965 = 1.0/t70864;
            double t70966 = b4f*t70770*t70860*(2.0/3.0);
            double t70967 = b2f*c*t70854*(1.0/3.0);
            double t70968 = b1f*c*t70861*t70854*(1.0/6.0);
            double t70969 = b3f*c*t70854*t70846*(1.0/2.0);
            double t70970 = t70966+t70967+t70968+t70969;
            double t70971 = 1.0/(t70853*t70853);
            double t70972 = 1.0/pow(rho_b[index],7.0/3.0);
            double t70973 = 1.0/pow(t70845,3.0/2.0);
            double t70974 = t70970*t70970;
            double t70975 = t70876*t70876;
            double t70976 = 1.0/(t70859*t70859*t70859);
            double t70977 = t70870*t70975*t70976*t70869*2.0;
            double t70978 = b4p*t70770*t70891*(1.0E1/9.0);
            double t70979 = b2p*c*t70972*(4.0/9.0);
            double t70980 = b3p*t70770*t70861*t70891*(1.0/1.2E1);
            double t70981 = b1p*c*t70861*t70972*(2.0/9.0);
            double t70982 = b3p*c*t70846*t70972*(2.0/3.0);
            double t71164 = b1p*t70770*t70891*t70973*(1.0/3.6E1);
            double t70983 = t70980+t70981+t70982+t70978+t70979-t71164;
            double t70984 = 1.0/(t70867*t70867);
            double t70985 = 1.0/(t70859*t70859*t70859*t70859);
            double t70986 = a1p*c*c0p*t70972*t70878*(8.0/9.0);
            double t70987 = a1f*c*c0f*t70854*t70882*(2.0/3.0);
            double t70988 = a1p*c*c0p*t70854*t70878*(2.0/3.0);
            double t70989 = 1.0/tau_b[index];
            double t70990 = pow(rho_b[index],2.0/3.0);
            double t70991 = pow(rho_b[index],5.0/3.0);
            double t70992 = C_k*t70991*t70989;
            double t70993 = t70992+1.0;
            double t70994 = t70992-1.0;
            double t70995 = 1.0/(t70993*t70993);
            double t70996 = t70994*t70994;
            double t70997 = t70996*t70996;
            double t70998 = t70997*t70997;
            double t70999 = 1.0/pow(t70993,1.1E1);
            double t71000 = 1.0/(t70993*t70993*t70993);
            double t71001 = 1.0/(t70993*t70993*t70993*t70993);
            double t71002 = 1.0/(t70993*t70993*t70993*t70993*t70993);
            double t71003 = 1.0/(t70993*t70993*t70993*t70993*t70993*t70993);
            double t71004 = 1.0/(t70993*t70993*t70993*t70993*t70993*t70993*t70993);
            double t71005 = 1.0/(t70993*t70993*t70993*t70993*t70993*t70993*t70993*t70993);
            double t71006 = 1.0/(t70993*t70993*t70993*t70993*t70993*t70993*t70993*t70993*t70993);
            double t71007 = 1.0/pow(t70993,1.0E1);
            double t71008 = 1.0/(k*k);
            double t71009 = 1.0/kp;
            double t71010 = 1.0/(rho_b[index]*rho_b[index]);
            double t71011 = rho_b[index]*2.0;
            double t71012 = 1.0/pow(t71011,2.0/3.0);
            double t71013 = gamma_bb[index]*mu_*t71010*t71012*t71008*t71009*(1.0/4.0);
            double t71014 = t71013+1.0;
            double t71015 = 1.0/t71014;
            double t71016 = kp-kp*t71015+1.0;
            double t71017 = C_k*C_k;
            double t71018 = pow(rho_b[index],4.0/3.0);
            double t71019 = 1.0/(tau_b[index]*tau_b[index]);
            double t71020 = 1.0/t70993;
            double t71021 = 1.0/pow(t70993,1.2E1);
            double t71022 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]);
            double t71023 = gamma_bb[index]*mu_*t71012*t71022*t71008*t71009*(1.0/2.0);
            double t71024 = 1.0/pow(t71011,5.0/3.0);
            double t71025 = gamma_bb[index]*mu_*t71010*t71024*t71008*t71009*(1.0/3.0);
            double t71026 = t71023+t71025;
            double t71027 = a_1*t70994*t71020;
            double t71028 = a_10*t70996*t70998*t71007;
            double t71029 = a_11*t70994*t70996*t70998*t70999;
            double t71030 = a_2*t70995*t70996;
            double t71031 = a_3*t70994*t70996*t71000;
            double t71032 = a_4*t70997*t71001;
            double t71033 = a_5*t70994*t70997*t71002;
            double t71034 = a_6*t70996*t70997*t71003;
            double t71035 = a_7*t70994*t70996*t70997*t71004;
            double t71036 = a_8*t70998*t71005;
            double t71037 = a_9*t70994*t70998*t71006;
            double t71038 = t71030+t71031+t71032+t71033+t71034+t71035+t71027+t71036+t71028+t71037+t71029+1.0;
            double t71039 = 1.0/(t71014*t71014);
            double t71040 = C_k*a_1*t70990*t70989*t71020*(5.0/3.0);
            double t71041 = C_k*a_2*t70990*t70994*t70995*t70989*(1.0E1/3.0);
            double t71042 = C_k*a_10*t70990*t70994*t70989*t70998*t71007*(5.0E1/3.0);
            double t71043 = C_k*a_11*t70990*t70996*t70989*t70998*t70999*(5.5E1/3.0);
            double t71044 = C_k*a_3*t70990*t70996*t70989*t71000*5.0;
            double t71045 = C_k*a_4*t70990*t70994*t70996*t70989*t71001*(2.0E1/3.0);
            double t71046 = C_k*a_5*t70990*t70997*t70989*t71002*(2.5E1/3.0);
            double t71047 = C_k*a_6*t70990*t70994*t70997*t70989*t71003*1.0E1;
            double t71048 = C_k*a_7*t70990*t70996*t70997*t70989*t71004*(3.5E1/3.0);
            double t71049 = C_k*a_8*t70990*t70994*t70996*t70997*t70989*t71005*(4.0E1/3.0);
            double t71050 = C_k*a_9*t70990*t70989*t70998*t71006*1.5E1;
            double t71051 = t71040+t71041+t71050+t71042+t71043+t71044+t71045+t71046+t71047+t71048+t71049-C_k* \
               a_1*t70990*t70994*t70995*t70989*(5.0/3.0)-C_k*a_2*t70990*t70996*t70989*t71000*(1.0E1/3.0)-C_k*a_4* \
               t70990*t70997*t70989*t71002*(2.0E1/3.0)-C_k*a_8*t70990*t70989*t70998*t71006*(4.0E1/3.0)-C_k*a_10*t70990* \
               t70996*t70989*t70998*t70999*(5.0E1/3.0)-C_k*a_3*t70990*t70994*t70996*t70989*t71001*5.0-C_k*a_5*t70990* \
               t70994*t70997*t70989*t71003*(2.5E1/3.0)-C_k*a_6*t70990*t70996*t70997*t70989*t71004*1.0E1-C_k*a_9*t70990* \
               t70994*t70989*t70998*t71007*1.5E1-C_k*a_11*t70990*t70994*t70996*t70989*t70998*t71021*(5.5E1/3.0)-C_k* \
               a_7*t70990*t70994*t70996*t70997*t70989*t71005*(3.5E1/3.0);
            double t71052 = 1.0/pow(rho_a[index],1.0/3.0);
            double t71053 = c*t71052;
            double t71054 = sqrt(t71053);
            double t71055 = pow(t71053,3.0/2.0);
            double t71056 = 1.0/pow(rho_a[index],2.0/3.0);
            double t71057 = b1p*t71054;
            double t71058 = b3p*t71055;
            double t71059 = b4p*t70770*t71056;
            double t71060 = b2p*c*t71052;
            double t71061 = t71060+t71057+t71058+t71059;
            double t71062 = 1.0/t71061;
            double t71063 = t70776*t71062*(1.0/2.0);
            double t71064 = t71063+1.0;
            double t71065 = log(t71064);
            double t71066 = a1p*c*t71052;
            double t71067 = t71066+1.0;
            double t71068 = c0p*t71065*t71067*2.0;
            double t71069 = c0f*t70882*t70884*2.0;
            double t71071 = c0p*t70869*t70878*2.0;
            double t71070 = -t71071+t71069;
            double t71072 = t70802*t70811*t70814*t70807*t70788;
            double t71073 = Aa*t70807*t70825*t70843*t70835*t70837*t70788*2.0;
            double t71074 = gamma_bb[index]*gcab*t70888*(1.6E1/3.0);
            double t71075 = gamma_bb[index]*gcab*t70885*t70887*t70888*1.6E1;
            double t71076 = gamma_bb[index]*t70893*t70886*t70887*t70888*(1.6E1/3.0);
            double t71077 = gamma_bb[index]*t70885*t70886*t70888*1.6E1;
            double t71078 = t71074+t71075+t71076+t71077;
            double t71079 = 1.0/(t70901*t70901);
            double t71080 = gamma_bb[index]*gamma_bb[index];
            double t71081 = 1.0/pow(rho_b[index],2.2E1/3.0);
            double t71082 = gamma_bb[index]*gcab*t70888*(8.0/3.0);
            double t71083 = gamma_bb[index]*t70885*t70886*t70888*(8.0/3.0);
            double t71084 = t71082+t71083;
            double t71085 = 1.0/(t70908*t70908);
            double t71086 = 1.0/pow(rho_b[index],1.4E1/3.0);
            double t71087 = 1.0/(t70899*t70899);
            double t71088 = 1.0/(t70904*t70904);
            double t71089 = gamma_bb[index]*gcab*t70888*4.0;
            double t71090 = gamma_bb[index]*gcab*t70885*t70887*t70888*4.0;
            double t71091 = gamma_bb[index]*t70885*t70886*t70888*8.0;
            double t71092 = t71090+t71091+t71089;
            double t71172 = t70970*t70971*t70884*t70965;
            double t71093 = t70877+t70987-t70988-t71172;
            double t71094 = gcaa*gcaa;
            double t71095 = t71080*t71080;
            double t71096 = t71094*t71094;
            double t71097 = 1.0/pow(rho_b[index],3.2E1/3.0);
            double t71098 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
               rho_b[index]*rho_b[index]);
            double t71099 = 1.0/pow(rho_b[index],1.6E1/3.0);
            double t71100 = t70881*t70788*t71070;
            double t71101 = t71100+t71071;
            double t71102 = tau_b[index]-1.0/1.0E20;
            double t71103 = ( (t71102 > 0.0) ?  1.0 : 0.0 ) ;
            double t71104 = tau_b[index]*2.0;
            double t71105 = 1.0/rho_b[index];
            double t71132 = gamma_bb[index]*t71105*(1.0/4.0);
            double t71106 = t71104-t71132;
            double t71107 = t70989*t71106*(1.0/2.0);
            double t71108 = t71107-1.0;
            double t71109 = t71103*t71108;
            double t71110 = t71109+1.0;
            double t71111 = gamma_bb[index]*gcaa*t70891*4.0;
            double t71112 = gamma_bb[index]*gcaa*t71080*t71094*t71098*4.0;
            double t71113 = t71080*t71094*t71099*6.0;
            double t71114 = t71095*t71096*t71097;
            double t71115 = t71111+t71112+t71113+t71114+1.0;
            double t71116 = 1.0/t71115;
            double t71117 = gamma_bb[index]*gcaa*t70891;
            double t71118 = t71117+1.0;
            double t71119 = 1.0/t71118;
            double t71120 = gamma_bb[index]*gcaa*t70891*3.0;
            double t71121 = gamma_bb[index]*gcaa*t71080*t71094*t71098;
            double t71122 = t71080*t71094*t71099*3.0;
            double t71123 = t71120+t71121+t71122+1.0;
            double t71124 = 1.0/t71123;
            double t71125 = gamma_bb[index]*gcaa*t70891*2.0;
            double t71126 = t71080*t71094*t71099;
            double t71127 = t71125+t71126+1.0;
            double t71128 = 1.0/t71127;
            double t71129 = 1.0/pow(rho_b[index],1.9E1/3.0);
            double t71130 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
               rho_b[index]*rho_b[index]*rho_b[index]);
            double t71131 = 1.0/pow(rho_b[index],3.5E1/3.0);
            double t71133 = 1.0/pow(rho_b[index],1.0E1);
            double t71134 = 1.0/(t71118*t71118);
            double t71135 = gamma_bb[index]*gcaa*t70888*(3.2E1/3.0);
            double t71136 = gamma_bb[index]*gcaa*t71130*t71080*t71094*3.2E1;
            double t71137 = t71080*t71129*t71094*3.2E1;
            double t71138 = t71131*t71095*t71096*(3.2E1/3.0);
            double t71139 = t71135+t71136+t71137+t71138;
            double t71140 = gamma_bb[index]*gcaa*t70888*(1.6E1/3.0);
            double t71141 = t71080*t71129*t71094*(1.6E1/3.0);
            double t71142 = t71140+t71141;
            double t71143 = gamma_bb[index]*gcaa*t70888*8.0;
            double t71144 = gamma_bb[index]*gcaa*t71130*t71080*t71094*8.0;
            double t71145 = t71080*t71129*t71094*1.6E1;
            double t71146 = t71143+t71144+t71145;
            double t71147 = 1.0/(t71123*t71123);
            double t71148 = 1.0/(t71115*t71115);
            double t71149 = 1.0/pow(rho_b[index],3.8E1/3.0);
            double t71150 = 1.0/(t71127*t71127);
            double t71151 = ccaa4*t71116*t71095*t71096*t71097;
            double t71152 = ccaa1*gamma_bb[index]*gcaa*t70891*t71119;
            double t71153 = ccaa3*gamma_bb[index]*gcaa*t71124*t71080*t71094*t71098;
            double t71154 = ccaa2*t71080*t71128*t71094*t71099;
            double t71155 = ccaa0+t71151+t71152+t71153+t71154;
            double t71156 = 1.0/(t70853*t70853*t70853);
            double t71157 = b4f*t70770*t70891*(1.0E1/9.0);
            double t71158 = b2f*c*t70972*(4.0/9.0);
            double t71159 = b3f*t70770*t70861*t70891*(1.0/1.2E1);
            double t71160 = b1f*c*t70861*t70972*(2.0/9.0);
            double t71161 = b3f*c*t70846*t70972*(2.0/3.0);
            double t71162 = t71160+t71161+t71157+t71158+t71159-b1f*t70770*t70891*t70973*(1.0/3.6E1);
            double t71163 = t70971*t70884*t70965*t71162;
            double t71165 = t70870*t70871*t70983*t70869;
            double t71166 = 1.0/(t70864*t70864);
            double t71167 = 1.0/(t70853*t70853*t70853*t70853);
            double t71168 = t70884*t70974*t70789*t71166*t71167*(1.0/2.0);
            double t71169 = t70776*t70975*t70984*t70985*t70869*(1.0/2.0);
            double t71170 = a1f*c*t70970*t70854*t70971*t70965*(2.0/3.0);
            double t71171 = a1p*c*t70870*t70871*t70854*t70876*(2.0/3.0);
            double t71173 = t70881*t70788*t71093;
            double t71174 = ccaa4*t71131*t71116*t71095*t71096*(3.2E1/3.0);
            double t71175 = ccaa1*gamma_bb[index]*gcaa*t70888*t71119*(8.0/3.0);
            double t71176 = ccaa3*gamma_bb[index]*gcaa*t71130*t71124*t71080*t71094*8.0;
            double t71177 = ccaa2*t71080*t71128*t71129*t71094*(1.6E1/3.0);
            double t71180 = ccaa1*t71080*t71134*t71129*t71094*(8.0/3.0);
            double t71181 = ccaa3*gamma_bb[index]*gcaa*t71080*t71146*t71147*t71094*t71098;
            double t71182 = ccaa4*t71139*t71148*t71095*t71096*t71097;
            double t71183 = ccaa2*t71150*t71142*t71080*t71094*t71099;
            double t71178 = -t71180-t71181-t71182+t71174-t71183+t71175+t71176+t71177;
            double t71179 = -t70877+t70988+t71173;
            v_rho_b_rho_b_[index] = (ccab0+ccab1*gcab*t70912*t70886+ccab2*t70910*t70885*t70887+ccab4*t70913*t70893* \
               t70894+ccab3*gcab*t70911*t70885*t70886*t70887)*(-rho_b[index]*(-t70977-t70986+t71171+t71165+t71169+ \
               t70881*t70788*(t70977+t70986+t71170+t71163+t71168-t70870*t70871*t70983*t70869-t70884*t70965*t70974* \
               t71156*2.0-a1f*c*c0f*t70882*t70972*(8.0/9.0)-t70776*t70975*t70984*t70985*t70869*(1.0/2.0)-a1p*c*t70870* \
               t70871*t70854*t70876*(2.0/3.0)))-t70763*(t70937+t70946-t70781*t70817*t70818*t70935-t70811*t70814*t70807* \
               t70788*(t70937+t70946-t70781*t70817*t70818*t70935-t70800*t70917*1.0/(t70794*t70794*t70794)*t70938* \
               2.0+t70800*t70917*t70918*(b2f*c*t70914*(4.0/9.0)+b4f*t70770*t70915*(1.0E1/9.0)+b1f*c*t70914*t70816* \
               (2.0/9.0)+b3f*c*t70914*t70766*(2.0/3.0)-b1f*t70770*t70915*t70929*(1.0/3.6E1)+b3f*t70770*t70816*t70915* \
               (1.0/1.2E1))+t70800*1.0/(t70794*t70794*t70794*t70794)*t70938*1.0/(t70797*t70797)*t70789*(1.0/2.0)- \
               a1f*c*c0f*t70914*t70798*(8.0/9.0)-t70940*t70781*t70928*t70776*t70939*(1.0/2.0)+a1f*c*t70923*t70917* \
               t70918*t70775*(2.0/3.0)-a1p*c*t70823*t70817*t70818*t70775*(2.0/3.0))+t70802*t70814*t70841*t70824*t70788* \
               8.0-t70811*t70814*t70841*t70925*t70788*2.0+t70802*t70811*t70814*t70956*t70788+t70802*t70811*t70807* \
               t70783*t70788*1.2E1+t70802*t70814*t70807*t70947*t70788*2.0E1-t70814*t70824*t70807*t70925*t70788*8.0- \
               t70940*t70781*t70928*t70776*t70939*(1.0/2.0)+t70802*t70811*t70841*t70782*t70783*t70788*8.0+t70802* \
               t70824*t70807*t70782*t70783*t70788*3.2E1-t70811*t70807*t70925*t70782*t70783*t70788*8.0-a1p*c*t70823* \
               t70817*t70818*t70775*(2.0/3.0)+Aa*t70841*t70950*t70825*t70835*t70837*t70788*4.0+Aa*t70825*t70843*t70835* \
               t70837*t70956*t70788*2.0+Aa*t70807*t70825*t70835*t70837*t70788*(t70811*t70783*1.2E1+t70814*t70947* \
               2.0E1+t70824*t70782*t70783*3.2E1)*2.0-t70841*t70825*t70843*t70837*t70963*t70957*t70958*t70788*2.0- \
               t70950*t70807*t70825*t70837*t70963*t70957*t70958*t70788*2.0+1.0/(t70831*t70831*t70831)*t70807*t70825* \
               t70843*t70837*t70964*t70957*t70788*2.0-t70807*t70825*t70843*t70837*t70957*t70958*t70788*(b2a*c*t70914* \
               (4.0/9.0)+b4a*t70770*t70915*(1.0E1/9.0)+b1a*c*t70914*t70816*(2.0/9.0)+b3a*c*t70914*t70766*(2.0/3.0) \
               -b1a*t70770*t70915*t70929*(1.0/3.6E1)+b3a*t70770*t70816*t70915*(1.0/1.2E1))+Aa*a1a*c*t70914*t70807* \
               t70825*t70843*t70835*t70788*(8.0/9.0)+Aa*a1a*c*t70841*t70825*t70843*t70835*t70775*t70788*(4.0/3.0) \
               +Aa*a1a*c*t70950*t70807*t70825*t70835*t70775*t70788*(4.0/3.0)-1.0/(t70831*t70831*t70831*t70831)*t70807* \
               t70825*1.0/(t70834*t70834)*t70843*t70826*t70837*t70964*t70788*(1.0/2.0)-a1a*c*t70807*t70825*t70843* \
               t70963*t70775*t70957*t70958*t70788*(2.0/3.0))-t70881*t70788*t71093*2.0-t70823*t70781*t70817*t70818* \
               2.0+t70870*t70871*t70876*t70869*2.0+a1p*c*c0p*t70801*t70775*(4.0/3.0)-a1p*c*c0p*t70854*t70878*(4.0/ \
               3.0)+t70802*t70811*t70814*t70841*t70788*2.0+t70802*t70814*t70824*t70807*t70788*8.0-t70811*t70814*t70807* \
               t70925*t70788*2.0+t70802*t70811*t70807*t70782*t70783*t70788*8.0+Aa*t70841*t70825*t70843*t70835*t70837* \
               t70788*4.0+Aa*t70950*t70807*t70825*t70835*t70837*t70788*4.0-t70807*t70825*t70843*t70837*t70963*t70957* \
               t70958*t70788*2.0+Aa*a1a*c*t70807*t70825*t70843*t70835*t70775*t70788*(4.0/3.0))+(rho_b[index]*t71101+ \
               rho_a[index]*(t71068-t70881*t70788*(t71068-c0f*log((t70789*(1.0/2.0))/(b1f*t71054+b3f*t71055+b2f*c* \
               t71052+b4f*t70770*t71056)+1.0)*(a1f*c*t71052+1.0)*2.0))-t70763*(t70813+t71072+t71073))*(-ccab2*t70885* \
               t70887*t71088*(gamma_bb[index]*gcab*t71086*(8.8E1/9.0)+t70885*t71080*t71081*(3.2E1/9.0)+gamma_bb[index]* \
               t70885*t70886*t71086*(8.8E1/9.0))+ccab2*1.0/(t70904*t70904*t70904)*t70885*t70887*(t71084*t71084)*2.0+ \
               ccab4*t70893*t70894*1.0/(t70899*t70899*t70899)*(t71078*t71078)*2.0+ccab1*gamma_bb[index]*gcab*t70912* \
               t71086*(4.4E1/9.0)+ccab2*t70910*t70885*t71080*t71081*(3.2E1/9.0)-ccab1*t70885*t71080*t71081*t71079* \
               (3.2E1/9.0)-ccab4*t70893*t70894*t71087*(gamma_bb[index]*gcab*t71086*(1.76E2/9.0)+t70885*t71080*t71081* \
               (6.4E1/3.0)+gamma_bb[index]*t70885*t70886*t71086*(1.76E2/3.0)+t70893*t70887*t71080*t71081*(6.4E1/3.0) \
               +gamma_bb[index]*gcab*t70885*t70887*t71086*(1.76E2/3.0)+gamma_bb[index]*t70893*t70886*t70887*t71086* \
               (1.76E2/9.0)+gcab*t70885*t70886*t71080*t71081*(1.28E2/3.0))+ccab4*t70913*t70893*t70887*t71080*t71081* \
               (6.4E1/3.0)+ccab2*gamma_bb[index]*t70910*t70885*t70886*t71086*(8.8E1/9.0)-ccab1*gamma_bb[index]*t70885* \
               t70886*t71086*t71079*(4.4E1/9.0)+ccab3*gcab*1.0/(t70908*t70908*t70908)*t70885*t70886*t70887*(t71092* \
               t71092)*2.0+ccab3*gamma_bb[index]*gcab*t70911*t70885*t70887*t71086*(4.4E1/3.0)+ccab4*gamma_bb[index]* \
               t70913*t70893*t70886*t70887*t71086*(1.76E2/9.0)-ccab2*gamma_bb[index]*t70885*t70886*t70888*t71084* \
               t71088*(1.6E1/3.0)+ccab3*gcab*t70911*t70885*t70886*t71080*t71081*(3.2E1/3.0)+ccab1*gcab*1.0/(t70901* \
               t70901*t70901)*t70885*t70886*t71080*t71081*(3.2E1/9.0)-ccab3*gcab*t70885*t70886*t70887*t71085*(gamma_bb[index]* \
               gcab*t71086*(4.4E1/3.0)+t70885*t71080*t71081*(3.2E1/3.0)+gamma_bb[index]*t70885*t70886*t71086*(8.8E1/ \
               3.0)+gamma_bb[index]*gcab*t70885*t70887*t71086*(4.4E1/3.0)+gcab*t70885*t70886*t71080*t71081*(3.2E1/ \
               3.0))-ccab3*gamma_bb[index]*gcab*t70885*t70887*t70888*t71092*t71085*8.0-ccab4*gamma_bb[index]*t70893* \
               t70886*t70887*t70888*t71078*t71087*(3.2E1/3.0))+(t70813+t71072+t71073+rho_b[index]*(-t70877+t70988+ \
               t70881*t70788*(t70877+t70987-t70970*t70971*t70884*t70965-a1p*c*c0p*t70854*t70878*(2.0/3.0)))-t70763* \
               (t70909-t70823*t70781*t70817*t70818+t70802*t70811*t70814*t70841*t70788+t70802*t70814*t70824*t70807* \
               t70788*4.0-t70811*t70814*t70807*t70925*t70788+t70802*t70811*t70807*t70782*t70783*t70788*4.0+Aa*t70841* \
               t70825*t70843*t70835*t70837*t70788*2.0+Aa*t70950*t70807*t70825*t70835*t70837*t70788*2.0-t70807*t70825* \
               t70843*t70837*t70963*t70957*t70958*t70788+Aa*a1a*c*t70807*t70825*t70843*t70835*t70775*t70788*(2.0/ \
               3.0))-c0p*t70869*t70878*2.0-t70881*t70788*t71070)*(ccab1*gamma_bb[index]*gcab*t70912*t70888*(4.0/3.0) \
               -ccab2*t70885*t70887*t71084*t71088-ccab4*t70893*t70894*t71078*t71087+ccab2*gamma_bb[index]*t70910* \
               t70885*t70886*t70888*(8.0/3.0)-ccab1*gamma_bb[index]*t70885*t70886*t70888*t71079*(4.0/3.0)+ccab3*gamma_bb[index]* \
               gcab*t70911*t70885*t70887*t70888*4.0+ccab4*gamma_bb[index]*t70913*t70893*t70886*t70887*t70888*(1.6E1/ \
               3.0)-ccab3*gcab*t70885*t70886*t70887*t71092*t71085)*2.0-(X-1.0)*(t71051*t71016*2.0+rho_b[index]*t71016* \
               (C_k*a_1*t70844*t70989*t71020*(1.0E1/9.0)-a_1*t70995*t71017*t71018*t71019*(5.0E1/9.0)+a_2*t70995*t71017* \
               t71018*t71019*(5.0E1/9.0)+a_1*t70994*t71000*t71017*t71018*t71019*(5.0E1/9.0)+a_10*t70998*t71007*t71017* \
               t71018*t71019*2.5E2-a_2*t70994*t71000*t71017*t71018*t71019*(2.0E2/9.0)+a_2*t70996*t71001*t71017*t71018* \
               t71019*(5.0E1/3.0)+a_3*t70994*t71000*t71017*t71018*t71019*(5.0E1/3.0)-a_3*t70996*t71001*t71017*t71018* \
               t71019*5.0E1+a_4*t70996*t71001*t71017*t71018*t71019*(1.0E2/3.0)+a_4*t70997*t71003*t71017*t71018*t71019* \
               (5.0E2/9.0)-a_5*t70997*t71003*t71017*t71018*t71019*(1.25E3/9.0)+a_6*t70997*t71003*t71017*t71018*t71019* \
               (2.5E2/3.0)+a_8*t70998*t71007*t71017*t71018*t71019*2.0E2-a_9*t70998*t71007*t71017*t71018*t71019*4.5E2- \
               C_k*a_1*t70844*t70994*t70995*t70989*(1.0E1/9.0)+C_k*a_2*t70844*t70994*t70995*t70989*(2.0E1/9.0)-C_k* \
               a_2*t70844*t70996*t70989*t71000*(2.0E1/9.0)+C_k*a_3*t70844*t70996*t70989*t71000*(1.0E1/3.0)-C_k*a_4* \
               t70844*t70997*t70989*t71002*(4.0E1/9.0)+C_k*a_5*t70844*t70997*t70989*t71002*(5.0E1/9.0)-C_k*a_8*t70844* \
               t70989*t70998*t71006*(8.0E1/9.0)+C_k*a_9*t70844*t70989*t70998*t71006*1.0E1-C_k*a_10*t70844*t70996* \
               t70989*t70998*t70999*(1.0E2/9.0)+C_k*a_11*t70844*t70996*t70989*t70998*t70999*(1.1E2/9.0)+C_k*a_10* \
               t70844*t70994*t70989*t70998*t71007*(1.0E2/9.0)-C_k*a_3*t70844*t70994*t70996*t70989*t71001*(1.0E1/3.0) \
               +C_k*a_4*t70844*t70994*t70996*t70989*t71001*(4.0E1/9.0)-C_k*a_5*t70844*t70994*t70997*t70989*t71003* \
               (5.0E1/9.0)+C_k*a_6*t70844*t70994*t70997*t70989*t71003*(2.0E1/3.0)-C_k*a_6*t70844*t70996*t70997*t70989* \
               t71004*(2.0E1/3.0)+C_k*a_7*t70844*t70996*t70997*t70989*t71004*(7.0E1/9.0)-C_k*a_9*t70844*t70994*t70989* \
               t70998*t71007*1.0E1-a_10*t70994*t70998*t70999*t71017*t71018*t71019*(5.0E3/9.0)+a_11*t70994*t70998* \
               t70999*t71017*t71018*t71019*(2.75E3/9.0)+a_10*t70996*t70998*t71021*t71017*t71018*t71019*(2.75E3/9.0) \
               -a_11*t70996*t70998*t71021*t71017*t71018*t71019*(6.05E3/9.0)+a_3*t70994*t70996*t71002*t71017*t71018* \
               t71019*(1.0E2/3.0)-a_4*t70994*t70996*t71002*t71017*t71018*t71019*(8.0E2/9.0)+a_5*t70994*t70996*t71002* \
               t71017*t71018*t71019*(5.0E2/9.0)+a_5*t70994*t70997*t71004*t71017*t71018*t71019*(2.5E2/3.0)-a_6*t70994* \
               t70997*t71004*t71017*t71018*t71019*2.0E2+a_6*t70996*t70997*t71005*t71017*t71018*t71019*(3.5E2/3.0) \
               +a_7*t70994*t70997*t71004*t71017*t71018*t71019*(3.5E2/3.0)-a_7*t70996*t70997*t71005*t71017*t71018* \
               t71019*(2.45E3/9.0)+a_8*t70996*t70997*t71005*t71017*t71018*t71019*(1.4E3/9.0)+a_9*t70994*t70998*t70999* \
               t71017*t71018*t71019*2.5E2+a_11*1.0/pow(t70993,1.3E1)*t70994*t70996*t70998*t71017*t71018*t71019*(1.1E3/ \
               3.0)-C_k*a_11*t70844*t70994*t70996*t70989*t70998*t71021*(1.1E2/9.0)-C_k*a_7*t70844*t70994*t70996*t70997* \
               t70989*t71005*(7.0E1/9.0)+C_k*a_8*t70844*t70994*t70996*t70997*t70989*t71005*(8.0E1/9.0)+a_7*t70994* \
               t70996*t70997*t71006*t71017*t71018*t71019*(1.4E3/9.0)-a_8*t70994*t70996*t70997*t71006*t71017*t71018* \
               t71019*(3.2E3/9.0)+a_9*t70994*t70996*t70997*t71006*t71017*t71018*t71019*2.0E2)-kp*t71026*t71038*t71039* \
               2.0+kp*rho_b[index]*t71038*t71039*(gamma_bb[index]*mu_*t71022*t71024*t71008*t71009*(4.0/3.0)+gamma_bb[index]* \
               mu_*1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index])*t71012*t71008*t71009*(3.0/2.0)+gamma_bb[index]* \
               mu_*t71010*1.0/pow(t71011,8.0/3.0)*t71008*t71009*(1.0E1/9.0))-kp*rho_b[index]*1.0/(t71014*t71014*t71014) \
               *(t71026*t71026)*t71038*2.0-kp*rho_b[index]*t71051*t71026*t71039*2.0)+t71101*t71110*t71178*2.0+t71110* \
               t71155*t71179*2.0-rho_b[index]*t71101*t71110*(ccaa1*gamma_bb[index]*gcaa*t71119*t71086*(8.8E1/9.0) \
               -ccaa1*t71080*t71134*t71081*t71094*2.4E1+ccaa2*t71080*t71081*t71128*t71094*(3.04E2/9.0)+ccaa4*t71116* \
               t71095*t71149*t71096*(1.12E3/9.0)-ccaa2*t71150*t71142*t71080*t71129*t71094*(3.2E1/3.0)-ccaa4*t71131* \
               t71139*t71148*t71095*t71096*(6.4E1/3.0)-ccaa2*t71150*t71080*t71094*t71099*(gamma_bb[index]*gcaa*t71086* \
               (1.76E2/9.0)+t71080*t71081*t71094*(3.04E2/9.0))-ccaa4*t71148*t71095*t71096*t71097*(gamma_bb[index]* \
               gcaa*t71086*(3.52E2/9.0)+t71080*t71081*t71094*(6.08E2/3.0)+t71095*t71149*t71096*(1.12E3/9.0)+gamma_bb[index]* \
               gcaa*t71133*t71080*t71094*2.88E2)+ccaa2*(t71142*t71142)*t71080*1.0/(t71127*t71127*t71127)*t71094*t71099* \
               2.0+ccaa4*1.0/(t71115*t71115*t71115)*(t71139*t71139)*t71095*t71096*t71097*2.0+ccaa3*gamma_bb[index]* \
               gcaa*t71124*t71133*t71080*t71094*7.2E1+ccaa1*gamma_bb[index]*gcaa*t71133*t71080*1.0/(t71118*t71118* \
               t71118)*t71094*(1.28E2/9.0)+ccaa3*gamma_bb[index]*gcaa*1.0/(t71123*t71123*t71123)*t71080*(t71146*t71146) \
               *t71094*t71098*2.0-ccaa3*gamma_bb[index]*gcaa*t71080*t71147*t71094*t71098*(gamma_bb[index]*gcaa*t71086* \
               (8.8E1/3.0)+t71080*t71081*t71094*(3.04E2/3.0)+gamma_bb[index]*gcaa*t71133*t71080*t71094*7.2E1)-ccaa3* \
               gamma_bb[index]*gcaa*t71130*t71080*t71146*t71147*t71094*1.6E1)+rho_b[index]*t71110*t71155*(-t70977- \
               t70986+t71171+t71165+t71169+t70881*t70788*(t70977+t70986+t71170-t71171+t71163-t71165+t71168-t71169- \
               t70884*t70965*t70974*t71156*2.0-a1f*c*c0f*t70882*t70972*(8.0/9.0)))-rho_b[index]*t71110*t71178*t71179* \
               2.0+gamma_bb[index]*t70989*t71101*t71103*t71105*t71178*(1.0/4.0)+gamma_bb[index]*t70989*t71103*t71105* \
               t71155*(-t70877+t70988+t71173)*(1.0/4.0);
        } else if (rho_a[index] > cutoff_) {
            v_rho_b_rho_b_[index] = 0.0;
        } else if (rho_b[index] > cutoff_) {
            double t73662 = 1.0/pow(rho_b[index],1.0/3.0);
            double t73663 = c*t73662;
            double t73664 = sqrt(t73663);
            double t73665 = b1f*t73664;
            double t73666 = pow(t73663,3.0/2.0);
            double t73667 = b3f*t73666;
            double t73668 = c*c;
            double t73669 = 1.0/pow(rho_b[index],2.0/3.0);
            double t73670 = b4f*t73668*t73669;
            double t73671 = b2f*c*t73662;
            double t73672 = t73670+t73671+t73665+t73667;
            double t73673 = 1.0/pow(rho_b[index],4.0/3.0);
            double t73674 = b1p*t73664;
            double t73675 = b3p*t73666;
            double t73676 = b4p*t73668*t73669;
            double t73677 = b2p*c*t73662;
            double t73678 = t73674+t73675+t73676+t73677;
            double t73679 = 1.0/pow(rho_b[index],5.0/3.0);
            double t73680 = 1.0/sqrt(t73663);
            double t73681 = 1.0/c0f;
            double t73682 = 1.0/t73672;
            double t73683 = t73681*t73682*(1.0/2.0);
            double t73684 = t73683+1.0;
            double t73685 = 1.0/c0p;
            double t73686 = 1.0/t73678;
            double t73687 = t73685*t73686*(1.0/2.0);
            double t73688 = t73687+1.0;
            double t73689 = a1p*c*t73662;
            double t73690 = t73689+1.0;
            double t73691 = 1.0/t73688;
            double t73692 = 1.0/(t73678*t73678);
            double t73693 = b4p*t73668*t73679*(2.0/3.0);
            double t73694 = b2p*c*t73673*(1.0/3.0);
            double t73695 = b1p*c*t73680*t73673*(1.0/6.0);
            double t73696 = b3p*c*t73664*t73673*(1.0/2.0);
            double t73697 = t73693+t73694+t73695+t73696;
            double t73698 = t73690*t73691*t73692*t73697;
            double t73699 = log(t73688);
            double t73700 = gamma_bb[index]*gamma_bb[index];
            double t73701 = gcaa*gcaa;
            double t73702 = t73700*t73700;
            double t73703 = t73701*t73701;
            double t73704 = 1.0/pow(rho_b[index],3.2E1/3.0);
            double t73705 = 1.0/pow(rho_b[index],8.0/3.0);
            double t73706 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
               rho_b[index]*rho_b[index]);
            double t73707 = 1.0/pow(rho_b[index],1.6E1/3.0);
            double t73708 = pow(2.0,1.0/3.0);
            double t73709 = t73708*2.0;
            double t73710 = t73709-2.0;
            double t73711 = two_13*2.0;
            double t73712 = t73711-2.0;
            double t73713 = 1.0/t73712;
            double t73714 = log(t73684);
            double t73715 = a1f*c*t73662;
            double t73716 = t73715+1.0;
            double t73717 = tau_b[index]-1.0/1.0E20;
            double t73718 = ( (t73717 > 0.0) ?  1.0 : 0.0 ) ;
            double t73719 = 1.0/tau_b[index];
            double t73720 = tau_b[index]*2.0;
            double t73721 = 1.0/rho_b[index];
            double t73769 = gamma_bb[index]*t73721*(1.0/4.0);
            double t73722 = t73720-t73769;
            double t73723 = t73722*t73719*(1.0/2.0);
            double t73724 = t73723-1.0;
            double t73725 = t73724*t73718;
            double t73726 = t73725+1.0;
            double t73727 = gamma_bb[index]*gcaa*t73705*4.0;
            double t73728 = gamma_bb[index]*gcaa*t73700*t73701*t73706*4.0;
            double t73729 = t73700*t73701*t73707*6.0;
            double t73730 = t73702*t73703*t73704;
            double t73731 = t73730+t73727+t73728+t73729+1.0;
            double t73732 = 1.0/t73731;
            double t73733 = gamma_bb[index]*gcaa*t73705;
            double t73734 = t73733+1.0;
            double t73735 = 1.0/t73734;
            double t73736 = gamma_bb[index]*gcaa*t73705*3.0;
            double t73737 = gamma_bb[index]*gcaa*t73700*t73701*t73706;
            double t73738 = t73700*t73701*t73707*3.0;
            double t73739 = t73736+t73737+t73738+1.0;
            double t73740 = 1.0/t73739;
            double t73741 = gamma_bb[index]*gcaa*t73705*2.0;
            double t73742 = t73700*t73701*t73707;
            double t73743 = t73741+t73742+1.0;
            double t73744 = 1.0/t73743;
            double t73745 = 1.0/pow(rho_b[index],1.9E1/3.0);
            double t73746 = 1.0/pow(rho_b[index],1.1E1/3.0);
            double t73747 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
               rho_b[index]*rho_b[index]*rho_b[index]);
            double t73748 = 1.0/pow(rho_b[index],3.5E1/3.0);
            double t73749 = pow(rho_b[index],2.0/3.0);
            double t73750 = pow(rho_b[index],5.0/3.0);
            double t73751 = C_k*t73750*t73719;
            double t73752 = t73751+1.0;
            double t73753 = t73751-1.0;
            double t73754 = 1.0/(t73752*t73752);
            double t73755 = t73753*t73753;
            double t73756 = t73755*t73755;
            double t73757 = t73756*t73756;
            double t73758 = 1.0/pow(t73752,1.1E1);
            double t73759 = 1.0/(t73752*t73752*t73752);
            double t73760 = 1.0/(t73752*t73752*t73752*t73752);
            double t73761 = 1.0/(t73752*t73752*t73752*t73752*t73752);
            double t73762 = 1.0/(t73752*t73752*t73752*t73752*t73752*t73752);
            double t73763 = 1.0/(t73752*t73752*t73752*t73752*t73752*t73752*t73752);
            double t73764 = 1.0/(t73752*t73752*t73752*t73752*t73752*t73752*t73752*t73752);
            double t73765 = 1.0/(t73752*t73752*t73752*t73752*t73752*t73752*t73752*t73752*t73752);
            double t73766 = 1.0/pow(t73752,1.0E1);
            double t73767 = c0f*t73714*t73716*2.0;
            double t73768 = c0p*t73690*t73699*2.0;
            double t73770 = 1.0/pow(rho_b[index],1.0E1);
            double t73771 = 1.0/pow(rho_b[index],2.2E1/3.0);
            double t73772 = 1.0/(t73734*t73734);
            double t73773 = gamma_bb[index]*gcaa*t73746*(3.2E1/3.0);
            double t73774 = gamma_bb[index]*gcaa*t73700*t73701*t73747*3.2E1;
            double t73775 = t73700*t73701*t73745*3.2E1;
            double t73776 = t73702*t73703*t73748*(3.2E1/3.0);
            double t73777 = t73773+t73774+t73775+t73776;
            double t73778 = gamma_bb[index]*gcaa*t73746*(1.6E1/3.0);
            double t73779 = t73700*t73701*t73745*(1.6E1/3.0);
            double t73780 = t73778+t73779;
            double t73781 = gamma_bb[index]*gcaa*t73746*8.0;
            double t73782 = gamma_bb[index]*gcaa*t73700*t73701*t73747*8.0;
            double t73783 = t73700*t73701*t73745*1.6E1;
            double t73784 = t73781+t73782+t73783;
            double t73785 = 1.0/(t73739*t73739);
            double t73786 = 1.0/pow(rho_b[index],1.4E1/3.0);
            double t73787 = 1.0/(t73731*t73731);
            double t73788 = 1.0/pow(rho_b[index],3.8E1/3.0);
            double t73789 = 1.0/(t73743*t73743);
            double t73790 = ccaa4*t73702*t73703*t73704*t73732;
            double t73791 = ccaa1*gamma_bb[index]*gcaa*t73705*t73735;
            double t73792 = ccaa3*gamma_bb[index]*gcaa*t73700*t73701*t73740*t73706;
            double t73793 = ccaa2*t73700*t73701*t73707*t73744;
            double t73794 = ccaa0+t73790+t73791+t73792+t73793;
            double t73795 = 1.0/t73684;
            double t73796 = b4f*t73668*t73679*(2.0/3.0);
            double t73797 = b2f*c*t73673*(1.0/3.0);
            double t73798 = b1f*c*t73680*t73673*(1.0/6.0);
            double t73799 = b3f*c*t73664*t73673*(1.0/2.0);
            double t73800 = t73796+t73797+t73798+t73799;
            double t73801 = 1.0/(t73672*t73672);
            double t73802 = 1.0/pow(rho_b[index],7.0/3.0);
            double t73803 = 1.0/pow(t73663,3.0/2.0);
            double t73804 = t73800*t73800;
            double t73805 = t73697*t73697;
            double t73806 = 1.0/(t73678*t73678*t73678);
            double t73807 = t73805*t73806*t73690*t73691*2.0;
            double t73808 = b4p*t73705*t73668*(1.0E1/9.0);
            double t73809 = b2p*c*t73802*(4.0/9.0);
            double t73810 = b3p*t73705*t73680*t73668*(1.0/1.2E1);
            double t73811 = b1p*c*t73802*t73680*(2.0/9.0);
            double t73812 = b3p*c*t73802*t73664*(2.0/3.0);
            double t73813 = t73810+t73811+t73812+t73808+t73809-b1p*t73803*t73705*t73668*(1.0/3.6E1);
            double t73814 = 1.0/(t73688*t73688);
            double t73815 = 1.0/(t73678*t73678*t73678*t73678);
            double t73816 = a1p*c*c0p*t73802*t73699*(8.0/9.0);
            double t73817 = a1f*c*c0f*t73714*t73673*(2.0/3.0);
            double t73818 = a1p*c*c0p*t73673*t73699*(2.0/3.0);
            double t73819 = ccaa4*t73702*t73703*t73732*t73748*(3.2E1/3.0);
            double t73820 = ccaa1*gamma_bb[index]*gcaa*t73735*t73746*(8.0/3.0);
            double t73821 = ccaa3*gamma_bb[index]*gcaa*t73700*t73701*t73740*t73747*8.0;
            double t73822 = ccaa2*t73700*t73701*t73744*t73745*(1.6E1/3.0);
            double t73859 = ccaa1*t73700*t73701*t73745*t73772*(8.0/3.0);
            double t73860 = ccaa3*gamma_bb[index]*gcaa*t73700*t73701*t73706*t73784*t73785;
            double t73861 = ccaa4*t73702*t73703*t73704*t73777*t73787;
            double t73862 = ccaa2*t73700*t73701*t73707*t73780*t73789;
            double t73823 = t73820+t73821+t73822-t73860-t73861-t73862+t73819-t73859;
            double t73824 = X-1.0;
            double t73825 = 1.0/(k*k);
            double t73826 = 1.0/kp;
            double t73827 = 1.0/(rho_b[index]*rho_b[index]);
            double t73828 = rho_b[index]*2.0;
            double t73829 = 1.0/pow(t73828,2.0/3.0);
            double t73830 = gamma_bb[index]*mu_*t73825*t73826*t73827*t73829*(1.0/4.0);
            double t73831 = t73830+1.0;
            double t73832 = 1.0/t73831;
            double t73833 = kp-kp*t73832+1.0;
            double t73834 = C_k*C_k;
            double t73835 = pow(rho_b[index],4.0/3.0);
            double t73836 = 1.0/(tau_b[index]*tau_b[index]);
            double t73837 = 1.0/t73752;
            double t73838 = 1.0/pow(t73752,1.2E1);
            double t73839 = t73817-t73818+t73698-t73800*t73801*t73716*t73795;
            double t73840 = t73710*t73713*t73839;
            double t73841 = 1.0/(t73831*t73831);
            double t73842 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]);
            double t73843 = 1.0/pow(t73828,5.0/3.0);
            double t73844 = a_1*t73753*t73837;
            double t73845 = a_10*t73755*t73757*t73766;
            double t73846 = a_11*t73753*t73755*t73757*t73758;
            double t73847 = a_2*t73754*t73755;
            double t73848 = a_3*t73753*t73755*t73759;
            double t73849 = a_4*t73760*t73756;
            double t73850 = a_5*t73761*t73753*t73756;
            double t73851 = a_6*t73762*t73755*t73756;
            double t73852 = a_7*t73753*t73763*t73755*t73756;
            double t73853 = a_8*t73764*t73757;
            double t73854 = a_9*t73753*t73765*t73757;
            double t73855 = t73850+t73851+t73852+t73844+t73853+t73845+t73854+t73846+t73847+t73848+t73849+1.0;
            double t73856 = t73767-t73768;
            double t73857 = t73710*t73713*t73856;
            double t73858 = t73857+t73768;
            double t73863 = gamma_bb[index]*mu_*t73842*t73825*t73826*t73829*(1.0/2.0);
            double t73864 = gamma_bb[index]*mu_*t73825*t73843*t73826*t73827*(1.0/3.0);
            double t73865 = t73863+t73864;
            double t73866 = C_k*a_1*t73719*t73837*t73749*(5.0/3.0);
            double t73867 = C_k*a_2*t73753*t73754*t73719*t73749*(1.0E1/3.0);
            double t73868 = C_k*a_10*t73753*t73719*t73757*t73766*t73749*(5.0E1/3.0);
            double t73869 = C_k*a_11*t73719*t73755*t73757*t73749*t73758*(5.5E1/3.0);
            double t73870 = C_k*a_3*t73719*t73755*t73749*t73759*5.0;
            double t73871 = C_k*a_4*t73760*t73753*t73719*t73755*t73749*(2.0E1/3.0);
            double t73872 = C_k*a_5*t73761*t73719*t73756*t73749*(2.5E1/3.0);
            double t73873 = C_k*a_6*t73753*t73762*t73719*t73756*t73749*1.0E1;
            double t73874 = C_k*a_7*t73763*t73719*t73755*t73756*t73749*(3.5E1/3.0);
            double t73875 = C_k*a_8*t73753*t73719*t73755*t73764*t73756*t73749*(4.0E1/3.0);
            double t73876 = C_k*a_9*t73719*t73765*t73757*t73749*1.5E1;
            double t73877 = t73870+t73871+t73872+t73873+t73874+t73866+t73875+t73867+t73876+t73868+t73869-C_k* \
               a_1*t73753*t73754*t73719*t73749*(5.0/3.0)-C_k*a_2*t73719*t73755*t73749*t73759*(1.0E1/3.0)-C_k*a_4* \
               t73761*t73719*t73756*t73749*(2.0E1/3.0)-C_k*a_8*t73719*t73765*t73757*t73749*(4.0E1/3.0)-C_k*a_10*t73719* \
               t73755*t73757*t73749*t73758*(5.0E1/3.0)-C_k*a_3*t73760*t73753*t73719*t73755*t73749*5.0-C_k*a_5*t73753* \
               t73762*t73719*t73756*t73749*(2.5E1/3.0)-C_k*a_6*t73763*t73719*t73755*t73756*t73749*1.0E1-C_k*a_9*t73753* \
               t73719*t73757*t73766*t73749*1.5E1-C_k*a_11*t73753*t73719*t73755*t73757*t73838*t73749*(5.5E1/3.0)-C_k* \
               a_7*t73753*t73719*t73755*t73764*t73756*t73749*(3.5E1/3.0);
            v_rho_b_rho_b_[index] = t73726*t73794*(t73818-t73698+t73710*t73713*(t73817+t73698-t73800*t73801*t73716* \
               t73795-a1p*c*c0p*t73673*t73699*(2.0/3.0)))*2.0-t73824*t73833*t73877*2.0+t73823*t73726*(t73768+t73710* \
               t73713*(t73767-c0p*t73690*t73699*2.0))*2.0-rho_b[index]*t73726*t73858*(ccaa1*gamma_bb[index]*gcaa* \
               t73735*t73786*(8.8E1/9.0)-ccaa1*t73700*t73701*t73771*t73772*2.4E1+ccaa2*t73700*t73701*t73744*t73771* \
               (3.04E2/9.0)+ccaa4*t73702*t73703*t73732*t73788*(1.12E3/9.0)-ccaa2*t73700*t73701*t73780*t73745*t73789* \
               (3.2E1/3.0)-ccaa4*t73702*t73703*t73748*t73777*t73787*(6.4E1/3.0)-ccaa2*t73700*t73701*t73707*t73789* \
               (gamma_bb[index]*gcaa*t73786*(1.76E2/9.0)+t73700*t73701*t73771*(3.04E2/9.0))-ccaa4*t73702*t73703*t73704* \
               t73787*(gamma_bb[index]*gcaa*t73786*(3.52E2/9.0)+t73700*t73701*t73771*(6.08E2/3.0)+t73702*t73703*t73788* \
               (1.12E3/9.0)+gamma_bb[index]*gcaa*t73700*t73701*t73770*2.88E2)+ccaa2*t73700*t73701*t73707*1.0/(t73743* \
               t73743*t73743)*(t73780*t73780)*2.0+ccaa4*t73702*t73703*t73704*1.0/(t73731*t73731*t73731)*(t73777*t73777) \
               *2.0+ccaa3*gamma_bb[index]*gcaa*t73700*t73701*t73740*t73770*7.2E1+ccaa1*gamma_bb[index]*gcaa*t73700* \
               t73701*1.0/(t73734*t73734*t73734)*t73770*(1.28E2/9.0)+ccaa3*gamma_bb[index]*gcaa*t73700*t73701*t73706* \
               1.0/(t73739*t73739*t73739)*(t73784*t73784)*2.0-ccaa3*gamma_bb[index]*gcaa*t73700*t73701*t73706*t73785* \
               (gamma_bb[index]*gcaa*t73786*(8.8E1/3.0)+t73700*t73701*t73771*(3.04E2/3.0)+gamma_bb[index]*gcaa*t73700* \
               t73701*t73770*7.2E1)-ccaa3*gamma_bb[index]*gcaa*t73700*t73701*t73747*t73784*t73785*1.6E1)-rho_b[index]* \
               t73824*t73833*(C_k*a_1*t73662*t73719*t73837*(1.0E1/9.0)-a_1*t73834*t73754*t73835*t73836*(5.0E1/9.0) \
               +a_2*t73834*t73754*t73835*t73836*(5.0E1/9.0)+a_1*t73753*t73834*t73835*t73836*t73759*(5.0E1/9.0)+a_10* \
               t73834*t73835*t73836*t73757*t73766*2.5E2+a_2*t73760*t73834*t73835*t73755*t73836*(5.0E1/3.0)-a_2*t73753* \
               t73834*t73835*t73836*t73759*(2.0E2/9.0)-a_3*t73760*t73834*t73835*t73755*t73836*5.0E1+a_3*t73753*t73834* \
               t73835*t73836*t73759*(5.0E1/3.0)+a_4*t73760*t73834*t73835*t73755*t73836*(1.0E2/3.0)+a_4*t73762*t73834* \
               t73835*t73836*t73756*(5.0E2/9.0)-a_5*t73762*t73834*t73835*t73836*t73756*(1.25E3/9.0)+a_6*t73762*t73834* \
               t73835*t73836*t73756*(2.5E2/3.0)+a_8*t73834*t73835*t73836*t73757*t73766*2.0E2-a_9*t73834*t73835*t73836* \
               t73757*t73766*4.5E2-C_k*a_1*t73662*t73753*t73754*t73719*(1.0E1/9.0)+C_k*a_2*t73662*t73753*t73754*t73719* \
               (2.0E1/9.0)-C_k*a_2*t73662*t73719*t73755*t73759*(2.0E1/9.0)+C_k*a_3*t73662*t73719*t73755*t73759*(1.0E1/ \
               3.0)-C_k*a_4*t73662*t73761*t73719*t73756*(4.0E1/9.0)+C_k*a_5*t73662*t73761*t73719*t73756*(5.0E1/9.0) \
               -C_k*a_8*t73662*t73719*t73765*t73757*(8.0E1/9.0)+C_k*a_9*t73662*t73719*t73765*t73757*1.0E1+C_k*a_10* \
               t73662*t73753*t73719*t73757*t73766*(1.0E2/9.0)-C_k*a_10*t73662*t73719*t73755*t73757*t73758*(1.0E2/ \
               9.0)+C_k*a_11*t73662*t73719*t73755*t73757*t73758*(1.1E2/9.0)-C_k*a_3*t73760*t73662*t73753*t73719*t73755* \
               (1.0E1/3.0)+C_k*a_4*t73760*t73662*t73753*t73719*t73755*(4.0E1/9.0)-C_k*a_5*t73662*t73753*t73762*t73719* \
               t73756*(5.0E1/9.0)+C_k*a_6*t73662*t73753*t73762*t73719*t73756*(2.0E1/3.0)-C_k*a_6*t73662*t73763*t73719* \
               t73755*t73756*(2.0E1/3.0)+C_k*a_7*t73662*t73763*t73719*t73755*t73756*(7.0E1/9.0)-C_k*a_9*t73662*t73753* \
               t73719*t73757*t73766*1.0E1-a_10*t73753*t73834*t73835*t73836*t73757*t73758*(5.0E3/9.0)+a_10*t73834* \
               t73835*t73755*t73836*t73757*t73838*(2.75E3/9.0)+a_11*t73753*t73834*t73835*t73836*t73757*t73758*(2.75E3/ \
               9.0)-a_11*t73834*t73835*t73755*t73836*t73757*t73838*(6.05E3/9.0)+a_3*t73761*t73753*t73834*t73835*t73755* \
               t73836*(1.0E2/3.0)-a_4*t73761*t73753*t73834*t73835*t73755*t73836*(8.0E2/9.0)+a_5*t73761*t73753*t73834* \
               t73835*t73755*t73836*(5.0E2/9.0)+a_5*t73753*t73834*t73763*t73835*t73836*t73756*(2.5E2/3.0)-a_6*t73753* \
               t73834*t73763*t73835*t73836*t73756*2.0E2+a_6*t73834*t73835*t73755*t73764*t73836*t73756*(3.5E2/3.0) \
               +a_7*t73753*t73834*t73763*t73835*t73836*t73756*(3.5E2/3.0)-a_7*t73834*t73835*t73755*t73764*t73836* \
               t73756*(2.45E3/9.0)+a_8*t73834*t73835*t73755*t73764*t73836*t73756*(1.4E3/9.0)+a_9*t73753*t73834*t73835* \
               t73836*t73757*t73758*2.5E2+a_11*1.0/pow(t73752,1.3E1)*t73753*t73834*t73835*t73755*t73836*t73757*(1.1E3/ \
               3.0)-C_k*a_11*t73662*t73753*t73719*t73755*t73757*t73838*(1.1E2/9.0)-C_k*a_7*t73662*t73753*t73719*t73755* \
               t73764*t73756*(7.0E1/9.0)+C_k*a_8*t73662*t73753*t73719*t73755*t73764*t73756*(8.0E1/9.0)+a_7*t73753* \
               t73834*t73835*t73755*t73836*t73756*t73765*(1.4E3/9.0)-a_8*t73753*t73834*t73835*t73755*t73836*t73756* \
               t73765*(3.2E3/9.0)+a_9*t73753*t73834*t73835*t73755*t73836*t73756*t73765*2.0E2)-rho_b[index]*t73823* \
               t73726*(t73840+t73818-t73698)*2.0+rho_b[index]*t73726*t73794*(-t73807-t73816+t73710*t73713*(t73807+ \
               t73816-t73813*t73690*t73691*t73692-t73804*t73716*1.0/(t73672*t73672*t73672)*t73795*2.0+t73801*t73716* \
               t73795*(b2f*c*t73802*(4.0/9.0)+b4f*t73705*t73668*(1.0E1/9.0)+b1f*c*t73802*t73680*(2.0/9.0)+b3f*c*t73802* \
               t73664*(2.0/3.0)-b1f*t73803*t73705*t73668*(1.0/3.6E1)+b3f*t73705*t73680*t73668*(1.0/1.2E1))+t73804* \
               t73716*1.0/(t73672*t73672*t73672*t73672)*t73681*1.0/(t73684*t73684)*(1.0/2.0)-a1f*c*c0f*t73802*t73714* \
               (8.0/9.0)-t73805*t73814*t73815*t73690*t73685*(1.0/2.0)+a1f*c*t73800*t73801*t73673*t73795*(2.0/3.0) \
               -a1p*c*t73673*t73691*t73692*t73697*(2.0/3.0))+t73813*t73690*t73691*t73692+t73805*t73814*t73815*t73690* \
               t73685*(1.0/2.0)+a1p*c*t73673*t73691*t73692*t73697*(2.0/3.0))+kp*t73841*t73824*t73855*t73865*2.0+gamma_bb[index]* \
               t73721*t73823*t73718*t73719*t73858*(1.0/4.0)+kp*rho_b[index]*t73841*t73824*t73865*t73877*2.0+gamma_bb[index]* \
               t73721*t73718*t73719*t73794*(t73840+t73818-t73698)*(1.0/4.0)-kp*rho_b[index]*t73841*t73824*t73855* \
               (gamma_bb[index]*mu_*t73842*t73825*t73843*t73826*(4.0/3.0)+gamma_bb[index]*mu_*1.0/(rho_b[index]*rho_b[index]* \
               rho_b[index]*rho_b[index])*t73825*t73826*t73829*(3.0/2.0)+gamma_bb[index]*mu_*t73825*t73826*t73827* \
               1.0/pow(t73828,8.0/3.0)*(1.0E1/9.0))+kp*rho_b[index]*1.0/(t73831*t73831*t73831)*t73824*t73855*(t73865* \
               t73865)*2.0;
        } else {
            v_rho_b_rho_b_[index] = 0.0;
        } 

        if (is_gga_) {

            //V_rho_a_gamma_aa
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t71185 = 1.0/(k*k);
                double t71186 = 1.0/kp;
                double t71187 = rho_a[index]*2.0;
                double t71188 = 1.0/(rho_a[index]*rho_a[index]);
                double t71189 = 1.0/pow(t71187,2.0/3.0);
                double t71190 = pow(rho_a[index],5.0/3.0);
                double t71191 = 1.0/tau_a[index];
                double t71192 = C_k*t71190*t71191;
                double t71193 = t71192-1.0;
                double t71194 = t71193*t71193;
                double t71195 = t71194*t71194;
                double t71196 = t71195*t71195;
                double t71197 = t71192+1.0;
                double t71198 = gamma_aa[index]*mu_*t71185*t71186*t71188*t71189*(1.0/4.0);
                double t71199 = t71198+1.0;
                double t71200 = 1.0/(t71199*t71199);
                double t71201 = 1.0/t71197;
                double t71202 = a_1*t71201*t71193;
                double t71203 = 1.0/pow(t71197,1.0E1);
                double t71204 = a_10*t71203*t71194*t71196;
                double t71205 = 1.0/pow(t71197,1.1E1);
                double t71206 = a_11*t71205*t71193*t71194*t71196;
                double t71207 = 1.0/(t71197*t71197);
                double t71208 = a_2*t71207*t71194;
                double t71209 = 1.0/(t71197*t71197*t71197);
                double t71210 = a_3*t71209*t71193*t71194;
                double t71211 = 1.0/(t71197*t71197*t71197*t71197);
                double t71212 = a_4*t71211*t71195;
                double t71213 = 1.0/(t71197*t71197*t71197*t71197*t71197);
                double t71214 = a_5*t71213*t71193*t71195;
                double t71215 = 1.0/(t71197*t71197*t71197*t71197*t71197*t71197);
                double t71216 = a_6*t71215*t71194*t71195;
                double t71217 = 1.0/(t71197*t71197*t71197*t71197*t71197*t71197*t71197);
                double t71218 = a_7*t71217*t71193*t71194*t71195;
                double t71219 = 1.0/(t71197*t71197*t71197*t71197*t71197*t71197*t71197*t71197);
                double t71220 = a_8*t71219*t71196;
                double t71221 = 1.0/(t71197*t71197*t71197*t71197*t71197*t71197*t71197*t71197*t71197);
                double t71222 = a_9*t71221*t71193*t71196;
                double t71223 = t71210+t71202+t71220+t71212+t71204+t71222+t71214+t71206+t71216+t71208+t71218+1.0;
                double t71224 = pow(rho_a[index],2.0/3.0);
                double t71225 = 1.0/rho_a[index];
                double t71226 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]);
                double t71227 = 1.0/pow(t71187,5.0/3.0);
                double t71228 = rho_a[index]+rho_b[index];
                double t71229 = 1.0/pow(t71228,1.0/3.0);
                double t71230 = c*t71229;
                double t71231 = sqrt(t71230);
                double t71232 = b1p*t71231;
                double t71233 = pow(t71230,3.0/2.0);
                double t71234 = b3p*t71233;
                double t71235 = c*c;
                double t71236 = 1.0/pow(t71228,2.0/3.0);
                double t71237 = b4p*t71235*t71236;
                double t71238 = b2p*c*t71229;
                double t71239 = t71232+t71234+t71237+t71238;
                double t71240 = 1.0/pow(t71228,4.0/3.0);
                double t71241 = 1.0/c0p;
                double t71242 = 1.0/t71239;
                double t71243 = t71241*t71242*(1.0/2.0);
                double t71244 = t71243+1.0;
                double t71245 = a1p*c*t71229;
                double t71246 = t71245+1.0;
                double t71247 = rho_a[index]-rho_b[index];
                double t71248 = t71247*t71247;
                double t71249 = 1.0/t71228;
                double t71250 = t71247*t71249;
                double t71251 = two_13*2.0;
                double t71252 = t71251-2.0;
                double t71253 = 1.0/t71252;
                double t71254 = 1.0/c0f;
                double t71255 = b1f*t71231;
                double t71256 = b3f*t71233;
                double t71257 = b4f*t71235*t71236;
                double t71258 = b2f*c*t71229;
                double t71259 = t71255+t71256+t71257+t71258;
                double t71260 = 1.0/t71259;
                double t71261 = t71260*t71254*(1.0/2.0);
                double t71262 = t71261+1.0;
                double t71263 = log(t71262);
                double t71264 = a1f*c*t71229;
                double t71265 = t71264+1.0;
                double t71266 = log(t71244);
                double t71276 = c0f*t71263*t71265*2.0;
                double t71277 = c0p*t71246*t71266*2.0;
                double t71267 = t71276-t71277;
                double t71268 = t71250+1.0;
                double t71269 = pow(t71268,4.0/3.0);
                double t71270 = -t71250+1.0;
                double t71271 = pow(t71270,4.0/3.0);
                double t71272 = t71271+t71269-2.0;
                double t71273 = 1.0/(t71228*t71228);
                double t71304 = t71273*t71247;
                double t71274 = -t71304+t71249;
                double t71275 = 1.0/(t71228*t71228*t71228*t71228);
                double t71278 = t71248*t71248;
                double t71279 = 1.0/pow(t71228,5.0/3.0);
                double t71280 = 1.0/sqrt(t71230);
                double t71281 = 1.0/t71244;
                double t71282 = 1.0/(t71239*t71239);
                double t71283 = b4p*t71235*t71279*(2.0/3.0);
                double t71284 = b2p*c*t71240*(1.0/3.0);
                double t71285 = b1p*c*t71240*t71280*(1.0/6.0);
                double t71286 = b3p*c*t71231*t71240*(1.0/2.0);
                double t71287 = t71283+t71284+t71285+t71286;
                double t71288 = t71281*t71246*t71282*t71287;
                double t71289 = 1.0/(t71228*t71228*t71228*t71228*t71228);
                double t71290 = 1.0/d2fz0;
                double t71291 = 1.0/Aa;
                double t71292 = b1a*t71231;
                double t71293 = b3a*t71233;
                double t71294 = b4a*t71235*t71236;
                double t71295 = b2a*c*t71229;
                double t71296 = t71292+t71293+t71294+t71295;
                double t71297 = 1.0/t71296;
                double t71298 = t71291*t71297*(1.0/2.0);
                double t71299 = t71298+1.0;
                double t71300 = log(t71299);
                double t71301 = a1a*c*t71229;
                double t71302 = t71301+1.0;
                double t71303 = pow(t71268,1.0/3.0);
                double t71305 = t71303*t71274*(4.0/3.0);
                double t71306 = pow(t71270,1.0/3.0);
                double t71307 = t71305-t71306*t71274*(4.0/3.0);
                double t71308 = t71275*t71278;
                double t71309 = t71308-1.0;
                double t71310 = 1.0/pow(rho_a[index],1.0/3.0);
                double t71311 = c*t71310;
                double t71312 = sqrt(t71311);
                double t71313 = b1f*t71312;
                double t71314 = pow(t71311,3.0/2.0);
                double t71315 = b3f*t71314;
                double t71316 = 1.0/pow(rho_a[index],2.0/3.0);
                double t71317 = b4f*t71235*t71316;
                double t71318 = b2f*c*t71310;
                double t71319 = t71313+t71315+t71317+t71318;
                double t71320 = 1.0/pow(rho_a[index],4.0/3.0);
                double t71321 = b1p*t71312;
                double t71322 = b3p*t71314;
                double t71323 = b4p*t71235*t71316;
                double t71324 = b2p*c*t71310;
                double t71325 = t71321+t71322+t71323+t71324;
                double t71326 = 1.0/pow(rho_a[index],5.0/3.0);
                double t71327 = 1.0/sqrt(t71311);
                double t71328 = 1.0/t71319;
                double t71329 = t71254*t71328*(1.0/2.0);
                double t71330 = t71329+1.0;
                double t71331 = 1.0/t71325;
                double t71332 = t71241*t71331*(1.0/2.0);
                double t71333 = t71332+1.0;
                double t71334 = a1p*c*t71310;
                double t71335 = t71334+1.0;
                double t71336 = 1.0/t71333;
                double t71337 = 1.0/(t71325*t71325);
                double t71338 = b4p*t71235*t71326*(2.0/3.0);
                double t71339 = b2p*c*t71320*(1.0/3.0);
                double t71340 = b1p*c*t71320*t71327*(1.0/6.0);
                double t71341 = b3p*c*t71320*t71312*(1.0/2.0);
                double t71342 = t71340+t71341+t71338+t71339;
                double t71343 = t71342*t71335*t71336*t71337;
                double t71344 = log(t71333);
                double t71345 = pow(2.0,1.0/3.0);
                double t71346 = t71345*2.0;
                double t71347 = t71346-2.0;
                double t71348 = log(t71330);
                double t71349 = a1f*c*t71310;
                double t71350 = t71349+1.0;
                double t71351 = 1.0/pow(rho_a[index],8.0/3.0);
                double t71352 = gamma_aa[index]*t71351*(1.0/2.0);
                double t71353 = 1.0/pow(rho_b[index],8.0/3.0);
                double t71354 = gamma_bb[index]*t71353*(1.0/2.0);
                double t71355 = t71352+t71354;
                double t71356 = gcab*t71355;
                double t71357 = t71356+1.0;
                double t71358 = gcab*gcab;
                double t71359 = t71355*t71355;
                double t71360 = t71358*t71358;
                double t71361 = t71359*t71359;
                double t71362 = t71358*t71359;
                double t71363 = gcab*t71355*2.0;
                double t71364 = t71362+t71363+1.0;
                double t71365 = t71358*t71359*3.0;
                double t71366 = gcab*t71355*t71358*t71359;
                double t71367 = gcab*t71355*3.0;
                double t71368 = t71365+t71366+t71367+1.0;
                double t71369 = t71358*t71359*6.0;
                double t71370 = gcab*t71355*t71358*t71359*4.0;
                double t71371 = t71360*t71361;
                double t71372 = gcab*t71355*4.0;
                double t71373 = t71370+t71371+t71372+t71369+1.0;
                double t71374 = c0f*t71350*t71348*2.0;
                double t71376 = c0p*t71335*t71344*2.0;
                double t71375 = t71374-t71376;
                double t71377 = 1.0/pow(rho_b[index],1.0/3.0);
                double t71378 = c*t71377;
                double t71379 = sqrt(t71378);
                double t71380 = pow(t71378,3.0/2.0);
                double t71381 = 1.0/pow(rho_b[index],2.0/3.0);
                double t71382 = b1p*t71379;
                double t71383 = b3p*t71380;
                double t71384 = b4p*t71235*t71381;
                double t71385 = b2p*c*t71377;
                double t71386 = t71382+t71383+t71384+t71385;
                double t71387 = 1.0/t71386;
                double t71388 = t71241*t71387*(1.0/2.0);
                double t71389 = t71388+1.0;
                double t71390 = log(t71389);
                double t71391 = a1p*c*t71377;
                double t71392 = t71391+1.0;
                double t71393 = c0p*t71390*t71392*2.0;
                double t71394 = t71253*t71272*t71275*t71267*t71278;
                double t71395 = Aa*t71300*t71302*t71253*t71272*t71290*t71309*2.0;
                double t71396 = 1.0/t71357;
                double t71397 = 1.0/pow(rho_a[index],1.1E1/3.0);
                double t71398 = 1.0/(t71357*t71357);
                double t71399 = 1.0/t71364;
                double t71400 = 1.0/(t71368*t71368);
                double t71401 = 1.0/pow(rho_a[index],1.9E1/3.0);
                double t71402 = 1.0/(t71364*t71364);
                double t71403 = 1.0/t71368;
                double t71404 = 1.0/t71373;
                double t71405 = 1.0/(t71373*t71373);
                double t71406 = gcab*t71351*2.0;
                double t71407 = t71351*t71355*t71358*6.0;
                double t71408 = gcab*t71351*t71358*t71359*6.0;
                double t71409 = t71351*t71360*t71355*t71359*2.0;
                double t71410 = t71406+t71407+t71408+t71409;
                double t71411 = gamma_aa[index]*gcab*t71397*(8.0/3.0);
                double t71412 = gamma_aa[index]*t71355*t71358*t71397*(8.0/3.0);
                double t71413 = t71411+t71412;
                double t71414 = gcab*t71351;
                double t71415 = t71351*t71355*t71358;
                double t71416 = t71414+t71415;
                double t71417 = gamma_aa[index]*gcab*t71397*(1.6E1/3.0);
                double t71418 = gamma_aa[index]*gcab*t71358*t71359*t71397*1.6E1;
                double t71419 = gamma_aa[index]*t71360*t71355*t71359*t71397*(1.6E1/3.0);
                double t71420 = gamma_aa[index]*t71355*t71358*t71397*1.6E1;
                double t71421 = t71420+t71417+t71418+t71419;
                double t71422 = gcab*t71351*(3.0/2.0);
                double t71423 = t71351*t71355*t71358*3.0;
                double t71424 = gcab*t71351*t71358*t71359*(3.0/2.0);
                double t71425 = t71422+t71423+t71424;
                double t71426 = gamma_aa[index]*gcab*t71397*4.0;
                double t71427 = gamma_aa[index]*gcab*t71358*t71359*t71397*4.0;
                double t71428 = gamma_aa[index]*t71355*t71358*t71397*8.0;
                double t71429 = t71426+t71427+t71428;
                double t71430 = t71253*t71347*t71375;
                double t71431 = t71430+t71376;
                double t71432 = gamma_aa[index]*gamma_aa[index];
                double t71433 = gcaa*gcaa;
                double t71434 = t71433*t71433;
                double t71435 = 1.0/pow(rho_a[index],3.2E1/3.0);
                double t71436 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t71437 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t71438 = gamma_aa[index]*gcaa*t71351;
                double t71439 = t71438+1.0;
                double t71440 = gamma_aa[index]*gcaa*t71351*3.0;
                double t71441 = gamma_aa[index]*gcaa*t71432*t71433*t71437;
                double t71442 = t71432*t71433*t71436*3.0;
                double t71443 = t71440+t71441+t71442+1.0;
                double t71444 = t71432*t71432;
                double t71445 = gamma_aa[index]*gcaa*t71351*4.0;
                double t71446 = gamma_aa[index]*gcaa*t71432*t71433*t71437*4.0;
                double t71447 = t71432*t71433*t71436*6.0;
                double t71448 = t71434*t71435*t71444;
                double t71449 = t71445+t71446+t71447+t71448+1.0;
                double t71450 = gamma_aa[index]*gcaa*t71351*2.0;
                double t71451 = t71432*t71433*t71436;
                double t71452 = t71450+t71451+1.0;
                double t71453 = tau_a[index]-1.0/1.0E20;
                double t71454 = ( (t71453 > 0.0) ?  1.0 : 0.0 ) ;
                double t71455 = tau_a[index]*2.0;
                double t71495 = gamma_aa[index]*t71225*(1.0/4.0);
                double t71456 = t71455-t71495;
                double t71457 = t71191*t71456*(1.0/2.0);
                double t71458 = t71457-1.0;
                double t71459 = t71454*t71458;
                double t71460 = t71459+1.0;
                double t71461 = 1.0/t71439;
                double t71462 = 1.0/t71449;
                double t71463 = 1.0/t71452;
                double t71464 = 1.0/t71443;
                double t71465 = 1.0/(t71439*t71439);
                double t71466 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]*rho_a[index]);
                double t71467 = 1.0/(t71443*t71443);
                double t71468 = 1.0/(t71452*t71452);
                double t71469 = gcaa*t71351*3.0;
                double t71470 = gamma_aa[index]*t71433*t71436*6.0;
                double t71471 = gcaa*t71432*t71433*t71437*3.0;
                double t71472 = t71470+t71471+t71469;
                double t71473 = 1.0/pow(rho_a[index],3.5E1/3.0);
                double t71474 = 1.0/(t71449*t71449);
                double t71475 = gcaa*t71351*4.0;
                double t71476 = gamma_aa[index]*t71433*t71436*1.2E1;
                double t71477 = gcaa*t71432*t71433*t71437*1.2E1;
                double t71478 = gamma_aa[index]*t71432*t71434*t71435*4.0;
                double t71479 = t71475+t71476+t71477+t71478;
                double t71480 = gcaa*t71351*2.0;
                double t71481 = gamma_aa[index]*t71433*t71436*2.0;
                double t71482 = t71480+t71481;
                double t71483 = gamma_aa[index]*gcaa*t71397*(1.6E1/3.0);
                double t71484 = t71401*t71432*t71433*(1.6E1/3.0);
                double t71485 = t71483+t71484;
                double t71486 = gamma_aa[index]*gcaa*t71397*8.0;
                double t71487 = gamma_aa[index]*gcaa*t71432*t71433*t71466*8.0;
                double t71488 = t71401*t71432*t71433*1.6E1;
                double t71489 = t71486+t71487+t71488;
                double t71490 = gamma_aa[index]*gcaa*t71397*(3.2E1/3.0);
                double t71491 = gamma_aa[index]*gcaa*t71432*t71433*t71466*3.2E1;
                double t71492 = t71401*t71432*t71433*3.2E1;
                double t71493 = t71434*t71444*t71473*(3.2E1/3.0);
                double t71494 = t71490+t71491+t71492+t71493;
                double t71496 = 1.0/t71330;
                double t71497 = 1.0/(t71319*t71319);
                double t71498 = b4f*t71235*t71326*(2.0/3.0);
                double t71499 = b2f*c*t71320*(1.0/3.0);
                double t71500 = b1f*c*t71320*t71327*(1.0/6.0);
                double t71501 = b3f*c*t71320*t71312*(1.0/2.0);
                double t71502 = t71500+t71501+t71498+t71499;
                double t71503 = a1f*c*c0f*t71320*t71348*(2.0/3.0);
                double t71504 = a1p*c*c0p*t71320*t71344*(2.0/3.0);
                double t71505 = ccaa1*gcaa*t71351*t71461;
                double t71506 = ccaa4*gamma_aa[index]*t71432*t71434*t71435*t71462*4.0;
                double t71507 = ccaa2*gamma_aa[index]*t71433*t71436*t71463*2.0;
                double t71508 = ccaa3*gcaa*t71432*t71433*t71437*t71464*3.0;
                double t71513 = ccaa1*gamma_aa[index]*t71433*t71436*t71465;
                double t71514 = ccaa3*gamma_aa[index]*gcaa*t71432*t71433*t71472*t71437*t71467;
                double t71515 = ccaa4*t71434*t71435*t71444*t71474*t71479;
                double t71516 = ccaa2*t71432*t71433*t71436*t71482*t71468;
                double t71509 = -t71513+t71505-t71514+t71506-t71515+t71507-t71516+t71508;
                double t71510 = t71503-t71504+t71343-t71502*t71350*t71496*t71497;
                double t71511 = t71510*t71253*t71347;
                double t71512 = t71511+t71504-t71343;
                v_rho_a_gamma_aa_[index] = -(rho_a[index]*t71431+rho_b[index]*(t71393-t71253*t71347*(t71393-c0f*log((t71254* \
                   (1.0/2.0))/(b1f*t71379+b3f*t71380+b2f*c*t71377+b4f*t71235*t71381)+1.0)*(a1f*c*t71377+1.0)*2.0))-t71228* \
                   (t71277+t71394+t71395))*(ccab1*gcab*t71396*t71397*(4.0/3.0)-ccab2*t71402*t71358*t71359*(gcab*t71397* \
                   (8.0/3.0)+gamma_aa[index]*t71401*t71358*(4.0/3.0)+t71355*t71358*t71397*(8.0/3.0))-ccab4*t71360*t71405* \
                   t71361*(gcab*t71397*(1.6E1/3.0)+gamma_aa[index]*t71401*t71358*8.0+t71355*t71358*t71397*1.6E1+gamma_aa[index]* \
                   t71401*t71360*t71359*8.0+gcab*t71358*t71359*t71397*1.6E1+t71360*t71355*t71359*t71397*(1.6E1/3.0)+gamma_aa[index]* \
                   gcab*t71401*t71355*t71358*1.6E1)-ccab1*gamma_aa[index]*t71401*t71358*t71398*(4.0/3.0)+ccab2*gamma_aa[index]* \
                   t71401*t71358*t71399*(4.0/3.0)-ccab1*t71355*t71358*t71397*t71398*(4.0/3.0)+ccab2*t71355*t71358*t71397* \
                   t71399*(8.0/3.0)-ccab2*t71402*t71413*t71351*t71355*t71358+ccab4*t71404*t71360*t71355*t71359*t71397* \
                   (1.6E1/3.0)+ccab4*t71410*t71421*t71360*t71361*1.0/(t71373*t71373*t71373)*2.0+ccab2*t71413*t71416*1.0/ \
                   (t71364*t71364*t71364)*t71358*t71359*2.0+ccab4*gamma_aa[index]*t71401*t71404*t71360*t71359*8.0+ccab3* \
                   gcab*t71403*t71358*t71359*t71397*4.0+ccab3*gamma_aa[index]*gcab*t71401*t71403*t71355*t71358*4.0-ccab2* \
                   gamma_aa[index]*t71402*t71416*t71355*t71358*t71397*(8.0/3.0)-ccab3*gcab*t71400*t71351*t71429*t71358* \
                   t71359*(3.0/2.0)-ccab4*t71421*t71351*t71360*t71405*t71355*t71359*2.0-ccab3*gcab*t71400*t71355*t71358* \
                   t71359*(gcab*t71397*4.0+gamma_aa[index]*t71401*t71358*4.0+t71355*t71358*t71397*8.0+gcab*t71358*t71359* \
                   t71397*4.0+gamma_aa[index]*gcab*t71401*t71355*t71358*4.0)+ccab1*gamma_aa[index]*gcab*t71401*t71355* \
                   1.0/(t71357*t71357*t71357)*t71358*(4.0/3.0)+ccab3*gcab*t71425*t71355*t71429*t71358*t71359*1.0/(t71368* \
                   t71368*t71368)*2.0-ccab3*gamma_aa[index]*gcab*t71400*t71425*t71358*t71359*t71397*4.0-ccab4*gamma_aa[index]* \
                   t71410*t71360*t71405*t71355*t71359*t71397*(1.6E1/3.0))-(X-1.0)*(-kp*rho_a[index]*t71200*t71223*(mu_* \
                   t71226*t71185*t71186*t71189*(1.0/2.0)+mu_*t71227*t71185*t71186*t71188*(1.0/3.0))+mu_*t71200*t71223* \
                   t71185*t71188*t71189*(1.0/4.0)+mu_*t71200*t71225*t71185*t71189*(C_k*a_1*t71201*t71224*t71191*(5.0/ \
                   3.0)-C_k*a_1*t71224*t71207*t71191*t71193*(5.0/3.0)+C_k*a_2*t71224*t71207*t71191*t71193*(1.0E1/3.0) \
                   -C_k*a_2*t71224*t71191*t71209*t71194*(1.0E1/3.0)+C_k*a_3*t71224*t71191*t71209*t71194*5.0-C_k*a_4*t71213* \
                   t71224*t71191*t71195*(2.0E1/3.0)+C_k*a_5*t71213*t71224*t71191*t71195*(2.5E1/3.0)-C_k*a_8*t71221*t71224* \
                   t71191*t71196*(4.0E1/3.0)+C_k*a_9*t71221*t71224*t71191*t71196*1.5E1+C_k*a_10*t71203*t71224*t71191* \
                   t71193*t71196*(5.0E1/3.0)-C_k*a_10*t71205*t71224*t71191*t71194*t71196*(5.0E1/3.0)+C_k*a_11*t71205* \
                   t71224*t71191*t71194*t71196*(5.5E1/3.0)-C_k*a_3*t71211*t71224*t71191*t71193*t71194*5.0+C_k*a_4*t71211* \
                   t71224*t71191*t71193*t71194*(2.0E1/3.0)-C_k*a_5*t71215*t71224*t71191*t71193*t71195*(2.5E1/3.0)+C_k* \
                   a_6*t71215*t71224*t71191*t71193*t71195*1.0E1-C_k*a_6*t71224*t71217*t71191*t71194*t71195*1.0E1+C_k* \
                   a_7*t71224*t71217*t71191*t71194*t71195*(3.5E1/3.0)-C_k*a_9*t71203*t71224*t71191*t71193*t71196*1.5E1- \
                   C_k*a_11*t71224*t71191*t71193*t71194*t71196*1.0/pow(t71197,1.2E1)*(5.5E1/3.0)-C_k*a_7*t71224*t71191* \
                   t71219*t71193*t71194*t71195*(3.5E1/3.0)+C_k*a_8*t71224*t71191*t71219*t71193*t71194*t71195*(4.0E1/3.0) \
                   )*(1.0/4.0)+mu_*t71223*t71225*t71185*t71189*1.0/(t71199*t71199*t71199)*(gamma_aa[index]*mu_*t71226* \
                   t71185*t71186*t71189*(1.0/2.0)+gamma_aa[index]*mu_*t71227*t71185*t71186*t71188*(1.0/3.0))*(1.0/2.0) \
                   )-(t71277+t71394+t71395+t71228*(t71288-t71253*t71272*t71275*t71278*(t71288-(t71265*1.0/(t71259*t71259) \
                   *(b2f*c*t71240*(1.0/3.0)+b4f*t71235*t71279*(2.0/3.0)+b1f*c*t71240*t71280*(1.0/6.0)+b3f*c*t71231*t71240* \
                   (1.0/2.0)))/t71262+a1f*c*c0f*t71240*t71263*(2.0/3.0)-a1p*c*c0p*t71240*t71266*(2.0/3.0))-a1p*c*c0p* \
                   t71240*t71266*(2.0/3.0)+t71253*t71307*t71275*t71267*t71278-t71253*t71272*t71267*t71278*t71289*4.0+ \
                   t71253*t71272*t71247*t71248*t71275*t71267*4.0-Aa*t71300*t71302*t71253*t71272*t71290*(t71278*t71289* \
                   4.0-t71247*t71248*t71275*4.0)*2.0+Aa*t71300*t71302*t71253*t71307*t71290*t71309*2.0+(t71302*t71253* \
                   t71272*t71290*t71309*1.0/(t71296*t71296)*(b2a*c*t71240*(1.0/3.0)+b4a*t71235*t71279*(2.0/3.0)+b1a*c* \
                   t71240*t71280*(1.0/6.0)+b3a*c*t71231*t71240*(1.0/2.0)))/t71299-Aa*a1a*c*t71300*t71240*t71253*t71272* \
                   t71290*t71309*(2.0/3.0))+rho_a[index]*(t71504-t71343+t71253*t71347*(t71503+t71343-t71502*t71350*t71496* \
                   t71497-a1p*c*c0p*t71320*t71344*(2.0/3.0)))-c0p*t71335*t71344*2.0-t71253*t71347*t71375)*(ccab1*gcab* \
                   t71351*t71396*(1.0/2.0)-ccab4*t71410*t71360*t71405*t71361-ccab2*t71402*t71416*t71358*t71359-ccab1* \
                   t71351*t71355*t71358*t71398*(1.0/2.0)+ccab2*t71351*t71355*t71358*t71399+ccab4*t71404*t71351*t71360* \
                   t71355*t71359*2.0+ccab3*gcab*t71403*t71351*t71358*t71359*(3.0/2.0)-ccab3*gcab*t71400*t71425*t71355* \
                   t71358*t71359)-t71431*t71460*t71509+rho_a[index]*t71512*t71460*t71509-rho_a[index]*t71431*t71460*(ccaa1* \
                   gcaa*t71461*t71397*(-8.0/3.0)-ccaa2*gamma_aa[index]*t71401*t71433*t71463*(3.2E1/3.0)+ccaa1*gamma_aa[index]* \
                   t71401*t71433*t71465*8.0+ccaa2*t71401*t71432*t71433*t71482*t71468*(1.6E1/3.0)+ccaa4*t71434*t71444* \
                   t71473*t71474*t71479*(3.2E1/3.0)+ccaa4*t71434*t71435*t71444*t71474*(gcaa*t71397*(3.2E1/3.0)+gamma_aa[index]* \
                   t71401*t71433*6.4E1+gamma_aa[index]*t71432*t71434*t71473*(1.28E2/3.0)+gcaa*t71432*t71433*t71466*9.6E1) \
                   -ccaa1*gcaa*t71432*t71433*1.0/(t71439*t71439*t71439)*t71466*(1.6E1/3.0)+ccaa2*t71432*t71433*t71436* \
                   t71468*(gcaa*t71397*(1.6E1/3.0)+gamma_aa[index]*t71401*t71433*(3.2E1/3.0))-ccaa4*gamma_aa[index]*t71432* \
                   t71434*t71462*t71473*(1.28E2/3.0)+ccaa2*gamma_aa[index]*t71433*t71436*t71485*t71468*2.0-ccaa3*gcaa* \
                   t71432*t71433*t71464*t71466*2.4E1+ccaa4*gamma_aa[index]*t71432*t71434*t71435*t71474*t71494*4.0+ccaa3* \
                   gcaa*t71432*t71433*t71437*t71467*t71489*3.0-ccaa2*t71432*t71433*1.0/(t71452*t71452*t71452)*t71436* \
                   t71482*t71485*2.0-ccaa4*t71434*t71435*t71444*1.0/(t71449*t71449*t71449)*t71494*t71479*2.0+ccaa3*gamma_aa[index]* \
                   gcaa*t71432*t71433*t71437*t71467*(gcaa*t71397*8.0+gamma_aa[index]*t71401*t71433*3.2E1+gcaa*t71432* \
                   t71433*t71466*2.4E1)+ccaa3*gamma_aa[index]*gcaa*t71432*t71433*t71472*t71466*t71467*8.0-ccaa3*gamma_aa[index]* \
                   gcaa*t71432*t71433*1.0/(t71443*t71443*t71443)*t71472*t71437*t71489*2.0)-t71512*t71191*t71454*(ccaa0+ \
                   ccaa1*gamma_aa[index]*gcaa*t71351*t71461+ccaa2*t71432*t71433*t71436*t71463+ccaa4*t71434*t71435*t71444* \
                   t71462+ccaa3*gamma_aa[index]*gcaa*t71432*t71433*t71437*t71464)*(1.0/8.0)-t71431*t71191*t71454*(ccaa1* \
                   gamma_aa[index]*gcaa*t71461*t71397*(8.0/3.0)+ccaa2*t71401*t71432*t71433*t71463*(1.6E1/3.0)-ccaa1*t71401* \
                   t71432*t71433*t71465*(8.0/3.0)+ccaa4*t71434*t71444*t71462*t71473*(3.2E1/3.0)-ccaa2*t71432*t71433*t71436* \
                   t71485*t71468-ccaa4*t71434*t71435*t71444*t71474*t71494+ccaa3*gamma_aa[index]*gcaa*t71432*t71433*t71464* \
                   t71466*8.0-ccaa3*gamma_aa[index]*gcaa*t71432*t71433*t71437*t71467*t71489)*(1.0/8.0)-gamma_aa[index]* \
                   t71431*t71225*t71191*t71454*t71509*(1.0/8.0);
            } else if (rho_a[index] > cutoff_) {
                double t75006 = 1.0/pow(rho_a[index],1.0/3.0);
                double t75007 = c*t75006;
                double t75008 = sqrt(t75007);
                double t75009 = pow(t75007,3.0/2.0);
                double t75010 = c*c;
                double t75011 = 1.0/pow(rho_a[index],2.0/3.0);
                double t75012 = 1.0/c0p;
                double t75013 = b1p*t75008;
                double t75014 = b3p*t75009;
                double t75015 = b4p*t75010*t75011;
                double t75016 = b2p*c*t75006;
                double t75017 = t75013+t75014+t75015+t75016;
                double t75018 = 1.0/t75017;
                double t75019 = t75012*t75018*(1.0/2.0);
                double t75020 = t75019+1.0;
                double t75021 = log(t75020);
                double t75022 = a1p*c*t75006;
                double t75023 = t75022+1.0;
                double t75024 = 1.0/pow(rho_a[index],8.0/3.0);
                double t75025 = gamma_aa[index]*gamma_aa[index];
                double t75026 = gcaa*gcaa;
                double t75027 = t75026*t75026;
                double t75028 = 1.0/pow(rho_a[index],3.2E1/3.0);
                double t75029 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t75030 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t75031 = gamma_aa[index]*gcaa*t75024;
                double t75032 = t75031+1.0;
                double t75033 = gamma_aa[index]*gcaa*t75024*3.0;
                double t75034 = gamma_aa[index]*gcaa*t75030*t75025*t75026;
                double t75035 = t75025*t75026*t75029*3.0;
                double t75036 = t75033+t75034+t75035+1.0;
                double t75037 = t75025*t75025;
                double t75038 = gamma_aa[index]*gcaa*t75024*4.0;
                double t75039 = gamma_aa[index]*gcaa*t75030*t75025*t75026*4.0;
                double t75040 = t75025*t75026*t75029*6.0;
                double t75041 = t75027*t75028*t75037;
                double t75042 = t75040+t75041+t75038+t75039+1.0;
                double t75043 = gamma_aa[index]*gcaa*t75024*2.0;
                double t75044 = t75025*t75026*t75029;
                double t75045 = t75043+t75044+1.0;
                double t75046 = pow(2.0,1.0/3.0);
                double t75047 = t75046*2.0;
                double t75048 = t75047-2.0;
                double t75049 = two_13*2.0;
                double t75050 = t75049-2.0;
                double t75051 = 1.0/t75050;
                double t75052 = 1.0/c0f;
                double t75053 = b1f*t75008;
                double t75054 = b3f*t75009;
                double t75055 = b4f*t75010*t75011;
                double t75056 = b2f*c*t75006;
                double t75057 = t75053+t75054+t75055+t75056;
                double t75058 = 1.0/t75057;
                double t75059 = t75052*t75058*(1.0/2.0);
                double t75060 = t75059+1.0;
                double t75061 = log(t75060);
                double t75062 = a1f*c*t75006;
                double t75063 = t75062+1.0;
                double t75064 = c0f*t75061*t75063*2.0;
                double t75065 = c0p*t75021*t75023*2.0;
                double t75066 = tau_a[index]-1.0/1.0E20;
                double t75067 = ( (t75066 > 0.0) ?  1.0 : 0.0 ) ;
                double t75068 = 1.0/tau_a[index];
                double t75069 = tau_a[index]*2.0;
                double t75070 = 1.0/rho_a[index];
                double t75115 = gamma_aa[index]*t75070*(1.0/4.0);
                double t75071 = -t75115+t75069;
                double t75072 = t75071*t75068*(1.0/2.0);
                double t75073 = t75072-1.0;
                double t75074 = t75073*t75067;
                double t75075 = t75074+1.0;
                double t75076 = 1.0/t75032;
                double t75077 = 1.0/t75042;
                double t75078 = 1.0/t75045;
                double t75079 = 1.0/t75036;
                double t75080 = 1.0/pow(rho_a[index],1.9E1/3.0);
                double t75081 = 1.0/(t75032*t75032);
                double t75082 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]*rho_a[index]);
                double t75083 = 1.0/pow(rho_a[index],1.1E1/3.0);
                double t75084 = 1.0/(t75036*t75036);
                double t75085 = 1.0/(t75045*t75045);
                double t75086 = gcaa*t75024*3.0;
                double t75087 = gamma_aa[index]*t75026*t75029*6.0;
                double t75088 = gcaa*t75030*t75025*t75026*3.0;
                double t75089 = t75086+t75087+t75088;
                double t75090 = 1.0/pow(rho_a[index],3.5E1/3.0);
                double t75091 = 1.0/(t75042*t75042);
                double t75092 = gcaa*t75024*4.0;
                double t75093 = gamma_aa[index]*t75026*t75029*1.2E1;
                double t75094 = gcaa*t75030*t75025*t75026*1.2E1;
                double t75095 = gamma_aa[index]*t75025*t75027*t75028*4.0;
                double t75096 = t75092+t75093+t75094+t75095;
                double t75097 = gcaa*t75024*2.0;
                double t75098 = gamma_aa[index]*t75026*t75029*2.0;
                double t75099 = t75097+t75098;
                double t75100 = gamma_aa[index]*gcaa*t75083*(1.6E1/3.0);
                double t75101 = t75025*t75026*t75080*(1.6E1/3.0);
                double t75102 = t75100+t75101;
                double t75103 = gamma_aa[index]*gcaa*t75083*8.0;
                double t75104 = gamma_aa[index]*gcaa*t75025*t75026*t75082*8.0;
                double t75105 = t75025*t75026*t75080*1.6E1;
                double t75106 = t75103+t75104+t75105;
                double t75107 = gamma_aa[index]*gcaa*t75083*(3.2E1/3.0);
                double t75108 = gamma_aa[index]*gcaa*t75025*t75026*t75082*3.2E1;
                double t75109 = t75025*t75026*t75080*3.2E1;
                double t75110 = t75027*t75090*t75037*(3.2E1/3.0);
                double t75111 = t75110+t75107+t75108+t75109;
                double t75112 = t75064-t75065;
                double t75113 = t75112*t75051*t75048;
                double t75114 = t75113+t75065;
                double t75116 = 1.0/pow(rho_a[index],4.0/3.0);
                double t75117 = 1.0/pow(rho_a[index],5.0/3.0);
                double t75118 = 1.0/sqrt(t75007);
                double t75119 = 1.0/t75020;
                double t75120 = 1.0/(t75017*t75017);
                double t75121 = b4p*t75010*t75117*(2.0/3.0);
                double t75122 = b2p*c*t75116*(1.0/3.0);
                double t75123 = b1p*c*t75116*t75118*(1.0/6.0);
                double t75124 = b3p*c*t75008*t75116*(1.0/2.0);
                double t75125 = t75121+t75122+t75123+t75124;
                double t75126 = t75120*t75023*t75125*t75119;
                double t75127 = ccaa1*gcaa*t75024*t75076;
                double t75128 = ccaa4*gamma_aa[index]*t75025*t75027*t75028*t75077*4.0;
                double t75129 = ccaa2*gamma_aa[index]*t75026*t75029*t75078*2.0;
                double t75130 = ccaa3*gcaa*t75030*t75025*t75026*t75079*3.0;
                double t75141 = ccaa1*gamma_aa[index]*t75026*t75081*t75029;
                double t75142 = ccaa3*gamma_aa[index]*gcaa*t75030*t75025*t75026*t75084*t75089;
                double t75143 = ccaa4*t75027*t75028*t75037*t75091*t75096;
                double t75144 = ccaa2*t75025*t75026*t75029*t75085*t75099;
                double t75131 = t75130-t75141-t75142-t75143-t75144+t75127+t75128+t75129;
                double t75132 = 1.0/t75060;
                double t75133 = 1.0/(t75057*t75057);
                double t75134 = b4f*t75010*t75117*(2.0/3.0);
                double t75135 = b2f*c*t75116*(1.0/3.0);
                double t75136 = b1f*c*t75116*t75118*(1.0/6.0);
                double t75137 = b3f*c*t75008*t75116*(1.0/2.0);
                double t75138 = t75134+t75135+t75136+t75137;
                double t75139 = a1f*c*c0f*t75061*t75116*(2.0/3.0);
                double t75140 = a1p*c*c0p*t75021*t75116*(2.0/3.0);
                double t75145 = 1.0/(k*k);
                double t75146 = 1.0/kp;
                double t75147 = rho_a[index]*2.0;
                double t75148 = 1.0/(rho_a[index]*rho_a[index]);
                double t75149 = 1.0/pow(t75147,2.0/3.0);
                double t75150 = pow(rho_a[index],5.0/3.0);
                double t75151 = C_k*t75150*t75068;
                double t75152 = t75151-1.0;
                double t75153 = t75152*t75152;
                double t75154 = t75153*t75153;
                double t75155 = t75154*t75154;
                double t75156 = t75151+1.0;
                double t75157 = gamma_aa[index]*mu_*t75145*t75146*t75148*t75149*(1.0/4.0);
                double t75158 = t75157+1.0;
                double t75159 = 1.0/(t75158*t75158);
                double t75160 = X-1.0;
                double t75161 = 1.0/t75156;
                double t75162 = pow(rho_a[index],2.0/3.0);
                double t75163 = 1.0/(t75156*t75156);
                double t75164 = 1.0/pow(t75156,1.0E1);
                double t75165 = 1.0/pow(t75156,1.1E1);
                double t75166 = 1.0/(t75156*t75156*t75156);
                double t75167 = 1.0/(t75156*t75156*t75156*t75156);
                double t75168 = 1.0/(t75156*t75156*t75156*t75156*t75156);
                double t75169 = 1.0/(t75156*t75156*t75156*t75156*t75156*t75156);
                double t75170 = 1.0/(t75156*t75156*t75156*t75156*t75156*t75156*t75156);
                double t75171 = 1.0/(t75156*t75156*t75156*t75156*t75156*t75156*t75156*t75156);
                double t75172 = 1.0/(t75156*t75156*t75156*t75156*t75156*t75156*t75156*t75156*t75156);
                double t75173 = a_1*t75152*t75161;
                double t75174 = a_10*t75153*t75155*t75164;
                double t75175 = a_11*t75152*t75153*t75155*t75165;
                double t75176 = a_2*t75153*t75163;
                double t75177 = a_3*t75152*t75153*t75166;
                double t75178 = a_4*t75154*t75167;
                double t75179 = a_5*t75152*t75154*t75168;
                double t75180 = a_6*t75153*t75154*t75169;
                double t75181 = a_7*t75152*t75170*t75153*t75154;
                double t75182 = a_8*t75171*t75155;
                double t75183 = a_9*t75152*t75172*t75155;
                double t75184 = t75180+t75181+t75173+t75182+t75174+t75183+t75175+t75176+t75177+t75178+t75179+1.0;
                double t75185 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]);
                double t75186 = 1.0/pow(t75147,5.0/3.0);
                v_rho_a_gamma_aa_[index] = -t75131*t75075*(t75065+t75051*t75048*(t75064-c0p*t75021*t75023*2.0))-rho_a[index]* \
                   t75114*t75075*(ccaa1*gcaa*t75083*t75076*(-8.0/3.0)+ccaa1*gamma_aa[index]*t75026*t75080*t75081*8.0- \
                   ccaa2*gamma_aa[index]*t75026*t75080*t75078*(3.2E1/3.0)+ccaa2*t75025*t75026*t75080*t75085*t75099*(1.6E1/ \
                   3.0)+ccaa4*t75027*t75090*t75037*t75091*t75096*(3.2E1/3.0)+ccaa4*t75027*t75028*t75037*t75091*(gcaa* \
                   t75083*(3.2E1/3.0)+gamma_aa[index]*t75026*t75080*6.4E1+gamma_aa[index]*t75025*t75027*t75090*(1.28E2/ \
                   3.0)+gcaa*t75025*t75026*t75082*9.6E1)-ccaa1*gcaa*1.0/(t75032*t75032*t75032)*t75025*t75026*t75082*(1.6E1/ \
                   3.0)+ccaa2*t75025*t75026*t75029*t75085*(gcaa*t75083*(1.6E1/3.0)+gamma_aa[index]*t75026*t75080*(3.2E1/ \
                   3.0))+ccaa2*gamma_aa[index]*t75102*t75026*t75029*t75085*2.0-ccaa4*gamma_aa[index]*t75025*t75027*t75090* \
                   t75077*(1.28E2/3.0)-ccaa3*gcaa*t75025*t75026*t75082*t75079*2.4E1+ccaa4*gamma_aa[index]*t75111*t75025* \
                   t75027*t75028*t75091*4.0+ccaa3*gcaa*t75030*t75025*t75106*t75026*t75084*3.0-ccaa4*t75111*1.0/(t75042* \
                   t75042*t75042)*t75027*t75028*t75037*t75096*2.0-ccaa2*t75102*t75025*t75026*1.0/(t75045*t75045*t75045) \
                   *t75029*t75099*2.0+ccaa3*gamma_aa[index]*gcaa*t75030*t75025*t75026*t75084*(gcaa*t75083*8.0+gamma_aa[index]* \
                   t75026*t75080*3.2E1+gcaa*t75025*t75026*t75082*2.4E1)+ccaa3*gamma_aa[index]*gcaa*t75025*t75026*t75082* \
                   t75084*t75089*8.0-ccaa3*gamma_aa[index]*gcaa*t75030*t75025*t75106*t75026*1.0/(t75036*t75036*t75036) \
                   *t75089*2.0)+rho_a[index]*t75131*t75075*(t75140-t75126+t75051*t75048*(t75126+t75139-t75132*t75133* \
                   t75063*t75138-a1p*c*c0p*t75021*t75116*(2.0/3.0)))-t75114*t75067*t75068*(ccaa1*gamma_aa[index]*gcaa* \
                   t75083*t75076*(8.0/3.0)-ccaa1*t75025*t75026*t75080*t75081*(8.0/3.0)+ccaa2*t75025*t75026*t75080*t75078* \
                   (1.6E1/3.0)+ccaa4*t75027*t75090*t75037*t75077*(3.2E1/3.0)-ccaa2*t75102*t75025*t75026*t75029*t75085- \
                   ccaa4*t75111*t75027*t75028*t75037*t75091+ccaa3*gamma_aa[index]*gcaa*t75025*t75026*t75082*t75079*8.0- \
                   ccaa3*gamma_aa[index]*gcaa*t75030*t75025*t75106*t75026*t75084)*(1.0/8.0)+t75067*t75068*(-t75140+t75126+ \
                   t75051*t75048*(t75140-t75126-t75139+t75132*t75133*t75063*t75138))*(ccaa0+ccaa1*gamma_aa[index]*gcaa* \
                   t75024*t75076+ccaa2*t75025*t75026*t75029*t75078+ccaa4*t75027*t75028*t75037*t75077+ccaa3*gamma_aa[index]* \
                   gcaa*t75030*t75025*t75026*t75079)*(1.0/8.0)-gamma_aa[index]*t75131*t75114*t75070*t75067*t75068*(1.0/ \
                   8.0)+kp*rho_a[index]*t75160*t75184*t75159*(mu_*t75145*t75146*t75148*t75186*(1.0/3.0)+mu_*t75145*t75146* \
                   t75149*t75185*(1.0/2.0))-mu_*t75160*t75145*t75148*t75184*t75149*t75159*(1.0/4.0)-mu_*t75070*t75160* \
                   t75145*t75149*t75159*(C_k*a_1*t75161*t75162*t75068*(5.0/3.0)-C_k*a_1*t75152*t75162*t75163*t75068*(5.0/ \
                   3.0)+C_k*a_2*t75152*t75162*t75163*t75068*(1.0E1/3.0)-C_k*a_2*t75153*t75162*t75166*t75068*(1.0E1/3.0) \
                   +C_k*a_3*t75153*t75162*t75166*t75068*5.0-C_k*a_4*t75162*t75154*t75068*t75168*(2.0E1/3.0)+C_k*a_5*t75162* \
                   t75154*t75068*t75168*(2.5E1/3.0)-C_k*a_8*t75162*t75172*t75155*t75068*(4.0E1/3.0)+C_k*a_9*t75162*t75172* \
                   t75155*t75068*1.5E1+C_k*a_10*t75152*t75162*t75155*t75164*t75068*(5.0E1/3.0)-C_k*a_10*t75153*t75162* \
                   t75155*t75165*t75068*(5.0E1/3.0)+C_k*a_11*t75153*t75162*t75155*t75165*t75068*(5.5E1/3.0)-C_k*a_3*t75152* \
                   t75153*t75162*t75068*t75167*5.0+C_k*a_4*t75152*t75153*t75162*t75068*t75167*(2.0E1/3.0)-C_k*a_5*t75152* \
                   t75162*t75154*t75068*t75169*(2.5E1/3.0)-C_k*a_6*t75170*t75153*t75162*t75154*t75068*1.0E1+C_k*a_6*t75152* \
                   t75162*t75154*t75068*t75169*1.0E1+C_k*a_7*t75170*t75153*t75162*t75154*t75068*(3.5E1/3.0)-C_k*a_9*t75152* \
                   t75162*t75155*t75164*t75068*1.5E1-C_k*a_11*t75152*t75153*t75162*t75155*1.0/pow(t75156,1.2E1)*t75068* \
                   (5.5E1/3.0)-C_k*a_7*t75152*t75153*t75162*t75171*t75154*t75068*(3.5E1/3.0)+C_k*a_8*t75152*t75153*t75162* \
                   t75171*t75154*t75068*(4.0E1/3.0))*(1.0/4.0)-mu_*t75070*t75160*t75145*t75184*t75149*1.0/(t75158*t75158* \
                   t75158)*(gamma_aa[index]*mu_*t75145*t75146*t75148*t75186*(1.0/3.0)+gamma_aa[index]*mu_*t75145*t75146* \
                   t75149*t75185*(1.0/2.0))*(1.0/2.0);
            } else if (rho_b[index] > cutoff_) {
                v_rho_a_gamma_aa_[index] = 0.0;
            } else {
                v_rho_a_gamma_aa_[index] = 0.0;
            } 

            //V_rho_a_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_a_gamma_ab_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_a_gamma_ab_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_a_gamma_ab_[index] = 0.0;
            } else {
                v_rho_a_gamma_ab_[index] = 0.0;
            } 

            //V_rho_a_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t71519 = rho_a[index]+rho_b[index];
                double t71520 = 1.0/pow(t71519,1.0/3.0);
                double t71521 = c*t71520;
                double t71522 = sqrt(t71521);
                double t71523 = b1p*t71522;
                double t71524 = pow(t71521,3.0/2.0);
                double t71525 = b3p*t71524;
                double t71526 = c*c;
                double t71527 = 1.0/pow(t71519,2.0/3.0);
                double t71528 = b4p*t71526*t71527;
                double t71529 = b2p*c*t71520;
                double t71530 = t71523+t71525+t71528+t71529;
                double t71531 = 1.0/pow(t71519,4.0/3.0);
                double t71532 = 1.0/c0p;
                double t71533 = 1.0/t71530;
                double t71534 = t71532*t71533*(1.0/2.0);
                double t71535 = t71534+1.0;
                double t71536 = a1p*c*t71520;
                double t71537 = t71536+1.0;
                double t71538 = rho_a[index]-rho_b[index];
                double t71539 = t71538*t71538;
                double t71540 = 1.0/t71519;
                double t71541 = t71540*t71538;
                double t71542 = two_13*2.0;
                double t71543 = t71542-2.0;
                double t71544 = 1.0/t71543;
                double t71545 = 1.0/c0f;
                double t71546 = b1f*t71522;
                double t71547 = b3f*t71524;
                double t71548 = b4f*t71526*t71527;
                double t71549 = b2f*c*t71520;
                double t71550 = t71546+t71547+t71548+t71549;
                double t71551 = 1.0/t71550;
                double t71552 = t71551*t71545*(1.0/2.0);
                double t71553 = t71552+1.0;
                double t71554 = log(t71553);
                double t71555 = a1f*c*t71520;
                double t71556 = t71555+1.0;
                double t71557 = log(t71535);
                double t71567 = c0f*t71554*t71556*2.0;
                double t71568 = c0p*t71537*t71557*2.0;
                double t71558 = t71567-t71568;
                double t71559 = t71541+1.0;
                double t71560 = pow(t71559,4.0/3.0);
                double t71561 = -t71541+1.0;
                double t71562 = pow(t71561,4.0/3.0);
                double t71563 = t71560+t71562-2.0;
                double t71564 = 1.0/(t71519*t71519);
                double t71595 = t71564*t71538;
                double t71565 = t71540-t71595;
                double t71566 = 1.0/(t71519*t71519*t71519*t71519);
                double t71569 = t71539*t71539;
                double t71570 = 1.0/pow(t71519,5.0/3.0);
                double t71571 = 1.0/sqrt(t71521);
                double t71572 = 1.0/t71535;
                double t71573 = 1.0/(t71530*t71530);
                double t71574 = b4p*t71570*t71526*(2.0/3.0);
                double t71575 = b2p*c*t71531*(1.0/3.0);
                double t71576 = b1p*c*t71531*t71571*(1.0/6.0);
                double t71577 = b3p*c*t71522*t71531*(1.0/2.0);
                double t71578 = t71574+t71575+t71576+t71577;
                double t71579 = t71572*t71537*t71573*t71578;
                double t71580 = 1.0/(t71519*t71519*t71519*t71519*t71519);
                double t71581 = 1.0/d2fz0;
                double t71582 = 1.0/Aa;
                double t71583 = b1a*t71522;
                double t71584 = b3a*t71524;
                double t71585 = b4a*t71526*t71527;
                double t71586 = b2a*c*t71520;
                double t71587 = t71583+t71584+t71585+t71586;
                double t71588 = 1.0/t71587;
                double t71589 = t71582*t71588*(1.0/2.0);
                double t71590 = t71589+1.0;
                double t71591 = log(t71590);
                double t71592 = a1a*c*t71520;
                double t71593 = t71592+1.0;
                double t71594 = pow(t71559,1.0/3.0);
                double t71596 = t71565*t71594*(4.0/3.0);
                double t71597 = pow(t71561,1.0/3.0);
                double t71598 = t71596-t71565*t71597*(4.0/3.0);
                double t71599 = t71566*t71569;
                double t71600 = t71599-1.0;
                double t71601 = 1.0/pow(rho_a[index],1.0/3.0);
                double t71602 = c*t71601;
                double t71603 = sqrt(t71602);
                double t71604 = b1f*t71603;
                double t71605 = pow(t71602,3.0/2.0);
                double t71606 = b3f*t71605;
                double t71607 = 1.0/pow(rho_a[index],2.0/3.0);
                double t71608 = b4f*t71526*t71607;
                double t71609 = b2f*c*t71601;
                double t71610 = t71604+t71606+t71608+t71609;
                double t71611 = 1.0/pow(rho_a[index],4.0/3.0);
                double t71612 = b1p*t71603;
                double t71613 = b3p*t71605;
                double t71614 = b4p*t71526*t71607;
                double t71615 = b2p*c*t71601;
                double t71616 = t71612+t71613+t71614+t71615;
                double t71617 = 1.0/pow(rho_a[index],5.0/3.0);
                double t71618 = 1.0/sqrt(t71602);
                double t71619 = 1.0/t71610;
                double t71620 = t71545*t71619*(1.0/2.0);
                double t71621 = t71620+1.0;
                double t71622 = 1.0/t71616;
                double t71623 = t71532*t71622*(1.0/2.0);
                double t71624 = t71623+1.0;
                double t71625 = a1p*c*t71601;
                double t71626 = t71625+1.0;
                double t71627 = 1.0/t71624;
                double t71628 = 1.0/(t71616*t71616);
                double t71629 = b4p*t71526*t71617*(2.0/3.0);
                double t71630 = b2p*c*t71611*(1.0/3.0);
                double t71631 = b1p*c*t71611*t71618*(1.0/6.0);
                double t71632 = b3p*c*t71611*t71603*(1.0/2.0);
                double t71633 = t71630+t71631+t71632+t71629;
                double t71634 = t71633*t71626*t71627*t71628;
                double t71635 = log(t71624);
                double t71636 = pow(2.0,1.0/3.0);
                double t71637 = t71636*2.0;
                double t71638 = t71637-2.0;
                double t71639 = log(t71621);
                double t71640 = a1f*c*t71601;
                double t71641 = t71640+1.0;
                double t71642 = 1.0/pow(rho_b[index],8.0/3.0);
                double t71643 = 1.0/pow(rho_a[index],8.0/3.0);
                double t71644 = gamma_aa[index]*t71643*(1.0/2.0);
                double t71645 = gamma_bb[index]*t71642*(1.0/2.0);
                double t71646 = t71644+t71645;
                double t71647 = gcab*t71646;
                double t71648 = t71647+1.0;
                double t71649 = gcab*gcab;
                double t71650 = t71646*t71646;
                double t71651 = t71649*t71649;
                double t71652 = t71650*t71650;
                double t71653 = t71650*t71649;
                double t71654 = gcab*t71646*2.0;
                double t71655 = t71653+t71654+1.0;
                double t71656 = t71650*t71649*3.0;
                double t71657 = gcab*t71650*t71646*t71649;
                double t71658 = gcab*t71646*3.0;
                double t71659 = t71656+t71657+t71658+1.0;
                double t71660 = t71650*t71649*6.0;
                double t71661 = gcab*t71650*t71646*t71649*4.0;
                double t71662 = t71651*t71652;
                double t71663 = gcab*t71646*4.0;
                double t71664 = t71660+t71661+t71662+t71663+1.0;
                double t71665 = c0f*t71641*t71639*2.0;
                double t71667 = c0p*t71626*t71635*2.0;
                double t71666 = t71665-t71667;
                double t71668 = 1.0/pow(rho_b[index],1.0/3.0);
                double t71669 = c*t71668;
                double t71670 = sqrt(t71669);
                double t71671 = pow(t71669,3.0/2.0);
                double t71672 = 1.0/pow(rho_b[index],2.0/3.0);
                double t71673 = b1p*t71670;
                double t71674 = b3p*t71671;
                double t71675 = b4p*t71526*t71672;
                double t71676 = b2p*c*t71668;
                double t71677 = t71673+t71674+t71675+t71676;
                double t71678 = 1.0/t71677;
                double t71679 = t71532*t71678*(1.0/2.0);
                double t71680 = t71679+1.0;
                double t71681 = log(t71680);
                double t71682 = a1p*c*t71668;
                double t71683 = t71682+1.0;
                double t71684 = c0p*t71681*t71683*2.0;
                double t71685 = t71544*t71563*t71566*t71558*t71569;
                double t71686 = Aa*t71600*t71544*t71563*t71581*t71591*t71593*2.0;
                double t71687 = 1.0/pow(rho_a[index],1.1E1/3.0);
                double t71688 = 1.0/(t71659*t71659);
                double t71689 = 1.0/(t71664*t71664);
                double t71690 = gcab*t71642*2.0;
                double t71691 = t71642*t71646*t71649*6.0;
                double t71692 = gcab*t71650*t71642*t71649*6.0;
                double t71693 = t71650*t71642*t71651*t71646*2.0;
                double t71694 = t71690+t71691+t71692+t71693;
                double t71695 = 1.0/(t71655*t71655);
                double t71696 = gamma_aa[index]*gcab*t71687*(8.0/3.0);
                double t71697 = gamma_aa[index]*t71646*t71649*t71687*(8.0/3.0);
                double t71698 = t71696+t71697;
                double t71699 = gcab*t71642;
                double t71700 = t71642*t71646*t71649;
                double t71701 = t71700+t71699;
                double t71702 = gamma_aa[index]*gcab*t71687*(1.6E1/3.0);
                double t71703 = gamma_aa[index]*gcab*t71650*t71649*t71687*1.6E1;
                double t71704 = gamma_aa[index]*t71650*t71651*t71646*t71687*(1.6E1/3.0);
                double t71705 = gamma_aa[index]*t71646*t71649*t71687*1.6E1;
                double t71706 = t71702+t71703+t71704+t71705;
                double t71707 = 1.0/(t71648*t71648);
                double t71708 = 1.0/t71655;
                double t71709 = gcab*t71642*(3.0/2.0);
                double t71710 = t71642*t71646*t71649*3.0;
                double t71711 = gcab*t71650*t71642*t71649*(3.0/2.0);
                double t71712 = t71710+t71711+t71709;
                double t71713 = gamma_aa[index]*gcab*t71687*4.0;
                double t71714 = gamma_aa[index]*gcab*t71650*t71649*t71687*4.0;
                double t71715 = gamma_aa[index]*t71646*t71649*t71687*8.0;
                double t71716 = t71713+t71714+t71715;
                double t71717 = 1.0/t71659;
                double t71718 = 1.0/t71664;
                v_rho_a_gamma_bb_[index] = -(t71568+t71685+t71686+t71519*(t71579-t71544*t71563*t71566*t71569*(t71579- \
                   (1.0/(t71550*t71550)*t71556*(b2f*c*t71531*(1.0/3.0)+b4f*t71570*t71526*(2.0/3.0)+b1f*c*t71531*t71571* \
                   (1.0/6.0)+b3f*c*t71522*t71531*(1.0/2.0)))/t71553+a1f*c*c0f*t71531*t71554*(2.0/3.0)-a1p*c*c0p*t71531* \
                   t71557*(2.0/3.0))-a1p*c*c0p*t71531*t71557*(2.0/3.0)-t71544*t71580*t71563*t71558*t71569*4.0+t71544* \
                   t71566*t71558*t71569*t71598+t71544*t71563*t71538*t71539*t71566*t71558*4.0-Aa*t71544*t71563*t71581* \
                   t71591*t71593*(t71580*t71569*4.0-t71538*t71539*t71566*4.0)*2.0+Aa*t71600*t71544*t71581*t71591*t71593* \
                   t71598*2.0+(t71600*t71544*t71563*t71581*t71593*1.0/(t71587*t71587)*(b2a*c*t71531*(1.0/3.0)+b4a*t71570* \
                   t71526*(2.0/3.0)+b1a*c*t71531*t71571*(1.0/6.0)+b3a*c*t71522*t71531*(1.0/2.0)))/t71590-Aa*a1a*c*t71600* \
                   t71531*t71544*t71563*t71581*t71591*(2.0/3.0))+rho_a[index]*(-t71634+t71544*t71638*(t71634-(1.0/(t71610* \
                   t71610)*t71641*(b2f*c*t71611*(1.0/3.0)+b4f*t71526*t71617*(2.0/3.0)+b1f*c*t71611*t71618*(1.0/6.0)+b3f* \
                   c*t71611*t71603*(1.0/2.0)))/t71621+a1f*c*c0f*t71611*t71639*(2.0/3.0)-a1p*c*c0p*t71611*t71635*(2.0/ \
                   3.0))+a1p*c*c0p*t71611*t71635*(2.0/3.0))-c0p*t71626*t71635*2.0-t71544*t71638*t71666)*((ccab1*gcab* \
                   t71642*(1.0/2.0))/t71648-ccab2*t71701*t71650*t71649*t71695-ccab1*t71642*t71707*t71646*t71649*(1.0/ \
                   2.0)+ccab2*t71642*t71708*t71646*t71649-ccab4*t71651*t71652*t71694*t71689+ccab4*t71650*t71642*t71651* \
                   t71646*t71718*2.0+ccab3*gcab*t71650*t71642*t71717*t71649*(3.0/2.0)-ccab3*gcab*t71712*t71650*t71646* \
                   t71649*t71688)+(rho_a[index]*(t71667+t71544*t71638*t71666)+rho_b[index]*(t71684-t71544*t71638*(t71684- \
                   c0f*log((t71545*(1.0/2.0))/(b1f*t71670+b3f*t71671+b2f*c*t71668+b4f*t71526*t71672)+1.0)*(a1f*c*t71668+ \
                   1.0)*2.0))-t71519*(t71568+t71685+t71686))*(ccab4*t71651*t71652*t71689*(gamma_aa[index]*t71642*t71649* \
                   t71687*8.0+gamma_aa[index]*t71650*t71642*t71651*t71687*8.0+gamma_aa[index]*gcab*t71642*t71646*t71649* \
                   t71687*1.6E1)+ccab2*t71642*t71646*t71649*t71695*t71698-ccab4*t71651*t71652*t71706*1.0/(t71664*t71664* \
                   t71664)*t71694*2.0-ccab2*t71701*t71650*1.0/(t71655*t71655*t71655)*t71649*t71698*2.0+ccab1*gamma_aa[index]* \
                   t71642*t71707*t71649*t71687*(4.0/3.0)-ccab2*gamma_aa[index]*t71642*t71708*t71649*t71687*(4.0/3.0)- \
                   ccab4*gamma_aa[index]*t71650*t71642*t71651*t71718*t71687*8.0+ccab2*gamma_aa[index]*t71650*t71642*t71651* \
                   t71695*t71687*(4.0/3.0)+ccab2*gamma_aa[index]*t71701*t71646*t71649*t71695*t71687*(8.0/3.0)+ccab3*gcab* \
                   t71650*t71642*t71716*t71649*t71688*(3.0/2.0)+ccab4*t71650*t71642*t71651*t71706*t71646*t71689*2.0+ccab3* \
                   gcab*t71650*t71646*t71649*t71688*(gamma_aa[index]*t71642*t71649*t71687*4.0+gamma_aa[index]*gcab*t71642* \
                   t71646*t71649*t71687*4.0)-ccab1*gamma_aa[index]*gcab*t71642*t71646*1.0/(t71648*t71648*t71648)*t71649* \
                   t71687*(4.0/3.0)-ccab3*gcab*t71712*t71650*t71716*t71646*t71649*1.0/(t71659*t71659*t71659)*2.0+ccab3* \
                   gamma_aa[index]*gcab*t71712*t71650*t71649*t71687*t71688*4.0-ccab3*gamma_aa[index]*gcab*t71642*t71717* \
                   t71646*t71649*t71687*4.0+ccab4*gamma_aa[index]*t71650*t71651*t71646*t71694*t71687*t71689*(1.6E1/3.0) \
                   );
            } else if (rho_a[index] > cutoff_) {
                v_rho_a_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_a_gamma_bb_[index] = 0.0;
            } else {
                v_rho_a_gamma_bb_[index] = 0.0;
            } 

            //V_rho_b_gamma_aa
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t71720 = rho_a[index]+rho_b[index];
                double t71721 = 1.0/pow(t71720,1.0/3.0);
                double t71722 = c*t71721;
                double t71723 = sqrt(t71722);
                double t71724 = b1p*t71723;
                double t71725 = pow(t71722,3.0/2.0);
                double t71726 = b3p*t71725;
                double t71727 = c*c;
                double t71728 = 1.0/pow(t71720,2.0/3.0);
                double t71729 = b4p*t71727*t71728;
                double t71730 = b2p*c*t71721;
                double t71731 = t71730+t71724+t71726+t71729;
                double t71732 = 1.0/pow(t71720,4.0/3.0);
                double t71733 = 1.0/c0p;
                double t71734 = 1.0/t71731;
                double t71735 = t71733*t71734*(1.0/2.0);
                double t71736 = t71735+1.0;
                double t71737 = a1p*c*t71721;
                double t71738 = t71737+1.0;
                double t71739 = rho_a[index]-rho_b[index];
                double t71740 = t71739*t71739;
                double t71741 = 1.0/t71720;
                double t71742 = t71741*t71739;
                double t71743 = two_13*2.0;
                double t71744 = t71743-2.0;
                double t71745 = 1.0/t71744;
                double t71746 = 1.0/c0f;
                double t71747 = b1f*t71723;
                double t71748 = b3f*t71725;
                double t71749 = b4f*t71727*t71728;
                double t71750 = b2f*c*t71721;
                double t71751 = t71750+t71747+t71748+t71749;
                double t71752 = 1.0/t71751;
                double t71753 = t71752*t71746*(1.0/2.0);
                double t71754 = t71753+1.0;
                double t71755 = log(t71754);
                double t71756 = a1f*c*t71721;
                double t71757 = t71756+1.0;
                double t71758 = log(t71736);
                double t71769 = c0f*t71755*t71757*2.0;
                double t71770 = c0p*t71738*t71758*2.0;
                double t71759 = -t71770+t71769;
                double t71760 = t71742+1.0;
                double t71761 = pow(t71760,4.0/3.0);
                double t71762 = -t71742+1.0;
                double t71763 = pow(t71762,4.0/3.0);
                double t71764 = t71761+t71763-2.0;
                double t71765 = 1.0/(t71720*t71720);
                double t71766 = t71765*t71739;
                double t71767 = t71741+t71766;
                double t71768 = 1.0/(t71720*t71720*t71720*t71720);
                double t71771 = t71740*t71740;
                double t71772 = 1.0/pow(t71720,5.0/3.0);
                double t71773 = 1.0/sqrt(t71722);
                double t71774 = 1.0/t71736;
                double t71775 = 1.0/(t71731*t71731);
                double t71776 = b4p*t71727*t71772*(2.0/3.0);
                double t71777 = b2p*c*t71732*(1.0/3.0);
                double t71778 = b1p*c*t71732*t71773*(1.0/6.0);
                double t71779 = b3p*c*t71723*t71732*(1.0/2.0);
                double t71780 = t71776+t71777+t71778+t71779;
                double t71781 = 1.0/(t71720*t71720*t71720*t71720*t71720);
                double t71782 = 1.0/d2fz0;
                double t71783 = 1.0/Aa;
                double t71784 = b1a*t71723;
                double t71785 = b3a*t71725;
                double t71786 = b4a*t71727*t71728;
                double t71787 = b2a*c*t71721;
                double t71788 = t71784+t71785+t71786+t71787;
                double t71789 = 1.0/t71788;
                double t71790 = t71783*t71789*(1.0/2.0);
                double t71791 = t71790+1.0;
                double t71792 = log(t71791);
                double t71793 = a1a*c*t71721;
                double t71794 = t71793+1.0;
                double t71795 = pow(t71760,1.0/3.0);
                double t71796 = t71767*t71795*(4.0/3.0);
                double t71797 = pow(t71762,1.0/3.0);
                double t71798 = t71796-t71767*t71797*(4.0/3.0);
                double t71799 = t71771*t71768;
                double t71800 = t71799-1.0;
                double t71801 = 1.0/pow(rho_b[index],1.0/3.0);
                double t71802 = c*t71801;
                double t71803 = sqrt(t71802);
                double t71804 = b1f*t71803;
                double t71805 = pow(t71802,3.0/2.0);
                double t71806 = b3f*t71805;
                double t71807 = 1.0/pow(rho_b[index],2.0/3.0);
                double t71808 = b4f*t71807*t71727;
                double t71809 = b2f*c*t71801;
                double t71810 = t71804+t71806+t71808+t71809;
                double t71811 = 1.0/pow(rho_b[index],4.0/3.0);
                double t71812 = b1p*t71803;
                double t71813 = b3p*t71805;
                double t71814 = b4p*t71807*t71727;
                double t71815 = b2p*c*t71801;
                double t71816 = t71812+t71813+t71814+t71815;
                double t71817 = 1.0/pow(rho_b[index],5.0/3.0);
                double t71818 = 1.0/sqrt(t71802);
                double t71819 = 1.0/t71810;
                double t71820 = t71746*t71819*(1.0/2.0);
                double t71821 = t71820+1.0;
                double t71822 = 1.0/t71816;
                double t71823 = t71822*t71733*(1.0/2.0);
                double t71824 = t71823+1.0;
                double t71825 = a1p*c*t71801;
                double t71826 = t71825+1.0;
                double t71827 = 1.0/t71824;
                double t71828 = 1.0/(t71816*t71816);
                double t71829 = b4p*t71727*t71817*(2.0/3.0);
                double t71830 = b2p*c*t71811*(1.0/3.0);
                double t71831 = b1p*c*t71811*t71818*(1.0/6.0);
                double t71832 = b3p*c*t71811*t71803*(1.0/2.0);
                double t71833 = t71830+t71831+t71832+t71829;
                double t71834 = t71833*t71826*t71827*t71828;
                double t71835 = log(t71824);
                double t71836 = pow(2.0,1.0/3.0);
                double t71837 = t71836*2.0;
                double t71838 = t71837-2.0;
                double t71839 = log(t71821);
                double t71840 = a1f*c*t71801;
                double t71841 = t71840+1.0;
                double t71842 = 1.0/pow(rho_a[index],8.0/3.0);
                double t71843 = gamma_aa[index]*t71842*(1.0/2.0);
                double t71844 = 1.0/pow(rho_b[index],8.0/3.0);
                double t71845 = gamma_bb[index]*t71844*(1.0/2.0);
                double t71846 = t71843+t71845;
                double t71847 = gcab*t71846;
                double t71848 = t71847+1.0;
                double t71849 = gcab*gcab;
                double t71850 = t71846*t71846;
                double t71851 = t71849*t71849;
                double t71852 = t71850*t71850;
                double t71853 = t71850*t71849;
                double t71854 = gcab*t71846*2.0;
                double t71855 = t71853+t71854+1.0;
                double t71856 = t71850*t71849*3.0;
                double t71857 = gcab*t71850*t71846*t71849;
                double t71858 = gcab*t71846*3.0;
                double t71859 = t71856+t71857+t71858+1.0;
                double t71860 = t71850*t71849*6.0;
                double t71861 = gcab*t71850*t71846*t71849*4.0;
                double t71862 = t71851*t71852;
                double t71863 = gcab*t71846*4.0;
                double t71864 = t71860+t71861+t71862+t71863+1.0;
                double t71865 = a1p*c*c0p*t71732*t71758*(2.0/3.0);
                double t71866 = 1.0/pow(rho_a[index],1.0/3.0);
                double t71867 = c*t71866;
                double t71868 = sqrt(t71867);
                double t71869 = pow(t71867,3.0/2.0);
                double t71870 = 1.0/pow(rho_a[index],2.0/3.0);
                double t71871 = b1p*t71868;
                double t71872 = b3p*t71869;
                double t71873 = b4p*t71870*t71727;
                double t71874 = b2p*c*t71866;
                double t71875 = t71871+t71872+t71873+t71874;
                double t71876 = 1.0/t71875;
                double t71877 = t71733*t71876*(1.0/2.0);
                double t71878 = t71877+1.0;
                double t71879 = log(t71878);
                double t71880 = a1p*c*t71866;
                double t71881 = t71880+1.0;
                double t71882 = c0p*t71881*t71879*2.0;
                double t71883 = c0f*t71841*t71839*2.0;
                double t71885 = c0p*t71826*t71835*2.0;
                double t71884 = t71883-t71885;
                double t71886 = t71771*t71745*t71764*t71759*t71768;
                double t71887 = Aa*t71800*t71745*t71764*t71782*t71792*t71794*2.0;
                double t71888 = 1.0/pow(rho_b[index],1.1E1/3.0);
                double t71889 = 1.0/(t71859*t71859);
                double t71890 = 1.0/(t71864*t71864);
                double t71891 = gcab*t71842*2.0;
                double t71892 = t71842*t71846*t71849*6.0;
                double t71893 = gcab*t71850*t71842*t71849*6.0;
                double t71894 = t71850*t71842*t71851*t71846*2.0;
                double t71895 = t71891+t71892+t71893+t71894;
                double t71896 = 1.0/(t71855*t71855);
                double t71897 = gamma_bb[index]*gcab*t71888*(8.0/3.0);
                double t71898 = gamma_bb[index]*t71846*t71849*t71888*(8.0/3.0);
                double t71899 = t71897+t71898;
                double t71900 = gcab*t71842;
                double t71901 = t71842*t71846*t71849;
                double t71902 = t71900+t71901;
                double t71903 = gamma_bb[index]*gcab*t71888*(1.6E1/3.0);
                double t71904 = gamma_bb[index]*gcab*t71850*t71849*t71888*1.6E1;
                double t71905 = gamma_bb[index]*t71850*t71851*t71846*t71888*(1.6E1/3.0);
                double t71906 = gamma_bb[index]*t71846*t71849*t71888*1.6E1;
                double t71907 = t71903+t71904+t71905+t71906;
                double t71908 = 1.0/(t71848*t71848);
                double t71909 = 1.0/t71855;
                double t71910 = gcab*t71842*(3.0/2.0);
                double t71911 = t71842*t71846*t71849*3.0;
                double t71912 = gcab*t71850*t71842*t71849*(3.0/2.0);
                double t71913 = t71910+t71911+t71912;
                double t71914 = gamma_bb[index]*gcab*t71888*4.0;
                double t71915 = gamma_bb[index]*gcab*t71850*t71849*t71888*4.0;
                double t71916 = gamma_bb[index]*t71846*t71849*t71888*8.0;
                double t71917 = t71914+t71915+t71916;
                double t71918 = 1.0/t71859;
                double t71919 = 1.0/t71864;
                v_rho_b_gamma_aa_[index] = (rho_b[index]*(t71885+t71745*t71838*t71884)+rho_a[index]*(t71882-t71745* \
                   t71838*(t71882-c0f*log((t71746*(1.0/2.0))/(b1f*t71868+b3f*t71869+b2f*c*t71866+b4f*t71870*t71727)+1.0) \
                   *(a1f*c*t71866+1.0)*2.0))-t71720*(t71770+t71886+t71887))*(ccab4*t71851*t71852*t71890*(gamma_bb[index]* \
                   t71842*t71849*t71888*8.0+gamma_bb[index]*t71850*t71842*t71851*t71888*8.0+gamma_bb[index]*gcab*t71842* \
                   t71846*t71849*t71888*1.6E1)+ccab2*t71842*t71846*t71849*t71896*t71899-ccab4*t71851*t71852*t71907*1.0/ \
                   (t71864*t71864*t71864)*t71895*2.0-ccab2*t71902*t71850*1.0/(t71855*t71855*t71855)*t71849*t71899*2.0+ \
                   ccab1*gamma_bb[index]*t71842*t71908*t71849*t71888*(4.0/3.0)-ccab2*gamma_bb[index]*t71842*t71909*t71849* \
                   t71888*(4.0/3.0)-ccab4*gamma_bb[index]*t71850*t71842*t71851*t71919*t71888*8.0+ccab2*gamma_bb[index]* \
                   t71850*t71842*t71851*t71896*t71888*(4.0/3.0)+ccab2*gamma_bb[index]*t71902*t71846*t71849*t71896*t71888* \
                   (8.0/3.0)+ccab3*gcab*t71850*t71842*t71917*t71849*t71889*(3.0/2.0)+ccab4*t71850*t71842*t71851*t71907* \
                   t71890*t71846*2.0+ccab3*gcab*t71850*t71846*t71849*t71889*(gamma_bb[index]*t71842*t71849*t71888*4.0+ \
                   gamma_bb[index]*gcab*t71842*t71846*t71849*t71888*4.0)-ccab1*gamma_bb[index]*gcab*t71842*t71846*1.0/ \
                   (t71848*t71848*t71848)*t71849*t71888*(4.0/3.0)-ccab3*gcab*t71850*t71913*t71917*t71846*t71849*1.0/(t71859* \
                   t71859*t71859)*2.0-ccab3*gamma_bb[index]*gcab*t71842*t71846*t71918*t71849*t71888*4.0+ccab3*gamma_bb[index]* \
                   gcab*t71850*t71913*t71849*t71888*t71889*4.0+ccab4*gamma_bb[index]*t71850*t71851*t71890*t71846*t71895* \
                   t71888*(1.6E1/3.0))-(t71770+t71886+t71887+rho_b[index]*(-t71834+t71745*t71838*(t71834-(1.0/(t71810* \
                   t71810)*t71841*(b2f*c*t71811*(1.0/3.0)+b4f*t71727*t71817*(2.0/3.0)+b1f*c*t71811*t71818*(1.0/6.0)+b3f* \
                   c*t71811*t71803*(1.0/2.0)))/t71821+a1f*c*c0f*t71811*t71839*(2.0/3.0)-a1p*c*c0p*t71811*t71835*(2.0/ \
                   3.0))+a1p*c*c0p*t71811*t71835*(2.0/3.0))-t71720*(t71865-t71780*t71738*t71774*t71775+t71771*t71745* \
                   t71781*t71764*t71759*4.0+t71771*t71745*t71759*t71768*t71798-t71771*t71745*t71764*t71768*(t71865-t71780* \
                   t71738*t71774*t71775+(1.0/(t71751*t71751)*t71757*(b2f*c*t71732*(1.0/3.0)+b4f*t71727*t71772*(2.0/3.0) \
                   +b1f*c*t71732*t71773*(1.0/6.0)+b3f*c*t71723*t71732*(1.0/2.0)))/t71754-a1f*c*c0f*t71732*t71755*(2.0/ \
                   3.0))+t71740*t71745*t71764*t71739*t71759*t71768*4.0+Aa*t71745*t71764*t71782*t71792*t71794*(t71771* \
                   t71781*4.0+t71740*t71739*t71768*4.0)*2.0+Aa*t71800*t71745*t71782*t71792*t71794*t71798*2.0-(t71800* \
                   t71745*t71764*t71782*t71794*1.0/(t71788*t71788)*(b2a*c*t71732*(1.0/3.0)+b4a*t71727*t71772*(2.0/3.0) \
                   +b1a*c*t71732*t71773*(1.0/6.0)+b3a*c*t71723*t71732*(1.0/2.0)))/t71791+Aa*a1a*c*t71800*t71732*t71745* \
                   t71764*t71782*t71792*(2.0/3.0))-c0p*t71826*t71835*2.0-t71745*t71838*t71884)*((ccab1*gcab*t71842*(1.0/ \
                   2.0))/t71848-ccab2*t71902*t71850*t71849*t71896-ccab1*t71842*t71908*t71846*t71849*(1.0/2.0)-ccab4*t71851* \
                   t71852*t71890*t71895+ccab2*t71842*t71846*t71909*t71849+ccab4*t71850*t71842*t71851*t71846*t71919*2.0+ \
                   ccab3*gcab*t71850*t71842*t71918*t71849*(3.0/2.0)-ccab3*gcab*t71850*t71913*t71846*t71849*t71889);
            } else if (rho_a[index] > cutoff_) {
                v_rho_b_gamma_aa_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_b_gamma_aa_[index] = 0.0;
            } else {
                v_rho_b_gamma_aa_[index] = 0.0;
            } 

            //V_rho_b_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_b_gamma_ab_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_b_gamma_ab_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_b_gamma_ab_[index] = 0.0;
            } else {
                v_rho_b_gamma_ab_[index] = 0.0;
            } 

            //V_rho_b_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t71922 = 1.0/(k*k);
                double t71923 = 1.0/kp;
                double t71924 = rho_b[index]*2.0;
                double t71925 = 1.0/(rho_b[index]*rho_b[index]);
                double t71926 = 1.0/pow(t71924,2.0/3.0);
                double t71927 = pow(rho_b[index],5.0/3.0);
                double t71928 = 1.0/tau_b[index];
                double t71929 = C_k*t71927*t71928;
                double t71930 = t71929-1.0;
                double t71931 = t71930*t71930;
                double t71932 = t71931*t71931;
                double t71933 = t71932*t71932;
                double t71934 = t71929+1.0;
                double t71935 = gamma_bb[index]*mu_*t71922*t71923*t71925*t71926*(1.0/4.0);
                double t71936 = t71935+1.0;
                double t71937 = 1.0/(t71936*t71936);
                double t71938 = 1.0/t71934;
                double t71939 = a_1*t71930*t71938;
                double t71940 = 1.0/pow(t71934,1.0E1);
                double t71941 = a_10*t71931*t71940*t71933;
                double t71942 = 1.0/pow(t71934,1.1E1);
                double t71943 = a_11*t71930*t71931*t71933*t71942;
                double t71944 = 1.0/(t71934*t71934);
                double t71945 = a_2*t71931*t71944;
                double t71946 = 1.0/(t71934*t71934*t71934);
                double t71947 = a_3*t71930*t71931*t71946;
                double t71948 = 1.0/(t71934*t71934*t71934*t71934);
                double t71949 = a_4*t71932*t71948;
                double t71950 = 1.0/(t71934*t71934*t71934*t71934*t71934);
                double t71951 = a_5*t71930*t71932*t71950;
                double t71952 = 1.0/(t71934*t71934*t71934*t71934*t71934*t71934);
                double t71953 = a_6*t71931*t71932*t71952;
                double t71954 = 1.0/(t71934*t71934*t71934*t71934*t71934*t71934*t71934);
                double t71955 = a_7*t71930*t71931*t71932*t71954;
                double t71956 = 1.0/(t71934*t71934*t71934*t71934*t71934*t71934*t71934*t71934);
                double t71957 = a_8*t71933*t71956;
                double t71958 = 1.0/(t71934*t71934*t71934*t71934*t71934*t71934*t71934*t71934*t71934);
                double t71959 = a_9*t71930*t71933*t71958;
                double t71960 = t71941+t71951+t71943+t71953+t71945+t71955+t71947+t71939+t71957+t71949+t71959+1.0;
                double t71961 = pow(rho_b[index],2.0/3.0);
                double t71962 = 1.0/rho_b[index];
                double t71963 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]);
                double t71964 = 1.0/pow(t71924,5.0/3.0);
                double t71965 = rho_a[index]+rho_b[index];
                double t71966 = 1.0/pow(t71965,1.0/3.0);
                double t71967 = c*t71966;
                double t71968 = sqrt(t71967);
                double t71969 = b1p*t71968;
                double t71970 = pow(t71967,3.0/2.0);
                double t71971 = b3p*t71970;
                double t71972 = c*c;
                double t71973 = 1.0/pow(t71965,2.0/3.0);
                double t71974 = b4p*t71972*t71973;
                double t71975 = b2p*c*t71966;
                double t71976 = t71971+t71974+t71975+t71969;
                double t71977 = 1.0/pow(t71965,4.0/3.0);
                double t71978 = 1.0/c0p;
                double t71979 = 1.0/t71976;
                double t71980 = t71978*t71979*(1.0/2.0);
                double t71981 = t71980+1.0;
                double t71982 = a1p*c*t71966;
                double t71983 = t71982+1.0;
                double t71984 = rho_a[index]-rho_b[index];
                double t71985 = t71984*t71984;
                double t71986 = 1.0/t71965;
                double t71987 = t71984*t71986;
                double t71988 = two_13*2.0;
                double t71989 = t71988-2.0;
                double t71990 = 1.0/t71989;
                double t71991 = 1.0/c0f;
                double t71992 = b1f*t71968;
                double t71993 = b3f*t71970;
                double t71994 = b4f*t71972*t71973;
                double t71995 = b2f*c*t71966;
                double t71996 = t71992+t71993+t71994+t71995;
                double t71997 = 1.0/t71996;
                double t71998 = t71991*t71997*(1.0/2.0);
                double t71999 = t71998+1.0;
                double t72000 = log(t71999);
                double t72001 = a1f*c*t71966;
                double t72002 = t72001+1.0;
                double t72003 = log(t71981);
                double t72014 = c0f*t72000*t72002*2.0;
                double t72015 = c0p*t71983*t72003*2.0;
                double t72004 = t72014-t72015;
                double t72005 = t71987+1.0;
                double t72006 = pow(t72005,4.0/3.0);
                double t72007 = -t71987+1.0;
                double t72008 = pow(t72007,4.0/3.0);
                double t72009 = t72006+t72008-2.0;
                double t72010 = 1.0/(t71965*t71965);
                double t72011 = t71984*t72010;
                double t72012 = t71986+t72011;
                double t72013 = 1.0/(t71965*t71965*t71965*t71965);
                double t72016 = t71985*t71985;
                double t72017 = 1.0/pow(t71965,5.0/3.0);
                double t72018 = 1.0/sqrt(t71967);
                double t72019 = 1.0/t71981;
                double t72020 = 1.0/(t71976*t71976);
                double t72021 = b4p*t71972*t72017*(2.0/3.0);
                double t72022 = b2p*c*t71977*(1.0/3.0);
                double t72023 = b1p*c*t71977*t72018*(1.0/6.0);
                double t72024 = b3p*c*t71968*t71977*(1.0/2.0);
                double t72025 = t72021+t72022+t72023+t72024;
                double t72026 = 1.0/(t71965*t71965*t71965*t71965*t71965);
                double t72027 = 1.0/d2fz0;
                double t72028 = 1.0/Aa;
                double t72029 = b1a*t71968;
                double t72030 = b3a*t71970;
                double t72031 = b4a*t71972*t71973;
                double t72032 = b2a*c*t71966;
                double t72033 = t72030+t72031+t72032+t72029;
                double t72034 = 1.0/t72033;
                double t72035 = t72034*t72028*(1.0/2.0);
                double t72036 = t72035+1.0;
                double t72037 = log(t72036);
                double t72038 = a1a*c*t71966;
                double t72039 = t72038+1.0;
                double t72040 = pow(t72005,1.0/3.0);
                double t72041 = t72012*t72040*(4.0/3.0);
                double t72042 = pow(t72007,1.0/3.0);
                double t72043 = t72041-t72012*t72042*(4.0/3.0);
                double t72044 = t72013*t72016;
                double t72045 = t72044-1.0;
                double t72046 = 1.0/pow(rho_b[index],1.0/3.0);
                double t72047 = c*t72046;
                double t72048 = sqrt(t72047);
                double t72049 = b1f*t72048;
                double t72050 = pow(t72047,3.0/2.0);
                double t72051 = b3f*t72050;
                double t72052 = 1.0/pow(rho_b[index],2.0/3.0);
                double t72053 = b4f*t71972*t72052;
                double t72054 = b2f*c*t72046;
                double t72055 = t72051+t72053+t72054+t72049;
                double t72056 = 1.0/pow(rho_b[index],4.0/3.0);
                double t72057 = b1p*t72048;
                double t72058 = b3p*t72050;
                double t72059 = b4p*t71972*t72052;
                double t72060 = b2p*c*t72046;
                double t72061 = t72060+t72057+t72058+t72059;
                double t72062 = 1.0/pow(rho_b[index],5.0/3.0);
                double t72063 = 1.0/sqrt(t72047);
                double t72064 = 1.0/t72055;
                double t72065 = t71991*t72064*(1.0/2.0);
                double t72066 = t72065+1.0;
                double t72067 = 1.0/t72061;
                double t72068 = t71978*t72067*(1.0/2.0);
                double t72069 = t72068+1.0;
                double t72070 = a1p*c*t72046;
                double t72071 = t72070+1.0;
                double t72072 = 1.0/t72069;
                double t72073 = 1.0/(t72061*t72061);
                double t72074 = b4p*t71972*t72062*(2.0/3.0);
                double t72075 = b2p*c*t72056*(1.0/3.0);
                double t72076 = b1p*c*t72063*t72056*(1.0/6.0);
                double t72077 = b3p*c*t72056*t72048*(1.0/2.0);
                double t72078 = t72074+t72075+t72076+t72077;
                double t72079 = t72071*t72072*t72073*t72078;
                double t72080 = log(t72069);
                double t72081 = pow(2.0,1.0/3.0);
                double t72082 = t72081*2.0;
                double t72083 = t72082-2.0;
                double t72084 = log(t72066);
                double t72085 = a1f*c*t72046;
                double t72086 = t72085+1.0;
                double t72087 = 1.0/pow(rho_b[index],8.0/3.0);
                double t72088 = 1.0/pow(rho_a[index],8.0/3.0);
                double t72089 = gamma_aa[index]*t72088*(1.0/2.0);
                double t72090 = gamma_bb[index]*t72087*(1.0/2.0);
                double t72091 = t72090+t72089;
                double t72092 = gcab*t72091;
                double t72093 = t72092+1.0;
                double t72094 = gcab*gcab;
                double t72095 = t72091*t72091;
                double t72096 = t72094*t72094;
                double t72097 = t72095*t72095;
                double t72098 = t72094*t72095;
                double t72099 = gcab*t72091*2.0;
                double t72100 = t72098+t72099+1.0;
                double t72101 = t72094*t72095*3.0;
                double t72102 = gcab*t72091*t72094*t72095;
                double t72103 = gcab*t72091*3.0;
                double t72104 = t72101+t72102+t72103+1.0;
                double t72105 = t72094*t72095*6.0;
                double t72106 = gcab*t72091*t72094*t72095*4.0;
                double t72107 = t72096*t72097;
                double t72108 = gcab*t72091*4.0;
                double t72109 = t72105+t72106+t72107+t72108+1.0;
                double t72110 = a1p*c*c0p*t71977*t72003*(2.0/3.0);
                double t72111 = 1.0/pow(rho_a[index],1.0/3.0);
                double t72112 = c*t72111;
                double t72113 = sqrt(t72112);
                double t72114 = pow(t72112,3.0/2.0);
                double t72115 = 1.0/pow(rho_a[index],2.0/3.0);
                double t72116 = b1p*t72113;
                double t72117 = b3p*t72114;
                double t72118 = b4p*t71972*t72115;
                double t72119 = b2p*c*t72111;
                double t72120 = t72116+t72117+t72118+t72119;
                double t72121 = 1.0/t72120;
                double t72122 = t71978*t72121*(1.0/2.0);
                double t72123 = t72122+1.0;
                double t72124 = log(t72123);
                double t72125 = a1p*c*t72111;
                double t72126 = t72125+1.0;
                double t72127 = c0p*t72124*t72126*2.0;
                double t72128 = c0f*t72084*t72086*2.0;
                double t72130 = c0p*t72071*t72080*2.0;
                double t72129 = -t72130+t72128;
                double t72131 = t71990*t72004*t72013*t72016*t72009;
                double t72132 = Aa*t71990*t72009*t72027*t72045*t72037*t72039*2.0;
                double t72133 = 1.0/t72093;
                double t72134 = 1.0/pow(rho_b[index],1.1E1/3.0);
                double t72135 = 1.0/(t72093*t72093);
                double t72136 = 1.0/t72100;
                double t72137 = 1.0/(t72104*t72104);
                double t72138 = 1.0/pow(rho_b[index],1.9E1/3.0);
                double t72139 = 1.0/(t72100*t72100);
                double t72140 = 1.0/t72104;
                double t72141 = 1.0/t72109;
                double t72142 = 1.0/(t72109*t72109);
                double t72143 = gcab*t72087*2.0;
                double t72144 = t72091*t72094*t72087*6.0;
                double t72145 = gcab*t72094*t72095*t72087*6.0;
                double t72146 = t72091*t72095*t72087*t72096*2.0;
                double t72147 = t72143+t72144+t72145+t72146;
                double t72148 = gamma_bb[index]*gcab*t72134*(8.0/3.0);
                double t72149 = gamma_bb[index]*t72134*t72091*t72094*(8.0/3.0);
                double t72150 = t72148+t72149;
                double t72151 = gcab*t72087;
                double t72152 = t72091*t72094*t72087;
                double t72153 = t72151+t72152;
                double t72154 = gamma_bb[index]*gcab*t72134*(1.6E1/3.0);
                double t72155 = gamma_bb[index]*gcab*t72134*t72094*t72095*1.6E1;
                double t72156 = gamma_bb[index]*t72134*t72091*t72095*t72096*(1.6E1/3.0);
                double t72157 = gamma_bb[index]*t72134*t72091*t72094*1.6E1;
                double t72158 = t72154+t72155+t72156+t72157;
                double t72159 = gcab*t72087*(3.0/2.0);
                double t72160 = t72091*t72094*t72087*3.0;
                double t72161 = gcab*t72094*t72095*t72087*(3.0/2.0);
                double t72162 = t72160+t72161+t72159;
                double t72163 = gamma_bb[index]*gcab*t72134*4.0;
                double t72164 = gamma_bb[index]*gcab*t72134*t72094*t72095*4.0;
                double t72165 = gamma_bb[index]*t72134*t72091*t72094*8.0;
                double t72166 = t72163+t72164+t72165;
                double t72167 = t71990*t72083*t72129;
                double t72168 = t72130+t72167;
                double t72169 = gamma_bb[index]*gamma_bb[index];
                double t72170 = gcaa*gcaa;
                double t72171 = t72170*t72170;
                double t72172 = 1.0/pow(rho_b[index],3.2E1/3.0);
                double t72173 = 1.0/pow(rho_b[index],1.6E1/3.0);
                double t72174 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]);
                double t72175 = gamma_bb[index]*gcaa*t72087;
                double t72176 = t72175+1.0;
                double t72177 = gamma_bb[index]*gcaa*t72087*3.0;
                double t72178 = gamma_bb[index]*gcaa*t72170*t72174*t72169;
                double t72179 = t72170*t72173*t72169*3.0;
                double t72180 = t72177+t72178+t72179+1.0;
                double t72181 = t72169*t72169;
                double t72182 = gamma_bb[index]*gcaa*t72087*4.0;
                double t72183 = gamma_bb[index]*gcaa*t72170*t72174*t72169*4.0;
                double t72184 = t72170*t72173*t72169*6.0;
                double t72185 = t72171*t72172*t72181;
                double t72186 = t72182+t72183+t72184+t72185+1.0;
                double t72187 = gamma_bb[index]*gcaa*t72087*2.0;
                double t72188 = t72170*t72173*t72169;
                double t72189 = t72187+t72188+1.0;
                double t72190 = tau_b[index]-1.0/1.0E20;
                double t72191 = ( (t72190 > 0.0) ?  1.0 : 0.0 ) ;
                double t72192 = tau_b[index]*2.0;
                double t72232 = gamma_bb[index]*t71962*(1.0/4.0);
                double t72193 = -t72232+t72192;
                double t72194 = t71928*t72193*(1.0/2.0);
                double t72195 = t72194-1.0;
                double t72196 = t72191*t72195;
                double t72197 = t72196+1.0;
                double t72198 = 1.0/t72176;
                double t72199 = 1.0/t72186;
                double t72200 = 1.0/t72189;
                double t72201 = 1.0/t72180;
                double t72202 = 1.0/(t72176*t72176);
                double t72203 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]*rho_b[index]);
                double t72204 = 1.0/(t72180*t72180);
                double t72205 = 1.0/(t72189*t72189);
                double t72206 = gcaa*t72087*3.0;
                double t72207 = gamma_bb[index]*t72170*t72173*6.0;
                double t72208 = gcaa*t72170*t72174*t72169*3.0;
                double t72209 = t72206+t72207+t72208;
                double t72210 = 1.0/pow(rho_b[index],3.5E1/3.0);
                double t72211 = 1.0/(t72186*t72186);
                double t72212 = gcaa*t72087*4.0;
                double t72213 = gamma_bb[index]*t72170*t72173*1.2E1;
                double t72214 = gcaa*t72170*t72174*t72169*1.2E1;
                double t72215 = gamma_bb[index]*t72171*t72172*t72169*4.0;
                double t72216 = t72212+t72213+t72214+t72215;
                double t72217 = gcaa*t72087*2.0;
                double t72218 = gamma_bb[index]*t72170*t72173*2.0;
                double t72219 = t72217+t72218;
                double t72220 = gamma_bb[index]*gcaa*t72134*(1.6E1/3.0);
                double t72221 = t72170*t72138*t72169*(1.6E1/3.0);
                double t72222 = t72220+t72221;
                double t72223 = gamma_bb[index]*gcaa*t72134*8.0;
                double t72224 = gamma_bb[index]*gcaa*t72203*t72170*t72169*8.0;
                double t72225 = t72170*t72138*t72169*1.6E1;
                double t72226 = t72223+t72224+t72225;
                double t72227 = gamma_bb[index]*gcaa*t72134*(3.2E1/3.0);
                double t72228 = gamma_bb[index]*gcaa*t72203*t72170*t72169*3.2E1;
                double t72229 = t72170*t72138*t72169*3.2E1;
                double t72230 = t72210*t72171*t72181*(3.2E1/3.0);
                double t72231 = t72230+t72227+t72228+t72229;
                double t72233 = 1.0/t72066;
                double t72234 = 1.0/(t72055*t72055);
                double t72235 = b4f*t71972*t72062*(2.0/3.0);
                double t72236 = b2f*c*t72056*(1.0/3.0);
                double t72237 = b1f*c*t72063*t72056*(1.0/6.0);
                double t72238 = b3f*c*t72056*t72048*(1.0/2.0);
                double t72239 = t72235+t72236+t72237+t72238;
                double t72240 = a1f*c*c0f*t72056*t72084*(2.0/3.0);
                double t72241 = a1p*c*c0p*t72080*t72056*(2.0/3.0);
                double t72242 = ccaa1*gcaa*t72087*t72198;
                double t72243 = ccaa4*gamma_bb[index]*t72171*t72172*t72169*t72199*4.0;
                double t72244 = ccaa2*gamma_bb[index]*t72200*t72170*t72173*2.0;
                double t72245 = ccaa3*gcaa*t72201*t72170*t72174*t72169*3.0;
                double t72250 = ccaa1*gamma_bb[index]*t72202*t72170*t72173;
                double t72251 = ccaa3*gamma_bb[index]*gcaa*t72204*t72170*t72209*t72174*t72169;
                double t72252 = ccaa4*t72211*t72171*t72216*t72172*t72181;
                double t72253 = ccaa2*t72205*t72170*t72173*t72219*t72169;
                double t72246 = -t72250+t72242-t72251+t72243-t72252+t72244-t72253+t72245;
                double t72247 = t72240-t72241+t72079-t72233*t72234*t72086*t72239;
                double t72248 = t71990*t72083*t72247;
                double t72249 = t72241+t72248-t72079;
                v_rho_b_gamma_bb_[index] = -(rho_b[index]*t72168+rho_a[index]*(t72127-t71990*t72083*(t72127-c0f*log((t71991* \
                   (1.0/2.0))/(b1f*t72113+b3f*t72114+b2f*c*t72111+b4f*t71972*t72115)+1.0)*(a1f*c*t72111+1.0)*2.0))-t71965* \
                   (t72131+t72015+t72132))*(ccab1*gcab*t72133*t72134*(4.0/3.0)-ccab2*t72094*t72139*t72095*(gcab*t72134* \
                   (8.0/3.0)+gamma_bb[index]*t72138*t72094*(4.0/3.0)+t72134*t72091*t72094*(8.0/3.0))-ccab4*t72142*t72096* \
                   t72097*(gcab*t72134*(1.6E1/3.0)+gamma_bb[index]*t72138*t72094*8.0+t72134*t72091*t72094*1.6E1+gamma_bb[index]* \
                   t72138*t72095*t72096*8.0+gcab*t72134*t72094*t72095*1.6E1+t72134*t72091*t72095*t72096*(1.6E1/3.0)+gamma_bb[index]* \
                   gcab*t72091*t72138*t72094*1.6E1)-ccab1*gamma_bb[index]*t72135*t72138*t72094*(4.0/3.0)+ccab2*gamma_bb[index]* \
                   t72136*t72138*t72094*(4.0/3.0)-ccab1*t72134*t72135*t72091*t72094*(4.0/3.0)+ccab2*t72134*t72091*t72136* \
                   t72094*(8.0/3.0)+ccab4*t72141*t72134*t72091*t72095*t72096*(1.6E1/3.0)-ccab2*t72150*t72091*t72094*t72139* \
                   t72087+ccab2*1.0/(t72100*t72100*t72100)*t72150*t72153*t72094*t72095*2.0+ccab4*1.0/(t72109*t72109*t72109) \
                   *t72147*t72158*t72096*t72097*2.0+ccab4*gamma_bb[index]*t72141*t72138*t72095*t72096*8.0+ccab3*gcab* \
                   t72140*t72134*t72094*t72095*4.0+ccab3*gamma_bb[index]*gcab*t72140*t72091*t72138*t72094*4.0-ccab2*gamma_bb[index]* \
                   t72134*t72153*t72091*t72094*t72139*(8.0/3.0)-ccab3*gcab*t72137*t72094*t72166*t72095*t72087*(3.0/2.0) \
                   -ccab4*t72142*t72091*t72095*t72158*t72087*t72096*2.0-ccab3*gcab*t72091*t72137*t72094*t72095*(gcab* \
                   t72134*4.0+gamma_bb[index]*t72138*t72094*4.0+t72134*t72091*t72094*8.0+gcab*t72134*t72094*t72095*4.0+ \
                   gamma_bb[index]*gcab*t72091*t72138*t72094*4.0)+ccab1*gamma_bb[index]*gcab*t72091*1.0/(t72093*t72093* \
                   t72093)*t72138*t72094*(4.0/3.0)+ccab3*gcab*1.0/(t72104*t72104*t72104)*t72162*t72091*t72094*t72166* \
                   t72095*2.0-ccab3*gamma_bb[index]*gcab*t72134*t72162*t72137*t72094*t72095*4.0-ccab4*gamma_bb[index]* \
                   t72142*t72134*t72091*t72147*t72095*t72096*(1.6E1/3.0))-(t72131+t72015+t72132+rho_b[index]*(t72241- \
                   t72079+t71990*t72083*(t72240+t72079-t72233*t72234*t72086*t72239-a1p*c*c0p*t72080*t72056*(2.0/3.0)) \
                   )-t71965*(t72110-t71983*t72020*t72025*t72019+t71990*t72004*t72013*t72016*t72043+t71990*t72004*t72016* \
                   t72026*t72009*4.0-t71990*t72013*t72016*t72009*(t72110-t71983*t72020*t72025*t72019+(1.0/(t71996*t71996) \
                   *t72002*(b2f*c*t71977*(1.0/3.0)+b4f*t71972*t72017*(2.0/3.0)+b1f*c*t71977*t72018*(1.0/6.0)+b3f*c*t71968* \
                   t71977*(1.0/2.0)))/t71999-a1f*c*c0f*t71977*t72000*(2.0/3.0))+t71990*t71984*t71985*t72004*t72013*t72009* \
                   4.0+Aa*t71990*t72009*t72027*t72037*t72039*(t72016*t72026*4.0+t71984*t71985*t72013*4.0)*2.0+Aa*t71990* \
                   t72043*t72027*t72045*t72037*t72039*2.0-(t71990*1.0/(t72033*t72033)*t72009*t72027*t72045*t72039*(b2a* \
                   c*t71977*(1.0/3.0)+b4a*t71972*t72017*(2.0/3.0)+b1a*c*t71977*t72018*(1.0/6.0)+b3a*c*t71968*t71977*(1.0/ \
                   2.0)))/t72036+Aa*a1a*c*t71990*t71977*t72009*t72027*t72045*t72037*(2.0/3.0))-c0p*t72071*t72080*2.0- \
                   t71990*t72083*t72129)*(ccab1*gcab*t72133*t72087*(1.0/2.0)-ccab1*t72135*t72091*t72094*t72087*(1.0/2.0) \
                   +ccab2*t72091*t72136*t72094*t72087-ccab2*t72153*t72094*t72139*t72095-ccab4*t72142*t72147*t72096*t72097+ \
                   ccab4*t72141*t72091*t72095*t72087*t72096*2.0+ccab3*gcab*t72140*t72094*t72095*t72087*(3.0/2.0)-ccab3* \
                   gcab*t72162*t72091*t72137*t72094*t72095)-(X-1.0)*(-kp*rho_b[index]*t71960*t71937*(mu_*t71922*t71923* \
                   t71925*t71964*(1.0/3.0)+mu_*t71922*t71923*t71926*t71963*(1.0/2.0))+mu_*t71922*t71960*t71925*t71926* \
                   t71937*(1.0/4.0)+mu_*t71922*t71926*t71962*t71937*(C_k*a_1*t71961*t71928*t71938*(5.0/3.0)-C_k*a_1*t71930* \
                   t71961*t71944*t71928*(5.0/3.0)+C_k*a_2*t71930*t71961*t71944*t71928*(1.0E1/3.0)-C_k*a_2*t71931*t71961* \
                   t71928*t71946*(1.0E1/3.0)+C_k*a_3*t71931*t71961*t71928*t71946*5.0-C_k*a_4*t71932*t71950*t71961*t71928* \
                   (2.0E1/3.0)+C_k*a_5*t71932*t71950*t71961*t71928*(2.5E1/3.0)-C_k*a_8*t71933*t71961*t71928*t71958*(4.0E1/ \
                   3.0)+C_k*a_9*t71933*t71961*t71928*t71958*1.5E1+C_k*a_10*t71930*t71940*t71933*t71961*t71928*(5.0E1/ \
                   3.0)-C_k*a_10*t71931*t71933*t71942*t71961*t71928*(5.0E1/3.0)+C_k*a_11*t71931*t71933*t71942*t71961* \
                   t71928*(5.5E1/3.0)-C_k*a_3*t71930*t71931*t71961*t71928*t71948*5.0+C_k*a_4*t71930*t71931*t71961*t71928* \
                   t71948*(2.0E1/3.0)-C_k*a_5*t71930*t71932*t71952*t71961*t71928*(2.5E1/3.0)+C_k*a_6*t71930*t71932*t71952* \
                   t71961*t71928*1.0E1-C_k*a_6*t71931*t71932*t71961*t71954*t71928*1.0E1+C_k*a_7*t71931*t71932*t71961* \
                   t71954*t71928*(3.5E1/3.0)-C_k*a_9*t71930*t71940*t71933*t71961*t71928*1.5E1-C_k*a_11*t71930*t71931* \
                   t71933*1.0/pow(t71934,1.2E1)*t71961*t71928*(5.5E1/3.0)-C_k*a_7*t71930*t71931*t71932*t71961*t71928* \
                   t71956*(3.5E1/3.0)+C_k*a_8*t71930*t71931*t71932*t71961*t71928*t71956*(4.0E1/3.0))*(1.0/4.0)+mu_*t71922* \
                   t71960*t71926*t71962*1.0/(t71936*t71936*t71936)*(gamma_bb[index]*mu_*t71922*t71923*t71925*t71964*(1.0/ \
                   3.0)+gamma_bb[index]*mu_*t71922*t71923*t71926*t71963*(1.0/2.0))*(1.0/2.0))-t72246*t72168*t72197+rho_b[index]* \
                   t72246*t72249*t72197-rho_b[index]*t72168*t72197*(ccaa1*gcaa*t72134*t72198*(-8.0/3.0)-ccaa2*gamma_bb[index]* \
                   t72200*t72170*t72138*(3.2E1/3.0)+ccaa1*gamma_bb[index]*t72202*t72170*t72138*8.0+ccaa4*t72210*t72211* \
                   t72171*t72216*t72181*(3.2E1/3.0)+ccaa2*t72205*t72170*t72138*t72219*t72169*(1.6E1/3.0)+ccaa4*t72211* \
                   t72171*t72172*t72181*(gcaa*t72134*(3.2E1/3.0)+gamma_bb[index]*t72170*t72138*6.4E1+gamma_bb[index]* \
                   t72210*t72171*t72169*(1.28E2/3.0)+gcaa*t72203*t72170*t72169*9.6E1)-ccaa1*gcaa*t72203*t72170*1.0/(t72176* \
                   t72176*t72176)*t72169*(1.6E1/3.0)+ccaa2*t72205*t72170*t72173*t72169*(gcaa*t72134*(1.6E1/3.0)+gamma_bb[index]* \
                   t72170*t72138*(3.2E1/3.0))+ccaa2*gamma_bb[index]*t72222*t72205*t72170*t72173*2.0-ccaa4*gamma_bb[index]* \
                   t72210*t72171*t72169*t72199*(1.28E2/3.0)-ccaa3*gcaa*t72201*t72203*t72170*t72169*2.4E1+ccaa4*gamma_bb[index]* \
                   t72211*t72231*t72171*t72172*t72169*4.0+ccaa3*gcaa*t72204*t72170*t72226*t72174*t72169*3.0-ccaa4*t72231* \
                   t72171*t72216*t72172*t72181*1.0/(t72186*t72186*t72186)*2.0-ccaa2*t72222*t72170*t72173*t72219*t72169* \
                   1.0/(t72189*t72189*t72189)*2.0+ccaa3*gamma_bb[index]*gcaa*t72204*t72170*t72174*t72169*(gcaa*t72134* \
                   8.0+gamma_bb[index]*t72170*t72138*3.2E1+gcaa*t72203*t72170*t72169*2.4E1)+ccaa3*gamma_bb[index]*gcaa* \
                   t72203*t72204*t72170*t72209*t72169*8.0-ccaa3*gamma_bb[index]*gcaa*t72170*1.0/(t72180*t72180*t72180) \
                   *t72226*t72209*t72174*t72169*2.0)-t71928*t72191*t72249*(ccaa0+ccaa1*gamma_bb[index]*gcaa*t72087*t72198+ \
                   ccaa2*t72200*t72170*t72173*t72169+ccaa4*t72171*t72172*t72181*t72199+ccaa3*gamma_bb[index]*gcaa*t72201* \
                   t72170*t72174*t72169)*(1.0/8.0)-t71928*t72191*t72168*(ccaa1*gamma_bb[index]*gcaa*t72134*t72198*(8.0/ \
                   3.0)+ccaa2*t72200*t72170*t72138*t72169*(1.6E1/3.0)-ccaa1*t72202*t72170*t72138*t72169*(8.0/3.0)+ccaa4* \
                   t72210*t72171*t72181*t72199*(3.2E1/3.0)-ccaa4*t72211*t72231*t72171*t72172*t72181-ccaa2*t72222*t72205* \
                   t72170*t72173*t72169+ccaa3*gamma_bb[index]*gcaa*t72201*t72203*t72170*t72169*8.0-ccaa3*gamma_bb[index]* \
                   gcaa*t72204*t72170*t72226*t72174*t72169)*(1.0/8.0)-gamma_bb[index]*t71962*t71928*t72191*t72246*t72168* \
                   (1.0/8.0);
            } else if (rho_a[index] > cutoff_) {
                v_rho_b_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                double t73884 = 1.0/pow(rho_b[index],1.0/3.0);
                double t73885 = c*t73884;
                double t73886 = sqrt(t73885);
                double t73887 = pow(t73885,3.0/2.0);
                double t73888 = c*c;
                double t73889 = 1.0/pow(rho_b[index],2.0/3.0);
                double t73890 = 1.0/c0p;
                double t73891 = b1p*t73886;
                double t73892 = b3p*t73887;
                double t73893 = b4p*t73888*t73889;
                double t73894 = b2p*c*t73884;
                double t73895 = t73891+t73892+t73893+t73894;
                double t73896 = 1.0/t73895;
                double t73897 = t73890*t73896*(1.0/2.0);
                double t73898 = t73897+1.0;
                double t73899 = log(t73898);
                double t73900 = a1p*c*t73884;
                double t73901 = t73900+1.0;
                double t73902 = 1.0/pow(rho_b[index],8.0/3.0);
                double t73903 = gamma_bb[index]*gamma_bb[index];
                double t73904 = gcaa*gcaa;
                double t73905 = t73904*t73904;
                double t73906 = 1.0/pow(rho_b[index],3.2E1/3.0);
                double t73907 = 1.0/pow(rho_b[index],1.6E1/3.0);
                double t73908 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]);
                double t73909 = gamma_bb[index]*gcaa*t73902;
                double t73910 = t73909+1.0;
                double t73911 = gamma_bb[index]*gcaa*t73902*3.0;
                double t73912 = gamma_bb[index]*gcaa*t73903*t73904*t73908;
                double t73913 = t73903*t73904*t73907*3.0;
                double t73914 = t73911+t73912+t73913+1.0;
                double t73915 = t73903*t73903;
                double t73916 = gamma_bb[index]*gcaa*t73902*4.0;
                double t73917 = gamma_bb[index]*gcaa*t73903*t73904*t73908*4.0;
                double t73918 = t73903*t73904*t73907*6.0;
                double t73919 = t73905*t73906*t73915;
                double t73920 = t73916+t73917+t73918+t73919+1.0;
                double t73921 = gamma_bb[index]*gcaa*t73902*2.0;
                double t73922 = t73903*t73904*t73907;
                double t73923 = t73921+t73922+1.0;
                double t73924 = pow(2.0,1.0/3.0);
                double t73925 = t73924*2.0;
                double t73926 = t73925-2.0;
                double t73927 = two_13*2.0;
                double t73928 = t73927-2.0;
                double t73929 = 1.0/t73928;
                double t73930 = 1.0/c0f;
                double t73931 = b1f*t73886;
                double t73932 = b3f*t73887;
                double t73933 = b4f*t73888*t73889;
                double t73934 = b2f*c*t73884;
                double t73935 = t73931+t73932+t73933+t73934;
                double t73936 = 1.0/t73935;
                double t73937 = t73930*t73936*(1.0/2.0);
                double t73938 = t73937+1.0;
                double t73939 = log(t73938);
                double t73940 = a1f*c*t73884;
                double t73941 = t73940+1.0;
                double t73942 = c0f*t73941*t73939*2.0;
                double t73943 = c0p*t73901*t73899*2.0;
                double t73944 = tau_b[index]-1.0/1.0E20;
                double t73945 = ( (t73944 > 0.0) ?  1.0 : 0.0 ) ;
                double t73946 = 1.0/tau_b[index];
                double t73947 = tau_b[index]*2.0;
                double t73948 = 1.0/rho_b[index];
                double t73993 = gamma_bb[index]*t73948*(1.0/4.0);
                double t73949 = t73947-t73993;
                double t73950 = t73946*t73949*(1.0/2.0);
                double t73951 = t73950-1.0;
                double t73952 = t73951*t73945;
                double t73953 = t73952+1.0;
                double t73954 = 1.0/t73910;
                double t73955 = 1.0/t73920;
                double t73956 = 1.0/t73923;
                double t73957 = 1.0/t73914;
                double t73958 = 1.0/pow(rho_b[index],1.9E1/3.0);
                double t73959 = 1.0/(t73910*t73910);
                double t73960 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]*rho_b[index]);
                double t73961 = 1.0/pow(rho_b[index],1.1E1/3.0);
                double t73962 = 1.0/(t73914*t73914);
                double t73963 = 1.0/(t73923*t73923);
                double t73964 = gcaa*t73902*3.0;
                double t73965 = gamma_bb[index]*t73904*t73907*6.0;
                double t73966 = gcaa*t73903*t73904*t73908*3.0;
                double t73967 = t73964+t73965+t73966;
                double t73968 = 1.0/pow(rho_b[index],3.5E1/3.0);
                double t73969 = 1.0/(t73920*t73920);
                double t73970 = gcaa*t73902*4.0;
                double t73971 = gamma_bb[index]*t73904*t73907*1.2E1;
                double t73972 = gcaa*t73903*t73904*t73908*1.2E1;
                double t73973 = gamma_bb[index]*t73903*t73905*t73906*4.0;
                double t73974 = t73970+t73971+t73972+t73973;
                double t73975 = gcaa*t73902*2.0;
                double t73976 = gamma_bb[index]*t73904*t73907*2.0;
                double t73977 = t73975+t73976;
                double t73978 = gamma_bb[index]*gcaa*t73961*(1.6E1/3.0);
                double t73979 = t73903*t73904*t73958*(1.6E1/3.0);
                double t73980 = t73978+t73979;
                double t73981 = gamma_bb[index]*gcaa*t73961*8.0;
                double t73982 = gamma_bb[index]*gcaa*t73903*t73904*t73960*8.0;
                double t73983 = t73903*t73904*t73958*1.6E1;
                double t73984 = t73981+t73982+t73983;
                double t73985 = gamma_bb[index]*gcaa*t73961*(3.2E1/3.0);
                double t73986 = gamma_bb[index]*gcaa*t73903*t73904*t73960*3.2E1;
                double t73987 = t73903*t73904*t73958*3.2E1;
                double t73988 = t73905*t73915*t73968*(3.2E1/3.0);
                double t73989 = t73985+t73986+t73987+t73988;
                double t73990 = t73942-t73943;
                double t73991 = t73926*t73990*t73929;
                double t73992 = t73943+t73991;
                double t73994 = 1.0/pow(rho_b[index],4.0/3.0);
                double t73995 = 1.0/pow(rho_b[index],5.0/3.0);
                double t73996 = 1.0/sqrt(t73885);
                double t73997 = 1.0/t73898;
                double t73998 = 1.0/(t73895*t73895);
                double t73999 = b4p*t73995*t73888*(2.0/3.0);
                double t74000 = b2p*c*t73994*(1.0/3.0);
                double t74001 = b1p*c*t73994*t73996*(1.0/6.0);
                double t74002 = b3p*c*t73886*t73994*(1.0/2.0);
                double t74003 = t73999+t74000+t74001+t74002;
                double t74004 = t73901*t73997*t73998*t74003;
                double t74005 = ccaa1*gcaa*t73902*t73954;
                double t74006 = ccaa4*gamma_bb[index]*t73903*t73905*t73906*t73955*4.0;
                double t74007 = ccaa2*gamma_bb[index]*t73904*t73907*t73956*2.0;
                double t74008 = ccaa3*gcaa*t73903*t73904*t73908*t73957*3.0;
                double t74019 = ccaa1*gamma_bb[index]*t73904*t73907*t73959;
                double t74020 = ccaa3*gamma_bb[index]*gcaa*t73903*t73904*t73908*t73962*t73967;
                double t74021 = ccaa4*t73905*t73906*t73915*t73974*t73969;
                double t74022 = ccaa2*t73903*t73904*t73907*t73963*t73977;
                double t74009 = -t74020-t74021-t74022+t74005+t74006+t74007+t74008-t74019;
                double t74010 = 1.0/t73938;
                double t74011 = 1.0/(t73935*t73935);
                double t74012 = b4f*t73995*t73888*(2.0/3.0);
                double t74013 = b2f*c*t73994*(1.0/3.0);
                double t74014 = b1f*c*t73994*t73996*(1.0/6.0);
                double t74015 = b3f*c*t73886*t73994*(1.0/2.0);
                double t74016 = t74012+t74013+t74014+t74015;
                double t74017 = a1f*c*c0f*t73939*t73994*(2.0/3.0);
                double t74018 = a1p*c*c0p*t73994*t73899*(2.0/3.0);
                double t74023 = 1.0/(k*k);
                double t74024 = 1.0/kp;
                double t74025 = rho_b[index]*2.0;
                double t74026 = 1.0/(rho_b[index]*rho_b[index]);
                double t74027 = 1.0/pow(t74025,2.0/3.0);
                double t74028 = pow(rho_b[index],5.0/3.0);
                double t74029 = C_k*t73946*t74028;
                double t74030 = t74029-1.0;
                double t74031 = t74030*t74030;
                double t74032 = t74031*t74031;
                double t74033 = t74032*t74032;
                double t74034 = t74029+1.0;
                double t74035 = gamma_bb[index]*mu_*t74023*t74024*t74026*t74027*(1.0/4.0);
                double t74036 = t74035+1.0;
                double t74037 = 1.0/(t74036*t74036);
                double t74038 = X-1.0;
                double t74039 = 1.0/t74034;
                double t74040 = pow(rho_b[index],2.0/3.0);
                double t74041 = 1.0/(t74034*t74034);
                double t74042 = 1.0/pow(t74034,1.0E1);
                double t74043 = 1.0/pow(t74034,1.1E1);
                double t74044 = 1.0/(t74034*t74034*t74034);
                double t74045 = 1.0/(t74034*t74034*t74034*t74034);
                double t74046 = 1.0/(t74034*t74034*t74034*t74034*t74034);
                double t74047 = 1.0/(t74034*t74034*t74034*t74034*t74034*t74034);
                double t74048 = 1.0/(t74034*t74034*t74034*t74034*t74034*t74034*t74034);
                double t74049 = 1.0/(t74034*t74034*t74034*t74034*t74034*t74034*t74034*t74034);
                double t74050 = 1.0/(t74034*t74034*t74034*t74034*t74034*t74034*t74034*t74034*t74034);
                double t74051 = a_1*t74030*t74039;
                double t74052 = a_10*t74031*t74033*t74042;
                double t74053 = a_11*t74030*t74031*t74033*t74043;
                double t74054 = a_2*t74031*t74041;
                double t74055 = a_3*t74030*t74031*t74044;
                double t74056 = a_4*t74032*t74045;
                double t74057 = a_5*t74030*t74032*t74046;
                double t74058 = a_6*t74031*t74032*t74047;
                double t74059 = a_7*t74030*t74031*t74032*t74048;
                double t74060 = a_8*t74033*t74049;
                double t74061 = a_9*t74030*t74050*t74033;
                double t74062 = t74051+t74060+t74052+t74061+t74053+t74054+t74055+t74056+t74057+t74058+t74059+1.0;
                double t74063 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]);
                double t74064 = 1.0/pow(t74025,5.0/3.0);
                v_rho_b_gamma_bb_[index] = -t73953*t74009*(t73943+t73926*t73929*(t73942-c0p*t73901*t73899*2.0))-t73945* \
                   t73946*(-t74004+t74018+t73926*t73929*(t74004+t74017-t74018-t73941*t74010*t74011*t74016))*(ccaa0+ccaa1* \
                   gamma_bb[index]*gcaa*t73902*t73954+ccaa2*t73903*t73904*t73907*t73956+ccaa4*t73905*t73906*t73915*t73955+ \
                   ccaa3*gamma_bb[index]*gcaa*t73903*t73904*t73908*t73957)*(1.0/8.0)-rho_b[index]*t73953*t73992*(ccaa1* \
                   gcaa*t73961*t73954*(-8.0/3.0)-ccaa2*gamma_bb[index]*t73904*t73956*t73958*(3.2E1/3.0)+ccaa1*gamma_bb[index]* \
                   t73904*t73958*t73959*8.0+ccaa2*t73903*t73904*t73963*t73958*t73977*(1.6E1/3.0)+ccaa4*t73905*t73915* \
                   t73974*t73968*t73969*(3.2E1/3.0)+ccaa4*t73905*t73906*t73915*t73969*(gcaa*t73961*(3.2E1/3.0)+gamma_bb[index]* \
                   t73904*t73958*6.4E1+gamma_bb[index]*t73903*t73905*t73968*(1.28E2/3.0)+gcaa*t73903*t73904*t73960*9.6E1) \
                   -ccaa1*gcaa*1.0/(t73910*t73910*t73910)*t73903*t73904*t73960*(1.6E1/3.0)+ccaa2*t73903*t73904*t73907* \
                   t73963*(gcaa*t73961*(1.6E1/3.0)+gamma_bb[index]*t73904*t73958*(3.2E1/3.0))+ccaa2*gamma_bb[index]*t73904* \
                   t73907*t73980*t73963*2.0-ccaa4*gamma_bb[index]*t73903*t73905*t73955*t73968*(1.28E2/3.0)-ccaa3*gcaa* \
                   t73903*t73904*t73960*t73957*2.4E1+ccaa4*gamma_bb[index]*t73903*t73905*t73906*t73969*t73989*4.0+ccaa3* \
                   gcaa*t73903*t73904*t73908*t73962*t73984*3.0-ccaa2*t73903*t73904*1.0/(t73923*t73923*t73923)*t73907* \
                   t73980*t73977*2.0-ccaa4*1.0/(t73920*t73920*t73920)*t73905*t73906*t73915*t73974*t73989*2.0+ccaa3*gamma_bb[index]* \
                   gcaa*t73903*t73904*t73908*t73962*(gcaa*t73961*8.0+gamma_bb[index]*t73904*t73958*3.2E1+gcaa*t73903* \
                   t73904*t73960*2.4E1)+ccaa3*gamma_bb[index]*gcaa*t73903*t73904*t73960*t73962*t73967*8.0-ccaa3*gamma_bb[index]* \
                   gcaa*t73903*t73904*1.0/(t73914*t73914*t73914)*t73908*t73984*t73967*2.0)+rho_b[index]*t73953*t74009* \
                   (-t74004+t74018+t73926*t73929*(t74004+t74017-t73941*t74010*t74011*t74016-a1p*c*c0p*t73994*t73899*(2.0/ \
                   3.0)))-t73945*t73946*t73992*(ccaa1*gamma_bb[index]*gcaa*t73961*t73954*(8.0/3.0)+ccaa2*t73903*t73904* \
                   t73956*t73958*(1.6E1/3.0)-ccaa1*t73903*t73904*t73958*t73959*(8.0/3.0)+ccaa4*t73905*t73915*t73955*t73968* \
                   (3.2E1/3.0)-ccaa2*t73903*t73904*t73907*t73980*t73963-ccaa4*t73905*t73906*t73915*t73969*t73989+ccaa3* \
                   gamma_bb[index]*gcaa*t73903*t73904*t73960*t73957*8.0-ccaa3*gamma_bb[index]*gcaa*t73903*t73904*t73908* \
                   t73962*t73984)*(1.0/8.0)-gamma_bb[index]*t73945*t73946*t73992*t73948*t74009*(1.0/8.0)+kp*rho_b[index]* \
                   t74062*t74037*t74038*(mu_*t74023*t74024*t74026*t74064*(1.0/3.0)+mu_*t74023*t74024*t74027*t74063*(1.0/ \
                   2.0))-mu_*t74023*t74026*t74062*t74027*t74037*t74038*(1.0/4.0)-mu_*t73948*t74023*t74027*t74037*t74038* \
                   (C_k*a_1*t73946*t74040*t74039*(5.0/3.0)-C_k*a_1*t73946*t74030*t74040*t74041*(5.0/3.0)+C_k*a_2*t73946* \
                   t74030*t74040*t74041*(1.0E1/3.0)-C_k*a_2*t73946*t74031*t74040*t74044*(1.0E1/3.0)+C_k*a_3*t73946*t74031* \
                   t74040*t74044*5.0-C_k*a_4*t73946*t74040*t74032*t74046*(2.0E1/3.0)+C_k*a_5*t73946*t74040*t74032*t74046* \
                   (2.5E1/3.0)-C_k*a_8*t73946*t74040*t74050*t74033*(4.0E1/3.0)+C_k*a_9*t73946*t74040*t74050*t74033*1.5E1+ \
                   C_k*a_10*t73946*t74030*t74040*t74033*t74042*(5.0E1/3.0)-C_k*a_10*t73946*t74031*t74040*t74033*t74043* \
                   (5.0E1/3.0)+C_k*a_11*t73946*t74031*t74040*t74033*t74043*(5.5E1/3.0)-C_k*a_3*t73946*t74030*t74031*t74040* \
                   t74045*5.0+C_k*a_4*t73946*t74030*t74031*t74040*t74045*(2.0E1/3.0)-C_k*a_5*t73946*t74030*t74040*t74032* \
                   t74047*(2.5E1/3.0)+C_k*a_6*t73946*t74030*t74040*t74032*t74047*1.0E1-C_k*a_6*t73946*t74031*t74040*t74032* \
                   t74048*1.0E1+C_k*a_7*t73946*t74031*t74040*t74032*t74048*(3.5E1/3.0)-C_k*a_9*t73946*t74030*t74040*t74033* \
                   t74042*1.5E1-C_k*a_11*t73946*t74030*t74031*t74040*t74033*1.0/pow(t74034,1.2E1)*(5.5E1/3.0)-C_k*a_7* \
                   t73946*t74030*t74031*t74040*t74032*t74049*(3.5E1/3.0)+C_k*a_8*t73946*t74030*t74031*t74040*t74032*t74049* \
                   (4.0E1/3.0))*(1.0/4.0)-mu_*t73948*t74023*t74062*t74027*1.0/(t74036*t74036*t74036)*t74038*(gamma_bb[index]* \
                   mu_*t74023*t74024*t74026*t74064*(1.0/3.0)+gamma_bb[index]*mu_*t74023*t74024*t74027*t74063*(1.0/2.0) \
                   )*(1.0/2.0);
            } else {
                v_rho_b_gamma_bb_[index] = 0.0;
            } 

            //V_gamma_aa_gamma_aa
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t72255 = 1.0/pow(rho_a[index],1.0/3.0);
                double t72256 = c*t72255;
                double t72257 = sqrt(t72256);
                double t72258 = pow(t72256,3.0/2.0);
                double t72259 = c*c;
                double t72260 = 1.0/pow(rho_a[index],2.0/3.0);
                double t72261 = 1.0/c0p;
                double t72262 = b1p*t72257;
                double t72263 = b3p*t72258;
                double t72264 = b4p*t72260*t72259;
                double t72265 = b2p*c*t72255;
                double t72266 = t72262+t72263+t72264+t72265;
                double t72267 = 1.0/t72266;
                double t72268 = t72261*t72267*(1.0/2.0);
                double t72269 = t72268+1.0;
                double t72270 = log(t72269);
                double t72271 = a1p*c*t72255;
                double t72272 = t72271+1.0;
                double t72273 = pow(2.0,1.0/3.0);
                double t72274 = t72273*2.0;
                double t72275 = t72274-2.0;
                double t72276 = two_13*2.0;
                double t72277 = t72276-2.0;
                double t72278 = 1.0/t72277;
                double t72279 = 1.0/c0f;
                double t72280 = 1.0/pow(rho_b[index],1.0/3.0);
                double t72281 = c*t72280;
                double t72282 = sqrt(t72281);
                double t72283 = pow(t72281,3.0/2.0);
                double t72284 = 1.0/pow(rho_b[index],2.0/3.0);
                double t72285 = b1p*t72282;
                double t72286 = b3p*t72283;
                double t72287 = b4p*t72284*t72259;
                double t72288 = b2p*c*t72280;
                double t72289 = t72285+t72286+t72287+t72288;
                double t72290 = 1.0/t72289;
                double t72291 = t72261*t72290*(1.0/2.0);
                double t72292 = t72291+1.0;
                double t72293 = log(t72292);
                double t72294 = a1p*c*t72280;
                double t72295 = t72294+1.0;
                double t72296 = c0p*t72293*t72295*2.0;
                double t72297 = rho_a[index]+rho_b[index];
                double t72298 = 1.0/pow(t72297,1.0/3.0);
                double t72299 = c*t72298;
                double t72300 = sqrt(t72299);
                double t72301 = pow(t72299,3.0/2.0);
                double t72302 = 1.0/pow(t72297,2.0/3.0);
                double t72303 = b1p*t72300;
                double t72304 = b3p*t72301;
                double t72305 = b4p*t72302*t72259;
                double t72306 = b2p*c*t72298;
                double t72307 = t72303+t72304+t72305+t72306;
                double t72308 = 1.0/t72307;
                double t72309 = t72261*t72308*(1.0/2.0);
                double t72310 = t72309+1.0;
                double t72311 = log(t72310);
                double t72312 = a1p*c*t72298;
                double t72313 = t72312+1.0;
                double t72314 = c0p*t72311*t72313*2.0;
                double t72315 = rho_a[index]-rho_b[index];
                double t72316 = t72315*t72315;
                double t72317 = 1.0/t72297;
                double t72318 = t72315*t72317;
                double t72319 = 1.0/(t72297*t72297*t72297*t72297);
                double t72320 = t72316*t72316;
                double t72321 = t72318+1.0;
                double t72322 = pow(t72321,4.0/3.0);
                double t72323 = -t72318+1.0;
                double t72324 = pow(t72323,4.0/3.0);
                double t72325 = t72322+t72324-2.0;
                double t72326 = gcab*gcab;
                double t72327 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t72328 = 1.0/pow(rho_a[index],8.0/3.0);
                double t72329 = gamma_aa[index]*t72328*(1.0/2.0);
                double t72330 = 1.0/pow(rho_b[index],8.0/3.0);
                double t72331 = gamma_bb[index]*t72330*(1.0/2.0);
                double t72332 = t72331+t72329;
                double t72333 = gcab*t72332;
                double t72334 = t72333+1.0;
                double t72335 = t72332*t72332;
                double t72336 = t72326*t72335;
                double t72337 = gcab*t72332*2.0;
                double t72338 = t72336+t72337+1.0;
                double t72339 = t72326*t72326;
                double t72356 = gcab*t72328*2.0;
                double t72357 = t72332*t72326*t72328*6.0;
                double t72358 = gcab*t72326*t72335*t72328*6.0;
                double t72359 = t72332*t72335*t72328*t72339*2.0;
                double t72340 = t72356+t72357+t72358+t72359;
                double t72341 = t72335*t72335;
                double t72361 = gcab*t72328*(3.0/2.0);
                double t72362 = t72332*t72326*t72328*3.0;
                double t72363 = gcab*t72326*t72335*t72328*(3.0/2.0);
                double t72342 = t72361+t72362+t72363;
                double t72343 = t72326*t72335*3.0;
                double t72344 = gcab*t72332*t72326*t72335;
                double t72345 = gcab*t72332*3.0;
                double t72346 = t72343+t72344+t72345+1.0;
                double t72353 = gcab*t72328;
                double t72354 = t72332*t72326*t72328;
                double t72347 = t72353+t72354;
                double t72348 = t72326*t72335*6.0;
                double t72349 = gcab*t72332*t72326*t72335*4.0;
                double t72350 = t72341*t72339;
                double t72351 = gcab*t72332*4.0;
                double t72352 = t72350+t72351+t72348+t72349+1.0;
                double t72355 = 1.0/(t72338*t72338);
                double t72360 = 1.0/(t72352*t72352);
                double t72364 = 1.0/(t72346*t72346);
                double t72365 = b1f*t72257;
                double t72366 = b3f*t72258;
                double t72367 = b4f*t72260*t72259;
                double t72368 = b2f*c*t72255;
                double t72369 = t72365+t72366+t72367+t72368;
                double t72370 = 1.0/t72369;
                double t72371 = t72370*t72279*(1.0/2.0);
                double t72372 = t72371+1.0;
                double t72373 = log(t72372);
                double t72374 = a1f*c*t72255;
                double t72375 = t72374+1.0;
                double t72376 = c0f*t72373*t72375*2.0;
                double t72377 = c0p*t72270*t72272*2.0;
                double t72378 = gcaa*gcaa;
                double t72379 = gamma_aa[index]*gamma_aa[index];
                double t72380 = t72378*t72378;
                double t72381 = 1.0/pow(rho_a[index],3.2E1/3.0);
                double t72382 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t72383 = gamma_aa[index]*gcaa*t72328;
                double t72384 = t72383+1.0;
                double t72385 = gamma_aa[index]*gcaa*t72328*2.0;
                double t72386 = t72327*t72378*t72379;
                double t72387 = t72385+t72386+1.0;
                double t72388 = gamma_aa[index]*gcaa*t72328*3.0;
                double t72389 = gamma_aa[index]*gcaa*t72382*t72378*t72379;
                double t72390 = t72327*t72378*t72379*3.0;
                double t72391 = t72390+t72388+t72389+1.0;
                double t72392 = t72379*t72379;
                double t72408 = gcaa*t72328*4.0;
                double t72409 = gamma_aa[index]*t72327*t72378*1.2E1;
                double t72410 = gcaa*t72382*t72378*t72379*1.2E1;
                double t72411 = gamma_aa[index]*t72380*t72381*t72379*4.0;
                double t72393 = t72410+t72411+t72408+t72409;
                double t72394 = gamma_aa[index]*gcaa*t72328*4.0;
                double t72395 = gamma_aa[index]*gcaa*t72382*t72378*t72379*4.0;
                double t72396 = t72327*t72378*t72379*6.0;
                double t72397 = t72380*t72381*t72392;
                double t72398 = t72394+t72395+t72396+t72397+1.0;
                double t72401 = gcaa*t72328*2.0;
                double t72402 = gamma_aa[index]*t72327*t72378*2.0;
                double t72399 = t72401+t72402;
                double t72400 = 1.0/(t72391*t72391);
                double t72403 = 1.0/(t72387*t72387);
                double t72404 = gcaa*t72328*3.0;
                double t72405 = gamma_aa[index]*t72327*t72378*6.0;
                double t72406 = gcaa*t72382*t72378*t72379*3.0;
                double t72407 = t72404+t72405+t72406;
                double t72412 = 1.0/(t72398*t72398);
                double t72413 = 1.0/tau_a[index];
                double t72414 = tau_a[index]-1.0/1.0E20;
                double t72415 = ( (t72414 > 0.0) ?  1.0 : 0.0 ) ;
                double t72416 = t72376-t72377;
                double t72417 = t72416*t72275*t72278;
                double t72418 = t72417+t72377;
                double t72419 = 1.0/t72398;
                double t72420 = 1.0/t72387;
                double t72421 = 1.0/t72391;
                double t72422 = 1.0/(t72384*t72384);
                double t72423 = 1.0/kp;
                double t72424 = rho_a[index]*2.0;
                double t72425 = pow(rho_a[index],5.0/3.0);
                double t72426 = C_k*t72413*t72425;
                double t72427 = t72426-1.0;
                double t72428 = t72427*t72427;
                double t72429 = t72428*t72428;
                double t72430 = t72429*t72429;
                double t72431 = t72426+1.0;
                v_gamma_aa_gamma_aa_[index] = -(rho_a[index]*(t72377+t72275*t72278*(t72376-c0p*t72270*t72272*2.0) \
                   )+rho_b[index]*(t72296-t72275*t72278*(t72296-c0f*log((t72279*(1.0/2.0))/(b1f*t72282+b3f*t72283+b2f* \
                   c*t72280+b4f*t72284*t72259)+1.0)*(a1f*c*t72280+1.0)*2.0))-t72297*(t72314-t72320*t72325*t72319*t72278* \
                   (t72314-c0f*log((t72279*(1.0/2.0))/(b1f*t72300+b3f*t72301+b2f*c*t72298+b4f*t72302*t72259)+1.0)*(a1f* \
                   c*t72298+1.0)*2.0)+(Aa*t72325*t72278*log((1.0/2.0)/(Aa*(b1a*t72300+b3a*t72301+b2a*c*t72298+b4a*t72302* \
                   t72259))+1.0)*(t72320*t72319-1.0)*(a1a*c*t72298+1.0)*2.0)/d2fz0))*(ccab1*1.0/(t72334*t72334)*t72326* \
                   t72327*(1.0/2.0)-(ccab2*t72326*t72327*(1.0/2.0))/t72338-ccab4*(t72340*t72340)*t72341*1.0/(t72352*t72352* \
                   t72352)*t72339*2.0-ccab2*t72326*t72335*1.0/(t72338*t72338*t72338)*(t72347*t72347)*2.0+ccab2*t72335* \
                   t72327*t72355*t72339*(1.0/2.0)+ccab4*t72341*t72360*t72339*(t72326*t72327*3.0+t72335*t72327*t72339* \
                   3.0+gcab*t72332*t72326*t72327*6.0)-(ccab4*t72335*t72327*t72339*3.0)/t72352+ccab2*t72332*t72326*t72328* \
                   t72355*t72347*2.0-ccab1*gcab*t72332*1.0/(t72334*t72334*t72334)*t72326*t72327*(1.0/2.0)-(ccab3*gcab* \
                   t72332*t72326*t72327*(3.0/2.0))/t72346-ccab3*gcab*t72332*(t72342*t72342)*t72326*t72335*1.0/(t72346* \
                   t72346*t72346)*2.0+ccab3*gcab*t72342*t72326*t72335*t72328*t72364*3.0+ccab4*t72340*t72332*t72360*t72335* \
                   t72328*t72339*4.0+ccab3*gcab*t72332*t72326*t72335*t72364*(t72326*t72327*(3.0/2.0)+gcab*t72332*t72326* \
                   t72327*(3.0/2.0)))+t72413*t72415*t72418*((ccaa1*gcaa*t72328)/t72384+ccaa2*gamma_aa[index]*t72420*t72327* \
                   t72378*2.0-ccaa1*gamma_aa[index]*t72422*t72327*t72378-ccaa4*t72412*t72380*t72381*t72392*t72393-ccaa2* \
                   t72403*t72327*t72378*t72379*t72399+ccaa4*gamma_aa[index]*t72380*t72381*t72419*t72379*4.0+ccaa3*gcaa* \
                   t72421*t72382*t72378*t72379*3.0-ccaa3*gamma_aa[index]*gcaa*t72400*t72407*t72382*t72378*t72379)*(1.0/ \
                   4.0)-rho_a[index]*t72418*(t72415*(t72413*(tau_a[index]*2.0-(gamma_aa[index]*(1.0/4.0))/rho_a[index]) \
                   *(1.0/2.0)-1.0)+1.0)*(ccaa2*t72420*t72327*t72378*2.0-ccaa1*t72422*t72327*t72378*2.0-ccaa2*t72403*t72380* \
                   t72381*t72379*2.0+ccaa4*t72380*t72381*t72419*t72379*1.2E1-ccaa4*t72412*t72380*t72381*t72392*(t72327* \
                   t72378*1.2E1+t72380*t72381*t72379*1.2E1+gamma_aa[index]*gcaa*t72382*t72378*2.4E1)+ccaa1*gamma_aa[index]* \
                   gcaa*t72382*1.0/(t72384*t72384*t72384)*t72378*2.0+ccaa4*t72380*t72381*t72392*(t72393*t72393)*1.0/(t72398* \
                   t72398*t72398)*2.0+ccaa2*t72327*t72378*1.0/(t72387*t72387*t72387)*t72379*(t72399*t72399)*2.0+ccaa3* \
                   gamma_aa[index]*gcaa*t72421*t72382*t72378*6.0-ccaa2*gamma_aa[index]*t72403*t72327*t72378*t72399*4.0- \
                   ccaa4*gamma_aa[index]*t72412*t72380*t72381*t72393*t72379*8.0-ccaa3*gcaa*t72400*t72407*t72382*t72378* \
                   t72379*6.0-ccaa3*gamma_aa[index]*gcaa*t72400*t72382*t72378*t72379*(t72327*t72378*6.0+gamma_aa[index]* \
                   gcaa*t72382*t72378*6.0)+ccaa3*gamma_aa[index]*gcaa*(t72407*t72407)*t72382*1.0/(t72391*t72391*t72391) \
                   *t72378*t72379*2.0)+1.0/(k*k*k*k)*(mu_*mu_)*1.0/(rho_a[index]*rho_a[index]*rho_a[index])*t72423*1.0/ \
                   pow(t72424,4.0/3.0)*1.0/pow(gamma_aa[index]*1.0/(k*k)*mu_*1.0/(rho_a[index]*rho_a[index])*t72423*1.0/ \
                   pow(t72424,2.0/3.0)*(1.0/4.0)+1.0,3.0)*(X-1.0)*((a_1*t72427)/t72431+a_2*1.0/(t72431*t72431)*t72428+ \
                   a_4*1.0/(t72431*t72431*t72431*t72431)*t72429+a_8*t72430*1.0/(t72431*t72431*t72431*t72431*t72431*t72431* \
                   t72431*t72431)+a_10*t72430*1.0/pow(t72431,1.0E1)*t72428+a_3*1.0/(t72431*t72431*t72431)*t72427*t72428+ \
                   a_5*1.0/(t72431*t72431*t72431*t72431*t72431)*t72427*t72429+a_6*1.0/(t72431*t72431*t72431*t72431*t72431* \
                   t72431)*t72428*t72429+a_9*t72430*1.0/(t72431*t72431*t72431*t72431*t72431*t72431*t72431*t72431*t72431) \
                   *t72427+a_11*t72430*1.0/pow(t72431,1.1E1)*t72427*t72428+a_7*1.0/(t72431*t72431*t72431*t72431*t72431* \
                   t72431*t72431)*t72427*t72428*t72429+1.0)*(1.0/8.0);
            } else if (rho_a[index] > cutoff_) {
                double t75193 = 1.0/pow(rho_a[index],1.0/3.0);
                double t75194 = c*t75193;
                double t75195 = sqrt(t75194);
                double t75196 = pow(t75194,3.0/2.0);
                double t75197 = c*c;
                double t75198 = 1.0/pow(rho_a[index],2.0/3.0);
                double t75199 = 1.0/c0p;
                double t75200 = b1p*t75195;
                double t75201 = b3p*t75196;
                double t75202 = b4p*t75197*t75198;
                double t75203 = b2p*c*t75193;
                double t75204 = t75200+t75201+t75202+t75203;
                double t75205 = 1.0/t75204;
                double t75206 = t75205*t75199*(1.0/2.0);
                double t75207 = t75206+1.0;
                double t75208 = log(t75207);
                double t75209 = a1p*c*t75193;
                double t75210 = t75209+1.0;
                double t75211 = gcaa*gcaa;
                double t75212 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t75213 = 1.0/pow(rho_a[index],8.0/3.0);
                double t75214 = gamma_aa[index]*gamma_aa[index];
                double t75215 = t75211*t75211;
                double t75216 = 1.0/pow(rho_a[index],3.2E1/3.0);
                double t75217 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t75218 = gamma_aa[index]*gcaa*t75213;
                double t75219 = t75218+1.0;
                double t75220 = gamma_aa[index]*gcaa*t75213*2.0;
                double t75221 = t75211*t75212*t75214;
                double t75222 = t75220+t75221+1.0;
                double t75223 = gamma_aa[index]*gcaa*t75213*3.0;
                double t75224 = gamma_aa[index]*gcaa*t75211*t75214*t75217;
                double t75225 = t75211*t75212*t75214*3.0;
                double t75226 = t75223+t75224+t75225+1.0;
                double t75227 = t75214*t75214;
                double t75243 = gcaa*t75213*4.0;
                double t75244 = gamma_aa[index]*t75211*t75212*1.2E1;
                double t75245 = gcaa*t75211*t75214*t75217*1.2E1;
                double t75246 = gamma_aa[index]*t75214*t75215*t75216*4.0;
                double t75228 = t75243+t75244+t75245+t75246;
                double t75229 = gamma_aa[index]*gcaa*t75213*4.0;
                double t75230 = gamma_aa[index]*gcaa*t75211*t75214*t75217*4.0;
                double t75231 = t75211*t75212*t75214*6.0;
                double t75232 = t75215*t75216*t75227;
                double t75233 = t75230+t75231+t75232+t75229+1.0;
                double t75236 = gcaa*t75213*2.0;
                double t75237 = gamma_aa[index]*t75211*t75212*2.0;
                double t75234 = t75236+t75237;
                double t75235 = 1.0/(t75226*t75226);
                double t75238 = 1.0/(t75222*t75222);
                double t75239 = gcaa*t75213*3.0;
                double t75240 = gamma_aa[index]*t75211*t75212*6.0;
                double t75241 = gcaa*t75211*t75214*t75217*3.0;
                double t75242 = t75240+t75241+t75239;
                double t75247 = 1.0/(t75233*t75233);
                double t75248 = 1.0/tau_a[index];
                double t75249 = tau_a[index]-1.0/1.0E20;
                double t75250 = ( (t75249 > 0.0) ?  1.0 : 0.0 ) ;
                double t75251 = pow(2.0,1.0/3.0);
                double t75252 = t75251*2.0;
                double t75253 = t75252-2.0;
                double t75254 = two_13*2.0;
                double t75255 = t75254-2.0;
                double t75256 = 1.0/t75255;
                double t75257 = 1.0/c0f;
                double t75258 = b1f*t75195;
                double t75259 = b3f*t75196;
                double t75260 = b4f*t75197*t75198;
                double t75261 = b2f*c*t75193;
                double t75262 = t75260+t75261+t75258+t75259;
                double t75263 = 1.0/t75262;
                double t75264 = t75263*t75257*(1.0/2.0);
                double t75265 = t75264+1.0;
                double t75266 = log(t75265);
                double t75267 = a1f*c*t75193;
                double t75268 = t75267+1.0;
                double t75269 = c0f*t75266*t75268*2.0;
                double t75270 = c0p*t75210*t75208*2.0;
                double t75271 = 1.0/t75233;
                double t75272 = 1.0/t75222;
                double t75273 = 1.0/t75226;
                double t75274 = 1.0/(t75219*t75219);
                double t75275 = 1.0/kp;
                double t75276 = rho_a[index]*2.0;
                double t75277 = pow(rho_a[index],5.0/3.0);
                double t75278 = C_k*t75248*t75277;
                double t75279 = t75278-1.0;
                double t75280 = t75279*t75279;
                double t75281 = t75280*t75280;
                double t75282 = t75281*t75281;
                double t75283 = t75278+1.0;
                v_gamma_aa_gamma_aa_[index] = t75250*t75248*(t75270-t75253*t75256*(t75270-t75269))*((ccaa1*gcaa*t75213) \
                   /t75219+ccaa2*gamma_aa[index]*t75211*t75212*t75272*2.0-ccaa1*gamma_aa[index]*t75211*t75212*t75274- \
                   ccaa2*t75211*t75212*t75214*t75234*t75238-ccaa4*t75215*t75216*t75227*t75228*t75247+ccaa4*gamma_aa[index]* \
                   t75214*t75215*t75216*t75271*4.0+ccaa3*gcaa*t75211*t75214*t75217*t75273*3.0-ccaa3*gamma_aa[index]*gcaa* \
                   t75211*t75214*t75242*t75217*t75235)*(1.0/4.0)-rho_a[index]*(t75250*(t75248*(tau_a[index]*2.0-(gamma_aa[index]* \
                   (1.0/4.0))/rho_a[index])*(1.0/2.0)-1.0)+1.0)*(t75270+t75253*t75256*(t75269-c0p*t75210*t75208*2.0)) \
                   *(ccaa2*t75211*t75212*t75272*2.0-ccaa1*t75211*t75212*t75274*2.0+ccaa4*t75214*t75215*t75216*t75271* \
                   1.2E1-ccaa2*t75214*t75215*t75216*t75238*2.0-ccaa4*t75215*t75216*t75227*t75247*(t75211*t75212*1.2E1+ \
                   t75214*t75215*t75216*1.2E1+gamma_aa[index]*gcaa*t75211*t75217*2.4E1)+ccaa1*gamma_aa[index]*gcaa*t75211* \
                   t75217*1.0/(t75219*t75219*t75219)*2.0+ccaa2*t75211*t75212*1.0/(t75222*t75222*t75222)*t75214*(t75234* \
                   t75234)*2.0+ccaa4*t75215*1.0/(t75233*t75233*t75233)*t75216*t75227*(t75228*t75228)*2.0+ccaa3*gamma_aa[index]* \
                   gcaa*t75211*t75217*t75273*6.0-ccaa2*gamma_aa[index]*t75211*t75212*t75234*t75238*4.0-ccaa4*gamma_aa[index]* \
                   t75214*t75215*t75216*t75228*t75247*8.0-ccaa3*gcaa*t75211*t75214*t75242*t75217*t75235*6.0-ccaa3*gamma_aa[index]* \
                   gcaa*t75211*t75214*t75217*t75235*(t75211*t75212*6.0+gamma_aa[index]*gcaa*t75211*t75217*6.0)+ccaa3* \
                   gamma_aa[index]*gcaa*t75211*t75214*(t75242*t75242)*t75217*1.0/(t75226*t75226*t75226)*2.0)+1.0/(k*k* \
                   k*k)*(mu_*mu_)*1.0/(rho_a[index]*rho_a[index]*rho_a[index])*t75275*1.0/pow(t75276,4.0/3.0)*1.0/pow(gamma_aa[index]* \
                   1.0/(k*k)*mu_*1.0/(rho_a[index]*rho_a[index])*t75275*1.0/pow(t75276,2.0/3.0)*(1.0/4.0)+1.0,3.0)*(X- \
                   1.0)*((a_1*t75279)/t75283+a_2*t75280*1.0/(t75283*t75283)+a_4*t75281*1.0/(t75283*t75283*t75283*t75283) \
                   +a_8*t75282*1.0/(t75283*t75283*t75283*t75283*t75283*t75283*t75283*t75283)+a_10*t75280*t75282*1.0/pow(t75283,1.0E1) \
                   +a_3*t75280*1.0/(t75283*t75283*t75283)*t75279+a_5*t75281*1.0/(t75283*t75283*t75283*t75283*t75283)* \
                   t75279+a_6*t75280*t75281*1.0/(t75283*t75283*t75283*t75283*t75283*t75283)+a_9*t75282*1.0/(t75283*t75283* \
                   t75283*t75283*t75283*t75283*t75283*t75283*t75283)*t75279+a_11*t75280*t75282*1.0/pow(t75283,1.1E1)* \
                   t75279+a_7*t75280*t75281*1.0/(t75283*t75283*t75283*t75283*t75283*t75283*t75283)*t75279+1.0)*(1.0/8.0) \
                   ;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_aa_gamma_aa_[index] = 0.0;
            } else {
                v_gamma_aa_gamma_aa_[index] = 0.0;
            } 

            //V_gamma_aa_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_aa_gamma_ab_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_aa_gamma_ab_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_aa_gamma_ab_[index] = 0.0;
            } else {
                v_gamma_aa_gamma_ab_[index] = 0.0;
            } 

            //V_gamma_aa_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t72434 = 1.0/pow(rho_a[index],1.0/3.0);
                double t72435 = c*t72434;
                double t72436 = sqrt(t72435);
                double t72437 = pow(t72435,3.0/2.0);
                double t72438 = c*c;
                double t72439 = 1.0/pow(rho_a[index],2.0/3.0);
                double t72440 = 1.0/c0p;
                double t72441 = b1p*t72436;
                double t72442 = b3p*t72437;
                double t72443 = b4p*t72438*t72439;
                double t72444 = b2p*c*t72434;
                double t72445 = t72441+t72442+t72443+t72444;
                double t72446 = 1.0/t72445;
                double t72447 = t72440*t72446*(1.0/2.0);
                double t72448 = t72447+1.0;
                double t72449 = log(t72448);
                double t72450 = a1p*c*t72434;
                double t72451 = t72450+1.0;
                double t72452 = pow(2.0,1.0/3.0);
                double t72453 = t72452*2.0;
                double t72454 = t72453-2.0;
                double t72455 = two_13*2.0;
                double t72456 = t72455-2.0;
                double t72457 = 1.0/t72456;
                double t72458 = 1.0/c0f;
                double t72459 = 1.0/pow(rho_b[index],1.0/3.0);
                double t72460 = c*t72459;
                double t72461 = sqrt(t72460);
                double t72462 = pow(t72460,3.0/2.0);
                double t72463 = 1.0/pow(rho_b[index],2.0/3.0);
                double t72464 = b1p*t72461;
                double t72465 = b3p*t72462;
                double t72466 = b4p*t72463*t72438;
                double t72467 = b2p*c*t72459;
                double t72468 = t72464+t72465+t72466+t72467;
                double t72469 = 1.0/t72468;
                double t72470 = t72440*t72469*(1.0/2.0);
                double t72471 = t72470+1.0;
                double t72472 = log(t72471);
                double t72473 = a1p*c*t72459;
                double t72474 = t72473+1.0;
                double t72475 = c0p*t72472*t72474*2.0;
                double t72476 = rho_a[index]+rho_b[index];
                double t72477 = 1.0/pow(t72476,1.0/3.0);
                double t72478 = c*t72477;
                double t72479 = sqrt(t72478);
                double t72480 = pow(t72478,3.0/2.0);
                double t72481 = 1.0/pow(t72476,2.0/3.0);
                double t72482 = b1p*t72479;
                double t72483 = b3p*t72480;
                double t72484 = b4p*t72481*t72438;
                double t72485 = b2p*c*t72477;
                double t72486 = t72482+t72483+t72484+t72485;
                double t72487 = 1.0/t72486;
                double t72488 = t72440*t72487*(1.0/2.0);
                double t72489 = t72488+1.0;
                double t72490 = log(t72489);
                double t72491 = a1p*c*t72477;
                double t72492 = t72491+1.0;
                double t72493 = c0p*t72490*t72492*2.0;
                double t72494 = rho_a[index]-rho_b[index];
                double t72495 = t72494*t72494;
                double t72496 = 1.0/t72476;
                double t72497 = t72494*t72496;
                double t72498 = 1.0/(t72476*t72476*t72476*t72476);
                double t72499 = t72495*t72495;
                double t72500 = t72497+1.0;
                double t72501 = pow(t72500,4.0/3.0);
                double t72502 = -t72497+1.0;
                double t72503 = pow(t72502,4.0/3.0);
                double t72504 = t72501+t72503-2.0;
                double t72505 = gcab*gcab;
                double t72508 = 1.0/pow(rho_a[index],8.0/3.0);
                double t72509 = 1.0/pow(rho_b[index],8.0/3.0);
                double t72510 = gamma_aa[index]*t72508*(1.0/2.0);
                double t72511 = gamma_bb[index]*t72509*(1.0/2.0);
                double t72506 = t72510+t72511;
                double t72507 = t72506*t72506;
                double t72512 = t72505*t72505;
                double t72513 = t72507*t72507;
                double t72514 = t72505*t72507*3.0;
                double t72515 = gcab*t72505*t72506*t72507;
                double t72516 = gcab*t72506*3.0;
                double t72517 = t72514+t72515+t72516+1.0;
                double t72518 = t72505*t72507;
                double t72519 = gcab*t72506*2.0;
                double t72520 = t72518+t72519+1.0;
                double t72521 = t72505*t72507*6.0;
                double t72522 = gcab*t72505*t72506*t72507*4.0;
                double t72523 = t72512*t72513;
                double t72524 = gcab*t72506*4.0;
                double t72525 = t72521+t72522+t72523+t72524+1.0;
                double t72526 = 1.0/(t72520*t72520);
                double t72527 = gcab*t72508;
                double t72528 = t72505*t72506*t72508;
                double t72529 = t72527+t72528;
                double t72530 = gcab*t72509;
                double t72531 = t72505*t72506*t72509;
                double t72532 = t72530+t72531;
                double t72533 = gcab*t72506;
                double t72534 = t72533+1.0;
                double t72535 = gcab*t72508*2.0;
                double t72536 = t72505*t72506*t72508*6.0;
                double t72537 = gcab*t72505*t72507*t72508*6.0;
                double t72538 = t72512*t72506*t72507*t72508*2.0;
                double t72539 = t72535+t72536+t72537+t72538;
                double t72540 = 1.0/(t72525*t72525);
                double t72541 = gcab*t72509*2.0;
                double t72542 = t72505*t72506*t72509*6.0;
                double t72543 = gcab*t72505*t72507*t72509*6.0;
                double t72544 = t72512*t72506*t72507*t72509*2.0;
                double t72545 = t72541+t72542+t72543+t72544;
                double t72546 = gcab*t72508*(3.0/2.0);
                double t72547 = t72505*t72506*t72508*3.0;
                double t72548 = gcab*t72505*t72507*t72508*(3.0/2.0);
                double t72549 = t72546+t72547+t72548;
                double t72550 = 1.0/(t72517*t72517);
                double t72551 = gcab*t72509*(3.0/2.0);
                double t72552 = t72505*t72506*t72509*3.0;
                double t72553 = gcab*t72505*t72507*t72509*(3.0/2.0);
                double t72554 = t72551+t72552+t72553;
                v_gamma_aa_gamma_bb_[index] = (-rho_b[index]*(t72475-t72454*t72457*(t72475-c0f*log((t72458*(1.0/2.0) \
                   )/(b1f*t72461+b3f*t72462+b2f*c*t72459+b4f*t72463*t72438)+1.0)*(a1f*c*t72459+1.0)*2.0))+t72476*(t72493- \
                   t72504*t72457*t72498*t72499*(t72493-c0f*log((t72458*(1.0/2.0))/(b1f*t72479+b3f*t72480+b2f*c*t72477+ \
                   b4f*t72481*t72438)+1.0)*(a1f*c*t72477+1.0)*2.0)+(Aa*t72504*t72457*log((1.0/2.0)/(Aa*(b1a*t72479+b3a* \
                   t72480+b2a*c*t72477+b4a*t72481*t72438))+1.0)*(t72498*t72499-1.0)*(a1a*c*t72477+1.0)*2.0)/d2fz0)+rho_a[index]* \
                   (t72454*t72457*(c0p*t72451*t72449*2.0-c0f*log((t72458*(1.0/2.0))/(b1f*t72436+b3f*t72437+b2f*c*t72434+ \
                   b4f*t72438*t72439)+1.0)*(a1f*c*t72434+1.0)*2.0)-c0p*t72451*t72449*2.0))*(ccab4*t72512*t72513*t72540* \
                   (t72505*t72508*t72509*3.0+t72512*t72507*t72508*t72509*3.0+gcab*t72505*t72506*t72508*t72509*6.0)-(ccab2* \
                   t72505*t72508*t72509*(1.0/2.0))/t72520+ccab1*t72505*1.0/(t72534*t72534)*t72508*t72509*(1.0/2.0)+ccab2* \
                   t72505*t72532*t72506*t72508*t72526+ccab2*t72512*t72507*t72508*t72526*t72509*(1.0/2.0)+ccab2*t72505* \
                   t72506*t72526*t72509*t72529-ccab2*1.0/(t72520*t72520*t72520)*t72505*t72532*t72507*t72529*2.0-(ccab4* \
                   t72512*t72507*t72508*t72509*3.0)/t72525-ccab4*t72512*t72513*1.0/(t72525*t72525*t72525)*t72545*t72539* \
                   2.0+ccab3*gcab*t72505*t72550*t72507*t72508*t72554*(3.0/2.0)+ccab3*gcab*t72505*t72550*t72507*t72509* \
                   t72549*(3.0/2.0)+ccab4*t72512*t72540*t72506*t72507*t72508*t72545*2.0+ccab4*t72512*t72540*t72506*t72507* \
                   t72509*t72539*2.0+ccab3*gcab*t72505*t72550*t72506*t72507*(t72505*t72508*t72509*(3.0/2.0)+gcab*t72505* \
                   t72506*t72508*t72509*(3.0/2.0))-ccab1*gcab*t72505*t72506*1.0/(t72534*t72534*t72534)*t72508*t72509* \
                   (1.0/2.0)-(ccab3*gcab*t72505*t72506*t72508*t72509*(3.0/2.0))/t72517-ccab3*gcab*t72505*t72506*t72507* \
                   1.0/(t72517*t72517*t72517)*t72554*t72549*2.0);
            } else if (rho_a[index] > cutoff_) {
                v_gamma_aa_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_aa_gamma_bb_[index] = 0.0;
            } else {
                v_gamma_aa_gamma_bb_[index] = 0.0;
            } 

            //V_gamma_ab_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_ab_gamma_ab_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_ab_gamma_ab_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_ab_gamma_ab_[index] = 0.0;
            } else {
                v_gamma_ab_gamma_ab_[index] = 0.0;
            } 

            //V_gamma_ab_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_ab_gamma_bb_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_ab_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_ab_gamma_bb_[index] = 0.0;
            } else {
                v_gamma_ab_gamma_bb_[index] = 0.0;
            } 

            //V_gamma_bb_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t72558 = 1.0/pow(rho_a[index],1.0/3.0);
                double t72559 = c*t72558;
                double t72560 = sqrt(t72559);
                double t72561 = pow(t72559,3.0/2.0);
                double t72562 = c*c;
                double t72563 = 1.0/pow(rho_a[index],2.0/3.0);
                double t72564 = 1.0/c0p;
                double t72565 = b1p*t72560;
                double t72566 = b3p*t72561;
                double t72567 = b4p*t72562*t72563;
                double t72568 = b2p*c*t72558;
                double t72569 = t72565+t72566+t72567+t72568;
                double t72570 = 1.0/t72569;
                double t72571 = t72570*t72564*(1.0/2.0);
                double t72572 = t72571+1.0;
                double t72573 = log(t72572);
                double t72574 = a1p*c*t72558;
                double t72575 = t72574+1.0;
                double t72576 = pow(2.0,1.0/3.0);
                double t72577 = t72576*2.0;
                double t72578 = t72577-2.0;
                double t72579 = two_13*2.0;
                double t72580 = t72579-2.0;
                double t72581 = 1.0/t72580;
                double t72582 = 1.0/c0f;
                double t72583 = 1.0/pow(rho_b[index],1.0/3.0);
                double t72584 = c*t72583;
                double t72585 = sqrt(t72584);
                double t72586 = pow(t72584,3.0/2.0);
                double t72587 = 1.0/pow(rho_b[index],2.0/3.0);
                double t72588 = b1p*t72585;
                double t72589 = b3p*t72586;
                double t72590 = b4p*t72562*t72587;
                double t72591 = b2p*c*t72583;
                double t72592 = t72590+t72591+t72588+t72589;
                double t72593 = 1.0/t72592;
                double t72594 = t72564*t72593*(1.0/2.0);
                double t72595 = t72594+1.0;
                double t72596 = log(t72595);
                double t72597 = a1p*c*t72583;
                double t72598 = t72597+1.0;
                double t72599 = c0p*t72596*t72598*2.0;
                double t72600 = rho_a[index]+rho_b[index];
                double t72601 = 1.0/pow(t72600,1.0/3.0);
                double t72602 = c*t72601;
                double t72603 = sqrt(t72602);
                double t72604 = pow(t72602,3.0/2.0);
                double t72605 = 1.0/pow(t72600,2.0/3.0);
                double t72606 = b1p*t72603;
                double t72607 = b3p*t72604;
                double t72608 = b4p*t72605*t72562;
                double t72609 = b2p*c*t72601;
                double t72610 = t72606+t72607+t72608+t72609;
                double t72611 = 1.0/t72610;
                double t72612 = t72611*t72564*(1.0/2.0);
                double t72613 = t72612+1.0;
                double t72614 = log(t72613);
                double t72615 = a1p*c*t72601;
                double t72616 = t72615+1.0;
                double t72617 = c0p*t72614*t72616*2.0;
                double t72618 = rho_a[index]-rho_b[index];
                double t72619 = t72618*t72618;
                double t72620 = 1.0/t72600;
                double t72621 = t72620*t72618;
                double t72622 = 1.0/(t72600*t72600*t72600*t72600);
                double t72623 = t72619*t72619;
                double t72624 = t72621+1.0;
                double t72625 = pow(t72624,4.0/3.0);
                double t72626 = -t72621+1.0;
                double t72627 = pow(t72626,4.0/3.0);
                double t72628 = t72625+t72627-2.0;
                double t72629 = gcab*gcab;
                double t72630 = 1.0/pow(rho_b[index],1.6E1/3.0);
                double t72631 = 1.0/pow(rho_a[index],8.0/3.0);
                double t72632 = gamma_aa[index]*t72631*(1.0/2.0);
                double t72633 = 1.0/pow(rho_b[index],8.0/3.0);
                double t72634 = gamma_bb[index]*t72633*(1.0/2.0);
                double t72635 = t72632+t72634;
                double t72636 = gcab*t72635;
                double t72637 = t72636+1.0;
                double t72638 = t72635*t72635;
                double t72639 = t72629*t72638;
                double t72640 = gcab*t72635*2.0;
                double t72641 = t72640+t72639+1.0;
                double t72642 = t72629*t72629;
                double t72659 = gcab*t72633*2.0;
                double t72660 = t72633*t72635*t72629*6.0;
                double t72661 = gcab*t72633*t72629*t72638*6.0;
                double t72662 = t72633*t72642*t72635*t72638*2.0;
                double t72643 = t72660+t72661+t72662+t72659;
                double t72644 = t72638*t72638;
                double t72664 = gcab*t72633*(3.0/2.0);
                double t72665 = t72633*t72635*t72629*3.0;
                double t72666 = gcab*t72633*t72629*t72638*(3.0/2.0);
                double t72645 = t72664+t72665+t72666;
                double t72646 = t72629*t72638*3.0;
                double t72647 = gcab*t72635*t72629*t72638;
                double t72648 = gcab*t72635*3.0;
                double t72649 = t72646+t72647+t72648+1.0;
                double t72656 = gcab*t72633;
                double t72657 = t72633*t72635*t72629;
                double t72650 = t72656+t72657;
                double t72651 = t72629*t72638*6.0;
                double t72652 = gcab*t72635*t72629*t72638*4.0;
                double t72653 = t72642*t72644;
                double t72654 = gcab*t72635*4.0;
                double t72655 = t72651+t72652+t72653+t72654+1.0;
                double t72658 = 1.0/(t72641*t72641);
                double t72663 = 1.0/(t72655*t72655);
                double t72667 = 1.0/(t72649*t72649);
                double t72668 = c0p*t72573*t72575*2.0;
                double t72669 = b1f*t72585;
                double t72670 = b3f*t72586;
                double t72671 = b4f*t72562*t72587;
                double t72672 = b2f*c*t72583;
                double t72673 = t72670+t72671+t72672+t72669;
                double t72674 = 1.0/t72673;
                double t72675 = t72582*t72674*(1.0/2.0);
                double t72676 = t72675+1.0;
                double t72677 = log(t72676);
                double t72678 = a1f*c*t72583;
                double t72679 = t72678+1.0;
                double t72720 = c0f*t72677*t72679*2.0;
                double t72680 = -t72720+t72599;
                double t72681 = t72599-t72581*t72680*t72578;
                double t72682 = gcaa*gcaa;
                double t72683 = gamma_bb[index]*gamma_bb[index];
                double t72684 = t72682*t72682;
                double t72685 = 1.0/pow(rho_b[index],3.2E1/3.0);
                double t72686 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]);
                double t72687 = gamma_bb[index]*gcaa*t72633;
                double t72688 = t72687+1.0;
                double t72689 = gamma_bb[index]*gcaa*t72633*2.0;
                double t72690 = t72630*t72682*t72683;
                double t72691 = t72690+t72689+1.0;
                double t72692 = gamma_bb[index]*gcaa*t72633*3.0;
                double t72693 = gamma_bb[index]*gcaa*t72682*t72683*t72686;
                double t72694 = t72630*t72682*t72683*3.0;
                double t72695 = t72692+t72693+t72694+1.0;
                double t72696 = t72683*t72683;
                double t72712 = gcaa*t72633*4.0;
                double t72713 = gamma_bb[index]*t72630*t72682*1.2E1;
                double t72714 = gcaa*t72682*t72683*t72686*1.2E1;
                double t72715 = gamma_bb[index]*t72683*t72684*t72685*4.0;
                double t72697 = t72712+t72713+t72714+t72715;
                double t72698 = gamma_bb[index]*gcaa*t72633*4.0;
                double t72699 = gamma_bb[index]*gcaa*t72682*t72683*t72686*4.0;
                double t72700 = t72630*t72682*t72683*6.0;
                double t72701 = t72684*t72685*t72696;
                double t72702 = t72700+t72701+t72698+t72699+1.0;
                double t72705 = gcaa*t72633*2.0;
                double t72706 = gamma_bb[index]*t72630*t72682*2.0;
                double t72703 = t72705+t72706;
                double t72704 = 1.0/(t72695*t72695);
                double t72707 = 1.0/(t72691*t72691);
                double t72708 = gcaa*t72633*3.0;
                double t72709 = gamma_bb[index]*t72630*t72682*6.0;
                double t72710 = gcaa*t72682*t72683*t72686*3.0;
                double t72711 = t72710+t72708+t72709;
                double t72716 = 1.0/(t72702*t72702);
                double t72717 = 1.0/tau_b[index];
                double t72718 = tau_b[index]-1.0/1.0E20;
                double t72719 = ( (t72718 > 0.0) ?  1.0 : 0.0 ) ;
                double t72721 = 1.0/t72702;
                double t72722 = 1.0/t72691;
                double t72723 = 1.0/t72695;
                double t72724 = 1.0/(t72688*t72688);
                double t72725 = 1.0/kp;
                double t72726 = rho_b[index]*2.0;
                double t72727 = pow(rho_b[index],5.0/3.0);
                double t72728 = C_k*t72717*t72727;
                double t72729 = t72728-1.0;
                double t72730 = t72729*t72729;
                double t72731 = t72730*t72730;
                double t72732 = t72731*t72731;
                double t72733 = t72728+1.0;
                v_gamma_bb_gamma_bb_[index] = (rho_b[index]*t72681+rho_a[index]*(t72668-t72581*t72578*(t72668-c0f* \
                   log((t72582*(1.0/2.0))/(b1f*t72560+b3f*t72561+b2f*c*t72558+b4f*t72562*t72563)+1.0)*(a1f*c*t72558+1.0) \
                   *2.0))-t72600*(t72617-t72622*t72623*t72581*t72628*(t72617-c0f*log((t72582*(1.0/2.0))/(b1f*t72603+b3f* \
                   t72604+b2f*c*t72601+b4f*t72605*t72562)+1.0)*(a1f*c*t72601+1.0)*2.0)+(Aa*t72581*t72628*log((1.0/2.0) \
                   /(Aa*(b1a*t72603+b3a*t72604+b2a*c*t72601+b4a*t72605*t72562))+1.0)*(t72622*t72623-1.0)*(a1a*c*t72601+ \
                   1.0)*2.0)/d2fz0))*((ccab2*t72630*t72629*(1.0/2.0))/t72641-ccab1*t72630*1.0/(t72637*t72637)*t72629* \
                   (1.0/2.0)+ccab2*1.0/(t72641*t72641*t72641)*(t72650*t72650)*t72629*t72638*2.0+ccab4*t72642*(t72643* \
                   t72643)*t72644*1.0/(t72655*t72655*t72655)*2.0-ccab2*t72630*t72642*t72638*t72658*(1.0/2.0)-ccab4*t72642* \
                   t72644*t72663*(t72630*t72629*3.0+t72630*t72642*t72638*3.0+gcab*t72630*t72635*t72629*6.0)+(ccab4*t72630* \
                   t72642*t72638*3.0)/t72655-ccab2*t72650*t72633*t72635*t72629*t72658*2.0+ccab1*gcab*t72630*t72635*1.0/ \
                   (t72637*t72637*t72637)*t72629*(1.0/2.0)+(ccab3*gcab*t72630*t72635*t72629*(3.0/2.0))/t72649+ccab3*gcab* \
                   t72635*(t72645*t72645)*t72629*t72638*1.0/(t72649*t72649*t72649)*2.0-ccab3*gcab*t72633*t72645*t72629* \
                   t72638*t72667*3.0-ccab4*t72633*t72642*t72643*t72635*t72663*t72638*4.0-ccab3*gcab*t72635*t72629*t72638* \
                   t72667*(t72630*t72629*(3.0/2.0)+gcab*t72630*t72635*t72629*(3.0/2.0)))-rho_b[index]*t72681*(t72719* \
                   (t72717*(tau_b[index]*2.0-(gamma_bb[index]*(1.0/4.0))/rho_b[index])*(1.0/2.0)-1.0)+1.0)*(ccaa2*t72630* \
                   t72722*t72682*2.0-ccaa1*t72630*t72724*t72682*2.0+ccaa4*t72721*t72683*t72684*t72685*1.2E1-ccaa2*t72707* \
                   t72683*t72684*t72685*2.0-ccaa4*t72716*t72684*t72685*t72696*(t72630*t72682*1.2E1+t72683*t72684*t72685* \
                   1.2E1+gamma_bb[index]*gcaa*t72682*t72686*2.4E1)+ccaa1*gamma_bb[index]*gcaa*t72682*t72686*1.0/(t72688* \
                   t72688*t72688)*2.0+ccaa2*t72630*(t72703*t72703)*t72682*1.0/(t72691*t72691*t72691)*t72683*2.0+ccaa4* \
                   1.0/(t72702*t72702*t72702)*t72684*t72685*t72696*(t72697*t72697)*2.0+ccaa3*gamma_bb[index]*gcaa*t72723* \
                   t72682*t72686*6.0-ccaa2*gamma_bb[index]*t72630*t72703*t72707*t72682*4.0-ccaa4*gamma_bb[index]*t72716* \
                   t72683*t72684*t72685*t72697*8.0-ccaa3*gcaa*t72711*t72704*t72682*t72683*t72686*6.0-ccaa3*gamma_bb[index]* \
                   gcaa*t72704*t72682*t72683*t72686*(t72630*t72682*6.0+gamma_bb[index]*gcaa*t72682*t72686*6.0)+ccaa3* \
                   gamma_bb[index]*gcaa*(t72711*t72711)*t72682*t72683*t72686*1.0/(t72695*t72695*t72695)*2.0)+t72717*t72719* \
                   (t72599+t72581*t72578*(t72720-t72599))*((ccaa1*gcaa*t72633)/t72688+ccaa2*gamma_bb[index]*t72630*t72722* \
                   t72682*2.0-ccaa1*gamma_bb[index]*t72630*t72724*t72682-ccaa2*t72630*t72703*t72707*t72682*t72683-ccaa4* \
                   t72716*t72684*t72685*t72696*t72697+ccaa4*gamma_bb[index]*t72721*t72683*t72684*t72685*4.0+ccaa3*gcaa* \
                   t72723*t72682*t72683*t72686*3.0-ccaa3*gamma_bb[index]*gcaa*t72711*t72704*t72682*t72683*t72686)*(1.0/ \
                   4.0)+1.0/(k*k*k*k)*(mu_*mu_)*1.0/(rho_b[index]*rho_b[index]*rho_b[index])*t72725*1.0/pow(t72726,4.0/ \
                   3.0)*1.0/pow(gamma_bb[index]*1.0/(k*k)*mu_*1.0/(rho_b[index]*rho_b[index])*t72725*1.0/pow(t72726,2.0/ \
                   3.0)*(1.0/4.0)+1.0,3.0)*(X-1.0)*((a_1*t72729)/t72733+a_2*t72730*1.0/(t72733*t72733)+a_4*t72731*1.0/ \
                   (t72733*t72733*t72733*t72733)+a_8*t72732*1.0/(t72733*t72733*t72733*t72733*t72733*t72733*t72733*t72733) \
                   +a_10*t72730*t72732*1.0/pow(t72733,1.0E1)+a_3*t72730*1.0/(t72733*t72733*t72733)*t72729+a_5*t72731* \
                   1.0/(t72733*t72733*t72733*t72733*t72733)*t72729+a_6*t72730*t72731*1.0/(t72733*t72733*t72733*t72733* \
                   t72733*t72733)+a_9*t72732*1.0/(t72733*t72733*t72733*t72733*t72733*t72733*t72733*t72733*t72733)*t72729+ \
                   a_11*t72730*t72732*1.0/pow(t72733,1.1E1)*t72729+a_7*t72730*t72731*1.0/(t72733*t72733*t72733*t72733* \
                   t72733*t72733*t72733)*t72729+1.0)*(1.0/8.0);
            } else if (rho_a[index] > cutoff_) {
                v_gamma_bb_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                double t74071 = 1.0/pow(rho_b[index],1.0/3.0);
                double t74072 = c*t74071;
                double t74073 = sqrt(t74072);
                double t74074 = pow(t74072,3.0/2.0);
                double t74075 = c*c;
                double t74076 = 1.0/pow(rho_b[index],2.0/3.0);
                double t74077 = 1.0/c0p;
                double t74078 = b1p*t74073;
                double t74079 = b3p*t74074;
                double t74080 = b4p*t74075*t74076;
                double t74081 = b2p*c*t74071;
                double t74082 = t74080+t74081+t74078+t74079;
                double t74083 = 1.0/t74082;
                double t74084 = t74083*t74077*(1.0/2.0);
                double t74085 = t74084+1.0;
                double t74086 = log(t74085);
                double t74087 = a1p*c*t74071;
                double t74088 = t74087+1.0;
                double t74089 = gcaa*gcaa;
                double t74090 = 1.0/pow(rho_b[index],1.6E1/3.0);
                double t74091 = 1.0/pow(rho_b[index],8.0/3.0);
                double t74092 = gamma_bb[index]*gamma_bb[index];
                double t74093 = t74089*t74089;
                double t74094 = 1.0/pow(rho_b[index],3.2E1/3.0);
                double t74095 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]);
                double t74096 = gamma_bb[index]*gcaa*t74091;
                double t74097 = t74096+1.0;
                double t74098 = gamma_bb[index]*gcaa*t74091*2.0;
                double t74099 = t74090*t74092*t74089;
                double t74100 = t74098+t74099+1.0;
                double t74101 = gamma_bb[index]*gcaa*t74091*3.0;
                double t74102 = gamma_bb[index]*gcaa*t74092*t74095*t74089;
                double t74103 = t74090*t74092*t74089*3.0;
                double t74104 = t74101+t74102+t74103+1.0;
                double t74105 = t74092*t74092;
                double t74121 = gcaa*t74091*4.0;
                double t74122 = gamma_bb[index]*t74090*t74089*1.2E1;
                double t74123 = gcaa*t74092*t74095*t74089*1.2E1;
                double t74124 = gamma_bb[index]*t74092*t74093*t74094*4.0;
                double t74106 = t74121+t74122+t74123+t74124;
                double t74107 = gamma_bb[index]*gcaa*t74091*4.0;
                double t74108 = gamma_bb[index]*gcaa*t74092*t74095*t74089*4.0;
                double t74109 = t74090*t74092*t74089*6.0;
                double t74110 = t74105*t74093*t74094;
                double t74111 = t74110+t74107+t74108+t74109+1.0;
                double t74114 = gcaa*t74091*2.0;
                double t74115 = gamma_bb[index]*t74090*t74089*2.0;
                double t74112 = t74114+t74115;
                double t74113 = 1.0/(t74104*t74104);
                double t74116 = 1.0/(t74100*t74100);
                double t74117 = gcaa*t74091*3.0;
                double t74118 = gamma_bb[index]*t74090*t74089*6.0;
                double t74119 = gcaa*t74092*t74095*t74089*3.0;
                double t74120 = t74117+t74118+t74119;
                double t74125 = 1.0/(t74111*t74111);
                double t74126 = 1.0/tau_b[index];
                double t74127 = tau_b[index]-1.0/1.0E20;
                double t74128 = ( (t74127 > 0.0) ?  1.0 : 0.0 ) ;
                double t74129 = pow(2.0,1.0/3.0);
                double t74130 = t74129*2.0;
                double t74131 = t74130-2.0;
                double t74132 = two_13*2.0;
                double t74133 = t74132-2.0;
                double t74134 = 1.0/t74133;
                double t74135 = 1.0/c0f;
                double t74136 = b1f*t74073;
                double t74137 = b3f*t74074;
                double t74138 = b4f*t74075*t74076;
                double t74139 = b2f*c*t74071;
                double t74140 = t74136+t74137+t74138+t74139;
                double t74141 = 1.0/t74140;
                double t74142 = t74141*t74135*(1.0/2.0);
                double t74143 = t74142+1.0;
                double t74144 = log(t74143);
                double t74145 = a1f*c*t74071;
                double t74146 = t74145+1.0;
                double t74147 = c0f*t74144*t74146*2.0;
                double t74148 = c0p*t74086*t74088*2.0;
                double t74149 = 1.0/t74111;
                double t74150 = 1.0/t74100;
                double t74151 = 1.0/t74104;
                double t74152 = 1.0/(t74097*t74097);
                double t74153 = 1.0/kp;
                double t74154 = rho_b[index]*2.0;
                double t74155 = pow(rho_b[index],5.0/3.0);
                double t74156 = C_k*t74126*t74155;
                double t74157 = t74156-1.0;
                double t74158 = t74157*t74157;
                double t74159 = t74158*t74158;
                double t74160 = t74159*t74159;
                double t74161 = t74156+1.0;
                v_gamma_bb_gamma_bb_[index] = t74126*t74128*(t74148+t74131*t74134*(t74147-t74148))*((ccaa1*gcaa*t74091) \
                   /t74097+ccaa2*gamma_bb[index]*t74150*t74090*t74089*2.0-ccaa1*gamma_bb[index]*t74152*t74090*t74089- \
                   ccaa4*t74105*t74106*t74125*t74093*t74094-ccaa2*t74112*t74116*t74090*t74092*t74089+ccaa4*gamma_bb[index]* \
                   t74092*t74093*t74094*t74149*4.0+ccaa3*gcaa*t74151*t74092*t74095*t74089*3.0-ccaa3*gamma_bb[index]*gcaa* \
                   t74120*t74113*t74092*t74095*t74089)*(1.0/4.0)-rho_b[index]*(t74128*(t74126*(tau_b[index]*2.0-(gamma_bb[index]* \
                   (1.0/4.0))/rho_b[index])*(1.0/2.0)-1.0)+1.0)*(t74148+t74131*t74134*(t74147-c0p*t74086*t74088*2.0)) \
                   *(ccaa2*t74150*t74090*t74089*2.0-ccaa1*t74152*t74090*t74089*2.0-ccaa2*t74116*t74092*t74093*t74094* \
                   2.0+ccaa4*t74092*t74093*t74094*t74149*1.2E1-ccaa4*t74105*t74125*t74093*t74094*(t74090*t74089*1.2E1+ \
                   t74092*t74093*t74094*1.2E1+gamma_bb[index]*gcaa*t74095*t74089*2.4E1)+ccaa1*gamma_bb[index]*gcaa*t74095* \
                   1.0/(t74097*t74097*t74097)*t74089*2.0+ccaa2*1.0/(t74100*t74100*t74100)*(t74112*t74112)*t74090*t74092* \
                   t74089*2.0+ccaa4*1.0/(t74111*t74111*t74111)*t74105*(t74106*t74106)*t74093*t74094*2.0+ccaa3*gamma_bb[index]* \
                   gcaa*t74151*t74095*t74089*6.0-ccaa2*gamma_bb[index]*t74112*t74116*t74090*t74089*4.0-ccaa4*gamma_bb[index]* \
                   t74106*t74125*t74092*t74093*t74094*8.0-ccaa3*gcaa*t74120*t74113*t74092*t74095*t74089*6.0-ccaa3*gamma_bb[index]* \
                   gcaa*t74113*t74092*t74095*t74089*(t74090*t74089*6.0+gamma_bb[index]*gcaa*t74095*t74089*6.0)+ccaa3* \
                   gamma_bb[index]*gcaa*(t74120*t74120)*1.0/(t74104*t74104*t74104)*t74092*t74095*t74089*2.0)+1.0/(k*k* \
                   k*k)*(mu_*mu_)*1.0/(rho_b[index]*rho_b[index]*rho_b[index])*t74153*1.0/pow(t74154,4.0/3.0)*1.0/pow(gamma_bb[index]* \
                   1.0/(k*k)*mu_*1.0/(rho_b[index]*rho_b[index])*t74153*1.0/pow(t74154,2.0/3.0)*(1.0/4.0)+1.0,3.0)*(X- \
                   1.0)*((a_1*t74157)/t74161+a_2*1.0/(t74161*t74161)*t74158+a_4*1.0/(t74161*t74161*t74161*t74161)*t74159+ \
                   a_8*t74160*1.0/(t74161*t74161*t74161*t74161*t74161*t74161*t74161*t74161)+a_10*t74160*1.0/pow(t74161,1.0E1) \
                   *t74158+a_3*1.0/(t74161*t74161*t74161)*t74157*t74158+a_5*1.0/(t74161*t74161*t74161*t74161*t74161)* \
                   t74157*t74159+a_6*1.0/(t74161*t74161*t74161*t74161*t74161*t74161)*t74158*t74159+a_9*t74160*1.0/(t74161* \
                   t74161*t74161*t74161*t74161*t74161*t74161*t74161*t74161)*t74157+a_11*t74160*1.0/pow(t74161,1.1E1)* \
                   t74157*t74158+a_7*1.0/(t74161*t74161*t74161*t74161*t74161*t74161*t74161)*t74157*t74158*t74159+1.0) \
                   *(1.0/8.0);
            } else {
                v_gamma_bb_gamma_bb_[index] = 0.0;
            } 

        }
        if (is_meta_) {

            //V_rho_a_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t72735 = pow(rho_a[index],5.0/3.0);
                double t72736 = 1.0/(tau_a[index]*tau_a[index]);
                double t72737 = 1.0/tau_a[index];
                double t72738 = C_k*t72735*t72737;
                double t72739 = t72738+1.0;
                double t72740 = t72738-1.0;
                double t72741 = 1.0/(t72739*t72739);
                double t72742 = t72740*t72740;
                double t72743 = t72742*t72742;
                double t72744 = t72743*t72743;
                double t72745 = 1.0/pow(t72739,1.1E1);
                double t72746 = 1.0/(t72739*t72739*t72739);
                double t72747 = 1.0/(t72739*t72739*t72739*t72739);
                double t72748 = 1.0/(t72739*t72739*t72739*t72739*t72739);
                double t72749 = 1.0/(t72739*t72739*t72739*t72739*t72739*t72739);
                double t72750 = 1.0/(t72739*t72739*t72739*t72739*t72739*t72739*t72739);
                double t72751 = 1.0/(t72739*t72739*t72739*t72739*t72739*t72739*t72739*t72739);
                double t72752 = 1.0/(t72739*t72739*t72739*t72739*t72739*t72739*t72739*t72739*t72739);
                double t72753 = 1.0/pow(t72739,1.0E1);
                double t72754 = 1.0/(k*k);
                double t72755 = 1.0/kp;
                double t72756 = 1.0/(rho_a[index]*rho_a[index]);
                double t72757 = rho_a[index]*2.0;
                double t72758 = 1.0/pow(t72757,2.0/3.0);
                double t72759 = gamma_aa[index]*mu_*t72754*t72755*t72756*t72758*(1.0/4.0);
                double t72760 = t72759+1.0;
                double t72761 = 1.0/t72760;
                double t72762 = kp-kp*t72761+1.0;
                double t72763 = C_k*C_k;
                double t72764 = pow(rho_a[index],7.0/3.0);
                double t72765 = 1.0/(tau_a[index]*tau_a[index]*tau_a[index]);
                double t72766 = 1.0/t72739;
                double t72767 = 1.0/pow(t72739,1.2E1);
                double t72768 = pow(rho_a[index],2.0/3.0);
                double t72769 = C_k*a_1*t72735*t72736*t72766;
                double t72770 = C_k*a_2*t72740*t72741*t72735*t72736*2.0;
                double t72771 = C_k*a_10*t72740*t72735*t72744*t72753*t72736*1.0E1;
                double t72772 = C_k*a_11*t72742*t72735*t72744*t72736*t72745*1.1E1;
                double t72773 = C_k*a_3*t72742*t72735*t72736*t72746*3.0;
                double t72774 = C_k*a_4*t72740*t72742*t72735*t72736*t72747*4.0;
                double t72775 = C_k*a_5*t72743*t72735*t72736*t72748*5.0;
                double t72776 = C_k*a_6*t72740*t72743*t72735*t72736*t72749*6.0;
                double t72777 = C_k*a_7*t72750*t72742*t72743*t72735*t72736*7.0;
                double t72778 = C_k*a_8*t72740*t72742*t72751*t72743*t72735*t72736*8.0;
                double t72779 = C_k*a_9*t72752*t72735*t72744*t72736*9.0;
                double t72780 = t72770+t72771+t72772+t72773+t72774+t72775+t72776+t72777+t72769+t72778+t72779-C_k* \
                   a_1*t72740*t72741*t72735*t72736-C_k*a_2*t72742*t72735*t72736*t72746*2.0-C_k*a_4*t72743*t72735*t72736* \
                   t72748*4.0-C_k*a_8*t72752*t72735*t72744*t72736*8.0-C_k*a_10*t72742*t72735*t72744*t72736*t72745*1.0E1- \
                   C_k*a_3*t72740*t72742*t72735*t72736*t72747*3.0-C_k*a_5*t72740*t72743*t72735*t72736*t72749*5.0-C_k* \
                   a_6*t72750*t72742*t72743*t72735*t72736*6.0-C_k*a_9*t72740*t72735*t72744*t72753*t72736*9.0-C_k*a_11* \
                   t72740*t72742*t72735*t72744*t72736*t72767*1.1E1-C_k*a_7*t72740*t72742*t72751*t72743*t72735*t72736* \
                   7.0;
                double t72781 = 1.0/pow(rho_a[index],1.0/3.0);
                double t72782 = c*t72781;
                double t72783 = sqrt(t72782);
                double t72784 = pow(t72782,3.0/2.0);
                double t72785 = c*c;
                double t72786 = 1.0/pow(rho_a[index],2.0/3.0);
                double t72787 = 1.0/c0p;
                double t72788 = b1p*t72783;
                double t72789 = b3p*t72784;
                double t72790 = b4p*t72785*t72786;
                double t72791 = b2p*c*t72781;
                double t72792 = t72790+t72791+t72788+t72789;
                double t72793 = 1.0/t72792;
                double t72794 = t72793*t72787*(1.0/2.0);
                double t72795 = t72794+1.0;
                double t72796 = log(t72795);
                double t72797 = a1p*c*t72781;
                double t72798 = t72797+1.0;
                double t72799 = tau_a[index]-1.0/1.0E20;
                double t72800 = tau_a[index]*2.0;
                double t72801 = 1.0/rho_a[index];
                double t72832 = gamma_aa[index]*t72801*(1.0/4.0);
                double t72802 = t72800-t72832;
                double t72803 = gamma_aa[index]*gamma_aa[index];
                double t72804 = gcaa*gcaa;
                double t72805 = t72803*t72803;
                double t72806 = t72804*t72804;
                double t72807 = 1.0/pow(rho_a[index],3.2E1/3.0);
                double t72808 = 1.0/pow(rho_a[index],8.0/3.0);
                double t72809 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t72810 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t72811 = pow(2.0,1.0/3.0);
                double t72812 = t72811*2.0;
                double t72813 = t72812-2.0;
                double t72814 = two_13*2.0;
                double t72815 = t72814-2.0;
                double t72816 = 1.0/t72815;
                double t72817 = 1.0/c0f;
                double t72818 = b1f*t72783;
                double t72819 = b3f*t72784;
                double t72820 = b4f*t72785*t72786;
                double t72821 = b2f*c*t72781;
                double t72822 = t72820+t72821+t72818+t72819;
                double t72823 = 1.0/t72822;
                double t72824 = t72823*t72817*(1.0/2.0);
                double t72825 = t72824+1.0;
                double t72826 = log(t72825);
                double t72827 = a1f*c*t72781;
                double t72828 = t72827+1.0;
                double t72829 = c0f*t72826*t72828*2.0;
                double t72830 = c0p*t72796*t72798*2.0;
                double t72831 = ( (t72799 > 0.0) ?  1.0 : 0.0 ) ;
                double t72862 = t72802*t72736*(1.0/2.0);
                double t72833 = -t72862+t72737;
                double t72834 = t72831*t72833;
                double t72835 = 0.0 ;
                double t72836 = t72802*t72737*(1.0/2.0);
                double t72837 = t72836-1.0;
                double t72838 = t72835*t72837;
                double t72839 = t72834+t72838;
                double t72840 = gamma_aa[index]*gcaa*t72808*4.0;
                double t72841 = gamma_aa[index]*gcaa*t72803*t72804*t72809*4.0;
                double t72842 = t72810*t72803*t72804*6.0;
                double t72843 = t72805*t72806*t72807;
                double t72844 = t72840+t72841+t72842+t72843+1.0;
                double t72845 = 1.0/t72844;
                double t72846 = gamma_aa[index]*gcaa*t72808;
                double t72847 = t72846+1.0;
                double t72848 = 1.0/t72847;
                double t72849 = gamma_aa[index]*gcaa*t72808*3.0;
                double t72850 = gamma_aa[index]*gcaa*t72803*t72804*t72809;
                double t72851 = t72810*t72803*t72804*3.0;
                double t72852 = t72850+t72851+t72849+1.0;
                double t72853 = 1.0/t72852;
                double t72854 = gamma_aa[index]*gcaa*t72808*2.0;
                double t72855 = t72810*t72803*t72804;
                double t72856 = t72854+t72855+1.0;
                double t72857 = 1.0/t72856;
                double t72858 = 1.0/pow(rho_a[index],1.9E1/3.0);
                double t72859 = 1.0/pow(rho_a[index],1.1E1/3.0);
                double t72860 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]*rho_a[index]);
                double t72861 = 1.0/pow(rho_a[index],3.5E1/3.0);
                double t72863 = 1.0/pow(rho_a[index],4.0/3.0);
                double t72864 = 1.0/pow(rho_a[index],5.0/3.0);
                double t72865 = 1.0/sqrt(t72782);
                double t72866 = 1.0/t72795;
                double t72867 = 1.0/(t72792*t72792);
                double t72868 = b4p*t72864*t72785*(2.0/3.0);
                double t72869 = b2p*c*t72863*(1.0/3.0);
                double t72870 = b1p*c*t72863*t72865*(1.0/6.0);
                double t72871 = b3p*c*t72863*t72783*(1.0/2.0);
                double t72872 = t72870+t72871+t72868+t72869;
                double t72873 = t72872*t72866*t72867*t72798;
                double t72874 = ccaa4*t72805*t72806*t72807*t72845;
                double t72875 = ccaa1*gamma_aa[index]*gcaa*t72808*t72848;
                double t72876 = ccaa3*gamma_aa[index]*gcaa*t72803*t72804*t72853*t72809;
                double t72877 = ccaa2*t72810*t72803*t72804*t72857;
                double t72878 = ccaa0+t72874+t72875+t72876+t72877;
                double t72879 = t72830-t72829;
                double t72881 = t72813*t72816*t72879;
                double t72880 = t72830-t72881;
                v_rho_a_tau_a_[index] = (X-1.0)*(t72762*t72780+rho_a[index]*t72762*(C_k*a_1*t72736*t72766*t72768* \
                   (5.0/3.0)-a_1*t72741*t72763*t72764*t72765*(1.0E1/3.0)+a_2*t72741*t72763*t72764*t72765*(1.0E1/3.0)+ \
                   a_1*t72740*t72763*t72746*t72764*t72765*(1.0E1/3.0)+a_10*t72744*t72753*t72763*t72764*t72765*1.5E2-a_2* \
                   t72740*t72763*t72746*t72764*t72765*(4.0E1/3.0)+a_2*t72742*t72763*t72764*t72747*t72765*1.0E1+a_3*t72740* \
                   t72763*t72746*t72764*t72765*1.0E1-a_3*t72742*t72763*t72764*t72747*t72765*3.0E1+a_4*t72742*t72763*t72764* \
                   t72747*t72765*2.0E1+a_4*t72743*t72763*t72764*t72765*t72749*(1.0E2/3.0)-a_5*t72743*t72763*t72764*t72765* \
                   t72749*(2.5E2/3.0)+a_6*t72743*t72763*t72764*t72765*t72749*5.0E1+a_8*t72744*t72753*t72763*t72764*t72765* \
                   1.2E2-a_9*t72744*t72753*t72763*t72764*t72765*2.7E2-C_k*a_1*t72740*t72741*t72736*t72768*(5.0/3.0)+C_k* \
                   a_2*t72740*t72741*t72736*t72768*(1.0E1/3.0)-C_k*a_2*t72742*t72736*t72746*t72768*(1.0E1/3.0)+C_k*a_3* \
                   t72742*t72736*t72746*t72768*5.0-C_k*a_4*t72743*t72736*t72748*t72768*(2.0E1/3.0)+C_k*a_5*t72743*t72736* \
                   t72748*t72768*(2.5E1/3.0)-C_k*a_8*t72752*t72744*t72736*t72768*(4.0E1/3.0)+C_k*a_9*t72752*t72744*t72736* \
                   t72768*1.5E1+C_k*a_10*t72740*t72744*t72753*t72736*t72768*(5.0E1/3.0)-C_k*a_10*t72742*t72744*t72736* \
                   t72745*t72768*(5.0E1/3.0)+C_k*a_11*t72742*t72744*t72736*t72745*t72768*(5.5E1/3.0)-C_k*a_3*t72740*t72742* \
                   t72736*t72747*t72768*5.0+C_k*a_4*t72740*t72742*t72736*t72747*t72768*(2.0E1/3.0)-C_k*a_5*t72740*t72743* \
                   t72736*t72749*t72768*(2.5E1/3.0)-C_k*a_6*t72750*t72742*t72743*t72736*t72768*1.0E1+C_k*a_6*t72740*t72743* \
                   t72736*t72749*t72768*1.0E1+C_k*a_7*t72750*t72742*t72743*t72736*t72768*(3.5E1/3.0)-C_k*a_9*t72740*t72744* \
                   t72753*t72736*t72768*1.5E1-a_10*t72740*t72744*t72745*t72763*t72764*t72765*(1.0E3/3.0)+a_11*t72740* \
                   t72744*t72745*t72763*t72764*t72765*(5.5E2/3.0)+a_10*t72742*t72744*t72763*t72764*t72765*t72767*(5.5E2/ \
                   3.0)-a_11*t72742*t72744*t72763*t72764*t72765*t72767*(1.21E3/3.0)+a_3*t72740*t72742*t72763*t72764*t72765* \
                   t72748*2.0E1-a_4*t72740*t72742*t72763*t72764*t72765*t72748*(1.6E2/3.0)+a_5*t72740*t72750*t72743*t72763* \
                   t72764*t72765*5.0E1+a_5*t72740*t72742*t72763*t72764*t72765*t72748*(1.0E2/3.0)-a_6*t72740*t72750*t72743* \
                   t72763*t72764*t72765*1.2E2+a_6*t72742*t72751*t72743*t72763*t72764*t72765*7.0E1+a_7*t72740*t72750*t72743* \
                   t72763*t72764*t72765*7.0E1-a_7*t72742*t72751*t72743*t72763*t72764*t72765*(4.9E2/3.0)+a_8*t72742*t72751* \
                   t72743*t72763*t72764*t72765*(2.8E2/3.0)+a_9*t72740*t72744*t72745*t72763*t72764*t72765*1.5E2+a_11*t72740* \
                   t72742*t72744*t72763*t72764*t72765*1.0/pow(t72739,1.3E1)*2.2E2-C_k*a_11*t72740*t72742*t72744*t72736* \
                   t72767*t72768*(5.5E1/3.0)-C_k*a_7*t72740*t72742*t72751*t72743*t72736*t72768*(3.5E1/3.0)+C_k*a_8*t72740* \
                   t72742*t72751*t72743*t72736*t72768*(4.0E1/3.0)+a_7*t72740*t72742*t72743*t72752*t72763*t72764*t72765* \
                   (2.8E2/3.0)-a_8*t72740*t72742*t72743*t72752*t72763*t72764*t72765*(6.4E2/3.0)+a_9*t72740*t72742*t72743* \
                   t72752*t72763*t72764*t72765*1.2E2)-kp*rho_a[index]*1.0/(t72760*t72760)*t72780*(gamma_aa[index]*mu_* \
                   1.0/(rho_a[index]*rho_a[index]*rho_a[index])*t72754*t72755*t72758*(1.0/2.0)+gamma_aa[index]*mu_*t72754* \
                   t72755*t72756*1.0/pow(t72757,5.0/3.0)*(1.0/3.0)))-t72839*t72878*(t72830+t72813*t72816*(t72829-c0p* \
                   t72796*t72798*2.0))+rho_a[index]*t72839*t72878*(-t72873+t72813*t72816*(t72873-(1.0/(t72822*t72822) \
                   *t72828*(b2f*c*t72863*(1.0/3.0)+b4f*t72864*t72785*(2.0/3.0)+b1f*c*t72863*t72865*(1.0/6.0)+b3f*c*t72863* \
                   t72783*(1.0/2.0)))/t72825+a1f*c*c0f*t72826*t72863*(2.0/3.0)-a1p*c*c0p*t72863*t72796*(2.0/3.0))+a1p* \
                   c*c0p*t72863*t72796*(2.0/3.0))+rho_a[index]*t72880*t72839*(ccaa1*gamma_aa[index]*gcaa*t72848*t72859* \
                   (8.0/3.0)+ccaa4*t72805*t72806*t72861*t72845*(3.2E1/3.0)+ccaa2*t72803*t72804*t72857*t72858*(1.6E1/3.0) \
                   -ccaa1*t72803*t72804*1.0/(t72847*t72847)*t72858*(8.0/3.0)-ccaa2*t72810*t72803*t72804*1.0/(t72856*t72856) \
                   *(gamma_aa[index]*gcaa*t72859*(1.6E1/3.0)+t72803*t72804*t72858*(1.6E1/3.0))-ccaa4*t72805*t72806*t72807* \
                   1.0/(t72844*t72844)*(gamma_aa[index]*gcaa*t72859*(3.2E1/3.0)+t72805*t72806*t72861*(3.2E1/3.0)+t72803* \
                   t72804*t72858*3.2E1+gamma_aa[index]*gcaa*t72803*t72804*t72860*3.2E1)+ccaa3*gamma_aa[index]*gcaa*t72803* \
                   t72804*t72860*t72853*8.0-ccaa3*gamma_aa[index]*gcaa*t72803*t72804*1.0/(t72852*t72852)*t72809*(gamma_aa[index]* \
                   gcaa*t72859*8.0+t72803*t72804*t72858*1.6E1+gamma_aa[index]*gcaa*t72803*t72804*t72860*8.0))+gamma_aa[index]* \
                   t72801*t72831*t72736*t72880*t72878*(1.0/8.0)-gamma_aa[index]*t72801*t72835*t72880*t72737*t72878*(1.0/ \
                   8.0);
            } else if (rho_a[index] > cutoff_) {
                double t75290 = 1.0/pow(rho_a[index],1.0/3.0);
                double t75291 = c*t75290;
                double t75292 = sqrt(t75291);
                double t75293 = pow(t75291,3.0/2.0);
                double t75294 = c*c;
                double t75295 = 1.0/pow(rho_a[index],2.0/3.0);
                double t75296 = 1.0/c0p;
                double t75297 = b1p*t75292;
                double t75298 = b3p*t75293;
                double t75299 = b4p*t75294*t75295;
                double t75300 = b2p*c*t75290;
                double t75301 = t75300+t75297+t75298+t75299;
                double t75302 = 1.0/t75301;
                double t75303 = t75302*t75296*(1.0/2.0);
                double t75304 = t75303+1.0;
                double t75305 = log(t75304);
                double t75306 = a1p*c*t75290;
                double t75307 = t75306+1.0;
                double t75308 = tau_a[index]-1.0/1.0E20;
                double t75309 = 1.0/tau_a[index];
                double t75310 = tau_a[index]*2.0;
                double t75311 = 1.0/rho_a[index];
                double t75360 = gamma_aa[index]*t75311*(1.0/4.0);
                double t75312 = t75310-t75360;
                double t75313 = gamma_aa[index]*gamma_aa[index];
                double t75314 = gcaa*gcaa;
                double t75315 = t75313*t75313;
                double t75316 = t75314*t75314;
                double t75317 = 1.0/pow(rho_a[index],3.2E1/3.0);
                double t75318 = 1.0/pow(rho_a[index],8.0/3.0);
                double t75319 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t75320 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t75321 = 1.0/(tau_a[index]*tau_a[index]);
                double t75322 = pow(rho_a[index],5.0/3.0);
                double t75323 = C_k*t75322*t75309;
                double t75324 = t75323+1.0;
                double t75325 = t75323-1.0;
                double t75326 = 1.0/(t75324*t75324);
                double t75327 = t75325*t75325;
                double t75328 = t75327*t75327;
                double t75329 = t75328*t75328;
                double t75330 = 1.0/pow(t75324,1.1E1);
                double t75331 = 1.0/(t75324*t75324*t75324);
                double t75332 = 1.0/(t75324*t75324*t75324*t75324);
                double t75333 = 1.0/(t75324*t75324*t75324*t75324*t75324);
                double t75334 = 1.0/(t75324*t75324*t75324*t75324*t75324*t75324);
                double t75335 = 1.0/(t75324*t75324*t75324*t75324*t75324*t75324*t75324);
                double t75336 = 1.0/(t75324*t75324*t75324*t75324*t75324*t75324*t75324*t75324);
                double t75337 = 1.0/(t75324*t75324*t75324*t75324*t75324*t75324*t75324*t75324*t75324);
                double t75338 = 1.0/pow(t75324,1.0E1);
                double t75339 = pow(2.0,1.0/3.0);
                double t75340 = t75339*2.0;
                double t75341 = t75340-2.0;
                double t75342 = two_13*2.0;
                double t75343 = t75342-2.0;
                double t75344 = 1.0/t75343;
                double t75345 = 1.0/c0f;
                double t75346 = b1f*t75292;
                double t75347 = b3f*t75293;
                double t75348 = b4f*t75294*t75295;
                double t75349 = b2f*c*t75290;
                double t75350 = t75346+t75347+t75348+t75349;
                double t75351 = 1.0/t75350;
                double t75352 = t75351*t75345*(1.0/2.0);
                double t75353 = t75352+1.0;
                double t75354 = log(t75353);
                double t75355 = a1f*c*t75290;
                double t75356 = t75355+1.0;
                double t75357 = c0f*t75354*t75356*2.0;
                double t75358 = c0p*t75305*t75307*2.0;
                double t75359 = ( (t75308 > 0.0) ?  1.0 : 0.0 ) ;
                double t75390 = t75312*t75321*(1.0/2.0);
                double t75361 = t75309-t75390;
                double t75362 = t75361*t75359;
                double t75363 = 0.0 ;
                double t75364 = t75312*t75309*(1.0/2.0);
                double t75365 = t75364-1.0;
                double t75366 = t75363*t75365;
                double t75367 = t75362+t75366;
                double t75368 = gamma_aa[index]*gcaa*t75318*4.0;
                double t75369 = gamma_aa[index]*gcaa*t75313*t75314*t75319*4.0;
                double t75370 = t75320*t75313*t75314*6.0;
                double t75371 = t75315*t75316*t75317;
                double t75372 = t75370+t75371+t75368+t75369+1.0;
                double t75373 = 1.0/t75372;
                double t75374 = gamma_aa[index]*gcaa*t75318;
                double t75375 = t75374+1.0;
                double t75376 = 1.0/t75375;
                double t75377 = gamma_aa[index]*gcaa*t75318*3.0;
                double t75378 = gamma_aa[index]*gcaa*t75313*t75314*t75319;
                double t75379 = t75320*t75313*t75314*3.0;
                double t75380 = t75377+t75378+t75379+1.0;
                double t75381 = 1.0/t75380;
                double t75382 = gamma_aa[index]*gcaa*t75318*2.0;
                double t75383 = t75320*t75313*t75314;
                double t75384 = t75382+t75383+1.0;
                double t75385 = 1.0/t75384;
                double t75386 = 1.0/pow(rho_a[index],1.9E1/3.0);
                double t75387 = 1.0/pow(rho_a[index],1.1E1/3.0);
                double t75388 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]*rho_a[index]);
                double t75389 = 1.0/pow(rho_a[index],3.5E1/3.0);
                double t75391 = 1.0/pow(rho_a[index],4.0/3.0);
                double t75392 = 1.0/pow(rho_a[index],5.0/3.0);
                double t75393 = 1.0/sqrt(t75291);
                double t75394 = 1.0/t75304;
                double t75395 = 1.0/(t75301*t75301);
                double t75396 = b4p*t75392*t75294*(2.0/3.0);
                double t75397 = b2p*c*t75391*(1.0/3.0);
                double t75398 = b1p*c*t75391*t75393*(1.0/6.0);
                double t75399 = b3p*c*t75292*t75391*(1.0/2.0);
                double t75400 = t75396+t75397+t75398+t75399;
                double t75401 = t75400*t75307*t75394*t75395;
                double t75402 = ccaa4*t75315*t75316*t75317*t75373;
                double t75403 = ccaa1*gamma_aa[index]*gcaa*t75318*t75376;
                double t75404 = ccaa3*gamma_aa[index]*gcaa*t75313*t75314*t75381*t75319;
                double t75405 = ccaa2*t75320*t75313*t75314*t75385;
                double t75406 = ccaa0+t75402+t75403+t75404+t75405;
                double t75407 = X-1.0;
                double t75408 = 1.0/(k*k);
                double t75409 = 1.0/kp;
                double t75410 = 1.0/(rho_a[index]*rho_a[index]);
                double t75411 = rho_a[index]*2.0;
                double t75412 = 1.0/pow(t75411,2.0/3.0);
                double t75413 = gamma_aa[index]*mu_*t75410*t75412*t75408*t75409*(1.0/4.0);
                double t75414 = t75413+1.0;
                double t75415 = 1.0/t75414;
                double t75416 = kp-kp*t75415+1.0;
                double t75417 = C_k*C_k;
                double t75418 = pow(rho_a[index],7.0/3.0);
                double t75419 = 1.0/(tau_a[index]*tau_a[index]*tau_a[index]);
                double t75420 = 1.0/t75324;
                double t75421 = 1.0/pow(t75324,1.2E1);
                double t75422 = pow(rho_a[index],2.0/3.0);
                double t75423 = t75357-t75358;
                double t75424 = t75341*t75423*t75344;
                double t75425 = t75424+t75358;
                double t75426 = C_k*a_1*t75321*t75420*t75322;
                double t75427 = C_k*a_2*t75321*t75322*t75325*t75326*2.0;
                double t75428 = C_k*a_10*t75321*t75322*t75325*t75329*t75338*1.0E1;
                double t75429 = C_k*a_11*t75321*t75330*t75322*t75327*t75329*1.1E1;
                double t75430 = C_k*a_3*t75321*t75322*t75331*t75327*3.0;
                double t75431 = C_k*a_4*t75321*t75322*t75332*t75325*t75327*4.0;
                double t75432 = C_k*a_5*t75321*t75322*t75333*t75328*5.0;
                double t75433 = C_k*a_6*t75321*t75322*t75325*t75334*t75328*6.0;
                double t75434 = C_k*a_7*t75321*t75322*t75335*t75327*t75328*7.0;
                double t75435 = C_k*a_8*t75321*t75322*t75325*t75327*t75336*t75328*8.0;
                double t75436 = C_k*a_9*t75321*t75322*t75337*t75329*9.0;
                double t75437 = t75430+t75431+t75432+t75433+t75434+t75426+t75435+t75427+t75436+t75428+t75429-C_k* \
                   a_1*t75321*t75322*t75325*t75326-C_k*a_2*t75321*t75322*t75331*t75327*2.0-C_k*a_4*t75321*t75322*t75333* \
                   t75328*4.0-C_k*a_8*t75321*t75322*t75337*t75329*8.0-C_k*a_10*t75321*t75330*t75322*t75327*t75329*1.0E1- \
                   C_k*a_3*t75321*t75322*t75332*t75325*t75327*3.0-C_k*a_5*t75321*t75322*t75325*t75334*t75328*5.0-C_k* \
                   a_6*t75321*t75322*t75335*t75327*t75328*6.0-C_k*a_9*t75321*t75322*t75325*t75329*t75338*9.0-C_k*a_11* \
                   t75321*t75322*t75421*t75325*t75327*t75329*1.1E1-C_k*a_7*t75321*t75322*t75325*t75327*t75336*t75328* \
                   7.0;
                v_rho_a_tau_a_[index] = t75407*t75416*t75437-t75406*t75367*(t75358+t75341*t75344*(t75357-c0p*t75305* \
                   t75307*2.0))+rho_a[index]*t75407*t75416*(C_k*a_1*t75321*t75420*t75422*(5.0/3.0)-a_1*t75326*t75417* \
                   t75418*t75419*(1.0E1/3.0)+a_2*t75326*t75417*t75418*t75419*(1.0E1/3.0)+a_1*t75331*t75325*t75417*t75418* \
                   t75419*(1.0E1/3.0)+a_10*t75417*t75418*t75329*t75338*t75419*1.5E2-a_2*t75331*t75325*t75417*t75418*t75419* \
                   (4.0E1/3.0)+a_2*t75332*t75327*t75417*t75418*t75419*1.0E1+a_3*t75331*t75325*t75417*t75418*t75419*1.0E1- \
                   a_3*t75332*t75327*t75417*t75418*t75419*3.0E1+a_4*t75332*t75327*t75417*t75418*t75419*2.0E1+a_4*t75334* \
                   t75417*t75328*t75418*t75419*(1.0E2/3.0)-a_5*t75334*t75417*t75328*t75418*t75419*(2.5E2/3.0)+a_6*t75334* \
                   t75417*t75328*t75418*t75419*5.0E1+a_8*t75417*t75418*t75329*t75338*t75419*1.2E2-a_9*t75417*t75418*t75329* \
                   t75338*t75419*2.7E2-C_k*a_1*t75321*t75422*t75325*t75326*(5.0/3.0)-C_k*a_2*t75321*t75331*t75422*t75327* \
                   (1.0E1/3.0)+C_k*a_2*t75321*t75422*t75325*t75326*(1.0E1/3.0)+C_k*a_3*t75321*t75331*t75422*t75327*5.0- \
                   C_k*a_4*t75321*t75422*t75333*t75328*(2.0E1/3.0)+C_k*a_5*t75321*t75422*t75333*t75328*(2.5E1/3.0)-C_k* \
                   a_8*t75321*t75422*t75337*t75329*(4.0E1/3.0)+C_k*a_9*t75321*t75422*t75337*t75329*1.5E1-C_k*a_10*t75321* \
                   t75330*t75422*t75327*t75329*(5.0E1/3.0)+C_k*a_11*t75321*t75330*t75422*t75327*t75329*(5.5E1/3.0)+C_k* \
                   a_10*t75321*t75422*t75325*t75329*t75338*(5.0E1/3.0)-C_k*a_3*t75321*t75332*t75422*t75325*t75327*5.0+ \
                   C_k*a_4*t75321*t75332*t75422*t75325*t75327*(2.0E1/3.0)-C_k*a_5*t75321*t75422*t75325*t75334*t75328* \
                   (2.5E1/3.0)+C_k*a_6*t75321*t75422*t75325*t75334*t75328*1.0E1-C_k*a_6*t75321*t75422*t75335*t75327*t75328* \
                   1.0E1+C_k*a_7*t75321*t75422*t75335*t75327*t75328*(3.5E1/3.0)-C_k*a_9*t75321*t75422*t75325*t75329*t75338* \
                   1.5E1-a_10*t75330*t75325*t75417*t75418*t75329*t75419*(1.0E3/3.0)+a_11*t75330*t75325*t75417*t75418* \
                   t75329*t75419*(5.5E2/3.0)+a_10*t75421*t75327*t75417*t75418*t75329*t75419*(5.5E2/3.0)-a_11*t75421*t75327* \
                   t75417*t75418*t75329*t75419*(1.21E3/3.0)+a_3*t75333*t75325*t75327*t75417*t75418*t75419*2.0E1-a_4*t75333* \
                   t75325*t75327*t75417*t75418*t75419*(1.6E2/3.0)+a_5*t75333*t75325*t75327*t75417*t75418*t75419*(1.0E2/ \
                   3.0)+a_5*t75325*t75335*t75417*t75328*t75418*t75419*5.0E1-a_6*t75325*t75335*t75417*t75328*t75418*t75419* \
                   1.2E2+a_6*t75327*t75336*t75417*t75328*t75418*t75419*7.0E1+a_7*t75325*t75335*t75417*t75328*t75418*t75419* \
                   7.0E1-a_7*t75327*t75336*t75417*t75328*t75418*t75419*(4.9E2/3.0)+a_8*t75327*t75336*t75417*t75328*t75418* \
                   t75419*(2.8E2/3.0)+a_9*t75330*t75325*t75417*t75418*t75329*t75419*1.5E2+a_11*1.0/pow(t75324,1.3E1)* \
                   t75325*t75327*t75417*t75418*t75329*t75419*2.2E2-C_k*a_11*t75321*t75421*t75422*t75325*t75327*t75329* \
                   (5.5E1/3.0)-C_k*a_7*t75321*t75422*t75325*t75327*t75336*t75328*(3.5E1/3.0)+C_k*a_8*t75321*t75422*t75325* \
                   t75327*t75336*t75328*(4.0E1/3.0)+a_7*t75325*t75327*t75417*t75328*t75337*t75418*t75419*(2.8E2/3.0)- \
                   a_8*t75325*t75327*t75417*t75328*t75337*t75418*t75419*(6.4E2/3.0)+a_9*t75325*t75327*t75417*t75328*t75337* \
                   t75418*t75419*1.2E2)+rho_a[index]*t75406*t75367*(-t75401+t75341*t75344*(t75401-(1.0/(t75350*t75350) \
                   *t75356*(b2f*c*t75391*(1.0/3.0)+b4f*t75392*t75294*(2.0/3.0)+b1f*c*t75391*t75393*(1.0/6.0)+b3f*c*t75292* \
                   t75391*(1.0/2.0)))/t75353+a1f*c*c0f*t75354*t75391*(2.0/3.0)-a1p*c*c0p*t75305*t75391*(2.0/3.0))+a1p* \
                   c*c0p*t75305*t75391*(2.0/3.0))+rho_a[index]*t75425*t75367*(ccaa1*gamma_aa[index]*gcaa*t75376*t75387* \
                   (8.0/3.0)+ccaa2*t75313*t75314*t75385*t75386*(1.6E1/3.0)+ccaa4*t75315*t75316*t75373*t75389*(3.2E1/3.0) \
                   -ccaa1*t75313*t75314*1.0/(t75375*t75375)*t75386*(8.0/3.0)-ccaa2*t75320*t75313*t75314*1.0/(t75384*t75384) \
                   *(gamma_aa[index]*gcaa*t75387*(1.6E1/3.0)+t75313*t75314*t75386*(1.6E1/3.0))-ccaa4*t75315*t75316*t75317* \
                   1.0/(t75372*t75372)*(gamma_aa[index]*gcaa*t75387*(3.2E1/3.0)+t75313*t75314*t75386*3.2E1+t75315*t75316* \
                   t75389*(3.2E1/3.0)+gamma_aa[index]*gcaa*t75313*t75314*t75388*3.2E1)+ccaa3*gamma_aa[index]*gcaa*t75313* \
                   t75314*t75381*t75388*8.0-ccaa3*gamma_aa[index]*gcaa*t75313*t75314*1.0/(t75380*t75380)*t75319*(gamma_aa[index]* \
                   gcaa*t75387*8.0+t75313*t75314*t75386*1.6E1+gamma_aa[index]*gcaa*t75313*t75314*t75388*8.0))+gamma_aa[index]* \
                   t75311*t75321*t75406*t75425*t75359*(1.0/8.0)-gamma_aa[index]*t75311*t75406*t75425*t75309*t75363*(1.0/ \
                   8.0)-kp*rho_a[index]*1.0/(t75414*t75414)*t75407*t75437*(gamma_aa[index]*mu_*1.0/(rho_a[index]*rho_a[index]* \
                   rho_a[index])*t75412*t75408*t75409*(1.0/2.0)+gamma_aa[index]*mu_*t75410*1.0/pow(t75411,5.0/3.0)*t75408* \
                   t75409*(1.0/3.0));
            } else if (rho_b[index] > cutoff_) {
                v_rho_a_tau_a_[index] = 0.0;
            } else {
                v_rho_a_tau_a_[index] = 0.0;
            } 

            //V_rho_a_tau_b
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_a_tau_b_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_a_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_a_tau_b_[index] = 0.0;
            } else {
                v_rho_a_tau_b_[index] = 0.0;
            } 

            //V_rho_b_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_b_tau_a_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_b_tau_a_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_b_tau_a_[index] = 0.0;
            } else {
                v_rho_b_tau_a_[index] = 0.0;
            } 

            //V_rho_b_tau_b
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t72885 = pow(rho_b[index],5.0/3.0);
                double t72886 = 1.0/(tau_b[index]*tau_b[index]);
                double t72887 = 1.0/tau_b[index];
                double t72888 = C_k*t72885*t72887;
                double t72889 = t72888+1.0;
                double t72890 = t72888-1.0;
                double t72891 = 1.0/(t72889*t72889);
                double t72892 = t72890*t72890;
                double t72893 = t72892*t72892;
                double t72894 = t72893*t72893;
                double t72895 = 1.0/pow(t72889,1.1E1);
                double t72896 = 1.0/(t72889*t72889*t72889);
                double t72897 = 1.0/(t72889*t72889*t72889*t72889);
                double t72898 = 1.0/(t72889*t72889*t72889*t72889*t72889);
                double t72899 = 1.0/(t72889*t72889*t72889*t72889*t72889*t72889);
                double t72900 = 1.0/(t72889*t72889*t72889*t72889*t72889*t72889*t72889);
                double t72901 = 1.0/(t72889*t72889*t72889*t72889*t72889*t72889*t72889*t72889);
                double t72902 = 1.0/(t72889*t72889*t72889*t72889*t72889*t72889*t72889*t72889*t72889);
                double t72903 = 1.0/pow(t72889,1.0E1);
                double t72904 = 1.0/(k*k);
                double t72905 = 1.0/kp;
                double t72906 = 1.0/(rho_b[index]*rho_b[index]);
                double t72907 = rho_b[index]*2.0;
                double t72908 = 1.0/pow(t72907,2.0/3.0);
                double t72909 = gamma_bb[index]*mu_*t72904*t72905*t72906*t72908*(1.0/4.0);
                double t72910 = t72909+1.0;
                double t72911 = 1.0/t72910;
                double t72912 = kp-kp*t72911+1.0;
                double t72913 = C_k*C_k;
                double t72914 = pow(rho_b[index],7.0/3.0);
                double t72915 = 1.0/(tau_b[index]*tau_b[index]*tau_b[index]);
                double t72916 = 1.0/t72889;
                double t72917 = 1.0/pow(t72889,1.2E1);
                double t72918 = pow(rho_b[index],2.0/3.0);
                double t72919 = C_k*a_1*t72916*t72885*t72886;
                double t72920 = C_k*a_2*t72890*t72891*t72885*t72886*2.0;
                double t72921 = C_k*a_10*t72903*t72890*t72885*t72894*t72886*1.0E1;
                double t72922 = C_k*a_11*t72892*t72885*t72894*t72886*t72895*1.1E1;
                double t72923 = C_k*a_3*t72892*t72885*t72886*t72896*3.0;
                double t72924 = C_k*a_4*t72890*t72892*t72885*t72886*t72897*4.0;
                double t72925 = C_k*a_5*t72893*t72885*t72886*t72898*5.0;
                double t72926 = C_k*a_6*t72890*t72893*t72885*t72886*t72899*6.0;
                double t72927 = C_k*a_7*t72900*t72892*t72893*t72885*t72886*7.0;
                double t72928 = C_k*a_8*t72901*t72890*t72892*t72893*t72885*t72886*8.0;
                double t72929 = C_k*a_9*t72902*t72885*t72894*t72886*9.0;
                double t72930 = t72920+t72921+t72922+t72923+t72924+t72925+t72926+t72927+t72919+t72928+t72929-C_k* \
                   a_1*t72890*t72891*t72885*t72886-C_k*a_2*t72892*t72885*t72886*t72896*2.0-C_k*a_4*t72893*t72885*t72886* \
                   t72898*4.0-C_k*a_8*t72902*t72885*t72894*t72886*8.0-C_k*a_10*t72892*t72885*t72894*t72886*t72895*1.0E1- \
                   C_k*a_3*t72890*t72892*t72885*t72886*t72897*3.0-C_k*a_5*t72890*t72893*t72885*t72886*t72899*5.0-C_k* \
                   a_6*t72900*t72892*t72893*t72885*t72886*6.0-C_k*a_9*t72903*t72890*t72885*t72894*t72886*9.0-C_k*a_11* \
                   t72890*t72917*t72892*t72885*t72894*t72886*1.1E1-C_k*a_7*t72901*t72890*t72892*t72893*t72885*t72886* \
                   7.0;
                double t72931 = 1.0/pow(rho_b[index],1.0/3.0);
                double t72932 = c*t72931;
                double t72933 = sqrt(t72932);
                double t72934 = pow(t72932,3.0/2.0);
                double t72935 = c*c;
                double t72936 = 1.0/pow(rho_b[index],2.0/3.0);
                double t72937 = 1.0/c0p;
                double t72938 = b1p*t72933;
                double t72939 = b3p*t72934;
                double t72940 = b4p*t72935*t72936;
                double t72941 = b2p*c*t72931;
                double t72942 = t72940+t72941+t72938+t72939;
                double t72943 = 1.0/t72942;
                double t72944 = t72943*t72937*(1.0/2.0);
                double t72945 = t72944+1.0;
                double t72946 = log(t72945);
                double t72947 = a1p*c*t72931;
                double t72948 = t72947+1.0;
                double t72949 = tau_b[index]-1.0/1.0E20;
                double t72950 = tau_b[index]*2.0;
                double t72951 = 1.0/rho_b[index];
                double t72982 = gamma_bb[index]*t72951*(1.0/4.0);
                double t72952 = t72950-t72982;
                double t72953 = gamma_bb[index]*gamma_bb[index];
                double t72954 = gcaa*gcaa;
                double t72955 = t72953*t72953;
                double t72956 = t72954*t72954;
                double t72957 = 1.0/pow(rho_b[index],3.2E1/3.0);
                double t72958 = 1.0/pow(rho_b[index],8.0/3.0);
                double t72959 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]);
                double t72960 = 1.0/pow(rho_b[index],1.6E1/3.0);
                double t72961 = pow(2.0,1.0/3.0);
                double t72962 = t72961*2.0;
                double t72963 = t72962-2.0;
                double t72964 = two_13*2.0;
                double t72965 = t72964-2.0;
                double t72966 = 1.0/t72965;
                double t72967 = 1.0/c0f;
                double t72968 = b1f*t72933;
                double t72969 = b3f*t72934;
                double t72970 = b4f*t72935*t72936;
                double t72971 = b2f*c*t72931;
                double t72972 = t72970+t72971+t72968+t72969;
                double t72973 = 1.0/t72972;
                double t72974 = t72973*t72967*(1.0/2.0);
                double t72975 = t72974+1.0;
                double t72976 = log(t72975);
                double t72977 = a1f*c*t72931;
                double t72978 = t72977+1.0;
                double t72979 = c0f*t72976*t72978*2.0;
                double t72980 = c0p*t72946*t72948*2.0;
                double t72981 = ( (t72949 > 0.0) ?  1.0 : 0.0 ) ;
                double t73012 = t72952*t72886*(1.0/2.0);
                double t72983 = t72887-t73012;
                double t72984 = t72981*t72983;
                double t72985 = 0.0 ;
                double t72986 = t72952*t72887*(1.0/2.0);
                double t72987 = t72986-1.0;
                double t72988 = t72985*t72987;
                double t72989 = t72984+t72988;
                double t72990 = gamma_bb[index]*gcaa*t72958*4.0;
                double t72991 = gamma_bb[index]*gcaa*t72953*t72954*t72959*4.0;
                double t72992 = t72960*t72953*t72954*6.0;
                double t72993 = t72955*t72956*t72957;
                double t72994 = t72990+t72991+t72992+t72993+1.0;
                double t72995 = 1.0/t72994;
                double t72996 = gamma_bb[index]*gcaa*t72958;
                double t72997 = t72996+1.0;
                double t72998 = 1.0/t72997;
                double t72999 = gamma_bb[index]*gcaa*t72958*3.0;
                double t73000 = gamma_bb[index]*gcaa*t72953*t72954*t72959;
                double t73001 = t72960*t72953*t72954*3.0;
                double t73002 = t72999+t73000+t73001+1.0;
                double t73003 = 1.0/t73002;
                double t73004 = gamma_bb[index]*gcaa*t72958*2.0;
                double t73005 = t72960*t72953*t72954;
                double t73006 = t73004+t73005+1.0;
                double t73007 = 1.0/t73006;
                double t73008 = 1.0/pow(rho_b[index],1.9E1/3.0);
                double t73009 = 1.0/pow(rho_b[index],1.1E1/3.0);
                double t73010 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]*rho_b[index]);
                double t73011 = 1.0/pow(rho_b[index],3.5E1/3.0);
                double t73013 = 1.0/pow(rho_b[index],4.0/3.0);
                double t73014 = 1.0/pow(rho_b[index],5.0/3.0);
                double t73015 = 1.0/sqrt(t72932);
                double t73016 = 1.0/t72945;
                double t73017 = 1.0/(t72942*t72942);
                double t73018 = b4p*t72935*t73014*(2.0/3.0);
                double t73019 = b2p*c*t73013*(1.0/3.0);
                double t73020 = b1p*c*t73013*t73015*(1.0/6.0);
                double t73021 = b3p*c*t72933*t73013*(1.0/2.0);
                double t73022 = t73020+t73021+t73018+t73019;
                double t73023 = t72948*t73022*t73016*t73017;
                double t73024 = ccaa4*t72955*t72956*t72957*t72995;
                double t73025 = ccaa1*gamma_bb[index]*gcaa*t72958*t72998;
                double t73026 = ccaa3*gamma_bb[index]*gcaa*t72953*t72954*t72959*t73003;
                double t73027 = ccaa2*t72960*t72953*t72954*t73007;
                double t73028 = ccaa0+t73024+t73025+t73026+t73027;
                double t73029 = t72980-t72979;
                double t73031 = t72963*t72966*t73029;
                double t73030 = t72980-t73031;
                v_rho_b_tau_b_[index] = (X-1.0)*(t72912*t72930+rho_b[index]*t72912*(C_k*a_1*t72916*t72918*t72886* \
                   (5.0/3.0)-a_1*t72913*t72914*t72915*t72891*(1.0E1/3.0)+a_2*t72913*t72914*t72915*t72891*(1.0E1/3.0)+ \
                   a_1*t72913*t72914*t72915*t72890*t72896*(1.0E1/3.0)+a_10*t72903*t72913*t72914*t72915*t72894*1.5E2-a_2* \
                   t72913*t72914*t72915*t72890*t72896*(4.0E1/3.0)+a_2*t72913*t72914*t72915*t72892*t72897*1.0E1+a_3*t72913* \
                   t72914*t72915*t72890*t72896*1.0E1-a_3*t72913*t72914*t72915*t72892*t72897*3.0E1+a_4*t72913*t72914*t72915* \
                   t72892*t72897*2.0E1+a_4*t72913*t72914*t72915*t72893*t72899*(1.0E2/3.0)-a_5*t72913*t72914*t72915*t72893* \
                   t72899*(2.5E2/3.0)+a_6*t72913*t72914*t72915*t72893*t72899*5.0E1+a_8*t72903*t72913*t72914*t72915*t72894* \
                   1.2E2-a_9*t72903*t72913*t72914*t72915*t72894*2.7E2-C_k*a_1*t72890*t72891*t72918*t72886*(5.0/3.0)+C_k* \
                   a_2*t72890*t72891*t72918*t72886*(1.0E1/3.0)-C_k*a_2*t72918*t72892*t72886*t72896*(1.0E1/3.0)+C_k*a_3* \
                   t72918*t72892*t72886*t72896*5.0-C_k*a_4*t72918*t72893*t72886*t72898*(2.0E1/3.0)+C_k*a_5*t72918*t72893* \
                   t72886*t72898*(2.5E1/3.0)-C_k*a_8*t72902*t72918*t72894*t72886*(4.0E1/3.0)+C_k*a_9*t72902*t72918*t72894* \
                   t72886*1.5E1+C_k*a_10*t72903*t72890*t72918*t72894*t72886*(5.0E1/3.0)-C_k*a_10*t72918*t72892*t72894* \
                   t72886*t72895*(5.0E1/3.0)+C_k*a_11*t72918*t72892*t72894*t72886*t72895*(5.5E1/3.0)-C_k*a_3*t72890*t72918* \
                   t72892*t72886*t72897*5.0+C_k*a_4*t72890*t72918*t72892*t72886*t72897*(2.0E1/3.0)-C_k*a_5*t72890*t72918* \
                   t72893*t72886*t72899*(2.5E1/3.0)-C_k*a_6*t72900*t72918*t72892*t72893*t72886*1.0E1+C_k*a_6*t72890*t72918* \
                   t72893*t72886*t72899*1.0E1+C_k*a_7*t72900*t72918*t72892*t72893*t72886*(3.5E1/3.0)-C_k*a_9*t72903*t72890* \
                   t72918*t72894*t72886*1.5E1+a_10*t72913*t72914*t72915*t72917*t72892*t72894*(5.5E2/3.0)-a_11*t72913* \
                   t72914*t72915*t72917*t72892*t72894*(1.21E3/3.0)-a_10*t72913*t72914*t72915*t72890*t72894*t72895*(1.0E3/ \
                   3.0)+a_11*t72913*t72914*t72915*t72890*t72894*t72895*(5.5E2/3.0)+a_3*t72913*t72914*t72915*t72890*t72892* \
                   t72898*2.0E1-a_4*t72913*t72914*t72915*t72890*t72892*t72898*(1.6E2/3.0)+a_5*t72900*t72913*t72914*t72915* \
                   t72890*t72893*5.0E1+a_5*t72913*t72914*t72915*t72890*t72892*t72898*(1.0E2/3.0)-a_6*t72900*t72913*t72914* \
                   t72915*t72890*t72893*1.2E2+a_6*t72901*t72913*t72914*t72915*t72892*t72893*7.0E1+a_7*t72900*t72913*t72914* \
                   t72915*t72890*t72893*7.0E1-a_7*t72901*t72913*t72914*t72915*t72892*t72893*(4.9E2/3.0)+a_8*t72901*t72913* \
                   t72914*t72915*t72892*t72893*(2.8E2/3.0)+a_9*t72913*t72914*t72915*t72890*t72894*t72895*1.5E2+a_11*t72913* \
                   t72914*t72915*t72890*t72892*t72894*1.0/pow(t72889,1.3E1)*2.2E2-C_k*a_11*t72890*t72917*t72918*t72892* \
                   t72894*t72886*(5.5E1/3.0)-C_k*a_7*t72901*t72890*t72918*t72892*t72893*t72886*(3.5E1/3.0)+C_k*a_8*t72901* \
                   t72890*t72918*t72892*t72893*t72886*(4.0E1/3.0)+a_7*t72902*t72913*t72914*t72915*t72890*t72892*t72893* \
                   (2.8E2/3.0)-a_8*t72902*t72913*t72914*t72915*t72890*t72892*t72893*(6.4E2/3.0)+a_9*t72902*t72913*t72914* \
                   t72915*t72890*t72892*t72893*1.2E2)-kp*rho_b[index]*1.0/(t72910*t72910)*t72930*(gamma_bb[index]*mu_* \
                   1.0/(rho_b[index]*rho_b[index]*rho_b[index])*t72904*t72905*t72908*(1.0/2.0)+gamma_bb[index]*mu_*t72904* \
                   t72905*t72906*1.0/pow(t72907,5.0/3.0)*(1.0/3.0)))-t72989*t73028*(t72980+t72963*t72966*(t72979-c0p* \
                   t72946*t72948*2.0))+rho_b[index]*t72989*t73028*(-t73023+t72963*t72966*(t73023-(1.0/(t72972*t72972) \
                   *t72978*(b2f*c*t73013*(1.0/3.0)+b4f*t72935*t73014*(2.0/3.0)+b1f*c*t73013*t73015*(1.0/6.0)+b3f*c*t72933* \
                   t73013*(1.0/2.0)))/t72975+a1f*c*c0f*t72976*t73013*(2.0/3.0)-a1p*c*c0p*t72946*t73013*(2.0/3.0))+a1p* \
                   c*c0p*t72946*t73013*(2.0/3.0))+rho_b[index]*t72989*t73030*(ccaa1*gamma_bb[index]*gcaa*t72998*t73009* \
                   (8.0/3.0)+ccaa4*t72955*t72956*t72995*t73011*(3.2E1/3.0)+ccaa2*t72953*t72954*t73007*t73008*(1.6E1/3.0) \
                   -ccaa1*t72953*t72954*1.0/(t72997*t72997)*t73008*(8.0/3.0)-ccaa2*t72960*t72953*t72954*1.0/(t73006*t73006) \
                   *(gamma_bb[index]*gcaa*t73009*(1.6E1/3.0)+t72953*t72954*t73008*(1.6E1/3.0))-ccaa4*t72955*t72956*t72957* \
                   1.0/(t72994*t72994)*(gamma_bb[index]*gcaa*t73009*(3.2E1/3.0)+t72955*t72956*t73011*(3.2E1/3.0)+t72953* \
                   t72954*t73008*3.2E1+gamma_bb[index]*gcaa*t72953*t72954*t73010*3.2E1)+ccaa3*gamma_bb[index]*gcaa*t72953* \
                   t72954*t73010*t73003*8.0-ccaa3*gamma_bb[index]*gcaa*t72953*t72954*t72959*1.0/(t73002*t73002)*(gamma_bb[index]* \
                   gcaa*t73009*8.0+t72953*t72954*t73008*1.6E1+gamma_bb[index]*gcaa*t72953*t72954*t73010*8.0))+gamma_bb[index]* \
                   t72951*t72981*t72886*t73030*t73028*(1.0/8.0)-gamma_bb[index]*t72951*t72985*t72887*t73030*t73028*(1.0/ \
                   8.0);
            } else if (rho_a[index] > cutoff_) {
                v_rho_b_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                double t74166 = 1.0/pow(rho_b[index],1.0/3.0);
                double t74167 = c*t74166;
                double t74168 = sqrt(t74167);
                double t74169 = pow(t74167,3.0/2.0);
                double t74170 = c*c;
                double t74171 = 1.0/pow(rho_b[index],2.0/3.0);
                double t74172 = 1.0/c0p;
                double t74173 = b1p*t74168;
                double t74174 = b3p*t74169;
                double t74175 = b4p*t74170*t74171;
                double t74176 = b2p*c*t74166;
                double t74177 = t74173+t74174+t74175+t74176;
                double t74178 = 1.0/t74177;
                double t74179 = t74172*t74178*(1.0/2.0);
                double t74180 = t74179+1.0;
                double t74181 = log(t74180);
                double t74182 = a1p*c*t74166;
                double t74183 = t74182+1.0;
                double t74184 = tau_b[index]-1.0/1.0E20;
                double t74185 = 1.0/tau_b[index];
                double t74186 = tau_b[index]*2.0;
                double t74187 = 1.0/rho_b[index];
                double t74236 = gamma_bb[index]*t74187*(1.0/4.0);
                double t74188 = -t74236+t74186;
                double t74189 = gamma_bb[index]*gamma_bb[index];
                double t74190 = gcaa*gcaa;
                double t74191 = t74189*t74189;
                double t74192 = t74190*t74190;
                double t74193 = 1.0/pow(rho_b[index],3.2E1/3.0);
                double t74194 = 1.0/pow(rho_b[index],8.0/3.0);
                double t74195 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]);
                double t74196 = 1.0/pow(rho_b[index],1.6E1/3.0);
                double t74197 = 1.0/(tau_b[index]*tau_b[index]);
                double t74198 = pow(rho_b[index],5.0/3.0);
                double t74199 = C_k*t74185*t74198;
                double t74200 = t74199+1.0;
                double t74201 = t74199-1.0;
                double t74202 = 1.0/(t74200*t74200);
                double t74203 = t74201*t74201;
                double t74204 = t74203*t74203;
                double t74205 = t74204*t74204;
                double t74206 = 1.0/pow(t74200,1.1E1);
                double t74207 = 1.0/(t74200*t74200*t74200);
                double t74208 = 1.0/(t74200*t74200*t74200*t74200);
                double t74209 = 1.0/(t74200*t74200*t74200*t74200*t74200);
                double t74210 = 1.0/(t74200*t74200*t74200*t74200*t74200*t74200);
                double t74211 = 1.0/(t74200*t74200*t74200*t74200*t74200*t74200*t74200);
                double t74212 = 1.0/(t74200*t74200*t74200*t74200*t74200*t74200*t74200*t74200);
                double t74213 = 1.0/(t74200*t74200*t74200*t74200*t74200*t74200*t74200*t74200*t74200);
                double t74214 = 1.0/pow(t74200,1.0E1);
                double t74215 = pow(2.0,1.0/3.0);
                double t74216 = t74215*2.0;
                double t74217 = t74216-2.0;
                double t74218 = two_13*2.0;
                double t74219 = t74218-2.0;
                double t74220 = 1.0/t74219;
                double t74221 = 1.0/c0f;
                double t74222 = b1f*t74168;
                double t74223 = b3f*t74169;
                double t74224 = b4f*t74170*t74171;
                double t74225 = b2f*c*t74166;
                double t74226 = t74222+t74223+t74224+t74225;
                double t74227 = 1.0/t74226;
                double t74228 = t74221*t74227*(1.0/2.0);
                double t74229 = t74228+1.0;
                double t74230 = log(t74229);
                double t74231 = a1f*c*t74166;
                double t74232 = t74231+1.0;
                double t74233 = c0f*t74230*t74232*2.0;
                double t74234 = c0p*t74181*t74183*2.0;
                double t74235 = ( (t74184 > 0.0) ?  1.0 : 0.0 ) ;
                double t74266 = t74188*t74197*(1.0/2.0);
                double t74237 = t74185-t74266;
                double t74238 = t74235*t74237;
                double t74239 = 0.0 ;
                double t74240 = t74185*t74188*(1.0/2.0);
                double t74241 = t74240-1.0;
                double t74242 = t74241*t74239;
                double t74243 = t74242+t74238;
                double t74244 = gamma_bb[index]*gcaa*t74194*4.0;
                double t74245 = gamma_bb[index]*gcaa*t74190*t74195*t74189*4.0;
                double t74246 = t74190*t74196*t74189*6.0;
                double t74247 = t74191*t74192*t74193;
                double t74248 = t74244+t74245+t74246+t74247+1.0;
                double t74249 = 1.0/t74248;
                double t74250 = gamma_bb[index]*gcaa*t74194;
                double t74251 = t74250+1.0;
                double t74252 = 1.0/t74251;
                double t74253 = gamma_bb[index]*gcaa*t74194*3.0;
                double t74254 = gamma_bb[index]*gcaa*t74190*t74195*t74189;
                double t74255 = t74190*t74196*t74189*3.0;
                double t74256 = t74253+t74254+t74255+1.0;
                double t74257 = 1.0/t74256;
                double t74258 = gamma_bb[index]*gcaa*t74194*2.0;
                double t74259 = t74190*t74196*t74189;
                double t74260 = t74258+t74259+1.0;
                double t74261 = 1.0/t74260;
                double t74262 = 1.0/pow(rho_b[index],1.9E1/3.0);
                double t74263 = 1.0/pow(rho_b[index],1.1E1/3.0);
                double t74264 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]*rho_b[index]);
                double t74265 = 1.0/pow(rho_b[index],3.5E1/3.0);
                double t74267 = 1.0/pow(rho_b[index],4.0/3.0);
                double t74268 = 1.0/pow(rho_b[index],5.0/3.0);
                double t74269 = 1.0/sqrt(t74167);
                double t74270 = 1.0/t74180;
                double t74271 = 1.0/(t74177*t74177);
                double t74272 = b4p*t74170*t74268*(2.0/3.0);
                double t74273 = b2p*c*t74267*(1.0/3.0);
                double t74274 = b1p*c*t74267*t74269*(1.0/6.0);
                double t74275 = b3p*c*t74168*t74267*(1.0/2.0);
                double t74276 = t74272+t74273+t74274+t74275;
                double t74277 = t74270*t74271*t74183*t74276;
                double t74278 = ccaa4*t74191*t74192*t74193*t74249;
                double t74279 = ccaa1*gamma_bb[index]*gcaa*t74252*t74194;
                double t74280 = ccaa3*gamma_bb[index]*gcaa*t74190*t74257*t74195*t74189;
                double t74281 = ccaa2*t74261*t74190*t74196*t74189;
                double t74282 = ccaa0+t74280+t74281+t74278+t74279;
                double t74283 = X-1.0;
                double t74284 = 1.0/(k*k);
                double t74285 = 1.0/kp;
                double t74286 = 1.0/(rho_b[index]*rho_b[index]);
                double t74287 = rho_b[index]*2.0;
                double t74288 = 1.0/pow(t74287,2.0/3.0);
                double t74289 = gamma_bb[index]*mu_*t74284*t74285*t74286*t74288*(1.0/4.0);
                double t74290 = t74289+1.0;
                double t74291 = 1.0/t74290;
                double t74292 = kp-kp*t74291+1.0;
                double t74293 = C_k*C_k;
                double t74294 = pow(rho_b[index],7.0/3.0);
                double t74295 = 1.0/(tau_b[index]*tau_b[index]*tau_b[index]);
                double t74296 = 1.0/t74200;
                double t74297 = 1.0/pow(t74200,1.2E1);
                double t74298 = pow(rho_b[index],2.0/3.0);
                double t74299 = t74233-t74234;
                double t74300 = t74220*t74217*t74299;
                double t74301 = t74300+t74234;
                double t74302 = C_k*a_1*t74197*t74296*t74198;
                double t74303 = C_k*a_2*t74201*t74202*t74197*t74198*2.0;
                double t74304 = C_k*a_10*t74201*t74205*t74214*t74197*t74198*1.0E1;
                double t74305 = C_k*a_11*t74203*t74205*t74206*t74197*t74198*1.1E1;
                double t74306 = C_k*a_3*t74203*t74207*t74197*t74198*3.0;
                double t74307 = C_k*a_4*t74201*t74203*t74208*t74197*t74198*4.0;
                double t74308 = C_k*a_5*t74204*t74209*t74197*t74198*5.0;
                double t74309 = C_k*a_6*t74201*t74210*t74204*t74197*t74198*6.0;
                double t74310 = C_k*a_7*t74211*t74203*t74204*t74197*t74198*7.0;
                double t74311 = C_k*a_8*t74201*t74203*t74212*t74204*t74197*t74198*8.0;
                double t74312 = C_k*a_9*t74213*t74205*t74197*t74198*9.0;
                double t74313 = t74310+t74302+t74311+t74303+t74312+t74304+t74305+t74306+t74307+t74308+t74309-C_k* \
                   a_1*t74201*t74202*t74197*t74198-C_k*a_2*t74203*t74207*t74197*t74198*2.0-C_k*a_4*t74204*t74209*t74197* \
                   t74198*4.0-C_k*a_8*t74213*t74205*t74197*t74198*8.0-C_k*a_10*t74203*t74205*t74206*t74197*t74198*1.0E1- \
                   C_k*a_3*t74201*t74203*t74208*t74197*t74198*3.0-C_k*a_5*t74201*t74210*t74204*t74197*t74198*5.0-C_k* \
                   a_6*t74211*t74203*t74204*t74197*t74198*6.0-C_k*a_9*t74201*t74205*t74214*t74197*t74198*9.0-C_k*a_11* \
                   t74201*t74203*t74205*t74197*t74198*t74297*1.1E1-C_k*a_7*t74201*t74203*t74212*t74204*t74197*t74198* \
                   7.0;
                v_rho_b_tau_b_[index] = t74313*t74283*t74292-t74243*t74282*(t74234+t74220*t74217*(t74233-c0p*t74181* \
                   t74183*2.0))+rho_b[index]*t74283*t74292*(C_k*a_1*t74197*t74296*t74298*(5.0/3.0)-a_1*t74202*t74293* \
                   t74294*t74295*(1.0E1/3.0)+a_2*t74202*t74293*t74294*t74295*(1.0E1/3.0)+a_1*t74201*t74207*t74293*t74294* \
                   t74295*(1.0E1/3.0)+a_10*t74205*t74214*t74293*t74294*t74295*1.5E2-a_2*t74201*t74207*t74293*t74294*t74295* \
                   (4.0E1/3.0)+a_2*t74203*t74208*t74293*t74294*t74295*1.0E1+a_3*t74201*t74207*t74293*t74294*t74295*1.0E1- \
                   a_3*t74203*t74208*t74293*t74294*t74295*3.0E1+a_4*t74210*t74204*t74293*t74294*t74295*(1.0E2/3.0)+a_4* \
                   t74203*t74208*t74293*t74294*t74295*2.0E1-a_5*t74210*t74204*t74293*t74294*t74295*(2.5E2/3.0)+a_6*t74210* \
                   t74204*t74293*t74294*t74295*5.0E1+a_8*t74205*t74214*t74293*t74294*t74295*1.2E2-a_9*t74205*t74214*t74293* \
                   t74294*t74295*2.7E2-C_k*a_1*t74201*t74202*t74197*t74298*(5.0/3.0)+C_k*a_2*t74201*t74202*t74197*t74298* \
                   (1.0E1/3.0)-C_k*a_2*t74203*t74207*t74197*t74298*(1.0E1/3.0)+C_k*a_3*t74203*t74207*t74197*t74298*5.0- \
                   C_k*a_4*t74204*t74209*t74197*t74298*(2.0E1/3.0)+C_k*a_5*t74204*t74209*t74197*t74298*(2.5E1/3.0)-C_k* \
                   a_8*t74213*t74205*t74197*t74298*(4.0E1/3.0)+C_k*a_9*t74213*t74205*t74197*t74298*1.5E1+C_k*a_10*t74201* \
                   t74205*t74214*t74197*t74298*(5.0E1/3.0)-C_k*a_10*t74203*t74205*t74206*t74197*t74298*(5.0E1/3.0)+C_k* \
                   a_11*t74203*t74205*t74206*t74197*t74298*(5.5E1/3.0)-C_k*a_3*t74201*t74203*t74208*t74197*t74298*5.0+ \
                   C_k*a_4*t74201*t74203*t74208*t74197*t74298*(2.0E1/3.0)-C_k*a_5*t74201*t74210*t74204*t74197*t74298* \
                   (2.5E1/3.0)+C_k*a_6*t74201*t74210*t74204*t74197*t74298*1.0E1-C_k*a_6*t74211*t74203*t74204*t74197*t74298* \
                   1.0E1+C_k*a_7*t74211*t74203*t74204*t74197*t74298*(3.5E1/3.0)-C_k*a_9*t74201*t74205*t74214*t74197*t74298* \
                   1.5E1-a_10*t74201*t74205*t74206*t74293*t74294*t74295*(1.0E3/3.0)+a_11*t74201*t74205*t74206*t74293* \
                   t74294*t74295*(5.5E2/3.0)+a_10*t74203*t74205*t74293*t74294*t74295*t74297*(5.5E2/3.0)-a_11*t74203*t74205* \
                   t74293*t74294*t74295*t74297*(1.21E3/3.0)+a_3*t74201*t74203*t74209*t74293*t74294*t74295*2.0E1-a_4*t74201* \
                   t74203*t74209*t74293*t74294*t74295*(1.6E2/3.0)+a_5*t74201*t74211*t74204*t74293*t74294*t74295*5.0E1+ \
                   a_5*t74201*t74203*t74209*t74293*t74294*t74295*(1.0E2/3.0)-a_6*t74201*t74211*t74204*t74293*t74294*t74295* \
                   1.2E2+a_6*t74203*t74212*t74204*t74293*t74294*t74295*7.0E1+a_7*t74201*t74211*t74204*t74293*t74294*t74295* \
                   7.0E1-a_7*t74203*t74212*t74204*t74293*t74294*t74295*(4.9E2/3.0)+a_8*t74203*t74212*t74204*t74293*t74294* \
                   t74295*(2.8E2/3.0)+a_9*t74201*t74205*t74206*t74293*t74294*t74295*1.5E2+a_11*1.0/pow(t74200,1.3E1)* \
                   t74201*t74203*t74205*t74293*t74294*t74295*2.2E2-C_k*a_11*t74201*t74203*t74205*t74197*t74297*t74298* \
                   (5.5E1/3.0)-C_k*a_7*t74201*t74203*t74212*t74204*t74197*t74298*(3.5E1/3.0)+C_k*a_8*t74201*t74203*t74212* \
                   t74204*t74197*t74298*(4.0E1/3.0)+a_7*t74201*t74203*t74204*t74213*t74293*t74294*t74295*(2.8E2/3.0)- \
                   a_8*t74201*t74203*t74204*t74213*t74293*t74294*t74295*(6.4E2/3.0)+a_9*t74201*t74203*t74204*t74213*t74293* \
                   t74294*t74295*1.2E2)+rho_b[index]*t74243*t74282*(-t74277+t74220*t74217*(t74277-(t74232*1.0/(t74226* \
                   t74226)*(b2f*c*t74267*(1.0/3.0)+b4f*t74170*t74268*(2.0/3.0)+b1f*c*t74267*t74269*(1.0/6.0)+b3f*c*t74168* \
                   t74267*(1.0/2.0)))/t74229+a1f*c*c0f*t74230*t74267*(2.0/3.0)-a1p*c*c0p*t74181*t74267*(2.0/3.0))+a1p* \
                   c*c0p*t74181*t74267*(2.0/3.0))+rho_b[index]*t74301*t74243*(ccaa1*gamma_bb[index]*gcaa*t74252*t74263* \
                   (8.0/3.0)+ccaa2*t74261*t74190*t74262*t74189*(1.6E1/3.0)+ccaa4*t74191*t74192*t74265*t74249*(3.2E1/3.0) \
                   -ccaa1*1.0/(t74251*t74251)*t74190*t74262*t74189*(8.0/3.0)-ccaa2*1.0/(t74260*t74260)*t74190*t74196* \
                   t74189*(gamma_bb[index]*gcaa*t74263*(1.6E1/3.0)+t74190*t74262*t74189*(1.6E1/3.0))-ccaa4*t74191*t74192* \
                   t74193*1.0/(t74248*t74248)*(gamma_bb[index]*gcaa*t74263*(3.2E1/3.0)+t74191*t74192*t74265*(3.2E1/3.0) \
                   +t74190*t74262*t74189*3.2E1+gamma_bb[index]*gcaa*t74190*t74264*t74189*3.2E1)+ccaa3*gamma_bb[index]* \
                   gcaa*t74190*t74264*t74257*t74189*8.0-ccaa3*gamma_bb[index]*gcaa*t74190*1.0/(t74256*t74256)*t74195* \
                   t74189*(gamma_bb[index]*gcaa*t74263*8.0+t74190*t74262*t74189*1.6E1+gamma_bb[index]*gcaa*t74190*t74264* \
                   t74189*8.0))+gamma_bb[index]*t74301*t74235*t74282*t74187*t74197*(1.0/8.0)-gamma_bb[index]*t74301*t74282* \
                   t74185*t74239*t74187*(1.0/8.0)-kp*rho_b[index]*t74313*1.0/(t74290*t74290)*t74283*(gamma_bb[index]* \
                   mu_*1.0/(rho_b[index]*rho_b[index]*rho_b[index])*t74284*t74285*t74288*(1.0/2.0)+gamma_bb[index]*mu_* \
                   t74284*t74285*t74286*1.0/pow(t74287,5.0/3.0)*(1.0/3.0));
            } else {
                v_rho_b_tau_b_[index] = 0.0;
            } 

            //V_tau_a_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t73033 = 1.0/pow(rho_a[index],1.0/3.0);
                double t73034 = c*t73033;
                double t73035 = sqrt(t73034);
                double t73036 = pow(t73034,3.0/2.0);
                double t73037 = c*c;
                double t73038 = 1.0/pow(rho_a[index],2.0/3.0);
                double t73039 = 1.0/c0p;
                double t73040 = b1p*t73035;
                double t73041 = b3p*t73036;
                double t73042 = b4p*t73037*t73038;
                double t73043 = b2p*c*t73033;
                double t73044 = t73040+t73041+t73042+t73043;
                double t73045 = 1.0/t73044;
                double t73046 = t73045*t73039*(1.0/2.0);
                double t73047 = t73046+1.0;
                double t73048 = log(t73047);
                double t73049 = a1p*c*t73033;
                double t73050 = t73049+1.0;
                double t73051 = 1.0/tau_a[index];
                double t73052 = tau_a[index]*2.0;
                double t73053 = 1.0/rho_a[index];
                double t73057 = gamma_aa[index]*t73053*(1.0/4.0);
                double t73054 = t73052-t73057;
                double t73055 = tau_a[index]-1.0/1.0E20;
                double t73056 = 1.0/(tau_a[index]*tau_a[index]);
                double t73058 = gamma_aa[index]*gamma_aa[index];
                double t73059 = gcaa*gcaa;
                double t73060 = t73058*t73058;
                double t73061 = t73059*t73059;
                double t73062 = 1.0/pow(rho_a[index],3.2E1/3.0);
                double t73063 = 1.0/pow(rho_a[index],8.0/3.0);
                double t73064 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t73065 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t73066 = C_k*C_k;
                double t73067 = pow(rho_a[index],1.0E1/3.0);
                double t73068 = 1.0/(tau_a[index]*tau_a[index]*tau_a[index]*tau_a[index]);
                double t73069 = pow(rho_a[index],5.0/3.0);
                double t73070 = C_k*t73051*t73069;
                double t73071 = t73070+1.0;
                double t73072 = 1.0/(t73071*t73071);
                double t73073 = 1.0/(tau_a[index]*tau_a[index]*tau_a[index]);
                double t73074 = t73070-1.0;
                double t73075 = t73074*t73074;
                double t73076 = t73075*t73075;
                double t73077 = t73076*t73076;
                double t73078 = 1.0/pow(t73071,1.1E1);
                double t73079 = 1.0/pow(t73071,1.2E1);
                double t73080 = 1.0/(t73071*t73071*t73071*t73071);
                double t73081 = 1.0/(t73071*t73071*t73071*t73071*t73071);
                double t73082 = 1.0/(t73071*t73071*t73071*t73071*t73071*t73071);
                double t73083 = 1.0/(t73071*t73071*t73071*t73071*t73071*t73071*t73071);
                double t73084 = 1.0/(t73071*t73071*t73071*t73071*t73071*t73071*t73071*t73071);
                double t73085 = 1.0/(t73071*t73071*t73071*t73071*t73071*t73071*t73071*t73071*t73071);
                double t73086 = 1.0/pow(t73071,1.0E1);
                double t73087 = 1.0/(t73071*t73071*t73071);
                v_tau_a_tau_a_[index] = -rho_a[index]*(X-1.0)*(kp-kp/((gamma_aa[index]*1.0/(k*k)*mu_*1.0/(rho_a[index]* \
                   rho_a[index])*1.0/pow(rho_a[index]*2.0,2.0/3.0)*(1.0/4.0))/kp+1.0)+1.0)*(a_1*t73072*t73066*t73067* \
                   t73068*-2.0+a_2*t73072*t73066*t73067*t73068*2.0+(C_k*a_1*t73073*t73069*2.0)/t73071+a_1*t73074*t73066* \
                   t73067*t73068*t73087*2.0+a_10*t73066*t73067*t73068*t73077*t73086*9.0E1+a_2*t73080*t73066*t73075*t73067* \
                   t73068*6.0-a_2*t73074*t73066*t73067*t73068*t73087*8.0-a_3*t73080*t73066*t73075*t73067*t73068*1.8E1+ \
                   a_3*t73074*t73066*t73067*t73068*t73087*6.0+a_4*t73080*t73066*t73075*t73067*t73068*1.2E1+a_4*t73082* \
                   t73066*t73067*t73076*t73068*2.0E1-a_5*t73082*t73066*t73067*t73076*t73068*5.0E1+a_6*t73082*t73066*t73067* \
                   t73076*t73068*3.0E1+a_8*t73066*t73067*t73068*t73077*t73086*7.2E1-a_9*t73066*t73067*t73068*t73077*t73086* \
                   1.62E2-C_k*a_1*t73072*t73073*t73074*t73069*2.0+C_k*a_2*t73072*t73073*t73074*t73069*4.0-C_k*a_2*t73073* \
                   t73075*t73069*t73087*4.0+C_k*a_3*t73073*t73075*t73069*t73087*6.0-C_k*a_4*t73081*t73073*t73076*t73069* \
                   8.0+C_k*a_5*t73081*t73073*t73076*t73069*1.0E1-C_k*a_8*t73073*t73085*t73077*t73069*1.6E1+C_k*a_9*t73073* \
                   t73085*t73077*t73069*1.8E1+C_k*a_10*t73073*t73074*t73077*t73086*t73069*2.0E1-C_k*a_10*t73073*t73075* \
                   t73077*t73069*t73078*2.0E1+C_k*a_11*t73073*t73075*t73077*t73069*t73078*2.2E1-C_k*a_3*t73080*t73073* \
                   t73074*t73075*t73069*6.0+C_k*a_4*t73080*t73073*t73074*t73075*t73069*8.0-C_k*a_5*t73073*t73082*t73074* \
                   t73076*t73069*1.0E1+C_k*a_6*t73073*t73082*t73074*t73076*t73069*1.2E1-C_k*a_6*t73073*t73083*t73075* \
                   t73076*t73069*1.2E1+C_k*a_7*t73073*t73083*t73075*t73076*t73069*1.4E1-C_k*a_9*t73073*t73074*t73077* \
                   t73086*t73069*1.8E1-a_10*t73074*t73066*t73067*t73068*t73077*t73078*2.0E2+a_11*t73074*t73066*t73067* \
                   t73068*t73077*t73078*1.1E2+a_10*t73066*t73075*t73067*t73068*t73077*t73079*1.1E2-a_11*t73066*t73075* \
                   t73067*t73068*t73077*t73079*2.42E2+a_3*t73081*t73074*t73066*t73075*t73067*t73068*1.2E1-a_4*t73081* \
                   t73074*t73066*t73075*t73067*t73068*3.2E1+a_5*t73081*t73074*t73066*t73075*t73067*t73068*2.0E1+a_5*t73074* \
                   t73083*t73066*t73067*t73076*t73068*3.0E1-a_6*t73074*t73083*t73066*t73067*t73076*t73068*7.2E1+a_6*t73066* \
                   t73075*t73084*t73067*t73076*t73068*4.2E1+a_7*t73074*t73083*t73066*t73067*t73076*t73068*4.2E1-a_7*t73066* \
                   t73075*t73084*t73067*t73076*t73068*9.8E1+a_8*t73066*t73075*t73084*t73067*t73076*t73068*5.6E1+a_9*t73074* \
                   t73066*t73067*t73068*t73077*t73078*9.0E1+a_11*1.0/pow(t73071,1.3E1)*t73074*t73066*t73075*t73067*t73068* \
                   t73077*1.32E2-C_k*a_11*t73073*t73074*t73075*t73077*t73069*t73079*2.2E1-C_k*a_7*t73073*t73074*t73075* \
                   t73084*t73076*t73069*1.4E1+C_k*a_8*t73073*t73074*t73075*t73084*t73076*t73069*1.6E1+a_7*t73074*t73066* \
                   t73075*t73067*t73076*t73085*t73068*5.6E1-a_8*t73074*t73066*t73075*t73067*t73076*t73085*t73068*1.28E2+ \
                   a_9*t73074*t73066*t73075*t73067*t73076*t73085*t73068*7.2E1)-rho_a[index]*(((pow(2.0,1.0/3.0)*2.0-2.0) \
                   *(c0f*log((1.0/2.0)/(c0f*(b1f*t73035+b3f*t73036+b2f*c*t73033+b4f*t73037*t73038))+1.0)*(a1f*c*t73033+ \
                   1.0)*2.0-c0p*t73050*t73048*2.0))/(two_13*2.0-2.0)+c0p*t73050*t73048*2.0)*( 0.0 - ( (t73055 > 0.0)  \
                   ? 1.0*(t73056*2.0-t73054*t73073) : 0.0 ) + 0.0 )*(ccaa0+(ccaa2*t73065*t73058*t73059)/(gamma_aa[index]* \
                   gcaa*t73063*2.0+t73065*t73058*t73059+1.0)+(ccaa1*gamma_aa[index]*gcaa*t73063)/(gamma_aa[index]*gcaa* \
                   t73063+1.0)+(ccaa4*t73060*t73061*t73062)/(gamma_aa[index]*gcaa*t73063*4.0+t73060*t73061*t73062+t73065* \
                   t73058*t73059*6.0+gamma_aa[index]*gcaa*t73064*t73058*t73059*4.0+1.0)+(ccaa3*gamma_aa[index]*gcaa*t73064* \
                   t73058*t73059)/(gamma_aa[index]*gcaa*t73063*3.0+t73065*t73058*t73059*3.0+gamma_aa[index]*gcaa*t73064* \
                   t73058*t73059+1.0));
            } else if (rho_a[index] > cutoff_) {
                double t75442 = 1.0/pow(rho_a[index],1.0/3.0);
                double t75443 = c*t75442;
                double t75444 = sqrt(t75443);
                double t75445 = pow(t75443,3.0/2.0);
                double t75446 = c*c;
                double t75447 = 1.0/pow(rho_a[index],2.0/3.0);
                double t75448 = 1.0/c0p;
                double t75449 = b1p*t75444;
                double t75450 = b3p*t75445;
                double t75451 = b4p*t75446*t75447;
                double t75452 = b2p*c*t75442;
                double t75453 = t75450+t75451+t75452+t75449;
                double t75454 = 1.0/t75453;
                double t75455 = t75454*t75448*(1.0/2.0);
                double t75456 = t75455+1.0;
                double t75457 = log(t75456);
                double t75458 = a1p*c*t75442;
                double t75459 = t75458+1.0;
                double t75460 = 1.0/tau_a[index];
                double t75461 = tau_a[index]*2.0;
                double t75462 = 1.0/rho_a[index];
                double t75466 = gamma_aa[index]*t75462*(1.0/4.0);
                double t75463 = t75461-t75466;
                double t75464 = tau_a[index]-1.0/1.0E20;
                double t75465 = 1.0/(tau_a[index]*tau_a[index]);
                double t75467 = gamma_aa[index]*gamma_aa[index];
                double t75468 = gcaa*gcaa;
                double t75469 = t75467*t75467;
                double t75470 = t75468*t75468;
                double t75471 = 1.0/pow(rho_a[index],3.2E1/3.0);
                double t75472 = 1.0/pow(rho_a[index],8.0/3.0);
                double t75473 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t75474 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t75475 = C_k*C_k;
                double t75476 = pow(rho_a[index],1.0E1/3.0);
                double t75477 = 1.0/(tau_a[index]*tau_a[index]*tau_a[index]*tau_a[index]);
                double t75478 = pow(rho_a[index],5.0/3.0);
                double t75479 = C_k*t75460*t75478;
                double t75480 = t75479+1.0;
                double t75481 = 1.0/(t75480*t75480);
                double t75482 = 1.0/(tau_a[index]*tau_a[index]*tau_a[index]);
                double t75483 = t75479-1.0;
                double t75484 = t75483*t75483;
                double t75485 = t75484*t75484;
                double t75486 = t75485*t75485;
                double t75487 = 1.0/pow(t75480,1.1E1);
                double t75488 = 1.0/pow(t75480,1.2E1);
                double t75489 = 1.0/(t75480*t75480*t75480*t75480);
                double t75490 = 1.0/(t75480*t75480*t75480*t75480*t75480);
                double t75491 = 1.0/(t75480*t75480*t75480*t75480*t75480*t75480);
                double t75492 = 1.0/(t75480*t75480*t75480*t75480*t75480*t75480*t75480);
                double t75493 = 1.0/(t75480*t75480*t75480*t75480*t75480*t75480*t75480*t75480);
                double t75494 = 1.0/(t75480*t75480*t75480*t75480*t75480*t75480*t75480*t75480*t75480);
                double t75495 = 1.0/pow(t75480,1.0E1);
                double t75496 = 1.0/(t75480*t75480*t75480);
                v_tau_a_tau_a_[index] = -rho_a[index]*(X-1.0)*(kp-kp/((gamma_aa[index]*1.0/(k*k)*mu_*1.0/(rho_a[index]* \
                   rho_a[index])*1.0/pow(rho_a[index]*2.0,2.0/3.0)*(1.0/4.0))/kp+1.0)+1.0)*(a_1*t75481*t75475*t75476* \
                   t75477*-2.0+a_2*t75481*t75475*t75476*t75477*2.0+(C_k*a_1*t75482*t75478*2.0)/t75480+a_1*t75483*t75475* \
                   t75476*t75477*t75496*2.0+a_10*t75475*t75476*t75477*t75486*t75495*9.0E1-a_2*t75483*t75475*t75476*t75477* \
                   t75496*8.0+a_2*t75475*t75484*t75476*t75477*t75489*6.0+a_3*t75483*t75475*t75476*t75477*t75496*6.0-a_3* \
                   t75475*t75484*t75476*t75477*t75489*1.8E1+a_4*t75491*t75475*t75476*t75485*t75477*2.0E1+a_4*t75475*t75484* \
                   t75476*t75477*t75489*1.2E1-a_5*t75491*t75475*t75476*t75485*t75477*5.0E1+a_6*t75491*t75475*t75476*t75485* \
                   t75477*3.0E1+a_8*t75475*t75476*t75477*t75486*t75495*7.2E1-a_9*t75475*t75476*t75477*t75486*t75495*1.62E2- \
                   C_k*a_1*t75481*t75482*t75483*t75478*2.0+C_k*a_2*t75481*t75482*t75483*t75478*4.0-C_k*a_2*t75482*t75484* \
                   t75478*t75496*4.0+C_k*a_3*t75482*t75484*t75478*t75496*6.0-C_k*a_4*t75490*t75482*t75485*t75478*8.0+ \
                   C_k*a_5*t75490*t75482*t75485*t75478*1.0E1-C_k*a_8*t75482*t75494*t75486*t75478*1.6E1+C_k*a_9*t75482* \
                   t75494*t75486*t75478*1.8E1+C_k*a_10*t75482*t75483*t75486*t75495*t75478*2.0E1-C_k*a_10*t75482*t75484* \
                   t75486*t75478*t75487*2.0E1+C_k*a_11*t75482*t75484*t75486*t75478*t75487*2.2E1-C_k*a_3*t75482*t75483* \
                   t75484*t75478*t75489*6.0+C_k*a_4*t75482*t75483*t75484*t75478*t75489*8.0-C_k*a_5*t75482*t75491*t75483* \
                   t75485*t75478*1.0E1+C_k*a_6*t75482*t75491*t75483*t75485*t75478*1.2E1-C_k*a_6*t75482*t75492*t75484* \
                   t75485*t75478*1.2E1+C_k*a_7*t75482*t75492*t75484*t75485*t75478*1.4E1-C_k*a_9*t75482*t75483*t75486* \
                   t75495*t75478*1.8E1-a_10*t75483*t75475*t75476*t75477*t75486*t75487*2.0E2+a_11*t75483*t75475*t75476* \
                   t75477*t75486*t75487*1.1E2+a_10*t75475*t75484*t75476*t75477*t75486*t75488*1.1E2-a_11*t75475*t75484* \
                   t75476*t75477*t75486*t75488*2.42E2+a_3*t75490*t75483*t75475*t75484*t75476*t75477*1.2E1-a_4*t75490* \
                   t75483*t75475*t75484*t75476*t75477*3.2E1+a_5*t75490*t75483*t75475*t75484*t75476*t75477*2.0E1+a_5*t75483* \
                   t75492*t75475*t75476*t75485*t75477*3.0E1-a_6*t75483*t75492*t75475*t75476*t75485*t75477*7.2E1+a_6*t75475* \
                   t75484*t75493*t75476*t75485*t75477*4.2E1+a_7*t75483*t75492*t75475*t75476*t75485*t75477*4.2E1-a_7*t75475* \
                   t75484*t75493*t75476*t75485*t75477*9.8E1+a_8*t75475*t75484*t75493*t75476*t75485*t75477*5.6E1+a_9*t75483* \
                   t75475*t75476*t75477*t75486*t75487*9.0E1+a_11*1.0/pow(t75480,1.3E1)*t75483*t75475*t75484*t75476*t75477* \
                   t75486*1.32E2-C_k*a_11*t75482*t75483*t75484*t75486*t75478*t75488*2.2E1-C_k*a_7*t75482*t75483*t75484* \
                   t75493*t75485*t75478*1.4E1+C_k*a_8*t75482*t75483*t75484*t75493*t75485*t75478*1.6E1+a_7*t75483*t75475* \
                   t75484*t75476*t75485*t75494*t75477*5.6E1-a_8*t75483*t75475*t75484*t75476*t75485*t75494*t75477*1.28E2+ \
                   a_9*t75483*t75475*t75484*t75476*t75485*t75494*t75477*7.2E1)-rho_a[index]*(((pow(2.0,1.0/3.0)*2.0-2.0) \
                   *(c0f*log((1.0/2.0)/(c0f*(b1f*t75444+b3f*t75445+b2f*c*t75442+b4f*t75446*t75447))+1.0)*(a1f*c*t75442+ \
                   1.0)*2.0-c0p*t75457*t75459*2.0))/(two_13*2.0-2.0)+c0p*t75457*t75459*2.0)*( 0.0 - ( (t75464 > 0.0)  \
                   ? 1.0*(t75465*2.0-t75463*t75482) : 0.0 ) + 0.0 )*(ccaa0+(ccaa2*t75474*t75467*t75468)/(gamma_aa[index]* \
                   gcaa*t75472*2.0+t75474*t75467*t75468+1.0)+(ccaa1*gamma_aa[index]*gcaa*t75472)/(gamma_aa[index]*gcaa* \
                   t75472+1.0)+(ccaa4*t75470*t75471*t75469)/(gamma_aa[index]*gcaa*t75472*4.0+t75470*t75471*t75469+t75474* \
                   t75467*t75468*6.0+gamma_aa[index]*gcaa*t75473*t75467*t75468*4.0+1.0)+(ccaa3*gamma_aa[index]*gcaa*t75473* \
                   t75467*t75468)/(gamma_aa[index]*gcaa*t75472*3.0+t75474*t75467*t75468*3.0+gamma_aa[index]*gcaa*t75473* \
                   t75467*t75468+1.0));
            } else if (rho_b[index] > cutoff_) {
                v_tau_a_tau_a_[index] = 0.0;
            } else {
                v_tau_a_tau_a_[index] = 0.0;
            } 

            //V_tau_a_tau_b
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_tau_a_tau_b_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_tau_a_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_tau_a_tau_b_[index] = 0.0;
            } else {
                v_tau_a_tau_b_[index] = 0.0;
            } 

            //V_tau_b_tau_b
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t73090 = 1.0/pow(rho_b[index],1.0/3.0);
                double t73091 = c*t73090;
                double t73092 = sqrt(t73091);
                double t73093 = pow(t73091,3.0/2.0);
                double t73094 = c*c;
                double t73095 = 1.0/pow(rho_b[index],2.0/3.0);
                double t73096 = 1.0/c0p;
                double t73097 = b1p*t73092;
                double t73098 = b3p*t73093;
                double t73099 = b4p*t73094*t73095;
                double t73100 = b2p*c*t73090;
                double t73101 = t73100+t73097+t73098+t73099;
                double t73102 = 1.0/t73101;
                double t73103 = t73102*t73096*(1.0/2.0);
                double t73104 = t73103+1.0;
                double t73105 = log(t73104);
                double t73106 = a1p*c*t73090;
                double t73107 = t73106+1.0;
                double t73108 = 1.0/tau_b[index];
                double t73109 = tau_b[index]*2.0;
                double t73110 = 1.0/rho_b[index];
                double t73114 = gamma_bb[index]*t73110*(1.0/4.0);
                double t73111 = -t73114+t73109;
                double t73112 = tau_b[index]-1.0/1.0E20;
                double t73113 = 1.0/(tau_b[index]*tau_b[index]);
                double t73115 = gamma_bb[index]*gamma_bb[index];
                double t73116 = gcaa*gcaa;
                double t73117 = t73115*t73115;
                double t73118 = t73116*t73116;
                double t73119 = 1.0/pow(rho_b[index],3.2E1/3.0);
                double t73120 = 1.0/pow(rho_b[index],8.0/3.0);
                double t73121 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]);
                double t73122 = 1.0/pow(rho_b[index],1.6E1/3.0);
                double t73123 = C_k*C_k;
                double t73124 = pow(rho_b[index],1.0E1/3.0);
                double t73125 = 1.0/(tau_b[index]*tau_b[index]*tau_b[index]*tau_b[index]);
                double t73126 = pow(rho_b[index],5.0/3.0);
                double t73127 = C_k*t73108*t73126;
                double t73128 = t73127+1.0;
                double t73129 = 1.0/(t73128*t73128);
                double t73130 = 1.0/(tau_b[index]*tau_b[index]*tau_b[index]);
                double t73131 = t73127-1.0;
                double t73132 = t73131*t73131;
                double t73133 = t73132*t73132;
                double t73134 = t73133*t73133;
                double t73135 = 1.0/pow(t73128,1.1E1);
                double t73136 = 1.0/pow(t73128,1.2E1);
                double t73137 = 1.0/(t73128*t73128*t73128*t73128);
                double t73138 = 1.0/(t73128*t73128*t73128*t73128*t73128);
                double t73139 = 1.0/(t73128*t73128*t73128*t73128*t73128*t73128);
                double t73140 = 1.0/(t73128*t73128*t73128*t73128*t73128*t73128*t73128);
                double t73141 = 1.0/(t73128*t73128*t73128*t73128*t73128*t73128*t73128*t73128);
                double t73142 = 1.0/(t73128*t73128*t73128*t73128*t73128*t73128*t73128*t73128*t73128);
                double t73143 = 1.0/pow(t73128,1.0E1);
                double t73144 = 1.0/(t73128*t73128*t73128);
                v_tau_b_tau_b_[index] = -rho_b[index]*(X-1.0)*(kp-kp/((gamma_bb[index]*1.0/(k*k)*mu_*1.0/(rho_b[index]* \
                   rho_b[index])*1.0/pow(rho_b[index]*2.0,2.0/3.0)*(1.0/4.0))/kp+1.0)+1.0)*(a_1*t73123*t73124*t73125* \
                   t73129*-2.0+a_2*t73123*t73124*t73125*t73129*2.0+(C_k*a_1*t73130*t73126*2.0)/t73128+a_1*t73131*t73123* \
                   t73124*t73125*t73144*2.0+a_10*t73123*t73124*t73125*t73134*t73143*9.0E1-a_2*t73131*t73123*t73124*t73125* \
                   t73144*8.0+a_2*t73123*t73132*t73124*t73125*t73137*6.0+a_3*t73131*t73123*t73124*t73125*t73144*6.0-a_3* \
                   t73123*t73132*t73124*t73125*t73137*1.8E1+a_4*t73123*t73132*t73124*t73125*t73137*1.2E1+a_4*t73123*t73124* \
                   t73133*t73125*t73139*2.0E1-a_5*t73123*t73124*t73133*t73125*t73139*5.0E1+a_6*t73123*t73124*t73133*t73125* \
                   t73139*3.0E1+a_8*t73123*t73124*t73125*t73134*t73143*7.2E1-a_9*t73123*t73124*t73125*t73134*t73143*1.62E2- \
                   C_k*a_1*t73130*t73131*t73126*t73129*2.0-C_k*a_2*t73130*t73132*t73126*t73144*4.0+C_k*a_2*t73130*t73131* \
                   t73126*t73129*4.0+C_k*a_3*t73130*t73132*t73126*t73144*6.0-C_k*a_4*t73130*t73133*t73126*t73138*8.0+ \
                   C_k*a_5*t73130*t73133*t73126*t73138*1.0E1-C_k*a_8*t73130*t73142*t73134*t73126*1.6E1+C_k*a_9*t73130* \
                   t73142*t73134*t73126*1.8E1+C_k*a_10*t73130*t73131*t73134*t73143*t73126*2.0E1-C_k*a_10*t73130*t73132* \
                   t73134*t73126*t73135*2.0E1+C_k*a_11*t73130*t73132*t73134*t73126*t73135*2.2E1-C_k*a_3*t73130*t73131* \
                   t73132*t73126*t73137*6.0+C_k*a_4*t73130*t73131*t73132*t73126*t73137*8.0-C_k*a_5*t73130*t73131*t73133* \
                   t73126*t73139*1.0E1-C_k*a_6*t73130*t73140*t73132*t73133*t73126*1.2E1+C_k*a_6*t73130*t73131*t73133* \
                   t73126*t73139*1.2E1+C_k*a_7*t73130*t73140*t73132*t73133*t73126*1.4E1-C_k*a_9*t73130*t73131*t73134* \
                   t73143*t73126*1.8E1-a_10*t73131*t73123*t73124*t73125*t73134*t73135*2.0E2+a_11*t73131*t73123*t73124* \
                   t73125*t73134*t73135*1.1E2+a_10*t73123*t73132*t73124*t73125*t73134*t73136*1.1E2-a_11*t73123*t73132* \
                   t73124*t73125*t73134*t73136*2.42E2+a_3*t73131*t73123*t73132*t73124*t73125*t73138*1.2E1-a_4*t73131* \
                   t73123*t73132*t73124*t73125*t73138*3.2E1+a_5*t73131*t73140*t73123*t73124*t73133*t73125*3.0E1+a_5*t73131* \
                   t73123*t73132*t73124*t73125*t73138*2.0E1-a_6*t73131*t73140*t73123*t73124*t73133*t73125*7.2E1+a_6*t73123* \
                   t73132*t73141*t73124*t73133*t73125*4.2E1+a_7*t73131*t73140*t73123*t73124*t73133*t73125*4.2E1-a_7*t73123* \
                   t73132*t73141*t73124*t73133*t73125*9.8E1+a_8*t73123*t73132*t73141*t73124*t73133*t73125*5.6E1+a_9*t73131* \
                   t73123*t73124*t73125*t73134*t73135*9.0E1+a_11*t73131*t73123*t73132*t73124*t73125*t73134*1.0/pow(t73128,1.3E1) \
                   *1.32E2-C_k*a_11*t73130*t73131*t73132*t73134*t73126*t73136*2.2E1-C_k*a_7*t73130*t73131*t73132*t73141* \
                   t73133*t73126*1.4E1+C_k*a_8*t73130*t73131*t73132*t73141*t73133*t73126*1.6E1+a_7*t73131*t73123*t73132* \
                   t73124*t73133*t73142*t73125*5.6E1-a_8*t73131*t73123*t73132*t73124*t73133*t73142*t73125*1.28E2+a_9* \
                   t73131*t73123*t73132*t73124*t73133*t73142*t73125*7.2E1)-rho_b[index]*(((pow(2.0,1.0/3.0)*2.0-2.0)* \
                   (c0f*log((1.0/2.0)/(c0f*(b1f*t73092+b3f*t73093+b2f*c*t73090+b4f*t73094*t73095))+1.0)*(a1f*c*t73090+ \
                   1.0)*2.0-c0p*t73105*t73107*2.0))/(two_13*2.0-2.0)+c0p*t73105*t73107*2.0)*( 0.0 - ( (t73112 > 0.0)  \
                   ? 1.0*(t73113*2.0-t73111*t73130) : 0.0 ) + 0.0 )*(ccaa0+(ccaa2*t73122*t73115*t73116)/(gamma_bb[index]* \
                   gcaa*t73120*2.0+t73122*t73115*t73116+1.0)+(ccaa1*gamma_bb[index]*gcaa*t73120)/(gamma_bb[index]*gcaa* \
                   t73120+1.0)+(ccaa4*t73117*t73118*t73119)/(gamma_bb[index]*gcaa*t73120*4.0+t73122*t73115*t73116*6.0+ \
                   t73117*t73118*t73119+gamma_bb[index]*gcaa*t73121*t73115*t73116*4.0+1.0)+(ccaa3*gamma_bb[index]*gcaa* \
                   t73121*t73115*t73116)/(gamma_bb[index]*gcaa*t73120*3.0+t73122*t73115*t73116*3.0+gamma_bb[index]*gcaa* \
                   t73121*t73115*t73116+1.0));
            } else if (rho_a[index] > cutoff_) {
                v_tau_b_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                double t74317 = 1.0/pow(rho_b[index],1.0/3.0);
                double t74318 = c*t74317;
                double t74319 = sqrt(t74318);
                double t74320 = pow(t74318,3.0/2.0);
                double t74321 = c*c;
                double t74322 = 1.0/pow(rho_b[index],2.0/3.0);
                double t74323 = 1.0/c0p;
                double t74324 = b1p*t74319;
                double t74325 = b3p*t74320;
                double t74326 = b4p*t74321*t74322;
                double t74327 = b2p*c*t74317;
                double t74328 = t74324+t74325+t74326+t74327;
                double t74329 = 1.0/t74328;
                double t74330 = t74323*t74329*(1.0/2.0);
                double t74331 = t74330+1.0;
                double t74332 = log(t74331);
                double t74333 = a1p*c*t74317;
                double t74334 = t74333+1.0;
                double t74335 = 1.0/tau_b[index];
                double t74336 = tau_b[index]*2.0;
                double t74337 = 1.0/rho_b[index];
                double t74341 = gamma_bb[index]*t74337*(1.0/4.0);
                double t74338 = -t74341+t74336;
                double t74339 = tau_b[index]-1.0/1.0E20;
                double t74340 = 1.0/(tau_b[index]*tau_b[index]);
                double t74342 = gamma_bb[index]*gamma_bb[index];
                double t74343 = gcaa*gcaa;
                double t74344 = t74342*t74342;
                double t74345 = t74343*t74343;
                double t74346 = 1.0/pow(rho_b[index],3.2E1/3.0);
                double t74347 = 1.0/pow(rho_b[index],8.0/3.0);
                double t74348 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]);
                double t74349 = 1.0/pow(rho_b[index],1.6E1/3.0);
                double t74350 = C_k*C_k;
                double t74351 = pow(rho_b[index],1.0E1/3.0);
                double t74352 = 1.0/(tau_b[index]*tau_b[index]*tau_b[index]*tau_b[index]);
                double t74353 = pow(rho_b[index],5.0/3.0);
                double t74354 = C_k*t74335*t74353;
                double t74355 = t74354+1.0;
                double t74356 = 1.0/(t74355*t74355);
                double t74357 = 1.0/(tau_b[index]*tau_b[index]*tau_b[index]);
                double t74358 = t74354-1.0;
                double t74359 = t74358*t74358;
                double t74360 = t74359*t74359;
                double t74361 = t74360*t74360;
                double t74362 = 1.0/pow(t74355,1.1E1);
                double t74363 = 1.0/pow(t74355,1.2E1);
                double t74364 = 1.0/(t74355*t74355*t74355*t74355);
                double t74365 = 1.0/(t74355*t74355*t74355*t74355*t74355);
                double t74366 = 1.0/(t74355*t74355*t74355*t74355*t74355*t74355);
                double t74367 = 1.0/(t74355*t74355*t74355*t74355*t74355*t74355*t74355);
                double t74368 = 1.0/(t74355*t74355*t74355*t74355*t74355*t74355*t74355*t74355);
                double t74369 = 1.0/(t74355*t74355*t74355*t74355*t74355*t74355*t74355*t74355*t74355);
                double t74370 = 1.0/pow(t74355,1.0E1);
                double t74371 = 1.0/(t74355*t74355*t74355);
                v_tau_b_tau_b_[index] = -rho_b[index]*(X-1.0)*(kp-kp/((gamma_bb[index]*1.0/(k*k)*mu_*1.0/(rho_b[index]* \
                   rho_b[index])*1.0/pow(rho_b[index]*2.0,2.0/3.0)*(1.0/4.0))/kp+1.0)+1.0)*(a_1*t74350*t74351*t74352* \
                   t74356*-2.0+a_2*t74350*t74351*t74352*t74356*2.0+(C_k*a_1*t74353*t74357*2.0)/t74355+a_1*t74350*t74351* \
                   t74352*t74371*t74358*2.0+a_10*t74350*t74351*t74352*t74361*t74370*9.0E1-a_2*t74350*t74351*t74352*t74371* \
                   t74358*8.0+a_2*t74350*t74351*t74352*t74364*t74359*6.0+a_3*t74350*t74351*t74352*t74371*t74358*6.0-a_3* \
                   t74350*t74351*t74352*t74364*t74359*1.8E1+a_4*t74350*t74351*t74360*t74352*t74366*2.0E1+a_4*t74350*t74351* \
                   t74352*t74364*t74359*1.2E1-a_5*t74350*t74351*t74360*t74352*t74366*5.0E1+a_6*t74350*t74351*t74360*t74352* \
                   t74366*3.0E1+a_8*t74350*t74351*t74352*t74361*t74370*7.2E1-a_9*t74350*t74351*t74352*t74361*t74370*1.62E2- \
                   C_k*a_1*t74353*t74356*t74357*t74358*2.0-C_k*a_2*t74353*t74371*t74357*t74359*4.0+C_k*a_2*t74353*t74356* \
                   t74357*t74358*4.0+C_k*a_3*t74353*t74371*t74357*t74359*6.0-C_k*a_4*t74360*t74353*t74365*t74357*8.0+ \
                   C_k*a_5*t74360*t74353*t74365*t74357*1.0E1-C_k*a_8*t74361*t74353*t74357*t74369*1.6E1+C_k*a_9*t74361* \
                   t74353*t74357*t74369*1.8E1+C_k*a_10*t74361*t74370*t74353*t74357*t74358*2.0E1-C_k*a_10*t74361*t74353* \
                   t74362*t74357*t74359*2.0E1+C_k*a_11*t74361*t74353*t74362*t74357*t74359*2.2E1-C_k*a_3*t74353*t74364* \
                   t74357*t74358*t74359*6.0+C_k*a_4*t74353*t74364*t74357*t74358*t74359*8.0-C_k*a_5*t74360*t74353*t74357* \
                   t74366*t74358*1.0E1+C_k*a_6*t74360*t74353*t74357*t74366*t74358*1.2E1-C_k*a_6*t74360*t74353*t74357* \
                   t74367*t74359*1.2E1+C_k*a_7*t74360*t74353*t74357*t74367*t74359*1.4E1-C_k*a_9*t74361*t74370*t74353* \
                   t74357*t74358*1.8E1-a_10*t74350*t74351*t74352*t74361*t74362*t74358*2.0E2+a_11*t74350*t74351*t74352* \
                   t74361*t74362*t74358*1.1E2+a_10*t74350*t74351*t74352*t74361*t74363*t74359*1.1E2-a_11*t74350*t74351* \
                   t74352*t74361*t74363*t74359*2.42E2+a_3*t74350*t74351*t74352*t74365*t74358*t74359*1.2E1-a_4*t74350* \
                   t74351*t74352*t74365*t74358*t74359*3.2E1+a_5*t74350*t74351*t74360*t74352*t74358*t74367*3.0E1+a_5*t74350* \
                   t74351*t74352*t74365*t74358*t74359*2.0E1-a_6*t74350*t74351*t74360*t74352*t74358*t74367*7.2E1+a_6*t74350* \
                   t74351*t74360*t74352*t74359*t74368*4.2E1+a_7*t74350*t74351*t74360*t74352*t74358*t74367*4.2E1-a_7*t74350* \
                   t74351*t74360*t74352*t74359*t74368*9.8E1+a_8*t74350*t74351*t74360*t74352*t74359*t74368*5.6E1+a_9*t74350* \
                   t74351*t74352*t74361*t74362*t74358*9.0E1+a_11*t74350*t74351*t74352*t74361*1.0/pow(t74355,1.3E1)*t74358* \
                   t74359*1.32E2-C_k*a_11*t74361*t74353*t74363*t74357*t74358*t74359*2.2E1-C_k*a_7*t74360*t74353*t74357* \
                   t74358*t74359*t74368*1.4E1+C_k*a_8*t74360*t74353*t74357*t74358*t74359*t74368*1.6E1+a_7*t74350*t74351* \
                   t74360*t74352*t74358*t74359*t74369*5.6E1-a_8*t74350*t74351*t74360*t74352*t74358*t74359*t74369*1.28E2+ \
                   a_9*t74350*t74351*t74360*t74352*t74358*t74359*t74369*7.2E1)-rho_b[index]*(((pow(2.0,1.0/3.0)*2.0-2.0) \
                   *(c0f*log((1.0/2.0)/(c0f*(b1f*t74319+b3f*t74320+b2f*c*t74317+b4f*t74321*t74322))+1.0)*(a1f*c*t74317+ \
                   1.0)*2.0-c0p*t74332*t74334*2.0))/(two_13*2.0-2.0)+c0p*t74332*t74334*2.0)*( 0.0 - ( (t74339 > 0.0)  \
                   ? 1.0*(t74340*2.0-t74338*t74357) : 0.0 ) + 0.0 )*(ccaa0+(ccaa2*t74342*t74343*t74349)/(gamma_bb[index]* \
                   gcaa*t74347*2.0+t74342*t74343*t74349+1.0)+(ccaa1*gamma_bb[index]*gcaa*t74347)/(gamma_bb[index]*gcaa* \
                   t74347+1.0)+(ccaa4*t74344*t74345*t74346)/(gamma_bb[index]*gcaa*t74347*4.0+t74342*t74343*t74349*6.0+ \
                   t74344*t74345*t74346+gamma_bb[index]*gcaa*t74342*t74343*t74348*4.0+1.0)+(ccaa3*gamma_bb[index]*gcaa* \
                   t74342*t74343*t74348)/(gamma_bb[index]*gcaa*t74347*3.0+t74342*t74343*t74349*3.0+gamma_bb[index]*gcaa* \
                   t74342*t74343*t74348+1.0));
            } else {
                v_tau_b_tau_b_[index] = 0.0;
            } 

            if (is_gga_) {

                //V_gamma_aa_tau_a
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    double t73146 = 1.0/pow(rho_a[index],1.0/3.0);
                    double t73147 = c*t73146;
                    double t73148 = sqrt(t73147);
                    double t73149 = pow(t73147,3.0/2.0);
                    double t73150 = c*c;
                    double t73151 = 1.0/pow(rho_a[index],2.0/3.0);
                    double t73152 = 1.0/c0p;
                    double t73153 = b1p*t73148;
                    double t73154 = b3p*t73149;
                    double t73155 = b4p*t73150*t73151;
                    double t73156 = b2p*c*t73146;
                    double t73157 = t73153+t73154+t73155+t73156;
                    double t73158 = 1.0/t73157;
                    double t73159 = t73152*t73158*(1.0/2.0);
                    double t73160 = t73159+1.0;
                    double t73161 = log(t73160);
                    double t73162 = a1p*c*t73146;
                    double t73163 = t73162+1.0;
                    double t73164 = gamma_aa[index]*gamma_aa[index];
                    double t73165 = gcaa*gcaa;
                    double t73166 = t73164*t73164;
                    double t73167 = t73165*t73165;
                    double t73168 = 1.0/pow(rho_a[index],3.2E1/3.0);
                    double t73169 = 1.0/pow(rho_a[index],8.0/3.0);
                    double t73170 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                       rho_a[index]*rho_a[index]);
                    double t73171 = 1.0/pow(rho_a[index],1.6E1/3.0);
                    double t73172 = tau_a[index]-1.0/1.0E20;
                    double t73173 = pow(2.0,1.0/3.0);
                    double t73174 = t73173*2.0;
                    double t73175 = t73174-2.0;
                    double t73176 = two_13*2.0;
                    double t73177 = t73176-2.0;
                    double t73178 = 1.0/t73177;
                    double t73179 = 1.0/c0f;
                    double t73180 = b1f*t73148;
                    double t73181 = b3f*t73149;
                    double t73182 = b4f*t73150*t73151;
                    double t73183 = b2f*c*t73146;
                    double t73184 = t73180+t73181+t73182+t73183;
                    double t73185 = 1.0/t73184;
                    double t73186 = t73185*t73179*(1.0/2.0);
                    double t73187 = t73186+1.0;
                    double t73188 = log(t73187);
                    double t73189 = a1f*c*t73146;
                    double t73190 = t73189+1.0;
                    double t73191 = c0f*t73190*t73188*2.0;
                    double t73192 = c0p*t73161*t73163*2.0;
                    double t73193 = gamma_aa[index]*gcaa*t73169*4.0;
                    double t73194 = gamma_aa[index]*gcaa*t73170*t73164*t73165*4.0;
                    double t73195 = t73171*t73164*t73165*6.0;
                    double t73196 = t73166*t73167*t73168;
                    double t73197 = t73193+t73194+t73195+t73196+1.0;
                    double t73198 = 1.0/t73197;
                    double t73199 = ccaa4*t73166*t73167*t73168*t73198;
                    double t73200 = gamma_aa[index]*gcaa*t73169;
                    double t73201 = t73200+1.0;
                    double t73202 = 1.0/t73201;
                    double t73203 = ccaa1*gamma_aa[index]*gcaa*t73202*t73169;
                    double t73204 = gamma_aa[index]*gcaa*t73169*3.0;
                    double t73205 = gamma_aa[index]*gcaa*t73170*t73164*t73165;
                    double t73206 = t73171*t73164*t73165*3.0;
                    double t73207 = t73204+t73205+t73206+1.0;
                    double t73208 = 1.0/t73207;
                    double t73209 = ccaa3*gamma_aa[index]*gcaa*t73170*t73208*t73164*t73165;
                    double t73210 = gamma_aa[index]*gcaa*t73169*2.0;
                    double t73211 = t73171*t73164*t73165;
                    double t73212 = t73210+t73211+1.0;
                    double t73213 = 1.0/t73212;
                    double t73214 = ccaa2*t73213*t73171*t73164*t73165;
                    double t73215 = ccaa0+t73203+t73214+t73209+t73199;
                    double t73216 = t73191-t73192;
                    double t73217 = t73216*t73175*t73178;
                    double t73218 = t73217+t73192;
                    double t73219 = ( (t73172 > 0.0) ?  1.0 : 0.0 ) ;
                    double t73220 = 1.0/tau_a[index];
                    double t73221 = 1.0/(tau_a[index]*tau_a[index]);
                    double t73222 = 0.0 ;
                    double t73223 = tau_a[index]*2.0;
                    double t73224 = 1.0/rho_a[index];
                    double t73225 = t73223-gamma_aa[index]*t73224*(1.0/4.0);
                    double t73226 = 1.0/(k*k);
                    double t73227 = rho_a[index]*2.0;
                    double t73228 = 1.0/pow(t73227,2.0/3.0);
                    double t73229 = pow(rho_a[index],5.0/3.0);
                    double t73230 = C_k*t73220*t73229;
                    double t73231 = t73230+1.0;
                    double t73232 = t73230-1.0;
                    double t73233 = 1.0/(t73231*t73231);
                    double t73234 = t73232*t73232;
                    double t73235 = t73234*t73234;
                    double t73236 = t73235*t73235;
                    double t73237 = 1.0/pow(t73231,1.1E1);
                    double t73238 = 1.0/(t73231*t73231*t73231);
                    double t73239 = 1.0/(t73231*t73231*t73231*t73231);
                    double t73240 = 1.0/(t73231*t73231*t73231*t73231*t73231);
                    double t73241 = 1.0/(t73231*t73231*t73231*t73231*t73231*t73231);
                    double t73242 = 1.0/(t73231*t73231*t73231*t73231*t73231*t73231*t73231);
                    double t73243 = 1.0/(t73231*t73231*t73231*t73231*t73231*t73231*t73231*t73231);
                    double t73244 = 1.0/(t73231*t73231*t73231*t73231*t73231*t73231*t73231*t73231*t73231);
                    double t73245 = 1.0/pow(t73231,1.0E1);
                    v_gamma_aa_tau_a_[index] = t73221*t73215*t73218*t73219*(-1.0/8.0)+t73220*t73222*t73215*(t73192+t73175* \
                       t73178*(t73191-c0p*t73161*t73163*2.0))*(1.0/8.0)-rho_a[index]*t73218*(t73222*(t73220*t73225*(1.0/2.0) \
                       -1.0)+t73219*(t73220-t73221*t73225*(1.0/2.0)))*(ccaa1*gcaa*t73202*t73169+ccaa2*gamma_aa[index]*t73213* \
                       t73171*t73165*2.0-ccaa1*gamma_aa[index]*1.0/(t73201*t73201)*t73171*t73165-ccaa2*1.0/(t73212*t73212) \
                       *t73171*t73164*t73165*(gcaa*t73169*2.0+gamma_aa[index]*t73171*t73165*2.0)-ccaa4*t73166*t73167*t73168* \
                       1.0/(t73197*t73197)*(gcaa*t73169*4.0+gamma_aa[index]*t73171*t73165*1.2E1+gamma_aa[index]*t73164*t73167* \
                       t73168*4.0+gcaa*t73170*t73164*t73165*1.2E1)+ccaa4*gamma_aa[index]*t73164*t73167*t73168*t73198*4.0+ \
                       ccaa3*gcaa*t73170*t73208*t73164*t73165*3.0-ccaa3*gamma_aa[index]*gcaa*t73170*1.0/(t73207*t73207)*t73164* \
                       t73165*(gcaa*t73169*3.0+gamma_aa[index]*t73171*t73165*6.0+gcaa*t73170*t73164*t73165*3.0))+mu_*t73224* \
                       t73226*t73228*1.0/pow((gamma_aa[index]*mu_*1.0/(rho_a[index]*rho_a[index])*t73226*t73228*(1.0/4.0) \
                       )/kp+1.0,2.0)*(X-1.0)*((C_k*a_1*t73221*t73229)/t73231-C_k*a_1*t73221*t73232*t73233*t73229+C_k*a_2* \
                       t73221*t73232*t73233*t73229*2.0-C_k*a_2*t73221*t73234*t73229*t73238*2.0+C_k*a_3*t73221*t73234*t73229* \
                       t73238*3.0-C_k*a_4*t73221*t73240*t73235*t73229*4.0+C_k*a_5*t73221*t73240*t73235*t73229*5.0-C_k*a_8* \
                       t73221*t73244*t73236*t73229*8.0+C_k*a_9*t73221*t73244*t73236*t73229*9.0+C_k*a_10*t73221*t73232*t73236* \
                       t73245*t73229*1.0E1-C_k*a_10*t73221*t73234*t73236*t73237*t73229*1.0E1+C_k*a_11*t73221*t73234*t73236* \
                       t73237*t73229*1.1E1-C_k*a_3*t73221*t73232*t73234*t73229*t73239*3.0+C_k*a_4*t73221*t73232*t73234*t73229* \
                       t73239*4.0-C_k*a_5*t73221*t73232*t73241*t73235*t73229*5.0+C_k*a_6*t73221*t73232*t73241*t73235*t73229* \
                       6.0-C_k*a_6*t73221*t73242*t73234*t73235*t73229*6.0+C_k*a_7*t73221*t73242*t73234*t73235*t73229*7.0- \
                       C_k*a_9*t73221*t73232*t73236*t73245*t73229*9.0-C_k*a_11*t73221*1.0/pow(t73231,1.2E1)*t73232*t73234* \
                       t73236*t73229*1.1E1-C_k*a_7*t73221*t73232*t73234*t73243*t73235*t73229*7.0+C_k*a_8*t73221*t73232*t73234* \
                       t73243*t73235*t73229*8.0)*(1.0/4.0);
                } else if (rho_a[index] > cutoff_) {
                    double t75500 = 1.0/pow(rho_a[index],1.0/3.0);
                    double t75501 = c*t75500;
                    double t75502 = sqrt(t75501);
                    double t75503 = pow(t75501,3.0/2.0);
                    double t75504 = c*c;
                    double t75505 = 1.0/pow(rho_a[index],2.0/3.0);
                    double t75506 = 1.0/c0p;
                    double t75507 = b1p*t75502;
                    double t75508 = b3p*t75503;
                    double t75509 = b4p*t75504*t75505;
                    double t75510 = b2p*c*t75500;
                    double t75511 = t75510+t75507+t75508+t75509;
                    double t75512 = 1.0/t75511;
                    double t75513 = t75512*t75506*(1.0/2.0);
                    double t75514 = t75513+1.0;
                    double t75515 = log(t75514);
                    double t75516 = a1p*c*t75500;
                    double t75517 = t75516+1.0;
                    double t75518 = gamma_aa[index]*gamma_aa[index];
                    double t75519 = gcaa*gcaa;
                    double t75520 = t75518*t75518;
                    double t75521 = t75519*t75519;
                    double t75522 = 1.0/pow(rho_a[index],3.2E1/3.0);
                    double t75523 = 1.0/pow(rho_a[index],8.0/3.0);
                    double t75524 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                       rho_a[index]*rho_a[index]);
                    double t75525 = 1.0/pow(rho_a[index],1.6E1/3.0);
                    double t75526 = tau_a[index]-1.0/1.0E20;
                    double t75527 = pow(2.0,1.0/3.0);
                    double t75528 = t75527*2.0;
                    double t75529 = t75528-2.0;
                    double t75530 = two_13*2.0;
                    double t75531 = t75530-2.0;
                    double t75532 = 1.0/t75531;
                    double t75533 = 1.0/c0f;
                    double t75534 = b1f*t75502;
                    double t75535 = b3f*t75503;
                    double t75536 = b4f*t75504*t75505;
                    double t75537 = b2f*c*t75500;
                    double t75538 = t75534+t75535+t75536+t75537;
                    double t75539 = 1.0/t75538;
                    double t75540 = t75533*t75539*(1.0/2.0);
                    double t75541 = t75540+1.0;
                    double t75542 = log(t75541);
                    double t75543 = a1f*c*t75500;
                    double t75544 = t75543+1.0;
                    double t75545 = c0f*t75542*t75544*2.0;
                    double t75546 = c0p*t75515*t75517*2.0;
                    double t75547 = gamma_aa[index]*gcaa*t75523*4.0;
                    double t75548 = gamma_aa[index]*gcaa*t75524*t75518*t75519*4.0;
                    double t75549 = t75525*t75518*t75519*6.0;
                    double t75550 = t75520*t75521*t75522;
                    double t75551 = t75550+t75547+t75548+t75549+1.0;
                    double t75552 = 1.0/t75551;
                    double t75553 = ccaa4*t75520*t75521*t75522*t75552;
                    double t75554 = gamma_aa[index]*gcaa*t75523;
                    double t75555 = t75554+1.0;
                    double t75556 = 1.0/t75555;
                    double t75557 = ccaa1*gamma_aa[index]*gcaa*t75523*t75556;
                    double t75558 = gamma_aa[index]*gcaa*t75523*3.0;
                    double t75559 = gamma_aa[index]*gcaa*t75524*t75518*t75519;
                    double t75560 = t75525*t75518*t75519*3.0;
                    double t75561 = t75560+t75558+t75559+1.0;
                    double t75562 = 1.0/t75561;
                    double t75563 = ccaa3*gamma_aa[index]*gcaa*t75524*t75562*t75518*t75519;
                    double t75564 = gamma_aa[index]*gcaa*t75523*2.0;
                    double t75565 = t75525*t75518*t75519;
                    double t75566 = t75564+t75565+1.0;
                    double t75567 = 1.0/t75566;
                    double t75568 = ccaa2*t75525*t75518*t75519*t75567;
                    double t75569 = ccaa0+t75553+t75563+t75557+t75568;
                    double t75570 = t75545-t75546;
                    double t75571 = t75532*t75570*t75529;
                    double t75572 = t75571+t75546;
                    double t75573 = ( (t75526 > 0.0) ?  1.0 : 0.0 ) ;
                    double t75574 = 1.0/tau_a[index];
                    double t75575 = 1.0/(tau_a[index]*tau_a[index]);
                    double t75576 = 0.0 ;
                    double t75577 = tau_a[index]*2.0;
                    double t75578 = 1.0/rho_a[index];
                    double t75579 = t75577-gamma_aa[index]*t75578*(1.0/4.0);
                    double t75580 = 1.0/(k*k);
                    double t75581 = rho_a[index]*2.0;
                    double t75582 = 1.0/pow(t75581,2.0/3.0);
                    double t75583 = pow(rho_a[index],5.0/3.0);
                    double t75584 = C_k*t75574*t75583;
                    double t75585 = t75584+1.0;
                    double t75586 = t75584-1.0;
                    double t75587 = 1.0/(t75585*t75585);
                    double t75588 = t75586*t75586;
                    double t75589 = t75588*t75588;
                    double t75590 = t75589*t75589;
                    double t75591 = 1.0/pow(t75585,1.1E1);
                    double t75592 = 1.0/(t75585*t75585*t75585);
                    double t75593 = 1.0/(t75585*t75585*t75585*t75585);
                    double t75594 = 1.0/(t75585*t75585*t75585*t75585*t75585);
                    double t75595 = 1.0/(t75585*t75585*t75585*t75585*t75585*t75585);
                    double t75596 = 1.0/(t75585*t75585*t75585*t75585*t75585*t75585*t75585);
                    double t75597 = 1.0/(t75585*t75585*t75585*t75585*t75585*t75585*t75585*t75585);
                    double t75598 = 1.0/(t75585*t75585*t75585*t75585*t75585*t75585*t75585*t75585*t75585);
                    double t75599 = 1.0/pow(t75585,1.0E1);
                    v_gamma_aa_tau_a_[index] = t75572*t75573*t75575*t75569*(-1.0/8.0)+t75574*t75576*t75569*(t75546+t75532* \
                       t75529*(t75545-c0p*t75515*t75517*2.0))*(1.0/8.0)-rho_a[index]*t75572*(t75576*(t75574*t75579*(1.0/2.0) \
                       -1.0)+t75573*(t75574-t75575*t75579*(1.0/2.0)))*(ccaa1*gcaa*t75523*t75556+ccaa2*gamma_aa[index]*t75525* \
                       t75519*t75567*2.0-ccaa1*gamma_aa[index]*t75525*t75519*1.0/(t75555*t75555)-ccaa2*t75525*t75518*t75519* \
                       1.0/(t75566*t75566)*(gcaa*t75523*2.0+gamma_aa[index]*t75525*t75519*2.0)-ccaa4*t75520*t75521*t75522* \
                       1.0/(t75551*t75551)*(gcaa*t75523*4.0+gamma_aa[index]*t75525*t75519*1.2E1+gamma_aa[index]*t75521*t75522* \
                       t75518*4.0+gcaa*t75524*t75518*t75519*1.2E1)+ccaa4*gamma_aa[index]*t75521*t75522*t75552*t75518*4.0+ \
                       ccaa3*gcaa*t75524*t75562*t75518*t75519*3.0-ccaa3*gamma_aa[index]*gcaa*t75524*1.0/(t75561*t75561)*t75518* \
                       t75519*(gcaa*t75523*3.0+gamma_aa[index]*t75525*t75519*6.0+gcaa*t75524*t75518*t75519*3.0))+mu_*t75580* \
                       t75582*t75578*1.0/pow((gamma_aa[index]*mu_*1.0/(rho_a[index]*rho_a[index])*t75580*t75582*(1.0/4.0) \
                       )/kp+1.0,2.0)*(X-1.0)*((C_k*a_1*t75583*t75575)/t75585-C_k*a_1*t75583*t75575*t75586*t75587-C_k*a_2* \
                       t75583*t75592*t75575*t75588*2.0+C_k*a_2*t75583*t75575*t75586*t75587*2.0+C_k*a_3*t75583*t75592*t75575* \
                       t75588*3.0-C_k*a_4*t75583*t75575*t75594*t75589*4.0+C_k*a_5*t75583*t75575*t75594*t75589*5.0-C_k*a_8* \
                       t75590*t75583*t75575*t75598*8.0+C_k*a_9*t75590*t75583*t75575*t75598*9.0-C_k*a_10*t75590*t75591*t75583* \
                       t75575*t75588*1.0E1+C_k*a_11*t75590*t75591*t75583*t75575*t75588*1.1E1+C_k*a_10*t75590*t75583*t75575* \
                       t75586*t75599*1.0E1-C_k*a_3*t75583*t75575*t75593*t75586*t75588*3.0+C_k*a_4*t75583*t75575*t75593*t75586* \
                       t75588*4.0-C_k*a_5*t75583*t75575*t75586*t75595*t75589*5.0+C_k*a_6*t75583*t75575*t75586*t75595*t75589* \
                       6.0-C_k*a_6*t75583*t75575*t75596*t75588*t75589*6.0+C_k*a_7*t75583*t75575*t75596*t75588*t75589*7.0- \
                       C_k*a_9*t75590*t75583*t75575*t75586*t75599*9.0-C_k*a_11*t75590*t75583*t75575*1.0/pow(t75585,1.2E1) \
                       *t75586*t75588*1.1E1-C_k*a_7*t75583*t75575*t75586*t75588*t75597*t75589*7.0+C_k*a_8*t75583*t75575*t75586* \
                       t75588*t75597*t75589*8.0)*(1.0/4.0);
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } else {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } 

                //V_gamma_aa_tau_b
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_aa_tau_b_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_aa_tau_b_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_aa_tau_b_[index] = 0.0;
                } else {
                    v_gamma_aa_tau_b_[index] = 0.0;
                } 

                //V_gamma_ab_tau_a
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_ab_tau_a_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_ab_tau_a_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_ab_tau_a_[index] = 0.0;
                } else {
                    v_gamma_ab_tau_a_[index] = 0.0;
                } 

                //V_gamma_ab_tau_b
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_ab_tau_b_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_ab_tau_b_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_ab_tau_b_[index] = 0.0;
                } else {
                    v_gamma_ab_tau_b_[index] = 0.0;
                } 

                //V_gamma_bb_tau_a
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_bb_tau_a_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_bb_tau_a_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_bb_tau_a_[index] = 0.0;
                } else {
                    v_gamma_bb_tau_a_[index] = 0.0;
                } 

                //V_gamma_bb_tau_b
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    double t73251 = 1.0/pow(rho_b[index],1.0/3.0);
                    double t73252 = c*t73251;
                    double t73253 = sqrt(t73252);
                    double t73254 = pow(t73252,3.0/2.0);
                    double t73255 = c*c;
                    double t73256 = 1.0/pow(rho_b[index],2.0/3.0);
                    double t73257 = 1.0/c0p;
                    double t73258 = b1p*t73253;
                    double t73259 = b3p*t73254;
                    double t73260 = b4p*t73255*t73256;
                    double t73261 = b2p*c*t73251;
                    double t73262 = t73260+t73261+t73258+t73259;
                    double t73263 = 1.0/t73262;
                    double t73264 = t73263*t73257*(1.0/2.0);
                    double t73265 = t73264+1.0;
                    double t73266 = log(t73265);
                    double t73267 = a1p*c*t73251;
                    double t73268 = t73267+1.0;
                    double t73269 = gamma_bb[index]*gamma_bb[index];
                    double t73270 = gcaa*gcaa;
                    double t73271 = t73269*t73269;
                    double t73272 = t73270*t73270;
                    double t73273 = 1.0/pow(rho_b[index],3.2E1/3.0);
                    double t73274 = 1.0/pow(rho_b[index],8.0/3.0);
                    double t73275 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                       rho_b[index]*rho_b[index]);
                    double t73276 = 1.0/pow(rho_b[index],1.6E1/3.0);
                    double t73277 = tau_b[index]-1.0/1.0E20;
                    double t73278 = pow(2.0,1.0/3.0);
                    double t73279 = t73278*2.0;
                    double t73280 = t73279-2.0;
                    double t73281 = two_13*2.0;
                    double t73282 = t73281-2.0;
                    double t73283 = 1.0/t73282;
                    double t73284 = 1.0/c0f;
                    double t73285 = b1f*t73253;
                    double t73286 = b3f*t73254;
                    double t73287 = b4f*t73255*t73256;
                    double t73288 = b2f*c*t73251;
                    double t73289 = t73285+t73286+t73287+t73288;
                    double t73290 = 1.0/t73289;
                    double t73291 = t73290*t73284*(1.0/2.0);
                    double t73292 = t73291+1.0;
                    double t73293 = log(t73292);
                    double t73294 = a1f*c*t73251;
                    double t73295 = t73294+1.0;
                    double t73296 = c0f*t73293*t73295*2.0;
                    double t73297 = c0p*t73266*t73268*2.0;
                    double t73298 = gamma_bb[index]*gcaa*t73274*4.0;
                    double t73299 = gamma_bb[index]*gcaa*t73270*t73275*t73269*4.0;
                    double t73300 = t73270*t73276*t73269*6.0;
                    double t73301 = t73271*t73272*t73273;
                    double t73302 = t73300+t73301+t73298+t73299+1.0;
                    double t73303 = 1.0/t73302;
                    double t73304 = ccaa4*t73303*t73271*t73272*t73273;
                    double t73305 = gamma_bb[index]*gcaa*t73274;
                    double t73306 = t73305+1.0;
                    double t73307 = 1.0/t73306;
                    double t73308 = ccaa1*gamma_bb[index]*gcaa*t73307*t73274;
                    double t73309 = gamma_bb[index]*gcaa*t73274*3.0;
                    double t73310 = gamma_bb[index]*gcaa*t73270*t73275*t73269;
                    double t73311 = t73270*t73276*t73269*3.0;
                    double t73312 = t73310+t73311+t73309+1.0;
                    double t73313 = 1.0/t73312;
                    double t73314 = ccaa3*gamma_bb[index]*gcaa*t73313*t73270*t73275*t73269;
                    double t73315 = gamma_bb[index]*gcaa*t73274*2.0;
                    double t73316 = t73270*t73276*t73269;
                    double t73317 = t73315+t73316+1.0;
                    double t73318 = 1.0/t73317;
                    double t73319 = ccaa2*t73270*t73318*t73276*t73269;
                    double t73320 = ccaa0+t73304+t73314+t73308+t73319;
                    double t73321 = t73296-t73297;
                    double t73322 = t73321*t73280*t73283;
                    double t73323 = t73322+t73297;
                    double t73324 = ( (t73277 > 0.0) ?  1.0 : 0.0 ) ;
                    double t73325 = 1.0/tau_b[index];
                    double t73326 = 1.0/(tau_b[index]*tau_b[index]);
                    double t73327 = 0.0 ;
                    double t73328 = tau_b[index]*2.0;
                    double t73329 = 1.0/rho_b[index];
                    double t73330 = t73328-gamma_bb[index]*t73329*(1.0/4.0);
                    double t73331 = 1.0/(k*k);
                    double t73332 = rho_b[index]*2.0;
                    double t73333 = 1.0/pow(t73332,2.0/3.0);
                    double t73334 = pow(rho_b[index],5.0/3.0);
                    double t73335 = C_k*t73325*t73334;
                    double t73336 = t73335+1.0;
                    double t73337 = t73335-1.0;
                    double t73338 = 1.0/(t73336*t73336);
                    double t73339 = t73337*t73337;
                    double t73340 = t73339*t73339;
                    double t73341 = t73340*t73340;
                    double t73342 = 1.0/pow(t73336,1.1E1);
                    double t73343 = 1.0/(t73336*t73336*t73336);
                    double t73344 = 1.0/(t73336*t73336*t73336*t73336);
                    double t73345 = 1.0/(t73336*t73336*t73336*t73336*t73336);
                    double t73346 = 1.0/(t73336*t73336*t73336*t73336*t73336*t73336);
                    double t73347 = 1.0/(t73336*t73336*t73336*t73336*t73336*t73336*t73336);
                    double t73348 = 1.0/(t73336*t73336*t73336*t73336*t73336*t73336*t73336*t73336);
                    double t73349 = 1.0/(t73336*t73336*t73336*t73336*t73336*t73336*t73336*t73336*t73336);
                    double t73350 = 1.0/pow(t73336,1.0E1);
                    v_gamma_bb_tau_b_[index] = t73320*t73323*t73324*t73326*(-1.0/8.0)+t73320*t73325*t73327*(t73297+t73280* \
                       t73283*(t73296-c0p*t73266*t73268*2.0))*(1.0/8.0)-rho_b[index]*t73323*(t73327*(t73330*t73325*(1.0/2.0) \
                       -1.0)+t73324*(t73325-t73330*t73326*(1.0/2.0)))*(ccaa1*gcaa*t73307*t73274+ccaa2*gamma_bb[index]*t73270* \
                       t73318*t73276*2.0-ccaa1*gamma_bb[index]*t73270*1.0/(t73306*t73306)*t73276-ccaa2*t73270*1.0/(t73317* \
                       t73317)*t73276*t73269*(gcaa*t73274*2.0+gamma_bb[index]*t73270*t73276*2.0)-ccaa4*1.0/(t73302*t73302) \
                       *t73271*t73272*t73273*(gcaa*t73274*4.0+gamma_bb[index]*t73270*t73276*1.2E1+gamma_bb[index]*t73272* \
                       t73273*t73269*4.0+gcaa*t73270*t73275*t73269*1.2E1)+ccaa4*gamma_bb[index]*t73303*t73272*t73273*t73269* \
                       4.0+ccaa3*gcaa*t73313*t73270*t73275*t73269*3.0-ccaa3*gamma_bb[index]*gcaa*1.0/(t73312*t73312)*t73270* \
                       t73275*t73269*(gcaa*t73274*3.0+gamma_bb[index]*t73270*t73276*6.0+gcaa*t73270*t73275*t73269*3.0))+mu_* \
                       t73331*t73333*t73329*1.0/pow((gamma_bb[index]*mu_*1.0/(rho_b[index]*rho_b[index])*t73331*t73333*(1.0/ \
                       4.0))/kp+1.0,2.0)*(X-1.0)*((C_k*a_1*t73334*t73326)/t73336-C_k*a_1*t73334*t73326*t73337*t73338-C_k* \
                       a_2*t73334*t73343*t73326*t73339*2.0+C_k*a_2*t73334*t73326*t73337*t73338*2.0+C_k*a_3*t73334*t73343* \
                       t73326*t73339*3.0-C_k*a_4*t73340*t73334*t73326*t73345*4.0+C_k*a_5*t73340*t73334*t73326*t73345*5.0- \
                       C_k*a_8*t73341*t73334*t73326*t73349*8.0+C_k*a_9*t73341*t73334*t73326*t73349*9.0+C_k*a_10*t73341*t73350* \
                       t73334*t73326*t73337*1.0E1-C_k*a_10*t73341*t73342*t73334*t73326*t73339*1.0E1+C_k*a_11*t73341*t73342* \
                       t73334*t73326*t73339*1.1E1-C_k*a_3*t73334*t73326*t73344*t73337*t73339*3.0+C_k*a_4*t73334*t73326*t73344* \
                       t73337*t73339*4.0-C_k*a_5*t73340*t73334*t73326*t73337*t73346*5.0+C_k*a_6*t73340*t73334*t73326*t73337* \
                       t73346*6.0-C_k*a_6*t73340*t73334*t73326*t73347*t73339*6.0+C_k*a_7*t73340*t73334*t73326*t73347*t73339* \
                       7.0-C_k*a_9*t73341*t73350*t73334*t73326*t73337*9.0-C_k*a_11*t73341*t73334*t73326*1.0/pow(t73336,1.2E1) \
                       *t73337*t73339*1.1E1-C_k*a_7*t73340*t73334*t73326*t73337*t73339*t73348*7.0+C_k*a_8*t73340*t73334*t73326* \
                       t73337*t73339*t73348*8.0)*(1.0/4.0);
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_bb_tau_b_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    double t74378 = 1.0/pow(rho_b[index],1.0/3.0);
                    double t74379 = c*t74378;
                    double t74380 = sqrt(t74379);
                    double t74381 = pow(t74379,3.0/2.0);
                    double t74382 = c*c;
                    double t74383 = 1.0/pow(rho_b[index],2.0/3.0);
                    double t74384 = 1.0/c0p;
                    double t74385 = b1p*t74380;
                    double t74386 = b3p*t74381;
                    double t74387 = b4p*t74382*t74383;
                    double t74388 = b2p*c*t74378;
                    double t74389 = t74385+t74386+t74387+t74388;
                    double t74390 = 1.0/t74389;
                    double t74391 = t74390*t74384*(1.0/2.0);
                    double t74392 = t74391+1.0;
                    double t74393 = log(t74392);
                    double t74394 = a1p*c*t74378;
                    double t74395 = t74394+1.0;
                    double t74396 = gamma_bb[index]*gamma_bb[index];
                    double t74397 = gcaa*gcaa;
                    double t74398 = t74396*t74396;
                    double t74399 = t74397*t74397;
                    double t74400 = 1.0/pow(rho_b[index],3.2E1/3.0);
                    double t74401 = 1.0/pow(rho_b[index],8.0/3.0);
                    double t74402 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                       rho_b[index]*rho_b[index]);
                    double t74403 = 1.0/pow(rho_b[index],1.6E1/3.0);
                    double t74404 = tau_b[index]-1.0/1.0E20;
                    double t74405 = pow(2.0,1.0/3.0);
                    double t74406 = t74405*2.0;
                    double t74407 = t74406-2.0;
                    double t74408 = two_13*2.0;
                    double t74409 = t74408-2.0;
                    double t74410 = 1.0/t74409;
                    double t74411 = 1.0/c0f;
                    double t74412 = b1f*t74380;
                    double t74413 = b3f*t74381;
                    double t74414 = b4f*t74382*t74383;
                    double t74415 = b2f*c*t74378;
                    double t74416 = t74412+t74413+t74414+t74415;
                    double t74417 = 1.0/t74416;
                    double t74418 = t74411*t74417*(1.0/2.0);
                    double t74419 = t74418+1.0;
                    double t74420 = log(t74419);
                    double t74421 = a1f*c*t74378;
                    double t74422 = t74421+1.0;
                    double t74423 = c0f*t74420*t74422*2.0;
                    double t74424 = c0p*t74393*t74395*2.0;
                    double t74425 = gamma_bb[index]*gcaa*t74401*4.0;
                    double t74426 = gamma_bb[index]*gcaa*t74402*t74396*t74397*4.0;
                    double t74427 = t74403*t74396*t74397*6.0;
                    double t74428 = t74400*t74398*t74399;
                    double t74429 = t74425+t74426+t74427+t74428+1.0;
                    double t74430 = 1.0/t74429;
                    double t74431 = ccaa4*t74400*t74430*t74398*t74399;
                    double t74432 = gamma_bb[index]*gcaa*t74401;
                    double t74433 = t74432+1.0;
                    double t74434 = 1.0/t74433;
                    double t74435 = ccaa1*gamma_bb[index]*gcaa*t74401*t74434;
                    double t74436 = gamma_bb[index]*gcaa*t74401*3.0;
                    double t74437 = gamma_bb[index]*gcaa*t74402*t74396*t74397;
                    double t74438 = t74403*t74396*t74397*3.0;
                    double t74439 = t74436+t74437+t74438+1.0;
                    double t74440 = 1.0/t74439;
                    double t74441 = ccaa3*gamma_bb[index]*gcaa*t74402*t74440*t74396*t74397;
                    double t74442 = gamma_bb[index]*gcaa*t74401*2.0;
                    double t74443 = t74403*t74396*t74397;
                    double t74444 = t74442+t74443+1.0;
                    double t74445 = 1.0/t74444;
                    double t74446 = ccaa2*t74403*t74445*t74396*t74397;
                    double t74447 = ccaa0+t74431+t74441+t74435+t74446;
                    double t74448 = t74423-t74424;
                    double t74449 = t74410*t74407*t74448;
                    double t74450 = t74424+t74449;
                    double t74451 = ( (t74404 > 0.0) ?  1.0 : 0.0 ) ;
                    double t74452 = 1.0/tau_b[index];
                    double t74453 = 1.0/(tau_b[index]*tau_b[index]);
                    double t74454 = 0.0 ;
                    double t74455 = tau_b[index]*2.0;
                    double t74456 = 1.0/rho_b[index];
                    double t74457 = t74455-gamma_bb[index]*t74456*(1.0/4.0);
                    double t74458 = 1.0/(k*k);
                    double t74459 = rho_b[index]*2.0;
                    double t74460 = 1.0/pow(t74459,2.0/3.0);
                    double t74461 = pow(rho_b[index],5.0/3.0);
                    double t74462 = C_k*t74452*t74461;
                    double t74463 = t74462+1.0;
                    double t74464 = t74462-1.0;
                    double t74465 = 1.0/(t74463*t74463);
                    double t74466 = t74464*t74464;
                    double t74467 = t74466*t74466;
                    double t74468 = t74467*t74467;
                    double t74469 = 1.0/pow(t74463,1.1E1);
                    double t74470 = 1.0/(t74463*t74463*t74463);
                    double t74471 = 1.0/(t74463*t74463*t74463*t74463);
                    double t74472 = 1.0/(t74463*t74463*t74463*t74463*t74463);
                    double t74473 = 1.0/(t74463*t74463*t74463*t74463*t74463*t74463);
                    double t74474 = 1.0/(t74463*t74463*t74463*t74463*t74463*t74463*t74463);
                    double t74475 = 1.0/(t74463*t74463*t74463*t74463*t74463*t74463*t74463*t74463);
                    double t74476 = 1.0/(t74463*t74463*t74463*t74463*t74463*t74463*t74463*t74463*t74463);
                    double t74477 = 1.0/pow(t74463,1.0E1);
                    v_gamma_bb_tau_b_[index] = t74450*t74451*t74453*t74447*(-1.0/8.0)+t74452*t74454*t74447*(t74424+t74410* \
                       t74407*(t74423-c0p*t74393*t74395*2.0))*(1.0/8.0)-rho_b[index]*t74450*(t74454*(t74452*t74457*(1.0/2.0) \
                       -1.0)+t74451*(t74452-t74453*t74457*(1.0/2.0)))*(ccaa1*gcaa*t74401*t74434+ccaa2*gamma_bb[index]*t74403* \
                       t74445*t74397*2.0-ccaa1*gamma_bb[index]*t74403*1.0/(t74433*t74433)*t74397-ccaa2*t74403*1.0/(t74444* \
                       t74444)*t74396*t74397*(gcaa*t74401*2.0+gamma_bb[index]*t74403*t74397*2.0)-ccaa4*t74400*1.0/(t74429* \
                       t74429)*t74398*t74399*(gcaa*t74401*4.0+gamma_bb[index]*t74403*t74397*1.2E1+gamma_bb[index]*t74400* \
                       t74396*t74399*4.0+gcaa*t74402*t74396*t74397*1.2E1)+ccaa4*gamma_bb[index]*t74400*t74430*t74396*t74399* \
                       4.0+ccaa3*gcaa*t74402*t74440*t74396*t74397*3.0-ccaa3*gamma_bb[index]*gcaa*t74402*1.0/(t74439*t74439) \
                       *t74396*t74397*(gcaa*t74401*3.0+gamma_bb[index]*t74403*t74397*6.0+gcaa*t74402*t74396*t74397*3.0))+ \
                       mu_*t74460*t74456*t74458*1.0/pow((gamma_bb[index]*mu_*1.0/(rho_b[index]*rho_b[index])*t74460*t74458* \
                       (1.0/4.0))/kp+1.0,2.0)*(X-1.0)*((C_k*a_1*t74461*t74453)/t74463-C_k*a_1*t74461*t74453*t74464*t74465- \
                       C_k*a_2*t74461*t74470*t74453*t74466*2.0+C_k*a_2*t74461*t74453*t74464*t74465*2.0+C_k*a_3*t74461*t74470* \
                       t74453*t74466*3.0-C_k*a_4*t74461*t74453*t74472*t74467*4.0+C_k*a_5*t74461*t74453*t74472*t74467*5.0- \
                       C_k*a_8*t74461*t74453*t74476*t74468*8.0+C_k*a_9*t74461*t74453*t74476*t74468*9.0+C_k*a_10*t74461*t74453* \
                       t74464*t74468*t74477*1.0E1-C_k*a_10*t74461*t74453*t74466*t74468*t74469*1.0E1+C_k*a_11*t74461*t74453* \
                       t74466*t74468*t74469*1.1E1-C_k*a_3*t74461*t74453*t74471*t74464*t74466*3.0+C_k*a_4*t74461*t74453*t74471* \
                       t74464*t74466*4.0-C_k*a_5*t74461*t74453*t74464*t74473*t74467*5.0+C_k*a_6*t74461*t74453*t74464*t74473* \
                       t74467*6.0-C_k*a_6*t74461*t74453*t74474*t74466*t74467*6.0+C_k*a_7*t74461*t74453*t74474*t74466*t74467* \
                       7.0-C_k*a_9*t74461*t74453*t74464*t74468*t74477*9.0-C_k*a_11*t74461*t74453*1.0/pow(t74463,1.2E1)*t74464* \
                       t74466*t74468*1.1E1-C_k*a_7*t74461*t74453*t74464*t74466*t74475*t74467*7.0+C_k*a_8*t74461*t74453*t74464* \
                       t74466*t74475*t74467*8.0)*(1.0/4.0);
                } else {
                    v_gamma_bb_tau_b_[index] = 0.0;
                } 

            }
        }
    }
}

}}

