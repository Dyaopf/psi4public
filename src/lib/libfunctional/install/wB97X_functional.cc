/**********************************************************
* wB97X_functional.cc: definitions for wB97X_functional for KS-DFT
* Robert Parrish, robparrish@gmail.com
* Autogenerated by MATLAB Script on 07-Mar-2012
*
***********************************************************/
#include <libmints/mints.h>
#include <libfock/points.h>
#include "wB97X_functional.h"
#include <stdlib.h>
#include <cmath>
#include <string>
#include <string>
#include <vector>

using namespace psi;
using namespace boost;
using namespace std;

namespace psi { namespace functional {

wB97X_Functional::wB97X_Functional(int npoints, int deriv) : Functional(npoints, deriv)
{

    name_ = "wB97X";
    description_ = "wB97X Hybrid Range-Corrected Power Series GGA";
    citation_ = "J. Chai and M. Head-Gordon, J. Chem. Phys., 128, pp. 084106, 2008";

    double omega = 2.9999999999999999E-01;
    params_.push_back(make_pair("omega",omega));
    double c0 = -9.3052573634909974E-01;
    params_.push_back(make_pair("c0",c0));
    double two_13 = 1.2599210498948732E+00;
    params_.push_back(make_pair("two_13",two_13));
    double d2fz0 = 1.7099210000000000E+00;
    params_.push_back(make_pair("d2fz0",d2fz0));
    double c = 6.2035049089939986E-01;
    params_.push_back(make_pair("c",c));
    double Aa = 1.6886999999999999E-02;
    params_.push_back(make_pair("Aa",Aa));
    double a1a = 1.1125000000000000E-01;
    params_.push_back(make_pair("a1a",a1a));
    double b1a = 1.0356999999999999E+01;
    params_.push_back(make_pair("b1a",b1a));
    double b2a = 3.6231000000000000E+00;
    params_.push_back(make_pair("b2a",b2a));
    double b3a = 8.8026000000000004E-01;
    params_.push_back(make_pair("b3a",b3a));
    double b4a = 4.9670999999999998E-01;
    params_.push_back(make_pair("b4a",b4a));
    double c0p = 3.1091000000000001E-02;
    params_.push_back(make_pair("c0p",c0p));
    double a1p = 2.1370000000000000E-01;
    params_.push_back(make_pair("a1p",a1p));
    double b1p = 7.5956999999999999E+00;
    params_.push_back(make_pair("b1p",b1p));
    double b2p = 3.5876000000000001E+00;
    params_.push_back(make_pair("b2p",b2p));
    double b3p = 1.6382000000000001E+00;
    params_.push_back(make_pair("b3p",b3p));
    double b4p = 4.9293999999999999E-01;
    params_.push_back(make_pair("b4p",b4p));
    double c0f = 1.5545000000000000E-02;
    params_.push_back(make_pair("c0f",c0f));
    double a1f = 2.0548000000000000E-01;
    params_.push_back(make_pair("a1f",a1f));
    double b1f = 1.4118900000000000E+01;
    params_.push_back(make_pair("b1f",b1f));
    double b2f = 6.1977000000000002E+00;
    params_.push_back(make_pair("b2f",b2f));
    double b3f = 3.3662000000000001E+00;
    params_.push_back(make_pair("b3f",b3f));
    double b4f = 6.2517000000000000E-01;
    params_.push_back(make_pair("b4f",b4f));
    double gcab = 6.0000000000000001E-03;
    params_.push_back(make_pair("gcab",gcab));
    double gcaa = 2.0000000000000001E-01;
    params_.push_back(make_pair("gcaa",gcaa));
    double gx = 4.0000000000000001E-03;
    params_.push_back(make_pair("gx",gx));
    double ccab0 = 1.0000000000000000E+00;
    params_.push_back(make_pair("ccab0",ccab0));
    double ccab1 = 2.3703099999999999E+00;
    params_.push_back(make_pair("ccab1",ccab1));
    double ccab2 = -1.1399500000000000E+01;
    params_.push_back(make_pair("ccab2",ccab2));
    double ccab3 = 6.5840500000000004E+00;
    params_.push_back(make_pair("ccab3",ccab3));
    double ccab4 = -3.7813200000000000E+00;
    params_.push_back(make_pair("ccab4",ccab4));
    double ccaa0 = 1.0000000000000000E+00;
    params_.push_back(make_pair("ccaa0",ccaa0));
    double ccaa1 = -4.3387900000000004E+00;
    params_.push_back(make_pair("ccaa1",ccaa1));
    double ccaa2 = 1.8230799999999999E+01;
    params_.push_back(make_pair("ccaa2",ccaa2));
    double ccaa3 = -3.1742999999999999E+01;
    params_.push_back(make_pair("ccaa3",ccaa3));
    double ccaa4 = 1.7290099999999999E+01;
    params_.push_back(make_pair("ccaa4",ccaa4));
    double cx0 = 8.4229399999999999E-01;
    params_.push_back(make_pair("cx0",cx0));
    double cx1 = 7.2647899999999999E-01;
    params_.push_back(make_pair("cx1",cx1));
    double cx2 = 1.0476000000000001E+00;
    params_.push_back(make_pair("cx2",cx2));
    double cx3 = -5.7063499999999996E+00;
    params_.push_back(make_pair("cx3",cx3));
    double cx4 = 1.3279400000000001E+01;
    params_.push_back(make_pair("cx4",cx4));

    is_gga_ = true;
    is_meta_ = false;

    //Required allocateion
    allocate();
}
wB97X_Functional::~wB97X_Functional()
{
}
void wB97X_Functional::computeRKSFunctional(boost::shared_ptr<RKSFunctions> prop)
{
    int ntrue = prop->npoints();

    const double* restrict rho_a;
    const double* restrict gamma_aa;
    const double* restrict tau_a;

    rho_a = prop->property_value("RHO_A")->pointer();
    if (is_gga_) {
        gamma_aa = prop->property_value("GAMMA_AA")->pointer();
    }
    if (is_meta_) {
        tau_a = prop->property_value("TAU_A")->pointer();
    }

    double omega = params_[0].second;
    double c0 = params_[1].second;
    double two_13 = params_[2].second;
    double d2fz0 = params_[3].second;
    double c = params_[4].second;
    double Aa = params_[5].second;
    double a1a = params_[6].second;
    double b1a = params_[7].second;
    double b2a = params_[8].second;
    double b3a = params_[9].second;
    double b4a = params_[10].second;
    double c0p = params_[11].second;
    double a1p = params_[12].second;
    double b1p = params_[13].second;
    double b2p = params_[14].second;
    double b3p = params_[15].second;
    double b4p = params_[16].second;
    double c0f = params_[17].second;
    double a1f = params_[18].second;
    double b1f = params_[19].second;
    double b2f = params_[20].second;
    double b3f = params_[21].second;
    double b4f = params_[22].second;
    double gcab = params_[23].second;
    double gcaa = params_[24].second;
    double gx = params_[25].second;
    double ccab0 = params_[26].second;
    double ccab1 = params_[27].second;
    double ccab2 = params_[28].second;
    double ccab3 = params_[29].second;
    double ccab4 = params_[30].second;
    double ccaa0 = params_[31].second;
    double ccaa1 = params_[32].second;
    double ccaa2 = params_[33].second;
    double ccaa3 = params_[34].second;
    double ccaa4 = params_[35].second;
    double cx0 = params_[36].second;
    double cx1 = params_[37].second;
    double cx2 = params_[38].second;
    double cx3 = params_[39].second;
    double cx4 = params_[40].second;

    //Functional
    for (int index = 0; index < ntrue; index++) {

        //Functional Value
        if (rho_a[index] > cutoff_) {
            double t123693 = 1.0/pow(rho_a[index],1.0/3.0);
            double t123694 = c*t123693;
            double t123695 = sqrt(t123694);
            double t123696 = pow(t123694,3.0/2.0);
            double t123697 = c*c;
            double t123698 = 1.0/pow(rho_a[index],2.0/3.0);
            double t123699 = 1.0/c0p;
            double t123700 = b1p*t123695;
            double t123701 = b3p*t123696;
            double t123702 = b4p*t123697*t123698;
            double t123703 = b2p*c*t123693;
            double t123704 = t123700+t123701+t123702+t123703;
            double t123705 = 1.0/t123704;
            double t123706 = t123705*t123699*(1.0/2.0);
            double t123707 = t123706+1.0;
            double t123708 = log(t123707);
            double t123709 = a1p*c*t123693;
            double t123710 = t123709+1.0;
            double t123711 = rho_a[index]*2.0;
            double t123712 = 1.0/pow(t123711,1.0/3.0);
            double t123713 = c*t123712;
            double t123714 = gamma_aa[index]*gamma_aa[index];
            double t123715 = gcab*gcab;
            double t123716 = t123714*t123714;
            double t123717 = t123715*t123715;
            double t123718 = 1.0/pow(rho_a[index],3.2E1/3.0);
            double t123719 = 1.0/pow(rho_a[index],8.0/3.0);
            double t123720 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]);
            double t123721 = 1.0/pow(rho_a[index],1.6E1/3.0);
            double t123722 = pow(2.0,1.0/3.0);
            double t123723 = t123722*2.0;
            double t123724 = t123723-2.0;
            double t123725 = two_13*2.0;
            double t123726 = t123725-2.0;
            double t123727 = 1.0/t123726;
            double t123728 = 1.0/c0f;
            double t123729 = b1f*t123695;
            double t123730 = b3f*t123696;
            double t123731 = b4f*t123697*t123698;
            double t123732 = b2f*c*t123693;
            double t123733 = t123730+t123731+t123732+t123729;
            double t123734 = 1.0/t123733;
            double t123735 = t123734*t123728*(1.0/2.0);
            double t123736 = t123735+1.0;
            double t123737 = log(t123736);
            double t123738 = a1f*c*t123693;
            double t123739 = t123738+1.0;
            double t123740 = c0f*t123737*t123739*2.0;
            double t123741 = c0p*t123710*t123708*2.0;
            double t123742 = gcaa*gcaa;
            double t123743 = t123742*t123742;
            double t123744 = rho_a[index]*(8.334140006820045E15/1.40737488355328E14);
            double t123745 = 1.0/pow(t123744,1.0/3.0);
            double t123746 = 1.0/(omega*omega);
            double t123747 = pow(t123744,2.0/3.0);
            double t123748 = exp(-t123746*t123747);
            double t123749 = gx*gx;
            double t123750 = t123749*t123749;
            functional_[index] = (rho_a[index]*(t123741+t123724*t123727*(t123740-c0p*t123710*t123708*2.0))*2.0- \
               c0p*rho_a[index]*log((t123699*(1.0/2.0))/(b1p*sqrt(t123713)+b3p*pow(t123713,3.0/2.0)+b4p*1.0/pow(t123711,2.0/ \
               3.0)*t123697+b2p*c*t123712)+1.0)*(a1p*c*t123712+1.0)*4.0)*(ccab0+(ccab2*t123721*t123714*t123715)/(gamma_aa[index]* \
               gcab*t123719*2.0+t123721*t123714*t123715+1.0)+(ccab1*gamma_aa[index]*gcab*t123719)/(gamma_aa[index]* \
               gcab*t123719+1.0)+(ccab4*t123716*t123717*t123718)/(gamma_aa[index]*gcab*t123719*4.0+t123721*t123714* \
               t123715*6.0+t123716*t123717*t123718+gamma_aa[index]*gcab*t123720*t123714*t123715*4.0+1.0)+(ccab3*gamma_aa[index]* \
               gcab*t123720*t123714*t123715)/(gamma_aa[index]*gcab*t123719*3.0+t123721*t123714*t123715*3.0+gamma_aa[index]* \
               gcab*t123720*t123714*t123715+1.0))-rho_a[index]*(t123741+t123724*t123727*(t123740-t123741))*(ccaa0+ \
               (ccaa2*t123721*t123714*t123742)/(gamma_aa[index]*gcaa*t123719*2.0+t123721*t123714*t123742+1.0)+(ccaa1* \
               gamma_aa[index]*gcaa*t123719)/(gamma_aa[index]*gcaa*t123719+1.0)+(ccaa4*t123716*t123743*t123718)/(gamma_aa[index]* \
               gcaa*t123719*4.0+t123721*t123714*t123742*6.0+t123716*t123743*t123718+gamma_aa[index]*gcaa*t123720* \
               t123714*t123742*4.0+1.0)+(ccaa3*gamma_aa[index]*gcaa*t123720*t123714*t123742)/(gamma_aa[index]*gcaa* \
               t123719*3.0+t123721*t123714*t123742*3.0+gamma_aa[index]*gcaa*t123720*t123714*t123742+1.0))*2.0-c0* \
               pow(rho_a[index],4.0/3.0)*(omega*t123745*(erf(pow(t123744,1.0/3.0)/omega)*(3.991211251234741E15/2.251799813685248E15) \
               +omega*t123745*(t123748-(omega*omega)*1.0/pow(t123744,2.0/3.0)*(t123748-1.0)*(1.0/2.0)))*(4.0/3.0) \
               -1.0)*(cx0+(cx2*t123721*t123714*t123749)/(gamma_aa[index]*gx*t123719*2.0+t123721*t123714*t123749+1.0) \
               +(cx1*gamma_aa[index]*gx*t123719)/(gamma_aa[index]*gx*t123719+1.0)+(cx4*t123750*t123716*t123718)/(gamma_aa[index]* \
               gx*t123719*4.0+t123721*t123714*t123749*6.0+t123750*t123716*t123718+gamma_aa[index]*gx*t123720*t123714* \
               t123749*4.0+1.0)+(cx3*gamma_aa[index]*gx*t123720*t123714*t123749)/(gamma_aa[index]*gx*t123719*3.0+ \
               t123721*t123714*t123749*3.0+gamma_aa[index]*gx*t123720*t123714*t123749+1.0))*2.0;
        } else {
            functional_[index] = 0.0;
        } 

    }
    //First Partials
    for (int index = 0; index < ntrue && deriv_ >= 1; index++) {

        //V_rho_a
        if (rho_a[index] > cutoff_) {
            double t123752 = gamma_aa[index]*gamma_aa[index];
            double t123753 = gcab*gcab;
            double t123754 = t123752*t123752;
            double t123755 = t123753*t123753;
            double t123756 = 1.0/pow(rho_a[index],3.2E1/3.0);
            double t123757 = 1.0/pow(rho_a[index],8.0/3.0);
            double t123758 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]);
            double t123759 = 1.0/pow(rho_a[index],1.6E1/3.0);
            double t123760 = rho_a[index]*2.0;
            double t123761 = 1.0/pow(t123760,1.0/3.0);
            double t123762 = c*t123761;
            double t123763 = sqrt(t123762);
            double t123764 = b1p*t123763;
            double t123765 = pow(t123762,3.0/2.0);
            double t123766 = b3p*t123765;
            double t123767 = b2p*c*t123761;
            double t123768 = c*c;
            double t123769 = 1.0/pow(t123760,2.0/3.0);
            double t123770 = b4p*t123768*t123769;
            double t123771 = t123770+t123764+t123766+t123767;
            double t123772 = 1.0/pow(t123760,4.0/3.0);
            double t123773 = 1.0/c0p;
            double t123774 = 1.0/t123771;
            double t123775 = t123773*t123774*(1.0/2.0);
            double t123776 = t123775+1.0;
            double t123777 = 1.0/pow(rho_a[index],1.0/3.0);
            double t123778 = c*t123777;
            double t123779 = sqrt(t123778);
            double t123780 = b1f*t123779;
            double t123781 = pow(t123778,3.0/2.0);
            double t123782 = b3f*t123781;
            double t123783 = 1.0/pow(rho_a[index],2.0/3.0);
            double t123784 = b4f*t123783*t123768;
            double t123785 = b2f*c*t123777;
            double t123786 = t123780+t123782+t123784+t123785;
            double t123787 = 1.0/pow(rho_a[index],4.0/3.0);
            double t123788 = b1p*t123779;
            double t123789 = b3p*t123781;
            double t123790 = b4p*t123783*t123768;
            double t123791 = b2p*c*t123777;
            double t123792 = t123790+t123791+t123788+t123789;
            double t123793 = 1.0/pow(rho_a[index],5.0/3.0);
            double t123794 = 1.0/sqrt(t123778);
            double t123795 = 1.0/c0f;
            double t123796 = 1.0/t123786;
            double t123797 = t123795*t123796*(1.0/2.0);
            double t123798 = t123797+1.0;
            double t123799 = 1.0/t123792;
            double t123800 = t123773*t123799*(1.0/2.0);
            double t123801 = t123800+1.0;
            double t123802 = a1p*c*t123777;
            double t123803 = t123802+1.0;
            double t123804 = 1.0/t123801;
            double t123805 = 1.0/(t123792*t123792);
            double t123806 = b4p*t123793*t123768*(2.0/3.0);
            double t123807 = b2p*c*t123787*(1.0/3.0);
            double t123808 = b1p*c*t123794*t123787*(1.0/6.0);
            double t123809 = b3p*c*t123787*t123779*(1.0/2.0);
            double t123810 = t123806+t123807+t123808+t123809;
            double t123811 = t123810*t123803*t123804*t123805;
            double t123812 = log(t123801);
            double t123813 = log(t123776);
            double t123814 = a1p*c*t123761;
            double t123815 = t123814+1.0;
            double t123816 = pow(2.0,1.0/3.0);
            double t123817 = t123816*2.0;
            double t123818 = t123817-2.0;
            double t123819 = two_13*2.0;
            double t123820 = t123819-2.0;
            double t123821 = 1.0/t123820;
            double t123822 = log(t123798);
            double t123823 = a1f*c*t123777;
            double t123824 = t123823+1.0;
            double t123825 = c0f*t123822*t123824*2.0;
            double t123827 = c0p*t123803*t123812*2.0;
            double t123826 = t123825-t123827;
            double t123828 = gcaa*gcaa;
            double t123829 = t123828*t123828;
            double t123830 = t123821*t123826*t123818;
            double t123831 = t123830+t123827;
            double t123832 = gamma_aa[index]*gcab*t123757*4.0;
            double t123833 = gamma_aa[index]*gcab*t123752*t123753*t123758*4.0;
            double t123834 = t123752*t123753*t123759*6.0;
            double t123835 = t123754*t123755*t123756;
            double t123836 = t123832+t123833+t123834+t123835+1.0;
            double t123837 = 1.0/t123836;
            double t123838 = gamma_aa[index]*gcab*t123757;
            double t123839 = t123838+1.0;
            double t123840 = 1.0/t123839;
            double t123841 = gamma_aa[index]*gcab*t123757*3.0;
            double t123842 = gamma_aa[index]*gcab*t123752*t123753*t123758;
            double t123843 = t123752*t123753*t123759*3.0;
            double t123844 = t123841+t123842+t123843+1.0;
            double t123845 = 1.0/t123844;
            double t123846 = gamma_aa[index]*gcab*t123757*2.0;
            double t123847 = t123752*t123753*t123759;
            double t123848 = t123846+t123847+1.0;
            double t123849 = 1.0/t123848;
            double t123850 = 1.0/pow(rho_a[index],1.9E1/3.0);
            double t123851 = 1.0/pow(rho_a[index],1.1E1/3.0);
            double t123852 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]*rho_a[index]);
            double t123853 = 1.0/pow(rho_a[index],3.5E1/3.0);
            double t123854 = gamma_aa[index]*gcaa*t123757*4.0;
            double t123855 = gamma_aa[index]*gcaa*t123752*t123828*t123758*4.0;
            double t123856 = t123752*t123828*t123759*6.0;
            double t123857 = t123754*t123756*t123829;
            double t123858 = t123854+t123855+t123856+t123857+1.0;
            double t123859 = 1.0/t123858;
            double t123860 = gamma_aa[index]*gcaa*t123757;
            double t123861 = t123860+1.0;
            double t123862 = 1.0/t123861;
            double t123863 = gamma_aa[index]*gcaa*t123757*3.0;
            double t123864 = gamma_aa[index]*gcaa*t123752*t123828*t123758;
            double t123865 = t123752*t123828*t123759*3.0;
            double t123866 = t123863+t123864+t123865+1.0;
            double t123867 = 1.0/t123866;
            double t123868 = gamma_aa[index]*gcaa*t123757*2.0;
            double t123869 = t123752*t123828*t123759;
            double t123870 = t123868+t123869+1.0;
            double t123871 = 1.0/t123870;
            double t123872 = 1.0/t123798;
            double t123873 = 1.0/(t123786*t123786);
            double t123874 = b4f*t123793*t123768*(2.0/3.0);
            double t123875 = b2f*c*t123787*(1.0/3.0);
            double t123876 = b1f*c*t123794*t123787*(1.0/6.0);
            double t123877 = b3f*c*t123787*t123779*(1.0/2.0);
            double t123878 = t123874+t123875+t123876+t123877;
            double t123879 = a1f*c*c0f*t123822*t123787*(2.0/3.0);
            double t123880 = a1p*c*c0p*t123812*t123787*(2.0/3.0);
            double t123881 = ccaa4*t123754*t123756*t123829*t123859;
            double t123882 = ccaa1*gamma_aa[index]*gcaa*t123862*t123757;
            double t123883 = ccaa3*gamma_aa[index]*gcaa*t123752*t123828*t123758*t123867;
            double t123884 = ccaa2*t123752*t123871*t123828*t123759;
            double t123885 = ccaa0+t123881+t123882+t123883+t123884;
            double t123886 = rho_a[index]*(8.334140006820045E15/1.40737488355328E14);
            double t123887 = 1.0/(omega*omega);
            double t123888 = pow(t123886,2.0/3.0);
            double t123891 = t123887*t123888;
            double t123889 = exp(-t123891);
            double t123890 = 1.0/pow(t123886,1.0/3.0);
            double t123892 = omega*omega;
            double t123893 = t123889-1.0;
            double t123894 = 1.0/pow(t123886,2.0/3.0);
            double t123895 = 1.0/pow(t123886,4.0/3.0);
            double t123896 = 1.0/omega;
            double t123904 = t123892*t123893*t123894*(1.0/2.0);
            double t123897 = -t123904+t123889;
            double t123898 = gx*gx;
            double t123899 = t123898*t123898;
            double t123900 = pow(t123886,1.0/3.0);
            double t123901 = t123900*t123896;
            double t123902 = erf(t123901);
            double t123903 = t123902*(3.991211251234741E15/2.251799813685248E15);
            double t123905 = omega*t123890*t123897;
            double t123906 = t123903+t123905;
            double t123907 = gamma_aa[index]*gx*t123757*4.0;
            double t123908 = gamma_aa[index]*gx*t123752*t123758*t123898*4.0;
            double t123909 = t123752*t123759*t123898*6.0;
            double t123910 = t123754*t123756*t123899;
            double t123911 = t123910+t123907+t123908+t123909+1.0;
            double t123912 = 1.0/t123911;
            double t123913 = cx4*t123912*t123754*t123756*t123899;
            double t123914 = gamma_aa[index]*gx*t123757;
            double t123915 = t123914+1.0;
            double t123916 = 1.0/t123915;
            double t123917 = cx1*gamma_aa[index]*gx*t123916*t123757;
            double t123918 = gamma_aa[index]*gx*t123757*3.0;
            double t123919 = gamma_aa[index]*gx*t123752*t123758*t123898;
            double t123920 = t123752*t123759*t123898*3.0;
            double t123921 = t123920+t123918+t123919+1.0;
            double t123922 = 1.0/t123921;
            double t123923 = cx3*gamma_aa[index]*gx*t123922*t123752*t123758*t123898;
            double t123924 = gamma_aa[index]*gx*t123757*2.0;
            double t123925 = t123752*t123759*t123898;
            double t123926 = t123924+t123925+1.0;
            double t123927 = 1.0/t123926;
            double t123928 = cx2*t123752*t123927*t123759*t123898;
            double t123929 = cx0+t123913+t123923+t123917+t123928;
            double t123930 = pow(rho_a[index],4.0/3.0);
            double t123931 = omega*t123906*t123890*(4.0/3.0);
            double t123932 = t123931-1.0;
            v_rho_a_[index] = -(rho_a[index]*t123831*2.0-c0p*rho_a[index]*t123813*t123815*4.0)*(ccab1*gamma_aa[index]* \
               gcab*t123840*t123851*(4.0/3.0)+ccab2*t123850*t123752*t123753*t123849*(8.0/3.0)+ccab4*t123754*t123853* \
               t123755*t123837*(1.6E1/3.0)-ccab1*t123850*t123752*t123753*1.0/(t123839*t123839)*(4.0/3.0)-ccab2*t123752* \
               t123753*1.0/(t123848*t123848)*t123759*(gamma_aa[index]*gcab*t123851*(8.0/3.0)+t123850*t123752*t123753* \
               (8.0/3.0))-ccab4*t123754*t123755*1.0/(t123836*t123836)*t123756*(gamma_aa[index]*gcab*t123851*(1.6E1/ \
               3.0)+t123850*t123752*t123753*1.6E1+t123754*t123853*t123755*(1.6E1/3.0)+gamma_aa[index]*gcab*t123752* \
               t123753*t123852*1.6E1)+ccab3*gamma_aa[index]*gcab*t123752*t123753*t123852*t123845*4.0-ccab3*gamma_aa[index]* \
               gcab*t123752*t123753*1.0/(t123844*t123844)*t123758*(gamma_aa[index]*gcab*t123851*4.0+t123850*t123752* \
               t123753*8.0+gamma_aa[index]*gcab*t123752*t123753*t123852*4.0))-t123831*t123885-(rho_a[index]*((t123815* \
               1.0/(t123771*t123771)*(b4p*1.0/pow(t123760,5.0/3.0)*t123768*(2.0/3.0)+b2p*c*t123772*(1.0/3.0)+b3p* \
               c*t123763*t123772*(1.0/2.0)+b1p*c*1.0/sqrt(t123762)*t123772*(1.0/6.0)))/t123776-a1p*c*c0p*t123813* \
               t123772*(2.0/3.0))*2.0+rho_a[index]*(-t123811+t123880+t123821*t123818*(t123811+t123879-t123824*t123872* \
               t123873*t123878-a1p*c*c0p*t123812*t123787*(2.0/3.0)))-c0p*t123803*t123812*2.0+c0p*t123813*t123815* \
               2.0-t123821*t123826*t123818)*(ccab0+ccab1*gamma_aa[index]*gcab*t123840*t123757+ccab2*t123752*t123753* \
               t123759*t123849+ccab4*t123754*t123755*t123756*t123837+ccab3*gamma_aa[index]*gcab*t123752*t123753*t123845* \
               t123758)+rho_a[index]*t123831*(ccaa1*gamma_aa[index]*gcaa*t123851*t123862*(8.0/3.0)+ccaa2*t123850* \
               t123752*t123871*t123828*(1.6E1/3.0)+ccaa4*t123754*t123853*t123829*t123859*(3.2E1/3.0)-ccaa1*t123850* \
               t123752*1.0/(t123861*t123861)*t123828*(8.0/3.0)-ccaa2*t123752*1.0/(t123870*t123870)*t123828*t123759* \
               (gamma_aa[index]*gcaa*t123851*(1.6E1/3.0)+t123850*t123752*t123828*(1.6E1/3.0))-ccaa4*t123754*t123756* \
               t123829*1.0/(t123858*t123858)*(gamma_aa[index]*gcaa*t123851*(3.2E1/3.0)+t123850*t123752*t123828*3.2E1+ \
               t123754*t123853*t123829*(3.2E1/3.0)+gamma_aa[index]*gcaa*t123752*t123852*t123828*3.2E1)+ccaa3*gamma_aa[index]* \
               gcaa*t123752*t123852*t123828*t123867*8.0-ccaa3*gamma_aa[index]*gcaa*t123752*t123828*t123758*1.0/(t123866* \
               t123866)*(gamma_aa[index]*gcaa*t123851*8.0+t123850*t123752*t123828*1.6E1+gamma_aa[index]*gcaa*t123752* \
               t123852*t123828*8.0))+rho_a[index]*t123885*(-t123811+t123880+t123821*t123818*(t123811-t123880+t123879- \
               t123824*t123872*t123873*t123878))-c0*t123930*t123929*(omega*t123890*(omega*t123895*t123897*(-2.778046668940015E15/ \
               1.40737488355328E14)+omega*t123890*((t123889*(1.0/3.0))/rho_a[index]+t123892*t123893*1.0/pow(t123886,5.0/ \
               3.0)*(2.778046668940015E15/1.40737488355328E14)-t123890*t123887*t123889*(2.778046668940015E15/7.0368744177664E13) \
               )+1.0/sqrt(3.141592653589793)*t123894*t123896*t123889*(1.108777112152858E31/1.584563250285287E29)) \
               *(4.0/3.0)-omega*t123906*t123895*(2.778046668940015E15/1.05553116266496E14))-c0*pow(rho_a[index],1.0/ \
               3.0)*t123932*t123929*(4.0/3.0)+c0*t123930*t123932*(cx1*gamma_aa[index]*gx*t123851*t123916*(8.0/3.0) \
               +cx2*t123850*t123752*t123927*t123898*(1.6E1/3.0)+cx4*t123912*t123754*t123853*t123899*(3.2E1/3.0)-cx1* \
               t123850*t123752*1.0/(t123915*t123915)*t123898*(8.0/3.0)-cx2*t123752*1.0/(t123926*t123926)*t123759* \
               t123898*(gamma_aa[index]*gx*t123851*(1.6E1/3.0)+t123850*t123752*t123898*(1.6E1/3.0))-cx4*1.0/(t123911* \
               t123911)*t123754*t123756*t123899*(gamma_aa[index]*gx*t123851*(3.2E1/3.0)+t123850*t123752*t123898*3.2E1+ \
               t123754*t123853*t123899*(3.2E1/3.0)+gamma_aa[index]*gx*t123752*t123852*t123898*3.2E1)+cx3*gamma_aa[index]* \
               gx*t123922*t123752*t123852*t123898*8.0-cx3*gamma_aa[index]*gx*1.0/(t123921*t123921)*t123752*t123758* \
               t123898*(gamma_aa[index]*gx*t123851*8.0+t123850*t123752*t123898*1.6E1+gamma_aa[index]*gx*t123752*t123852* \
               t123898*8.0));
        } else {
            v_rho_a_[index] = 0.0;
        } 

        if (is_gga_) {

            if (rho_a[index] > cutoff_) {
                double t123934 = 1.0/pow(rho_a[index],1.0/3.0);
                double t123935 = c*t123934;
                double t123936 = sqrt(t123935);
                double t123937 = pow(t123935,3.0/2.0);
                double t123938 = c*c;
                double t123939 = 1.0/pow(rho_a[index],2.0/3.0);
                double t123940 = 1.0/c0p;
                double t123941 = b1p*t123936;
                double t123942 = b3p*t123937;
                double t123943 = b4p*t123938*t123939;
                double t123944 = b2p*c*t123934;
                double t123945 = t123941+t123942+t123943+t123944;
                double t123946 = 1.0/t123945;
                double t123947 = t123940*t123946*(1.0/2.0);
                double t123948 = t123947+1.0;
                double t123949 = log(t123948);
                double t123950 = a1p*c*t123934;
                double t123951 = t123950+1.0;
                double t123952 = rho_a[index]*2.0;
                double t123953 = 1.0/pow(t123952,1.0/3.0);
                double t123954 = c*t123953;
                double t123955 = 1.0/pow(rho_a[index],8.0/3.0);
                double t123956 = gamma_aa[index]*gamma_aa[index];
                double t123957 = gcab*gcab;
                double t123958 = t123957*t123957;
                double t123959 = 1.0/pow(rho_a[index],3.2E1/3.0);
                double t123960 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t123961 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t123962 = gamma_aa[index]*gcab*t123955;
                double t123963 = t123962+1.0;
                double t123964 = gamma_aa[index]*gcab*t123955*3.0;
                double t123965 = gamma_aa[index]*gcab*t123961*t123956*t123957;
                double t123966 = t123960*t123956*t123957*3.0;
                double t123967 = t123964+t123965+t123966+1.0;
                double t123968 = t123956*t123956;
                double t123969 = gamma_aa[index]*gcab*t123955*4.0;
                double t123970 = gamma_aa[index]*gcab*t123961*t123956*t123957*4.0;
                double t123971 = t123960*t123956*t123957*6.0;
                double t123972 = t123958*t123959*t123968;
                double t123973 = t123970+t123971+t123972+t123969+1.0;
                double t123974 = gamma_aa[index]*gcab*t123955*2.0;
                double t123975 = t123960*t123956*t123957;
                double t123976 = t123974+t123975+1.0;
                double t123977 = pow(2.0,1.0/3.0);
                double t123978 = t123977*2.0;
                double t123979 = t123978-2.0;
                double t123980 = two_13*2.0;
                double t123981 = t123980-2.0;
                double t123982 = 1.0/t123981;
                double t123983 = 1.0/c0f;
                double t123984 = b1f*t123936;
                double t123985 = b3f*t123937;
                double t123986 = b4f*t123938*t123939;
                double t123987 = b2f*c*t123934;
                double t123988 = t123984+t123985+t123986+t123987;
                double t123989 = 1.0/t123988;
                double t123990 = t123983*t123989*(1.0/2.0);
                double t123991 = t123990+1.0;
                double t123992 = log(t123991);
                double t123993 = a1f*c*t123934;
                double t123994 = t123993+1.0;
                double t123995 = c0f*t123992*t123994*2.0;
                double t123996 = c0p*t123951*t123949*2.0;
                double t123997 = gcaa*gcaa;
                double t123998 = t123997*t123997;
                double t123999 = gamma_aa[index]*gcaa*t123955;
                double t124000 = t123999+1.0;
                double t124001 = gamma_aa[index]*gcaa*t123955*3.0;
                double t124002 = gamma_aa[index]*gcaa*t123961*t123956*t123997;
                double t124003 = t123960*t123956*t123997*3.0;
                double t124004 = t124001+t124002+t124003+1.0;
                double t124005 = gamma_aa[index]*gcaa*t123955*4.0;
                double t124006 = gamma_aa[index]*gcaa*t123961*t123956*t123997*4.0;
                double t124007 = t123960*t123956*t123997*6.0;
                double t124008 = t123959*t123968*t123998;
                double t124009 = t124005+t124006+t124007+t124008+1.0;
                double t124010 = gamma_aa[index]*gcaa*t123955*2.0;
                double t124011 = t123960*t123956*t123997;
                double t124012 = t124010+t124011+1.0;
                double t124013 = rho_a[index]*(8.334140006820045E15/1.40737488355328E14);
                double t124014 = 1.0/pow(t124013,1.0/3.0);
                double t124015 = 1.0/(omega*omega);
                double t124016 = pow(t124013,2.0/3.0);
                double t124017 = exp(-t124015*t124016);
                double t124018 = gx*gx;
                double t124019 = t124018*t124018;
                double t124020 = gamma_aa[index]*gx*t123955;
                double t124021 = t124020+1.0;
                double t124022 = gamma_aa[index]*gx*t123955*3.0;
                double t124023 = gamma_aa[index]*gx*t124018*t123961*t123956;
                double t124024 = t124018*t123960*t123956*3.0;
                double t124025 = t124022+t124023+t124024+1.0;
                double t124026 = gamma_aa[index]*gx*t123955*4.0;
                double t124027 = gamma_aa[index]*gx*t124018*t123961*t123956*4.0;
                double t124028 = t124018*t123960*t123956*6.0;
                double t124029 = t124019*t123959*t123968;
                double t124030 = t124026+t124027+t124028+t124029+1.0;
                double t124031 = gamma_aa[index]*gx*t123955*2.0;
                double t124032 = t124018*t123960*t123956;
                double t124033 = t124031+t124032+1.0;
                v_gamma_aa_[index] = (rho_a[index]*(t123996+t123982*t123979*(t123995-c0p*t123951*t123949*2.0))*2.0- \
                   c0p*rho_a[index]*log((t123940*(1.0/2.0))/(b1p*sqrt(t123954)+b3p*pow(t123954,3.0/2.0)+b4p*1.0/pow(t123952,2.0/ \
                   3.0)*t123938+b2p*c*t123953)+1.0)*(a1p*c*t123953+1.0)*4.0)*((ccab1*gcab*t123955*(1.0/2.0))/t123963- \
                   ccab1*gamma_aa[index]*t123960*1.0/(t123963*t123963)*t123957*(1.0/2.0)+(ccab2*gamma_aa[index]*t123960* \
                   t123957)/t123976-ccab2*t123960*t123956*t123957*1.0/(t123976*t123976)*(gcab*t123955+gamma_aa[index]* \
                   t123960*t123957)+(ccab4*gamma_aa[index]*t123956*t123958*t123959*2.0)/t123973+(ccab3*gcab*t123961*t123956* \
                   t123957*(3.0/2.0))/t123967-ccab4*1.0/(t123973*t123973)*t123958*t123959*t123968*(gcab*t123955*2.0+gamma_aa[index]* \
                   t123960*t123957*6.0+gamma_aa[index]*t123956*t123958*t123959*2.0+gcab*t123961*t123956*t123957*6.0)- \
                   ccab3*gamma_aa[index]*gcab*t123961*t123956*t123957*1.0/(t123967*t123967)*(gcab*t123955*(3.0/2.0)+gamma_aa[index]* \
                   t123960*t123957*3.0+gcab*t123961*t123956*t123957*(3.0/2.0)))*2.0-rho_a[index]*(t123996+t123982*t123979* \
                   (t123995-t123996))*((ccaa1*gcaa*t123955)/t124000-ccaa1*gamma_aa[index]*1.0/(t124000*t124000)*t123960* \
                   t123997+(ccaa2*gamma_aa[index]*t123960*t123997*2.0)/t124012-ccaa2*1.0/(t124012*t124012)*t123960*t123956* \
                   t123997*(gcaa*t123955*2.0+gamma_aa[index]*t123960*t123997*2.0)+(ccaa4*gamma_aa[index]*t123956*t123959* \
                   t123998*4.0)/t124009+(ccaa3*gcaa*t123961*t123956*t123997*3.0)/t124004-ccaa4*1.0/(t124009*t124009)* \
                   t123959*t123968*t123998*(gcaa*t123955*4.0+gamma_aa[index]*t123960*t123997*1.2E1+gamma_aa[index]*t123956* \
                   t123959*t123998*4.0+gcaa*t123961*t123956*t123997*1.2E1)-ccaa3*gamma_aa[index]*gcaa*1.0/(t124004*t124004) \
                   *t123961*t123956*t123997*(gcaa*t123955*3.0+gamma_aa[index]*t123960*t123997*6.0+gcaa*t123961*t123956* \
                   t123997*3.0))*2.0-c0*pow(rho_a[index],4.0/3.0)*(omega*t124014*(erf(pow(t124013,1.0/3.0)/omega)*(3.991211251234741E15/ \
                   2.251799813685248E15)+omega*t124014*(t124017-(omega*omega)*1.0/pow(t124013,2.0/3.0)*(t124017-1.0)* \
                   (1.0/2.0)))*(4.0/3.0)-1.0)*((cx1*gx*t123955)/t124021-cx1*gamma_aa[index]*1.0/(t124021*t124021)*t124018* \
                   t123960+(cx2*gamma_aa[index]*t124018*t123960*2.0)/t124033-cx2*1.0/(t124033*t124033)*t124018*t123960* \
                   t123956*(gx*t123955*2.0+gamma_aa[index]*t124018*t123960*2.0)+(cx4*gamma_aa[index]*t124019*t123956* \
                   t123959*4.0)/t124030+(cx3*gx*t124018*t123961*t123956*3.0)/t124025-cx4*1.0/(t124030*t124030)*t124019* \
                   t123959*t123968*(gx*t123955*4.0+gamma_aa[index]*t124018*t123960*1.2E1+gamma_aa[index]*t124019*t123956* \
                   t123959*4.0+gx*t124018*t123961*t123956*1.2E1)-cx3*gamma_aa[index]*gx*1.0/(t124025*t124025)*t124018* \
                   t123961*t123956*(gx*t123955*3.0+gamma_aa[index]*t124018*t123960*6.0+gx*t124018*t123961*t123956*3.0) \
                   )*2.0;
            } else {
                v_gamma_aa_[index] = 0.0;
            } 

        }
        if (is_meta_) {

            //V_tau_a
            if (rho_a[index] > cutoff_) {
                v_tau_a_[index] = 0.0;
            } else {
                v_tau_a_[index] = 0.0;
            } 

        }
    }
    //Second Partials
    for (int index = 0; index < ntrue && deriv_ >= 2; index++) {

        //V_rho_a_rho_a
        if (rho_a[index] > cutoff_) {
            double t124036 = rho_a[index]*2.0;
            double t124037 = 1.0/pow(t124036,1.0/3.0);
            double t124038 = c*t124037;
            double t124039 = sqrt(t124038);
            double t124040 = b1p*t124039;
            double t124041 = pow(t124038,3.0/2.0);
            double t124042 = b3p*t124041;
            double t124043 = b2p*c*t124037;
            double t124044 = c*c;
            double t124045 = 1.0/pow(t124036,2.0/3.0);
            double t124046 = b4p*t124044*t124045;
            double t124047 = t124040+t124042+t124043+t124046;
            double t124048 = 1.0/pow(t124036,8.0/3.0);
            double t124049 = 1.0/pow(t124036,7.0/3.0);
            double t124050 = 1.0/sqrt(t124038);
            double t124051 = 1.0/c0p;
            double t124052 = 1.0/t124047;
            double t124053 = t124051*t124052*(1.0/2.0);
            double t124054 = t124053+1.0;
            double t124055 = 1.0/t124054;
            double t124056 = a1p*c*t124037;
            double t124057 = t124056+1.0;
            double t124058 = 1.0/pow(t124036,4.0/3.0);
            double t124060 = b2p*c*t124058*(1.0/3.0);
            double t124061 = 1.0/pow(t124036,5.0/3.0);
            double t124062 = b4p*t124061*t124044*(2.0/3.0);
            double t124063 = b1p*c*t124050*t124058*(1.0/6.0);
            double t124064 = b3p*c*t124039*t124058*(1.0/2.0);
            double t124059 = t124060+t124062+t124063+t124064;
            double t124065 = t124059*t124059;
            double t124066 = 1.0/(t124047*t124047);
            double t124067 = log(t124054);
            double t124068 = gamma_aa[index]*gamma_aa[index];
            double t124069 = gcab*gcab;
            double t124070 = t124068*t124068;
            double t124071 = t124069*t124069;
            double t124072 = 1.0/pow(rho_a[index],3.2E1/3.0);
            double t124073 = 1.0/pow(rho_a[index],8.0/3.0);
            double t124074 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]);
            double t124075 = 1.0/pow(rho_a[index],1.6E1/3.0);
            double t124076 = two_13*2.0;
            double t124077 = t124076-2.0;
            double t124078 = 1.0/t124077;
            double t124079 = 1.0/pow(rho_a[index],1.0/3.0);
            double t124080 = c*t124079;
            double t124081 = sqrt(t124080);
            double t124082 = pow(t124080,3.0/2.0);
            double t124083 = 1.0/pow(rho_a[index],2.0/3.0);
            double t124084 = b1p*t124081;
            double t124085 = b3p*t124082;
            double t124086 = b4p*t124044*t124083;
            double t124087 = b2p*c*t124079;
            double t124088 = t124084+t124085+t124086+t124087;
            double t124089 = 1.0/t124088;
            double t124090 = t124051*t124089*(1.0/2.0);
            double t124091 = t124090+1.0;
            double t124092 = log(t124091);
            double t124093 = a1p*c*t124079;
            double t124094 = t124093+1.0;
            double t124095 = gamma_aa[index]*gcab*t124073*4.0;
            double t124096 = gamma_aa[index]*gcab*t124074*t124068*t124069*4.0;
            double t124097 = t124075*t124068*t124069*6.0;
            double t124098 = t124070*t124071*t124072;
            double t124099 = t124095+t124096+t124097+t124098+1.0;
            double t124100 = 1.0/t124099;
            double t124101 = gamma_aa[index]*gcab*t124073;
            double t124102 = t124101+1.0;
            double t124103 = 1.0/t124102;
            double t124104 = gamma_aa[index]*gcab*t124073*3.0;
            double t124105 = gamma_aa[index]*gcab*t124074*t124068*t124069;
            double t124106 = t124075*t124068*t124069*3.0;
            double t124107 = t124104+t124105+t124106+1.0;
            double t124108 = 1.0/t124107;
            double t124109 = gamma_aa[index]*gcab*t124073*2.0;
            double t124110 = t124075*t124068*t124069;
            double t124111 = t124110+t124109+1.0;
            double t124112 = 1.0/t124111;
            double t124113 = 1.0/pow(rho_a[index],1.0E1);
            double t124114 = 1.0/pow(rho_a[index],2.2E1/3.0);
            double t124116 = 1.0/pow(rho_a[index],1.1E1/3.0);
            double t124117 = 1.0/pow(rho_a[index],1.9E1/3.0);
            double t124119 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]*rho_a[index]);
            double t124126 = 1.0/pow(rho_a[index],3.5E1/3.0);
            double t124127 = gamma_aa[index]*gcab*t124116*(1.6E1/3.0);
            double t124128 = gamma_aa[index]*gcab*t124119*t124068*t124069*1.6E1;
            double t124129 = t124117*t124068*t124069*1.6E1;
            double t124130 = t124070*t124071*t124126*(1.6E1/3.0);
            double t124115 = t124130+t124127+t124128+t124129;
            double t124133 = gamma_aa[index]*gcab*t124116*(8.0/3.0);
            double t124134 = t124117*t124068*t124069*(8.0/3.0);
            double t124118 = t124133+t124134;
            double t124120 = 1.0/pow(rho_a[index],1.4E1/3.0);
            double t124121 = 1.0/(t124107*t124107);
            double t124122 = gamma_aa[index]*gcab*t124116*4.0;
            double t124123 = gamma_aa[index]*gcab*t124119*t124068*t124069*4.0;
            double t124124 = t124117*t124068*t124069*8.0;
            double t124125 = t124122+t124123+t124124;
            double t124131 = 1.0/pow(rho_a[index],3.8E1/3.0);
            double t124132 = 1.0/(t124099*t124099);
            double t124135 = 1.0/(t124111*t124111);
            double t124136 = pow(2.0,1.0/3.0);
            double t124137 = t124136*2.0;
            double t124138 = t124137-2.0;
            double t124139 = a1f*c*t124079;
            double t124140 = t124139+1.0;
            double t124141 = 1.0/c0f;
            double t124142 = b1f*t124081;
            double t124143 = b3f*t124082;
            double t124144 = b4f*t124044*t124083;
            double t124145 = b2f*c*t124079;
            double t124146 = t124142+t124143+t124144+t124145;
            double t124147 = 1.0/t124146;
            double t124148 = t124141*t124147*(1.0/2.0);
            double t124149 = t124148+1.0;
            double t124150 = 1.0/pow(rho_a[index],4.0/3.0);
            double t124151 = 1.0/pow(rho_a[index],5.0/3.0);
            double t124152 = 1.0/sqrt(t124080);
            double t124153 = log(t124149);
            double t124154 = 1.0/t124091;
            double t124155 = 1.0/(t124088*t124088);
            double t124156 = b4p*t124151*t124044*(2.0/3.0);
            double t124157 = b2p*c*t124150*(1.0/3.0);
            double t124158 = b1p*c*t124150*t124152*(1.0/6.0);
            double t124159 = b3p*c*t124150*t124081*(1.0/2.0);
            double t124160 = t124156+t124157+t124158+t124159;
            double t124161 = t124160*t124154*t124155*t124094;
            double t124162 = gcaa*gcaa;
            double t124163 = t124162*t124162;
            double t124164 = 1.0/t124149;
            double t124165 = 1.0/(t124146*t124146);
            double t124166 = b4f*t124151*t124044*(2.0/3.0);
            double t124167 = b2f*c*t124150*(1.0/3.0);
            double t124168 = b1f*c*t124150*t124152*(1.0/6.0);
            double t124169 = b3f*c*t124150*t124081*(1.0/2.0);
            double t124170 = t124166+t124167+t124168+t124169;
            double t124171 = a1f*c*c0f*t124150*t124153*(2.0/3.0);
            double t124172 = a1p*c*c0p*t124150*t124092*(2.0/3.0);
            double t124173 = c0f*t124140*t124153*2.0;
            double t124174 = c0p*t124092*t124094*2.0;
            double t124175 = 1.0/(t124102*t124102);
            double t124176 = ccab4*t124100*t124070*t124071*t124072;
            double t124177 = ccab1*gamma_aa[index]*gcab*t124103*t124073;
            double t124178 = ccab3*gamma_aa[index]*gcab*t124108*t124074*t124068*t124069;
            double t124179 = ccab2*t124112*t124075*t124068*t124069;
            double t124180 = ccab0+t124176+t124177+t124178+t124179;
            double t124181 = b2p*c*t124049*(4.0/9.0);
            double t124182 = b4p*t124044*t124048*(1.0E1/9.0);
            double t124183 = 1.0/pow(t124038,3.0/2.0);
            double t124184 = b3p*t124050*t124044*t124048*(1.0/1.2E1);
            double t124185 = b1p*c*t124050*t124049*(2.0/9.0);
            double t124186 = b3p*c*t124039*t124049*(2.0/3.0);
            double t124187 = t124181+t124182+t124184+t124185+t124186-b1p*t124044*t124048*t124183*(1.0/3.6E1);
            double t124188 = t124055*t124057*t124066*t124187;
            double t124189 = 1.0/(t124047*t124047*t124047);
            double t124190 = 1.0/(t124054*t124054);
            double t124191 = 1.0/(t124047*t124047*t124047*t124047);
            double t124192 = t124051*t124190*t124065*t124191*t124057*(1.0/2.0);
            double t124193 = 1.0/d2fz0;
            double t124194 = 1.0/(rho_a[index]*rho_a[index]);
            double t124195 = 1.0/Aa;
            double t124196 = b1a*t124039;
            double t124197 = b3a*t124041;
            double t124198 = b2a*c*t124037;
            double t124199 = b4a*t124044*t124045;
            double t124200 = t124196+t124197+t124198+t124199;
            double t124201 = 1.0/t124200;
            double t124202 = t124201*t124195*(1.0/2.0);
            double t124203 = t124202+1.0;
            double t124204 = log(t124203);
            double t124205 = a1a*c*t124037;
            double t124206 = t124205+1.0;
            double t124207 = a1p*c*t124055*t124066*t124058*t124059*(2.0/3.0);
            double t124208 = 1.0/pow(rho_a[index],7.0/3.0);
            double t124209 = 1.0/pow(t124080,3.0/2.0);
            double t124210 = t124170*t124170;
            double t124211 = t124160*t124160;
            double t124212 = 1.0/(t124088*t124088*t124088);
            double t124213 = t124211*t124212*t124154*t124094*2.0;
            double t124214 = b4p*t124044*t124073*(1.0E1/9.0);
            double t124215 = b2p*c*t124208*(4.0/9.0);
            double t124216 = b3p*t124044*t124152*t124073*(1.0/1.2E1);
            double t124217 = b1p*c*t124152*t124208*(2.0/9.0);
            double t124218 = b3p*c*t124081*t124208*(2.0/3.0);
            double t124294 = b1p*t124044*t124073*t124209*(1.0/3.6E1);
            double t124219 = t124214+t124215+t124216+t124217+t124218-t124294;
            double t124220 = 1.0/(t124091*t124091);
            double t124221 = 1.0/(t124088*t124088*t124088*t124088);
            double t124222 = a1p*c*c0p*t124208*t124092*(8.0/9.0);
            double t124257 = t124140*t124170*t124164*t124165;
            double t124223 = t124161+t124171-t124172-t124257;
            double t124224 = a1p*c*c0p*t124058*t124067*(4.0/3.0);
            double t124225 = t124173-t124174;
            double t124226 = gamma_aa[index]*gcaa*t124073*4.0;
            double t124227 = gamma_aa[index]*gcaa*t124162*t124074*t124068*4.0;
            double t124228 = t124162*t124075*t124068*6.0;
            double t124229 = t124070*t124072*t124163;
            double t124230 = t124226+t124227+t124228+t124229+1.0;
            double t124231 = 1.0/t124230;
            double t124232 = gamma_aa[index]*gcaa*t124073;
            double t124233 = t124232+1.0;
            double t124234 = 1.0/t124233;
            double t124235 = gamma_aa[index]*gcaa*t124073*3.0;
            double t124236 = gamma_aa[index]*gcaa*t124162*t124074*t124068;
            double t124237 = t124162*t124075*t124068*3.0;
            double t124238 = t124235+t124236+t124237+1.0;
            double t124239 = 1.0/t124238;
            double t124240 = gamma_aa[index]*gcaa*t124073*2.0;
            double t124241 = t124162*t124075*t124068;
            double t124242 = t124240+t124241+1.0;
            double t124243 = 1.0/t124242;
            double t124244 = t124225*t124138*t124078;
            double t124245 = t124244+t124174;
            double t124246 = 1.0/(t124102*t124102*t124102);
            double t124247 = ccab1*gamma_aa[index]*gcab*t124113*t124246*t124068*t124069*(3.2E1/9.0);
            double t124248 = t124115*t124115;
            double t124249 = 1.0/(t124099*t124099*t124099);
            double t124250 = ccab4*t124070*t124071*t124072*t124248*t124249*2.0;
            double t124251 = t124118*t124118;
            double t124252 = 1.0/(t124111*t124111*t124111);
            double t124253 = ccab2*t124251*t124252*t124075*t124068*t124069*2.0;
            double t124254 = t124125*t124125;
            double t124255 = 1.0/(t124107*t124107*t124107);
            double t124256 = ccab3*gamma_aa[index]*gcab*t124074*t124254*t124255*t124068*t124069*2.0;
            double t124258 = t124223*t124138*t124078;
            double t124259 = ccaa4*t124231*t124070*t124126*t124163*(3.2E1/3.0);
            double t124260 = ccaa1*gamma_aa[index]*gcaa*t124116*t124234*(8.0/3.0);
            double t124261 = ccaa3*gamma_aa[index]*gcaa*t124162*t124119*t124068*t124239*8.0;
            double t124262 = ccaa2*t124117*t124162*t124243*t124068*(1.6E1/3.0);
            double t124263 = 1.0/(t124233*t124233);
            double t124264 = gamma_aa[index]*gcaa*t124116*8.0;
            double t124265 = gamma_aa[index]*gcaa*t124162*t124119*t124068*8.0;
            double t124266 = t124117*t124162*t124068*1.6E1;
            double t124267 = t124264+t124265+t124266;
            double t124268 = 1.0/(t124238*t124238);
            double t124269 = gamma_aa[index]*gcaa*t124116*(3.2E1/3.0);
            double t124270 = gamma_aa[index]*gcaa*t124162*t124119*t124068*3.2E1;
            double t124271 = t124117*t124162*t124068*3.2E1;
            double t124272 = t124070*t124126*t124163*(3.2E1/3.0);
            double t124273 = t124270+t124271+t124272+t124269;
            double t124274 = 1.0/(t124230*t124230);
            double t124275 = gamma_aa[index]*gcaa*t124116*(1.6E1/3.0);
            double t124276 = t124117*t124162*t124068*(1.6E1/3.0);
            double t124277 = t124275+t124276;
            double t124278 = 1.0/(t124242*t124242);
            double t124279 = t124260+t124261+t124262+t124259-ccaa1*t124117*t124162*t124263*t124068*(8.0/3.0)- \
               ccaa4*t124070*t124072*t124163*t124273*t124274-ccaa2*t124162*t124075*t124068*t124277*t124278-ccaa3* \
               gamma_aa[index]*gcaa*t124162*t124074*t124068*t124267*t124268;
            double t124280 = -t124161+t124172+t124258;
            double t124281 = ccaa4*t124231*t124070*t124072*t124163;
            double t124282 = ccaa1*gamma_aa[index]*gcaa*t124234*t124073;
            double t124283 = ccaa3*gamma_aa[index]*gcaa*t124162*t124074*t124068*t124239;
            double t124284 = ccaa2*t124162*t124243*t124075*t124068;
            double t124285 = ccaa0+t124281+t124282+t124283+t124284;
            double t124286 = 1.0/(t124146*t124146*t124146);
            double t124287 = b4f*t124044*t124073*(1.0E1/9.0);
            double t124288 = b2f*c*t124208*(4.0/9.0);
            double t124289 = b3f*t124044*t124152*t124073*(1.0/1.2E1);
            double t124290 = b1f*c*t124152*t124208*(2.0/9.0);
            double t124291 = b3f*c*t124081*t124208*(2.0/3.0);
            double t124292 = t124290+t124291+t124287+t124288+t124289-b1f*t124044*t124073*t124209*(1.0/3.6E1);
            double t124293 = t124140*t124164*t124165*t124292;
            double t124295 = t124154*t124155*t124219*t124094;
            double t124296 = 1.0/(t124149*t124149);
            double t124297 = 1.0/(t124146*t124146*t124146*t124146);
            double t124298 = t124210*t124140*t124141*t124296*t124297*(1.0/2.0);
            double t124299 = t124211*t124220*t124221*t124051*t124094*(1.0/2.0);
            double t124300 = a1f*c*t124150*t124170*t124164*t124165*(2.0/3.0);
            double t124301 = a1p*c*t124150*t124160*t124154*t124155*(2.0/3.0);
            double t124302 = rho_a[index]*(8.334140006820045E15/1.40737488355328E14);
            double t124303 = 1.0/(omega*omega);
            double t124304 = pow(t124302,2.0/3.0);
            double t124307 = t124303*t124304;
            double t124305 = exp(-t124307);
            double t124306 = 1.0/pow(t124302,1.0/3.0);
            double t124308 = 1.0/pow(t124302,2.0/3.0);
            double t124309 = omega*omega;
            double t124310 = t124305-1.0;
            double t124311 = 1.0/pow(t124302,4.0/3.0);
            double t124312 = 1.0/rho_a[index];
            double t124313 = 1.0/pow(t124302,5.0/3.0);
            double t124314 = 1.0/sqrt(3.141592653589793);
            double t124321 = t124310*t124308*t124309*(1.0/2.0);
            double t124315 = -t124321+t124305;
            double t124316 = t124312*t124305*(1.0/3.0);
            double t124317 = t124310*t124313*t124309*(2.778046668940015E15/1.40737488355328E14);
            double t124364 = t124303*t124305*t124306*(2.778046668940015E15/7.0368744177664E13);
            double t124318 = t124316+t124317-t124364;
            double t124319 = 1.0/omega;
            double t124320 = 1.0/pow(t124302,7.0/3.0);
            double t124322 = gx*gx;
            double t124323 = t124322*t124322;
            double t124324 = pow(rho_a[index],4.0/3.0);
            double t124325 = pow(t124302,1.0/3.0);
            double t124326 = t124325*t124319;
            double t124327 = erf(t124326);
            double t124328 = t124327*(3.991211251234741E15/2.251799813685248E15);
            double t124329 = omega*t124306*t124315;
            double t124330 = t124328+t124329;
            double t124331 = gamma_aa[index]*gx*t124073*4.0;
            double t124332 = gamma_aa[index]*gx*t124322*t124074*t124068*4.0;
            double t124333 = t124322*t124075*t124068*6.0;
            double t124334 = t124070*t124323*t124072;
            double t124335 = t124331+t124332+t124333+t124334+1.0;
            double t124336 = 1.0/t124335;
            double t124337 = gamma_aa[index]*gx*t124073;
            double t124338 = t124337+1.0;
            double t124339 = 1.0/t124338;
            double t124340 = gamma_aa[index]*gx*t124073*3.0;
            double t124341 = gamma_aa[index]*gx*t124322*t124074*t124068;
            double t124342 = t124322*t124075*t124068*3.0;
            double t124343 = t124340+t124341+t124342+1.0;
            double t124344 = 1.0/t124343;
            double t124345 = gamma_aa[index]*gx*t124073*2.0;
            double t124346 = t124322*t124075*t124068;
            double t124347 = t124345+t124346+1.0;
            double t124348 = 1.0/t124347;
            double t124356 = gamma_aa[index]*gx*t124116*(3.2E1/3.0);
            double t124357 = gamma_aa[index]*gx*t124322*t124119*t124068*3.2E1;
            double t124358 = t124322*t124117*t124068*3.2E1;
            double t124359 = t124070*t124323*t124126*(3.2E1/3.0);
            double t124349 = t124356+t124357+t124358+t124359;
            double t124361 = gamma_aa[index]*gx*t124116*(1.6E1/3.0);
            double t124362 = t124322*t124117*t124068*(1.6E1/3.0);
            double t124350 = t124361+t124362;
            double t124351 = 1.0/(t124343*t124343);
            double t124352 = gamma_aa[index]*gx*t124116*8.0;
            double t124353 = gamma_aa[index]*gx*t124322*t124119*t124068*8.0;
            double t124354 = t124322*t124117*t124068*1.6E1;
            double t124355 = t124352+t124353+t124354;
            double t124360 = 1.0/(t124335*t124335);
            double t124363 = 1.0/(t124347*t124347);
            double t124365 = omega*t124306*t124318;
            double t124366 = t124305*t124314*t124308*t124319*(1.108777112152858E31/1.584563250285287E29);
            double t124375 = omega*t124311*t124315*(2.778046668940015E15/1.40737488355328E14);
            double t124367 = t124365+t124366-t124375;
            double t124368 = cx4*t124070*t124323*t124072*t124336;
            double t124369 = cx1*gamma_aa[index]*gx*t124073*t124339;
            double t124370 = cx3*gamma_aa[index]*gx*t124322*t124074*t124344*t124068;
            double t124371 = cx2*t124322*t124075*t124068*t124348;
            double t124372 = cx0+t124370+t124371+t124368+t124369;
            double t124373 = omega*t124330*t124306*(4.0/3.0);
            double t124374 = t124373-1.0;
            double t124376 = omega*t124311*t124330*(2.778046668940015E15/1.05553116266496E14);
            double t124377 = 1.0/(t124338*t124338);
            double t124378 = t124376-omega*t124306*t124367*(4.0/3.0);
            double t124379 = pow(rho_a[index],1.0/3.0);
            double t124380 = cx4*t124070*t124323*t124126*t124336*(3.2E1/3.0);
            double t124381 = cx1*gamma_aa[index]*gx*t124116*t124339*(8.0/3.0);
            double t124382 = cx3*gamma_aa[index]*gx*t124322*t124119*t124344*t124068*8.0;
            double t124383 = cx2*t124322*t124117*t124068*t124348*(1.6E1/3.0);
            double t124384 = t124380+t124381+t124382+t124383-cx1*t124322*t124117*t124068*t124377*(8.0/3.0)-cx2* \
               t124322*t124350*t124075*t124363*t124068-cx4*t124070*t124323*t124072*t124360*t124349-cx3*gamma_aa[index]* \
               gx*t124322*t124351*t124074*t124355*t124068;
            v_rho_a_rho_a_[index] = -t124180*(-t124224-rho_a[index]*(t124207+t124192+t124188-t124055*t124065* \
               t124057*t124189*2.0-a1p*c*c0p*t124049*t124067*(8.0/9.0)+Aa*t124204*t124206*t124193*t124194*t124078* \
               (4.0/9.0))*2.0+rho_a[index]*(t124301-t124213-t124222+t124295+t124299+t124138*t124078*(t124300+t124213+ \
               t124222+t124293+t124298-t124210*t124140*t124164*t124286*2.0-t124154*t124155*t124219*t124094-a1f*c* \
               c0f*t124153*t124208*(8.0/9.0)-t124211*t124220*t124221*t124051*t124094*(1.0/2.0)-a1p*c*t124150*t124160* \
               t124154*t124155*(2.0/3.0)))+t124223*t124138*t124078*2.0-t124160*t124154*t124155*t124094*2.0+t124055* \
               t124057*t124066*t124059*2.0+a1p*c*c0p*t124150*t124092*(4.0/3.0))+t124245*t124279*2.0+(rho_a[index]* \
               (t124174+t124138*t124078*(t124173-c0p*t124092*t124094*2.0))*2.0-c0p*rho_a[index]*t124057*t124067*4.0) \
               *(t124250+t124253+t124247+t124256+ccab1*gamma_aa[index]*gcab*t124120*t124103*(4.4E1/9.0)+ccab4*t124100* \
               t124131*t124070*t124071*(3.68E2/9.0)+ccab2*t124112*t124114*t124068*t124069*(4.0E1/3.0)-ccab1*t124114* \
               t124175*t124068*t124069*(7.6E1/9.0)-ccab4*t124132*t124070*t124115*t124071*t124126*(3.2E1/3.0)-ccab2* \
               t124117*t124135*t124118*t124068*t124069*(1.6E1/3.0)-ccab2*t124135*t124075*t124068*t124069*(gamma_aa[index]* \
               gcab*t124120*(8.8E1/9.0)+t124114*t124068*t124069*(4.0E1/3.0))-ccab4*t124132*t124070*t124071*t124072* \
               (gamma_aa[index]*gcab*t124120*(1.76E2/9.0)+t124131*t124070*t124071*(3.68E2/9.0)+t124114*t124068*t124069* \
               8.0E1+gamma_aa[index]*gcab*t124113*t124068*t124069*(3.04E2/3.0))+ccab3*gamma_aa[index]*gcab*t124113* \
               t124108*t124068*t124069*(7.6E1/3.0)-ccab3*gamma_aa[index]*gcab*t124121*t124074*t124068*t124069*(gamma_aa[index]* \
               gcab*t124120*(4.4E1/3.0)+t124114*t124068*t124069*4.0E1+gamma_aa[index]*gcab*t124113*t124068*t124069* \
               (7.6E1/3.0))-ccab3*gamma_aa[index]*gcab*t124121*t124125*t124119*t124068*t124069*8.0)+t124285*(-t124161+ \
               t124172+t124138*t124078*(t124161+t124171-t124140*t124170*t124164*t124165-a1p*c*c0p*t124150*t124092* \
               (2.0/3.0)))*2.0+(rho_a[index]*t124245*2.0-c0p*rho_a[index]*t124057*t124067*4.0)*(t124250+t124253+t124247+ \
               t124256+ccab4*t124100*t124131*t124070*t124071*(6.4E1/3.0)-ccab2*t124131*t124070*t124071*t124135*(3.2E1/ \
               9.0)+ccab2*t124112*t124114*t124068*t124069*(3.2E1/9.0)-ccab1*t124114*t124175*t124068*t124069*(3.2E1/ \
               9.0)-ccab4*t124132*t124070*t124115*t124071*t124126*(3.2E1/3.0)-ccab2*t124117*t124135*t124118*t124068* \
               t124069*(1.6E1/3.0)-ccab4*t124132*t124070*t124071*t124072*(t124131*t124070*t124071*(6.4E1/3.0)+t124114* \
               t124068*t124069*(6.4E1/3.0)+gamma_aa[index]*gcab*t124113*t124068*t124069*(1.28E2/3.0))+ccab3*gamma_aa[index]* \
               gcab*t124113*t124108*t124068*t124069*(3.2E1/3.0)-ccab3*gamma_aa[index]*gcab*t124121*t124074*t124068* \
               t124069*(t124114*t124068*t124069*(3.2E1/3.0)+gamma_aa[index]*gcab*t124113*t124068*t124069*(3.2E1/3.0) \
               )-ccab3*gamma_aa[index]*gcab*t124121*t124125*t124119*t124068*t124069*8.0)+t124180*(t124224+rho_a[index]* \
               (t124207+t124192+t124188-t124055*t124065*t124057*t124189*2.0-a1p*c*c0p*t124049*t124067*(8.0/9.0)-Aa* \
               t124204*t124206*t124193*t124194*t124078*(4.0/9.0))*2.0-t124055*t124057*t124066*t124059*2.0)+(-t124174+ \
               rho_a[index]*t124280+rho_a[index]*(t124055*t124057*t124066*t124059-a1p*c*c0p*t124058*t124067*(2.0/ \
               3.0))*2.0+c0p*t124057*t124067*2.0-t124225*t124138*t124078)*(ccab1*gamma_aa[index]*gcab*t124103*t124116* \
               (4.0/3.0)+ccab4*t124100*t124070*t124071*t124126*(1.6E1/3.0)+ccab2*t124112*t124117*t124068*t124069* \
               (8.0/3.0)-ccab1*t124117*t124175*t124068*t124069*(4.0/3.0)-ccab4*t124132*t124070*t124115*t124071*t124072- \
               ccab2*t124135*t124118*t124075*t124068*t124069+ccab3*gamma_aa[index]*gcab*t124108*t124119*t124068*t124069* \
               4.0-ccab3*gamma_aa[index]*gcab*t124121*t124125*t124074*t124068*t124069)*4.0-rho_a[index]*t124245*(ccaa1* \
               gamma_aa[index]*gcaa*t124120*t124234*(8.8E1/9.0)+ccaa4*t124131*t124231*t124070*t124163*(1.12E3/9.0) \
               +ccaa2*t124114*t124162*t124243*t124068*(3.04E2/9.0)-ccaa1*t124114*t124162*t124263*t124068*2.4E1-ccaa4* \
               t124070*t124126*t124163*t124273*t124274*(6.4E1/3.0)-ccaa2*t124117*t124162*t124068*t124277*t124278* \
               (3.2E1/3.0)-ccaa2*t124162*t124075*t124068*t124278*(gamma_aa[index]*gcaa*t124120*(1.76E2/9.0)+t124114* \
               t124162*t124068*(3.04E2/9.0))-ccaa4*t124070*t124072*t124163*t124274*(gamma_aa[index]*gcaa*t124120* \
               (3.52E2/9.0)+t124131*t124070*t124163*(1.12E3/9.0)+t124114*t124162*t124068*(6.08E2/3.0)+gamma_aa[index]* \
               gcaa*t124113*t124162*t124068*2.88E2)+ccaa4*1.0/(t124230*t124230*t124230)*t124070*t124072*t124163*(t124273* \
               t124273)*2.0+ccaa2*1.0/(t124242*t124242*t124242)*t124162*t124075*t124068*(t124277*t124277)*2.0+ccaa3* \
               gamma_aa[index]*gcaa*t124113*t124162*t124068*t124239*7.2E1+ccaa1*gamma_aa[index]*gcaa*t124113*1.0/ \
               (t124233*t124233*t124233)*t124162*t124068*(1.28E2/9.0)+ccaa3*gamma_aa[index]*gcaa*t124162*t124074* \
               1.0/(t124238*t124238*t124238)*t124068*(t124267*t124267)*2.0-ccaa3*gamma_aa[index]*gcaa*t124162*t124074* \
               t124068*t124268*(gamma_aa[index]*gcaa*t124120*(8.8E1/3.0)+t124114*t124162*t124068*(3.04E2/3.0)+gamma_aa[index]* \
               gcaa*t124113*t124162*t124068*7.2E1)-ccaa3*gamma_aa[index]*gcaa*t124162*t124119*t124068*t124267*t124268* \
               1.6E1)+rho_a[index]*t124285*(t124301-t124213-t124222+t124295+t124299+t124138*t124078*(t124300-t124301+ \
               t124213+t124222+t124293-t124295+t124298-t124299-t124210*t124140*t124164*t124286*2.0-a1f*c*c0f*t124153* \
               t124208*(8.0/9.0)))-rho_a[index]*t124280*t124279*2.0-c0*t124324*t124374*(cx1*gamma_aa[index]*gx*t124120* \
               t124339*(8.8E1/9.0)-cx1*t124114*t124322*t124068*t124377*2.4E1+cx2*t124114*t124322*t124068*t124348* \
               (3.04E2/9.0)+cx4*t124131*t124070*t124323*t124336*(1.12E3/9.0)-cx2*t124322*t124350*t124117*t124363* \
               t124068*(3.2E1/3.0)-cx4*t124070*t124323*t124126*t124360*t124349*(6.4E1/3.0)-cx2*t124322*t124075*t124363* \
               t124068*(gamma_aa[index]*gx*t124120*(1.76E2/9.0)+t124114*t124322*t124068*(3.04E2/9.0))-cx4*t124070* \
               t124323*t124072*t124360*(gamma_aa[index]*gx*t124120*(3.52E2/9.0)+t124131*t124070*t124323*(1.12E3/9.0) \
               +t124114*t124322*t124068*(6.08E2/3.0)+gamma_aa[index]*gx*t124113*t124322*t124068*2.88E2)+cx2*t124322* \
               (t124350*t124350)*t124075*t124068*1.0/(t124347*t124347*t124347)*2.0+cx4*t124070*t124323*t124072*1.0/ \
               (t124335*t124335*t124335)*(t124349*t124349)*2.0+cx3*gamma_aa[index]*gx*t124113*t124322*t124344*t124068* \
               7.2E1+cx1*gamma_aa[index]*gx*t124113*t124322*t124068*1.0/(t124338*t124338*t124338)*(1.28E2/9.0)+cx3* \
               gamma_aa[index]*gx*t124322*1.0/(t124343*t124343*t124343)*t124074*(t124355*t124355)*t124068*2.0-cx3* \
               gamma_aa[index]*gx*t124322*t124351*t124074*t124068*(gamma_aa[index]*gx*t124120*(8.8E1/3.0)+t124114* \
               t124322*t124068*(3.04E2/3.0)+gamma_aa[index]*gx*t124113*t124322*t124068*7.2E1)-cx3*gamma_aa[index]* \
               gx*t124322*t124351*t124119*t124355*t124068*1.6E1)-c0*t124083*t124372*t124374*(4.0/9.0)-c0*t124324* \
               t124384*t124378*2.0+c0*t124374*t124384*t124379*(8.0/3.0)+c0*t124372*t124378*t124379*(8.0/3.0)+c0*t124324* \
               t124372*(omega*t124306*(omega*t124306*(t124305*t124194*(5.0/9.0)-1.0/(omega*omega*omega*omega)*t124305* \
               t124308*(7.717543294808713E30/4.951760157141521E27)+t124310*1.0/pow(t124302,8.0/3.0)*t124309*(3.858771647404357E31/ \
               1.980704062856608E28)-t124311*t124303*t124305*(7.717543294808713E30/9.903520314283042E27)+t124303* \
               t124312*t124305*t124306*(2.778046668940015E15/2.11106232532992E14))-omega*t124320*t124315*(7.717543294808713E30/ \
               4.951760157141521E27)+omega*t124311*t124318*(2.778046668940015E15/7.0368744177664E13)+t124313*t124305* \
               t124314*t124319*(3.080234563013177E46/1.115037259926531E43)+1.0/(omega*omega*omega)*t124312*t124305* \
               t124314*(1.108777112152858E31/2.37684487542793E29))*(4.0/3.0)-omega*t124320*t124330*(7.717543294808713E30/ \
               3.713820117856141E27)+omega*t124311*t124367*(2.778046668940015E15/5.2776558133248E13));
        } else {
            v_rho_a_rho_a_[index] = 0.0;
        } 

        if (is_gga_) {

            //V_rho_a_gamma_aa
            if (rho_a[index] > cutoff_) {
                double t124386 = 1.0/pow(rho_a[index],1.0/3.0);
                double t124387 = c*t124386;
                double t124388 = sqrt(t124387);
                double t124389 = pow(t124387,3.0/2.0);
                double t124390 = c*c;
                double t124391 = 1.0/pow(rho_a[index],2.0/3.0);
                double t124392 = 1.0/c0p;
                double t124393 = b1p*t124388;
                double t124394 = b3p*t124389;
                double t124395 = b4p*t124390*t124391;
                double t124396 = b2p*c*t124386;
                double t124397 = t124393+t124394+t124395+t124396;
                double t124398 = 1.0/t124397;
                double t124399 = t124392*t124398*(1.0/2.0);
                double t124400 = t124399+1.0;
                double t124401 = log(t124400);
                double t124402 = a1p*c*t124386;
                double t124403 = t124402+1.0;
                double t124404 = 1.0/pow(rho_a[index],8.0/3.0);
                double t124405 = gamma_aa[index]*gamma_aa[index];
                double t124406 = gcaa*gcaa;
                double t124407 = t124406*t124406;
                double t124408 = 1.0/pow(rho_a[index],3.2E1/3.0);
                double t124409 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t124410 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t124411 = gamma_aa[index]*gcaa*t124404;
                double t124412 = t124411+1.0;
                double t124413 = gamma_aa[index]*gcaa*t124404*3.0;
                double t124414 = gamma_aa[index]*gcaa*t124410*t124405*t124406;
                double t124415 = t124405*t124406*t124409*3.0;
                double t124416 = t124413+t124414+t124415+1.0;
                double t124417 = t124405*t124405;
                double t124418 = gamma_aa[index]*gcaa*t124404*4.0;
                double t124419 = gamma_aa[index]*gcaa*t124410*t124405*t124406*4.0;
                double t124420 = t124405*t124406*t124409*6.0;
                double t124421 = t124407*t124408*t124417;
                double t124422 = t124420+t124421+t124418+t124419+1.0;
                double t124423 = gamma_aa[index]*gcaa*t124404*2.0;
                double t124424 = t124405*t124406*t124409;
                double t124425 = t124423+t124424+1.0;
                double t124426 = pow(2.0,1.0/3.0);
                double t124427 = t124426*2.0;
                double t124428 = t124427-2.0;
                double t124429 = two_13*2.0;
                double t124430 = t124429-2.0;
                double t124431 = 1.0/t124430;
                double t124432 = 1.0/c0f;
                double t124433 = b1f*t124388;
                double t124434 = b3f*t124389;
                double t124435 = b4f*t124390*t124391;
                double t124436 = b2f*c*t124386;
                double t124437 = t124433+t124434+t124435+t124436;
                double t124438 = 1.0/t124437;
                double t124439 = t124432*t124438*(1.0/2.0);
                double t124440 = t124439+1.0;
                double t124441 = log(t124440);
                double t124442 = a1f*c*t124386;
                double t124443 = t124442+1.0;
                double t124444 = c0f*t124441*t124443*2.0;
                double t124445 = c0p*t124401*t124403*2.0;
                double t124446 = rho_a[index]*2.0;
                double t124447 = 1.0/pow(t124446,1.0/3.0);
                double t124448 = c*t124447;
                double t124449 = gcab*gcab;
                double t124450 = t124449*t124449;
                double t124451 = 1.0/pow(rho_a[index],1.9E1/3.0);
                double t124452 = 1.0/pow(rho_a[index],3.5E1/3.0);
                double t124453 = gamma_aa[index]*gcab*t124404*2.0;
                double t124454 = t124405*t124409*t124449;
                double t124455 = t124453+t124454+1.0;
                double t124456 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]*rho_a[index]);
                double t124457 = gamma_aa[index]*gcab*t124404;
                double t124458 = t124457+1.0;
                double t124459 = gamma_aa[index]*gcab*t124404*3.0;
                double t124460 = gamma_aa[index]*gcab*t124410*t124405*t124449;
                double t124461 = t124405*t124409*t124449*3.0;
                double t124462 = t124460+t124461+t124459+1.0;
                double t124463 = gamma_aa[index]*gcab*t124404*4.0;
                double t124464 = gamma_aa[index]*gcab*t124410*t124405*t124449*4.0;
                double t124465 = t124405*t124409*t124449*6.0;
                double t124466 = t124450*t124408*t124417;
                double t124467 = t124463+t124464+t124465+t124466+1.0;
                double t124468 = 1.0/pow(rho_a[index],1.1E1/3.0);
                double t124469 = 1.0/(t124455*t124455);
                double t124470 = 1.0/(t124462*t124462);
                double t124471 = 1.0/(t124467*t124467);
                double t124472 = gamma_aa[index]*gcab*t124468*(8.0/3.0);
                double t124473 = t124405*t124451*t124449*(8.0/3.0);
                double t124474 = t124472+t124473;
                double t124475 = gcab*t124404;
                double t124476 = gamma_aa[index]*t124409*t124449;
                double t124477 = t124475+t124476;
                double t124478 = gcab*t124404*(3.0/2.0);
                double t124479 = gamma_aa[index]*t124409*t124449*3.0;
                double t124480 = gcab*t124410*t124405*t124449*(3.0/2.0);
                double t124481 = t124480+t124478+t124479;
                double t124482 = gamma_aa[index]*gcab*t124468*4.0;
                double t124483 = gamma_aa[index]*gcab*t124405*t124456*t124449*4.0;
                double t124484 = t124405*t124451*t124449*8.0;
                double t124485 = t124482+t124483+t124484;
                double t124486 = gamma_aa[index]*gcab*t124468*(1.6E1/3.0);
                double t124487 = gamma_aa[index]*gcab*t124405*t124456*t124449*1.6E1;
                double t124488 = t124405*t124451*t124449*1.6E1;
                double t124489 = t124450*t124452*t124417*(1.6E1/3.0);
                double t124490 = t124486+t124487+t124488+t124489;
                double t124491 = gcab*t124404*2.0;
                double t124492 = gamma_aa[index]*t124409*t124449*6.0;
                double t124493 = gcab*t124410*t124405*t124449*6.0;
                double t124494 = gamma_aa[index]*t124405*t124450*t124408*2.0;
                double t124495 = t124491+t124492+t124493+t124494;
                double t124496 = t124444-t124445;
                double t124497 = t124431*t124428*t124496;
                double t124498 = t124445+t124497;
                double t124499 = rho_a[index]*t124498*2.0;
                double t124500 = sqrt(t124448);
                double t124501 = b1p*t124500;
                double t124502 = pow(t124448,3.0/2.0);
                double t124503 = b3p*t124502;
                double t124504 = b2p*c*t124447;
                double t124505 = 1.0/pow(t124446,2.0/3.0);
                double t124506 = b4p*t124505*t124390;
                double t124507 = t124501+t124503+t124504+t124506;
                double t124508 = 1.0/t124507;
                double t124509 = t124508*t124392*(1.0/2.0);
                double t124510 = t124509+1.0;
                double t124511 = log(t124510);
                double t124512 = a1p*c*t124447;
                double t124513 = t124512+1.0;
                double t124514 = t124499-c0p*rho_a[index]*t124511*t124513*4.0;
                double t124515 = 1.0/t124467;
                double t124516 = 1.0/t124455;
                double t124517 = 1.0/t124462;
                double t124518 = 1.0/(t124458*t124458);
                double t124519 = 1.0/(t124458*t124458*t124458);
                double t124520 = ccab3*gcab*t124410*t124405*t124470*t124449*t124485*(3.0/2.0);
                double t124521 = ccab2*gamma_aa[index]*t124409*t124474*t124449*t124469;
                double t124522 = ccab3*gamma_aa[index]*gcab*t124405*t124470*t124481*t124456*t124449*4.0;
                double t124523 = ccab4*gamma_aa[index]*t124405*t124450*t124408*t124471*t124490*2.0;
                double t124524 = ccab4*t124450*t124452*t124417*t124471*t124495*(1.6E1/3.0);
                double t124525 = ccab2*t124405*t124451*t124449*t124477*t124469*(8.0/3.0);
                double t124526 = gamma_aa[index]*t124451*t124449*4.0;
                double t124527 = 1.0/(t124455*t124455*t124455);
                double t124528 = 1.0/(t124462*t124462*t124462);
                double t124529 = 1.0/(t124467*t124467*t124467);
                double t124530 = 1.0/pow(t124446,4.0/3.0);
                double t124531 = 1.0/pow(rho_a[index],4.0/3.0);
                double t124532 = 1.0/pow(rho_a[index],5.0/3.0);
                double t124533 = 1.0/sqrt(t124387);
                double t124534 = 1.0/t124400;
                double t124535 = 1.0/(t124397*t124397);
                double t124536 = b4p*t124532*t124390*(2.0/3.0);
                double t124537 = b2p*c*t124531*(1.0/3.0);
                double t124538 = b1p*c*t124531*t124533*(1.0/6.0);
                double t124539 = b3p*c*t124531*t124388*(1.0/2.0);
                double t124540 = t124536+t124537+t124538+t124539;
                double t124541 = t124403*t124540*t124534*t124535;
                double t124542 = 1.0/t124458;
                double t124543 = 1.0/t124412;
                double t124544 = 1.0/t124422;
                double t124545 = 1.0/t124425;
                double t124546 = 1.0/t124416;
                double t124547 = 1.0/(t124412*t124412);
                double t124548 = 1.0/(t124416*t124416);
                double t124549 = 1.0/(t124425*t124425);
                double t124550 = gcaa*t124404*3.0;
                double t124551 = gamma_aa[index]*t124406*t124409*6.0;
                double t124552 = gcaa*t124410*t124405*t124406*3.0;
                double t124553 = t124550+t124551+t124552;
                double t124554 = 1.0/(t124422*t124422);
                double t124555 = gcaa*t124404*4.0;
                double t124556 = gamma_aa[index]*t124406*t124409*1.2E1;
                double t124557 = gcaa*t124410*t124405*t124406*1.2E1;
                double t124558 = gamma_aa[index]*t124405*t124407*t124408*4.0;
                double t124559 = t124555+t124556+t124557+t124558;
                double t124560 = gcaa*t124404*2.0;
                double t124561 = gamma_aa[index]*t124406*t124409*2.0;
                double t124562 = t124560+t124561;
                double t124563 = gamma_aa[index]*gcaa*t124468*(1.6E1/3.0);
                double t124564 = t124405*t124406*t124451*(1.6E1/3.0);
                double t124565 = t124563+t124564;
                double t124566 = gamma_aa[index]*gcaa*t124468*8.0;
                double t124567 = gamma_aa[index]*gcaa*t124405*t124406*t124456*8.0;
                double t124568 = t124405*t124406*t124451*1.6E1;
                double t124569 = t124566+t124567+t124568;
                double t124570 = gamma_aa[index]*gcaa*t124468*(3.2E1/3.0);
                double t124571 = gamma_aa[index]*gcaa*t124405*t124406*t124456*3.2E1;
                double t124572 = t124405*t124406*t124451*3.2E1;
                double t124573 = t124407*t124452*t124417*(3.2E1/3.0);
                double t124574 = t124570+t124571+t124572+t124573;
                double t124575 = 1.0/t124440;
                double t124576 = 1.0/(t124437*t124437);
                double t124577 = b4f*t124532*t124390*(2.0/3.0);
                double t124578 = b2f*c*t124531*(1.0/3.0);
                double t124579 = b1f*c*t124531*t124533*(1.0/6.0);
                double t124580 = b3f*c*t124531*t124388*(1.0/2.0);
                double t124581 = t124580+t124577+t124578+t124579;
                double t124582 = a1f*c*c0f*t124441*t124531*(2.0/3.0);
                double t124583 = a1p*c*c0p*t124401*t124531*(2.0/3.0);
                double t124584 = ccaa1*gcaa*t124404*t124543;
                double t124585 = ccaa4*gamma_aa[index]*t124405*t124407*t124408*t124544*4.0;
                double t124586 = ccaa2*gamma_aa[index]*t124406*t124409*t124545*2.0;
                double t124587 = ccaa3*gcaa*t124410*t124405*t124406*t124546*3.0;
                double t124588 = t124584+t124585+t124586+t124587-ccaa1*gamma_aa[index]*t124406*t124409*t124547-ccaa2* \
                   t124405*t124406*t124409*t124562*t124549-ccaa4*t124407*t124408*t124417*t124554*t124559-ccaa3*gamma_aa[index]* \
                   gcaa*t124410*t124405*t124406*t124553*t124548;
                double t124589 = rho_a[index]*(8.334140006820045E15/1.40737488355328E14);
                double t124590 = 1.0/(omega*omega);
                double t124591 = pow(t124589,2.0/3.0);
                double t124594 = t124590*t124591;
                double t124592 = exp(-t124594);
                double t124593 = 1.0/pow(t124589,1.0/3.0);
                double t124595 = omega*omega;
                double t124596 = t124592-1.0;
                double t124597 = 1.0/pow(t124589,2.0/3.0);
                double t124598 = 1.0/pow(t124589,4.0/3.0);
                double t124599 = 1.0/omega;
                double t124621 = t124595*t124596*t124597*(1.0/2.0);
                double t124600 = -t124621+t124592;
                double t124601 = gx*gx;
                double t124602 = t124601*t124601;
                double t124603 = gamma_aa[index]*gx*t124404;
                double t124604 = t124603+1.0;
                double t124605 = gamma_aa[index]*gx*t124404*3.0;
                double t124606 = gamma_aa[index]*gx*t124410*t124601*t124405;
                double t124607 = t124601*t124405*t124409*3.0;
                double t124608 = t124605+t124606+t124607+1.0;
                double t124609 = gamma_aa[index]*gx*t124404*4.0;
                double t124610 = gamma_aa[index]*gx*t124410*t124601*t124405*4.0;
                double t124611 = t124601*t124405*t124409*6.0;
                double t124612 = t124602*t124408*t124417;
                double t124613 = t124610+t124611+t124612+t124609+1.0;
                double t124614 = gamma_aa[index]*gx*t124404*2.0;
                double t124615 = t124601*t124405*t124409;
                double t124616 = t124614+t124615+1.0;
                double t124617 = pow(t124589,1.0/3.0);
                double t124618 = t124617*t124599;
                double t124619 = erf(t124618);
                double t124620 = t124619*(3.991211251234741E15/2.251799813685248E15);
                double t124622 = omega*t124600*t124593;
                double t124623 = t124620+t124622;
                double t124624 = 1.0/t124604;
                double t124625 = cx1*gx*t124404*t124624;
                double t124626 = 1.0/t124613;
                double t124627 = cx4*gamma_aa[index]*t124602*t124405*t124408*t124626*4.0;
                double t124628 = 1.0/t124616;
                double t124629 = cx2*gamma_aa[index]*t124601*t124409*t124628*2.0;
                double t124630 = 1.0/t124608;
                double t124631 = cx3*gx*t124410*t124601*t124405*t124630*3.0;
                double t124632 = 1.0/(t124604*t124604);
                double t124633 = gx*t124404*3.0;
                double t124634 = gamma_aa[index]*t124601*t124409*6.0;
                double t124635 = gx*t124410*t124601*t124405*3.0;
                double t124636 = t124633+t124634+t124635;
                double t124637 = 1.0/(t124608*t124608);
                double t124638 = gx*t124404*4.0;
                double t124639 = gamma_aa[index]*t124601*t124409*1.2E1;
                double t124640 = gx*t124410*t124601*t124405*1.2E1;
                double t124641 = gamma_aa[index]*t124602*t124405*t124408*4.0;
                double t124642 = t124640+t124641+t124638+t124639;
                double t124643 = 1.0/(t124613*t124613);
                double t124644 = gx*t124404*2.0;
                double t124645 = gamma_aa[index]*t124601*t124409*2.0;
                double t124646 = t124644+t124645;
                double t124647 = 1.0/(t124616*t124616);
                double t124648 = t124631+t124625+t124627+t124629-cx1*gamma_aa[index]*t124601*t124632*t124409-cx2* \
                   t124601*t124405*t124409*t124646*t124647-cx4*t124602*t124408*t124417*t124642*t124643-cx3*gamma_aa[index]* \
                   gx*t124410*t124601*t124405*t124636*t124637;
                double t124649 = pow(rho_a[index],4.0/3.0);
                double t124650 = omega*t124623*t124593*(4.0/3.0);
                double t124651 = t124650-1.0;
                double t124652 = gamma_aa[index]*gx*t124468*(1.6E1/3.0);
                double t124653 = t124601*t124405*t124451*(1.6E1/3.0);
                double t124654 = t124652+t124653;
                double t124655 = gamma_aa[index]*gx*t124468*8.0;
                double t124656 = gamma_aa[index]*gx*t124601*t124405*t124456*8.0;
                double t124657 = t124601*t124405*t124451*1.6E1;
                double t124658 = t124655+t124656+t124657;
                double t124659 = gamma_aa[index]*gx*t124468*(3.2E1/3.0);
                double t124660 = gamma_aa[index]*gx*t124601*t124405*t124456*3.2E1;
                double t124661 = t124601*t124405*t124451*3.2E1;
                double t124662 = t124602*t124452*t124417*(3.2E1/3.0);
                double t124663 = t124660+t124661+t124662+t124659;
                v_rho_a_gamma_aa_[index] = t124514*(t124520+t124521+t124522+t124523+t124524+t124525-ccab2*gamma_aa[index]* \
                   t124451*t124516*t124449*(4.0/3.0)+ccab1*gamma_aa[index]*t124451*t124518*t124449*(4.0/3.0)+ccab4*t124450* \
                   t124408*t124417*t124471*(gamma_aa[index]*t124451*t124449*8.0+gamma_aa[index]*t124405*t124450*t124452* \
                   8.0+gcab*t124405*t124456*t124449*1.6E1)-ccab4*gamma_aa[index]*t124405*t124450*t124452*t124515*8.0+ \
                   ccab2*gamma_aa[index]*t124405*t124450*t124452*t124469*(4.0/3.0)-ccab1*gcab*t124405*t124456*t124519* \
                   t124449*(4.0/3.0)-ccab3*gcab*t124405*t124517*t124456*t124449*4.0-ccab4*t124450*t124408*t124417*t124490* \
                   t124529*t124495*2.0-ccab2*t124405*t124409*t124527*t124474*t124449*t124477*2.0+ccab3*gamma_aa[index]* \
                   gcab*t124410*t124405*t124470*t124449*(t124526+gcab*t124405*t124456*t124449*4.0)-ccab3*gamma_aa[index]* \
                   gcab*t124410*t124405*t124481*t124528*t124449*t124485*2.0)-t124588*(t124445+t124431*t124428*(t124444- \
                   c0p*t124401*t124403*2.0))-(-t124445-t124497+rho_a[index]*((t124513*1.0/(t124507*t124507)*(b4p*t124390* \
                   1.0/pow(t124446,5.0/3.0)*(2.0/3.0)+b2p*c*t124530*(1.0/3.0)+b3p*c*t124500*t124530*(1.0/2.0)+b1p*c*t124530* \
                   1.0/sqrt(t124448)*(1.0/6.0)))/t124510-a1p*c*c0p*t124511*t124530*(2.0/3.0))*2.0+rho_a[index]*(-t124541+ \
                   t124583+t124431*t124428*(t124541+t124582-t124443*t124581*t124575*t124576-a1p*c*c0p*t124401*t124531* \
                   (2.0/3.0)))+c0p*t124511*t124513*2.0)*(ccab1*gcab*t124404*t124542*(1.0/2.0)+ccab2*gamma_aa[index]*t124516* \
                   t124409*t124449-ccab1*gamma_aa[index]*t124409*t124518*t124449*(1.0/2.0)-ccab4*t124450*t124408*t124417* \
                   t124471*t124495-ccab2*t124405*t124409*t124449*t124477*t124469+ccab4*gamma_aa[index]*t124405*t124450* \
                   t124515*t124408*2.0+ccab3*gcab*t124410*t124405*t124517*t124449*(3.0/2.0)-ccab3*gamma_aa[index]*gcab* \
                   t124410*t124405*t124470*t124481*t124449)*2.0+t124514*(t124520+t124521+t124522+t124523+t124524+t124525- \
                   ccab1*gcab*t124542*t124468*(4.0/3.0)-ccab2*gamma_aa[index]*t124451*t124516*t124449*4.0+ccab1*gamma_aa[index]* \
                   t124451*t124518*t124449*(8.0/3.0)+ccab4*t124450*t124408*t124417*t124471*(gcab*t124468*(1.6E1/3.0)+ \
                   gamma_aa[index]*t124451*t124449*2.4E1+gamma_aa[index]*t124405*t124450*t124452*(4.0E1/3.0)+gcab*t124405* \
                   t124456*t124449*3.2E1)+ccab2*t124405*t124409*t124449*t124469*(t124526+gcab*t124468*(8.0/3.0))-ccab4* \
                   gamma_aa[index]*t124405*t124450*t124452*t124515*(4.0E1/3.0)-ccab1*gcab*t124405*t124456*t124519*t124449* \
                   (4.0/3.0)-ccab3*gcab*t124405*t124517*t124456*t124449*8.0-ccab4*t124450*t124408*t124417*t124490*t124529* \
                   t124495*2.0-ccab2*t124405*t124409*t124527*t124474*t124449*t124477*2.0+ccab3*gamma_aa[index]*gcab*t124410* \
                   t124405*t124470*t124449*(gcab*t124468*4.0+gamma_aa[index]*t124451*t124449*1.2E1+gcab*t124405*t124456* \
                   t124449*8.0)-ccab3*gamma_aa[index]*gcab*t124410*t124405*t124481*t124528*t124449*t124485*2.0)-rho_a[index]* \
                   t124498*(ccaa1*gcaa*t124543*t124468*(-8.0/3.0)-ccaa2*gamma_aa[index]*t124406*t124451*t124545*(3.2E1/ \
                   3.0)+ccaa1*gamma_aa[index]*t124406*t124451*t124547*8.0+ccaa2*t124405*t124406*t124451*t124562*t124549* \
                   (1.6E1/3.0)+ccaa4*t124407*t124452*t124417*t124554*t124559*(3.2E1/3.0)+ccaa4*t124407*t124408*t124417* \
                   t124554*(gcaa*t124468*(3.2E1/3.0)+gamma_aa[index]*t124406*t124451*6.4E1+gamma_aa[index]*t124405*t124407* \
                   t124452*(1.28E2/3.0)+gcaa*t124405*t124406*t124456*9.6E1)-ccaa1*gcaa*1.0/(t124412*t124412*t124412)* \
                   t124405*t124406*t124456*(1.6E1/3.0)+ccaa2*t124405*t124406*t124409*t124549*(gcaa*t124468*(1.6E1/3.0) \
                   +gamma_aa[index]*t124406*t124451*(3.2E1/3.0))-ccaa4*gamma_aa[index]*t124405*t124407*t124452*t124544* \
                   (1.28E2/3.0)+ccaa2*gamma_aa[index]*t124406*t124409*t124565*t124549*2.0-ccaa3*gcaa*t124405*t124406* \
                   t124456*t124546*2.4E1+ccaa4*gamma_aa[index]*t124405*t124407*t124408*t124554*t124574*4.0+ccaa3*gcaa* \
                   t124410*t124405*t124406*t124548*t124569*3.0-ccaa2*t124405*t124406*1.0/(t124425*t124425*t124425)*t124409* \
                   t124562*t124565*2.0-ccaa4*1.0/(t124422*t124422*t124422)*t124407*t124408*t124417*t124574*t124559*2.0+ \
                   ccaa3*gamma_aa[index]*gcaa*t124410*t124405*t124406*t124548*(gcaa*t124468*8.0+gamma_aa[index]*t124406* \
                   t124451*3.2E1+gcaa*t124405*t124406*t124456*2.4E1)+ccaa3*gamma_aa[index]*gcaa*t124405*t124406*t124553* \
                   t124456*t124548*8.0-ccaa3*gamma_aa[index]*gcaa*t124410*t124405*t124406*1.0/(t124416*t124416*t124416) \
                   *t124553*t124569*2.0)+rho_a[index]*t124588*(-t124541+t124583+t124431*t124428*(t124541+t124582-t124583- \
                   t124443*t124581*t124575*t124576))-c0*t124648*t124649*(omega*t124593*(omega*t124600*t124598*(-2.778046668940015E15/ \
                   1.40737488355328E14)+omega*t124593*((t124592*(1.0/3.0))/rho_a[index]+t124595*t124596*1.0/pow(t124589,5.0/ \
                   3.0)*(2.778046668940015E15/1.40737488355328E14)-t124590*t124592*t124593*(2.778046668940015E15/7.0368744177664E13) \
                   )+1.0/sqrt(3.141592653589793)*t124592*t124597*t124599*(1.108777112152858E31/1.584563250285287E29)) \
                   *(4.0/3.0)-omega*t124623*t124598*(2.778046668940015E15/1.05553116266496E14))-c0*t124651*t124649*(cx1* \
                   gx*t124624*t124468*(-8.0/3.0)+cx1*gamma_aa[index]*t124601*t124451*t124632*8.0-cx2*gamma_aa[index]* \
                   t124601*t124451*t124628*(3.2E1/3.0)+cx2*t124601*t124405*t124451*t124646*t124647*(1.6E1/3.0)+cx4*t124602* \
                   t124452*t124417*t124642*t124643*(3.2E1/3.0)+cx4*t124602*t124408*t124417*t124643*(gx*t124468*(3.2E1/ \
                   3.0)+gamma_aa[index]*t124601*t124451*6.4E1+gamma_aa[index]*t124602*t124405*t124452*(1.28E2/3.0)+gx* \
                   t124601*t124405*t124456*9.6E1)-cx1*gx*t124601*t124405*1.0/(t124604*t124604*t124604)*t124456*(1.6E1/ \
                   3.0)+cx2*t124601*t124405*t124409*t124647*(gx*t124468*(1.6E1/3.0)+gamma_aa[index]*t124601*t124451*(3.2E1/ \
                   3.0))+cx2*gamma_aa[index]*t124601*t124409*t124654*t124647*2.0-cx4*gamma_aa[index]*t124602*t124405* \
                   t124452*t124626*(1.28E2/3.0)-cx3*gx*t124601*t124405*t124630*t124456*2.4E1+cx4*gamma_aa[index]*t124602* \
                   t124405*t124408*t124643*t124663*4.0+cx3*gx*t124410*t124601*t124405*t124637*t124658*3.0-cx2*t124601* \
                   t124405*t124409*1.0/(t124616*t124616*t124616)*t124654*t124646*2.0-cx4*t124602*1.0/(t124613*t124613* \
                   t124613)*t124408*t124417*t124642*t124663*2.0+cx3*gamma_aa[index]*gx*t124410*t124601*t124405*t124637* \
                   (gx*t124468*8.0+gamma_aa[index]*t124601*t124451*3.2E1+gx*t124601*t124405*t124456*2.4E1)+cx3*gamma_aa[index]* \
                   gx*t124601*t124405*t124456*t124636*t124637*8.0-cx3*gamma_aa[index]*gx*t124410*t124601*t124405*1.0/ \
                   (t124608*t124608*t124608)*t124636*t124658*2.0)-c0*pow(rho_a[index],1.0/3.0)*t124651*t124648*(4.0/3.0) \
                   ;
            } else {
                v_rho_a_gamma_aa_[index] = 0.0;
            } 

            //V_gamma_aa_gamma_aa
            if (rho_a[index] > cutoff_) {
                double t124665 = 1.0/pow(rho_a[index],1.0/3.0);
                double t124666 = c*t124665;
                double t124667 = sqrt(t124666);
                double t124668 = pow(t124666,3.0/2.0);
                double t124669 = c*c;
                double t124670 = 1.0/pow(rho_a[index],2.0/3.0);
                double t124671 = 1.0/c0p;
                double t124672 = b1p*t124667;
                double t124673 = b3p*t124668;
                double t124674 = b4p*t124670*t124669;
                double t124675 = b2p*c*t124665;
                double t124676 = t124672+t124673+t124674+t124675;
                double t124677 = 1.0/t124676;
                double t124678 = t124671*t124677*(1.0/2.0);
                double t124679 = t124678+1.0;
                double t124680 = log(t124679);
                double t124681 = a1p*c*t124665;
                double t124682 = t124681+1.0;
                double t124683 = rho_a[index]*2.0;
                double t124684 = 1.0/pow(t124683,1.0/3.0);
                double t124685 = c*t124684;
                double t124686 = gcab*gcab;
                double t124687 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t124688 = 1.0/pow(rho_a[index],8.0/3.0);
                double t124689 = gamma_aa[index]*gamma_aa[index];
                double t124690 = t124686*t124686;
                double t124691 = 1.0/pow(rho_a[index],3.2E1/3.0);
                double t124692 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t124693 = gamma_aa[index]*gcab*t124688;
                double t124694 = t124693+1.0;
                double t124695 = gamma_aa[index]*gcab*t124688*2.0;
                double t124696 = t124686*t124687*t124689;
                double t124697 = t124695+t124696+1.0;
                double t124698 = gamma_aa[index]*gcab*t124688*3.0;
                double t124699 = gamma_aa[index]*gcab*t124692*t124686*t124689;
                double t124700 = t124686*t124687*t124689*3.0;
                double t124701 = t124700+t124698+t124699+1.0;
                double t124702 = t124689*t124689;
                double t124718 = gcab*t124688*2.0;
                double t124719 = gamma_aa[index]*t124686*t124687*6.0;
                double t124720 = gcab*t124692*t124686*t124689*6.0;
                double t124721 = gamma_aa[index]*t124690*t124691*t124689*2.0;
                double t124703 = t124720+t124721+t124718+t124719;
                double t124704 = gamma_aa[index]*gcab*t124688*4.0;
                double t124705 = gamma_aa[index]*gcab*t124692*t124686*t124689*4.0;
                double t124706 = t124686*t124687*t124689*6.0;
                double t124707 = t124702*t124690*t124691;
                double t124708 = t124704+t124705+t124706+t124707+1.0;
                double t124711 = gcab*t124688;
                double t124712 = gamma_aa[index]*t124686*t124687;
                double t124709 = t124711+t124712;
                double t124710 = 1.0/(t124701*t124701);
                double t124713 = 1.0/(t124697*t124697);
                double t124714 = gcab*t124688*(3.0/2.0);
                double t124715 = gamma_aa[index]*t124686*t124687*3.0;
                double t124716 = gcab*t124692*t124686*t124689*(3.0/2.0);
                double t124717 = t124714+t124715+t124716;
                double t124722 = 1.0/(t124708*t124708);
                double t124723 = pow(2.0,1.0/3.0);
                double t124724 = t124723*2.0;
                double t124725 = t124724-2.0;
                double t124726 = two_13*2.0;
                double t124727 = t124726-2.0;
                double t124728 = 1.0/t124727;
                double t124729 = 1.0/c0f;
                double t124730 = b1f*t124667;
                double t124731 = b3f*t124668;
                double t124732 = b4f*t124670*t124669;
                double t124733 = b2f*c*t124665;
                double t124734 = t124730+t124731+t124732+t124733;
                double t124735 = 1.0/t124734;
                double t124736 = t124735*t124729*(1.0/2.0);
                double t124737 = t124736+1.0;
                double t124738 = log(t124737);
                double t124739 = a1f*c*t124665;
                double t124740 = t124739+1.0;
                double t124741 = c0f*t124740*t124738*2.0;
                double t124742 = c0p*t124680*t124682*2.0;
                double t124743 = gcaa*gcaa;
                double t124744 = t124743*t124743;
                double t124745 = gamma_aa[index]*gcaa*t124688;
                double t124746 = t124745+1.0;
                double t124747 = gamma_aa[index]*gcaa*t124688*2.0;
                double t124748 = t124743*t124687*t124689;
                double t124749 = t124747+t124748+1.0;
                double t124750 = gamma_aa[index]*gcaa*t124688*3.0;
                double t124751 = gamma_aa[index]*gcaa*t124743*t124692*t124689;
                double t124752 = t124743*t124687*t124689*3.0;
                double t124753 = t124750+t124751+t124752+1.0;
                double t124769 = gcaa*t124688*4.0;
                double t124770 = gamma_aa[index]*t124743*t124687*1.2E1;
                double t124771 = gcaa*t124743*t124692*t124689*1.2E1;
                double t124772 = gamma_aa[index]*t124744*t124691*t124689*4.0;
                double t124754 = t124770+t124771+t124772+t124769;
                double t124755 = gamma_aa[index]*gcaa*t124688*4.0;
                double t124756 = gamma_aa[index]*gcaa*t124743*t124692*t124689*4.0;
                double t124757 = t124743*t124687*t124689*6.0;
                double t124758 = t124702*t124744*t124691;
                double t124759 = t124755+t124756+t124757+t124758+1.0;
                double t124762 = gcaa*t124688*2.0;
                double t124763 = gamma_aa[index]*t124743*t124687*2.0;
                double t124760 = t124762+t124763;
                double t124761 = 1.0/(t124753*t124753);
                double t124764 = 1.0/(t124749*t124749);
                double t124765 = gcaa*t124688*3.0;
                double t124766 = gamma_aa[index]*t124743*t124687*6.0;
                double t124767 = gcaa*t124743*t124692*t124689*3.0;
                double t124768 = t124765+t124766+t124767;
                double t124773 = 1.0/(t124759*t124759);
                double t124774 = rho_a[index]*(8.334140006820045E15/1.40737488355328E14);
                double t124775 = 1.0/pow(t124774,1.0/3.0);
                double t124776 = 1.0/(omega*omega);
                double t124777 = pow(t124774,2.0/3.0);
                double t124778 = exp(-t124776*t124777);
                double t124779 = gx*gx;
                double t124780 = t124779*t124779;
                double t124781 = gamma_aa[index]*gx*t124688;
                double t124782 = t124781+1.0;
                double t124783 = gamma_aa[index]*gx*t124688*2.0;
                double t124784 = t124687*t124689*t124779;
                double t124785 = t124783+t124784+1.0;
                double t124786 = gamma_aa[index]*gx*t124688*3.0;
                double t124787 = gamma_aa[index]*gx*t124692*t124689*t124779;
                double t124788 = t124687*t124689*t124779*3.0;
                double t124789 = t124786+t124787+t124788+1.0;
                double t124805 = gx*t124688*4.0;
                double t124806 = gamma_aa[index]*t124687*t124779*1.2E1;
                double t124807 = gx*t124692*t124689*t124779*1.2E1;
                double t124808 = gamma_aa[index]*t124780*t124691*t124689*4.0;
                double t124790 = t124805+t124806+t124807+t124808;
                double t124791 = gamma_aa[index]*gx*t124688*4.0;
                double t124792 = gamma_aa[index]*gx*t124692*t124689*t124779*4.0;
                double t124793 = t124687*t124689*t124779*6.0;
                double t124794 = t124702*t124780*t124691;
                double t124795 = t124791+t124792+t124793+t124794+1.0;
                double t124798 = gx*t124688*2.0;
                double t124799 = gamma_aa[index]*t124687*t124779*2.0;
                double t124796 = t124798+t124799;
                double t124797 = 1.0/(t124789*t124789);
                double t124800 = 1.0/(t124785*t124785);
                double t124801 = gx*t124688*3.0;
                double t124802 = gamma_aa[index]*t124687*t124779*6.0;
                double t124803 = gx*t124692*t124689*t124779*3.0;
                double t124804 = t124801+t124802+t124803;
                double t124809 = 1.0/(t124795*t124795);
                v_gamma_aa_gamma_aa_[index] = (rho_a[index]*(t124742+t124725*t124728*(t124741-c0p*t124680*t124682* \
                   2.0))*2.0-c0p*rho_a[index]*log((t124671*(1.0/2.0))/(b1p*sqrt(t124685)+b3p*pow(t124685,3.0/2.0)+b4p* \
                   1.0/pow(t124683,2.0/3.0)*t124669+b2p*c*t124684)+1.0)*(a1p*c*t124684+1.0)*4.0)*(ccab1*1.0/(t124694* \
                   t124694)*t124686*t124687*(1.0/2.0)-(ccab2*t124686*t124687*(1.0/2.0))/t124697+ccab2*t124713*t124690* \
                   t124691*t124689*(1.0/2.0)-(ccab4*t124690*t124691*t124689*3.0)/t124708+ccab4*t124702*t124722*t124690* \
                   t124691*(t124686*t124687*3.0+t124690*t124691*t124689*3.0+gamma_aa[index]*gcab*t124692*t124686*6.0) \
                   -(ccab3*gamma_aa[index]*gcab*t124692*t124686*(3.0/2.0))/t124701-ccab1*gamma_aa[index]*gcab*t124692* \
                   1.0/(t124694*t124694*t124694)*t124686*(1.0/2.0)-ccab4*t124702*(t124703*t124703)*t124690*1.0/(t124708* \
                   t124708*t124708)*t124691*2.0-ccab2*(t124709*t124709)*t124686*t124687*1.0/(t124697*t124697*t124697) \
                   *t124689*2.0+ccab2*gamma_aa[index]*t124713*t124709*t124686*t124687*2.0+ccab4*gamma_aa[index]*t124703* \
                   t124722*t124690*t124691*t124689*4.0+ccab3*gcab*t124710*t124717*t124692*t124686*t124689*3.0+ccab3*gamma_aa[index]* \
                   gcab*t124710*t124692*t124686*t124689*(t124686*t124687*(3.0/2.0)+gamma_aa[index]*gcab*t124692*t124686* \
                   (3.0/2.0))-ccab3*gamma_aa[index]*gcab*1.0/(t124701*t124701*t124701)*(t124717*t124717)*t124692*t124686* \
                   t124689*2.0)*-4.0+rho_a[index]*(t124742+t124725*t124728*(t124741-t124742))*(ccaa1*t124743*1.0/(t124746* \
                   t124746)*t124687*2.0-(ccaa2*t124743*t124687*2.0)/t124749+ccaa2*t124744*t124691*t124764*t124689*2.0- \
                   (ccaa4*t124744*t124691*t124689*1.2E1)/t124759+ccaa4*t124702*t124744*t124691*t124773*(t124743*t124687* \
                   1.2E1+t124744*t124691*t124689*1.2E1+gamma_aa[index]*gcaa*t124743*t124692*2.4E1)-(ccaa3*gamma_aa[index]* \
                   gcaa*t124743*t124692*6.0)/t124753-ccaa1*gamma_aa[index]*gcaa*t124743*t124692*1.0/(t124746*t124746* \
                   t124746)*2.0-ccaa4*t124702*t124744*t124691*(t124754*t124754)*1.0/(t124759*t124759*t124759)*2.0-ccaa2* \
                   (t124760*t124760)*t124743*1.0/(t124749*t124749*t124749)*t124687*t124689*2.0+ccaa2*gamma_aa[index]* \
                   t124760*t124743*t124764*t124687*4.0+ccaa4*gamma_aa[index]*t124744*t124691*t124754*t124773*t124689* \
                   8.0+ccaa3*gcaa*t124743*t124761*t124692*t124768*t124689*6.0+ccaa3*gamma_aa[index]*gcaa*t124743*t124761* \
                   t124692*t124689*(t124743*t124687*6.0+gamma_aa[index]*gcaa*t124743*t124692*6.0)-ccaa3*gamma_aa[index]* \
                   gcaa*t124743*1.0/(t124753*t124753*t124753)*t124692*(t124768*t124768)*t124689*2.0)*2.0+c0*pow(rho_a[index],4.0/ \
                   3.0)*(omega*t124775*(erf(pow(t124774,1.0/3.0)/omega)*(3.991211251234741E15/2.251799813685248E15)+omega* \
                   t124775*(t124778-(omega*omega)*1.0/pow(t124774,2.0/3.0)*(t124778-1.0)*(1.0/2.0)))*(4.0/3.0)-1.0)*(cx1* \
                   1.0/(t124782*t124782)*t124687*t124779*2.0-(cx2*t124687*t124779*2.0)/t124785+cx2*t124800*t124780*t124691* \
                   t124689*2.0-(cx4*t124780*t124691*t124689*1.2E1)/t124795+cx4*t124702*t124780*t124691*t124809*(t124687* \
                   t124779*1.2E1+t124780*t124691*t124689*1.2E1+gamma_aa[index]*gx*t124692*t124779*2.4E1)-cx1*gamma_aa[index]* \
                   gx*t124692*1.0/(t124782*t124782*t124782)*t124779*2.0-(cx3*gamma_aa[index]*gx*t124692*t124779*6.0)/ \
                   t124789-cx2*1.0/(t124785*t124785*t124785)*t124687*(t124796*t124796)*t124689*t124779*2.0-cx4*t124702* \
                   t124780*t124691*(t124790*t124790)*1.0/(t124795*t124795*t124795)*2.0+cx2*gamma_aa[index]*t124800*t124687* \
                   t124796*t124779*4.0+cx4*gamma_aa[index]*t124780*t124691*t124790*t124809*t124689*8.0+cx3*gx*t124804* \
                   t124692*t124689*t124779*t124797*6.0+cx3*gamma_aa[index]*gx*t124692*t124689*t124779*t124797*(t124687* \
                   t124779*6.0+gamma_aa[index]*gx*t124692*t124779*6.0)-cx3*gamma_aa[index]*gx*(t124804*t124804)*t124692* \
                   t124689*t124779*1.0/(t124789*t124789*t124789)*2.0)*2.0;
            } else {
                v_gamma_aa_gamma_aa_[index] = 0.0;
            } 

        }
        if (is_meta_) {

            //V_rho_a_tau_a
            if (rho_a[index] > cutoff_) {
                v_rho_a_tau_a_[index] = 0.0;
            } else {
                v_rho_a_tau_a_[index] = 0.0;
            } 

            //V_tau_a_tau_a
            if (rho_a[index] > cutoff_) {
                v_tau_a_tau_a_[index] = 0.0;
            } else {
                v_tau_a_tau_a_[index] = 0.0;
            } 

            if (is_gga_) {

                //V_gamma_aa_tau_a
                if (rho_a[index] > cutoff_) {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } else {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } 

            }
        }
    }
}
void wB97X_Functional::computeUKSFunctional(boost::shared_ptr<UKSFunctions> prop)
{
    int ntrue = prop->npoints();

    const double* restrict rho_a;
    const double* restrict rho_b;
    const double* restrict gamma_aa;
    const double* restrict gamma_ab;
    const double* restrict gamma_bb;
    const double* restrict tau_a;
    const double* restrict tau_b;

    rho_a = prop->property_value("RHO_A")->pointer();
    rho_b = prop->property_value("RHO_B")->pointer();
    if (is_gga_) {
        gamma_aa = prop->property_value("GAMMA_AA")->pointer();
        gamma_ab = prop->property_value("GAMMA_AB")->pointer();
        gamma_bb = prop->property_value("GAMMA_BB")->pointer();
    }
    if (is_meta_) {
        tau_a = prop->property_value("TAU_A")->pointer();
        tau_b = prop->property_value("TAU_B")->pointer();
    }

    double omega = params_[0].second;
    double c0 = params_[1].second;
    double two_13 = params_[2].second;
    double d2fz0 = params_[3].second;
    double c = params_[4].second;
    double Aa = params_[5].second;
    double a1a = params_[6].second;
    double b1a = params_[7].second;
    double b2a = params_[8].second;
    double b3a = params_[9].second;
    double b4a = params_[10].second;
    double c0p = params_[11].second;
    double a1p = params_[12].second;
    double b1p = params_[13].second;
    double b2p = params_[14].second;
    double b3p = params_[15].second;
    double b4p = params_[16].second;
    double c0f = params_[17].second;
    double a1f = params_[18].second;
    double b1f = params_[19].second;
    double b2f = params_[20].second;
    double b3f = params_[21].second;
    double b4f = params_[22].second;
    double gcab = params_[23].second;
    double gcaa = params_[24].second;
    double gx = params_[25].second;
    double ccab0 = params_[26].second;
    double ccab1 = params_[27].second;
    double ccab2 = params_[28].second;
    double ccab3 = params_[29].second;
    double ccab4 = params_[30].second;
    double ccaa0 = params_[31].second;
    double ccaa1 = params_[32].second;
    double ccaa2 = params_[33].second;
    double ccaa3 = params_[34].second;
    double ccaa4 = params_[35].second;
    double cx0 = params_[36].second;
    double cx1 = params_[37].second;
    double cx2 = params_[38].second;
    double cx3 = params_[39].second;
    double cx4 = params_[40].second;

    //Functional
    for (int index = 0; index < ntrue; index++) {

        //Functional Value
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t118405 = 1.0/pow(rho_a[index],1.0/3.0);
            double t118406 = c*t118405;
            double t118407 = sqrt(t118406);
            double t118408 = pow(t118406,3.0/2.0);
            double t118409 = c*c;
            double t118410 = 1.0/pow(rho_a[index],2.0/3.0);
            double t118411 = 1.0/c0p;
            double t118412 = b1p*t118407;
            double t118413 = b3p*t118408;
            double t118414 = b4p*t118410*t118409;
            double t118415 = b2p*c*t118405;
            double t118416 = t118412+t118413+t118414+t118415;
            double t118417 = 1.0/t118416;
            double t118418 = t118411*t118417*(1.0/2.0);
            double t118419 = t118418+1.0;
            double t118420 = log(t118419);
            double t118421 = a1p*c*t118405;
            double t118422 = t118421+1.0;
            double t118423 = pow(2.0,1.0/3.0);
            double t118424 = t118423*2.0;
            double t118425 = t118424-2.0;
            double t118426 = two_13*2.0;
            double t118427 = t118426-2.0;
            double t118428 = 1.0/t118427;
            double t118429 = 1.0/c0f;
            double t118430 = 1.0/pow(rho_b[index],1.0/3.0);
            double t118431 = c*t118430;
            double t118432 = sqrt(t118431);
            double t118433 = pow(t118431,3.0/2.0);
            double t118434 = 1.0/pow(rho_b[index],2.0/3.0);
            double t118435 = b1p*t118432;
            double t118436 = b3p*t118433;
            double t118437 = b4p*t118434*t118409;
            double t118438 = b2p*c*t118430;
            double t118439 = t118435+t118436+t118437+t118438;
            double t118440 = 1.0/t118439;
            double t118441 = t118411*t118440*(1.0/2.0);
            double t118442 = t118441+1.0;
            double t118443 = log(t118442);
            double t118444 = a1p*c*t118430;
            double t118445 = t118444+1.0;
            double t118446 = c0p*t118443*t118445*2.0;
            double t118447 = rho_a[index]+rho_b[index];
            double t118448 = 1.0/pow(t118447,1.0/3.0);
            double t118449 = c*t118448;
            double t118450 = sqrt(t118449);
            double t118451 = pow(t118449,3.0/2.0);
            double t118452 = 1.0/pow(t118447,2.0/3.0);
            double t118453 = b1p*t118450;
            double t118454 = b3p*t118451;
            double t118455 = b4p*t118452*t118409;
            double t118456 = b2p*c*t118448;
            double t118457 = t118453+t118454+t118455+t118456;
            double t118458 = 1.0/t118457;
            double t118459 = t118411*t118458*(1.0/2.0);
            double t118460 = t118459+1.0;
            double t118461 = log(t118460);
            double t118462 = a1p*c*t118448;
            double t118463 = t118462+1.0;
            double t118464 = c0p*t118461*t118463*2.0;
            double t118465 = rho_a[index]-rho_b[index];
            double t118466 = t118465*t118465;
            double t118467 = 1.0/t118447;
            double t118468 = t118465*t118467;
            double t118469 = 1.0/(t118447*t118447*t118447*t118447);
            double t118470 = t118466*t118466;
            double t118471 = t118468+1.0;
            double t118472 = pow(t118471,4.0/3.0);
            double t118473 = -t118468+1.0;
            double t118474 = pow(t118473,4.0/3.0);
            double t118475 = t118472+t118474-2.0;
            double t118478 = 1.0/pow(rho_a[index],8.0/3.0);
            double t118479 = gamma_aa[index]*t118478*(1.0/2.0);
            double t118480 = 1.0/pow(rho_b[index],8.0/3.0);
            double t118481 = gamma_bb[index]*t118480*(1.0/2.0);
            double t118476 = t118481+t118479;
            double t118477 = gcab*gcab;
            double t118482 = t118476*t118476;
            double t118483 = t118477*t118477;
            double t118484 = t118482*t118482;
            double t118485 = c0p*t118420*t118422*2.0;
            double t118486 = b1f*t118407;
            double t118487 = b3f*t118408;
            double t118488 = b4f*t118410*t118409;
            double t118489 = b2f*c*t118405;
            double t118490 = t118486+t118487+t118488+t118489;
            double t118491 = 1.0/t118490;
            double t118492 = t118491*t118429*(1.0/2.0);
            double t118493 = t118492+1.0;
            double t118494 = log(t118493);
            double t118495 = a1f*c*t118405;
            double t118496 = t118495+1.0;
            double t118497 = t118485-c0f*t118494*t118496*2.0;
            double t118498 = t118485-t118425*t118428*t118497;
            double t118499 = gamma_aa[index]*gamma_aa[index];
            double t118500 = gcaa*gcaa;
            double t118501 = t118499*t118499;
            double t118502 = t118500*t118500;
            double t118503 = 1.0/pow(rho_a[index],3.2E1/3.0);
            double t118504 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]);
            double t118505 = 1.0/pow(rho_a[index],1.6E1/3.0);
            double t118506 = b1f*t118432;
            double t118507 = b3f*t118433;
            double t118508 = b4f*t118434*t118409;
            double t118509 = b2f*c*t118430;
            double t118510 = t118506+t118507+t118508+t118509;
            double t118511 = 1.0/t118510;
            double t118512 = t118511*t118429*(1.0/2.0);
            double t118513 = t118512+1.0;
            double t118514 = log(t118513);
            double t118515 = a1f*c*t118430;
            double t118516 = t118515+1.0;
            double t118517 = t118446-c0f*t118514*t118516*2.0;
            double t118518 = t118446-t118425*t118517*t118428;
            double t118519 = gamma_bb[index]*gamma_bb[index];
            double t118520 = t118519*t118519;
            double t118521 = 1.0/pow(rho_b[index],3.2E1/3.0);
            double t118522 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
               rho_b[index]*rho_b[index]);
            double t118523 = 1.0/pow(rho_b[index],1.6E1/3.0);
            double t118524 = rho_a[index]*(8.334140006820045E15/1.40737488355328E14);
            double t118525 = 1.0/pow(t118524,1.0/3.0);
            double t118526 = 1.0/(omega*omega);
            double t118527 = pow(t118524,2.0/3.0);
            double t118528 = exp(-t118526*t118527);
            double t118529 = gx*gx;
            double t118530 = t118529*t118529;
            double t118531 = 1.0/omega;
            double t118532 = rho_b[index]*(8.334140006820045E15/1.40737488355328E14);
            double t118533 = 1.0/pow(t118532,1.0/3.0);
            double t118534 = omega*omega;
            double t118535 = pow(t118532,2.0/3.0);
            double t118536 = exp(-t118526*t118535);
            functional_[index] = (rho_b[index]*t118518+rho_a[index]*t118498-t118447*(t118464-t118470*t118428* \
               t118475*t118469*(t118464-c0f*log((t118429*(1.0/2.0))/(b1f*t118450+b3f*t118451+b2f*c*t118448+b4f*t118452* \
               t118409)+1.0)*(a1f*c*t118448+1.0)*2.0)+(Aa*t118428*t118475*log((1.0/2.0)/(Aa*(b1a*t118450+b3a*t118451+ \
               b2a*c*t118448+b4a*t118452*t118409))+1.0)*(t118470*t118469-1.0)*(a1a*c*t118448+1.0)*2.0)/d2fz0))*(ccab0+ \
               (ccab4*t118483*t118484)/(gcab*t118476*4.0+t118483*t118484+t118482*t118477*6.0+gcab*t118482*t118476* \
               t118477*4.0+1.0)+(ccab1*gcab*t118476)/(gcab*t118476+1.0)+(ccab2*t118482*t118477)/(gcab*t118476*2.0+ \
               t118482*t118477+1.0)+(ccab3*gcab*t118482*t118476*t118477)/(gcab*t118476*3.0+t118482*t118477*3.0+gcab* \
               t118482*t118476*t118477+1.0))-rho_b[index]*t118518*(ccaa0+(ccaa2*t118500*t118523*t118519)/(gamma_bb[index]* \
               gcaa*t118480*2.0+t118500*t118523*t118519+1.0)+(ccaa1*gamma_bb[index]*gcaa*t118480)/(gamma_bb[index]* \
               gcaa*t118480+1.0)+(ccaa4*t118502*t118520*t118521)/(gamma_bb[index]*gcaa*t118480*4.0+t118502*t118520* \
               t118521+t118500*t118523*t118519*6.0+gamma_bb[index]*gcaa*t118500*t118522*t118519*4.0+1.0)+(ccaa3*gamma_bb[index]* \
               gcaa*t118500*t118522*t118519)/(gamma_bb[index]*gcaa*t118480*3.0+t118500*t118523*t118519*3.0+gamma_bb[index]* \
               gcaa*t118500*t118522*t118519+1.0))-rho_a[index]*t118498*(ccaa0+(ccaa2*t118500*t118505*t118499)/(gamma_aa[index]* \
               gcaa*t118478*2.0+t118500*t118505*t118499+1.0)+(ccaa1*gamma_aa[index]*gcaa*t118478)/(gamma_aa[index]* \
               gcaa*t118478+1.0)+(ccaa4*t118501*t118502*t118503)/(gamma_aa[index]*gcaa*t118478*4.0+t118501*t118502* \
               t118503+t118500*t118505*t118499*6.0+gamma_aa[index]*gcaa*t118500*t118504*t118499*4.0+1.0)+(ccaa3*gamma_aa[index]* \
               gcaa*t118500*t118504*t118499)/(gamma_aa[index]*gcaa*t118478*3.0+t118500*t118505*t118499*3.0+gamma_aa[index]* \
               gcaa*t118500*t118504*t118499+1.0))-c0*pow(rho_b[index],4.0/3.0)*(omega*t118533*(erf(t118531*pow(t118532,1.0/ \
               3.0))*(3.991211251234741E15/2.251799813685248E15)+omega*t118533*(t118536-1.0/pow(t118532,2.0/3.0)* \
               t118534*(t118536-1.0)*(1.0/2.0)))*(4.0/3.0)-1.0)*(cx0+(cx2*t118523*t118519*t118529)/(gamma_bb[index]* \
               gx*t118480*2.0+t118523*t118519*t118529+1.0)+(cx1*gamma_bb[index]*gx*t118480)/(gamma_bb[index]*gx*t118480+ \
               1.0)+(cx4*t118520*t118521*t118530)/(gamma_bb[index]*gx*t118480*4.0+t118520*t118521*t118530+t118523* \
               t118519*t118529*6.0+gamma_bb[index]*gx*t118522*t118519*t118529*4.0+1.0)+(cx3*gamma_bb[index]*gx*t118522* \
               t118519*t118529)/(gamma_bb[index]*gx*t118480*3.0+t118523*t118519*t118529*3.0+gamma_bb[index]*gx*t118522* \
               t118519*t118529+1.0))-c0*pow(rho_a[index],4.0/3.0)*(omega*t118525*(erf(t118531*pow(t118524,1.0/3.0) \
               )*(3.991211251234741E15/2.251799813685248E15)+omega*t118525*(t118528-1.0/pow(t118524,2.0/3.0)*t118534* \
               (t118528-1.0)*(1.0/2.0)))*(4.0/3.0)-1.0)*(cx0+(cx2*t118505*t118529*t118499)/(gamma_aa[index]*gx*t118478* \
               2.0+t118505*t118529*t118499+1.0)+(cx1*gamma_aa[index]*gx*t118478)/(gamma_aa[index]*gx*t118478+1.0) \
               +(cx4*t118501*t118503*t118530)/(gamma_aa[index]*gx*t118478*4.0+t118501*t118503*t118530+t118505*t118529* \
               t118499*6.0+gamma_aa[index]*gx*t118504*t118529*t118499*4.0+1.0)+(cx3*gamma_aa[index]*gx*t118504*t118529* \
               t118499)/(gamma_aa[index]*gx*t118478*3.0+t118505*t118529*t118499*3.0+gamma_aa[index]*gx*t118504*t118529* \
               t118499+1.0));
        } else if (rho_a[index] > cutoff_) {
            double t122902 = 1.0/pow(rho_a[index],1.0/3.0);
            double t122903 = c*t122902;
            double t122904 = sqrt(t122903);
            double t122905 = pow(t122903,3.0/2.0);
            double t122906 = c*c;
            double t122907 = 1.0/pow(rho_a[index],2.0/3.0);
            double t122908 = 1.0/c0p;
            double t122909 = b1p*t122904;
            double t122910 = b3p*t122905;
            double t122911 = b4p*t122906*t122907;
            double t122912 = b2p*c*t122902;
            double t122913 = t122910+t122911+t122912+t122909;
            double t122914 = 1.0/t122913;
            double t122915 = t122914*t122908*(1.0/2.0);
            double t122916 = t122915+1.0;
            double t122917 = log(t122916);
            double t122918 = a1p*c*t122902;
            double t122919 = t122918+1.0;
            double t122920 = gamma_aa[index]*gamma_aa[index];
            double t122921 = gcaa*gcaa;
            double t122922 = t122920*t122920;
            double t122923 = t122921*t122921;
            double t122924 = 1.0/pow(rho_a[index],3.2E1/3.0);
            double t122925 = 1.0/pow(rho_a[index],8.0/3.0);
            double t122926 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]);
            double t122927 = 1.0/pow(rho_a[index],1.6E1/3.0);
            double t122928 = rho_a[index]*(8.334140006820045E15/1.40737488355328E14);
            double t122929 = 1.0/pow(t122928,1.0/3.0);
            double t122930 = 1.0/(omega*omega);
            double t122931 = pow(t122928,2.0/3.0);
            double t122932 = exp(-t122930*t122931);
            double t122933 = gx*gx;
            double t122934 = t122933*t122933;
            functional_[index] = -rho_a[index]*(((pow(2.0,1.0/3.0)*2.0-2.0)*(c0f*log((1.0/2.0)/(c0f*(b1f*t122904+ \
               b3f*t122905+b2f*c*t122902+b4f*t122906*t122907))+1.0)*(a1f*c*t122902+1.0)*2.0-c0p*t122917*t122919*2.0) \
               )/(two_13*2.0-2.0)+c0p*t122917*t122919*2.0)*(ccaa0+(ccaa2*t122920*t122921*t122927)/(gamma_aa[index]* \
               gcaa*t122925*2.0+t122920*t122921*t122927+1.0)+(ccaa1*gamma_aa[index]*gcaa*t122925)/(gamma_aa[index]* \
               gcaa*t122925+1.0)+(ccaa4*t122922*t122923*t122924)/(gamma_aa[index]*gcaa*t122925*4.0+t122920*t122921* \
               t122927*6.0+t122922*t122923*t122924+gamma_aa[index]*gcaa*t122920*t122921*t122926*4.0+1.0)+(ccaa3*gamma_aa[index]* \
               gcaa*t122920*t122921*t122926)/(gamma_aa[index]*gcaa*t122925*3.0+t122920*t122921*t122927*3.0+gamma_aa[index]* \
               gcaa*t122920*t122921*t122926+1.0))-c0*pow(rho_a[index],4.0/3.0)*(omega*t122929*(erf(pow(t122928,1.0/ \
               3.0)/omega)*(3.991211251234741E15/2.251799813685248E15)+omega*t122929*(t122932-(omega*omega)*1.0/pow(t122928,2.0/ \
               3.0)*(t122932-1.0)*(1.0/2.0)))*(4.0/3.0)-1.0)*(cx0+(cx2*t122920*t122933*t122927)/(gamma_aa[index]* \
               gx*t122925*2.0+t122920*t122933*t122927+1.0)+(cx1*gamma_aa[index]*gx*t122925)/(gamma_aa[index]*gx*t122925+ \
               1.0)+(cx4*t122922*t122924*t122934)/(gamma_aa[index]*gx*t122925*4.0+t122920*t122933*t122927*6.0+t122922* \
               t122924*t122934+gamma_aa[index]*gx*t122920*t122933*t122926*4.0+1.0)+(cx3*gamma_aa[index]*gx*t122920* \
               t122933*t122926)/(gamma_aa[index]*gx*t122925*3.0+t122920*t122933*t122927*3.0+gamma_aa[index]*gx*t122920* \
               t122933*t122926+1.0));
        } else if (rho_b[index] > cutoff_) {
            double t122147 = 1.0/pow(rho_b[index],1.0/3.0);
            double t122148 = c*t122147;
            double t122149 = sqrt(t122148);
            double t122150 = pow(t122148,3.0/2.0);
            double t122151 = c*c;
            double t122152 = 1.0/pow(rho_b[index],2.0/3.0);
            double t122153 = 1.0/c0p;
            double t122154 = b1p*t122149;
            double t122155 = b3p*t122150;
            double t122156 = b4p*t122151*t122152;
            double t122157 = b2p*c*t122147;
            double t122158 = t122154+t122155+t122156+t122157;
            double t122159 = 1.0/t122158;
            double t122160 = t122153*t122159*(1.0/2.0);
            double t122161 = t122160+1.0;
            double t122162 = log(t122161);
            double t122163 = a1p*c*t122147;
            double t122164 = t122163+1.0;
            double t122165 = gamma_bb[index]*gamma_bb[index];
            double t122166 = gcaa*gcaa;
            double t122167 = t122165*t122165;
            double t122168 = t122166*t122166;
            double t122169 = 1.0/pow(rho_b[index],3.2E1/3.0);
            double t122170 = 1.0/pow(rho_b[index],8.0/3.0);
            double t122171 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
               rho_b[index]*rho_b[index]);
            double t122172 = 1.0/pow(rho_b[index],1.6E1/3.0);
            double t122173 = rho_b[index]*(8.334140006820045E15/1.40737488355328E14);
            double t122174 = 1.0/pow(t122173,1.0/3.0);
            double t122175 = 1.0/(omega*omega);
            double t122176 = pow(t122173,2.0/3.0);
            double t122177 = exp(-t122175*t122176);
            double t122178 = gx*gx;
            double t122179 = t122178*t122178;
            functional_[index] = -rho_b[index]*(((pow(2.0,1.0/3.0)*2.0-2.0)*(c0f*log((1.0/2.0)/(c0f*(b1f*t122149+ \
               b3f*t122150+b2f*c*t122147+b4f*t122151*t122152))+1.0)*(a1f*c*t122147+1.0)*2.0-c0p*t122162*t122164*2.0) \
               )/(two_13*2.0-2.0)+c0p*t122162*t122164*2.0)*(ccaa0+(ccaa2*t122172*t122165*t122166)/(gamma_bb[index]* \
               gcaa*t122170*2.0+t122172*t122165*t122166+1.0)+(ccaa1*gamma_bb[index]*gcaa*t122170)/(gamma_bb[index]* \
               gcaa*t122170+1.0)+(ccaa4*t122167*t122168*t122169)/(gamma_bb[index]*gcaa*t122170*4.0+t122172*t122165* \
               t122166*6.0+t122167*t122168*t122169+gamma_bb[index]*gcaa*t122171*t122165*t122166*4.0+1.0)+(ccaa3*gamma_bb[index]* \
               gcaa*t122171*t122165*t122166)/(gamma_bb[index]*gcaa*t122170*3.0+t122172*t122165*t122166*3.0+gamma_bb[index]* \
               gcaa*t122171*t122165*t122166+1.0))-c0*pow(rho_b[index],4.0/3.0)*(omega*t122174*(erf(pow(t122173,1.0/ \
               3.0)/omega)*(3.991211251234741E15/2.251799813685248E15)+omega*t122174*(t122177-(omega*omega)*1.0/pow(t122173,2.0/ \
               3.0)*(t122177-1.0)*(1.0/2.0)))*(4.0/3.0)-1.0)*(cx0+(cx2*t122172*t122165*t122178)/(gamma_bb[index]* \
               gx*t122170*2.0+t122172*t122165*t122178+1.0)+(cx1*gamma_bb[index]*gx*t122170)/(gamma_bb[index]*gx*t122170+ \
               1.0)+(cx4*t122167*t122169*t122179)/(gamma_bb[index]*gx*t122170*4.0+t122172*t122165*t122178*6.0+t122167* \
               t122169*t122179+gamma_bb[index]*gx*t122171*t122165*t122178*4.0+1.0)+(cx3*gamma_bb[index]*gx*t122171* \
               t122165*t122178)/(gamma_bb[index]*gx*t122170*3.0+t122172*t122165*t122178*3.0+gamma_bb[index]*gx*t122171* \
               t122165*t122178+1.0));
        } else {
            functional_[index] = 0.0;
        } 

    }
    //First Partials
    for (int index = 0; index < ntrue && deriv_ >= 1; index++) {

        //V_rho_a
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t118538 = 1.0/pow(rho_a[index],1.0/3.0);
            double t118539 = c*t118538;
            double t118540 = sqrt(t118539);
            double t118541 = pow(t118539,3.0/2.0);
            double t118542 = c*c;
            double t118543 = 1.0/pow(rho_a[index],2.0/3.0);
            double t118544 = 1.0/c0p;
            double t118545 = b1p*t118540;
            double t118546 = b3p*t118541;
            double t118547 = b4p*t118542*t118543;
            double t118548 = b2p*c*t118538;
            double t118549 = t118545+t118546+t118547+t118548;
            double t118550 = 1.0/t118549;
            double t118551 = t118550*t118544*(1.0/2.0);
            double t118552 = t118551+1.0;
            double t118553 = log(t118552);
            double t118554 = a1p*c*t118538;
            double t118555 = t118554+1.0;
            double t118556 = gamma_aa[index]*gamma_aa[index];
            double t118557 = gcaa*gcaa;
            double t118558 = t118556*t118556;
            double t118559 = t118557*t118557;
            double t118560 = 1.0/pow(rho_a[index],3.2E1/3.0);
            double t118561 = 1.0/pow(rho_a[index],8.0/3.0);
            double t118562 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]);
            double t118563 = 1.0/pow(rho_a[index],1.6E1/3.0);
            double t118564 = pow(2.0,1.0/3.0);
            double t118565 = t118564*2.0;
            double t118566 = t118565-2.0;
            double t118567 = two_13*2.0;
            double t118568 = t118567-2.0;
            double t118569 = 1.0/t118568;
            double t118570 = 1.0/c0f;
            double t118571 = b1f*t118540;
            double t118572 = b3f*t118541;
            double t118573 = b4f*t118542*t118543;
            double t118574 = b2f*c*t118538;
            double t118575 = t118571+t118572+t118573+t118574;
            double t118576 = 1.0/t118575;
            double t118577 = t118570*t118576*(1.0/2.0);
            double t118578 = t118577+1.0;
            double t118579 = log(t118578);
            double t118580 = a1f*c*t118538;
            double t118581 = t118580+1.0;
            double t118582 = c0f*t118581*t118579*2.0;
            double t118583 = c0p*t118553*t118555*2.0;
            double t118584 = 1.0/pow(rho_b[index],1.0/3.0);
            double t118585 = c*t118584;
            double t118586 = sqrt(t118585);
            double t118587 = pow(t118585,3.0/2.0);
            double t118588 = 1.0/pow(rho_b[index],2.0/3.0);
            double t118589 = b1p*t118586;
            double t118590 = b3p*t118587;
            double t118591 = b4p*t118542*t118588;
            double t118592 = b2p*c*t118584;
            double t118593 = t118590+t118591+t118592+t118589;
            double t118594 = 1.0/t118593;
            double t118595 = t118544*t118594*(1.0/2.0);
            double t118596 = t118595+1.0;
            double t118597 = log(t118596);
            double t118598 = a1p*c*t118584;
            double t118599 = t118598+1.0;
            double t118600 = c0p*t118597*t118599*2.0;
            double t118601 = rho_a[index]+rho_b[index];
            double t118602 = 1.0/pow(t118601,1.0/3.0);
            double t118603 = c*t118602;
            double t118604 = sqrt(t118603);
            double t118605 = pow(t118603,3.0/2.0);
            double t118606 = 1.0/pow(t118601,2.0/3.0);
            double t118607 = b1p*t118604;
            double t118608 = b3p*t118605;
            double t118609 = b4p*t118542*t118606;
            double t118610 = b2p*c*t118602;
            double t118611 = t118610+t118607+t118608+t118609;
            double t118612 = 1.0/t118611;
            double t118613 = t118612*t118544*(1.0/2.0);
            double t118614 = t118613+1.0;
            double t118615 = log(t118614);
            double t118616 = a1p*c*t118602;
            double t118617 = t118616+1.0;
            double t118618 = c0p*t118615*t118617*2.0;
            double t118619 = rho_a[index]-rho_b[index];
            double t118620 = t118619*t118619;
            double t118621 = 1.0/t118601;
            double t118622 = t118621*t118619;
            double t118623 = 1.0/(t118601*t118601*t118601*t118601);
            double t118624 = t118620*t118620;
            double t118625 = t118622+1.0;
            double t118626 = pow(t118625,4.0/3.0);
            double t118627 = -t118622+1.0;
            double t118628 = pow(t118627,4.0/3.0);
            double t118629 = t118626+t118628-2.0;
            double t118630 = gcab*gcab;
            double t118634 = gamma_aa[index]*t118561*(1.0/2.0);
            double t118635 = 1.0/pow(rho_b[index],8.0/3.0);
            double t118636 = gamma_bb[index]*t118635*(1.0/2.0);
            double t118631 = t118634+t118636;
            double t118632 = t118631*t118631;
            double t118633 = 1.0/pow(rho_a[index],1.1E1/3.0);
            double t118637 = t118630*t118630;
            double t118638 = t118632*t118632;
            double t118639 = t118630*t118632*6.0;
            double t118640 = gcab*t118630*t118631*t118632*4.0;
            double t118641 = t118637*t118638;
            double t118642 = gcab*t118631*4.0;
            double t118643 = t118640+t118641+t118642+t118639+1.0;
            double t118644 = gcab*t118631;
            double t118645 = t118644+1.0;
            double t118646 = t118630*t118632;
            double t118647 = gcab*t118631*2.0;
            double t118648 = t118646+t118647+1.0;
            double t118649 = t118630*t118632*3.0;
            double t118650 = gcab*t118630*t118631*t118632;
            double t118651 = gcab*t118631*3.0;
            double t118652 = t118650+t118651+t118649+1.0;
            double t118653 = 1.0/t118648;
            double t118654 = 1.0/t118652;
            double t118655 = 1.0/t118645;
            double t118656 = 1.0/t118643;
            double t118657 = 1.0/pow(t118601,4.0/3.0);
            double t118658 = b1f*t118604;
            double t118659 = b3f*t118605;
            double t118660 = b4f*t118542*t118606;
            double t118661 = b2f*c*t118602;
            double t118662 = t118660+t118661+t118658+t118659;
            double t118663 = 1.0/t118662;
            double t118664 = t118570*t118663*(1.0/2.0);
            double t118665 = t118664+1.0;
            double t118666 = log(t118665);
            double t118667 = a1f*c*t118602;
            double t118668 = t118667+1.0;
            double t118670 = c0f*t118666*t118668*2.0;
            double t118669 = -t118670+t118618;
            double t118671 = 1.0/(t118601*t118601);
            double t118699 = t118671*t118619;
            double t118672 = t118621-t118699;
            double t118673 = t118670-t118618;
            double t118674 = 1.0/pow(t118601,5.0/3.0);
            double t118675 = 1.0/sqrt(t118603);
            double t118676 = 1.0/t118614;
            double t118677 = 1.0/(t118611*t118611);
            double t118678 = b4p*t118542*t118674*(2.0/3.0);
            double t118679 = b2p*c*t118657*(1.0/3.0);
            double t118680 = b1p*c*t118657*t118675*(1.0/6.0);
            double t118681 = b3p*c*t118604*t118657*(1.0/2.0);
            double t118682 = t118680+t118681+t118678+t118679;
            double t118683 = t118617*t118682*t118676*t118677;
            double t118684 = 1.0/d2fz0;
            double t118685 = 1.0/Aa;
            double t118686 = b1a*t118604;
            double t118687 = b3a*t118605;
            double t118688 = b4a*t118542*t118606;
            double t118689 = b2a*c*t118602;
            double t118690 = t118686+t118687+t118688+t118689;
            double t118691 = 1.0/t118690;
            double t118692 = t118691*t118685*(1.0/2.0);
            double t118693 = t118692+1.0;
            double t118694 = log(t118693);
            double t118695 = a1a*c*t118602;
            double t118696 = t118695+1.0;
            double t118697 = 1.0/(t118601*t118601*t118601*t118601*t118601);
            double t118698 = pow(t118625,1.0/3.0);
            double t118700 = t118672*t118698*(4.0/3.0);
            double t118701 = pow(t118627,1.0/3.0);
            double t118702 = t118700-t118701*t118672*(4.0/3.0);
            double t118703 = t118623*t118624;
            double t118704 = t118703-1.0;
            double t118705 = 1.0/pow(rho_a[index],4.0/3.0);
            double t118706 = 1.0/pow(rho_a[index],5.0/3.0);
            double t118707 = 1.0/sqrt(t118539);
            double t118708 = 1.0/t118552;
            double t118709 = 1.0/(t118549*t118549);
            double t118710 = b4p*t118542*t118706*(2.0/3.0);
            double t118711 = b2p*c*t118705*(1.0/3.0);
            double t118712 = b1p*c*t118705*t118707*(1.0/6.0);
            double t118713 = b3p*c*t118540*t118705*(1.0/2.0);
            double t118714 = t118710+t118711+t118712+t118713;
            double t118715 = t118714*t118555*t118708*t118709;
            double t118716 = t118582-t118583;
            double t118717 = t118716*t118566*t118569;
            double t118718 = Aa*t118704*t118629*t118684*t118694*t118569*t118696*2.0;
            double t118719 = t118717+t118583;
            double t118720 = gamma_aa[index]*gcaa*t118561*4.0;
            double t118721 = gamma_aa[index]*gcaa*t118562*t118556*t118557*4.0;
            double t118722 = t118563*t118556*t118557*6.0;
            double t118723 = t118560*t118558*t118559;
            double t118724 = t118720+t118721+t118722+t118723+1.0;
            double t118725 = 1.0/t118724;
            double t118726 = gamma_aa[index]*gcaa*t118561;
            double t118727 = t118726+1.0;
            double t118728 = 1.0/t118727;
            double t118729 = gamma_aa[index]*gcaa*t118561*3.0;
            double t118730 = gamma_aa[index]*gcaa*t118562*t118556*t118557;
            double t118731 = t118563*t118556*t118557*3.0;
            double t118732 = t118730+t118731+t118729+1.0;
            double t118733 = 1.0/t118732;
            double t118734 = gamma_aa[index]*gcaa*t118561*2.0;
            double t118735 = t118563*t118556*t118557;
            double t118736 = t118734+t118735+1.0;
            double t118737 = 1.0/t118736;
            double t118738 = 1.0/pow(rho_a[index],1.9E1/3.0);
            double t118739 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]*rho_a[index]);
            double t118740 = 1.0/pow(rho_a[index],3.5E1/3.0);
            double t118741 = 1.0/t118578;
            double t118742 = 1.0/(t118575*t118575);
            double t118743 = b4f*t118542*t118706*(2.0/3.0);
            double t118744 = b2f*c*t118705*(1.0/3.0);
            double t118745 = b1f*c*t118705*t118707*(1.0/6.0);
            double t118746 = b3f*c*t118540*t118705*(1.0/2.0);
            double t118747 = t118743+t118744+t118745+t118746;
            double t118748 = a1f*c*c0f*t118705*t118579*(2.0/3.0);
            double t118749 = a1p*c*c0p*t118705*t118553*(2.0/3.0);
            double t118750 = ccaa4*t118560*t118725*t118558*t118559;
            double t118751 = ccaa1*gamma_aa[index]*gcaa*t118561*t118728;
            double t118752 = ccaa3*gamma_aa[index]*gcaa*t118562*t118733*t118556*t118557;
            double t118753 = ccaa2*t118563*t118556*t118557*t118737;
            double t118754 = ccaa0+t118750+t118751+t118752+t118753;
            double t118755 = rho_a[index]*(8.334140006820045E15/1.40737488355328E14);
            double t118756 = 1.0/(omega*omega);
            double t118757 = pow(t118755,2.0/3.0);
            double t118760 = t118756*t118757;
            double t118758 = exp(-t118760);
            double t118759 = 1.0/pow(t118755,1.0/3.0);
            double t118761 = omega*omega;
            double t118762 = t118758-1.0;
            double t118763 = 1.0/pow(t118755,2.0/3.0);
            double t118764 = 1.0/pow(t118755,4.0/3.0);
            double t118765 = 1.0/omega;
            double t118773 = t118761*t118762*t118763*(1.0/2.0);
            double t118766 = -t118773+t118758;
            double t118767 = gx*gx;
            double t118768 = t118767*t118767;
            double t118769 = pow(t118755,1.0/3.0);
            double t118770 = t118765*t118769;
            double t118771 = erf(t118770);
            double t118772 = t118771*(3.991211251234741E15/2.251799813685248E15);
            double t118774 = omega*t118766*t118759;
            double t118775 = t118772+t118774;
            double t118776 = gamma_aa[index]*gx*t118561*4.0;
            double t118777 = gamma_aa[index]*gx*t118562*t118556*t118767*4.0;
            double t118778 = t118563*t118556*t118767*6.0;
            double t118779 = t118560*t118558*t118768;
            double t118780 = t118776+t118777+t118778+t118779+1.0;
            double t118781 = 1.0/t118780;
            double t118782 = cx4*t118560*t118781*t118558*t118768;
            double t118783 = gamma_aa[index]*gx*t118561;
            double t118784 = t118783+1.0;
            double t118785 = 1.0/t118784;
            double t118786 = cx1*gamma_aa[index]*gx*t118561*t118785;
            double t118787 = gamma_aa[index]*gx*t118561*3.0;
            double t118788 = gamma_aa[index]*gx*t118562*t118556*t118767;
            double t118789 = t118563*t118556*t118767*3.0;
            double t118790 = t118787+t118788+t118789+1.0;
            double t118791 = 1.0/t118790;
            double t118792 = cx3*gamma_aa[index]*gx*t118562*t118556*t118791*t118767;
            double t118793 = gamma_aa[index]*gx*t118561*2.0;
            double t118794 = t118563*t118556*t118767;
            double t118795 = t118793+t118794+1.0;
            double t118796 = 1.0/t118795;
            double t118797 = cx2*t118563*t118556*t118767*t118796;
            double t118798 = cx0+t118782+t118792+t118786+t118797;
            double t118799 = pow(rho_a[index],4.0/3.0);
            double t118800 = omega*t118775*t118759*(4.0/3.0);
            double t118801 = t118800-1.0;
            v_rho_a_[index] = -(ccab0+ccab1*gcab*t118631*t118655+ccab2*t118630*t118632*t118653+ccab4*t118637* \
               t118638*t118656+ccab3*gcab*t118630*t118631*t118632*t118654)*(t118618-t118717-t118583+t118718+rho_a[index]* \
               (-t118715+t118749+t118566*t118569*(t118715+t118748-t118741*t118742*t118581*t118747-a1p*c*c0p*t118705* \
               t118553*(2.0/3.0)))-t118601*(-t118683+t118623*t118624*t118629*t118569*(t118683-(1.0/(t118662*t118662) \
               *t118668*(b2f*c*t118657*(1.0/3.0)+b4f*t118542*t118674*(2.0/3.0)+b1f*c*t118657*t118675*(1.0/6.0)+b3f* \
               c*t118604*t118657*(1.0/2.0)))/t118665+a1f*c*c0f*t118657*t118666*(2.0/3.0)-a1p*c*c0p*t118615*t118657* \
               (2.0/3.0))+a1p*c*c0p*t118615*t118657*(2.0/3.0)-t118702*t118623*t118624*t118673*t118569+t118624*t118673* \
               t118629*t118569*t118697*4.0+t118620*t118623*t118619*t118629*t118569*t118669*4.0+Aa*t118629*t118684* \
               t118694*t118569*t118696*(t118624*t118697*4.0-t118620*t118623*t118619*4.0)*2.0-Aa*t118702*t118704*t118684* \
               t118694*t118569*t118696*2.0-(t118704*1.0/(t118690*t118690)*t118629*t118684*t118569*t118696*(b2a*c* \
               t118657*(1.0/3.0)+b4a*t118542*t118674*(2.0/3.0)+b1a*c*t118657*t118675*(1.0/6.0)+b3a*c*t118604*t118657* \
               (1.0/2.0)))/t118693+Aa*a1a*c*t118704*t118629*t118657*t118684*t118694*t118569*(2.0/3.0))+t118623*t118624* \
               t118673*t118629*t118569)-t118754*(t118583+t118566*t118569*(t118582-c0p*t118553*t118555*2.0))-(rho_a[index]* \
               t118719+rho_b[index]*(t118600-t118566*t118569*(t118600-c0f*log((t118570*(1.0/2.0))/(b1f*t118586+b3f* \
               t118587+b2f*c*t118584+b4f*t118542*t118588)+1.0)*(a1f*c*t118584+1.0)*2.0))-t118601*(t118618+t118718- \
               t118623*t118624*t118629*t118569*t118669))*(ccab1*gamma_aa[index]*gcab*t118633*t118655*(4.0/3.0)-ccab2* \
               t118630*t118632*1.0/(t118648*t118648)*(gamma_aa[index]*gcab*t118633*(8.0/3.0)+gamma_aa[index]*t118630* \
               t118631*t118633*(8.0/3.0))-ccab4*1.0/(t118643*t118643)*t118637*t118638*(gamma_aa[index]*gcab*t118633* \
               (1.6E1/3.0)+gamma_aa[index]*t118630*t118631*t118633*1.6E1+gamma_aa[index]*gcab*t118630*t118632*t118633* \
               1.6E1+gamma_aa[index]*t118631*t118632*t118633*t118637*(1.6E1/3.0))-ccab1*gamma_aa[index]*t118630*t118631* \
               t118633*1.0/(t118645*t118645)*(4.0/3.0)+ccab2*gamma_aa[index]*t118630*t118631*t118633*t118653*(8.0/ \
               3.0)-ccab3*gcab*t118630*t118631*t118632*1.0/(t118652*t118652)*(gamma_aa[index]*gcab*t118633*4.0+gamma_aa[index]* \
               t118630*t118631*t118633*8.0+gamma_aa[index]*gcab*t118630*t118632*t118633*4.0)+ccab3*gamma_aa[index]* \
               gcab*t118630*t118632*t118633*t118654*4.0+ccab4*gamma_aa[index]*t118631*t118632*t118633*t118637*t118656* \
               (1.6E1/3.0))+rho_a[index]*t118719*(ccaa1*gamma_aa[index]*gcaa*t118633*t118728*(8.0/3.0)+ccaa4*t118740* \
               t118725*t118558*t118559*(3.2E1/3.0)+ccaa2*t118556*t118557*t118737*t118738*(1.6E1/3.0)-ccaa1*t118556* \
               1.0/(t118727*t118727)*t118557*t118738*(8.0/3.0)-ccaa2*t118563*t118556*1.0/(t118736*t118736)*t118557* \
               (gamma_aa[index]*gcaa*t118633*(1.6E1/3.0)+t118556*t118557*t118738*(1.6E1/3.0))-ccaa4*t118560*1.0/(t118724* \
               t118724)*t118558*t118559*(gamma_aa[index]*gcaa*t118633*(3.2E1/3.0)+t118740*t118558*t118559*(3.2E1/ \
               3.0)+t118556*t118557*t118738*3.2E1+gamma_aa[index]*gcaa*t118556*t118557*t118739*3.2E1)+ccaa3*gamma_aa[index]* \
               gcaa*t118733*t118556*t118557*t118739*8.0-ccaa3*gamma_aa[index]*gcaa*1.0/(t118732*t118732)*t118562* \
               t118556*t118557*(gamma_aa[index]*gcaa*t118633*8.0+t118556*t118557*t118738*1.6E1+gamma_aa[index]*gcaa* \
               t118556*t118557*t118739*8.0))+rho_a[index]*t118754*(-t118715+t118749+t118566*t118569*(t118715+t118748- \
               t118749-t118741*t118742*t118581*t118747))-c0*t118798*t118799*(omega*t118759*(omega*t118764*t118766* \
               (-2.778046668940015E15/1.40737488355328E14)+omega*t118759*((t118758*(1.0/3.0))/rho_a[index]+t118761* \
               t118762*1.0/pow(t118755,5.0/3.0)*(2.778046668940015E15/1.40737488355328E14)-t118756*t118758*t118759* \
               (2.778046668940015E15/7.0368744177664E13))+1.0/sqrt(3.141592653589793)*t118763*t118765*t118758*(1.108777112152858E31/ \
               1.584563250285287E29))*(4.0/3.0)-omega*t118764*t118775*(2.778046668940015E15/1.05553116266496E14)) \
               -c0*pow(rho_a[index],1.0/3.0)*t118801*t118798*(4.0/3.0)+c0*t118801*t118799*(cx1*gamma_aa[index]*gx* \
               t118633*t118785*(8.0/3.0)+cx2*t118556*t118738*t118767*t118796*(1.6E1/3.0)+cx4*t118740*t118781*t118558* \
               t118768*(3.2E1/3.0)-cx1*t118556*t118738*1.0/(t118784*t118784)*t118767*(8.0/3.0)-cx2*t118563*t118556* \
               t118767*1.0/(t118795*t118795)*(gamma_aa[index]*gx*t118633*(1.6E1/3.0)+t118556*t118738*t118767*(1.6E1/ \
               3.0))-cx4*t118560*1.0/(t118780*t118780)*t118558*t118768*(gamma_aa[index]*gx*t118633*(3.2E1/3.0)+t118740* \
               t118558*t118768*(3.2E1/3.0)+t118556*t118738*t118767*3.2E1+gamma_aa[index]*gx*t118556*t118739*t118767* \
               3.2E1)+cx3*gamma_aa[index]*gx*t118556*t118791*t118739*t118767*8.0-cx3*gamma_aa[index]*gx*t118562*t118556* \
               1.0/(t118790*t118790)*t118767*(gamma_aa[index]*gx*t118633*8.0+t118556*t118738*t118767*1.6E1+gamma_aa[index]* \
               gx*t118556*t118739*t118767*8.0));
        } else if (rho_a[index] > cutoff_) {
            double t122936 = 1.0/pow(rho_a[index],1.0/3.0);
            double t122937 = c*t122936;
            double t122938 = sqrt(t122937);
            double t122939 = pow(t122937,3.0/2.0);
            double t122940 = c*c;
            double t122941 = 1.0/pow(rho_a[index],2.0/3.0);
            double t122942 = 1.0/c0p;
            double t122943 = b1p*t122938;
            double t122944 = b3p*t122939;
            double t122945 = b4p*t122940*t122941;
            double t122946 = b2p*c*t122936;
            double t122947 = t122943+t122944+t122945+t122946;
            double t122948 = 1.0/t122947;
            double t122949 = t122942*t122948*(1.0/2.0);
            double t122950 = t122949+1.0;
            double t122951 = log(t122950);
            double t122952 = a1p*c*t122936;
            double t122953 = t122952+1.0;
            double t122954 = gamma_aa[index]*gamma_aa[index];
            double t122955 = gcaa*gcaa;
            double t122956 = t122954*t122954;
            double t122957 = t122955*t122955;
            double t122958 = 1.0/pow(rho_a[index],3.2E1/3.0);
            double t122959 = 1.0/pow(rho_a[index],8.0/3.0);
            double t122960 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]);
            double t122961 = 1.0/pow(rho_a[index],1.6E1/3.0);
            double t122962 = pow(2.0,1.0/3.0);
            double t122963 = t122962*2.0;
            double t122964 = t122963-2.0;
            double t122965 = two_13*2.0;
            double t122966 = t122965-2.0;
            double t122967 = 1.0/t122966;
            double t122968 = 1.0/c0f;
            double t122969 = b1f*t122938;
            double t122970 = b3f*t122939;
            double t122971 = b4f*t122940*t122941;
            double t122972 = b2f*c*t122936;
            double t122973 = t122970+t122971+t122972+t122969;
            double t122974 = 1.0/t122973;
            double t122975 = t122974*t122968*(1.0/2.0);
            double t122976 = t122975+1.0;
            double t122977 = log(t122976);
            double t122978 = a1f*c*t122936;
            double t122979 = t122978+1.0;
            double t122980 = c0f*t122977*t122979*2.0;
            double t122981 = c0p*t122951*t122953*2.0;
            double t122982 = gamma_aa[index]*gcaa*t122959*4.0;
            double t122983 = gamma_aa[index]*gcaa*t122960*t122954*t122955*4.0;
            double t122984 = t122961*t122954*t122955*6.0;
            double t122985 = t122956*t122957*t122958;
            double t122986 = t122982+t122983+t122984+t122985+1.0;
            double t122987 = 1.0/t122986;
            double t122988 = gamma_aa[index]*gcaa*t122959;
            double t122989 = t122988+1.0;
            double t122990 = 1.0/t122989;
            double t122991 = gamma_aa[index]*gcaa*t122959*3.0;
            double t122992 = gamma_aa[index]*gcaa*t122960*t122954*t122955;
            double t122993 = t122961*t122954*t122955*3.0;
            double t122994 = t122991+t122992+t122993+1.0;
            double t122995 = 1.0/t122994;
            double t122996 = gamma_aa[index]*gcaa*t122959*2.0;
            double t122997 = t122961*t122954*t122955;
            double t122998 = t122996+t122997+1.0;
            double t122999 = 1.0/t122998;
            double t123000 = 1.0/pow(rho_a[index],1.9E1/3.0);
            double t123001 = 1.0/pow(rho_a[index],1.1E1/3.0);
            double t123002 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]*rho_a[index]);
            double t123003 = 1.0/pow(rho_a[index],3.5E1/3.0);
            double t123004 = 1.0/pow(rho_a[index],4.0/3.0);
            double t123005 = 1.0/pow(rho_a[index],5.0/3.0);
            double t123006 = 1.0/sqrt(t122937);
            double t123007 = 1.0/t122950;
            double t123008 = 1.0/(t122947*t122947);
            double t123009 = b4p*t123005*t122940*(2.0/3.0);
            double t123010 = b2p*c*t123004*(1.0/3.0);
            double t123011 = b1p*c*t123004*t123006*(1.0/6.0);
            double t123012 = b3p*c*t123004*t122938*(1.0/2.0);
            double t123013 = t123010+t123011+t123012+t123009;
            double t123014 = t123013*t123007*t123008*t122953;
            double t123015 = ccaa4*t122956*t122957*t122958*t122987;
            double t123016 = ccaa1*gamma_aa[index]*gcaa*t122990*t122959;
            double t123017 = ccaa3*gamma_aa[index]*gcaa*t122960*t122954*t122955*t122995;
            double t123018 = ccaa2*t122961*t122954*t122955*t122999;
            double t123019 = ccaa0+t123015+t123016+t123017+t123018;
            double t123020 = rho_a[index]*(8.334140006820045E15/1.40737488355328E14);
            double t123021 = 1.0/(omega*omega);
            double t123022 = pow(t123020,2.0/3.0);
            double t123025 = t123021*t123022;
            double t123023 = exp(-t123025);
            double t123024 = 1.0/pow(t123020,1.0/3.0);
            double t123026 = omega*omega;
            double t123027 = t123023-1.0;
            double t123028 = 1.0/pow(t123020,2.0/3.0);
            double t123029 = 1.0/pow(t123020,4.0/3.0);
            double t123030 = 1.0/omega;
            double t123038 = t123026*t123027*t123028*(1.0/2.0);
            double t123031 = t123023-t123038;
            double t123032 = gx*gx;
            double t123033 = t123032*t123032;
            double t123034 = pow(t123020,1.0/3.0);
            double t123035 = t123030*t123034;
            double t123036 = erf(t123035);
            double t123037 = t123036*(3.991211251234741E15/2.251799813685248E15);
            double t123039 = omega*t123031*t123024;
            double t123040 = t123037+t123039;
            double t123041 = gamma_aa[index]*gx*t122959*4.0;
            double t123042 = gamma_aa[index]*gx*t123032*t122960*t122954*4.0;
            double t123043 = t123032*t122961*t122954*6.0;
            double t123044 = t123033*t122956*t122958;
            double t123045 = t123041+t123042+t123043+t123044+1.0;
            double t123046 = 1.0/t123045;
            double t123047 = cx4*t123033*t123046*t122956*t122958;
            double t123048 = gamma_aa[index]*gx*t122959;
            double t123049 = t123048+1.0;
            double t123050 = 1.0/t123049;
            double t123051 = cx1*gamma_aa[index]*gx*t123050*t122959;
            double t123052 = gamma_aa[index]*gx*t122959*3.0;
            double t123053 = gamma_aa[index]*gx*t123032*t122960*t122954;
            double t123054 = t123032*t122961*t122954*3.0;
            double t123055 = t123052+t123053+t123054+1.0;
            double t123056 = 1.0/t123055;
            double t123057 = cx3*gamma_aa[index]*gx*t123032*t123056*t122960*t122954;
            double t123058 = gamma_aa[index]*gx*t122959*2.0;
            double t123059 = t123032*t122961*t122954;
            double t123060 = t123058+t123059+1.0;
            double t123061 = 1.0/t123060;
            double t123062 = cx2*t123032*t123061*t122961*t122954;
            double t123063 = cx0+t123051+t123062+t123047+t123057;
            double t123064 = pow(rho_a[index],4.0/3.0);
            double t123065 = omega*t123040*t123024*(4.0/3.0);
            double t123066 = t123065-1.0;
            v_rho_a_[index] = -t123019*(t122981+t122964*t122967*(t122980-c0p*t122951*t122953*2.0))+rho_a[index]* \
               t123019*(-t123014+t122964*t122967*(t123014-(1.0/(t122973*t122973)*t122979*(b2f*c*t123004*(1.0/3.0) \
               +b4f*t123005*t122940*(2.0/3.0)+b1f*c*t123004*t123006*(1.0/6.0)+b3f*c*t123004*t122938*(1.0/2.0)))/t122976+ \
               a1f*c*c0f*t123004*t122977*(2.0/3.0)-a1p*c*c0p*t123004*t122951*(2.0/3.0))+a1p*c*c0p*t123004*t122951* \
               (2.0/3.0))+rho_a[index]*(t122981+t122964*t122967*(t122980-t122981))*(ccaa1*gamma_aa[index]*gcaa*t123001* \
               t122990*(8.0/3.0)+ccaa2*t123000*t122954*t122955*t122999*(1.6E1/3.0)+ccaa4*t123003*t122956*t122957* \
               t122987*(3.2E1/3.0)-ccaa1*t123000*t122954*t122955*1.0/(t122989*t122989)*(8.0/3.0)-ccaa2*t122961*t122954* \
               t122955*1.0/(t122998*t122998)*(gamma_aa[index]*gcaa*t123001*(1.6E1/3.0)+t123000*t122954*t122955*(1.6E1/ \
               3.0))-ccaa4*t122956*t122957*t122958*1.0/(t122986*t122986)*(gamma_aa[index]*gcaa*t123001*(3.2E1/3.0) \
               +t123000*t122954*t122955*3.2E1+t123003*t122956*t122957*(3.2E1/3.0)+gamma_aa[index]*gcaa*t123002*t122954* \
               t122955*3.2E1)+ccaa3*gamma_aa[index]*gcaa*t123002*t122954*t122955*t122995*8.0-ccaa3*gamma_aa[index]* \
               gcaa*t122960*t122954*t122955*1.0/(t122994*t122994)*(gamma_aa[index]*gcaa*t123001*8.0+t123000*t122954* \
               t122955*1.6E1+gamma_aa[index]*gcaa*t123002*t122954*t122955*8.0))-c0*t123063*t123064*(omega*t123024* \
               (omega*t123031*t123029*(-2.778046668940015E15/1.40737488355328E14)+omega*t123024*((t123023*(1.0/3.0) \
               )/rho_a[index]+1.0/pow(t123020,5.0/3.0)*t123026*t123027*(2.778046668940015E15/1.40737488355328E14) \
               -t123021*t123023*t123024*(2.778046668940015E15/7.0368744177664E13))+1.0/sqrt(3.141592653589793)*t123030* \
               t123023*t123028*(1.108777112152858E31/1.584563250285287E29))*(4.0/3.0)-omega*t123040*t123029*(2.778046668940015E15/ \
               1.05553116266496E14))-c0*pow(rho_a[index],1.0/3.0)*t123063*t123066*(4.0/3.0)+c0*t123064*t123066*(cx1* \
               gamma_aa[index]*gx*t123001*t123050*(8.0/3.0)+cx2*t123000*t123032*t123061*t122954*(1.6E1/3.0)+cx4*t123003* \
               t123033*t123046*t122956*(3.2E1/3.0)-cx1*t123000*t123032*1.0/(t123049*t123049)*t122954*(8.0/3.0)-cx2* \
               t123032*1.0/(t123060*t123060)*t122961*t122954*(gamma_aa[index]*gx*t123001*(1.6E1/3.0)+t123000*t123032* \
               t122954*(1.6E1/3.0))-cx4*t123033*1.0/(t123045*t123045)*t122956*t122958*(gamma_aa[index]*gx*t123001* \
               (3.2E1/3.0)+t123000*t123032*t122954*3.2E1+t123003*t123033*t122956*(3.2E1/3.0)+gamma_aa[index]*gx*t123002* \
               t123032*t122954*3.2E1)+cx3*gamma_aa[index]*gx*t123002*t123032*t123056*t122954*8.0-cx3*gamma_aa[index]* \
               gx*t123032*1.0/(t123055*t123055)*t122960*t122954*(gamma_aa[index]*gx*t123001*8.0+t123000*t123032*t122954* \
               1.6E1+gamma_aa[index]*gx*t123002*t123032*t122954*8.0));
        } else if (rho_b[index] > cutoff_) {
            v_rho_a_[index] = 0.0;
        } else {
            v_rho_a_[index] = 0.0;
        } 

        //V_rho_b
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t118803 = 1.0/pow(rho_b[index],1.0/3.0);
            double t118804 = c*t118803;
            double t118805 = sqrt(t118804);
            double t118806 = pow(t118804,3.0/2.0);
            double t118807 = c*c;
            double t118808 = 1.0/pow(rho_b[index],2.0/3.0);
            double t118809 = 1.0/c0p;
            double t118810 = b1p*t118805;
            double t118811 = b3p*t118806;
            double t118812 = b4p*t118807*t118808;
            double t118813 = b2p*c*t118803;
            double t118814 = t118810+t118811+t118812+t118813;
            double t118815 = 1.0/t118814;
            double t118816 = t118815*t118809*(1.0/2.0);
            double t118817 = t118816+1.0;
            double t118818 = log(t118817);
            double t118819 = a1p*c*t118803;
            double t118820 = t118819+1.0;
            double t118821 = gamma_bb[index]*gamma_bb[index];
            double t118822 = gcaa*gcaa;
            double t118823 = t118821*t118821;
            double t118824 = t118822*t118822;
            double t118825 = 1.0/pow(rho_b[index],3.2E1/3.0);
            double t118826 = 1.0/pow(rho_b[index],8.0/3.0);
            double t118827 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
               rho_b[index]*rho_b[index]);
            double t118828 = 1.0/pow(rho_b[index],1.6E1/3.0);
            double t118829 = pow(2.0,1.0/3.0);
            double t118830 = t118829*2.0;
            double t118831 = t118830-2.0;
            double t118832 = two_13*2.0;
            double t118833 = t118832-2.0;
            double t118834 = 1.0/t118833;
            double t118835 = 1.0/c0f;
            double t118836 = 1.0/pow(rho_a[index],1.0/3.0);
            double t118837 = c*t118836;
            double t118838 = sqrt(t118837);
            double t118839 = pow(t118837,3.0/2.0);
            double t118840 = 1.0/pow(rho_a[index],2.0/3.0);
            double t118841 = b1p*t118838;
            double t118842 = b3p*t118839;
            double t118843 = b4p*t118840*t118807;
            double t118844 = b2p*c*t118836;
            double t118845 = t118841+t118842+t118843+t118844;
            double t118846 = 1.0/t118845;
            double t118847 = t118809*t118846*(1.0/2.0);
            double t118848 = t118847+1.0;
            double t118849 = log(t118848);
            double t118850 = a1p*c*t118836;
            double t118851 = t118850+1.0;
            double t118852 = c0p*t118851*t118849*2.0;
            double t118853 = b1f*t118805;
            double t118854 = b3f*t118806;
            double t118855 = b4f*t118807*t118808;
            double t118856 = b2f*c*t118803;
            double t118857 = t118853+t118854+t118855+t118856;
            double t118858 = 1.0/t118857;
            double t118859 = t118835*t118858*(1.0/2.0);
            double t118860 = t118859+1.0;
            double t118861 = log(t118860);
            double t118862 = a1f*c*t118803;
            double t118863 = t118862+1.0;
            double t118864 = c0f*t118861*t118863*2.0;
            double t118865 = c0p*t118820*t118818*2.0;
            double t118866 = rho_a[index]+rho_b[index];
            double t118867 = 1.0/pow(t118866,1.0/3.0);
            double t118868 = c*t118867;
            double t118869 = sqrt(t118868);
            double t118870 = pow(t118868,3.0/2.0);
            double t118871 = 1.0/pow(t118866,2.0/3.0);
            double t118872 = b1p*t118869;
            double t118873 = b3p*t118870;
            double t118874 = b4p*t118807*t118871;
            double t118875 = b2p*c*t118867;
            double t118876 = t118872+t118873+t118874+t118875;
            double t118877 = 1.0/t118876;
            double t118878 = t118809*t118877*(1.0/2.0);
            double t118879 = t118878+1.0;
            double t118880 = log(t118879);
            double t118881 = a1p*c*t118867;
            double t118882 = t118881+1.0;
            double t118883 = c0p*t118880*t118882*2.0;
            double t118884 = rho_a[index]-rho_b[index];
            double t118885 = t118884*t118884;
            double t118886 = 1.0/t118866;
            double t118887 = t118884*t118886;
            double t118888 = 1.0/(t118866*t118866*t118866*t118866);
            double t118889 = t118885*t118885;
            double t118890 = t118887+1.0;
            double t118891 = pow(t118890,4.0/3.0);
            double t118892 = -t118887+1.0;
            double t118893 = pow(t118892,4.0/3.0);
            double t118894 = t118891+t118893-2.0;
            double t118895 = gcab*gcab;
            double t118899 = 1.0/pow(rho_a[index],8.0/3.0);
            double t118900 = gamma_aa[index]*t118899*(1.0/2.0);
            double t118901 = gamma_bb[index]*t118826*(1.0/2.0);
            double t118896 = t118900+t118901;
            double t118897 = t118896*t118896;
            double t118898 = 1.0/pow(rho_b[index],1.1E1/3.0);
            double t118902 = t118895*t118895;
            double t118903 = t118897*t118897;
            double t118904 = t118895*t118897*6.0;
            double t118905 = gcab*t118895*t118896*t118897*4.0;
            double t118906 = t118902*t118903;
            double t118907 = gcab*t118896*4.0;
            double t118908 = t118904+t118905+t118906+t118907+1.0;
            double t118909 = gcab*t118896;
            double t118910 = t118909+1.0;
            double t118911 = t118895*t118897;
            double t118912 = gcab*t118896*2.0;
            double t118913 = t118911+t118912+1.0;
            double t118914 = t118895*t118897*3.0;
            double t118915 = gcab*t118895*t118896*t118897;
            double t118916 = gcab*t118896*3.0;
            double t118917 = t118914+t118915+t118916+1.0;
            double t118918 = 1.0/t118913;
            double t118919 = 1.0/t118917;
            double t118920 = 1.0/t118910;
            double t118921 = 1.0/t118908;
            double t118922 = 1.0/pow(t118866,4.0/3.0);
            double t118923 = b1f*t118869;
            double t118924 = b3f*t118870;
            double t118925 = b4f*t118807*t118871;
            double t118926 = b2f*c*t118867;
            double t118927 = t118923+t118924+t118925+t118926;
            double t118928 = 1.0/t118927;
            double t118929 = t118835*t118928*(1.0/2.0);
            double t118930 = t118929+1.0;
            double t118931 = log(t118930);
            double t118932 = a1f*c*t118867;
            double t118933 = t118932+1.0;
            double t118935 = c0f*t118931*t118933*2.0;
            double t118934 = -t118935+t118883;
            double t118936 = 1.0/(t118866*t118866);
            double t118937 = t118936*t118884;
            double t118938 = t118937+t118886;
            double t118939 = t118935-t118883;
            double t118940 = 1.0/pow(t118866,5.0/3.0);
            double t118941 = 1.0/sqrt(t118868);
            double t118942 = 1.0/t118879;
            double t118943 = 1.0/(t118876*t118876);
            double t118944 = b4p*t118940*t118807*(2.0/3.0);
            double t118945 = b2p*c*t118922*(1.0/3.0);
            double t118946 = b1p*c*t118922*t118941*(1.0/6.0);
            double t118947 = b3p*c*t118922*t118869*(1.0/2.0);
            double t118948 = t118944+t118945+t118946+t118947;
            double t118949 = 1.0/d2fz0;
            double t118950 = 1.0/Aa;
            double t118951 = b1a*t118869;
            double t118952 = b3a*t118870;
            double t118953 = b4a*t118807*t118871;
            double t118954 = b2a*c*t118867;
            double t118955 = t118951+t118952+t118953+t118954;
            double t118956 = 1.0/t118955;
            double t118957 = t118950*t118956*(1.0/2.0);
            double t118958 = t118957+1.0;
            double t118959 = log(t118958);
            double t118960 = a1a*c*t118867;
            double t118961 = t118960+1.0;
            double t118962 = 1.0/(t118866*t118866*t118866*t118866*t118866);
            double t118963 = pow(t118890,1.0/3.0);
            double t118964 = t118963*t118938*(4.0/3.0);
            double t118965 = pow(t118892,1.0/3.0);
            double t118966 = t118964-t118938*t118965*(4.0/3.0);
            double t118967 = t118888*t118889;
            double t118968 = t118967-1.0;
            double t118969 = 1.0/pow(rho_b[index],4.0/3.0);
            double t118970 = 1.0/pow(rho_b[index],5.0/3.0);
            double t118971 = 1.0/sqrt(t118804);
            double t118972 = 1.0/t118817;
            double t118973 = 1.0/(t118814*t118814);
            double t118974 = b4p*t118807*t118970*(2.0/3.0);
            double t118975 = b2p*c*t118969*(1.0/3.0);
            double t118976 = b1p*c*t118971*t118969*(1.0/6.0);
            double t118977 = b3p*c*t118805*t118969*(1.0/2.0);
            double t118978 = t118974+t118975+t118976+t118977;
            double t118979 = t118820*t118972*t118973*t118978;
            double t118980 = t118864-t118865;
            double t118981 = t118831*t118834*t118980;
            double t118982 = Aa*t118834*t118961*t118894*t118949*t118959*t118968*2.0;
            double t118983 = a1p*c*c0p*t118922*t118880*(2.0/3.0);
            double t118984 = t118981+t118865;
            double t118985 = gamma_bb[index]*gcaa*t118826*4.0;
            double t118986 = gamma_bb[index]*gcaa*t118821*t118822*t118827*4.0;
            double t118987 = t118821*t118822*t118828*6.0;
            double t118988 = t118823*t118824*t118825;
            double t118989 = t118985+t118986+t118987+t118988+1.0;
            double t118990 = 1.0/t118989;
            double t118991 = gamma_bb[index]*gcaa*t118826;
            double t118992 = t118991+1.0;
            double t118993 = 1.0/t118992;
            double t118994 = gamma_bb[index]*gcaa*t118826*3.0;
            double t118995 = gamma_bb[index]*gcaa*t118821*t118822*t118827;
            double t118996 = t118821*t118822*t118828*3.0;
            double t118997 = t118994+t118995+t118996+1.0;
            double t118998 = 1.0/t118997;
            double t118999 = gamma_bb[index]*gcaa*t118826*2.0;
            double t119000 = t118821*t118822*t118828;
            double t119001 = t119000+t118999+1.0;
            double t119002 = 1.0/t119001;
            double t119003 = 1.0/pow(rho_b[index],1.9E1/3.0);
            double t119004 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
               rho_b[index]*rho_b[index]*rho_b[index]);
            double t119005 = 1.0/pow(rho_b[index],3.5E1/3.0);
            double t119006 = 1.0/t118860;
            double t119007 = 1.0/(t118857*t118857);
            double t119008 = b4f*t118807*t118970*(2.0/3.0);
            double t119009 = b2f*c*t118969*(1.0/3.0);
            double t119010 = b1f*c*t118971*t118969*(1.0/6.0);
            double t119011 = b3f*c*t118805*t118969*(1.0/2.0);
            double t119012 = t119010+t119011+t119008+t119009;
            double t119013 = a1f*c*c0f*t118861*t118969*(2.0/3.0);
            double t119014 = a1p*c*c0p*t118818*t118969*(2.0/3.0);
            double t119015 = ccaa4*t118823*t118824*t118825*t118990;
            double t119016 = ccaa1*gamma_bb[index]*gcaa*t118826*t118993;
            double t119017 = ccaa3*gamma_bb[index]*gcaa*t118821*t118822*t118827*t118998;
            double t119018 = ccaa2*t119002*t118821*t118822*t118828;
            double t119019 = ccaa0+t119015+t119016+t119017+t119018;
            double t119020 = rho_b[index]*(8.334140006820045E15/1.40737488355328E14);
            double t119021 = 1.0/(omega*omega);
            double t119022 = pow(t119020,2.0/3.0);
            double t119025 = t119021*t119022;
            double t119023 = exp(-t119025);
            double t119024 = 1.0/pow(t119020,1.0/3.0);
            double t119026 = omega*omega;
            double t119027 = t119023-1.0;
            double t119028 = 1.0/pow(t119020,2.0/3.0);
            double t119029 = 1.0/pow(t119020,4.0/3.0);
            double t119030 = 1.0/omega;
            double t119038 = t119026*t119027*t119028*(1.0/2.0);
            double t119031 = t119023-t119038;
            double t119032 = gx*gx;
            double t119033 = t119032*t119032;
            double t119034 = pow(t119020,1.0/3.0);
            double t119035 = t119030*t119034;
            double t119036 = erf(t119035);
            double t119037 = t119036*(3.991211251234741E15/2.251799813685248E15);
            double t119039 = omega*t119031*t119024;
            double t119040 = t119037+t119039;
            double t119041 = gamma_bb[index]*gx*t118826*4.0;
            double t119042 = gamma_bb[index]*gx*t119032*t118821*t118827*4.0;
            double t119043 = t119032*t118821*t118828*6.0;
            double t119044 = t119033*t118823*t118825;
            double t119045 = t119041+t119042+t119043+t119044+1.0;
            double t119046 = 1.0/t119045;
            double t119047 = cx4*t119033*t119046*t118823*t118825;
            double t119048 = gamma_bb[index]*gx*t118826;
            double t119049 = t119048+1.0;
            double t119050 = 1.0/t119049;
            double t119051 = cx1*gamma_bb[index]*gx*t119050*t118826;
            double t119052 = gamma_bb[index]*gx*t118826*3.0;
            double t119053 = gamma_bb[index]*gx*t119032*t118821*t118827;
            double t119054 = t119032*t118821*t118828*3.0;
            double t119055 = t119052+t119053+t119054+1.0;
            double t119056 = 1.0/t119055;
            double t119057 = cx3*gamma_bb[index]*gx*t119032*t118821*t119056*t118827;
            double t119058 = gamma_bb[index]*gx*t118826*2.0;
            double t119059 = t119032*t118821*t118828;
            double t119060 = t119058+t119059+1.0;
            double t119061 = 1.0/t119060;
            double t119062 = cx2*t119032*t119061*t118821*t118828;
            double t119063 = cx0+t119051+t119062+t119047+t119057;
            double t119064 = pow(rho_b[index],4.0/3.0);
            double t119065 = omega*t119040*t119024*(4.0/3.0);
            double t119066 = t119065-1.0;
            v_rho_b_[index] = -t119019*(t118865+t118831*t118834*(t118864-c0p*t118820*t118818*2.0))-(ccab0+ccab1* \
               gcab*t118920*t118896+ccab4*t118902*t118903*t118921+ccab2*t118918*t118895*t118897+ccab3*gcab*t118919* \
               t118895*t118896*t118897)*(-t118981-t118865+t118883+t118982+rho_b[index]*(t119014-t118979+t118831*t118834* \
               (t119013+t118979-t119012*t119006*t119007*t118863-a1p*c*c0p*t118818*t118969*(2.0/3.0)))-t118866*(t118983- \
               t118942*t118943*t118882*t118948+t118834*t118962*t118894*t118939*t118889*4.0+t118834*t118939*t118966* \
               t118888*t118889-t118834*t118894*t118888*t118889*(t118983-t118942*t118943*t118882*t118948+(t118933* \
               1.0/(t118927*t118927)*(b2f*c*t118922*(1.0/3.0)+b4f*t118940*t118807*(2.0/3.0)+b1f*c*t118922*t118941* \
               (1.0/6.0)+b3f*c*t118922*t118869*(1.0/2.0)))/t118930-a1f*c*c0f*t118922*t118931*(2.0/3.0))-t118834*t118934* \
               t118884*t118885*t118894*t118888*4.0+Aa*t118834*t118961*t118894*t118949*t118959*(t118962*t118889*4.0+ \
               t118884*t118885*t118888*4.0)*2.0+Aa*t118834*t118961*t118966*t118949*t118959*t118968*2.0-(t118834*t118961* \
               1.0/(t118955*t118955)*t118894*t118949*t118968*(b2a*c*t118922*(1.0/3.0)+b4a*t118940*t118807*(2.0/3.0) \
               +b1a*c*t118922*t118941*(1.0/6.0)+b3a*c*t118922*t118869*(1.0/2.0)))/t118958+Aa*a1a*c*t118922*t118834* \
               t118894*t118949*t118959*t118968*(2.0/3.0))+t118834*t118894*t118939*t118888*t118889)-(rho_b[index]* \
               t118984+rho_a[index]*(t118852-t118831*t118834*(t118852-c0f*log((t118835*(1.0/2.0))/(b1f*t118838+b3f* \
               t118839+b2f*c*t118836+b4f*t118840*t118807)+1.0)*(a1f*c*t118836+1.0)*2.0))-t118866*(t118883+t118982- \
               t118834*t118934*t118894*t118888*t118889))*(ccab1*gamma_bb[index]*gcab*t118920*t118898*(4.0/3.0)-ccab2* \
               1.0/(t118913*t118913)*t118895*t118897*(gamma_bb[index]*gcab*t118898*(8.0/3.0)+gamma_bb[index]*t118895* \
               t118896*t118898*(8.0/3.0))-ccab4*t118902*t118903*1.0/(t118908*t118908)*(gamma_bb[index]*gcab*t118898* \
               (1.6E1/3.0)+gamma_bb[index]*t118895*t118896*t118898*1.6E1+gamma_bb[index]*gcab*t118895*t118897*t118898* \
               1.6E1+gamma_bb[index]*t118902*t118896*t118897*t118898*(1.6E1/3.0))-ccab1*gamma_bb[index]*1.0/(t118910* \
               t118910)*t118895*t118896*t118898*(4.0/3.0)+ccab2*gamma_bb[index]*t118918*t118895*t118896*t118898*(8.0/ \
               3.0)-ccab3*gcab*1.0/(t118917*t118917)*t118895*t118896*t118897*(gamma_bb[index]*gcab*t118898*4.0+gamma_bb[index]* \
               t118895*t118896*t118898*8.0+gamma_bb[index]*gcab*t118895*t118897*t118898*4.0)+ccab3*gamma_bb[index]* \
               gcab*t118919*t118895*t118897*t118898*4.0+ccab4*gamma_bb[index]*t118902*t118921*t118896*t118897*t118898* \
               (1.6E1/3.0))+rho_b[index]*t118984*(ccaa1*gamma_bb[index]*gcaa*t118993*t118898*(8.0/3.0)+ccaa2*t119002* \
               t119003*t118821*t118822*(1.6E1/3.0)+ccaa4*t119005*t118823*t118824*t118990*(3.2E1/3.0)-ccaa1*t119003* \
               t118821*t118822*1.0/(t118992*t118992)*(8.0/3.0)-ccaa2*1.0/(t119001*t119001)*t118821*t118822*t118828* \
               (gamma_bb[index]*gcaa*t118898*(1.6E1/3.0)+t119003*t118821*t118822*(1.6E1/3.0))-ccaa4*t118823*t118824* \
               t118825*1.0/(t118989*t118989)*(gamma_bb[index]*gcaa*t118898*(3.2E1/3.0)+t119003*t118821*t118822*3.2E1+ \
               t119005*t118823*t118824*(3.2E1/3.0)+gamma_bb[index]*gcaa*t119004*t118821*t118822*3.2E1)+ccaa3*gamma_bb[index]* \
               gcaa*t119004*t118821*t118822*t118998*8.0-ccaa3*gamma_bb[index]*gcaa*t118821*t118822*t118827*1.0/(t118997* \
               t118997)*(gamma_bb[index]*gcaa*t118898*8.0+t119003*t118821*t118822*1.6E1+gamma_bb[index]*gcaa*t119004* \
               t118821*t118822*8.0))+rho_b[index]*t119019*(t119014-t118979+t118831*t118834*(t119013-t119014+t118979- \
               t119012*t119006*t119007*t118863))-c0*t119063*t119064*(omega*t119024*(omega*t119031*t119029*(-2.778046668940015E15/ \
               1.40737488355328E14)+omega*t119024*((t119023*(1.0/3.0))/rho_b[index]+1.0/pow(t119020,5.0/3.0)*t119026* \
               t119027*(2.778046668940015E15/1.40737488355328E14)-t119021*t119023*t119024*(2.778046668940015E15/7.0368744177664E13) \
               )+1.0/sqrt(3.141592653589793)*t119030*t119023*t119028*(1.108777112152858E31/1.584563250285287E29)) \
               *(4.0/3.0)-omega*t119040*t119029*(2.778046668940015E15/1.05553116266496E14))-c0*pow(rho_b[index],1.0/ \
               3.0)*t119063*t119066*(4.0/3.0)+c0*t119064*t119066*(cx1*gamma_bb[index]*gx*t119050*t118898*(8.0/3.0) \
               +cx2*t119003*t119032*t119061*t118821*(1.6E1/3.0)+cx4*t119005*t119033*t119046*t118823*(3.2E1/3.0)-cx1* \
               t119003*t119032*t118821*1.0/(t119049*t119049)*(8.0/3.0)-cx2*t119032*1.0/(t119060*t119060)*t118821* \
               t118828*(gamma_bb[index]*gx*t118898*(1.6E1/3.0)+t119003*t119032*t118821*(1.6E1/3.0))-cx4*t119033*1.0/ \
               (t119045*t119045)*t118823*t118825*(gamma_bb[index]*gx*t118898*(3.2E1/3.0)+t119003*t119032*t118821* \
               3.2E1+t119005*t119033*t118823*(3.2E1/3.0)+gamma_bb[index]*gx*t119004*t119032*t118821*3.2E1)+cx3*gamma_bb[index]* \
               gx*t119004*t119032*t118821*t119056*8.0-cx3*gamma_bb[index]*gx*t119032*t118821*1.0/(t119055*t119055) \
               *t118827*(gamma_bb[index]*gx*t118898*8.0+t119003*t119032*t118821*1.6E1+gamma_bb[index]*gx*t119004* \
               t119032*t118821*8.0));
        } else if (rho_a[index] > cutoff_) {
            v_rho_b_[index] = 0.0;
        } else if (rho_b[index] > cutoff_) {
            double t122182 = 1.0/pow(rho_b[index],1.0/3.0);
            double t122183 = c*t122182;
            double t122184 = sqrt(t122183);
            double t122185 = pow(t122183,3.0/2.0);
            double t122186 = c*c;
            double t122187 = 1.0/pow(rho_b[index],2.0/3.0);
            double t122188 = 1.0/c0p;
            double t122189 = b1p*t122184;
            double t122190 = b3p*t122185;
            double t122191 = b4p*t122186*t122187;
            double t122192 = b2p*c*t122182;
            double t122193 = t122190+t122191+t122192+t122189;
            double t122194 = 1.0/t122193;
            double t122195 = t122194*t122188*(1.0/2.0);
            double t122196 = t122195+1.0;
            double t122197 = log(t122196);
            double t122198 = a1p*c*t122182;
            double t122199 = t122198+1.0;
            double t122200 = gamma_bb[index]*gamma_bb[index];
            double t122201 = gcaa*gcaa;
            double t122202 = t122200*t122200;
            double t122203 = t122201*t122201;
            double t122204 = 1.0/pow(rho_b[index],3.2E1/3.0);
            double t122205 = 1.0/pow(rho_b[index],8.0/3.0);
            double t122206 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
               rho_b[index]*rho_b[index]);
            double t122207 = 1.0/pow(rho_b[index],1.6E1/3.0);
            double t122208 = pow(2.0,1.0/3.0);
            double t122209 = t122208*2.0;
            double t122210 = t122209-2.0;
            double t122211 = two_13*2.0;
            double t122212 = t122211-2.0;
            double t122213 = 1.0/t122212;
            double t122214 = 1.0/c0f;
            double t122215 = b1f*t122184;
            double t122216 = b3f*t122185;
            double t122217 = b4f*t122186*t122187;
            double t122218 = b2f*c*t122182;
            double t122219 = t122215+t122216+t122217+t122218;
            double t122220 = 1.0/t122219;
            double t122221 = t122220*t122214*(1.0/2.0);
            double t122222 = t122221+1.0;
            double t122223 = log(t122222);
            double t122224 = a1f*c*t122182;
            double t122225 = t122224+1.0;
            double t122226 = c0f*t122223*t122225*2.0;
            double t122227 = c0p*t122197*t122199*2.0;
            double t122228 = gamma_bb[index]*gcaa*t122205*4.0;
            double t122229 = gamma_bb[index]*gcaa*t122200*t122201*t122206*4.0;
            double t122230 = t122200*t122201*t122207*6.0;
            double t122231 = t122202*t122203*t122204;
            double t122232 = t122230+t122231+t122228+t122229+1.0;
            double t122233 = 1.0/t122232;
            double t122234 = gamma_bb[index]*gcaa*t122205;
            double t122235 = t122234+1.0;
            double t122236 = 1.0/t122235;
            double t122237 = gamma_bb[index]*gcaa*t122205*3.0;
            double t122238 = gamma_bb[index]*gcaa*t122200*t122201*t122206;
            double t122239 = t122200*t122201*t122207*3.0;
            double t122240 = t122237+t122238+t122239+1.0;
            double t122241 = 1.0/t122240;
            double t122242 = gamma_bb[index]*gcaa*t122205*2.0;
            double t122243 = t122200*t122201*t122207;
            double t122244 = t122242+t122243+1.0;
            double t122245 = 1.0/t122244;
            double t122246 = 1.0/pow(rho_b[index],1.9E1/3.0);
            double t122247 = 1.0/pow(rho_b[index],1.1E1/3.0);
            double t122248 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
               rho_b[index]*rho_b[index]*rho_b[index]);
            double t122249 = 1.0/pow(rho_b[index],3.5E1/3.0);
            double t122250 = 1.0/pow(rho_b[index],4.0/3.0);
            double t122251 = 1.0/pow(rho_b[index],5.0/3.0);
            double t122252 = 1.0/sqrt(t122183);
            double t122253 = 1.0/t122196;
            double t122254 = 1.0/(t122193*t122193);
            double t122255 = b4p*t122251*t122186*(2.0/3.0);
            double t122256 = b2p*c*t122250*(1.0/3.0);
            double t122257 = b1p*c*t122250*t122252*(1.0/6.0);
            double t122258 = b3p*c*t122250*t122184*(1.0/2.0);
            double t122259 = t122255+t122256+t122257+t122258;
            double t122260 = t122253*t122254*t122259*t122199;
            double t122261 = ccaa4*t122202*t122203*t122204*t122233;
            double t122262 = ccaa1*gamma_bb[index]*gcaa*t122205*t122236;
            double t122263 = ccaa3*gamma_bb[index]*gcaa*t122200*t122201*t122241*t122206;
            double t122264 = ccaa2*t122200*t122201*t122207*t122245;
            double t122265 = ccaa0+t122261+t122262+t122263+t122264;
            double t122266 = rho_b[index]*(8.334140006820045E15/1.40737488355328E14);
            double t122267 = 1.0/(omega*omega);
            double t122268 = pow(t122266,2.0/3.0);
            double t122271 = t122267*t122268;
            double t122269 = exp(-t122271);
            double t122270 = 1.0/pow(t122266,1.0/3.0);
            double t122272 = omega*omega;
            double t122273 = t122269-1.0;
            double t122274 = 1.0/pow(t122266,2.0/3.0);
            double t122275 = 1.0/pow(t122266,4.0/3.0);
            double t122276 = 1.0/omega;
            double t122284 = t122272*t122273*t122274*(1.0/2.0);
            double t122277 = -t122284+t122269;
            double t122278 = gx*gx;
            double t122279 = t122278*t122278;
            double t122280 = pow(t122266,1.0/3.0);
            double t122281 = t122280*t122276;
            double t122282 = erf(t122281);
            double t122283 = t122282*(3.991211251234741E15/2.251799813685248E15);
            double t122285 = omega*t122270*t122277;
            double t122286 = t122283+t122285;
            double t122287 = gamma_bb[index]*gx*t122205*4.0;
            double t122288 = gamma_bb[index]*gx*t122200*t122206*t122278*4.0;
            double t122289 = t122200*t122207*t122278*6.0;
            double t122290 = t122202*t122204*t122279;
            double t122291 = t122290+t122287+t122288+t122289+1.0;
            double t122292 = 1.0/t122291;
            double t122293 = cx4*t122202*t122204*t122292*t122279;
            double t122294 = gamma_bb[index]*gx*t122205;
            double t122295 = t122294+1.0;
            double t122296 = 1.0/t122295;
            double t122297 = cx1*gamma_bb[index]*gx*t122205*t122296;
            double t122298 = gamma_bb[index]*gx*t122205*3.0;
            double t122299 = gamma_bb[index]*gx*t122200*t122206*t122278;
            double t122300 = t122200*t122207*t122278*3.0;
            double t122301 = t122300+t122298+t122299+1.0;
            double t122302 = 1.0/t122301;
            double t122303 = cx3*gamma_bb[index]*gx*t122200*t122302*t122206*t122278;
            double t122304 = gamma_bb[index]*gx*t122205*2.0;
            double t122305 = t122200*t122207*t122278;
            double t122306 = t122304+t122305+1.0;
            double t122307 = 1.0/t122306;
            double t122308 = cx2*t122200*t122207*t122307*t122278;
            double t122309 = cx0+t122303+t122308+t122293+t122297;
            double t122310 = pow(rho_b[index],4.0/3.0);
            double t122311 = omega*t122270*t122286*(4.0/3.0);
            double t122312 = t122311-1.0;
            v_rho_b_[index] = -t122265*(t122227+t122210*t122213*(t122226-c0p*t122197*t122199*2.0))+rho_b[index]* \
               t122265*(-t122260+t122210*t122213*(t122260-(t122225*1.0/(t122219*t122219)*(b2f*c*t122250*(1.0/3.0) \
               +b4f*t122251*t122186*(2.0/3.0)+b1f*c*t122250*t122252*(1.0/6.0)+b3f*c*t122250*t122184*(1.0/2.0)))/t122222+ \
               a1f*c*c0f*t122223*t122250*(2.0/3.0)-a1p*c*c0p*t122250*t122197*(2.0/3.0))+a1p*c*c0p*t122250*t122197* \
               (2.0/3.0))+rho_b[index]*(t122227+t122210*t122213*(t122226-t122227))*(ccaa1*gamma_bb[index]*gcaa*t122236* \
               t122247*(8.0/3.0)+ccaa2*t122200*t122201*t122245*t122246*(1.6E1/3.0)+ccaa4*t122202*t122203*t122233* \
               t122249*(3.2E1/3.0)-ccaa1*t122200*t122201*1.0/(t122235*t122235)*t122246*(8.0/3.0)-ccaa2*t122200*t122201* \
               t122207*1.0/(t122244*t122244)*(gamma_bb[index]*gcaa*t122247*(1.6E1/3.0)+t122200*t122201*t122246*(1.6E1/ \
               3.0))-ccaa4*t122202*t122203*t122204*1.0/(t122232*t122232)*(gamma_bb[index]*gcaa*t122247*(3.2E1/3.0) \
               +t122200*t122201*t122246*3.2E1+t122202*t122203*t122249*(3.2E1/3.0)+gamma_bb[index]*gcaa*t122200*t122201* \
               t122248*3.2E1)+ccaa3*gamma_bb[index]*gcaa*t122200*t122201*t122241*t122248*8.0-ccaa3*gamma_bb[index]* \
               gcaa*t122200*t122201*1.0/(t122240*t122240)*t122206*(gamma_bb[index]*gcaa*t122247*8.0+t122200*t122201* \
               t122246*1.6E1+gamma_bb[index]*gcaa*t122200*t122201*t122248*8.0))-c0*t122310*t122309*(omega*t122270* \
               (omega*t122275*t122277*(-2.778046668940015E15/1.40737488355328E14)+omega*t122270*((t122269*(1.0/3.0) \
               )/rho_b[index]+t122272*t122273*1.0/pow(t122266,5.0/3.0)*(2.778046668940015E15/1.40737488355328E14) \
               -t122270*t122267*t122269*(2.778046668940015E15/7.0368744177664E13))+1.0/sqrt(3.141592653589793)*t122274* \
               t122276*t122269*(1.108777112152858E31/1.584563250285287E29))*(4.0/3.0)-omega*t122275*t122286*(2.778046668940015E15/ \
               1.05553116266496E14))-c0*pow(rho_b[index],1.0/3.0)*t122312*t122309*(4.0/3.0)+c0*t122310*t122312*(cx1* \
               gamma_bb[index]*gx*t122247*t122296*(8.0/3.0)+cx2*t122200*t122307*t122246*t122278*(1.6E1/3.0)+cx4*t122202* \
               t122292*t122249*t122279*(3.2E1/3.0)-cx1*t122200*t122246*1.0/(t122295*t122295)*t122278*(8.0/3.0)-cx2* \
               t122200*t122207*1.0/(t122306*t122306)*t122278*(gamma_bb[index]*gx*t122247*(1.6E1/3.0)+t122200*t122246* \
               t122278*(1.6E1/3.0))-cx4*t122202*t122204*1.0/(t122291*t122291)*t122279*(gamma_bb[index]*gx*t122247* \
               (3.2E1/3.0)+t122200*t122246*t122278*3.2E1+t122202*t122249*t122279*(3.2E1/3.0)+gamma_bb[index]*gx*t122200* \
               t122248*t122278*3.2E1)+cx3*gamma_bb[index]*gx*t122200*t122302*t122248*t122278*8.0-cx3*gamma_bb[index]* \
               gx*t122200*1.0/(t122301*t122301)*t122206*t122278*(gamma_bb[index]*gx*t122247*8.0+t122200*t122246*t122278* \
               1.6E1+gamma_bb[index]*gx*t122200*t122248*t122278*8.0));
        } else {
            v_rho_b_[index] = 0.0;
        } 

        if (is_gga_) {

            //V_gamma_aa
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t119068 = 1.0/pow(rho_a[index],1.0/3.0);
                double t119069 = c*t119068;
                double t119070 = sqrt(t119069);
                double t119071 = pow(t119069,3.0/2.0);
                double t119072 = c*c;
                double t119073 = 1.0/pow(rho_a[index],2.0/3.0);
                double t119074 = 1.0/c0p;
                double t119075 = b1p*t119070;
                double t119076 = b3p*t119071;
                double t119077 = b4p*t119072*t119073;
                double t119078 = b2p*c*t119068;
                double t119079 = t119075+t119076+t119077+t119078;
                double t119080 = 1.0/t119079;
                double t119081 = t119080*t119074*(1.0/2.0);
                double t119082 = t119081+1.0;
                double t119083 = log(t119082);
                double t119084 = a1p*c*t119068;
                double t119085 = t119084+1.0;
                double t119086 = pow(2.0,1.0/3.0);
                double t119087 = t119086*2.0;
                double t119088 = t119087-2.0;
                double t119089 = two_13*2.0;
                double t119090 = t119089-2.0;
                double t119091 = 1.0/t119090;
                double t119092 = 1.0/c0f;
                double t119093 = 1.0/pow(rho_b[index],1.0/3.0);
                double t119094 = c*t119093;
                double t119095 = sqrt(t119094);
                double t119096 = pow(t119094,3.0/2.0);
                double t119097 = 1.0/pow(rho_b[index],2.0/3.0);
                double t119098 = b1p*t119095;
                double t119099 = b3p*t119096;
                double t119100 = b4p*t119072*t119097;
                double t119101 = b2p*c*t119093;
                double t119102 = t119100+t119101+t119098+t119099;
                double t119103 = 1.0/t119102;
                double t119104 = t119103*t119074*(1.0/2.0);
                double t119105 = t119104+1.0;
                double t119106 = log(t119105);
                double t119107 = a1p*c*t119093;
                double t119108 = t119107+1.0;
                double t119109 = c0p*t119106*t119108*2.0;
                double t119110 = rho_a[index]+rho_b[index];
                double t119111 = 1.0/pow(t119110,1.0/3.0);
                double t119112 = c*t119111;
                double t119113 = sqrt(t119112);
                double t119114 = pow(t119112,3.0/2.0);
                double t119115 = 1.0/pow(t119110,2.0/3.0);
                double t119116 = b1p*t119113;
                double t119117 = b3p*t119114;
                double t119118 = b4p*t119115*t119072;
                double t119119 = b2p*c*t119111;
                double t119120 = t119116+t119117+t119118+t119119;
                double t119121 = 1.0/t119120;
                double t119122 = t119121*t119074*(1.0/2.0);
                double t119123 = t119122+1.0;
                double t119124 = log(t119123);
                double t119125 = a1p*c*t119111;
                double t119126 = t119125+1.0;
                double t119127 = c0p*t119124*t119126*2.0;
                double t119128 = rho_a[index]-rho_b[index];
                double t119129 = t119128*t119128;
                double t119130 = 1.0/t119110;
                double t119131 = t119130*t119128;
                double t119132 = 1.0/(t119110*t119110*t119110*t119110);
                double t119133 = t119129*t119129;
                double t119134 = t119131+1.0;
                double t119135 = pow(t119134,4.0/3.0);
                double t119136 = -t119131+1.0;
                double t119137 = pow(t119136,4.0/3.0);
                double t119138 = t119135+t119137-2.0;
                double t119139 = 1.0/pow(rho_a[index],8.0/3.0);
                double t119140 = gamma_aa[index]*t119139*(1.0/2.0);
                double t119141 = 1.0/pow(rho_b[index],8.0/3.0);
                double t119142 = gamma_bb[index]*t119141*(1.0/2.0);
                double t119143 = t119140+t119142;
                double t119144 = gcab*t119143;
                double t119145 = t119144+1.0;
                double t119146 = gcab*gcab;
                double t119147 = t119143*t119143;
                double t119148 = t119146*t119146;
                double t119149 = t119147*t119147;
                double t119150 = t119146*t119147;
                double t119151 = gcab*t119143*2.0;
                double t119152 = t119150+t119151+1.0;
                double t119153 = t119146*t119147*3.0;
                double t119154 = gcab*t119143*t119146*t119147;
                double t119155 = gcab*t119143*3.0;
                double t119156 = t119153+t119154+t119155+1.0;
                double t119157 = t119146*t119147*6.0;
                double t119158 = gcab*t119143*t119146*t119147*4.0;
                double t119159 = t119148*t119149;
                double t119160 = gcab*t119143*4.0;
                double t119161 = t119160+t119157+t119158+t119159+1.0;
                double t119162 = c0p*t119083*t119085*2.0;
                double t119163 = b1f*t119070;
                double t119164 = b3f*t119071;
                double t119165 = b4f*t119072*t119073;
                double t119166 = b2f*c*t119068;
                double t119167 = t119163+t119164+t119165+t119166;
                double t119168 = 1.0/t119167;
                double t119169 = t119092*t119168*(1.0/2.0);
                double t119170 = t119169+1.0;
                double t119171 = log(t119170);
                double t119172 = a1f*c*t119068;
                double t119173 = t119172+1.0;
                double t119174 = t119162-c0f*t119171*t119173*2.0;
                double t119175 = t119162-t119091*t119174*t119088;
                double t119176 = gamma_aa[index]*gamma_aa[index];
                double t119177 = gcaa*gcaa;
                double t119178 = t119177*t119177;
                double t119179 = 1.0/pow(rho_a[index],3.2E1/3.0);
                double t119180 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t119181 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t119182 = gamma_aa[index]*gcaa*t119139;
                double t119183 = t119182+1.0;
                double t119184 = gamma_aa[index]*gcaa*t119139*3.0;
                double t119185 = gamma_aa[index]*gcaa*t119181*t119176*t119177;
                double t119186 = t119180*t119176*t119177*3.0;
                double t119187 = t119184+t119185+t119186+1.0;
                double t119188 = t119176*t119176;
                double t119189 = gamma_aa[index]*gcaa*t119139*4.0;
                double t119190 = gamma_aa[index]*gcaa*t119181*t119176*t119177*4.0;
                double t119191 = t119180*t119176*t119177*6.0;
                double t119192 = t119178*t119179*t119188;
                double t119193 = t119190+t119191+t119192+t119189+1.0;
                double t119194 = gamma_aa[index]*gcaa*t119139*2.0;
                double t119195 = t119180*t119176*t119177;
                double t119196 = t119194+t119195+1.0;
                double t119197 = rho_a[index]*(8.334140006820045E15/1.40737488355328E14);
                double t119198 = 1.0/pow(t119197,1.0/3.0);
                double t119199 = 1.0/(omega*omega);
                double t119200 = pow(t119197,2.0/3.0);
                double t119201 = exp(-t119200*t119199);
                double t119202 = gx*gx;
                double t119203 = t119202*t119202;
                double t119204 = gamma_aa[index]*gx*t119139;
                double t119205 = t119204+1.0;
                double t119206 = gamma_aa[index]*gx*t119139*3.0;
                double t119207 = gamma_aa[index]*gx*t119202*t119181*t119176;
                double t119208 = t119202*t119180*t119176*3.0;
                double t119209 = t119206+t119207+t119208+1.0;
                double t119210 = gamma_aa[index]*gx*t119139*4.0;
                double t119211 = gamma_aa[index]*gx*t119202*t119181*t119176*4.0;
                double t119212 = t119202*t119180*t119176*6.0;
                double t119213 = t119203*t119179*t119188;
                double t119214 = t119210+t119211+t119212+t119213+1.0;
                double t119215 = gamma_aa[index]*gx*t119139*2.0;
                double t119216 = t119202*t119180*t119176;
                double t119217 = t119215+t119216+1.0;
                v_gamma_aa_[index] = (rho_a[index]*t119175+rho_b[index]*(t119109-t119091*t119088*(t119109-c0f*log((t119092* \
                   (1.0/2.0))/(b1f*t119095+b3f*t119096+b2f*c*t119093+b4f*t119072*t119097)+1.0)*(a1f*c*t119093+1.0)*2.0) \
                   )-t119110*(t119127-t119132*t119133*t119091*t119138*(t119127-c0f*log((t119092*(1.0/2.0))/(b1f*t119113+ \
                   b3f*t119114+b2f*c*t119111+b4f*t119115*t119072)+1.0)*(a1f*c*t119111+1.0)*2.0)+(Aa*t119091*t119138*log((1.0/ \
                   2.0)/(Aa*(b1a*t119113+b3a*t119114+b2a*c*t119111+b4a*t119115*t119072))+1.0)*(t119132*t119133-1.0)*(a1a* \
                   c*t119111+1.0)*2.0)/d2fz0))*((ccab1*gcab*t119139*(1.0/2.0))/t119145-ccab4*1.0/(t119161*t119161)*t119148* \
                   t119149*(gcab*t119139*2.0+t119143*t119146*t119139*6.0+gcab*t119146*t119147*t119139*6.0+t119143*t119147* \
                   t119139*t119148*2.0)-ccab2*1.0/(t119152*t119152)*t119146*t119147*(gcab*t119139+t119143*t119146*t119139) \
                   +(ccab2*t119143*t119146*t119139)/t119152-ccab1*t119143*1.0/(t119145*t119145)*t119146*t119139*(1.0/ \
                   2.0)+(ccab3*gcab*t119146*t119147*t119139*(3.0/2.0))/t119156+(ccab4*t119143*t119147*t119139*t119148* \
                   2.0)/t119161-ccab3*gcab*t119143*t119146*t119147*1.0/(t119156*t119156)*(gcab*t119139*(3.0/2.0)+t119143* \
                   t119146*t119139*3.0+gcab*t119146*t119147*t119139*(3.0/2.0)))-rho_a[index]*t119175*((ccaa1*gcaa*t119139) \
                   /t119183-ccaa1*gamma_aa[index]*t119180*1.0/(t119183*t119183)*t119177+(ccaa2*gamma_aa[index]*t119180* \
                   t119177*2.0)/t119196-ccaa2*t119180*t119176*t119177*1.0/(t119196*t119196)*(gcaa*t119139*2.0+gamma_aa[index]* \
                   t119180*t119177*2.0)+(ccaa4*gamma_aa[index]*t119176*t119178*t119179*4.0)/t119193+(ccaa3*gcaa*t119181* \
                   t119176*t119177*3.0)/t119187-ccaa4*1.0/(t119193*t119193)*t119178*t119179*t119188*(gcaa*t119139*4.0+ \
                   gamma_aa[index]*t119180*t119177*1.2E1+gamma_aa[index]*t119176*t119178*t119179*4.0+gcaa*t119181*t119176* \
                   t119177*1.2E1)-ccaa3*gamma_aa[index]*gcaa*t119181*t119176*t119177*1.0/(t119187*t119187)*(gcaa*t119139* \
                   3.0+gamma_aa[index]*t119180*t119177*6.0+gcaa*t119181*t119176*t119177*3.0))-c0*pow(rho_a[index],4.0/ \
                   3.0)*(omega*t119198*(erf(pow(t119197,1.0/3.0)/omega)*(3.991211251234741E15/2.251799813685248E15)+omega* \
                   t119198*(t119201-(omega*omega)*1.0/pow(t119197,2.0/3.0)*(t119201-1.0)*(1.0/2.0)))*(4.0/3.0)-1.0)*((cx1* \
                   gx*t119139)/t119205-cx1*gamma_aa[index]*t119202*1.0/(t119205*t119205)*t119180+(cx2*gamma_aa[index]* \
                   t119202*t119180*2.0)/t119217-cx2*t119202*t119180*1.0/(t119217*t119217)*t119176*(gx*t119139*2.0+gamma_aa[index]* \
                   t119202*t119180*2.0)+(cx4*gamma_aa[index]*t119203*t119176*t119179*4.0)/t119214+(cx3*gx*t119202*t119181* \
                   t119176*3.0)/t119209-cx4*t119203*1.0/(t119214*t119214)*t119179*t119188*(gx*t119139*4.0+gamma_aa[index]* \
                   t119202*t119180*1.2E1+gamma_aa[index]*t119203*t119176*t119179*4.0+gx*t119202*t119181*t119176*1.2E1) \
                   -cx3*gamma_aa[index]*gx*t119202*t119181*1.0/(t119209*t119209)*t119176*(gx*t119139*3.0+gamma_aa[index]* \
                   t119202*t119180*6.0+gx*t119202*t119181*t119176*3.0));
            } else if (rho_a[index] > cutoff_) {
                double t123069 = 1.0/pow(rho_a[index],1.0/3.0);
                double t123070 = c*t123069;
                double t123071 = sqrt(t123070);
                double t123072 = pow(t123070,3.0/2.0);
                double t123073 = c*c;
                double t123074 = 1.0/pow(rho_a[index],2.0/3.0);
                double t123075 = 1.0/c0p;
                double t123076 = b1p*t123071;
                double t123077 = b3p*t123072;
                double t123078 = b4p*t123073*t123074;
                double t123079 = b2p*c*t123069;
                double t123080 = t123076+t123077+t123078+t123079;
                double t123081 = 1.0/t123080;
                double t123082 = t123081*t123075*(1.0/2.0);
                double t123083 = t123082+1.0;
                double t123084 = log(t123083);
                double t123085 = a1p*c*t123069;
                double t123086 = t123085+1.0;
                double t123087 = 1.0/pow(rho_a[index],8.0/3.0);
                double t123088 = gamma_aa[index]*gamma_aa[index];
                double t123089 = gcaa*gcaa;
                double t123090 = t123089*t123089;
                double t123091 = 1.0/pow(rho_a[index],3.2E1/3.0);
                double t123092 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t123093 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t123094 = gamma_aa[index]*gcaa*t123087;
                double t123095 = t123094+1.0;
                double t123096 = gamma_aa[index]*gcaa*t123087*3.0;
                double t123097 = gamma_aa[index]*gcaa*t123093*t123088*t123089;
                double t123098 = t123092*t123088*t123089*3.0;
                double t123099 = t123096+t123097+t123098+1.0;
                double t123100 = t123088*t123088;
                double t123101 = gamma_aa[index]*gcaa*t123087*4.0;
                double t123102 = gamma_aa[index]*gcaa*t123093*t123088*t123089*4.0;
                double t123103 = t123092*t123088*t123089*6.0;
                double t123104 = t123100*t123090*t123091;
                double t123105 = t123101+t123102+t123103+t123104+1.0;
                double t123106 = gamma_aa[index]*gcaa*t123087*2.0;
                double t123107 = t123092*t123088*t123089;
                double t123108 = t123106+t123107+1.0;
                double t123109 = rho_a[index]*(8.334140006820045E15/1.40737488355328E14);
                double t123110 = 1.0/pow(t123109,1.0/3.0);
                double t123111 = 1.0/(omega*omega);
                double t123112 = pow(t123109,2.0/3.0);
                double t123113 = exp(-t123111*t123112);
                double t123114 = gx*gx;
                double t123115 = t123114*t123114;
                double t123116 = gamma_aa[index]*gx*t123087;
                double t123117 = t123116+1.0;
                double t123118 = gamma_aa[index]*gx*t123087*3.0;
                double t123119 = gamma_aa[index]*gx*t123114*t123093*t123088;
                double t123120 = t123114*t123092*t123088*3.0;
                double t123121 = t123120+t123118+t123119+1.0;
                double t123122 = gamma_aa[index]*gx*t123087*4.0;
                double t123123 = gamma_aa[index]*gx*t123114*t123093*t123088*4.0;
                double t123124 = t123114*t123092*t123088*6.0;
                double t123125 = t123100*t123115*t123091;
                double t123126 = t123122+t123123+t123124+t123125+1.0;
                double t123127 = gamma_aa[index]*gx*t123087*2.0;
                double t123128 = t123114*t123092*t123088;
                double t123129 = t123127+t123128+1.0;
                v_gamma_aa_[index] = -rho_a[index]*(((pow(2.0,1.0/3.0)*2.0-2.0)*(c0f*log((1.0/2.0)/(c0f*(b1f*t123071+ \
                   b3f*t123072+b2f*c*t123069+b4f*t123073*t123074))+1.0)*(a1f*c*t123069+1.0)*2.0-c0p*t123084*t123086*2.0) \
                   )/(two_13*2.0-2.0)+c0p*t123084*t123086*2.0)*((ccaa1*gcaa*t123087)/t123095+(ccaa2*gamma_aa[index]*t123092* \
                   t123089*2.0)/t123108-ccaa1*gamma_aa[index]*t123092*1.0/(t123095*t123095)*t123089-ccaa2*1.0/(t123108* \
                   t123108)*t123092*t123088*t123089*(gcaa*t123087*2.0+gamma_aa[index]*t123092*t123089*2.0)+(ccaa4*gamma_aa[index]* \
                   t123090*t123091*t123088*4.0)/t123105+(ccaa3*gcaa*t123093*t123088*t123089*3.0)/t123099-ccaa4*t123100* \
                   1.0/(t123105*t123105)*t123090*t123091*(gcaa*t123087*4.0+gamma_aa[index]*t123092*t123089*1.2E1+gamma_aa[index]* \
                   t123090*t123091*t123088*4.0+gcaa*t123093*t123088*t123089*1.2E1)-ccaa3*gamma_aa[index]*gcaa*t123093* \
                   t123088*t123089*1.0/(t123099*t123099)*(gcaa*t123087*3.0+gamma_aa[index]*t123092*t123089*6.0+gcaa*t123093* \
                   t123088*t123089*3.0))-c0*pow(rho_a[index],4.0/3.0)*(omega*t123110*(erf(pow(t123109,1.0/3.0)/omega) \
                   *(3.991211251234741E15/2.251799813685248E15)+omega*t123110*(t123113-(omega*omega)*1.0/pow(t123109,2.0/ \
                   3.0)*(t123113-1.0)*(1.0/2.0)))*(4.0/3.0)-1.0)*((cx1*gx*t123087)/t123117-cx1*gamma_aa[index]*t123114* \
                   1.0/(t123117*t123117)*t123092+(cx2*gamma_aa[index]*t123114*t123092*2.0)/t123129-cx2*t123114*t123092* \
                   1.0/(t123129*t123129)*t123088*(gx*t123087*2.0+gamma_aa[index]*t123114*t123092*2.0)+(cx4*gamma_aa[index]* \
                   t123115*t123091*t123088*4.0)/t123126+(cx3*gx*t123114*t123093*t123088*3.0)/t123121-cx4*t123100*t123115* \
                   1.0/(t123126*t123126)*t123091*(gx*t123087*4.0+gamma_aa[index]*t123114*t123092*1.2E1+gamma_aa[index]* \
                   t123115*t123091*t123088*4.0+gx*t123114*t123093*t123088*1.2E1)-cx3*gamma_aa[index]*gx*1.0/(t123121* \
                   t123121)*t123114*t123093*t123088*(gx*t123087*3.0+gamma_aa[index]*t123114*t123092*6.0+gx*t123114*t123093* \
                   t123088*3.0));
            } else if (rho_b[index] > cutoff_) {
                v_gamma_aa_[index] = 0.0;
            } else {
                v_gamma_aa_[index] = 0.0;
            } 

            //V_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_ab_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_ab_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_ab_[index] = 0.0;
            } else {
                v_gamma_ab_[index] = 0.0;
            } 

            //V_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t119220 = 1.0/pow(rho_a[index],1.0/3.0);
                double t119221 = c*t119220;
                double t119222 = sqrt(t119221);
                double t119223 = pow(t119221,3.0/2.0);
                double t119224 = c*c;
                double t119225 = 1.0/pow(rho_a[index],2.0/3.0);
                double t119226 = 1.0/c0p;
                double t119227 = b1p*t119222;
                double t119228 = b3p*t119223;
                double t119229 = b4p*t119224*t119225;
                double t119230 = b2p*c*t119220;
                double t119231 = t119230+t119227+t119228+t119229;
                double t119232 = 1.0/t119231;
                double t119233 = t119232*t119226*(1.0/2.0);
                double t119234 = t119233+1.0;
                double t119235 = log(t119234);
                double t119236 = a1p*c*t119220;
                double t119237 = t119236+1.0;
                double t119238 = pow(2.0,1.0/3.0);
                double t119239 = t119238*2.0;
                double t119240 = t119239-2.0;
                double t119241 = two_13*2.0;
                double t119242 = t119241-2.0;
                double t119243 = 1.0/t119242;
                double t119244 = 1.0/c0f;
                double t119245 = 1.0/pow(rho_b[index],1.0/3.0);
                double t119246 = c*t119245;
                double t119247 = sqrt(t119246);
                double t119248 = pow(t119246,3.0/2.0);
                double t119249 = 1.0/pow(rho_b[index],2.0/3.0);
                double t119250 = b1p*t119247;
                double t119251 = b3p*t119248;
                double t119252 = b4p*t119224*t119249;
                double t119253 = b2p*c*t119245;
                double t119254 = t119250+t119251+t119252+t119253;
                double t119255 = 1.0/t119254;
                double t119256 = t119226*t119255*(1.0/2.0);
                double t119257 = t119256+1.0;
                double t119258 = log(t119257);
                double t119259 = a1p*c*t119245;
                double t119260 = t119259+1.0;
                double t119261 = c0p*t119260*t119258*2.0;
                double t119262 = rho_a[index]+rho_b[index];
                double t119263 = 1.0/pow(t119262,1.0/3.0);
                double t119264 = c*t119263;
                double t119265 = sqrt(t119264);
                double t119266 = pow(t119264,3.0/2.0);
                double t119267 = 1.0/pow(t119262,2.0/3.0);
                double t119268 = b1p*t119265;
                double t119269 = b3p*t119266;
                double t119270 = b4p*t119224*t119267;
                double t119271 = b2p*c*t119263;
                double t119272 = t119270+t119271+t119268+t119269;
                double t119273 = 1.0/t119272;
                double t119274 = t119226*t119273*(1.0/2.0);
                double t119275 = t119274+1.0;
                double t119276 = log(t119275);
                double t119277 = a1p*c*t119263;
                double t119278 = t119277+1.0;
                double t119279 = c0p*t119276*t119278*2.0;
                double t119280 = rho_a[index]-rho_b[index];
                double t119281 = t119280*t119280;
                double t119282 = 1.0/t119262;
                double t119283 = t119280*t119282;
                double t119284 = 1.0/(t119262*t119262*t119262*t119262);
                double t119285 = t119281*t119281;
                double t119286 = t119283+1.0;
                double t119287 = pow(t119286,4.0/3.0);
                double t119288 = -t119283+1.0;
                double t119289 = pow(t119288,4.0/3.0);
                double t119290 = t119287+t119289-2.0;
                double t119291 = 1.0/pow(rho_b[index],8.0/3.0);
                double t119292 = 1.0/pow(rho_a[index],8.0/3.0);
                double t119293 = gamma_aa[index]*t119292*(1.0/2.0);
                double t119294 = gamma_bb[index]*t119291*(1.0/2.0);
                double t119295 = t119293+t119294;
                double t119296 = gcab*t119295;
                double t119297 = t119296+1.0;
                double t119298 = gcab*gcab;
                double t119299 = t119295*t119295;
                double t119300 = t119298*t119298;
                double t119301 = t119299*t119299;
                double t119302 = t119298*t119299;
                double t119303 = gcab*t119295*2.0;
                double t119304 = t119302+t119303+1.0;
                double t119305 = t119298*t119299*3.0;
                double t119306 = gcab*t119295*t119298*t119299;
                double t119307 = gcab*t119295*3.0;
                double t119308 = t119305+t119306+t119307+1.0;
                double t119309 = t119298*t119299*6.0;
                double t119310 = gcab*t119295*t119298*t119299*4.0;
                double t119311 = t119300*t119301;
                double t119312 = gcab*t119295*4.0;
                double t119313 = t119310+t119311+t119312+t119309+1.0;
                double t119314 = c0p*t119235*t119237*2.0;
                double t119315 = b1f*t119247;
                double t119316 = b3f*t119248;
                double t119317 = b4f*t119224*t119249;
                double t119318 = b2f*c*t119245;
                double t119319 = t119315+t119316+t119317+t119318;
                double t119320 = 1.0/t119319;
                double t119321 = t119320*t119244*(1.0/2.0);
                double t119322 = t119321+1.0;
                double t119323 = log(t119322);
                double t119324 = a1f*c*t119245;
                double t119325 = t119324+1.0;
                double t119326 = t119261-c0f*t119323*t119325*2.0;
                double t119327 = t119261-t119240*t119243*t119326;
                double t119328 = gamma_bb[index]*gamma_bb[index];
                double t119329 = gcaa*gcaa;
                double t119330 = t119329*t119329;
                double t119331 = 1.0/pow(rho_b[index],3.2E1/3.0);
                double t119332 = 1.0/pow(rho_b[index],1.6E1/3.0);
                double t119333 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]);
                double t119334 = gamma_bb[index]*gcaa*t119291;
                double t119335 = t119334+1.0;
                double t119336 = gamma_bb[index]*gcaa*t119291*3.0;
                double t119337 = gamma_bb[index]*gcaa*t119333*t119328*t119329;
                double t119338 = t119332*t119328*t119329*3.0;
                double t119339 = t119336+t119337+t119338+1.0;
                double t119340 = t119328*t119328;
                double t119341 = gamma_bb[index]*gcaa*t119291*4.0;
                double t119342 = gamma_bb[index]*gcaa*t119333*t119328*t119329*4.0;
                double t119343 = t119332*t119328*t119329*6.0;
                double t119344 = t119330*t119331*t119340;
                double t119345 = t119341+t119342+t119343+t119344+1.0;
                double t119346 = gamma_bb[index]*gcaa*t119291*2.0;
                double t119347 = t119332*t119328*t119329;
                double t119348 = t119346+t119347+1.0;
                double t119349 = rho_b[index]*(8.334140006820045E15/1.40737488355328E14);
                double t119350 = 1.0/pow(t119349,1.0/3.0);
                double t119351 = 1.0/(omega*omega);
                double t119352 = pow(t119349,2.0/3.0);
                double t119353 = exp(-t119351*t119352);
                double t119354 = gx*gx;
                double t119355 = t119354*t119354;
                double t119356 = gamma_bb[index]*gx*t119291;
                double t119357 = t119356+1.0;
                double t119358 = gamma_bb[index]*gx*t119291*3.0;
                double t119359 = gamma_bb[index]*gx*t119333*t119354*t119328;
                double t119360 = t119332*t119354*t119328*3.0;
                double t119361 = t119360+t119358+t119359+1.0;
                double t119362 = gamma_bb[index]*gx*t119291*4.0;
                double t119363 = gamma_bb[index]*gx*t119333*t119354*t119328*4.0;
                double t119364 = t119332*t119354*t119328*6.0;
                double t119365 = t119331*t119340*t119355;
                double t119366 = t119362+t119363+t119364+t119365+1.0;
                double t119367 = gamma_bb[index]*gx*t119291*2.0;
                double t119368 = t119332*t119354*t119328;
                double t119369 = t119367+t119368+1.0;
                v_gamma_bb_[index] = (rho_b[index]*t119327+rho_a[index]*(t119314-t119240*t119243*(t119314-c0f*log((t119244* \
                   (1.0/2.0))/(b1f*t119222+b3f*t119223+b2f*c*t119220+b4f*t119224*t119225)+1.0)*(a1f*c*t119220+1.0)*2.0) \
                   )-t119262*(t119279-t119243*t119290*t119284*t119285*(t119279-c0f*log((t119244*(1.0/2.0))/(b1f*t119265+ \
                   b3f*t119266+b2f*c*t119263+b4f*t119224*t119267)+1.0)*(a1f*c*t119263+1.0)*2.0)+(Aa*t119243*t119290*log((1.0/ \
                   2.0)/(Aa*(b1a*t119265+b3a*t119266+b2a*c*t119263+b4a*t119224*t119267))+1.0)*(t119284*t119285-1.0)*(a1a* \
                   c*t119263+1.0)*2.0)/d2fz0))*((ccab1*gcab*t119291*(1.0/2.0))/t119297-ccab4*t119300*t119301*1.0/(t119313* \
                   t119313)*(gcab*t119291*2.0+t119291*t119295*t119298*6.0+gcab*t119291*t119298*t119299*6.0+t119300*t119291* \
                   t119295*t119299*2.0)-ccab2*1.0/(t119304*t119304)*t119298*t119299*(gcab*t119291+t119291*t119295*t119298) \
                   +(ccab2*t119291*t119295*t119298)/t119304-ccab1*t119291*t119295*1.0/(t119297*t119297)*t119298*(1.0/ \
                   2.0)+(ccab3*gcab*t119291*t119298*t119299*(3.0/2.0))/t119308+(ccab4*t119300*t119291*t119295*t119299* \
                   2.0)/t119313-ccab3*gcab*1.0/(t119308*t119308)*t119295*t119298*t119299*(gcab*t119291*(3.0/2.0)+t119291* \
                   t119295*t119298*3.0+gcab*t119291*t119298*t119299*(3.0/2.0)))-rho_b[index]*t119327*((ccaa1*gcaa*t119291) \
                   /t119335-ccaa1*gamma_bb[index]*t119332*1.0/(t119335*t119335)*t119329+(ccaa2*gamma_bb[index]*t119332* \
                   t119329*2.0)/t119348-ccaa2*t119332*t119328*t119329*1.0/(t119348*t119348)*(gcaa*t119291*2.0+gamma_bb[index]* \
                   t119332*t119329*2.0)+(ccaa4*gamma_bb[index]*t119330*t119331*t119328*4.0)/t119345+(ccaa3*gcaa*t119333* \
                   t119328*t119329*3.0)/t119339-ccaa4*t119330*t119331*t119340*1.0/(t119345*t119345)*(gcaa*t119291*4.0+ \
                   gamma_bb[index]*t119332*t119329*1.2E1+gamma_bb[index]*t119330*t119331*t119328*4.0+gcaa*t119333*t119328* \
                   t119329*1.2E1)-ccaa3*gamma_bb[index]*gcaa*t119333*t119328*t119329*1.0/(t119339*t119339)*(gcaa*t119291* \
                   3.0+gamma_bb[index]*t119332*t119329*6.0+gcaa*t119333*t119328*t119329*3.0))-c0*pow(rho_b[index],4.0/ \
                   3.0)*(omega*t119350*(erf(pow(t119349,1.0/3.0)/omega)*(3.991211251234741E15/2.251799813685248E15)+omega* \
                   t119350*(t119353-(omega*omega)*1.0/pow(t119349,2.0/3.0)*(t119353-1.0)*(1.0/2.0)))*(4.0/3.0)-1.0)*((cx1* \
                   gx*t119291)/t119357-cx1*gamma_bb[index]*t119332*t119354*1.0/(t119357*t119357)+(cx2*gamma_bb[index]* \
                   t119332*t119354*2.0)/t119369-cx2*t119332*t119354*t119328*1.0/(t119369*t119369)*(gx*t119291*2.0+gamma_bb[index]* \
                   t119332*t119354*2.0)+(cx4*gamma_bb[index]*t119331*t119328*t119355*4.0)/t119366+(cx3*gx*t119333*t119354* \
                   t119328*3.0)/t119361-cx4*t119331*t119340*t119355*1.0/(t119366*t119366)*(gx*t119291*4.0+gamma_bb[index]* \
                   t119332*t119354*1.2E1+gamma_bb[index]*t119331*t119328*t119355*4.0+gx*t119333*t119354*t119328*1.2E1) \
                   -cx3*gamma_bb[index]*gx*t119333*1.0/(t119361*t119361)*t119354*t119328*(gx*t119291*3.0+gamma_bb[index]* \
                   t119332*t119354*6.0+gx*t119333*t119354*t119328*3.0));
            } else if (rho_a[index] > cutoff_) {
                v_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                double t122316 = 1.0/pow(rho_b[index],1.0/3.0);
                double t122317 = c*t122316;
                double t122318 = sqrt(t122317);
                double t122319 = pow(t122317,3.0/2.0);
                double t122320 = c*c;
                double t122321 = 1.0/pow(rho_b[index],2.0/3.0);
                double t122322 = 1.0/c0p;
                double t122323 = b1p*t122318;
                double t122324 = b3p*t122319;
                double t122325 = b4p*t122320*t122321;
                double t122326 = b2p*c*t122316;
                double t122327 = t122323+t122324+t122325+t122326;
                double t122328 = 1.0/t122327;
                double t122329 = t122322*t122328*(1.0/2.0);
                double t122330 = t122329+1.0;
                double t122331 = log(t122330);
                double t122332 = a1p*c*t122316;
                double t122333 = t122332+1.0;
                double t122334 = 1.0/pow(rho_b[index],8.0/3.0);
                double t122335 = gamma_bb[index]*gamma_bb[index];
                double t122336 = gcaa*gcaa;
                double t122337 = t122336*t122336;
                double t122338 = 1.0/pow(rho_b[index],3.2E1/3.0);
                double t122339 = 1.0/pow(rho_b[index],1.6E1/3.0);
                double t122340 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]);
                double t122341 = gamma_bb[index]*gcaa*t122334;
                double t122342 = t122341+1.0;
                double t122343 = gamma_bb[index]*gcaa*t122334*3.0;
                double t122344 = gamma_bb[index]*gcaa*t122340*t122335*t122336;
                double t122345 = t122335*t122336*t122339*3.0;
                double t122346 = t122343+t122344+t122345+1.0;
                double t122347 = t122335*t122335;
                double t122348 = gamma_bb[index]*gcaa*t122334*4.0;
                double t122349 = gamma_bb[index]*gcaa*t122340*t122335*t122336*4.0;
                double t122350 = t122335*t122336*t122339*6.0;
                double t122351 = t122337*t122338*t122347;
                double t122352 = t122350+t122351+t122348+t122349+1.0;
                double t122353 = gamma_bb[index]*gcaa*t122334*2.0;
                double t122354 = t122335*t122336*t122339;
                double t122355 = t122353+t122354+1.0;
                double t122356 = rho_b[index]*(8.334140006820045E15/1.40737488355328E14);
                double t122357 = 1.0/pow(t122356,1.0/3.0);
                double t122358 = 1.0/(omega*omega);
                double t122359 = pow(t122356,2.0/3.0);
                double t122360 = exp(-t122358*t122359);
                double t122361 = gx*gx;
                double t122362 = t122361*t122361;
                double t122363 = gamma_bb[index]*gx*t122334;
                double t122364 = t122363+1.0;
                double t122365 = gamma_bb[index]*gx*t122334*3.0;
                double t122366 = gamma_bb[index]*gx*t122340*t122361*t122335;
                double t122367 = t122361*t122335*t122339*3.0;
                double t122368 = t122365+t122366+t122367+1.0;
                double t122369 = gamma_bb[index]*gx*t122334*4.0;
                double t122370 = gamma_bb[index]*gx*t122340*t122361*t122335*4.0;
                double t122371 = t122361*t122335*t122339*6.0;
                double t122372 = t122362*t122338*t122347;
                double t122373 = t122370+t122371+t122372+t122369+1.0;
                double t122374 = gamma_bb[index]*gx*t122334*2.0;
                double t122375 = t122361*t122335*t122339;
                double t122376 = t122374+t122375+1.0;
                v_gamma_bb_[index] = -rho_b[index]*(((pow(2.0,1.0/3.0)*2.0-2.0)*(c0f*log((1.0/2.0)/(c0f*(b1f*t122318+ \
                   b3f*t122319+b2f*c*t122316+b4f*t122320*t122321))+1.0)*(a1f*c*t122316+1.0)*2.0-c0p*t122331*t122333*2.0) \
                   )/(two_13*2.0-2.0)+c0p*t122331*t122333*2.0)*((ccaa1*gcaa*t122334)/t122342-ccaa1*gamma_bb[index]*1.0/ \
                   (t122342*t122342)*t122336*t122339+(ccaa2*gamma_bb[index]*t122336*t122339*2.0)/t122355-ccaa2*t122335* \
                   t122336*1.0/(t122355*t122355)*t122339*(gcaa*t122334*2.0+gamma_bb[index]*t122336*t122339*2.0)+(ccaa4* \
                   gamma_bb[index]*t122335*t122337*t122338*4.0)/t122352+(ccaa3*gcaa*t122340*t122335*t122336*3.0)/t122346- \
                   ccaa4*1.0/(t122352*t122352)*t122337*t122338*t122347*(gcaa*t122334*4.0+gamma_bb[index]*t122336*t122339* \
                   1.2E1+gamma_bb[index]*t122335*t122337*t122338*4.0+gcaa*t122340*t122335*t122336*1.2E1)-ccaa3*gamma_bb[index]* \
                   gcaa*t122340*t122335*t122336*1.0/(t122346*t122346)*(gcaa*t122334*3.0+gamma_bb[index]*t122336*t122339* \
                   6.0+gcaa*t122340*t122335*t122336*3.0))-c0*pow(rho_b[index],4.0/3.0)*(omega*t122357*(erf(pow(t122356,1.0/ \
                   3.0)/omega)*(3.991211251234741E15/2.251799813685248E15)+omega*t122357*(t122360-(omega*omega)*1.0/pow(t122356,2.0/ \
                   3.0)*(t122360-1.0)*(1.0/2.0)))*(4.0/3.0)-1.0)*((cx1*gx*t122334)/t122364-cx1*gamma_bb[index]*t122361* \
                   1.0/(t122364*t122364)*t122339+(cx2*gamma_bb[index]*t122361*t122339*2.0)/t122376-cx2*t122361*t122335* \
                   t122339*1.0/(t122376*t122376)*(gx*t122334*2.0+gamma_bb[index]*t122361*t122339*2.0)+(cx4*gamma_bb[index]* \
                   t122335*t122362*t122338*4.0)/t122373+(cx3*gx*t122340*t122361*t122335*3.0)/t122368-cx4*t122362*1.0/ \
                   (t122373*t122373)*t122338*t122347*(gx*t122334*4.0+gamma_bb[index]*t122361*t122339*1.2E1+gamma_bb[index]* \
                   t122335*t122362*t122338*4.0+gx*t122340*t122361*t122335*1.2E1)-cx3*gamma_bb[index]*gx*t122340*t122361* \
                   t122335*1.0/(t122368*t122368)*(gx*t122334*3.0+gamma_bb[index]*t122361*t122339*6.0+gx*t122340*t122361* \
                   t122335*3.0));
            } else {
                v_gamma_bb_[index] = 0.0;
            } 
        }
        if (is_meta_) {

            //V_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_tau_a_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_tau_a_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_tau_a_[index] = 0.0;
            } else {
                v_tau_a_[index] = 0.0;
            } 

            //V_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_tau_b_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_tau_b_[index] = 0.0;
            } else {
                v_tau_b_[index] = 0.0;
            } 
        }
    }
    //Second Partials
    for (int index = 0; index < ntrue && deriv_ >= 2; index++) {

        //V_rho_a_rho_a
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t119373 = rho_a[index]+rho_b[index];
            double t119374 = 1.0/pow(t119373,1.0/3.0);
            double t119375 = c*t119374;
            double t119376 = sqrt(t119375);
            double t119377 = b1p*t119376;
            double t119378 = pow(t119375,3.0/2.0);
            double t119379 = b3p*t119378;
            double t119380 = c*c;
            double t119381 = 1.0/pow(t119373,2.0/3.0);
            double t119382 = b4p*t119380*t119381;
            double t119383 = b2p*c*t119374;
            double t119384 = t119382+t119383+t119377+t119379;
            double t119385 = 1.0/pow(t119373,4.0/3.0);
            double t119386 = 1.0/c0p;
            double t119387 = 1.0/t119384;
            double t119388 = t119386*t119387*(1.0/2.0);
            double t119389 = t119388+1.0;
            double t119390 = a1p*c*t119374;
            double t119391 = t119390+1.0;
            double t119392 = rho_a[index]-rho_b[index];
            double t119393 = t119392*t119392;
            double t119394 = 1.0/t119373;
            double t119395 = t119392*t119394;
            double t119396 = two_13*2.0;
            double t119397 = t119396-2.0;
            double t119398 = 1.0/t119397;
            double t119399 = 1.0/c0f;
            double t119400 = b1f*t119376;
            double t119401 = b3f*t119378;
            double t119402 = b4f*t119380*t119381;
            double t119403 = b2f*c*t119374;
            double t119404 = t119400+t119401+t119402+t119403;
            double t119405 = 1.0/t119404;
            double t119406 = t119405*t119399*(1.0/2.0);
            double t119407 = t119406+1.0;
            double t119408 = log(t119407);
            double t119409 = a1f*c*t119374;
            double t119410 = t119409+1.0;
            double t119411 = log(t119389);
            double t119421 = c0f*t119410*t119408*2.0;
            double t119422 = c0p*t119411*t119391*2.0;
            double t119412 = t119421-t119422;
            double t119413 = t119395+1.0;
            double t119414 = pow(t119413,4.0/3.0);
            double t119415 = -t119395+1.0;
            double t119416 = pow(t119415,4.0/3.0);
            double t119417 = t119414+t119416-2.0;
            double t119418 = 1.0/(t119373*t119373);
            double t119449 = t119418*t119392;
            double t119419 = t119394-t119449;
            double t119420 = 1.0/(t119373*t119373*t119373*t119373);
            double t119423 = t119393*t119393;
            double t119424 = 1.0/pow(t119373,5.0/3.0);
            double t119425 = 1.0/sqrt(t119375);
            double t119426 = 1.0/t119389;
            double t119427 = 1.0/(t119384*t119384);
            double t119428 = b4p*t119424*t119380*(2.0/3.0);
            double t119429 = b2p*c*t119385*(1.0/3.0);
            double t119430 = b1p*c*t119425*t119385*(1.0/6.0);
            double t119431 = b3p*c*t119376*t119385*(1.0/2.0);
            double t119432 = t119430+t119431+t119428+t119429;
            double t119433 = t119432*t119426*t119391*t119427;
            double t119434 = 1.0/(t119373*t119373*t119373*t119373*t119373);
            double t119435 = 1.0/d2fz0;
            double t119436 = 1.0/Aa;
            double t119437 = b1a*t119376;
            double t119438 = b3a*t119378;
            double t119439 = b4a*t119380*t119381;
            double t119440 = b2a*c*t119374;
            double t119441 = t119440+t119437+t119438+t119439;
            double t119442 = 1.0/t119441;
            double t119443 = t119442*t119436*(1.0/2.0);
            double t119444 = t119443+1.0;
            double t119445 = log(t119444);
            double t119446 = a1a*c*t119374;
            double t119447 = t119446+1.0;
            double t119448 = pow(t119413,1.0/3.0);
            double t119450 = t119419*t119448*(4.0/3.0);
            double t119451 = pow(t119415,1.0/3.0);
            double t119526 = t119451*t119419*(4.0/3.0);
            double t119452 = t119450-t119526;
            double t119453 = t119420*t119423;
            double t119454 = t119453-1.0;
            double t119455 = 1.0/pow(rho_a[index],1.0/3.0);
            double t119456 = c*t119455;
            double t119457 = sqrt(t119456);
            double t119458 = b1f*t119457;
            double t119459 = pow(t119456,3.0/2.0);
            double t119460 = b3f*t119459;
            double t119461 = 1.0/pow(rho_a[index],2.0/3.0);
            double t119462 = b4f*t119380*t119461;
            double t119463 = b2f*c*t119455;
            double t119464 = t119460+t119462+t119463+t119458;
            double t119465 = 1.0/pow(rho_a[index],4.0/3.0);
            double t119466 = b1p*t119457;
            double t119467 = b3p*t119459;
            double t119468 = b4p*t119380*t119461;
            double t119469 = b2p*c*t119455;
            double t119470 = t119466+t119467+t119468+t119469;
            double t119471 = 1.0/pow(rho_a[index],5.0/3.0);
            double t119472 = 1.0/sqrt(t119456);
            double t119473 = 1.0/t119464;
            double t119474 = t119473*t119399*(1.0/2.0);
            double t119475 = t119474+1.0;
            double t119476 = 1.0/t119470;
            double t119477 = t119386*t119476*(1.0/2.0);
            double t119478 = t119477+1.0;
            double t119479 = a1p*c*t119455;
            double t119480 = t119479+1.0;
            double t119481 = 1.0/t119478;
            double t119482 = 1.0/(t119470*t119470);
            double t119483 = b4p*t119380*t119471*(2.0/3.0);
            double t119484 = b2p*c*t119465*(1.0/3.0);
            double t119485 = b1p*c*t119472*t119465*(1.0/6.0);
            double t119486 = b3p*c*t119465*t119457*(1.0/2.0);
            double t119487 = t119483+t119484+t119485+t119486;
            double t119488 = t119480*t119481*t119482*t119487;
            double t119489 = log(t119478);
            double t119490 = pow(2.0,1.0/3.0);
            double t119491 = t119490*2.0;
            double t119492 = t119491-2.0;
            double t119493 = log(t119475);
            double t119494 = a1f*c*t119455;
            double t119495 = t119494+1.0;
            double t119496 = gcab*gcab;
            double t119500 = 1.0/pow(rho_a[index],8.0/3.0);
            double t119501 = gamma_aa[index]*t119500*(1.0/2.0);
            double t119502 = 1.0/pow(rho_b[index],8.0/3.0);
            double t119503 = gamma_bb[index]*t119502*(1.0/2.0);
            double t119497 = t119501+t119503;
            double t119498 = t119497*t119497;
            double t119499 = 1.0/pow(rho_a[index],1.1E1/3.0);
            double t119504 = t119496*t119496;
            double t119505 = t119498*t119498;
            double t119506 = t119496*t119498*6.0;
            double t119507 = gcab*t119496*t119497*t119498*4.0;
            double t119508 = t119504*t119505;
            double t119509 = gcab*t119497*4.0;
            double t119510 = t119506+t119507+t119508+t119509+1.0;
            double t119511 = gcab*t119497;
            double t119512 = t119511+1.0;
            double t119513 = t119496*t119498;
            double t119514 = gcab*t119497*2.0;
            double t119515 = t119513+t119514+1.0;
            double t119516 = t119496*t119498*3.0;
            double t119517 = gcab*t119496*t119497*t119498;
            double t119518 = gcab*t119497*3.0;
            double t119519 = t119516+t119517+t119518+1.0;
            double t119520 = 1.0/t119515;
            double t119521 = 1.0/t119519;
            double t119522 = 1.0/t119512;
            double t119523 = 1.0/t119510;
            double t119524 = 1.0/pow(t119373,7.0/3.0);
            double t119525 = 1.0/pow(t119373,8.0/3.0);
            double t119527 = 1.0/t119407;
            double t119528 = 1.0/(t119404*t119404);
            double t119529 = b4f*t119424*t119380*(2.0/3.0);
            double t119530 = b2f*c*t119385*(1.0/3.0);
            double t119531 = b1f*c*t119425*t119385*(1.0/6.0);
            double t119532 = b3f*c*t119376*t119385*(1.0/2.0);
            double t119533 = t119530+t119531+t119532+t119529;
            double t119534 = a1f*c*c0f*t119408*t119385*(2.0/3.0);
            double t119536 = t119410*t119533*t119527*t119528;
            double t119537 = a1p*c*c0p*t119411*t119385*(2.0/3.0);
            double t119535 = t119433+t119534-t119536-t119537;
            double t119538 = t119432*t119432;
            double t119539 = 1.0/pow(t119375,3.0/2.0);
            double t119540 = b4p*t119380*t119525*(1.0E1/9.0);
            double t119541 = b2p*c*t119524*(4.0/9.0);
            double t119542 = b1p*c*t119425*t119524*(2.0/9.0);
            double t119543 = b3p*c*t119524*t119376*(2.0/3.0);
            double t119544 = b3p*t119380*t119425*t119525*(1.0/1.2E1);
            double t119545 = t119540+t119541+t119542+t119543+t119544-b1p*t119380*t119525*t119539*(1.0/3.6E1);
            double t119546 = 1.0/(t119384*t119384*t119384);
            double t119547 = t119426*t119391*t119546*t119538*2.0;
            double t119548 = t119533*t119533;
            double t119549 = 1.0/(t119389*t119389);
            double t119550 = 1.0/(t119384*t119384*t119384*t119384);
            double t119551 = t119418*2.0;
            double t119552 = 1.0/(t119373*t119373*t119373);
            double t119559 = t119552*t119392*2.0;
            double t119553 = t119551-t119559;
            double t119554 = t119419*t119419;
            double t119555 = a1p*c*c0p*t119411*t119524*(8.0/9.0);
            double t119556 = 1.0/(t119373*t119373*t119373*t119373*t119373*t119373);
            double t119557 = t119423*t119434*4.0;
            double t119567 = t119420*t119392*t119393*4.0;
            double t119558 = t119557-t119567;
            double t119560 = t119451*t119553*(4.0/3.0);
            double t119561 = 1.0/pow(t119413,2.0/3.0);
            double t119562 = t119561*t119554*(4.0/9.0);
            double t119563 = 1.0/pow(t119415,2.0/3.0);
            double t119564 = t119554*t119563*(4.0/9.0);
            double t119565 = t119560+t119562+t119564-t119553*t119448*(4.0/3.0);
            double t119566 = 1.0/t119444;
            double t119568 = 1.0/(t119441*t119441);
            double t119569 = b4a*t119424*t119380*(2.0/3.0);
            double t119570 = b2a*c*t119385*(1.0/3.0);
            double t119571 = b1a*c*t119425*t119385*(1.0/6.0);
            double t119572 = b3a*c*t119376*t119385*(1.0/2.0);
            double t119573 = t119570+t119571+t119572+t119569;
            double t119574 = t119573*t119573;
            double t119575 = t119426*t119391*t119427*t119545;
            double t119576 = 1.0/t119475;
            double t119577 = b4f*t119380*t119471*(2.0/3.0);
            double t119578 = b2f*c*t119465*(1.0/3.0);
            double t119579 = b1f*c*t119472*t119465*(1.0/6.0);
            double t119580 = b3f*c*t119465*t119457*(1.0/2.0);
            double t119581 = t119580+t119577+t119578+t119579;
            double t119582 = 1.0/(t119464*t119464);
            double t119583 = 1.0/pow(rho_a[index],7.0/3.0);
            double t119584 = 1.0/pow(t119456,3.0/2.0);
            double t119585 = t119581*t119581;
            double t119586 = t119487*t119487;
            double t119587 = 1.0/(t119470*t119470*t119470);
            double t119588 = t119480*t119481*t119586*t119587*2.0;
            double t119589 = b4p*t119500*t119380*(1.0E1/9.0);
            double t119590 = b2p*c*t119583*(4.0/9.0);
            double t119591 = b3p*t119500*t119380*t119472*(1.0/1.2E1);
            double t119592 = b1p*c*t119472*t119583*(2.0/9.0);
            double t119593 = b3p*c*t119457*t119583*(2.0/3.0);
            double t119710 = b1p*t119500*t119380*t119584*(1.0/3.6E1);
            double t119594 = -t119710+t119590+t119591+t119592+t119593+t119589;
            double t119595 = 1.0/(t119478*t119478);
            double t119596 = 1.0/(t119470*t119470*t119470*t119470);
            double t119597 = a1p*c*c0p*t119583*t119489*(8.0/9.0);
            double t119598 = a1f*c*c0f*t119465*t119493*(2.0/3.0);
            double t119599 = a1p*c*c0p*t119465*t119489*(2.0/3.0);
            double t119600 = t119550*t119391*t119538*t119386*t119549*(1.0/2.0);
            double t119601 = a1p*c*t119432*t119426*t119427*t119385*(2.0/3.0);
            double t119673 = t119581*t119582*t119495*t119576;
            double t119602 = -t119673+t119488+t119598-t119599;
            double t119603 = gamma_aa[index]*gamma_aa[index];
            double t119604 = gcaa*gcaa;
            double t119605 = t119603*t119603;
            double t119606 = t119604*t119604;
            double t119607 = 1.0/pow(rho_a[index],3.2E1/3.0);
            double t119608 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]);
            double t119609 = 1.0/pow(rho_a[index],1.6E1/3.0);
            double t119610 = c0f*t119493*t119495*2.0;
            double t119612 = c0p*t119480*t119489*2.0;
            double t119611 = t119610-t119612;
            double t119613 = 1.0/pow(rho_b[index],1.0/3.0);
            double t119614 = c*t119613;
            double t119615 = sqrt(t119614);
            double t119616 = pow(t119614,3.0/2.0);
            double t119617 = 1.0/pow(rho_b[index],2.0/3.0);
            double t119618 = b1p*t119615;
            double t119619 = b3p*t119616;
            double t119620 = b4p*t119380*t119617;
            double t119621 = b2p*c*t119613;
            double t119622 = t119620+t119621+t119618+t119619;
            double t119623 = 1.0/t119622;
            double t119624 = t119623*t119386*(1.0/2.0);
            double t119625 = t119624+1.0;
            double t119626 = log(t119625);
            double t119627 = a1p*c*t119613;
            double t119628 = t119627+1.0;
            double t119629 = c0p*t119626*t119628*2.0;
            double t119630 = t119420*t119412*t119423*t119417*t119398;
            double t119631 = Aa*t119417*t119435*t119445*t119454*t119447*t119398*2.0;
            double t119632 = gamma_aa[index]*gcab*t119499*(1.6E1/3.0);
            double t119633 = gamma_aa[index]*gcab*t119496*t119498*t119499*1.6E1;
            double t119634 = gamma_aa[index]*t119504*t119497*t119498*t119499*(1.6E1/3.0);
            double t119635 = gamma_aa[index]*t119496*t119497*t119499*1.6E1;
            double t119636 = t119632+t119633+t119634+t119635;
            double t119637 = 1.0/(t119512*t119512);
            double t119638 = 1.0/pow(rho_a[index],2.2E1/3.0);
            double t119639 = gamma_aa[index]*gcab*t119499*(8.0/3.0);
            double t119640 = gamma_aa[index]*t119496*t119497*t119499*(8.0/3.0);
            double t119641 = t119640+t119639;
            double t119642 = 1.0/(t119519*t119519);
            double t119643 = 1.0/pow(rho_a[index],1.4E1/3.0);
            double t119644 = 1.0/(t119510*t119510);
            double t119645 = 1.0/(t119515*t119515);
            double t119646 = gamma_aa[index]*gcab*t119499*4.0;
            double t119647 = gamma_aa[index]*gcab*t119496*t119498*t119499*4.0;
            double t119648 = gamma_aa[index]*t119496*t119497*t119499*8.0;
            double t119649 = t119646+t119647+t119648;
            double t119650 = t119611*t119492*t119398;
            double t119651 = t119612+t119650;
            double t119652 = gamma_aa[index]*gcaa*t119500*4.0;
            double t119653 = gamma_aa[index]*gcaa*t119603*t119604*t119608*4.0;
            double t119654 = t119603*t119604*t119609*6.0;
            double t119655 = t119605*t119606*t119607;
            double t119656 = t119652+t119653+t119654+t119655+1.0;
            double t119657 = 1.0/t119656;
            double t119658 = gamma_aa[index]*gcaa*t119500;
            double t119659 = t119658+1.0;
            double t119660 = 1.0/t119659;
            double t119661 = gamma_aa[index]*gcaa*t119500*3.0;
            double t119662 = gamma_aa[index]*gcaa*t119603*t119604*t119608;
            double t119663 = t119603*t119604*t119609*3.0;
            double t119664 = t119661+t119662+t119663+1.0;
            double t119665 = 1.0/t119664;
            double t119666 = gamma_aa[index]*gcaa*t119500*2.0;
            double t119667 = t119603*t119604*t119609;
            double t119668 = t119666+t119667+1.0;
            double t119669 = 1.0/t119668;
            double t119670 = 1.0/pow(rho_a[index],1.9E1/3.0);
            double t119671 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]*rho_a[index]);
            double t119672 = 1.0/pow(rho_a[index],3.5E1/3.0);
            double t119674 = ccaa4*t119605*t119606*t119672*t119657*(3.2E1/3.0);
            double t119675 = ccaa1*gamma_aa[index]*gcaa*t119660*t119499*(8.0/3.0);
            double t119676 = ccaa3*gamma_aa[index]*gcaa*t119603*t119604*t119671*t119665*8.0;
            double t119677 = ccaa2*t119603*t119604*t119670*t119669*(1.6E1/3.0);
            double t119678 = 1.0/(t119659*t119659);
            double t119679 = gamma_aa[index]*gcaa*t119499*8.0;
            double t119680 = gamma_aa[index]*gcaa*t119603*t119604*t119671*8.0;
            double t119681 = t119603*t119604*t119670*1.6E1;
            double t119682 = t119680+t119681+t119679;
            double t119683 = 1.0/(t119664*t119664);
            double t119684 = gamma_aa[index]*gcaa*t119499*(3.2E1/3.0);
            double t119685 = gamma_aa[index]*gcaa*t119603*t119604*t119671*3.2E1;
            double t119686 = t119603*t119604*t119670*3.2E1;
            double t119687 = t119605*t119606*t119672*(3.2E1/3.0);
            double t119688 = t119684+t119685+t119686+t119687;
            double t119689 = 1.0/(t119656*t119656);
            double t119690 = gamma_aa[index]*gcaa*t119499*(1.6E1/3.0);
            double t119691 = t119603*t119604*t119670*(1.6E1/3.0);
            double t119692 = t119690+t119691;
            double t119693 = 1.0/(t119668*t119668);
            double t119694 = t119674+t119675+t119676+t119677-ccaa1*t119603*t119604*t119670*t119678*(8.0/3.0)- \
               ccaa2*t119603*t119604*t119609*t119692*t119693-ccaa4*t119605*t119606*t119607*t119688*t119689-ccaa3* \
               gamma_aa[index]*gcaa*t119603*t119604*t119608*t119682*t119683;
            double t119695 = 1.0/pow(rho_a[index],1.0E1);
            double t119696 = 1.0/pow(rho_a[index],3.8E1/3.0);
            double t119697 = ccaa4*t119605*t119606*t119607*t119657;
            double t119698 = ccaa1*gamma_aa[index]*gcaa*t119500*t119660;
            double t119699 = ccaa3*gamma_aa[index]*gcaa*t119603*t119604*t119608*t119665;
            double t119700 = ccaa2*t119603*t119604*t119609*t119669;
            double t119701 = ccaa0+t119700+t119697+t119698+t119699;
            double t119702 = 1.0/(t119464*t119464*t119464);
            double t119703 = b4f*t119500*t119380*(1.0E1/9.0);
            double t119704 = b2f*c*t119583*(4.0/9.0);
            double t119705 = b3f*t119500*t119380*t119472*(1.0/1.2E1);
            double t119706 = b1f*c*t119472*t119583*(2.0/9.0);
            double t119707 = b3f*c*t119457*t119583*(2.0/3.0);
            double t119708 = t119703+t119704+t119705+t119706+t119707-b1f*t119500*t119380*t119584*(1.0/3.6E1);
            double t119709 = t119582*t119708*t119495*t119576;
            double t119711 = t119480*t119481*t119482*t119594;
            double t119712 = 1.0/(t119475*t119475);
            double t119713 = 1.0/(t119464*t119464*t119464*t119464);
            double t119714 = t119712*t119713*t119495*t119585*t119399*(1.0/2.0);
            double t119715 = t119480*t119386*t119586*t119595*t119596*(1.0/2.0);
            double t119716 = a1f*c*t119581*t119465*t119582*t119576*(2.0/3.0);
            double t119717 = a1p*c*t119481*t119482*t119465*t119487*(2.0/3.0);
            double t119718 = rho_a[index]*(8.334140006820045E15/1.40737488355328E14);
            double t119719 = 1.0/(omega*omega);
            double t119720 = pow(t119718,2.0/3.0);
            double t119723 = t119720*t119719;
            double t119721 = exp(-t119723);
            double t119722 = 1.0/pow(t119718,1.0/3.0);
            double t119724 = 1.0/pow(t119718,2.0/3.0);
            double t119725 = omega*omega;
            double t119726 = t119721-1.0;
            double t119727 = 1.0/pow(t119718,4.0/3.0);
            double t119728 = 1.0/rho_a[index];
            double t119729 = 1.0/pow(t119718,5.0/3.0);
            double t119730 = 1.0/sqrt(3.141592653589793);
            double t119737 = t119724*t119725*t119726*(1.0/2.0);
            double t119731 = t119721-t119737;
            double t119732 = t119721*t119728*(1.0/3.0);
            double t119733 = t119725*t119726*t119729*(2.778046668940015E15/1.40737488355328E14);
            double t119780 = t119721*t119722*t119719*(2.778046668940015E15/7.0368744177664E13);
            double t119734 = t119732+t119733-t119780;
            double t119735 = 1.0/omega;
            double t119736 = 1.0/pow(t119718,7.0/3.0);
            double t119738 = gx*gx;
            double t119739 = t119738*t119738;
            double t119740 = pow(rho_a[index],4.0/3.0);
            double t119741 = pow(t119718,1.0/3.0);
            double t119742 = t119741*t119735;
            double t119743 = erf(t119742);
            double t119744 = t119743*(3.991211251234741E15/2.251799813685248E15);
            double t119745 = omega*t119722*t119731;
            double t119746 = t119744+t119745;
            double t119747 = gamma_aa[index]*gx*t119500*4.0;
            double t119748 = gamma_aa[index]*gx*t119603*t119608*t119738*4.0;
            double t119749 = t119603*t119609*t119738*6.0;
            double t119750 = t119605*t119607*t119739;
            double t119751 = t119750+t119747+t119748+t119749+1.0;
            double t119752 = 1.0/t119751;
            double t119753 = gamma_aa[index]*gx*t119500;
            double t119754 = t119753+1.0;
            double t119755 = 1.0/t119754;
            double t119756 = gamma_aa[index]*gx*t119500*3.0;
            double t119757 = gamma_aa[index]*gx*t119603*t119608*t119738;
            double t119758 = t119603*t119609*t119738*3.0;
            double t119759 = t119756+t119757+t119758+1.0;
            double t119760 = 1.0/t119759;
            double t119761 = gamma_aa[index]*gx*t119500*2.0;
            double t119762 = t119603*t119609*t119738;
            double t119763 = t119761+t119762+1.0;
            double t119764 = 1.0/t119763;
            double t119772 = gamma_aa[index]*gx*t119499*(3.2E1/3.0);
            double t119773 = gamma_aa[index]*gx*t119603*t119671*t119738*3.2E1;
            double t119774 = t119603*t119670*t119738*3.2E1;
            double t119775 = t119605*t119672*t119739*(3.2E1/3.0);
            double t119765 = t119772+t119773+t119774+t119775;
            double t119777 = gamma_aa[index]*gx*t119499*(1.6E1/3.0);
            double t119778 = t119603*t119670*t119738*(1.6E1/3.0);
            double t119766 = t119777+t119778;
            double t119767 = 1.0/(t119759*t119759);
            double t119768 = gamma_aa[index]*gx*t119499*8.0;
            double t119769 = gamma_aa[index]*gx*t119603*t119671*t119738*8.0;
            double t119770 = t119603*t119670*t119738*1.6E1;
            double t119771 = t119770+t119768+t119769;
            double t119776 = 1.0/(t119751*t119751);
            double t119779 = 1.0/(t119763*t119763);
            double t119781 = omega*t119722*t119734;
            double t119782 = t119721*t119730*t119724*t119735*(1.108777112152858E31/1.584563250285287E29);
            double t119791 = omega*t119731*t119727*(2.778046668940015E15/1.40737488355328E14);
            double t119783 = t119781+t119782-t119791;
            double t119784 = cx4*t119605*t119607*t119752*t119739;
            double t119785 = cx1*gamma_aa[index]*gx*t119500*t119755;
            double t119786 = cx3*gamma_aa[index]*gx*t119603*t119760*t119608*t119738;
            double t119787 = cx2*t119603*t119609*t119764*t119738;
            double t119788 = cx0+t119784+t119785+t119786+t119787;
            double t119789 = omega*t119722*t119746*(4.0/3.0);
            double t119790 = t119789-1.0;
            double t119792 = omega*t119722*t119783*(4.0/3.0);
            double t119793 = t119792-omega*t119727*t119746*(2.778046668940015E15/1.05553116266496E14);
            double t119794 = 1.0/(t119754*t119754);
            double t119795 = pow(rho_a[index],1.0/3.0);
            double t119796 = cx4*t119605*t119752*t119672*t119739*(3.2E1/3.0);
            double t119797 = cx1*gamma_aa[index]*gx*t119755*t119499*(8.0/3.0);
            double t119798 = cx3*gamma_aa[index]*gx*t119603*t119760*t119671*t119738*8.0;
            double t119799 = cx2*t119603*t119670*t119764*t119738*(1.6E1/3.0);
            double t119800 = t119796+t119797+t119798+t119799-cx1*t119603*t119670*t119738*t119794*(8.0/3.0)-cx2* \
               t119603*t119609*t119738*t119766*t119779-cx4*t119605*t119607*t119765*t119739*t119776-cx3*gamma_aa[index]* \
               gx*t119603*t119608*t119771*t119738*t119767;
            v_rho_a_rho_a_[index] = -(ccab0+ccab1*gcab*t119522*t119497+ccab4*t119504*t119505*t119523+ccab2*t119520* \
               t119496*t119498+ccab3*gcab*t119521*t119496*t119497*t119498)*(rho_a[index]*(t119711+t119715+t119717- \
               t119588-t119597+t119492*t119398*(t119714+t119716+t119709+t119588+t119597-t119480*t119481*t119482*t119594- \
               t119702*t119495*t119576*t119585*2.0-a1f*c*c0f*t119493*t119583*(8.0/9.0)-t119480*t119386*t119586*t119595* \
               t119596*(1.0/2.0)-a1p*c*t119481*t119482*t119465*t119487*(2.0/3.0)))+t119373*(-t119600-t119601+t119555+ \
               t119547-t119575+t119420*t119423*t119417*t119398*(t119600+t119601-t119555-t119547+t119575+t119410*1.0/ \
               (t119404*t119404*t119404)*t119527*t119548*2.0-t119410*t119527*t119528*(b2f*c*t119524*(4.0/9.0)+b4f* \
               t119380*t119525*(1.0E1/9.0)+b1f*c*t119425*t119524*(2.0/9.0)+b3f*c*t119524*t119376*(2.0/3.0)-b1f*t119380* \
               t119525*t119539*(1.0/3.6E1)+b3f*t119380*t119425*t119525*(1.0/1.2E1))-t119410*1.0/(t119404*t119404* \
               t119404*t119404)*1.0/(t119407*t119407)*t119548*t119399*(1.0/2.0)+a1f*c*c0f*t119524*t119408*(8.0/9.0) \
               -a1f*c*t119533*t119527*t119528*t119385*(2.0/3.0))+t119420*t119412*t119423*t119565*t119398-t119412* \
               t119423*t119434*t119452*t119398*8.0-t119420*t119423*t119452*t119535*t119398*2.0+t119420*t119412*t119417* \
               t119393*t119398*1.2E1+t119412*t119423*t119417*t119556*t119398*2.0E1+t119423*t119434*t119417*t119535* \
               t119398*8.0+t119420*t119412*t119452*t119392*t119393*t119398*8.0-t119412*t119434*t119417*t119392*t119393* \
               t119398*3.2E1-t119420*t119417*t119535*t119392*t119393*t119398*8.0-Aa*t119452*t119435*t119445*t119447* \
               t119558*t119398*4.0+Aa*t119435*t119445*t119454*t119447*t119565*t119398*2.0+Aa*t119417*t119435*t119445* \
               t119447*t119398*(t119420*t119393*1.2E1+t119423*t119556*2.0E1-t119434*t119392*t119393*3.2E1)*2.0+t119452* \
               t119435*t119454*t119447*t119573*t119566*t119568*t119398*2.0-t119417*t119435*t119447*t119573*t119566* \
               t119558*t119568*t119398*2.0+1.0/(t119441*t119441*t119441)*t119417*t119435*t119454*t119447*t119574* \
               t119566*t119398*2.0-t119417*t119435*t119454*t119447*t119566*t119568*t119398*(b2a*c*t119524*(4.0/9.0) \
               +b4a*t119380*t119525*(1.0E1/9.0)+b1a*c*t119425*t119524*(2.0/9.0)+b3a*c*t119524*t119376*(2.0/3.0)-b1a* \
               t119380*t119525*t119539*(1.0/3.6E1)+b3a*t119380*t119425*t119525*(1.0/1.2E1))+Aa*a1a*c*t119524*t119417* \
               t119435*t119445*t119454*t119398*(8.0/9.0)-Aa*a1a*c*t119452*t119435*t119445*t119454*t119385*t119398* \
               (4.0/3.0)+Aa*a1a*c*t119417*t119435*t119445*t119385*t119558*t119398*(4.0/3.0)-1.0/(t119441*t119441* \
               t119441*t119441)*t119417*t119435*1.0/(t119444*t119444)*t119436*t119454*t119447*t119574*t119398*(1.0/ \
               2.0)-a1a*c*t119417*t119435*t119454*t119573*t119385*t119566*t119568*t119398*(2.0/3.0))+t119602*t119492* \
               t119398*2.0+t119432*t119426*t119391*t119427*2.0-t119480*t119481*t119482*t119487*2.0-a1p*c*c0p*t119411* \
               t119385*(4.0/3.0)+a1p*c*c0p*t119465*t119489*(4.0/3.0)+t119420*t119412*t119423*t119452*t119398*2.0- \
               t119412*t119423*t119434*t119417*t119398*8.0-t119420*t119423*t119417*t119535*t119398*2.0+t119420*t119412* \
               t119417*t119392*t119393*t119398*8.0+Aa*t119452*t119435*t119445*t119454*t119447*t119398*4.0-Aa*t119417* \
               t119435*t119445*t119447*t119558*t119398*4.0+t119417*t119435*t119454*t119447*t119573*t119566*t119568* \
               t119398*2.0-Aa*a1a*c*t119417*t119435*t119445*t119454*t119385*t119398*(4.0/3.0))+(rho_a[index]*t119651+ \
               rho_b[index]*(t119629-t119492*t119398*(t119629-c0f*log((t119399*(1.0/2.0))/(b1f*t119615+b3f*t119616+ \
               b2f*c*t119613+b4f*t119380*t119617)+1.0)*(a1f*c*t119613+1.0)*2.0))-t119373*(t119422+t119630+t119631) \
               )*(-ccab2*t119645*t119496*t119498*(gamma_aa[index]*gcab*t119643*(8.8E1/9.0)+t119603*t119638*t119496* \
               (3.2E1/9.0)+gamma_aa[index]*t119643*t119496*t119497*(8.8E1/9.0))+ccab4*1.0/(t119510*t119510*t119510) \
               *t119504*t119505*(t119636*t119636)*2.0+ccab2*1.0/(t119515*t119515*t119515)*(t119641*t119641)*t119496* \
               t119498*2.0+ccab1*gamma_aa[index]*gcab*t119522*t119643*(4.4E1/9.0)+ccab2*t119520*t119603*t119638*t119496* \
               (3.2E1/9.0)-ccab1*t119603*t119637*t119638*t119496*(3.2E1/9.0)-ccab4*t119504*t119505*t119644*(gamma_aa[index]* \
               gcab*t119643*(1.76E2/9.0)+t119603*t119638*t119496*(6.4E1/3.0)+gamma_aa[index]*t119643*t119496*t119497* \
               (1.76E2/3.0)+t119504*t119603*t119638*t119498*(6.4E1/3.0)+gamma_aa[index]*gcab*t119643*t119496*t119498* \
               (1.76E2/3.0)+gamma_aa[index]*t119504*t119643*t119497*t119498*(1.76E2/9.0)+gcab*t119603*t119638*t119496* \
               t119497*(1.28E2/3.0))+ccab4*t119504*t119603*t119523*t119638*t119498*(6.4E1/3.0)+ccab2*gamma_aa[index]* \
               t119520*t119643*t119496*t119497*(8.8E1/9.0)-ccab1*gamma_aa[index]*t119643*t119637*t119496*t119497* \
               (4.4E1/9.0)+ccab3*gcab*1.0/(t119519*t119519*t119519)*t119496*(t119649*t119649)*t119497*t119498*2.0+ \
               ccab3*gamma_aa[index]*gcab*t119521*t119643*t119496*t119498*(4.4E1/3.0)+ccab4*gamma_aa[index]*t119504* \
               t119523*t119643*t119497*t119498*(1.76E2/9.0)-ccab2*gamma_aa[index]*t119641*t119645*t119496*t119497* \
               t119499*(1.6E1/3.0)+ccab3*gcab*t119521*t119603*t119638*t119496*t119497*(3.2E1/3.0)+ccab1*gcab*1.0/ \
               (t119512*t119512*t119512)*t119603*t119638*t119496*t119497*(3.2E1/9.0)-ccab3*gcab*t119642*t119496*t119497* \
               t119498*(gamma_aa[index]*gcab*t119643*(4.4E1/3.0)+t119603*t119638*t119496*(3.2E1/3.0)+gamma_aa[index]* \
               t119643*t119496*t119497*(8.8E1/3.0)+gamma_aa[index]*gcab*t119643*t119496*t119498*(4.4E1/3.0)+gcab* \
               t119603*t119638*t119496*t119497*(3.2E1/3.0))-ccab3*gamma_aa[index]*gcab*t119642*t119496*t119649*t119498* \
               t119499*8.0-ccab4*gamma_aa[index]*t119504*t119644*t119636*t119497*t119498*t119499*(3.2E1/3.0))+t119701* \
               (-t119488+t119599+t119602*t119492*t119398)*2.0+t119651*t119694*2.0+(t119422+t119630+t119631+rho_a[index]* \
               (-t119488+t119599+t119492*t119398*(t119488+t119598-t119581*t119582*t119495*t119576-a1p*c*c0p*t119465* \
               t119489*(2.0/3.0)))+t119373*(t119433-a1p*c*c0p*t119411*t119385*(2.0/3.0)+t119420*t119412*t119423*t119452* \
               t119398-t119412*t119423*t119434*t119417*t119398*4.0-t119420*t119423*t119417*t119535*t119398+t119420* \
               t119412*t119417*t119392*t119393*t119398*4.0+Aa*t119452*t119435*t119445*t119454*t119447*t119398*2.0- \
               Aa*t119417*t119435*t119445*t119447*t119558*t119398*2.0+t119417*t119435*t119454*t119447*t119573*t119566* \
               t119568*t119398-Aa*a1a*c*t119417*t119435*t119445*t119454*t119385*t119398*(2.0/3.0))-c0p*t119480*t119489* \
               2.0-t119611*t119492*t119398)*(ccab1*gamma_aa[index]*gcab*t119522*t119499*(4.0/3.0)-ccab4*t119504*t119505* \
               t119644*t119636-ccab2*t119641*t119645*t119496*t119498+ccab2*gamma_aa[index]*t119520*t119496*t119497* \
               t119499*(8.0/3.0)-ccab1*gamma_aa[index]*t119637*t119496*t119497*t119499*(4.0/3.0)+ccab3*gamma_aa[index]* \
               gcab*t119521*t119496*t119498*t119499*4.0+ccab4*gamma_aa[index]*t119504*t119523*t119497*t119498*t119499* \
               (1.6E1/3.0)-ccab3*gcab*t119642*t119496*t119649*t119497*t119498)*2.0+rho_a[index]*t119694*(t119488- \
               t119599+t119492*t119398*(t119673-t119488-t119598+t119599))*2.0+rho_a[index]*t119701*(t119711+t119715+ \
               t119717-t119588-t119597-t119492*t119398*(t119711-t119714+t119715-t119716+t119717-t119709-t119588-t119597+ \
               t119702*t119495*t119576*t119585*2.0+a1f*c*c0f*t119493*t119583*(8.0/9.0)))-rho_a[index]*t119651*(ccaa1* \
               gamma_aa[index]*gcaa*t119660*t119643*(8.8E1/9.0)-ccaa1*t119603*t119604*t119638*t119678*2.4E1+ccaa2* \
               t119603*t119604*t119638*t119669*(3.04E2/9.0)+ccaa4*t119605*t119606*t119657*t119696*(1.12E3/9.0)-ccaa2* \
               t119603*t119604*t119670*t119692*t119693*(3.2E1/3.0)-ccaa4*t119605*t119606*t119672*t119688*t119689* \
               (6.4E1/3.0)-ccaa2*t119603*t119604*t119609*t119693*(gamma_aa[index]*gcaa*t119643*(1.76E2/9.0)+t119603* \
               t119604*t119638*(3.04E2/9.0))-ccaa4*t119605*t119606*t119607*t119689*(gamma_aa[index]*gcaa*t119643* \
               (3.52E2/9.0)+t119603*t119604*t119638*(6.08E2/3.0)+t119605*t119606*t119696*(1.12E3/9.0)+gamma_aa[index]* \
               gcaa*t119603*t119604*t119695*2.88E2)+ccaa2*t119603*t119604*t119609*(t119692*t119692)*1.0/(t119668* \
               t119668*t119668)*2.0+ccaa4*t119605*t119606*t119607*1.0/(t119656*t119656*t119656)*(t119688*t119688) \
               *2.0+ccaa3*gamma_aa[index]*gcaa*t119603*t119604*t119665*t119695*7.2E1+ccaa1*gamma_aa[index]*gcaa*t119603* \
               t119604*1.0/(t119659*t119659*t119659)*t119695*(1.28E2/9.0)+ccaa3*gamma_aa[index]*gcaa*t119603*t119604* \
               t119608*1.0/(t119664*t119664*t119664)*(t119682*t119682)*2.0-ccaa3*gamma_aa[index]*gcaa*t119603*t119604* \
               t119608*t119683*(gamma_aa[index]*gcaa*t119643*(8.8E1/3.0)+t119603*t119604*t119638*(3.04E2/3.0)+gamma_aa[index]* \
               gcaa*t119603*t119604*t119695*7.2E1)-ccaa3*gamma_aa[index]*gcaa*t119603*t119604*t119671*t119682*t119683* \
               1.6E1)-c0*t119740*t119790*(cx1*gamma_aa[index]*gx*t119643*t119755*(8.8E1/9.0)-cx1*t119603*t119638* \
               t119738*t119794*2.4E1+cx2*t119603*t119638*t119764*t119738*(3.04E2/9.0)+cx4*t119605*t119752*t119739* \
               t119696*(1.12E3/9.0)-cx2*t119603*t119670*t119738*t119766*t119779*(3.2E1/3.0)-cx4*t119605*t119672*t119765* \
               t119739*t119776*(6.4E1/3.0)-cx2*t119603*t119609*t119738*t119779*(gamma_aa[index]*gx*t119643*(1.76E2/ \
               9.0)+t119603*t119638*t119738*(3.04E2/9.0))-cx4*t119605*t119607*t119739*t119776*(gamma_aa[index]*gx* \
               t119643*(3.52E2/9.0)+t119603*t119638*t119738*(6.08E2/3.0)+t119605*t119739*t119696*(1.12E3/9.0)+gamma_aa[index]* \
               gx*t119603*t119738*t119695*2.88E2)+cx2*t119603*t119609*1.0/(t119763*t119763*t119763)*t119738*(t119766* \
               t119766)*2.0+cx4*t119605*t119607*1.0/(t119751*t119751*t119751)*(t119765*t119765)*t119739*2.0+cx3*gamma_aa[index]* \
               gx*t119603*t119760*t119738*t119695*7.2E1+cx1*gamma_aa[index]*gx*t119603*1.0/(t119754*t119754*t119754) \
               *t119738*t119695*(1.28E2/9.0)+cx3*gamma_aa[index]*gx*t119603*t119608*(t119771*t119771)*t119738*1.0/ \
               (t119759*t119759*t119759)*2.0-cx3*gamma_aa[index]*gx*t119603*t119608*t119738*t119767*(gamma_aa[index]* \
               gx*t119643*(8.8E1/3.0)+t119603*t119638*t119738*(3.04E2/3.0)+gamma_aa[index]*gx*t119603*t119738*t119695* \
               7.2E1)-cx3*gamma_aa[index]*gx*t119603*t119671*t119771*t119738*t119767*1.6E1)+c0*t119800*t119740*t119793* \
               2.0+c0*t119800*t119790*t119795*(8.0/3.0)-c0*t119461*t119790*t119788*(4.0/9.0)-c0*t119793*t119795*t119788* \
               (8.0/3.0)+c0*t119740*t119788*(omega*t119736*t119746*(-7.717543294808713E30/3.713820117856141E27)+omega* \
               t119727*t119783*(2.778046668940015E15/5.2776558133248E13)+omega*t119722*(omega*t119731*t119736*(-7.717543294808713E30/ \
               4.951760157141521E27)+omega*t119734*t119727*(2.778046668940015E15/7.0368744177664E13)+omega*t119722* \
               (1.0/(rho_a[index]*rho_a[index])*t119721*(5.0/9.0)-1.0/(omega*omega*omega*omega)*t119721*t119724*(7.717543294808713E30/ \
               4.951760157141521E27)+t119725*t119726*1.0/pow(t119718,8.0/3.0)*(3.858771647404357E31/1.980704062856608E28) \
               -t119721*t119727*t119719*(7.717543294808713E30/9.903520314283042E27)+t119721*t119722*t119719*t119728* \
               (2.778046668940015E15/2.11106232532992E14))+t119721*t119730*t119735*t119729*(3.080234563013177E46/ \
               1.115037259926531E43)+1.0/(omega*omega*omega)*t119721*t119730*t119728*(1.108777112152858E31/2.37684487542793E29) \
               )*(4.0/3.0));
        } else if (rho_a[index] > cutoff_) {
            double t123135 = 1.0/pow(rho_a[index],1.0/3.0);
            double t123136 = c*t123135;
            double t123137 = sqrt(t123136);
            double t123138 = b1f*t123137;
            double t123139 = pow(t123136,3.0/2.0);
            double t123140 = b3f*t123139;
            double t123141 = c*c;
            double t123142 = 1.0/pow(rho_a[index],2.0/3.0);
            double t123143 = b4f*t123141*t123142;
            double t123144 = b2f*c*t123135;
            double t123145 = t123140+t123143+t123144+t123138;
            double t123146 = 1.0/pow(rho_a[index],4.0/3.0);
            double t123147 = b1p*t123137;
            double t123148 = b3p*t123139;
            double t123149 = b4p*t123141*t123142;
            double t123150 = b2p*c*t123135;
            double t123151 = t123150+t123147+t123148+t123149;
            double t123152 = 1.0/pow(rho_a[index],5.0/3.0);
            double t123153 = 1.0/sqrt(t123136);
            double t123154 = 1.0/c0f;
            double t123155 = 1.0/t123145;
            double t123156 = t123154*t123155*(1.0/2.0);
            double t123157 = t123156+1.0;
            double t123158 = 1.0/c0p;
            double t123159 = 1.0/t123151;
            double t123160 = t123158*t123159*(1.0/2.0);
            double t123161 = t123160+1.0;
            double t123162 = a1p*c*t123135;
            double t123163 = t123162+1.0;
            double t123164 = 1.0/t123161;
            double t123165 = 1.0/(t123151*t123151);
            double t123166 = b4p*t123141*t123152*(2.0/3.0);
            double t123167 = b2p*c*t123146*(1.0/3.0);
            double t123168 = b1p*c*t123153*t123146*(1.0/6.0);
            double t123169 = b3p*c*t123137*t123146*(1.0/2.0);
            double t123170 = t123166+t123167+t123168+t123169;
            double t123171 = t123170*t123163*t123164*t123165;
            double t123172 = log(t123161);
            double t123173 = gamma_aa[index]*gamma_aa[index];
            double t123174 = gcaa*gcaa;
            double t123175 = t123173*t123173;
            double t123176 = t123174*t123174;
            double t123177 = 1.0/pow(rho_a[index],3.2E1/3.0);
            double t123178 = 1.0/pow(rho_a[index],8.0/3.0);
            double t123179 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]);
            double t123180 = 1.0/pow(rho_a[index],1.6E1/3.0);
            double t123181 = pow(2.0,1.0/3.0);
            double t123182 = t123181*2.0;
            double t123183 = t123182-2.0;
            double t123184 = two_13*2.0;
            double t123185 = t123184-2.0;
            double t123186 = 1.0/t123185;
            double t123187 = log(t123157);
            double t123188 = a1f*c*t123135;
            double t123189 = t123188+1.0;
            double t123190 = gamma_aa[index]*gcaa*t123178*4.0;
            double t123191 = gamma_aa[index]*gcaa*t123173*t123174*t123179*4.0;
            double t123192 = t123180*t123173*t123174*6.0;
            double t123193 = t123175*t123176*t123177;
            double t123194 = t123190+t123191+t123192+t123193+1.0;
            double t123195 = 1.0/t123194;
            double t123196 = gamma_aa[index]*gcaa*t123178;
            double t123197 = t123196+1.0;
            double t123198 = 1.0/t123197;
            double t123199 = gamma_aa[index]*gcaa*t123178*3.0;
            double t123200 = gamma_aa[index]*gcaa*t123173*t123174*t123179;
            double t123201 = t123180*t123173*t123174*3.0;
            double t123202 = t123200+t123201+t123199+1.0;
            double t123203 = 1.0/t123202;
            double t123204 = gamma_aa[index]*gcaa*t123178*2.0;
            double t123205 = t123180*t123173*t123174;
            double t123206 = t123204+t123205+1.0;
            double t123207 = 1.0/t123206;
            double t123208 = 1.0/pow(rho_a[index],1.9E1/3.0);
            double t123209 = 1.0/pow(rho_a[index],1.1E1/3.0);
            double t123210 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]*rho_a[index]);
            double t123211 = 1.0/pow(rho_a[index],3.5E1/3.0);
            double t123212 = 1.0/t123157;
            double t123213 = 1.0/(t123145*t123145);
            double t123214 = b4f*t123141*t123152*(2.0/3.0);
            double t123215 = b2f*c*t123146*(1.0/3.0);
            double t123216 = b1f*c*t123153*t123146*(1.0/6.0);
            double t123217 = b3f*c*t123137*t123146*(1.0/2.0);
            double t123218 = t123214+t123215+t123216+t123217;
            double t123219 = a1f*c*c0f*t123146*t123187*(2.0/3.0);
            double t123220 = a1p*c*c0p*t123172*t123146*(2.0/3.0);
            double t123221 = ccaa4*t123211*t123175*t123176*t123195*(3.2E1/3.0);
            double t123222 = ccaa1*gamma_aa[index]*gcaa*t123209*t123198*(8.0/3.0);
            double t123223 = ccaa3*gamma_aa[index]*gcaa*t123210*t123203*t123173*t123174*8.0;
            double t123224 = ccaa2*t123207*t123208*t123173*t123174*(1.6E1/3.0);
            double t123225 = 1.0/(t123197*t123197);
            double t123226 = gamma_aa[index]*gcaa*t123209*8.0;
            double t123227 = gamma_aa[index]*gcaa*t123210*t123173*t123174*8.0;
            double t123228 = t123208*t123173*t123174*1.6E1;
            double t123229 = t123226+t123227+t123228;
            double t123230 = 1.0/(t123202*t123202);
            double t123231 = gamma_aa[index]*gcaa*t123209*(3.2E1/3.0);
            double t123232 = gamma_aa[index]*gcaa*t123210*t123173*t123174*3.2E1;
            double t123233 = t123208*t123173*t123174*3.2E1;
            double t123234 = t123211*t123175*t123176*(3.2E1/3.0);
            double t123235 = t123231+t123232+t123233+t123234;
            double t123236 = 1.0/(t123194*t123194);
            double t123237 = gamma_aa[index]*gcaa*t123209*(1.6E1/3.0);
            double t123238 = t123208*t123173*t123174*(1.6E1/3.0);
            double t123239 = t123237+t123238;
            double t123240 = 1.0/(t123206*t123206);
            double t123241 = t123221+t123222+t123223+t123224-ccaa1*t123225*t123208*t123173*t123174*(8.0/3.0)- \
               ccaa2*t123240*t123180*t123173*t123174*t123239-ccaa4*t123235*t123236*t123175*t123176*t123177-ccaa3* \
               gamma_aa[index]*gcaa*t123230*t123173*t123174*t123229*t123179;
            double t123242 = c0f*t123187*t123189*2.0;
            double t123243 = c0p*t123163*t123172*2.0;
            double t123244 = 1.0/pow(rho_a[index],1.0E1);
            double t123245 = 1.0/pow(rho_a[index],2.2E1/3.0);
            double t123246 = 1.0/pow(rho_a[index],1.4E1/3.0);
            double t123247 = 1.0/pow(rho_a[index],3.8E1/3.0);
            double t123248 = ccaa4*t123175*t123176*t123177*t123195;
            double t123249 = ccaa1*gamma_aa[index]*gcaa*t123178*t123198;
            double t123250 = ccaa3*gamma_aa[index]*gcaa*t123203*t123173*t123174*t123179;
            double t123251 = ccaa2*t123180*t123207*t123173*t123174;
            double t123252 = ccaa0+t123250+t123251+t123248+t123249;
            double t123253 = 1.0/pow(rho_a[index],7.0/3.0);
            double t123254 = 1.0/pow(t123136,3.0/2.0);
            double t123255 = t123218*t123218;
            double t123256 = t123170*t123170;
            double t123257 = 1.0/(t123151*t123151*t123151);
            double t123258 = t123163*t123164*t123256*t123257*2.0;
            double t123259 = b4p*t123141*t123178*(1.0E1/9.0);
            double t123260 = b2p*c*t123253*(4.0/9.0);
            double t123261 = b3p*t123141*t123153*t123178*(1.0/1.2E1);
            double t123262 = b1p*c*t123153*t123253*(2.0/9.0);
            double t123263 = b3p*c*t123253*t123137*(2.0/3.0);
            double t123264 = t123260+t123261+t123262+t123263+t123259-b1p*t123141*t123254*t123178*(1.0/3.6E1);
            double t123265 = 1.0/(t123161*t123161);
            double t123266 = 1.0/(t123151*t123151*t123151*t123151);
            double t123267 = a1p*c*c0p*t123172*t123253*(8.0/9.0);
            double t123268 = rho_a[index]*(8.334140006820045E15/1.40737488355328E14);
            double t123269 = 1.0/(omega*omega);
            double t123270 = pow(t123268,2.0/3.0);
            double t123273 = t123270*t123269;
            double t123271 = exp(-t123273);
            double t123272 = 1.0/pow(t123268,1.0/3.0);
            double t123274 = 1.0/pow(t123268,2.0/3.0);
            double t123275 = omega*omega;
            double t123276 = t123271-1.0;
            double t123277 = 1.0/pow(t123268,4.0/3.0);
            double t123278 = 1.0/rho_a[index];
            double t123279 = 1.0/pow(t123268,5.0/3.0);
            double t123280 = 1.0/sqrt(3.141592653589793);
            double t123287 = t123274*t123275*t123276*(1.0/2.0);
            double t123281 = t123271-t123287;
            double t123282 = t123271*t123278*(1.0/3.0);
            double t123283 = t123275*t123276*t123279*(2.778046668940015E15/1.40737488355328E14);
            double t123330 = t123271*t123272*t123269*(2.778046668940015E15/7.0368744177664E13);
            double t123284 = -t123330+t123282+t123283;
            double t123285 = 1.0/omega;
            double t123286 = 1.0/pow(t123268,7.0/3.0);
            double t123288 = gx*gx;
            double t123289 = t123288*t123288;
            double t123290 = pow(rho_a[index],4.0/3.0);
            double t123291 = pow(t123268,1.0/3.0);
            double t123292 = t123291*t123285;
            double t123293 = erf(t123292);
            double t123294 = t123293*(3.991211251234741E15/2.251799813685248E15);
            double t123295 = omega*t123272*t123281;
            double t123296 = t123294+t123295;
            double t123297 = gamma_aa[index]*gx*t123178*4.0;
            double t123298 = gamma_aa[index]*gx*t123173*t123179*t123288*4.0;
            double t123299 = t123180*t123173*t123288*6.0;
            double t123300 = t123175*t123177*t123289;
            double t123301 = t123300+t123297+t123298+t123299+1.0;
            double t123302 = 1.0/t123301;
            double t123303 = gamma_aa[index]*gx*t123178;
            double t123304 = t123303+1.0;
            double t123305 = 1.0/t123304;
            double t123306 = gamma_aa[index]*gx*t123178*3.0;
            double t123307 = gamma_aa[index]*gx*t123173*t123179*t123288;
            double t123308 = t123180*t123173*t123288*3.0;
            double t123309 = t123306+t123307+t123308+1.0;
            double t123310 = 1.0/t123309;
            double t123311 = gamma_aa[index]*gx*t123178*2.0;
            double t123312 = t123180*t123173*t123288;
            double t123313 = t123311+t123312+1.0;
            double t123314 = 1.0/t123313;
            double t123322 = gamma_aa[index]*gx*t123209*(3.2E1/3.0);
            double t123323 = gamma_aa[index]*gx*t123210*t123173*t123288*3.2E1;
            double t123324 = t123208*t123173*t123288*3.2E1;
            double t123325 = t123211*t123175*t123289*(3.2E1/3.0);
            double t123315 = t123322+t123323+t123324+t123325;
            double t123327 = gamma_aa[index]*gx*t123209*(1.6E1/3.0);
            double t123328 = t123208*t123173*t123288*(1.6E1/3.0);
            double t123316 = t123327+t123328;
            double t123317 = 1.0/(t123309*t123309);
            double t123318 = gamma_aa[index]*gx*t123209*8.0;
            double t123319 = gamma_aa[index]*gx*t123210*t123173*t123288*8.0;
            double t123320 = t123208*t123173*t123288*1.6E1;
            double t123321 = t123320+t123318+t123319;
            double t123326 = 1.0/(t123301*t123301);
            double t123329 = 1.0/(t123313*t123313);
            double t123331 = omega*t123272*t123284;
            double t123332 = t123271*t123280*t123274*t123285*(1.108777112152858E31/1.584563250285287E29);
            double t123341 = omega*t123281*t123277*(2.778046668940015E15/1.40737488355328E14);
            double t123333 = t123331+t123332-t123341;
            double t123334 = cx4*t123302*t123175*t123177*t123289;
            double t123335 = cx1*gamma_aa[index]*gx*t123305*t123178;
            double t123336 = cx3*gamma_aa[index]*gx*t123310*t123173*t123179*t123288;
            double t123337 = cx2*t123314*t123180*t123173*t123288;
            double t123338 = cx0+t123334+t123335+t123336+t123337;
            double t123339 = omega*t123272*t123296*(4.0/3.0);
            double t123340 = t123339-1.0;
            double t123342 = omega*t123333*t123272*(4.0/3.0);
            double t123343 = t123342-omega*t123277*t123296*(2.778046668940015E15/1.05553116266496E14);
            double t123344 = 1.0/(t123304*t123304);
            double t123345 = pow(rho_a[index],1.0/3.0);
            double t123346 = cx4*t123211*t123302*t123175*t123289*(3.2E1/3.0);
            double t123347 = cx1*gamma_aa[index]*gx*t123305*t123209*(8.0/3.0);
            double t123348 = cx3*gamma_aa[index]*gx*t123210*t123310*t123173*t123288*8.0;
            double t123349 = cx2*t123314*t123208*t123173*t123288*(1.6E1/3.0);
            double t123350 = t123346+t123347+t123348+t123349-cx1*t123208*t123173*t123344*t123288*(8.0/3.0)-cx2* \
               t123180*t123316*t123173*t123329*t123288-cx4*t123315*t123326*t123175*t123177*t123289-cx3*gamma_aa[index]* \
               gx*t123321*t123173*t123317*t123179*t123288;
            v_rho_a_rho_a_[index] = t123241*(t123243+t123183*t123186*(t123242-c0p*t123163*t123172*2.0))*2.0+t123252* \
               (t123220-t123171+t123183*t123186*(t123171+t123219-t123212*t123213*t123218*t123189-a1p*c*c0p*t123172* \
               t123146*(2.0/3.0)))*2.0+rho_a[index]*t123252*(-t123258-t123267+t123183*t123186*(t123258+t123267-t123163* \
               t123164*t123165*t123264-t123212*1.0/(t123145*t123145*t123145)*t123255*t123189*2.0+t123212*t123213* \
               t123189*(b2f*c*t123253*(4.0/9.0)+b4f*t123141*t123178*(1.0E1/9.0)+b1f*c*t123153*t123253*(2.0/9.0)+b3f* \
               c*t123253*t123137*(2.0/3.0)-b1f*t123141*t123254*t123178*(1.0/3.6E1)+b3f*t123141*t123153*t123178*(1.0/ \
               1.2E1))+1.0/(t123145*t123145*t123145*t123145)*t123154*t123255*1.0/(t123157*t123157)*t123189*(1.0/2.0) \
               -a1f*c*c0f*t123253*t123187*(8.0/9.0)-t123163*t123256*t123265*t123158*t123266*(1.0/2.0)+a1f*c*t123212* \
               t123213*t123146*t123218*(2.0/3.0)-a1p*c*t123170*t123146*t123164*t123165*(2.0/3.0))+t123163*t123164* \
               t123165*t123264+t123163*t123256*t123265*t123158*t123266*(1.0/2.0)+a1p*c*t123170*t123146*t123164*t123165* \
               (2.0/3.0))+rho_a[index]*t123241*(-t123220+t123171+t123183*t123186*(t123220-t123171-t123219+t123212* \
               t123213*t123218*t123189))*2.0-rho_a[index]*(t123243+t123183*t123186*(t123242-t123243))*(ccaa1*gamma_aa[index]* \
               gcaa*t123246*t123198*(8.8E1/9.0)-ccaa1*t123225*t123173*t123245*t123174*2.4E1+ccaa2*t123207*t123173* \
               t123245*t123174*(3.04E2/9.0)+ccaa4*t123175*t123247*t123176*t123195*(1.12E3/9.0)-ccaa2*t123240*t123208* \
               t123173*t123174*t123239*(3.2E1/3.0)-ccaa4*t123211*t123235*t123236*t123175*t123176*(6.4E1/3.0)-ccaa2* \
               t123240*t123180*t123173*t123174*(gamma_aa[index]*gcaa*t123246*(1.76E2/9.0)+t123173*t123245*t123174* \
               (3.04E2/9.0))-ccaa4*t123236*t123175*t123176*t123177*(gamma_aa[index]*gcaa*t123246*(3.52E2/9.0)+t123173* \
               t123245*t123174*(6.08E2/3.0)+t123175*t123247*t123176*(1.12E3/9.0)+gamma_aa[index]*gcaa*t123244*t123173* \
               t123174*2.88E2)+ccaa2*1.0/(t123206*t123206*t123206)*t123180*t123173*t123174*(t123239*t123239)*2.0+ \
               ccaa4*(t123235*t123235)*t123175*t123176*1.0/(t123194*t123194*t123194)*t123177*2.0+ccaa3*gamma_aa[index]* \
               gcaa*t123203*t123244*t123173*t123174*7.2E1+ccaa1*gamma_aa[index]*gcaa*t123244*t123173*t123174*1.0/ \
               (t123197*t123197*t123197)*(1.28E2/9.0)+ccaa3*gamma_aa[index]*gcaa*1.0/(t123202*t123202*t123202)*t123173* \
               t123174*(t123229*t123229)*t123179*2.0-ccaa3*gamma_aa[index]*gcaa*t123230*t123173*t123174*t123179*(gamma_aa[index]* \
               gcaa*t123246*(8.8E1/3.0)+t123173*t123245*t123174*(3.04E2/3.0)+gamma_aa[index]*gcaa*t123244*t123173* \
               t123174*7.2E1)-ccaa3*gamma_aa[index]*gcaa*t123210*t123230*t123173*t123174*t123229*1.6E1)-c0*t123340* \
               t123290*(cx1*gamma_aa[index]*gx*t123305*t123246*(8.8E1/9.0)-cx1*t123173*t123245*t123344*t123288*2.4E1+ \
               cx2*t123314*t123173*t123245*t123288*(3.04E2/9.0)+cx4*t123302*t123175*t123247*t123289*(1.12E3/9.0)- \
               cx2*t123208*t123316*t123173*t123329*t123288*(3.2E1/3.0)-cx4*t123211*t123315*t123326*t123175*t123289* \
               (6.4E1/3.0)-cx2*t123180*t123173*t123329*t123288*(gamma_aa[index]*gx*t123246*(1.76E2/9.0)+t123173*t123245* \
               t123288*(3.04E2/9.0))-cx4*t123326*t123175*t123177*t123289*(gamma_aa[index]*gx*t123246*(3.52E2/9.0) \
               +t123173*t123245*t123288*(6.08E2/3.0)+t123175*t123247*t123289*(1.12E3/9.0)+gamma_aa[index]*gx*t123244* \
               t123173*t123288*2.88E2)+cx2*1.0/(t123313*t123313*t123313)*t123180*(t123316*t123316)*t123173*t123288* \
               2.0+cx4*1.0/(t123301*t123301*t123301)*(t123315*t123315)*t123175*t123177*t123289*2.0+cx3*gamma_aa[index]* \
               gx*t123310*t123244*t123173*t123288*7.2E1+cx1*gamma_aa[index]*gx*1.0/(t123304*t123304*t123304)*t123244* \
               t123173*t123288*(1.28E2/9.0)+cx3*gamma_aa[index]*gx*(t123321*t123321)*t123173*1.0/(t123309*t123309* \
               t123309)*t123179*t123288*2.0-cx3*gamma_aa[index]*gx*t123173*t123317*t123179*t123288*(gamma_aa[index]* \
               gx*t123246*(8.8E1/3.0)+t123173*t123245*t123288*(3.04E2/3.0)+gamma_aa[index]*gx*t123244*t123173*t123288* \
               7.2E1)-cx3*gamma_aa[index]*gx*t123210*t123321*t123173*t123317*t123288*1.6E1)+c0*t123340*t123350*t123345* \
               (8.0/3.0)-c0*t123142*t123340*t123338*(4.0/9.0)+c0*t123350*t123343*t123290*2.0-c0*t123343*t123345*t123338* \
               (8.0/3.0)+c0*t123290*t123338*(omega*t123333*t123277*(2.778046668940015E15/5.2776558133248E13)-omega* \
               t123286*t123296*(7.717543294808713E30/3.713820117856141E27)+omega*t123272*(omega*t123281*t123286*(- \
               7.717543294808713E30/4.951760157141521E27)+omega*t123284*t123277*(2.778046668940015E15/7.0368744177664E13) \
               +omega*t123272*(1.0/(rho_a[index]*rho_a[index])*t123271*(5.0/9.0)-1.0/(omega*omega*omega*omega)*t123271* \
               t123274*(7.717543294808713E30/4.951760157141521E27)+t123275*t123276*1.0/pow(t123268,8.0/3.0)*(3.858771647404357E31/ \
               1.980704062856608E28)-t123271*t123277*t123269*(7.717543294808713E30/9.903520314283042E27)+t123271* \
               t123272*t123269*t123278*(2.778046668940015E15/2.11106232532992E14))+t123271*t123280*t123285*t123279* \
               (3.080234563013177E46/1.115037259926531E43)+1.0/(omega*omega*omega)*t123271*t123280*t123278*(1.108777112152858E31/ \
               2.37684487542793E29))*(4.0/3.0));
        } else if (rho_b[index] > cutoff_) {
            v_rho_a_rho_a_[index] = 0.0;
        } else {
            v_rho_a_rho_a_[index] = 0.0;
        } 

        //V_rho_a_rho_b
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t119802 = rho_a[index]+rho_b[index];
            double t119803 = 1.0/pow(t119802,1.0/3.0);
            double t119804 = c*t119803;
            double t119805 = sqrt(t119804);
            double t119806 = b1p*t119805;
            double t119807 = pow(t119804,3.0/2.0);
            double t119808 = b3p*t119807;
            double t119809 = c*c;
            double t119810 = 1.0/pow(t119802,2.0/3.0);
            double t119811 = b4p*t119810*t119809;
            double t119812 = b2p*c*t119803;
            double t119813 = t119811+t119812+t119806+t119808;
            double t119814 = 1.0/pow(t119802,4.0/3.0);
            double t119815 = 1.0/c0p;
            double t119816 = 1.0/t119813;
            double t119817 = t119815*t119816*(1.0/2.0);
            double t119818 = t119817+1.0;
            double t119819 = a1p*c*t119803;
            double t119820 = t119819+1.0;
            double t119821 = rho_a[index]-rho_b[index];
            double t119822 = t119821*t119821;
            double t119823 = 1.0/t119802;
            double t119824 = t119821*t119823;
            double t119825 = two_13*2.0;
            double t119826 = t119825-2.0;
            double t119827 = 1.0/t119826;
            double t119828 = 1.0/c0f;
            double t119829 = b1f*t119805;
            double t119830 = b3f*t119807;
            double t119831 = b4f*t119810*t119809;
            double t119832 = b2f*c*t119803;
            double t119833 = t119830+t119831+t119832+t119829;
            double t119834 = 1.0/t119833;
            double t119835 = t119834*t119828*(1.0/2.0);
            double t119836 = t119835+1.0;
            double t119837 = log(t119836);
            double t119838 = a1f*c*t119803;
            double t119839 = t119838+1.0;
            double t119840 = log(t119818);
            double t119850 = c0f*t119837*t119839*2.0;
            double t119851 = c0p*t119820*t119840*2.0;
            double t119841 = t119850-t119851;
            double t119842 = t119824+1.0;
            double t119843 = pow(t119842,4.0/3.0);
            double t119844 = -t119824+1.0;
            double t119845 = pow(t119844,4.0/3.0);
            double t119846 = t119843+t119845-2.0;
            double t119847 = 1.0/(t119802*t119802);
            double t119878 = t119821*t119847;
            double t119848 = t119823-t119878;
            double t119849 = 1.0/(t119802*t119802*t119802*t119802);
            double t119852 = t119822*t119822;
            double t119853 = 1.0/pow(t119802,5.0/3.0);
            double t119854 = 1.0/sqrt(t119804);
            double t119855 = 1.0/t119818;
            double t119856 = 1.0/(t119813*t119813);
            double t119857 = b4p*t119853*t119809*(2.0/3.0);
            double t119858 = b2p*c*t119814*(1.0/3.0);
            double t119859 = b1p*c*t119814*t119854*(1.0/6.0);
            double t119860 = b3p*c*t119805*t119814*(1.0/2.0);
            double t119861 = t119860+t119857+t119858+t119859;
            double t119862 = t119820*t119861*t119855*t119856;
            double t119863 = 1.0/(t119802*t119802*t119802*t119802*t119802);
            double t119864 = 1.0/d2fz0;
            double t119865 = 1.0/Aa;
            double t119866 = b1a*t119805;
            double t119867 = b3a*t119807;
            double t119868 = b4a*t119810*t119809;
            double t119869 = b2a*c*t119803;
            double t119870 = t119866+t119867+t119868+t119869;
            double t119871 = 1.0/t119870;
            double t119872 = t119871*t119865*(1.0/2.0);
            double t119873 = t119872+1.0;
            double t119874 = log(t119873);
            double t119875 = a1a*c*t119803;
            double t119876 = t119875+1.0;
            double t119877 = pow(t119842,1.0/3.0);
            double t119879 = t119848*t119877*(4.0/3.0);
            double t119880 = pow(t119844,1.0/3.0);
            double t120024 = t119880*t119848*(4.0/3.0);
            double t119881 = t119879-t120024;
            double t119882 = t119852*t119849;
            double t119883 = t119882-1.0;
            double t119884 = 1.0/pow(rho_a[index],1.0/3.0);
            double t119885 = c*t119884;
            double t119886 = sqrt(t119885);
            double t119887 = b1f*t119886;
            double t119888 = pow(t119885,3.0/2.0);
            double t119889 = b3f*t119888;
            double t119890 = 1.0/pow(rho_a[index],2.0/3.0);
            double t119891 = b4f*t119809*t119890;
            double t119892 = b2f*c*t119884;
            double t119893 = t119891+t119892+t119887+t119889;
            double t119894 = 1.0/pow(rho_a[index],4.0/3.0);
            double t119895 = b1p*t119886;
            double t119896 = b3p*t119888;
            double t119897 = b4p*t119809*t119890;
            double t119898 = b2p*c*t119884;
            double t119899 = t119895+t119896+t119897+t119898;
            double t119900 = 1.0/pow(rho_a[index],5.0/3.0);
            double t119901 = 1.0/sqrt(t119885);
            double t119902 = 1.0/t119893;
            double t119903 = t119902*t119828*(1.0/2.0);
            double t119904 = t119903+1.0;
            double t119905 = 1.0/t119899;
            double t119906 = t119815*t119905*(1.0/2.0);
            double t119907 = t119906+1.0;
            double t119908 = a1p*c*t119884;
            double t119909 = t119908+1.0;
            double t119910 = 1.0/t119907;
            double t119911 = 1.0/(t119899*t119899);
            double t119912 = b4p*t119900*t119809*(2.0/3.0);
            double t119913 = b2p*c*t119894*(1.0/3.0);
            double t119914 = b1p*c*t119901*t119894*(1.0/6.0);
            double t119915 = b3p*c*t119894*t119886*(1.0/2.0);
            double t119916 = t119912+t119913+t119914+t119915;
            double t119917 = t119910*t119911*t119916*t119909;
            double t119918 = log(t119907);
            double t119919 = pow(2.0,1.0/3.0);
            double t119920 = t119919*2.0;
            double t119921 = t119920-2.0;
            double t119922 = log(t119904);
            double t119923 = a1f*c*t119884;
            double t119924 = t119923+1.0;
            double t119925 = gcab*gcab;
            double t119929 = 1.0/pow(rho_a[index],8.0/3.0);
            double t119930 = gamma_aa[index]*t119929*(1.0/2.0);
            double t119931 = 1.0/pow(rho_b[index],8.0/3.0);
            double t119932 = gamma_bb[index]*t119931*(1.0/2.0);
            double t119926 = t119930+t119932;
            double t119927 = t119926*t119926;
            double t119928 = 1.0/pow(rho_b[index],1.1E1/3.0);
            double t119933 = t119925*t119925;
            double t119934 = t119927*t119927;
            double t119935 = t119925*t119927*6.0;
            double t119936 = gcab*t119925*t119926*t119927*4.0;
            double t119937 = t119933*t119934;
            double t119938 = gcab*t119926*4.0;
            double t119939 = t119935+t119936+t119937+t119938+1.0;
            double t119940 = gcab*t119926;
            double t119941 = t119940+1.0;
            double t119942 = t119925*t119927;
            double t119943 = gcab*t119926*2.0;
            double t119944 = t119942+t119943+1.0;
            double t119945 = t119925*t119927*3.0;
            double t119946 = gcab*t119925*t119926*t119927;
            double t119947 = gcab*t119926*3.0;
            double t119948 = t119945+t119946+t119947+1.0;
            double t119949 = t119821*t119822*t119841*t119827*t119846*t119849*4.0;
            double t119950 = t119823+t119878;
            double t119951 = 1.0/t119836;
            double t119952 = 1.0/(t119833*t119833);
            double t119953 = b4f*t119853*t119809*(2.0/3.0);
            double t119954 = b2f*c*t119814*(1.0/3.0);
            double t119955 = b1f*c*t119814*t119854*(1.0/6.0);
            double t119956 = b3f*c*t119805*t119814*(1.0/2.0);
            double t119957 = t119953+t119954+t119955+t119956;
            double t119958 = a1f*c*c0f*t119814*t119837*(2.0/3.0);
            double t119959 = t119852*t119863*4.0;
            double t119960 = t119950*t119880*(4.0/3.0);
            double t120023 = t119950*t119877*(4.0/3.0);
            double t119961 = t119960-t120023;
            double t119962 = 1.0/t119873;
            double t119963 = 1.0/(t119870*t119870);
            double t119964 = b4a*t119853*t119809*(2.0/3.0);
            double t119965 = b2a*c*t119814*(1.0/3.0);
            double t119966 = b1a*c*t119814*t119854*(1.0/6.0);
            double t119967 = b3a*c*t119805*t119814*(1.0/2.0);
            double t119968 = t119964+t119965+t119966+t119967;
            double t119969 = t119827*t119962*t119846*t119864*t119963*t119883*t119876*t119968;
            double t119970 = 1.0/pow(rho_b[index],1.0/3.0);
            double t119971 = c*t119970;
            double t119972 = sqrt(t119971);
            double t119973 = b1f*t119972;
            double t119974 = pow(t119971,3.0/2.0);
            double t119975 = b3f*t119974;
            double t119976 = 1.0/pow(rho_b[index],2.0/3.0);
            double t119977 = b4f*t119809*t119976;
            double t119978 = b2f*c*t119970;
            double t119979 = t119973+t119975+t119977+t119978;
            double t119980 = 1.0/pow(rho_b[index],4.0/3.0);
            double t119981 = b1p*t119972;
            double t119982 = b3p*t119974;
            double t119983 = b4p*t119809*t119976;
            double t119984 = b2p*c*t119970;
            double t119985 = t119981+t119982+t119983+t119984;
            double t119986 = 1.0/pow(rho_b[index],5.0/3.0);
            double t119987 = 1.0/sqrt(t119971);
            double t119988 = 1.0/t119979;
            double t119989 = t119828*t119988*(1.0/2.0);
            double t119990 = t119989+1.0;
            double t119991 = 1.0/t119985;
            double t119992 = t119815*t119991*(1.0/2.0);
            double t119993 = t119992+1.0;
            double t119994 = a1p*c*t119970;
            double t119995 = t119994+1.0;
            double t119996 = 1.0/t119993;
            double t119997 = 1.0/(t119985*t119985);
            double t119998 = b4p*t119809*t119986*(2.0/3.0);
            double t119999 = b2p*c*t119980*(1.0/3.0);
            double t120000 = b1p*c*t119980*t119987*(1.0/6.0);
            double t120001 = b3p*c*t119980*t119972*(1.0/2.0);
            double t120002 = t119998+t119999+t120000+t120001;
            double t120003 = t119995*t119996*t119997*t120002;
            double t120004 = log(t119993);
            double t120005 = log(t119990);
            double t120006 = a1f*c*t119970;
            double t120007 = t120006+1.0;
            double t120008 = t119841*t119852*t119827*t119846*t119849;
            double t120009 = Aa*t119827*t119846*t119864*t119874*t119883*t119876*2.0;
            double t120010 = 1.0/pow(rho_a[index],1.1E1/3.0);
            double t120011 = 1.0/(t119948*t119948);
            double t120012 = 1.0/t119941;
            double t120013 = 1.0/(t119939*t119939);
            double t120014 = 1.0/(t119944*t119944);
            double t120015 = 1.0/t119939;
            double t120016 = 1.0/(t119941*t119941);
            double t120017 = 1.0/t119944;
            double t120018 = 1.0/t119948;
            double t120020 = a1p*c*c0p*t119840*t119814*(2.0/3.0);
            double t120025 = t119951*t119952*t119839*t119957;
            double t120019 = t119862+t119958-t120020-t120025;
            double t120021 = 1.0/pow(t119802,7.0/3.0);
            double t120022 = 1.0/pow(t119802,8.0/3.0);
            double t120026 = t119861*t119861;
            double t120027 = 1.0/pow(t119804,3.0/2.0);
            double t120028 = b4p*t119809*t120022*(1.0E1/9.0);
            double t120029 = b2p*c*t120021*(4.0/9.0);
            double t120030 = b1p*c*t119854*t120021*(2.0/9.0);
            double t120031 = b3p*c*t119805*t120021*(2.0/3.0);
            double t120032 = b3p*t119809*t119854*t120022*(1.0/1.2E1);
            double t120033 = t120030+t120031+t120032+t120028+t120029-b1p*t119809*t120022*t120027*(1.0/3.6E1);
            double t120034 = t119820*t119855*t119856*t120033;
            double t120035 = 1.0/(t119813*t119813*t119813);
            double t120036 = t119957*t119957;
            double t120037 = 1.0/(t119818*t119818);
            double t120038 = 1.0/(t119813*t119813*t119813*t119813);
            double t120039 = t119820*t119815*t120026*t120037*t120038*(1.0/2.0);
            double t120040 = 1.0/(t119802*t119802*t119802);
            double t120041 = a1p*c*t119814*t119861*t119855*t119856*(2.0/3.0);
            double t120042 = 1.0/(t119802*t119802*t119802*t119802*t119802*t119802);
            double t120043 = t119821*t119822*t119849*4.0;
            double t120044 = t119959+t120043;
            double t120045 = t119821*t119880*t120040*(8.0/3.0);
            double t120046 = 1.0/pow(t119842,2.0/3.0);
            double t120047 = t119950*t119848*t120046*(4.0/9.0);
            double t120048 = 1.0/pow(t119844,2.0/3.0);
            double t120049 = t119950*t119848*t120048*(4.0/9.0);
            double t120050 = t120045+t120047+t120049-t119821*t119877*t120040*(8.0/3.0);
            double t120051 = t119968*t119968;
            double t120052 = t119959-t120043;
            double t120053 = t119841*t119852*t119827*t119881*t119849;
            double t120054 = Aa*t119827*t119846*t119864*t119874*t119876*t120044*2.0;
            double t120055 = Aa*t119827*t119881*t119864*t119874*t119883*t119876*2.0;
            double t120056 = c0f*t119922*t119924*2.0;
            double t120058 = c0p*t119909*t119918*2.0;
            double t120057 = t120056-t120058;
            double t120059 = c0f*t120005*t120007*2.0;
            double t120061 = c0p*t119995*t120004*2.0;
            double t120060 = -t120061+t120059;
            double t120062 = gamma_aa[index]*gcab*t120010*(8.0/3.0);
            double t120063 = gamma_aa[index]*t119925*t119926*t120010*(8.0/3.0);
            double t120064 = t120062+t120063;
            double t120065 = gamma_bb[index]*gcab*t119928*(8.0/3.0);
            double t120066 = gamma_bb[index]*t119925*t119926*t119928*(8.0/3.0);
            double t120067 = t120065+t120066;
            double t120068 = gamma_aa[index]*gcab*t120010*(1.6E1/3.0);
            double t120069 = gamma_aa[index]*gcab*t119925*t119927*t120010*1.6E1;
            double t120070 = gamma_aa[index]*t119933*t119926*t119927*t120010*(1.6E1/3.0);
            double t120071 = gamma_aa[index]*t119925*t119926*t120010*1.6E1;
            double t120072 = t120070+t120071+t120068+t120069;
            double t120073 = gamma_bb[index]*gcab*t119928*(1.6E1/3.0);
            double t120074 = gamma_bb[index]*gcab*t119925*t119927*t119928*1.6E1;
            double t120075 = gamma_bb[index]*t119933*t119926*t119927*t119928*(1.6E1/3.0);
            double t120076 = gamma_bb[index]*t119925*t119926*t119928*1.6E1;
            double t120077 = t120073+t120074+t120075+t120076;
            double t120078 = gamma_aa[index]*gcab*t120010*4.0;
            double t120079 = gamma_aa[index]*gcab*t119925*t119927*t120010*4.0;
            double t120080 = gamma_aa[index]*t119925*t119926*t120010*8.0;
            double t120081 = t120080+t120078+t120079;
            double t120082 = gamma_bb[index]*gcab*t119928*4.0;
            double t120083 = gamma_bb[index]*gcab*t119925*t119927*t119928*4.0;
            double t120084 = gamma_bb[index]*t119925*t119926*t119928*8.0;
            double t120085 = t120082+t120083+t120084;
            v_rho_a_rho_b_[index] = (t119851+t120008+t120009+rho_a[index]*(-t119917+t119921*t119827*(t119917- \
               (t119924*1.0/(t119893*t119893)*(b2f*c*t119894*(1.0/3.0)+b4f*t119900*t119809*(2.0/3.0)+b1f*c*t119901* \
               t119894*(1.0/6.0)+b3f*c*t119894*t119886*(1.0/2.0)))/t119904+a1f*c*c0f*t119922*t119894*(2.0/3.0)-a1p* \
               c*c0p*t119918*t119894*(2.0/3.0))+a1p*c*c0p*t119918*t119894*(2.0/3.0))+t119802*(t119862+t119949+t119969+ \
               t120053+t120055-a1p*c*c0p*t119840*t119814*(2.0/3.0)-t119841*t119852*t119827*t119863*t119846*4.0-t119852* \
               t119827*t119846*t119849*t120019-Aa*t119827*t119846*t119864*t119874*t119876*(t119959-t119821*t119822* \
               t119849*4.0)*2.0-Aa*a1a*c*t119814*t119827*t119846*t119864*t119874*t119883*(2.0/3.0))-c0p*t119909*t119918* \
               2.0-t119921*t119827*t120057)*(ccab1*gamma_bb[index]*gcab*t119928*t120012*(4.0/3.0)-ccab4*t119933*t119934* \
               t120013*t120077-ccab2*t119925*t119927*t120014*t120067-ccab1*gamma_bb[index]*t119925*t119926*t119928* \
               t120016*(4.0/3.0)+ccab2*gamma_bb[index]*t119925*t119926*t119928*t120017*(8.0/3.0)+ccab3*gamma_bb[index]* \
               gcab*t119925*t119927*t119928*t120018*4.0+ccab4*gamma_bb[index]*t119933*t119926*t119927*t119928*t120015* \
               (1.6E1/3.0)-ccab3*gcab*t119925*t119926*t119927*t120011*t120085)+(ccab0+ccab1*gcab*t119926*t120012+ \
               ccab4*t119933*t119934*t120015+ccab2*t119925*t119927*t120017+ccab3*gcab*t119925*t119926*t119927*t120018) \
               *(-t120053+t120054-t120055+t119802*(t120041+t120034+t120039-t119820*t119855*t120026*t120035*2.0+t119852* \
               t119827*t119881*t119849*(t119862+t119958-t120020-t120025)+t119852*t119827*t119849*(t119960-t120023) \
               *(t119862+t119958-t120020-t120025)-a1p*c*c0p*t119840*t120021*(8.0/9.0)-t119852*t119827*t119846*t119849* \
               (t120041+t120034+t120039-t119820*t119855*t120026*t120035*2.0+1.0/(t119833*t119833*t119833)*t119951* \
               t119839*t120036*2.0-t119951*t119952*t119839*(b2f*c*t120021*(4.0/9.0)+b4f*t119809*t120022*(1.0E1/9.0) \
               +b1f*c*t119854*t120021*(2.0/9.0)+b3f*c*t119805*t120021*(2.0/3.0)-b1f*t119809*t120022*t120027*(1.0/ \
               3.6E1)+b3f*t119809*t119854*t120022*(1.0/1.2E1))-1.0/(t119833*t119833*t119833*t119833)*1.0/(t119836* \
               t119836)*t119828*t119839*t120036*(1.0/2.0)+a1f*c*c0f*t119837*t120021*(8.0/9.0)-a1p*c*c0p*t119840*t120021* \
               (8.0/9.0)-a1f*c*t119814*t119951*t119952*t119957*(2.0/3.0))+t119841*t119852*t119827*t119863*t119881* \
               4.0+t119822*t119841*t119827*t119846*t119849*1.2E1-t119841*t119852*t119827*t119846*t120042*2.0E1+t119841* \
               t119852*t119827*t119849*t120050-t119852*t119827*t119863*t119846*t120019*8.0+t119841*t119852*t119827* \
               t119863*(t119960-t120023)*4.0-t119821*t119822*t119841*t119961*t119827*t119849*4.0+t119821*t119822* \
               t119841*t119827*t119881*t119849*4.0+Aa*t119827*t119864*t119874*t119883*t119876*t120050*2.0+Aa*t119827* \
               t119881*t119864*t119874*t119876*t120044*2.0+Aa*t119827*t119864*t119874*t119876*t120052*(t119960-t120023) \
               *2.0+Aa*t119827*t119846*t119864*t119874*t119876*(t119822*t119849*1.2E1-t119852*t120042*2.0E1)*2.0- \
               t119961*t119827*t119962*t119864*t119963*t119883*t119876*t119968-t119827*t119881*t119962*t119864*t119963* \
               t119883*t119876*t119968+t119827*t119962*t119846*t119864*t119963*t119876*t119968*t120052+t119827*t119962* \
               t119846*t119864*t119963*t119876*t119968*t120044-1.0/(t119870*t119870*t119870)*t119827*t119962*t119846* \
               t119864*t119883*t119876*t120051*2.0+t119827*t119962*t119846*t119864*t119963*t119883*t119876*(b2a*c* \
               t120021*(4.0/9.0)+b4a*t119809*t120022*(1.0E1/9.0)+b1a*c*t119854*t120021*(2.0/9.0)+b3a*c*t119805*t120021* \
               (2.0/3.0)-b1a*t119809*t120022*t120027*(1.0/3.6E1)+b3a*t119809*t119854*t120022*(1.0/1.2E1))+Aa*a1a* \
               c*t119814*t119827*t119881*t119864*t119874*t119883*(2.0/3.0)-Aa*a1a*c*t119814*t119827*t119846*t119864* \
               t119874*t120052*(2.0/3.0)-Aa*a1a*c*t119814*t119827*t119846*t119864*t119874*t120044*(2.0/3.0)-Aa*a1a* \
               c*t119827*t119846*t119864*t119874*t119883*t120021*(8.0/9.0)+1.0/(t119870*t119870*t119870*t119870)* \
               t119827*t119846*t119864*1.0/(t119873*t119873)*t119865*t119883*t119876*t120051*(1.0/2.0)+Aa*a1a*c*t119814* \
               t119827*t119864*t119874*t119883*(t119960-t120023)*(2.0/3.0)+a1a*c*t119814*t119827*t119962*t119846* \
               t119864*t119963*t119883*t119968*(2.0/3.0))-t119820*t119861*t119855*t119856*2.0+t119852*t119827*t119846* \
               t119849*(t119862+t119958-t120020-t120025)*2.0+a1p*c*c0p*t119840*t119814*(4.0/3.0)+t119841*t119852* \
               t119827*t119863*t119846*8.0-t119841*t119852*t119961*t119827*t119849-Aa*t119961*t119827*t119864*t119874* \
               t119883*t119876*2.0+Aa*t119827*t119846*t119864*t119874*t119876*(t119959-t120043)*2.0-t119827*t119962* \
               t119846*t119864*t119963*t119883*t119876*t119968*2.0+Aa*a1a*c*t119814*t119827*t119846*t119864*t119874* \
               t119883*(4.0/3.0))-(rho_b[index]*(t120061+t119921*t119827*t120060)+rho_a[index]*(t120058+t119921*t119827* \
               t120057)-t119802*(t119851+t120008+t120009))*(ccab4*t119933*t119934*t120013*(gamma_aa[index]*gamma_bb[index]* \
               t119925*t119928*t120010*(6.4E1/3.0)+gamma_aa[index]*gamma_bb[index]*t119933*t119927*t119928*t120010* \
               (6.4E1/3.0)+gamma_aa[index]*gamma_bb[index]*gcab*t119925*t119926*t119928*t120010*(1.28E2/3.0))-ccab2* \
               t119925*1.0/(t119944*t119944*t119944)*t119927*t120064*t120067*2.0-ccab4*t119933*t119934*1.0/(t119939* \
               t119939*t119939)*t120072*t120077*2.0+ccab3*gcab*t119925*t119926*t119927*t120011*(gamma_aa[index]*gamma_bb[index]* \
               t119925*t119928*t120010*(3.2E1/3.0)+gamma_aa[index]*gamma_bb[index]*gcab*t119925*t119926*t119928*t120010* \
               (3.2E1/3.0))+ccab1*gamma_aa[index]*gamma_bb[index]*t119925*t119928*t120010*t120016*(3.2E1/9.0)-ccab2* \
               gamma_aa[index]*gamma_bb[index]*t119925*t119928*t120010*t120017*(3.2E1/9.0)+ccab2*gamma_bb[index]* \
               t119925*t119926*t119928*t120014*t120064*(8.0/3.0)+ccab2*gamma_aa[index]*t119925*t119926*t120010*t120014* \
               t120067*(8.0/3.0)-ccab3*gcab*t119925*t119926*t119927*1.0/(t119948*t119948*t119948)*t120081*t120085* \
               2.0+ccab2*gamma_aa[index]*gamma_bb[index]*t119933*t119927*t119928*t120010*t120014*(3.2E1/9.0)-ccab4* \
               gamma_aa[index]*gamma_bb[index]*t119933*t119927*t119928*t120010*t120015*(6.4E1/3.0)+ccab3*gamma_bb[index]* \
               gcab*t119925*t119927*t119928*t120011*t120081*4.0+ccab3*gamma_aa[index]*gcab*t119925*t119927*t120010* \
               t120011*t120085*4.0+ccab4*gamma_bb[index]*t119933*t119926*t119927*t119928*t120013*t120072*(1.6E1/3.0) \
               +ccab4*gamma_aa[index]*t119933*t119926*t119927*t120010*t120013*t120077*(1.6E1/3.0)-ccab3*gamma_aa[index]* \
               gamma_bb[index]*gcab*t119925*t119926*t119928*t120010*t120018*(3.2E1/3.0)-ccab1*gamma_aa[index]*gamma_bb[index]* \
               gcab*1.0/(t119941*t119941*t119941)*t119925*t119926*t119928*t120010*(3.2E1/9.0))+(t119851+t120008+t120009- \
               t119802*(-t119862+t119949-t119969+t120020+t120054+t119841*t119852*t119827*t119863*t119846*4.0-t119841* \
               t119852*t119961*t119827*t119849+t119852*t119827*t119846*t119849*t120019-Aa*t119961*t119827*t119864* \
               t119874*t119883*t119876*2.0+Aa*a1a*c*t119814*t119827*t119846*t119864*t119874*t119883*(2.0/3.0))+rho_b[index]* \
               (-t120003+t119921*t119827*(t120003-(1.0/(t119979*t119979)*t120007*(b2f*c*t119980*(1.0/3.0)+b4f*t119809* \
               t119986*(2.0/3.0)+b1f*c*t119980*t119987*(1.0/6.0)+b3f*c*t119980*t119972*(1.0/2.0)))/t119990+a1f*c* \
               c0f*t119980*t120005*(2.0/3.0)-a1p*c*c0p*t119980*t120004*(2.0/3.0))+a1p*c*c0p*t119980*t120004*(2.0/ \
               3.0))-c0p*t119995*t120004*2.0-t119921*t119827*t120060)*(ccab1*gamma_aa[index]*gcab*t120010*t120012* \
               (4.0/3.0)-ccab4*t119933*t119934*t120013*t120072-ccab2*t119925*t119927*t120014*t120064-ccab1*gamma_aa[index]* \
               t119925*t119926*t120010*t120016*(4.0/3.0)+ccab2*gamma_aa[index]*t119925*t119926*t120010*t120017*(8.0/ \
               3.0)+ccab3*gamma_aa[index]*gcab*t119925*t119927*t120010*t120018*4.0+ccab4*gamma_aa[index]*t119933* \
               t119926*t119927*t120010*t120015*(1.6E1/3.0)-ccab3*gcab*t119925*t119926*t119927*t120011*t120081);
        } else if (rho_a[index] > cutoff_) {
            v_rho_a_rho_b_[index] = 0.0;
        } else if (rho_b[index] > cutoff_) {
            v_rho_a_rho_b_[index] = 0.0;
        } else {
            v_rho_a_rho_b_[index] = 0.0;
        } 

        //V_rho_b_rho_b
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t120087 = rho_a[index]+rho_b[index];
            double t120088 = 1.0/pow(t120087,1.0/3.0);
            double t120089 = c*t120088;
            double t120090 = sqrt(t120089);
            double t120091 = b1p*t120090;
            double t120092 = pow(t120089,3.0/2.0);
            double t120093 = b3p*t120092;
            double t120094 = c*c;
            double t120095 = 1.0/pow(t120087,2.0/3.0);
            double t120096 = b4p*t120094*t120095;
            double t120097 = b2p*c*t120088;
            double t120098 = t120091+t120093+t120096+t120097;
            double t120099 = 1.0/pow(t120087,4.0/3.0);
            double t120100 = 1.0/c0p;
            double t120101 = 1.0/t120098;
            double t120102 = t120100*t120101*(1.0/2.0);
            double t120103 = t120102+1.0;
            double t120104 = a1p*c*t120088;
            double t120105 = t120104+1.0;
            double t120106 = rho_a[index]-rho_b[index];
            double t120107 = t120106*t120106;
            double t120108 = 1.0/t120087;
            double t120109 = t120106*t120108;
            double t120110 = two_13*2.0;
            double t120111 = t120110-2.0;
            double t120112 = 1.0/t120111;
            double t120113 = 1.0/c0f;
            double t120114 = b1f*t120090;
            double t120115 = b3f*t120092;
            double t120116 = b4f*t120094*t120095;
            double t120117 = b2f*c*t120088;
            double t120118 = t120114+t120115+t120116+t120117;
            double t120119 = 1.0/t120118;
            double t120120 = t120113*t120119*(1.0/2.0);
            double t120121 = t120120+1.0;
            double t120122 = log(t120121);
            double t120123 = a1f*c*t120088;
            double t120124 = t120123+1.0;
            double t120125 = log(t120103);
            double t120136 = c0f*t120122*t120124*2.0;
            double t120137 = c0p*t120105*t120125*2.0;
            double t120126 = t120136-t120137;
            double t120127 = t120109+1.0;
            double t120128 = pow(t120127,4.0/3.0);
            double t120129 = -t120109+1.0;
            double t120130 = pow(t120129,4.0/3.0);
            double t120131 = t120130+t120128-2.0;
            double t120132 = 1.0/(t120087*t120087);
            double t120133 = t120132*t120106;
            double t120134 = t120133+t120108;
            double t120135 = 1.0/(t120087*t120087*t120087*t120087);
            double t120138 = t120107*t120107;
            double t120139 = 1.0/pow(t120087,5.0/3.0);
            double t120140 = 1.0/sqrt(t120089);
            double t120141 = 1.0/t120103;
            double t120142 = 1.0/(t120098*t120098);
            double t120143 = b4p*t120094*t120139*(2.0/3.0);
            double t120144 = b2p*c*t120099*(1.0/3.0);
            double t120145 = b1p*c*t120140*t120099*(1.0/6.0);
            double t120146 = b3p*c*t120090*t120099*(1.0/2.0);
            double t120147 = t120143+t120144+t120145+t120146;
            double t120148 = 1.0/(t120087*t120087*t120087*t120087*t120087);
            double t120149 = 1.0/d2fz0;
            double t120150 = 1.0/Aa;
            double t120151 = b1a*t120090;
            double t120152 = b3a*t120092;
            double t120153 = b4a*t120094*t120095;
            double t120154 = b2a*c*t120088;
            double t120155 = t120151+t120152+t120153+t120154;
            double t120156 = 1.0/t120155;
            double t120157 = t120150*t120156*(1.0/2.0);
            double t120158 = t120157+1.0;
            double t120159 = log(t120158);
            double t120160 = a1a*c*t120088;
            double t120161 = t120160+1.0;
            double t120162 = pow(t120127,1.0/3.0);
            double t120163 = t120134*t120162*(4.0/3.0);
            double t120164 = pow(t120129,1.0/3.0);
            double t120240 = t120134*t120164*(4.0/3.0);
            double t120165 = -t120240+t120163;
            double t120166 = t120135*t120138;
            double t120167 = t120166-1.0;
            double t120168 = 1.0/pow(rho_b[index],1.0/3.0);
            double t120169 = c*t120168;
            double t120170 = sqrt(t120169);
            double t120171 = b1f*t120170;
            double t120172 = pow(t120169,3.0/2.0);
            double t120173 = b3f*t120172;
            double t120174 = 1.0/pow(rho_b[index],2.0/3.0);
            double t120175 = b4f*t120174*t120094;
            double t120176 = b2f*c*t120168;
            double t120177 = t120171+t120173+t120175+t120176;
            double t120178 = 1.0/pow(rho_b[index],4.0/3.0);
            double t120179 = b1p*t120170;
            double t120180 = b3p*t120172;
            double t120181 = b4p*t120174*t120094;
            double t120182 = b2p*c*t120168;
            double t120183 = t120180+t120181+t120182+t120179;
            double t120184 = 1.0/pow(rho_b[index],5.0/3.0);
            double t120185 = 1.0/sqrt(t120169);
            double t120186 = 1.0/t120177;
            double t120187 = t120113*t120186*(1.0/2.0);
            double t120188 = t120187+1.0;
            double t120189 = 1.0/t120183;
            double t120190 = t120100*t120189*(1.0/2.0);
            double t120191 = t120190+1.0;
            double t120192 = a1p*c*t120168;
            double t120193 = t120192+1.0;
            double t120194 = 1.0/t120191;
            double t120195 = 1.0/(t120183*t120183);
            double t120196 = b4p*t120094*t120184*(2.0/3.0);
            double t120197 = b2p*c*t120178*(1.0/3.0);
            double t120198 = b1p*c*t120185*t120178*(1.0/6.0);
            double t120199 = b3p*c*t120170*t120178*(1.0/2.0);
            double t120200 = t120196+t120197+t120198+t120199;
            double t120201 = t120200*t120193*t120194*t120195;
            double t120202 = log(t120191);
            double t120203 = pow(2.0,1.0/3.0);
            double t120204 = t120203*2.0;
            double t120205 = t120204-2.0;
            double t120206 = log(t120188);
            double t120207 = a1f*c*t120168;
            double t120208 = t120207+1.0;
            double t120209 = gcab*gcab;
            double t120213 = 1.0/pow(rho_a[index],8.0/3.0);
            double t120214 = gamma_aa[index]*t120213*(1.0/2.0);
            double t120215 = 1.0/pow(rho_b[index],8.0/3.0);
            double t120216 = gamma_bb[index]*t120215*(1.0/2.0);
            double t120210 = t120214+t120216;
            double t120211 = t120210*t120210;
            double t120212 = 1.0/pow(rho_b[index],1.1E1/3.0);
            double t120217 = t120209*t120209;
            double t120218 = t120211*t120211;
            double t120219 = t120211*t120209*6.0;
            double t120220 = gcab*t120210*t120211*t120209*4.0;
            double t120221 = t120217*t120218;
            double t120222 = gcab*t120210*4.0;
            double t120223 = t120220+t120221+t120222+t120219+1.0;
            double t120224 = gcab*t120210;
            double t120225 = t120224+1.0;
            double t120226 = t120211*t120209;
            double t120227 = gcab*t120210*2.0;
            double t120228 = t120226+t120227+1.0;
            double t120229 = t120211*t120209*3.0;
            double t120230 = gcab*t120210*t120211*t120209;
            double t120231 = gcab*t120210*3.0;
            double t120232 = t120230+t120231+t120229+1.0;
            double t120233 = a1p*c*c0p*t120125*t120099*(2.0/3.0);
            double t120234 = 1.0/t120228;
            double t120235 = 1.0/t120232;
            double t120236 = 1.0/t120225;
            double t120237 = 1.0/t120223;
            double t120238 = 1.0/pow(t120087,7.0/3.0);
            double t120239 = 1.0/pow(t120087,8.0/3.0);
            double t120241 = 1.0/t120121;
            double t120242 = 1.0/(t120118*t120118);
            double t120243 = b4f*t120094*t120139*(2.0/3.0);
            double t120244 = b2f*c*t120099*(1.0/3.0);
            double t120245 = b1f*c*t120140*t120099*(1.0/6.0);
            double t120246 = b3f*c*t120090*t120099*(1.0/2.0);
            double t120247 = t120243+t120244+t120245+t120246;
            double t120248 = t120124*t120241*t120242*t120247;
            double t120250 = t120105*t120141*t120142*t120147;
            double t120251 = a1f*c*c0f*t120122*t120099*(2.0/3.0);
            double t120249 = -t120250+t120233-t120251+t120248;
            double t120252 = t120147*t120147;
            double t120253 = 1.0/pow(t120089,3.0/2.0);
            double t120254 = b4p*t120094*t120239*(1.0E1/9.0);
            double t120255 = b2p*c*t120238*(4.0/9.0);
            double t120256 = b1p*c*t120140*t120238*(2.0/9.0);
            double t120257 = b3p*c*t120090*t120238*(2.0/3.0);
            double t120258 = b3p*t120140*t120094*t120239*(1.0/1.2E1);
            double t120259 = t120254+t120255+t120256+t120257+t120258-b1p*t120253*t120094*t120239*(1.0/3.6E1);
            double t120260 = 1.0/(t120098*t120098*t120098);
            double t120261 = t120105*t120141*t120260*t120252*2.0;
            double t120262 = t120247*t120247;
            double t120263 = 1.0/(t120103*t120103);
            double t120264 = 1.0/(t120098*t120098*t120098*t120098);
            double t120265 = t120132*2.0;
            double t120266 = 1.0/(t120087*t120087*t120087);
            double t120267 = t120106*t120266*2.0;
            double t120268 = t120265+t120267;
            double t120269 = t120134*t120134;
            double t120270 = a1p*c*c0p*t120125*t120238*(8.0/9.0);
            double t120271 = 1.0/(t120087*t120087*t120087*t120087*t120087*t120087);
            double t120272 = t120106*t120107*t120135*4.0;
            double t120273 = t120138*t120148*4.0;
            double t120274 = t120272+t120273;
            double t120275 = t120162*t120268*(4.0/3.0);
            double t120276 = 1.0/pow(t120127,2.0/3.0);
            double t120277 = t120276*t120269*(4.0/9.0);
            double t120278 = 1.0/pow(t120129,2.0/3.0);
            double t120279 = t120269*t120278*(4.0/9.0);
            double t120280 = t120275+t120277+t120279-t120164*t120268*(4.0/3.0);
            double t120281 = 1.0/t120158;
            double t120282 = 1.0/(t120155*t120155);
            double t120283 = b4a*t120094*t120139*(2.0/3.0);
            double t120284 = b2a*c*t120099*(1.0/3.0);
            double t120285 = b1a*c*t120140*t120099*(1.0/6.0);
            double t120286 = b3a*c*t120090*t120099*(1.0/2.0);
            double t120287 = t120283+t120284+t120285+t120286;
            double t120288 = t120287*t120287;
            double t120289 = 1.0/t120188;
            double t120290 = b4f*t120094*t120184*(2.0/3.0);
            double t120291 = b2f*c*t120178*(1.0/3.0);
            double t120292 = b1f*c*t120185*t120178*(1.0/6.0);
            double t120293 = b3f*c*t120170*t120178*(1.0/2.0);
            double t120294 = t120290+t120291+t120292+t120293;
            double t120295 = 1.0/(t120177*t120177);
            double t120296 = 1.0/pow(rho_b[index],7.0/3.0);
            double t120297 = 1.0/pow(t120169,3.0/2.0);
            double t120298 = t120294*t120294;
            double t120299 = t120200*t120200;
            double t120300 = 1.0/(t120183*t120183*t120183);
            double t120301 = t120300*t120193*t120194*t120299*2.0;
            double t120302 = b4p*t120215*t120094*(1.0E1/9.0);
            double t120303 = b2p*c*t120296*(4.0/9.0);
            double t120304 = b3p*t120215*t120094*t120185*(1.0/1.2E1);
            double t120305 = b1p*c*t120185*t120296*(2.0/9.0);
            double t120306 = b3p*c*t120170*t120296*(2.0/3.0);
            double t120423 = b1p*t120215*t120094*t120297*(1.0/3.6E1);
            double t120307 = t120302+t120303+t120304+t120305+t120306-t120423;
            double t120308 = 1.0/(t120191*t120191);
            double t120309 = 1.0/(t120183*t120183*t120183*t120183);
            double t120310 = a1p*c*c0p*t120202*t120296*(8.0/9.0);
            double t120311 = a1f*c*c0f*t120206*t120178*(2.0/3.0);
            double t120312 = a1p*c*c0p*t120202*t120178*(2.0/3.0);
            double t120384 = t120208*t120294*t120295*t120289;
            double t120313 = t120201+t120311-t120312-t120384;
            double t120314 = gamma_bb[index]*gamma_bb[index];
            double t120315 = gcaa*gcaa;
            double t120316 = t120314*t120314;
            double t120317 = t120315*t120315;
            double t120318 = 1.0/pow(rho_b[index],3.2E1/3.0);
            double t120319 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
               rho_b[index]*rho_b[index]);
            double t120320 = 1.0/pow(rho_b[index],1.6E1/3.0);
            double t120321 = 1.0/pow(rho_a[index],1.0/3.0);
            double t120322 = c*t120321;
            double t120323 = sqrt(t120322);
            double t120324 = pow(t120322,3.0/2.0);
            double t120325 = 1.0/pow(rho_a[index],2.0/3.0);
            double t120326 = b1p*t120323;
            double t120327 = b3p*t120324;
            double t120328 = b4p*t120325*t120094;
            double t120329 = b2p*c*t120321;
            double t120330 = t120326+t120327+t120328+t120329;
            double t120331 = 1.0/t120330;
            double t120332 = t120100*t120331*(1.0/2.0);
            double t120333 = t120332+1.0;
            double t120334 = log(t120333);
            double t120335 = a1p*c*t120321;
            double t120336 = t120335+1.0;
            double t120337 = c0p*t120334*t120336*2.0;
            double t120338 = c0f*t120206*t120208*2.0;
            double t120340 = c0p*t120202*t120193*2.0;
            double t120339 = -t120340+t120338;
            double t120341 = t120112*t120131*t120126*t120135*t120138;
            double t120342 = Aa*t120112*t120131*t120161*t120149*t120167*t120159*2.0;
            double t120343 = gamma_bb[index]*gcab*t120212*(1.6E1/3.0);
            double t120344 = gamma_bb[index]*gcab*t120211*t120212*t120209*1.6E1;
            double t120345 = gamma_bb[index]*t120210*t120211*t120212*t120217*(1.6E1/3.0);
            double t120346 = gamma_bb[index]*t120210*t120212*t120209*1.6E1;
            double t120347 = t120343+t120344+t120345+t120346;
            double t120348 = 1.0/(t120225*t120225);
            double t120349 = 1.0/pow(rho_b[index],2.2E1/3.0);
            double t120350 = gamma_bb[index]*gcab*t120212*(8.0/3.0);
            double t120351 = gamma_bb[index]*t120210*t120212*t120209*(8.0/3.0);
            double t120352 = t120350+t120351;
            double t120353 = 1.0/(t120232*t120232);
            double t120354 = 1.0/pow(rho_b[index],1.4E1/3.0);
            double t120355 = 1.0/(t120223*t120223);
            double t120356 = 1.0/(t120228*t120228);
            double t120357 = gamma_bb[index]*gcab*t120212*4.0;
            double t120358 = gamma_bb[index]*gcab*t120211*t120212*t120209*4.0;
            double t120359 = gamma_bb[index]*t120210*t120212*t120209*8.0;
            double t120360 = t120357+t120358+t120359;
            double t120361 = t120112*t120205*t120339;
            double t120362 = t120340+t120361;
            double t120363 = gamma_bb[index]*gcaa*t120215*4.0;
            double t120364 = gamma_bb[index]*gcaa*t120314*t120315*t120319*4.0;
            double t120365 = t120320*t120314*t120315*6.0;
            double t120366 = t120316*t120317*t120318;
            double t120367 = t120363+t120364+t120365+t120366+1.0;
            double t120368 = 1.0/t120367;
            double t120369 = gamma_bb[index]*gcaa*t120215;
            double t120370 = t120369+1.0;
            double t120371 = 1.0/t120370;
            double t120372 = gamma_bb[index]*gcaa*t120215*3.0;
            double t120373 = gamma_bb[index]*gcaa*t120314*t120315*t120319;
            double t120374 = t120320*t120314*t120315*3.0;
            double t120375 = t120372+t120373+t120374+1.0;
            double t120376 = 1.0/t120375;
            double t120377 = gamma_bb[index]*gcaa*t120215*2.0;
            double t120378 = t120320*t120314*t120315;
            double t120379 = t120377+t120378+1.0;
            double t120380 = 1.0/t120379;
            double t120381 = 1.0/pow(rho_b[index],1.9E1/3.0);
            double t120382 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
               rho_b[index]*rho_b[index]*rho_b[index]);
            double t120383 = 1.0/pow(rho_b[index],3.5E1/3.0);
            double t120385 = t120112*t120205*t120313;
            double t120386 = ccaa4*t120316*t120317*t120383*t120368*(3.2E1/3.0);
            double t120387 = ccaa1*gamma_bb[index]*gcaa*t120212*t120371*(8.0/3.0);
            double t120388 = ccaa3*gamma_bb[index]*gcaa*t120314*t120315*t120382*t120376*8.0;
            double t120389 = ccaa2*t120314*t120315*t120380*t120381*(1.6E1/3.0);
            double t120390 = 1.0/(t120370*t120370);
            double t120391 = gamma_bb[index]*gcaa*t120212*8.0;
            double t120392 = gamma_bb[index]*gcaa*t120314*t120315*t120382*8.0;
            double t120393 = t120314*t120315*t120381*1.6E1;
            double t120394 = t120391+t120392+t120393;
            double t120395 = 1.0/(t120375*t120375);
            double t120396 = gamma_bb[index]*gcaa*t120212*(3.2E1/3.0);
            double t120397 = gamma_bb[index]*gcaa*t120314*t120315*t120382*3.2E1;
            double t120398 = t120314*t120315*t120381*3.2E1;
            double t120399 = t120316*t120317*t120383*(3.2E1/3.0);
            double t120400 = t120396+t120397+t120398+t120399;
            double t120401 = 1.0/(t120367*t120367);
            double t120402 = gamma_bb[index]*gcaa*t120212*(1.6E1/3.0);
            double t120403 = t120314*t120315*t120381*(1.6E1/3.0);
            double t120404 = t120402+t120403;
            double t120405 = 1.0/(t120379*t120379);
            double t120406 = t120386+t120387+t120388+t120389-ccaa1*t120314*t120315*t120381*t120390*(8.0/3.0)- \
               ccaa2*t120320*t120314*t120404*t120315*t120405-ccaa4*t120400*t120401*t120316*t120317*t120318-ccaa3* \
               gamma_bb[index]*gcaa*t120314*t120315*t120319*t120394*t120395;
            double t120407 = -t120201+t120312+t120385;
            double t120408 = 1.0/pow(rho_b[index],1.0E1);
            double t120409 = 1.0/pow(rho_b[index],3.8E1/3.0);
            double t120410 = ccaa4*t120316*t120317*t120318*t120368;
            double t120411 = ccaa1*gamma_bb[index]*gcaa*t120215*t120371;
            double t120412 = ccaa3*gamma_bb[index]*gcaa*t120314*t120315*t120319*t120376;
            double t120413 = ccaa2*t120320*t120314*t120315*t120380;
            double t120414 = ccaa0+t120410+t120411+t120412+t120413;
            double t120415 = 1.0/(t120177*t120177*t120177);
            double t120416 = b4f*t120215*t120094*(1.0E1/9.0);
            double t120417 = b2f*c*t120296*(4.0/9.0);
            double t120418 = b3f*t120215*t120094*t120185*(1.0/1.2E1);
            double t120419 = b1f*c*t120185*t120296*(2.0/9.0);
            double t120420 = b3f*c*t120170*t120296*(2.0/3.0);
            double t120421 = t120420+t120416+t120417+t120418+t120419-b1f*t120215*t120094*t120297*(1.0/3.6E1);
            double t120422 = t120421*t120208*t120295*t120289;
            double t120424 = t120307*t120193*t120194*t120195;
            double t120425 = 1.0/(t120188*t120188);
            double t120426 = 1.0/(t120177*t120177*t120177*t120177);
            double t120427 = t120113*t120208*t120425*t120426*t120298*(1.0/2.0);
            double t120428 = t120100*t120308*t120309*t120193*t120299*(1.0/2.0);
            double t120429 = a1f*c*t120294*t120178*t120295*t120289*(2.0/3.0);
            double t120430 = a1p*c*t120200*t120194*t120195*t120178*(2.0/3.0);
            double t120431 = rho_b[index]*(8.334140006820045E15/1.40737488355328E14);
            double t120432 = 1.0/(omega*omega);
            double t120433 = pow(t120431,2.0/3.0);
            double t120436 = t120432*t120433;
            double t120434 = exp(-t120436);
            double t120435 = 1.0/pow(t120431,1.0/3.0);
            double t120437 = 1.0/pow(t120431,2.0/3.0);
            double t120438 = omega*omega;
            double t120439 = t120434-1.0;
            double t120440 = 1.0/pow(t120431,4.0/3.0);
            double t120441 = 1.0/rho_b[index];
            double t120442 = 1.0/pow(t120431,5.0/3.0);
            double t120443 = 1.0/sqrt(3.141592653589793);
            double t120450 = t120437*t120438*t120439*(1.0/2.0);
            double t120444 = -t120450+t120434;
            double t120445 = t120441*t120434*(1.0/3.0);
            double t120446 = t120442*t120438*t120439*(2.778046668940015E15/1.40737488355328E14);
            double t120493 = t120432*t120434*t120435*(2.778046668940015E15/7.0368744177664E13);
            double t120447 = t120445+t120446-t120493;
            double t120448 = 1.0/omega;
            double t120449 = 1.0/pow(t120431,7.0/3.0);
            double t120451 = gx*gx;
            double t120452 = t120451*t120451;
            double t120453 = pow(rho_b[index],4.0/3.0);
            double t120454 = pow(t120431,1.0/3.0);
            double t120455 = t120454*t120448;
            double t120456 = erf(t120455);
            double t120457 = t120456*(3.991211251234741E15/2.251799813685248E15);
            double t120458 = omega*t120435*t120444;
            double t120459 = t120457+t120458;
            double t120460 = gamma_bb[index]*gx*t120215*4.0;
            double t120461 = gamma_bb[index]*gx*t120314*t120451*t120319*4.0;
            double t120462 = t120320*t120314*t120451*6.0;
            double t120463 = t120316*t120452*t120318;
            double t120464 = t120460+t120461+t120462+t120463+1.0;
            double t120465 = 1.0/t120464;
            double t120466 = gamma_bb[index]*gx*t120215;
            double t120467 = t120466+1.0;
            double t120468 = 1.0/t120467;
            double t120469 = gamma_bb[index]*gx*t120215*3.0;
            double t120470 = gamma_bb[index]*gx*t120314*t120451*t120319;
            double t120471 = t120320*t120314*t120451*3.0;
            double t120472 = t120470+t120471+t120469+1.0;
            double t120473 = 1.0/t120472;
            double t120474 = gamma_bb[index]*gx*t120215*2.0;
            double t120475 = t120320*t120314*t120451;
            double t120476 = t120474+t120475+1.0;
            double t120477 = 1.0/t120476;
            double t120485 = gamma_bb[index]*gx*t120212*(3.2E1/3.0);
            double t120486 = gamma_bb[index]*gx*t120314*t120451*t120382*3.2E1;
            double t120487 = t120314*t120451*t120381*3.2E1;
            double t120488 = t120316*t120452*t120383*(3.2E1/3.0);
            double t120478 = t120485+t120486+t120487+t120488;
            double t120490 = gamma_bb[index]*gx*t120212*(1.6E1/3.0);
            double t120491 = t120314*t120451*t120381*(1.6E1/3.0);
            double t120479 = t120490+t120491;
            double t120480 = 1.0/(t120472*t120472);
            double t120481 = gamma_bb[index]*gx*t120212*8.0;
            double t120482 = gamma_bb[index]*gx*t120314*t120451*t120382*8.0;
            double t120483 = t120314*t120451*t120381*1.6E1;
            double t120484 = t120481+t120482+t120483;
            double t120489 = 1.0/(t120464*t120464);
            double t120492 = 1.0/(t120476*t120476);
            double t120494 = omega*t120435*t120447;
            double t120495 = t120434*t120443*t120437*t120448*(1.108777112152858E31/1.584563250285287E29);
            double t120504 = omega*t120440*t120444*(2.778046668940015E15/1.40737488355328E14);
            double t120496 = -t120504+t120494+t120495;
            double t120497 = cx4*t120316*t120452*t120318*t120465;
            double t120498 = cx1*gamma_bb[index]*gx*t120215*t120468;
            double t120499 = cx3*gamma_bb[index]*gx*t120314*t120451*t120319*t120473;
            double t120500 = cx2*t120320*t120314*t120451*t120477;
            double t120501 = cx0+t120500+t120497+t120498+t120499;
            double t120502 = omega*t120435*t120459*(4.0/3.0);
            double t120503 = t120502-1.0;
            double t120505 = omega*t120440*t120459*(2.778046668940015E15/1.05553116266496E14);
            double t120506 = 1.0/(t120467*t120467);
            double t120507 = t120505-omega*t120435*t120496*(4.0/3.0);
            double t120508 = pow(rho_b[index],1.0/3.0);
            double t120509 = cx4*t120316*t120452*t120383*t120465*(3.2E1/3.0);
            double t120510 = cx1*gamma_bb[index]*gx*t120212*t120468*(8.0/3.0);
            double t120511 = cx3*gamma_bb[index]*gx*t120314*t120451*t120382*t120473*8.0;
            double t120512 = cx2*t120314*t120451*t120381*t120477*(1.6E1/3.0);
            double t120513 = t120510+t120511+t120512+t120509-cx1*t120314*t120451*t120506*t120381*(8.0/3.0)-cx2* \
               t120320*t120314*t120451*t120492*t120479-cx4*t120316*t120452*t120318*t120478*t120489-cx3*gamma_bb[index]* \
               gx*t120314*t120451*t120480*t120319*t120484;
            v_rho_b_rho_b_[index] = (ccab0+ccab1*gcab*t120210*t120236+ccab2*t120211*t120234*t120209+ccab4*t120217* \
               t120218*t120237+ccab3*gcab*t120210*t120211*t120235*t120209)*(-rho_b[index]*(-t120301-t120310+t120430+ \
               t120424+t120428+t120112*t120205*(t120301+t120310+t120422+t120427+t120429-t120307*t120193*t120194*t120195- \
               t120208*t120415*t120289*t120298*2.0-a1f*c*c0f*t120206*t120296*(8.0/9.0)-t120100*t120308*t120309*t120193* \
               t120299*(1.0/2.0)-a1p*c*t120200*t120194*t120195*t120178*(2.0/3.0)))-t120087*(t120261+t120270-t120105* \
               t120141*t120142*t120259-t120112*t120131*t120135*t120138*(t120261+t120270-t120105*t120141*t120142*t120259- \
               t120124*t120241*1.0/(t120118*t120118*t120118)*t120262*2.0+t120124*t120241*t120242*(b2f*c*t120238*(4.0/ \
               9.0)+b4f*t120094*t120239*(1.0E1/9.0)+b1f*c*t120140*t120238*(2.0/9.0)+b3f*c*t120090*t120238*(2.0/3.0) \
               -b1f*t120253*t120094*t120239*(1.0/3.6E1)+b3f*t120140*t120094*t120239*(1.0/1.2E1))+1.0/(t120121*t120121) \
               *t120113*t120124*1.0/(t120118*t120118*t120118*t120118)*t120262*(1.0/2.0)-a1f*c*c0f*t120122*t120238* \
               (8.0/9.0)-t120100*t120105*t120252*t120263*t120264*(1.0/2.0)+a1f*c*t120241*t120242*t120247*t120099* \
               (2.0/3.0)-a1p*c*t120141*t120142*t120147*t120099*(2.0/3.0))+t120112*t120131*t120107*t120126*t120135* \
               1.2E1-t120100*t120105*t120252*t120263*t120264*(1.0/2.0)+t120112*t120131*t120126*t120271*t120138*2.0E1+ \
               t120112*t120126*t120135*t120280*t120138-t120112*t120131*t120138*t120148*t120249*8.0+t120112*t120126* \
               t120138*t120165*t120148*8.0-t120112*t120135*t120138*t120165*t120249*2.0+t120112*t120131*t120106*t120107* \
               t120126*t120148*3.2E1-t120112*t120131*t120106*t120107*t120135*t120249*8.0+t120112*t120106*t120107* \
               t120126*t120135*t120165*8.0-a1p*c*t120141*t120142*t120147*t120099*(2.0/3.0)+Aa*t120112*t120161*t120280* \
               t120149*t120167*t120159*2.0+Aa*t120112*t120161*t120165*t120274*t120149*t120159*4.0+Aa*t120112*t120131* \
               t120161*t120149*t120159*(t120107*t120135*1.2E1+t120271*t120138*2.0E1+t120106*t120107*t120148*3.2E1) \
               *2.0-t120112*t120131*t120161*t120281*t120282*t120274*t120149*t120287*2.0-t120112*t120161*t120281*t120165* \
               t120282*t120149*t120167*t120287*2.0+t120112*t120131*t120161*1.0/(t120155*t120155*t120155)*t120281* \
               t120149*t120167*t120288*2.0-t120112*t120131*t120161*t120281*t120282*t120149*t120167*(b2a*c*t120238* \
               (4.0/9.0)+b4a*t120094*t120239*(1.0E1/9.0)+b1a*c*t120140*t120238*(2.0/9.0)+b3a*c*t120090*t120238*(2.0/ \
               3.0)-b1a*t120253*t120094*t120239*(1.0/3.6E1)+b3a*t120140*t120094*t120239*(1.0/1.2E1))+Aa*a1a*c*t120112* \
               t120131*t120238*t120149*t120167*t120159*(8.0/9.0)+Aa*a1a*c*t120112*t120131*t120274*t120149*t120159* \
               t120099*(4.0/3.0)+Aa*a1a*c*t120112*t120165*t120149*t120167*t120159*t120099*(4.0/3.0)-t120112*t120131* \
               t120150*t120161*1.0/(t120155*t120155*t120155*t120155)*t120149*1.0/(t120158*t120158)*t120167*t120288* \
               (1.0/2.0)-a1a*c*t120112*t120131*t120281*t120282*t120149*t120167*t120287*t120099*(2.0/3.0))-t120112* \
               t120205*t120313*2.0-t120105*t120141*t120142*t120147*2.0+t120200*t120193*t120194*t120195*2.0-a1p*c* \
               c0p*t120202*t120178*(4.0/3.0)+a1p*c*c0p*t120125*t120099*(4.0/3.0)+t120112*t120131*t120126*t120138* \
               t120148*8.0-t120112*t120131*t120135*t120138*t120249*2.0+t120112*t120126*t120135*t120138*t120165*2.0+ \
               t120112*t120131*t120106*t120107*t120126*t120135*8.0+Aa*t120112*t120131*t120161*t120274*t120149*t120159* \
               4.0+Aa*t120112*t120161*t120165*t120149*t120167*t120159*4.0-t120112*t120131*t120161*t120281*t120282* \
               t120149*t120167*t120287*2.0+Aa*a1a*c*t120112*t120131*t120149*t120167*t120159*t120099*(4.0/3.0))+(rho_b[index]* \
               t120362+rho_a[index]*(t120337-t120112*t120205*(t120337-c0f*log((t120113*(1.0/2.0))/(b1f*t120323+b3f* \
               t120324+b2f*c*t120321+b4f*t120325*t120094)+1.0)*(a1f*c*t120321+1.0)*2.0))-t120087*(t120341+t120342+ \
               t120137))*(-ccab2*t120211*t120209*t120356*(gamma_bb[index]*gcab*t120354*(8.8E1/9.0)+t120314*t120209* \
               t120349*(3.2E1/9.0)+gamma_bb[index]*t120210*t120209*t120354*(8.8E1/9.0))+ccab2*t120211*(t120352*t120352) \
               *t120209*1.0/(t120228*t120228*t120228)*2.0+ccab4*1.0/(t120223*t120223*t120223)*t120217*t120218*(t120347* \
               t120347)*2.0+ccab1*gamma_bb[index]*gcab*t120236*t120354*(4.4E1/9.0)+ccab2*t120314*t120234*t120209* \
               t120349*(3.2E1/9.0)-ccab1*t120314*t120209*t120348*t120349*(3.2E1/9.0)-ccab4*t120217*t120218*t120355* \
               (gamma_bb[index]*gcab*t120354*(1.76E2/9.0)+t120314*t120209*t120349*(6.4E1/3.0)+gamma_bb[index]*t120210* \
               t120209*t120354*(1.76E2/3.0)+t120211*t120314*t120217*t120349*(6.4E1/3.0)+gamma_bb[index]*gcab*t120211* \
               t120209*t120354*(1.76E2/3.0)+gamma_bb[index]*t120210*t120211*t120217*t120354*(1.76E2/9.0)+gcab*t120210* \
               t120314*t120209*t120349*(1.28E2/3.0))+ccab4*t120211*t120314*t120217*t120237*t120349*(6.4E1/3.0)+ccab2* \
               gamma_bb[index]*t120210*t120234*t120209*t120354*(8.8E1/9.0)-ccab1*gamma_bb[index]*t120210*t120209* \
               t120354*t120348*(4.4E1/9.0)+ccab3*gcab*t120210*t120211*1.0/(t120232*t120232*t120232)*(t120360*t120360) \
               *t120209*2.0+ccab3*gamma_bb[index]*gcab*t120211*t120235*t120209*t120354*(4.4E1/3.0)-ccab2*gamma_bb[index]* \
               t120210*t120212*t120352*t120209*t120356*(1.6E1/3.0)+ccab4*gamma_bb[index]*t120210*t120211*t120217* \
               t120237*t120354*(1.76E2/9.0)+ccab3*gcab*t120210*t120314*t120235*t120209*t120349*(3.2E1/3.0)+ccab1* \
               gcab*t120210*t120314*1.0/(t120225*t120225*t120225)*t120209*t120349*(3.2E1/9.0)-ccab3*gcab*t120210* \
               t120211*t120209*t120353*(gamma_bb[index]*gcab*t120354*(4.4E1/3.0)+t120314*t120209*t120349*(3.2E1/3.0) \
               +gamma_bb[index]*t120210*t120209*t120354*(8.8E1/3.0)+gamma_bb[index]*gcab*t120211*t120209*t120354* \
               (4.4E1/3.0)+gcab*t120210*t120314*t120209*t120349*(3.2E1/3.0))-ccab3*gamma_bb[index]*gcab*t120211*t120212* \
               t120360*t120209*t120353*8.0-ccab4*gamma_bb[index]*t120210*t120211*t120212*t120217*t120355*t120347* \
               (3.2E1/3.0))+(t120341+t120342+t120137+rho_b[index]*(-t120201+t120312+t120112*t120205*(t120201+t120311- \
               t120208*t120294*t120295*t120289-a1p*c*c0p*t120202*t120178*(2.0/3.0)))-t120087*(t120233-t120105*t120141* \
               t120142*t120147+t120112*t120131*t120126*t120138*t120148*4.0-t120112*t120131*t120135*t120138*t120249+ \
               t120112*t120126*t120135*t120138*t120165+t120112*t120131*t120106*t120107*t120126*t120135*4.0+Aa*t120112* \
               t120131*t120161*t120274*t120149*t120159*2.0+Aa*t120112*t120161*t120165*t120149*t120167*t120159*2.0- \
               t120112*t120131*t120161*t120281*t120282*t120149*t120167*t120287+Aa*a1a*c*t120112*t120131*t120149*t120167* \
               t120159*t120099*(2.0/3.0))-c0p*t120202*t120193*2.0-t120112*t120205*t120339)*(ccab1*gamma_bb[index]* \
               gcab*t120212*t120236*(4.0/3.0)-ccab2*t120211*t120352*t120209*t120356-ccab4*t120217*t120218*t120355* \
               t120347+ccab2*gamma_bb[index]*t120210*t120212*t120234*t120209*(8.0/3.0)-ccab1*gamma_bb[index]*t120210* \
               t120212*t120209*t120348*(4.0/3.0)+ccab3*gamma_bb[index]*gcab*t120211*t120212*t120235*t120209*4.0+ccab4* \
               gamma_bb[index]*t120210*t120211*t120212*t120217*t120237*(1.6E1/3.0)-ccab3*gcab*t120210*t120211*t120360* \
               t120209*t120353)*2.0+t120414*t120407*2.0+t120406*t120362*2.0-rho_b[index]*t120362*(ccaa1*gamma_bb[index]* \
               gcaa*t120371*t120354*(8.8E1/9.0)-ccaa1*t120314*t120315*t120390*t120349*2.4E1+ccaa2*t120314*t120315* \
               t120380*t120349*(3.04E2/9.0)+ccaa4*t120316*t120317*t120409*t120368*(1.12E3/9.0)-ccaa2*t120314*t120404* \
               t120315*t120405*t120381*(3.2E1/3.0)-ccaa4*t120400*t120401*t120316*t120317*t120383*(6.4E1/3.0)-ccaa2* \
               t120320*t120314*t120315*t120405*(gamma_bb[index]*gcaa*t120354*(1.76E2/9.0)+t120314*t120315*t120349* \
               (3.04E2/9.0))-ccaa4*t120401*t120316*t120317*t120318*(gamma_bb[index]*gcaa*t120354*(3.52E2/9.0)+t120314* \
               t120315*t120349*(6.08E2/3.0)+t120316*t120317*t120409*(1.12E3/9.0)+gamma_bb[index]*gcaa*t120314*t120315* \
               t120408*2.88E2)+ccaa2*t120320*t120314*(t120404*t120404)*t120315*1.0/(t120379*t120379*t120379)*2.0+ \
               ccaa4*(t120400*t120400)*t120316*t120317*t120318*1.0/(t120367*t120367*t120367)*2.0+ccaa3*gamma_bb[index]* \
               gcaa*t120314*t120315*t120408*t120376*7.2E1+ccaa1*gamma_bb[index]*gcaa*t120314*t120315*1.0/(t120370* \
               t120370*t120370)*t120408*(1.28E2/9.0)+ccaa3*gamma_bb[index]*gcaa*t120314*t120315*t120319*1.0/(t120375* \
               t120375*t120375)*(t120394*t120394)*2.0-ccaa3*gamma_bb[index]*gcaa*t120314*t120315*t120319*t120395* \
               (gamma_bb[index]*gcaa*t120354*(8.8E1/3.0)+t120314*t120315*t120349*(3.04E2/3.0)+gamma_bb[index]*gcaa* \
               t120314*t120315*t120408*7.2E1)-ccaa3*gamma_bb[index]*gcaa*t120314*t120315*t120382*t120394*t120395* \
               1.6E1)+rho_b[index]*t120414*(-t120301-t120310+t120430+t120424+t120428+t120112*t120205*(t120301+t120310- \
               t120430+t120422-t120424+t120427-t120428+t120429-t120208*t120415*t120289*t120298*2.0-a1f*c*c0f*t120206* \
               t120296*(8.0/9.0)))-rho_b[index]*t120406*t120407*2.0-c0*t120503*t120453*(cx1*gamma_bb[index]*gx*t120354* \
               t120468*(8.8E1/9.0)-cx1*t120314*t120451*t120506*t120349*2.4E1+cx2*t120314*t120451*t120349*t120477* \
               (3.04E2/9.0)+cx4*t120316*t120452*t120409*t120465*(1.12E3/9.0)-cx2*t120314*t120451*t120381*t120492* \
               t120479*(3.2E1/3.0)-cx4*t120316*t120452*t120383*t120478*t120489*(6.4E1/3.0)-cx2*t120320*t120314*t120451* \
               t120492*(gamma_bb[index]*gx*t120354*(1.76E2/9.0)+t120314*t120451*t120349*(3.04E2/9.0))-cx4*t120316* \
               t120452*t120318*t120489*(gamma_bb[index]*gx*t120354*(3.52E2/9.0)+t120314*t120451*t120349*(6.08E2/3.0) \
               +t120316*t120452*t120409*(1.12E3/9.0)+gamma_bb[index]*gx*t120314*t120451*t120408*2.88E2)+cx2*t120320* \
               t120314*t120451*1.0/(t120476*t120476*t120476)*(t120479*t120479)*2.0+cx4*t120316*t120452*t120318*1.0/ \
               (t120464*t120464*t120464)*(t120478*t120478)*2.0+cx3*gamma_bb[index]*gx*t120314*t120451*t120408*t120473* \
               7.2E1+cx1*gamma_bb[index]*gx*t120314*t120451*t120408*1.0/(t120467*t120467*t120467)*(1.28E2/9.0)+cx3* \
               gamma_bb[index]*gx*t120314*t120451*t120319*1.0/(t120472*t120472*t120472)*(t120484*t120484)*2.0-cx3* \
               gamma_bb[index]*gx*t120314*t120451*t120480*t120319*(gamma_bb[index]*gx*t120354*(8.8E1/3.0)+t120314* \
               t120451*t120349*(3.04E2/3.0)+gamma_bb[index]*gx*t120314*t120451*t120408*7.2E1)-cx3*gamma_bb[index]* \
               gx*t120314*t120451*t120480*t120382*t120484*1.6E1)-c0*t120501*t120503*t120174*(4.0/9.0)+c0*t120503* \
               t120513*t120508*(8.0/3.0)+c0*t120501*t120507*t120508*(8.0/3.0)-c0*t120513*t120453*t120507*2.0+c0*t120501* \
               t120453*(omega*t120440*t120496*(2.778046668940015E15/5.2776558133248E13)-omega*t120449*t120459*(7.717543294808713E30/ \
               3.713820117856141E27)+omega*t120435*(omega*t120440*t120447*(2.778046668940015E15/7.0368744177664E13) \
               -omega*t120444*t120449*(7.717543294808713E30/4.951760157141521E27)+omega*t120435*(1.0/(rho_b[index]* \
               rho_b[index])*t120434*(5.0/9.0)-1.0/(omega*omega*omega*omega)*t120434*t120437*(7.717543294808713E30/ \
               4.951760157141521E27)+1.0/pow(t120431,8.0/3.0)*t120438*t120439*(3.858771647404357E31/1.980704062856608E28) \
               -t120440*t120432*t120434*(7.717543294808713E30/9.903520314283042E27)+t120432*t120441*t120434*t120435* \
               (2.778046668940015E15/2.11106232532992E14))+t120442*t120434*t120443*t120448*(3.080234563013177E46/ \
               1.115037259926531E43)+1.0/(omega*omega*omega)*t120441*t120434*t120443*(1.108777112152858E31/2.37684487542793E29) \
               )*(4.0/3.0));
        } else if (rho_a[index] > cutoff_) {
            v_rho_b_rho_b_[index] = 0.0;
        } else if (rho_b[index] > cutoff_) {
            double t122382 = 1.0/pow(rho_b[index],1.0/3.0);
            double t122383 = c*t122382;
            double t122384 = sqrt(t122383);
            double t122385 = b1f*t122384;
            double t122386 = pow(t122383,3.0/2.0);
            double t122387 = b3f*t122386;
            double t122388 = c*c;
            double t122389 = 1.0/pow(rho_b[index],2.0/3.0);
            double t122390 = b4f*t122388*t122389;
            double t122391 = b2f*c*t122382;
            double t122392 = t122390+t122391+t122385+t122387;
            double t122393 = 1.0/pow(rho_b[index],4.0/3.0);
            double t122394 = b1p*t122384;
            double t122395 = b3p*t122386;
            double t122396 = b4p*t122388*t122389;
            double t122397 = b2p*c*t122382;
            double t122398 = t122394+t122395+t122396+t122397;
            double t122399 = 1.0/pow(rho_b[index],5.0/3.0);
            double t122400 = 1.0/sqrt(t122383);
            double t122401 = 1.0/c0f;
            double t122402 = 1.0/t122392;
            double t122403 = t122401*t122402*(1.0/2.0);
            double t122404 = t122403+1.0;
            double t122405 = 1.0/c0p;
            double t122406 = 1.0/t122398;
            double t122407 = t122405*t122406*(1.0/2.0);
            double t122408 = t122407+1.0;
            double t122409 = a1p*c*t122382;
            double t122410 = t122409+1.0;
            double t122411 = 1.0/t122408;
            double t122412 = 1.0/(t122398*t122398);
            double t122413 = b4p*t122388*t122399*(2.0/3.0);
            double t122414 = b2p*c*t122393*(1.0/3.0);
            double t122415 = b1p*c*t122400*t122393*(1.0/6.0);
            double t122416 = b3p*c*t122384*t122393*(1.0/2.0);
            double t122417 = t122413+t122414+t122415+t122416;
            double t122418 = t122410*t122411*t122412*t122417;
            double t122419 = log(t122408);
            double t122420 = gamma_bb[index]*gamma_bb[index];
            double t122421 = gcaa*gcaa;
            double t122422 = t122420*t122420;
            double t122423 = t122421*t122421;
            double t122424 = 1.0/pow(rho_b[index],3.2E1/3.0);
            double t122425 = 1.0/pow(rho_b[index],8.0/3.0);
            double t122426 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
               rho_b[index]*rho_b[index]);
            double t122427 = 1.0/pow(rho_b[index],1.6E1/3.0);
            double t122428 = pow(2.0,1.0/3.0);
            double t122429 = t122428*2.0;
            double t122430 = t122429-2.0;
            double t122431 = two_13*2.0;
            double t122432 = t122431-2.0;
            double t122433 = 1.0/t122432;
            double t122434 = log(t122404);
            double t122435 = a1f*c*t122382;
            double t122436 = t122435+1.0;
            double t122437 = gamma_bb[index]*gcaa*t122425*4.0;
            double t122438 = gamma_bb[index]*gcaa*t122420*t122421*t122426*4.0;
            double t122439 = t122420*t122421*t122427*6.0;
            double t122440 = t122422*t122423*t122424;
            double t122441 = t122440+t122437+t122438+t122439+1.0;
            double t122442 = 1.0/t122441;
            double t122443 = gamma_bb[index]*gcaa*t122425;
            double t122444 = t122443+1.0;
            double t122445 = 1.0/t122444;
            double t122446 = gamma_bb[index]*gcaa*t122425*3.0;
            double t122447 = gamma_bb[index]*gcaa*t122420*t122421*t122426;
            double t122448 = t122420*t122421*t122427*3.0;
            double t122449 = t122446+t122447+t122448+1.0;
            double t122450 = 1.0/t122449;
            double t122451 = gamma_bb[index]*gcaa*t122425*2.0;
            double t122452 = t122420*t122421*t122427;
            double t122453 = t122451+t122452+1.0;
            double t122454 = 1.0/t122453;
            double t122455 = 1.0/pow(rho_b[index],1.9E1/3.0);
            double t122456 = 1.0/pow(rho_b[index],1.1E1/3.0);
            double t122457 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
               rho_b[index]*rho_b[index]*rho_b[index]);
            double t122458 = 1.0/pow(rho_b[index],3.5E1/3.0);
            double t122459 = 1.0/t122404;
            double t122460 = 1.0/(t122392*t122392);
            double t122461 = b4f*t122388*t122399*(2.0/3.0);
            double t122462 = b2f*c*t122393*(1.0/3.0);
            double t122463 = b1f*c*t122400*t122393*(1.0/6.0);
            double t122464 = b3f*c*t122384*t122393*(1.0/2.0);
            double t122465 = t122461+t122462+t122463+t122464;
            double t122466 = a1f*c*c0f*t122434*t122393*(2.0/3.0);
            double t122467 = a1p*c*c0p*t122419*t122393*(2.0/3.0);
            double t122468 = ccaa4*t122422*t122423*t122442*t122458*(3.2E1/3.0);
            double t122469 = ccaa1*gamma_bb[index]*gcaa*t122445*t122456*(8.0/3.0);
            double t122470 = ccaa3*gamma_bb[index]*gcaa*t122420*t122421*t122450*t122457*8.0;
            double t122471 = ccaa2*t122420*t122421*t122454*t122455*(1.6E1/3.0);
            double t122472 = 1.0/(t122444*t122444);
            double t122473 = gamma_bb[index]*gcaa*t122456*8.0;
            double t122474 = gamma_bb[index]*gcaa*t122420*t122421*t122457*8.0;
            double t122475 = t122420*t122421*t122455*1.6E1;
            double t122476 = t122473+t122474+t122475;
            double t122477 = 1.0/(t122449*t122449);
            double t122478 = gamma_bb[index]*gcaa*t122456*(3.2E1/3.0);
            double t122479 = gamma_bb[index]*gcaa*t122420*t122421*t122457*3.2E1;
            double t122480 = t122420*t122421*t122455*3.2E1;
            double t122481 = t122422*t122423*t122458*(3.2E1/3.0);
            double t122482 = t122480+t122481+t122478+t122479;
            double t122483 = 1.0/(t122441*t122441);
            double t122484 = gamma_bb[index]*gcaa*t122456*(1.6E1/3.0);
            double t122485 = t122420*t122421*t122455*(1.6E1/3.0);
            double t122486 = t122484+t122485;
            double t122487 = 1.0/(t122453*t122453);
            double t122488 = t122470+t122471+t122468+t122469-ccaa1*t122420*t122421*t122472*t122455*(8.0/3.0)- \
               ccaa4*t122422*t122423*t122424*t122482*t122483-ccaa2*t122420*t122421*t122427*t122486*t122487-ccaa3* \
               gamma_bb[index]*gcaa*t122420*t122421*t122426*t122476*t122477;
            double t122489 = c0f*t122434*t122436*2.0;
            double t122490 = c0p*t122410*t122419*2.0;
            double t122491 = 1.0/pow(rho_b[index],1.0E1);
            double t122492 = 1.0/pow(rho_b[index],2.2E1/3.0);
            double t122493 = 1.0/pow(rho_b[index],1.4E1/3.0);
            double t122494 = 1.0/pow(rho_b[index],3.8E1/3.0);
            double t122495 = ccaa4*t122422*t122423*t122424*t122442;
            double t122496 = ccaa1*gamma_bb[index]*gcaa*t122425*t122445;
            double t122497 = ccaa3*gamma_bb[index]*gcaa*t122420*t122421*t122450*t122426;
            double t122498 = ccaa2*t122420*t122421*t122427*t122454;
            double t122499 = ccaa0+t122495+t122496+t122497+t122498;
            double t122500 = 1.0/pow(rho_b[index],7.0/3.0);
            double t122501 = 1.0/pow(t122383,3.0/2.0);
            double t122502 = t122465*t122465;
            double t122503 = t122417*t122417;
            double t122504 = 1.0/(t122398*t122398*t122398);
            double t122505 = t122410*t122411*t122503*t122504*2.0;
            double t122506 = b4p*t122425*t122388*(1.0E1/9.0);
            double t122507 = b2p*c*t122500*(4.0/9.0);
            double t122508 = b3p*t122400*t122425*t122388*(1.0/1.2E1);
            double t122509 = b1p*c*t122400*t122500*(2.0/9.0);
            double t122510 = b3p*c*t122500*t122384*(2.0/3.0);
            double t122511 = t122510+t122506+t122507+t122508+t122509-b1p*t122501*t122425*t122388*(1.0/3.6E1);
            double t122512 = 1.0/(t122408*t122408);
            double t122513 = 1.0/(t122398*t122398*t122398*t122398);
            double t122514 = a1p*c*c0p*t122500*t122419*(8.0/9.0);
            double t122515 = rho_b[index]*(8.334140006820045E15/1.40737488355328E14);
            double t122516 = 1.0/(omega*omega);
            double t122517 = pow(t122515,2.0/3.0);
            double t122520 = t122516*t122517;
            double t122518 = exp(-t122520);
            double t122519 = 1.0/pow(t122515,1.0/3.0);
            double t122521 = 1.0/pow(t122515,2.0/3.0);
            double t122522 = omega*omega;
            double t122523 = t122518-1.0;
            double t122524 = 1.0/pow(t122515,4.0/3.0);
            double t122525 = 1.0/rho_b[index];
            double t122526 = 1.0/pow(t122515,5.0/3.0);
            double t122527 = 1.0/sqrt(3.141592653589793);
            double t122534 = t122521*t122522*t122523*(1.0/2.0);
            double t122528 = -t122534+t122518;
            double t122529 = t122525*t122518*(1.0/3.0);
            double t122530 = t122522*t122523*t122526*(2.778046668940015E15/1.40737488355328E14);
            double t122577 = t122516*t122518*t122519*(2.778046668940015E15/7.0368744177664E13);
            double t122531 = t122530+t122529-t122577;
            double t122532 = 1.0/omega;
            double t122533 = 1.0/pow(t122515,7.0/3.0);
            double t122535 = gx*gx;
            double t122536 = t122535*t122535;
            double t122537 = pow(rho_b[index],4.0/3.0);
            double t122538 = pow(t122515,1.0/3.0);
            double t122539 = t122532*t122538;
            double t122540 = erf(t122539);
            double t122541 = t122540*(3.991211251234741E15/2.251799813685248E15);
            double t122542 = omega*t122519*t122528;
            double t122543 = t122541+t122542;
            double t122544 = gamma_bb[index]*gx*t122425*4.0;
            double t122545 = gamma_bb[index]*gx*t122420*t122426*t122535*4.0;
            double t122546 = t122420*t122427*t122535*6.0;
            double t122547 = t122422*t122424*t122536;
            double t122548 = t122544+t122545+t122546+t122547+1.0;
            double t122549 = 1.0/t122548;
            double t122550 = gamma_bb[index]*gx*t122425;
            double t122551 = t122550+1.0;
            double t122552 = 1.0/t122551;
            double t122553 = gamma_bb[index]*gx*t122425*3.0;
            double t122554 = gamma_bb[index]*gx*t122420*t122426*t122535;
            double t122555 = t122420*t122427*t122535*3.0;
            double t122556 = t122553+t122554+t122555+1.0;
            double t122557 = 1.0/t122556;
            double t122558 = gamma_bb[index]*gx*t122425*2.0;
            double t122559 = t122420*t122427*t122535;
            double t122560 = t122558+t122559+1.0;
            double t122561 = 1.0/t122560;
            double t122569 = gamma_bb[index]*gx*t122456*(3.2E1/3.0);
            double t122570 = gamma_bb[index]*gx*t122420*t122535*t122457*3.2E1;
            double t122571 = t122420*t122535*t122455*3.2E1;
            double t122572 = t122422*t122536*t122458*(3.2E1/3.0);
            double t122562 = t122570+t122571+t122572+t122569;
            double t122574 = gamma_bb[index]*gx*t122456*(1.6E1/3.0);
            double t122575 = t122420*t122535*t122455*(1.6E1/3.0);
            double t122563 = t122574+t122575;
            double t122564 = 1.0/(t122556*t122556);
            double t122565 = gamma_bb[index]*gx*t122456*8.0;
            double t122566 = gamma_bb[index]*gx*t122420*t122535*t122457*8.0;
            double t122567 = t122420*t122535*t122455*1.6E1;
            double t122568 = t122565+t122566+t122567;
            double t122573 = 1.0/(t122548*t122548);
            double t122576 = 1.0/(t122560*t122560);
            double t122578 = omega*t122531*t122519;
            double t122579 = t122521*t122532*t122518*t122527*(1.108777112152858E31/1.584563250285287E29);
            double t122588 = omega*t122524*t122528*(2.778046668940015E15/1.40737488355328E14);
            double t122580 = t122578+t122579-t122588;
            double t122581 = cx4*t122422*t122424*t122536*t122549;
            double t122582 = cx1*gamma_bb[index]*gx*t122425*t122552;
            double t122583 = cx3*gamma_bb[index]*gx*t122420*t122426*t122535*t122557;
            double t122584 = cx2*t122420*t122561*t122427*t122535;
            double t122585 = cx0+t122581+t122582+t122583+t122584;
            double t122586 = omega*t122543*t122519*(4.0/3.0);
            double t122587 = t122586-1.0;
            double t122589 = omega*t122524*t122543*(2.778046668940015E15/1.05553116266496E14);
            double t122590 = 1.0/(t122551*t122551);
            double t122591 = t122589-omega*t122580*t122519*(4.0/3.0);
            double t122592 = pow(rho_b[index],1.0/3.0);
            double t122593 = cx4*t122422*t122536*t122458*t122549*(3.2E1/3.0);
            double t122594 = cx1*gamma_bb[index]*gx*t122552*t122456*(8.0/3.0);
            double t122595 = cx3*gamma_bb[index]*gx*t122420*t122535*t122457*t122557*8.0;
            double t122596 = cx2*t122420*t122561*t122535*t122455*(1.6E1/3.0);
            double t122597 = t122593+t122594+t122595+t122596-cx1*t122420*t122535*t122455*t122590*(8.0/3.0)-cx2* \
               t122420*t122427*t122535*t122563*t122576-cx4*t122422*t122424*t122562*t122536*t122573-cx3*gamma_bb[index]* \
               gx*t122420*t122426*t122535*t122564*t122568;
            v_rho_b_rho_b_[index] = t122488*(t122490+t122430*t122433*(t122489-c0p*t122410*t122419*2.0))*2.0+t122499* \
               (-t122418+t122467+t122430*t122433*(t122418+t122466-t122460*t122436*t122465*t122459-a1p*c*c0p*t122419* \
               t122393*(2.0/3.0)))*2.0+rho_b[index]*t122499*(-t122505-t122514+t122430*t122433*(t122505+t122514-t122410* \
               t122411*t122412*t122511-t122502*t122436*1.0/(t122392*t122392*t122392)*t122459*2.0+t122460*t122436* \
               t122459*(b2f*c*t122500*(4.0/9.0)+b4f*t122425*t122388*(1.0E1/9.0)+b1f*c*t122400*t122500*(2.0/9.0)+b3f* \
               c*t122500*t122384*(2.0/3.0)-b1f*t122501*t122425*t122388*(1.0/3.6E1)+b3f*t122400*t122425*t122388*(1.0/ \
               1.2E1))+t122401*t122502*1.0/(t122404*t122404)*t122436*1.0/(t122392*t122392*t122392*t122392)*(1.0/2.0) \
               -a1f*c*c0f*t122500*t122434*(8.0/9.0)-t122410*t122503*t122512*t122405*t122513*(1.0/2.0)+a1f*c*t122460* \
               t122393*t122465*t122459*(2.0/3.0)-a1p*c*t122411*t122412*t122417*t122393*(2.0/3.0))+t122410*t122411* \
               t122412*t122511+t122410*t122503*t122512*t122405*t122513*(1.0/2.0)+a1p*c*t122411*t122412*t122417*t122393* \
               (2.0/3.0))-rho_b[index]*t122488*(-t122418+t122467+t122430*t122433*(t122418+t122466-t122467-t122460* \
               t122436*t122465*t122459))*2.0-rho_b[index]*(t122490-t122430*t122433*(t122490-t122489))*(ccaa1*gamma_bb[index]* \
               gcaa*t122445*t122493*(8.8E1/9.0)-ccaa1*t122420*t122421*t122472*t122492*2.4E1+ccaa2*t122420*t122421* \
               t122454*t122492*(3.04E2/9.0)+ccaa4*t122422*t122423*t122442*t122494*(1.12E3/9.0)-ccaa2*t122420*t122421* \
               t122455*t122486*t122487*(3.2E1/3.0)-ccaa4*t122422*t122423*t122482*t122483*t122458*(6.4E1/3.0)-ccaa2* \
               t122420*t122421*t122427*t122487*(gamma_bb[index]*gcaa*t122493*(1.76E2/9.0)+t122420*t122421*t122492* \
               (3.04E2/9.0))-ccaa4*t122422*t122423*t122424*t122483*(gamma_bb[index]*gcaa*t122493*(3.52E2/9.0)+t122420* \
               t122421*t122492*(6.08E2/3.0)+t122422*t122423*t122494*(1.12E3/9.0)+gamma_bb[index]*gcaa*t122420*t122421* \
               t122491*2.88E2)+ccaa4*t122422*t122423*1.0/(t122441*t122441*t122441)*t122424*(t122482*t122482)*2.0+ \
               ccaa2*t122420*t122421*1.0/(t122453*t122453*t122453)*t122427*(t122486*t122486)*2.0+ccaa3*gamma_bb[index]* \
               gcaa*t122420*t122421*t122450*t122491*7.2E1+ccaa1*gamma_bb[index]*gcaa*t122420*t122421*1.0/(t122444* \
               t122444*t122444)*t122491*(1.28E2/9.0)+ccaa3*gamma_bb[index]*gcaa*t122420*t122421*t122426*1.0/(t122449* \
               t122449*t122449)*(t122476*t122476)*2.0-ccaa3*gamma_bb[index]*gcaa*t122420*t122421*t122426*t122477* \
               (gamma_bb[index]*gcaa*t122493*(8.8E1/3.0)+t122420*t122421*t122492*(3.04E2/3.0)+gamma_bb[index]*gcaa* \
               t122420*t122421*t122491*7.2E1)-ccaa3*gamma_bb[index]*gcaa*t122420*t122421*t122457*t122476*t122477* \
               1.6E1)-c0*t122537*t122587*(cx1*gamma_bb[index]*gx*t122552*t122493*(8.8E1/9.0)-cx1*t122420*t122535* \
               t122590*t122492*2.4E1+cx2*t122420*t122561*t122535*t122492*(3.04E2/9.0)+cx4*t122422*t122536*t122494* \
               t122549*(1.12E3/9.0)-cx2*t122420*t122535*t122455*t122563*t122576*(3.2E1/3.0)-cx4*t122422*t122562*t122536* \
               t122573*t122458*(6.4E1/3.0)-cx2*t122420*t122427*t122535*t122576*(gamma_bb[index]*gx*t122493*(1.76E2/ \
               9.0)+t122420*t122535*t122492*(3.04E2/9.0))-cx4*t122422*t122424*t122536*t122573*(gamma_bb[index]*gx* \
               t122493*(3.52E2/9.0)+t122420*t122535*t122492*(6.08E2/3.0)+t122422*t122536*t122494*(1.12E3/9.0)+gamma_bb[index]* \
               gx*t122420*t122535*t122491*2.88E2)+cx2*t122420*1.0/(t122560*t122560*t122560)*t122427*t122535*(t122563* \
               t122563)*2.0+cx4*t122422*t122424*(t122562*t122562)*t122536*1.0/(t122548*t122548*t122548)*2.0+cx3*gamma_bb[index]* \
               gx*t122420*t122535*t122491*t122557*7.2E1+cx1*gamma_bb[index]*gx*t122420*1.0/(t122551*t122551*t122551) \
               *t122535*t122491*(1.28E2/9.0)+cx3*gamma_bb[index]*gx*t122420*t122426*t122535*1.0/(t122556*t122556* \
               t122556)*(t122568*t122568)*2.0-cx3*gamma_bb[index]*gx*t122420*t122426*t122535*t122564*(gamma_bb[index]* \
               gx*t122493*(8.8E1/3.0)+t122420*t122535*t122492*(3.04E2/3.0)+gamma_bb[index]*gx*t122420*t122535*t122491* \
               7.2E1)-cx3*gamma_bb[index]*gx*t122420*t122535*t122564*t122457*t122568*1.6E1)+c0*t122591*t122592*t122585* \
               (8.0/3.0)-c0*t122537*t122591*t122597*2.0+c0*t122592*t122587*t122597*(8.0/3.0)-c0*t122585*t122389*t122587* \
               (4.0/9.0)+c0*t122537*t122585*(omega*t122533*t122543*(-7.717543294808713E30/3.713820117856141E27)+omega* \
               t122524*t122580*(2.778046668940015E15/5.2776558133248E13)+omega*t122519*(omega*t122531*t122524*(2.778046668940015E15/ \
               7.0368744177664E13)-omega*t122533*t122528*(7.717543294808713E30/4.951760157141521E27)+omega*t122519* \
               (1.0/(rho_b[index]*rho_b[index])*t122518*(5.0/9.0)-1.0/(omega*omega*omega*omega)*t122521*t122518*(7.717543294808713E30/ \
               4.951760157141521E27)+t122522*t122523*1.0/pow(t122515,8.0/3.0)*(3.858771647404357E31/1.980704062856608E28) \
               -t122524*t122516*t122518*(7.717543294808713E30/9.903520314283042E27)+t122516*t122525*t122518*t122519* \
               (2.778046668940015E15/2.11106232532992E14))+t122532*t122526*t122518*t122527*(3.080234563013177E46/ \
               1.115037259926531E43)+1.0/(omega*omega*omega)*t122525*t122518*t122527*(1.108777112152858E31/2.37684487542793E29) \
               )*(4.0/3.0));
        } else {
            v_rho_b_rho_b_[index] = 0.0;
        } 

        if (is_gga_) {

            //V_rho_a_gamma_aa
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t120515 = 1.0/pow(rho_a[index],1.0/3.0);
                double t120516 = c*t120515;
                double t120517 = sqrt(t120516);
                double t120518 = pow(t120516,3.0/2.0);
                double t120519 = c*c;
                double t120520 = 1.0/pow(rho_a[index],2.0/3.0);
                double t120521 = 1.0/c0p;
                double t120522 = b1p*t120517;
                double t120523 = b3p*t120518;
                double t120524 = b4p*t120520*t120519;
                double t120525 = b2p*c*t120515;
                double t120526 = t120522+t120523+t120524+t120525;
                double t120527 = 1.0/t120526;
                double t120528 = t120521*t120527*(1.0/2.0);
                double t120529 = t120528+1.0;
                double t120530 = log(t120529);
                double t120531 = a1p*c*t120515;
                double t120532 = t120531+1.0;
                double t120533 = 1.0/pow(rho_a[index],8.0/3.0);
                double t120534 = gamma_aa[index]*gamma_aa[index];
                double t120535 = gcaa*gcaa;
                double t120536 = t120535*t120535;
                double t120537 = 1.0/pow(rho_a[index],3.2E1/3.0);
                double t120538 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t120539 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t120540 = gamma_aa[index]*gcaa*t120533;
                double t120541 = t120540+1.0;
                double t120542 = gamma_aa[index]*gcaa*t120533*3.0;
                double t120543 = gamma_aa[index]*gcaa*t120534*t120535*t120539;
                double t120544 = t120534*t120535*t120538*3.0;
                double t120545 = t120542+t120543+t120544+1.0;
                double t120546 = t120534*t120534;
                double t120547 = gamma_aa[index]*gcaa*t120533*4.0;
                double t120548 = gamma_aa[index]*gcaa*t120534*t120535*t120539*4.0;
                double t120549 = t120534*t120535*t120538*6.0;
                double t120550 = t120536*t120537*t120546;
                double t120551 = t120550+t120547+t120548+t120549+1.0;
                double t120552 = gamma_aa[index]*gcaa*t120533*2.0;
                double t120553 = t120534*t120535*t120538;
                double t120554 = t120552+t120553+1.0;
                double t120555 = rho_a[index]+rho_b[index];
                double t120556 = 1.0/pow(t120555,1.0/3.0);
                double t120557 = c*t120556;
                double t120558 = sqrt(t120557);
                double t120559 = b1p*t120558;
                double t120560 = pow(t120557,3.0/2.0);
                double t120561 = b3p*t120560;
                double t120562 = 1.0/pow(t120555,2.0/3.0);
                double t120563 = b4p*t120562*t120519;
                double t120564 = b2p*c*t120556;
                double t120565 = t120561+t120563+t120564+t120559;
                double t120566 = 1.0/pow(t120555,4.0/3.0);
                double t120567 = two_13*2.0;
                double t120568 = t120567-2.0;
                double t120569 = 1.0/t120568;
                double t120570 = 1.0/c0f;
                double t120571 = 1.0/t120565;
                double t120572 = t120521*t120571*(1.0/2.0);
                double t120573 = t120572+1.0;
                double t120574 = a1p*c*t120556;
                double t120575 = t120574+1.0;
                double t120576 = rho_a[index]-rho_b[index];
                double t120577 = t120576*t120576;
                double t120578 = 1.0/t120555;
                double t120579 = t120576*t120578;
                double t120580 = b1f*t120558;
                double t120581 = b3f*t120560;
                double t120582 = b4f*t120562*t120519;
                double t120583 = b2f*c*t120556;
                double t120584 = t120580+t120581+t120582+t120583;
                double t120585 = 1.0/t120584;
                double t120586 = t120570*t120585*(1.0/2.0);
                double t120587 = t120586+1.0;
                double t120588 = log(t120587);
                double t120589 = a1f*c*t120556;
                double t120590 = t120589+1.0;
                double t120591 = log(t120573);
                double t120601 = c0f*t120590*t120588*2.0;
                double t120602 = c0p*t120591*t120575*2.0;
                double t120592 = t120601-t120602;
                double t120593 = t120579+1.0;
                double t120594 = pow(t120593,4.0/3.0);
                double t120595 = -t120579+1.0;
                double t120596 = pow(t120595,4.0/3.0);
                double t120597 = t120594+t120596-2.0;
                double t120598 = 1.0/(t120555*t120555);
                double t120629 = t120576*t120598;
                double t120599 = -t120629+t120578;
                double t120600 = 1.0/(t120555*t120555*t120555*t120555);
                double t120603 = t120577*t120577;
                double t120604 = 1.0/pow(t120555,5.0/3.0);
                double t120605 = 1.0/sqrt(t120557);
                double t120606 = 1.0/t120573;
                double t120607 = 1.0/(t120565*t120565);
                double t120608 = b4p*t120604*t120519*(2.0/3.0);
                double t120609 = b2p*c*t120566*(1.0/3.0);
                double t120610 = b1p*c*t120605*t120566*(1.0/6.0);
                double t120611 = b3p*c*t120566*t120558*(1.0/2.0);
                double t120612 = t120610+t120611+t120608+t120609;
                double t120613 = t120612*t120606*t120607*t120575;
                double t120614 = 1.0/(t120555*t120555*t120555*t120555*t120555);
                double t120615 = 1.0/d2fz0;
                double t120616 = 1.0/Aa;
                double t120617 = b1a*t120558;
                double t120618 = b3a*t120560;
                double t120619 = b4a*t120562*t120519;
                double t120620 = b2a*c*t120556;
                double t120621 = t120620+t120617+t120618+t120619;
                double t120622 = 1.0/t120621;
                double t120623 = t120622*t120616*(1.0/2.0);
                double t120624 = t120623+1.0;
                double t120625 = log(t120624);
                double t120626 = a1a*c*t120556;
                double t120627 = t120626+1.0;
                double t120628 = pow(t120593,1.0/3.0);
                double t120630 = t120628*t120599*(4.0/3.0);
                double t120631 = pow(t120595,1.0/3.0);
                double t120632 = t120630-t120631*t120599*(4.0/3.0);
                double t120633 = t120600*t120603;
                double t120634 = t120633-1.0;
                double t120635 = pow(2.0,1.0/3.0);
                double t120636 = t120635*2.0;
                double t120637 = t120636-2.0;
                double t120638 = a1f*c*t120515;
                double t120639 = t120638+1.0;
                double t120640 = b1f*t120517;
                double t120641 = b3f*t120518;
                double t120642 = b4f*t120520*t120519;
                double t120643 = b2f*c*t120515;
                double t120644 = t120640+t120641+t120642+t120643;
                double t120645 = 1.0/t120644;
                double t120646 = t120570*t120645*(1.0/2.0);
                double t120647 = t120646+1.0;
                double t120648 = 1.0/pow(rho_a[index],4.0/3.0);
                double t120649 = 1.0/pow(rho_a[index],5.0/3.0);
                double t120650 = 1.0/sqrt(t120516);
                double t120651 = log(t120647);
                double t120652 = 1.0/t120529;
                double t120653 = 1.0/(t120526*t120526);
                double t120654 = b4p*t120519*t120649*(2.0/3.0);
                double t120655 = b2p*c*t120648*(1.0/3.0);
                double t120656 = b1p*c*t120650*t120648*(1.0/6.0);
                double t120657 = b3p*c*t120517*t120648*(1.0/2.0);
                double t120658 = t120654+t120655+t120656+t120657;
                double t120659 = t120532*t120652*t120653*t120658;
                double t120660 = c0f*t120651*t120639*2.0;
                double t120661 = c0p*t120530*t120532*2.0;
                double t120662 = gamma_aa[index]*t120533*(1.0/2.0);
                double t120663 = 1.0/pow(rho_b[index],8.0/3.0);
                double t120664 = gamma_bb[index]*t120663*(1.0/2.0);
                double t120665 = t120662+t120664;
                double t120666 = gcab*t120665;
                double t120667 = t120666+1.0;
                double t120668 = gcab*gcab;
                double t120669 = t120665*t120665;
                double t120670 = t120668*t120668;
                double t120671 = t120669*t120669;
                double t120672 = t120668*t120669;
                double t120673 = gcab*t120665*2.0;
                double t120674 = t120672+t120673+1.0;
                double t120675 = t120668*t120669*3.0;
                double t120676 = gcab*t120665*t120668*t120669;
                double t120677 = gcab*t120665*3.0;
                double t120678 = t120675+t120676+t120677+1.0;
                double t120679 = t120668*t120669*6.0;
                double t120680 = gcab*t120665*t120668*t120669*4.0;
                double t120681 = t120670*t120671;
                double t120682 = gcab*t120665*4.0;
                double t120683 = t120680+t120681+t120682+t120679+1.0;
                double t120684 = t120660-t120661;
                double t120685 = 1.0/pow(rho_b[index],1.0/3.0);
                double t120686 = c*t120685;
                double t120687 = sqrt(t120686);
                double t120688 = pow(t120686,3.0/2.0);
                double t120689 = 1.0/pow(rho_b[index],2.0/3.0);
                double t120690 = b1p*t120687;
                double t120691 = b3p*t120688;
                double t120692 = b4p*t120519*t120689;
                double t120693 = b2p*c*t120685;
                double t120694 = t120690+t120691+t120692+t120693;
                double t120695 = 1.0/t120694;
                double t120696 = t120521*t120695*(1.0/2.0);
                double t120697 = t120696+1.0;
                double t120698 = log(t120697);
                double t120699 = a1p*c*t120685;
                double t120700 = t120699+1.0;
                double t120701 = c0p*t120700*t120698*2.0;
                double t120702 = t120600*t120603*t120592*t120569*t120597;
                double t120703 = Aa*t120615*t120625*t120634*t120627*t120569*t120597*2.0;
                double t120704 = 1.0/t120667;
                double t120705 = 1.0/pow(rho_a[index],1.1E1/3.0);
                double t120706 = 1.0/(t120667*t120667);
                double t120707 = 1.0/t120674;
                double t120708 = 1.0/(t120678*t120678);
                double t120709 = 1.0/pow(rho_a[index],1.9E1/3.0);
                double t120710 = 1.0/(t120674*t120674);
                double t120711 = 1.0/t120678;
                double t120712 = 1.0/t120683;
                double t120713 = 1.0/(t120683*t120683);
                double t120714 = gcab*t120533*2.0;
                double t120715 = t120533*t120665*t120668*6.0;
                double t120716 = gcab*t120533*t120668*t120669*6.0;
                double t120717 = t120533*t120670*t120665*t120669*2.0;
                double t120718 = t120714+t120715+t120716+t120717;
                double t120719 = gamma_aa[index]*gcab*t120705*(8.0/3.0);
                double t120720 = gamma_aa[index]*t120705*t120665*t120668*(8.0/3.0);
                double t120721 = t120720+t120719;
                double t120722 = gcab*t120533;
                double t120723 = t120533*t120665*t120668;
                double t120724 = t120722+t120723;
                double t120725 = gamma_aa[index]*gcab*t120705*(1.6E1/3.0);
                double t120726 = gamma_aa[index]*gcab*t120705*t120668*t120669*1.6E1;
                double t120727 = gamma_aa[index]*t120705*t120670*t120665*t120669*(1.6E1/3.0);
                double t120728 = gamma_aa[index]*t120705*t120665*t120668*1.6E1;
                double t120729 = t120725+t120726+t120727+t120728;
                double t120730 = gcab*t120533*(3.0/2.0);
                double t120731 = t120533*t120665*t120668*3.0;
                double t120732 = gcab*t120533*t120668*t120669*(3.0/2.0);
                double t120733 = t120730+t120731+t120732;
                double t120734 = gamma_aa[index]*gcab*t120705*4.0;
                double t120735 = gamma_aa[index]*gcab*t120705*t120668*t120669*4.0;
                double t120736 = gamma_aa[index]*t120705*t120665*t120668*8.0;
                double t120737 = t120734+t120735+t120736;
                double t120738 = t120637*t120684*t120569;
                double t120739 = t120661+t120738;
                double t120740 = 1.0/t120541;
                double t120741 = 1.0/t120551;
                double t120742 = 1.0/t120554;
                double t120743 = 1.0/t120545;
                double t120744 = 1.0/(t120541*t120541);
                double t120745 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]*rho_a[index]);
                double t120746 = 1.0/(t120545*t120545);
                double t120747 = 1.0/(t120554*t120554);
                double t120748 = gcaa*t120533*3.0;
                double t120749 = gamma_aa[index]*t120535*t120538*6.0;
                double t120750 = gcaa*t120534*t120535*t120539*3.0;
                double t120751 = t120750+t120748+t120749;
                double t120752 = 1.0/pow(rho_a[index],3.5E1/3.0);
                double t120753 = 1.0/(t120551*t120551);
                double t120754 = gcaa*t120533*4.0;
                double t120755 = gamma_aa[index]*t120535*t120538*1.2E1;
                double t120756 = gcaa*t120534*t120535*t120539*1.2E1;
                double t120757 = gamma_aa[index]*t120534*t120536*t120537*4.0;
                double t120758 = t120754+t120755+t120756+t120757;
                double t120759 = gcaa*t120533*2.0;
                double t120760 = gamma_aa[index]*t120535*t120538*2.0;
                double t120761 = t120760+t120759;
                double t120762 = gamma_aa[index]*gcaa*t120705*(1.6E1/3.0);
                double t120763 = t120534*t120535*t120709*(1.6E1/3.0);
                double t120764 = t120762+t120763;
                double t120765 = gamma_aa[index]*gcaa*t120705*8.0;
                double t120766 = gamma_aa[index]*gcaa*t120534*t120535*t120745*8.0;
                double t120767 = t120534*t120535*t120709*1.6E1;
                double t120768 = t120765+t120766+t120767;
                double t120769 = gamma_aa[index]*gcaa*t120705*(3.2E1/3.0);
                double t120770 = gamma_aa[index]*gcaa*t120534*t120535*t120745*3.2E1;
                double t120771 = t120534*t120535*t120709*3.2E1;
                double t120772 = t120536*t120752*t120546*(3.2E1/3.0);
                double t120773 = t120770+t120771+t120772+t120769;
                double t120774 = 1.0/t120647;
                double t120775 = 1.0/(t120644*t120644);
                double t120776 = b4f*t120519*t120649*(2.0/3.0);
                double t120777 = b2f*c*t120648*(1.0/3.0);
                double t120778 = b1f*c*t120650*t120648*(1.0/6.0);
                double t120779 = b3f*c*t120517*t120648*(1.0/2.0);
                double t120780 = t120776+t120777+t120778+t120779;
                double t120781 = a1f*c*c0f*t120651*t120648*(2.0/3.0);
                double t120782 = a1p*c*c0p*t120530*t120648*(2.0/3.0);
                double t120783 = ccaa1*gcaa*t120533*t120740;
                double t120784 = ccaa4*gamma_aa[index]*t120534*t120741*t120536*t120537*4.0;
                double t120785 = ccaa2*gamma_aa[index]*t120535*t120742*t120538*2.0;
                double t120786 = ccaa3*gcaa*t120534*t120535*t120743*t120539*3.0;
                double t120787 = t120783+t120784+t120785+t120786-ccaa1*gamma_aa[index]*t120535*t120744*t120538-ccaa2* \
                   t120534*t120535*t120761*t120538*t120747-ccaa4*t120536*t120537*t120546*t120753*t120758-ccaa3*gamma_aa[index]* \
                   gcaa*t120534*t120535*t120751*t120539*t120746;
                double t120788 = rho_a[index]*(8.334140006820045E15/1.40737488355328E14);
                double t120789 = 1.0/(omega*omega);
                double t120790 = pow(t120788,2.0/3.0);
                double t120793 = t120790*t120789;
                double t120791 = exp(-t120793);
                double t120792 = 1.0/pow(t120788,1.0/3.0);
                double t120794 = omega*omega;
                double t120795 = t120791-1.0;
                double t120796 = 1.0/pow(t120788,2.0/3.0);
                double t120797 = 1.0/pow(t120788,4.0/3.0);
                double t120798 = 1.0/omega;
                double t120820 = t120794*t120795*t120796*(1.0/2.0);
                double t120799 = -t120820+t120791;
                double t120800 = gx*gx;
                double t120801 = t120800*t120800;
                double t120802 = gamma_aa[index]*gx*t120533;
                double t120803 = t120802+1.0;
                double t120804 = gamma_aa[index]*gx*t120533*3.0;
                double t120805 = gamma_aa[index]*gx*t120800*t120534*t120539;
                double t120806 = t120800*t120534*t120538*3.0;
                double t120807 = t120804+t120805+t120806+1.0;
                double t120808 = gamma_aa[index]*gx*t120533*4.0;
                double t120809 = gamma_aa[index]*gx*t120800*t120534*t120539*4.0;
                double t120810 = t120800*t120534*t120538*6.0;
                double t120811 = t120801*t120537*t120546;
                double t120812 = t120810+t120811+t120808+t120809+1.0;
                double t120813 = gamma_aa[index]*gx*t120533*2.0;
                double t120814 = t120800*t120534*t120538;
                double t120815 = t120813+t120814+1.0;
                double t120816 = pow(t120788,1.0/3.0);
                double t120817 = t120816*t120798;
                double t120818 = erf(t120817);
                double t120819 = t120818*(3.991211251234741E15/2.251799813685248E15);
                double t120821 = omega*t120792*t120799;
                double t120822 = t120821+t120819;
                double t120823 = 1.0/t120803;
                double t120824 = cx1*gx*t120533*t120823;
                double t120825 = 1.0/t120812;
                double t120826 = cx4*gamma_aa[index]*t120801*t120534*t120537*t120825*4.0;
                double t120827 = 1.0/t120815;
                double t120828 = cx2*gamma_aa[index]*t120800*t120538*t120827*2.0;
                double t120829 = 1.0/t120807;
                double t120830 = cx3*gx*t120800*t120534*t120539*t120829*3.0;
                double t120831 = 1.0/(t120803*t120803);
                double t120832 = gx*t120533*3.0;
                double t120833 = gamma_aa[index]*t120800*t120538*6.0;
                double t120834 = gx*t120800*t120534*t120539*3.0;
                double t120835 = t120832+t120833+t120834;
                double t120836 = 1.0/(t120807*t120807);
                double t120837 = gx*t120533*4.0;
                double t120838 = gamma_aa[index]*t120800*t120538*1.2E1;
                double t120839 = gx*t120800*t120534*t120539*1.2E1;
                double t120840 = gamma_aa[index]*t120801*t120534*t120537*4.0;
                double t120841 = t120840+t120837+t120838+t120839;
                double t120842 = 1.0/(t120812*t120812);
                double t120843 = gx*t120533*2.0;
                double t120844 = gamma_aa[index]*t120800*t120538*2.0;
                double t120845 = t120843+t120844;
                double t120846 = 1.0/(t120815*t120815);
                double t120847 = t120830+t120824+t120826+t120828-cx1*gamma_aa[index]*t120800*t120831*t120538-cx2* \
                   t120800*t120534*t120538*t120845*t120846-cx4*t120801*t120841*t120842*t120537*t120546-cx3*gamma_aa[index]* \
                   gx*t120800*t120534*t120835*t120539*t120836;
                double t120848 = pow(rho_a[index],4.0/3.0);
                double t120849 = omega*t120822*t120792*(4.0/3.0);
                double t120850 = t120849-1.0;
                double t120851 = gamma_aa[index]*gx*t120705*(1.6E1/3.0);
                double t120852 = t120800*t120534*t120709*(1.6E1/3.0);
                double t120853 = t120851+t120852;
                double t120854 = gamma_aa[index]*gx*t120705*8.0;
                double t120855 = gamma_aa[index]*gx*t120800*t120534*t120745*8.0;
                double t120856 = t120800*t120534*t120709*1.6E1;
                double t120857 = t120854+t120855+t120856;
                double t120858 = gamma_aa[index]*gx*t120705*(3.2E1/3.0);
                double t120859 = gamma_aa[index]*gx*t120800*t120534*t120745*3.2E1;
                double t120860 = t120800*t120534*t120709*3.2E1;
                double t120861 = t120801*t120752*t120546*(3.2E1/3.0);
                double t120862 = t120860+t120861+t120858+t120859;
                v_rho_a_gamma_aa_[index] = -(rho_a[index]*t120739+rho_b[index]*(t120701-t120637*t120569*(t120701- \
                   c0f*log((t120570*(1.0/2.0))/(b1f*t120687+b3f*t120688+b2f*c*t120685+b4f*t120519*t120689)+1.0)*(a1f* \
                   c*t120685+1.0)*2.0))-t120555*(t120602+t120702+t120703))*(ccab1*gcab*t120704*t120705*(4.0/3.0)-ccab2* \
                   t120710*t120668*t120669*(gcab*t120705*(8.0/3.0)+gamma_aa[index]*t120709*t120668*(4.0/3.0)+t120705* \
                   t120665*t120668*(8.0/3.0))-ccab4*t120713*t120670*t120671*(gcab*t120705*(1.6E1/3.0)+gamma_aa[index]* \
                   t120709*t120668*8.0+t120705*t120665*t120668*1.6E1+gamma_aa[index]*t120670*t120709*t120669*8.0+gcab* \
                   t120705*t120668*t120669*1.6E1+t120705*t120670*t120665*t120669*(1.6E1/3.0)+gamma_aa[index]*gcab*t120709* \
                   t120665*t120668*1.6E1)-ccab1*gamma_aa[index]*t120706*t120709*t120668*(4.0/3.0)+ccab2*gamma_aa[index]* \
                   t120707*t120709*t120668*(4.0/3.0)-ccab1*t120705*t120706*t120665*t120668*(4.0/3.0)+ccab2*t120705*t120707* \
                   t120665*t120668*(8.0/3.0)-ccab2*t120710*t120721*t120533*t120665*t120668+ccab4*t120712*t120705*t120670* \
                   t120665*t120669*(1.6E1/3.0)+ccab4*t120670*t120671*t120718*1.0/(t120683*t120683*t120683)*t120729*2.0+ \
                   ccab2*t120721*t120724*1.0/(t120674*t120674*t120674)*t120668*t120669*2.0+ccab4*gamma_aa[index]*t120712* \
                   t120670*t120709*t120669*8.0+ccab3*gcab*t120711*t120705*t120668*t120669*4.0+ccab3*gamma_aa[index]*gcab* \
                   t120711*t120709*t120665*t120668*4.0-ccab2*gamma_aa[index]*t120710*t120705*t120724*t120665*t120668* \
                   (8.0/3.0)-ccab3*gcab*t120533*t120708*t120737*t120668*t120669*(3.0/2.0)-ccab4*t120533*t120713*t120670* \
                   t120665*t120729*t120669*2.0-ccab3*gcab*t120708*t120665*t120668*t120669*(gcab*t120705*4.0+gamma_aa[index]* \
                   t120709*t120668*4.0+t120705*t120665*t120668*8.0+gcab*t120705*t120668*t120669*4.0+gamma_aa[index]*gcab* \
                   t120709*t120665*t120668*4.0)+ccab1*gamma_aa[index]*gcab*t120709*t120665*1.0/(t120667*t120667*t120667) \
                   *t120668*(4.0/3.0)+ccab3*gcab*t120733*t120665*t120737*t120668*t120669*1.0/(t120678*t120678*t120678) \
                   *2.0-ccab3*gamma_aa[index]*gcab*t120705*t120733*t120708*t120668*t120669*4.0-ccab4*gamma_aa[index]* \
                   t120713*t120705*t120670*t120718*t120665*t120669*(1.6E1/3.0))-t120787*(t120661+t120637*t120569*(t120660- \
                   c0p*t120530*t120532*2.0))-(t120602+t120702+t120703-t120661+t120555*(t120613-t120600*t120603*t120569* \
                   t120597*(t120613-(t120590*1.0/(t120584*t120584)*(b2f*c*t120566*(1.0/3.0)+b4f*t120604*t120519*(2.0/ \
                   3.0)+b1f*c*t120605*t120566*(1.0/6.0)+b3f*c*t120566*t120558*(1.0/2.0)))/t120587+a1f*c*c0f*t120566*t120588* \
                   (2.0/3.0)-a1p*c*c0p*t120591*t120566*(2.0/3.0))-a1p*c*c0p*t120591*t120566*(2.0/3.0)+t120600*t120603* \
                   t120632*t120592*t120569-t120603*t120614*t120592*t120569*t120597*4.0+t120600*t120592*t120576*t120577* \
                   t120569*t120597*4.0-Aa*t120615*t120625*t120627*t120569*t120597*(t120603*t120614*4.0-t120600*t120576* \
                   t120577*4.0)*2.0+Aa*t120632*t120615*t120625*t120634*t120627*t120569*2.0+(1.0/(t120621*t120621)*t120615* \
                   t120634*t120627*t120569*t120597*(b2a*c*t120566*(1.0/3.0)+b4a*t120604*t120519*(2.0/3.0)+b1a*c*t120605* \
                   t120566*(1.0/6.0)+b3a*c*t120566*t120558*(1.0/2.0)))/t120624-Aa*a1a*c*t120615*t120625*t120634*t120566* \
                   t120569*t120597*(2.0/3.0))+rho_a[index]*(t120782-t120659+t120637*t120569*(t120781+t120659-t120780* \
                   t120639*t120774*t120775-a1p*c*c0p*t120530*t120648*(2.0/3.0)))-t120637*t120684*t120569)*(ccab1*gcab* \
                   t120533*t120704*(1.0/2.0)-ccab4*t120713*t120670*t120671*t120718-ccab1*t120533*t120706*t120665*t120668* \
                   (1.0/2.0)-ccab2*t120710*t120724*t120668*t120669+ccab2*t120533*t120707*t120665*t120668+ccab4*t120712* \
                   t120533*t120670*t120665*t120669*2.0+ccab3*gcab*t120711*t120533*t120668*t120669*(3.0/2.0)-ccab3*gcab* \
                   t120733*t120708*t120665*t120668*t120669)-rho_a[index]*t120739*(ccaa1*gcaa*t120740*t120705*(-8.0/3.0) \
                   -ccaa2*gamma_aa[index]*t120535*t120742*t120709*(3.2E1/3.0)+ccaa1*gamma_aa[index]*t120535*t120744*t120709* \
                   8.0+ccaa2*t120534*t120535*t120761*t120709*t120747*(1.6E1/3.0)+ccaa4*t120536*t120752*t120546*t120753* \
                   t120758*(3.2E1/3.0)+ccaa4*t120536*t120537*t120546*t120753*(gcaa*t120705*(3.2E1/3.0)+gamma_aa[index]* \
                   t120535*t120709*6.4E1+gamma_aa[index]*t120534*t120536*t120752*(1.28E2/3.0)+gcaa*t120534*t120535*t120745* \
                   9.6E1)-ccaa1*gcaa*1.0/(t120541*t120541*t120541)*t120534*t120535*t120745*(1.6E1/3.0)+ccaa2*t120534* \
                   t120535*t120538*t120747*(gcaa*t120705*(1.6E1/3.0)+gamma_aa[index]*t120535*t120709*(3.2E1/3.0))-ccaa4* \
                   gamma_aa[index]*t120534*t120741*t120536*t120752*(1.28E2/3.0)+ccaa2*gamma_aa[index]*t120535*t120538* \
                   t120764*t120747*2.0-ccaa3*gcaa*t120534*t120535*t120743*t120745*2.4E1+ccaa4*gamma_aa[index]*t120534* \
                   t120536*t120537*t120753*t120773*4.0+ccaa3*gcaa*t120534*t120535*t120539*t120746*t120768*3.0-ccaa2*t120534* \
                   t120535*1.0/(t120554*t120554*t120554)*t120761*t120538*t120764*2.0-ccaa4*1.0/(t120551*t120551*t120551) \
                   *t120536*t120537*t120546*t120773*t120758*2.0+ccaa3*gamma_aa[index]*gcaa*t120534*t120535*t120539*t120746* \
                   (gcaa*t120705*8.0+gamma_aa[index]*t120535*t120709*3.2E1+gcaa*t120534*t120535*t120745*2.4E1)+ccaa3* \
                   gamma_aa[index]*gcaa*t120534*t120535*t120751*t120745*t120746*8.0-ccaa3*gamma_aa[index]*gcaa*t120534* \
                   t120535*t120751*1.0/(t120545*t120545*t120545)*t120539*t120768*2.0)+rho_a[index]*t120787*(t120782-t120659+ \
                   t120637*t120569*(t120781-t120782+t120659-t120780*t120639*t120774*t120775))-c0*t120847*t120848*(omega* \
                   t120792*(omega*t120797*t120799*(-2.778046668940015E15/1.40737488355328E14)+omega*t120792*((t120791* \
                   (1.0/3.0))/rho_a[index]+t120794*t120795*1.0/pow(t120788,5.0/3.0)*(2.778046668940015E15/1.40737488355328E14) \
                   -t120791*t120792*t120789*(2.778046668940015E15/7.0368744177664E13))+1.0/sqrt(3.141592653589793)*t120791* \
                   t120796*t120798*(1.108777112152858E31/1.584563250285287E29))*(4.0/3.0)-omega*t120822*t120797*(2.778046668940015E15/ \
                   1.05553116266496E14))-c0*t120850*t120848*(cx1*gx*t120705*t120823*(-8.0/3.0)+cx1*gamma_aa[index]*t120800* \
                   t120831*t120709*8.0-cx2*gamma_aa[index]*t120800*t120709*t120827*(3.2E1/3.0)+cx2*t120800*t120534*t120709* \
                   t120845*t120846*(1.6E1/3.0)+cx4*t120801*t120841*t120752*t120842*t120546*(3.2E1/3.0)+cx4*t120801*t120842* \
                   t120537*t120546*(gx*t120705*(3.2E1/3.0)+gamma_aa[index]*t120800*t120709*6.4E1+gamma_aa[index]*t120801* \
                   t120534*t120752*(1.28E2/3.0)+gx*t120800*t120534*t120745*9.6E1)-cx1*gx*t120800*1.0/(t120803*t120803* \
                   t120803)*t120534*t120745*(1.6E1/3.0)+cx2*t120800*t120534*t120538*t120846*(gx*t120705*(1.6E1/3.0)+gamma_aa[index]* \
                   t120800*t120709*(3.2E1/3.0))+cx2*gamma_aa[index]*t120800*t120538*t120853*t120846*2.0-cx4*gamma_aa[index]* \
                   t120801*t120534*t120752*t120825*(1.28E2/3.0)-cx3*gx*t120800*t120534*t120745*t120829*2.4E1+cx4*gamma_aa[index]* \
                   t120801*t120534*t120842*t120537*t120862*4.0+cx3*gx*t120800*t120534*t120539*t120836*t120857*3.0-cx2* \
                   t120800*t120534*1.0/(t120815*t120815*t120815)*t120538*t120853*t120845*2.0-cx4*t120801*1.0/(t120812* \
                   t120812*t120812)*t120841*t120537*t120546*t120862*2.0+cx3*gamma_aa[index]*gx*t120800*t120534*t120539* \
                   t120836*(gx*t120705*8.0+gamma_aa[index]*t120800*t120709*3.2E1+gx*t120800*t120534*t120745*2.4E1)+cx3* \
                   gamma_aa[index]*gx*t120800*t120534*t120745*t120835*t120836*8.0-cx3*gamma_aa[index]*gx*t120800*t120534* \
                   1.0/(t120807*t120807*t120807)*t120835*t120539*t120857*2.0)-c0*pow(rho_a[index],1.0/3.0)*t120850*t120847* \
                   (4.0/3.0);
            } else if (rho_a[index] > cutoff_) {
                double t123354 = 1.0/pow(rho_a[index],1.0/3.0);
                double t123355 = c*t123354;
                double t123356 = sqrt(t123355);
                double t123357 = pow(t123355,3.0/2.0);
                double t123358 = c*c;
                double t123359 = 1.0/pow(rho_a[index],2.0/3.0);
                double t123360 = 1.0/c0p;
                double t123361 = b1p*t123356;
                double t123362 = b3p*t123357;
                double t123363 = b4p*t123358*t123359;
                double t123364 = b2p*c*t123354;
                double t123365 = t123361+t123362+t123363+t123364;
                double t123366 = 1.0/t123365;
                double t123367 = t123360*t123366*(1.0/2.0);
                double t123368 = t123367+1.0;
                double t123369 = log(t123368);
                double t123370 = a1p*c*t123354;
                double t123371 = t123370+1.0;
                double t123372 = 1.0/pow(rho_a[index],8.0/3.0);
                double t123373 = gamma_aa[index]*gamma_aa[index];
                double t123374 = gcaa*gcaa;
                double t123375 = t123374*t123374;
                double t123376 = 1.0/pow(rho_a[index],3.2E1/3.0);
                double t123377 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t123378 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t123379 = gamma_aa[index]*gcaa*t123372;
                double t123380 = t123379+1.0;
                double t123381 = gamma_aa[index]*gcaa*t123372*3.0;
                double t123382 = gamma_aa[index]*gcaa*t123373*t123374*t123378;
                double t123383 = t123373*t123374*t123377*3.0;
                double t123384 = t123381+t123382+t123383+1.0;
                double t123385 = t123373*t123373;
                double t123386 = gamma_aa[index]*gcaa*t123372*4.0;
                double t123387 = gamma_aa[index]*gcaa*t123373*t123374*t123378*4.0;
                double t123388 = t123373*t123374*t123377*6.0;
                double t123389 = t123375*t123376*t123385;
                double t123390 = t123386+t123387+t123388+t123389+1.0;
                double t123391 = gamma_aa[index]*gcaa*t123372*2.0;
                double t123392 = t123373*t123374*t123377;
                double t123393 = t123391+t123392+1.0;
                double t123394 = pow(2.0,1.0/3.0);
                double t123395 = t123394*2.0;
                double t123396 = t123395-2.0;
                double t123397 = two_13*2.0;
                double t123398 = t123397-2.0;
                double t123399 = 1.0/t123398;
                double t123400 = 1.0/c0f;
                double t123401 = b1f*t123356;
                double t123402 = b3f*t123357;
                double t123403 = b4f*t123358*t123359;
                double t123404 = b2f*c*t123354;
                double t123405 = t123401+t123402+t123403+t123404;
                double t123406 = 1.0/t123405;
                double t123407 = t123400*t123406*(1.0/2.0);
                double t123408 = t123407+1.0;
                double t123409 = log(t123408);
                double t123410 = a1f*c*t123354;
                double t123411 = t123410+1.0;
                double t123412 = c0f*t123411*t123409*2.0;
                double t123413 = c0p*t123371*t123369*2.0;
                double t123414 = 1.0/t123380;
                double t123415 = 1.0/t123390;
                double t123416 = 1.0/t123393;
                double t123417 = 1.0/t123384;
                double t123418 = 1.0/pow(rho_a[index],1.9E1/3.0);
                double t123419 = 1.0/(t123380*t123380);
                double t123420 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]*rho_a[index]);
                double t123421 = 1.0/pow(rho_a[index],1.1E1/3.0);
                double t123422 = 1.0/(t123384*t123384);
                double t123423 = 1.0/(t123393*t123393);
                double t123424 = gcaa*t123372*3.0;
                double t123425 = gamma_aa[index]*t123374*t123377*6.0;
                double t123426 = gcaa*t123373*t123374*t123378*3.0;
                double t123427 = t123424+t123425+t123426;
                double t123428 = 1.0/pow(rho_a[index],3.5E1/3.0);
                double t123429 = 1.0/(t123390*t123390);
                double t123430 = gcaa*t123372*4.0;
                double t123431 = gamma_aa[index]*t123374*t123377*1.2E1;
                double t123432 = gcaa*t123373*t123374*t123378*1.2E1;
                double t123433 = gamma_aa[index]*t123373*t123375*t123376*4.0;
                double t123434 = t123430+t123431+t123432+t123433;
                double t123435 = gcaa*t123372*2.0;
                double t123436 = gamma_aa[index]*t123374*t123377*2.0;
                double t123437 = t123435+t123436;
                double t123438 = gamma_aa[index]*gcaa*t123421*(1.6E1/3.0);
                double t123439 = t123373*t123418*t123374*(1.6E1/3.0);
                double t123440 = t123438+t123439;
                double t123441 = gamma_aa[index]*gcaa*t123421*8.0;
                double t123442 = gamma_aa[index]*gcaa*t123420*t123373*t123374*8.0;
                double t123443 = t123373*t123418*t123374*1.6E1;
                double t123444 = t123441+t123442+t123443;
                double t123445 = gamma_aa[index]*gcaa*t123421*(3.2E1/3.0);
                double t123446 = gamma_aa[index]*gcaa*t123420*t123373*t123374*3.2E1;
                double t123447 = t123373*t123418*t123374*3.2E1;
                double t123448 = t123428*t123375*t123385*(3.2E1/3.0);
                double t123449 = t123445+t123446+t123447+t123448;
                double t123450 = 1.0/pow(rho_a[index],4.0/3.0);
                double t123451 = 1.0/pow(rho_a[index],5.0/3.0);
                double t123452 = 1.0/sqrt(t123355);
                double t123453 = 1.0/t123368;
                double t123454 = 1.0/(t123365*t123365);
                double t123455 = b4p*t123451*t123358*(2.0/3.0);
                double t123456 = b2p*c*t123450*(1.0/3.0);
                double t123457 = b1p*c*t123450*t123452*(1.0/6.0);
                double t123458 = b3p*c*t123450*t123356*(1.0/2.0);
                double t123459 = t123455+t123456+t123457+t123458;
                double t123460 = t123371*t123453*t123454*t123459;
                double t123461 = ccaa1*gcaa*t123414*t123372;
                double t123462 = ccaa4*gamma_aa[index]*t123415*t123373*t123375*t123376*4.0;
                double t123463 = ccaa2*gamma_aa[index]*t123416*t123374*t123377*2.0;
                double t123464 = ccaa3*gcaa*t123417*t123373*t123374*t123378*3.0;
                double t123465 = t123461+t123462+t123463+t123464-ccaa1*gamma_aa[index]*t123374*t123419*t123377-ccaa2* \
                   t123423*t123373*t123374*t123437*t123377-ccaa4*t123434*t123375*t123429*t123376*t123385-ccaa3*gamma_aa[index]* \
                   gcaa*t123422*t123373*t123427*t123374*t123378;
                double t123466 = rho_a[index]*(8.334140006820045E15/1.40737488355328E14);
                double t123467 = 1.0/(omega*omega);
                double t123468 = pow(t123466,2.0/3.0);
                double t123471 = t123467*t123468;
                double t123469 = exp(-t123471);
                double t123470 = 1.0/pow(t123466,1.0/3.0);
                double t123472 = omega*omega;
                double t123473 = t123469-1.0;
                double t123474 = 1.0/pow(t123466,2.0/3.0);
                double t123475 = 1.0/pow(t123466,4.0/3.0);
                double t123476 = 1.0/omega;
                double t123498 = t123472*t123473*t123474*(1.0/2.0);
                double t123477 = t123469-t123498;
                double t123478 = gx*gx;
                double t123479 = t123478*t123478;
                double t123480 = gamma_aa[index]*gx*t123372;
                double t123481 = t123480+1.0;
                double t123482 = gamma_aa[index]*gx*t123372*3.0;
                double t123483 = gamma_aa[index]*gx*t123373*t123378*t123478;
                double t123484 = t123373*t123377*t123478*3.0;
                double t123485 = t123482+t123483+t123484+1.0;
                double t123486 = gamma_aa[index]*gx*t123372*4.0;
                double t123487 = gamma_aa[index]*gx*t123373*t123378*t123478*4.0;
                double t123488 = t123373*t123377*t123478*6.0;
                double t123489 = t123376*t123385*t123479;
                double t123490 = t123486+t123487+t123488+t123489+1.0;
                double t123491 = gamma_aa[index]*gx*t123372*2.0;
                double t123492 = t123373*t123377*t123478;
                double t123493 = t123491+t123492+1.0;
                double t123494 = pow(t123466,1.0/3.0);
                double t123495 = t123476*t123494;
                double t123496 = erf(t123495);
                double t123497 = t123496*(3.991211251234741E15/2.251799813685248E15);
                double t123499 = omega*t123470*t123477;
                double t123500 = t123497+t123499;
                double t123501 = 1.0/t123481;
                double t123502 = cx1*gx*t123501*t123372;
                double t123503 = 1.0/t123490;
                double t123504 = cx4*gamma_aa[index]*t123503*t123373*t123376*t123479*4.0;
                double t123505 = 1.0/t123493;
                double t123506 = cx2*gamma_aa[index]*t123505*t123377*t123478*2.0;
                double t123507 = 1.0/t123485;
                double t123508 = cx3*gx*t123507*t123373*t123378*t123478*3.0;
                double t123509 = 1.0/(t123481*t123481);
                double t123510 = gx*t123372*3.0;
                double t123511 = gamma_aa[index]*t123377*t123478*6.0;
                double t123512 = gx*t123373*t123378*t123478*3.0;
                double t123513 = t123510+t123511+t123512;
                double t123514 = 1.0/(t123485*t123485);
                double t123515 = gx*t123372*4.0;
                double t123516 = gamma_aa[index]*t123377*t123478*1.2E1;
                double t123517 = gx*t123373*t123378*t123478*1.2E1;
                double t123518 = gamma_aa[index]*t123373*t123376*t123479*4.0;
                double t123519 = t123515+t123516+t123517+t123518;
                double t123520 = 1.0/(t123490*t123490);
                double t123521 = gx*t123372*2.0;
                double t123522 = gamma_aa[index]*t123377*t123478*2.0;
                double t123523 = t123521+t123522;
                double t123524 = 1.0/(t123493*t123493);
                double t123525 = t123502+t123504+t123506+t123508-cx1*gamma_aa[index]*t123509*t123377*t123478-cx2* \
                   t123523*t123524*t123373*t123377*t123478-cx4*t123520*t123519*t123376*t123385*t123479-cx3*gamma_aa[index]* \
                   gx*t123513*t123514*t123373*t123378*t123478;
                double t123526 = pow(rho_a[index],4.0/3.0);
                double t123527 = omega*t123500*t123470*(4.0/3.0);
                double t123528 = t123527-1.0;
                double t123529 = gamma_aa[index]*gx*t123421*(1.6E1/3.0);
                double t123530 = t123373*t123418*t123478*(1.6E1/3.0);
                double t123531 = t123530+t123529;
                double t123532 = gamma_aa[index]*gx*t123421*8.0;
                double t123533 = gamma_aa[index]*gx*t123420*t123373*t123478*8.0;
                double t123534 = t123373*t123418*t123478*1.6E1;
                double t123535 = t123532+t123533+t123534;
                double t123536 = gamma_aa[index]*gx*t123421*(3.2E1/3.0);
                double t123537 = gamma_aa[index]*gx*t123420*t123373*t123478*3.2E1;
                double t123538 = t123373*t123418*t123478*3.2E1;
                double t123539 = t123428*t123385*t123479*(3.2E1/3.0);
                double t123540 = t123536+t123537+t123538+t123539;
                v_rho_a_gamma_aa_[index] = -t123465*(t123413+t123396*t123399*(t123412-c0p*t123371*t123369*2.0))+rho_a[index]* \
                   t123465*(-t123460+t123396*t123399*(t123460-(t123411*1.0/(t123405*t123405)*(b2f*c*t123450*(1.0/3.0) \
                   +b4f*t123451*t123358*(2.0/3.0)+b1f*c*t123450*t123452*(1.0/6.0)+b3f*c*t123450*t123356*(1.0/2.0)))/t123408+ \
                   a1f*c*c0f*t123450*t123409*(2.0/3.0)-a1p*c*c0p*t123450*t123369*(2.0/3.0))+a1p*c*c0p*t123450*t123369* \
                   (2.0/3.0))-rho_a[index]*(t123413+t123396*t123399*(t123412-t123413))*(ccaa1*gcaa*t123421*t123414*(- \
                   8.0/3.0)-ccaa2*gamma_aa[index]*t123416*t123418*t123374*(3.2E1/3.0)+ccaa1*gamma_aa[index]*t123418*t123374* \
                   t123419*8.0+ccaa2*t123423*t123373*t123418*t123374*t123437*(1.6E1/3.0)+ccaa4*t123434*t123428*t123375* \
                   t123429*t123385*(3.2E1/3.0)+ccaa4*t123375*t123429*t123376*t123385*(gcaa*t123421*(3.2E1/3.0)+gamma_aa[index]* \
                   t123418*t123374*6.4E1+gamma_aa[index]*t123373*t123428*t123375*(1.28E2/3.0)+gcaa*t123420*t123373*t123374* \
                   9.6E1)-ccaa1*gcaa*t123420*1.0/(t123380*t123380*t123380)*t123373*t123374*(1.6E1/3.0)+ccaa2*t123423* \
                   t123373*t123374*t123377*(gcaa*t123421*(1.6E1/3.0)+gamma_aa[index]*t123418*t123374*(3.2E1/3.0))+ccaa2* \
                   gamma_aa[index]*t123440*t123423*t123374*t123377*2.0-ccaa4*gamma_aa[index]*t123415*t123373*t123428* \
                   t123375*(1.28E2/3.0)-ccaa3*gcaa*t123420*t123417*t123373*t123374*2.4E1+ccaa4*gamma_aa[index]*t123373* \
                   t123375*t123429*t123376*t123449*4.0+ccaa3*gcaa*t123422*t123444*t123373*t123374*t123378*3.0-ccaa2*t123440* \
                   t123373*t123374*t123437*1.0/(t123393*t123393*t123393)*t123377*2.0-ccaa4*t123434*1.0/(t123390*t123390* \
                   t123390)*t123375*t123376*t123385*t123449*2.0+ccaa3*gamma_aa[index]*gcaa*t123422*t123373*t123374*t123378* \
                   (gcaa*t123421*8.0+gamma_aa[index]*t123418*t123374*3.2E1+gcaa*t123420*t123373*t123374*2.4E1)+ccaa3* \
                   gamma_aa[index]*gcaa*t123420*t123422*t123373*t123427*t123374*8.0-ccaa3*gamma_aa[index]*gcaa*t123444* \
                   t123373*t123427*t123374*1.0/(t123384*t123384*t123384)*t123378*2.0)-c0*t123525*t123526*(omega*t123470* \
                   (omega*t123475*t123477*(-2.778046668940015E15/1.40737488355328E14)+omega*t123470*((t123469*(1.0/3.0) \
                   )/rho_a[index]+t123472*t123473*1.0/pow(t123466,5.0/3.0)*(2.778046668940015E15/1.40737488355328E14) \
                   -t123470*t123467*t123469*(2.778046668940015E15/7.0368744177664E13))+1.0/sqrt(3.141592653589793)*t123474* \
                   t123476*t123469*(1.108777112152858E31/1.584563250285287E29))*(4.0/3.0)-omega*t123500*t123475*(2.778046668940015E15/ \
                   1.05553116266496E14))-c0*t123526*t123528*(cx1*gx*t123501*t123421*(-8.0/3.0)+cx1*gamma_aa[index]*t123418* \
                   t123509*t123478*8.0-cx2*gamma_aa[index]*t123505*t123418*t123478*(3.2E1/3.0)+cx2*t123523*t123524*t123373* \
                   t123418*t123478*(1.6E1/3.0)+cx4*t123520*t123428*t123519*t123385*t123479*(3.2E1/3.0)+cx4*t123520*t123376* \
                   t123385*t123479*(gx*t123421*(3.2E1/3.0)+gamma_aa[index]*t123418*t123478*6.4E1+gamma_aa[index]*t123373* \
                   t123428*t123479*(1.28E2/3.0)+gx*t123420*t123373*t123478*9.6E1)-cx1*gx*t123420*t123373*1.0/(t123481* \
                   t123481*t123481)*t123478*(1.6E1/3.0)+cx2*t123524*t123373*t123377*t123478*(gx*t123421*(1.6E1/3.0)+gamma_aa[index]* \
                   t123418*t123478*(3.2E1/3.0))+cx2*gamma_aa[index]*t123531*t123524*t123377*t123478*2.0-cx4*gamma_aa[index]* \
                   t123503*t123373*t123428*t123479*(1.28E2/3.0)-cx3*gx*t123420*t123507*t123373*t123478*2.4E1+cx4*gamma_aa[index]* \
                   t123520*t123540*t123373*t123376*t123479*4.0+cx3*gx*t123514*t123373*t123535*t123378*t123478*3.0-cx2* \
                   t123531*t123523*t123373*1.0/(t123493*t123493*t123493)*t123377*t123478*2.0-cx4*t123540*1.0/(t123490* \
                   t123490*t123490)*t123519*t123376*t123385*t123479*2.0+cx3*gamma_aa[index]*gx*t123514*t123373*t123378* \
                   t123478*(gx*t123421*8.0+gamma_aa[index]*t123418*t123478*3.2E1+gx*t123420*t123373*t123478*2.4E1)+cx3* \
                   gamma_aa[index]*gx*t123420*t123513*t123514*t123373*t123478*8.0-cx3*gamma_aa[index]*gx*t123513*t123373* \
                   t123535*1.0/(t123485*t123485*t123485)*t123378*t123478*2.0)-c0*pow(rho_a[index],1.0/3.0)*t123525*t123528* \
                   (4.0/3.0);
            } else if (rho_b[index] > cutoff_) {
                v_rho_a_gamma_aa_[index] = 0.0;
            } else {
                v_rho_a_gamma_aa_[index] = 0.0;
            } 

            //V_rho_a_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_a_gamma_ab_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_a_gamma_ab_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_a_gamma_ab_[index] = 0.0;
            } else {
                v_rho_a_gamma_ab_[index] = 0.0;
            } 

            //V_rho_a_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t120865 = rho_a[index]+rho_b[index];
                double t120866 = 1.0/pow(t120865,1.0/3.0);
                double t120867 = c*t120866;
                double t120868 = sqrt(t120867);
                double t120869 = b1p*t120868;
                double t120870 = pow(t120867,3.0/2.0);
                double t120871 = b3p*t120870;
                double t120872 = c*c;
                double t120873 = 1.0/pow(t120865,2.0/3.0);
                double t120874 = b4p*t120872*t120873;
                double t120875 = b2p*c*t120866;
                double t120876 = t120871+t120874+t120875+t120869;
                double t120877 = 1.0/pow(t120865,4.0/3.0);
                double t120878 = 1.0/c0p;
                double t120879 = 1.0/t120876;
                double t120880 = t120878*t120879*(1.0/2.0);
                double t120881 = t120880+1.0;
                double t120882 = a1p*c*t120866;
                double t120883 = t120882+1.0;
                double t120884 = rho_a[index]-rho_b[index];
                double t120885 = t120884*t120884;
                double t120886 = 1.0/t120865;
                double t120887 = t120884*t120886;
                double t120888 = two_13*2.0;
                double t120889 = t120888-2.0;
                double t120890 = 1.0/t120889;
                double t120891 = 1.0/c0f;
                double t120892 = b1f*t120868;
                double t120893 = b3f*t120870;
                double t120894 = b4f*t120872*t120873;
                double t120895 = b2f*c*t120866;
                double t120896 = t120892+t120893+t120894+t120895;
                double t120897 = 1.0/t120896;
                double t120898 = t120891*t120897*(1.0/2.0);
                double t120899 = t120898+1.0;
                double t120900 = log(t120899);
                double t120901 = a1f*c*t120866;
                double t120902 = t120901+1.0;
                double t120903 = log(t120881);
                double t120913 = c0f*t120900*t120902*2.0;
                double t120914 = c0p*t120903*t120883*2.0;
                double t120904 = t120913-t120914;
                double t120905 = t120887+1.0;
                double t120906 = pow(t120905,4.0/3.0);
                double t120907 = -t120887+1.0;
                double t120908 = pow(t120907,4.0/3.0);
                double t120909 = t120906+t120908-2.0;
                double t120910 = 1.0/(t120865*t120865);
                double t120941 = t120910*t120884;
                double t120911 = -t120941+t120886;
                double t120912 = 1.0/(t120865*t120865*t120865*t120865);
                double t120915 = t120885*t120885;
                double t120916 = 1.0/pow(t120865,5.0/3.0);
                double t120917 = 1.0/sqrt(t120867);
                double t120918 = 1.0/t120881;
                double t120919 = 1.0/(t120876*t120876);
                double t120920 = b4p*t120916*t120872*(2.0/3.0);
                double t120921 = b2p*c*t120877*(1.0/3.0);
                double t120922 = b1p*c*t120917*t120877*(1.0/6.0);
                double t120923 = b3p*c*t120868*t120877*(1.0/2.0);
                double t120924 = t120920+t120921+t120922+t120923;
                double t120925 = t120924*t120918*t120883*t120919;
                double t120926 = 1.0/(t120865*t120865*t120865*t120865*t120865);
                double t120927 = 1.0/d2fz0;
                double t120928 = 1.0/Aa;
                double t120929 = b1a*t120868;
                double t120930 = b3a*t120870;
                double t120931 = b4a*t120872*t120873;
                double t120932 = b2a*c*t120866;
                double t120933 = t120930+t120931+t120932+t120929;
                double t120934 = 1.0/t120933;
                double t120935 = t120934*t120928*(1.0/2.0);
                double t120936 = t120935+1.0;
                double t120937 = log(t120936);
                double t120938 = a1a*c*t120866;
                double t120939 = t120938+1.0;
                double t120940 = pow(t120905,1.0/3.0);
                double t120942 = t120911*t120940*(4.0/3.0);
                double t120943 = pow(t120907,1.0/3.0);
                double t120944 = t120942-t120911*t120943*(4.0/3.0);
                double t120945 = t120912*t120915;
                double t120946 = t120945-1.0;
                double t120947 = 1.0/pow(rho_a[index],1.0/3.0);
                double t120948 = c*t120947;
                double t120949 = sqrt(t120948);
                double t120950 = b1f*t120949;
                double t120951 = pow(t120948,3.0/2.0);
                double t120952 = b3f*t120951;
                double t120953 = 1.0/pow(rho_a[index],2.0/3.0);
                double t120954 = b4f*t120872*t120953;
                double t120955 = b2f*c*t120947;
                double t120956 = t120950+t120952+t120954+t120955;
                double t120957 = 1.0/pow(rho_a[index],4.0/3.0);
                double t120958 = b1p*t120949;
                double t120959 = b3p*t120951;
                double t120960 = b4p*t120872*t120953;
                double t120961 = b2p*c*t120947;
                double t120962 = t120960+t120961+t120958+t120959;
                double t120963 = 1.0/pow(rho_a[index],5.0/3.0);
                double t120964 = 1.0/sqrt(t120948);
                double t120965 = 1.0/t120956;
                double t120966 = t120891*t120965*(1.0/2.0);
                double t120967 = t120966+1.0;
                double t120968 = 1.0/t120962;
                double t120969 = t120878*t120968*(1.0/2.0);
                double t120970 = t120969+1.0;
                double t120971 = a1p*c*t120947;
                double t120972 = t120971+1.0;
                double t120973 = 1.0/t120970;
                double t120974 = 1.0/(t120962*t120962);
                double t120975 = b4p*t120872*t120963*(2.0/3.0);
                double t120976 = b2p*c*t120957*(1.0/3.0);
                double t120977 = b1p*c*t120964*t120957*(1.0/6.0);
                double t120978 = b3p*c*t120957*t120949*(1.0/2.0);
                double t120979 = t120975+t120976+t120977+t120978;
                double t120980 = t120972*t120973*t120974*t120979;
                double t120981 = log(t120970);
                double t120982 = pow(2.0,1.0/3.0);
                double t120983 = t120982*2.0;
                double t120984 = t120983-2.0;
                double t120985 = log(t120967);
                double t120986 = a1f*c*t120947;
                double t120987 = t120986+1.0;
                double t120988 = 1.0/pow(rho_b[index],8.0/3.0);
                double t120989 = 1.0/pow(rho_a[index],8.0/3.0);
                double t120990 = gamma_aa[index]*t120989*(1.0/2.0);
                double t120991 = gamma_bb[index]*t120988*(1.0/2.0);
                double t120992 = t120990+t120991;
                double t120993 = gcab*t120992;
                double t120994 = t120993+1.0;
                double t120995 = gcab*gcab;
                double t120996 = t120992*t120992;
                double t120997 = t120995*t120995;
                double t120998 = t120996*t120996;
                double t120999 = t120995*t120996;
                double t121000 = gcab*t120992*2.0;
                double t121001 = t121000+t120999+1.0;
                double t121002 = t120995*t120996*3.0;
                double t121003 = gcab*t120992*t120995*t120996;
                double t121004 = gcab*t120992*3.0;
                double t121005 = t121002+t121003+t121004+1.0;
                double t121006 = t120995*t120996*6.0;
                double t121007 = gcab*t120992*t120995*t120996*4.0;
                double t121008 = t120997*t120998;
                double t121009 = gcab*t120992*4.0;
                double t121010 = t121006+t121007+t121008+t121009+1.0;
                double t121011 = c0f*t120985*t120987*2.0;
                double t121013 = c0p*t120972*t120981*2.0;
                double t121012 = t121011-t121013;
                double t121014 = 1.0/pow(rho_b[index],1.0/3.0);
                double t121015 = c*t121014;
                double t121016 = sqrt(t121015);
                double t121017 = pow(t121015,3.0/2.0);
                double t121018 = 1.0/pow(rho_b[index],2.0/3.0);
                double t121019 = b1p*t121016;
                double t121020 = b3p*t121017;
                double t121021 = b4p*t121018*t120872;
                double t121022 = b2p*c*t121014;
                double t121023 = t121020+t121021+t121022+t121019;
                double t121024 = 1.0/t121023;
                double t121025 = t121024*t120878*(1.0/2.0);
                double t121026 = t121025+1.0;
                double t121027 = log(t121026);
                double t121028 = a1p*c*t121014;
                double t121029 = t121028+1.0;
                double t121030 = c0p*t121027*t121029*2.0;
                double t121031 = t120912*t120904*t120915*t120890*t120909;
                double t121032 = Aa*t120890*t120909*t120927*t120937*t120946*t120939*2.0;
                double t121033 = 1.0/pow(rho_a[index],1.1E1/3.0);
                double t121034 = 1.0/(t121005*t121005);
                double t121035 = 1.0/(t121010*t121010);
                double t121036 = gcab*t120988*2.0;
                double t121037 = t120992*t120995*t120988*6.0;
                double t121038 = gcab*t120995*t120996*t120988*6.0;
                double t121039 = t120992*t120996*t120988*t120997*2.0;
                double t121040 = t121036+t121037+t121038+t121039;
                double t121041 = 1.0/(t121001*t121001);
                double t121042 = gamma_aa[index]*gcab*t121033*(8.0/3.0);
                double t121043 = gamma_aa[index]*t121033*t120992*t120995*(8.0/3.0);
                double t121044 = t121042+t121043;
                double t121045 = gcab*t120988;
                double t121046 = t120992*t120995*t120988;
                double t121047 = t121045+t121046;
                double t121048 = gamma_aa[index]*gcab*t121033*(1.6E1/3.0);
                double t121049 = gamma_aa[index]*gcab*t121033*t120995*t120996*1.6E1;
                double t121050 = gamma_aa[index]*t121033*t120992*t120996*t120997*(1.6E1/3.0);
                double t121051 = gamma_aa[index]*t121033*t120992*t120995*1.6E1;
                double t121052 = t121050+t121051+t121048+t121049;
                double t121053 = 1.0/(t120994*t120994);
                double t121054 = 1.0/t121001;
                double t121055 = gcab*t120988*(3.0/2.0);
                double t121056 = t120992*t120995*t120988*3.0;
                double t121057 = gcab*t120995*t120996*t120988*(3.0/2.0);
                double t121058 = t121055+t121056+t121057;
                double t121059 = gamma_aa[index]*gcab*t121033*4.0;
                double t121060 = gamma_aa[index]*gcab*t121033*t120995*t120996*4.0;
                double t121061 = gamma_aa[index]*t121033*t120992*t120995*8.0;
                double t121062 = t121060+t121061+t121059;
                double t121063 = 1.0/t121005;
                double t121064 = 1.0/t121010;
                v_rho_a_gamma_bb_[index] = -(t121031+t121032+t120914+t120865*(t120925-t120912*t120915*t120890*t120909* \
                   (t120925-(t120902*1.0/(t120896*t120896)*(b2f*c*t120877*(1.0/3.0)+b4f*t120916*t120872*(2.0/3.0)+b1f* \
                   c*t120917*t120877*(1.0/6.0)+b3f*c*t120868*t120877*(1.0/2.0)))/t120899+a1f*c*c0f*t120900*t120877*(2.0/ \
                   3.0)-a1p*c*c0p*t120903*t120877*(2.0/3.0))-a1p*c*c0p*t120903*t120877*(2.0/3.0)+t120912*t120904*t120915* \
                   t120890*t120944-t120904*t120915*t120890*t120926*t120909*4.0+t120912*t120904*t120890*t120909*t120884* \
                   t120885*4.0-Aa*t120890*t120909*t120927*t120937*t120939*(t120915*t120926*4.0-t120912*t120884*t120885* \
                   4.0)*2.0+Aa*t120890*t120944*t120927*t120937*t120946*t120939*2.0+(1.0/(t120933*t120933)*t120890*t120909* \
                   t120927*t120946*t120939*(b2a*c*t120877*(1.0/3.0)+b4a*t120916*t120872*(2.0/3.0)+b1a*c*t120917*t120877* \
                   (1.0/6.0)+b3a*c*t120868*t120877*(1.0/2.0)))/t120936-Aa*a1a*c*t120890*t120909*t120927*t120937*t120946* \
                   t120877*(2.0/3.0))+rho_a[index]*(-t120980+t120890*t120984*(t120980-(1.0/(t120956*t120956)*t120987* \
                   (b2f*c*t120957*(1.0/3.0)+b4f*t120872*t120963*(2.0/3.0)+b1f*c*t120964*t120957*(1.0/6.0)+b3f*c*t120957* \
                   t120949*(1.0/2.0)))/t120967+a1f*c*c0f*t120957*t120985*(2.0/3.0)-a1p*c*c0p*t120981*t120957*(2.0/3.0) \
                   )+a1p*c*c0p*t120981*t120957*(2.0/3.0))-c0p*t120972*t120981*2.0-t121012*t120890*t120984)*((ccab1*gcab* \
                   t120988*(1.0/2.0))/t120994-ccab2*t121041*t121047*t120995*t120996-ccab4*t121040*t121035*t120997*t120998- \
                   ccab1*t121053*t120992*t120995*t120988*(1.0/2.0)+ccab2*t121054*t120992*t120995*t120988+ccab4*t121064* \
                   t120992*t120996*t120988*t120997*2.0+ccab3*gcab*t121063*t120995*t120996*t120988*(3.0/2.0)-ccab3*gcab* \
                   t121034*t121058*t120992*t120995*t120996)+(rho_a[index]*(t121013+t121012*t120890*t120984)+rho_b[index]* \
                   (t121030-t120890*t120984*(t121030-c0f*log((t120891*(1.0/2.0))/(b1f*t121016+b3f*t121017+b2f*c*t121014+ \
                   b4f*t121018*t120872)+1.0)*(a1f*c*t121014+1.0)*2.0))-t120865*(t121031+t121032+t120914))*(ccab4*t121035* \
                   t120997*t120998*(gamma_aa[index]*t121033*t120995*t120988*8.0+gamma_aa[index]*t121033*t120996*t120988* \
                   t120997*8.0+gamma_aa[index]*gcab*t121033*t120992*t120995*t120988*1.6E1)+ccab2*t121041*t121044*t120992* \
                   t120995*t120988-ccab4*1.0/(t121010*t121010*t121010)*t121040*t121052*t120997*t120998*2.0-ccab2*1.0/ \
                   (t121001*t121001*t121001)*t121044*t121047*t120995*t120996*2.0+ccab1*gamma_aa[index]*t121033*t121053* \
                   t120995*t120988*(4.0/3.0)-ccab2*gamma_aa[index]*t121033*t121054*t120995*t120988*(4.0/3.0)+ccab2*gamma_aa[index]* \
                   t121041*t121033*t121047*t120992*t120995*(8.0/3.0)+ccab2*gamma_aa[index]*t121041*t121033*t120996*t120988* \
                   t120997*(4.0/3.0)-ccab4*gamma_aa[index]*t121033*t121064*t120996*t120988*t120997*8.0+ccab3*gcab*t121034* \
                   t121062*t120995*t120996*t120988*(3.0/2.0)+ccab4*t121052*t121035*t120992*t120996*t120988*t120997*2.0+ \
                   ccab3*gcab*t121034*t120992*t120995*t120996*(gamma_aa[index]*t121033*t120995*t120988*4.0+gamma_aa[index]* \
                   gcab*t121033*t120992*t120995*t120988*4.0)-ccab1*gamma_aa[index]*gcab*t121033*t120992*1.0/(t120994* \
                   t120994*t120994)*t120995*t120988*(4.0/3.0)-ccab3*gcab*1.0/(t121005*t121005*t121005)*t121062*t121058* \
                   t120992*t120995*t120996*2.0+ccab3*gamma_aa[index]*gcab*t121033*t121034*t121058*t120995*t120996*4.0- \
                   ccab3*gamma_aa[index]*gcab*t121033*t121063*t120992*t120995*t120988*4.0+ccab4*gamma_aa[index]*t121040* \
                   t121033*t121035*t120992*t120996*t120997*(1.6E1/3.0));
            } else if (rho_a[index] > cutoff_) {
                v_rho_a_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_a_gamma_bb_[index] = 0.0;
            } else {
                v_rho_a_gamma_bb_[index] = 0.0;
            } 

            //V_rho_b_gamma_aa
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t121066 = rho_a[index]+rho_b[index];
                double t121067 = 1.0/pow(t121066,1.0/3.0);
                double t121068 = c*t121067;
                double t121069 = sqrt(t121068);
                double t121070 = b1p*t121069;
                double t121071 = pow(t121068,3.0/2.0);
                double t121072 = b3p*t121071;
                double t121073 = c*c;
                double t121074 = 1.0/pow(t121066,2.0/3.0);
                double t121075 = b4p*t121073*t121074;
                double t121076 = b2p*c*t121067;
                double t121077 = t121070+t121072+t121075+t121076;
                double t121078 = 1.0/pow(t121066,4.0/3.0);
                double t121079 = 1.0/c0p;
                double t121080 = 1.0/t121077;
                double t121081 = t121080*t121079*(1.0/2.0);
                double t121082 = t121081+1.0;
                double t121083 = a1p*c*t121067;
                double t121084 = t121083+1.0;
                double t121085 = rho_a[index]-rho_b[index];
                double t121086 = t121085*t121085;
                double t121087 = 1.0/t121066;
                double t121088 = t121085*t121087;
                double t121089 = two_13*2.0;
                double t121090 = t121089-2.0;
                double t121091 = 1.0/t121090;
                double t121092 = 1.0/c0f;
                double t121093 = b1f*t121069;
                double t121094 = b3f*t121071;
                double t121095 = b4f*t121073*t121074;
                double t121096 = b2f*c*t121067;
                double t121097 = t121093+t121094+t121095+t121096;
                double t121098 = 1.0/t121097;
                double t121099 = t121092*t121098*(1.0/2.0);
                double t121100 = t121099+1.0;
                double t121101 = log(t121100);
                double t121102 = a1f*c*t121067;
                double t121103 = t121102+1.0;
                double t121104 = log(t121082);
                double t121115 = c0f*t121101*t121103*2.0;
                double t121116 = c0p*t121104*t121084*2.0;
                double t121105 = t121115-t121116;
                double t121106 = t121088+1.0;
                double t121107 = pow(t121106,4.0/3.0);
                double t121108 = -t121088+1.0;
                double t121109 = pow(t121108,4.0/3.0);
                double t121110 = t121107+t121109-2.0;
                double t121111 = 1.0/(t121066*t121066);
                double t121112 = t121111*t121085;
                double t121113 = t121112+t121087;
                double t121114 = 1.0/(t121066*t121066*t121066*t121066);
                double t121117 = t121086*t121086;
                double t121118 = 1.0/pow(t121066,5.0/3.0);
                double t121119 = 1.0/sqrt(t121068);
                double t121120 = 1.0/t121082;
                double t121121 = 1.0/(t121077*t121077);
                double t121122 = b4p*t121073*t121118*(2.0/3.0);
                double t121123 = b2p*c*t121078*(1.0/3.0);
                double t121124 = b1p*c*t121119*t121078*(1.0/6.0);
                double t121125 = b3p*c*t121069*t121078*(1.0/2.0);
                double t121126 = t121122+t121123+t121124+t121125;
                double t121127 = 1.0/(t121066*t121066*t121066*t121066*t121066);
                double t121128 = 1.0/d2fz0;
                double t121129 = 1.0/Aa;
                double t121130 = b1a*t121069;
                double t121131 = b3a*t121071;
                double t121132 = b4a*t121073*t121074;
                double t121133 = b2a*c*t121067;
                double t121134 = t121130+t121131+t121132+t121133;
                double t121135 = 1.0/t121134;
                double t121136 = t121135*t121129*(1.0/2.0);
                double t121137 = t121136+1.0;
                double t121138 = log(t121137);
                double t121139 = a1a*c*t121067;
                double t121140 = t121139+1.0;
                double t121141 = pow(t121106,1.0/3.0);
                double t121142 = t121113*t121141*(4.0/3.0);
                double t121143 = pow(t121108,1.0/3.0);
                double t121144 = t121142-t121113*t121143*(4.0/3.0);
                double t121145 = t121114*t121117;
                double t121146 = t121145-1.0;
                double t121147 = 1.0/pow(rho_b[index],1.0/3.0);
                double t121148 = c*t121147;
                double t121149 = sqrt(t121148);
                double t121150 = b1f*t121149;
                double t121151 = pow(t121148,3.0/2.0);
                double t121152 = b3f*t121151;
                double t121153 = 1.0/pow(rho_b[index],2.0/3.0);
                double t121154 = b4f*t121153*t121073;
                double t121155 = b2f*c*t121147;
                double t121156 = t121150+t121152+t121154+t121155;
                double t121157 = 1.0/pow(rho_b[index],4.0/3.0);
                double t121158 = b1p*t121149;
                double t121159 = b3p*t121151;
                double t121160 = b4p*t121153*t121073;
                double t121161 = b2p*c*t121147;
                double t121162 = t121160+t121161+t121158+t121159;
                double t121163 = 1.0/pow(rho_b[index],5.0/3.0);
                double t121164 = 1.0/sqrt(t121148);
                double t121165 = 1.0/t121156;
                double t121166 = t121092*t121165*(1.0/2.0);
                double t121167 = t121166+1.0;
                double t121168 = 1.0/t121162;
                double t121169 = t121168*t121079*(1.0/2.0);
                double t121170 = t121169+1.0;
                double t121171 = a1p*c*t121147;
                double t121172 = t121171+1.0;
                double t121173 = 1.0/t121170;
                double t121174 = 1.0/(t121162*t121162);
                double t121175 = b4p*t121073*t121163*(2.0/3.0);
                double t121176 = b2p*c*t121157*(1.0/3.0);
                double t121177 = b1p*c*t121164*t121157*(1.0/6.0);
                double t121178 = b3p*c*t121157*t121149*(1.0/2.0);
                double t121179 = t121175+t121176+t121177+t121178;
                double t121180 = t121172*t121173*t121174*t121179;
                double t121181 = log(t121170);
                double t121182 = pow(2.0,1.0/3.0);
                double t121183 = t121182*2.0;
                double t121184 = t121183-2.0;
                double t121185 = log(t121167);
                double t121186 = a1f*c*t121147;
                double t121187 = t121186+1.0;
                double t121188 = 1.0/pow(rho_a[index],8.0/3.0);
                double t121189 = gamma_aa[index]*t121188*(1.0/2.0);
                double t121190 = 1.0/pow(rho_b[index],8.0/3.0);
                double t121191 = gamma_bb[index]*t121190*(1.0/2.0);
                double t121192 = t121191+t121189;
                double t121193 = gcab*t121192;
                double t121194 = t121193+1.0;
                double t121195 = gcab*gcab;
                double t121196 = t121192*t121192;
                double t121197 = t121195*t121195;
                double t121198 = t121196*t121196;
                double t121199 = t121195*t121196;
                double t121200 = gcab*t121192*2.0;
                double t121201 = t121200+t121199+1.0;
                double t121202 = t121195*t121196*3.0;
                double t121203 = gcab*t121192*t121195*t121196;
                double t121204 = gcab*t121192*3.0;
                double t121205 = t121202+t121203+t121204+1.0;
                double t121206 = t121195*t121196*6.0;
                double t121207 = gcab*t121192*t121195*t121196*4.0;
                double t121208 = t121197*t121198;
                double t121209 = gcab*t121192*4.0;
                double t121210 = t121206+t121207+t121208+t121209+1.0;
                double t121211 = a1p*c*c0p*t121104*t121078*(2.0/3.0);
                double t121212 = 1.0/pow(rho_a[index],1.0/3.0);
                double t121213 = c*t121212;
                double t121214 = sqrt(t121213);
                double t121215 = pow(t121213,3.0/2.0);
                double t121216 = 1.0/pow(rho_a[index],2.0/3.0);
                double t121217 = b1p*t121214;
                double t121218 = b3p*t121215;
                double t121219 = b4p*t121216*t121073;
                double t121220 = b2p*c*t121212;
                double t121221 = t121220+t121217+t121218+t121219;
                double t121222 = 1.0/t121221;
                double t121223 = t121222*t121079*(1.0/2.0);
                double t121224 = t121223+1.0;
                double t121225 = log(t121224);
                double t121226 = a1p*c*t121212;
                double t121227 = t121226+1.0;
                double t121228 = c0p*t121225*t121227*2.0;
                double t121229 = c0f*t121185*t121187*2.0;
                double t121231 = c0p*t121172*t121181*2.0;
                double t121230 = -t121231+t121229;
                double t121232 = t121110*t121105*t121114*t121117*t121091;
                double t121233 = Aa*t121110*t121140*t121091*t121128*t121146*t121138*2.0;
                double t121234 = 1.0/pow(rho_b[index],1.1E1/3.0);
                double t121235 = 1.0/(t121205*t121205);
                double t121236 = 1.0/(t121210*t121210);
                double t121237 = gcab*t121188*2.0;
                double t121238 = t121192*t121195*t121188*6.0;
                double t121239 = gcab*t121195*t121196*t121188*6.0;
                double t121240 = t121192*t121196*t121188*t121197*2.0;
                double t121241 = t121240+t121237+t121238+t121239;
                double t121242 = 1.0/(t121201*t121201);
                double t121243 = gamma_bb[index]*gcab*t121234*(8.0/3.0);
                double t121244 = gamma_bb[index]*t121234*t121192*t121195*(8.0/3.0);
                double t121245 = t121243+t121244;
                double t121246 = gcab*t121188;
                double t121247 = t121192*t121195*t121188;
                double t121248 = t121246+t121247;
                double t121249 = gamma_bb[index]*gcab*t121234*(1.6E1/3.0);
                double t121250 = gamma_bb[index]*gcab*t121234*t121195*t121196*1.6E1;
                double t121251 = gamma_bb[index]*t121234*t121192*t121196*t121197*(1.6E1/3.0);
                double t121252 = gamma_bb[index]*t121234*t121192*t121195*1.6E1;
                double t121253 = t121250+t121251+t121252+t121249;
                double t121254 = 1.0/(t121194*t121194);
                double t121255 = 1.0/t121201;
                double t121256 = gcab*t121188*(3.0/2.0);
                double t121257 = t121192*t121195*t121188*3.0;
                double t121258 = gcab*t121195*t121196*t121188*(3.0/2.0);
                double t121259 = t121256+t121257+t121258;
                double t121260 = gamma_bb[index]*gcab*t121234*4.0;
                double t121261 = gamma_bb[index]*gcab*t121234*t121195*t121196*4.0;
                double t121262 = gamma_bb[index]*t121234*t121192*t121195*8.0;
                double t121263 = t121260+t121261+t121262;
                double t121264 = 1.0/t121205;
                double t121265 = 1.0/t121210;
                v_rho_b_gamma_aa_[index] = (rho_b[index]*(t121231+t121230*t121091*t121184)+rho_a[index]*(t121228- \
                   t121091*t121184*(t121228-c0f*log((t121092*(1.0/2.0))/(b1f*t121214+b3f*t121215+b2f*c*t121212+b4f*t121216* \
                   t121073)+1.0)*(a1f*c*t121212+1.0)*2.0))-t121066*(t121232+t121116+t121233))*(ccab4*t121236*t121197* \
                   t121198*(gamma_bb[index]*t121234*t121195*t121188*8.0+gamma_bb[index]*t121234*t121196*t121188*t121197* \
                   8.0+gamma_bb[index]*gcab*t121234*t121192*t121195*t121188*1.6E1)+ccab2*t121242*t121245*t121192*t121195* \
                   t121188-ccab4*1.0/(t121210*t121210*t121210)*t121241*t121253*t121197*t121198*2.0-ccab2*1.0/(t121201* \
                   t121201*t121201)*t121245*t121248*t121195*t121196*2.0+ccab1*gamma_bb[index]*t121234*t121254*t121195* \
                   t121188*(4.0/3.0)-ccab2*gamma_bb[index]*t121234*t121255*t121195*t121188*(4.0/3.0)+ccab2*gamma_bb[index]* \
                   t121242*t121234*t121192*t121248*t121195*(8.0/3.0)+ccab2*gamma_bb[index]*t121242*t121234*t121196*t121188* \
                   t121197*(4.0/3.0)-ccab4*gamma_bb[index]*t121234*t121265*t121196*t121188*t121197*8.0+ccab3*gcab*t121235* \
                   t121263*t121195*t121196*t121188*(3.0/2.0)+ccab4*t121253*t121236*t121192*t121196*t121188*t121197*2.0+ \
                   ccab3*gcab*t121235*t121192*t121195*t121196*(gamma_bb[index]*t121234*t121195*t121188*4.0+gamma_bb[index]* \
                   gcab*t121234*t121192*t121195*t121188*4.0)-ccab1*gamma_bb[index]*gcab*t121234*t121192*1.0/(t121194* \
                   t121194*t121194)*t121195*t121188*(4.0/3.0)-ccab3*gcab*1.0/(t121205*t121205*t121205)*t121263*t121192* \
                   t121195*t121196*t121259*2.0-ccab3*gamma_bb[index]*gcab*t121234*t121192*t121264*t121195*t121188*4.0+ \
                   ccab3*gamma_bb[index]*gcab*t121234*t121235*t121195*t121196*t121259*4.0+ccab4*gamma_bb[index]*t121241* \
                   t121234*t121236*t121192*t121196*t121197*(1.6E1/3.0))-(t121232+t121116+t121233+rho_b[index]*(-t121180+ \
                   t121091*t121184*(t121180-(1.0/(t121156*t121156)*t121187*(b2f*c*t121157*(1.0/3.0)+b4f*t121073*t121163* \
                   (2.0/3.0)+b1f*c*t121164*t121157*(1.0/6.0)+b3f*c*t121157*t121149*(1.0/2.0)))/t121167+a1f*c*c0f*t121157* \
                   t121185*(2.0/3.0)-a1p*c*c0p*t121181*t121157*(2.0/3.0))+a1p*c*c0p*t121181*t121157*(2.0/3.0))-t121066* \
                   (t121211-t121120*t121121*t121126*t121084+t121110*t121105*t121117*t121091*t121127*4.0+t121105*t121114* \
                   t121117*t121144*t121091-t121110*t121114*t121117*t121091*(t121211-t121120*t121121*t121126*t121084+(t121103* \
                   1.0/(t121097*t121097)*(b2f*c*t121078*(1.0/3.0)+b4f*t121073*t121118*(2.0/3.0)+b1f*c*t121119*t121078* \
                   (1.0/6.0)+b3f*c*t121069*t121078*(1.0/2.0)))/t121100-a1f*c*c0f*t121101*t121078*(2.0/3.0))+t121110*t121105* \
                   t121114*t121091*t121085*t121086*4.0+Aa*t121110*t121140*t121091*t121128*t121138*(t121117*t121127*4.0+ \
                   t121114*t121085*t121086*4.0)*2.0+Aa*t121140*t121144*t121091*t121128*t121146*t121138*2.0-(t121110*t121140* \
                   1.0/(t121134*t121134)*t121091*t121128*t121146*(b2a*c*t121078*(1.0/3.0)+b4a*t121073*t121118*(2.0/3.0) \
                   +b1a*c*t121119*t121078*(1.0/6.0)+b3a*c*t121069*t121078*(1.0/2.0)))/t121137+Aa*a1a*c*t121110*t121091* \
                   t121128*t121146*t121138*t121078*(2.0/3.0))-c0p*t121172*t121181*2.0-t121230*t121091*t121184)*((ccab1* \
                   gcab*t121188*(1.0/2.0))/t121194-ccab2*t121242*t121248*t121195*t121196-ccab1*t121254*t121192*t121195* \
                   t121188*(1.0/2.0)-ccab4*t121241*t121236*t121197*t121198+ccab2*t121192*t121255*t121195*t121188+ccab4* \
                   t121192*t121265*t121196*t121188*t121197*2.0+ccab3*gcab*t121264*t121195*t121196*t121188*(3.0/2.0)-ccab3* \
                   gcab*t121235*t121192*t121195*t121196*t121259);
            } else if (rho_a[index] > cutoff_) {
                v_rho_b_gamma_aa_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_b_gamma_aa_[index] = 0.0;
            } else {
                v_rho_b_gamma_aa_[index] = 0.0;
            } 

            //V_rho_b_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_b_gamma_ab_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_b_gamma_ab_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_b_gamma_ab_[index] = 0.0;
            } else {
                v_rho_b_gamma_ab_[index] = 0.0;
            } 

            //V_rho_b_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t121268 = 1.0/pow(rho_b[index],1.0/3.0);
                double t121269 = c*t121268;
                double t121270 = sqrt(t121269);
                double t121271 = pow(t121269,3.0/2.0);
                double t121272 = c*c;
                double t121273 = 1.0/pow(rho_b[index],2.0/3.0);
                double t121274 = 1.0/c0p;
                double t121275 = b1p*t121270;
                double t121276 = b3p*t121271;
                double t121277 = b4p*t121272*t121273;
                double t121278 = b2p*c*t121268;
                double t121279 = t121275+t121276+t121277+t121278;
                double t121280 = 1.0/t121279;
                double t121281 = t121280*t121274*(1.0/2.0);
                double t121282 = t121281+1.0;
                double t121283 = log(t121282);
                double t121284 = a1p*c*t121268;
                double t121285 = t121284+1.0;
                double t121286 = 1.0/pow(rho_b[index],8.0/3.0);
                double t121287 = gamma_bb[index]*gamma_bb[index];
                double t121288 = gcaa*gcaa;
                double t121289 = t121288*t121288;
                double t121290 = 1.0/pow(rho_b[index],3.2E1/3.0);
                double t121291 = 1.0/pow(rho_b[index],1.6E1/3.0);
                double t121292 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]);
                double t121293 = gamma_bb[index]*gcaa*t121286;
                double t121294 = t121293+1.0;
                double t121295 = gamma_bb[index]*gcaa*t121286*3.0;
                double t121296 = gamma_bb[index]*gcaa*t121292*t121287*t121288;
                double t121297 = t121291*t121287*t121288*3.0;
                double t121298 = t121295+t121296+t121297+1.0;
                double t121299 = t121287*t121287;
                double t121300 = gamma_bb[index]*gcaa*t121286*4.0;
                double t121301 = gamma_bb[index]*gcaa*t121292*t121287*t121288*4.0;
                double t121302 = t121291*t121287*t121288*6.0;
                double t121303 = t121290*t121289*t121299;
                double t121304 = t121300+t121301+t121302+t121303+1.0;
                double t121305 = gamma_bb[index]*gcaa*t121286*2.0;
                double t121306 = t121291*t121287*t121288;
                double t121307 = t121305+t121306+1.0;
                double t121308 = rho_a[index]+rho_b[index];
                double t121309 = 1.0/pow(t121308,1.0/3.0);
                double t121310 = c*t121309;
                double t121311 = sqrt(t121310);
                double t121312 = b1p*t121311;
                double t121313 = pow(t121310,3.0/2.0);
                double t121314 = b3p*t121313;
                double t121315 = 1.0/pow(t121308,2.0/3.0);
                double t121316 = b4p*t121315*t121272;
                double t121317 = b2p*c*t121309;
                double t121318 = t121312+t121314+t121316+t121317;
                double t121319 = 1.0/pow(t121308,4.0/3.0);
                double t121320 = two_13*2.0;
                double t121321 = t121320-2.0;
                double t121322 = 1.0/t121321;
                double t121323 = 1.0/c0f;
                double t121324 = 1.0/t121318;
                double t121325 = t121324*t121274*(1.0/2.0);
                double t121326 = t121325+1.0;
                double t121327 = a1p*c*t121309;
                double t121328 = t121327+1.0;
                double t121329 = rho_a[index]-rho_b[index];
                double t121330 = t121329*t121329;
                double t121331 = 1.0/t121308;
                double t121332 = t121331*t121329;
                double t121333 = b1f*t121311;
                double t121334 = b3f*t121313;
                double t121335 = b4f*t121315*t121272;
                double t121336 = b2f*c*t121309;
                double t121337 = t121333+t121334+t121335+t121336;
                double t121338 = 1.0/t121337;
                double t121339 = t121323*t121338*(1.0/2.0);
                double t121340 = t121339+1.0;
                double t121341 = log(t121340);
                double t121342 = a1f*c*t121309;
                double t121343 = t121342+1.0;
                double t121344 = log(t121326);
                double t121355 = c0f*t121341*t121343*2.0;
                double t121356 = c0p*t121344*t121328*2.0;
                double t121345 = t121355-t121356;
                double t121346 = t121332+1.0;
                double t121347 = pow(t121346,4.0/3.0);
                double t121348 = -t121332+1.0;
                double t121349 = pow(t121348,4.0/3.0);
                double t121350 = t121347+t121349-2.0;
                double t121351 = 1.0/(t121308*t121308);
                double t121352 = t121351*t121329;
                double t121353 = t121331+t121352;
                double t121354 = 1.0/(t121308*t121308*t121308*t121308);
                double t121357 = t121330*t121330;
                double t121358 = 1.0/pow(t121308,5.0/3.0);
                double t121359 = 1.0/sqrt(t121310);
                double t121360 = 1.0/t121326;
                double t121361 = 1.0/(t121318*t121318);
                double t121362 = b4p*t121272*t121358*(2.0/3.0);
                double t121363 = b2p*c*t121319*(1.0/3.0);
                double t121364 = b1p*c*t121319*t121359*(1.0/6.0);
                double t121365 = b3p*c*t121311*t121319*(1.0/2.0);
                double t121366 = t121362+t121363+t121364+t121365;
                double t121367 = 1.0/(t121308*t121308*t121308*t121308*t121308);
                double t121368 = 1.0/d2fz0;
                double t121369 = 1.0/Aa;
                double t121370 = b1a*t121311;
                double t121371 = b3a*t121313;
                double t121372 = b4a*t121315*t121272;
                double t121373 = b2a*c*t121309;
                double t121374 = t121370+t121371+t121372+t121373;
                double t121375 = 1.0/t121374;
                double t121376 = t121375*t121369*(1.0/2.0);
                double t121377 = t121376+1.0;
                double t121378 = log(t121377);
                double t121379 = a1a*c*t121309;
                double t121380 = t121379+1.0;
                double t121381 = pow(t121346,1.0/3.0);
                double t121382 = t121353*t121381*(4.0/3.0);
                double t121383 = pow(t121348,1.0/3.0);
                double t121384 = t121382-t121353*t121383*(4.0/3.0);
                double t121385 = t121354*t121357;
                double t121386 = t121385-1.0;
                double t121387 = pow(2.0,1.0/3.0);
                double t121388 = t121387*2.0;
                double t121389 = t121388-2.0;
                double t121390 = a1f*c*t121268;
                double t121391 = t121390+1.0;
                double t121392 = b1f*t121270;
                double t121393 = b3f*t121271;
                double t121394 = b4f*t121272*t121273;
                double t121395 = b2f*c*t121268;
                double t121396 = t121392+t121393+t121394+t121395;
                double t121397 = 1.0/t121396;
                double t121398 = t121323*t121397*(1.0/2.0);
                double t121399 = t121398+1.0;
                double t121400 = 1.0/pow(rho_b[index],4.0/3.0);
                double t121401 = 1.0/pow(rho_b[index],5.0/3.0);
                double t121402 = 1.0/sqrt(t121269);
                double t121403 = log(t121399);
                double t121404 = 1.0/t121282;
                double t121405 = 1.0/(t121279*t121279);
                double t121406 = b4p*t121401*t121272*(2.0/3.0);
                double t121407 = b2p*c*t121400*(1.0/3.0);
                double t121408 = b1p*c*t121400*t121402*(1.0/6.0);
                double t121409 = b3p*c*t121400*t121270*(1.0/2.0);
                double t121410 = t121406+t121407+t121408+t121409;
                double t121411 = t121410*t121404*t121405*t121285;
                double t121412 = c0f*t121403*t121391*2.0;
                double t121413 = c0p*t121283*t121285*2.0;
                double t121414 = 1.0/pow(rho_a[index],8.0/3.0);
                double t121415 = gamma_aa[index]*t121414*(1.0/2.0);
                double t121416 = gamma_bb[index]*t121286*(1.0/2.0);
                double t121417 = t121415+t121416;
                double t121418 = gcab*t121417;
                double t121419 = t121418+1.0;
                double t121420 = gcab*gcab;
                double t121421 = t121417*t121417;
                double t121422 = t121420*t121420;
                double t121423 = t121421*t121421;
                double t121424 = t121420*t121421;
                double t121425 = gcab*t121417*2.0;
                double t121426 = t121424+t121425+1.0;
                double t121427 = t121420*t121421*3.0;
                double t121428 = gcab*t121420*t121421*t121417;
                double t121429 = gcab*t121417*3.0;
                double t121430 = t121427+t121428+t121429+1.0;
                double t121431 = t121420*t121421*6.0;
                double t121432 = gcab*t121420*t121421*t121417*4.0;
                double t121433 = t121422*t121423;
                double t121434 = gcab*t121417*4.0;
                double t121435 = t121431+t121432+t121433+t121434+1.0;
                double t121436 = a1p*c*c0p*t121344*t121319*(2.0/3.0);
                double t121437 = 1.0/pow(rho_a[index],1.0/3.0);
                double t121438 = c*t121437;
                double t121439 = sqrt(t121438);
                double t121440 = pow(t121438,3.0/2.0);
                double t121441 = 1.0/pow(rho_a[index],2.0/3.0);
                double t121442 = b1p*t121439;
                double t121443 = b3p*t121440;
                double t121444 = b4p*t121441*t121272;
                double t121445 = b2p*c*t121437;
                double t121446 = t121442+t121443+t121444+t121445;
                double t121447 = 1.0/t121446;
                double t121448 = t121274*t121447*(1.0/2.0);
                double t121449 = t121448+1.0;
                double t121450 = log(t121449);
                double t121451 = a1p*c*t121437;
                double t121452 = t121451+1.0;
                double t121453 = c0p*t121450*t121452*2.0;
                double t121454 = t121412-t121413;
                double t121455 = t121322*t121350*t121345*t121354*t121357;
                double t121456 = Aa*t121322*t121350*t121380*t121368*t121386*t121378*2.0;
                double t121457 = 1.0/t121419;
                double t121458 = 1.0/pow(rho_b[index],1.1E1/3.0);
                double t121459 = 1.0/(t121419*t121419);
                double t121460 = 1.0/t121426;
                double t121461 = 1.0/(t121430*t121430);
                double t121462 = 1.0/pow(rho_b[index],1.9E1/3.0);
                double t121463 = 1.0/(t121426*t121426);
                double t121464 = 1.0/t121430;
                double t121465 = 1.0/t121435;
                double t121466 = 1.0/(t121435*t121435);
                double t121467 = gcab*t121286*2.0;
                double t121468 = t121420*t121417*t121286*6.0;
                double t121469 = gcab*t121420*t121421*t121286*6.0;
                double t121470 = t121421*t121422*t121417*t121286*2.0;
                double t121471 = t121470+t121467+t121468+t121469;
                double t121472 = gamma_bb[index]*gcab*t121458*(8.0/3.0);
                double t121473 = gamma_bb[index]*t121420*t121417*t121458*(8.0/3.0);
                double t121474 = t121472+t121473;
                double t121475 = gcab*t121286;
                double t121476 = t121420*t121417*t121286;
                double t121477 = t121475+t121476;
                double t121478 = gamma_bb[index]*gcab*t121458*(1.6E1/3.0);
                double t121479 = gamma_bb[index]*gcab*t121420*t121421*t121458*1.6E1;
                double t121480 = gamma_bb[index]*t121421*t121422*t121417*t121458*(1.6E1/3.0);
                double t121481 = gamma_bb[index]*t121420*t121417*t121458*1.6E1;
                double t121482 = t121480+t121481+t121478+t121479;
                double t121483 = gcab*t121286*(3.0/2.0);
                double t121484 = t121420*t121417*t121286*3.0;
                double t121485 = gcab*t121420*t121421*t121286*(3.0/2.0);
                double t121486 = t121483+t121484+t121485;
                double t121487 = gamma_bb[index]*gcab*t121458*4.0;
                double t121488 = gamma_bb[index]*gcab*t121420*t121421*t121458*4.0;
                double t121489 = gamma_bb[index]*t121420*t121417*t121458*8.0;
                double t121490 = t121487+t121488+t121489;
                double t121491 = t121322*t121454*t121389;
                double t121492 = t121413+t121491;
                double t121493 = 1.0/t121294;
                double t121494 = 1.0/t121304;
                double t121495 = 1.0/t121307;
                double t121496 = 1.0/t121298;
                double t121497 = 1.0/(t121294*t121294);
                double t121498 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]*rho_b[index]);
                double t121499 = 1.0/(t121298*t121298);
                double t121500 = 1.0/(t121307*t121307);
                double t121501 = gcaa*t121286*3.0;
                double t121502 = gamma_bb[index]*t121291*t121288*6.0;
                double t121503 = gcaa*t121292*t121287*t121288*3.0;
                double t121504 = t121501+t121502+t121503;
                double t121505 = 1.0/pow(rho_b[index],3.5E1/3.0);
                double t121506 = 1.0/(t121304*t121304);
                double t121507 = gcaa*t121286*4.0;
                double t121508 = gamma_bb[index]*t121291*t121288*1.2E1;
                double t121509 = gcaa*t121292*t121287*t121288*1.2E1;
                double t121510 = gamma_bb[index]*t121290*t121287*t121289*4.0;
                double t121511 = t121510+t121507+t121508+t121509;
                double t121512 = gcaa*t121286*2.0;
                double t121513 = gamma_bb[index]*t121291*t121288*2.0;
                double t121514 = t121512+t121513;
                double t121515 = gamma_bb[index]*gcaa*t121458*(1.6E1/3.0);
                double t121516 = t121462*t121287*t121288*(1.6E1/3.0);
                double t121517 = t121515+t121516;
                double t121518 = gamma_bb[index]*gcaa*t121458*8.0;
                double t121519 = gamma_bb[index]*gcaa*t121287*t121288*t121498*8.0;
                double t121520 = t121462*t121287*t121288*1.6E1;
                double t121521 = t121520+t121518+t121519;
                double t121522 = gamma_bb[index]*gcaa*t121458*(3.2E1/3.0);
                double t121523 = gamma_bb[index]*gcaa*t121287*t121288*t121498*3.2E1;
                double t121524 = t121462*t121287*t121288*3.2E1;
                double t121525 = t121505*t121289*t121299*(3.2E1/3.0);
                double t121526 = t121522+t121523+t121524+t121525;
                double t121527 = 1.0/t121399;
                double t121528 = 1.0/(t121396*t121396);
                double t121529 = b4f*t121401*t121272*(2.0/3.0);
                double t121530 = b2f*c*t121400*(1.0/3.0);
                double t121531 = b1f*c*t121400*t121402*(1.0/6.0);
                double t121532 = b3f*c*t121400*t121270*(1.0/2.0);
                double t121533 = t121530+t121531+t121532+t121529;
                double t121534 = a1f*c*c0f*t121400*t121403*(2.0/3.0);
                double t121535 = a1p*c*c0p*t121400*t121283*(2.0/3.0);
                double t121536 = ccaa1*gcaa*t121286*t121493;
                double t121537 = ccaa4*gamma_bb[index]*t121290*t121287*t121494*t121289*4.0;
                double t121538 = ccaa2*gamma_bb[index]*t121291*t121288*t121495*2.0;
                double t121539 = ccaa3*gcaa*t121292*t121287*t121288*t121496*3.0;
                double t121540 = t121536+t121537+t121538+t121539-ccaa1*gamma_bb[index]*t121291*t121288*t121497-ccaa2* \
                   t121500*t121514*t121291*t121287*t121288-ccaa4*t121511*t121290*t121506*t121289*t121299-ccaa3*gamma_bb[index]* \
                   gcaa*t121504*t121292*t121287*t121288*t121499;
                double t121541 = rho_b[index]*(8.334140006820045E15/1.40737488355328E14);
                double t121542 = 1.0/(omega*omega);
                double t121543 = pow(t121541,2.0/3.0);
                double t121546 = t121542*t121543;
                double t121544 = exp(-t121546);
                double t121545 = 1.0/pow(t121541,1.0/3.0);
                double t121547 = omega*omega;
                double t121548 = t121544-1.0;
                double t121549 = 1.0/pow(t121541,2.0/3.0);
                double t121550 = 1.0/pow(t121541,4.0/3.0);
                double t121551 = 1.0/omega;
                double t121573 = t121547*t121548*t121549*(1.0/2.0);
                double t121552 = t121544-t121573;
                double t121553 = gx*gx;
                double t121554 = t121553*t121553;
                double t121555 = gamma_bb[index]*gx*t121286;
                double t121556 = t121555+1.0;
                double t121557 = gamma_bb[index]*gx*t121286*3.0;
                double t121558 = gamma_bb[index]*gx*t121292*t121553*t121287;
                double t121559 = t121291*t121553*t121287*3.0;
                double t121560 = t121557+t121558+t121559+1.0;
                double t121561 = gamma_bb[index]*gx*t121286*4.0;
                double t121562 = gamma_bb[index]*gx*t121292*t121553*t121287*4.0;
                double t121563 = t121291*t121553*t121287*6.0;
                double t121564 = t121290*t121554*t121299;
                double t121565 = t121561+t121562+t121563+t121564+1.0;
                double t121566 = gamma_bb[index]*gx*t121286*2.0;
                double t121567 = t121291*t121553*t121287;
                double t121568 = t121566+t121567+1.0;
                double t121569 = pow(t121541,1.0/3.0);
                double t121570 = t121551*t121569;
                double t121571 = erf(t121570);
                double t121572 = t121571*(3.991211251234741E15/2.251799813685248E15);
                double t121574 = omega*t121552*t121545;
                double t121575 = t121572+t121574;
                double t121576 = 1.0/t121556;
                double t121577 = cx1*gx*t121286*t121576;
                double t121578 = 1.0/t121565;
                double t121579 = cx4*gamma_bb[index]*t121290*t121554*t121287*t121578*4.0;
                double t121580 = 1.0/t121568;
                double t121581 = cx2*gamma_bb[index]*t121291*t121553*t121580*2.0;
                double t121582 = 1.0/t121560;
                double t121583 = cx3*gx*t121292*t121553*t121582*t121287*3.0;
                double t121584 = 1.0/(t121556*t121556);
                double t121585 = gx*t121286*3.0;
                double t121586 = gamma_bb[index]*t121291*t121553*6.0;
                double t121587 = gx*t121292*t121553*t121287*3.0;
                double t121588 = t121585+t121586+t121587;
                double t121589 = 1.0/(t121560*t121560);
                double t121590 = gx*t121286*4.0;
                double t121591 = gamma_bb[index]*t121291*t121553*1.2E1;
                double t121592 = gx*t121292*t121553*t121287*1.2E1;
                double t121593 = gamma_bb[index]*t121290*t121554*t121287*4.0;
                double t121594 = t121590+t121591+t121592+t121593;
                double t121595 = 1.0/(t121565*t121565);
                double t121596 = gx*t121286*2.0;
                double t121597 = gamma_bb[index]*t121291*t121553*2.0;
                double t121598 = t121596+t121597;
                double t121599 = 1.0/(t121568*t121568);
                double t121600 = t121581+t121583+t121577+t121579-cx1*gamma_bb[index]*t121291*t121553*t121584-cx2* \
                   t121291*t121553*t121287*t121598*t121599-cx4*t121290*t121554*t121594*t121595*t121299-cx3*gamma_bb[index]* \
                   gx*t121292*t121553*t121287*t121588*t121589;
                double t121601 = pow(rho_b[index],4.0/3.0);
                double t121602 = omega*t121545*t121575*(4.0/3.0);
                double t121603 = t121602-1.0;
                double t121604 = gamma_bb[index]*gx*t121458*(1.6E1/3.0);
                double t121605 = t121462*t121553*t121287*(1.6E1/3.0);
                double t121606 = t121604+t121605;
                double t121607 = gamma_bb[index]*gx*t121458*8.0;
                double t121608 = gamma_bb[index]*gx*t121553*t121287*t121498*8.0;
                double t121609 = t121462*t121553*t121287*1.6E1;
                double t121610 = t121607+t121608+t121609;
                double t121611 = gamma_bb[index]*gx*t121458*(3.2E1/3.0);
                double t121612 = gamma_bb[index]*gx*t121553*t121287*t121498*3.2E1;
                double t121613 = t121462*t121553*t121287*3.2E1;
                double t121614 = t121505*t121554*t121299*(3.2E1/3.0);
                double t121615 = t121611+t121612+t121613+t121614;
                v_rho_b_gamma_bb_[index] = -(rho_b[index]*t121492+rho_a[index]*(t121453-t121322*t121389*(t121453- \
                   c0f*log((t121323*(1.0/2.0))/(b1f*t121439+b3f*t121440+b2f*c*t121437+b4f*t121441*t121272)+1.0)*(a1f* \
                   c*t121437+1.0)*2.0))-t121308*(t121356+t121455+t121456))*(ccab1*gcab*t121457*t121458*(4.0/3.0)-ccab2* \
                   t121420*t121421*t121463*(gcab*t121458*(8.0/3.0)+gamma_bb[index]*t121420*t121462*(4.0/3.0)+t121420* \
                   t121417*t121458*(8.0/3.0))-ccab4*t121422*t121423*t121466*(gcab*t121458*(1.6E1/3.0)+gamma_bb[index]* \
                   t121420*t121462*8.0+t121420*t121417*t121458*1.6E1+gamma_bb[index]*t121421*t121422*t121462*8.0+gcab* \
                   t121420*t121421*t121458*1.6E1+t121421*t121422*t121417*t121458*(1.6E1/3.0)+gamma_bb[index]*gcab*t121420* \
                   t121417*t121462*1.6E1)+ccab2*gamma_bb[index]*t121420*t121460*t121462*(4.0/3.0)-ccab1*gamma_bb[index]* \
                   t121420*t121462*t121459*(4.0/3.0)+ccab2*t121420*t121460*t121417*t121458*(8.0/3.0)-ccab1*t121420*t121417* \
                   t121458*t121459*(4.0/3.0)+ccab4*t121421*t121422*t121417*t121465*t121458*(1.6E1/3.0)-ccab2*t121420* \
                   t121417*t121463*t121474*t121286+ccab4*t121422*t121423*1.0/(t121435*t121435*t121435)*t121471*t121482* \
                   2.0+ccab2*t121420*t121421*1.0/(t121426*t121426*t121426)*t121474*t121477*2.0+ccab4*gamma_bb[index]* \
                   t121421*t121422*t121462*t121465*8.0+ccab3*gcab*t121420*t121421*t121464*t121458*4.0+ccab3*gamma_bb[index]* \
                   gcab*t121420*t121417*t121462*t121464*4.0-ccab2*gamma_bb[index]*t121420*t121417*t121463*t121458*t121477* \
                   (8.0/3.0)-ccab3*gcab*t121420*t121421*t121461*t121490*t121286*(3.0/2.0)-ccab4*t121421*t121422*t121417* \
                   t121482*t121286*t121466*2.0-ccab3*gcab*t121420*t121421*t121461*t121417*(gcab*t121458*4.0+gamma_bb[index]* \
                   t121420*t121462*4.0+t121420*t121417*t121458*8.0+gcab*t121420*t121421*t121458*4.0+gamma_bb[index]*gcab* \
                   t121420*t121417*t121462*4.0)+ccab1*gamma_bb[index]*gcab*t121420*t121417*t121462*1.0/(t121419*t121419* \
                   t121419)*(4.0/3.0)+ccab3*gcab*t121420*t121421*1.0/(t121430*t121430*t121430)*t121417*t121490*t121486* \
                   2.0-ccab3*gamma_bb[index]*gcab*t121420*t121421*t121461*t121458*t121486*4.0-ccab4*gamma_bb[index]*t121421* \
                   t121422*t121417*t121471*t121466*t121458*(1.6E1/3.0))-(-t121413+t121356+t121455+t121456+rho_b[index]* \
                   (-t121411+t121535+t121322*t121389*(t121411+t121534-t121533*t121391*t121527*t121528-a1p*c*c0p*t121400* \
                   t121283*(2.0/3.0)))-t121308*(t121436-t121360*t121361*t121328*t121366+t121322*t121350*t121345*t121357* \
                   t121367*4.0+t121322*t121345*t121354*t121357*t121384-t121322*t121350*t121354*t121357*(t121436-t121360* \
                   t121361*t121328*t121366+(t121343*1.0/(t121337*t121337)*(b2f*c*t121319*(1.0/3.0)+b4f*t121272*t121358* \
                   (2.0/3.0)+b1f*c*t121319*t121359*(1.0/6.0)+b3f*c*t121311*t121319*(1.0/2.0)))/t121340-a1f*c*c0f*t121341* \
                   t121319*(2.0/3.0))+t121330*t121322*t121350*t121345*t121354*t121329*4.0+Aa*t121322*t121350*t121380* \
                   t121368*t121378*(t121357*t121367*4.0+t121330*t121354*t121329*4.0)*2.0+Aa*t121322*t121380*t121384*t121368* \
                   t121386*t121378*2.0-(t121322*t121350*t121380*1.0/(t121374*t121374)*t121368*t121386*(b2a*c*t121319* \
                   (1.0/3.0)+b4a*t121272*t121358*(2.0/3.0)+b1a*c*t121319*t121359*(1.0/6.0)+b3a*c*t121311*t121319*(1.0/ \
                   2.0)))/t121377+Aa*a1a*c*t121322*t121350*t121319*t121368*t121386*t121378*(2.0/3.0))-t121322*t121454* \
                   t121389)*(ccab1*gcab*t121286*t121457*(1.0/2.0)-ccab2*t121420*t121421*t121463*t121477+ccab2*t121420* \
                   t121460*t121417*t121286-ccab4*t121422*t121423*t121471*t121466-ccab1*t121420*t121417*t121286*t121459* \
                   (1.0/2.0)+ccab4*t121421*t121422*t121417*t121465*t121286*2.0+ccab3*gcab*t121420*t121421*t121464*t121286* \
                   (3.0/2.0)-ccab3*gcab*t121420*t121421*t121461*t121417*t121486)-t121540*(t121413+t121322*t121389*(t121412- \
                   c0p*t121283*t121285*2.0))-rho_b[index]*t121492*(ccaa1*gcaa*t121493*t121458*(-8.0/3.0)-ccaa2*gamma_bb[index]* \
                   t121462*t121288*t121495*(3.2E1/3.0)+ccaa1*gamma_bb[index]*t121462*t121288*t121497*8.0+ccaa2*t121500* \
                   t121514*t121462*t121287*t121288*(1.6E1/3.0)+ccaa4*t121511*t121505*t121506*t121289*t121299*(3.2E1/3.0) \
                   +ccaa4*t121290*t121506*t121289*t121299*(gcaa*t121458*(3.2E1/3.0)+gamma_bb[index]*t121462*t121288*6.4E1+ \
                   gamma_bb[index]*t121505*t121287*t121289*(1.28E2/3.0)+gcaa*t121287*t121288*t121498*9.6E1)-ccaa1*gcaa* \
                   1.0/(t121294*t121294*t121294)*t121287*t121288*t121498*(1.6E1/3.0)+ccaa2*t121500*t121291*t121287*t121288* \
                   (gcaa*t121458*(1.6E1/3.0)+gamma_bb[index]*t121462*t121288*(3.2E1/3.0))+ccaa2*gamma_bb[index]*t121500* \
                   t121291*t121517*t121288*2.0-ccaa4*gamma_bb[index]*t121505*t121287*t121494*t121289*(1.28E2/3.0)-ccaa3* \
                   gcaa*t121287*t121288*t121496*t121498*2.4E1+ccaa4*gamma_bb[index]*t121290*t121506*t121526*t121287*t121289* \
                   4.0+ccaa3*gcaa*t121521*t121292*t121287*t121288*t121499*3.0-ccaa4*1.0/(t121304*t121304*t121304)*t121511* \
                   t121290*t121526*t121289*t121299*2.0-ccaa2*1.0/(t121307*t121307*t121307)*t121514*t121291*t121517*t121287* \
                   t121288*2.0+ccaa3*gamma_bb[index]*gcaa*t121292*t121287*t121288*t121499*(gcaa*t121458*8.0+gamma_bb[index]* \
                   t121462*t121288*3.2E1+gcaa*t121287*t121288*t121498*2.4E1)+ccaa3*gamma_bb[index]*gcaa*t121504*t121287* \
                   t121288*t121498*t121499*8.0-ccaa3*gamma_bb[index]*gcaa*t121521*t121504*t121292*t121287*t121288*1.0/ \
                   (t121298*t121298*t121298)*2.0)+rho_b[index]*t121540*(-t121411+t121535+t121322*t121389*(t121411+t121534- \
                   t121535-t121533*t121391*t121527*t121528))-c0*t121600*t121601*(omega*t121545*(omega*t121550*t121552* \
                   (-2.778046668940015E15/1.40737488355328E14)+omega*t121545*((t121544*(1.0/3.0))/rho_b[index]+1.0/pow(t121541,5.0/ \
                   3.0)*t121547*t121548*(2.778046668940015E15/1.40737488355328E14)-t121542*t121544*t121545*(2.778046668940015E15/ \
                   7.0368744177664E13))+1.0/sqrt(3.141592653589793)*t121551*t121544*t121549*(1.108777112152858E31/1.584563250285287E29) \
                   )*(4.0/3.0)-omega*t121550*t121575*(2.778046668940015E15/1.05553116266496E14))-c0*t121601*t121603*(cx1* \
                   gx*t121458*t121576*(-8.0/3.0)+cx1*gamma_bb[index]*t121462*t121553*t121584*8.0-cx2*gamma_bb[index]* \
                   t121462*t121553*t121580*(3.2E1/3.0)+cx2*t121462*t121553*t121287*t121598*t121599*(1.6E1/3.0)+cx4*t121505* \
                   t121554*t121594*t121595*t121299*(3.2E1/3.0)+cx4*t121290*t121554*t121595*t121299*(gx*t121458*(3.2E1/ \
                   3.0)+gamma_bb[index]*t121462*t121553*6.4E1+gamma_bb[index]*t121505*t121554*t121287*(1.28E2/3.0)+gx* \
                   t121553*t121287*t121498*9.6E1)-cx1*gx*t121553*1.0/(t121556*t121556*t121556)*t121287*t121498*(1.6E1/ \
                   3.0)+cx2*t121291*t121553*t121287*t121599*(gx*t121458*(1.6E1/3.0)+gamma_bb[index]*t121462*t121553*(3.2E1/ \
                   3.0))+cx2*gamma_bb[index]*t121291*t121606*t121553*t121599*2.0-cx4*gamma_bb[index]*t121505*t121554* \
                   t121287*t121578*(1.28E2/3.0)-cx3*gx*t121553*t121582*t121287*t121498*2.4E1+cx4*gamma_bb[index]*t121290* \
                   t121615*t121554*t121287*t121595*4.0+cx3*gx*t121610*t121292*t121553*t121287*t121589*3.0-cx2*t121291* \
                   t121606*t121553*t121287*1.0/(t121568*t121568*t121568)*t121598*2.0-cx4*t121290*t121615*t121554*1.0/ \
                   (t121565*t121565*t121565)*t121594*t121299*2.0+cx3*gamma_bb[index]*gx*t121292*t121553*t121287*t121589* \
                   (gx*t121458*8.0+gamma_bb[index]*t121462*t121553*3.2E1+gx*t121553*t121287*t121498*2.4E1)+cx3*gamma_bb[index]* \
                   gx*t121553*t121287*t121498*t121588*t121589*8.0-cx3*gamma_bb[index]*gx*t121610*1.0/(t121560*t121560* \
                   t121560)*t121292*t121553*t121287*t121588*2.0)-c0*pow(rho_b[index],1.0/3.0)*t121600*t121603*(4.0/3.0) \
                   ;
            } else if (rho_a[index] > cutoff_) {
                v_rho_b_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                double t122604 = 1.0/pow(rho_b[index],1.0/3.0);
                double t122605 = c*t122604;
                double t122606 = sqrt(t122605);
                double t122607 = pow(t122605,3.0/2.0);
                double t122608 = c*c;
                double t122609 = 1.0/pow(rho_b[index],2.0/3.0);
                double t122610 = 1.0/c0p;
                double t122611 = b1p*t122606;
                double t122612 = b3p*t122607;
                double t122613 = b4p*t122608*t122609;
                double t122614 = b2p*c*t122604;
                double t122615 = t122611+t122612+t122613+t122614;
                double t122616 = 1.0/t122615;
                double t122617 = t122610*t122616*(1.0/2.0);
                double t122618 = t122617+1.0;
                double t122619 = log(t122618);
                double t122620 = a1p*c*t122604;
                double t122621 = t122620+1.0;
                double t122622 = 1.0/pow(rho_b[index],8.0/3.0);
                double t122623 = gamma_bb[index]*gamma_bb[index];
                double t122624 = gcaa*gcaa;
                double t122625 = t122624*t122624;
                double t122626 = 1.0/pow(rho_b[index],3.2E1/3.0);
                double t122627 = 1.0/pow(rho_b[index],1.6E1/3.0);
                double t122628 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]);
                double t122629 = gamma_bb[index]*gcaa*t122622;
                double t122630 = t122629+1.0;
                double t122631 = gamma_bb[index]*gcaa*t122622*3.0;
                double t122632 = gamma_bb[index]*gcaa*t122623*t122624*t122628;
                double t122633 = t122623*t122624*t122627*3.0;
                double t122634 = t122631+t122632+t122633+1.0;
                double t122635 = t122623*t122623;
                double t122636 = gamma_bb[index]*gcaa*t122622*4.0;
                double t122637 = gamma_bb[index]*gcaa*t122623*t122624*t122628*4.0;
                double t122638 = t122623*t122624*t122627*6.0;
                double t122639 = t122625*t122626*t122635;
                double t122640 = t122636+t122637+t122638+t122639+1.0;
                double t122641 = gamma_bb[index]*gcaa*t122622*2.0;
                double t122642 = t122623*t122624*t122627;
                double t122643 = t122641+t122642+1.0;
                double t122644 = pow(2.0,1.0/3.0);
                double t122645 = t122644*2.0;
                double t122646 = t122645-2.0;
                double t122647 = two_13*2.0;
                double t122648 = t122647-2.0;
                double t122649 = 1.0/t122648;
                double t122650 = 1.0/c0f;
                double t122651 = b1f*t122606;
                double t122652 = b3f*t122607;
                double t122653 = b4f*t122608*t122609;
                double t122654 = b2f*c*t122604;
                double t122655 = t122651+t122652+t122653+t122654;
                double t122656 = 1.0/t122655;
                double t122657 = t122650*t122656*(1.0/2.0);
                double t122658 = t122657+1.0;
                double t122659 = log(t122658);
                double t122660 = a1f*c*t122604;
                double t122661 = t122660+1.0;
                double t122662 = c0f*t122661*t122659*2.0;
                double t122663 = c0p*t122621*t122619*2.0;
                double t122664 = 1.0/t122630;
                double t122665 = 1.0/t122640;
                double t122666 = 1.0/t122643;
                double t122667 = 1.0/t122634;
                double t122668 = 1.0/pow(rho_b[index],1.9E1/3.0);
                double t122669 = 1.0/(t122630*t122630);
                double t122670 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]*rho_b[index]);
                double t122671 = 1.0/pow(rho_b[index],1.1E1/3.0);
                double t122672 = 1.0/(t122634*t122634);
                double t122673 = 1.0/(t122643*t122643);
                double t122674 = gcaa*t122622*3.0;
                double t122675 = gamma_bb[index]*t122624*t122627*6.0;
                double t122676 = gcaa*t122623*t122624*t122628*3.0;
                double t122677 = t122674+t122675+t122676;
                double t122678 = 1.0/pow(rho_b[index],3.5E1/3.0);
                double t122679 = 1.0/(t122640*t122640);
                double t122680 = gcaa*t122622*4.0;
                double t122681 = gamma_bb[index]*t122624*t122627*1.2E1;
                double t122682 = gcaa*t122623*t122624*t122628*1.2E1;
                double t122683 = gamma_bb[index]*t122623*t122625*t122626*4.0;
                double t122684 = t122680+t122681+t122682+t122683;
                double t122685 = gcaa*t122622*2.0;
                double t122686 = gamma_bb[index]*t122624*t122627*2.0;
                double t122687 = t122685+t122686;
                double t122688 = gamma_bb[index]*gcaa*t122671*(1.6E1/3.0);
                double t122689 = t122623*t122624*t122668*(1.6E1/3.0);
                double t122690 = t122688+t122689;
                double t122691 = gamma_bb[index]*gcaa*t122671*8.0;
                double t122692 = gamma_bb[index]*gcaa*t122623*t122624*t122670*8.0;
                double t122693 = t122623*t122624*t122668*1.6E1;
                double t122694 = t122691+t122692+t122693;
                double t122695 = gamma_bb[index]*gcaa*t122671*(3.2E1/3.0);
                double t122696 = gamma_bb[index]*gcaa*t122623*t122624*t122670*3.2E1;
                double t122697 = t122623*t122624*t122668*3.2E1;
                double t122698 = t122625*t122635*t122678*(3.2E1/3.0);
                double t122699 = t122695+t122696+t122697+t122698;
                double t122700 = 1.0/pow(rho_b[index],4.0/3.0);
                double t122701 = 1.0/pow(rho_b[index],5.0/3.0);
                double t122702 = 1.0/sqrt(t122605);
                double t122703 = 1.0/t122618;
                double t122704 = 1.0/(t122615*t122615);
                double t122705 = b4p*t122701*t122608*(2.0/3.0);
                double t122706 = b2p*c*t122700*(1.0/3.0);
                double t122707 = b1p*c*t122700*t122702*(1.0/6.0);
                double t122708 = b3p*c*t122700*t122606*(1.0/2.0);
                double t122709 = t122705+t122706+t122707+t122708;
                double t122710 = t122621*t122703*t122704*t122709;
                double t122711 = ccaa1*gcaa*t122622*t122664;
                double t122712 = ccaa4*gamma_bb[index]*t122623*t122625*t122626*t122665*4.0;
                double t122713 = ccaa2*gamma_bb[index]*t122624*t122627*t122666*2.0;
                double t122714 = ccaa3*gcaa*t122623*t122624*t122628*t122667*3.0;
                double t122715 = t122711+t122712+t122713+t122714-ccaa1*gamma_bb[index]*t122624*t122627*t122669-ccaa2* \
                   t122623*t122624*t122627*t122673*t122687-ccaa4*t122625*t122626*t122635*t122684*t122679-ccaa3*gamma_bb[index]* \
                   gcaa*t122623*t122624*t122672*t122628*t122677;
                double t122716 = rho_b[index]*(8.334140006820045E15/1.40737488355328E14);
                double t122717 = 1.0/(omega*omega);
                double t122718 = pow(t122716,2.0/3.0);
                double t122721 = t122717*t122718;
                double t122719 = exp(-t122721);
                double t122720 = 1.0/pow(t122716,1.0/3.0);
                double t122722 = omega*omega;
                double t122723 = t122719-1.0;
                double t122724 = 1.0/pow(t122716,2.0/3.0);
                double t122725 = 1.0/pow(t122716,4.0/3.0);
                double t122726 = 1.0/omega;
                double t122748 = t122722*t122723*t122724*(1.0/2.0);
                double t122727 = t122719-t122748;
                double t122728 = gx*gx;
                double t122729 = t122728*t122728;
                double t122730 = gamma_bb[index]*gx*t122622;
                double t122731 = t122730+1.0;
                double t122732 = gamma_bb[index]*gx*t122622*3.0;
                double t122733 = gamma_bb[index]*gx*t122623*t122628*t122728;
                double t122734 = t122623*t122627*t122728*3.0;
                double t122735 = t122732+t122733+t122734+1.0;
                double t122736 = gamma_bb[index]*gx*t122622*4.0;
                double t122737 = gamma_bb[index]*gx*t122623*t122628*t122728*4.0;
                double t122738 = t122623*t122627*t122728*6.0;
                double t122739 = t122626*t122635*t122729;
                double t122740 = t122736+t122737+t122738+t122739+1.0;
                double t122741 = gamma_bb[index]*gx*t122622*2.0;
                double t122742 = t122623*t122627*t122728;
                double t122743 = t122741+t122742+1.0;
                double t122744 = pow(t122716,1.0/3.0);
                double t122745 = t122726*t122744;
                double t122746 = erf(t122745);
                double t122747 = t122746*(3.991211251234741E15/2.251799813685248E15);
                double t122749 = omega*t122720*t122727;
                double t122750 = t122747+t122749;
                double t122751 = 1.0/t122731;
                double t122752 = cx1*gx*t122622*t122751;
                double t122753 = 1.0/t122740;
                double t122754 = cx4*gamma_bb[index]*t122623*t122626*t122753*t122729*4.0;
                double t122755 = 1.0/t122743;
                double t122756 = cx2*gamma_bb[index]*t122627*t122728*t122755*2.0;
                double t122757 = 1.0/t122735;
                double t122758 = cx3*gx*t122623*t122628*t122728*t122757*3.0;
                double t122759 = 1.0/(t122731*t122731);
                double t122760 = gx*t122622*3.0;
                double t122761 = gamma_bb[index]*t122627*t122728*6.0;
                double t122762 = gx*t122623*t122628*t122728*3.0;
                double t122763 = t122760+t122761+t122762;
                double t122764 = 1.0/(t122735*t122735);
                double t122765 = gx*t122622*4.0;
                double t122766 = gamma_bb[index]*t122627*t122728*1.2E1;
                double t122767 = gx*t122623*t122628*t122728*1.2E1;
                double t122768 = gamma_bb[index]*t122623*t122626*t122729*4.0;
                double t122769 = t122765+t122766+t122767+t122768;
                double t122770 = 1.0/(t122740*t122740);
                double t122771 = gx*t122622*2.0;
                double t122772 = gamma_bb[index]*t122627*t122728*2.0;
                double t122773 = t122771+t122772;
                double t122774 = 1.0/(t122743*t122743);
                double t122775 = t122752+t122754+t122756+t122758-cx1*gamma_bb[index]*t122627*t122728*t122759-cx2* \
                   t122623*t122627*t122728*t122773*t122774-cx4*t122626*t122635*t122770*t122729*t122769-cx3*gamma_bb[index]* \
                   gx*t122623*t122628*t122763*t122728*t122764;
                double t122776 = pow(rho_b[index],4.0/3.0);
                double t122777 = omega*t122720*t122750*(4.0/3.0);
                double t122778 = t122777-1.0;
                double t122779 = gamma_bb[index]*gx*t122671*(1.6E1/3.0);
                double t122780 = t122623*t122728*t122668*(1.6E1/3.0);
                double t122781 = t122780+t122779;
                double t122782 = gamma_bb[index]*gx*t122671*8.0;
                double t122783 = gamma_bb[index]*gx*t122623*t122670*t122728*8.0;
                double t122784 = t122623*t122728*t122668*1.6E1;
                double t122785 = t122782+t122783+t122784;
                double t122786 = gamma_bb[index]*gx*t122671*(3.2E1/3.0);
                double t122787 = gamma_bb[index]*gx*t122623*t122670*t122728*3.2E1;
                double t122788 = t122623*t122728*t122668*3.2E1;
                double t122789 = t122635*t122729*t122678*(3.2E1/3.0);
                double t122790 = t122786+t122787+t122788+t122789;
                v_rho_b_gamma_bb_[index] = -t122715*(t122663+t122646*t122649*(t122662-c0p*t122621*t122619*2.0))+rho_b[index]* \
                   t122715*(-t122710+t122646*t122649*(t122710-(t122661*1.0/(t122655*t122655)*(b2f*c*t122700*(1.0/3.0) \
                   +b4f*t122701*t122608*(2.0/3.0)+b1f*c*t122700*t122702*(1.0/6.0)+b3f*c*t122700*t122606*(1.0/2.0)))/t122658+ \
                   a1f*c*c0f*t122700*t122659*(2.0/3.0)-a1p*c*c0p*t122700*t122619*(2.0/3.0))+a1p*c*c0p*t122700*t122619* \
                   (2.0/3.0))-rho_b[index]*(t122663+t122646*t122649*(t122662-t122663))*(ccaa1*gcaa*t122671*t122664*(- \
                   8.0/3.0)-ccaa2*gamma_bb[index]*t122624*t122666*t122668*(3.2E1/3.0)+ccaa1*gamma_bb[index]*t122624*t122668* \
                   t122669*8.0+ccaa2*t122623*t122624*t122673*t122668*t122687*(1.6E1/3.0)+ccaa4*t122625*t122635*t122684* \
                   t122678*t122679*(3.2E1/3.0)+ccaa4*t122625*t122626*t122635*t122679*(gcaa*t122671*(3.2E1/3.0)+gamma_bb[index]* \
                   t122624*t122668*6.4E1+gamma_bb[index]*t122623*t122625*t122678*(1.28E2/3.0)+gcaa*t122623*t122624*t122670* \
                   9.6E1)-ccaa1*gcaa*1.0/(t122630*t122630*t122630)*t122623*t122624*t122670*(1.6E1/3.0)+ccaa2*t122623* \
                   t122624*t122627*t122673*(gcaa*t122671*(1.6E1/3.0)+gamma_bb[index]*t122624*t122668*(3.2E1/3.0))+ccaa2* \
                   gamma_bb[index]*t122624*t122627*t122690*t122673*2.0-ccaa4*gamma_bb[index]*t122623*t122625*t122665* \
                   t122678*(1.28E2/3.0)-ccaa3*gcaa*t122623*t122624*t122670*t122667*2.4E1+ccaa4*gamma_bb[index]*t122623* \
                   t122625*t122626*t122679*t122699*4.0+ccaa3*gcaa*t122623*t122624*t122672*t122628*t122694*3.0-ccaa2*t122623* \
                   t122624*1.0/(t122643*t122643*t122643)*t122627*t122690*t122687*2.0-ccaa4*1.0/(t122640*t122640*t122640) \
                   *t122625*t122626*t122635*t122684*t122699*2.0+ccaa3*gamma_bb[index]*gcaa*t122623*t122624*t122672*t122628* \
                   (gcaa*t122671*8.0+gamma_bb[index]*t122624*t122668*3.2E1+gcaa*t122623*t122624*t122670*2.4E1)+ccaa3* \
                   gamma_bb[index]*gcaa*t122623*t122624*t122670*t122672*t122677*8.0-ccaa3*gamma_bb[index]*gcaa*t122623* \
                   t122624*1.0/(t122634*t122634*t122634)*t122628*t122694*t122677*2.0)-c0*t122775*t122776*(omega*t122720* \
                   (omega*t122725*t122727*(-2.778046668940015E15/1.40737488355328E14)+omega*t122720*((t122719*(1.0/3.0) \
                   )/rho_b[index]+t122722*t122723*1.0/pow(t122716,5.0/3.0)*(2.778046668940015E15/1.40737488355328E14) \
                   -t122720*t122717*t122719*(2.778046668940015E15/7.0368744177664E13))+1.0/sqrt(3.141592653589793)*t122724* \
                   t122726*t122719*(1.108777112152858E31/1.584563250285287E29))*(4.0/3.0)-omega*t122750*t122725*(2.778046668940015E15/ \
                   1.05553116266496E14))-c0*t122776*t122778*(cx1*gx*t122751*t122671*(-8.0/3.0)+cx1*gamma_bb[index]*t122728* \
                   t122668*t122759*8.0-cx2*gamma_bb[index]*t122728*t122755*t122668*(3.2E1/3.0)+cx2*t122623*t122728*t122773* \
                   t122774*t122668*(1.6E1/3.0)+cx4*t122635*t122770*t122729*t122678*t122769*(3.2E1/3.0)+cx4*t122626*t122635* \
                   t122770*t122729*(gx*t122671*(3.2E1/3.0)+gamma_bb[index]*t122728*t122668*6.4E1+gamma_bb[index]*t122623* \
                   t122729*t122678*(1.28E2/3.0)+gx*t122623*t122670*t122728*9.6E1)-cx1*gx*t122623*1.0/(t122731*t122731* \
                   t122731)*t122670*t122728*(1.6E1/3.0)+cx2*t122623*t122627*t122728*t122774*(gx*t122671*(1.6E1/3.0)+gamma_bb[index]* \
                   t122728*t122668*(3.2E1/3.0))+cx2*gamma_bb[index]*t122627*t122781*t122728*t122774*2.0-cx4*gamma_bb[index]* \
                   t122623*t122753*t122729*t122678*(1.28E2/3.0)-cx3*gx*t122623*t122670*t122728*t122757*2.4E1+cx4*gamma_bb[index]* \
                   t122623*t122626*t122770*t122790*t122729*4.0+cx3*gx*t122623*t122628*t122728*t122764*t122785*3.0-cx2* \
                   t122623*1.0/(t122743*t122743*t122743)*t122627*t122781*t122728*t122773*2.0-cx4*1.0/(t122740*t122740* \
                   t122740)*t122626*t122635*t122790*t122729*t122769*2.0+cx3*gamma_bb[index]*gx*t122623*t122628*t122728* \
                   t122764*(gx*t122671*8.0+gamma_bb[index]*t122728*t122668*3.2E1+gx*t122623*t122670*t122728*2.4E1)+cx3* \
                   gamma_bb[index]*gx*t122623*t122670*t122763*t122728*t122764*8.0-cx3*gamma_bb[index]*gx*t122623*1.0/ \
                   (t122735*t122735*t122735)*t122628*t122763*t122728*t122785*2.0)-c0*pow(rho_b[index],1.0/3.0)*t122775* \
                   t122778*(4.0/3.0);
            } else {
                v_rho_b_gamma_bb_[index] = 0.0;
            } 

            //V_gamma_aa_gamma_aa
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t121617 = 1.0/pow(rho_a[index],1.0/3.0);
                double t121618 = c*t121617;
                double t121619 = sqrt(t121618);
                double t121620 = pow(t121618,3.0/2.0);
                double t121621 = c*c;
                double t121622 = 1.0/pow(rho_a[index],2.0/3.0);
                double t121623 = 1.0/c0p;
                double t121624 = b1p*t121619;
                double t121625 = b3p*t121620;
                double t121626 = b4p*t121621*t121622;
                double t121627 = b2p*c*t121617;
                double t121628 = t121624+t121625+t121626+t121627;
                double t121629 = 1.0/t121628;
                double t121630 = t121623*t121629*(1.0/2.0);
                double t121631 = t121630+1.0;
                double t121632 = log(t121631);
                double t121633 = a1p*c*t121617;
                double t121634 = t121633+1.0;
                double t121635 = pow(2.0,1.0/3.0);
                double t121636 = t121635*2.0;
                double t121637 = t121636-2.0;
                double t121638 = two_13*2.0;
                double t121639 = t121638-2.0;
                double t121640 = 1.0/t121639;
                double t121641 = 1.0/c0f;
                double t121642 = 1.0/pow(rho_b[index],1.0/3.0);
                double t121643 = c*t121642;
                double t121644 = sqrt(t121643);
                double t121645 = pow(t121643,3.0/2.0);
                double t121646 = 1.0/pow(rho_b[index],2.0/3.0);
                double t121647 = b1p*t121644;
                double t121648 = b3p*t121645;
                double t121649 = b4p*t121621*t121646;
                double t121650 = b2p*c*t121642;
                double t121651 = t121650+t121647+t121648+t121649;
                double t121652 = 1.0/t121651;
                double t121653 = t121623*t121652*(1.0/2.0);
                double t121654 = t121653+1.0;
                double t121655 = log(t121654);
                double t121656 = a1p*c*t121642;
                double t121657 = t121656+1.0;
                double t121658 = c0p*t121655*t121657*2.0;
                double t121659 = rho_a[index]+rho_b[index];
                double t121660 = 1.0/pow(t121659,1.0/3.0);
                double t121661 = c*t121660;
                double t121662 = sqrt(t121661);
                double t121663 = pow(t121661,3.0/2.0);
                double t121664 = 1.0/pow(t121659,2.0/3.0);
                double t121665 = b1p*t121662;
                double t121666 = b3p*t121663;
                double t121667 = b4p*t121621*t121664;
                double t121668 = b2p*c*t121660;
                double t121669 = t121665+t121666+t121667+t121668;
                double t121670 = 1.0/t121669;
                double t121671 = t121623*t121670*(1.0/2.0);
                double t121672 = t121671+1.0;
                double t121673 = log(t121672);
                double t121674 = a1p*c*t121660;
                double t121675 = t121674+1.0;
                double t121676 = c0p*t121673*t121675*2.0;
                double t121677 = rho_a[index]-rho_b[index];
                double t121678 = t121677*t121677;
                double t121679 = 1.0/t121659;
                double t121680 = t121677*t121679;
                double t121681 = 1.0/(t121659*t121659*t121659*t121659);
                double t121682 = t121678*t121678;
                double t121683 = t121680+1.0;
                double t121684 = pow(t121683,4.0/3.0);
                double t121685 = -t121680+1.0;
                double t121686 = pow(t121685,4.0/3.0);
                double t121687 = t121684+t121686-2.0;
                double t121688 = gcab*gcab;
                double t121689 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t121690 = 1.0/pow(rho_a[index],8.0/3.0);
                double t121691 = gamma_aa[index]*t121690*(1.0/2.0);
                double t121692 = 1.0/pow(rho_b[index],8.0/3.0);
                double t121693 = gamma_bb[index]*t121692*(1.0/2.0);
                double t121694 = t121691+t121693;
                double t121695 = gcab*t121694;
                double t121696 = t121695+1.0;
                double t121697 = t121694*t121694;
                double t121698 = t121688*t121697;
                double t121699 = gcab*t121694*2.0;
                double t121700 = t121698+t121699+1.0;
                double t121701 = t121688*t121688;
                double t121718 = gcab*t121690*2.0;
                double t121719 = t121690*t121694*t121688*6.0;
                double t121720 = gcab*t121690*t121688*t121697*6.0;
                double t121721 = t121701*t121690*t121694*t121697*2.0;
                double t121702 = t121720+t121721+t121718+t121719;
                double t121703 = t121697*t121697;
                double t121723 = gcab*t121690*(3.0/2.0);
                double t121724 = t121690*t121694*t121688*3.0;
                double t121725 = gcab*t121690*t121688*t121697*(3.0/2.0);
                double t121704 = t121723+t121724+t121725;
                double t121705 = t121688*t121697*3.0;
                double t121706 = gcab*t121694*t121688*t121697;
                double t121707 = gcab*t121694*3.0;
                double t121708 = t121705+t121706+t121707+1.0;
                double t121715 = gcab*t121690;
                double t121716 = t121690*t121694*t121688;
                double t121709 = t121715+t121716;
                double t121710 = t121688*t121697*6.0;
                double t121711 = gcab*t121694*t121688*t121697*4.0;
                double t121712 = t121701*t121703;
                double t121713 = gcab*t121694*4.0;
                double t121714 = t121710+t121711+t121712+t121713+1.0;
                double t121717 = 1.0/(t121700*t121700);
                double t121722 = 1.0/(t121714*t121714);
                double t121726 = 1.0/(t121708*t121708);
                double t121727 = c0p*t121632*t121634*2.0;
                double t121728 = b1f*t121619;
                double t121729 = b3f*t121620;
                double t121730 = b4f*t121621*t121622;
                double t121731 = b2f*c*t121617;
                double t121732 = t121730+t121731+t121728+t121729;
                double t121733 = 1.0/t121732;
                double t121734 = t121641*t121733*(1.0/2.0);
                double t121735 = t121734+1.0;
                double t121736 = log(t121735);
                double t121737 = a1f*c*t121617;
                double t121738 = t121737+1.0;
                double t121739 = t121727-c0f*t121736*t121738*2.0;
                double t121740 = t121727-t121640*t121637*t121739;
                double t121741 = gcaa*gcaa;
                double t121742 = gamma_aa[index]*gamma_aa[index];
                double t121743 = t121741*t121741;
                double t121744 = 1.0/pow(rho_a[index],3.2E1/3.0);
                double t121745 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t121746 = gamma_aa[index]*gcaa*t121690;
                double t121747 = t121746+1.0;
                double t121748 = gamma_aa[index]*gcaa*t121690*2.0;
                double t121749 = t121741*t121742*t121689;
                double t121750 = t121748+t121749+1.0;
                double t121751 = gamma_aa[index]*gcaa*t121690*3.0;
                double t121752 = gamma_aa[index]*gcaa*t121741*t121742*t121745;
                double t121753 = t121741*t121742*t121689*3.0;
                double t121754 = t121751+t121752+t121753+1.0;
                double t121755 = t121742*t121742;
                double t121771 = gcaa*t121690*4.0;
                double t121772 = gamma_aa[index]*t121741*t121689*1.2E1;
                double t121773 = gcaa*t121741*t121742*t121745*1.2E1;
                double t121774 = gamma_aa[index]*t121742*t121743*t121744*4.0;
                double t121756 = t121771+t121772+t121773+t121774;
                double t121757 = gamma_aa[index]*gcaa*t121690*4.0;
                double t121758 = gamma_aa[index]*gcaa*t121741*t121742*t121745*4.0;
                double t121759 = t121741*t121742*t121689*6.0;
                double t121760 = t121743*t121744*t121755;
                double t121761 = t121760+t121757+t121758+t121759+1.0;
                double t121764 = gcaa*t121690*2.0;
                double t121765 = gamma_aa[index]*t121741*t121689*2.0;
                double t121762 = t121764+t121765;
                double t121763 = 1.0/(t121754*t121754);
                double t121766 = 1.0/(t121750*t121750);
                double t121767 = gcaa*t121690*3.0;
                double t121768 = gamma_aa[index]*t121741*t121689*6.0;
                double t121769 = gcaa*t121741*t121742*t121745*3.0;
                double t121770 = t121767+t121768+t121769;
                double t121775 = 1.0/(t121761*t121761);
                double t121776 = rho_a[index]*(8.334140006820045E15/1.40737488355328E14);
                double t121777 = 1.0/pow(t121776,1.0/3.0);
                double t121778 = 1.0/(omega*omega);
                double t121779 = pow(t121776,2.0/3.0);
                double t121780 = exp(-t121778*t121779);
                double t121781 = gx*gx;
                double t121782 = t121781*t121781;
                double t121783 = gamma_aa[index]*gx*t121690;
                double t121784 = t121783+1.0;
                double t121785 = gamma_aa[index]*gx*t121690*2.0;
                double t121786 = t121742*t121781*t121689;
                double t121787 = t121785+t121786+1.0;
                double t121788 = gamma_aa[index]*gx*t121690*3.0;
                double t121789 = gamma_aa[index]*gx*t121742*t121745*t121781;
                double t121790 = t121742*t121781*t121689*3.0;
                double t121791 = t121790+t121788+t121789+1.0;
                double t121807 = gx*t121690*4.0;
                double t121808 = gamma_aa[index]*t121781*t121689*1.2E1;
                double t121809 = gx*t121742*t121745*t121781*1.2E1;
                double t121810 = gamma_aa[index]*t121742*t121744*t121782*4.0;
                double t121792 = t121810+t121807+t121808+t121809;
                double t121793 = gamma_aa[index]*gx*t121690*4.0;
                double t121794 = gamma_aa[index]*gx*t121742*t121745*t121781*4.0;
                double t121795 = t121742*t121781*t121689*6.0;
                double t121796 = t121744*t121755*t121782;
                double t121797 = t121793+t121794+t121795+t121796+1.0;
                double t121800 = gx*t121690*2.0;
                double t121801 = gamma_aa[index]*t121781*t121689*2.0;
                double t121798 = t121800+t121801;
                double t121799 = 1.0/(t121791*t121791);
                double t121802 = 1.0/(t121787*t121787);
                double t121803 = gx*t121690*3.0;
                double t121804 = gamma_aa[index]*t121781*t121689*6.0;
                double t121805 = gx*t121742*t121745*t121781*3.0;
                double t121806 = t121803+t121804+t121805;
                double t121811 = 1.0/(t121797*t121797);
                v_gamma_aa_gamma_aa_[index] = (rho_a[index]*t121740+rho_b[index]*(t121658-t121640*t121637*(t121658- \
                   c0f*log((t121641*(1.0/2.0))/(b1f*t121644+b3f*t121645+b2f*c*t121642+b4f*t121621*t121646)+1.0)*(a1f* \
                   c*t121642+1.0)*2.0))-t121659*(t121676-t121640*t121681*t121682*t121687*(t121676-c0f*log((t121641*(1.0/ \
                   2.0))/(b1f*t121662+b3f*t121663+b2f*c*t121660+b4f*t121621*t121664)+1.0)*(a1f*c*t121660+1.0)*2.0)+(Aa* \
                   t121640*t121687*log((1.0/2.0)/(Aa*(b1a*t121662+b3a*t121663+b2a*c*t121660+b4a*t121621*t121664))+1.0) \
                   *(t121681*t121682-1.0)*(a1a*c*t121660+1.0)*2.0)/d2fz0))*((ccab2*t121688*t121689*(1.0/2.0))/t121700- \
                   ccab1*1.0/(t121696*t121696)*t121688*t121689*(1.0/2.0)+ccab4*t121701*(t121702*t121702)*t121703*1.0/ \
                   (t121714*t121714*t121714)*2.0+ccab2*1.0/(t121700*t121700*t121700)*(t121709*t121709)*t121688*t121697* \
                   2.0-ccab2*t121701*t121717*t121697*t121689*(1.0/2.0)-ccab4*t121701*t121703*t121722*(t121688*t121689* \
                   3.0+t121701*t121697*t121689*3.0+gcab*t121694*t121688*t121689*6.0)+(ccab4*t121701*t121697*t121689*3.0) \
                   /t121714-ccab2*t121690*t121717*t121709*t121694*t121688*2.0+(ccab3*gcab*t121694*t121688*t121689*(3.0/ \
                   2.0))/t121708+ccab1*gcab*t121694*1.0/(t121696*t121696*t121696)*t121688*t121689*(1.0/2.0)+ccab3*gcab* \
                   (t121704*t121704)*1.0/(t121708*t121708*t121708)*t121694*t121688*t121697*2.0-ccab3*gcab*t121704*t121690* \
                   t121726*t121688*t121697*3.0-ccab4*t121701*t121702*t121722*t121690*t121694*t121697*4.0-ccab3*gcab*t121726* \
                   t121694*t121688*t121697*(t121688*t121689*(3.0/2.0)+gcab*t121694*t121688*t121689*(3.0/2.0)))-rho_a[index]* \
                   t121740*((ccaa2*t121741*t121689*2.0)/t121750-ccaa1*t121741*1.0/(t121747*t121747)*t121689*2.0-ccaa2* \
                   t121742*t121743*t121744*t121766*2.0+(ccaa4*t121742*t121743*t121744*1.2E1)/t121761-ccaa4*t121743*t121744* \
                   t121755*t121775*(t121741*t121689*1.2E1+t121742*t121743*t121744*1.2E1+gamma_aa[index]*gcaa*t121741* \
                   t121745*2.4E1)+(ccaa3*gamma_aa[index]*gcaa*t121741*t121745*6.0)/t121754+ccaa1*gamma_aa[index]*gcaa* \
                   t121741*t121745*1.0/(t121747*t121747*t121747)*2.0+ccaa2*t121741*1.0/(t121750*t121750*t121750)*t121742* \
                   (t121762*t121762)*t121689*2.0+ccaa4*t121743*1.0/(t121761*t121761*t121761)*t121744*t121755*(t121756* \
                   t121756)*2.0-ccaa2*gamma_aa[index]*t121741*t121762*t121766*t121689*4.0-ccaa4*gamma_aa[index]*t121742* \
                   t121743*t121744*t121756*t121775*8.0-ccaa3*gcaa*t121741*t121742*t121770*t121745*t121763*6.0-ccaa3*gamma_aa[index]* \
                   gcaa*t121741*t121742*t121745*t121763*(t121741*t121689*6.0+gamma_aa[index]*gcaa*t121741*t121745*6.0) \
                   +ccaa3*gamma_aa[index]*gcaa*t121741*t121742*(t121770*t121770)*t121745*1.0/(t121754*t121754*t121754) \
                   *2.0)+c0*pow(rho_a[index],4.0/3.0)*(omega*t121777*(erf(pow(t121776,1.0/3.0)/omega)*(3.991211251234741E15/ \
                   2.251799813685248E15)+omega*t121777*(t121780-(omega*omega)*1.0/pow(t121776,2.0/3.0)*(t121780-1.0)* \
                   (1.0/2.0)))*(4.0/3.0)-1.0)*(cx1*t121781*1.0/(t121784*t121784)*t121689*2.0-(cx2*t121781*t121689*2.0) \
                   /t121787+cx2*t121802*t121742*t121744*t121782*2.0-(cx4*t121742*t121744*t121782*1.2E1)/t121797+cx4*t121811* \
                   t121744*t121755*t121782*(t121781*t121689*1.2E1+t121742*t121744*t121782*1.2E1+gamma_aa[index]*gx*t121745* \
                   t121781*2.4E1)-cx1*gamma_aa[index]*gx*t121745*t121781*1.0/(t121784*t121784*t121784)*2.0-(cx3*gamma_aa[index]* \
                   gx*t121745*t121781*6.0)/t121791-cx2*t121742*t121781*1.0/(t121787*t121787*t121787)*t121689*(t121798* \
                   t121798)*2.0-cx4*t121744*t121755*t121782*(t121792*t121792)*1.0/(t121797*t121797*t121797)*2.0+cx2*gamma_aa[index]* \
                   t121802*t121781*t121689*t121798*4.0+cx4*gamma_aa[index]*t121811*t121742*t121744*t121782*t121792*8.0+ \
                   cx3*gx*t121742*t121806*t121745*t121781*t121799*6.0+cx3*gamma_aa[index]*gx*t121742*t121745*t121781* \
                   t121799*(t121781*t121689*6.0+gamma_aa[index]*gx*t121745*t121781*6.0)-cx3*gamma_aa[index]*gx*t121742* \
                   (t121806*t121806)*t121745*t121781*1.0/(t121791*t121791*t121791)*2.0);
            } else if (rho_a[index] > cutoff_) {
                double t123547 = 1.0/pow(rho_a[index],1.0/3.0);
                double t123548 = c*t123547;
                double t123549 = sqrt(t123548);
                double t123550 = pow(t123548,3.0/2.0);
                double t123551 = c*c;
                double t123552 = 1.0/pow(rho_a[index],2.0/3.0);
                double t123553 = 1.0/c0p;
                double t123554 = b1p*t123549;
                double t123555 = b3p*t123550;
                double t123556 = b4p*t123551*t123552;
                double t123557 = b2p*c*t123547;
                double t123558 = t123554+t123555+t123556+t123557;
                double t123559 = 1.0/t123558;
                double t123560 = t123553*t123559*(1.0/2.0);
                double t123561 = t123560+1.0;
                double t123562 = log(t123561);
                double t123563 = a1p*c*t123547;
                double t123564 = t123563+1.0;
                double t123565 = gcaa*gcaa;
                double t123566 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t123567 = 1.0/pow(rho_a[index],8.0/3.0);
                double t123568 = gamma_aa[index]*gamma_aa[index];
                double t123569 = t123565*t123565;
                double t123570 = 1.0/pow(rho_a[index],3.2E1/3.0);
                double t123571 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t123572 = gamma_aa[index]*gcaa*t123567;
                double t123573 = t123572+1.0;
                double t123574 = gamma_aa[index]*gcaa*t123567*2.0;
                double t123575 = t123565*t123566*t123568;
                double t123576 = t123574+t123575+1.0;
                double t123577 = gamma_aa[index]*gcaa*t123567*3.0;
                double t123578 = gamma_aa[index]*gcaa*t123571*t123565*t123568;
                double t123579 = t123565*t123566*t123568*3.0;
                double t123580 = t123577+t123578+t123579+1.0;
                double t123581 = t123568*t123568;
                double t123597 = gcaa*t123567*4.0;
                double t123598 = gamma_aa[index]*t123565*t123566*1.2E1;
                double t123599 = gcaa*t123571*t123565*t123568*1.2E1;
                double t123600 = gamma_aa[index]*t123570*t123568*t123569*4.0;
                double t123582 = t123600+t123597+t123598+t123599;
                double t123583 = gamma_aa[index]*gcaa*t123567*4.0;
                double t123584 = gamma_aa[index]*gcaa*t123571*t123565*t123568*4.0;
                double t123585 = t123565*t123566*t123568*6.0;
                double t123586 = t123570*t123581*t123569;
                double t123587 = t123583+t123584+t123585+t123586+1.0;
                double t123590 = gcaa*t123567*2.0;
                double t123591 = gamma_aa[index]*t123565*t123566*2.0;
                double t123588 = t123590+t123591;
                double t123589 = 1.0/(t123580*t123580);
                double t123592 = 1.0/(t123576*t123576);
                double t123593 = gcaa*t123567*3.0;
                double t123594 = gamma_aa[index]*t123565*t123566*6.0;
                double t123595 = gcaa*t123571*t123565*t123568*3.0;
                double t123596 = t123593+t123594+t123595;
                double t123601 = 1.0/(t123587*t123587);
                double t123602 = rho_a[index]*(8.334140006820045E15/1.40737488355328E14);
                double t123603 = 1.0/pow(t123602,1.0/3.0);
                double t123604 = 1.0/(omega*omega);
                double t123605 = pow(t123602,2.0/3.0);
                double t123606 = exp(-t123604*t123605);
                double t123607 = gx*gx;
                double t123608 = t123607*t123607;
                double t123609 = gamma_aa[index]*gx*t123567;
                double t123610 = t123609+1.0;
                double t123611 = gamma_aa[index]*gx*t123567*2.0;
                double t123612 = t123607*t123566*t123568;
                double t123613 = t123611+t123612+1.0;
                double t123614 = gamma_aa[index]*gx*t123567*3.0;
                double t123615 = gamma_aa[index]*gx*t123571*t123607*t123568;
                double t123616 = t123607*t123566*t123568*3.0;
                double t123617 = t123614+t123615+t123616+1.0;
                double t123633 = gx*t123567*4.0;
                double t123634 = gamma_aa[index]*t123607*t123566*1.2E1;
                double t123635 = gx*t123571*t123607*t123568*1.2E1;
                double t123636 = gamma_aa[index]*t123570*t123608*t123568*4.0;
                double t123618 = t123633+t123634+t123635+t123636;
                double t123619 = gamma_aa[index]*gx*t123567*4.0;
                double t123620 = gamma_aa[index]*gx*t123571*t123607*t123568*4.0;
                double t123621 = t123607*t123566*t123568*6.0;
                double t123622 = t123570*t123581*t123608;
                double t123623 = t123620+t123621+t123622+t123619+1.0;
                double t123626 = gx*t123567*2.0;
                double t123627 = gamma_aa[index]*t123607*t123566*2.0;
                double t123624 = t123626+t123627;
                double t123625 = 1.0/(t123617*t123617);
                double t123628 = 1.0/(t123613*t123613);
                double t123629 = gx*t123567*3.0;
                double t123630 = gamma_aa[index]*t123607*t123566*6.0;
                double t123631 = gx*t123571*t123607*t123568*3.0;
                double t123632 = t123630+t123631+t123629;
                double t123637 = 1.0/(t123623*t123623);
                v_gamma_aa_gamma_aa_[index] = rho_a[index]*(((pow(2.0,1.0/3.0)*2.0-2.0)*(c0f*log((1.0/2.0)/(c0f*(b1f* \
                   t123549+b3f*t123550+b2f*c*t123547+b4f*t123551*t123552))+1.0)*(a1f*c*t123547+1.0)*2.0-c0p*t123562*t123564* \
                   2.0))/(two_13*2.0-2.0)+c0p*t123562*t123564*2.0)*(ccaa1*1.0/(t123573*t123573)*t123565*t123566*2.0-(ccaa2* \
                   t123565*t123566*2.0)/t123576+ccaa2*t123570*t123592*t123568*t123569*2.0-(ccaa4*t123570*t123568*t123569* \
                   1.2E1)/t123587+ccaa4*t123601*t123570*t123581*t123569*(t123565*t123566*1.2E1+t123570*t123568*t123569* \
                   1.2E1+gamma_aa[index]*gcaa*t123571*t123565*2.4E1)-(ccaa3*gamma_aa[index]*gcaa*t123571*t123565*6.0) \
                   /t123580-ccaa1*gamma_aa[index]*gcaa*t123571*1.0/(t123573*t123573*t123573)*t123565*2.0-ccaa4*t123570* \
                   t123581*(t123582*t123582)*t123569*1.0/(t123587*t123587*t123587)*2.0-ccaa2*t123565*t123566*1.0/(t123576* \
                   t123576*t123576)*t123568*(t123588*t123588)*2.0+ccaa2*gamma_aa[index]*t123565*t123592*t123566*t123588* \
                   4.0+ccaa4*gamma_aa[index]*t123601*t123570*t123582*t123568*t123569*8.0+ccaa3*gcaa*t123571*t123565*t123568* \
                   t123596*t123589*6.0+ccaa3*gamma_aa[index]*gcaa*t123571*t123565*t123568*t123589*(t123565*t123566*6.0+ \
                   gamma_aa[index]*gcaa*t123571*t123565*6.0)-ccaa3*gamma_aa[index]*gcaa*t123571*1.0/(t123580*t123580* \
                   t123580)*t123565*t123568*(t123596*t123596)*2.0)+c0*pow(rho_a[index],4.0/3.0)*(omega*t123603*(erf(pow(t123602,1.0/ \
                   3.0)/omega)*(3.991211251234741E15/2.251799813685248E15)+omega*t123603*(t123606-(omega*omega)*1.0/pow(t123602,2.0/ \
                   3.0)*(t123606-1.0)*(1.0/2.0)))*(4.0/3.0)-1.0)*(cx1*1.0/(t123610*t123610)*t123607*t123566*2.0-(cx2* \
                   t123607*t123566*2.0)/t123613+cx2*t123570*t123608*t123628*t123568*2.0-(cx4*t123570*t123608*t123568* \
                   1.2E1)/t123623+cx4*t123570*t123581*t123608*t123637*(t123607*t123566*1.2E1+t123570*t123608*t123568* \
                   1.2E1+gamma_aa[index]*gx*t123571*t123607*2.4E1)-cx1*gamma_aa[index]*gx*1.0/(t123610*t123610*t123610) \
                   *t123571*t123607*2.0-(cx3*gamma_aa[index]*gx*t123571*t123607*6.0)/t123617-cx2*1.0/(t123613*t123613* \
                   t123613)*(t123624*t123624)*t123607*t123566*t123568*2.0-cx4*1.0/(t123623*t123623*t123623)*t123570*t123581* \
                   t123608*(t123618*t123618)*2.0+cx2*gamma_aa[index]*t123624*t123607*t123628*t123566*4.0+cx4*gamma_aa[index]* \
                   t123570*t123608*t123618*t123637*t123568*8.0+cx3*gx*t123632*t123571*t123607*t123625*t123568*6.0+cx3* \
                   gamma_aa[index]*gx*t123571*t123607*t123625*t123568*(t123607*t123566*6.0+gamma_aa[index]*gx*t123571* \
                   t123607*6.0)-cx3*gamma_aa[index]*gx*(t123632*t123632)*t123571*t123607*1.0/(t123617*t123617*t123617) \
                   *t123568*2.0);
            } else if (rho_b[index] > cutoff_) {
                v_gamma_aa_gamma_aa_[index] = 0.0;
            } else {
                v_gamma_aa_gamma_aa_[index] = 0.0;
            } 

            //V_gamma_aa_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_aa_gamma_ab_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_aa_gamma_ab_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_aa_gamma_ab_[index] = 0.0;
            } else {
                v_gamma_aa_gamma_ab_[index] = 0.0;
            } 

            //V_gamma_aa_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t121814 = 1.0/pow(rho_a[index],1.0/3.0);
                double t121815 = c*t121814;
                double t121816 = sqrt(t121815);
                double t121817 = pow(t121815,3.0/2.0);
                double t121818 = c*c;
                double t121819 = 1.0/pow(rho_a[index],2.0/3.0);
                double t121820 = 1.0/c0p;
                double t121821 = b1p*t121816;
                double t121822 = b3p*t121817;
                double t121823 = b4p*t121818*t121819;
                double t121824 = b2p*c*t121814;
                double t121825 = t121821+t121822+t121823+t121824;
                double t121826 = 1.0/t121825;
                double t121827 = t121820*t121826*(1.0/2.0);
                double t121828 = t121827+1.0;
                double t121829 = log(t121828);
                double t121830 = a1p*c*t121814;
                double t121831 = t121830+1.0;
                double t121832 = pow(2.0,1.0/3.0);
                double t121833 = t121832*2.0;
                double t121834 = t121833-2.0;
                double t121835 = two_13*2.0;
                double t121836 = t121835-2.0;
                double t121837 = 1.0/t121836;
                double t121838 = 1.0/c0f;
                double t121839 = 1.0/pow(rho_b[index],1.0/3.0);
                double t121840 = c*t121839;
                double t121841 = sqrt(t121840);
                double t121842 = pow(t121840,3.0/2.0);
                double t121843 = 1.0/pow(rho_b[index],2.0/3.0);
                double t121844 = b1p*t121841;
                double t121845 = b3p*t121842;
                double t121846 = b4p*t121843*t121818;
                double t121847 = b2p*c*t121839;
                double t121848 = t121844+t121845+t121846+t121847;
                double t121849 = 1.0/t121848;
                double t121850 = t121820*t121849*(1.0/2.0);
                double t121851 = t121850+1.0;
                double t121852 = log(t121851);
                double t121853 = a1p*c*t121839;
                double t121854 = t121853+1.0;
                double t121855 = c0p*t121852*t121854*2.0;
                double t121856 = rho_a[index]+rho_b[index];
                double t121857 = 1.0/pow(t121856,1.0/3.0);
                double t121858 = c*t121857;
                double t121859 = sqrt(t121858);
                double t121860 = pow(t121858,3.0/2.0);
                double t121861 = 1.0/pow(t121856,2.0/3.0);
                double t121862 = b1p*t121859;
                double t121863 = b3p*t121860;
                double t121864 = b4p*t121861*t121818;
                double t121865 = b2p*c*t121857;
                double t121866 = t121862+t121863+t121864+t121865;
                double t121867 = 1.0/t121866;
                double t121868 = t121820*t121867*(1.0/2.0);
                double t121869 = t121868+1.0;
                double t121870 = log(t121869);
                double t121871 = a1p*c*t121857;
                double t121872 = t121871+1.0;
                double t121873 = c0p*t121870*t121872*2.0;
                double t121874 = rho_a[index]-rho_b[index];
                double t121875 = t121874*t121874;
                double t121876 = 1.0/t121856;
                double t121877 = t121874*t121876;
                double t121878 = 1.0/(t121856*t121856*t121856*t121856);
                double t121879 = t121875*t121875;
                double t121880 = t121877+1.0;
                double t121881 = pow(t121880,4.0/3.0);
                double t121882 = -t121877+1.0;
                double t121883 = pow(t121882,4.0/3.0);
                double t121884 = t121881+t121883-2.0;
                double t121885 = gcab*gcab;
                double t121888 = 1.0/pow(rho_a[index],8.0/3.0);
                double t121889 = 1.0/pow(rho_b[index],8.0/3.0);
                double t121890 = gamma_aa[index]*t121888*(1.0/2.0);
                double t121891 = gamma_bb[index]*t121889*(1.0/2.0);
                double t121886 = t121890+t121891;
                double t121887 = t121886*t121886;
                double t121892 = t121885*t121885;
                double t121893 = t121887*t121887;
                double t121894 = t121885*t121887*3.0;
                double t121895 = gcab*t121885*t121886*t121887;
                double t121896 = gcab*t121886*3.0;
                double t121897 = t121894+t121895+t121896+1.0;
                double t121898 = t121885*t121887;
                double t121899 = gcab*t121886*2.0;
                double t121900 = t121898+t121899+1.0;
                double t121901 = t121885*t121887*6.0;
                double t121902 = gcab*t121885*t121886*t121887*4.0;
                double t121903 = t121892*t121893;
                double t121904 = gcab*t121886*4.0;
                double t121905 = t121901+t121902+t121903+t121904+1.0;
                double t121906 = 1.0/(t121900*t121900);
                double t121907 = gcab*t121888;
                double t121908 = t121885*t121886*t121888;
                double t121909 = t121907+t121908;
                double t121910 = gcab*t121889;
                double t121911 = t121885*t121886*t121889;
                double t121912 = t121910+t121911;
                double t121913 = gcab*t121886;
                double t121914 = t121913+1.0;
                double t121915 = gcab*t121888*2.0;
                double t121916 = t121885*t121886*t121888*6.0;
                double t121917 = gcab*t121885*t121887*t121888*6.0;
                double t121918 = t121892*t121886*t121887*t121888*2.0;
                double t121919 = t121915+t121916+t121917+t121918;
                double t121920 = 1.0/(t121905*t121905);
                double t121921 = gcab*t121889*2.0;
                double t121922 = t121885*t121886*t121889*6.0;
                double t121923 = gcab*t121885*t121887*t121889*6.0;
                double t121924 = t121892*t121886*t121887*t121889*2.0;
                double t121925 = t121921+t121922+t121923+t121924;
                double t121926 = gcab*t121888*(3.0/2.0);
                double t121927 = t121885*t121886*t121888*3.0;
                double t121928 = gcab*t121885*t121887*t121888*(3.0/2.0);
                double t121929 = t121926+t121927+t121928;
                double t121930 = 1.0/(t121897*t121897);
                double t121931 = gcab*t121889*(3.0/2.0);
                double t121932 = t121885*t121886*t121889*3.0;
                double t121933 = gcab*t121885*t121887*t121889*(3.0/2.0);
                double t121934 = t121931+t121932+t121933;
                v_gamma_aa_gamma_bb_[index] = (-rho_b[index]*(t121855-t121834*t121837*(t121855-c0f*log((t121838*(1.0/ \
                   2.0))/(b1f*t121841+b3f*t121842+b2f*c*t121839+b4f*t121843*t121818)+1.0)*(a1f*c*t121839+1.0)*2.0))+t121856* \
                   (t121873-t121837*t121884*t121878*t121879*(t121873-c0f*log((t121838*(1.0/2.0))/(b1f*t121859+b3f*t121860+ \
                   b2f*c*t121857+b4f*t121861*t121818)+1.0)*(a1f*c*t121857+1.0)*2.0)+(Aa*t121837*t121884*log((1.0/2.0) \
                   /(Aa*(b1a*t121859+b3a*t121860+b2a*c*t121857+b4a*t121861*t121818))+1.0)*(t121878*t121879-1.0)*(a1a* \
                   c*t121857+1.0)*2.0)/d2fz0)+rho_a[index]*(t121834*t121837*(c0p*t121831*t121829*2.0-c0f*log((t121838* \
                   (1.0/2.0))/(b1f*t121816+b3f*t121817+b2f*c*t121814+b4f*t121818*t121819)+1.0)*(a1f*c*t121814+1.0)*2.0) \
                   -c0p*t121831*t121829*2.0))*(ccab4*t121920*t121892*t121893*(t121885*t121888*t121889*3.0+t121892*t121887* \
                   t121888*t121889*3.0+gcab*t121885*t121886*t121888*t121889*6.0)-(ccab2*t121885*t121888*t121889*(1.0/ \
                   2.0))/t121900+ccab1*1.0/(t121914*t121914)*t121885*t121888*t121889*(1.0/2.0)+ccab2*t121912*t121906* \
                   t121885*t121886*t121888+ccab2*t121906*t121909*t121885*t121886*t121889+ccab2*t121906*t121892*t121887* \
                   t121888*t121889*(1.0/2.0)-ccab2*1.0/(t121900*t121900*t121900)*t121912*t121909*t121885*t121887*2.0- \
                   ccab4*1.0/(t121905*t121905*t121905)*t121925*t121892*t121919*t121893*2.0-(ccab4*t121892*t121887*t121888* \
                   t121889*3.0)/t121905+ccab3*gcab*t121930*t121934*t121885*t121887*t121888*(3.0/2.0)+ccab3*gcab*t121930* \
                   t121929*t121885*t121887*t121889*(3.0/2.0)+ccab4*t121920*t121925*t121892*t121886*t121887*t121888*2.0+ \
                   ccab4*t121920*t121892*t121919*t121886*t121887*t121889*2.0+ccab3*gcab*t121930*t121885*t121886*t121887* \
                   (t121885*t121888*t121889*(3.0/2.0)+gcab*t121885*t121886*t121888*t121889*(3.0/2.0))-ccab1*gcab*1.0/ \
                   (t121914*t121914*t121914)*t121885*t121886*t121888*t121889*(1.0/2.0)-(ccab3*gcab*t121885*t121886*t121888* \
                   t121889*(3.0/2.0))/t121897-ccab3*gcab*t121934*t121929*t121885*t121886*t121887*1.0/(t121897*t121897* \
                   t121897)*2.0);
            } else if (rho_a[index] > cutoff_) {
                v_gamma_aa_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_aa_gamma_bb_[index] = 0.0;
            } else {
                v_gamma_aa_gamma_bb_[index] = 0.0;
            } 

            //V_gamma_ab_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_ab_gamma_ab_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_ab_gamma_ab_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_ab_gamma_ab_[index] = 0.0;
            } else {
                v_gamma_ab_gamma_ab_[index] = 0.0;
            } 

            //V_gamma_ab_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_ab_gamma_bb_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_ab_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_ab_gamma_bb_[index] = 0.0;
            } else {
                v_gamma_ab_gamma_bb_[index] = 0.0;
            } 

            //V_gamma_bb_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t121938 = 1.0/pow(rho_a[index],1.0/3.0);
                double t121939 = c*t121938;
                double t121940 = sqrt(t121939);
                double t121941 = pow(t121939,3.0/2.0);
                double t121942 = c*c;
                double t121943 = 1.0/pow(rho_a[index],2.0/3.0);
                double t121944 = 1.0/c0p;
                double t121945 = b1p*t121940;
                double t121946 = b3p*t121941;
                double t121947 = b4p*t121942*t121943;
                double t121948 = b2p*c*t121938;
                double t121949 = t121945+t121946+t121947+t121948;
                double t121950 = 1.0/t121949;
                double t121951 = t121950*t121944*(1.0/2.0);
                double t121952 = t121951+1.0;
                double t121953 = log(t121952);
                double t121954 = a1p*c*t121938;
                double t121955 = t121954+1.0;
                double t121956 = pow(2.0,1.0/3.0);
                double t121957 = t121956*2.0;
                double t121958 = t121957-2.0;
                double t121959 = two_13*2.0;
                double t121960 = t121959-2.0;
                double t121961 = 1.0/t121960;
                double t121962 = 1.0/c0f;
                double t121963 = 1.0/pow(rho_b[index],1.0/3.0);
                double t121964 = c*t121963;
                double t121965 = sqrt(t121964);
                double t121966 = pow(t121964,3.0/2.0);
                double t121967 = 1.0/pow(rho_b[index],2.0/3.0);
                double t121968 = b1p*t121965;
                double t121969 = b3p*t121966;
                double t121970 = b4p*t121942*t121967;
                double t121971 = b2p*c*t121963;
                double t121972 = t121970+t121971+t121968+t121969;
                double t121973 = 1.0/t121972;
                double t121974 = t121944*t121973*(1.0/2.0);
                double t121975 = t121974+1.0;
                double t121976 = log(t121975);
                double t121977 = a1p*c*t121963;
                double t121978 = t121977+1.0;
                double t121979 = c0p*t121976*t121978*2.0;
                double t121980 = rho_a[index]+rho_b[index];
                double t121981 = 1.0/pow(t121980,1.0/3.0);
                double t121982 = c*t121981;
                double t121983 = sqrt(t121982);
                double t121984 = pow(t121982,3.0/2.0);
                double t121985 = 1.0/pow(t121980,2.0/3.0);
                double t121986 = b1p*t121983;
                double t121987 = b3p*t121984;
                double t121988 = b4p*t121942*t121985;
                double t121989 = b2p*c*t121981;
                double t121990 = t121986+t121987+t121988+t121989;
                double t121991 = 1.0/t121990;
                double t121992 = t121944*t121991*(1.0/2.0);
                double t121993 = t121992+1.0;
                double t121994 = log(t121993);
                double t121995 = a1p*c*t121981;
                double t121996 = t121995+1.0;
                double t121997 = c0p*t121994*t121996*2.0;
                double t121998 = rho_a[index]-rho_b[index];
                double t121999 = t121998*t121998;
                double t122000 = 1.0/t121980;
                double t122001 = t122000*t121998;
                double t122002 = 1.0/(t121980*t121980*t121980*t121980);
                double t122003 = t121999*t121999;
                double t122004 = t122001+1.0;
                double t122005 = pow(t122004,4.0/3.0);
                double t122006 = -t122001+1.0;
                double t122007 = pow(t122006,4.0/3.0);
                double t122008 = t122005+t122007-2.0;
                double t122009 = gcab*gcab;
                double t122010 = 1.0/pow(rho_b[index],1.6E1/3.0);
                double t122011 = 1.0/pow(rho_a[index],8.0/3.0);
                double t122012 = gamma_aa[index]*t122011*(1.0/2.0);
                double t122013 = 1.0/pow(rho_b[index],8.0/3.0);
                double t122014 = gamma_bb[index]*t122013*(1.0/2.0);
                double t122015 = t122012+t122014;
                double t122016 = gcab*t122015;
                double t122017 = t122016+1.0;
                double t122018 = t122015*t122015;
                double t122019 = t122009*t122018;
                double t122020 = gcab*t122015*2.0;
                double t122021 = t122020+t122019+1.0;
                double t122022 = t122009*t122009;
                double t122039 = gcab*t122013*2.0;
                double t122040 = t122013*t122015*t122009*6.0;
                double t122041 = gcab*t122013*t122009*t122018*6.0;
                double t122042 = t122013*t122022*t122015*t122018*2.0;
                double t122023 = t122040+t122041+t122042+t122039;
                double t122024 = t122018*t122018;
                double t122044 = gcab*t122013*(3.0/2.0);
                double t122045 = t122013*t122015*t122009*3.0;
                double t122046 = gcab*t122013*t122009*t122018*(3.0/2.0);
                double t122025 = t122044+t122045+t122046;
                double t122026 = t122009*t122018*3.0;
                double t122027 = gcab*t122015*t122009*t122018;
                double t122028 = gcab*t122015*3.0;
                double t122029 = t122026+t122027+t122028+1.0;
                double t122036 = gcab*t122013;
                double t122037 = t122013*t122015*t122009;
                double t122030 = t122036+t122037;
                double t122031 = t122009*t122018*6.0;
                double t122032 = gcab*t122015*t122009*t122018*4.0;
                double t122033 = t122022*t122024;
                double t122034 = gcab*t122015*4.0;
                double t122035 = t122031+t122032+t122033+t122034+1.0;
                double t122038 = 1.0/(t122021*t122021);
                double t122043 = 1.0/(t122035*t122035);
                double t122047 = 1.0/(t122029*t122029);
                double t122048 = c0p*t121953*t121955*2.0;
                double t122049 = b1f*t121965;
                double t122050 = b3f*t121966;
                double t122051 = b4f*t121942*t121967;
                double t122052 = b2f*c*t121963;
                double t122053 = t122050+t122051+t122052+t122049;
                double t122054 = 1.0/t122053;
                double t122055 = t122054*t121962*(1.0/2.0);
                double t122056 = t122055+1.0;
                double t122057 = log(t122056);
                double t122058 = a1f*c*t121963;
                double t122059 = t122058+1.0;
                double t122060 = t121979-c0f*t122057*t122059*2.0;
                double t122061 = t121979-t122060*t121961*t121958;
                double t122062 = gcaa*gcaa;
                double t122063 = gamma_bb[index]*gamma_bb[index];
                double t122064 = t122062*t122062;
                double t122065 = 1.0/pow(rho_b[index],3.2E1/3.0);
                double t122066 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]);
                double t122067 = gamma_bb[index]*gcaa*t122013;
                double t122068 = t122067+1.0;
                double t122069 = gamma_bb[index]*gcaa*t122013*2.0;
                double t122070 = t122010*t122062*t122063;
                double t122071 = t122070+t122069+1.0;
                double t122072 = gamma_bb[index]*gcaa*t122013*3.0;
                double t122073 = gamma_bb[index]*gcaa*t122062*t122063*t122066;
                double t122074 = t122010*t122062*t122063*3.0;
                double t122075 = t122072+t122073+t122074+1.0;
                double t122076 = t122063*t122063;
                double t122092 = gcaa*t122013*4.0;
                double t122093 = gamma_bb[index]*t122010*t122062*1.2E1;
                double t122094 = gcaa*t122062*t122063*t122066*1.2E1;
                double t122095 = gamma_bb[index]*t122063*t122064*t122065*4.0;
                double t122077 = t122092+t122093+t122094+t122095;
                double t122078 = gamma_bb[index]*gcaa*t122013*4.0;
                double t122079 = gamma_bb[index]*gcaa*t122062*t122063*t122066*4.0;
                double t122080 = t122010*t122062*t122063*6.0;
                double t122081 = t122064*t122065*t122076;
                double t122082 = t122080+t122081+t122078+t122079+1.0;
                double t122085 = gcaa*t122013*2.0;
                double t122086 = gamma_bb[index]*t122010*t122062*2.0;
                double t122083 = t122085+t122086;
                double t122084 = 1.0/(t122075*t122075);
                double t122087 = 1.0/(t122071*t122071);
                double t122088 = gcaa*t122013*3.0;
                double t122089 = gamma_bb[index]*t122010*t122062*6.0;
                double t122090 = gcaa*t122062*t122063*t122066*3.0;
                double t122091 = t122090+t122088+t122089;
                double t122096 = 1.0/(t122082*t122082);
                double t122097 = rho_b[index]*(8.334140006820045E15/1.40737488355328E14);
                double t122098 = 1.0/pow(t122097,1.0/3.0);
                double t122099 = 1.0/(omega*omega);
                double t122100 = pow(t122097,2.0/3.0);
                double t122101 = exp(-t122100*t122099);
                double t122102 = gx*gx;
                double t122103 = t122102*t122102;
                double t122104 = gamma_bb[index]*gx*t122013;
                double t122105 = t122104+1.0;
                double t122106 = gamma_bb[index]*gx*t122013*2.0;
                double t122107 = t122010*t122102*t122063;
                double t122108 = t122106+t122107+1.0;
                double t122109 = gamma_bb[index]*gx*t122013*3.0;
                double t122110 = gamma_bb[index]*gx*t122102*t122063*t122066;
                double t122111 = t122010*t122102*t122063*3.0;
                double t122112 = t122110+t122111+t122109+1.0;
                double t122128 = gx*t122013*4.0;
                double t122129 = gamma_bb[index]*t122010*t122102*1.2E1;
                double t122130 = gx*t122102*t122063*t122066*1.2E1;
                double t122131 = gamma_bb[index]*t122103*t122063*t122065*4.0;
                double t122113 = t122130+t122131+t122128+t122129;
                double t122114 = gamma_bb[index]*gx*t122013*4.0;
                double t122115 = gamma_bb[index]*gx*t122102*t122063*t122066*4.0;
                double t122116 = t122010*t122102*t122063*6.0;
                double t122117 = t122103*t122065*t122076;
                double t122118 = t122114+t122115+t122116+t122117+1.0;
                double t122121 = gx*t122013*2.0;
                double t122122 = gamma_bb[index]*t122010*t122102*2.0;
                double t122119 = t122121+t122122;
                double t122120 = 1.0/(t122112*t122112);
                double t122123 = 1.0/(t122108*t122108);
                double t122124 = gx*t122013*3.0;
                double t122125 = gamma_bb[index]*t122010*t122102*6.0;
                double t122126 = gx*t122102*t122063*t122066*3.0;
                double t122127 = t122124+t122125+t122126;
                double t122132 = 1.0/(t122118*t122118);
                v_gamma_bb_gamma_bb_[index] = (rho_b[index]*t122061+rho_a[index]*(t122048-t121961*t121958*(t122048- \
                   c0f*log((t121962*(1.0/2.0))/(b1f*t121940+b3f*t121941+b2f*c*t121938+b4f*t121942*t121943)+1.0)*(a1f* \
                   c*t121938+1.0)*2.0))-t121980*(t121997-t122002*t122003*t122008*t121961*(t121997-c0f*log((t121962*(1.0/ \
                   2.0))/(b1f*t121983+b3f*t121984+b2f*c*t121981+b4f*t121942*t121985)+1.0)*(a1f*c*t121981+1.0)*2.0)+(Aa* \
                   t122008*t121961*log((1.0/2.0)/(Aa*(b1a*t121983+b3a*t121984+b2a*c*t121981+b4a*t121942*t121985))+1.0) \
                   *(t122002*t122003-1.0)*(a1a*c*t121981+1.0)*2.0)/d2fz0))*((ccab2*t122010*t122009*(1.0/2.0))/t122021- \
                   ccab1*t122010*1.0/(t122017*t122017)*t122009*(1.0/2.0)+ccab2*1.0/(t122021*t122021*t122021)*(t122030* \
                   t122030)*t122009*t122018*2.0+ccab4*t122022*(t122023*t122023)*t122024*1.0/(t122035*t122035*t122035) \
                   *2.0-ccab2*t122010*t122022*t122018*t122038*(1.0/2.0)-ccab4*t122022*t122024*t122043*(t122010*t122009* \
                   3.0+t122010*t122022*t122018*3.0+gcab*t122010*t122015*t122009*6.0)+(ccab4*t122010*t122022*t122018*3.0) \
                   /t122035-ccab2*t122030*t122013*t122015*t122009*t122038*2.0+ccab1*gcab*t122010*t122015*1.0/(t122017* \
                   t122017*t122017)*t122009*(1.0/2.0)+(ccab3*gcab*t122010*t122015*t122009*(3.0/2.0))/t122029+ccab3*gcab* \
                   t122015*(t122025*t122025)*t122009*t122018*1.0/(t122029*t122029*t122029)*2.0-ccab3*gcab*t122013*t122025* \
                   t122009*t122018*t122047*3.0-ccab4*t122013*t122022*t122023*t122015*t122043*t122018*4.0-ccab3*gcab*t122015* \
                   t122009*t122018*t122047*(t122010*t122009*(3.0/2.0)+gcab*t122010*t122015*t122009*(3.0/2.0)))-rho_b[index]* \
                   t122061*((ccaa2*t122010*t122062*2.0)/t122071-ccaa1*t122010*t122062*1.0/(t122068*t122068)*2.0-ccaa2* \
                   t122063*t122064*t122065*t122087*2.0+(ccaa4*t122063*t122064*t122065*1.2E1)/t122082-ccaa4*t122064*t122065* \
                   t122076*t122096*(t122010*t122062*1.2E1+t122063*t122064*t122065*1.2E1+gamma_bb[index]*gcaa*t122062* \
                   t122066*2.4E1)+(ccaa3*gamma_bb[index]*gcaa*t122062*t122066*6.0)/t122075+ccaa1*gamma_bb[index]*gcaa* \
                   t122062*t122066*1.0/(t122068*t122068*t122068)*2.0+ccaa2*t122010*t122062*1.0/(t122071*t122071*t122071) \
                   *t122063*(t122083*t122083)*2.0+ccaa4*t122064*1.0/(t122082*t122082*t122082)*t122065*t122076*(t122077* \
                   t122077)*2.0-ccaa2*gamma_bb[index]*t122010*t122062*t122083*t122087*4.0-ccaa4*gamma_bb[index]*t122063* \
                   t122064*t122065*t122077*t122096*8.0-ccaa3*gcaa*t122062*t122063*t122091*t122066*t122084*6.0-ccaa3*gamma_bb[index]* \
                   gcaa*t122062*t122063*t122066*t122084*(t122010*t122062*6.0+gamma_bb[index]*gcaa*t122062*t122066*6.0) \
                   +ccaa3*gamma_bb[index]*gcaa*t122062*t122063*(t122091*t122091)*t122066*1.0/(t122075*t122075*t122075) \
                   *2.0)+c0*pow(rho_b[index],4.0/3.0)*(omega*t122098*(erf(pow(t122097,1.0/3.0)/omega)*(3.991211251234741E15/ \
                   2.251799813685248E15)+omega*t122098*(t122101-(omega*omega)*1.0/pow(t122097,2.0/3.0)*(t122101-1.0)* \
                   (1.0/2.0)))*(4.0/3.0)-1.0)*(cx1*t122010*t122102*1.0/(t122105*t122105)*2.0-(cx2*t122010*t122102*2.0) \
                   /t122108+cx2*t122103*t122123*t122063*t122065*2.0-(cx4*t122103*t122063*t122065*1.2E1)/t122118+cx4*t122103* \
                   t122132*t122065*t122076*(t122010*t122102*1.2E1+t122103*t122063*t122065*1.2E1+gamma_bb[index]*gx*t122102* \
                   t122066*2.4E1)-cx1*gamma_bb[index]*gx*t122102*1.0/(t122105*t122105*t122105)*t122066*2.0-(cx3*gamma_bb[index]* \
                   gx*t122102*t122066*6.0)/t122112-cx2*t122010*t122102*t122063*1.0/(t122108*t122108*t122108)*(t122119* \
                   t122119)*2.0-cx4*t122103*(t122113*t122113)*1.0/(t122118*t122118*t122118)*t122065*t122076*2.0+cx2*gamma_bb[index]* \
                   t122010*t122102*t122123*t122119*4.0+cx4*gamma_bb[index]*t122103*t122113*t122132*t122063*t122065*8.0+ \
                   cx3*gx*t122102*t122120*t122063*t122127*t122066*6.0+cx3*gamma_bb[index]*gx*t122102*t122120*t122063* \
                   t122066*(t122010*t122102*6.0+gamma_bb[index]*gx*t122102*t122066*6.0)-cx3*gamma_bb[index]*gx*t122102* \
                   1.0/(t122112*t122112*t122112)*t122063*(t122127*t122127)*t122066*2.0);
            } else if (rho_a[index] > cutoff_) {
                v_gamma_bb_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                double t122797 = 1.0/pow(rho_b[index],1.0/3.0);
                double t122798 = c*t122797;
                double t122799 = sqrt(t122798);
                double t122800 = pow(t122798,3.0/2.0);
                double t122801 = c*c;
                double t122802 = 1.0/pow(rho_b[index],2.0/3.0);
                double t122803 = 1.0/c0p;
                double t122804 = b1p*t122799;
                double t122805 = b3p*t122800;
                double t122806 = b4p*t122801*t122802;
                double t122807 = b2p*c*t122797;
                double t122808 = t122804+t122805+t122806+t122807;
                double t122809 = 1.0/t122808;
                double t122810 = t122803*t122809*(1.0/2.0);
                double t122811 = t122810+1.0;
                double t122812 = log(t122811);
                double t122813 = a1p*c*t122797;
                double t122814 = t122813+1.0;
                double t122815 = gcaa*gcaa;
                double t122816 = 1.0/pow(rho_b[index],1.6E1/3.0);
                double t122817 = 1.0/pow(rho_b[index],8.0/3.0);
                double t122818 = gamma_bb[index]*gamma_bb[index];
                double t122819 = t122815*t122815;
                double t122820 = 1.0/pow(rho_b[index],3.2E1/3.0);
                double t122821 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]);
                double t122822 = gamma_bb[index]*gcaa*t122817;
                double t122823 = t122822+1.0;
                double t122824 = gamma_bb[index]*gcaa*t122817*2.0;
                double t122825 = t122815*t122816*t122818;
                double t122826 = t122824+t122825+1.0;
                double t122827 = gamma_bb[index]*gcaa*t122817*3.0;
                double t122828 = gamma_bb[index]*gcaa*t122821*t122815*t122818;
                double t122829 = t122815*t122816*t122818*3.0;
                double t122830 = t122827+t122828+t122829+1.0;
                double t122831 = t122818*t122818;
                double t122847 = gcaa*t122817*4.0;
                double t122848 = gamma_bb[index]*t122815*t122816*1.2E1;
                double t122849 = gcaa*t122821*t122815*t122818*1.2E1;
                double t122850 = gamma_bb[index]*t122820*t122818*t122819*4.0;
                double t122832 = t122850+t122847+t122848+t122849;
                double t122833 = gamma_bb[index]*gcaa*t122817*4.0;
                double t122834 = gamma_bb[index]*gcaa*t122821*t122815*t122818*4.0;
                double t122835 = t122815*t122816*t122818*6.0;
                double t122836 = t122820*t122831*t122819;
                double t122837 = t122833+t122834+t122835+t122836+1.0;
                double t122840 = gcaa*t122817*2.0;
                double t122841 = gamma_bb[index]*t122815*t122816*2.0;
                double t122838 = t122840+t122841;
                double t122839 = 1.0/(t122830*t122830);
                double t122842 = 1.0/(t122826*t122826);
                double t122843 = gcaa*t122817*3.0;
                double t122844 = gamma_bb[index]*t122815*t122816*6.0;
                double t122845 = gcaa*t122821*t122815*t122818*3.0;
                double t122846 = t122843+t122844+t122845;
                double t122851 = 1.0/(t122837*t122837);
                double t122852 = rho_b[index]*(8.334140006820045E15/1.40737488355328E14);
                double t122853 = 1.0/pow(t122852,1.0/3.0);
                double t122854 = 1.0/(omega*omega);
                double t122855 = pow(t122852,2.0/3.0);
                double t122856 = exp(-t122854*t122855);
                double t122857 = gx*gx;
                double t122858 = t122857*t122857;
                double t122859 = gamma_bb[index]*gx*t122817;
                double t122860 = t122859+1.0;
                double t122861 = gamma_bb[index]*gx*t122817*2.0;
                double t122862 = t122816*t122818*t122857;
                double t122863 = t122861+t122862+1.0;
                double t122864 = gamma_bb[index]*gx*t122817*3.0;
                double t122865 = gamma_bb[index]*gx*t122821*t122818*t122857;
                double t122866 = t122816*t122818*t122857*3.0;
                double t122867 = t122864+t122865+t122866+1.0;
                double t122883 = gx*t122817*4.0;
                double t122884 = gamma_bb[index]*t122816*t122857*1.2E1;
                double t122885 = gx*t122821*t122818*t122857*1.2E1;
                double t122886 = gamma_bb[index]*t122820*t122818*t122858*4.0;
                double t122868 = t122883+t122884+t122885+t122886;
                double t122869 = gamma_bb[index]*gx*t122817*4.0;
                double t122870 = gamma_bb[index]*gx*t122821*t122818*t122857*4.0;
                double t122871 = t122816*t122818*t122857*6.0;
                double t122872 = t122820*t122831*t122858;
                double t122873 = t122870+t122871+t122872+t122869+1.0;
                double t122876 = gx*t122817*2.0;
                double t122877 = gamma_bb[index]*t122816*t122857*2.0;
                double t122874 = t122876+t122877;
                double t122875 = 1.0/(t122867*t122867);
                double t122878 = 1.0/(t122863*t122863);
                double t122879 = gx*t122817*3.0;
                double t122880 = gamma_bb[index]*t122816*t122857*6.0;
                double t122881 = gx*t122821*t122818*t122857*3.0;
                double t122882 = t122880+t122881+t122879;
                double t122887 = 1.0/(t122873*t122873);
                v_gamma_bb_gamma_bb_[index] = rho_b[index]*(((pow(2.0,1.0/3.0)*2.0-2.0)*(c0f*log((1.0/2.0)/(c0f*(b1f* \
                   t122799+b3f*t122800+b2f*c*t122797+b4f*t122801*t122802))+1.0)*(a1f*c*t122797+1.0)*2.0-c0p*t122812*t122814* \
                   2.0))/(two_13*2.0-2.0)+c0p*t122812*t122814*2.0)*(ccaa1*1.0/(t122823*t122823)*t122815*t122816*2.0-(ccaa2* \
                   t122815*t122816*2.0)/t122826+ccaa2*t122820*t122842*t122818*t122819*2.0-(ccaa4*t122820*t122818*t122819* \
                   1.2E1)/t122837+ccaa4*t122820*t122831*t122851*t122819*(t122815*t122816*1.2E1+t122820*t122818*t122819* \
                   1.2E1+gamma_bb[index]*gcaa*t122821*t122815*2.4E1)-(ccaa3*gamma_bb[index]*gcaa*t122821*t122815*6.0) \
                   /t122830-ccaa1*gamma_bb[index]*gcaa*t122821*1.0/(t122823*t122823*t122823)*t122815*2.0-ccaa4*t122820* \
                   t122831*(t122832*t122832)*t122819*1.0/(t122837*t122837*t122837)*2.0-ccaa2*t122815*t122816*1.0/(t122826* \
                   t122826*t122826)*t122818*(t122838*t122838)*2.0+ccaa2*gamma_bb[index]*t122815*t122842*t122816*t122838* \
                   4.0+ccaa4*gamma_bb[index]*t122820*t122832*t122851*t122818*t122819*8.0+ccaa3*gcaa*t122821*t122815*t122818* \
                   t122846*t122839*6.0+ccaa3*gamma_bb[index]*gcaa*t122821*t122815*t122818*t122839*(t122815*t122816*6.0+ \
                   gamma_bb[index]*gcaa*t122821*t122815*6.0)-ccaa3*gamma_bb[index]*gcaa*t122821*1.0/(t122830*t122830* \
                   t122830)*t122815*t122818*(t122846*t122846)*2.0)+c0*pow(rho_b[index],4.0/3.0)*(omega*t122853*(erf(pow(t122852,1.0/ \
                   3.0)/omega)*(3.991211251234741E15/2.251799813685248E15)+omega*t122853*(t122856-(omega*omega)*1.0/pow(t122852,2.0/ \
                   3.0)*(t122856-1.0)*(1.0/2.0)))*(4.0/3.0)-1.0)*(cx1*1.0/(t122860*t122860)*t122816*t122857*2.0-(cx2* \
                   t122816*t122857*2.0)/t122863+cx2*t122820*t122818*t122858*t122878*2.0-(cx4*t122820*t122818*t122858* \
                   1.2E1)/t122873+cx4*t122820*t122831*t122858*t122887*(t122816*t122857*1.2E1+t122820*t122818*t122858* \
                   1.2E1+gamma_bb[index]*gx*t122821*t122857*2.4E1)-cx1*gamma_bb[index]*gx*t122821*1.0/(t122860*t122860* \
                   t122860)*t122857*2.0-(cx3*gamma_bb[index]*gx*t122821*t122857*6.0)/t122867-cx2*t122816*t122818*1.0/ \
                   (t122863*t122863*t122863)*(t122874*t122874)*t122857*2.0-cx4*t122820*t122831*1.0/(t122873*t122873*t122873) \
                   *t122858*(t122868*t122868)*2.0+cx2*gamma_bb[index]*t122816*t122874*t122857*t122878*4.0+cx4*gamma_bb[index]* \
                   t122820*t122818*t122858*t122868*t122887*8.0+cx3*gx*t122821*t122818*t122882*t122857*t122875*6.0+cx3* \
                   gamma_bb[index]*gx*t122821*t122818*t122857*t122875*(t122816*t122857*6.0+gamma_bb[index]*gx*t122821* \
                   t122857*6.0)-cx3*gamma_bb[index]*gx*t122821*t122818*(t122882*t122882)*t122857*1.0/(t122867*t122867* \
                   t122867)*2.0);
            } else {
                v_gamma_bb_gamma_bb_[index] = 0.0;
            } 

        }
        if (is_meta_) {

            //V_rho_a_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_a_tau_a_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_a_tau_a_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_a_tau_a_[index] = 0.0;
            } else {
                v_rho_a_tau_a_[index] = 0.0;
            } 

            //V_rho_a_tau_b
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_a_tau_b_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_a_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_a_tau_b_[index] = 0.0;
            } else {
                v_rho_a_tau_b_[index] = 0.0;
            } 

            //V_rho_b_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_b_tau_a_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_b_tau_a_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_b_tau_a_[index] = 0.0;
            } else {
                v_rho_b_tau_a_[index] = 0.0;
            } 

            //V_rho_b_tau_b
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_b_tau_b_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_b_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_b_tau_b_[index] = 0.0;
            } else {
                v_rho_b_tau_b_[index] = 0.0;
            } 

            //V_tau_a_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_tau_a_tau_a_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_tau_a_tau_a_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_tau_a_tau_a_[index] = 0.0;
            } else {
                v_tau_a_tau_a_[index] = 0.0;
            } 

            //V_tau_a_tau_b
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_tau_a_tau_b_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_tau_a_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_tau_a_tau_b_[index] = 0.0;
            } else {
                v_tau_a_tau_b_[index] = 0.0;
            } 

            //V_tau_b_tau_b
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_tau_b_tau_b_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_tau_b_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_tau_b_tau_b_[index] = 0.0;
            } else {
                v_tau_b_tau_b_[index] = 0.0;
            } 

            if (is_gga_) {

                //V_gamma_aa_tau_a
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } else {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } 

                //V_gamma_aa_tau_b
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_aa_tau_b_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_aa_tau_b_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_aa_tau_b_[index] = 0.0;
                } else {
                    v_gamma_aa_tau_b_[index] = 0.0;
                } 

                //V_gamma_ab_tau_a
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_ab_tau_a_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_ab_tau_a_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_ab_tau_a_[index] = 0.0;
                } else {
                    v_gamma_ab_tau_a_[index] = 0.0;
                } 

                //V_gamma_ab_tau_b
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_ab_tau_b_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_ab_tau_b_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_ab_tau_b_[index] = 0.0;
                } else {
                    v_gamma_ab_tau_b_[index] = 0.0;
                } 

                //V_gamma_bb_tau_a
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_bb_tau_a_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_bb_tau_a_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_bb_tau_a_[index] = 0.0;
                } else {
                    v_gamma_bb_tau_a_[index] = 0.0;
                } 

                //V_gamma_bb_tau_b
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_bb_tau_b_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_bb_tau_b_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_bb_tau_b_[index] = 0.0;
                } else {
                    v_gamma_bb_tau_b_[index] = 0.0;
                } 

            }
        }
    }
}

}}

