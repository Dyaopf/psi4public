/**********************************************************
* LYP_C_functional.cc: definitions for LYP_C_functional for KS-DFT
* Robert Parrish, robparrish@gmail.com
* Autogenerated by MATLAB Script on 06-Mar-2012
*
***********************************************************/
#include <libmints/mints.h>
#include <libfock/points.h>
#include "LYP_C_functional.h"
#include <stdlib.h>
#include <cmath>
#include <string>
#include <string>
#include <vector>

using namespace psi;
using namespace boost;
using namespace std;

namespace psi { namespace functional {

LYP_C_Functional::LYP_C_Functional(int npoints, int deriv) : Functional(npoints, deriv)
{

    name_ = "LYP_C";
    description_ = "LYP Correlation";
    citation_ = "B. Miehlich et. al., Chem. Phys. Lett., 157(3), 200-206 (1989)";

    double A = 4.9180000000000001E-02;
    params_.push_back(make_pair("A",A));
    double B = 1.3200000000000001E-01;
    params_.push_back(make_pair("B",B));
    double C = 2.5330000000000003E-01;
    params_.push_back(make_pair("C",C));
    double Dd = 3.4899999999999998E-01;
    params_.push_back(make_pair("Dd",Dd));
    double CFext = 3.6462398978764774E+01;
    params_.push_back(make_pair("CFext",CFext));

    is_gga_ = true;
    is_meta_ = false;

    //Required allocateion
    allocate();
}
LYP_C_Functional::~LYP_C_Functional()
{
}
void LYP_C_Functional::computeRKSFunctional(boost::shared_ptr<RKSFunctions> prop)
{
    int ntrue = prop->npoints();

    const double* restrict rho_a;
    const double* restrict gamma_aa;
    const double* restrict tau_a;

    rho_a = prop->property_value("RHO_A")->pointer();
    if (is_gga_) {
        gamma_aa = prop->property_value("GAMMA_AA")->pointer();
    }
    if (is_meta_) {
        tau_a = prop->property_value("TAU_A")->pointer();
    }

    double A = params_[0].second;
    double B = params_[1].second;
    double C = params_[2].second;
    double Dd = params_[3].second;
    double CFext = params_[4].second;

    //Functional
    for (int index = 0; index < ntrue; index++) {

        //Functional Value
        if (rho_a[index] > cutoff_) {
            double t4120 = rho_a[index]*2.0;
            double t4121 = 1.0/pow(t4120,1.0/3.0);
            double t4122 = Dd*t4121;
            double t4123 = t4122+1.0;
            double t4124 = 1.0/t4123;
            double t4125 = rho_a[index]*rho_a[index];
            functional_[index] = A*rho_a[index]*t4124*-2.0-A*B*1.0/pow(t4120,1.1E1/3.0)*t4124*exp(-C*t4121)*(t4125* \
               (CFext*pow(rho_a[index],8.0/3.0)*2.0-gamma_aa[index]*(C*t4121*(1.0/9.0)+Dd*t4121*t4124*(1.0/9.0)-1.1E1/ \
               9.0)+gamma_aa[index]*(C*t4121*(1.0/1.8E1)+Dd*t4121*t4124*(1.0/1.8E1)-5.0/2.0)*2.0-gamma_aa[index]* \
               (C*t4121*(7.0/1.8E1)+Dd*t4121*t4124*(7.0/1.8E1)-4.7E1/1.8E1)*4.0)-gamma_aa[index]*t4125*(2.2E1/3.0) \
               );
        } else {
            functional_[index] = 0.0;
        } 

    }
    //First Partials
    for (int index = 0; index < ntrue && deriv_ >= 1; index++) {

        //V_rho_a
        if (rho_a[index] > cutoff_) {
            double t4127 = rho_a[index]*2.0;
            double t4128 = 1.0/pow(t4127,1.0/3.0);
            double t4129 = Dd*t4128;
            double t4130 = t4129+1.0;
            double t4131 = rho_a[index]*rho_a[index];
            double t4132 = 1.0/t4130;
            double t4151 = C*t4128;
            double t4133 = exp(-t4151);
            double t4134 = 1.0/pow(t4127,4.0/3.0);
            double t4135 = 1.0/(t4130*t4130);
            double t4136 = Dd*Dd;
            double t4137 = 1.0/pow(t4127,5.0/3.0);
            double t4138 = C*t4128*(1.0/9.0);
            double t4139 = Dd*t4132*t4128*(1.0/9.0);
            double t4140 = t4138+t4139-1.1E1/9.0;
            double t4141 = gamma_aa[index]*t4140;
            double t4142 = C*t4128*(1.0/1.8E1);
            double t4143 = Dd*t4132*t4128*(1.0/1.8E1);
            double t4144 = t4142+t4143-5.0/2.0;
            double t4145 = C*t4128*(7.0/1.8E1);
            double t4146 = Dd*t4132*t4128*(7.0/1.8E1);
            double t4147 = t4145+t4146-4.7E1/1.8E1;
            double t4148 = gamma_aa[index]*t4147*4.0;
            double t4149 = pow(rho_a[index],8.0/3.0);
            double t4152 = gamma_aa[index]*t4144*2.0;
            double t4153 = CFext*t4149*2.0;
            double t4150 = t4141-t4152-t4153+t4148;
            double t4154 = t4131*t4150;
            double t4155 = gamma_aa[index]*t4131*(2.2E1/3.0);
            double t4156 = t4154+t4155;
            double t4157 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]);
            v_rho_a_[index] = -A*t4132-A*Dd*t4131*t4135*1.0/pow(t4127,7.0/3.0)*(4.0/3.0)-A*B*t4132*t4133*1.0/ \
               pow(t4127,1.4E1/3.0)*t4156*(1.1E1/3.0)+A*B*t4132*t4133*1.0/pow(t4127,1.1E1/3.0)*(-t4131*(CFext*pow(rho_a[index],5.0/ \
               3.0)*(8.0/3.0)+gamma_aa[index]*(C*t4134*(1.0/2.7E1)+Dd*t4132*t4134*(1.0/2.7E1)-t4135*t4136*t4137*(1.0/ \
               2.7E1))-gamma_aa[index]*(C*t4134*(1.0/5.4E1)+Dd*t4132*t4134*(1.0/5.4E1)-t4135*t4136*t4137*(1.0/5.4E1) \
               )*2.0+gamma_aa[index]*(C*t4134*(7.0/5.4E1)+Dd*t4132*t4134*(7.0/5.4E1)-t4135*t4136*t4137*(7.0/5.4E1) \
               )*4.0)+gamma_aa[index]*rho_a[index]*(2.2E1/3.0)+rho_a[index]*t4150)+A*B*C*t4132*t4133*t4156*t4157* \
               (1.0/9.6E1)+A*B*Dd*t4133*t4135*t4156*t4157*(1.0/9.6E1);
        } else {
            v_rho_a_[index] = 0.0;
        } 

        if (is_gga_) {

            if (rho_a[index] > cutoff_) {
                double t4159 = rho_a[index]*2.0;
                double t4160 = 1.0/pow(t4159,1.0/3.0);
                double t4161 = Dd*t4160;
                double t4162 = t4161+1.0;
                double t4163 = 1.0/t4162;
                double t4164 = rho_a[index]*rho_a[index];
                double t4165 = exp(-C*t4160);
                double t4166 = 1.0/pow(t4159,1.1E1/3.0);
                v_gamma_aa_[index] = A*B*t4163*t4165*t4166*(t4164*(1.6E1/3.0)+t4164*(C*t4160*(7.0/9.0)+Dd*t4160*t4163* \
                   (7.0/9.0)-4.7E1/9.0))+A*B*t4163*t4165*t4166*(t4164+t4164*(C*t4160*(7.0/1.8E1)+Dd*t4160*t4163*(7.0/ \
                   1.8E1)-1.3E1/1.8E1))*2.0;
            } else {
                v_gamma_aa_[index] = 0.0;
            } 

        }
        if (is_meta_) {

            //V_tau_a
            if (rho_a[index] > cutoff_) {
                v_tau_a_[index] = 0.0;
            } else {
                v_tau_a_[index] = 0.0;
            } 

        }
    }
    //Second Partials
    for (int index = 0; index < ntrue && deriv_ >= 2; index++) {

        //V_rho_a_rho_a
        if (rho_a[index] > cutoff_) {
            double t4169 = rho_a[index]*2.0;
            double t4170 = 1.0/pow(t4169,1.0/3.0);
            double t4171 = Dd*t4170;
            double t4172 = t4171+1.0;
            double t4173 = 1.0/(t4172*t4172);
            double t4174 = rho_a[index]*rho_a[index];
            double t4175 = 1.0/t4172;
            double t4197 = C*t4170;
            double t4176 = exp(-t4197);
            double t4177 = 1.0/pow(t4169,1.1E1/3.0);
            double t4178 = 1.0/pow(t4169,4.0/3.0);
            double t4179 = Dd*Dd;
            double t4180 = 1.0/pow(t4169,5.0/3.0);
            double t4181 = 1.0/pow(t4169,7.0/3.0);
            double t4182 = 1.0/(t4172*t4172*t4172);
            double t4183 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]);
            double t4184 = 1.0/pow(t4169,8.0/3.0);
            double t4185 = C*t4170*(1.0/9.0);
            double t4186 = Dd*t4170*t4175*(1.0/9.0);
            double t4187 = t4185+t4186-1.1E1/9.0;
            double t4188 = gamma_aa[index]*t4187;
            double t4189 = C*t4170*(1.0/1.8E1);
            double t4190 = Dd*t4170*t4175*(1.0/1.8E1);
            double t4191 = t4190+t4189-5.0/2.0;
            double t4192 = C*t4170*(7.0/1.8E1);
            double t4193 = Dd*t4170*t4175*(7.0/1.8E1);
            double t4194 = t4192+t4193-4.7E1/1.8E1;
            double t4195 = gamma_aa[index]*t4194*4.0;
            double t4196 = pow(rho_a[index],8.0/3.0);
            double t4198 = C*t4178*(1.0/2.7E1);
            double t4199 = Dd*t4175*t4178*(1.0/2.7E1);
            double t4213 = t4180*t4173*t4179*(1.0/2.7E1);
            double t4200 = t4198+t4199-t4213;
            double t4201 = gamma_aa[index]*t4200;
            double t4202 = C*t4178*(1.0/5.4E1);
            double t4203 = Dd*t4175*t4178*(1.0/5.4E1);
            double t4214 = t4180*t4173*t4179*(1.0/5.4E1);
            double t4204 = t4202+t4203-t4214;
            double t4205 = C*t4178*(7.0/5.4E1);
            double t4206 = Dd*t4175*t4178*(7.0/5.4E1);
            double t4216 = t4180*t4173*t4179*(7.0/5.4E1);
            double t4207 = t4205+t4206-t4216;
            double t4208 = gamma_aa[index]*t4207*4.0;
            double t4209 = pow(rho_a[index],5.0/3.0);
            double t4210 = CFext*t4209*(8.0/3.0);
            double t4215 = gamma_aa[index]*t4204*2.0;
            double t4211 = t4201+t4210-t4215+t4208;
            double t4231 = gamma_aa[index]*t4191*2.0;
            double t4232 = CFext*t4196*2.0;
            double t4212 = t4195+t4188-t4231-t4232;
            double t4217 = C*t4181*(4.0/8.1E1);
            double t4218 = Dd*t4181*t4175*(4.0/8.1E1);
            double t4219 = Dd*t4182*t4183*t4179*(1.0/3.24E2);
            double t4220 = t4217+t4218+t4219-t4173*t4184*t4179*(2.0/2.7E1);
            double t4221 = gamma_aa[index]*t4220;
            double t4222 = C*t4181*(2.0/8.1E1);
            double t4223 = Dd*t4181*t4175*(2.0/8.1E1);
            double t4224 = Dd*t4182*t4183*t4179*(1.0/6.48E2);
            double t4225 = t4222+t4223+t4224-t4173*t4184*t4179*(1.0/2.7E1);
            double t4226 = C*t4181*(1.4E1/8.1E1);
            double t4227 = Dd*t4181*t4175*(1.4E1/8.1E1);
            double t4228 = Dd*t4182*t4183*t4179*(7.0/6.48E2);
            double t4229 = t4226+t4227+t4228-t4173*t4184*t4179*(7.0/2.7E1);
            double t4230 = gamma_aa[index]*t4229*4.0;
            double t4233 = t4174*t4212;
            double t4234 = gamma_aa[index]*t4174*(2.2E1/3.0);
            double t4235 = t4233+t4234;
            double t4236 = 1.0/pow(t4169,1.9E1/3.0);
            double t4237 = gamma_aa[index]*rho_a[index]*(2.2E1/3.0);
            double t4238 = rho_a[index]*t4212;
            double t4241 = t4174*t4211;
            double t4239 = -t4241+t4237+t4238;
            double t4240 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]);
            double t4242 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]) \
               ;
            v_rho_a_rho_a_[index] = A*Dd*rho_a[index]*t4181*t4173*(-1.6E1/3.0)-A*t4182*t4174*t4177*t4179*(1.6E1/ \
               9.0)+A*Dd*t4173*t4174*1.0/pow(t4169,1.0E1/3.0)*(8.0E1/9.0)+A*B*t4175*t4176*1.0/pow(t4169,1.7E1/3.0) \
               *t4235*(3.08E2/9.0)-A*B*t4175*t4176*1.0/pow(t4169,1.4E1/3.0)*t4239*(4.4E1/3.0)+A*B*t4175*t4176*t4177* \
               (gamma_aa[index]*(8.0/3.0)+t4195+t4188-CFext*t4196*2.0-gamma_aa[index]*t4191*2.0-rho_a[index]*t4211* \
               2.0+t4174*(t4221+t4230-gamma_aa[index]*t4225*2.0))+A*B*t4175*t4176*t4177*(gamma_aa[index]*(1.4E1/3.0) \
               -rho_a[index]*t4211*2.0+t4174*(t4221+t4230-gamma_aa[index]*t4225*2.0-CFext*pow(rho_a[index],2.0/3.0) \
               *(4.0E1/9.0)))+A*B*t4182*t4176*t4179*t4235*t4236*(4.0/9.0)+A*B*(C*C)*t4175*t4176*t4235*t4236*(2.0/ \
               9.0)-A*B*C*t4175*t4176*t4242*t4235*(1.3E1/1.44E2)+A*B*C*t4175*t4176*t4240*t4239*(1.0/2.4E1)-A*B*Dd* \
               t4173*t4176*t4242*t4235*(1.3E1/1.44E2)+A*B*Dd*t4173*t4176*t4240*t4239*(1.0/2.4E1)+A*B*C*Dd*t4173*t4176* \
               t4235*t4236*(4.0/9.0);
        } else {
            v_rho_a_rho_a_[index] = 0.0;
        } 

        if (is_gga_) {

            //V_rho_a_gamma_aa
            if (rho_a[index] > cutoff_) {
                double t4244 = rho_a[index]*2.0;
                double t4245 = 1.0/pow(t4244,1.0/3.0);
                double t4246 = Dd*t4245;
                double t4247 = t4246+1.0;
                double t4248 = 1.0/t4247;
                double t4249 = 1.0/pow(t4244,4.0/3.0);
                double t4256 = C*t4245;
                double t4250 = exp(-t4256);
                double t4251 = 1.0/pow(t4244,1.1E1/3.0);
                double t4252 = rho_a[index]*rho_a[index];
                double t4253 = Dd*Dd;
                double t4254 = 1.0/(t4247*t4247);
                double t4255 = 1.0/pow(t4244,5.0/3.0);
                double t4257 = C*t4245*(7.0/9.0);
                double t4258 = Dd*t4245*t4248*(7.0/9.0);
                double t4259 = t4257+t4258-4.7E1/9.0;
                double t4260 = 1.0/pow(t4244,1.4E1/3.0);
                double t4261 = C*t4245*(7.0/1.8E1);
                double t4262 = Dd*t4245*t4248*(7.0/1.8E1);
                double t4263 = t4261+t4262-1.3E1/1.8E1;
                double t4264 = 1.0/rho_a[index];
                double t4265 = C*t4245*(1.0/9.0);
                double t4266 = Dd*t4245*t4248*(1.0/9.0);
                double t4267 = t4265+t4266-1.1E1/9.0;
                double t4268 = C*t4249*(7.0/5.4E1);
                double t4269 = Dd*t4248*t4249*(7.0/5.4E1);
                double t4270 = t4252*t4259;
                double t4271 = t4252*(1.6E1/3.0);
                double t4272 = t4270+t4271;
                double t4273 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]);
                double t4274 = t4252*t4263;
                double t4275 = t4252+t4274;
                v_rho_a_gamma_aa_[index] = -A*B*t4250*t4251*t4248*(t4252*(t4268+t4269-t4264*t4267*(1.0/4.0)-t4253* \
                   t4254*t4255*(7.0/5.4E1))-rho_a[index]*t4263)+A*B*t4250*t4251*t4248*(rho_a[index]*(1.6E1/3.0)+rho_a[index]* \
                   t4259-t4252*(C*t4249*(7.0/2.7E1)+Dd*t4248*t4249*(7.0/2.7E1)-t4253*t4254*t4255*(7.0/2.7E1)))+A*B*t4250* \
                   t4251*t4248*(t4244-t4252*(t4268+t4269+t4264*t4267*(1.0/4.0)-t4253*t4254*t4255*(7.0/5.4E1))+rho_a[index]* \
                   t4263)-A*B*t4250*t4260*t4272*t4248*(1.1E1/3.0)-A*B*t4250*t4260*t4248*t4275*(2.2E1/3.0)+A*B*C*t4250* \
                   t4272*t4273*t4248*(1.0/9.6E1)+A*B*C*t4250*t4273*t4248*t4275*(1.0/4.8E1)+A*B*Dd*t4250*t4254*t4272*t4273* \
                   (1.0/9.6E1)+A*B*Dd*t4250*t4254*t4273*t4275*(1.0/4.8E1);
            } else {
                v_rho_a_gamma_aa_[index] = 0.0;
            } 

            //V_gamma_aa_gamma_aa
            if (rho_a[index] > cutoff_) {
                v_gamma_aa_gamma_aa_[index] = 0.0;
            } else {
                v_gamma_aa_gamma_aa_[index] = 0.0;
            } 

        }
        if (is_meta_) {

            //V_rho_a_tau_a
            if (rho_a[index] > cutoff_) {
                v_rho_a_tau_a_[index] = 0.0;
            } else {
                v_rho_a_tau_a_[index] = 0.0;
            } 

            //V_tau_a_tau_a
            if (rho_a[index] > cutoff_) {
                v_tau_a_tau_a_[index] = 0.0;
            } else {
                v_tau_a_tau_a_[index] = 0.0;
            } 

            if (is_gga_) {

                //V_gamma_aa_tau_a
                if (rho_a[index] > cutoff_) {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } else {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } 

            }
        }
    }
}
void LYP_C_Functional::computeUKSFunctional(boost::shared_ptr<UKSFunctions> prop)
{
    int ntrue = prop->npoints();

    const double* restrict rho_a;
    const double* restrict rho_b;
    const double* restrict gamma_aa;
    const double* restrict gamma_ab;
    const double* restrict gamma_bb;
    const double* restrict tau_a;
    const double* restrict tau_b;

    rho_a = prop->property_value("RHO_A")->pointer();
    rho_b = prop->property_value("RHO_B")->pointer();
    if (is_gga_) {
        gamma_aa = prop->property_value("GAMMA_AA")->pointer();
        gamma_ab = prop->property_value("GAMMA_AB")->pointer();
        gamma_bb = prop->property_value("GAMMA_BB")->pointer();
    }
    if (is_meta_) {
        tau_a = prop->property_value("TAU_A")->pointer();
        tau_b = prop->property_value("TAU_B")->pointer();
    }

    double A = params_[0].second;
    double B = params_[1].second;
    double C = params_[2].second;
    double Dd = params_[3].second;
    double CFext = params_[4].second;

    //Functional
    for (int index = 0; index < ntrue; index++) {

        //Functional Value
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t3452 = rho_a[index]+rho_b[index];
            double t3453 = 1.0/pow(t3452,1.0/3.0);
            double t3454 = Dd*t3453;
            double t3455 = t3454+1.0;
            double t3456 = 1.0/t3455;
            double t3457 = t3452*t3452;
            double t3458 = t3457*(2.0/3.0);
            double t3459 = gamma_ab[index]*2.0;
            double t3460 = gamma_aa[index]+gamma_bb[index]+t3459;
            double t3461 = 1.0/t3452;
            functional_[index] = A*rho_a[index]*rho_b[index]*t3461*t3456*-4.0-A*B*1.0/pow(t3452,1.1E1/3.0)*t3456* \
               exp(-C*t3453)*(t3460*t3457*(-2.0/3.0)+gamma_aa[index]*(t3458-rho_b[index]*rho_b[index])+gamma_bb[index]* \
               (t3458-rho_a[index]*rho_a[index])+rho_a[index]*rho_b[index]*((gamma_aa[index]+gamma_bb[index])*(C* \
               t3453*(1.0/1.8E1)+Dd*t3453*t3456*(1.0/1.8E1)-5.0/2.0)+CFext*(pow(rho_a[index],8.0/3.0)+pow(rho_b[index],8.0/ \
               3.0))-t3460*(C*t3453*(7.0/1.8E1)+Dd*t3453*t3456*(7.0/1.8E1)-4.7E1/1.8E1)-t3461*(gamma_aa[index]*rho_a[index]+ \
               gamma_bb[index]*rho_b[index])*(C*t3453*(1.0/9.0)+Dd*t3453*t3456*(1.0/9.0)-1.1E1/9.0)));
        } else if (rho_a[index] > cutoff_) {
            functional_[index] = 0.0;
        } else if (rho_b[index] > cutoff_) {
            functional_[index] = 0.0;
        } else {
            functional_[index] = 0.0;
        } 

    }
    //First Partials
    for (int index = 0; index < ntrue && deriv_ >= 1; index++) {

        //V_rho_a
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t3463 = rho_a[index]+rho_b[index];
            double t3464 = 1.0/pow(t3463,1.0/3.0);
            double t3465 = Dd*t3464;
            double t3466 = t3465+1.0;
            double t3467 = 1.0/t3466;
            double t3468 = t3463*t3463;
            double t3469 = t3468*(2.0/3.0);
            double t3470 = gamma_ab[index]*2.0;
            double t3471 = gamma_aa[index]+gamma_bb[index]+t3470;
            double t3472 = 1.0/t3463;
            double t3499 = C*t3464;
            double t3473 = exp(-t3499);
            double t3474 = C*t3464*(7.0/1.8E1);
            double t3475 = Dd*t3464*t3467*(7.0/1.8E1);
            double t3476 = t3474+t3475-4.7E1/1.8E1;
            double t3477 = t3471*t3476;
            double t3478 = gamma_aa[index]+gamma_bb[index];
            double t3479 = C*t3464*(1.0/1.8E1);
            double t3480 = Dd*t3464*t3467*(1.0/1.8E1);
            double t3481 = t3480+t3479-5.0/2.0;
            double t3482 = pow(rho_a[index],8.0/3.0);
            double t3483 = pow(rho_b[index],8.0/3.0);
            double t3484 = t3482+t3483;
            double t3485 = gamma_aa[index]*rho_a[index];
            double t3486 = gamma_bb[index]*rho_b[index];
            double t3487 = t3485+t3486;
            double t3488 = C*t3464*(1.0/9.0);
            double t3489 = Dd*t3464*t3467*(1.0/9.0);
            double t3490 = t3488+t3489-1.1E1/9.0;
            double t3491 = t3472*t3490*t3487;
            double t3506 = t3481*t3478;
            double t3507 = CFext*t3484;
            double t3492 = t3491+t3477-t3506-t3507;
            double t3493 = rho_b[index]*(4.0/3.0);
            double t3494 = 1.0/pow(t3463,4.0/3.0);
            double t3495 = 1.0/(t3466*t3466);
            double t3496 = Dd*Dd;
            double t3497 = 1.0/pow(t3463,5.0/3.0);
            double t3498 = 1.0/(t3463*t3463);
            double t3500 = rho_b[index]*rho_b[index];
            double t3501 = t3469-t3500;
            double t3502 = gamma_aa[index]*t3501;
            double t3503 = rho_a[index]*rho_a[index];
            double t3504 = t3469-t3503;
            double t3505 = gamma_bb[index]*t3504;
            double t3510 = t3471*t3468*(2.0/3.0);
            double t3511 = rho_a[index]*rho_b[index]*t3492;
            double t3508 = -t3510+t3502-t3511+t3505;
            double t3509 = 1.0/(t3463*t3463*t3463*t3463*t3463);
            v_rho_a_[index] = A*rho_b[index]*t3472*t3467*-4.0+A*rho_a[index]*rho_b[index]*t3467*t3498*4.0+A*B* \
               1.0/pow(t3463,1.1E1/3.0)*t3473*t3467*(rho_b[index]*t3492-gamma_aa[index]*(rho_a[index]*(4.0/3.0)+t3493) \
               +gamma_bb[index]*(rho_a[index]*(2.0/3.0)-t3493)+t3471*(rho_a[index]*2.0+rho_b[index]*2.0)*(2.0/3.0) \
               -rho_a[index]*rho_b[index]*(CFext*pow(rho_a[index],5.0/3.0)*(8.0/3.0)-t3478*(C*t3494*(1.0/5.4E1)+Dd* \
               t3467*t3494*(1.0/5.4E1)-t3495*t3496*t3497*(1.0/5.4E1))+t3471*(C*t3494*(7.0/5.4E1)+Dd*t3467*t3494*(7.0/ \
               5.4E1)-t3495*t3496*t3497*(7.0/5.4E1))+t3472*t3487*(C*t3494*(1.0/2.7E1)+Dd*t3467*t3494*(1.0/2.7E1)- \
               t3495*t3496*t3497*(1.0/2.7E1))-gamma_aa[index]*t3472*t3490+t3490*t3487*t3498))-A*Dd*rho_a[index]*rho_b[index]* \
               1.0/pow(t3463,7.0/3.0)*t3495*(4.0/3.0)+A*B*1.0/pow(t3463,1.4E1/3.0)*t3473*t3467*t3508*(1.1E1/3.0)- \
               A*B*C*t3473*t3467*t3508*t3509*(1.0/3.0)-A*B*Dd*t3473*t3495*t3508*t3509*(1.0/3.0);
        } else if (rho_a[index] > cutoff_) {
            v_rho_a_[index] = 0.0;
        } else if (rho_b[index] > cutoff_) {
            v_rho_a_[index] = 0.0;
        } else {
            v_rho_a_[index] = 0.0;
        } 

        //V_rho_b
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t3513 = rho_a[index]+rho_b[index];
            double t3514 = 1.0/pow(t3513,1.0/3.0);
            double t3515 = Dd*t3514;
            double t3516 = t3515+1.0;
            double t3517 = 1.0/t3516;
            double t3518 = t3513*t3513;
            double t3519 = t3518*(2.0/3.0);
            double t3520 = gamma_ab[index]*2.0;
            double t3521 = gamma_aa[index]+gamma_bb[index]+t3520;
            double t3522 = 1.0/t3513;
            double t3549 = C*t3514;
            double t3523 = exp(-t3549);
            double t3524 = C*t3514*(7.0/1.8E1);
            double t3525 = Dd*t3514*t3517*(7.0/1.8E1);
            double t3526 = t3524+t3525-4.7E1/1.8E1;
            double t3527 = t3521*t3526;
            double t3528 = gamma_aa[index]+gamma_bb[index];
            double t3529 = C*t3514*(1.0/1.8E1);
            double t3530 = Dd*t3514*t3517*(1.0/1.8E1);
            double t3531 = t3530+t3529-5.0/2.0;
            double t3532 = pow(rho_a[index],8.0/3.0);
            double t3533 = pow(rho_b[index],8.0/3.0);
            double t3534 = t3532+t3533;
            double t3535 = gamma_aa[index]*rho_a[index];
            double t3536 = gamma_bb[index]*rho_b[index];
            double t3537 = t3535+t3536;
            double t3538 = C*t3514*(1.0/9.0);
            double t3539 = Dd*t3514*t3517*(1.0/9.0);
            double t3540 = t3538+t3539-1.1E1/9.0;
            double t3541 = t3522*t3540*t3537;
            double t3557 = t3531*t3528;
            double t3558 = CFext*t3534;
            double t3542 = t3541+t3527-t3557-t3558;
            double t3543 = rho_a[index]*(4.0/3.0);
            double t3544 = 1.0/pow(t3513,4.0/3.0);
            double t3545 = 1.0/(t3516*t3516);
            double t3546 = Dd*Dd;
            double t3547 = 1.0/pow(t3513,5.0/3.0);
            double t3548 = 1.0/(t3513*t3513);
            double t3550 = rho_b[index]*rho_b[index];
            double t3551 = t3550-t3519;
            double t3552 = gamma_aa[index]*t3551;
            double t3553 = rho_a[index]*rho_a[index];
            double t3554 = t3553-t3519;
            double t3555 = gamma_bb[index]*t3554;
            double t3556 = t3521*t3518*(2.0/3.0);
            double t3559 = rho_a[index]*rho_b[index]*t3542;
            double t3560 = 1.0/(t3513*t3513*t3513*t3513*t3513);
            v_rho_b_[index] = A*rho_a[index]*t3522*t3517*-4.0+A*rho_a[index]*rho_b[index]*t3517*t3548*4.0+A*B* \
               1.0/pow(t3513,1.1E1/3.0)*t3523*t3517*(rho_a[index]*t3542-gamma_bb[index]*(rho_b[index]*(4.0/3.0)+t3543) \
               +gamma_aa[index]*(rho_b[index]*(2.0/3.0)-t3543)+t3521*(rho_a[index]*2.0+rho_b[index]*2.0)*(2.0/3.0) \
               -rho_a[index]*rho_b[index]*(CFext*pow(rho_b[index],5.0/3.0)*(8.0/3.0)-t3528*(C*t3544*(1.0/5.4E1)+Dd* \
               t3517*t3544*(1.0/5.4E1)-t3545*t3546*t3547*(1.0/5.4E1))+t3521*(C*t3544*(7.0/5.4E1)+Dd*t3517*t3544*(7.0/ \
               5.4E1)-t3545*t3546*t3547*(7.0/5.4E1))+t3522*t3537*(C*t3544*(1.0/2.7E1)+Dd*t3517*t3544*(1.0/2.7E1)- \
               t3545*t3546*t3547*(1.0/2.7E1))-gamma_bb[index]*t3522*t3540+t3540*t3537*t3548))-A*Dd*rho_a[index]*rho_b[index]* \
               1.0/pow(t3513,7.0/3.0)*t3545*(4.0/3.0)-A*B*1.0/pow(t3513,1.4E1/3.0)*t3523*t3517*(t3552+t3555+t3556+ \
               t3559)*(1.1E1/3.0)+A*B*C*t3523*t3560*t3517*(t3552+t3555+t3556+t3559)*(1.0/3.0)+A*B*Dd*t3523*t3560* \
               t3545*(t3552+t3555+t3556+t3559)*(1.0/3.0);
        } else if (rho_a[index] > cutoff_) {
            v_rho_b_[index] = 0.0;
        } else if (rho_b[index] > cutoff_) {
            v_rho_b_[index] = 0.0;
        } else {
            v_rho_b_[index] = 0.0;
        } 

        if (is_gga_) {

            //V_gamma_aa
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t3562 = rho_a[index]+rho_b[index];
                double t3563 = 1.0/pow(t3562,1.0/3.0);
                double t3564 = Dd*t3563;
                double t3565 = t3564+1.0;
                double t3566 = 1.0/t3565;
                v_gamma_aa_[index] = A*B*1.0/pow(t3562,1.1E1/3.0)*t3566*exp(-C*t3563)*(rho_b[index]*rho_b[index]+ \
                   rho_a[index]*rho_b[index]*(C*t3563*(1.0/3.0)+Dd*t3563*t3566*(1.0/3.0)+(rho_a[index]*(C*t3563*(1.0/ \
                   9.0)+Dd*t3563*t3566*(1.0/9.0)-1.1E1/9.0))/t3562-1.0/9.0));
            } else if (rho_a[index] > cutoff_) {
                v_gamma_aa_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_aa_[index] = 0.0;
            } else {
                v_gamma_aa_[index] = 0.0;
            } 

            //V_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t3568 = rho_a[index]+rho_b[index];
                double t3569 = 1.0/pow(t3568,1.0/3.0);
                double t3570 = Dd*t3569;
                double t3571 = t3570+1.0;
                double t3572 = 1.0/t3571;
                v_gamma_ab_[index] = A*B*t3572*1.0/pow(t3568,1.1E1/3.0)*exp(-C*t3569)*((t3568*t3568)*(4.0/3.0)+rho_a[index]* \
                   rho_b[index]*(C*t3569*(7.0/9.0)+Dd*t3572*t3569*(7.0/9.0)-4.7E1/9.0));
            } else if (rho_a[index] > cutoff_) {
                v_gamma_ab_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_ab_[index] = 0.0;
            } else {
                v_gamma_ab_[index] = 0.0;
            } 

            //V_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t3574 = rho_a[index]+rho_b[index];
                double t3575 = 1.0/pow(t3574,1.0/3.0);
                double t3576 = Dd*t3575;
                double t3577 = t3576+1.0;
                double t3578 = 1.0/t3577;
                v_gamma_bb_[index] = A*B*1.0/pow(t3574,1.1E1/3.0)*t3578*exp(-C*t3575)*(rho_a[index]*rho_a[index]+ \
                   rho_a[index]*rho_b[index]*(C*t3575*(1.0/3.0)+Dd*t3575*t3578*(1.0/3.0)+(rho_b[index]*(C*t3575*(1.0/ \
                   9.0)+Dd*t3575*t3578*(1.0/9.0)-1.1E1/9.0))/t3574-1.0/9.0));
            } else if (rho_a[index] > cutoff_) {
                v_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_bb_[index] = 0.0;
            } else {
                v_gamma_bb_[index] = 0.0;
            } 
        }
        if (is_meta_) {

            //V_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_tau_a_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_tau_a_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_tau_a_[index] = 0.0;
            } else {
                v_tau_a_[index] = 0.0;
            } 

            //V_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_tau_b_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_tau_b_[index] = 0.0;
            } else {
                v_tau_b_[index] = 0.0;
            } 
        }
    }
    //Second Partials
    for (int index = 0; index < ntrue && deriv_ >= 2; index++) {

        //V_rho_a_rho_a
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t3582 = rho_a[index]+rho_b[index];
            double t3583 = 1.0/pow(t3582,1.0/3.0);
            double t3584 = Dd*t3583;
            double t3585 = t3584+1.0;
            double t3586 = 1.0/t3585;
            double t3587 = t3582*t3582;
            double t3588 = t3587*(2.0/3.0);
            double t3589 = gamma_ab[index]*2.0;
            double t3590 = gamma_aa[index]+gamma_bb[index]+t3589;
            double t3591 = 1.0/(t3585*t3585);
            double t3618 = C*t3583;
            double t3592 = exp(-t3618);
            double t3593 = C*t3583*(7.0/1.8E1);
            double t3594 = Dd*t3583*t3586*(7.0/1.8E1);
            double t3595 = t3593+t3594-4.7E1/1.8E1;
            double t3596 = t3590*t3595;
            double t3597 = gamma_aa[index]+gamma_bb[index];
            double t3598 = C*t3583*(1.0/1.8E1);
            double t3599 = Dd*t3583*t3586*(1.0/1.8E1);
            double t3600 = t3598+t3599-5.0/2.0;
            double t3601 = pow(rho_a[index],8.0/3.0);
            double t3602 = pow(rho_b[index],8.0/3.0);
            double t3603 = t3601+t3602;
            double t3604 = 1.0/t3582;
            double t3605 = gamma_aa[index]*rho_a[index];
            double t3606 = gamma_bb[index]*rho_b[index];
            double t3607 = t3605+t3606;
            double t3608 = C*t3583*(1.0/9.0);
            double t3609 = Dd*t3583*t3586*(1.0/9.0);
            double t3610 = t3608+t3609-1.1E1/9.0;
            double t3611 = t3610*t3604*t3607;
            double t3644 = t3597*t3600;
            double t3645 = CFext*t3603;
            double t3612 = t3596+t3611-t3644-t3645;
            double t3613 = rho_b[index]*(4.0/3.0);
            double t3614 = 1.0/pow(t3582,4.0/3.0);
            double t3615 = Dd*Dd;
            double t3616 = 1.0/pow(t3582,5.0/3.0);
            double t3617 = 1.0/(t3582*t3582);
            double t3619 = 1.0/pow(t3582,1.1E1/3.0);
            double t3620 = C*t3614*(1.0/5.4E1);
            double t3621 = Dd*t3586*t3614*(1.0/5.4E1);
            double t3652 = t3591*t3615*t3616*(1.0/5.4E1);
            double t3622 = t3620+t3621-t3652;
            double t3623 = pow(rho_a[index],5.0/3.0);
            double t3624 = CFext*t3623*(8.0/3.0);
            double t3625 = C*t3614*(7.0/5.4E1);
            double t3626 = Dd*t3586*t3614*(7.0/5.4E1);
            double t3654 = t3591*t3615*t3616*(7.0/5.4E1);
            double t3627 = t3625+t3626-t3654;
            double t3628 = t3590*t3627;
            double t3629 = C*t3614*(1.0/2.7E1);
            double t3630 = Dd*t3586*t3614*(1.0/2.7E1);
            double t3639 = t3591*t3615*t3616*(1.0/2.7E1);
            double t3631 = t3630+t3629-t3639;
            double t3632 = t3604*t3631*t3607;
            double t3633 = t3610*t3607*t3617;
            double t3653 = t3597*t3622;
            double t3655 = gamma_aa[index]*t3610*t3604;
            double t3634 = t3632+t3624+t3633-t3653+t3628-t3655;
            double t3635 = 1.0/pow(t3582,7.0/3.0);
            double t3636 = 1.0/(t3582*t3582*t3582);
            double t3637 = 1.0/(t3585*t3585*t3585);
            double t3638 = 1.0/pow(t3582,8.0/3.0);
            double t3640 = rho_a[index]*2.0;
            double t3641 = rho_b[index]*2.0;
            double t3642 = t3640+t3641;
            double t3643 = t3590*t3642*(2.0/3.0);
            double t3646 = rho_b[index]*t3612;
            double t3647 = rho_a[index]*(4.0/3.0);
            double t3648 = t3613+t3647;
            double t3649 = rho_a[index]*(2.0/3.0);
            double t3650 = t3613-t3649;
            double t3651 = gamma_bb[index]*t3650;
            double t3656 = rho_a[index]*rho_b[index]*t3634;
            double t3657 = gamma_aa[index]*t3648;
            double t3658 = t3651-t3643-t3646+t3656+t3657;
            double t3659 = 1.0/(t3582*t3582*t3582*t3582*t3582);
            double t3660 = rho_b[index]*rho_b[index];
            double t3661 = t3588-t3660;
            double t3662 = gamma_aa[index]*t3661;
            double t3663 = rho_a[index]*rho_a[index];
            double t3664 = t3588-t3663;
            double t3665 = gamma_bb[index]*t3664;
            double t3668 = t3590*t3587*(2.0/3.0);
            double t3669 = rho_a[index]*rho_b[index]*t3612;
            double t3666 = t3662+t3665-t3668-t3669;
            double t3667 = 1.0/(t3582*t3582*t3582*t3582*t3582*t3582);
            double t3670 = 1.0/pow(t3582,1.9E1/3.0);
            v_rho_a_rho_a_[index] = A*rho_b[index]*t3586*t3617*8.0-A*Dd*rho_b[index]*t3591*t3635*(8.0/3.0)-A* \
               rho_a[index]*rho_b[index]*t3586*t3636*8.0+A*Dd*rho_a[index]*rho_b[index]*1.0/pow(t3582,1.0E1/3.0)* \
               t3591*(4.0E1/9.0)+A*B*1.0/pow(t3582,1.4E1/3.0)*t3592*t3586*t3658*(2.2E1/3.0)-A*B*1.0/pow(t3582,1.7E1/ \
               3.0)*t3592*t3586*t3666*(1.54E2/9.0)+A*B*t3592*t3586*t3619*(gamma_ab[index]*(8.0/3.0)+gamma_bb[index]* \
               2.0-rho_b[index]*t3634*2.0-rho_a[index]*rho_b[index]*(CFext*pow(rho_a[index],2.0/3.0)*(4.0E1/9.0)+ \
               t3597*(C*t3635*(2.0/8.1E1)+Dd*t3586*t3635*(2.0/8.1E1)-t3591*t3615*t3638*(1.0/2.7E1)+Dd*t3615*t3636* \
               t3637*(1.0/8.1E1))-t3590*(C*t3635*(1.4E1/8.1E1)+Dd*t3586*t3635*(1.4E1/8.1E1)-t3591*t3615*t3638*(7.0/ \
               2.7E1)+Dd*t3615*t3636*t3637*(7.0/8.1E1))-t3604*t3607*(C*t3635*(4.0/8.1E1)+Dd*t3586*t3635*(4.0/8.1E1) \
               -t3591*t3615*t3638*(2.0/2.7E1)+Dd*t3615*t3636*t3637*(2.0/8.1E1))+gamma_aa[index]*t3604*t3631*2.0+gamma_aa[index]* \
               t3610*t3617*2.0-t3610*t3607*t3636*2.0-t3631*t3607*t3617*2.0))-A*rho_a[index]*rho_b[index]*t3615*t3619* \
               t3637*(8.0/9.0)-A*B*t3592*t3615*t3670*t3637*t3666*(2.0/9.0)-A*B*(C*C)*t3592*t3586*t3670*t3666*(1.0/ \
               9.0)+A*B*C*t3592*t3586*t3666*t3667*(2.6E1/9.0)-A*B*C*t3592*t3586*t3658*t3659*(2.0/3.0)+A*B*Dd*t3591* \
               t3592*t3666*t3667*(2.6E1/9.0)-A*B*Dd*t3591*t3592*t3658*t3659*(2.0/3.0)-A*B*C*Dd*t3591*t3592*t3670* \
               t3666*(2.0/9.0);
        } else if (rho_a[index] > cutoff_) {
            v_rho_a_rho_a_[index] = 0.0;
        } else if (rho_b[index] > cutoff_) {
            v_rho_a_rho_a_[index] = 0.0;
        } else {
            v_rho_a_rho_a_[index] = 0.0;
        } 

        //V_rho_a_rho_b
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t3672 = rho_a[index]+rho_b[index];
            double t3673 = 1.0/pow(t3672,1.0/3.0);
            double t3674 = Dd*t3673;
            double t3675 = t3674+1.0;
            double t3676 = 1.0/t3675;
            double t3677 = 1.0/(t3672*t3672);
            double t3678 = 1.0/pow(t3672,7.0/3.0);
            double t3679 = 1.0/(t3675*t3675);
            double t3680 = t3672*t3672;
            double t3681 = t3680*(2.0/3.0);
            double t3682 = gamma_ab[index]*2.0;
            double t3683 = gamma_aa[index]+gamma_bb[index]+t3682;
            double t3684 = 1.0/t3672;
            double t3723 = C*t3673;
            double t3685 = exp(-t3723);
            double t3686 = C*t3673*(7.0/1.8E1);
            double t3687 = Dd*t3673*t3676*(7.0/1.8E1);
            double t3688 = t3686+t3687-4.7E1/1.8E1;
            double t3689 = t3683*t3688;
            double t3690 = gamma_aa[index]+gamma_bb[index];
            double t3691 = 1.0/pow(t3672,4.0/3.0);
            double t3692 = Dd*Dd;
            double t3693 = 1.0/pow(t3672,5.0/3.0);
            double t3694 = C*t3673*(1.0/9.0);
            double t3695 = Dd*t3673*t3676*(1.0/9.0);
            double t3696 = t3694+t3695-1.1E1/9.0;
            double t3697 = gamma_aa[index]*rho_a[index];
            double t3698 = gamma_bb[index]*rho_b[index];
            double t3699 = t3697+t3698;
            double t3700 = C*t3691*(1.0/5.4E1);
            double t3701 = Dd*t3691*t3676*(1.0/5.4E1);
            double t3727 = t3692*t3693*t3679*(1.0/5.4E1);
            double t3702 = t3700+t3701-t3727;
            double t3703 = C*t3691*(7.0/5.4E1);
            double t3704 = Dd*t3691*t3676*(7.0/5.4E1);
            double t3730 = t3692*t3693*t3679*(7.0/5.4E1);
            double t3705 = t3703-t3730+t3704;
            double t3706 = t3683*t3705;
            double t3707 = C*t3691*(1.0/2.7E1);
            double t3708 = Dd*t3691*t3676*(1.0/2.7E1);
            double t3721 = t3692*t3693*t3679*(1.0/2.7E1);
            double t3709 = -t3721+t3707+t3708;
            double t3710 = t3684*t3699*t3709;
            double t3711 = t3677*t3696*t3699;
            double t3712 = C*t3673*(1.0/1.8E1);
            double t3713 = Dd*t3673*t3676*(1.0/1.8E1);
            double t3714 = t3712+t3713-5.0/2.0;
            double t3715 = pow(rho_a[index],8.0/3.0);
            double t3716 = pow(rho_b[index],8.0/3.0);
            double t3717 = t3715+t3716;
            double t3718 = 1.0/(t3672*t3672*t3672);
            double t3719 = 1.0/(t3675*t3675*t3675);
            double t3720 = 1.0/pow(t3672,8.0/3.0);
            double t3722 = t3684*t3696*t3699;
            double t3724 = t3690*t3714;
            double t3725 = CFext*t3717;
            double t3726 = rho_b[index]*(4.0/3.0);
            double t3728 = pow(rho_a[index],5.0/3.0);
            double t3729 = CFext*t3728*(8.0/3.0);
            double t3740 = t3690*t3702;
            double t3748 = gamma_aa[index]*t3684*t3696;
            double t3731 = t3710+t3711-t3740+t3706+t3729-t3748;
            double t3732 = 1.0/pow(t3672,1.4E1/3.0);
            double t3733 = rho_a[index]*2.0;
            double t3734 = rho_b[index]*2.0;
            double t3735 = t3733+t3734;
            double t3736 = t3683*t3735*(2.0/3.0);
            double t3737 = t3689+t3722-t3724-t3725;
            double t3738 = rho_a[index]*(4.0/3.0);
            double t3739 = t3726+t3738;
            double t3741 = pow(rho_b[index],5.0/3.0);
            double t3742 = CFext*t3741*(8.0/3.0);
            double t3743 = 1.0/pow(t3672,1.1E1/3.0);
            double t3744 = rho_b[index]*t3737;
            double t3745 = rho_a[index]*(2.0/3.0);
            double t3746 = t3726-t3745;
            double t3747 = gamma_bb[index]*t3746;
            double t3749 = rho_a[index]*rho_b[index]*t3731;
            double t3750 = gamma_aa[index]*t3739;
            double t3751 = t3750-t3744-t3736+t3747+t3749;
            double t3752 = 1.0/(t3672*t3672*t3672*t3672*t3672);
            double t3753 = rho_a[index]*t3737;
            double t3754 = rho_b[index]*(2.0/3.0);
            double t3755 = t3754-t3738;
            double t3756 = gamma_aa[index]*t3755;
            double t3758 = gamma_bb[index]*t3684*t3696;
            double t3757 = t3710+t3711-t3740+t3706+t3742-t3758;
            double t3759 = rho_b[index]*rho_b[index];
            double t3760 = t3681-t3759;
            double t3761 = gamma_aa[index]*t3760;
            double t3762 = rho_a[index]*rho_a[index];
            double t3763 = t3681-t3762;
            double t3764 = gamma_bb[index]*t3763;
            double t3765 = 1.0/(t3672*t3672*t3672*t3672*t3672*t3672);
            double t3767 = t3680*t3683*(2.0/3.0);
            double t3768 = rho_a[index]*rho_b[index]*t3737;
            double t3766 = t3761+t3764-t3767-t3768;
            double t3769 = 1.0/pow(t3672,1.9E1/3.0);
            v_rho_a_rho_b_[index] = A*t3684*t3676*-4.0+A*rho_a[index]*t3676*t3677*4.0+A*rho_b[index]*t3676*t3677* \
               4.0-A*Dd*rho_a[index]*t3678*t3679*(4.0/3.0)-A*Dd*rho_b[index]*t3678*t3679*(4.0/3.0)-A*rho_a[index]* \
               rho_b[index]*t3676*t3718*8.0+A*Dd*rho_a[index]*rho_b[index]*1.0/pow(t3672,1.0E1/3.0)*t3679*(4.0E1/ \
               9.0)-A*B*1.0/pow(t3672,1.7E1/3.0)*t3676*t3685*(t3761+t3764-t3680*t3683*(2.0/3.0)-rho_a[index]*rho_b[index]* \
               (t3689+t3722-CFext*t3717-t3690*t3714))*(1.54E2/9.0)-A*B*t3676*t3685*t3743*(gamma_ab[index]*(-8.0/3.0) \
               -t3689-t3722+t3724+t3725+rho_a[index]*t3731+rho_b[index]*(t3710+t3711+t3706+t3742-t3690*t3702-gamma_bb[index]* \
               t3684*t3696)+rho_a[index]*rho_b[index]*(t3690*(C*t3678*(2.0/8.1E1)+Dd*t3676*t3678*(2.0/8.1E1)-t3692* \
               t3679*t3720*(1.0/2.7E1)+Dd*t3692*t3718*t3719*(1.0/8.1E1))-t3683*(C*t3678*(1.4E1/8.1E1)+Dd*t3676*t3678* \
               (1.4E1/8.1E1)-t3692*t3679*t3720*(7.0/2.7E1)+Dd*t3692*t3718*t3719*(7.0/8.1E1))-t3684*t3699*(C*t3678* \
               (4.0/8.1E1)+Dd*t3676*t3678*(4.0/8.1E1)-t3692*t3679*t3720*(2.0/2.7E1)+Dd*t3692*t3718*t3719*(2.0/8.1E1) \
               )+gamma_aa[index]*t3677*t3696+gamma_bb[index]*t3677*t3696+gamma_aa[index]*t3684*t3709+gamma_bb[index]* \
               t3684*t3709-t3677*t3699*t3709*2.0-t3696*t3699*t3718*2.0))+A*B*t3676*t3685*t3732*t3751*(1.1E1/3.0)- \
               A*rho_a[index]*rho_b[index]*t3692*t3743*t3719*(8.0/9.0)-A*B*t3676*t3685*t3732*(t3753+t3736+t3756-gamma_bb[index]* \
               t3739-rho_a[index]*rho_b[index]*t3757)*(1.1E1/3.0)-A*B*t3692*t3685*t3719*t3766*t3769*(2.0/9.0)+A*B* \
               C*t3676*t3685*t3752*(t3753+t3736+t3756-gamma_bb[index]*t3739-rho_a[index]*rho_b[index]*t3757)*(1.0/ \
               3.0)+A*B*Dd*t3685*t3679*t3752*(t3753+t3736+t3756-gamma_bb[index]*t3739-rho_a[index]*rho_b[index]*t3757) \
               *(1.0/3.0)-A*B*(C*C)*t3676*t3685*t3766*t3769*(1.0/9.0)-A*B*C*t3676*t3685*t3751*t3752*(1.0/3.0)+A*B* \
               C*t3676*t3685*t3765*t3766*(2.6E1/9.0)-A*B*Dd*t3685*t3679*t3751*t3752*(1.0/3.0)+A*B*Dd*t3685*t3679* \
               t3765*t3766*(2.6E1/9.0)-A*B*C*Dd*t3685*t3679*t3766*t3769*(2.0/9.0);
        } else if (rho_a[index] > cutoff_) {
            v_rho_a_rho_b_[index] = 0.0;
        } else if (rho_b[index] > cutoff_) {
            v_rho_a_rho_b_[index] = 0.0;
        } else {
            v_rho_a_rho_b_[index] = 0.0;
        } 

        //V_rho_b_rho_b
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t3771 = rho_a[index]+rho_b[index];
            double t3772 = 1.0/pow(t3771,1.0/3.0);
            double t3773 = Dd*t3772;
            double t3774 = t3773+1.0;
            double t3775 = 1.0/t3774;
            double t3776 = t3771*t3771;
            double t3777 = t3776*(2.0/3.0);
            double t3778 = gamma_ab[index]*2.0;
            double t3779 = gamma_aa[index]+gamma_bb[index]+t3778;
            double t3780 = 1.0/(t3774*t3774);
            double t3807 = C*t3772;
            double t3781 = exp(-t3807);
            double t3782 = C*t3772*(7.0/1.8E1);
            double t3783 = Dd*t3772*t3775*(7.0/1.8E1);
            double t3784 = t3782+t3783-4.7E1/1.8E1;
            double t3785 = t3784*t3779;
            double t3786 = gamma_aa[index]+gamma_bb[index];
            double t3787 = C*t3772*(1.0/1.8E1);
            double t3788 = Dd*t3772*t3775*(1.0/1.8E1);
            double t3789 = t3787+t3788-5.0/2.0;
            double t3790 = pow(rho_a[index],8.0/3.0);
            double t3791 = pow(rho_b[index],8.0/3.0);
            double t3792 = t3790+t3791;
            double t3793 = 1.0/t3771;
            double t3794 = gamma_aa[index]*rho_a[index];
            double t3795 = gamma_bb[index]*rho_b[index];
            double t3796 = t3794+t3795;
            double t3797 = C*t3772*(1.0/9.0);
            double t3798 = Dd*t3772*t3775*(1.0/9.0);
            double t3799 = t3797+t3798-1.1E1/9.0;
            double t3800 = t3793*t3796*t3799;
            double t3833 = t3786*t3789;
            double t3834 = CFext*t3792;
            double t3801 = t3785+t3800-t3833-t3834;
            double t3802 = rho_a[index]*(4.0/3.0);
            double t3803 = 1.0/pow(t3771,4.0/3.0);
            double t3804 = Dd*Dd;
            double t3805 = 1.0/pow(t3771,5.0/3.0);
            double t3806 = 1.0/(t3771*t3771);
            double t3808 = 1.0/pow(t3771,1.1E1/3.0);
            double t3809 = C*t3803*(1.0/5.4E1);
            double t3810 = Dd*t3775*t3803*(1.0/5.4E1);
            double t3842 = t3780*t3804*t3805*(1.0/5.4E1);
            double t3811 = t3810-t3842+t3809;
            double t3812 = pow(rho_b[index],5.0/3.0);
            double t3813 = CFext*t3812*(8.0/3.0);
            double t3814 = C*t3803*(7.0/5.4E1);
            double t3815 = Dd*t3775*t3803*(7.0/5.4E1);
            double t3844 = t3780*t3804*t3805*(7.0/5.4E1);
            double t3816 = t3814+t3815-t3844;
            double t3817 = t3779*t3816;
            double t3818 = C*t3803*(1.0/2.7E1);
            double t3819 = Dd*t3775*t3803*(1.0/2.7E1);
            double t3828 = t3780*t3804*t3805*(1.0/2.7E1);
            double t3820 = t3818+t3819-t3828;
            double t3821 = t3793*t3796*t3820;
            double t3822 = t3796*t3799*t3806;
            double t3843 = t3786*t3811;
            double t3845 = gamma_bb[index]*t3793*t3799;
            double t3823 = t3821+t3813+t3822-t3843+t3817-t3845;
            double t3824 = 1.0/pow(t3771,7.0/3.0);
            double t3825 = 1.0/(t3771*t3771*t3771);
            double t3826 = 1.0/(t3774*t3774*t3774);
            double t3827 = 1.0/pow(t3771,8.0/3.0);
            double t3829 = rho_a[index]*2.0;
            double t3830 = rho_b[index]*2.0;
            double t3831 = t3830+t3829;
            double t3832 = t3779*t3831*(2.0/3.0);
            double t3835 = rho_a[index]*t3801;
            double t3836 = rho_b[index]*(2.0/3.0);
            double t3837 = t3802-t3836;
            double t3838 = gamma_aa[index]*t3837;
            double t3839 = rho_b[index]*(4.0/3.0);
            double t3840 = t3802+t3839;
            double t3841 = gamma_bb[index]*t3840;
            double t3846 = rho_a[index]*rho_b[index]*t3823;
            double t3847 = -t3832+t3841-t3835+t3846+t3838;
            double t3848 = 1.0/(t3771*t3771*t3771*t3771*t3771);
            double t3849 = rho_b[index]*rho_b[index];
            double t3850 = t3777-t3849;
            double t3851 = gamma_aa[index]*t3850;
            double t3852 = rho_a[index]*rho_a[index];
            double t3853 = t3777-t3852;
            double t3854 = gamma_bb[index]*t3853;
            double t3857 = t3776*t3779*(2.0/3.0);
            double t3858 = rho_a[index]*rho_b[index]*t3801;
            double t3855 = t3851+t3854-t3857-t3858;
            double t3856 = 1.0/(t3771*t3771*t3771*t3771*t3771*t3771);
            double t3859 = 1.0/pow(t3771,1.9E1/3.0);
            v_rho_b_rho_b_[index] = A*rho_a[index]*t3775*t3806*8.0-A*Dd*rho_a[index]*t3780*t3824*(8.0/3.0)-A* \
               rho_a[index]*rho_b[index]*t3775*t3825*8.0+A*Dd*rho_a[index]*rho_b[index]*1.0/pow(t3771,1.0E1/3.0)* \
               t3780*(4.0E1/9.0)+A*B*1.0/pow(t3771,1.4E1/3.0)*t3781*t3775*t3847*(2.2E1/3.0)-A*B*1.0/pow(t3771,1.7E1/ \
               3.0)*t3781*t3775*t3855*(1.54E2/9.0)+A*B*t3781*t3775*t3808*(gamma_aa[index]*2.0+gamma_ab[index]*(8.0/ \
               3.0)-rho_a[index]*t3823*2.0-rho_a[index]*rho_b[index]*(CFext*pow(rho_b[index],2.0/3.0)*(4.0E1/9.0) \
               +t3786*(C*t3824*(2.0/8.1E1)+Dd*t3775*t3824*(2.0/8.1E1)-t3780*t3804*t3827*(1.0/2.7E1)+Dd*t3804*t3825* \
               t3826*(1.0/8.1E1))-t3779*(C*t3824*(1.4E1/8.1E1)+Dd*t3775*t3824*(1.4E1/8.1E1)-t3780*t3804*t3827*(7.0/ \
               2.7E1)+Dd*t3804*t3825*t3826*(7.0/8.1E1))-t3793*t3796*(C*t3824*(4.0/8.1E1)+Dd*t3775*t3824*(4.0/8.1E1) \
               -t3780*t3804*t3827*(2.0/2.7E1)+Dd*t3804*t3825*t3826*(2.0/8.1E1))+gamma_bb[index]*t3793*t3820*2.0+gamma_bb[index]* \
               t3799*t3806*2.0-t3796*t3799*t3825*2.0-t3796*t3820*t3806*2.0))-A*rho_a[index]*rho_b[index]*t3804*t3808* \
               t3826*(8.0/9.0)-A*B*t3781*t3804*t3826*t3855*t3859*(2.0/9.0)-A*B*(C*C)*t3781*t3775*t3855*t3859*(1.0/ \
               9.0)+A*B*C*t3781*t3775*t3855*t3856*(2.6E1/9.0)-A*B*C*t3781*t3775*t3847*t3848*(2.0/3.0)+A*B*Dd*t3780* \
               t3781*t3855*t3856*(2.6E1/9.0)-A*B*Dd*t3780*t3781*t3847*t3848*(2.0/3.0)-A*B*C*Dd*t3780*t3781*t3855* \
               t3859*(2.0/9.0);
        } else if (rho_a[index] > cutoff_) {
            v_rho_b_rho_b_[index] = 0.0;
        } else if (rho_b[index] > cutoff_) {
            v_rho_b_rho_b_[index] = 0.0;
        } else {
            v_rho_b_rho_b_[index] = 0.0;
        } 

        if (is_gga_) {

            //V_rho_a_gamma_aa
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t3861 = rho_a[index]+rho_b[index];
                double t3862 = 1.0/pow(t3861,1.0/3.0);
                double t3863 = Dd*t3862;
                double t3864 = t3863+1.0;
                double t3865 = 1.0/t3864;
                double t3879 = C*t3862;
                double t3866 = exp(-t3879);
                double t3867 = C*t3862*(1.0/3.0);
                double t3868 = Dd*t3862*t3865*(1.0/3.0);
                double t3869 = 1.0/t3861;
                double t3870 = C*t3862*(1.0/9.0);
                double t3871 = Dd*t3862*t3865*(1.0/9.0);
                double t3872 = t3870+t3871-1.1E1/9.0;
                double t3873 = rho_a[index]*t3872*t3869;
                double t3874 = t3873+t3867+t3868-1.0/9.0;
                double t3875 = 1.0/pow(t3861,4.0/3.0);
                double t3876 = Dd*Dd;
                double t3877 = 1.0/pow(t3861,5.0/3.0);
                double t3878 = 1.0/(t3864*t3864);
                double t3880 = rho_b[index]*rho_b[index];
                double t3881 = rho_a[index]*rho_b[index]*t3874;
                double t3882 = t3880+t3881;
                double t3883 = 1.0/(t3861*t3861*t3861*t3861*t3861);
                v_rho_a_gamma_aa_[index] = A*B*1.0/pow(t3861,1.4E1/3.0)*t3882*t3865*t3866*(-1.1E1/3.0)+A*B*1.0/pow(t3861,1.1E1/ \
                   3.0)*t3865*t3866*(rho_b[index]*t3874-rho_a[index]*rho_b[index]*(C*t3875*(1.0/9.0)-t3872*t3869+rho_a[index]* \
                   t3869*(C*t3875*(1.0/2.7E1)+Dd*t3865*t3875*(1.0/2.7E1)-t3876*t3877*t3878*(1.0/2.7E1))+rho_a[index]* \
                   1.0/(t3861*t3861)*t3872+Dd*t3865*t3875*(1.0/9.0)-t3876*t3877*t3878*(1.0/9.0)))+A*B*C*t3882*t3865*t3883* \
                   t3866*(1.0/3.0)+A*B*Dd*t3882*t3883*t3866*t3878*(1.0/3.0);
            } else if (rho_a[index] > cutoff_) {
                v_rho_a_gamma_aa_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_a_gamma_aa_[index] = 0.0;
            } else {
                v_rho_a_gamma_aa_[index] = 0.0;
            } 

            //V_rho_a_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t3885 = rho_a[index]+rho_b[index];
                double t3886 = 1.0/pow(t3885,1.0/3.0);
                double t3887 = Dd*t3886;
                double t3888 = t3887+1.0;
                double t3889 = 1.0/t3888;
                double t3895 = C*t3886;
                double t3890 = exp(-t3895);
                double t3891 = C*t3886*(7.0/9.0);
                double t3892 = Dd*t3886*t3889*(7.0/9.0);
                double t3893 = t3891+t3892-4.7E1/9.0;
                double t3894 = 1.0/pow(t3885,4.0/3.0);
                double t3896 = t3885*t3885;
                double t3897 = t3896*(4.0/3.0);
                double t3898 = rho_a[index]*rho_b[index]*t3893;
                double t3899 = t3897+t3898;
                double t3900 = 1.0/(t3885*t3885*t3885*t3885*t3885);
                double t3901 = 1.0/(t3888*t3888);
                v_rho_a_gamma_ab_[index] = A*B*t3890*1.0/pow(t3885,1.4E1/3.0)*t3889*t3899*(-1.1E1/3.0)+A*B*t3890* \
                   1.0/pow(t3885,1.1E1/3.0)*t3889*(rho_a[index]*(8.0/3.0)+rho_b[index]*(8.0/3.0)+rho_b[index]*t3893-rho_a[index]* \
                   rho_b[index]*(C*t3894*(7.0/2.7E1)-(Dd*Dd)*1.0/pow(t3885,5.0/3.0)*t3901*(7.0/2.7E1)+Dd*t3894*t3889* \
                   (7.0/2.7E1)))+A*B*C*t3890*t3889*t3899*t3900*(1.0/3.0)+A*B*Dd*t3890*t3899*t3900*t3901*(1.0/3.0);
            } else if (rho_a[index] > cutoff_) {
                v_rho_a_gamma_ab_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_a_gamma_ab_[index] = 0.0;
            } else {
                v_rho_a_gamma_ab_[index] = 0.0;
            } 

            //V_rho_a_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t3903 = rho_a[index]+rho_b[index];
                double t3904 = 1.0/pow(t3903,1.0/3.0);
                double t3905 = Dd*t3904;
                double t3906 = t3905+1.0;
                double t3907 = 1.0/t3906;
                double t3921 = C*t3904;
                double t3908 = exp(-t3921);
                double t3909 = C*t3904*(1.0/3.0);
                double t3910 = Dd*t3904*t3907*(1.0/3.0);
                double t3911 = 1.0/t3903;
                double t3912 = C*t3904*(1.0/9.0);
                double t3913 = Dd*t3904*t3907*(1.0/9.0);
                double t3914 = t3912+t3913-1.1E1/9.0;
                double t3915 = rho_b[index]*t3911*t3914;
                double t3916 = t3910+t3915+t3909-1.0/9.0;
                double t3917 = 1.0/pow(t3903,4.0/3.0);
                double t3918 = Dd*Dd;
                double t3919 = 1.0/pow(t3903,5.0/3.0);
                double t3920 = 1.0/(t3906*t3906);
                double t3922 = rho_a[index]*rho_a[index];
                double t3923 = rho_a[index]*rho_b[index]*t3916;
                double t3924 = t3922+t3923;
                double t3925 = 1.0/(t3903*t3903*t3903*t3903*t3903);
                v_rho_a_gamma_bb_[index] = A*B*1.0/pow(t3903,1.4E1/3.0)*t3924*t3907*t3908*(-1.1E1/3.0)+A*B*1.0/pow(t3903,1.1E1/ \
                   3.0)*t3907*t3908*(rho_a[index]*2.0+rho_b[index]*t3916-rho_a[index]*rho_b[index]*(C*t3917*(1.0/9.0) \
                   +rho_b[index]*t3911*(C*t3917*(1.0/2.7E1)+Dd*t3907*t3917*(1.0/2.7E1)-t3920*t3918*t3919*(1.0/2.7E1)) \
                   +rho_b[index]*1.0/(t3903*t3903)*t3914+Dd*t3907*t3917*(1.0/9.0)-t3920*t3918*t3919*(1.0/9.0)))+A*B*C* \
                   t3924*t3907*t3925*t3908*(1.0/3.0)+A*B*Dd*t3920*t3924*t3925*t3908*(1.0/3.0);
            } else if (rho_a[index] > cutoff_) {
                v_rho_a_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_a_gamma_bb_[index] = 0.0;
            } else {
                v_rho_a_gamma_bb_[index] = 0.0;
            } 

            //V_rho_b_gamma_aa
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t3927 = rho_a[index]+rho_b[index];
                double t3928 = 1.0/pow(t3927,1.0/3.0);
                double t3929 = Dd*t3928;
                double t3930 = t3929+1.0;
                double t3931 = 1.0/t3930;
                double t3945 = C*t3928;
                double t3932 = exp(-t3945);
                double t3933 = C*t3928*(1.0/3.0);
                double t3934 = Dd*t3931*t3928*(1.0/3.0);
                double t3935 = 1.0/t3927;
                double t3936 = C*t3928*(1.0/9.0);
                double t3937 = Dd*t3931*t3928*(1.0/9.0);
                double t3938 = t3936+t3937-1.1E1/9.0;
                double t3939 = rho_a[index]*t3935*t3938;
                double t3940 = t3933+t3934+t3939-1.0/9.0;
                double t3941 = 1.0/pow(t3927,4.0/3.0);
                double t3942 = Dd*Dd;
                double t3943 = 1.0/pow(t3927,5.0/3.0);
                double t3944 = 1.0/(t3930*t3930);
                double t3946 = rho_b[index]*rho_b[index];
                double t3947 = rho_a[index]*rho_b[index]*t3940;
                double t3948 = t3946+t3947;
                double t3949 = 1.0/(t3927*t3927*t3927*t3927*t3927);
                v_rho_b_gamma_aa_[index] = A*B*t3931*t3932*1.0/pow(t3927,1.4E1/3.0)*t3948*(-1.1E1/3.0)+A*B*t3931* \
                   t3932*1.0/pow(t3927,1.1E1/3.0)*(rho_b[index]*2.0+rho_a[index]*t3940-rho_a[index]*rho_b[index]*(C*t3941* \
                   (1.0/9.0)+rho_a[index]*t3935*(C*t3941*(1.0/2.7E1)+Dd*t3931*t3941*(1.0/2.7E1)-t3942*t3943*t3944*(1.0/ \
                   2.7E1))+rho_a[index]*1.0/(t3927*t3927)*t3938+Dd*t3931*t3941*(1.0/9.0)-t3942*t3943*t3944*(1.0/9.0)) \
                   )+A*B*C*t3931*t3932*t3948*t3949*(1.0/3.0)+A*B*Dd*t3932*t3944*t3948*t3949*(1.0/3.0);
            } else if (rho_a[index] > cutoff_) {
                v_rho_b_gamma_aa_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_b_gamma_aa_[index] = 0.0;
            } else {
                v_rho_b_gamma_aa_[index] = 0.0;
            } 

            //V_rho_b_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t3951 = rho_a[index]+rho_b[index];
                double t3952 = 1.0/pow(t3951,1.0/3.0);
                double t3953 = Dd*t3952;
                double t3954 = t3953+1.0;
                double t3955 = 1.0/t3954;
                double t3961 = C*t3952;
                double t3956 = exp(-t3961);
                double t3957 = C*t3952*(7.0/9.0);
                double t3958 = Dd*t3952*t3955*(7.0/9.0);
                double t3959 = t3957+t3958-4.7E1/9.0;
                double t3960 = 1.0/pow(t3951,4.0/3.0);
                double t3962 = t3951*t3951;
                double t3963 = t3962*(4.0/3.0);
                double t3964 = rho_a[index]*rho_b[index]*t3959;
                double t3965 = t3963+t3964;
                double t3966 = 1.0/(t3951*t3951*t3951*t3951*t3951);
                double t3967 = 1.0/(t3954*t3954);
                v_rho_b_gamma_ab_[index] = A*B*1.0/pow(t3951,1.4E1/3.0)*t3955*t3956*t3965*(-1.1E1/3.0)+A*B*1.0/pow(t3951,1.1E1/ \
                   3.0)*t3955*t3956*(rho_a[index]*(8.0/3.0)+rho_b[index]*(8.0/3.0)+rho_a[index]*t3959-rho_a[index]*rho_b[index]* \
                   (C*t3960*(7.0/2.7E1)-(Dd*Dd)*1.0/pow(t3951,5.0/3.0)*t3967*(7.0/2.7E1)+Dd*t3960*t3955*(7.0/2.7E1))) \
                   +A*B*C*t3955*t3956*t3965*t3966*(1.0/3.0)+A*B*Dd*t3956*t3965*t3966*t3967*(1.0/3.0);
            } else if (rho_a[index] > cutoff_) {
                v_rho_b_gamma_ab_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_b_gamma_ab_[index] = 0.0;
            } else {
                v_rho_b_gamma_ab_[index] = 0.0;
            } 

            //V_rho_b_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t3969 = rho_a[index]+rho_b[index];
                double t3970 = 1.0/pow(t3969,1.0/3.0);
                double t3971 = Dd*t3970;
                double t3972 = t3971+1.0;
                double t3973 = 1.0/t3972;
                double t3987 = C*t3970;
                double t3974 = exp(-t3987);
                double t3975 = C*t3970*(1.0/3.0);
                double t3976 = Dd*t3970*t3973*(1.0/3.0);
                double t3977 = 1.0/t3969;
                double t3978 = C*t3970*(1.0/9.0);
                double t3979 = Dd*t3970*t3973*(1.0/9.0);
                double t3980 = t3978+t3979-1.1E1/9.0;
                double t3981 = rho_b[index]*t3980*t3977;
                double t3982 = t3981+t3975+t3976-1.0/9.0;
                double t3983 = 1.0/pow(t3969,4.0/3.0);
                double t3984 = Dd*Dd;
                double t3985 = 1.0/pow(t3969,5.0/3.0);
                double t3986 = 1.0/(t3972*t3972);
                double t3988 = rho_a[index]*rho_a[index];
                double t3989 = rho_a[index]*rho_b[index]*t3982;
                double t3990 = t3988+t3989;
                double t3991 = 1.0/(t3969*t3969*t3969*t3969*t3969);
                v_rho_b_gamma_bb_[index] = A*B*t3990*t3973*t3974*1.0/pow(t3969,1.4E1/3.0)*(-1.1E1/3.0)+A*B*t3973* \
                   t3974*1.0/pow(t3969,1.1E1/3.0)*(rho_a[index]*t3982-rho_a[index]*rho_b[index]*(C*t3983*(1.0/9.0)-t3980* \
                   t3977+rho_b[index]*t3977*(C*t3983*(1.0/2.7E1)+Dd*t3973*t3983*(1.0/2.7E1)-t3984*t3985*t3986*(1.0/2.7E1) \
                   )+rho_b[index]*t3980*1.0/(t3969*t3969)+Dd*t3973*t3983*(1.0/9.0)-t3984*t3985*t3986*(1.0/9.0)))+A*B* \
                   C*t3990*t3973*t3991*t3974*(1.0/3.0)+A*B*Dd*t3990*t3991*t3974*t3986*(1.0/3.0);
            } else if (rho_a[index] > cutoff_) {
                v_rho_b_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_b_gamma_bb_[index] = 0.0;
            } else {
                v_rho_b_gamma_bb_[index] = 0.0;
            } 

            //V_gamma_aa_gamma_aa
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_aa_gamma_aa_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_aa_gamma_aa_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_aa_gamma_aa_[index] = 0.0;
            } else {
                v_gamma_aa_gamma_aa_[index] = 0.0;
            } 

            //V_gamma_aa_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_aa_gamma_ab_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_aa_gamma_ab_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_aa_gamma_ab_[index] = 0.0;
            } else {
                v_gamma_aa_gamma_ab_[index] = 0.0;
            } 

            //V_gamma_aa_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_aa_gamma_bb_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_aa_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_aa_gamma_bb_[index] = 0.0;
            } else {
                v_gamma_aa_gamma_bb_[index] = 0.0;
            } 

            //V_gamma_ab_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_ab_gamma_ab_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_ab_gamma_ab_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_ab_gamma_ab_[index] = 0.0;
            } else {
                v_gamma_ab_gamma_ab_[index] = 0.0;
            } 

            //V_gamma_ab_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_ab_gamma_bb_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_ab_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_ab_gamma_bb_[index] = 0.0;
            } else {
                v_gamma_ab_gamma_bb_[index] = 0.0;
            } 

            //V_gamma_bb_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_bb_gamma_bb_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_bb_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_bb_gamma_bb_[index] = 0.0;
            } else {
                v_gamma_bb_gamma_bb_[index] = 0.0;
            } 

        }
        if (is_meta_) {

            //V_rho_a_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_a_tau_a_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_a_tau_a_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_a_tau_a_[index] = 0.0;
            } else {
                v_rho_a_tau_a_[index] = 0.0;
            } 

            //V_rho_a_tau_b
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_a_tau_b_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_a_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_a_tau_b_[index] = 0.0;
            } else {
                v_rho_a_tau_b_[index] = 0.0;
            } 

            //V_rho_b_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_b_tau_a_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_b_tau_a_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_b_tau_a_[index] = 0.0;
            } else {
                v_rho_b_tau_a_[index] = 0.0;
            } 

            //V_rho_b_tau_b
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_b_tau_b_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_b_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_b_tau_b_[index] = 0.0;
            } else {
                v_rho_b_tau_b_[index] = 0.0;
            } 

            //V_tau_a_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_tau_a_tau_a_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_tau_a_tau_a_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_tau_a_tau_a_[index] = 0.0;
            } else {
                v_tau_a_tau_a_[index] = 0.0;
            } 

            //V_tau_a_tau_b
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_tau_a_tau_b_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_tau_a_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_tau_a_tau_b_[index] = 0.0;
            } else {
                v_tau_a_tau_b_[index] = 0.0;
            } 

            //V_tau_b_tau_b
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_tau_b_tau_b_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_tau_b_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_tau_b_tau_b_[index] = 0.0;
            } else {
                v_tau_b_tau_b_[index] = 0.0;
            } 

            if (is_gga_) {

                //V_gamma_aa_tau_a
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } else {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } 

                //V_gamma_aa_tau_b
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_aa_tau_b_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_aa_tau_b_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_aa_tau_b_[index] = 0.0;
                } else {
                    v_gamma_aa_tau_b_[index] = 0.0;
                } 

                //V_gamma_ab_tau_a
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_ab_tau_a_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_ab_tau_a_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_ab_tau_a_[index] = 0.0;
                } else {
                    v_gamma_ab_tau_a_[index] = 0.0;
                } 

                //V_gamma_ab_tau_b
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_ab_tau_b_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_ab_tau_b_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_ab_tau_b_[index] = 0.0;
                } else {
                    v_gamma_ab_tau_b_[index] = 0.0;
                } 

                //V_gamma_bb_tau_a
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_bb_tau_a_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_bb_tau_a_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_bb_tau_a_[index] = 0.0;
                } else {
                    v_gamma_bb_tau_a_[index] = 0.0;
                } 

                //V_gamma_bb_tau_b
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_bb_tau_b_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_bb_tau_b_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_bb_tau_b_[index] = 0.0;
                } else {
                    v_gamma_bb_tau_b_[index] = 0.0;
                } 

            }
        }
    }
}

}}

