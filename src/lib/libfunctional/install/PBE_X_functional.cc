/**********************************************************
* PBE_X_functional.cc: definitions for PBE_X_functional for KS-DFT
* Robert Parrish, robparrish@gmail.com
* Autogenerated by MATLAB Script on 07-Mar-2012
*
***********************************************************/
#include <libmints/mints.h>
#include <libfock/points.h>
#include "PBE_X_functional.h"
#include <stdlib.h>
#include <cmath>
#include <string>
#include <string>
#include <vector>

using namespace psi;
using namespace boost;
using namespace std;

namespace psi { namespace functional {

PBE_X_Functional::PBE_X_Functional(int npoints, int deriv) : Functional(npoints, deriv)
{

    name_ = "PBE_X";
    description_ = "PBE Exchange Functional";
    citation_ = "J.P. Perdew et. al., Phys. Rev. Lett., 77(18), 3865-3868, 1996";

    double k = 3.0936677262801355E+00;
    params_.push_back(make_pair("k",k));
    double e = -2.3873241463784300E-01;
    params_.push_back(make_pair("e",e));
    double kp = 8.0400000000000005E-01;
    params_.push_back(make_pair("kp",kp));
    double mu_ = 2.1951497276451709E-01;
    params_.push_back(make_pair("mu_",mu_));

    is_gga_ = true;
    is_meta_ = false;

    //Required allocateion
    allocate();
}
PBE_X_Functional::~PBE_X_Functional()
{
}
void PBE_X_Functional::computeRKSFunctional(boost::shared_ptr<RKSFunctions> prop)
{
    int ntrue = prop->npoints();

    const double* restrict rho_a;
    const double* restrict gamma_aa;
    const double* restrict tau_a;

    rho_a = prop->property_value("RHO_A")->pointer();
    if (is_gga_) {
        gamma_aa = prop->property_value("GAMMA_AA")->pointer();
    }
    if (is_meta_) {
        tau_a = prop->property_value("TAU_A")->pointer();
    }

    double k = params_[0].second;
    double e = params_[1].second;
    double kp = params_[2].second;
    double mu_ = params_[3].second;

    //Functional
    for (int index = 0; index < ntrue; index++) {

        //Functional Value
        if (rho_a[index] > cutoff_) {
            double t125806 = rho_a[index]*2.0;
            functional_[index] = e*k*rho_a[index]*pow(t125806,1.0/3.0)*(kp-kp/((gamma_aa[index]*1.0/(k*k)*mu_* \
               1.0/pow(t125806,8.0/3.0))/kp+1.0)+1.0)*2.0;
        } else {
            functional_[index] = 0.0;
        } 

    }
    //First Partials
    for (int index = 0; index < ntrue && deriv_ >= 1; index++) {

        //V_rho_a
        if (rho_a[index] > cutoff_) {
            double t125808 = rho_a[index]*2.0;
            double t125809 = 1.0/(k*k);
            double t125810 = 1.0/kp;
            double t125811 = 1.0/pow(t125808,8.0/3.0);
            double t125812 = gamma_aa[index]*mu_*t125810*t125811*t125809;
            double t125813 = t125812+1.0;
            double t125814 = 1.0/t125813;
            double t125815 = kp-kp*t125814+1.0;
            v_rho_a_[index] = e*k*t125815*pow(t125808,1.0/3.0)+e*k*rho_a[index]*t125815*1.0/pow(t125808,2.0/3.0) \
               *(2.0/3.0)-(e*gamma_aa[index]*mu_*rho_a[index]*1.0/(t125813*t125813)*1.0/pow(t125808,1.0E1/3.0)*(1.6E1/ \
               3.0))/k;
        } else {
            v_rho_a_[index] = 0.0;
        } 

        if (is_gga_) {

            if (rho_a[index] > cutoff_) {
                double t125817 = rho_a[index]*2.0;
                v_gamma_aa_[index] = (e*mu_*rho_a[index]*1.0/pow(t125817,7.0/3.0)*1.0/pow((gamma_aa[index]*1.0/(k* \
                   k)*mu_*1.0/pow(t125817,8.0/3.0))/kp+1.0,2.0)*2.0)/k;
            } else {
                v_gamma_aa_[index] = 0.0;
            } 

        }
        if (is_meta_) {

            //V_tau_a
            if (rho_a[index] > cutoff_) {
                v_tau_a_[index] = 0.0;
            } else {
                v_tau_a_[index] = 0.0;
            } 

        }
    }
    //Second Partials
    for (int index = 0; index < ntrue && deriv_ >= 2; index++) {

        //V_rho_a_rho_a
        if (rho_a[index] > cutoff_) {
            double t125820 = rho_a[index]*2.0;
            double t125821 = 1.0/(k*k);
            double t125822 = 1.0/kp;
            double t125823 = 1.0/pow(t125820,8.0/3.0);
            double t125824 = gamma_aa[index]*mu_*t125821*t125822*t125823;
            double t125825 = t125824+1.0;
            double t125826 = 1.0/t125825;
            double t125827 = kp-kp*t125826+1.0;
            double t125828 = 1.0/k;
            double t125829 = 1.0/(t125825*t125825);
            v_rho_a_rho_a_[index] = e*k*1.0/pow(t125820,2.0/3.0)*t125827*(4.0/3.0)-e*k*rho_a[index]*1.0/pow(t125820,5.0/ \
               3.0)*t125827*(8.0/9.0)-e*gamma_aa[index]*mu_*1.0/pow(t125820,1.0E1/3.0)*t125828*t125829*(3.2E1/3.0) \
               -e*(gamma_aa[index]*gamma_aa[index])*1.0/(k*k*k)*(mu_*mu_)*1.0/(rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]*rho_a[index])*t125822*1.0/(t125825*t125825*t125825)*(4.0/9.0)+e*gamma_aa[index]* \
               mu_*rho_a[index]*1.0/pow(t125820,1.3E1/3.0)*t125828*t125829*3.2E1;
        } else {
            v_rho_a_rho_a_[index] = 0.0;
        } 

        if (is_gga_) {

            //V_rho_a_gamma_aa
            if (rho_a[index] > cutoff_) {
                double t125831 = rho_a[index]*2.0;
                double t125832 = 1.0/k;
                double t125833 = 1.0/(k*k);
                double t125834 = 1.0/kp;
                double t125835 = 1.0/pow(t125831,8.0/3.0);
                double t125836 = gamma_aa[index]*mu_*t125833*t125834*t125835;
                double t125837 = t125836+1.0;
                double t125838 = 1.0/(t125837*t125837);
                v_rho_a_gamma_aa_[index] = e*mu_*1.0/pow(t125831,7.0/3.0)*t125832*t125838-e*mu_*rho_a[index]*1.0/ \
                   pow(t125831,1.0E1/3.0)*t125832*t125838*(1.4E1/3.0)+e*gamma_aa[index]*1.0/(k*k*k)*(mu_*mu_)*1.0/(rho_a[index]* \
                   rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index])*t125834*1.0/(t125837*t125837*t125837)*(1.0/6.0) \
                   ;
            } else {
                v_rho_a_gamma_aa_[index] = 0.0;
            } 

            //V_gamma_aa_gamma_aa
            if (rho_a[index] > cutoff_) {
                double t125840 = 1.0/kp;
                v_gamma_aa_gamma_aa_[index] = e*1.0/(k*k*k)*(mu_*mu_)*1.0/(rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index])*t125840*1.0/pow(gamma_aa[index]*1.0/(k*k)*mu_*t125840*1.0/pow(rho_a[index]*2.0,8.0/3.0) \
                   +1.0,3.0)*(-1.0/8.0);
            } else {
                v_gamma_aa_gamma_aa_[index] = 0.0;
            } 

        }
        if (is_meta_) {

            //V_rho_a_tau_a
            if (rho_a[index] > cutoff_) {
                v_rho_a_tau_a_[index] = 0.0;
            } else {
                v_rho_a_tau_a_[index] = 0.0;
            } 

            //V_tau_a_tau_a
            if (rho_a[index] > cutoff_) {
                v_tau_a_tau_a_[index] = 0.0;
            } else {
                v_tau_a_tau_a_[index] = 0.0;
            } 

            if (is_gga_) {

                //V_gamma_aa_tau_a
                if (rho_a[index] > cutoff_) {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } else {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } 

            }
        }
    }
}
void PBE_X_Functional::computeUKSFunctional(boost::shared_ptr<UKSFunctions> prop)
{
    int ntrue = prop->npoints();

    const double* restrict rho_a;
    const double* restrict rho_b;
    const double* restrict gamma_aa;
    const double* restrict gamma_ab;
    const double* restrict gamma_bb;
    const double* restrict tau_a;
    const double* restrict tau_b;

    rho_a = prop->property_value("RHO_A")->pointer();
    rho_b = prop->property_value("RHO_B")->pointer();
    if (is_gga_) {
        gamma_aa = prop->property_value("GAMMA_AA")->pointer();
        gamma_ab = prop->property_value("GAMMA_AB")->pointer();
        gamma_bb = prop->property_value("GAMMA_BB")->pointer();
    }
    if (is_meta_) {
        tau_a = prop->property_value("TAU_A")->pointer();
        tau_b = prop->property_value("TAU_B")->pointer();
    }

    double k = params_[0].second;
    double e = params_[1].second;
    double kp = params_[2].second;
    double mu_ = params_[3].second;

    //Functional
    for (int index = 0; index < ntrue; index++) {

        //Functional Value
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t125544 = rho_a[index]*2.0;
            double t125545 = 1.0/(k*k);
            double t125546 = 1.0/kp;
            double t125547 = rho_b[index]*2.0;
            functional_[index] = e*k*rho_a[index]*pow(t125544,1.0/3.0)*(kp-kp/(gamma_aa[index]*mu_*1.0/pow(t125544,8.0/ \
               3.0)*t125545*t125546+1.0)+1.0)+e*k*rho_b[index]*pow(t125547,1.0/3.0)*(kp-kp/(gamma_bb[index]*mu_*t125545* \
               t125546*1.0/pow(t125547,8.0/3.0)+1.0)+1.0);
        } else if (rho_a[index] > cutoff_) {
            double t125705 = rho_a[index]*2.0;
            functional_[index] = e*k*rho_a[index]*pow(t125705,1.0/3.0)*(kp-kp/((gamma_aa[index]*1.0/(k*k)*mu_* \
               1.0/pow(t125705,8.0/3.0))/kp+1.0)+1.0);
        } else if (rho_b[index] > cutoff_) {
            double t125640 = rho_b[index]*2.0;
            functional_[index] = e*k*rho_b[index]*pow(t125640,1.0/3.0)*(kp-kp/((gamma_bb[index]*1.0/(k*k)*mu_* \
               1.0/pow(t125640,8.0/3.0))/kp+1.0)+1.0);
        } else {
            functional_[index] = 0.0;
        } 

    }
    //First Partials
    for (int index = 0; index < ntrue && deriv_ >= 1; index++) {

        //V_rho_a
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t125549 = rho_a[index]*2.0;
            double t125550 = 1.0/(k*k);
            double t125551 = 1.0/kp;
            double t125552 = 1.0/pow(t125549,8.0/3.0);
            double t125553 = gamma_aa[index]*mu_*t125550*t125551*t125552;
            double t125554 = t125553+1.0;
            double t125555 = 1.0/t125554;
            double t125556 = kp-kp*t125555+1.0;
            v_rho_a_[index] = e*k*t125556*pow(t125549,1.0/3.0)+e*k*rho_a[index]*t125556*1.0/pow(t125549,2.0/3.0) \
               *(2.0/3.0)-(e*gamma_aa[index]*mu_*rho_a[index]*1.0/(t125554*t125554)*1.0/pow(t125549,1.0E1/3.0)*(1.6E1/ \
               3.0))/k;
        } else if (rho_a[index] > cutoff_) {
            double t125707 = rho_a[index]*2.0;
            double t125708 = 1.0/(k*k);
            double t125709 = 1.0/kp;
            double t125710 = 1.0/pow(t125707,8.0/3.0);
            double t125711 = gamma_aa[index]*mu_*t125710*t125708*t125709;
            double t125712 = t125711+1.0;
            double t125713 = 1.0/t125712;
            double t125714 = kp-kp*t125713+1.0;
            v_rho_a_[index] = e*k*t125714*pow(t125707,1.0/3.0)+e*k*rho_a[index]*t125714*1.0/pow(t125707,2.0/3.0) \
               *(2.0/3.0)-(e*gamma_aa[index]*mu_*rho_a[index]*1.0/(t125712*t125712)*1.0/pow(t125707,1.0E1/3.0)*(1.6E1/ \
               3.0))/k;
        } else if (rho_b[index] > cutoff_) {
            v_rho_a_[index] = 0.0;
        } else {
            v_rho_a_[index] = 0.0;
        } 

        //V_rho_b
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t125558 = rho_b[index]*2.0;
            double t125559 = 1.0/(k*k);
            double t125560 = 1.0/kp;
            double t125561 = 1.0/pow(t125558,8.0/3.0);
            double t125562 = gamma_bb[index]*mu_*t125560*t125561*t125559;
            double t125563 = t125562+1.0;
            double t125564 = 1.0/t125563;
            double t125565 = kp-kp*t125564+1.0;
            v_rho_b_[index] = e*k*t125565*pow(t125558,1.0/3.0)+e*k*rho_b[index]*t125565*1.0/pow(t125558,2.0/3.0) \
               *(2.0/3.0)-(e*gamma_bb[index]*mu_*rho_b[index]*1.0/(t125563*t125563)*1.0/pow(t125558,1.0E1/3.0)*(1.6E1/ \
               3.0))/k;
        } else if (rho_a[index] > cutoff_) {
            v_rho_b_[index] = 0.0;
        } else if (rho_b[index] > cutoff_) {
            double t125643 = rho_b[index]*2.0;
            double t125644 = 1.0/(k*k);
            double t125645 = 1.0/kp;
            double t125646 = 1.0/pow(t125643,8.0/3.0);
            double t125647 = gamma_bb[index]*mu_*t125644*t125645*t125646;
            double t125648 = t125647+1.0;
            double t125649 = 1.0/t125648;
            double t125650 = kp-kp*t125649+1.0;
            v_rho_b_[index] = e*k*t125650*pow(t125643,1.0/3.0)+e*k*rho_b[index]*t125650*1.0/pow(t125643,2.0/3.0) \
               *(2.0/3.0)-(e*gamma_bb[index]*mu_*rho_b[index]*1.0/pow(t125643,1.0E1/3.0)*1.0/(t125648*t125648)*(1.6E1/ \
               3.0))/k;
        } else {
            v_rho_b_[index] = 0.0;
        } 

        if (is_gga_) {

            //V_gamma_aa
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t125567 = rho_a[index]*2.0;
                v_gamma_aa_[index] = (e*mu_*rho_a[index]*1.0/pow(t125567,7.0/3.0)*1.0/pow((gamma_aa[index]*1.0/(k* \
                   k)*mu_*1.0/pow(t125567,8.0/3.0))/kp+1.0,2.0))/k;
            } else if (rho_a[index] > cutoff_) {
                double t125717 = rho_a[index]*2.0;
                v_gamma_aa_[index] = (e*mu_*rho_a[index]*1.0/pow(t125717,7.0/3.0)*1.0/pow((gamma_aa[index]*1.0/(k* \
                   k)*mu_*1.0/pow(t125717,8.0/3.0))/kp+1.0,2.0))/k;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_aa_[index] = 0.0;
            } else {
                v_gamma_aa_[index] = 0.0;
            } 

            //V_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_ab_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_ab_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_ab_[index] = 0.0;
            } else {
                v_gamma_ab_[index] = 0.0;
            } 

            //V_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t125570 = rho_b[index]*2.0;
                v_gamma_bb_[index] = (e*mu_*rho_b[index]*1.0/pow(t125570,7.0/3.0)*1.0/pow((gamma_bb[index]*1.0/(k* \
                   k)*mu_*1.0/pow(t125570,8.0/3.0))/kp+1.0,2.0))/k;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                double t125654 = rho_b[index]*2.0;
                v_gamma_bb_[index] = (e*mu_*rho_b[index]*1.0/pow(t125654,7.0/3.0)*1.0/pow((gamma_bb[index]*1.0/(k* \
                   k)*mu_*1.0/pow(t125654,8.0/3.0))/kp+1.0,2.0))/k;
            } else {
                v_gamma_bb_[index] = 0.0;
            } 
        }
        if (is_meta_) {

            //V_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_tau_a_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_tau_a_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_tau_a_[index] = 0.0;
            } else {
                v_tau_a_[index] = 0.0;
            } 

            //V_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_tau_b_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_tau_b_[index] = 0.0;
            } else {
                v_tau_b_[index] = 0.0;
            } 
        }
    }
    //Second Partials
    for (int index = 0; index < ntrue && deriv_ >= 2; index++) {

        //V_rho_a_rho_a
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t125574 = rho_a[index]*2.0;
            double t125575 = 1.0/(k*k);
            double t125576 = 1.0/kp;
            double t125577 = 1.0/pow(t125574,8.0/3.0);
            double t125578 = gamma_aa[index]*mu_*t125575*t125576*t125577;
            double t125579 = t125578+1.0;
            double t125580 = 1.0/t125579;
            double t125581 = kp-kp*t125580+1.0;
            double t125582 = 1.0/k;
            double t125583 = 1.0/(t125579*t125579);
            v_rho_a_rho_a_[index] = e*k*t125581*1.0/pow(t125574,2.0/3.0)*(4.0/3.0)-e*k*rho_a[index]*t125581*1.0/ \
               pow(t125574,5.0/3.0)*(8.0/9.0)-e*gamma_aa[index]*mu_*t125582*1.0/pow(t125574,1.0E1/3.0)*t125583*(3.2E1/ \
               3.0)-e*(gamma_aa[index]*gamma_aa[index])*1.0/(k*k*k)*(mu_*mu_)*1.0/(rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]*rho_a[index])*t125576*1.0/(t125579*t125579*t125579)*(4.0/9.0)+e*gamma_aa[index]* \
               mu_*rho_a[index]*t125582*1.0/pow(t125574,1.3E1/3.0)*t125583*3.2E1;
        } else if (rho_a[index] > cutoff_) {
            double t125723 = rho_a[index]*2.0;
            double t125724 = 1.0/(k*k);
            double t125725 = 1.0/kp;
            double t125726 = 1.0/pow(t125723,8.0/3.0);
            double t125727 = gamma_aa[index]*mu_*t125724*t125725*t125726;
            double t125728 = t125727+1.0;
            double t125729 = 1.0/t125728;
            double t125730 = kp-kp*t125729+1.0;
            double t125731 = 1.0/k;
            double t125732 = 1.0/(t125728*t125728);
            v_rho_a_rho_a_[index] = e*k*t125730*1.0/pow(t125723,2.0/3.0)*(4.0/3.0)-e*k*rho_a[index]*t125730*1.0/ \
               pow(t125723,5.0/3.0)*(8.0/9.0)-e*gamma_aa[index]*mu_*t125731*1.0/pow(t125723,1.0E1/3.0)*t125732*(3.2E1/ \
               3.0)-e*(gamma_aa[index]*gamma_aa[index])*1.0/(k*k*k)*(mu_*mu_)*1.0/(rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]*rho_a[index])*t125725*1.0/(t125728*t125728*t125728)*(4.0/9.0)+e*gamma_aa[index]* \
               mu_*rho_a[index]*t125731*1.0/pow(t125723,1.3E1/3.0)*t125732*3.2E1;
        } else if (rho_b[index] > cutoff_) {
            v_rho_a_rho_a_[index] = 0.0;
        } else {
            v_rho_a_rho_a_[index] = 0.0;
        } 

        //V_rho_a_rho_b
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            v_rho_a_rho_b_[index] = 0.0;
        } else if (rho_a[index] > cutoff_) {
            v_rho_a_rho_b_[index] = 0.0;
        } else if (rho_b[index] > cutoff_) {
            v_rho_a_rho_b_[index] = 0.0;
        } else {
            v_rho_a_rho_b_[index] = 0.0;
        } 

        //V_rho_b_rho_b
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t125586 = rho_b[index]*2.0;
            double t125587 = 1.0/(k*k);
            double t125588 = 1.0/kp;
            double t125589 = 1.0/pow(t125586,8.0/3.0);
            double t125590 = gamma_bb[index]*mu_*t125587*t125588*t125589;
            double t125591 = t125590+1.0;
            double t125592 = 1.0/t125591;
            double t125593 = kp-kp*t125592+1.0;
            double t125594 = 1.0/k;
            double t125595 = 1.0/(t125591*t125591);
            v_rho_b_rho_b_[index] = e*k*t125593*1.0/pow(t125586,2.0/3.0)*(4.0/3.0)-e*k*rho_b[index]*t125593*1.0/ \
               pow(t125586,5.0/3.0)*(8.0/9.0)-e*gamma_bb[index]*mu_*t125594*1.0/pow(t125586,1.0E1/3.0)*t125595*(3.2E1/ \
               3.0)-e*(gamma_bb[index]*gamma_bb[index])*1.0/(k*k*k)*(mu_*mu_)*1.0/(rho_b[index]*rho_b[index]*rho_b[index]* \
               rho_b[index]*rho_b[index]*rho_b[index])*1.0/(t125591*t125591*t125591)*t125588*(4.0/9.0)+e*gamma_bb[index]* \
               mu_*rho_b[index]*t125594*1.0/pow(t125586,1.3E1/3.0)*t125595*3.2E1;
        } else if (rho_a[index] > cutoff_) {
            v_rho_b_rho_b_[index] = 0.0;
        } else if (rho_b[index] > cutoff_) {
            double t125660 = rho_b[index]*2.0;
            double t125661 = 1.0/(k*k);
            double t125662 = 1.0/kp;
            double t125663 = 1.0/pow(t125660,8.0/3.0);
            double t125664 = gamma_bb[index]*mu_*t125661*t125662*t125663;
            double t125665 = t125664+1.0;
            double t125666 = 1.0/t125665;
            double t125667 = kp-kp*t125666+1.0;
            double t125668 = 1.0/k;
            double t125669 = 1.0/(t125665*t125665);
            v_rho_b_rho_b_[index] = e*k*1.0/pow(t125660,2.0/3.0)*t125667*(4.0/3.0)-e*k*rho_b[index]*1.0/pow(t125660,5.0/ \
               3.0)*t125667*(8.0/9.0)-e*gamma_bb[index]*mu_*1.0/pow(t125660,1.0E1/3.0)*t125668*t125669*(3.2E1/3.0) \
               -e*(gamma_bb[index]*gamma_bb[index])*1.0/(k*k*k)*(mu_*mu_)*1.0/(rho_b[index]*rho_b[index]*rho_b[index]* \
               rho_b[index]*rho_b[index]*rho_b[index])*t125662*1.0/(t125665*t125665*t125665)*(4.0/9.0)+e*gamma_bb[index]* \
               mu_*rho_b[index]*1.0/pow(t125660,1.3E1/3.0)*t125668*t125669*3.2E1;
        } else {
            v_rho_b_rho_b_[index] = 0.0;
        } 

        if (is_gga_) {

            //V_rho_a_gamma_aa
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t125597 = rho_a[index]*2.0;
                double t125598 = 1.0/k;
                double t125599 = 1.0/(k*k);
                double t125600 = 1.0/kp;
                double t125601 = 1.0/pow(t125597,8.0/3.0);
                double t125602 = gamma_aa[index]*mu_*t125600*t125601*t125599;
                double t125603 = t125602+1.0;
                double t125604 = 1.0/(t125603*t125603);
                v_rho_a_gamma_aa_[index] = e*mu_*t125604*1.0/pow(t125597,7.0/3.0)*t125598-e*mu_*rho_a[index]*t125604* \
                   1.0/pow(t125597,1.0E1/3.0)*t125598*(1.4E1/3.0)+e*gamma_aa[index]*1.0/(k*k*k)*(mu_*mu_)*1.0/(rho_a[index]* \
                   rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index])*t125600*1.0/(t125603*t125603*t125603)*(1.0/6.0) \
                   ;
            } else if (rho_a[index] > cutoff_) {
                double t125736 = rho_a[index]*2.0;
                double t125737 = 1.0/k;
                double t125738 = 1.0/(k*k);
                double t125739 = 1.0/kp;
                double t125740 = 1.0/pow(t125736,8.0/3.0);
                double t125741 = gamma_aa[index]*mu_*t125740*t125738*t125739;
                double t125742 = t125741+1.0;
                double t125743 = 1.0/(t125742*t125742);
                v_rho_a_gamma_aa_[index] = e*mu_*t125743*1.0/pow(t125736,7.0/3.0)*t125737-e*mu_*rho_a[index]*t125743* \
                   1.0/pow(t125736,1.0E1/3.0)*t125737*(1.4E1/3.0)+e*gamma_aa[index]*1.0/(k*k*k)*(mu_*mu_)*1.0/(rho_a[index]* \
                   rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index])*1.0/(t125742*t125742*t125742)*t125739*(1.0/6.0) \
                   ;
            } else if (rho_b[index] > cutoff_) {
                v_rho_a_gamma_aa_[index] = 0.0;
            } else {
                v_rho_a_gamma_aa_[index] = 0.0;
            } 

            //V_rho_a_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_a_gamma_ab_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_a_gamma_ab_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_a_gamma_ab_[index] = 0.0;
            } else {
                v_rho_a_gamma_ab_[index] = 0.0;
            } 

            //V_rho_a_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_a_gamma_bb_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_a_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_a_gamma_bb_[index] = 0.0;
            } else {
                v_rho_a_gamma_bb_[index] = 0.0;
            } 

            //V_rho_b_gamma_aa
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_b_gamma_aa_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_b_gamma_aa_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_b_gamma_aa_[index] = 0.0;
            } else {
                v_rho_b_gamma_aa_[index] = 0.0;
            } 

            //V_rho_b_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_b_gamma_ab_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_b_gamma_ab_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_b_gamma_ab_[index] = 0.0;
            } else {
                v_rho_b_gamma_ab_[index] = 0.0;
            } 

            //V_rho_b_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t125610 = rho_b[index]*2.0;
                double t125611 = 1.0/k;
                double t125612 = 1.0/(k*k);
                double t125613 = 1.0/kp;
                double t125614 = 1.0/pow(t125610,8.0/3.0);
                double t125615 = gamma_bb[index]*mu_*t125612*t125613*t125614;
                double t125616 = t125615+1.0;
                double t125617 = 1.0/(t125616*t125616);
                v_rho_b_gamma_bb_[index] = e*mu_*1.0/pow(t125610,7.0/3.0)*t125611*t125617-e*mu_*rho_b[index]*1.0/ \
                   pow(t125610,1.0E1/3.0)*t125611*t125617*(1.4E1/3.0)+e*gamma_bb[index]*1.0/(k*k*k)*(mu_*mu_)*1.0/(rho_b[index]* \
                   rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index])*t125613*1.0/(t125616*t125616*t125616)*(1.0/6.0) \
                   ;
            } else if (rho_a[index] > cutoff_) {
                v_rho_b_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                double t125676 = rho_b[index]*2.0;
                double t125677 = 1.0/k;
                double t125678 = 1.0/(k*k);
                double t125679 = 1.0/kp;
                double t125680 = 1.0/pow(t125676,8.0/3.0);
                double t125681 = gamma_bb[index]*mu_*t125680*t125678*t125679;
                double t125682 = t125681+1.0;
                double t125683 = 1.0/(t125682*t125682);
                v_rho_b_gamma_bb_[index] = e*mu_*t125683*1.0/pow(t125676,7.0/3.0)*t125677-e*mu_*rho_b[index]*t125683* \
                   1.0/pow(t125676,1.0E1/3.0)*t125677*(1.4E1/3.0)+e*gamma_bb[index]*1.0/(k*k*k)*(mu_*mu_)*1.0/(rho_b[index]* \
                   rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index])*1.0/(t125682*t125682*t125682)*t125679*(1.0/6.0) \
                   ;
            } else {
                v_rho_b_gamma_bb_[index] = 0.0;
            } 

            //V_gamma_aa_gamma_aa
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t125619 = 1.0/kp;
                v_gamma_aa_gamma_aa_[index] = e*1.0/(k*k*k)*(mu_*mu_)*1.0/(rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index])*t125619*1.0/pow(gamma_aa[index]*1.0/(k*k)*mu_*t125619*1.0/pow(rho_a[index]*2.0,8.0/3.0) \
                   +1.0,3.0)*(-1.0/1.6E1);
            } else if (rho_a[index] > cutoff_) {
                double t125750 = 1.0/kp;
                v_gamma_aa_gamma_aa_[index] = e*1.0/(k*k*k)*(mu_*mu_)*1.0/(rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index])*t125750*1.0/pow(gamma_aa[index]*1.0/(k*k)*mu_*t125750*1.0/pow(rho_a[index]*2.0,8.0/3.0) \
                   +1.0,3.0)*(-1.0/1.6E1);
            } else if (rho_b[index] > cutoff_) {
                v_gamma_aa_gamma_aa_[index] = 0.0;
            } else {
                v_gamma_aa_gamma_aa_[index] = 0.0;
            } 

            //V_gamma_aa_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_aa_gamma_ab_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_aa_gamma_ab_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_aa_gamma_ab_[index] = 0.0;
            } else {
                v_gamma_aa_gamma_ab_[index] = 0.0;
            } 

            //V_gamma_aa_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_aa_gamma_bb_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_aa_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_aa_gamma_bb_[index] = 0.0;
            } else {
                v_gamma_aa_gamma_bb_[index] = 0.0;
            } 

            //V_gamma_ab_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_ab_gamma_ab_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_ab_gamma_ab_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_ab_gamma_ab_[index] = 0.0;
            } else {
                v_gamma_ab_gamma_ab_[index] = 0.0;
            } 

            //V_gamma_ab_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_ab_gamma_bb_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_ab_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_ab_gamma_bb_[index] = 0.0;
            } else {
                v_gamma_ab_gamma_bb_[index] = 0.0;
            } 

            //V_gamma_bb_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t125625 = 1.0/kp;
                v_gamma_bb_gamma_bb_[index] = e*1.0/(k*k*k)*(mu_*mu_)*1.0/(rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index])*t125625*1.0/pow(gamma_bb[index]*1.0/(k*k)*mu_*t125625*1.0/pow(rho_b[index]*2.0,8.0/3.0) \
                   +1.0,3.0)*(-1.0/1.6E1);
            } else if (rho_a[index] > cutoff_) {
                v_gamma_bb_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                double t125690 = 1.0/kp;
                v_gamma_bb_gamma_bb_[index] = e*1.0/(k*k*k)*(mu_*mu_)*1.0/(rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index])*t125690*1.0/pow(gamma_bb[index]*1.0/(k*k)*mu_*t125690*1.0/pow(rho_b[index]*2.0,8.0/3.0) \
                   +1.0,3.0)*(-1.0/1.6E1);
            } else {
                v_gamma_bb_gamma_bb_[index] = 0.0;
            } 

        }
        if (is_meta_) {

            //V_rho_a_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_a_tau_a_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_a_tau_a_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_a_tau_a_[index] = 0.0;
            } else {
                v_rho_a_tau_a_[index] = 0.0;
            } 

            //V_rho_a_tau_b
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_a_tau_b_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_a_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_a_tau_b_[index] = 0.0;
            } else {
                v_rho_a_tau_b_[index] = 0.0;
            } 

            //V_rho_b_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_b_tau_a_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_b_tau_a_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_b_tau_a_[index] = 0.0;
            } else {
                v_rho_b_tau_a_[index] = 0.0;
            } 

            //V_rho_b_tau_b
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_b_tau_b_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_b_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_b_tau_b_[index] = 0.0;
            } else {
                v_rho_b_tau_b_[index] = 0.0;
            } 

            //V_tau_a_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_tau_a_tau_a_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_tau_a_tau_a_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_tau_a_tau_a_[index] = 0.0;
            } else {
                v_tau_a_tau_a_[index] = 0.0;
            } 

            //V_tau_a_tau_b
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_tau_a_tau_b_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_tau_a_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_tau_a_tau_b_[index] = 0.0;
            } else {
                v_tau_a_tau_b_[index] = 0.0;
            } 

            //V_tau_b_tau_b
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_tau_b_tau_b_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_tau_b_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_tau_b_tau_b_[index] = 0.0;
            } else {
                v_tau_b_tau_b_[index] = 0.0;
            } 

            if (is_gga_) {

                //V_gamma_aa_tau_a
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } else {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } 

                //V_gamma_aa_tau_b
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_aa_tau_b_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_aa_tau_b_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_aa_tau_b_[index] = 0.0;
                } else {
                    v_gamma_aa_tau_b_[index] = 0.0;
                } 

                //V_gamma_ab_tau_a
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_ab_tau_a_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_ab_tau_a_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_ab_tau_a_[index] = 0.0;
                } else {
                    v_gamma_ab_tau_a_[index] = 0.0;
                } 

                //V_gamma_ab_tau_b
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_ab_tau_b_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_ab_tau_b_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_ab_tau_b_[index] = 0.0;
                } else {
                    v_gamma_ab_tau_b_[index] = 0.0;
                } 

                //V_gamma_bb_tau_a
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_bb_tau_a_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_bb_tau_a_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_bb_tau_a_[index] = 0.0;
                } else {
                    v_gamma_bb_tau_a_[index] = 0.0;
                } 

                //V_gamma_bb_tau_b
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_bb_tau_b_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_bb_tau_b_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_bb_tau_b_[index] = 0.0;
                } else {
                    v_gamma_bb_tau_b_[index] = 0.0;
                } 

            }
        }
    }
}

}}

