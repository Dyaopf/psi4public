/**********************************************************
* P86_C_functional.cc: definitions for P86_C_functional for KS-DFT
* Robert Parrish, robparrish@gmail.com
* Autogenerated by MATLAB Script on 06-Mar-2012
*
***********************************************************/
#include <libmints/mints.h>
#include <libfock/points.h>
#include "P86_C_functional.h"
#include <stdlib.h>
#include <cmath>
#include <string>
#include <string>
#include <vector>

using namespace psi;
using namespace boost;
using namespace std;

namespace psi { namespace functional {

P86_C_Functional::P86_C_Functional(int npoints, int deriv) : Functional(npoints, deriv)
{

    name_ = "P86_C";
    description_ = "P86 Correlation (PZ81 LSDA + P86 GGA)";
    citation_ = "J.P. Perdew, Phys. Rev. B., 33, 8822-8824, 1986";

    double c = 6.2035049089939986E-01;
    params_.push_back(make_pair("c",c));
    double two_13 = 1.2599210498948732E+00;
    params_.push_back(make_pair("two_13",two_13));
    double EcPld_1 = -1.4230000000000001E-01;
    params_.push_back(make_pair("EcPld_1",EcPld_1));
    double EcPld_2 = 1.0528999999999999E+00;
    params_.push_back(make_pair("EcPld_2",EcPld_2));
    double EcPld_3 = 3.3339999999999997E-01;
    params_.push_back(make_pair("EcPld_3",EcPld_3));
    double EcFld_1 = -8.4300000000000000E-02;
    params_.push_back(make_pair("EcFld_1",EcFld_1));
    double EcFld_2 = 1.3980999999999999E+00;
    params_.push_back(make_pair("EcFld_2",EcFld_2));
    double EcFld_3 = 2.6110000000000000E-01;
    params_.push_back(make_pair("EcFld_3",EcFld_3));
    double EcPhd_1 = 3.1099999999999999E-02;
    params_.push_back(make_pair("EcPhd_1",EcPhd_1));
    double EcPhd_2 = -4.8000000000000001E-02;
    params_.push_back(make_pair("EcPhd_2",EcPhd_2));
    double EcPhd_3 = 2.0000000000000000E-03;
    params_.push_back(make_pair("EcPhd_3",EcPhd_3));
    double EcPhd_4 = -1.1599999999999999E-02;
    params_.push_back(make_pair("EcPhd_4",EcPhd_4));
    double EcFhd_1 = 1.5550000000000000E-02;
    params_.push_back(make_pair("EcFhd_1",EcFhd_1));
    double EcFhd_2 = -2.6900000000000000E-02;
    params_.push_back(make_pair("EcFhd_2",EcFhd_2));
    double EcFhd_3 = 6.9999999999999999E-04;
    params_.push_back(make_pair("EcFhd_3",EcFhd_3));
    double EcFhd_4 = -4.7999999999999996E-03;
    params_.push_back(make_pair("EcFhd_4",EcFhd_4));
    double Fg = 1.1000000000000000E-01;
    params_.push_back(make_pair("Fg",Fg));
    double Bg = 7.3889999999999999E-06;
    params_.push_back(make_pair("Bg",Bg));
    double Cx = 1.6670000000000001E-03;
    params_.push_back(make_pair("Cx",Cx));
    double Cinf = 4.2350000000000000E-03;
    params_.push_back(make_pair("Cinf",Cinf));
    double Cg_1 = 2.5680000000000000E-03;
    params_.push_back(make_pair("Cg_1",Cg_1));
    double Cg_2 = 2.3265999999999998E-02;
    params_.push_back(make_pair("Cg_2",Cg_2));
    double Cg_3 = 8.7230000000000008E+00;
    params_.push_back(make_pair("Cg_3",Cg_3));
    double Cg_4 = 4.7199999999999998E-01;
    params_.push_back(make_pair("Cg_4",Cg_4));
    double Pg_1 = 1.7450000000000001E+00;
    params_.push_back(make_pair("Pg_1",Pg_1));

    is_gga_ = true;
    is_meta_ = false;

    //Required allocateion
    allocate();
}
P86_C_Functional::~P86_C_Functional()
{
}
void P86_C_Functional::computeRKSFunctional(boost::shared_ptr<RKSFunctions> prop)
{
    int ntrue = prop->npoints();

    const double* restrict rho_a;
    const double* restrict gamma_aa;
    const double* restrict tau_a;

    rho_a = prop->property_value("RHO_A")->pointer();
    if (is_gga_) {
        gamma_aa = prop->property_value("GAMMA_AA")->pointer();
    }
    if (is_meta_) {
        tau_a = prop->property_value("TAU_A")->pointer();
    }

    double c = params_[0].second;
    double two_13 = params_[1].second;
    double EcPld_1 = params_[2].second;
    double EcPld_2 = params_[3].second;
    double EcPld_3 = params_[4].second;
    double EcFld_1 = params_[5].second;
    double EcFld_2 = params_[6].second;
    double EcFld_3 = params_[7].second;
    double EcPhd_1 = params_[8].second;
    double EcPhd_2 = params_[9].second;
    double EcPhd_3 = params_[10].second;
    double EcPhd_4 = params_[11].second;
    double EcFhd_1 = params_[12].second;
    double EcFhd_2 = params_[13].second;
    double EcFhd_3 = params_[14].second;
    double EcFhd_4 = params_[15].second;
    double Fg = params_[16].second;
    double Bg = params_[17].second;
    double Cx = params_[18].second;
    double Cinf = params_[19].second;
    double Cg_1 = params_[20].second;
    double Cg_2 = params_[21].second;
    double Cg_3 = params_[22].second;
    double Cg_4 = params_[23].second;
    double Pg_1 = params_[24].second;

    //Functional
    for (int index = 0; index < ntrue; index++) {

        //Functional Value
        if (rho_a[index] > cutoff_) {
            double t14769 = rho_a[index]*2.0;
            double t14770 = 1.0/pow(t14769,1.0/3.0);
            double t14771 = c*t14770;
            double t14772 = log(t14771);
            double t14773 = c*c;
            double t14774 = 1.0/pow(t14769,2.0/3.0);
            double t14775 = Cg_2*c*t14770;
            double t14776 = Bg*t14773*t14774;
            double t14777 = Cg_1+t14775+t14776;
            double t14778 = 1.0/rho_a[index];
            double t14779 = Bg*c*t14773*t14778*5.0E3;
            double t14780 = Cg_3*c*t14770;
            double t14781 = Cg_4*t14773*t14774;
            double t14782 = t14780+t14781+t14779+1.0;
            double t14783 = 1.0/t14782;
            double t14784 = t14783*t14777;
            double t14785 = Cx+t14784;
            functional_[index] = rho_a[index]*( ( (-c*t14770+1.0 > 0.0) ? 1.0*(EcPhd_2+EcPhd_1*t14772+EcPhd_4* \
               c*t14770+EcPhd_3*c*t14770*t14772) : 0.0 ) +( ( (t14771-1.0 > 0.0) ? EcPld_1*1.0 : 0.0 ) )/(EcPld_2* \
               sqrt(t14771)+EcPld_3*c*t14770+1.0))*2.0+(gamma_aa[index]*t14785*1.0/pow(t14769,4.0/3.0)*exp(-(Cinf* \
               Fg*Pg_1*1.0/pow(t14769,7.0/6.0)*sqrt(gamma_aa[index]*4.0))/t14785)*1.0/sqrt(pow(2.0,1.0/3.0)*(1.0/ \
               2.0))*4.0)/two_13;
        } else {
            functional_[index] = 0.0;
        } 

    }
    //First Partials
    for (int index = 0; index < ntrue && deriv_ >= 1; index++) {

        //V_rho_a
        if (rho_a[index] > cutoff_) {
            double t14787 = rho_a[index]*2.0;
            double t14788 = 1.0/pow(t14787,1.0/3.0);
            double t14789 = c*t14788;
            double t14790 = log(t14789);
            double t14791 = 1.0/pow(t14787,4.0/3.0);
            double t14792 = EcPhd_1*t14790;
            double t14793 = EcPhd_4*c*t14788;
            double t14794 = EcPhd_3*c*t14790*t14788;
            double t14795 = EcPhd_2+t14792+t14793+t14794;
            double t14796 = t14789-1.0;
            double t14797 = 0.0 ;
            double t14798 = sqrt(t14789);
            double t14799 = EcPld_2*t14798;
            double t14800 = EcPld_3*c*t14788;
            double t14801 = t14800+t14799+1.0;
            double t14802 = ( (t14796 > 0.0) ?  1.0 : 0.0 ) ;
            double t14803 = 1.0/t14801;
            double t14804 = c*c;
            double t14805 = 1.0/rho_a[index];
            double t14806 = 1.0/pow(t14787,2.0/3.0);
            double t14807 = Bg*c*t14804*t14805*5.0E3;
            double t14808 = Cg_3*c*t14788;
            double t14809 = Cg_4*t14804*t14806;
            double t14810 = t14807+t14808+t14809+1.0;
            double t14811 = 1.0/t14810;
            double t14812 = 1.0/pow(t14787,5.0/3.0);
            double t14813 = Cg_2*c*t14788;
            double t14814 = Bg*t14804*t14806;
            double t14815 = Cg_1+t14813+t14814;
            double t14816 = 1.0/two_13;
            double t14817 = t14811*t14815;
            double t14818 = Cx+t14817;
            double t14819 = 1.0/t14818;
            double t14820 = gamma_aa[index]*4.0;
            double t14821 = sqrt(t14820);
            double t14822 = 1.0/pow(t14787,7.0/6.0);
            double t14827 = Cinf*Fg*Pg_1*t14821*t14822*t14819;
            double t14823 = exp(-t14827);
            double t14824 = pow(2.0,1.0/3.0);
            double t14825 = t14824*(1.0/2.0);
            double t14826 = 1.0/sqrt(t14825);
            double t14828 = Cg_2*c*t14791*(1.0/3.0);
            double t14829 = Bg*t14812*t14804*(2.0/3.0);
            double t14830 = t14828+t14829;
            double t14831 = t14811*t14830;
            double t14832 = 1.0/(rho_a[index]*rho_a[index]);
            double t14833 = Bg*c*t14804*t14832*2.5E3;
            double t14834 = Cg_3*c*t14791*(1.0/3.0);
            double t14835 = Cg_4*t14812*t14804*(2.0/3.0);
            double t14836 = t14833+t14834+t14835;
            double t14837 = 1.0/(t14810*t14810);
            double t14838 = t14831-t14815*t14836*t14837;
            v_rho_a_[index] = rho_a[index]*( ( (-t14789+1.0 > 0.0) ? 1.0*(EcPhd_1*t14805*(1.0/6.0)+EcPhd_3*c* \
               t14791*(1.0/3.0)+EcPhd_4*c*t14791*(1.0/3.0)+EcPhd_3*c*t14790*t14791*(1.0/3.0)) : 0.0 ) -EcPld_1*1.0/ \
               (t14801*t14801)*t14802*(EcPld_3*c*t14791*(1.0/3.0)+EcPld_2*c*t14791*1.0/sqrt(t14789)*(1.0/6.0))-c* \
               t14791*t14795*t14797*(1.0/3.0)+EcPld_1*c*t14803*t14791*t14797*(1.0/3.0))*-2.0+ ( (-c*t14788+1.0 >  \
               0.0) ? t14795*1.0 : 0.0 ) +EcPld_1*t14802*t14803-gamma_aa[index]*t14823*t14816*t14826*t14791*t14838* \
               4.0-gamma_aa[index]*t14823*t14816*t14826*t14818*1.0/pow(t14787,7.0/3.0)*(1.6E1/3.0)+gamma_aa[index]* \
               t14823*t14816*t14826*t14791*t14818*(Cinf*Fg*Pg_1*t14821*t14819*1.0/pow(t14787,1.3E1/6.0)*(7.0/6.0) \
               -Cinf*Fg*Pg_1*t14821*t14822*1.0/(t14818*t14818)*t14838)*4.0;
        } else {
            v_rho_a_[index] = 0.0;
        } 

        if (is_gga_) {

            if (rho_a[index] > cutoff_) {
                double t14840 = rho_a[index]*2.0;
                double t14841 = c*c;
                double t14842 = 1.0/pow(t14840,1.0/3.0);
                double t14843 = 1.0/pow(t14840,2.0/3.0);
                double t14844 = Cg_2*c*t14842;
                double t14845 = Bg*t14841*t14843;
                double t14846 = Cg_1+t14844+t14845;
                double t14847 = 1.0/rho_a[index];
                double t14848 = Bg*c*t14841*t14847*5.0E3;
                double t14849 = Cg_3*c*t14842;
                double t14850 = Cg_4*t14841*t14843;
                double t14851 = t14850+t14848+t14849+1.0;
                double t14852 = 1.0/t14851;
                double t14853 = t14852*t14846;
                double t14854 = Cx+t14853;
                double t14855 = 1.0/two_13;
                double t14856 = 1.0/t14854;
                double t14857 = gamma_aa[index]*4.0;
                double t14858 = sqrt(t14857);
                double t14859 = 1.0/pow(t14840,7.0/6.0);
                double t14860 = exp(-Cinf*Fg*Pg_1*t14856*t14858*t14859);
                double t14861 = pow(2.0,1.0/3.0);
                double t14862 = t14861*(1.0/2.0);
                double t14863 = 1.0/sqrt(t14862);
                v_gamma_aa_[index] = 1.0/pow(t14840,4.0/3.0)*t14860*t14854*t14863*t14855*4.0-Cinf*Fg*Pg_1*1.0/pow(t14840,5.0/ \
                   2.0)*t14860*t14863*t14855*t14858*2.0;
            } else {
                v_gamma_aa_[index] = 0.0;
            } 

        }
        if (is_meta_) {

            //V_tau_a
            if (rho_a[index] > cutoff_) {
                v_tau_a_[index] = 0.0;
            } else {
                v_tau_a_[index] = 0.0;
            } 

        }
    }
    //Second Partials
    for (int index = 0; index < ntrue && deriv_ >= 2; index++) {

        //V_rho_a_rho_a
        if (rho_a[index] > cutoff_) {
            double t14866 = rho_a[index]*2.0;
            double t14867 = 1.0/pow(t14866,4.0/3.0);
            double t14868 = 1.0/pow(t14866,1.0/3.0);
            double t14869 = c*t14868;
            double t14876 = 1.0/sqrt(t14869);
            double t14892 = EcPld_3*c*t14867*(1.0/3.0);
            double t14893 = EcPld_2*c*t14867*t14876*(1.0/6.0);
            double t14870 = t14892+t14893;
            double t14871 = sqrt(t14869);
            double t14872 = EcPld_2*t14871;
            double t14873 = EcPld_3*c*t14868;
            double t14874 = t14872+t14873+1.0;
            double t14875 = 1.0/pow(t14866,7.0/3.0);
            double t14877 = 1.0/(rho_a[index]*rho_a[index]);
            double t14878 = two_13*2.0;
            double t14879 = t14878-2.0;
            double t14880 = 1.0/t14879;
            double t14881 = log(t14869);
            double t14882 = t14869-1.0;
            double t14883 = c*c;
            double t14884 = 1.0/pow(t14866,8.0/3.0);
            double t14885 = EcPhd_1*t14881;
            double t14886 = EcPhd_4*c*t14868;
            double t14887 = EcPhd_3*c*t14881*t14868;
            double t14888 = EcPhd_2+t14885+t14886+t14887;
            double t14889 = 0.0 ;
            double t14890 = 0.0 ;
            double t14891 = 1.0/t14874;
            double t14894 = 1.0/(t14874*t14874);
            double t14895 = ( (t14882 > 0.0) ?  1.0 : 0.0 ) ;
            double t14896 = t14870*t14870;
            double t14897 = 1.0/(t14874*t14874*t14874);
            double t14898 = EcPld_1*t14896*t14897*2.0;
            double t14899 = EcFld_2*t14871;
            double t14900 = EcFld_3*c*t14868;
            double t14901 = t14900+t14899+1.0;
            double t14902 = 1.0/t14901;
            double t14903 = EcFld_1*t14902;
            double t14904 = t14903-EcPld_1*t14891;
            double t14905 = t14904*t14880*t14877*(2.0/9.0);
            double t14906 = EcPld_3*c*t14875*(4.0/9.0);
            double t14907 = EcPld_2*c*t14875*t14876*(2.0/9.0);
            double t14908 = 1.0/pow(t14869,3.0/2.0);
            double t14909 = t14906+t14907-EcPld_2*t14908*t14883*t14884*(1.0/3.6E1);
            double t14910 = EcPld_1*t14909*t14894;
            double t14911 = -t14869+1.0;
            double t14912 = ( (t14911 > 0.0) ?  1.0 : 0.0 ) ;
            double t14913 = EcPhd_1*t14877*(1.0/1.2E1);
            double t14914 = EcPhd_3*c*t14875*(5.0/9.0);
            double t14915 = EcPhd_4*c*t14875*(4.0/9.0);
            double t14916 = EcFhd_1*t14881;
            double t14917 = EcFhd_4*c*t14868;
            double t14918 = EcFhd_3*c*t14881*t14868;
            double t14919 = EcPhd_3*c*t14881*t14875*(4.0/9.0);
            double t14920 = c*t14875*t14888*t14889*(4.0/9.0);
            double t14921 = t14890*t14883*t14884*t14888*(1.0/9.0);
            double t14922 = 1.0/rho_a[index];
            double t14923 = EcPhd_1*t14922*(1.0/6.0);
            double t14924 = EcPhd_3*c*t14867*(1.0/3.0);
            double t14925 = EcPhd_4*c*t14867*(1.0/3.0);
            double t14926 = EcPhd_3*c*t14881*t14867*(1.0/3.0);
            double t14927 = t14923+t14924+t14925+t14926;
            double t14928 = c*t14927*t14867*t14889*(2.0/3.0);
            double t14929 = EcPld_1*c*t14870*t14867*t14894*t14889*(2.0/3.0);
            double t14930 = 1.0/pow(t14866,2.0/3.0);
            double t14931 = Bg*c*t14922*t14883*5.0E3;
            double t14932 = Cg_3*c*t14868;
            double t14933 = Cg_4*t14930*t14883;
            double t14934 = t14931+t14932+t14933+1.0;
            double t14935 = 1.0/t14934;
            double t14936 = 1.0/pow(t14866,5.0/3.0);
            double t14937 = Cg_2*c*t14868;
            double t14938 = Bg*t14930*t14883;
            double t14939 = Cg_1+t14937+t14938;
            double t14940 = 1.0/two_13;
            double t14941 = t14935*t14939;
            double t14942 = Cx+t14941;
            double t14943 = 1.0/t14942;
            double t14944 = gamma_aa[index]*4.0;
            double t14945 = sqrt(t14944);
            double t14946 = 1.0/pow(t14866,7.0/6.0);
            double t14959 = Cinf*Fg*Pg_1*t14943*t14945*t14946;
            double t14947 = exp(-t14959);
            double t14948 = pow(2.0,1.0/3.0);
            double t14949 = t14948*(1.0/2.0);
            double t14950 = 1.0/sqrt(t14949);
            double t14951 = Bg*c*t14883*t14877*2.5E3;
            double t14952 = Cg_3*c*t14867*(1.0/3.0);
            double t14953 = Cg_4*t14936*t14883*(2.0/3.0);
            double t14954 = t14951+t14952+t14953;
            double t14955 = Cg_2*c*t14867*(1.0/3.0);
            double t14956 = Bg*t14936*t14883*(2.0/3.0);
            double t14957 = t14955+t14956;
            double t14958 = 1.0/(t14934*t14934);
            double t14960 = t14935*t14957;
            double t14966 = t14954*t14939*t14958;
            double t14961 = t14960-t14966;
            double t14963 = 1.0/pow(t14866,1.3E1/6.0);
            double t14964 = Cinf*Fg*Pg_1*t14943*t14945*t14963*(7.0/6.0);
            double t14965 = 1.0/(t14942*t14942);
            double t14967 = Cinf*Fg*Pg_1*t14961*t14945*t14946*t14965;
            double t14962 = t14964-t14967;
            double t14968 = Cg_2*c*t14875*(4.0/9.0);
            double t14969 = Bg*t14883*t14884*(1.0E1/9.0);
            double t14970 = t14968+t14969;
            double t14971 = t14970*t14935;
            double t14972 = t14954*t14954;
            double t14973 = 1.0/(t14934*t14934*t14934);
            double t14974 = t14972*t14973*t14939*2.0;
            double t14975 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]);
            double t14976 = Bg*c*t14883*t14975*2.5E3;
            double t14977 = Cg_3*c*t14875*(4.0/9.0);
            double t14978 = Cg_4*t14883*t14884*(1.0E1/9.0);
            double t14979 = t14976+t14977+t14978;
            double t14980 = t14971+t14974-t14954*t14957*t14958*2.0-t14939*t14958*t14979;
            v_rho_a_rho_a_[index] = rho_a[index]*(t14920+t14921+t14928+t14929-t14912*(t14913+t14914+t14915+t14919+ \
               t14880*t14877*(EcFhd_2-EcPhd_2+t14916+t14917+t14918-t14885-t14886-t14887)*(2.0/9.0))-t14895*(-t14910+ \
               t14905+t14898)-EcPld_1*c*t14891*t14875*t14889*(4.0/9.0)-EcPld_1*t14890*t14891*t14883*t14884*(1.0/9.0) \
               )*-2.0-rho_a[index]*(t14920+t14921+t14928+t14929-t14912*(t14913+t14914+t14915+t14919-t14880*t14877* \
               (EcFhd_2-EcPhd_2+t14916+t14917+t14918-EcPhd_1*t14881-EcPhd_4*c*t14868-EcPhd_3*c*t14881*t14868)*(2.0/ \
               9.0))+t14895*(t14910+t14905-t14898)-EcPld_1*c*t14891*t14875*t14889*(4.0/9.0)-EcPld_1*t14890*t14891* \
               t14883*t14884*(1.0/9.0))*2.0-t14912*t14927*4.0+EcPld_1*t14870*t14894*t14895*4.0+c*t14867*t14888*t14889* \
               (4.0/3.0)-EcPld_1*c*t14891*t14867*t14889*(4.0/3.0)+gamma_aa[index]*t14940*t14950*t14961*t14875*t14947* \
               (6.4E1/3.0)+gamma_aa[index]*t14940*t14950*t14980*t14947*t14867*8.0+gamma_aa[index]*t14940*t14950*t14942* \
               1.0/pow(t14866,1.0E1/3.0)*t14947*(2.24E2/9.0)-gamma_aa[index]*t14940*t14950*t14942*t14947*t14867*(Cinf* \
               Fg*Pg_1*t14943*t14945*1.0/pow(t14866,1.9E1/6.0)*(9.1E1/3.6E1)-Cinf*Fg*Pg_1*t14961*t14945*t14963*t14965* \
               (7.0/3.0)-Cinf*Fg*Pg_1*t14980*t14945*t14946*t14965+Cinf*Fg*Pg_1*1.0/(t14942*t14942*t14942)*(t14961* \
               t14961)*t14945*t14946*2.0)*8.0-gamma_aa[index]*t14940*t14950*t14942*t14962*t14875*t14947*(6.4E1/3.0) \
               -gamma_aa[index]*t14940*t14950*t14961*t14962*t14947*t14867*1.6E1+gamma_aa[index]*t14940*t14950*t14942* \
               (t14962*t14962)*t14947*t14867*8.0;
        } else {
            v_rho_a_rho_a_[index] = 0.0;
        } 

        if (is_gga_) {

            //V_rho_a_gamma_aa
            if (rho_a[index] > cutoff_) {
                double t14982 = rho_a[index]*2.0;
                double t14983 = c*c;
                double t14984 = 1.0/pow(t14982,1.0/3.0);
                double t14985 = 1.0/pow(t14982,2.0/3.0);
                double t14986 = Cg_2*c*t14984;
                double t14987 = Bg*t14983*t14985;
                double t14988 = Cg_1+t14986+t14987;
                double t14989 = 1.0/rho_a[index];
                double t14990 = Bg*c*t14983*t14989*5.0E3;
                double t14991 = Cg_3*c*t14984;
                double t14992 = Cg_4*t14983*t14985;
                double t14993 = t14990+t14991+t14992+1.0;
                double t14994 = 1.0/t14993;
                double t14995 = t14994*t14988;
                double t14996 = Cx+t14995;
                double t14997 = 1.0/two_13;
                double t14998 = 1.0/t14996;
                double t14999 = gamma_aa[index]*4.0;
                double t15000 = sqrt(t14999);
                double t15001 = 1.0/pow(t14982,7.0/6.0);
                double t15008 = Cinf*Fg*Pg_1*t14998*t15000*t15001;
                double t15002 = exp(-t15008);
                double t15003 = 1.0/pow(t14982,4.0/3.0);
                double t15004 = 1.0/pow(t14982,5.0/3.0);
                double t15005 = pow(2.0,1.0/3.0);
                double t15006 = t15005*(1.0/2.0);
                double t15007 = 1.0/sqrt(t15006);
                double t15009 = Cg_2*c*t15003*(1.0/3.0);
                double t15010 = Bg*t14983*t15004*(2.0/3.0);
                double t15011 = t15010+t15009;
                double t15012 = t14994*t15011;
                double t15013 = 1.0/(rho_a[index]*rho_a[index]);
                double t15014 = Bg*c*t14983*t15013*2.5E3;
                double t15015 = Cg_3*c*t15003*(1.0/3.0);
                double t15016 = Cg_4*t14983*t15004*(2.0/3.0);
                double t15017 = t15014+t15015+t15016;
                double t15018 = 1.0/(t14993*t14993);
                double t15022 = t14988*t15017*t15018;
                double t15019 = t15012-t15022;
                double t15020 = 1.0/pow(t14982,1.3E1/6.0);
                double t15021 = 1.0/(t14996*t14996);
                double t15023 = 1.0/sqrt(t14999);
                double t15024 = Cinf*Fg*Pg_1*t14998*t15000*t15020*(7.0/6.0);
                double t15025 = t15024-Cinf*Fg*Pg_1*t15000*t15001*t15021*t15019;
                double t15026 = 1.0/pow(t14982,5.0/2.0);
                v_rho_a_gamma_aa_[index] = 1.0/pow(t14982,7.0/3.0)*t14996*t14997*t15002*t15007*(-1.6E1/3.0)-t14997* \
                   t15002*t15003*t15007*t15019*4.0+t14996*t14997*t15002*t15003*t15007*t15025*4.0+gamma_aa[index]*t14996* \
                   t14997*t15002*t15003*t15007*(Cinf*Fg*Pg_1*t14998*t15020*t15023*(7.0/6.0)-Cinf*Fg*Pg_1*t15001*t15021* \
                   t15023*t15019)*4.0+gamma_aa[index]*t14996*t14997*t15002*t15003*t15007*(Cinf*Fg*Pg_1*t14998*t15020* \
                   t15023*(7.0/1.2E1)-Cinf*Fg*Pg_1*t15001*t15021*t15023*t15019*(1.0/2.0))*8.0+Cinf*Fg*Pg_1*1.0/pow(t14982,7.0/ \
                   2.0)*t14997*t15000*t15002*t15007*(8.0/3.0)-Cinf*Fg*Pg_1*t14997*t15000*t15002*t15007*t15025*t15026* \
                   2.0+Cinf*Fg*Pg_1*t14997*t14998*t15000*t15002*t15007*t15026*t15019*2.0;
            } else {
                v_rho_a_gamma_aa_[index] = 0.0;
            } 

            //V_gamma_aa_gamma_aa
            if (rho_a[index] > cutoff_) {
                double t15028 = rho_a[index]*2.0;
                double t15029 = c*c;
                double t15030 = 1.0/pow(t15028,1.0/3.0);
                double t15031 = 1.0/pow(t15028,2.0/3.0);
                double t15032 = gamma_aa[index]*4.0;
                double t15033 = 1.0/two_13;
                double t15034 = Cg_2*c*t15030;
                double t15035 = Bg*t15031*t15029;
                double t15036 = Cg_1+t15034+t15035;
                double t15037 = 1.0/rho_a[index];
                double t15038 = Bg*c*t15037*t15029*5.0E3;
                double t15039 = Cg_3*c*t15030;
                double t15040 = Cg_4*t15031*t15029;
                double t15041 = t15040+t15038+t15039+1.0;
                double t15042 = 1.0/t15041;
                double t15043 = t15042*t15036;
                double t15044 = Cx+t15043;
                double t15045 = 1.0/t15044;
                double t15046 = sqrt(t15032);
                double t15047 = 1.0/pow(t15028,7.0/6.0);
                double t15048 = exp(-Cinf*Fg*Pg_1*t15045*t15046*t15047);
                double t15049 = pow(2.0,1.0/3.0);
                double t15050 = t15049*(1.0/2.0);
                double t15051 = 1.0/sqrt(t15050);
                v_gamma_aa_gamma_aa_[index] = Cinf*Fg*Pg_1*1.0/sqrt(t15032)*t15033*t15051*1.0/pow(t15028,5.0/2.0) \
                   *t15048*-1.2E1+(Cinf*Cinf)*(Fg*Fg)*(Pg_1*Pg_1)*t15033*t15051*t15045*1.0/pow(t15028,1.1E1/3.0)*t15048* \
                   4.0;
            } else {
                v_gamma_aa_gamma_aa_[index] = 0.0;
            } 

        }
        if (is_meta_) {

            //V_rho_a_tau_a
            if (rho_a[index] > cutoff_) {
                v_rho_a_tau_a_[index] = 0.0;
            } else {
                v_rho_a_tau_a_[index] = 0.0;
            } 

            //V_tau_a_tau_a
            if (rho_a[index] > cutoff_) {
                v_tau_a_tau_a_[index] = 0.0;
            } else {
                v_tau_a_tau_a_[index] = 0.0;
            } 

            if (is_gga_) {

                //V_gamma_aa_tau_a
                if (rho_a[index] > cutoff_) {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } else {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } 

            }
        }
    }
}
void P86_C_Functional::computeUKSFunctional(boost::shared_ptr<UKSFunctions> prop)
{
    int ntrue = prop->npoints();

    const double* restrict rho_a;
    const double* restrict rho_b;
    const double* restrict gamma_aa;
    const double* restrict gamma_ab;
    const double* restrict gamma_bb;
    const double* restrict tau_a;
    const double* restrict tau_b;

    rho_a = prop->property_value("RHO_A")->pointer();
    rho_b = prop->property_value("RHO_B")->pointer();
    if (is_gga_) {
        gamma_aa = prop->property_value("GAMMA_AA")->pointer();
        gamma_ab = prop->property_value("GAMMA_AB")->pointer();
        gamma_bb = prop->property_value("GAMMA_BB")->pointer();
    }
    if (is_meta_) {
        tau_a = prop->property_value("TAU_A")->pointer();
        tau_b = prop->property_value("TAU_B")->pointer();
    }

    double c = params_[0].second;
    double two_13 = params_[1].second;
    double EcPld_1 = params_[2].second;
    double EcPld_2 = params_[3].second;
    double EcPld_3 = params_[4].second;
    double EcFld_1 = params_[5].second;
    double EcFld_2 = params_[6].second;
    double EcFld_3 = params_[7].second;
    double EcPhd_1 = params_[8].second;
    double EcPhd_2 = params_[9].second;
    double EcPhd_3 = params_[10].second;
    double EcPhd_4 = params_[11].second;
    double EcFhd_1 = params_[12].second;
    double EcFhd_2 = params_[13].second;
    double EcFhd_3 = params_[14].second;
    double EcFhd_4 = params_[15].second;
    double Fg = params_[16].second;
    double Bg = params_[17].second;
    double Cx = params_[18].second;
    double Cinf = params_[19].second;
    double Cg_1 = params_[20].second;
    double Cg_2 = params_[21].second;
    double Cg_3 = params_[22].second;
    double Cg_4 = params_[23].second;
    double Pg_1 = params_[24].second;

    //Functional
    for (int index = 0; index < ntrue; index++) {

        //Functional Value
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t11276 = rho_a[index]+rho_b[index];
            double t11277 = 1.0/pow(t11276,1.0/3.0);
            double t11278 = 1.0/t11276;
            double t11279 = rho_a[index]-rho_b[index];
            double t11280 = t11278*t11279;
            double t11281 = c*t11277;
            double t11282 = log(t11281);
            double t11283 = EcPhd_1*t11282;
            double t11284 = two_13*2.0;
            double t11285 = t11284-2.0;
            double t11286 = 1.0/t11285;
            double t11287 = sqrt(t11281);
            double t11288 = EcPld_2*t11287;
            double t11289 = EcPld_3*c*t11277;
            double t11290 = t11288+t11289+1.0;
            double t11291 = 1.0/t11290;
            double t11292 = EcPld_1*t11291;
            double t11293 = t11280+1.0;
            double t11294 = pow(t11293,4.0/3.0);
            double t11295 = -t11280+1.0;
            double t11296 = pow(t11295,4.0/3.0);
            double t11297 = t11294+t11296-2.0;
            double t11298 = c*c;
            double t11299 = 1.0/pow(t11276,2.0/3.0);
            double t11300 = Bg*t11298*t11299;
            double t11301 = Cg_2*c*t11277;
            double t11302 = Cg_1+t11300+t11301;
            double t11303 = Bg*c*t11278*t11298*1.0E4;
            double t11304 = Cg_4*t11298*t11299;
            double t11305 = Cg_3*c*t11277;
            double t11306 = t11303+t11304+t11305+1.0;
            double t11307 = 1.0/t11306;
            double t11308 = t11302*t11307;
            double t11309 = Cx+t11308;
            double t11310 = gamma_ab[index]*2.0;
            double t11311 = gamma_aa[index]+gamma_bb[index]+t11310;
            functional_[index] = t11276*( ( (-c*t11277+1.0 > 0.0) ? 1.0*(EcPhd_2+t11283+t11286*t11297*(EcFhd_2- \
               EcPhd_2-t11283+EcFhd_1*t11282+EcFhd_4*c*t11277-EcPhd_4*c*t11277+EcFhd_3*c*t11282*t11277-EcPhd_3*c* \
               t11282*t11277)+EcPhd_4*c*t11277+EcPhd_3*c*t11282*t11277) : 0.0 ) + ( (t11281-1.0 > 0.0) ? 1.0*(t11292- \
               t11286*t11297*(t11292-EcFld_1/(EcFld_2*t11287+EcFld_3*c*t11277+1.0))) : 0.0 ) )+(t11311*t11309*1.0/ \
               pow(t11276,4.0/3.0)*exp(-(Cinf*Fg*Pg_1*sqrt(t11311)*1.0/pow(t11276,7.0/6.0))/t11309)*1.0/sqrt(pow(t11278* \
               t11279*(-1.0/2.0)+1.0/2.0,5.0/3.0)+pow(t11278*t11279*(1.0/2.0)+1.0/2.0,5.0/3.0)))/two_13;
        } else if (rho_a[index] > cutoff_) {
            double t13684 = rho_a[index]+rho_b[index];
            double t13685 = 1.0/pow(t13684,1.0/3.0);
            double t13686 = c*t13685;
            double t13687 = log(t13686);
            double t13688 = EcPhd_1*t13687;
            double t13689 = pow(2.0,1.0/3.0);
            double t13690 = t13689*2.0;
            double t13691 = t13690-2.0;
            double t13692 = two_13*2.0;
            double t13693 = t13692-2.0;
            double t13694 = 1.0/t13693;
            double t13695 = sqrt(t13686);
            double t13696 = EcPld_2*t13695;
            double t13697 = EcPld_3*c*t13685;
            double t13698 = t13696+t13697+1.0;
            double t13699 = 1.0/t13698;
            double t13700 = EcPld_1*t13699;
            double t13701 = c*c;
            double t13702 = 1.0/pow(t13684,2.0/3.0);
            double t13703 = Bg*t13701*t13702;
            double t13704 = Cg_2*c*t13685;
            double t13705 = Cg_1+t13703+t13704;
            double t13706 = 1.0/t13684;
            double t13707 = Bg*c*t13701*t13706*1.0E4;
            double t13708 = Cg_4*t13701*t13702;
            double t13709 = Cg_3*c*t13685;
            double t13710 = t13707+t13708+t13709+1.0;
            double t13711 = 1.0/t13710;
            double t13712 = t13711*t13705;
            double t13713 = Cx+t13712;
            double t13714 = gamma_ab[index]*2.0;
            double t13715 = gamma_aa[index]+gamma_bb[index]+t13714;
            functional_[index] = t13684*( ( (-c*t13685+1.0 > 0.0) ? 1.0*(EcPhd_2+t13688+t13691*t13694*(EcFhd_2- \
               EcPhd_2-t13688+EcFhd_1*t13687+EcFhd_4*c*t13685-EcPhd_4*c*t13685+EcFhd_3*c*t13685*t13687-EcPhd_3*c* \
               t13685*t13687)+EcPhd_4*c*t13685+EcPhd_3*c*t13685*t13687) : 0.0 ) + ( (t13686-1.0 > 0.0) ? 1.0*(t13700- \
               t13691*t13694*(t13700-EcFld_1/(EcFld_2*t13695+EcFld_3*c*t13685+1.0))) : 0.0 ) )+(t13713*t13715*1.0/ \
               pow(t13684,4.0/3.0)*exp(-(Cinf*Fg*Pg_1*sqrt(t13715)*1.0/pow(t13684,7.0/6.0))/t13713))/two_13;
        } else if (rho_b[index] > cutoff_) {
            double t12637 = rho_a[index]+rho_b[index];
            double t12638 = 1.0/pow(t12637,1.0/3.0);
            double t12639 = c*t12638;
            double t12640 = log(t12639);
            double t12641 = EcPhd_1*t12640;
            double t12642 = pow(2.0,1.0/3.0);
            double t12643 = t12642*2.0;
            double t12644 = t12643-2.0;
            double t12645 = two_13*2.0;
            double t12646 = t12645-2.0;
            double t12647 = 1.0/t12646;
            double t12648 = sqrt(t12639);
            double t12649 = EcPld_2*t12648;
            double t12650 = EcPld_3*c*t12638;
            double t12651 = t12650+t12649+1.0;
            double t12652 = 1.0/t12651;
            double t12653 = EcPld_1*t12652;
            double t12654 = c*c;
            double t12655 = 1.0/pow(t12637,2.0/3.0);
            double t12656 = Bg*t12654*t12655;
            double t12657 = Cg_2*c*t12638;
            double t12658 = Cg_1+t12656+t12657;
            double t12659 = 1.0/t12637;
            double t12660 = Bg*c*t12654*t12659*1.0E4;
            double t12661 = Cg_4*t12654*t12655;
            double t12662 = Cg_3*c*t12638;
            double t12663 = t12660+t12661+t12662+1.0;
            double t12664 = 1.0/t12663;
            double t12665 = t12664*t12658;
            double t12666 = Cx+t12665;
            double t12667 = gamma_ab[index]*2.0;
            double t12668 = gamma_aa[index]+gamma_bb[index]+t12667;
            functional_[index] = t12637*( ( (-c*t12638+1.0 > 0.0) ? 1.0*(EcPhd_2+t12641+t12644*t12647*(EcFhd_2- \
               EcPhd_2-t12641+EcFhd_1*t12640+EcFhd_4*c*t12638-EcPhd_4*c*t12638+EcFhd_3*c*t12640*t12638-EcPhd_3*c* \
               t12640*t12638)+EcPhd_4*c*t12638+EcPhd_3*c*t12640*t12638) : 0.0 ) + ( (t12639-1.0 > 0.0) ? 1.0*(t12653- \
               t12644*t12647*(t12653-EcFld_1/(EcFld_2*t12648+EcFld_3*c*t12638+1.0))) : 0.0 ) )+(1.0/pow(t12637,4.0/ \
               3.0)*t12666*t12668*exp(-(Cinf*Fg*Pg_1*1.0/pow(t12637,7.0/6.0)*sqrt(t12668))/t12666))/two_13;
        } else {
            functional_[index] = 0.0;
        } 

    }
    //First Partials
    for (int index = 0; index < ntrue && deriv_ >= 1; index++) {

        //V_rho_a
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t11313 = rho_a[index]+rho_b[index];
            double t11314 = 1.0/pow(t11313,1.0/3.0);
            double t11315 = 1.0/t11313;
            double t11316 = rho_a[index]-rho_b[index];
            double t11317 = t11315*t11316;
            double t11318 = c*t11314;
            double t11319 = log(t11318);
            double t11320 = EcPhd_1*t11319;
            double t11321 = 1.0/pow(t11313,4.0/3.0);
            double t11322 = two_13*2.0;
            double t11323 = t11322-2.0;
            double t11324 = 1.0/t11323;
            double t11325 = t11317+1.0;
            double t11326 = pow(t11325,4.0/3.0);
            double t11327 = -t11317+1.0;
            double t11328 = pow(t11327,4.0/3.0);
            double t11329 = t11326+t11328-2.0;
            double t11330 = EcPhd_1*t11315*(1.0/3.0);
            double t11331 = EcPhd_3*c*t11321*(1.0/3.0);
            double t11332 = EcPhd_4*c*t11321*(1.0/3.0);
            double t11333 = 1.0/(t11313*t11313);
            double t11344 = t11333*t11316;
            double t11334 = t11315-t11344;
            double t11335 = EcFhd_1*t11319;
            double t11336 = EcFhd_4*c*t11314;
            double t11337 = EcPhd_4*c*t11314;
            double t11338 = EcFhd_3*c*t11314*t11319;
            double t11339 = EcPhd_3*c*t11314*t11319;
            double t11340 = EcPhd_3*c*t11321*t11319*(1.0/3.0);
            double t11341 = 1.0/sqrt(t11318);
            double t11342 = sqrt(t11318);
            double t11343 = pow(t11325,1.0/3.0);
            double t11345 = t11334*t11343*(4.0/3.0);
            double t11346 = pow(t11327,1.0/3.0);
            double t11347 = t11345-t11334*t11346*(4.0/3.0);
            double t11348 = EcFld_2*t11342;
            double t11349 = EcFld_3*c*t11314;
            double t11350 = t11348+t11349+1.0;
            double t11351 = EcPld_2*t11342;
            double t11352 = EcPld_3*c*t11314;
            double t11353 = t11351+t11352+1.0;
            double t11354 = EcPld_3*c*t11321*(1.0/3.0);
            double t11355 = EcPld_2*c*t11321*t11341*(1.0/6.0);
            double t11356 = t11354+t11355;
            double t11357 = 1.0/(t11353*t11353);
            double t11358 = t11318-1.0;
            double t11359 = EcFhd_2-EcPhd_2-t11320+t11335+t11336-t11337+t11338-t11339;
            double t11360 = 0.0 ;
            double t11361 = 1.0/t11353;
            double t11362 = EcPld_1*t11361;
            double t11363 = 1.0/t11350;
            double t11366 = EcFld_1*t11363;
            double t11364 = t11362-t11366;
            double t11365 = ( (t11358 > 0.0) ?  1.0 : 0.0 ) ;
            double t11367 = t11362-t11324*t11364*t11329;
            double t11368 = c*c;
            double t11369 = 1.0/pow(t11313,2.0/3.0);
            double t11370 = Bg*c*t11315*t11368*1.0E4;
            double t11371 = Cg_4*t11368*t11369;
            double t11372 = Cg_3*c*t11314;
            double t11373 = t11370+t11371+t11372+1.0;
            double t11374 = 1.0/t11373;
            double t11375 = 1.0/pow(t11313,5.0/3.0);
            double t11376 = Bg*t11368*t11369;
            double t11377 = Cg_2*c*t11314;
            double t11378 = Cg_1+t11376+t11377;
            double t11379 = gamma_ab[index]*2.0;
            double t11380 = gamma_aa[index]+gamma_bb[index]+t11379;
            double t11381 = 1.0/two_13;
            double t11382 = 1.0/pow(t11313,7.0/6.0);
            double t11383 = t11374*t11378;
            double t11384 = Cx+t11383;
            double t11385 = 1.0/t11384;
            double t11386 = sqrt(t11380);
            double t11391 = Cinf*Fg*Pg_1*t11382*t11385*t11386;
            double t11387 = exp(-t11391);
            double t11388 = t11315*t11316*(1.0/2.0);
            double t11389 = t11388+1.0/2.0;
            double t11390 = pow(t11389,5.0/3.0);
            double t11392 = -t11388+1.0/2.0;
            double t11393 = pow(t11392,5.0/3.0);
            double t11394 = t11390+t11393;
            double t11395 = 1.0/sqrt(t11394);
            double t11396 = Bg*t11375*t11368*(2.0/3.0);
            double t11397 = Cg_2*c*t11321*(1.0/3.0);
            double t11398 = t11396+t11397;
            double t11399 = t11374*t11398;
            double t11400 = Bg*c*t11333*t11368*1.0E4;
            double t11401 = Cg_4*t11375*t11368*(2.0/3.0);
            double t11402 = Cg_3*c*t11321*(1.0/3.0);
            double t11403 = t11400+t11401+t11402;
            double t11404 = 1.0/(t11373*t11373);
            double t11405 = t11399-t11403*t11404*t11378;
            double t11406 = t11315*(1.0/2.0);
            double t11407 = t11406-t11333*t11316*(1.0/2.0);
            v_rho_a_[index] = -t11313*( ( (-t11318+1.0 > 0.0) ? 1.0*(t11330+t11331+t11340+t11332-t11324*t11329* \
               (t11330+t11331+t11340+t11332-EcFhd_1*t11315*(1.0/3.0)-EcFhd_3*c*t11321*(1.0/3.0)-EcFhd_4*c*t11321* \
               (1.0/3.0)-EcFhd_3*c*t11321*t11319*(1.0/3.0))-t11324*t11347*t11359) : 0.0 ) -t11365*(t11324*t11329* \
               (EcFld_1*1.0/(t11350*t11350)*(EcFld_3*c*t11321*(1.0/3.0)+EcFld_2*c*t11321*t11341*(1.0/6.0))-EcPld_1* \
               t11356*t11357)+EcPld_1*t11356*t11357-t11324*t11364*t11347)+c*t11321*t11360*t11367*(1.0/3.0)-c*t11321* \
               t11360*(EcPhd_2+t11320+t11337+t11339+t11324*t11329*t11359)*(1.0/3.0))+t11365*t11367+ ( (-c*t11314+ \
               1.0 > 0.0) ? 1.0*(EcPhd_2+t11320+t11337+t11339+t11324*t11329*(EcFhd_2-EcPhd_2-t11320+t11335+t11336+ \
               t11338-EcPhd_4*c*t11314-EcPhd_3*c*t11314*t11319)) : 0.0 ) -1.0/pow(t11313,7.0/3.0)*t11380*t11381*t11384* \
               t11395*t11387*(4.0/3.0)-t11321*t11405*t11380*t11381*t11387*1.0/sqrt(t11390+pow(t11315*t11316*(-1.0/ \
               2.0)+1.0/2.0,5.0/3.0))+t11321*t11380*t11381*t11384*1.0/pow(t11394,3.0/2.0)*t11387*(t11407*pow(t11392,2.0/ \
               3.0)*(5.0/3.0)-t11407*pow(t11389,2.0/3.0)*(5.0/3.0))*(1.0/2.0)+t11321*t11380*t11381*t11384*t11395* \
               t11387*(Cinf*Fg*Pg_1*1.0/pow(t11313,1.3E1/6.0)*t11385*t11386*(7.0/6.0)-Cinf*Fg*Pg_1*t11405*t11382* \
               1.0/(t11384*t11384)*t11386);
        } else if (rho_a[index] > cutoff_) {
            double t13717 = rho_a[index]+rho_b[index];
            double t13718 = 1.0/pow(t13717,4.0/3.0);
            double t13719 = 1.0/pow(t13717,1.0/3.0);
            double t13720 = c*t13719;
            double t13721 = 1.0/sqrt(t13720);
            double t13722 = sqrt(t13720);
            double t13723 = EcPld_3*c*t13718*(1.0/3.0);
            double t13724 = EcPld_2*c*t13721*t13718*(1.0/6.0);
            double t13725 = t13723+t13724;
            double t13726 = EcPld_2*t13722;
            double t13727 = EcPld_3*c*t13719;
            double t13728 = t13726+t13727+1.0;
            double t13729 = 1.0/(t13728*t13728);
            double t13730 = EcPld_1*t13725*t13729;
            double t13731 = pow(2.0,1.0/3.0);
            double t13732 = t13731*2.0;
            double t13733 = t13732-2.0;
            double t13734 = two_13*2.0;
            double t13735 = t13734-2.0;
            double t13736 = 1.0/t13735;
            double t13737 = 1.0/t13717;
            double t13738 = EcPhd_1*t13737*(1.0/3.0);
            double t13739 = log(t13720);
            double t13740 = EcPhd_3*c*t13718*(1.0/3.0);
            double t13741 = EcPhd_4*c*t13718*(1.0/3.0);
            double t13742 = EcPhd_3*c*t13718*t13739*(1.0/3.0);
            double t13743 = t13720-1.0;
            double t13744 = EcPhd_1*t13739;
            double t13745 = 0.0 ;
            double t13746 = EcFld_2*t13722;
            double t13747 = EcFld_3*c*t13719;
            double t13748 = t13746+t13747+1.0;
            double t13749 = 1.0/t13728;
            double t13750 = EcPld_1*t13749;
            double t13751 = -t13720+1.0;
            double t13752 = ( (t13751 > 0.0) ?  1.0 : 0.0 ) ;
            double t13753 = EcFhd_1*t13739;
            double t13754 = EcFhd_4*c*t13719;
            double t13755 = EcPhd_4*c*t13719;
            double t13756 = EcFhd_3*c*t13719*t13739;
            double t13757 = EcPhd_3*c*t13719*t13739;
            double t13758 = ( (t13743 > 0.0) ?  1.0 : 0.0 ) ;
            double t13759 = 1.0/t13748;
            double t13760 = t13750-EcFld_1*t13759;
            double t13761 = t13750-t13733*t13760*t13736;
            double t13762 = c*c;
            double t13763 = 1.0/pow(t13717,2.0/3.0);
            double t13764 = Bg*c*t13762*t13737*1.0E4;
            double t13765 = Cg_4*t13762*t13763;
            double t13766 = Cg_3*c*t13719;
            double t13767 = t13764+t13765+t13766+1.0;
            double t13768 = 1.0/t13767;
            double t13769 = 1.0/pow(t13717,5.0/3.0);
            double t13770 = Bg*t13762*t13763;
            double t13771 = Cg_2*c*t13719;
            double t13772 = Cg_1+t13770+t13771;
            double t13773 = gamma_ab[index]*2.0;
            double t13774 = gamma_aa[index]+gamma_bb[index]+t13773;
            double t13775 = 1.0/two_13;
            double t13776 = 1.0/pow(t13717,7.0/6.0);
            double t13777 = t13772*t13768;
            double t13778 = Cx+t13777;
            double t13779 = 1.0/t13778;
            double t13780 = sqrt(t13774);
            double t13782 = Cinf*Fg*Pg_1*t13780*t13776*t13779;
            double t13781 = exp(-t13782);
            double t13783 = Bg*t13762*t13769*(2.0/3.0);
            double t13784 = Cg_2*c*t13718*(1.0/3.0);
            double t13785 = t13783+t13784;
            double t13786 = t13785*t13768;
            double t13787 = 1.0/(t13717*t13717);
            double t13788 = Bg*c*t13762*t13787*1.0E4;
            double t13789 = Cg_4*t13762*t13769*(2.0/3.0);
            double t13790 = Cg_3*c*t13718*(1.0/3.0);
            double t13791 = t13790+t13788+t13789;
            double t13792 = 1.0/(t13767*t13767);
            double t13793 = t13786-t13772*t13791*t13792;
            v_rho_a_[index] = t13752*(EcPhd_2+t13744+t13755+t13757+t13733*t13736*(EcFhd_2-EcPhd_2-t13744+t13753+ \
               t13754-t13755+t13756-t13757))+t13761*t13758+t13717*(t13758*(t13730-t13733*t13736*(t13730-EcFld_1*1.0/ \
               (t13748*t13748)*(EcFld_3*c*t13718*(1.0/3.0)+EcFld_2*c*t13721*t13718*(1.0/6.0))))-t13752*(t13740+t13741+ \
               t13742+t13738-t13733*t13736*(t13740+t13741+t13742+t13738-EcFhd_1*t13737*(1.0/3.0)-EcFhd_3*c*t13718* \
               (1.0/3.0)-EcFhd_4*c*t13718*(1.0/3.0)-EcFhd_3*c*t13718*t13739*(1.0/3.0)))-c*t13761*t13718*t13745*(1.0/ \
               3.0)+c*t13718*t13745*(EcPhd_2+t13744+t13755+t13757+t13733*t13736*(EcFhd_2-EcPhd_2-t13744+t13753+t13754+ \
               t13756-EcPhd_4*c*t13719-EcPhd_3*c*t13719*t13739))*(1.0/3.0))-1.0/pow(t13717,7.0/3.0)*t13781*t13774* \
               t13775*t13778*(4.0/3.0)-t13718*t13781*t13774*t13775*t13793+t13718*t13781*t13774*t13775*t13778*(Cinf* \
               Fg*Pg_1*1.0/pow(t13717,1.3E1/6.0)*t13780*t13779*(7.0/6.0)-Cinf*Fg*Pg_1*t13780*t13793*t13776*1.0/(t13778* \
               t13778));
        } else if (rho_b[index] > cutoff_) {
            double t12670 = rho_a[index]+rho_b[index];
            double t12671 = 1.0/pow(t12670,4.0/3.0);
            double t12672 = 1.0/pow(t12670,1.0/3.0);
            double t12673 = c*t12672;
            double t12674 = 1.0/sqrt(t12673);
            double t12675 = sqrt(t12673);
            double t12676 = EcPld_3*c*t12671*(1.0/3.0);
            double t12677 = EcPld_2*c*t12671*t12674*(1.0/6.0);
            double t12678 = t12676+t12677;
            double t12679 = EcPld_2*t12675;
            double t12680 = EcPld_3*c*t12672;
            double t12681 = t12680+t12679+1.0;
            double t12682 = 1.0/(t12681*t12681);
            double t12683 = EcPld_1*t12682*t12678;
            double t12684 = pow(2.0,1.0/3.0);
            double t12685 = t12684*2.0;
            double t12686 = t12685-2.0;
            double t12687 = two_13*2.0;
            double t12688 = t12687-2.0;
            double t12689 = 1.0/t12688;
            double t12690 = 1.0/t12670;
            double t12691 = EcPhd_1*t12690*(1.0/3.0);
            double t12692 = log(t12673);
            double t12693 = EcPhd_3*c*t12671*(1.0/3.0);
            double t12694 = EcPhd_4*c*t12671*(1.0/3.0);
            double t12695 = EcPhd_3*c*t12671*t12692*(1.0/3.0);
            double t12696 = t12673-1.0;
            double t12697 = EcPhd_1*t12692;
            double t12698 = 0.0 ;
            double t12699 = EcFld_2*t12675;
            double t12700 = EcFld_3*c*t12672;
            double t12701 = t12700+t12699+1.0;
            double t12702 = 1.0/t12681;
            double t12703 = EcPld_1*t12702;
            double t12704 = -t12673+1.0;
            double t12705 = ( (t12704 > 0.0) ?  1.0 : 0.0 ) ;
            double t12706 = EcFhd_1*t12692;
            double t12707 = EcFhd_4*c*t12672;
            double t12708 = EcPhd_4*c*t12672;
            double t12709 = EcFhd_3*c*t12672*t12692;
            double t12710 = EcPhd_3*c*t12672*t12692;
            double t12711 = ( (t12696 > 0.0) ?  1.0 : 0.0 ) ;
            double t12712 = 1.0/t12701;
            double t12713 = t12703-EcFld_1*t12712;
            double t12714 = t12703-t12713*t12686*t12689;
            double t12715 = c*c;
            double t12716 = 1.0/pow(t12670,2.0/3.0);
            double t12717 = Bg*c*t12715*t12690*1.0E4;
            double t12718 = Cg_4*t12715*t12716;
            double t12719 = Cg_3*c*t12672;
            double t12720 = t12717+t12718+t12719+1.0;
            double t12721 = 1.0/t12720;
            double t12722 = 1.0/pow(t12670,5.0/3.0);
            double t12723 = Bg*t12715*t12716;
            double t12724 = Cg_2*c*t12672;
            double t12725 = Cg_1+t12723+t12724;
            double t12726 = gamma_ab[index]*2.0;
            double t12727 = gamma_aa[index]+gamma_bb[index]+t12726;
            double t12728 = 1.0/two_13;
            double t12729 = 1.0/pow(t12670,7.0/6.0);
            double t12730 = t12721*t12725;
            double t12731 = Cx+t12730;
            double t12732 = 1.0/t12731;
            double t12733 = sqrt(t12727);
            double t12735 = Cinf*Fg*Pg_1*t12732*t12733*t12729;
            double t12734 = exp(-t12735);
            double t12736 = Bg*t12722*t12715*(2.0/3.0);
            double t12737 = Cg_2*c*t12671*(1.0/3.0);
            double t12738 = t12736+t12737;
            double t12739 = t12721*t12738;
            double t12740 = 1.0/(t12670*t12670);
            double t12741 = Bg*c*t12740*t12715*1.0E4;
            double t12742 = Cg_4*t12722*t12715*(2.0/3.0);
            double t12743 = Cg_3*c*t12671*(1.0/3.0);
            double t12744 = t12741+t12742+t12743;
            double t12745 = 1.0/(t12720*t12720);
            double t12746 = t12739-t12725*t12744*t12745;
            v_rho_a_[index] = t12705*(EcPhd_2+t12710+t12708+t12697+t12686*t12689*(EcFhd_2-EcPhd_2-t12710+t12706+ \
               t12707-t12708+t12709-t12697))+t12711*t12714+t12670*(t12711*(t12683-t12686*t12689*(t12683-EcFld_1*1.0/ \
               (t12701*t12701)*(EcFld_3*c*t12671*(1.0/3.0)+EcFld_2*c*t12671*t12674*(1.0/6.0))))-t12705*(t12691+t12693+ \
               t12694+t12695-t12686*t12689*(t12691+t12693+t12694+t12695-EcFhd_1*t12690*(1.0/3.0)-EcFhd_3*c*t12671* \
               (1.0/3.0)-EcFhd_4*c*t12671*(1.0/3.0)-EcFhd_3*c*t12671*t12692*(1.0/3.0)))-c*t12714*t12671*t12698*(1.0/ \
               3.0)+c*t12671*t12698*(EcPhd_2+t12710+t12708+t12697+t12686*t12689*(EcFhd_2-EcPhd_2+t12706+t12707+t12709- \
               t12697-EcPhd_4*c*t12672-EcPhd_3*c*t12672*t12692))*(1.0/3.0))-t12731*1.0/pow(t12670,7.0/3.0)*t12734* \
               t12727*t12728*(4.0/3.0)-t12671*t12734*t12727*t12728*t12746+t12731*t12671*t12734*t12727*t12728*(Cinf* \
               Fg*Pg_1*t12732*1.0/pow(t12670,1.3E1/6.0)*t12733*(7.0/6.0)-Cinf*Fg*Pg_1*1.0/(t12731*t12731)*t12733* \
               t12746*t12729);
        } else {
            v_rho_a_[index] = 0.0;
        } 

        //V_rho_b
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t11409 = rho_a[index]+rho_b[index];
            double t11410 = 1.0/pow(t11409,1.0/3.0);
            double t11411 = 1.0/t11409;
            double t11412 = rho_a[index]-rho_b[index];
            double t11413 = t11411*t11412;
            double t11414 = c*t11410;
            double t11415 = log(t11414);
            double t11416 = EcPhd_1*t11415;
            double t11417 = 1.0/pow(t11409,4.0/3.0);
            double t11418 = two_13*2.0;
            double t11419 = t11418-2.0;
            double t11420 = 1.0/t11419;
            double t11421 = t11413+1.0;
            double t11422 = pow(t11421,4.0/3.0);
            double t11423 = -t11413+1.0;
            double t11424 = pow(t11423,4.0/3.0);
            double t11425 = t11422+t11424-2.0;
            double t11426 = EcPhd_1*t11411*(1.0/3.0);
            double t11427 = EcPhd_3*c*t11417*(1.0/3.0);
            double t11428 = EcPhd_4*c*t11417*(1.0/3.0);
            double t11429 = 1.0/(t11409*t11409);
            double t11430 = t11412*t11429;
            double t11431 = t11411+t11430;
            double t11432 = EcFhd_1*t11415;
            double t11433 = EcFhd_4*c*t11410;
            double t11434 = EcPhd_4*c*t11410;
            double t11435 = EcFhd_3*c*t11410*t11415;
            double t11436 = EcPhd_3*c*t11410*t11415;
            double t11437 = EcPhd_3*c*t11415*t11417*(1.0/3.0);
            double t11438 = 1.0/sqrt(t11414);
            double t11439 = sqrt(t11414);
            double t11440 = pow(t11421,1.0/3.0);
            double t11441 = t11431*t11440*(4.0/3.0);
            double t11442 = pow(t11423,1.0/3.0);
            double t11443 = t11441-t11431*t11442*(4.0/3.0);
            double t11444 = EcFld_2*t11439;
            double t11445 = EcFld_3*c*t11410;
            double t11446 = t11444+t11445+1.0;
            double t11447 = EcPld_2*t11439;
            double t11448 = EcPld_3*c*t11410;
            double t11449 = t11447+t11448+1.0;
            double t11450 = EcPld_3*c*t11417*(1.0/3.0);
            double t11451 = EcPld_2*c*t11417*t11438*(1.0/6.0);
            double t11452 = t11450+t11451;
            double t11453 = 1.0/(t11449*t11449);
            double t11454 = t11414-1.0;
            double t11455 = EcFhd_2-EcPhd_2+t11432+t11433-t11416-t11434+t11435-t11436;
            double t11456 = 0.0 ;
            double t11457 = 1.0/t11449;
            double t11458 = EcPld_1*t11457;
            double t11459 = 1.0/t11446;
            double t11462 = EcFld_1*t11459;
            double t11460 = -t11462+t11458;
            double t11461 = ( (t11454 > 0.0) ?  1.0 : 0.0 ) ;
            double t11463 = c*c;
            double t11464 = 1.0/pow(t11409,2.0/3.0);
            double t11465 = Bg*c*t11411*t11463*1.0E4;
            double t11466 = Cg_4*t11463*t11464;
            double t11467 = Cg_3*c*t11410;
            double t11468 = t11465+t11466+t11467+1.0;
            double t11469 = 1.0/t11468;
            double t11470 = 1.0/pow(t11409,5.0/3.0);
            double t11471 = Bg*t11463*t11464;
            double t11472 = Cg_2*c*t11410;
            double t11473 = Cg_1+t11471+t11472;
            double t11474 = gamma_ab[index]*2.0;
            double t11475 = gamma_aa[index]+gamma_bb[index]+t11474;
            double t11476 = 1.0/two_13;
            double t11477 = 1.0/pow(t11409,7.0/6.0);
            double t11478 = t11473*t11469;
            double t11479 = Cx+t11478;
            double t11480 = 1.0/t11479;
            double t11481 = sqrt(t11475);
            double t11486 = Cinf*Fg*Pg_1*t11480*t11481*t11477;
            double t11482 = exp(-t11486);
            double t11483 = t11411*t11412*(1.0/2.0);
            double t11484 = t11483+1.0/2.0;
            double t11485 = pow(t11484,5.0/3.0);
            double t11487 = -t11483+1.0/2.0;
            double t11488 = pow(t11487,5.0/3.0);
            double t11489 = t11485+t11488;
            double t11490 = 1.0/sqrt(t11489);
            double t11491 = Bg*t11470*t11463*(2.0/3.0);
            double t11492 = Cg_2*c*t11417*(1.0/3.0);
            double t11493 = t11491+t11492;
            double t11494 = t11493*t11469;
            double t11495 = Bg*c*t11463*t11429*1.0E4;
            double t11496 = Cg_4*t11470*t11463*(2.0/3.0);
            double t11497 = Cg_3*c*t11417*(1.0/3.0);
            double t11498 = t11495+t11496+t11497;
            double t11499 = 1.0/(t11468*t11468);
            double t11500 = t11494-t11473*t11498*t11499;
            double t11501 = t11411*(1.0/2.0);
            double t11502 = t11412*t11429*(1.0/2.0);
            double t11503 = t11501+t11502;
            v_rho_b_[index] = -t11409*( ( (-t11414+1.0 > 0.0) ? 1.0*(t11426+t11427+t11428+t11437-t11420*t11425* \
               (t11426+t11427+t11428+t11437-EcFhd_1*t11411*(1.0/3.0)-EcFhd_3*c*t11417*(1.0/3.0)-EcFhd_4*c*t11417* \
               (1.0/3.0)-EcFhd_3*c*t11415*t11417*(1.0/3.0))+t11420*t11443*t11455) : 0.0 ) -t11461*(t11420*t11425* \
               (EcFld_1*1.0/(t11446*t11446)*(EcFld_3*c*t11417*(1.0/3.0)+EcFld_2*c*t11417*t11438*(1.0/6.0))-EcPld_1* \
               t11452*t11453)+EcPld_1*t11452*t11453+t11420*t11460*t11443)+c*t11417*t11456*(t11458-t11420*t11460*t11425) \
               *(1.0/3.0)-c*t11417*t11456*(EcPhd_2+t11416+t11434+t11436+t11420*t11425*t11455)*(1.0/3.0))+ ( (-c*t11410+ \
               1.0 > 0.0) ? 1.0*(EcPhd_2+t11416+t11434+t11436+t11420*t11425*(EcFhd_2-EcPhd_2+t11432+t11433-t11416+ \
               t11435-EcPhd_4*c*t11410-EcPhd_3*c*t11410*t11415)) : 0.0 ) +t11461*(t11458+t11420*t11425*(t11462-t11458) \
               )-1.0/pow(t11409,7.0/3.0)*t11490*t11482*t11475*t11476*t11479*(4.0/3.0)-t11500*t11417*t11482*t11475* \
               t11476*1.0/sqrt(t11485+pow(t11411*t11412*(-1.0/2.0)+1.0/2.0,5.0/3.0))+t11417*t11482*t11475*t11476* \
               t11479*1.0/pow(t11489,3.0/2.0)*(t11503*pow(t11484,2.0/3.0)*(5.0/3.0)-t11503*pow(t11487,2.0/3.0)*(5.0/ \
               3.0))*(1.0/2.0)+t11417*t11490*t11482*t11475*t11476*t11479*(Cinf*Fg*Pg_1*t11480*1.0/pow(t11409,1.3E1/ \
               6.0)*t11481*(7.0/6.0)-Cinf*Fg*Pg_1*t11500*t11481*t11477*1.0/(t11479*t11479));
        } else if (rho_a[index] > cutoff_) {
            double t13795 = rho_a[index]+rho_b[index];
            double t13796 = 1.0/pow(t13795,4.0/3.0);
            double t13797 = 1.0/pow(t13795,1.0/3.0);
            double t13798 = c*t13797;
            double t13799 = 1.0/sqrt(t13798);
            double t13800 = sqrt(t13798);
            double t13801 = EcPld_3*c*t13796*(1.0/3.0);
            double t13802 = EcPld_2*c*t13796*t13799*(1.0/6.0);
            double t13803 = t13801+t13802;
            double t13804 = EcPld_2*t13800;
            double t13805 = EcPld_3*c*t13797;
            double t13806 = t13804+t13805+1.0;
            double t13807 = 1.0/(t13806*t13806);
            double t13808 = EcPld_1*t13803*t13807;
            double t13809 = pow(2.0,1.0/3.0);
            double t13810 = t13809*2.0;
            double t13811 = t13810-2.0;
            double t13812 = two_13*2.0;
            double t13813 = t13812-2.0;
            double t13814 = 1.0/t13813;
            double t13815 = 1.0/t13795;
            double t13816 = EcPhd_1*t13815*(1.0/3.0);
            double t13817 = log(t13798);
            double t13818 = EcPhd_3*c*t13796*(1.0/3.0);
            double t13819 = EcPhd_4*c*t13796*(1.0/3.0);
            double t13820 = EcPhd_3*c*t13817*t13796*(1.0/3.0);
            double t13821 = t13798-1.0;
            double t13822 = EcPhd_1*t13817;
            double t13823 = 0.0 ;
            double t13824 = EcFld_2*t13800;
            double t13825 = EcFld_3*c*t13797;
            double t13826 = t13824+t13825+1.0;
            double t13827 = 1.0/t13806;
            double t13828 = EcPld_1*t13827;
            double t13829 = -t13798+1.0;
            double t13830 = ( (t13829 > 0.0) ?  1.0 : 0.0 ) ;
            double t13831 = EcFhd_1*t13817;
            double t13832 = EcFhd_4*c*t13797;
            double t13833 = EcPhd_4*c*t13797;
            double t13834 = EcFhd_3*c*t13817*t13797;
            double t13835 = EcPhd_3*c*t13817*t13797;
            double t13836 = ( (t13821 > 0.0) ?  1.0 : 0.0 ) ;
            double t13837 = 1.0/t13826;
            double t13838 = t13828-EcFld_1*t13837;
            double t13839 = t13828-t13811*t13814*t13838;
            double t13840 = c*c;
            double t13841 = 1.0/pow(t13795,2.0/3.0);
            double t13842 = Bg*c*t13840*t13815*1.0E4;
            double t13843 = Cg_4*t13840*t13841;
            double t13844 = Cg_3*c*t13797;
            double t13845 = t13842+t13843+t13844+1.0;
            double t13846 = 1.0/t13845;
            double t13847 = 1.0/pow(t13795,5.0/3.0);
            double t13848 = Bg*t13840*t13841;
            double t13849 = Cg_2*c*t13797;
            double t13850 = Cg_1+t13848+t13849;
            double t13851 = gamma_ab[index]*2.0;
            double t13852 = gamma_aa[index]+gamma_bb[index]+t13851;
            double t13853 = 1.0/two_13;
            double t13854 = 1.0/pow(t13795,7.0/6.0);
            double t13855 = t13850*t13846;
            double t13856 = Cx+t13855;
            double t13857 = 1.0/t13856;
            double t13858 = sqrt(t13852);
            double t13860 = Cinf*Fg*Pg_1*t13854*t13857*t13858;
            double t13859 = exp(-t13860);
            double t13861 = Bg*t13840*t13847*(2.0/3.0);
            double t13862 = Cg_2*c*t13796*(1.0/3.0);
            double t13863 = t13861+t13862;
            double t13864 = t13863*t13846;
            double t13865 = 1.0/(t13795*t13795);
            double t13866 = Bg*c*t13840*t13865*1.0E4;
            double t13867 = Cg_4*t13840*t13847*(2.0/3.0);
            double t13868 = Cg_3*c*t13796*(1.0/3.0);
            double t13869 = t13866+t13867+t13868;
            double t13870 = 1.0/(t13845*t13845);
            double t13871 = t13864-t13850*t13870*t13869;
            v_rho_b_[index] = t13830*(EcPhd_2+t13822+t13833+t13835+t13811*t13814*(EcFhd_2-EcPhd_2-t13822+t13831+ \
               t13832-t13833+t13834-t13835))+t13836*t13839+t13795*(t13836*(t13808-t13811*t13814*(t13808-EcFld_1*1.0/ \
               (t13826*t13826)*(EcFld_3*c*t13796*(1.0/3.0)+EcFld_2*c*t13796*t13799*(1.0/6.0))))-t13830*(t13820+t13816+ \
               t13818+t13819-t13811*t13814*(t13820+t13816+t13818+t13819-EcFhd_1*t13815*(1.0/3.0)-EcFhd_3*c*t13796* \
               (1.0/3.0)-EcFhd_4*c*t13796*(1.0/3.0)-EcFhd_3*c*t13817*t13796*(1.0/3.0)))-c*t13823*t13839*t13796*(1.0/ \
               3.0)+c*t13823*t13796*(EcPhd_2+t13822+t13833+t13835+t13811*t13814*(EcFhd_2-EcPhd_2-t13822+t13831+t13832+ \
               t13834-EcPhd_4*c*t13797-EcPhd_3*c*t13817*t13797))*(1.0/3.0))-t13852*t13853*t13856*1.0/pow(t13795,7.0/ \
               3.0)*t13859*(4.0/3.0)-t13852*t13853*t13871*t13796*t13859+t13852*t13853*t13856*t13796*t13859*(Cinf* \
               Fg*Pg_1*t13857*1.0/pow(t13795,1.3E1/6.0)*t13858*(7.0/6.0)-Cinf*Fg*Pg_1*t13871*t13854*1.0/(t13856*t13856) \
               *t13858);
        } else if (rho_b[index] > cutoff_) {
            double t12748 = rho_a[index]+rho_b[index];
            double t12749 = 1.0/pow(t12748,4.0/3.0);
            double t12750 = 1.0/pow(t12748,1.0/3.0);
            double t12751 = c*t12750;
            double t12752 = 1.0/sqrt(t12751);
            double t12753 = sqrt(t12751);
            double t12754 = EcPld_3*c*t12749*(1.0/3.0);
            double t12755 = EcPld_2*c*t12752*t12749*(1.0/6.0);
            double t12756 = t12754+t12755;
            double t12757 = EcPld_2*t12753;
            double t12758 = EcPld_3*c*t12750;
            double t12759 = t12757+t12758+1.0;
            double t12760 = 1.0/(t12759*t12759);
            double t12761 = EcPld_1*t12760*t12756;
            double t12762 = pow(2.0,1.0/3.0);
            double t12763 = t12762*2.0;
            double t12764 = t12763-2.0;
            double t12765 = two_13*2.0;
            double t12766 = t12765-2.0;
            double t12767 = 1.0/t12766;
            double t12768 = 1.0/t12748;
            double t12769 = EcPhd_1*t12768*(1.0/3.0);
            double t12770 = log(t12751);
            double t12771 = EcPhd_3*c*t12749*(1.0/3.0);
            double t12772 = EcPhd_4*c*t12749*(1.0/3.0);
            double t12773 = EcPhd_3*c*t12770*t12749*(1.0/3.0);
            double t12774 = t12751-1.0;
            double t12775 = EcPhd_1*t12770;
            double t12776 = 0.0 ;
            double t12777 = EcFld_2*t12753;
            double t12778 = EcFld_3*c*t12750;
            double t12779 = t12777+t12778+1.0;
            double t12780 = 1.0/t12759;
            double t12781 = EcPld_1*t12780;
            double t12782 = -t12751+1.0;
            double t12783 = ( (t12782 > 0.0) ?  1.0 : 0.0 ) ;
            double t12784 = EcFhd_1*t12770;
            double t12785 = EcFhd_4*c*t12750;
            double t12786 = EcPhd_4*c*t12750;
            double t12787 = EcFhd_3*c*t12750*t12770;
            double t12788 = EcPhd_3*c*t12750*t12770;
            double t12789 = ( (t12774 > 0.0) ?  1.0 : 0.0 ) ;
            double t12790 = 1.0/t12779;
            double t12791 = t12781-EcFld_1*t12790;
            double t12792 = t12781-t12764*t12791*t12767;
            double t12793 = c*c;
            double t12794 = 1.0/pow(t12748,2.0/3.0);
            double t12795 = Bg*c*t12793*t12768*1.0E4;
            double t12796 = Cg_4*t12793*t12794;
            double t12797 = Cg_3*c*t12750;
            double t12798 = t12795+t12796+t12797+1.0;
            double t12799 = 1.0/t12798;
            double t12800 = 1.0/pow(t12748,5.0/3.0);
            double t12801 = Bg*t12793*t12794;
            double t12802 = Cg_2*c*t12750;
            double t12803 = Cg_1+t12801+t12802;
            double t12804 = gamma_ab[index]*2.0;
            double t12805 = gamma_aa[index]+gamma_bb[index]+t12804;
            double t12806 = 1.0/two_13;
            double t12807 = 1.0/pow(t12748,7.0/6.0);
            double t12808 = t12803*t12799;
            double t12809 = Cx+t12808;
            double t12810 = 1.0/t12809;
            double t12811 = sqrt(t12805);
            double t12813 = Cinf*Fg*Pg_1*t12810*t12811*t12807;
            double t12812 = exp(-t12813);
            double t12814 = Bg*t12800*t12793*(2.0/3.0);
            double t12815 = Cg_2*c*t12749*(1.0/3.0);
            double t12816 = t12814+t12815;
            double t12817 = t12816*t12799;
            double t12818 = 1.0/(t12748*t12748);
            double t12819 = Bg*c*t12818*t12793*1.0E4;
            double t12820 = Cg_4*t12800*t12793*(2.0/3.0);
            double t12821 = Cg_3*c*t12749*(1.0/3.0);
            double t12822 = t12820+t12821+t12819;
            double t12823 = 1.0/(t12798*t12798);
            double t12824 = t12817-t12803*t12822*t12823;
            v_rho_b_[index] = t12783*(EcPhd_2+t12775+t12786+t12788+t12764*t12767*(EcFhd_2-EcPhd_2-t12775+t12784+ \
               t12785-t12786+t12787-t12788))+t12792*t12789+t12748*(t12789*(t12761-t12764*t12767*(t12761-EcFld_1*1.0/ \
               (t12779*t12779)*(EcFld_3*c*t12749*(1.0/3.0)+EcFld_2*c*t12752*t12749*(1.0/6.0))))-t12783*(t12771+t12772+ \
               t12773+t12769-t12764*t12767*(t12771+t12772+t12773+t12769-EcFhd_1*t12768*(1.0/3.0)-EcFhd_3*c*t12749* \
               (1.0/3.0)-EcFhd_4*c*t12749*(1.0/3.0)-EcFhd_3*c*t12770*t12749*(1.0/3.0)))-c*t12792*t12749*t12776*(1.0/ \
               3.0)+c*t12749*t12776*(EcPhd_2+t12775+t12786+t12788+t12764*t12767*(EcFhd_2-EcPhd_2-t12775+t12784+t12785+ \
               t12787-EcPhd_4*c*t12750-EcPhd_3*c*t12750*t12770))*(1.0/3.0))-t12812*t12805*t12806*t12809*1.0/pow(t12748,7.0/ \
               3.0)*(4.0/3.0)-t12812*t12805*t12806*t12824*t12749+t12812*t12805*t12806*t12809*t12749*(Cinf*Fg*Pg_1* \
               t12810*t12811*1.0/pow(t12748,1.3E1/6.0)*(7.0/6.0)-Cinf*Fg*Pg_1*t12811*t12824*t12807*1.0/(t12809*t12809) \
               );
        } else {
            v_rho_b_[index] = 0.0;
        } 

        if (is_gga_) {

            //V_gamma_aa
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t11505 = rho_a[index]+rho_b[index];
                double t11506 = c*c;
                double t11507 = 1.0/pow(t11505,2.0/3.0);
                double t11508 = 1.0/pow(t11505,1.0/3.0);
                double t11509 = 1.0/t11505;
                double t11510 = rho_a[index]-rho_b[index];
                double t11511 = Bg*t11506*t11507;
                double t11512 = Cg_2*c*t11508;
                double t11513 = Cg_1+t11511+t11512;
                double t11514 = Bg*c*t11506*t11509*1.0E4;
                double t11515 = Cg_4*t11506*t11507;
                double t11516 = Cg_3*c*t11508;
                double t11517 = t11514+t11515+t11516+1.0;
                double t11518 = 1.0/t11517;
                double t11519 = t11513*t11518;
                double t11520 = Cx+t11519;
                double t11521 = 1.0/two_13;
                double t11522 = 1.0/pow(t11505,7.0/6.0);
                double t11523 = 1.0/t11520;
                double t11524 = gamma_ab[index]*2.0;
                double t11525 = gamma_aa[index]+gamma_bb[index]+t11524;
                double t11526 = sqrt(t11525);
                double t11527 = exp(-Cinf*Fg*Pg_1*t11522*t11523*t11526);
                double t11528 = t11510*t11509*(1.0/2.0);
                double t11529 = t11528+1.0/2.0;
                double t11530 = pow(t11529,5.0/3.0);
                v_gamma_aa_[index] = t11520*t11521*1.0/pow(t11505,4.0/3.0)*t11527*1.0/sqrt(t11530+pow(t11510*t11509* \
                   (-1.0/2.0)+1.0/2.0,5.0/3.0))-Cinf*Fg*Pg_1*t11521*1.0/pow(t11505,5.0/2.0)*t11526*t11527*1.0/sqrt(t11530+ \
                   pow(-t11528+1.0/2.0,5.0/3.0))*(1.0/2.0);
            } else if (rho_a[index] > cutoff_) {
                double t13873 = rho_a[index]+rho_b[index];
                double t13874 = c*c;
                double t13875 = 1.0/pow(t13873,2.0/3.0);
                double t13876 = 1.0/pow(t13873,1.0/3.0);
                double t13877 = Bg*t13874*t13875;
                double t13878 = Cg_2*c*t13876;
                double t13879 = Cg_1+t13877+t13878;
                double t13880 = 1.0/t13873;
                double t13881 = Bg*c*t13880*t13874*1.0E4;
                double t13882 = Cg_4*t13874*t13875;
                double t13883 = Cg_3*c*t13876;
                double t13884 = t13881+t13882+t13883+1.0;
                double t13885 = 1.0/t13884;
                double t13886 = t13885*t13879;
                double t13887 = Cx+t13886;
                double t13888 = 1.0/two_13;
                double t13889 = 1.0/pow(t13873,7.0/6.0);
                double t13890 = 1.0/t13887;
                double t13891 = gamma_ab[index]*2.0;
                double t13892 = gamma_aa[index]+gamma_bb[index]+t13891;
                double t13893 = sqrt(t13892);
                double t13894 = exp(-Cinf*Fg*Pg_1*t13890*t13893*t13889);
                v_gamma_aa_[index] = 1.0/pow(t13873,4.0/3.0)*t13894*t13887*t13888-Cinf*Fg*Pg_1*1.0/pow(t13873,5.0/ \
                   2.0)*t13893*t13894*t13888*(1.0/2.0);
            } else if (rho_b[index] > cutoff_) {
                double t12826 = rho_a[index]+rho_b[index];
                double t12827 = c*c;
                double t12828 = 1.0/pow(t12826,2.0/3.0);
                double t12829 = 1.0/pow(t12826,1.0/3.0);
                double t12830 = Bg*t12827*t12828;
                double t12831 = Cg_2*c*t12829;
                double t12832 = Cg_1+t12830+t12831;
                double t12833 = 1.0/t12826;
                double t12834 = Bg*c*t12833*t12827*1.0E4;
                double t12835 = Cg_4*t12827*t12828;
                double t12836 = Cg_3*c*t12829;
                double t12837 = t12834+t12835+t12836+1.0;
                double t12838 = 1.0/t12837;
                double t12839 = t12832*t12838;
                double t12840 = Cx+t12839;
                double t12841 = 1.0/two_13;
                double t12842 = 1.0/pow(t12826,7.0/6.0);
                double t12843 = 1.0/t12840;
                double t12844 = gamma_ab[index]*2.0;
                double t12845 = gamma_aa[index]+gamma_bb[index]+t12844;
                double t12846 = sqrt(t12845);
                double t12847 = exp(-Cinf*Fg*Pg_1*t12842*t12843*t12846);
                v_gamma_aa_[index] = t12840*t12841*1.0/pow(t12826,4.0/3.0)*t12847-Cinf*Fg*Pg_1*t12841*1.0/pow(t12826,5.0/ \
                   2.0)*t12846*t12847*(1.0/2.0);
            } else {
                v_gamma_aa_[index] = 0.0;
            } 

            //V_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t11532 = rho_a[index]+rho_b[index];
                double t11533 = c*c;
                double t11534 = 1.0/pow(t11532,2.0/3.0);
                double t11535 = 1.0/pow(t11532,1.0/3.0);
                double t11536 = 1.0/t11532;
                double t11537 = rho_a[index]-rho_b[index];
                double t11538 = Bg*t11533*t11534;
                double t11539 = Cg_2*c*t11535;
                double t11540 = Cg_1+t11538+t11539;
                double t11541 = Bg*c*t11533*t11536*1.0E4;
                double t11542 = Cg_4*t11533*t11534;
                double t11543 = Cg_3*c*t11535;
                double t11544 = t11541+t11542+t11543+1.0;
                double t11545 = 1.0/t11544;
                double t11546 = t11540*t11545;
                double t11547 = Cx+t11546;
                double t11548 = 1.0/two_13;
                double t11549 = 1.0/pow(t11532,7.0/6.0);
                double t11550 = 1.0/t11547;
                double t11551 = gamma_ab[index]*2.0;
                double t11552 = gamma_aa[index]+gamma_bb[index]+t11551;
                double t11553 = sqrt(t11552);
                double t11554 = exp(-Cinf*Fg*Pg_1*t11550*t11553*t11549);
                double t11555 = t11536*t11537*(1.0/2.0);
                double t11556 = t11555+1.0/2.0;
                double t11557 = pow(t11556,5.0/3.0);
                v_gamma_ab_[index] = 1.0/pow(t11532,4.0/3.0)*t11554*t11547*t11548*1.0/sqrt(t11557+pow(t11536*t11537* \
                   (-1.0/2.0)+1.0/2.0,5.0/3.0))*2.0-Cinf*Fg*Pg_1*1.0/pow(t11532,5.0/2.0)*t11553*t11554*t11548*1.0/sqrt(t11557+ \
                   pow(-t11555+1.0/2.0,5.0/3.0));
            } else if (rho_a[index] > cutoff_) {
                double t13896 = rho_a[index]+rho_b[index];
                double t13897 = c*c;
                double t13898 = 1.0/pow(t13896,2.0/3.0);
                double t13899 = 1.0/pow(t13896,1.0/3.0);
                double t13900 = Bg*t13897*t13898;
                double t13901 = Cg_2*c*t13899;
                double t13902 = Cg_1+t13900+t13901;
                double t13903 = 1.0/t13896;
                double t13904 = Bg*c*t13903*t13897*1.0E4;
                double t13905 = Cg_4*t13897*t13898;
                double t13906 = Cg_3*c*t13899;
                double t13907 = t13904+t13905+t13906+1.0;
                double t13908 = 1.0/t13907;
                double t13909 = t13902*t13908;
                double t13910 = Cx+t13909;
                double t13911 = 1.0/two_13;
                double t13912 = 1.0/pow(t13896,7.0/6.0);
                double t13913 = 1.0/t13910;
                double t13914 = gamma_ab[index]*2.0;
                double t13915 = gamma_aa[index]+gamma_bb[index]+t13914;
                double t13916 = sqrt(t13915);
                double t13917 = exp(-Cinf*Fg*Pg_1*t13912*t13913*t13916);
                v_gamma_ab_[index] = t13910*t13911*t13917*1.0/pow(t13896,4.0/3.0)*2.0-Cinf*Fg*Pg_1*t13911*t13916* \
                   t13917*1.0/pow(t13896,5.0/2.0);
            } else if (rho_b[index] > cutoff_) {
                double t12849 = rho_a[index]+rho_b[index];
                double t12850 = c*c;
                double t12851 = 1.0/pow(t12849,2.0/3.0);
                double t12852 = 1.0/pow(t12849,1.0/3.0);
                double t12853 = Bg*t12850*t12851;
                double t12854 = Cg_2*c*t12852;
                double t12855 = Cg_1+t12853+t12854;
                double t12856 = 1.0/t12849;
                double t12857 = Bg*c*t12850*t12856*1.0E4;
                double t12858 = Cg_4*t12850*t12851;
                double t12859 = Cg_3*c*t12852;
                double t12860 = t12857+t12858+t12859+1.0;
                double t12861 = 1.0/t12860;
                double t12862 = t12861*t12855;
                double t12863 = Cx+t12862;
                double t12864 = 1.0/two_13;
                double t12865 = 1.0/pow(t12849,7.0/6.0);
                double t12866 = 1.0/t12863;
                double t12867 = gamma_ab[index]*2.0;
                double t12868 = gamma_aa[index]+gamma_bb[index]+t12867;
                double t12869 = sqrt(t12868);
                double t12870 = exp(-Cinf*Fg*Pg_1*t12865*t12866*t12869);
                v_gamma_ab_[index] = t12870*t12863*t12864*1.0/pow(t12849,4.0/3.0)*2.0-Cinf*Fg*Pg_1*t12870*t12864* \
                   1.0/pow(t12849,5.0/2.0)*t12869;
            } else {
                v_gamma_ab_[index] = 0.0;
            } 

            //V_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t11559 = rho_a[index]+rho_b[index];
                double t11560 = c*c;
                double t11561 = 1.0/pow(t11559,2.0/3.0);
                double t11562 = 1.0/pow(t11559,1.0/3.0);
                double t11563 = 1.0/t11559;
                double t11564 = rho_a[index]-rho_b[index];
                double t11565 = Bg*t11560*t11561;
                double t11566 = Cg_2*c*t11562;
                double t11567 = Cg_1+t11565+t11566;
                double t11568 = Bg*c*t11560*t11563*1.0E4;
                double t11569 = Cg_4*t11560*t11561;
                double t11570 = Cg_3*c*t11562;
                double t11571 = t11570+t11568+t11569+1.0;
                double t11572 = 1.0/t11571;
                double t11573 = t11572*t11567;
                double t11574 = Cx+t11573;
                double t11575 = 1.0/two_13;
                double t11576 = 1.0/pow(t11559,7.0/6.0);
                double t11577 = 1.0/t11574;
                double t11578 = gamma_ab[index]*2.0;
                double t11579 = gamma_aa[index]+gamma_bb[index]+t11578;
                double t11580 = sqrt(t11579);
                double t11581 = exp(-Cinf*Fg*Pg_1*t11580*t11576*t11577);
                double t11582 = t11563*t11564*(1.0/2.0);
                double t11583 = t11582+1.0/2.0;
                double t11584 = pow(t11583,5.0/3.0);
                v_gamma_bb_[index] = t11581*t11574*t11575*1.0/pow(t11559,4.0/3.0)*1.0/sqrt(t11584+pow(t11563*t11564* \
                   (-1.0/2.0)+1.0/2.0,5.0/3.0))-Cinf*Fg*Pg_1*t11580*t11581*t11575*1.0/pow(t11559,5.0/2.0)*1.0/sqrt(t11584+ \
                   pow(-t11582+1.0/2.0,5.0/3.0))*(1.0/2.0);
            } else if (rho_a[index] > cutoff_) {
                double t13919 = rho_a[index]+rho_b[index];
                double t13920 = c*c;
                double t13921 = 1.0/pow(t13919,2.0/3.0);
                double t13922 = 1.0/pow(t13919,1.0/3.0);
                double t13923 = Bg*t13920*t13921;
                double t13924 = Cg_2*c*t13922;
                double t13925 = Cg_1+t13923+t13924;
                double t13926 = 1.0/t13919;
                double t13927 = Bg*c*t13920*t13926*1.0E4;
                double t13928 = Cg_4*t13920*t13921;
                double t13929 = Cg_3*c*t13922;
                double t13930 = t13927+t13928+t13929+1.0;
                double t13931 = 1.0/t13930;
                double t13932 = t13931*t13925;
                double t13933 = Cx+t13932;
                double t13934 = 1.0/two_13;
                double t13935 = 1.0/pow(t13919,7.0/6.0);
                double t13936 = 1.0/t13933;
                double t13937 = gamma_ab[index]*2.0;
                double t13938 = gamma_aa[index]+gamma_bb[index]+t13937;
                double t13939 = sqrt(t13938);
                double t13940 = exp(-Cinf*Fg*Pg_1*t13935*t13936*t13939);
                v_gamma_bb_[index] = t13940*t13933*t13934*1.0/pow(t13919,4.0/3.0)-Cinf*Fg*Pg_1*t13940*t13934*1.0/ \
                   pow(t13919,5.0/2.0)*t13939*(1.0/2.0);
            } else if (rho_b[index] > cutoff_) {
                double t12872 = rho_a[index]+rho_b[index];
                double t12873 = c*c;
                double t12874 = 1.0/pow(t12872,2.0/3.0);
                double t12875 = 1.0/pow(t12872,1.0/3.0);
                double t12876 = Bg*t12873*t12874;
                double t12877 = Cg_2*c*t12875;
                double t12878 = Cg_1+t12876+t12877;
                double t12879 = 1.0/t12872;
                double t12880 = Bg*c*t12873*t12879*1.0E4;
                double t12881 = Cg_4*t12873*t12874;
                double t12882 = Cg_3*c*t12875;
                double t12883 = t12880+t12881+t12882+1.0;
                double t12884 = 1.0/t12883;
                double t12885 = t12884*t12878;
                double t12886 = Cx+t12885;
                double t12887 = 1.0/two_13;
                double t12888 = 1.0/pow(t12872,7.0/6.0);
                double t12889 = 1.0/t12886;
                double t12890 = gamma_ab[index]*2.0;
                double t12891 = gamma_aa[index]+gamma_bb[index]+t12890;
                double t12892 = sqrt(t12891);
                double t12893 = exp(-Cinf*Fg*Pg_1*t12892*t12888*t12889);
                v_gamma_bb_[index] = 1.0/pow(t12872,4.0/3.0)*t12893*t12886*t12887-Cinf*Fg*Pg_1*1.0/pow(t12872,5.0/ \
                   2.0)*t12892*t12893*t12887*(1.0/2.0);
            } else {
                v_gamma_bb_[index] = 0.0;
            } 
        }
        if (is_meta_) {

            //V_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_tau_a_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_tau_a_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_tau_a_[index] = 0.0;
            } else {
                v_tau_a_[index] = 0.0;
            } 

            //V_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_tau_b_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_tau_b_[index] = 0.0;
            } else {
                v_tau_b_[index] = 0.0;
            } 
        }
    }
    //Second Partials
    for (int index = 0; index < ntrue && deriv_ >= 2; index++) {

        //V_rho_a_rho_a
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t11588 = rho_a[index]+rho_b[index];
            double t11589 = 1.0/pow(t11588,4.0/3.0);
            double t11590 = 1.0/pow(t11588,1.0/3.0);
            double t11591 = c*t11590;
            double t11598 = 1.0/sqrt(t11591);
            double t11600 = EcPld_3*c*t11589*(1.0/3.0);
            double t11601 = EcPld_2*c*t11589*t11598*(1.0/6.0);
            double t11592 = t11600+t11601;
            double t11593 = 1.0/t11588;
            double t11594 = rho_a[index]-rho_b[index];
            double t11595 = t11593*t11594;
            double t11596 = 1.0/(t11588*t11588);
            double t11633 = t11594*t11596;
            double t11597 = -t11633+t11593;
            double t11599 = sqrt(t11591);
            double t11602 = EcPld_2*t11599;
            double t11603 = EcPld_3*c*t11590;
            double t11604 = t11602+t11603+1.0;
            double t11605 = two_13*2.0;
            double t11606 = t11605-2.0;
            double t11607 = 1.0/t11606;
            double t11608 = t11595+1.0;
            double t11609 = -t11595+1.0;
            double t11610 = EcFld_3*c*t11589*(1.0/3.0);
            double t11611 = EcFld_2*c*t11589*t11598*(1.0/6.0);
            double t11612 = t11610+t11611;
            double t11613 = EcFld_2*t11599;
            double t11614 = EcFld_3*c*t11590;
            double t11615 = t11613+t11614+1.0;
            double t11616 = t11592*t11592;
            double t11617 = 1.0/(t11604*t11604*t11604);
            double t11618 = EcPld_1*t11616*t11617*2.0;
            double t11619 = 1.0/pow(t11588,7.0/3.0);
            double t11620 = 1.0/(t11615*t11615);
            double t11621 = c*c;
            double t11622 = 1.0/pow(t11588,8.0/3.0);
            double t11623 = 1.0/pow(t11591,3.0/2.0);
            double t11624 = 1.0/(t11604*t11604);
            double t11625 = EcPld_3*c*t11619*(4.0/9.0);
            double t11626 = EcPld_2*c*t11619*t11598*(2.0/9.0);
            double t11627 = t11625+t11626-EcPld_2*t11621*t11622*t11623*(1.0/3.6E1);
            double t11628 = pow(t11608,1.0/3.0);
            double t11629 = pow(t11609,1.0/3.0);
            double t11630 = t11596*2.0;
            double t11631 = 1.0/(t11588*t11588*t11588);
            double t11635 = t11631*t11594*2.0;
            double t11632 = t11630-t11635;
            double t11634 = t11597*t11597;
            double t11636 = t11632*t11629*(4.0/3.0);
            double t11637 = 1.0/pow(t11608,2.0/3.0);
            double t11638 = t11634*t11637*(4.0/9.0);
            double t11639 = 1.0/pow(t11609,2.0/3.0);
            double t11640 = t11634*t11639*(4.0/9.0);
            double t11641 = t11640+t11636+t11638-t11632*t11628*(4.0/3.0);
            double t11642 = log(t11591);
            double t11643 = pow(t11608,4.0/3.0);
            double t11644 = pow(t11609,4.0/3.0);
            double t11645 = t11643+t11644-2.0;
            double t11646 = EcPhd_1*t11596*(1.0/3.0);
            double t11647 = EcPhd_3*c*t11619*(5.0/9.0);
            double t11648 = EcPhd_4*c*t11619*(4.0/9.0);
            double t11649 = t11628*t11597*(4.0/3.0);
            double t11669 = t11629*t11597*(4.0/3.0);
            double t11650 = t11649-t11669;
            double t11651 = EcPhd_3*c*t11642*t11619*(4.0/9.0);
            double t11652 = t11591-1.0;
            double t11653 = 1.0/t11604;
            double t11654 = EcPld_1*t11653;
            double t11655 = 1.0/t11615;
            double t11674 = EcFld_1*t11655;
            double t11656 = t11654-t11674;
            double t11657 = EcFhd_1*t11642;
            double t11658 = EcPhd_1*t11642;
            double t11659 = EcFhd_4*c*t11590;
            double t11660 = EcFhd_3*c*t11642*t11590;
            double t11661 = 0.0 ;
            double t11662 = EcFhd_1*t11593*(1.0/3.0);
            double t11663 = EcPhd_1*t11593*(1.0/3.0);
            double t11664 = EcFhd_3*c*t11589*(1.0/3.0);
            double t11665 = EcFhd_4*c*t11589*(1.0/3.0);
            double t11666 = EcPhd_3*c*t11589*(1.0/3.0);
            double t11667 = EcPhd_4*c*t11589*(1.0/3.0);
            double t11668 = EcFhd_3*c*t11642*t11589*(1.0/3.0);
            double t11670 = EcPhd_4*c*t11590;
            double t11671 = EcPhd_3*c*t11642*t11590;
            double t11672 = EcFld_1*t11620*t11612;
            double t11675 = EcPld_1*t11624*t11592;
            double t11673 = t11672-t11675;
            double t11691 = t11607*t11645*t11656;
            double t11676 = t11654-t11691;
            double t11677 = 0.0 ;
            double t11678 = EcFhd_2-EcPhd_2+t11660-t11670-t11671+t11657-t11658+t11659;
            double t11679 = EcPld_1*t11624*t11627;
            double t11680 = t11607*t11645*t11678;
            double t11681 = EcPhd_2+t11670+t11671+t11680+t11658;
            double t11683 = EcPhd_3*c*t11642*t11589*(1.0/3.0);
            double t11682 = t11662-t11663+t11664+t11665-t11683-t11666-t11667+t11668;
            double t11684 = -t11591+1.0;
            double t11685 = ( (t11684 > 0.0) ?  1.0 : 0.0 ) ;
            double t11686 = t11607*t11645*t11682;
            double t11687 = t11663+t11683+t11666+t11667+t11686-t11650*t11607*t11678;
            double t11688 = ( (t11652 > 0.0) ?  1.0 : 0.0 ) ;
            double t11689 = t11607*t11645*t11673;
            double t11690 = t11675+t11689-t11650*t11607*t11656;
            double t11692 = 1.0/pow(t11588,2.0/3.0);
            double t11693 = gamma_ab[index]*2.0;
            double t11694 = gamma_aa[index]+gamma_bb[index]+t11693;
            double t11695 = Bg*c*t11621*t11593*1.0E4;
            double t11696 = Cg_4*t11621*t11692;
            double t11697 = Cg_3*c*t11590;
            double t11698 = t11695+t11696+t11697+1.0;
            double t11699 = 1.0/t11698;
            double t11700 = 1.0/pow(t11588,5.0/3.0);
            double t11701 = Bg*t11621*t11692;
            double t11702 = Cg_2*c*t11590;
            double t11703 = Cg_1+t11701+t11702;
            double t11704 = 1.0/(t11698*t11698);
            double t11705 = Bg*c*t11621*t11596*1.0E4;
            double t11706 = Cg_4*t11700*t11621*(2.0/3.0);
            double t11707 = Cg_3*c*t11589*(1.0/3.0);
            double t11708 = t11705+t11706+t11707;
            double t11709 = 1.0/two_13;
            double t11710 = 1.0/pow(t11588,7.0/6.0);
            double t11711 = t11703*t11699;
            double t11712 = Cx+t11711;
            double t11713 = 1.0/t11712;
            double t11714 = sqrt(t11694);
            double t11722 = Cinf*Fg*Pg_1*t11710*t11713*t11714;
            double t11715 = exp(-t11722);
            double t11716 = t11593*t11594*(1.0/2.0);
            double t11717 = t11716+1.0/2.0;
            double t11718 = pow(t11717,5.0/3.0);
            double t11719 = Bg*t11700*t11621*(2.0/3.0);
            double t11720 = Cg_2*c*t11589*(1.0/3.0);
            double t11721 = t11720+t11719;
            double t11723 = -t11716+1.0/2.0;
            double t11724 = pow(t11723,5.0/3.0);
            double t11725 = t11724+t11718;
            double t11726 = 1.0/sqrt(t11725);
            double t11727 = t11593*(1.0/2.0);
            double t11733 = t11594*t11596*(1.0/2.0);
            double t11728 = -t11733+t11727;
            double t11735 = pow(t11723,2.0/3.0);
            double t11736 = pow(t11717,2.0/3.0);
            double t11755 = t11735*t11728*(5.0/3.0);
            double t11756 = t11736*t11728*(5.0/3.0);
            double t11729 = t11755-t11756;
            double t11730 = t11721*t11699;
            double t11732 = t11703*t11704*t11708;
            double t11731 = t11730-t11732;
            double t11734 = t11728*t11728;
            double t11737 = t11596-t11631*t11594;
            double t11738 = 1.0/(t11712*t11712);
            double t11739 = Bg*t11621*t11622*(1.0E1/9.0);
            double t11740 = Cg_2*c*t11619*(4.0/9.0);
            double t11741 = t11740+t11739;
            double t11742 = t11741*t11699;
            double t11743 = Bg*c*t11621*t11631*2.0E4;
            double t11744 = Cg_4*t11621*t11622*(1.0E1/9.0);
            double t11745 = Cg_3*c*t11619*(4.0/9.0);
            double t11746 = t11743+t11744+t11745;
            double t11747 = t11708*t11708;
            double t11748 = 1.0/(t11698*t11698*t11698);
            double t11749 = t11703*t11747*t11748*2.0;
            double t11750 = t11742+t11749-t11721*t11704*t11708*2.0-t11703*t11704*t11746;
            double t11751 = 1.0/pow(t11588,1.3E1/6.0);
            double t11752 = Cinf*Fg*Pg_1*t11713*t11714*t11751*(7.0/6.0);
            double t11757 = Cinf*Fg*Pg_1*t11710*t11731*t11714*t11738;
            double t11753 = t11752-t11757;
            double t11754 = 1.0/pow(t11725,3.0/2.0);
            v_rho_a_rho_a_[index] = -t11588*(t11688*(-t11618+t11679+t11607*t11645*(t11618-t11679-EcFld_1*(t11612* \
               t11612)*1.0/(t11615*t11615*t11615)*2.0+EcFld_1*t11620*(EcFld_3*c*t11619*(4.0/9.0)-EcFld_2*t11621*t11622* \
               t11623*(1.0/3.6E1)+EcFld_2*c*t11619*t11598*(2.0/9.0)))-t11650*t11607*t11673*2.0+t11641*t11607*t11656) \
               -t11685*(t11651+t11646+t11647+t11648-t11607*t11645*(t11651+t11646+t11647+t11648-EcFhd_1*t11596*(1.0/ \
               3.0)-EcFhd_3*c*t11619*(5.0/9.0)-EcFhd_4*c*t11619*(4.0/9.0)-EcFhd_3*c*t11642*t11619*(4.0/9.0))-t11650* \
               t11607*t11682*2.0+t11641*t11607*t11678)+c*t11661*t11681*t11619*(4.0/9.0)-c*t11661*t11619*t11676*(4.0/ \
               9.0)+c*t11661*t11690*t11589*(2.0/3.0)+c*t11661*t11687*t11589*(2.0/3.0)+t11621*t11622*t11681*t11677* \
               (1.0/9.0)-t11621*t11622*t11676*t11677*(1.0/9.0))+t11690*t11688*2.0-t11685*t11687*2.0+c*t11661*t11681* \
               t11589*(2.0/3.0)-c*t11661*t11676*t11589*(2.0/3.0)+t11731*t11715*t11726*t11619*t11709*t11694*(8.0/3.0) \
               +t11712*t11715*t11726*t11709*t11694*1.0/pow(t11588,1.0E1/3.0)*(2.8E1/9.0)+t11750*t11715*t11709*t11694* \
               t11589*1.0/sqrt(t11718+pow(t11593*t11594*(-1.0/2.0)+1.0/2.0,5.0/3.0))+t11712*t11715*1.0/pow(t11725,5.0/ \
               2.0)*t11709*(t11729*t11729)*t11694*t11589*(3.0/4.0)-t11712*t11715*t11726*t11709*t11694*t11589*(Cinf* \
               Fg*Pg_1*t11713*t11714*1.0/pow(t11588,1.9E1/6.0)*(9.1E1/3.6E1)-Cinf*Fg*Pg_1*t11710*t11714*t11750*t11738- \
               Cinf*Fg*Pg_1*t11731*t11714*t11751*t11738*(7.0/3.0)+Cinf*Fg*Pg_1*t11710*1.0/(t11712*t11712*t11712)* \
               (t11731*t11731)*t11714*2.0)-t11712*t11715*t11709*t11754*t11694*t11589*(t11735*t11737*(5.0/3.0)-t11736* \
               t11737*(5.0/3.0)+1.0/pow(t11723,1.0/3.0)*t11734*(1.0E1/9.0)+t11734*1.0/pow(t11717,1.0/3.0)*(1.0E1/ \
               9.0))*(1.0/2.0)-t11712*t11715*t11726*t11753*t11619*t11709*t11694*(8.0/3.0)-t11712*t11715*t11619*t11709* \
               t11754*t11729*t11694*(4.0/3.0)-t11731*t11715*t11726*t11753*t11709*t11694*t11589*2.0-t11731*t11715* \
               t11709*t11754*t11729*t11694*t11589+t11712*t11715*t11726*(t11753*t11753)*t11709*t11694*t11589+t11712* \
               t11715*t11753*t11709*t11754*t11729*t11694*t11589;
        } else if (rho_a[index] > cutoff_) {
            double t13944 = rho_a[index]+rho_b[index];
            double t13945 = 1.0/pow(t13944,4.0/3.0);
            double t13946 = 1.0/pow(t13944,1.0/3.0);
            double t13947 = c*t13946;
            double t13948 = 1.0/sqrt(t13947);
            double t13949 = sqrt(t13947);
            double t13950 = EcPld_3*c*t13945*(1.0/3.0);
            double t13951 = EcPld_2*c*t13945*t13948*(1.0/6.0);
            double t13952 = t13950+t13951;
            double t13953 = EcPld_2*t13949;
            double t13954 = EcPld_3*c*t13946;
            double t13955 = t13953+t13954+1.0;
            double t13956 = 1.0/(t13955*t13955);
            double t13957 = EcPld_1*t13952*t13956;
            double t13958 = t13947-1.0;
            double t13959 = ( (t13958 > 0.0) ?  1.0 : 0.0 ) ;
            double t13960 = pow(2.0,1.0/3.0);
            double t13961 = t13960*2.0;
            double t13962 = t13961-2.0;
            double t13963 = two_13*2.0;
            double t13964 = t13963-2.0;
            double t13965 = 1.0/t13964;
            double t13966 = EcFld_3*c*t13945*(1.0/3.0);
            double t13967 = EcFld_2*c*t13945*t13948*(1.0/6.0);
            double t13968 = t13966+t13967;
            double t13969 = EcFld_2*t13949;
            double t13970 = EcFld_3*c*t13946;
            double t13971 = t13970+t13969+1.0;
            double t13972 = t13952*t13952;
            double t13973 = 1.0/(t13955*t13955*t13955);
            double t13974 = EcPld_1*t13972*t13973*2.0;
            double t13975 = 1.0/pow(t13944,7.0/3.0);
            double t13976 = 1.0/(t13971*t13971);
            double t13977 = c*c;
            double t13978 = 1.0/pow(t13944,8.0/3.0);
            double t13979 = 1.0/pow(t13947,3.0/2.0);
            double t13980 = EcPld_3*c*t13975*(4.0/9.0);
            double t13981 = EcPld_2*c*t13948*t13975*(2.0/9.0);
            double t13982 = t13980+t13981-EcPld_2*t13977*t13978*t13979*(1.0/3.6E1);
            double t13983 = EcPld_1*t13982*t13956;
            double t13984 = 1.0/(t13944*t13944);
            double t13985 = EcPhd_1*t13984*(1.0/3.0);
            double t13986 = log(t13947);
            double t13987 = EcPhd_3*c*t13975*(5.0/9.0);
            double t13988 = EcPhd_4*c*t13975*(4.0/9.0);
            double t13989 = EcPhd_3*c*t13975*t13986*(4.0/9.0);
            double t13990 = 1.0/t13955;
            double t13991 = EcPld_1*t13990;
            double t13992 = t13957-EcFld_1*t13976*t13968;
            double t13993 = t13957-t13962*t13965*t13992;
            double t13994 = 0.0 ;
            double t13995 = EcPhd_1*t13986;
            double t13996 = 1.0/t13944;
            double t13997 = EcPhd_1*t13996*(1.0/3.0);
            double t13998 = EcPhd_3*c*t13945*(1.0/3.0);
            double t13999 = EcPhd_4*c*t13945*(1.0/3.0);
            double t14000 = EcPhd_3*c*t13945*t13986*(1.0/3.0);
            double t14001 = 1.0/t13971;
            double t14017 = EcFld_1*t14001;
            double t14002 = t13991-t14017;
            double t14018 = t13962*t13965*t14002;
            double t14003 = t13991-t14018;
            double t14004 = 0.0 ;
            double t14005 = EcFhd_1*t13986;
            double t14006 = EcFhd_4*c*t13946;
            double t14007 = EcPhd_4*c*t13946;
            double t14008 = EcFhd_3*c*t13946*t13986;
            double t14009 = EcPhd_3*c*t13946*t13986;
            double t14010 = EcFhd_2-EcPhd_2-t13995+t14005+t14006-t14007+t14008-t14009;
            double t14011 = t13962*t13965*t14010;
            double t14012 = EcPhd_2+t13995+t14011+t14007+t14009;
            double t14013 = -t13947+1.0;
            double t14014 = ( (t14013 > 0.0) ?  1.0 : 0.0 ) ;
            double t14015 = t13997+t13998+t13999+t14000-EcFhd_1*t13996*(1.0/3.0)-EcFhd_3*c*t13945*(1.0/3.0)-EcFhd_4* \
               c*t13945*(1.0/3.0)-EcFhd_3*c*t13945*t13986*(1.0/3.0);
            double t14016 = t13997+t13998+t13999+t14000-t13962*t13965*t14015;
            double t14019 = 1.0/pow(t13944,2.0/3.0);
            double t14020 = Bg*c*t13977*t13996*1.0E4;
            double t14021 = Cg_4*t13977*t14019;
            double t14022 = Cg_3*c*t13946;
            double t14023 = t14020+t14021+t14022+1.0;
            double t14024 = 1.0/t14023;
            double t14025 = 1.0/pow(t13944,5.0/3.0);
            double t14026 = Bg*t13977*t14019;
            double t14027 = Cg_2*c*t13946;
            double t14028 = Cg_1+t14026+t14027;
            double t14029 = gamma_ab[index]*2.0;
            double t14030 = gamma_aa[index]+gamma_bb[index]+t14029;
            double t14031 = 1.0/two_13;
            double t14032 = 1.0/pow(t13944,7.0/6.0);
            double t14033 = t14024*t14028;
            double t14034 = Cx+t14033;
            double t14035 = 1.0/t14034;
            double t14036 = sqrt(t14030);
            double t14038 = Cinf*Fg*Pg_1*t14032*t14035*t14036;
            double t14037 = exp(-t14038);
            double t14039 = Bg*t13977*t14025*(2.0/3.0);
            double t14040 = Cg_2*c*t13945*(1.0/3.0);
            double t14041 = t14040+t14039;
            double t14042 = Bg*c*t13984*t13977*1.0E4;
            double t14043 = Cg_4*t13977*t14025*(2.0/3.0);
            double t14044 = Cg_3*c*t13945*(1.0/3.0);
            double t14045 = t14042+t14043+t14044;
            double t14046 = 1.0/(t14023*t14023);
            double t14047 = t14041*t14024;
            double t14062 = t14045*t14028*t14046;
            double t14048 = -t14062+t14047;
            double t14049 = Bg*t13977*t13978*(1.0E1/9.0);
            double t14050 = Cg_2*c*t13975*(4.0/9.0);
            double t14051 = t14050+t14049;
            double t14052 = t14024*t14051;
            double t14053 = 1.0/(t13944*t13944*t13944);
            double t14054 = Bg*c*t13977*t14053*2.0E4;
            double t14055 = Cg_4*t13977*t13978*(1.0E1/9.0);
            double t14056 = Cg_3*c*t13975*(4.0/9.0);
            double t14057 = t14054+t14055+t14056;
            double t14058 = t14045*t14045;
            double t14059 = 1.0/(t14023*t14023*t14023);
            double t14060 = t14028*t14058*t14059*2.0;
            double t14061 = t14060+t14052-t14041*t14045*t14046*2.0-t14028*t14046*t14057;
            double t14063 = 1.0/(t14034*t14034);
            double t14064 = 1.0/pow(t13944,1.3E1/6.0);
            double t14065 = Cinf*Fg*Pg_1*t14035*t14036*t14064*(7.0/6.0);
            double t14067 = Cinf*Fg*Pg_1*t14032*t14036*t14063*t14048;
            double t14066 = t14065-t14067;
            v_rho_a_rho_a_[index] = -t13944*(-t14014*(t13985+t13987+t13988+t13989-t13962*t13965*(t13985+t13987+ \
               t13988+t13989-EcFhd_1*t13984*(1.0/3.0)-EcFhd_3*c*t13975*(5.0/9.0)-EcFhd_4*c*t13975*(4.0/9.0)-EcFhd_3* \
               c*t13975*t13986*(4.0/9.0)))+t13959*(-t13974+t13983+t13962*t13965*(t13974-t13983-EcFld_1*1.0/(t13971* \
               t13971*t13971)*(t13968*t13968)*2.0+EcFld_1*t13976*(EcFld_3*c*t13975*(4.0/9.0)-EcFld_2*t13977*t13978* \
               t13979*(1.0/3.6E1)+EcFld_2*c*t13948*t13975*(2.0/9.0))))+c*t13945*t13993*t13994*(2.0/3.0)-c*t13975* \
               t13994*t14003*(4.0/9.0)+c*t13975*t13994*t14012*(4.0/9.0)+c*t13945*t13994*t14016*(2.0/3.0)-t13977*t13978* \
               t14003*t14004*(1.0/9.0)+t13977*t13978*t14012*t14004*(1.0/9.0))+t13993*t13959*2.0-t14014*t14016*2.0- \
               c*t13945*t13994*t14003*(2.0/3.0)+c*t13945*t13994*t14012*(2.0/3.0)+1.0/pow(t13944,1.0E1/3.0)*t14030* \
               t14031*t14034*t14037*(2.8E1/9.0)+t13945*t14030*t14031*t14061*t14037+t13975*t14030*t14031*t14037*t14048* \
               (8.0/3.0)-t13975*t14030*t14031*t14034*t14037*t14066*(8.0/3.0)-t13945*t14030*t14031*t14037*t14048*t14066* \
               2.0+t13945*t14030*t14031*t14034*t14037*(t14066*t14066)-t13945*t14030*t14031*t14034*t14037*(Cinf*Fg* \
               Pg_1*1.0/pow(t13944,1.9E1/6.0)*t14035*t14036*(9.1E1/3.6E1)-Cinf*Fg*Pg_1*t14032*t14061*t14036*t14063- \
               Cinf*Fg*Pg_1*t14036*t14063*t14064*t14048*(7.0/3.0)+Cinf*Fg*Pg_1*t14032*1.0/(t14034*t14034*t14034)* \
               t14036*(t14048*t14048)*2.0);
        } else if (rho_b[index] > cutoff_) {
            double t12897 = rho_a[index]+rho_b[index];
            double t12898 = 1.0/pow(t12897,4.0/3.0);
            double t12899 = 1.0/pow(t12897,1.0/3.0);
            double t12900 = c*t12899;
            double t12901 = 1.0/sqrt(t12900);
            double t12902 = sqrt(t12900);
            double t12903 = EcPld_3*c*t12898*(1.0/3.0);
            double t12904 = EcPld_2*c*t12901*t12898*(1.0/6.0);
            double t12905 = t12903+t12904;
            double t12906 = EcPld_2*t12902;
            double t12907 = EcPld_3*c*t12899;
            double t12908 = t12906+t12907+1.0;
            double t12909 = 1.0/(t12908*t12908);
            double t12910 = EcPld_1*t12905*t12909;
            double t12911 = t12900-1.0;
            double t12912 = ( (t12911 > 0.0) ?  1.0 : 0.0 ) ;
            double t12913 = pow(2.0,1.0/3.0);
            double t12914 = t12913*2.0;
            double t12915 = t12914-2.0;
            double t12916 = two_13*2.0;
            double t12917 = t12916-2.0;
            double t12918 = 1.0/t12917;
            double t12919 = EcFld_3*c*t12898*(1.0/3.0);
            double t12920 = EcFld_2*c*t12901*t12898*(1.0/6.0);
            double t12921 = t12920+t12919;
            double t12922 = EcFld_2*t12902;
            double t12923 = EcFld_3*c*t12899;
            double t12924 = t12922+t12923+1.0;
            double t12925 = t12905*t12905;
            double t12926 = 1.0/(t12908*t12908*t12908);
            double t12927 = EcPld_1*t12925*t12926*2.0;
            double t12928 = 1.0/pow(t12897,7.0/3.0);
            double t12929 = 1.0/(t12924*t12924);
            double t12930 = c*c;
            double t12931 = 1.0/pow(t12897,8.0/3.0);
            double t12932 = 1.0/pow(t12900,3.0/2.0);
            double t12933 = EcPld_3*c*t12928*(4.0/9.0);
            double t12934 = EcPld_2*c*t12901*t12928*(2.0/9.0);
            double t12935 = t12933+t12934-EcPld_2*t12930*t12931*t12932*(1.0/3.6E1);
            double t12936 = EcPld_1*t12935*t12909;
            double t12937 = 1.0/(t12897*t12897);
            double t12938 = EcPhd_1*t12937*(1.0/3.0);
            double t12939 = log(t12900);
            double t12940 = EcPhd_3*c*t12928*(5.0/9.0);
            double t12941 = EcPhd_4*c*t12928*(4.0/9.0);
            double t12942 = EcPhd_3*c*t12928*t12939*(4.0/9.0);
            double t12943 = 1.0/t12908;
            double t12944 = EcPld_1*t12943;
            double t12945 = t12910-EcFld_1*t12921*t12929;
            double t12946 = t12910-t12915*t12918*t12945;
            double t12947 = 0.0 ;
            double t12948 = EcPhd_1*t12939;
            double t12949 = 1.0/t12897;
            double t12950 = EcPhd_1*t12949*(1.0/3.0);
            double t12951 = EcPhd_3*c*t12898*(1.0/3.0);
            double t12952 = EcPhd_4*c*t12898*(1.0/3.0);
            double t12953 = EcPhd_3*c*t12939*t12898*(1.0/3.0);
            double t12954 = 1.0/t12924;
            double t12970 = EcFld_1*t12954;
            double t12955 = -t12970+t12944;
            double t12956 = t12944-t12915*t12918*t12955;
            double t12957 = 0.0 ;
            double t12958 = EcFhd_1*t12939;
            double t12959 = EcFhd_4*c*t12899;
            double t12960 = EcPhd_4*c*t12899;
            double t12961 = EcFhd_3*c*t12939*t12899;
            double t12962 = EcPhd_3*c*t12939*t12899;
            double t12963 = EcFhd_2-EcPhd_2-t12960+t12961-t12962-t12948+t12958+t12959;
            double t12964 = t12915*t12918*t12963;
            double t12965 = EcPhd_2+t12960+t12962+t12964+t12948;
            double t12966 = -t12900+1.0;
            double t12967 = ( (t12966 > 0.0) ?  1.0 : 0.0 ) ;
            double t12968 = t12950+t12951+t12952+t12953-EcFhd_1*t12949*(1.0/3.0)-EcFhd_3*c*t12898*(1.0/3.0)-EcFhd_4* \
               c*t12898*(1.0/3.0)-EcFhd_3*c*t12939*t12898*(1.0/3.0);
            double t12969 = t12950+t12951+t12952+t12953-t12915*t12918*t12968;
            double t12971 = 1.0/pow(t12897,2.0/3.0);
            double t12972 = Bg*c*t12930*t12949*1.0E4;
            double t12973 = Cg_4*t12930*t12971;
            double t12974 = Cg_3*c*t12899;
            double t12975 = t12972+t12973+t12974+1.0;
            double t12976 = 1.0/t12975;
            double t12977 = 1.0/pow(t12897,5.0/3.0);
            double t12978 = Bg*t12930*t12971;
            double t12979 = Cg_2*c*t12899;
            double t12980 = Cg_1+t12978+t12979;
            double t12981 = gamma_ab[index]*2.0;
            double t12982 = gamma_aa[index]+gamma_bb[index]+t12981;
            double t12983 = 1.0/two_13;
            double t12984 = 1.0/pow(t12897,7.0/6.0);
            double t12985 = t12980*t12976;
            double t12986 = Cx+t12985;
            double t12987 = 1.0/t12986;
            double t12988 = sqrt(t12982);
            double t12990 = Cinf*Fg*Pg_1*t12984*t12987*t12988;
            double t12989 = exp(-t12990);
            double t12991 = Bg*t12930*t12977*(2.0/3.0);
            double t12992 = Cg_2*c*t12898*(1.0/3.0);
            double t12993 = t12991+t12992;
            double t12994 = Bg*c*t12930*t12937*1.0E4;
            double t12995 = Cg_4*t12930*t12977*(2.0/3.0);
            double t12996 = Cg_3*c*t12898*(1.0/3.0);
            double t12997 = t12994+t12995+t12996;
            double t12998 = 1.0/(t12975*t12975);
            double t12999 = t12993*t12976;
            double t13014 = t12980*t12997*t12998;
            double t13000 = t12999-t13014;
            double t13001 = Bg*t12930*t12931*(1.0E1/9.0);
            double t13002 = Cg_2*c*t12928*(4.0/9.0);
            double t13003 = t13001+t13002;
            double t13004 = t12976*t13003;
            double t13005 = 1.0/(t12897*t12897*t12897);
            double t13006 = Bg*c*t12930*t13005*2.0E4;
            double t13007 = Cg_4*t12930*t12931*(1.0E1/9.0);
            double t13008 = Cg_3*c*t12928*(4.0/9.0);
            double t13009 = t13006+t13007+t13008;
            double t13010 = t12997*t12997;
            double t13011 = 1.0/(t12975*t12975*t12975);
            double t13012 = t12980*t13010*t13011*2.0;
            double t13013 = t13012+t13004-t12993*t12997*t12998*2.0-t12980*t12998*t13009;
            double t13015 = 1.0/(t12986*t12986);
            double t13016 = 1.0/pow(t12897,1.3E1/6.0);
            double t13017 = Cinf*Fg*Pg_1*t12987*t12988*t13016*(7.0/6.0);
            double t13019 = Cinf*Fg*Pg_1*t12984*t12988*t13000*t13015;
            double t13018 = t13017-t13019;
            v_rho_a_rho_a_[index] = -t12897*(-t12967*(t12940+t12941+t12942+t12938-t12915*t12918*(t12940+t12941+ \
               t12942+t12938-EcFhd_1*t12937*(1.0/3.0)-EcFhd_3*c*t12928*(5.0/9.0)-EcFhd_4*c*t12928*(4.0/9.0)-EcFhd_3* \
               c*t12928*t12939*(4.0/9.0)))+t12912*(-t12927+t12936+t12915*t12918*(t12927-t12936-EcFld_1*(t12921*t12921) \
               *1.0/(t12924*t12924*t12924)*2.0+EcFld_1*t12929*(EcFld_3*c*t12928*(4.0/9.0)-EcFld_2*t12930*t12931*t12932* \
               (1.0/3.6E1)+EcFld_2*c*t12901*t12928*(2.0/9.0))))-c*t12928*t12947*t12956*(4.0/9.0)+c*t12928*t12947* \
               t12965*(4.0/9.0)+c*t12946*t12947*t12898*(2.0/3.0)+c*t12947*t12969*t12898*(2.0/3.0)-t12930*t12931*t12956* \
               t12957*(1.0/9.0)+t12930*t12931*t12965*t12957*(1.0/9.0))+t12912*t12946*2.0-t12967*t12969*2.0+c*t12947* \
               t12965*t12898*(2.0/3.0)-c*t12947*t12898*(t12944+t12915*t12918*(t12970-t12944))*(2.0/3.0)+t12982*t12983* \
               t12986*1.0/pow(t12897,1.0E1/3.0)*t12989*(2.8E1/9.0)+t12928*t12982*t12983*t12989*t13000*(8.0/3.0)+t12982* \
               t12983*t12898*t12989*t13013-t12928*t12982*t12983*t12986*t12989*t13018*(8.0/3.0)-t12982*t12983*t12898* \
               t12989*t13000*t13018*2.0+t12982*t12983*t12986*t12898*t12989*(t13018*t13018)-t12982*t12983*t12986*t12898* \
               t12989*(Cinf*Fg*Pg_1*1.0/pow(t12897,1.9E1/6.0)*t12987*t12988*(9.1E1/3.6E1)-Cinf*Fg*Pg_1*t12984*t12988* \
               t13013*t13015-Cinf*Fg*Pg_1*t12988*t13000*t13015*t13016*(7.0/3.0)+Cinf*Fg*Pg_1*t12984*1.0/(t12986*t12986* \
               t12986)*t12988*(t13000*t13000)*2.0);
        } else {
            v_rho_a_rho_a_[index] = 0.0;
        } 

        //V_rho_a_rho_b
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t11759 = rho_a[index]+rho_b[index];
            double t11760 = rho_a[index]-rho_b[index];
            double t11761 = 1.0/t11759;
            double t11762 = t11760*t11761;
            double t11763 = 1.0/(t11759*t11759*t11759);
            double t11764 = t11762+1.0;
            double t11765 = 1.0/(t11759*t11759);
            double t11766 = t11760*t11765;
            double t11767 = -t11762+1.0;
            double t11768 = t11761+t11766;
            double t11769 = t11761-t11766;
            double t11770 = 1.0/pow(t11759,1.0/3.0);
            double t11771 = c*t11770;
            double t11772 = log(t11771);
            double t11773 = 1.0/pow(t11759,7.0/3.0);
            double t11774 = two_13*2.0;
            double t11775 = t11774-2.0;
            double t11776 = 1.0/t11775;
            double t11777 = EcPhd_1*t11765*(1.0/3.0);
            double t11778 = EcPhd_3*c*t11773*(5.0/9.0);
            double t11779 = EcPhd_4*c*t11773*(4.0/9.0);
            double t11780 = pow(t11764,1.0/3.0);
            double t11781 = pow(t11767,1.0/3.0);
            double t11782 = 1.0/pow(t11759,4.0/3.0);
            double t11783 = EcFhd_1*t11761*(1.0/3.0);
            double t11784 = EcFhd_3*c*t11782*(1.0/3.0);
            double t11785 = EcFhd_4*c*t11782*(1.0/3.0);
            double t11786 = EcFhd_3*c*t11772*t11782*(1.0/3.0);
            double t11839 = EcPhd_1*t11761*(1.0/3.0);
            double t11840 = EcPhd_3*c*t11782*(1.0/3.0);
            double t11841 = EcPhd_4*c*t11782*(1.0/3.0);
            double t11842 = EcPhd_3*c*t11772*t11782*(1.0/3.0);
            double t11787 = -t11840-t11841-t11842+t11783+t11784+t11785-t11839+t11786;
            double t11788 = EcPhd_3*c*t11772*t11773*(4.0/9.0);
            double t11792 = 1.0/sqrt(t11771);
            double t11794 = EcPld_3*c*t11782*(1.0/3.0);
            double t11795 = EcPld_2*c*t11782*t11792*(1.0/6.0);
            double t11789 = t11794+t11795;
            double t11790 = t11780*t11768*(4.0/3.0);
            double t11843 = t11781*t11768*(4.0/3.0);
            double t11791 = -t11843+t11790;
            double t11793 = sqrt(t11771);
            double t11796 = EcPld_2*t11793;
            double t11797 = EcPld_3*c*t11770;
            double t11798 = t11796+t11797+1.0;
            double t11799 = t11780*t11769*(4.0/3.0);
            double t11847 = t11781*t11769*(4.0/3.0);
            double t11800 = -t11847+t11799;
            double t11801 = EcFld_3*c*t11782*(1.0/3.0);
            double t11802 = EcFld_2*c*t11782*t11792*(1.0/6.0);
            double t11803 = t11801+t11802;
            double t11804 = EcFld_2*t11793;
            double t11805 = EcFld_3*c*t11770;
            double t11806 = t11804+t11805+1.0;
            double t11807 = 1.0/(t11806*t11806);
            double t11808 = EcFld_1*t11803*t11807;
            double t11809 = 1.0/(t11798*t11798);
            double t11849 = EcPld_1*t11809*t11789;
            double t11810 = t11808-t11849;
            double t11811 = pow(t11764,4.0/3.0);
            double t11812 = pow(t11767,4.0/3.0);
            double t11813 = t11811+t11812-2.0;
            double t11814 = t11789*t11789;
            double t11815 = 1.0/(t11798*t11798*t11798);
            double t11816 = EcPld_1*t11814*t11815*2.0;
            double t11817 = c*c;
            double t11818 = 1.0/pow(t11759,8.0/3.0);
            double t11819 = 1.0/pow(t11771,3.0/2.0);
            double t11820 = EcPld_3*c*t11773*(4.0/9.0);
            double t11821 = EcPld_2*c*t11773*t11792*(2.0/9.0);
            double t11822 = t11820+t11821-EcPld_2*t11817*t11818*t11819*(1.0/3.6E1);
            double t11823 = t11760*t11763*t11781*(8.0/3.0);
            double t11824 = 1.0/pow(t11764,2.0/3.0);
            double t11825 = t11824*t11768*t11769*(4.0/9.0);
            double t11826 = 1.0/pow(t11767,2.0/3.0);
            double t11827 = t11826*t11768*t11769*(4.0/9.0);
            double t11828 = t11823+t11825+t11827-t11760*t11780*t11763*(8.0/3.0);
            double t11829 = t11771-1.0;
            double t11830 = 1.0/t11798;
            double t11831 = EcPld_1*t11830;
            double t11832 = 1.0/t11806;
            double t11850 = EcFld_1*t11832;
            double t11833 = t11831-t11850;
            double t11834 = EcFhd_1*t11772;
            double t11835 = EcPhd_1*t11772;
            double t11836 = EcFhd_4*c*t11770;
            double t11837 = EcFhd_3*c*t11770*t11772;
            double t11838 = 0.0 ;
            double t11844 = EcPhd_4*c*t11770;
            double t11845 = EcPhd_3*c*t11770*t11772;
            double t11846 = t11813*t11776*t11787;
            double t11848 = EcFhd_2-EcPhd_2+t11834-t11835-t11844+t11836-t11845+t11837;
            double t11851 = t11810*t11813*t11776;
            double t11863 = t11813*t11833*t11776;
            double t11852 = t11831-t11863;
            double t11853 = 0.0 ;
            double t11854 = t11813*t11776*t11848;
            double t11855 = EcPhd_2+t11835+t11844+t11845+t11854;
            double t11856 = -t11771+1.0;
            double t11857 = ( (t11856 > 0.0) ?  1.0 : 0.0 ) ;
            double t11858 = t11791*t11776*t11848;
            double t11859 = t11840+t11841+t11842+t11846+t11839+t11858;
            double t11860 = t11840+t11841+t11842+t11846+t11839-t11800*t11776*t11848;
            double t11861 = ( (t11829 > 0.0) ?  1.0 : 0.0 ) ;
            double t11862 = t11851+t11849-t11800*t11833*t11776;
            double t11864 = 1.0/pow(t11759,2.0/3.0);
            double t11865 = gamma_ab[index]*2.0;
            double t11866 = gamma_aa[index]+gamma_bb[index]+t11865;
            double t11867 = Bg*c*t11761*t11817*1.0E4;
            double t11868 = Cg_4*t11817*t11864;
            double t11869 = Cg_3*c*t11770;
            double t11870 = t11867+t11868+t11869+1.0;
            double t11871 = 1.0/t11870;
            double t11872 = 1.0/pow(t11759,5.0/3.0);
            double t11873 = Bg*t11817*t11864;
            double t11874 = Cg_2*c*t11770;
            double t11875 = Cg_1+t11873+t11874;
            double t11876 = 1.0/(t11870*t11870);
            double t11877 = Bg*c*t11817*t11765*1.0E4;
            double t11878 = Cg_4*t11817*t11872*(2.0/3.0);
            double t11879 = Cg_3*c*t11782*(1.0/3.0);
            double t11880 = t11877+t11878+t11879;
            double t11881 = 1.0/two_13;
            double t11882 = 1.0/pow(t11759,7.0/6.0);
            double t11883 = t11871*t11875;
            double t11884 = Cx+t11883;
            double t11885 = 1.0/t11884;
            double t11886 = sqrt(t11866);
            double t11894 = Cinf*Fg*Pg_1*t11882*t11885*t11886;
            double t11887 = exp(-t11894);
            double t11888 = t11760*t11761*(1.0/2.0);
            double t11889 = t11888+1.0/2.0;
            double t11890 = pow(t11889,5.0/3.0);
            double t11891 = Bg*t11817*t11872*(2.0/3.0);
            double t11892 = Cg_2*c*t11782*(1.0/3.0);
            double t11893 = t11891+t11892;
            double t11895 = -t11888+1.0/2.0;
            double t11896 = pow(t11895,5.0/3.0);
            double t11897 = t11890+t11896;
            double t11898 = 1.0/sqrt(t11897);
            double t11899 = t11761*(1.0/2.0);
            double t11900 = t11760*t11765*(1.0/2.0);
            double t11901 = t11900+t11899;
            double t11902 = t11871*t11893;
            double t11904 = t11880*t11875*t11876;
            double t11903 = t11902-t11904;
            double t11905 = 1.0/(t11884*t11884);
            double t11906 = Bg*t11817*t11818*(1.0E1/9.0);
            double t11907 = Cg_2*c*t11773*(4.0/9.0);
            double t11908 = t11906+t11907;
            double t11909 = t11871*t11908;
            double t11910 = Bg*c*t11763*t11817*2.0E4;
            double t11911 = Cg_4*t11817*t11818*(1.0E1/9.0);
            double t11912 = Cg_3*c*t11773*(4.0/9.0);
            double t11913 = t11910+t11911+t11912;
            double t11914 = t11880*t11880;
            double t11915 = 1.0/(t11870*t11870*t11870);
            double t11916 = t11914*t11915*t11875*2.0;
            double t11917 = t11916+t11909-t11913*t11875*t11876-t11880*t11893*t11876*2.0;
            double t11918 = 1.0/pow(t11759,1.3E1/6.0);
            double t11919 = Cinf*Fg*Pg_1*t11918*t11885*t11886*(7.0/6.0);
            double t11928 = Cinf*Fg*Pg_1*t11903*t11905*t11882*t11886;
            double t11920 = t11919-t11928;
            double t11921 = 1.0/pow(t11897,3.0/2.0);
            double t11922 = pow(t11895,2.0/3.0);
            double t11923 = t11900-t11899;
            double t11924 = pow(t11889,2.0/3.0);
            double t11925 = t11922*t11923*(5.0/3.0);
            double t11926 = t11901*t11922*(5.0/3.0);
            double t11929 = t11901*t11924*(5.0/3.0);
            double t11927 = t11926-t11929;
            v_rho_a_rho_b_[index] = t11861*(t11851+t11849+t11791*t11776*(t11831-t11850))+t11861*t11862-t11860* \
               t11857-t11857*t11859-t11759*(-t11861*(t11816-EcPld_1*t11822*t11809+t11800*t11810*t11776-t11810*t11791* \
               t11776+t11833*t11828*t11776-t11813*t11776*(t11816-EcFld_1*(t11803*t11803)*1.0/(t11806*t11806*t11806) \
               *2.0-EcPld_1*t11822*t11809+EcFld_1*t11807*(EcFld_3*c*t11773*(4.0/9.0)-EcFld_2*t11817*t11818*t11819* \
               (1.0/3.6E1)+EcFld_2*c*t11773*t11792*(2.0/9.0))))-t11857*(t11777+t11778+t11779+t11788-t11813*t11776* \
               (t11777+t11778+t11779+t11788-EcFhd_1*t11765*(1.0/3.0)-EcFhd_3*c*t11773*(5.0/9.0)-EcFhd_4*c*t11773* \
               (4.0/9.0)-EcFhd_3*c*t11772*t11773*(4.0/9.0))-t11800*t11776*t11787-t11828*t11776*t11848+t11791*t11776* \
               t11787)+c*t11860*t11782*t11838*(1.0/3.0)-c*t11852*t11773*t11838*(4.0/9.0)+c*t11862*t11782*t11838*(1.0/ \
               3.0)+c*t11773*t11855*t11838*(4.0/9.0)+c*t11782*t11838*t11859*(1.0/3.0)-t11852*t11817*t11853*t11818* \
               (1.0/9.0)+t11817*t11853*t11818*t11855*(1.0/9.0)+c*t11782*t11838*(t11851+t11849+t11833*t11791*t11776) \
               *(1.0/3.0))-c*t11852*t11782*t11838*(2.0/3.0)+c*t11782*t11855*t11838*(2.0/3.0)+t11903*t11773*t11881* \
               t11866*t11887*t11898*(8.0/3.0)+t11881*t11866*t11884*1.0/pow(t11759,1.0E1/3.0)*t11887*t11898*(2.8E1/ \
               9.0)+t11782*t11881*t11917*t11866*t11887*1.0/sqrt(t11890+pow(t11760*t11761*(-1.0/2.0)+1.0/2.0,5.0/3.0) \
               )-t11782*t11881*t11866*t11884*t11887*t11898*(Cinf*Fg*Pg_1*1.0/pow(t11759,1.9E1/6.0)*t11885*t11886* \
               (9.1E1/3.6E1)-Cinf*Fg*Pg_1*t11903*t11905*t11918*t11886*(7.0/3.0)-Cinf*Fg*Pg_1*t11905*t11917*t11882* \
               t11886+Cinf*Fg*Pg_1*(t11903*t11903)*t11882*1.0/(t11884*t11884*t11884)*t11886*2.0)+t11903*t11921*t11782* \
               t11881*t11866*t11887*(t11925-t11924*(t11900-t11899)*(5.0/3.0))*(1.0/2.0)+t11921*t11773*t11881*t11866* \
               t11884*t11887*(t11925-t11924*(t11900-t11899)*(5.0/3.0))*(2.0/3.0)+t11903*t11921*t11782*t11881*t11927* \
               t11866*t11887*(1.0/2.0)-t11920*t11903*t11782*t11881*t11866*t11887*t11898*2.0+t11921*t11773*t11881* \
               t11927*t11866*t11884*t11887*(2.0/3.0)-t11920*t11773*t11881*t11866*t11884*t11887*t11898*(8.0/3.0)-t11921* \
               t11782*t11881*t11866*t11884*t11887*(t11901*t11923*1.0/pow(t11889,1.0/3.0)*(1.0E1/9.0)-t11760*t11922* \
               t11763*(5.0/3.0)+t11760*t11924*t11763*(5.0/3.0)-t11901*1.0/pow(t11895,1.0/3.0)*(t11899-t11760*t11765* \
               (1.0/2.0))*(1.0E1/9.0))*(1.0/2.0)+(t11920*t11920)*t11782*t11881*t11866*t11884*t11887*t11898-t11920* \
               t11921*t11782*t11881*t11927*t11866*t11884*t11887*(1.0/2.0)+t11782*t11881*t11927*t11866*t11884*t11887* \
               1.0/pow(t11897,5.0/2.0)*(t11925-t11924*(t11900-t11899)*(5.0/3.0))*(3.0/4.0)-t11920*t11921*t11782*t11881* \
               t11866*t11884*t11887*(t11925-t11923*t11924*(5.0/3.0))*(1.0/2.0);
        } else if (rho_a[index] > cutoff_) {
            double t14069 = rho_a[index]+rho_b[index];
            double t14070 = 1.0/pow(t14069,4.0/3.0);
            double t14071 = 1.0/pow(t14069,1.0/3.0);
            double t14072 = c*t14071;
            double t14073 = 1.0/sqrt(t14072);
            double t14074 = sqrt(t14072);
            double t14075 = EcPld_3*c*t14070*(1.0/3.0);
            double t14076 = EcPld_2*c*t14070*t14073*(1.0/6.0);
            double t14077 = t14075+t14076;
            double t14078 = EcPld_2*t14074;
            double t14079 = EcPld_3*c*t14071;
            double t14080 = t14078+t14079+1.0;
            double t14081 = 1.0/(t14080*t14080);
            double t14082 = EcPld_1*t14081*t14077;
            double t14083 = t14072-1.0;
            double t14084 = ( (t14083 > 0.0) ?  1.0 : 0.0 ) ;
            double t14085 = pow(2.0,1.0/3.0);
            double t14086 = t14085*2.0;
            double t14087 = t14086-2.0;
            double t14088 = two_13*2.0;
            double t14089 = t14088-2.0;
            double t14090 = 1.0/t14089;
            double t14091 = EcFld_3*c*t14070*(1.0/3.0);
            double t14092 = EcFld_2*c*t14070*t14073*(1.0/6.0);
            double t14093 = t14091+t14092;
            double t14094 = EcFld_2*t14074;
            double t14095 = EcFld_3*c*t14071;
            double t14096 = t14094+t14095+1.0;
            double t14097 = t14077*t14077;
            double t14098 = 1.0/(t14080*t14080*t14080);
            double t14099 = EcPld_1*t14097*t14098*2.0;
            double t14100 = 1.0/pow(t14069,7.0/3.0);
            double t14101 = 1.0/(t14096*t14096);
            double t14102 = c*c;
            double t14103 = 1.0/pow(t14069,8.0/3.0);
            double t14104 = 1.0/pow(t14072,3.0/2.0);
            double t14105 = EcPld_3*c*t14100*(4.0/9.0);
            double t14106 = EcPld_2*c*t14100*t14073*(2.0/9.0);
            double t14107 = t14105+t14106-EcPld_2*t14102*t14103*t14104*(1.0/3.6E1);
            double t14108 = EcPld_1*t14107*t14081;
            double t14109 = 1.0/(t14069*t14069);
            double t14110 = EcPhd_1*t14109*(1.0/3.0);
            double t14111 = log(t14072);
            double t14112 = EcPhd_3*c*t14100*(5.0/9.0);
            double t14113 = EcPhd_4*c*t14100*(4.0/9.0);
            double t14114 = EcPhd_3*c*t14100*t14111*(4.0/9.0);
            double t14115 = 1.0/t14080;
            double t14116 = EcPld_1*t14115;
            double t14117 = t14082-EcFld_1*t14101*t14093;
            double t14118 = t14082-t14090*t14117*t14087;
            double t14119 = 0.0 ;
            double t14120 = EcPhd_1*t14111;
            double t14121 = 1.0/t14069;
            double t14122 = EcPhd_1*t14121*(1.0/3.0);
            double t14123 = EcPhd_3*c*t14070*(1.0/3.0);
            double t14124 = EcPhd_4*c*t14070*(1.0/3.0);
            double t14125 = EcPhd_3*c*t14111*t14070*(1.0/3.0);
            double t14126 = 1.0/t14096;
            double t14142 = EcFld_1*t14126;
            double t14127 = -t14142+t14116;
            double t14128 = t14116-t14090*t14127*t14087;
            double t14129 = 0.0 ;
            double t14130 = EcFhd_1*t14111;
            double t14131 = EcFhd_4*c*t14071;
            double t14132 = EcPhd_4*c*t14071;
            double t14133 = EcFhd_3*c*t14111*t14071;
            double t14134 = EcPhd_3*c*t14111*t14071;
            double t14135 = -t14072+1.0;
            double t14136 = ( (t14135 > 0.0) ?  1.0 : 0.0 ) ;
            double t14137 = t14122+t14123+t14124+t14125-EcFhd_1*t14121*(1.0/3.0)-EcFhd_3*c*t14070*(1.0/3.0)-EcFhd_4* \
               c*t14070*(1.0/3.0)-EcFhd_3*c*t14111*t14070*(1.0/3.0);
            double t14138 = t14122+t14123+t14124+t14125-t14090*t14137*t14087;
            double t14139 = EcFhd_2-EcPhd_2-t14120+t14130+t14131-t14132+t14133-t14134;
            double t14140 = t14090*t14139*t14087;
            double t14141 = EcPhd_2+t14120+t14140+t14132+t14134;
            double t14143 = 1.0/pow(t14069,2.0/3.0);
            double t14144 = Bg*c*t14102*t14121*1.0E4;
            double t14145 = Cg_4*t14102*t14143;
            double t14146 = Cg_3*c*t14071;
            double t14147 = t14144+t14145+t14146+1.0;
            double t14148 = 1.0/t14147;
            double t14149 = 1.0/pow(t14069,5.0/3.0);
            double t14150 = Bg*t14102*t14143;
            double t14151 = Cg_2*c*t14071;
            double t14152 = Cg_1+t14150+t14151;
            double t14153 = gamma_ab[index]*2.0;
            double t14154 = gamma_aa[index]+gamma_bb[index]+t14153;
            double t14155 = 1.0/two_13;
            double t14156 = 1.0/pow(t14069,7.0/6.0);
            double t14157 = t14152*t14148;
            double t14158 = Cx+t14157;
            double t14159 = 1.0/t14158;
            double t14160 = sqrt(t14154);
            double t14162 = Cinf*Fg*Pg_1*t14160*t14156*t14159;
            double t14161 = exp(-t14162);
            double t14163 = Bg*t14102*t14149*(2.0/3.0);
            double t14164 = Cg_2*c*t14070*(1.0/3.0);
            double t14165 = t14163+t14164;
            double t14166 = Bg*c*t14102*t14109*1.0E4;
            double t14167 = Cg_4*t14102*t14149*(2.0/3.0);
            double t14168 = Cg_3*c*t14070*(1.0/3.0);
            double t14169 = t14166+t14167+t14168;
            double t14170 = 1.0/(t14147*t14147);
            double t14171 = t14165*t14148;
            double t14186 = t14152*t14170*t14169;
            double t14172 = t14171-t14186;
            double t14173 = Bg*t14102*t14103*(1.0E1/9.0);
            double t14174 = Cg_2*c*t14100*(4.0/9.0);
            double t14175 = t14173+t14174;
            double t14176 = t14148*t14175;
            double t14177 = 1.0/(t14069*t14069*t14069);
            double t14178 = Bg*c*t14102*t14177*2.0E4;
            double t14179 = Cg_4*t14102*t14103*(1.0E1/9.0);
            double t14180 = Cg_3*c*t14100*(4.0/9.0);
            double t14181 = t14180+t14178+t14179;
            double t14182 = t14169*t14169;
            double t14183 = 1.0/(t14147*t14147*t14147);
            double t14184 = t14152*t14182*t14183*2.0;
            double t14185 = t14184+t14176-t14152*t14170*t14181-t14170*t14165*t14169*2.0;
            double t14187 = 1.0/(t14158*t14158);
            double t14188 = 1.0/pow(t14069,1.3E1/6.0);
            double t14189 = Cinf*Fg*Pg_1*t14160*t14159*t14188*(7.0/6.0);
            double t14191 = Cinf*Fg*Pg_1*t14160*t14172*t14156*t14187;
            double t14190 = -t14191+t14189;
            v_rho_a_rho_b_[index] = t14118*t14084*2.0-t14136*t14138*2.0+t14069*(t14136*(t14110+t14112+t14113+ \
               t14114-t14090*t14087*(t14110+t14112+t14113+t14114-EcFhd_1*t14109*(1.0/3.0)-EcFhd_3*c*t14100*(5.0/9.0) \
               -EcFhd_4*c*t14100*(4.0/9.0)-EcFhd_3*c*t14100*t14111*(4.0/9.0)))+t14084*(-t14108+t14099+t14090*t14087* \
               (t14108-t14099+EcFld_1*(t14093*t14093)*1.0/(t14096*t14096*t14096)*2.0-EcFld_1*t14101*(EcFld_3*c*t14100* \
               (4.0/9.0)-EcFld_2*t14102*t14103*t14104*(1.0/3.6E1)+EcFld_2*c*t14100*t14073*(2.0/9.0))))+c*t14100*t14119* \
               t14128*(4.0/9.0)-c*t14070*t14118*t14119*(2.0/3.0)-c*t14070*t14119*t14138*(2.0/3.0)-t14102*t14103*t14141* \
               t14129*(1.0/9.0)+t14102*t14103*t14128*t14129*(1.0/9.0)-c*t14100*t14119*(EcPhd_2+t14120+t14132+t14134+ \
               t14090*t14087*(EcFhd_2-EcPhd_2-t14120+t14130+t14131+t14133-EcPhd_4*c*t14071-EcPhd_3*c*t14111*t14071) \
               )*(4.0/9.0))+c*t14141*t14070*t14119*(2.0/3.0)-c*t14070*t14119*(t14116+t14090*t14087*(t14142-t14116) \
               )*(2.0/3.0)+t14161*t14154*t14155*t14158*1.0/pow(t14069,1.0E1/3.0)*(2.8E1/9.0)+t14100*t14161*t14154* \
               t14172*t14155*(8.0/3.0)+t14070*t14161*t14154*t14155*t14185-t14100*t14161*t14154*t14190*t14155*t14158* \
               (8.0/3.0)-t14070*t14161*t14154*t14172*t14190*t14155*2.0+t14070*t14161*t14154*(t14190*t14190)*t14155* \
               t14158-t14070*t14161*t14154*t14155*t14158*(Cinf*Fg*Pg_1*t14160*1.0/pow(t14069,1.9E1/6.0)*t14159*(9.1E1/ \
               3.6E1)-Cinf*Fg*Pg_1*t14160*t14156*t14185*t14187-Cinf*Fg*Pg_1*t14160*t14172*t14187*t14188*(7.0/3.0) \
               +Cinf*Fg*Pg_1*t14160*(t14172*t14172)*t14156*1.0/(t14158*t14158*t14158)*2.0);
        } else if (rho_b[index] > cutoff_) {
            double t13021 = rho_a[index]+rho_b[index];
            double t13022 = 1.0/pow(t13021,4.0/3.0);
            double t13023 = 1.0/pow(t13021,1.0/3.0);
            double t13024 = c*t13023;
            double t13025 = 1.0/sqrt(t13024);
            double t13026 = sqrt(t13024);
            double t13027 = EcPld_3*c*t13022*(1.0/3.0);
            double t13028 = EcPld_2*c*t13022*t13025*(1.0/6.0);
            double t13029 = t13027+t13028;
            double t13030 = EcPld_2*t13026;
            double t13031 = EcPld_3*c*t13023;
            double t13032 = t13030+t13031+1.0;
            double t13033 = 1.0/(t13032*t13032);
            double t13034 = EcPld_1*t13033*t13029;
            double t13035 = t13024-1.0;
            double t13036 = ( (t13035 > 0.0) ?  1.0 : 0.0 ) ;
            double t13037 = pow(2.0,1.0/3.0);
            double t13038 = t13037*2.0;
            double t13039 = t13038-2.0;
            double t13040 = two_13*2.0;
            double t13041 = t13040-2.0;
            double t13042 = 1.0/t13041;
            double t13043 = EcFld_3*c*t13022*(1.0/3.0);
            double t13044 = EcFld_2*c*t13022*t13025*(1.0/6.0);
            double t13045 = t13043+t13044;
            double t13046 = EcFld_2*t13026;
            double t13047 = EcFld_3*c*t13023;
            double t13048 = t13046+t13047+1.0;
            double t13049 = t13029*t13029;
            double t13050 = 1.0/(t13032*t13032*t13032);
            double t13051 = EcPld_1*t13050*t13049*2.0;
            double t13052 = 1.0/pow(t13021,7.0/3.0);
            double t13053 = 1.0/(t13048*t13048);
            double t13054 = c*c;
            double t13055 = 1.0/pow(t13021,8.0/3.0);
            double t13056 = 1.0/pow(t13024,3.0/2.0);
            double t13057 = EcPld_3*c*t13052*(4.0/9.0);
            double t13058 = EcPld_2*c*t13025*t13052*(2.0/9.0);
            double t13059 = t13057+t13058-EcPld_2*t13054*t13055*t13056*(1.0/3.6E1);
            double t13060 = EcPld_1*t13033*t13059;
            double t13061 = 1.0/(t13021*t13021);
            double t13062 = EcPhd_1*t13061*(1.0/3.0);
            double t13063 = log(t13024);
            double t13064 = EcPhd_3*c*t13052*(5.0/9.0);
            double t13065 = EcPhd_4*c*t13052*(4.0/9.0);
            double t13066 = EcPhd_3*c*t13052*t13063*(4.0/9.0);
            double t13067 = 1.0/t13032;
            double t13068 = EcPld_1*t13067;
            double t13069 = t13034-EcFld_1*t13053*t13045;
            double t13070 = t13034-t13042*t13039*t13069;
            double t13071 = 0.0 ;
            double t13072 = EcPhd_1*t13063;
            double t13073 = 1.0/t13021;
            double t13074 = EcPhd_1*t13073*(1.0/3.0);
            double t13075 = EcPhd_3*c*t13022*(1.0/3.0);
            double t13076 = EcPhd_4*c*t13022*(1.0/3.0);
            double t13077 = EcPhd_3*c*t13022*t13063*(1.0/3.0);
            double t13078 = 1.0/t13048;
            double t13094 = EcFld_1*t13078;
            double t13079 = -t13094+t13068;
            double t13080 = t13068-t13042*t13039*t13079;
            double t13081 = 0.0 ;
            double t13082 = EcFhd_1*t13063;
            double t13083 = EcFhd_4*c*t13023;
            double t13084 = EcPhd_4*c*t13023;
            double t13085 = EcFhd_3*c*t13023*t13063;
            double t13086 = EcPhd_3*c*t13023*t13063;
            double t13087 = EcFhd_2-EcPhd_2-t13072+t13082+t13083-t13084+t13085-t13086;
            double t13088 = t13042*t13039*t13087;
            double t13089 = EcPhd_2+t13072+t13084+t13086+t13088;
            double t13090 = -t13024+1.0;
            double t13091 = ( (t13090 > 0.0) ?  1.0 : 0.0 ) ;
            double t13092 = t13074+t13075+t13076+t13077-EcFhd_1*t13073*(1.0/3.0)-EcFhd_3*c*t13022*(1.0/3.0)-EcFhd_4* \
               c*t13022*(1.0/3.0)-EcFhd_3*c*t13022*t13063*(1.0/3.0);
            double t13093 = t13074+t13075+t13076+t13077-t13042*t13092*t13039;
            double t13095 = 1.0/pow(t13021,2.0/3.0);
            double t13096 = Bg*c*t13054*t13073*1.0E4;
            double t13097 = Cg_4*t13054*t13095;
            double t13098 = Cg_3*c*t13023;
            double t13099 = t13096+t13097+t13098+1.0;
            double t13100 = 1.0/t13099;
            double t13101 = 1.0/pow(t13021,5.0/3.0);
            double t13102 = Bg*t13054*t13095;
            double t13103 = Cg_2*c*t13023;
            double t13104 = Cg_1+t13102+t13103;
            double t13105 = gamma_ab[index]*2.0;
            double t13106 = gamma_aa[index]+gamma_bb[index]+t13105;
            double t13107 = 1.0/two_13;
            double t13108 = 1.0/pow(t13021,7.0/6.0);
            double t13109 = t13100*t13104;
            double t13110 = Cx+t13109;
            double t13111 = 1.0/t13110;
            double t13112 = sqrt(t13106);
            double t13114 = Cinf*Fg*Pg_1*t13111*t13112*t13108;
            double t13113 = exp(-t13114);
            double t13115 = Bg*t13101*t13054*(2.0/3.0);
            double t13116 = Cg_2*c*t13022*(1.0/3.0);
            double t13117 = t13115+t13116;
            double t13118 = Bg*c*t13061*t13054*1.0E4;
            double t13119 = Cg_4*t13101*t13054*(2.0/3.0);
            double t13120 = Cg_3*c*t13022*(1.0/3.0);
            double t13121 = t13120+t13118+t13119;
            double t13122 = 1.0/(t13099*t13099);
            double t13123 = t13100*t13117;
            double t13138 = t13121*t13104*t13122;
            double t13124 = t13123-t13138;
            double t13125 = Bg*t13054*t13055*(1.0E1/9.0);
            double t13126 = Cg_2*c*t13052*(4.0/9.0);
            double t13127 = t13125+t13126;
            double t13128 = t13100*t13127;
            double t13129 = 1.0/(t13021*t13021*t13021);
            double t13130 = Bg*c*t13054*t13129*2.0E4;
            double t13131 = Cg_4*t13054*t13055*(1.0E1/9.0);
            double t13132 = Cg_3*c*t13052*(4.0/9.0);
            double t13133 = t13130+t13131+t13132;
            double t13134 = t13121*t13121;
            double t13135 = 1.0/(t13099*t13099*t13099);
            double t13136 = t13104*t13134*t13135*2.0;
            double t13137 = t13136+t13128-t13104*t13122*t13133-t13121*t13122*t13117*2.0;
            double t13139 = 1.0/(t13110*t13110);
            double t13140 = 1.0/pow(t13021,1.3E1/6.0);
            double t13141 = Cinf*Fg*Pg_1*t13111*t13112*t13140*(7.0/6.0);
            double t13143 = Cinf*Fg*Pg_1*t13112*t13124*t13108*t13139;
            double t13142 = t13141-t13143;
            v_rho_a_rho_b_[index] = -t13021*(-t13091*(t13062+t13064+t13065+t13066-t13042*t13039*(t13062+t13064+ \
               t13065+t13066-EcFhd_1*t13061*(1.0/3.0)-EcFhd_3*c*t13052*(5.0/9.0)-EcFhd_4*c*t13052*(4.0/9.0)-EcFhd_3* \
               c*t13052*t13063*(4.0/9.0)))+t13036*(-t13051+t13060+t13042*t13039*(t13051-t13060-EcFld_1*(t13045*t13045) \
               *1.0/(t13048*t13048*t13048)*2.0+EcFld_1*t13053*(EcFld_3*c*t13052*(4.0/9.0)-EcFld_2*t13054*t13055*t13056* \
               (1.0/3.6E1)+EcFld_2*c*t13025*t13052*(2.0/9.0))))+c*t13022*t13070*t13071*(2.0/3.0)-c*t13052*t13071* \
               t13080*(4.0/9.0)+c*t13022*t13071*t13093*(2.0/3.0)+c*t13052*t13071*t13089*(4.0/9.0)-t13080*t13054*t13081* \
               t13055*(1.0/9.0)+t13054*t13081*t13055*t13089*(1.0/9.0))+t13070*t13036*2.0-t13091*t13093*2.0+c*t13022* \
               t13071*t13089*(2.0/3.0)-c*t13022*t13071*(t13068+t13042*t13039*(t13094-t13068))*(2.0/3.0)+t13110*1.0/ \
               pow(t13021,1.0E1/3.0)*t13113*t13106*t13107*(2.8E1/9.0)+t13113*t13052*t13106*t13124*t13107*(8.0/3.0) \
               +t13022*t13113*t13106*t13107*t13137-t13110*t13113*t13052*t13106*t13142*t13107*(8.0/3.0)-t13022*t13113* \
               t13106*t13124*t13142*t13107*2.0+t13110*t13022*t13113*t13106*(t13142*t13142)*t13107-t13110*t13022*t13113* \
               t13106*t13107*(Cinf*Fg*Pg_1*1.0/pow(t13021,1.9E1/6.0)*t13111*t13112*(9.1E1/3.6E1)-Cinf*Fg*Pg_1*t13112* \
               t13140*t13124*t13139*(7.0/3.0)-Cinf*Fg*Pg_1*t13112*t13108*t13137*t13139+Cinf*Fg*Pg_1*1.0/(t13110*t13110* \
               t13110)*t13112*(t13124*t13124)*t13108*2.0);
        } else {
            v_rho_a_rho_b_[index] = 0.0;
        } 

        //V_rho_b_rho_b
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t11931 = rho_a[index]+rho_b[index];
            double t11932 = 1.0/pow(t11931,4.0/3.0);
            double t11933 = 1.0/pow(t11931,1.0/3.0);
            double t11934 = c*t11933;
            double t11942 = 1.0/sqrt(t11934);
            double t11944 = EcPld_3*c*t11932*(1.0/3.0);
            double t11945 = EcPld_2*c*t11932*t11942*(1.0/6.0);
            double t11935 = t11944+t11945;
            double t11936 = 1.0/t11931;
            double t11937 = rho_a[index]-rho_b[index];
            double t11938 = t11936*t11937;
            double t11939 = 1.0/(t11931*t11931);
            double t11940 = t11937*t11939;
            double t11941 = t11940+t11936;
            double t11943 = sqrt(t11934);
            double t11946 = EcPld_2*t11943;
            double t11947 = EcPld_3*c*t11933;
            double t11948 = t11946+t11947+1.0;
            double t11949 = two_13*2.0;
            double t11950 = t11949-2.0;
            double t11951 = 1.0/t11950;
            double t11952 = t11938+1.0;
            double t11953 = -t11938+1.0;
            double t11954 = EcFld_3*c*t11932*(1.0/3.0);
            double t11955 = EcFld_2*c*t11932*t11942*(1.0/6.0);
            double t11956 = t11954+t11955;
            double t11957 = EcFld_2*t11943;
            double t11958 = EcFld_3*c*t11933;
            double t11959 = t11957+t11958+1.0;
            double t11960 = t11935*t11935;
            double t11961 = 1.0/(t11948*t11948*t11948);
            double t11962 = EcPld_1*t11960*t11961*2.0;
            double t11963 = 1.0/pow(t11931,7.0/3.0);
            double t11964 = 1.0/(t11959*t11959);
            double t11965 = c*c;
            double t11966 = 1.0/pow(t11931,8.0/3.0);
            double t11967 = 1.0/pow(t11934,3.0/2.0);
            double t11968 = 1.0/(t11948*t11948);
            double t11969 = EcPld_3*c*t11963*(4.0/9.0);
            double t11970 = EcPld_2*c*t11942*t11963*(2.0/9.0);
            double t11971 = t11970+t11969-EcPld_2*t11965*t11966*t11967*(1.0/3.6E1);
            double t11972 = pow(t11952,1.0/3.0);
            double t11973 = pow(t11953,1.0/3.0);
            double t11974 = t11939*2.0;
            double t11975 = 1.0/(t11931*t11931*t11931);
            double t11976 = t11937*t11975*2.0;
            double t11977 = t11974+t11976;
            double t11978 = t11941*t11941;
            double t11979 = t11972*t11977*(4.0/3.0);
            double t11980 = 1.0/pow(t11952,2.0/3.0);
            double t11981 = t11980*t11978*(4.0/9.0);
            double t11982 = 1.0/pow(t11953,2.0/3.0);
            double t11983 = t11982*t11978*(4.0/9.0);
            double t11984 = t11981+t11983+t11979-t11973*t11977*(4.0/3.0);
            double t11985 = log(t11934);
            double t11986 = pow(t11952,4.0/3.0);
            double t11987 = pow(t11953,4.0/3.0);
            double t11988 = t11986+t11987-2.0;
            double t11989 = EcPhd_1*t11939*(1.0/3.0);
            double t11990 = EcPhd_3*c*t11963*(5.0/9.0);
            double t11991 = EcPhd_4*c*t11963*(4.0/9.0);
            double t11992 = t11941*t11972*(4.0/3.0);
            double t12012 = t11941*t11973*(4.0/3.0);
            double t11993 = t11992-t12012;
            double t11994 = EcPhd_3*c*t11963*t11985*(4.0/9.0);
            double t11995 = t11934-1.0;
            double t11996 = 1.0/t11948;
            double t11997 = EcPld_1*t11996;
            double t11998 = 1.0/t11959;
            double t12018 = EcFld_1*t11998;
            double t11999 = t11997-t12018;
            double t12000 = EcFhd_1*t11985;
            double t12001 = EcPhd_1*t11985;
            double t12002 = EcFhd_4*c*t11933;
            double t12003 = EcFhd_3*c*t11933*t11985;
            double t12004 = 0.0 ;
            double t12005 = EcFhd_1*t11936*(1.0/3.0);
            double t12006 = EcPhd_1*t11936*(1.0/3.0);
            double t12007 = EcFhd_3*c*t11932*(1.0/3.0);
            double t12008 = EcFhd_4*c*t11932*(1.0/3.0);
            double t12009 = EcPhd_3*c*t11932*(1.0/3.0);
            double t12010 = EcPhd_4*c*t11932*(1.0/3.0);
            double t12011 = EcFhd_3*c*t11932*t11985*(1.0/3.0);
            double t12013 = EcPhd_4*c*t11933;
            double t12014 = EcPhd_3*c*t11933*t11985;
            double t12015 = EcPhd_3*c*t11932*t11985*(1.0/3.0);
            double t12016 = EcFld_1*t11964*t11956;
            double t12019 = EcPld_1*t11935*t11968;
            double t12017 = t12016-t12019;
            double t12033 = t11951*t11988*t11999;
            double t12020 = t11997-t12033;
            double t12021 = 0.0 ;
            double t12022 = EcFhd_2-EcPhd_2+t12000-t12001+t12002+t12003-t12013-t12014;
            double t12023 = EcPld_1*t11971*t11968;
            double t12024 = t12010-t12011-t12005+t12006+t12015-t12007-t12008+t12009;
            double t12025 = t11951*t11988*t12022;
            double t12026 = EcPhd_2+t12001+t12013+t12014+t12025;
            double t12027 = -t11934+1.0;
            double t12028 = ( (t12027 > 0.0) ?  1.0 : 0.0 ) ;
            double t12029 = t11951*t11993*t12022;
            double t12030 = t12010+t12006+t12015+t12009+t12029-t11951*t11988*t12024;
            double t12031 = ( (t11995 > 0.0) ?  1.0 : 0.0 ) ;
            double t12032 = t11951*t11988*t12017;
            double t12034 = 1.0/pow(t11931,2.0/3.0);
            double t12035 = gamma_ab[index]*2.0;
            double t12036 = gamma_aa[index]+gamma_bb[index]+t12035;
            double t12037 = Bg*c*t11936*t11965*1.0E4;
            double t12038 = Cg_4*t11965*t12034;
            double t12039 = Cg_3*c*t11933;
            double t12040 = t12037+t12038+t12039+1.0;
            double t12041 = 1.0/t12040;
            double t12042 = 1.0/pow(t11931,5.0/3.0);
            double t12043 = Bg*t11965*t12034;
            double t12044 = Cg_2*c*t11933;
            double t12045 = Cg_1+t12043+t12044;
            double t12046 = 1.0/(t12040*t12040);
            double t12047 = Bg*c*t11965*t11939*1.0E4;
            double t12048 = Cg_4*t11965*t12042*(2.0/3.0);
            double t12049 = Cg_3*c*t11932*(1.0/3.0);
            double t12050 = t12047+t12048+t12049;
            double t12051 = 1.0/two_13;
            double t12052 = 1.0/pow(t11931,7.0/6.0);
            double t12053 = t12041*t12045;
            double t12054 = Cx+t12053;
            double t12055 = 1.0/t12054;
            double t12056 = sqrt(t12036);
            double t12064 = Cinf*Fg*Pg_1*t12052*t12055*t12056;
            double t12057 = exp(-t12064);
            double t12058 = t11936*t11937*(1.0/2.0);
            double t12059 = t12058+1.0/2.0;
            double t12060 = pow(t12059,5.0/3.0);
            double t12061 = Bg*t11965*t12042*(2.0/3.0);
            double t12062 = Cg_2*c*t11932*(1.0/3.0);
            double t12063 = t12061+t12062;
            double t12065 = -t12058+1.0/2.0;
            double t12066 = pow(t12065,5.0/3.0);
            double t12067 = t12060+t12066;
            double t12068 = 1.0/sqrt(t12067);
            double t12069 = t11936*(1.0/2.0);
            double t12070 = t11937*t11939*(1.0/2.0);
            double t12071 = t12070+t12069;
            double t12077 = pow(t12065,2.0/3.0);
            double t12078 = pow(t12059,2.0/3.0);
            double t12098 = t12071*t12077*(5.0/3.0);
            double t12099 = t12071*t12078*(5.0/3.0);
            double t12072 = t12098-t12099;
            double t12073 = t12041*t12063;
            double t12075 = t12050*t12045*t12046;
            double t12074 = t12073-t12075;
            double t12076 = t12071*t12071;
            double t12079 = t11937*t11975;
            double t12080 = t11939+t12079;
            double t12081 = 1.0/(t12054*t12054);
            double t12082 = Bg*t11965*t11966*(1.0E1/9.0);
            double t12083 = Cg_2*c*t11963*(4.0/9.0);
            double t12084 = t12082+t12083;
            double t12085 = t12041*t12084;
            double t12086 = Bg*c*t11965*t11975*2.0E4;
            double t12087 = Cg_4*t11965*t11966*(1.0E1/9.0);
            double t12088 = Cg_3*c*t11963*(4.0/9.0);
            double t12089 = t12086+t12087+t12088;
            double t12090 = t12050*t12050;
            double t12091 = 1.0/(t12040*t12040*t12040);
            double t12092 = t12045*t12090*t12091*2.0;
            double t12093 = t12092+t12085-t12050*t12063*t12046*2.0-t12045*t12046*t12089;
            double t12094 = 1.0/pow(t11931,1.3E1/6.0);
            double t12095 = Cinf*Fg*Pg_1*t12055*t12056*t12094*(7.0/6.0);
            double t12100 = Cinf*Fg*Pg_1*t12052*t12081*t12056*t12074;
            double t12096 = -t12100+t12095;
            double t12097 = 1.0/pow(t12067,3.0/2.0);
            v_rho_b_rho_b_[index] = t12031*(t12032+t12019+t11951*t11993*(t11997-t12018))*2.0-t12030*t12028*2.0- \
               t11931*(t12031*(-t11962+t12023+t11951*t11988*(t11962-t12023-EcFld_1*(t11956*t11956)*1.0/(t11959*t11959* \
               t11959)*2.0+EcFld_1*t11964*(EcFld_3*c*t11963*(4.0/9.0)-EcFld_2*t11965*t11966*t11967*(1.0/3.6E1)+EcFld_2* \
               c*t11942*t11963*(2.0/9.0)))+t11951*t11984*t11999+t11951*t11993*t12017*2.0)-t12028*(t11990+t11991+t11994+ \
               t11989-t11951*t11988*(t11990+t11991+t11994+t11989-EcFhd_1*t11939*(1.0/3.0)-EcFhd_3*c*t11963*(5.0/9.0) \
               -EcFhd_4*c*t11963*(4.0/9.0)-EcFhd_3*c*t11963*t11985*(4.0/9.0))+t11951*t11984*t12022-t11951*t11993* \
               t12024*2.0)+c*t11932*t12030*t12004*(2.0/3.0)-c*t11963*t12020*t12004*(4.0/9.0)+c*t11963*t12004*t12026* \
               (4.0/9.0)-t11965*t11966*t12020*t12021*(1.0/9.0)+t11965*t11966*t12021*t12026*(1.0/9.0)+c*t11932*t12004* \
               (t12032+t12019+t11951*t11993*t11999)*(2.0/3.0))-c*t11932*t12020*t12004*(2.0/3.0)+c*t11932*t12004*t12026* \
               (2.0/3.0)+t11963*t12051*t12036*t12074*t12057*t12068*(8.0/3.0)+1.0/pow(t11931,1.0E1/3.0)*t12051*t12036* \
               t12054*t12057*t12068*(2.8E1/9.0)+t11932*t12051*t12036*t12057*t12093*1.0/sqrt(t12060+pow(t11936*t11937* \
               (-1.0/2.0)+1.0/2.0,5.0/3.0))+t11932*t12051*t12036*t12054*(t12072*t12072)*t12057*1.0/pow(t12067,5.0/ \
               2.0)*(3.0/4.0)-t11932*t12051*t12036*t12054*t12057*t12068*(Cinf*Fg*Pg_1*1.0/pow(t11931,1.9E1/6.0)*t12055* \
               t12056*(9.1E1/3.6E1)-Cinf*Fg*Pg_1*t12052*t12081*t12056*t12093-Cinf*Fg*Pg_1*t12081*t12056*t12074*t12094* \
               (7.0/3.0)+Cinf*Fg*Pg_1*t12052*1.0/(t12054*t12054*t12054)*t12056*(t12074*t12074)*2.0)-t11932*t12051* \
               t12036*t12054*t12057*t12097*(t12080*t12077*(-5.0/3.0)+t12080*t12078*(5.0/3.0)+1.0/pow(t12065,1.0/3.0) \
               *t12076*(1.0E1/9.0)+t12076*1.0/pow(t12059,1.0/3.0)*(1.0E1/9.0))*(1.0/2.0)+t11932*t12051*t12036*t12072* \
               t12074*t12057*t12097+t11963*t12051*t12036*t12054*t12072*t12057*t12097*(4.0/3.0)-t11932*t12051*t12036* \
               t12074*t12057*t12068*t12096*2.0-t11963*t12051*t12036*t12054*t12057*t12068*t12096*(8.0/3.0)+t11932* \
               t12051*t12036*t12054*t12057*t12068*(t12096*t12096)-t11932*t12051*t12036*t12054*t12072*t12057*t12096* \
               t12097;
        } else if (rho_a[index] > cutoff_) {
            double t14193 = rho_a[index]+rho_b[index];
            double t14194 = 1.0/pow(t14193,4.0/3.0);
            double t14195 = 1.0/pow(t14193,1.0/3.0);
            double t14196 = c*t14195;
            double t14197 = 1.0/sqrt(t14196);
            double t14198 = sqrt(t14196);
            double t14199 = EcPld_3*c*t14194*(1.0/3.0);
            double t14200 = EcPld_2*c*t14194*t14197*(1.0/6.0);
            double t14201 = t14200+t14199;
            double t14202 = EcPld_2*t14198;
            double t14203 = EcPld_3*c*t14195;
            double t14204 = t14202+t14203+1.0;
            double t14205 = 1.0/(t14204*t14204);
            double t14206 = EcPld_1*t14201*t14205;
            double t14207 = t14196-1.0;
            double t14208 = ( (t14207 > 0.0) ?  1.0 : 0.0 ) ;
            double t14209 = pow(2.0,1.0/3.0);
            double t14210 = t14209*2.0;
            double t14211 = t14210-2.0;
            double t14212 = two_13*2.0;
            double t14213 = t14212-2.0;
            double t14214 = 1.0/t14213;
            double t14215 = EcFld_3*c*t14194*(1.0/3.0);
            double t14216 = EcFld_2*c*t14194*t14197*(1.0/6.0);
            double t14217 = t14215+t14216;
            double t14218 = EcFld_2*t14198;
            double t14219 = EcFld_3*c*t14195;
            double t14220 = t14218+t14219+1.0;
            double t14221 = t14201*t14201;
            double t14222 = 1.0/(t14204*t14204*t14204);
            double t14223 = EcPld_1*t14221*t14222*2.0;
            double t14224 = 1.0/pow(t14193,7.0/3.0);
            double t14225 = 1.0/(t14220*t14220);
            double t14226 = c*c;
            double t14227 = 1.0/pow(t14193,8.0/3.0);
            double t14228 = 1.0/pow(t14196,3.0/2.0);
            double t14229 = EcPld_3*c*t14224*(4.0/9.0);
            double t14230 = EcPld_2*c*t14224*t14197*(2.0/9.0);
            double t14231 = t14230+t14229-EcPld_2*t14226*t14227*t14228*(1.0/3.6E1);
            double t14232 = EcPld_1*t14231*t14205;
            double t14233 = 1.0/(t14193*t14193);
            double t14234 = EcPhd_1*t14233*(1.0/3.0);
            double t14235 = log(t14196);
            double t14236 = EcPhd_3*c*t14224*(5.0/9.0);
            double t14237 = EcPhd_4*c*t14224*(4.0/9.0);
            double t14238 = EcPhd_3*c*t14224*t14235*(4.0/9.0);
            double t14239 = 1.0/t14204;
            double t14240 = EcPld_1*t14239;
            double t14241 = t14206-EcFld_1*t14225*t14217;
            double t14242 = t14206-t14211*t14214*t14241;
            double t14243 = 0.0 ;
            double t14244 = EcPhd_1*t14235;
            double t14245 = 1.0/t14193;
            double t14246 = EcPhd_1*t14245*(1.0/3.0);
            double t14247 = EcPhd_3*c*t14194*(1.0/3.0);
            double t14248 = EcPhd_4*c*t14194*(1.0/3.0);
            double t14249 = EcPhd_3*c*t14235*t14194*(1.0/3.0);
            double t14250 = 1.0/t14220;
            double t14266 = EcFld_1*t14250;
            double t14251 = t14240-t14266;
            double t14267 = t14211*t14214*t14251;
            double t14252 = t14240-t14267;
            double t14253 = 0.0 ;
            double t14254 = EcFhd_1*t14235;
            double t14255 = EcFhd_4*c*t14195;
            double t14256 = EcPhd_4*c*t14195;
            double t14257 = EcFhd_3*c*t14235*t14195;
            double t14258 = EcPhd_3*c*t14235*t14195;
            double t14259 = EcFhd_2-EcPhd_2-t14244+t14254+t14255-t14256+t14257-t14258;
            double t14260 = t14211*t14214*t14259;
            double t14261 = EcPhd_2+t14260+t14244+t14256+t14258;
            double t14262 = -t14196+1.0;
            double t14263 = ( (t14262 > 0.0) ?  1.0 : 0.0 ) ;
            double t14264 = t14246+t14247+t14248+t14249-EcFhd_1*t14245*(1.0/3.0)-EcFhd_3*c*t14194*(1.0/3.0)-EcFhd_4* \
               c*t14194*(1.0/3.0)-EcFhd_3*c*t14235*t14194*(1.0/3.0);
            double t14265 = t14246+t14247+t14248+t14249-t14211*t14214*t14264;
            double t14268 = 1.0/pow(t14193,2.0/3.0);
            double t14269 = Bg*c*t14226*t14245*1.0E4;
            double t14270 = Cg_4*t14226*t14268;
            double t14271 = Cg_3*c*t14195;
            double t14272 = t14270+t14271+t14269+1.0;
            double t14273 = 1.0/t14272;
            double t14274 = 1.0/pow(t14193,5.0/3.0);
            double t14275 = Bg*t14226*t14268;
            double t14276 = Cg_2*c*t14195;
            double t14277 = Cg_1+t14275+t14276;
            double t14278 = gamma_ab[index]*2.0;
            double t14279 = gamma_aa[index]+gamma_bb[index]+t14278;
            double t14280 = 1.0/two_13;
            double t14281 = 1.0/pow(t14193,7.0/6.0);
            double t14282 = t14273*t14277;
            double t14283 = Cx+t14282;
            double t14284 = 1.0/t14283;
            double t14285 = sqrt(t14279);
            double t14287 = Cinf*Fg*Pg_1*t14281*t14284*t14285;
            double t14286 = exp(-t14287);
            double t14288 = Bg*t14226*t14274*(2.0/3.0);
            double t14289 = Cg_2*c*t14194*(1.0/3.0);
            double t14290 = t14288+t14289;
            double t14291 = Bg*c*t14233*t14226*1.0E4;
            double t14292 = Cg_4*t14226*t14274*(2.0/3.0);
            double t14293 = Cg_3*c*t14194*(1.0/3.0);
            double t14294 = t14291+t14292+t14293;
            double t14295 = 1.0/(t14272*t14272);
            double t14296 = t14290*t14273;
            double t14311 = t14294*t14277*t14295;
            double t14297 = -t14311+t14296;
            double t14298 = Bg*t14226*t14227*(1.0E1/9.0);
            double t14299 = Cg_2*c*t14224*(4.0/9.0);
            double t14300 = t14298+t14299;
            double t14301 = t14300*t14273;
            double t14302 = 1.0/(t14193*t14193*t14193);
            double t14303 = Bg*c*t14302*t14226*2.0E4;
            double t14304 = Cg_4*t14226*t14227*(1.0E1/9.0);
            double t14305 = Cg_3*c*t14224*(4.0/9.0);
            double t14306 = t14303+t14304+t14305;
            double t14307 = t14294*t14294;
            double t14308 = 1.0/(t14272*t14272*t14272);
            double t14309 = t14307*t14308*t14277*2.0;
            double t14310 = t14301+t14309-t14306*t14277*t14295-t14290*t14294*t14295*2.0;
            double t14312 = 1.0/(t14283*t14283);
            double t14313 = 1.0/pow(t14193,1.3E1/6.0);
            double t14314 = Cinf*Fg*Pg_1*t14313*t14284*t14285*(7.0/6.0);
            double t14316 = Cinf*Fg*Pg_1*t14312*t14281*t14285*t14297;
            double t14315 = t14314-t14316;
            v_rho_b_rho_b_[index] = -t14193*(-t14263*(t14234+t14236+t14237+t14238-t14211*t14214*(t14234+t14236+ \
               t14237+t14238-EcFhd_1*t14233*(1.0/3.0)-EcFhd_3*c*t14224*(5.0/9.0)-EcFhd_4*c*t14224*(4.0/9.0)-EcFhd_3* \
               c*t14224*t14235*(4.0/9.0)))+t14208*(-t14223+t14232+t14211*t14214*(t14223-t14232-EcFld_1*1.0/(t14220* \
               t14220*t14220)*(t14217*t14217)*2.0+EcFld_1*t14225*(EcFld_3*c*t14224*(4.0/9.0)-EcFld_2*t14226*t14227* \
               t14228*(1.0/3.6E1)+EcFld_2*c*t14224*t14197*(2.0/9.0))))-c*t14224*t14243*t14252*(4.0/9.0)+c*t14224* \
               t14243*t14261*(4.0/9.0)+c*t14242*t14243*t14194*(2.0/3.0)+c*t14243*t14265*t14194*(2.0/3.0)-t14252*t14226* \
               t14253*t14227*(1.0/9.0)+t14261*t14226*t14253*t14227*(1.0/9.0))+t14242*t14208*2.0-t14263*t14265*2.0- \
               c*t14243*t14252*t14194*(2.0/3.0)+c*t14243*t14261*t14194*(2.0/3.0)+t14280*1.0/pow(t14193,1.0E1/3.0) \
               *t14283*t14286*t14279*(2.8E1/9.0)+t14310*t14280*t14194*t14286*t14279+t14224*t14280*t14286*t14279*t14297* \
               (8.0/3.0)-t14224*t14315*t14280*t14283*t14286*t14279*(8.0/3.0)-t14315*t14280*t14194*t14286*t14279*t14297* \
               2.0+(t14315*t14315)*t14280*t14283*t14194*t14286*t14279-t14280*t14283*t14194*t14286*t14279*(Cinf*Fg* \
               Pg_1*1.0/pow(t14193,1.9E1/6.0)*t14284*t14285*(9.1E1/3.6E1)-Cinf*Fg*Pg_1*t14310*t14312*t14281*t14285- \
               Cinf*Fg*Pg_1*t14312*t14313*t14285*t14297*(7.0/3.0)+Cinf*Fg*Pg_1*t14281*1.0/(t14283*t14283*t14283)* \
               t14285*(t14297*t14297)*2.0);
        } else if (rho_b[index] > cutoff_) {
            double t13145 = rho_a[index]+rho_b[index];
            double t13146 = 1.0/pow(t13145,4.0/3.0);
            double t13147 = 1.0/pow(t13145,1.0/3.0);
            double t13148 = c*t13147;
            double t13149 = 1.0/sqrt(t13148);
            double t13150 = sqrt(t13148);
            double t13151 = EcPld_3*c*t13146*(1.0/3.0);
            double t13152 = EcPld_2*c*t13146*t13149*(1.0/6.0);
            double t13153 = t13151+t13152;
            double t13154 = EcPld_2*t13150;
            double t13155 = EcPld_3*c*t13147;
            double t13156 = t13154+t13155+1.0;
            double t13157 = 1.0/(t13156*t13156);
            double t13158 = EcPld_1*t13153*t13157;
            double t13159 = t13148-1.0;
            double t13160 = ( (t13159 > 0.0) ?  1.0 : 0.0 ) ;
            double t13161 = pow(2.0,1.0/3.0);
            double t13162 = t13161*2.0;
            double t13163 = t13162-2.0;
            double t13164 = two_13*2.0;
            double t13165 = t13164-2.0;
            double t13166 = 1.0/t13165;
            double t13167 = EcFld_3*c*t13146*(1.0/3.0);
            double t13168 = EcFld_2*c*t13146*t13149*(1.0/6.0);
            double t13169 = t13167+t13168;
            double t13170 = EcFld_2*t13150;
            double t13171 = EcFld_3*c*t13147;
            double t13172 = t13170+t13171+1.0;
            double t13173 = t13153*t13153;
            double t13174 = 1.0/(t13156*t13156*t13156);
            double t13175 = EcPld_1*t13173*t13174*2.0;
            double t13176 = 1.0/pow(t13145,7.0/3.0);
            double t13177 = 1.0/(t13172*t13172);
            double t13178 = c*c;
            double t13179 = 1.0/pow(t13145,8.0/3.0);
            double t13180 = 1.0/pow(t13148,3.0/2.0);
            double t13181 = EcPld_3*c*t13176*(4.0/9.0);
            double t13182 = EcPld_2*c*t13149*t13176*(2.0/9.0);
            double t13183 = t13181+t13182-EcPld_2*t13180*t13178*t13179*(1.0/3.6E1);
            double t13184 = EcPld_1*t13183*t13157;
            double t13185 = 1.0/(t13145*t13145);
            double t13186 = EcPhd_1*t13185*(1.0/3.0);
            double t13187 = log(t13148);
            double t13188 = EcPhd_3*c*t13176*(5.0/9.0);
            double t13189 = EcPhd_4*c*t13176*(4.0/9.0);
            double t13190 = EcPhd_3*c*t13176*t13187*(4.0/9.0);
            double t13191 = 1.0/t13156;
            double t13192 = EcPld_1*t13191;
            double t13193 = t13158-EcFld_1*t13177*t13169;
            double t13194 = t13158-t13163*t13166*t13193;
            double t13195 = 0.0 ;
            double t13196 = EcPhd_1*t13187;
            double t13197 = 1.0/t13145;
            double t13198 = EcPhd_1*t13197*(1.0/3.0);
            double t13199 = EcPhd_3*c*t13146*(1.0/3.0);
            double t13200 = EcPhd_4*c*t13146*(1.0/3.0);
            double t13201 = EcPhd_3*c*t13146*t13187*(1.0/3.0);
            double t13202 = 1.0/t13172;
            double t13218 = EcFld_1*t13202;
            double t13203 = -t13218+t13192;
            double t13204 = t13192-t13203*t13163*t13166;
            double t13205 = 0.0 ;
            double t13206 = EcFhd_1*t13187;
            double t13207 = EcFhd_4*c*t13147;
            double t13208 = EcPhd_4*c*t13147;
            double t13209 = EcFhd_3*c*t13147*t13187;
            double t13210 = EcPhd_3*c*t13147*t13187;
            double t13211 = EcFhd_2-EcPhd_2-t13210+t13206+t13207-t13208+t13209-t13196;
            double t13212 = t13211*t13163*t13166;
            double t13213 = EcPhd_2+t13210+t13212+t13208+t13196;
            double t13214 = -t13148+1.0;
            double t13215 = ( (t13214 > 0.0) ?  1.0 : 0.0 ) ;
            double t13216 = t13200+t13201+t13198+t13199-EcFhd_1*t13197*(1.0/3.0)-EcFhd_3*c*t13146*(1.0/3.0)-EcFhd_4* \
               c*t13146*(1.0/3.0)-EcFhd_3*c*t13146*t13187*(1.0/3.0);
            double t13217 = t13200+t13201+t13198+t13199-t13216*t13163*t13166;
            double t13219 = 1.0/pow(t13145,2.0/3.0);
            double t13220 = Bg*c*t13178*t13197*1.0E4;
            double t13221 = Cg_4*t13219*t13178;
            double t13222 = Cg_3*c*t13147;
            double t13223 = t13220+t13221+t13222+1.0;
            double t13224 = 1.0/t13223;
            double t13225 = 1.0/pow(t13145,5.0/3.0);
            double t13226 = Bg*t13219*t13178;
            double t13227 = Cg_2*c*t13147;
            double t13228 = Cg_1+t13226+t13227;
            double t13229 = gamma_ab[index]*2.0;
            double t13230 = gamma_aa[index]+gamma_bb[index]+t13229;
            double t13231 = 1.0/two_13;
            double t13232 = 1.0/pow(t13145,7.0/6.0);
            double t13233 = t13224*t13228;
            double t13234 = Cx+t13233;
            double t13235 = 1.0/t13234;
            double t13236 = sqrt(t13230);
            double t13238 = Cinf*Fg*Pg_1*t13232*t13235*t13236;
            double t13237 = exp(-t13238);
            double t13239 = Bg*t13225*t13178*(2.0/3.0);
            double t13240 = Cg_2*c*t13146*(1.0/3.0);
            double t13241 = t13240+t13239;
            double t13242 = Bg*c*t13185*t13178*1.0E4;
            double t13243 = Cg_4*t13225*t13178*(2.0/3.0);
            double t13244 = Cg_3*c*t13146*(1.0/3.0);
            double t13245 = t13242+t13243+t13244;
            double t13246 = 1.0/(t13223*t13223);
            double t13247 = t13241*t13224;
            double t13262 = t13245*t13228*t13246;
            double t13248 = -t13262+t13247;
            double t13249 = Bg*t13178*t13179*(1.0E1/9.0);
            double t13250 = Cg_2*c*t13176*(4.0/9.0);
            double t13251 = t13250+t13249;
            double t13252 = t13224*t13251;
            double t13253 = 1.0/(t13145*t13145*t13145);
            double t13254 = Bg*c*t13253*t13178*2.0E4;
            double t13255 = Cg_4*t13178*t13179*(1.0E1/9.0);
            double t13256 = Cg_3*c*t13176*(4.0/9.0);
            double t13257 = t13254+t13255+t13256;
            double t13258 = t13245*t13245;
            double t13259 = 1.0/(t13223*t13223*t13223);
            double t13260 = t13228*t13258*t13259*2.0;
            double t13261 = t13260+t13252-t13241*t13245*t13246*2.0-t13228*t13246*t13257;
            double t13263 = 1.0/(t13234*t13234);
            double t13264 = 1.0/pow(t13145,1.3E1/6.0);
            double t13265 = Cinf*Fg*Pg_1*t13235*t13236*t13264*(7.0/6.0);
            double t13267 = Cinf*Fg*Pg_1*t13232*t13236*t13263*t13248;
            double t13266 = t13265-t13267;
            v_rho_b_rho_b_[index] = -t13145*(-t13215*(t13190+t13186+t13188+t13189-t13163*t13166*(t13190+t13186+ \
               t13188+t13189-EcFhd_1*t13185*(1.0/3.0)-EcFhd_3*c*t13176*(5.0/9.0)-EcFhd_4*c*t13176*(4.0/9.0)-EcFhd_3* \
               c*t13176*t13187*(4.0/9.0)))+t13160*(-t13175+t13184+t13163*t13166*(t13175-t13184-EcFld_1*1.0/(t13172* \
               t13172*t13172)*(t13169*t13169)*2.0+EcFld_1*t13177*(EcFld_3*c*t13176*(4.0/9.0)-EcFld_2*t13180*t13178* \
               t13179*(1.0/3.6E1)+EcFld_2*c*t13149*t13176*(2.0/9.0))))-c*t13204*t13176*t13195*(4.0/9.0)+c*t13213* \
               t13176*t13195*(4.0/9.0)+c*t13217*t13146*t13195*(2.0/3.0)+c*t13146*t13194*t13195*(2.0/3.0)-t13204*t13205* \
               t13178*t13179*(1.0/9.0)+t13213*t13205*t13178*t13179*(1.0/9.0))-t13215*t13217*2.0+t13160*t13194*2.0+ \
               c*t13213*t13146*t13195*(2.0/3.0)-c*t13146*t13195*(t13192+t13163*t13166*(t13218-t13192))*(2.0/3.0)+ \
               t13230*t13231*t13234*1.0/pow(t13145,1.0E1/3.0)*t13237*(2.8E1/9.0)+t13230*t13231*t13261*t13146*t13237+ \
               t13230*t13231*t13237*t13176*t13248*(8.0/3.0)-t13230*t13231*t13234*t13237*t13176*t13266*(8.0/3.0)-t13230* \
               t13231*t13146*t13237*t13248*t13266*2.0+t13230*t13231*t13234*t13146*t13237*(t13266*t13266)-t13230*t13231* \
               t13234*t13146*t13237*(Cinf*Fg*Pg_1*1.0/pow(t13145,1.9E1/6.0)*t13235*t13236*(9.1E1/3.6E1)-Cinf*Fg*Pg_1* \
               t13232*t13261*t13236*t13263-Cinf*Fg*Pg_1*t13236*t13263*t13264*t13248*(7.0/3.0)+Cinf*Fg*Pg_1*t13232* \
               1.0/(t13234*t13234*t13234)*t13236*(t13248*t13248)*2.0);
        } else {
            v_rho_b_rho_b_[index] = 0.0;
        } 

        if (is_gga_) {

            //V_rho_a_gamma_aa
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t12102 = rho_a[index]+rho_b[index];
                double t12103 = c*c;
                double t12104 = 1.0/pow(t12102,2.0/3.0);
                double t12105 = 1.0/pow(t12102,1.0/3.0);
                double t12106 = 1.0/t12102;
                double t12107 = rho_a[index]-rho_b[index];
                double t12108 = 1.0/pow(t12102,4.0/3.0);
                double t12109 = Bg*c*t12103*t12106*1.0E4;
                double t12110 = Cg_4*t12103*t12104;
                double t12111 = Cg_3*c*t12105;
                double t12112 = t12110+t12111+t12109+1.0;
                double t12113 = 1.0/t12112;
                double t12114 = 1.0/pow(t12102,5.0/3.0);
                double t12115 = Bg*t12103*t12104;
                double t12116 = Cg_2*c*t12105;
                double t12117 = Cg_1+t12115+t12116;
                double t12118 = 1.0/two_13;
                double t12119 = 1.0/pow(t12102,7.0/6.0);
                double t12120 = t12113*t12117;
                double t12121 = Cx+t12120;
                double t12122 = 1.0/t12121;
                double t12123 = gamma_ab[index]*2.0;
                double t12124 = gamma_aa[index]+gamma_bb[index]+t12123;
                double t12125 = sqrt(t12124);
                double t12130 = Cinf*Fg*Pg_1*t12122*t12125*t12119;
                double t12126 = exp(-t12130);
                double t12127 = t12106*t12107*(1.0/2.0);
                double t12128 = t12127+1.0/2.0;
                double t12129 = pow(t12128,5.0/3.0);
                double t12131 = -t12127+1.0/2.0;
                double t12132 = pow(t12131,5.0/3.0);
                double t12133 = t12132+t12129;
                double t12134 = 1.0/sqrt(t12133);
                double t12135 = Bg*t12103*t12114*(2.0/3.0);
                double t12136 = Cg_2*c*t12108*(1.0/3.0);
                double t12137 = t12135+t12136;
                double t12138 = t12113*t12137;
                double t12139 = 1.0/(t12102*t12102);
                double t12140 = Bg*c*t12103*t12139*1.0E4;
                double t12141 = Cg_4*t12103*t12114*(2.0/3.0);
                double t12142 = Cg_3*c*t12108*(1.0/3.0);
                double t12143 = t12140+t12141+t12142;
                double t12144 = 1.0/(t12112*t12112);
                double t12149 = t12143*t12117*t12144;
                double t12145 = t12138-t12149;
                double t12146 = t12106*(1.0/2.0);
                double t12157 = t12107*t12139*(1.0/2.0);
                double t12147 = t12146-t12157;
                double t12148 = 1.0/pow(t12102,1.3E1/6.0);
                double t12150 = 1.0/(t12121*t12121);
                double t12151 = 1.0/sqrt(t12124);
                double t12152 = Cinf*Fg*Pg_1*t12122*t12125*t12148*(7.0/6.0);
                double t12153 = t12152-Cinf*Fg*Pg_1*t12150*t12125*t12145*t12119;
                double t12154 = 1.0/pow(t12133,3.0/2.0);
                double t12155 = 1.0/pow(t12102,5.0/2.0);
                double t12156 = pow(t12131,2.0/3.0);
                double t12158 = t12147*t12156*(5.0/3.0);
                double t12159 = pow(t12128,2.0/3.0);
                double t12160 = t12158-t12147*t12159*(5.0/3.0);
                v_rho_a_gamma_aa_[index] = 1.0/pow(t12102,7.0/3.0)*t12121*t12134*t12126*t12118*(-4.0/3.0)-t12108* \
                   t12126*t12118*t12145*1.0/sqrt(t12129+pow(t12106*t12107*(-1.0/2.0)+1.0/2.0,5.0/3.0))+t12121*t12160* \
                   t12108*t12126*t12118*t12154*(1.0/2.0)+t12121*t12134*t12108*t12126*t12153*t12118+t12121*t12124*t12134* \
                   t12108*t12126*t12118*(Cinf*Fg*Pg_1*t12122*t12151*t12148*(7.0/1.2E1)-Cinf*Fg*Pg_1*t12150*t12151*t12145* \
                   t12119*(1.0/2.0))+Cinf*Fg*Pg_1*1.0/pow(t12102,7.0/2.0)*t12125*t12134*t12126*t12118*(2.0/3.0)-Cinf* \
                   Fg*Pg_1*t12160*t12125*t12126*t12118*t12154*t12155*(1.0/4.0)-Cinf*Fg*Pg_1*t12125*t12134*t12126*t12153* \
                   t12118*t12155*(1.0/2.0)+Cinf*Fg*Pg_1*t12122*t12125*t12134*t12126*t12118*t12145*t12155*(1.0/2.0);
            } else if (rho_a[index] > cutoff_) {
                double t14318 = rho_a[index]+rho_b[index];
                double t14319 = c*c;
                double t14320 = 1.0/pow(t14318,2.0/3.0);
                double t14321 = 1.0/pow(t14318,1.0/3.0);
                double t14322 = 1.0/pow(t14318,4.0/3.0);
                double t14323 = 1.0/t14318;
                double t14324 = Bg*c*t14323*t14319*1.0E4;
                double t14325 = Cg_4*t14320*t14319;
                double t14326 = Cg_3*c*t14321;
                double t14327 = t14324+t14325+t14326+1.0;
                double t14328 = 1.0/t14327;
                double t14329 = 1.0/pow(t14318,5.0/3.0);
                double t14330 = Bg*t14320*t14319;
                double t14331 = Cg_2*c*t14321;
                double t14332 = Cg_1+t14330+t14331;
                double t14333 = 1.0/two_13;
                double t14334 = 1.0/pow(t14318,7.0/6.0);
                double t14335 = t14332*t14328;
                double t14336 = Cx+t14335;
                double t14337 = 1.0/t14336;
                double t14338 = gamma_ab[index]*2.0;
                double t14339 = gamma_aa[index]+gamma_bb[index]+t14338;
                double t14340 = sqrt(t14339);
                double t14342 = Cinf*Fg*Pg_1*t14340*t14334*t14337;
                double t14341 = exp(-t14342);
                double t14343 = Bg*t14319*t14329*(2.0/3.0);
                double t14344 = Cg_2*c*t14322*(1.0/3.0);
                double t14345 = t14343+t14344;
                double t14346 = t14345*t14328;
                double t14347 = 1.0/(t14318*t14318);
                double t14348 = Bg*c*t14319*t14347*1.0E4;
                double t14349 = Cg_4*t14319*t14329*(2.0/3.0);
                double t14350 = Cg_3*c*t14322*(1.0/3.0);
                double t14351 = t14350+t14348+t14349;
                double t14352 = 1.0/(t14327*t14327);
                double t14355 = t14332*t14351*t14352;
                double t14353 = t14346-t14355;
                double t14354 = 1.0/pow(t14318,1.3E1/6.0);
                double t14356 = 1.0/(t14336*t14336);
                double t14357 = 1.0/sqrt(t14339);
                double t14358 = Cinf*Fg*Pg_1*t14340*t14354*t14337*(7.0/6.0);
                double t14359 = t14358-Cinf*Fg*Pg_1*t14340*t14334*t14353*t14356;
                double t14360 = 1.0/pow(t14318,5.0/2.0);
                v_rho_a_gamma_aa_[index] = -t14322*t14341*t14333*t14353-t14341*t14333*1.0/pow(t14318,7.0/3.0)*t14336* \
                   (4.0/3.0)+t14322*t14341*t14333*t14336*t14359+t14322*t14341*t14333*t14336*t14339*(Cinf*Fg*Pg_1*t14354* \
                   t14337*t14357*(7.0/1.2E1)-Cinf*Fg*Pg_1*t14334*t14353*t14356*t14357*(1.0/2.0))+Cinf*Fg*Pg_1*t14340* \
                   t14341*t14333*1.0/pow(t14318,7.0/2.0)*(2.0/3.0)-Cinf*Fg*Pg_1*t14340*t14341*t14333*t14360*t14359*(1.0/ \
                   2.0)+Cinf*Fg*Pg_1*t14340*t14341*t14333*t14360*t14353*t14337*(1.0/2.0);
            } else if (rho_b[index] > cutoff_) {
                double t13269 = rho_a[index]+rho_b[index];
                double t13270 = c*c;
                double t13271 = 1.0/pow(t13269,2.0/3.0);
                double t13272 = 1.0/pow(t13269,1.0/3.0);
                double t13273 = 1.0/pow(t13269,4.0/3.0);
                double t13274 = 1.0/t13269;
                double t13275 = Bg*c*t13270*t13274*1.0E4;
                double t13276 = Cg_4*t13270*t13271;
                double t13277 = Cg_3*c*t13272;
                double t13278 = t13275+t13276+t13277+1.0;
                double t13279 = 1.0/t13278;
                double t13280 = 1.0/pow(t13269,5.0/3.0);
                double t13281 = Bg*t13270*t13271;
                double t13282 = Cg_2*c*t13272;
                double t13283 = Cg_1+t13281+t13282;
                double t13284 = 1.0/two_13;
                double t13285 = 1.0/pow(t13269,7.0/6.0);
                double t13286 = t13283*t13279;
                double t13287 = Cx+t13286;
                double t13288 = 1.0/t13287;
                double t13289 = gamma_ab[index]*2.0;
                double t13290 = gamma_aa[index]+gamma_bb[index]+t13289;
                double t13291 = sqrt(t13290);
                double t13293 = Cinf*Fg*Pg_1*t13291*t13285*t13288;
                double t13292 = exp(-t13293);
                double t13294 = Bg*t13270*t13280*(2.0/3.0);
                double t13295 = Cg_2*c*t13273*(1.0/3.0);
                double t13296 = t13294+t13295;
                double t13297 = t13296*t13279;
                double t13298 = 1.0/(t13269*t13269);
                double t13299 = Bg*c*t13270*t13298*1.0E4;
                double t13300 = Cg_4*t13270*t13280*(2.0/3.0);
                double t13301 = Cg_3*c*t13273*(1.0/3.0);
                double t13302 = t13300+t13301+t13299;
                double t13303 = 1.0/(t13278*t13278);
                double t13306 = t13302*t13303*t13283;
                double t13304 = -t13306+t13297;
                double t13305 = 1.0/pow(t13269,1.3E1/6.0);
                double t13307 = 1.0/(t13287*t13287);
                double t13308 = 1.0/sqrt(t13290);
                double t13309 = Cinf*Fg*Pg_1*t13305*t13291*t13288*(7.0/6.0);
                double t13310 = t13309-Cinf*Fg*Pg_1*t13304*t13307*t13291*t13285;
                double t13311 = 1.0/pow(t13269,5.0/2.0);
                v_rho_a_gamma_aa_[index] = -t13304*t13273*t13292*t13284-t13292*t13284*1.0/pow(t13269,7.0/3.0)*t13287* \
                   (4.0/3.0)+t13310*t13273*t13292*t13284*t13287+t13290*t13273*t13292*t13284*t13287*(Cinf*Fg*Pg_1*t13305* \
                   t13308*t13288*(7.0/1.2E1)-Cinf*Fg*Pg_1*t13304*t13307*t13308*t13285*(1.0/2.0))+Cinf*Fg*Pg_1*t13291* \
                   t13292*t13284*1.0/pow(t13269,7.0/2.0)*(2.0/3.0)-Cinf*Fg*Pg_1*t13310*t13311*t13291*t13292*t13284*(1.0/ \
                   2.0)+Cinf*Fg*Pg_1*t13311*t13304*t13291*t13292*t13284*t13288*(1.0/2.0);
            } else {
                v_rho_a_gamma_aa_[index] = 0.0;
            } 

            //V_rho_a_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t12162 = rho_a[index]+rho_b[index];
                double t12163 = c*c;
                double t12164 = 1.0/pow(t12162,2.0/3.0);
                double t12165 = 1.0/pow(t12162,1.0/3.0);
                double t12166 = 1.0/t12162;
                double t12167 = rho_a[index]-rho_b[index];
                double t12168 = 1.0/pow(t12162,4.0/3.0);
                double t12169 = Bg*c*t12163*t12166*1.0E4;
                double t12170 = Cg_4*t12163*t12164;
                double t12171 = Cg_3*c*t12165;
                double t12172 = t12170+t12171+t12169+1.0;
                double t12173 = 1.0/t12172;
                double t12174 = 1.0/pow(t12162,5.0/3.0);
                double t12175 = Bg*t12163*t12164;
                double t12176 = Cg_2*c*t12165;
                double t12177 = Cg_1+t12175+t12176;
                double t12178 = 1.0/two_13;
                double t12179 = 1.0/pow(t12162,7.0/6.0);
                double t12180 = t12173*t12177;
                double t12181 = Cx+t12180;
                double t12182 = 1.0/t12181;
                double t12183 = gamma_ab[index]*2.0;
                double t12184 = gamma_aa[index]+gamma_bb[index]+t12183;
                double t12185 = sqrt(t12184);
                double t12190 = Cinf*Fg*Pg_1*t12182*t12185*t12179;
                double t12186 = exp(-t12190);
                double t12187 = t12166*t12167*(1.0/2.0);
                double t12188 = t12187+1.0/2.0;
                double t12189 = pow(t12188,5.0/3.0);
                double t12191 = -t12187+1.0/2.0;
                double t12192 = pow(t12191,5.0/3.0);
                double t12193 = t12192+t12189;
                double t12194 = 1.0/sqrt(t12193);
                double t12195 = Bg*t12163*t12174*(2.0/3.0);
                double t12196 = Cg_2*c*t12168*(1.0/3.0);
                double t12197 = t12195+t12196;
                double t12198 = t12173*t12197;
                double t12199 = 1.0/(t12162*t12162);
                double t12200 = Bg*c*t12163*t12199*1.0E4;
                double t12201 = Cg_4*t12163*t12174*(2.0/3.0);
                double t12202 = Cg_3*c*t12168*(1.0/3.0);
                double t12203 = t12200+t12201+t12202;
                double t12204 = 1.0/(t12172*t12172);
                double t12209 = t12203*t12204*t12177;
                double t12205 = -t12209+t12198;
                double t12206 = t12166*(1.0/2.0);
                double t12217 = t12167*t12199*(1.0/2.0);
                double t12207 = t12206-t12217;
                double t12208 = 1.0/pow(t12162,1.3E1/6.0);
                double t12210 = 1.0/(t12181*t12181);
                double t12211 = 1.0/sqrt(t12184);
                double t12212 = Cinf*Fg*Pg_1*t12208*t12182*t12185*(7.0/6.0);
                double t12213 = t12212-Cinf*Fg*Pg_1*t12210*t12205*t12185*t12179;
                double t12214 = 1.0/pow(t12193,3.0/2.0);
                double t12215 = 1.0/pow(t12162,5.0/2.0);
                double t12216 = pow(t12191,2.0/3.0);
                double t12218 = t12207*t12216*(5.0/3.0);
                double t12219 = pow(t12188,2.0/3.0);
                double t12220 = t12218-t12207*t12219*(5.0/3.0);
                v_rho_a_gamma_ab_[index] = 1.0/pow(t12162,7.0/3.0)*t12181*t12194*t12186*t12178*(-8.0/3.0)-t12205* \
                   t12168*t12186*t12178*1.0/sqrt(t12189+pow(t12166*t12167*(-1.0/2.0)+1.0/2.0,5.0/3.0))*2.0+t12220*t12214* \
                   t12181*t12168*t12186*t12178+t12213*t12181*t12194*t12168*t12186*t12178*2.0+t12181*t12184*t12194*t12168* \
                   t12186*t12178*(Cinf*Fg*Pg_1*t12211*t12208*t12182*(7.0/6.0)-Cinf*Fg*Pg_1*t12210*t12211*t12205*t12179) \
                   +Cinf*Fg*Pg_1*1.0/pow(t12162,7.0/2.0)*t12185*t12194*t12186*t12178*(4.0/3.0)-Cinf*Fg*Pg_1*t12220*t12214* \
                   t12215*t12185*t12186*t12178*(1.0/2.0)-Cinf*Fg*Pg_1*t12213*t12215*t12185*t12194*t12186*t12178+Cinf* \
                   Fg*Pg_1*t12205*t12215*t12182*t12185*t12194*t12186*t12178;
            } else if (rho_a[index] > cutoff_) {
                double t14362 = rho_a[index]+rho_b[index];
                double t14363 = c*c;
                double t14364 = 1.0/pow(t14362,2.0/3.0);
                double t14365 = 1.0/pow(t14362,1.0/3.0);
                double t14366 = 1.0/pow(t14362,4.0/3.0);
                double t14367 = 1.0/t14362;
                double t14368 = Bg*c*t14363*t14367*1.0E4;
                double t14369 = Cg_4*t14363*t14364;
                double t14370 = Cg_3*c*t14365;
                double t14371 = t14370+t14368+t14369+1.0;
                double t14372 = 1.0/t14371;
                double t14373 = 1.0/pow(t14362,5.0/3.0);
                double t14374 = Bg*t14363*t14364;
                double t14375 = Cg_2*c*t14365;
                double t14376 = Cg_1+t14374+t14375;
                double t14377 = 1.0/two_13;
                double t14378 = 1.0/pow(t14362,7.0/6.0);
                double t14379 = t14372*t14376;
                double t14380 = Cx+t14379;
                double t14381 = 1.0/t14380;
                double t14382 = gamma_ab[index]*2.0;
                double t14383 = gamma_aa[index]+gamma_bb[index]+t14382;
                double t14384 = sqrt(t14383);
                double t14386 = Cinf*Fg*Pg_1*t14381*t14384*t14378;
                double t14385 = exp(-t14386);
                double t14387 = Bg*t14363*t14373*(2.0/3.0);
                double t14388 = Cg_2*c*t14366*(1.0/3.0);
                double t14389 = t14387+t14388;
                double t14390 = t14372*t14389;
                double t14391 = 1.0/(t14362*t14362);
                double t14392 = Bg*c*t14363*t14391*1.0E4;
                double t14393 = Cg_4*t14363*t14373*(2.0/3.0);
                double t14394 = Cg_3*c*t14366*(1.0/3.0);
                double t14395 = t14392+t14393+t14394;
                double t14396 = 1.0/(t14371*t14371);
                double t14399 = t14376*t14395*t14396;
                double t14397 = t14390-t14399;
                double t14398 = 1.0/pow(t14362,1.3E1/6.0);
                double t14400 = 1.0/(t14380*t14380);
                double t14401 = 1.0/sqrt(t14383);
                double t14402 = Cinf*Fg*Pg_1*t14381*t14384*t14398*(7.0/6.0);
                double t14403 = t14402-Cinf*Fg*Pg_1*t14400*t14384*t14378*t14397;
                double t14404 = 1.0/pow(t14362,5.0/2.0);
                v_rho_a_gamma_ab_[index] = t14366*t14385*t14377*t14397*-2.0-1.0/pow(t14362,7.0/3.0)*t14380*t14385* \
                   t14377*(8.0/3.0)+t14403*t14380*t14366*t14385*t14377*2.0+t14380*t14383*t14366*t14385*t14377*(Cinf*Fg* \
                   Pg_1*t14401*t14381*t14398*(7.0/6.0)-Cinf*Fg*Pg_1*t14400*t14401*t14378*t14397)+Cinf*Fg*Pg_1*1.0/pow(t14362,7.0/ \
                   2.0)*t14384*t14385*t14377*(4.0/3.0)-Cinf*Fg*Pg_1*t14403*t14404*t14384*t14385*t14377+Cinf*Fg*Pg_1*t14404* \
                   t14381*t14384*t14385*t14377*t14397;
            } else if (rho_b[index] > cutoff_) {
                double t13313 = rho_a[index]+rho_b[index];
                double t13314 = c*c;
                double t13315 = 1.0/pow(t13313,2.0/3.0);
                double t13316 = 1.0/pow(t13313,1.0/3.0);
                double t13317 = 1.0/pow(t13313,4.0/3.0);
                double t13318 = 1.0/t13313;
                double t13319 = Bg*c*t13314*t13318*1.0E4;
                double t13320 = Cg_4*t13314*t13315;
                double t13321 = Cg_3*c*t13316;
                double t13322 = t13320+t13321+t13319+1.0;
                double t13323 = 1.0/t13322;
                double t13324 = 1.0/pow(t13313,5.0/3.0);
                double t13325 = Bg*t13314*t13315;
                double t13326 = Cg_2*c*t13316;
                double t13327 = Cg_1+t13325+t13326;
                double t13328 = 1.0/two_13;
                double t13329 = 1.0/pow(t13313,7.0/6.0);
                double t13330 = t13323*t13327;
                double t13331 = Cx+t13330;
                double t13332 = 1.0/t13331;
                double t13333 = gamma_ab[index]*2.0;
                double t13334 = gamma_aa[index]+gamma_bb[index]+t13333;
                double t13335 = sqrt(t13334);
                double t13337 = Cinf*Fg*Pg_1*t13332*t13335*t13329;
                double t13336 = exp(-t13337);
                double t13338 = Bg*t13314*t13324*(2.0/3.0);
                double t13339 = Cg_2*c*t13317*(1.0/3.0);
                double t13340 = t13338+t13339;
                double t13341 = t13340*t13323;
                double t13342 = 1.0/(t13313*t13313);
                double t13343 = Bg*c*t13314*t13342*1.0E4;
                double t13344 = Cg_4*t13314*t13324*(2.0/3.0);
                double t13345 = Cg_3*c*t13317*(1.0/3.0);
                double t13346 = t13343+t13344+t13345;
                double t13347 = 1.0/(t13322*t13322);
                double t13350 = t13327*t13346*t13347;
                double t13348 = t13341-t13350;
                double t13349 = 1.0/pow(t13313,1.3E1/6.0);
                double t13351 = 1.0/(t13331*t13331);
                double t13352 = 1.0/sqrt(t13334);
                double t13353 = Cinf*Fg*Pg_1*t13332*t13335*t13349*(7.0/6.0);
                double t13354 = t13353-Cinf*Fg*Pg_1*t13351*t13335*t13329*t13348;
                double t13355 = 1.0/pow(t13313,5.0/2.0);
                v_rho_a_gamma_ab_[index] = t13317*t13336*t13328*t13348*-2.0-1.0/pow(t13313,7.0/3.0)*t13331*t13336* \
                   t13328*(8.0/3.0)+t13331*t13317*t13336*t13354*t13328*2.0+t13331*t13334*t13317*t13336*t13328*(Cinf*Fg* \
                   Pg_1*t13332*t13352*t13349*(7.0/6.0)-Cinf*Fg*Pg_1*t13351*t13352*t13329*t13348)+Cinf*Fg*Pg_1*1.0/pow(t13313,7.0/ \
                   2.0)*t13335*t13336*t13328*(4.0/3.0)-Cinf*Fg*Pg_1*t13335*t13336*t13354*t13328*t13355+Cinf*Fg*Pg_1*t13332* \
                   t13335*t13336*t13328*t13355*t13348;
            } else {
                v_rho_a_gamma_ab_[index] = 0.0;
            } 

            //V_rho_a_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t12222 = rho_a[index]+rho_b[index];
                double t12223 = c*c;
                double t12224 = 1.0/pow(t12222,2.0/3.0);
                double t12225 = 1.0/pow(t12222,1.0/3.0);
                double t12226 = 1.0/t12222;
                double t12227 = rho_a[index]-rho_b[index];
                double t12228 = 1.0/pow(t12222,4.0/3.0);
                double t12229 = Bg*c*t12223*t12226*1.0E4;
                double t12230 = Cg_4*t12223*t12224;
                double t12231 = Cg_3*c*t12225;
                double t12232 = t12230+t12231+t12229+1.0;
                double t12233 = 1.0/t12232;
                double t12234 = 1.0/pow(t12222,5.0/3.0);
                double t12235 = Bg*t12223*t12224;
                double t12236 = Cg_2*c*t12225;
                double t12237 = Cg_1+t12235+t12236;
                double t12238 = 1.0/two_13;
                double t12239 = 1.0/pow(t12222,7.0/6.0);
                double t12240 = t12233*t12237;
                double t12241 = Cx+t12240;
                double t12242 = 1.0/t12241;
                double t12243 = gamma_ab[index]*2.0;
                double t12244 = gamma_aa[index]+gamma_bb[index]+t12243;
                double t12245 = sqrt(t12244);
                double t12250 = Cinf*Fg*Pg_1*t12242*t12245*t12239;
                double t12246 = exp(-t12250);
                double t12247 = t12226*t12227*(1.0/2.0);
                double t12248 = t12247+1.0/2.0;
                double t12249 = pow(t12248,5.0/3.0);
                double t12251 = -t12247+1.0/2.0;
                double t12252 = pow(t12251,5.0/3.0);
                double t12253 = t12252+t12249;
                double t12254 = 1.0/sqrt(t12253);
                double t12255 = Bg*t12223*t12234*(2.0/3.0);
                double t12256 = Cg_2*c*t12228*(1.0/3.0);
                double t12257 = t12255+t12256;
                double t12258 = t12233*t12257;
                double t12259 = 1.0/(t12222*t12222);
                double t12260 = Bg*c*t12223*t12259*1.0E4;
                double t12261 = Cg_4*t12223*t12234*(2.0/3.0);
                double t12262 = Cg_3*c*t12228*(1.0/3.0);
                double t12263 = t12260+t12261+t12262;
                double t12264 = 1.0/(t12232*t12232);
                double t12269 = t12263*t12237*t12264;
                double t12265 = t12258-t12269;
                double t12266 = t12226*(1.0/2.0);
                double t12277 = t12227*t12259*(1.0/2.0);
                double t12267 = t12266-t12277;
                double t12268 = 1.0/pow(t12222,1.3E1/6.0);
                double t12270 = 1.0/(t12241*t12241);
                double t12271 = 1.0/sqrt(t12244);
                double t12272 = Cinf*Fg*Pg_1*t12242*t12245*t12268*(7.0/6.0);
                double t12273 = t12272-Cinf*Fg*Pg_1*t12270*t12245*t12265*t12239;
                double t12274 = 1.0/pow(t12253,3.0/2.0);
                double t12275 = 1.0/pow(t12222,5.0/2.0);
                double t12276 = pow(t12251,2.0/3.0);
                double t12278 = t12267*t12276*(5.0/3.0);
                double t12279 = pow(t12248,2.0/3.0);
                double t12280 = t12278-t12267*t12279*(5.0/3.0);
                v_rho_a_gamma_bb_[index] = 1.0/pow(t12222,7.0/3.0)*t12241*t12254*t12246*t12238*(-4.0/3.0)-t12228* \
                   t12246*t12238*t12265*1.0/sqrt(t12249+pow(t12226*t12227*(-1.0/2.0)+1.0/2.0,5.0/3.0))+t12241*t12280* \
                   t12228*t12246*t12238*t12274*(1.0/2.0)+t12241*t12254*t12228*t12246*t12273*t12238+t12241*t12244*t12254* \
                   t12228*t12246*t12238*(Cinf*Fg*Pg_1*t12242*t12271*t12268*(7.0/1.2E1)-Cinf*Fg*Pg_1*t12270*t12271*t12265* \
                   t12239*(1.0/2.0))+Cinf*Fg*Pg_1*1.0/pow(t12222,7.0/2.0)*t12245*t12254*t12246*t12238*(2.0/3.0)-Cinf* \
                   Fg*Pg_1*t12280*t12245*t12246*t12238*t12274*t12275*(1.0/4.0)-Cinf*Fg*Pg_1*t12245*t12254*t12246*t12273* \
                   t12238*t12275*(1.0/2.0)+Cinf*Fg*Pg_1*t12242*t12245*t12254*t12246*t12238*t12265*t12275*(1.0/2.0);
            } else if (rho_a[index] > cutoff_) {
                double t14406 = rho_a[index]+rho_b[index];
                double t14407 = c*c;
                double t14408 = 1.0/pow(t14406,2.0/3.0);
                double t14409 = 1.0/pow(t14406,1.0/3.0);
                double t14410 = 1.0/pow(t14406,4.0/3.0);
                double t14411 = 1.0/t14406;
                double t14412 = Bg*c*t14411*t14407*1.0E4;
                double t14413 = Cg_4*t14407*t14408;
                double t14414 = Cg_3*c*t14409;
                double t14415 = t14412+t14413+t14414+1.0;
                double t14416 = 1.0/t14415;
                double t14417 = 1.0/pow(t14406,5.0/3.0);
                double t14418 = Bg*t14407*t14408;
                double t14419 = Cg_2*c*t14409;
                double t14420 = Cg_1+t14418+t14419;
                double t14421 = 1.0/two_13;
                double t14422 = 1.0/pow(t14406,7.0/6.0);
                double t14423 = t14420*t14416;
                double t14424 = Cx+t14423;
                double t14425 = 1.0/t14424;
                double t14426 = gamma_ab[index]*2.0;
                double t14427 = gamma_aa[index]+gamma_bb[index]+t14426;
                double t14428 = sqrt(t14427);
                double t14430 = Cinf*Fg*Pg_1*t14422*t14425*t14428;
                double t14429 = exp(-t14430);
                double t14431 = Bg*t14407*t14417*(2.0/3.0);
                double t14432 = Cg_2*c*t14410*(1.0/3.0);
                double t14433 = t14431+t14432;
                double t14434 = t14433*t14416;
                double t14435 = 1.0/(t14406*t14406);
                double t14436 = Bg*c*t14407*t14435*1.0E4;
                double t14437 = Cg_4*t14407*t14417*(2.0/3.0);
                double t14438 = Cg_3*c*t14410*(1.0/3.0);
                double t14439 = t14436+t14437+t14438;
                double t14440 = 1.0/(t14415*t14415);
                double t14443 = t14420*t14440*t14439;
                double t14441 = t14434-t14443;
                double t14442 = 1.0/pow(t14406,1.3E1/6.0);
                double t14444 = 1.0/(t14424*t14424);
                double t14445 = 1.0/sqrt(t14427);
                double t14446 = Cinf*Fg*Pg_1*t14442*t14425*t14428*(7.0/6.0);
                double t14447 = t14446-Cinf*Fg*Pg_1*t14422*t14441*t14444*t14428;
                double t14448 = 1.0/pow(t14406,5.0/2.0);
                v_rho_a_gamma_bb_[index] = -t14410*t14421*t14441*t14429-t14421*1.0/pow(t14406,7.0/3.0)*t14424*t14429* \
                   (4.0/3.0)+t14410*t14421*t14424*t14429*t14447+t14410*t14421*t14424*t14427*t14429*(Cinf*Fg*Pg_1*t14442* \
                   t14425*t14445*(7.0/1.2E1)-Cinf*Fg*Pg_1*t14422*t14441*t14444*t14445*(1.0/2.0))+Cinf*Fg*Pg_1*t14421* \
                   1.0/pow(t14406,7.0/2.0)*t14428*t14429*(2.0/3.0)-Cinf*Fg*Pg_1*t14421*t14428*t14429*t14447*t14448*(1.0/ \
                   2.0)+Cinf*Fg*Pg_1*t14421*t14441*t14425*t14428*t14429*t14448*(1.0/2.0);
            } else if (rho_b[index] > cutoff_) {
                double t13357 = rho_a[index]+rho_b[index];
                double t13358 = c*c;
                double t13359 = 1.0/pow(t13357,2.0/3.0);
                double t13360 = 1.0/pow(t13357,1.0/3.0);
                double t13361 = 1.0/pow(t13357,4.0/3.0);
                double t13362 = 1.0/t13357;
                double t13363 = Bg*c*t13362*t13358*1.0E4;
                double t13364 = Cg_4*t13358*t13359;
                double t13365 = Cg_3*c*t13360;
                double t13366 = t13363+t13364+t13365+1.0;
                double t13367 = 1.0/t13366;
                double t13368 = 1.0/pow(t13357,5.0/3.0);
                double t13369 = Bg*t13358*t13359;
                double t13370 = Cg_2*c*t13360;
                double t13371 = Cg_1+t13370+t13369;
                double t13372 = 1.0/two_13;
                double t13373 = 1.0/pow(t13357,7.0/6.0);
                double t13374 = t13371*t13367;
                double t13375 = Cx+t13374;
                double t13376 = 1.0/t13375;
                double t13377 = gamma_ab[index]*2.0;
                double t13378 = gamma_aa[index]+gamma_bb[index]+t13377;
                double t13379 = sqrt(t13378);
                double t13381 = Cinf*Fg*Pg_1*t13373*t13376*t13379;
                double t13380 = exp(-t13381);
                double t13382 = Bg*t13358*t13368*(2.0/3.0);
                double t13383 = Cg_2*c*t13361*(1.0/3.0);
                double t13384 = t13382+t13383;
                double t13385 = t13384*t13367;
                double t13386 = 1.0/(t13357*t13357);
                double t13387 = Bg*c*t13358*t13386*1.0E4;
                double t13388 = Cg_4*t13358*t13368*(2.0/3.0);
                double t13389 = Cg_3*c*t13361*(1.0/3.0);
                double t13390 = t13387+t13388+t13389;
                double t13391 = 1.0/(t13366*t13366);
                double t13394 = t13371*t13390*t13391;
                double t13392 = t13385-t13394;
                double t13393 = 1.0/pow(t13357,1.3E1/6.0);
                double t13395 = 1.0/(t13375*t13375);
                double t13396 = 1.0/sqrt(t13378);
                double t13397 = Cinf*Fg*Pg_1*t13393*t13376*t13379*(7.0/6.0);
                double t13398 = t13397-Cinf*Fg*Pg_1*t13373*t13392*t13395*t13379;
                double t13399 = 1.0/pow(t13357,5.0/2.0);
                v_rho_a_gamma_bb_[index] = -t13361*t13380*t13372*t13392-t13380*t13372*1.0/pow(t13357,7.0/3.0)*t13375* \
                   (4.0/3.0)+t13361*t13380*t13372*t13375*t13398+t13361*t13380*t13372*t13375*t13378*(Cinf*Fg*Pg_1*t13393* \
                   t13376*t13396*(7.0/1.2E1)-Cinf*Fg*Pg_1*t13373*t13392*t13395*t13396*(1.0/2.0))+Cinf*Fg*Pg_1*t13380* \
                   t13372*1.0/pow(t13357,7.0/2.0)*t13379*(2.0/3.0)-Cinf*Fg*Pg_1*t13380*t13372*t13379*t13398*t13399*(1.0/ \
                   2.0)+Cinf*Fg*Pg_1*t13380*t13372*t13392*t13376*t13379*t13399*(1.0/2.0);
            } else {
                v_rho_a_gamma_bb_[index] = 0.0;
            } 

            //V_rho_b_gamma_aa
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t12282 = rho_a[index]+rho_b[index];
                double t12283 = c*c;
                double t12284 = 1.0/pow(t12282,2.0/3.0);
                double t12285 = 1.0/pow(t12282,1.0/3.0);
                double t12286 = 1.0/t12282;
                double t12287 = rho_a[index]-rho_b[index];
                double t12288 = 1.0/pow(t12282,4.0/3.0);
                double t12289 = Bg*c*t12283*t12286*1.0E4;
                double t12290 = Cg_4*t12283*t12284;
                double t12291 = Cg_3*c*t12285;
                double t12292 = t12290+t12291+t12289+1.0;
                double t12293 = 1.0/t12292;
                double t12294 = 1.0/pow(t12282,5.0/3.0);
                double t12295 = Bg*t12283*t12284;
                double t12296 = Cg_2*c*t12285;
                double t12297 = Cg_1+t12295+t12296;
                double t12298 = 1.0/two_13;
                double t12299 = 1.0/pow(t12282,7.0/6.0);
                double t12300 = t12293*t12297;
                double t12301 = Cx+t12300;
                double t12302 = 1.0/t12301;
                double t12303 = gamma_ab[index]*2.0;
                double t12304 = gamma_aa[index]+gamma_bb[index]+t12303;
                double t12305 = sqrt(t12304);
                double t12310 = Cinf*Fg*Pg_1*t12302*t12305*t12299;
                double t12306 = exp(-t12310);
                double t12307 = t12286*t12287*(1.0/2.0);
                double t12308 = t12307+1.0/2.0;
                double t12309 = pow(t12308,5.0/3.0);
                double t12311 = -t12307+1.0/2.0;
                double t12312 = pow(t12311,5.0/3.0);
                double t12313 = t12312+t12309;
                double t12314 = 1.0/sqrt(t12313);
                double t12315 = Bg*t12283*t12294*(2.0/3.0);
                double t12316 = Cg_2*c*t12288*(1.0/3.0);
                double t12317 = t12315+t12316;
                double t12318 = t12317*t12293;
                double t12319 = 1.0/(t12282*t12282);
                double t12320 = Bg*c*t12283*t12319*1.0E4;
                double t12321 = Cg_4*t12283*t12294*(2.0/3.0);
                double t12322 = Cg_3*c*t12288*(1.0/3.0);
                double t12323 = t12320+t12321+t12322;
                double t12324 = 1.0/(t12292*t12292);
                double t12330 = t12323*t12324*t12297;
                double t12325 = -t12330+t12318;
                double t12326 = t12286*(1.0/2.0);
                double t12327 = t12319*t12287*(1.0/2.0);
                double t12328 = t12326+t12327;
                double t12329 = 1.0/pow(t12282,1.3E1/6.0);
                double t12331 = 1.0/(t12301*t12301);
                double t12332 = 1.0/sqrt(t12304);
                double t12333 = Cinf*Fg*Pg_1*t12302*t12305*t12329*(7.0/6.0);
                double t12334 = t12333-Cinf*Fg*Pg_1*t12331*t12305*t12325*t12299;
                double t12335 = 1.0/pow(t12313,3.0/2.0);
                double t12336 = 1.0/pow(t12282,5.0/2.0);
                double t12337 = pow(t12311,2.0/3.0);
                double t12338 = t12328*t12337*(5.0/3.0);
                double t12339 = pow(t12308,2.0/3.0);
                double t12340 = t12338-t12328*t12339*(5.0/3.0);
                v_rho_b_gamma_aa_[index] = t12301*t12314*t12306*1.0/pow(t12282,7.0/3.0)*t12298*(-4.0/3.0)-t12306* \
                   t12325*t12288*t12298*1.0/sqrt(t12309+pow(t12286*t12287*(-1.0/2.0)+1.0/2.0,5.0/3.0))-t12301*t12340* \
                   t12306*t12335*t12288*t12298*(1.0/2.0)+t12301*t12314*t12306*t12334*t12288*t12298+t12301*t12304*t12314* \
                   t12306*t12288*t12298*(Cinf*Fg*Pg_1*t12302*t12332*t12329*(7.0/1.2E1)-Cinf*Fg*Pg_1*t12331*t12332*t12325* \
                   t12299*(1.0/2.0))+Cinf*Fg*Pg_1*t12305*t12314*t12306*1.0/pow(t12282,7.0/2.0)*t12298*(2.0/3.0)+Cinf* \
                   Fg*Pg_1*t12340*t12305*t12306*t12335*t12336*t12298*(1.0/4.0)-Cinf*Fg*Pg_1*t12305*t12314*t12306*t12334* \
                   t12336*t12298*(1.0/2.0)+Cinf*Fg*Pg_1*t12302*t12305*t12314*t12306*t12325*t12336*t12298*(1.0/2.0);
            } else if (rho_a[index] > cutoff_) {
                double t14450 = rho_a[index]+rho_b[index];
                double t14451 = c*c;
                double t14452 = 1.0/pow(t14450,2.0/3.0);
                double t14453 = 1.0/pow(t14450,1.0/3.0);
                double t14454 = 1.0/pow(t14450,4.0/3.0);
                double t14455 = 1.0/t14450;
                double t14456 = Bg*c*t14451*t14455*1.0E4;
                double t14457 = Cg_4*t14451*t14452;
                double t14458 = Cg_3*c*t14453;
                double t14459 = t14456+t14457+t14458+1.0;
                double t14460 = 1.0/t14459;
                double t14461 = 1.0/pow(t14450,5.0/3.0);
                double t14462 = Bg*t14451*t14452;
                double t14463 = Cg_2*c*t14453;
                double t14464 = Cg_1+t14462+t14463;
                double t14465 = 1.0/two_13;
                double t14466 = 1.0/pow(t14450,7.0/6.0);
                double t14467 = t14460*t14464;
                double t14468 = Cx+t14467;
                double t14469 = 1.0/t14468;
                double t14470 = gamma_ab[index]*2.0;
                double t14471 = gamma_aa[index]+gamma_bb[index]+t14470;
                double t14472 = sqrt(t14471);
                double t14474 = Cinf*Fg*Pg_1*t14472*t14466*t14469;
                double t14473 = exp(-t14474);
                double t14475 = Bg*t14451*t14461*(2.0/3.0);
                double t14476 = Cg_2*c*t14454*(1.0/3.0);
                double t14477 = t14475+t14476;
                double t14478 = t14460*t14477;
                double t14479 = 1.0/(t14450*t14450);
                double t14480 = Bg*c*t14451*t14479*1.0E4;
                double t14481 = Cg_4*t14451*t14461*(2.0/3.0);
                double t14482 = Cg_3*c*t14454*(1.0/3.0);
                double t14483 = t14480+t14481+t14482;
                double t14484 = 1.0/(t14459*t14459);
                double t14487 = t14464*t14483*t14484;
                double t14485 = t14478-t14487;
                double t14486 = 1.0/pow(t14450,1.3E1/6.0);
                double t14488 = 1.0/(t14468*t14468);
                double t14489 = 1.0/sqrt(t14471);
                double t14490 = Cinf*Fg*Pg_1*t14472*t14486*t14469*(7.0/6.0);
                double t14491 = t14490-Cinf*Fg*Pg_1*t14472*t14466*t14485*t14488;
                double t14492 = 1.0/pow(t14450,5.0/2.0);
                v_rho_b_gamma_aa_[index] = -t14454*t14473*t14465*t14485-1.0/pow(t14450,7.0/3.0)*t14473*t14465*t14468* \
                   (4.0/3.0)+t14454*t14473*t14491*t14465*t14468+t14471*t14454*t14473*t14465*t14468*(Cinf*Fg*Pg_1*t14486* \
                   t14469*t14489*(7.0/1.2E1)-Cinf*Fg*Pg_1*t14466*t14485*t14488*t14489*(1.0/2.0))+Cinf*Fg*Pg_1*1.0/pow(t14450,7.0/ \
                   2.0)*t14472*t14473*t14465*(2.0/3.0)-Cinf*Fg*Pg_1*t14472*t14473*t14491*t14465*t14492*(1.0/2.0)+Cinf* \
                   Fg*Pg_1*t14472*t14473*t14465*t14492*t14485*t14469*(1.0/2.0);
            } else if (rho_b[index] > cutoff_) {
                double t13401 = rho_a[index]+rho_b[index];
                double t13402 = c*c;
                double t13403 = 1.0/pow(t13401,2.0/3.0);
                double t13404 = 1.0/pow(t13401,1.0/3.0);
                double t13405 = 1.0/pow(t13401,4.0/3.0);
                double t13406 = 1.0/t13401;
                double t13407 = Bg*c*t13402*t13406*1.0E4;
                double t13408 = Cg_4*t13402*t13403;
                double t13409 = Cg_3*c*t13404;
                double t13410 = t13407+t13408+t13409+1.0;
                double t13411 = 1.0/t13410;
                double t13412 = 1.0/pow(t13401,5.0/3.0);
                double t13413 = Bg*t13402*t13403;
                double t13414 = Cg_2*c*t13404;
                double t13415 = Cg_1+t13413+t13414;
                double t13416 = 1.0/two_13;
                double t13417 = 1.0/pow(t13401,7.0/6.0);
                double t13418 = t13411*t13415;
                double t13419 = Cx+t13418;
                double t13420 = 1.0/t13419;
                double t13421 = gamma_ab[index]*2.0;
                double t13422 = gamma_aa[index]+gamma_bb[index]+t13421;
                double t13423 = sqrt(t13422);
                double t13425 = Cinf*Fg*Pg_1*t13420*t13423*t13417;
                double t13424 = exp(-t13425);
                double t13426 = Bg*t13402*t13412*(2.0/3.0);
                double t13427 = Cg_2*c*t13405*(1.0/3.0);
                double t13428 = t13426+t13427;
                double t13429 = t13411*t13428;
                double t13430 = 1.0/(t13401*t13401);
                double t13431 = Bg*c*t13402*t13430*1.0E4;
                double t13432 = Cg_4*t13402*t13412*(2.0/3.0);
                double t13433 = Cg_3*c*t13405*(1.0/3.0);
                double t13434 = t13431+t13432+t13433;
                double t13435 = 1.0/(t13410*t13410);
                double t13438 = t13415*t13434*t13435;
                double t13436 = t13429-t13438;
                double t13437 = 1.0/pow(t13401,1.3E1/6.0);
                double t13439 = 1.0/(t13419*t13419);
                double t13440 = 1.0/sqrt(t13422);
                double t13441 = Cinf*Fg*Pg_1*t13420*t13423*t13437*(7.0/6.0);
                double t13442 = t13441-Cinf*Fg*Pg_1*t13423*t13417*t13436*t13439;
                double t13443 = 1.0/pow(t13401,5.0/2.0);
                v_rho_b_gamma_aa_[index] = -t13405*t13424*t13416*t13436-1.0/pow(t13401,7.0/3.0)*t13424*t13416*t13419* \
                   (4.0/3.0)+t13405*t13424*t13442*t13416*t13419+t13422*t13405*t13424*t13416*t13419*(Cinf*Fg*Pg_1*t13420* \
                   t13440*t13437*(7.0/1.2E1)-Cinf*Fg*Pg_1*t13440*t13417*t13436*t13439*(1.0/2.0))+Cinf*Fg*Pg_1*1.0/pow(t13401,7.0/ \
                   2.0)*t13423*t13424*t13416*(2.0/3.0)-Cinf*Fg*Pg_1*t13423*t13424*t13442*t13416*t13443*(1.0/2.0)+Cinf* \
                   Fg*Pg_1*t13420*t13423*t13424*t13416*t13443*t13436*(1.0/2.0);
            } else {
                v_rho_b_gamma_aa_[index] = 0.0;
            } 

            //V_rho_b_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t12342 = rho_a[index]+rho_b[index];
                double t12343 = c*c;
                double t12344 = 1.0/pow(t12342,2.0/3.0);
                double t12345 = 1.0/pow(t12342,1.0/3.0);
                double t12346 = 1.0/t12342;
                double t12347 = rho_a[index]-rho_b[index];
                double t12348 = 1.0/pow(t12342,4.0/3.0);
                double t12349 = Bg*c*t12343*t12346*1.0E4;
                double t12350 = Cg_4*t12343*t12344;
                double t12351 = Cg_3*c*t12345;
                double t12352 = t12350+t12351+t12349+1.0;
                double t12353 = 1.0/t12352;
                double t12354 = 1.0/pow(t12342,5.0/3.0);
                double t12355 = Bg*t12343*t12344;
                double t12356 = Cg_2*c*t12345;
                double t12357 = Cg_1+t12355+t12356;
                double t12358 = 1.0/two_13;
                double t12359 = 1.0/pow(t12342,7.0/6.0);
                double t12360 = t12353*t12357;
                double t12361 = Cx+t12360;
                double t12362 = 1.0/t12361;
                double t12363 = gamma_ab[index]*2.0;
                double t12364 = gamma_aa[index]+gamma_bb[index]+t12363;
                double t12365 = sqrt(t12364);
                double t12370 = Cinf*Fg*Pg_1*t12362*t12365*t12359;
                double t12366 = exp(-t12370);
                double t12367 = t12346*t12347*(1.0/2.0);
                double t12368 = t12367+1.0/2.0;
                double t12369 = pow(t12368,5.0/3.0);
                double t12371 = -t12367+1.0/2.0;
                double t12372 = pow(t12371,5.0/3.0);
                double t12373 = t12372+t12369;
                double t12374 = 1.0/sqrt(t12373);
                double t12375 = Bg*t12343*t12354*(2.0/3.0);
                double t12376 = Cg_2*c*t12348*(1.0/3.0);
                double t12377 = t12375+t12376;
                double t12378 = t12353*t12377;
                double t12379 = 1.0/(t12342*t12342);
                double t12380 = Bg*c*t12343*t12379*1.0E4;
                double t12381 = Cg_4*t12343*t12354*(2.0/3.0);
                double t12382 = Cg_3*c*t12348*(1.0/3.0);
                double t12383 = t12380+t12381+t12382;
                double t12384 = 1.0/(t12352*t12352);
                double t12390 = t12383*t12357*t12384;
                double t12385 = -t12390+t12378;
                double t12386 = t12346*(1.0/2.0);
                double t12387 = t12347*t12379*(1.0/2.0);
                double t12388 = t12386+t12387;
                double t12389 = 1.0/pow(t12342,1.3E1/6.0);
                double t12391 = 1.0/(t12361*t12361);
                double t12392 = 1.0/sqrt(t12364);
                double t12393 = Cinf*Fg*Pg_1*t12362*t12365*t12389*(7.0/6.0);
                double t12394 = t12393-Cinf*Fg*Pg_1*t12391*t12365*t12385*t12359;
                double t12395 = 1.0/pow(t12373,3.0/2.0);
                double t12396 = 1.0/pow(t12342,5.0/2.0);
                double t12397 = pow(t12371,2.0/3.0);
                double t12398 = t12388*t12397*(5.0/3.0);
                double t12399 = pow(t12368,2.0/3.0);
                double t12400 = t12398-t12388*t12399*(5.0/3.0);
                v_rho_b_gamma_ab_[index] = 1.0/pow(t12342,7.0/3.0)*t12361*t12374*t12366*t12358*(-8.0/3.0)-t12348* \
                   t12366*t12358*t12385*1.0/sqrt(t12369+pow(t12346*t12347*(-1.0/2.0)+1.0/2.0,5.0/3.0))*2.0-t12400*t12361* \
                   t12348*t12366*t12358*t12395+t12361*t12374*t12348*t12366*t12358*t12394*2.0+t12361*t12364*t12374*t12348* \
                   t12366*t12358*(Cinf*Fg*Pg_1*t12362*t12392*t12389*(7.0/6.0)-Cinf*Fg*Pg_1*t12391*t12392*t12385*t12359) \
                   +Cinf*Fg*Pg_1*1.0/pow(t12342,7.0/2.0)*t12365*t12374*t12366*t12358*(4.0/3.0)+Cinf*Fg*Pg_1*t12400*t12365* \
                   t12366*t12358*t12395*t12396*(1.0/2.0)-Cinf*Fg*Pg_1*t12365*t12374*t12366*t12358*t12394*t12396+Cinf* \
                   Fg*Pg_1*t12362*t12365*t12374*t12366*t12358*t12385*t12396;
            } else if (rho_a[index] > cutoff_) {
                double t14494 = rho_a[index]+rho_b[index];
                double t14495 = c*c;
                double t14496 = 1.0/pow(t14494,2.0/3.0);
                double t14497 = 1.0/pow(t14494,1.0/3.0);
                double t14498 = 1.0/pow(t14494,4.0/3.0);
                double t14499 = 1.0/t14494;
                double t14500 = Bg*c*t14495*t14499*1.0E4;
                double t14501 = Cg_4*t14495*t14496;
                double t14502 = Cg_3*c*t14497;
                double t14503 = t14500+t14501+t14502+1.0;
                double t14504 = 1.0/t14503;
                double t14505 = 1.0/pow(t14494,5.0/3.0);
                double t14506 = Bg*t14495*t14496;
                double t14507 = Cg_2*c*t14497;
                double t14508 = Cg_1+t14506+t14507;
                double t14509 = 1.0/two_13;
                double t14510 = 1.0/pow(t14494,7.0/6.0);
                double t14511 = t14504*t14508;
                double t14512 = Cx+t14511;
                double t14513 = 1.0/t14512;
                double t14514 = gamma_ab[index]*2.0;
                double t14515 = gamma_aa[index]+gamma_bb[index]+t14514;
                double t14516 = sqrt(t14515);
                double t14518 = Cinf*Fg*Pg_1*t14510*t14513*t14516;
                double t14517 = exp(-t14518);
                double t14519 = Bg*t14505*t14495*(2.0/3.0);
                double t14520 = Cg_2*c*t14498*(1.0/3.0);
                double t14521 = t14520+t14519;
                double t14522 = t14521*t14504;
                double t14523 = 1.0/(t14494*t14494);
                double t14524 = Bg*c*t14523*t14495*1.0E4;
                double t14525 = Cg_4*t14505*t14495*(2.0/3.0);
                double t14526 = Cg_3*c*t14498*(1.0/3.0);
                double t14527 = t14524+t14525+t14526;
                double t14528 = 1.0/(t14503*t14503);
                double t14531 = t14508*t14527*t14528;
                double t14529 = t14522-t14531;
                double t14530 = 1.0/pow(t14494,1.3E1/6.0);
                double t14532 = 1.0/(t14512*t14512);
                double t14533 = 1.0/sqrt(t14515);
                double t14534 = Cinf*Fg*Pg_1*t14530*t14513*t14516*(7.0/6.0);
                double t14535 = t14534-Cinf*Fg*Pg_1*t14510*t14532*t14516*t14529;
                double t14536 = 1.0/pow(t14494,5.0/2.0);
                v_rho_b_gamma_ab_[index] = t14517*t14509*t14529*t14498*-2.0-t14512*t14517*t14509*1.0/pow(t14494,7.0/ \
                   3.0)*(8.0/3.0)+t14512*t14517*t14535*t14509*t14498*2.0+t14512*t14515*t14517*t14509*t14498*(Cinf*Fg* \
                   Pg_1*t14530*t14513*t14533*(7.0/6.0)-Cinf*Fg*Pg_1*t14510*t14532*t14533*t14529)+Cinf*Fg*Pg_1*t14516* \
                   t14517*t14509*1.0/pow(t14494,7.0/2.0)*(4.0/3.0)-Cinf*Fg*Pg_1*t14516*t14517*t14535*t14509*t14536+Cinf* \
                   Fg*Pg_1*t14513*t14516*t14517*t14509*t14536*t14529;
            } else if (rho_b[index] > cutoff_) {
                double t13445 = rho_a[index]+rho_b[index];
                double t13446 = c*c;
                double t13447 = 1.0/pow(t13445,2.0/3.0);
                double t13448 = 1.0/pow(t13445,1.0/3.0);
                double t13449 = 1.0/pow(t13445,4.0/3.0);
                double t13450 = 1.0/t13445;
                double t13451 = Bg*c*t13450*t13446*1.0E4;
                double t13452 = Cg_4*t13446*t13447;
                double t13453 = Cg_3*c*t13448;
                double t13454 = t13451+t13452+t13453+1.0;
                double t13455 = 1.0/t13454;
                double t13456 = 1.0/pow(t13445,5.0/3.0);
                double t13457 = Bg*t13446*t13447;
                double t13458 = Cg_2*c*t13448;
                double t13459 = Cg_1+t13457+t13458;
                double t13460 = 1.0/two_13;
                double t13461 = 1.0/pow(t13445,7.0/6.0);
                double t13462 = t13455*t13459;
                double t13463 = Cx+t13462;
                double t13464 = 1.0/t13463;
                double t13465 = gamma_ab[index]*2.0;
                double t13466 = gamma_aa[index]+gamma_bb[index]+t13465;
                double t13467 = sqrt(t13466);
                double t13469 = Cinf*Fg*Pg_1*t13461*t13464*t13467;
                double t13468 = exp(-t13469);
                double t13470 = Bg*t13446*t13456*(2.0/3.0);
                double t13471 = Cg_2*c*t13449*(1.0/3.0);
                double t13472 = t13470+t13471;
                double t13473 = t13472*t13455;
                double t13474 = 1.0/(t13445*t13445);
                double t13475 = Bg*c*t13446*t13474*1.0E4;
                double t13476 = Cg_4*t13446*t13456*(2.0/3.0);
                double t13477 = Cg_3*c*t13449*(1.0/3.0);
                double t13478 = t13475+t13476+t13477;
                double t13479 = 1.0/(t13454*t13454);
                double t13482 = t13459*t13478*t13479;
                double t13480 = t13473-t13482;
                double t13481 = 1.0/pow(t13445,1.3E1/6.0);
                double t13483 = 1.0/(t13463*t13463);
                double t13484 = 1.0/sqrt(t13466);
                double t13485 = Cinf*Fg*Pg_1*t13481*t13464*t13467*(7.0/6.0);
                double t13486 = t13485-Cinf*Fg*Pg_1*t13461*t13480*t13483*t13467;
                double t13487 = 1.0/pow(t13445,5.0/2.0);
                v_rho_b_gamma_ab_[index] = t13460*t13480*t13449*t13468*-2.0-t13460*1.0/pow(t13445,7.0/3.0)*t13463* \
                   t13468*(8.0/3.0)+t13460*t13463*t13449*t13468*t13486*2.0+t13460*t13463*t13466*t13449*t13468*(Cinf*Fg* \
                   Pg_1*t13481*t13464*t13484*(7.0/6.0)-Cinf*Fg*Pg_1*t13461*t13480*t13483*t13484)+Cinf*Fg*Pg_1*t13460* \
                   1.0/pow(t13445,7.0/2.0)*t13467*t13468*(4.0/3.0)-Cinf*Fg*Pg_1*t13460*t13467*t13468*t13486*t13487+Cinf* \
                   Fg*Pg_1*t13460*t13480*t13464*t13467*t13468*t13487;
            } else {
                v_rho_b_gamma_ab_[index] = 0.0;
            } 

            //V_rho_b_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t12402 = rho_a[index]+rho_b[index];
                double t12403 = c*c;
                double t12404 = 1.0/pow(t12402,2.0/3.0);
                double t12405 = 1.0/pow(t12402,1.0/3.0);
                double t12406 = 1.0/t12402;
                double t12407 = rho_a[index]-rho_b[index];
                double t12408 = 1.0/pow(t12402,4.0/3.0);
                double t12409 = Bg*c*t12403*t12406*1.0E4;
                double t12410 = Cg_4*t12403*t12404;
                double t12411 = Cg_3*c*t12405;
                double t12412 = t12410+t12411+t12409+1.0;
                double t12413 = 1.0/t12412;
                double t12414 = 1.0/pow(t12402,5.0/3.0);
                double t12415 = Bg*t12403*t12404;
                double t12416 = Cg_2*c*t12405;
                double t12417 = Cg_1+t12415+t12416;
                double t12418 = 1.0/two_13;
                double t12419 = 1.0/pow(t12402,7.0/6.0);
                double t12420 = t12413*t12417;
                double t12421 = Cx+t12420;
                double t12422 = 1.0/t12421;
                double t12423 = gamma_ab[index]*2.0;
                double t12424 = gamma_aa[index]+gamma_bb[index]+t12423;
                double t12425 = sqrt(t12424);
                double t12430 = Cinf*Fg*Pg_1*t12422*t12425*t12419;
                double t12426 = exp(-t12430);
                double t12427 = t12406*t12407*(1.0/2.0);
                double t12428 = t12427+1.0/2.0;
                double t12429 = pow(t12428,5.0/3.0);
                double t12431 = -t12427+1.0/2.0;
                double t12432 = pow(t12431,5.0/3.0);
                double t12433 = t12432+t12429;
                double t12434 = 1.0/sqrt(t12433);
                double t12435 = Bg*t12403*t12414*(2.0/3.0);
                double t12436 = Cg_2*c*t12408*(1.0/3.0);
                double t12437 = t12435+t12436;
                double t12438 = t12413*t12437;
                double t12439 = 1.0/(t12402*t12402);
                double t12440 = Bg*c*t12403*t12439*1.0E4;
                double t12441 = Cg_4*t12403*t12414*(2.0/3.0);
                double t12442 = Cg_3*c*t12408*(1.0/3.0);
                double t12443 = t12440+t12441+t12442;
                double t12444 = 1.0/(t12412*t12412);
                double t12450 = t12443*t12417*t12444;
                double t12445 = -t12450+t12438;
                double t12446 = t12406*(1.0/2.0);
                double t12447 = t12407*t12439*(1.0/2.0);
                double t12448 = t12446+t12447;
                double t12449 = 1.0/pow(t12402,1.3E1/6.0);
                double t12451 = 1.0/(t12421*t12421);
                double t12452 = 1.0/sqrt(t12424);
                double t12453 = Cinf*Fg*Pg_1*t12422*t12425*t12449*(7.0/6.0);
                double t12454 = t12453-Cinf*Fg*Pg_1*t12451*t12425*t12445*t12419;
                double t12455 = 1.0/pow(t12433,3.0/2.0);
                double t12456 = 1.0/pow(t12402,5.0/2.0);
                double t12457 = pow(t12431,2.0/3.0);
                double t12458 = t12448*t12457*(5.0/3.0);
                double t12459 = pow(t12428,2.0/3.0);
                double t12460 = t12458-t12448*t12459*(5.0/3.0);
                v_rho_b_gamma_bb_[index] = 1.0/pow(t12402,7.0/3.0)*t12421*t12434*t12426*t12418*(-4.0/3.0)-t12408* \
                   t12426*t12418*t12445*1.0/sqrt(t12429+pow(t12406*t12407*(-1.0/2.0)+1.0/2.0,5.0/3.0))-t12421*t12460* \
                   t12408*t12426*t12418*t12455*(1.0/2.0)+t12421*t12434*t12408*t12426*t12418*t12454+t12421*t12424*t12434* \
                   t12408*t12426*t12418*(Cinf*Fg*Pg_1*t12422*t12452*t12449*(7.0/1.2E1)-Cinf*Fg*Pg_1*t12451*t12452*t12445* \
                   t12419*(1.0/2.0))+Cinf*Fg*Pg_1*1.0/pow(t12402,7.0/2.0)*t12425*t12434*t12426*t12418*(2.0/3.0)+Cinf* \
                   Fg*Pg_1*t12460*t12425*t12426*t12418*t12455*t12456*(1.0/4.0)-Cinf*Fg*Pg_1*t12425*t12434*t12426*t12418* \
                   t12454*t12456*(1.0/2.0)+Cinf*Fg*Pg_1*t12422*t12425*t12434*t12426*t12418*t12445*t12456*(1.0/2.0);
            } else if (rho_a[index] > cutoff_) {
                double t14538 = rho_a[index]+rho_b[index];
                double t14539 = c*c;
                double t14540 = 1.0/pow(t14538,2.0/3.0);
                double t14541 = 1.0/pow(t14538,1.0/3.0);
                double t14542 = 1.0/pow(t14538,4.0/3.0);
                double t14543 = 1.0/t14538;
                double t14544 = Bg*c*t14543*t14539*1.0E4;
                double t14545 = Cg_4*t14540*t14539;
                double t14546 = Cg_3*c*t14541;
                double t14547 = t14544+t14545+t14546+1.0;
                double t14548 = 1.0/t14547;
                double t14549 = 1.0/pow(t14538,5.0/3.0);
                double t14550 = Bg*t14540*t14539;
                double t14551 = Cg_2*c*t14541;
                double t14552 = Cg_1+t14550+t14551;
                double t14553 = 1.0/two_13;
                double t14554 = 1.0/pow(t14538,7.0/6.0);
                double t14555 = t14552*t14548;
                double t14556 = Cx+t14555;
                double t14557 = 1.0/t14556;
                double t14558 = gamma_ab[index]*2.0;
                double t14559 = gamma_aa[index]+gamma_bb[index]+t14558;
                double t14560 = sqrt(t14559);
                double t14562 = Cinf*Fg*Pg_1*t14560*t14554*t14557;
                double t14561 = exp(-t14562);
                double t14563 = Bg*t14539*t14549*(2.0/3.0);
                double t14564 = Cg_2*c*t14542*(1.0/3.0);
                double t14565 = t14563+t14564;
                double t14566 = t14565*t14548;
                double t14567 = 1.0/(t14538*t14538);
                double t14568 = Bg*c*t14539*t14567*1.0E4;
                double t14569 = Cg_4*t14539*t14549*(2.0/3.0);
                double t14570 = Cg_3*c*t14542*(1.0/3.0);
                double t14571 = t14570+t14568+t14569;
                double t14572 = 1.0/(t14547*t14547);
                double t14575 = t14552*t14571*t14572;
                double t14573 = t14566-t14575;
                double t14574 = 1.0/pow(t14538,1.3E1/6.0);
                double t14576 = 1.0/(t14556*t14556);
                double t14577 = 1.0/sqrt(t14559);
                double t14578 = Cinf*Fg*Pg_1*t14560*t14574*t14557*(7.0/6.0);
                double t14579 = t14578-Cinf*Fg*Pg_1*t14560*t14554*t14573*t14576;
                double t14580 = 1.0/pow(t14538,5.0/2.0);
                v_rho_b_gamma_bb_[index] = -t14542*t14561*t14553*t14573-t14561*t14553*1.0/pow(t14538,7.0/3.0)*t14556* \
                   (4.0/3.0)+t14542*t14561*t14553*t14556*t14579+t14542*t14561*t14553*t14556*t14559*(Cinf*Fg*Pg_1*t14574* \
                   t14557*t14577*(7.0/1.2E1)-Cinf*Fg*Pg_1*t14554*t14573*t14576*t14577*(1.0/2.0))+Cinf*Fg*Pg_1*t14560* \
                   t14561*t14553*1.0/pow(t14538,7.0/2.0)*(2.0/3.0)-Cinf*Fg*Pg_1*t14560*t14561*t14553*t14580*t14579*(1.0/ \
                   2.0)+Cinf*Fg*Pg_1*t14560*t14561*t14553*t14580*t14573*t14557*(1.0/2.0);
            } else if (rho_b[index] > cutoff_) {
                double t13489 = rho_a[index]+rho_b[index];
                double t13490 = c*c;
                double t13491 = 1.0/pow(t13489,2.0/3.0);
                double t13492 = 1.0/pow(t13489,1.0/3.0);
                double t13493 = 1.0/pow(t13489,4.0/3.0);
                double t13494 = 1.0/t13489;
                double t13495 = Bg*c*t13490*t13494*1.0E4;
                double t13496 = Cg_4*t13490*t13491;
                double t13497 = Cg_3*c*t13492;
                double t13498 = t13495+t13496+t13497+1.0;
                double t13499 = 1.0/t13498;
                double t13500 = 1.0/pow(t13489,5.0/3.0);
                double t13501 = Bg*t13490*t13491;
                double t13502 = Cg_2*c*t13492;
                double t13503 = Cg_1+t13501+t13502;
                double t13504 = 1.0/two_13;
                double t13505 = 1.0/pow(t13489,7.0/6.0);
                double t13506 = t13503*t13499;
                double t13507 = Cx+t13506;
                double t13508 = 1.0/t13507;
                double t13509 = gamma_ab[index]*2.0;
                double t13510 = gamma_aa[index]+gamma_bb[index]+t13509;
                double t13511 = sqrt(t13510);
                double t13513 = Cinf*Fg*Pg_1*t13511*t13505*t13508;
                double t13512 = exp(-t13513);
                double t13514 = Bg*t13500*t13490*(2.0/3.0);
                double t13515 = Cg_2*c*t13493*(1.0/3.0);
                double t13516 = t13514+t13515;
                double t13517 = t13516*t13499;
                double t13518 = 1.0/(t13489*t13489);
                double t13519 = Bg*c*t13490*t13518*1.0E4;
                double t13520 = Cg_4*t13500*t13490*(2.0/3.0);
                double t13521 = Cg_3*c*t13493*(1.0/3.0);
                double t13522 = t13520+t13521+t13519;
                double t13523 = 1.0/(t13498*t13498);
                double t13526 = t13503*t13522*t13523;
                double t13524 = t13517-t13526;
                double t13525 = 1.0/pow(t13489,1.3E1/6.0);
                double t13527 = 1.0/(t13507*t13507);
                double t13528 = 1.0/sqrt(t13510);
                double t13529 = Cinf*Fg*Pg_1*t13511*t13525*t13508*(7.0/6.0);
                double t13530 = t13529-Cinf*Fg*Pg_1*t13511*t13505*t13524*t13527;
                double t13531 = 1.0/pow(t13489,5.0/2.0);
                v_rho_b_gamma_bb_[index] = -t13512*t13504*t13524*t13493-t13512*t13504*t13507*1.0/pow(t13489,7.0/3.0) \
                   *(4.0/3.0)+t13512*t13530*t13504*t13507*t13493+t13510*t13512*t13504*t13507*t13493*(Cinf*Fg*Pg_1*t13525* \
                   t13508*t13528*(7.0/1.2E1)-Cinf*Fg*Pg_1*t13505*t13524*t13527*t13528*(1.0/2.0))+Cinf*Fg*Pg_1*t13511* \
                   t13512*t13504*1.0/pow(t13489,7.0/2.0)*(2.0/3.0)-Cinf*Fg*Pg_1*t13511*t13512*t13530*t13504*t13531*(1.0/ \
                   2.0)+Cinf*Fg*Pg_1*t13511*t13512*t13504*t13531*t13524*t13508*(1.0/2.0);
            } else {
                v_rho_b_gamma_bb_[index] = 0.0;
            } 

            //V_gamma_aa_gamma_aa
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t12462 = rho_a[index]+rho_b[index];
                double t12463 = c*c;
                double t12464 = 1.0/pow(t12462,2.0/3.0);
                double t12465 = 1.0/pow(t12462,1.0/3.0);
                double t12466 = 1.0/t12462;
                double t12467 = rho_a[index]-rho_b[index];
                double t12468 = Bg*t12463*t12464;
                double t12469 = Cg_2*c*t12465;
                double t12470 = Cg_1+t12468+t12469;
                double t12471 = Bg*c*t12463*t12466*1.0E4;
                double t12472 = Cg_4*t12463*t12464;
                double t12473 = Cg_3*c*t12465;
                double t12474 = t12471+t12472+t12473+1.0;
                double t12475 = 1.0/t12474;
                double t12476 = t12470*t12475;
                double t12477 = Cx+t12476;
                double t12478 = 1.0/t12477;
                double t12479 = 1.0/two_13;
                double t12480 = 1.0/pow(t12462,7.0/6.0);
                double t12481 = gamma_ab[index]*2.0;
                double t12482 = gamma_aa[index]+gamma_bb[index]+t12481;
                double t12483 = sqrt(t12482);
                double t12484 = exp(-Cinf*Fg*Pg_1*t12480*t12483*t12478);
                double t12485 = t12466*t12467*(1.0/2.0);
                double t12486 = t12485+1.0/2.0;
                double t12487 = pow(t12486,5.0/3.0);
                v_gamma_aa_gamma_aa_[index] = Cinf*Fg*Pg_1*1.0/pow(t12462,5.0/2.0)*1.0/sqrt(t12482)*t12484*t12479* \
                   1.0/sqrt(t12487+pow(-t12485+1.0/2.0,5.0/3.0))*(-3.0/4.0)+(Cinf*Cinf)*(Fg*Fg)*(Pg_1*Pg_1)*1.0/pow(t12462,1.1E1/ \
                   3.0)*t12484*t12478*t12479*1.0/sqrt(t12487+pow(t12466*t12467*(-1.0/2.0)+1.0/2.0,5.0/3.0))*(1.0/4.0) \
                   ;
            } else if (rho_a[index] > cutoff_) {
                double t14582 = rho_a[index]+rho_b[index];
                double t14583 = c*c;
                double t14584 = 1.0/pow(t14582,2.0/3.0);
                double t14585 = 1.0/pow(t14582,1.0/3.0);
                double t14586 = Bg*t14583*t14584;
                double t14587 = Cg_2*c*t14585;
                double t14588 = Cg_1+t14586+t14587;
                double t14589 = 1.0/t14582;
                double t14590 = Bg*c*t14583*t14589*1.0E4;
                double t14591 = Cg_4*t14583*t14584;
                double t14592 = Cg_3*c*t14585;
                double t14593 = t14590+t14591+t14592+1.0;
                double t14594 = 1.0/t14593;
                double t14595 = t14594*t14588;
                double t14596 = Cx+t14595;
                double t14597 = 1.0/t14596;
                double t14598 = 1.0/two_13;
                double t14599 = 1.0/pow(t14582,7.0/6.0);
                double t14600 = gamma_ab[index]*2.0;
                double t14601 = gamma_aa[index]+gamma_bb[index]+t14600;
                double t14602 = sqrt(t14601);
                double t14603 = exp(-Cinf*Fg*Pg_1*t14602*t14597*t14599);
                v_gamma_aa_gamma_aa_[index] = (Cinf*Cinf)*(Fg*Fg)*(Pg_1*Pg_1)*t14603*1.0/pow(t14582,1.1E1/3.0)*t14597* \
                   t14598*(1.0/4.0)-Cinf*Fg*Pg_1*1.0/sqrt(t14601)*t14603*1.0/pow(t14582,5.0/2.0)*t14598*(3.0/4.0);
            } else if (rho_b[index] > cutoff_) {
                double t13533 = rho_a[index]+rho_b[index];
                double t13534 = c*c;
                double t13535 = 1.0/pow(t13533,2.0/3.0);
                double t13536 = 1.0/pow(t13533,1.0/3.0);
                double t13537 = Bg*t13534*t13535;
                double t13538 = Cg_2*c*t13536;
                double t13539 = Cg_1+t13537+t13538;
                double t13540 = 1.0/t13533;
                double t13541 = Bg*c*t13540*t13534*1.0E4;
                double t13542 = Cg_4*t13534*t13535;
                double t13543 = Cg_3*c*t13536;
                double t13544 = t13541+t13542+t13543+1.0;
                double t13545 = 1.0/t13544;
                double t13546 = t13545*t13539;
                double t13547 = Cx+t13546;
                double t13548 = 1.0/t13547;
                double t13549 = 1.0/two_13;
                double t13550 = 1.0/pow(t13533,7.0/6.0);
                double t13551 = gamma_ab[index]*2.0;
                double t13552 = gamma_aa[index]+gamma_bb[index]+t13551;
                double t13553 = sqrt(t13552);
                double t13554 = exp(-Cinf*Fg*Pg_1*t13550*t13553*t13548);
                v_gamma_aa_gamma_aa_[index] = (Cinf*Cinf)*(Fg*Fg)*(Pg_1*Pg_1)*1.0/pow(t13533,1.1E1/3.0)*t13554*t13548* \
                   t13549*(1.0/4.0)-Cinf*Fg*Pg_1*1.0/pow(t13533,5.0/2.0)*1.0/sqrt(t13552)*t13554*t13549*(3.0/4.0);
            } else {
                v_gamma_aa_gamma_aa_[index] = 0.0;
            } 

            //V_gamma_aa_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t12489 = rho_a[index]+rho_b[index];
                double t12490 = c*c;
                double t12491 = 1.0/pow(t12489,2.0/3.0);
                double t12492 = 1.0/pow(t12489,1.0/3.0);
                double t12493 = 1.0/t12489;
                double t12494 = rho_a[index]-rho_b[index];
                double t12495 = Bg*t12490*t12491;
                double t12496 = Cg_2*c*t12492;
                double t12497 = Cg_1+t12495+t12496;
                double t12498 = Bg*c*t12490*t12493*1.0E4;
                double t12499 = Cg_4*t12490*t12491;
                double t12500 = Cg_3*c*t12492;
                double t12501 = t12500+t12498+t12499+1.0;
                double t12502 = 1.0/t12501;
                double t12503 = t12502*t12497;
                double t12504 = Cx+t12503;
                double t12505 = 1.0/t12504;
                double t12506 = 1.0/two_13;
                double t12507 = 1.0/pow(t12489,7.0/6.0);
                double t12508 = gamma_ab[index]*2.0;
                double t12509 = gamma_aa[index]+gamma_bb[index]+t12508;
                double t12510 = sqrt(t12509);
                double t12511 = exp(-Cinf*Fg*Pg_1*t12510*t12505*t12507);
                double t12512 = t12493*t12494*(1.0/2.0);
                double t12513 = t12512+1.0/2.0;
                double t12514 = pow(t12513,5.0/3.0);
                v_gamma_aa_gamma_ab_[index] = Cinf*Fg*Pg_1*t12511*t12506*1.0/sqrt(t12509)*1.0/pow(t12489,5.0/2.0) \
                   *1.0/sqrt(t12514+pow(-t12512+1.0/2.0,5.0/3.0))*(-3.0/2.0)+(Cinf*Cinf)*(Fg*Fg)*(Pg_1*Pg_1)*t12511*t12505* \
                   t12506*1.0/pow(t12489,1.1E1/3.0)*1.0/sqrt(t12514+pow(t12493*t12494*(-1.0/2.0)+1.0/2.0,5.0/3.0))*(1.0/ \
                   2.0);
            } else if (rho_a[index] > cutoff_) {
                double t14605 = rho_a[index]+rho_b[index];
                double t14606 = c*c;
                double t14607 = 1.0/pow(t14605,2.0/3.0);
                double t14608 = 1.0/pow(t14605,1.0/3.0);
                double t14609 = Bg*t14606*t14607;
                double t14610 = Cg_2*c*t14608;
                double t14611 = Cg_1+t14610+t14609;
                double t14612 = 1.0/t14605;
                double t14613 = Bg*c*t14612*t14606*1.0E4;
                double t14614 = Cg_4*t14606*t14607;
                double t14615 = Cg_3*c*t14608;
                double t14616 = t14613+t14614+t14615+1.0;
                double t14617 = 1.0/t14616;
                double t14618 = t14611*t14617;
                double t14619 = Cx+t14618;
                double t14620 = 1.0/t14619;
                double t14621 = 1.0/two_13;
                double t14622 = 1.0/pow(t14605,7.0/6.0);
                double t14623 = gamma_ab[index]*2.0;
                double t14624 = gamma_aa[index]+gamma_bb[index]+t14623;
                double t14625 = sqrt(t14624);
                double t14626 = exp(-Cinf*Fg*Pg_1*t14620*t14622*t14625);
                v_gamma_aa_gamma_ab_[index] = (Cinf*Cinf)*(Fg*Fg)*(Pg_1*Pg_1)*t14620*t14621*1.0/pow(t14605,1.1E1/ \
                   3.0)*t14626*(1.0/2.0)-Cinf*Fg*Pg_1*t14621*1.0/pow(t14605,5.0/2.0)*1.0/sqrt(t14624)*t14626*(3.0/2.0) \
                   ;
            } else if (rho_b[index] > cutoff_) {
                double t13556 = rho_a[index]+rho_b[index];
                double t13557 = c*c;
                double t13558 = 1.0/pow(t13556,2.0/3.0);
                double t13559 = 1.0/pow(t13556,1.0/3.0);
                double t13560 = Bg*t13557*t13558;
                double t13561 = Cg_2*c*t13559;
                double t13562 = Cg_1+t13560+t13561;
                double t13563 = 1.0/t13556;
                double t13564 = Bg*c*t13563*t13557*1.0E4;
                double t13565 = Cg_4*t13557*t13558;
                double t13566 = Cg_3*c*t13559;
                double t13567 = t13564+t13565+t13566+1.0;
                double t13568 = 1.0/t13567;
                double t13569 = t13562*t13568;
                double t13570 = Cx+t13569;
                double t13571 = 1.0/t13570;
                double t13572 = 1.0/two_13;
                double t13573 = 1.0/pow(t13556,7.0/6.0);
                double t13574 = gamma_ab[index]*2.0;
                double t13575 = gamma_aa[index]+gamma_bb[index]+t13574;
                double t13576 = sqrt(t13575);
                double t13577 = exp(-Cinf*Fg*Pg_1*t13571*t13573*t13576);
                v_gamma_aa_gamma_ab_[index] = (Cinf*Cinf)*(Fg*Fg)*(Pg_1*Pg_1)*t13571*t13572*1.0/pow(t13556,1.1E1/ \
                   3.0)*t13577*(1.0/2.0)-Cinf*Fg*Pg_1*t13572*1.0/pow(t13556,5.0/2.0)*1.0/sqrt(t13575)*t13577*(3.0/2.0) \
                   ;
            } else {
                v_gamma_aa_gamma_ab_[index] = 0.0;
            } 

            //V_gamma_aa_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t12516 = rho_a[index]+rho_b[index];
                double t12517 = c*c;
                double t12518 = 1.0/pow(t12516,2.0/3.0);
                double t12519 = 1.0/pow(t12516,1.0/3.0);
                double t12520 = 1.0/t12516;
                double t12521 = rho_a[index]-rho_b[index];
                double t12522 = Bg*t12517*t12518;
                double t12523 = Cg_2*c*t12519;
                double t12524 = Cg_1+t12522+t12523;
                double t12525 = Bg*c*t12520*t12517*1.0E4;
                double t12526 = Cg_4*t12517*t12518;
                double t12527 = Cg_3*c*t12519;
                double t12528 = t12525+t12526+t12527+1.0;
                double t12529 = 1.0/t12528;
                double t12530 = t12524*t12529;
                double t12531 = Cx+t12530;
                double t12532 = 1.0/t12531;
                double t12533 = 1.0/two_13;
                double t12534 = 1.0/pow(t12516,7.0/6.0);
                double t12535 = gamma_ab[index]*2.0;
                double t12536 = gamma_aa[index]+gamma_bb[index]+t12535;
                double t12537 = sqrt(t12536);
                double t12538 = exp(-Cinf*Fg*Pg_1*t12532*t12534*t12537);
                double t12539 = t12520*t12521*(1.0/2.0);
                double t12540 = t12539+1.0/2.0;
                double t12541 = pow(t12540,5.0/3.0);
                v_gamma_aa_gamma_bb_[index] = Cinf*Fg*Pg_1*t12533*1.0/pow(t12516,5.0/2.0)*1.0/sqrt(t12536)*t12538* \
                   1.0/sqrt(t12541+pow(-t12539+1.0/2.0,5.0/3.0))*(-3.0/4.0)+(Cinf*Cinf)*(Fg*Fg)*(Pg_1*Pg_1)*t12532*t12533* \
                   1.0/pow(t12516,1.1E1/3.0)*t12538*1.0/sqrt(t12541+pow(t12520*t12521*(-1.0/2.0)+1.0/2.0,5.0/3.0))*(1.0/ \
                   4.0);
            } else if (rho_a[index] > cutoff_) {
                double t14628 = rho_a[index]+rho_b[index];
                double t14629 = c*c;
                double t14630 = 1.0/pow(t14628,2.0/3.0);
                double t14631 = 1.0/pow(t14628,1.0/3.0);
                double t14632 = Bg*t14630*t14629;
                double t14633 = Cg_2*c*t14631;
                double t14634 = Cg_1+t14632+t14633;
                double t14635 = 1.0/t14628;
                double t14636 = Bg*c*t14635*t14629*1.0E4;
                double t14637 = Cg_4*t14630*t14629;
                double t14638 = Cg_3*c*t14631;
                double t14639 = t14636+t14637+t14638+1.0;
                double t14640 = 1.0/t14639;
                double t14641 = t14640*t14634;
                double t14642 = Cx+t14641;
                double t14643 = 1.0/t14642;
                double t14644 = 1.0/two_13;
                double t14645 = 1.0/pow(t14628,7.0/6.0);
                double t14646 = gamma_ab[index]*2.0;
                double t14647 = gamma_aa[index]+gamma_bb[index]+t14646;
                double t14648 = sqrt(t14647);
                double t14649 = exp(-Cinf*Fg*Pg_1*t14643*t14645*t14648);
                v_gamma_aa_gamma_bb_[index] = (Cinf*Cinf)*(Fg*Fg)*(Pg_1*Pg_1)*t14643*t14644*1.0/pow(t14628,1.1E1/ \
                   3.0)*t14649*(1.0/4.0)-Cinf*Fg*Pg_1*t14644*1.0/pow(t14628,5.0/2.0)*1.0/sqrt(t14647)*t14649*(3.0/4.0) \
                   ;
            } else if (rho_b[index] > cutoff_) {
                double t13579 = rho_a[index]+rho_b[index];
                double t13580 = c*c;
                double t13581 = 1.0/pow(t13579,2.0/3.0);
                double t13582 = 1.0/pow(t13579,1.0/3.0);
                double t13583 = Bg*t13580*t13581;
                double t13584 = Cg_2*c*t13582;
                double t13585 = Cg_1+t13583+t13584;
                double t13586 = 1.0/t13579;
                double t13587 = Bg*c*t13580*t13586*1.0E4;
                double t13588 = Cg_4*t13580*t13581;
                double t13589 = Cg_3*c*t13582;
                double t13590 = t13587+t13588+t13589+1.0;
                double t13591 = 1.0/t13590;
                double t13592 = t13591*t13585;
                double t13593 = Cx+t13592;
                double t13594 = 1.0/t13593;
                double t13595 = 1.0/two_13;
                double t13596 = 1.0/pow(t13579,7.0/6.0);
                double t13597 = gamma_ab[index]*2.0;
                double t13598 = gamma_aa[index]+gamma_bb[index]+t13597;
                double t13599 = sqrt(t13598);
                double t13600 = exp(-Cinf*Fg*Pg_1*t13594*t13596*t13599);
                v_gamma_aa_gamma_bb_[index] = (Cinf*Cinf)*(Fg*Fg)*(Pg_1*Pg_1)*t13600*t13594*t13595*1.0/pow(t13579,1.1E1/ \
                   3.0)*(1.0/4.0)-Cinf*Fg*Pg_1*t13600*t13595*1.0/pow(t13579,5.0/2.0)*1.0/sqrt(t13598)*(3.0/4.0);
            } else {
                v_gamma_aa_gamma_bb_[index] = 0.0;
            } 

            //V_gamma_ab_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t12543 = rho_a[index]+rho_b[index];
                double t12544 = c*c;
                double t12545 = 1.0/pow(t12543,2.0/3.0);
                double t12546 = 1.0/pow(t12543,1.0/3.0);
                double t12547 = 1.0/t12543;
                double t12548 = rho_a[index]-rho_b[index];
                double t12549 = Bg*t12544*t12545;
                double t12550 = Cg_2*c*t12546;
                double t12551 = Cg_1+t12550+t12549;
                double t12552 = Bg*c*t12544*t12547*1.0E4;
                double t12553 = Cg_4*t12544*t12545;
                double t12554 = Cg_3*c*t12546;
                double t12555 = t12552+t12553+t12554+1.0;
                double t12556 = 1.0/t12555;
                double t12557 = t12551*t12556;
                double t12558 = Cx+t12557;
                double t12559 = 1.0/t12558;
                double t12560 = 1.0/two_13;
                double t12561 = 1.0/pow(t12543,7.0/6.0);
                double t12562 = gamma_ab[index]*2.0;
                double t12563 = gamma_aa[index]+gamma_bb[index]+t12562;
                double t12564 = sqrt(t12563);
                double t12565 = exp(-Cinf*Fg*Pg_1*t12561*t12564*t12559);
                double t12566 = t12547*t12548*(1.0/2.0);
                double t12567 = t12566+1.0/2.0;
                double t12568 = pow(t12567,5.0/3.0);
                v_gamma_ab_gamma_ab_[index] = Cinf*Fg*Pg_1*t12560*1.0/pow(t12543,5.0/2.0)*1.0/sqrt(t12563)*t12565* \
                   1.0/sqrt(t12568+pow(-t12566+1.0/2.0,5.0/3.0))*-3.0+(Cinf*Cinf)*(Fg*Fg)*(Pg_1*Pg_1)*t12560*1.0/pow(t12543,1.1E1/ \
                   3.0)*t12565*t12559*1.0/sqrt(t12568+pow(t12547*t12548*(-1.0/2.0)+1.0/2.0,5.0/3.0));
            } else if (rho_a[index] > cutoff_) {
                double t14651 = rho_a[index]+rho_b[index];
                double t14652 = c*c;
                double t14653 = 1.0/pow(t14651,2.0/3.0);
                double t14654 = 1.0/pow(t14651,1.0/3.0);
                double t14655 = Bg*t14652*t14653;
                double t14656 = Cg_2*c*t14654;
                double t14657 = Cg_1+t14655+t14656;
                double t14658 = 1.0/t14651;
                double t14659 = Bg*c*t14652*t14658*1.0E4;
                double t14660 = Cg_4*t14652*t14653;
                double t14661 = Cg_3*c*t14654;
                double t14662 = t14660+t14661+t14659+1.0;
                double t14663 = 1.0/t14662;
                double t14664 = t14663*t14657;
                double t14665 = Cx+t14664;
                double t14666 = 1.0/t14665;
                double t14667 = 1.0/two_13;
                double t14668 = 1.0/pow(t14651,7.0/6.0);
                double t14669 = gamma_ab[index]*2.0;
                double t14670 = gamma_aa[index]+gamma_bb[index]+t14669;
                double t14671 = sqrt(t14670);
                double t14672 = exp(-Cinf*Fg*Pg_1*t14671*t14666*t14668);
                v_gamma_ab_gamma_ab_[index] = (Cinf*Cinf)*(Fg*Fg)*(Pg_1*Pg_1)*1.0/pow(t14651,1.1E1/3.0)*t14672*t14666* \
                   t14667-Cinf*Fg*Pg_1*1.0/pow(t14651,5.0/2.0)*1.0/sqrt(t14670)*t14672*t14667*3.0;
            } else if (rho_b[index] > cutoff_) {
                double t13602 = rho_a[index]+rho_b[index];
                double t13603 = c*c;
                double t13604 = 1.0/pow(t13602,2.0/3.0);
                double t13605 = 1.0/pow(t13602,1.0/3.0);
                double t13606 = Bg*t13603*t13604;
                double t13607 = Cg_2*c*t13605;
                double t13608 = Cg_1+t13606+t13607;
                double t13609 = 1.0/t13602;
                double t13610 = Bg*c*t13603*t13609*1.0E4;
                double t13611 = Cg_4*t13603*t13604;
                double t13612 = Cg_3*c*t13605;
                double t13613 = t13610+t13611+t13612+1.0;
                double t13614 = 1.0/t13613;
                double t13615 = t13614*t13608;
                double t13616 = Cx+t13615;
                double t13617 = 1.0/t13616;
                double t13618 = 1.0/two_13;
                double t13619 = 1.0/pow(t13602,7.0/6.0);
                double t13620 = gamma_ab[index]*2.0;
                double t13621 = gamma_aa[index]+gamma_bb[index]+t13620;
                double t13622 = sqrt(t13621);
                double t13623 = exp(-Cinf*Fg*Pg_1*t13622*t13617*t13619);
                v_gamma_ab_gamma_ab_[index] = (Cinf*Cinf)*(Fg*Fg)*(Pg_1*Pg_1)*1.0/pow(t13602,1.1E1/3.0)*t13623*t13617* \
                   t13618-Cinf*Fg*Pg_1*1.0/pow(t13602,5.0/2.0)*1.0/sqrt(t13621)*t13623*t13618*3.0;
            } else {
                v_gamma_ab_gamma_ab_[index] = 0.0;
            } 

            //V_gamma_ab_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t12570 = rho_a[index]+rho_b[index];
                double t12571 = c*c;
                double t12572 = 1.0/pow(t12570,2.0/3.0);
                double t12573 = 1.0/pow(t12570,1.0/3.0);
                double t12574 = 1.0/t12570;
                double t12575 = rho_a[index]-rho_b[index];
                double t12576 = Bg*t12571*t12572;
                double t12577 = Cg_2*c*t12573;
                double t12578 = Cg_1+t12576+t12577;
                double t12579 = Bg*c*t12571*t12574*1.0E4;
                double t12580 = Cg_4*t12571*t12572;
                double t12581 = Cg_3*c*t12573;
                double t12582 = t12580+t12581+t12579+1.0;
                double t12583 = 1.0/t12582;
                double t12584 = t12583*t12578;
                double t12585 = Cx+t12584;
                double t12586 = 1.0/t12585;
                double t12587 = 1.0/two_13;
                double t12588 = 1.0/pow(t12570,7.0/6.0);
                double t12589 = gamma_ab[index]*2.0;
                double t12590 = gamma_aa[index]+gamma_bb[index]+t12589;
                double t12591 = sqrt(t12590);
                double t12592 = exp(-Cinf*Fg*Pg_1*t12591*t12586*t12588);
                double t12593 = t12574*t12575*(1.0/2.0);
                double t12594 = t12593+1.0/2.0;
                double t12595 = pow(t12594,5.0/3.0);
                v_gamma_ab_gamma_bb_[index] = Cinf*Fg*Pg_1*1.0/pow(t12570,5.0/2.0)*1.0/sqrt(t12590)*t12592*t12587* \
                   1.0/sqrt(t12595+pow(-t12593+1.0/2.0,5.0/3.0))*(-3.0/2.0)+(Cinf*Cinf)*(Fg*Fg)*(Pg_1*Pg_1)*1.0/pow(t12570,1.1E1/ \
                   3.0)*t12592*t12586*t12587*1.0/sqrt(t12595+pow(t12574*t12575*(-1.0/2.0)+1.0/2.0,5.0/3.0))*(1.0/2.0) \
                   ;
            } else if (rho_a[index] > cutoff_) {
                double t14674 = rho_a[index]+rho_b[index];
                double t14675 = c*c;
                double t14676 = 1.0/pow(t14674,2.0/3.0);
                double t14677 = 1.0/pow(t14674,1.0/3.0);
                double t14678 = Bg*t14675*t14676;
                double t14679 = Cg_2*c*t14677;
                double t14680 = Cg_1+t14678+t14679;
                double t14681 = 1.0/t14674;
                double t14682 = Bg*c*t14681*t14675*1.0E4;
                double t14683 = Cg_4*t14675*t14676;
                double t14684 = Cg_3*c*t14677;
                double t14685 = t14682+t14683+t14684+1.0;
                double t14686 = 1.0/t14685;
                double t14687 = t14680*t14686;
                double t14688 = Cx+t14687;
                double t14689 = 1.0/t14688;
                double t14690 = 1.0/two_13;
                double t14691 = 1.0/pow(t14674,7.0/6.0);
                double t14692 = gamma_ab[index]*2.0;
                double t14693 = gamma_aa[index]+gamma_bb[index]+t14692;
                double t14694 = sqrt(t14693);
                double t14695 = exp(-Cinf*Fg*Pg_1*t14691*t14694*t14689);
                v_gamma_ab_gamma_bb_[index] = (Cinf*Cinf)*(Fg*Fg)*(Pg_1*Pg_1)*t14690*1.0/pow(t14674,1.1E1/3.0)*t14695* \
                   t14689*(1.0/2.0)-Cinf*Fg*Pg_1*t14690*1.0/pow(t14674,5.0/2.0)*1.0/sqrt(t14693)*t14695*(3.0/2.0);
            } else if (rho_b[index] > cutoff_) {
                double t13625 = rho_a[index]+rho_b[index];
                double t13626 = c*c;
                double t13627 = 1.0/pow(t13625,2.0/3.0);
                double t13628 = 1.0/pow(t13625,1.0/3.0);
                double t13629 = Bg*t13626*t13627;
                double t13630 = Cg_2*c*t13628;
                double t13631 = Cg_1+t13630+t13629;
                double t13632 = 1.0/t13625;
                double t13633 = Bg*c*t13632*t13626*1.0E4;
                double t13634 = Cg_4*t13626*t13627;
                double t13635 = Cg_3*c*t13628;
                double t13636 = t13633+t13634+t13635+1.0;
                double t13637 = 1.0/t13636;
                double t13638 = t13631*t13637;
                double t13639 = Cx+t13638;
                double t13640 = 1.0/t13639;
                double t13641 = 1.0/two_13;
                double t13642 = 1.0/pow(t13625,7.0/6.0);
                double t13643 = gamma_ab[index]*2.0;
                double t13644 = gamma_aa[index]+gamma_bb[index]+t13643;
                double t13645 = sqrt(t13644);
                double t13646 = exp(-Cinf*Fg*Pg_1*t13640*t13642*t13645);
                v_gamma_ab_gamma_bb_[index] = (Cinf*Cinf)*(Fg*Fg)*(Pg_1*Pg_1)*t13640*t13641*1.0/pow(t13625,1.1E1/ \
                   3.0)*t13646*(1.0/2.0)-Cinf*Fg*Pg_1*t13641*1.0/pow(t13625,5.0/2.0)*1.0/sqrt(t13644)*t13646*(3.0/2.0) \
                   ;
            } else {
                v_gamma_ab_gamma_bb_[index] = 0.0;
            } 

            //V_gamma_bb_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t12597 = rho_a[index]+rho_b[index];
                double t12598 = c*c;
                double t12599 = 1.0/pow(t12597,2.0/3.0);
                double t12600 = 1.0/pow(t12597,1.0/3.0);
                double t12601 = 1.0/t12597;
                double t12602 = rho_a[index]-rho_b[index];
                double t12603 = Bg*t12598*t12599;
                double t12604 = Cg_2*c*t12600;
                double t12605 = Cg_1+t12603+t12604;
                double t12606 = Bg*c*t12601*t12598*1.0E4;
                double t12607 = Cg_4*t12598*t12599;
                double t12608 = Cg_3*c*t12600;
                double t12609 = t12606+t12607+t12608+1.0;
                double t12610 = 1.0/t12609;
                double t12611 = t12610*t12605;
                double t12612 = Cx+t12611;
                double t12613 = 1.0/t12612;
                double t12614 = 1.0/two_13;
                double t12615 = 1.0/pow(t12597,7.0/6.0);
                double t12616 = gamma_ab[index]*2.0;
                double t12617 = gamma_aa[index]+gamma_bb[index]+t12616;
                double t12618 = sqrt(t12617);
                double t12619 = exp(-Cinf*Fg*Pg_1*t12613*t12615*t12618);
                double t12620 = t12601*t12602*(1.0/2.0);
                double t12621 = t12620+1.0/2.0;
                double t12622 = pow(t12621,5.0/3.0);
                v_gamma_bb_gamma_bb_[index] = Cinf*Fg*Pg_1*t12614*1.0/sqrt(t12617)*t12619*1.0/pow(t12597,5.0/2.0) \
                   *1.0/sqrt(t12622+pow(-t12620+1.0/2.0,5.0/3.0))*(-3.0/4.0)+(Cinf*Cinf)*(Fg*Fg)*(Pg_1*Pg_1)*t12613*t12614* \
                   t12619*1.0/pow(t12597,1.1E1/3.0)*1.0/sqrt(t12622+pow(t12601*t12602*(-1.0/2.0)+1.0/2.0,5.0/3.0))*(1.0/ \
                   4.0);
            } else if (rho_a[index] > cutoff_) {
                double t14697 = rho_a[index]+rho_b[index];
                double t14698 = c*c;
                double t14699 = 1.0/pow(t14697,2.0/3.0);
                double t14700 = 1.0/pow(t14697,1.0/3.0);
                double t14701 = Bg*t14698*t14699;
                double t14702 = Cg_2*c*t14700;
                double t14703 = Cg_1+t14701+t14702;
                double t14704 = 1.0/t14697;
                double t14705 = Bg*c*t14704*t14698*1.0E4;
                double t14706 = Cg_4*t14698*t14699;
                double t14707 = Cg_3*c*t14700;
                double t14708 = t14705+t14706+t14707+1.0;
                double t14709 = 1.0/t14708;
                double t14710 = t14703*t14709;
                double t14711 = Cx+t14710;
                double t14712 = 1.0/t14711;
                double t14713 = 1.0/two_13;
                double t14714 = 1.0/pow(t14697,7.0/6.0);
                double t14715 = gamma_ab[index]*2.0;
                double t14716 = gamma_aa[index]+gamma_bb[index]+t14715;
                double t14717 = sqrt(t14716);
                double t14718 = exp(-Cinf*Fg*Pg_1*t14712*t14714*t14717);
                v_gamma_bb_gamma_bb_[index] = (Cinf*Cinf)*(Fg*Fg)*(Pg_1*Pg_1)*t14712*t14713*t14718*1.0/pow(t14697,1.1E1/ \
                   3.0)*(1.0/4.0)-Cinf*Fg*Pg_1*t14713*1.0/sqrt(t14716)*t14718*1.0/pow(t14697,5.0/2.0)*(3.0/4.0);
            } else if (rho_b[index] > cutoff_) {
                double t13648 = rho_a[index]+rho_b[index];
                double t13649 = c*c;
                double t13650 = 1.0/pow(t13648,2.0/3.0);
                double t13651 = 1.0/pow(t13648,1.0/3.0);
                double t13652 = Bg*t13650*t13649;
                double t13653 = Cg_2*c*t13651;
                double t13654 = Cg_1+t13652+t13653;
                double t13655 = 1.0/t13648;
                double t13656 = Bg*c*t13655*t13649*1.0E4;
                double t13657 = Cg_4*t13650*t13649;
                double t13658 = Cg_3*c*t13651;
                double t13659 = t13656+t13657+t13658+1.0;
                double t13660 = 1.0/t13659;
                double t13661 = t13660*t13654;
                double t13662 = Cx+t13661;
                double t13663 = 1.0/t13662;
                double t13664 = 1.0/two_13;
                double t13665 = 1.0/pow(t13648,7.0/6.0);
                double t13666 = gamma_ab[index]*2.0;
                double t13667 = gamma_aa[index]+gamma_bb[index]+t13666;
                double t13668 = sqrt(t13667);
                double t13669 = exp(-Cinf*Fg*Pg_1*t13663*t13665*t13668);
                v_gamma_bb_gamma_bb_[index] = (Cinf*Cinf)*(Fg*Fg)*(Pg_1*Pg_1)*t13663*t13664*1.0/pow(t13648,1.1E1/ \
                   3.0)*t13669*(1.0/4.0)-Cinf*Fg*Pg_1*t13664*1.0/pow(t13648,5.0/2.0)*1.0/sqrt(t13667)*t13669*(3.0/4.0) \
                   ;
            } else {
                v_gamma_bb_gamma_bb_[index] = 0.0;
            } 

        }
        if (is_meta_) {

            //V_rho_a_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_a_tau_a_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_a_tau_a_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_a_tau_a_[index] = 0.0;
            } else {
                v_rho_a_tau_a_[index] = 0.0;
            } 

            //V_rho_a_tau_b
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_a_tau_b_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_a_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_a_tau_b_[index] = 0.0;
            } else {
                v_rho_a_tau_b_[index] = 0.0;
            } 

            //V_rho_b_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_b_tau_a_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_b_tau_a_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_b_tau_a_[index] = 0.0;
            } else {
                v_rho_b_tau_a_[index] = 0.0;
            } 

            //V_rho_b_tau_b
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_b_tau_b_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_b_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_b_tau_b_[index] = 0.0;
            } else {
                v_rho_b_tau_b_[index] = 0.0;
            } 

            //V_tau_a_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_tau_a_tau_a_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_tau_a_tau_a_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_tau_a_tau_a_[index] = 0.0;
            } else {
                v_tau_a_tau_a_[index] = 0.0;
            } 

            //V_tau_a_tau_b
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_tau_a_tau_b_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_tau_a_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_tau_a_tau_b_[index] = 0.0;
            } else {
                v_tau_a_tau_b_[index] = 0.0;
            } 

            //V_tau_b_tau_b
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_tau_b_tau_b_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_tau_b_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_tau_b_tau_b_[index] = 0.0;
            } else {
                v_tau_b_tau_b_[index] = 0.0;
            } 

            if (is_gga_) {

                //V_gamma_aa_tau_a
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } else {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } 

                //V_gamma_aa_tau_b
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_aa_tau_b_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_aa_tau_b_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_aa_tau_b_[index] = 0.0;
                } else {
                    v_gamma_aa_tau_b_[index] = 0.0;
                } 

                //V_gamma_ab_tau_a
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_ab_tau_a_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_ab_tau_a_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_ab_tau_a_[index] = 0.0;
                } else {
                    v_gamma_ab_tau_a_[index] = 0.0;
                } 

                //V_gamma_ab_tau_b
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_ab_tau_b_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_ab_tau_b_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_ab_tau_b_[index] = 0.0;
                } else {
                    v_gamma_ab_tau_b_[index] = 0.0;
                } 

                //V_gamma_bb_tau_a
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_bb_tau_a_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_bb_tau_a_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_bb_tau_a_[index] = 0.0;
                } else {
                    v_gamma_bb_tau_a_[index] = 0.0;
                } 

                //V_gamma_bb_tau_b
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_bb_tau_b_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_bb_tau_b_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_bb_tau_b_[index] = 0.0;
                } else {
                    v_gamma_bb_tau_b_[index] = 0.0;
                } 

            }
        }
    }
}

}}

