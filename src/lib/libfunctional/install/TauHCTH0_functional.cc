/**********************************************************
* TauHCTH0_functional.cc: definitions for TauHCTH0_functional for KS-DFT
* Robert Parrish, robparrish@gmail.com
* Autogenerated by MATLAB Script on 06-Mar-2012
*
***********************************************************/
#include <libmints/mints.h>
#include <libfock/points.h>
#include "TauHCTH0_functional.h"
#include <stdlib.h>
#include <cmath>
#include <string>
#include <string>
#include <vector>

using namespace psi;
using namespace boost;
using namespace std;

namespace psi { namespace functional {

TauHCTH0_Functional::TauHCTH0_Functional(int npoints, int deriv) : Functional(npoints, deriv)
{

    name_ = "TauHCTH0";
    description_ = "TauHCTH0 Power Series Hybrid Meta-GGA";
    citation_ = "A.D. Boese and N.C. Handy, J. Chem. Phys., 116(22), 9559, 2002";

    double X = 1.4999999999999999E-01;
    params_.push_back(make_pair("X",X));
    double C_k = 9.1155997446911918E+00;
    params_.push_back(make_pair("C_k",C_k));
    double c0 = -9.3052573634909974E-01;
    params_.push_back(make_pair("c0",c0));
    double two_13 = 1.2599210498948732E+00;
    params_.push_back(make_pair("two_13",two_13));
    double d2fz0 = 1.7099210000000000E+00;
    params_.push_back(make_pair("d2fz0",d2fz0));
    double c = 6.2035049089939986E-01;
    params_.push_back(make_pair("c",c));
    double Aa = 1.6886999999999999E-02;
    params_.push_back(make_pair("Aa",Aa));
    double a1a = 1.1125000000000000E-01;
    params_.push_back(make_pair("a1a",a1a));
    double b1a = 1.0356999999999999E+01;
    params_.push_back(make_pair("b1a",b1a));
    double b2a = 3.6231000000000000E+00;
    params_.push_back(make_pair("b2a",b2a));
    double b3a = 8.8026000000000004E-01;
    params_.push_back(make_pair("b3a",b3a));
    double b4a = 4.9670999999999998E-01;
    params_.push_back(make_pair("b4a",b4a));
    double c0p = 3.1091000000000001E-02;
    params_.push_back(make_pair("c0p",c0p));
    double a1p = 2.1370000000000000E-01;
    params_.push_back(make_pair("a1p",a1p));
    double b1p = 7.5956999999999999E+00;
    params_.push_back(make_pair("b1p",b1p));
    double b2p = 3.5876000000000001E+00;
    params_.push_back(make_pair("b2p",b2p));
    double b3p = 1.6382000000000001E+00;
    params_.push_back(make_pair("b3p",b3p));
    double b4p = 4.9293999999999999E-01;
    params_.push_back(make_pair("b4p",b4p));
    double c0f = 1.5545000000000000E-02;
    params_.push_back(make_pair("c0f",c0f));
    double a1f = 2.0548000000000000E-01;
    params_.push_back(make_pair("a1f",a1f));
    double b1f = 1.4118900000000000E+01;
    params_.push_back(make_pair("b1f",b1f));
    double b2f = 6.1977000000000002E+00;
    params_.push_back(make_pair("b2f",b2f));
    double b3f = 3.3662000000000001E+00;
    params_.push_back(make_pair("b3f",b3f));
    double b4f = 6.2517000000000000E-01;
    params_.push_back(make_pair("b4f",b4f));
    double gcab = 6.0000000000000001E-03;
    params_.push_back(make_pair("gcab",gcab));
    double gcaa = 2.0000000000000001E-01;
    params_.push_back(make_pair("gcaa",gcaa));
    double gx = 4.0000000000000001E-03;
    params_.push_back(make_pair("gx",gx));
    double ccab0 = 8.0489999999999995E-01;
    params_.push_back(make_pair("ccab0",ccab0));
    double ccab1 = 3.8388000000000000E+00;
    params_.push_back(make_pair("ccab1",ccab1));
    double ccab2 = -1.3547000000000001E+01;
    params_.push_back(make_pair("ccab2",ccab2));
    double ccab3 = 3.9133000000000000E+00;
    params_.push_back(make_pair("ccab3",ccab3));
    double ccaa0 = 1.8600000000000000E-01;
    params_.push_back(make_pair("ccaa0",ccaa0));
    double ccaa1 = 3.9782000000000002E+00;
    params_.push_back(make_pair("ccaa1",ccaa1));
    double ccaa2 = -7.0693999999999999E+00;
    params_.push_back(make_pair("ccaa2",ccaa2));
    double ccaa3 = 3.4746999999999999E+00;
    params_.push_back(make_pair("ccaa3",ccaa3));
    double cx0 = 8.6734999999999995E-01;
    params_.push_back(make_pair("cx0",cx0));
    double cx1 = 3.0080000000000001E-01;
    params_.push_back(make_pair("cx1",cx1));
    double cx2 = 1.2208000000000001E+00;
    params_.push_back(make_pair("cx2",cx2));
    double cx3 = 1.5740000000000001E-01;
    params_.push_back(make_pair("cx3",cx3));
    double cxnl0 = -2.3000000000000000E-03;
    params_.push_back(make_pair("cxnl0",cxnl0));
    double cxnl1 = -2.8489999999999999E-01;
    params_.push_back(make_pair("cxnl1",cxnl1));
    double cxnl2 = 5.4146000000000001E+00;
    params_.push_back(make_pair("cxnl2",cxnl2));
    double cxnl3 = -1.0909000000000001E+01;
    params_.push_back(make_pair("cxnl3",cxnl3));

    is_gga_ = true;
    is_meta_ = true;

    //Required allocateion
    allocate();
}
TauHCTH0_Functional::~TauHCTH0_Functional()
{
}
void TauHCTH0_Functional::computeRKSFunctional(boost::shared_ptr<RKSFunctions> prop)
{
    int ntrue = prop->npoints();

    const double* restrict rho_a;
    const double* restrict gamma_aa;
    const double* restrict tau_a;

    rho_a = prop->property_value("RHO_A")->pointer();
    if (is_gga_) {
        gamma_aa = prop->property_value("GAMMA_AA")->pointer();
    }
    if (is_meta_) {
        tau_a = prop->property_value("TAU_A")->pointer();
    }

    double X = params_[0].second;
    double C_k = params_[1].second;
    double c0 = params_[2].second;
    double two_13 = params_[3].second;
    double d2fz0 = params_[4].second;
    double c = params_[5].second;
    double Aa = params_[6].second;
    double a1a = params_[7].second;
    double b1a = params_[8].second;
    double b2a = params_[9].second;
    double b3a = params_[10].second;
    double b4a = params_[11].second;
    double c0p = params_[12].second;
    double a1p = params_[13].second;
    double b1p = params_[14].second;
    double b2p = params_[15].second;
    double b3p = params_[16].second;
    double b4p = params_[17].second;
    double c0f = params_[18].second;
    double a1f = params_[19].second;
    double b1f = params_[20].second;
    double b2f = params_[21].second;
    double b3f = params_[22].second;
    double b4f = params_[23].second;
    double gcab = params_[24].second;
    double gcaa = params_[25].second;
    double gx = params_[26].second;
    double ccab0 = params_[27].second;
    double ccab1 = params_[28].second;
    double ccab2 = params_[29].second;
    double ccab3 = params_[30].second;
    double ccaa0 = params_[31].second;
    double ccaa1 = params_[32].second;
    double ccaa2 = params_[33].second;
    double ccaa3 = params_[34].second;
    double cx0 = params_[35].second;
    double cx1 = params_[36].second;
    double cx2 = params_[37].second;
    double cx3 = params_[38].second;
    double cxnl0 = params_[39].second;
    double cxnl1 = params_[40].second;
    double cxnl2 = params_[41].second;
    double cxnl3 = params_[42].second;

    //Functional
    for (int index = 0; index < ntrue; index++) {

        //Functional Value
        if (rho_a[index] > cutoff_) {
            double t97619 = 1.0/pow(rho_a[index],1.0/3.0);
            double t97620 = c*t97619;
            double t97621 = sqrt(t97620);
            double t97622 = pow(t97620,3.0/2.0);
            double t97623 = c*c;
            double t97624 = 1.0/pow(rho_a[index],2.0/3.0);
            double t97625 = 1.0/c0p;
            double t97626 = b1p*t97621;
            double t97627 = b3p*t97622;
            double t97628 = b4p*t97623*t97624;
            double t97629 = b2p*c*t97619;
            double t97630 = t97626+t97627+t97628+t97629;
            double t97631 = 1.0/t97630;
            double t97632 = t97631*t97625*(1.0/2.0);
            double t97633 = t97632+1.0;
            double t97634 = log(t97633);
            double t97635 = a1p*c*t97619;
            double t97636 = t97635+1.0;
            double t97637 = rho_a[index]*2.0;
            double t97638 = 1.0/pow(t97637,1.0/3.0);
            double t97639 = c*t97638;
            double t97640 = 1.0/pow(rho_a[index],8.0/3.0);
            double t97641 = gamma_aa[index]*gamma_aa[index];
            double t97642 = gcab*gcab;
            double t97643 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]);
            double t97644 = 1.0/pow(rho_a[index],1.6E1/3.0);
            double t97645 = pow(2.0,1.0/3.0);
            double t97646 = t97645*2.0;
            double t97647 = t97646-2.0;
            double t97648 = two_13*2.0;
            double t97649 = t97648-2.0;
            double t97650 = 1.0/t97649;
            double t97651 = 1.0/c0f;
            double t97652 = b1f*t97621;
            double t97653 = b3f*t97622;
            double t97654 = b4f*t97623*t97624;
            double t97655 = b2f*c*t97619;
            double t97656 = t97652+t97653+t97654+t97655;
            double t97657 = 1.0/t97656;
            double t97658 = t97651*t97657*(1.0/2.0);
            double t97659 = t97658+1.0;
            double t97660 = log(t97659);
            double t97661 = a1f*c*t97619;
            double t97662 = t97661+1.0;
            double t97663 = c0f*t97660*t97662*2.0;
            double t97664 = c0p*t97634*t97636*2.0;
            double t97665 = gcaa*gcaa;
            double t97666 = pow(rho_a[index],5.0/3.0);
            double t97667 = 1.0/tau_a[index];
            double t97668 = C_k*t97666*t97667;
            double t97669 = t97668-1.0;
            double t97670 = t97669*t97669;
            double t97671 = t97668+1.0;
            double t97672 = t97670*t97670;
            double t97673 = gx*gx;
            double t97674 = gamma_aa[index]*gx*t97640;
            double t97675 = t97674+1.0;
            double t97676 = 1.0/t97675;
            double t97677 = gamma_aa[index]*gx*t97640*3.0;
            double t97678 = gamma_aa[index]*gx*t97641*t97643*t97673;
            double t97679 = t97641*t97644*t97673*3.0;
            double t97680 = t97677+t97678+t97679+1.0;
            double t97681 = 1.0/t97680;
            double t97682 = gamma_aa[index]*gx*t97640*2.0;
            double t97683 = t97641*t97644*t97673;
            double t97684 = t97682+t97683+1.0;
            double t97685 = 1.0/t97684;
            functional_[index] = (rho_a[index]*(t97664+t97650*t97647*(t97663-c0p*t97634*t97636*2.0))*2.0-c0p* \
               rho_a[index]*log((t97625*(1.0/2.0))/(b1p*sqrt(t97639)+b3p*pow(t97639,3.0/2.0)+b4p*t97623*1.0/pow(t97637,2.0/ \
               3.0)+b2p*c*t97638)+1.0)*(a1p*c*t97638+1.0)*4.0)*(ccab0+(ccab2*t97641*t97642*t97644)/(gamma_aa[index]* \
               gcab*t97640*2.0+t97641*t97642*t97644+1.0)+(ccab1*gamma_aa[index]*gcab*t97640)/(gamma_aa[index]*gcab* \
               t97640+1.0)+(ccab3*gamma_aa[index]*gcab*t97641*t97642*t97643)/(gamma_aa[index]*gcab*t97640*3.0+t97641* \
               t97642*t97644*3.0+gamma_aa[index]*gcab*t97641*t97642*t97643+1.0))-rho_a[index]*(t97664+t97650*t97647* \
               (t97663-t97664))*(ccaa0+(ccaa2*t97641*t97644*t97665)/(gamma_aa[index]*gcaa*t97640*2.0+t97641*t97644* \
               t97665+1.0)+(ccaa1*gamma_aa[index]*gcaa*t97640)/(gamma_aa[index]*gcaa*t97640+1.0)+(ccaa3*gamma_aa[index]* \
               gcaa*t97641*t97643*t97665)/(gamma_aa[index]*gcaa*t97640*3.0+t97641*t97644*t97665*3.0+gamma_aa[index]* \
               gcaa*t97641*t97643*t97665+1.0))*2.0-c0*pow(rho_a[index],4.0/3.0)*(X-1.0)*(cx0+(t97669/t97671-t97670* \
               1.0/(t97671*t97671*t97671)*t97669*2.0+1.0/(t97671*t97671*t97671*t97671*t97671)*t97672*t97669)*(cxnl0+ \
               cxnl1*gamma_aa[index]*gx*t97640*t97676+cxnl2*t97641*t97644*t97673*t97685+cxnl3*gamma_aa[index]*gx* \
               t97641*t97643*t97681*t97673)+cx1*gamma_aa[index]*gx*t97640*t97676+cx2*t97641*t97644*t97673*t97685+ \
               cx3*gamma_aa[index]*gx*t97641*t97643*t97681*t97673)*2.0;
        } else {
            functional_[index] = 0.0;
        } 

    }
    //First Partials
    for (int index = 0; index < ntrue && deriv_ >= 1; index++) {

        //V_rho_a
        if (rho_a[index] > cutoff_) {
            double t97687 = 1.0/pow(rho_a[index],8.0/3.0);
            double t97688 = gamma_aa[index]*gamma_aa[index];
            double t97689 = gcab*gcab;
            double t97690 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]);
            double t97691 = 1.0/pow(rho_a[index],1.6E1/3.0);
            double t97692 = rho_a[index]*2.0;
            double t97693 = 1.0/pow(t97692,1.0/3.0);
            double t97694 = c*t97693;
            double t97695 = sqrt(t97694);
            double t97696 = b1p*t97695;
            double t97697 = pow(t97694,3.0/2.0);
            double t97698 = b3p*t97697;
            double t97699 = b2p*c*t97693;
            double t97700 = c*c;
            double t97701 = 1.0/pow(t97692,2.0/3.0);
            double t97702 = b4p*t97700*t97701;
            double t97703 = t97702+t97696+t97698+t97699;
            double t97704 = 1.0/pow(t97692,4.0/3.0);
            double t97705 = 1.0/c0p;
            double t97706 = 1.0/t97703;
            double t97707 = t97705*t97706*(1.0/2.0);
            double t97708 = t97707+1.0;
            double t97709 = 1.0/pow(rho_a[index],1.0/3.0);
            double t97710 = c*t97709;
            double t97711 = sqrt(t97710);
            double t97712 = b1f*t97711;
            double t97713 = pow(t97710,3.0/2.0);
            double t97714 = b3f*t97713;
            double t97715 = 1.0/pow(rho_a[index],2.0/3.0);
            double t97716 = b4f*t97700*t97715;
            double t97717 = b2f*c*t97709;
            double t97718 = t97712+t97714+t97716+t97717;
            double t97719 = 1.0/pow(rho_a[index],4.0/3.0);
            double t97720 = b1p*t97711;
            double t97721 = b3p*t97713;
            double t97722 = b4p*t97700*t97715;
            double t97723 = b2p*c*t97709;
            double t97724 = t97720+t97721+t97722+t97723;
            double t97725 = 1.0/pow(rho_a[index],5.0/3.0);
            double t97726 = 1.0/sqrt(t97710);
            double t97727 = 1.0/c0f;
            double t97728 = 1.0/t97718;
            double t97729 = t97727*t97728*(1.0/2.0);
            double t97730 = t97729+1.0;
            double t97731 = 1.0/t97724;
            double t97732 = t97731*t97705*(1.0/2.0);
            double t97733 = t97732+1.0;
            double t97734 = a1p*c*t97709;
            double t97735 = t97734+1.0;
            double t97736 = 1.0/t97733;
            double t97737 = 1.0/(t97724*t97724);
            double t97738 = b4p*t97700*t97725*(2.0/3.0);
            double t97739 = b2p*c*t97719*(1.0/3.0);
            double t97740 = b1p*c*t97726*t97719*(1.0/6.0);
            double t97741 = b3p*c*t97711*t97719*(1.0/2.0);
            double t97742 = t97740+t97741+t97738+t97739;
            double t97743 = t97742*t97735*t97736*t97737;
            double t97744 = log(t97733);
            double t97745 = log(t97708);
            double t97746 = a1p*c*t97693;
            double t97747 = t97746+1.0;
            double t97748 = pow(2.0,1.0/3.0);
            double t97749 = t97748*2.0;
            double t97750 = t97749-2.0;
            double t97751 = two_13*2.0;
            double t97752 = t97751-2.0;
            double t97753 = 1.0/t97752;
            double t97754 = log(t97730);
            double t97755 = a1f*c*t97709;
            double t97756 = t97755+1.0;
            double t97757 = c0f*t97754*t97756*2.0;
            double t97759 = c0p*t97735*t97744*2.0;
            double t97758 = t97757-t97759;
            double t97760 = gcaa*gcaa;
            double t97761 = pow(rho_a[index],5.0/3.0);
            double t97762 = 1.0/tau_a[index];
            double t97763 = C_k*t97761*t97762;
            double t97764 = t97763-1.0;
            double t97765 = t97764*t97764;
            double t97766 = t97763+1.0;
            double t97767 = t97765*t97765;
            double t97768 = gx*gx;
            double t97769 = gamma_aa[index]*gx*t97687;
            double t97770 = t97769+1.0;
            double t97771 = 1.0/t97770;
            double t97772 = gamma_aa[index]*gx*t97687*3.0;
            double t97773 = gamma_aa[index]*gx*t97690*t97768*t97688;
            double t97774 = t97691*t97768*t97688*3.0;
            double t97775 = t97772+t97773+t97774+1.0;
            double t97776 = 1.0/t97775;
            double t97777 = gamma_aa[index]*gx*t97687*2.0;
            double t97778 = t97691*t97768*t97688;
            double t97779 = t97777+t97778+1.0;
            double t97780 = 1.0/t97779;
            double t97781 = 1.0/t97766;
            double t97782 = t97781*t97764;
            double t97783 = 1.0/(t97766*t97766*t97766);
            double t97784 = 1.0/(t97766*t97766*t97766*t97766*t97766);
            double t97785 = t97764*t97784*t97767;
            double t97786 = t97782+t97785-t97764*t97765*t97783*2.0;
            double t97787 = 1.0/pow(rho_a[index],1.9E1/3.0);
            double t97788 = 1.0/pow(rho_a[index],1.1E1/3.0);
            double t97789 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]*rho_a[index]);
            double t97790 = cxnl1*gamma_aa[index]*gx*t97771*t97687;
            double t97791 = cxnl3*gamma_aa[index]*gx*t97690*t97776*t97768*t97688;
            double t97792 = cxnl2*t97780*t97691*t97768*t97688;
            double t97793 = cxnl0+t97790+t97791+t97792;
            double t97794 = pow(rho_a[index],2.0/3.0);
            double t97795 = 1.0/(t97770*t97770);
            double t97796 = gamma_aa[index]*gx*t97788*8.0;
            double t97797 = gamma_aa[index]*gx*t97768*t97688*t97789*8.0;
            double t97798 = t97768*t97688*t97787*1.6E1;
            double t97799 = t97796+t97797+t97798;
            double t97800 = 1.0/(t97775*t97775);
            double t97801 = gamma_aa[index]*gx*t97788*(1.6E1/3.0);
            double t97802 = t97768*t97688*t97787*(1.6E1/3.0);
            double t97803 = t97801+t97802;
            double t97804 = 1.0/(t97779*t97779);
            double t97805 = t97750*t97753*t97758;
            double t97806 = t97805+t97759;
            double t97807 = gamma_aa[index]*gcab*t97687;
            double t97808 = t97807+1.0;
            double t97809 = 1.0/t97808;
            double t97810 = gamma_aa[index]*gcab*t97687*3.0;
            double t97811 = gamma_aa[index]*gcab*t97690*t97688*t97689;
            double t97812 = t97691*t97688*t97689*3.0;
            double t97813 = t97810+t97811+t97812+1.0;
            double t97814 = 1.0/t97813;
            double t97815 = gamma_aa[index]*gcab*t97687*2.0;
            double t97816 = t97691*t97688*t97689;
            double t97817 = t97815+t97816+1.0;
            double t97818 = 1.0/t97817;
            double t97819 = gamma_aa[index]*gcaa*t97687;
            double t97820 = t97819+1.0;
            double t97821 = 1.0/t97820;
            double t97822 = gamma_aa[index]*gcaa*t97687*3.0;
            double t97823 = gamma_aa[index]*gcaa*t97760*t97690*t97688;
            double t97824 = t97760*t97691*t97688*3.0;
            double t97825 = t97822+t97823+t97824+1.0;
            double t97826 = 1.0/t97825;
            double t97827 = gamma_aa[index]*gcaa*t97687*2.0;
            double t97828 = t97760*t97691*t97688;
            double t97829 = t97827+t97828+1.0;
            double t97830 = 1.0/t97829;
            double t97831 = 1.0/t97730;
            double t97832 = 1.0/(t97718*t97718);
            double t97833 = b4f*t97700*t97725*(2.0/3.0);
            double t97834 = b2f*c*t97719*(1.0/3.0);
            double t97835 = b1f*c*t97726*t97719*(1.0/6.0);
            double t97836 = b3f*c*t97711*t97719*(1.0/2.0);
            double t97837 = t97833+t97834+t97835+t97836;
            double t97838 = a1f*c*c0f*t97754*t97719*(2.0/3.0);
            double t97839 = a1p*c*c0p*t97744*t97719*(2.0/3.0);
            double t97840 = ccaa1*gamma_aa[index]*gcaa*t97821*t97687;
            double t97841 = ccaa3*gamma_aa[index]*gcaa*t97760*t97690*t97826*t97688;
            double t97842 = ccaa2*t97830*t97760*t97691*t97688;
            double t97843 = ccaa0+t97840+t97841+t97842;
            v_rho_a_[index] = -(ccab0+ccab1*gamma_aa[index]*gcab*t97809*t97687+ccab2*t97691*t97818*t97688*t97689+ \
               ccab3*gamma_aa[index]*gcab*t97814*t97690*t97688*t97689)*(rho_a[index]*((1.0/(t97703*t97703)*t97747* \
               (b4p*t97700*1.0/pow(t97692,5.0/3.0)*(2.0/3.0)+b2p*c*t97704*(1.0/3.0)+b3p*c*t97704*t97695*(1.0/2.0) \
               +b1p*c*t97704*1.0/sqrt(t97694)*(1.0/6.0)))/t97708-a1p*c*c0p*t97704*t97745*(2.0/3.0))*2.0+rho_a[index]* \
               (-t97743+t97839+t97750*t97753*(t97743+t97838-t97831*t97832*t97756*t97837-a1p*c*c0p*t97744*t97719*(2.0/ \
               3.0)))-c0p*t97735*t97744*2.0+c0p*t97745*t97747*2.0-t97750*t97753*t97758)-t97806*t97843-(rho_a[index]* \
               t97806*2.0-c0p*rho_a[index]*t97745*t97747*4.0)*(ccab1*gamma_aa[index]*gcab*t97809*t97788*(4.0/3.0) \
               +ccab2*t97818*t97688*t97787*t97689*(8.0/3.0)-ccab1*1.0/(t97808*t97808)*t97688*t97787*t97689*(4.0/3.0) \
               -ccab2*t97691*1.0/(t97817*t97817)*t97688*t97689*(gamma_aa[index]*gcab*t97788*(8.0/3.0)+t97688*t97787* \
               t97689*(8.0/3.0))+ccab3*gamma_aa[index]*gcab*t97814*t97688*t97689*t97789*4.0-ccab3*gamma_aa[index]* \
               gcab*1.0/(t97813*t97813)*t97690*t97688*t97689*(gamma_aa[index]*gcab*t97788*4.0+t97688*t97787*t97689* \
               8.0+gamma_aa[index]*gcab*t97688*t97689*t97789*4.0))-(X-1.0)*(c0*pow(rho_a[index],1.0/3.0)*(cx0+t97793* \
               t97786+cx1*gamma_aa[index]*gx*t97771*t97687+cx2*t97780*t97691*t97768*t97688+cx3*gamma_aa[index]*gx* \
               t97690*t97776*t97768*t97688)*(4.0/3.0)-c0*pow(rho_a[index],4.0/3.0)*(t97786*(cxnl1*gamma_aa[index]* \
               gx*t97771*t97788*(8.0/3.0)+cxnl2*t97780*t97768*t97688*t97787*(1.6E1/3.0)-cxnl1*t97768*t97795*t97688* \
               t97787*(8.0/3.0)-cxnl2*t97803*t97804*t97691*t97768*t97688+cxnl3*gamma_aa[index]*gx*t97776*t97768*t97688* \
               t97789*8.0-cxnl3*gamma_aa[index]*gx*t97800*t97690*t97768*t97688*t97799)-t97793*(C_k*t97762*t97781* \
               t97794*(5.0/3.0)-C_k*t97762*t97765*t97783*t97794*1.0E1+C_k*t97762*t97784*t97767*t97794*(2.5E1/3.0) \
               -C_k*t97762*t97764*1.0/(t97766*t97766)*t97794*(5.0/3.0)+C_k*t97762*t97764*t97765*1.0/(t97766*t97766* \
               t97766*t97766)*t97794*1.0E1-C_k*t97762*t97764*1.0/(t97766*t97766*t97766*t97766*t97766*t97766)*t97767* \
               t97794*(2.5E1/3.0))+cx1*gamma_aa[index]*gx*t97771*t97788*(8.0/3.0)-cx1*t97768*t97795*t97688*t97787* \
               (8.0/3.0)+cx2*t97780*t97768*t97688*t97787*(1.6E1/3.0)-cx2*t97803*t97804*t97691*t97768*t97688+cx3*gamma_aa[index]* \
               gx*t97776*t97768*t97688*t97789*8.0-cx3*gamma_aa[index]*gx*t97800*t97690*t97768*t97688*t97799))+rho_a[index]* \
               t97843*(-t97743+t97839+t97750*t97753*(t97743+t97838-t97839-t97831*t97832*t97756*t97837))+rho_a[index]* \
               t97806*(ccaa1*gamma_aa[index]*gcaa*t97821*t97788*(8.0/3.0)+ccaa2*t97830*t97760*t97688*t97787*(1.6E1/ \
               3.0)-ccaa1*1.0/(t97820*t97820)*t97760*t97688*t97787*(8.0/3.0)-ccaa2*t97760*t97691*1.0/(t97829*t97829) \
               *t97688*(gamma_aa[index]*gcaa*t97788*(1.6E1/3.0)+t97760*t97688*t97787*(1.6E1/3.0))+ccaa3*gamma_aa[index]* \
               gcaa*t97760*t97826*t97688*t97789*8.0-ccaa3*gamma_aa[index]*gcaa*t97760*t97690*1.0/(t97825*t97825)* \
               t97688*(gamma_aa[index]*gcaa*t97788*8.0+t97760*t97688*t97787*1.6E1+gamma_aa[index]*gcaa*t97760*t97688* \
               t97789*8.0));
        } else {
            v_rho_a_[index] = 0.0;
        } 

        if (is_gga_) {

            if (rho_a[index] > cutoff_) {
                double t97845 = 1.0/pow(rho_a[index],1.0/3.0);
                double t97846 = c*t97845;
                double t97847 = sqrt(t97846);
                double t97848 = pow(t97846,3.0/2.0);
                double t97849 = c*c;
                double t97850 = 1.0/pow(rho_a[index],2.0/3.0);
                double t97851 = 1.0/c0p;
                double t97852 = b1p*t97847;
                double t97853 = b3p*t97848;
                double t97854 = b4p*t97850*t97849;
                double t97855 = b2p*c*t97845;
                double t97856 = t97852+t97853+t97854+t97855;
                double t97857 = 1.0/t97856;
                double t97858 = t97851*t97857*(1.0/2.0);
                double t97859 = t97858+1.0;
                double t97860 = log(t97859);
                double t97861 = a1p*c*t97845;
                double t97862 = t97861+1.0;
                double t97863 = rho_a[index]*2.0;
                double t97864 = 1.0/pow(t97863,1.0/3.0);
                double t97865 = c*t97864;
                double t97866 = 1.0/pow(rho_a[index],8.0/3.0);
                double t97867 = gcab*gcab;
                double t97868 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t97869 = gamma_aa[index]*gamma_aa[index];
                double t97870 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t97871 = gamma_aa[index]*gcab*t97866;
                double t97872 = t97871+1.0;
                double t97873 = gamma_aa[index]*gcab*t97866*3.0;
                double t97874 = gamma_aa[index]*gcab*t97870*t97867*t97869;
                double t97875 = t97867*t97868*t97869*3.0;
                double t97876 = t97873+t97874+t97875+1.0;
                double t97877 = gamma_aa[index]*gcab*t97866*2.0;
                double t97878 = t97867*t97868*t97869;
                double t97879 = t97877+t97878+1.0;
                double t97880 = pow(2.0,1.0/3.0);
                double t97881 = t97880*2.0;
                double t97882 = t97881-2.0;
                double t97883 = two_13*2.0;
                double t97884 = t97883-2.0;
                double t97885 = 1.0/t97884;
                double t97886 = 1.0/c0f;
                double t97887 = b1f*t97847;
                double t97888 = b3f*t97848;
                double t97889 = b4f*t97850*t97849;
                double t97890 = b2f*c*t97845;
                double t97891 = t97890+t97887+t97888+t97889;
                double t97892 = 1.0/t97891;
                double t97893 = t97892*t97886*(1.0/2.0);
                double t97894 = t97893+1.0;
                double t97895 = log(t97894);
                double t97896 = a1f*c*t97845;
                double t97897 = t97896+1.0;
                double t97898 = c0f*t97895*t97897*2.0;
                double t97899 = c0p*t97860*t97862*2.0;
                double t97900 = gcaa*gcaa;
                double t97901 = gamma_aa[index]*gcaa*t97866;
                double t97902 = t97901+1.0;
                double t97903 = gamma_aa[index]*gcaa*t97866*3.0;
                double t97904 = gamma_aa[index]*gcaa*t97900*t97870*t97869;
                double t97905 = t97900*t97868*t97869*3.0;
                double t97906 = t97903+t97904+t97905+1.0;
                double t97907 = gamma_aa[index]*gcaa*t97866*2.0;
                double t97908 = t97900*t97868*t97869;
                double t97909 = t97907+t97908+1.0;
                double t97910 = pow(rho_a[index],5.0/3.0);
                double t97911 = 1.0/tau_a[index];
                double t97912 = C_k*t97910*t97911;
                double t97913 = t97912-1.0;
                double t97914 = t97913*t97913;
                double t97915 = t97912+1.0;
                double t97916 = t97914*t97914;
                double t97917 = gx*gx;
                double t97918 = gamma_aa[index]*gx*t97866;
                double t97919 = t97918+1.0;
                double t97920 = gamma_aa[index]*gx*t97866*3.0;
                double t97921 = gamma_aa[index]*gx*t97870*t97917*t97869;
                double t97922 = t97917*t97868*t97869*3.0;
                double t97923 = t97920+t97921+t97922+1.0;
                double t97924 = gamma_aa[index]*gx*t97866*2.0;
                double t97925 = t97917*t97868*t97869;
                double t97926 = t97924+t97925+1.0;
                double t97927 = 1.0/t97919;
                double t97928 = 1.0/t97926;
                double t97929 = 1.0/t97923;
                double t97930 = 1.0/(t97919*t97919);
                double t97931 = gx*t97866*3.0;
                double t97932 = gamma_aa[index]*t97917*t97868*6.0;
                double t97933 = gx*t97870*t97917*t97869*3.0;
                double t97934 = t97931+t97932+t97933;
                double t97935 = 1.0/(t97923*t97923);
                double t97936 = gx*t97866*2.0;
                double t97937 = gamma_aa[index]*t97917*t97868*2.0;
                double t97938 = t97936+t97937;
                double t97939 = 1.0/(t97926*t97926);
                v_gamma_aa_[index] = (rho_a[index]*(t97899+t97882*t97885*(t97898-c0p*t97860*t97862*2.0))*2.0-c0p* \
                   rho_a[index]*log((t97851*(1.0/2.0))/(b1p*sqrt(t97865)+b3p*pow(t97865,3.0/2.0)+b4p*1.0/pow(t97863,2.0/ \
                   3.0)*t97849+b2p*c*t97864)+1.0)*(a1p*c*t97864+1.0)*4.0)*((ccab1*gcab*t97866*(1.0/2.0))/t97872-ccab1* \
                   gamma_aa[index]*1.0/(t97872*t97872)*t97867*t97868*(1.0/2.0)+(ccab2*gamma_aa[index]*t97867*t97868)/ \
                   t97879-ccab2*t97867*t97868*t97869*1.0/(t97879*t97879)*(gcab*t97866+gamma_aa[index]*t97867*t97868)+ \
                   (ccab3*gcab*t97870*t97867*t97869*(3.0/2.0))/t97876-ccab3*gamma_aa[index]*gcab*t97870*t97867*1.0/(t97876* \
                   t97876)*t97869*(gcab*t97866*(3.0/2.0)+gamma_aa[index]*t97867*t97868*3.0+gcab*t97870*t97867*t97869* \
                   (3.0/2.0)))*2.0-rho_a[index]*(t97899+t97882*t97885*(t97898-t97899))*((ccaa1*gcaa*t97866)/t97902-ccaa1* \
                   gamma_aa[index]*t97900*1.0/(t97902*t97902)*t97868+(ccaa2*gamma_aa[index]*t97900*t97868*2.0)/t97909- \
                   ccaa2*t97900*1.0/(t97909*t97909)*t97868*t97869*(gcaa*t97866*2.0+gamma_aa[index]*t97900*t97868*2.0) \
                   +(ccaa3*gcaa*t97900*t97870*t97869*3.0)/t97906-ccaa3*gamma_aa[index]*gcaa*t97900*t97870*1.0/(t97906* \
                   t97906)*t97869*(gcaa*t97866*3.0+gamma_aa[index]*t97900*t97868*6.0+gcaa*t97900*t97870*t97869*3.0))* \
                   2.0-c0*pow(rho_a[index],4.0/3.0)*(X-1.0)*((t97913/t97915-t97913*t97914*1.0/(t97915*t97915*t97915)* \
                   2.0+t97913*1.0/(t97915*t97915*t97915*t97915*t97915)*t97916)*(cxnl1*gx*t97927*t97866-cxnl1*gamma_aa[index]* \
                   t97930*t97917*t97868+cxnl2*gamma_aa[index]*t97917*t97928*t97868*2.0-cxnl2*t97917*t97938*t97939*t97868* \
                   t97869+cxnl3*gx*t97870*t97917*t97929*t97869*3.0-cxnl3*gamma_aa[index]*gx*t97870*t97934*t97917*t97935* \
                   t97869)+cx1*gx*t97927*t97866-cx1*gamma_aa[index]*t97930*t97917*t97868+cx2*gamma_aa[index]*t97917*t97928* \
                   t97868*2.0-cx2*t97917*t97938*t97939*t97868*t97869+cx3*gx*t97870*t97917*t97929*t97869*3.0-cx3*gamma_aa[index]* \
                   gx*t97870*t97934*t97917*t97935*t97869)*2.0;
            } else {
                v_gamma_aa_[index] = 0.0;
            } 

        }
        if (is_meta_) {

            //V_tau_a
            if (rho_a[index] > cutoff_) {
                double t97941 = 1.0/pow(rho_a[index],8.0/3.0);
                double t97942 = gamma_aa[index]*gamma_aa[index];
                double t97943 = gx*gx;
                double t97944 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t97945 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t97946 = pow(rho_a[index],5.0/3.0);
                double t97947 = 1.0/(tau_a[index]*tau_a[index]);
                double t97948 = 1.0/tau_a[index];
                double t97949 = C_k*t97946*t97948;
                double t97950 = t97949-1.0;
                double t97951 = t97949+1.0;
                double t97952 = t97950*t97950;
                double t97953 = t97952*t97952;
                v_tau_a_[index] = c0*pow(rho_a[index],4.0/3.0)*(X-1.0)*(cxnl0+(cxnl2*t97942*t97943*t97945)/(gamma_aa[index]* \
                   gx*t97941*2.0+t97942*t97943*t97945+1.0)+(cxnl1*gamma_aa[index]*gx*t97941)/(gamma_aa[index]*gx*t97941+ \
                   1.0)+(cxnl3*gamma_aa[index]*gx*t97942*t97943*t97944)/(gamma_aa[index]*gx*t97941*3.0+t97942*t97943* \
                   t97945*3.0+gamma_aa[index]*gx*t97942*t97943*t97944+1.0))*((C_k*t97946*t97947)/t97951-C_k*t97950*1.0/ \
                   (t97951*t97951)*t97946*t97947-C_k*1.0/(t97951*t97951*t97951)*t97952*t97946*t97947*6.0+C_k*1.0/(t97951* \
                   t97951*t97951*t97951*t97951)*t97953*t97946*t97947*5.0+C_k*t97950*1.0/(t97951*t97951*t97951*t97951) \
                   *t97952*t97946*t97947*6.0-C_k*t97950*1.0/(t97951*t97951*t97951*t97951*t97951*t97951)*t97953*t97946* \
                   t97947*5.0);
            } else {
                v_tau_a_[index] = 0.0;
            } 

        }
    }
    //Second Partials
    for (int index = 0; index < ntrue && deriv_ >= 2; index++) {

        //V_rho_a_rho_a
        if (rho_a[index] > cutoff_) {
            double t97955 = rho_a[index]*2.0;
            double t97956 = 1.0/pow(t97955,1.0/3.0);
            double t97957 = c*t97956;
            double t97958 = sqrt(t97957);
            double t97959 = b1p*t97958;
            double t97960 = pow(t97957,3.0/2.0);
            double t97961 = b3p*t97960;
            double t97962 = b2p*c*t97956;
            double t97963 = c*c;
            double t97964 = 1.0/pow(t97955,2.0/3.0);
            double t97965 = b4p*t97963*t97964;
            double t97966 = t97961+t97962+t97965+t97959;
            double t97967 = 1.0/pow(t97955,8.0/3.0);
            double t97968 = 1.0/pow(t97955,7.0/3.0);
            double t97969 = 1.0/sqrt(t97957);
            double t97970 = 1.0/c0p;
            double t97971 = 1.0/t97966;
            double t97972 = t97970*t97971*(1.0/2.0);
            double t97973 = t97972+1.0;
            double t97974 = 1.0/t97973;
            double t97975 = a1p*c*t97956;
            double t97976 = t97975+1.0;
            double t97977 = 1.0/pow(t97955,4.0/3.0);
            double t97979 = b2p*c*t97977*(1.0/3.0);
            double t97980 = 1.0/pow(t97955,5.0/3.0);
            double t97981 = b4p*t97980*t97963*(2.0/3.0);
            double t97982 = b1p*c*t97977*t97969*(1.0/6.0);
            double t97983 = b3p*c*t97958*t97977*(1.0/2.0);
            double t97978 = t97981+t97982+t97983+t97979;
            double t97984 = t97978*t97978;
            double t97985 = 1.0/(t97966*t97966);
            double t97986 = log(t97973);
            double t97987 = 1.0/pow(rho_a[index],8.0/3.0);
            double t97988 = gamma_aa[index]*gamma_aa[index];
            double t97989 = gcab*gcab;
            double t97990 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]);
            double t97991 = 1.0/pow(rho_a[index],1.6E1/3.0);
            double t97992 = two_13*2.0;
            double t97993 = t97992-2.0;
            double t97994 = 1.0/t97993;
            double t97995 = 1.0/pow(rho_a[index],1.0/3.0);
            double t97996 = c*t97995;
            double t97997 = sqrt(t97996);
            double t97998 = b1f*t97997;
            double t97999 = pow(t97996,3.0/2.0);
            double t98000 = b3f*t97999;
            double t98001 = 1.0/pow(rho_a[index],2.0/3.0);
            double t98002 = b4f*t97963*t98001;
            double t98003 = b2f*c*t97995;
            double t98004 = t97998+t98000+t98002+t98003;
            double t98005 = 1.0/pow(rho_a[index],4.0/3.0);
            double t98006 = b1p*t97997;
            double t98007 = b3p*t97999;
            double t98008 = b4p*t97963*t98001;
            double t98009 = b2p*c*t97995;
            double t98010 = t98006+t98007+t98008+t98009;
            double t98011 = 1.0/pow(rho_a[index],5.0/3.0);
            double t98012 = 1.0/sqrt(t97996);
            double t98013 = 1.0/c0f;
            double t98014 = 1.0/t98004;
            double t98015 = t98013*t98014*(1.0/2.0);
            double t98016 = t98015+1.0;
            double t98017 = 1.0/t98010;
            double t98018 = t97970*t98017*(1.0/2.0);
            double t98019 = t98018+1.0;
            double t98020 = a1p*c*t97995;
            double t98021 = t98020+1.0;
            double t98022 = 1.0/t98019;
            double t98023 = 1.0/(t98010*t98010);
            double t98024 = b4p*t97963*t98011*(2.0/3.0);
            double t98025 = b2p*c*t98005*(1.0/3.0);
            double t98026 = b1p*c*t98012*t98005*(1.0/6.0);
            double t98027 = b3p*c*t97997*t98005*(1.0/2.0);
            double t98028 = t98024+t98025+t98026+t98027;
            double t98029 = t98021*t98022*t98023*t98028;
            double t98030 = log(t98019);
            double t98031 = gcaa*gcaa;
            double t98032 = pow(2.0,1.0/3.0);
            double t98033 = t98032*2.0;
            double t98034 = t98033-2.0;
            double t98035 = log(t98016);
            double t98036 = a1f*c*t97995;
            double t98037 = t98036+1.0;
            double t98038 = gamma_aa[index]*gcab*t97987*3.0;
            double t98039 = gamma_aa[index]*gcab*t97990*t97988*t97989;
            double t98040 = t97991*t97988*t97989*3.0;
            double t98041 = t98040+t98038+t98039+1.0;
            double t98042 = 1.0/t98041;
            double t98043 = gamma_aa[index]*gcab*t97987*2.0;
            double t98044 = t97991*t97988*t97989;
            double t98045 = t98043+t98044+1.0;
            double t98046 = 1.0/t98045;
            double t98047 = 1.0/pow(rho_a[index],1.0E1);
            double t98048 = gamma_aa[index]*gcab*t97987;
            double t98049 = t98048+1.0;
            double t98050 = 1.0/pow(rho_a[index],2.2E1/3.0);
            double t98052 = 1.0/pow(rho_a[index],1.1E1/3.0);
            double t98054 = 1.0/pow(rho_a[index],1.9E1/3.0);
            double t98060 = gamma_aa[index]*gcab*t98052*(8.0/3.0);
            double t98061 = t97988*t97989*t98054*(8.0/3.0);
            double t98051 = t98060+t98061;
            double t98053 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]*rho_a[index]);
            double t98055 = 1.0/(t98041*t98041);
            double t98056 = gamma_aa[index]*gcab*t98052*4.0;
            double t98057 = gamma_aa[index]*gcab*t97988*t97989*t98053*4.0;
            double t98058 = t97988*t97989*t98054*8.0;
            double t98059 = t98056+t98057+t98058;
            double t98062 = 1.0/(t98045*t98045);
            double t98063 = c0f*t98035*t98037*2.0;
            double t98064 = c0p*t98021*t98030*2.0;
            double t98065 = 1.0/t98049;
            double t98066 = 1.0/(t98049*t98049*t98049);
            double t98067 = ccab1*gamma_aa[index]*gcab*t97988*t97989*t98047*t98066*(3.2E1/9.0);
            double t98068 = 1.0/(t98049*t98049);
            double t98069 = t98051*t98051;
            double t98070 = 1.0/(t98045*t98045*t98045);
            double t98071 = ccab2*t97991*t97988*t97989*t98070*t98069*2.0;
            double t98072 = 1.0/pow(rho_a[index],1.4E1/3.0);
            double t98073 = t98059*t98059;
            double t98074 = 1.0/(t98041*t98041*t98041);
            double t98075 = ccab3*gamma_aa[index]*gcab*t97990*t97988*t97989*t98073*t98074*2.0;
            double t98076 = 1.0/t98016;
            double t98077 = 1.0/(t98004*t98004);
            double t98078 = b4f*t97963*t98011*(2.0/3.0);
            double t98079 = b2f*c*t98005*(1.0/3.0);
            double t98080 = b1f*c*t98012*t98005*(1.0/6.0);
            double t98081 = b3f*c*t97997*t98005*(1.0/2.0);
            double t98082 = t98080+t98081+t98078+t98079;
            double t98083 = a1f*c*c0f*t98005*t98035*(2.0/3.0);
            double t98084 = a1p*c*c0p*t98030*t98005*(2.0/3.0);
            double t98085 = t98063-t98064;
            double t98086 = t97994*t98034*t98085;
            double t98087 = ccab1*gamma_aa[index]*gcab*t97987*t98065;
            double t98088 = ccab3*gamma_aa[index]*gcab*t97990*t97988*t97989*t98042;
            double t98089 = ccab2*t97991*t97988*t97989*t98046;
            double t98090 = ccab0+t98087+t98088+t98089;
            double t98091 = b2p*c*t97968*(4.0/9.0);
            double t98092 = b4p*t97963*t97967*(1.0E1/9.0);
            double t98093 = 1.0/pow(t97957,3.0/2.0);
            double t98094 = b3p*t97963*t97967*t97969*(1.0/1.2E1);
            double t98095 = b1p*c*t97968*t97969*(2.0/9.0);
            double t98096 = b3p*c*t97958*t97968*(2.0/3.0);
            double t98097 = t98091+t98092+t98094+t98095+t98096-b1p*t97963*t97967*t98093*(1.0/3.6E1);
            double t98098 = t97974*t97976*t97985*t98097;
            double t98099 = 1.0/(t97966*t97966*t97966);
            double t98100 = 1.0/(t97973*t97973);
            double t98101 = 1.0/(t97966*t97966*t97966*t97966);
            double t98102 = t97970*t97984*t97976*t98100*t98101*(1.0/2.0);
            double t98103 = 1.0/d2fz0;
            double t98104 = 1.0/(rho_a[index]*rho_a[index]);
            double t98105 = 1.0/Aa;
            double t98106 = b1a*t97958;
            double t98107 = b3a*t97960;
            double t98108 = b2a*c*t97956;
            double t98109 = b4a*t97963*t97964;
            double t98110 = t98106+t98107+t98108+t98109;
            double t98111 = 1.0/t98110;
            double t98112 = t98111*t98105*(1.0/2.0);
            double t98113 = t98112+1.0;
            double t98114 = log(t98113);
            double t98115 = a1a*c*t97956;
            double t98116 = t98115+1.0;
            double t98117 = a1p*c*t97974*t97985*t97977*t97978*(2.0/3.0);
            double t98118 = 1.0/pow(rho_a[index],7.0/3.0);
            double t98119 = 1.0/pow(t97996,3.0/2.0);
            double t98120 = t98082*t98082;
            double t98121 = t98028*t98028;
            double t98122 = 1.0/(t98010*t98010*t98010);
            double t98123 = t98021*t98022*t98121*t98122*2.0;
            double t98124 = b4p*t97963*t97987*(1.0E1/9.0);
            double t98125 = b2p*c*t98118*(4.0/9.0);
            double t98126 = b3p*t97963*t97987*t98012*(1.0/1.2E1);
            double t98127 = b1p*c*t98012*t98118*(2.0/9.0);
            double t98128 = b3p*c*t97997*t98118*(2.0/3.0);
            double t98243 = b1p*t97963*t97987*t98119*(1.0/3.6E1);
            double t98129 = t98124+t98125+t98126-t98243+t98127+t98128;
            double t98130 = 1.0/(t98019*t98019);
            double t98131 = 1.0/(t98010*t98010*t98010*t98010);
            double t98132 = a1p*c*c0p*t98030*t98118*(8.0/9.0);
            double t98226 = t98037*t98082*t98076*t98077;
            double t98133 = -t98226+t98029+t98083-t98084;
            double t98134 = a1p*c*c0p*t97977*t97986*(4.0/3.0);
            double t98135 = pow(rho_a[index],5.0/3.0);
            double t98136 = 1.0/tau_a[index];
            double t98137 = C_k*t98135*t98136;
            double t98138 = t98137-1.0;
            double t98139 = t98138*t98138;
            double t98140 = t98137+1.0;
            double t98141 = t98139*t98139;
            double t98142 = gx*gx;
            double t98143 = gamma_aa[index]*gx*t97987;
            double t98144 = t98143+1.0;
            double t98145 = 1.0/t98144;
            double t98146 = gamma_aa[index]*gx*t97987*3.0;
            double t98147 = gamma_aa[index]*gx*t97990*t97988*t98142;
            double t98148 = t97991*t97988*t98142*3.0;
            double t98149 = t98146+t98147+t98148+1.0;
            double t98150 = 1.0/t98149;
            double t98151 = gamma_aa[index]*gx*t97987*2.0;
            double t98152 = t97991*t97988*t98142;
            double t98153 = t98151+t98152+1.0;
            double t98154 = 1.0/t98153;
            double t98155 = cxnl1*gamma_aa[index]*gx*t97987*t98145;
            double t98156 = cxnl3*gamma_aa[index]*gx*t97990*t97988*t98150*t98142;
            double t98157 = cxnl2*t97991*t97988*t98142*t98154;
            double t98158 = cxnl0+t98155+t98156+t98157;
            double t98159 = 1.0/t98140;
            double t98160 = pow(rho_a[index],4.0/3.0);
            double t98161 = 1.0/(t98140*t98140*t98140);
            double t98162 = 1.0/(t98140*t98140*t98140*t98140*t98140);
            double t98163 = C_k*C_k;
            double t98164 = 1.0/(tau_a[index]*tau_a[index]);
            double t98165 = 1.0/(t98140*t98140*t98140*t98140);
            double t98166 = 1.0/(t98140*t98140*t98140*t98140*t98140*t98140);
            double t98167 = 1.0/(t98140*t98140);
            double t98168 = t98138*t98159;
            double t98169 = t98141*t98162*t98138;
            double t98194 = t98161*t98138*t98139*2.0;
            double t98170 = -t98194+t98168+t98169;
            double t98177 = gamma_aa[index]*gx*t98052*(1.6E1/3.0);
            double t98178 = t97988*t98142*t98054*(1.6E1/3.0);
            double t98171 = t98177+t98178;
            double t98172 = 1.0/(t98149*t98149);
            double t98173 = gamma_aa[index]*gx*t98052*8.0;
            double t98174 = gamma_aa[index]*gx*t97988*t98142*t98053*8.0;
            double t98175 = t97988*t98142*t98054*1.6E1;
            double t98176 = t98173+t98174+t98175;
            double t98179 = 1.0/(t98153*t98153);
            double t98180 = pow(rho_a[index],2.0/3.0);
            double t98181 = 1.0/(t98144*t98144);
            double t98182 = 1.0/(t98144*t98144*t98144);
            double t98183 = t98171*t98171;
            double t98184 = 1.0/(t98153*t98153*t98153);
            double t98185 = gamma_aa[index]*gx*t98072*(8.8E1/3.0);
            double t98186 = gamma_aa[index]*gx*t97988*t98142*t98047*7.2E1;
            double t98187 = t97988*t98050*t98142*(3.04E2/3.0);
            double t98188 = t98185+t98186+t98187;
            double t98189 = t98176*t98176;
            double t98190 = 1.0/(t98149*t98149*t98149);
            double t98191 = gamma_aa[index]*gx*t98072*(1.76E2/9.0);
            double t98192 = t97988*t98050*t98142*(3.04E2/9.0);
            double t98193 = t98191+t98192;
            double t98195 = cxnl1*gamma_aa[index]*gx*t98052*t98145*(8.0/3.0);
            double t98196 = cxnl3*gamma_aa[index]*gx*t97988*t98150*t98142*t98053*8.0;
            double t98197 = cxnl2*t97988*t98142*t98054*t98154*(1.6E1/3.0);
            double t98198 = t98195+t98196+t98197-cxnl1*t97988*t98142*t98054*t98181*(8.0/3.0)-cxnl2*t97991*t97988* \
               t98142*t98171*t98179-cxnl3*gamma_aa[index]*gx*t97990*t97988*t98142*t98172*t98176;
            double t98199 = C_k*t98180*t98136*t98159*(5.0/3.0);
            double t98200 = C_k*t98180*t98136*t98138*t98165*t98139*1.0E1;
            double t98201 = C_k*t98141*t98162*t98180*t98136*(2.5E1/3.0);
            double t98202 = t98200+t98201+t98199-C_k*t98161*t98180*t98136*t98139*1.0E1-C_k*t98180*t98136*t98138* \
               t98167*(5.0/3.0)-C_k*t98141*t98180*t98136*t98138*t98166*(2.5E1/3.0);
            double t98203 = t98064+t98086;
            double t98204 = gamma_aa[index]*gcaa*t97987;
            double t98205 = t98204+1.0;
            double t98206 = 1.0/t98205;
            double t98207 = gamma_aa[index]*gcaa*t97987*3.0;
            double t98208 = gamma_aa[index]*gcaa*t97990*t97988*t98031;
            double t98209 = t97991*t97988*t98031*3.0;
            double t98210 = t98207+t98208+t98209+1.0;
            double t98211 = 1.0/t98210;
            double t98212 = gamma_aa[index]*gcaa*t97987*2.0;
            double t98213 = t97991*t97988*t98031;
            double t98214 = t98212+t98213+1.0;
            double t98215 = 1.0/t98214;
            double t98216 = 1.0/(t98205*t98205);
            double t98217 = gamma_aa[index]*gcaa*t98052*(1.6E1/3.0);
            double t98218 = t97988*t98031*t98054*(1.6E1/3.0);
            double t98219 = t98217+t98218;
            double t98220 = gamma_aa[index]*gcaa*t98052*8.0;
            double t98221 = gamma_aa[index]*gcaa*t97988*t98031*t98053*8.0;
            double t98222 = t97988*t98031*t98054*1.6E1;
            double t98223 = t98220+t98221+t98222;
            double t98224 = 1.0/(t98210*t98210);
            double t98225 = 1.0/(t98214*t98214);
            double t98227 = ccaa1*gamma_aa[index]*gcaa*t98052*t98206*(8.0/3.0);
            double t98228 = ccaa3*gamma_aa[index]*gcaa*t97988*t98031*t98211*t98053*8.0;
            double t98229 = ccaa2*t97988*t98031*t98215*t98054*(1.6E1/3.0);
            double t98230 = t98227+t98228+t98229-ccaa1*t97988*t98031*t98054*t98216*(8.0/3.0)-ccaa2*t97991*t97988* \
               t98031*t98225*t98219-ccaa3*gamma_aa[index]*gcaa*t97990*t97988*t98031*t98223*t98224;
            double t98231 = ccaa1*gamma_aa[index]*gcaa*t97987*t98206;
            double t98232 = ccaa3*gamma_aa[index]*gcaa*t97990*t97988*t98031*t98211;
            double t98233 = ccaa2*t97991*t97988*t98031*t98215;
            double t98234 = ccaa0+t98231+t98232+t98233;
            double t98235 = 1.0/(t98004*t98004*t98004);
            double t98236 = b4f*t97963*t97987*(1.0E1/9.0);
            double t98237 = b2f*c*t98118*(4.0/9.0);
            double t98238 = b3f*t97963*t97987*t98012*(1.0/1.2E1);
            double t98239 = b1f*c*t98012*t98118*(2.0/9.0);
            double t98240 = b3f*c*t97997*t98118*(2.0/3.0);
            double t98241 = t98240+t98236+t98237+t98238+t98239-b1f*t97963*t97987*t98119*(1.0/3.6E1);
            double t98242 = t98241*t98037*t98076*t98077;
            double t98244 = t98021*t98022*t98023*t98129;
            double t98245 = 1.0/(t98016*t98016);
            double t98246 = 1.0/(t98004*t98004*t98004*t98004);
            double t98247 = t98120*t98013*t98037*t98245*t98246*(1.0/2.0);
            double t98248 = t97970*t98021*t98121*t98130*t98131*(1.0/2.0);
            double t98249 = a1f*c*t98005*t98082*t98076*t98077*(2.0/3.0);
            double t98250 = a1p*c*t98022*t98005*t98023*t98028*(2.0/3.0);
            v_rho_a_rho_a_[index] = (rho_a[index]*(t98064+t97994*t98034*(t98063-c0p*t98021*t98030*2.0))*2.0-c0p* \
               rho_a[index]*t97976*t97986*4.0)*(t98071+t98075+t98067+ccab2*t97988*t97989*t98050*t98046*(3.2E1/9.0) \
               -ccab1*t97988*t97989*t98050*t98068*(3.2E1/9.0)-ccab2*1.0/pow(rho_a[index],3.8E1/3.0)*(t97988*t97988) \
               *(t97989*t97989)*t98062*(3.2E1/9.0)-ccab2*t97988*t97989*t98051*t98062*t98054*(1.6E1/3.0)+ccab3*gamma_aa[index]* \
               gcab*t97988*t97989*t98042*t98047*(3.2E1/3.0)-ccab3*gamma_aa[index]*gcab*t97990*t97988*t97989*t98055* \
               (t97988*t97989*t98050*(3.2E1/3.0)+gamma_aa[index]*gcab*t97988*t97989*t98047*(3.2E1/3.0))-ccab3*gamma_aa[index]* \
               gcab*t97988*t97989*t98053*t98055*t98059*8.0)-t98090*(-t98134-rho_a[index]*(t98102+t98117+t98098-t97974* \
               t97984*t97976*t98099*2.0-a1p*c*c0p*t97968*t97986*(8.0/9.0)+Aa*t97994*t98103*t98104*t98114*t98116*(4.0/ \
               9.0))*2.0+rho_a[index]*(-t98123-t98132+t98250+t98244+t98248+t97994*t98034*(t98123+t98132+t98242+t98247+ \
               t98249-t98021*t98022*t98023*t98129-t98120*t98037*t98235*t98076*2.0-a1f*c*c0f*t98035*t98118*(8.0/9.0) \
               -t97970*t98021*t98121*t98130*t98131*(1.0/2.0)-a1p*c*t98022*t98005*t98023*t98028*(2.0/3.0)))+t97994* \
               t98034*t98133*2.0+t97974*t97976*t97985*t97978*2.0-t98021*t98022*t98023*t98028*2.0+a1p*c*c0p*t98030* \
               t98005*(4.0/3.0))+t98203*t98230*2.0+(-t98064-t98086+rho_a[index]*(-t98029+t98084+t97994*t98034*t98133) \
               +rho_a[index]*(t97974*t97976*t97985*t97978-a1p*c*c0p*t97977*t97986*(2.0/3.0))*2.0+c0p*t97976*t97986* \
               2.0)*(ccab1*gamma_aa[index]*gcab*t98052*t98065*(4.0/3.0)+ccab2*t97988*t97989*t98054*t98046*(8.0/3.0) \
               -ccab1*t97988*t97989*t98054*t98068*(4.0/3.0)-ccab2*t97991*t97988*t97989*t98051*t98062+ccab3*gamma_aa[index]* \
               gcab*t97988*t97989*t98042*t98053*4.0-ccab3*gamma_aa[index]*gcab*t97990*t97988*t97989*t98055*t98059) \
               *4.0+t98234*(-t98029+t98084+t97994*t98034*(t98029+t98083-t98037*t98082*t98076*t98077-a1p*c*c0p*t98030* \
               t98005*(2.0/3.0)))*2.0-(X-1.0)*(-c0*t98160*(t98158*(t98160*t98163*t98164*t98167*(5.0E1/9.0)-C_k*t97995* \
               t98136*t98159*(1.0E1/9.0)-C_k*t97995*t98141*t98162*t98136*(5.0E1/9.0)+C_k*t97995*t98161*t98136*t98139* \
               (2.0E1/3.0)+C_k*t97995*t98136*t98138*t98167*(1.0E1/9.0)+t98141*t98160*t98163*t98164*t98166*(1.25E3/ \
               9.0)+t98160*t98161*t98163*t98164*t98138*(2.5E2/9.0)-t98160*t98163*t98164*t98165*t98139*1.0E2+t98160* \
               t98162*t98163*t98164*t98138*t98139*(1.0E2/9.0)-1.0/(t98140*t98140*t98140*t98140*t98140*t98140*t98140) \
               *t98141*t98160*t98163*t98164*t98138*(2.5E2/3.0)+C_k*t97995*t98141*t98136*t98138*t98166*(5.0E1/9.0) \
               -C_k*t97995*t98136*t98138*t98165*t98139*(2.0E1/3.0))-t98170*(cxnl1*gamma_aa[index]*gx*t98072*t98145* \
               (8.8E1/9.0)-cxnl1*t97988*t98050*t98142*t98181*2.4E1+cxnl2*t97988*t98050*t98142*t98154*(3.04E2/9.0) \
               +cxnl2*t97991*t97988*t98142*t98183*t98184*2.0-cxnl2*t97991*t97988*t98142*t98193*t98179-cxnl2*t97988* \
               t98142*t98054*t98171*t98179*(3.2E1/3.0)+cxnl3*gamma_aa[index]*gx*t97988*t98150*t98142*t98047*7.2E1+ \
               cxnl1*gamma_aa[index]*gx*t97988*t98142*t98047*t98182*(1.28E2/9.0)-cxnl3*gamma_aa[index]*gx*t97990* \
               t97988*t98142*t98172*t98188+cxnl3*gamma_aa[index]*gx*t97990*t97988*t98142*t98190*t98189*2.0-cxnl3* \
               gamma_aa[index]*gx*t97988*t98142*t98053*t98172*t98176*1.6E1)+t98202*t98198*2.0-cx1*gamma_aa[index]* \
               gx*t98072*t98145*(8.8E1/9.0)+cx1*t97988*t98050*t98142*t98181*2.4E1-cx2*t97988*t98050*t98142*t98154* \
               (3.04E2/9.0)-cx2*t97991*t97988*t98142*t98183*t98184*2.0+cx2*t97991*t97988*t98142*t98193*t98179+cx2* \
               t97988*t98142*t98054*t98171*t98179*(3.2E1/3.0)-cx1*gamma_aa[index]*gx*t97988*t98142*t98047*t98182* \
               (1.28E2/9.0)-cx3*gamma_aa[index]*gx*t97988*t98150*t98142*t98047*7.2E1+cx3*gamma_aa[index]*gx*t97990* \
               t97988*t98142*t98172*t98188-cx3*gamma_aa[index]*gx*t97990*t97988*t98142*t98190*t98189*2.0+cx3*gamma_aa[index]* \
               gx*t97988*t98142*t98053*t98172*t98176*1.6E1)+c0*pow(rho_a[index],1.0/3.0)*(t98202*t98158-t98170*t98198- \
               cx1*gamma_aa[index]*gx*t98052*t98145*(8.0/3.0)+cx1*t97988*t98142*t98054*t98181*(8.0/3.0)-cx2*t97988* \
               t98142*t98054*t98154*(1.6E1/3.0)+cx2*t97991*t97988*t98142*t98171*t98179-cx3*gamma_aa[index]*gx*t97988* \
               t98150*t98142*t98053*8.0+cx3*gamma_aa[index]*gx*t97990*t97988*t98142*t98172*t98176)*(8.0/3.0)+c0*t98001* \
               (cx0+t98170*t98158+cx1*gamma_aa[index]*gx*t97987*t98145+cx2*t97991*t97988*t98142*t98154+cx3*gamma_aa[index]* \
               gx*t97990*t97988*t98150*t98142)*(4.0/9.0))+(rho_a[index]*t98203*2.0-c0p*rho_a[index]*t97976*t97986* \
               4.0)*(t98071+t98075+t98067+ccab1*gamma_aa[index]*gcab*t98072*t98065*(4.4E1/9.0)+ccab2*t97988*t97989* \
               t98050*t98046*(4.0E1/3.0)-ccab1*t97988*t97989*t98050*t98068*(7.6E1/9.0)-ccab2*t97988*t97989*t98051* \
               t98062*t98054*(1.6E1/3.0)-ccab2*t97991*t97988*t97989*t98062*(gamma_aa[index]*gcab*t98072*(8.8E1/9.0) \
               +t97988*t97989*t98050*(4.0E1/3.0))+ccab3*gamma_aa[index]*gcab*t97988*t97989*t98042*t98047*(7.6E1/3.0) \
               -ccab3*gamma_aa[index]*gcab*t97990*t97988*t97989*t98055*(gamma_aa[index]*gcab*t98072*(4.4E1/3.0)+t97988* \
               t97989*t98050*4.0E1+gamma_aa[index]*gcab*t97988*t97989*t98047*(7.6E1/3.0))-ccab3*gamma_aa[index]*gcab* \
               t97988*t97989*t98053*t98055*t98059*8.0)+t98090*(t98134+rho_a[index]*(t98102+t98117+t98098-t97974*t97984* \
               t97976*t98099*2.0-a1p*c*c0p*t97968*t97986*(8.0/9.0)-Aa*t97994*t98103*t98104*t98114*t98116*(4.0/9.0) \
               )*2.0-t97974*t97976*t97985*t97978*2.0)+rho_a[index]*t98230*(t98029-t98084+t97994*t98034*(t98226-t98029- \
               t98083+t98084))*2.0-rho_a[index]*t98203*(ccaa1*gamma_aa[index]*gcaa*t98206*t98072*(8.8E1/9.0)-ccaa1* \
               t97988*t98031*t98050*t98216*2.4E1+ccaa2*t97988*t98031*t98050*t98215*(3.04E2/9.0)-ccaa2*t97988*t98031* \
               t98054*t98225*t98219*(3.2E1/3.0)-ccaa2*t97991*t97988*t98031*t98225*(gamma_aa[index]*gcaa*t98072*(1.76E2/ \
               9.0)+t97988*t98031*t98050*(3.04E2/9.0))+ccaa2*t97991*t97988*t98031*1.0/(t98214*t98214*t98214)*(t98219* \
               t98219)*2.0+ccaa3*gamma_aa[index]*gcaa*t97988*t98031*t98211*t98047*7.2E1+ccaa1*gamma_aa[index]*gcaa* \
               t97988*t98031*1.0/(t98205*t98205*t98205)*t98047*(1.28E2/9.0)+ccaa3*gamma_aa[index]*gcaa*t97990*t97988* \
               1.0/(t98210*t98210*t98210)*t98031*(t98223*t98223)*2.0-ccaa3*gamma_aa[index]*gcaa*t97990*t97988*t98031* \
               t98224*(gamma_aa[index]*gcaa*t98072*(8.8E1/3.0)+t97988*t98031*t98050*(3.04E2/3.0)+gamma_aa[index]* \
               gcaa*t97988*t98031*t98047*7.2E1)-ccaa3*gamma_aa[index]*gcaa*t97988*t98031*t98223*t98053*t98224*1.6E1) \
               +rho_a[index]*t98234*(-t98123-t98132+t98250+t98244+t98248+t97994*t98034*(t98123+t98132-t98250+t98242- \
               t98244+t98247-t98248+t98249-t98120*t98037*t98235*t98076*2.0-a1f*c*c0f*t98035*t98118*(8.0/9.0)));
        } else {
            v_rho_a_rho_a_[index] = 0.0;
        } 

        if (is_gga_) {

            //V_rho_a_gamma_aa
            if (rho_a[index] > cutoff_) {
                double t98252 = 1.0/pow(rho_a[index],1.0/3.0);
                double t98253 = c*t98252;
                double t98254 = sqrt(t98253);
                double t98255 = pow(t98253,3.0/2.0);
                double t98256 = c*c;
                double t98257 = 1.0/pow(rho_a[index],2.0/3.0);
                double t98258 = 1.0/c0p;
                double t98259 = b1p*t98254;
                double t98260 = b3p*t98255;
                double t98261 = b4p*t98256*t98257;
                double t98262 = b2p*c*t98252;
                double t98263 = t98260+t98261+t98262+t98259;
                double t98264 = 1.0/t98263;
                double t98265 = t98264*t98258*(1.0/2.0);
                double t98266 = t98265+1.0;
                double t98267 = log(t98266);
                double t98268 = a1p*c*t98252;
                double t98269 = t98268+1.0;
                double t98270 = 1.0/pow(rho_a[index],8.0/3.0);
                double t98271 = gcaa*gcaa;
                double t98272 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t98273 = gamma_aa[index]*gamma_aa[index];
                double t98274 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t98275 = gamma_aa[index]*gcaa*t98270;
                double t98276 = t98275+1.0;
                double t98277 = gamma_aa[index]*gcaa*t98270*3.0;
                double t98278 = gamma_aa[index]*gcaa*t98271*t98273*t98274;
                double t98279 = t98271*t98272*t98273*3.0;
                double t98280 = t98277+t98278+t98279+1.0;
                double t98281 = gamma_aa[index]*gcaa*t98270*2.0;
                double t98282 = t98271*t98272*t98273;
                double t98283 = t98281+t98282+1.0;
                double t98284 = 1.0/tau_a[index];
                double t98285 = pow(rho_a[index],2.0/3.0);
                double t98286 = pow(rho_a[index],5.0/3.0);
                double t98287 = C_k*t98284*t98286;
                double t98288 = t98287-1.0;
                double t98289 = t98287+1.0;
                double t98290 = t98288*t98288;
                double t98291 = t98290*t98290;
                double t98292 = gx*gx;
                double t98293 = gamma_aa[index]*gx*t98270;
                double t98294 = t98293+1.0;
                double t98295 = gamma_aa[index]*gx*t98270*3.0;
                double t98296 = gamma_aa[index]*gx*t98273*t98274*t98292;
                double t98297 = t98272*t98273*t98292*3.0;
                double t98298 = t98295+t98296+t98297+1.0;
                double t98299 = gamma_aa[index]*gx*t98270*2.0;
                double t98300 = t98272*t98273*t98292;
                double t98301 = t98300+t98299+1.0;
                double t98302 = 1.0/t98289;
                double t98303 = 1.0/(t98289*t98289*t98289);
                double t98304 = 1.0/(t98289*t98289*t98289*t98289*t98289);
                double t98305 = 1.0/t98294;
                double t98306 = 1.0/t98301;
                double t98307 = 1.0/t98298;
                double t98308 = 1.0/pow(rho_a[index],1.9E1/3.0);
                double t98309 = 1.0/(t98294*t98294);
                double t98310 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]*rho_a[index]);
                double t98311 = 1.0/pow(rho_a[index],1.1E1/3.0);
                double t98312 = 1.0/(t98298*t98298);
                double t98313 = 1.0/(t98301*t98301);
                double t98314 = gx*t98270*3.0;
                double t98315 = gamma_aa[index]*t98272*t98292*6.0;
                double t98316 = gx*t98273*t98274*t98292*3.0;
                double t98317 = t98314+t98315+t98316;
                double t98318 = gx*t98270*2.0;
                double t98319 = gamma_aa[index]*t98272*t98292*2.0;
                double t98320 = t98318+t98319;
                double t98321 = gamma_aa[index]*gx*t98311*(1.6E1/3.0);
                double t98322 = t98308*t98273*t98292*(1.6E1/3.0);
                double t98323 = t98321+t98322;
                double t98324 = gamma_aa[index]*gx*t98311*8.0;
                double t98325 = gamma_aa[index]*gx*t98310*t98273*t98292*8.0;
                double t98326 = t98308*t98273*t98292*1.6E1;
                double t98327 = t98324+t98325+t98326;
                double t98328 = 1.0/(t98294*t98294*t98294);
                double t98329 = gx*t98311*8.0;
                double t98330 = gamma_aa[index]*t98308*t98292*3.2E1;
                double t98331 = gx*t98310*t98273*t98292*2.4E1;
                double t98332 = t98330+t98331+t98329;
                double t98333 = gx*t98311*(1.6E1/3.0);
                double t98334 = gamma_aa[index]*t98308*t98292*(3.2E1/3.0);
                double t98335 = t98333+t98334;
                double t98336 = 1.0/(t98301*t98301*t98301);
                double t98337 = 1.0/(t98298*t98298*t98298);
                double t98338 = t98302*t98288;
                double t98339 = t98304*t98291*t98288;
                double t98340 = t98338+t98339-t98303*t98290*t98288*2.0;
                double t98341 = cxnl1*gx*t98305*t98270;
                double t98342 = cxnl2*gamma_aa[index]*t98306*t98272*t98292*2.0;
                double t98343 = cxnl3*gx*t98307*t98273*t98274*t98292*3.0;
                double t98344 = t98341+t98342+t98343-cxnl1*gamma_aa[index]*t98272*t98309*t98292-cxnl2*t98320*t98313* \
                   t98272*t98273*t98292-cxnl3*gamma_aa[index]*gx*t98312*t98317*t98273*t98274*t98292;
                double t98345 = pow(2.0,1.0/3.0);
                double t98346 = t98345*2.0;
                double t98347 = t98346-2.0;
                double t98348 = two_13*2.0;
                double t98349 = t98348-2.0;
                double t98350 = 1.0/t98349;
                double t98351 = 1.0/c0f;
                double t98352 = b1f*t98254;
                double t98353 = b3f*t98255;
                double t98354 = b4f*t98256*t98257;
                double t98355 = b2f*c*t98252;
                double t98356 = t98352+t98353+t98354+t98355;
                double t98357 = 1.0/t98356;
                double t98358 = t98351*t98357*(1.0/2.0);
                double t98359 = t98358+1.0;
                double t98360 = log(t98359);
                double t98361 = a1f*c*t98252;
                double t98362 = t98361+1.0;
                double t98363 = c0f*t98360*t98362*2.0;
                double t98364 = c0p*t98267*t98269*2.0;
                double t98365 = rho_a[index]*2.0;
                double t98366 = 1.0/pow(t98365,1.0/3.0);
                double t98367 = c*t98366;
                double t98368 = gcab*gcab;
                double t98369 = gamma_aa[index]*gcab*t98270;
                double t98370 = t98369+1.0;
                double t98371 = gamma_aa[index]*gcab*t98270*3.0;
                double t98372 = gamma_aa[index]*gcab*t98273*t98274*t98368;
                double t98373 = t98272*t98273*t98368*3.0;
                double t98374 = t98371+t98372+t98373+1.0;
                double t98375 = gamma_aa[index]*gcab*t98270*2.0;
                double t98376 = t98272*t98273*t98368;
                double t98377 = t98375+t98376+1.0;
                double t98378 = 1.0/(t98374*t98374);
                double t98379 = 1.0/(t98377*t98377);
                double t98380 = gamma_aa[index]*gcab*t98311*(8.0/3.0);
                double t98381 = t98308*t98273*t98368*(8.0/3.0);
                double t98382 = t98380+t98381;
                double t98383 = gcab*t98270;
                double t98384 = gamma_aa[index]*t98272*t98368;
                double t98385 = t98383+t98384;
                double t98386 = gcab*t98270*(3.0/2.0);
                double t98387 = gamma_aa[index]*t98272*t98368*3.0;
                double t98388 = gcab*t98273*t98274*t98368*(3.0/2.0);
                double t98389 = t98386+t98387+t98388;
                double t98390 = gamma_aa[index]*gcab*t98311*4.0;
                double t98391 = gamma_aa[index]*gcab*t98310*t98273*t98368*4.0;
                double t98392 = t98308*t98273*t98368*8.0;
                double t98393 = t98390+t98391+t98392;
                double t98394 = sqrt(t98367);
                double t98395 = b1p*t98394;
                double t98396 = pow(t98367,3.0/2.0);
                double t98397 = b3p*t98396;
                double t98398 = b2p*c*t98366;
                double t98399 = 1.0/pow(t98365,2.0/3.0);
                double t98400 = b4p*t98256*t98399;
                double t98401 = t98400+t98395+t98397+t98398;
                double t98402 = 1.0/t98401;
                double t98403 = t98402*t98258*(1.0/2.0);
                double t98404 = t98403+1.0;
                double t98405 = a1p*c*t98366;
                double t98406 = t98405+1.0;
                double t98407 = 1.0/pow(t98365,4.0/3.0);
                double t98408 = log(t98404);
                double t98409 = 1.0/pow(rho_a[index],4.0/3.0);
                double t98410 = 1.0/pow(rho_a[index],5.0/3.0);
                double t98411 = 1.0/sqrt(t98253);
                double t98412 = 1.0/t98266;
                double t98413 = 1.0/(t98263*t98263);
                double t98414 = b4p*t98410*t98256*(2.0/3.0);
                double t98415 = b2p*c*t98409*(1.0/3.0);
                double t98416 = b1p*c*t98411*t98409*(1.0/6.0);
                double t98417 = b3p*c*t98254*t98409*(1.0/2.0);
                double t98418 = t98414+t98415+t98416+t98417;
                double t98419 = t98412*t98413*t98418*t98269;
                double t98420 = t98363-t98364;
                double t98421 = t98420*t98350*t98347;
                double t98422 = 1.0/t98370;
                double t98423 = 1.0/t98377;
                double t98424 = 1.0/t98374;
                double t98425 = 1.0/(t98370*t98370);
                double t98426 = t98421+t98364;
                double t98427 = rho_a[index]*t98426*2.0;
                double t98428 = t98427-c0p*rho_a[index]*t98406*t98408*4.0;
                double t98429 = 1.0/(t98370*t98370*t98370);
                double t98430 = ccab3*gcab*t98273*t98274*t98393*t98368*t98378*(3.0/2.0);
                double t98431 = ccab2*gamma_aa[index]*t98272*t98382*t98368*t98379;
                double t98432 = ccab3*gamma_aa[index]*gcab*t98310*t98273*t98368*t98378*t98389*4.0;
                double t98433 = gamma_aa[index]*t98308*t98368*4.0;
                double t98434 = ccab2*t98308*t98273*t98385*t98368*t98379*(8.0/3.0);
                double t98435 = 1.0/(t98377*t98377*t98377);
                double t98436 = 1.0/(t98374*t98374*t98374);
                double t98437 = 1.0/t98276;
                double t98438 = 1.0/t98283;
                double t98439 = 1.0/t98280;
                double t98440 = 1.0/(t98276*t98276);
                double t98441 = 1.0/(t98280*t98280);
                double t98442 = 1.0/(t98283*t98283);
                double t98443 = gcaa*t98270*3.0;
                double t98444 = gamma_aa[index]*t98271*t98272*6.0;
                double t98445 = gcaa*t98271*t98273*t98274*3.0;
                double t98446 = t98443+t98444+t98445;
                double t98447 = gcaa*t98270*2.0;
                double t98448 = gamma_aa[index]*t98271*t98272*2.0;
                double t98449 = t98447+t98448;
                double t98450 = gamma_aa[index]*gcaa*t98311*(1.6E1/3.0);
                double t98451 = t98271*t98308*t98273*(1.6E1/3.0);
                double t98452 = t98450+t98451;
                double t98453 = gamma_aa[index]*gcaa*t98311*8.0;
                double t98454 = gamma_aa[index]*gcaa*t98310*t98271*t98273*8.0;
                double t98455 = t98271*t98308*t98273*1.6E1;
                double t98456 = t98453+t98454+t98455;
                double t98457 = 1.0/t98359;
                double t98458 = 1.0/(t98356*t98356);
                double t98459 = b4f*t98410*t98256*(2.0/3.0);
                double t98460 = b2f*c*t98409*(1.0/3.0);
                double t98461 = b1f*c*t98411*t98409*(1.0/6.0);
                double t98462 = b3f*c*t98254*t98409*(1.0/2.0);
                double t98463 = t98460+t98461+t98462+t98459;
                double t98464 = a1f*c*c0f*t98360*t98409*(2.0/3.0);
                double t98465 = a1p*c*c0p*t98409*t98267*(2.0/3.0);
                double t98466 = ccaa1*gcaa*t98270*t98437;
                double t98467 = ccaa2*gamma_aa[index]*t98271*t98272*t98438*2.0;
                double t98468 = ccaa3*gcaa*t98271*t98273*t98274*t98439*3.0;
                double t98469 = t98466+t98467+t98468-ccaa1*gamma_aa[index]*t98440*t98271*t98272-ccaa2*t98271*t98442* \
                   t98272*t98273*t98449-ccaa3*gamma_aa[index]*gcaa*t98441*t98271*t98273*t98274*t98446;
                v_rho_a_gamma_aa_[index] = t98428*(t98430+t98431+t98432+t98434-ccab1*gcab*t98311*t98422*(4.0/3.0) \
                   -ccab2*gamma_aa[index]*t98423*t98308*t98368*4.0+ccab1*gamma_aa[index]*t98308*t98425*t98368*(8.0/3.0) \
                   +ccab2*t98272*t98273*t98368*t98379*(t98433+gcab*t98311*(8.0/3.0))-ccab3*gcab*t98310*t98424*t98273* \
                   t98368*8.0-ccab1*gcab*t98310*t98273*t98429*t98368*(4.0/3.0)-ccab2*t98272*t98273*t98435*t98382*t98385* \
                   t98368*2.0+ccab3*gamma_aa[index]*gcab*t98273*t98274*t98368*t98378*(gcab*t98311*4.0+gamma_aa[index]* \
                   t98308*t98368*1.2E1+gcab*t98310*t98273*t98368*8.0)-ccab3*gamma_aa[index]*gcab*t98273*t98274*t98436* \
                   t98393*t98368*t98389*2.0)-(c0*pow(rho_a[index],1.0/3.0)*(t98340*t98344+cx1*gx*t98305*t98270-cx1*gamma_aa[index]* \
                   t98272*t98309*t98292+cx2*gamma_aa[index]*t98306*t98272*t98292*2.0-cx2*t98320*t98313*t98272*t98273* \
                   t98292+cx3*gx*t98307*t98273*t98274*t98292*3.0-cx3*gamma_aa[index]*gx*t98312*t98317*t98273*t98274*t98292) \
                   *(4.0/3.0)+c0*pow(rho_a[index],4.0/3.0)*(t98340*(cxnl1*gx*t98311*t98305*(-8.0/3.0)-cxnl2*gamma_aa[index]* \
                   t98306*t98308*t98292*(3.2E1/3.0)+cxnl1*gamma_aa[index]*t98308*t98309*t98292*8.0+cxnl2*t98320*t98313* \
                   t98308*t98273*t98292*(1.6E1/3.0)+cxnl2*t98313*t98272*t98335*t98273*t98292+cxnl2*gamma_aa[index]*t98313* \
                   t98323*t98272*t98292*2.0-cxnl3*gx*t98310*t98307*t98273*t98292*2.4E1-cxnl1*gx*t98310*t98273*t98292* \
                   t98328*(1.6E1/3.0)+cxnl3*gx*t98312*t98273*t98327*t98274*t98292*3.0-cxnl2*t98320*t98323*t98272*t98273* \
                   t98336*t98292*2.0+cxnl3*gamma_aa[index]*gx*t98310*t98312*t98317*t98273*t98292*8.0+cxnl3*gamma_aa[index]* \
                   gx*t98312*t98332*t98273*t98274*t98292-cxnl3*gamma_aa[index]*gx*t98317*t98273*t98327*t98274*t98292* \
                   t98337*2.0)+t98344*(C_k*t98302*t98284*t98285*(5.0/3.0)-C_k*t98303*t98290*t98284*t98285*1.0E1+C_k*t98304* \
                   t98291*t98284*t98285*(2.5E1/3.0)-C_k*t98284*t98285*t98288*1.0/(t98289*t98289)*(5.0/3.0)+C_k*t98290* \
                   t98284*t98285*t98288*1.0/(t98289*t98289*t98289*t98289)*1.0E1-C_k*t98291*t98284*t98285*t98288*1.0/(t98289* \
                   t98289*t98289*t98289*t98289*t98289)*(2.5E1/3.0))-cx1*gx*t98311*t98305*(8.0/3.0)+cx1*gamma_aa[index]* \
                   t98308*t98309*t98292*8.0-cx2*gamma_aa[index]*t98306*t98308*t98292*(3.2E1/3.0)+cx2*t98320*t98313*t98308* \
                   t98273*t98292*(1.6E1/3.0)+cx2*t98313*t98272*t98335*t98273*t98292+cx2*gamma_aa[index]*t98313*t98323* \
                   t98272*t98292*2.0-cx1*gx*t98310*t98273*t98292*t98328*(1.6E1/3.0)-cx3*gx*t98310*t98307*t98273*t98292* \
                   2.4E1+cx3*gx*t98312*t98273*t98327*t98274*t98292*3.0-cx2*t98320*t98323*t98272*t98273*t98336*t98292* \
                   2.0+cx3*gamma_aa[index]*gx*t98310*t98312*t98317*t98273*t98292*8.0+cx3*gamma_aa[index]*gx*t98312*t98332* \
                   t98273*t98274*t98292-cx3*gamma_aa[index]*gx*t98317*t98273*t98327*t98274*t98292*t98337*2.0))*(X-1.0) \
                   -t98469*(t98364+t98350*t98347*(t98363-c0p*t98267*t98269*2.0))-(-t98421-t98364+rho_a[index]*((1.0/(t98401* \
                   t98401)*t98406*(b4p*t98256*1.0/pow(t98365,5.0/3.0)*(2.0/3.0)+b2p*c*t98407*(1.0/3.0)+b3p*c*t98407*t98394* \
                   (1.0/2.0)+b1p*c*t98407*1.0/sqrt(t98367)*(1.0/6.0)))/t98404-a1p*c*c0p*t98407*t98408*(2.0/3.0))*2.0+ \
                   rho_a[index]*(-t98419+t98465+t98350*t98347*(t98419+t98464-t98362*t98463*t98457*t98458-a1p*c*c0p*t98409* \
                   t98267*(2.0/3.0)))+c0p*t98406*t98408*2.0)*(ccab1*gcab*t98422*t98270*(1.0/2.0)+ccab2*gamma_aa[index]* \
                   t98423*t98272*t98368-ccab1*gamma_aa[index]*t98272*t98425*t98368*(1.0/2.0)-ccab2*t98272*t98273*t98385* \
                   t98368*t98379+ccab3*gcab*t98424*t98273*t98274*t98368*(3.0/2.0)-ccab3*gamma_aa[index]*gcab*t98273*t98274* \
                   t98368*t98378*t98389)*2.0+t98428*(t98430+t98431+t98432+t98434-ccab2*gamma_aa[index]*t98423*t98308* \
                   t98368*(4.0/3.0)+ccab1*gamma_aa[index]*t98308*t98425*t98368*(4.0/3.0)+ccab2*gamma_aa[index]*1.0/pow(rho_a[index],3.5E1/ \
                   3.0)*t98273*(t98368*t98368)*t98379*(4.0/3.0)-ccab3*gcab*t98310*t98424*t98273*t98368*4.0-ccab1*gcab* \
                   t98310*t98273*t98429*t98368*(4.0/3.0)-ccab2*t98272*t98273*t98435*t98382*t98385*t98368*2.0+ccab3*gamma_aa[index]* \
                   gcab*t98273*t98274*t98368*t98378*(t98433+gcab*t98310*t98273*t98368*4.0)-ccab3*gamma_aa[index]*gcab* \
                   t98273*t98274*t98436*t98393*t98368*t98389*2.0)+rho_a[index]*t98469*(-t98419+t98465+t98350*t98347*(t98419+ \
                   t98464-t98465-t98362*t98463*t98457*t98458))-rho_a[index]*t98426*(ccaa1*gcaa*t98311*t98437*(-8.0/3.0) \
                   +ccaa1*gamma_aa[index]*t98440*t98271*t98308*8.0-ccaa2*gamma_aa[index]*t98271*t98308*t98438*(3.2E1/ \
                   3.0)+ccaa2*t98271*t98442*t98308*t98273*t98449*(1.6E1/3.0)-ccaa1*gcaa*t98310*t98271*t98273*1.0/(t98276* \
                   t98276*t98276)*(1.6E1/3.0)+ccaa2*t98271*t98442*t98272*t98273*(gcaa*t98311*(1.6E1/3.0)+gamma_aa[index]* \
                   t98271*t98308*(3.2E1/3.0))+ccaa2*gamma_aa[index]*t98271*t98442*t98272*t98452*2.0-ccaa3*gcaa*t98310* \
                   t98271*t98273*t98439*2.4E1+ccaa3*gcaa*t98441*t98271*t98273*t98274*t98456*3.0-ccaa2*t98271*t98272*t98452* \
                   t98273*1.0/(t98283*t98283*t98283)*t98449*2.0+ccaa3*gamma_aa[index]*gcaa*t98441*t98271*t98273*t98274* \
                   (gcaa*t98311*8.0+gamma_aa[index]*t98271*t98308*3.2E1+gcaa*t98310*t98271*t98273*2.4E1)+ccaa3*gamma_aa[index]* \
                   gcaa*t98310*t98441*t98271*t98273*t98446*8.0-ccaa3*gamma_aa[index]*gcaa*t98271*1.0/(t98280*t98280*t98280) \
                   *t98273*t98274*t98446*t98456*2.0);
            } else {
                v_rho_a_gamma_aa_[index] = 0.0;
            } 

            //V_gamma_aa_gamma_aa
            if (rho_a[index] > cutoff_) {
                double t98471 = 1.0/pow(rho_a[index],1.0/3.0);
                double t98472 = c*t98471;
                double t98473 = sqrt(t98472);
                double t98474 = pow(t98472,3.0/2.0);
                double t98475 = c*c;
                double t98476 = 1.0/pow(rho_a[index],2.0/3.0);
                double t98477 = 1.0/c0p;
                double t98478 = b1p*t98473;
                double t98479 = b3p*t98474;
                double t98480 = b4p*t98475*t98476;
                double t98481 = b2p*c*t98471;
                double t98482 = t98480+t98481+t98478+t98479;
                double t98483 = 1.0/t98482;
                double t98484 = t98483*t98477*(1.0/2.0);
                double t98485 = t98484+1.0;
                double t98486 = log(t98485);
                double t98487 = a1p*c*t98471;
                double t98488 = t98487+1.0;
                double t98489 = rho_a[index]*2.0;
                double t98490 = 1.0/pow(t98489,1.0/3.0);
                double t98491 = c*t98490;
                double t98492 = gcab*gcab;
                double t98493 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t98494 = 1.0/pow(rho_a[index],8.0/3.0);
                double t98495 = gamma_aa[index]*gcab*t98494;
                double t98496 = t98495+1.0;
                double t98497 = gamma_aa[index]*gamma_aa[index];
                double t98498 = gamma_aa[index]*gcab*t98494*2.0;
                double t98499 = t98492*t98493*t98497;
                double t98500 = t98498+t98499+1.0;
                double t98501 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t98502 = gamma_aa[index]*gcab*t98494*3.0;
                double t98503 = gamma_aa[index]*gcab*t98501*t98492*t98497;
                double t98504 = t98492*t98493*t98497*3.0;
                double t98505 = t98502+t98503+t98504+1.0;
                double t98508 = gcab*t98494;
                double t98509 = gamma_aa[index]*t98492*t98493;
                double t98506 = t98508+t98509;
                double t98507 = 1.0/(t98505*t98505);
                double t98510 = 1.0/(t98500*t98500);
                double t98511 = gcab*t98494*(3.0/2.0);
                double t98512 = gamma_aa[index]*t98492*t98493*3.0;
                double t98513 = gcab*t98501*t98492*t98497*(3.0/2.0);
                double t98514 = t98511+t98512+t98513;
                double t98515 = pow(2.0,1.0/3.0);
                double t98516 = t98515*2.0;
                double t98517 = t98516-2.0;
                double t98518 = two_13*2.0;
                double t98519 = t98518-2.0;
                double t98520 = 1.0/t98519;
                double t98521 = 1.0/c0f;
                double t98522 = b1f*t98473;
                double t98523 = b3f*t98474;
                double t98524 = b4f*t98475*t98476;
                double t98525 = b2f*c*t98471;
                double t98526 = t98522+t98523+t98524+t98525;
                double t98527 = 1.0/t98526;
                double t98528 = t98521*t98527*(1.0/2.0);
                double t98529 = t98528+1.0;
                double t98530 = log(t98529);
                double t98531 = a1f*c*t98471;
                double t98532 = t98531+1.0;
                double t98533 = c0f*t98530*t98532*2.0;
                double t98534 = c0p*t98486*t98488*2.0;
                double t98535 = gcaa*gcaa;
                double t98536 = gamma_aa[index]*gcaa*t98494;
                double t98537 = t98536+1.0;
                double t98538 = 1.0/pow(rho_a[index],3.2E1/3.0);
                double t98539 = gamma_aa[index]*gcaa*t98494*2.0;
                double t98540 = t98535*t98493*t98497;
                double t98541 = t98540+t98539+1.0;
                double t98542 = gamma_aa[index]*gcaa*t98494*3.0;
                double t98543 = gamma_aa[index]*gcaa*t98501*t98535*t98497;
                double t98544 = t98535*t98493*t98497*3.0;
                double t98545 = t98542+t98543+t98544+1.0;
                double t98548 = gcaa*t98494*2.0;
                double t98549 = gamma_aa[index]*t98535*t98493*2.0;
                double t98546 = t98548+t98549;
                double t98547 = 1.0/(t98545*t98545);
                double t98550 = 1.0/(t98541*t98541);
                double t98551 = gcaa*t98494*3.0;
                double t98552 = gamma_aa[index]*t98535*t98493*6.0;
                double t98553 = gcaa*t98501*t98535*t98497*3.0;
                double t98554 = t98551+t98552+t98553;
                double t98555 = pow(rho_a[index],5.0/3.0);
                double t98556 = 1.0/tau_a[index];
                double t98557 = C_k*t98555*t98556;
                double t98558 = t98557-1.0;
                double t98559 = t98558*t98558;
                double t98560 = t98557+1.0;
                double t98561 = t98559*t98559;
                double t98562 = gx*gx;
                double t98563 = gamma_aa[index]*gx*t98494;
                double t98564 = t98563+1.0;
                double t98565 = gamma_aa[index]*gx*t98494*2.0;
                double t98566 = t98562*t98493*t98497;
                double t98567 = t98565+t98566+1.0;
                double t98568 = gamma_aa[index]*gx*t98494*3.0;
                double t98569 = gamma_aa[index]*gx*t98501*t98562*t98497;
                double t98570 = t98562*t98493*t98497*3.0;
                double t98571 = t98570+t98568+t98569+1.0;
                double t98574 = gx*t98494*2.0;
                double t98575 = gamma_aa[index]*t98562*t98493*2.0;
                double t98572 = t98574+t98575;
                double t98573 = 1.0/(t98571*t98571);
                double t98576 = 1.0/(t98567*t98567);
                double t98577 = gx*t98494*3.0;
                double t98578 = gamma_aa[index]*t98562*t98493*6.0;
                double t98579 = gx*t98501*t98562*t98497*3.0;
                double t98580 = t98577+t98578+t98579;
                double t98581 = 1.0/(t98564*t98564);
                double t98582 = 1.0/t98567;
                double t98583 = 1.0/t98571;
                double t98584 = 1.0/(t98564*t98564*t98564);
                double t98585 = t98562*t98562;
                double t98586 = t98562*t98493*6.0;
                double t98587 = gamma_aa[index]*gx*t98501*t98562*6.0;
                double t98588 = t98586+t98587;
                double t98589 = t98572*t98572;
                double t98590 = 1.0/(t98567*t98567*t98567);
                double t98591 = t98580*t98580;
                double t98592 = 1.0/(t98571*t98571*t98571);
                v_gamma_aa_gamma_aa_[index] = (rho_a[index]*(t98534+t98520*t98517*(t98533-c0p*t98486*t98488*2.0)) \
                   *2.0-c0p*rho_a[index]*log((t98477*(1.0/2.0))/(b1p*sqrt(t98491)+b3p*pow(t98491,3.0/2.0)+b4p*t98475* \
                   1.0/pow(t98489,2.0/3.0)+b2p*c*t98490)+1.0)*(a1p*c*t98490+1.0)*4.0)*((ccab2*t98492*t98493*(1.0/2.0) \
                   )/t98500-ccab1*t98492*t98493*1.0/(t98496*t98496)*(1.0/2.0)-ccab2*t98510*(t98492*t98492)*t98538*t98497* \
                   (1.0/2.0)+(ccab3*gamma_aa[index]*gcab*t98501*t98492*(3.0/2.0))/t98505+ccab1*gamma_aa[index]*gcab*t98501* \
                   t98492*1.0/(t98496*t98496*t98496)*(1.0/2.0)+ccab2*1.0/(t98500*t98500*t98500)*(t98506*t98506)*t98492* \
                   t98493*t98497*2.0-ccab2*gamma_aa[index]*t98510*t98506*t98492*t98493*2.0-ccab3*gcab*t98501*t98514*t98507* \
                   t98492*t98497*3.0-ccab3*gamma_aa[index]*gcab*t98501*t98507*t98492*t98497*(t98492*t98493*(3.0/2.0)+ \
                   gamma_aa[index]*gcab*t98501*t98492*(3.0/2.0))+ccab3*gamma_aa[index]*gcab*t98501*1.0/(t98505*t98505* \
                   t98505)*(t98514*t98514)*t98492*t98497*2.0)*4.0-rho_a[index]*(t98534+t98520*t98517*(t98533-t98534)) \
                   *((ccaa2*t98535*t98493*2.0)/t98541-ccaa1*t98535*1.0/(t98537*t98537)*t98493*2.0-ccaa2*t98550*(t98535* \
                   t98535)*t98538*t98497*2.0+(ccaa3*gamma_aa[index]*gcaa*t98501*t98535*6.0)/t98545+ccaa1*gamma_aa[index]* \
                   gcaa*t98501*t98535*1.0/(t98537*t98537*t98537)*2.0+ccaa2*1.0/(t98541*t98541*t98541)*t98535*(t98546* \
                   t98546)*t98493*t98497*2.0-ccaa2*gamma_aa[index]*t98550*t98535*t98546*t98493*4.0-ccaa3*gcaa*t98501* \
                   t98535*t98554*t98547*t98497*6.0-ccaa3*gamma_aa[index]*gcaa*t98501*t98535*t98547*t98497*(t98535*t98493* \
                   6.0+gamma_aa[index]*gcaa*t98501*t98535*6.0)+ccaa3*gamma_aa[index]*gcaa*t98501*t98535*1.0/(t98545*t98545* \
                   t98545)*(t98554*t98554)*t98497*2.0)*2.0+c0*pow(rho_a[index],4.0/3.0)*(X-1.0)*((t98558/t98560+1.0/(t98560* \
                   t98560*t98560*t98560*t98560)*t98561*t98558-1.0/(t98560*t98560*t98560)*t98558*t98559*2.0)*(cxnl1*t98562* \
                   t98581*t98493*2.0-cxnl2*t98562*t98582*t98493*2.0+cxnl2*t98538*t98576*t98585*t98497*2.0-cxnl2*t98562* \
                   t98590*t98493*t98497*t98589*2.0-cxnl1*gamma_aa[index]*gx*t98501*t98562*t98584*2.0-cxnl3*gamma_aa[index]* \
                   gx*t98501*t98562*t98583*6.0+cxnl2*gamma_aa[index]*t98562*t98572*t98493*t98576*4.0+cxnl3*gx*t98501* \
                   t98562*t98580*t98573*t98497*6.0-cxnl3*gamma_aa[index]*gx*t98501*t98562*t98591*t98592*t98497*2.0+cxnl3* \
                   gamma_aa[index]*gx*t98501*t98562*t98573*t98497*t98588)+cx1*t98562*t98581*t98493*2.0-cx2*t98562*t98582* \
                   t98493*2.0+cx2*t98538*t98576*t98585*t98497*2.0-cx2*t98562*t98590*t98493*t98497*t98589*2.0-cx1*gamma_aa[index]* \
                   gx*t98501*t98562*t98584*2.0-cx3*gamma_aa[index]*gx*t98501*t98562*t98583*6.0+cx2*gamma_aa[index]*t98562* \
                   t98572*t98493*t98576*4.0+cx3*gx*t98501*t98562*t98580*t98573*t98497*6.0-cx3*gamma_aa[index]*gx*t98501* \
                   t98562*t98591*t98592*t98497*2.0+cx3*gamma_aa[index]*gx*t98501*t98562*t98573*t98497*t98588)*2.0;
            } else {
                v_gamma_aa_gamma_aa_[index] = 0.0;
            } 

        }
        if (is_meta_) {

            //V_rho_a_tau_a
            if (rho_a[index] > cutoff_) {
                double t98594 = 1.0/pow(rho_a[index],8.0/3.0);
                double t98595 = gamma_aa[index]*gamma_aa[index];
                double t98596 = gx*gx;
                double t98597 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t98598 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t98599 = pow(rho_a[index],5.0/3.0);
                double t98600 = 1.0/tau_a[index];
                double t98601 = C_k*t98600*t98599;
                double t98602 = t98601+1.0;
                double t98603 = pow(rho_a[index],2.0/3.0);
                double t98604 = 1.0/(tau_a[index]*tau_a[index]);
                double t98605 = t98601-1.0;
                double t98606 = t98605*t98605;
                double t98607 = t98606*t98606;
                double t98608 = C_k*C_k;
                double t98609 = pow(rho_a[index],7.0/3.0);
                double t98610 = 1.0/(tau_a[index]*tau_a[index]*tau_a[index]);
                double t98611 = 1.0/(t98602*t98602*t98602);
                double t98612 = 1.0/(t98602*t98602*t98602*t98602);
                double t98613 = 1.0/(t98602*t98602*t98602*t98602*t98602);
                double t98614 = 1.0/(t98602*t98602*t98602*t98602*t98602*t98602);
                double t98615 = 1.0/(t98602*t98602);
                double t98616 = 1.0/t98602;
                double t98617 = gamma_aa[index]*gx*t98594;
                double t98618 = t98617+1.0;
                double t98619 = 1.0/t98618;
                double t98620 = gamma_aa[index]*gx*t98594*3.0;
                double t98621 = gamma_aa[index]*gx*t98595*t98596*t98597;
                double t98622 = t98595*t98596*t98598*3.0;
                double t98623 = t98620+t98621+t98622+1.0;
                double t98624 = 1.0/t98623;
                double t98625 = gamma_aa[index]*gx*t98594*2.0;
                double t98626 = t98595*t98596*t98598;
                double t98627 = t98625+t98626+1.0;
                double t98628 = 1.0/t98627;
                double t98629 = 1.0/pow(rho_a[index],1.9E1/3.0);
                double t98630 = 1.0/pow(rho_a[index],1.1E1/3.0);
                double t98631 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]*rho_a[index]);
                double t98632 = cxnl1*gamma_aa[index]*gx*t98619*t98594;
                double t98633 = cxnl3*gamma_aa[index]*gx*t98624*t98595*t98596*t98597;
                double t98634 = cxnl2*t98628*t98595*t98596*t98598;
                double t98635 = cxnl0+t98632+t98633+t98634;
                double t98636 = C_k*t98604*t98616*t98599;
                double t98637 = C_k*t98612*t98604*t98605*t98606*t98599*6.0;
                double t98638 = C_k*t98604*t98613*t98607*t98599*5.0;
                double t98639 = t98636+t98637+t98638-C_k*t98611*t98604*t98606*t98599*6.0-C_k*t98604*t98605*t98615* \
                   t98599-C_k*t98604*t98605*t98614*t98607*t98599*5.0;
                v_rho_a_tau_a_[index] = -(c0*pow(rho_a[index],4.0/3.0)*(t98635*(t98610*t98615*t98608*t98609*(1.0E1/ \
                   3.0)-C_k*t98603*t98604*t98616*(5.0/3.0)+C_k*t98611*t98603*t98604*t98606*1.0E1-C_k*t98603*t98604*t98613* \
                   t98607*(2.5E1/3.0)+C_k*t98603*t98604*t98605*t98615*(5.0/3.0)+t98610*t98611*t98605*t98608*t98609*(5.0E1/ \
                   3.0)-t98610*t98612*t98606*t98608*t98609*6.0E1+t98610*t98614*t98607*t98608*t98609*(2.5E2/3.0)+t98610* \
                   t98613*t98605*t98606*t98608*t98609*(2.0E1/3.0)-t98610*1.0/(t98602*t98602*t98602*t98602*t98602*t98602* \
                   t98602)*t98605*t98607*t98608*t98609*5.0E1-C_k*t98603*t98612*t98604*t98605*t98606*1.0E1+C_k*t98603* \
                   t98604*t98605*t98614*t98607*(2.5E1/3.0))+t98639*(cxnl1*gamma_aa[index]*gx*t98630*t98619*(8.0/3.0)+ \
                   cxnl2*t98628*t98629*t98595*t98596*(1.6E1/3.0)-cxnl1*1.0/(t98618*t98618)*t98629*t98595*t98596*(8.0/ \
                   3.0)-cxnl2*1.0/(t98627*t98627)*t98595*t98596*t98598*(gamma_aa[index]*gx*t98630*(1.6E1/3.0)+t98629* \
                   t98595*t98596*(1.6E1/3.0))+cxnl3*gamma_aa[index]*gx*t98631*t98624*t98595*t98596*8.0-cxnl3*gamma_aa[index]* \
                   gx*1.0/(t98623*t98623)*t98595*t98596*t98597*(gamma_aa[index]*gx*t98630*8.0+t98629*t98595*t98596*1.6E1+ \
                   gamma_aa[index]*gx*t98631*t98595*t98596*8.0)))-c0*pow(rho_a[index],1.0/3.0)*t98635*t98639*(4.0/3.0) \
                   )*(X-1.0);
            } else {
                v_rho_a_tau_a_[index] = 0.0;
            } 

            //V_tau_a_tau_a
            if (rho_a[index] > cutoff_) {
                double t98641 = 1.0/pow(rho_a[index],8.0/3.0);
                double t98642 = gamma_aa[index]*gamma_aa[index];
                double t98643 = gx*gx;
                double t98644 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t98645 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t98646 = pow(rho_a[index],5.0/3.0);
                double t98647 = 1.0/tau_a[index];
                double t98648 = C_k*t98646*t98647;
                double t98649 = t98648+1.0;
                double t98650 = 1.0/(tau_a[index]*tau_a[index]*tau_a[index]);
                double t98651 = t98648-1.0;
                double t98652 = t98651*t98651;
                double t98653 = t98652*t98652;
                double t98654 = C_k*C_k;
                double t98655 = pow(rho_a[index],1.0E1/3.0);
                double t98656 = 1.0/(tau_a[index]*tau_a[index]*tau_a[index]*tau_a[index]);
                double t98657 = 1.0/(t98649*t98649*t98649);
                double t98658 = 1.0/(t98649*t98649*t98649*t98649);
                double t98659 = 1.0/(t98649*t98649*t98649*t98649*t98649);
                double t98660 = 1.0/(t98649*t98649*t98649*t98649*t98649*t98649);
                double t98661 = 1.0/(t98649*t98649);
                v_tau_a_tau_a_[index] = c0*pow(rho_a[index],4.0/3.0)*(X-1.0)*(cxnl0+(cxnl2*t98642*t98643*t98645)/ \
                   (gamma_aa[index]*gx*t98641*2.0+t98642*t98643*t98645+1.0)+(cxnl1*gamma_aa[index]*gx*t98641)/(gamma_aa[index]* \
                   gx*t98641+1.0)+(cxnl3*gamma_aa[index]*gx*t98642*t98643*t98644)/(gamma_aa[index]*gx*t98641*3.0+t98642* \
                   t98643*t98645*3.0+gamma_aa[index]*gx*t98642*t98643*t98644+1.0))*(t98661*t98654*t98655*t98656*2.0-(C_k* \
                   t98650*t98646*2.0)/t98649+C_k*t98650*t98651*t98661*t98646*2.0+C_k*t98650*t98652*t98646*t98657*1.2E1- \
                   C_k*t98650*t98653*t98646*t98659*1.0E1+t98660*t98653*t98654*t98655*t98656*5.0E1+t98651*t98654*t98655* \
                   t98656*t98657*1.0E1-t98652*t98654*t98655*t98656*t98658*3.6E1+t98651*t98652*t98654*t98655*t98656*t98659* \
                   4.0-t98651*t98653*t98654*t98655*t98656*1.0/(t98649*t98649*t98649*t98649*t98649*t98649*t98649)*3.0E1+ \
                   C_k*t98650*t98651*t98660*t98653*t98646*1.0E1-C_k*t98650*t98651*t98652*t98646*t98658*1.2E1);
            } else {
                v_tau_a_tau_a_[index] = 0.0;
            } 

            if (is_gga_) {

                //V_gamma_aa_tau_a
                if (rho_a[index] > cutoff_) {
                    double t98663 = pow(rho_a[index],5.0/3.0);
                    double t98664 = 1.0/(tau_a[index]*tau_a[index]);
                    double t98665 = 1.0/tau_a[index];
                    double t98666 = C_k*t98663*t98665;
                    double t98667 = t98666-1.0;
                    double t98668 = t98666+1.0;
                    double t98669 = t98667*t98667;
                    double t98670 = t98669*t98669;
                    double t98671 = 1.0/pow(rho_a[index],8.0/3.0);
                    double t98672 = gx*gx;
                    double t98673 = 1.0/pow(rho_a[index],1.6E1/3.0);
                    double t98674 = gamma_aa[index]*gamma_aa[index];
                    double t98675 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                       rho_a[index]*rho_a[index]);
                    double t98676 = gamma_aa[index]*gx*t98671;
                    double t98677 = t98676+1.0;
                    double t98678 = gamma_aa[index]*gx*t98671*3.0;
                    double t98679 = gamma_aa[index]*gx*t98672*t98674*t98675;
                    double t98680 = t98672*t98673*t98674*3.0;
                    double t98681 = t98680+t98678+t98679+1.0;
                    double t98682 = gamma_aa[index]*gx*t98671*2.0;
                    double t98683 = t98672*t98673*t98674;
                    double t98684 = t98682+t98683+1.0;
                    v_gamma_aa_tau_a_[index] = c0*pow(rho_a[index],4.0/3.0)*(X-1.0)*((cxnl1*gx*t98671)/t98677+(cxnl2* \
                       gamma_aa[index]*t98672*t98673*2.0)/t98684-cxnl1*gamma_aa[index]*t98672*t98673*1.0/(t98677*t98677)- \
                       cxnl2*t98672*t98673*t98674*1.0/(t98684*t98684)*(gx*t98671*2.0+gamma_aa[index]*t98672*t98673*2.0)+(cxnl3* \
                       gx*t98672*t98674*t98675*3.0)/t98681-cxnl3*gamma_aa[index]*gx*t98672*1.0/(t98681*t98681)*t98674*t98675* \
                       (gx*t98671*3.0+gamma_aa[index]*t98672*t98673*6.0+gx*t98672*t98674*t98675*3.0))*((C_k*t98663*t98664) \
                       /t98668+C_k*t98670*t98663*t98664*1.0/(t98668*t98668*t98668*t98668*t98668)*5.0-C_k*t98663*t98664*t98667* \
                       1.0/(t98668*t98668)-C_k*t98663*t98664*1.0/(t98668*t98668*t98668)*t98669*6.0-C_k*t98670*t98663*t98664* \
                       t98667*1.0/(t98668*t98668*t98668*t98668*t98668*t98668)*5.0+C_k*t98663*t98664*t98667*1.0/(t98668*t98668* \
                       t98668*t98668)*t98669*6.0);
                } else {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } 

            }
        }
    }
}
void TauHCTH0_Functional::computeUKSFunctional(boost::shared_ptr<UKSFunctions> prop)
{
    int ntrue = prop->npoints();

    const double* restrict rho_a;
    const double* restrict rho_b;
    const double* restrict gamma_aa;
    const double* restrict gamma_ab;
    const double* restrict gamma_bb;
    const double* restrict tau_a;
    const double* restrict tau_b;

    rho_a = prop->property_value("RHO_A")->pointer();
    rho_b = prop->property_value("RHO_B")->pointer();
    if (is_gga_) {
        gamma_aa = prop->property_value("GAMMA_AA")->pointer();
        gamma_ab = prop->property_value("GAMMA_AB")->pointer();
        gamma_bb = prop->property_value("GAMMA_BB")->pointer();
    }
    if (is_meta_) {
        tau_a = prop->property_value("TAU_A")->pointer();
        tau_b = prop->property_value("TAU_B")->pointer();
    }

    double X = params_[0].second;
    double C_k = params_[1].second;
    double c0 = params_[2].second;
    double two_13 = params_[3].second;
    double d2fz0 = params_[4].second;
    double c = params_[5].second;
    double Aa = params_[6].second;
    double a1a = params_[7].second;
    double b1a = params_[8].second;
    double b2a = params_[9].second;
    double b3a = params_[10].second;
    double b4a = params_[11].second;
    double c0p = params_[12].second;
    double a1p = params_[13].second;
    double b1p = params_[14].second;
    double b2p = params_[15].second;
    double b3p = params_[16].second;
    double b4p = params_[17].second;
    double c0f = params_[18].second;
    double a1f = params_[19].second;
    double b1f = params_[20].second;
    double b2f = params_[21].second;
    double b3f = params_[22].second;
    double b4f = params_[23].second;
    double gcab = params_[24].second;
    double gcaa = params_[25].second;
    double gx = params_[26].second;
    double ccab0 = params_[27].second;
    double ccab1 = params_[28].second;
    double ccab2 = params_[29].second;
    double ccab3 = params_[30].second;
    double ccaa0 = params_[31].second;
    double ccaa1 = params_[32].second;
    double ccaa2 = params_[33].second;
    double ccaa3 = params_[34].second;
    double cx0 = params_[35].second;
    double cx1 = params_[36].second;
    double cx2 = params_[37].second;
    double cx3 = params_[38].second;
    double cxnl0 = params_[39].second;
    double cxnl1 = params_[40].second;
    double cxnl2 = params_[41].second;
    double cxnl3 = params_[42].second;

    //Functional
    for (int index = 0; index < ntrue; index++) {

        //Functional Value
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t92481 = pow(rho_a[index],5.0/3.0);
            double t92482 = 1.0/tau_a[index];
            double t92483 = C_k*t92481*t92482;
            double t92484 = t92483-1.0;
            double t92485 = t92484*t92484;
            double t92486 = t92483+1.0;
            double t92487 = t92485*t92485;
            double t92488 = 1.0/pow(rho_a[index],8.0/3.0);
            double t92489 = gamma_aa[index]*gamma_aa[index];
            double t92490 = gx*gx;
            double t92491 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]);
            double t92492 = 1.0/pow(rho_a[index],1.6E1/3.0);
            double t92493 = gamma_aa[index]*gx*t92488;
            double t92494 = t92493+1.0;
            double t92495 = 1.0/t92494;
            double t92496 = gamma_aa[index]*gx*t92488*3.0;
            double t92497 = gamma_aa[index]*gx*t92490*t92491*t92489;
            double t92498 = t92490*t92492*t92489*3.0;
            double t92499 = t92496+t92497+t92498+1.0;
            double t92500 = 1.0/t92499;
            double t92501 = gamma_aa[index]*gx*t92488*2.0;
            double t92502 = t92490*t92492*t92489;
            double t92503 = t92501+t92502+1.0;
            double t92504 = 1.0/t92503;
            double t92505 = pow(rho_b[index],5.0/3.0);
            double t92506 = 1.0/tau_b[index];
            double t92507 = C_k*t92505*t92506;
            double t92508 = t92507-1.0;
            double t92509 = t92508*t92508;
            double t92510 = t92507+1.0;
            double t92511 = t92509*t92509;
            double t92512 = 1.0/pow(rho_b[index],8.0/3.0);
            double t92513 = gamma_bb[index]*gamma_bb[index];
            double t92514 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
               rho_b[index]*rho_b[index]);
            double t92515 = 1.0/pow(rho_b[index],1.6E1/3.0);
            double t92516 = gamma_bb[index]*gx*t92512;
            double t92517 = t92516+1.0;
            double t92518 = 1.0/t92517;
            double t92519 = gamma_bb[index]*gx*t92512*3.0;
            double t92520 = gamma_bb[index]*gx*t92513*t92514*t92490;
            double t92521 = t92513*t92515*t92490*3.0;
            double t92522 = t92520+t92521+t92519+1.0;
            double t92523 = 1.0/t92522;
            double t92524 = gamma_bb[index]*gx*t92512*2.0;
            double t92525 = t92513*t92515*t92490;
            double t92526 = t92524+t92525+1.0;
            double t92527 = 1.0/t92526;
            double t92528 = 1.0/pow(rho_a[index],1.0/3.0);
            double t92529 = c*t92528;
            double t92530 = sqrt(t92529);
            double t92531 = pow(t92529,3.0/2.0);
            double t92532 = c*c;
            double t92533 = 1.0/pow(rho_a[index],2.0/3.0);
            double t92534 = 1.0/c0p;
            double t92535 = b1p*t92530;
            double t92536 = b3p*t92531;
            double t92537 = b4p*t92532*t92533;
            double t92538 = b2p*c*t92528;
            double t92539 = t92535+t92536+t92537+t92538;
            double t92540 = 1.0/t92539;
            double t92541 = t92540*t92534*(1.0/2.0);
            double t92542 = t92541+1.0;
            double t92543 = log(t92542);
            double t92544 = a1p*c*t92528;
            double t92545 = t92544+1.0;
            double t92546 = pow(2.0,1.0/3.0);
            double t92547 = t92546*2.0;
            double t92548 = t92547-2.0;
            double t92549 = two_13*2.0;
            double t92550 = t92549-2.0;
            double t92551 = 1.0/t92550;
            double t92552 = 1.0/c0f;
            double t92553 = 1.0/pow(rho_b[index],1.0/3.0);
            double t92554 = c*t92553;
            double t92555 = sqrt(t92554);
            double t92556 = pow(t92554,3.0/2.0);
            double t92557 = 1.0/pow(rho_b[index],2.0/3.0);
            double t92558 = b1p*t92555;
            double t92559 = b3p*t92556;
            double t92560 = b4p*t92532*t92557;
            double t92561 = b2p*c*t92553;
            double t92562 = t92560+t92561+t92558+t92559;
            double t92563 = 1.0/t92562;
            double t92564 = t92534*t92563*(1.0/2.0);
            double t92565 = t92564+1.0;
            double t92566 = log(t92565);
            double t92567 = a1p*c*t92553;
            double t92568 = t92567+1.0;
            double t92569 = c0p*t92566*t92568*2.0;
            double t92570 = rho_a[index]+rho_b[index];
            double t92571 = 1.0/pow(t92570,1.0/3.0);
            double t92572 = c*t92571;
            double t92573 = sqrt(t92572);
            double t92574 = pow(t92572,3.0/2.0);
            double t92575 = 1.0/pow(t92570,2.0/3.0);
            double t92576 = b1p*t92573;
            double t92577 = b3p*t92574;
            double t92578 = b4p*t92532*t92575;
            double t92579 = b2p*c*t92571;
            double t92580 = t92576+t92577+t92578+t92579;
            double t92581 = 1.0/t92580;
            double t92582 = t92534*t92581*(1.0/2.0);
            double t92583 = t92582+1.0;
            double t92584 = log(t92583);
            double t92585 = a1p*c*t92571;
            double t92586 = t92585+1.0;
            double t92587 = c0p*t92584*t92586*2.0;
            double t92588 = rho_a[index]-rho_b[index];
            double t92589 = t92588*t92588;
            double t92590 = 1.0/t92570;
            double t92591 = t92590*t92588;
            double t92592 = 1.0/(t92570*t92570*t92570*t92570);
            double t92593 = t92589*t92589;
            double t92594 = t92591+1.0;
            double t92595 = pow(t92594,4.0/3.0);
            double t92596 = -t92591+1.0;
            double t92597 = pow(t92596,4.0/3.0);
            double t92598 = t92595+t92597-2.0;
            double t92601 = gamma_aa[index]*t92488*(1.0/2.0);
            double t92602 = gamma_bb[index]*t92512*(1.0/2.0);
            double t92599 = t92601+t92602;
            double t92600 = gcab*gcab;
            double t92603 = t92599*t92599;
            double t92604 = c0p*t92543*t92545*2.0;
            double t92605 = b1f*t92530;
            double t92606 = b3f*t92531;
            double t92607 = b4f*t92532*t92533;
            double t92608 = b2f*c*t92528;
            double t92609 = t92605+t92606+t92607+t92608;
            double t92610 = 1.0/t92609;
            double t92611 = t92610*t92552*(1.0/2.0);
            double t92612 = t92611+1.0;
            double t92613 = log(t92612);
            double t92614 = a1f*c*t92528;
            double t92615 = t92614+1.0;
            double t92616 = t92604-c0f*t92613*t92615*2.0;
            double t92617 = t92604-t92551*t92616*t92548;
            double t92618 = gcaa*gcaa;
            double t92619 = b1f*t92555;
            double t92620 = b3f*t92556;
            double t92621 = b4f*t92532*t92557;
            double t92622 = b2f*c*t92553;
            double t92623 = t92620+t92621+t92622+t92619;
            double t92624 = 1.0/t92623;
            double t92625 = t92552*t92624*(1.0/2.0);
            double t92626 = t92625+1.0;
            double t92627 = log(t92626);
            double t92628 = a1f*c*t92553;
            double t92629 = t92628+1.0;
            double t92630 = t92569-c0f*t92627*t92629*2.0;
            double t92631 = t92569-t92630*t92551*t92548;
            functional_[index] = (rho_b[index]*t92631+rho_a[index]*t92617-t92570*(t92587-t92551*t92592*t92593* \
               t92598*(t92587-c0f*log((t92552*(1.0/2.0))/(b1f*t92573+b3f*t92574+b2f*c*t92571+b4f*t92532*t92575)+1.0) \
               *(a1f*c*t92571+1.0)*2.0)+(Aa*t92551*t92598*log((1.0/2.0)/(Aa*(b1a*t92573+b3a*t92574+b2a*c*t92571+b4a* \
               t92532*t92575))+1.0)*(t92592*t92593-1.0)*(a1a*c*t92571+1.0)*2.0)/d2fz0))*(ccab0+(ccab1*gcab*t92599) \
               /(gcab*t92599+1.0)+(ccab2*t92600*t92603)/(gcab*t92599*2.0+t92600*t92603+1.0)+(ccab3*gcab*t92600*t92603* \
               t92599)/(gcab*t92599*3.0+t92600*t92603*3.0+gcab*t92600*t92603*t92599+1.0))-(c0*pow(rho_b[index],4.0/ \
               3.0)*(cx0+(t92508/t92510+1.0/(t92510*t92510*t92510*t92510*t92510)*t92511*t92508-1.0/(t92510*t92510* \
               t92510)*t92508*t92509*2.0)*(cxnl0+cxnl1*gamma_bb[index]*gx*t92512*t92518+cxnl2*t92513*t92515*t92490* \
               t92527+cxnl3*gamma_bb[index]*gx*t92513*t92514*t92523*t92490)+cx1*gamma_bb[index]*gx*t92512*t92518+ \
               cx2*t92513*t92515*t92490*t92527+cx3*gamma_bb[index]*gx*t92513*t92514*t92523*t92490)+c0*pow(rho_a[index],4.0/ \
               3.0)*(cx0+(t92484/t92486-t92484*t92485*1.0/(t92486*t92486*t92486)*2.0+t92484*1.0/(t92486*t92486*t92486* \
               t92486*t92486)*t92487)*(cxnl0+cxnl1*gamma_aa[index]*gx*t92495*t92488+cxnl2*t92504*t92490*t92492*t92489+ \
               cxnl3*gamma_aa[index]*gx*t92500*t92490*t92491*t92489)+cx1*gamma_aa[index]*gx*t92495*t92488+cx2*t92504* \
               t92490*t92492*t92489+cx3*gamma_aa[index]*gx*t92500*t92490*t92491*t92489))*(X-1.0)-rho_b[index]*t92631* \
               (ccaa0+(ccaa2*t92513*t92515*t92618)/(gamma_bb[index]*gcaa*t92512*2.0+t92513*t92515*t92618+1.0)+(ccaa1* \
               gamma_bb[index]*gcaa*t92512)/(gamma_bb[index]*gcaa*t92512+1.0)+(ccaa3*gamma_bb[index]*gcaa*t92513* \
               t92514*t92618)/(gamma_bb[index]*gcaa*t92512*3.0+t92513*t92515*t92618*3.0+gamma_bb[index]*gcaa*t92513* \
               t92514*t92618+1.0))-rho_a[index]*t92617*(ccaa0+(ccaa2*t92492*t92618*t92489)/(gamma_aa[index]*gcaa* \
               t92488*2.0+t92492*t92618*t92489+1.0)+(ccaa1*gamma_aa[index]*gcaa*t92488)/(gamma_aa[index]*gcaa*t92488+ \
               1.0)+(ccaa3*gamma_aa[index]*gcaa*t92491*t92618*t92489)/(gamma_aa[index]*gcaa*t92488*3.0+t92492*t92618* \
               t92489*3.0+gamma_aa[index]*gcaa*t92491*t92618*t92489+1.0));
        } else if (rho_a[index] > cutoff_) {
            double t96812 = 1.0/pow(rho_a[index],1.0/3.0);
            double t96813 = c*t96812;
            double t96814 = sqrt(t96813);
            double t96815 = pow(t96813,3.0/2.0);
            double t96816 = c*c;
            double t96817 = 1.0/pow(rho_a[index],2.0/3.0);
            double t96818 = 1.0/c0p;
            double t96819 = b1p*t96814;
            double t96820 = b3p*t96815;
            double t96821 = b4p*t96816*t96817;
            double t96822 = b2p*c*t96812;
            double t96823 = t96820+t96821+t96822+t96819;
            double t96824 = 1.0/t96823;
            double t96825 = t96824*t96818*(1.0/2.0);
            double t96826 = t96825+1.0;
            double t96827 = log(t96826);
            double t96828 = a1p*c*t96812;
            double t96829 = t96828+1.0;
            double t96830 = 1.0/pow(rho_a[index],8.0/3.0);
            double t96831 = gamma_aa[index]*gamma_aa[index];
            double t96832 = gcaa*gcaa;
            double t96833 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]);
            double t96834 = 1.0/pow(rho_a[index],1.6E1/3.0);
            double t96835 = pow(rho_a[index],5.0/3.0);
            double t96836 = 1.0/tau_a[index];
            double t96837 = C_k*t96835*t96836;
            double t96838 = t96837-1.0;
            double t96839 = t96838*t96838;
            double t96840 = t96837+1.0;
            double t96841 = t96839*t96839;
            double t96842 = gx*gx;
            double t96843 = gamma_aa[index]*gx*t96830;
            double t96844 = t96843+1.0;
            double t96845 = 1.0/t96844;
            double t96846 = gamma_aa[index]*gx*t96830*3.0;
            double t96847 = gamma_aa[index]*gx*t96831*t96833*t96842;
            double t96848 = t96831*t96842*t96834*3.0;
            double t96849 = t96846+t96847+t96848+1.0;
            double t96850 = 1.0/t96849;
            double t96851 = gamma_aa[index]*gx*t96830*2.0;
            double t96852 = t96831*t96842*t96834;
            double t96853 = t96851+t96852+1.0;
            double t96854 = 1.0/t96853;
            functional_[index] = -rho_a[index]*(((pow(2.0,1.0/3.0)*2.0-2.0)*(c0f*log((1.0/2.0)/(c0f*(b1f*t96814+ \
               b3f*t96815+b2f*c*t96812+b4f*t96816*t96817))+1.0)*(a1f*c*t96812+1.0)*2.0-c0p*t96827*t96829*2.0))/(two_13* \
               2.0-2.0)+c0p*t96827*t96829*2.0)*(ccaa0+(ccaa2*t96831*t96832*t96834)/(gamma_aa[index]*gcaa*t96830*2.0+ \
               t96831*t96832*t96834+1.0)+(ccaa1*gamma_aa[index]*gcaa*t96830)/(gamma_aa[index]*gcaa*t96830+1.0)+(ccaa3* \
               gamma_aa[index]*gcaa*t96831*t96832*t96833)/(gamma_aa[index]*gcaa*t96830*3.0+t96831*t96832*t96834*3.0+ \
               gamma_aa[index]*gcaa*t96831*t96832*t96833+1.0))-c0*pow(rho_a[index],4.0/3.0)*(X-1.0)*(cx0+(t96838/ \
               t96840+1.0/(t96840*t96840*t96840*t96840*t96840)*t96841*t96838-1.0/(t96840*t96840*t96840)*t96838*t96839* \
               2.0)*(cxnl0+cxnl1*gamma_aa[index]*gx*t96830*t96845+cxnl2*t96831*t96842*t96834*t96854+cxnl3*gamma_aa[index]* \
               gx*t96831*t96850*t96833*t96842)+cx1*gamma_aa[index]*gx*t96830*t96845+cx2*t96831*t96842*t96834*t96854+ \
               cx3*gamma_aa[index]*gx*t96831*t96850*t96833*t96842);
        } else if (rho_b[index] > cutoff_) {
            double t96041 = 1.0/pow(rho_b[index],1.0/3.0);
            double t96042 = c*t96041;
            double t96043 = sqrt(t96042);
            double t96044 = pow(t96042,3.0/2.0);
            double t96045 = c*c;
            double t96046 = 1.0/pow(rho_b[index],2.0/3.0);
            double t96047 = 1.0/c0p;
            double t96048 = b1p*t96043;
            double t96049 = b3p*t96044;
            double t96050 = b4p*t96045*t96046;
            double t96051 = b2p*c*t96041;
            double t96052 = t96050+t96051+t96048+t96049;
            double t96053 = 1.0/t96052;
            double t96054 = t96053*t96047*(1.0/2.0);
            double t96055 = t96054+1.0;
            double t96056 = log(t96055);
            double t96057 = a1p*c*t96041;
            double t96058 = t96057+1.0;
            double t96059 = 1.0/pow(rho_b[index],8.0/3.0);
            double t96060 = gamma_bb[index]*gamma_bb[index];
            double t96061 = gcaa*gcaa;
            double t96062 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
               rho_b[index]*rho_b[index]);
            double t96063 = 1.0/pow(rho_b[index],1.6E1/3.0);
            double t96064 = pow(rho_b[index],5.0/3.0);
            double t96065 = 1.0/tau_b[index];
            double t96066 = C_k*t96064*t96065;
            double t96067 = t96066-1.0;
            double t96068 = t96067*t96067;
            double t96069 = t96066+1.0;
            double t96070 = t96068*t96068;
            double t96071 = gx*gx;
            double t96072 = gamma_bb[index]*gx*t96059;
            double t96073 = t96072+1.0;
            double t96074 = 1.0/t96073;
            double t96075 = gamma_bb[index]*gx*t96059*3.0;
            double t96076 = gamma_bb[index]*gx*t96060*t96062*t96071;
            double t96077 = t96060*t96071*t96063*3.0;
            double t96078 = t96075+t96076+t96077+1.0;
            double t96079 = 1.0/t96078;
            double t96080 = gamma_bb[index]*gx*t96059*2.0;
            double t96081 = t96060*t96071*t96063;
            double t96082 = t96080+t96081+1.0;
            double t96083 = 1.0/t96082;
            functional_[index] = -rho_b[index]*(((pow(2.0,1.0/3.0)*2.0-2.0)*(c0f*log((1.0/2.0)/(c0f*(b1f*t96043+ \
               b3f*t96044+b2f*c*t96041+b4f*t96045*t96046))+1.0)*(a1f*c*t96041+1.0)*2.0-c0p*t96056*t96058*2.0))/(two_13* \
               2.0-2.0)+c0p*t96056*t96058*2.0)*(ccaa0+(ccaa2*t96060*t96061*t96063)/(gamma_bb[index]*gcaa*t96059*2.0+ \
               t96060*t96061*t96063+1.0)+(ccaa1*gamma_bb[index]*gcaa*t96059)/(gamma_bb[index]*gcaa*t96059+1.0)+(ccaa3* \
               gamma_bb[index]*gcaa*t96060*t96061*t96062)/(gamma_bb[index]*gcaa*t96059*3.0+t96060*t96061*t96063*3.0+ \
               gamma_bb[index]*gcaa*t96060*t96061*t96062+1.0))-c0*pow(rho_b[index],4.0/3.0)*(X-1.0)*(cx0+(t96067/ \
               t96069+t96070*t96067*1.0/(t96069*t96069*t96069*t96069*t96069)-t96067*t96068*1.0/(t96069*t96069*t96069) \
               *2.0)*(cxnl0+cxnl1*gamma_bb[index]*gx*t96074*t96059+cxnl2*t96060*t96071*t96063*t96083+cxnl3*gamma_bb[index]* \
               gx*t96060*t96062*t96071*t96079)+cx1*gamma_bb[index]*gx*t96074*t96059+cx2*t96060*t96071*t96063*t96083+ \
               cx3*gamma_bb[index]*gx*t96060*t96062*t96071*t96079);
        } else {
            functional_[index] = 0.0;
        } 

    }
    //First Partials
    for (int index = 0; index < ntrue && deriv_ >= 1; index++) {

        //V_rho_a
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t92633 = 1.0/pow(rho_a[index],1.0/3.0);
            double t92634 = c*t92633;
            double t92635 = sqrt(t92634);
            double t92636 = pow(t92634,3.0/2.0);
            double t92637 = c*c;
            double t92638 = 1.0/pow(rho_a[index],2.0/3.0);
            double t92639 = 1.0/c0p;
            double t92640 = b1p*t92635;
            double t92641 = b3p*t92636;
            double t92642 = b4p*t92637*t92638;
            double t92643 = b2p*c*t92633;
            double t92644 = t92640+t92641+t92642+t92643;
            double t92645 = 1.0/t92644;
            double t92646 = t92645*t92639*(1.0/2.0);
            double t92647 = t92646+1.0;
            double t92648 = log(t92647);
            double t92649 = a1p*c*t92633;
            double t92650 = t92649+1.0;
            double t92651 = pow(2.0,1.0/3.0);
            double t92652 = t92651*2.0;
            double t92653 = t92652-2.0;
            double t92654 = two_13*2.0;
            double t92655 = t92654-2.0;
            double t92656 = 1.0/t92655;
            double t92657 = 1.0/c0f;
            double t92658 = 1.0/pow(rho_b[index],1.0/3.0);
            double t92659 = c*t92658;
            double t92660 = sqrt(t92659);
            double t92661 = pow(t92659,3.0/2.0);
            double t92662 = 1.0/pow(rho_b[index],2.0/3.0);
            double t92663 = b1p*t92660;
            double t92664 = b3p*t92661;
            double t92665 = b4p*t92662*t92637;
            double t92666 = b2p*c*t92658;
            double t92667 = t92663+t92664+t92665+t92666;
            double t92668 = 1.0/t92667;
            double t92669 = t92639*t92668*(1.0/2.0);
            double t92670 = t92669+1.0;
            double t92671 = log(t92670);
            double t92672 = a1p*c*t92658;
            double t92673 = t92672+1.0;
            double t92674 = c0p*t92671*t92673*2.0;
            double t92675 = rho_a[index]+rho_b[index];
            double t92676 = 1.0/pow(t92675,1.0/3.0);
            double t92677 = c*t92676;
            double t92678 = sqrt(t92677);
            double t92679 = pow(t92677,3.0/2.0);
            double t92680 = 1.0/pow(t92675,2.0/3.0);
            double t92681 = b1p*t92678;
            double t92682 = b3p*t92679;
            double t92683 = b4p*t92680*t92637;
            double t92684 = b2p*c*t92676;
            double t92685 = t92681+t92682+t92683+t92684;
            double t92686 = 1.0/t92685;
            double t92687 = t92639*t92686*(1.0/2.0);
            double t92688 = t92687+1.0;
            double t92689 = log(t92688);
            double t92690 = a1p*c*t92676;
            double t92691 = t92690+1.0;
            double t92692 = c0p*t92691*t92689*2.0;
            double t92693 = rho_a[index]-rho_b[index];
            double t92694 = t92693*t92693;
            double t92695 = 1.0/t92675;
            double t92696 = t92693*t92695;
            double t92697 = 1.0/(t92675*t92675*t92675*t92675);
            double t92698 = t92694*t92694;
            double t92699 = t92696+1.0;
            double t92700 = pow(t92699,4.0/3.0);
            double t92701 = -t92696+1.0;
            double t92702 = pow(t92701,4.0/3.0);
            double t92703 = t92700+t92702-2.0;
            double t92704 = gcab*gcab;
            double t92708 = 1.0/pow(rho_a[index],8.0/3.0);
            double t92709 = gamma_aa[index]*t92708*(1.0/2.0);
            double t92710 = 1.0/pow(rho_b[index],8.0/3.0);
            double t92711 = gamma_bb[index]*t92710*(1.0/2.0);
            double t92705 = t92711+t92709;
            double t92706 = t92705*t92705;
            double t92707 = 1.0/pow(rho_a[index],1.1E1/3.0);
            double t92712 = gcab*t92705;
            double t92713 = t92712+1.0;
            double t92714 = t92704*t92706;
            double t92715 = gcab*t92705*2.0;
            double t92716 = t92714+t92715+1.0;
            double t92717 = t92704*t92706*3.0;
            double t92718 = gcab*t92704*t92705*t92706;
            double t92719 = gcab*t92705*3.0;
            double t92720 = t92717+t92718+t92719+1.0;
            double t92721 = c0p*t92650*t92648*2.0;
            double t92722 = 1.0/t92716;
            double t92723 = 1.0/t92720;
            double t92724 = 1.0/t92713;
            double t92725 = 1.0/pow(t92675,4.0/3.0);
            double t92726 = b1f*t92678;
            double t92727 = b3f*t92679;
            double t92728 = b4f*t92680*t92637;
            double t92729 = b2f*c*t92676;
            double t92730 = t92726+t92727+t92728+t92729;
            double t92731 = 1.0/t92730;
            double t92732 = t92731*t92657*(1.0/2.0);
            double t92733 = t92732+1.0;
            double t92734 = log(t92733);
            double t92735 = a1f*c*t92676;
            double t92736 = t92735+1.0;
            double t92738 = c0f*t92734*t92736*2.0;
            double t92737 = t92692-t92738;
            double t92739 = 1.0/(t92675*t92675);
            double t92766 = t92693*t92739;
            double t92740 = -t92766+t92695;
            double t92741 = 1.0/pow(t92675,5.0/3.0);
            double t92742 = 1.0/sqrt(t92677);
            double t92743 = 1.0/t92688;
            double t92744 = 1.0/(t92685*t92685);
            double t92745 = b4p*t92741*t92637*(2.0/3.0);
            double t92746 = b2p*c*t92725*(1.0/3.0);
            double t92747 = b1p*c*t92742*t92725*(1.0/6.0);
            double t92748 = b3p*c*t92725*t92678*(1.0/2.0);
            double t92749 = t92745+t92746+t92747+t92748;
            double t92750 = t92743*t92744*t92691*t92749;
            double t92751 = 1.0/d2fz0;
            double t92752 = 1.0/Aa;
            double t92753 = b1a*t92678;
            double t92754 = b3a*t92679;
            double t92755 = b4a*t92680*t92637;
            double t92756 = b2a*c*t92676;
            double t92757 = t92753+t92754+t92755+t92756;
            double t92758 = 1.0/t92757;
            double t92759 = t92752*t92758*(1.0/2.0);
            double t92760 = t92759+1.0;
            double t92761 = log(t92760);
            double t92762 = a1a*c*t92676;
            double t92763 = t92762+1.0;
            double t92764 = 1.0/(t92675*t92675*t92675*t92675*t92675);
            double t92765 = pow(t92699,1.0/3.0);
            double t92767 = t92740*t92765*(4.0/3.0);
            double t92768 = pow(t92701,1.0/3.0);
            double t92769 = t92767-t92740*t92768*(4.0/3.0);
            double t92770 = t92697*t92698;
            double t92771 = t92770-1.0;
            double t92772 = a1f*c*t92633;
            double t92773 = t92772+1.0;
            double t92774 = b1f*t92635;
            double t92775 = b3f*t92636;
            double t92776 = b4f*t92637*t92638;
            double t92777 = b2f*c*t92633;
            double t92778 = t92774+t92775+t92776+t92777;
            double t92779 = 1.0/t92778;
            double t92780 = t92657*t92779*(1.0/2.0);
            double t92781 = t92780+1.0;
            double t92782 = 1.0/pow(rho_a[index],4.0/3.0);
            double t92783 = 1.0/pow(rho_a[index],5.0/3.0);
            double t92784 = 1.0/sqrt(t92634);
            double t92785 = log(t92781);
            double t92786 = 1.0/t92647;
            double t92787 = 1.0/(t92644*t92644);
            double t92788 = b4p*t92637*t92783*(2.0/3.0);
            double t92789 = b2p*c*t92782*(1.0/3.0);
            double t92790 = b1p*c*t92782*t92784*(1.0/6.0);
            double t92791 = b3p*c*t92635*t92782*(1.0/2.0);
            double t92792 = t92790+t92791+t92788+t92789;
            double t92793 = t92650*t92792*t92786*t92787;
            double t92794 = Aa*t92703*t92751*t92761*t92771*t92763*t92656*2.0;
            double t92796 = c0f*t92773*t92785*2.0;
            double t92795 = t92721-t92796;
            double t92797 = t92653*t92656*t92795;
            double t92798 = gamma_aa[index]*gamma_aa[index];
            double t92799 = gcaa*gcaa;
            double t92800 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]);
            double t92801 = 1.0/pow(rho_a[index],1.6E1/3.0);
            double t92802 = pow(rho_a[index],5.0/3.0);
            double t92803 = 1.0/tau_a[index];
            double t92804 = C_k*t92802*t92803;
            double t92805 = t92804-1.0;
            double t92806 = t92805*t92805;
            double t92807 = t92804+1.0;
            double t92808 = t92806*t92806;
            double t92809 = gx*gx;
            double t92810 = gamma_aa[index]*gx*t92708;
            double t92811 = t92810+1.0;
            double t92812 = 1.0/t92811;
            double t92813 = gamma_aa[index]*gx*t92708*3.0;
            double t92814 = gamma_aa[index]*gx*t92800*t92809*t92798;
            double t92815 = t92801*t92809*t92798*3.0;
            double t92816 = t92813+t92814+t92815+1.0;
            double t92817 = 1.0/t92816;
            double t92818 = gamma_aa[index]*gx*t92708*2.0;
            double t92819 = t92801*t92809*t92798;
            double t92820 = t92818+t92819+1.0;
            double t92821 = 1.0/t92820;
            double t92822 = 1.0/t92807;
            double t92823 = t92822*t92805;
            double t92824 = 1.0/(t92807*t92807*t92807);
            double t92825 = 1.0/(t92807*t92807*t92807*t92807*t92807);
            double t92826 = t92805*t92825*t92808;
            double t92827 = t92823+t92826-t92805*t92806*t92824*2.0;
            double t92828 = 1.0/pow(rho_a[index],1.9E1/3.0);
            double t92829 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]*rho_a[index]);
            double t92830 = cxnl1*gamma_aa[index]*gx*t92812*t92708;
            double t92831 = cxnl3*gamma_aa[index]*gx*t92800*t92817*t92809*t92798;
            double t92832 = cxnl2*t92801*t92821*t92809*t92798;
            double t92833 = cxnl0+t92830+t92831+t92832;
            double t92834 = pow(rho_a[index],2.0/3.0);
            double t92835 = 1.0/(t92811*t92811);
            double t92836 = gamma_aa[index]*gx*t92707*8.0;
            double t92837 = gamma_aa[index]*gx*t92809*t92829*t92798*8.0;
            double t92838 = t92809*t92828*t92798*1.6E1;
            double t92839 = t92836+t92837+t92838;
            double t92840 = 1.0/(t92816*t92816);
            double t92841 = gamma_aa[index]*gx*t92707*(1.6E1/3.0);
            double t92842 = t92809*t92828*t92798*(1.6E1/3.0);
            double t92843 = t92841+t92842;
            double t92844 = 1.0/(t92820*t92820);
            double t92845 = t92721-t92797;
            double t92846 = gamma_aa[index]*gcaa*t92708;
            double t92847 = t92846+1.0;
            double t92848 = 1.0/t92847;
            double t92849 = gamma_aa[index]*gcaa*t92708*3.0;
            double t92850 = gamma_aa[index]*gcaa*t92800*t92798*t92799;
            double t92851 = t92801*t92798*t92799*3.0;
            double t92852 = t92850+t92851+t92849+1.0;
            double t92853 = 1.0/t92852;
            double t92854 = gamma_aa[index]*gcaa*t92708*2.0;
            double t92855 = t92801*t92798*t92799;
            double t92856 = t92854+t92855+1.0;
            double t92857 = 1.0/t92856;
            double t92858 = 1.0/t92781;
            double t92859 = 1.0/(t92778*t92778);
            double t92860 = b4f*t92637*t92783*(2.0/3.0);
            double t92861 = b2f*c*t92782*(1.0/3.0);
            double t92862 = b1f*c*t92782*t92784*(1.0/6.0);
            double t92863 = b3f*c*t92635*t92782*(1.0/2.0);
            double t92864 = t92860+t92861+t92862+t92863;
            double t92865 = a1f*c*c0f*t92782*t92785*(2.0/3.0);
            double t92866 = a1p*c*c0p*t92782*t92648*(2.0/3.0);
            double t92867 = ccaa1*gamma_aa[index]*gcaa*t92708*t92848;
            double t92868 = ccaa3*gamma_aa[index]*gcaa*t92800*t92853*t92798*t92799;
            double t92869 = ccaa2*t92801*t92857*t92798*t92799;
            double t92870 = ccaa0+t92867+t92868+t92869;
            v_rho_a_[index] = -t92870*t92845-(rho_a[index]*(t92721-t92653*t92656*t92795)+rho_b[index]*(t92674- \
               t92653*t92656*(t92674-c0f*log((t92657*(1.0/2.0))/(b1f*t92660+b3f*t92661+b2f*c*t92658+b4f*t92662*t92637) \
               +1.0)*(a1f*c*t92658+1.0)*2.0))-t92675*(t92692+t92794-t92703*t92656*t92737*t92697*t92698))*(ccab1*gamma_aa[index]* \
               gcab*t92724*t92707*(4.0/3.0)-ccab2*t92704*t92706*1.0/(t92716*t92716)*(gamma_aa[index]*gcab*t92707* \
               (8.0/3.0)+gamma_aa[index]*t92704*t92705*t92707*(8.0/3.0))-ccab1*gamma_aa[index]*t92704*1.0/(t92713* \
               t92713)*t92705*t92707*(4.0/3.0)+ccab2*gamma_aa[index]*t92704*t92722*t92705*t92707*(8.0/3.0)-ccab3* \
               gcab*1.0/(t92720*t92720)*t92704*t92705*t92706*(gamma_aa[index]*gcab*t92707*4.0+gamma_aa[index]*t92704* \
               t92705*t92707*8.0+gamma_aa[index]*gcab*t92704*t92706*t92707*4.0)+ccab3*gamma_aa[index]*gcab*t92704* \
               t92723*t92706*t92707*4.0)-(ccab0+ccab1*gcab*t92705*t92724+ccab2*t92704*t92722*t92706+ccab3*gcab*t92704* \
               t92705*t92723*t92706)*(-t92721+t92692+t92794+t92797+rho_a[index]*(-t92793+t92866+t92653*t92656*(t92793+ \
               t92865-t92773*t92864*t92858*t92859-a1p*c*c0p*t92782*t92648*(2.0/3.0)))-t92675*(-t92750+t92703*t92656* \
               t92697*t92698*(t92750-(1.0/(t92730*t92730)*t92736*(b2f*c*t92725*(1.0/3.0)+b4f*t92741*t92637*(2.0/3.0) \
               +b1f*c*t92742*t92725*(1.0/6.0)+b3f*c*t92725*t92678*(1.0/2.0)))/t92733+a1f*c*c0f*t92725*t92734*(2.0/ \
               3.0)-a1p*c*c0p*t92725*t92689*(2.0/3.0))+a1p*c*c0p*t92725*t92689*(2.0/3.0)-t92703*t92656*t92737*t92764* \
               t92698*4.0+t92656*t92737*t92697*t92769*t92698+t92703*t92656*t92737*t92693*t92694*t92697*4.0+Aa*t92703* \
               t92751*t92761*t92763*t92656*(t92764*t92698*4.0-t92693*t92694*t92697*4.0)*2.0-Aa*t92751*t92761*t92771* \
               t92763*t92656*t92769*2.0-(t92703*t92751*t92771*t92763*t92656*1.0/(t92757*t92757)*(b2a*c*t92725*(1.0/ \
               3.0)+b4a*t92741*t92637*(2.0/3.0)+b1a*c*t92742*t92725*(1.0/6.0)+b3a*c*t92725*t92678*(1.0/2.0)))/t92760+ \
               Aa*a1a*c*t92703*t92751*t92725*t92761*t92771*t92656*(2.0/3.0))-t92703*t92656*t92737*t92697*t92698)- \
               (X-1.0)*(c0*pow(rho_a[index],1.0/3.0)*(cx0+t92833*t92827+cx1*gamma_aa[index]*gx*t92812*t92708+cx2* \
               t92801*t92821*t92809*t92798+cx3*gamma_aa[index]*gx*t92800*t92817*t92809*t92798)*(4.0/3.0)-c0*pow(rho_a[index],4.0/ \
               3.0)*(t92827*(cxnl1*gamma_aa[index]*gx*t92812*t92707*(8.0/3.0)+cxnl2*t92821*t92809*t92828*t92798*(1.6E1/ \
               3.0)-cxnl1*t92835*t92809*t92828*t92798*(8.0/3.0)-cxnl2*t92801*t92843*t92844*t92809*t92798+cxnl3*gamma_aa[index]* \
               gx*t92817*t92809*t92829*t92798*8.0-cxnl3*gamma_aa[index]*gx*t92800*t92840*t92809*t92839*t92798)-t92833* \
               (C_k*t92803*t92822*t92834*(5.0/3.0)-C_k*t92803*t92806*t92824*t92834*1.0E1+C_k*t92803*t92825*t92834* \
               t92808*(2.5E1/3.0)-C_k*t92803*t92805*1.0/(t92807*t92807)*t92834*(5.0/3.0)+C_k*t92803*t92805*t92806* \
               1.0/(t92807*t92807*t92807*t92807)*t92834*1.0E1-C_k*t92803*t92805*1.0/(t92807*t92807*t92807*t92807* \
               t92807*t92807)*t92834*t92808*(2.5E1/3.0))+cx1*gamma_aa[index]*gx*t92812*t92707*(8.0/3.0)-cx1*t92835* \
               t92809*t92828*t92798*(8.0/3.0)+cx2*t92821*t92809*t92828*t92798*(1.6E1/3.0)-cx2*t92801*t92843*t92844* \
               t92809*t92798+cx3*gamma_aa[index]*gx*t92817*t92809*t92829*t92798*8.0-cx3*gamma_aa[index]*gx*t92800* \
               t92840*t92809*t92839*t92798))+rho_a[index]*t92870*(-t92793+t92866+t92653*t92656*(t92793+t92865-t92866- \
               t92773*t92864*t92858*t92859))+rho_a[index]*t92845*(ccaa1*gamma_aa[index]*gcaa*t92707*t92848*(8.0/3.0) \
               +ccaa2*t92828*t92857*t92798*t92799*(1.6E1/3.0)-ccaa1*t92828*1.0/(t92847*t92847)*t92798*t92799*(8.0/ \
               3.0)-ccaa2*t92801*1.0/(t92856*t92856)*t92798*t92799*(gamma_aa[index]*gcaa*t92707*(1.6E1/3.0)+t92828* \
               t92798*t92799*(1.6E1/3.0))+ccaa3*gamma_aa[index]*gcaa*t92853*t92829*t92798*t92799*8.0-ccaa3*gamma_aa[index]* \
               gcaa*t92800*1.0/(t92852*t92852)*t92798*t92799*(gamma_aa[index]*gcaa*t92707*8.0+t92828*t92798*t92799* \
               1.6E1+gamma_aa[index]*gcaa*t92829*t92798*t92799*8.0));
        } else if (rho_a[index] > cutoff_) {
            double t96856 = 1.0/pow(rho_a[index],1.0/3.0);
            double t96857 = c*t96856;
            double t96858 = sqrt(t96857);
            double t96859 = pow(t96857,3.0/2.0);
            double t96860 = c*c;
            double t96861 = 1.0/pow(rho_a[index],2.0/3.0);
            double t96862 = 1.0/c0p;
            double t96863 = b1p*t96858;
            double t96864 = b3p*t96859;
            double t96865 = b4p*t96860*t96861;
            double t96866 = b2p*c*t96856;
            double t96867 = t96863+t96864+t96865+t96866;
            double t96868 = 1.0/t96867;
            double t96869 = t96862*t96868*(1.0/2.0);
            double t96870 = t96869+1.0;
            double t96871 = log(t96870);
            double t96872 = a1p*c*t96856;
            double t96873 = t96872+1.0;
            double t96874 = 1.0/pow(rho_a[index],8.0/3.0);
            double t96875 = gamma_aa[index]*gamma_aa[index];
            double t96876 = gcaa*gcaa;
            double t96877 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]);
            double t96878 = 1.0/pow(rho_a[index],1.6E1/3.0);
            double t96879 = pow(2.0,1.0/3.0);
            double t96880 = t96879*2.0;
            double t96881 = t96880-2.0;
            double t96882 = two_13*2.0;
            double t96883 = t96882-2.0;
            double t96884 = 1.0/t96883;
            double t96885 = 1.0/c0f;
            double t96886 = b1f*t96858;
            double t96887 = b3f*t96859;
            double t96888 = b4f*t96860*t96861;
            double t96889 = b2f*c*t96856;
            double t96890 = t96886+t96887+t96888+t96889;
            double t96891 = 1.0/t96890;
            double t96892 = t96891*t96885*(1.0/2.0);
            double t96893 = t96892+1.0;
            double t96894 = log(t96893);
            double t96895 = a1f*c*t96856;
            double t96896 = t96895+1.0;
            double t96897 = c0f*t96894*t96896*2.0;
            double t96898 = c0p*t96871*t96873*2.0;
            double t96899 = gamma_aa[index]*gcaa*t96874;
            double t96900 = t96899+1.0;
            double t96901 = 1.0/t96900;
            double t96902 = gamma_aa[index]*gcaa*t96874*3.0;
            double t96903 = gamma_aa[index]*gcaa*t96875*t96876*t96877;
            double t96904 = t96875*t96876*t96878*3.0;
            double t96905 = t96902+t96903+t96904+1.0;
            double t96906 = 1.0/t96905;
            double t96907 = gamma_aa[index]*gcaa*t96874*2.0;
            double t96908 = t96875*t96876*t96878;
            double t96909 = t96907+t96908+1.0;
            double t96910 = 1.0/t96909;
            double t96911 = 1.0/pow(rho_a[index],1.9E1/3.0);
            double t96912 = 1.0/pow(rho_a[index],1.1E1/3.0);
            double t96913 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]*rho_a[index]);
            double t96914 = 1.0/pow(rho_a[index],4.0/3.0);
            double t96915 = 1.0/pow(rho_a[index],5.0/3.0);
            double t96916 = 1.0/sqrt(t96857);
            double t96917 = 1.0/t96870;
            double t96918 = 1.0/(t96867*t96867);
            double t96919 = b4p*t96860*t96915*(2.0/3.0);
            double t96920 = b2p*c*t96914*(1.0/3.0);
            double t96921 = b1p*c*t96914*t96916*(1.0/6.0);
            double t96922 = b3p*c*t96914*t96858*(1.0/2.0);
            double t96923 = t96920+t96921+t96922+t96919;
            double t96924 = t96923*t96917*t96873*t96918;
            double t96925 = ccaa1*gamma_aa[index]*gcaa*t96901*t96874;
            double t96926 = ccaa3*gamma_aa[index]*gcaa*t96906*t96875*t96876*t96877;
            double t96927 = ccaa2*t96910*t96875*t96876*t96878;
            double t96928 = ccaa0+t96925+t96926+t96927;
            double t96929 = pow(rho_a[index],5.0/3.0);
            double t96930 = 1.0/tau_a[index];
            double t96931 = C_k*t96930*t96929;
            double t96932 = t96931-1.0;
            double t96933 = t96932*t96932;
            double t96934 = t96931+1.0;
            double t96935 = t96933*t96933;
            double t96936 = gx*gx;
            double t96937 = gamma_aa[index]*gx*t96874;
            double t96938 = t96937+1.0;
            double t96939 = 1.0/t96938;
            double t96940 = gamma_aa[index]*gx*t96874*3.0;
            double t96941 = gamma_aa[index]*gx*t96936*t96875*t96877;
            double t96942 = t96936*t96875*t96878*3.0;
            double t96943 = t96940+t96941+t96942+1.0;
            double t96944 = 1.0/t96943;
            double t96945 = gamma_aa[index]*gx*t96874*2.0;
            double t96946 = t96936*t96875*t96878;
            double t96947 = t96945+t96946+1.0;
            double t96948 = 1.0/t96947;
            double t96949 = X-1.0;
            double t96950 = 1.0/t96934;
            double t96951 = t96932*t96950;
            double t96952 = 1.0/(t96934*t96934*t96934);
            double t96953 = 1.0/(t96934*t96934*t96934*t96934*t96934);
            double t96954 = t96932*t96935*t96953;
            double t96955 = t96951+t96954-t96932*t96933*t96952*2.0;
            double t96956 = cxnl1*gamma_aa[index]*gx*t96874*t96939;
            double t96957 = cxnl3*gamma_aa[index]*gx*t96944*t96936*t96875*t96877;
            double t96958 = cxnl2*t96936*t96875*t96948*t96878;
            double t96959 = cxnl0+t96956+t96957+t96958;
            double t96960 = pow(rho_a[index],2.0/3.0);
            double t96961 = 1.0/(t96938*t96938);
            double t96962 = gamma_aa[index]*gx*t96912*8.0;
            double t96963 = gamma_aa[index]*gx*t96913*t96936*t96875*8.0;
            double t96964 = t96911*t96936*t96875*1.6E1;
            double t96965 = t96962+t96963+t96964;
            double t96966 = 1.0/(t96943*t96943);
            double t96967 = gamma_aa[index]*gx*t96912*(1.6E1/3.0);
            double t96968 = t96911*t96936*t96875*(1.6E1/3.0);
            double t96969 = t96967+t96968;
            double t96970 = 1.0/(t96947*t96947);
            v_rho_a_[index] = -t96928*(t96898+t96881*t96884*(t96897-c0p*t96871*t96873*2.0))+rho_a[index]*(t96898+ \
               t96881*t96884*(t96897-t96898))*(ccaa1*gamma_aa[index]*gcaa*t96901*t96912*(8.0/3.0)+ccaa2*t96910*t96911* \
               t96875*t96876*(1.6E1/3.0)-ccaa1*1.0/(t96900*t96900)*t96911*t96875*t96876*(8.0/3.0)-ccaa2*1.0/(t96909* \
               t96909)*t96875*t96876*t96878*(gamma_aa[index]*gcaa*t96912*(1.6E1/3.0)+t96911*t96875*t96876*(1.6E1/ \
               3.0))+ccaa3*gamma_aa[index]*gcaa*t96913*t96906*t96875*t96876*8.0-ccaa3*gamma_aa[index]*gcaa*1.0/(t96905* \
               t96905)*t96875*t96876*t96877*(gamma_aa[index]*gcaa*t96912*8.0+t96911*t96875*t96876*1.6E1+gamma_aa[index]* \
               gcaa*t96913*t96875*t96876*8.0))+rho_a[index]*t96928*(-t96924+t96881*t96884*(t96924-(1.0/(t96890*t96890) \
               *t96896*(b2f*c*t96914*(1.0/3.0)+b4f*t96860*t96915*(2.0/3.0)+b1f*c*t96914*t96916*(1.0/6.0)+b3f*c*t96914* \
               t96858*(1.0/2.0)))/t96893+a1f*c*c0f*t96914*t96894*(2.0/3.0)-a1p*c*c0p*t96914*t96871*(2.0/3.0))+a1p* \
               c*c0p*t96914*t96871*(2.0/3.0))-c0*pow(rho_a[index],1.0/3.0)*t96949*(cx0+t96955*t96959+cx1*gamma_aa[index]* \
               gx*t96874*t96939+cx2*t96936*t96875*t96948*t96878+cx3*gamma_aa[index]*gx*t96944*t96936*t96875*t96877) \
               *(4.0/3.0)+c0*pow(rho_a[index],4.0/3.0)*t96949*(t96955*(cxnl1*gamma_aa[index]*gx*t96912*t96939*(8.0/ \
               3.0)-cxnl1*t96911*t96961*t96936*t96875*(8.0/3.0)+cxnl2*t96911*t96936*t96875*t96948*(1.6E1/3.0)-cxnl2* \
               t96970*t96936*t96875*t96878*t96969+cxnl3*gamma_aa[index]*gx*t96913*t96944*t96936*t96875*8.0-cxnl3* \
               gamma_aa[index]*gx*t96936*t96875*t96965*t96966*t96877)-t96959*(C_k*t96930*t96950*t96960*(5.0/3.0)- \
               C_k*t96930*t96933*t96960*t96952*1.0E1+C_k*t96930*t96960*t96935*t96953*(2.5E1/3.0)-C_k*t96930*t96932* \
               t96960*1.0/(t96934*t96934)*(5.0/3.0)+C_k*t96930*t96932*t96933*t96960*1.0/(t96934*t96934*t96934*t96934) \
               *1.0E1-C_k*t96930*t96932*t96960*1.0/(t96934*t96934*t96934*t96934*t96934*t96934)*t96935*(2.5E1/3.0) \
               )+cx1*gamma_aa[index]*gx*t96912*t96939*(8.0/3.0)-cx1*t96911*t96961*t96936*t96875*(8.0/3.0)+cx2*t96911* \
               t96936*t96875*t96948*(1.6E1/3.0)-cx2*t96970*t96936*t96875*t96878*t96969+cx3*gamma_aa[index]*gx*t96913* \
               t96944*t96936*t96875*8.0-cx3*gamma_aa[index]*gx*t96936*t96875*t96965*t96966*t96877);
        } else if (rho_b[index] > cutoff_) {
            v_rho_a_[index] = 0.0;
        } else {
            v_rho_a_[index] = 0.0;
        } 

        //V_rho_b
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t92872 = 1.0/pow(rho_a[index],1.0/3.0);
            double t92873 = c*t92872;
            double t92874 = sqrt(t92873);
            double t92875 = pow(t92873,3.0/2.0);
            double t92876 = c*c;
            double t92877 = 1.0/pow(rho_a[index],2.0/3.0);
            double t92878 = 1.0/c0p;
            double t92879 = b1p*t92874;
            double t92880 = b3p*t92875;
            double t92881 = b4p*t92876*t92877;
            double t92882 = b2p*c*t92872;
            double t92883 = t92880+t92881+t92882+t92879;
            double t92884 = 1.0/t92883;
            double t92885 = t92884*t92878*(1.0/2.0);
            double t92886 = t92885+1.0;
            double t92887 = log(t92886);
            double t92888 = a1p*c*t92872;
            double t92889 = t92888+1.0;
            double t92890 = pow(2.0,1.0/3.0);
            double t92891 = t92890*2.0;
            double t92892 = t92891-2.0;
            double t92893 = two_13*2.0;
            double t92894 = t92893-2.0;
            double t92895 = 1.0/t92894;
            double t92896 = 1.0/c0f;
            double t92897 = 1.0/pow(rho_b[index],1.0/3.0);
            double t92898 = c*t92897;
            double t92899 = sqrt(t92898);
            double t92900 = pow(t92898,3.0/2.0);
            double t92901 = 1.0/pow(rho_b[index],2.0/3.0);
            double t92902 = b1p*t92899;
            double t92903 = b3p*t92900;
            double t92904 = b4p*t92901*t92876;
            double t92905 = b2p*c*t92897;
            double t92906 = t92902+t92903+t92904+t92905;
            double t92907 = 1.0/t92906;
            double t92908 = t92907*t92878*(1.0/2.0);
            double t92909 = t92908+1.0;
            double t92910 = log(t92909);
            double t92911 = a1p*c*t92897;
            double t92912 = t92911+1.0;
            double t92913 = c0p*t92910*t92912*2.0;
            double t92914 = rho_a[index]+rho_b[index];
            double t92915 = 1.0/pow(t92914,1.0/3.0);
            double t92916 = c*t92915;
            double t92917 = sqrt(t92916);
            double t92918 = pow(t92916,3.0/2.0);
            double t92919 = 1.0/pow(t92914,2.0/3.0);
            double t92920 = b1p*t92917;
            double t92921 = b3p*t92918;
            double t92922 = b4p*t92919*t92876;
            double t92923 = b2p*c*t92915;
            double t92924 = t92920+t92921+t92922+t92923;
            double t92925 = 1.0/t92924;
            double t92926 = t92925*t92878*(1.0/2.0);
            double t92927 = t92926+1.0;
            double t92928 = log(t92927);
            double t92929 = a1p*c*t92915;
            double t92930 = t92929+1.0;
            double t92931 = c0p*t92930*t92928*2.0;
            double t92932 = rho_a[index]-rho_b[index];
            double t92933 = t92932*t92932;
            double t92934 = 1.0/t92914;
            double t92935 = t92932*t92934;
            double t92936 = 1.0/(t92914*t92914*t92914*t92914);
            double t92937 = t92933*t92933;
            double t92938 = t92935+1.0;
            double t92939 = pow(t92938,4.0/3.0);
            double t92940 = -t92935+1.0;
            double t92941 = pow(t92940,4.0/3.0);
            double t92942 = t92941+t92939-2.0;
            double t92943 = gcab*gcab;
            double t92947 = 1.0/pow(rho_a[index],8.0/3.0);
            double t92948 = gamma_aa[index]*t92947*(1.0/2.0);
            double t92949 = 1.0/pow(rho_b[index],8.0/3.0);
            double t92950 = gamma_bb[index]*t92949*(1.0/2.0);
            double t92944 = t92950+t92948;
            double t92945 = t92944*t92944;
            double t92946 = 1.0/pow(rho_b[index],1.1E1/3.0);
            double t92951 = gcab*t92944;
            double t92952 = t92951+1.0;
            double t92953 = t92943*t92945;
            double t92954 = gcab*t92944*2.0;
            double t92955 = t92953+t92954+1.0;
            double t92956 = t92943*t92945*3.0;
            double t92957 = gcab*t92943*t92944*t92945;
            double t92958 = gcab*t92944*3.0;
            double t92959 = t92956+t92957+t92958+1.0;
            double t92960 = c0p*t92887*t92889*2.0;
            double t92961 = 1.0/t92955;
            double t92962 = 1.0/t92959;
            double t92963 = 1.0/t92952;
            double t92964 = 1.0/pow(t92914,4.0/3.0);
            double t92965 = b1f*t92917;
            double t92966 = b3f*t92918;
            double t92967 = b4f*t92919*t92876;
            double t92968 = b2f*c*t92915;
            double t92969 = t92965+t92966+t92967+t92968;
            double t92970 = 1.0/t92969;
            double t92971 = t92970*t92896*(1.0/2.0);
            double t92972 = t92971+1.0;
            double t92973 = log(t92972);
            double t92974 = a1f*c*t92915;
            double t92975 = t92974+1.0;
            double t92977 = c0f*t92973*t92975*2.0;
            double t92976 = t92931-t92977;
            double t92978 = 1.0/(t92914*t92914);
            double t92979 = t92932*t92978;
            double t92980 = t92934+t92979;
            double t92981 = 1.0/pow(t92914,5.0/3.0);
            double t92982 = 1.0/sqrt(t92916);
            double t92983 = 1.0/t92927;
            double t92984 = 1.0/(t92924*t92924);
            double t92985 = b4p*t92981*t92876*(2.0/3.0);
            double t92986 = b2p*c*t92964*(1.0/3.0);
            double t92987 = b1p*c*t92964*t92982*(1.0/6.0);
            double t92988 = b3p*c*t92917*t92964*(1.0/2.0);
            double t92989 = t92985+t92986+t92987+t92988;
            double t92990 = 1.0/d2fz0;
            double t92991 = 1.0/Aa;
            double t92992 = b1a*t92917;
            double t92993 = b3a*t92918;
            double t92994 = b4a*t92919*t92876;
            double t92995 = b2a*c*t92915;
            double t92996 = t92992+t92993+t92994+t92995;
            double t92997 = 1.0/t92996;
            double t92998 = t92991*t92997*(1.0/2.0);
            double t92999 = t92998+1.0;
            double t93000 = log(t92999);
            double t93001 = a1a*c*t92915;
            double t93002 = t93001+1.0;
            double t93003 = 1.0/(t92914*t92914*t92914*t92914*t92914);
            double t93004 = pow(t92938,1.0/3.0);
            double t93005 = t92980*t93004*(4.0/3.0);
            double t93006 = pow(t92940,1.0/3.0);
            double t93007 = t93005-t92980*t93006*(4.0/3.0);
            double t93008 = t92936*t92937;
            double t93009 = t93008-1.0;
            double t93010 = t92930*t92983*t92984*t92989;
            double t93011 = a1f*c*t92897;
            double t93012 = t93011+1.0;
            double t93013 = b1f*t92899;
            double t93014 = b3f*t92900;
            double t93015 = b4f*t92901*t92876;
            double t93016 = b2f*c*t92897;
            double t93017 = t93013+t93014+t93015+t93016;
            double t93018 = 1.0/t93017;
            double t93019 = t92896*t93018*(1.0/2.0);
            double t93020 = t93019+1.0;
            double t93021 = 1.0/pow(rho_b[index],4.0/3.0);
            double t93022 = 1.0/pow(rho_b[index],5.0/3.0);
            double t93023 = 1.0/sqrt(t92898);
            double t93024 = log(t93020);
            double t93025 = 1.0/t92909;
            double t93026 = 1.0/(t92906*t92906);
            double t93027 = b4p*t92876*t93022*(2.0/3.0);
            double t93028 = b2p*c*t93021*(1.0/3.0);
            double t93029 = b1p*c*t93021*t93023*(1.0/6.0);
            double t93030 = b3p*c*t92899*t93021*(1.0/2.0);
            double t93031 = t93030+t93027+t93028+t93029;
            double t93032 = t92912*t93031*t93025*t93026;
            double t93035 = c0f*t93012*t93024*2.0;
            double t93033 = t92913-t93035;
            double t93034 = Aa*t92942*t92990*t92895*t93000*t93002*t93009*2.0;
            double t93036 = t92892*t92895*t93033;
            double t93037 = gamma_bb[index]*gamma_bb[index];
            double t93038 = gcaa*gcaa;
            double t93039 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
               rho_b[index]*rho_b[index]);
            double t93040 = 1.0/pow(rho_b[index],1.6E1/3.0);
            double t93041 = pow(rho_b[index],5.0/3.0);
            double t93042 = 1.0/tau_b[index];
            double t93043 = C_k*t93041*t93042;
            double t93044 = t93043-1.0;
            double t93045 = t93044*t93044;
            double t93046 = t93043+1.0;
            double t93047 = t93045*t93045;
            double t93048 = gx*gx;
            double t93049 = gamma_bb[index]*gx*t92949;
            double t93050 = t93049+1.0;
            double t93051 = 1.0/t93050;
            double t93052 = gamma_bb[index]*gx*t92949*3.0;
            double t93053 = gamma_bb[index]*gx*t93037*t93039*t93048;
            double t93054 = t93040*t93037*t93048*3.0;
            double t93055 = t93052+t93053+t93054+1.0;
            double t93056 = 1.0/t93055;
            double t93057 = gamma_bb[index]*gx*t92949*2.0;
            double t93058 = t93040*t93037*t93048;
            double t93059 = t93057+t93058+1.0;
            double t93060 = 1.0/t93059;
            double t93061 = 1.0/t93046;
            double t93062 = t93061*t93044;
            double t93063 = 1.0/(t93046*t93046*t93046);
            double t93064 = 1.0/(t93046*t93046*t93046*t93046*t93046);
            double t93065 = t93044*t93064*t93047;
            double t93066 = t93062+t93065-t93044*t93045*t93063*2.0;
            double t93067 = 1.0/pow(rho_b[index],1.9E1/3.0);
            double t93068 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
               rho_b[index]*rho_b[index]*rho_b[index]);
            double t93069 = cxnl1*gamma_bb[index]*gx*t92949*t93051;
            double t93070 = cxnl3*gamma_bb[index]*gx*t93037*t93056*t93039*t93048;
            double t93071 = cxnl2*t93040*t93060*t93037*t93048;
            double t93072 = cxnl0+t93070+t93071+t93069;
            double t93073 = pow(rho_b[index],2.0/3.0);
            double t93074 = 1.0/(t93050*t93050);
            double t93075 = gamma_bb[index]*gx*t92946*8.0;
            double t93076 = gamma_bb[index]*gx*t93037*t93048*t93068*8.0;
            double t93077 = t93037*t93048*t93067*1.6E1;
            double t93078 = t93075+t93076+t93077;
            double t93079 = 1.0/(t93055*t93055);
            double t93080 = gamma_bb[index]*gx*t92946*(1.6E1/3.0);
            double t93081 = t93037*t93048*t93067*(1.6E1/3.0);
            double t93082 = t93080+t93081;
            double t93083 = 1.0/(t93059*t93059);
            double t93084 = t92913-t93036;
            double t93085 = gamma_bb[index]*gcaa*t92949;
            double t93086 = t93085+1.0;
            double t93087 = 1.0/t93086;
            double t93088 = gamma_bb[index]*gcaa*t92949*3.0;
            double t93089 = gamma_bb[index]*gcaa*t93037*t93038*t93039;
            double t93090 = t93040*t93037*t93038*3.0;
            double t93091 = t93090+t93088+t93089+1.0;
            double t93092 = 1.0/t93091;
            double t93093 = gamma_bb[index]*gcaa*t92949*2.0;
            double t93094 = t93040*t93037*t93038;
            double t93095 = t93093+t93094+1.0;
            double t93096 = 1.0/t93095;
            double t93097 = 1.0/t93020;
            double t93098 = 1.0/(t93017*t93017);
            double t93099 = b4f*t92876*t93022*(2.0/3.0);
            double t93100 = b2f*c*t93021*(1.0/3.0);
            double t93101 = b1f*c*t93021*t93023*(1.0/6.0);
            double t93102 = b3f*c*t92899*t93021*(1.0/2.0);
            double t93103 = t93100+t93101+t93102+t93099;
            double t93104 = a1f*c*c0f*t93021*t93024*(2.0/3.0);
            double t93105 = a1p*c*c0p*t92910*t93021*(2.0/3.0);
            double t93106 = ccaa1*gamma_bb[index]*gcaa*t92949*t93087;
            double t93107 = ccaa3*gamma_bb[index]*gcaa*t93037*t93038*t93092*t93039;
            double t93108 = ccaa2*t93040*t93037*t93038*t93096;
            double t93109 = ccaa0+t93106+t93107+t93108;
            v_rho_b_[index] = -t93109*t93084-(ccab0+ccab1*gcab*t92944*t92963+ccab2*t92943*t92961*t92945+ccab3* \
               gcab*t92943*t92944*t92962*t92945)*(-t92913+t92931+t93034+t93036+t92914*(t93010-t92942*t92936*t92937* \
               t92895*(t93010-(t92975*1.0/(t92969*t92969)*(b2f*c*t92964*(1.0/3.0)+b4f*t92981*t92876*(2.0/3.0)+b1f* \
               c*t92964*t92982*(1.0/6.0)+b3f*c*t92917*t92964*(1.0/2.0)))/t92972+a1f*c*c0f*t92964*t92973*(2.0/3.0) \
               -a1p*c*c0p*t92928*t92964*(2.0/3.0))-a1p*c*c0p*t92928*t92964*(2.0/3.0)+t92942*t92937*t92895*t92976* \
               t93003*4.0+t92936*t92937*t92895*t92976*t93007+t92932*t92933*t92942*t92936*t92895*t92976*4.0-Aa*t92942* \
               t92990*t92895*t93000*t93002*(t92937*t93003*4.0+t92932*t92933*t92936*4.0)*2.0-Aa*t92990*t92895*t93000* \
               t93002*t93007*t93009*2.0+(t92942*t92990*t92895*1.0/(t92996*t92996)*t93002*t93009*(b2a*c*t92964*(1.0/ \
               3.0)+b4a*t92981*t92876*(2.0/3.0)+b1a*c*t92964*t92982*(1.0/6.0)+b3a*c*t92917*t92964*(1.0/2.0)))/t92999- \
               Aa*a1a*c*t92942*t92990*t92964*t92895*t93000*t93009*(2.0/3.0))+rho_b[index]*(-t93032+t93105+t92892* \
               t92895*(t93032+t93104-t93012*t93103*t93097*t93098-a1p*c*c0p*t92910*t93021*(2.0/3.0)))-t92942*t92936* \
               t92937*t92895*t92976)-(rho_b[index]*(t92913-t92892*t92895*t93033)+rho_a[index]*(t92960-t92892*t92895* \
               (t92960-c0f*log((t92896*(1.0/2.0))/(b1f*t92874+b3f*t92875+b2f*c*t92872+b4f*t92876*t92877)+1.0)*(a1f* \
               c*t92872+1.0)*2.0))-t92914*(t92931+t93034-t92942*t92936*t92937*t92895*t92976))*(ccab1*gamma_bb[index]* \
               gcab*t92963*t92946*(4.0/3.0)-ccab2*t92943*t92945*1.0/(t92955*t92955)*(gamma_bb[index]*gcab*t92946* \
               (8.0/3.0)+gamma_bb[index]*t92943*t92944*t92946*(8.0/3.0))-ccab1*gamma_bb[index]*t92943*1.0/(t92952* \
               t92952)*t92944*t92946*(4.0/3.0)+ccab2*gamma_bb[index]*t92943*t92961*t92944*t92946*(8.0/3.0)-ccab3* \
               gcab*t92943*t92944*t92945*1.0/(t92959*t92959)*(gamma_bb[index]*gcab*t92946*4.0+gamma_bb[index]*t92943* \
               t92944*t92946*8.0+gamma_bb[index]*gcab*t92943*t92945*t92946*4.0)+ccab3*gamma_bb[index]*gcab*t92943* \
               t92962*t92945*t92946*4.0)-(X-1.0)*(c0*pow(rho_b[index],1.0/3.0)*(cx0+t93072*t93066+cx1*gamma_bb[index]* \
               gx*t92949*t93051+cx2*t93040*t93060*t93037*t93048+cx3*gamma_bb[index]*gx*t93037*t93056*t93039*t93048) \
               *(4.0/3.0)-c0*pow(rho_b[index],4.0/3.0)*(t93066*(cxnl1*gamma_bb[index]*gx*t92946*t93051*(8.0/3.0)+ \
               cxnl2*t93060*t93037*t93048*t93067*(1.6E1/3.0)-cxnl1*t93037*t93074*t93048*t93067*(8.0/3.0)-cxnl2*t93040* \
               t93037*t93082*t93083*t93048+cxnl3*gamma_bb[index]*gx*t93037*t93056*t93048*t93068*8.0-cxnl3*gamma_bb[index]* \
               gx*t93037*t93039*t93048*t93078*t93079)-t93072*(C_k*t93042*t93061*t93073*(5.0/3.0)-C_k*t93042*t93045* \
               t93063*t93073*1.0E1+C_k*t93042*t93064*t93073*t93047*(2.5E1/3.0)-C_k*t93042*t93044*1.0/(t93046*t93046) \
               *t93073*(5.0/3.0)+C_k*t93042*t93044*t93045*1.0/(t93046*t93046*t93046*t93046)*t93073*1.0E1-C_k*t93042* \
               t93044*1.0/(t93046*t93046*t93046*t93046*t93046*t93046)*t93073*t93047*(2.5E1/3.0))+cx1*gamma_bb[index]* \
               gx*t92946*t93051*(8.0/3.0)-cx1*t93037*t93074*t93048*t93067*(8.0/3.0)+cx2*t93060*t93037*t93048*t93067* \
               (1.6E1/3.0)-cx2*t93040*t93037*t93082*t93083*t93048+cx3*gamma_bb[index]*gx*t93037*t93056*t93048*t93068* \
               8.0-cx3*gamma_bb[index]*gx*t93037*t93039*t93048*t93078*t93079))+rho_b[index]*t93109*(-t93032+t93105+ \
               t92892*t92895*(t93032+t93104-t93105-t93012*t93103*t93097*t93098))+rho_b[index]*t93084*(ccaa1*gamma_bb[index]* \
               gcaa*t92946*t93087*(8.0/3.0)+ccaa2*t93037*t93038*t93067*t93096*(1.6E1/3.0)-ccaa1*t93037*t93038*t93067* \
               1.0/(t93086*t93086)*(8.0/3.0)-ccaa2*t93040*t93037*t93038*1.0/(t93095*t93095)*(gamma_bb[index]*gcaa* \
               t92946*(1.6E1/3.0)+t93037*t93038*t93067*(1.6E1/3.0))+ccaa3*gamma_bb[index]*gcaa*t93037*t93038*t93092* \
               t93068*8.0-ccaa3*gamma_bb[index]*gcaa*t93037*1.0/(t93091*t93091)*t93038*t93039*(gamma_bb[index]*gcaa* \
               t92946*8.0+t93037*t93038*t93067*1.6E1+gamma_bb[index]*gcaa*t93037*t93038*t93068*8.0));
        } else if (rho_a[index] > cutoff_) {
            v_rho_b_[index] = 0.0;
        } else if (rho_b[index] > cutoff_) {
            double t96086 = 1.0/pow(rho_b[index],1.0/3.0);
            double t96087 = c*t96086;
            double t96088 = sqrt(t96087);
            double t96089 = pow(t96087,3.0/2.0);
            double t96090 = c*c;
            double t96091 = 1.0/pow(rho_b[index],2.0/3.0);
            double t96092 = 1.0/c0p;
            double t96093 = b1p*t96088;
            double t96094 = b3p*t96089;
            double t96095 = b4p*t96090*t96091;
            double t96096 = b2p*c*t96086;
            double t96097 = t96093+t96094+t96095+t96096;
            double t96098 = 1.0/t96097;
            double t96099 = t96092*t96098*(1.0/2.0);
            double t96100 = t96099+1.0;
            double t96101 = log(t96100);
            double t96102 = a1p*c*t96086;
            double t96103 = t96102+1.0;
            double t96104 = 1.0/pow(rho_b[index],8.0/3.0);
            double t96105 = gamma_bb[index]*gamma_bb[index];
            double t96106 = gcaa*gcaa;
            double t96107 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
               rho_b[index]*rho_b[index]);
            double t96108 = 1.0/pow(rho_b[index],1.6E1/3.0);
            double t96109 = pow(2.0,1.0/3.0);
            double t96110 = t96109*2.0;
            double t96111 = t96110-2.0;
            double t96112 = two_13*2.0;
            double t96113 = t96112-2.0;
            double t96114 = 1.0/t96113;
            double t96115 = 1.0/c0f;
            double t96116 = b1f*t96088;
            double t96117 = b3f*t96089;
            double t96118 = b4f*t96090*t96091;
            double t96119 = b2f*c*t96086;
            double t96120 = t96116+t96117+t96118+t96119;
            double t96121 = 1.0/t96120;
            double t96122 = t96121*t96115*(1.0/2.0);
            double t96123 = t96122+1.0;
            double t96124 = log(t96123);
            double t96125 = a1f*c*t96086;
            double t96126 = t96125+1.0;
            double t96127 = c0f*t96124*t96126*2.0;
            double t96128 = c0p*t96101*t96103*2.0;
            double t96129 = gamma_bb[index]*gcaa*t96104;
            double t96130 = t96129+1.0;
            double t96131 = 1.0/t96130;
            double t96132 = gamma_bb[index]*gcaa*t96104*3.0;
            double t96133 = gamma_bb[index]*gcaa*t96105*t96106*t96107;
            double t96134 = t96105*t96106*t96108*3.0;
            double t96135 = t96132+t96133+t96134+1.0;
            double t96136 = 1.0/t96135;
            double t96137 = gamma_bb[index]*gcaa*t96104*2.0;
            double t96138 = t96105*t96106*t96108;
            double t96139 = t96137+t96138+1.0;
            double t96140 = 1.0/t96139;
            double t96141 = 1.0/pow(rho_b[index],1.9E1/3.0);
            double t96142 = 1.0/pow(rho_b[index],1.1E1/3.0);
            double t96143 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
               rho_b[index]*rho_b[index]*rho_b[index]);
            double t96144 = 1.0/pow(rho_b[index],4.0/3.0);
            double t96145 = 1.0/pow(rho_b[index],5.0/3.0);
            double t96146 = 1.0/sqrt(t96087);
            double t96147 = 1.0/t96100;
            double t96148 = 1.0/(t96097*t96097);
            double t96149 = b4p*t96090*t96145*(2.0/3.0);
            double t96150 = b2p*c*t96144*(1.0/3.0);
            double t96151 = b1p*c*t96144*t96146*(1.0/6.0);
            double t96152 = b3p*c*t96144*t96088*(1.0/2.0);
            double t96153 = t96150+t96151+t96152+t96149;
            double t96154 = t96103*t96153*t96147*t96148;
            double t96155 = ccaa1*gamma_bb[index]*gcaa*t96104*t96131;
            double t96156 = ccaa3*gamma_bb[index]*gcaa*t96105*t96106*t96107*t96136;
            double t96157 = ccaa2*t96140*t96105*t96106*t96108;
            double t96158 = ccaa0+t96155+t96156+t96157;
            double t96159 = pow(rho_b[index],5.0/3.0);
            double t96160 = 1.0/tau_b[index];
            double t96161 = C_k*t96160*t96159;
            double t96162 = t96161-1.0;
            double t96163 = t96162*t96162;
            double t96164 = t96161+1.0;
            double t96165 = t96163*t96163;
            double t96166 = gx*gx;
            double t96167 = gamma_bb[index]*gx*t96104;
            double t96168 = t96167+1.0;
            double t96169 = 1.0/t96168;
            double t96170 = gamma_bb[index]*gx*t96104*3.0;
            double t96171 = gamma_bb[index]*gx*t96105*t96107*t96166;
            double t96172 = t96105*t96108*t96166*3.0;
            double t96173 = t96170+t96171+t96172+1.0;
            double t96174 = 1.0/t96173;
            double t96175 = gamma_bb[index]*gx*t96104*2.0;
            double t96176 = t96105*t96108*t96166;
            double t96177 = t96175+t96176+1.0;
            double t96178 = 1.0/t96177;
            double t96179 = X-1.0;
            double t96180 = 1.0/t96164;
            double t96181 = t96162*t96180;
            double t96182 = 1.0/(t96164*t96164*t96164);
            double t96183 = 1.0/(t96164*t96164*t96164*t96164*t96164);
            double t96184 = t96162*t96165*t96183;
            double t96185 = t96181+t96184-t96162*t96163*t96182*2.0;
            double t96186 = cxnl1*gamma_bb[index]*gx*t96104*t96169;
            double t96187 = cxnl3*gamma_bb[index]*gx*t96105*t96107*t96174*t96166;
            double t96188 = cxnl2*t96105*t96108*t96166*t96178;
            double t96189 = cxnl0+t96186+t96187+t96188;
            double t96190 = pow(rho_b[index],2.0/3.0);
            double t96191 = 1.0/(t96168*t96168);
            double t96192 = gamma_bb[index]*gx*t96142*8.0;
            double t96193 = gamma_bb[index]*gx*t96105*t96143*t96166*8.0;
            double t96194 = t96105*t96141*t96166*1.6E1;
            double t96195 = t96192+t96193+t96194;
            double t96196 = 1.0/(t96173*t96173);
            double t96197 = gamma_bb[index]*gx*t96142*(1.6E1/3.0);
            double t96198 = t96105*t96141*t96166*(1.6E1/3.0);
            double t96199 = t96197+t96198;
            double t96200 = 1.0/(t96177*t96177);
            v_rho_b_[index] = -t96158*(t96128+t96111*t96114*(t96127-c0p*t96101*t96103*2.0))+rho_b[index]*(t96128+ \
               t96111*t96114*(t96127-t96128))*(ccaa1*gamma_bb[index]*gcaa*t96131*t96142*(8.0/3.0)+ccaa2*t96140*t96105* \
               t96141*t96106*(1.6E1/3.0)-ccaa1*1.0/(t96130*t96130)*t96105*t96141*t96106*(8.0/3.0)-ccaa2*t96105*t96106* \
               t96108*1.0/(t96139*t96139)*(gamma_bb[index]*gcaa*t96142*(1.6E1/3.0)+t96105*t96141*t96106*(1.6E1/3.0) \
               )+ccaa3*gamma_bb[index]*gcaa*t96105*t96106*t96143*t96136*8.0-ccaa3*gamma_bb[index]*gcaa*t96105*t96106* \
               t96107*1.0/(t96135*t96135)*(gamma_bb[index]*gcaa*t96142*8.0+t96105*t96141*t96106*1.6E1+gamma_bb[index]* \
               gcaa*t96105*t96106*t96143*8.0))+rho_b[index]*t96158*(-t96154+t96111*t96114*(t96154-(1.0/(t96120*t96120) \
               *t96126*(b2f*c*t96144*(1.0/3.0)+b4f*t96090*t96145*(2.0/3.0)+b1f*c*t96144*t96146*(1.0/6.0)+b3f*c*t96144* \
               t96088*(1.0/2.0)))/t96123+a1f*c*c0f*t96124*t96144*(2.0/3.0)-a1p*c*c0p*t96101*t96144*(2.0/3.0))+a1p* \
               c*c0p*t96101*t96144*(2.0/3.0))-c0*pow(rho_b[index],1.0/3.0)*t96179*(cx0+t96185*t96189+cx1*gamma_bb[index]* \
               gx*t96104*t96169+cx2*t96105*t96108*t96166*t96178+cx3*gamma_bb[index]*gx*t96105*t96107*t96174*t96166) \
               *(4.0/3.0)+c0*pow(rho_b[index],4.0/3.0)*t96179*(t96185*(cxnl1*gamma_bb[index]*gx*t96142*t96169*(8.0/ \
               3.0)-cxnl1*t96105*t96141*t96191*t96166*(8.0/3.0)+cxnl2*t96105*t96141*t96166*t96178*(1.6E1/3.0)-cxnl2* \
               t96200*t96105*t96108*t96166*t96199+cxnl3*gamma_bb[index]*gx*t96105*t96143*t96174*t96166*8.0-cxnl3* \
               gamma_bb[index]*gx*t96105*t96107*t96166*t96195*t96196)-t96189*(C_k*t96160*t96180*t96190*(5.0/3.0)- \
               C_k*t96160*t96163*t96190*t96182*1.0E1+C_k*t96160*t96190*t96165*t96183*(2.5E1/3.0)-C_k*t96160*t96162* \
               t96190*1.0/(t96164*t96164)*(5.0/3.0)+C_k*t96160*t96162*t96163*t96190*1.0/(t96164*t96164*t96164*t96164) \
               *1.0E1-C_k*t96160*t96162*t96190*1.0/(t96164*t96164*t96164*t96164*t96164*t96164)*t96165*(2.5E1/3.0) \
               )+cx1*gamma_bb[index]*gx*t96142*t96169*(8.0/3.0)-cx1*t96105*t96141*t96191*t96166*(8.0/3.0)+cx2*t96105* \
               t96141*t96166*t96178*(1.6E1/3.0)-cx2*t96200*t96105*t96108*t96166*t96199+cx3*gamma_bb[index]*gx*t96105* \
               t96143*t96174*t96166*8.0-cx3*gamma_bb[index]*gx*t96105*t96107*t96166*t96195*t96196);
        } else {
            v_rho_b_[index] = 0.0;
        } 

        if (is_gga_) {

            //V_gamma_aa
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t93111 = 1.0/pow(rho_a[index],1.0/3.0);
                double t93112 = c*t93111;
                double t93113 = sqrt(t93112);
                double t93114 = pow(t93112,3.0/2.0);
                double t93115 = c*c;
                double t93116 = 1.0/pow(rho_a[index],2.0/3.0);
                double t93117 = 1.0/c0p;
                double t93118 = b1p*t93113;
                double t93119 = b3p*t93114;
                double t93120 = b4p*t93115*t93116;
                double t93121 = b2p*c*t93111;
                double t93122 = t93120+t93121+t93118+t93119;
                double t93123 = 1.0/t93122;
                double t93124 = t93123*t93117*(1.0/2.0);
                double t93125 = t93124+1.0;
                double t93126 = log(t93125);
                double t93127 = a1p*c*t93111;
                double t93128 = t93127+1.0;
                double t93129 = pow(2.0,1.0/3.0);
                double t93130 = t93129*2.0;
                double t93131 = t93130-2.0;
                double t93132 = two_13*2.0;
                double t93133 = t93132-2.0;
                double t93134 = 1.0/t93133;
                double t93135 = 1.0/c0f;
                double t93136 = 1.0/pow(rho_b[index],1.0/3.0);
                double t93137 = c*t93136;
                double t93138 = sqrt(t93137);
                double t93139 = pow(t93137,3.0/2.0);
                double t93140 = 1.0/pow(rho_b[index],2.0/3.0);
                double t93141 = b1p*t93138;
                double t93142 = b3p*t93139;
                double t93143 = b4p*t93140*t93115;
                double t93144 = b2p*c*t93136;
                double t93145 = t93141+t93142+t93143+t93144;
                double t93146 = 1.0/t93145;
                double t93147 = t93117*t93146*(1.0/2.0);
                double t93148 = t93147+1.0;
                double t93149 = log(t93148);
                double t93150 = a1p*c*t93136;
                double t93151 = t93150+1.0;
                double t93152 = c0p*t93151*t93149*2.0;
                double t93153 = rho_a[index]+rho_b[index];
                double t93154 = 1.0/pow(t93153,1.0/3.0);
                double t93155 = c*t93154;
                double t93156 = sqrt(t93155);
                double t93157 = pow(t93155,3.0/2.0);
                double t93158 = 1.0/pow(t93153,2.0/3.0);
                double t93159 = b1p*t93156;
                double t93160 = b3p*t93157;
                double t93161 = b4p*t93115*t93158;
                double t93162 = b2p*c*t93154;
                double t93163 = t93160+t93161+t93162+t93159;
                double t93164 = 1.0/t93163;
                double t93165 = t93117*t93164*(1.0/2.0);
                double t93166 = t93165+1.0;
                double t93167 = log(t93166);
                double t93168 = a1p*c*t93154;
                double t93169 = t93168+1.0;
                double t93170 = c0p*t93167*t93169*2.0;
                double t93171 = rho_a[index]-rho_b[index];
                double t93172 = t93171*t93171;
                double t93173 = 1.0/t93153;
                double t93174 = t93171*t93173;
                double t93175 = 1.0/(t93153*t93153*t93153*t93153);
                double t93176 = t93172*t93172;
                double t93177 = t93174+1.0;
                double t93178 = pow(t93177,4.0/3.0);
                double t93179 = -t93174+1.0;
                double t93180 = pow(t93179,4.0/3.0);
                double t93181 = t93180+t93178-2.0;
                double t93182 = 1.0/pow(rho_a[index],8.0/3.0);
                double t93183 = gamma_aa[index]*t93182*(1.0/2.0);
                double t93184 = 1.0/pow(rho_b[index],8.0/3.0);
                double t93185 = gamma_bb[index]*t93184*(1.0/2.0);
                double t93186 = t93183+t93185;
                double t93187 = gcab*t93186;
                double t93188 = t93187+1.0;
                double t93189 = gcab*gcab;
                double t93190 = t93186*t93186;
                double t93191 = t93190*t93189;
                double t93192 = gcab*t93186*2.0;
                double t93193 = t93191+t93192+1.0;
                double t93194 = t93190*t93189*3.0;
                double t93195 = gcab*t93190*t93186*t93189;
                double t93196 = gcab*t93186*3.0;
                double t93197 = t93194+t93195+t93196+1.0;
                double t93198 = c0p*t93126*t93128*2.0;
                double t93199 = b1f*t93113;
                double t93200 = b3f*t93114;
                double t93201 = b4f*t93115*t93116;
                double t93202 = b2f*c*t93111;
                double t93203 = t93200+t93201+t93202+t93199;
                double t93204 = 1.0/t93203;
                double t93205 = t93204*t93135*(1.0/2.0);
                double t93206 = t93205+1.0;
                double t93207 = log(t93206);
                double t93208 = a1f*c*t93111;
                double t93209 = t93208+1.0;
                double t93210 = t93198-c0f*t93207*t93209*2.0;
                double t93211 = t93198-t93210*t93131*t93134;
                double t93212 = gcaa*gcaa;
                double t93213 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t93214 = gamma_aa[index]*gamma_aa[index];
                double t93215 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t93216 = gamma_aa[index]*gcaa*t93182;
                double t93217 = t93216+1.0;
                double t93218 = gamma_aa[index]*gcaa*t93182*3.0;
                double t93219 = gamma_aa[index]*gcaa*t93212*t93214*t93215;
                double t93220 = t93212*t93213*t93214*3.0;
                double t93221 = t93220+t93218+t93219+1.0;
                double t93222 = gamma_aa[index]*gcaa*t93182*2.0;
                double t93223 = t93212*t93213*t93214;
                double t93224 = t93222+t93223+1.0;
                double t93225 = pow(rho_a[index],5.0/3.0);
                double t93226 = 1.0/tau_a[index];
                double t93227 = C_k*t93225*t93226;
                double t93228 = t93227-1.0;
                double t93229 = t93228*t93228;
                double t93230 = t93227+1.0;
                double t93231 = t93229*t93229;
                double t93232 = gx*gx;
                double t93233 = gamma_aa[index]*gx*t93182;
                double t93234 = t93233+1.0;
                double t93235 = gamma_aa[index]*gx*t93182*3.0;
                double t93236 = gamma_aa[index]*gx*t93214*t93232*t93215;
                double t93237 = t93213*t93214*t93232*3.0;
                double t93238 = t93235+t93236+t93237+1.0;
                double t93239 = gamma_aa[index]*gx*t93182*2.0;
                double t93240 = t93213*t93214*t93232;
                double t93241 = t93240+t93239+1.0;
                double t93242 = 1.0/t93234;
                double t93243 = 1.0/t93241;
                double t93244 = 1.0/t93238;
                double t93245 = 1.0/(t93234*t93234);
                double t93246 = gx*t93182*3.0;
                double t93247 = gamma_aa[index]*t93213*t93232*6.0;
                double t93248 = gx*t93214*t93232*t93215*3.0;
                double t93249 = t93246+t93247+t93248;
                double t93250 = 1.0/(t93238*t93238);
                double t93251 = gx*t93182*2.0;
                double t93252 = gamma_aa[index]*t93213*t93232*2.0;
                double t93253 = t93251+t93252;
                double t93254 = 1.0/(t93241*t93241);
                v_gamma_aa_[index] = (rho_a[index]*t93211+rho_b[index]*(t93152-t93131*t93134*(t93152-c0f*log((t93135* \
                   (1.0/2.0))/(b1f*t93138+b3f*t93139+b2f*c*t93136+b4f*t93140*t93115)+1.0)*(a1f*c*t93136+1.0)*2.0))-t93153* \
                   (t93170-t93134*t93181*t93175*t93176*(t93170-c0f*log((t93135*(1.0/2.0))/(b1f*t93156+b3f*t93157+b2f* \
                   c*t93154+b4f*t93115*t93158)+1.0)*(a1f*c*t93154+1.0)*2.0)+(Aa*t93134*t93181*log((1.0/2.0)/(Aa*(b1a* \
                   t93156+b3a*t93157+b2a*c*t93154+b4a*t93115*t93158))+1.0)*(t93175*t93176-1.0)*(a1a*c*t93154+1.0)*2.0) \
                   /d2fz0))*((ccab1*gcab*t93182*(1.0/2.0))/t93188-ccab2*t93190*1.0/(t93193*t93193)*t93189*(gcab*t93182+ \
                   t93182*t93186*t93189)+(ccab2*t93182*t93186*t93189)/t93193-ccab1*t93182*t93186*1.0/(t93188*t93188)* \
                   t93189*(1.0/2.0)+(ccab3*gcab*t93190*t93182*t93189*(3.0/2.0))/t93197-ccab3*gcab*t93190*t93186*1.0/(t93197* \
                   t93197)*t93189*(gcab*t93182*(3.0/2.0)+t93182*t93186*t93189*3.0+gcab*t93190*t93182*t93189*(3.0/2.0) \
                   ))-rho_a[index]*t93211*((ccaa1*gcaa*t93182)/t93217+(ccaa2*gamma_aa[index]*t93212*t93213*2.0)/t93224- \
                   ccaa1*gamma_aa[index]*t93212*t93213*1.0/(t93217*t93217)-ccaa2*t93212*t93213*t93214*1.0/(t93224*t93224) \
                   *(gcaa*t93182*2.0+gamma_aa[index]*t93212*t93213*2.0)+(ccaa3*gcaa*t93212*t93214*t93215*3.0)/t93221- \
                   ccaa3*gamma_aa[index]*gcaa*t93212*1.0/(t93221*t93221)*t93214*t93215*(gcaa*t93182*3.0+gamma_aa[index]* \
                   t93212*t93213*6.0+gcaa*t93212*t93214*t93215*3.0))-c0*pow(rho_a[index],4.0/3.0)*(X-1.0)*((t93228/t93230+ \
                   1.0/(t93230*t93230*t93230*t93230*t93230)*t93231*t93228-1.0/(t93230*t93230*t93230)*t93228*t93229*2.0) \
                   *(cxnl1*gx*t93242*t93182+cxnl2*gamma_aa[index]*t93213*t93232*t93243*2.0-cxnl1*gamma_aa[index]*t93213* \
                   t93232*t93245-cxnl2*t93213*t93214*t93232*t93253*t93254+cxnl3*gx*t93214*t93232*t93215*t93244*3.0-cxnl3* \
                   gamma_aa[index]*gx*t93214*t93232*t93250*t93215*t93249)+cx1*gx*t93242*t93182-cx1*gamma_aa[index]*t93213* \
                   t93232*t93245+cx2*gamma_aa[index]*t93213*t93232*t93243*2.0-cx2*t93213*t93214*t93232*t93253*t93254+ \
                   cx3*gx*t93214*t93232*t93215*t93244*3.0-cx3*gamma_aa[index]*gx*t93214*t93232*t93250*t93215*t93249);
            } else if (rho_a[index] > cutoff_) {
                double t96973 = 1.0/pow(rho_a[index],1.0/3.0);
                double t96974 = c*t96973;
                double t96975 = sqrt(t96974);
                double t96976 = pow(t96974,3.0/2.0);
                double t96977 = c*c;
                double t96978 = 1.0/pow(rho_a[index],2.0/3.0);
                double t96979 = 1.0/c0p;
                double t96980 = b1p*t96975;
                double t96981 = b3p*t96976;
                double t96982 = b4p*t96977*t96978;
                double t96983 = b2p*c*t96973;
                double t96984 = t96980+t96981+t96982+t96983;
                double t96985 = 1.0/t96984;
                double t96986 = t96985*t96979*(1.0/2.0);
                double t96987 = t96986+1.0;
                double t96988 = log(t96987);
                double t96989 = a1p*c*t96973;
                double t96990 = t96989+1.0;
                double t96991 = 1.0/pow(rho_a[index],8.0/3.0);
                double t96992 = gcaa*gcaa;
                double t96993 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t96994 = gamma_aa[index]*gamma_aa[index];
                double t96995 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t96996 = gamma_aa[index]*gcaa*t96991;
                double t96997 = t96996+1.0;
                double t96998 = gamma_aa[index]*gcaa*t96991*3.0;
                double t96999 = gamma_aa[index]*gcaa*t96992*t96994*t96995;
                double t97000 = t96992*t96993*t96994*3.0;
                double t97001 = t96998+t96999+t97000+1.0;
                double t97002 = gamma_aa[index]*gcaa*t96991*2.0;
                double t97003 = t96992*t96993*t96994;
                double t97004 = t97002+t97003+1.0;
                double t97005 = pow(rho_a[index],5.0/3.0);
                double t97006 = 1.0/tau_a[index];
                double t97007 = C_k*t97005*t97006;
                double t97008 = t97007-1.0;
                double t97009 = t97008*t97008;
                double t97010 = t97007+1.0;
                double t97011 = t97009*t97009;
                double t97012 = gx*gx;
                double t97013 = gamma_aa[index]*gx*t96991;
                double t97014 = t97013+1.0;
                double t97015 = gamma_aa[index]*gx*t96991*3.0;
                double t97016 = gamma_aa[index]*gx*t96994*t96995*t97012;
                double t97017 = t96993*t96994*t97012*3.0;
                double t97018 = t97015+t97016+t97017+1.0;
                double t97019 = gamma_aa[index]*gx*t96991*2.0;
                double t97020 = t96993*t96994*t97012;
                double t97021 = t97020+t97019+1.0;
                double t97022 = 1.0/t97014;
                double t97023 = 1.0/t97021;
                double t97024 = 1.0/t97018;
                double t97025 = 1.0/(t97014*t97014);
                double t97026 = gx*t96991*3.0;
                double t97027 = gamma_aa[index]*t96993*t97012*6.0;
                double t97028 = gx*t96994*t96995*t97012*3.0;
                double t97029 = t97026+t97027+t97028;
                double t97030 = 1.0/(t97018*t97018);
                double t97031 = gx*t96991*2.0;
                double t97032 = gamma_aa[index]*t96993*t97012*2.0;
                double t97033 = t97031+t97032;
                double t97034 = 1.0/(t97021*t97021);
                v_gamma_aa_[index] = -rho_a[index]*(((pow(2.0,1.0/3.0)*2.0-2.0)*(c0f*log((1.0/2.0)/(c0f*(b1f*t96975+ \
                   b3f*t96976+b2f*c*t96973+b4f*t96977*t96978))+1.0)*(a1f*c*t96973+1.0)*2.0-c0p*t96990*t96988*2.0))/(two_13* \
                   2.0-2.0)+c0p*t96990*t96988*2.0)*((ccaa1*gcaa*t96991)/t96997-ccaa1*gamma_aa[index]*t96992*t96993*1.0/ \
                   (t96997*t96997)+(ccaa2*gamma_aa[index]*t96992*t96993*2.0)/t97004-ccaa2*t96992*t96993*t96994*1.0/(t97004* \
                   t97004)*(gcaa*t96991*2.0+gamma_aa[index]*t96992*t96993*2.0)+(ccaa3*gcaa*t96992*t96994*t96995*3.0)/ \
                   t97001-ccaa3*gamma_aa[index]*gcaa*t96992*t96994*t96995*1.0/(t97001*t97001)*(gcaa*t96991*3.0+gamma_aa[index]* \
                   t96992*t96993*6.0+gcaa*t96992*t96994*t96995*3.0))-c0*pow(rho_a[index],4.0/3.0)*(X-1.0)*((t97008/t97010+ \
                   1.0/(t97010*t97010*t97010*t97010*t97010)*t97011*t97008-1.0/(t97010*t97010*t97010)*t97008*t97009*2.0) \
                   *(cxnl1*gx*t96991*t97022+cxnl2*gamma_aa[index]*t96993*t97012*t97023*2.0-cxnl1*gamma_aa[index]*t96993* \
                   t97012*t97025-cxnl2*t96993*t96994*t97012*t97033*t97034+cxnl3*gx*t96994*t96995*t97012*t97024*3.0-cxnl3* \
                   gamma_aa[index]*gx*t96994*t96995*t97012*t97030*t97029)+cx1*gx*t96991*t97022-cx1*gamma_aa[index]*t96993* \
                   t97012*t97025+cx2*gamma_aa[index]*t96993*t97012*t97023*2.0-cx2*t96993*t96994*t97012*t97033*t97034+ \
                   cx3*gx*t96994*t96995*t97012*t97024*3.0-cx3*gamma_aa[index]*gx*t96994*t96995*t97012*t97030*t97029);
            } else if (rho_b[index] > cutoff_) {
                v_gamma_aa_[index] = 0.0;
            } else {
                v_gamma_aa_[index] = 0.0;
            } 

            //V_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_ab_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_ab_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_ab_[index] = 0.0;
            } else {
                v_gamma_ab_[index] = 0.0;
            } 

            //V_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t93257 = 1.0/pow(rho_a[index],1.0/3.0);
                double t93258 = c*t93257;
                double t93259 = sqrt(t93258);
                double t93260 = pow(t93258,3.0/2.0);
                double t93261 = c*c;
                double t93262 = 1.0/pow(rho_a[index],2.0/3.0);
                double t93263 = 1.0/c0p;
                double t93264 = b1p*t93259;
                double t93265 = b3p*t93260;
                double t93266 = b4p*t93261*t93262;
                double t93267 = b2p*c*t93257;
                double t93268 = t93264+t93265+t93266+t93267;
                double t93269 = 1.0/t93268;
                double t93270 = t93263*t93269*(1.0/2.0);
                double t93271 = t93270+1.0;
                double t93272 = log(t93271);
                double t93273 = a1p*c*t93257;
                double t93274 = t93273+1.0;
                double t93275 = pow(2.0,1.0/3.0);
                double t93276 = t93275*2.0;
                double t93277 = t93276-2.0;
                double t93278 = two_13*2.0;
                double t93279 = t93278-2.0;
                double t93280 = 1.0/t93279;
                double t93281 = 1.0/c0f;
                double t93282 = 1.0/pow(rho_b[index],1.0/3.0);
                double t93283 = c*t93282;
                double t93284 = sqrt(t93283);
                double t93285 = pow(t93283,3.0/2.0);
                double t93286 = 1.0/pow(rho_b[index],2.0/3.0);
                double t93287 = b1p*t93284;
                double t93288 = b3p*t93285;
                double t93289 = b4p*t93261*t93286;
                double t93290 = b2p*c*t93282;
                double t93291 = t93290+t93287+t93288+t93289;
                double t93292 = 1.0/t93291;
                double t93293 = t93263*t93292*(1.0/2.0);
                double t93294 = t93293+1.0;
                double t93295 = log(t93294);
                double t93296 = a1p*c*t93282;
                double t93297 = t93296+1.0;
                double t93298 = c0p*t93295*t93297*2.0;
                double t93299 = rho_a[index]+rho_b[index];
                double t93300 = 1.0/pow(t93299,1.0/3.0);
                double t93301 = c*t93300;
                double t93302 = sqrt(t93301);
                double t93303 = pow(t93301,3.0/2.0);
                double t93304 = 1.0/pow(t93299,2.0/3.0);
                double t93305 = b1p*t93302;
                double t93306 = b3p*t93303;
                double t93307 = b4p*t93304*t93261;
                double t93308 = b2p*c*t93300;
                double t93309 = t93305+t93306+t93307+t93308;
                double t93310 = 1.0/t93309;
                double t93311 = t93310*t93263*(1.0/2.0);
                double t93312 = t93311+1.0;
                double t93313 = log(t93312);
                double t93314 = a1p*c*t93300;
                double t93315 = t93314+1.0;
                double t93316 = c0p*t93313*t93315*2.0;
                double t93317 = rho_a[index]-rho_b[index];
                double t93318 = t93317*t93317;
                double t93319 = 1.0/t93299;
                double t93320 = t93317*t93319;
                double t93321 = 1.0/(t93299*t93299*t93299*t93299);
                double t93322 = t93318*t93318;
                double t93323 = t93320+1.0;
                double t93324 = pow(t93323,4.0/3.0);
                double t93325 = -t93320+1.0;
                double t93326 = pow(t93325,4.0/3.0);
                double t93327 = t93324+t93326-2.0;
                double t93328 = 1.0/pow(rho_b[index],8.0/3.0);
                double t93329 = 1.0/pow(rho_a[index],8.0/3.0);
                double t93330 = gamma_aa[index]*t93329*(1.0/2.0);
                double t93331 = gamma_bb[index]*t93328*(1.0/2.0);
                double t93332 = t93330+t93331;
                double t93333 = gcab*t93332;
                double t93334 = t93333+1.0;
                double t93335 = gcab*gcab;
                double t93336 = t93332*t93332;
                double t93337 = t93335*t93336;
                double t93338 = gcab*t93332*2.0;
                double t93339 = t93337+t93338+1.0;
                double t93340 = t93335*t93336*3.0;
                double t93341 = gcab*t93332*t93335*t93336;
                double t93342 = gcab*t93332*3.0;
                double t93343 = t93340+t93341+t93342+1.0;
                double t93344 = c0p*t93272*t93274*2.0;
                double t93345 = b1f*t93284;
                double t93346 = b3f*t93285;
                double t93347 = b4f*t93261*t93286;
                double t93348 = b2f*c*t93282;
                double t93349 = t93345+t93346+t93347+t93348;
                double t93350 = 1.0/t93349;
                double t93351 = t93350*t93281*(1.0/2.0);
                double t93352 = t93351+1.0;
                double t93353 = log(t93352);
                double t93354 = a1f*c*t93282;
                double t93355 = t93354+1.0;
                double t93356 = t93298-c0f*t93353*t93355*2.0;
                double t93357 = t93298-t93280*t93356*t93277;
                double t93358 = gcaa*gcaa;
                double t93359 = 1.0/pow(rho_b[index],1.6E1/3.0);
                double t93360 = gamma_bb[index]*gamma_bb[index];
                double t93361 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]);
                double t93362 = gamma_bb[index]*gcaa*t93328;
                double t93363 = t93362+1.0;
                double t93364 = gamma_bb[index]*gcaa*t93328*3.0;
                double t93365 = gamma_bb[index]*gcaa*t93360*t93361*t93358;
                double t93366 = t93360*t93358*t93359*3.0;
                double t93367 = t93364+t93365+t93366+1.0;
                double t93368 = gamma_bb[index]*gcaa*t93328*2.0;
                double t93369 = t93360*t93358*t93359;
                double t93370 = t93368+t93369+1.0;
                double t93371 = pow(rho_b[index],5.0/3.0);
                double t93372 = 1.0/tau_b[index];
                double t93373 = C_k*t93371*t93372;
                double t93374 = t93373-1.0;
                double t93375 = t93374*t93374;
                double t93376 = t93373+1.0;
                double t93377 = t93375*t93375;
                double t93378 = gx*gx;
                double t93379 = gamma_bb[index]*gx*t93328;
                double t93380 = t93379+1.0;
                double t93381 = gamma_bb[index]*gx*t93328*3.0;
                double t93382 = gamma_bb[index]*gx*t93360*t93361*t93378;
                double t93383 = t93360*t93359*t93378*3.0;
                double t93384 = t93381+t93382+t93383+1.0;
                double t93385 = gamma_bb[index]*gx*t93328*2.0;
                double t93386 = t93360*t93359*t93378;
                double t93387 = t93385+t93386+1.0;
                double t93388 = 1.0/t93380;
                double t93389 = 1.0/t93387;
                double t93390 = 1.0/t93384;
                double t93391 = 1.0/(t93380*t93380);
                double t93392 = gx*t93328*3.0;
                double t93393 = gamma_bb[index]*t93359*t93378*6.0;
                double t93394 = gx*t93360*t93361*t93378*3.0;
                double t93395 = t93392+t93393+t93394;
                double t93396 = 1.0/(t93384*t93384);
                double t93397 = gx*t93328*2.0;
                double t93398 = gamma_bb[index]*t93359*t93378*2.0;
                double t93399 = t93397+t93398;
                double t93400 = 1.0/(t93387*t93387);
                v_gamma_bb_[index] = (rho_b[index]*t93357+rho_a[index]*(t93344-t93280*t93277*(t93344-c0f*log((t93281* \
                   (1.0/2.0))/(b1f*t93259+b3f*t93260+b2f*c*t93257+b4f*t93261*t93262)+1.0)*(a1f*c*t93257+1.0)*2.0))-t93299* \
                   (t93316-t93321*t93322*t93280*t93327*(t93316-c0f*log((t93281*(1.0/2.0))/(b1f*t93302+b3f*t93303+b2f* \
                   c*t93300+b4f*t93304*t93261)+1.0)*(a1f*c*t93300+1.0)*2.0)+(Aa*t93280*t93327*log((1.0/2.0)/(Aa*(b1a* \
                   t93302+b3a*t93303+b2a*c*t93300+b4a*t93304*t93261))+1.0)*(t93321*t93322-1.0)*(a1a*c*t93300+1.0)*2.0) \
                   /d2fz0))*((ccab1*gcab*t93328*(1.0/2.0))/t93334-ccab2*t93335*t93336*1.0/(t93339*t93339)*(gcab*t93328+ \
                   t93332*t93335*t93328)-ccab1*t93332*1.0/(t93334*t93334)*t93335*t93328*(1.0/2.0)+(ccab2*t93332*t93335* \
                   t93328)/t93339+(ccab3*gcab*t93335*t93336*t93328*(3.0/2.0))/t93343-ccab3*gcab*t93332*1.0/(t93343*t93343) \
                   *t93335*t93336*(gcab*t93328*(3.0/2.0)+t93332*t93335*t93328*3.0+gcab*t93335*t93336*t93328*(3.0/2.0) \
                   ))-rho_b[index]*t93357*((ccaa1*gcaa*t93328)/t93363+(ccaa2*gamma_bb[index]*t93358*t93359*2.0)/t93370- \
                   ccaa1*gamma_bb[index]*1.0/(t93363*t93363)*t93358*t93359-ccaa2*t93360*1.0/(t93370*t93370)*t93358*t93359* \
                   (gcaa*t93328*2.0+gamma_bb[index]*t93358*t93359*2.0)+(ccaa3*gcaa*t93360*t93361*t93358*3.0)/t93367-ccaa3* \
                   gamma_bb[index]*gcaa*t93360*t93361*t93358*1.0/(t93367*t93367)*(gcaa*t93328*3.0+gamma_bb[index]*t93358* \
                   t93359*6.0+gcaa*t93360*t93361*t93358*3.0))-c0*pow(rho_b[index],4.0/3.0)*(X-1.0)*((t93374/t93376-t93374* \
                   t93375*1.0/(t93376*t93376*t93376)*2.0+t93374*1.0/(t93376*t93376*t93376*t93376*t93376)*t93377)*(cxnl1* \
                   gx*t93328*t93388-cxnl1*gamma_bb[index]*t93391*t93359*t93378+cxnl2*gamma_bb[index]*t93359*t93378*t93389* \
                   2.0-cxnl2*t93400*t93360*t93359*t93378*t93399+cxnl3*gx*t93360*t93361*t93390*t93378*3.0-cxnl3*gamma_bb[index]* \
                   gx*t93360*t93361*t93395*t93378*t93396)+cx1*gx*t93328*t93388-cx1*gamma_bb[index]*t93391*t93359*t93378+ \
                   cx2*gamma_bb[index]*t93359*t93378*t93389*2.0-cx2*t93400*t93360*t93359*t93378*t93399+cx3*gx*t93360* \
                   t93361*t93390*t93378*3.0-cx3*gamma_bb[index]*gx*t93360*t93361*t93395*t93378*t93396);
            } else if (rho_a[index] > cutoff_) {
                v_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                double t96204 = 1.0/pow(rho_b[index],1.0/3.0);
                double t96205 = c*t96204;
                double t96206 = sqrt(t96205);
                double t96207 = pow(t96205,3.0/2.0);
                double t96208 = c*c;
                double t96209 = 1.0/pow(rho_b[index],2.0/3.0);
                double t96210 = 1.0/c0p;
                double t96211 = b1p*t96206;
                double t96212 = b3p*t96207;
                double t96213 = b4p*t96208*t96209;
                double t96214 = b2p*c*t96204;
                double t96215 = t96211+t96212+t96213+t96214;
                double t96216 = 1.0/t96215;
                double t96217 = t96210*t96216*(1.0/2.0);
                double t96218 = t96217+1.0;
                double t96219 = log(t96218);
                double t96220 = a1p*c*t96204;
                double t96221 = t96220+1.0;
                double t96222 = 1.0/pow(rho_b[index],8.0/3.0);
                double t96223 = gcaa*gcaa;
                double t96224 = 1.0/pow(rho_b[index],1.6E1/3.0);
                double t96225 = gamma_bb[index]*gamma_bb[index];
                double t96226 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]);
                double t96227 = gamma_bb[index]*gcaa*t96222;
                double t96228 = t96227+1.0;
                double t96229 = gamma_bb[index]*gcaa*t96222*3.0;
                double t96230 = gamma_bb[index]*gcaa*t96223*t96225*t96226;
                double t96231 = t96223*t96224*t96225*3.0;
                double t96232 = t96230+t96231+t96229+1.0;
                double t96233 = gamma_bb[index]*gcaa*t96222*2.0;
                double t96234 = t96223*t96224*t96225;
                double t96235 = t96233+t96234+1.0;
                double t96236 = pow(rho_b[index],5.0/3.0);
                double t96237 = 1.0/tau_b[index];
                double t96238 = C_k*t96236*t96237;
                double t96239 = t96238-1.0;
                double t96240 = t96239*t96239;
                double t96241 = t96238+1.0;
                double t96242 = t96240*t96240;
                double t96243 = gx*gx;
                double t96244 = gamma_bb[index]*gx*t96222;
                double t96245 = t96244+1.0;
                double t96246 = gamma_bb[index]*gx*t96222*3.0;
                double t96247 = gamma_bb[index]*gx*t96225*t96243*t96226;
                double t96248 = t96224*t96225*t96243*3.0;
                double t96249 = t96246+t96247+t96248+1.0;
                double t96250 = gamma_bb[index]*gx*t96222*2.0;
                double t96251 = t96224*t96225*t96243;
                double t96252 = t96250+t96251+1.0;
                double t96253 = 1.0/t96245;
                double t96254 = 1.0/t96252;
                double t96255 = 1.0/t96249;
                double t96256 = 1.0/(t96245*t96245);
                double t96257 = gx*t96222*3.0;
                double t96258 = gamma_bb[index]*t96224*t96243*6.0;
                double t96259 = gx*t96225*t96243*t96226*3.0;
                double t96260 = t96257+t96258+t96259;
                double t96261 = 1.0/(t96249*t96249);
                double t96262 = gx*t96222*2.0;
                double t96263 = gamma_bb[index]*t96224*t96243*2.0;
                double t96264 = t96262+t96263;
                double t96265 = 1.0/(t96252*t96252);
                v_gamma_bb_[index] = -rho_b[index]*(((pow(2.0,1.0/3.0)*2.0-2.0)*(c0f*log((1.0/2.0)/(c0f*(b1f*t96206+ \
                   b3f*t96207+b2f*c*t96204+b4f*t96208*t96209))+1.0)*(a1f*c*t96204+1.0)*2.0-c0p*t96221*t96219*2.0))/(two_13* \
                   2.0-2.0)+c0p*t96221*t96219*2.0)*((ccaa1*gcaa*t96222)/t96228+(ccaa2*gamma_bb[index]*t96223*t96224*2.0) \
                   /t96235-ccaa1*gamma_bb[index]*t96223*t96224*1.0/(t96228*t96228)-ccaa2*t96223*t96224*t96225*1.0/(t96235* \
                   t96235)*(gcaa*t96222*2.0+gamma_bb[index]*t96223*t96224*2.0)+(ccaa3*gcaa*t96223*t96225*t96226*3.0)/ \
                   t96232-ccaa3*gamma_bb[index]*gcaa*t96223*1.0/(t96232*t96232)*t96225*t96226*(gcaa*t96222*3.0+gamma_bb[index]* \
                   t96223*t96224*6.0+gcaa*t96223*t96225*t96226*3.0))-c0*pow(rho_b[index],4.0/3.0)*(X-1.0)*((t96239/t96241- \
                   t96240*1.0/(t96241*t96241*t96241)*t96239*2.0+1.0/(t96241*t96241*t96241*t96241*t96241)*t96242*t96239) \
                   *(cxnl1*gx*t96222*t96253+cxnl2*gamma_bb[index]*t96224*t96243*t96254*2.0-cxnl1*gamma_bb[index]*t96224* \
                   t96243*t96256-cxnl2*t96224*t96225*t96243*t96264*t96265+cxnl3*gx*t96225*t96243*t96226*t96255*3.0-cxnl3* \
                   gamma_bb[index]*gx*t96260*t96225*t96243*t96261*t96226)+cx1*gx*t96222*t96253-cx1*gamma_bb[index]*t96224* \
                   t96243*t96256+cx2*gamma_bb[index]*t96224*t96243*t96254*2.0-cx2*t96224*t96225*t96243*t96264*t96265+ \
                   cx3*gx*t96225*t96243*t96226*t96255*3.0-cx3*gamma_bb[index]*gx*t96260*t96225*t96243*t96261*t96226);
            } else {
                v_gamma_bb_[index] = 0.0;
            } 
        }
        if (is_meta_) {

            //V_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t93402 = 1.0/pow(rho_a[index],8.0/3.0);
                double t93403 = gamma_aa[index]*gamma_aa[index];
                double t93404 = gx*gx;
                double t93405 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t93406 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t93407 = pow(rho_a[index],5.0/3.0);
                double t93408 = 1.0/(tau_a[index]*tau_a[index]);
                double t93409 = 1.0/tau_a[index];
                double t93410 = C_k*t93407*t93409;
                double t93411 = t93410-1.0;
                double t93412 = t93410+1.0;
                double t93413 = t93411*t93411;
                double t93414 = t93413*t93413;
                v_tau_a_[index] = c0*pow(rho_a[index],4.0/3.0)*(X-1.0)*(cxnl0+(cxnl2*t93403*t93404*t93406)/(gamma_aa[index]* \
                   gx*t93402*2.0+t93403*t93404*t93406+1.0)+(cxnl1*gamma_aa[index]*gx*t93402)/(gamma_aa[index]*gx*t93402+ \
                   1.0)+(cxnl3*gamma_aa[index]*gx*t93403*t93404*t93405)/(gamma_aa[index]*gx*t93402*3.0+t93403*t93404* \
                   t93406*3.0+gamma_aa[index]*gx*t93403*t93404*t93405+1.0))*((C_k*t93407*t93408)/t93412-C_k*t93411*1.0/ \
                   (t93412*t93412)*t93407*t93408-C_k*1.0/(t93412*t93412*t93412)*t93413*t93407*t93408*6.0+C_k*1.0/(t93412* \
                   t93412*t93412*t93412*t93412)*t93414*t93407*t93408*5.0+C_k*t93411*1.0/(t93412*t93412*t93412*t93412) \
                   *t93413*t93407*t93408*6.0-C_k*t93411*1.0/(t93412*t93412*t93412*t93412*t93412*t93412)*t93414*t93407* \
                   t93408*5.0);
            } else if (rho_a[index] > cutoff_) {
                double t97038 = 1.0/pow(rho_a[index],8.0/3.0);
                double t97039 = gamma_aa[index]*gamma_aa[index];
                double t97040 = gx*gx;
                double t97041 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t97042 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t97043 = pow(rho_a[index],5.0/3.0);
                double t97044 = 1.0/(tau_a[index]*tau_a[index]);
                double t97045 = 1.0/tau_a[index];
                double t97046 = C_k*t97043*t97045;
                double t97047 = t97046-1.0;
                double t97048 = t97046+1.0;
                double t97049 = t97047*t97047;
                double t97050 = t97049*t97049;
                v_tau_a_[index] = c0*pow(rho_a[index],4.0/3.0)*(X-1.0)*(cxnl0+(cxnl2*t97040*t97042*t97039)/(gamma_aa[index]* \
                   gx*t97038*2.0+t97040*t97042*t97039+1.0)+(cxnl1*gamma_aa[index]*gx*t97038)/(gamma_aa[index]*gx*t97038+ \
                   1.0)+(cxnl3*gamma_aa[index]*gx*t97040*t97041*t97039)/(gamma_aa[index]*gx*t97038*3.0+t97040*t97042* \
                   t97039*3.0+gamma_aa[index]*gx*t97040*t97041*t97039+1.0))*((C_k*t97043*t97044)/t97048+C_k*t97050*t97043* \
                   t97044*1.0/(t97048*t97048*t97048*t97048*t97048)*5.0-C_k*t97043*t97044*t97047*1.0/(t97048*t97048)-C_k* \
                   t97043*t97044*1.0/(t97048*t97048*t97048)*t97049*6.0-C_k*t97050*t97043*t97044*t97047*1.0/(t97048*t97048* \
                   t97048*t97048*t97048*t97048)*5.0+C_k*t97043*t97044*t97047*1.0/(t97048*t97048*t97048*t97048)*t97049* \
                   6.0);
            } else if (rho_b[index] > cutoff_) {
                v_tau_a_[index] = 0.0;
            } else {
                v_tau_a_[index] = 0.0;
            } 

            //V_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t93416 = 1.0/pow(rho_b[index],8.0/3.0);
                double t93417 = gamma_bb[index]*gamma_bb[index];
                double t93418 = gx*gx;
                double t93419 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]);
                double t93420 = 1.0/pow(rho_b[index],1.6E1/3.0);
                double t93421 = pow(rho_b[index],5.0/3.0);
                double t93422 = 1.0/(tau_b[index]*tau_b[index]);
                double t93423 = 1.0/tau_b[index];
                double t93424 = C_k*t93421*t93423;
                double t93425 = t93424-1.0;
                double t93426 = t93424+1.0;
                double t93427 = t93425*t93425;
                double t93428 = t93427*t93427;
                v_tau_b_[index] = c0*pow(rho_b[index],4.0/3.0)*(X-1.0)*(cxnl0+(cxnl2*t93420*t93417*t93418)/(gamma_bb[index]* \
                   gx*t93416*2.0+t93420*t93417*t93418+1.0)+(cxnl1*gamma_bb[index]*gx*t93416)/(gamma_bb[index]*gx*t93416+ \
                   1.0)+(cxnl3*gamma_bb[index]*gx*t93417*t93418*t93419)/(gamma_bb[index]*gx*t93416*3.0+t93420*t93417* \
                   t93418*3.0+gamma_bb[index]*gx*t93417*t93418*t93419+1.0))*((C_k*t93421*t93422)/t93426-C_k*t93421*t93422* \
                   t93425*1.0/(t93426*t93426)-C_k*t93421*t93422*1.0/(t93426*t93426*t93426)*t93427*6.0+C_k*t93421*t93422* \
                   1.0/(t93426*t93426*t93426*t93426*t93426)*t93428*5.0+C_k*t93421*t93422*t93425*1.0/(t93426*t93426*t93426* \
                   t93426)*t93427*6.0-C_k*t93421*t93422*t93425*1.0/(t93426*t93426*t93426*t93426*t93426*t93426)*t93428* \
                   5.0);
            } else if (rho_a[index] > cutoff_) {
                v_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                double t96268 = 1.0/pow(rho_b[index],8.0/3.0);
                double t96269 = gamma_bb[index]*gamma_bb[index];
                double t96270 = gx*gx;
                double t96271 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]);
                double t96272 = 1.0/pow(rho_b[index],1.6E1/3.0);
                double t96273 = pow(rho_b[index],5.0/3.0);
                double t96274 = 1.0/(tau_b[index]*tau_b[index]);
                double t96275 = 1.0/tau_b[index];
                double t96276 = C_k*t96273*t96275;
                double t96277 = t96276-1.0;
                double t96278 = t96276+1.0;
                double t96279 = t96277*t96277;
                double t96280 = t96279*t96279;
                v_tau_b_[index] = c0*pow(rho_b[index],4.0/3.0)*(X-1.0)*(cxnl0+(cxnl2*t96270*t96272*t96269)/(gamma_bb[index]* \
                   gx*t96268*2.0+t96270*t96272*t96269+1.0)+(cxnl1*gamma_bb[index]*gx*t96268)/(gamma_bb[index]*gx*t96268+ \
                   1.0)+(cxnl3*gamma_bb[index]*gx*t96270*t96271*t96269)/(gamma_bb[index]*gx*t96268*3.0+t96270*t96272* \
                   t96269*3.0+gamma_bb[index]*gx*t96270*t96271*t96269+1.0))*((C_k*t96273*t96274)/t96278+C_k*t96280*t96273* \
                   t96274*1.0/(t96278*t96278*t96278*t96278*t96278)*5.0-C_k*t96273*t96274*t96277*1.0/(t96278*t96278)-C_k* \
                   t96273*t96274*1.0/(t96278*t96278*t96278)*t96279*6.0-C_k*t96280*t96273*t96274*t96277*1.0/(t96278*t96278* \
                   t96278*t96278*t96278*t96278)*5.0+C_k*t96273*t96274*t96277*1.0/(t96278*t96278*t96278*t96278)*t96279* \
                   6.0);
            } else {
                v_tau_b_[index] = 0.0;
            } 
        }
    }
    //Second Partials
    for (int index = 0; index < ntrue && deriv_ >= 2; index++) {

        //V_rho_a_rho_a
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t93430 = gcab*gcab;
            double t93434 = 1.0/pow(rho_a[index],8.0/3.0);
            double t93435 = gamma_aa[index]*t93434*(1.0/2.0);
            double t93436 = 1.0/pow(rho_b[index],8.0/3.0);
            double t93437 = gamma_bb[index]*t93436*(1.0/2.0);
            double t93431 = t93435+t93437;
            double t93432 = t93431*t93431;
            double t93433 = 1.0/pow(rho_a[index],1.1E1/3.0);
            double t93438 = gcab*t93431;
            double t93439 = t93438+1.0;
            double t93440 = t93430*t93432;
            double t93441 = gcab*t93431*2.0;
            double t93442 = t93440+t93441+1.0;
            double t93443 = t93430*t93432*3.0;
            double t93444 = gcab*t93430*t93431*t93432;
            double t93445 = gcab*t93431*3.0;
            double t93446 = t93443+t93444+t93445+1.0;
            double t93447 = rho_a[index]+rho_b[index];
            double t93448 = 1.0/pow(t93447,1.0/3.0);
            double t93449 = c*t93448;
            double t93450 = sqrt(t93449);
            double t93451 = b1p*t93450;
            double t93452 = pow(t93449,3.0/2.0);
            double t93453 = b3p*t93452;
            double t93454 = c*c;
            double t93455 = 1.0/pow(t93447,2.0/3.0);
            double t93456 = b4p*t93454*t93455;
            double t93457 = b2p*c*t93448;
            double t93458 = t93451+t93453+t93456+t93457;
            double t93459 = 1.0/pow(t93447,4.0/3.0);
            double t93460 = 1.0/c0p;
            double t93461 = 1.0/t93458;
            double t93462 = t93460*t93461*(1.0/2.0);
            double t93463 = t93462+1.0;
            double t93464 = a1p*c*t93448;
            double t93465 = t93464+1.0;
            double t93466 = rho_a[index]-rho_b[index];
            double t93467 = t93466*t93466;
            double t93468 = 1.0/t93447;
            double t93469 = t93466*t93468;
            double t93470 = two_13*2.0;
            double t93471 = t93470-2.0;
            double t93472 = 1.0/t93471;
            double t93473 = 1.0/c0f;
            double t93474 = b1f*t93450;
            double t93475 = b3f*t93452;
            double t93476 = b4f*t93454*t93455;
            double t93477 = b2f*c*t93448;
            double t93478 = t93474+t93475+t93476+t93477;
            double t93479 = 1.0/t93478;
            double t93480 = t93473*t93479*(1.0/2.0);
            double t93481 = t93480+1.0;
            double t93482 = log(t93481);
            double t93483 = a1f*c*t93448;
            double t93484 = t93483+1.0;
            double t93485 = log(t93463);
            double t93495 = c0f*t93482*t93484*2.0;
            double t93496 = c0p*t93465*t93485*2.0;
            double t93486 = t93495-t93496;
            double t93487 = t93469+1.0;
            double t93488 = pow(t93487,4.0/3.0);
            double t93489 = -t93469+1.0;
            double t93490 = pow(t93489,4.0/3.0);
            double t93491 = t93490+t93488-2.0;
            double t93492 = 1.0/(t93447*t93447);
            double t93523 = t93492*t93466;
            double t93493 = -t93523+t93468;
            double t93494 = 1.0/(t93447*t93447*t93447*t93447);
            double t93497 = t93467*t93467;
            double t93498 = 1.0/pow(t93447,5.0/3.0);
            double t93499 = 1.0/sqrt(t93449);
            double t93500 = 1.0/t93463;
            double t93501 = 1.0/(t93458*t93458);
            double t93502 = b4p*t93454*t93498*(2.0/3.0);
            double t93503 = b2p*c*t93459*(1.0/3.0);
            double t93504 = b1p*c*t93459*t93499*(1.0/6.0);
            double t93505 = b3p*c*t93450*t93459*(1.0/2.0);
            double t93506 = t93502+t93503+t93504+t93505;
            double t93507 = t93500*t93501*t93506*t93465;
            double t93508 = 1.0/(t93447*t93447*t93447*t93447*t93447);
            double t93509 = 1.0/d2fz0;
            double t93510 = 1.0/Aa;
            double t93511 = b1a*t93450;
            double t93512 = b3a*t93452;
            double t93513 = b4a*t93454*t93455;
            double t93514 = b2a*c*t93448;
            double t93515 = t93511+t93512+t93513+t93514;
            double t93516 = 1.0/t93515;
            double t93517 = t93510*t93516*(1.0/2.0);
            double t93518 = t93517+1.0;
            double t93519 = log(t93518);
            double t93520 = a1a*c*t93448;
            double t93521 = t93520+1.0;
            double t93522 = pow(t93487,1.0/3.0);
            double t93524 = t93522*t93493*(4.0/3.0);
            double t93525 = pow(t93489,1.0/3.0);
            double t93588 = t93525*t93493*(4.0/3.0);
            double t93526 = t93524-t93588;
            double t93527 = t93494*t93497;
            double t93528 = t93527-1.0;
            double t93529 = 1.0/pow(rho_a[index],1.0/3.0);
            double t93530 = c*t93529;
            double t93531 = sqrt(t93530);
            double t93532 = b1f*t93531;
            double t93533 = pow(t93530,3.0/2.0);
            double t93534 = b3f*t93533;
            double t93535 = 1.0/pow(rho_a[index],2.0/3.0);
            double t93536 = b4f*t93454*t93535;
            double t93537 = b2f*c*t93529;
            double t93538 = t93532+t93534+t93536+t93537;
            double t93539 = 1.0/pow(rho_a[index],4.0/3.0);
            double t93540 = b1p*t93531;
            double t93541 = b3p*t93533;
            double t93542 = b4p*t93454*t93535;
            double t93543 = b2p*c*t93529;
            double t93544 = t93540+t93541+t93542+t93543;
            double t93545 = 1.0/pow(rho_a[index],5.0/3.0);
            double t93546 = 1.0/sqrt(t93530);
            double t93547 = 1.0/t93538;
            double t93548 = t93473*t93547*(1.0/2.0);
            double t93549 = t93548+1.0;
            double t93550 = 1.0/t93544;
            double t93551 = t93460*t93550*(1.0/2.0);
            double t93552 = t93551+1.0;
            double t93553 = a1p*c*t93529;
            double t93554 = t93553+1.0;
            double t93555 = 1.0/t93552;
            double t93556 = 1.0/(t93544*t93544);
            double t93557 = b4p*t93454*t93545*(2.0/3.0);
            double t93558 = b2p*c*t93539*(1.0/3.0);
            double t93559 = b1p*c*t93546*t93539*(1.0/6.0);
            double t93560 = b3p*c*t93531*t93539*(1.0/2.0);
            double t93561 = t93560+t93557+t93558+t93559;
            double t93562 = t93561*t93554*t93555*t93556;
            double t93563 = log(t93552);
            double t93564 = pow(2.0,1.0/3.0);
            double t93565 = t93564*2.0;
            double t93566 = t93565-2.0;
            double t93567 = log(t93549);
            double t93568 = a1f*c*t93529;
            double t93569 = t93568+1.0;
            double t93570 = 1.0/t93549;
            double t93571 = 1.0/(t93538*t93538);
            double t93572 = b4f*t93454*t93545*(2.0/3.0);
            double t93573 = b2f*c*t93539*(1.0/3.0);
            double t93574 = b1f*c*t93546*t93539*(1.0/6.0);
            double t93575 = b3f*c*t93531*t93539*(1.0/2.0);
            double t93576 = t93572+t93573+t93574+t93575;
            double t93577 = a1f*c*c0f*t93539*t93567*(2.0/3.0);
            double t93578 = a1p*c*c0p*t93563*t93539*(2.0/3.0);
            double t93579 = gamma_aa[index]*gamma_aa[index];
            double t93580 = gcaa*gcaa;
            double t93581 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]);
            double t93582 = 1.0/pow(rho_a[index],1.6E1/3.0);
            double t93583 = 1.0/t93442;
            double t93584 = 1.0/t93446;
            double t93585 = 1.0/t93439;
            double t93586 = 1.0/pow(t93447,7.0/3.0);
            double t93587 = 1.0/pow(t93447,8.0/3.0);
            double t93589 = 1.0/t93481;
            double t93590 = 1.0/(t93478*t93478);
            double t93591 = b4f*t93454*t93498*(2.0/3.0);
            double t93592 = b2f*c*t93459*(1.0/3.0);
            double t93593 = b1f*c*t93459*t93499*(1.0/6.0);
            double t93594 = b3f*c*t93450*t93459*(1.0/2.0);
            double t93595 = t93591+t93592+t93593+t93594;
            double t93596 = a1f*c*c0f*t93482*t93459*(2.0/3.0);
            double t93598 = t93590*t93484*t93595*t93589;
            double t93599 = a1p*c*c0p*t93485*t93459*(2.0/3.0);
            double t93597 = t93507+t93596-t93598-t93599;
            double t93600 = t93506*t93506;
            double t93601 = 1.0/pow(t93449,3.0/2.0);
            double t93602 = b4p*t93454*t93587*(1.0E1/9.0);
            double t93603 = b2p*c*t93586*(4.0/9.0);
            double t93604 = b1p*c*t93586*t93499*(2.0/9.0);
            double t93605 = b3p*c*t93450*t93586*(2.0/3.0);
            double t93606 = b3p*t93454*t93587*t93499*(1.0/1.2E1);
            double t93607 = t93602+t93603+t93604+t93605+t93606-b1p*t93601*t93454*t93587*(1.0/3.6E1);
            double t93608 = 1.0/(t93458*t93458*t93458);
            double t93609 = t93500*t93600*t93608*t93465*2.0;
            double t93610 = t93595*t93595;
            double t93611 = 1.0/(t93463*t93463);
            double t93612 = 1.0/(t93458*t93458*t93458*t93458);
            double t93613 = t93492*2.0;
            double t93614 = 1.0/(t93447*t93447*t93447);
            double t93621 = t93614*t93466*2.0;
            double t93615 = -t93621+t93613;
            double t93616 = t93493*t93493;
            double t93617 = a1p*c*c0p*t93485*t93586*(8.0/9.0);
            double t93618 = 1.0/(t93447*t93447*t93447*t93447*t93447*t93447);
            double t93619 = t93508*t93497*4.0;
            double t93629 = t93466*t93467*t93494*4.0;
            double t93620 = t93619-t93629;
            double t93622 = t93525*t93615*(4.0/3.0);
            double t93623 = 1.0/pow(t93487,2.0/3.0);
            double t93624 = t93623*t93616*(4.0/9.0);
            double t93625 = 1.0/pow(t93489,2.0/3.0);
            double t93626 = t93616*t93625*(4.0/9.0);
            double t93627 = t93622+t93624+t93626-t93522*t93615*(4.0/3.0);
            double t93628 = 1.0/t93518;
            double t93630 = 1.0/(t93515*t93515);
            double t93631 = b4a*t93454*t93498*(2.0/3.0);
            double t93632 = b2a*c*t93459*(1.0/3.0);
            double t93633 = b1a*c*t93459*t93499*(1.0/6.0);
            double t93634 = b3a*c*t93450*t93459*(1.0/2.0);
            double t93635 = t93631+t93632+t93633+t93634;
            double t93636 = t93635*t93635;
            double t93637 = t93500*t93501*t93607*t93465;
            double t93638 = 1.0/pow(rho_a[index],7.0/3.0);
            double t93639 = 1.0/pow(t93530,3.0/2.0);
            double t93640 = t93576*t93576;
            double t93641 = t93561*t93561;
            double t93642 = 1.0/(t93544*t93544*t93544);
            double t93643 = t93641*t93642*t93554*t93555*2.0;
            double t93644 = b4p*t93434*t93454*(1.0E1/9.0);
            double t93645 = b2p*c*t93638*(4.0/9.0);
            double t93646 = b3p*t93434*t93454*t93546*(1.0/1.2E1);
            double t93647 = b1p*c*t93546*t93638*(2.0/9.0);
            double t93648 = b3p*c*t93531*t93638*(2.0/3.0);
            double t93803 = b1p*t93434*t93454*t93639*(1.0/3.6E1);
            double t93649 = -t93803+t93644+t93645+t93646+t93647+t93648;
            double t93650 = 1.0/(t93552*t93552);
            double t93651 = 1.0/(t93544*t93544*t93544*t93544);
            double t93652 = a1p*c*c0p*t93563*t93638*(8.0/9.0);
            double t93653 = t93600*t93611*t93612*t93460*t93465*(1.0/2.0);
            double t93784 = t93570*t93571*t93576*t93569;
            double t93654 = t93562+t93577-t93784-t93578;
            double t93655 = c0f*t93567*t93569*2.0;
            double t93657 = c0p*t93554*t93563*2.0;
            double t93656 = t93655-t93657;
            double t93658 = 1.0/pow(rho_b[index],1.0/3.0);
            double t93659 = c*t93658;
            double t93660 = sqrt(t93659);
            double t93661 = pow(t93659,3.0/2.0);
            double t93662 = 1.0/pow(rho_b[index],2.0/3.0);
            double t93663 = b1p*t93660;
            double t93664 = b3p*t93661;
            double t93665 = b4p*t93454*t93662;
            double t93666 = b2p*c*t93658;
            double t93667 = t93663+t93664+t93665+t93666;
            double t93668 = 1.0/t93667;
            double t93669 = t93460*t93668*(1.0/2.0);
            double t93670 = t93669+1.0;
            double t93671 = log(t93670);
            double t93672 = a1p*c*t93658;
            double t93673 = t93672+1.0;
            double t93674 = c0p*t93671*t93673*2.0;
            double t93675 = t93472*t93491*t93494*t93486*t93497;
            double t93676 = Aa*t93521*t93472*t93491*t93509*t93519*t93528*2.0;
            double t93677 = 1.0/(t93439*t93439);
            double t93678 = 1.0/pow(rho_a[index],2.2E1/3.0);
            double t93679 = gamma_aa[index]*gcab*t93433*(8.0/3.0);
            double t93680 = gamma_aa[index]*t93430*t93431*t93433*(8.0/3.0);
            double t93681 = t93680+t93679;
            double t93682 = 1.0/(t93446*t93446);
            double t93683 = 1.0/pow(rho_a[index],1.4E1/3.0);
            double t93684 = 1.0/(t93442*t93442);
            double t93685 = gamma_aa[index]*gcab*t93433*4.0;
            double t93686 = gamma_aa[index]*gcab*t93430*t93432*t93433*4.0;
            double t93687 = gamma_aa[index]*t93430*t93431*t93433*8.0;
            double t93688 = t93685+t93686+t93687;
            double t93689 = pow(rho_a[index],5.0/3.0);
            double t93690 = 1.0/tau_a[index];
            double t93691 = C_k*t93690*t93689;
            double t93692 = t93691-1.0;
            double t93693 = t93692*t93692;
            double t93694 = t93691+1.0;
            double t93695 = t93693*t93693;
            double t93696 = gx*gx;
            double t93697 = gamma_aa[index]*gx*t93434;
            double t93698 = t93697+1.0;
            double t93699 = 1.0/t93698;
            double t93700 = gamma_aa[index]*gx*t93434*3.0;
            double t93701 = gamma_aa[index]*gx*t93581*t93579*t93696;
            double t93702 = t93582*t93579*t93696*3.0;
            double t93703 = t93700+t93701+t93702+1.0;
            double t93704 = 1.0/t93703;
            double t93705 = gamma_aa[index]*gx*t93434*2.0;
            double t93706 = t93582*t93579*t93696;
            double t93707 = t93705+t93706+1.0;
            double t93708 = 1.0/t93707;
            double t93709 = cxnl1*gamma_aa[index]*gx*t93434*t93699;
            double t93710 = cxnl3*gamma_aa[index]*gx*t93704*t93581*t93579*t93696;
            double t93711 = cxnl2*t93582*t93708*t93579*t93696;
            double t93712 = cxnl0+t93710+t93711+t93709;
            double t93713 = 1.0/t93694;
            double t93714 = pow(rho_a[index],4.0/3.0);
            double t93715 = 1.0/(t93694*t93694*t93694);
            double t93716 = 1.0/(t93694*t93694*t93694*t93694*t93694);
            double t93717 = C_k*C_k;
            double t93718 = 1.0/(tau_a[index]*tau_a[index]);
            double t93719 = 1.0/(t93694*t93694*t93694*t93694);
            double t93720 = 1.0/(t93694*t93694*t93694*t93694*t93694*t93694);
            double t93721 = 1.0/(t93694*t93694);
            double t93722 = t93713*t93692;
            double t93723 = t93716*t93692*t93695;
            double t93751 = t93715*t93692*t93693*2.0;
            double t93724 = t93722+t93723-t93751;
            double t93725 = 1.0/pow(rho_a[index],1.0E1);
            double t93728 = 1.0/pow(rho_a[index],1.9E1/3.0);
            double t93734 = gamma_aa[index]*gx*t93433*(1.6E1/3.0);
            double t93735 = t93728*t93579*t93696*(1.6E1/3.0);
            double t93726 = t93734+t93735;
            double t93727 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]*rho_a[index]);
            double t93729 = 1.0/(t93703*t93703);
            double t93730 = gamma_aa[index]*gx*t93433*8.0;
            double t93731 = gamma_aa[index]*gx*t93727*t93579*t93696*8.0;
            double t93732 = t93728*t93579*t93696*1.6E1;
            double t93733 = t93730+t93731+t93732;
            double t93736 = 1.0/(t93707*t93707);
            double t93737 = pow(rho_a[index],2.0/3.0);
            double t93738 = 1.0/(t93698*t93698);
            double t93739 = 1.0/(t93698*t93698*t93698);
            double t93740 = t93726*t93726;
            double t93741 = 1.0/(t93707*t93707*t93707);
            double t93742 = gamma_aa[index]*gx*t93683*(8.8E1/3.0);
            double t93743 = gamma_aa[index]*gx*t93725*t93579*t93696*7.2E1;
            double t93744 = t93579*t93678*t93696*(3.04E2/3.0);
            double t93745 = t93742+t93743+t93744;
            double t93746 = t93733*t93733;
            double t93747 = 1.0/(t93703*t93703*t93703);
            double t93748 = gamma_aa[index]*gx*t93683*(1.76E2/9.0);
            double t93749 = t93579*t93678*t93696*(3.04E2/9.0);
            double t93750 = t93748+t93749;
            double t93752 = cxnl1*gamma_aa[index]*gx*t93433*t93699*(8.0/3.0);
            double t93753 = cxnl3*gamma_aa[index]*gx*t93704*t93727*t93579*t93696*8.0;
            double t93754 = cxnl2*t93708*t93728*t93579*t93696*(1.6E1/3.0);
            double t93755 = t93752+t93753+t93754-cxnl1*t93728*t93738*t93579*t93696*(8.0/3.0)-cxnl2*t93582*t93726* \
               t93736*t93579*t93696-cxnl3*gamma_aa[index]*gx*t93733*t93581*t93729*t93579*t93696;
            double t93756 = C_k*t93713*t93690*t93737*(5.0/3.0);
            double t93757 = C_k*t93690*t93692*t93719*t93737*t93693*1.0E1;
            double t93758 = C_k*t93716*t93690*t93737*t93695*(2.5E1/3.0);
            double t93759 = t93756+t93757+t93758-C_k*t93721*t93690*t93692*t93737*(5.0/3.0)-C_k*t93715*t93690* \
               t93737*t93693*1.0E1-C_k*t93720*t93690*t93692*t93737*t93695*(2.5E1/3.0);
            double t93760 = t93472*t93566*t93656;
            double t93761 = t93760+t93657;
            double t93762 = gamma_aa[index]*gcaa*t93434;
            double t93763 = t93762+1.0;
            double t93764 = 1.0/t93763;
            double t93765 = gamma_aa[index]*gcaa*t93434*3.0;
            double t93766 = gamma_aa[index]*gcaa*t93580*t93581*t93579;
            double t93767 = t93580*t93582*t93579*3.0;
            double t93768 = t93765+t93766+t93767+1.0;
            double t93769 = 1.0/t93768;
            double t93770 = gamma_aa[index]*gcaa*t93434*2.0;
            double t93771 = t93580*t93582*t93579;
            double t93772 = t93770+t93771+1.0;
            double t93773 = 1.0/t93772;
            double t93774 = 1.0/(t93763*t93763);
            double t93775 = gamma_aa[index]*gcaa*t93433*(1.6E1/3.0);
            double t93776 = t93580*t93728*t93579*(1.6E1/3.0);
            double t93777 = t93775+t93776;
            double t93778 = gamma_aa[index]*gcaa*t93433*8.0;
            double t93779 = gamma_aa[index]*gcaa*t93580*t93727*t93579*8.0;
            double t93780 = t93580*t93728*t93579*1.6E1;
            double t93781 = t93780+t93778+t93779;
            double t93782 = 1.0/(t93768*t93768);
            double t93783 = 1.0/(t93772*t93772);
            double t93785 = t93472*t93654*t93566;
            double t93786 = ccaa1*gamma_aa[index]*gcaa*t93433*t93764*(8.0/3.0);
            double t93787 = ccaa3*gamma_aa[index]*gcaa*t93580*t93727*t93579*t93769*8.0;
            double t93788 = ccaa2*t93580*t93728*t93773*t93579*(1.6E1/3.0);
            double t93789 = t93786+t93787+t93788-ccaa1*t93580*t93728*t93774*t93579*(8.0/3.0)-ccaa2*t93580*t93582* \
               t93783*t93579*t93777-ccaa3*gamma_aa[index]*gcaa*t93580*t93581*t93781*t93782*t93579;
            double t93790 = -t93562+t93578+t93785;
            double t93791 = ccaa1*gamma_aa[index]*gcaa*t93434*t93764;
            double t93792 = ccaa3*gamma_aa[index]*gcaa*t93580*t93581*t93579*t93769;
            double t93793 = ccaa2*t93580*t93582*t93773*t93579;
            double t93794 = ccaa0+t93791+t93792+t93793;
            double t93795 = 1.0/(t93538*t93538*t93538);
            double t93796 = b4f*t93434*t93454*(1.0E1/9.0);
            double t93797 = b2f*c*t93638*(4.0/9.0);
            double t93798 = b3f*t93434*t93454*t93546*(1.0/1.2E1);
            double t93799 = b1f*c*t93546*t93638*(2.0/9.0);
            double t93800 = b3f*c*t93531*t93638*(2.0/3.0);
            double t93801 = t93800+t93796+t93797+t93798+t93799-b1f*t93434*t93454*t93639*(1.0/3.6E1);
            double t93802 = t93801*t93570*t93571*t93569;
            double t93804 = t93554*t93555*t93556*t93649;
            double t93805 = 1.0/(t93549*t93549);
            double t93806 = 1.0/(t93538*t93538*t93538*t93538);
            double t93807 = t93640*t93805*t93473*t93806*t93569*(1.0/2.0);
            double t93808 = t93460*t93641*t93650*t93651*t93554*(1.0/2.0);
            double t93809 = a1f*c*t93570*t93571*t93539*t93576*(2.0/3.0);
            double t93810 = a1p*c*t93561*t93555*t93556*t93539*(2.0/3.0);
            v_rho_a_rho_a_[index] = t93790*t93794*2.0+t93761*t93789*2.0+(ccab1*gamma_aa[index]*gcab*t93433*t93585* \
               (4.0/3.0)-ccab2*t93430*t93432*t93681*t93684+ccab2*gamma_aa[index]*t93430*t93431*t93433*t93583*(8.0/ \
               3.0)-ccab1*gamma_aa[index]*t93430*t93431*t93433*t93677*(4.0/3.0)+ccab3*gamma_aa[index]*gcab*t93430* \
               t93432*t93433*t93584*4.0-ccab3*gcab*t93430*t93431*t93432*t93682*t93688)*(t93675+t93496+t93676+rho_a[index]* \
               (-t93562+t93578+t93472*t93566*(t93562+t93577-t93570*t93571*t93576*t93569-a1p*c*c0p*t93563*t93539*(2.0/ \
               3.0)))+t93447*(t93507-a1p*c*c0p*t93485*t93459*(2.0/3.0)-t93472*t93508*t93491*t93486*t93497*4.0+t93472* \
               t93526*t93494*t93486*t93497-t93472*t93491*t93494*t93497*t93597+t93472*t93491*t93466*t93467*t93494* \
               t93486*4.0-Aa*t93521*t93620*t93472*t93491*t93509*t93519*2.0+Aa*t93521*t93472*t93526*t93509*t93519* \
               t93528*2.0+t93521*t93630*t93472*t93491*t93509*t93635*t93528*t93628-Aa*a1a*c*t93472*t93491*t93509*t93519* \
               t93528*t93459*(2.0/3.0))-c0p*t93554*t93563*2.0-t93472*t93566*t93656)*2.0+(rho_a[index]*t93761+rho_b[index]* \
               (t93674-t93472*t93566*(t93674-c0f*log((t93473*(1.0/2.0))/(b1f*t93660+b3f*t93661+b2f*c*t93658+b4f*t93454* \
               t93662)+1.0)*(a1f*c*t93658+1.0)*2.0))-t93447*(t93675+t93496+t93676))*(-ccab2*t93430*t93432*t93684* \
               (gamma_aa[index]*gcab*t93683*(8.8E1/9.0)+t93430*t93579*t93678*(3.2E1/9.0)+gamma_aa[index]*t93430*t93431* \
               t93683*(8.8E1/9.0))+ccab2*t93430*t93432*1.0/(t93442*t93442*t93442)*(t93681*t93681)*2.0+ccab1*gamma_aa[index]* \
               gcab*t93683*t93585*(4.4E1/9.0)+ccab2*t93430*t93583*t93579*t93678*(3.2E1/9.0)-ccab1*t93430*t93677*t93579* \
               t93678*(3.2E1/9.0)+ccab2*gamma_aa[index]*t93430*t93431*t93583*t93683*(8.8E1/9.0)-ccab1*gamma_aa[index]* \
               t93430*t93431*t93683*t93677*(4.4E1/9.0)+ccab3*gcab*t93430*t93431*t93432*1.0/(t93446*t93446*t93446) \
               *(t93688*t93688)*2.0+ccab3*gamma_aa[index]*gcab*t93430*t93432*t93584*t93683*(4.4E1/3.0)-ccab2*gamma_aa[index]* \
               t93430*t93431*t93433*t93681*t93684*(1.6E1/3.0)+ccab3*gcab*t93430*t93431*t93584*t93579*t93678*(3.2E1/ \
               3.0)+ccab1*gcab*t93430*t93431*1.0/(t93439*t93439*t93439)*t93579*t93678*(3.2E1/9.0)-ccab3*gcab*t93430* \
               t93431*t93432*t93682*(gamma_aa[index]*gcab*t93683*(4.4E1/3.0)+t93430*t93579*t93678*(3.2E1/3.0)+gamma_aa[index]* \
               t93430*t93431*t93683*(8.8E1/3.0)+gamma_aa[index]*gcab*t93430*t93432*t93683*(4.4E1/3.0)+gcab*t93430* \
               t93431*t93579*t93678*(3.2E1/3.0))-ccab3*gamma_aa[index]*gcab*t93430*t93432*t93433*t93682*t93688*8.0) \
               -(ccab0+ccab1*gcab*t93431*t93585+ccab2*t93430*t93432*t93583+ccab3*gcab*t93430*t93431*t93432*t93584) \
               *(-t93447*(-t93617+t93653-t93609+t93637+t93472*t93491*t93494*t93497*(t93617-t93653+t93609-t93637-t93610* \
               t93484*1.0/(t93478*t93478*t93478)*t93589*2.0+t93590*t93484*t93589*(b2f*c*t93586*(4.0/9.0)+b4f*t93454* \
               t93587*(1.0E1/9.0)+b1f*c*t93586*t93499*(2.0/9.0)+b3f*c*t93450*t93586*(2.0/3.0)-b1f*t93601*t93454*t93587* \
               (1.0/3.6E1)+b3f*t93454*t93587*t93499*(1.0/1.2E1))+t93610*1.0/(t93481*t93481)*t93473*t93484*1.0/(t93478* \
               t93478*t93478*t93478)*(1.0/2.0)-a1f*c*c0f*t93482*t93586*(8.0/9.0)+a1f*c*t93590*t93459*t93595*t93589* \
               (2.0/3.0)-a1p*c*t93500*t93501*t93506*t93459*(2.0/3.0))+t93472*t93508*t93526*t93486*t93497*8.0-t93472* \
               t93491*t93467*t93494*t93486*1.2E1-t93472*t93491*t93618*t93486*t93497*2.0E1-t93472*t93508*t93491*t93497* \
               t93597*8.0-t93472*t93627*t93494*t93486*t93497+t93472*t93526*t93494*t93497*t93597*2.0+t93472*t93508* \
               t93491*t93466*t93467*t93486*3.2E1-t93472*t93526*t93466*t93467*t93494*t93486*8.0+t93472*t93491*t93466* \
               t93467*t93494*t93597*8.0+a1p*c*t93500*t93501*t93506*t93459*(2.0/3.0)+Aa*t93521*t93620*t93472*t93526* \
               t93509*t93519*4.0-Aa*t93521*t93472*t93509*t93519*t93528*t93627*2.0-Aa*t93521*t93472*t93491*t93509* \
               t93519*(t93467*t93494*1.2E1+t93618*t93497*2.0E1-t93508*t93466*t93467*3.2E1)*2.0+t93521*t93620*t93630* \
               t93472*t93491*t93509*t93635*t93628*2.0-t93521*t93630*t93472*t93526*t93509*t93635*t93528*t93628*2.0- \
               t93521*1.0/(t93515*t93515*t93515)*t93472*t93491*t93509*t93528*t93636*t93628*2.0+t93521*t93630*t93472* \
               t93491*t93509*t93528*t93628*(b2a*c*t93586*(4.0/9.0)+b4a*t93454*t93587*(1.0E1/9.0)+b1a*c*t93586*t93499* \
               (2.0/9.0)+b3a*c*t93450*t93586*(2.0/3.0)-b1a*t93601*t93454*t93587*(1.0/3.6E1)+b3a*t93454*t93587*t93499* \
               (1.0/1.2E1))-Aa*a1a*c*t93620*t93472*t93491*t93509*t93519*t93459*(4.0/3.0)+Aa*a1a*c*t93472*t93526*t93509* \
               t93519*t93528*t93459*(4.0/3.0)-Aa*a1a*c*t93472*t93491*t93509*t93519*t93528*t93586*(8.0/9.0)+t93510* \
               t93521*1.0/(t93515*t93515*t93515*t93515)*t93472*t93491*t93509*1.0/(t93518*t93518)*t93528*t93636*(1.0/ \
               2.0)+a1a*c*t93630*t93472*t93491*t93509*t93635*t93528*t93628*t93459*(2.0/3.0))+rho_a[index]*(t93810+ \
               t93804-t93643-t93652+t93808+t93472*t93566*(t93802+t93643+t93652+t93807+t93809-t93640*t93570*t93569* \
               t93795*2.0-t93554*t93555*t93556*t93649-a1f*c*c0f*t93638*t93567*(8.0/9.0)-t93460*t93641*t93650*t93651* \
               t93554*(1.0/2.0)-a1p*c*t93561*t93555*t93556*t93539*(2.0/3.0)))+t93472*t93654*t93566*2.0+t93500*t93501* \
               t93506*t93465*2.0-t93561*t93554*t93555*t93556*2.0+a1p*c*c0p*t93563*t93539*(4.0/3.0)-a1p*c*c0p*t93485* \
               t93459*(4.0/3.0)-t93472*t93508*t93491*t93486*t93497*8.0+t93472*t93526*t93494*t93486*t93497*2.0-t93472* \
               t93491*t93494*t93497*t93597*2.0+t93472*t93491*t93466*t93467*t93494*t93486*8.0-Aa*t93521*t93620*t93472* \
               t93491*t93509*t93519*4.0+Aa*t93521*t93472*t93526*t93509*t93519*t93528*4.0+t93521*t93630*t93472*t93491* \
               t93509*t93635*t93528*t93628*2.0-Aa*a1a*c*t93472*t93491*t93509*t93519*t93528*t93459*(4.0/3.0))+(X-1.0) \
               *(c0*t93714*(t93712*(t93721*t93714*t93717*t93718*(5.0E1/9.0)-C_k*t93713*t93690*t93529*(1.0E1/9.0)+ \
               C_k*t93721*t93690*t93529*t93692*(1.0E1/9.0)+C_k*t93715*t93690*t93529*t93693*(2.0E1/3.0)-C_k*t93716* \
               t93690*t93529*t93695*(5.0E1/9.0)+t93720*t93714*t93717*t93718*t93695*(1.25E3/9.0)+t93714*t93715*t93717* \
               t93718*t93692*(2.5E2/9.0)-t93714*t93717*t93718*t93719*t93693*1.0E2+t93714*t93716*t93717*t93718*t93692* \
               t93693*(1.0E2/9.0)-t93714*t93717*t93718*t93692*1.0/(t93694*t93694*t93694*t93694*t93694*t93694*t93694) \
               *t93695*(2.5E2/3.0)+C_k*t93720*t93690*t93529*t93692*t93695*(5.0E1/9.0)-C_k*t93690*t93529*t93692*t93719* \
               t93693*(2.0E1/3.0))-t93724*(cxnl1*gamma_aa[index]*gx*t93683*t93699*(8.8E1/9.0)+cxnl2*t93708*t93579* \
               t93678*t93696*(3.04E2/9.0)-cxnl1*t93738*t93579*t93678*t93696*2.4E1+cxnl2*t93740*t93741*t93582*t93579* \
               t93696*2.0-cxnl2*t93750*t93582*t93736*t93579*t93696-cxnl2*t93726*t93736*t93728*t93579*t93696*(3.2E1/ \
               3.0)+cxnl3*gamma_aa[index]*gx*t93704*t93725*t93579*t93696*7.2E1+cxnl1*gamma_aa[index]*gx*t93725*t93739* \
               t93579*t93696*(1.28E2/9.0)-cxnl3*gamma_aa[index]*gx*t93733*t93727*t93729*t93579*t93696*1.6E1-cxnl3* \
               gamma_aa[index]*gx*t93581*t93745*t93729*t93579*t93696+cxnl3*gamma_aa[index]*gx*t93581*t93746*t93747* \
               t93579*t93696*2.0)+t93755*t93759*2.0-cx1*gamma_aa[index]*gx*t93683*t93699*(8.8E1/9.0)+cx1*t93738*t93579* \
               t93678*t93696*2.4E1-cx2*t93708*t93579*t93678*t93696*(3.04E2/9.0)-cx2*t93740*t93741*t93582*t93579*t93696* \
               2.0+cx2*t93750*t93582*t93736*t93579*t93696+cx2*t93726*t93736*t93728*t93579*t93696*(3.2E1/3.0)-cx1* \
               gamma_aa[index]*gx*t93725*t93739*t93579*t93696*(1.28E2/9.0)-cx3*gamma_aa[index]*gx*t93704*t93725*t93579* \
               t93696*7.2E1+cx3*gamma_aa[index]*gx*t93733*t93727*t93729*t93579*t93696*1.6E1+cx3*gamma_aa[index]*gx* \
               t93581*t93745*t93729*t93579*t93696-cx3*gamma_aa[index]*gx*t93581*t93746*t93747*t93579*t93696*2.0)+ \
               c0*pow(rho_a[index],1.0/3.0)*(t93724*t93755-t93712*t93759+cx1*gamma_aa[index]*gx*t93433*t93699*(8.0/ \
               3.0)-cx1*t93728*t93738*t93579*t93696*(8.0/3.0)+cx2*t93708*t93728*t93579*t93696*(1.6E1/3.0)-cx2*t93582* \
               t93726*t93736*t93579*t93696+cx3*gamma_aa[index]*gx*t93704*t93727*t93579*t93696*8.0-cx3*gamma_aa[index]* \
               gx*t93733*t93581*t93729*t93579*t93696)*(8.0/3.0)-c0*t93535*(cx0+t93712*t93724+cx1*gamma_aa[index]* \
               gx*t93434*t93699+cx2*t93582*t93708*t93579*t93696+cx3*gamma_aa[index]*gx*t93704*t93581*t93579*t93696) \
               *(4.0/9.0))+rho_a[index]*t93794*(t93810+t93804-t93643-t93652+t93808-t93472*t93566*(t93810-t93802+t93804- \
               t93643-t93652-t93807+t93808-t93809+t93640*t93570*t93569*t93795*2.0+a1f*c*c0f*t93638*t93567*(8.0/9.0) \
               ))-rho_a[index]*t93761*(ccaa1*gamma_aa[index]*gcaa*t93683*t93764*(8.8E1/9.0)-ccaa1*t93580*t93774*t93579* \
               t93678*2.4E1+ccaa2*t93580*t93773*t93579*t93678*(3.04E2/9.0)-ccaa2*t93580*t93728*t93783*t93579*t93777* \
               (3.2E1/3.0)-ccaa2*t93580*t93582*t93783*t93579*(gamma_aa[index]*gcaa*t93683*(1.76E2/9.0)+t93580*t93579* \
               t93678*(3.04E2/9.0))+ccaa2*t93580*t93582*1.0/(t93772*t93772*t93772)*t93579*(t93777*t93777)*2.0+ccaa3* \
               gamma_aa[index]*gcaa*t93580*t93725*t93579*t93769*7.2E1+ccaa1*gamma_aa[index]*gcaa*t93580*t93725*1.0/ \
               (t93763*t93763*t93763)*t93579*(1.28E2/9.0)+ccaa3*gamma_aa[index]*gcaa*t93580*t93581*(t93781*t93781) \
               *t93579*1.0/(t93768*t93768*t93768)*2.0-ccaa3*gamma_aa[index]*gcaa*t93580*t93581*t93782*t93579*(gamma_aa[index]* \
               gcaa*t93683*(8.8E1/3.0)+t93580*t93579*t93678*(3.04E2/3.0)+gamma_aa[index]*gcaa*t93580*t93725*t93579* \
               7.2E1)-ccaa3*gamma_aa[index]*gcaa*t93580*t93727*t93781*t93782*t93579*1.6E1)-rho_a[index]*t93790*t93789* \
               2.0;
        } else if (rho_a[index] > cutoff_) {
            double t97053 = 1.0/pow(rho_a[index],1.0/3.0);
            double t97054 = c*t97053;
            double t97055 = sqrt(t97054);
            double t97056 = b1f*t97055;
            double t97057 = pow(t97054,3.0/2.0);
            double t97058 = b3f*t97057;
            double t97059 = c*c;
            double t97060 = 1.0/pow(rho_a[index],2.0/3.0);
            double t97061 = b4f*t97060*t97059;
            double t97062 = b2f*c*t97053;
            double t97063 = t97061+t97062+t97056+t97058;
            double t97064 = 1.0/pow(rho_a[index],4.0/3.0);
            double t97065 = b1p*t97055;
            double t97066 = b3p*t97057;
            double t97067 = b4p*t97060*t97059;
            double t97068 = b2p*c*t97053;
            double t97069 = t97065+t97066+t97067+t97068;
            double t97070 = 1.0/pow(rho_a[index],5.0/3.0);
            double t97071 = 1.0/sqrt(t97054);
            double t97072 = 1.0/c0f;
            double t97073 = 1.0/t97063;
            double t97074 = t97072*t97073*(1.0/2.0);
            double t97075 = t97074+1.0;
            double t97076 = 1.0/c0p;
            double t97077 = 1.0/t97069;
            double t97078 = t97076*t97077*(1.0/2.0);
            double t97079 = t97078+1.0;
            double t97080 = a1p*c*t97053;
            double t97081 = t97080+1.0;
            double t97082 = 1.0/t97079;
            double t97083 = 1.0/(t97069*t97069);
            double t97084 = b4p*t97070*t97059*(2.0/3.0);
            double t97085 = b2p*c*t97064*(1.0/3.0);
            double t97086 = b1p*c*t97071*t97064*(1.0/6.0);
            double t97087 = b3p*c*t97055*t97064*(1.0/2.0);
            double t97088 = t97084+t97085+t97086+t97087;
            double t97089 = t97081*t97082*t97083*t97088;
            double t97090 = log(t97079);
            double t97091 = 1.0/pow(rho_a[index],8.0/3.0);
            double t97092 = gamma_aa[index]*gamma_aa[index];
            double t97093 = gcaa*gcaa;
            double t97094 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]);
            double t97095 = 1.0/pow(rho_a[index],1.6E1/3.0);
            double t97096 = pow(2.0,1.0/3.0);
            double t97097 = t97096*2.0;
            double t97098 = t97097-2.0;
            double t97099 = two_13*2.0;
            double t97100 = t97099-2.0;
            double t97101 = 1.0/t97100;
            double t97102 = log(t97075);
            double t97103 = a1f*c*t97053;
            double t97104 = t97103+1.0;
            double t97105 = gamma_aa[index]*gcaa*t97091;
            double t97106 = t97105+1.0;
            double t97107 = 1.0/t97106;
            double t97108 = gamma_aa[index]*gcaa*t97091*3.0;
            double t97109 = gamma_aa[index]*gcaa*t97092*t97093*t97094;
            double t97110 = t97092*t97093*t97095*3.0;
            double t97111 = t97110+t97108+t97109+1.0;
            double t97112 = 1.0/t97111;
            double t97113 = gamma_aa[index]*gcaa*t97091*2.0;
            double t97114 = t97092*t97093*t97095;
            double t97115 = t97113+t97114+1.0;
            double t97116 = 1.0/t97115;
            double t97117 = 1.0/pow(rho_a[index],1.9E1/3.0);
            double t97118 = 1.0/pow(rho_a[index],1.1E1/3.0);
            double t97119 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
               rho_a[index]*rho_a[index]*rho_a[index]);
            double t97120 = c0f*t97102*t97104*2.0;
            double t97121 = c0p*t97081*t97090*2.0;
            double t97122 = 1.0/pow(rho_a[index],1.0E1);
            double t97123 = 1.0/pow(rho_a[index],2.2E1/3.0);
            double t97124 = 1.0/(t97106*t97106);
            double t97125 = gamma_aa[index]*gcaa*t97118*(1.6E1/3.0);
            double t97126 = t97117*t97092*t97093*(1.6E1/3.0);
            double t97127 = t97125+t97126;
            double t97128 = gamma_aa[index]*gcaa*t97118*8.0;
            double t97129 = gamma_aa[index]*gcaa*t97092*t97119*t97093*8.0;
            double t97130 = t97117*t97092*t97093*1.6E1;
            double t97131 = t97130+t97128+t97129;
            double t97132 = 1.0/(t97111*t97111);
            double t97133 = 1.0/pow(rho_a[index],1.4E1/3.0);
            double t97134 = 1.0/(t97115*t97115);
            double t97135 = 1.0/t97075;
            double t97136 = 1.0/(t97063*t97063);
            double t97137 = b4f*t97070*t97059*(2.0/3.0);
            double t97138 = b2f*c*t97064*(1.0/3.0);
            double t97139 = b1f*c*t97071*t97064*(1.0/6.0);
            double t97140 = b3f*c*t97055*t97064*(1.0/2.0);
            double t97141 = t97140+t97137+t97138+t97139;
            double t97142 = a1f*c*c0f*t97102*t97064*(2.0/3.0);
            double t97143 = a1p*c*c0p*t97090*t97064*(2.0/3.0);
            double t97144 = ccaa1*gamma_aa[index]*gcaa*t97107*t97118*(8.0/3.0);
            double t97145 = ccaa3*gamma_aa[index]*gcaa*t97112*t97092*t97119*t97093*8.0;
            double t97146 = ccaa2*t97116*t97117*t97092*t97093*(1.6E1/3.0);
            double t97147 = t97144+t97145+t97146-ccaa1*t97124*t97117*t97092*t97093*(8.0/3.0)-ccaa2*t97134*t97127* \
               t97092*t97093*t97095-ccaa3*gamma_aa[index]*gcaa*t97131*t97132*t97092*t97093*t97094;
            double t97148 = ccaa1*gamma_aa[index]*gcaa*t97107*t97091;
            double t97149 = ccaa3*gamma_aa[index]*gcaa*t97112*t97092*t97093*t97094;
            double t97150 = ccaa2*t97116*t97092*t97093*t97095;
            double t97151 = ccaa0+t97150+t97148+t97149;
            double t97152 = 1.0/pow(rho_a[index],7.0/3.0);
            double t97153 = 1.0/pow(t97054,3.0/2.0);
            double t97154 = t97141*t97141;
            double t97155 = t97088*t97088;
            double t97156 = 1.0/(t97069*t97069*t97069);
            double t97157 = t97081*t97082*t97155*t97156*2.0;
            double t97158 = b4p*t97091*t97059*(1.0E1/9.0);
            double t97159 = b2p*c*t97152*(4.0/9.0);
            double t97160 = b3p*t97071*t97091*t97059*(1.0/1.2E1);
            double t97161 = b1p*c*t97071*t97152*(2.0/9.0);
            double t97162 = b3p*c*t97152*t97055*(2.0/3.0);
            double t97163 = t97160+t97161+t97162+t97158+t97159-b1p*t97153*t97091*t97059*(1.0/3.6E1);
            double t97164 = 1.0/(t97079*t97079);
            double t97165 = 1.0/(t97069*t97069*t97069*t97069);
            double t97166 = a1p*c*c0p*t97152*t97090*(8.0/9.0);
            double t97167 = pow(rho_a[index],5.0/3.0);
            double t97168 = 1.0/tau_a[index];
            double t97169 = C_k*t97167*t97168;
            double t97170 = t97169-1.0;
            double t97171 = t97170*t97170;
            double t97172 = t97169+1.0;
            double t97173 = t97171*t97171;
            double t97174 = gx*gx;
            double t97175 = gamma_aa[index]*gx*t97091;
            double t97176 = t97175+1.0;
            double t97177 = 1.0/t97176;
            double t97178 = gamma_aa[index]*gx*t97091*3.0;
            double t97179 = gamma_aa[index]*gx*t97092*t97174*t97094;
            double t97180 = t97092*t97174*t97095*3.0;
            double t97181 = t97180+t97178+t97179+1.0;
            double t97182 = 1.0/t97181;
            double t97183 = gamma_aa[index]*gx*t97091*2.0;
            double t97184 = t97092*t97174*t97095;
            double t97185 = t97183+t97184+1.0;
            double t97186 = 1.0/t97185;
            double t97187 = X-1.0;
            double t97188 = cxnl1*gamma_aa[index]*gx*t97091*t97177;
            double t97189 = cxnl3*gamma_aa[index]*gx*t97092*t97182*t97174*t97094;
            double t97190 = cxnl2*t97092*t97174*t97095*t97186;
            double t97191 = cxnl0+t97190+t97188+t97189;
            double t97192 = 1.0/t97172;
            double t97193 = pow(rho_a[index],4.0/3.0);
            double t97194 = 1.0/(t97172*t97172*t97172);
            double t97195 = 1.0/(t97172*t97172*t97172*t97172*t97172);
            double t97196 = C_k*C_k;
            double t97197 = 1.0/(tau_a[index]*tau_a[index]);
            double t97198 = 1.0/(t97172*t97172*t97172*t97172);
            double t97199 = 1.0/(t97172*t97172*t97172*t97172*t97172*t97172);
            double t97200 = 1.0/(t97172*t97172);
            double t97201 = t97170*t97192;
            double t97202 = t97170*t97173*t97195;
            double t97227 = t97170*t97171*t97194*2.0;
            double t97203 = t97201+t97202-t97227;
            double t97210 = gamma_aa[index]*gx*t97118*(1.6E1/3.0);
            double t97211 = t97117*t97092*t97174*(1.6E1/3.0);
            double t97204 = t97210+t97211;
            double t97205 = 1.0/(t97181*t97181);
            double t97206 = gamma_aa[index]*gx*t97118*8.0;
            double t97207 = gamma_aa[index]*gx*t97092*t97119*t97174*8.0;
            double t97208 = t97117*t97092*t97174*1.6E1;
            double t97209 = t97206+t97207+t97208;
            double t97212 = 1.0/(t97185*t97185);
            double t97213 = pow(rho_a[index],2.0/3.0);
            double t97214 = 1.0/(t97176*t97176);
            double t97215 = 1.0/(t97176*t97176*t97176);
            double t97216 = t97204*t97204;
            double t97217 = 1.0/(t97185*t97185*t97185);
            double t97218 = gamma_aa[index]*gx*t97133*(8.8E1/3.0);
            double t97219 = gamma_aa[index]*gx*t97122*t97092*t97174*7.2E1;
            double t97220 = t97123*t97092*t97174*(3.04E2/3.0);
            double t97221 = t97220+t97218+t97219;
            double t97222 = t97209*t97209;
            double t97223 = 1.0/(t97181*t97181*t97181);
            double t97224 = gamma_aa[index]*gx*t97133*(1.76E2/9.0);
            double t97225 = t97123*t97092*t97174*(3.04E2/9.0);
            double t97226 = t97224+t97225;
            double t97228 = cxnl1*gamma_aa[index]*gx*t97118*t97177*(8.0/3.0);
            double t97229 = cxnl3*gamma_aa[index]*gx*t97092*t97119*t97182*t97174*8.0;
            double t97230 = cxnl2*t97117*t97092*t97174*t97186*(1.6E1/3.0);
            double t97231 = t97230+t97228+t97229-cxnl1*t97214*t97117*t97092*t97174*(8.0/3.0)-cxnl2*t97212*t97204* \
               t97092*t97174*t97095-cxnl3*gamma_aa[index]*gx*t97205*t97092*t97209*t97174*t97094;
            double t97232 = C_k*t97213*t97192*t97168*(5.0/3.0);
            double t97233 = C_k*t97213*t97170*t97171*t97168*t97198*1.0E1;
            double t97234 = C_k*t97213*t97173*t97168*t97195*(2.5E1/3.0);
            double t97235 = t97232+t97233+t97234-C_k*t97200*t97213*t97170*t97168*(5.0/3.0)-C_k*t97213*t97171* \
               t97194*t97168*1.0E1-C_k*t97213*t97170*t97173*t97168*t97199*(2.5E1/3.0);
            v_rho_a_rho_a_[index] = t97147*(t97121+t97101*t97098*(t97120-c0p*t97081*t97090*2.0))*2.0+t97151*(t97143- \
               t97089+t97101*t97098*(t97142+t97089-t97104*t97141*t97135*t97136-a1p*c*c0p*t97090*t97064*(2.0/3.0)) \
               )*2.0+rho_a[index]*t97151*(-t97157-t97166+t97101*t97098*(t97157+t97166-t97081*t97082*t97163*t97083- \
               t97104*1.0/(t97063*t97063*t97063)*t97135*t97154*2.0+t97104*t97135*t97136*(b2f*c*t97152*(4.0/9.0)+b4f* \
               t97091*t97059*(1.0E1/9.0)+b1f*c*t97071*t97152*(2.0/9.0)+b3f*c*t97152*t97055*(2.0/3.0)-b1f*t97153*t97091* \
               t97059*(1.0/3.6E1)+b3f*t97071*t97091*t97059*(1.0/1.2E1))+t97104*1.0/(t97063*t97063*t97063*t97063)* \
               t97072*t97154*1.0/(t97075*t97075)*(1.0/2.0)-a1f*c*c0f*t97102*t97152*(8.0/9.0)-t97081*t97155*t97164* \
               t97165*t97076*(1.0/2.0)+a1f*c*t97141*t97135*t97064*t97136*(2.0/3.0)-a1p*c*t97064*t97082*t97083*t97088* \
               (2.0/3.0))+t97081*t97082*t97163*t97083+t97081*t97155*t97164*t97165*t97076*(1.0/2.0)+a1p*c*t97064*t97082* \
               t97083*t97088*(2.0/3.0))-rho_a[index]*t97147*(t97143-t97089+t97101*t97098*(t97142-t97143+t97089-t97104* \
               t97141*t97135*t97136))*2.0-rho_a[index]*(t97121+t97101*t97098*(t97120-t97121))*(ccaa1*gamma_aa[index]* \
               gcaa*t97133*t97107*(8.8E1/9.0)-ccaa1*t97123*t97124*t97092*t97093*2.4E1+ccaa2*t97123*t97116*t97092* \
               t97093*(3.04E2/9.0)-ccaa2*t97134*t97117*t97127*t97092*t97093*(3.2E1/3.0)-ccaa2*t97134*t97092*t97093* \
               t97095*(gamma_aa[index]*gcaa*t97133*(1.76E2/9.0)+t97123*t97092*t97093*(3.04E2/9.0))+ccaa2*1.0/(t97115* \
               t97115*t97115)*(t97127*t97127)*t97092*t97093*t97095*2.0+ccaa3*gamma_aa[index]*gcaa*t97112*t97122*t97092* \
               t97093*7.2E1+ccaa1*gamma_aa[index]*gcaa*t97122*1.0/(t97106*t97106*t97106)*t97092*t97093*(1.28E2/9.0) \
               +ccaa3*gamma_aa[index]*gcaa*1.0/(t97111*t97111*t97111)*(t97131*t97131)*t97092*t97093*t97094*2.0-ccaa3* \
               gamma_aa[index]*gcaa*t97132*t97092*t97093*t97094*(gamma_aa[index]*gcaa*t97133*(8.8E1/3.0)+t97123*t97092* \
               t97093*(3.04E2/3.0)+gamma_aa[index]*gcaa*t97122*t97092*t97093*7.2E1)-ccaa3*gamma_aa[index]*gcaa*t97131* \
               t97132*t97092*t97119*t97093*1.6E1)-c0*t97060*t97187*(cx0+t97203*t97191+cx1*gamma_aa[index]*gx*t97091* \
               t97177+cx2*t97092*t97174*t97095*t97186+cx3*gamma_aa[index]*gx*t97092*t97182*t97174*t97094)*(4.0/9.0) \
               +c0*t97193*t97187*(t97191*(t97200*t97193*t97196*t97197*(5.0E1/9.0)-C_k*t97053*t97192*t97168*(1.0E1/ \
               9.0)+C_k*t97200*t97053*t97170*t97168*(1.0E1/9.0)+C_k*t97053*t97171*t97194*t97168*(2.0E1/3.0)-C_k*t97053* \
               t97173*t97168*t97195*(5.0E1/9.0)+t97170*t97193*t97194*t97196*t97197*(2.5E2/9.0)-t97171*t97193*t97196* \
               t97197*t97198*1.0E2+t97173*t97193*t97196*t97197*t97199*(1.25E3/9.0)+t97170*t97171*t97193*t97195*t97196* \
               t97197*(1.0E2/9.0)-t97170*1.0/(t97172*t97172*t97172*t97172*t97172*t97172*t97172)*t97173*t97193*t97196* \
               t97197*(2.5E2/3.0)-C_k*t97053*t97170*t97171*t97168*t97198*(2.0E1/3.0)+C_k*t97053*t97170*t97173*t97168* \
               t97199*(5.0E1/9.0))-t97203*(cxnl1*gamma_aa[index]*gx*t97133*t97177*(8.8E1/9.0)-cxnl1*t97123*t97214* \
               t97092*t97174*2.4E1+cxnl2*t97123*t97092*t97174*t97186*(3.04E2/9.0)-cxnl2*t97212*t97204*t97117*t97092* \
               t97174*(3.2E1/3.0)-cxnl2*t97212*t97226*t97092*t97174*t97095+cxnl2*t97216*t97217*t97092*t97174*t97095* \
               2.0+cxnl1*gamma_aa[index]*gx*t97122*t97215*t97092*t97174*(1.28E2/9.0)+cxnl3*gamma_aa[index]*gx*t97122* \
               t97092*t97182*t97174*7.2E1-cxnl3*gamma_aa[index]*gx*t97221*t97205*t97092*t97174*t97094+cxnl3*gamma_aa[index]* \
               gx*t97222*t97223*t97092*t97174*t97094*2.0-cxnl3*gamma_aa[index]*gx*t97205*t97092*t97119*t97209*t97174* \
               1.6E1)+t97231*t97235*2.0-cx1*gamma_aa[index]*gx*t97133*t97177*(8.8E1/9.0)+cx1*t97123*t97214*t97092* \
               t97174*2.4E1-cx2*t97123*t97092*t97174*t97186*(3.04E2/9.0)+cx2*t97212*t97204*t97117*t97092*t97174*(3.2E1/ \
               3.0)+cx2*t97212*t97226*t97092*t97174*t97095-cx2*t97216*t97217*t97092*t97174*t97095*2.0-cx1*gamma_aa[index]* \
               gx*t97122*t97215*t97092*t97174*(1.28E2/9.0)-cx3*gamma_aa[index]*gx*t97122*t97092*t97182*t97174*7.2E1+ \
               cx3*gamma_aa[index]*gx*t97221*t97205*t97092*t97174*t97094-cx3*gamma_aa[index]*gx*t97222*t97223*t97092* \
               t97174*t97094*2.0+cx3*gamma_aa[index]*gx*t97205*t97092*t97119*t97209*t97174*1.6E1)+c0*pow(rho_a[index],1.0/ \
               3.0)*t97187*(t97203*t97231-t97235*t97191+cx1*gamma_aa[index]*gx*t97118*t97177*(8.0/3.0)-cx1*t97214* \
               t97117*t97092*t97174*(8.0/3.0)+cx2*t97117*t97092*t97174*t97186*(1.6E1/3.0)-cx2*t97212*t97204*t97092* \
               t97174*t97095+cx3*gamma_aa[index]*gx*t97092*t97119*t97182*t97174*8.0-cx3*gamma_aa[index]*gx*t97205* \
               t97092*t97209*t97174*t97094)*(8.0/3.0);
        } else if (rho_b[index] > cutoff_) {
            v_rho_a_rho_a_[index] = 0.0;
        } else {
            v_rho_a_rho_a_[index] = 0.0;
        } 

        //V_rho_a_rho_b
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t93812 = 1.0/pow(rho_a[index],1.0/3.0);
            double t93813 = c*t93812;
            double t93814 = sqrt(t93813);
            double t93815 = pow(t93813,3.0/2.0);
            double t93816 = c*c;
            double t93817 = 1.0/pow(rho_a[index],2.0/3.0);
            double t93818 = 1.0/c0p;
            double t93819 = b1p*t93814;
            double t93820 = b3p*t93815;
            double t93821 = b4p*t93816*t93817;
            double t93822 = b2p*c*t93812;
            double t93823 = t93820+t93821+t93822+t93819;
            double t93824 = 1.0/t93823;
            double t93825 = t93824*t93818*(1.0/2.0);
            double t93826 = t93825+1.0;
            double t93827 = log(t93826);
            double t93828 = a1p*c*t93812;
            double t93829 = t93828+1.0;
            double t93830 = pow(2.0,1.0/3.0);
            double t93831 = t93830*2.0;
            double t93832 = t93831-2.0;
            double t93833 = two_13*2.0;
            double t93834 = t93833-2.0;
            double t93835 = 1.0/t93834;
            double t93836 = 1.0/c0f;
            double t93837 = 1.0/pow(rho_b[index],1.0/3.0);
            double t93838 = c*t93837;
            double t93839 = sqrt(t93838);
            double t93840 = pow(t93838,3.0/2.0);
            double t93841 = 1.0/pow(rho_b[index],2.0/3.0);
            double t93842 = b1p*t93839;
            double t93843 = b3p*t93840;
            double t93844 = b4p*t93841*t93816;
            double t93845 = b2p*c*t93837;
            double t93846 = t93842+t93843+t93844+t93845;
            double t93847 = 1.0/t93846;
            double t93848 = t93818*t93847*(1.0/2.0);
            double t93849 = t93848+1.0;
            double t93850 = log(t93849);
            double t93851 = a1p*c*t93837;
            double t93852 = t93851+1.0;
            double t93853 = c0p*t93850*t93852*2.0;
            double t93854 = rho_a[index]+rho_b[index];
            double t93855 = 1.0/pow(t93854,1.0/3.0);
            double t93856 = c*t93855;
            double t93857 = sqrt(t93856);
            double t93858 = pow(t93856,3.0/2.0);
            double t93859 = 1.0/pow(t93854,2.0/3.0);
            double t93860 = b1p*t93857;
            double t93861 = b3p*t93858;
            double t93862 = b4p*t93816*t93859;
            double t93863 = b2p*c*t93855;
            double t93864 = t93860+t93861+t93862+t93863;
            double t93865 = 1.0/t93864;
            double t93866 = t93818*t93865*(1.0/2.0);
            double t93867 = t93866+1.0;
            double t93868 = log(t93867);
            double t93869 = a1p*c*t93855;
            double t93870 = t93869+1.0;
            double t93871 = c0p*t93870*t93868*2.0;
            double t93872 = rho_a[index]-rho_b[index];
            double t93873 = t93872*t93872;
            double t93874 = 1.0/t93854;
            double t93875 = t93872*t93874;
            double t93876 = 1.0/(t93854*t93854*t93854*t93854);
            double t93877 = t93873*t93873;
            double t93878 = t93875+1.0;
            double t93879 = pow(t93878,4.0/3.0);
            double t93880 = -t93875+1.0;
            double t93881 = pow(t93880,4.0/3.0);
            double t93882 = t93881+t93879-2.0;
            double t93883 = gcab*gcab;
            double t93884 = 1.0/pow(rho_a[index],1.1E1/3.0);
            double t93885 = 1.0/pow(rho_b[index],1.1E1/3.0);
            double t93886 = 1.0/pow(rho_a[index],8.0/3.0);
            double t93887 = gamma_aa[index]*t93886*(1.0/2.0);
            double t93888 = 1.0/pow(rho_b[index],8.0/3.0);
            double t93889 = gamma_bb[index]*t93888*(1.0/2.0);
            double t93890 = t93887+t93889;
            double t93891 = t93890*t93890;
            double t93892 = t93891*t93883*3.0;
            double t93893 = gcab*t93890*t93891*t93883;
            double t93894 = gcab*t93890*3.0;
            double t93895 = t93892+t93893+t93894+1.0;
            double t93896 = t93891*t93883;
            double t93897 = gcab*t93890*2.0;
            double t93898 = t93896+t93897+1.0;
            double t93899 = gamma_aa[index]*gcab*t93884*4.0;
            double t93900 = gamma_aa[index]*gcab*t93891*t93883*t93884*4.0;
            double t93901 = gamma_aa[index]*t93890*t93883*t93884*8.0;
            double t93902 = t93900+t93901+t93899;
            double t93903 = 1.0/(t93895*t93895);
            double t93904 = gamma_bb[index]*gcab*t93885*4.0;
            double t93905 = gamma_bb[index]*gcab*t93891*t93883*t93885*4.0;
            double t93906 = gamma_bb[index]*t93890*t93883*t93885*8.0;
            double t93907 = t93904+t93905+t93906;
            double t93908 = gamma_aa[index]*gcab*t93884*(8.0/3.0);
            double t93909 = gamma_aa[index]*t93890*t93883*t93884*(8.0/3.0);
            double t93910 = t93908+t93909;
            double t93911 = gamma_bb[index]*gcab*t93885*(8.0/3.0);
            double t93912 = gamma_bb[index]*t93890*t93883*t93885*(8.0/3.0);
            double t93913 = t93911+t93912;
            double t93914 = 1.0/(t93898*t93898);
            double t93915 = gcab*t93890;
            double t93916 = t93915+1.0;
            double t93917 = 1.0/(t93916*t93916);
            double t93918 = 1.0/t93898;
            double t93919 = 1.0/t93895;
            double t93920 = 1.0/pow(t93854,4.0/3.0);
            double t93921 = b1f*t93857;
            double t93922 = b3f*t93858;
            double t93923 = b4f*t93816*t93859;
            double t93924 = b2f*c*t93855;
            double t93925 = t93921+t93922+t93923+t93924;
            double t93926 = 1.0/t93925;
            double t93927 = t93836*t93926*(1.0/2.0);
            double t93928 = t93927+1.0;
            double t93929 = log(t93928);
            double t93930 = a1f*c*t93855;
            double t93931 = t93930+1.0;
            double t93933 = c0f*t93931*t93929*2.0;
            double t93932 = -t93933+t93871;
            double t93934 = 1.0/(t93854*t93854);
            double t93962 = t93934*t93872;
            double t93935 = -t93962+t93874;
            double t93936 = t93933-t93871;
            double t93937 = 1.0/pow(t93854,5.0/3.0);
            double t93938 = 1.0/sqrt(t93856);
            double t93939 = 1.0/t93867;
            double t93940 = 1.0/(t93864*t93864);
            double t93941 = b4p*t93816*t93937*(2.0/3.0);
            double t93942 = b2p*c*t93920*(1.0/3.0);
            double t93943 = b1p*c*t93920*t93938*(1.0/6.0);
            double t93944 = b3p*c*t93920*t93857*(1.0/2.0);
            double t93945 = t93941+t93942+t93943+t93944;
            double t93946 = t93940*t93870*t93945*t93939;
            double t93947 = 1.0/d2fz0;
            double t93948 = 1.0/Aa;
            double t93949 = b1a*t93857;
            double t93950 = b3a*t93858;
            double t93951 = b4a*t93816*t93859;
            double t93952 = b2a*c*t93855;
            double t93953 = t93950+t93951+t93952+t93949;
            double t93954 = 1.0/t93953;
            double t93955 = t93954*t93948*(1.0/2.0);
            double t93956 = t93955+1.0;
            double t93957 = log(t93956);
            double t93958 = a1a*c*t93855;
            double t93959 = t93958+1.0;
            double t93960 = 1.0/(t93854*t93854*t93854*t93854*t93854);
            double t93961 = pow(t93878,1.0/3.0);
            double t93963 = t93961*t93935*(4.0/3.0);
            double t93964 = pow(t93880,1.0/3.0);
            double t94043 = t93935*t93964*(4.0/3.0);
            double t93965 = t93963-t94043;
            double t93966 = t93876*t93877;
            double t93967 = t93966-1.0;
            double t93968 = a1f*c*t93812;
            double t93969 = t93968+1.0;
            double t93970 = b1f*t93814;
            double t93971 = b3f*t93815;
            double t93972 = b4f*t93816*t93817;
            double t93973 = b2f*c*t93812;
            double t93974 = t93970+t93971+t93972+t93973;
            double t93975 = 1.0/t93974;
            double t93976 = t93836*t93975*(1.0/2.0);
            double t93977 = t93976+1.0;
            double t93978 = 1.0/pow(rho_a[index],4.0/3.0);
            double t93979 = 1.0/pow(rho_a[index],5.0/3.0);
            double t93980 = 1.0/sqrt(t93813);
            double t93981 = log(t93977);
            double t93982 = 1.0/t93826;
            double t93983 = 1.0/(t93823*t93823);
            double t93984 = b4p*t93816*t93979*(2.0/3.0);
            double t93985 = b2p*c*t93978*(1.0/3.0);
            double t93986 = b1p*c*t93980*t93978*(1.0/6.0);
            double t93987 = b3p*c*t93814*t93978*(1.0/2.0);
            double t93988 = t93984+t93985+t93986+t93987;
            double t93989 = t93829*t93982*t93983*t93988;
            double t93990 = c0f*t93981*t93969*2.0;
            double t93991 = c0p*t93827*t93829*2.0;
            double t93992 = Aa*t93835*t93882*t93947*t93957*t93967*t93959*2.0;
            double t93993 = 1.0/t93916;
            double t93994 = t93960*t93835*t93882*t93936*t93877*4.0;
            double t93995 = t93962+t93874;
            double t93996 = 1.0/t93928;
            double t93997 = 1.0/(t93925*t93925);
            double t93998 = b4f*t93816*t93937*(2.0/3.0);
            double t93999 = b2f*c*t93920*(1.0/3.0);
            double t94000 = b1f*c*t93920*t93938*(1.0/6.0);
            double t94001 = b3f*c*t93920*t93857*(1.0/2.0);
            double t94002 = t93998+t93999+t94000+t94001;
            double t94003 = a1f*c*c0f*t93920*t93929*(2.0/3.0);
            double t94004 = a1p*c*c0p*t93920*t93868*(2.0/3.0);
            double t94005 = t93960*t93877*4.0;
            double t94006 = t93961*t93995*(4.0/3.0);
            double t94042 = t93964*t93995*(4.0/3.0);
            double t94007 = t94006-t94042;
            double t94008 = 1.0/t93956;
            double t94009 = 1.0/(t93953*t93953);
            double t94010 = b4a*t93816*t93937*(2.0/3.0);
            double t94011 = b2a*c*t93920*(1.0/3.0);
            double t94012 = b1a*c*t93920*t93938*(1.0/6.0);
            double t94013 = b3a*c*t93920*t93857*(1.0/2.0);
            double t94014 = t94010+t94011+t94012+t94013;
            double t94015 = Aa*a1a*c*t93920*t93835*t93882*t93947*t93957*t93967*(2.0/3.0);
            double t94016 = a1f*c*t93837;
            double t94017 = t94016+1.0;
            double t94018 = b1f*t93839;
            double t94019 = b3f*t93840;
            double t94020 = b4f*t93841*t93816;
            double t94021 = b2f*c*t93837;
            double t94022 = t94020+t94021+t94018+t94019;
            double t94023 = 1.0/t94022;
            double t94024 = t93836*t94023*(1.0/2.0);
            double t94025 = t94024+1.0;
            double t94026 = 1.0/pow(rho_b[index],4.0/3.0);
            double t94027 = 1.0/pow(rho_b[index],5.0/3.0);
            double t94028 = 1.0/sqrt(t93838);
            double t94029 = log(t94025);
            double t94030 = 1.0/t93849;
            double t94031 = 1.0/(t93846*t93846);
            double t94032 = b4p*t93816*t94027*(2.0/3.0);
            double t94033 = b2p*c*t94026*(1.0/3.0);
            double t94034 = b1p*c*t94026*t94028*(1.0/6.0);
            double t94035 = b3p*c*t93839*t94026*(1.0/2.0);
            double t94036 = t94032+t94033+t94034+t94035;
            double t94037 = t93852*t94030*t94031*t94036;
            double t94038 = t93853-c0f*t94017*t94029*2.0;
            double t94039 = t93835*t93882*t93936*t93876*t93877;
            double t94040 = 1.0/pow(t93854,7.0/3.0);
            double t94041 = 1.0/pow(t93854,8.0/3.0);
            double t94059 = t93931*t93996*t93997*t94002;
            double t94044 = t93946+t94003-t94004-t94059;
            double t94045 = t93945*t93945;
            double t94046 = 1.0/pow(t93856,3.0/2.0);
            double t94047 = b4p*t93816*t94041*(1.0E1/9.0);
            double t94048 = b2p*c*t94040*(4.0/9.0);
            double t94049 = b1p*c*t93938*t94040*(2.0/9.0);
            double t94050 = b3p*c*t93857*t94040*(2.0/3.0);
            double t94051 = b3p*t93816*t93938*t94041*(1.0/1.2E1);
            double t94052 = t94050+t94051+t94047+t94048+t94049-b1p*t93816*t94041*t94046*(1.0/3.6E1);
            double t94053 = t93940*t93870*t93939*t94052;
            double t94054 = 1.0/(t93864*t93864*t93864);
            double t94055 = t94002*t94002;
            double t94056 = 1.0/(t93867*t93867);
            double t94057 = 1.0/(t93864*t93864*t93864*t93864);
            double t94058 = t93870*t93818*t94045*t94056*t94057*(1.0/2.0);
            double t94060 = 1.0/(t93854*t93854*t93854);
            double t94061 = a1p*c*t93920*t93940*t93945*t93939*(2.0/3.0);
            double t94062 = 1.0/(t93854*t93854*t93854*t93854*t93854*t93854);
            double t94063 = t93872*t93873*t93876*4.0;
            double t94064 = t94005+t94063;
            double t94065 = t93872*t93964*t94060*(8.0/3.0);
            double t94066 = 1.0/pow(t93878,2.0/3.0);
            double t94067 = t93935*t93995*t94066*(4.0/9.0);
            double t94068 = 1.0/pow(t93880,2.0/3.0);
            double t94069 = t93935*t93995*t94068*(4.0/9.0);
            double t94070 = t94065+t94067+t94069-t93961*t93872*t94060*(8.0/3.0);
            double t94071 = t94014*t94014;
            double t94072 = t94005-t94063;
            double t94073 = t93835*t93936*t93876*t93877*t94007;
            double t94074 = Aa*t93835*t93882*t93947*t93957*t93959*t94064*2.0;
            double t94075 = Aa*t93835*t93947*t93957*t93967*t93959*t94007*2.0;
            v_rho_a_rho_b_[index] = (ccab1*gamma_aa[index]*gcab*t93884*t93993*(4.0/3.0)-ccab2*t93910*t93914*t93891* \
               t93883-ccab1*gamma_aa[index]*t93890*t93917*t93883*t93884*(4.0/3.0)+ccab2*gamma_aa[index]*t93890*t93918* \
               t93883*t93884*(8.0/3.0)+ccab3*gamma_aa[index]*gcab*t93891*t93883*t93919*t93884*4.0-ccab3*gcab*t93902* \
               t93903*t93890*t93891*t93883)*(-t93853+t93871+t93992+t94039-t93854*(-t93946+t93994+t94004+t94015+t94073+ \
               t94074+t94075+t93835*t93882*t93876*t93877*t94044+t93835*t93872*t93873*t93882*t93936*t93876*4.0-t93835* \
               t93882*t93947*t93967*t93959*t94014*t94008*t94009)+rho_b[index]*(-t94037+t93832*t93835*(t94037-(1.0/ \
               (t94022*t94022)*t94017*(b2f*c*t94026*(1.0/3.0)+b4f*t93816*t94027*(2.0/3.0)+b1f*c*t94026*t94028*(1.0/ \
               6.0)+b3f*c*t93839*t94026*(1.0/2.0)))/t94025+a1f*c*c0f*t94026*t94029*(2.0/3.0)-a1p*c*c0p*t93850*t94026* \
               (2.0/3.0))+a1p*c*c0p*t93850*t94026*(2.0/3.0))+t93832*t93835*t94038)-(rho_b[index]*(t93853-t93832*t93835* \
               t94038)+rho_a[index]*(t93991+t93832*t93835*(t93990-c0p*t93827*t93829*2.0))-t93854*(t93871+t93992-t93932* \
               t93835*t93882*t93876*t93877))*(ccab2*t93910*t93913*t93891*t93883*1.0/(t93898*t93898*t93898)*-2.0+ccab3* \
               gcab*t93903*t93890*t93891*t93883*(gamma_aa[index]*gamma_bb[index]*t93883*t93884*t93885*(3.2E1/3.0) \
               +gamma_aa[index]*gamma_bb[index]*gcab*t93890*t93883*t93884*t93885*(3.2E1/3.0))+ccab1*gamma_aa[index]* \
               gamma_bb[index]*t93917*t93883*t93884*t93885*(3.2E1/9.0)-ccab2*gamma_aa[index]*gamma_bb[index]*t93918* \
               t93883*t93884*t93885*(3.2E1/9.0)+ccab2*gamma_aa[index]*t93913*t93914*t93890*t93883*t93884*(8.0/3.0) \
               +ccab2*gamma_bb[index]*t93910*t93914*t93890*t93883*t93885*(8.0/3.0)+ccab2*gamma_aa[index]*gamma_bb[index]* \
               t93914*t93891*(t93883*t93883)*t93884*t93885*(3.2E1/9.0)-ccab3*gcab*t93902*t93907*t93890*t93891*t93883* \
               1.0/(t93895*t93895*t93895)*2.0+ccab3*gamma_bb[index]*gcab*t93902*t93903*t93891*t93883*t93885*4.0+ccab3* \
               gamma_aa[index]*gcab*t93903*t93907*t93891*t93883*t93884*4.0-ccab3*gamma_aa[index]*gamma_bb[index]* \
               gcab*t93890*t93883*t93919*t93884*t93885*(3.2E1/3.0)-ccab1*gamma_aa[index]*gamma_bb[index]*gcab*1.0/ \
               (t93916*t93916*t93916)*t93890*t93883*t93884*t93885*(3.2E1/9.0))+(ccab0+ccab1*gcab*t93890*t93993+ccab2* \
               t93891*t93918*t93883+ccab3*gcab*t93890*t93891*t93883*t93919)*(t94073+t94074+t94075+t93854*(t94061+ \
               t94053+t94058-t93870*t93939*t94045*t94054*2.0+t93835*t93965*t93876*t93877*(t93946+t94003-t94004-t94059) \
               -a1p*c*c0p*t93868*t94040*(8.0/9.0)-t93835*t93882*t93876*t93877*(t94061+t94053+t94058-t93870*t93939* \
               t94045*t94054*2.0+t93931*1.0/(t93925*t93925*t93925)*t93996*t94055*2.0-t93931*t93996*t93997*(b2f*c* \
               t94040*(4.0/9.0)+b4f*t93816*t94041*(1.0E1/9.0)+b1f*c*t93938*t94040*(2.0/9.0)+b3f*c*t93857*t94040*(2.0/ \
               3.0)-b1f*t93816*t94041*t94046*(1.0/3.6E1)+b3f*t93816*t93938*t94041*(1.0/1.2E1))-t93931*1.0/(t93925* \
               t93925*t93925*t93925)*t93836*1.0/(t93928*t93928)*t94055*(1.0/2.0)+a1f*c*c0f*t93929*t94040*(8.0/9.0) \
               -a1p*c*c0p*t93868*t94040*(8.0/9.0)-a1f*c*t93920*t93996*t93997*t94002*(2.0/3.0))+t93960*t93835*t93936* \
               t93965*t93877*4.0+t93835*t93873*t93882*t93936*t93876*1.2E1-t93960*t93835*t93936*t93877*t94007*4.0- \
               t93960*t93835*t93882*t93877*t94044*8.0-t93835*t93882*t93936*t93877*t94062*2.0E1+t93835*t93936*t93876* \
               t93877*t94070-t93835*t93876*t93877*t94007*t94044+t93835*t93872*t93873*t93936*t93965*t93876*4.0+t93835* \
               t93872*t93873*t93936*t93876*t94007*4.0+Aa*t93835*t93947*t93957*t93967*t93959*t94070*2.0+Aa*t93835* \
               t93947*t93965*t93957*t93959*t94064*2.0-Aa*t93835*t93947*t93957*t93959*t94007*t94072*2.0+Aa*t93835* \
               t93882*t93947*t93957*t93959*(t93873*t93876*1.2E1-t93877*t94062*2.0E1)*2.0-t93835*t93947*t93965*t93967* \
               t93959*t94014*t94008*t94009+t93835*t93882*t93947*t93959*t94014*t94008*t94009*t94072+t93835*t93882* \
               t93947*t93959*t94014*t94008*t94009*t94064+t93835*t93947*t93967*t93959*t94014*t94007*t94008*t94009- \
               t93835*1.0/(t93953*t93953*t93953)*t93882*t93947*t93967*t93959*t94008*t94071*2.0+t93835*t93882*t93947* \
               t93967*t93959*t94008*t94009*(b2a*c*t94040*(4.0/9.0)+b4a*t93816*t94041*(1.0E1/9.0)+b1a*c*t93938*t94040* \
               (2.0/9.0)+b3a*c*t93857*t94040*(2.0/3.0)-b1a*t93816*t94041*t94046*(1.0/3.6E1)+b3a*t93816*t93938*t94041* \
               (1.0/1.2E1))+Aa*a1a*c*t93920*t93835*t93947*t93965*t93957*t93967*(2.0/3.0)-Aa*a1a*c*t93920*t93835*t93882* \
               t93947*t93957*t94072*(2.0/3.0)-Aa*a1a*c*t93920*t93835*t93882*t93947*t93957*t94064*(2.0/3.0)-Aa*a1a* \
               c*t93920*t93835*t93947*t93957*t93967*t94007*(2.0/3.0)-Aa*a1a*c*t93835*t93882*t93947*t93957*t93967* \
               t94040*(8.0/9.0)+t93835*1.0/(t93953*t93953*t93953*t93953)*t93882*t93947*1.0/(t93956*t93956)*t93948* \
               t93967*t93959*t94071*(1.0/2.0)+a1a*c*t93920*t93835*t93882*t93947*t93967*t94014*t94008*t94009*(2.0/ \
               3.0))-t93940*t93870*t93945*t93939*2.0+t93835*t93882*t93876*t93877*(t93946+t94003-t94004-t94059)*2.0+ \
               a1p*c*c0p*t93920*t93868*(4.0/3.0)+t93960*t93835*t93882*t93936*t93877*8.0-t93835*t93936*t93965*t93876* \
               t93877-Aa*t93835*t93947*t93965*t93957*t93967*t93959*2.0+Aa*t93835*t93882*t93947*t93957*t93959*(t94005- \
               t94063)*2.0-t93835*t93882*t93947*t93967*t93959*t94014*t94008*t94009*2.0+Aa*a1a*c*t93920*t93835*t93882* \
               t93947*t93957*t93967*(4.0/3.0))+(ccab1*gamma_bb[index]*gcab*t93885*t93993*(4.0/3.0)-ccab2*t93913*t93914* \
               t93891*t93883-ccab1*gamma_bb[index]*t93890*t93917*t93883*t93885*(4.0/3.0)+ccab2*gamma_bb[index]*t93890* \
               t93918*t93883*t93885*(8.0/3.0)+ccab3*gamma_bb[index]*gcab*t93891*t93883*t93919*t93885*4.0-ccab3*gcab* \
               t93903*t93907*t93890*t93891*t93883)*(t93871-t93991+t93992+t94039-t93854*(-t93946+t93994+t94004+t94015+ \
               t93835*t93882*t93876*t93877*(t93946+t94003-t93931*t93996*t93997*t94002-a1p*c*c0p*t93920*t93868*(2.0/ \
               3.0))-t93835*t93936*t93965*t93876*t93877+t93932*t93835*t93872*t93873*t93882*t93876*4.0-Aa*t93835*t93947* \
               t93965*t93957*t93967*t93959*2.0+Aa*t93835*t93882*t93947*t93957*t93959*(t94005-t93872*t93873*t93876* \
               4.0)*2.0-t93835*t93882*t93947*t93967*t93959*t94014*t94008*t94009)+rho_a[index]*(-t93989+t93832*t93835* \
               (t93989-(1.0/(t93974*t93974)*t93969*(b2f*c*t93978*(1.0/3.0)+b4f*t93816*t93979*(2.0/3.0)+b1f*c*t93980* \
               t93978*(1.0/6.0)+b3f*c*t93814*t93978*(1.0/2.0)))/t93977+a1f*c*c0f*t93981*t93978*(2.0/3.0)-a1p*c*c0p* \
               t93827*t93978*(2.0/3.0))+a1p*c*c0p*t93827*t93978*(2.0/3.0))-t93832*t93835*(t93990-t93991));
        } else if (rho_a[index] > cutoff_) {
            v_rho_a_rho_b_[index] = 0.0;
        } else if (rho_b[index] > cutoff_) {
            v_rho_a_rho_b_[index] = 0.0;
        } else {
            v_rho_a_rho_b_[index] = 0.0;
        } 

        //V_rho_b_rho_b
        if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
            double t94077 = gcab*gcab;
            double t94081 = 1.0/pow(rho_a[index],8.0/3.0);
            double t94082 = gamma_aa[index]*t94081*(1.0/2.0);
            double t94083 = 1.0/pow(rho_b[index],8.0/3.0);
            double t94084 = gamma_bb[index]*t94083*(1.0/2.0);
            double t94078 = t94082+t94084;
            double t94079 = t94078*t94078;
            double t94080 = 1.0/pow(rho_b[index],1.1E1/3.0);
            double t94085 = gcab*t94078;
            double t94086 = t94085+1.0;
            double t94087 = t94077*t94079;
            double t94088 = gcab*t94078*2.0;
            double t94089 = t94087+t94088+1.0;
            double t94090 = t94077*t94079*3.0;
            double t94091 = gcab*t94077*t94078*t94079;
            double t94092 = gcab*t94078*3.0;
            double t94093 = t94090+t94091+t94092+1.0;
            double t94094 = rho_a[index]+rho_b[index];
            double t94095 = 1.0/pow(t94094,1.0/3.0);
            double t94096 = c*t94095;
            double t94097 = sqrt(t94096);
            double t94098 = b1p*t94097;
            double t94099 = pow(t94096,3.0/2.0);
            double t94100 = b3p*t94099;
            double t94101 = c*c;
            double t94102 = 1.0/pow(t94094,2.0/3.0);
            double t94103 = b4p*t94101*t94102;
            double t94104 = b2p*c*t94095;
            double t94105 = t94100+t94103+t94104+t94098;
            double t94106 = 1.0/pow(t94094,4.0/3.0);
            double t94107 = 1.0/c0p;
            double t94108 = 1.0/t94105;
            double t94109 = t94107*t94108*(1.0/2.0);
            double t94110 = t94109+1.0;
            double t94111 = a1p*c*t94095;
            double t94112 = t94111+1.0;
            double t94113 = rho_a[index]-rho_b[index];
            double t94114 = t94113*t94113;
            double t94115 = 1.0/t94094;
            double t94116 = t94113*t94115;
            double t94117 = two_13*2.0;
            double t94118 = t94117-2.0;
            double t94119 = 1.0/t94118;
            double t94120 = 1.0/c0f;
            double t94121 = b1f*t94097;
            double t94122 = b3f*t94099;
            double t94123 = b4f*t94101*t94102;
            double t94124 = b2f*c*t94095;
            double t94125 = t94121+t94122+t94123+t94124;
            double t94126 = 1.0/t94125;
            double t94127 = t94120*t94126*(1.0/2.0);
            double t94128 = t94127+1.0;
            double t94129 = log(t94128);
            double t94130 = a1f*c*t94095;
            double t94131 = t94130+1.0;
            double t94132 = log(t94110);
            double t94143 = c0f*t94131*t94129*2.0;
            double t94144 = c0p*t94112*t94132*2.0;
            double t94133 = t94143-t94144;
            double t94134 = t94116+1.0;
            double t94135 = pow(t94134,4.0/3.0);
            double t94136 = -t94116+1.0;
            double t94137 = pow(t94136,4.0/3.0);
            double t94138 = t94135+t94137-2.0;
            double t94139 = 1.0/(t94094*t94094);
            double t94140 = t94113*t94139;
            double t94141 = t94140+t94115;
            double t94142 = 1.0/(t94094*t94094*t94094*t94094);
            double t94145 = t94114*t94114;
            double t94146 = 1.0/pow(t94094,5.0/3.0);
            double t94147 = 1.0/sqrt(t94096);
            double t94148 = 1.0/t94110;
            double t94149 = 1.0/(t94105*t94105);
            double t94150 = b4p*t94101*t94146*(2.0/3.0);
            double t94151 = b2p*c*t94106*(1.0/3.0);
            double t94152 = b1p*c*t94106*t94147*(1.0/6.0);
            double t94153 = b3p*c*t94106*t94097*(1.0/2.0);
            double t94154 = t94150+t94151+t94152+t94153;
            double t94155 = 1.0/(t94094*t94094*t94094*t94094*t94094);
            double t94156 = 1.0/d2fz0;
            double t94157 = 1.0/Aa;
            double t94158 = b1a*t94097;
            double t94159 = b3a*t94099;
            double t94160 = b4a*t94101*t94102;
            double t94161 = b2a*c*t94095;
            double t94162 = t94160+t94161+t94158+t94159;
            double t94163 = 1.0/t94162;
            double t94164 = t94163*t94157*(1.0/2.0);
            double t94165 = t94164+1.0;
            double t94166 = log(t94165);
            double t94167 = a1a*c*t94095;
            double t94168 = t94167+1.0;
            double t94169 = pow(t94134,1.0/3.0);
            double t94170 = t94141*t94169*(4.0/3.0);
            double t94171 = pow(t94136,1.0/3.0);
            double t94235 = t94141*t94171*(4.0/3.0);
            double t94172 = t94170-t94235;
            double t94173 = t94142*t94145;
            double t94174 = t94173-1.0;
            double t94175 = 1.0/pow(rho_b[index],1.0/3.0);
            double t94176 = c*t94175;
            double t94177 = sqrt(t94176);
            double t94178 = b1f*t94177;
            double t94179 = pow(t94176,3.0/2.0);
            double t94180 = b3f*t94179;
            double t94181 = 1.0/pow(rho_b[index],2.0/3.0);
            double t94182 = b4f*t94101*t94181;
            double t94183 = b2f*c*t94175;
            double t94184 = t94180+t94182+t94183+t94178;
            double t94185 = 1.0/pow(rho_b[index],4.0/3.0);
            double t94186 = b1p*t94177;
            double t94187 = b3p*t94179;
            double t94188 = b4p*t94101*t94181;
            double t94189 = b2p*c*t94175;
            double t94190 = t94186+t94187+t94188+t94189;
            double t94191 = 1.0/pow(rho_b[index],5.0/3.0);
            double t94192 = 1.0/sqrt(t94176);
            double t94193 = 1.0/t94184;
            double t94194 = t94120*t94193*(1.0/2.0);
            double t94195 = t94194+1.0;
            double t94196 = 1.0/t94190;
            double t94197 = t94107*t94196*(1.0/2.0);
            double t94198 = t94197+1.0;
            double t94199 = a1p*c*t94175;
            double t94200 = t94199+1.0;
            double t94201 = 1.0/t94198;
            double t94202 = 1.0/(t94190*t94190);
            double t94203 = b4p*t94101*t94191*(2.0/3.0);
            double t94204 = b2p*c*t94185*(1.0/3.0);
            double t94205 = b1p*c*t94192*t94185*(1.0/6.0);
            double t94206 = b3p*c*t94185*t94177*(1.0/2.0);
            double t94207 = t94203+t94204+t94205+t94206;
            double t94208 = t94200*t94201*t94202*t94207;
            double t94209 = log(t94198);
            double t94210 = pow(2.0,1.0/3.0);
            double t94211 = t94210*2.0;
            double t94212 = t94211-2.0;
            double t94213 = log(t94195);
            double t94214 = a1f*c*t94175;
            double t94215 = t94214+1.0;
            double t94216 = a1p*c*c0p*t94132*t94106*(2.0/3.0);
            double t94217 = 1.0/t94195;
            double t94218 = 1.0/(t94184*t94184);
            double t94219 = b4f*t94101*t94191*(2.0/3.0);
            double t94220 = b2f*c*t94185*(1.0/3.0);
            double t94221 = b1f*c*t94192*t94185*(1.0/6.0);
            double t94222 = b3f*c*t94185*t94177*(1.0/2.0);
            double t94223 = t94220+t94221+t94222+t94219;
            double t94224 = a1f*c*c0f*t94213*t94185*(2.0/3.0);
            double t94225 = a1p*c*c0p*t94209*t94185*(2.0/3.0);
            double t94226 = gamma_bb[index]*gamma_bb[index];
            double t94227 = gcaa*gcaa;
            double t94228 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
               rho_b[index]*rho_b[index]);
            double t94229 = 1.0/pow(rho_b[index],1.6E1/3.0);
            double t94230 = 1.0/t94089;
            double t94231 = 1.0/t94093;
            double t94232 = 1.0/t94086;
            double t94233 = 1.0/pow(t94094,7.0/3.0);
            double t94234 = 1.0/pow(t94094,8.0/3.0);
            double t94236 = 1.0/t94128;
            double t94237 = 1.0/(t94125*t94125);
            double t94238 = b4f*t94101*t94146*(2.0/3.0);
            double t94239 = b2f*c*t94106*(1.0/3.0);
            double t94240 = b1f*c*t94106*t94147*(1.0/6.0);
            double t94241 = b3f*c*t94106*t94097*(1.0/2.0);
            double t94242 = t94240+t94241+t94238+t94239;
            double t94243 = t94131*t94242*t94236*t94237;
            double t94245 = t94112*t94154*t94148*t94149;
            double t94246 = a1f*c*c0f*t94106*t94129*(2.0/3.0);
            double t94244 = t94216+t94243-t94245-t94246;
            double t94247 = t94154*t94154;
            double t94248 = 1.0/pow(t94096,3.0/2.0);
            double t94249 = b4p*t94101*t94234*(1.0E1/9.0);
            double t94250 = b2p*c*t94233*(4.0/9.0);
            double t94251 = b1p*c*t94233*t94147*(2.0/9.0);
            double t94252 = b3p*c*t94233*t94097*(2.0/3.0);
            double t94253 = b3p*t94101*t94234*t94147*(1.0/1.2E1);
            double t94254 = t94250+t94251+t94252+t94253+t94249-b1p*t94101*t94234*t94248*(1.0/3.6E1);
            double t94255 = 1.0/(t94105*t94105*t94105);
            double t94256 = t94112*t94255*t94148*t94247*2.0;
            double t94257 = t94242*t94242;
            double t94258 = 1.0/(t94110*t94110);
            double t94259 = 1.0/(t94105*t94105*t94105*t94105);
            double t94260 = t94139*2.0;
            double t94261 = 1.0/(t94094*t94094*t94094);
            double t94262 = t94113*t94261*2.0;
            double t94263 = t94260+t94262;
            double t94264 = t94141*t94141;
            double t94265 = a1p*c*c0p*t94132*t94233*(8.0/9.0);
            double t94266 = 1.0/(t94094*t94094*t94094*t94094*t94094*t94094);
            double t94267 = t94113*t94114*t94142*4.0;
            double t94268 = t94145*t94155*4.0;
            double t94269 = t94267+t94268;
            double t94270 = t94263*t94169*(4.0/3.0);
            double t94271 = 1.0/pow(t94134,2.0/3.0);
            double t94272 = t94271*t94264*(4.0/9.0);
            double t94273 = 1.0/pow(t94136,2.0/3.0);
            double t94274 = t94264*t94273*(4.0/9.0);
            double t94275 = t94270+t94272+t94274-t94171*t94263*(4.0/3.0);
            double t94276 = 1.0/t94165;
            double t94277 = 1.0/(t94162*t94162);
            double t94278 = b4a*t94101*t94146*(2.0/3.0);
            double t94279 = b2a*c*t94106*(1.0/3.0);
            double t94280 = b1a*c*t94106*t94147*(1.0/6.0);
            double t94281 = b3a*c*t94106*t94097*(1.0/2.0);
            double t94282 = t94280+t94281+t94278+t94279;
            double t94283 = t94282*t94282;
            double t94284 = 1.0/pow(rho_b[index],7.0/3.0);
            double t94285 = 1.0/pow(t94176,3.0/2.0);
            double t94286 = t94223*t94223;
            double t94287 = t94207*t94207;
            double t94288 = 1.0/(t94190*t94190*t94190);
            double t94289 = t94200*t94201*t94287*t94288*2.0;
            double t94290 = b4p*t94101*t94083*(1.0E1/9.0);
            double t94291 = b2p*c*t94284*(4.0/9.0);
            double t94292 = b3p*t94101*t94083*t94192*(1.0/1.2E1);
            double t94293 = b1p*c*t94192*t94284*(2.0/9.0);
            double t94294 = b3p*c*t94284*t94177*(2.0/3.0);
            double t94448 = b1p*t94101*t94083*t94285*(1.0/3.6E1);
            double t94295 = t94290+t94291+t94292+t94293+t94294-t94448;
            double t94296 = 1.0/(t94198*t94198);
            double t94297 = 1.0/(t94190*t94190*t94190*t94190);
            double t94298 = a1p*c*c0p*t94209*t94284*(8.0/9.0);
            double t94429 = t94223*t94215*t94217*t94218;
            double t94299 = t94224-t94225+t94208-t94429;
            double t94300 = 1.0/pow(rho_a[index],1.0/3.0);
            double t94301 = c*t94300;
            double t94302 = sqrt(t94301);
            double t94303 = pow(t94301,3.0/2.0);
            double t94304 = 1.0/pow(rho_a[index],2.0/3.0);
            double t94305 = b1p*t94302;
            double t94306 = b3p*t94303;
            double t94307 = b4p*t94101*t94304;
            double t94308 = b2p*c*t94300;
            double t94309 = t94305+t94306+t94307+t94308;
            double t94310 = 1.0/t94309;
            double t94311 = t94310*t94107*(1.0/2.0);
            double t94312 = t94311+1.0;
            double t94313 = log(t94312);
            double t94314 = a1p*c*t94300;
            double t94315 = t94314+1.0;
            double t94316 = c0p*t94313*t94315*2.0;
            double t94317 = c0f*t94213*t94215*2.0;
            double t94319 = c0p*t94200*t94209*2.0;
            double t94318 = t94317-t94319;
            double t94320 = t94133*t94142*t94145*t94119*t94138;
            double t94321 = Aa*t94119*t94138*t94156*t94174*t94166*t94168*2.0;
            double t94322 = 1.0/(t94086*t94086);
            double t94323 = 1.0/pow(rho_b[index],2.2E1/3.0);
            double t94324 = gamma_bb[index]*gcab*t94080*(8.0/3.0);
            double t94325 = gamma_bb[index]*t94080*t94077*t94078*(8.0/3.0);
            double t94326 = t94324+t94325;
            double t94327 = 1.0/(t94093*t94093);
            double t94328 = 1.0/pow(rho_b[index],1.4E1/3.0);
            double t94329 = 1.0/(t94089*t94089);
            double t94330 = gamma_bb[index]*gcab*t94080*4.0;
            double t94331 = gamma_bb[index]*gcab*t94080*t94077*t94079*4.0;
            double t94332 = gamma_bb[index]*t94080*t94077*t94078*8.0;
            double t94333 = t94330+t94331+t94332;
            double t94334 = pow(rho_b[index],5.0/3.0);
            double t94335 = 1.0/tau_b[index];
            double t94336 = C_k*t94334*t94335;
            double t94337 = t94336-1.0;
            double t94338 = t94337*t94337;
            double t94339 = t94336+1.0;
            double t94340 = t94338*t94338;
            double t94341 = gx*gx;
            double t94342 = gamma_bb[index]*gx*t94083;
            double t94343 = t94342+1.0;
            double t94344 = 1.0/t94343;
            double t94345 = gamma_bb[index]*gx*t94083*3.0;
            double t94346 = gamma_bb[index]*gx*t94341*t94226*t94228;
            double t94347 = t94341*t94226*t94229*3.0;
            double t94348 = t94345+t94346+t94347+1.0;
            double t94349 = 1.0/t94348;
            double t94350 = gamma_bb[index]*gx*t94083*2.0;
            double t94351 = t94341*t94226*t94229;
            double t94352 = t94350+t94351+1.0;
            double t94353 = 1.0/t94352;
            double t94354 = cxnl1*gamma_bb[index]*gx*t94083*t94344;
            double t94355 = cxnl3*gamma_bb[index]*gx*t94341*t94226*t94228*t94349;
            double t94356 = cxnl2*t94341*t94226*t94353*t94229;
            double t94357 = cxnl0+t94354+t94355+t94356;
            double t94358 = 1.0/t94339;
            double t94359 = pow(rho_b[index],4.0/3.0);
            double t94360 = 1.0/(t94339*t94339*t94339);
            double t94361 = 1.0/(t94339*t94339*t94339*t94339*t94339);
            double t94362 = C_k*C_k;
            double t94363 = 1.0/(tau_b[index]*tau_b[index]);
            double t94364 = 1.0/(t94339*t94339*t94339*t94339);
            double t94365 = 1.0/(t94339*t94339*t94339*t94339*t94339*t94339);
            double t94366 = 1.0/(t94339*t94339);
            double t94367 = t94337*t94358;
            double t94368 = t94340*t94361*t94337;
            double t94396 = t94360*t94337*t94338*2.0;
            double t94369 = t94367+t94368-t94396;
            double t94370 = 1.0/pow(rho_b[index],1.0E1);
            double t94373 = 1.0/pow(rho_b[index],1.9E1/3.0);
            double t94379 = gamma_bb[index]*gx*t94080*(1.6E1/3.0);
            double t94380 = t94341*t94226*t94373*(1.6E1/3.0);
            double t94371 = t94380+t94379;
            double t94372 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
               rho_b[index]*rho_b[index]*rho_b[index]);
            double t94374 = 1.0/(t94348*t94348);
            double t94375 = gamma_bb[index]*gx*t94080*8.0;
            double t94376 = gamma_bb[index]*gx*t94341*t94226*t94372*8.0;
            double t94377 = t94341*t94226*t94373*1.6E1;
            double t94378 = t94375+t94376+t94377;
            double t94381 = 1.0/(t94352*t94352);
            double t94382 = pow(rho_b[index],2.0/3.0);
            double t94383 = 1.0/(t94343*t94343);
            double t94384 = 1.0/(t94343*t94343*t94343);
            double t94385 = t94371*t94371;
            double t94386 = 1.0/(t94352*t94352*t94352);
            double t94387 = gamma_bb[index]*gx*t94328*(8.8E1/3.0);
            double t94388 = gamma_bb[index]*gx*t94341*t94226*t94370*7.2E1;
            double t94389 = t94323*t94341*t94226*(3.04E2/3.0);
            double t94390 = t94387+t94388+t94389;
            double t94391 = t94378*t94378;
            double t94392 = 1.0/(t94348*t94348*t94348);
            double t94393 = gamma_bb[index]*gx*t94328*(1.76E2/9.0);
            double t94394 = t94323*t94341*t94226*(3.04E2/9.0);
            double t94395 = t94393+t94394;
            double t94397 = cxnl1*gamma_bb[index]*gx*t94080*t94344*(8.0/3.0);
            double t94398 = cxnl3*gamma_bb[index]*gx*t94341*t94226*t94372*t94349*8.0;
            double t94399 = cxnl2*t94341*t94226*t94353*t94373*(1.6E1/3.0);
            double t94400 = t94397+t94398+t94399-cxnl1*t94341*t94226*t94373*t94383*(8.0/3.0)-cxnl2*t94341*t94226* \
               t94371*t94381*t94229-cxnl3*gamma_bb[index]*gx*t94341*t94226*t94228*t94374*t94378;
            double t94401 = C_k*t94335*t94382*t94358*(5.0/3.0);
            double t94402 = C_k*t94335*t94337*t94364*t94382*t94338*1.0E1;
            double t94403 = C_k*t94340*t94361*t94335*t94382*(2.5E1/3.0);
            double t94404 = t94401+t94402+t94403-C_k*t94360*t94335*t94382*t94338*1.0E1-C_k*t94335*t94337*t94382* \
               t94366*(5.0/3.0)-C_k*t94340*t94335*t94337*t94382*t94365*(2.5E1/3.0);
            double t94405 = t94212*t94119*t94318;
            double t94406 = t94405+t94319;
            double t94407 = gamma_bb[index]*gcaa*t94083;
            double t94408 = t94407+1.0;
            double t94409 = 1.0/t94408;
            double t94410 = gamma_bb[index]*gcaa*t94083*3.0;
            double t94411 = gamma_bb[index]*gcaa*t94226*t94227*t94228;
            double t94412 = t94226*t94227*t94229*3.0;
            double t94413 = t94410+t94411+t94412+1.0;
            double t94414 = 1.0/t94413;
            double t94415 = gamma_bb[index]*gcaa*t94083*2.0;
            double t94416 = t94226*t94227*t94229;
            double t94417 = t94415+t94416+1.0;
            double t94418 = 1.0/t94417;
            double t94419 = 1.0/(t94408*t94408);
            double t94420 = gamma_bb[index]*gcaa*t94080*(1.6E1/3.0);
            double t94421 = t94226*t94227*t94373*(1.6E1/3.0);
            double t94422 = t94420+t94421;
            double t94423 = gamma_bb[index]*gcaa*t94080*8.0;
            double t94424 = gamma_bb[index]*gcaa*t94226*t94227*t94372*8.0;
            double t94425 = t94226*t94227*t94373*1.6E1;
            double t94426 = t94423+t94424+t94425;
            double t94427 = 1.0/(t94413*t94413);
            double t94428 = 1.0/(t94417*t94417);
            double t94430 = t94212*t94119*t94299;
            double t94431 = ccaa1*gamma_bb[index]*gcaa*t94080*t94409*(8.0/3.0);
            double t94432 = ccaa3*gamma_bb[index]*gcaa*t94414*t94226*t94227*t94372*8.0;
            double t94433 = ccaa2*t94226*t94227*t94373*t94418*(1.6E1/3.0);
            double t94434 = t94431+t94432+t94433-ccaa1*t94226*t94227*t94373*t94419*(8.0/3.0)-ccaa2*t94422*t94226* \
               t94227*t94229*t94428-ccaa3*gamma_bb[index]*gcaa*t94226*t94227*t94228*t94426*t94427;
            double t94435 = t94430+t94225-t94208;
            double t94436 = ccaa1*gamma_bb[index]*gcaa*t94083*t94409;
            double t94437 = ccaa3*gamma_bb[index]*gcaa*t94414*t94226*t94227*t94228;
            double t94438 = ccaa2*t94226*t94227*t94229*t94418;
            double t94439 = ccaa0+t94436+t94437+t94438;
            double t94440 = 1.0/(t94184*t94184*t94184);
            double t94441 = b4f*t94101*t94083*(1.0E1/9.0);
            double t94442 = b2f*c*t94284*(4.0/9.0);
            double t94443 = b3f*t94101*t94083*t94192*(1.0/1.2E1);
            double t94444 = b1f*c*t94192*t94284*(2.0/9.0);
            double t94445 = b3f*c*t94284*t94177*(2.0/3.0);
            double t94446 = t94441+t94442+t94443+t94444+t94445-b1f*t94101*t94083*t94285*(1.0/3.6E1);
            double t94447 = t94215*t94217*t94218*t94446;
            double t94449 = t94200*t94201*t94202*t94295;
            double t94450 = 1.0/(t94195*t94195);
            double t94451 = 1.0/(t94184*t94184*t94184*t94184);
            double t94452 = t94120*t94215*t94450*t94451*t94286*(1.0/2.0);
            double t94453 = t94200*t94107*t94287*t94296*t94297*(1.0/2.0);
            double t94454 = a1f*c*t94223*t94217*t94218*t94185*(2.0/3.0);
            double t94455 = a1p*c*t94201*t94202*t94207*t94185*(2.0/3.0);
            v_rho_b_rho_b_[index] = (ccab1*gamma_bb[index]*gcab*t94232*t94080*(4.0/3.0)-ccab2*t94326*t94077*t94329* \
               t94079+ccab2*gamma_bb[index]*t94230*t94080*t94077*t94078*(8.0/3.0)-ccab1*gamma_bb[index]*t94322*t94080* \
               t94077*t94078*(4.0/3.0)+ccab3*gamma_bb[index]*gcab*t94231*t94080*t94077*t94079*4.0-ccab3*gcab*t94333* \
               t94327*t94077*t94078*t94079)*(t94320+t94321+t94144+rho_b[index]*(t94225-t94208+t94212*t94119*(t94224+ \
               t94208-t94223*t94215*t94217*t94218-a1p*c*c0p*t94209*t94185*(2.0/3.0)))-t94094*(t94216-t94112*t94154* \
               t94148*t94149+t94133*t94142*t94145*t94172*t94119-t94142*t94145*t94244*t94119*t94138+t94133*t94145* \
               t94119*t94155*t94138*4.0+t94113*t94114*t94133*t94142*t94119*t94138*4.0+Aa*t94172*t94119*t94156*t94174* \
               t94166*t94168*2.0+Aa*t94119*t94138*t94156*t94166*t94168*t94269*2.0-t94119*t94138*t94156*t94174*t94282* \
               t94168*t94276*t94277+Aa*a1a*c*t94106*t94119*t94138*t94156*t94174*t94166*(2.0/3.0))-c0p*t94200*t94209* \
               2.0-t94212*t94119*t94318)*2.0+t94406*t94434*2.0+t94435*t94439*2.0+(rho_b[index]*t94406+rho_a[index]* \
               (t94316-t94212*t94119*(t94316-c0f*log((t94120*(1.0/2.0))/(b1f*t94302+b3f*t94303+b2f*c*t94300+b4f*t94101* \
               t94304)+1.0)*(a1f*c*t94300+1.0)*2.0))-t94094*(t94320+t94321+t94144))*(-ccab2*t94077*t94329*t94079* \
               (gamma_bb[index]*gcab*t94328*(8.8E1/9.0)+t94323*t94226*t94077*(3.2E1/9.0)+gamma_bb[index]*t94328*t94077* \
               t94078*(8.8E1/9.0))+ccab2*(t94326*t94326)*t94077*t94079*1.0/(t94089*t94089*t94089)*2.0+ccab1*gamma_bb[index]* \
               gcab*t94232*t94328*(4.4E1/9.0)+ccab2*t94230*t94323*t94226*t94077*(3.2E1/9.0)-ccab1*t94322*t94323*t94226* \
               t94077*(3.2E1/9.0)+ccab2*gamma_bb[index]*t94230*t94328*t94077*t94078*(8.8E1/9.0)-ccab1*gamma_bb[index]* \
               t94322*t94328*t94077*t94078*(4.4E1/9.0)+ccab3*gcab*(t94333*t94333)*1.0/(t94093*t94093*t94093)*t94077* \
               t94078*t94079*2.0+ccab3*gamma_bb[index]*gcab*t94231*t94328*t94077*t94079*(4.4E1/3.0)-ccab2*gamma_bb[index]* \
               t94080*t94326*t94077*t94329*t94078*(1.6E1/3.0)+ccab3*gcab*t94231*t94323*t94226*t94077*t94078*(3.2E1/ \
               3.0)+ccab1*gcab*t94323*t94226*t94077*1.0/(t94086*t94086*t94086)*t94078*(3.2E1/9.0)-ccab3*gcab*t94327* \
               t94077*t94078*t94079*(gamma_bb[index]*gcab*t94328*(4.4E1/3.0)+t94323*t94226*t94077*(3.2E1/3.0)+gamma_bb[index]* \
               t94328*t94077*t94078*(8.8E1/3.0)+gamma_bb[index]*gcab*t94328*t94077*t94079*(4.4E1/3.0)+gcab*t94323* \
               t94226*t94077*t94078*(3.2E1/3.0))-ccab3*gamma_bb[index]*gcab*t94080*t94333*t94327*t94077*t94079*8.0) \
               +(X-1.0)*(c0*t94359*(t94357*(t94362*t94363*t94366*t94359*(5.0E1/9.0)-C_k*t94335*t94175*t94358*(1.0E1/ \
               9.0)-C_k*t94340*t94361*t94335*t94175*(5.0E1/9.0)+C_k*t94360*t94335*t94175*t94338*(2.0E1/3.0)+C_k*t94335* \
               t94175*t94337*t94366*(1.0E1/9.0)+t94340*t94362*t94363*t94365*t94359*(1.25E3/9.0)+t94360*t94362*t94363* \
               t94337*t94359*(2.5E2/9.0)-t94362*t94363*t94364*t94338*t94359*1.0E2+t94361*t94362*t94363*t94337*t94338* \
               t94359*(1.0E2/9.0)-t94340*t94362*t94363*t94337*1.0/(t94339*t94339*t94339*t94339*t94339*t94339*t94339) \
               *t94359*(2.5E2/3.0)+C_k*t94340*t94335*t94175*t94337*t94365*(5.0E1/9.0)-C_k*t94335*t94175*t94337*t94364* \
               t94338*(2.0E1/3.0))-t94369*(cxnl1*gamma_bb[index]*gx*t94344*t94328*(8.8E1/9.0)+cxnl2*t94323*t94341* \
               t94226*t94353*(3.04E2/9.0)-cxnl1*t94323*t94341*t94226*t94383*2.4E1-cxnl2*t94341*t94226*t94371*t94381* \
               t94373*(3.2E1/3.0)-cxnl2*t94341*t94226*t94381*t94229*t94395+cxnl2*t94341*t94226*t94229*t94385*t94386* \
               2.0+cxnl1*gamma_bb[index]*gx*t94341*t94226*t94370*t94384*(1.28E2/9.0)+cxnl3*gamma_bb[index]*gx*t94341* \
               t94226*t94370*t94349*7.2E1-cxnl3*gamma_bb[index]*gx*t94341*t94226*t94228*t94390*t94374+cxnl3*gamma_bb[index]* \
               gx*t94341*t94226*t94228*t94391*t94392*2.0-cxnl3*gamma_bb[index]*gx*t94341*t94226*t94372*t94374*t94378* \
               1.6E1)+t94400*t94404*2.0-cx1*gamma_bb[index]*gx*t94344*t94328*(8.8E1/9.0)+cx1*t94323*t94341*t94226* \
               t94383*2.4E1-cx2*t94323*t94341*t94226*t94353*(3.04E2/9.0)+cx2*t94341*t94226*t94371*t94381*t94373*(3.2E1/ \
               3.0)+cx2*t94341*t94226*t94381*t94229*t94395-cx2*t94341*t94226*t94229*t94385*t94386*2.0-cx1*gamma_bb[index]* \
               gx*t94341*t94226*t94370*t94384*(1.28E2/9.0)-cx3*gamma_bb[index]*gx*t94341*t94226*t94370*t94349*7.2E1+ \
               cx3*gamma_bb[index]*gx*t94341*t94226*t94228*t94390*t94374-cx3*gamma_bb[index]*gx*t94341*t94226*t94228* \
               t94391*t94392*2.0+cx3*gamma_bb[index]*gx*t94341*t94226*t94372*t94374*t94378*1.6E1)+c0*pow(rho_b[index],1.0/ \
               3.0)*(t94400*t94369-t94404*t94357+cx1*gamma_bb[index]*gx*t94080*t94344*(8.0/3.0)-cx1*t94341*t94226* \
               t94373*t94383*(8.0/3.0)+cx2*t94341*t94226*t94353*t94373*(1.6E1/3.0)-cx2*t94341*t94226*t94371*t94381* \
               t94229+cx3*gamma_bb[index]*gx*t94341*t94226*t94372*t94349*8.0-cx3*gamma_bb[index]*gx*t94341*t94226* \
               t94228*t94374*t94378)*(8.0/3.0)-c0*t94181*(cx0+t94357*t94369+cx1*gamma_bb[index]*gx*t94083*t94344+ \
               cx2*t94341*t94226*t94353*t94229+cx3*gamma_bb[index]*gx*t94341*t94226*t94228*t94349)*(4.0/9.0))+(ccab0+ \
               ccab1*gcab*t94232*t94078+ccab2*t94230*t94077*t94079+ccab3*gcab*t94231*t94077*t94078*t94079)*(-rho_b[index]* \
               (t94453+t94455+t94449-t94289-t94298+t94212*t94119*(t94452+t94454+t94447+t94289+t94298-t94200*t94201* \
               t94202*t94295-t94215*t94440*t94217*t94286*2.0-a1f*c*c0f*t94213*t94284*(8.0/9.0)-t94200*t94107*t94287* \
               t94296*t94297*(1.0/2.0)-a1p*c*t94201*t94202*t94207*t94185*(2.0/3.0)))-t94094*(t94256+t94265-t94112* \
               t94254*t94148*t94149-t94142*t94145*t94119*t94138*(t94256+t94265-t94112*t94254*t94148*t94149-t94131* \
               1.0/(t94125*t94125*t94125)*t94236*t94257*2.0+t94131*t94236*t94237*(b2f*c*t94233*(4.0/9.0)+b4f*t94101* \
               t94234*(1.0E1/9.0)+b1f*c*t94233*t94147*(2.0/9.0)+b3f*c*t94233*t94097*(2.0/3.0)-b1f*t94101*t94234*t94248* \
               (1.0/3.6E1)+b3f*t94101*t94234*t94147*(1.0/1.2E1))+t94120*t94131*1.0/(t94125*t94125*t94125*t94125)* \
               1.0/(t94128*t94128)*t94257*(1.0/2.0)-a1f*c*c0f*t94233*t94129*(8.0/9.0)-t94112*t94107*t94247*t94258* \
               t94259*(1.0/2.0)+a1f*c*t94106*t94242*t94236*t94237*(2.0/3.0)-a1p*c*t94106*t94154*t94148*t94149*(2.0/ \
               3.0))+t94114*t94133*t94142*t94119*t94138*1.2E1-t94142*t94145*t94172*t94244*t94119*2.0+t94133*t94142* \
               t94145*t94119*t94275+t94133*t94145*t94172*t94119*t94155*8.0+t94133*t94145*t94119*t94138*t94266*2.0E1- \
               t94145*t94244*t94119*t94155*t94138*8.0-t94112*t94107*t94247*t94258*t94259*(1.0/2.0)+t94113*t94114* \
               t94133*t94142*t94172*t94119*8.0-t94113*t94114*t94142*t94244*t94119*t94138*8.0+t94113*t94114*t94133* \
               t94119*t94155*t94138*3.2E1-a1p*c*t94106*t94154*t94148*t94149*(2.0/3.0)+Aa*t94119*t94156*t94174*t94166* \
               t94275*t94168*2.0+Aa*t94172*t94119*t94156*t94166*t94168*t94269*4.0+Aa*t94119*t94138*t94156*t94166* \
               t94168*(t94114*t94142*1.2E1+t94145*t94266*2.0E1+t94113*t94114*t94155*3.2E1)*2.0-t94172*t94119*t94156* \
               t94174*t94282*t94168*t94276*t94277*2.0-t94119*t94138*t94156*t94282*t94168*t94276*t94277*t94269*2.0+ \
               1.0/(t94162*t94162*t94162)*t94119*t94138*t94156*t94174*t94283*t94168*t94276*2.0-t94119*t94138*t94156* \
               t94174*t94168*t94276*t94277*(b2a*c*t94233*(4.0/9.0)+b4a*t94101*t94234*(1.0E1/9.0)+b1a*c*t94233*t94147* \
               (2.0/9.0)+b3a*c*t94233*t94097*(2.0/3.0)-b1a*t94101*t94234*t94248*(1.0/3.6E1)+b3a*t94101*t94234*t94147* \
               (1.0/1.2E1))+Aa*a1a*c*t94106*t94172*t94119*t94156*t94174*t94166*(4.0/3.0)+Aa*a1a*c*t94233*t94119*t94138* \
               t94156*t94174*t94166*(8.0/9.0)+Aa*a1a*c*t94106*t94119*t94138*t94156*t94166*t94269*(4.0/3.0)-1.0/(t94162* \
               t94162*t94162*t94162)*t94119*t94138*t94156*1.0/(t94165*t94165)*t94174*t94157*t94283*t94168*(1.0/2.0) \
               -a1a*c*t94106*t94119*t94138*t94156*t94174*t94282*t94276*t94277*(2.0/3.0))-t94212*t94119*t94299*2.0+ \
               t94200*t94201*t94202*t94207*2.0-t94112*t94154*t94148*t94149*2.0+a1p*c*c0p*t94132*t94106*(4.0/3.0)- \
               a1p*c*c0p*t94209*t94185*(4.0/3.0)+t94133*t94142*t94145*t94172*t94119*2.0-t94142*t94145*t94244*t94119* \
               t94138*2.0+t94133*t94145*t94119*t94155*t94138*8.0+t94113*t94114*t94133*t94142*t94119*t94138*8.0+Aa* \
               t94172*t94119*t94156*t94174*t94166*t94168*4.0+Aa*t94119*t94138*t94156*t94166*t94168*t94269*4.0-t94119* \
               t94138*t94156*t94174*t94282*t94168*t94276*t94277*2.0+Aa*a1a*c*t94106*t94119*t94138*t94156*t94174*t94166* \
               (4.0/3.0))-rho_b[index]*t94406*(ccaa1*gamma_bb[index]*gcaa*t94328*t94409*(8.8E1/9.0)-ccaa1*t94323* \
               t94226*t94227*t94419*2.4E1+ccaa2*t94323*t94226*t94227*t94418*(3.04E2/9.0)-ccaa2*t94422*t94226*t94227* \
               t94373*t94428*(3.2E1/3.0)-ccaa2*t94226*t94227*t94229*t94428*(gamma_bb[index]*gcaa*t94328*(1.76E2/9.0) \
               +t94323*t94226*t94227*(3.04E2/9.0))+ccaa2*(t94422*t94422)*t94226*t94227*1.0/(t94417*t94417*t94417) \
               *t94229*2.0+ccaa3*gamma_bb[index]*gcaa*t94414*t94226*t94370*t94227*7.2E1+ccaa1*gamma_bb[index]*gcaa* \
               t94226*t94370*t94227*1.0/(t94408*t94408*t94408)*(1.28E2/9.0)+ccaa3*gamma_bb[index]*gcaa*1.0/(t94413* \
               t94413*t94413)*t94226*t94227*t94228*(t94426*t94426)*2.0-ccaa3*gamma_bb[index]*gcaa*t94226*t94227*t94228* \
               t94427*(gamma_bb[index]*gcaa*t94328*(8.8E1/3.0)+t94323*t94226*t94227*(3.04E2/3.0)+gamma_bb[index]* \
               gcaa*t94226*t94370*t94227*7.2E1)-ccaa3*gamma_bb[index]*gcaa*t94226*t94227*t94372*t94426*t94427*1.6E1) \
               +rho_b[index]*t94439*(t94453+t94455+t94449-t94289-t94298+t94212*t94119*(t94452-t94453+t94454-t94455+ \
               t94447-t94449+t94289+t94298-t94215*t94440*t94217*t94286*2.0-a1f*c*c0f*t94213*t94284*(8.0/9.0)))-rho_b[index]* \
               t94434*t94435*2.0;
        } else if (rho_a[index] > cutoff_) {
            v_rho_b_rho_b_[index] = 0.0;
        } else if (rho_b[index] > cutoff_) {
            double t96284 = 1.0/pow(rho_b[index],1.0/3.0);
            double t96285 = c*t96284;
            double t96286 = sqrt(t96285);
            double t96287 = b1f*t96286;
            double t96288 = pow(t96285,3.0/2.0);
            double t96289 = b3f*t96288;
            double t96290 = c*c;
            double t96291 = 1.0/pow(rho_b[index],2.0/3.0);
            double t96292 = b4f*t96290*t96291;
            double t96293 = b2f*c*t96284;
            double t96294 = t96292+t96293+t96287+t96289;
            double t96295 = 1.0/pow(rho_b[index],4.0/3.0);
            double t96296 = b1p*t96286;
            double t96297 = b3p*t96288;
            double t96298 = b4p*t96290*t96291;
            double t96299 = b2p*c*t96284;
            double t96300 = t96296+t96297+t96298+t96299;
            double t96301 = 1.0/pow(rho_b[index],5.0/3.0);
            double t96302 = 1.0/sqrt(t96285);
            double t96303 = 1.0/c0f;
            double t96304 = 1.0/t96294;
            double t96305 = t96303*t96304*(1.0/2.0);
            double t96306 = t96305+1.0;
            double t96307 = 1.0/c0p;
            double t96308 = 1.0/t96300;
            double t96309 = t96307*t96308*(1.0/2.0);
            double t96310 = t96309+1.0;
            double t96311 = a1p*c*t96284;
            double t96312 = t96311+1.0;
            double t96313 = 1.0/t96310;
            double t96314 = 1.0/(t96300*t96300);
            double t96315 = b4p*t96301*t96290*(2.0/3.0);
            double t96316 = b2p*c*t96295*(1.0/3.0);
            double t96317 = b1p*c*t96302*t96295*(1.0/6.0);
            double t96318 = b3p*c*t96286*t96295*(1.0/2.0);
            double t96319 = t96315+t96316+t96317+t96318;
            double t96320 = t96312*t96313*t96314*t96319;
            double t96321 = log(t96310);
            double t96322 = 1.0/pow(rho_b[index],8.0/3.0);
            double t96323 = gamma_bb[index]*gamma_bb[index];
            double t96324 = gcaa*gcaa;
            double t96325 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
               rho_b[index]*rho_b[index]);
            double t96326 = 1.0/pow(rho_b[index],1.6E1/3.0);
            double t96327 = pow(2.0,1.0/3.0);
            double t96328 = t96327*2.0;
            double t96329 = t96328-2.0;
            double t96330 = two_13*2.0;
            double t96331 = t96330-2.0;
            double t96332 = 1.0/t96331;
            double t96333 = log(t96306);
            double t96334 = a1f*c*t96284;
            double t96335 = t96334+1.0;
            double t96336 = gamma_bb[index]*gcaa*t96322;
            double t96337 = t96336+1.0;
            double t96338 = 1.0/t96337;
            double t96339 = gamma_bb[index]*gcaa*t96322*3.0;
            double t96340 = gamma_bb[index]*gcaa*t96323*t96324*t96325;
            double t96341 = t96323*t96324*t96326*3.0;
            double t96342 = t96340+t96341+t96339+1.0;
            double t96343 = 1.0/t96342;
            double t96344 = gamma_bb[index]*gcaa*t96322*2.0;
            double t96345 = t96323*t96324*t96326;
            double t96346 = t96344+t96345+1.0;
            double t96347 = 1.0/t96346;
            double t96348 = 1.0/pow(rho_b[index],1.9E1/3.0);
            double t96349 = 1.0/pow(rho_b[index],1.1E1/3.0);
            double t96350 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
               rho_b[index]*rho_b[index]*rho_b[index]);
            double t96351 = c0f*t96333*t96335*2.0;
            double t96352 = c0p*t96312*t96321*2.0;
            double t96353 = 1.0/pow(rho_b[index],1.0E1);
            double t96354 = 1.0/pow(rho_b[index],2.2E1/3.0);
            double t96355 = 1.0/(t96337*t96337);
            double t96356 = gamma_bb[index]*gcaa*t96349*(1.6E1/3.0);
            double t96357 = t96323*t96324*t96348*(1.6E1/3.0);
            double t96358 = t96356+t96357;
            double t96359 = gamma_bb[index]*gcaa*t96349*8.0;
            double t96360 = gamma_bb[index]*gcaa*t96323*t96350*t96324*8.0;
            double t96361 = t96323*t96324*t96348*1.6E1;
            double t96362 = t96360+t96361+t96359;
            double t96363 = 1.0/(t96342*t96342);
            double t96364 = 1.0/pow(rho_b[index],1.4E1/3.0);
            double t96365 = 1.0/(t96346*t96346);
            double t96366 = 1.0/t96306;
            double t96367 = 1.0/(t96294*t96294);
            double t96368 = b4f*t96301*t96290*(2.0/3.0);
            double t96369 = b2f*c*t96295*(1.0/3.0);
            double t96370 = b1f*c*t96302*t96295*(1.0/6.0);
            double t96371 = b3f*c*t96286*t96295*(1.0/2.0);
            double t96372 = t96370+t96371+t96368+t96369;
            double t96373 = a1f*c*c0f*t96333*t96295*(2.0/3.0);
            double t96374 = a1p*c*c0p*t96321*t96295*(2.0/3.0);
            double t96375 = ccaa1*gamma_bb[index]*gcaa*t96338*t96349*(8.0/3.0);
            double t96376 = ccaa3*gamma_bb[index]*gcaa*t96323*t96350*t96324*t96343*8.0;
            double t96377 = ccaa2*t96323*t96324*t96347*t96348*(1.6E1/3.0);
            double t96378 = t96375+t96376+t96377-ccaa1*t96323*t96324*t96355*t96348*(8.0/3.0)-ccaa2*t96323*t96324* \
               t96326*t96365*t96358-ccaa3*gamma_bb[index]*gcaa*t96323*t96324*t96325*t96362*t96363;
            double t96379 = ccaa1*gamma_bb[index]*gcaa*t96322*t96338;
            double t96380 = ccaa3*gamma_bb[index]*gcaa*t96323*t96324*t96325*t96343;
            double t96381 = ccaa2*t96323*t96324*t96326*t96347;
            double t96382 = ccaa0+t96380+t96381+t96379;
            double t96383 = 1.0/pow(rho_b[index],7.0/3.0);
            double t96384 = 1.0/pow(t96285,3.0/2.0);
            double t96385 = t96372*t96372;
            double t96386 = t96319*t96319;
            double t96387 = 1.0/(t96300*t96300*t96300);
            double t96388 = t96312*t96313*t96386*t96387*2.0;
            double t96389 = b4p*t96322*t96290*(1.0E1/9.0);
            double t96390 = b2p*c*t96383*(4.0/9.0);
            double t96391 = b3p*t96302*t96322*t96290*(1.0/1.2E1);
            double t96392 = b1p*c*t96302*t96383*(2.0/9.0);
            double t96393 = b3p*c*t96383*t96286*(2.0/3.0);
            double t96394 = t96390+t96391+t96392+t96393+t96389-b1p*t96322*t96290*t96384*(1.0/3.6E1);
            double t96395 = 1.0/(t96310*t96310);
            double t96396 = 1.0/(t96300*t96300*t96300*t96300);
            double t96397 = a1p*c*c0p*t96321*t96383*(8.0/9.0);
            double t96398 = pow(rho_b[index],5.0/3.0);
            double t96399 = 1.0/tau_b[index];
            double t96400 = C_k*t96398*t96399;
            double t96401 = t96400-1.0;
            double t96402 = t96401*t96401;
            double t96403 = t96400+1.0;
            double t96404 = t96402*t96402;
            double t96405 = gx*gx;
            double t96406 = gamma_bb[index]*gx*t96322;
            double t96407 = t96406+1.0;
            double t96408 = 1.0/t96407;
            double t96409 = gamma_bb[index]*gx*t96322*3.0;
            double t96410 = gamma_bb[index]*gx*t96323*t96405*t96325;
            double t96411 = t96323*t96405*t96326*3.0;
            double t96412 = t96410+t96411+t96409+1.0;
            double t96413 = 1.0/t96412;
            double t96414 = gamma_bb[index]*gx*t96322*2.0;
            double t96415 = t96323*t96405*t96326;
            double t96416 = t96414+t96415+1.0;
            double t96417 = 1.0/t96416;
            double t96418 = X-1.0;
            double t96419 = cxnl1*gamma_bb[index]*gx*t96322*t96408;
            double t96420 = cxnl3*gamma_bb[index]*gx*t96323*t96413*t96405*t96325;
            double t96421 = cxnl2*t96323*t96405*t96326*t96417;
            double t96422 = cxnl0+t96420+t96421+t96419;
            double t96423 = 1.0/t96403;
            double t96424 = pow(rho_b[index],4.0/3.0);
            double t96425 = 1.0/(t96403*t96403*t96403);
            double t96426 = 1.0/(t96403*t96403*t96403*t96403*t96403);
            double t96427 = C_k*C_k;
            double t96428 = 1.0/(tau_b[index]*tau_b[index]);
            double t96429 = 1.0/(t96403*t96403*t96403*t96403);
            double t96430 = 1.0/(t96403*t96403*t96403*t96403*t96403*t96403);
            double t96431 = 1.0/(t96403*t96403);
            double t96432 = t96401*t96423;
            double t96433 = t96401*t96404*t96426;
            double t96458 = t96401*t96402*t96425*2.0;
            double t96434 = t96432+t96433-t96458;
            double t96441 = gamma_bb[index]*gx*t96349*(1.6E1/3.0);
            double t96442 = t96323*t96405*t96348*(1.6E1/3.0);
            double t96435 = t96441+t96442;
            double t96436 = 1.0/(t96412*t96412);
            double t96437 = gamma_bb[index]*gx*t96349*8.0;
            double t96438 = gamma_bb[index]*gx*t96323*t96350*t96405*8.0;
            double t96439 = t96323*t96405*t96348*1.6E1;
            double t96440 = t96437+t96438+t96439;
            double t96443 = 1.0/(t96416*t96416);
            double t96444 = pow(rho_b[index],2.0/3.0);
            double t96445 = 1.0/(t96407*t96407);
            double t96446 = 1.0/(t96407*t96407*t96407);
            double t96447 = t96435*t96435;
            double t96448 = 1.0/(t96416*t96416*t96416);
            double t96449 = gamma_bb[index]*gx*t96364*(8.8E1/3.0);
            double t96450 = gamma_bb[index]*gx*t96323*t96405*t96353*7.2E1;
            double t96451 = t96323*t96405*t96354*(3.04E2/3.0);
            double t96452 = t96450+t96451+t96449;
            double t96453 = t96440*t96440;
            double t96454 = 1.0/(t96412*t96412*t96412);
            double t96455 = gamma_bb[index]*gx*t96364*(1.76E2/9.0);
            double t96456 = t96323*t96405*t96354*(3.04E2/9.0);
            double t96457 = t96455+t96456;
            double t96459 = cxnl1*gamma_bb[index]*gx*t96408*t96349*(8.0/3.0);
            double t96460 = cxnl3*gamma_bb[index]*gx*t96323*t96350*t96413*t96405*8.0;
            double t96461 = cxnl2*t96323*t96405*t96417*t96348*(1.6E1/3.0);
            double t96462 = t96460+t96461+t96459-cxnl1*t96323*t96405*t96445*t96348*(8.0/3.0)-cxnl2*t96323*t96405* \
               t96326*t96443*t96435-cxnl3*gamma_bb[index]*gx*t96323*t96440*t96405*t96325*t96436;
            double t96463 = C_k*t96423*t96444*t96399*(5.0/3.0);
            double t96464 = C_k*t96401*t96402*t96444*t96429*t96399*1.0E1;
            double t96465 = C_k*t96404*t96426*t96444*t96399*(2.5E1/3.0);
            double t96466 = t96463+t96464+t96465-C_k*t96401*t96431*t96444*t96399*(5.0/3.0)-C_k*t96402*t96425* \
               t96444*t96399*1.0E1-C_k*t96401*t96430*t96404*t96444*t96399*(2.5E1/3.0);
            v_rho_b_rho_b_[index] = t96378*(t96352+t96332*t96329*(t96351-c0p*t96312*t96321*2.0))*2.0+t96382*(- \
               t96320+t96374+t96332*t96329*(t96320+t96373-t96335*t96372*t96366*t96367-a1p*c*c0p*t96321*t96295*(2.0/ \
               3.0)))*2.0+rho_b[index]*t96382*(-t96388-t96397+t96332*t96329*(t96388+t96397-t96312*t96313*t96314*t96394- \
               t96335*1.0/(t96294*t96294*t96294)*t96366*t96385*2.0+t96335*t96366*t96367*(b2f*c*t96383*(4.0/9.0)+b4f* \
               t96322*t96290*(1.0E1/9.0)+b1f*c*t96302*t96383*(2.0/9.0)+b3f*c*t96383*t96286*(2.0/3.0)-b1f*t96322*t96290* \
               t96384*(1.0/3.6E1)+b3f*t96302*t96322*t96290*(1.0/1.2E1))+t96303*1.0/(t96306*t96306)*t96335*1.0/(t96294* \
               t96294*t96294*t96294)*t96385*(1.0/2.0)-a1f*c*c0f*t96333*t96383*(8.0/9.0)-t96312*t96307*t96386*t96395* \
               t96396*(1.0/2.0)+a1f*c*t96372*t96366*t96295*t96367*(2.0/3.0)-a1p*c*t96313*t96314*t96319*t96295*(2.0/ \
               3.0))+t96312*t96313*t96314*t96394+t96312*t96307*t96386*t96395*t96396*(1.0/2.0)+a1p*c*t96313*t96314* \
               t96319*t96295*(2.0/3.0))-rho_b[index]*t96378*(-t96320+t96374+t96332*t96329*(t96320+t96373-t96374-t96335* \
               t96372*t96366*t96367))*2.0-rho_b[index]*(t96352+t96332*t96329*(t96351-t96352))*(ccaa1*gamma_bb[index]* \
               gcaa*t96364*t96338*(8.8E1/9.0)-ccaa1*t96323*t96324*t96354*t96355*2.4E1+ccaa2*t96323*t96324*t96354* \
               t96347*(3.04E2/9.0)-ccaa2*t96323*t96324*t96365*t96348*t96358*(3.2E1/3.0)-ccaa2*t96323*t96324*t96326* \
               t96365*(gamma_bb[index]*gcaa*t96364*(1.76E2/9.0)+t96323*t96324*t96354*(3.04E2/9.0))+ccaa2*t96323*t96324* \
               t96326*1.0/(t96346*t96346*t96346)*(t96358*t96358)*2.0+ccaa3*gamma_bb[index]*gcaa*t96323*t96324*t96343* \
               t96353*7.2E1+ccaa1*gamma_bb[index]*gcaa*t96323*t96324*t96353*1.0/(t96337*t96337*t96337)*(1.28E2/9.0) \
               +ccaa3*gamma_bb[index]*gcaa*t96323*t96324*1.0/(t96342*t96342*t96342)*t96325*(t96362*t96362)*2.0-ccaa3* \
               gamma_bb[index]*gcaa*t96323*t96324*t96325*t96363*(gamma_bb[index]*gcaa*t96364*(8.8E1/3.0)+t96323*t96324* \
               t96354*(3.04E2/3.0)+gamma_bb[index]*gcaa*t96323*t96324*t96353*7.2E1)-ccaa3*gamma_bb[index]*gcaa*t96323* \
               t96350*t96324*t96362*t96363*1.6E1)-c0*t96291*t96418*(cx0+t96422*t96434+cx1*gamma_bb[index]*gx*t96322* \
               t96408+cx2*t96323*t96405*t96326*t96417+cx3*gamma_bb[index]*gx*t96323*t96413*t96405*t96325)*(4.0/9.0) \
               +c0*t96424*t96418*(t96422*(t96431*t96424*t96427*t96428*(5.0E1/9.0)-C_k*t96423*t96284*t96399*(1.0E1/ \
               9.0)+C_k*t96401*t96431*t96284*t96399*(1.0E1/9.0)+C_k*t96402*t96425*t96284*t96399*(2.0E1/3.0)-C_k*t96404* \
               t96426*t96284*t96399*(5.0E1/9.0)+t96430*t96404*t96424*t96427*t96428*(1.25E3/9.0)+t96401*t96424*t96425* \
               t96427*t96428*(2.5E2/9.0)-t96402*t96424*t96427*t96428*t96429*1.0E2+t96401*t96402*t96424*t96426*t96427* \
               t96428*(1.0E2/9.0)-t96401*1.0/(t96403*t96403*t96403*t96403*t96403*t96403*t96403)*t96404*t96424*t96427* \
               t96428*(2.5E2/3.0)+C_k*t96401*t96430*t96404*t96284*t96399*(5.0E1/9.0)-C_k*t96401*t96402*t96284*t96429* \
               t96399*(2.0E1/3.0))-t96434*(cxnl1*gamma_bb[index]*gx*t96408*t96364*(8.8E1/9.0)-cxnl1*t96323*t96405* \
               t96354*t96445*2.4E1+cxnl2*t96323*t96405*t96354*t96417*(3.04E2/9.0)-cxnl2*t96323*t96405*t96326*t96443* \
               t96457-cxnl2*t96323*t96405*t96443*t96435*t96348*(3.2E1/3.0)+cxnl2*t96323*t96405*t96326*t96447*t96448* \
               2.0+cxnl3*gamma_bb[index]*gx*t96323*t96413*t96405*t96353*7.2E1+cxnl1*gamma_bb[index]*gx*t96323*t96405* \
               t96353*t96446*(1.28E2/9.0)-cxnl3*gamma_bb[index]*gx*t96323*t96350*t96440*t96405*t96436*1.6E1-cxnl3* \
               gamma_bb[index]*gx*t96323*t96405*t96325*t96452*t96436+cxnl3*gamma_bb[index]*gx*t96323*t96405*t96325* \
               t96453*t96454*2.0)+t96462*t96466*2.0-cx1*gamma_bb[index]*gx*t96408*t96364*(8.8E1/9.0)+cx1*t96323*t96405* \
               t96354*t96445*2.4E1-cx2*t96323*t96405*t96354*t96417*(3.04E2/9.0)+cx2*t96323*t96405*t96326*t96443*t96457+ \
               cx2*t96323*t96405*t96443*t96435*t96348*(3.2E1/3.0)-cx2*t96323*t96405*t96326*t96447*t96448*2.0-cx1* \
               gamma_bb[index]*gx*t96323*t96405*t96353*t96446*(1.28E2/9.0)-cx3*gamma_bb[index]*gx*t96323*t96413*t96405* \
               t96353*7.2E1+cx3*gamma_bb[index]*gx*t96323*t96350*t96440*t96405*t96436*1.6E1+cx3*gamma_bb[index]*gx* \
               t96323*t96405*t96325*t96452*t96436-cx3*gamma_bb[index]*gx*t96323*t96405*t96325*t96453*t96454*2.0)+ \
               c0*pow(rho_b[index],1.0/3.0)*t96418*(t96434*t96462-t96422*t96466+cx1*gamma_bb[index]*gx*t96408*t96349* \
               (8.0/3.0)-cx1*t96323*t96405*t96445*t96348*(8.0/3.0)+cx2*t96323*t96405*t96417*t96348*(1.6E1/3.0)-cx2* \
               t96323*t96405*t96326*t96443*t96435+cx3*gamma_bb[index]*gx*t96323*t96350*t96413*t96405*8.0-cx3*gamma_bb[index]* \
               gx*t96323*t96440*t96405*t96325*t96436)*(8.0/3.0);
        } else {
            v_rho_b_rho_b_[index] = 0.0;
        } 

        if (is_gga_) {

            //V_rho_a_gamma_aa
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t94457 = 1.0/pow(rho_a[index],1.0/3.0);
                double t94458 = c*t94457;
                double t94459 = sqrt(t94458);
                double t94460 = pow(t94458,3.0/2.0);
                double t94461 = c*c;
                double t94462 = 1.0/pow(rho_a[index],2.0/3.0);
                double t94463 = 1.0/c0p;
                double t94464 = b1p*t94459;
                double t94465 = b3p*t94460;
                double t94466 = b4p*t94461*t94462;
                double t94467 = b2p*c*t94457;
                double t94468 = t94464+t94465+t94466+t94467;
                double t94469 = 1.0/t94468;
                double t94470 = t94463*t94469*(1.0/2.0);
                double t94471 = t94470+1.0;
                double t94472 = log(t94471);
                double t94473 = a1p*c*t94457;
                double t94474 = t94473+1.0;
                double t94475 = pow(2.0,1.0/3.0);
                double t94476 = t94475*2.0;
                double t94477 = t94476-2.0;
                double t94478 = two_13*2.0;
                double t94479 = t94478-2.0;
                double t94480 = 1.0/t94479;
                double t94481 = 1.0/c0f;
                double t94482 = 1.0/pow(rho_b[index],1.0/3.0);
                double t94483 = c*t94482;
                double t94484 = sqrt(t94483);
                double t94485 = pow(t94483,3.0/2.0);
                double t94486 = 1.0/pow(rho_b[index],2.0/3.0);
                double t94487 = b1p*t94484;
                double t94488 = b3p*t94485;
                double t94489 = b4p*t94461*t94486;
                double t94490 = b2p*c*t94482;
                double t94491 = t94490+t94487+t94488+t94489;
                double t94492 = 1.0/t94491;
                double t94493 = t94463*t94492*(1.0/2.0);
                double t94494 = t94493+1.0;
                double t94495 = log(t94494);
                double t94496 = a1p*c*t94482;
                double t94497 = t94496+1.0;
                double t94498 = c0p*t94495*t94497*2.0;
                double t94499 = rho_a[index]+rho_b[index];
                double t94500 = 1.0/pow(t94499,1.0/3.0);
                double t94501 = c*t94500;
                double t94502 = sqrt(t94501);
                double t94503 = pow(t94501,3.0/2.0);
                double t94504 = 1.0/pow(t94499,2.0/3.0);
                double t94505 = b1p*t94502;
                double t94506 = b3p*t94503;
                double t94507 = b4p*t94504*t94461;
                double t94508 = b2p*c*t94500;
                double t94509 = t94505+t94506+t94507+t94508;
                double t94510 = 1.0/t94509;
                double t94511 = t94510*t94463*(1.0/2.0);
                double t94512 = t94511+1.0;
                double t94513 = log(t94512);
                double t94514 = a1p*c*t94500;
                double t94515 = t94514+1.0;
                double t94516 = c0p*t94513*t94515*2.0;
                double t94517 = rho_a[index]-rho_b[index];
                double t94518 = t94517*t94517;
                double t94519 = 1.0/t94499;
                double t94520 = t94517*t94519;
                double t94521 = 1.0/(t94499*t94499*t94499*t94499);
                double t94522 = t94518*t94518;
                double t94523 = t94520+1.0;
                double t94524 = pow(t94523,4.0/3.0);
                double t94525 = -t94520+1.0;
                double t94526 = pow(t94525,4.0/3.0);
                double t94527 = t94524+t94526-2.0;
                double t94528 = 1.0/pow(rho_a[index],1.1E1/3.0);
                double t94529 = 1.0/pow(rho_a[index],8.0/3.0);
                double t94530 = gamma_aa[index]*t94529*(1.0/2.0);
                double t94531 = 1.0/pow(rho_b[index],8.0/3.0);
                double t94532 = gamma_bb[index]*t94531*(1.0/2.0);
                double t94533 = t94530+t94532;
                double t94534 = gcab*t94533;
                double t94535 = t94534+1.0;
                double t94536 = gcab*gcab;
                double t94537 = t94533*t94533;
                double t94538 = 1.0/pow(rho_a[index],1.9E1/3.0);
                double t94539 = t94536*t94537;
                double t94540 = gcab*t94533*2.0;
                double t94541 = t94540+t94539+1.0;
                double t94542 = t94536*t94537*3.0;
                double t94543 = gcab*t94533*t94536*t94537;
                double t94544 = gcab*t94533*3.0;
                double t94545 = t94542+t94543+t94544+1.0;
                double t94546 = 1.0/(t94535*t94535);
                double t94547 = 1.0/t94541;
                double t94548 = 1.0/(t94545*t94545);
                double t94549 = 1.0/(t94541*t94541);
                double t94550 = gamma_aa[index]*gcab*t94528*(8.0/3.0);
                double t94551 = gamma_aa[index]*t94533*t94536*t94528*(8.0/3.0);
                double t94552 = t94550+t94551;
                double t94553 = 1.0/t94545;
                double t94554 = gamma_aa[index]*gcab*t94528*4.0;
                double t94555 = gamma_aa[index]*gcab*t94536*t94528*t94537*4.0;
                double t94556 = gamma_aa[index]*t94533*t94536*t94528*8.0;
                double t94557 = t94554+t94555+t94556;
                double t94558 = gcab*t94529;
                double t94559 = t94533*t94536*t94529;
                double t94560 = t94558+t94559;
                double t94561 = gcab*t94529*(3.0/2.0);
                double t94562 = t94533*t94536*t94529*3.0;
                double t94563 = gcab*t94536*t94537*t94529*(3.0/2.0);
                double t94564 = t94561+t94562+t94563;
                double t94565 = b1f*t94459;
                double t94566 = b3f*t94460;
                double t94567 = b4f*t94461*t94462;
                double t94568 = b2f*c*t94457;
                double t94569 = t94565+t94566+t94567+t94568;
                double t94570 = 1.0/t94569;
                double t94571 = t94570*t94481*(1.0/2.0);
                double t94572 = t94571+1.0;
                double t94573 = log(t94572);
                double t94574 = a1f*c*t94457;
                double t94575 = t94574+1.0;
                double t94576 = c0f*t94573*t94575*2.0;
                double t94577 = c0p*t94472*t94474*2.0;
                double t94578 = gcaa*gcaa;
                double t94579 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t94580 = gamma_aa[index]*gamma_aa[index];
                double t94581 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t94582 = gamma_aa[index]*gcaa*t94529;
                double t94583 = t94582+1.0;
                double t94584 = gamma_aa[index]*gcaa*t94529*3.0;
                double t94585 = gamma_aa[index]*gcaa*t94580*t94581*t94578;
                double t94586 = t94580*t94578*t94579*3.0;
                double t94587 = t94584+t94585+t94586+1.0;
                double t94588 = gamma_aa[index]*gcaa*t94529*2.0;
                double t94589 = t94580*t94578*t94579;
                double t94590 = t94588+t94589+1.0;
                double t94591 = 1.0/tau_a[index];
                double t94592 = pow(rho_a[index],2.0/3.0);
                double t94593 = pow(rho_a[index],5.0/3.0);
                double t94594 = C_k*t94591*t94593;
                double t94595 = t94594-1.0;
                double t94596 = t94594+1.0;
                double t94597 = t94595*t94595;
                double t94598 = t94597*t94597;
                double t94599 = gx*gx;
                double t94600 = gamma_aa[index]*gx*t94529;
                double t94601 = t94600+1.0;
                double t94602 = gamma_aa[index]*gx*t94529*3.0;
                double t94603 = gamma_aa[index]*gx*t94580*t94581*t94599;
                double t94604 = t94580*t94579*t94599*3.0;
                double t94605 = t94602+t94603+t94604+1.0;
                double t94606 = gamma_aa[index]*gx*t94529*2.0;
                double t94607 = t94580*t94579*t94599;
                double t94608 = t94606+t94607+1.0;
                double t94609 = 1.0/t94596;
                double t94610 = 1.0/(t94596*t94596*t94596);
                double t94611 = 1.0/(t94596*t94596*t94596*t94596*t94596);
                double t94612 = 1.0/t94601;
                double t94613 = 1.0/t94608;
                double t94614 = 1.0/t94605;
                double t94615 = 1.0/(t94601*t94601);
                double t94616 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]*rho_a[index]);
                double t94617 = 1.0/(t94605*t94605);
                double t94618 = 1.0/(t94608*t94608);
                double t94619 = gx*t94529*3.0;
                double t94620 = gamma_aa[index]*t94579*t94599*6.0;
                double t94621 = gx*t94580*t94581*t94599*3.0;
                double t94622 = t94620+t94621+t94619;
                double t94623 = gx*t94529*2.0;
                double t94624 = gamma_aa[index]*t94579*t94599*2.0;
                double t94625 = t94623+t94624;
                double t94626 = gamma_aa[index]*gx*t94528*(1.6E1/3.0);
                double t94627 = t94580*t94538*t94599*(1.6E1/3.0);
                double t94628 = t94626+t94627;
                double t94629 = gamma_aa[index]*gx*t94528*8.0;
                double t94630 = gamma_aa[index]*gx*t94580*t94616*t94599*8.0;
                double t94631 = t94580*t94538*t94599*1.6E1;
                double t94632 = t94630+t94631+t94629;
                double t94633 = 1.0/(t94601*t94601*t94601);
                double t94634 = gx*t94528*8.0;
                double t94635 = gamma_aa[index]*t94538*t94599*3.2E1;
                double t94636 = gx*t94580*t94616*t94599*2.4E1;
                double t94637 = t94634+t94635+t94636;
                double t94638 = gx*t94528*(1.6E1/3.0);
                double t94639 = gamma_aa[index]*t94538*t94599*(3.2E1/3.0);
                double t94640 = t94638+t94639;
                double t94641 = 1.0/(t94608*t94608*t94608);
                double t94642 = 1.0/(t94605*t94605*t94605);
                double t94643 = t94609*t94595;
                double t94644 = t94611*t94595*t94598;
                double t94645 = t94643+t94644-t94610*t94595*t94597*2.0;
                double t94646 = cxnl1*gx*t94612*t94529;
                double t94647 = cxnl2*gamma_aa[index]*t94613*t94579*t94599*2.0;
                double t94648 = cxnl3*gx*t94614*t94580*t94581*t94599*3.0;
                double t94649 = t94646+t94647+t94648-cxnl1*gamma_aa[index]*t94615*t94579*t94599-cxnl2*t94580*t94625* \
                   t94618*t94579*t94599-cxnl3*gamma_aa[index]*gx*t94622*t94580*t94581*t94617*t94599;
                double t94650 = 1.0/t94535;
                double t94651 = 1.0/pow(t94499,4.0/3.0);
                double t94652 = b1f*t94502;
                double t94653 = b3f*t94503;
                double t94654 = b4f*t94504*t94461;
                double t94655 = b2f*c*t94500;
                double t94656 = t94652+t94653+t94654+t94655;
                double t94657 = 1.0/t94656;
                double t94658 = t94481*t94657*(1.0/2.0);
                double t94659 = t94658+1.0;
                double t94660 = log(t94659);
                double t94661 = a1f*c*t94500;
                double t94662 = t94661+1.0;
                double t94664 = c0f*t94660*t94662*2.0;
                double t94663 = t94516-t94664;
                double t94665 = 1.0/(t94499*t94499);
                double t94692 = t94517*t94665;
                double t94666 = t94519-t94692;
                double t94667 = 1.0/pow(t94499,5.0/3.0);
                double t94668 = 1.0/sqrt(t94501);
                double t94669 = 1.0/t94512;
                double t94670 = 1.0/(t94509*t94509);
                double t94671 = b4p*t94461*t94667*(2.0/3.0);
                double t94672 = b2p*c*t94651*(1.0/3.0);
                double t94673 = b1p*c*t94651*t94668*(1.0/6.0);
                double t94674 = b3p*c*t94502*t94651*(1.0/2.0);
                double t94675 = t94671+t94672+t94673+t94674;
                double t94676 = t94515*t94670*t94675*t94669;
                double t94677 = 1.0/d2fz0;
                double t94678 = 1.0/Aa;
                double t94679 = b1a*t94502;
                double t94680 = b3a*t94503;
                double t94681 = b4a*t94504*t94461;
                double t94682 = b2a*c*t94500;
                double t94683 = t94680+t94681+t94682+t94679;
                double t94684 = 1.0/t94683;
                double t94685 = t94684*t94678*(1.0/2.0);
                double t94686 = t94685+1.0;
                double t94687 = log(t94686);
                double t94688 = a1a*c*t94500;
                double t94689 = t94688+1.0;
                double t94690 = 1.0/(t94499*t94499*t94499*t94499*t94499);
                double t94691 = pow(t94523,1.0/3.0);
                double t94693 = t94691*t94666*(4.0/3.0);
                double t94694 = pow(t94525,1.0/3.0);
                double t94695 = t94693-t94666*t94694*(4.0/3.0);
                double t94696 = t94521*t94522;
                double t94697 = t94696-1.0;
                double t94698 = 1.0/pow(rho_a[index],4.0/3.0);
                double t94699 = 1.0/pow(rho_a[index],5.0/3.0);
                double t94700 = 1.0/sqrt(t94458);
                double t94701 = 1.0/t94471;
                double t94702 = 1.0/(t94468*t94468);
                double t94703 = b4p*t94461*t94699*(2.0/3.0);
                double t94704 = b2p*c*t94698*(1.0/3.0);
                double t94705 = b1p*c*t94700*t94698*(1.0/6.0);
                double t94706 = b3p*c*t94459*t94698*(1.0/2.0);
                double t94707 = t94703+t94704+t94705+t94706;
                double t94708 = t94701*t94702*t94707*t94474;
                double t94709 = t94576-t94577;
                double t94710 = t94480*t94709*t94477;
                double t94711 = Aa*t94480*t94527*t94677*t94687*t94697*t94689*2.0;
                double t94712 = t94710+t94577;
                double t94713 = 1.0/t94583;
                double t94714 = 1.0/t94590;
                double t94715 = 1.0/t94587;
                double t94716 = 1.0/(t94583*t94583);
                double t94717 = 1.0/(t94587*t94587);
                double t94718 = 1.0/(t94590*t94590);
                double t94719 = gcaa*t94529*3.0;
                double t94720 = gamma_aa[index]*t94578*t94579*6.0;
                double t94721 = gcaa*t94580*t94581*t94578*3.0;
                double t94722 = t94720+t94721+t94719;
                double t94723 = gcaa*t94529*2.0;
                double t94724 = gamma_aa[index]*t94578*t94579*2.0;
                double t94725 = t94723+t94724;
                double t94726 = gamma_aa[index]*gcaa*t94528*(1.6E1/3.0);
                double t94727 = t94580*t94538*t94578*(1.6E1/3.0);
                double t94728 = t94726+t94727;
                double t94729 = gamma_aa[index]*gcaa*t94528*8.0;
                double t94730 = gamma_aa[index]*gcaa*t94580*t94616*t94578*8.0;
                double t94731 = t94580*t94538*t94578*1.6E1;
                double t94732 = t94730+t94731+t94729;
                double t94733 = 1.0/t94572;
                double t94734 = 1.0/(t94569*t94569);
                double t94735 = b4f*t94461*t94699*(2.0/3.0);
                double t94736 = b2f*c*t94698*(1.0/3.0);
                double t94737 = b1f*c*t94700*t94698*(1.0/6.0);
                double t94738 = b3f*c*t94459*t94698*(1.0/2.0);
                double t94739 = t94735+t94736+t94737+t94738;
                double t94740 = a1f*c*c0f*t94573*t94698*(2.0/3.0);
                double t94741 = a1p*c*c0p*t94472*t94698*(2.0/3.0);
                double t94742 = ccaa1*gcaa*t94713*t94529;
                double t94743 = ccaa2*gamma_aa[index]*t94714*t94578*t94579*2.0;
                double t94744 = ccaa3*gcaa*t94580*t94715*t94581*t94578*3.0;
                double t94745 = t94742+t94743+t94744-ccaa1*gamma_aa[index]*t94716*t94578*t94579-ccaa2*t94580*t94725* \
                   t94718*t94578*t94579-ccaa3*gamma_aa[index]*gcaa*t94722*t94580*t94581*t94717*t94578;
                v_rho_a_gamma_aa_[index] = -t94712*t94745-(c0*pow(rho_a[index],1.0/3.0)*(t94645*t94649+cx1*gx*t94612* \
                   t94529-cx1*gamma_aa[index]*t94615*t94579*t94599+cx2*gamma_aa[index]*t94613*t94579*t94599*2.0-cx2*t94580* \
                   t94625*t94618*t94579*t94599+cx3*gx*t94614*t94580*t94581*t94599*3.0-cx3*gamma_aa[index]*gx*t94622*t94580* \
                   t94581*t94617*t94599)*(4.0/3.0)+c0*pow(rho_a[index],4.0/3.0)*(t94645*(cxnl1*gx*t94612*t94528*(-8.0/ \
                   3.0)-cxnl2*gamma_aa[index]*t94613*t94538*t94599*(3.2E1/3.0)+cxnl1*gamma_aa[index]*t94615*t94538*t94599* \
                   8.0+cxnl2*t94580*t94625*t94618*t94538*t94599*(1.6E1/3.0)+cxnl2*t94640*t94580*t94618*t94579*t94599+ \
                   cxnl2*gamma_aa[index]*t94618*t94628*t94579*t94599*2.0-cxnl1*gx*t94633*t94580*t94616*t94599*(1.6E1/ \
                   3.0)-cxnl3*gx*t94614*t94580*t94616*t94599*2.4E1+cxnl3*gx*t94632*t94580*t94581*t94617*t94599*3.0-cxnl2* \
                   t94641*t94580*t94625*t94628*t94579*t94599*2.0+cxnl3*gamma_aa[index]*gx*t94622*t94580*t94616*t94617* \
                   t94599*8.0+cxnl3*gamma_aa[index]*gx*t94580*t94581*t94617*t94637*t94599-cxnl3*gamma_aa[index]*gx*t94622* \
                   t94632*t94642*t94580*t94581*t94599*2.0)+t94649*(C_k*t94591*t94609*t94592*(5.0/3.0)-C_k*t94610*t94591* \
                   t94592*t94597*1.0E1+C_k*t94611*t94591*t94592*t94598*(2.5E1/3.0)-C_k*t94591*t94592*t94595*1.0/(t94596* \
                   t94596)*(5.0/3.0)+C_k*t94591*t94592*t94595*1.0/(t94596*t94596*t94596*t94596)*t94597*1.0E1-C_k*t94591* \
                   t94592*t94595*1.0/(t94596*t94596*t94596*t94596*t94596*t94596)*t94598*(2.5E1/3.0))-cx1*gx*t94612*t94528* \
                   (8.0/3.0)+cx1*gamma_aa[index]*t94615*t94538*t94599*8.0-cx2*gamma_aa[index]*t94613*t94538*t94599*(3.2E1/ \
                   3.0)+cx2*t94580*t94625*t94618*t94538*t94599*(1.6E1/3.0)+cx2*t94640*t94580*t94618*t94579*t94599+cx2* \
                   gamma_aa[index]*t94618*t94628*t94579*t94599*2.0-cx1*gx*t94633*t94580*t94616*t94599*(1.6E1/3.0)-cx3* \
                   gx*t94614*t94580*t94616*t94599*2.4E1+cx3*gx*t94632*t94580*t94581*t94617*t94599*3.0-cx2*t94641*t94580* \
                   t94625*t94628*t94579*t94599*2.0+cx3*gamma_aa[index]*gx*t94622*t94580*t94616*t94617*t94599*8.0+cx3* \
                   gamma_aa[index]*gx*t94580*t94581*t94617*t94637*t94599-cx3*gamma_aa[index]*gx*t94622*t94632*t94642* \
                   t94580*t94581*t94599*2.0))*(X-1.0)-(rho_a[index]*(t94577+t94480*t94477*(t94576-c0p*t94472*t94474*2.0) \
                   )+rho_b[index]*(t94498-t94480*t94477*(t94498-c0f*log((t94481*(1.0/2.0))/(b1f*t94484+b3f*t94485+b2f* \
                   c*t94482+b4f*t94461*t94486)+1.0)*(a1f*c*t94482+1.0)*2.0))-t94499*(t94711+t94516-t94521*t94522*t94480* \
                   t94527*t94663))*(ccab1*gcab*t94650*t94528*(4.0/3.0)-ccab2*t94536*t94537*t94549*(gcab*t94528*(8.0/3.0) \
                   +gamma_aa[index]*t94536*t94538*(4.0/3.0)+t94533*t94536*t94528*(8.0/3.0))-ccab1*gamma_aa[index]*t94536* \
                   t94546*t94538*(4.0/3.0)+ccab2*gamma_aa[index]*t94536*t94538*t94547*(4.0/3.0)-ccab1*t94533*t94536*t94528* \
                   t94546*(4.0/3.0)+ccab2*t94533*t94536*t94528*t94547*(8.0/3.0)-ccab2*t94533*t94552*t94536*t94529*t94549+ \
                   ccab2*1.0/(t94541*t94541*t94541)*t94560*t94552*t94536*t94537*2.0+ccab3*gcab*t94553*t94536*t94528*t94537* \
                   4.0+ccab3*gamma_aa[index]*gcab*t94533*t94553*t94536*t94538*4.0-ccab2*gamma_aa[index]*t94533*t94560* \
                   t94536*t94528*t94549*(8.0/3.0)-ccab3*gcab*t94536*t94537*t94529*t94548*t94557*(3.0/2.0)-ccab3*gcab* \
                   t94533*t94536*t94537*t94548*(gcab*t94528*4.0+gamma_aa[index]*t94536*t94538*4.0+t94533*t94536*t94528* \
                   8.0+gcab*t94536*t94528*t94537*4.0+gamma_aa[index]*gcab*t94533*t94536*t94538*4.0)+ccab1*gamma_aa[index]* \
                   gcab*t94533*1.0/(t94535*t94535*t94535)*t94536*t94538*(4.0/3.0)+ccab3*gcab*t94533*t94536*1.0/(t94545* \
                   t94545*t94545)*t94537*t94564*t94557*2.0-ccab3*gamma_aa[index]*gcab*t94536*t94528*t94537*t94564*t94548* \
                   4.0)+(ccab1*gcab*t94650*t94529*(1.0/2.0)-ccab1*t94533*t94536*t94546*t94529*(1.0/2.0)+ccab2*t94533* \
                   t94536*t94529*t94547-ccab2*t94560*t94536*t94537*t94549+ccab3*gcab*t94553*t94536*t94537*t94529*(3.0/ \
                   2.0)-ccab3*gcab*t94533*t94536*t94537*t94564*t94548)*(t94710-t94711-t94516+t94577-rho_a[index]*(t94741- \
                   t94708+t94480*t94477*(t94740+t94708-t94733*t94734*t94575*t94739-a1p*c*c0p*t94472*t94698*(2.0/3.0)) \
                   )+t94499*(-t94676+t94521*t94522*t94480*t94527*(t94676-(t94662*1.0/(t94656*t94656)*(b2f*c*t94651*(1.0/ \
                   3.0)+b4f*t94461*t94667*(2.0/3.0)+b1f*c*t94651*t94668*(1.0/6.0)+b3f*c*t94502*t94651*(1.0/2.0)))/t94659+ \
                   a1f*c*c0f*t94651*t94660*(2.0/3.0)-a1p*c*c0p*t94513*t94651*(2.0/3.0))+a1p*c*c0p*t94513*t94651*(2.0/ \
                   3.0)+t94521*t94522*t94480*t94663*t94695-t94522*t94480*t94527*t94663*t94690*4.0+t94521*t94480*t94517* \
                   t94518*t94527*t94663*4.0+Aa*t94480*t94527*t94677*t94687*t94689*(t94522*t94690*4.0-t94521*t94517*t94518* \
                   4.0)*2.0-Aa*t94480*t94677*t94695*t94687*t94697*t94689*2.0-(t94480*t94527*1.0/(t94683*t94683)*t94677* \
                   t94697*t94689*(b2a*c*t94651*(1.0/3.0)+b4a*t94461*t94667*(2.0/3.0)+b1a*c*t94651*t94668*(1.0/6.0)+b3a* \
                   c*t94502*t94651*(1.0/2.0)))/t94686+Aa*a1a*c*t94480*t94651*t94527*t94677*t94687*t94697*(2.0/3.0))+t94521* \
                   t94522*t94480*t94527*t94663)+rho_a[index]*t94745*(t94741-t94708+t94480*t94477*(t94740-t94741+t94708- \
                   t94733*t94734*t94575*t94739))-rho_a[index]*t94712*(ccaa1*gcaa*t94713*t94528*(-8.0/3.0)-ccaa2*gamma_aa[index]* \
                   t94714*t94538*t94578*(3.2E1/3.0)+ccaa1*gamma_aa[index]*t94716*t94538*t94578*8.0+ccaa2*t94580*t94725* \
                   t94538*t94718*t94578*(1.6E1/3.0)-ccaa1*gcaa*t94580*t94616*1.0/(t94583*t94583*t94583)*t94578*(1.6E1/ \
                   3.0)+ccaa2*t94580*t94718*t94578*t94579*(gcaa*t94528*(1.6E1/3.0)+gamma_aa[index]*t94538*t94578*(3.2E1/ \
                   3.0))+ccaa2*gamma_aa[index]*t94718*t94728*t94578*t94579*2.0-ccaa3*gcaa*t94580*t94616*t94715*t94578* \
                   2.4E1+ccaa3*gcaa*t94732*t94580*t94581*t94717*t94578*3.0-ccaa2*t94580*1.0/(t94590*t94590*t94590)*t94725* \
                   t94728*t94578*t94579*2.0+ccaa3*gamma_aa[index]*gcaa*t94580*t94581*t94717*t94578*(gcaa*t94528*8.0+gamma_aa[index]* \
                   t94538*t94578*3.2E1+gcaa*t94580*t94616*t94578*2.4E1)+ccaa3*gamma_aa[index]*gcaa*t94722*t94580*t94616* \
                   t94717*t94578*8.0-ccaa3*gamma_aa[index]*gcaa*t94722*t94732*t94580*t94581*t94578*1.0/(t94587*t94587* \
                   t94587)*2.0);
            } else if (rho_a[index] > cutoff_) {
                double t97239 = 1.0/pow(rho_a[index],1.0/3.0);
                double t97240 = c*t97239;
                double t97241 = sqrt(t97240);
                double t97242 = pow(t97240,3.0/2.0);
                double t97243 = c*c;
                double t97244 = 1.0/pow(rho_a[index],2.0/3.0);
                double t97245 = 1.0/c0p;
                double t97246 = b1p*t97241;
                double t97247 = b3p*t97242;
                double t97248 = b4p*t97243*t97244;
                double t97249 = b2p*c*t97239;
                double t97250 = t97246+t97247+t97248+t97249;
                double t97251 = 1.0/t97250;
                double t97252 = t97251*t97245*(1.0/2.0);
                double t97253 = t97252+1.0;
                double t97254 = log(t97253);
                double t97255 = a1p*c*t97239;
                double t97256 = t97255+1.0;
                double t97257 = 1.0/pow(rho_a[index],8.0/3.0);
                double t97258 = gcaa*gcaa;
                double t97259 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t97260 = gamma_aa[index]*gamma_aa[index];
                double t97261 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t97262 = gamma_aa[index]*gcaa*t97257;
                double t97263 = t97262+1.0;
                double t97264 = gamma_aa[index]*gcaa*t97257*3.0;
                double t97265 = gamma_aa[index]*gcaa*t97260*t97261*t97258;
                double t97266 = t97260*t97258*t97259*3.0;
                double t97267 = t97264+t97265+t97266+1.0;
                double t97268 = gamma_aa[index]*gcaa*t97257*2.0;
                double t97269 = t97260*t97258*t97259;
                double t97270 = t97268+t97269+1.0;
                double t97271 = pow(2.0,1.0/3.0);
                double t97272 = t97271*2.0;
                double t97273 = t97272-2.0;
                double t97274 = two_13*2.0;
                double t97275 = t97274-2.0;
                double t97276 = 1.0/t97275;
                double t97277 = 1.0/c0f;
                double t97278 = b1f*t97241;
                double t97279 = b3f*t97242;
                double t97280 = b4f*t97243*t97244;
                double t97281 = b2f*c*t97239;
                double t97282 = t97280+t97281+t97278+t97279;
                double t97283 = 1.0/t97282;
                double t97284 = t97283*t97277*(1.0/2.0);
                double t97285 = t97284+1.0;
                double t97286 = log(t97285);
                double t97287 = a1f*c*t97239;
                double t97288 = t97287+1.0;
                double t97289 = c0f*t97286*t97288*2.0;
                double t97290 = c0p*t97254*t97256*2.0;
                double t97291 = 1.0/t97263;
                double t97292 = 1.0/t97270;
                double t97293 = 1.0/t97267;
                double t97294 = 1.0/pow(rho_a[index],1.9E1/3.0);
                double t97295 = 1.0/(t97263*t97263);
                double t97296 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]*rho_a[index]);
                double t97297 = 1.0/pow(rho_a[index],1.1E1/3.0);
                double t97298 = 1.0/(t97267*t97267);
                double t97299 = 1.0/(t97270*t97270);
                double t97300 = gcaa*t97257*3.0;
                double t97301 = gamma_aa[index]*t97258*t97259*6.0;
                double t97302 = gcaa*t97260*t97261*t97258*3.0;
                double t97303 = t97300+t97301+t97302;
                double t97304 = gcaa*t97257*2.0;
                double t97305 = gamma_aa[index]*t97258*t97259*2.0;
                double t97306 = t97304+t97305;
                double t97307 = gamma_aa[index]*gcaa*t97297*(1.6E1/3.0);
                double t97308 = t97260*t97258*t97294*(1.6E1/3.0);
                double t97309 = t97307+t97308;
                double t97310 = gamma_aa[index]*gcaa*t97297*8.0;
                double t97311 = gamma_aa[index]*gcaa*t97260*t97258*t97296*8.0;
                double t97312 = t97260*t97258*t97294*1.6E1;
                double t97313 = t97310+t97311+t97312;
                double t97314 = 1.0/pow(rho_a[index],4.0/3.0);
                double t97315 = 1.0/pow(rho_a[index],5.0/3.0);
                double t97316 = 1.0/sqrt(t97240);
                double t97317 = 1.0/t97253;
                double t97318 = 1.0/(t97250*t97250);
                double t97319 = b4p*t97243*t97315*(2.0/3.0);
                double t97320 = b2p*c*t97314*(1.0/3.0);
                double t97321 = b1p*c*t97314*t97316*(1.0/6.0);
                double t97322 = b3p*c*t97241*t97314*(1.0/2.0);
                double t97323 = t97320+t97321+t97322+t97319;
                double t97324 = t97323*t97317*t97318*t97256;
                double t97325 = ccaa1*gcaa*t97291*t97257;
                double t97326 = ccaa2*gamma_aa[index]*t97292*t97258*t97259*2.0;
                double t97327 = ccaa3*gcaa*t97260*t97261*t97293*t97258*3.0;
                double t97328 = t97325+t97326+t97327-ccaa1*gamma_aa[index]*t97258*t97259*t97295-ccaa2*t97260*t97306* \
                   t97258*t97259*t97299-ccaa3*gamma_aa[index]*gcaa*t97303*t97260*t97261*t97258*t97298;
                double t97329 = 1.0/tau_a[index];
                double t97330 = pow(rho_a[index],2.0/3.0);
                double t97331 = pow(rho_a[index],5.0/3.0);
                double t97332 = C_k*t97331*t97329;
                double t97333 = t97332-1.0;
                double t97334 = t97332+1.0;
                double t97335 = t97333*t97333;
                double t97336 = t97335*t97335;
                double t97337 = gx*gx;
                double t97338 = gamma_aa[index]*gx*t97257;
                double t97339 = t97338+1.0;
                double t97340 = gamma_aa[index]*gx*t97257*3.0;
                double t97341 = gamma_aa[index]*gx*t97260*t97261*t97337;
                double t97342 = t97260*t97337*t97259*3.0;
                double t97343 = t97340+t97341+t97342+1.0;
                double t97344 = gamma_aa[index]*gx*t97257*2.0;
                double t97345 = t97260*t97337*t97259;
                double t97346 = t97344+t97345+1.0;
                double t97347 = 1.0/t97334;
                double t97348 = 1.0/(t97334*t97334*t97334);
                double t97349 = 1.0/(t97334*t97334*t97334*t97334*t97334);
                double t97350 = 1.0/t97339;
                double t97351 = 1.0/t97346;
                double t97352 = 1.0/t97343;
                double t97353 = 1.0/(t97339*t97339);
                double t97354 = 1.0/(t97343*t97343);
                double t97355 = 1.0/(t97346*t97346);
                double t97356 = gx*t97257*3.0;
                double t97357 = gamma_aa[index]*t97337*t97259*6.0;
                double t97358 = gx*t97260*t97261*t97337*3.0;
                double t97359 = t97356+t97357+t97358;
                double t97360 = gx*t97257*2.0;
                double t97361 = gamma_aa[index]*t97337*t97259*2.0;
                double t97362 = t97360+t97361;
                double t97363 = gamma_aa[index]*gx*t97297*(1.6E1/3.0);
                double t97364 = t97260*t97337*t97294*(1.6E1/3.0);
                double t97365 = t97363+t97364;
                double t97366 = gamma_aa[index]*gx*t97297*8.0;
                double t97367 = gamma_aa[index]*gx*t97260*t97337*t97296*8.0;
                double t97368 = t97260*t97337*t97294*1.6E1;
                double t97369 = t97366+t97367+t97368;
                double t97370 = 1.0/(t97339*t97339*t97339);
                double t97371 = gx*t97297*8.0;
                double t97372 = gamma_aa[index]*t97337*t97294*3.2E1;
                double t97373 = gx*t97260*t97337*t97296*2.4E1;
                double t97374 = t97371+t97372+t97373;
                double t97375 = gx*t97297*(1.6E1/3.0);
                double t97376 = gamma_aa[index]*t97337*t97294*(3.2E1/3.0);
                double t97377 = t97375+t97376;
                double t97378 = 1.0/(t97346*t97346*t97346);
                double t97379 = 1.0/(t97343*t97343*t97343);
                double t97380 = X-1.0;
                double t97381 = t97333*t97347;
                double t97382 = t97333*t97336*t97349;
                double t97383 = t97381+t97382-t97333*t97335*t97348*2.0;
                double t97384 = cxnl1*gx*t97350*t97257;
                double t97385 = cxnl2*gamma_aa[index]*t97351*t97337*t97259*2.0;
                double t97386 = cxnl3*gx*t97260*t97261*t97352*t97337*3.0;
                double t97387 = t97384+t97385+t97386-cxnl1*gamma_aa[index]*t97353*t97337*t97259-cxnl2*t97260*t97362* \
                   t97337*t97355*t97259-cxnl3*gamma_aa[index]*gx*t97260*t97261*t97354*t97337*t97359;
                v_rho_a_gamma_aa_[index] = -t97328*(t97290+t97273*t97276*(t97289-c0p*t97254*t97256*2.0))+rho_a[index]* \
                   t97328*(-t97324+t97273*t97276*(t97324-(1.0/(t97282*t97282)*t97288*(b2f*c*t97314*(1.0/3.0)+b4f*t97243* \
                   t97315*(2.0/3.0)+b1f*c*t97314*t97316*(1.0/6.0)+b3f*c*t97241*t97314*(1.0/2.0)))/t97285+a1f*c*c0f*t97314* \
                   t97286*(2.0/3.0)-a1p*c*c0p*t97314*t97254*(2.0/3.0))+a1p*c*c0p*t97314*t97254*(2.0/3.0))-rho_a[index]* \
                   (t97290-t97273*t97276*(t97290-t97289))*(ccaa1*gcaa*t97291*t97297*(-8.0/3.0)-ccaa2*gamma_aa[index]* \
                   t97292*t97258*t97294*(3.2E1/3.0)+ccaa1*gamma_aa[index]*t97258*t97294*t97295*8.0+ccaa2*t97260*t97306* \
                   t97258*t97294*t97299*(1.6E1/3.0)-ccaa1*gcaa*t97260*1.0/(t97263*t97263*t97263)*t97258*t97296*(1.6E1/ \
                   3.0)+ccaa2*t97260*t97258*t97259*t97299*(gcaa*t97297*(1.6E1/3.0)+gamma_aa[index]*t97258*t97294*(3.2E1/ \
                   3.0))+ccaa2*gamma_aa[index]*t97309*t97258*t97259*t97299*2.0-ccaa3*gcaa*t97260*t97293*t97258*t97296* \
                   2.4E1+ccaa3*gcaa*t97313*t97260*t97261*t97258*t97298*3.0-ccaa2*t97260*1.0/(t97270*t97270*t97270)*t97306* \
                   t97309*t97258*t97259*2.0+ccaa3*gamma_aa[index]*gcaa*t97260*t97261*t97258*t97298*(gcaa*t97297*8.0+gamma_aa[index]* \
                   t97258*t97294*3.2E1+gcaa*t97260*t97258*t97296*2.4E1)+ccaa3*gamma_aa[index]*gcaa*t97303*t97260*t97258* \
                   t97296*t97298*8.0-ccaa3*gamma_aa[index]*gcaa*t97303*t97313*t97260*t97261*t97258*1.0/(t97267*t97267* \
                   t97267)*2.0)-c0*pow(rho_a[index],4.0/3.0)*t97380*(t97383*(cxnl1*gx*t97350*t97297*(-8.0/3.0)-cxnl2* \
                   gamma_aa[index]*t97351*t97337*t97294*(3.2E1/3.0)+cxnl1*gamma_aa[index]*t97353*t97337*t97294*8.0+cxnl2* \
                   t97260*t97362*t97337*t97355*t97294*(1.6E1/3.0)+cxnl2*t97260*t97337*t97355*t97259*t97377+cxnl2*gamma_aa[index]* \
                   t97337*t97355*t97365*t97259*2.0-cxnl1*gx*t97260*t97370*t97337*t97296*(1.6E1/3.0)-cxnl3*gx*t97260*t97352* \
                   t97337*t97296*2.4E1+cxnl3*gx*t97260*t97261*t97354*t97337*t97369*3.0-cxnl2*t97260*t97362*t97337*t97365* \
                   t97259*t97378*2.0+cxnl3*gamma_aa[index]*gx*t97260*t97261*t97354*t97337*t97374+cxnl3*gamma_aa[index]* \
                   gx*t97260*t97354*t97337*t97296*t97359*8.0-cxnl3*gamma_aa[index]*gx*t97260*t97261*t97337*t97359*t97369* \
                   t97379*2.0)+t97387*(C_k*t97330*t97329*t97347*(5.0/3.0)-C_k*t97330*t97335*t97329*t97348*1.0E1+C_k*t97330* \
                   t97336*t97329*t97349*(2.5E1/3.0)-C_k*t97330*t97333*1.0/(t97334*t97334)*t97329*(5.0/3.0)+C_k*t97330* \
                   t97333*1.0/(t97334*t97334*t97334*t97334)*t97335*t97329*1.0E1-C_k*t97330*t97333*1.0/(t97334*t97334* \
                   t97334*t97334*t97334*t97334)*t97336*t97329*(2.5E1/3.0))-cx1*gx*t97350*t97297*(8.0/3.0)+cx1*gamma_aa[index]* \
                   t97353*t97337*t97294*8.0-cx2*gamma_aa[index]*t97351*t97337*t97294*(3.2E1/3.0)+cx2*t97260*t97362*t97337* \
                   t97355*t97294*(1.6E1/3.0)+cx2*t97260*t97337*t97355*t97259*t97377+cx2*gamma_aa[index]*t97337*t97355* \
                   t97365*t97259*2.0-cx1*gx*t97260*t97370*t97337*t97296*(1.6E1/3.0)-cx3*gx*t97260*t97352*t97337*t97296* \
                   2.4E1+cx3*gx*t97260*t97261*t97354*t97337*t97369*3.0-cx2*t97260*t97362*t97337*t97365*t97259*t97378* \
                   2.0+cx3*gamma_aa[index]*gx*t97260*t97261*t97354*t97337*t97374+cx3*gamma_aa[index]*gx*t97260*t97354* \
                   t97337*t97296*t97359*8.0-cx3*gamma_aa[index]*gx*t97260*t97261*t97337*t97359*t97369*t97379*2.0)-c0* \
                   pow(rho_a[index],1.0/3.0)*t97380*(t97383*t97387+cx1*gx*t97350*t97257-cx1*gamma_aa[index]*t97353*t97337* \
                   t97259+cx2*gamma_aa[index]*t97351*t97337*t97259*2.0-cx2*t97260*t97362*t97337*t97355*t97259+cx3*gx* \
                   t97260*t97261*t97352*t97337*3.0-cx3*gamma_aa[index]*gx*t97260*t97261*t97354*t97337*t97359)*(4.0/3.0) \
                   ;
            } else if (rho_b[index] > cutoff_) {
                v_rho_a_gamma_aa_[index] = 0.0;
            } else {
                v_rho_a_gamma_aa_[index] = 0.0;
            } 

            //V_rho_a_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_a_gamma_ab_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_a_gamma_ab_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_a_gamma_ab_[index] = 0.0;
            } else {
                v_rho_a_gamma_ab_[index] = 0.0;
            } 

            //V_rho_a_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t94748 = 1.0/pow(rho_a[index],1.0/3.0);
                double t94749 = c*t94748;
                double t94750 = sqrt(t94749);
                double t94751 = pow(t94749,3.0/2.0);
                double t94752 = c*c;
                double t94753 = 1.0/pow(rho_a[index],2.0/3.0);
                double t94754 = 1.0/c0p;
                double t94755 = b1p*t94750;
                double t94756 = b3p*t94751;
                double t94757 = b4p*t94752*t94753;
                double t94758 = b2p*c*t94748;
                double t94759 = t94755+t94756+t94757+t94758;
                double t94760 = 1.0/t94759;
                double t94761 = t94760*t94754*(1.0/2.0);
                double t94762 = t94761+1.0;
                double t94763 = log(t94762);
                double t94764 = a1p*c*t94748;
                double t94765 = t94764+1.0;
                double t94766 = pow(2.0,1.0/3.0);
                double t94767 = t94766*2.0;
                double t94768 = t94767-2.0;
                double t94769 = two_13*2.0;
                double t94770 = t94769-2.0;
                double t94771 = 1.0/t94770;
                double t94772 = 1.0/c0f;
                double t94773 = 1.0/pow(rho_b[index],1.0/3.0);
                double t94774 = c*t94773;
                double t94775 = sqrt(t94774);
                double t94776 = pow(t94774,3.0/2.0);
                double t94777 = 1.0/pow(rho_b[index],2.0/3.0);
                double t94778 = b1p*t94775;
                double t94779 = b3p*t94776;
                double t94780 = b4p*t94752*t94777;
                double t94781 = b2p*c*t94773;
                double t94782 = t94780+t94781+t94778+t94779;
                double t94783 = 1.0/t94782;
                double t94784 = t94754*t94783*(1.0/2.0);
                double t94785 = t94784+1.0;
                double t94786 = log(t94785);
                double t94787 = a1p*c*t94773;
                double t94788 = t94787+1.0;
                double t94789 = c0p*t94786*t94788*2.0;
                double t94790 = rho_a[index]+rho_b[index];
                double t94791 = 1.0/pow(t94790,1.0/3.0);
                double t94792 = c*t94791;
                double t94793 = sqrt(t94792);
                double t94794 = pow(t94792,3.0/2.0);
                double t94795 = 1.0/pow(t94790,2.0/3.0);
                double t94796 = b1p*t94793;
                double t94797 = b3p*t94794;
                double t94798 = b4p*t94752*t94795;
                double t94799 = b2p*c*t94791;
                double t94800 = t94796+t94797+t94798+t94799;
                double t94801 = 1.0/t94800;
                double t94802 = t94801*t94754*(1.0/2.0);
                double t94803 = t94802+1.0;
                double t94804 = log(t94803);
                double t94805 = a1p*c*t94791;
                double t94806 = t94805+1.0;
                double t94807 = c0p*t94804*t94806*2.0;
                double t94808 = rho_a[index]-rho_b[index];
                double t94809 = t94808*t94808;
                double t94810 = 1.0/t94790;
                double t94811 = t94810*t94808;
                double t94812 = 1.0/(t94790*t94790*t94790*t94790);
                double t94813 = t94809*t94809;
                double t94814 = t94811+1.0;
                double t94815 = pow(t94814,4.0/3.0);
                double t94816 = -t94811+1.0;
                double t94817 = pow(t94816,4.0/3.0);
                double t94818 = t94815+t94817-2.0;
                double t94819 = gcab*gcab;
                double t94820 = 1.0/pow(rho_a[index],1.1E1/3.0);
                double t94821 = 1.0/pow(rho_b[index],8.0/3.0);
                double t94822 = 1.0/pow(rho_a[index],8.0/3.0);
                double t94823 = gamma_aa[index]*t94822*(1.0/2.0);
                double t94824 = gamma_bb[index]*t94821*(1.0/2.0);
                double t94825 = t94823+t94824;
                double t94826 = t94825*t94825;
                double t94827 = t94826*t94819*3.0;
                double t94828 = gcab*t94825*t94826*t94819;
                double t94829 = gcab*t94825*3.0;
                double t94830 = t94827+t94828+t94829+1.0;
                double t94831 = 1.0/(t94830*t94830);
                double t94832 = gamma_aa[index]*gcab*t94820*(8.0/3.0);
                double t94833 = gamma_aa[index]*t94820*t94825*t94819*(8.0/3.0);
                double t94834 = t94832+t94833;
                double t94835 = t94826*t94819;
                double t94836 = gcab*t94825*2.0;
                double t94837 = t94835+t94836+1.0;
                double t94838 = gamma_aa[index]*gcab*t94820*4.0;
                double t94839 = gamma_aa[index]*gcab*t94820*t94826*t94819*4.0;
                double t94840 = gamma_aa[index]*t94820*t94825*t94819*8.0;
                double t94841 = t94840+t94838+t94839;
                double t94842 = gcab*t94821;
                double t94843 = t94821*t94825*t94819;
                double t94844 = t94842+t94843;
                double t94845 = 1.0/(t94837*t94837);
                double t94846 = gcab*t94825;
                double t94847 = t94846+1.0;
                double t94848 = gcab*t94821*(3.0/2.0);
                double t94849 = t94821*t94825*t94819*3.0;
                double t94850 = gcab*t94821*t94826*t94819*(3.0/2.0);
                double t94851 = t94850+t94848+t94849;
                double t94852 = c0p*t94763*t94765*2.0;
                double t94853 = 1.0/(t94847*t94847);
                double t94854 = 1.0/t94837;
                double t94855 = 1.0/t94830;
                double t94856 = 1.0/pow(t94790,4.0/3.0);
                double t94857 = b1f*t94793;
                double t94858 = b3f*t94794;
                double t94859 = b4f*t94752*t94795;
                double t94860 = b2f*c*t94791;
                double t94861 = t94860+t94857+t94858+t94859;
                double t94862 = 1.0/t94861;
                double t94863 = t94772*t94862*(1.0/2.0);
                double t94864 = t94863+1.0;
                double t94865 = log(t94864);
                double t94866 = a1f*c*t94791;
                double t94867 = t94866+1.0;
                double t94869 = c0f*t94865*t94867*2.0;
                double t94868 = t94807-t94869;
                double t94870 = 1.0/(t94790*t94790);
                double t94897 = t94870*t94808;
                double t94871 = t94810-t94897;
                double t94872 = 1.0/pow(t94790,5.0/3.0);
                double t94873 = 1.0/sqrt(t94792);
                double t94874 = 1.0/t94803;
                double t94875 = 1.0/(t94800*t94800);
                double t94876 = b4p*t94752*t94872*(2.0/3.0);
                double t94877 = b2p*c*t94856*(1.0/3.0);
                double t94878 = b1p*c*t94873*t94856*(1.0/6.0);
                double t94879 = b3p*c*t94793*t94856*(1.0/2.0);
                double t94880 = t94876+t94877+t94878+t94879;
                double t94881 = t94806*t94880*t94874*t94875;
                double t94882 = 1.0/d2fz0;
                double t94883 = 1.0/Aa;
                double t94884 = b1a*t94793;
                double t94885 = b3a*t94794;
                double t94886 = b4a*t94752*t94795;
                double t94887 = b2a*c*t94791;
                double t94888 = t94884+t94885+t94886+t94887;
                double t94889 = 1.0/t94888;
                double t94890 = t94883*t94889*(1.0/2.0);
                double t94891 = t94890+1.0;
                double t94892 = log(t94891);
                double t94893 = a1a*c*t94791;
                double t94894 = t94893+1.0;
                double t94895 = 1.0/(t94790*t94790*t94790*t94790*t94790);
                double t94896 = pow(t94814,1.0/3.0);
                double t94898 = t94871*t94896*(4.0/3.0);
                double t94899 = pow(t94816,1.0/3.0);
                double t94900 = t94898-t94871*t94899*(4.0/3.0);
                double t94901 = t94812*t94813;
                double t94902 = t94901-1.0;
                double t94903 = a1f*c*t94748;
                double t94904 = t94903+1.0;
                double t94905 = b1f*t94750;
                double t94906 = b3f*t94751;
                double t94907 = b4f*t94752*t94753;
                double t94908 = b2f*c*t94748;
                double t94909 = t94905+t94906+t94907+t94908;
                double t94910 = 1.0/t94909;
                double t94911 = t94910*t94772*(1.0/2.0);
                double t94912 = t94911+1.0;
                double t94913 = 1.0/pow(rho_a[index],4.0/3.0);
                double t94914 = 1.0/pow(rho_a[index],5.0/3.0);
                double t94915 = 1.0/sqrt(t94749);
                double t94916 = log(t94912);
                double t94917 = 1.0/t94762;
                double t94918 = 1.0/(t94759*t94759);
                double t94919 = b4p*t94752*t94914*(2.0/3.0);
                double t94920 = b2p*c*t94913*(1.0/3.0);
                double t94921 = b1p*c*t94913*t94915*(1.0/6.0);
                double t94922 = b3p*c*t94750*t94913*(1.0/2.0);
                double t94923 = t94920+t94921+t94922+t94919;
                double t94924 = t94923*t94917*t94765*t94918;
                double t94925 = Aa*t94902*t94771*t94818*t94882*t94892*t94894*2.0;
                double t94926 = t94852-c0f*t94904*t94916*2.0;
                v_rho_a_gamma_bb_[index] = -((ccab1*gcab*t94821*(1.0/2.0))/t94847-ccab1*t94821*t94825*t94853*t94819* \
                   (1.0/2.0)+ccab2*t94821*t94825*t94854*t94819-ccab2*t94826*t94844*t94845*t94819+ccab3*gcab*t94821*t94826* \
                   t94819*t94855*(3.0/2.0)-ccab3*gcab*t94831*t94851*t94825*t94826*t94819)*(t94807-t94852+t94925+rho_a[index]* \
                   (-t94924+t94771*t94768*(t94924-(t94904*1.0/(t94909*t94909)*(b2f*c*t94913*(1.0/3.0)+b4f*t94752*t94914* \
                   (2.0/3.0)+b1f*c*t94913*t94915*(1.0/6.0)+b3f*c*t94750*t94913*(1.0/2.0)))/t94912+a1f*c*c0f*t94913*t94916* \
                   (2.0/3.0)-a1p*c*c0p*t94913*t94763*(2.0/3.0))+a1p*c*c0p*t94913*t94763*(2.0/3.0))-t94790*(-t94881+t94812* \
                   t94813*t94771*t94818*(t94881-(1.0/(t94861*t94861)*t94867*(b2f*c*t94856*(1.0/3.0)+b4f*t94752*t94872* \
                   (2.0/3.0)+b1f*c*t94873*t94856*(1.0/6.0)+b3f*c*t94793*t94856*(1.0/2.0)))/t94864+a1f*c*c0f*t94856*t94865* \
                   (2.0/3.0)-a1p*c*c0p*t94804*t94856*(2.0/3.0))+a1p*c*c0p*t94804*t94856*(2.0/3.0)+t94900*t94812*t94813* \
                   t94771*t94868-t94813*t94771*t94818*t94868*t94895*4.0+t94812*t94771*t94808*t94809*t94818*t94868*4.0+ \
                   Aa*t94771*t94818*t94882*t94892*t94894*(t94813*t94895*4.0-t94812*t94808*t94809*4.0)*2.0-Aa*t94900*t94902* \
                   t94771*t94882*t94892*t94894*2.0-(t94902*t94771*t94818*t94882*t94894*1.0/(t94888*t94888)*(b2a*c*t94856* \
                   (1.0/3.0)+b4a*t94752*t94872*(2.0/3.0)+b1a*c*t94873*t94856*(1.0/6.0)+b3a*c*t94793*t94856*(1.0/2.0)) \
                   )/t94891+Aa*a1a*c*t94902*t94771*t94818*t94882*t94856*t94892*(2.0/3.0))+t94771*t94926*t94768-t94812* \
                   t94813*t94771*t94818*t94868)+(rho_a[index]*(t94852-t94771*t94926*t94768)+rho_b[index]*(t94789-t94771* \
                   t94768*(t94789-c0f*log((t94772*(1.0/2.0))/(b1f*t94775+b3f*t94776+b2f*c*t94773+b4f*t94752*t94777)+1.0) \
                   *(a1f*c*t94773+1.0)*2.0))-t94790*(t94807+t94925-t94812*t94813*t94771*t94818*t94868))*(ccab2*t94821* \
                   t94825*t94834*t94845*t94819-ccab2*t94834*t94826*t94844*t94819*1.0/(t94837*t94837*t94837)*2.0+ccab1* \
                   gamma_aa[index]*t94820*t94821*t94853*t94819*(4.0/3.0)-ccab2*gamma_aa[index]*t94820*t94821*t94854*t94819* \
                   (4.0/3.0)+ccab2*gamma_aa[index]*t94820*t94825*t94844*t94845*t94819*(8.0/3.0)+ccab3*gcab*t94821*t94831* \
                   t94841*t94826*t94819*(3.0/2.0)+ccab3*gcab*t94831*t94825*t94826*t94819*(gamma_aa[index]*t94820*t94821* \
                   t94819*4.0+gamma_aa[index]*gcab*t94820*t94821*t94825*t94819*4.0)+ccab2*gamma_aa[index]*t94820*t94821* \
                   t94826*t94845*(t94819*t94819)*(4.0/3.0)-ccab1*gamma_aa[index]*gcab*t94820*t94821*t94825*t94819*1.0/ \
                   (t94847*t94847*t94847)*(4.0/3.0)-ccab3*gcab*1.0/(t94830*t94830*t94830)*t94841*t94851*t94825*t94826* \
                   t94819*2.0+ccab3*gamma_aa[index]*gcab*t94820*t94831*t94851*t94826*t94819*4.0-ccab3*gamma_aa[index]* \
                   gcab*t94820*t94821*t94825*t94819*t94855*4.0);
            } else if (rho_a[index] > cutoff_) {
                v_rho_a_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_a_gamma_bb_[index] = 0.0;
            } else {
                v_rho_a_gamma_bb_[index] = 0.0;
            } 

            //V_rho_b_gamma_aa
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t94928 = 1.0/pow(rho_a[index],1.0/3.0);
                double t94929 = c*t94928;
                double t94930 = sqrt(t94929);
                double t94931 = pow(t94929,3.0/2.0);
                double t94932 = c*c;
                double t94933 = 1.0/pow(rho_a[index],2.0/3.0);
                double t94934 = 1.0/c0p;
                double t94935 = b1p*t94930;
                double t94936 = b3p*t94931;
                double t94937 = b4p*t94932*t94933;
                double t94938 = b2p*c*t94928;
                double t94939 = t94935+t94936+t94937+t94938;
                double t94940 = 1.0/t94939;
                double t94941 = t94940*t94934*(1.0/2.0);
                double t94942 = t94941+1.0;
                double t94943 = log(t94942);
                double t94944 = a1p*c*t94928;
                double t94945 = t94944+1.0;
                double t94946 = pow(2.0,1.0/3.0);
                double t94947 = t94946*2.0;
                double t94948 = t94947-2.0;
                double t94949 = two_13*2.0;
                double t94950 = t94949-2.0;
                double t94951 = 1.0/t94950;
                double t94952 = 1.0/c0f;
                double t94953 = 1.0/pow(rho_b[index],1.0/3.0);
                double t94954 = c*t94953;
                double t94955 = sqrt(t94954);
                double t94956 = pow(t94954,3.0/2.0);
                double t94957 = 1.0/pow(rho_b[index],2.0/3.0);
                double t94958 = b1p*t94955;
                double t94959 = b3p*t94956;
                double t94960 = b4p*t94932*t94957;
                double t94961 = b2p*c*t94953;
                double t94962 = t94960+t94961+t94958+t94959;
                double t94963 = 1.0/t94962;
                double t94964 = t94934*t94963*(1.0/2.0);
                double t94965 = t94964+1.0;
                double t94966 = log(t94965);
                double t94967 = a1p*c*t94953;
                double t94968 = t94967+1.0;
                double t94969 = c0p*t94966*t94968*2.0;
                double t94970 = rho_a[index]+rho_b[index];
                double t94971 = 1.0/pow(t94970,1.0/3.0);
                double t94972 = c*t94971;
                double t94973 = sqrt(t94972);
                double t94974 = pow(t94972,3.0/2.0);
                double t94975 = 1.0/pow(t94970,2.0/3.0);
                double t94976 = b1p*t94973;
                double t94977 = b3p*t94974;
                double t94978 = b4p*t94932*t94975;
                double t94979 = b2p*c*t94971;
                double t94980 = t94976+t94977+t94978+t94979;
                double t94981 = 1.0/t94980;
                double t94982 = t94934*t94981*(1.0/2.0);
                double t94983 = t94982+1.0;
                double t94984 = log(t94983);
                double t94985 = a1p*c*t94971;
                double t94986 = t94985+1.0;
                double t94987 = c0p*t94984*t94986*2.0;
                double t94988 = rho_a[index]-rho_b[index];
                double t94989 = t94988*t94988;
                double t94990 = 1.0/t94970;
                double t94991 = t94990*t94988;
                double t94992 = 1.0/(t94970*t94970*t94970*t94970);
                double t94993 = t94989*t94989;
                double t94994 = t94991+1.0;
                double t94995 = pow(t94994,4.0/3.0);
                double t94996 = -t94991+1.0;
                double t94997 = pow(t94996,4.0/3.0);
                double t94998 = t94995+t94997-2.0;
                double t94999 = gcab*gcab;
                double t95000 = 1.0/pow(rho_a[index],8.0/3.0);
                double t95001 = 1.0/pow(rho_b[index],1.1E1/3.0);
                double t95002 = gamma_aa[index]*t95000*(1.0/2.0);
                double t95003 = 1.0/pow(rho_b[index],8.0/3.0);
                double t95004 = gamma_bb[index]*t95003*(1.0/2.0);
                double t95005 = t95002+t95004;
                double t95006 = t95005*t95005;
                double t95007 = t94999*t95006*3.0;
                double t95008 = gcab*t94999*t95005*t95006;
                double t95009 = gcab*t95005*3.0;
                double t95010 = t95007+t95008+t95009+1.0;
                double t95011 = 1.0/(t95010*t95010);
                double t95012 = gamma_bb[index]*gcab*t95001*(8.0/3.0);
                double t95013 = gamma_bb[index]*t94999*t95001*t95005*(8.0/3.0);
                double t95014 = t95012+t95013;
                double t95015 = t94999*t95006;
                double t95016 = gcab*t95005*2.0;
                double t95017 = t95015+t95016+1.0;
                double t95018 = gamma_bb[index]*gcab*t95001*4.0;
                double t95019 = gamma_bb[index]*gcab*t94999*t95001*t95006*4.0;
                double t95020 = gamma_bb[index]*t94999*t95001*t95005*8.0;
                double t95021 = t95020+t95018+t95019;
                double t95022 = gcab*t95000;
                double t95023 = t94999*t95000*t95005;
                double t95024 = t95022+t95023;
                double t95025 = 1.0/(t95017*t95017);
                double t95026 = gcab*t95005;
                double t95027 = t95026+1.0;
                double t95028 = gcab*t95000*(3.0/2.0);
                double t95029 = t94999*t95000*t95005*3.0;
                double t95030 = gcab*t94999*t95000*t95006*(3.0/2.0);
                double t95031 = t95030+t95028+t95029;
                double t95032 = c0p*t94943*t94945*2.0;
                double t95033 = 1.0/(t95027*t95027);
                double t95034 = 1.0/t95017;
                double t95035 = 1.0/t95010;
                double t95036 = 1.0/pow(t94970,4.0/3.0);
                double t95037 = b1f*t94973;
                double t95038 = b3f*t94974;
                double t95039 = b4f*t94932*t94975;
                double t95040 = b2f*c*t94971;
                double t95041 = t95040+t95037+t95038+t95039;
                double t95042 = 1.0/t95041;
                double t95043 = t94952*t95042*(1.0/2.0);
                double t95044 = t95043+1.0;
                double t95045 = log(t95044);
                double t95046 = a1f*c*t94971;
                double t95047 = t95046+1.0;
                double t95049 = c0f*t95045*t95047*2.0;
                double t95048 = t94987-t95049;
                double t95050 = 1.0/(t94970*t94970);
                double t95051 = t94988*t95050;
                double t95052 = t94990+t95051;
                double t95053 = 1.0/pow(t94970,5.0/3.0);
                double t95054 = 1.0/sqrt(t94972);
                double t95055 = 1.0/t94983;
                double t95056 = 1.0/(t94980*t94980);
                double t95057 = b4p*t94932*t95053*(2.0/3.0);
                double t95058 = b2p*c*t95036*(1.0/3.0);
                double t95059 = b1p*c*t95036*t95054*(1.0/6.0);
                double t95060 = b3p*c*t94973*t95036*(1.0/2.0);
                double t95061 = t95060+t95057+t95058+t95059;
                double t95062 = 1.0/d2fz0;
                double t95063 = 1.0/Aa;
                double t95064 = b1a*t94973;
                double t95065 = b3a*t94974;
                double t95066 = b4a*t94932*t94975;
                double t95067 = b2a*c*t94971;
                double t95068 = t95064+t95065+t95066+t95067;
                double t95069 = 1.0/t95068;
                double t95070 = t95063*t95069*(1.0/2.0);
                double t95071 = t95070+1.0;
                double t95072 = log(t95071);
                double t95073 = a1a*c*t94971;
                double t95074 = t95073+1.0;
                double t95075 = 1.0/(t94970*t94970*t94970*t94970*t94970);
                double t95076 = pow(t94994,1.0/3.0);
                double t95077 = t95052*t95076*(4.0/3.0);
                double t95078 = pow(t94996,1.0/3.0);
                double t95079 = t95077-t95052*t95078*(4.0/3.0);
                double t95080 = t94992*t94993;
                double t95081 = t95080-1.0;
                double t95082 = t94986*t95061*t95055*t95056;
                double t95083 = a1f*c*t94953;
                double t95084 = t95083+1.0;
                double t95085 = b1f*t94955;
                double t95086 = b3f*t94956;
                double t95087 = b4f*t94932*t94957;
                double t95088 = b2f*c*t94953;
                double t95089 = t95085+t95086+t95087+t95088;
                double t95090 = 1.0/t95089;
                double t95091 = t94952*t95090*(1.0/2.0);
                double t95092 = t95091+1.0;
                double t95093 = 1.0/pow(rho_b[index],4.0/3.0);
                double t95094 = 1.0/pow(rho_b[index],5.0/3.0);
                double t95095 = 1.0/sqrt(t94954);
                double t95096 = log(t95092);
                double t95097 = 1.0/t94965;
                double t95098 = 1.0/(t94962*t94962);
                double t95099 = b4p*t94932*t95094*(2.0/3.0);
                double t95100 = b2p*c*t95093*(1.0/3.0);
                double t95101 = b1p*c*t95093*t95095*(1.0/6.0);
                double t95102 = b3p*c*t94955*t95093*(1.0/2.0);
                double t95103 = t95100+t95101+t95102+t95099;
                double t95104 = t94968*t95103*t95097*t95098;
                double t95105 = t94969-c0f*t95084*t95096*2.0;
                double t95106 = Aa*t94951*t94998*t95062*t95072*t95081*t95074*2.0;
                v_rho_b_gamma_aa_[index] = (rho_b[index]*(t94969-t94951*t94948*t95105)+rho_a[index]*(t95032-t94951* \
                   t94948*(t95032-c0f*log((t94952*(1.0/2.0))/(b1f*t94930+b3f*t94931+b2f*c*t94928+b4f*t94932*t94933)+1.0) \
                   *(a1f*c*t94928+1.0)*2.0))-t94970*(t94987+t95106-t94951*t94992*t94993*t94998*t95048))*(ccab2*t94999* \
                   t95000*t95005*t95014*t95025-ccab2*t94999*t95014*t95006*t95024*1.0/(t95017*t95017*t95017)*2.0+ccab1* \
                   gamma_bb[index]*t94999*t95000*t95001*t95033*(4.0/3.0)-ccab2*gamma_bb[index]*t94999*t95000*t95001*t95034* \
                   (4.0/3.0)+ccab2*gamma_bb[index]*t94999*t95001*t95005*t95024*t95025*(8.0/3.0)+ccab3*gcab*t94999*t95000* \
                   t95011*t95021*t95006*(3.0/2.0)+ccab3*gcab*t94999*t95011*t95005*t95006*(gamma_bb[index]*t94999*t95000* \
                   t95001*4.0+gamma_bb[index]*gcab*t94999*t95000*t95001*t95005*4.0)+ccab2*gamma_bb[index]*(t94999*t94999) \
                   *t95000*t95001*t95006*t95025*(4.0/3.0)-ccab1*gamma_bb[index]*gcab*t94999*t95000*t95001*t95005*1.0/ \
                   (t95027*t95027*t95027)*(4.0/3.0)-ccab3*gcab*t94999*1.0/(t95010*t95010*t95010)*t95021*t95031*t95005* \
                   t95006*2.0+ccab3*gamma_bb[index]*gcab*t94999*t95001*t95011*t95031*t95006*4.0-ccab3*gamma_bb[index]* \
                   gcab*t94999*t95000*t95001*t95005*t95035*4.0)-((ccab1*gcab*t95000*(1.0/2.0))/t95027-ccab1*t94999*t95000* \
                   t95005*t95033*(1.0/2.0)+ccab2*t94999*t95000*t95005*t95034-ccab2*t94999*t95006*t95024*t95025+ccab3* \
                   gcab*t94999*t95000*t95006*t95035*(3.0/2.0)-ccab3*gcab*t94999*t95011*t95031*t95005*t95006)*(-t94969+ \
                   t94987+t95106+t94970*(t95082-t94951*t94992*t94993*t94998*(t95082-(1.0/(t95041*t95041)*t95047*(b2f* \
                   c*t95036*(1.0/3.0)+b4f*t94932*t95053*(2.0/3.0)+b1f*c*t95036*t95054*(1.0/6.0)+b3f*c*t94973*t95036*(1.0/ \
                   2.0)))/t95044+a1f*c*c0f*t95036*t95045*(2.0/3.0)-a1p*c*c0p*t94984*t95036*(2.0/3.0))-a1p*c*c0p*t94984* \
                   t95036*(2.0/3.0)+t94951*t94992*t94993*t95048*t95079+t94951*t94993*t94998*t95048*t95075*4.0+t94951* \
                   t94992*t94988*t94989*t94998*t95048*4.0-Aa*t94951*t94998*t95062*t95072*t95074*(t94993*t95075*4.0+t94992* \
                   t94988*t94989*4.0)*2.0-Aa*t94951*t95062*t95072*t95081*t95074*t95079*2.0+(t94951*t94998*t95062*t95081* \
                   t95074*1.0/(t95068*t95068)*(b2a*c*t95036*(1.0/3.0)+b4a*t94932*t95053*(2.0/3.0)+b1a*c*t95036*t95054* \
                   (1.0/6.0)+b3a*c*t94973*t95036*(1.0/2.0)))/t95071-Aa*a1a*c*t94951*t94998*t95062*t95036*t95072*t95081* \
                   (2.0/3.0))+rho_b[index]*(-t95104+t94951*t94948*(t95104-(t95084*1.0/(t95089*t95089)*(b2f*c*t95093*(1.0/ \
                   3.0)+b4f*t94932*t95094*(2.0/3.0)+b1f*c*t95093*t95095*(1.0/6.0)+b3f*c*t94955*t95093*(1.0/2.0)))/t95092+ \
                   a1f*c*c0f*t95093*t95096*(2.0/3.0)-a1p*c*c0p*t94966*t95093*(2.0/3.0))+a1p*c*c0p*t94966*t95093*(2.0/ \
                   3.0))+t94951*t94948*t95105-t94951*t94992*t94993*t94998*t95048);
            } else if (rho_a[index] > cutoff_) {
                v_rho_b_gamma_aa_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_b_gamma_aa_[index] = 0.0;
            } else {
                v_rho_b_gamma_aa_[index] = 0.0;
            } 

            //V_rho_b_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_b_gamma_ab_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_b_gamma_ab_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_b_gamma_ab_[index] = 0.0;
            } else {
                v_rho_b_gamma_ab_[index] = 0.0;
            } 

            //V_rho_b_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t95109 = 1.0/pow(rho_a[index],1.0/3.0);
                double t95110 = c*t95109;
                double t95111 = sqrt(t95110);
                double t95112 = pow(t95110,3.0/2.0);
                double t95113 = c*c;
                double t95114 = 1.0/pow(rho_a[index],2.0/3.0);
                double t95115 = 1.0/c0p;
                double t95116 = b1p*t95111;
                double t95117 = b3p*t95112;
                double t95118 = b4p*t95113*t95114;
                double t95119 = b2p*c*t95109;
                double t95120 = t95116+t95117+t95118+t95119;
                double t95121 = 1.0/t95120;
                double t95122 = t95121*t95115*(1.0/2.0);
                double t95123 = t95122+1.0;
                double t95124 = log(t95123);
                double t95125 = a1p*c*t95109;
                double t95126 = t95125+1.0;
                double t95127 = pow(2.0,1.0/3.0);
                double t95128 = t95127*2.0;
                double t95129 = t95128-2.0;
                double t95130 = two_13*2.0;
                double t95131 = t95130-2.0;
                double t95132 = 1.0/t95131;
                double t95133 = 1.0/c0f;
                double t95134 = 1.0/pow(rho_b[index],1.0/3.0);
                double t95135 = c*t95134;
                double t95136 = sqrt(t95135);
                double t95137 = pow(t95135,3.0/2.0);
                double t95138 = 1.0/pow(rho_b[index],2.0/3.0);
                double t95139 = b1p*t95136;
                double t95140 = b3p*t95137;
                double t95141 = b4p*t95113*t95138;
                double t95142 = b2p*c*t95134;
                double t95143 = t95140+t95141+t95142+t95139;
                double t95144 = 1.0/t95143;
                double t95145 = t95115*t95144*(1.0/2.0);
                double t95146 = t95145+1.0;
                double t95147 = log(t95146);
                double t95148 = a1p*c*t95134;
                double t95149 = t95148+1.0;
                double t95150 = c0p*t95147*t95149*2.0;
                double t95151 = rho_a[index]+rho_b[index];
                double t95152 = 1.0/pow(t95151,1.0/3.0);
                double t95153 = c*t95152;
                double t95154 = sqrt(t95153);
                double t95155 = pow(t95153,3.0/2.0);
                double t95156 = 1.0/pow(t95151,2.0/3.0);
                double t95157 = b1p*t95154;
                double t95158 = b3p*t95155;
                double t95159 = b4p*t95113*t95156;
                double t95160 = b2p*c*t95152;
                double t95161 = t95160+t95157+t95158+t95159;
                double t95162 = 1.0/t95161;
                double t95163 = t95115*t95162*(1.0/2.0);
                double t95164 = t95163+1.0;
                double t95165 = log(t95164);
                double t95166 = a1p*c*t95152;
                double t95167 = t95166+1.0;
                double t95168 = c0p*t95165*t95167*2.0;
                double t95169 = rho_a[index]-rho_b[index];
                double t95170 = t95169*t95169;
                double t95171 = 1.0/t95151;
                double t95172 = t95171*t95169;
                double t95173 = 1.0/(t95151*t95151*t95151*t95151);
                double t95174 = t95170*t95170;
                double t95175 = t95172+1.0;
                double t95176 = pow(t95175,4.0/3.0);
                double t95177 = -t95172+1.0;
                double t95178 = pow(t95177,4.0/3.0);
                double t95179 = t95176+t95178-2.0;
                double t95180 = 1.0/pow(rho_b[index],1.1E1/3.0);
                double t95181 = 1.0/pow(rho_a[index],8.0/3.0);
                double t95182 = gamma_aa[index]*t95181*(1.0/2.0);
                double t95183 = 1.0/pow(rho_b[index],8.0/3.0);
                double t95184 = gamma_bb[index]*t95183*(1.0/2.0);
                double t95185 = t95182+t95184;
                double t95186 = gcab*t95185;
                double t95187 = t95186+1.0;
                double t95188 = gcab*gcab;
                double t95189 = t95185*t95185;
                double t95190 = 1.0/pow(rho_b[index],1.9E1/3.0);
                double t95191 = t95188*t95189;
                double t95192 = gcab*t95185*2.0;
                double t95193 = t95191+t95192+1.0;
                double t95194 = t95188*t95189*3.0;
                double t95195 = gcab*t95185*t95188*t95189;
                double t95196 = gcab*t95185*3.0;
                double t95197 = t95194+t95195+t95196+1.0;
                double t95198 = 1.0/(t95187*t95187);
                double t95199 = 1.0/t95193;
                double t95200 = 1.0/(t95197*t95197);
                double t95201 = 1.0/(t95193*t95193);
                double t95202 = gamma_bb[index]*gcab*t95180*(8.0/3.0);
                double t95203 = gamma_bb[index]*t95180*t95185*t95188*(8.0/3.0);
                double t95204 = t95202+t95203;
                double t95205 = 1.0/t95197;
                double t95206 = gamma_bb[index]*gcab*t95180*4.0;
                double t95207 = gamma_bb[index]*gcab*t95180*t95188*t95189*4.0;
                double t95208 = gamma_bb[index]*t95180*t95185*t95188*8.0;
                double t95209 = t95206+t95207+t95208;
                double t95210 = gcab*t95183;
                double t95211 = t95183*t95185*t95188;
                double t95212 = t95210+t95211;
                double t95213 = gcab*t95183*(3.0/2.0);
                double t95214 = t95183*t95185*t95188*3.0;
                double t95215 = gcab*t95183*t95188*t95189*(3.0/2.0);
                double t95216 = t95213+t95214+t95215;
                double t95217 = b1f*t95136;
                double t95218 = b3f*t95137;
                double t95219 = b4f*t95113*t95138;
                double t95220 = b2f*c*t95134;
                double t95221 = t95220+t95217+t95218+t95219;
                double t95222 = 1.0/t95221;
                double t95223 = t95222*t95133*(1.0/2.0);
                double t95224 = t95223+1.0;
                double t95225 = log(t95224);
                double t95226 = a1f*c*t95134;
                double t95227 = t95226+1.0;
                double t95361 = c0f*t95225*t95227*2.0;
                double t95228 = t95150-t95361;
                double t95362 = t95132*t95129*t95228;
                double t95229 = t95150-t95362;
                double t95230 = gcaa*gcaa;
                double t95231 = 1.0/pow(rho_b[index],1.6E1/3.0);
                double t95232 = gamma_bb[index]*gamma_bb[index];
                double t95233 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]);
                double t95234 = gamma_bb[index]*gcaa*t95183;
                double t95235 = t95234+1.0;
                double t95236 = gamma_bb[index]*gcaa*t95183*3.0;
                double t95237 = gamma_bb[index]*gcaa*t95230*t95232*t95233;
                double t95238 = t95230*t95231*t95232*3.0;
                double t95239 = t95236+t95237+t95238+1.0;
                double t95240 = gamma_bb[index]*gcaa*t95183*2.0;
                double t95241 = t95230*t95231*t95232;
                double t95242 = t95240+t95241+1.0;
                double t95243 = 1.0/tau_b[index];
                double t95244 = pow(rho_b[index],2.0/3.0);
                double t95245 = pow(rho_b[index],5.0/3.0);
                double t95246 = C_k*t95243*t95245;
                double t95247 = t95246-1.0;
                double t95248 = t95246+1.0;
                double t95249 = t95247*t95247;
                double t95250 = t95249*t95249;
                double t95251 = gx*gx;
                double t95252 = gamma_bb[index]*gx*t95183;
                double t95253 = t95252+1.0;
                double t95254 = gamma_bb[index]*gx*t95183*3.0;
                double t95255 = gamma_bb[index]*gx*t95232*t95233*t95251;
                double t95256 = t95231*t95232*t95251*3.0;
                double t95257 = t95254+t95255+t95256+1.0;
                double t95258 = gamma_bb[index]*gx*t95183*2.0;
                double t95259 = t95231*t95232*t95251;
                double t95260 = t95258+t95259+1.0;
                double t95261 = 1.0/t95248;
                double t95262 = 1.0/(t95248*t95248*t95248);
                double t95263 = 1.0/(t95248*t95248*t95248*t95248*t95248);
                double t95264 = 1.0/t95253;
                double t95265 = 1.0/t95260;
                double t95266 = 1.0/t95257;
                double t95267 = 1.0/(t95253*t95253);
                double t95268 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]*rho_b[index]);
                double t95269 = 1.0/(t95257*t95257);
                double t95270 = 1.0/(t95260*t95260);
                double t95271 = gx*t95183*3.0;
                double t95272 = gamma_bb[index]*t95231*t95251*6.0;
                double t95273 = gx*t95232*t95233*t95251*3.0;
                double t95274 = t95271+t95272+t95273;
                double t95275 = gx*t95183*2.0;
                double t95276 = gamma_bb[index]*t95231*t95251*2.0;
                double t95277 = t95275+t95276;
                double t95278 = gamma_bb[index]*gx*t95180*(1.6E1/3.0);
                double t95279 = t95232*t95251*t95190*(1.6E1/3.0);
                double t95280 = t95278+t95279;
                double t95281 = gamma_bb[index]*gx*t95180*8.0;
                double t95282 = gamma_bb[index]*gx*t95232*t95251*t95268*8.0;
                double t95283 = t95232*t95251*t95190*1.6E1;
                double t95284 = t95281+t95282+t95283;
                double t95285 = 1.0/(t95253*t95253*t95253);
                double t95286 = gx*t95180*8.0;
                double t95287 = gamma_bb[index]*t95251*t95190*3.2E1;
                double t95288 = gx*t95232*t95251*t95268*2.4E1;
                double t95289 = t95286+t95287+t95288;
                double t95290 = gx*t95180*(1.6E1/3.0);
                double t95291 = gamma_bb[index]*t95251*t95190*(3.2E1/3.0);
                double t95292 = t95290+t95291;
                double t95293 = 1.0/(t95260*t95260*t95260);
                double t95294 = 1.0/(t95257*t95257*t95257);
                double t95295 = t95261*t95247;
                double t95296 = t95250*t95263*t95247;
                double t95297 = t95295+t95296-t95262*t95247*t95249*2.0;
                double t95298 = cxnl1*gx*t95183*t95264;
                double t95299 = cxnl2*gamma_bb[index]*t95231*t95251*t95265*2.0;
                double t95300 = cxnl3*gx*t95232*t95233*t95251*t95266*3.0;
                double t95301 = t95300+t95298+t95299-cxnl1*gamma_bb[index]*t95231*t95251*t95267-cxnl2*t95231*t95232* \
                   t95251*t95270*t95277-cxnl3*gamma_bb[index]*gx*t95232*t95233*t95251*t95274*t95269;
                double t95302 = 1.0/t95187;
                double t95303 = 1.0/pow(t95151,4.0/3.0);
                double t95304 = b1f*t95154;
                double t95305 = b3f*t95155;
                double t95306 = b4f*t95113*t95156;
                double t95307 = b2f*c*t95152;
                double t95308 = t95304+t95305+t95306+t95307;
                double t95309 = 1.0/t95308;
                double t95310 = t95133*t95309*(1.0/2.0);
                double t95311 = t95310+1.0;
                double t95312 = log(t95311);
                double t95313 = a1f*c*t95152;
                double t95314 = t95313+1.0;
                double t95316 = c0f*t95312*t95314*2.0;
                double t95315 = -t95316+t95168;
                double t95317 = 1.0/(t95151*t95151);
                double t95318 = t95317*t95169;
                double t95319 = t95171+t95318;
                double t95320 = t95316-t95168;
                double t95321 = 1.0/pow(t95151,5.0/3.0);
                double t95322 = 1.0/sqrt(t95153);
                double t95323 = 1.0/t95164;
                double t95324 = 1.0/(t95161*t95161);
                double t95325 = b4p*t95113*t95321*(2.0/3.0);
                double t95326 = b2p*c*t95303*(1.0/3.0);
                double t95327 = b1p*c*t95303*t95322*(1.0/6.0);
                double t95328 = b3p*c*t95303*t95154*(1.0/2.0);
                double t95329 = t95325+t95326+t95327+t95328;
                double t95330 = 1.0/d2fz0;
                double t95331 = 1.0/Aa;
                double t95332 = b1a*t95154;
                double t95333 = b3a*t95155;
                double t95334 = b4a*t95113*t95156;
                double t95335 = b2a*c*t95152;
                double t95336 = t95332+t95333+t95334+t95335;
                double t95337 = 1.0/t95336;
                double t95338 = t95331*t95337*(1.0/2.0);
                double t95339 = t95338+1.0;
                double t95340 = log(t95339);
                double t95341 = a1a*c*t95152;
                double t95342 = t95341+1.0;
                double t95343 = 1.0/(t95151*t95151*t95151*t95151*t95151);
                double t95344 = pow(t95175,1.0/3.0);
                double t95345 = t95344*t95319*(4.0/3.0);
                double t95346 = pow(t95177,1.0/3.0);
                double t95347 = t95345-t95319*t95346*(4.0/3.0);
                double t95348 = t95173*t95174;
                double t95349 = t95348-1.0;
                double t95350 = 1.0/pow(rho_b[index],4.0/3.0);
                double t95351 = 1.0/pow(rho_b[index],5.0/3.0);
                double t95352 = 1.0/sqrt(t95135);
                double t95353 = 1.0/t95146;
                double t95354 = 1.0/(t95143*t95143);
                double t95355 = b4p*t95113*t95351*(2.0/3.0);
                double t95356 = b2p*c*t95350*(1.0/3.0);
                double t95357 = b1p*c*t95350*t95352*(1.0/6.0);
                double t95358 = b3p*c*t95350*t95136*(1.0/2.0);
                double t95359 = t95355+t95356+t95357+t95358;
                double t95360 = t95353*t95354*t95149*t95359;
                double t95363 = Aa*t95132*t95330*t95340*t95342*t95349*t95179*2.0;
                double t95364 = a1p*c*c0p*t95303*t95165*(2.0/3.0);
                double t95365 = 1.0/t95235;
                double t95366 = 1.0/t95242;
                double t95367 = 1.0/t95239;
                double t95368 = 1.0/(t95235*t95235);
                double t95369 = 1.0/(t95239*t95239);
                double t95370 = 1.0/(t95242*t95242);
                double t95371 = gcaa*t95183*3.0;
                double t95372 = gamma_bb[index]*t95230*t95231*6.0;
                double t95373 = gcaa*t95230*t95232*t95233*3.0;
                double t95374 = t95371+t95372+t95373;
                double t95375 = gcaa*t95183*2.0;
                double t95376 = gamma_bb[index]*t95230*t95231*2.0;
                double t95377 = t95375+t95376;
                double t95378 = gamma_bb[index]*gcaa*t95180*(1.6E1/3.0);
                double t95379 = t95230*t95232*t95190*(1.6E1/3.0);
                double t95380 = t95378+t95379;
                double t95381 = gamma_bb[index]*gcaa*t95180*8.0;
                double t95382 = gamma_bb[index]*gcaa*t95230*t95232*t95268*8.0;
                double t95383 = t95230*t95232*t95190*1.6E1;
                double t95384 = t95381+t95382+t95383;
                double t95385 = 1.0/t95224;
                double t95386 = 1.0/(t95221*t95221);
                double t95387 = b4f*t95113*t95351*(2.0/3.0);
                double t95388 = b2f*c*t95350*(1.0/3.0);
                double t95389 = b1f*c*t95350*t95352*(1.0/6.0);
                double t95390 = b3f*c*t95350*t95136*(1.0/2.0);
                double t95391 = t95390+t95387+t95388+t95389;
                double t95392 = a1f*c*c0f*t95350*t95225*(2.0/3.0);
                double t95393 = a1p*c*c0p*t95350*t95147*(2.0/3.0);
                double t95394 = ccaa1*gcaa*t95183*t95365;
                double t95395 = ccaa2*gamma_bb[index]*t95230*t95231*t95366*2.0;
                double t95396 = ccaa3*gcaa*t95230*t95232*t95233*t95367*3.0;
                double t95397 = t95394+t95395+t95396-ccaa1*gamma_bb[index]*t95230*t95231*t95368-ccaa2*t95230*t95231* \
                   t95232*t95370*t95377-ccaa3*gamma_bb[index]*gcaa*t95230*t95232*t95233*t95374*t95369;
                v_rho_b_gamma_bb_[index] = -t95229*t95397-(c0*pow(rho_b[index],1.0/3.0)*(t95301*t95297+cx1*gx*t95183* \
                   t95264-cx1*gamma_bb[index]*t95231*t95251*t95267+cx2*gamma_bb[index]*t95231*t95251*t95265*2.0-cx2*t95231* \
                   t95232*t95251*t95270*t95277+cx3*gx*t95232*t95233*t95251*t95266*3.0-cx3*gamma_bb[index]*gx*t95232*t95233* \
                   t95251*t95274*t95269)*(4.0/3.0)+c0*pow(rho_b[index],4.0/3.0)*(t95297*(cxnl1*gx*t95180*t95264*(-8.0/ \
                   3.0)-cxnl2*gamma_bb[index]*t95251*t95190*t95265*(3.2E1/3.0)+cxnl1*gamma_bb[index]*t95251*t95190*t95267* \
                   8.0+cxnl2*t95231*t95232*t95251*t95270*t95292+cxnl2*t95232*t95251*t95270*t95190*t95277*(1.6E1/3.0)+ \
                   cxnl2*gamma_bb[index]*t95231*t95251*t95270*t95280*2.0-cxnl1*gx*t95232*t95251*t95285*t95268*(1.6E1/ \
                   3.0)-cxnl3*gx*t95232*t95251*t95266*t95268*2.4E1+cxnl3*gx*t95232*t95233*t95251*t95284*t95269*3.0-cxnl2* \
                   t95231*t95232*t95251*t95280*t95293*t95277*2.0+cxnl3*gamma_bb[index]*gx*t95232*t95233*t95251*t95269* \
                   t95289+cxnl3*gamma_bb[index]*gx*t95232*t95251*t95274*t95268*t95269*8.0-cxnl3*gamma_bb[index]*gx*t95232* \
                   t95233*t95251*t95274*t95284*t95294*2.0)+t95301*(C_k*t95243*t95261*t95244*(5.0/3.0)+C_k*t95250*t95243* \
                   t95244*t95263*(2.5E1/3.0)-C_k*t95243*t95244*t95262*t95249*1.0E1-C_k*t95243*t95244*t95247*1.0/(t95248* \
                   t95248)*(5.0/3.0)-C_k*t95250*t95243*t95244*t95247*1.0/(t95248*t95248*t95248*t95248*t95248*t95248)* \
                   (2.5E1/3.0)+C_k*t95243*t95244*t95247*1.0/(t95248*t95248*t95248*t95248)*t95249*1.0E1)-cx1*gx*t95180* \
                   t95264*(8.0/3.0)+cx1*gamma_bb[index]*t95251*t95190*t95267*8.0-cx2*gamma_bb[index]*t95251*t95190*t95265* \
                   (3.2E1/3.0)+cx2*t95231*t95232*t95251*t95270*t95292+cx2*t95232*t95251*t95270*t95190*t95277*(1.6E1/3.0) \
                   +cx2*gamma_bb[index]*t95231*t95251*t95270*t95280*2.0-cx1*gx*t95232*t95251*t95285*t95268*(1.6E1/3.0) \
                   -cx3*gx*t95232*t95251*t95266*t95268*2.4E1+cx3*gx*t95232*t95233*t95251*t95284*t95269*3.0-cx2*t95231* \
                   t95232*t95251*t95280*t95293*t95277*2.0+cx3*gamma_bb[index]*gx*t95232*t95233*t95251*t95269*t95289+cx3* \
                   gamma_bb[index]*gx*t95232*t95251*t95274*t95268*t95269*8.0-cx3*gamma_bb[index]*gx*t95232*t95233*t95251* \
                   t95274*t95284*t95294*2.0))*(X-1.0)-(ccab1*gcab*t95302*t95183*(1.0/2.0)-ccab2*t95201*t95212*t95188* \
                   t95189-ccab1*t95183*t95185*t95188*t95198*(1.0/2.0)+ccab2*t95183*t95185*t95188*t95199+ccab3*gcab*t95205* \
                   t95183*t95188*t95189*(3.0/2.0)-ccab3*gcab*t95200*t95216*t95185*t95188*t95189)*(-t95150+t95362+t95363+ \
                   t95168+rho_b[index]*(-t95360+t95393+t95132*t95129*(t95360+t95392-t95227*t95391*t95385*t95386-a1p*c* \
                   c0p*t95350*t95147*(2.0/3.0)))-t95151*(t95364-t95323*t95324*t95167*t95329+t95320*t95132*t95173*t95174* \
                   t95347+t95320*t95132*t95343*t95174*t95179*4.0-t95132*t95173*t95174*t95179*(t95364-t95323*t95324*t95167* \
                   t95329+(t95314*1.0/(t95308*t95308)*(b2f*c*t95303*(1.0/3.0)+b4f*t95113*t95321*(2.0/3.0)+b1f*c*t95303* \
                   t95322*(1.0/6.0)+b3f*c*t95303*t95154*(1.0/2.0)))/t95311-a1f*c*c0f*t95303*t95312*(2.0/3.0))-t95132* \
                   t95170*t95315*t95173*t95169*t95179*4.0+Aa*t95132*t95330*t95340*t95342*t95179*(t95343*t95174*4.0+t95170* \
                   t95173*t95169*4.0)*2.0+Aa*t95132*t95330*t95340*t95342*t95347*t95349*2.0-(t95132*t95330*t95342*1.0/ \
                   (t95336*t95336)*t95349*t95179*(b2a*c*t95303*(1.0/3.0)+b4a*t95113*t95321*(2.0/3.0)+b1a*c*t95303*t95322* \
                   (1.0/6.0)+b3a*c*t95303*t95154*(1.0/2.0)))/t95339+Aa*a1a*c*t95132*t95303*t95330*t95340*t95349*t95179* \
                   (2.0/3.0))+t95320*t95132*t95173*t95174*t95179)+(-rho_b[index]*t95229+t95151*(t95363+t95168-t95132* \
                   t95315*t95173*t95174*t95179)+rho_a[index]*(t95132*t95129*(c0p*t95124*t95126*2.0-c0f*log((t95133*(1.0/ \
                   2.0))/(b1f*t95111+b3f*t95112+b2f*c*t95109+b4f*t95113*t95114)+1.0)*(a1f*c*t95109+1.0)*2.0)-c0p*t95124* \
                   t95126*2.0))*(ccab1*gcab*t95302*t95180*(4.0/3.0)-ccab2*t95201*t95188*t95189*(gcab*t95180*(8.0/3.0) \
                   +gamma_bb[index]*t95190*t95188*(4.0/3.0)+t95180*t95185*t95188*(8.0/3.0))-ccab1*gamma_bb[index]*t95190* \
                   t95188*t95198*(4.0/3.0)+ccab2*gamma_bb[index]*t95190*t95188*t95199*(4.0/3.0)-ccab1*t95180*t95185*t95188* \
                   t95198*(4.0/3.0)+ccab2*t95180*t95185*t95188*t95199*(8.0/3.0)-ccab2*t95201*t95204*t95183*t95185*t95188+ \
                   ccab2*t95212*t95204*1.0/(t95193*t95193*t95193)*t95188*t95189*2.0+ccab3*gcab*t95205*t95180*t95188*t95189* \
                   4.0+ccab3*gamma_bb[index]*gcab*t95205*t95190*t95185*t95188*4.0-ccab2*gamma_bb[index]*t95201*t95212* \
                   t95180*t95185*t95188*(8.0/3.0)-ccab3*gcab*t95200*t95209*t95183*t95188*t95189*(3.0/2.0)-ccab3*gcab* \
                   t95200*t95185*t95188*t95189*(gcab*t95180*4.0+gamma_bb[index]*t95190*t95188*4.0+t95180*t95185*t95188* \
                   8.0+gcab*t95180*t95188*t95189*4.0+gamma_bb[index]*gcab*t95190*t95185*t95188*4.0)+ccab1*gamma_bb[index]* \
                   gcab*t95190*t95185*1.0/(t95187*t95187*t95187)*t95188*(4.0/3.0)+ccab3*gcab*t95216*t95209*t95185*t95188* \
                   1.0/(t95197*t95197*t95197)*t95189*2.0-ccab3*gamma_bb[index]*gcab*t95200*t95180*t95216*t95188*t95189* \
                   4.0)+rho_b[index]*t95397*(-t95360+t95393+t95132*t95129*(t95360+t95392-t95393-t95227*t95391*t95385* \
                   t95386))-rho_b[index]*t95229*(ccaa1*gcaa*t95180*t95365*(-8.0/3.0)-ccaa2*gamma_bb[index]*t95230*t95190* \
                   t95366*(3.2E1/3.0)+ccaa1*gamma_bb[index]*t95230*t95190*t95368*8.0+ccaa2*t95230*t95232*t95190*t95370* \
                   t95377*(1.6E1/3.0)-ccaa1*gcaa*t95230*t95232*1.0/(t95235*t95235*t95235)*t95268*(1.6E1/3.0)+ccaa2*t95230* \
                   t95231*t95232*t95370*(gcaa*t95180*(1.6E1/3.0)+gamma_bb[index]*t95230*t95190*(3.2E1/3.0))+ccaa2*gamma_bb[index]* \
                   t95230*t95231*t95370*t95380*2.0-ccaa3*gcaa*t95230*t95232*t95268*t95367*2.4E1+ccaa3*gcaa*t95230*t95232* \
                   t95233*t95384*t95369*3.0-ccaa2*t95230*t95231*t95232*1.0/(t95242*t95242*t95242)*t95380*t95377*2.0+ccaa3* \
                   gamma_bb[index]*gcaa*t95230*t95232*t95233*t95369*(gcaa*t95180*8.0+gamma_bb[index]*t95230*t95190*3.2E1+ \
                   gcaa*t95230*t95232*t95268*2.4E1)+ccaa3*gamma_bb[index]*gcaa*t95230*t95232*t95374*t95268*t95369*8.0- \
                   ccaa3*gamma_bb[index]*gcaa*t95230*t95232*t95233*1.0/(t95239*t95239*t95239)*t95374*t95384*2.0);
            } else if (rho_a[index] > cutoff_) {
                v_rho_b_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                double t96473 = 1.0/pow(rho_b[index],1.0/3.0);
                double t96474 = c*t96473;
                double t96475 = sqrt(t96474);
                double t96476 = pow(t96474,3.0/2.0);
                double t96477 = c*c;
                double t96478 = 1.0/pow(rho_b[index],2.0/3.0);
                double t96479 = 1.0/c0p;
                double t96480 = b1p*t96475;
                double t96481 = b3p*t96476;
                double t96482 = b4p*t96477*t96478;
                double t96483 = b2p*c*t96473;
                double t96484 = t96480+t96481+t96482+t96483;
                double t96485 = 1.0/t96484;
                double t96486 = t96485*t96479*(1.0/2.0);
                double t96487 = t96486+1.0;
                double t96488 = log(t96487);
                double t96489 = a1p*c*t96473;
                double t96490 = t96489+1.0;
                double t96491 = 1.0/pow(rho_b[index],8.0/3.0);
                double t96492 = gcaa*gcaa;
                double t96493 = 1.0/pow(rho_b[index],1.6E1/3.0);
                double t96494 = gamma_bb[index]*gamma_bb[index];
                double t96495 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]);
                double t96496 = gamma_bb[index]*gcaa*t96491;
                double t96497 = t96496+1.0;
                double t96498 = gamma_bb[index]*gcaa*t96491*3.0;
                double t96499 = gamma_bb[index]*gcaa*t96492*t96494*t96495;
                double t96500 = t96492*t96493*t96494*3.0;
                double t96501 = t96500+t96498+t96499+1.0;
                double t96502 = gamma_bb[index]*gcaa*t96491*2.0;
                double t96503 = t96492*t96493*t96494;
                double t96504 = t96502+t96503+1.0;
                double t96505 = pow(2.0,1.0/3.0);
                double t96506 = t96505*2.0;
                double t96507 = t96506-2.0;
                double t96508 = two_13*2.0;
                double t96509 = t96508-2.0;
                double t96510 = 1.0/t96509;
                double t96511 = 1.0/c0f;
                double t96512 = b1f*t96475;
                double t96513 = b3f*t96476;
                double t96514 = b4f*t96477*t96478;
                double t96515 = b2f*c*t96473;
                double t96516 = t96512+t96513+t96514+t96515;
                double t96517 = 1.0/t96516;
                double t96518 = t96511*t96517*(1.0/2.0);
                double t96519 = t96518+1.0;
                double t96520 = log(t96519);
                double t96521 = a1f*c*t96473;
                double t96522 = t96521+1.0;
                double t96523 = c0f*t96520*t96522*2.0;
                double t96524 = c0p*t96490*t96488*2.0;
                double t96525 = 1.0/t96497;
                double t96526 = 1.0/t96504;
                double t96527 = 1.0/t96501;
                double t96528 = 1.0/pow(rho_b[index],1.9E1/3.0);
                double t96529 = 1.0/(t96497*t96497);
                double t96530 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]*rho_b[index]);
                double t96531 = 1.0/pow(rho_b[index],1.1E1/3.0);
                double t96532 = 1.0/(t96501*t96501);
                double t96533 = 1.0/(t96504*t96504);
                double t96534 = gcaa*t96491*3.0;
                double t96535 = gamma_bb[index]*t96492*t96493*6.0;
                double t96536 = gcaa*t96492*t96494*t96495*3.0;
                double t96537 = t96534+t96535+t96536;
                double t96538 = gcaa*t96491*2.0;
                double t96539 = gamma_bb[index]*t96492*t96493*2.0;
                double t96540 = t96538+t96539;
                double t96541 = gamma_bb[index]*gcaa*t96531*(1.6E1/3.0);
                double t96542 = t96492*t96528*t96494*(1.6E1/3.0);
                double t96543 = t96541+t96542;
                double t96544 = gamma_bb[index]*gcaa*t96531*8.0;
                double t96545 = gamma_bb[index]*gcaa*t96530*t96492*t96494*8.0;
                double t96546 = t96492*t96528*t96494*1.6E1;
                double t96547 = t96544+t96545+t96546;
                double t96548 = 1.0/pow(rho_b[index],4.0/3.0);
                double t96549 = 1.0/pow(rho_b[index],5.0/3.0);
                double t96550 = 1.0/sqrt(t96474);
                double t96551 = 1.0/t96487;
                double t96552 = 1.0/(t96484*t96484);
                double t96553 = b4p*t96477*t96549*(2.0/3.0);
                double t96554 = b2p*c*t96548*(1.0/3.0);
                double t96555 = b1p*c*t96550*t96548*(1.0/6.0);
                double t96556 = b3p*c*t96475*t96548*(1.0/2.0);
                double t96557 = t96553+t96554+t96555+t96556;
                double t96558 = t96551*t96552*t96490*t96557;
                double t96559 = ccaa1*gcaa*t96525*t96491;
                double t96560 = ccaa2*gamma_bb[index]*t96526*t96492*t96493*2.0;
                double t96561 = ccaa3*gcaa*t96527*t96492*t96494*t96495*3.0;
                double t96562 = t96560+t96561+t96559-ccaa1*gamma_bb[index]*t96492*t96493*t96529-ccaa2*t96540*t96533* \
                   t96492*t96493*t96494-ccaa3*gamma_bb[index]*gcaa*t96532*t96492*t96537*t96494*t96495;
                double t96563 = 1.0/tau_b[index];
                double t96564 = pow(rho_b[index],2.0/3.0);
                double t96565 = pow(rho_b[index],5.0/3.0);
                double t96566 = C_k*t96563*t96565;
                double t96567 = t96566-1.0;
                double t96568 = t96566+1.0;
                double t96569 = t96567*t96567;
                double t96570 = t96569*t96569;
                double t96571 = gx*gx;
                double t96572 = gamma_bb[index]*gx*t96491;
                double t96573 = t96572+1.0;
                double t96574 = gamma_bb[index]*gx*t96491*3.0;
                double t96575 = gamma_bb[index]*gx*t96571*t96494*t96495;
                double t96576 = t96571*t96493*t96494*3.0;
                double t96577 = t96574+t96575+t96576+1.0;
                double t96578 = gamma_bb[index]*gx*t96491*2.0;
                double t96579 = t96571*t96493*t96494;
                double t96580 = t96578+t96579+1.0;
                double t96581 = 1.0/t96568;
                double t96582 = 1.0/(t96568*t96568*t96568);
                double t96583 = 1.0/(t96568*t96568*t96568*t96568*t96568);
                double t96584 = 1.0/t96573;
                double t96585 = 1.0/t96580;
                double t96586 = 1.0/t96577;
                double t96587 = 1.0/(t96573*t96573);
                double t96588 = 1.0/(t96577*t96577);
                double t96589 = 1.0/(t96580*t96580);
                double t96590 = gx*t96491*3.0;
                double t96591 = gamma_bb[index]*t96571*t96493*6.0;
                double t96592 = gx*t96571*t96494*t96495*3.0;
                double t96593 = t96590+t96591+t96592;
                double t96594 = gx*t96491*2.0;
                double t96595 = gamma_bb[index]*t96571*t96493*2.0;
                double t96596 = t96594+t96595;
                double t96597 = gamma_bb[index]*gx*t96531*(1.6E1/3.0);
                double t96598 = t96571*t96528*t96494*(1.6E1/3.0);
                double t96599 = t96597+t96598;
                double t96600 = gamma_bb[index]*gx*t96531*8.0;
                double t96601 = gamma_bb[index]*gx*t96530*t96571*t96494*8.0;
                double t96602 = t96571*t96528*t96494*1.6E1;
                double t96603 = t96600+t96601+t96602;
                double t96604 = 1.0/(t96573*t96573*t96573);
                double t96605 = gx*t96531*8.0;
                double t96606 = gamma_bb[index]*t96571*t96528*3.2E1;
                double t96607 = gx*t96530*t96571*t96494*2.4E1;
                double t96608 = t96605+t96606+t96607;
                double t96609 = gx*t96531*(1.6E1/3.0);
                double t96610 = gamma_bb[index]*t96571*t96528*(3.2E1/3.0);
                double t96611 = t96610+t96609;
                double t96612 = 1.0/(t96580*t96580*t96580);
                double t96613 = 1.0/(t96577*t96577*t96577);
                double t96614 = X-1.0;
                double t96615 = t96581*t96567;
                double t96616 = t96570*t96583*t96567;
                double t96617 = t96615+t96616-t96582*t96567*t96569*2.0;
                double t96618 = cxnl1*gx*t96491*t96584;
                double t96619 = cxnl2*gamma_bb[index]*t96571*t96493*t96585*2.0;
                double t96620 = cxnl3*gx*t96571*t96494*t96495*t96586*3.0;
                double t96621 = t96620+t96618+t96619-cxnl1*gamma_bb[index]*t96571*t96493*t96587-cxnl2*t96571*t96493* \
                   t96494*t96596*t96589-cxnl3*gamma_bb[index]*gx*t96571*t96494*t96593*t96495*t96588;
                v_rho_b_gamma_bb_[index] = -t96562*(t96524+t96510*t96507*(t96523-c0p*t96490*t96488*2.0))+rho_b[index]* \
                   t96562*(-t96558+t96510*t96507*(t96558-(t96522*1.0/(t96516*t96516)*(b2f*c*t96548*(1.0/3.0)+b4f*t96477* \
                   t96549*(2.0/3.0)+b1f*c*t96550*t96548*(1.0/6.0)+b3f*c*t96475*t96548*(1.0/2.0)))/t96519+a1f*c*c0f*t96520* \
                   t96548*(2.0/3.0)-a1p*c*c0p*t96548*t96488*(2.0/3.0))+a1p*c*c0p*t96548*t96488*(2.0/3.0))-rho_b[index]* \
                   (t96524+t96510*t96507*(t96523-t96524))*(ccaa1*gcaa*t96531*t96525*(-8.0/3.0)-ccaa2*gamma_bb[index]* \
                   t96526*t96492*t96528*(3.2E1/3.0)+ccaa1*gamma_bb[index]*t96492*t96528*t96529*8.0+ccaa2*t96540*t96533* \
                   t96492*t96528*t96494*(1.6E1/3.0)-ccaa1*gcaa*t96530*t96492*t96494*1.0/(t96497*t96497*t96497)*(1.6E1/ \
                   3.0)+ccaa2*t96533*t96492*t96493*t96494*(gcaa*t96531*(1.6E1/3.0)+gamma_bb[index]*t96492*t96528*(3.2E1/ \
                   3.0))+ccaa2*gamma_bb[index]*t96533*t96543*t96492*t96493*2.0-ccaa3*gcaa*t96530*t96527*t96492*t96494* \
                   2.4E1+ccaa3*gcaa*t96532*t96492*t96547*t96494*t96495*3.0-ccaa2*1.0/(t96504*t96504*t96504)*t96540*t96543* \
                   t96492*t96493*t96494*2.0+ccaa3*gamma_bb[index]*gcaa*t96532*t96492*t96494*t96495*(gcaa*t96531*8.0+gamma_bb[index]* \
                   t96492*t96528*3.2E1+gcaa*t96530*t96492*t96494*2.4E1)+ccaa3*gamma_bb[index]*gcaa*t96530*t96532*t96492* \
                   t96537*t96494*8.0-ccaa3*gamma_bb[index]*gcaa*1.0/(t96501*t96501*t96501)*t96492*t96537*t96547*t96494* \
                   t96495*2.0)-c0*pow(rho_b[index],4.0/3.0)*t96614*(t96617*(cxnl1*gx*t96531*t96584*(-8.0/3.0)-cxnl2*gamma_bb[index]* \
                   t96571*t96528*t96585*(3.2E1/3.0)+cxnl1*gamma_bb[index]*t96571*t96528*t96587*8.0+cxnl2*t96611*t96571* \
                   t96493*t96494*t96589+cxnl2*t96571*t96528*t96494*t96596*t96589*(1.6E1/3.0)+cxnl2*gamma_bb[index]*t96571* \
                   t96493*t96589*t96599*2.0-cxnl1*gx*t96530*t96604*t96571*t96494*(1.6E1/3.0)-cxnl3*gx*t96530*t96571*t96494* \
                   t96586*2.4E1+cxnl3*gx*t96603*t96571*t96494*t96495*t96588*3.0-cxnl2*t96612*t96571*t96493*t96494*t96596* \
                   t96599*2.0+cxnl3*gamma_bb[index]*gx*t96530*t96571*t96494*t96593*t96588*8.0+cxnl3*gamma_bb[index]*gx* \
                   t96571*t96608*t96494*t96495*t96588-cxnl3*gamma_bb[index]*gx*t96603*t96613*t96571*t96494*t96593*t96495* \
                   2.0)+t96621*(C_k*t96563*t96581*t96564*(5.0/3.0)+C_k*t96570*t96563*t96564*t96583*(2.5E1/3.0)-C_k*t96563* \
                   t96564*t96582*t96569*1.0E1-C_k*t96563*t96564*t96567*1.0/(t96568*t96568)*(5.0/3.0)-C_k*t96570*t96563* \
                   t96564*t96567*1.0/(t96568*t96568*t96568*t96568*t96568*t96568)*(2.5E1/3.0)+C_k*t96563*t96564*t96567* \
                   1.0/(t96568*t96568*t96568*t96568)*t96569*1.0E1)-cx1*gx*t96531*t96584*(8.0/3.0)+cx1*gamma_bb[index]* \
                   t96571*t96528*t96587*8.0-cx2*gamma_bb[index]*t96571*t96528*t96585*(3.2E1/3.0)+cx2*t96611*t96571*t96493* \
                   t96494*t96589+cx2*t96571*t96528*t96494*t96596*t96589*(1.6E1/3.0)+cx2*gamma_bb[index]*t96571*t96493* \
                   t96589*t96599*2.0-cx1*gx*t96530*t96604*t96571*t96494*(1.6E1/3.0)-cx3*gx*t96530*t96571*t96494*t96586* \
                   2.4E1+cx3*gx*t96603*t96571*t96494*t96495*t96588*3.0-cx2*t96612*t96571*t96493*t96494*t96596*t96599* \
                   2.0+cx3*gamma_bb[index]*gx*t96530*t96571*t96494*t96593*t96588*8.0+cx3*gamma_bb[index]*gx*t96571*t96608* \
                   t96494*t96495*t96588-cx3*gamma_bb[index]*gx*t96603*t96613*t96571*t96494*t96593*t96495*2.0)-c0*pow(rho_b[index],1.0/ \
                   3.0)*t96614*(t96621*t96617+cx1*gx*t96491*t96584-cx1*gamma_bb[index]*t96571*t96493*t96587+cx2*gamma_bb[index]* \
                   t96571*t96493*t96585*2.0-cx2*t96571*t96493*t96494*t96596*t96589+cx3*gx*t96571*t96494*t96495*t96586* \
                   3.0-cx3*gamma_bb[index]*gx*t96571*t96494*t96593*t96495*t96588)*(4.0/3.0);
            } else {
                v_rho_b_gamma_bb_[index] = 0.0;
            } 

            //V_gamma_aa_gamma_aa
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t95399 = 1.0/pow(rho_a[index],1.0/3.0);
                double t95400 = c*t95399;
                double t95401 = sqrt(t95400);
                double t95402 = pow(t95400,3.0/2.0);
                double t95403 = c*c;
                double t95404 = 1.0/pow(rho_a[index],2.0/3.0);
                double t95405 = 1.0/c0p;
                double t95406 = b1p*t95401;
                double t95407 = b3p*t95402;
                double t95408 = b4p*t95403*t95404;
                double t95409 = b2p*c*t95399;
                double t95410 = t95406+t95407+t95408+t95409;
                double t95411 = 1.0/t95410;
                double t95412 = t95411*t95405*(1.0/2.0);
                double t95413 = t95412+1.0;
                double t95414 = log(t95413);
                double t95415 = a1p*c*t95399;
                double t95416 = t95415+1.0;
                double t95417 = pow(2.0,1.0/3.0);
                double t95418 = t95417*2.0;
                double t95419 = t95418-2.0;
                double t95420 = two_13*2.0;
                double t95421 = t95420-2.0;
                double t95422 = 1.0/t95421;
                double t95423 = 1.0/c0f;
                double t95424 = 1.0/pow(rho_b[index],1.0/3.0);
                double t95425 = c*t95424;
                double t95426 = sqrt(t95425);
                double t95427 = pow(t95425,3.0/2.0);
                double t95428 = 1.0/pow(rho_b[index],2.0/3.0);
                double t95429 = b1p*t95426;
                double t95430 = b3p*t95427;
                double t95431 = b4p*t95403*t95428;
                double t95432 = b2p*c*t95424;
                double t95433 = t95430+t95431+t95432+t95429;
                double t95434 = 1.0/t95433;
                double t95435 = t95405*t95434*(1.0/2.0);
                double t95436 = t95435+1.0;
                double t95437 = log(t95436);
                double t95438 = a1p*c*t95424;
                double t95439 = t95438+1.0;
                double t95440 = c0p*t95437*t95439*2.0;
                double t95441 = rho_a[index]+rho_b[index];
                double t95442 = 1.0/pow(t95441,1.0/3.0);
                double t95443 = c*t95442;
                double t95444 = sqrt(t95443);
                double t95445 = pow(t95443,3.0/2.0);
                double t95446 = 1.0/pow(t95441,2.0/3.0);
                double t95447 = b1p*t95444;
                double t95448 = b3p*t95445;
                double t95449 = b4p*t95403*t95446;
                double t95450 = b2p*c*t95442;
                double t95451 = t95450+t95447+t95448+t95449;
                double t95452 = 1.0/t95451;
                double t95453 = t95405*t95452*(1.0/2.0);
                double t95454 = t95453+1.0;
                double t95455 = log(t95454);
                double t95456 = a1p*c*t95442;
                double t95457 = t95456+1.0;
                double t95458 = c0p*t95455*t95457*2.0;
                double t95459 = rho_a[index]-rho_b[index];
                double t95460 = t95459*t95459;
                double t95461 = 1.0/t95441;
                double t95462 = t95461*t95459;
                double t95463 = 1.0/(t95441*t95441*t95441*t95441);
                double t95464 = t95460*t95460;
                double t95465 = t95462+1.0;
                double t95466 = pow(t95465,4.0/3.0);
                double t95467 = -t95462+1.0;
                double t95468 = pow(t95467,4.0/3.0);
                double t95469 = t95466+t95468-2.0;
                double t95470 = gcab*gcab;
                double t95471 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t95472 = 1.0/pow(rho_a[index],8.0/3.0);
                double t95473 = gamma_aa[index]*t95472*(1.0/2.0);
                double t95474 = 1.0/pow(rho_b[index],8.0/3.0);
                double t95475 = gamma_bb[index]*t95474*(1.0/2.0);
                double t95476 = t95473+t95475;
                double t95477 = gcab*t95476;
                double t95478 = t95477+1.0;
                double t95479 = t95476*t95476;
                double t95480 = t95470*t95479;
                double t95481 = gcab*t95476*2.0;
                double t95482 = t95480+t95481+1.0;
                double t95492 = gcab*t95472*(3.0/2.0);
                double t95493 = t95470*t95472*t95476*3.0;
                double t95494 = gcab*t95470*t95472*t95479*(3.0/2.0);
                double t95483 = t95492+t95493+t95494;
                double t95484 = t95470*t95479*3.0;
                double t95485 = gcab*t95470*t95476*t95479;
                double t95486 = gcab*t95476*3.0;
                double t95487 = t95484+t95485+t95486+1.0;
                double t95489 = gcab*t95472;
                double t95490 = t95470*t95472*t95476;
                double t95488 = t95490+t95489;
                double t95491 = 1.0/(t95482*t95482);
                double t95495 = 1.0/(t95487*t95487);
                double t95496 = c0p*t95414*t95416*2.0;
                double t95497 = b1f*t95401;
                double t95498 = b3f*t95402;
                double t95499 = b4f*t95403*t95404;
                double t95500 = b2f*c*t95399;
                double t95501 = t95500+t95497+t95498+t95499;
                double t95502 = 1.0/t95501;
                double t95503 = t95502*t95423*(1.0/2.0);
                double t95504 = t95503+1.0;
                double t95505 = log(t95504);
                double t95506 = a1f*c*t95399;
                double t95507 = t95506+1.0;
                double t95508 = t95496-c0f*t95505*t95507*2.0;
                double t95509 = t95496-t95422*t95508*t95419;
                double t95510 = gcaa*gcaa;
                double t95511 = gamma_aa[index]*gcaa*t95472;
                double t95512 = t95511+1.0;
                double t95513 = gamma_aa[index]*gamma_aa[index];
                double t95514 = gamma_aa[index]*gcaa*t95472*2.0;
                double t95515 = t95510*t95513*t95471;
                double t95516 = t95514+t95515+1.0;
                double t95517 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t95518 = gamma_aa[index]*gcaa*t95472*3.0;
                double t95519 = gamma_aa[index]*gcaa*t95510*t95513*t95517;
                double t95520 = t95510*t95513*t95471*3.0;
                double t95521 = t95520+t95518+t95519+1.0;
                double t95524 = gcaa*t95472*2.0;
                double t95525 = gamma_aa[index]*t95510*t95471*2.0;
                double t95522 = t95524+t95525;
                double t95523 = 1.0/(t95521*t95521);
                double t95526 = 1.0/(t95516*t95516);
                double t95527 = gcaa*t95472*3.0;
                double t95528 = gamma_aa[index]*t95510*t95471*6.0;
                double t95529 = gcaa*t95510*t95513*t95517*3.0;
                double t95530 = t95527+t95528+t95529;
                double t95531 = pow(rho_a[index],5.0/3.0);
                double t95532 = 1.0/tau_a[index];
                double t95533 = C_k*t95531*t95532;
                double t95534 = t95533-1.0;
                double t95535 = t95534*t95534;
                double t95536 = t95533+1.0;
                double t95537 = t95535*t95535;
                double t95538 = gx*gx;
                double t95539 = gamma_aa[index]*gx*t95472;
                double t95540 = t95539+1.0;
                double t95541 = 1.0/pow(rho_a[index],3.2E1/3.0);
                double t95542 = gamma_aa[index]*gx*t95472*2.0;
                double t95543 = t95513*t95471*t95538;
                double t95544 = t95542+t95543+1.0;
                double t95545 = gamma_aa[index]*gx*t95472*3.0;
                double t95546 = gamma_aa[index]*gx*t95513*t95517*t95538;
                double t95547 = t95513*t95471*t95538*3.0;
                double t95548 = t95545+t95546+t95547+1.0;
                double t95551 = gx*t95472*2.0;
                double t95552 = gamma_aa[index]*t95471*t95538*2.0;
                double t95549 = t95551+t95552;
                double t95550 = 1.0/(t95548*t95548);
                double t95553 = 1.0/(t95544*t95544);
                double t95554 = gx*t95472*3.0;
                double t95555 = gamma_aa[index]*t95471*t95538*6.0;
                double t95556 = gx*t95513*t95517*t95538*3.0;
                double t95557 = t95554+t95555+t95556;
                double t95558 = 1.0/(t95540*t95540);
                double t95559 = 1.0/t95544;
                double t95560 = 1.0/t95548;
                double t95561 = 1.0/(t95540*t95540*t95540);
                double t95562 = t95538*t95538;
                double t95563 = t95471*t95538*6.0;
                double t95564 = gamma_aa[index]*gx*t95517*t95538*6.0;
                double t95565 = t95563+t95564;
                double t95566 = t95549*t95549;
                double t95567 = 1.0/(t95544*t95544*t95544);
                double t95568 = t95557*t95557;
                double t95569 = 1.0/(t95548*t95548*t95548);
                v_gamma_aa_gamma_aa_[index] = (rho_a[index]*t95509+rho_b[index]*(t95440-t95422*t95419*(t95440-c0f* \
                   log((t95423*(1.0/2.0))/(b1f*t95426+b3f*t95427+b2f*c*t95424+b4f*t95403*t95428)+1.0)*(a1f*c*t95424+1.0) \
                   *2.0))-t95441*(t95458-t95422*t95463*t95464*t95469*(t95458-c0f*log((t95423*(1.0/2.0))/(b1f*t95444+b3f* \
                   t95445+b2f*c*t95442+b4f*t95403*t95446)+1.0)*(a1f*c*t95442+1.0)*2.0)+(Aa*t95422*t95469*log((1.0/2.0) \
                   /(Aa*(b1a*t95444+b3a*t95445+b2a*c*t95442+b4a*t95403*t95446))+1.0)*(t95463*t95464-1.0)*(a1a*c*t95442+ \
                   1.0)*2.0)/d2fz0))*((ccab2*t95470*t95471*(1.0/2.0))/t95482-ccab1*t95470*t95471*1.0/(t95478*t95478)* \
                   (1.0/2.0)+ccab2*t95470*1.0/(t95482*t95482*t95482)*t95479*(t95488*t95488)*2.0-ccab2*(t95470*t95470) \
                   *t95471*t95491*t95479*(1.0/2.0)-ccab2*t95470*t95472*t95491*t95476*t95488*2.0+ccab1*gcab*t95470*t95471* \
                   t95476*1.0/(t95478*t95478*t95478)*(1.0/2.0)+(ccab3*gcab*t95470*t95471*t95476*(3.0/2.0))/t95487+ccab3* \
                   gcab*t95470*(t95483*t95483)*t95476*1.0/(t95487*t95487*t95487)*t95479*2.0-ccab3*gcab*t95470*t95472* \
                   t95483*t95495*t95479*3.0-ccab3*gcab*t95470*t95476*t95495*t95479*(t95470*t95471*(3.0/2.0)+gcab*t95470* \
                   t95471*t95476*(3.0/2.0)))+rho_a[index]*t95509*(ccaa1*t95510*1.0/(t95512*t95512)*t95471*2.0-(ccaa2* \
                   t95510*t95471*2.0)/t95516+ccaa2*(t95510*t95510)*t95513*t95541*t95526*2.0-ccaa1*gamma_aa[index]*gcaa* \
                   t95510*1.0/(t95512*t95512*t95512)*t95517*2.0-(ccaa3*gamma_aa[index]*gcaa*t95510*t95517*6.0)/t95521- \
                   ccaa2*t95510*t95513*(t95522*t95522)*t95471*1.0/(t95516*t95516*t95516)*2.0+ccaa2*gamma_aa[index]*t95510* \
                   t95522*t95471*t95526*4.0+ccaa3*gcaa*t95510*t95530*t95513*t95523*t95517*6.0+ccaa3*gamma_aa[index]*gcaa* \
                   t95510*t95513*t95523*t95517*(t95510*t95471*6.0+gamma_aa[index]*gcaa*t95510*t95517*6.0)-ccaa3*gamma_aa[index]* \
                   gcaa*t95510*1.0/(t95521*t95521*t95521)*(t95530*t95530)*t95513*t95517*2.0)+c0*pow(rho_a[index],4.0/ \
                   3.0)*(X-1.0)*((t95534/t95536-t95534*t95535*1.0/(t95536*t95536*t95536)*2.0+t95534*1.0/(t95536*t95536* \
                   t95536*t95536*t95536)*t95537)*(cxnl1*t95471*t95538*t95558*2.0-cxnl2*t95471*t95538*t95559*2.0+cxnl2* \
                   t95513*t95541*t95553*t95562*2.0-cxnl2*t95513*t95471*t95538*t95566*t95567*2.0-cxnl1*gamma_aa[index]* \
                   gx*t95561*t95517*t95538*2.0-cxnl3*gamma_aa[index]*gx*t95560*t95517*t95538*6.0+cxnl2*gamma_aa[index]* \
                   t95471*t95553*t95538*t95549*4.0+cxnl3*gx*t95513*t95550*t95517*t95538*t95557*6.0+cxnl3*gamma_aa[index]* \
                   gx*t95513*t95550*t95517*t95538*t95565-cxnl3*gamma_aa[index]*gx*t95513*t95517*t95538*t95568*t95569* \
                   2.0)+cx1*t95471*t95538*t95558*2.0-cx2*t95471*t95538*t95559*2.0+cx2*t95513*t95541*t95553*t95562*2.0- \
                   cx2*t95513*t95471*t95538*t95566*t95567*2.0-cx1*gamma_aa[index]*gx*t95561*t95517*t95538*2.0-cx3*gamma_aa[index]* \
                   gx*t95560*t95517*t95538*6.0+cx2*gamma_aa[index]*t95471*t95553*t95538*t95549*4.0+cx3*gx*t95513*t95550* \
                   t95517*t95538*t95557*6.0+cx3*gamma_aa[index]*gx*t95513*t95550*t95517*t95538*t95565-cx3*gamma_aa[index]* \
                   gx*t95513*t95517*t95538*t95568*t95569*2.0);
            } else if (rho_a[index] > cutoff_) {
                double t97394 = 1.0/pow(rho_a[index],1.0/3.0);
                double t97395 = c*t97394;
                double t97396 = sqrt(t97395);
                double t97397 = pow(t97395,3.0/2.0);
                double t97398 = c*c;
                double t97399 = 1.0/pow(rho_a[index],2.0/3.0);
                double t97400 = 1.0/c0p;
                double t97401 = b1p*t97396;
                double t97402 = b3p*t97397;
                double t97403 = b4p*t97398*t97399;
                double t97404 = b2p*c*t97394;
                double t97405 = t97401+t97402+t97403+t97404;
                double t97406 = 1.0/t97405;
                double t97407 = t97400*t97406*(1.0/2.0);
                double t97408 = t97407+1.0;
                double t97409 = log(t97408);
                double t97410 = a1p*c*t97394;
                double t97411 = t97410+1.0;
                double t97412 = gcaa*gcaa;
                double t97413 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t97414 = 1.0/pow(rho_a[index],8.0/3.0);
                double t97415 = gamma_aa[index]*gcaa*t97414;
                double t97416 = t97415+1.0;
                double t97417 = gamma_aa[index]*gamma_aa[index];
                double t97418 = gamma_aa[index]*gcaa*t97414*2.0;
                double t97419 = t97412*t97413*t97417;
                double t97420 = t97418+t97419+1.0;
                double t97421 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t97422 = gamma_aa[index]*gcaa*t97414*3.0;
                double t97423 = gamma_aa[index]*gcaa*t97412*t97421*t97417;
                double t97424 = t97412*t97413*t97417*3.0;
                double t97425 = t97422+t97423+t97424+1.0;
                double t97428 = gcaa*t97414*2.0;
                double t97429 = gamma_aa[index]*t97412*t97413*2.0;
                double t97426 = t97428+t97429;
                double t97427 = 1.0/(t97425*t97425);
                double t97430 = 1.0/(t97420*t97420);
                double t97431 = gcaa*t97414*3.0;
                double t97432 = gamma_aa[index]*t97412*t97413*6.0;
                double t97433 = gcaa*t97412*t97421*t97417*3.0;
                double t97434 = t97431+t97432+t97433;
                double t97435 = pow(rho_a[index],5.0/3.0);
                double t97436 = 1.0/tau_a[index];
                double t97437 = C_k*t97435*t97436;
                double t97438 = t97437-1.0;
                double t97439 = t97438*t97438;
                double t97440 = t97437+1.0;
                double t97441 = t97439*t97439;
                double t97442 = gx*gx;
                double t97443 = gamma_aa[index]*gx*t97414;
                double t97444 = t97443+1.0;
                double t97445 = 1.0/pow(rho_a[index],3.2E1/3.0);
                double t97446 = gamma_aa[index]*gx*t97414*2.0;
                double t97447 = t97413*t97442*t97417;
                double t97448 = t97446+t97447+1.0;
                double t97449 = gamma_aa[index]*gx*t97414*3.0;
                double t97450 = gamma_aa[index]*gx*t97421*t97442*t97417;
                double t97451 = t97413*t97442*t97417*3.0;
                double t97452 = t97450+t97451+t97449+1.0;
                double t97455 = gx*t97414*2.0;
                double t97456 = gamma_aa[index]*t97413*t97442*2.0;
                double t97453 = t97455+t97456;
                double t97454 = 1.0/(t97452*t97452);
                double t97457 = 1.0/(t97448*t97448);
                double t97458 = gx*t97414*3.0;
                double t97459 = gamma_aa[index]*t97413*t97442*6.0;
                double t97460 = gx*t97421*t97442*t97417*3.0;
                double t97461 = t97460+t97458+t97459;
                double t97462 = 1.0/(t97444*t97444);
                double t97463 = 1.0/t97448;
                double t97464 = 1.0/t97452;
                double t97465 = 1.0/(t97444*t97444*t97444);
                double t97466 = t97442*t97442;
                double t97467 = t97413*t97442*6.0;
                double t97468 = gamma_aa[index]*gx*t97421*t97442*6.0;
                double t97469 = t97467+t97468;
                double t97470 = t97453*t97453;
                double t97471 = 1.0/(t97448*t97448*t97448);
                double t97472 = t97461*t97461;
                double t97473 = 1.0/(t97452*t97452*t97452);
                v_gamma_aa_gamma_aa_[index] = -rho_a[index]*(((pow(2.0,1.0/3.0)*2.0-2.0)*(c0f*log((1.0/2.0)/(c0f* \
                   (b1f*t97396+b3f*t97397+b2f*c*t97394+b4f*t97398*t97399))+1.0)*(a1f*c*t97394+1.0)*2.0-c0p*t97411*t97409* \
                   2.0))/(two_13*2.0-2.0)+c0p*t97411*t97409*2.0)*((ccaa2*t97412*t97413*2.0)/t97420-ccaa1*t97412*t97413* \
                   1.0/(t97416*t97416)*2.0-ccaa2*(t97412*t97412)*t97430*t97417*t97445*2.0+ccaa1*gamma_aa[index]*gcaa* \
                   t97412*t97421*1.0/(t97416*t97416*t97416)*2.0+(ccaa3*gamma_aa[index]*gcaa*t97412*t97421*6.0)/t97425+ \
                   ccaa2*1.0/(t97420*t97420*t97420)*t97412*t97413*t97417*(t97426*t97426)*2.0-ccaa2*gamma_aa[index]*t97412* \
                   t97430*t97413*t97426*4.0-ccaa3*gcaa*t97412*t97421*t97434*t97417*t97427*6.0-ccaa3*gamma_aa[index]*gcaa* \
                   t97412*t97421*t97417*t97427*(t97412*t97413*6.0+gamma_aa[index]*gcaa*t97412*t97421*6.0)+ccaa3*gamma_aa[index]* \
                   gcaa*t97412*t97421*1.0/(t97425*t97425*t97425)*(t97434*t97434)*t97417*2.0)+c0*pow(rho_a[index],4.0/ \
                   3.0)*(X-1.0)*((t97438/t97440+1.0/(t97440*t97440*t97440*t97440*t97440)*t97441*t97438-1.0/(t97440*t97440* \
                   t97440)*t97438*t97439*2.0)*(cxnl1*t97413*t97442*t97462*2.0-cxnl2*t97413*t97442*t97463*2.0+cxnl2*t97417* \
                   t97445*t97457*t97466*2.0-cxnl2*t97413*t97442*t97470*t97417*t97471*2.0-cxnl1*gamma_aa[index]*gx*t97421* \
                   t97442*t97465*2.0-cxnl3*gamma_aa[index]*gx*t97421*t97442*t97464*6.0+cxnl2*gamma_aa[index]*t97413*t97442* \
                   t97453*t97457*4.0+cxnl3*gx*t97421*t97442*t97461*t97417*t97454*6.0-cxnl3*gamma_aa[index]*gx*t97421* \
                   t97442*t97417*t97472*t97473*2.0+cxnl3*gamma_aa[index]*gx*t97421*t97442*t97417*t97454*t97469)+cx1*t97413* \
                   t97442*t97462*2.0-cx2*t97413*t97442*t97463*2.0+cx2*t97417*t97445*t97457*t97466*2.0-cx2*t97413*t97442* \
                   t97470*t97417*t97471*2.0-cx1*gamma_aa[index]*gx*t97421*t97442*t97465*2.0-cx3*gamma_aa[index]*gx*t97421* \
                   t97442*t97464*6.0+cx2*gamma_aa[index]*t97413*t97442*t97453*t97457*4.0+cx3*gx*t97421*t97442*t97461* \
                   t97417*t97454*6.0-cx3*gamma_aa[index]*gx*t97421*t97442*t97417*t97472*t97473*2.0+cx3*gamma_aa[index]* \
                   gx*t97421*t97442*t97417*t97454*t97469);
            } else if (rho_b[index] > cutoff_) {
                v_gamma_aa_gamma_aa_[index] = 0.0;
            } else {
                v_gamma_aa_gamma_aa_[index] = 0.0;
            } 

            //V_gamma_aa_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_aa_gamma_ab_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_aa_gamma_ab_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_aa_gamma_ab_[index] = 0.0;
            } else {
                v_gamma_aa_gamma_ab_[index] = 0.0;
            } 

            //V_gamma_aa_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t95572 = 1.0/pow(rho_a[index],1.0/3.0);
                double t95573 = c*t95572;
                double t95574 = sqrt(t95573);
                double t95575 = pow(t95573,3.0/2.0);
                double t95576 = c*c;
                double t95577 = 1.0/pow(rho_a[index],2.0/3.0);
                double t95578 = 1.0/c0p;
                double t95579 = b1p*t95574;
                double t95580 = b3p*t95575;
                double t95581 = b4p*t95576*t95577;
                double t95582 = b2p*c*t95572;
                double t95583 = t95580+t95581+t95582+t95579;
                double t95584 = 1.0/t95583;
                double t95585 = t95584*t95578*(1.0/2.0);
                double t95586 = t95585+1.0;
                double t95587 = log(t95586);
                double t95588 = a1p*c*t95572;
                double t95589 = t95588+1.0;
                double t95590 = pow(2.0,1.0/3.0);
                double t95591 = t95590*2.0;
                double t95592 = t95591-2.0;
                double t95593 = two_13*2.0;
                double t95594 = t95593-2.0;
                double t95595 = 1.0/t95594;
                double t95596 = 1.0/c0f;
                double t95597 = 1.0/pow(rho_b[index],1.0/3.0);
                double t95598 = c*t95597;
                double t95599 = sqrt(t95598);
                double t95600 = pow(t95598,3.0/2.0);
                double t95601 = 1.0/pow(rho_b[index],2.0/3.0);
                double t95602 = b1p*t95599;
                double t95603 = b3p*t95600;
                double t95604 = b4p*t95601*t95576;
                double t95605 = b2p*c*t95597;
                double t95606 = t95602+t95603+t95604+t95605;
                double t95607 = 1.0/t95606;
                double t95608 = t95607*t95578*(1.0/2.0);
                double t95609 = t95608+1.0;
                double t95610 = log(t95609);
                double t95611 = a1p*c*t95597;
                double t95612 = t95611+1.0;
                double t95613 = c0p*t95610*t95612*2.0;
                double t95614 = rho_a[index]+rho_b[index];
                double t95615 = 1.0/pow(t95614,1.0/3.0);
                double t95616 = c*t95615;
                double t95617 = sqrt(t95616);
                double t95618 = pow(t95616,3.0/2.0);
                double t95619 = 1.0/pow(t95614,2.0/3.0);
                double t95620 = b1p*t95617;
                double t95621 = b3p*t95618;
                double t95622 = b4p*t95619*t95576;
                double t95623 = b2p*c*t95615;
                double t95624 = t95620+t95621+t95622+t95623;
                double t95625 = 1.0/t95624;
                double t95626 = t95625*t95578*(1.0/2.0);
                double t95627 = t95626+1.0;
                double t95628 = log(t95627);
                double t95629 = a1p*c*t95615;
                double t95630 = t95629+1.0;
                double t95631 = c0p*t95630*t95628*2.0;
                double t95632 = rho_a[index]-rho_b[index];
                double t95633 = t95632*t95632;
                double t95634 = 1.0/t95614;
                double t95635 = t95632*t95634;
                double t95636 = 1.0/(t95614*t95614*t95614*t95614);
                double t95637 = t95633*t95633;
                double t95638 = t95635+1.0;
                double t95639 = pow(t95638,4.0/3.0);
                double t95640 = -t95635+1.0;
                double t95641 = pow(t95640,4.0/3.0);
                double t95642 = t95641+t95639-2.0;
                double t95643 = gcab*gcab;
                double t95644 = 1.0/pow(rho_a[index],8.0/3.0);
                double t95645 = 1.0/pow(rho_b[index],8.0/3.0);
                double t95646 = gamma_aa[index]*t95644*(1.0/2.0);
                double t95647 = gamma_bb[index]*t95645*(1.0/2.0);
                double t95648 = t95646+t95647;
                double t95649 = t95648*t95648;
                double t95650 = t95643*t95649*3.0;
                double t95651 = gcab*t95643*t95648*t95649;
                double t95652 = gcab*t95648*3.0;
                double t95653 = t95650+t95651+t95652+1.0;
                double t95654 = t95643*t95649;
                double t95655 = gcab*t95648*2.0;
                double t95656 = t95654+t95655+1.0;
                double t95657 = 1.0/(t95656*t95656);
                double t95658 = gcab*t95644;
                double t95659 = t95643*t95644*t95648;
                double t95660 = t95658+t95659;
                double t95661 = gcab*t95645;
                double t95662 = t95643*t95645*t95648;
                double t95663 = t95661+t95662;
                double t95664 = gcab*t95648;
                double t95665 = t95664+1.0;
                double t95666 = gcab*t95644*(3.0/2.0);
                double t95667 = t95643*t95644*t95648*3.0;
                double t95668 = gcab*t95643*t95644*t95649*(3.0/2.0);
                double t95669 = t95666+t95667+t95668;
                double t95670 = 1.0/(t95653*t95653);
                double t95671 = gcab*t95645*(3.0/2.0);
                double t95672 = t95643*t95645*t95648*3.0;
                double t95673 = gcab*t95643*t95645*t95649*(3.0/2.0);
                double t95674 = t95671+t95672+t95673;
                v_gamma_aa_gamma_bb_[index] = (-rho_b[index]*(t95613-t95592*t95595*(t95613-c0f*log((t95596*(1.0/2.0) \
                   )/(b1f*t95599+b3f*t95600+b2f*c*t95597+b4f*t95601*t95576)+1.0)*(a1f*c*t95597+1.0)*2.0))+t95614*(t95631- \
                   t95642*t95636*t95637*t95595*(t95631-c0f*log((t95596*(1.0/2.0))/(b1f*t95617+b3f*t95618+b2f*c*t95615+ \
                   b4f*t95619*t95576)+1.0)*(a1f*c*t95615+1.0)*2.0)+(Aa*t95642*t95595*log((1.0/2.0)/(Aa*(b1a*t95617+b3a* \
                   t95618+b2a*c*t95615+b4a*t95619*t95576))+1.0)*(t95636*t95637-1.0)*(a1a*c*t95615+1.0)*2.0)/d2fz0)+rho_a[index]* \
                   (t95592*t95595*(c0p*t95587*t95589*2.0-c0f*log((t95596*(1.0/2.0))/(b1f*t95574+b3f*t95575+b2f*c*t95572+ \
                   b4f*t95576*t95577)+1.0)*(a1f*c*t95572+1.0)*2.0)-c0p*t95587*t95589*2.0))*(ccab1*t95643*t95644*t95645* \
                   1.0/(t95665*t95665)*(1.0/2.0)-(ccab2*t95643*t95644*t95645*(1.0/2.0))/t95656+ccab2*t95660*t95643*t95645* \
                   t95648*t95657+ccab2*t95643*t95644*t95663*t95648*t95657-ccab2*t95660*t95643*t95663*1.0/(t95656*t95656* \
                   t95656)*t95649*2.0+ccab2*(t95643*t95643)*t95644*t95645*t95657*t95649*(1.0/2.0)+ccab3*gcab*t95643*t95670* \
                   t95644*t95674*t95649*(3.0/2.0)+ccab3*gcab*t95643*t95670*t95645*t95649*t95669*(3.0/2.0)+ccab3*gcab* \
                   t95643*t95670*t95648*t95649*(t95643*t95644*t95645*(3.0/2.0)+gcab*t95643*t95644*t95645*t95648*(3.0/ \
                   2.0))-(ccab3*gcab*t95643*t95644*t95645*t95648*(3.0/2.0))/t95653-ccab1*gcab*t95643*t95644*t95645*1.0/ \
                   (t95665*t95665*t95665)*t95648*(1.0/2.0)-ccab3*gcab*t95643*1.0/(t95653*t95653*t95653)*t95674*t95648* \
                   t95649*t95669*2.0);
            } else if (rho_a[index] > cutoff_) {
                v_gamma_aa_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_aa_gamma_bb_[index] = 0.0;
            } else {
                v_gamma_aa_gamma_bb_[index] = 0.0;
            } 

            //V_gamma_ab_gamma_ab
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_ab_gamma_ab_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_ab_gamma_ab_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_ab_gamma_ab_[index] = 0.0;
            } else {
                v_gamma_ab_gamma_ab_[index] = 0.0;
            } 

            //V_gamma_ab_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_gamma_ab_gamma_bb_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_gamma_ab_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_gamma_ab_gamma_bb_[index] = 0.0;
            } else {
                v_gamma_ab_gamma_bb_[index] = 0.0;
            } 

            //V_gamma_bb_gamma_bb
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t95678 = 1.0/pow(rho_a[index],1.0/3.0);
                double t95679 = c*t95678;
                double t95680 = sqrt(t95679);
                double t95681 = pow(t95679,3.0/2.0);
                double t95682 = c*c;
                double t95683 = 1.0/pow(rho_a[index],2.0/3.0);
                double t95684 = 1.0/c0p;
                double t95685 = b1p*t95680;
                double t95686 = b3p*t95681;
                double t95687 = b4p*t95682*t95683;
                double t95688 = b2p*c*t95678;
                double t95689 = t95685+t95686+t95687+t95688;
                double t95690 = 1.0/t95689;
                double t95691 = t95690*t95684*(1.0/2.0);
                double t95692 = t95691+1.0;
                double t95693 = log(t95692);
                double t95694 = a1p*c*t95678;
                double t95695 = t95694+1.0;
                double t95696 = pow(2.0,1.0/3.0);
                double t95697 = t95696*2.0;
                double t95698 = t95697-2.0;
                double t95699 = two_13*2.0;
                double t95700 = t95699-2.0;
                double t95701 = 1.0/t95700;
                double t95702 = 1.0/c0f;
                double t95703 = 1.0/pow(rho_b[index],1.0/3.0);
                double t95704 = c*t95703;
                double t95705 = sqrt(t95704);
                double t95706 = pow(t95704,3.0/2.0);
                double t95707 = 1.0/pow(rho_b[index],2.0/3.0);
                double t95708 = b1p*t95705;
                double t95709 = b3p*t95706;
                double t95710 = b4p*t95707*t95682;
                double t95711 = b2p*c*t95703;
                double t95712 = t95710+t95711+t95708+t95709;
                double t95713 = 1.0/t95712;
                double t95714 = t95713*t95684*(1.0/2.0);
                double t95715 = t95714+1.0;
                double t95716 = log(t95715);
                double t95717 = a1p*c*t95703;
                double t95718 = t95717+1.0;
                double t95719 = c0p*t95716*t95718*2.0;
                double t95720 = rho_a[index]+rho_b[index];
                double t95721 = 1.0/pow(t95720,1.0/3.0);
                double t95722 = c*t95721;
                double t95723 = sqrt(t95722);
                double t95724 = pow(t95722,3.0/2.0);
                double t95725 = 1.0/pow(t95720,2.0/3.0);
                double t95726 = b1p*t95723;
                double t95727 = b3p*t95724;
                double t95728 = b4p*t95725*t95682;
                double t95729 = b2p*c*t95721;
                double t95730 = t95726+t95727+t95728+t95729;
                double t95731 = 1.0/t95730;
                double t95732 = t95731*t95684*(1.0/2.0);
                double t95733 = t95732+1.0;
                double t95734 = log(t95733);
                double t95735 = a1p*c*t95721;
                double t95736 = t95735+1.0;
                double t95737 = c0p*t95734*t95736*2.0;
                double t95738 = rho_a[index]-rho_b[index];
                double t95739 = t95738*t95738;
                double t95740 = 1.0/t95720;
                double t95741 = t95740*t95738;
                double t95742 = 1.0/(t95720*t95720*t95720*t95720);
                double t95743 = t95739*t95739;
                double t95744 = t95741+1.0;
                double t95745 = pow(t95744,4.0/3.0);
                double t95746 = -t95741+1.0;
                double t95747 = pow(t95746,4.0/3.0);
                double t95748 = t95745+t95747-2.0;
                double t95749 = gcab*gcab;
                double t95750 = 1.0/pow(rho_b[index],1.6E1/3.0);
                double t95751 = 1.0/pow(rho_a[index],8.0/3.0);
                double t95752 = gamma_aa[index]*t95751*(1.0/2.0);
                double t95753 = 1.0/pow(rho_b[index],8.0/3.0);
                double t95754 = gamma_bb[index]*t95753*(1.0/2.0);
                double t95755 = t95752+t95754;
                double t95756 = gcab*t95755;
                double t95757 = t95756+1.0;
                double t95758 = t95755*t95755;
                double t95759 = t95749*t95758;
                double t95760 = gcab*t95755*2.0;
                double t95761 = t95760+t95759+1.0;
                double t95771 = gcab*t95753*(3.0/2.0);
                double t95772 = t95753*t95755*t95749*3.0;
                double t95773 = gcab*t95753*t95749*t95758*(3.0/2.0);
                double t95762 = t95771+t95772+t95773;
                double t95763 = t95749*t95758*3.0;
                double t95764 = gcab*t95755*t95749*t95758;
                double t95765 = gcab*t95755*3.0;
                double t95766 = t95763+t95764+t95765+1.0;
                double t95768 = gcab*t95753;
                double t95769 = t95753*t95755*t95749;
                double t95767 = t95768+t95769;
                double t95770 = 1.0/(t95761*t95761);
                double t95774 = 1.0/(t95766*t95766);
                double t95775 = c0p*t95693*t95695*2.0;
                double t95776 = b1f*t95705;
                double t95777 = b3f*t95706;
                double t95778 = b4f*t95707*t95682;
                double t95779 = b2f*c*t95703;
                double t95780 = t95776+t95777+t95778+t95779;
                double t95781 = 1.0/t95780;
                double t95782 = t95702*t95781*(1.0/2.0);
                double t95783 = t95782+1.0;
                double t95784 = log(t95783);
                double t95785 = a1f*c*t95703;
                double t95786 = t95785+1.0;
                double t95787 = t95719-c0f*t95784*t95786*2.0;
                double t95788 = t95719-t95701*t95787*t95698;
                double t95789 = gcaa*gcaa;
                double t95790 = gamma_bb[index]*gcaa*t95753;
                double t95791 = t95790+1.0;
                double t95792 = gamma_bb[index]*gamma_bb[index];
                double t95793 = gamma_bb[index]*gcaa*t95753*2.0;
                double t95794 = t95750*t95792*t95789;
                double t95795 = t95793+t95794+1.0;
                double t95796 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]);
                double t95797 = gamma_bb[index]*gcaa*t95753*3.0;
                double t95798 = gamma_bb[index]*gcaa*t95792*t95796*t95789;
                double t95799 = t95750*t95792*t95789*3.0;
                double t95800 = t95797+t95798+t95799+1.0;
                double t95803 = gcaa*t95753*2.0;
                double t95804 = gamma_bb[index]*t95750*t95789*2.0;
                double t95801 = t95803+t95804;
                double t95802 = 1.0/(t95800*t95800);
                double t95805 = 1.0/(t95795*t95795);
                double t95806 = gcaa*t95753*3.0;
                double t95807 = gamma_bb[index]*t95750*t95789*6.0;
                double t95808 = gcaa*t95792*t95796*t95789*3.0;
                double t95809 = t95806+t95807+t95808;
                double t95810 = pow(rho_b[index],5.0/3.0);
                double t95811 = 1.0/tau_b[index];
                double t95812 = C_k*t95810*t95811;
                double t95813 = t95812-1.0;
                double t95814 = t95813*t95813;
                double t95815 = t95812+1.0;
                double t95816 = t95814*t95814;
                double t95817 = gx*gx;
                double t95818 = gamma_bb[index]*gx*t95753;
                double t95819 = t95818+1.0;
                double t95820 = 1.0/pow(rho_b[index],3.2E1/3.0);
                double t95821 = gamma_bb[index]*gx*t95753*2.0;
                double t95822 = t95750*t95817*t95792;
                double t95823 = t95821+t95822+1.0;
                double t95824 = gamma_bb[index]*gx*t95753*3.0;
                double t95825 = gamma_bb[index]*gx*t95817*t95792*t95796;
                double t95826 = t95750*t95817*t95792*3.0;
                double t95827 = t95824+t95825+t95826+1.0;
                double t95830 = gx*t95753*2.0;
                double t95831 = gamma_bb[index]*t95750*t95817*2.0;
                double t95828 = t95830+t95831;
                double t95829 = 1.0/(t95827*t95827);
                double t95832 = 1.0/(t95823*t95823);
                double t95833 = gx*t95753*3.0;
                double t95834 = gamma_bb[index]*t95750*t95817*6.0;
                double t95835 = gx*t95817*t95792*t95796*3.0;
                double t95836 = t95833+t95834+t95835;
                double t95837 = 1.0/(t95819*t95819);
                double t95838 = 1.0/t95823;
                double t95839 = 1.0/t95827;
                double t95840 = 1.0/(t95819*t95819*t95819);
                double t95841 = t95817*t95817;
                double t95842 = t95750*t95817*6.0;
                double t95843 = gamma_bb[index]*gx*t95817*t95796*6.0;
                double t95844 = t95842+t95843;
                double t95845 = t95828*t95828;
                double t95846 = 1.0/(t95823*t95823*t95823);
                double t95847 = t95836*t95836;
                double t95848 = 1.0/(t95827*t95827*t95827);
                v_gamma_bb_gamma_bb_[index] = (rho_b[index]*t95788+rho_a[index]*(t95775-t95701*t95698*(t95775-c0f* \
                   log((t95702*(1.0/2.0))/(b1f*t95680+b3f*t95681+b2f*c*t95678+b4f*t95682*t95683)+1.0)*(a1f*c*t95678+1.0) \
                   *2.0))-t95720*(t95737-t95701*t95742*t95743*t95748*(t95737-c0f*log((t95702*(1.0/2.0))/(b1f*t95723+b3f* \
                   t95724+b2f*c*t95721+b4f*t95725*t95682)+1.0)*(a1f*c*t95721+1.0)*2.0)+(Aa*t95701*t95748*log((1.0/2.0) \
                   /(Aa*(b1a*t95723+b3a*t95724+b2a*c*t95721+b4a*t95725*t95682))+1.0)*(t95742*t95743-1.0)*(a1a*c*t95721+ \
                   1.0)*2.0)/d2fz0))*((ccab2*t95750*t95749*(1.0/2.0))/t95761-ccab1*t95750*1.0/(t95757*t95757)*t95749* \
                   (1.0/2.0)+ccab2*1.0/(t95761*t95761*t95761)*t95749*t95758*(t95767*t95767)*2.0-ccab2*t95750*t95770*(t95749* \
                   t95749)*t95758*(1.0/2.0)-ccab2*t95770*t95753*t95755*t95749*t95767*2.0+ccab1*gcab*t95750*t95755*1.0/ \
                   (t95757*t95757*t95757)*t95749*(1.0/2.0)+(ccab3*gcab*t95750*t95755*t95749*(3.0/2.0))/t95766+ccab3*gcab* \
                   (t95762*t95762)*t95755*1.0/(t95766*t95766*t95766)*t95749*t95758*2.0-ccab3*gcab*t95753*t95762*t95774* \
                   t95749*t95758*3.0-ccab3*gcab*t95755*t95774*t95749*t95758*(t95750*t95749*(3.0/2.0)+gcab*t95750*t95755* \
                   t95749*(3.0/2.0)))+rho_b[index]*t95788*(ccaa1*t95750*1.0/(t95791*t95791)*t95789*2.0-(ccaa2*t95750* \
                   t95789*2.0)/t95795+ccaa2*t95820*t95805*t95792*(t95789*t95789)*2.0-(ccaa3*gamma_bb[index]*gcaa*t95796* \
                   t95789*6.0)/t95800-ccaa1*gamma_bb[index]*gcaa*1.0/(t95791*t95791*t95791)*t95796*t95789*2.0-ccaa2*(t95801* \
                   t95801)*t95750*t95792*1.0/(t95795*t95795*t95795)*t95789*2.0+ccaa2*gamma_bb[index]*t95801*t95750*t95805* \
                   t95789*4.0+ccaa3*gcaa*t95802*t95809*t95792*t95796*t95789*6.0+ccaa3*gamma_bb[index]*gcaa*t95802*t95792* \
                   t95796*t95789*(t95750*t95789*6.0+gamma_bb[index]*gcaa*t95796*t95789*6.0)-ccaa3*gamma_bb[index]*gcaa* \
                   1.0/(t95800*t95800*t95800)*(t95809*t95809)*t95792*t95796*t95789*2.0)+c0*pow(rho_b[index],4.0/3.0)* \
                   (X-1.0)*((t95813/t95815-t95813*t95814*1.0/(t95815*t95815*t95815)*2.0+t95813*1.0/(t95815*t95815*t95815* \
                   t95815*t95815)*t95816)*(cxnl1*t95750*t95817*t95837*2.0-cxnl2*t95750*t95817*t95838*2.0+cxnl2*t95820* \
                   t95832*t95841*t95792*2.0-cxnl2*t95750*t95817*t95845*t95792*t95846*2.0-cxnl1*gamma_bb[index]*gx*t95840* \
                   t95817*t95796*2.0-cxnl3*gamma_bb[index]*gx*t95817*t95839*t95796*6.0+cxnl2*gamma_bb[index]*t95750*t95832* \
                   t95817*t95828*4.0+cxnl3*gx*t95817*t95836*t95792*t95829*t95796*6.0+cxnl3*gamma_bb[index]*gx*t95817* \
                   t95844*t95792*t95829*t95796-cxnl3*gamma_bb[index]*gx*t95817*t95792*t95847*t95848*t95796*2.0)+cx1*t95750* \
                   t95817*t95837*2.0-cx2*t95750*t95817*t95838*2.0+cx2*t95820*t95832*t95841*t95792*2.0-cx2*t95750*t95817* \
                   t95845*t95792*t95846*2.0-cx1*gamma_bb[index]*gx*t95840*t95817*t95796*2.0-cx3*gamma_bb[index]*gx*t95817* \
                   t95839*t95796*6.0+cx2*gamma_bb[index]*t95750*t95832*t95817*t95828*4.0+cx3*gx*t95817*t95836*t95792* \
                   t95829*t95796*6.0+cx3*gamma_bb[index]*gx*t95817*t95844*t95792*t95829*t95796-cx3*gamma_bb[index]*gx* \
                   t95817*t95792*t95847*t95848*t95796*2.0);
            } else if (rho_a[index] > cutoff_) {
                v_gamma_bb_gamma_bb_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                double t96628 = 1.0/pow(rho_b[index],1.0/3.0);
                double t96629 = c*t96628;
                double t96630 = sqrt(t96629);
                double t96631 = pow(t96629,3.0/2.0);
                double t96632 = c*c;
                double t96633 = 1.0/pow(rho_b[index],2.0/3.0);
                double t96634 = 1.0/c0p;
                double t96635 = b1p*t96630;
                double t96636 = b3p*t96631;
                double t96637 = b4p*t96632*t96633;
                double t96638 = b2p*c*t96628;
                double t96639 = t96635+t96636+t96637+t96638;
                double t96640 = 1.0/t96639;
                double t96641 = t96640*t96634*(1.0/2.0);
                double t96642 = t96641+1.0;
                double t96643 = log(t96642);
                double t96644 = a1p*c*t96628;
                double t96645 = t96644+1.0;
                double t96646 = gcaa*gcaa;
                double t96647 = 1.0/pow(rho_b[index],1.6E1/3.0);
                double t96648 = 1.0/pow(rho_b[index],8.0/3.0);
                double t96649 = gamma_bb[index]*gcaa*t96648;
                double t96650 = t96649+1.0;
                double t96651 = gamma_bb[index]*gamma_bb[index];
                double t96652 = gamma_bb[index]*gcaa*t96648*2.0;
                double t96653 = t96651*t96646*t96647;
                double t96654 = t96652+t96653+1.0;
                double t96655 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]);
                double t96656 = gamma_bb[index]*gcaa*t96648*3.0;
                double t96657 = gamma_bb[index]*gcaa*t96651*t96646*t96655;
                double t96658 = t96651*t96646*t96647*3.0;
                double t96659 = t96656+t96657+t96658+1.0;
                double t96662 = gcaa*t96648*2.0;
                double t96663 = gamma_bb[index]*t96646*t96647*2.0;
                double t96660 = t96662+t96663;
                double t96661 = 1.0/(t96659*t96659);
                double t96664 = 1.0/(t96654*t96654);
                double t96665 = gcaa*t96648*3.0;
                double t96666 = gamma_bb[index]*t96646*t96647*6.0;
                double t96667 = gcaa*t96651*t96646*t96655*3.0;
                double t96668 = t96665+t96666+t96667;
                double t96669 = pow(rho_b[index],5.0/3.0);
                double t96670 = 1.0/tau_b[index];
                double t96671 = C_k*t96670*t96669;
                double t96672 = t96671-1.0;
                double t96673 = t96672*t96672;
                double t96674 = t96671+1.0;
                double t96675 = t96673*t96673;
                double t96676 = gx*gx;
                double t96677 = gamma_bb[index]*gx*t96648;
                double t96678 = t96677+1.0;
                double t96679 = 1.0/pow(rho_b[index],3.2E1/3.0);
                double t96680 = gamma_bb[index]*gx*t96648*2.0;
                double t96681 = t96651*t96647*t96676;
                double t96682 = t96680+t96681+1.0;
                double t96683 = gamma_bb[index]*gx*t96648*3.0;
                double t96684 = gamma_bb[index]*gx*t96651*t96655*t96676;
                double t96685 = t96651*t96647*t96676*3.0;
                double t96686 = t96683+t96684+t96685+1.0;
                double t96689 = gx*t96648*2.0;
                double t96690 = gamma_bb[index]*t96647*t96676*2.0;
                double t96687 = t96690+t96689;
                double t96688 = 1.0/(t96686*t96686);
                double t96691 = 1.0/(t96682*t96682);
                double t96692 = gx*t96648*3.0;
                double t96693 = gamma_bb[index]*t96647*t96676*6.0;
                double t96694 = gx*t96651*t96655*t96676*3.0;
                double t96695 = t96692+t96693+t96694;
                double t96696 = 1.0/(t96678*t96678);
                double t96697 = 1.0/t96682;
                double t96698 = 1.0/t96686;
                double t96699 = 1.0/(t96678*t96678*t96678);
                double t96700 = t96676*t96676;
                double t96701 = t96647*t96676*6.0;
                double t96702 = gamma_bb[index]*gx*t96655*t96676*6.0;
                double t96703 = t96701+t96702;
                double t96704 = t96687*t96687;
                double t96705 = 1.0/(t96682*t96682*t96682);
                double t96706 = t96695*t96695;
                double t96707 = 1.0/(t96686*t96686*t96686);
                v_gamma_bb_gamma_bb_[index] = rho_b[index]*(((pow(2.0,1.0/3.0)*2.0-2.0)*(c0f*log((1.0/2.0)/(c0f*(b1f* \
                   t96630+b3f*t96631+b2f*c*t96628+b4f*t96632*t96633))+1.0)*(a1f*c*t96628+1.0)*2.0-c0p*t96643*t96645*2.0) \
                   )/(two_13*2.0-2.0)+c0p*t96643*t96645*2.0)*(ccaa1*1.0/(t96650*t96650)*t96646*t96647*2.0-(ccaa2*t96646* \
                   t96647*2.0)/t96654+ccaa2*t96651*(t96646*t96646)*t96664*t96679*2.0-ccaa1*gamma_bb[index]*gcaa*1.0/(t96650* \
                   t96650*t96650)*t96646*t96655*2.0-(ccaa3*gamma_bb[index]*gcaa*t96646*t96655*6.0)/t96659-ccaa2*t96651* \
                   (t96660*t96660)*1.0/(t96654*t96654*t96654)*t96646*t96647*2.0+ccaa2*gamma_bb[index]*t96660*t96646*t96664* \
                   t96647*4.0+ccaa3*gcaa*t96651*t96661*t96646*t96655*t96668*6.0+ccaa3*gamma_bb[index]*gcaa*t96651*t96661* \
                   t96646*t96655*(t96646*t96647*6.0+gamma_bb[index]*gcaa*t96646*t96655*6.0)-ccaa3*gamma_bb[index]*gcaa* \
                   t96651*t96646*t96655*1.0/(t96659*t96659*t96659)*(t96668*t96668)*2.0)+c0*pow(rho_b[index],4.0/3.0)* \
                   (X-1.0)*((t96672/t96674-t96672*t96673*1.0/(t96674*t96674*t96674)*2.0+t96672*1.0/(t96674*t96674*t96674* \
                   t96674*t96674)*t96675)*(cxnl1*t96647*t96676*t96696*2.0-cxnl2*t96647*t96676*t96697*2.0+cxnl2*t96700* \
                   t96651*t96691*t96679*2.0-cxnl2*t96704*t96651*t96705*t96647*t96676*2.0-cxnl1*gamma_bb[index]*gx*t96655* \
                   t96676*t96699*2.0-cxnl3*gamma_bb[index]*gx*t96655*t96676*t96698*6.0+cxnl2*gamma_bb[index]*t96691*t96647* \
                   t96676*t96687*4.0+cxnl3*gx*t96651*t96655*t96676*t96695*t96688*6.0-cxnl3*gamma_bb[index]*gx*t96651* \
                   t96706*t96707*t96655*t96676*2.0+cxnl3*gamma_bb[index]*gx*t96703*t96651*t96655*t96676*t96688)+cx1*t96647* \
                   t96676*t96696*2.0-cx2*t96647*t96676*t96697*2.0+cx2*t96700*t96651*t96691*t96679*2.0-cx2*t96704*t96651* \
                   t96705*t96647*t96676*2.0-cx1*gamma_bb[index]*gx*t96655*t96676*t96699*2.0-cx3*gamma_bb[index]*gx*t96655* \
                   t96676*t96698*6.0+cx2*gamma_bb[index]*t96691*t96647*t96676*t96687*4.0+cx3*gx*t96651*t96655*t96676* \
                   t96695*t96688*6.0-cx3*gamma_bb[index]*gx*t96651*t96706*t96707*t96655*t96676*2.0+cx3*gamma_bb[index]* \
                   gx*t96703*t96651*t96655*t96676*t96688);
            } else {
                v_gamma_bb_gamma_bb_[index] = 0.0;
            } 

        }
        if (is_meta_) {

            //V_rho_a_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t95850 = 1.0/pow(rho_a[index],8.0/3.0);
                double t95851 = gamma_aa[index]*gamma_aa[index];
                double t95852 = gx*gx;
                double t95853 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t95854 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t95855 = pow(rho_a[index],5.0/3.0);
                double t95856 = 1.0/tau_a[index];
                double t95857 = C_k*t95855*t95856;
                double t95858 = t95857+1.0;
                double t95859 = pow(rho_a[index],2.0/3.0);
                double t95860 = 1.0/(tau_a[index]*tau_a[index]);
                double t95861 = t95857-1.0;
                double t95862 = t95861*t95861;
                double t95863 = t95862*t95862;
                double t95864 = C_k*C_k;
                double t95865 = pow(rho_a[index],7.0/3.0);
                double t95866 = 1.0/(tau_a[index]*tau_a[index]*tau_a[index]);
                double t95867 = 1.0/(t95858*t95858*t95858);
                double t95868 = 1.0/(t95858*t95858*t95858*t95858);
                double t95869 = 1.0/(t95858*t95858*t95858*t95858*t95858);
                double t95870 = 1.0/(t95858*t95858*t95858*t95858*t95858*t95858);
                double t95871 = 1.0/(t95858*t95858);
                double t95872 = 1.0/t95858;
                double t95873 = gamma_aa[index]*gx*t95850;
                double t95874 = t95873+1.0;
                double t95875 = 1.0/t95874;
                double t95876 = gamma_aa[index]*gx*t95850*3.0;
                double t95877 = gamma_aa[index]*gx*t95851*t95852*t95853;
                double t95878 = t95851*t95852*t95854*3.0;
                double t95879 = t95876+t95877+t95878+1.0;
                double t95880 = 1.0/t95879;
                double t95881 = gamma_aa[index]*gx*t95850*2.0;
                double t95882 = t95851*t95852*t95854;
                double t95883 = t95881+t95882+1.0;
                double t95884 = 1.0/t95883;
                double t95885 = 1.0/pow(rho_a[index],1.9E1/3.0);
                double t95886 = 1.0/pow(rho_a[index],1.1E1/3.0);
                double t95887 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]*rho_a[index]);
                double t95888 = cxnl1*gamma_aa[index]*gx*t95850*t95875;
                double t95889 = cxnl3*gamma_aa[index]*gx*t95851*t95852*t95853*t95880;
                double t95890 = cxnl2*t95851*t95852*t95854*t95884;
                double t95891 = cxnl0+t95890+t95888+t95889;
                double t95892 = C_k*t95860*t95872*t95855;
                double t95893 = C_k*t95860*t95861*t95862*t95855*t95868*6.0;
                double t95894 = C_k*t95860*t95863*t95855*t95869*5.0;
                double t95895 = t95892+t95893+t95894-C_k*t95860*t95861*t95871*t95855-C_k*t95860*t95862*t95855*t95867* \
                   6.0-C_k*t95860*t95861*t95870*t95863*t95855*5.0;
                v_rho_a_tau_a_[index] = -(c0*pow(rho_a[index],4.0/3.0)*(t95891*(t95871*t95864*t95865*t95866*(1.0E1/ \
                   3.0)-C_k*t95860*t95872*t95859*(5.0/3.0)+C_k*t95860*t95861*t95871*t95859*(5.0/3.0)+C_k*t95860*t95862* \
                   t95867*t95859*1.0E1-C_k*t95860*t95863*t95859*t95869*(2.5E1/3.0)+t95870*t95863*t95864*t95865*t95866* \
                   (2.5E2/3.0)+t95861*t95864*t95865*t95866*t95867*(5.0E1/3.0)-t95862*t95864*t95865*t95866*t95868*6.0E1+ \
                   t95861*t95862*t95864*t95865*t95866*t95869*(2.0E1/3.0)-t95861*t95863*t95864*t95865*t95866*1.0/(t95858* \
                   t95858*t95858*t95858*t95858*t95858*t95858)*5.0E1+C_k*t95860*t95861*t95870*t95863*t95859*(2.5E1/3.0) \
                   -C_k*t95860*t95861*t95862*t95859*t95868*1.0E1)+t95895*(cxnl1*gamma_aa[index]*gx*t95875*t95886*(8.0/ \
                   3.0)+cxnl2*t95851*t95852*t95884*t95885*(1.6E1/3.0)-cxnl1*t95851*t95852*1.0/(t95874*t95874)*t95885* \
                   (8.0/3.0)-cxnl2*t95851*t95852*t95854*1.0/(t95883*t95883)*(gamma_aa[index]*gx*t95886*(1.6E1/3.0)+t95851* \
                   t95852*t95885*(1.6E1/3.0))+cxnl3*gamma_aa[index]*gx*t95851*t95852*t95880*t95887*8.0-cxnl3*gamma_aa[index]* \
                   gx*t95851*t95852*t95853*1.0/(t95879*t95879)*(gamma_aa[index]*gx*t95886*8.0+t95851*t95852*t95885*1.6E1+ \
                   gamma_aa[index]*gx*t95851*t95852*t95887*8.0)))-c0*pow(rho_a[index],1.0/3.0)*t95891*t95895*(4.0/3.0) \
                   )*(X-1.0);
            } else if (rho_a[index] > cutoff_) {
                double t97480 = 1.0/pow(rho_a[index],8.0/3.0);
                double t97481 = gamma_aa[index]*gamma_aa[index];
                double t97482 = gx*gx;
                double t97483 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t97484 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t97485 = pow(rho_a[index],5.0/3.0);
                double t97486 = 1.0/tau_a[index];
                double t97487 = C_k*t97485*t97486;
                double t97488 = t97487+1.0;
                double t97489 = pow(rho_a[index],2.0/3.0);
                double t97490 = 1.0/(tau_a[index]*tau_a[index]);
                double t97491 = t97487-1.0;
                double t97492 = t97491*t97491;
                double t97493 = t97492*t97492;
                double t97494 = C_k*C_k;
                double t97495 = pow(rho_a[index],7.0/3.0);
                double t97496 = 1.0/(tau_a[index]*tau_a[index]*tau_a[index]);
                double t97497 = 1.0/(t97488*t97488*t97488);
                double t97498 = 1.0/(t97488*t97488*t97488*t97488);
                double t97499 = 1.0/(t97488*t97488*t97488*t97488*t97488);
                double t97500 = 1.0/(t97488*t97488*t97488*t97488*t97488*t97488);
                double t97501 = 1.0/(t97488*t97488);
                double t97502 = 1.0/t97488;
                double t97503 = gamma_aa[index]*gx*t97480;
                double t97504 = t97503+1.0;
                double t97505 = 1.0/t97504;
                double t97506 = gamma_aa[index]*gx*t97480*3.0;
                double t97507 = gamma_aa[index]*gx*t97481*t97482*t97483;
                double t97508 = t97481*t97482*t97484*3.0;
                double t97509 = t97506+t97507+t97508+1.0;
                double t97510 = 1.0/t97509;
                double t97511 = gamma_aa[index]*gx*t97480*2.0;
                double t97512 = t97481*t97482*t97484;
                double t97513 = t97511+t97512+1.0;
                double t97514 = 1.0/t97513;
                double t97515 = 1.0/pow(rho_a[index],1.9E1/3.0);
                double t97516 = 1.0/pow(rho_a[index],1.1E1/3.0);
                double t97517 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]*rho_a[index]);
                double t97518 = X-1.0;
                double t97519 = cxnl1*gamma_aa[index]*gx*t97505*t97480;
                double t97520 = cxnl3*gamma_aa[index]*gx*t97510*t97481*t97482*t97483;
                double t97521 = cxnl2*t97514*t97481*t97482*t97484;
                double t97522 = cxnl0+t97520+t97521+t97519;
                double t97523 = C_k*t97502*t97490*t97485;
                double t97524 = C_k*t97490*t97491*t97492*t97485*t97498*6.0;
                double t97525 = C_k*t97490*t97493*t97485*t97499*5.0;
                double t97526 = t97523+t97524+t97525-C_k*t97501*t97490*t97491*t97485-C_k*t97490*t97492*t97485*t97497* \
                   6.0-C_k*t97500*t97490*t97491*t97493*t97485*5.0;
                v_rho_a_tau_a_[index] = -c0*pow(rho_a[index],4.0/3.0)*t97518*(t97522*(t97501*t97494*t97495*t97496* \
                   (1.0E1/3.0)-C_k*t97502*t97490*t97489*(5.0/3.0)+C_k*t97501*t97490*t97491*t97489*(5.0/3.0)+C_k*t97490* \
                   t97492*t97497*t97489*1.0E1-C_k*t97490*t97493*t97489*t97499*(2.5E1/3.0)+t97500*t97493*t97494*t97495* \
                   t97496*(2.5E2/3.0)+t97491*t97494*t97495*t97496*t97497*(5.0E1/3.0)-t97492*t97494*t97495*t97496*t97498* \
                   6.0E1+t97491*t97492*t97494*t97495*t97496*t97499*(2.0E1/3.0)-t97491*t97493*t97494*t97495*t97496*1.0/ \
                   (t97488*t97488*t97488*t97488*t97488*t97488*t97488)*5.0E1+C_k*t97500*t97490*t97491*t97493*t97489*(2.5E1/ \
                   3.0)-C_k*t97490*t97491*t97492*t97489*t97498*1.0E1)+t97526*(cxnl1*gamma_aa[index]*gx*t97505*t97516* \
                   (8.0/3.0)+cxnl2*t97514*t97515*t97481*t97482*(1.6E1/3.0)-cxnl1*1.0/(t97504*t97504)*t97515*t97481*t97482* \
                   (8.0/3.0)-cxnl2*1.0/(t97513*t97513)*t97481*t97482*t97484*(gamma_aa[index]*gx*t97516*(1.6E1/3.0)+t97515* \
                   t97481*t97482*(1.6E1/3.0))+cxnl3*gamma_aa[index]*gx*t97510*t97481*t97517*t97482*8.0-cxnl3*gamma_aa[index]* \
                   gx*t97481*t97482*1.0/(t97509*t97509)*t97483*(gamma_aa[index]*gx*t97516*8.0+t97515*t97481*t97482*1.6E1+ \
                   gamma_aa[index]*gx*t97481*t97517*t97482*8.0)))+c0*pow(rho_a[index],1.0/3.0)*t97522*t97526*t97518*(4.0/ \
                   3.0);
            } else if (rho_b[index] > cutoff_) {
                v_rho_a_tau_a_[index] = 0.0;
            } else {
                v_rho_a_tau_a_[index] = 0.0;
            } 

            //V_rho_a_tau_b
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_a_tau_b_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_a_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_a_tau_b_[index] = 0.0;
            } else {
                v_rho_a_tau_b_[index] = 0.0;
            } 

            //V_rho_b_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_rho_b_tau_a_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_rho_b_tau_a_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_rho_b_tau_a_[index] = 0.0;
            } else {
                v_rho_b_tau_a_[index] = 0.0;
            } 

            //V_rho_b_tau_b
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t95899 = 1.0/pow(rho_b[index],8.0/3.0);
                double t95900 = gamma_bb[index]*gamma_bb[index];
                double t95901 = gx*gx;
                double t95902 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]);
                double t95903 = 1.0/pow(rho_b[index],1.6E1/3.0);
                double t95904 = pow(rho_b[index],5.0/3.0);
                double t95905 = 1.0/tau_b[index];
                double t95906 = C_k*t95904*t95905;
                double t95907 = t95906+1.0;
                double t95908 = pow(rho_b[index],2.0/3.0);
                double t95909 = 1.0/(tau_b[index]*tau_b[index]);
                double t95910 = t95906-1.0;
                double t95911 = t95910*t95910;
                double t95912 = t95911*t95911;
                double t95913 = C_k*C_k;
                double t95914 = pow(rho_b[index],7.0/3.0);
                double t95915 = 1.0/(tau_b[index]*tau_b[index]*tau_b[index]);
                double t95916 = 1.0/(t95907*t95907*t95907);
                double t95917 = 1.0/(t95907*t95907*t95907*t95907);
                double t95918 = 1.0/(t95907*t95907*t95907*t95907*t95907);
                double t95919 = 1.0/(t95907*t95907*t95907*t95907*t95907*t95907);
                double t95920 = 1.0/(t95907*t95907);
                double t95921 = 1.0/t95907;
                double t95922 = gamma_bb[index]*gx*t95899;
                double t95923 = t95922+1.0;
                double t95924 = 1.0/t95923;
                double t95925 = gamma_bb[index]*gx*t95899*3.0;
                double t95926 = gamma_bb[index]*gx*t95900*t95901*t95902;
                double t95927 = t95900*t95901*t95903*3.0;
                double t95928 = t95925+t95926+t95927+1.0;
                double t95929 = 1.0/t95928;
                double t95930 = gamma_bb[index]*gx*t95899*2.0;
                double t95931 = t95900*t95901*t95903;
                double t95932 = t95930+t95931+1.0;
                double t95933 = 1.0/t95932;
                double t95934 = 1.0/pow(rho_b[index],1.9E1/3.0);
                double t95935 = 1.0/pow(rho_b[index],1.1E1/3.0);
                double t95936 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]*rho_b[index]);
                double t95937 = cxnl1*gamma_bb[index]*gx*t95924*t95899;
                double t95938 = cxnl3*gamma_bb[index]*gx*t95900*t95901*t95902*t95929;
                double t95939 = cxnl2*t95900*t95901*t95903*t95933;
                double t95940 = cxnl0+t95937+t95938+t95939;
                double t95941 = C_k*t95921*t95904*t95909;
                double t95942 = C_k*t95910*t95911*t95904*t95917*t95909*6.0;
                double t95943 = C_k*t95912*t95904*t95909*t95918*5.0;
                double t95944 = t95941+t95942+t95943-C_k*t95910*t95920*t95904*t95909-C_k*t95911*t95904*t95916*t95909* \
                   6.0-C_k*t95910*t95912*t95904*t95909*t95919*5.0;
                v_rho_b_tau_b_[index] = -(c0*pow(rho_b[index],4.0/3.0)*(t95940*(t95920*t95913*t95914*t95915*(1.0E1/ \
                   3.0)-C_k*t95921*t95908*t95909*(5.0/3.0)+C_k*t95910*t95920*t95908*t95909*(5.0/3.0)+C_k*t95911*t95916* \
                   t95908*t95909*1.0E1-C_k*t95912*t95908*t95909*t95918*(2.5E1/3.0)+t95910*t95913*t95914*t95915*t95916* \
                   (5.0E1/3.0)-t95911*t95913*t95914*t95915*t95917*6.0E1+t95912*t95913*t95914*t95915*t95919*(2.5E2/3.0) \
                   +t95910*t95911*t95913*t95914*t95915*t95918*(2.0E1/3.0)-t95910*t95912*t95913*t95914*t95915*1.0/(t95907* \
                   t95907*t95907*t95907*t95907*t95907*t95907)*5.0E1-C_k*t95910*t95911*t95908*t95917*t95909*1.0E1+C_k* \
                   t95910*t95912*t95908*t95909*t95919*(2.5E1/3.0))+t95944*(cxnl1*gamma_bb[index]*gx*t95924*t95935*(8.0/ \
                   3.0)+cxnl2*t95900*t95901*t95933*t95934*(1.6E1/3.0)-cxnl1*t95900*t95901*1.0/(t95923*t95923)*t95934* \
                   (8.0/3.0)-cxnl2*t95900*t95901*t95903*1.0/(t95932*t95932)*(gamma_bb[index]*gx*t95935*(1.6E1/3.0)+t95900* \
                   t95901*t95934*(1.6E1/3.0))+cxnl3*gamma_bb[index]*gx*t95900*t95901*t95936*t95929*8.0-cxnl3*gamma_bb[index]* \
                   gx*t95900*t95901*t95902*1.0/(t95928*t95928)*(gamma_bb[index]*gx*t95935*8.0+t95900*t95901*t95934*1.6E1+ \
                   gamma_bb[index]*gx*t95900*t95901*t95936*8.0)))-c0*pow(rho_b[index],1.0/3.0)*t95940*t95944*(4.0/3.0) \
                   )*(X-1.0);
            } else if (rho_a[index] > cutoff_) {
                v_rho_b_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                double t96712 = 1.0/pow(rho_b[index],8.0/3.0);
                double t96713 = gamma_bb[index]*gamma_bb[index];
                double t96714 = gx*gx;
                double t96715 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]);
                double t96716 = 1.0/pow(rho_b[index],1.6E1/3.0);
                double t96717 = pow(rho_b[index],5.0/3.0);
                double t96718 = 1.0/tau_b[index];
                double t96719 = C_k*t96717*t96718;
                double t96720 = t96719+1.0;
                double t96721 = pow(rho_b[index],2.0/3.0);
                double t96722 = 1.0/(tau_b[index]*tau_b[index]);
                double t96723 = t96719-1.0;
                double t96724 = t96723*t96723;
                double t96725 = t96724*t96724;
                double t96726 = C_k*C_k;
                double t96727 = pow(rho_b[index],7.0/3.0);
                double t96728 = 1.0/(tau_b[index]*tau_b[index]*tau_b[index]);
                double t96729 = 1.0/(t96720*t96720*t96720);
                double t96730 = 1.0/(t96720*t96720*t96720*t96720);
                double t96731 = 1.0/(t96720*t96720*t96720*t96720*t96720);
                double t96732 = 1.0/(t96720*t96720*t96720*t96720*t96720*t96720);
                double t96733 = 1.0/(t96720*t96720);
                double t96734 = 1.0/t96720;
                double t96735 = gamma_bb[index]*gx*t96712;
                double t96736 = t96735+1.0;
                double t96737 = 1.0/t96736;
                double t96738 = gamma_bb[index]*gx*t96712*3.0;
                double t96739 = gamma_bb[index]*gx*t96713*t96714*t96715;
                double t96740 = t96713*t96714*t96716*3.0;
                double t96741 = t96740+t96738+t96739+1.0;
                double t96742 = 1.0/t96741;
                double t96743 = gamma_bb[index]*gx*t96712*2.0;
                double t96744 = t96713*t96714*t96716;
                double t96745 = t96743+t96744+1.0;
                double t96746 = 1.0/t96745;
                double t96747 = 1.0/pow(rho_b[index],1.9E1/3.0);
                double t96748 = 1.0/pow(rho_b[index],1.1E1/3.0);
                double t96749 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]*rho_b[index]);
                double t96750 = X-1.0;
                double t96751 = cxnl1*gamma_bb[index]*gx*t96712*t96737;
                double t96752 = cxnl3*gamma_bb[index]*gx*t96713*t96714*t96715*t96742;
                double t96753 = cxnl2*t96713*t96714*t96716*t96746;
                double t96754 = cxnl0+t96751+t96752+t96753;
                double t96755 = C_k*t96722*t96734*t96717;
                double t96756 = C_k*t96730*t96722*t96723*t96724*t96717*6.0;
                double t96757 = C_k*t96722*t96731*t96725*t96717*5.0;
                double t96758 = t96755+t96756+t96757-C_k*t96722*t96723*t96733*t96717-C_k*t96722*t96724*t96717*t96729* \
                   6.0-C_k*t96722*t96723*t96732*t96725*t96717*5.0;
                v_rho_b_tau_b_[index] = -c0*pow(rho_b[index],4.0/3.0)*t96750*(t96754*(t96733*t96726*t96727*t96728* \
                   (1.0E1/3.0)-C_k*t96721*t96722*t96734*(5.0/3.0)-C_k*t96721*t96722*t96731*t96725*(2.5E1/3.0)+C_k*t96721* \
                   t96722*t96723*t96733*(5.0/3.0)+C_k*t96721*t96722*t96724*t96729*1.0E1-t96730*t96724*t96726*t96727*t96728* \
                   6.0E1+t96732*t96725*t96726*t96727*t96728*(2.5E2/3.0)+t96723*t96726*t96727*t96728*t96729*(5.0E1/3.0) \
                   +t96731*t96723*t96724*t96726*t96727*t96728*(2.0E1/3.0)-1.0/(t96720*t96720*t96720*t96720*t96720*t96720* \
                   t96720)*t96723*t96725*t96726*t96727*t96728*5.0E1-C_k*t96721*t96730*t96722*t96723*t96724*1.0E1+C_k* \
                   t96721*t96722*t96723*t96732*t96725*(2.5E1/3.0))+t96758*(cxnl1*gamma_bb[index]*gx*t96737*t96748*(8.0/ \
                   3.0)+cxnl2*t96713*t96714*t96746*t96747*(1.6E1/3.0)-cxnl1*t96713*t96714*1.0/(t96736*t96736)*t96747* \
                   (8.0/3.0)-cxnl2*t96713*t96714*t96716*1.0/(t96745*t96745)*(gamma_bb[index]*gx*t96748*(1.6E1/3.0)+t96713* \
                   t96714*t96747*(1.6E1/3.0))+cxnl3*gamma_bb[index]*gx*t96713*t96714*t96742*t96749*8.0-cxnl3*gamma_bb[index]* \
                   gx*t96713*t96714*1.0/(t96741*t96741)*t96715*(gamma_bb[index]*gx*t96748*8.0+t96713*t96714*t96747*1.6E1+ \
                   gamma_bb[index]*gx*t96713*t96714*t96749*8.0)))+c0*pow(rho_b[index],1.0/3.0)*t96750*t96754*t96758*(4.0/ \
                   3.0);
            } else {
                v_rho_b_tau_b_[index] = 0.0;
            } 

            //V_tau_a_tau_a
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t95946 = 1.0/pow(rho_a[index],8.0/3.0);
                double t95947 = gamma_aa[index]*gamma_aa[index];
                double t95948 = gx*gx;
                double t95949 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t95950 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t95951 = pow(rho_a[index],5.0/3.0);
                double t95952 = 1.0/tau_a[index];
                double t95953 = C_k*t95951*t95952;
                double t95954 = t95953+1.0;
                double t95955 = 1.0/(tau_a[index]*tau_a[index]*tau_a[index]);
                double t95956 = t95953-1.0;
                double t95957 = t95956*t95956;
                double t95958 = t95957*t95957;
                double t95959 = C_k*C_k;
                double t95960 = pow(rho_a[index],1.0E1/3.0);
                double t95961 = 1.0/(tau_a[index]*tau_a[index]*tau_a[index]*tau_a[index]);
                double t95962 = 1.0/(t95954*t95954*t95954);
                double t95963 = 1.0/(t95954*t95954*t95954*t95954);
                double t95964 = 1.0/(t95954*t95954*t95954*t95954*t95954);
                double t95965 = 1.0/(t95954*t95954*t95954*t95954*t95954*t95954);
                double t95966 = 1.0/(t95954*t95954);
                v_tau_a_tau_a_[index] = c0*pow(rho_a[index],4.0/3.0)*(X-1.0)*(cxnl0+(cxnl2*t95950*t95947*t95948)/ \
                   (gamma_aa[index]*gx*t95946*2.0+t95950*t95947*t95948+1.0)+(cxnl1*gamma_aa[index]*gx*t95946)/(gamma_aa[index]* \
                   gx*t95946+1.0)+(cxnl3*gamma_aa[index]*gx*t95947*t95948*t95949)/(gamma_aa[index]*gx*t95946*3.0+t95950* \
                   t95947*t95948*3.0+gamma_aa[index]*gx*t95947*t95948*t95949+1.0))*(t95960*t95961*t95966*t95959*2.0-(C_k* \
                   t95951*t95955*2.0)/t95954+C_k*t95951*t95962*t95955*t95957*1.2E1-C_k*t95951*t95955*t95964*t95958*1.0E1+ \
                   C_k*t95951*t95955*t95956*t95966*2.0+t95960*t95961*t95962*t95956*t95959*1.0E1-t95960*t95961*t95963* \
                   t95957*t95959*3.6E1+t95960*t95961*t95965*t95958*t95959*5.0E1+t95960*t95961*t95964*t95956*t95957*t95959* \
                   4.0-t95960*t95961*1.0/(t95954*t95954*t95954*t95954*t95954*t95954*t95954)*t95956*t95958*t95959*3.0E1- \
                   C_k*t95951*t95963*t95955*t95956*t95957*1.2E1+C_k*t95951*t95955*t95956*t95965*t95958*1.0E1);
            } else if (rho_a[index] > cutoff_) {
                double t97531 = 1.0/pow(rho_a[index],8.0/3.0);
                double t97532 = gamma_aa[index]*gamma_aa[index];
                double t97533 = gx*gx;
                double t97534 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                   rho_a[index]*rho_a[index]);
                double t97535 = 1.0/pow(rho_a[index],1.6E1/3.0);
                double t97536 = pow(rho_a[index],5.0/3.0);
                double t97537 = 1.0/tau_a[index];
                double t97538 = C_k*t97536*t97537;
                double t97539 = t97538+1.0;
                double t97540 = 1.0/(tau_a[index]*tau_a[index]*tau_a[index]);
                double t97541 = t97538-1.0;
                double t97542 = t97541*t97541;
                double t97543 = t97542*t97542;
                double t97544 = C_k*C_k;
                double t97545 = pow(rho_a[index],1.0E1/3.0);
                double t97546 = 1.0/(tau_a[index]*tau_a[index]*tau_a[index]*tau_a[index]);
                double t97547 = 1.0/(t97539*t97539*t97539);
                double t97548 = 1.0/(t97539*t97539*t97539*t97539);
                double t97549 = 1.0/(t97539*t97539*t97539*t97539*t97539);
                double t97550 = 1.0/(t97539*t97539*t97539*t97539*t97539*t97539);
                double t97551 = 1.0/(t97539*t97539);
                v_tau_a_tau_a_[index] = c0*pow(rho_a[index],4.0/3.0)*(X-1.0)*(cxnl0+(cxnl2*t97532*t97533*t97535)/ \
                   (gamma_aa[index]*gx*t97531*2.0+t97532*t97533*t97535+1.0)+(cxnl1*gamma_aa[index]*gx*t97531)/(gamma_aa[index]* \
                   gx*t97531+1.0)+(cxnl3*gamma_aa[index]*gx*t97532*t97533*t97534)/(gamma_aa[index]*gx*t97531*3.0+t97532* \
                   t97533*t97535*3.0+gamma_aa[index]*gx*t97532*t97533*t97534+1.0))*(t97551*t97544*t97545*t97546*2.0-(C_k* \
                   t97540*t97536*2.0)/t97539+C_k*t97540*t97541*t97551*t97536*2.0+C_k*t97540*t97542*t97536*t97547*1.2E1- \
                   C_k*t97540*t97543*t97536*t97549*1.0E1+t97550*t97543*t97544*t97545*t97546*5.0E1+t97541*t97544*t97545* \
                   t97546*t97547*1.0E1-t97542*t97544*t97545*t97546*t97548*3.6E1+t97541*t97542*t97544*t97545*t97546*t97549* \
                   4.0-t97541*t97543*t97544*t97545*t97546*1.0/(t97539*t97539*t97539*t97539*t97539*t97539*t97539)*3.0E1+ \
                   C_k*t97540*t97541*t97550*t97543*t97536*1.0E1-C_k*t97540*t97541*t97542*t97536*t97548*1.2E1);
            } else if (rho_b[index] > cutoff_) {
                v_tau_a_tau_a_[index] = 0.0;
            } else {
                v_tau_a_tau_a_[index] = 0.0;
            } 

            //V_tau_a_tau_b
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                v_tau_a_tau_b_[index] = 0.0;
            } else if (rho_a[index] > cutoff_) {
                v_tau_a_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                v_tau_a_tau_b_[index] = 0.0;
            } else {
                v_tau_a_tau_b_[index] = 0.0;
            } 

            //V_tau_b_tau_b
            if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                double t95969 = 1.0/pow(rho_b[index],8.0/3.0);
                double t95970 = gamma_bb[index]*gamma_bb[index];
                double t95971 = gx*gx;
                double t95972 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]);
                double t95973 = 1.0/pow(rho_b[index],1.6E1/3.0);
                double t95974 = pow(rho_b[index],5.0/3.0);
                double t95975 = 1.0/tau_b[index];
                double t95976 = C_k*t95974*t95975;
                double t95977 = t95976+1.0;
                double t95978 = 1.0/(tau_b[index]*tau_b[index]*tau_b[index]);
                double t95979 = t95976-1.0;
                double t95980 = t95979*t95979;
                double t95981 = t95980*t95980;
                double t95982 = C_k*C_k;
                double t95983 = pow(rho_b[index],1.0E1/3.0);
                double t95984 = 1.0/(tau_b[index]*tau_b[index]*tau_b[index]*tau_b[index]);
                double t95985 = 1.0/(t95977*t95977*t95977);
                double t95986 = 1.0/(t95977*t95977*t95977*t95977);
                double t95987 = 1.0/(t95977*t95977*t95977*t95977*t95977);
                double t95988 = 1.0/(t95977*t95977*t95977*t95977*t95977*t95977);
                double t95989 = 1.0/(t95977*t95977);
                v_tau_b_tau_b_[index] = c0*pow(rho_b[index],4.0/3.0)*(X-1.0)*(cxnl0+(cxnl2*t95970*t95971*t95973)/ \
                   (gamma_bb[index]*gx*t95969*2.0+t95970*t95971*t95973+1.0)+(cxnl1*gamma_bb[index]*gx*t95969)/(gamma_bb[index]* \
                   gx*t95969+1.0)+(cxnl3*gamma_bb[index]*gx*t95970*t95971*t95972)/(gamma_bb[index]*gx*t95969*3.0+t95970* \
                   t95971*t95973*3.0+gamma_bb[index]*gx*t95970*t95971*t95972+1.0))*(t95982*t95983*t95984*t95989*2.0-(C_k* \
                   t95974*t95978*2.0)/t95977+C_k*t95980*t95974*t95985*t95978*1.2E1-C_k*t95981*t95974*t95978*t95987*1.0E1+ \
                   C_k*t95974*t95978*t95979*t95989*2.0-t95980*t95982*t95983*t95984*t95986*3.6E1+t95981*t95982*t95983* \
                   t95984*t95988*5.0E1+t95982*t95983*t95984*t95985*t95979*1.0E1+t95980*t95982*t95983*t95984*t95987*t95979* \
                   4.0-t95981*t95982*t95983*t95984*1.0/(t95977*t95977*t95977*t95977*t95977*t95977*t95977)*t95979*3.0E1- \
                   C_k*t95980*t95974*t95986*t95978*t95979*1.2E1+C_k*t95981*t95974*t95978*t95979*t95988*1.0E1);
            } else if (rho_a[index] > cutoff_) {
                v_tau_b_tau_b_[index] = 0.0;
            } else if (rho_b[index] > cutoff_) {
                double t96762 = 1.0/pow(rho_b[index],8.0/3.0);
                double t96763 = gamma_bb[index]*gamma_bb[index];
                double t96764 = gx*gx;
                double t96765 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                   rho_b[index]*rho_b[index]);
                double t96766 = 1.0/pow(rho_b[index],1.6E1/3.0);
                double t96767 = pow(rho_b[index],5.0/3.0);
                double t96768 = 1.0/tau_b[index];
                double t96769 = C_k*t96767*t96768;
                double t96770 = t96769+1.0;
                double t96771 = 1.0/(tau_b[index]*tau_b[index]*tau_b[index]);
                double t96772 = t96769-1.0;
                double t96773 = t96772*t96772;
                double t96774 = t96773*t96773;
                double t96775 = C_k*C_k;
                double t96776 = pow(rho_b[index],1.0E1/3.0);
                double t96777 = 1.0/(tau_b[index]*tau_b[index]*tau_b[index]*tau_b[index]);
                double t96778 = 1.0/(t96770*t96770*t96770);
                double t96779 = 1.0/(t96770*t96770*t96770*t96770);
                double t96780 = 1.0/(t96770*t96770*t96770*t96770*t96770);
                double t96781 = 1.0/(t96770*t96770*t96770*t96770*t96770*t96770);
                double t96782 = 1.0/(t96770*t96770);
                v_tau_b_tau_b_[index] = c0*pow(rho_b[index],4.0/3.0)*(X-1.0)*(cxnl0+(cxnl2*t96763*t96764*t96766)/ \
                   (gamma_bb[index]*gx*t96762*2.0+t96763*t96764*t96766+1.0)+(cxnl1*gamma_bb[index]*gx*t96762)/(gamma_bb[index]* \
                   gx*t96762+1.0)+(cxnl3*gamma_bb[index]*gx*t96763*t96764*t96765)/(gamma_bb[index]*gx*t96762*3.0+t96763* \
                   t96764*t96766*3.0+gamma_bb[index]*gx*t96763*t96764*t96765+1.0))*(t96782*t96775*t96776*t96777*2.0-(C_k* \
                   t96771*t96767*2.0)/t96770-C_k*t96771*t96780*t96774*t96767*1.0E1+C_k*t96771*t96772*t96782*t96767*2.0+ \
                   C_k*t96771*t96773*t96767*t96778*1.2E1+t96781*t96774*t96775*t96776*t96777*5.0E1+t96772*t96775*t96776* \
                   t96777*t96778*1.0E1-t96773*t96775*t96776*t96777*t96779*3.6E1+t96780*t96772*t96773*t96775*t96776*t96777* \
                   4.0-1.0/(t96770*t96770*t96770*t96770*t96770*t96770*t96770)*t96772*t96774*t96775*t96776*t96777*3.0E1+ \
                   C_k*t96771*t96772*t96781*t96774*t96767*1.0E1-C_k*t96771*t96772*t96773*t96767*t96779*1.2E1);
            } else {
                v_tau_b_tau_b_[index] = 0.0;
            } 

            if (is_gga_) {

                //V_gamma_aa_tau_a
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    double t95991 = pow(rho_a[index],5.0/3.0);
                    double t95992 = 1.0/(tau_a[index]*tau_a[index]);
                    double t95993 = 1.0/tau_a[index];
                    double t95994 = C_k*t95991*t95993;
                    double t95995 = t95994-1.0;
                    double t95996 = t95994+1.0;
                    double t95997 = t95995*t95995;
                    double t95998 = t95997*t95997;
                    double t95999 = 1.0/pow(rho_a[index],8.0/3.0);
                    double t96000 = gx*gx;
                    double t96001 = 1.0/pow(rho_a[index],1.6E1/3.0);
                    double t96002 = gamma_aa[index]*gamma_aa[index];
                    double t96003 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                       rho_a[index]*rho_a[index]);
                    double t96004 = gamma_aa[index]*gx*t95999;
                    double t96005 = t96004+1.0;
                    double t96006 = gamma_aa[index]*gx*t95999*3.0;
                    double t96007 = gamma_aa[index]*gx*t96000*t96002*t96003;
                    double t96008 = t96000*t96001*t96002*3.0;
                    double t96009 = t96006+t96007+t96008+1.0;
                    double t96010 = gamma_aa[index]*gx*t95999*2.0;
                    double t96011 = t96000*t96001*t96002;
                    double t96012 = t96010+t96011+1.0;
                    v_gamma_aa_tau_a_[index] = c0*pow(rho_a[index],4.0/3.0)*(X-1.0)*((cxnl1*gx*t95999)/t96005+(cxnl2* \
                       gamma_aa[index]*t96000*t96001*2.0)/t96012-cxnl1*gamma_aa[index]*t96000*t96001*1.0/(t96005*t96005)- \
                       cxnl2*t96000*t96001*t96002*1.0/(t96012*t96012)*(gx*t95999*2.0+gamma_aa[index]*t96000*t96001*2.0)+(cxnl3* \
                       gx*t96000*t96002*t96003*3.0)/t96009-cxnl3*gamma_aa[index]*gx*t96000*t96002*t96003*1.0/(t96009*t96009) \
                       *(gx*t95999*3.0+gamma_aa[index]*t96000*t96001*6.0+gx*t96000*t96002*t96003*3.0))*((C_k*t95991*t95992) \
                       /t95996-C_k*t95991*t95992*t95995*1.0/(t95996*t95996)-C_k*t95991*t95992*1.0/(t95996*t95996*t95996)* \
                       t95997*6.0+C_k*t95991*t95992*1.0/(t95996*t95996*t95996*t95996*t95996)*t95998*5.0+C_k*t95991*t95992* \
                       t95995*1.0/(t95996*t95996*t95996*t95996)*t95997*6.0-C_k*t95991*t95992*t95995*1.0/(t95996*t95996*t95996* \
                       t95996*t95996*t95996)*t95998*5.0);
                } else if (rho_a[index] > cutoff_) {
                    double t97555 = pow(rho_a[index],5.0/3.0);
                    double t97556 = 1.0/(tau_a[index]*tau_a[index]);
                    double t97557 = 1.0/tau_a[index];
                    double t97558 = C_k*t97555*t97557;
                    double t97559 = t97558-1.0;
                    double t97560 = t97558+1.0;
                    double t97561 = t97559*t97559;
                    double t97562 = t97561*t97561;
                    double t97563 = 1.0/pow(rho_a[index],8.0/3.0);
                    double t97564 = gx*gx;
                    double t97565 = 1.0/pow(rho_a[index],1.6E1/3.0);
                    double t97566 = gamma_aa[index]*gamma_aa[index];
                    double t97567 = 1.0/(rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]*rho_a[index]* \
                       rho_a[index]*rho_a[index]);
                    double t97568 = gamma_aa[index]*gx*t97563;
                    double t97569 = t97568+1.0;
                    double t97570 = gamma_aa[index]*gx*t97563*3.0;
                    double t97571 = gamma_aa[index]*gx*t97564*t97566*t97567;
                    double t97572 = t97564*t97565*t97566*3.0;
                    double t97573 = t97570+t97571+t97572+1.0;
                    double t97574 = gamma_aa[index]*gx*t97563*2.0;
                    double t97575 = t97564*t97565*t97566;
                    double t97576 = t97574+t97575+1.0;
                    v_gamma_aa_tau_a_[index] = c0*pow(rho_a[index],4.0/3.0)*(X-1.0)*((cxnl1*gx*t97563)/t97569+(cxnl2* \
                       gamma_aa[index]*t97564*t97565*2.0)/t97576-cxnl1*gamma_aa[index]*t97564*t97565*1.0/(t97569*t97569)- \
                       cxnl2*t97564*t97565*t97566*1.0/(t97576*t97576)*(gx*t97563*2.0+gamma_aa[index]*t97564*t97565*2.0)+(cxnl3* \
                       gx*t97564*t97566*t97567*3.0)/t97573-cxnl3*gamma_aa[index]*gx*t97564*1.0/(t97573*t97573)*t97566*t97567* \
                       (gx*t97563*3.0+gamma_aa[index]*t97564*t97565*6.0+gx*t97564*t97566*t97567*3.0))*((C_k*t97555*t97556) \
                       /t97560-C_k*1.0/(t97560*t97560*t97560)*t97561*t97555*t97556*6.0+C_k*1.0/(t97560*t97560*t97560*t97560* \
                       t97560)*t97562*t97555*t97556*5.0-C_k*1.0/(t97560*t97560)*t97555*t97556*t97559+C_k*1.0/(t97560*t97560* \
                       t97560*t97560)*t97561*t97555*t97556*t97559*6.0-C_k*1.0/(t97560*t97560*t97560*t97560*t97560*t97560) \
                       *t97562*t97555*t97556*t97559*5.0);
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } else {
                    v_gamma_aa_tau_a_[index] = 0.0;
                } 

                //V_gamma_aa_tau_b
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_aa_tau_b_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_aa_tau_b_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_aa_tau_b_[index] = 0.0;
                } else {
                    v_gamma_aa_tau_b_[index] = 0.0;
                } 

                //V_gamma_ab_tau_a
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_ab_tau_a_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_ab_tau_a_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_ab_tau_a_[index] = 0.0;
                } else {
                    v_gamma_ab_tau_a_[index] = 0.0;
                } 

                //V_gamma_ab_tau_b
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_ab_tau_b_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_ab_tau_b_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_ab_tau_b_[index] = 0.0;
                } else {
                    v_gamma_ab_tau_b_[index] = 0.0;
                } 

                //V_gamma_bb_tau_a
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    v_gamma_bb_tau_a_[index] = 0.0;
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_bb_tau_a_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    v_gamma_bb_tau_a_[index] = 0.0;
                } else {
                    v_gamma_bb_tau_a_[index] = 0.0;
                } 

                //V_gamma_bb_tau_b
                if (rho_a[index] > cutoff_ && rho_b[index] > cutoff_) {
                    double t96018 = pow(rho_b[index],5.0/3.0);
                    double t96019 = 1.0/(tau_b[index]*tau_b[index]);
                    double t96020 = 1.0/tau_b[index];
                    double t96021 = C_k*t96020*t96018;
                    double t96022 = t96021-1.0;
                    double t96023 = t96021+1.0;
                    double t96024 = t96022*t96022;
                    double t96025 = t96024*t96024;
                    double t96026 = 1.0/pow(rho_b[index],8.0/3.0);
                    double t96027 = gx*gx;
                    double t96028 = 1.0/pow(rho_b[index],1.6E1/3.0);
                    double t96029 = gamma_bb[index]*gamma_bb[index];
                    double t96030 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                       rho_b[index]*rho_b[index]);
                    double t96031 = gamma_bb[index]*gx*t96026;
                    double t96032 = t96031+1.0;
                    double t96033 = gamma_bb[index]*gx*t96026*3.0;
                    double t96034 = gamma_bb[index]*gx*t96030*t96027*t96029;
                    double t96035 = t96027*t96028*t96029*3.0;
                    double t96036 = t96033+t96034+t96035+1.0;
                    double t96037 = gamma_bb[index]*gx*t96026*2.0;
                    double t96038 = t96027*t96028*t96029;
                    double t96039 = t96037+t96038+1.0;
                    v_gamma_bb_tau_b_[index] = c0*pow(rho_b[index],4.0/3.0)*(X-1.0)*((cxnl1*gx*t96026)/t96032-cxnl1*gamma_bb[index]* \
                       1.0/(t96032*t96032)*t96027*t96028+(cxnl2*gamma_bb[index]*t96027*t96028*2.0)/t96039-cxnl2*t96027*t96028* \
                       t96029*1.0/(t96039*t96039)*(gx*t96026*2.0+gamma_bb[index]*t96027*t96028*2.0)+(cxnl3*gx*t96030*t96027* \
                       t96029*3.0)/t96036-cxnl3*gamma_bb[index]*gx*t96030*t96027*1.0/(t96036*t96036)*t96029*(gx*t96026*3.0+ \
                       gamma_bb[index]*t96027*t96028*6.0+gx*t96030*t96027*t96029*3.0))*((C_k*t96018*t96019)/t96023-C_k*t96022* \
                       1.0/(t96023*t96023)*t96018*t96019-C_k*1.0/(t96023*t96023*t96023)*t96024*t96018*t96019*6.0+C_k*1.0/ \
                       (t96023*t96023*t96023*t96023*t96023)*t96025*t96018*t96019*5.0+C_k*t96022*1.0/(t96023*t96023*t96023* \
                       t96023)*t96024*t96018*t96019*6.0-C_k*t96022*1.0/(t96023*t96023*t96023*t96023*t96023*t96023)*t96025* \
                       t96018*t96019*5.0);
                } else if (rho_a[index] > cutoff_) {
                    v_gamma_bb_tau_b_[index] = 0.0;
                } else if (rho_b[index] > cutoff_) {
                    double t96789 = pow(rho_b[index],5.0/3.0);
                    double t96790 = 1.0/(tau_b[index]*tau_b[index]);
                    double t96791 = 1.0/tau_b[index];
                    double t96792 = C_k*t96791*t96789;
                    double t96793 = t96792-1.0;
                    double t96794 = t96792+1.0;
                    double t96795 = t96793*t96793;
                    double t96796 = t96795*t96795;
                    double t96797 = 1.0/pow(rho_b[index],8.0/3.0);
                    double t96798 = gx*gx;
                    double t96799 = 1.0/pow(rho_b[index],1.6E1/3.0);
                    double t96800 = gamma_bb[index]*gamma_bb[index];
                    double t96801 = 1.0/(rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]*rho_b[index]* \
                       rho_b[index]*rho_b[index]);
                    double t96802 = gamma_bb[index]*gx*t96797;
                    double t96803 = t96802+1.0;
                    double t96804 = gamma_bb[index]*gx*t96797*3.0;
                    double t96805 = gamma_bb[index]*gx*t96800*t96801*t96798;
                    double t96806 = t96800*t96798*t96799*3.0;
                    double t96807 = t96804+t96805+t96806+1.0;
                    double t96808 = gamma_bb[index]*gx*t96797*2.0;
                    double t96809 = t96800*t96798*t96799;
                    double t96810 = t96808+t96809+1.0;
                    v_gamma_bb_tau_b_[index] = c0*pow(rho_b[index],4.0/3.0)*(X-1.0)*((cxnl1*gx*t96797)/t96803+(cxnl2* \
                       gamma_bb[index]*t96798*t96799*2.0)/t96810-cxnl1*gamma_bb[index]*1.0/(t96803*t96803)*t96798*t96799- \
                       cxnl2*t96800*1.0/(t96810*t96810)*t96798*t96799*(gx*t96797*2.0+gamma_bb[index]*t96798*t96799*2.0)+(cxnl3* \
                       gx*t96800*t96801*t96798*3.0)/t96807-cxnl3*gamma_bb[index]*gx*t96800*t96801*1.0/(t96807*t96807)*t96798* \
                       (gx*t96797*3.0+gamma_bb[index]*t96798*t96799*6.0+gx*t96800*t96801*t96798*3.0))*((C_k*t96790*t96789) \
                       /t96794-C_k*t96790*t96793*1.0/(t96794*t96794)*t96789-C_k*t96790*1.0/(t96794*t96794*t96794)*t96795* \
                       t96789*6.0+C_k*t96790*1.0/(t96794*t96794*t96794*t96794*t96794)*t96796*t96789*5.0+C_k*t96790*t96793* \
                       1.0/(t96794*t96794*t96794*t96794)*t96795*t96789*6.0-C_k*t96790*t96793*1.0/(t96794*t96794*t96794*t96794* \
                       t96794*t96794)*t96796*t96789*5.0);
                } else {
                    v_gamma_bb_tau_b_[index] = 0.0;
                } 

            }
        }
    }
}

}}

